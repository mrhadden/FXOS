  Mon Aug  9 2021 16:52                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",0
     7                        ;/*-----------------------------------------------
                    -----------------------------/
     8                        ; /  FatFs - Generic FAT Filesystem Module  R0.14 
                                                  /
     9                        ; /-----------------------------------------------
                    ------------------------------/
    10                        ; /
    11                        ; / Copyright (C) 2019, ChaN, all right reserved.
    12                        ; /
    13                        ; / FatFs module is an open source software. Redis
                    tribution and use of FatFs in
    14                        ; / source and binary forms, with or without modif
                    ication, are permitted provided
    15                        ; / that the following condition is met:
    16                        ; /
    17                        ; / 1. Redistributions of source code must retain 
                    the above copyright notice,
    18                        ; /    this condition and the following disclaimer
                    .
    19                        ; /
    20                        ; / This software is provided by the copyright hol
                    der and contributors "AS IS"
    21                        ; / and any warranties related to this software ar
                    e DISCLAIMED.
    22                        ; / The copyright owner or contributors be NOT LIA
                    BLE for any damages caused
    23                        ; / by use of this software.
    24                        ; /
    25                        ; /-----------------------------------------------
                    -----------------------------*/
    26                        ;
    27                        ;#include "fxtypes.h"
    28                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
    29                        	.stag	_fx_bytebits,8,1
    30                        	.member	b7,0,14,17,1
    31                        	.member	b6,1,14,17,1
    32                        	.member	b5,2,14,17,1
    33                        	.member	b4,3,14,17,1
    34                        	.member	b3,4,14,17,1
    35                        	.member	b2,5,14,17,1
    36                        	.member	b1,6,14,17,1
    37                        	.member	b0,7,14,17,1
    38                        	.eos
    39                        	.stag	_fx_node,384,2
  Mon Aug  9 2021 16:52                                                Page 2


    40                        	.member	type,0,14,8,8
    41                        	.member	Reserved0,8,14,8,8
    42                        	.member	data,16,129,8,32
    43                        	.member	last,48,138,8,32,2
    44                        	.member	next,80,138,8,32,2
    45                        	.member	name,112,110,8,0,32
    46                        	.member	Reserved1,368,16,8,16
    47                        	.eos
    48                        	.stag	_fx_nodelist,96,3
    49                        	.member	listhead,0,138,8,32,2
    50                        	.member	listData,32,129,8,32
    51                        	.member	deallocator,64,641,8,32
    52                        	.eos
    53                        	.stag	_fx_queue,80,4
    54                        	.member	count,0,5,8,16
    55                        	.member	front,16,138,8,32,2
    56                        	.member	rear,48,138,8,32,2
    57                        	.eos
    58                        	.stag	fake5_,32,5
    59                        	.member	subsystem,0,14,8,8
    60                        	.member	level,8,14,8,8
    61                        	.member	error,16,16,8,16
    62                        	.eos
    63                        	.stag	_fx_process_signal,16,6
    64                        	.member	cbSize,0,16,8,16
    65                        	.eos
    66                        	.stag	_fx_semaphore,16,7
    67                        	.member	reserved,0,5,8,16
    68                        	.eos
    69                        	.stag	_fx_fileBlock,552,8
    70                        	.member	openCount,0,16,8,16
    71                        	.member	lockCount,16,16,8,16
    72                        	.member	dirty,32,14,8,8
    73                        	.member	fileBuffer,40,110,8,0,64
    74                        	.eos
    75                        	.stag	_fx_irq_data,48,9
    76                        	.member	line,0,5,8,16
    77                        	.member	keycode,16,142,8,32
    78                        	.eos
    79                        	.stag	_task,48,10
    80                        	.member	SPL,0,14,8,8
    81                        	.member	SPH,8,14,8,8
    82                        	.member	pstack,16,142,8,32
    83                        	.eos
    84                        	.stag	_task_stack,32,11
    85                        	.member	SS,0,142,8,32
    86                        	.eos
    87                        	.stag	int_regs,104,12
    88                        	.member	PB,0,14,8,8
    89                        	.member	PH,8,14,8,8
    90                        	.member	PL,16,14,8,8
    91                        	.member	PP,24,14,8,8
    92                        	.member	DB,32,14,8,8
    93                        	.member	DH,40,14,8,8
    94                        	.member	DL,48,14,8,8
    95                        	.member	AH,56,14,8,8
    96                        	.member	AL,64,14,8,8
    97                        	.member	XH,72,14,8,8
  Mon Aug  9 2021 16:52                                                Page 3


    98                        	.member	XL,80,14,8,8
    99                        	.member	YH,88,14,8,8
   100                        	.member	YL,96,14,8,8
   101                        	.eos
   102                        	.stag	_fx_eventMessage,312,13
   103                        	.member	src,0,18,8,32
   104                        	.member	dest,32,18,8,32
   105                        	.member	type,64,16,8,16
   106                        	.member	hwnd,80,129,8,32
   107                        	.member	pheap,112,129,8,32
   108                        	.member	msgTime,144,18,8,32
   109                        	.member	data,176,110,8,0,16
   110                        	.member	attr,304,14,8,8
   111                        	.eos
   112                        	.stag	_fx_cmdMessage,312,14
   113                        	.member	src,0,18,8,32
   114                        	.member	dest,32,18,8,32
   115                        	.member	type,64,16,8,16
   116                        	.member	hwnd,80,129,8,32
   117                        	.member	pheap,112,129,8,32
   118                        	.member	msgTime,144,18,8,32
   119                        	.member	cmdCId,176,16,8,16
   120                        	.member	cmdMId,192,16,8,16
   121                        	.member	parameter1,208,18,8,32
   122                        	.member	parameter2,240,18,8,32
   123                        	.member	parameter3,272,18,8,32
   124                        	.member	attr,304,14,8,8
   125                        	.eos
   126                        	.stag	_fx_console_ctl,448,15
   127                        	.member	maxCols,0,5,8,16
   128                        	.member	maxRows,16,5,8,16
   129                        	.member	curX,32,5,8,16
   130                        	.member	curY,48,5,8,16
   131                        	.member	fgColor,64,5,8,16
   132                        	.member	bgColor,80,5,8,16
   133                        	.member	mode,96,14,8,8
   134                        	.member	kbBuffer,104,101,8,0,16
   135                        	.member	screenBuffer,360,142,8,32
   136                        	.member	desktopMode,392,14,8,8
   137                        	.member	lastMouseButton,400,5,8,16
   138                        	.member	lastMouseX,416,5,8,16
   139                        	.member	lastMouseY,432,5,8,16
   140                        	.eos
   141                        	.stag	_fx_desktop_ctl,392,16
   142                        	.member	desktopMode,0,14,8,8
   143                        	.member	cursorCtl,8,5,8,16
   144                        	.member	cursorState,24,5,8,16
   145                        	.member	backgroundColor,40,5,8,16
   146                        	.member	foregroundColor,56,5,8,16
   147                        	.member	menuMode,72,5,8,16
   148                        	.member	lastMouseButton,88,5,8,16
   149                        	.member	lastMouseX,104,5,8,16
   150                        	.member	lastMouseY,120,5,8,16
   151                        	.member	currentDiskName,136,142,8,32
   152                        	.member	diskNodes,168,129,8,32
   153                        	.member	titleNodes,200,129,8,32
   154                        	.member	menuNodes,232,129,8,32
   155                        	.member	iconNodes,264,129,8,32
  Mon Aug  9 2021 16:52                                                Page 4


   156                        	.member	windowNodes,296,129,8,32
   157                        	.member	fontNodes,328,129,8,32
   158                        	.member	wndProc,360,138,8,32,3
   159                        	.eos
   160                        	.stag	_fx_process,800,17
   161                        	.member	cbSize,0,5,8,16
   162                        	.member	procId,16,18,8,32
   163                        	.member	parentId,48,18,8,32
   164                        	.member	ctx,80,129,8,32
   165                        	.member	userId,112,16,8,16
   166                        	.member	status,128,16,8,16
   167                        	.member	foregroundActive,144,14,8,8
   168                        	.member	tls,152,1121,8,32,8
   169                        	.member	commandLine,408,142,8,32
   170                        	.member	semaphores,440,138,8,32,3
   171                        	.member	fileHandles,472,138,8,32,3
   172                        	.member	pathList,504,138,8,32,3
   173                        	.member	resources,536,138,8,32,3
   174                        	.member	timerAware,568,14,8,8
   175                        	.member	timerTicks,576,112,8,0,2
   176                        	.member	timerTickCount,608,112,8,0,2
   177                        	.member	kernelError,640,10,8,32,5
   178                        	.member	consoleCtl,672,138,8,32,15
   179                        	.member	desktopCtl,704,138,8,32,16
   180                        	.member	execProc,736,641,8,32
   181                        	.member	startupArgs,768,129,8,32
   182                        	.eos
   183                        	.stag	_fxProcessMessage,112,18
   184                        	.member	src,0,18,8,32
   185                        	.member	dest,32,18,8,32
   186                        	.member	type,64,16,8,16
   187                        	.member	processInfo,80,138,8,32,17
   188                        	.eos
   189                        	.stag	_k_key_state,112,19
   190                        	.member	scanCode,0,14,8,8
   191                        	.member	isShifted,8,14,8,8
   192                        	.member	isAlt,16,14,8,8
   193                        	.member	isExtended,24,14,8,8
   194                        	.member	isCapsLock,32,14,8,8
   195                        	.member	isNumLock,40,14,8,8
   196                        	.member	isScrollLock,48,14,8,8
   197                        	.member	keyChar,56,16,8,16
   198                        	.member	scanTime,72,18,8,32
   199                        	.member	ledStatus,104,14,8,8
   200                        	.eos
   201                        	.stag	_fx_property,384,20
   202                        	.member	name,0,110,8,0,16
   203                        	.member	value,128,110,8,0,32
   204                        	.eos
   205                        	.utag	_24bitPointer,32,21
   206                        	.member	address,0,142,11,32
   207                        	.member	bytes,0,110,11,0,4
   208                        	.eos
   209                        	.stag	_PointStruct,32,22
   210                        	.member	x,0,5,8,16
   211                        	.member	y,16,5,8,16
   212                        	.eos
   213                        	.stag	_RectStruct,112,23
  Mon Aug  9 2021 16:52                                                Page 5


   214                        	.member	x,0,5,8,16
   215                        	.member	y,16,5,8,16
   216                        	.member	z,32,18,8,32
   217                        	.member	width,64,5,8,16
   218                        	.member	height,80,5,8,16
   219                        	.member	attr,96,5,8,16
   220                        	.eos
   221                        	.stag	fake24_,96,24
   222                        	.member	name,0,142,8,32
   223                        	.member	topLeft,32,10,8,32,22
   224                        	.member	bottomRight,64,10,8,32,22
   225                        	.eos
   226                        	.stag	fake25_,112,25
   227                        	.member	x,0,5,8,16
   228                        	.member	y,16,5,8,16
   229                        	.member	z,32,5,8,16
   230                        	.member	width,48,5,8,16
   231                        	.member	height,64,5,8,16
   232                        	.member	data,80,18,8,32
   233                        	.eos
   234                        	.stag	_k_WindowClass,272,26
   235                        	.member	cbSize,0,16,8,16
   236                        	.member	style,16,16,8,16
   237                        	.member	styleEx,32,16,8,16
   238                        	.member	pWndProc,48,654,8,32
   239                        	.member	hInstance,80,129,8,32
   240                        	.member	hIcon,112,129,8,32
   241                        	.member	hCursor,144,129,8,32
   242                        	.member	hbrBackground,176,129,8,32
   243                        	.member	lpszMenuName,208,142,8,32
   244                        	.member	lpszClassName,240,142,8,32
   245                        	.eos
   246                        	.stag	_ClickableRect,152,27
   247                        	.member	area,0,10,8,112,23
   248                        	.member	z,112,18,8,32
   249                        	.member	enabled,144,14,8,8
   250                        	.eos
   251                        	.stag	_NCClickableRect,136,28
   252                        	.member	area,0,10,8,112,23
   253                        	.member	msgType,112,16,8,16
   254                        	.member	enabled,128,14,8,8
   255                        	.eos
   256                        	.stag	_DragData,216,29
   257                        	.member	area,0,10,8,112,23
   258                        	.member	xoffset,112,5,8,16
   259                        	.member	yoffset,128,5,8,16
   260                        	.member	msgType,144,16,8,16
   261                        	.member	ncAction,160,16,8,16
   262                        	.member	isDrag,176,14,8,8
   263                        	.member	isResize,184,14,8,8
   264                        	.member	canDrag,192,14,8,8
   265                        	.member	canDrop,200,14,8,8
   266                        	.member	didDrag,208,14,8,8
   267                        	.eos
   268                        	.stag	_k_WindowStruct,3904,30
   269                        	.member	cbSize,0,16,8,16
   270                        	.member	style,16,18,8,32
   271                        	.member	styleEx,48,18,8,32
  Mon Aug  9 2021 16:52                                                Page 6


   272                        	.member	win_id,80,5,8,16
   273                        	.member	win_x,96,5,8,16
   274                        	.member	win_y,112,5,8,16
   275                        	.member	win_width,128,5,8,16
   276                        	.member	win_height,144,5,8,16
   277                        	.member	win_xoffset,160,5,8,16
   278                        	.member	win_yoffset,176,5,8,16
   279                        	.member	win_cxoffset,192,5,8,16
   280                        	.member	win_cyoffset,208,5,8,16
   281                        	.member	wndRect,224,10,8,112,23
   282                        	.member	clientRect,336,10,8,112,23
   283                        	.member	nonclientGadgets,448,106,8,0,28,16
   284                        	.member	clickable,2624,129,8,32
   285                        	.member	win_title,2656,110,8,0,32
   286                        	.member	Reserved0,2912,16,8,16
   287                        	.member	win_class,2928,110,8,0,16
   288                        	.member	win_class_name,3056,110,8,0,32
   289                        	.member	nBitmapLayer,3312,16,8,16
   290                        	.member	bgRegion,3328,129,8,32
   291                        	.member	procid,3360,18,8,32
   292                        	.member	pWndClass,3392,138,8,32,26
   293                        	.member	pParentWindow,3424,129,8,32
   294                        	.member	hMenu,3456,129,8,32
   295                        	.member	hPointer,3488,129,8,32
   296                        	.member	hBackground,3520,129,8,32
   297                        	.member	pChildWindows,3552,138,8,32,3
   298                        	.member	pChildHitList,3584,138,8,32,3
   299                        	.member	isVisible,3616,14,8,8
   300                        	.member	windowData,3624,129,8,32
   301                        	.member	clientData,3656,1121,8,32,6
   302                        	.member	isClosed,3848,14,8,8
   303                        	.member	isClosing,3856,14,8,8
   304                        	.member	isDesktop,3864,14,8,8
   305                        	.member	clickableNode,3872,138,8,32,2
   306                        	.eos
   307                        	.stag	_k_WindowStructEx,3880,31
   308                        	.member	cbSize,0,16,8,16
   309                        	.member	style,16,18,8,32
   310                        	.member	styleEx,48,18,8,32
   311                        	.member	win_id,80,5,8,16
   312                        	.member	win_x,96,5,8,16
   313                        	.member	win_y,112,5,8,16
   314                        	.member	win_width,128,5,8,16
   315                        	.member	win_height,144,5,8,16
   316                        	.member	win_xoffset,160,5,8,16
   317                        	.member	win_yoffset,176,5,8,16
   318                        	.member	win_cxoffset,192,5,8,16
   319                        	.member	win_cyoffset,208,5,8,16
   320                        	.member	wndRect,224,10,8,112,23
   321                        	.member	clientRect,336,10,8,112,23
   322                        	.member	nonclientGadgets,448,106,8,0,28,16
   323                        	.member	clickable,2624,129,8,32
   324                        	.member	win_title,2656,110,8,0,32
   325                        	.member	Reserved0,2912,16,8,16
   326                        	.member	win_class,2928,110,8,0,16
   327                        	.member	nBitmapLayer,3056,16,8,16
   328                        	.member	procid,3072,18,8,32
   329                        	.member	pWndClass,3104,138,8,32,26
  Mon Aug  9 2021 16:52                                                Page 7


   330                        	.member	pParentWindow,3136,129,8,32
   331                        	.member	hMenu,3168,129,8,32
   332                        	.member	hPointer,3200,129,8,32
   333                        	.member	hBackground,3232,129,8,32
   334                        	.member	pChildWindows,3264,138,8,32,3
   335                        	.member	pChildHitList,3296,138,8,32,3
   336                        	.member	isVisible,3328,14,8,8
   337                        	.member	windowData,3336,129,8,32
   338                        	.member	clientData,3368,1121,8,32,4
   339                        	.member	isClosed,3496,14,8,8
   340                        	.member	hWnd,3504,129,8,32
   341                        	.member	localRect,3536,10,8,112,23
   342                        	.member	globalRect,3648,10,8,112,23
   343                        	.member	clientOffsetRect,3760,10,8,112,23
   344                        	.member	isDesktop,3872,14,8,8
   345                        	.eos
   346                        	.stag	_FontMetric,32,32
   347                        	.member	width,0,5,8,16
   348                        	.member	height,16,5,8,16
   349                        	.eos
   350                        	.stag	_MenuStruct,280,33
   351                        	.member	cx,0,5,8,16
   352                        	.member	cy,16,5,8,16
   353                        	.member	width,32,5,8,16
   354                        	.member	height,48,5,8,16
   355                        	.member	fcolor,64,14,8,8
   356                        	.member	bcolor,72,14,8,8
   357                        	.member	chromeLeft,80,14,8,8
   358                        	.member	chromeRight1,88,14,8,8
   359                        	.member	chromeRight2,96,14,8,8
   360                        	.member	hFont,104,129,8,32
   361                        	.member	itemId,136,16,8,16
   362                        	.member	pCaption,152,142,8,32
   363                        	.member	subMenus,184,138,8,32,3
   364                        	.member	pBackground,216,129,8,32
   365                        	.member	hWndOwner,248,129,8,32
   366                        	.eos
   367                        	.stag	fake34_,160,34
   368                        	.member	menuId,0,16,8,16
   369                        	.member	caption,16,142,8,32
   370                        	.member	rect,48,10,8,112,23
   371                        	.eos
   372                        	.stag	fake35_,5152,35
   373                        	.member	pParent,0,138,8,32,30
   374                        	.member	rect,32,10,8,112,23
   375                        	.member	captions,144,1134,8,32,24
   376                        	.member	chrome,912,110,8,0,24
   377                        	.member	ids,1104,112,8,0,24
   378                        	.member	clickable,1488,106,8,0,27,24
   379                        	.member	selected,5136,16,8,16
   380                        	.eos
   381                        	.stag	_fx_button_t,96,36
   382                        	.member	pCaption,0,142,8,32
   383                        	.member	cCaption,32,16,8,16
   384                        	.member	data,48,129,8,32
   385                        	.member	captionPixelWidth,80,16,8,16
   386                        	.eos
   387                        	.stag	_fx_scrollbar_t,240,37
  Mon Aug  9 2021 16:52                                                Page 8


   388                        	.member	min,0,16,8,16
   389                        	.member	max,16,16,8,16
   390                        	.member	increment,32,16,8,16
   391                        	.member	stopsize,48,16,8,16
   392                        	.member	location,64,5,8,16
   393                        	.member	state,80,5,8,16
   394                        	.member	rectThumb,96,10,8,112,23
   395                        	.member	data,208,129,8,32
   396                        	.eos
   397                        	.stag	_fx_listbox_t,240,38
   398                        	.member	pos,0,5,8,16
   399                        	.member	selected,16,16,8,16
   400                        	.member	offsetX,32,5,8,16
   401                        	.member	offsetY,48,5,8,16
   402                        	.member	inc,64,5,8,16
   403                        	.member	direction,80,5,8,16
   404                        	.member	top,96,5,8,16
   405                        	.member	bottom,112,5,8,16
   406                        	.member	indexTop,128,5,8,16
   407                        	.member	indexBottom,144,5,8,16
   408                        	.member	maxItems,160,16,8,16
   409                        	.member	fontSet,176,142,8,32
   410                        	.member	data,208,129,8,32
   411                        	.eos
   412                        	.stag	_fx_textbox_t,144,39
   413                        	.member	pos,0,5,8,16
   414                        	.member	selected,16,16,8,16
   415                        	.member	offsetX,32,5,8,16
   416                        	.member	offsetY,48,5,8,16
   417                        	.member	isShifted,64,14,8,8
   418                        	.member	cursorState,72,14,8,8
   419                        	.member	fontSet,80,142,8,32
   420                        	.member	data,112,129,8,32
   421                        	.eos
   422                        	.stag	_fx_msgbox_t,144,40
   423                        	.member	pos,0,5,8,16
   424                        	.member	selected,16,16,8,16
   425                        	.member	offsetX,32,5,8,16
   426                        	.member	offsetY,48,5,8,16
   427                        	.member	isShifted,64,14,8,8
   428                        	.member	cursorState,72,14,8,8
   429                        	.member	fontSet,80,142,8,32
   430                        	.member	data,112,129,8,32
   431                        	.eos
   432                        	.stag	_fx_menuAnchor_t,272,41
   433                        	.member	pCaption,0,142,8,32
   434                        	.member	renderLayoutX,32,16,8,16
   435                        	.member	renderLayoutY,48,16,8,16
   436                        	.member	captionPixelWidth,64,16,8,16
   437                        	.member	data,80,129,8,32
   438                        	.member	droppedWindow,112,138,8,32,30
   439                        	.member	bytes,144,110,8,0,16
   440                        	.eos
   441                        	.stag	_SubMenuStruct,64,42
   442                        	.member	caption,0,142,8,32
   443                        	.member	action,32,641,8,32
   444                        	.eos
   445                        	.stag	_SubMenuListStruct,40,43
  Mon Aug  9 2021 16:52                                                Page 9


   446                        	.member	cMenus,0,14,8,8
   447                        	.member	psubmenus,8,9354,8,32,42
   448                        	.eos
   449                        	.stag	_fx_ComBuffer,2080,44
   450                        	.member	cbSize,0,16,8,16
   451                        	.member	cbBuffer,16,16,8,16
   452                        	.member	buffer,32,110,8,0,256
   453                        	.eos
   454                        	.stag	_fx_resource_header,72,45
   455                        	.member	magic,0,110,8,0,4
   456                        	.member	major,32,14,8,8
   457                        	.member	minor,40,14,8,8
   458                        	.member	type,48,14,8,8
   459                        	.member	reserved,56,14,8,8
   460                        	.member	resheaderSize,64,14,8,8
   461                        	.eos
   462                        	.stag	_fx_resource_header_font,144,46
   463                        	.member	title,0,110,8,0,16
   464                        	.member	height,128,14,8,8
   465                        	.member	width,136,14,8,8
   466                        	.eos
   467                        	.stag	_fx_resource_string,32,47
   468                        	.member	locale,0,110,8,0,2
   469                        	.member	entries,16,16,8,16
   470                        	.eos
   471                        	.stag	_fx_resource_string_entry,40,48
   472                        	.member	index,0,16,8,16
   473                        	.member	length,16,16,8,16
   474                        	.member	data,32,14,8,8
   475                        	.eos
   476                        	.line	1064
   477                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",21
   478                        ;#include "fxkernel.h"
   479                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   480                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   481                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   482                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   483                        	.line	88
   484                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   485                        	.stag	fake49_,32,49
   486                        	.member	quot,0,5,8,16
   487                        	.member	rem,16,5,8,16
   488                        	.eos
   489                        	.stag	fake50_,64,50
   490                        	.member	quot,0,7,8,32
   491                        	.member	rem,32,7,8,32
   492                        	.eos
   493                        	.stag	int_sqrt,32,51
   494                        	.member	sqrt,0,16,8,16
   495                        	.member	frac,16,16,8,16
   496                        	.eos
   497                        	.line	205
  Mon Aug  9 2021 16:52                                                Page 10


   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",4
   499                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   500                        	.line	134
   501                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",5
   502                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   503                        	.line	103
   504                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",6
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   506                        	.line	1064
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",8
   508                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstringtable.h",0
   509                        	.line	90
   510                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",9
   511                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   512                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   513                        	.line	1064
   514                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",5
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",0
   516                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   517                        	.line	1064
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",11
   519                        	.line	72
   520                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",6
   521                        	.line	1960
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",16
   523                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   524                        	.line	490
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",22
   526                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   527                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   528                        	.line	134
   529                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",5
   530                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   531                        	.line	205
   532                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Mon Aug  9 2021 16:52                                                Page 11


                    space\FXOS-Beta\src\fxconsole.h",6
   533                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   534                        	.line	1064
   535                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",7
   536                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   537                        	.line	1960
   538                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",12
   539                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   540                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   541                        	.line	205
   542                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",5
   543                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   544                        	.line	134
   545                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",6
   546                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   547                        	.line	1064
   548                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",7
   549                        	.stag	_fx_string,64,52
   550                        	.member	size,0,16,8,16
   551                        	.member	pos,16,5,8,16
   552                        	.member	buffer,32,142,8,32
   553                        	.eos
   554                        	.line	141
   555                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",17
   556                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   558                        	.line	30
   559                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",5
   560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   562                        	.line	1064
   563                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",5
   564                        	.stag	_fxos_executive_vtable,128,53
   565                        	.member	Init,0,8833,8,32
   566                        	.member	Configure,32,656,8,32
   567                        	.member	Query,64,656,8,32
   568                        	.member	Uninit,96,641,8,32
   569                        	.eos
   570                        	.line	86
   571                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Mon Aug  9 2021 16:52                                                Page 12


                    space\FXOS-Beta\src\fxeventmanager.h",6
   572                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   574                        	.line	1064
   575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",11
   576                        	.line	118
   577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",7
   578                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   579                        	.line	208
   580                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",8
   581                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
   582                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   583                        	.line	30
   584                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",5
   585                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
   586                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   587                        	.line	30
   588                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",5
   589                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   590                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_build_parameters.h",0
   591                        	.line	35
   592                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",8
   593                        	.stag	UMM_HEAP_INFO_t,256,54
   594                        	.member	totalEntries,0,18,8,32
   595                        	.member	usedEntries,32,18,8,32
   596                        	.member	freeEntries,64,18,8,32
   597                        	.member	totalBlocks,96,18,8,32
   598                        	.member	usedBlocks,128,18,8,32
   599                        	.member	freeBlocks,160,18,8,32
   600                        	.member	maxFreeContiguousBlocks,192,18,8,32
   601                        	.member	blockSize,224,18,8,32
   602                        	.eos
   603                        	.line	199
   604                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",6
   605                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
   606                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   607                        	.line	1064
   608                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",11
   609                        	.line	24
  Mon Aug  9 2021 16:52                                                Page 13


   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",7
   611                        	.stag	_fx_memory_map,2072,55
   612                        	.member	availableMemory,0,18,8,32
   613                        	.member	valid_segments,32,110,8,0,255
   614                        	.eos
   615                        	.stag	_fx_ipc_port,144,56
   616                        	.member	id,0,18,8,32
   617                        	.member	type,32,14,8,8
   618                        	.member	name,40,138,8,32,52
   619                        	.member	time,72,18,8,32
   620                        	.member	queue,104,138,8,32,4
   621                        	.member	reserved_1,136,14,8,8
   622                        	.eos
   623                        	.stag	_k_mem_alloc_header,80,57
   624                        	.member	user,0,14,8,8
   625                        	.member	attr,8,14,8,8
   626                        	.member	size,16,18,8,32
   627                        	.member	virtual,48,129,8,32
   628                        	.eos
   629                        	.line	129
   630                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",6
   631                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   632                        	.line	568
   633                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",7
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
   635                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",0
   636                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   637                        	.line	1064
   638                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",6
   639                        	.line	74
   640                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",5
   641                        	.stag	_click_detected,64,58
   642                        	.member	window,0,138,8,32,30
   643                        	.member	handler,32,641,8,32
   644                        	.eos
   645                        	.stag	_current_palette_map,400,59
   646                        	.member	CUR_DESKTOP,0,5,8,16
   647                        	.member	CUR_BACKGROUND,16,5,8,16
   648                        	.member	CUR_FONT,32,5,8,16
   649                        	.member	CUR_SELECTED_FONT,48,5,8,16
   650                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   651                        	.member	CUR_WINDOWFRAME,80,5,8,16
   652                        	.member	CUR_WINDOWBORDER,96,5,8,16
   653                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   654                        	.member	CUR_MENU,128,5,8,16
   655                        	.member	CUR_GADGET,144,5,8,16
   656                        	.member	CUR_COLOR,160,101,8,0,15
   657                        	.eos
   658                        	.line	359
  Mon Aug  9 2021 16:52                                                Page 14


   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",8
   660                        	.stag	_fxos_winman_vtable,160,60
   661                        	.member	Events,0,641,8,32
   662                        	.member	ConfigureWindowManager,32,656,8,32
   663                        	.member	ProcessWindowEvent,64,8833,8,32
   664                        	.member	QueryWindowManager,96,656,8,32
   665                        	.member	DoWndProcs,128,641,8,32
   666                        	.eos
   667                        	.stag	fake61_,64,61
   668                        	.member	type,0,16,8,16
   669                        	.member	size,16,16,8,16
   670                        	.member	desktopAction,32,129,8,32
   671                        	.eos
   672                        	.stag	fake62_,96,62
   673                        	.member	type,0,16,8,16
   674                        	.member	caption,16,138,8,32,52
   675                        	.member	buttonType,48,16,8,16
   676                        	.member	x,64,5,8,16
   677                        	.member	y,80,5,8,16
   678                        	.eos
   679                        	.stag	_childMessage_t,64,63
   680                        	.member	msgType,0,16,8,16
   681                        	.member	msgData,16,129,8,32
   682                        	.member	dataSize,48,16,8,16
   683                        	.eos
   684                        	.line	594
   685                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",9
   686                        	.stag	_fx_main_loopvars,16,64
   687                        	.member	dummy,0,5,8,16
   688                        	.eos
   689                        	.stag	_fxMouseMessageData,64,65
   690                        	.member	button1,0,14,8,8
   691                        	.member	button2,8,14,8,8
   692                        	.member	button3,16,14,8,8
   693                        	.member	button4,24,14,8,8
   694                        	.member	x,32,16,8,16
   695                        	.member	y,48,16,8,16
   696                        	.eos
   697                        	.utag	marshalled_data,32,66
   698                        	.member	byteValue,0,14,11,8
   699                        	.member	verbValue,0,110,11,0,2
   700                        	.member	intValue,0,16,11,16
   701                        	.member	longValue,0,18,11,32
   702                        	.member	pointerValue,0,129,11,32
   703                        	.eos
   704                        	.stag	_fx_eventProcess,64,67
   705                        	.member	process,0,138,8,32,17
   706                        	.member	eventProc,32,641,8,32
   707                        	.eos
   708                        	.stag	_mouse_msg_state,184,68
   709                        	.member	lastEvent,0,18,8,32
   710                        	.member	buttonLeftDown,32,14,8,8
   711                        	.member	lastLeftDown,40,18,8,32
   712                        	.member	buttonRightDown,72,14,8,8
   713                        	.member	lastRightDown,80,18,8,32
   714                        	.member	buttonMiddleDown,112,14,8,8
  Mon Aug  9 2021 16:52                                                Page 15


   715                        	.member	lastMiddleDown,120,18,8,32
   716                        	.member	lastX,152,16,8,16
   717                        	.member	lastY,168,16,8,16
   718                        	.eos
   719                        	.stag	_fxos_eventmanager_vtable,192,69
   720                        	.member	EventQueue,0,138,8,32,4
   721                        	.member	Init,32,8833,8,32
   722                        	.member	Run,64,656,8,32
   723                        	.member	Configure,96,656,8,32
   724                        	.member	Query,128,656,8,32
   725                        	.member	Uninit,160,641,8,32
   726                        	.eos
   727                        	.stag	_k_clipboard_data,168,70
   728                        	.member	type,0,14,8,8
   729                        	.member	readable,8,110,8,0,16
   730                        	.member	data,136,129,8,32
   731                        	.eos
   732                        	.line	568
   733                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",18
   734                        	.stag	_fx_spinner_ctx,48,71
   735                        	.member	index,0,5,8,16
   736                        	.member	spinner,16,142,8,32
   737                        	.eos
   738                        	.stag	_fx_console_ctx,1144,72
   739                        	.member	lineBufferIndex,0,5,8,16
   740                        	.member	lineBuffer,16,110,8,0,128
   741                        	.member	isShifted,1040,14,8,8
   742                        	.member	userData,1048,129,8,32
   743                        	.member	screenBuffer,1080,129,8,32
   744                        	.member	Reserved1,1112,129,8,32
   745                        	.eos
   746                        	.stag	_token,64,73
   747                        	.member	type,0,5,8,16
   748                        	.member	depth,16,16,8,16
   749                        	.member	text,32,142,8,32
   750                        	.eos
   751                        	.stag	_command_args,64,74
   752                        	.member	proc,0,656,8,32
   753                        	.member	tokens,32,138,8,32,2
   754                        	.eos
   755                        	.line	208
   756                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",23
   757                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   758                        	.line	141
   759                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",24
   760                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   761                        	.line	118
   762                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",25
   763                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   764                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ffconf.h",0
  Mon Aug  9 2021 16:52                                                Page 16


   765                        	.line	298
   766                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",29
   767                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   768                        	.line	1064
   769                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",30
   770                        	.stag	fake75_,4504,75
   771                        	.member	fs_type,0,14,8,8
   772                        	.member	pdrv,8,14,8,8
   773                        	.member	n_fats,16,14,8,8
   774                        	.member	wflag,24,14,8,8
   775                        	.member	fsi_flag,32,14,8,8
   776                        	.member	id,40,5,8,16
   777                        	.member	n_rootdir,56,5,8,16
   778                        	.member	csize,72,5,8,16
   779                        	.member	lfnbuf,88,144,8,32
   780                        	.member	last_clst,120,18,8,32
   781                        	.member	free_clst,152,18,8,32
   782                        	.member	n_fatent,184,18,8,32
   783                        	.member	fsize,216,18,8,32
   784                        	.member	volbase,248,18,8,32
   785                        	.member	fatbase,280,18,8,32
   786                        	.member	dirbase,312,18,8,32
   787                        	.member	database,344,18,8,32
   788                        	.member	winsect,376,18,8,32
   789                        	.member	win,408,110,8,0,512
   790                        	.eos
   791                        	.stag	fake76_,128,76
   792                        	.member	fs,0,138,8,32,75
   793                        	.member	id,32,5,8,16
   794                        	.member	attr,48,14,8,8
   795                        	.member	stat,56,14,8,8
   796                        	.member	sclust,64,18,8,32
   797                        	.member	objsize,96,18,8,32
   798                        	.eos
   799                        	.stag	fake77_,4400,77
   800                        	.member	obj,0,10,8,128,76
   801                        	.member	flag,128,14,8,8
   802                        	.member	err,136,14,8,8
   803                        	.member	fptr,144,18,8,32
   804                        	.member	clust,176,18,8,32
   805                        	.member	sect,208,18,8,32
   806                        	.member	dir_sect,240,18,8,32
   807                        	.member	dir_ptr,272,142,8,32
   808                        	.member	buf,304,110,8,0,512
   809                        	.eos
   810                        	.stag	fake78_,416,78
   811                        	.member	obj,0,10,8,128,76
   812                        	.member	dptr,128,18,8,32
   813                        	.member	clust,160,18,8,32
   814                        	.member	sect,192,18,8,32
   815                        	.member	dir,224,142,8,32
   816                        	.member	fn,256,110,8,0,12
   817                        	.member	blk_ofs,352,18,8,32
   818                        	.member	pat,384,142,8,32
   819                        	.eos
  Mon Aug  9 2021 16:52                                                Page 17


   820                        	.stag	fake79_,2224,79
   821                        	.member	fsize,0,18,8,32
   822                        	.member	fdate,32,5,8,16
   823                        	.member	ftime,48,5,8,16
   824                        	.member	fattrib,64,14,8,8
   825                        	.member	altname,72,110,8,0,13
   826                        	.member	fname,176,110,8,0,256
   827                        	.eos
   828                        	.stag	fake80_,80,80
   829                        	.member	fmt,0,14,8,8
   830                        	.member	n_fat,8,14,8,8
   831                        	.member	align,16,16,8,16
   832                        	.member	n_root,32,16,8,16
   833                        	.member	au_size,48,18,8,32
   834                        	.eos
   835                        	.line	429
   836                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",26
   837                        	.line	30
   838                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",5
   839                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   840                        	.line	118
   841                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",6
   842                        	.stag	_fx_api_call_table,8192,81
   843                        	.member	call_table,0,1121,8,32,256
   844                        	.eos
   845                        	.stag	_fx_zero_page_irq_data,32,82
   846                        	.member	data,0,110,8,0,4
   847                        	.eos
   848                        	.stag	_fx_zero_page,720,83
   849                        	.member	fxos_mouse_byte_0,0,14,8,8
   850                        	.member	fxos_mouse_byte_1,8,14,8,8
   851                        	.member	fxos_mouse_byte_2,16,14,8,8
   852                        	.member	fxos_mouse_byte_t,24,14,8,8
   853                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   854                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   855                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   856                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   857                        	.member	fxos_key_byte_0,64,14,8,8
   858                        	.member	fxos_key_byte_1,72,14,8,8
   859                        	.member	fxos_key_byte_2,80,14,8,8
   860                        	.member	fxos_mouse_ctl,88,14,8,8
   861                        	.member	fxos_mouse_index,96,14,8,8
   862                        	.member	fxos_mouse_status,104,14,8,8
   863                        	.member	Endianness,112,16,8,16
   864                        	.member	VersionMajor,128,16,8,16
   865                        	.member	VersionMinor,144,16,8,16
   866                        	.member	VersionRelease,160,16,8,16
   867                        	.member	topMemory,176,18,8,32
   868                        	.member	bottomMemory,208,18,8,32
   869                        	.member	availableMemory,240,18,8,32
   870                        	.member	availableMemoryK,272,18,8,32
   871                        	.member	availableHeapMemory,304,18,8,32
   872                        	.member	availableHeapMemoryK,336,18,8,32
   873                        	.member	fxos_console_row,368,16,8,16
  Mon Aug  9 2021 16:52                                                Page 18


   874                        	.member	fxos_console_col,384,16,8,16
   875                        	.member	executive,400,129,8,32
   876                        	.member	eventmanager,432,129,8,32
   877                        	.member	devicemanager,464,129,8,32
   878                        	.member	windowmanager,496,129,8,32
   879                        	.member	fxos_kernel_api,528,138,8,32,81
   880                        	.member	fxos_dos_api,560,138,8,32,81
   881                        	.member	fxos_gfx_api,592,138,8,32,81
   882                        	.member	fxos_gui_api,624,138,8,32,81
   883                        	.member	fxos_con_api,656,138,8,32,81
   884                        	.member	fxos_reserved_2_api,688,138,8,32,81
   885                        	.eos
   886                        	.stag	_fx_environment,96,84
   887                        	.member	variables,0,142,8,32
   888                        	.member	reserved1,32,5,8,16
   889                        	.member	reserved2,48,5,8,16
   890                        	.member	reserved3,64,5,8,16
   891                        	.member	reserved4,80,5,8,16
   892                        	.eos
   893                        	.stag	_debug_byte_bits,8,85
   894                        	.member	bit7,0,14,17,1
   895                        	.member	bit6,1,14,17,1
   896                        	.member	bit5,2,14,17,1
   897                        	.member	bit4,3,14,17,1
   898                        	.member	bit3,4,14,17,1
   899                        	.member	bit2,5,14,17,1
   900                        	.member	bit1,6,14,17,1
   901                        	.member	bit0,7,14,17,1
   902                        	.eos
   903                        	.stag	_k_segmentheader,160,86
   904                        	.member	version_major,0,14,8,8
   905                        	.member	version_minor,8,14,8,8
   906                        	.member	length,16,5,8,16
   907                        	.member	segment_start_addr,32,7,8,32
   908                        	.member	segment_end_addr,64,7,8,32
   909                        	.member	segment_size,96,7,8,32
   910                        	.member	main_entry_addr,128,7,8,32
   911                        	.eos
   912                        	.stag	_fx_device_driver,776,87
   913                        	.member	name,0,110,8,0,32
   914                        	.member	version,256,110,8,0,16
   915                        	.member	hmajor,384,110,8,0,8
   916                        	.member	hminor,448,110,8,0,8
   917                        	.member	type,512,14,8,8
   918                        	.member	designation,520,110,8,0,6
   919                        	.member	irq_ctl,568,16,8,16
   920                        	.member	f_driver_irq,584,129,8,32
   921                        	.member	driver_context,616,129,8,32
   922                        	.member	f_driver_load,648,129,8,32
   923                        	.member	f_driver_read,680,129,8,32
   924                        	.member	f_driver_write,712,129,8,32
   925                        	.member	f_driver_unload,744,129,8,32
   926                        	.eos
   927                        	.stag	_fx_block_device_driver,808,88
   928                        	.member	name,0,110,8,0,32
   929                        	.member	version,256,110,8,0,16
   930                        	.member	hmajor,384,110,8,0,8
   931                        	.member	hminor,448,110,8,0,8
  Mon Aug  9 2021 16:52                                                Page 19


   932                        	.member	type,512,14,8,8
   933                        	.member	designation,520,110,8,0,6
   934                        	.member	irq_ctl,568,16,8,16
   935                        	.member	f_driver_irq,584,129,8,32
   936                        	.member	driver_context,616,129,8,32
   937                        	.member	f_driver_load,648,129,8,32
   938                        	.member	f_driver_read,680,129,8,32
   939                        	.member	f_driver_write,712,129,8,32
   940                        	.member	f_driver_unload,744,129,8,32
   941                        	.member	f_driver_command,776,129,8,32
   942                        	.eos
   943                        	.stag	_k_irq_chain,128,89
   944                        	.member	handlers,0,5217,8,32,4
   945                        	.eos
   946                        	.line	490
   947                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",22
   948                        ;#include "fxdos.h"
   949                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",0
   950                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   951                        	.line	1064
   952                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",5
   953                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   954                        	.line	429
   955                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",6
   956                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\diskio.h",0
   957                        	.line	85
   958                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",7
   959                        	.stag	_fx_sd_direntry,256,90
   960                        	.member	filename,0,110,8,0,11
   961                        	.member	type,88,14,8,8
   962                        	.member	attrs,96,110,8,0,20
   963                        	.eos
   964                        	.stag	_fx_info,416,91
   965                        	.member	stgName,0,110,8,0,32
   966                        	.member	Reserved1,256,14,8,8
   967                        	.member	stgType,264,16,8,16
   968                        	.member	Reserved2,280,14,8,8
   969                        	.member	stgReserved,288,110,8,0,16
   970                        	.eos
   971                        	.stag	_fx_fileinfo,136,92
   972                        	.member	type,0,14,8,8
   973                        	.member	pFilename,8,142,8,32
   974                        	.member	lSize,40,18,8,32
   975                        	.member	lcreateDate,72,18,8,32
   976                        	.member	lchangeDate,104,18,8,32
   977                        	.eos
   978                        	.stag	_FX_FAT_DIR_INFO,256,93
   979                        	.member	DIR_Name,0,110,8,0,11
   980                        	.member	DIR_Attr,88,14,8,8
   981                        	.member	DIR_NTRes,96,14,8,8
  Mon Aug  9 2021 16:52                                                Page 20


   982                        	.member	DIR_CrtTimeTenth,104,14,8,8
   983                        	.member	DIR_CrtTime,112,16,8,16
   984                        	.member	DIR_CrtDate,128,16,8,16
   985                        	.member	DIR_LstAccDate,144,16,8,16
   986                        	.member	DIR_FstClusHI,160,16,8,16
   987                        	.member	DIR_WrtTime,176,16,8,16
   988                        	.member	DIR_WrtDate,192,16,8,16
   989                        	.member	DIR_FstClusLO,208,16,8,16
   990                        	.member	DIR_FileSize,224,18,8,32
   991                        	.eos
   992                        	.stag	fat_extBS_32,416,94
   993                        	.member	table_size_32,0,18,8,32
   994                        	.member	extended_flags,32,16,8,16
   995                        	.member	fat_version,48,16,8,16
   996                        	.member	root_cluster,64,18,8,32
   997                        	.member	fat_info,96,16,8,16
   998                        	.member	backup_BS_sector,112,16,8,16
   999                        	.member	reserved_0,128,110,8,0,12
  1000                        	.member	drive_number,224,14,8,8
  1001                        	.member	reserved_1,232,14,8,8
  1002                        	.member	boot_signature,240,14,8,8
  1003                        	.member	volume_id,248,16,8,16
  1004                        	.member	volume_label,264,110,8,0,11
  1005                        	.member	fat_type_label,352,110,8,0,8
  1006                        	.eos
  1007                        	.stag	fat_extBS_16,192,95
  1008                        	.member	bios_drive_num,0,14,8,8
  1009                        	.member	reserved1,8,14,8,8
  1010                        	.member	boot_signature,16,14,8,8
  1011                        	.member	volume_id,24,16,8,16
  1012                        	.member	volume_label,40,110,8,0,11
  1013                        	.member	fat_type_label,128,110,8,0,8
  1014                        	.eos
  1015                        	.stag	fat_BS,688,96
  1016                        	.member	bootjmp,0,110,8,0,3
  1017                        	.member	oem_name,24,110,8,0,8
  1018                        	.member	bytes_per_sector,88,16,8,16
  1019                        	.member	sectors_per_cluster,104,14,8,8
  1020                        	.member	reserved_sector_count,112,16,8,16
  1021                        	.member	table_count,128,14,8,8
  1022                        	.member	root_entry_count,136,16,8,16
  1023                        	.member	total_sectors_16,152,16,8,16
  1024                        	.member	media_type,168,14,8,8
  1025                        	.member	table_size_16,176,16,8,16
  1026                        	.member	sectors_per_track,192,16,8,16
  1027                        	.member	head_side_count,208,16,8,16
  1028                        	.member	hidden_sector_count,224,16,8,16
  1029                        	.member	total_sectors_32,240,16,8,16
  1030                        	.member	extended_section,256,110,8,0,54
  1031                        	.eos
  1032                        	.stag	__FATBootSector,928,97
  1033                        	.member	bootjmp,0,110,8,0,3
  1034                        	.member	oem_name,24,110,8,0,8
  1035                        	.member	bytes_per_sector,88,16,8,16
  1036                        	.member	sectors_per_cluster,104,14,8,8
  1037                        	.member	reserved_sector_count,112,16,8,16
  1038                        	.member	fat_table_count,128,14,8,8
  1039                        	.member	root_entry_count,136,16,8,16
  Mon Aug  9 2021 16:52                                                Page 21


  1040                        	.member	total_sectors_16,152,16,8,16
  1041                        	.member	media_type,168,14,8,8
  1042                        	.member	sectors_per_fat,176,16,8,16
  1043                        	.member	sectors_per_track,192,16,8,16
  1044                        	.member	head_side_count,208,16,8,16
  1045                        	.member	hidden_sector_count,224,18,8,32
  1046                        	.member	total_sectors_32,256,18,8,32
  1047                        	.member	drive_number,288,14,8,8
  1048                        	.member	reserved1,296,14,8,8
  1049                        	.member	boot_sig,304,14,8,8
  1050                        	.member	vol_id,312,18,8,32
  1051                        	.member	vol_name,344,110,8,0,11
  1052                        	.member	file_system_type,432,110,8,0,8
  1053                        	.member	extended_section,496,110,8,0,54
  1054                        	.eos
  1055                        	.stag	__PARTITIONTABLE,128,98
  1056                        	.member	first_byte,0,14,8,8
  1057                        	.member	start_chs,8,110,8,0,3
  1058                        	.member	partition_type,32,14,8,8
  1059                        	.member	end_chs,40,110,8,0,3
  1060                        	.member	start_sector,64,18,8,32
  1061                        	.member	length_sectors,96,18,8,32
  1062                        	.eos
  1063                        	.stag	fake99_,4096,99
  1064                        	.member	jmp,0,110,8,0,3
  1065                        	.member	oem,24,110,8,0,8
  1066                        	.member	sector_size,88,15,8,16
  1067                        	.member	sectors_per_cluster,104,14,8,8
  1068                        	.member	reserved_sectors,112,15,8,16
  1069                        	.member	number_ok_dos_fats,128,14,8,8
  1070                        	.member	root_dir_entries,136,15,8,16
  1071                        	.member	total_sectors_short,152,15,8,16
  1072                        	.member	media_descriptor,168,14,8,8
  1073                        	.member	fat_size_sectors,176,15,8,16
  1074                        	.member	sectors_per_track,192,15,8,16
  1075                        	.member	number_ok_dos_heads,208,15,8,16
  1076                        	.member	hidden_sectors,224,18,8,32
  1077                        	.member	total_sectors_long,256,18,8,32
  1078                        	.member	drive_number,288,14,8,8
  1079                        	.member	current_head,296,14,8,8
  1080                        	.member	boot_signature,304,14,8,8
  1081                        	.member	volume_id,312,18,8,32
  1082                        	.member	volume_label,344,110,8,0,11
  1083                        	.member	fs_type,432,110,8,0,8
  1084                        	.member	boot_code,496,110,8,0,448
  1085                        	.member	boot_sector_signature,4080,15,8,16
  1086                        	.eos
  1087                        	.stag	__FAT16ENTRY,256,100
  1088                        	.member	filename,0,110,8,0,8
  1089                        	.member	ext,64,110,8,0,3
  1090                        	.member	attributes,88,14,8,8
  1091                        	.member	reserved,96,110,8,0,10
  1092                        	.member	modify_time,176,16,8,16
  1093                        	.member	modify_date,192,16,8,16
  1094                        	.member	starting_cluster,208,16,8,16
  1095                        	.member	file_size,224,18,8,32
  1096                        	.eos
  1097                        	.stag	__FAT16ENTRYLONG,288,101
  Mon Aug  9 2021 16:52                                                Page 22


  1098                        	.member	filename,0,110,8,0,8
  1099                        	.member	ext,64,110,8,0,3
  1100                        	.member	attributes,88,14,8,8
  1101                        	.member	reserved,96,110,8,0,10
  1102                        	.member	modify_time,176,16,8,16
  1103                        	.member	modify_date,192,16,8,16
  1104                        	.member	starting_cluster,208,16,8,16
  1105                        	.member	file_size,224,18,8,32
  1106                        	.member	plongfileName,256,142,8,32
  1107                        	.eos
  1108                        	.stag	_LongFileName,256,102
  1109                        	.member	sequenceNo,0,14,8,8
  1110                        	.member	fileName_Part1,8,110,8,0,10
  1111                        	.member	fileattribute,88,14,8,8
  1112                        	.member	type,96,14,8,8
  1113                        	.member	checksum,104,14,8,8
  1114                        	.member	fileName_Part2,112,110,8,0,12
  1115                        	.member	fstclusLO,208,5,8,16
  1116                        	.member	fileName_Part3,224,110,8,0,4
  1117                        	.eos
  1118                        	.stag	_IDSECTOR,2048,103
  1119                        	.member	wGenConfig,0,16,8,16
  1120                        	.member	wNumCyls,16,16,8,16
  1121                        	.member	wReserved,32,16,8,16
  1122                        	.member	wNumHeads,48,16,8,16
  1123                        	.member	wBytesPerTrack,64,16,8,16
  1124                        	.member	wBytesPerSector,80,16,8,16
  1125                        	.member	wSectorsPerTrack,96,16,8,16
  1126                        	.member	wVendorUnique,112,112,8,0,3
  1127                        	.member	sSerialNumber,160,110,8,0,20
  1128                        	.member	wBufferType,320,16,8,16
  1129                        	.member	wBufferSize,336,16,8,16
  1130                        	.member	wECCSize,352,16,8,16
  1131                        	.member	sFirmwareRev,368,110,8,0,8
  1132                        	.member	sModelNumber,432,110,8,0,40
  1133                        	.member	wMoreVendorUnique,752,16,8,16
  1134                        	.member	wDoubleWordIO,768,16,8,16
  1135                        	.member	wCapabilities,784,16,8,16
  1136                        	.member	wReserved1,800,16,8,16
  1137                        	.member	wPIOTiming,816,16,8,16
  1138                        	.member	wDMATiming,832,16,8,16
  1139                        	.member	wBS,848,16,8,16
  1140                        	.member	wNumCurrentCyls,864,16,8,16
  1141                        	.member	wNumCurrentHeads,880,16,8,16
  1142                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1143                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1144                        	.member	wMultSectorStuff,944,16,8,16
  1145                        	.member	ulTotalAddressableSectors,960,18,8,32
  1146                        	.member	wSingleWordDMA,992,16,8,16
  1147                        	.member	wMultiWordDMA,1008,16,8,16
  1148                        	.member	bReserved,1024,110,8,0,128
  1149                        	.eos
  1150                        	.stag	fake104_,16,104
  1151                        	.member	Reserved1,0,16,17,1
  1152                        	.member	Retired3,1,16,17,1
  1153                        	.member	ResponseIncomplete,2,16,17,1
  1154                        	.member	Retired2,3,16,17,3
  1155                        	.member	FixedDevice,6,16,17,1
  Mon Aug  9 2021 16:52                                                Page 23


  1156                        	.member	RemovableMedia,7,16,17,1
  1157                        	.member	Retired1,8,16,17,7
  1158                        	.member	DeviceType,15,16,17,1
  1159                        	.eos
  1160                        	.stag	fake105_,16,105
  1161                        	.member	FeatureSupported,0,16,17,1
  1162                        	.member	Reserved,1,16,17,15
  1163                        	.eos
  1164                        	.stag	fake106_,32,106
  1165                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1166                        	.member	ReservedByte49,2,14,17,6
  1167                        	.member	DmaSupported,8,14,17,1
  1168                        	.member	LbaSupported,9,14,17,1
  1169                        	.member	IordyDisable,10,14,17,1
  1170                        	.member	IordySupported,11,14,17,1
  1171                        	.member	Reserved1,12,14,17,1
  1172                        	.member	StandybyTimerSupport,13,14,17,1
  1173                        	.member	Reserved2,14,14,17,2
  1174                        	.member	ReservedWord50,16,16,8,16
  1175                        	.eos
  1176                        	.stag	fake107_,16,107
  1177                        	.member	ZonedCapabilities,0,16,17,2
  1178                        	.member	NonVolatileWriteCache,2,16,17,1
  1179                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1180                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1181                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1182                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1183                        	.member	IEEE1667,7,16,17,1
  1184                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1185                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1186                        	.member	WriteBufferDmaSupported,10,16,17,1
  1187                        	.member	ReadBufferDmaSupported,11,16,17,1
  1188                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  1189                        	.member	LPSAERCSupported,13,16,17,1
  1190                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1191                        	.member	CFastSpecSupported,15,16,17,1
  1192                        	.eos
  1193                        	.stag	fake108_,32,108
  1194                        	.member	Reserved0,0,16,17,1
  1195                        	.member	SataGen1,1,16,17,1
  1196                        	.member	SataGen2,2,16,17,1
  1197                        	.member	SataGen3,3,16,17,1
  1198                        	.member	Reserved1,4,16,17,4
  1199                        	.member	NCQ,8,16,17,1
  1200                        	.member	HIPM,9,16,17,1
  1201                        	.member	PhyEvents,10,16,17,1
  1202                        	.member	NcqUnload,11,16,17,1
  1203                        	.member	NcqPriority,12,16,17,1
  1204                        	.member	HostAutoPS,13,16,17,1
  1205                        	.member	DeviceAutoPS,14,16,17,1
  1206                        	.member	ReadLogDMA,15,16,17,1
  1207                        	.member	Reserved2,16,16,17,1
  1208                        	.member	CurrentSpeed,17,16,17,3
  Mon Aug  9 2021 16:52                                                Page 24


  1209                        	.member	NcqStreaming,20,16,17,1
  1210                        	.member	NcqQueueMgmt,21,16,17,1
  1211                        	.member	NcqReceiveSend,22,16,17,1
  1212                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1213                        	.member	Reserved3,24,16,17,8
  1214                        	.eos
  1215                        	.stag	fake109_,16,109
  1216                        	.member	Reserved0,0,16,17,1
  1217                        	.member	NonZeroOffsets,1,16,17,1
  1218                        	.member	DmaSetupAutoActivate,2,16,17,1
  1219                        	.member	DIPM,3,16,17,1
  1220                        	.member	InOrderData,4,16,17,1
  1221                        	.member	HardwareFeatureControl,5,16,17,1
  1222                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1223                        	.member	NCQAutosense,7,16,17,1
  1224                        	.member	DEVSLP,8,16,17,1
  1225                        	.member	HybridInformation,9,16,17,1
  1226                        	.member	Reserved1,10,16,17,6
  1227                        	.eos
  1228                        	.stag	fake110_,16,110
  1229                        	.member	Reserved0,0,16,17,1
  1230                        	.member	NonZeroOffsets,1,16,17,1
  1231                        	.member	DmaSetupAutoActivate,2,16,17,1
  1232                        	.member	DIPM,3,16,17,1
  1233                        	.member	InOrderData,4,16,17,1
  1234                        	.member	HardwareFeatureControl,5,16,17,1
  1235                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1236                        	.member	DeviceAutoPS,7,16,17,1
  1237                        	.member	DEVSLP,8,16,17,1
  1238                        	.member	HybridInformation,9,16,17,1
  1239                        	.member	Reserved1,10,16,17,6
  1240                        	.eos
  1241                        	.stag	fake111_,48,111
  1242                        	.member	SmartCommands,0,16,17,1
  1243                        	.member	SecurityMode,1,16,17,1
  1244                        	.member	RemovableMediaFeature,2,16,17,1
  1245                        	.member	PowerManagement,3,16,17,1
  1246                        	.member	Reserved1,4,16,17,1
  1247                        	.member	WriteCache,5,16,17,1
  1248                        	.member	LookAhead,6,16,17,1
  1249                        	.member	ReleaseInterrupt,7,16,17,1
  1250                        	.member	ServiceInterrupt,8,16,17,1
  1251                        	.member	DeviceReset,9,16,17,1
  1252                        	.member	HostProtectedArea,10,16,17,1
  1253                        	.member	Obsolete1,11,16,17,1
  1254                        	.member	WriteBuffer,12,16,17,1
  1255                        	.member	ReadBuffer,13,16,17,1
  1256                        	.member	Nop,14,16,17,1
  1257                        	.member	Obsolete2,15,16,17,1
  1258                        	.member	DownloadMicrocode,16,16,17,1
  1259                        	.member	DmaQueued,17,16,17,1
  1260                        	.member	Cfa,18,16,17,1
  1261                        	.member	AdvancedPm,19,16,17,1
  1262                        	.member	Msn,20,16,17,1
  1263                        	.member	PowerUpInStandby,21,16,17,1
  1264                        	.member	ManualPowerUp,22,16,17,1
  1265                        	.member	Reserved2,23,16,17,1
  1266                        	.member	SetMax,24,16,17,1
  Mon Aug  9 2021 16:52                                                Page 25


  1267                        	.member	Acoustics,25,16,17,1
  1268                        	.member	BigLba,26,16,17,1
  1269                        	.member	DeviceConfigOverlay,27,16,17,1
  1270                        	.member	FlushCache,28,16,17,1
  1271                        	.member	FlushCacheExt,29,16,17,1
  1272                        	.member	WordValid83,30,16,17,2
  1273                        	.member	SmartErrorLog,32,16,17,1
  1274                        	.member	SmartSelfTest,33,16,17,1
  1275                        	.member	MediaSerialNumber,34,16,17,1
  1276                        	.member	MediaCardPassThrough,35,16,17,1
  1277                        	.member	StreamingFeature,36,16,17,1
  1278                        	.member	GpLogging,37,16,17,1
  1279                        	.member	WriteFua,38,16,17,1
  1280                        	.member	WriteQueuedFua,39,16,17,1
  1281                        	.member	WWN64Bit,40,16,17,1
  1282                        	.member	URGReadStream,41,16,17,1
  1283                        	.member	URGWriteStream,42,16,17,1
  1284                        	.member	ReservedForTechReport,43,16,17,2
  1285                        	.member	IdleWithUnloadFeature,45,16,17,1
  1286                        	.member	WordValid,46,16,17,2
  1287                        	.eos
  1288                        	.stag	fake112_,48,112
  1289                        	.member	SmartCommands,0,16,17,1
  1290                        	.member	SecurityMode,1,16,17,1
  1291                        	.member	RemovableMediaFeature,2,16,17,1
  1292                        	.member	PowerManagement,3,16,17,1
  1293                        	.member	Reserved1,4,16,17,1
  1294                        	.member	WriteCache,5,16,17,1
  1295                        	.member	LookAhead,6,16,17,1
  1296                        	.member	ReleaseInterrupt,7,16,17,1
  1297                        	.member	ServiceInterrupt,8,16,17,1
  1298                        	.member	DeviceReset,9,16,17,1
  1299                        	.member	HostProtectedArea,10,16,17,1
  1300                        	.member	Obsolete1,11,16,17,1
  1301                        	.member	WriteBuffer,12,16,17,1
  1302                        	.member	ReadBuffer,13,16,17,1
  1303                        	.member	Nop,14,16,17,1
  1304                        	.member	Obsolete2,15,16,17,1
  1305                        	.member	DownloadMicrocode,16,16,17,1
  1306                        	.member	DmaQueued,17,16,17,1
  1307                        	.member	Cfa,18,16,17,1
  1308                        	.member	AdvancedPm,19,16,17,1
  1309                        	.member	Msn,20,16,17,1
  1310                        	.member	PowerUpInStandby,21,16,17,1
  1311                        	.member	ManualPowerUp,22,16,17,1
  1312                        	.member	Reserved2,23,16,17,1
  1313                        	.member	SetMax,24,16,17,1
  1314                        	.member	Acoustics,25,16,17,1
  1315                        	.member	BigLba,26,16,17,1
  1316                        	.member	DeviceConfigOverlay,27,16,17,1
  1317                        	.member	FlushCache,28,16,17,1
  1318                        	.member	FlushCacheExt,29,16,17,1
  1319                        	.member	Resrved3,30,16,17,1
  1320                        	.member	Words119_120Valid,31,16,17,1
  1321                        	.member	SmartErrorLog,32,16,17,1
  1322                        	.member	SmartSelfTest,33,16,17,1
  1323                        	.member	MediaSerialNumber,34,16,17,1
  1324                        	.member	MediaCardPassThrough,35,16,17,1
  Mon Aug  9 2021 16:52                                                Page 26


  1325                        	.member	StreamingFeature,36,16,17,1
  1326                        	.member	GpLogging,37,16,17,1
  1327                        	.member	WriteFua,38,16,17,1
  1328                        	.member	WriteQueuedFua,39,16,17,1
  1329                        	.member	WWN64Bit,40,16,17,1
  1330                        	.member	URGReadStream,41,16,17,1
  1331                        	.member	URGWriteStream,42,16,17,1
  1332                        	.member	ReservedForTechReport,43,16,17,2
  1333                        	.member	IdleWithUnloadFeature,45,16,17,1
  1334                        	.member	Reserved4,46,16,17,2
  1335                        	.eos
  1336                        	.stag	fake113_,16,113
  1337                        	.member	TimeRequired,0,16,17,15
  1338                        	.member	ExtendedTimeReported,15,16,17,1
  1339                        	.eos
  1340                        	.stag	fake114_,16,114
  1341                        	.member	TimeRequired,0,16,17,15
  1342                        	.member	ExtendedTimeReported,15,16,17,1
  1343                        	.eos
  1344                        	.stag	fake115_,16,115
  1345                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1346                        	.member	Reserved0,4,16,17,8
  1347                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1348                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1349                        	.member	Reserved1,14,16,17,2
  1350                        	.eos
  1351                        	.stag	fake116_,16,116
  1352                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1353                        	.member	WriteReadVerify,1,16,17,1
  1354                        	.member	WriteUncorrectableExt,2,16,17,1
  1355                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1356                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1357                        	.member	FreefallControl,5,16,17,1
  1358                        	.member	SenseDataReporting,6,16,17,1
  1359                        	.member	ExtendedPowerConditions,7,16,17,1
  1360                        	.member	Reserved0,8,16,17,6
  1361                        	.member	WordValid,14,16,17,2
  1362                        	.eos
  1363                        	.stag	fake117_,16,117
  1364                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1365                        	.member	WriteReadVerify,1,16,17,1
  1366                        	.member	WriteUncorrectableExt,2,16,17,1
  1367                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1368                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1369                        	.member	FreefallControl,5,16,17,1
  1370                        	.member	SenseDataReporting,6,16,17,1
  1371                        	.member	ExtendedPowerConditions,7,16,17,1
  1372                        	.member	Reserved0,8,16,17,6
  1373                        	.member	Reserved1,14,16,17,2
  1374                        	.eos
  1375                        	.stag	fake118_,16,118
  1376                        	.member	SecuritySupported,0,16,17,1
  1377                        	.member	SecurityEnabled,1,16,17,1
  1378                        	.member	SecurityLocked,2,16,17,1
  1379                        	.member	SecurityFrozen,3,16,17,1
  Mon Aug  9 2021 16:52                                                Page 27


  1380                        	.member	SecurityCountExpired,4,16,17,1
  1381                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1382                        	.member	Reserved0,6,16,17,2
  1383                        	.member	SecurityLevel,8,16,17,1
  1384                        	.member	Reserved1,9,16,17,7
  1385                        	.eos
  1386                        	.stag	fake119_,16,119
  1387                        	.member	MaximumCurrentInMA,0,16,17,12
  1388                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1389                        	.member	CfaPowerMode1Required,13,16,17,1
  1390                        	.member	Reserved0,14,16,17,1
  1391                        	.member	Word160Supported,15,16,17,1
  1392                        	.eos
  1393                        	.stag	fake120_,16,120
  1394                        	.member	SupportsTrim,0,16,17,1
  1395                        	.member	Reserved0,1,16,17,15
  1396                        	.eos
  1397                        	.stag	fake121_,16,121
  1398                        	.member	Supported,0,16,17,1
  1399                        	.member	Reserved0,1,16,17,1
  1400                        	.member	WriteSameSuported,2,16,17,1
  1401                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1402                        	.member	FeatureControlSuported,4,16,17,1
  1403                        	.member	DataTablesSuported,5,16,17,1
  1404                        	.member	Reserved1,6,16,17,6
  1405                        	.member	VendorSpecific,12,16,17,4
  1406                        	.eos
  1407                        	.stag	fake122_,16,122
  1408                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1409                        	.member	Word209Supported,14,16,17,1
  1410                        	.member	Reserved0,15,16,17,1
  1411                        	.eos
  1412                        	.stag	fake123_,16,123
  1413                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1414                        	.member	Reserved0,1,16,17,3
  1415                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  1416                        	.member	Reserved1,5,16,17,3
  1417                        	.member	NVCachePowerModeVersion,8,16,17,4
  1418                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1419                        	.eos
  1420                        	.stag	fake124_,16,124
  1421                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1422                        	.member	Reserved,8,14,8,8
  1423                        	.eos
  1424                        	.stag	fake125_,16,125
  1425                        	.member	MajorVersion,0,16,17,12
  1426                        	.member	TransportType,12,16,17,4
  1427                        	.eos
  1428                        	.stag	_IDENTIFY_DEVICE_DATA,4096,126
  1429                        	.member	GeneralConfiguration,0,10,8,16,104
  1430                        	.member	NumCylinders,16,16,8,16
  1431                        	.member	SpecificConfiguration,32,16,8,16
  1432                        	.member	NumHeads,48,16,8,16
  1433                        	.member	Retired1Bytes,64,110,8,0,4
  1434                        	.member	NumSectorsPerTrack,96,16,8,16
  1435                        	.member	VendorUnique1Bytes,112,110,8,0,6
  Mon Aug  9 2021 16:52                                                Page 28


  1436                        	.member	SerialNumber,160,110,8,0,20
  1437                        	.member	Retired2,320,112,8,0,2
  1438                        	.member	Obsolete1,352,16,8,16
  1439                        	.member	FirmwareRevision,368,110,8,0,8
  1440                        	.member	ModelNumber,432,110,8,0,40
  1441                        	.member	MaximumBlockTransfer,752,14,8,8
  1442                        	.member	VendorUnique2,760,14,8,8
  1443                        	.member	TrustedComputing,768,10,8,16,105
  1444                        	.member	Capabilities,784,10,8,32,106
  1445                        	.member	ObsoleteWords51,816,112,8,0,2
  1446                        	.member	TranslationFieldsValid,848,16,17,3
  1447                        	.member	Reserved3,851,16,17,5
  1448                        	.member	FreeFallControlSensitivity,856,16,17,8
  1449                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1450                        	.member	NumberOfCurrentHeads,880,16,8,16
  1451                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1452                        	.member	CurrentSectorCapacity,912,18,8,32
  1453                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1454                        	.member	MultiSectorSettingValid,952,14,17,1
  1455                        	.member	ReservedByte59,953,14,17,3
  1456                        	.member	SanitizeFeatureSupported,956,14,17,1
  1457                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1458                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1459                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1460                        	.member	UserAddressableSectors,960,18,8,32
  1461                        	.member	ObsoleteWord62,992,16,8,16
  1462                        	.member	MultiWordDMASupport,1008,16,17,8
  1463                        	.member	MultiWordDMAActive,1016,16,17,8
  1464                        	.member	AdvancedPIOModes,1024,16,17,8
  1465                        	.member	ReservedByte64,1032,16,17,8
  1466                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1467                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1468                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1469                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1470                        	.member	AdditionalSupported,1104,10,8,16,107
  1471                        	.member	ReservedWords70,1120,112,8,0,5
  1472                        	.member	QueueDepth,1200,16,17,5
  1473                        	.member	ReservedWord75,1205,16,17,11
  1474                        	.member	SerialAtaCapabilities,1216,10,8,32,108
  1475                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    109
  1476                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,11
                    0
  1477                        	.member	MajorRevision,1280,16,8,16
  1478                        	.member	MinorRevision,1296,16,8,16
  1479                        	.member	CommandSetSupport,1312,10,8,48,111
  1480                        	.member	CommandSetActive,1360,10,8,48,112
  1481                        	.member	UltraDMASupport,1408,16,17,8
  1482                        	.member	UltraDMAActive,1416,16,17,8
  1483                        	.member	NormalSecurityEraseUnit,1424,10,8,16,113
  1484                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
                    14
  1485                        	.member	CurrentAPMLevel,1456,16,17,8
  1486                        	.member	ReservedWord91,1464,16,17,8
  1487                        	.member	MasterPasswordID,1472,16,8,16
  1488                        	.member	HardwareResetResult,1488,16,8,16
  Mon Aug  9 2021 16:52                                                Page 29


  1489                        	.member	CurrentAcousticValue,1504,16,17,8
  1490                        	.member	RecommendedAcousticValue,1512,16,17,8
  1491                        	.member	StreamMinRequestSize,1520,16,8,16
  1492                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1493                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1494                        	.member	StreamingPerfGranularity,1568,18,8,32
  1495                        	.member	Max48BitLBA,1600,114,8,0,2
  1496                        	.member	StreamingTransferTime,1664,16,8,16
  1497                        	.member	DsmCap,1680,16,8,16
  1498                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    15
  1499                        	.member	InterSeekDelay,1712,16,8,16
  1500                        	.member	WorldWideName,1728,112,8,0,4
  1501                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1502                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1503                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1504                        	.member	CommandSetSupportExt,1904,10,8,16,116
  1505                        	.member	CommandSetActiveExt,1920,10,8,16,117
  1506                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1507                        	.member	MsnSupport,2032,16,17,2
  1508                        	.member	ReservedWord127,2034,16,17,14
  1509                        	.member	SecurityStatus,2048,10,8,16,118
  1510                        	.member	ReservedWord129,2064,112,8,0,31
  1511                        	.member	CfaPowerMode1,2560,10,8,16,119
  1512                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1513                        	.member	NominalFormFactor,2688,16,17,4
  1514                        	.member	ReservedWord168,2692,16,17,12
  1515                        	.member	DataSetManagementFeature,2704,10,8,16,12
                    0
  1516                        	.member	AdditionalProductID,2720,112,8,0,4
  1517                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1518                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1519                        	.member	SCTCommandTransport,3296,10,8,16,121
  1520                        	.member	ReservedWord207,3312,112,8,0,2
  1521                        	.member	BlockAlignment,3344,10,8,16,122
  1522                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1523                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1524                        	.member	NVCacheCapabilities,3424,10,8,16,123
  1525                        	.member	NVCacheSizeLSW,3440,16,8,16
  1526                        	.member	NVCacheSizeMSW,3456,16,8,16
  1527                        	.member	NominalMediaRotationRate,3472,16,8,16
  1528                        	.member	ReservedWord218,3488,16,8,16
  1529                        	.member	NVCacheOptions,3504,10,8,16,124
  1530                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1531                        	.member	ReservedWord220,3528,16,17,8
  1532                        	.member	ReservedWord221,3536,16,8,16
  1533                        	.member	TransportMajorVersion,3552,10,8,16,125
  1534                        	.member	TransportMinorVersion,3568,16,8,16
  1535                        	.member	ReservedWord224,3584,112,8,0,6
  1536                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  Mon Aug  9 2021 16:52                                                Page 30


  1537                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1538                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1539                        	.member	ReservedWord236,3776,112,8,0,19
  1540                        	.member	Signature,4080,16,17,8
  1541                        	.member	CheckSum,4088,16,17,8
  1542                        	.eos
  1543                        	.stag	_FXDosDevice,5744,127
  1544                        	.member	type,0,14,8,8
  1545                        	.member	initialized,8,14,8,8
  1546                        	.member	devdata,16,129,8,32
  1547                        	.member	devstatus,48,14,8,8
  1548                        	.member	bootSector,56,10,8,928,97
  1549                        	.member	partitionTable,984,10,8,128,98
  1550                        	.member	fileAllocationTable,1112,110,8,0,512
  1551                        	.member	bsOffset,5208,18,8,32
  1552                        	.member	rootDirSectors,5240,18,8,32
  1553                        	.member	root_entry_count,5272,5,8,16
  1554                        	.member	rootEntriesPerPage,5288,5,8,16
  1555                        	.member	sectors_per_cluster,5304,5,8,16
  1556                        	.member	firstDataSector,5320,18,8,32
  1557                        	.member	fatTableOffset,5352,18,8,32
  1558                        	.member	volume_name,5384,110,8,0,12
  1559                        	.member	root_volume_name,5480,110,8,0,12
  1560                        	.member	errorCode,5576,14,8,8
  1561                        	.member	pfInit,5584,641,8,32
  1562                        	.member	pfReset,5616,641,8,32
  1563                        	.member	pfUninit,5648,641,8,32
  1564                        	.member	pfReader,5680,654,8,32
  1565                        	.member	pfWriter,5712,654,8,32
  1566                        	.eos
  1567                        	.utag	item,32,128
  1568                        	.member	dir,0,138,11,32,78
  1569                        	.member	file,0,138,11,32,77
  1570                        	.member	fileInfo,0,138,11,32,79
  1571                        	.eos
  1572                        	.stag	_dos_handle,80,129
  1573                        	.member	fs,0,138,8,32,75
  1574                        	.member	fr,32,5,8,16
  1575                        	.member	path,48,142,8,32
  1576                        	.eos
  1577                        	.stag	fx_file,112,130
  1578                        	.member	fs,0,138,8,32,75
  1579                        	.member	fileInfo,32,138,8,32,79
  1580                        	.member	f,64,138,8,32,77
  1581                        	.member	fr,96,5,8,16
  1582                        	.eos
  1583                        	.line	812
  1584                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",23
  1585                        ;#include "ff/ff.h"			/* Decla
                    rations of FatFs API */
  1586                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
  1587                        	.line	429
  1588                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",24
  Mon Aug  9 2021 16:52                                                Page 31


  1589                        ;#include "diskio.h"		/* Declarations 
                    of device I/O functions */
  1590                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\diskio.h",0
  1591                        	.line	85
  1592                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",25
  1593                        ;
  1594                        ;#include <stdarg.h>
  1595                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
  1596                        	.line	51
  1597                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",27
  1598                        ;
  1599                        ;#pragma section CODE=FFDOS,offset $08:0000
  1600                        FFDOS	section	offset $08:0000
  1601 08:0000:              	ends
  1602                        ;
  1603                        ;
  1604                        ;//extern PFXNODELIST _k_eventManager_IdleProcList
                    ;
  1605                        ;
  1606                        ;/*-----------------------------------------------
                    ---------------------------
  1607                        ;
  1608                        ; Module Private Definitions
  1609                        ;
  1610                        ; ------------------------------------------------
                    ---------------------------*/
  1611                        ;
  1612                        ;#if FF_DEFINED != 86606	/* Revision ID */
  1613                        ;#error Wrong include file (ff.h).
  1614                        ;#endif
  1615                        ;
  1616                        ;/* Limits and boundaries */
  1617                        ;#define MAX_DIR		0x200000		
                    /* Max size of FAT directory */
  1618                        ;#define MAX_DIR_EX	0x10000000		
                    /* Max size of exFAT directory */
  1619                        ;#define MAX_FAT12	0xFF5			
                    /* Max FAT12 clusters (differs from specs, but right for rea
                    l DOS/Windows behavior) */
  1620                        ;#define MAX_FAT16	0xFFF5			
                    /* Max FAT16 clusters (differs from specs, but right for rea
                    l DOS/Windows behavior) */
  1621                        ;#define MAX_FAT32	0x0FFFFFF5		
                    /* Max FAT32 clusters (not specified, practical limit) */
  1622                        ;#define MAX_EXFAT	0x7FFFFFFD		
                    /* Max exFAT clusters (differs from specs, implementation li
                    mit) */
  1623                        ;
  1624                        ;#define FADDR(x) (&(fs->win[x]))
  1625                        ;
  1626                        ;/* Character code support macros */
  1627                        ;#define IsUpper(c)		((c) >= 'A' && (
                    c) <= 'Z')
  1628                        ;#define IsLower(c)		((c) >= 'a' && (
  Mon Aug  9 2021 16:52                                                Page 32


                    c) <= 'z')
  1629                        ;#define IsDigit(c)		((c) >= '0' && (
                    c) <= '9')
  1630                        ;#define IsSurrogate(c)	((c) >= 0xD800 && (c) <=
                     0xDFFF)
  1631                        ;#define IsSurrogateH(c)	((c) >= 0xD800 && (c) <=
                     0xDBFF)
  1632                        ;#define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <=
                     0xDFFF)
  1633                        ;
  1634                        ;/* Additional file access control and file status
                     flags for internal use */
  1635                        ;#define FA_SEEKEND	0x20	/* Seek to end o
                    f the file on file open */
  1636                        ;#define FA_MODIFIED	0x40	/* File has been
                     modified */
  1637                        ;#define FA_DIRTY	0x80	/* FIL.buf[] needs to be
                     written-back */
  1638                        ;
  1639                        ;/* Additional file attribute bits for internal us
                    e */
  1640                        ;#define AM_VOL		0x08	/* Volume label 
                    */
  1641                        ;#define AM_LFN		0x0F	/* LFN entry */
  1642                        ;#define AM_MASK		0x3F	/* Mask of defin
                    ed bits */
  1643                        ;
  1644                        ;/* Name status flags in fn[11] */
  1645                        ;#define NSFLAG		11		/* Index
                     of the name status byte */
  1646                        ;#define NS_LOSS		0x01	/* Out of 8.3 fo
                    rmat */
  1647                        ;#define NS_LFN		0x02	/* Force to crea
                    te LFN entry */
  1648                        ;#define NS_LAST		0x04	/* Last segment 
                    */
  1649                        ;#define NS_BODY		0x08	/* Lower case fl
                    ag (body) */
  1650                        ;#define NS_EXT		0x10	/* Lower case fl
                    ag (ext) */
  1651                        ;#define NS_DOT		0x20	/* Dot entry */
  1652                        ;#define NS_NOLFN	0x40	/* Do not find LFN */
  1653                        ;#define NS_NONAME	0x80	/* Not followed 
                    */
  1654                        ;
  1655                        ;/* exFAT directory entry types */
  1656                        ;#define	ET_BITMAP	0x81	/* Allocation bi
                    tmap */
  1657                        ;#define	ET_UPCASE	0x82	/* Up-case table
                     */
  1658                        ;#define	ET_VLABEL	0x83	/* Volume label 
                    */
  1659                        ;#define	ET_FILEDIR	0x85	/* File and dire
                    ctory */
  1660                        ;#define	ET_STREAM	0xC0	/* Stream extens
                    ion */
  1661                        ;#define	ET_FILENAME	0xC1	/* Name extensio
                    n */
  Mon Aug  9 2021 16:52                                                Page 33


  1662                        ;
  1663                        ;/* FatFs refers the FAT structure as simple byte 
                    array instead of structure member
  1664                        ; / because the C structure is not binary compatib
                    le between different platforms */
  1665                        ;
  1666                        ;#define BS_JmpBoot			0	
                    	/* x86 jump instruction (3-byte) */
  1667                        ;#define BS_OEMName			3	
                    	/* OEM name (8-byte) */
  1668                        ;#define BPB_BytsPerSec		11		
                    /* Sector size [byte] (WORD) */
  1669                        ;#define BPB_SecPerClus		13		
                    /* Cluster size [sector] (BYTE) */
  1670                        ;#define BPB_RsvdSecCnt		14		
                    /* Size of reserved area [sector] (WORD) */
  1671                        ;#define BPB_NumFATs			16	
                    	/* Number of FATs (BYTE) */
  1672                        ;#define BPB_RootEntCnt		17		
                    /* Size of root directory area for FAT [entry] (WORD) */
  1673                        ;#define BPB_TotSec16		19		
                    /* Volume size (16-bit) [sector] (WORD) */
  1674                        ;#define BPB_Media			21	
                    	/* Media descriptor byte (BYTE) */
  1675                        ;#define BPB_FATSz16			22	
                    	/* FAT size (16-bit) [sector] (WORD) */
  1676                        ;#define BPB_SecPerTrk		24		
                    /* Number of sectors per track for int13h [sector] (WORD) */
  1677                        ;#define BPB_NumHeads		26		
                    /* Number of heads for int13h (WORD) */
  1678                        ;#define BPB_HiddSec			28	
                    	/* Volume offset from top of the drive (DWORD) */
  1679                        ;#define BPB_TotSec32		32		
                    /* Volume size (32-bit) [sector] (DWORD) */
  1680                        ;#define BS_DrvNum			36	
                    	/* Physical drive number for int13h (BYTE) */
  1681                        ;#define BS_NTres			37		
                    /* WindowsNT error flag (BYTE) */
  1682                        ;#define BS_BootSig			38	
                    	/* Extended boot signature (BYTE) */
  1683                        ;#define BS_VolID			39		
                    /* Volume serial number (DWORD) */
  1684                        ;#define BS_VolLab			43	
                    	/* Volume label string (8-byte) */
  1685                        ;#define BS_FilSysType		54		
                    /* Filesystem type string (8-byte) */
  1686                        ;#define BS_BootCode			62	
                    	/* Boot code (448-byte) */
  1687                        ;#define BS_55AA				510	
                    	/* Signature word (WORD) */
  1688                        ;
  1689                        ;#define BPB_FATSz32			36	
                    	/* FAT32: FAT size [sector] (DWORD) */
  1690                        ;#define BPB_ExtFlags32		40		
                    /* FAT32: Extended flags (WORD) */
  1691                        ;#define BPB_FSVer32			42	
                    	/* FAT32: Filesystem version (WORD) */
  1692                        ;#define BPB_RootClus32		44		
  Mon Aug  9 2021 16:52                                                Page 34


                    /* FAT32: Root directory cluster (DWORD) */
  1693                        ;#define BPB_FSInfo32		48		
                    /* FAT32: Offset of FSINFO sector (WORD) */
  1694                        ;#define BPB_BkBootSec32		50		
                    /* FAT32: Offset of backup boot sector (WORD) */
  1695                        ;#define BS_DrvNum32			64	
                    	/* FAT32: Physical drive number for int13h (BYTE) */
  1696                        ;#define BS_NTres32			65	
                    	/* FAT32: Error flag (BYTE) */
  1697                        ;#define BS_BootSig32		66		
                    /* FAT32: Extended boot signature (BYTE) */
  1698                        ;#define BS_VolID32			67	
                    	/* FAT32: Volume serial number (DWORD) */
  1699                        ;#define BS_VolLab32			71	
                    	/* FAT32: Volume label string (8-byte) */
  1700                        ;#define BS_FilSysType32		82		
                    /* FAT32: Filesystem type string (8-byte) */
  1701                        ;#define BS_BootCode32		90		
                    /* FAT32: Boot code (420-byte) */
  1702                        ;
  1703                        ;#define BPB_ZeroedEx		11		
                    /* exFAT: MBZ field (53-byte) */
  1704                        ;#define BPB_VolOfsEx		64		
                    /* exFAT: Volume offset from top of the drive [sector] (QWOR
                    D) */
  1705                        ;#define BPB_TotSecEx		72		
                    /* exFAT: Volume size [sector] (QWORD) */
  1706                        ;#define BPB_FatOfsEx		80		
                    /* exFAT: FAT offset from top of the volume [sector] (DWORD)
                     */
  1707                        ;#define BPB_FatSzEx			84	
                    	/* exFAT: FAT size [sector] (DWORD) */
  1708                        ;#define BPB_DataOfsEx		88		
                    /* exFAT: Data offset from top of the volume [sector] (DWORD
                    ) */
  1709                        ;#define BPB_NumClusEx		92		
                    /* exFAT: Number of clusters (DWORD) */
  1710                        ;#define BPB_RootClusEx		96		
                    /* exFAT: Root directory start cluster (DWORD) */
  1711                        ;#define BPB_VolIDEx			100	
                    	/* exFAT: Volume serial number (DWORD) */
  1712                        ;#define BPB_FSVerEx			104	
                    	/* exFAT: Filesystem version (WORD) */
  1713                        ;#define BPB_VolFlagEx		106		
                    /* exFAT: Volume flags (WORD) */
  1714                        ;#define BPB_BytsPerSecEx	108		/* exFAT
                    : Log2 of sector size in unit of byte (BYTE) */
  1715                        ;#define BPB_SecPerClusEx	109		/* exFAT
                    : Log2 of cluster size in unit of sector (BYTE) */
  1716                        ;#define BPB_NumFATsEx		110		
                    /* exFAT: Number of FATs (BYTE) */
  1717                        ;#define BPB_DrvNumEx		111		
                    /* exFAT: Physical drive number for int13h (BYTE) */
  1718                        ;#define BPB_PercInUseEx		112		
                    /* exFAT: Percent in use (BYTE) */
  1719                        ;#define BPB_RsvdEx			113	
                    	/* exFAT: Reserved (7-byte) */
  1720                        ;#define BS_BootCodeEx		120		
  Mon Aug  9 2021 16:52                                                Page 35


                    /* exFAT: Boot code (390-byte) */
  1721                        ;
  1722                        ;#define DIR_Name			0		
                    /* Short file name (11-byte) */
  1723                        ;#define DIR_Attr			11		
                    /* Attribute (BYTE) */
  1724                        ;#define DIR_NTres			12	
                    	/* Lower case flag (BYTE) */
  1725                        ;#define DIR_CrtTime10		13		
                    /* Created time sub-second (BYTE) */
  1726                        ;#define DIR_CrtTime			14	
                    	/* Created time (DWORD) */
  1727                        ;#define DIR_LstAccDate		18		
                    /* Last accessed date (WORD) */
  1728                        ;#define DIR_FstClusHI		20		
                    /* Higher 16-bit of first cluster (WORD) */
  1729                        ;#define DIR_ModTime			22	
                    	/* Modified time (DWORD) */
  1730                        ;#define DIR_FstClusLO		26		
                    /* Lower 16-bit of first cluster (WORD) */
  1731                        ;#define DIR_FileSize		28		
                    /* File size (DWORD) */
  1732                        ;#define LDIR_Ord			0		
                    /* LFN: LFN order and LLE flag (BYTE) */
  1733                        ;#define LDIR_Attr			11	
                    	/* LFN: LFN attribute (BYTE) */
  1734                        ;#define LDIR_Type			12	
                    	/* LFN: Entry type (BYTE) */
  1735                        ;#define LDIR_Chksum			13	
                    	/* LFN: Checksum of the SFN (BYTE) */
  1736                        ;#define LDIR_FstClusLO		26		
                    /* LFN: MBZ field (WORD) */
  1737                        ;#define XDIR_Type			0	
                    	/* exFAT: Type of exFAT directory entry (BYTE) */
  1738                        ;#define XDIR_NumLabel		1		
                    /* exFAT: Number of volume label characters (BYTE) */
  1739                        ;#define XDIR_Label			2	
                    	/* exFAT: Volume label (11-WORD) */
  1740                        ;#define XDIR_CaseSum		4		
                    /* exFAT: Sum of case conversion table (DWORD) */
  1741                        ;#define XDIR_NumSec			1	
                    	/* exFAT: Number of secondary entries (BYTE) */
  1742                        ;#define XDIR_SetSum			2	
                    	/* exFAT: Sum of the set of directory entries (WORD) */
  1743                        ;#define XDIR_Attr			4	
                    	/* exFAT: File attribute (WORD) */
  1744                        ;#define XDIR_CrtTime		8		
                    /* exFAT: Created time (DWORD) */
  1745                        ;#define XDIR_ModTime		12		
                    /* exFAT: Modified time (DWORD) */
  1746                        ;#define XDIR_AccTime		16		
                    /* exFAT: Last accessed time (DWORD) */
  1747                        ;#define XDIR_CrtTime10		20		
                    /* exFAT: Created time subsecond (BYTE) */
  1748                        ;#define XDIR_ModTime10		21		
                    /* exFAT: Modified time subsecond (BYTE) */
  1749                        ;#define XDIR_CrtTZ			22	
                    	/* exFAT: Created timezone (BYTE) */
  Mon Aug  9 2021 16:52                                                Page 36


  1750                        ;#define XDIR_ModTZ			23	
                    	/* exFAT: Modified timezone (BYTE) */
  1751                        ;#define XDIR_AccTZ			24	
                    	/* exFAT: Last accessed timezone (BYTE) */
  1752                        ;#define XDIR_GenFlags		33		
                    /* exFAT: General secondary flags (BYTE) */
  1753                        ;#define XDIR_NumName		35		
                    /* exFAT: Number of file name characters (BYTE) */
  1754                        ;#define XDIR_NameHash		36		
                    /* exFAT: Hash of file name (WORD) */
  1755                        ;#define XDIR_ValidFileSize	40		
                    /* exFAT: Valid file size (QWORD) */
  1756                        ;#define XDIR_FstClus		52		
                    /* exFAT: First cluster of the file data (DWORD) */
  1757                        ;#define XDIR_FileSize		56		
                    /* exFAT: File/Directory size (QWORD) */
  1758                        ;
  1759                        ;#define SZDIRE				32	
                    	/* Size of a directory entry */
  1760                        ;#define DDEM				0xE5	
                    /* Deleted directory entry mark set to DIR_Name[0] */
  1761                        ;#define RDDEM				0x05	
                    /* Replacement of the character collides with DDEM */
  1762                        ;#define LLEF				0x40	
                    /* Last long entry flag in LDIR_Ord */
  1763                        ;
  1764                        ;#define FSI_LeadSig			0	
                    	/* FAT32 FSI: Leading signature (DWORD) */
  1765                        ;#define FSI_StrucSig		484		
                    /* FAT32 FSI: Structure signature (DWORD) */
  1766                        ;#define FSI_Free_Count		488		
                    /* FAT32 FSI: Number of free clusters (DWORD) */
  1767                        ;#define FSI_Nxt_Free		492		
                    /* FAT32 FSI: Last allocated cluster (DWORD) */
  1768                        ;
  1769                        ;#define MBR_Table			446	
                    	/* MBR: Offset of partition table in the MBR */
  1770                        ;#define SZ_PTE				16	
                    	/* MBR: Size of a partition table entry */
  1771                        ;#define PTE_Boot			0		
                    /* MBR PTE: Boot indicator */
  1772                        ;#define PTE_StHead			1	
                    	/* MBR PTE: Start head */
  1773                        ;#define PTE_StSec			2	
                    	/* MBR PTE: Start sector */
  1774                        ;#define PTE_StCyl			3	
                    	/* MBR PTE: Start cylinder */
  1775                        ;#define PTE_System			4	
                    	/* MBR PTE: System ID */
  1776                        ;#define PTE_EdHead			5	
                    	/* MBR PTE: End head */
  1777                        ;#define PTE_EdSec			6	
                    	/* MBR PTE: End sector */
  1778                        ;#define PTE_EdCyl			7	
                    	/* MBR PTE: End cylinder */
  1779                        ;#define PTE_StLba			8	
                    	/* MBR PTE: Start in LBA */
  1780                        ;#define PTE_SizLba			12	
  Mon Aug  9 2021 16:52                                                Page 37


                    	/* MBR PTE: Size in LBA */
  1781                        ;
  1782                        ;#define GPTH_Sign			0	
                    	/* GPT: Header signature (8-byte) */
  1783                        ;#define GPTH_Rev			8		
                    /* GPT: Revision (DWORD) */
  1784                        ;#define GPTH_Size			12	
                    	/* GPT: Header size (DWORD) */
  1785                        ;#define GPTH_Bcc			16		
                    /* GPT: Header BCC (DWORD) */
  1786                        ;#define GPTH_CurLba			24	
                    	/* GPT: Main header LBA (QWORD) */
  1787                        ;#define GPTH_BakLba			32	
                    	/* GPT: Backup header LBA (QWORD) */
  1788                        ;#define GPTH_FstLba			40	
                    	/* GPT: First LBA for partitions (QWORD) */
  1789                        ;#define GPTH_LstLba			48	
                    	/* GPT: Last LBA for partitions (QWORD) */
  1790                        ;#define GPTH_DskGuid		56		
                    /* GPT: Disk GUID (16-byte) */
  1791                        ;#define GPTH_PtOfs			72	
                    	/* GPT: Partation table LBA (QWORD) */
  1792                        ;#define GPTH_PtNum			80	
                    	/* GPT: Number of table entries (DWORD) */
  1793                        ;#define GPTH_PteSize		84		
                    /* GPT: Size of table entry (DWORD) */
  1794                        ;#define GPTH_PtBcc			88	
                    	/* GPT: Partation table BCC (DWORD) */
  1795                        ;#define SZ_GPTE				128	
                    	/* GPT: Size of partition table entry */
  1796                        ;#define GPTE_PtGuid			0	
                    	/* GPT PTE: Partition type GUID (16-byte) */
  1797                        ;#define GPTE_UpGuid			16	
                    	/* GPT PTE: Partition unique GUID (16-byte) */
  1798                        ;#define GPTE_FstLba			32	
                    	/* GPT PTE: First LBA (QWORD) */
  1799                        ;#define GPTE_LstLba			40	
                    	/* GPT PTE: Last LBA inclusive (QWORD) */
  1800                        ;#define GPTE_Flags			48	
                    	/* GPT PTE: Flags (QWORD) */
  1801                        ;#define GPTE_Name			56	
                    	/* GPT PTE: Name */
  1802                        ;
  1803                        ;/* Post process on fatal error in the file operat
                    ions */
  1804                        ;#define ABORT(fs, res)		{ fp->err = (BYT
                    E)(res); LEAVE_FF(fs, res); }
  1805                        ;
  1806                        ;/* Re-entrancy related */
  1807                        ;#if FF_FS_REENTRANT
  1808                        ;#if FF_USE_LFN == 1
  1809                        ;#error Static LFN work area cannot be used at thr
                    ead-safe configuration
  1810                        ;#endif
  1811                        ;#define LEAVE_FF(fs, res)	{ unlock_fs(fs, 
                    res); return res; }
  1812                        ;#else
  1813                        ;#define LEAVE_FF(fs, res)	return res
  Mon Aug  9 2021 16:52                                                Page 38


  1814                        ;#endif
  1815                        ;
  1816                        ;/* Definitions of logical drive - physical locati
                    on conversion */
  1817                        ;#if FF_MULTI_PARTITION
  1818                        ;#define LD2PD(vol) VolToPart[vol].pd	/* Get p
                    hysical drive number */
  1819                        ;#define LD2PT(vol) VolToPart[vol].pt	/* Get p
                    artition index */
  1820                        ;#else
  1821                        ;#define LD2PD(vol) (BYTE)(vol)	/* Each logical 
                    drive is associated with the same physical drive number */
  1822                        ;#define LD2PT(vol) 0			/* Find 
                    first valid partition or in SFD */
  1823                        ;#endif
  1824                        ;
  1825                        ;/* Definitions of sector size */
  1826                        ;#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 
                    && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MAX_SS != 40
                    96) || (FF_MIN_SS != 512 && FF_MIN_SS != 1024 && FF_MIN_SS !
                    = 2048 && FF_MIN_SS != 4096)
  1827                        ;#error Wrong sector size configuration
  1828                        ;#endif
  1829                        ;#if FF_MAX_SS == FF_MIN_SS
  1830                        ;#define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed
                     sector size */
  1831                        ;#else
  1832                        ;#define SS(fs)	((fs)->ssize)	/* Variable sect
                    or size */
  1833                        ;#endif
  1834                        ;
  1835                        ;/* Timestamp */
  1836                        ;#if FF_FS_NORTC == 1
  1837                        ;#if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 
                    || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NORTC_MDAY < 
                    1 || FF_NORTC_MDAY > 31
  1838                        ;#error Invalid FF_FS_NORTC settings
  1839                        ;#endif
  1840                        ;#define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR -
                     1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_NORTC_M
                    DAY << 16)
  1841                        ;#else
  1842                        ;#define GET_FATTIME()	get_fattime()
  1843                        ;#endif
  1844                        ;
  1845                        ;/* File lock controls */
  1846                        ;#if FF_FS_LOCK != 0
  1847                        ;#if FF_FS_READONLY
  1848                        ;#error FF_FS_LOCK must be 0 at read-only configur
                    ation
  1849                        ;#endif
  1850                        ;typedef struct
  1851                        ;{
  1852                        ;	FATFS *fs; /* Object ID 1, volume (NULL:blank en
                    try) */
  1853                        ;	DWORD clu; /* Object ID 2, containing directory 
                    (0:root) */
  1854                        ;	DWORD ofs; /* Object ID 3, offset in the directo
  Mon Aug  9 2021 16:52                                                Page 39


                    ry */
  1855                        ;	WORD ctr; /* Object open counter, 0:none, 0x01..
                    0xFF:read mode open count, 0x100:write mode */
  1856                        ;}FILESEM;
  1857                        ;#endif
  1858                        ;
  1859                        ;/* SBCS up-case tables (\x80-\xFF) */
  1860                        ;#define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1861                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1862                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1863                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1864                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1865                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1866                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1867                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1868                        ;#define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1869                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1870                        ;					0xA0,0xA1,0xA2,0
                    xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1871                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1872                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1873                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1874                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1875                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1876                        ;#define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1877                        ;					0x90,0x92,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0
                    x87, \
  Mon Aug  9 2021 16:52                                                Page 40


  1878                        ;					0x88,0x89,0x8A,0
                    x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0
                    x96, \
  1879                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1880                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1881                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1882                        ;					0x97,0xEA,0xEB,0
                    xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1883                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1884                        ;#define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1885                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1886                        ;					0x80,0x81,0x82,0
                    x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0
                    x8F, \
  1887                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1888                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1889                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0
                    xDE, \
  1890                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1891                        ;					0xF0,0xF0,0xF2,0
                    xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0
                    xFF}
  1892                        ;#define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95
                    ,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
  1893                        ;					0x90,0x92,0x92,0
                    xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9F, \
  1894                        ;					0xA0,0xA1,0xE0,0
                    xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1895                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1896                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1897                        ;					0xB5,0xB6,0xB7,0
                    xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  Mon Aug  9 2021 16:52                                                Page 41


  1898                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0
                    xEF, \
  1899                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1900                        ;#define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41
                    ,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
  1901                        ;					0x45,0x92,0x92,0
                    x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0
                    x9F, \
  1902                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1903                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1904                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1905                        ;					0xD1,0xD1,0x45,0
                    x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0
                    xDF, \
  1906                        ;					0x4F,0xE1,0x4F,0
                    x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0
                    xEF, \
  1907                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1908                        ;#define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE
                    ,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
  1909                        ;					0x90,0x91,0x91,0
                    xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0
                    xAC, \
  1910                        ;					0xB5,0xD6,0xE0,0
                    xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0
                    xAF, \
  1911                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0
                    xBF, \
  1912                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1913                        ;					0xD1,0xD1,0xD2,0
                    xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1914                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0
                    xEF, \
  1915                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0
                    xFF}
  1916                        ;#define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85
                    ,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
  1917                        ;					0x91,0x91,0x93,0
                    x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0
                    x9F, \
  1918                        ;					0xA1,0xA1,0xA3,0
  Mon Aug  9 2021 16:52                                                Page 42


                    xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0
                    xAF, \
  1919                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0
                    xBF, \
  1920                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1921                        ;					0xD1,0xD1,0xD3,0
                    xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0
                    xDF, \
  1922                        ;					0xE0,0xE2,0xE2,0
                    xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0
                    xEF, \
  1923                        ;					0xF0,0xF2,0xF2,0
                    xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0
                    xFF}
  1924                        ;#define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7
                    ,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
  1925                        ;					0x90,0x92,0x92,0
                    xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9E, \
  1926                        ;					0xB5,0xD6,0xE0,0
                    xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1927                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1928                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1929                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1930                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0
                    xEF, \
  1931                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1932                        ;#define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91
                    ,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
  1933                        ;					0x90,0x91,0x92,0
                    x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1934                        ;					0x86,0x8B,0x9F,0
                    x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1935                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1936                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1937                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1938                        ;					0xE0,0xE1,0xE2,0
  Mon Aug  9 2021 16:52                                                Page 43


                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1939                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1940                        ;#define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
  1941                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9F, \
  1942                        ;					0xA4,0xA5,0xA6,0
                    xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1943                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1944                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1945                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1946                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1947                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1948                        ;#define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1949                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1950                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1951                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1952                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1953                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1954                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1955                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1956                        ;#define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41
                    ,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
  1957                        ;					0x45,0x45,0x45,0
                    x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0
                    x9F, \
  1958                        ;					0xA0,0xA1,0x4F,0
                    x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
  Mon Aug  9 2021 16:52                                                Page 44


                    xAF, \
  1959                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1960                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1961                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1962                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1963                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1964                        ;#define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1965                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1966                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1967                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1968                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1969                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1970                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1971                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1972                        ;#define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1973                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1974                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1975                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1976                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1977                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1978                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
  Mon Aug  9 2021 16:52                                                Page 45


                    xEF, \
  1979                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1980                        ;#define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1981                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1982                        ;					0x80,0x81,0x82,0
                    x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0
                    x8F, \
  1983                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1984                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1985                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1986                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1987                        ;					0xF0,0xF0,0xF2,0
                    xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1988                        ;#define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1989                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0
                    x90, \
  1990                        ;					0x91,0x90,0x92,0
                    x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1991                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1992                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1993                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0
                    xDF, \
  1994                        ;					0xA9,0xAA,0xAC,0
                    xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0
                    xEF, \
  1995                        ;					0xF0,0xF1,0xD1,0
                    xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0
                    xFF}
  1996                        ;
  1997                        ;/* DBCS code range |----- 1st byte -----|  |-----
                    ------ 2nd byte -----------| */
  1998                        ;/*                  <------>    <------>    <----
                    -->    <------>    <------>  */
  1999                        ;#define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 
                    0x7E, 0x80, 0xFC, 0x00, 0x00}
  2000                        ;#define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 
  Mon Aug  9 2021 16:52                                                Page 46


                    0x7E, 0x80, 0xFE, 0x00, 0x00}
  2001                        ;#define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 
                    0x5A, 0x61, 0x7A, 0x81, 0xFE}
  2002                        ;#define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 
                    0x7E, 0xA1, 0xFE, 0x00, 0x00}
  2003                        ;
  2004                        ;/* Macros for table definitions */
  2005                        ;#define MERGE_2STR(a, b) a ## b
  2006                        ;#define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
  2007                        ;
  2008                        ;/*-----------------------------------------------
                    ---------------------------
  2009                        ;
  2010                        ; Module Private Work Area
  2011                        ;
  2012                        ; ------------------------------------------------
                    ---------------------------*/
  2013                        ;/* Remark: Variables defined here without initial
                     value shall be guaranteed
  2014                        ; /  zero/null at start-up. If not, the linker opt
                    ion or start-up routine is
  2015                        ; /  not compliance with C standard. */
  2016                        ;
  2017                        ;/*--------------------------------*/
  2018                        ;/* File/Volume controls           */
  2019                        ;/*--------------------------------*/
  2020                        ;
  2021                        ;#if FF_VOLUMES < 1 || FF_VOLUMES > 10
  2022                        ;#error Wrong FF_VOLUMES setting
  2023                        ;#endif
  2024                        ;static FATFS FAR * FatFs[FF_VOLUMES] = {NULL,NULL
                    ,NULL,NULL,NULL,NULL,NULL,NULL}; /* Pointer to the filesyste
                    m objects (logical drives) */
  2025                        	data
  2026                        ~~FatFs:
  2027 00:0000: 00 00 00 00  	dl	$0,$0,$0,$0,$0,$0,$0,$0
       00:0004: 00 00 00 00 
       00:0008: 00 00 00 00 
       00:000C: 00 00 00 00 
       00:0010: 00 00 00 00 
       00:0014: 00 00 00 00 
       00:0018: 00 00 00 00 
       00:001C: 00 00 00 00 
  2028 00:0020:              	ends
  2029                        ;static WORD Fsid; /* Filesystem mount ID */
  2030                        ;
  2031                        ;#if FF_FS_RPATH != 0
  2032                        ;static BYTE CurrVol; /* Current drive */
  2033                        ;#endif
  2034                        ;
  2035                        ;#if FF_FS_LOCK != 0
  2036                        ;static FILESEM Files[FF_FS_LOCK]; /* Open object 
                    lock semaphores */
  2037                        ;#endif
  2038                        ;
  2039                        ;#if FF_STR_VOLUME_ID
  2040                        ;#ifdef FF_VOLUME_STRS
  2041                        ;static const char* const VolumeStr[FF_VOLUMES] = 
  Mon Aug  9 2021 16:52                                                Page 47


                    {FF_VOLUME_STRS}; /* Pre-defined volume ID */
  2042                        	data
  2043                        ~~VolumeStr:
  2044 00:0020: xx xx xx xx  	dl	L1+0
  2045 00:0024: xx xx xx xx  	dl	L1+4
  2046 00:0028: xx xx xx xx  	dl	L1+9
  2047 00:002C: xx xx xx xx  	dl	L1+12
  2048 00:0030: xx xx xx xx  	dl	L1+15
  2049 00:0034: xx xx xx xx  	dl	L1+18
  2050 00:0038: xx xx xx xx  	dl	L1+22
  2051 00:003C: xx xx xx xx  	dl	L1+27
  2052 00:0040:              	ends
  2053                        	data
  2054                        L1:
  2055 00:0040: 52 41 4D 00  	db	$52,$41,$4D,$00,$4E,$41,$4E,$44,$00,$46,
                    $44,$00,$53,$44,$00
       00:0044: 4E 41 4E 44 
       00:0048: 00 46 44 00 
       00:004C: 53 44 00 
  2056 00:004F: 48 44 00 55  	db	$48,$44,$00,$55,$53,$42,$00,$55,$53,$42,
                    $32,$00,$55,$53,$42
       00:0053: 53 42 00 55 
       00:0057: 53 42 32 00 
       00:005B: 55 53 42 
  2057 00:005E: 33 00        	db	$33,$00
  2058 00:0060:              	ends
  2059                        ;#endif
  2060                        ;#endif
  2061                        ;
  2062                        ;#if FF_LBA64
  2063                        ;#if FF_MIN_GPT > 0x100000000
  2064                        ;#error Wrong FF_MIN_GPT setting
  2065                        ;#endif
  2066                        ;static const BYTE GUID_MS_Basic[16] =
  2067                        ;{	0xA2,0xA0,0xD0,0xEB,0xE5,0xB9,0x33,0x44,
                    0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7};
  2068                        ;#endif
  2069                        ;
  2070                        ;/*--------------------------------*/
  2071                        ;/* LFN/Directory working buffer   */
  2072                        ;/*--------------------------------*/
  2073                        ;
  2074                        ;#if FF_USE_LFN == 0		/* Non-LFN confi
                    guration */
  2075                        ;#if FF_FS_EXFAT
  2076                        ;#error LFN must be enabled when enable exFAT
  2077                        ;#endif
  2078                        ;#define DEF_NAMBUF
  2079                        ;#define INIT_NAMBUF(fs)
  2080                        ;#define FREE_NAMBUF()
  2081                        ;#define LEAVE_MKFS(res)	return res
  2082                        ;
  2083                        ;#else					/* LFN c
                    onfigurations */
  2084                        ;#if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
  2085                        ;#error Wrong setting of FF_MAX_LFN
  2086                        ;#endif
  2087                        ;#if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
  Mon Aug  9 2021 16:52                                                Page 48


  2088                        ;#error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
  2089                        ;#endif
  2090                        ;#if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
  2091                        ;#error Wrong setting of FF_LFN_UNICODE
  2092                        ;#endif
  2093                        ;static const BYTE LfnOfs[] =
  2094                        	data
  2095                        ~~LfnOfs:
  2096                        ;{	1,3,5,7,9,14,16,18,20,22,24,28,30}; /* F
                    AT: Offset of LFN characters in the directory entry */
  2097 00:0060: 01 03 05 07  	db	$1,$3,$5,$7,$9,$E,$10,$12,$14,$16
       00:0064: 09 0E 10 12 
       00:0068: 14 16 
  2098 00:006A: 18 1C 1E     	db	$18,$1C,$1E
  2099 00:006D:              	ends
  2100                        ;#define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIR
                    E)	/* exFAT: Size of directory entry block scratchpad buffe
                    r needed for the name length */
  2101                        ;
  2102                        ;#if FF_USE_LFN == 1		/* LFN enabled w
                    ith static working buffer */
  2103                        ;#if FF_FS_EXFAT
  2104                        ;static BYTE DirBuf[MAXDIRB(FF_MAX_LFN)]; /* Direc
                    tory entry block scratchpad buffer */
  2105                        ;#endif
  2106                        ;static WCHAR LfnBuf[FF_MAX_LFN + 1]; /* LFN worki
                    ng buffer */
  2107                        ;#define DEF_NAMBUF
  2108                        ;#define INIT_NAMBUF(fs)
  2109                        ;#define FREE_NAMBUF()
  2110                        ;#define LEAVE_MKFS(res)	return res
  2111                        ;
  2112                        ;#elif FF_USE_LFN == 2 	/* LFN enabled with dyna
                    mic working buffer on the stack */
  2113                        ;#if FF_FS_EXFAT
  2114                        ;#define DEF_NAMBUF		WCHAR lbuf[FF_MA
                    X_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working b
                    uffer and directory entry block scratchpad buffer */
  2115                        ;#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (
                    fs)->dirbuf = dbuf; }
  2116                        ;#define FREE_NAMBUF()
  2117                        ;#else
  2118                        ;#define DEF_NAMBUF		WCHAR lbuf[FF_MA
                    X_LFN+1];	/* LFN working buffer */
  2119                        ;#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
  2120                        ;#define FREE_NAMBUF()
  2121                        ;#endif
  2122                        ;#define LEAVE_MKFS(res)	return res
  2123                        ;
  2124                        ;#elif FF_USE_LFN == 3 	/* LFN enabled with dyna
                    mic working buffer on the heap */
  2125                        ;#if FF_FS_EXFAT
  2126                        ;#define DEF_NAMBUF		WCHAR *lfn;	
                    /* Pointer to LFN working buffer and directory entry block s
                    cratchpad buffer */
  2127                        ;#define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_
                    MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAVE_FF(fs, 
                    FR_NOT_ENOUGH_CORE); (fs)->lfnbuf = lfn; (fs)->dirbuf = (BYT
  Mon Aug  9 2021 16:52                                                Page 49


                    E*)(lfn+FF_MAX_LFN+1); }
  2128                        ;#define FREE_NAMBUF()	ff_memfree(lfn)
  2129                        ;#else
  2130                        ;#define DEF_NAMBUF		WCHAR *lfn;	
                    /* Pointer to LFN working buffer */
  2131                        ;#define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_
                    MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_CORE); (
                    fs)->lfnbuf = lfn; }
  2132                        ;#define FREE_NAMBUF()	ff_memfree(lfn)
  2133                        ;#endif
  2134                        ;#define LEAVE_MKFS(res)	{ if (!work) ff_memfree(
                    buf); return res; }
  2135                        ;#define MAX_MALLOC 0x400
  2136                        ;//0x8000
  2137                        ;/* Must be >=FF_MAX_SS */
  2138                        ;
  2139                        ;#else
  2140                        ;#error Wrong setting of FF_USE_LFN
  2141                        ;
  2142                        ;#endif	/* FF_USE_LFN == 1 */
  2143                        ;#endif	/* FF_USE_LFN == 0 */
  2144                        ;
  2145                        ;/*--------------------------------*/
  2146                        ;/* Code conversion tables         */
  2147                        ;/*--------------------------------*/
  2148                        ;
  2149                        ;#if FF_CODE_PAGE == 0		/* Run-time code
                     page configuration */
  2150                        ;#define CODEPAGE CodePage
  2151                        ;static WORD CodePage; /* Current code page */
  2152                        ;static const BYTE *ExCvt, *DbcTbl; /* Pointer to 
                    current SBCS up-case table and DBCS code range table below *
                    /
  2153                        ;
  2154                        ;static const BYTE Ct437[] = TBL_CT437;
  2155                        ;static const BYTE Ct720[] = TBL_CT720;
  2156                        ;static const BYTE Ct737[] = TBL_CT737;
  2157                        ;static const BYTE Ct771[] = TBL_CT771;
  2158                        ;static const BYTE Ct775[] = TBL_CT775;
  2159                        ;static const BYTE Ct850[] = TBL_CT850;
  2160                        ;static const BYTE Ct852[] = TBL_CT852;
  2161                        ;static const BYTE Ct855[] = TBL_CT855;
  2162                        ;static const BYTE Ct857[] = TBL_CT857;
  2163                        ;static const BYTE Ct860[] = TBL_CT860;
  2164                        ;static const BYTE Ct861[] = TBL_CT861;
  2165                        ;static const BYTE Ct862[] = TBL_CT862;
  2166                        ;static const BYTE Ct863[] = TBL_CT863;
  2167                        ;static const BYTE Ct864[] = TBL_CT864;
  2168                        ;static const BYTE Ct865[] = TBL_CT865;
  2169                        ;static const BYTE Ct866[] = TBL_CT866;
  2170                        ;static const BYTE Ct869[] = TBL_CT869;
  2171                        ;static const BYTE Dc932[] = TBL_DC932;
  2172                        ;static const BYTE Dc936[] = TBL_DC936;
  2173                        ;static const BYTE Dc949[] = TBL_DC949;
  2174                        ;static const BYTE Dc950[] = TBL_DC950;
  2175                        ;
  2176                        ;#elif FF_CODE_PAGE < 900	/* Static code page conf
                    iguration (SBCS) */
  Mon Aug  9 2021 16:52                                                Page 50


  2177                        ;#define CODEPAGE FF_CODE_PAGE
  2178                        ;static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CO
                    DE_PAGE);
  2179                        	data
  2180                        ~~ExCvt:
  2181 00:006D: 80 9A 45 41  	db	$80,$9A,$45,$41,$8E,$41,$8F,$80,$45,$45
       00:0071: 8E 41 8F 80 
       00:0075: 45 45 
  2182 00:0077: 45 49 49 49  	db	$45,$49,$49,$49,$8E,$8F,$90,$92,$92,$4F
       00:007B: 8E 8F 90 92 
       00:007F: 92 4F 
  2183 00:0081: 99 4F 55 55  	db	$99,$4F,$55,$55,$59,$99,$9A,$9B,$9C,$9D
       00:0085: 59 99 9A 9B 
       00:0089: 9C 9D 
  2184 00:008B: 9E 9F 41 49  	db	$9E,$9F,$41,$49,$4F,$55,$A5,$A5,$A6,$A7
       00:008F: 4F 55 A5 A5 
       00:0093: A6 A7 
  2185 00:0095: A8 A9 AA AB  	db	$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF,$B0,$B1
       00:0099: AC AD AE AF 
       00:009D: B0 B1 
  2186 00:009F: B2 B3 B4 B5  	db	$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB
       00:00A3: B6 B7 B8 B9 
       00:00A7: BA BB 
  2187 00:00A9: BC BD BE BF  	db	$BC,$BD,$BE,$BF,$C0,$C1,$C2,$C3,$C4,$C5
       00:00AD: C0 C1 C2 C3 
       00:00B1: C4 C5 
  2188 00:00B3: C6 C7 C8 C9  	db	$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
       00:00B7: CA CB CC CD 
       00:00BB: CE CF 
  2189 00:00BD: D0 D1 D2 D3  	db	$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9
       00:00C1: D4 D5 D6 D7 
       00:00C5: D8 D9 
  2190 00:00C7: DA DB DC DD  	db	$DA,$DB,$DC,$DD,$DE,$DF,$E0,$E1,$E2,$E3
       00:00CB: DE DF E0 E1 
       00:00CF: E2 E3 
  2191 00:00D1: E4 E5 E6 E7  	db	$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED
       00:00D5: E8 E9 EA EB 
       00:00D9: EC ED 
  2192 00:00DB: EE EF F0 F1  	db	$EE,$EF,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7
       00:00DF: F2 F3 F4 F5 
       00:00E3: F6 F7 
  2193 00:00E5: F8 F9 FA FB  	db	$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF
       00:00E9: FC FD FE FF 
  2194 00:00ED:              	ends
  2195                        ;
  2196                        ;#else					/* Stati
                    c code page configuration (DBCS) */
  2197                        ;#define CODEPAGE FF_CODE_PAGE
  2198                        ;static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_C
                    ODE_PAGE);
  2199                        ;
  2200                        ;#endif
  2201                        ;
  2202                        ;/*-----------------------------------------------
                    ---------------------------
  2203                        ;
  2204                        ; Module Private Functions
  2205                        ;
  Mon Aug  9 2021 16:52                                                Page 51


  2206                        ; ------------------------------------------------
                    ---------------------------*/
  2207                        ;
  2208                        ;/*-----------------------------------------------
                    ------------------------*/
  2209                        ;/* Load/Store multi-byte word in the FAT structur
                    e                       */
  2210                        ;/*-----------------------------------------------
                    ------------------------*/
  2211                        ;
  2212                        ;static WORD ld_word(const BYTE* ptr) /*	 Load a 
                    2-byte little-endian word */
  2213                        ;{
  2214                        	.line	598
  2215                        	.line	599
  2216                        	FFDOS
  2217                        	func
  2218                        	.function	599
  2219                        ~~ld_word:
  2220                        	longa	on
  2221                        	longi	on
  2222 08:0000: 3B           	tsc
  2223 08:0001: 38           	sec
  2224 08:0002: E9 0A 00     	sbc	#L3
  2225 08:0005: 1B           	tcs
  2226 08:0006: 0B           	phd
  2227 08:0007: 5B           	tcd
  2228             00000004   ptr_0	set	4
  2229                        	.block	599
  2230                        ;	WORD rv;
  2231                        ;
  2232                        ;	//////k_debug_integer("ld_word::before:", *((UIN
                    T*)ptr)  );
  2233                        ;
  2234                        ;	rv = ptr[1];
  2235             00000000   rv_1	set	0
  2236                        	.sym	rv,0,5,1,16
  2237                        	.sym	ptr,4,142,6,32
  2238                        	.line	604
  2239 08:0008: A0 01 00     	ldy	#$1
  2240 08:000B: B7 0E        	lda	[<L3+ptr_0],Y
  2241 08:000D: 29 FF 00     	and	#$ff
  2242 08:0010: 85 09        	sta	<L4+rv_1
  2243                        ;	rv = rv << 8 | ptr[0];
  2244                        	.line	605
  2245 08:0012: A5 09        	lda	<L4+rv_1
  2246 08:0014: EB           	xba
  2247 08:0015: 29 00 FF     	and	#$ff00
  2248 08:0018: 85 01        	sta	<R0
  2249 08:001A: A7 0E        	lda	[<L3+ptr_0]
  2250 08:001C: 29 FF 00     	and	#$ff
  2251 08:001F: 85 05        	sta	<R1
  2252 08:0021: A5 05        	lda	<R1
  2253 08:0023: 05 01        	ora	<R0
  2254 08:0025: 85 09        	sta	<L4+rv_1
  2255                        ;
  2256                        ;	//////k_debug_integer("ld_word::after:", rv);
  2257                        ;
  Mon Aug  9 2021 16:52                                                Page 52


  2258                        ;	return rv;
  2259                        	.line	609
  2260 08:0027: A5 09        	lda	<L4+rv_1
  2261                        L6:
  2262 08:0029: A8           	tay
  2263 08:002A: A5 0C        	lda	<L3+2
  2264 08:002C: 85 10        	sta	<L3+2+4
  2265 08:002E: A5 0B        	lda	<L3+1
  2266 08:0030: 85 0F        	sta	<L3+1+4
  2267 08:0032: 2B           	pld
  2268 08:0033: 3B           	tsc
  2269 08:0034: 18           	clc
  2270 08:0035: 69 0E 00     	adc	#L3+4
  2271 08:0038: 1B           	tcs
  2272 08:0039: 98           	tya
  2273 08:003A: 6B           	rtl
  2274                        ;}
  2275                        	.line	610
  2276                        	.endblock	610
  2277             0000000A   L3	equ	10
  2278             00000009   L4	equ	9
  2279 08:003B:              	ends
  2280                        	efunc
  2281                        	.endfunc	610,9,10
  2282                        	.line	610
  2283                        ;
  2284                        ;static DWORD ld_dword(const BYTE* ptr) /* Load a 
                    4-byte little-endian word */
  2285                        ;{
  2286                        	.line	612
  2287                        	.line	613
  2288                        	FFDOS
  2289                        	func
  2290                        	.function	613
  2291                        ~~ld_dword:
  2292                        	longa	on
  2293                        	longi	on
  2294 08:003B: 3B           	tsc
  2295 08:003C: 38           	sec
  2296 08:003D: E9 0C 00     	sbc	#L7
  2297 08:0040: 1B           	tcs
  2298 08:0041: 0B           	phd
  2299 08:0042: 5B           	tcd
  2300             00000004   ptr_0	set	4
  2301                        	.block	613
  2302                        ;	DWORD rv;
  2303                        ;
  2304                        ;	rv = ptr[3];
  2305             00000000   rv_1	set	0
  2306                        	.sym	rv,0,18,1,32
  2307                        	.sym	ptr,4,142,6,32
  2308                        	.line	616
  2309 08:0043: A0 03 00     	ldy	#$3
  2310 08:0046: B7 10        	lda	[<L7+ptr_0],Y
  2311 08:0048: 29 FF 00     	and	#$ff
  2312 08:004B: 85 09        	sta	<L8+rv_1
  2313 08:004D: 64 0B        	stz	<L8+rv_1+2
  2314                        ;	rv = rv << 8 | ptr[2];
  Mon Aug  9 2021 16:52                                                Page 53


  2315                        	.line	617
  2316 08:004F: D4 0B        	pei	<L8+rv_1+2
  2317 08:0051: D4 09        	pei	<L8+rv_1
  2318 08:0053: A9 08 00     	lda	#$8
  2319                        	xref	~~~lasl
  2320 08:0056: 22 xx xx xx  	jsl	~~~lasl
  2321 08:005A: 85 01        	sta	<R0
  2322 08:005C: 86 03        	stx	<R0+2
  2323 08:005E: A0 02 00     	ldy	#$2
  2324 08:0061: B7 10        	lda	[<L7+ptr_0],Y
  2325 08:0063: 29 FF 00     	and	#$ff
  2326 08:0066: 85 05        	sta	<R1
  2327 08:0068: 64 07        	stz	<R1+2
  2328 08:006A: A5 05        	lda	<R1
  2329 08:006C: 05 01        	ora	<R0
  2330 08:006E: 85 09        	sta	<L8+rv_1
  2331 08:0070: A5 07        	lda	<R1+2
  2332 08:0072: 05 03        	ora	<R0+2
  2333 08:0074: 85 0B        	sta	<L8+rv_1+2
  2334                        ;	rv = rv << 8 | ptr[1];
  2335                        	.line	618
  2336 08:0076: D4 0B        	pei	<L8+rv_1+2
  2337 08:0078: D4 09        	pei	<L8+rv_1
  2338 08:007A: A9 08 00     	lda	#$8
  2339                        	xref	~~~lasl
  2340 08:007D: 22 xx xx xx  	jsl	~~~lasl
  2341 08:0081: 85 01        	sta	<R0
  2342 08:0083: 86 03        	stx	<R0+2
  2343 08:0085: A0 01 00     	ldy	#$1
  2344 08:0088: B7 10        	lda	[<L7+ptr_0],Y
  2345 08:008A: 29 FF 00     	and	#$ff
  2346 08:008D: 85 05        	sta	<R1
  2347 08:008F: 64 07        	stz	<R1+2
  2348 08:0091: A5 05        	lda	<R1
  2349 08:0093: 05 01        	ora	<R0
  2350 08:0095: 85 09        	sta	<L8+rv_1
  2351 08:0097: A5 07        	lda	<R1+2
  2352 08:0099: 05 03        	ora	<R0+2
  2353 08:009B: 85 0B        	sta	<L8+rv_1+2
  2354                        ;	rv = rv << 8 | ptr[0];
  2355                        	.line	619
  2356 08:009D: D4 0B        	pei	<L8+rv_1+2
  2357 08:009F: D4 09        	pei	<L8+rv_1
  2358 08:00A1: A9 08 00     	lda	#$8
  2359                        	xref	~~~lasl
  2360 08:00A4: 22 xx xx xx  	jsl	~~~lasl
  2361 08:00A8: 85 01        	sta	<R0
  2362 08:00AA: 86 03        	stx	<R0+2
  2363 08:00AC: A7 10        	lda	[<L7+ptr_0]
  2364 08:00AE: 29 FF 00     	and	#$ff
  2365 08:00B1: 85 05        	sta	<R1
  2366 08:00B3: 64 07        	stz	<R1+2
  2367 08:00B5: A5 05        	lda	<R1
  2368 08:00B7: 05 01        	ora	<R0
  2369 08:00B9: 85 09        	sta	<L8+rv_1
  2370 08:00BB: A5 07        	lda	<R1+2
  2371 08:00BD: 05 03        	ora	<R0+2
  2372 08:00BF: 85 0B        	sta	<L8+rv_1+2
  Mon Aug  9 2021 16:52                                                Page 54


  2373                        ;	return rv;
  2374                        	.line	620
  2375 08:00C1: A6 0B        	ldx	<L8+rv_1+2
  2376 08:00C3: A5 09        	lda	<L8+rv_1
  2377                        L10:
  2378 08:00C5: A8           	tay
  2379 08:00C6: A5 0E        	lda	<L7+2
  2380 08:00C8: 85 12        	sta	<L7+2+4
  2381 08:00CA: A5 0D        	lda	<L7+1
  2382 08:00CC: 85 11        	sta	<L7+1+4
  2383 08:00CE: 2B           	pld
  2384 08:00CF: 3B           	tsc
  2385 08:00D0: 18           	clc
  2386 08:00D1: 69 10 00     	adc	#L7+4
  2387 08:00D4: 1B           	tcs
  2388 08:00D5: 98           	tya
  2389 08:00D6: 6B           	rtl
  2390                        ;}
  2391                        	.line	621
  2392                        	.endblock	621
  2393             0000000C   L7	equ	12
  2394             00000009   L8	equ	9
  2395 08:00D7:              	ends
  2396                        	efunc
  2397                        	.endfunc	621,9,12
  2398                        	.line	621
  2399                        ;
  2400                        ;#if FF_FS_EXFAT
  2401                        ;static QWORD ld_qword (const BYTE* ptr) /* Load a
                    n 8-byte little-endian word */
  2402                        ;{
  2403                        ;	QWORD rv;
  2404                        ;
  2405                        ;	rv = ptr[7];
  2406                        ;	rv = rv << 8 | ptr[6];
  2407                        ;	rv = rv << 8 | ptr[5];
  2408                        ;	rv = rv << 8 | ptr[4];
  2409                        ;	rv = rv << 8 | ptr[3];
  2410                        ;	rv = rv << 8 | ptr[2];
  2411                        ;	rv = rv << 8 | ptr[1];
  2412                        ;	rv = rv << 8 | ptr[0];
  2413                        ;	return rv;
  2414                        ;}
  2415                        ;#endif
  2416                        ;
  2417                        ;#if !FF_FS_READONLY
  2418                        ;static void st_word(BYTE* ptr, WORD val) /* Store
                     a 2-byte word in little-endian */
  2419                        ;{
  2420                        	.line	641
  2421                        	.line	642
  2422                        	FFDOS
  2423                        	func
  2424                        	.function	642
  2425                        ~~st_word:
  2426                        	longa	on
  2427                        	longi	on
  2428 08:00D7: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 55


  2429 08:00D8: 38           	sec
  2430 08:00D9: E9 00 00     	sbc	#L11
  2431 08:00DC: 1B           	tcs
  2432 08:00DD: 0B           	phd
  2433 08:00DE: 5B           	tcd
  2434             00000004   ptr_0	set	4
  2435             00000008   val_0	set	8
  2436                        	.block	642
  2437                        ;	*ptr++ = (BYTE) val;
  2438                        	.sym	ptr,4,142,6,32
  2439                        	.sym	val,8,5,6,16
  2440                        	.line	643
  2441 08:00DF: E2 20        	sep	#$20
  2442                        	longa	off
  2443 08:00E1: A5 08        	lda	<L11+val_0
  2444 08:00E3: 87 04        	sta	[<L11+ptr_0]
  2445 08:00E5: C2 20        	rep	#$20
  2446                        	longa	on
  2447 08:00E7: E6 04        	inc	<L11+ptr_0
  2448 08:00E9: D0 02        	bne	L14
  2449 08:00EB: E6 06        	inc	<L11+ptr_0+2
  2450                        L14:
  2451                        ;	val >>= 8;
  2452                        	.line	644
  2453 08:00ED: A5 08        	lda	<L11+val_0
  2454 08:00EF: A2 08 00     	ldx	#<$8
  2455                        	xref	~~~asr
  2456 08:00F2: 22 xx xx xx  	jsl	~~~asr
  2457 08:00F6: 85 08        	sta	<L11+val_0
  2458                        ;	*ptr++ = (BYTE) val;
  2459                        	.line	645
  2460 08:00F8: E2 20        	sep	#$20
  2461                        	longa	off
  2462 08:00FA: A5 08        	lda	<L11+val_0
  2463 08:00FC: 87 04        	sta	[<L11+ptr_0]
  2464 08:00FE: C2 20        	rep	#$20
  2465                        	longa	on
  2466 08:0100: E6 04        	inc	<L11+ptr_0
  2467 08:0102: D0 02        	bne	L15
  2468 08:0104: E6 06        	inc	<L11+ptr_0+2
  2469                        L15:
  2470                        ;}
  2471                        	.line	646
  2472                        L16:
  2473 08:0106: A5 02        	lda	<L11+2
  2474 08:0108: 85 08        	sta	<L11+2+6
  2475 08:010A: A5 01        	lda	<L11+1
  2476 08:010C: 85 07        	sta	<L11+1+6
  2477 08:010E: 2B           	pld
  2478 08:010F: 3B           	tsc
  2479 08:0110: 18           	clc
  2480 08:0111: 69 06 00     	adc	#L11+6
  2481 08:0114: 1B           	tcs
  2482 08:0115: 6B           	rtl
  2483                        	.endblock	646
  2484             00000000   L11	equ	0
  2485             00000001   L12	equ	1
  2486 08:0116:              	ends
  Mon Aug  9 2021 16:52                                                Page 56


  2487                        	efunc
  2488                        	.endfunc	646,1,0
  2489                        	.line	646
  2490                        ;
  2491                        ;static void st_dword(BYTE* ptr, DWORD val) /* Sto
                    re a 4-byte word in little-endian */
  2492                        ;{
  2493                        	.line	648
  2494                        	.line	649
  2495                        	FFDOS
  2496                        	func
  2497                        	.function	649
  2498                        ~~st_dword:
  2499                        	longa	on
  2500                        	longi	on
  2501 08:0116: 3B           	tsc
  2502 08:0117: 38           	sec
  2503 08:0118: E9 00 00     	sbc	#L17
  2504 08:011B: 1B           	tcs
  2505 08:011C: 0B           	phd
  2506 08:011D: 5B           	tcd
  2507             00000004   ptr_0	set	4
  2508             00000008   val_0	set	8
  2509                        	.block	649
  2510                        ;	*ptr++ = (BYTE) val;
  2511                        	.sym	ptr,4,142,6,32
  2512                        	.sym	val,8,18,6,32
  2513                        	.line	650
  2514 08:011E: E2 20        	sep	#$20
  2515                        	longa	off
  2516 08:0120: A5 08        	lda	<L17+val_0
  2517 08:0122: 87 04        	sta	[<L17+ptr_0]
  2518 08:0124: C2 20        	rep	#$20
  2519                        	longa	on
  2520 08:0126: E6 04        	inc	<L17+ptr_0
  2521 08:0128: D0 02        	bne	L20
  2522 08:012A: E6 06        	inc	<L17+ptr_0+2
  2523                        L20:
  2524                        ;	val >>= 8;
  2525                        	.line	651
  2526 08:012C: D4 0A        	pei	<L17+val_0+2
  2527 08:012E: D4 08        	pei	<L17+val_0
  2528 08:0130: A9 08 00     	lda	#$8
  2529                        	xref	~~~llsr
  2530 08:0133: 22 xx xx xx  	jsl	~~~llsr
  2531 08:0137: 85 08        	sta	<L17+val_0
  2532 08:0139: 86 0A        	stx	<L17+val_0+2
  2533                        ;	*ptr++ = (BYTE) val;
  2534                        	.line	652
  2535 08:013B: E2 20        	sep	#$20
  2536                        	longa	off
  2537 08:013D: A5 08        	lda	<L17+val_0
  2538 08:013F: 87 04        	sta	[<L17+ptr_0]
  2539 08:0141: C2 20        	rep	#$20
  2540                        	longa	on
  2541 08:0143: E6 04        	inc	<L17+ptr_0
  2542 08:0145: D0 02        	bne	L21
  2543 08:0147: E6 06        	inc	<L17+ptr_0+2
  Mon Aug  9 2021 16:52                                                Page 57


  2544                        L21:
  2545                        ;	val >>= 8;
  2546                        	.line	653
  2547 08:0149: D4 0A        	pei	<L17+val_0+2
  2548 08:014B: D4 08        	pei	<L17+val_0
  2549 08:014D: A9 08 00     	lda	#$8
  2550                        	xref	~~~llsr
  2551 08:0150: 22 xx xx xx  	jsl	~~~llsr
  2552 08:0154: 85 08        	sta	<L17+val_0
  2553 08:0156: 86 0A        	stx	<L17+val_0+2
  2554                        ;	*ptr++ = (BYTE) val;
  2555                        	.line	654
  2556 08:0158: E2 20        	sep	#$20
  2557                        	longa	off
  2558 08:015A: A5 08        	lda	<L17+val_0
  2559 08:015C: 87 04        	sta	[<L17+ptr_0]
  2560 08:015E: C2 20        	rep	#$20
  2561                        	longa	on
  2562 08:0160: E6 04        	inc	<L17+ptr_0
  2563 08:0162: D0 02        	bne	L22
  2564 08:0164: E6 06        	inc	<L17+ptr_0+2
  2565                        L22:
  2566                        ;	val >>= 8;
  2567                        	.line	655
  2568 08:0166: D4 0A        	pei	<L17+val_0+2
  2569 08:0168: D4 08        	pei	<L17+val_0
  2570 08:016A: A9 08 00     	lda	#$8
  2571                        	xref	~~~llsr
  2572 08:016D: 22 xx xx xx  	jsl	~~~llsr
  2573 08:0171: 85 08        	sta	<L17+val_0
  2574 08:0173: 86 0A        	stx	<L17+val_0+2
  2575                        ;	*ptr++ = (BYTE) val;
  2576                        	.line	656
  2577 08:0175: E2 20        	sep	#$20
  2578                        	longa	off
  2579 08:0177: A5 08        	lda	<L17+val_0
  2580 08:0179: 87 04        	sta	[<L17+ptr_0]
  2581 08:017B: C2 20        	rep	#$20
  2582                        	longa	on
  2583 08:017D: E6 04        	inc	<L17+ptr_0
  2584 08:017F: D0 02        	bne	L23
  2585 08:0181: E6 06        	inc	<L17+ptr_0+2
  2586                        L23:
  2587                        ;}
  2588                        	.line	657
  2589                        L24:
  2590 08:0183: A5 02        	lda	<L17+2
  2591 08:0185: 85 0A        	sta	<L17+2+8
  2592 08:0187: A5 01        	lda	<L17+1
  2593 08:0189: 85 09        	sta	<L17+1+8
  2594 08:018B: 2B           	pld
  2595 08:018C: 3B           	tsc
  2596 08:018D: 18           	clc
  2597 08:018E: 69 08 00     	adc	#L17+8
  2598 08:0191: 1B           	tcs
  2599 08:0192: 6B           	rtl
  2600                        	.endblock	657
  2601             00000000   L17	equ	0
  Mon Aug  9 2021 16:52                                                Page 58


  2602             00000001   L18	equ	1
  2603 08:0193:              	ends
  2604                        	efunc
  2605                        	.endfunc	657,1,0
  2606                        	.line	657
  2607                        ;
  2608                        ;#if FF_FS_EXFAT
  2609                        ;static void st_qword (BYTE* ptr, QWORD val) /* St
                    ore an 8-byte word in little-endian */
  2610                        ;{
  2611                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2612                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2613                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2614                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2615                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2616                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2617                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2618                        ;	*ptr++ = (BYTE)val;
  2619                        ;}
  2620                        ;#endif
  2621                        ;#endif	/* !FF_FS_READONLY */
  2622                        ;
  2623                        ;/*-----------------------------------------------
                    ------------------------*/
  2624                        ;/* String functions                              
                                            */
  2625                        ;/*-----------------------------------------------
                    ------------------------*/
  2626                        ;
  2627                        ;/* Copy memory to memory */
  2628                        ;static void mem_cpy(void* dst, const void* src, U
                    INT cnt)
  2629                        ;{
  2630                        	.line	679
  2631                        	.line	680
  2632                        	FFDOS
  2633                        	func
  2634                        	.function	680
  2635                        ~~mem_cpy:
  2636                        	longa	on
  2637                        	longi	on
  2638 08:0193: 3B           	tsc
  2639 08:0194: 38           	sec
  2640 08:0195: E9 08 00     	sbc	#L25
  2641 08:0198: 1B           	tcs
  2642 08:0199: 0B           	phd
  2643 08:019A: 5B           	tcd
  2644             00000004   dst_0	set	4
  2645             00000008   src_0	set	8
  2646             0000000C   cnt_0	set	12
  2647                        	.block	680
  2648                        ;	BYTE *d = (BYTE*) dst;
  2649                        ;	const BYTE *s = (const BYTE*) src;
  2650                        ;
  2651                        ;	if (cnt != 0)
  2652             00000000   d_1	set	0
  2653             00000004   s_1	set	4
  2654                        	.sym	d,0,142,1,32
  Mon Aug  9 2021 16:52                                                Page 59


  2655                        	.sym	s,4,142,1,32
  2656                        	.sym	dst,4,129,6,32
  2657                        	.sym	src,8,129,6,32
  2658                        	.sym	cnt,12,16,6,16
  2659 08:019B: A5 0C        	lda	<L25+dst_0
  2660 08:019D: 85 01        	sta	<L26+d_1
  2661 08:019F: A5 0E        	lda	<L25+dst_0+2
  2662 08:01A1: 85 03        	sta	<L26+d_1+2
  2663 08:01A3: A5 10        	lda	<L25+src_0
  2664 08:01A5: 85 05        	sta	<L26+s_1
  2665 08:01A7: A5 12        	lda	<L25+src_0+2
  2666 08:01A9: 85 07        	sta	<L26+s_1+2
  2667                        	.line	684
  2668                        ;	{
  2669 08:01AB: A5 14        	lda	<L25+cnt_0
  2670 08:01AD: D0 03        	bne	L28
  2671 08:01AF: 82 1D 00     	brl	L10001
  2672                        L28:
  2673                        	.line	685
  2674                        ;		do
  2675                        	.line	686
  2676                        L10004:
  2677                        ;		{
  2678                        	.line	687
  2679                        ;			*d++ = *s++;
  2680                        	.line	688
  2681 08:01B2: E2 20        	sep	#$20
  2682                        	longa	off
  2683 08:01B4: A7 05        	lda	[<L26+s_1]
  2684 08:01B6: 87 01        	sta	[<L26+d_1]
  2685 08:01B8: C2 20        	rep	#$20
  2686                        	longa	on
  2687 08:01BA: E6 05        	inc	<L26+s_1
  2688 08:01BC: D0 02        	bne	L29
  2689 08:01BE: E6 07        	inc	<L26+s_1+2
  2690                        L29:
  2691 08:01C0: E6 01        	inc	<L26+d_1
  2692 08:01C2: D0 02        	bne	L30
  2693 08:01C4: E6 03        	inc	<L26+d_1+2
  2694                        L30:
  2695                        ;		} while (--cnt);
  2696                        	.line	689
  2697                        L10002:
  2698 08:01C6: C6 14        	dec	<L25+cnt_0
  2699 08:01C8: A5 14        	lda	<L25+cnt_0
  2700 08:01CA: F0 03        	beq	L31
  2701 08:01CC: 82 E3 FF     	brl	L10004
  2702                        L31:
  2703                        L10003:
  2704                        ;	}
  2705                        	.line	690
  2706                        ;}
  2707                        L10001:
  2708                        	.line	691
  2709                        L32:
  2710 08:01CF: A5 0A        	lda	<L25+2
  2711 08:01D1: 85 14        	sta	<L25+2+10
  2712 08:01D3: A5 09        	lda	<L25+1
  Mon Aug  9 2021 16:52                                                Page 60


  2713 08:01D5: 85 13        	sta	<L25+1+10
  2714 08:01D7: 2B           	pld
  2715 08:01D8: 3B           	tsc
  2716 08:01D9: 18           	clc
  2717 08:01DA: 69 12 00     	adc	#L25+10
  2718 08:01DD: 1B           	tcs
  2719 08:01DE: 6B           	rtl
  2720                        	.endblock	691
  2721             00000008   L25	equ	8
  2722             00000001   L26	equ	1
  2723 08:01DF:              	ends
  2724                        	efunc
  2725                        	.endfunc	691,1,8
  2726                        	.line	691
  2727                        ;
  2728                        ;/* Fill memory block */
  2729                        ;static void mem_set(void* dst, int val, UINT cnt)
  2730                        ;{
  2731                        	.line	694
  2732                        	.line	695
  2733                        	FFDOS
  2734                        	func
  2735                        	.function	695
  2736                        ~~mem_set:
  2737                        	longa	on
  2738                        	longi	on
  2739 08:01DF: 3B           	tsc
  2740 08:01E0: 38           	sec
  2741 08:01E1: E9 04 00     	sbc	#L33
  2742 08:01E4: 1B           	tcs
  2743 08:01E5: 0B           	phd
  2744 08:01E6: 5B           	tcd
  2745             00000004   dst_0	set	4
  2746             00000008   val_0	set	8
  2747             0000000A   cnt_0	set	10
  2748                        	.block	695
  2749                        ;	BYTE *d = (BYTE*) dst;
  2750                        ;
  2751                        ;	do
  2752             00000000   d_1	set	0
  2753                        	.sym	d,0,142,1,32
  2754                        	.sym	dst,4,129,6,32
  2755                        	.sym	val,8,5,6,16
  2756                        	.sym	cnt,10,16,6,16
  2757 08:01E7: A5 08        	lda	<L33+dst_0
  2758 08:01E9: 85 01        	sta	<L34+d_1
  2759 08:01EB: A5 0A        	lda	<L33+dst_0+2
  2760 08:01ED: 85 03        	sta	<L34+d_1+2
  2761                        	.line	698
  2762                        L10007:
  2763                        ;	{
  2764                        	.line	699
  2765                        ;		*d++ = (BYTE) val;
  2766                        	.line	700
  2767 08:01EF: E2 20        	sep	#$20
  2768                        	longa	off
  2769 08:01F1: A5 0C        	lda	<L33+val_0
  2770 08:01F3: 87 01        	sta	[<L34+d_1]
  Mon Aug  9 2021 16:52                                                Page 61


  2771 08:01F5: C2 20        	rep	#$20
  2772                        	longa	on
  2773 08:01F7: E6 01        	inc	<L34+d_1
  2774 08:01F9: D0 02        	bne	L36
  2775 08:01FB: E6 03        	inc	<L34+d_1+2
  2776                        L36:
  2777                        ;	} while (--cnt);
  2778                        	.line	701
  2779                        L10005:
  2780 08:01FD: C6 0E        	dec	<L33+cnt_0
  2781 08:01FF: A5 0E        	lda	<L33+cnt_0
  2782 08:0201: F0 03        	beq	L37
  2783 08:0203: 82 E9 FF     	brl	L10007
  2784                        L37:
  2785                        L10006:
  2786                        ;}
  2787                        	.line	702
  2788                        L38:
  2789 08:0206: A5 06        	lda	<L33+2
  2790 08:0208: 85 0E        	sta	<L33+2+8
  2791 08:020A: A5 05        	lda	<L33+1
  2792 08:020C: 85 0D        	sta	<L33+1+8
  2793 08:020E: 2B           	pld
  2794 08:020F: 3B           	tsc
  2795 08:0210: 18           	clc
  2796 08:0211: 69 0C 00     	adc	#L33+8
  2797 08:0214: 1B           	tcs
  2798 08:0215: 6B           	rtl
  2799                        	.endblock	702
  2800             00000004   L33	equ	4
  2801             00000001   L34	equ	1
  2802 08:0216:              	ends
  2803                        	efunc
  2804                        	.endfunc	702,1,4
  2805                        	.line	702
  2806                        ;
  2807                        ;/* Compare memory block */
  2808                        ;static int mem_cmp(const void* dst, const void* s
                    rc, UINT cnt) /* ZR:same, NZ:different */
  2809                        ;{
  2810                        	.line	705
  2811                        	.line	706
  2812                        	FFDOS
  2813                        	func
  2814                        	.function	706
  2815                        ~~mem_cmp:
  2816                        	longa	on
  2817                        	longi	on
  2818 08:0216: 3B           	tsc
  2819 08:0217: 38           	sec
  2820 08:0218: E9 12 00     	sbc	#L39
  2821 08:021B: 1B           	tcs
  2822 08:021C: 0B           	phd
  2823 08:021D: 5B           	tcd
  2824             00000004   dst_0	set	4
  2825             00000008   src_0	set	8
  2826             0000000C   cnt_0	set	12
  2827                        	.block	706
  Mon Aug  9 2021 16:52                                                Page 62


  2828                        ;	const BYTE *d = (const BYTE *) dst, *s = (const 
                    BYTE *) src;
  2829                        ;	int r = 0;
  2830                        ;
  2831                        ;	do
  2832             00000000   d_1	set	0
  2833             00000004   s_1	set	4
  2834             00000008   r_1	set	8
  2835                        	.sym	d,0,142,1,32
  2836                        	.sym	s,4,142,1,32
  2837                        	.sym	r,8,5,1,16
  2838                        	.sym	dst,4,129,6,32
  2839                        	.sym	src,8,129,6,32
  2840                        	.sym	cnt,12,16,6,16
  2841 08:021E: A5 16        	lda	<L39+dst_0
  2842 08:0220: 85 09        	sta	<L40+d_1
  2843 08:0222: A5 18        	lda	<L39+dst_0+2
  2844 08:0224: 85 0B        	sta	<L40+d_1+2
  2845 08:0226: A5 1A        	lda	<L39+src_0
  2846 08:0228: 85 0D        	sta	<L40+s_1
  2847 08:022A: A5 1C        	lda	<L39+src_0+2
  2848 08:022C: 85 0F        	sta	<L40+s_1+2
  2849 08:022E: 64 11        	stz	<L40+r_1
  2850                        	.line	710
  2851                        L10010:
  2852                        ;	{
  2853                        	.line	711
  2854                        ;		r = *d++ - *s++;
  2855                        	.line	712
  2856 08:0230: A7 0D        	lda	[<L40+s_1]
  2857 08:0232: 29 FF 00     	and	#$ff
  2858 08:0235: 85 01        	sta	<R0
  2859 08:0237: A7 09        	lda	[<L40+d_1]
  2860 08:0239: 29 FF 00     	and	#$ff
  2861 08:023C: 85 05        	sta	<R1
  2862 08:023E: 38           	sec
  2863 08:023F: A5 05        	lda	<R1
  2864 08:0241: E5 01        	sbc	<R0
  2865 08:0243: 85 11        	sta	<L40+r_1
  2866 08:0245: E6 0D        	inc	<L40+s_1
  2867 08:0247: D0 02        	bne	L42
  2868 08:0249: E6 0F        	inc	<L40+s_1+2
  2869                        L42:
  2870 08:024B: E6 09        	inc	<L40+d_1
  2871 08:024D: D0 02        	bne	L43
  2872 08:024F: E6 0B        	inc	<L40+d_1+2
  2873                        L43:
  2874                        ;	} while (--cnt && r == 0);
  2875                        	.line	713
  2876                        L10008:
  2877 08:0251: C6 1E        	dec	<L39+cnt_0
  2878 08:0253: A5 1E        	lda	<L39+cnt_0
  2879 08:0255: D0 03        	bne	L45
  2880 08:0257: 82 07 00     	brl	L44
  2881                        L45:
  2882 08:025A: A5 11        	lda	<L40+r_1
  2883 08:025C: D0 03        	bne	L46
  2884 08:025E: 82 CF FF     	brl	L10010
  Mon Aug  9 2021 16:52                                                Page 63


  2885                        L46:
  2886                        L44:
  2887                        L10009:
  2888                        ;
  2889                        ;	return r;
  2890                        	.line	715
  2891 08:0261: A5 11        	lda	<L40+r_1
  2892                        L47:
  2893 08:0263: A8           	tay
  2894 08:0264: A5 14        	lda	<L39+2
  2895 08:0266: 85 1E        	sta	<L39+2+10
  2896 08:0268: A5 13        	lda	<L39+1
  2897 08:026A: 85 1D        	sta	<L39+1+10
  2898 08:026C: 2B           	pld
  2899 08:026D: 3B           	tsc
  2900 08:026E: 18           	clc
  2901 08:026F: 69 1C 00     	adc	#L39+10
  2902 08:0272: 1B           	tcs
  2903 08:0273: 98           	tya
  2904 08:0274: 6B           	rtl
  2905                        ;}
  2906                        	.line	716
  2907                        	.endblock	716
  2908             00000012   L39	equ	18
  2909             00000009   L40	equ	9
  2910 08:0275:              	ends
  2911                        	efunc
  2912                        	.endfunc	716,9,18
  2913                        	.line	716
  2914                        ;
  2915                        ;/* Check if chr is contained in the string */
  2916                        ;static int chk_chr(const char* str, int chr) /* N
                    Z:contained, ZR:not contained */
  2917                        ;{
  2918                        	.line	719
  2919                        	.line	720
  2920                        	FFDOS
  2921                        	func
  2922                        	.function	720
  2923                        ~~chk_chr:
  2924                        	longa	on
  2925                        	longi	on
  2926 08:0275: 3B           	tsc
  2927 08:0276: 38           	sec
  2928 08:0277: E9 04 00     	sbc	#L48
  2929 08:027A: 1B           	tcs
  2930 08:027B: 0B           	phd
  2931 08:027C: 5B           	tcd
  2932             00000004   str_0	set	4
  2933             00000008   chr_0	set	8
  2934                        	.block	720
  2935                        ;	while (*str && *str != chr)
  2936                        	.sym	str,4,142,6,32
  2937                        	.sym	chr,8,5,6,16
  2938                        	.line	721
  2939                        L10011:
  2940 08:027D: A7 08        	lda	[<L48+str_0]
  2941 08:027F: 29 FF 00     	and	#$ff
  Mon Aug  9 2021 16:52                                                Page 64


  2942 08:0282: D0 03        	bne	L51
  2943 08:0284: 82 19 00     	brl	L10012
  2944                        L51:
  2945 08:0287: A7 08        	lda	[<L48+str_0]
  2946 08:0289: 29 FF 00     	and	#$ff
  2947 08:028C: 85 01        	sta	<R0
  2948 08:028E: A5 01        	lda	<R0
  2949 08:0290: C5 0C        	cmp	<L48+chr_0
  2950 08:0292: D0 03        	bne	L52
  2951 08:0294: 82 09 00     	brl	L10012
  2952                        L52:
  2953                        ;		str++;
  2954                        	.line	722
  2955 08:0297: E6 08        	inc	<L48+str_0
  2956 08:0299: D0 02        	bne	L53
  2957 08:029B: E6 0A        	inc	<L48+str_0+2
  2958                        L53:
  2959 08:029D: 82 DD FF     	brl	L10011
  2960                        L10012:
  2961                        ;	return *str;
  2962                        	.line	723
  2963 08:02A0: A7 08        	lda	[<L48+str_0]
  2964 08:02A2: 29 FF 00     	and	#$ff
  2965                        L54:
  2966 08:02A5: A8           	tay
  2967 08:02A6: A5 06        	lda	<L48+2
  2968 08:02A8: 85 0C        	sta	<L48+2+6
  2969 08:02AA: A5 05        	lda	<L48+1
  2970 08:02AC: 85 0B        	sta	<L48+1+6
  2971 08:02AE: 2B           	pld
  2972 08:02AF: 3B           	tsc
  2973 08:02B0: 18           	clc
  2974 08:02B1: 69 0A 00     	adc	#L48+6
  2975 08:02B4: 1B           	tcs
  2976 08:02B5: 98           	tya
  2977 08:02B6: 6B           	rtl
  2978                        ;}
  2979                        	.line	724
  2980                        	.endblock	724
  2981             00000004   L48	equ	4
  2982             00000005   L49	equ	5
  2983 08:02B7:              	ends
  2984                        	efunc
  2985                        	.endfunc	724,5,4
  2986                        	.line	724
  2987                        ;
  2988                        ;/* Test if the byte is DBC 1st byte */
  2989                        ;static int dbc_1st(BYTE c)
  2990                        ;{
  2991                        	.line	727
  2992                        	.line	728
  2993                        	FFDOS
  2994                        	func
  2995                        	.function	728
  2996                        ~~dbc_1st:
  2997                        	longa	on
  2998                        	longi	on
  2999 08:02B7: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 65


  3000 08:02B8: 38           	sec
  3001 08:02B9: E9 00 00     	sbc	#L55
  3002 08:02BC: 1B           	tcs
  3003 08:02BD: 0B           	phd
  3004 08:02BE: 5B           	tcd
  3005             00000004   c_0	set	4
  3006                        	.block	728
  3007                        ;#if FF_CODE_PAGE == 0		/* Variable code
                     page */
  3008                        ;	if (DbcTbl && c >= DbcTbl[0])
  3009                        ;	{
  3010                        ;		if (c <= DbcTbl[1]) return 1; /* 1st byt
                    e range 1 */
  3011                        ;		if (c >= DbcTbl[2] && c <= DbcTbl[3]) re
                    turn 1; /* 1st byte range 2 */
  3012                        ;	}
  3013                        ;#elif FF_CODE_PAGE >= 900	/* DBCS fixed co
                    de page */
  3014                        ;	if (c >= DbcTbl[0])
  3015                        ;	{
  3016                        ;		if (c <= DbcTbl[1]) return 1;
  3017                        ;		if (c >= DbcTbl[2] && c <= DbcTbl[3]) re
                    turn 1;
  3018                        ;	}
  3019                        ;#else						
                    /* SBCS fixed code page */
  3020                        ;	if (c != 0)
  3021                        	.sym	c,4,14,6,8
  3022                        	.line	742
  3023                        ;		return 0; /* Always false */
  3024 08:02BF: A5 04        	lda	<L55+c_0
  3025 08:02C1: 29 FF 00     	and	#$ff
  3026 08:02C4: D0 03        	bne	L58
  3027 08:02C6: 82 15 00     	brl	L10013
  3028                        L58:
  3029                        	.line	743
  3030 08:02C9: A9 00 00     	lda	#$0
  3031                        L59:
  3032 08:02CC: A8           	tay
  3033 08:02CD: A5 02        	lda	<L55+2
  3034 08:02CF: 85 04        	sta	<L55+2+2
  3035 08:02D1: A5 01        	lda	<L55+1
  3036 08:02D3: 85 03        	sta	<L55+1+2
  3037 08:02D5: 2B           	pld
  3038 08:02D6: 3B           	tsc
  3039 08:02D7: 18           	clc
  3040 08:02D8: 69 02 00     	adc	#L55+2
  3041 08:02DB: 1B           	tcs
  3042 08:02DC: 98           	tya
  3043 08:02DD: 6B           	rtl
  3044                        ;#endif
  3045                        ;	return 0;
  3046                        L10013:
  3047                        	.line	745
  3048 08:02DE: A9 00 00     	lda	#$0
  3049 08:02E1: 82 E8 FF     	brl	L59
  3050                        ;}
  3051                        	.line	746
  Mon Aug  9 2021 16:52                                                Page 66


  3052                        	.endblock	746
  3053             00000000   L55	equ	0
  3054             00000001   L56	equ	1
  3055 08:02E4:              	ends
  3056                        	efunc
  3057                        	.endfunc	746,1,0
  3058                        	.line	746
  3059                        ;
  3060                        ;/* Test if the byte is DBC 2nd byte */
  3061                        ;static int dbc_2nd(BYTE c)
  3062                        ;{
  3063                        	.line	749
  3064                        	.line	750
  3065                        	FFDOS
  3066                        	func
  3067                        	.function	750
  3068                        ~~dbc_2nd:
  3069                        	longa	on
  3070                        	longi	on
  3071 08:02E4: 3B           	tsc
  3072 08:02E5: 38           	sec
  3073 08:02E6: E9 00 00     	sbc	#L60
  3074 08:02E9: 1B           	tcs
  3075 08:02EA: 0B           	phd
  3076 08:02EB: 5B           	tcd
  3077             00000004   c_0	set	4
  3078                        	.block	750
  3079                        ;#if FF_CODE_PAGE == 0		/* Variable code
                     page */
  3080                        ;	if (DbcTbl && c >= DbcTbl[4])
  3081                        ;	{
  3082                        ;		if (c <= DbcTbl[5]) return 1; /* 2nd byt
                    e range 1 */
  3083                        ;		if (c >= DbcTbl[6] && c <= DbcTbl[7]) re
                    turn 1; /* 2nd byte range 2 */
  3084                        ;		if (c >= DbcTbl[8] && c <= DbcTbl[9]) re
                    turn 1; /* 2nd byte range 3 */
  3085                        ;	}
  3086                        ;#elif FF_CODE_PAGE >= 900	/* DBCS fixed co
                    de page */
  3087                        ;	if (c >= DbcTbl[4])
  3088                        ;	{
  3089                        ;		if (c <= DbcTbl[5]) return 1;
  3090                        ;		if (c >= DbcTbl[6] && c <= DbcTbl[7]) re
                    turn 1;
  3091                        ;		if (c >= DbcTbl[8] && c <= DbcTbl[9]) re
                    turn 1;
  3092                        ;	}
  3093                        ;#else						
                    /* SBCS fixed code page */
  3094                        ;	if (c != 0)
  3095                        	.sym	c,4,14,6,8
  3096                        	.line	766
  3097                        ;		return 0; /* Always false */
  3098 08:02EC: A5 04        	lda	<L60+c_0
  3099 08:02EE: 29 FF 00     	and	#$ff
  3100 08:02F1: D0 03        	bne	L63
  3101 08:02F3: 82 15 00     	brl	L10014
  Mon Aug  9 2021 16:52                                                Page 67


  3102                        L63:
  3103                        	.line	767
  3104 08:02F6: A9 00 00     	lda	#$0
  3105                        L64:
  3106 08:02F9: A8           	tay
  3107 08:02FA: A5 02        	lda	<L60+2
  3108 08:02FC: 85 04        	sta	<L60+2+2
  3109 08:02FE: A5 01        	lda	<L60+1
  3110 08:0300: 85 03        	sta	<L60+1+2
  3111 08:0302: 2B           	pld
  3112 08:0303: 3B           	tsc
  3113 08:0304: 18           	clc
  3114 08:0305: 69 02 00     	adc	#L60+2
  3115 08:0308: 1B           	tcs
  3116 08:0309: 98           	tya
  3117 08:030A: 6B           	rtl
  3118                        ;#endif
  3119                        ;	return 0;
  3120                        L10014:
  3121                        	.line	769
  3122 08:030B: A9 00 00     	lda	#$0
  3123 08:030E: 82 E8 FF     	brl	L64
  3124                        ;}
  3125                        	.line	770
  3126                        	.endblock	770
  3127             00000000   L60	equ	0
  3128             00000001   L61	equ	1
  3129 08:0311:              	ends
  3130                        	efunc
  3131                        	.endfunc	770,1,0
  3132                        	.line	770
  3133                        ;
  3134                        ;#if FF_USE_LFN
  3135                        ;
  3136                        ;/* Get a Unicode code point from the TCHAR string
                     in defined API encodeing */
  3137                        ;static DWORD tchar2uni ( /* Returns a character i
                    n UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF o
                    n decode error) */
  3138                        ;		const TCHAR** str /* Pointer to pointer 
                    to TCHAR string in configured encoding */
  3139                        ;)
  3140                        ;{
  3141                        	.line	775
  3142                        	.line	778
  3143                        	FFDOS
  3144                        	func
  3145                        	.function	778
  3146                        ~~tchar2uni:
  3147                        	longa	on
  3148                        	longi	on
  3149 08:0311: 3B           	tsc
  3150 08:0312: 38           	sec
  3151 08:0313: E9 1B 00     	sbc	#L65
  3152 08:0316: 1B           	tcs
  3153 08:0317: 0B           	phd
  3154 08:0318: 5B           	tcd
  3155             00000004   str_0	set	4
  Mon Aug  9 2021 16:52                                                Page 68


  3156                        	.block	778
  3157                        ;	DWORD uc;
  3158                        ;	const TCHAR *p = *str;
  3159                        ;
  3160                        ;#if FF_LFN_UNICODE == 1		/* UTF-16 input 
                    */
  3161                        ;	WCHAR wc;
  3162                        ;
  3163                        ;	uc = *p++; /* Get a unit */
  3164                        ;	if (IsSurrogate(uc))
  3165                        ;	{ /* Surrogate? */
  3166                        ;		wc = *p++; /* Get low surrogate */
  3167                        ;		if (!IsSurrogateH(uc) || !IsSurrogateL(w
                    c)) return 0xFFFFFFFF; /* Wrong surrogate? */
  3168                        ;		uc = uc << 16 | wc;
  3169                        ;	}
  3170                        ;
  3171                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 input *
                    /
  3172                        ;	BYTE b;
  3173                        ;	int nf;
  3174                        ;
  3175                        ;	uc = (BYTE)*p++; /* Get an encoding unit */
  3176             00000000   uc_1	set	0
  3177             00000004   p_1	set	4
  3178             00000008   b_1	set	8
  3179             00000009   nf_1	set	9
  3180                        	.sym	uc,0,18,1,32
  3181                        	.sym	p,4,142,1,32
  3182                        	.sym	b,8,14,1,8
  3183                        	.sym	nf,9,5,1,16
  3184                        	.sym	str,4,1166,6,32
  3185 08:0319: A7 1F        	lda	[<L65+str_0]
  3186 08:031B: 85 15        	sta	<L66+p_1
  3187 08:031D: A0 02 00     	ldy	#$2
  3188 08:0320: B7 1F        	lda	[<L65+str_0],Y
  3189 08:0322: 85 17        	sta	<L66+p_1+2
  3190                        	.line	797
  3191 08:0324: A7 15        	lda	[<L66+p_1]
  3192 08:0326: 29 FF 00     	and	#$ff
  3193 08:0329: 85 11        	sta	<L66+uc_1
  3194 08:032B: 64 13        	stz	<L66+uc_1+2
  3195 08:032D: E6 15        	inc	<L66+p_1
  3196 08:032F: D0 02        	bne	L68
  3197 08:0331: E6 17        	inc	<L66+p_1+2
  3198                        L68:
  3199                        ;	if (uc & 0x80)
  3200                        	.line	798
  3201                        ;	{ /* Multiple byte code? */
  3202 08:0333: A5 11        	lda	<L66+uc_1
  3203 08:0335: 29 80 00     	and	#<$80
  3204 08:0338: D0 03        	bne	L69
  3205 08:033A: 82 99 01     	brl	L10015
  3206                        L69:
  3207                        	.line	799
  3208                        ;		if ((uc & 0xE0) == 0xC0)
  3209                        	.line	800
  3210                        ;		{ /* 2-byte sequence? */
  Mon Aug  9 2021 16:52                                                Page 69


  3211 08:033D: A5 11        	lda	<L66+uc_1
  3212 08:033F: 29 E0 00     	and	#<$e0
  3213 08:0342: 85 01        	sta	<R0
  3214 08:0344: 64 03        	stz	<R0+2
  3215 08:0346: A5 01        	lda	<R0
  3216 08:0348: C9 C0 00     	cmp	#<$c0
  3217 08:034B: D0 05        	bne	L70
  3218 08:034D: A5 03        	lda	<R0+2
  3219 08:034F: C9 00 00     	cmp	#^$c0
  3220                        L70:
  3221 08:0352: F0 03        	beq	L71
  3222 08:0354: 82 11 00     	brl	L10016
  3223                        L71:
  3224                        	.line	801
  3225                        ;			uc &= 0x1F; nf = 1;
  3226                        	.line	802
  3227 08:0357: A5 11        	lda	<L66+uc_1
  3228 08:0359: 29 1F 00     	and	#<$1f
  3229 08:035C: 85 11        	sta	<L66+uc_1
  3230 08:035E: 64 13        	stz	<L66+uc_1+2
  3231                        	.line	802
  3232 08:0360: A9 01 00     	lda	#$1
  3233 08:0363: 85 1A        	sta	<L66+nf_1
  3234                        ;		}
  3235                        	.line	803
  3236                        ;		else
  3237 08:0365: 82 6F 00     	brl	L10017
  3238                        L10016:
  3239                        ;		{
  3240                        	.line	805
  3241                        ;			if ((uc & 0xF0) == 0xE0)
  3242                        	.line	806
  3243                        ;			{ /* 3-byte sequence? */
  3244 08:0368: A5 11        	lda	<L66+uc_1
  3245 08:036A: 29 F0 00     	and	#<$f0
  3246 08:036D: 85 01        	sta	<R0
  3247 08:036F: 64 03        	stz	<R0+2
  3248 08:0371: A5 01        	lda	<R0
  3249 08:0373: C9 E0 00     	cmp	#<$e0
  3250 08:0376: D0 05        	bne	L72
  3251 08:0378: A5 03        	lda	<R0+2
  3252 08:037A: C9 00 00     	cmp	#^$e0
  3253                        L72:
  3254 08:037D: F0 03        	beq	L73
  3255 08:037F: 82 11 00     	brl	L10018
  3256                        L73:
  3257                        	.line	807
  3258                        ;				uc &= 0x0F; nf = 2;
  3259                        	.line	808
  3260 08:0382: A5 11        	lda	<L66+uc_1
  3261 08:0384: 29 0F 00     	and	#<$f
  3262 08:0387: 85 11        	sta	<L66+uc_1
  3263 08:0389: 64 13        	stz	<L66+uc_1+2
  3264                        	.line	808
  3265 08:038B: A9 02 00     	lda	#$2
  3266 08:038E: 85 1A        	sta	<L66+nf_1
  3267                        ;			}
  3268                        	.line	809
  Mon Aug  9 2021 16:52                                                Page 70


  3269                        ;			else
  3270 08:0390: 82 44 00     	brl	L10019
  3271                        L10018:
  3272                        ;			{
  3273                        	.line	811
  3274                        ;				if ((uc & 0xF8) == 0xF0)
  3275                        	.line	812
  3276                        ;				{ /* 4-byte sequence? */
  3277 08:0393: A5 11        	lda	<L66+uc_1
  3278 08:0395: 29 F8 00     	and	#<$f8
  3279 08:0398: 85 01        	sta	<R0
  3280 08:039A: 64 03        	stz	<R0+2
  3281 08:039C: A5 01        	lda	<R0
  3282 08:039E: C9 F0 00     	cmp	#<$f0
  3283 08:03A1: D0 05        	bne	L74
  3284 08:03A3: A5 03        	lda	<R0+2
  3285 08:03A5: C9 00 00     	cmp	#^$f0
  3286                        L74:
  3287 08:03A8: F0 03        	beq	L75
  3288 08:03AA: 82 11 00     	brl	L10020
  3289                        L75:
  3290                        	.line	813
  3291                        ;					uc &= 0x07; nf =
                     3;
  3292                        	.line	814
  3293 08:03AD: A5 11        	lda	<L66+uc_1
  3294 08:03AF: 29 07 00     	and	#<$7
  3295 08:03B2: 85 11        	sta	<L66+uc_1
  3296 08:03B4: 64 13        	stz	<L66+uc_1+2
  3297                        	.line	814
  3298 08:03B6: A9 03 00     	lda	#$3
  3299 08:03B9: 85 1A        	sta	<L66+nf_1
  3300                        ;				}
  3301                        	.line	815
  3302                        ;				else
  3303 08:03BB: 82 19 00     	brl	L10021
  3304                        L10020:
  3305                        ;				{ /* Wrong sequence */
  3306                        	.line	817
  3307                        ;					return 0xFFFFFFF
                    F;
  3308                        	.line	818
  3309 08:03BE: A9 FF FF     	lda	#$ffff
  3310 08:03C1: AA           	tax
  3311 08:03C2: A9 FF FF     	lda	#$ffff
  3312                        L76:
  3313 08:03C5: A8           	tay
  3314 08:03C6: A5 1D        	lda	<L65+2
  3315 08:03C8: 85 21        	sta	<L65+2+4
  3316 08:03CA: A5 1C        	lda	<L65+1
  3317 08:03CC: 85 20        	sta	<L65+1+4
  3318 08:03CE: 2B           	pld
  3319 08:03CF: 3B           	tsc
  3320 08:03D0: 18           	clc
  3321 08:03D1: 69 1F 00     	adc	#L65+4
  3322 08:03D4: 1B           	tcs
  3323 08:03D5: 98           	tya
  3324 08:03D6: 6B           	rtl
  Mon Aug  9 2021 16:52                                                Page 71


  3325                        ;				}
  3326                        	.line	819
  3327                        L10021:
  3328                        ;			}
  3329                        	.line	820
  3330                        L10019:
  3331                        ;		}
  3332                        	.line	821
  3333                        L10017:
  3334                        ;		do
  3335                        	.line	822
  3336                        L10024:
  3337                        ;		{ /* Get trailing bytes */
  3338                        	.line	823
  3339                        ;			b = (BYTE)*p++;
  3340                        	.line	824
  3341 08:03D7: E2 20        	sep	#$20
  3342                        	longa	off
  3343 08:03D9: A7 15        	lda	[<L66+p_1]
  3344 08:03DB: 85 19        	sta	<L66+b_1
  3345 08:03DD: C2 20        	rep	#$20
  3346                        	longa	on
  3347 08:03DF: E6 15        	inc	<L66+p_1
  3348 08:03E1: D0 02        	bne	L77
  3349 08:03E3: E6 17        	inc	<L66+p_1+2
  3350                        L77:
  3351                        ;			if ((b & 0xC0) != 0x80) return 0
                    xFFFFFFFF; /* Wrong sequence? */
  3352                        	.line	825
  3353 08:03E5: A5 19        	lda	<L66+b_1
  3354 08:03E7: 29 C0 00     	and	#<$c0
  3355 08:03EA: 85 01        	sta	<R0
  3356 08:03EC: A5 01        	lda	<R0
  3357 08:03EE: C9 80 00     	cmp	#<$80
  3358 08:03F1: D0 03        	bne	L78
  3359 08:03F3: 82 0A 00     	brl	L10025
  3360                        L78:
  3361                        	.line	825
  3362 08:03F6: A9 FF FF     	lda	#$ffff
  3363 08:03F9: AA           	tax
  3364 08:03FA: A9 FF FF     	lda	#$ffff
  3365 08:03FD: 82 C5 FF     	brl	L76
  3366                        ;			uc = uc << 6 | (b & 0x3F);
  3367                        L10025:
  3368                        	.line	826
  3369 08:0400: D4 13        	pei	<L66+uc_1+2
  3370 08:0402: D4 11        	pei	<L66+uc_1
  3371 08:0404: A9 06 00     	lda	#$6
  3372                        	xref	~~~lasl
  3373 08:0407: 22 xx xx xx  	jsl	~~~lasl
  3374 08:040B: 85 01        	sta	<R0
  3375 08:040D: 86 03        	stx	<R0+2
  3376 08:040F: A5 19        	lda	<L66+b_1
  3377 08:0411: 29 3F 00     	and	#<$3f
  3378 08:0414: 85 05        	sta	<R1
  3379 08:0416: A0 00 00     	ldy	#$0
  3380 08:0419: A5 05        	lda	<R1
  3381 08:041B: 10 01        	bpl	L79
  Mon Aug  9 2021 16:52                                                Page 72


  3382 08:041D: 88           	dey
  3383                        L79:
  3384 08:041E: 85 05        	sta	<R1
  3385 08:0420: 84 07        	sty	<R1+2
  3386 08:0422: A5 05        	lda	<R1
  3387 08:0424: 05 01        	ora	<R0
  3388 08:0426: 85 11        	sta	<L66+uc_1
  3389 08:0428: A5 07        	lda	<R1+2
  3390 08:042A: 05 03        	ora	<R0+2
  3391 08:042C: 85 13        	sta	<L66+uc_1+2
  3392                        ;		}while (--nf != 0);
  3393                        	.line	827
  3394                        L10022:
  3395 08:042E: C6 1A        	dec	<L66+nf_1
  3396 08:0430: A5 1A        	lda	<L66+nf_1
  3397 08:0432: F0 03        	beq	L80
  3398 08:0434: 82 A0 FF     	brl	L10024
  3399                        L80:
  3400                        L10023:
  3401                        ;		if (uc < 0x80 || IsSurrogate(uc) || uc >
                    = 0x110000) return 0xFFFFFFFF; /* Wrong code? */
  3402                        	.line	828
  3403 08:0437: A5 11        	lda	<L66+uc_1
  3404 08:0439: C9 80 00     	cmp	#<$80
  3405 08:043C: A5 13        	lda	<L66+uc_1+2
  3406 08:043E: E9 00 00     	sbc	#^$80
  3407 08:0441: B0 03        	bcs	L82
  3408 08:0443: 82 2D 00     	brl	L81
  3409                        L82:
  3410 08:0446: A5 11        	lda	<L66+uc_1
  3411 08:0448: C9 00 D8     	cmp	#<$d800
  3412 08:044B: A5 13        	lda	<L66+uc_1+2
  3413 08:044D: E9 00 00     	sbc	#^$d800
  3414 08:0450: B0 03        	bcs	L84
  3415 08:0452: 82 0F 00     	brl	L83
  3416                        L84:
  3417 08:0455: A9 FF DF     	lda	#$dfff
  3418 08:0458: C5 11        	cmp	<L66+uc_1
  3419 08:045A: A9 00 00     	lda	#$0
  3420 08:045D: E5 13        	sbc	<L66+uc_1+2
  3421 08:045F: 90 03        	bcc	L85
  3422 08:0461: 82 0F 00     	brl	L81
  3423                        L85:
  3424                        L83:
  3425 08:0464: A5 11        	lda	<L66+uc_1
  3426 08:0466: C9 00 00     	cmp	#<$110000
  3427 08:0469: A5 13        	lda	<L66+uc_1+2
  3428 08:046B: E9 11 00     	sbc	#^$110000
  3429 08:046E: B0 03        	bcs	L86
  3430 08:0470: 82 0A 00     	brl	L10026
  3431                        L86:
  3432                        L81:
  3433                        	.line	828
  3434 08:0473: A9 FF FF     	lda	#$ffff
  3435 08:0476: AA           	tax
  3436 08:0477: A9 FF FF     	lda	#$ffff
  3437 08:047A: 82 48 FF     	brl	L76
  3438                        ;		if (uc >= 0x010000) uc = 0xD800DC00 | ((
  Mon Aug  9 2021 16:52                                                Page 73


                    uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF); /* Make a su
                    rrogate pair if needed */
  3439                        L10026:
  3440                        	.line	829
  3441 08:047D: A5 11        	lda	<L66+uc_1
  3442 08:047F: C9 00 00     	cmp	#<$10000
  3443 08:0482: A5 13        	lda	<L66+uc_1+2
  3444 08:0484: E9 01 00     	sbc	#^$10000
  3445 08:0487: B0 03        	bcs	L87
  3446 08:0489: 82 4A 00     	brl	L10027
  3447                        L87:
  3448                        	.line	829
  3449 08:048C: 18           	clc
  3450 08:048D: A9 00 00     	lda	#$0
  3451 08:0490: 65 11        	adc	<L66+uc_1
  3452 08:0492: 85 05        	sta	<R1
  3453 08:0494: A9 FF FF     	lda	#$ffff
  3454 08:0497: 65 13        	adc	<L66+uc_1+2
  3455 08:0499: 85 07        	sta	<R1+2
  3456 08:049B: D4 07        	pei	<R1+2
  3457 08:049D: D4 05        	pei	<R1
  3458 08:049F: A9 06 00     	lda	#$6
  3459                        	xref	~~~lasl
  3460 08:04A2: 22 xx xx xx  	jsl	~~~lasl
  3461 08:04A6: 85 01        	sta	<R0
  3462 08:04A8: 86 03        	stx	<R0+2
  3463 08:04AA: 64 09        	stz	<R2
  3464 08:04AC: A5 03        	lda	<R0+2
  3465 08:04AE: 29 FF 03     	and	#^$3ff0000
  3466 08:04B1: 85 0B        	sta	<R2+2
  3467 08:04B3: A5 11        	lda	<L66+uc_1
  3468 08:04B5: 29 FF 03     	and	#<$3ff
  3469 08:04B8: 85 01        	sta	<R0
  3470 08:04BA: 64 03        	stz	<R0+2
  3471 08:04BC: A5 01        	lda	<R0
  3472 08:04BE: 05 09        	ora	<R2
  3473 08:04C0: 85 0D        	sta	<R3
  3474 08:04C2: A5 03        	lda	<R0+2
  3475 08:04C4: 05 0B        	ora	<R2+2
  3476 08:04C6: 85 0F        	sta	<R3+2
  3477 08:04C8: A5 0D        	lda	<R3
  3478 08:04CA: 09 00 DC     	ora	#<$d800dc00
  3479 08:04CD: 85 11        	sta	<L66+uc_1
  3480 08:04CF: A5 0F        	lda	<R3+2
  3481 08:04D1: 09 00 D8     	ora	#^$d800dc00
  3482 08:04D4: 85 13        	sta	<L66+uc_1+2
  3483                        ;	}
  3484                        L10027:
  3485                        	.line	830
  3486                        ;
  3487                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 input 
                    */
  3488                        ;	uc = (TCHAR)*p++; /* Get a unit */
  3489                        ;	if (uc >= 0x110000 || IsSurrogate(uc)) return 0x
                    FFFFFFFF; /* Wrong code? */
  3490                        ;	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x1
                    0000) << 6 & 0x3FF0000) | (uc & 0x3FF); /* Make a surrogate 
                    pair if needed */
  Mon Aug  9 2021 16:52                                                Page 74


  3491                        ;
  3492                        ;#else		/* ANSI/OEM input */
  3493                        ;	BYTE b;
  3494                        ;	WCHAR wc;
  3495                        ;
  3496                        ;	wc = (BYTE)*p++; /* Get a byte */
  3497                        ;	if (dbc_1st((BYTE)wc))
  3498                        ;	{ /* Is it a DBC 1st byte? */
  3499                        ;		b = (BYTE)*p++; /* Get 2nd byte */
  3500                        ;		if (!dbc_2nd(b)) return 0xFFFFFFFF; /* I
                    nvalid code? */
  3501                        ;		wc = (wc << 8) + b; /* Make a DBC */
  3502                        ;	}
  3503                        ;	if (wc != 0)
  3504                        ;	{
  3505                        ;		wc = ff_oem2uni(wc, CODEPAGE); /* ANSI/O
                    EM ==> Unicode */
  3506                        ;		if (wc == 0) return 0xFFFFFFFF; /* Inval
                    id code? */
  3507                        ;	}
  3508                        ;	uc = wc;
  3509                        ;
  3510                        ;#endif
  3511                        ;	*str = p; /* Next read pointer */
  3512                        L10015:
  3513                        	.line	856
  3514 08:04D6: A5 15        	lda	<L66+p_1
  3515 08:04D8: 87 1F        	sta	[<L65+str_0]
  3516 08:04DA: A5 17        	lda	<L66+p_1+2
  3517 08:04DC: A0 02 00     	ldy	#$2
  3518 08:04DF: 97 1F        	sta	[<L65+str_0],Y
  3519                        ;	return uc;
  3520                        	.line	857
  3521 08:04E1: A6 13        	ldx	<L66+uc_1+2
  3522 08:04E3: A5 11        	lda	<L66+uc_1
  3523 08:04E5: 82 DD FE     	brl	L76
  3524                        ;}
  3525                        	.line	858
  3526                        	.endblock	858
  3527             0000001B   L65	equ	27
  3528             00000011   L66	equ	17
  3529 08:04E8:              	ends
  3530                        	efunc
  3531                        	.endfunc	858,17,27
  3532                        	.line	858
  3533                        ;
  3534                        ;/* Output a TCHAR string in defined API encoding 
                    */
  3535                        ;static BYTE put_utf ( /* Returns number of encodi
                    ng units written (0:buffer overflow or wrong encoding) */
  3536                        ;		DWORD chr, /* UTF-16 encoded character (
                    Surrogate pair if >=0x10000) */
  3537                        ;		TCHAR* buf, /* Output buffer */
  3538                        ;		UINT szb /* Size of the buffer */
  3539                        ;)
  3540                        ;{
  3541                        	.line	861
  3542                        	.line	866
  Mon Aug  9 2021 16:52                                                Page 75


  3543                        	FFDOS
  3544                        	func
  3545                        	.function	866
  3546                        ~~put_utf:
  3547                        	longa	on
  3548                        	longi	on
  3549 08:04E8: 3B           	tsc
  3550 08:04E9: 38           	sec
  3551 08:04EA: E9 0C 00     	sbc	#L88
  3552 08:04ED: 1B           	tcs
  3553 08:04EE: 0B           	phd
  3554 08:04EF: 5B           	tcd
  3555             00000004   chr_0	set	4
  3556             00000008   buf_0	set	8
  3557             0000000C   szb_0	set	12
  3558                        	.block	866
  3559                        ;#if FF_LFN_UNICODE == 1	/* UTF-16 output */
  3560                        ;	WCHAR hs, wc;
  3561                        ;
  3562                        ;	hs = (WCHAR)(chr >> 16);
  3563                        ;	wc = (WCHAR)chr;
  3564                        ;	if (hs == 0)
  3565                        ;	{ /* Single encoding unit? */
  3566                        ;		if (szb < 1 || IsSurrogate(wc)) return 0
                    ; /* Buffer overflow or wrong code? */
  3567                        ;		*buf = wc;
  3568                        ;		return 1;
  3569                        ;	}
  3570                        ;	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogate
                    L(wc)) return 0; /* Buffer overflow or wrong surrogate? */
  3571                        ;	*buf++ = hs;
  3572                        ;	*buf++ = wc;
  3573                        ;	return 2;
  3574                        ;
  3575                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 output 
                    */
  3576                        ;	DWORD hc;
  3577                        ;
  3578                        ;	if (chr < 0x80)
  3579             00000000   hc_1	set	0
  3580                        	.sym	hc,0,18,1,32
  3581                        	.sym	chr,4,18,6,32
  3582                        	.sym	buf,8,142,6,32
  3583                        	.sym	szb,12,16,6,16
  3584                        	.line	886
  3585                        ;	{ /* Single byte code? */
  3586 08:04F0: A5 10        	lda	<L88+chr_0
  3587 08:04F2: C9 80 00     	cmp	#<$80
  3588 08:04F5: A5 12        	lda	<L88+chr_0+2
  3589 08:04F7: E9 00 00     	sbc	#^$80
  3590 08:04FA: 90 03        	bcc	L91
  3591 08:04FC: 82 2D 00     	brl	L10028
  3592                        L91:
  3593                        	.line	887
  3594                        ;		if (szb < 1) return 0; /* Buffer overflo
                    w? */
  3595                        	.line	888
  3596 08:04FF: A5 18        	lda	<L88+szb_0
  Mon Aug  9 2021 16:52                                                Page 76


  3597 08:0501: C9 01 00     	cmp	#<$1
  3598 08:0504: 90 03        	bcc	L92
  3599 08:0506: 82 15 00     	brl	L10029
  3600                        L92:
  3601                        	.line	888
  3602 08:0509: A9 00 00     	lda	#$0
  3603                        L93:
  3604 08:050C: A8           	tay
  3605 08:050D: A5 0E        	lda	<L88+2
  3606 08:050F: 85 18        	sta	<L88+2+10
  3607 08:0511: A5 0D        	lda	<L88+1
  3608 08:0513: 85 17        	sta	<L88+1+10
  3609 08:0515: 2B           	pld
  3610 08:0516: 3B           	tsc
  3611 08:0517: 18           	clc
  3612 08:0518: 69 16 00     	adc	#L88+10
  3613 08:051B: 1B           	tcs
  3614 08:051C: 98           	tya
  3615 08:051D: 6B           	rtl
  3616                        ;		*buf = (TCHAR)chr;
  3617                        L10029:
  3618                        	.line	889
  3619 08:051E: E2 20        	sep	#$20
  3620                        	longa	off
  3621 08:0520: A5 10        	lda	<L88+chr_0
  3622 08:0522: 87 14        	sta	[<L88+buf_0]
  3623 08:0524: C2 20        	rep	#$20
  3624                        	longa	on
  3625                        ;		return 1;
  3626                        	.line	890
  3627 08:0526: A9 01 00     	lda	#$1
  3628 08:0529: 82 E0 FF     	brl	L93
  3629                        ;	}
  3630                        	.line	891
  3631                        ;	if (chr < 0x800)
  3632                        L10028:
  3633                        	.line	892
  3634                        ;	{ /* 2-byte sequence? */
  3635 08:052C: A5 10        	lda	<L88+chr_0
  3636 08:052E: C9 00 08     	cmp	#<$800
  3637 08:0531: A5 12        	lda	<L88+chr_0+2
  3638 08:0533: E9 00 00     	sbc	#^$800
  3639 08:0536: 90 03        	bcc	L94
  3640 08:0538: 82 69 00     	brl	L10030
  3641                        L94:
  3642                        	.line	893
  3643                        ;		if (szb < 2) return 0; /* Buffer overflo
                    w? */
  3644                        	.line	894
  3645 08:053B: A5 18        	lda	<L88+szb_0
  3646 08:053D: C9 02 00     	cmp	#<$2
  3647 08:0540: 90 03        	bcc	L95
  3648 08:0542: 82 06 00     	brl	L10031
  3649                        L95:
  3650                        	.line	894
  3651 08:0545: A9 00 00     	lda	#$0
  3652 08:0548: 82 C1 FF     	brl	L93
  3653                        ;		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F
  Mon Aug  9 2021 16:52                                                Page 77


                    ));
  3654                        L10031:
  3655                        	.line	895
  3656 08:054B: D4 12        	pei	<L88+chr_0+2
  3657 08:054D: D4 10        	pei	<L88+chr_0
  3658 08:054F: A9 06 00     	lda	#$6
  3659                        	xref	~~~llsr
  3660 08:0552: 22 xx xx xx  	jsl	~~~llsr
  3661 08:0556: 85 01        	sta	<R0
  3662 08:0558: 86 03        	stx	<R0+2
  3663 08:055A: A5 01        	lda	<R0
  3664 08:055C: 29 1F 00     	and	#<$1f
  3665 08:055F: 85 05        	sta	<R1
  3666 08:0561: 64 07        	stz	<R1+2
  3667 08:0563: A5 05        	lda	<R1
  3668 08:0565: 09 C0 00     	ora	#<$c0
  3669 08:0568: 85 01        	sta	<R0
  3670 08:056A: A5 07        	lda	<R1+2
  3671 08:056C: 85 03        	sta	<R0+2
  3672 08:056E: E2 20        	sep	#$20
  3673                        	longa	off
  3674 08:0570: A5 01        	lda	<R0
  3675 08:0572: 87 14        	sta	[<L88+buf_0]
  3676 08:0574: C2 20        	rep	#$20
  3677                        	longa	on
  3678 08:0576: E6 14        	inc	<L88+buf_0
  3679 08:0578: D0 02        	bne	L96
  3680 08:057A: E6 16        	inc	<L88+buf_0+2
  3681                        L96:
  3682                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F
                    ));
  3683                        	.line	896
  3684 08:057C: A5 10        	lda	<L88+chr_0
  3685 08:057E: 29 3F 00     	and	#<$3f
  3686 08:0581: 85 01        	sta	<R0
  3687 08:0583: 64 03        	stz	<R0+2
  3688 08:0585: A5 01        	lda	<R0
  3689 08:0587: 09 80 00     	ora	#<$80
  3690 08:058A: 85 05        	sta	<R1
  3691 08:058C: A5 03        	lda	<R0+2
  3692 08:058E: 85 07        	sta	<R1+2
  3693 08:0590: E2 20        	sep	#$20
  3694                        	longa	off
  3695 08:0592: A5 05        	lda	<R1
  3696 08:0594: 87 14        	sta	[<L88+buf_0]
  3697 08:0596: C2 20        	rep	#$20
  3698                        	longa	on
  3699 08:0598: E6 14        	inc	<L88+buf_0
  3700 08:059A: D0 02        	bne	L97
  3701 08:059C: E6 16        	inc	<L88+buf_0+2
  3702                        L97:
  3703                        ;		return 2;
  3704                        	.line	897
  3705 08:059E: A9 02 00     	lda	#$2
  3706 08:05A1: 82 68 FF     	brl	L93
  3707                        ;	}
  3708                        	.line	898
  3709                        ;	if (chr < 0x10000)
  Mon Aug  9 2021 16:52                                                Page 78


  3710                        L10030:
  3711                        	.line	899
  3712                        ;	{ /* 3-byte sequence? */
  3713 08:05A4: A5 10        	lda	<L88+chr_0
  3714 08:05A6: C9 00 00     	cmp	#<$10000
  3715 08:05A9: A5 12        	lda	<L88+chr_0+2
  3716 08:05AB: E9 01 00     	sbc	#^$10000
  3717 08:05AE: 90 03        	bcc	L98
  3718 08:05B0: 82 B8 00     	brl	L10032
  3719                        L98:
  3720                        	.line	900
  3721                        ;		if (szb < 3 || IsSurrogate(chr)) return 
                    0; /* Buffer overflow or wrong code? */
  3722                        	.line	901
  3723 08:05B3: A5 18        	lda	<L88+szb_0
  3724 08:05B5: C9 03 00     	cmp	#<$3
  3725 08:05B8: B0 03        	bcs	L100
  3726 08:05BA: 82 1E 00     	brl	L99
  3727                        L100:
  3728 08:05BD: A5 10        	lda	<L88+chr_0
  3729 08:05BF: C9 00 D8     	cmp	#<$d800
  3730 08:05C2: A5 12        	lda	<L88+chr_0+2
  3731 08:05C4: E9 00 00     	sbc	#^$d800
  3732 08:05C7: B0 03        	bcs	L101
  3733 08:05C9: 82 15 00     	brl	L10033
  3734                        L101:
  3735 08:05CC: A9 FF DF     	lda	#$dfff
  3736 08:05CF: C5 10        	cmp	<L88+chr_0
  3737 08:05D1: A9 00 00     	lda	#$0
  3738 08:05D4: E5 12        	sbc	<L88+chr_0+2
  3739 08:05D6: B0 03        	bcs	L102
  3740 08:05D8: 82 06 00     	brl	L10033
  3741                        L102:
  3742                        L99:
  3743                        	.line	901
  3744 08:05DB: A9 00 00     	lda	#$0
  3745 08:05DE: 82 2B FF     	brl	L93
  3746                        ;		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0
                    F));
  3747                        L10033:
  3748                        	.line	902
  3749 08:05E1: D4 12        	pei	<L88+chr_0+2
  3750 08:05E3: D4 10        	pei	<L88+chr_0
  3751 08:05E5: A9 0C 00     	lda	#$c
  3752                        	xref	~~~llsr
  3753 08:05E8: 22 xx xx xx  	jsl	~~~llsr
  3754 08:05EC: 85 01        	sta	<R0
  3755 08:05EE: 86 03        	stx	<R0+2
  3756 08:05F0: A5 01        	lda	<R0
  3757 08:05F2: 29 0F 00     	and	#<$f
  3758 08:05F5: 85 05        	sta	<R1
  3759 08:05F7: 64 07        	stz	<R1+2
  3760 08:05F9: A5 05        	lda	<R1
  3761 08:05FB: 09 E0 00     	ora	#<$e0
  3762 08:05FE: 85 01        	sta	<R0
  3763 08:0600: A5 07        	lda	<R1+2
  3764 08:0602: 85 03        	sta	<R0+2
  3765 08:0604: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 79


  3766                        	longa	off
  3767 08:0606: A5 01        	lda	<R0
  3768 08:0608: 87 14        	sta	[<L88+buf_0]
  3769 08:060A: C2 20        	rep	#$20
  3770                        	longa	on
  3771 08:060C: E6 14        	inc	<L88+buf_0
  3772 08:060E: D0 02        	bne	L103
  3773 08:0610: E6 16        	inc	<L88+buf_0+2
  3774                        L103:
  3775                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F
                    ));
  3776                        	.line	903
  3777 08:0612: D4 12        	pei	<L88+chr_0+2
  3778 08:0614: D4 10        	pei	<L88+chr_0
  3779 08:0616: A9 06 00     	lda	#$6
  3780                        	xref	~~~llsr
  3781 08:0619: 22 xx xx xx  	jsl	~~~llsr
  3782 08:061D: 85 01        	sta	<R0
  3783 08:061F: 86 03        	stx	<R0+2
  3784 08:0621: A5 01        	lda	<R0
  3785 08:0623: 29 3F 00     	and	#<$3f
  3786 08:0626: 85 05        	sta	<R1
  3787 08:0628: 64 07        	stz	<R1+2
  3788 08:062A: A5 05        	lda	<R1
  3789 08:062C: 09 80 00     	ora	#<$80
  3790 08:062F: 85 01        	sta	<R0
  3791 08:0631: A5 07        	lda	<R1+2
  3792 08:0633: 85 03        	sta	<R0+2
  3793 08:0635: E2 20        	sep	#$20
  3794                        	longa	off
  3795 08:0637: A5 01        	lda	<R0
  3796 08:0639: 87 14        	sta	[<L88+buf_0]
  3797 08:063B: C2 20        	rep	#$20
  3798                        	longa	on
  3799 08:063D: E6 14        	inc	<L88+buf_0
  3800 08:063F: D0 02        	bne	L104
  3801 08:0641: E6 16        	inc	<L88+buf_0+2
  3802                        L104:
  3803                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F
                    ));
  3804                        	.line	904
  3805 08:0643: A5 10        	lda	<L88+chr_0
  3806 08:0645: 29 3F 00     	and	#<$3f
  3807 08:0648: 85 01        	sta	<R0
  3808 08:064A: 64 03        	stz	<R0+2
  3809 08:064C: A5 01        	lda	<R0
  3810 08:064E: 09 80 00     	ora	#<$80
  3811 08:0651: 85 05        	sta	<R1
  3812 08:0653: A5 03        	lda	<R0+2
  3813 08:0655: 85 07        	sta	<R1+2
  3814 08:0657: E2 20        	sep	#$20
  3815                        	longa	off
  3816 08:0659: A5 05        	lda	<R1
  3817 08:065B: 87 14        	sta	[<L88+buf_0]
  3818 08:065D: C2 20        	rep	#$20
  3819                        	longa	on
  3820 08:065F: E6 14        	inc	<L88+buf_0
  3821 08:0661: D0 02        	bne	L105
  Mon Aug  9 2021 16:52                                                Page 80


  3822 08:0663: E6 16        	inc	<L88+buf_0+2
  3823                        L105:
  3824                        ;		return 3;
  3825                        	.line	905
  3826 08:0665: A9 03 00     	lda	#$3
  3827 08:0668: 82 A1 FE     	brl	L93
  3828                        ;	}
  3829                        	.line	906
  3830                        ;	/* 4-byte sequence */
  3831                        ;	if (szb < 4) return 0; /* Buffer overflow? */
  3832                        L10032:
  3833                        	.line	908
  3834 08:066B: A5 18        	lda	<L88+szb_0
  3835 08:066D: C9 04 00     	cmp	#<$4
  3836 08:0670: 90 03        	bcc	L106
  3837 08:0672: 82 06 00     	brl	L10034
  3838                        L106:
  3839                        	.line	908
  3840 08:0675: A9 00 00     	lda	#$0
  3841 08:0678: 82 91 FE     	brl	L93
  3842                        ;	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6; /* 
                    Get high 10 bits */
  3843                        L10034:
  3844                        	.line	909
  3845 08:067B: 64 01        	stz	<R0
  3846 08:067D: A5 12        	lda	<L88+chr_0+2
  3847 08:067F: 85 03        	sta	<R0+2
  3848 08:0681: 18           	clc
  3849 08:0682: A9 00 00     	lda	#$0
  3850 08:0685: 65 01        	adc	<R0
  3851 08:0687: 85 05        	sta	<R1
  3852 08:0689: A9 00 28     	lda	#$2800
  3853 08:068C: 65 03        	adc	<R0+2
  3854 08:068E: 85 07        	sta	<R1+2
  3855 08:0690: D4 07        	pei	<R1+2
  3856 08:0692: D4 05        	pei	<R1
  3857 08:0694: A9 06 00     	lda	#$6
  3858                        	xref	~~~llsr
  3859 08:0697: 22 xx xx xx  	jsl	~~~llsr
  3860 08:069B: 85 09        	sta	<L89+hc_1
  3861 08:069D: 86 0B        	stx	<L89+hc_1+2
  3862                        ;	chr = (chr & 0xFFFF) - 0xDC00; /* Get low 10 bit
                    s */
  3863                        	.line	910
  3864 08:069F: A5 10        	lda	<L88+chr_0
  3865 08:06A1: 85 01        	sta	<R0
  3866 08:06A3: 64 03        	stz	<R0+2
  3867 08:06A5: 18           	clc
  3868 08:06A6: A9 00 24     	lda	#$2400
  3869 08:06A9: 65 01        	adc	<R0
  3870 08:06AB: 85 10        	sta	<L88+chr_0
  3871 08:06AD: A9 FF FF     	lda	#$ffff
  3872 08:06B0: 65 03        	adc	<R0+2
  3873 08:06B2: 85 12        	sta	<L88+chr_0+2
  3874                        ;	if (hc >= 0x100000 || chr >= 0x400) return 0; /*
                     Wrong surrogate? */
  3875                        	.line	911
  3876 08:06B4: A5 09        	lda	<L89+hc_1
  Mon Aug  9 2021 16:52                                                Page 81


  3877 08:06B6: C9 00 00     	cmp	#<$100000
  3878 08:06B9: A5 0B        	lda	<L89+hc_1+2
  3879 08:06BB: E9 10 00     	sbc	#^$100000
  3880 08:06BE: 90 03        	bcc	L108
  3881 08:06C0: 82 0F 00     	brl	L107
  3882                        L108:
  3883 08:06C3: A5 10        	lda	<L88+chr_0
  3884 08:06C5: C9 00 04     	cmp	#<$400
  3885 08:06C8: A5 12        	lda	<L88+chr_0+2
  3886 08:06CA: E9 00 00     	sbc	#^$400
  3887 08:06CD: B0 03        	bcs	L109
  3888 08:06CF: 82 06 00     	brl	L10035
  3889                        L109:
  3890                        L107:
  3891                        	.line	911
  3892 08:06D2: A9 00 00     	lda	#$0
  3893 08:06D5: 82 34 FE     	brl	L93
  3894                        ;	chr = (hc | chr) + 0x10000;
  3895                        L10035:
  3896                        	.line	912
  3897 08:06D8: A5 10        	lda	<L88+chr_0
  3898 08:06DA: 05 09        	ora	<L89+hc_1
  3899 08:06DC: 85 01        	sta	<R0
  3900 08:06DE: A5 12        	lda	<L88+chr_0+2
  3901 08:06E0: 05 0B        	ora	<L89+hc_1+2
  3902 08:06E2: 85 03        	sta	<R0+2
  3903 08:06E4: 18           	clc
  3904 08:06E5: A9 00 00     	lda	#$0
  3905 08:06E8: 65 01        	adc	<R0
  3906 08:06EA: 85 10        	sta	<L88+chr_0
  3907 08:06EC: A9 01 00     	lda	#$1
  3908 08:06EF: 65 03        	adc	<R0+2
  3909 08:06F1: 85 12        	sta	<L88+chr_0+2
  3910                        ;	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
  3911                        	.line	913
  3912 08:06F3: D4 12        	pei	<L88+chr_0+2
  3913 08:06F5: D4 10        	pei	<L88+chr_0
  3914 08:06F7: A9 12 00     	lda	#$12
  3915                        	xref	~~~llsr
  3916 08:06FA: 22 xx xx xx  	jsl	~~~llsr
  3917 08:06FE: 85 01        	sta	<R0
  3918 08:0700: 86 03        	stx	<R0+2
  3919 08:0702: A5 01        	lda	<R0
  3920 08:0704: 29 07 00     	and	#<$7
  3921 08:0707: 85 05        	sta	<R1
  3922 08:0709: 64 07        	stz	<R1+2
  3923 08:070B: A5 05        	lda	<R1
  3924 08:070D: 09 F0 00     	ora	#<$f0
  3925 08:0710: 85 01        	sta	<R0
  3926 08:0712: A5 07        	lda	<R1+2
  3927 08:0714: 85 03        	sta	<R0+2
  3928 08:0716: E2 20        	sep	#$20
  3929                        	longa	off
  3930 08:0718: A5 01        	lda	<R0
  3931 08:071A: 87 14        	sta	[<L88+buf_0]
  3932 08:071C: C2 20        	rep	#$20
  3933                        	longa	on
  3934 08:071E: E6 14        	inc	<L88+buf_0
  Mon Aug  9 2021 16:52                                                Page 82


  3935 08:0720: D0 02        	bne	L110
  3936 08:0722: E6 16        	inc	<L88+buf_0+2
  3937                        L110:
  3938                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
  3939                        	.line	914
  3940 08:0724: D4 12        	pei	<L88+chr_0+2
  3941 08:0726: D4 10        	pei	<L88+chr_0
  3942 08:0728: A9 0C 00     	lda	#$c
  3943                        	xref	~~~llsr
  3944 08:072B: 22 xx xx xx  	jsl	~~~llsr
  3945 08:072F: 85 01        	sta	<R0
  3946 08:0731: 86 03        	stx	<R0+2
  3947 08:0733: A5 01        	lda	<R0
  3948 08:0735: 29 3F 00     	and	#<$3f
  3949 08:0738: 85 05        	sta	<R1
  3950 08:073A: 64 07        	stz	<R1+2
  3951 08:073C: A5 05        	lda	<R1
  3952 08:073E: 09 80 00     	ora	#<$80
  3953 08:0741: 85 01        	sta	<R0
  3954 08:0743: A5 07        	lda	<R1+2
  3955 08:0745: 85 03        	sta	<R0+2
  3956 08:0747: E2 20        	sep	#$20
  3957                        	longa	off
  3958 08:0749: A5 01        	lda	<R0
  3959 08:074B: 87 14        	sta	[<L88+buf_0]
  3960 08:074D: C2 20        	rep	#$20
  3961                        	longa	on
  3962 08:074F: E6 14        	inc	<L88+buf_0
  3963 08:0751: D0 02        	bne	L111
  3964 08:0753: E6 16        	inc	<L88+buf_0+2
  3965                        L111:
  3966                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  3967                        	.line	915
  3968 08:0755: D4 12        	pei	<L88+chr_0+2
  3969 08:0757: D4 10        	pei	<L88+chr_0
  3970 08:0759: A9 06 00     	lda	#$6
  3971                        	xref	~~~llsr
  3972 08:075C: 22 xx xx xx  	jsl	~~~llsr
  3973 08:0760: 85 01        	sta	<R0
  3974 08:0762: 86 03        	stx	<R0+2
  3975 08:0764: A5 01        	lda	<R0
  3976 08:0766: 29 3F 00     	and	#<$3f
  3977 08:0769: 85 05        	sta	<R1
  3978 08:076B: 64 07        	stz	<R1+2
  3979 08:076D: A5 05        	lda	<R1
  3980 08:076F: 09 80 00     	ora	#<$80
  3981 08:0772: 85 01        	sta	<R0
  3982 08:0774: A5 07        	lda	<R1+2
  3983 08:0776: 85 03        	sta	<R0+2
  3984 08:0778: E2 20        	sep	#$20
  3985                        	longa	off
  3986 08:077A: A5 01        	lda	<R0
  3987 08:077C: 87 14        	sta	[<L88+buf_0]
  3988 08:077E: C2 20        	rep	#$20
  3989                        	longa	on
  3990 08:0780: E6 14        	inc	<L88+buf_0
  3991 08:0782: D0 02        	bne	L112
  3992 08:0784: E6 16        	inc	<L88+buf_0+2
  Mon Aug  9 2021 16:52                                                Page 83


  3993                        L112:
  3994                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  3995                        	.line	916
  3996 08:0786: A5 10        	lda	<L88+chr_0
  3997 08:0788: 29 3F 00     	and	#<$3f
  3998 08:078B: 85 01        	sta	<R0
  3999 08:078D: 64 03        	stz	<R0+2
  4000 08:078F: A5 01        	lda	<R0
  4001 08:0791: 09 80 00     	ora	#<$80
  4002 08:0794: 85 05        	sta	<R1
  4003 08:0796: A5 03        	lda	<R0+2
  4004 08:0798: 85 07        	sta	<R1+2
  4005 08:079A: E2 20        	sep	#$20
  4006                        	longa	off
  4007 08:079C: A5 05        	lda	<R1
  4008 08:079E: 87 14        	sta	[<L88+buf_0]
  4009 08:07A0: C2 20        	rep	#$20
  4010                        	longa	on
  4011 08:07A2: E6 14        	inc	<L88+buf_0
  4012 08:07A4: D0 02        	bne	L113
  4013 08:07A6: E6 16        	inc	<L88+buf_0+2
  4014                        L113:
  4015                        ;	return 4;
  4016                        	.line	917
  4017 08:07A8: A9 04 00     	lda	#$4
  4018 08:07AB: 82 5E FD     	brl	L93
  4019                        ;
  4020                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 output
                     */
  4021                        ;	DWORD hc;
  4022                        ;
  4023                        ;	if (szb < 1) return 0; /* Buffer overflow? */
  4024                        ;	if (chr >= 0x10000)
  4025                        ;	{ /* Out of BMP? */
  4026                        ;		hc = ((chr & 0xFFFF0000) - 0xD8000000) >
                    > 6; /* Get high 10 bits */
  4027                        ;		chr = (chr & 0xFFFF) - 0xDC00; /* Get lo
                    w 10 bits */
  4028                        ;		if (hc >= 0x100000 || chr >= 0x400) retu
                    rn 0; /* Wrong surrogate? */
  4029                        ;		chr = (hc | chr) + 0x10000;
  4030                        ;	}
  4031                        ;	*buf++ = (TCHAR)chr;
  4032                        ;	return 1;
  4033                        ;
  4034                        ;#else						
                    /* ANSI/OEM output */
  4035                        ;	WCHAR wc;
  4036                        ;
  4037                        ;	wc = ff_uni2oem(chr, CODEPAGE);
  4038                        ;	if (wc >= 0x100)
  4039                        ;	{ /* Is this a DBC? */
  4040                        ;		if (szb < 2) return 0;
  4041                        ;		*buf++ = (char)(wc >> 8); /* Store DBC 1
                    st byte */
  4042                        ;		*buf++ = (TCHAR)wc; /* Store DBC 2nd byt
                    e */
  4043                        ;		return 2;
  Mon Aug  9 2021 16:52                                                Page 84


  4044                        ;	}
  4045                        ;	if (wc == 0 || szb < 1) return 0; /* Invalid cha
                    r or buffer overflow? */
  4046                        ;	*buf++ = (TCHAR)wc; /* Store the character */
  4047                        ;	return 1;
  4048                        ;#endif
  4049                        ;}
  4050                        	.line	948
  4051                        	.endblock	948
  4052             0000000C   L88	equ	12
  4053             00000009   L89	equ	9
  4054 08:07AE:              	ends
  4055                        	efunc
  4056                        	.endfunc	948,9,12
  4057                        	.line	948
  4058                        ;#endif	/* FF_USE_LFN */
  4059                        ;
  4060                        ;#if FF_FS_REENTRANT
  4061                        ;/*-----------------------------------------------
                    ------------------------*/
  4062                        ;/* Request/Release grant to access the volume    
                                            */
  4063                        ;/*-----------------------------------------------
                    ------------------------*/
  4064                        ;static int lock_fs ( /* 1:Ok, 0:timeout */
  4065                        ;		FATFS* fs /* Filesystem object */
  4066                        ;)
  4067                        ;{
  4068                        ;	return ff_req_grant(fs->sobj);
  4069                        ;}
  4070                        ;
  4071                        ;static void unlock_fs (
  4072                        ;		FATFS* fs, /* Filesystem object */
  4073                        ;		FRESULT res /* Result code to be returne
                    d */
  4074                        ;)
  4075                        ;{
  4076                        ;	if (fs && res != FR_NOT_ENABLED && res != FR_INV
                    ALID_DRIVE && res != FR_TIMEOUT)
  4077                        ;	{
  4078                        ;		ff_rel_grant(fs->sobj);
  4079                        ;	}
  4080                        ;}
  4081                        ;
  4082                        ;#endif
  4083                        ;
  4084                        ;#if FF_FS_LOCK != 0
  4085                        ;/*-----------------------------------------------
                    ------------------------*/
  4086                        ;/* File lock control functions                   
                                            */
  4087                        ;/*-----------------------------------------------
                    ------------------------*/
  4088                        ;
  4089                        ;static FRESULT chk_lock ( /* Check if the file ca
                    n be accessed */
  4090                        ;		DIR* dp, /* Directory object pointing th
                    e file to be checked */
  Mon Aug  9 2021 16:52                                                Page 85


  4091                        ;		int acc /* Desired access type (0:Read m
                    ode open, 1:Write mode open, 2:Delete or rename) */
  4092                        ;)
  4093                        ;{
  4094                        ;	UINT i, be;
  4095                        ;
  4096                        ;	/* Search open object table for the object */
  4097                        ;	be = 0;
  4098                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  4099                        ;	{
  4100                        ;		if (Files[i].fs)
  4101                        ;		{ /* Existing entry */
  4102                        ;			if (Files[i].fs == dp->obj.fs &&
                     /* Check if the object matches with an open object */
  4103                        ;					Files[i].clu == 
                    dp->obj.sclust &&
  4104                        ;					Files[i].ofs == 
                    dp->dptr) break;
  4105                        ;		}
  4106                        ;		else
  4107                        ;		{ /* Blank entry */
  4108                        ;			be = 1;
  4109                        ;		}
  4110                        ;	}
  4111                        ;	if (i == FF_FS_LOCK)
  4112                        ;	{ /* The object has not been opened */
  4113                        ;		return (!be && acc != 2) ? FR_TOO_MANY_O
                    PEN_FILES : FR_OK; /* Is there a blank entry for new object?
                     */
  4114                        ;	}
  4115                        ;
  4116                        ;	/* The object was opened. Reject any open agains
                    t writing file and all write mode open */
  4117                        ;	return (acc != 0 || Files[i].ctr == 0x100) ? FR_
                    LOCKED : FR_OK;
  4118                        ;}
  4119                        ;
  4120                        ;static int enq_lock (void) /* Check if an entry i
                    s available for a new object */
  4121                        ;{
  4122                        ;	UINT i;
  4123                        ;
  4124                        ;	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++);
  4125                        ;	return (i == FF_FS_LOCK) ? 0 : 1;
  4126                        ;}
  4127                        ;
  4128                        ;static UINT inc_lock ( /* Increment object open c
                    ounter and returns its index (0:Internal error) */
  4129                        ;		DIR* dp, /* Directory object pointing th
                    e file to register or increment */
  4130                        ;		int acc /* Desired access (0:Read, 1:Wri
                    te, 2:Delete/Rename) */
  4131                        ;)
  4132                        ;{
  4133                        ;	UINT i;
  4134                        ;
  4135                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  4136                        ;	{ /* Find the object */
  Mon Aug  9 2021 16:52                                                Page 86


  4137                        ;		if (Files[i].fs == dp->obj.fs
  4138                        ;				&& Files[i].clu == dp->o
                    bj.sclust
  4139                        ;				&& Files[i].ofs == dp->d
                    ptr) break;
  4140                        ;	}
  4141                        ;
  4142                        ;	if (i == FF_FS_LOCK)
  4143                        ;	{ /* Not opened. Register it as new. */
  4144                        ;		for (i = 0; i < FF_FS_LOCK && Files[i].f
                    s; i++);
  4145                        ;		if (i == FF_FS_LOCK) return 0; /* No fre
                    e entry to register (int err) */
  4146                        ;		Files[i].fs = dp->obj.fs;
  4147                        ;		Files[i].clu = dp->obj.sclust;
  4148                        ;		Files[i].ofs = dp->dptr;
  4149                        ;		Files[i].ctr = 0;
  4150                        ;	}
  4151                        ;
  4152                        ;	if (acc >= 1 && Files[i].ctr) return 0; /* Acces
                    s violation (int err) */
  4153                        ;
  4154                        ;	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1; /
                    * Set semaphore value */
  4155                        ;
  4156                        ;	return i + 1; /* Index number origin from 1 */
  4157                        ;}
  4158                        ;
  4159                        ;static FRESULT dec_lock ( /* Decrement object ope
                    n counter */
  4160                        ;		UINT i /* Semaphore index (1..) */
  4161                        ;)
  4162                        ;{
  4163                        ;	WORD n;
  4164                        ;	FRESULT res;
  4165                        ;
  4166                        ;	if (--i < FF_FS_LOCK)
  4167                        ;	{ /* Index number origin from 0 */
  4168                        ;		n = Files[i].ctr;
  4169                        ;		if (n == 0x100) n = 0; /* If write mode 
                    open, delete the entry */
  4170                        ;		if (n > 0) n--; /* Decrement read mode o
                    pen count */
  4171                        ;		Files[i].ctr = n;
  4172                        ;		if (n == 0) Files[i].fs = 0; /* Delete t
                    he entry if open count gets zero */
  4173                        ;		res = FR_OK;
  4174                        ;	}
  4175                        ;	else
  4176                        ;	{
  4177                        ;		res = FR_INT_ERR; /* Invalid index nunbe
                    r */
  4178                        ;	}
  4179                        ;	return res;
  4180                        ;}
  4181                        ;
  4182                        ;static void clear_lock ( /* Clear lock entries of
                     the volume */
  Mon Aug  9 2021 16:52                                                Page 87


  4183                        ;		FATFS *fs
  4184                        ;)
  4185                        ;{
  4186                        ;	UINT i;
  4187                        ;
  4188                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  4189                        ;	{
  4190                        ;		if (Files[i].fs == fs) Files[i].fs = 0;
  4191                        ;	}
  4192                        ;}
  4193                        ;
  4194                        ;#endif	/* FF_FS_LOCK != 0 */
  4195                        ;
  4196                        ;/*-----------------------------------------------
                    ------------------------*/
  4197                        ;/* Move/Flush disk access window in the filesyste
                    m object                */
  4198                        ;/*-----------------------------------------------
                    ------------------------*/
  4199                        ;#if !FF_FS_READONLY
  4200                        ;static FRESULT sync_window( /* Returns FR_OK or F
                    R_DISK_ERR */
  4201                        ;FATFS* fs /* Filesystem object */
  4202                        ;)
  4203                        ;{
  4204                        	.line	1091
  4205                        	.line	1094
  4206                        	FFDOS
  4207                        	func
  4208                        	.function	1094
  4209                        ~~sync_window:
  4210                        	longa	on
  4211                        	longi	on
  4212 08:07AE: 3B           	tsc
  4213 08:07AF: 38           	sec
  4214 08:07B0: E9 0A 00     	sbc	#L114
  4215 08:07B3: 1B           	tcs
  4216 08:07B4: 0B           	phd
  4217 08:07B5: 5B           	tcd
  4218             00000004   fs_0	set	4
  4219                        	.block	1094
  4220                        ;	FRESULT res = FR_OK;
  4221                        ;
  4222                        ;	//k_debug_string("sync_window...\r\n");
  4223                        ;
  4224                        ;	if (fs->wflag)
  4225             00000000   res_1	set	0
  4226                        	.sym	res,0,5,1,16
  4227                        	.sym	fs,4,138,6,32,75
  4228 08:07B6: 64 09        	stz	<L115+res_1
  4229                        	.line	1099
  4230                        ;	{ /* Is the disk access window dirty? */
  4231 08:07B8: A0 03 00     	ldy	#$3
  4232 08:07BB: B7 0E        	lda	[<L114+fs_0],Y
  4233 08:07BD: 29 FF 00     	and	#$ff
  4234 08:07C0: D0 03        	bne	L117
  4235 08:07C2: 82 BE 00     	brl	L10036
  4236                        L117:
  Mon Aug  9 2021 16:52                                                Page 88


  4237                        	.line	1100
  4238                        ;		//k_debug_long("sync_window:fs->wflag:",
                    fs->wflag);
  4239                        ;		if (disk_write(fs->pdrv, fs->win, fs->wi
                    nsect, 1) == RES_OK)
  4240                        	.line	1102
  4241                        ;		{
  4242 08:07C5: F4 01 00     	pea	#<$1
  4243 08:07C8: A0 31 00     	ldy	#$31
  4244 08:07CB: B7 0E        	lda	[<L114+fs_0],Y
  4245 08:07CD: 48           	pha
  4246 08:07CE: A0 2F 00     	ldy	#$2f
  4247 08:07D1: B7 0E        	lda	[<L114+fs_0],Y
  4248 08:07D3: 48           	pha
  4249 08:07D4: 18           	clc
  4250 08:07D5: A9 33 00     	lda	#$33
  4251 08:07D8: 65 0E        	adc	<L114+fs_0
  4252 08:07DA: 85 01        	sta	<R0
  4253 08:07DC: A9 00 00     	lda	#$0
  4254 08:07DF: 65 10        	adc	<L114+fs_0+2
  4255 08:07E1: 85 03        	sta	<R0+2
  4256 08:07E3: D4 03        	pei	<R0+2
  4257 08:07E5: D4 01        	pei	<R0
  4258 08:07E7: A0 01 00     	ldy	#$1
  4259 08:07EA: B7 0E        	lda	[<L114+fs_0],Y
  4260 08:07EC: 48           	pha
  4261 08:07ED: 22 xx xx xx  	jsl	~~disk_write
  4262 08:07F1: AA           	tax
  4263 08:07F2: F0 03        	beq	L118
  4264 08:07F4: 82 87 00     	brl	L10037
  4265                        L118:
  4266                        	.line	1103
  4267                        ;			//k_debug_long("sync_window:disk
                    _write:",0);
  4268                        ;			/* Write it back into the volume
                     */
  4269                        ;			fs->wflag = 0; /* Clear window d
                    irty flag */
  4270                        	.line	1106
  4271 08:07F7: E2 20        	sep	#$20
  4272                        	longa	off
  4273 08:07F9: A9 00        	lda	#$0
  4274 08:07FB: A0 03 00     	ldy	#$3
  4275 08:07FE: 97 0E        	sta	[<L114+fs_0],Y
  4276 08:0800: C2 20        	rep	#$20
  4277                        	longa	on
  4278                        ;			if (fs->winsect - fs->fatbase < 
                    fs->fsize)
  4279                        	.line	1107
  4280                        ;			{ /* Is it in the 1st FAT? */
  4281 08:0802: 38           	sec
  4282 08:0803: A0 2F 00     	ldy	#$2f
  4283 08:0806: B7 0E        	lda	[<L114+fs_0],Y
  4284 08:0808: A0 23 00     	ldy	#$23
  4285 08:080B: F7 0E        	sbc	[<L114+fs_0],Y
  4286 08:080D: 85 01        	sta	<R0
  4287 08:080F: A0 31 00     	ldy	#$31
  4288 08:0812: B7 0E        	lda	[<L114+fs_0],Y
  Mon Aug  9 2021 16:52                                                Page 89


  4289 08:0814: A0 25 00     	ldy	#$25
  4290 08:0817: F7 0E        	sbc	[<L114+fs_0],Y
  4291 08:0819: 85 03        	sta	<R0+2
  4292 08:081B: A5 01        	lda	<R0
  4293 08:081D: A0 1B 00     	ldy	#$1b
  4294 08:0820: D7 0E        	cmp	[<L114+fs_0],Y
  4295 08:0822: A5 03        	lda	<R0+2
  4296 08:0824: A0 1D 00     	ldy	#$1d
  4297 08:0827: F7 0E        	sbc	[<L114+fs_0],Y
  4298 08:0829: 90 03        	bcc	L119
  4299 08:082B: 82 4D 00     	brl	L10038
  4300                        L119:
  4301                        	.line	1108
  4302                        ;				if (fs->n_fats == 2)
  4303                        	.line	1109
  4304                        ;					disk_write(fs->p
                    drv, fs->win, fs->winsect + fs->fsize, 1); /* Reflect it to 
                    2nd FAT if needed */
  4305 08:082E: E2 20        	sep	#$20
  4306                        	longa	off
  4307 08:0830: A0 02 00     	ldy	#$2
  4308 08:0833: B7 0E        	lda	[<L114+fs_0],Y
  4309 08:0835: C9 02        	cmp	#<$2
  4310 08:0837: C2 20        	rep	#$20
  4311                        	longa	on
  4312 08:0839: F0 03        	beq	L120
  4313 08:083B: 82 3D 00     	brl	L10039
  4314                        L120:
  4315                        	.line	1110
  4316 08:083E: F4 01 00     	pea	#<$1
  4317 08:0841: 18           	clc
  4318 08:0842: A0 2F 00     	ldy	#$2f
  4319 08:0845: B7 0E        	lda	[<L114+fs_0],Y
  4320 08:0847: A0 1B 00     	ldy	#$1b
  4321 08:084A: 77 0E        	adc	[<L114+fs_0],Y
  4322 08:084C: 85 01        	sta	<R0
  4323 08:084E: A0 31 00     	ldy	#$31
  4324 08:0851: B7 0E        	lda	[<L114+fs_0],Y
  4325 08:0853: A0 1D 00     	ldy	#$1d
  4326 08:0856: 77 0E        	adc	[<L114+fs_0],Y
  4327 08:0858: 85 03        	sta	<R0+2
  4328 08:085A: D4 03        	pei	<R0+2
  4329 08:085C: D4 01        	pei	<R0
  4330 08:085E: 18           	clc
  4331 08:085F: A9 33 00     	lda	#$33
  4332 08:0862: 65 0E        	adc	<L114+fs_0
  4333 08:0864: 85 05        	sta	<R1
  4334 08:0866: A9 00 00     	lda	#$0
  4335 08:0869: 65 10        	adc	<L114+fs_0+2
  4336 08:086B: 85 07        	sta	<R1+2
  4337 08:086D: D4 07        	pei	<R1+2
  4338 08:086F: D4 05        	pei	<R1
  4339 08:0871: A0 01 00     	ldy	#$1
  4340 08:0874: B7 0E        	lda	[<L114+fs_0],Y
  4341 08:0876: 48           	pha
  4342 08:0877: 22 xx xx xx  	jsl	~~disk_write
  4343                        ;			}
  4344                        L10039:
  Mon Aug  9 2021 16:52                                                Page 90


  4345                        	.line	1111
  4346                        ;		}
  4347                        L10038:
  4348                        	.line	1112
  4349                        ;		else
  4350 08:087B: 82 05 00     	brl	L10040
  4351                        L10037:
  4352                        ;		{
  4353                        	.line	1114
  4354                        ;			res = FR_DISK_ERR;
  4355                        	.line	1115
  4356 08:087E: A9 01 00     	lda	#$1
  4357 08:0881: 85 09        	sta	<L115+res_1
  4358                        ;		}
  4359                        	.line	1116
  4360                        L10040:
  4361                        ;	}
  4362                        	.line	1117
  4363                        ;	return res;
  4364                        L10036:
  4365                        	.line	1118
  4366 08:0883: A5 09        	lda	<L115+res_1
  4367                        L121:
  4368 08:0885: A8           	tay
  4369 08:0886: A5 0C        	lda	<L114+2
  4370 08:0888: 85 10        	sta	<L114+2+4
  4371 08:088A: A5 0B        	lda	<L114+1
  4372 08:088C: 85 0F        	sta	<L114+1+4
  4373 08:088E: 2B           	pld
  4374 08:088F: 3B           	tsc
  4375 08:0890: 18           	clc
  4376 08:0891: 69 0E 00     	adc	#L114+4
  4377 08:0894: 1B           	tcs
  4378 08:0895: 98           	tya
  4379 08:0896: 6B           	rtl
  4380                        ;}
  4381                        	.line	1119
  4382                        	.endblock	1119
  4383             0000000A   L114	equ	10
  4384             00000009   L115	equ	9
  4385 08:0897:              	ends
  4386                        	efunc
  4387                        	.endfunc	1119,9,10
  4388                        	.line	1119
  4389                        ;#endif
  4390                        ;
  4391                        ;static FRESULT move_window( /* Returns FR_OK or F
                    R_DISK_ERR */
  4392                        ;FATFS* fs, /* Filesystem object */
  4393                        ;LBA_t sect /* Sector LBA to make appearance in th
                    e fs->win[] */
  4394                        ;)
  4395                        ;{
  4396                        	.line	1122
  4397                        	.line	1126
  4398                        	FFDOS
  4399                        	func
  4400                        	.function	1126
  Mon Aug  9 2021 16:52                                                Page 91


  4401                        ~~move_window:
  4402                        	longa	on
  4403                        	longi	on
  4404 08:0897: 3B           	tsc
  4405 08:0898: 38           	sec
  4406 08:0899: E9 06 00     	sbc	#L122
  4407 08:089C: 1B           	tcs
  4408 08:089D: 0B           	phd
  4409 08:089E: 5B           	tcd
  4410             00000004   fs_0	set	4
  4411             00000008   sect_0	set	8
  4412                        	.block	1126
  4413                        ;	FRESULT res = FR_OK;
  4414                        ;
  4415                        ;	//k_debug_string("move_window...\r\n");
  4416                        ;
  4417                        ;	if (sect != fs->winsect)
  4418             00000000   res_1	set	0
  4419                        	.sym	res,0,5,1,16
  4420                        	.sym	fs,4,138,6,32,75
  4421                        	.sym	sect,8,18,6,32
  4422 08:089F: 64 05        	stz	<L123+res_1
  4423                        	.line	1131
  4424                        ;	{ /* Window offset changed? */
  4425 08:08A1: A5 0E        	lda	<L122+sect_0
  4426 08:08A3: A0 2F 00     	ldy	#$2f
  4427 08:08A6: D7 0A        	cmp	[<L122+fs_0],Y
  4428 08:08A8: D0 07        	bne	L125
  4429 08:08AA: A5 10        	lda	<L122+sect_0+2
  4430 08:08AC: A0 31 00     	ldy	#$31
  4431 08:08AF: D7 0A        	cmp	[<L122+fs_0],Y
  4432                        L125:
  4433 08:08B1: D0 03        	bne	L126
  4434 08:08B3: 82 58 00     	brl	L10041
  4435                        L126:
  4436                        	.line	1132
  4437                        ;#if !FF_FS_READONLY
  4438                        ;		res = sync_window(fs); /* Flush the wind
                    ow */
  4439                        	.line	1134
  4440 08:08B6: D4 0C        	pei	<L122+fs_0+2
  4441 08:08B8: D4 0A        	pei	<L122+fs_0
  4442 08:08BA: 22 AE 07 08  	jsl	~~sync_window
  4443 08:08BE: 85 05        	sta	<L123+res_1
  4444                        ;#endif
  4445                        ;		if (res == FR_OK)
  4446                        	.line	1136
  4447                        ;		{ /* Fill sector window with new data */
  4448 08:08C0: A5 05        	lda	<L123+res_1
  4449 08:08C2: F0 03        	beq	L127
  4450 08:08C4: 82 47 00     	brl	L10042
  4451                        L127:
  4452                        	.line	1137
  4453                        ;			if (disk_read(fs->pdrv, fs->win,
                     sect, 1) != RES_OK)
  4454                        	.line	1138
  4455                        ;			{
  4456 08:08C7: F4 01 00     	pea	#<$1
  Mon Aug  9 2021 16:52                                                Page 92


  4457 08:08CA: D4 10        	pei	<L122+sect_0+2
  4458 08:08CC: D4 0E        	pei	<L122+sect_0
  4459 08:08CE: 18           	clc
  4460 08:08CF: A9 33 00     	lda	#$33
  4461 08:08D2: 65 0A        	adc	<L122+fs_0
  4462 08:08D4: 85 01        	sta	<R0
  4463 08:08D6: A9 00 00     	lda	#$0
  4464 08:08D9: 65 0C        	adc	<L122+fs_0+2
  4465 08:08DB: 85 03        	sta	<R0+2
  4466 08:08DD: D4 03        	pei	<R0+2
  4467 08:08DF: D4 01        	pei	<R0
  4468 08:08E1: A0 01 00     	ldy	#$1
  4469 08:08E4: B7 0A        	lda	[<L122+fs_0],Y
  4470 08:08E6: 48           	pha
  4471 08:08E7: 22 xx xx xx  	jsl	~~disk_read
  4472 08:08EB: AA           	tax
  4473 08:08EC: D0 03        	bne	L128
  4474 08:08EE: 82 0F 00     	brl	L10043
  4475                        L128:
  4476                        	.line	1139
  4477                        ;				sect = (LBA_t) 0 - 1; /*
                     Invalidate window if read data is not valid */
  4478                        	.line	1140
  4479 08:08F1: A9 FF FF     	lda	#$ffff
  4480 08:08F4: 85 0E        	sta	<L122+sect_0
  4481 08:08F6: A9 FF FF     	lda	#$ffff
  4482 08:08F9: 85 10        	sta	<L122+sect_0+2
  4483                        ;				res = FR_DISK_ERR;
  4484                        	.line	1141
  4485 08:08FB: A9 01 00     	lda	#$1
  4486 08:08FE: 85 05        	sta	<L123+res_1
  4487                        ;			}
  4488                        	.line	1142
  4489                        ;			fs->winsect = sect;
  4490                        L10043:
  4491                        	.line	1143
  4492 08:0900: A5 0E        	lda	<L122+sect_0
  4493 08:0902: A0 2F 00     	ldy	#$2f
  4494 08:0905: 97 0A        	sta	[<L122+fs_0],Y
  4495 08:0907: A5 10        	lda	<L122+sect_0+2
  4496 08:0909: A0 31 00     	ldy	#$31
  4497 08:090C: 97 0A        	sta	[<L122+fs_0],Y
  4498                        ;			//k_debug_long("move_window::sec
                    t:",sect);
  4499                        ;		}
  4500                        	.line	1145
  4501                        ;	}
  4502                        L10042:
  4503                        	.line	1146
  4504                        ;	//k_debug_hex("move_window::res:",res);
  4505                        ;	return res;
  4506                        L10041:
  4507                        	.line	1148
  4508 08:090E: A5 05        	lda	<L123+res_1
  4509                        L129:
  4510 08:0910: A8           	tay
  4511 08:0911: A5 08        	lda	<L122+2
  4512 08:0913: 85 10        	sta	<L122+2+8
  Mon Aug  9 2021 16:52                                                Page 93


  4513 08:0915: A5 07        	lda	<L122+1
  4514 08:0917: 85 0F        	sta	<L122+1+8
  4515 08:0919: 2B           	pld
  4516 08:091A: 3B           	tsc
  4517 08:091B: 18           	clc
  4518 08:091C: 69 0E 00     	adc	#L122+8
  4519 08:091F: 1B           	tcs
  4520 08:0920: 98           	tya
  4521 08:0921: 6B           	rtl
  4522                        ;}
  4523                        	.line	1149
  4524                        	.endblock	1149
  4525             00000006   L122	equ	6
  4526             00000005   L123	equ	5
  4527 08:0922:              	ends
  4528                        	efunc
  4529                        	.endfunc	1149,5,6
  4530                        	.line	1149
  4531                        ;
  4532                        ;#if !FF_FS_READONLY
  4533                        ;/*-----------------------------------------------
                    ------------------------*/
  4534                        ;/* Synchronize filesystem and data on the storage
                                            */
  4535                        ;/*-----------------------------------------------
                    ------------------------*/
  4536                        ;
  4537                        ;static FRESULT sync_fs( /* Returns FR_OK or FR_DI
                    SK_ERR */
  4538                        ;FATFS* fs /* Filesystem object */
  4539                        ;)
  4540                        ;{
  4541                        	.line	1156
  4542                        	.line	1159
  4543                        	FFDOS
  4544                        	func
  4545                        	.function	1159
  4546                        ~~sync_fs:
  4547                        	longa	on
  4548                        	longi	on
  4549 08:0922: 3B           	tsc
  4550 08:0923: 38           	sec
  4551 08:0924: E9 06 00     	sbc	#L130
  4552 08:0927: 1B           	tcs
  4553 08:0928: 0B           	phd
  4554 08:0929: 5B           	tcd
  4555             00000004   fs_0	set	4
  4556                        	.block	1159
  4557                        ;	FRESULT res;
  4558                        ;
  4559                        ;	res = sync_window(fs);
  4560             00000000   res_1	set	0
  4561                        	.sym	res,0,5,1,16
  4562                        	.sym	fs,4,138,6,32,75
  4563                        	.line	1162
  4564 08:092A: D4 0C        	pei	<L130+fs_0+2
  4565 08:092C: D4 0A        	pei	<L130+fs_0
  4566 08:092E: 22 AE 07 08  	jsl	~~sync_window
  Mon Aug  9 2021 16:52                                                Page 94


  4567 08:0932: 85 05        	sta	<L131+res_1
  4568                        ;	if (res == FR_OK)
  4569                        	.line	1163
  4570                        ;	{
  4571 08:0934: A5 05        	lda	<L131+res_1
  4572 08:0936: F0 03        	beq	L133
  4573 08:0938: 82 4C 01     	brl	L10044
  4574                        L133:
  4575                        	.line	1164
  4576                        ;		if (fs->fs_type == FS_FAT32 && fs->fsi_f
                    lag == 1)
  4577                        	.line	1165
  4578                        ;		{ /* FAT32: Update FSInfo sector if need
                    ed */
  4579 08:093B: E2 20        	sep	#$20
  4580                        	longa	off
  4581 08:093D: A7 0A        	lda	[<L130+fs_0]
  4582 08:093F: C9 03        	cmp	#<$3
  4583 08:0941: C2 20        	rep	#$20
  4584                        	longa	on
  4585 08:0943: F0 03        	beq	L134
  4586 08:0945: 82 21 01     	brl	L10045
  4587                        L134:
  4588 08:0948: E2 20        	sep	#$20
  4589                        	longa	off
  4590 08:094A: A0 04 00     	ldy	#$4
  4591 08:094D: B7 0A        	lda	[<L130+fs_0],Y
  4592 08:094F: C9 01        	cmp	#<$1
  4593 08:0951: C2 20        	rep	#$20
  4594                        	longa	on
  4595 08:0953: F0 03        	beq	L135
  4596 08:0955: 82 11 01     	brl	L10045
  4597                        L135:
  4598                        	.line	1166
  4599                        ;			/* Create FSInfo structure */
  4600                        ;			mem_set(fs->win, 0, sizeof fs->w
                    in);
  4601                        	.line	1168
  4602 08:0958: F4 00 02     	pea	#<$200
  4603 08:095B: F4 00 00     	pea	#<$0
  4604 08:095E: 18           	clc
  4605 08:095F: A9 33 00     	lda	#$33
  4606 08:0962: 65 0A        	adc	<L130+fs_0
  4607 08:0964: 85 01        	sta	<R0
  4608 08:0966: A9 00 00     	lda	#$0
  4609 08:0969: 65 0C        	adc	<L130+fs_0+2
  4610 08:096B: 85 03        	sta	<R0+2
  4611 08:096D: D4 03        	pei	<R0+2
  4612 08:096F: D4 01        	pei	<R0
  4613 08:0971: 22 DF 01 08  	jsl	~~mem_set
  4614                        ;			st_word(fs->win + BS_55AA, 0xAA5
                    5);
  4615                        	.line	1169
  4616 08:0975: F4 55 AA     	pea	#<$aa55
  4617 08:0978: 18           	clc
  4618 08:0979: A9 31 02     	lda	#$231
  4619 08:097C: 65 0A        	adc	<L130+fs_0
  4620 08:097E: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 95


  4621 08:0980: A9 00 00     	lda	#$0
  4622 08:0983: 65 0C        	adc	<L130+fs_0+2
  4623 08:0985: 85 03        	sta	<R0+2
  4624 08:0987: D4 03        	pei	<R0+2
  4625 08:0989: D4 01        	pei	<R0
  4626 08:098B: 22 D7 00 08  	jsl	~~st_word
  4627                        ;			st_dword(fs->win + FSI_LeadSig, 
                    0x41615252);
  4628                        	.line	1170
  4629 08:098F: F4 61 41     	pea	#^$41615252
  4630 08:0992: F4 52 52     	pea	#<$41615252
  4631 08:0995: 18           	clc
  4632 08:0996: A9 33 00     	lda	#$33
  4633 08:0999: 65 0A        	adc	<L130+fs_0
  4634 08:099B: 85 01        	sta	<R0
  4635 08:099D: A9 00 00     	lda	#$0
  4636 08:09A0: 65 0C        	adc	<L130+fs_0+2
  4637 08:09A2: 85 03        	sta	<R0+2
  4638 08:09A4: D4 03        	pei	<R0+2
  4639 08:09A6: D4 01        	pei	<R0
  4640 08:09A8: 22 16 01 08  	jsl	~~st_dword
  4641                        ;			st_dword(fs->win + FSI_StrucSig,
                     0x61417272);
  4642                        	.line	1171
  4643 08:09AC: F4 41 61     	pea	#^$61417272
  4644 08:09AF: F4 72 72     	pea	#<$61417272
  4645 08:09B2: 18           	clc
  4646 08:09B3: A9 17 02     	lda	#$217
  4647 08:09B6: 65 0A        	adc	<L130+fs_0
  4648 08:09B8: 85 01        	sta	<R0
  4649 08:09BA: A9 00 00     	lda	#$0
  4650 08:09BD: 65 0C        	adc	<L130+fs_0+2
  4651 08:09BF: 85 03        	sta	<R0+2
  4652 08:09C1: D4 03        	pei	<R0+2
  4653 08:09C3: D4 01        	pei	<R0
  4654 08:09C5: 22 16 01 08  	jsl	~~st_dword
  4655                        ;			st_dword(fs->win + FSI_Free_Coun
                    t, fs->free_clst);
  4656                        	.line	1172
  4657 08:09C9: A0 15 00     	ldy	#$15
  4658 08:09CC: B7 0A        	lda	[<L130+fs_0],Y
  4659 08:09CE: 48           	pha
  4660 08:09CF: A0 13 00     	ldy	#$13
  4661 08:09D2: B7 0A        	lda	[<L130+fs_0],Y
  4662 08:09D4: 48           	pha
  4663 08:09D5: 18           	clc
  4664 08:09D6: A9 1B 02     	lda	#$21b
  4665 08:09D9: 65 0A        	adc	<L130+fs_0
  4666 08:09DB: 85 01        	sta	<R0
  4667 08:09DD: A9 00 00     	lda	#$0
  4668 08:09E0: 65 0C        	adc	<L130+fs_0+2
  4669 08:09E2: 85 03        	sta	<R0+2
  4670 08:09E4: D4 03        	pei	<R0+2
  4671 08:09E6: D4 01        	pei	<R0
  4672 08:09E8: 22 16 01 08  	jsl	~~st_dword
  4673                        ;			st_dword(fs->win + FSI_Nxt_Free,
                     fs->last_clst);
  4674                        	.line	1173
  Mon Aug  9 2021 16:52                                                Page 96


  4675 08:09EC: A0 11 00     	ldy	#$11
  4676 08:09EF: B7 0A        	lda	[<L130+fs_0],Y
  4677 08:09F1: 48           	pha
  4678 08:09F2: A0 0F 00     	ldy	#$f
  4679 08:09F5: B7 0A        	lda	[<L130+fs_0],Y
  4680 08:09F7: 48           	pha
  4681 08:09F8: 18           	clc
  4682 08:09F9: A9 1F 02     	lda	#$21f
  4683 08:09FC: 65 0A        	adc	<L130+fs_0
  4684 08:09FE: 85 01        	sta	<R0
  4685 08:0A00: A9 00 00     	lda	#$0
  4686 08:0A03: 65 0C        	adc	<L130+fs_0+2
  4687 08:0A05: 85 03        	sta	<R0+2
  4688 08:0A07: D4 03        	pei	<R0+2
  4689 08:0A09: D4 01        	pei	<R0
  4690 08:0A0B: 22 16 01 08  	jsl	~~st_dword
  4691                        ;			/* Write it into the FSInfo sect
                    or */
  4692                        ;			fs->winsect = fs->volbase + 1;
  4693                        	.line	1175
  4694 08:0A0F: 18           	clc
  4695 08:0A10: A9 01 00     	lda	#$1
  4696 08:0A13: A0 1F 00     	ldy	#$1f
  4697 08:0A16: 77 0A        	adc	[<L130+fs_0],Y
  4698 08:0A18: 85 01        	sta	<R0
  4699 08:0A1A: A9 00 00     	lda	#$0
  4700 08:0A1D: A0 21 00     	ldy	#$21
  4701 08:0A20: 77 0A        	adc	[<L130+fs_0],Y
  4702 08:0A22: 85 03        	sta	<R0+2
  4703 08:0A24: A5 01        	lda	<R0
  4704 08:0A26: A0 2F 00     	ldy	#$2f
  4705 08:0A29: 97 0A        	sta	[<L130+fs_0],Y
  4706 08:0A2B: A5 03        	lda	<R0+2
  4707 08:0A2D: A0 31 00     	ldy	#$31
  4708 08:0A30: 97 0A        	sta	[<L130+fs_0],Y
  4709                        ;			disk_write(fs->pdrv, fs->win, fs
                    ->winsect, 1);
  4710                        	.line	1176
  4711 08:0A32: F4 01 00     	pea	#<$1
  4712 08:0A35: A0 31 00     	ldy	#$31
  4713 08:0A38: B7 0A        	lda	[<L130+fs_0],Y
  4714 08:0A3A: 48           	pha
  4715 08:0A3B: A0 2F 00     	ldy	#$2f
  4716 08:0A3E: B7 0A        	lda	[<L130+fs_0],Y
  4717 08:0A40: 48           	pha
  4718 08:0A41: 18           	clc
  4719 08:0A42: A9 33 00     	lda	#$33
  4720 08:0A45: 65 0A        	adc	<L130+fs_0
  4721 08:0A47: 85 01        	sta	<R0
  4722 08:0A49: A9 00 00     	lda	#$0
  4723 08:0A4C: 65 0C        	adc	<L130+fs_0+2
  4724 08:0A4E: 85 03        	sta	<R0+2
  4725 08:0A50: D4 03        	pei	<R0+2
  4726 08:0A52: D4 01        	pei	<R0
  4727 08:0A54: A0 01 00     	ldy	#$1
  4728 08:0A57: B7 0A        	lda	[<L130+fs_0],Y
  4729 08:0A59: 48           	pha
  4730 08:0A5A: 22 xx xx xx  	jsl	~~disk_write
  Mon Aug  9 2021 16:52                                                Page 97


  4731                        ;			fs->fsi_flag = 0;
  4732                        	.line	1177
  4733 08:0A5E: E2 20        	sep	#$20
  4734                        	longa	off
  4735 08:0A60: A9 00        	lda	#$0
  4736 08:0A62: A0 04 00     	ldy	#$4
  4737 08:0A65: 97 0A        	sta	[<L130+fs_0],Y
  4738 08:0A67: C2 20        	rep	#$20
  4739                        	longa	on
  4740                        ;		}
  4741                        	.line	1178
  4742                        ;		/* Make sure that no pending write proce
                    ss in the lower layer */
  4743                        ;		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) !
                    = RES_OK)
  4744                        L10045:
  4745                        	.line	1180
  4746                        ;			res = FR_DISK_ERR;
  4747 08:0A69: F4 00 00     	pea	#^$0
  4748 08:0A6C: F4 00 00     	pea	#<$0
  4749 08:0A6F: F4 00 00     	pea	#<$0
  4750 08:0A72: A0 01 00     	ldy	#$1
  4751 08:0A75: B7 0A        	lda	[<L130+fs_0],Y
  4752 08:0A77: 48           	pha
  4753 08:0A78: 22 xx xx xx  	jsl	~~disk_ioctl
  4754 08:0A7C: AA           	tax
  4755 08:0A7D: D0 03        	bne	L136
  4756 08:0A7F: 82 05 00     	brl	L10046
  4757                        L136:
  4758                        	.line	1181
  4759 08:0A82: A9 01 00     	lda	#$1
  4760 08:0A85: 85 05        	sta	<L131+res_1
  4761                        ;	}
  4762                        L10046:
  4763                        	.line	1182
  4764                        ;
  4765                        ;	return res;
  4766                        L10044:
  4767                        	.line	1184
  4768 08:0A87: A5 05        	lda	<L131+res_1
  4769                        L137:
  4770 08:0A89: A8           	tay
  4771 08:0A8A: A5 08        	lda	<L130+2
  4772 08:0A8C: 85 0C        	sta	<L130+2+4
  4773 08:0A8E: A5 07        	lda	<L130+1
  4774 08:0A90: 85 0B        	sta	<L130+1+4
  4775 08:0A92: 2B           	pld
  4776 08:0A93: 3B           	tsc
  4777 08:0A94: 18           	clc
  4778 08:0A95: 69 0A 00     	adc	#L130+4
  4779 08:0A98: 1B           	tcs
  4780 08:0A99: 98           	tya
  4781 08:0A9A: 6B           	rtl
  4782                        ;}
  4783                        	.line	1185
  4784                        	.endblock	1185
  4785             00000006   L130	equ	6
  4786             00000005   L131	equ	5
  Mon Aug  9 2021 16:52                                                Page 98


  4787 08:0A9B:              	ends
  4788                        	efunc
  4789                        	.endfunc	1185,5,6
  4790                        	.line	1185
  4791                        ;
  4792                        ;#endif
  4793                        ;
  4794                        ;/*-----------------------------------------------
                    ------------------------*/
  4795                        ;/* Get physical sector number from cluster number
                                            */
  4796                        ;/*-----------------------------------------------
                    ------------------------*/
  4797                        ;
  4798                        ;static LBA_t clst2sect( /* !=0:Sector number, 0:F
                    ailed (invalid cluster#) */
  4799                        ;FATFS* fs, /* Filesystem object */
  4800                        ;DWORD clst /* Cluster# to be converted */
  4801                        ;)
  4802                        ;{
  4803                        	.line	1193
  4804                        	.line	1197
  4805                        	FFDOS
  4806                        	func
  4807                        	.function	1197
  4808                        ~~clst2sect:
  4809                        	longa	on
  4810                        	longi	on
  4811 08:0A9B: 3B           	tsc
  4812 08:0A9C: 38           	sec
  4813 08:0A9D: E9 08 00     	sbc	#L138
  4814 08:0AA0: 1B           	tcs
  4815 08:0AA1: 0B           	phd
  4816 08:0AA2: 5B           	tcd
  4817             00000004   fs_0	set	4
  4818             00000008   clst_0	set	8
  4819                        	.block	1197
  4820                        ;	clst -= 2; /* Cluster number is origin from 2 */
  4821                        	.sym	fs,4,138,6,32,75
  4822                        	.sym	clst,8,18,6,32
  4823                        	.line	1198
  4824 08:0AA3: 18           	clc
  4825 08:0AA4: A9 FE FF     	lda	#$fffe
  4826 08:0AA7: 65 10        	adc	<L138+clst_0
  4827 08:0AA9: 85 10        	sta	<L138+clst_0
  4828 08:0AAB: A9 FF FF     	lda	#$ffff
  4829 08:0AAE: 65 12        	adc	<L138+clst_0+2
  4830 08:0AB0: 85 12        	sta	<L138+clst_0+2
  4831                        ;	if (clst >= fs->n_fatent - 2)
  4832                        	.line	1199
  4833                        ;		return 0; /* Is it invalid cluster numbe
                    r? */
  4834 08:0AB2: 18           	clc
  4835 08:0AB3: A9 FE FF     	lda	#$fffe
  4836 08:0AB6: A0 17 00     	ldy	#$17
  4837 08:0AB9: 77 0C        	adc	[<L138+fs_0],Y
  4838 08:0ABB: 85 01        	sta	<R0
  4839 08:0ABD: A9 FF FF     	lda	#$ffff
  Mon Aug  9 2021 16:52                                                Page 99


  4840 08:0AC0: A0 19 00     	ldy	#$19
  4841 08:0AC3: 77 0C        	adc	[<L138+fs_0],Y
  4842 08:0AC5: 85 03        	sta	<R0+2
  4843 08:0AC7: A5 10        	lda	<L138+clst_0
  4844 08:0AC9: C5 01        	cmp	<R0
  4845 08:0ACB: A5 12        	lda	<L138+clst_0+2
  4846 08:0ACD: E5 03        	sbc	<R0+2
  4847 08:0ACF: B0 03        	bcs	L141
  4848 08:0AD1: 82 19 00     	brl	L10047
  4849                        L141:
  4850                        	.line	1200
  4851 08:0AD4: A9 00 00     	lda	#$0
  4852 08:0AD7: AA           	tax
  4853 08:0AD8: A9 00 00     	lda	#$0
  4854                        L142:
  4855 08:0ADB: A8           	tay
  4856 08:0ADC: A5 0A        	lda	<L138+2
  4857 08:0ADE: 85 12        	sta	<L138+2+8
  4858 08:0AE0: A5 09        	lda	<L138+1
  4859 08:0AE2: 85 11        	sta	<L138+1+8
  4860 08:0AE4: 2B           	pld
  4861 08:0AE5: 3B           	tsc
  4862 08:0AE6: 18           	clc
  4863 08:0AE7: 69 10 00     	adc	#L138+8
  4864 08:0AEA: 1B           	tcs
  4865 08:0AEB: 98           	tya
  4866 08:0AEC: 6B           	rtl
  4867                        ;	return fs->database + (LBA_t) fs->csize * clst; 
                    /* Start sector number of the cluster */
  4868                        L10047:
  4869                        	.line	1201
  4870 08:0AED: A0 00 00     	ldy	#$0
  4871 08:0AF0: 5A           	phy
  4872 08:0AF1: A0 09 00     	ldy	#$9
  4873 08:0AF4: B7 0C        	lda	[<L138+fs_0],Y
  4874 08:0AF6: 7A           	ply
  4875 08:0AF7: 2A           	rol	A
  4876 08:0AF8: 6A           	ror	A
  4877 08:0AF9: 10 01        	bpl	L143
  4878 08:0AFB: 88           	dey
  4879                        L143:
  4880 08:0AFC: 85 01        	sta	<R0
  4881 08:0AFE: 84 03        	sty	<R0+2
  4882 08:0B00: D4 12        	pei	<L138+clst_0+2
  4883 08:0B02: D4 10        	pei	<L138+clst_0
  4884 08:0B04: D4 03        	pei	<R0+2
  4885 08:0B06: D4 01        	pei	<R0
  4886                        	xref	~~~lmul
  4887 08:0B08: 22 xx xx xx  	jsl	~~~lmul
  4888 08:0B0C: 85 01        	sta	<R0
  4889 08:0B0E: 86 03        	stx	<R0+2
  4890 08:0B10: 18           	clc
  4891 08:0B11: A5 01        	lda	<R0
  4892 08:0B13: A0 2B 00     	ldy	#$2b
  4893 08:0B16: 77 0C        	adc	[<L138+fs_0],Y
  4894 08:0B18: 85 05        	sta	<R1
  4895 08:0B1A: A5 03        	lda	<R0+2
  4896 08:0B1C: A0 2D 00     	ldy	#$2d
  Mon Aug  9 2021 16:52                                                Page 100


  4897 08:0B1F: 77 0C        	adc	[<L138+fs_0],Y
  4898 08:0B21: 85 07        	sta	<R1+2
  4899 08:0B23: A6 07        	ldx	<R1+2
  4900 08:0B25: A5 05        	lda	<R1
  4901 08:0B27: 82 B1 FF     	brl	L142
  4902                        ;}
  4903                        	.line	1202
  4904                        	.endblock	1202
  4905             00000008   L138	equ	8
  4906             00000009   L139	equ	9
  4907 08:0B2A:              	ends
  4908                        	efunc
  4909                        	.endfunc	1202,9,8
  4910                        	.line	1202
  4911                        ;
  4912                        ;/*-----------------------------------------------
                    ------------------------*/
  4913                        ;/* FAT access - Read value of a FAT entry        
                                            */
  4914                        ;/*-----------------------------------------------
                    ------------------------*/
  4915                        ;
  4916                        ;static DWORD get_fat( /* 0xFFFFFFFF:Disk error, 1
                    :Internal error, 2..0x7FFFFFFF:Cluster status */
  4917                        ;FFOBJID* obj, /* Corresponding object */
  4918                        ;DWORD clst /* Cluster number to get the value */
  4919                        ;)
  4920                        ;{
  4921                        	.line	1208
  4922                        	.line	1212
  4923                        	FFDOS
  4924                        	func
  4925                        	.function	1212
  4926                        ~~get_fat:
  4927                        	longa	on
  4928                        	longi	on
  4929 08:0B2A: 3B           	tsc
  4930 08:0B2B: 38           	sec
  4931 08:0B2C: E9 1E 00     	sbc	#L144
  4932 08:0B2F: 1B           	tcs
  4933 08:0B30: 0B           	phd
  4934 08:0B31: 5B           	tcd
  4935             00000004   obj_0	set	4
  4936             00000008   clst_0	set	8
  4937                        	.block	1212
  4938                        ;	UINT wc, bc;
  4939                        ;	DWORD val;
  4940                        ;	FATFS *fs = obj->fs;
  4941                        ;	WORD rv;
  4942                        ;	UCHAR *p;
  4943                        ;	//k_debug_long("get_fat::clst:",clst);
  4944                        ;
  4945                        ;	if (clst < 2 || clst >= fs->n_fatent)
  4946             00000000   wc_1	set	0
  4947             00000002   bc_1	set	2
  4948             00000004   val_1	set	4
  4949             00000008   fs_1	set	8
  4950             0000000C   rv_1	set	12
  Mon Aug  9 2021 16:52                                                Page 101


  4951             0000000E   p_1	set	14
  4952                        	.sym	wc,0,16,1,16
  4953                        	.sym	bc,2,16,1,16
  4954                        	.sym	val,4,18,1,32
  4955                        	.sym	fs,8,138,1,32,75
  4956                        	.sym	rv,12,5,1,16
  4957                        	.sym	p,14,142,1,32
  4958                        	.sym	obj,4,138,6,32,76
  4959                        	.sym	clst,8,18,6,32
  4960 08:0B32: A7 22        	lda	[<L144+obj_0]
  4961 08:0B34: 85 15        	sta	<L145+fs_1
  4962 08:0B36: A0 02 00     	ldy	#$2
  4963 08:0B39: B7 22        	lda	[<L144+obj_0],Y
  4964 08:0B3B: 85 17        	sta	<L145+fs_1+2
  4965                        	.line	1220
  4966                        ;	{ /* Check if in valid range */
  4967 08:0B3D: A5 26        	lda	<L144+clst_0
  4968 08:0B3F: C9 02 00     	cmp	#<$2
  4969 08:0B42: A5 28        	lda	<L144+clst_0+2
  4970 08:0B44: E9 00 00     	sbc	#^$2
  4971 08:0B47: B0 03        	bcs	L148
  4972 08:0B49: 82 13 00     	brl	L147
  4973                        L148:
  4974 08:0B4C: A5 26        	lda	<L144+clst_0
  4975 08:0B4E: A0 17 00     	ldy	#$17
  4976 08:0B51: D7 15        	cmp	[<L145+fs_1],Y
  4977 08:0B53: A5 28        	lda	<L144+clst_0+2
  4978 08:0B55: A0 19 00     	ldy	#$19
  4979 08:0B58: F7 15        	sbc	[<L145+fs_1],Y
  4980 08:0B5A: B0 03        	bcs	L149
  4981 08:0B5C: 82 0D 00     	brl	L10048
  4982                        L149:
  4983                        L147:
  4984                        	.line	1221
  4985                        ;		val = 1; /* Internal error */
  4986                        	.line	1222
  4987 08:0B5F: A9 01 00     	lda	#$1
  4988 08:0B62: 85 11        	sta	<L145+val_1
  4989 08:0B64: A9 00 00     	lda	#$0
  4990 08:0B67: 85 13        	sta	<L145+val_1+2
  4991                        ;
  4992                        ;	}
  4993                        	.line	1224
  4994                        ;	else
  4995 08:0B69: 82 18 02     	brl	L10049
  4996                        L10048:
  4997                        ;	{
  4998                        	.line	1226
  4999                        ;		val = 0xFFFFFFFF; /* Default value fails
                     on disk error */
  5000                        	.line	1227
  5001 08:0B6C: A9 FF FF     	lda	#$ffff
  5002 08:0B6F: 85 11        	sta	<L145+val_1
  5003 08:0B71: A9 FF FF     	lda	#$ffff
  5004 08:0B74: 85 13        	sta	<L145+val_1+2
  5005                        ;
  5006                        ;		////k_debug_long("get_fat::fs->fs_type:"
                    ,fs->fs_type);
  Mon Aug  9 2021 16:52                                                Page 102


  5007                        ;
  5008                        ;		switch (fs->fs_type)
  5009                        	.line	1231
  5010 08:0B76: A7 15        	lda	[<L145+fs_1]
  5011 08:0B78: 29 FF 00     	and	#$ff
  5012 08:0B7B: 82 F2 01     	brl	L10050
  5013                        ;		{
  5014                        	.line	1232
  5015                        ;		case FS_FAT12:
  5016                        	.line	1233
  5017                        L10052:
  5018                        ;			bc = (UINT) clst;
  5019                        	.line	1234
  5020 08:0B7E: A5 26        	lda	<L144+clst_0
  5021 08:0B80: 85 0F        	sta	<L145+bc_1
  5022                        ;			bc += bc / 2;
  5023                        	.line	1235
  5024 08:0B82: A5 0F        	lda	<L145+bc_1
  5025 08:0B84: 4A           	lsr	A
  5026 08:0B85: 85 01        	sta	<R0
  5027 08:0B87: 18           	clc
  5028 08:0B88: A5 01        	lda	<R0
  5029 08:0B8A: 65 0F        	adc	<L145+bc_1
  5030 08:0B8C: 85 0F        	sta	<L145+bc_1
  5031                        ;			if (move_window(fs, fs->fatbase 
                    + (bc / SS(fs))) != FR_OK)
  5032                        	.line	1236
  5033                        ;				break;
  5034 08:0B8E: A5 0F        	lda	<L145+bc_1
  5035 08:0B90: A2 09 00     	ldx	#<$9
  5036                        	xref	~~~lsr
  5037 08:0B93: 22 xx xx xx  	jsl	~~~lsr
  5038 08:0B97: 85 01        	sta	<R0
  5039 08:0B99: A5 01        	lda	<R0
  5040 08:0B9B: 85 01        	sta	<R0
  5041 08:0B9D: 64 03        	stz	<R0+2
  5042 08:0B9F: 18           	clc
  5043 08:0BA0: A5 01        	lda	<R0
  5044 08:0BA2: A0 23 00     	ldy	#$23
  5045 08:0BA5: 77 15        	adc	[<L145+fs_1],Y
  5046 08:0BA7: 85 05        	sta	<R1
  5047 08:0BA9: A5 03        	lda	<R0+2
  5048 08:0BAB: A0 25 00     	ldy	#$25
  5049 08:0BAE: 77 15        	adc	[<L145+fs_1],Y
  5050 08:0BB0: 85 07        	sta	<R1+2
  5051 08:0BB2: D4 07        	pei	<R1+2
  5052 08:0BB4: D4 05        	pei	<R1
  5053 08:0BB6: D4 17        	pei	<L145+fs_1+2
  5054 08:0BB8: D4 15        	pei	<L145+fs_1
  5055 08:0BBA: 22 97 08 08  	jsl	~~move_window
  5056 08:0BBE: AA           	tax
  5057 08:0BBF: F0 03        	beq	L150
  5058 08:0BC1: 82 C0 01     	brl	L10051
  5059                        L150:
  5060                        ;			wc = fs->win[bc++ % SS(fs)]; /* 
                    Get 1st byte of the entry */
  5061                        	.line	1238
  5062 08:0BC4: A5 0F        	lda	<L145+bc_1
  Mon Aug  9 2021 16:52                                                Page 103


  5063 08:0BC6: 29 FF 01     	and	#<$1ff
  5064 08:0BC9: 85 01        	sta	<R0
  5065 08:0BCB: 18           	clc
  5066 08:0BCC: A9 33 00     	lda	#$33
  5067 08:0BCF: 65 01        	adc	<R0
  5068 08:0BD1: 85 05        	sta	<R1
  5069 08:0BD3: A4 05        	ldy	<R1
  5070 08:0BD5: B7 15        	lda	[<L145+fs_1],Y
  5071 08:0BD7: 29 FF 00     	and	#$ff
  5072 08:0BDA: 85 0D        	sta	<L145+wc_1
  5073 08:0BDC: E6 0F        	inc	<L145+bc_1
  5074                        ;			if (move_window(fs, fs->fatbase 
                    + (bc / SS(fs))) != FR_OK)
  5075                        	.line	1239
  5076                        ;				break;
  5077 08:0BDE: A5 0F        	lda	<L145+bc_1
  5078 08:0BE0: A2 09 00     	ldx	#<$9
  5079                        	xref	~~~lsr
  5080 08:0BE3: 22 xx xx xx  	jsl	~~~lsr
  5081 08:0BE7: 85 01        	sta	<R0
  5082 08:0BE9: A5 01        	lda	<R0
  5083 08:0BEB: 85 01        	sta	<R0
  5084 08:0BED: 64 03        	stz	<R0+2
  5085 08:0BEF: 18           	clc
  5086 08:0BF0: A5 01        	lda	<R0
  5087 08:0BF2: A0 23 00     	ldy	#$23
  5088 08:0BF5: 77 15        	adc	[<L145+fs_1],Y
  5089 08:0BF7: 85 05        	sta	<R1
  5090 08:0BF9: A5 03        	lda	<R0+2
  5091 08:0BFB: A0 25 00     	ldy	#$25
  5092 08:0BFE: 77 15        	adc	[<L145+fs_1],Y
  5093 08:0C00: 85 07        	sta	<R1+2
  5094 08:0C02: D4 07        	pei	<R1+2
  5095 08:0C04: D4 05        	pei	<R1
  5096 08:0C06: D4 17        	pei	<L145+fs_1+2
  5097 08:0C08: D4 15        	pei	<L145+fs_1
  5098 08:0C0A: 22 97 08 08  	jsl	~~move_window
  5099 08:0C0E: AA           	tax
  5100 08:0C0F: F0 03        	beq	L151
  5101 08:0C11: 82 70 01     	brl	L10051
  5102                        L151:
  5103                        ;			wc |= fs->win[bc % SS(fs)] << 8;
                     /* Merge 2nd byte of the entry */
  5104                        	.line	1241
  5105 08:0C14: A5 0F        	lda	<L145+bc_1
  5106 08:0C16: 29 FF 01     	and	#<$1ff
  5107 08:0C19: 85 05        	sta	<R1
  5108 08:0C1B: 18           	clc
  5109 08:0C1C: A9 33 00     	lda	#$33
  5110 08:0C1F: 65 05        	adc	<R1
  5111 08:0C21: 85 09        	sta	<R2
  5112 08:0C23: A4 09        	ldy	<R2
  5113 08:0C25: B7 15        	lda	[<L145+fs_1],Y
  5114 08:0C27: 29 FF 00     	and	#$ff
  5115 08:0C2A: 85 05        	sta	<R1
  5116 08:0C2C: A5 05        	lda	<R1
  5117 08:0C2E: EB           	xba
  5118 08:0C2F: 29 00 FF     	and	#$ff00
  Mon Aug  9 2021 16:52                                                Page 104


  5119 08:0C32: 85 01        	sta	<R0
  5120 08:0C34: A5 01        	lda	<R0
  5121 08:0C36: 04 0D        	tsb	<L145+wc_1
  5122                        ;			val = (clst & 1) ? (wc >> 4) : (
                    wc & 0xFFF); /* Adjust bit position */
  5123                        	.line	1242
  5124 08:0C38: A5 26        	lda	<L144+clst_0
  5125 08:0C3A: 29 01 00     	and	#<$1
  5126 08:0C3D: D0 03        	bne	L153
  5127 08:0C3F: 82 0C 00     	brl	L152
  5128                        L153:
  5129 08:0C42: A5 0D        	lda	<L145+wc_1
  5130 08:0C44: 4A           	lsr	A
  5131 08:0C45: 4A           	lsr	A
  5132 08:0C46: 4A           	lsr	A
  5133 08:0C47: 4A           	lsr	A
  5134 08:0C48: 85 01        	sta	<R0
  5135 08:0C4A: A5 01        	lda	<R0
  5136 08:0C4C: 80 09        	bra	L154
  5137                        L152:
  5138 08:0C4E: A5 0D        	lda	<L145+wc_1
  5139 08:0C50: 29 FF 0F     	and	#<$fff
  5140 08:0C53: 85 01        	sta	<R0
  5141 08:0C55: A5 01        	lda	<R0
  5142                        L154:
  5143 08:0C57: 85 01        	sta	<R0
  5144 08:0C59: A5 01        	lda	<R0
  5145 08:0C5B: 85 11        	sta	<L145+val_1
  5146 08:0C5D: 64 13        	stz	<L145+val_1+2
  5147                        ;			break;
  5148                        	.line	1243
  5149 08:0C5F: 82 22 01     	brl	L10051
  5150                        ;
  5151                        ;		case FS_FAT16:
  5152                        	.line	1245
  5153                        L10053:
  5154                        ;			if (move_window(fs, fs->fatbase 
                    + (clst / (SS(fs) / 2))) != FR_OK)
  5155                        	.line	1246
  5156                        ;				break;
  5157 08:0C62: D4 28        	pei	<L144+clst_0+2
  5158 08:0C64: D4 26        	pei	<L144+clst_0
  5159 08:0C66: A9 08 00     	lda	#$8
  5160                        	xref	~~~llsr
  5161 08:0C69: 22 xx xx xx  	jsl	~~~llsr
  5162 08:0C6D: 85 01        	sta	<R0
  5163 08:0C6F: 86 03        	stx	<R0+2
  5164 08:0C71: 18           	clc
  5165 08:0C72: A5 01        	lda	<R0
  5166 08:0C74: A0 23 00     	ldy	#$23
  5167 08:0C77: 77 15        	adc	[<L145+fs_1],Y
  5168 08:0C79: 85 05        	sta	<R1
  5169 08:0C7B: A5 03        	lda	<R0+2
  5170 08:0C7D: A0 25 00     	ldy	#$25
  5171 08:0C80: 77 15        	adc	[<L145+fs_1],Y
  5172 08:0C82: 85 07        	sta	<R1+2
  5173 08:0C84: D4 07        	pei	<R1+2
  5174 08:0C86: D4 05        	pei	<R1
  Mon Aug  9 2021 16:52                                                Page 105


  5175 08:0C88: D4 17        	pei	<L145+fs_1+2
  5176 08:0C8A: D4 15        	pei	<L145+fs_1
  5177 08:0C8C: 22 97 08 08  	jsl	~~move_window
  5178 08:0C90: AA           	tax
  5179 08:0C91: F0 03        	beq	L155
  5180 08:0C93: 82 EE 00     	brl	L10051
  5181                        L155:
  5182                        ;
  5183                        ;			//k_debug_byte_array("fs->win:",
                    fs->win,512);
  5184                        ;
  5185                        ;			//k_debug_long("fs->win:offset:"
                    ,(clst * 2 % SS(fs)) );
  5186                        ;
  5187                        ;			//k_debug_byte_array("fs->win:",
                    (LPSTR)(fs->win + clst * 2 % SS(fs)),4);
  5188                        ;
  5189                        ;			val = ld_word(fs->win + clst * 2
                     % SS(fs)); /* Simple WORD array */
  5190                        	.line	1255
  5191 08:0C96: A5 26        	lda	<L144+clst_0
  5192 08:0C98: 85 01        	sta	<R0
  5193 08:0C9A: A5 28        	lda	<L144+clst_0+2
  5194 08:0C9C: 85 03        	sta	<R0+2
  5195 08:0C9E: 06 01        	asl	<R0
  5196 08:0CA0: 26 03        	rol	<R0+2
  5197 08:0CA2: A5 01        	lda	<R0
  5198 08:0CA4: 29 FF 01     	and	#<$1ff
  5199 08:0CA7: 85 05        	sta	<R1
  5200 08:0CA9: 64 07        	stz	<R1+2
  5201 08:0CAB: 18           	clc
  5202 08:0CAC: A9 33 00     	lda	#$33
  5203 08:0CAF: 65 05        	adc	<R1
  5204 08:0CB1: 85 01        	sta	<R0
  5205 08:0CB3: A9 00 00     	lda	#$0
  5206 08:0CB6: 65 07        	adc	<R1+2
  5207 08:0CB8: 85 03        	sta	<R0+2
  5208 08:0CBA: 18           	clc
  5209 08:0CBB: A5 15        	lda	<L145+fs_1
  5210 08:0CBD: 65 01        	adc	<R0
  5211 08:0CBF: 85 05        	sta	<R1
  5212 08:0CC1: A5 17        	lda	<L145+fs_1+2
  5213 08:0CC3: 65 03        	adc	<R0+2
  5214 08:0CC5: 85 07        	sta	<R1+2
  5215 08:0CC7: D4 07        	pei	<R1+2
  5216 08:0CC9: D4 05        	pei	<R1
  5217 08:0CCB: 22 00 00 08  	jsl	~~ld_word
  5218 08:0CCF: 85 09        	sta	<R2
  5219 08:0CD1: A0 00 00     	ldy	#$0
  5220 08:0CD4: A5 09        	lda	<R2
  5221 08:0CD6: 10 01        	bpl	L156
  5222 08:0CD8: 88           	dey
  5223                        L156:
  5224 08:0CD9: 85 11        	sta	<L145+val_1
  5225 08:0CDB: 84 13        	sty	<L145+val_1+2
  5226                        ;
  5227                        ;			/*
  5228                        ;			p = ((UCHAR*)((ULONG)fs->win + (
  Mon Aug  9 2021 16:52                                                Page 106


                    ULONG)clst * 2L % ((ULONG)SS(fs)) ));
  5229                        ;
  5230                        ;
  5231                        ;			rv = p[1];
  5232                        ;			//k_debug_integer("rv::1:", rv);
  5233                        ;			rv = rv << 8 | p[0];
  5234                        ;			//k_debug_integer("rv::2:", rv);
  5235                        ;
  5236                        ;			//////k_debug_integer("ld_word::
                    after:", rv);
  5237                        ;
  5238                        ;
  5239                        ;			val = ld_word((ULONG)fs->win + (
                    ULONG)clst * 2L % ((ULONG)SS(fs)) );
  5240                        ;
  5241                        ;			//val = (DWORD)(fs->win + clst *
                     2 % SS(fs));
  5242                        ;
  5243                        ;			////k_debug_long("get_fat::val:F
                    S_FAT16:fs->win+...:", (fs->win + clst * 2 % SS(fs)) );
  5244                        ;			////k_debug_long("get_fat::val:F
                    S_FAT16:ld_word:",ld_word(fs->win + clst * 2 % SS(fs)));
  5245                        ;			////k_debug_long("get_fat::val:F
                    S_FAT16:ld_dword:",ld_dword(fs->win + clst * 2 % SS(fs)));
  5246                        ;			*/
  5247                        ;
  5248                        ;			break;
  5249                        	.line	1278
  5250 08:0CDD: 82 A4 00     	brl	L10051
  5251                        ;
  5252                        ;		case FS_FAT32:
  5253                        	.line	1280
  5254                        L10054:
  5255                        ;			if (move_window(fs, fs->fatbase 
                    + (clst / (SS(fs) / 4))) != FR_OK)
  5256                        	.line	1281
  5257                        ;				break;
  5258 08:0CE0: D4 28        	pei	<L144+clst_0+2
  5259 08:0CE2: D4 26        	pei	<L144+clst_0
  5260 08:0CE4: A9 07 00     	lda	#$7
  5261                        	xref	~~~llsr
  5262 08:0CE7: 22 xx xx xx  	jsl	~~~llsr
  5263 08:0CEB: 85 01        	sta	<R0
  5264 08:0CED: 86 03        	stx	<R0+2
  5265 08:0CEF: 18           	clc
  5266 08:0CF0: A5 01        	lda	<R0
  5267 08:0CF2: A0 23 00     	ldy	#$23
  5268 08:0CF5: 77 15        	adc	[<L145+fs_1],Y
  5269 08:0CF7: 85 05        	sta	<R1
  5270 08:0CF9: A5 03        	lda	<R0+2
  5271 08:0CFB: A0 25 00     	ldy	#$25
  5272 08:0CFE: 77 15        	adc	[<L145+fs_1],Y
  5273 08:0D00: 85 07        	sta	<R1+2
  5274 08:0D02: D4 07        	pei	<R1+2
  5275 08:0D04: D4 05        	pei	<R1
  5276 08:0D06: D4 17        	pei	<L145+fs_1+2
  5277 08:0D08: D4 15        	pei	<L145+fs_1
  5278 08:0D0A: 22 97 08 08  	jsl	~~move_window
  Mon Aug  9 2021 16:52                                                Page 107


  5279 08:0D0E: AA           	tax
  5280 08:0D0F: F0 03        	beq	L157
  5281 08:0D11: 82 70 00     	brl	L10051
  5282                        L157:
  5283                        ;			val = ld_dword(fs->win + clst * 
                    4 % SS(fs)) & 0x0FFFFFFF; /* Simple DWORD array but mask out
                     upper 4 bits */
  5284                        	.line	1283
  5285 08:0D14: A5 26        	lda	<L144+clst_0
  5286 08:0D16: 85 01        	sta	<R0
  5287 08:0D18: A5 28        	lda	<L144+clst_0+2
  5288 08:0D1A: 85 03        	sta	<R0+2
  5289 08:0D1C: 06 01        	asl	<R0
  5290 08:0D1E: 26 03        	rol	<R0+2
  5291 08:0D20: 06 01        	asl	<R0
  5292 08:0D22: 26 03        	rol	<R0+2
  5293 08:0D24: A5 01        	lda	<R0
  5294 08:0D26: 29 FF 01     	and	#<$1ff
  5295 08:0D29: 85 05        	sta	<R1
  5296 08:0D2B: 64 07        	stz	<R1+2
  5297 08:0D2D: 18           	clc
  5298 08:0D2E: A9 33 00     	lda	#$33
  5299 08:0D31: 65 05        	adc	<R1
  5300 08:0D33: 85 01        	sta	<R0
  5301 08:0D35: A9 00 00     	lda	#$0
  5302 08:0D38: 65 07        	adc	<R1+2
  5303 08:0D3A: 85 03        	sta	<R0+2
  5304 08:0D3C: 18           	clc
  5305 08:0D3D: A5 15        	lda	<L145+fs_1
  5306 08:0D3F: 65 01        	adc	<R0
  5307 08:0D41: 85 05        	sta	<R1
  5308 08:0D43: A5 17        	lda	<L145+fs_1+2
  5309 08:0D45: 65 03        	adc	<R0+2
  5310 08:0D47: 85 07        	sta	<R1+2
  5311 08:0D49: D4 07        	pei	<R1+2
  5312 08:0D4B: D4 05        	pei	<R1
  5313 08:0D4D: 22 3B 00 08  	jsl	~~ld_dword
  5314 08:0D51: 85 09        	sta	<R2
  5315 08:0D53: 86 0B        	stx	<R2+2
  5316 08:0D55: A5 09        	lda	<R2
  5317 08:0D57: 85 11        	sta	<L145+val_1
  5318 08:0D59: A5 0B        	lda	<R2+2
  5319 08:0D5B: 29 FF 0F     	and	#^$fffffff
  5320 08:0D5E: 85 13        	sta	<L145+val_1+2
  5321                        ;			break;
  5322                        	.line	1284
  5323 08:0D60: 82 21 00     	brl	L10051
  5324                        ;#if FF_FS_EXFAT
  5325                        ;			case FS_EXFAT :
  5326                        ;			if ((obj->objsize != 0 && obj->s
                    clust != 0) || obj->stat == 0)
  5327                        ;			{ /* Object except root dir must
                     have valid data length */
  5328                        ;				DWORD cofs = clst - obj-
                    >sclust; /* Offset from start cluster */
  5329                        ;				DWORD clen = (DWORD)((LB
                    A_t)((obj->objsize - 1) / SS(fs)) / fs->csize); /* Number of
                     clusters - 1 */
  Mon Aug  9 2021 16:52                                                Page 108


  5330                        ;
  5331                        ;				if (obj->stat == 2 && co
                    fs <= clen)
  5332                        ;				{ /* Is it a contiguous 
                    chain? */
  5333                        ;					val = (cofs == c
                    len) ? 0x7FFFFFFF : clst + 1; /* No data on the FAT, generat
                    e the value */
  5334                        ;					break;
  5335                        ;				}
  5336                        ;				if (obj->stat == 3 && co
                    fs < obj->n_cont)
  5337                        ;				{ /* Is it in the 1st fr
                    agment? */
  5338                        ;					val = clst + 1; 
                    /* Generate the value */
  5339                        ;					break;
  5340                        ;				}
  5341                        ;				if (obj->stat != 2)
  5342                        ;				{ /* Get value from FAT 
                    if FAT chain is valid */
  5343                        ;					if (obj->n_frag 
                    != 0)
  5344                        ;					{ /* Is it on th
                    e growing edge? */
  5345                        ;						val = 0x
                    7FFFFFFF; /* Generate EOC */
  5346                        ;					}
  5347                        ;					else
  5348                        ;					{
  5349                        ;						if (move
                    _window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) b
                    reak;
  5350                        ;						val = ld
                    _dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
  5351                        ;					}
  5352                        ;					break;
  5353                        ;				}
  5354                        ;			}
  5355                        ;			/* go to default */
  5356                        ;#endif
  5357                        ;		default:
  5358                        	.line	1318
  5359                        L10055:
  5360                        ;			val = 1; /* Internal error */
  5361                        	.line	1319
  5362 08:0D63: A9 01 00     	lda	#$1
  5363 08:0D66: 85 11        	sta	<L145+val_1
  5364 08:0D68: A9 00 00     	lda	#$0
  5365 08:0D6B: 85 13        	sta	<L145+val_1+2
  5366                        ;		}
  5367                        	.line	1320
  5368 08:0D6D: 82 14 00     	brl	L10051
  5369                        L10050:
  5370                        	xref	~~~swt
  5371 08:0D70: 22 xx xx xx  	jsl	~~~swt
  5372 08:0D74: 03 00        	dw	3
  5373 08:0D76: 01 00        	dw	1
  Mon Aug  9 2021 16:52                                                Page 109


  5374 08:0D78: 7D 0B        	dw	L10052-1
  5375 08:0D7A: 02 00        	dw	2
  5376 08:0D7C: 61 0C        	dw	L10053-1
  5377 08:0D7E: 03 00        	dw	3
  5378 08:0D80: DF 0C        	dw	L10054-1
  5379 08:0D82: 62 0D        	dw	L10055-1
  5380                        L10051:
  5381                        ;	}
  5382                        	.line	1321
  5383                        L10049:
  5384                        ;
  5385                        ;	////k_debug_long("get_fat::val:",val);
  5386                        ;
  5387                        ;	return val;
  5388                        	.line	1325
  5389 08:0D84: A6 13        	ldx	<L145+val_1+2
  5390 08:0D86: A5 11        	lda	<L145+val_1
  5391                        L158:
  5392 08:0D88: A8           	tay
  5393 08:0D89: A5 20        	lda	<L144+2
  5394 08:0D8B: 85 28        	sta	<L144+2+8
  5395 08:0D8D: A5 1F        	lda	<L144+1
  5396 08:0D8F: 85 27        	sta	<L144+1+8
  5397 08:0D91: 2B           	pld
  5398 08:0D92: 3B           	tsc
  5399 08:0D93: 18           	clc
  5400 08:0D94: 69 26 00     	adc	#L144+8
  5401 08:0D97: 1B           	tcs
  5402 08:0D98: 98           	tya
  5403 08:0D99: 6B           	rtl
  5404                        ;}
  5405                        	.line	1326
  5406                        	.endblock	1326
  5407             0000001E   L144	equ	30
  5408             0000000D   L145	equ	13
  5409 08:0D9A:              	ends
  5410                        	efunc
  5411                        	.endfunc	1326,13,30
  5412                        	.line	1326
  5413                        ;
  5414                        ;#if !FF_FS_READONLY
  5415                        ;/*-----------------------------------------------
                    ------------------------*/
  5416                        ;/* FAT access - Change value of a FAT entry      
                                            */
  5417                        ;/*-----------------------------------------------
                    ------------------------*/
  5418                        ;
  5419                        ;static FRESULT put_fat( /* FR_OK(0):succeeded, !=
                    0:error */
  5420                        ;FATFS* fs, /* Corresponding filesystem object */
  5421                        ;DWORD clst, /* FAT index number (cluster number) 
                    to be changed */
  5422                        ;DWORD val /* New value to be set to the entry */
  5423                        ;)
  5424                        ;{
  5425                        	.line	1333
  5426                        	.line	1338
  Mon Aug  9 2021 16:52                                                Page 110


  5427                        	FFDOS
  5428                        	func
  5429                        	.function	1338
  5430                        ~~put_fat:
  5431                        	longa	on
  5432                        	longi	on
  5433 08:0D9A: 3B           	tsc
  5434 08:0D9B: 38           	sec
  5435 08:0D9C: E9 18 00     	sbc	#L159
  5436 08:0D9F: 1B           	tcs
  5437 08:0DA0: 0B           	phd
  5438 08:0DA1: 5B           	tcd
  5439             00000004   fs_0	set	4
  5440             00000008   clst_0	set	8
  5441             0000000C   val_0	set	12
  5442                        	.block	1338
  5443                        ;	UINT bc;
  5444                        ;	BYTE *p;
  5445                        ;	FRESULT res = FR_INT_ERR;
  5446                        ;
  5447                        ;	if (clst >= 2 && clst < fs->n_fatent)
  5448             00000000   bc_1	set	0
  5449             00000002   p_1	set	2
  5450             00000006   res_1	set	6
  5451                        	.sym	bc,0,16,1,16
  5452                        	.sym	p,2,142,1,32
  5453                        	.sym	res,6,5,1,16
  5454                        	.sym	fs,4,138,6,32,75
  5455                        	.sym	clst,8,18,6,32
  5456                        	.sym	val,12,18,6,32
  5457 08:0DA2: A9 02 00     	lda	#$2
  5458 08:0DA5: 85 17        	sta	<L160+res_1
  5459                        	.line	1343
  5460                        ;	{ /* Check if in valid range */
  5461 08:0DA7: A5 20        	lda	<L159+clst_0
  5462 08:0DA9: C9 02 00     	cmp	#<$2
  5463 08:0DAC: A5 22        	lda	<L159+clst_0+2
  5464 08:0DAE: E9 00 00     	sbc	#^$2
  5465 08:0DB1: B0 03        	bcs	L162
  5466 08:0DB3: 82 16 03     	brl	L10056
  5467                        L162:
  5468 08:0DB6: A5 20        	lda	<L159+clst_0
  5469 08:0DB8: A0 17 00     	ldy	#$17
  5470 08:0DBB: D7 1C        	cmp	[<L159+fs_0],Y
  5471 08:0DBD: A5 22        	lda	<L159+clst_0+2
  5472 08:0DBF: A0 19 00     	ldy	#$19
  5473 08:0DC2: F7 1C        	sbc	[<L159+fs_0],Y
  5474 08:0DC4: 90 03        	bcc	L163
  5475 08:0DC6: 82 03 03     	brl	L10056
  5476                        L163:
  5477                        	.line	1344
  5478                        ;		switch (fs->fs_type)
  5479                        	.line	1345
  5480 08:0DC9: A7 1C        	lda	[<L159+fs_0]
  5481 08:0DCB: 29 FF 00     	and	#$ff
  5482 08:0DCE: 82 E7 02     	brl	L10057
  5483                        ;		{
  5484                        	.line	1346
  Mon Aug  9 2021 16:52                                                Page 111


  5485                        ;		case FS_FAT12:
  5486                        	.line	1347
  5487                        L10059:
  5488                        ;			bc = (UINT) clst;
  5489                        	.line	1348
  5490 08:0DD1: A5 20        	lda	<L159+clst_0
  5491 08:0DD3: 85 11        	sta	<L160+bc_1
  5492                        ;			bc += bc / 2; /* bc: byte offset
                     of the entry */
  5493                        	.line	1349
  5494 08:0DD5: A5 11        	lda	<L160+bc_1
  5495 08:0DD7: 4A           	lsr	A
  5496 08:0DD8: 85 01        	sta	<R0
  5497 08:0DDA: 18           	clc
  5498 08:0DDB: A5 01        	lda	<R0
  5499 08:0DDD: 65 11        	adc	<L160+bc_1
  5500 08:0DDF: 85 11        	sta	<L160+bc_1
  5501                        ;			res = move_window(fs, fs->fatbas
                    e + (bc / SS(fs)));
  5502                        	.line	1350
  5503 08:0DE1: A5 11        	lda	<L160+bc_1
  5504 08:0DE3: A2 09 00     	ldx	#<$9
  5505                        	xref	~~~lsr
  5506 08:0DE6: 22 xx xx xx  	jsl	~~~lsr
  5507 08:0DEA: 85 01        	sta	<R0
  5508 08:0DEC: A5 01        	lda	<R0
  5509 08:0DEE: 85 01        	sta	<R0
  5510 08:0DF0: 64 03        	stz	<R0+2
  5511 08:0DF2: 18           	clc
  5512 08:0DF3: A5 01        	lda	<R0
  5513 08:0DF5: A0 23 00     	ldy	#$23
  5514 08:0DF8: 77 1C        	adc	[<L159+fs_0],Y
  5515 08:0DFA: 85 05        	sta	<R1
  5516 08:0DFC: A5 03        	lda	<R0+2
  5517 08:0DFE: A0 25 00     	ldy	#$25
  5518 08:0E01: 77 1C        	adc	[<L159+fs_0],Y
  5519 08:0E03: 85 07        	sta	<R1+2
  5520 08:0E05: D4 07        	pei	<R1+2
  5521 08:0E07: D4 05        	pei	<R1
  5522 08:0E09: D4 1E        	pei	<L159+fs_0+2
  5523 08:0E0B: D4 1C        	pei	<L159+fs_0
  5524 08:0E0D: 22 97 08 08  	jsl	~~move_window
  5525 08:0E11: 85 17        	sta	<L160+res_1
  5526                        ;			if (res != FR_OK)
  5527                        	.line	1351
  5528                        ;				break;
  5529 08:0E13: A5 17        	lda	<L160+res_1
  5530 08:0E15: F0 03        	beq	L164
  5531 08:0E17: 82 B2 02     	brl	L10058
  5532                        L164:
  5533                        ;			p = fs->win + bc++ % SS(fs);
  5534                        	.line	1353
  5535 08:0E1A: A5 11        	lda	<L160+bc_1
  5536 08:0E1C: 29 FF 01     	and	#<$1ff
  5537 08:0E1F: 85 01        	sta	<R0
  5538 08:0E21: A5 01        	lda	<R0
  5539 08:0E23: 85 01        	sta	<R0
  5540 08:0E25: 64 03        	stz	<R0+2
  Mon Aug  9 2021 16:52                                                Page 112


  5541 08:0E27: 18           	clc
  5542 08:0E28: A9 33 00     	lda	#$33
  5543 08:0E2B: 65 01        	adc	<R0
  5544 08:0E2D: 85 05        	sta	<R1
  5545 08:0E2F: A9 00 00     	lda	#$0
  5546 08:0E32: 65 03        	adc	<R0+2
  5547 08:0E34: 85 07        	sta	<R1+2
  5548 08:0E36: 18           	clc
  5549 08:0E37: A5 1C        	lda	<L159+fs_0
  5550 08:0E39: 65 05        	adc	<R1
  5551 08:0E3B: 85 13        	sta	<L160+p_1
  5552 08:0E3D: A5 1E        	lda	<L159+fs_0+2
  5553 08:0E3F: 65 07        	adc	<R1+2
  5554 08:0E41: 85 15        	sta	<L160+p_1+2
  5555 08:0E43: E6 11        	inc	<L160+bc_1
  5556                        ;			*p = (clst & 1) ? ((*p & 0x0F) |
                     ((BYTE) val << 4)) : (BYTE) val; /* Update 1st byte */
  5557                        	.line	1354
  5558 08:0E45: A5 20        	lda	<L159+clst_0
  5559 08:0E47: 29 01 00     	and	#<$1
  5560 08:0E4A: D0 03        	bne	L166
  5561 08:0E4C: 82 1C 00     	brl	L165
  5562                        L166:
  5563 08:0E4F: A7 13        	lda	[<L160+p_1]
  5564 08:0E51: 29 0F 00     	and	#<$f
  5565 08:0E54: 85 01        	sta	<R0
  5566 08:0E56: A5 24        	lda	<L159+val_0
  5567 08:0E58: 29 FF 00     	and	#$ff
  5568 08:0E5B: 85 09        	sta	<R2
  5569 08:0E5D: A5 09        	lda	<R2
  5570 08:0E5F: 0A           	asl	A
  5571 08:0E60: 0A           	asl	A
  5572 08:0E61: 0A           	asl	A
  5573 08:0E62: 0A           	asl	A
  5574 08:0E63: 85 05        	sta	<R1
  5575 08:0E65: A5 05        	lda	<R1
  5576 08:0E67: 05 01        	ora	<R0
  5577 08:0E69: 80 05        	bra	L167
  5578                        L165:
  5579 08:0E6B: A5 24        	lda	<L159+val_0
  5580 08:0E6D: 29 FF 00     	and	#$ff
  5581                        L167:
  5582 08:0E70: E2 20        	sep	#$20
  5583                        	longa	off
  5584 08:0E72: 87 13        	sta	[<L160+p_1]
  5585 08:0E74: C2 20        	rep	#$20
  5586                        	longa	on
  5587                        ;			fs->wflag = 1;
  5588                        	.line	1355
  5589 08:0E76: E2 20        	sep	#$20
  5590                        	longa	off
  5591 08:0E78: A9 01        	lda	#$1
  5592 08:0E7A: A0 03 00     	ldy	#$3
  5593 08:0E7D: 97 1C        	sta	[<L159+fs_0],Y
  5594 08:0E7F: C2 20        	rep	#$20
  5595                        	longa	on
  5596                        ;			res = move_window(fs, fs->fatbas
                    e + (bc / SS(fs)));
  Mon Aug  9 2021 16:52                                                Page 113


  5597                        	.line	1356
  5598 08:0E81: A5 11        	lda	<L160+bc_1
  5599 08:0E83: A2 09 00     	ldx	#<$9
  5600                        	xref	~~~lsr
  5601 08:0E86: 22 xx xx xx  	jsl	~~~lsr
  5602 08:0E8A: 85 01        	sta	<R0
  5603 08:0E8C: A5 01        	lda	<R0
  5604 08:0E8E: 85 01        	sta	<R0
  5605 08:0E90: 64 03        	stz	<R0+2
  5606 08:0E92: 18           	clc
  5607 08:0E93: A5 01        	lda	<R0
  5608 08:0E95: A0 23 00     	ldy	#$23
  5609 08:0E98: 77 1C        	adc	[<L159+fs_0],Y
  5610 08:0E9A: 85 05        	sta	<R1
  5611 08:0E9C: A5 03        	lda	<R0+2
  5612 08:0E9E: A0 25 00     	ldy	#$25
  5613 08:0EA1: 77 1C        	adc	[<L159+fs_0],Y
  5614 08:0EA3: 85 07        	sta	<R1+2
  5615 08:0EA5: D4 07        	pei	<R1+2
  5616 08:0EA7: D4 05        	pei	<R1
  5617 08:0EA9: D4 1E        	pei	<L159+fs_0+2
  5618 08:0EAB: D4 1C        	pei	<L159+fs_0
  5619 08:0EAD: 22 97 08 08  	jsl	~~move_window
  5620 08:0EB1: 85 17        	sta	<L160+res_1
  5621                        ;			if (res != FR_OK)
  5622                        	.line	1357
  5623                        ;				break;
  5624 08:0EB3: A5 17        	lda	<L160+res_1
  5625 08:0EB5: F0 03        	beq	L168
  5626 08:0EB7: 82 12 02     	brl	L10058
  5627                        L168:
  5628                        ;			p = fs->win + bc % SS(fs);
  5629                        	.line	1359
  5630 08:0EBA: A5 11        	lda	<L160+bc_1
  5631 08:0EBC: 29 FF 01     	and	#<$1ff
  5632 08:0EBF: 85 01        	sta	<R0
  5633 08:0EC1: A5 01        	lda	<R0
  5634 08:0EC3: 85 01        	sta	<R0
  5635 08:0EC5: 64 03        	stz	<R0+2
  5636 08:0EC7: 18           	clc
  5637 08:0EC8: A9 33 00     	lda	#$33
  5638 08:0ECB: 65 01        	adc	<R0
  5639 08:0ECD: 85 05        	sta	<R1
  5640 08:0ECF: A9 00 00     	lda	#$0
  5641 08:0ED2: 65 03        	adc	<R0+2
  5642 08:0ED4: 85 07        	sta	<R1+2
  5643 08:0ED6: 18           	clc
  5644 08:0ED7: A5 1C        	lda	<L159+fs_0
  5645 08:0ED9: 65 05        	adc	<R1
  5646 08:0EDB: 85 13        	sta	<L160+p_1
  5647 08:0EDD: A5 1E        	lda	<L159+fs_0+2
  5648 08:0EDF: 65 07        	adc	<R1+2
  5649 08:0EE1: 85 15        	sta	<L160+p_1+2
  5650                        ;			*p = (clst & 1) ?
  5651                        	.line	1360
  5652                        ;					(BYTE) (val >> 4
                    ) :
  5653                        ;					((*p & 0xF0) | (
  Mon Aug  9 2021 16:52                                                Page 114


                    (BYTE) (val >> 8) & 0x0F)); /* Update 2nd byte */
  5654 08:0EE3: A5 20        	lda	<L159+clst_0
  5655 08:0EE5: 29 01 00     	and	#<$1
  5656 08:0EE8: D0 03        	bne	L170
  5657 08:0EEA: 82 1F 00     	brl	L169
  5658                        L170:
  5659 08:0EED: A5 24        	lda	<L159+val_0
  5660 08:0EEF: 85 01        	sta	<R0
  5661 08:0EF1: A5 26        	lda	<L159+val_0+2
  5662 08:0EF3: 85 03        	sta	<R0+2
  5663 08:0EF5: 46 03        	lsr	<R0+2
  5664 08:0EF7: 66 01        	ror	<R0
  5665 08:0EF9: 46 03        	lsr	<R0+2
  5666 08:0EFB: 66 01        	ror	<R0
  5667 08:0EFD: 46 03        	lsr	<R0+2
  5668 08:0EFF: 66 01        	ror	<R0
  5669 08:0F01: 46 03        	lsr	<R0+2
  5670 08:0F03: 66 01        	ror	<R0
  5671 08:0F05: A5 01        	lda	<R0
  5672 08:0F07: 29 FF 00     	and	#$ff
  5673 08:0F0A: 80 21        	bra	L171
  5674                        L169:
  5675 08:0F0C: D4 26        	pei	<L159+val_0+2
  5676 08:0F0E: D4 24        	pei	<L159+val_0
  5677 08:0F10: A9 08 00     	lda	#$8
  5678                        	xref	~~~llsr
  5679 08:0F13: 22 xx xx xx  	jsl	~~~llsr
  5680 08:0F17: 85 01        	sta	<R0
  5681 08:0F19: 86 03        	stx	<R0+2
  5682 08:0F1B: A5 01        	lda	<R0
  5683 08:0F1D: 29 0F 00     	and	#<$f
  5684 08:0F20: 85 05        	sta	<R1
  5685 08:0F22: A7 13        	lda	[<L160+p_1]
  5686 08:0F24: 29 F0 00     	and	#<$f0
  5687 08:0F27: 85 01        	sta	<R0
  5688 08:0F29: A5 01        	lda	<R0
  5689 08:0F2B: 05 05        	ora	<R1
  5690                        L171:
  5691 08:0F2D: E2 20        	sep	#$20
  5692                        	longa	off
  5693 08:0F2F: 87 13        	sta	[<L160+p_1]
  5694 08:0F31: C2 20        	rep	#$20
  5695                        	longa	on
  5696                        ;			fs->wflag = 1;
  5697                        	.line	1363
  5698 08:0F33: E2 20        	sep	#$20
  5699                        	longa	off
  5700 08:0F35: A9 01        	lda	#$1
  5701 08:0F37: A0 03 00     	ldy	#$3
  5702 08:0F3A: 97 1C        	sta	[<L159+fs_0],Y
  5703 08:0F3C: C2 20        	rep	#$20
  5704                        	longa	on
  5705                        ;			break;
  5706                        	.line	1364
  5707 08:0F3E: 82 8B 01     	brl	L10058
  5708                        ;
  5709                        ;		case FS_FAT16:
  5710                        	.line	1366
  Mon Aug  9 2021 16:52                                                Page 115


  5711                        L10060:
  5712                        ;			res = move_window(fs, fs->fatbas
                    e + (clst / (SS(fs) / 2)));
  5713                        	.line	1367
  5714 08:0F41: D4 22        	pei	<L159+clst_0+2
  5715 08:0F43: D4 20        	pei	<L159+clst_0
  5716 08:0F45: A9 08 00     	lda	#$8
  5717                        	xref	~~~llsr
  5718 08:0F48: 22 xx xx xx  	jsl	~~~llsr
  5719 08:0F4C: 85 01        	sta	<R0
  5720 08:0F4E: 86 03        	stx	<R0+2
  5721 08:0F50: 18           	clc
  5722 08:0F51: A5 01        	lda	<R0
  5723 08:0F53: A0 23 00     	ldy	#$23
  5724 08:0F56: 77 1C        	adc	[<L159+fs_0],Y
  5725 08:0F58: 85 05        	sta	<R1
  5726 08:0F5A: A5 03        	lda	<R0+2
  5727 08:0F5C: A0 25 00     	ldy	#$25
  5728 08:0F5F: 77 1C        	adc	[<L159+fs_0],Y
  5729 08:0F61: 85 07        	sta	<R1+2
  5730 08:0F63: D4 07        	pei	<R1+2
  5731 08:0F65: D4 05        	pei	<R1
  5732 08:0F67: D4 1E        	pei	<L159+fs_0+2
  5733 08:0F69: D4 1C        	pei	<L159+fs_0
  5734 08:0F6B: 22 97 08 08  	jsl	~~move_window
  5735 08:0F6F: 85 17        	sta	<L160+res_1
  5736                        ;			if (res != FR_OK)
  5737                        	.line	1368
  5738                        ;				break;
  5739 08:0F71: A5 17        	lda	<L160+res_1
  5740 08:0F73: F0 03        	beq	L172
  5741 08:0F75: 82 54 01     	brl	L10058
  5742                        L172:
  5743                        ;			st_word(fs->win + clst * 2 % SS(
                    fs), (WORD) val); /* Simple WORD array */
  5744                        	.line	1370
  5745 08:0F78: D4 24        	pei	<L159+val_0
  5746 08:0F7A: A5 20        	lda	<L159+clst_0
  5747 08:0F7C: 85 01        	sta	<R0
  5748 08:0F7E: A5 22        	lda	<L159+clst_0+2
  5749 08:0F80: 85 03        	sta	<R0+2
  5750 08:0F82: 06 01        	asl	<R0
  5751 08:0F84: 26 03        	rol	<R0+2
  5752 08:0F86: A5 01        	lda	<R0
  5753 08:0F88: 29 FF 01     	and	#<$1ff
  5754 08:0F8B: 85 05        	sta	<R1
  5755 08:0F8D: 64 07        	stz	<R1+2
  5756 08:0F8F: 18           	clc
  5757 08:0F90: A9 33 00     	lda	#$33
  5758 08:0F93: 65 05        	adc	<R1
  5759 08:0F95: 85 01        	sta	<R0
  5760 08:0F97: A9 00 00     	lda	#$0
  5761 08:0F9A: 65 07        	adc	<R1+2
  5762 08:0F9C: 85 03        	sta	<R0+2
  5763 08:0F9E: 18           	clc
  5764 08:0F9F: A5 1C        	lda	<L159+fs_0
  5765 08:0FA1: 65 01        	adc	<R0
  5766 08:0FA3: 85 05        	sta	<R1
  Mon Aug  9 2021 16:52                                                Page 116


  5767 08:0FA5: A5 1E        	lda	<L159+fs_0+2
  5768 08:0FA7: 65 03        	adc	<R0+2
  5769 08:0FA9: 85 07        	sta	<R1+2
  5770 08:0FAB: D4 07        	pei	<R1+2
  5771 08:0FAD: D4 05        	pei	<R1
  5772 08:0FAF: 22 D7 00 08  	jsl	~~st_word
  5773                        ;			fs->wflag = 1;
  5774                        	.line	1371
  5775 08:0FB3: E2 20        	sep	#$20
  5776                        	longa	off
  5777 08:0FB5: A9 01        	lda	#$1
  5778 08:0FB7: A0 03 00     	ldy	#$3
  5779 08:0FBA: 97 1C        	sta	[<L159+fs_0],Y
  5780 08:0FBC: C2 20        	rep	#$20
  5781                        	longa	on
  5782                        ;			break;
  5783                        	.line	1372
  5784 08:0FBE: 82 0B 01     	brl	L10058
  5785                        ;
  5786                        ;		case FS_FAT32:
  5787                        	.line	1374
  5788                        L10061:
  5789                        ;#if FF_FS_EXFAT
  5790                        ;			case FS_EXFAT :
  5791                        ;#endif
  5792                        ;			res = move_window(fs, fs->fatbas
                    e + (clst / (SS(fs) / 4)));
  5793                        	.line	1378
  5794 08:0FC1: D4 22        	pei	<L159+clst_0+2
  5795 08:0FC3: D4 20        	pei	<L159+clst_0
  5796 08:0FC5: A9 07 00     	lda	#$7
  5797                        	xref	~~~llsr
  5798 08:0FC8: 22 xx xx xx  	jsl	~~~llsr
  5799 08:0FCC: 85 01        	sta	<R0
  5800 08:0FCE: 86 03        	stx	<R0+2
  5801 08:0FD0: 18           	clc
  5802 08:0FD1: A5 01        	lda	<R0
  5803 08:0FD3: A0 23 00     	ldy	#$23
  5804 08:0FD6: 77 1C        	adc	[<L159+fs_0],Y
  5805 08:0FD8: 85 05        	sta	<R1
  5806 08:0FDA: A5 03        	lda	<R0+2
  5807 08:0FDC: A0 25 00     	ldy	#$25
  5808 08:0FDF: 77 1C        	adc	[<L159+fs_0],Y
  5809 08:0FE1: 85 07        	sta	<R1+2
  5810 08:0FE3: D4 07        	pei	<R1+2
  5811 08:0FE5: D4 05        	pei	<R1
  5812 08:0FE7: D4 1E        	pei	<L159+fs_0+2
  5813 08:0FE9: D4 1C        	pei	<L159+fs_0
  5814 08:0FEB: 22 97 08 08  	jsl	~~move_window
  5815 08:0FEF: 85 17        	sta	<L160+res_1
  5816                        ;			if (res != FR_OK)
  5817                        	.line	1379
  5818                        ;				break;
  5819 08:0FF1: A5 17        	lda	<L160+res_1
  5820 08:0FF3: F0 03        	beq	L173
  5821 08:0FF5: 82 D4 00     	brl	L10058
  5822                        L173:
  5823                        ;			if (!FF_FS_EXFAT || fs->fs_type 
  Mon Aug  9 2021 16:52                                                Page 117


                    != FS_EXFAT)
  5824                        	.line	1381
  5825                        ;			{
  5826 08:0FF8: 82 0D 00     	brl	L174
  5827 08:0FFB: E2 20        	sep	#$20
  5828                        	longa	off
  5829 08:0FFD: A7 1C        	lda	[<L159+fs_0]
  5830 08:0FFF: C9 04        	cmp	#<$4
  5831 08:1001: C2 20        	rep	#$20
  5832                        	longa	on
  5833 08:1003: D0 03        	bne	L175
  5834 08:1005: 82 61 00     	brl	L10062
  5835                        L175:
  5836                        L174:
  5837                        	.line	1382
  5838                        ;				val = (val & 0x0FFFFFFF)
  5839                        	.line	1383
  5840                        ;						| (ld_dw
                    ord(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
  5841 08:1008: A5 20        	lda	<L159+clst_0
  5842 08:100A: 85 01        	sta	<R0
  5843 08:100C: A5 22        	lda	<L159+clst_0+2
  5844 08:100E: 85 03        	sta	<R0+2
  5845 08:1010: 06 01        	asl	<R0
  5846 08:1012: 26 03        	rol	<R0+2
  5847 08:1014: 06 01        	asl	<R0
  5848 08:1016: 26 03        	rol	<R0+2
  5849 08:1018: A5 01        	lda	<R0
  5850 08:101A: 29 FF 01     	and	#<$1ff
  5851 08:101D: 85 05        	sta	<R1
  5852 08:101F: 64 07        	stz	<R1+2
  5853 08:1021: 18           	clc
  5854 08:1022: A9 33 00     	lda	#$33
  5855 08:1025: 65 05        	adc	<R1
  5856 08:1027: 85 01        	sta	<R0
  5857 08:1029: A9 00 00     	lda	#$0
  5858 08:102C: 65 07        	adc	<R1+2
  5859 08:102E: 85 03        	sta	<R0+2
  5860 08:1030: 18           	clc
  5861 08:1031: A5 1C        	lda	<L159+fs_0
  5862 08:1033: 65 01        	adc	<R0
  5863 08:1035: 85 05        	sta	<R1
  5864 08:1037: A5 1E        	lda	<L159+fs_0+2
  5865 08:1039: 65 03        	adc	<R0+2
  5866 08:103B: 85 07        	sta	<R1+2
  5867 08:103D: D4 07        	pei	<R1+2
  5868 08:103F: D4 05        	pei	<R1
  5869 08:1041: 22 3B 00 08  	jsl	~~ld_dword
  5870 08:1045: 85 09        	sta	<R2
  5871 08:1047: 86 0B        	stx	<R2+2
  5872 08:1049: 64 0D        	stz	<R3
  5873 08:104B: A5 0B        	lda	<R2+2
  5874 08:104D: 29 00 F0     	and	#^$f0000000
  5875 08:1050: 85 0F        	sta	<R3+2
  5876 08:1052: A5 24        	lda	<L159+val_0
  5877 08:1054: 85 09        	sta	<R2
  5878 08:1056: A5 26        	lda	<L159+val_0+2
  5879 08:1058: 29 FF 0F     	and	#^$fffffff
  Mon Aug  9 2021 16:52                                                Page 118


  5880 08:105B: 85 0B        	sta	<R2+2
  5881 08:105D: A5 09        	lda	<R2
  5882 08:105F: 05 0D        	ora	<R3
  5883 08:1061: 85 24        	sta	<L159+val_0
  5884 08:1063: A5 0B        	lda	<R2+2
  5885 08:1065: 05 0F        	ora	<R3+2
  5886 08:1067: 85 26        	sta	<L159+val_0+2
  5887                        ;			}
  5888                        	.line	1385
  5889                        ;			st_dword(fs->win + clst * 4 % SS
                    (fs), val);
  5890                        L10062:
  5891                        	.line	1386
  5892 08:1069: D4 26        	pei	<L159+val_0+2
  5893 08:106B: D4 24        	pei	<L159+val_0
  5894 08:106D: A5 20        	lda	<L159+clst_0
  5895 08:106F: 85 01        	sta	<R0
  5896 08:1071: A5 22        	lda	<L159+clst_0+2
  5897 08:1073: 85 03        	sta	<R0+2
  5898 08:1075: 06 01        	asl	<R0
  5899 08:1077: 26 03        	rol	<R0+2
  5900 08:1079: 06 01        	asl	<R0
  5901 08:107B: 26 03        	rol	<R0+2
  5902 08:107D: A5 01        	lda	<R0
  5903 08:107F: 29 FF 01     	and	#<$1ff
  5904 08:1082: 85 05        	sta	<R1
  5905 08:1084: 64 07        	stz	<R1+2
  5906 08:1086: 18           	clc
  5907 08:1087: A9 33 00     	lda	#$33
  5908 08:108A: 65 05        	adc	<R1
  5909 08:108C: 85 01        	sta	<R0
  5910 08:108E: A9 00 00     	lda	#$0
  5911 08:1091: 65 07        	adc	<R1+2
  5912 08:1093: 85 03        	sta	<R0+2
  5913 08:1095: 18           	clc
  5914 08:1096: A5 1C        	lda	<L159+fs_0
  5915 08:1098: 65 01        	adc	<R0
  5916 08:109A: 85 05        	sta	<R1
  5917 08:109C: A5 1E        	lda	<L159+fs_0+2
  5918 08:109E: 65 03        	adc	<R0+2
  5919 08:10A0: 85 07        	sta	<R1+2
  5920 08:10A2: D4 07        	pei	<R1+2
  5921 08:10A4: D4 05        	pei	<R1
  5922 08:10A6: 22 16 01 08  	jsl	~~st_dword
  5923                        ;			fs->wflag = 1;
  5924                        	.line	1387
  5925 08:10AA: E2 20        	sep	#$20
  5926                        	longa	off
  5927 08:10AC: A9 01        	lda	#$1
  5928 08:10AE: A0 03 00     	ldy	#$3
  5929 08:10B1: 97 1C        	sta	[<L159+fs_0],Y
  5930 08:10B3: C2 20        	rep	#$20
  5931                        	longa	on
  5932                        ;			break;
  5933                        	.line	1388
  5934 08:10B5: 82 14 00     	brl	L10058
  5935                        ;		}
  5936                        	.line	1389
  Mon Aug  9 2021 16:52                                                Page 119


  5937                        L10057:
  5938                        	xref	~~~swt
  5939 08:10B8: 22 xx xx xx  	jsl	~~~swt
  5940 08:10BC: 03 00        	dw	3
  5941 08:10BE: 01 00        	dw	1
  5942 08:10C0: D0 0D        	dw	L10059-1
  5943 08:10C2: 02 00        	dw	2
  5944 08:10C4: 40 0F        	dw	L10060-1
  5945 08:10C6: 03 00        	dw	3
  5946 08:10C8: C0 0F        	dw	L10061-1
  5947 08:10CA: CB 10        	dw	L10058-1
  5948                        L10058:
  5949                        ;	}
  5950                        	.line	1390
  5951                        ;	return res;
  5952                        L10056:
  5953                        	.line	1391
  5954 08:10CC: A5 17        	lda	<L160+res_1
  5955                        L176:
  5956 08:10CE: A8           	tay
  5957 08:10CF: A5 1A        	lda	<L159+2
  5958 08:10D1: 85 26        	sta	<L159+2+12
  5959 08:10D3: A5 19        	lda	<L159+1
  5960 08:10D5: 85 25        	sta	<L159+1+12
  5961 08:10D7: 2B           	pld
  5962 08:10D8: 3B           	tsc
  5963 08:10D9: 18           	clc
  5964 08:10DA: 69 24 00     	adc	#L159+12
  5965 08:10DD: 1B           	tcs
  5966 08:10DE: 98           	tya
  5967 08:10DF: 6B           	rtl
  5968                        ;}
  5969                        	.line	1392
  5970                        	.endblock	1392
  5971             00000018   L159	equ	24
  5972             00000011   L160	equ	17
  5973 08:10E0:              	ends
  5974                        	efunc
  5975                        	.endfunc	1392,17,24
  5976                        	.line	1392
  5977                        ;
  5978                        ;#endif /* !FF_FS_READONLY */
  5979                        ;
  5980                        ;#if FF_FS_EXFAT && !FF_FS_READONLY
  5981                        ;/*-----------------------------------------------
                    ------------------------*/
  5982                        ;/* exFAT: Accessing FAT and Allocation Bitmap    
                                            */
  5983                        ;/*-----------------------------------------------
                    ------------------------*/
  5984                        ;
  5985                        ;/*--------------------------------------*/
  5986                        ;/* Find a contiguous free cluster block */
  5987                        ;/*--------------------------------------*/
  5988                        ;
  5989                        ;static DWORD find_bitmap ( /* 0:Not found, 2..:Cl
                    uster block found, 0xFFFFFFFF:Disk error */
  5990                        ;		FATFS* fs, /* Filesystem object */
  Mon Aug  9 2021 16:52                                                Page 120


  5991                        ;		DWORD clst, /* Cluster number to scan fr
                    om */
  5992                        ;		DWORD ncl /* Number of contiguous cluste
                    rs to find (1..) */
  5993                        ;)
  5994                        ;{
  5995                        ;	BYTE bm, bv;
  5996                        ;	UINT i;
  5997                        ;	DWORD val, scl, ctr;
  5998                        ;
  5999                        ;	clst -= 2; /* The first bit in the bitmap corres
                    ponds to cluster #2 */
  6000                        ;	if (clst >= fs->n_fatent - 2) clst = 0;
  6001                        ;	scl = val = clst; ctr = 0;
  6002                        ;	for (;;)
  6003                        ;	{
  6004                        ;		if (move_window(fs, fs->bitbase + val / 
                    8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
  6005                        ;		i = val / 8 % SS(fs); bm = 1 << (val % 8
                    );
  6006                        ;		do
  6007                        ;		{
  6008                        ;			do
  6009                        ;			{
  6010                        ;				bv = fs->win[i] & bm; bm
                     <<= 1; /* Get bit value */
  6011                        ;				if (++val >= fs->n_faten
                    t - 2)
  6012                        ;				{ /* Next cluster (with 
                    wrap-around) */
  6013                        ;					val = 0; bm = 0;
                     i = SS(fs);
  6014                        ;				}
  6015                        ;				if (bv == 0)
  6016                        ;				{ /* Is it a free cluste
                    r? */
  6017                        ;					if (++ctr == ncl
                    ) return scl + 2; /* Check if run length is sufficient for r
                    equired */
  6018                        ;				}
  6019                        ;				else
  6020                        ;				{
  6021                        ;					scl = val; ctr =
                     0; /* Encountered a cluster in-use, restart to scan */
  6022                        ;				}
  6023                        ;				if (val == clst) return 
                    0; /* All cluster scanned? */
  6024                        ;			}while (bm != 0);
  6025                        ;			bm = 1;
  6026                        ;		}while (++i < SS(fs));
  6027                        ;	}
  6028                        ;}
  6029                        ;
  6030                        ;/*----------------------------------------*/
  6031                        ;/* Set/Clear a block of allocation bitmap */
  6032                        ;/*----------------------------------------*/
  6033                        ;
  6034                        ;static FRESULT change_bitmap (
  Mon Aug  9 2021 16:52                                                Page 121


  6035                        ;		FATFS* fs, /* Filesystem object */
  6036                        ;		DWORD clst, /* Cluster number to change 
                    from */
  6037                        ;		DWORD ncl, /* Number of clusters to be c
                    hanged */
  6038                        ;		int bv /* bit value to be set (0 or 1) *
                    /
  6039                        ;)
  6040                        ;{
  6041                        ;	BYTE bm;
  6042                        ;	UINT i;
  6043                        ;	LBA_t sect;
  6044                        ;
  6045                        ;	clst -= 2; /* The first bit corresponds to clust
                    er #2 */
  6046                        ;	sect = fs->bitbase + clst / 8 / SS(fs); /* Secto
                    r address */
  6047                        ;	i = clst / 8 % SS(fs); /* Byte offset in the sec
                    tor */
  6048                        ;	bm = 1 << (clst % 8); /* Bit mask in the byte */
  6049                        ;	for (;;)
  6050                        ;	{
  6051                        ;		if (move_window(fs, sect++) != FR_OK) re
                    turn FR_DISK_ERR;
  6052                        ;		do
  6053                        ;		{
  6054                        ;			do
  6055                        ;			{
  6056                        ;				if (bv == (int)((fs->win
                    [i] & bm) != 0)) return FR_INT_ERR; /* Is the bit expected v
                    alue? */
  6057                        ;				fs->win[i] ^= bm; /* Fli
                    p the bit */
  6058                        ;				fs->wflag = 1;
  6059                        ;				if (--ncl == 0) return F
                    R_OK; /* All bits processed? */
  6060                        ;			}while (bm <<= 1); /* Next bit *
                    /
  6061                        ;			bm = 1;
  6062                        ;		}while (++i < SS(fs)); /* Next byte */
  6063                        ;		i = 0;
  6064                        ;	}
  6065                        ;}
  6066                        ;
  6067                        ;/*---------------------------------------------*/
  6068                        ;/* Fill the first fragment of the FAT chain    */
  6069                        ;/*---------------------------------------------*/
  6070                        ;
  6071                        ;static FRESULT fill_first_frag (
  6072                        ;		FFOBJID* obj /* Pointer to the correspon
                    ding object */
  6073                        ;)
  6074                        ;{
  6075                        ;	FRESULT res;
  6076                        ;	DWORD cl, n;
  6077                        ;
  6078                        ;	if (obj->stat == 3)
  6079                        ;	{ /* Has the object been changed 'fragmented' in
  Mon Aug  9 2021 16:52                                                Page 122


                     this session? */
  6080                        ;		for (cl = obj->sclust, n = obj->n_cont; 
                    n; cl++, n--)
  6081                        ;		{ /* Create cluster chain on the FAT */
  6082                        ;			res = put_fat(obj->fs, cl, cl + 
                    1);
  6083                        ;			if (res != FR_OK) return res;
  6084                        ;		}
  6085                        ;		obj->stat = 0; /* Change status 'FAT cha
                    in is valid' */
  6086                        ;	}
  6087                        ;	return FR_OK;
  6088                        ;}
  6089                        ;
  6090                        ;/*---------------------------------------------*/
  6091                        ;/* Fill the last fragment of the FAT chain     */
  6092                        ;/*---------------------------------------------*/
  6093                        ;
  6094                        ;static FRESULT fill_last_frag (
  6095                        ;		FFOBJID* obj, /* Pointer to the correspo
                    nding object */
  6096                        ;		DWORD lcl, /* Last cluster of the fragme
                    nt */
  6097                        ;		DWORD term /* Value to set the last FAT 
                    entry */
  6098                        ;)
  6099                        ;{
  6100                        ;	FRESULT res;
  6101                        ;
  6102                        ;	while (obj->n_frag > 0)
  6103                        ;	{ /* Create the chain of last fragment */
  6104                        ;		res = put_fat(obj->fs, lcl - obj->n_frag
                     + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
  6105                        ;		if (res != FR_OK) return res;
  6106                        ;		obj->n_frag--;
  6107                        ;	}
  6108                        ;	return FR_OK;
  6109                        ;}
  6110                        ;
  6111                        ;#endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
  6112                        ;
  6113                        ;#if !FF_FS_READONLY
  6114                        ;/*-----------------------------------------------
                    ------------------------*/
  6115                        ;/* FAT handling - Remove a cluster chain         
                                            */
  6116                        ;/*-----------------------------------------------
                    ------------------------*/
  6117                        ;
  6118                        ;static FRESULT remove_chain( /* FR_OK(0):succeede
                    d, !=0:error */
  6119                        ;FFOBJID* obj, /* Corresponding object */
  6120                        ;DWORD clst, /* Cluster to remove a chain from */
  6121                        ;DWORD pclst /* Previous cluster of clst (0 if ent
                    ire chain) */
  6122                        ;)
  6123                        ;{
  6124                        	.line	1534
  Mon Aug  9 2021 16:52                                                Page 123


  6125                        	.line	1539
  6126                        	FFDOS
  6127                        	func
  6128                        	.function	1539
  6129                        ~~remove_chain:
  6130                        	longa	on
  6131                        	longi	on
  6132 08:10E0: 3B           	tsc
  6133 08:10E1: 38           	sec
  6134 08:10E2: E9 0E 00     	sbc	#L177
  6135 08:10E5: 1B           	tcs
  6136 08:10E6: 0B           	phd
  6137 08:10E7: 5B           	tcd
  6138             00000004   obj_0	set	4
  6139             00000008   clst_0	set	8
  6140             0000000C   pclst_0	set	12
  6141                        	.block	1539
  6142                        ;	FRESULT res = FR_OK;
  6143                        ;	DWORD nxt;
  6144                        ;	FATFS *fs = obj->fs;
  6145                        ;#if FF_FS_EXFAT || FF_USE_TRIM
  6146                        ;	DWORD scl = clst, ecl = clst;
  6147                        ;#endif
  6148                        ;#if FF_USE_TRIM
  6149                        ;	LBA_t rt[2];
  6150                        ;#endif
  6151                        ;
  6152                        ;	if (clst < 2 || clst >= fs->n_fatent)
  6153             00000000   res_1	set	0
  6154             00000002   nxt_1	set	2
  6155             00000006   fs_1	set	6
  6156                        	.sym	res,0,5,1,16
  6157                        	.sym	nxt,2,18,1,32
  6158                        	.sym	fs,6,138,1,32,75
  6159                        	.sym	obj,4,138,6,32,76
  6160                        	.sym	clst,8,18,6,32
  6161                        	.sym	pclst,12,18,6,32
  6162 08:10E8: 64 05        	stz	<L178+res_1
  6163 08:10EA: A7 12        	lda	[<L177+obj_0]
  6164 08:10EC: 85 0B        	sta	<L178+fs_1
  6165 08:10EE: A0 02 00     	ldy	#$2
  6166 08:10F1: B7 12        	lda	[<L177+obj_0],Y
  6167 08:10F3: 85 0D        	sta	<L178+fs_1+2
  6168                        	.line	1550
  6169                        ;		return FR_INT_ERR; /* Check if in valid 
                    range */
  6170 08:10F5: A5 16        	lda	<L177+clst_0
  6171 08:10F7: C9 02 00     	cmp	#<$2
  6172 08:10FA: A5 18        	lda	<L177+clst_0+2
  6173 08:10FC: E9 00 00     	sbc	#^$2
  6174 08:10FF: B0 03        	bcs	L181
  6175 08:1101: 82 13 00     	brl	L180
  6176                        L181:
  6177 08:1104: A5 16        	lda	<L177+clst_0
  6178 08:1106: A0 17 00     	ldy	#$17
  6179 08:1109: D7 0B        	cmp	[<L178+fs_1],Y
  6180 08:110B: A5 18        	lda	<L177+clst_0+2
  6181 08:110D: A0 19 00     	ldy	#$19
  Mon Aug  9 2021 16:52                                                Page 124


  6182 08:1110: F7 0B        	sbc	[<L178+fs_1],Y
  6183 08:1112: B0 03        	bcs	L182
  6184 08:1114: 82 15 00     	brl	L10063
  6185                        L182:
  6186                        L180:
  6187                        	.line	1551
  6188 08:1117: A9 02 00     	lda	#$2
  6189                        L183:
  6190 08:111A: A8           	tay
  6191 08:111B: A5 10        	lda	<L177+2
  6192 08:111D: 85 1C        	sta	<L177+2+12
  6193 08:111F: A5 0F        	lda	<L177+1
  6194 08:1121: 85 1B        	sta	<L177+1+12
  6195 08:1123: 2B           	pld
  6196 08:1124: 3B           	tsc
  6197 08:1125: 18           	clc
  6198 08:1126: 69 1A 00     	adc	#L177+12
  6199 08:1129: 1B           	tcs
  6200 08:112A: 98           	tya
  6201 08:112B: 6B           	rtl
  6202                        ;
  6203                        ;	/* Mark the previous cluster 'EOC' on the FAT if
                     it exists */
  6204                        ;	if (pclst != 0
  6205                        L10063:
  6206                        	.line	1554
  6207                        ;			&& (!FF_FS_EXFAT || fs->fs_type 
                    != FS_EXFAT || obj->stat != 2))
  6208                        ;	{
  6209 08:112C: A5 1A        	lda	<L177+pclst_0
  6210 08:112E: 05 1C        	ora	<L177+pclst_0+2
  6211 08:1130: D0 03        	bne	L184
  6212 08:1132: 82 40 00     	brl	L10064
  6213                        L184:
  6214 08:1135: 82 1D 00     	brl	L185
  6215 08:1138: E2 20        	sep	#$20
  6216                        	longa	off
  6217 08:113A: A7 0B        	lda	[<L178+fs_1]
  6218 08:113C: C9 04        	cmp	#<$4
  6219 08:113E: C2 20        	rep	#$20
  6220                        	longa	on
  6221 08:1140: F0 03        	beq	L186
  6222 08:1142: 82 10 00     	brl	L185
  6223                        L186:
  6224 08:1145: E2 20        	sep	#$20
  6225                        	longa	off
  6226 08:1147: A0 07 00     	ldy	#$7
  6227 08:114A: B7 12        	lda	[<L177+obj_0],Y
  6228 08:114C: C9 02        	cmp	#<$2
  6229 08:114E: C2 20        	rep	#$20
  6230                        	longa	on
  6231 08:1150: D0 03        	bne	L187
  6232 08:1152: 82 20 00     	brl	L10064
  6233                        L187:
  6234                        L185:
  6235                        	.line	1556
  6236                        ;		res = put_fat(fs, pclst, 0xFFFFFFFF);
  6237                        	.line	1557
  Mon Aug  9 2021 16:52                                                Page 125


  6238 08:1155: F4 FF FF     	pea	#^$ffffffff
  6239 08:1158: F4 FF FF     	pea	#<$ffffffff
  6240 08:115B: D4 1C        	pei	<L177+pclst_0+2
  6241 08:115D: D4 1A        	pei	<L177+pclst_0
  6242 08:115F: D4 0D        	pei	<L178+fs_1+2
  6243 08:1161: D4 0B        	pei	<L178+fs_1
  6244 08:1163: 22 9A 0D 08  	jsl	~~put_fat
  6245 08:1167: 85 05        	sta	<L178+res_1
  6246                        ;		if (res != FR_OK)
  6247                        	.line	1558
  6248                        ;			return res;
  6249 08:1169: A5 05        	lda	<L178+res_1
  6250 08:116B: D0 03        	bne	L188
  6251 08:116D: 82 05 00     	brl	L10065
  6252                        L188:
  6253                        	.line	1559
  6254 08:1170: A5 05        	lda	<L178+res_1
  6255 08:1172: 82 A5 FF     	brl	L183
  6256                        ;	}
  6257                        L10065:
  6258                        	.line	1560
  6259                        ;
  6260                        ;	/* Remove the chain */
  6261                        ;	do
  6262                        L10064:
  6263                        	.line	1563
  6264                        L10068:
  6265                        ;	{
  6266                        	.line	1564
  6267                        ;		nxt = get_fat(obj, clst); /* Get cluster
                     status */
  6268                        	.line	1565
  6269 08:1175: D4 18        	pei	<L177+clst_0+2
  6270 08:1177: D4 16        	pei	<L177+clst_0
  6271 08:1179: D4 14        	pei	<L177+obj_0+2
  6272 08:117B: D4 12        	pei	<L177+obj_0
  6273 08:117D: 22 2A 0B 08  	jsl	~~get_fat
  6274 08:1181: 85 07        	sta	<L178+nxt_1
  6275 08:1183: 86 09        	stx	<L178+nxt_1+2
  6276                        ;		if (nxt == 0)
  6277                        	.line	1566
  6278                        ;			break; /* Empty cluster? */
  6279 08:1185: A5 07        	lda	<L178+nxt_1
  6280 08:1187: 05 09        	ora	<L178+nxt_1+2
  6281 08:1189: D0 03        	bne	L189
  6282 08:118B: 82 D5 00     	brl	L10067
  6283                        L189:
  6284                        ;		if (nxt == 1)
  6285                        	.line	1568
  6286                        ;			return FR_INT_ERR; /* Internal e
                    rror? */
  6287 08:118E: A5 07        	lda	<L178+nxt_1
  6288 08:1190: C9 01 00     	cmp	#<$1
  6289 08:1193: D0 05        	bne	L190
  6290 08:1195: A5 09        	lda	<L178+nxt_1+2
  6291 08:1197: C9 00 00     	cmp	#^$1
  6292                        L190:
  6293 08:119A: F0 03        	beq	L191
  Mon Aug  9 2021 16:52                                                Page 126


  6294 08:119C: 82 06 00     	brl	L10069
  6295                        L191:
  6296                        	.line	1569
  6297 08:119F: A9 02 00     	lda	#$2
  6298 08:11A2: 82 75 FF     	brl	L183
  6299                        ;		if (nxt == 0xFFFFFFFF)
  6300                        L10069:
  6301                        	.line	1570
  6302                        ;			return FR_DISK_ERR; /* Disk erro
                    r? */
  6303 08:11A5: A5 07        	lda	<L178+nxt_1
  6304 08:11A7: C9 FF FF     	cmp	#<$ffffffff
  6305 08:11AA: D0 05        	bne	L192
  6306 08:11AC: A5 09        	lda	<L178+nxt_1+2
  6307 08:11AE: C9 FF FF     	cmp	#^$ffffffff
  6308                        L192:
  6309 08:11B1: F0 03        	beq	L193
  6310 08:11B3: 82 06 00     	brl	L10070
  6311                        L193:
  6312                        	.line	1571
  6313 08:11B6: A9 01 00     	lda	#$1
  6314 08:11B9: 82 5E FF     	brl	L183
  6315                        ;		if (!FF_FS_EXFAT || fs->fs_type != FS_EX
                    FAT)
  6316                        L10070:
  6317                        	.line	1572
  6318                        ;		{
  6319 08:11BC: 82 0D 00     	brl	L194
  6320 08:11BF: E2 20        	sep	#$20
  6321                        	longa	off
  6322 08:11C1: A7 0B        	lda	[<L178+fs_1]
  6323 08:11C3: C9 04        	cmp	#<$4
  6324 08:11C5: C2 20        	rep	#$20
  6325                        	longa	on
  6326 08:11C7: D0 03        	bne	L195
  6327 08:11C9: 82 20 00     	brl	L10071
  6328                        L195:
  6329                        L194:
  6330                        	.line	1573
  6331                        ;			res = put_fat(fs, clst, 0); /* M
                    ark the cluster 'free' on the FAT */
  6332                        	.line	1574
  6333 08:11CC: F4 00 00     	pea	#^$0
  6334 08:11CF: F4 00 00     	pea	#<$0
  6335 08:11D2: D4 18        	pei	<L177+clst_0+2
  6336 08:11D4: D4 16        	pei	<L177+clst_0
  6337 08:11D6: D4 0D        	pei	<L178+fs_1+2
  6338 08:11D8: D4 0B        	pei	<L178+fs_1
  6339 08:11DA: 22 9A 0D 08  	jsl	~~put_fat
  6340 08:11DE: 85 05        	sta	<L178+res_1
  6341                        ;			if (res != FR_OK)
  6342                        	.line	1575
  6343                        ;				return res;
  6344 08:11E0: A5 05        	lda	<L178+res_1
  6345 08:11E2: D0 03        	bne	L196
  6346 08:11E4: 82 05 00     	brl	L10072
  6347                        L196:
  6348                        	.line	1576
  Mon Aug  9 2021 16:52                                                Page 127


  6349 08:11E7: A5 05        	lda	<L178+res_1
  6350 08:11E9: 82 2E FF     	brl	L183
  6351                        ;		}
  6352                        L10072:
  6353                        	.line	1577
  6354                        ;		if (fs->free_clst < fs->n_fatent - 2)
  6355                        L10071:
  6356                        	.line	1578
  6357                        ;		{ /* Update FSINFO */
  6358 08:11EC: 18           	clc
  6359 08:11ED: A9 FE FF     	lda	#$fffe
  6360 08:11F0: A0 17 00     	ldy	#$17
  6361 08:11F3: 77 0B        	adc	[<L178+fs_1],Y
  6362 08:11F5: 85 01        	sta	<R0
  6363 08:11F7: A9 FF FF     	lda	#$ffff
  6364 08:11FA: A0 19 00     	ldy	#$19
  6365 08:11FD: 77 0B        	adc	[<L178+fs_1],Y
  6366 08:11FF: 85 03        	sta	<R0+2
  6367 08:1201: A0 13 00     	ldy	#$13
  6368 08:1204: B7 0B        	lda	[<L178+fs_1],Y
  6369 08:1206: C5 01        	cmp	<R0
  6370 08:1208: A0 15 00     	ldy	#$15
  6371 08:120B: B7 0B        	lda	[<L178+fs_1],Y
  6372 08:120D: E5 03        	sbc	<R0+2
  6373 08:120F: 90 03        	bcc	L197
  6374 08:1211: 82 34 00     	brl	L10073
  6375                        L197:
  6376                        	.line	1579
  6377                        ;			fs->free_clst++;
  6378                        	.line	1580
  6379 08:1214: 18           	clc
  6380 08:1215: A9 01 00     	lda	#$1
  6381 08:1218: A0 13 00     	ldy	#$13
  6382 08:121B: 77 0B        	adc	[<L178+fs_1],Y
  6383 08:121D: A0 13 00     	ldy	#$13
  6384 08:1220: 97 0B        	sta	[<L178+fs_1],Y
  6385 08:1222: A9 00 00     	lda	#$0
  6386 08:1225: A0 15 00     	ldy	#$15
  6387 08:1228: 77 0B        	adc	[<L178+fs_1],Y
  6388 08:122A: A0 15 00     	ldy	#$15
  6389 08:122D: 97 0B        	sta	[<L178+fs_1],Y
  6390                        ;			fs->fsi_flag |= 1;
  6391                        	.line	1581
  6392 08:122F: 18           	clc
  6393 08:1230: A9 04 00     	lda	#$4
  6394 08:1233: 65 0B        	adc	<L178+fs_1
  6395 08:1235: 85 01        	sta	<R0
  6396 08:1237: A9 00 00     	lda	#$0
  6397 08:123A: 65 0D        	adc	<L178+fs_1+2
  6398 08:123C: 85 03        	sta	<R0+2
  6399 08:123E: E2 20        	sep	#$20
  6400                        	longa	off
  6401 08:1240: A7 01        	lda	[<R0]
  6402 08:1242: 09 01        	ora	#<$1
  6403 08:1244: 87 01        	sta	[<R0]
  6404 08:1246: C2 20        	rep	#$20
  6405                        	longa	on
  6406                        ;		}
  Mon Aug  9 2021 16:52                                                Page 128


  6407                        	.line	1582
  6408                        ;#if FF_FS_EXFAT || FF_USE_TRIM
  6409                        ;		if (ecl + 1 == nxt)
  6410                        ;		{ /* Is next cluster contiguous? */
  6411                        ;			ecl = nxt;
  6412                        ;		}
  6413                        ;		else
  6414                        ;		{ /* End of contiguous cluster block */
  6415                        ;#if FF_FS_EXFAT
  6416                        ;			if (fs->fs_type == FS_EXFAT)
  6417                        ;			{
  6418                        ;				res = change_bitmap(fs, 
                    scl, ecl - scl + 1, 0); /* Mark the cluster block 'free' on 
                    the bitmap */
  6419                        ;				if (res != FR_OK) return
                     res;
  6420                        ;			}
  6421                        ;#endif
  6422                        ;#if FF_USE_TRIM
  6423                        ;			rt[0] = clst2sect(fs, scl); /* S
                    tart of data area to be freed */
  6424                        ;			rt[1] = clst2sect(fs, ecl) + fs-
                    >csize - 1; /* End of data area to be freed */
  6425                        ;			disk_ioctl(fs->pdrv, CTRL_TRIM, 
                    rt); /* Inform storage device that the data in the block may
                     be erased */
  6426                        ;#endif
  6427                        ;			scl = ecl = nxt;
  6428                        ;		}
  6429                        ;#endif
  6430                        ;		clst = nxt; /* Next cluster */
  6431                        L10073:
  6432                        	.line	1605
  6433 08:1248: A5 07        	lda	<L178+nxt_1
  6434 08:124A: 85 16        	sta	<L177+clst_0
  6435 08:124C: A5 09        	lda	<L178+nxt_1+2
  6436 08:124E: 85 18        	sta	<L177+clst_0+2
  6437                        ;	} while (clst < fs->n_fatent); /* Repeat while n
                    ot the last link */
  6438                        	.line	1606
  6439                        L10066:
  6440 08:1250: A5 16        	lda	<L177+clst_0
  6441 08:1252: A0 17 00     	ldy	#$17
  6442 08:1255: D7 0B        	cmp	[<L178+fs_1],Y
  6443 08:1257: A5 18        	lda	<L177+clst_0+2
  6444 08:1259: A0 19 00     	ldy	#$19
  6445 08:125C: F7 0B        	sbc	[<L178+fs_1],Y
  6446 08:125E: B0 03        	bcs	L198
  6447 08:1260: 82 12 FF     	brl	L10068
  6448                        L198:
  6449                        L10067:
  6450                        ;
  6451                        ;#if FF_FS_EXFAT
  6452                        ;	/* Some post processes for chain status */
  6453                        ;	if (fs->fs_type == FS_EXFAT)
  6454                        ;	{
  6455                        ;		if (pclst == 0)
  6456                        ;		{ /* Has the entire chain been removed? 
  Mon Aug  9 2021 16:52                                                Page 129


                    */
  6457                        ;			obj->stat = 0; /* Change the cha
                    in status 'initial' */
  6458                        ;		}
  6459                        ;		else
  6460                        ;		{
  6461                        ;			if (obj->stat == 0)
  6462                        ;			{ /* Is it a fragmented chain fr
                    om the beginning of this session? */
  6463                        ;				clst = obj->sclust; /* F
                    ollow the chain to check if it gets contiguous */
  6464                        ;				while (clst != pclst)
  6465                        ;				{
  6466                        ;					nxt = get_fat(ob
                    j, clst);
  6467                        ;					if (nxt < 2) ret
                    urn FR_INT_ERR;
  6468                        ;					if (nxt == 0xFFF
                    FFFFF) return FR_DISK_ERR;
  6469                        ;					if (nxt != clst 
                    + 1) break; /* Not contiguous? */
  6470                        ;					clst++;
  6471                        ;				}
  6472                        ;				if (clst == pclst)
  6473                        ;				{ /* Has the chain got c
                    ontiguous again? */
  6474                        ;					obj->stat = 2; /
                    * Change the chain status 'contiguous' */
  6475                        ;				}
  6476                        ;			}
  6477                        ;			else
  6478                        ;			{
  6479                        ;				if (obj->stat == 3 && pc
                    lst >= obj->sclust && pclst <= obj->sclust + obj->n_cont)
  6480                        ;				{ /* Was the chain fragm
                    ented in this session and got contiguous again? */
  6481                        ;					obj->stat = 2; /
                    * Change the chain status 'contiguous' */
  6482                        ;				}
  6483                        ;			}
  6484                        ;		}
  6485                        ;	}
  6486                        ;#endif
  6487                        ;	return FR_OK;
  6488                        	.line	1644
  6489 08:1263: A9 00 00     	lda	#$0
  6490 08:1266: 82 B1 FE     	brl	L183
  6491                        ;}
  6492                        	.line	1645
  6493                        	.endblock	1645
  6494             0000000E   L177	equ	14
  6495             00000005   L178	equ	5
  6496 08:1269:              	ends
  6497                        	efunc
  6498                        	.endfunc	1645,5,14
  6499                        	.line	1645
  6500                        ;
  6501                        ;/*-----------------------------------------------
  Mon Aug  9 2021 16:52                                                Page 130


                    ------------------------*/
  6502                        ;/* FAT handling - Stretch a chain or Create a new
                     chain                  */
  6503                        ;/*-----------------------------------------------
                    ------------------------*/
  6504                        ;
  6505                        ;static DWORD create_chain( /* 0:No free cluster, 
                    1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
  6506                        ;FFOBJID* obj, /* Corresponding object */
  6507                        ;DWORD clst /* Cluster# to stretch, 0:Create a new
                     chain */
  6508                        ;)
  6509                        ;{
  6510                        	.line	1651
  6511                        	.line	1655
  6512                        	FFDOS
  6513                        	func
  6514                        	.function	1655
  6515                        ~~create_chain:
  6516                        	longa	on
  6517                        	longi	on
  6518 08:1269: 3B           	tsc
  6519 08:126A: 38           	sec
  6520 08:126B: E9 16 00     	sbc	#L199
  6521 08:126E: 1B           	tcs
  6522 08:126F: 0B           	phd
  6523 08:1270: 5B           	tcd
  6524             00000004   obj_0	set	4
  6525             00000008   clst_0	set	8
  6526                        	.block	1655
  6527                        ;	DWORD cs, ncl, scl;
  6528                        ;	FRESULT res;
  6529                        ;	FATFS *fs = obj->fs;
  6530                        ;
  6531                        ;	//k_debug_long("create_chain::clst:",clst);
  6532                        ;
  6533                        ;	if (clst == 0)
  6534             00000000   cs_1	set	0
  6535             00000004   ncl_1	set	4
  6536             00000008   scl_1	set	8
  6537             0000000C   res_1	set	12
  6538             0000000E   fs_1	set	14
  6539                        	.sym	cs,0,18,1,32
  6540                        	.sym	ncl,4,18,1,32
  6541                        	.sym	scl,8,18,1,32
  6542                        	.sym	res,12,5,1,16
  6543                        	.sym	fs,14,138,1,32,75
  6544                        	.sym	obj,4,138,6,32,76
  6545                        	.sym	clst,8,18,6,32
  6546 08:1271: A7 1A        	lda	[<L199+obj_0]
  6547 08:1273: 85 13        	sta	<L200+fs_1
  6548 08:1275: A0 02 00     	ldy	#$2
  6549 08:1278: B7 1A        	lda	[<L199+obj_0],Y
  6550 08:127A: 85 15        	sta	<L200+fs_1+2
  6551                        	.line	1662
  6552                        ;	{ /* Create a new chain */
  6553 08:127C: A5 1E        	lda	<L199+clst_0
  6554 08:127E: 05 20        	ora	<L199+clst_0+2
  Mon Aug  9 2021 16:52                                                Page 131


  6555 08:1280: F0 03        	beq	L202
  6556 08:1282: 82 37 00     	brl	L10074
  6557                        L202:
  6558                        	.line	1663
  6559                        ;		scl = fs->last_clst; /* Suggested cluste
                    r to start to find */
  6560                        	.line	1664
  6561 08:1285: A0 0F 00     	ldy	#$f
  6562 08:1288: B7 13        	lda	[<L200+fs_1],Y
  6563 08:128A: 85 0D        	sta	<L200+scl_1
  6564 08:128C: A0 11 00     	ldy	#$11
  6565 08:128F: B7 13        	lda	[<L200+fs_1],Y
  6566 08:1291: 85 0F        	sta	<L200+scl_1+2
  6567                        ;		if (scl == 0 || scl >= fs->n_fatent)
  6568                        	.line	1665
  6569                        ;			scl = 1;
  6570 08:1293: A5 0D        	lda	<L200+scl_1
  6571 08:1295: 05 0F        	ora	<L200+scl_1+2
  6572 08:1297: D0 03        	bne	L204
  6573 08:1299: 82 13 00     	brl	L203
  6574                        L204:
  6575 08:129C: A5 0D        	lda	<L200+scl_1
  6576 08:129E: A0 17 00     	ldy	#$17
  6577 08:12A1: D7 13        	cmp	[<L200+fs_1],Y
  6578 08:12A3: A5 0F        	lda	<L200+scl_1+2
  6579 08:12A5: A0 19 00     	ldy	#$19
  6580 08:12A8: F7 13        	sbc	[<L200+fs_1],Y
  6581 08:12AA: B0 03        	bcs	L205
  6582 08:12AC: 82 0A 00     	brl	L10075
  6583                        L205:
  6584                        L203:
  6585                        	.line	1666
  6586 08:12AF: A9 01 00     	lda	#$1
  6587 08:12B2: 85 0D        	sta	<L200+scl_1
  6588 08:12B4: A9 00 00     	lda	#$0
  6589 08:12B7: 85 0F        	sta	<L200+scl_1+2
  6590                        ;
  6591                        ;		//k_debug_long("create_chain::scl:",scl)
                    ;
  6592                        ;	}
  6593                        L10075:
  6594                        	.line	1669
  6595                        ;	else
  6596 08:12B9: 82 72 00     	brl	L10076
  6597                        L10074:
  6598                        ;	{ /* Stretch a chain */
  6599                        	.line	1671
  6600                        ;		cs = get_fat(obj, clst); /* Check the cl
                    uster status */
  6601                        	.line	1672
  6602 08:12BC: D4 20        	pei	<L199+clst_0+2
  6603 08:12BE: D4 1E        	pei	<L199+clst_0
  6604 08:12C0: D4 1C        	pei	<L199+obj_0+2
  6605 08:12C2: D4 1A        	pei	<L199+obj_0
  6606 08:12C4: 22 2A 0B 08  	jsl	~~get_fat
  6607 08:12C8: 85 05        	sta	<L200+cs_1
  6608 08:12CA: 86 07        	stx	<L200+cs_1+2
  6609                        ;
  Mon Aug  9 2021 16:52                                                Page 132


  6610                        ;		//k_debug_long("create_chain::cs1:",cs);
  6611                        ;
  6612                        ;
  6613                        ;		if (cs < 2)
  6614                        	.line	1677
  6615                        ;			return 1; /* Test for insanity *
                    /
  6616 08:12CC: A5 05        	lda	<L200+cs_1
  6617 08:12CE: C9 02 00     	cmp	#<$2
  6618 08:12D1: A5 07        	lda	<L200+cs_1+2
  6619 08:12D3: E9 00 00     	sbc	#^$2
  6620 08:12D6: 90 03        	bcc	L206
  6621 08:12D8: 82 19 00     	brl	L10077
  6622                        L206:
  6623                        	.line	1678
  6624 08:12DB: A9 00 00     	lda	#$0
  6625 08:12DE: AA           	tax
  6626 08:12DF: A9 01 00     	lda	#$1
  6627                        L207:
  6628 08:12E2: A8           	tay
  6629 08:12E3: A5 18        	lda	<L199+2
  6630 08:12E5: 85 20        	sta	<L199+2+8
  6631 08:12E7: A5 17        	lda	<L199+1
  6632 08:12E9: 85 1F        	sta	<L199+1+8
  6633 08:12EB: 2B           	pld
  6634 08:12EC: 3B           	tsc
  6635 08:12ED: 18           	clc
  6636 08:12EE: 69 1E 00     	adc	#L199+8
  6637 08:12F1: 1B           	tcs
  6638 08:12F2: 98           	tya
  6639 08:12F3: 6B           	rtl
  6640                        ;		if (cs == 0xFFFFFFFF)
  6641                        L10077:
  6642                        	.line	1679
  6643                        ;			return cs; /* Test for disk erro
                    r */
  6644 08:12F4: A5 05        	lda	<L200+cs_1
  6645 08:12F6: C9 FF FF     	cmp	#<$ffffffff
  6646 08:12F9: D0 05        	bne	L208
  6647 08:12FB: A5 07        	lda	<L200+cs_1+2
  6648 08:12FD: C9 FF FF     	cmp	#^$ffffffff
  6649                        L208:
  6650 08:1300: F0 03        	beq	L209
  6651 08:1302: 82 07 00     	brl	L10078
  6652                        L209:
  6653                        	.line	1680
  6654 08:1305: A6 07        	ldx	<L200+cs_1+2
  6655 08:1307: A5 05        	lda	<L200+cs_1
  6656 08:1309: 82 D6 FF     	brl	L207
  6657                        ;		if (cs < fs->n_fatent)
  6658                        L10078:
  6659                        	.line	1681
  6660                        ;			return cs; /* It is already foll
                    owed by next cluster */
  6661 08:130C: A5 05        	lda	<L200+cs_1
  6662 08:130E: A0 17 00     	ldy	#$17
  6663 08:1311: D7 13        	cmp	[<L200+fs_1],Y
  6664 08:1313: A5 07        	lda	<L200+cs_1+2
  Mon Aug  9 2021 16:52                                                Page 133


  6665 08:1315: A0 19 00     	ldy	#$19
  6666 08:1318: F7 13        	sbc	[<L200+fs_1],Y
  6667 08:131A: 90 03        	bcc	L210
  6668 08:131C: 82 07 00     	brl	L10079
  6669                        L210:
  6670                        	.line	1682
  6671 08:131F: A6 07        	ldx	<L200+cs_1+2
  6672 08:1321: A5 05        	lda	<L200+cs_1
  6673 08:1323: 82 BC FF     	brl	L207
  6674                        ;		scl = clst; /* Cluster to start to find 
                    */
  6675                        L10079:
  6676                        	.line	1683
  6677 08:1326: A5 1E        	lda	<L199+clst_0
  6678 08:1328: 85 0D        	sta	<L200+scl_1
  6679 08:132A: A5 20        	lda	<L199+clst_0+2
  6680 08:132C: 85 0F        	sta	<L200+scl_1+2
  6681                        ;	}
  6682                        	.line	1684
  6683                        L10076:
  6684                        ;
  6685                        ;	//k_debug_long("create_chain::fs->free_clst:",fs
                    ->free_clst);
  6686                        ;
  6687                        ;	if (fs->free_clst == 0)
  6688                        	.line	1688
  6689                        ;		return 0; /* No free cluster */
  6690 08:132E: A0 13 00     	ldy	#$13
  6691 08:1331: B7 13        	lda	[<L200+fs_1],Y
  6692 08:1333: A0 15 00     	ldy	#$15
  6693 08:1336: 17 13        	ora	[<L200+fs_1],Y
  6694 08:1338: F0 03        	beq	L211
  6695 08:133A: 82 0A 00     	brl	L10080
  6696                        L211:
  6697                        	.line	1689
  6698 08:133D: A9 00 00     	lda	#$0
  6699 08:1340: AA           	tax
  6700 08:1341: A9 00 00     	lda	#$0
  6701 08:1344: 82 9B FF     	brl	L207
  6702                        ;
  6703                        ;#if FF_FS_EXFAT
  6704                        ;	if (fs->fs_type == FS_EXFAT)
  6705                        ;	{ /* On the exFAT volume */
  6706                        ;		ncl = find_bitmap(fs, scl, 1); /* Find a
                     free cluster */
  6707                        ;		if (ncl == 0 || ncl == 0xFFFFFFFF) retur
                    n ncl; /* No free cluster or hard error? */
  6708                        ;		res = change_bitmap(fs, ncl, 1, 1); /* M
                    ark the cluster 'in use' */
  6709                        ;		if (res == FR_INT_ERR) return 1;
  6710                        ;		if (res == FR_DISK_ERR) return 0xFFFFFFF
                    F;
  6711                        ;		if (clst == 0)
  6712                        ;		{ /* Is it a new chain? */
  6713                        ;			obj->stat = 2; /* Set status 'co
                    ntiguous' */
  6714                        ;		}
  6715                        ;		else
  Mon Aug  9 2021 16:52                                                Page 134


  6716                        ;		{ /* It is a stretched chain */
  6717                        ;			if (obj->stat == 2 && ncl != scl
                     + 1)
  6718                        ;			{ /* Is the chain got fragmented
                    ? */
  6719                        ;				obj->n_cont = scl - obj-
                    >sclust; /* Set size of the contiguous part */
  6720                        ;				obj->stat = 3; /* Change
                     status 'just fragmented' */
  6721                        ;			}
  6722                        ;		}
  6723                        ;		if (obj->stat != 2)
  6724                        ;		{ /* Is the file non-contiguous? */
  6725                        ;			if (ncl == clst + 1)
  6726                        ;			{ /* Is the cluster next to prev
                    ious one? */
  6727                        ;				obj->n_frag = obj->n_fra
                    g ? obj->n_frag + 1 : 2; /* Increment size of last framgent 
                    */
  6728                        ;			}
  6729                        ;			else
  6730                        ;			{ /* New fragment */
  6731                        ;				if (obj->n_frag == 0) ob
                    j->n_frag = 1;
  6732                        ;				res = fill_last_frag(obj
                    , clst, ncl); /* Fill last fragment on the FAT and link it t
                    o new one */
  6733                        ;				if (res == FR_OK) obj->n
                    _frag = 1;
  6734                        ;			}
  6735                        ;		}
  6736                        ;	}
  6737                        ;	else
  6738                        ;#endif
  6739                        ;	{ /* On the FAT/FAT32 volume */
  6740                        L10080:
  6741                        	.line	1727
  6742                        ;		ncl = 0;
  6743                        	.line	1728
  6744 08:1347: 64 09        	stz	<L200+ncl_1
  6745 08:1349: 64 0B        	stz	<L200+ncl_1+2
  6746                        ;		if (scl == clst)
  6747                        	.line	1729
  6748                        ;		{
  6749 08:134B: A5 0D        	lda	<L200+scl_1
  6750 08:134D: C5 1E        	cmp	<L199+clst_0
  6751 08:134F: D0 04        	bne	L212
  6752 08:1351: A5 0F        	lda	<L200+scl_1+2
  6753 08:1353: C5 20        	cmp	<L199+clst_0+2
  6754                        L212:
  6755 08:1355: F0 03        	beq	L213
  6756 08:1357: 82 AA 00     	brl	L10081
  6757                        L213:
  6758                        	.line	1730
  6759                        ;			//k_debug_long("create_chain::(s
                    cl == clst):",(scl == clst));
  6760                        ;
  6761                        ;			/* Stretching an existing chain?
  Mon Aug  9 2021 16:52                                                Page 135


                     */
  6762                        ;			ncl = scl + 1; /* Test if next c
                    luster is free */
  6763                        	.line	1734
  6764 08:135A: 18           	clc
  6765 08:135B: A9 01 00     	lda	#$1
  6766 08:135E: 65 0D        	adc	<L200+scl_1
  6767 08:1360: 85 09        	sta	<L200+ncl_1
  6768 08:1362: A9 00 00     	lda	#$0
  6769 08:1365: 65 0F        	adc	<L200+scl_1+2
  6770 08:1367: 85 0B        	sta	<L200+ncl_1+2
  6771                        ;			if (ncl >= fs->n_fatent)
  6772                        	.line	1735
  6773                        ;				ncl = 2;
  6774 08:1369: A5 09        	lda	<L200+ncl_1
  6775 08:136B: A0 17 00     	ldy	#$17
  6776 08:136E: D7 13        	cmp	[<L200+fs_1],Y
  6777 08:1370: A5 0B        	lda	<L200+ncl_1+2
  6778 08:1372: A0 19 00     	ldy	#$19
  6779 08:1375: F7 13        	sbc	[<L200+fs_1],Y
  6780 08:1377: B0 03        	bcs	L214
  6781 08:1379: 82 0A 00     	brl	L10082
  6782                        L214:
  6783                        	.line	1736
  6784 08:137C: A9 02 00     	lda	#$2
  6785 08:137F: 85 09        	sta	<L200+ncl_1
  6786 08:1381: A9 00 00     	lda	#$0
  6787 08:1384: 85 0B        	sta	<L200+ncl_1+2
  6788                        ;			cs = get_fat(obj, ncl); /* Get n
                    ext cluster status */
  6789                        L10082:
  6790                        	.line	1737
  6791 08:1386: D4 0B        	pei	<L200+ncl_1+2
  6792 08:1388: D4 09        	pei	<L200+ncl_1
  6793 08:138A: D4 1C        	pei	<L199+obj_0+2
  6794 08:138C: D4 1A        	pei	<L199+obj_0
  6795 08:138E: 22 2A 0B 08  	jsl	~~get_fat
  6796 08:1392: 85 05        	sta	<L200+cs_1
  6797 08:1394: 86 07        	stx	<L200+cs_1+2
  6798                        ;
  6799                        ;			//k_debug_long("create_chain::cs
                    2:",cs);
  6800                        ;
  6801                        ;			if (cs == 1 || cs == 0xFFFFFFFF)
  6802                        	.line	1741
  6803                        ;				return cs; /* Test for e
                    rror */
  6804 08:1396: A5 05        	lda	<L200+cs_1
  6805 08:1398: C9 01 00     	cmp	#<$1
  6806 08:139B: D0 05        	bne	L216
  6807 08:139D: A5 07        	lda	<L200+cs_1+2
  6808 08:139F: C9 00 00     	cmp	#^$1
  6809                        L216:
  6810 08:13A2: D0 03        	bne	L217
  6811 08:13A4: 82 11 00     	brl	L215
  6812                        L217:
  6813 08:13A7: A5 05        	lda	<L200+cs_1
  6814 08:13A9: C9 FF FF     	cmp	#<$ffffffff
  Mon Aug  9 2021 16:52                                                Page 136


  6815 08:13AC: D0 05        	bne	L218
  6816 08:13AE: A5 07        	lda	<L200+cs_1+2
  6817 08:13B0: C9 FF FF     	cmp	#^$ffffffff
  6818                        L218:
  6819 08:13B3: F0 03        	beq	L219
  6820 08:13B5: 82 07 00     	brl	L10083
  6821                        L219:
  6822                        L215:
  6823                        	.line	1742
  6824 08:13B8: A6 07        	ldx	<L200+cs_1+2
  6825 08:13BA: A5 05        	lda	<L200+cs_1
  6826 08:13BC: 82 23 FF     	brl	L207
  6827                        ;			if (cs != 0)
  6828                        L10083:
  6829                        	.line	1743
  6830                        ;			{ /* Not free? */
  6831 08:13BF: A5 05        	lda	<L200+cs_1
  6832 08:13C1: 05 07        	ora	<L200+cs_1+2
  6833 08:13C3: D0 03        	bne	L220
  6834 08:13C5: 82 3C 00     	brl	L10084
  6835                        L220:
  6836                        	.line	1744
  6837                        ;				cs = fs->last_clst; /* S
                    tart at suggested cluster if it is valid */
  6838                        	.line	1745
  6839 08:13C8: A0 0F 00     	ldy	#$f
  6840 08:13CB: B7 13        	lda	[<L200+fs_1],Y
  6841 08:13CD: 85 05        	sta	<L200+cs_1
  6842 08:13CF: A0 11 00     	ldy	#$11
  6843 08:13D2: B7 13        	lda	[<L200+fs_1],Y
  6844 08:13D4: 85 07        	sta	<L200+cs_1+2
  6845                        ;				if (cs >= 2 && cs < fs->
                    n_fatent)
  6846                        	.line	1746
  6847                        ;					scl = cs;
  6848 08:13D6: A5 05        	lda	<L200+cs_1
  6849 08:13D8: C9 02 00     	cmp	#<$2
  6850 08:13DB: A5 07        	lda	<L200+cs_1+2
  6851 08:13DD: E9 00 00     	sbc	#^$2
  6852 08:13E0: B0 03        	bcs	L221
  6853 08:13E2: 82 1B 00     	brl	L10085
  6854                        L221:
  6855 08:13E5: A5 05        	lda	<L200+cs_1
  6856 08:13E7: A0 17 00     	ldy	#$17
  6857 08:13EA: D7 13        	cmp	[<L200+fs_1],Y
  6858 08:13EC: A5 07        	lda	<L200+cs_1+2
  6859 08:13EE: A0 19 00     	ldy	#$19
  6860 08:13F1: F7 13        	sbc	[<L200+fs_1],Y
  6861 08:13F3: 90 03        	bcc	L222
  6862 08:13F5: 82 08 00     	brl	L10085
  6863                        L222:
  6864                        	.line	1747
  6865 08:13F8: A5 05        	lda	<L200+cs_1
  6866 08:13FA: 85 0D        	sta	<L200+scl_1
  6867 08:13FC: A5 07        	lda	<L200+cs_1+2
  6868 08:13FE: 85 0F        	sta	<L200+scl_1+2
  6869                        ;				ncl = 0;
  6870                        L10085:
  Mon Aug  9 2021 16:52                                                Page 137


  6871                        	.line	1748
  6872 08:1400: 64 09        	stz	<L200+ncl_1
  6873 08:1402: 64 0B        	stz	<L200+ncl_1+2
  6874                        ;			}
  6875                        	.line	1749
  6876                        ;		}
  6877                        L10084:
  6878                        	.line	1750
  6879                        ;		if (ncl == 0)
  6880                        L10081:
  6881                        	.line	1751
  6882                        ;		{ /* The new cluster cannot be contiguou
                    s and find another fragment */
  6883 08:1404: A5 09        	lda	<L200+ncl_1
  6884 08:1406: 05 0B        	ora	<L200+ncl_1+2
  6885 08:1408: F0 03        	beq	L223
  6886 08:140A: 82 A0 00     	brl	L10086
  6887                        L223:
  6888                        	.line	1752
  6889                        ;			ncl = scl; /* Start cluster */
  6890                        	.line	1753
  6891 08:140D: A5 0D        	lda	<L200+scl_1
  6892 08:140F: 85 09        	sta	<L200+ncl_1
  6893 08:1411: A5 0F        	lda	<L200+scl_1+2
  6894 08:1413: 85 0B        	sta	<L200+ncl_1+2
  6895                        ;			for (;;)
  6896                        	.line	1754
  6897                        L10089:
  6898                        ;			{
  6899                        	.line	1755
  6900                        ;				ncl++; /* Next cluster *
                    /
  6901                        	.line	1756
  6902 08:1415: E6 09        	inc	<L200+ncl_1
  6903 08:1417: D0 02        	bne	L224
  6904 08:1419: E6 0B        	inc	<L200+ncl_1+2
  6905                        L224:
  6906                        ;				if (ncl >= fs->n_fatent)
  6907                        	.line	1757
  6908                        ;				{ /* Check wrap-around *
                    /
  6909 08:141B: A5 09        	lda	<L200+ncl_1
  6910 08:141D: A0 17 00     	ldy	#$17
  6911 08:1420: D7 13        	cmp	[<L200+fs_1],Y
  6912 08:1422: A5 0B        	lda	<L200+ncl_1+2
  6913 08:1424: A0 19 00     	ldy	#$19
  6914 08:1427: F7 13        	sbc	[<L200+fs_1],Y
  6915 08:1429: B0 03        	bcs	L225
  6916 08:142B: 82 21 00     	brl	L10090
  6917                        L225:
  6918                        	.line	1758
  6919                        ;					ncl = 2;
  6920                        	.line	1759
  6921 08:142E: A9 02 00     	lda	#$2
  6922 08:1431: 85 09        	sta	<L200+ncl_1
  6923 08:1433: A9 00 00     	lda	#$0
  6924 08:1436: 85 0B        	sta	<L200+ncl_1+2
  6925                        ;					if (ncl > scl)
  Mon Aug  9 2021 16:52                                                Page 138


  6926                        	.line	1760
  6927                        ;						return 0
                    ; /* No free cluster found? */
  6928 08:1438: A5 0D        	lda	<L200+scl_1
  6929 08:143A: C5 09        	cmp	<L200+ncl_1
  6930 08:143C: A5 0F        	lda	<L200+scl_1+2
  6931 08:143E: E5 0B        	sbc	<L200+ncl_1+2
  6932 08:1440: 90 03        	bcc	L226
  6933 08:1442: 82 0A 00     	brl	L10091
  6934                        L226:
  6935                        	.line	1761
  6936 08:1445: A9 00 00     	lda	#$0
  6937 08:1448: AA           	tax
  6938 08:1449: A9 00 00     	lda	#$0
  6939 08:144C: 82 93 FE     	brl	L207
  6940                        ;				}
  6941                        L10091:
  6942                        	.line	1762
  6943                        ;				cs = get_fat(obj, ncl); 
                    /* Get the cluster status */
  6944                        L10090:
  6945                        	.line	1763
  6946 08:144F: D4 0B        	pei	<L200+ncl_1+2
  6947 08:1451: D4 09        	pei	<L200+ncl_1
  6948 08:1453: D4 1C        	pei	<L199+obj_0+2
  6949 08:1455: D4 1A        	pei	<L199+obj_0
  6950 08:1457: 22 2A 0B 08  	jsl	~~get_fat
  6951 08:145B: 85 05        	sta	<L200+cs_1
  6952 08:145D: 86 07        	stx	<L200+cs_1+2
  6953                        ;
  6954                        ;
  6955                        ;				//k_debug_long("create_c
                    hain::get_fat::cs:",cs);
  6956                        ;
  6957                        ;
  6958                        ;				if (cs == 0)
  6959                        	.line	1769
  6960                        ;					break; /* Found 
                    a free cluster? */
  6961 08:145F: A5 05        	lda	<L200+cs_1
  6962 08:1461: 05 07        	ora	<L200+cs_1+2
  6963 08:1463: D0 03        	bne	L227
  6964 08:1465: 82 45 00     	brl	L10088
  6965                        L227:
  6966                        ;				if (cs == 1 || cs == 0xF
                    FFFFFFF)
  6967                        	.line	1771
  6968                        ;					return cs; /* Te
                    st for error */
  6969 08:1468: A5 05        	lda	<L200+cs_1
  6970 08:146A: C9 01 00     	cmp	#<$1
  6971 08:146D: D0 05        	bne	L229
  6972 08:146F: A5 07        	lda	<L200+cs_1+2
  6973 08:1471: C9 00 00     	cmp	#^$1
  6974                        L229:
  6975 08:1474: D0 03        	bne	L230
  6976 08:1476: 82 11 00     	brl	L228
  6977                        L230:
  Mon Aug  9 2021 16:52                                                Page 139


  6978 08:1479: A5 05        	lda	<L200+cs_1
  6979 08:147B: C9 FF FF     	cmp	#<$ffffffff
  6980 08:147E: D0 05        	bne	L231
  6981 08:1480: A5 07        	lda	<L200+cs_1+2
  6982 08:1482: C9 FF FF     	cmp	#^$ffffffff
  6983                        L231:
  6984 08:1485: F0 03        	beq	L232
  6985 08:1487: 82 07 00     	brl	L10092
  6986                        L232:
  6987                        L228:
  6988                        	.line	1772
  6989 08:148A: A6 07        	ldx	<L200+cs_1+2
  6990 08:148C: A5 05        	lda	<L200+cs_1
  6991 08:148E: 82 51 FE     	brl	L207
  6992                        ;				if (ncl == scl)
  6993                        L10092:
  6994                        	.line	1773
  6995                        ;					return 0; /* No 
                    free cluster found? */
  6996 08:1491: A5 09        	lda	<L200+ncl_1
  6997 08:1493: C5 0D        	cmp	<L200+scl_1
  6998 08:1495: D0 04        	bne	L233
  6999 08:1497: A5 0B        	lda	<L200+ncl_1+2
  7000 08:1499: C5 0F        	cmp	<L200+scl_1+2
  7001                        L233:
  7002 08:149B: F0 03        	beq	L234
  7003 08:149D: 82 0A 00     	brl	L10093
  7004                        L234:
  7005                        	.line	1774
  7006 08:14A0: A9 00 00     	lda	#$0
  7007 08:14A3: AA           	tax
  7008 08:14A4: A9 00 00     	lda	#$0
  7009 08:14A7: 82 38 FE     	brl	L207
  7010                        ;			}
  7011                        L10093:
  7012                        	.line	1775
  7013                        L10087:
  7014 08:14AA: 82 68 FF     	brl	L10089
  7015                        L10088:
  7016                        ;		}
  7017                        	.line	1776
  7018                        ;		res = put_fat(fs, ncl, 0xFFFFFFFF); /* M
                    ark the new cluster 'EOC' */
  7019                        L10086:
  7020                        	.line	1777
  7021 08:14AD: F4 FF FF     	pea	#^$ffffffff
  7022 08:14B0: F4 FF FF     	pea	#<$ffffffff
  7023 08:14B3: D4 0B        	pei	<L200+ncl_1+2
  7024 08:14B5: D4 09        	pei	<L200+ncl_1
  7025 08:14B7: D4 15        	pei	<L200+fs_1+2
  7026 08:14B9: D4 13        	pei	<L200+fs_1
  7027 08:14BB: 22 9A 0D 08  	jsl	~~put_fat
  7028 08:14BF: 85 11        	sta	<L200+res_1
  7029                        ;		if (res == FR_OK && clst != 0)
  7030                        	.line	1778
  7031                        ;		{
  7032 08:14C1: A5 11        	lda	<L200+res_1
  7033 08:14C3: F0 03        	beq	L235
  Mon Aug  9 2021 16:52                                                Page 140


  7034 08:14C5: 82 1B 00     	brl	L10094
  7035                        L235:
  7036 08:14C8: A5 1E        	lda	<L199+clst_0
  7037 08:14CA: 05 20        	ora	<L199+clst_0+2
  7038 08:14CC: D0 03        	bne	L236
  7039 08:14CE: 82 12 00     	brl	L10094
  7040                        L236:
  7041                        	.line	1779
  7042                        ;			res = put_fat(fs, clst, ncl); /*
                     Link it from the previous one if needed */
  7043                        	.line	1780
  7044 08:14D1: D4 0B        	pei	<L200+ncl_1+2
  7045 08:14D3: D4 09        	pei	<L200+ncl_1
  7046 08:14D5: D4 20        	pei	<L199+clst_0+2
  7047 08:14D7: D4 1E        	pei	<L199+clst_0
  7048 08:14D9: D4 15        	pei	<L200+fs_1+2
  7049 08:14DB: D4 13        	pei	<L200+fs_1
  7050 08:14DD: 22 9A 0D 08  	jsl	~~put_fat
  7051 08:14E1: 85 11        	sta	<L200+res_1
  7052                        ;		}
  7053                        	.line	1781
  7054                        ;	}
  7055                        L10094:
  7056                        	.line	1782
  7057                        ;
  7058                        ;	if (res == FR_OK)
  7059                        	.line	1784
  7060                        ;	{ /* Update FSINFO if function succeeded. */
  7061 08:14E3: A5 11        	lda	<L200+res_1
  7062 08:14E5: F0 03        	beq	L237
  7063 08:14E7: 82 6D 00     	brl	L10095
  7064                        L237:
  7065                        	.line	1785
  7066                        ;		fs->last_clst = ncl;
  7067                        	.line	1786
  7068 08:14EA: A5 09        	lda	<L200+ncl_1
  7069 08:14EC: A0 0F 00     	ldy	#$f
  7070 08:14EF: 97 13        	sta	[<L200+fs_1],Y
  7071 08:14F1: A5 0B        	lda	<L200+ncl_1+2
  7072 08:14F3: A0 11 00     	ldy	#$11
  7073 08:14F6: 97 13        	sta	[<L200+fs_1],Y
  7074                        ;		if (fs->free_clst <= fs->n_fatent - 2)
  7075                        	.line	1787
  7076                        ;			fs->free_clst--;
  7077 08:14F8: 18           	clc
  7078 08:14F9: A9 FE FF     	lda	#$fffe
  7079 08:14FC: A0 17 00     	ldy	#$17
  7080 08:14FF: 77 13        	adc	[<L200+fs_1],Y
  7081 08:1501: 85 01        	sta	<R0
  7082 08:1503: A9 FF FF     	lda	#$ffff
  7083 08:1506: A0 19 00     	ldy	#$19
  7084 08:1509: 77 13        	adc	[<L200+fs_1],Y
  7085 08:150B: 85 03        	sta	<R0+2
  7086 08:150D: A5 01        	lda	<R0
  7087 08:150F: A0 13 00     	ldy	#$13
  7088 08:1512: D7 13        	cmp	[<L200+fs_1],Y
  7089 08:1514: A5 03        	lda	<R0+2
  7090 08:1516: A0 15 00     	ldy	#$15
  Mon Aug  9 2021 16:52                                                Page 141


  7091 08:1519: F7 13        	sbc	[<L200+fs_1],Y
  7092 08:151B: B0 03        	bcs	L238
  7093 08:151D: 82 1B 00     	brl	L10096
  7094                        L238:
  7095                        	.line	1788
  7096 08:1520: 18           	clc
  7097 08:1521: A9 FF FF     	lda	#$ffff
  7098 08:1524: A0 13 00     	ldy	#$13
  7099 08:1527: 77 13        	adc	[<L200+fs_1],Y
  7100 08:1529: A0 13 00     	ldy	#$13
  7101 08:152C: 97 13        	sta	[<L200+fs_1],Y
  7102 08:152E: A9 FF FF     	lda	#$ffff
  7103 08:1531: A0 15 00     	ldy	#$15
  7104 08:1534: 77 13        	adc	[<L200+fs_1],Y
  7105 08:1536: A0 15 00     	ldy	#$15
  7106 08:1539: 97 13        	sta	[<L200+fs_1],Y
  7107                        ;		fs->fsi_flag |= 1;
  7108                        L10096:
  7109                        	.line	1789
  7110 08:153B: 18           	clc
  7111 08:153C: A9 04 00     	lda	#$4
  7112 08:153F: 65 13        	adc	<L200+fs_1
  7113 08:1541: 85 01        	sta	<R0
  7114 08:1543: A9 00 00     	lda	#$0
  7115 08:1546: 65 15        	adc	<L200+fs_1+2
  7116 08:1548: 85 03        	sta	<R0+2
  7117 08:154A: E2 20        	sep	#$20
  7118                        	longa	off
  7119 08:154C: A7 01        	lda	[<R0]
  7120 08:154E: 09 01        	ora	#<$1
  7121 08:1550: 87 01        	sta	[<R0]
  7122 08:1552: C2 20        	rep	#$20
  7123                        	longa	on
  7124                        ;	}
  7125                        	.line	1790
  7126                        ;	else
  7127 08:1554: 82 26 00     	brl	L10097
  7128                        L10095:
  7129                        ;	{
  7130                        	.line	1792
  7131                        ;		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF 
                    : 1; /* Failed. Generate error status */
  7132                        	.line	1793
  7133 08:1557: A5 11        	lda	<L200+res_1
  7134 08:1559: C9 01 00     	cmp	#<$1
  7135 08:155C: F0 03        	beq	L240
  7136 08:155E: 82 09 00     	brl	L239
  7137                        L240:
  7138 08:1561: A9 FF FF     	lda	#$ffff
  7139 08:1564: AA           	tax
  7140 08:1565: A9 FF FF     	lda	#$ffff
  7141 08:1568: 80 07        	bra	L241
  7142                        L239:
  7143 08:156A: A9 00 00     	lda	#$0
  7144 08:156D: AA           	tax
  7145 08:156E: A9 01 00     	lda	#$1
  7146                        L241:
  7147 08:1571: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 142


  7148 08:1573: 86 03        	stx	<R0+2
  7149 08:1575: A5 01        	lda	<R0
  7150 08:1577: 85 09        	sta	<L200+ncl_1
  7151 08:1579: A5 03        	lda	<R0+2
  7152 08:157B: 85 0B        	sta	<L200+ncl_1+2
  7153                        ;	}
  7154                        	.line	1794
  7155                        L10097:
  7156                        ;
  7157                        ;	return ncl; /* Return new cluster number or erro
                    r status */
  7158                        	.line	1796
  7159 08:157D: A6 0B        	ldx	<L200+ncl_1+2
  7160 08:157F: A5 09        	lda	<L200+ncl_1
  7161 08:1581: 82 5E FD     	brl	L207
  7162                        ;}
  7163                        	.line	1797
  7164                        	.endblock	1797
  7165             00000016   L199	equ	22
  7166             00000005   L200	equ	5
  7167 08:1584:              	ends
  7168                        	efunc
  7169                        	.endfunc	1797,5,22
  7170                        	.line	1797
  7171                        ;
  7172                        ;#endif /* !FF_FS_READONLY */
  7173                        ;
  7174                        ;#if FF_USE_FASTSEEK
  7175                        ;/*-----------------------------------------------
                    ------------------------*/
  7176                        ;/* FAT handling - Convert offset into cluster wit
                    h link map table        */
  7177                        ;/*-----------------------------------------------
                    ------------------------*/
  7178                        ;
  7179                        ;static DWORD clmt_clust ( /* <2:Error, >=2:Cluste
                    r number */
  7180                        ;		FIL* fp, /* Pointer to the file object *
                    /
  7181                        ;		FSIZE_t ofs /* File offset to be convert
                    ed to cluster# */
  7182                        ;)
  7183                        ;{
  7184                        ;	DWORD cl, ncl, *tbl;
  7185                        ;	FATFS *fs = fp->obj.fs;
  7186                        ;
  7187                        ;	tbl = fp->cltbl + 1; /* Top of CLMT */
  7188                        ;	cl = (DWORD)(ofs / SS(fs) / fs->csize); /* Clust
                    er order from top of the file */
  7189                        ;	for (;;)
  7190                        ;	{
  7191                        ;		ncl = *tbl++; /* Number of cluters in th
                    e fragment */
  7192                        ;		if (ncl == 0) return 0; /* End of table?
                     (error) */
  7193                        ;		if (cl < ncl) break; /* In this fragment
                    ? */
  7194                        ;		cl -= ncl; tbl++; /* Next fragment */
  Mon Aug  9 2021 16:52                                                Page 143


  7195                        ;	}
  7196                        ;	return cl + *tbl; /* Return the cluster number *
                    /
  7197                        ;}
  7198                        ;
  7199                        ;#endif	/* FF_USE_FASTSEEK */
  7200                        ;
  7201                        ;/*-----------------------------------------------
                    ------------------------*/
  7202                        ;/* Directory handling - Fill a cluster with zeros
                                            */
  7203                        ;/*-----------------------------------------------
                    ------------------------*/
  7204                        ;
  7205                        ;#if !FF_FS_READONLY
  7206                        ;static FRESULT dir_clear( /* Returns FR_OK or FR_
                    DISK_ERR */
  7207                        ;FATFS *fs, /* Filesystem object */
  7208                        ;DWORD clst /* Directory table to clear */
  7209                        ;)
  7210                        ;{
  7211                        	.line	1833
  7212                        	.line	1837
  7213                        	FFDOS
  7214                        	func
  7215                        	.function	1837
  7216                        ~~dir_clear:
  7217                        	longa	on
  7218                        	longi	on
  7219 08:1584: 3B           	tsc
  7220 08:1585: 38           	sec
  7221 08:1586: E9 14 00     	sbc	#L242
  7222 08:1589: 1B           	tcs
  7223 08:158A: 0B           	phd
  7224 08:158B: 5B           	tcd
  7225             00000004   fs_0	set	4
  7226             00000008   clst_0	set	8
  7227                        	.block	1837
  7228                        ;	LBA_t sect;
  7229                        ;	UINT n, szb;
  7230                        ;	BYTE *ibuf;
  7231                        ;
  7232                        ;	//k_debug_long("dir_clear:",clst);
  7233                        ;
  7234                        ;	if (sync_window(fs) != FR_OK)
  7235             00000000   sect_1	set	0
  7236             00000004   n_1	set	4
  7237             00000006   szb_1	set	6
  7238             00000008   ibuf_1	set	8
  7239                        	.sym	sect,0,18,1,32
  7240                        	.sym	n,4,16,1,16
  7241                        	.sym	szb,6,16,1,16
  7242                        	.sym	ibuf,8,142,1,32
  7243                        	.sym	fs,4,138,6,32,75
  7244                        	.sym	clst,8,18,6,32
  7245                        	.line	1844
  7246                        ;		return FR_DISK_ERR; /* Flush disk access
                     window */
  Mon Aug  9 2021 16:52                                                Page 144


  7247 08:158C: D4 1A        	pei	<L242+fs_0+2
  7248 08:158E: D4 18        	pei	<L242+fs_0
  7249 08:1590: 22 AE 07 08  	jsl	~~sync_window
  7250 08:1594: AA           	tax
  7251 08:1595: D0 03        	bne	L245
  7252 08:1597: 82 15 00     	brl	L10098
  7253                        L245:
  7254                        	.line	1845
  7255 08:159A: A9 01 00     	lda	#$1
  7256                        L246:
  7257 08:159D: A8           	tay
  7258 08:159E: A5 16        	lda	<L242+2
  7259 08:15A0: 85 1E        	sta	<L242+2+8
  7260 08:15A2: A5 15        	lda	<L242+1
  7261 08:15A4: 85 1D        	sta	<L242+1+8
  7262 08:15A6: 2B           	pld
  7263 08:15A7: 3B           	tsc
  7264 08:15A8: 18           	clc
  7265 08:15A9: 69 1C 00     	adc	#L242+8
  7266 08:15AC: 1B           	tcs
  7267 08:15AD: 98           	tya
  7268 08:15AE: 6B           	rtl
  7269                        ;
  7270                        ;
  7271                        ;
  7272                        ;	sect = clst2sect(fs, clst); /* Top of the cluste
                    r */
  7273                        L10098:
  7274                        	.line	1849
  7275 08:15AF: D4 1E        	pei	<L242+clst_0+2
  7276 08:15B1: D4 1C        	pei	<L242+clst_0
  7277 08:15B3: D4 1A        	pei	<L242+fs_0+2
  7278 08:15B5: D4 18        	pei	<L242+fs_0
  7279 08:15B7: 22 9B 0A 08  	jsl	~~clst2sect
  7280 08:15BB: 85 09        	sta	<L243+sect_1
  7281 08:15BD: 86 0B        	stx	<L243+sect_1+2
  7282                        ;	fs->winsect = sect; /* Set window to top of the 
                    cluster */
  7283                        	.line	1850
  7284 08:15BF: A5 09        	lda	<L243+sect_1
  7285 08:15C1: A0 2F 00     	ldy	#$2f
  7286 08:15C4: 97 18        	sta	[<L242+fs_0],Y
  7287 08:15C6: A5 0B        	lda	<L243+sect_1+2
  7288 08:15C8: A0 31 00     	ldy	#$31
  7289 08:15CB: 97 18        	sta	[<L242+fs_0],Y
  7290                        ;	mem_set(fs->win, 0, sizeof fs->win); /* Clear wi
                    ndow buffer */
  7291                        	.line	1851
  7292 08:15CD: F4 00 02     	pea	#<$200
  7293 08:15D0: F4 00 00     	pea	#<$0
  7294 08:15D3: 18           	clc
  7295 08:15D4: A9 33 00     	lda	#$33
  7296 08:15D7: 65 18        	adc	<L242+fs_0
  7297 08:15D9: 85 01        	sta	<R0
  7298 08:15DB: A9 00 00     	lda	#$0
  7299 08:15DE: 65 1A        	adc	<L242+fs_0+2
  7300 08:15E0: 85 03        	sta	<R0+2
  7301 08:15E2: D4 03        	pei	<R0+2
  Mon Aug  9 2021 16:52                                                Page 145


  7302 08:15E4: D4 01        	pei	<R0
  7303 08:15E6: 22 DF 01 08  	jsl	~~mem_set
  7304                        ;#if FF_USE_LFN == 3		/* Quick table c
                    lear by using multi-secter write */
  7305                        ;	/* Allocate a temporary buffer */
  7306                        ;	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MAL
                    LOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; szb > SS(f
                    s) && (ibuf = ff_memalloc(szb)) == 0; szb /= 2);
  7307                        	.line	1854
  7308 08:15EA: A0 00 00     	ldy	#$0
  7309 08:15ED: 5A           	phy
  7310 08:15EE: A0 09 00     	ldy	#$9
  7311 08:15F1: B7 18        	lda	[<L242+fs_0],Y
  7312 08:15F3: 7A           	ply
  7313 08:15F4: 2A           	rol	A
  7314 08:15F5: 6A           	ror	A
  7315 08:15F6: 10 01        	bpl	L248
  7316 08:15F8: 88           	dey
  7317                        L248:
  7318 08:15F9: 85 05        	sta	<R1
  7319 08:15FB: 84 07        	sty	<R1+2
  7320 08:15FD: D4 07        	pei	<R1+2
  7321 08:15FF: D4 05        	pei	<R1
  7322 08:1601: A9 09 00     	lda	#$9
  7323                        	xref	~~~lasl
  7324 08:1604: 22 xx xx xx  	jsl	~~~lasl
  7325 08:1608: 85 01        	sta	<R0
  7326 08:160A: 86 03        	stx	<R0+2
  7327 08:160C: A5 01        	lda	<R0
  7328 08:160E: C9 00 04     	cmp	#<$400
  7329 08:1611: A5 03        	lda	<R0+2
  7330 08:1613: E9 00 00     	sbc	#^$400
  7331 08:1616: B0 03        	bcs	L249
  7332 08:1618: 82 05 00     	brl	L247
  7333                        L249:
  7334 08:161B: A9 00 04     	lda	#$400
  7335 08:161E: 80 0C        	bra	L250
  7336                        L247:
  7337 08:1620: A0 09 00     	ldy	#$9
  7338 08:1623: B7 18        	lda	[<L242+fs_0],Y
  7339 08:1625: A2 09 00     	ldx	#<$9
  7340                        	xref	~~~asl
  7341 08:1628: 22 xx xx xx  	jsl	~~~asl
  7342                        L250:
  7343 08:162C: 85 0F        	sta	<L243+szb_1
  7344 08:162E: 64 11        	stz	<L243+ibuf_1
  7345 08:1630: 64 13        	stz	<L243+ibuf_1+2
  7346 08:1632: 82 02 00     	brl	L10102
  7347                        L10101:
  7348                        	.line	1854
  7349                        L10099:
  7350 08:1635: 46 0F        	lsr	<L243+szb_1
  7351                        L10102:
  7352 08:1637: A9 00 02     	lda	#$200
  7353 08:163A: C5 0F        	cmp	<L243+szb_1
  7354 08:163C: 90 03        	bcc	L252
  7355 08:163E: 82 13 00     	brl	L251
  7356                        L252:
  Mon Aug  9 2021 16:52                                                Page 146


  7357 08:1641: D4 0F        	pei	<L243+szb_1
  7358 08:1643: 22 40 92 08  	jsl	~~ff_memalloc
  7359 08:1647: 85 11        	sta	<L243+ibuf_1
  7360 08:1649: 86 13        	stx	<L243+ibuf_1+2
  7361 08:164B: A5 11        	lda	<L243+ibuf_1
  7362 08:164D: 05 13        	ora	<L243+ibuf_1+2
  7363 08:164F: D0 03        	bne	L253
  7364 08:1651: 82 E1 FF     	brl	L10101
  7365                        L253:
  7366                        L251:
  7367                        L10100:
  7368                        ;
  7369                        ;
  7370                        ;	if (szb > SS(fs))
  7371                        	.line	1857
  7372                        ;	{ /* Buffer allocated? */
  7373 08:1654: A9 00 02     	lda	#$200
  7374 08:1657: C5 0F        	cmp	<L243+szb_1
  7375 08:1659: 90 03        	bcc	L254
  7376 08:165B: 82 68 00     	brl	L10103
  7377                        L254:
  7378                        	.line	1858
  7379                        ;		mem_set(ibuf, 0, szb);
  7380                        	.line	1859
  7381 08:165E: D4 0F        	pei	<L243+szb_1
  7382 08:1660: F4 00 00     	pea	#<$0
  7383 08:1663: D4 13        	pei	<L243+ibuf_1+2
  7384 08:1665: D4 11        	pei	<L243+ibuf_1
  7385 08:1667: 22 DF 01 08  	jsl	~~mem_set
  7386                        ;		szb /= SS(fs); /* Bytes -> Sectors */
  7387                        	.line	1860
  7388 08:166B: A5 0F        	lda	<L243+szb_1
  7389 08:166D: A2 09 00     	ldx	#<$9
  7390                        	xref	~~~lsr
  7391 08:1670: 22 xx xx xx  	jsl	~~~lsr
  7392 08:1674: 85 0F        	sta	<L243+szb_1
  7393                        ;		for (n = 0; n < fs->csize && disk_write(
                    fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb); /* Fill
                     the cluster with 0 */
  7394                        	.line	1861
  7395 08:1676: 64 0D        	stz	<L243+n_1
  7396 08:1678: 82 07 00     	brl	L10107
  7397                        L10106:
  7398                        	.line	1861
  7399                        L10104:
  7400 08:167B: 18           	clc
  7401 08:167C: A5 0D        	lda	<L243+n_1
  7402 08:167E: 65 0F        	adc	<L243+szb_1
  7403 08:1680: 85 0D        	sta	<L243+n_1
  7404                        L10107:
  7405 08:1682: A5 0D        	lda	<L243+n_1
  7406 08:1684: A0 09 00     	ldy	#$9
  7407 08:1687: D7 18        	cmp	[<L242+fs_0],Y
  7408 08:1689: 90 03        	bcc	L256
  7409 08:168B: 82 2D 00     	brl	L255
  7410                        L256:
  7411 08:168E: D4 0F        	pei	<L243+szb_1
  7412 08:1690: A5 0D        	lda	<L243+n_1
  Mon Aug  9 2021 16:52                                                Page 147


  7413 08:1692: 85 01        	sta	<R0
  7414 08:1694: 64 03        	stz	<R0+2
  7415 08:1696: 18           	clc
  7416 08:1697: A5 01        	lda	<R0
  7417 08:1699: 65 09        	adc	<L243+sect_1
  7418 08:169B: 85 05        	sta	<R1
  7419 08:169D: A5 03        	lda	<R0+2
  7420 08:169F: 65 0B        	adc	<L243+sect_1+2
  7421 08:16A1: 85 07        	sta	<R1+2
  7422 08:16A3: D4 07        	pei	<R1+2
  7423 08:16A5: D4 05        	pei	<R1
  7424 08:16A7: D4 13        	pei	<L243+ibuf_1+2
  7425 08:16A9: D4 11        	pei	<L243+ibuf_1
  7426 08:16AB: A0 01 00     	ldy	#$1
  7427 08:16AE: B7 18        	lda	[<L242+fs_0],Y
  7428 08:16B0: 48           	pha
  7429 08:16B1: 22 xx xx xx  	jsl	~~disk_write
  7430 08:16B5: AA           	tax
  7431 08:16B6: D0 03        	bne	L257
  7432 08:16B8: 82 C0 FF     	brl	L10106
  7433                        L257:
  7434                        L255:
  7435                        L10105:
  7436                        ;		ff_memfree(ibuf);
  7437                        	.line	1862
  7438 08:16BB: D4 13        	pei	<L243+ibuf_1+2
  7439 08:16BD: D4 11        	pei	<L243+ibuf_1
  7440 08:16BF: 22 70 92 08  	jsl	~~ff_memfree
  7441                        ;	}
  7442                        	.line	1863
  7443                        ;	else
  7444 08:16C3: 82 59 00     	brl	L10108
  7445                        L10103:
  7446                        ;#endif
  7447                        ;	{
  7448                        	.line	1866
  7449                        ;		ibuf = fs->win;
  7450                        	.line	1867
  7451 08:16C6: 18           	clc
  7452 08:16C7: A9 33 00     	lda	#$33
  7453 08:16CA: 65 18        	adc	<L242+fs_0
  7454 08:16CC: 85 11        	sta	<L243+ibuf_1
  7455 08:16CE: A9 00 00     	lda	#$0
  7456 08:16D1: 65 1A        	adc	<L242+fs_0+2
  7457 08:16D3: 85 13        	sta	<L243+ibuf_1+2
  7458                        ;		szb = 1; /* Use window buffer (many sing
                    le-sector writes may take a time) */
  7459                        	.line	1868
  7460 08:16D5: A9 01 00     	lda	#$1
  7461 08:16D8: 85 0F        	sta	<L243+szb_1
  7462                        ;		for (n = 0;
  7463                        	.line	1869
  7464                        ;				n < fs->csize
  7465                        ;						&& disk_
                    write(fs->pdrv, ibuf, sect + n, szb) == RES_OK;
  7466 08:16DA: 64 0D        	stz	<L243+n_1
  7467 08:16DC: 82 07 00     	brl	L10112
  7468                        ;				n += szb)
  Mon Aug  9 2021 16:52                                                Page 148


  7469                        L10111:
  7470                        ;			; /* Fill the cluster with 0 */
  7471                        	.line	1873
  7472                        L10109:
  7473 08:16DF: 18           	clc
  7474 08:16E0: A5 0D        	lda	<L243+n_1
  7475 08:16E2: 65 0F        	adc	<L243+szb_1
  7476 08:16E4: 85 0D        	sta	<L243+n_1
  7477                        L10112:
  7478 08:16E6: A5 0D        	lda	<L243+n_1
  7479 08:16E8: A0 09 00     	ldy	#$9
  7480 08:16EB: D7 18        	cmp	[<L242+fs_0],Y
  7481 08:16ED: 90 03        	bcc	L259
  7482 08:16EF: 82 2D 00     	brl	L258
  7483                        L259:
  7484 08:16F2: D4 0F        	pei	<L243+szb_1
  7485 08:16F4: A5 0D        	lda	<L243+n_1
  7486 08:16F6: 85 01        	sta	<R0
  7487 08:16F8: 64 03        	stz	<R0+2
  7488 08:16FA: 18           	clc
  7489 08:16FB: A5 01        	lda	<R0
  7490 08:16FD: 65 09        	adc	<L243+sect_1
  7491 08:16FF: 85 05        	sta	<R1
  7492 08:1701: A5 03        	lda	<R0+2
  7493 08:1703: 65 0B        	adc	<L243+sect_1+2
  7494 08:1705: 85 07        	sta	<R1+2
  7495 08:1707: D4 07        	pei	<R1+2
  7496 08:1709: D4 05        	pei	<R1
  7497 08:170B: D4 13        	pei	<L243+ibuf_1+2
  7498 08:170D: D4 11        	pei	<L243+ibuf_1
  7499 08:170F: A0 01 00     	ldy	#$1
  7500 08:1712: B7 18        	lda	[<L242+fs_0],Y
  7501 08:1714: 48           	pha
  7502 08:1715: 22 xx xx xx  	jsl	~~disk_write
  7503 08:1719: AA           	tax
  7504 08:171A: D0 03        	bne	L260
  7505 08:171C: 82 C0 FF     	brl	L10111
  7506                        L260:
  7507                        L258:
  7508                        L10110:
  7509                        ;	}
  7510                        	.line	1874
  7511                        L10108:
  7512                        ;
  7513                        ;	//k_debug_long("dir_clear:ret:",(n == fs->csize)
                    );
  7514                        ;
  7515                        ;	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
  7516                        	.line	1878
  7517 08:171F: A5 0D        	lda	<L243+n_1
  7518 08:1721: A0 09 00     	ldy	#$9
  7519 08:1724: D7 18        	cmp	[<L242+fs_0],Y
  7520 08:1726: F0 03        	beq	L262
  7521 08:1728: 82 05 00     	brl	L261
  7522                        L262:
  7523 08:172B: A9 00 00     	lda	#$0
  7524 08:172E: 80 03        	bra	L263
  7525                        L261:
  Mon Aug  9 2021 16:52                                                Page 149


  7526 08:1730: A9 01 00     	lda	#$1
  7527                        L263:
  7528 08:1733: 82 67 FE     	brl	L246
  7529                        ;}
  7530                        	.line	1879
  7531                        	.endblock	1879
  7532             00000014   L242	equ	20
  7533             00000009   L243	equ	9
  7534 08:1736:              	ends
  7535                        	efunc
  7536                        	.endfunc	1879,9,20
  7537                        	.line	1879
  7538                        ;#endif	/* !FF_FS_READONLY */
  7539                        ;
  7540                        ;/*-----------------------------------------------
                    ------------------------*/
  7541                        ;/* Directory handling - Set directory index      
                                            */
  7542                        ;/*-----------------------------------------------
                    ------------------------*/
  7543                        ;
  7544                        ;static FRESULT dir_sdi( /* FR_OK(0):succeeded, !=
                    0:error */
  7545                        ;DIR* dp, /* Pointer to directory object */
  7546                        ;DWORD ofs /* Offset of directory table */
  7547                        ;)
  7548                        ;{
  7549                        	.line	1886
  7550                        	.line	1890
  7551                        	FFDOS
  7552                        	func
  7553                        	.function	1890
  7554                        ~~dir_sdi:
  7555                        	longa	on
  7556                        	longi	on
  7557 08:1736: 3B           	tsc
  7558 08:1737: 38           	sec
  7559 08:1738: E9 14 00     	sbc	#L264
  7560 08:173B: 1B           	tcs
  7561 08:173C: 0B           	phd
  7562 08:173D: 5B           	tcd
  7563             00000004   dp_0	set	4
  7564             00000008   ofs_0	set	8
  7565                        	.block	1890
  7566                        ;	DWORD csz, clst;
  7567                        ;	FATFS *fs = dp->obj.fs;
  7568                        ;
  7569                        ;	if (ofs
  7570             00000000   csz_1	set	0
  7571             00000004   clst_1	set	4
  7572             00000008   fs_1	set	8
  7573                        	.sym	csz,0,18,1,32
  7574                        	.sym	clst,4,18,1,32
  7575                        	.sym	fs,8,138,1,32,75
  7576                        	.sym	dp,4,138,6,32,78
  7577                        	.sym	ofs,8,18,6,32
  7578 08:173E: A7 18        	lda	[<L264+dp_0]
  7579 08:1740: 85 11        	sta	<L265+fs_1
  Mon Aug  9 2021 16:52                                                Page 150


  7580 08:1742: A0 02 00     	ldy	#$2
  7581 08:1745: B7 18        	lda	[<L264+dp_0],Y
  7582 08:1747: 85 13        	sta	<L265+fs_1+2
  7583                        	.line	1894
  7584                        ;			>= (DWORD) (
  7585                        ;					(FF_FS_EXFAT && 
                    fs->fs_type == FS_EXFAT) ?
  7586                        ;							
                    MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
  7587                        ;	{ /* Check range of offset and alignment */
  7588 08:1749: 82 16 00     	brl	L268
  7589 08:174C: E2 20        	sep	#$20
  7590                        	longa	off
  7591 08:174E: A7 11        	lda	[<L265+fs_1]
  7592 08:1750: C9 04        	cmp	#<$4
  7593 08:1752: C2 20        	rep	#$20
  7594                        	longa	on
  7595 08:1754: F0 03        	beq	L269
  7596 08:1756: 82 09 00     	brl	L268
  7597                        L269:
  7598 08:1759: A9 00 10     	lda	#$1000
  7599 08:175C: AA           	tax
  7600 08:175D: A9 00 00     	lda	#$0
  7601 08:1760: 80 07        	bra	L270
  7602                        L268:
  7603 08:1762: A9 20 00     	lda	#$20
  7604 08:1765: AA           	tax
  7605 08:1766: A9 00 00     	lda	#$0
  7606                        L270:
  7607 08:1769: 85 01        	sta	<R0
  7608 08:176B: 86 03        	stx	<R0+2
  7609 08:176D: A5 1C        	lda	<L264+ofs_0
  7610 08:176F: C5 01        	cmp	<R0
  7611 08:1771: A5 1E        	lda	<L264+ofs_0+2
  7612 08:1773: E5 03        	sbc	<R0+2
  7613 08:1775: 90 03        	bcc	L271
  7614 08:1777: 82 0A 00     	brl	L267
  7615                        L271:
  7616 08:177A: A5 1C        	lda	<L264+ofs_0
  7617 08:177C: 29 1F 00     	and	#<$1f
  7618 08:177F: D0 03        	bne	L272
  7619 08:1781: 82 15 00     	brl	L10113
  7620                        L272:
  7621                        L267:
  7622                        	.line	1898
  7623                        ;		return FR_INT_ERR;
  7624                        	.line	1899
  7625 08:1784: A9 02 00     	lda	#$2
  7626                        L273:
  7627 08:1787: A8           	tay
  7628 08:1788: A5 16        	lda	<L264+2
  7629 08:178A: 85 1E        	sta	<L264+2+8
  7630 08:178C: A5 15        	lda	<L264+1
  7631 08:178E: 85 1D        	sta	<L264+1+8
  7632 08:1790: 2B           	pld
  7633 08:1791: 3B           	tsc
  7634 08:1792: 18           	clc
  7635 08:1793: 69 1C 00     	adc	#L264+8
  Mon Aug  9 2021 16:52                                                Page 151


  7636 08:1796: 1B           	tcs
  7637 08:1797: 98           	tya
  7638 08:1798: 6B           	rtl
  7639                        ;	}
  7640                        	.line	1900
  7641                        ;	dp->dptr = ofs; /* Set current offset */
  7642                        L10113:
  7643                        	.line	1901
  7644 08:1799: A5 1C        	lda	<L264+ofs_0
  7645 08:179B: A0 10 00     	ldy	#$10
  7646 08:179E: 97 18        	sta	[<L264+dp_0],Y
  7647 08:17A0: A5 1E        	lda	<L264+ofs_0+2
  7648 08:17A2: A0 12 00     	ldy	#$12
  7649 08:17A5: 97 18        	sta	[<L264+dp_0],Y
  7650                        ;	clst = dp->obj.sclust; /* Table start cluster (0
                    :root) */
  7651                        	.line	1902
  7652 08:17A7: A0 08 00     	ldy	#$8
  7653 08:17AA: B7 18        	lda	[<L264+dp_0],Y
  7654 08:17AC: 85 0D        	sta	<L265+clst_1
  7655 08:17AE: A0 0A 00     	ldy	#$a
  7656 08:17B1: B7 18        	lda	[<L264+dp_0],Y
  7657 08:17B3: 85 0F        	sta	<L265+clst_1+2
  7658                        ;	if (clst == 0 && fs->fs_type >= FS_FAT32)
  7659                        	.line	1903
  7660                        ;	{ /* Replace cluster# 0 with root cluster# */
  7661 08:17B5: A5 0D        	lda	<L265+clst_1
  7662 08:17B7: 05 0F        	ora	<L265+clst_1+2
  7663 08:17B9: F0 03        	beq	L274
  7664 08:17BB: 82 29 00     	brl	L10114
  7665                        L274:
  7666 08:17BE: E2 20        	sep	#$20
  7667                        	longa	off
  7668 08:17C0: A7 11        	lda	[<L265+fs_1]
  7669 08:17C2: C9 03        	cmp	#<$3
  7670 08:17C4: C2 20        	rep	#$20
  7671                        	longa	on
  7672 08:17C6: B0 03        	bcs	L275
  7673 08:17C8: 82 1C 00     	brl	L10114
  7674                        L275:
  7675                        	.line	1904
  7676                        ;		clst = (DWORD) fs->dirbase;
  7677                        	.line	1905
  7678 08:17CB: A0 27 00     	ldy	#$27
  7679 08:17CE: B7 11        	lda	[<L265+fs_1],Y
  7680 08:17D0: 85 0D        	sta	<L265+clst_1
  7681 08:17D2: A0 29 00     	ldy	#$29
  7682 08:17D5: B7 11        	lda	[<L265+fs_1],Y
  7683 08:17D7: 85 0F        	sta	<L265+clst_1+2
  7684                        ;		if (FF_FS_EXFAT)
  7685                        	.line	1906
  7686                        ;			dp->obj.stat = 0; /* exFAT: Root
                     dir has an FAT chain */
  7687 08:17D9: 82 0B 00     	brl	L10115
  7688                        	.line	1907
  7689 08:17DC: E2 20        	sep	#$20
  7690                        	longa	off
  7691 08:17DE: A9 00        	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 152


  7692 08:17E0: A0 07 00     	ldy	#$7
  7693 08:17E3: 97 18        	sta	[<L264+dp_0],Y
  7694 08:17E5: C2 20        	rep	#$20
  7695                        	longa	on
  7696                        ;	}
  7697                        L10115:
  7698                        	.line	1908
  7699                        ;
  7700                        ;	if (clst == 0)
  7701                        L10114:
  7702                        	.line	1910
  7703                        ;	{ /* Static table (root-directory on the FAT vol
                    ume) */
  7704 08:17E7: A5 0D        	lda	<L265+clst_1
  7705 08:17E9: 05 0F        	ora	<L265+clst_1+2
  7706 08:17EB: F0 03        	beq	L276
  7707 08:17ED: 82 4C 00     	brl	L10116
  7708                        L276:
  7709                        	.line	1911
  7710                        ;		if (ofs / SZDIRE >= fs->n_rootdir)
  7711                        	.line	1912
  7712                        ;			return FR_INT_ERR; /* Is index o
                    ut of range? */
  7713 08:17F0: A0 00 00     	ldy	#$0
  7714 08:17F3: 5A           	phy
  7715 08:17F4: A0 07 00     	ldy	#$7
  7716 08:17F7: B7 11        	lda	[<L265+fs_1],Y
  7717 08:17F9: 7A           	ply
  7718 08:17FA: 2A           	rol	A
  7719 08:17FB: 6A           	ror	A
  7720 08:17FC: 10 01        	bpl	L277
  7721 08:17FE: 88           	dey
  7722                        L277:
  7723 08:17FF: 85 01        	sta	<R0
  7724 08:1801: 84 03        	sty	<R0+2
  7725 08:1803: D4 1E        	pei	<L264+ofs_0+2
  7726 08:1805: D4 1C        	pei	<L264+ofs_0
  7727 08:1807: A9 05 00     	lda	#$5
  7728                        	xref	~~~llsr
  7729 08:180A: 22 xx xx xx  	jsl	~~~llsr
  7730 08:180E: 85 05        	sta	<R1
  7731 08:1810: 86 07        	stx	<R1+2
  7732 08:1812: A5 05        	lda	<R1
  7733 08:1814: C5 01        	cmp	<R0
  7734 08:1816: A5 07        	lda	<R1+2
  7735 08:1818: E5 03        	sbc	<R0+2
  7736 08:181A: B0 03        	bcs	L278
  7737 08:181C: 82 06 00     	brl	L10117
  7738                        L278:
  7739                        	.line	1913
  7740 08:181F: A9 02 00     	lda	#$2
  7741 08:1822: 82 62 FF     	brl	L273
  7742                        ;		dp->sect = fs->dirbase;
  7743                        L10117:
  7744                        	.line	1914
  7745 08:1825: A0 27 00     	ldy	#$27
  7746 08:1828: B7 11        	lda	[<L265+fs_1],Y
  7747 08:182A: A0 18 00     	ldy	#$18
  Mon Aug  9 2021 16:52                                                Page 153


  7748 08:182D: 97 18        	sta	[<L264+dp_0],Y
  7749 08:182F: A0 29 00     	ldy	#$29
  7750 08:1832: B7 11        	lda	[<L265+fs_1],Y
  7751 08:1834: A0 1A 00     	ldy	#$1a
  7752 08:1837: 97 18        	sta	[<L264+dp_0],Y
  7753                        ;
  7754                        ;	}
  7755                        	.line	1916
  7756                        ;	else
  7757 08:1839: 82 AC 00     	brl	L10118
  7758                        L10116:
  7759                        ;	{ /* Dynamic table (sub-directory or root-direct
                    ory on the FAT32/exFAT volume) */
  7760                        	.line	1918
  7761                        ;		csz = (DWORD) fs->csize * SS(fs); /* Byt
                    es per cluster */
  7762                        	.line	1919
  7763 08:183C: A0 00 00     	ldy	#$0
  7764 08:183F: 5A           	phy
  7765 08:1840: A0 09 00     	ldy	#$9
  7766 08:1843: B7 11        	lda	[<L265+fs_1],Y
  7767 08:1845: 7A           	ply
  7768 08:1846: 2A           	rol	A
  7769 08:1847: 6A           	ror	A
  7770 08:1848: 10 01        	bpl	L279
  7771 08:184A: 88           	dey
  7772                        L279:
  7773 08:184B: 85 01        	sta	<R0
  7774 08:184D: 84 03        	sty	<R0+2
  7775 08:184F: D4 03        	pei	<R0+2
  7776 08:1851: D4 01        	pei	<R0
  7777 08:1853: A9 09 00     	lda	#$9
  7778                        	xref	~~~lasl
  7779 08:1856: 22 xx xx xx  	jsl	~~~lasl
  7780 08:185A: 85 09        	sta	<L265+csz_1
  7781 08:185C: 86 0B        	stx	<L265+csz_1+2
  7782                        ;		while (ofs >= csz)
  7783                        	.line	1920
  7784                        L10119:
  7785 08:185E: A5 1C        	lda	<L264+ofs_0
  7786 08:1860: C5 09        	cmp	<L265+csz_1
  7787 08:1862: A5 1E        	lda	<L264+ofs_0+2
  7788 08:1864: E5 0B        	sbc	<L265+csz_1+2
  7789 08:1866: B0 03        	bcs	L280
  7790 08:1868: 82 5F 00     	brl	L10120
  7791                        L280:
  7792                        ;		{ /* Follow cluster chain */
  7793                        	.line	1921
  7794                        ;			clst = get_fat(&dp->obj, clst); 
                    /* Get next cluster */
  7795                        	.line	1922
  7796 08:186B: D4 0F        	pei	<L265+clst_1+2
  7797 08:186D: D4 0D        	pei	<L265+clst_1
  7798 08:186F: D4 1A        	pei	<L264+dp_0+2
  7799 08:1871: D4 18        	pei	<L264+dp_0
  7800 08:1873: 22 2A 0B 08  	jsl	~~get_fat
  7801 08:1877: 85 0D        	sta	<L265+clst_1
  7802 08:1879: 86 0F        	stx	<L265+clst_1+2
  Mon Aug  9 2021 16:52                                                Page 154


  7803                        ;			if (clst == 0xFFFFFFFF)
  7804                        	.line	1923
  7805                        ;				return FR_DISK_ERR; /* D
                    isk error */
  7806 08:187B: A5 0D        	lda	<L265+clst_1
  7807 08:187D: C9 FF FF     	cmp	#<$ffffffff
  7808 08:1880: D0 05        	bne	L281
  7809 08:1882: A5 0F        	lda	<L265+clst_1+2
  7810 08:1884: C9 FF FF     	cmp	#^$ffffffff
  7811                        L281:
  7812 08:1887: F0 03        	beq	L282
  7813 08:1889: 82 06 00     	brl	L10121
  7814                        L282:
  7815                        	.line	1924
  7816 08:188C: A9 01 00     	lda	#$1
  7817 08:188F: 82 F5 FE     	brl	L273
  7818                        ;			if (clst < 2 || clst >= fs->n_fa
                    tent)
  7819                        L10121:
  7820                        	.line	1925
  7821                        ;				return FR_INT_ERR; /* Re
                    ached to end of table or internal error */
  7822 08:1892: A5 0D        	lda	<L265+clst_1
  7823 08:1894: C9 02 00     	cmp	#<$2
  7824 08:1897: A5 0F        	lda	<L265+clst_1+2
  7825 08:1899: E9 00 00     	sbc	#^$2
  7826 08:189C: B0 03        	bcs	L284
  7827 08:189E: 82 13 00     	brl	L283
  7828                        L284:
  7829 08:18A1: A5 0D        	lda	<L265+clst_1
  7830 08:18A3: A0 17 00     	ldy	#$17
  7831 08:18A6: D7 11        	cmp	[<L265+fs_1],Y
  7832 08:18A8: A5 0F        	lda	<L265+clst_1+2
  7833 08:18AA: A0 19 00     	ldy	#$19
  7834 08:18AD: F7 11        	sbc	[<L265+fs_1],Y
  7835 08:18AF: B0 03        	bcs	L285
  7836 08:18B1: 82 06 00     	brl	L10122
  7837                        L285:
  7838                        L283:
  7839                        	.line	1926
  7840 08:18B4: A9 02 00     	lda	#$2
  7841 08:18B7: 82 CD FE     	brl	L273
  7842                        ;			ofs -= csz;
  7843                        L10122:
  7844                        	.line	1927
  7845 08:18BA: 38           	sec
  7846 08:18BB: A5 1C        	lda	<L264+ofs_0
  7847 08:18BD: E5 09        	sbc	<L265+csz_1
  7848 08:18BF: 85 1C        	sta	<L264+ofs_0
  7849 08:18C1: A5 1E        	lda	<L264+ofs_0+2
  7850 08:18C3: E5 0B        	sbc	<L265+csz_1+2
  7851 08:18C5: 85 1E        	sta	<L264+ofs_0+2
  7852                        ;		}
  7853                        	.line	1928
  7854 08:18C7: 82 94 FF     	brl	L10119
  7855                        L10120:
  7856                        ;		dp->sect = clst2sect(fs, clst);
  7857                        	.line	1929
  Mon Aug  9 2021 16:52                                                Page 155


  7858 08:18CA: D4 0F        	pei	<L265+clst_1+2
  7859 08:18CC: D4 0D        	pei	<L265+clst_1
  7860 08:18CE: D4 13        	pei	<L265+fs_1+2
  7861 08:18D0: D4 11        	pei	<L265+fs_1
  7862 08:18D2: 22 9B 0A 08  	jsl	~~clst2sect
  7863 08:18D6: 85 01        	sta	<R0
  7864 08:18D8: 86 03        	stx	<R0+2
  7865 08:18DA: A5 01        	lda	<R0
  7866 08:18DC: A0 18 00     	ldy	#$18
  7867 08:18DF: 97 18        	sta	[<L264+dp_0],Y
  7868 08:18E1: A5 03        	lda	<R0+2
  7869 08:18E3: A0 1A 00     	ldy	#$1a
  7870 08:18E6: 97 18        	sta	[<L264+dp_0],Y
  7871                        ;	}
  7872                        	.line	1930
  7873                        L10118:
  7874                        ;	dp->clust = clst; /* Current cluster# */
  7875                        	.line	1931
  7876 08:18E8: A5 0D        	lda	<L265+clst_1
  7877 08:18EA: A0 14 00     	ldy	#$14
  7878 08:18ED: 97 18        	sta	[<L264+dp_0],Y
  7879 08:18EF: A5 0F        	lda	<L265+clst_1+2
  7880 08:18F1: A0 16 00     	ldy	#$16
  7881 08:18F4: 97 18        	sta	[<L264+dp_0],Y
  7882                        ;	if (dp->sect == 0)
  7883                        	.line	1932
  7884                        ;		return FR_INT_ERR;
  7885 08:18F6: A0 18 00     	ldy	#$18
  7886 08:18F9: B7 18        	lda	[<L264+dp_0],Y
  7887 08:18FB: A0 1A 00     	ldy	#$1a
  7888 08:18FE: 17 18        	ora	[<L264+dp_0],Y
  7889 08:1900: F0 03        	beq	L286
  7890 08:1902: 82 06 00     	brl	L10123
  7891                        L286:
  7892                        	.line	1933
  7893 08:1905: A9 02 00     	lda	#$2
  7894 08:1908: 82 7C FE     	brl	L273
  7895                        ;	dp->sect += ofs / SS(fs); /* Sector# of the dire
                    ctory entry */
  7896                        L10123:
  7897                        	.line	1934
  7898 08:190B: 18           	clc
  7899 08:190C: A9 18 00     	lda	#$18
  7900 08:190F: 65 18        	adc	<L264+dp_0
  7901 08:1911: 85 01        	sta	<R0
  7902 08:1913: A9 00 00     	lda	#$0
  7903 08:1916: 65 1A        	adc	<L264+dp_0+2
  7904 08:1918: 85 03        	sta	<R0+2
  7905 08:191A: D4 1E        	pei	<L264+ofs_0+2
  7906 08:191C: D4 1C        	pei	<L264+ofs_0
  7907 08:191E: A9 09 00     	lda	#$9
  7908                        	xref	~~~llsr
  7909 08:1921: 22 xx xx xx  	jsl	~~~llsr
  7910 08:1925: 85 05        	sta	<R1
  7911 08:1927: 86 07        	stx	<R1+2
  7912 08:1929: 18           	clc
  7913 08:192A: A5 05        	lda	<R1
  7914 08:192C: 67 01        	adc	[<R0]
  Mon Aug  9 2021 16:52                                                Page 156


  7915 08:192E: 87 01        	sta	[<R0]
  7916 08:1930: A5 07        	lda	<R1+2
  7917 08:1932: A0 02 00     	ldy	#$2
  7918 08:1935: 77 01        	adc	[<R0],Y
  7919 08:1937: A0 02 00     	ldy	#$2
  7920 08:193A: 97 01        	sta	[<R0],Y
  7921                        ;	dp->dir = fs->win + (ofs % SS(fs)); /* Pointer t
                    o the entry in the win[] */
  7922                        	.line	1935
  7923 08:193C: A5 1C        	lda	<L264+ofs_0
  7924 08:193E: 29 FF 01     	and	#<$1ff
  7925 08:1941: 85 01        	sta	<R0
  7926 08:1943: 64 03        	stz	<R0+2
  7927 08:1945: 18           	clc
  7928 08:1946: A9 33 00     	lda	#$33
  7929 08:1949: 65 01        	adc	<R0
  7930 08:194B: 85 05        	sta	<R1
  7931 08:194D: A9 00 00     	lda	#$0
  7932 08:1950: 65 03        	adc	<R0+2
  7933 08:1952: 85 07        	sta	<R1+2
  7934 08:1954: 18           	clc
  7935 08:1955: A5 11        	lda	<L265+fs_1
  7936 08:1957: 65 05        	adc	<R1
  7937 08:1959: 85 01        	sta	<R0
  7938 08:195B: A5 13        	lda	<L265+fs_1+2
  7939 08:195D: 65 07        	adc	<R1+2
  7940 08:195F: 85 03        	sta	<R0+2
  7941 08:1961: A5 01        	lda	<R0
  7942 08:1963: A0 1C 00     	ldy	#$1c
  7943 08:1966: 97 18        	sta	[<L264+dp_0],Y
  7944 08:1968: A5 03        	lda	<R0+2
  7945 08:196A: A0 1E 00     	ldy	#$1e
  7946 08:196D: 97 18        	sta	[<L264+dp_0],Y
  7947                        ;
  7948                        ;	return FR_OK;
  7949                        	.line	1937
  7950 08:196F: A9 00 00     	lda	#$0
  7951 08:1972: 82 12 FE     	brl	L273
  7952                        ;}
  7953                        	.line	1938
  7954                        	.endblock	1938
  7955             00000014   L264	equ	20
  7956             00000009   L265	equ	9
  7957 08:1975:              	ends
  7958                        	efunc
  7959                        	.endfunc	1938,9,20
  7960                        	.line	1938
  7961                        ;
  7962                        ;/*-----------------------------------------------
                    ------------------------*/
  7963                        ;/* Directory handling - Move directory table inde
                    x next                  */
  7964                        ;/*-----------------------------------------------
                    ------------------------*/
  7965                        ;
  7966                        ;static FRESULT dir_next( /* FR_OK(0):succeeded, F
                    R_NO_FILE:End of table, FR_DENIED:Could not stretch */
  7967                        ;DIR* dp, /* Pointer to the directory object */
  Mon Aug  9 2021 16:52                                                Page 157


  7968                        ;int stretch /* 0: Do not stretch table, 1: Stretc
                    h table if needed */
  7969                        ;)
  7970                        ;{
  7971                        	.line	1944
  7972                        	.line	1948
  7973                        	FFDOS
  7974                        	func
  7975                        	.function	1948
  7976                        ~~dir_next:
  7977                        	longa	on
  7978                        	longi	on
  7979 08:1975: 3B           	tsc
  7980 08:1976: 38           	sec
  7981 08:1977: E9 18 00     	sbc	#L287
  7982 08:197A: 1B           	tcs
  7983 08:197B: 0B           	phd
  7984 08:197C: 5B           	tcd
  7985             00000004   dp_0	set	4
  7986             00000008   stretch_0	set	8
  7987                        	.block	1948
  7988                        ;	DWORD ofs, clst;
  7989                        ;	FATFS *fs = dp->obj.fs;
  7990                        ;
  7991                        ;	ofs = dp->dptr + SZDIRE; /* Next entry */
  7992             00000000   ofs_1	set	0
  7993             00000004   clst_1	set	4
  7994             00000008   fs_1	set	8
  7995                        	.sym	ofs,0,18,1,32
  7996                        	.sym	clst,4,18,1,32
  7997                        	.sym	fs,8,138,1,32,75
  7998                        	.sym	dp,4,138,6,32,78
  7999                        	.sym	stretch,8,5,6,16
  8000 08:197D: A7 1C        	lda	[<L287+dp_0]
  8001 08:197F: 85 15        	sta	<L288+fs_1
  8002 08:1981: A0 02 00     	ldy	#$2
  8003 08:1984: B7 1C        	lda	[<L287+dp_0],Y
  8004 08:1986: 85 17        	sta	<L288+fs_1+2
  8005                        	.line	1952
  8006 08:1988: 18           	clc
  8007 08:1989: A9 20 00     	lda	#$20
  8008 08:198C: A0 10 00     	ldy	#$10
  8009 08:198F: 77 1C        	adc	[<L287+dp_0],Y
  8010 08:1991: 85 0D        	sta	<L288+ofs_1
  8011 08:1993: A9 00 00     	lda	#$0
  8012 08:1996: A0 12 00     	ldy	#$12
  8013 08:1999: 77 1C        	adc	[<L287+dp_0],Y
  8014 08:199B: 85 0F        	sta	<L288+ofs_1+2
  8015                        ;	if (ofs
  8016                        	.line	1953
  8017                        ;			>= (DWORD) (
  8018                        ;					(FF_FS_EXFAT && 
                    fs->fs_type == FS_EXFAT) ?
  8019                        ;							
                    MAX_DIR_EX : MAX_DIR))
  8020                        ;		dp->sect = 0; /* Disable it if the offse
                    t reached the max value */
  8021 08:199D: 82 16 00     	brl	L290
  Mon Aug  9 2021 16:52                                                Page 158


  8022 08:19A0: E2 20        	sep	#$20
  8023                        	longa	off
  8024 08:19A2: A7 15        	lda	[<L288+fs_1]
  8025 08:19A4: C9 04        	cmp	#<$4
  8026 08:19A6: C2 20        	rep	#$20
  8027                        	longa	on
  8028 08:19A8: F0 03        	beq	L291
  8029 08:19AA: 82 09 00     	brl	L290
  8030                        L291:
  8031 08:19AD: A9 00 10     	lda	#$1000
  8032 08:19B0: AA           	tax
  8033 08:19B1: A9 00 00     	lda	#$0
  8034 08:19B4: 80 07        	bra	L292
  8035                        L290:
  8036 08:19B6: A9 20 00     	lda	#$20
  8037 08:19B9: AA           	tax
  8038 08:19BA: A9 00 00     	lda	#$0
  8039                        L292:
  8040 08:19BD: 85 01        	sta	<R0
  8041 08:19BF: 86 03        	stx	<R0+2
  8042 08:19C1: A5 0D        	lda	<L288+ofs_1
  8043 08:19C3: C5 01        	cmp	<R0
  8044 08:19C5: A5 0F        	lda	<L288+ofs_1+2
  8045 08:19C7: E5 03        	sbc	<R0+2
  8046 08:19C9: B0 03        	bcs	L293
  8047 08:19CB: 82 10 00     	brl	L10124
  8048                        L293:
  8049                        	.line	1957
  8050 08:19CE: A9 00 00     	lda	#$0
  8051 08:19D1: A0 18 00     	ldy	#$18
  8052 08:19D4: 97 1C        	sta	[<L287+dp_0],Y
  8053 08:19D6: A9 00 00     	lda	#$0
  8054 08:19D9: A0 1A 00     	ldy	#$1a
  8055 08:19DC: 97 1C        	sta	[<L287+dp_0],Y
  8056                        ;	if (dp->sect == 0)
  8057                        L10124:
  8058                        	.line	1958
  8059                        ;		return FR_NO_FILE; /* Report EOT if it h
                    as been disabled */
  8060 08:19DE: A0 18 00     	ldy	#$18
  8061 08:19E1: B7 1C        	lda	[<L287+dp_0],Y
  8062 08:19E3: A0 1A 00     	ldy	#$1a
  8063 08:19E6: 17 1C        	ora	[<L287+dp_0],Y
  8064 08:19E8: F0 03        	beq	L294
  8065 08:19EA: 82 15 00     	brl	L10125
  8066                        L294:
  8067                        	.line	1959
  8068 08:19ED: A9 04 00     	lda	#$4
  8069                        L295:
  8070 08:19F0: A8           	tay
  8071 08:19F1: A5 1A        	lda	<L287+2
  8072 08:19F3: 85 20        	sta	<L287+2+6
  8073 08:19F5: A5 19        	lda	<L287+1
  8074 08:19F7: 85 1F        	sta	<L287+1+6
  8075 08:19F9: 2B           	pld
  8076 08:19FA: 3B           	tsc
  8077 08:19FB: 18           	clc
  8078 08:19FC: 69 1E 00     	adc	#L287+6
  Mon Aug  9 2021 16:52                                                Page 159


  8079 08:19FF: 1B           	tcs
  8080 08:1A00: 98           	tya
  8081 08:1A01: 6B           	rtl
  8082                        ;
  8083                        ;	if (ofs % SS(fs) == 0)
  8084                        L10125:
  8085                        	.line	1961
  8086                        ;	{ /* Sector changed? */
  8087 08:1A02: A5 0D        	lda	<L288+ofs_1
  8088 08:1A04: 29 FF 01     	and	#<$1ff
  8089 08:1A07: F0 03        	beq	L296
  8090 08:1A09: 82 D6 01     	brl	L10126
  8091                        L296:
  8092                        	.line	1962
  8093                        ;		dp->sect++; /* Next sector */
  8094                        	.line	1963
  8095 08:1A0C: 18           	clc
  8096 08:1A0D: A9 01 00     	lda	#$1
  8097 08:1A10: A0 18 00     	ldy	#$18
  8098 08:1A13: 77 1C        	adc	[<L287+dp_0],Y
  8099 08:1A15: A0 18 00     	ldy	#$18
  8100 08:1A18: 97 1C        	sta	[<L287+dp_0],Y
  8101 08:1A1A: A9 00 00     	lda	#$0
  8102 08:1A1D: A0 1A 00     	ldy	#$1a
  8103 08:1A20: 77 1C        	adc	[<L287+dp_0],Y
  8104 08:1A22: A0 1A 00     	ldy	#$1a
  8105 08:1A25: 97 1C        	sta	[<L287+dp_0],Y
  8106                        ;
  8107                        ;		if (dp->clust == 0)
  8108                        	.line	1965
  8109                        ;		{ /* Static table */
  8110 08:1A27: A0 14 00     	ldy	#$14
  8111 08:1A2A: B7 1C        	lda	[<L287+dp_0],Y
  8112 08:1A2C: A0 16 00     	ldy	#$16
  8113 08:1A2F: 17 1C        	ora	[<L287+dp_0],Y
  8114 08:1A31: F0 03        	beq	L297
  8115 08:1A33: 82 48 00     	brl	L10127
  8116                        L297:
  8117                        	.line	1966
  8118                        ;			if (ofs / SZDIRE >= fs->n_rootdi
                    r)
  8119                        	.line	1967
  8120                        ;			{ /* Report EOT if it reached en
                    d of static table */
  8121 08:1A36: A0 00 00     	ldy	#$0
  8122 08:1A39: 5A           	phy
  8123 08:1A3A: A0 07 00     	ldy	#$7
  8124 08:1A3D: B7 15        	lda	[<L288+fs_1],Y
  8125 08:1A3F: 7A           	ply
  8126 08:1A40: 2A           	rol	A
  8127 08:1A41: 6A           	ror	A
  8128 08:1A42: 10 01        	bpl	L298
  8129 08:1A44: 88           	dey
  8130                        L298:
  8131 08:1A45: 85 01        	sta	<R0
  8132 08:1A47: 84 03        	sty	<R0+2
  8133 08:1A49: D4 0F        	pei	<L288+ofs_1+2
  8134 08:1A4B: D4 0D        	pei	<L288+ofs_1
  Mon Aug  9 2021 16:52                                                Page 160


  8135 08:1A4D: A9 05 00     	lda	#$5
  8136                        	xref	~~~llsr
  8137 08:1A50: 22 xx xx xx  	jsl	~~~llsr
  8138 08:1A54: 85 05        	sta	<R1
  8139 08:1A56: 86 07        	stx	<R1+2
  8140 08:1A58: A5 05        	lda	<R1
  8141 08:1A5A: C5 01        	cmp	<R0
  8142 08:1A5C: A5 07        	lda	<R1+2
  8143 08:1A5E: E5 03        	sbc	<R0+2
  8144 08:1A60: B0 03        	bcs	L299
  8145 08:1A62: 82 16 00     	brl	L10128
  8146                        L299:
  8147                        	.line	1968
  8148                        ;				dp->sect = 0;
  8149                        	.line	1969
  8150 08:1A65: A9 00 00     	lda	#$0
  8151 08:1A68: A0 18 00     	ldy	#$18
  8152 08:1A6B: 97 1C        	sta	[<L287+dp_0],Y
  8153 08:1A6D: A9 00 00     	lda	#$0
  8154 08:1A70: A0 1A 00     	ldy	#$1a
  8155 08:1A73: 97 1C        	sta	[<L287+dp_0],Y
  8156                        ;				return FR_NO_FILE;
  8157                        	.line	1970
  8158 08:1A75: A9 04 00     	lda	#$4
  8159 08:1A78: 82 75 FF     	brl	L295
  8160                        ;			}
  8161                        	.line	1971
  8162                        ;		}
  8163                        L10128:
  8164                        	.line	1972
  8165                        ;		else
  8166 08:1A7B: 82 64 01     	brl	L10129
  8167                        L10127:
  8168                        ;		{ /* Dynamic table */
  8169                        	.line	1974
  8170                        ;			if ((ofs / SS(fs) & (fs->csize -
                     1)) == 0)
  8171                        	.line	1975
  8172                        ;			{ /* Cluster changed? */
  8173 08:1A7E: D4 0F        	pei	<L288+ofs_1+2
  8174 08:1A80: D4 0D        	pei	<L288+ofs_1
  8175 08:1A82: A9 09 00     	lda	#$9
  8176                        	xref	~~~llsr
  8177 08:1A85: 22 xx xx xx  	jsl	~~~llsr
  8178 08:1A89: 85 01        	sta	<R0
  8179 08:1A8B: 86 03        	stx	<R0+2
  8180 08:1A8D: 18           	clc
  8181 08:1A8E: A9 FF FF     	lda	#$ffff
  8182 08:1A91: A0 09 00     	ldy	#$9
  8183 08:1A94: 77 15        	adc	[<L288+fs_1],Y
  8184 08:1A96: 85 05        	sta	<R1
  8185 08:1A98: A0 00 00     	ldy	#$0
  8186 08:1A9B: A5 05        	lda	<R1
  8187 08:1A9D: 10 01        	bpl	L300
  8188 08:1A9F: 88           	dey
  8189                        L300:
  8190 08:1AA0: 85 05        	sta	<R1
  8191 08:1AA2: 84 07        	sty	<R1+2
  Mon Aug  9 2021 16:52                                                Page 161


  8192 08:1AA4: A5 05        	lda	<R1
  8193 08:1AA6: 25 01        	and	<R0
  8194 08:1AA8: 85 09        	sta	<R2
  8195 08:1AAA: A5 07        	lda	<R1+2
  8196 08:1AAC: 25 03        	and	<R0+2
  8197 08:1AAE: 85 0B        	sta	<R2+2
  8198 08:1AB0: A5 09        	lda	<R2
  8199 08:1AB2: 05 0B        	ora	<R2+2
  8200 08:1AB4: F0 03        	beq	L301
  8201 08:1AB6: 82 29 01     	brl	L10130
  8202                        L301:
  8203                        	.line	1976
  8204                        ;				clst = get_fat(&dp->obj,
                     dp->clust); /* Get next cluster */
  8205                        	.line	1977
  8206 08:1AB9: A0 16 00     	ldy	#$16
  8207 08:1ABC: B7 1C        	lda	[<L287+dp_0],Y
  8208 08:1ABE: 48           	pha
  8209 08:1ABF: A0 14 00     	ldy	#$14
  8210 08:1AC2: B7 1C        	lda	[<L287+dp_0],Y
  8211 08:1AC4: 48           	pha
  8212 08:1AC5: D4 1E        	pei	<L287+dp_0+2
  8213 08:1AC7: D4 1C        	pei	<L287+dp_0
  8214 08:1AC9: 22 2A 0B 08  	jsl	~~get_fat
  8215 08:1ACD: 85 11        	sta	<L288+clst_1
  8216 08:1ACF: 86 13        	stx	<L288+clst_1+2
  8217                        ;				if (clst <= 1)
  8218                        	.line	1978
  8219                        ;					return FR_INT_ER
                    R; /* Internal error */
  8220 08:1AD1: A9 01 00     	lda	#$1
  8221 08:1AD4: C5 11        	cmp	<L288+clst_1
  8222 08:1AD6: A9 00 00     	lda	#$0
  8223 08:1AD9: E5 13        	sbc	<L288+clst_1+2
  8224 08:1ADB: B0 03        	bcs	L302
  8225 08:1ADD: 82 06 00     	brl	L10131
  8226                        L302:
  8227                        	.line	1979
  8228 08:1AE0: A9 02 00     	lda	#$2
  8229 08:1AE3: 82 0A FF     	brl	L295
  8230                        ;				if (clst == 0xFFFFFFFF)
  8231                        L10131:
  8232                        	.line	1980
  8233                        ;					return FR_DISK_E
                    RR; /* Disk error */
  8234 08:1AE6: A5 11        	lda	<L288+clst_1
  8235 08:1AE8: C9 FF FF     	cmp	#<$ffffffff
  8236 08:1AEB: D0 05        	bne	L303
  8237 08:1AED: A5 13        	lda	<L288+clst_1+2
  8238 08:1AEF: C9 FF FF     	cmp	#^$ffffffff
  8239                        L303:
  8240 08:1AF2: F0 03        	beq	L304
  8241 08:1AF4: 82 06 00     	brl	L10132
  8242                        L304:
  8243                        	.line	1981
  8244 08:1AF7: A9 01 00     	lda	#$1
  8245 08:1AFA: 82 F3 FE     	brl	L295
  8246                        ;				if (clst >= fs->n_fatent
  Mon Aug  9 2021 16:52                                                Page 162


                    )
  8247                        L10132:
  8248                        	.line	1982
  8249                        ;				{ /* It reached end of d
                    ynamic table */
  8250 08:1AFD: A5 11        	lda	<L288+clst_1
  8251 08:1AFF: A0 17 00     	ldy	#$17
  8252 08:1B02: D7 15        	cmp	[<L288+fs_1],Y
  8253 08:1B04: A5 13        	lda	<L288+clst_1+2
  8254 08:1B06: A0 19 00     	ldy	#$19
  8255 08:1B09: F7 15        	sbc	[<L288+fs_1],Y
  8256 08:1B0B: B0 03        	bcs	L305
  8257 08:1B0D: 82 A6 00     	brl	L10133
  8258                        L305:
  8259                        	.line	1983
  8260                        ;#if !FF_FS_READONLY
  8261                        ;					if (!stretch)
  8262                        	.line	1985
  8263                        ;					{ /* If no stret
                    ch, report EOT */
  8264 08:1B10: A5 20        	lda	<L287+stretch_0
  8265 08:1B12: F0 03        	beq	L306
  8266 08:1B14: 82 16 00     	brl	L10134
  8267                        L306:
  8268                        	.line	1986
  8269                        ;						dp->sect
                     = 0;
  8270                        	.line	1987
  8271 08:1B17: A9 00 00     	lda	#$0
  8272 08:1B1A: A0 18 00     	ldy	#$18
  8273 08:1B1D: 97 1C        	sta	[<L287+dp_0],Y
  8274 08:1B1F: A9 00 00     	lda	#$0
  8275 08:1B22: A0 1A 00     	ldy	#$1a
  8276 08:1B25: 97 1C        	sta	[<L287+dp_0],Y
  8277                        ;						return F
                    R_NO_FILE;
  8278                        	.line	1988
  8279 08:1B27: A9 04 00     	lda	#$4
  8280 08:1B2A: 82 C3 FE     	brl	L295
  8281                        ;					}
  8282                        	.line	1989
  8283                        ;					clst = create_ch
                    ain(&dp->obj, dp->clust); /* Allocate a cluster */
  8284                        L10134:
  8285                        	.line	1990
  8286 08:1B2D: A0 16 00     	ldy	#$16
  8287 08:1B30: B7 1C        	lda	[<L287+dp_0],Y
  8288 08:1B32: 48           	pha
  8289 08:1B33: A0 14 00     	ldy	#$14
  8290 08:1B36: B7 1C        	lda	[<L287+dp_0],Y
  8291 08:1B38: 48           	pha
  8292 08:1B39: D4 1E        	pei	<L287+dp_0+2
  8293 08:1B3B: D4 1C        	pei	<L287+dp_0
  8294 08:1B3D: 22 69 12 08  	jsl	~~create_chain
  8295 08:1B41: 85 11        	sta	<L288+clst_1
  8296 08:1B43: 86 13        	stx	<L288+clst_1+2
  8297                        ;					if (clst == 0)
  8298                        	.line	1991
  Mon Aug  9 2021 16:52                                                Page 163


  8299                        ;						return F
                    R_DENIED; /* No free cluster */
  8300 08:1B45: A5 11        	lda	<L288+clst_1
  8301 08:1B47: 05 13        	ora	<L288+clst_1+2
  8302 08:1B49: F0 03        	beq	L307
  8303 08:1B4B: 82 06 00     	brl	L10135
  8304                        L307:
  8305                        	.line	1992
  8306 08:1B4E: A9 07 00     	lda	#$7
  8307 08:1B51: 82 9C FE     	brl	L295
  8308                        ;					if (clst == 1)
  8309                        L10135:
  8310                        	.line	1993
  8311                        ;						return F
                    R_INT_ERR; /* Internal error */
  8312 08:1B54: A5 11        	lda	<L288+clst_1
  8313 08:1B56: C9 01 00     	cmp	#<$1
  8314 08:1B59: D0 05        	bne	L308
  8315 08:1B5B: A5 13        	lda	<L288+clst_1+2
  8316 08:1B5D: C9 00 00     	cmp	#^$1
  8317                        L308:
  8318 08:1B60: F0 03        	beq	L309
  8319 08:1B62: 82 06 00     	brl	L10136
  8320                        L309:
  8321                        	.line	1994
  8322 08:1B65: A9 02 00     	lda	#$2
  8323 08:1B68: 82 85 FE     	brl	L295
  8324                        ;					if (clst == 0xFF
                    FFFFFF)
  8325                        L10136:
  8326                        	.line	1995
  8327                        ;						return F
                    R_DISK_ERR; /* Disk error */
  8328 08:1B6B: A5 11        	lda	<L288+clst_1
  8329 08:1B6D: C9 FF FF     	cmp	#<$ffffffff
  8330 08:1B70: D0 05        	bne	L310
  8331 08:1B72: A5 13        	lda	<L288+clst_1+2
  8332 08:1B74: C9 FF FF     	cmp	#^$ffffffff
  8333                        L310:
  8334 08:1B77: F0 03        	beq	L311
  8335 08:1B79: 82 06 00     	brl	L10137
  8336                        L311:
  8337                        	.line	1996
  8338 08:1B7C: A9 01 00     	lda	#$1
  8339 08:1B7F: 82 6E FE     	brl	L295
  8340                        ;					if (dir_clear(fs
                    , clst) != FR_OK)
  8341                        L10137:
  8342                        	.line	1997
  8343                        ;						return F
                    R_DISK_ERR; /* Clean up the stretched table */
  8344 08:1B82: D4 13        	pei	<L288+clst_1+2
  8345 08:1B84: D4 11        	pei	<L288+clst_1
  8346 08:1B86: D4 17        	pei	<L288+fs_1+2
  8347 08:1B88: D4 15        	pei	<L288+fs_1
  8348 08:1B8A: 22 84 15 08  	jsl	~~dir_clear
  8349 08:1B8E: AA           	tax
  8350 08:1B8F: D0 03        	bne	L312
  Mon Aug  9 2021 16:52                                                Page 164


  8351 08:1B91: 82 06 00     	brl	L10138
  8352                        L312:
  8353                        	.line	1998
  8354 08:1B94: A9 01 00     	lda	#$1
  8355 08:1B97: 82 56 FE     	brl	L295
  8356                        ;					if (FF_FS_EXFAT)
  8357                        L10138:
  8358                        	.line	1999
  8359                        ;						dp->obj.
                    stat |= 4; /* exFAT: The directory has been stretched */
  8360 08:1B9A: 82 19 00     	brl	L10139
  8361                        	.line	2000
  8362 08:1B9D: 18           	clc
  8363 08:1B9E: A9 07 00     	lda	#$7
  8364 08:1BA1: 65 1C        	adc	<L287+dp_0
  8365 08:1BA3: 85 01        	sta	<R0
  8366 08:1BA5: A9 00 00     	lda	#$0
  8367 08:1BA8: 65 1E        	adc	<L287+dp_0+2
  8368 08:1BAA: 85 03        	sta	<R0+2
  8369 08:1BAC: E2 20        	sep	#$20
  8370                        	longa	off
  8371 08:1BAE: A7 01        	lda	[<R0]
  8372 08:1BB0: 09 04        	ora	#<$4
  8373 08:1BB2: 87 01        	sta	[<R0]
  8374 08:1BB4: C2 20        	rep	#$20
  8375                        	longa	on
  8376                        ;#else
  8377                        ;					if (!stretch) dp
                    ->sect = 0; /* (this line is to suppress compiler warning) *
                    /
  8378                        ;					dp->sect = 0; re
                    turn FR_NO_FILE; /* Report EOT */
  8379                        ;#endif
  8380                        ;				}
  8381                        L10139:
  8382                        	.line	2005
  8383                        ;				dp->clust = clst; /* Ini
                    tialize data for new cluster */
  8384                        L10133:
  8385                        	.line	2006
  8386 08:1BB6: A5 11        	lda	<L288+clst_1
  8387 08:1BB8: A0 14 00     	ldy	#$14
  8388 08:1BBB: 97 1C        	sta	[<L287+dp_0],Y
  8389 08:1BBD: A5 13        	lda	<L288+clst_1+2
  8390 08:1BBF: A0 16 00     	ldy	#$16
  8391 08:1BC2: 97 1C        	sta	[<L287+dp_0],Y
  8392                        ;				dp->sect = clst2sect(fs,
                     clst);
  8393                        	.line	2007
  8394 08:1BC4: D4 13        	pei	<L288+clst_1+2
  8395 08:1BC6: D4 11        	pei	<L288+clst_1
  8396 08:1BC8: D4 17        	pei	<L288+fs_1+2
  8397 08:1BCA: D4 15        	pei	<L288+fs_1
  8398 08:1BCC: 22 9B 0A 08  	jsl	~~clst2sect
  8399 08:1BD0: 85 01        	sta	<R0
  8400 08:1BD2: 86 03        	stx	<R0+2
  8401 08:1BD4: A5 01        	lda	<R0
  8402 08:1BD6: A0 18 00     	ldy	#$18
  Mon Aug  9 2021 16:52                                                Page 165


  8403 08:1BD9: 97 1C        	sta	[<L287+dp_0],Y
  8404 08:1BDB: A5 03        	lda	<R0+2
  8405 08:1BDD: A0 1A 00     	ldy	#$1a
  8406 08:1BE0: 97 1C        	sta	[<L287+dp_0],Y
  8407                        ;			}
  8408                        	.line	2008
  8409                        ;		}
  8410                        L10130:
  8411                        	.line	2009
  8412                        L10129:
  8413                        ;	}
  8414                        	.line	2010
  8415                        ;	dp->dptr = ofs; /* Current entry */
  8416                        L10126:
  8417                        	.line	2011
  8418 08:1BE2: A5 0D        	lda	<L288+ofs_1
  8419 08:1BE4: A0 10 00     	ldy	#$10
  8420 08:1BE7: 97 1C        	sta	[<L287+dp_0],Y
  8421 08:1BE9: A5 0F        	lda	<L288+ofs_1+2
  8422 08:1BEB: A0 12 00     	ldy	#$12
  8423 08:1BEE: 97 1C        	sta	[<L287+dp_0],Y
  8424                        ;	dp->dir = fs->win + ofs % SS(fs); /* Pointer to 
                    the entry in the win[] */
  8425                        	.line	2012
  8426 08:1BF0: A5 0D        	lda	<L288+ofs_1
  8427 08:1BF2: 29 FF 01     	and	#<$1ff
  8428 08:1BF5: 85 01        	sta	<R0
  8429 08:1BF7: 64 03        	stz	<R0+2
  8430 08:1BF9: 18           	clc
  8431 08:1BFA: A9 33 00     	lda	#$33
  8432 08:1BFD: 65 01        	adc	<R0
  8433 08:1BFF: 85 05        	sta	<R1
  8434 08:1C01: A9 00 00     	lda	#$0
  8435 08:1C04: 65 03        	adc	<R0+2
  8436 08:1C06: 85 07        	sta	<R1+2
  8437 08:1C08: 18           	clc
  8438 08:1C09: A5 15        	lda	<L288+fs_1
  8439 08:1C0B: 65 05        	adc	<R1
  8440 08:1C0D: 85 01        	sta	<R0
  8441 08:1C0F: A5 17        	lda	<L288+fs_1+2
  8442 08:1C11: 65 07        	adc	<R1+2
  8443 08:1C13: 85 03        	sta	<R0+2
  8444 08:1C15: A5 01        	lda	<R0
  8445 08:1C17: A0 1C 00     	ldy	#$1c
  8446 08:1C1A: 97 1C        	sta	[<L287+dp_0],Y
  8447 08:1C1C: A5 03        	lda	<R0+2
  8448 08:1C1E: A0 1E 00     	ldy	#$1e
  8449 08:1C21: 97 1C        	sta	[<L287+dp_0],Y
  8450                        ;
  8451                        ;	return FR_OK;
  8452                        	.line	2014
  8453 08:1C23: A9 00 00     	lda	#$0
  8454 08:1C26: 82 C7 FD     	brl	L295
  8455                        ;}
  8456                        	.line	2015
  8457                        	.endblock	2015
  8458             00000018   L287	equ	24
  8459             0000000D   L288	equ	13
  Mon Aug  9 2021 16:52                                                Page 166


  8460 08:1C29:              	ends
  8461                        	efunc
  8462                        	.endfunc	2015,13,24
  8463                        	.line	2015
  8464                        ;
  8465                        ;#if !FF_FS_READONLY
  8466                        ;/*-----------------------------------------------
                    ------------------------*/
  8467                        ;/* Directory handling - Reserve a block of direct
                    ory entries             */
  8468                        ;/*-----------------------------------------------
                    ------------------------*/
  8469                        ;
  8470                        ;static FRESULT dir_alloc( /* FR_OK(0):succeeded, 
                    !=0:error */
  8471                        ;DIR* dp, /* Pointer to the directory object */
  8472                        ;UINT nent /* Number of contiguous entries to allo
                    cate */
  8473                        ;)
  8474                        ;{
  8475                        	.line	2022
  8476                        	.line	2026
  8477                        	FFDOS
  8478                        	func
  8479                        	.function	2026
  8480                        ~~dir_alloc:
  8481                        	longa	on
  8482                        	longi	on
  8483 08:1C29: 3B           	tsc
  8484 08:1C2A: 38           	sec
  8485 08:1C2B: E9 0C 00     	sbc	#L313
  8486 08:1C2E: 1B           	tcs
  8487 08:1C2F: 0B           	phd
  8488 08:1C30: 5B           	tcd
  8489             00000004   dp_0	set	4
  8490             00000008   nent_0	set	8
  8491                        	.block	2026
  8492                        ;	FRESULT res;
  8493                        ;	UINT n;
  8494                        ;	FATFS *fs = dp->obj.fs;
  8495                        ;
  8496                        ;	res = dir_sdi(dp, 0);
  8497             00000000   res_1	set	0
  8498             00000002   n_1	set	2
  8499             00000004   fs_1	set	4
  8500                        	.sym	res,0,5,1,16
  8501                        	.sym	n,2,16,1,16
  8502                        	.sym	fs,4,138,1,32,75
  8503                        	.sym	dp,4,138,6,32,78
  8504                        	.sym	nent,8,16,6,16
  8505 08:1C31: A7 10        	lda	[<L313+dp_0]
  8506 08:1C33: 85 09        	sta	<L314+fs_1
  8507 08:1C35: A0 02 00     	ldy	#$2
  8508 08:1C38: B7 10        	lda	[<L313+dp_0],Y
  8509 08:1C3A: 85 0B        	sta	<L314+fs_1+2
  8510                        	.line	2031
  8511 08:1C3C: F4 00 00     	pea	#^$0
  8512 08:1C3F: F4 00 00     	pea	#<$0
  Mon Aug  9 2021 16:52                                                Page 167


  8513 08:1C42: D4 12        	pei	<L313+dp_0+2
  8514 08:1C44: D4 10        	pei	<L313+dp_0
  8515 08:1C46: 22 36 17 08  	jsl	~~dir_sdi
  8516 08:1C4A: 85 05        	sta	<L314+res_1
  8517                        ;	if (res == FR_OK)
  8518                        	.line	2032
  8519                        ;	{
  8520 08:1C4C: A5 05        	lda	<L314+res_1
  8521 08:1C4E: F0 03        	beq	L316
  8522 08:1C50: 82 76 00     	brl	L10140
  8523                        L316:
  8524                        	.line	2033
  8525                        ;		n = 0;
  8526                        	.line	2034
  8527 08:1C53: 64 07        	stz	<L314+n_1
  8528                        ;		do
  8529                        	.line	2035
  8530                        L10143:
  8531                        ;		{
  8532                        	.line	2036
  8533                        ;			res = move_window(fs, dp->sect);
  8534                        	.line	2037
  8535 08:1C55: A0 1A 00     	ldy	#$1a
  8536 08:1C58: B7 10        	lda	[<L313+dp_0],Y
  8537 08:1C5A: 48           	pha
  8538 08:1C5B: A0 18 00     	ldy	#$18
  8539 08:1C5E: B7 10        	lda	[<L313+dp_0],Y
  8540 08:1C60: 48           	pha
  8541 08:1C61: D4 0B        	pei	<L314+fs_1+2
  8542 08:1C63: D4 09        	pei	<L314+fs_1
  8543 08:1C65: 22 97 08 08  	jsl	~~move_window
  8544 08:1C69: 85 05        	sta	<L314+res_1
  8545                        ;			if (res != FR_OK)
  8546                        	.line	2038
  8547                        ;				break;
  8548 08:1C6B: A5 05        	lda	<L314+res_1
  8549 08:1C6D: F0 03        	beq	L317
  8550 08:1C6F: 82 57 00     	brl	L10142
  8551                        L317:
  8552                        ;#if FF_FS_EXFAT
  8553                        ;			if ((fs->fs_type == FS_EXFAT) ? 
                    (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_
                    Name] == DDEM || dp->dir[DIR_Name] == 0))
  8554                        ;			{
  8555                        ;#else
  8556                        ;			if (dp->dir[DIR_Name] == DDEM ||
                     dp->dir[DIR_Name] == 0)
  8557                        	.line	2044
  8558                        ;			{
  8559 08:1C72: A0 1C 00     	ldy	#$1c
  8560 08:1C75: B7 10        	lda	[<L313+dp_0],Y
  8561 08:1C77: 85 01        	sta	<R0
  8562 08:1C79: A0 1E 00     	ldy	#$1e
  8563 08:1C7C: B7 10        	lda	[<L313+dp_0],Y
  8564 08:1C7E: 85 03        	sta	<R0+2
  8565 08:1C80: E2 20        	sep	#$20
  8566                        	longa	off
  8567 08:1C82: A7 01        	lda	[<R0]
  Mon Aug  9 2021 16:52                                                Page 168


  8568 08:1C84: C9 E5        	cmp	#<$e5
  8569 08:1C86: C2 20        	rep	#$20
  8570                        	longa	on
  8571 08:1C88: D0 03        	bne	L319
  8572 08:1C8A: 82 18 00     	brl	L318
  8573                        L319:
  8574 08:1C8D: A0 1C 00     	ldy	#$1c
  8575 08:1C90: B7 10        	lda	[<L313+dp_0],Y
  8576 08:1C92: 85 01        	sta	<R0
  8577 08:1C94: A0 1E 00     	ldy	#$1e
  8578 08:1C97: B7 10        	lda	[<L313+dp_0],Y
  8579 08:1C99: 85 03        	sta	<R0+2
  8580 08:1C9B: A7 01        	lda	[<R0]
  8581 08:1C9D: 29 FF 00     	and	#$ff
  8582 08:1CA0: F0 03        	beq	L320
  8583 08:1CA2: 82 0E 00     	brl	L10144
  8584                        L320:
  8585                        L318:
  8586                        	.line	2045
  8587                        ;#endif
  8588                        ;				if (++n == nent)
  8589                        	.line	2047
  8590                        ;					break; /* A bloc
                    k of contiguous free entries is found */
  8591 08:1CA5: E6 07        	inc	<L314+n_1
  8592 08:1CA7: A5 07        	lda	<L314+n_1
  8593 08:1CA9: C5 14        	cmp	<L313+nent_0
  8594 08:1CAB: D0 03        	bne	L321
  8595 08:1CAD: 82 19 00     	brl	L10142
  8596                        L321:
  8597                        ;			}
  8598                        	.line	2049
  8599                        ;			else
  8600 08:1CB0: 82 02 00     	brl	L10145
  8601                        L10144:
  8602                        ;			{
  8603                        	.line	2051
  8604                        ;				n = 0; /* Not a blank en
                    try. Restart to search */
  8605                        	.line	2052
  8606 08:1CB3: 64 07        	stz	<L314+n_1
  8607                        ;			}
  8608                        	.line	2053
  8609                        L10145:
  8610                        ;			res = dir_next(dp, 1);
  8611                        	.line	2054
  8612 08:1CB5: F4 01 00     	pea	#<$1
  8613 08:1CB8: D4 12        	pei	<L313+dp_0+2
  8614 08:1CBA: D4 10        	pei	<L313+dp_0
  8615 08:1CBC: 22 75 19 08  	jsl	~~dir_next
  8616 08:1CC0: 85 05        	sta	<L314+res_1
  8617                        ;		} while (res == FR_OK); /* Next entry wi
                    th table stretch enabled */
  8618                        	.line	2055
  8619                        L10141:
  8620 08:1CC2: A5 05        	lda	<L314+res_1
  8621 08:1CC4: D0 03        	bne	L322
  8622 08:1CC6: 82 8C FF     	brl	L10143
  Mon Aug  9 2021 16:52                                                Page 169


  8623                        L322:
  8624                        L10142:
  8625                        ;	}
  8626                        	.line	2056
  8627                        ;
  8628                        ;	if (res == FR_NO_FILE)
  8629                        L10140:
  8630                        	.line	2058
  8631                        ;		res = FR_DENIED; /* No directory entry t
                    o allocate */
  8632 08:1CC9: A5 05        	lda	<L314+res_1
  8633 08:1CCB: C9 04 00     	cmp	#<$4
  8634 08:1CCE: F0 03        	beq	L323
  8635 08:1CD0: 82 05 00     	brl	L10146
  8636                        L323:
  8637                        	.line	2059
  8638 08:1CD3: A9 07 00     	lda	#$7
  8639 08:1CD6: 85 05        	sta	<L314+res_1
  8640                        ;	return res;
  8641                        L10146:
  8642                        	.line	2060
  8643 08:1CD8: A5 05        	lda	<L314+res_1
  8644                        L324:
  8645 08:1CDA: A8           	tay
  8646 08:1CDB: A5 0E        	lda	<L313+2
  8647 08:1CDD: 85 14        	sta	<L313+2+6
  8648 08:1CDF: A5 0D        	lda	<L313+1
  8649 08:1CE1: 85 13        	sta	<L313+1+6
  8650 08:1CE3: 2B           	pld
  8651 08:1CE4: 3B           	tsc
  8652 08:1CE5: 18           	clc
  8653 08:1CE6: 69 12 00     	adc	#L313+6
  8654 08:1CE9: 1B           	tcs
  8655 08:1CEA: 98           	tya
  8656 08:1CEB: 6B           	rtl
  8657                        ;}
  8658                        	.line	2061
  8659                        	.endblock	2061
  8660             0000000C   L313	equ	12
  8661             00000005   L314	equ	5
  8662 08:1CEC:              	ends
  8663                        	efunc
  8664                        	.endfunc	2061,5,12
  8665                        	.line	2061
  8666                        ;
  8667                        ;#endif	/* !FF_FS_READONLY */
  8668                        ;
  8669                        ;/*-----------------------------------------------
                    ------------------------*/
  8670                        ;/* FAT: Directory handling - Load/Store start clu
                    ster number             */
  8671                        ;/*-----------------------------------------------
                    ------------------------*/
  8672                        ;
  8673                        ;static DWORD ld_clust( /* Returns the top cluster
                     value of the SFN entry */
  8674                        ;FATFS* fs, /* Pointer to the fs object */
  8675                        ;const BYTE* dir /* Pointer to the key entry */
  Mon Aug  9 2021 16:52                                                Page 170


  8676                        ;)
  8677                        ;{
  8678                        	.line	2069
  8679                        	.line	2073
  8680                        	FFDOS
  8681                        	func
  8682                        	.function	2073
  8683                        ~~ld_clust:
  8684                        	longa	on
  8685                        	longi	on
  8686 08:1CEC: 3B           	tsc
  8687 08:1CED: 38           	sec
  8688 08:1CEE: E9 10 00     	sbc	#L325
  8689 08:1CF1: 1B           	tcs
  8690 08:1CF2: 0B           	phd
  8691 08:1CF3: 5B           	tcd
  8692             00000004   fs_0	set	4
  8693             00000008   dir_0	set	8
  8694                        	.block	2073
  8695                        ;	DWORD cl;
  8696                        ;
  8697                        ;	cl = ld_word(dir + DIR_FstClusLO);
  8698             00000000   cl_1	set	0
  8699                        	.sym	cl,0,18,1,32
  8700                        	.sym	fs,4,138,6,32,75
  8701                        	.sym	dir,8,142,6,32
  8702                        	.line	2076
  8703 08:1CF4: 18           	clc
  8704 08:1CF5: A9 1A 00     	lda	#$1a
  8705 08:1CF8: 65 18        	adc	<L325+dir_0
  8706 08:1CFA: 85 01        	sta	<R0
  8707 08:1CFC: A9 00 00     	lda	#$0
  8708 08:1CFF: 65 1A        	adc	<L325+dir_0+2
  8709 08:1D01: 85 03        	sta	<R0+2
  8710 08:1D03: D4 03        	pei	<R0+2
  8711 08:1D05: D4 01        	pei	<R0
  8712 08:1D07: 22 00 00 08  	jsl	~~ld_word
  8713 08:1D0B: 85 05        	sta	<R1
  8714 08:1D0D: A0 00 00     	ldy	#$0
  8715 08:1D10: A5 05        	lda	<R1
  8716 08:1D12: 10 01        	bpl	L328
  8717 08:1D14: 88           	dey
  8718                        L328:
  8719 08:1D15: 85 0D        	sta	<L326+cl_1
  8720 08:1D17: 84 0F        	sty	<L326+cl_1+2
  8721                        ;	if (fs->fs_type == FS_FAT32)
  8722                        	.line	2077
  8723                        ;	{
  8724 08:1D19: E2 20        	sep	#$20
  8725                        	longa	off
  8726 08:1D1B: A7 14        	lda	[<L325+fs_0]
  8727 08:1D1D: C9 03        	cmp	#<$3
  8728 08:1D1F: C2 20        	rep	#$20
  8729                        	longa	on
  8730 08:1D21: F0 03        	beq	L329
  8731 08:1D23: 82 40 00     	brl	L10147
  8732                        L329:
  8733                        	.line	2078
  Mon Aug  9 2021 16:52                                                Page 171


  8734                        ;		cl |= (DWORD) ld_word(dir + DIR_FstClusH
                    I) << 16;
  8735                        	.line	2079
  8736 08:1D26: 18           	clc
  8737 08:1D27: A9 14 00     	lda	#$14
  8738 08:1D2A: 65 18        	adc	<L325+dir_0
  8739 08:1D2C: 85 05        	sta	<R1
  8740 08:1D2E: A9 00 00     	lda	#$0
  8741 08:1D31: 65 1A        	adc	<L325+dir_0+2
  8742 08:1D33: 85 07        	sta	<R1+2
  8743 08:1D35: D4 07        	pei	<R1+2
  8744 08:1D37: D4 05        	pei	<R1
  8745 08:1D39: 22 00 00 08  	jsl	~~ld_word
  8746 08:1D3D: 85 09        	sta	<R2
  8747 08:1D3F: A0 00 00     	ldy	#$0
  8748 08:1D42: A5 09        	lda	<R2
  8749 08:1D44: 10 01        	bpl	L330
  8750 08:1D46: 88           	dey
  8751                        L330:
  8752 08:1D47: 85 09        	sta	<R2
  8753 08:1D49: 84 0B        	sty	<R2+2
  8754 08:1D4B: D4 0B        	pei	<R2+2
  8755 08:1D4D: D4 09        	pei	<R2
  8756 08:1D4F: A9 10 00     	lda	#$10
  8757                        	xref	~~~lasl
  8758 08:1D52: 22 xx xx xx  	jsl	~~~lasl
  8759 08:1D56: 85 01        	sta	<R0
  8760 08:1D58: 86 03        	stx	<R0+2
  8761 08:1D5A: A5 0D        	lda	<L326+cl_1
  8762 08:1D5C: 05 01        	ora	<R0
  8763 08:1D5E: 85 0D        	sta	<L326+cl_1
  8764 08:1D60: A5 0F        	lda	<L326+cl_1+2
  8765 08:1D62: 05 03        	ora	<R0+2
  8766 08:1D64: 85 0F        	sta	<L326+cl_1+2
  8767                        ;	}
  8768                        	.line	2080
  8769                        ;
  8770                        ;	return cl;
  8771                        L10147:
  8772                        	.line	2082
  8773 08:1D66: A6 0F        	ldx	<L326+cl_1+2
  8774 08:1D68: A5 0D        	lda	<L326+cl_1
  8775                        L331:
  8776 08:1D6A: A8           	tay
  8777 08:1D6B: A5 12        	lda	<L325+2
  8778 08:1D6D: 85 1A        	sta	<L325+2+8
  8779 08:1D6F: A5 11        	lda	<L325+1
  8780 08:1D71: 85 19        	sta	<L325+1+8
  8781 08:1D73: 2B           	pld
  8782 08:1D74: 3B           	tsc
  8783 08:1D75: 18           	clc
  8784 08:1D76: 69 18 00     	adc	#L325+8
  8785 08:1D79: 1B           	tcs
  8786 08:1D7A: 98           	tya
  8787 08:1D7B: 6B           	rtl
  8788                        ;}
  8789                        	.line	2083
  8790                        	.endblock	2083
  Mon Aug  9 2021 16:52                                                Page 172


  8791             00000010   L325	equ	16
  8792             0000000D   L326	equ	13
  8793 08:1D7C:              	ends
  8794                        	efunc
  8795                        	.endfunc	2083,13,16
  8796                        	.line	2083
  8797                        ;
  8798                        ;#if !FF_FS_READONLY
  8799                        ;static void st_clust(FATFS* fs, /* Pointer to the
                     fs object */
  8800                        ;BYTE* dir, /* Pointer to the key entry */
  8801                        ;DWORD cl /* Value to be set */
  8802                        ;)
  8803                        ;{
  8804                        	.line	2086
  8805                        	.line	2090
  8806                        	FFDOS
  8807                        	func
  8808                        	.function	2090
  8809                        ~~st_clust:
  8810                        	longa	on
  8811                        	longi	on
  8812 08:1D7C: 3B           	tsc
  8813 08:1D7D: 38           	sec
  8814 08:1D7E: E9 08 00     	sbc	#L332
  8815 08:1D81: 1B           	tcs
  8816 08:1D82: 0B           	phd
  8817 08:1D83: 5B           	tcd
  8818             00000004   fs_0	set	4
  8819             00000008   dir_0	set	8
  8820             0000000C   cl_0	set	12
  8821                        	.block	2090
  8822                        ;	st_word(dir + DIR_FstClusLO, (WORD) cl);
  8823                        	.sym	fs,4,138,6,32,75
  8824                        	.sym	dir,8,142,6,32
  8825                        	.sym	cl,12,18,6,32
  8826                        	.line	2091
  8827 08:1D84: D4 14        	pei	<L332+cl_0
  8828 08:1D86: 18           	clc
  8829 08:1D87: A9 1A 00     	lda	#$1a
  8830 08:1D8A: 65 10        	adc	<L332+dir_0
  8831 08:1D8C: 85 01        	sta	<R0
  8832 08:1D8E: A9 00 00     	lda	#$0
  8833 08:1D91: 65 12        	adc	<L332+dir_0+2
  8834 08:1D93: 85 03        	sta	<R0+2
  8835 08:1D95: D4 03        	pei	<R0+2
  8836 08:1D97: D4 01        	pei	<R0
  8837 08:1D99: 22 D7 00 08  	jsl	~~st_word
  8838                        ;	if (fs->fs_type == FS_FAT32)
  8839                        	.line	2092
  8840                        ;	{
  8841 08:1D9D: E2 20        	sep	#$20
  8842                        	longa	off
  8843 08:1D9F: A7 0C        	lda	[<L332+fs_0]
  8844 08:1DA1: C9 03        	cmp	#<$3
  8845 08:1DA3: C2 20        	rep	#$20
  8846                        	longa	on
  8847 08:1DA5: F0 03        	beq	L335
  Mon Aug  9 2021 16:52                                                Page 173


  8848 08:1DA7: 82 28 00     	brl	L10148
  8849                        L335:
  8850                        	.line	2093
  8851                        ;		st_word(dir + DIR_FstClusHI, (WORD) (cl 
                    >> 16));
  8852                        	.line	2094
  8853 08:1DAA: D4 16        	pei	<L332+cl_0+2
  8854 08:1DAC: D4 14        	pei	<L332+cl_0
  8855 08:1DAE: A9 10 00     	lda	#$10
  8856                        	xref	~~~llsr
  8857 08:1DB1: 22 xx xx xx  	jsl	~~~llsr
  8858 08:1DB5: 85 01        	sta	<R0
  8859 08:1DB7: 86 03        	stx	<R0+2
  8860 08:1DB9: D4 01        	pei	<R0
  8861 08:1DBB: 18           	clc
  8862 08:1DBC: A9 14 00     	lda	#$14
  8863 08:1DBF: 65 10        	adc	<L332+dir_0
  8864 08:1DC1: 85 05        	sta	<R1
  8865 08:1DC3: A9 00 00     	lda	#$0
  8866 08:1DC6: 65 12        	adc	<L332+dir_0+2
  8867 08:1DC8: 85 07        	sta	<R1+2
  8868 08:1DCA: D4 07        	pei	<R1+2
  8869 08:1DCC: D4 05        	pei	<R1
  8870 08:1DCE: 22 D7 00 08  	jsl	~~st_word
  8871                        ;	}
  8872                        	.line	2095
  8873                        ;}
  8874                        L10148:
  8875                        	.line	2096
  8876                        L336:
  8877 08:1DD2: A5 0A        	lda	<L332+2
  8878 08:1DD4: 85 16        	sta	<L332+2+12
  8879 08:1DD6: A5 09        	lda	<L332+1
  8880 08:1DD8: 85 15        	sta	<L332+1+12
  8881 08:1DDA: 2B           	pld
  8882 08:1DDB: 3B           	tsc
  8883 08:1DDC: 18           	clc
  8884 08:1DDD: 69 14 00     	adc	#L332+12
  8885 08:1DE0: 1B           	tcs
  8886 08:1DE1: 6B           	rtl
  8887                        	.endblock	2096
  8888             00000008   L332	equ	8
  8889             00000009   L333	equ	9
  8890 08:1DE2:              	ends
  8891                        	efunc
  8892                        	.endfunc	2096,9,8
  8893                        	.line	2096
  8894                        ;#endif
  8895                        ;
  8896                        ;#if FF_USE_LFN
  8897                        ;/*-----------------------------------------------
                    ---------*/
  8898                        ;/* FAT-LFN: Compare a part of file name with an L
                    FN entry */
  8899                        ;/*-----------------------------------------------
                    ---------*/
  8900                        ;
  8901                        ;static int cmp_lfn ( /* 1:matched, 0:not matched 
  Mon Aug  9 2021 16:52                                                Page 174


                    */
  8902                        ;		const WCHAR* lfnbuf, /* Pointer to the L
                    FN working buffer to be compared */
  8903                        ;		BYTE* dir /* Pointer to the directory en
                    try containing the part of LFN */
  8904                        ;)
  8905                        ;{
  8906                        	.line	2104
  8907                        	.line	2108
  8908                        	FFDOS
  8909                        	func
  8910                        	.function	2108
  8911                        ~~cmp_lfn:
  8912                        	longa	on
  8913                        	longi	on
  8914 08:1DE2: 3B           	tsc
  8915 08:1DE3: 38           	sec
  8916 08:1DE4: E9 1C 00     	sbc	#L337
  8917 08:1DE7: 1B           	tcs
  8918 08:1DE8: 0B           	phd
  8919 08:1DE9: 5B           	tcd
  8920             00000004   lfnbuf_0	set	4
  8921             00000008   dir_0	set	8
  8922                        	.block	2108
  8923                        ;	UINT i, s;
  8924                        ;	WCHAR wc, uc;
  8925                        ;
  8926                        ;	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0
                    ; /* Check LDIR_FstClusLO */
  8927             00000000   i_1	set	0
  8928             00000002   s_1	set	2
  8929             00000004   wc_1	set	4
  8930             00000006   uc_1	set	6
  8931                        	.sym	i,0,16,1,16
  8932                        	.sym	s,2,16,1,16
  8933                        	.sym	wc,4,16,1,16
  8934                        	.sym	uc,6,16,1,16
  8935                        	.sym	lfnbuf,4,144,6,32
  8936                        	.sym	dir,8,142,6,32
  8937                        	.line	2112
  8938 08:1DEA: 18           	clc
  8939 08:1DEB: A9 1A 00     	lda	#$1a
  8940 08:1DEE: 65 24        	adc	<L337+dir_0
  8941 08:1DF0: 85 01        	sta	<R0
  8942 08:1DF2: A9 00 00     	lda	#$0
  8943 08:1DF5: 65 26        	adc	<L337+dir_0+2
  8944 08:1DF7: 85 03        	sta	<R0+2
  8945 08:1DF9: D4 03        	pei	<R0+2
  8946 08:1DFB: D4 01        	pei	<R0
  8947 08:1DFD: 22 00 00 08  	jsl	~~ld_word
  8948 08:1E01: AA           	tax
  8949 08:1E02: D0 03        	bne	L340
  8950 08:1E04: 82 15 00     	brl	L10149
  8951                        L340:
  8952                        	.line	2112
  8953 08:1E07: A9 00 00     	lda	#$0
  8954                        L341:
  8955 08:1E0A: A8           	tay
  Mon Aug  9 2021 16:52                                                Page 175


  8956 08:1E0B: A5 1E        	lda	<L337+2
  8957 08:1E0D: 85 26        	sta	<L337+2+8
  8958 08:1E0F: A5 1D        	lda	<L337+1
  8959 08:1E11: 85 25        	sta	<L337+1+8
  8960 08:1E13: 2B           	pld
  8961 08:1E14: 3B           	tsc
  8962 08:1E15: 18           	clc
  8963 08:1E16: 69 24 00     	adc	#L337+8
  8964 08:1E19: 1B           	tcs
  8965 08:1E1A: 98           	tya
  8966 08:1E1B: 6B           	rtl
  8967                        ;
  8968                        ;	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13; /* Offset
                     in the LFN buffer */
  8969                        L10149:
  8970                        	.line	2114
  8971 08:1E1C: A7 24        	lda	[<L337+dir_0]
  8972 08:1E1E: 29 3F 00     	and	#<$3f
  8973 08:1E21: 85 01        	sta	<R0
  8974 08:1E23: A5 01        	lda	<R0
  8975 08:1E25: A2 0D 00     	ldx	#<$d
  8976                        	xref	~~~mul
  8977 08:1E28: 22 xx xx xx  	jsl	~~~mul
  8978 08:1E2C: 85 01        	sta	<R0
  8979 08:1E2E: 18           	clc
  8980 08:1E2F: A9 F3 FF     	lda	#$fff3
  8981 08:1E32: 65 01        	adc	<R0
  8982 08:1E34: 85 15        	sta	<L338+i_1
  8983                        ;
  8984                        ;	for (wc = 1, s = 0; s < 13; s++)
  8985                        	.line	2116
  8986 08:1E36: A9 01 00     	lda	#$1
  8987 08:1E39: 85 19        	sta	<L338+wc_1
  8988 08:1E3B: 64 17        	stz	<L338+s_1
  8989 08:1E3D: 82 AE 00     	brl	L10153
  8990                        L10152:
  8991                        ;	{ /* Process all characters in the entry */
  8992                        	.line	2117
  8993                        ;		uc = ld_word(dir + LfnOfs[s]); /* Pick a
                    n LFN character */
  8994                        	.line	2118
  8995 08:1E40: A6 17        	ldx	<L338+s_1
  8996 08:1E42: BD xx xx     	lda	|~~LfnOfs,X
  8997 08:1E45: 29 FF 00     	and	#$ff
  8998 08:1E48: 85 01        	sta	<R0
  8999 08:1E4A: 64 03        	stz	<R0+2
  9000 08:1E4C: 18           	clc
  9001 08:1E4D: A5 24        	lda	<L337+dir_0
  9002 08:1E4F: 65 01        	adc	<R0
  9003 08:1E51: 85 05        	sta	<R1
  9004 08:1E53: A5 26        	lda	<L337+dir_0+2
  9005 08:1E55: 65 03        	adc	<R0+2
  9006 08:1E57: 85 07        	sta	<R1+2
  9007 08:1E59: D4 07        	pei	<R1+2
  9008 08:1E5B: D4 05        	pei	<R1
  9009 08:1E5D: 22 00 00 08  	jsl	~~ld_word
  9010 08:1E61: 85 1B        	sta	<L338+uc_1
  9011                        ;		if (wc != 0)
  Mon Aug  9 2021 16:52                                                Page 176


  9012                        	.line	2119
  9013                        ;		{
  9014 08:1E63: A5 19        	lda	<L338+wc_1
  9015 08:1E65: D0 03        	bne	L342
  9016 08:1E67: 82 72 00     	brl	L10154
  9017                        L342:
  9018                        	.line	2120
  9019                        ;			if (i >= FF_MAX_LFN + 1 || ff_wt
                    oupper(uc) != ff_wtoupper(lfnbuf[i++]))
  9020                        	.line	2121
  9021                        ;			{ /* Compare it */
  9022 08:1E6A: A5 15        	lda	<L338+i_1
  9023 08:1E6C: C9 00 01     	cmp	#<$100
  9024 08:1E6F: 90 03        	bcc	L344
  9025 08:1E71: 82 5B 00     	brl	L343
  9026                        L344:
  9027 08:1E74: A5 15        	lda	<L338+i_1
  9028 08:1E76: 85 05        	sta	<R1
  9029 08:1E78: E6 15        	inc	<L338+i_1
  9030 08:1E7A: A5 05        	lda	<R1
  9031 08:1E7C: 85 05        	sta	<R1
  9032 08:1E7E: 64 07        	stz	<R1+2
  9033 08:1E80: D4 07        	pei	<R1+2
  9034 08:1E82: D4 05        	pei	<R1
  9035 08:1E84: A9 01 00     	lda	#$1
  9036                        	xref	~~~lasl
  9037 08:1E87: 22 xx xx xx  	jsl	~~~lasl
  9038 08:1E8B: 85 01        	sta	<R0
  9039 08:1E8D: 86 03        	stx	<R0+2
  9040 08:1E8F: 18           	clc
  9041 08:1E90: A5 20        	lda	<L337+lfnbuf_0
  9042 08:1E92: 65 01        	adc	<R0
  9043 08:1E94: 85 09        	sta	<R2
  9044 08:1E96: A5 22        	lda	<L337+lfnbuf_0+2
  9045 08:1E98: 65 03        	adc	<R0+2
  9046 08:1E9A: 85 0B        	sta	<R2+2
  9047 08:1E9C: A7 09        	lda	[<R2]
  9048 08:1E9E: 85 01        	sta	<R0
  9049 08:1EA0: 64 03        	stz	<R0+2
  9050 08:1EA2: D4 03        	pei	<R0+2
  9051 08:1EA4: D4 01        	pei	<R0
  9052 08:1EA6: 22 22 92 08  	jsl	~~ff_wtoupper
  9053 08:1EAA: 85 09        	sta	<R2
  9054 08:1EAC: 86 0B        	stx	<R2+2
  9055 08:1EAE: A5 1B        	lda	<L338+uc_1
  9056 08:1EB0: 85 0D        	sta	<R3
  9057 08:1EB2: 64 0F        	stz	<R3+2
  9058 08:1EB4: D4 0F        	pei	<R3+2
  9059 08:1EB6: D4 0D        	pei	<R3
  9060 08:1EB8: 22 22 92 08  	jsl	~~ff_wtoupper
  9061 08:1EBC: 85 11        	sta	<17
  9062 08:1EBE: 86 13        	stx	<17+2
  9063 08:1EC0: A5 11        	lda	<17
  9064 08:1EC2: C5 09        	cmp	<R2
  9065 08:1EC4: D0 04        	bne	L345
  9066 08:1EC6: A5 13        	lda	<17+2
  9067 08:1EC8: C5 0B        	cmp	<R2+2
  9068                        L345:
  Mon Aug  9 2021 16:52                                                Page 177


  9069 08:1ECA: D0 03        	bne	L346
  9070 08:1ECC: 82 06 00     	brl	L10155
  9071                        L346:
  9072                        L343:
  9073                        	.line	2122
  9074                        ;				return 0; /* Not matched
                     */
  9075                        	.line	2123
  9076 08:1ECF: A9 00 00     	lda	#$0
  9077 08:1ED2: 82 35 FF     	brl	L341
  9078                        ;			}
  9079                        	.line	2124
  9080                        ;			wc = uc;
  9081                        L10155:
  9082                        	.line	2125
  9083 08:1ED5: A5 1B        	lda	<L338+uc_1
  9084 08:1ED7: 85 19        	sta	<L338+wc_1
  9085                        ;		}
  9086                        	.line	2126
  9087                        ;		else
  9088 08:1ED9: 82 10 00     	brl	L10156
  9089                        L10154:
  9090                        ;		{
  9091                        	.line	2128
  9092                        ;			if (uc != 0xFFFF) return 0; /* C
                    heck filler */
  9093                        	.line	2129
  9094 08:1EDC: A5 1B        	lda	<L338+uc_1
  9095 08:1EDE: C9 FF FF     	cmp	#<$ffff
  9096 08:1EE1: D0 03        	bne	L347
  9097 08:1EE3: 82 06 00     	brl	L10157
  9098                        L347:
  9099                        	.line	2129
  9100 08:1EE6: A9 00 00     	lda	#$0
  9101 08:1EE9: 82 1E FF     	brl	L341
  9102                        ;		}
  9103                        L10157:
  9104                        	.line	2130
  9105                        L10156:
  9106                        ;	}
  9107                        	.line	2131
  9108                        L10150:
  9109 08:1EEC: E6 17        	inc	<L338+s_1
  9110                        L10153:
  9111 08:1EEE: A5 17        	lda	<L338+s_1
  9112 08:1EF0: C9 0D 00     	cmp	#<$d
  9113 08:1EF3: B0 03        	bcs	L348
  9114 08:1EF5: 82 48 FF     	brl	L10152
  9115                        L348:
  9116                        L10151:
  9117                        ;
  9118                        ;	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) r
                    eturn 0; /* Last segment matched but different length */
  9119                        	.line	2133
  9120 08:1EF8: E2 20        	sep	#$20
  9121                        	longa	off
  9122 08:1EFA: A7 24        	lda	[<L337+dir_0]
  9123 08:1EFC: 29 40        	and	#<$40
  Mon Aug  9 2021 16:52                                                Page 178


  9124 08:1EFE: C2 20        	rep	#$20
  9125                        	longa	on
  9126 08:1F00: D0 03        	bne	L349
  9127 08:1F02: 82 36 00     	brl	L10158
  9128                        L349:
  9129 08:1F05: A5 19        	lda	<L338+wc_1
  9130 08:1F07: D0 03        	bne	L350
  9131 08:1F09: 82 2F 00     	brl	L10158
  9132                        L350:
  9133 08:1F0C: A5 15        	lda	<L338+i_1
  9134 08:1F0E: 85 05        	sta	<R1
  9135 08:1F10: 64 07        	stz	<R1+2
  9136 08:1F12: D4 07        	pei	<R1+2
  9137 08:1F14: D4 05        	pei	<R1
  9138 08:1F16: A9 01 00     	lda	#$1
  9139                        	xref	~~~lasl
  9140 08:1F19: 22 xx xx xx  	jsl	~~~lasl
  9141 08:1F1D: 85 01        	sta	<R0
  9142 08:1F1F: 86 03        	stx	<R0+2
  9143 08:1F21: 18           	clc
  9144 08:1F22: A5 20        	lda	<L337+lfnbuf_0
  9145 08:1F24: 65 01        	adc	<R0
  9146 08:1F26: 85 09        	sta	<R2
  9147 08:1F28: A5 22        	lda	<L337+lfnbuf_0+2
  9148 08:1F2A: 65 03        	adc	<R0+2
  9149 08:1F2C: 85 0B        	sta	<R2+2
  9150 08:1F2E: A7 09        	lda	[<R2]
  9151 08:1F30: D0 03        	bne	L351
  9152 08:1F32: 82 06 00     	brl	L10158
  9153                        L351:
  9154                        	.line	2133
  9155 08:1F35: A9 00 00     	lda	#$0
  9156 08:1F38: 82 CF FE     	brl	L341
  9157                        ;
  9158                        ;	return 1; /* The part of LFN matched */
  9159                        L10158:
  9160                        	.line	2135
  9161 08:1F3B: A9 01 00     	lda	#$1
  9162 08:1F3E: 82 C9 FE     	brl	L341
  9163                        ;}
  9164                        	.line	2136
  9165                        	.endblock	2136
  9166             0000001C   L337	equ	28
  9167             00000015   L338	equ	21
  9168 08:1F41:              	ends
  9169                        	efunc
  9170                        	.endfunc	2136,21,28
  9171                        	.line	2136
  9172                        ;
  9173                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF
                    _USE_LABEL || FF_FS_EXFAT
  9174                        ;/*-----------------------------------------------
                    ------*/
  9175                        ;/* FAT-LFN: Pick a part of file name from an LFN 
                    entry */
  9176                        ;/*-----------------------------------------------
                    ------*/
  9177                        ;
  Mon Aug  9 2021 16:52                                                Page 179


  9178                        ;static int pick_lfn ( /* 1:succeeded, 0:buffer ov
                    erflow or invalid LFN entry */
  9179                        ;		WCHAR* lfnbuf, /* Pointer to the LFN wor
                    king buffer */
  9180                        ;		BYTE* dir /* Pointer to the LFN entry */
  9181                        ;)
  9182                        ;{
  9183                        	.line	2143
  9184                        	.line	2147
  9185                        	FFDOS
  9186                        	func
  9187                        	.function	2147
  9188                        ~~pick_lfn:
  9189                        	longa	on
  9190                        	longi	on
  9191 08:1F41: 3B           	tsc
  9192 08:1F42: 38           	sec
  9193 08:1F43: E9 14 00     	sbc	#L352
  9194 08:1F46: 1B           	tcs
  9195 08:1F47: 0B           	phd
  9196 08:1F48: 5B           	tcd
  9197             00000004   lfnbuf_0	set	4
  9198             00000008   dir_0	set	8
  9199                        	.block	2147
  9200                        ;	UINT i, s;
  9201                        ;	WCHAR wc, uc;
  9202                        ;
  9203                        ;	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0
                    ; /* Check LDIR_FstClusLO is 0 */
  9204             00000000   i_1	set	0
  9205             00000002   s_1	set	2
  9206             00000004   wc_1	set	4
  9207             00000006   uc_1	set	6
  9208                        	.sym	i,0,16,1,16
  9209                        	.sym	s,2,16,1,16
  9210                        	.sym	wc,4,16,1,16
  9211                        	.sym	uc,6,16,1,16
  9212                        	.sym	lfnbuf,4,144,6,32
  9213                        	.sym	dir,8,142,6,32
  9214                        	.line	2151
  9215 08:1F49: 18           	clc
  9216 08:1F4A: A9 1A 00     	lda	#$1a
  9217 08:1F4D: 65 1C        	adc	<L352+dir_0
  9218 08:1F4F: 85 01        	sta	<R0
  9219 08:1F51: A9 00 00     	lda	#$0
  9220 08:1F54: 65 1E        	adc	<L352+dir_0+2
  9221 08:1F56: 85 03        	sta	<R0+2
  9222 08:1F58: D4 03        	pei	<R0+2
  9223 08:1F5A: D4 01        	pei	<R0
  9224 08:1F5C: 22 00 00 08  	jsl	~~ld_word
  9225 08:1F60: AA           	tax
  9226 08:1F61: D0 03        	bne	L355
  9227 08:1F63: 82 15 00     	brl	L10159
  9228                        L355:
  9229                        	.line	2151
  9230 08:1F66: A9 00 00     	lda	#$0
  9231                        L356:
  9232 08:1F69: A8           	tay
  Mon Aug  9 2021 16:52                                                Page 180


  9233 08:1F6A: A5 16        	lda	<L352+2
  9234 08:1F6C: 85 1E        	sta	<L352+2+8
  9235 08:1F6E: A5 15        	lda	<L352+1
  9236 08:1F70: 85 1D        	sta	<L352+1+8
  9237 08:1F72: 2B           	pld
  9238 08:1F73: 3B           	tsc
  9239 08:1F74: 18           	clc
  9240 08:1F75: 69 1C 00     	adc	#L352+8
  9241 08:1F78: 1B           	tcs
  9242 08:1F79: 98           	tya
  9243 08:1F7A: 6B           	rtl
  9244                        ;
  9245                        ;	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13; /* Offse
                    t in the LFN buffer */
  9246                        L10159:
  9247                        	.line	2153
  9248 08:1F7B: A7 1C        	lda	[<L352+dir_0]
  9249 08:1F7D: 29 FF 00     	and	#$ff
  9250 08:1F80: 29 BF FF     	and	#<$ffffffbf
  9251 08:1F83: 85 01        	sta	<R0
  9252 08:1F85: A5 01        	lda	<R0
  9253 08:1F87: A2 0D 00     	ldx	#<$d
  9254                        	xref	~~~mul
  9255 08:1F8A: 22 xx xx xx  	jsl	~~~mul
  9256 08:1F8E: 85 01        	sta	<R0
  9257 08:1F90: 18           	clc
  9258 08:1F91: A9 F3 FF     	lda	#$fff3
  9259 08:1F94: 65 01        	adc	<R0
  9260 08:1F96: 85 0D        	sta	<L353+i_1
  9261                        ;
  9262                        ;	for (wc = 1, s = 0; s < 13; s++)
  9263                        	.line	2155
  9264 08:1F98: A9 01 00     	lda	#$1
  9265 08:1F9B: 85 11        	sta	<L353+wc_1
  9266 08:1F9D: 64 0F        	stz	<L353+s_1
  9267 08:1F9F: 82 7B 00     	brl	L10163
  9268                        L10162:
  9269                        ;	{ /* Process all characters in the entry */
  9270                        	.line	2156
  9271                        ;		uc = ld_word(dir + LfnOfs[s]); /* Pick a
                    n LFN character */
  9272                        	.line	2157
  9273 08:1FA2: A6 0F        	ldx	<L353+s_1
  9274 08:1FA4: BD xx xx     	lda	|~~LfnOfs,X
  9275 08:1FA7: 29 FF 00     	and	#$ff
  9276 08:1FAA: 85 01        	sta	<R0
  9277 08:1FAC: 64 03        	stz	<R0+2
  9278 08:1FAE: 18           	clc
  9279 08:1FAF: A5 1C        	lda	<L352+dir_0
  9280 08:1FB1: 65 01        	adc	<R0
  9281 08:1FB3: 85 05        	sta	<R1
  9282 08:1FB5: A5 1E        	lda	<L352+dir_0+2
  9283 08:1FB7: 65 03        	adc	<R0+2
  9284 08:1FB9: 85 07        	sta	<R1+2
  9285 08:1FBB: D4 07        	pei	<R1+2
  9286 08:1FBD: D4 05        	pei	<R1
  9287 08:1FBF: 22 00 00 08  	jsl	~~ld_word
  9288 08:1FC3: 85 13        	sta	<L353+uc_1
  Mon Aug  9 2021 16:52                                                Page 181


  9289                        ;		if (wc != 0)
  9290                        	.line	2158
  9291                        ;		{
  9292 08:1FC5: A5 11        	lda	<L353+wc_1
  9293 08:1FC7: D0 03        	bne	L357
  9294 08:1FC9: 82 3F 00     	brl	L10164
  9295                        L357:
  9296                        	.line	2159
  9297                        ;			if (i >= FF_MAX_LFN + 1) return 
                    0; /* Buffer overflow? */
  9298                        	.line	2160
  9299 08:1FCC: A5 0D        	lda	<L353+i_1
  9300 08:1FCE: C9 00 01     	cmp	#<$100
  9301 08:1FD1: B0 03        	bcs	L358
  9302 08:1FD3: 82 06 00     	brl	L10165
  9303                        L358:
  9304                        	.line	2160
  9305 08:1FD6: A9 00 00     	lda	#$0
  9306 08:1FD9: 82 8D FF     	brl	L356
  9307                        ;			lfnbuf[i++] = wc = uc; /* Store 
                    it */
  9308                        L10165:
  9309                        	.line	2161
  9310 08:1FDC: A5 0D        	lda	<L353+i_1
  9311 08:1FDE: 85 05        	sta	<R1
  9312 08:1FE0: 64 07        	stz	<R1+2
  9313 08:1FE2: D4 07        	pei	<R1+2
  9314 08:1FE4: D4 05        	pei	<R1
  9315 08:1FE6: A9 01 00     	lda	#$1
  9316                        	xref	~~~lasl
  9317 08:1FE9: 22 xx xx xx  	jsl	~~~lasl
  9318 08:1FED: 85 01        	sta	<R0
  9319 08:1FEF: 86 03        	stx	<R0+2
  9320 08:1FF1: 18           	clc
  9321 08:1FF2: A5 18        	lda	<L352+lfnbuf_0
  9322 08:1FF4: 65 01        	adc	<R0
  9323 08:1FF6: 85 09        	sta	<R2
  9324 08:1FF8: A5 1A        	lda	<L352+lfnbuf_0+2
  9325 08:1FFA: 65 03        	adc	<R0+2
  9326 08:1FFC: 85 0B        	sta	<R2+2
  9327 08:1FFE: A5 13        	lda	<L353+uc_1
  9328 08:2000: 85 11        	sta	<L353+wc_1
  9329 08:2002: A5 13        	lda	<L353+uc_1
  9330 08:2004: 87 09        	sta	[<R2]
  9331 08:2006: E6 0D        	inc	<L353+i_1
  9332                        ;		}
  9333                        	.line	2162
  9334                        ;		else
  9335 08:2008: 82 10 00     	brl	L10166
  9336                        L10164:
  9337                        ;		{
  9338                        	.line	2164
  9339                        ;			if (uc != 0xFFFF) return 0; /* C
                    heck filler */
  9340                        	.line	2165
  9341 08:200B: A5 13        	lda	<L353+uc_1
  9342 08:200D: C9 FF FF     	cmp	#<$ffff
  9343 08:2010: D0 03        	bne	L359
  Mon Aug  9 2021 16:52                                                Page 182


  9344 08:2012: 82 06 00     	brl	L10167
  9345                        L359:
  9346                        	.line	2165
  9347 08:2015: A9 00 00     	lda	#$0
  9348 08:2018: 82 4E FF     	brl	L356
  9349                        ;		}
  9350                        L10167:
  9351                        	.line	2166
  9352                        L10166:
  9353                        ;	}
  9354                        	.line	2167
  9355                        L10160:
  9356 08:201B: E6 0F        	inc	<L353+s_1
  9357                        L10163:
  9358 08:201D: A5 0F        	lda	<L353+s_1
  9359 08:201F: C9 0D 00     	cmp	#<$d
  9360 08:2022: B0 03        	bcs	L360
  9361 08:2024: 82 7B FF     	brl	L10162
  9362                        L360:
  9363                        L10161:
  9364                        ;
  9365                        ;	if (dir[LDIR_Ord] & LLEF && wc != 0)
  9366                        	.line	2169
  9367                        ;	{ /* Put terminator if it is the last LFN part a
                    nd not terminated */
  9368 08:2027: E2 20        	sep	#$20
  9369                        	longa	off
  9370 08:2029: A7 1C        	lda	[<L352+dir_0]
  9371 08:202B: 29 40        	and	#<$40
  9372 08:202D: C2 20        	rep	#$20
  9373                        	longa	on
  9374 08:202F: D0 03        	bne	L361
  9375 08:2031: 82 3E 00     	brl	L10168
  9376                        L361:
  9377 08:2034: A5 11        	lda	<L353+wc_1
  9378 08:2036: D0 03        	bne	L362
  9379 08:2038: 82 37 00     	brl	L10168
  9380                        L362:
  9381                        	.line	2170
  9382                        ;		if (i >= FF_MAX_LFN + 1) return 0; /* Bu
                    ffer overflow? */
  9383                        	.line	2171
  9384 08:203B: A5 0D        	lda	<L353+i_1
  9385 08:203D: C9 00 01     	cmp	#<$100
  9386 08:2040: B0 03        	bcs	L363
  9387 08:2042: 82 06 00     	brl	L10169
  9388                        L363:
  9389                        	.line	2171
  9390 08:2045: A9 00 00     	lda	#$0
  9391 08:2048: 82 1E FF     	brl	L356
  9392                        ;		lfnbuf[i] = 0;
  9393                        L10169:
  9394                        	.line	2172
  9395 08:204B: A5 0D        	lda	<L353+i_1
  9396 08:204D: 85 05        	sta	<R1
  9397 08:204F: 64 07        	stz	<R1+2
  9398 08:2051: D4 07        	pei	<R1+2
  9399 08:2053: D4 05        	pei	<R1
  Mon Aug  9 2021 16:52                                                Page 183


  9400 08:2055: A9 01 00     	lda	#$1
  9401                        	xref	~~~lasl
  9402 08:2058: 22 xx xx xx  	jsl	~~~lasl
  9403 08:205C: 85 01        	sta	<R0
  9404 08:205E: 86 03        	stx	<R0+2
  9405 08:2060: 18           	clc
  9406 08:2061: A5 18        	lda	<L352+lfnbuf_0
  9407 08:2063: 65 01        	adc	<R0
  9408 08:2065: 85 09        	sta	<R2
  9409 08:2067: A5 1A        	lda	<L352+lfnbuf_0+2
  9410 08:2069: 65 03        	adc	<R0+2
  9411 08:206B: 85 0B        	sta	<R2+2
  9412 08:206D: A9 00 00     	lda	#$0
  9413 08:2070: 87 09        	sta	[<R2]
  9414                        ;	}
  9415                        	.line	2173
  9416                        ;
  9417                        ;	return 1; /* The part of LFN is valid */
  9418                        L10168:
  9419                        	.line	2175
  9420 08:2072: A9 01 00     	lda	#$1
  9421 08:2075: 82 F1 FE     	brl	L356
  9422                        ;}
  9423                        	.line	2176
  9424                        	.endblock	2176
  9425             00000014   L352	equ	20
  9426             0000000D   L353	equ	13
  9427 08:2078:              	ends
  9428                        	efunc
  9429                        	.endfunc	2176,13,20
  9430                        	.line	2176
  9431                        ;#endif
  9432                        ;
  9433                        ;#if !FF_FS_READONLY
  9434                        ;/*-----------------------------------------*/
  9435                        ;/* FAT-LFN: Create an entry of LFN entries */
  9436                        ;/*-----------------------------------------*/
  9437                        ;
  9438                        ;static void put_lfn (
  9439                        ;		const WCHAR* lfn, /* Pointer to the LFN 
                    */
  9440                        ;		BYTE* dir, /* Pointer to the LFN entry t
                    o be created */
  9441                        ;		BYTE ord, /* LFN order (1-20) */
  9442                        ;		BYTE sum /* Checksum of the correspondin
                    g SFN */
  9443                        ;)
  9444                        ;{
  9445                        	.line	2184
  9446                        	.line	2190
  9447                        	FFDOS
  9448                        	func
  9449                        	.function	2190
  9450                        ~~put_lfn:
  9451                        	longa	on
  9452                        	longi	on
  9453 08:2078: 3B           	tsc
  9454 08:2079: 38           	sec
  Mon Aug  9 2021 16:52                                                Page 184


  9455 08:207A: E9 12 00     	sbc	#L364
  9456 08:207D: 1B           	tcs
  9457 08:207E: 0B           	phd
  9458 08:207F: 5B           	tcd
  9459             00000004   lfn_0	set	4
  9460             00000008   dir_0	set	8
  9461             0000000C   ord_0	set	12
  9462             0000000E   sum_0	set	14
  9463                        	.block	2190
  9464                        ;	UINT i, s;
  9465                        ;	WCHAR wc;
  9466                        ;
  9467                        ;	dir[LDIR_Chksum] = sum; /* Set checksum */
  9468             00000000   i_1	set	0
  9469             00000002   s_1	set	2
  9470             00000004   wc_1	set	4
  9471                        	.sym	i,0,16,1,16
  9472                        	.sym	s,2,16,1,16
  9473                        	.sym	wc,4,16,1,16
  9474                        	.sym	lfn,4,144,6,32
  9475                        	.sym	dir,8,142,6,32
  9476                        	.sym	ord,12,14,6,8
  9477                        	.sym	sum,14,14,6,8
  9478                        	.line	2194
  9479 08:2080: E2 20        	sep	#$20
  9480                        	longa	off
  9481 08:2082: A5 20        	lda	<L364+sum_0
  9482 08:2084: A0 0D 00     	ldy	#$d
  9483 08:2087: 97 1A        	sta	[<L364+dir_0],Y
  9484 08:2089: C2 20        	rep	#$20
  9485                        	longa	on
  9486                        ;	dir[LDIR_Attr] = AM_LFN; /* Set attribute. LFN e
                    ntry */
  9487                        	.line	2195
  9488 08:208B: E2 20        	sep	#$20
  9489                        	longa	off
  9490 08:208D: A9 0F        	lda	#$f
  9491 08:208F: A0 0B 00     	ldy	#$b
  9492 08:2092: 97 1A        	sta	[<L364+dir_0],Y
  9493 08:2094: C2 20        	rep	#$20
  9494                        	longa	on
  9495                        ;	dir[LDIR_Type] = 0;
  9496                        	.line	2196
  9497 08:2096: E2 20        	sep	#$20
  9498                        	longa	off
  9499 08:2098: A9 00        	lda	#$0
  9500 08:209A: A0 0C 00     	ldy	#$c
  9501 08:209D: 97 1A        	sta	[<L364+dir_0],Y
  9502 08:209F: C2 20        	rep	#$20
  9503                        	longa	on
  9504                        ;	st_word(dir + LDIR_FstClusLO, 0);
  9505                        	.line	2197
  9506 08:20A1: F4 00 00     	pea	#<$0
  9507 08:20A4: 18           	clc
  9508 08:20A5: A9 1A 00     	lda	#$1a
  9509 08:20A8: 65 1A        	adc	<L364+dir_0
  9510 08:20AA: 85 01        	sta	<R0
  9511 08:20AC: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 185


  9512 08:20AF: 65 1C        	adc	<L364+dir_0+2
  9513 08:20B1: 85 03        	sta	<R0+2
  9514 08:20B3: D4 03        	pei	<R0+2
  9515 08:20B5: D4 01        	pei	<R0
  9516 08:20B7: 22 D7 00 08  	jsl	~~st_word
  9517                        ;
  9518                        ;	i = (ord - 1) * 13; /* Get offset in the LFN wor
                    king buffer */
  9519                        	.line	2199
  9520 08:20BB: A5 1E        	lda	<L364+ord_0
  9521 08:20BD: 29 FF 00     	and	#$ff
  9522 08:20C0: 85 01        	sta	<R0
  9523 08:20C2: A5 01        	lda	<R0
  9524 08:20C4: A2 0D 00     	ldx	#<$d
  9525                        	xref	~~~mul
  9526 08:20C7: 22 xx xx xx  	jsl	~~~mul
  9527 08:20CB: 85 01        	sta	<R0
  9528 08:20CD: 18           	clc
  9529 08:20CE: A9 F3 FF     	lda	#$fff3
  9530 08:20D1: 65 01        	adc	<R0
  9531 08:20D3: 85 0D        	sta	<L365+i_1
  9532                        ;	s = wc = 0;
  9533                        	.line	2200
  9534 08:20D5: 64 11        	stz	<L365+wc_1
  9535 08:20D7: 64 0F        	stz	<L365+s_1
  9536                        ;	do
  9537                        	.line	2201
  9538                        L10172:
  9539                        ;	{
  9540                        	.line	2202
  9541                        ;		if (wc != 0xFFFF) wc = lfn[i++]; /* Get 
                    an effective character */
  9542                        	.line	2203
  9543 08:20D9: A5 11        	lda	<L365+wc_1
  9544 08:20DB: C9 FF FF     	cmp	#<$ffff
  9545 08:20DE: D0 03        	bne	L367
  9546 08:20E0: 82 28 00     	brl	L10173
  9547                        L367:
  9548                        	.line	2203
  9549 08:20E3: A5 0D        	lda	<L365+i_1
  9550 08:20E5: 85 05        	sta	<R1
  9551 08:20E7: 64 07        	stz	<R1+2
  9552 08:20E9: D4 07        	pei	<R1+2
  9553 08:20EB: D4 05        	pei	<R1
  9554 08:20ED: A9 01 00     	lda	#$1
  9555                        	xref	~~~lasl
  9556 08:20F0: 22 xx xx xx  	jsl	~~~lasl
  9557 08:20F4: 85 01        	sta	<R0
  9558 08:20F6: 86 03        	stx	<R0+2
  9559 08:20F8: 18           	clc
  9560 08:20F9: A5 16        	lda	<L364+lfn_0
  9561 08:20FB: 65 01        	adc	<R0
  9562 08:20FD: 85 09        	sta	<R2
  9563 08:20FF: A5 18        	lda	<L364+lfn_0+2
  9564 08:2101: 65 03        	adc	<R0+2
  9565 08:2103: 85 0B        	sta	<R2+2
  9566 08:2105: A7 09        	lda	[<R2]
  9567 08:2107: 85 11        	sta	<L365+wc_1
  Mon Aug  9 2021 16:52                                                Page 186


  9568 08:2109: E6 0D        	inc	<L365+i_1
  9569                        ;		st_word(dir + LfnOfs[s], wc); /* Put it 
                    */
  9570                        L10173:
  9571                        	.line	2204
  9572 08:210B: D4 11        	pei	<L365+wc_1
  9573 08:210D: A6 0F        	ldx	<L365+s_1
  9574 08:210F: BD xx xx     	lda	|~~LfnOfs,X
  9575 08:2112: 29 FF 00     	and	#$ff
  9576 08:2115: 85 01        	sta	<R0
  9577 08:2117: 64 03        	stz	<R0+2
  9578 08:2119: 18           	clc
  9579 08:211A: A5 1A        	lda	<L364+dir_0
  9580 08:211C: 65 01        	adc	<R0
  9581 08:211E: 85 05        	sta	<R1
  9582 08:2120: A5 1C        	lda	<L364+dir_0+2
  9583 08:2122: 65 03        	adc	<R0+2
  9584 08:2124: 85 07        	sta	<R1+2
  9585 08:2126: D4 07        	pei	<R1+2
  9586 08:2128: D4 05        	pei	<R1
  9587 08:212A: 22 D7 00 08  	jsl	~~st_word
  9588                        ;		if (wc == 0) wc = 0xFFFF; /* Padding cha
                    racters for following items */
  9589                        	.line	2205
  9590 08:212E: A5 11        	lda	<L365+wc_1
  9591 08:2130: F0 03        	beq	L368
  9592 08:2132: 82 05 00     	brl	L10174
  9593                        L368:
  9594                        	.line	2205
  9595 08:2135: A9 FF FF     	lda	#$ffff
  9596 08:2138: 85 11        	sta	<L365+wc_1
  9597                        ;	}while (++s < 13);
  9598                        L10174:
  9599                        	.line	2206
  9600                        L10170:
  9601 08:213A: E6 0F        	inc	<L365+s_1
  9602 08:213C: A5 0F        	lda	<L365+s_1
  9603 08:213E: C9 0D 00     	cmp	#<$d
  9604 08:2141: B0 03        	bcs	L369
  9605 08:2143: 82 93 FF     	brl	L10172
  9606                        L369:
  9607                        L10171:
  9608                        ;	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF; /* Las
                    t LFN part is the start of LFN sequence */
  9609                        	.line	2207
  9610 08:2146: A5 11        	lda	<L365+wc_1
  9611 08:2148: C9 FF FF     	cmp	#<$ffff
  9612 08:214B: D0 03        	bne	L371
  9613 08:214D: 82 29 00     	brl	L370
  9614                        L371:
  9615 08:2150: A5 0D        	lda	<L365+i_1
  9616 08:2152: 85 05        	sta	<R1
  9617 08:2154: 64 07        	stz	<R1+2
  9618 08:2156: D4 07        	pei	<R1+2
  9619 08:2158: D4 05        	pei	<R1
  9620 08:215A: A9 01 00     	lda	#$1
  9621                        	xref	~~~lasl
  9622 08:215D: 22 xx xx xx  	jsl	~~~lasl
  Mon Aug  9 2021 16:52                                                Page 187


  9623 08:2161: 85 01        	sta	<R0
  9624 08:2163: 86 03        	stx	<R0+2
  9625 08:2165: 18           	clc
  9626 08:2166: A5 16        	lda	<L364+lfn_0
  9627 08:2168: 65 01        	adc	<R0
  9628 08:216A: 85 09        	sta	<R2
  9629 08:216C: A5 18        	lda	<L364+lfn_0+2
  9630 08:216E: 65 03        	adc	<R0+2
  9631 08:2170: 85 0B        	sta	<R2+2
  9632 08:2172: A7 09        	lda	[<R2]
  9633 08:2174: F0 03        	beq	L372
  9634 08:2176: 82 08 00     	brl	L10175
  9635                        L372:
  9636                        L370:
  9637                        	.line	2207
  9638 08:2179: E2 20        	sep	#$20
  9639                        	longa	off
  9640 08:217B: A9 40        	lda	#$40
  9641 08:217D: 04 1E        	tsb	<L364+ord_0
  9642 08:217F: C2 20        	rep	#$20
  9643                        	longa	on
  9644                        ;	dir[LDIR_Ord] = ord; /* Set the LFN order */
  9645                        L10175:
  9646                        	.line	2208
  9647 08:2181: E2 20        	sep	#$20
  9648                        	longa	off
  9649 08:2183: A5 1E        	lda	<L364+ord_0
  9650 08:2185: 87 1A        	sta	[<L364+dir_0]
  9651 08:2187: C2 20        	rep	#$20
  9652                        	longa	on
  9653                        ;}
  9654                        	.line	2209
  9655                        L373:
  9656 08:2189: A5 14        	lda	<L364+2
  9657 08:218B: 85 20        	sta	<L364+2+12
  9658 08:218D: A5 13        	lda	<L364+1
  9659 08:218F: 85 1F        	sta	<L364+1+12
  9660 08:2191: 2B           	pld
  9661 08:2192: 3B           	tsc
  9662 08:2193: 18           	clc
  9663 08:2194: 69 1E 00     	adc	#L364+12
  9664 08:2197: 1B           	tcs
  9665 08:2198: 6B           	rtl
  9666                        	.endblock	2209
  9667             00000012   L364	equ	18
  9668             0000000D   L365	equ	13
  9669 08:2199:              	ends
  9670                        	efunc
  9671                        	.endfunc	2209,13,18
  9672                        	.line	2209
  9673                        ;
  9674                        ;#endif	/* !FF_FS_READONLY */
  9675                        ;#endif	/* FF_USE_LFN */
  9676                        ;
  9677                        ;#if FF_USE_LFN && !FF_FS_READONLY
  9678                        ;/*-----------------------------------------------
                    ------------------------*/
  9679                        ;/* FAT-LFN: Create a Numbered SFN                
  Mon Aug  9 2021 16:52                                                Page 188


                                            */
  9680                        ;/*-----------------------------------------------
                    ------------------------*/
  9681                        ;
  9682                        ;static void gen_numname (
  9683                        ;		BYTE* dst, /* Pointer to the buffer to s
                    tore numbered SFN */
  9684                        ;		const BYTE* src, /* Pointer to SFN */
  9685                        ;		const WCHAR* lfn, /* Pointer to LFN */
  9686                        ;		UINT seq /* Sequence number */
  9687                        ;)
  9688                        ;{
  9689                        	.line	2219
  9690                        	.line	2225
  9691                        	FFDOS
  9692                        	func
  9693                        	.function	2225
  9694                        ~~gen_numname:
  9695                        	longa	on
  9696                        	longi	on
  9697 08:2199: 3B           	tsc
  9698 08:219A: 38           	sec
  9699 08:219B: E9 1B 00     	sbc	#L374
  9700 08:219E: 1B           	tcs
  9701 08:219F: 0B           	phd
  9702 08:21A0: 5B           	tcd
  9703             00000004   dst_0	set	4
  9704             00000008   src_0	set	8
  9705             0000000C   lfn_0	set	12
  9706             00000010   seq_0	set	16
  9707                        	.block	2225
  9708                        ;	BYTE ns[8], c;
  9709                        ;	UINT i, j;
  9710                        ;	WCHAR wc;
  9711                        ;	DWORD sreg;
  9712                        ;
  9713                        ;	mem_cpy(dst, src, 11);
  9714             00000000   ns_1	set	0
  9715             00000008   c_1	set	8
  9716             00000009   i_1	set	9
  9717             0000000B   j_1	set	11
  9718             0000000D   wc_1	set	13
  9719             0000000F   sreg_1	set	15
  9720                        	.sym	ns,0,110,1,0,8
  9721                        	.sym	c,8,14,1,8
  9722                        	.sym	i,9,16,1,16
  9723                        	.sym	j,11,16,1,16
  9724                        	.sym	wc,13,16,1,16
  9725                        	.sym	sreg,15,18,1,32
  9726                        	.sym	dst,4,142,6,32
  9727                        	.sym	src,8,142,6,32
  9728                        	.sym	lfn,12,144,6,32
  9729                        	.sym	seq,16,16,6,16
  9730                        	.line	2231
  9731 08:21A1: F4 0B 00     	pea	#<$b
  9732 08:21A4: D4 25        	pei	<L374+src_0+2
  9733 08:21A6: D4 23        	pei	<L374+src_0
  9734 08:21A8: D4 21        	pei	<L374+dst_0+2
  Mon Aug  9 2021 16:52                                                Page 189


  9735 08:21AA: D4 1F        	pei	<L374+dst_0
  9736 08:21AC: 22 93 01 08  	jsl	~~mem_cpy
  9737                        ;
  9738                        ;	if (seq > 5)
  9739                        	.line	2233
  9740                        ;	{ /* In case of many collisions, generate a hash
                     number instead of sequential number */
  9741 08:21B0: A9 05 00     	lda	#$5
  9742 08:21B3: C5 2B        	cmp	<L374+seq_0
  9743 08:21B5: 90 03        	bcc	L377
  9744 08:21B7: 82 72 00     	brl	L10176
  9745                        L377:
  9746                        	.line	2234
  9747                        ;		sreg = seq;
  9748                        	.line	2235
  9749 08:21BA: A5 2B        	lda	<L374+seq_0
  9750 08:21BC: 85 18        	sta	<L375+sreg_1
  9751 08:21BE: 64 1A        	stz	<L375+sreg_1+2
  9752                        ;		while (*lfn)
  9753                        	.line	2236
  9754                        L10177:
  9755 08:21C0: A7 27        	lda	[<L374+lfn_0]
  9756 08:21C2: D0 03        	bne	L378
  9757 08:21C4: 82 61 00     	brl	L10178
  9758                        L378:
  9759                        ;		{ /* Create a CRC as hash value */
  9760                        	.line	2237
  9761                        ;			wc = *lfn++;
  9762                        	.line	2238
  9763 08:21C7: A7 27        	lda	[<L374+lfn_0]
  9764 08:21C9: 85 16        	sta	<L375+wc_1
  9765 08:21CB: 18           	clc
  9766 08:21CC: A9 02 00     	lda	#$2
  9767 08:21CF: 65 27        	adc	<L374+lfn_0
  9768 08:21D1: 85 27        	sta	<L374+lfn_0
  9769 08:21D3: 90 02        	bcc	L379
  9770 08:21D5: E6 29        	inc	<L374+lfn_0+2
  9771                        L379:
  9772                        ;			for (i = 0; i < 16; i++)
  9773                        	.line	2239
  9774 08:21D7: 64 12        	stz	<L375+i_1
  9775                        L10181:
  9776                        ;			{
  9777                        	.line	2240
  9778                        ;				sreg = (sreg << 1) + (wc
                     & 1);
  9779                        	.line	2241
  9780 08:21D9: A5 16        	lda	<L375+wc_1
  9781 08:21DB: 29 01 00     	and	#<$1
  9782 08:21DE: 85 01        	sta	<R0
  9783 08:21E0: A5 01        	lda	<R0
  9784 08:21E2: 85 01        	sta	<R0
  9785 08:21E4: 64 03        	stz	<R0+2
  9786 08:21E6: A5 18        	lda	<L375+sreg_1
  9787 08:21E8: 85 05        	sta	<R1
  9788 08:21EA: A5 1A        	lda	<L375+sreg_1+2
  9789 08:21EC: 85 07        	sta	<R1+2
  9790 08:21EE: 06 05        	asl	<R1
  Mon Aug  9 2021 16:52                                                Page 190


  9791 08:21F0: 26 07        	rol	<R1+2
  9792 08:21F2: 18           	clc
  9793 08:21F3: A5 05        	lda	<R1
  9794 08:21F5: 65 01        	adc	<R0
  9795 08:21F7: 85 18        	sta	<L375+sreg_1
  9796 08:21F9: A5 07        	lda	<R1+2
  9797 08:21FB: 65 03        	adc	<R0+2
  9798 08:21FD: 85 1A        	sta	<L375+sreg_1+2
  9799                        ;				wc >>= 1;
  9800                        	.line	2242
  9801 08:21FF: 46 16        	lsr	<L375+wc_1
  9802                        ;				if (sreg & 0x10000) sreg
                     ^= 0x11021;
  9803                        	.line	2243
  9804 08:2201: A5 1A        	lda	<L375+sreg_1+2
  9805 08:2203: 29 01 00     	and	#^$10000
  9806 08:2206: D0 03        	bne	L380
  9807 08:2208: 82 0E 00     	brl	L10182
  9808                        L380:
  9809                        	.line	2243
  9810 08:220B: A5 18        	lda	<L375+sreg_1
  9811 08:220D: 49 21 10     	eor	#<$11021
  9812 08:2210: 85 18        	sta	<L375+sreg_1
  9813 08:2212: A5 1A        	lda	<L375+sreg_1+2
  9814 08:2214: 49 01 00     	eor	#^$11021
  9815 08:2217: 85 1A        	sta	<L375+sreg_1+2
  9816                        ;			}
  9817                        L10182:
  9818                        	.line	2244
  9819                        L10179:
  9820 08:2219: E6 12        	inc	<L375+i_1
  9821 08:221B: A5 12        	lda	<L375+i_1
  9822 08:221D: C9 10 00     	cmp	#<$10
  9823 08:2220: B0 03        	bcs	L381
  9824 08:2222: 82 B4 FF     	brl	L10181
  9825                        L381:
  9826                        L10180:
  9827                        ;		}
  9828                        	.line	2245
  9829 08:2225: 82 98 FF     	brl	L10177
  9830                        L10178:
  9831                        ;		seq = (UINT)sreg;
  9832                        	.line	2246
  9833 08:2228: A5 18        	lda	<L375+sreg_1
  9834 08:222A: 85 2B        	sta	<L374+seq_0
  9835                        ;	}
  9836                        	.line	2247
  9837                        ;
  9838                        ;	/* itoa (hexdecimal) */
  9839                        ;	i = 7;
  9840                        L10176:
  9841                        	.line	2250
  9842 08:222C: A9 07 00     	lda	#$7
  9843 08:222F: 85 12        	sta	<L375+i_1
  9844                        ;	do
  9845                        	.line	2251
  9846                        L10185:
  9847                        ;	{
  Mon Aug  9 2021 16:52                                                Page 191


  9848                        	.line	2252
  9849                        ;		c = (BYTE)((seq % 16) + '0');
  9850                        	.line	2253
  9851 08:2231: A5 2B        	lda	<L374+seq_0
  9852 08:2233: 29 0F 00     	and	#<$f
  9853 08:2236: 85 01        	sta	<R0
  9854 08:2238: 18           	clc
  9855 08:2239: A9 30 00     	lda	#$30
  9856 08:223C: 65 01        	adc	<R0
  9857 08:223E: 85 05        	sta	<R1
  9858 08:2240: E2 20        	sep	#$20
  9859                        	longa	off
  9860 08:2242: A5 05        	lda	<R1
  9861 08:2244: 85 11        	sta	<L375+c_1
  9862 08:2246: C2 20        	rep	#$20
  9863                        	longa	on
  9864                        ;		if (c > '9') c += 7;
  9865                        	.line	2254
  9866 08:2248: E2 20        	sep	#$20
  9867                        	longa	off
  9868 08:224A: A9 39        	lda	#$39
  9869 08:224C: C5 11        	cmp	<L375+c_1
  9870 08:224E: C2 20        	rep	#$20
  9871                        	longa	on
  9872 08:2250: 90 03        	bcc	L382
  9873 08:2252: 82 0B 00     	brl	L10186
  9874                        L382:
  9875                        	.line	2254
  9876 08:2255: E2 20        	sep	#$20
  9877                        	longa	off
  9878 08:2257: 18           	clc
  9879 08:2258: A9 07        	lda	#$7
  9880 08:225A: 65 11        	adc	<L375+c_1
  9881 08:225C: 85 11        	sta	<L375+c_1
  9882 08:225E: C2 20        	rep	#$20
  9883                        	longa	on
  9884                        ;		ns[i--] = c;
  9885                        L10186:
  9886                        	.line	2255
  9887 08:2260: E2 20        	sep	#$20
  9888                        	longa	off
  9889 08:2262: A5 11        	lda	<L375+c_1
  9890 08:2264: A6 12        	ldx	<L375+i_1
  9891 08:2266: 95 09        	sta	<L375+ns_1,X
  9892 08:2268: C2 20        	rep	#$20
  9893                        	longa	on
  9894 08:226A: C6 12        	dec	<L375+i_1
  9895                        ;		seq /= 16;
  9896                        	.line	2256
  9897 08:226C: A5 2B        	lda	<L374+seq_0
  9898 08:226E: 4A           	lsr	A
  9899 08:226F: 4A           	lsr	A
  9900 08:2270: 4A           	lsr	A
  9901 08:2271: 4A           	lsr	A
  9902 08:2272: 85 2B        	sta	<L374+seq_0
  9903                        ;	}while (seq);
  9904                        	.line	2257
  9905                        L10183:
  Mon Aug  9 2021 16:52                                                Page 192


  9906 08:2274: A5 2B        	lda	<L374+seq_0
  9907 08:2276: F0 03        	beq	L383
  9908 08:2278: 82 B6 FF     	brl	L10185
  9909                        L383:
  9910                        L10184:
  9911                        ;	ns[i] = '~';
  9912                        	.line	2258
  9913 08:227B: E2 20        	sep	#$20
  9914                        	longa	off
  9915 08:227D: A9 7E        	lda	#$7e
  9916 08:227F: A6 12        	ldx	<L375+i_1
  9917 08:2281: 95 09        	sta	<L375+ns_1,X
  9918 08:2283: C2 20        	rep	#$20
  9919                        	longa	on
  9920                        ;
  9921                        ;	/* Append the number to the SFN body */
  9922                        ;	for (j = 0; j < i && dst[j] != ' '; j++)
  9923                        	.line	2261
  9924 08:2285: 64 14        	stz	<L375+j_1
  9925 08:2287: 82 24 00     	brl	L10190
  9926                        L10189:
  9927                        ;	{
  9928                        	.line	2262
  9929                        ;		if (dbc_1st(dst[j]))
  9930                        	.line	2263
  9931                        ;		{
  9932 08:228A: A4 14        	ldy	<L375+j_1
  9933 08:228C: B7 1F        	lda	[<L374+dst_0],Y
  9934 08:228E: 48           	pha
  9935 08:228F: 22 B7 02 08  	jsl	~~dbc_1st
  9936 08:2293: AA           	tax
  9937 08:2294: D0 03        	bne	L384
  9938 08:2296: 82 13 00     	brl	L10191
  9939                        L384:
  9940                        	.line	2264
  9941                        ;			if (j == i - 1) break;
  9942                        	.line	2265
  9943 08:2299: 18           	clc
  9944 08:229A: A9 FF FF     	lda	#$ffff
  9945 08:229D: 65 12        	adc	<L375+i_1
  9946 08:229F: 85 01        	sta	<R0
  9947 08:22A1: A5 01        	lda	<R0
  9948 08:22A3: C5 14        	cmp	<L375+j_1
  9949 08:22A5: D0 03        	bne	L385
  9950 08:22A7: 82 1C 00     	brl	L10188
  9951                        L385:
  9952                        ;			j++;
  9953                        	.line	2266
  9954 08:22AA: E6 14        	inc	<L375+j_1
  9955                        ;		}
  9956                        	.line	2267
  9957                        ;	}
  9958                        L10191:
  9959                        	.line	2268
  9960                        L10187:
  9961 08:22AC: E6 14        	inc	<L375+j_1
  9962                        L10190:
  9963 08:22AE: A5 14        	lda	<L375+j_1
  Mon Aug  9 2021 16:52                                                Page 193


  9964 08:22B0: C5 12        	cmp	<L375+i_1
  9965 08:22B2: 90 03        	bcc	L387
  9966 08:22B4: 82 0F 00     	brl	L386
  9967                        L387:
  9968 08:22B7: E2 20        	sep	#$20
  9969                        	longa	off
  9970 08:22B9: A4 14        	ldy	<L375+j_1
  9971 08:22BB: B7 1F        	lda	[<L374+dst_0],Y
  9972 08:22BD: C9 20        	cmp	#<$20
  9973 08:22BF: C2 20        	rep	#$20
  9974                        	longa	on
  9975 08:22C1: F0 03        	beq	L388
  9976 08:22C3: 82 C4 FF     	brl	L10189
  9977                        L388:
  9978                        L386:
  9979                        L10188:
  9980                        ;	do
  9981                        	.line	2269
  9982                        L10194:
  9983                        ;	{
  9984                        	.line	2270
  9985                        ;		dst[j++] = (i < 8) ? ns[i++] : ' ';
  9986                        	.line	2271
  9987 08:22C6: A5 14        	lda	<L375+j_1
  9988 08:22C8: 85 01        	sta	<R0
  9989 08:22CA: E6 14        	inc	<L375+j_1
  9990 08:22CC: A5 12        	lda	<L375+i_1
  9991 08:22CE: C9 08 00     	cmp	#<$8
  9992 08:22D1: 90 03        	bcc	L390
  9993 08:22D3: 82 0F 00     	brl	L389
  9994                        L390:
  9995 08:22D6: A5 12        	lda	<L375+i_1
  9996 08:22D8: 85 05        	sta	<R1
  9997 08:22DA: E6 12        	inc	<L375+i_1
  9998 08:22DC: A6 05        	ldx	<R1
  9999 08:22DE: B5 09        	lda	<L375+ns_1,X
 10000 08:22E0: 29 FF 00     	and	#$ff
 10001 08:22E3: 80 03        	bra	L391
 10002                        L389:
 10003 08:22E5: A9 20 00     	lda	#$20
 10004                        L391:
 10005 08:22E8: E2 20        	sep	#$20
 10006                        	longa	off
 10007 08:22EA: A4 01        	ldy	<R0
 10008 08:22EC: 97 1F        	sta	[<L374+dst_0],Y
 10009 08:22EE: C2 20        	rep	#$20
 10010                        	longa	on
 10011                        ;	}while (j < 8);
 10012                        	.line	2272
 10013                        L10192:
 10014 08:22F0: A5 14        	lda	<L375+j_1
 10015 08:22F2: C9 08 00     	cmp	#<$8
 10016 08:22F5: B0 03        	bcs	L392
 10017 08:22F7: 82 CC FF     	brl	L10194
 10018                        L392:
 10019                        L10193:
 10020                        ;}
 10021                        	.line	2273
  Mon Aug  9 2021 16:52                                                Page 194


 10022                        L393:
 10023 08:22FA: A5 1D        	lda	<L374+2
 10024 08:22FC: 85 2B        	sta	<L374+2+14
 10025 08:22FE: A5 1C        	lda	<L374+1
 10026 08:2300: 85 2A        	sta	<L374+1+14
 10027 08:2302: 2B           	pld
 10028 08:2303: 3B           	tsc
 10029 08:2304: 18           	clc
 10030 08:2305: 69 29 00     	adc	#L374+14
 10031 08:2308: 1B           	tcs
 10032 08:2309: 6B           	rtl
 10033                        	.endblock	2273
 10034             0000001B   L374	equ	27
 10035             00000009   L375	equ	9
 10036 08:230A:              	ends
 10037                        	efunc
 10038                        	.endfunc	2273,9,27
 10039                        	.line	2273
 10040                        ;#endif	/* FF_USE_LFN && !FF_FS_READONLY */
 10041                        ;
 10042                        ;#if FF_USE_LFN
 10043                        ;/*-----------------------------------------------
                    ------------------------*/
 10044                        ;/* FAT-LFN: Calculate checksum of an SFN entry   
                                            */
 10045                        ;/*-----------------------------------------------
                    ------------------------*/
 10046                        ;
 10047                        ;static BYTE sum_sfn (
 10048                        ;		const BYTE* dir /* Pointer to the SFN en
                    try */
 10049                        ;)
 10050                        ;{
 10051                        	.line	2281
 10052                        	.line	2284
 10053                        	FFDOS
 10054                        	func
 10055                        	.function	2284
 10056                        ~~sum_sfn:
 10057                        	longa	on
 10058                        	longi	on
 10059 08:230A: 3B           	tsc
 10060 08:230B: 38           	sec
 10061 08:230C: E9 0F 00     	sbc	#L394
 10062 08:230F: 1B           	tcs
 10063 08:2310: 0B           	phd
 10064 08:2311: 5B           	tcd
 10065             00000004   dir_0	set	4
 10066                        	.block	2284
 10067                        ;	BYTE sum = 0;
 10068                        ;	UINT n = 11;
 10069                        ;
 10070                        ;	do
 10071             00000000   sum_1	set	0
 10072             00000001   n_1	set	1
 10073                        	.sym	sum,0,14,1,8
 10074                        	.sym	n,1,16,1,16
 10075                        	.sym	dir,4,142,6,32
  Mon Aug  9 2021 16:52                                                Page 195


 10076 08:2312: E2 20        	sep	#$20
 10077                        	longa	off
 10078 08:2314: 64 0D        	stz	<L395+sum_1
 10079 08:2316: C2 20        	rep	#$20
 10080                        	longa	on
 10081 08:2318: A9 0B 00     	lda	#$b
 10082 08:231B: 85 0E        	sta	<L395+n_1
 10083                        	.line	2288
 10084                        L10197:
 10085                        ;	{
 10086                        	.line	2289
 10087                        ;		sum = (sum >> 1) + (sum << 7) + *dir++;
 10088                        	.line	2290
 10089 08:231D: A5 0D        	lda	<L395+sum_1
 10090 08:231F: A2 07 00     	ldx	#<$7
 10091                        	xref	~~~casl
 10092 08:2322: 22 xx xx xx  	jsl	~~~casl
 10093 08:2326: E2 20        	sep	#$20
 10094                        	longa	off
 10095 08:2328: 85 01        	sta	<R0
 10096 08:232A: C2 20        	rep	#$20
 10097                        	longa	on
 10098 08:232C: E2 20        	sep	#$20
 10099                        	longa	off
 10100 08:232E: A5 0D        	lda	<L395+sum_1
 10101 08:2330: 4A           	lsr	A
 10102 08:2331: 85 05        	sta	<R1
 10103 08:2333: C2 20        	rep	#$20
 10104                        	longa	on
 10105 08:2335: E2 20        	sep	#$20
 10106                        	longa	off
 10107 08:2337: 18           	clc
 10108 08:2338: A5 05        	lda	<R1
 10109 08:233A: 65 01        	adc	<R0
 10110 08:233C: 85 09        	sta	<R2
 10111 08:233E: C2 20        	rep	#$20
 10112                        	longa	on
 10113 08:2340: E2 20        	sep	#$20
 10114                        	longa	off
 10115 08:2342: 18           	clc
 10116 08:2343: A5 09        	lda	<R2
 10117 08:2345: 67 13        	adc	[<L394+dir_0]
 10118 08:2347: 85 0D        	sta	<L395+sum_1
 10119 08:2349: C2 20        	rep	#$20
 10120                        	longa	on
 10121 08:234B: E6 13        	inc	<L394+dir_0
 10122 08:234D: D0 02        	bne	L397
 10123 08:234F: E6 15        	inc	<L394+dir_0+2
 10124                        L397:
 10125                        ;	}while (--n);
 10126                        	.line	2291
 10127                        L10195:
 10128 08:2351: C6 0E        	dec	<L395+n_1
 10129 08:2353: A5 0E        	lda	<L395+n_1
 10130 08:2355: F0 03        	beq	L398
 10131 08:2357: 82 C3 FF     	brl	L10197
 10132                        L398:
 10133                        L10196:
  Mon Aug  9 2021 16:52                                                Page 196


 10134                        ;	return sum;
 10135                        	.line	2292
 10136 08:235A: A5 0D        	lda	<L395+sum_1
 10137 08:235C: 29 FF 00     	and	#$ff
 10138                        L399:
 10139 08:235F: A8           	tay
 10140 08:2360: A5 11        	lda	<L394+2
 10141 08:2362: 85 15        	sta	<L394+2+4
 10142 08:2364: A5 10        	lda	<L394+1
 10143 08:2366: 85 14        	sta	<L394+1+4
 10144 08:2368: 2B           	pld
 10145 08:2369: 3B           	tsc
 10146 08:236A: 18           	clc
 10147 08:236B: 69 13 00     	adc	#L394+4
 10148 08:236E: 1B           	tcs
 10149 08:236F: 98           	tya
 10150 08:2370: 6B           	rtl
 10151                        ;}
 10152                        	.line	2293
 10153                        	.endblock	2293
 10154             0000000F   L394	equ	15
 10155             0000000D   L395	equ	13
 10156 08:2371:              	ends
 10157                        	efunc
 10158                        	.endfunc	2293,13,15
 10159                        	.line	2293
 10160                        ;
 10161                        ;#endif	/* FF_USE_LFN */
 10162                        ;
 10163                        ;#if FF_FS_EXFAT
 10164                        ;/*-----------------------------------------------
                    ------------------------*/
 10165                        ;/* exFAT: Checksum                               
                                            */
 10166                        ;/*-----------------------------------------------
                    ------------------------*/
 10167                        ;
 10168                        ;static WORD xdir_sum ( /* Get checksum of the dir
                    ectoly entry block */
 10169                        ;		const BYTE* dir /* Directory entry block
                     to be calculated */
 10170                        ;)
 10171                        ;{
 10172                        ;	UINT i, szblk;
 10173                        ;	WORD sum;
 10174                        ;
 10175                        ;	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE; /* Numb
                    er of bytes of the entry block */
 10176                        ;	for (i = sum = 0; i < szblk; i++)
 10177                        ;	{
 10178                        ;		if (i == XDIR_SetSum)
 10179                        ;		{ /* Skip 2-byte sum field */
 10180                        ;			i++;
 10181                        ;		}
 10182                        ;		else
 10183                        ;		{
 10184                        ;			sum = ((sum & 1) ? 0x8000 : 0) +
                     (sum >> 1) + dir[i];
  Mon Aug  9 2021 16:52                                                Page 197


 10185                        ;		}
 10186                        ;	}
 10187                        ;	return sum;
 10188                        ;}
 10189                        ;
 10190                        ;static WORD xname_sum ( /* Get check sum (to be u
                    sed as hash) of the file name */
 10191                        ;		const WCHAR* name /* File name to be cal
                    culated */
 10192                        ;)
 10193                        ;{
 10194                        ;	WCHAR chr;
 10195                        ;	WORD sum = 0;
 10196                        ;
 10197                        ;	while ((chr = *name++) != 0)
 10198                        ;	{
 10199                        ;		chr = (WCHAR)ff_wtoupper(chr); /* File n
                    ame needs to be up-case converted */
 10200                        ;		sum = ((sum & 1) ? 0x8000 : 0) + (sum >>
                     1) + (chr & 0xFF);
 10201                        ;		sum = ((sum & 1) ? 0x8000 : 0) + (sum >>
                     1) + (chr >> 8);
 10202                        ;	}
 10203                        ;	return sum;
 10204                        ;}
 10205                        ;
 10206                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 10207                        ;static DWORD xsum32 ( /* Returns 32-bit checksum 
                    */
 10208                        ;		BYTE dat, /* Byte to be calculated (byte
                    -by-byte processing) */
 10209                        ;		DWORD sum /* Previous sum value */
 10210                        ;)
 10211                        ;{
 10212                        ;	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) 
                    + dat;
 10213                        ;	return sum;
 10214                        ;}
 10215                        ;#endif
 10216                        ;
 10217                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
 10218                        ;/*-----------------------------------------------
                    -------*/
 10219                        ;/* exFAT: Get object information from a directory
                     block */
 10220                        ;/*-----------------------------------------------
                    -------*/
 10221                        ;
 10222                        ;static void get_xfileinfo (
 10223                        ;		BYTE* dirb, /* Pointer to the direcotry 
                    entry block 85+C0+C1s */
 10224                        ;		FILINFO* fno /* Buffer to store the extr
                    acted file information */
 10225                        ;)
 10226                        ;{
 10227                        ;	WCHAR wc, hs;
 10228                        ;	UINT di, si, nc;
 10229                        ;
  Mon Aug  9 2021 16:52                                                Page 198


 10230                        ;	/* Get file name from the entry block */
 10231                        ;	si = SZDIRE * 2; /* 1st C1 entry */
 10232                        ;	nc = 0; hs = 0; di = 0;
 10233                        ;	while (nc < dirb[XDIR_NumName])
 10234                        ;	{
 10235                        ;		if (si >= MAXDIRB(FF_MAX_LFN))
 10236                        ;		{	di = 0; break;} /* Truncated dir
                    ectory block? */
 10237                        ;		if ((si % SZDIRE) == 0) si += 2; /* Skip
                     entry type field */
 10238                        ;		wc = ld_word(dirb + si); si += 2; nc++; 
                    /* Get a character */
 10239                        ;		if (hs == 0 && IsSurrogate(wc))
 10240                        ;		{ /* Is it a surrogate? */
 10241                        ;			hs = wc; continue; /* Get low su
                    rrogate */
 10242                        ;		}
 10243                        ;		wc = put_utf((DWORD)hs << 16 | wc, &fno-
                    >fname[di], FF_LFN_BUF - di); /* Store it in API encoding */
 10244                        ;		if (wc == 0)
 10245                        ;		{	di = 0; break;} /* Buffer overfl
                    ow or wrong encoding? */
 10246                        ;		di += wc;
 10247                        ;		hs = 0;
 10248                        ;	}
 10249                        ;	if (hs != 0) di = 0; /* Broken surrogate pair? *
                    /
 10250                        ;	if (di == 0) fno->fname[di++] = '?'; /* Inaccess
                    ible object name? */
 10251                        ;	fno->fname[di] = 0; /* Terminate the name */
 10252                        ;	fno->altname[0] = 0; /* exFAT does not support S
                    FN */
 10253                        ;
 10254                        ;	fno->fattrib = dirb[XDIR_Attr]; /* Attribute */
 10255                        ;	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qw
                    ord(dirb + XDIR_FileSize); /* Size */
 10256                        ;	fno->ftime = ld_word(dirb + XDIR_ModTime + 0); /
                    * Time */
 10257                        ;	fno->fdate = ld_word(dirb + XDIR_ModTime + 2); /
                    * Date */
 10258                        ;}
 10259                        ;
 10260                        ;#endif	/* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >=
                     2 */
 10261                        ;
 10262                        ;/*-----------------------------------*/
 10263                        ;/* exFAT: Get a directry entry block */
 10264                        ;/*-----------------------------------*/
 10265                        ;
 10266                        ;static FRESULT load_xdir ( /* FR_INT_ERR: invalid
                     entry block */
 10267                        ;		DIR* dp /* Reading direcotry object poin
                    ting top of the entry block to load */
 10268                        ;)
 10269                        ;{
 10270                        ;	FRESULT res;
 10271                        ;	UINT i, sz_ent;
 10272                        ;	BYTE* dirb = dp->obj.fs->dirbuf; /* Pointer to t
  Mon Aug  9 2021 16:52                                                Page 199


                    he on-memory direcotry entry block 85+C0+C1s */
 10273                        ;
 10274                        ;	/* Load file-directory entry */
 10275                        ;	res = move_window(dp->obj.fs, dp->sect);
 10276                        ;	if (res != FR_OK) return res;
 10277                        ;	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_
                    INT_ERR; /* Invalid order */
 10278                        ;	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 10279                        ;	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 10280                        ;	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE)
                     return FR_INT_ERR;
 10281                        ;
 10282                        ;	/* Load stream-extension entry */
 10283                        ;	res = dir_next(dp, 0);
 10284                        ;	if (res == FR_NO_FILE) res = FR_INT_ERR; /* It c
                    annot be */
 10285                        ;	if (res != FR_OK) return res;
 10286                        ;	res = move_window(dp->obj.fs, dp->sect);
 10287                        ;	if (res != FR_OK) return res;
 10288                        ;	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_I
                    NT_ERR; /* Invalid order */
 10289                        ;	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 10290                        ;	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return
                     FR_INT_ERR;
 10291                        ;
 10292                        ;	/* Load file-name entries */
 10293                        ;	i = 2 * SZDIRE; /* Name offset to load */
 10294                        ;	do
 10295                        ;	{
 10296                        ;		res = dir_next(dp, 0);
 10297                        ;		if (res == FR_NO_FILE) res = FR_INT_ERR;
                     /* It cannot be */
 10298                        ;		if (res != FR_OK) return res;
 10299                        ;		res = move_window(dp->obj.fs, dp->sect);
 10300                        ;		if (res != FR_OK) return res;
 10301                        ;		if (dp->dir[XDIR_Type] != ET_FILENAME) r
                    eturn FR_INT_ERR; /* Invalid order */
 10302                        ;		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dir
                    b + i, dp->dir, SZDIRE);
 10303                        ;	}while ((i += SZDIRE) < sz_ent);
 10304                        ;
 10305                        ;	/* Sanity check (do it for only accessible objec
                    t) */
 10306                        ;	if (i <= MAXDIRB(FF_MAX_LFN))
 10307                        ;	{
 10308                        ;		if (xdir_sum(dirb) != ld_word(dirb + XDI
                    R_SetSum)) return FR_INT_ERR;
 10309                        ;	}
 10310                        ;	return FR_OK;
 10311                        ;}
 10312                        ;
 10313                        ;/*-----------------------------------------------
                    -------------------*/
 10314                        ;/* exFAT: Initialize object allocation info with 
                    loaded entry block */
 10315                        ;/*-----------------------------------------------
                    -------------------*/
 10316                        ;
  Mon Aug  9 2021 16:52                                                Page 200


 10317                        ;static void init_alloc_info (
 10318                        ;		FATFS* fs, /* Filesystem object */
 10319                        ;		FFOBJID* obj /* Object allocation inform
                    ation to be initialized */
 10320                        ;)
 10321                        ;{
 10322                        ;	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus
                    ); /* Start cluster */
 10323                        ;	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSi
                    ze); /* Size */
 10324                        ;	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2; /* Al
                    location status */
 10325                        ;	obj->n_frag = 0; /* No last fragment info */
 10326                        ;}
 10327                        ;
 10328                        ;#if !FF_FS_READONLY || FF_FS_RPATH != 0
 10329                        ;/*-----------------------------------------------
                    -*/
 10330                        ;/* exFAT: Load the object's directory entry block
                     */
 10331                        ;/*-----------------------------------------------
                    -*/
 10332                        ;
 10333                        ;static FRESULT load_obj_xdir (
 10334                        ;		DIR* dp, /* Blank directory object to be
                     used to access containing direcotry */
 10335                        ;		const FFOBJID* obj /* Object with its co
                    ntaining directory information */
 10336                        ;)
 10337                        ;{
 10338                        ;	FRESULT res;
 10339                        ;
 10340                        ;	/* Open object containing directory */
 10341                        ;	dp->obj.fs = obj->fs;
 10342                        ;	dp->obj.sclust = obj->c_scl;
 10343                        ;	dp->obj.stat = (BYTE)obj->c_size;
 10344                        ;	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 10345                        ;	dp->obj.n_frag = 0;
 10346                        ;	dp->blk_ofs = obj->c_ofs;
 10347                        ;
 10348                        ;	res = dir_sdi(dp, dp->blk_ofs); /* Goto object's
                     entry block */
 10349                        ;	if (res == FR_OK)
 10350                        ;	{
 10351                        ;		res = load_xdir(dp); /* Load the object'
                    s entry block */
 10352                        ;	}
 10353                        ;	return res;
 10354                        ;}
 10355                        ;#endif
 10356                        ;
 10357                        ;#if !FF_FS_READONLY
 10358                        ;/*----------------------------------------*/
 10359                        ;/* exFAT: Store the directory entry block */
 10360                        ;/*----------------------------------------*/
 10361                        ;
 10362                        ;static FRESULT store_xdir (
 10363                        ;		DIR* dp /* Pointer to the direcotry obje
  Mon Aug  9 2021 16:52                                                Page 201


                    ct */
 10364                        ;)
 10365                        ;{
 10366                        ;	FRESULT res;
 10367                        ;	UINT nent;
 10368                        ;	BYTE* dirb = dp->obj.fs->dirbuf; /* Pointer to t
                    he direcotry entry block 85+C0+C1s */
 10369                        ;
 10370                        ;	/* Create set sum */
 10371                        ;	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 10372                        ;	nent = dirb[XDIR_NumSec] + 1;
 10373                        ;
 10374                        ;	/* Store the direcotry entry block to the direct
                    ory */
 10375                        ;	res = dir_sdi(dp, dp->blk_ofs);
 10376                        ;	while (res == FR_OK)
 10377                        ;	{
 10378                        ;		res = move_window(dp->obj.fs, dp->sect);
 10379                        ;		if (res != FR_OK) break;
 10380                        ;		mem_cpy(dp->dir, dirb, SZDIRE);
 10381                        ;		dp->obj.fs->wflag = 1;
 10382                        ;		if (--nent == 0) break;
 10383                        ;		dirb += SZDIRE;
 10384                        ;		res = dir_next(dp, 0);
 10385                        ;	}
 10386                        ;	return (res == FR_OK || res == FR_DISK_ERR) ? re
                    s : FR_INT_ERR;
 10387                        ;}
 10388                        ;
 10389                        ;/*-------------------------------------------*/
 10390                        ;/* exFAT: Create a new directory enrty block */
 10391                        ;/*-------------------------------------------*/
 10392                        ;
 10393                        ;static void create_xdir (
 10394                        ;		BYTE* dirb, /* Pointer to the direcotry 
                    entry block buffer */
 10395                        ;		const WCHAR* lfn /* Pointer to the objec
                    t name */
 10396                        ;)
 10397                        ;{
 10398                        ;	UINT i;
 10399                        ;	BYTE nc1, nlen;
 10400                        ;	WCHAR wc;
 10401                        ;
 10402                        ;	/* Create file-directory and stream-extension en
                    try */
 10403                        ;	mem_set(dirb, 0, 2 * SZDIRE);
 10404                        ;	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 10405                        ;	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 10406                        ;
 10407                        ;	/* Create file-name entries */
 10408                        ;	i = SZDIRE * 2; /* Top of file_name entries */
 10409                        ;	nlen = nc1 = 0; wc = 1;
 10410                        ;	do
 10411                        ;	{
 10412                        ;		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 10413                        ;		do
 10414                        ;		{ /* Fill name field */
  Mon Aug  9 2021 16:52                                                Page 202


 10415                        ;			if (wc != 0 && (wc = lfn[nlen]) 
                    != 0) nlen++; /* Get a character if exist */
 10416                        ;			st_word(dirb + i, wc); /* Store 
                    it */
 10417                        ;			i += 2;
 10418                        ;		}while (i % SZDIRE != 0);
 10419                        ;		nc1++;
 10420                        ;	}while (lfn[nlen]); /* Fill next entry if any ch
                    ar follows */
 10421                        ;
 10422                        ;	dirb[XDIR_NumName] = nlen; /* Set name length */
 10423                        ;	dirb[XDIR_NumSec] = 1 + nc1; /* Set secondary co
                    unt (C0 + C1s) */
 10424                        ;	st_word(dirb + XDIR_NameHash, xname_sum(lfn)); /
                    * Set name hash */
 10425                        ;}
 10426                        ;
 10427                        ;#endif	/* !FF_FS_READONLY */
 10428                        ;#endif	/* FF_FS_EXFAT */
 10429                        ;
 10430                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF
                    _USE_LABEL || FF_FS_EXFAT
 10431                        ;/*-----------------------------------------------
                    ------------------------*/
 10432                        ;/* Read an object from the directory             
                                            */
 10433                        ;/*-----------------------------------------------
                    ------------------------*/
 10434                        ;
 10435                        ;#define DIR_READ_FILE(dp) dir_read(dp, 0)
 10436                        ;#define DIR_READ_LABEL(dp) dir_read(dp, 1)
 10437                        ;
 10438                        ;static FRESULT dir_read(DIR* dp, /* Pointer to th
                    e directory object */
 10439                        ;int vol /* Filtered by 0:file/directory or 1:volu
                    me label */
 10440                        ;)
 10441                        ;{
 10442                        	.line	2572
 10443                        	.line	2575
 10444                        	FFDOS
 10445                        	func
 10446                        	.function	2575
 10447                        ~~dir_read:
 10448                        	longa	on
 10449                        	longi	on
 10450 08:2371: 3B           	tsc
 10451 08:2372: 38           	sec
 10452 08:2373: E9 12 00     	sbc	#L400
 10453 08:2376: 1B           	tcs
 10454 08:2377: 0B           	phd
 10455 08:2378: 5B           	tcd
 10456             00000004   dp_0	set	4
 10457             00000008   vol_0	set	8
 10458                        	.block	2575
 10459                        ;	FRESULT res = FR_NO_FILE;
 10460                        ;	FATFS *fs = dp->obj.fs;
 10461                        ;	BYTE attr, b;
  Mon Aug  9 2021 16:52                                                Page 203


 10462                        ;#if FF_USE_LFN
 10463                        ;	BYTE ord = 0xFF, sum = 0xFF;
 10464                        ;#endif
 10465                        ;
 10466                        ;	while (dp->sect)
 10467             00000000   res_1	set	0
 10468             00000002   fs_1	set	2
 10469             00000006   attr_1	set	6
 10470             00000007   b_1	set	7
 10471             00000008   ord_1	set	8
 10472             00000009   sum_1	set	9
 10473                        	.sym	res,0,5,1,16
 10474                        	.sym	fs,2,138,1,32,75
 10475                        	.sym	attr,6,14,1,8
 10476                        	.sym	b,7,14,1,8
 10477                        	.sym	ord,8,14,1,8
 10478                        	.sym	sum,9,14,1,8
 10479                        	.sym	dp,4,138,6,32,78
 10480                        	.sym	vol,8,5,6,16
 10481 08:2379: A9 04 00     	lda	#$4
 10482 08:237C: 85 09        	sta	<L401+res_1
 10483 08:237E: A7 16        	lda	[<L400+dp_0]
 10484 08:2380: 85 0B        	sta	<L401+fs_1
 10485 08:2382: A0 02 00     	ldy	#$2
 10486 08:2385: B7 16        	lda	[<L400+dp_0],Y
 10487 08:2387: 85 0D        	sta	<L401+fs_1+2
 10488 08:2389: E2 20        	sep	#$20
 10489                        	longa	off
 10490 08:238B: A9 FF        	lda	#$ff
 10491 08:238D: 85 11        	sta	<L401+ord_1
 10492 08:238F: C2 20        	rep	#$20
 10493                        	longa	on
 10494 08:2391: E2 20        	sep	#$20
 10495                        	longa	off
 10496 08:2393: A9 FF        	lda	#$ff
 10497 08:2395: 85 12        	sta	<L401+sum_1
 10498 08:2397: C2 20        	rep	#$20
 10499                        	longa	on
 10500                        	.line	2583
 10501                        L10198:
 10502 08:2399: A0 18 00     	ldy	#$18
 10503 08:239C: B7 16        	lda	[<L400+dp_0],Y
 10504 08:239E: A0 1A 00     	ldy	#$1a
 10505 08:23A1: 17 16        	ora	[<L400+dp_0],Y
 10506 08:23A3: D0 03        	bne	L403
 10507 08:23A5: 82 CF 01     	brl	L10199
 10508                        L403:
 10509                        ;	{
 10510                        	.line	2584
 10511                        ;		res = move_window(fs, dp->sect);
 10512                        	.line	2585
 10513 08:23A8: A0 1A 00     	ldy	#$1a
 10514 08:23AB: B7 16        	lda	[<L400+dp_0],Y
 10515 08:23AD: 48           	pha
 10516 08:23AE: A0 18 00     	ldy	#$18
 10517 08:23B1: B7 16        	lda	[<L400+dp_0],Y
 10518 08:23B3: 48           	pha
 10519 08:23B4: D4 0D        	pei	<L401+fs_1+2
  Mon Aug  9 2021 16:52                                                Page 204


 10520 08:23B6: D4 0B        	pei	<L401+fs_1
 10521 08:23B8: 22 97 08 08  	jsl	~~move_window
 10522 08:23BC: 85 09        	sta	<L401+res_1
 10523                        ;		if (res != FR_OK)
 10524                        	.line	2586
 10525                        ;			break;
 10526 08:23BE: A5 09        	lda	<L401+res_1
 10527 08:23C0: F0 03        	beq	L404
 10528 08:23C2: 82 B2 01     	brl	L10199
 10529                        L404:
 10530                        ;		b = dp->dir[DIR_Name]; /* Test for the e
                    ntry type */
 10531                        	.line	2588
 10532 08:23C5: A0 1C 00     	ldy	#$1c
 10533 08:23C8: B7 16        	lda	[<L400+dp_0],Y
 10534 08:23CA: 85 01        	sta	<R0
 10535 08:23CC: A0 1E 00     	ldy	#$1e
 10536 08:23CF: B7 16        	lda	[<L400+dp_0],Y
 10537 08:23D1: 85 03        	sta	<R0+2
 10538 08:23D3: E2 20        	sep	#$20
 10539                        	longa	off
 10540 08:23D5: A7 01        	lda	[<R0]
 10541 08:23D7: 85 10        	sta	<L401+b_1
 10542 08:23D9: C2 20        	rep	#$20
 10543                        	longa	on
 10544                        ;		if (b == 0)
 10545                        	.line	2589
 10546                        ;		{
 10547 08:23DB: A5 10        	lda	<L401+b_1
 10548 08:23DD: 29 FF 00     	and	#$ff
 10549 08:23E0: F0 03        	beq	L405
 10550 08:23E2: 82 08 00     	brl	L10200
 10551                        L405:
 10552                        	.line	2590
 10553                        ;			res = FR_NO_FILE;
 10554                        	.line	2591
 10555 08:23E5: A9 04 00     	lda	#$4
 10556 08:23E8: 85 09        	sta	<L401+res_1
 10557                        ;			break; /* Reached to end of the 
                    directory */
 10558                        	.line	2592
 10559 08:23EA: 82 8A 01     	brl	L10199
 10560                        ;		}
 10561                        	.line	2593
 10562                        ;#if FF_FS_EXFAT
 10563                        ;		if (fs->fs_type == FS_EXFAT)
 10564                        ;		{ /* On the exFAT volume */
 10565                        ;			if (FF_USE_LABEL && vol)
 10566                        ;			{
 10567                        ;				if (b == ET_VLABEL) brea
                    k; /* Volume label entry? */
 10568                        ;			}
 10569                        ;			else
 10570                        ;			{
 10571                        ;				if (b == ET_FILEDIR)
 10572                        ;				{ /* Start of the file e
                    ntry block? */
 10573                        ;					dp->blk_ofs = dp
  Mon Aug  9 2021 16:52                                                Page 205


                    ->dptr; /* Get location of the block */
 10574                        ;					res = load_xdir(
                    dp); /* Load the entry block */
 10575                        ;					if (res == FR_OK
                    )
 10576                        ;					{
 10577                        ;						dp->obj.
                    attr = fs->dirbuf[XDIR_Attr] & AM_MASK; /* Get attribute */
 10578                        ;					}
 10579                        ;					break;
 10580                        ;				}
 10581                        ;			}
 10582                        ;		}
 10583                        ;		else
 10584                        ;#endif
 10585                        ;		{ /* On the FAT/FAT32 volume */
 10586                        L10200:
 10587                        	.line	2617
 10588                        ;			dp->obj.attr = attr = dp->dir[DI
                    R_Attr] & AM_MASK; /* Get attribute */
 10589                        	.line	2618
 10590 08:23ED: A0 1C 00     	ldy	#$1c
 10591 08:23F0: B7 16        	lda	[<L400+dp_0],Y
 10592 08:23F2: 85 01        	sta	<R0
 10593 08:23F4: A0 1E 00     	ldy	#$1e
 10594 08:23F7: B7 16        	lda	[<L400+dp_0],Y
 10595 08:23F9: 85 03        	sta	<R0+2
 10596 08:23FB: E2 20        	sep	#$20
 10597                        	longa	off
 10598 08:23FD: A0 0B 00     	ldy	#$b
 10599 08:2400: B7 01        	lda	[<R0],Y
 10600 08:2402: 29 3F        	and	#<$3f
 10601 08:2404: 85 0F        	sta	<L401+attr_1
 10602 08:2406: C2 20        	rep	#$20
 10603                        	longa	on
 10604 08:2408: E2 20        	sep	#$20
 10605                        	longa	off
 10606 08:240A: A5 0F        	lda	<L401+attr_1
 10607 08:240C: A0 06 00     	ldy	#$6
 10608 08:240F: 97 16        	sta	[<L400+dp_0],Y
 10609 08:2411: C2 20        	rep	#$20
 10610                        	longa	on
 10611                        ;#if FF_USE_LFN		/* LFN configuration */
 10612                        ;			if (b == DDEM || b == '.' || (in
                    t)((attr & ~AM_ARC) == AM_VOL) != vol)
 10613                        	.line	2620
 10614                        ;			{ /* An entry without valid data
                     */
 10615 08:2413: E2 20        	sep	#$20
 10616                        	longa	off
 10617 08:2415: A5 10        	lda	<L401+b_1
 10618 08:2417: C9 E5        	cmp	#<$e5
 10619 08:2419: C2 20        	rep	#$20
 10620                        	longa	on
 10621 08:241B: D0 03        	bne	L407
 10622 08:241D: 82 2E 00     	brl	L406
 10623                        L407:
 10624 08:2420: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 206


 10625                        	longa	off
 10626 08:2422: A5 10        	lda	<L401+b_1
 10627 08:2424: C9 2E        	cmp	#<$2e
 10628 08:2426: C2 20        	rep	#$20
 10629                        	longa	on
 10630 08:2428: D0 03        	bne	L408
 10631 08:242A: 82 21 00     	brl	L406
 10632                        L408:
 10633 08:242D: 64 01        	stz	<R0
 10634 08:242F: A5 0F        	lda	<L401+attr_1
 10635 08:2431: 29 FF 00     	and	#$ff
 10636 08:2434: 29 DF FF     	and	#<$ffffffdf
 10637 08:2437: 85 05        	sta	<R1
 10638 08:2439: A5 05        	lda	<R1
 10639 08:243B: C9 08 00     	cmp	#<$8
 10640 08:243E: F0 03        	beq	L410
 10641 08:2440: 82 02 00     	brl	L409
 10642                        L410:
 10643 08:2443: E6 01        	inc	<R0
 10644                        L409:
 10645 08:2445: A5 01        	lda	<R0
 10646 08:2447: C5 1A        	cmp	<L400+vol_0
 10647 08:2449: D0 03        	bne	L411
 10648 08:244B: 82 0B 00     	brl	L10201
 10649                        L411:
 10650                        L406:
 10651                        	.line	2621
 10652                        ;				ord = 0xFF;
 10653                        	.line	2622
 10654 08:244E: E2 20        	sep	#$20
 10655                        	longa	off
 10656 08:2450: A9 FF        	lda	#$ff
 10657 08:2452: 85 11        	sta	<L401+ord_1
 10658 08:2454: C2 20        	rep	#$20
 10659                        	longa	on
 10660                        ;			}
 10661                        	.line	2623
 10662                        ;			else
 10663 08:2456: 82 07 01     	brl	L10202
 10664                        L10201:
 10665                        ;			{
 10666                        	.line	2625
 10667                        ;				if (attr == AM_LFN)
 10668                        	.line	2626
 10669                        ;				{ /* An LFN entry is fou
                    nd */
 10670 08:2459: E2 20        	sep	#$20
 10671                        	longa	off
 10672 08:245B: A5 0F        	lda	<L401+attr_1
 10673 08:245D: C9 0F        	cmp	#<$f
 10674 08:245F: C2 20        	rep	#$20
 10675                        	longa	on
 10676 08:2461: F0 03        	beq	L412
 10677 08:2463: 82 BA 00     	brl	L10203
 10678                        L412:
 10679                        	.line	2627
 10680                        ;					if (b & LLEF)
 10681                        	.line	2628
  Mon Aug  9 2021 16:52                                                Page 207


 10682                        ;					{ /* Is it start
                     of an LFN sequence? */
 10683 08:2466: E2 20        	sep	#$20
 10684                        	longa	off
 10685 08:2468: A5 10        	lda	<L401+b_1
 10686 08:246A: 29 40        	and	#<$40
 10687 08:246C: C2 20        	rep	#$20
 10688                        	longa	on
 10689 08:246E: D0 03        	bne	L413
 10690 08:2470: 82 3D 00     	brl	L10204
 10691                        L413:
 10692                        	.line	2629
 10693                        ;						sum = dp
                    ->dir[LDIR_Chksum];
 10694                        	.line	2630
 10695 08:2473: A0 1C 00     	ldy	#$1c
 10696 08:2476: B7 16        	lda	[<L400+dp_0],Y
 10697 08:2478: 85 01        	sta	<R0
 10698 08:247A: A0 1E 00     	ldy	#$1e
 10699 08:247D: B7 16        	lda	[<L400+dp_0],Y
 10700 08:247F: 85 03        	sta	<R0+2
 10701 08:2481: E2 20        	sep	#$20
 10702                        	longa	off
 10703 08:2483: A0 0D 00     	ldy	#$d
 10704 08:2486: B7 01        	lda	[<R0],Y
 10705 08:2488: 85 12        	sta	<L401+sum_1
 10706 08:248A: C2 20        	rep	#$20
 10707                        	longa	on
 10708                        ;						b &= (BY
                    TE)~LLEF; ord = b;
 10709                        	.line	2631
 10710 08:248C: E2 20        	sep	#$20
 10711                        	longa	off
 10712 08:248E: A9 40        	lda	#$40
 10713 08:2490: 14 10        	trb	<L401+b_1
 10714 08:2492: C2 20        	rep	#$20
 10715                        	longa	on
 10716                        	.line	2631
 10717 08:2494: E2 20        	sep	#$20
 10718                        	longa	off
 10719 08:2496: A5 10        	lda	<L401+b_1
 10720 08:2498: 85 11        	sta	<L401+ord_1
 10721 08:249A: C2 20        	rep	#$20
 10722                        	longa	on
 10723                        ;						dp->blk_
                    ofs = dp->dptr;
 10724                        	.line	2632
 10725 08:249C: A0 10 00     	ldy	#$10
 10726 08:249F: B7 16        	lda	[<L400+dp_0],Y
 10727 08:24A1: A0 2C 00     	ldy	#$2c
 10728 08:24A4: 97 16        	sta	[<L400+dp_0],Y
 10729 08:24A6: A0 12 00     	ldy	#$12
 10730 08:24A9: B7 16        	lda	[<L400+dp_0],Y
 10731 08:24AB: A0 2E 00     	ldy	#$2e
 10732 08:24AE: 97 16        	sta	[<L400+dp_0],Y
 10733                        ;					}
 10734                        	.line	2633
 10735                        ;					/* Check LFN val
  Mon Aug  9 2021 16:52                                                Page 208


                    idity and capture it */
 10736                        ;					ord = (b == ord 
                    && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->d
                    ir)) ? ord - 1 : 0xFF;
 10737                        L10204:
 10738                        	.line	2635
 10739 08:24B0: E2 20        	sep	#$20
 10740                        	longa	off
 10741 08:24B2: A5 10        	lda	<L401+b_1
 10742 08:24B4: C5 11        	cmp	<L401+ord_1
 10743 08:24B6: C2 20        	rep	#$20
 10744                        	longa	on
 10745 08:24B8: F0 03        	beq	L415
 10746 08:24BA: 82 53 00     	brl	L414
 10747                        L415:
 10748 08:24BD: A0 1C 00     	ldy	#$1c
 10749 08:24C0: B7 16        	lda	[<L400+dp_0],Y
 10750 08:24C2: 85 01        	sta	<R0
 10751 08:24C4: A0 1E 00     	ldy	#$1e
 10752 08:24C7: B7 16        	lda	[<L400+dp_0],Y
 10753 08:24C9: 85 03        	sta	<R0+2
 10754 08:24CB: E2 20        	sep	#$20
 10755                        	longa	off
 10756 08:24CD: A5 12        	lda	<L401+sum_1
 10757 08:24CF: A0 0D 00     	ldy	#$d
 10758 08:24D2: D7 01        	cmp	[<R0],Y
 10759 08:24D4: C2 20        	rep	#$20
 10760                        	longa	on
 10761 08:24D6: F0 03        	beq	L416
 10762 08:24D8: 82 35 00     	brl	L414
 10763                        L416:
 10764 08:24DB: A0 1E 00     	ldy	#$1e
 10765 08:24DE: B7 16        	lda	[<L400+dp_0],Y
 10766 08:24E0: 48           	pha
 10767 08:24E1: A0 1C 00     	ldy	#$1c
 10768 08:24E4: B7 16        	lda	[<L400+dp_0],Y
 10769 08:24E6: 48           	pha
 10770 08:24E7: A0 0D 00     	ldy	#$d
 10771 08:24EA: B7 0B        	lda	[<L401+fs_1],Y
 10772 08:24EC: 48           	pha
 10773 08:24ED: A0 0B 00     	ldy	#$b
 10774 08:24F0: B7 0B        	lda	[<L401+fs_1],Y
 10775 08:24F2: 48           	pha
 10776 08:24F3: 22 41 1F 08  	jsl	~~pick_lfn
 10777 08:24F7: AA           	tax
 10778 08:24F8: D0 03        	bne	L417
 10779 08:24FA: 82 13 00     	brl	L414
 10780                        L417:
 10781 08:24FD: A5 11        	lda	<L401+ord_1
 10782 08:24FF: 29 FF 00     	and	#$ff
 10783 08:2502: 85 01        	sta	<R0
 10784 08:2504: 18           	clc
 10785 08:2505: A9 FF FF     	lda	#$ffff
 10786 08:2508: 65 01        	adc	<R0
 10787 08:250A: 85 05        	sta	<R1
 10788 08:250C: A5 05        	lda	<R1
 10789 08:250E: 80 03        	bra	L418
 10790                        L414:
  Mon Aug  9 2021 16:52                                                Page 209


 10791 08:2510: A9 FF 00     	lda	#$ff
 10792                        L418:
 10793 08:2513: 85 01        	sta	<R0
 10794 08:2515: E2 20        	sep	#$20
 10795                        	longa	off
 10796 08:2517: A5 01        	lda	<R0
 10797 08:2519: 85 11        	sta	<L401+ord_1
 10798 08:251B: C2 20        	rep	#$20
 10799                        	longa	on
 10800                        ;				}
 10801                        	.line	2636
 10802                        ;				else
 10803 08:251D: 82 40 00     	brl	L10205
 10804                        L10203:
 10805                        ;				{ /* An SFN entry is fou
                    nd */
 10806                        	.line	2638
 10807                        ;					if (ord != 0 || 
                    sum != sum_sfn(dp->dir))
 10808                        	.line	2639
 10809                        ;					{ /* Is there a 
                    valid LFN? */
 10810 08:2520: A5 11        	lda	<L401+ord_1
 10811 08:2522: 29 FF 00     	and	#$ff
 10812 08:2525: F0 03        	beq	L420
 10813 08:2527: 82 23 00     	brl	L419
 10814                        L420:
 10815 08:252A: A0 1E 00     	ldy	#$1e
 10816 08:252D: B7 16        	lda	[<L400+dp_0],Y
 10817 08:252F: 48           	pha
 10818 08:2530: A0 1C 00     	ldy	#$1c
 10819 08:2533: B7 16        	lda	[<L400+dp_0],Y
 10820 08:2535: 48           	pha
 10821 08:2536: 22 0A 23 08  	jsl	~~sum_sfn
 10822 08:253A: E2 20        	sep	#$20
 10823                        	longa	off
 10824 08:253C: 85 01        	sta	<R0
 10825 08:253E: C2 20        	rep	#$20
 10826                        	longa	on
 10827 08:2540: E2 20        	sep	#$20
 10828                        	longa	off
 10829 08:2542: A5 01        	lda	<R0
 10830 08:2544: C5 12        	cmp	<L401+sum_1
 10831 08:2546: C2 20        	rep	#$20
 10832                        	longa	on
 10833 08:2548: D0 03        	bne	L421
 10834 08:254A: 82 10 00     	brl	L10206
 10835                        L421:
 10836                        L419:
 10837                        	.line	2640
 10838                        ;						dp->blk_
                    ofs = 0xFFFFFFFF; /* It has no LFN. */
 10839                        	.line	2641
 10840 08:254D: A9 FF FF     	lda	#$ffff
 10841 08:2550: A0 2C 00     	ldy	#$2c
 10842 08:2553: 97 16        	sta	[<L400+dp_0],Y
 10843 08:2555: A9 FF FF     	lda	#$ffff
 10844 08:2558: A0 2E 00     	ldy	#$2e
  Mon Aug  9 2021 16:52                                                Page 210


 10845 08:255B: 97 16        	sta	[<L400+dp_0],Y
 10846                        ;					}
 10847                        	.line	2642
 10848                        ;					break;
 10849                        L10206:
 10850                        	.line	2643
 10851 08:255D: 82 17 00     	brl	L10199
 10852                        ;				}
 10853                        	.line	2644
 10854                        L10205:
 10855                        ;			}
 10856                        	.line	2645
 10857                        L10202:
 10858                        ;#else		/* Non LFN configuration */
 10859                        ;			if (b != DDEM && b != '.' && att
                    r != AM_LFN
 10860                        ;					&& (int) ((attr 
                    & ~AM_ARC) == AM_VOL) == vol)
 10861                        ;			{ /* Is it a valid entry? */
 10862                        ;				break;
 10863                        ;			}
 10864                        ;#endif
 10865                        ;		}
 10866                        	.line	2653
 10867                        ;		res = dir_next(dp, 0); /* Next entry */
 10868                        	.line	2654
 10869 08:2560: F4 00 00     	pea	#<$0
 10870 08:2563: D4 18        	pei	<L400+dp_0+2
 10871 08:2565: D4 16        	pei	<L400+dp_0
 10872 08:2567: 22 75 19 08  	jsl	~~dir_next
 10873 08:256B: 85 09        	sta	<L401+res_1
 10874                        ;		if (res != FR_OK)
 10875                        	.line	2655
 10876                        ;			break;
 10877 08:256D: A5 09        	lda	<L401+res_1
 10878 08:256F: F0 03        	beq	L422
 10879 08:2571: 82 03 00     	brl	L10199
 10880                        L422:
 10881                        ;	}
 10882                        	.line	2657
 10883 08:2574: 82 22 FE     	brl	L10198
 10884                        L10199:
 10885                        ;
 10886                        ;	if (res != FR_OK)
 10887                        	.line	2659
 10888                        ;		dp->sect = 0; /* Terminate the read oper
                    ation on error or EOT */
 10889 08:2577: A5 09        	lda	<L401+res_1
 10890 08:2579: D0 03        	bne	L423
 10891 08:257B: 82 10 00     	brl	L10207
 10892                        L423:
 10893                        	.line	2660
 10894 08:257E: A9 00 00     	lda	#$0
 10895 08:2581: A0 18 00     	ldy	#$18
 10896 08:2584: 97 16        	sta	[<L400+dp_0],Y
 10897 08:2586: A9 00 00     	lda	#$0
 10898 08:2589: A0 1A 00     	ldy	#$1a
 10899 08:258C: 97 16        	sta	[<L400+dp_0],Y
  Mon Aug  9 2021 16:52                                                Page 211


 10900                        ;	return res;
 10901                        L10207:
 10902                        	.line	2661
 10903 08:258E: A5 09        	lda	<L401+res_1
 10904                        L424:
 10905 08:2590: A8           	tay
 10906 08:2591: A5 14        	lda	<L400+2
 10907 08:2593: 85 1A        	sta	<L400+2+6
 10908 08:2595: A5 13        	lda	<L400+1
 10909 08:2597: 85 19        	sta	<L400+1+6
 10910 08:2599: 2B           	pld
 10911 08:259A: 3B           	tsc
 10912 08:259B: 18           	clc
 10913 08:259C: 69 18 00     	adc	#L400+6
 10914 08:259F: 1B           	tcs
 10915 08:25A0: 98           	tya
 10916 08:25A1: 6B           	rtl
 10917                        ;}
 10918                        	.line	2662
 10919                        	.endblock	2662
 10920             00000012   L400	equ	18
 10921             00000009   L401	equ	9
 10922 08:25A2:              	ends
 10923                        	efunc
 10924                        	.endfunc	2662,9,18
 10925                        	.line	2662
 10926                        ;
 10927                        ;#endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL |
                    | FF_FS_RPATH >= 2 */
 10928                        ;
 10929                        ;/*-----------------------------------------------
                    ------------------------*/
 10930                        ;/* Directory handling - Find an object in the dir
                    ectory                  */
 10931                        ;/*-----------------------------------------------
                    ------------------------*/
 10932                        ;
 10933                        ;static FRESULT dir_find( /* FR_OK(0):succeeded, !
                    =0:error */
 10934                        ;DIR* dp /* Pointer to the directory object with t
                    he file name */
 10935                        ;)
 10936                        ;{
 10937                        	.line	2670
 10938                        	.line	2673
 10939                        	FFDOS
 10940                        	func
 10941                        	.function	2673
 10942                        ~~dir_find:
 10943                        	longa	on
 10944                        	longi	on
 10945 08:25A2: 3B           	tsc
 10946 08:25A3: 38           	sec
 10947 08:25A4: E9 12 00     	sbc	#L425
 10948 08:25A7: 1B           	tcs
 10949 08:25A8: 0B           	phd
 10950 08:25A9: 5B           	tcd
 10951             00000004   dp_0	set	4
  Mon Aug  9 2021 16:52                                                Page 212


 10952                        	.block	2673
 10953                        ;	FRESULT res;
 10954                        ;	FATFS *fs = dp->obj.fs;
 10955                        ;	BYTE c;
 10956                        ;#if FF_USE_LFN
 10957                        ;	BYTE a, ord, sum;
 10958                        ;#endif
 10959                        ;
 10960                        ;	res = dir_sdi(dp, 0); /* Rewind directory object
                     */
 10961             00000000   res_1	set	0
 10962             00000002   fs_1	set	2
 10963             00000006   c_1	set	6
 10964             00000007   a_1	set	7
 10965             00000008   ord_1	set	8
 10966             00000009   sum_1	set	9
 10967                        	.sym	res,0,5,1,16
 10968                        	.sym	fs,2,138,1,32,75
 10969                        	.sym	c,6,14,1,8
 10970                        	.sym	a,7,14,1,8
 10971                        	.sym	ord,8,14,1,8
 10972                        	.sym	sum,9,14,1,8
 10973                        	.sym	dp,4,138,6,32,78
 10974 08:25AA: A7 16        	lda	[<L425+dp_0]
 10975 08:25AC: 85 0B        	sta	<L426+fs_1
 10976 08:25AE: A0 02 00     	ldy	#$2
 10977 08:25B1: B7 16        	lda	[<L425+dp_0],Y
 10978 08:25B3: 85 0D        	sta	<L426+fs_1+2
 10979                        	.line	2681
 10980 08:25B5: F4 00 00     	pea	#^$0
 10981 08:25B8: F4 00 00     	pea	#<$0
 10982 08:25BB: D4 18        	pei	<L425+dp_0+2
 10983 08:25BD: D4 16        	pei	<L425+dp_0
 10984 08:25BF: 22 36 17 08  	jsl	~~dir_sdi
 10985 08:25C3: 85 09        	sta	<L426+res_1
 10986                        ;	if (res != FR_OK)
 10987                        	.line	2682
 10988                        ;		return res;
 10989 08:25C5: A5 09        	lda	<L426+res_1
 10990 08:25C7: D0 03        	bne	L428
 10991 08:25C9: 82 14 00     	brl	L10208
 10992                        L428:
 10993                        	.line	2683
 10994 08:25CC: A5 09        	lda	<L426+res_1
 10995                        L429:
 10996 08:25CE: A8           	tay
 10997 08:25CF: A5 14        	lda	<L425+2
 10998 08:25D1: 85 18        	sta	<L425+2+4
 10999 08:25D3: A5 13        	lda	<L425+1
 11000 08:25D5: 85 17        	sta	<L425+1+4
 11001 08:25D7: 2B           	pld
 11002 08:25D8: 3B           	tsc
 11003 08:25D9: 18           	clc
 11004 08:25DA: 69 16 00     	adc	#L425+4
 11005 08:25DD: 1B           	tcs
 11006 08:25DE: 98           	tya
 11007 08:25DF: 6B           	rtl
 11008                        ;#if FF_FS_EXFAT
  Mon Aug  9 2021 16:52                                                Page 213


 11009                        ;	if (fs->fs_type == FS_EXFAT)
 11010                        ;	{ /* On the exFAT volume */
 11011                        ;		BYTE nc;
 11012                        ;		UINT di, ni;
 11013                        ;		WORD hash = xname_sum(fs->lfnbuf); /* Ha
                    sh value of the name to find */
 11014                        ;
 11015                        ;		while ((res = DIR_READ_FILE(dp)) == FR_O
                    K)
 11016                        ;		{ /* Read an item */
 11017                        ;#if FF_MAX_LFN < 255
 11018                        ;			if (fs->dirbuf[XDIR_NumName] > F
                    F_MAX_LFN) continue; /* Skip comparison if inaccessible obje
                    ct name */
 11019                        ;#endif
 11020                        ;			if (ld_word(fs->dirbuf + XDIR_Na
                    meHash) != hash) continue; /* Skip comparison if hash mismat
                    ched */
 11021                        ;			for (nc = fs->dirbuf[XDIR_NumNam
                    e], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++)
 11022                        ;			{ /* Compare the name */
 11023                        ;				if ((di % SZDIRE) == 0) 
                    di += 2;
 11024                        ;				if (ff_wtoupper(ld_word(
                    fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 11025                        ;			}
 11026                        ;			if (nc == 0 && !fs->lfnbuf[ni]) 
                    break; /* Name matched? */
 11027                        ;		}
 11028                        ;		return res;
 11029                        ;	}
 11030                        ;#endif
 11031                        ;	/* On the FAT/FAT32 volume */
 11032                        ;#if FF_USE_LFN
 11033                        ;	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF; /* R
                    eset LFN sequence */
 11034                        L10208:
 11035                        	.line	2709
 11036 08:25E0: E2 20        	sep	#$20
 11037                        	longa	off
 11038 08:25E2: A9 FF        	lda	#$ff
 11039 08:25E4: 85 12        	sta	<L426+sum_1
 11040 08:25E6: C2 20        	rep	#$20
 11041                        	longa	on
 11042 08:25E8: E2 20        	sep	#$20
 11043                        	longa	off
 11044 08:25EA: A9 FF        	lda	#$ff
 11045 08:25EC: 85 11        	sta	<L426+ord_1
 11046 08:25EE: C2 20        	rep	#$20
 11047                        	longa	on
 11048                        	.line	2709
 11049 08:25F0: A9 FF FF     	lda	#$ffff
 11050 08:25F3: A0 2C 00     	ldy	#$2c
 11051 08:25F6: 97 16        	sta	[<L425+dp_0],Y
 11052 08:25F8: A9 FF FF     	lda	#$ffff
 11053 08:25FB: A0 2E 00     	ldy	#$2e
 11054 08:25FE: 97 16        	sta	[<L425+dp_0],Y
 11055                        ;#endif
  Mon Aug  9 2021 16:52                                                Page 214


 11056                        ;	do
 11057                        	.line	2711
 11058                        L10211:
 11059                        ;	{
 11060                        	.line	2712
 11061                        ;		res = move_window(fs, dp->sect);
 11062                        	.line	2713
 11063 08:2600: A0 1A 00     	ldy	#$1a
 11064 08:2603: B7 16        	lda	[<L425+dp_0],Y
 11065 08:2605: 48           	pha
 11066 08:2606: A0 18 00     	ldy	#$18
 11067 08:2609: B7 16        	lda	[<L425+dp_0],Y
 11068 08:260B: 48           	pha
 11069 08:260C: D4 0D        	pei	<L426+fs_1+2
 11070 08:260E: D4 0B        	pei	<L426+fs_1
 11071 08:2610: 22 97 08 08  	jsl	~~move_window
 11072 08:2614: 85 09        	sta	<L426+res_1
 11073                        ;		if (res != FR_OK)
 11074                        	.line	2714
 11075                        ;			break;
 11076 08:2616: A5 09        	lda	<L426+res_1
 11077 08:2618: F0 03        	beq	L430
 11078 08:261A: 82 FC 01     	brl	L10210
 11079                        L430:
 11080                        ;		c = dp->dir[DIR_Name];
 11081                        	.line	2716
 11082 08:261D: A0 1C 00     	ldy	#$1c
 11083 08:2620: B7 16        	lda	[<L425+dp_0],Y
 11084 08:2622: 85 01        	sta	<R0
 11085 08:2624: A0 1E 00     	ldy	#$1e
 11086 08:2627: B7 16        	lda	[<L425+dp_0],Y
 11087 08:2629: 85 03        	sta	<R0+2
 11088 08:262B: E2 20        	sep	#$20
 11089                        	longa	off
 11090 08:262D: A7 01        	lda	[<R0]
 11091 08:262F: 85 0F        	sta	<L426+c_1
 11092 08:2631: C2 20        	rep	#$20
 11093                        	longa	on
 11094                        ;		if (c == 0)
 11095                        	.line	2717
 11096                        ;		{
 11097 08:2633: A5 0F        	lda	<L426+c_1
 11098 08:2635: 29 FF 00     	and	#$ff
 11099 08:2638: F0 03        	beq	L431
 11100 08:263A: 82 08 00     	brl	L10212
 11101                        L431:
 11102                        	.line	2718
 11103                        ;			res = FR_NO_FILE;
 11104                        	.line	2719
 11105 08:263D: A9 04 00     	lda	#$4
 11106 08:2640: 85 09        	sta	<L426+res_1
 11107                        ;			break;
 11108                        	.line	2720
 11109 08:2642: 82 D4 01     	brl	L10210
 11110                        ;		} /* Reached to end of table */
 11111                        	.line	2721
 11112                        ;#if FF_USE_LFN		/* LFN configuration */
 11113                        ;		dp->obj.attr = a = dp->dir[DIR_Attr] & A
  Mon Aug  9 2021 16:52                                                Page 215


                    M_MASK;
 11114                        L10212:
 11115                        	.line	2723
 11116 08:2645: A0 1C 00     	ldy	#$1c
 11117 08:2648: B7 16        	lda	[<L425+dp_0],Y
 11118 08:264A: 85 01        	sta	<R0
 11119 08:264C: A0 1E 00     	ldy	#$1e
 11120 08:264F: B7 16        	lda	[<L425+dp_0],Y
 11121 08:2651: 85 03        	sta	<R0+2
 11122 08:2653: E2 20        	sep	#$20
 11123                        	longa	off
 11124 08:2655: A0 0B 00     	ldy	#$b
 11125 08:2658: B7 01        	lda	[<R0],Y
 11126 08:265A: 29 3F        	and	#<$3f
 11127 08:265C: 85 10        	sta	<L426+a_1
 11128 08:265E: C2 20        	rep	#$20
 11129                        	longa	on
 11130 08:2660: E2 20        	sep	#$20
 11131                        	longa	off
 11132 08:2662: A5 10        	lda	<L426+a_1
 11133 08:2664: A0 06 00     	ldy	#$6
 11134 08:2667: 97 16        	sta	[<L425+dp_0],Y
 11135 08:2669: C2 20        	rep	#$20
 11136                        	longa	on
 11137                        ;		if (c == DDEM || ((a & AM_VOL) && a != A
                    M_LFN))
 11138                        	.line	2724
 11139                        ;		{ /* An entry without valid data */
 11140 08:266B: E2 20        	sep	#$20
 11141                        	longa	off
 11142 08:266D: A5 0F        	lda	<L426+c_1
 11143 08:266F: C9 E5        	cmp	#<$e5
 11144 08:2671: C2 20        	rep	#$20
 11145                        	longa	on
 11146 08:2673: D0 03        	bne	L433
 11147 08:2675: 82 1A 00     	brl	L432
 11148                        L433:
 11149 08:2678: E2 20        	sep	#$20
 11150                        	longa	off
 11151 08:267A: A5 10        	lda	<L426+a_1
 11152 08:267C: 29 08        	and	#<$8
 11153 08:267E: C2 20        	rep	#$20
 11154                        	longa	on
 11155 08:2680: D0 03        	bne	L434
 11156 08:2682: 82 28 00     	brl	L10213
 11157                        L434:
 11158 08:2685: E2 20        	sep	#$20
 11159                        	longa	off
 11160 08:2687: A5 10        	lda	<L426+a_1
 11161 08:2689: C9 0F        	cmp	#<$f
 11162 08:268B: C2 20        	rep	#$20
 11163                        	longa	on
 11164 08:268D: D0 03        	bne	L435
 11165 08:268F: 82 1B 00     	brl	L10213
 11166                        L435:
 11167                        L432:
 11168                        	.line	2725
 11169                        ;			ord = 0xFF; dp->blk_ofs = 0xFFFF
  Mon Aug  9 2021 16:52                                                Page 216


                    FFFF; /* Reset LFN sequence */
 11170                        	.line	2726
 11171 08:2692: E2 20        	sep	#$20
 11172                        	longa	off
 11173 08:2694: A9 FF        	lda	#$ff
 11174 08:2696: 85 11        	sta	<L426+ord_1
 11175 08:2698: C2 20        	rep	#$20
 11176                        	longa	on
 11177                        	.line	2726
 11178 08:269A: A9 FF FF     	lda	#$ffff
 11179 08:269D: A0 2C 00     	ldy	#$2c
 11180 08:26A0: 97 16        	sta	[<L425+dp_0],Y
 11181 08:26A2: A9 FF FF     	lda	#$ffff
 11182 08:26A5: A0 2E 00     	ldy	#$2e
 11183 08:26A8: 97 16        	sta	[<L425+dp_0],Y
 11184                        ;		}
 11185                        	.line	2727
 11186                        ;		else
 11187 08:26AA: 82 58 01     	brl	L10214
 11188                        L10213:
 11189                        ;		{
 11190                        	.line	2729
 11191                        ;			if (a == AM_LFN)
 11192                        	.line	2730
 11193                        ;			{ /* An LFN entry is found */
 11194 08:26AD: E2 20        	sep	#$20
 11195                        	longa	off
 11196 08:26AF: A5 10        	lda	<L426+a_1
 11197 08:26B1: C9 0F        	cmp	#<$f
 11198 08:26B3: C2 20        	rep	#$20
 11199                        	longa	on
 11200 08:26B5: F0 03        	beq	L436
 11201 08:26B7: 82 CA 00     	brl	L10215
 11202                        L436:
 11203                        	.line	2731
 11204                        ;				if (!(dp->fn[NSFLAG] & N
                    S_NOLFN))
 11205                        	.line	2732
 11206                        ;				{
 11207 08:26BA: E2 20        	sep	#$20
 11208                        	longa	off
 11209 08:26BC: A0 2B 00     	ldy	#$2b
 11210 08:26BF: B7 16        	lda	[<L425+dp_0],Y
 11211 08:26C1: 29 40        	and	#<$40
 11212 08:26C3: C2 20        	rep	#$20
 11213                        	longa	on
 11214 08:26C5: F0 03        	beq	L437
 11215 08:26C7: 82 B7 00     	brl	L10216
 11216                        L437:
 11217                        	.line	2733
 11218                        ;					if (c & LLEF)
 11219                        	.line	2734
 11220                        ;					{ /* Is it start
                     of LFN sequence? */
 11221 08:26CA: E2 20        	sep	#$20
 11222                        	longa	off
 11223 08:26CC: A5 0F        	lda	<L426+c_1
 11224 08:26CE: 29 40        	and	#<$40
  Mon Aug  9 2021 16:52                                                Page 217


 11225 08:26D0: C2 20        	rep	#$20
 11226                        	longa	on
 11227 08:26D2: D0 03        	bne	L438
 11228 08:26D4: 82 3D 00     	brl	L10217
 11229                        L438:
 11230                        	.line	2735
 11231                        ;						sum = dp
                    ->dir[LDIR_Chksum];
 11232                        	.line	2736
 11233 08:26D7: A0 1C 00     	ldy	#$1c
 11234 08:26DA: B7 16        	lda	[<L425+dp_0],Y
 11235 08:26DC: 85 01        	sta	<R0
 11236 08:26DE: A0 1E 00     	ldy	#$1e
 11237 08:26E1: B7 16        	lda	[<L425+dp_0],Y
 11238 08:26E3: 85 03        	sta	<R0+2
 11239 08:26E5: E2 20        	sep	#$20
 11240                        	longa	off
 11241 08:26E7: A0 0D 00     	ldy	#$d
 11242 08:26EA: B7 01        	lda	[<R0],Y
 11243 08:26EC: 85 12        	sta	<L426+sum_1
 11244 08:26EE: C2 20        	rep	#$20
 11245                        	longa	on
 11246                        ;						c &= (BY
                    TE)~LLEF; ord = c; /* LFN start order */
 11247                        	.line	2737
 11248 08:26F0: E2 20        	sep	#$20
 11249                        	longa	off
 11250 08:26F2: A9 40        	lda	#$40
 11251 08:26F4: 14 0F        	trb	<L426+c_1
 11252 08:26F6: C2 20        	rep	#$20
 11253                        	longa	on
 11254                        	.line	2737
 11255 08:26F8: E2 20        	sep	#$20
 11256                        	longa	off
 11257 08:26FA: A5 0F        	lda	<L426+c_1
 11258 08:26FC: 85 11        	sta	<L426+ord_1
 11259 08:26FE: C2 20        	rep	#$20
 11260                        	longa	on
 11261                        ;						dp->blk_
                    ofs = dp->dptr; /* Start offset of LFN */
 11262                        	.line	2738
 11263 08:2700: A0 10 00     	ldy	#$10
 11264 08:2703: B7 16        	lda	[<L425+dp_0],Y
 11265 08:2705: A0 2C 00     	ldy	#$2c
 11266 08:2708: 97 16        	sta	[<L425+dp_0],Y
 11267 08:270A: A0 12 00     	ldy	#$12
 11268 08:270D: B7 16        	lda	[<L425+dp_0],Y
 11269 08:270F: A0 2E 00     	ldy	#$2e
 11270 08:2712: 97 16        	sta	[<L425+dp_0],Y
 11271                        ;					}
 11272                        	.line	2739
 11273                        ;					/* Check validit
                    y of the LFN entry and compare it with given name */
 11274                        ;					ord = (c == ord 
                    && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->di
                    r)) ? ord - 1 : 0xFF;
 11275                        L10217:
 11276                        	.line	2741
  Mon Aug  9 2021 16:52                                                Page 218


 11277 08:2714: E2 20        	sep	#$20
 11278                        	longa	off
 11279 08:2716: A5 0F        	lda	<L426+c_1
 11280 08:2718: C5 11        	cmp	<L426+ord_1
 11281 08:271A: C2 20        	rep	#$20
 11282                        	longa	on
 11283 08:271C: F0 03        	beq	L440
 11284 08:271E: 82 53 00     	brl	L439
 11285                        L440:
 11286 08:2721: A0 1C 00     	ldy	#$1c
 11287 08:2724: B7 16        	lda	[<L425+dp_0],Y
 11288 08:2726: 85 01        	sta	<R0
 11289 08:2728: A0 1E 00     	ldy	#$1e
 11290 08:272B: B7 16        	lda	[<L425+dp_0],Y
 11291 08:272D: 85 03        	sta	<R0+2
 11292 08:272F: E2 20        	sep	#$20
 11293                        	longa	off
 11294 08:2731: A5 12        	lda	<L426+sum_1
 11295 08:2733: A0 0D 00     	ldy	#$d
 11296 08:2736: D7 01        	cmp	[<R0],Y
 11297 08:2738: C2 20        	rep	#$20
 11298                        	longa	on
 11299 08:273A: F0 03        	beq	L441
 11300 08:273C: 82 35 00     	brl	L439
 11301                        L441:
 11302 08:273F: A0 1E 00     	ldy	#$1e
 11303 08:2742: B7 16        	lda	[<L425+dp_0],Y
 11304 08:2744: 48           	pha
 11305 08:2745: A0 1C 00     	ldy	#$1c
 11306 08:2748: B7 16        	lda	[<L425+dp_0],Y
 11307 08:274A: 48           	pha
 11308 08:274B: A0 0D 00     	ldy	#$d
 11309 08:274E: B7 0B        	lda	[<L426+fs_1],Y
 11310 08:2750: 48           	pha
 11311 08:2751: A0 0B 00     	ldy	#$b
 11312 08:2754: B7 0B        	lda	[<L426+fs_1],Y
 11313 08:2756: 48           	pha
 11314 08:2757: 22 E2 1D 08  	jsl	~~cmp_lfn
 11315 08:275B: AA           	tax
 11316 08:275C: D0 03        	bne	L442
 11317 08:275E: 82 13 00     	brl	L439
 11318                        L442:
 11319 08:2761: A5 11        	lda	<L426+ord_1
 11320 08:2763: 29 FF 00     	and	#$ff
 11321 08:2766: 85 01        	sta	<R0
 11322 08:2768: 18           	clc
 11323 08:2769: A9 FF FF     	lda	#$ffff
 11324 08:276C: 65 01        	adc	<R0
 11325 08:276E: 85 05        	sta	<R1
 11326 08:2770: A5 05        	lda	<R1
 11327 08:2772: 80 03        	bra	L443
 11328                        L439:
 11329 08:2774: A9 FF 00     	lda	#$ff
 11330                        L443:
 11331 08:2777: 85 01        	sta	<R0
 11332 08:2779: E2 20        	sep	#$20
 11333                        	longa	off
 11334 08:277B: A5 01        	lda	<R0
  Mon Aug  9 2021 16:52                                                Page 219


 11335 08:277D: 85 11        	sta	<L426+ord_1
 11336 08:277F: C2 20        	rep	#$20
 11337                        	longa	on
 11338                        ;				}
 11339                        	.line	2742
 11340                        ;			}
 11341                        L10216:
 11342                        	.line	2743
 11343                        ;			else
 11344 08:2781: 82 81 00     	brl	L10218
 11345                        L10215:
 11346                        ;			{ /* An SFN entry is found */
 11347                        	.line	2745
 11348                        ;				if (ord == 0 && sum == s
                    um_sfn(dp->dir)) break; /* LFN matched? */
 11349                        	.line	2746
 11350 08:2784: A5 11        	lda	<L426+ord_1
 11351 08:2786: 29 FF 00     	and	#$ff
 11352 08:2789: F0 03        	beq	L445
 11353 08:278B: 82 23 00     	brl	L444
 11354                        L445:
 11355 08:278E: A0 1E 00     	ldy	#$1e
 11356 08:2791: B7 16        	lda	[<L425+dp_0],Y
 11357 08:2793: 48           	pha
 11358 08:2794: A0 1C 00     	ldy	#$1c
 11359 08:2797: B7 16        	lda	[<L425+dp_0],Y
 11360 08:2799: 48           	pha
 11361 08:279A: 22 0A 23 08  	jsl	~~sum_sfn
 11362 08:279E: E2 20        	sep	#$20
 11363                        	longa	off
 11364 08:27A0: 85 01        	sta	<R0
 11365 08:27A2: C2 20        	rep	#$20
 11366                        	longa	on
 11367 08:27A4: E2 20        	sep	#$20
 11368                        	longa	off
 11369 08:27A6: A5 01        	lda	<R0
 11370 08:27A8: C5 12        	cmp	<L426+sum_1
 11371 08:27AA: C2 20        	rep	#$20
 11372                        	longa	on
 11373 08:27AC: D0 03        	bne	L446
 11374 08:27AE: 82 68 00     	brl	L10210
 11375                        L446:
 11376                        L444:
 11377                        ;				if (!(dp->fn[NSFLAG] & N
                    S_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break; /* SFN matc
                    hed? */
 11378                        	.line	2747
 11379 08:27B1: E2 20        	sep	#$20
 11380                        	longa	off
 11381 08:27B3: A0 2B 00     	ldy	#$2b
 11382 08:27B6: B7 16        	lda	[<L425+dp_0],Y
 11383 08:27B8: 29 01        	and	#<$1
 11384 08:27BA: C2 20        	rep	#$20
 11385                        	longa	on
 11386 08:27BC: F0 03        	beq	L448
 11387 08:27BE: 82 2C 00     	brl	L447
 11388                        L448:
 11389 08:27C1: F4 0B 00     	pea	#<$b
  Mon Aug  9 2021 16:52                                                Page 220


 11390 08:27C4: 18           	clc
 11391 08:27C5: A9 20 00     	lda	#$20
 11392 08:27C8: 65 16        	adc	<L425+dp_0
 11393 08:27CA: 85 01        	sta	<R0
 11394 08:27CC: A9 00 00     	lda	#$0
 11395 08:27CF: 65 18        	adc	<L425+dp_0+2
 11396 08:27D1: 85 03        	sta	<R0+2
 11397 08:27D3: D4 03        	pei	<R0+2
 11398 08:27D5: D4 01        	pei	<R0
 11399 08:27D7: A0 1E 00     	ldy	#$1e
 11400 08:27DA: B7 16        	lda	[<L425+dp_0],Y
 11401 08:27DC: 48           	pha
 11402 08:27DD: A0 1C 00     	ldy	#$1c
 11403 08:27E0: B7 16        	lda	[<L425+dp_0],Y
 11404 08:27E2: 48           	pha
 11405 08:27E3: 22 16 02 08  	jsl	~~mem_cmp
 11406 08:27E7: AA           	tax
 11407 08:27E8: D0 03        	bne	L449
 11408 08:27EA: 82 2C 00     	brl	L10210
 11409                        L449:
 11410                        L447:
 11411                        ;				ord = 0xFF; dp->blk_ofs 
                    = 0xFFFFFFFF; /* Reset LFN sequence */
 11412                        	.line	2748
 11413 08:27ED: E2 20        	sep	#$20
 11414                        	longa	off
 11415 08:27EF: A9 FF        	lda	#$ff
 11416 08:27F1: 85 11        	sta	<L426+ord_1
 11417 08:27F3: C2 20        	rep	#$20
 11418                        	longa	on
 11419                        	.line	2748
 11420 08:27F5: A9 FF FF     	lda	#$ffff
 11421 08:27F8: A0 2C 00     	ldy	#$2c
 11422 08:27FB: 97 16        	sta	[<L425+dp_0],Y
 11423 08:27FD: A9 FF FF     	lda	#$ffff
 11424 08:2800: A0 2E 00     	ldy	#$2e
 11425 08:2803: 97 16        	sta	[<L425+dp_0],Y
 11426                        ;			}
 11427                        	.line	2749
 11428                        L10218:
 11429                        ;		}
 11430                        	.line	2750
 11431                        L10214:
 11432                        ;#else		/* Non LFN configuration */
 11433                        ;		dp->obj.attr = dp->dir[DIR_Attr] & AM_MA
                    SK;
 11434                        ;		if (!(dp->dir[DIR_Attr] & AM_VOL) && !me
                    m_cmp(dp->dir, dp->fn, 11))
 11435                        ;			break; /* Is it a valid entry? *
                    /
 11436                        ;#endif
 11437                        ;		res = dir_next(dp, 0); /* Next entry */
 11438                        	.line	2756
 11439 08:2805: F4 00 00     	pea	#<$0
 11440 08:2808: D4 18        	pei	<L425+dp_0+2
 11441 08:280A: D4 16        	pei	<L425+dp_0
 11442 08:280C: 22 75 19 08  	jsl	~~dir_next
 11443 08:2810: 85 09        	sta	<L426+res_1
  Mon Aug  9 2021 16:52                                                Page 221


 11444                        ;	} while (res == FR_OK);
 11445                        	.line	2757
 11446                        L10209:
 11447 08:2812: A5 09        	lda	<L426+res_1
 11448 08:2814: D0 03        	bne	L450
 11449 08:2816: 82 E7 FD     	brl	L10211
 11450                        L450:
 11451                        L10210:
 11452                        ;
 11453                        ;	return res;
 11454                        	.line	2759
 11455 08:2819: A5 09        	lda	<L426+res_1
 11456 08:281B: 82 B0 FD     	brl	L429
 11457                        ;}
 11458                        	.line	2760
 11459                        	.endblock	2760
 11460             00000012   L425	equ	18
 11461             00000009   L426	equ	9
 11462 08:281E:              	ends
 11463                        	efunc
 11464                        	.endfunc	2760,9,18
 11465                        	.line	2760
 11466                        ;
 11467                        ;#if !FF_FS_READONLY
 11468                        ;/*-----------------------------------------------
                    ------------------------*/
 11469                        ;/* Register an object to the directory           
                                            */
 11470                        ;/*-----------------------------------------------
                    ------------------------*/
 11471                        ;
 11472                        ;static FRESULT dir_register( /* FR_OK:succeeded, 
                    FR_DENIED:no free entry or too many SFN collision, FR_DISK_E
                    RR:disk error */
 11473                        ;DIR* dp /* Target directory with object name to b
                    e created */
 11474                        ;)
 11475                        ;{
 11476                        	.line	2767
 11477                        	.line	2770
 11478                        	FFDOS
 11479                        	func
 11480                        	.function	2770
 11481                        ~~dir_register:
 11482                        	longa	on
 11483                        	longi	on
 11484 08:281E: 3B           	tsc
 11485 08:281F: 38           	sec
 11486 08:2820: E9 25 00     	sbc	#L451
 11487 08:2823: 1B           	tcs
 11488 08:2824: 0B           	phd
 11489 08:2825: 5B           	tcd
 11490             00000004   dp_0	set	4
 11491                        	.block	2770
 11492                        ;	FRESULT res;
 11493                        ;	FATFS *fs = dp->obj.fs;
 11494                        ;#if FF_USE_LFN		/* LFN configuration */
 11495                        ;	UINT n, nlen, nent;
  Mon Aug  9 2021 16:52                                                Page 222


 11496                        ;	BYTE sn[12], sum;
 11497                        ;
 11498                        ;	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) retur
                    n FR_INVALID_NAME; /* Check name validity */
 11499             00000000   res_1	set	0
 11500             00000002   fs_1	set	2
 11501             00000006   n_1	set	6
 11502             00000008   nlen_1	set	8
 11503             0000000A   nent_1	set	10
 11504             0000000C   sn_1	set	12
 11505             00000018   sum_1	set	24
 11506                        	.sym	res,0,5,1,16
 11507                        	.sym	fs,2,138,1,32,75
 11508                        	.sym	n,6,16,1,16
 11509                        	.sym	nlen,8,16,1,16
 11510                        	.sym	nent,10,16,1,16
 11511                        	.sym	sn,12,110,1,0,12
 11512                        	.sym	sum,24,14,1,8
 11513                        	.sym	dp,4,138,6,32,78
 11514 08:2826: A7 29        	lda	[<L451+dp_0]
 11515 08:2828: 85 0F        	sta	<L452+fs_1
 11516 08:282A: A0 02 00     	ldy	#$2
 11517 08:282D: B7 29        	lda	[<L451+dp_0],Y
 11518 08:282F: 85 11        	sta	<L452+fs_1+2
 11519                        	.line	2777
 11520 08:2831: E2 20        	sep	#$20
 11521                        	longa	off
 11522 08:2833: A0 2B 00     	ldy	#$2b
 11523 08:2836: B7 29        	lda	[<L451+dp_0],Y
 11524 08:2838: 29 A0        	and	#<$a0
 11525 08:283A: C2 20        	rep	#$20
 11526                        	longa	on
 11527 08:283C: D0 03        	bne	L454
 11528 08:283E: 82 15 00     	brl	L10219
 11529                        L454:
 11530                        	.line	2777
 11531 08:2841: A9 06 00     	lda	#$6
 11532                        L455:
 11533 08:2844: A8           	tay
 11534 08:2845: A5 27        	lda	<L451+2
 11535 08:2847: 85 2B        	sta	<L451+2+4
 11536 08:2849: A5 26        	lda	<L451+1
 11537 08:284B: 85 2A        	sta	<L451+1+4
 11538 08:284D: 2B           	pld
 11539 08:284E: 3B           	tsc
 11540 08:284F: 18           	clc
 11541 08:2850: 69 29 00     	adc	#L451+4
 11542 08:2853: 1B           	tcs
 11543 08:2854: 98           	tya
 11544 08:2855: 6B           	rtl
 11545                        ;	for (nlen = 0; fs->lfnbuf[nlen]; nlen++); /* Get
                     lfn length */
 11546                        L10219:
 11547                        	.line	2778
 11548 08:2856: 64 15        	stz	<L452+nlen_1
 11549 08:2858: 82 02 00     	brl	L10223
 11550                        L10222:
 11551                        	.line	2778
  Mon Aug  9 2021 16:52                                                Page 223


 11552                        L10220:
 11553 08:285B: E6 15        	inc	<L452+nlen_1
 11554                        L10223:
 11555 08:285D: A5 15        	lda	<L452+nlen_1
 11556 08:285F: 85 05        	sta	<R1
 11557 08:2861: 64 07        	stz	<R1+2
 11558 08:2863: D4 07        	pei	<R1+2
 11559 08:2865: D4 05        	pei	<R1
 11560 08:2867: A9 01 00     	lda	#$1
 11561                        	xref	~~~lasl
 11562 08:286A: 22 xx xx xx  	jsl	~~~lasl
 11563 08:286E: 85 01        	sta	<R0
 11564 08:2870: 86 03        	stx	<R0+2
 11565 08:2872: 18           	clc
 11566 08:2873: A0 0B 00     	ldy	#$b
 11567 08:2876: B7 0F        	lda	[<L452+fs_1],Y
 11568 08:2878: 65 01        	adc	<R0
 11569 08:287A: 85 09        	sta	<R2
 11570 08:287C: A0 0D 00     	ldy	#$d
 11571 08:287F: B7 0F        	lda	[<L452+fs_1],Y
 11572 08:2881: 65 03        	adc	<R0+2
 11573 08:2883: 85 0B        	sta	<R2+2
 11574 08:2885: A7 09        	lda	[<R2]
 11575 08:2887: F0 03        	beq	L456
 11576 08:2889: 82 CF FF     	brl	L10222
 11577                        L456:
 11578                        L10221:
 11579                        ;
 11580                        ;#if FF_FS_EXFAT
 11581                        ;	if (fs->fs_type == FS_EXFAT)
 11582                        ;	{ /* On the exFAT volume */
 11583                        ;		nent = (nlen + 14) / 15 + 2; /* Number o
                    f entries to allocate (85+C0+C1s) */
 11584                        ;		res = dir_alloc(dp, nent); /* Allocate d
                    irectory entries */
 11585                        ;		if (res != FR_OK) return res;
 11586                        ;		dp->blk_ofs = dp->dptr - SZDIRE * (nent 
                    - 1); /* Set the allocated entry block offset */
 11587                        ;
 11588                        ;		if (dp->obj.stat & 4)
 11589                        ;		{ /* Has the directory been stretched by
                     new allocation? */
 11590                        ;			dp->obj.stat &= ~4;
 11591                        ;			res = fill_first_frag(&dp->obj);
                     /* Fill the first fragment on the FAT if needed */
 11592                        ;			if (res != FR_OK) return res;
 11593                        ;			res = fill_last_frag(&dp->obj, d
                    p->clust, 0xFFFFFFFF); /* Fill the last fragment on the FAT 
                    if needed */
 11594                        ;			if (res != FR_OK) return res;
 11595                        ;			if (dp->obj.sclust != 0)
 11596                        ;			{ /* Is it a sub-directory? */
 11597                        ;				DIR dj;
 11598                        ;
 11599                        ;				res = load_obj_xdir(&dj,
                     &dp->obj); /* Load the object status */
 11600                        ;				if (res != FR_OK) return
                     res;
  Mon Aug  9 2021 16:52                                                Page 224


 11601                        ;				dp->obj.objsize += (DWOR
                    D)fs->csize * SS(fs); /* Increase the directory size by clus
                    ter size */
 11602                        ;				st_qword(fs->dirbuf + XD
                    IR_FileSize, dp->obj.objsize);
 11603                        ;				st_qword(fs->dirbuf + XD
                    IR_ValidFileSize, dp->obj.objsize);
 11604                        ;				fs->dirbuf[XDIR_GenFlags
                    ] = dp->obj.stat | 1; /* Update the allocation status */
 11605                        ;				res = store_xdir(&dj); /
                    * Store the object status */
 11606                        ;				if (res != FR_OK) return
                     res;
 11607                        ;			}
 11608                        ;		}
 11609                        ;
 11610                        ;		create_xdir(fs->dirbuf, fs->lfnbuf); /* 
                    Create on-memory directory block to be written later */
 11611                        ;		return FR_OK;
 11612                        ;	}
 11613                        ;#endif
 11614                        ;	/* On the FAT/FAT32 volume */
 11615                        ;	mem_cpy(sn, dp->fn, 12);
 11616                        	.line	2815
 11617 08:288C: F4 0C 00     	pea	#<$c
 11618 08:288F: 18           	clc
 11619 08:2890: A9 20 00     	lda	#$20
 11620 08:2893: 65 29        	adc	<L451+dp_0
 11621 08:2895: 85 01        	sta	<R0
 11622 08:2897: A9 00 00     	lda	#$0
 11623 08:289A: 65 2B        	adc	<L451+dp_0+2
 11624 08:289C: 85 03        	sta	<R0+2
 11625 08:289E: D4 03        	pei	<R0+2
 11626 08:28A0: D4 01        	pei	<R0
 11627 08:28A2: F4 00 00     	pea	#0
 11628 08:28A5: 18           	clc
 11629 08:28A6: 7B           	tdc
 11630 08:28A7: 69 19 00     	adc	#<L452+sn_1
 11631 08:28AA: 48           	pha
 11632 08:28AB: 22 93 01 08  	jsl	~~mem_cpy
 11633                        ;	if (sn[NSFLAG] & NS_LOSS)
 11634                        	.line	2816
 11635                        ;	{ /* When LFN is out of 8.3 format, generate a n
                    umbered name */
 11636 08:28AF: E2 20        	sep	#$20
 11637                        	longa	off
 11638 08:28B1: A5 24        	lda	<L452+sn_1+11
 11639 08:28B3: 29 01        	and	#<$1
 11640 08:28B5: C2 20        	rep	#$20
 11641                        	longa	on
 11642 08:28B7: D0 03        	bne	L457
 11643 08:28B9: 82 85 00     	brl	L10224
 11644                        L457:
 11645                        	.line	2817
 11646                        ;		dp->fn[NSFLAG] = NS_NOLFN; /* Find only 
                    SFN */
 11647                        	.line	2818
 11648 08:28BC: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 225


 11649                        	longa	off
 11650 08:28BE: A9 40        	lda	#$40
 11651 08:28C0: A0 2B 00     	ldy	#$2b
 11652 08:28C3: 97 29        	sta	[<L451+dp_0],Y
 11653 08:28C5: C2 20        	rep	#$20
 11654                        	longa	on
 11655                        ;		for (n = 1; n < 100; n++)
 11656                        	.line	2819
 11657 08:28C7: A9 01 00     	lda	#$1
 11658 08:28CA: 85 13        	sta	<L452+n_1
 11659                        L10227:
 11660                        ;		{
 11661                        	.line	2820
 11662                        ;			gen_numname(dp->fn, sn, fs->lfnb
                    uf, n); /* Generate a numbered name */
 11663                        	.line	2821
 11664 08:28CC: D4 13        	pei	<L452+n_1
 11665 08:28CE: A0 0D 00     	ldy	#$d
 11666 08:28D1: B7 0F        	lda	[<L452+fs_1],Y
 11667 08:28D3: 48           	pha
 11668 08:28D4: A0 0B 00     	ldy	#$b
 11669 08:28D7: B7 0F        	lda	[<L452+fs_1],Y
 11670 08:28D9: 48           	pha
 11671 08:28DA: F4 00 00     	pea	#0
 11672 08:28DD: 18           	clc
 11673 08:28DE: 7B           	tdc
 11674 08:28DF: 69 19 00     	adc	#<L452+sn_1
 11675 08:28E2: 48           	pha
 11676 08:28E3: 18           	clc
 11677 08:28E4: A9 20 00     	lda	#$20
 11678 08:28E7: 65 29        	adc	<L451+dp_0
 11679 08:28E9: 85 01        	sta	<R0
 11680 08:28EB: A9 00 00     	lda	#$0
 11681 08:28EE: 65 2B        	adc	<L451+dp_0+2
 11682 08:28F0: 85 03        	sta	<R0+2
 11683 08:28F2: D4 03        	pei	<R0+2
 11684 08:28F4: D4 01        	pei	<R0
 11685 08:28F6: 22 99 21 08  	jsl	~~gen_numname
 11686                        ;			res = dir_find(dp); /* Check if 
                    the name collides with existing SFN */
 11687                        	.line	2822
 11688 08:28FA: D4 2B        	pei	<L451+dp_0+2
 11689 08:28FC: D4 29        	pei	<L451+dp_0
 11690 08:28FE: 22 A2 25 08  	jsl	~~dir_find
 11691 08:2902: 85 0D        	sta	<L452+res_1
 11692                        ;			if (res != FR_OK) break;
 11693                        	.line	2823
 11694 08:2904: A5 0D        	lda	<L452+res_1
 11695 08:2906: F0 03        	beq	L458
 11696 08:2908: 82 0C 00     	brl	L10226
 11697                        L458:
 11698                        ;		}
 11699                        	.line	2824
 11700                        L10225:
 11701 08:290B: E6 13        	inc	<L452+n_1
 11702 08:290D: A5 13        	lda	<L452+n_1
 11703 08:290F: C9 64 00     	cmp	#<$64
 11704 08:2912: B0 03        	bcs	L459
  Mon Aug  9 2021 16:52                                                Page 226


 11705 08:2914: 82 B5 FF     	brl	L10227
 11706                        L459:
 11707                        L10226:
 11708                        ;		if (n == 100) return FR_DENIED; /* Abort
                     if too many collisions */
 11709                        	.line	2825
 11710 08:2917: A5 13        	lda	<L452+n_1
 11711 08:2919: C9 64 00     	cmp	#<$64
 11712 08:291C: F0 03        	beq	L460
 11713 08:291E: 82 06 00     	brl	L10228
 11714                        L460:
 11715                        	.line	2825
 11716 08:2921: A9 07 00     	lda	#$7
 11717 08:2924: 82 1D FF     	brl	L455
 11718                        ;		if (res != FR_NO_FILE) return res; /* Ab
                    ort if the result is other than 'not collided' */
 11719                        L10228:
 11720                        	.line	2826
 11721 08:2927: A5 0D        	lda	<L452+res_1
 11722 08:2929: C9 04 00     	cmp	#<$4
 11723 08:292C: D0 03        	bne	L461
 11724 08:292E: 82 05 00     	brl	L10229
 11725                        L461:
 11726                        	.line	2826
 11727 08:2931: A5 0D        	lda	<L452+res_1
 11728 08:2933: 82 0E FF     	brl	L455
 11729                        ;		dp->fn[NSFLAG] = sn[NSFLAG];
 11730                        L10229:
 11731                        	.line	2827
 11732 08:2936: E2 20        	sep	#$20
 11733                        	longa	off
 11734 08:2938: A5 24        	lda	<L452+sn_1+11
 11735 08:293A: A0 2B 00     	ldy	#$2b
 11736 08:293D: 97 29        	sta	[<L451+dp_0],Y
 11737 08:293F: C2 20        	rep	#$20
 11738                        	longa	on
 11739                        ;	}
 11740                        	.line	2828
 11741                        ;
 11742                        ;	/* Create an SFN with/without LFNs. */
 11743                        ;	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 
                    + 1 : 1; /* Number of entries to allocate */
 11744                        L10224:
 11745                        	.line	2831
 11746 08:2941: E2 20        	sep	#$20
 11747                        	longa	off
 11748 08:2943: A5 24        	lda	<L452+sn_1+11
 11749 08:2945: 29 02        	and	#<$2
 11750 08:2947: C2 20        	rep	#$20
 11751                        	longa	on
 11752 08:2949: D0 03        	bne	L463
 11753 08:294B: 82 18 00     	brl	L462
 11754                        L463:
 11755 08:294E: 18           	clc
 11756 08:294F: A9 0C 00     	lda	#$c
 11757 08:2952: 65 15        	adc	<L452+nlen_1
 11758 08:2954: 85 01        	sta	<R0
 11759 08:2956: A5 01        	lda	<R0
  Mon Aug  9 2021 16:52                                                Page 227


 11760 08:2958: A2 0D 00     	ldx	#<$d
 11761                        	xref	~~~udv
 11762 08:295B: 22 xx xx xx  	jsl	~~~udv
 11763 08:295F: 85 01        	sta	<R0
 11764 08:2961: A5 01        	lda	<R0
 11765 08:2963: 1A           	ina
 11766 08:2964: 80 03        	bra	L464
 11767                        L462:
 11768 08:2966: A9 01 00     	lda	#$1
 11769                        L464:
 11770 08:2969: 85 17        	sta	<L452+nent_1
 11771                        ;	res = dir_alloc(dp, nent); /* Allocate entries *
                    /
 11772                        	.line	2832
 11773 08:296B: D4 17        	pei	<L452+nent_1
 11774 08:296D: D4 2B        	pei	<L451+dp_0+2
 11775 08:296F: D4 29        	pei	<L451+dp_0
 11776 08:2971: 22 29 1C 08  	jsl	~~dir_alloc
 11777 08:2975: 85 0D        	sta	<L452+res_1
 11778                        ;	if (res == FR_OK && --nent)
 11779                        	.line	2833
 11780                        ;	{ /* Set LFN entry if needed */
 11781 08:2977: A5 0D        	lda	<L452+res_1
 11782 08:2979: F0 03        	beq	L465
 11783 08:297B: 82 C2 00     	brl	L10230
 11784                        L465:
 11785 08:297E: C6 17        	dec	<L452+nent_1
 11786 08:2980: A5 17        	lda	<L452+nent_1
 11787 08:2982: D0 03        	bne	L466
 11788 08:2984: 82 B9 00     	brl	L10230
 11789                        L466:
 11790                        	.line	2834
 11791                        ;		res = dir_sdi(dp, dp->dptr - nent * SZDI
                    RE);
 11792                        	.line	2835
 11793 08:2987: A5 17        	lda	<L452+nent_1
 11794 08:2989: 0A           	asl	A
 11795 08:298A: 0A           	asl	A
 11796 08:298B: 0A           	asl	A
 11797 08:298C: 0A           	asl	A
 11798 08:298D: 0A           	asl	A
 11799 08:298E: 85 01        	sta	<R0
 11800 08:2990: A5 01        	lda	<R0
 11801 08:2992: 85 01        	sta	<R0
 11802 08:2994: 64 03        	stz	<R0+2
 11803 08:2996: 38           	sec
 11804 08:2997: A0 10 00     	ldy	#$10
 11805 08:299A: B7 29        	lda	[<L451+dp_0],Y
 11806 08:299C: E5 01        	sbc	<R0
 11807 08:299E: 85 05        	sta	<R1
 11808 08:29A0: A0 12 00     	ldy	#$12
 11809 08:29A3: B7 29        	lda	[<L451+dp_0],Y
 11810 08:29A5: E5 03        	sbc	<R0+2
 11811 08:29A7: 85 07        	sta	<R1+2
 11812 08:29A9: D4 07        	pei	<R1+2
 11813 08:29AB: D4 05        	pei	<R1
 11814 08:29AD: D4 2B        	pei	<L451+dp_0+2
 11815 08:29AF: D4 29        	pei	<L451+dp_0
  Mon Aug  9 2021 16:52                                                Page 228


 11816 08:29B1: 22 36 17 08  	jsl	~~dir_sdi
 11817 08:29B5: 85 0D        	sta	<L452+res_1
 11818                        ;		if (res == FR_OK)
 11819                        	.line	2836
 11820                        ;		{
 11821 08:29B7: A5 0D        	lda	<L452+res_1
 11822 08:29B9: F0 03        	beq	L467
 11823 08:29BB: 82 82 00     	brl	L10231
 11824                        L467:
 11825                        	.line	2837
 11826                        ;			sum = sum_sfn(dp->fn); /* Checks
                    um value of the SFN tied to the LFN */
 11827                        	.line	2838
 11828 08:29BE: 18           	clc
 11829 08:29BF: A9 20 00     	lda	#$20
 11830 08:29C2: 65 29        	adc	<L451+dp_0
 11831 08:29C4: 85 01        	sta	<R0
 11832 08:29C6: A9 00 00     	lda	#$0
 11833 08:29C9: 65 2B        	adc	<L451+dp_0+2
 11834 08:29CB: 85 03        	sta	<R0+2
 11835 08:29CD: D4 03        	pei	<R0+2
 11836 08:29CF: D4 01        	pei	<R0
 11837 08:29D1: 22 0A 23 08  	jsl	~~sum_sfn
 11838 08:29D5: E2 20        	sep	#$20
 11839                        	longa	off
 11840 08:29D7: 85 25        	sta	<L452+sum_1
 11841 08:29D9: C2 20        	rep	#$20
 11842                        	longa	on
 11843                        ;			do
 11844                        	.line	2839
 11845                        L10234:
 11846                        ;			{ /* Store LFN entries in bottom
                     first */
 11847                        	.line	2840
 11848                        ;				res = move_window(fs, dp
                    ->sect);
 11849                        	.line	2841
 11850 08:29DB: A0 1A 00     	ldy	#$1a
 11851 08:29DE: B7 29        	lda	[<L451+dp_0],Y
 11852 08:29E0: 48           	pha
 11853 08:29E1: A0 18 00     	ldy	#$18
 11854 08:29E4: B7 29        	lda	[<L451+dp_0],Y
 11855 08:29E6: 48           	pha
 11856 08:29E7: D4 11        	pei	<L452+fs_1+2
 11857 08:29E9: D4 0F        	pei	<L452+fs_1
 11858 08:29EB: 22 97 08 08  	jsl	~~move_window
 11859 08:29EF: 85 0D        	sta	<L452+res_1
 11860                        ;				if (res != FR_OK) break;
 11861                        	.line	2842
 11862 08:29F1: A5 0D        	lda	<L452+res_1
 11863 08:29F3: F0 03        	beq	L468
 11864 08:29F5: 82 48 00     	brl	L10233
 11865                        L468:
 11866                        ;				put_lfn(fs->lfnbuf, dp->
                    dir, (BYTE)nent, sum);
 11867                        	.line	2843
 11868 08:29F8: D4 25        	pei	<L452+sum_1
 11869 08:29FA: D4 17        	pei	<L452+nent_1
  Mon Aug  9 2021 16:52                                                Page 229


 11870 08:29FC: A0 1E 00     	ldy	#$1e
 11871 08:29FF: B7 29        	lda	[<L451+dp_0],Y
 11872 08:2A01: 48           	pha
 11873 08:2A02: A0 1C 00     	ldy	#$1c
 11874 08:2A05: B7 29        	lda	[<L451+dp_0],Y
 11875 08:2A07: 48           	pha
 11876 08:2A08: A0 0D 00     	ldy	#$d
 11877 08:2A0B: B7 0F        	lda	[<L452+fs_1],Y
 11878 08:2A0D: 48           	pha
 11879 08:2A0E: A0 0B 00     	ldy	#$b
 11880 08:2A11: B7 0F        	lda	[<L452+fs_1],Y
 11881 08:2A13: 48           	pha
 11882 08:2A14: 22 78 20 08  	jsl	~~put_lfn
 11883                        ;				fs->wflag = 1;
 11884                        	.line	2844
 11885 08:2A18: E2 20        	sep	#$20
 11886                        	longa	off
 11887 08:2A1A: A9 01        	lda	#$1
 11888 08:2A1C: A0 03 00     	ldy	#$3
 11889 08:2A1F: 97 0F        	sta	[<L452+fs_1],Y
 11890 08:2A21: C2 20        	rep	#$20
 11891                        	longa	on
 11892                        ;				res = dir_next(dp, 0); /
                    * Next entry */
 11893                        	.line	2845
 11894 08:2A23: F4 00 00     	pea	#<$0
 11895 08:2A26: D4 2B        	pei	<L451+dp_0+2
 11896 08:2A28: D4 29        	pei	<L451+dp_0
 11897 08:2A2A: 22 75 19 08  	jsl	~~dir_next
 11898 08:2A2E: 85 0D        	sta	<L452+res_1
 11899                        ;			}while (res == FR_OK && --nent);
 11900                        	.line	2846
 11901                        L10232:
 11902 08:2A30: A5 0D        	lda	<L452+res_1
 11903 08:2A32: F0 03        	beq	L470
 11904 08:2A34: 82 09 00     	brl	L469
 11905                        L470:
 11906 08:2A37: C6 17        	dec	<L452+nent_1
 11907 08:2A39: A5 17        	lda	<L452+nent_1
 11908 08:2A3B: F0 03        	beq	L471
 11909 08:2A3D: 82 9B FF     	brl	L10234
 11910                        L471:
 11911                        L469:
 11912                        L10233:
 11913                        ;		}
 11914                        	.line	2847
 11915                        ;	}
 11916                        L10231:
 11917                        	.line	2848
 11918                        ;
 11919                        ;#else	/* Non LFN configuration */
 11920                        ;	res = dir_alloc(dp, 1); /* Allocate an entry for
                     SFN */
 11921                        ;
 11922                        ;#endif
 11923                        ;
 11924                        ;	/* Set SFN entry */
 11925                        ;	if (res == FR_OK)
  Mon Aug  9 2021 16:52                                                Page 230


 11926                        L10230:
 11927                        	.line	2856
 11928                        ;	{
 11929 08:2A40: A5 0D        	lda	<L452+res_1
 11930 08:2A42: F0 03        	beq	L472
 11931 08:2A44: 82 86 00     	brl	L10235
 11932                        L472:
 11933                        	.line	2857
 11934                        ;		res = move_window(fs, dp->sect);
 11935                        	.line	2858
 11936 08:2A47: A0 1A 00     	ldy	#$1a
 11937 08:2A4A: B7 29        	lda	[<L451+dp_0],Y
 11938 08:2A4C: 48           	pha
 11939 08:2A4D: A0 18 00     	ldy	#$18
 11940 08:2A50: B7 29        	lda	[<L451+dp_0],Y
 11941 08:2A52: 48           	pha
 11942 08:2A53: D4 11        	pei	<L452+fs_1+2
 11943 08:2A55: D4 0F        	pei	<L452+fs_1
 11944 08:2A57: 22 97 08 08  	jsl	~~move_window
 11945 08:2A5B: 85 0D        	sta	<L452+res_1
 11946                        ;		if (res == FR_OK)
 11947                        	.line	2859
 11948                        ;		{
 11949 08:2A5D: A5 0D        	lda	<L452+res_1
 11950 08:2A5F: F0 03        	beq	L473
 11951 08:2A61: 82 69 00     	brl	L10236
 11952                        L473:
 11953                        	.line	2860
 11954                        ;			mem_set(dp->dir, 0, SZDIRE); /* 
                    Clean the entry */
 11955                        	.line	2861
 11956 08:2A64: F4 20 00     	pea	#<$20
 11957 08:2A67: F4 00 00     	pea	#<$0
 11958 08:2A6A: A0 1E 00     	ldy	#$1e
 11959 08:2A6D: B7 29        	lda	[<L451+dp_0],Y
 11960 08:2A6F: 48           	pha
 11961 08:2A70: A0 1C 00     	ldy	#$1c
 11962 08:2A73: B7 29        	lda	[<L451+dp_0],Y
 11963 08:2A75: 48           	pha
 11964 08:2A76: 22 DF 01 08  	jsl	~~mem_set
 11965                        ;			mem_cpy(dp->dir + DIR_Name, dp->
                    fn, 11); /* Put SFN */
 11966                        	.line	2862
 11967 08:2A7A: F4 0B 00     	pea	#<$b
 11968 08:2A7D: 18           	clc
 11969 08:2A7E: A9 20 00     	lda	#$20
 11970 08:2A81: 65 29        	adc	<L451+dp_0
 11971 08:2A83: 85 01        	sta	<R0
 11972 08:2A85: A9 00 00     	lda	#$0
 11973 08:2A88: 65 2B        	adc	<L451+dp_0+2
 11974 08:2A8A: 85 03        	sta	<R0+2
 11975 08:2A8C: D4 03        	pei	<R0+2
 11976 08:2A8E: D4 01        	pei	<R0
 11977 08:2A90: A0 1E 00     	ldy	#$1e
 11978 08:2A93: B7 29        	lda	[<L451+dp_0],Y
 11979 08:2A95: 48           	pha
 11980 08:2A96: A0 1C 00     	ldy	#$1c
 11981 08:2A99: B7 29        	lda	[<L451+dp_0],Y
  Mon Aug  9 2021 16:52                                                Page 231


 11982 08:2A9B: 48           	pha
 11983 08:2A9C: 22 93 01 08  	jsl	~~mem_cpy
 11984                        ;#if FF_USE_LFN
 11985                        ;			dp->dir[DIR_NTres] = dp->fn[NSFL
                    AG] & (NS_BODY | NS_EXT); /* Put NT flag */
 11986                        	.line	2864
 11987 08:2AA0: A0 1C 00     	ldy	#$1c
 11988 08:2AA3: B7 29        	lda	[<L451+dp_0],Y
 11989 08:2AA5: 85 01        	sta	<R0
 11990 08:2AA7: A0 1E 00     	ldy	#$1e
 11991 08:2AAA: B7 29        	lda	[<L451+dp_0],Y
 11992 08:2AAC: 85 03        	sta	<R0+2
 11993 08:2AAE: E2 20        	sep	#$20
 11994                        	longa	off
 11995 08:2AB0: A0 2B 00     	ldy	#$2b
 11996 08:2AB3: B7 29        	lda	[<L451+dp_0],Y
 11997 08:2AB5: 29 18        	and	#<$18
 11998 08:2AB7: C2 20        	rep	#$20
 11999                        	longa	on
 12000 08:2AB9: E2 20        	sep	#$20
 12001                        	longa	off
 12002 08:2ABB: A0 0C 00     	ldy	#$c
 12003 08:2ABE: 97 01        	sta	[<R0],Y
 12004 08:2AC0: C2 20        	rep	#$20
 12005                        	longa	on
 12006                        ;#endif
 12007                        ;			fs->wflag = 1;
 12008                        	.line	2866
 12009 08:2AC2: E2 20        	sep	#$20
 12010                        	longa	off
 12011 08:2AC4: A9 01        	lda	#$1
 12012 08:2AC6: A0 03 00     	ldy	#$3
 12013 08:2AC9: 97 0F        	sta	[<L452+fs_1],Y
 12014 08:2ACB: C2 20        	rep	#$20
 12015                        	longa	on
 12016                        ;		}
 12017                        	.line	2867
 12018                        ;	}
 12019                        L10236:
 12020                        	.line	2868
 12021                        ;
 12022                        ;	return res;
 12023                        L10235:
 12024                        	.line	2870
 12025 08:2ACD: A5 0D        	lda	<L452+res_1
 12026 08:2ACF: 82 72 FD     	brl	L455
 12027                        ;}
 12028                        	.line	2871
 12029                        	.endblock	2871
 12030             00000025   L451	equ	37
 12031             0000000D   L452	equ	13
 12032 08:2AD2:              	ends
 12033                        	efunc
 12034                        	.endfunc	2871,13,37
 12035                        	.line	2871
 12036                        ;
 12037                        ;#endif /* !FF_FS_READONLY */
 12038                        ;
  Mon Aug  9 2021 16:52                                                Page 232


 12039                        ;#if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
 12040                        ;/*-----------------------------------------------
                    ------------------------*/
 12041                        ;/* Remove an object from the directory           
                                            */
 12042                        ;/*-----------------------------------------------
                    ------------------------*/
 12043                        ;
 12044                        ;static FRESULT dir_remove( /* FR_OK:Succeeded, FR
                    _DISK_ERR:A disk error */
 12045                        ;DIR* dp /* Directory object pointing the entry to
                     be removed */
 12046                        ;)
 12047                        ;{
 12048                        	.line	2880
 12049                        	.line	2883
 12050                        	FFDOS
 12051                        	func
 12052                        	.function	2883
 12053                        ~~dir_remove:
 12054                        	longa	on
 12055                        	longi	on
 12056 08:2AD2: 3B           	tsc
 12057 08:2AD3: 38           	sec
 12058 08:2AD4: E9 0E 00     	sbc	#L474
 12059 08:2AD7: 1B           	tcs
 12060 08:2AD8: 0B           	phd
 12061 08:2AD9: 5B           	tcd
 12062             00000004   dp_0	set	4
 12063                        	.block	2883
 12064                        ;	FRESULT res;
 12065                        ;	FATFS *fs = dp->obj.fs;
 12066                        ;#if FF_USE_LFN		/* LFN configuration */
 12067                        ;	DWORD last = dp->dptr;
 12068                        ;
 12069                        ;	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_
                    sdi(dp, dp->blk_ofs); /* Goto top of the entry block if LFN 
                    is exist */
 12070             00000000   res_1	set	0
 12071             00000002   fs_1	set	2
 12072             00000006   last_1	set	6
 12073                        	.sym	res,0,5,1,16
 12074                        	.sym	fs,2,138,1,32,75
 12075                        	.sym	last,6,18,1,32
 12076                        	.sym	dp,4,138,6,32,78
 12077 08:2ADA: A7 12        	lda	[<L474+dp_0]
 12078 08:2ADC: 85 07        	sta	<L475+fs_1
 12079 08:2ADE: A0 02 00     	ldy	#$2
 12080 08:2AE1: B7 12        	lda	[<L474+dp_0],Y
 12081 08:2AE3: 85 09        	sta	<L475+fs_1+2
 12082 08:2AE5: A0 10 00     	ldy	#$10
 12083 08:2AE8: B7 12        	lda	[<L474+dp_0],Y
 12084 08:2AEA: 85 0B        	sta	<L475+last_1
 12085 08:2AEC: A0 12 00     	ldy	#$12
 12086 08:2AEF: B7 12        	lda	[<L474+dp_0],Y
 12087 08:2AF1: 85 0D        	sta	<L475+last_1+2
 12088                        	.line	2889
 12089 08:2AF3: A0 2C 00     	ldy	#$2c
  Mon Aug  9 2021 16:52                                                Page 233


 12090 08:2AF6: B7 12        	lda	[<L474+dp_0],Y
 12091 08:2AF8: C9 FF FF     	cmp	#<$ffffffff
 12092 08:2AFB: D0 08        	bne	L478
 12093 08:2AFD: A0 2E 00     	ldy	#$2e
 12094 08:2B00: B7 12        	lda	[<L474+dp_0],Y
 12095 08:2B02: C9 FF FF     	cmp	#^$ffffffff
 12096                        L478:
 12097 08:2B05: F0 03        	beq	L479
 12098 08:2B07: 82 05 00     	brl	L477
 12099                        L479:
 12100 08:2B0A: A9 00 00     	lda	#$0
 12101 08:2B0D: 80 14        	bra	L480
 12102                        L477:
 12103 08:2B0F: A0 2E 00     	ldy	#$2e
 12104 08:2B12: B7 12        	lda	[<L474+dp_0],Y
 12105 08:2B14: 48           	pha
 12106 08:2B15: A0 2C 00     	ldy	#$2c
 12107 08:2B18: B7 12        	lda	[<L474+dp_0],Y
 12108 08:2B1A: 48           	pha
 12109 08:2B1B: D4 14        	pei	<L474+dp_0+2
 12110 08:2B1D: D4 12        	pei	<L474+dp_0
 12111 08:2B1F: 22 36 17 08  	jsl	~~dir_sdi
 12112                        L480:
 12113 08:2B23: 85 05        	sta	<L475+res_1
 12114                        ;	if (res == FR_OK)
 12115                        	.line	2890
 12116                        ;	{
 12117 08:2B25: A5 05        	lda	<L475+res_1
 12118 08:2B27: F0 03        	beq	L481
 12119 08:2B29: 82 9F 00     	brl	L10237
 12120                        L481:
 12121                        	.line	2891
 12122                        ;		do
 12123                        	.line	2892
 12124                        L10240:
 12125                        ;		{
 12126                        	.line	2893
 12127                        ;			res = move_window(fs, dp->sect);
 12128                        	.line	2894
 12129 08:2B2C: A0 1A 00     	ldy	#$1a
 12130 08:2B2F: B7 12        	lda	[<L474+dp_0],Y
 12131 08:2B31: 48           	pha
 12132 08:2B32: A0 18 00     	ldy	#$18
 12133 08:2B35: B7 12        	lda	[<L474+dp_0],Y
 12134 08:2B37: 48           	pha
 12135 08:2B38: D4 09        	pei	<L475+fs_1+2
 12136 08:2B3A: D4 07        	pei	<L475+fs_1
 12137 08:2B3C: 22 97 08 08  	jsl	~~move_window
 12138 08:2B40: 85 05        	sta	<L475+res_1
 12139                        ;			if (res != FR_OK) break;
 12140                        	.line	2895
 12141 08:2B42: A5 05        	lda	<L475+res_1
 12142 08:2B44: F0 03        	beq	L482
 12143 08:2B46: 82 73 00     	brl	L10239
 12144                        L482:
 12145                        ;			if (FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT)
 12146                        	.line	2896
  Mon Aug  9 2021 16:52                                                Page 234


 12147                        ;			{ /* On the exFAT volume */
 12148 08:2B49: 82 28 00     	brl	L10241
 12149 08:2B4C: E2 20        	sep	#$20
 12150                        	longa	off
 12151 08:2B4E: A7 07        	lda	[<L475+fs_1]
 12152 08:2B50: C9 04        	cmp	#<$4
 12153 08:2B52: C2 20        	rep	#$20
 12154                        	longa	on
 12155 08:2B54: F0 03        	beq	L483
 12156 08:2B56: 82 1B 00     	brl	L10241
 12157                        L483:
 12158                        	.line	2897
 12159                        ;				dp->dir[XDIR_Type] &= 0x
                    7F; /* Clear the entry InUse flag. */
 12160                        	.line	2898
 12161 08:2B59: A0 1C 00     	ldy	#$1c
 12162 08:2B5C: B7 12        	lda	[<L474+dp_0],Y
 12163 08:2B5E: 85 01        	sta	<R0
 12164 08:2B60: A0 1E 00     	ldy	#$1e
 12165 08:2B63: B7 12        	lda	[<L474+dp_0],Y
 12166 08:2B65: 85 03        	sta	<R0+2
 12167 08:2B67: E2 20        	sep	#$20
 12168                        	longa	off
 12169 08:2B69: A7 01        	lda	[<R0]
 12170 08:2B6B: 29 7F        	and	#<$7f
 12171 08:2B6D: 87 01        	sta	[<R0]
 12172 08:2B6F: C2 20        	rep	#$20
 12173                        	longa	on
 12174                        ;			}
 12175                        	.line	2899
 12176                        ;			else
 12177 08:2B71: 82 16 00     	brl	L10242
 12178                        L10241:
 12179                        ;			{ /* On the FAT/FAT32 volume */
 12180                        	.line	2901
 12181                        ;				dp->dir[DIR_Name] = DDEM
                    ; /* Mark the entry 'deleted'. */
 12182                        	.line	2902
 12183 08:2B74: A0 1C 00     	ldy	#$1c
 12184 08:2B77: B7 12        	lda	[<L474+dp_0],Y
 12185 08:2B79: 85 01        	sta	<R0
 12186 08:2B7B: A0 1E 00     	ldy	#$1e
 12187 08:2B7E: B7 12        	lda	[<L474+dp_0],Y
 12188 08:2B80: 85 03        	sta	<R0+2
 12189 08:2B82: E2 20        	sep	#$20
 12190                        	longa	off
 12191 08:2B84: A9 E5        	lda	#$e5
 12192 08:2B86: 87 01        	sta	[<R0]
 12193 08:2B88: C2 20        	rep	#$20
 12194                        	longa	on
 12195                        ;			}
 12196                        	.line	2903
 12197                        L10242:
 12198                        ;			fs->wflag = 1;
 12199                        	.line	2904
 12200 08:2B8A: E2 20        	sep	#$20
 12201                        	longa	off
 12202 08:2B8C: A9 01        	lda	#$1
  Mon Aug  9 2021 16:52                                                Page 235


 12203 08:2B8E: A0 03 00     	ldy	#$3
 12204 08:2B91: 97 07        	sta	[<L475+fs_1],Y
 12205 08:2B93: C2 20        	rep	#$20
 12206                        	longa	on
 12207                        ;			if (dp->dptr >= last) break; /* 
                    If reached last entry then all entries of the object has bee
                    n deleted. */
 12208                        	.line	2905
 12209 08:2B95: A0 10 00     	ldy	#$10
 12210 08:2B98: B7 12        	lda	[<L474+dp_0],Y
 12211 08:2B9A: C5 0B        	cmp	<L475+last_1
 12212 08:2B9C: A0 12 00     	ldy	#$12
 12213 08:2B9F: B7 12        	lda	[<L474+dp_0],Y
 12214 08:2BA1: E5 0D        	sbc	<L475+last_1+2
 12215 08:2BA3: 90 03        	bcc	L484
 12216 08:2BA5: 82 14 00     	brl	L10239
 12217                        L484:
 12218                        ;			res = dir_next(dp, 0); /* Next e
                    ntry */
 12219                        	.line	2906
 12220 08:2BA8: F4 00 00     	pea	#<$0
 12221 08:2BAB: D4 14        	pei	<L474+dp_0+2
 12222 08:2BAD: D4 12        	pei	<L474+dp_0
 12223 08:2BAF: 22 75 19 08  	jsl	~~dir_next
 12224 08:2BB3: 85 05        	sta	<L475+res_1
 12225                        ;		}while (res == FR_OK);
 12226                        	.line	2907
 12227                        L10238:
 12228 08:2BB5: A5 05        	lda	<L475+res_1
 12229 08:2BB7: D0 03        	bne	L485
 12230 08:2BB9: 82 70 FF     	brl	L10240
 12231                        L485:
 12232                        L10239:
 12233                        ;		if (res == FR_NO_FILE) res = FR_INT_ERR;
 12234                        	.line	2908
 12235 08:2BBC: A5 05        	lda	<L475+res_1
 12236 08:2BBE: C9 04 00     	cmp	#<$4
 12237 08:2BC1: F0 03        	beq	L486
 12238 08:2BC3: 82 05 00     	brl	L10243
 12239                        L486:
 12240                        	.line	2908
 12241 08:2BC6: A9 02 00     	lda	#$2
 12242 08:2BC9: 85 05        	sta	<L475+res_1
 12243                        ;	}
 12244                        L10243:
 12245                        	.line	2909
 12246                        ;#else			/* Non LFN configuration
                     */
 12247                        ;
 12248                        ;	res = move_window(fs, dp->sect);
 12249                        ;	if (res == FR_OK)
 12250                        ;	{
 12251                        ;		dp->dir[DIR_Name] = DDEM; /* Mark the en
                    try 'deleted'.*/
 12252                        ;		fs->wflag = 1;
 12253                        ;	}
 12254                        ;#endif
 12255                        ;
  Mon Aug  9 2021 16:52                                                Page 236


 12256                        ;	return res;
 12257                        L10237:
 12258                        	.line	2920
 12259 08:2BCB: A5 05        	lda	<L475+res_1
 12260                        L487:
 12261 08:2BCD: A8           	tay
 12262 08:2BCE: A5 10        	lda	<L474+2
 12263 08:2BD0: 85 14        	sta	<L474+2+4
 12264 08:2BD2: A5 0F        	lda	<L474+1
 12265 08:2BD4: 85 13        	sta	<L474+1+4
 12266 08:2BD6: 2B           	pld
 12267 08:2BD7: 3B           	tsc
 12268 08:2BD8: 18           	clc
 12269 08:2BD9: 69 12 00     	adc	#L474+4
 12270 08:2BDC: 1B           	tcs
 12271 08:2BDD: 98           	tya
 12272 08:2BDE: 6B           	rtl
 12273                        ;}
 12274                        	.line	2921
 12275                        	.endblock	2921
 12276             0000000E   L474	equ	14
 12277             00000005   L475	equ	5
 12278 08:2BDF:              	ends
 12279                        	efunc
 12280                        	.endfunc	2921,5,14
 12281                        	.line	2921
 12282                        ;
 12283                        ;#endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 
                    */
 12284                        ;
 12285                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
 12286                        ;/*-----------------------------------------------
                    ------------------------*/
 12287                        ;/* Get file information from directory entry     
                                            */
 12288                        ;/*-----------------------------------------------
                    ------------------------*/
 12289                        ;
 12290                        ;static void get_fileinfo(DIR* dp, /* Pointer to t
                    he directory object */
 12291                        ;FILINFO* fno /* Pointer to the file information t
                    o be filled */
 12292                        ;)
 12293                        ;{
 12294                        	.line	2930
 12295                        	.line	2933
 12296                        	FFDOS
 12297                        	func
 12298                        	.function	2933
 12299                        ~~get_fileinfo:
 12300                        	longa	on
 12301                        	longi	on
 12302 08:2BDF: 3B           	tsc
 12303 08:2BE0: 38           	sec
 12304 08:2BE1: E9 25 00     	sbc	#L488
 12305 08:2BE4: 1B           	tcs
 12306 08:2BE5: 0B           	phd
 12307 08:2BE6: 5B           	tcd
  Mon Aug  9 2021 16:52                                                Page 237


 12308             00000004   dp_0	set	4
 12309             00000008   fno_0	set	8
 12310                        	.block	2933
 12311                        ;	UINT si, di;
 12312                        ;#if FF_USE_LFN
 12313                        ;	BYTE lcf;
 12314                        ;	WCHAR wc, hs;
 12315                        ;	FATFS *fs = dp->obj.fs;
 12316                        ;#else
 12317                        ;	TCHAR c;
 12318                        ;#endif
 12319                        ;
 12320                        ;	fno->fname[0] = 0; /* Invaidate file info */
 12321             00000000   si_1	set	0
 12322             00000002   di_1	set	2
 12323             00000004   lcf_1	set	4
 12324             00000005   wc_1	set	5
 12325             00000007   hs_1	set	7
 12326             00000009   fs_1	set	9
 12327                        	.sym	si,0,16,1,16
 12328                        	.sym	di,2,16,1,16
 12329                        	.sym	lcf,4,14,1,8
 12330                        	.sym	wc,5,16,1,16
 12331                        	.sym	hs,7,16,1,16
 12332                        	.sym	fs,9,138,1,32,75
 12333                        	.sym	dp,4,138,6,32,78
 12334                        	.sym	fno,8,138,6,32,79
 12335 08:2BE7: A7 29        	lda	[<L488+dp_0]
 12336 08:2BE9: 85 22        	sta	<L489+fs_1
 12337 08:2BEB: A0 02 00     	ldy	#$2
 12338 08:2BEE: B7 29        	lda	[<L488+dp_0],Y
 12339 08:2BF0: 85 24        	sta	<L489+fs_1+2
 12340                        	.line	2943
 12341 08:2BF2: E2 20        	sep	#$20
 12342                        	longa	off
 12343 08:2BF4: A9 00        	lda	#$0
 12344 08:2BF6: A0 16 00     	ldy	#$16
 12345 08:2BF9: 97 2D        	sta	[<L488+fno_0],Y
 12346 08:2BFB: C2 20        	rep	#$20
 12347                        	longa	on
 12348                        ;	if (dp->sect == 0)
 12349                        	.line	2944
 12350                        ;		return; /* Exit if read pointer has reac
                    hed end of directory */
 12351 08:2BFD: A0 18 00     	ldy	#$18
 12352 08:2C00: B7 29        	lda	[<L488+dp_0],Y
 12353 08:2C02: A0 1A 00     	ldy	#$1a
 12354 08:2C05: 17 29        	ora	[<L488+dp_0],Y
 12355 08:2C07: F0 03        	beq	L491
 12356 08:2C09: 82 10 00     	brl	L10244
 12357                        L491:
 12358                        	.line	2945
 12359                        L492:
 12360 08:2C0C: A5 27        	lda	<L488+2
 12361 08:2C0E: 85 2F        	sta	<L488+2+8
 12362 08:2C10: A5 26        	lda	<L488+1
 12363 08:2C12: 85 2E        	sta	<L488+1+8
 12364 08:2C14: 2B           	pld
  Mon Aug  9 2021 16:52                                                Page 238


 12365 08:2C15: 3B           	tsc
 12366 08:2C16: 18           	clc
 12367 08:2C17: 69 2D 00     	adc	#L488+8
 12368 08:2C1A: 1B           	tcs
 12369 08:2C1B: 6B           	rtl
 12370                        ;
 12371                        ;#if FF_USE_LFN		/* LFN configuration */
 12372                        ;#if FF_FS_EXFAT
 12373                        ;	if (fs->fs_type == FS_EXFAT)
 12374                        ;	{ /* On the exFAT volume */
 12375                        ;		get_xfileinfo(fs->dirbuf, fno);
 12376                        ;		return;
 12377                        ;	}
 12378                        ;	else
 12379                        ;#endif
 12380                        ;	{ /* On the FAT/FAT32 volume */
 12381                        L10244:
 12382                        	.line	2956
 12383                        ;		if (dp->blk_ofs != 0xFFFFFFFF)
 12384                        	.line	2957
 12385                        ;		{ /* Get LFN if available */
 12386 08:2C1C: A0 2C 00     	ldy	#$2c
 12387 08:2C1F: B7 29        	lda	[<L488+dp_0],Y
 12388 08:2C21: C9 FF FF     	cmp	#<$ffffffff
 12389 08:2C24: D0 08        	bne	L493
 12390 08:2C26: A0 2E 00     	ldy	#$2e
 12391 08:2C29: B7 29        	lda	[<L488+dp_0],Y
 12392 08:2C2B: C9 FF FF     	cmp	#^$ffffffff
 12393                        L493:
 12394 08:2C2E: D0 03        	bne	L494
 12395 08:2C30: 82 21 01     	brl	L10245
 12396                        L494:
 12397                        	.line	2958
 12398                        ;			si = di = hs = 0;
 12399                        	.line	2959
 12400 08:2C33: 64 20        	stz	<L489+hs_1
 12401 08:2C35: 64 1B        	stz	<L489+di_1
 12402 08:2C37: 64 19        	stz	<L489+si_1
 12403                        ;			while (fs->lfnbuf[si] != 0)
 12404                        	.line	2960
 12405                        L10246:
 12406 08:2C39: A5 19        	lda	<L489+si_1
 12407 08:2C3B: 85 05        	sta	<R1
 12408 08:2C3D: 64 07        	stz	<R1+2
 12409 08:2C3F: D4 07        	pei	<R1+2
 12410 08:2C41: D4 05        	pei	<R1
 12411 08:2C43: A9 01 00     	lda	#$1
 12412                        	xref	~~~lasl
 12413 08:2C46: 22 xx xx xx  	jsl	~~~lasl
 12414 08:2C4A: 85 01        	sta	<R0
 12415 08:2C4C: 86 03        	stx	<R0+2
 12416 08:2C4E: 18           	clc
 12417 08:2C4F: A0 0B 00     	ldy	#$b
 12418 08:2C52: B7 22        	lda	[<L489+fs_1],Y
 12419 08:2C54: 65 01        	adc	<R0
 12420 08:2C56: 85 09        	sta	<R2
 12421 08:2C58: A0 0D 00     	ldy	#$d
 12422 08:2C5B: B7 22        	lda	[<L489+fs_1],Y
  Mon Aug  9 2021 16:52                                                Page 239


 12423 08:2C5D: 65 03        	adc	<R0+2
 12424 08:2C5F: 85 0B        	sta	<R2+2
 12425 08:2C61: A7 09        	lda	[<R2]
 12426 08:2C63: D0 03        	bne	L495
 12427 08:2C65: 82 D1 00     	brl	L10247
 12428                        L495:
 12429                        ;			{
 12430                        	.line	2961
 12431                        ;				wc = fs->lfnbuf[si++]; /
                    * Get an LFN character (UTF-16) */
 12432                        	.line	2962
 12433 08:2C68: A5 19        	lda	<L489+si_1
 12434 08:2C6A: 85 05        	sta	<R1
 12435 08:2C6C: 64 07        	stz	<R1+2
 12436 08:2C6E: D4 07        	pei	<R1+2
 12437 08:2C70: D4 05        	pei	<R1
 12438 08:2C72: A9 01 00     	lda	#$1
 12439                        	xref	~~~lasl
 12440 08:2C75: 22 xx xx xx  	jsl	~~~lasl
 12441 08:2C79: 85 01        	sta	<R0
 12442 08:2C7B: 86 03        	stx	<R0+2
 12443 08:2C7D: 18           	clc
 12444 08:2C7E: A0 0B 00     	ldy	#$b
 12445 08:2C81: B7 22        	lda	[<L489+fs_1],Y
 12446 08:2C83: 65 01        	adc	<R0
 12447 08:2C85: 85 09        	sta	<R2
 12448 08:2C87: A0 0D 00     	ldy	#$d
 12449 08:2C8A: B7 22        	lda	[<L489+fs_1],Y
 12450 08:2C8C: 65 03        	adc	<R0+2
 12451 08:2C8E: 85 0B        	sta	<R2+2
 12452 08:2C90: A7 09        	lda	[<R2]
 12453 08:2C92: 85 1E        	sta	<L489+wc_1
 12454 08:2C94: E6 19        	inc	<L489+si_1
 12455                        ;				if (hs == 0 && IsSurroga
                    te(wc))
 12456                        	.line	2963
 12457                        ;				{ /* Is it a surrogate? 
                    */
 12458 08:2C96: A5 20        	lda	<L489+hs_1
 12459 08:2C98: F0 03        	beq	L496
 12460 08:2C9A: 82 1B 00     	brl	L10248
 12461                        L496:
 12462 08:2C9D: A5 1E        	lda	<L489+wc_1
 12463 08:2C9F: C9 00 D8     	cmp	#<$d800
 12464 08:2CA2: B0 03        	bcs	L497
 12465 08:2CA4: 82 11 00     	brl	L10248
 12466                        L497:
 12467 08:2CA7: A9 FF DF     	lda	#$dfff
 12468 08:2CAA: C5 1E        	cmp	<L489+wc_1
 12469 08:2CAC: B0 03        	bcs	L498
 12470 08:2CAE: 82 07 00     	brl	L10248
 12471                        L498:
 12472                        	.line	2964
 12473                        ;					hs = wc; continu
                    e; /* Get low surrogate */
 12474                        	.line	2965
 12475 08:2CB1: A5 1E        	lda	<L489+wc_1
 12476 08:2CB3: 85 20        	sta	<L489+hs_1
  Mon Aug  9 2021 16:52                                                Page 240


 12477                        	.line	2965
 12478 08:2CB5: 82 81 FF     	brl	L10246
 12479                        ;				}
 12480                        	.line	2966
 12481                        ;				wc = put_utf((DWORD)hs <
                    < 16 | wc, &fno->fname[di], FF_LFN_BUF - di); /* Store it in
                     UTF-16 or UTF-8 encoding */
 12482                        L10248:
 12483                        	.line	2967
 12484 08:2CB8: 38           	sec
 12485 08:2CB9: A9 FF 00     	lda	#$ff
 12486 08:2CBC: E5 1B        	sbc	<L489+di_1
 12487 08:2CBE: 48           	pha
 12488 08:2CBF: A5 1B        	lda	<L489+di_1
 12489 08:2CC1: 85 01        	sta	<R0
 12490 08:2CC3: 64 03        	stz	<R0+2
 12491 08:2CC5: 18           	clc
 12492 08:2CC6: A9 16 00     	lda	#$16
 12493 08:2CC9: 65 01        	adc	<R0
 12494 08:2CCB: 85 05        	sta	<R1
 12495 08:2CCD: A9 00 00     	lda	#$0
 12496 08:2CD0: 65 03        	adc	<R0+2
 12497 08:2CD2: 85 07        	sta	<R1+2
 12498 08:2CD4: 18           	clc
 12499 08:2CD5: A5 2D        	lda	<L488+fno_0
 12500 08:2CD7: 65 05        	adc	<R1
 12501 08:2CD9: 85 01        	sta	<R0
 12502 08:2CDB: A5 2F        	lda	<L488+fno_0+2
 12503 08:2CDD: 65 07        	adc	<R1+2
 12504 08:2CDF: 85 03        	sta	<R0+2
 12505 08:2CE1: D4 03        	pei	<R0+2
 12506 08:2CE3: D4 01        	pei	<R0
 12507 08:2CE5: A5 20        	lda	<L489+hs_1
 12508 08:2CE7: 85 0D        	sta	<R3
 12509 08:2CE9: 64 0F        	stz	<R3+2
 12510 08:2CEB: D4 0F        	pei	<R3+2
 12511 08:2CED: D4 0D        	pei	<R3
 12512 08:2CEF: A9 10 00     	lda	#$10
 12513                        	xref	~~~lasl
 12514 08:2CF2: 22 xx xx xx  	jsl	~~~lasl
 12515 08:2CF6: 85 09        	sta	<R2
 12516 08:2CF8: 86 0B        	stx	<R2+2
 12517 08:2CFA: A5 1E        	lda	<L489+wc_1
 12518 08:2CFC: 85 11        	sta	<17
 12519 08:2CFE: 64 13        	stz	<17+2
 12520 08:2D00: A5 11        	lda	<17
 12521 08:2D02: 05 09        	ora	<R2
 12522 08:2D04: 85 15        	sta	<21
 12523 08:2D06: A5 13        	lda	<17+2
 12524 08:2D08: 05 0B        	ora	<R2+2
 12525 08:2D0A: 85 17        	sta	<21+2
 12526 08:2D0C: D4 17        	pei	<21+2
 12527 08:2D0E: D4 15        	pei	<21
 12528 08:2D10: 22 E8 04 08  	jsl	~~put_utf
 12529 08:2D14: E2 20        	sep	#$20
 12530                        	longa	off
 12531 08:2D16: 85 09        	sta	<R2
 12532 08:2D18: C2 20        	rep	#$20
  Mon Aug  9 2021 16:52                                                Page 241


 12533                        	longa	on
 12534 08:2D1A: A5 09        	lda	<R2
 12535 08:2D1C: 29 FF 00     	and	#$ff
 12536 08:2D1F: 85 1E        	sta	<L489+wc_1
 12537                        ;				if (wc == 0)
 12538                        	.line	2968
 12539                        ;				{	di = 0; break;} 
                    /* Invalid char or buffer overflow? */
 12540 08:2D21: A5 1E        	lda	<L489+wc_1
 12541 08:2D23: F0 03        	beq	L499
 12542 08:2D25: 82 05 00     	brl	L10249
 12543                        L499:
 12544                        	.line	2969
 12545                        	.line	2969
 12546 08:2D28: 64 1B        	stz	<L489+di_1
 12547                        	.line	2969
 12548 08:2D2A: 82 0C 00     	brl	L10247
 12549                        	.line	2969
 12550                        ;				di += wc;
 12551                        L10249:
 12552                        	.line	2970
 12553 08:2D2D: 18           	clc
 12554 08:2D2E: A5 1B        	lda	<L489+di_1
 12555 08:2D30: 65 1E        	adc	<L489+wc_1
 12556 08:2D32: 85 1B        	sta	<L489+di_1
 12557                        ;				hs = 0;
 12558                        	.line	2971
 12559 08:2D34: 64 20        	stz	<L489+hs_1
 12560                        ;			}
 12561                        	.line	2972
 12562 08:2D36: 82 00 FF     	brl	L10246
 12563                        L10247:
 12564                        ;			if (hs != 0) di = 0; /* Broken s
                    urrogate pair? */
 12565                        	.line	2973
 12566 08:2D39: A5 20        	lda	<L489+hs_1
 12567 08:2D3B: D0 03        	bne	L500
 12568 08:2D3D: 82 02 00     	brl	L10250
 12569                        L500:
 12570                        	.line	2973
 12571 08:2D40: 64 1B        	stz	<L489+di_1
 12572                        ;			fno->fname[di] = 0; /* Terminate
                     the LFN (null string means LFN is invalid) */
 12573                        L10250:
 12574                        	.line	2974
 12575 08:2D42: 18           	clc
 12576 08:2D43: A9 16 00     	lda	#$16
 12577 08:2D46: 65 1B        	adc	<L489+di_1
 12578 08:2D48: 85 01        	sta	<R0
 12579 08:2D4A: E2 20        	sep	#$20
 12580                        	longa	off
 12581 08:2D4C: A9 00        	lda	#$0
 12582 08:2D4E: A4 01        	ldy	<R0
 12583 08:2D50: 97 2D        	sta	[<L488+fno_0],Y
 12584 08:2D52: C2 20        	rep	#$20
 12585                        	longa	on
 12586                        ;		}
 12587                        	.line	2975
  Mon Aug  9 2021 16:52                                                Page 242


 12588                        ;	}
 12589                        L10245:
 12590                        	.line	2976
 12591                        ;
 12592                        ;	si = di = 0;
 12593                        	.line	2978
 12594 08:2D54: 64 1B        	stz	<L489+di_1
 12595 08:2D56: 64 19        	stz	<L489+si_1
 12596                        ;	while (si < 11)
 12597                        	.line	2979
 12598                        L10251:
 12599 08:2D58: A5 19        	lda	<L489+si_1
 12600 08:2D5A: C9 0B 00     	cmp	#<$b
 12601 08:2D5D: 90 03        	bcc	L501
 12602 08:2D5F: 82 33 01     	brl	L10252
 12603                        L501:
 12604                        ;	{ /* Get SFN from SFN entry */
 12605                        	.line	2980
 12606                        ;		wc = dp->dir[si++]; /* Get a char */
 12607                        	.line	2981
 12608 08:2D62: A0 1C 00     	ldy	#$1c
 12609 08:2D65: B7 29        	lda	[<L488+dp_0],Y
 12610 08:2D67: 85 01        	sta	<R0
 12611 08:2D69: A0 1E 00     	ldy	#$1e
 12612 08:2D6C: B7 29        	lda	[<L488+dp_0],Y
 12613 08:2D6E: 85 03        	sta	<R0+2
 12614 08:2D70: A4 19        	ldy	<L489+si_1
 12615 08:2D72: B7 01        	lda	[<R0],Y
 12616 08:2D74: 29 FF 00     	and	#$ff
 12617 08:2D77: 85 1E        	sta	<L489+wc_1
 12618 08:2D79: E6 19        	inc	<L489+si_1
 12619                        ;		if (wc == ' ') continue; /* Skip padding
                     spaces */
 12620                        	.line	2982
 12621 08:2D7B: A5 1E        	lda	<L489+wc_1
 12622 08:2D7D: C9 20 00     	cmp	#<$20
 12623 08:2D80: D0 03        	bne	L502
 12624 08:2D82: 82 D3 FF     	brl	L10251
 12625                        L502:
 12626                        ;		if (wc == RDDEM) wc = DDEM; /* Restore r
                    eplaced DDEM character */
 12627                        	.line	2983
 12628 08:2D85: A5 1E        	lda	<L489+wc_1
 12629 08:2D87: C9 05 00     	cmp	#<$5
 12630 08:2D8A: F0 03        	beq	L503
 12631 08:2D8C: 82 05 00     	brl	L10253
 12632                        L503:
 12633                        	.line	2983
 12634 08:2D8F: A9 E5 00     	lda	#$e5
 12635 08:2D92: 85 1E        	sta	<L489+wc_1
 12636                        ;		if (si == 9 && di < FF_SFN_BUF) fno->alt
                    name[di++] = '.'; /* Insert a . if extension is exist */
 12637                        L10253:
 12638                        	.line	2984
 12639 08:2D94: A5 19        	lda	<L489+si_1
 12640 08:2D96: C9 09 00     	cmp	#<$9
 12641 08:2D99: F0 03        	beq	L504
 12642 08:2D9B: 82 1E 00     	brl	L10254
  Mon Aug  9 2021 16:52                                                Page 243


 12643                        L504:
 12644 08:2D9E: A5 1B        	lda	<L489+di_1
 12645 08:2DA0: C9 0C 00     	cmp	#<$c
 12646 08:2DA3: 90 03        	bcc	L505
 12647 08:2DA5: 82 14 00     	brl	L10254
 12648                        L505:
 12649                        	.line	2984
 12650 08:2DA8: 18           	clc
 12651 08:2DA9: A9 09 00     	lda	#$9
 12652 08:2DAC: 65 1B        	adc	<L489+di_1
 12653 08:2DAE: 85 01        	sta	<R0
 12654 08:2DB0: E2 20        	sep	#$20
 12655                        	longa	off
 12656 08:2DB2: A9 2E        	lda	#$2e
 12657 08:2DB4: A4 01        	ldy	<R0
 12658 08:2DB6: 97 2D        	sta	[<L488+fno_0],Y
 12659 08:2DB8: C2 20        	rep	#$20
 12660                        	longa	on
 12661 08:2DBA: E6 1B        	inc	<L489+di_1
 12662                        ;#if FF_LFN_UNICODE >= 1	/* Unicode output */
 12663                        ;		if (dbc_1st((BYTE)wc) && si != 8 && si !
                    = 11 && dbc_2nd(dp->dir[si]))
 12664                        L10254:
 12665                        	.line	2986
 12666                        ;		{ /* Make a DBC if needed */
 12667 08:2DBC: D4 1E        	pei	<L489+wc_1
 12668 08:2DBE: 22 B7 02 08  	jsl	~~dbc_1st
 12669 08:2DC2: AA           	tax
 12670 08:2DC3: D0 03        	bne	L506
 12671 08:2DC5: 82 58 00     	brl	L10255
 12672                        L506:
 12673 08:2DC8: A5 19        	lda	<L489+si_1
 12674 08:2DCA: C9 08 00     	cmp	#<$8
 12675 08:2DCD: D0 03        	bne	L507
 12676 08:2DCF: 82 4E 00     	brl	L10255
 12677                        L507:
 12678 08:2DD2: A5 19        	lda	<L489+si_1
 12679 08:2DD4: C9 0B 00     	cmp	#<$b
 12680 08:2DD7: D0 03        	bne	L508
 12681 08:2DD9: 82 44 00     	brl	L10255
 12682                        L508:
 12683 08:2DDC: A0 1C 00     	ldy	#$1c
 12684 08:2DDF: B7 29        	lda	[<L488+dp_0],Y
 12685 08:2DE1: 85 01        	sta	<R0
 12686 08:2DE3: A0 1E 00     	ldy	#$1e
 12687 08:2DE6: B7 29        	lda	[<L488+dp_0],Y
 12688 08:2DE8: 85 03        	sta	<R0+2
 12689 08:2DEA: A4 19        	ldy	<L489+si_1
 12690 08:2DEC: B7 01        	lda	[<R0],Y
 12691 08:2DEE: 48           	pha
 12692 08:2DEF: 22 E4 02 08  	jsl	~~dbc_2nd
 12693 08:2DF3: AA           	tax
 12694 08:2DF4: D0 03        	bne	L509
 12695 08:2DF6: 82 27 00     	brl	L10255
 12696                        L509:
 12697                        	.line	2987
 12698                        ;			wc = wc << 8 | dp->dir[si++];
 12699                        	.line	2988
  Mon Aug  9 2021 16:52                                                Page 244


 12700 08:2DF9: A0 1C 00     	ldy	#$1c
 12701 08:2DFC: B7 29        	lda	[<L488+dp_0],Y
 12702 08:2DFE: 85 01        	sta	<R0
 12703 08:2E00: A0 1E 00     	ldy	#$1e
 12704 08:2E03: B7 29        	lda	[<L488+dp_0],Y
 12705 08:2E05: 85 03        	sta	<R0+2
 12706 08:2E07: A4 19        	ldy	<L489+si_1
 12707 08:2E09: B7 01        	lda	[<R0],Y
 12708 08:2E0B: 29 FF 00     	and	#$ff
 12709 08:2E0E: 85 01        	sta	<R0
 12710 08:2E10: A5 1E        	lda	<L489+wc_1
 12711 08:2E12: EB           	xba
 12712 08:2E13: 29 00 FF     	and	#$ff00
 12713 08:2E16: 85 05        	sta	<R1
 12714 08:2E18: A5 05        	lda	<R1
 12715 08:2E1A: 05 01        	ora	<R0
 12716 08:2E1C: 85 1E        	sta	<L489+wc_1
 12717 08:2E1E: E6 19        	inc	<L489+si_1
 12718                        ;		}
 12719                        	.line	2989
 12720                        ;		wc = ff_oem2uni(wc, CODEPAGE); /* ANSI/O
                    EM -> Unicode */
 12721                        L10255:
 12722                        	.line	2990
 12723 08:2E20: F4 B5 01     	pea	#<$1b5
 12724 08:2E23: D4 1E        	pei	<L489+wc_1
 12725 08:2E25: 22 EA 91 08  	jsl	~~ff_oem2uni
 12726 08:2E29: 85 1E        	sta	<L489+wc_1
 12727                        ;		if (wc == 0)
 12728                        	.line	2991
 12729                        ;		{	di = 0; break;} /* Wrong char in
                     the current code page? */
 12730 08:2E2B: A5 1E        	lda	<L489+wc_1
 12731 08:2E2D: F0 03        	beq	L510
 12732 08:2E2F: 82 05 00     	brl	L10256
 12733                        L510:
 12734                        	.line	2992
 12735                        	.line	2992
 12736 08:2E32: 64 1B        	stz	<L489+di_1
 12737                        	.line	2992
 12738 08:2E34: 82 5E 00     	brl	L10252
 12739                        	.line	2992
 12740                        ;		wc = put_utf(wc, &fno->altname[di], FF_S
                    FN_BUF - di); /* Store it in Unicode */
 12741                        L10256:
 12742                        	.line	2993
 12743 08:2E37: 38           	sec
 12744 08:2E38: A9 0C 00     	lda	#$c
 12745 08:2E3B: E5 1B        	sbc	<L489+di_1
 12746 08:2E3D: 48           	pha
 12747 08:2E3E: A5 1B        	lda	<L489+di_1
 12748 08:2E40: 85 01        	sta	<R0
 12749 08:2E42: 64 03        	stz	<R0+2
 12750 08:2E44: 18           	clc
 12751 08:2E45: A9 09 00     	lda	#$9
 12752 08:2E48: 65 01        	adc	<R0
 12753 08:2E4A: 85 05        	sta	<R1
 12754 08:2E4C: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 245


 12755 08:2E4F: 65 03        	adc	<R0+2
 12756 08:2E51: 85 07        	sta	<R1+2
 12757 08:2E53: 18           	clc
 12758 08:2E54: A5 2D        	lda	<L488+fno_0
 12759 08:2E56: 65 05        	adc	<R1
 12760 08:2E58: 85 01        	sta	<R0
 12761 08:2E5A: A5 2F        	lda	<L488+fno_0+2
 12762 08:2E5C: 65 07        	adc	<R1+2
 12763 08:2E5E: 85 03        	sta	<R0+2
 12764 08:2E60: D4 03        	pei	<R0+2
 12765 08:2E62: D4 01        	pei	<R0
 12766 08:2E64: A5 1E        	lda	<L489+wc_1
 12767 08:2E66: 85 09        	sta	<R2
 12768 08:2E68: 64 0B        	stz	<R2+2
 12769 08:2E6A: D4 0B        	pei	<R2+2
 12770 08:2E6C: D4 09        	pei	<R2
 12771 08:2E6E: 22 E8 04 08  	jsl	~~put_utf
 12772 08:2E72: E2 20        	sep	#$20
 12773                        	longa	off
 12774 08:2E74: 85 0D        	sta	<R3
 12775 08:2E76: C2 20        	rep	#$20
 12776                        	longa	on
 12777 08:2E78: A5 0D        	lda	<R3
 12778 08:2E7A: 29 FF 00     	and	#$ff
 12779 08:2E7D: 85 1E        	sta	<L489+wc_1
 12780                        ;		if (wc == 0)
 12781                        	.line	2994
 12782                        ;		{	di = 0; break;} /* Buffer overfl
                    ow? */
 12783 08:2E7F: A5 1E        	lda	<L489+wc_1
 12784 08:2E81: F0 03        	beq	L511
 12785 08:2E83: 82 05 00     	brl	L10257
 12786                        L511:
 12787                        	.line	2995
 12788                        	.line	2995
 12789 08:2E86: 64 1B        	stz	<L489+di_1
 12790                        	.line	2995
 12791 08:2E88: 82 0A 00     	brl	L10252
 12792                        	.line	2995
 12793                        ;		di += wc;
 12794                        L10257:
 12795                        	.line	2996
 12796 08:2E8B: 18           	clc
 12797 08:2E8C: A5 1B        	lda	<L489+di_1
 12798 08:2E8E: 65 1E        	adc	<L489+wc_1
 12799 08:2E90: 85 1B        	sta	<L489+di_1
 12800                        ;#else					/* ANSI/
                    OEM output */
 12801                        ;		fno->altname[di++] = (TCHAR)wc; /* Store
                     it without any conversion */
 12802                        ;#endif
 12803                        ;	}
 12804                        	.line	3000
 12805 08:2E92: 82 C3 FE     	brl	L10251
 12806                        L10252:
 12807                        ;	fno->altname[di] = 0; /* Terminate the SFN  (nul
                    l string means SFN is invalid) */
 12808                        	.line	3001
  Mon Aug  9 2021 16:52                                                Page 246


 12809 08:2E95: 18           	clc
 12810 08:2E96: A9 09 00     	lda	#$9
 12811 08:2E99: 65 1B        	adc	<L489+di_1
 12812 08:2E9B: 85 01        	sta	<R0
 12813 08:2E9D: E2 20        	sep	#$20
 12814                        	longa	off
 12815 08:2E9F: A9 00        	lda	#$0
 12816 08:2EA1: A4 01        	ldy	<R0
 12817 08:2EA3: 97 2D        	sta	[<L488+fno_0],Y
 12818 08:2EA5: C2 20        	rep	#$20
 12819                        	longa	on
 12820                        ;
 12821                        ;	if (fno->fname[0] == 0)
 12822                        	.line	3003
 12823                        ;	{ /* If LFN is invalid, altname[] needs to be co
                    pied to fname[] */
 12824 08:2EA7: A0 16 00     	ldy	#$16
 12825 08:2EAA: B7 2D        	lda	[<L488+fno_0],Y
 12826 08:2EAC: 29 FF 00     	and	#$ff
 12827 08:2EAF: F0 03        	beq	L512
 12828 08:2EB1: 82 EC 00     	brl	L10258
 12829                        L512:
 12830                        	.line	3004
 12831                        ;		if (di == 0)
 12832                        	.line	3005
 12833                        ;		{ /* If LFN and SFN both are invalid, th
                    is object is inaccesible */
 12834 08:2EB4: A5 1B        	lda	<L489+di_1
 12835 08:2EB6: F0 03        	beq	L513
 12836 08:2EB8: 82 17 00     	brl	L10259
 12837                        L513:
 12838                        	.line	3006
 12839                        ;			fno->fname[di++] = '?';
 12840                        	.line	3007
 12841 08:2EBB: 18           	clc
 12842 08:2EBC: A9 16 00     	lda	#$16
 12843 08:2EBF: 65 1B        	adc	<L489+di_1
 12844 08:2EC1: 85 01        	sta	<R0
 12845 08:2EC3: E2 20        	sep	#$20
 12846                        	longa	off
 12847 08:2EC5: A9 3F        	lda	#$3f
 12848 08:2EC7: A4 01        	ldy	<R0
 12849 08:2EC9: 97 2D        	sta	[<L488+fno_0],Y
 12850 08:2ECB: C2 20        	rep	#$20
 12851                        	longa	on
 12852 08:2ECD: E6 1B        	inc	<L489+di_1
 12853                        ;		}
 12854                        	.line	3008
 12855                        ;		else
 12856 08:2ECF: 82 96 00     	brl	L10260
 12857                        L10259:
 12858                        ;		{
 12859                        	.line	3010
 12860                        ;			for (si = di = 0, lcf = NS_BODY;
                     fno->altname[si]; si++, di++)
 12861                        	.line	3011
 12862 08:2ED2: 64 1B        	stz	<L489+di_1
 12863 08:2ED4: 64 19        	stz	<L489+si_1
  Mon Aug  9 2021 16:52                                                Page 247


 12864 08:2ED6: E2 20        	sep	#$20
 12865                        	longa	off
 12866 08:2ED8: A9 08        	lda	#$8
 12867 08:2EDA: 85 1D        	sta	<L489+lcf_1
 12868 08:2EDC: C2 20        	rep	#$20
 12869                        	longa	on
 12870 08:2EDE: 82 73 00     	brl	L10264
 12871                        L10263:
 12872                        ;			{ /* Copy altname[] to fname[] w
                    ith case information */
 12873                        	.line	3012
 12874                        ;				wc = (WCHAR)fno->altname
                    [si];
 12875                        	.line	3013
 12876 08:2EE1: 18           	clc
 12877 08:2EE2: A9 09 00     	lda	#$9
 12878 08:2EE5: 65 19        	adc	<L489+si_1
 12879 08:2EE7: 85 01        	sta	<R0
 12880 08:2EE9: A4 01        	ldy	<R0
 12881 08:2EEB: B7 2D        	lda	[<L488+fno_0],Y
 12882 08:2EED: 29 FF 00     	and	#$ff
 12883 08:2EF0: 85 1E        	sta	<L489+wc_1
 12884                        ;				if (wc == '.') lcf = NS_
                    EXT;
 12885                        	.line	3014
 12886 08:2EF2: A5 1E        	lda	<L489+wc_1
 12887 08:2EF4: C9 2E 00     	cmp	#<$2e
 12888 08:2EF7: F0 03        	beq	L514
 12889 08:2EF9: 82 08 00     	brl	L10265
 12890                        L514:
 12891                        	.line	3014
 12892 08:2EFC: E2 20        	sep	#$20
 12893                        	longa	off
 12894 08:2EFE: A9 10        	lda	#$10
 12895 08:2F00: 85 1D        	sta	<L489+lcf_1
 12896 08:2F02: C2 20        	rep	#$20
 12897                        	longa	on
 12898                        ;				if (IsUpper(wc) && (dp->
                    dir[DIR_NTres] & lcf)) wc += 0x20;
 12899                        L10265:
 12900                        	.line	3015
 12901 08:2F04: A5 1E        	lda	<L489+wc_1
 12902 08:2F06: C9 41 00     	cmp	#<$41
 12903 08:2F09: B0 03        	bcs	L515
 12904 08:2F0B: 82 30 00     	brl	L10266
 12905                        L515:
 12906 08:2F0E: A9 5A 00     	lda	#$5a
 12907 08:2F11: C5 1E        	cmp	<L489+wc_1
 12908 08:2F13: B0 03        	bcs	L516
 12909 08:2F15: 82 26 00     	brl	L10266
 12910                        L516:
 12911 08:2F18: A0 1C 00     	ldy	#$1c
 12912 08:2F1B: B7 29        	lda	[<L488+dp_0],Y
 12913 08:2F1D: 85 01        	sta	<R0
 12914 08:2F1F: A0 1E 00     	ldy	#$1e
 12915 08:2F22: B7 29        	lda	[<L488+dp_0],Y
 12916 08:2F24: 85 03        	sta	<R0+2
 12917 08:2F26: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 248


 12918                        	longa	off
 12919 08:2F28: A5 1D        	lda	<L489+lcf_1
 12920 08:2F2A: A0 0C 00     	ldy	#$c
 12921 08:2F2D: 37 01        	and	[<R0],Y
 12922 08:2F2F: C2 20        	rep	#$20
 12923                        	longa	on
 12924 08:2F31: D0 03        	bne	L517
 12925 08:2F33: 82 08 00     	brl	L10266
 12926                        L517:
 12927                        	.line	3015
 12928 08:2F36: 18           	clc
 12929 08:2F37: A9 20 00     	lda	#$20
 12930 08:2F3A: 65 1E        	adc	<L489+wc_1
 12931 08:2F3C: 85 1E        	sta	<L489+wc_1
 12932                        ;				fno->fname[di] = (TCHAR)
                    wc;
 12933                        L10266:
 12934                        	.line	3016
 12935 08:2F3E: 18           	clc
 12936 08:2F3F: A9 16 00     	lda	#$16
 12937 08:2F42: 65 1B        	adc	<L489+di_1
 12938 08:2F44: 85 01        	sta	<R0
 12939 08:2F46: E2 20        	sep	#$20
 12940                        	longa	off
 12941 08:2F48: A5 1E        	lda	<L489+wc_1
 12942 08:2F4A: A4 01        	ldy	<R0
 12943 08:2F4C: 97 2D        	sta	[<L488+fno_0],Y
 12944 08:2F4E: C2 20        	rep	#$20
 12945                        	longa	on
 12946                        ;			}
 12947                        	.line	3017
 12948                        L10261:
 12949 08:2F50: E6 1B        	inc	<L489+di_1
 12950 08:2F52: E6 19        	inc	<L489+si_1
 12951                        L10264:
 12952 08:2F54: 18           	clc
 12953 08:2F55: A9 09 00     	lda	#$9
 12954 08:2F58: 65 19        	adc	<L489+si_1
 12955 08:2F5A: 85 01        	sta	<R0
 12956 08:2F5C: A4 01        	ldy	<R0
 12957 08:2F5E: B7 2D        	lda	[<L488+fno_0],Y
 12958 08:2F60: 29 FF 00     	and	#$ff
 12959 08:2F63: F0 03        	beq	L518
 12960 08:2F65: 82 79 FF     	brl	L10263
 12961                        L518:
 12962                        L10262:
 12963                        ;		}
 12964                        	.line	3018
 12965                        L10260:
 12966                        ;		fno->fname[di] = 0; /* Terminate the LFN
                     */
 12967                        	.line	3019
 12968 08:2F68: 18           	clc
 12969 08:2F69: A9 16 00     	lda	#$16
 12970 08:2F6C: 65 1B        	adc	<L489+di_1
 12971 08:2F6E: 85 01        	sta	<R0
 12972 08:2F70: E2 20        	sep	#$20
 12973                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 249


 12974 08:2F72: A9 00        	lda	#$0
 12975 08:2F74: A4 01        	ldy	<R0
 12976 08:2F76: 97 2D        	sta	[<L488+fno_0],Y
 12977 08:2F78: C2 20        	rep	#$20
 12978                        	longa	on
 12979                        ;		if (!dp->dir[DIR_NTres]) fno->altname[0]
                     = 0; /* Altname is not needed if neither LFN nor case info 
                    is exist. */
 12980                        	.line	3020
 12981 08:2F7A: A0 1C 00     	ldy	#$1c
 12982 08:2F7D: B7 29        	lda	[<L488+dp_0],Y
 12983 08:2F7F: 85 01        	sta	<R0
 12984 08:2F81: A0 1E 00     	ldy	#$1e
 12985 08:2F84: B7 29        	lda	[<L488+dp_0],Y
 12986 08:2F86: 85 03        	sta	<R0+2
 12987 08:2F88: A0 0C 00     	ldy	#$c
 12988 08:2F8B: B7 01        	lda	[<R0],Y
 12989 08:2F8D: 29 FF 00     	and	#$ff
 12990 08:2F90: F0 03        	beq	L519
 12991 08:2F92: 82 0B 00     	brl	L10267
 12992                        L519:
 12993                        	.line	3020
 12994 08:2F95: E2 20        	sep	#$20
 12995                        	longa	off
 12996 08:2F97: A9 00        	lda	#$0
 12997 08:2F99: A0 09 00     	ldy	#$9
 12998 08:2F9C: 97 2D        	sta	[<L488+fno_0],Y
 12999 08:2F9E: C2 20        	rep	#$20
 13000                        	longa	on
 13001                        ;	}
 13002                        L10267:
 13003                        	.line	3021
 13004                        ;
 13005                        ;#else	/* Non-LFN configuration */
 13006                        ;	si = di = 0;
 13007                        ;	while (si < 11)
 13008                        ;	{ /* Copy name body and extension */
 13009                        ;		c = (TCHAR) dp->dir[si++];
 13010                        ;		if (c == ' ')
 13011                        ;			continue; /* Skip padding spaces
                     */
 13012                        ;		if (c == RDDEM)
 13013                        ;			c = DDEM; /* Restore replaced DD
                    EM character */
 13014                        ;		if (si == 9)
 13015                        ;			fno->fname[di++] = '.';/* Insert
                     a . if extension is exist */
 13016                        ;		fno->fname[di++] = c;
 13017                        ;	}
 13018                        ;	fno->fname[di] = 0;
 13019                        ;#endif
 13020                        ;
 13021                        ;	fno->fattrib = dp->dir[DIR_Attr]; /* Attribute *
                    /
 13022                        L10258:
 13023                        	.line	3039
 13024 08:2FA0: A0 1C 00     	ldy	#$1c
 13025 08:2FA3: B7 29        	lda	[<L488+dp_0],Y
  Mon Aug  9 2021 16:52                                                Page 250


 13026 08:2FA5: 85 01        	sta	<R0
 13027 08:2FA7: A0 1E 00     	ldy	#$1e
 13028 08:2FAA: B7 29        	lda	[<L488+dp_0],Y
 13029 08:2FAC: 85 03        	sta	<R0+2
 13030 08:2FAE: E2 20        	sep	#$20
 13031                        	longa	off
 13032 08:2FB0: A0 0B 00     	ldy	#$b
 13033 08:2FB3: B7 01        	lda	[<R0],Y
 13034 08:2FB5: A0 08 00     	ldy	#$8
 13035 08:2FB8: 97 2D        	sta	[<L488+fno_0],Y
 13036 08:2FBA: C2 20        	rep	#$20
 13037                        	longa	on
 13038                        ;	fno->fsize = ld_dword(dp->dir + DIR_FileSize); /
                    * Size */
 13039                        	.line	3040
 13040 08:2FBC: 18           	clc
 13041 08:2FBD: A9 1C 00     	lda	#$1c
 13042 08:2FC0: A0 1C 00     	ldy	#$1c
 13043 08:2FC3: 77 29        	adc	[<L488+dp_0],Y
 13044 08:2FC5: 85 01        	sta	<R0
 13045 08:2FC7: A9 00 00     	lda	#$0
 13046 08:2FCA: A0 1E 00     	ldy	#$1e
 13047 08:2FCD: 77 29        	adc	[<L488+dp_0],Y
 13048 08:2FCF: 85 03        	sta	<R0+2
 13049 08:2FD1: D4 03        	pei	<R0+2
 13050 08:2FD3: D4 01        	pei	<R0
 13051 08:2FD5: 22 3B 00 08  	jsl	~~ld_dword
 13052 08:2FD9: 85 05        	sta	<R1
 13053 08:2FDB: 86 07        	stx	<R1+2
 13054 08:2FDD: A5 05        	lda	<R1
 13055 08:2FDF: 87 2D        	sta	[<L488+fno_0]
 13056 08:2FE1: A5 07        	lda	<R1+2
 13057 08:2FE3: A0 02 00     	ldy	#$2
 13058 08:2FE6: 97 2D        	sta	[<L488+fno_0],Y
 13059                        ;	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);
                     /* Time */
 13060                        	.line	3041
 13061 08:2FE8: 18           	clc
 13062 08:2FE9: A9 16 00     	lda	#$16
 13063 08:2FEC: A0 1C 00     	ldy	#$1c
 13064 08:2FEF: 77 29        	adc	[<L488+dp_0],Y
 13065 08:2FF1: 85 01        	sta	<R0
 13066 08:2FF3: A9 00 00     	lda	#$0
 13067 08:2FF6: A0 1E 00     	ldy	#$1e
 13068 08:2FF9: 77 29        	adc	[<L488+dp_0],Y
 13069 08:2FFB: 85 03        	sta	<R0+2
 13070 08:2FFD: D4 03        	pei	<R0+2
 13071 08:2FFF: D4 01        	pei	<R0
 13072 08:3001: 22 00 00 08  	jsl	~~ld_word
 13073 08:3005: A0 06 00     	ldy	#$6
 13074 08:3008: 97 2D        	sta	[<L488+fno_0],Y
 13075                        ;	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);
                     /* Date */
 13076                        	.line	3042
 13077 08:300A: 18           	clc
 13078 08:300B: A9 18 00     	lda	#$18
 13079 08:300E: A0 1C 00     	ldy	#$1c
 13080 08:3011: 77 29        	adc	[<L488+dp_0],Y
  Mon Aug  9 2021 16:52                                                Page 251


 13081 08:3013: 85 01        	sta	<R0
 13082 08:3015: A9 00 00     	lda	#$0
 13083 08:3018: A0 1E 00     	ldy	#$1e
 13084 08:301B: 77 29        	adc	[<L488+dp_0],Y
 13085 08:301D: 85 03        	sta	<R0+2
 13086 08:301F: D4 03        	pei	<R0+2
 13087 08:3021: D4 01        	pei	<R0
 13088 08:3023: 22 00 00 08  	jsl	~~ld_word
 13089 08:3027: A0 04 00     	ldy	#$4
 13090 08:302A: 97 2D        	sta	[<L488+fno_0],Y
 13091                        ;}
 13092                        	.line	3043
 13093 08:302C: 82 DD FB     	brl	L492
 13094                        	.endblock	3043
 13095             00000025   L488	equ	37
 13096             00000019   L489	equ	25
 13097 08:302F:              	ends
 13098                        	efunc
 13099                        	.endfunc	3043,25,37
 13100                        	.line	3043
 13101                        ;
 13102                        ;#endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
                     */
 13103                        ;
 13104                        ;#if FF_USE_FIND && FF_FS_MINIMIZE <= 1
 13105                        ;/*-----------------------------------------------
                    ------------------------*/
 13106                        ;/* Pattern matching                              
                                            */
 13107                        ;/*-----------------------------------------------
                    ------------------------*/
 13108                        ;
 13109                        ;static DWORD get_achar ( /* Get a character and a
                    dvances ptr */
 13110                        ;		const TCHAR** ptr /* Pointer to pointer 
                    to the ANSI/OEM or Unicode string */
 13111                        ;)
 13112                        ;{
 13113                        	.line	3052
 13114                        	.line	3055
 13115                        	FFDOS
 13116                        	func
 13117                        	.function	3055
 13118                        ~~get_achar:
 13119                        	longa	on
 13120                        	longi	on
 13121 08:302F: 3B           	tsc
 13122 08:3030: 38           	sec
 13123 08:3031: E9 04 00     	sbc	#L520
 13124 08:3034: 1B           	tcs
 13125 08:3035: 0B           	phd
 13126 08:3036: 5B           	tcd
 13127             00000004   ptr_0	set	4
 13128                        	.block	3055
 13129                        ;	DWORD chr;
 13130                        ;
 13131                        ;#if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unico
                    de input */
  Mon Aug  9 2021 16:52                                                Page 252


 13132                        ;	chr = tchar2uni(ptr);
 13133             00000000   chr_1	set	0
 13134                        	.sym	chr,0,18,1,32
 13135                        	.sym	ptr,4,1166,6,32
 13136                        	.line	3059
 13137 08:3037: D4 0A        	pei	<L520+ptr_0+2
 13138 08:3039: D4 08        	pei	<L520+ptr_0
 13139 08:303B: 22 11 03 08  	jsl	~~tchar2uni
 13140 08:303F: 85 01        	sta	<L521+chr_1
 13141 08:3041: 86 03        	stx	<L521+chr_1+2
 13142                        ;	if (chr == 0xFFFFFFFF) chr = 0; /* Wrong UTF enc
                    oding is recognized as end of the string */
 13143                        	.line	3060
 13144 08:3043: A5 01        	lda	<L521+chr_1
 13145 08:3045: C9 FF FF     	cmp	#<$ffffffff
 13146 08:3048: D0 05        	bne	L523
 13147 08:304A: A5 03        	lda	<L521+chr_1+2
 13148 08:304C: C9 FF FF     	cmp	#^$ffffffff
 13149                        L523:
 13150 08:304F: F0 03        	beq	L524
 13151 08:3051: 82 04 00     	brl	L10268
 13152                        L524:
 13153                        	.line	3060
 13154 08:3054: 64 01        	stz	<L521+chr_1
 13155 08:3056: 64 03        	stz	<L521+chr_1+2
 13156                        ;	chr = ff_wtoupper(chr);
 13157                        L10268:
 13158                        	.line	3061
 13159 08:3058: D4 03        	pei	<L521+chr_1+2
 13160 08:305A: D4 01        	pei	<L521+chr_1
 13161 08:305C: 22 22 92 08  	jsl	~~ff_wtoupper
 13162 08:3060: 85 01        	sta	<L521+chr_1
 13163 08:3062: 86 03        	stx	<L521+chr_1+2
 13164                        ;
 13165                        ;#else						
                    			/* ANSI/OEM input */
 13166                        ;	chr = (BYTE)*(*ptr)++; /* Get a byte */
 13167                        ;	if (IsLower(chr)) chr -= 0x20; /* To upper ASCII
                     char */
 13168                        ;#if FF_CODE_PAGE == 0
 13169                        ;	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80
                    ]; /* To upper SBCS extended char */
 13170                        ;#elif FF_CODE_PAGE < 900
 13171                        ;	if (chr >= 0x80) chr = ExCvt[chr - 0x80]; /* To 
                    upper SBCS extended char */
 13172                        ;#endif
 13173                        ;#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
 13174                        ;	if (dbc_1st((BYTE)chr))
 13175                        ;	{ /* Get DBC 2nd byte if needed */
 13176                        ;		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | 
                    (BYTE)*(*ptr)++ : 0;
 13177                        ;	}
 13178                        ;#endif
 13179                        ;
 13180                        ;#endif
 13181                        ;	return chr;
 13182                        	.line	3079
 13183 08:3064: A6 03        	ldx	<L521+chr_1+2
  Mon Aug  9 2021 16:52                                                Page 253


 13184 08:3066: A5 01        	lda	<L521+chr_1
 13185                        L525:
 13186 08:3068: A8           	tay
 13187 08:3069: A5 06        	lda	<L520+2
 13188 08:306B: 85 0A        	sta	<L520+2+4
 13189 08:306D: A5 05        	lda	<L520+1
 13190 08:306F: 85 09        	sta	<L520+1+4
 13191 08:3071: 2B           	pld
 13192 08:3072: 3B           	tsc
 13193 08:3073: 18           	clc
 13194 08:3074: 69 08 00     	adc	#L520+4
 13195 08:3077: 1B           	tcs
 13196 08:3078: 98           	tya
 13197 08:3079: 6B           	rtl
 13198                        ;}
 13199                        	.line	3080
 13200                        	.endblock	3080
 13201             00000004   L520	equ	4
 13202             00000001   L521	equ	1
 13203 08:307A:              	ends
 13204                        	efunc
 13205                        	.endfunc	3080,1,4
 13206                        	.line	3080
 13207                        ;
 13208                        ;static int pattern_matching ( /* 0:not matched, 1
                    :matched */
 13209                        ;		const TCHAR* pat, /* Matching pattern */
 13210                        ;		const TCHAR* nam, /* String to be tested
                     */
 13211                        ;		int skip, /* Number of pre-skip chars (n
                    umber of ?s) */
 13212                        ;		int inf /* Infinite search (* specified)
                     */
 13213                        ;)
 13214                        ;{
 13215                        	.line	3082
 13216                        	.line	3088
 13217                        	FFDOS
 13218                        	func
 13219                        	.function	3088
 13220                        ~~pattern_matching:
 13221                        	longa	on
 13222                        	longi	on
 13223 08:307A: 3B           	tsc
 13224 08:307B: 38           	sec
 13225 08:307C: E9 18 00     	sbc	#L526
 13226 08:307F: 1B           	tcs
 13227 08:3080: 0B           	phd
 13228 08:3081: 5B           	tcd
 13229             00000004   pat_0	set	4
 13230             00000008   nam_0	set	8
 13231             0000000C   skip_0	set	12
 13232             0000000E   inf_0	set	14
 13233                        	.block	3088
 13234                        ;	const TCHAR *pp, *np;
 13235                        ;	DWORD pc, nc;
 13236                        ;	int nm, nx;
 13237                        ;
  Mon Aug  9 2021 16:52                                                Page 254


 13238                        ;	while (skip--)
 13239             00000000   pp_1	set	0
 13240             00000004   np_1	set	4
 13241             00000008   pc_1	set	8
 13242             0000000C   nc_1	set	12
 13243             00000010   nm_1	set	16
 13244             00000012   nx_1	set	18
 13245                        	.sym	pp,0,142,1,32
 13246                        	.sym	np,4,142,1,32
 13247                        	.sym	pc,8,18,1,32
 13248                        	.sym	nc,12,18,1,32
 13249                        	.sym	nm,16,5,1,16
 13250                        	.sym	nx,18,5,1,16
 13251                        	.sym	pat,4,142,6,32
 13252                        	.sym	nam,8,142,6,32
 13253                        	.sym	skip,12,5,6,16
 13254                        	.sym	inf,14,5,6,16
 13255                        	.line	3093
 13256                        L10269:
 13257 08:3082: A5 24        	lda	<L526+skip_0
 13258 08:3084: 85 01        	sta	<R0
 13259 08:3086: C6 24        	dec	<L526+skip_0
 13260 08:3088: A5 01        	lda	<R0
 13261 08:308A: D0 03        	bne	L529
 13262 08:308C: 82 32 00     	brl	L10270
 13263                        L529:
 13264                        ;	{ /* Pre-skip name chars */
 13265                        	.line	3094
 13266                        ;		if (!get_achar(&nam)) return 0; /* Branc
                    h mismatched if less name chars */
 13267                        	.line	3095
 13268 08:308F: F4 00 00     	pea	#0
 13269 08:3092: 18           	clc
 13270 08:3093: 7B           	tdc
 13271 08:3094: 69 20 00     	adc	#<L526+nam_0
 13272 08:3097: 48           	pha
 13273 08:3098: 22 2F 30 08  	jsl	~~get_achar
 13274 08:309C: 85 01        	sta	<R0
 13275 08:309E: 86 03        	stx	<R0+2
 13276 08:30A0: A5 01        	lda	<R0
 13277 08:30A2: 05 03        	ora	<R0+2
 13278 08:30A4: F0 03        	beq	L530
 13279 08:30A6: 82 15 00     	brl	L10271
 13280                        L530:
 13281                        	.line	3095
 13282 08:30A9: A9 00 00     	lda	#$0
 13283                        L531:
 13284 08:30AC: A8           	tay
 13285 08:30AD: A5 1A        	lda	<L526+2
 13286 08:30AF: 85 26        	sta	<L526+2+12
 13287 08:30B1: A5 19        	lda	<L526+1
 13288 08:30B3: 85 25        	sta	<L526+1+12
 13289 08:30B5: 2B           	pld
 13290 08:30B6: 3B           	tsc
 13291 08:30B7: 18           	clc
 13292 08:30B8: 69 24 00     	adc	#L526+12
 13293 08:30BB: 1B           	tcs
 13294 08:30BC: 98           	tya
  Mon Aug  9 2021 16:52                                                Page 255


 13295 08:30BD: 6B           	rtl
 13296                        ;	}
 13297                        L10271:
 13298                        	.line	3096
 13299 08:30BE: 82 C1 FF     	brl	L10269
 13300                        L10270:
 13301                        ;	if (*pat == 0 && inf) return 1; /* (short circui
                    t) */
 13302                        	.line	3097
 13303 08:30C1: A7 1C        	lda	[<L526+pat_0]
 13304 08:30C3: 29 FF 00     	and	#$ff
 13305 08:30C6: F0 03        	beq	L532
 13306 08:30C8: 82 0D 00     	brl	L10272
 13307                        L532:
 13308 08:30CB: A5 26        	lda	<L526+inf_0
 13309 08:30CD: D0 03        	bne	L533
 13310 08:30CF: 82 06 00     	brl	L10272
 13311                        L533:
 13312                        	.line	3097
 13313 08:30D2: A9 01 00     	lda	#$1
 13314 08:30D5: 82 D4 FF     	brl	L531
 13315                        ;
 13316                        ;	do
 13317                        L10272:
 13318                        	.line	3099
 13319                        L10275:
 13320                        ;	{
 13321                        	.line	3100
 13322                        ;		pp = pat; np = nam; /* Top of pattern an
                    d name to match */
 13323                        	.line	3101
 13324 08:30D8: A5 1C        	lda	<L526+pat_0
 13325 08:30DA: 85 05        	sta	<L527+pp_1
 13326 08:30DC: A5 1E        	lda	<L526+pat_0+2
 13327 08:30DE: 85 07        	sta	<L527+pp_1+2
 13328                        	.line	3101
 13329 08:30E0: A5 20        	lda	<L526+nam_0
 13330 08:30E2: 85 09        	sta	<L527+np_1
 13331 08:30E4: A5 22        	lda	<L526+nam_0+2
 13332 08:30E6: 85 0B        	sta	<L527+np_1+2
 13333                        ;		for (;;)
 13334                        	.line	3102
 13335                        L10278:
 13336                        ;		{
 13337                        	.line	3103
 13338                        ;			if (*pp == '?' || *pp == '*')
 13339                        	.line	3104
 13340                        ;			{ /* Wildcard? */
 13341 08:30E8: E2 20        	sep	#$20
 13342                        	longa	off
 13343 08:30EA: A7 05        	lda	[<L527+pp_1]
 13344 08:30EC: C9 3F        	cmp	#<$3f
 13345 08:30EE: C2 20        	rep	#$20
 13346                        	longa	on
 13347 08:30F0: D0 03        	bne	L535
 13348 08:30F2: 82 0D 00     	brl	L534
 13349                        L535:
 13350 08:30F5: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 256


 13351                        	longa	off
 13352 08:30F7: A7 05        	lda	[<L527+pp_1]
 13353 08:30F9: C9 2A        	cmp	#<$2a
 13354 08:30FB: C2 20        	rep	#$20
 13355                        	longa	on
 13356 08:30FD: F0 03        	beq	L536
 13357 08:30FF: 82 6B 00     	brl	L10279
 13358                        L536:
 13359                        L534:
 13360                        	.line	3105
 13361                        ;				nm = nx = 0;
 13362                        	.line	3106
 13363 08:3102: 64 17        	stz	<L527+nx_1
 13364 08:3104: 64 15        	stz	<L527+nm_1
 13365                        ;				do
 13366                        	.line	3107
 13367                        L10282:
 13368                        ;				{ /* Analyze the wildcar
                    d block */
 13369                        	.line	3108
 13370                        ;					if (*pp++ == '?'
                    ) nm++;
 13371                        	.line	3109
 13372 08:3106: A5 05        	lda	<L527+pp_1
 13373 08:3108: 85 01        	sta	<R0
 13374 08:310A: A5 07        	lda	<L527+pp_1+2
 13375 08:310C: 85 03        	sta	<R0+2
 13376 08:310E: E6 05        	inc	<L527+pp_1
 13377 08:3110: D0 02        	bne	L537
 13378 08:3112: E6 07        	inc	<L527+pp_1+2
 13379                        L537:
 13380 08:3114: E2 20        	sep	#$20
 13381                        	longa	off
 13382 08:3116: A7 01        	lda	[<R0]
 13383 08:3118: C9 3F        	cmp	#<$3f
 13384 08:311A: C2 20        	rep	#$20
 13385                        	longa	on
 13386 08:311C: F0 03        	beq	L538
 13387 08:311E: 82 05 00     	brl	L10283
 13388                        L538:
 13389                        	.line	3109
 13390 08:3121: E6 15        	inc	<L527+nm_1
 13391                        ;					else nx = 1;
 13392 08:3123: 82 05 00     	brl	L10284
 13393                        L10283:
 13394                        	.line	3110
 13395 08:3126: A9 01 00     	lda	#$1
 13396 08:3129: 85 17        	sta	<L527+nx_1
 13397                        L10284:
 13398                        ;				}while (*pp == '?' || *p
                    p == '*');
 13399                        	.line	3111
 13400                        L10280:
 13401 08:312B: E2 20        	sep	#$20
 13402                        	longa	off
 13403 08:312D: A7 05        	lda	[<L527+pp_1]
 13404 08:312F: C9 3F        	cmp	#<$3f
 13405 08:3131: C2 20        	rep	#$20
  Mon Aug  9 2021 16:52                                                Page 257


 13406                        	longa	on
 13407 08:3133: D0 03        	bne	L539
 13408 08:3135: 82 CE FF     	brl	L10282
 13409                        L539:
 13410 08:3138: E2 20        	sep	#$20
 13411                        	longa	off
 13412 08:313A: A7 05        	lda	[<L527+pp_1]
 13413 08:313C: C9 2A        	cmp	#<$2a
 13414 08:313E: C2 20        	rep	#$20
 13415                        	longa	on
 13416 08:3140: D0 03        	bne	L540
 13417 08:3142: 82 C1 FF     	brl	L10282
 13418                        L540:
 13419                        L10281:
 13420                        ;				if (pattern_matching(pp,
                     np, nm, nx)) return 1; /* Test new branch (recurs upto numb
                    er of wildcard blocks in the pattern) */
 13421                        	.line	3112
 13422 08:3145: D4 17        	pei	<L527+nx_1
 13423 08:3147: D4 15        	pei	<L527+nm_1
 13424 08:3149: D4 0B        	pei	<L527+np_1+2
 13425 08:314B: D4 09        	pei	<L527+np_1
 13426 08:314D: D4 07        	pei	<L527+pp_1+2
 13427 08:314F: D4 05        	pei	<L527+pp_1
 13428 08:3151: 22 7A 30 08  	jsl	~~pattern_matching
 13429 08:3155: AA           	tax
 13430 08:3156: D0 03        	bne	L541
 13431 08:3158: 82 06 00     	brl	L10285
 13432                        L541:
 13433                        	.line	3112
 13434 08:315B: A9 01 00     	lda	#$1
 13435 08:315E: 82 4B FF     	brl	L531
 13436                        ;				nc = *np; break; /* Bran
                    ch mismatched */
 13437                        L10285:
 13438                        	.line	3113
 13439 08:3161: A7 09        	lda	[<L527+np_1]
 13440 08:3163: 29 FF 00     	and	#$ff
 13441 08:3166: 85 11        	sta	<L527+nc_1
 13442 08:3168: 64 13        	stz	<L527+nc_1+2
 13443                        	.line	3113
 13444 08:316A: 82 43 00     	brl	L10277
 13445                        ;			}
 13446                        	.line	3114
 13447                        ;			pc = get_achar(&pp); /* Get a pa
                    ttern char */
 13448                        L10279:
 13449                        	.line	3115
 13450 08:316D: F4 00 00     	pea	#0
 13451 08:3170: 18           	clc
 13452 08:3171: 7B           	tdc
 13453 08:3172: 69 05 00     	adc	#<L527+pp_1
 13454 08:3175: 48           	pha
 13455 08:3176: 22 2F 30 08  	jsl	~~get_achar
 13456 08:317A: 85 0D        	sta	<L527+pc_1
 13457 08:317C: 86 0F        	stx	<L527+pc_1+2
 13458                        ;			nc = get_achar(&np); /* Get a na
                    me char */
  Mon Aug  9 2021 16:52                                                Page 258


 13459                        	.line	3116
 13460 08:317E: F4 00 00     	pea	#0
 13461 08:3181: 18           	clc
 13462 08:3182: 7B           	tdc
 13463 08:3183: 69 09 00     	adc	#<L527+np_1
 13464 08:3186: 48           	pha
 13465 08:3187: 22 2F 30 08  	jsl	~~get_achar
 13466 08:318B: 85 11        	sta	<L527+nc_1
 13467 08:318D: 86 13        	stx	<L527+nc_1+2
 13468                        ;			if (pc != nc) break; /* Branch m
                    ismatched? */
 13469                        	.line	3117
 13470 08:318F: A5 0D        	lda	<L527+pc_1
 13471 08:3191: C5 11        	cmp	<L527+nc_1
 13472 08:3193: D0 04        	bne	L542
 13473 08:3195: A5 0F        	lda	<L527+pc_1+2
 13474 08:3197: C5 13        	cmp	<L527+nc_1+2
 13475                        L542:
 13476 08:3199: F0 03        	beq	L543
 13477 08:319B: 82 12 00     	brl	L10277
 13478                        L543:
 13479                        ;			if (pc == 0) return 1; /* Branch
                     matched? (matched at end of both strings) */
 13480                        	.line	3118
 13481 08:319E: A5 0D        	lda	<L527+pc_1
 13482 08:31A0: 05 0F        	ora	<L527+pc_1+2
 13483 08:31A2: F0 03        	beq	L544
 13484 08:31A4: 82 06 00     	brl	L10286
 13485                        L544:
 13486                        	.line	3118
 13487 08:31A7: A9 01 00     	lda	#$1
 13488 08:31AA: 82 FF FE     	brl	L531
 13489                        ;		}
 13490                        L10286:
 13491                        	.line	3119
 13492                        L10276:
 13493 08:31AD: 82 38 FF     	brl	L10278
 13494                        L10277:
 13495                        ;		get_achar(&nam); /* nam++ */
 13496                        	.line	3120
 13497 08:31B0: F4 00 00     	pea	#0
 13498 08:31B3: 18           	clc
 13499 08:31B4: 7B           	tdc
 13500 08:31B5: 69 20 00     	adc	#<L526+nam_0
 13501 08:31B8: 48           	pha
 13502 08:31B9: 22 2F 30 08  	jsl	~~get_achar
 13503                        ;	}while (inf && nc); /* Retry until end of name i
                    f infinite search is specified */
 13504                        	.line	3121
 13505                        L10273:
 13506 08:31BD: A5 26        	lda	<L526+inf_0
 13507 08:31BF: D0 03        	bne	L546
 13508 08:31C1: 82 09 00     	brl	L545
 13509                        L546:
 13510 08:31C4: A5 11        	lda	<L527+nc_1
 13511 08:31C6: 05 13        	ora	<L527+nc_1+2
 13512 08:31C8: F0 03        	beq	L547
 13513 08:31CA: 82 0B FF     	brl	L10275
  Mon Aug  9 2021 16:52                                                Page 259


 13514                        L547:
 13515                        L545:
 13516                        L10274:
 13517                        ;
 13518                        ;	return 0;
 13519                        	.line	3123
 13520 08:31CD: A9 00 00     	lda	#$0
 13521 08:31D0: 82 D9 FE     	brl	L531
 13522                        ;}
 13523                        	.line	3124
 13524                        	.endblock	3124
 13525             00000018   L526	equ	24
 13526             00000005   L527	equ	5
 13527 08:31D3:              	ends
 13528                        	efunc
 13529                        	.endfunc	3124,5,24
 13530                        	.line	3124
 13531                        ;
 13532                        ;#endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
 13533                        ;
 13534                        ;/*-----------------------------------------------
                    ------------------------*/
 13535                        ;/* Pick a top segment and create the object name 
                    in directory form       */
 13536                        ;/*-----------------------------------------------
                    ------------------------*/
 13537                        ;
 13538                        ;static FRESULT create_name( /* FR_OK: successful,
                     FR_INVALID_NAME: could not create */
 13539                        ;DIR* dp, /* Pointer to the directory object */
 13540                        ;const TCHAR** path /* Pointer to pointer to the s
                    egment in the path string */
 13541                        ;)
 13542                        ;{
 13543                        	.line	3132
 13544                        	.line	3136
 13545                        	FFDOS
 13546                        	func
 13547                        	.function	3136
 13548                        ~~create_name:
 13549                        	longa	on
 13550                        	longi	on
 13551 08:31D3: 3B           	tsc
 13552 08:31D4: 38           	sec
 13553 08:31D5: E9 24 00     	sbc	#L548
 13554 08:31D8: 1B           	tcs
 13555 08:31D9: 0B           	phd
 13556 08:31DA: 5B           	tcd
 13557             00000004   dp_0	set	4
 13558             00000008   path_0	set	8
 13559                        	.block	3136
 13560                        ;#if FF_USE_LFN		/* LFN configuration */
 13561                        ;	BYTE b, cf;
 13562                        ;	WCHAR wc, *lfn;
 13563                        ;	DWORD uc;
 13564                        ;	UINT i, ni, si, di;
 13565                        ;	const TCHAR *p;
 13566                        ;
  Mon Aug  9 2021 16:52                                                Page 260


 13567                        ;	/* Create LFN into LFN working buffer */
 13568                        ;	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 13569             00000000   b_1	set	0
 13570             00000001   cf_1	set	1
 13571             00000002   wc_1	set	2
 13572             00000004   lfn_1	set	4
 13573             00000008   uc_1	set	8
 13574             0000000C   i_1	set	12
 13575             0000000E   ni_1	set	14
 13576             00000010   si_1	set	16
 13577             00000012   di_1	set	18
 13578             00000014   p_1	set	20
 13579                        	.sym	b,0,14,1,8
 13580                        	.sym	cf,1,14,1,8
 13581                        	.sym	wc,2,16,1,16
 13582                        	.sym	lfn,4,144,1,32
 13583                        	.sym	uc,8,18,1,32
 13584                        	.sym	i,12,16,1,16
 13585                        	.sym	ni,14,16,1,16
 13586                        	.sym	si,16,16,1,16
 13587                        	.sym	di,18,16,1,16
 13588                        	.sym	p,20,142,1,32
 13589                        	.sym	dp,4,138,6,32,78
 13590                        	.sym	path,8,1166,6,32
 13591                        	.line	3145
 13592 08:31DB: A7 2C        	lda	[<L548+path_0]
 13593 08:31DD: 85 21        	sta	<L549+p_1
 13594 08:31DF: A0 02 00     	ldy	#$2
 13595 08:31E2: B7 2C        	lda	[<L548+path_0],Y
 13596 08:31E4: 85 23        	sta	<L549+p_1+2
 13597                        	.line	3145
 13598 08:31E6: A7 28        	lda	[<L548+dp_0]
 13599 08:31E8: 85 01        	sta	<R0
 13600 08:31EA: A0 02 00     	ldy	#$2
 13601 08:31ED: B7 28        	lda	[<L548+dp_0],Y
 13602 08:31EF: 85 03        	sta	<R0+2
 13603 08:31F1: A0 0B 00     	ldy	#$b
 13604 08:31F4: B7 01        	lda	[<R0],Y
 13605 08:31F6: 85 11        	sta	<L549+lfn_1
 13606 08:31F8: A0 0D 00     	ldy	#$d
 13607 08:31FB: B7 01        	lda	[<R0],Y
 13608 08:31FD: 85 13        	sta	<L549+lfn_1+2
 13609                        	.line	3145
 13610 08:31FF: 64 1F        	stz	<L549+di_1
 13611                        ;	for (;;)
 13612                        	.line	3146
 13613                        L10289:
 13614                        ;	{
 13615                        	.line	3147
 13616                        ;		uc = tchar2uni(&p); /* Get a character *
                    /
 13617                        	.line	3148
 13618 08:3201: F4 00 00     	pea	#0
 13619 08:3204: 18           	clc
 13620 08:3205: 7B           	tdc
 13621 08:3206: 69 21 00     	adc	#<L549+p_1
 13622 08:3209: 48           	pha
 13623 08:320A: 22 11 03 08  	jsl	~~tchar2uni
  Mon Aug  9 2021 16:52                                                Page 261


 13624 08:320E: 85 15        	sta	<L549+uc_1
 13625 08:3210: 86 17        	stx	<L549+uc_1+2
 13626                        ;		if (uc == 0xFFFFFFFF) return FR_INVALID_
                    NAME; /* Invalid code or UTF decode error */
 13627                        	.line	3149
 13628 08:3212: A5 15        	lda	<L549+uc_1
 13629 08:3214: C9 FF FF     	cmp	#<$ffffffff
 13630 08:3217: D0 05        	bne	L551
 13631 08:3219: A5 17        	lda	<L549+uc_1+2
 13632 08:321B: C9 FF FF     	cmp	#^$ffffffff
 13633                        L551:
 13634 08:321E: F0 03        	beq	L552
 13635 08:3220: 82 15 00     	brl	L10290
 13636                        L552:
 13637                        	.line	3149
 13638 08:3223: A9 06 00     	lda	#$6
 13639                        L553:
 13640 08:3226: A8           	tay
 13641 08:3227: A5 26        	lda	<L548+2
 13642 08:3229: 85 2E        	sta	<L548+2+8
 13643 08:322B: A5 25        	lda	<L548+1
 13644 08:322D: 85 2D        	sta	<L548+1+8
 13645 08:322F: 2B           	pld
 13646 08:3230: 3B           	tsc
 13647 08:3231: 18           	clc
 13648 08:3232: 69 2C 00     	adc	#L548+8
 13649 08:3235: 1B           	tcs
 13650 08:3236: 98           	tya
 13651 08:3237: 6B           	rtl
 13652                        ;		if (uc >= 0x10000) lfn[di++] = (WCHAR)(u
                    c >> 16); /* Store high surrogate if needed */
 13653                        L10290:
 13654                        	.line	3150
 13655 08:3238: A5 15        	lda	<L549+uc_1
 13656 08:323A: C9 00 00     	cmp	#<$10000
 13657 08:323D: A5 17        	lda	<L549+uc_1+2
 13658 08:323F: E9 01 00     	sbc	#^$10000
 13659 08:3242: B0 03        	bcs	L554
 13660 08:3244: 82 37 00     	brl	L10291
 13661                        L554:
 13662                        	.line	3150
 13663 08:3247: A5 1F        	lda	<L549+di_1
 13664 08:3249: 85 05        	sta	<R1
 13665 08:324B: 64 07        	stz	<R1+2
 13666 08:324D: D4 07        	pei	<R1+2
 13667 08:324F: D4 05        	pei	<R1
 13668 08:3251: A9 01 00     	lda	#$1
 13669                        	xref	~~~lasl
 13670 08:3254: 22 xx xx xx  	jsl	~~~lasl
 13671 08:3258: 85 01        	sta	<R0
 13672 08:325A: 86 03        	stx	<R0+2
 13673 08:325C: 18           	clc
 13674 08:325D: A5 11        	lda	<L549+lfn_1
 13675 08:325F: 65 01        	adc	<R0
 13676 08:3261: 85 09        	sta	<R2
 13677 08:3263: A5 13        	lda	<L549+lfn_1+2
 13678 08:3265: 65 03        	adc	<R0+2
 13679 08:3267: 85 0B        	sta	<R2+2
  Mon Aug  9 2021 16:52                                                Page 262


 13680 08:3269: D4 17        	pei	<L549+uc_1+2
 13681 08:326B: D4 15        	pei	<L549+uc_1
 13682 08:326D: A9 10 00     	lda	#$10
 13683                        	xref	~~~llsr
 13684 08:3270: 22 xx xx xx  	jsl	~~~llsr
 13685 08:3274: 85 01        	sta	<R0
 13686 08:3276: 86 03        	stx	<R0+2
 13687 08:3278: A5 01        	lda	<R0
 13688 08:327A: 87 09        	sta	[<R2]
 13689 08:327C: E6 1F        	inc	<L549+di_1
 13690                        ;		wc = (WCHAR)uc;
 13691                        L10291:
 13692                        	.line	3151
 13693 08:327E: A5 15        	lda	<L549+uc_1
 13694 08:3280: 85 0F        	sta	<L549+wc_1
 13695                        ;		if (wc < ' ' || wc == '/' || wc == '\\')
                     break; /* Break if end of the path or a separator is found 
                    */
 13696                        	.line	3152
 13697 08:3282: A5 0F        	lda	<L549+wc_1
 13698 08:3284: C9 20 00     	cmp	#<$20
 13699 08:3287: B0 03        	bcs	L555
 13700 08:3289: 82 71 00     	brl	L10288
 13701                        L555:
 13702 08:328C: A5 0F        	lda	<L549+wc_1
 13703 08:328E: C9 2F 00     	cmp	#<$2f
 13704 08:3291: D0 03        	bne	L556
 13705 08:3293: 82 67 00     	brl	L10288
 13706                        L556:
 13707 08:3296: A5 0F        	lda	<L549+wc_1
 13708 08:3298: C9 5C 00     	cmp	#<$5c
 13709 08:329B: D0 03        	bne	L557
 13710 08:329D: 82 5D 00     	brl	L10288
 13711                        L557:
 13712                        ;		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F"
                    , wc)) return FR_INVALID_NAME; /* Reject illegal characters 
                    for LFN */
 13713                        	.line	3153
 13714 08:32A0: A5 0F        	lda	<L549+wc_1
 13715 08:32A2: C9 80 00     	cmp	#<$80
 13716 08:32A5: 90 03        	bcc	L558
 13717 08:32A7: 82 18 00     	brl	L10292
 13718                        L558:
 13719 08:32AA: D4 0F        	pei	<L549+wc_1
 13720 08:32AC: F4 xx xx     	pea	#^L2
 13721 08:32AF: F4 xx xx     	pea	#<L2
 13722 08:32B2: 22 75 02 08  	jsl	~~chk_chr
 13723 08:32B6: AA           	tax
 13724 08:32B7: D0 03        	bne	L559
 13725 08:32B9: 82 06 00     	brl	L10292
 13726                        L559:
 13727                        	.line	3153
 13728 08:32BC: A9 06 00     	lda	#$6
 13729 08:32BF: 82 64 FF     	brl	L553
 13730                        ;		if (di >= FF_MAX_LFN) return FR_INVALID_
                    NAME; /* Reject too long name */
 13731                        L10292:
 13732                        	.line	3154
  Mon Aug  9 2021 16:52                                                Page 263


 13733 08:32C2: A5 1F        	lda	<L549+di_1
 13734 08:32C4: C9 FF 00     	cmp	#<$ff
 13735 08:32C7: B0 03        	bcs	L560
 13736 08:32C9: 82 06 00     	brl	L10293
 13737                        L560:
 13738                        	.line	3154
 13739 08:32CC: A9 06 00     	lda	#$6
 13740 08:32CF: 82 54 FF     	brl	L553
 13741                        ;		lfn[di++] = wc; /* Store the Unicode cha
                    racter */
 13742                        L10293:
 13743                        	.line	3155
 13744 08:32D2: A5 1F        	lda	<L549+di_1
 13745 08:32D4: 85 05        	sta	<R1
 13746 08:32D6: 64 07        	stz	<R1+2
 13747 08:32D8: D4 07        	pei	<R1+2
 13748 08:32DA: D4 05        	pei	<R1
 13749 08:32DC: A9 01 00     	lda	#$1
 13750                        	xref	~~~lasl
 13751 08:32DF: 22 xx xx xx  	jsl	~~~lasl
 13752 08:32E3: 85 01        	sta	<R0
 13753 08:32E5: 86 03        	stx	<R0+2
 13754 08:32E7: 18           	clc
 13755 08:32E8: A5 11        	lda	<L549+lfn_1
 13756 08:32EA: 65 01        	adc	<R0
 13757 08:32EC: 85 09        	sta	<R2
 13758 08:32EE: A5 13        	lda	<L549+lfn_1+2
 13759 08:32F0: 65 03        	adc	<R0+2
 13760 08:32F2: 85 0B        	sta	<R2+2
 13761 08:32F4: A5 0F        	lda	<L549+wc_1
 13762 08:32F6: 87 09        	sta	[<R2]
 13763 08:32F8: E6 1F        	inc	<L549+di_1
 13764                        ;	}
 13765                        	.line	3156
 13766                        L10287:
 13767 08:32FA: 82 04 FF     	brl	L10289
 13768                        L10288:
 13769                        ;	if (wc < ' ')
 13770                        	.line	3157
 13771                        ;	{ /* End of path? */
 13772 08:32FD: A5 0F        	lda	<L549+wc_1
 13773 08:32FF: C9 20 00     	cmp	#<$20
 13774 08:3302: 90 03        	bcc	L561
 13775 08:3304: 82 0B 00     	brl	L10294
 13776                        L561:
 13777                        	.line	3158
 13778                        ;		cf = NS_LAST; /* Set last segment flag *
                    /
 13779                        	.line	3159
 13780 08:3307: E2 20        	sep	#$20
 13781                        	longa	off
 13782 08:3309: A9 04        	lda	#$4
 13783 08:330B: 85 0E        	sta	<L549+cf_1
 13784 08:330D: C2 20        	rep	#$20
 13785                        	longa	on
 13786                        ;	}
 13787                        	.line	3160
 13788                        ;	else
  Mon Aug  9 2021 16:52                                                Page 264


 13789 08:330F: 82 29 00     	brl	L10295
 13790                        L10294:
 13791                        ;	{
 13792                        	.line	3162
 13793                        ;		cf = 0; /* Next segment follows */
 13794                        	.line	3163
 13795 08:3312: E2 20        	sep	#$20
 13796                        	longa	off
 13797 08:3314: 64 0E        	stz	<L549+cf_1
 13798 08:3316: C2 20        	rep	#$20
 13799                        	longa	on
 13800                        ;		while (*p == '/' || *p == '\\') p++; /* 
                    Skip duplicated separators if exist */
 13801                        	.line	3164
 13802                        L10296:
 13803 08:3318: E2 20        	sep	#$20
 13804                        	longa	off
 13805 08:331A: A7 21        	lda	[<L549+p_1]
 13806 08:331C: C9 2F        	cmp	#<$2f
 13807 08:331E: C2 20        	rep	#$20
 13808                        	longa	on
 13809 08:3320: D0 03        	bne	L563
 13810 08:3322: 82 0D 00     	brl	L562
 13811                        L563:
 13812 08:3325: E2 20        	sep	#$20
 13813                        	longa	off
 13814 08:3327: A7 21        	lda	[<L549+p_1]
 13815 08:3329: C9 5C        	cmp	#<$5c
 13816 08:332B: C2 20        	rep	#$20
 13817                        	longa	on
 13818 08:332D: F0 03        	beq	L564
 13819 08:332F: 82 09 00     	brl	L10297
 13820                        L564:
 13821                        L562:
 13822                        	.line	3164
 13823 08:3332: E6 21        	inc	<L549+p_1
 13824 08:3334: D0 02        	bne	L565
 13825 08:3336: E6 23        	inc	<L549+p_1+2
 13826                        L565:
 13827 08:3338: 82 DD FF     	brl	L10296
 13828                        L10297:
 13829                        ;	}
 13830                        	.line	3165
 13831                        L10295:
 13832                        ;	*path = p; /* Return pointer to the next segment
                     */
 13833                        	.line	3166
 13834 08:333B: A5 21        	lda	<L549+p_1
 13835 08:333D: 87 2C        	sta	[<L548+path_0]
 13836 08:333F: A5 23        	lda	<L549+p_1+2
 13837 08:3341: A0 02 00     	ldy	#$2
 13838 08:3344: 97 2C        	sta	[<L548+path_0],Y
 13839                        ;
 13840                        ;#if FF_FS_RPATH != 0
 13841                        ;	if ((di == 1 && lfn[di - 1] == '.') ||
 13842                        ;			(di == 2 && lfn[di - 1] == '.' &
                    & lfn[di - 2] == '.'))
 13843                        ;	{ /* Is this segment a dot name? */
  Mon Aug  9 2021 16:52                                                Page 265


 13844                        ;		lfn[di] = 0;
 13845                        ;		for (i = 0; i < 11; i++)
 13846                        ;		{ /* Create dot name for SFN entry */
 13847                        ;			dp->fn[i] = (i < di) ? '.' : ' '
                    ;
 13848                        ;		}
 13849                        ;		dp->fn[i] = cf | NS_DOT; /* This is a do
                    t entry */
 13850                        ;		return FR_OK;
 13851                        ;	}
 13852                        ;#endif
 13853                        ;	while (di)
 13854                        	.line	3181
 13855                        L10298:
 13856 08:3346: A5 1F        	lda	<L549+di_1
 13857 08:3348: D0 03        	bne	L566
 13858 08:334A: 82 47 00     	brl	L10299
 13859                        L566:
 13860                        ;	{ /* Snip off trailing spaces and dots if exist 
                    */
 13861                        	.line	3182
 13862                        ;		wc = lfn[di - 1];
 13863                        	.line	3183
 13864 08:334D: 18           	clc
 13865 08:334E: A9 FF FF     	lda	#$ffff
 13866 08:3351: 65 1F        	adc	<L549+di_1
 13867 08:3353: 85 05        	sta	<R1
 13868 08:3355: A5 05        	lda	<R1
 13869 08:3357: 85 05        	sta	<R1
 13870 08:3359: 64 07        	stz	<R1+2
 13871 08:335B: D4 07        	pei	<R1+2
 13872 08:335D: D4 05        	pei	<R1
 13873 08:335F: A9 01 00     	lda	#$1
 13874                        	xref	~~~lasl
 13875 08:3362: 22 xx xx xx  	jsl	~~~lasl
 13876 08:3366: 85 01        	sta	<R0
 13877 08:3368: 86 03        	stx	<R0+2
 13878 08:336A: 18           	clc
 13879 08:336B: A5 11        	lda	<L549+lfn_1
 13880 08:336D: 65 01        	adc	<R0
 13881 08:336F: 85 09        	sta	<R2
 13882 08:3371: A5 13        	lda	<L549+lfn_1+2
 13883 08:3373: 65 03        	adc	<R0+2
 13884 08:3375: 85 0B        	sta	<R2+2
 13885 08:3377: A7 09        	lda	[<R2]
 13886 08:3379: 85 0F        	sta	<L549+wc_1
 13887                        ;		if (wc != ' ' && wc != '.') break;
 13888                        	.line	3184
 13889 08:337B: A5 0F        	lda	<L549+wc_1
 13890 08:337D: C9 20 00     	cmp	#<$20
 13891 08:3380: D0 03        	bne	L568
 13892 08:3382: 82 0A 00     	brl	L567
 13893                        L568:
 13894 08:3385: A5 0F        	lda	<L549+wc_1
 13895 08:3387: C9 2E 00     	cmp	#<$2e
 13896 08:338A: F0 03        	beq	L569
 13897 08:338C: 82 05 00     	brl	L10299
 13898                        L569:
  Mon Aug  9 2021 16:52                                                Page 266


 13899                        L567:
 13900                        ;		di--;
 13901                        	.line	3185
 13902 08:338F: C6 1F        	dec	<L549+di_1
 13903                        ;	}
 13904                        	.line	3186
 13905 08:3391: 82 B2 FF     	brl	L10298
 13906                        L10299:
 13907                        ;	lfn[di] = 0; /* LFN is created into the working 
                    buffer */
 13908                        	.line	3187
 13909 08:3394: A5 1F        	lda	<L549+di_1
 13910 08:3396: 85 05        	sta	<R1
 13911 08:3398: 64 07        	stz	<R1+2
 13912 08:339A: D4 07        	pei	<R1+2
 13913 08:339C: D4 05        	pei	<R1
 13914 08:339E: A9 01 00     	lda	#$1
 13915                        	xref	~~~lasl
 13916 08:33A1: 22 xx xx xx  	jsl	~~~lasl
 13917 08:33A5: 85 01        	sta	<R0
 13918 08:33A7: 86 03        	stx	<R0+2
 13919 08:33A9: 18           	clc
 13920 08:33AA: A5 11        	lda	<L549+lfn_1
 13921 08:33AC: 65 01        	adc	<R0
 13922 08:33AE: 85 09        	sta	<R2
 13923 08:33B0: A5 13        	lda	<L549+lfn_1+2
 13924 08:33B2: 65 03        	adc	<R0+2
 13925 08:33B4: 85 0B        	sta	<R2+2
 13926 08:33B6: A9 00 00     	lda	#$0
 13927 08:33B9: 87 09        	sta	[<R2]
 13928                        ;	if (di == 0) return FR_INVALID_NAME; /* Reject n
                    ull name */
 13929                        	.line	3188
 13930 08:33BB: A5 1F        	lda	<L549+di_1
 13931 08:33BD: F0 03        	beq	L570
 13932 08:33BF: 82 06 00     	brl	L10300
 13933                        L570:
 13934                        	.line	3188
 13935 08:33C2: A9 06 00     	lda	#$6
 13936 08:33C5: 82 5E FE     	brl	L553
 13937                        ;
 13938                        ;	/* Create SFN in directory form */
 13939                        ;	for (si = 0; lfn[si] == ' '; si++); /* Remove le
                    ading spaces */
 13940                        L10300:
 13941                        	.line	3191
 13942 08:33C8: 64 1D        	stz	<L549+si_1
 13943 08:33CA: 82 02 00     	brl	L10304
 13944                        L10303:
 13945                        	.line	3191
 13946                        L10301:
 13947 08:33CD: E6 1D        	inc	<L549+si_1
 13948                        L10304:
 13949 08:33CF: A5 1D        	lda	<L549+si_1
 13950 08:33D1: 85 05        	sta	<R1
 13951 08:33D3: 64 07        	stz	<R1+2
 13952 08:33D5: D4 07        	pei	<R1+2
 13953 08:33D7: D4 05        	pei	<R1
  Mon Aug  9 2021 16:52                                                Page 267


 13954 08:33D9: A9 01 00     	lda	#$1
 13955                        	xref	~~~lasl
 13956 08:33DC: 22 xx xx xx  	jsl	~~~lasl
 13957 08:33E0: 85 01        	sta	<R0
 13958 08:33E2: 86 03        	stx	<R0+2
 13959 08:33E4: 18           	clc
 13960 08:33E5: A5 11        	lda	<L549+lfn_1
 13961 08:33E7: 65 01        	adc	<R0
 13962 08:33E9: 85 09        	sta	<R2
 13963 08:33EB: A5 13        	lda	<L549+lfn_1+2
 13964 08:33ED: 65 03        	adc	<R0+2
 13965 08:33EF: 85 0B        	sta	<R2+2
 13966 08:33F1: A7 09        	lda	[<R2]
 13967 08:33F3: C9 20 00     	cmp	#<$20
 13968 08:33F6: D0 03        	bne	L571
 13969 08:33F8: 82 D2 FF     	brl	L10303
 13970                        L571:
 13971                        L10302:
 13972                        ;	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS
                    _LFN; /* Is there any leading space or dot? */
 13973                        	.line	3192
 13974 08:33FB: A9 00 00     	lda	#$0
 13975 08:33FE: C5 1D        	cmp	<L549+si_1
 13976 08:3400: B0 03        	bcs	L573
 13977 08:3402: 82 2C 00     	brl	L572
 13978                        L573:
 13979 08:3405: A5 1D        	lda	<L549+si_1
 13980 08:3407: 85 05        	sta	<R1
 13981 08:3409: 64 07        	stz	<R1+2
 13982 08:340B: D4 07        	pei	<R1+2
 13983 08:340D: D4 05        	pei	<R1
 13984 08:340F: A9 01 00     	lda	#$1
 13985                        	xref	~~~lasl
 13986 08:3412: 22 xx xx xx  	jsl	~~~lasl
 13987 08:3416: 85 01        	sta	<R0
 13988 08:3418: 86 03        	stx	<R0+2
 13989 08:341A: 18           	clc
 13990 08:341B: A5 11        	lda	<L549+lfn_1
 13991 08:341D: 65 01        	adc	<R0
 13992 08:341F: 85 09        	sta	<R2
 13993 08:3421: A5 13        	lda	<L549+lfn_1+2
 13994 08:3423: 65 03        	adc	<R0+2
 13995 08:3425: 85 0B        	sta	<R2+2
 13996 08:3427: A7 09        	lda	[<R2]
 13997 08:3429: C9 2E 00     	cmp	#<$2e
 13998 08:342C: F0 03        	beq	L574
 13999 08:342E: 82 08 00     	brl	L10305
 14000                        L574:
 14001                        L572:
 14002                        	.line	3192
 14003 08:3431: E2 20        	sep	#$20
 14004                        	longa	off
 14005 08:3433: A9 03        	lda	#$3
 14006 08:3435: 04 0E        	tsb	<L549+cf_1
 14007 08:3437: C2 20        	rep	#$20
 14008                        	longa	on
 14009                        ;	while (di > 0 && lfn[di - 1] != '.') di--; /* Fi
                    nd last dot (di<=si: no extension) */
  Mon Aug  9 2021 16:52                                                Page 268


 14010                        L10305:
 14011                        	.line	3193
 14012                        L10306:
 14013 08:3439: A9 00 00     	lda	#$0
 14014 08:343C: C5 1F        	cmp	<L549+di_1
 14015 08:343E: 90 03        	bcc	L575
 14016 08:3440: 82 39 00     	brl	L10307
 14017                        L575:
 14018 08:3443: 18           	clc
 14019 08:3444: A9 FF FF     	lda	#$ffff
 14020 08:3447: 65 1F        	adc	<L549+di_1
 14021 08:3449: 85 05        	sta	<R1
 14022 08:344B: A5 05        	lda	<R1
 14023 08:344D: 85 05        	sta	<R1
 14024 08:344F: 64 07        	stz	<R1+2
 14025 08:3451: D4 07        	pei	<R1+2
 14026 08:3453: D4 05        	pei	<R1
 14027 08:3455: A9 01 00     	lda	#$1
 14028                        	xref	~~~lasl
 14029 08:3458: 22 xx xx xx  	jsl	~~~lasl
 14030 08:345C: 85 01        	sta	<R0
 14031 08:345E: 86 03        	stx	<R0+2
 14032 08:3460: 18           	clc
 14033 08:3461: A5 11        	lda	<L549+lfn_1
 14034 08:3463: 65 01        	adc	<R0
 14035 08:3465: 85 09        	sta	<R2
 14036 08:3467: A5 13        	lda	<L549+lfn_1+2
 14037 08:3469: 65 03        	adc	<R0+2
 14038 08:346B: 85 0B        	sta	<R2+2
 14039 08:346D: A7 09        	lda	[<R2]
 14040 08:346F: C9 2E 00     	cmp	#<$2e
 14041 08:3472: D0 03        	bne	L576
 14042 08:3474: 82 05 00     	brl	L10307
 14043                        L576:
 14044                        	.line	3193
 14045 08:3477: C6 1F        	dec	<L549+di_1
 14046 08:3479: 82 BD FF     	brl	L10306
 14047                        L10307:
 14048                        ;
 14049                        ;	mem_set(dp->fn, ' ', 11);
 14050                        	.line	3195
 14051 08:347C: F4 0B 00     	pea	#<$b
 14052 08:347F: F4 20 00     	pea	#<$20
 14053 08:3482: 18           	clc
 14054 08:3483: A9 20 00     	lda	#$20
 14055 08:3486: 65 28        	adc	<L548+dp_0
 14056 08:3488: 85 01        	sta	<R0
 14057 08:348A: A9 00 00     	lda	#$0
 14058 08:348D: 65 2A        	adc	<L548+dp_0+2
 14059 08:348F: 85 03        	sta	<R0+2
 14060 08:3491: D4 03        	pei	<R0+2
 14061 08:3493: D4 01        	pei	<R0
 14062 08:3495: 22 DF 01 08  	jsl	~~mem_set
 14063                        ;	i = b = 0; ni = 8;
 14064                        	.line	3196
 14065 08:3499: E2 20        	sep	#$20
 14066                        	longa	off
 14067 08:349B: 64 0D        	stz	<L549+b_1
  Mon Aug  9 2021 16:52                                                Page 269


 14068 08:349D: C2 20        	rep	#$20
 14069                        	longa	on
 14070 08:349F: A9 00 00     	lda	#$0
 14071 08:34A2: 29 FF 00     	and	#$ff
 14072 08:34A5: 85 19        	sta	<L549+i_1
 14073                        	.line	3196
 14074 08:34A7: A9 08 00     	lda	#$8
 14075 08:34AA: 85 1B        	sta	<L549+ni_1
 14076                        ;	for (;;)
 14077                        	.line	3197
 14078                        L10310:
 14079                        ;	{
 14080                        	.line	3198
 14081                        ;		wc = lfn[si++]; /* Get an LFN character 
                    */
 14082                        	.line	3199
 14083 08:34AC: A5 1D        	lda	<L549+si_1
 14084 08:34AE: 85 05        	sta	<R1
 14085 08:34B0: 64 07        	stz	<R1+2
 14086 08:34B2: D4 07        	pei	<R1+2
 14087 08:34B4: D4 05        	pei	<R1
 14088 08:34B6: A9 01 00     	lda	#$1
 14089                        	xref	~~~lasl
 14090 08:34B9: 22 xx xx xx  	jsl	~~~lasl
 14091 08:34BD: 85 01        	sta	<R0
 14092 08:34BF: 86 03        	stx	<R0+2
 14093 08:34C1: 18           	clc
 14094 08:34C2: A5 11        	lda	<L549+lfn_1
 14095 08:34C4: 65 01        	adc	<R0
 14096 08:34C6: 85 09        	sta	<R2
 14097 08:34C8: A5 13        	lda	<L549+lfn_1+2
 14098 08:34CA: 65 03        	adc	<R0+2
 14099 08:34CC: 85 0B        	sta	<R2+2
 14100 08:34CE: A7 09        	lda	[<R2]
 14101 08:34D0: 85 0F        	sta	<L549+wc_1
 14102 08:34D2: E6 1D        	inc	<L549+si_1
 14103                        ;		if (wc == 0) break; /* Break on end of t
                    he LFN */
 14104                        	.line	3200
 14105 08:34D4: A5 0F        	lda	<L549+wc_1
 14106 08:34D6: D0 03        	bne	L577
 14107 08:34D8: 82 87 01     	brl	L10309
 14108                        L577:
 14109                        ;		if (wc == ' ' || (wc == '.' && si != di)
                    )
 14110                        	.line	3201
 14111                        ;		{ /* Remove embedded spaces and dots */
 14112 08:34DB: A5 0F        	lda	<L549+wc_1
 14113 08:34DD: C9 20 00     	cmp	#<$20
 14114 08:34E0: D0 03        	bne	L579
 14115 08:34E2: 82 13 00     	brl	L578
 14116                        L579:
 14117 08:34E5: A5 0F        	lda	<L549+wc_1
 14118 08:34E7: C9 2E 00     	cmp	#<$2e
 14119 08:34EA: F0 03        	beq	L580
 14120 08:34EC: 82 14 00     	brl	L10311
 14121                        L580:
 14122 08:34EF: A5 1D        	lda	<L549+si_1
  Mon Aug  9 2021 16:52                                                Page 270


 14123 08:34F1: C5 1F        	cmp	<L549+di_1
 14124 08:34F3: D0 03        	bne	L581
 14125 08:34F5: 82 0B 00     	brl	L10311
 14126                        L581:
 14127                        L578:
 14128                        	.line	3202
 14129                        ;			cf |= NS_LOSS | NS_LFN;
 14130                        	.line	3203
 14131 08:34F8: E2 20        	sep	#$20
 14132                        	longa	off
 14133 08:34FA: A9 03        	lda	#$3
 14134 08:34FC: 04 0E        	tsb	<L549+cf_1
 14135 08:34FE: C2 20        	rep	#$20
 14136                        	longa	on
 14137                        ;			continue;
 14138                        	.line	3204
 14139 08:3500: 82 5C 01     	brl	L10308
 14140                        ;		}
 14141                        	.line	3205
 14142                        ;
 14143                        ;		if (i >= ni || si == di)
 14144                        L10311:
 14145                        	.line	3207
 14146                        ;		{ /* End of field? */
 14147 08:3503: A5 19        	lda	<L549+i_1
 14148 08:3505: C5 1B        	cmp	<L549+ni_1
 14149 08:3507: 90 03        	bcc	L583
 14150 08:3509: 82 09 00     	brl	L582
 14151                        L583:
 14152 08:350C: A5 1D        	lda	<L549+si_1
 14153 08:350E: C5 1F        	cmp	<L549+di_1
 14154 08:3510: F0 03        	beq	L584
 14155 08:3512: 82 48 00     	brl	L10312
 14156                        L584:
 14157                        L582:
 14158                        	.line	3208
 14159                        ;			if (ni == 11)
 14160                        	.line	3209
 14161                        ;			{ /* Name extension overflow? */
 14162 08:3515: A5 1B        	lda	<L549+ni_1
 14163 08:3517: C9 0B 00     	cmp	#<$b
 14164 08:351A: F0 03        	beq	L585
 14165 08:351C: 82 0B 00     	brl	L10313
 14166                        L585:
 14167                        	.line	3210
 14168                        ;				cf |= NS_LOSS | NS_LFN;
 14169                        	.line	3211
 14170 08:351F: E2 20        	sep	#$20
 14171                        	longa	off
 14172 08:3521: A9 03        	lda	#$3
 14173 08:3523: 04 0E        	tsb	<L549+cf_1
 14174 08:3525: C2 20        	rep	#$20
 14175                        	longa	on
 14176                        ;				break;
 14177                        	.line	3212
 14178 08:3527: 82 38 01     	brl	L10309
 14179                        ;			}
 14180                        	.line	3213
  Mon Aug  9 2021 16:52                                                Page 271


 14181                        ;			if (si != di) cf |= NS_LOSS | NS
                    _LFN; /* Name body overflow? */
 14182                        L10313:
 14183                        	.line	3214
 14184 08:352A: A5 1D        	lda	<L549+si_1
 14185 08:352C: C5 1F        	cmp	<L549+di_1
 14186 08:352E: D0 03        	bne	L586
 14187 08:3530: 82 08 00     	brl	L10314
 14188                        L586:
 14189                        	.line	3214
 14190 08:3533: E2 20        	sep	#$20
 14191                        	longa	off
 14192 08:3535: A9 03        	lda	#$3
 14193 08:3537: 04 0E        	tsb	<L549+cf_1
 14194 08:3539: C2 20        	rep	#$20
 14195                        	longa	on
 14196                        ;			if (si > di) break; /* No name e
                    xtension? */
 14197                        L10314:
 14198                        	.line	3215
 14199 08:353B: A5 1F        	lda	<L549+di_1
 14200 08:353D: C5 1D        	cmp	<L549+si_1
 14201 08:353F: B0 03        	bcs	L587
 14202 08:3541: 82 1E 01     	brl	L10309
 14203                        L587:
 14204                        ;			si = di; i = 8; ni = 11; b <<= 2
                    ; /* Enter name extension */
 14205                        	.line	3216
 14206 08:3544: A5 1F        	lda	<L549+di_1
 14207 08:3546: 85 1D        	sta	<L549+si_1
 14208                        	.line	3216
 14209 08:3548: A9 08 00     	lda	#$8
 14210 08:354B: 85 19        	sta	<L549+i_1
 14211                        	.line	3216
 14212 08:354D: A9 0B 00     	lda	#$b
 14213 08:3550: 85 1B        	sta	<L549+ni_1
 14214                        	.line	3216
 14215 08:3552: E2 20        	sep	#$20
 14216                        	longa	off
 14217 08:3554: 06 0D        	asl	<L549+b_1
 14218 08:3556: 06 0D        	asl	<L549+b_1
 14219 08:3558: C2 20        	rep	#$20
 14220                        	longa	on
 14221                        ;			continue;
 14222                        	.line	3217
 14223 08:355A: 82 02 01     	brl	L10308
 14224                        ;		}
 14225                        	.line	3218
 14226                        ;
 14227                        ;		if (wc >= 0x80)
 14228                        L10312:
 14229                        	.line	3220
 14230                        ;		{ /* Is this a non-ASCII character? */
 14231 08:355D: A5 0F        	lda	<L549+wc_1
 14232 08:355F: C9 80 00     	cmp	#<$80
 14233 08:3562: B0 03        	bcs	L588
 14234 08:3564: 82 36 00     	brl	L10315
 14235                        L588:
  Mon Aug  9 2021 16:52                                                Page 272


 14236                        	.line	3221
 14237                        ;			cf |= NS_LFN; /* LFN entry needs
                     to be created */
 14238                        	.line	3222
 14239 08:3567: E2 20        	sep	#$20
 14240                        	longa	off
 14241 08:3569: A9 02        	lda	#$2
 14242 08:356B: 04 0E        	tsb	<L549+cf_1
 14243 08:356D: C2 20        	rep	#$20
 14244                        	longa	on
 14245                        ;#if FF_CODE_PAGE == 0
 14246                        ;			if (ExCvt)
 14247                        ;			{ /* At SBCS */
 14248                        ;				wc = ff_uni2oem(wc, CODE
                    PAGE); /* Unicode ==> ANSI/OEM code */
 14249                        ;				if (wc & 0x80) wc = ExCv
                    t[wc & 0x7F]; /* Convert extended character to upper (SBCS) 
                    */
 14250                        ;			}
 14251                        ;			else
 14252                        ;			{ /* At DBCS */
 14253                        ;				wc = ff_uni2oem(ff_wtoup
                    per(wc), CODEPAGE); /* Unicode ==> Upper convert ==> ANSI/OE
                    M code */
 14254                        ;			}
 14255                        ;#elif FF_CODE_PAGE < 900	/* SBCS cfg */
 14256                        ;			wc = ff_uni2oem(wc, CODEPAGE); /
                    * Unicode ==> ANSI/OEM code */
 14257                        	.line	3234
 14258 08:356F: F4 B5 01     	pea	#<$1b5
 14259 08:3572: A5 0F        	lda	<L549+wc_1
 14260 08:3574: 85 01        	sta	<R0
 14261 08:3576: 64 03        	stz	<R0+2
 14262 08:3578: D4 03        	pei	<R0+2
 14263 08:357A: D4 01        	pei	<R0
 14264 08:357C: 22 06 92 08  	jsl	~~ff_uni2oem
 14265 08:3580: 85 0F        	sta	<L549+wc_1
 14266                        ;			if (wc & 0x80) wc = ExCvt[wc & 0
                    x7F]; /* Convert extended character to upper (SBCS) */
 14267                        	.line	3235
 14268 08:3582: A5 0F        	lda	<L549+wc_1
 14269 08:3584: 29 80 00     	and	#<$80
 14270 08:3587: D0 03        	bne	L589
 14271 08:3589: 82 11 00     	brl	L10316
 14272                        L589:
 14273                        	.line	3235
 14274 08:358C: A5 0F        	lda	<L549+wc_1
 14275 08:358E: 29 7F 00     	and	#<$7f
 14276 08:3591: 85 01        	sta	<R0
 14277 08:3593: A6 01        	ldx	<R0
 14278 08:3595: BD xx xx     	lda	|~~ExCvt,X
 14279 08:3598: 29 FF 00     	and	#$ff
 14280 08:359B: 85 0F        	sta	<L549+wc_1
 14281                        ;#else						
                    /* DBCS cfg */
 14282                        ;			wc = ff_uni2oem(ff_wtoupper(wc),
                     CODEPAGE); /* Unicode ==> Upper convert ==> ANSI/OEM code *
                    /
  Mon Aug  9 2021 16:52                                                Page 273


 14283                        ;#endif
 14284                        ;		}
 14285                        L10316:
 14286                        	.line	3239
 14287                        ;
 14288                        ;		if (wc >= 0x100)
 14289                        L10315:
 14290                        	.line	3241
 14291                        ;		{ /* Is this a DBC? */
 14292 08:359D: A5 0F        	lda	<L549+wc_1
 14293 08:359F: C9 00 01     	cmp	#<$100
 14294 08:35A2: B0 03        	bcs	L590
 14295 08:35A4: 82 3B 00     	brl	L10317
 14296                        L590:
 14297                        	.line	3242
 14298                        ;			if (i >= ni - 1)
 14299                        	.line	3243
 14300                        ;			{ /* Field overflow? */
 14301 08:35A7: 18           	clc
 14302 08:35A8: A9 FF FF     	lda	#$ffff
 14303 08:35AB: 65 1B        	adc	<L549+ni_1
 14304 08:35AD: 85 01        	sta	<R0
 14305 08:35AF: A5 19        	lda	<L549+i_1
 14306 08:35B1: C5 01        	cmp	<R0
 14307 08:35B3: B0 03        	bcs	L591
 14308 08:35B5: 82 0F 00     	brl	L10318
 14309                        L591:
 14310                        	.line	3244
 14311                        ;				cf |= NS_LOSS | NS_LFN;
 14312                        	.line	3245
 14313 08:35B8: E2 20        	sep	#$20
 14314                        	longa	off
 14315 08:35BA: A9 03        	lda	#$3
 14316 08:35BC: 04 0E        	tsb	<L549+cf_1
 14317 08:35BE: C2 20        	rep	#$20
 14318                        	longa	on
 14319                        ;				i = ni; continue; /* Nex
                    t field */
 14320                        	.line	3246
 14321 08:35C0: A5 1B        	lda	<L549+ni_1
 14322 08:35C2: 85 19        	sta	<L549+i_1
 14323                        	.line	3246
 14324 08:35C4: 82 98 00     	brl	L10308
 14325                        ;			}
 14326                        	.line	3247
 14327                        ;			dp->fn[i++] = (BYTE)(wc >> 8); /
                    * Put 1st byte */
 14328                        L10318:
 14329                        	.line	3248
 14330 08:35C7: 18           	clc
 14331 08:35C8: A9 20 00     	lda	#$20
 14332 08:35CB: 65 19        	adc	<L549+i_1
 14333 08:35CD: 85 01        	sta	<R0
 14334 08:35CF: A5 0F        	lda	<L549+wc_1
 14335 08:35D1: EB           	xba
 14336 08:35D2: 29 FF 00     	and	#$00ff
 14337 08:35D5: E2 20        	sep	#$20
 14338                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 274


 14339 08:35D7: A4 01        	ldy	<R0
 14340 08:35D9: 97 28        	sta	[<L548+dp_0],Y
 14341 08:35DB: C2 20        	rep	#$20
 14342                        	longa	on
 14343 08:35DD: E6 19        	inc	<L549+i_1
 14344                        ;		}
 14345                        	.line	3249
 14346                        ;		else
 14347 08:35DF: 82 69 00     	brl	L10319
 14348                        L10317:
 14349                        ;		{ /* SBC */
 14350                        	.line	3251
 14351                        ;			if (wc == 0 || chk_chr("+,;=[]",
                     wc))
 14352                        	.line	3252
 14353                        ;			{ /* Replace illegal characters 
                    for SFN if needed */
 14354 08:35E2: A5 0F        	lda	<L549+wc_1
 14355 08:35E4: D0 03        	bne	L593
 14356 08:35E6: 82 12 00     	brl	L592
 14357                        L593:
 14358 08:35E9: D4 0F        	pei	<L549+wc_1
 14359 08:35EB: F4 xx xx     	pea	#^L2+9
 14360 08:35EE: F4 xx xx     	pea	#<L2+9
 14361 08:35F1: 22 75 02 08  	jsl	~~chk_chr
 14362 08:35F5: AA           	tax
 14363 08:35F6: D0 03        	bne	L594
 14364 08:35F8: 82 10 00     	brl	L10320
 14365                        L594:
 14366                        L592:
 14367                        	.line	3253
 14368                        ;				wc = '_'; cf |= NS_LOSS 
                    | NS_LFN;/* Lossy conversion */
 14369                        	.line	3254
 14370 08:35FB: A9 5F 00     	lda	#$5f
 14371 08:35FE: 85 0F        	sta	<L549+wc_1
 14372                        	.line	3254
 14373 08:3600: E2 20        	sep	#$20
 14374                        	longa	off
 14375 08:3602: A9 03        	lda	#$3
 14376 08:3604: 04 0E        	tsb	<L549+cf_1
 14377 08:3606: C2 20        	rep	#$20
 14378                        	longa	on
 14379                        ;			}
 14380                        	.line	3255
 14381                        ;			else
 14382 08:3608: 82 40 00     	brl	L10321
 14383                        L10320:
 14384                        ;			{
 14385                        	.line	3257
 14386                        ;				if (IsUpper(wc))
 14387                        	.line	3258
 14388                        ;				{ /* ASCII upper case? *
                    /
 14389 08:360B: A5 0F        	lda	<L549+wc_1
 14390 08:360D: C9 41 00     	cmp	#<$41
 14391 08:3610: B0 03        	bcs	L595
 14392 08:3612: 82 12 00     	brl	L10322
  Mon Aug  9 2021 16:52                                                Page 275


 14393                        L595:
 14394 08:3615: A9 5A 00     	lda	#$5a
 14395 08:3618: C5 0F        	cmp	<L549+wc_1
 14396 08:361A: B0 03        	bcs	L596
 14397 08:361C: 82 08 00     	brl	L10322
 14398                        L596:
 14399                        	.line	3259
 14400                        ;					b |= 2;
 14401                        	.line	3260
 14402 08:361F: E2 20        	sep	#$20
 14403                        	longa	off
 14404 08:3621: A9 02        	lda	#$2
 14405 08:3623: 04 0D        	tsb	<L549+b_1
 14406 08:3625: C2 20        	rep	#$20
 14407                        	longa	on
 14408                        ;				}
 14409                        	.line	3261
 14410                        ;				if (IsLower(wc))
 14411                        L10322:
 14412                        	.line	3262
 14413                        ;				{ /* ASCII lower case? *
                    /
 14414 08:3627: A5 0F        	lda	<L549+wc_1
 14415 08:3629: C9 61 00     	cmp	#<$61
 14416 08:362C: B0 03        	bcs	L597
 14417 08:362E: 82 1A 00     	brl	L10323
 14418                        L597:
 14419 08:3631: A9 7A 00     	lda	#$7a
 14420 08:3634: C5 0F        	cmp	<L549+wc_1
 14421 08:3636: B0 03        	bcs	L598
 14422 08:3638: 82 10 00     	brl	L10323
 14423                        L598:
 14424                        	.line	3263
 14425                        ;					b |= 1; wc -= 0x
                    20;
 14426                        	.line	3264
 14427 08:363B: E2 20        	sep	#$20
 14428                        	longa	off
 14429 08:363D: A9 01        	lda	#$1
 14430 08:363F: 04 0D        	tsb	<L549+b_1
 14431 08:3641: C2 20        	rep	#$20
 14432                        	longa	on
 14433                        	.line	3264
 14434 08:3643: 18           	clc
 14435 08:3644: A9 E0 FF     	lda	#$ffe0
 14436 08:3647: 65 0F        	adc	<L549+wc_1
 14437 08:3649: 85 0F        	sta	<L549+wc_1
 14438                        ;				}
 14439                        	.line	3265
 14440                        ;			}
 14441                        L10323:
 14442                        	.line	3266
 14443                        L10321:
 14444                        ;		}
 14445                        	.line	3267
 14446                        L10319:
 14447                        ;		dp->fn[i++] = (BYTE)wc;
 14448                        	.line	3268
  Mon Aug  9 2021 16:52                                                Page 276


 14449 08:364B: 18           	clc
 14450 08:364C: A9 20 00     	lda	#$20
 14451 08:364F: 65 19        	adc	<L549+i_1
 14452 08:3651: 85 01        	sta	<R0
 14453 08:3653: E2 20        	sep	#$20
 14454                        	longa	off
 14455 08:3655: A5 0F        	lda	<L549+wc_1
 14456 08:3657: A4 01        	ldy	<R0
 14457 08:3659: 97 28        	sta	[<L548+dp_0],Y
 14458 08:365B: C2 20        	rep	#$20
 14459                        	longa	on
 14460 08:365D: E6 19        	inc	<L549+i_1
 14461                        ;	}
 14462                        	.line	3269
 14463                        L10308:
 14464 08:365F: 82 4A FE     	brl	L10310
 14465                        L10309:
 14466                        ;
 14467                        ;	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM; /* If 
                    the first character collides with DDEM, replace it with RDDE
                    M */
 14468                        	.line	3271
 14469 08:3662: E2 20        	sep	#$20
 14470                        	longa	off
 14471 08:3664: A0 20 00     	ldy	#$20
 14472 08:3667: B7 28        	lda	[<L548+dp_0],Y
 14473 08:3669: C9 E5        	cmp	#<$e5
 14474 08:366B: C2 20        	rep	#$20
 14475                        	longa	on
 14476 08:366D: F0 03        	beq	L599
 14477 08:366F: 82 0B 00     	brl	L10324
 14478                        L599:
 14479                        	.line	3271
 14480 08:3672: E2 20        	sep	#$20
 14481                        	longa	off
 14482 08:3674: A9 05        	lda	#$5
 14483 08:3676: A0 20 00     	ldy	#$20
 14484 08:3679: 97 28        	sta	[<L548+dp_0],Y
 14485 08:367B: C2 20        	rep	#$20
 14486                        	longa	on
 14487                        ;
 14488                        ;	if (ni == 8) b <<= 2; /* Shift capital flags if 
                    no extension */
 14489                        L10324:
 14490                        	.line	3273
 14491 08:367D: A5 1B        	lda	<L549+ni_1
 14492 08:367F: C9 08 00     	cmp	#<$8
 14493 08:3682: F0 03        	beq	L600
 14494 08:3684: 82 08 00     	brl	L10325
 14495                        L600:
 14496                        	.line	3273
 14497 08:3687: E2 20        	sep	#$20
 14498                        	longa	off
 14499 08:3689: 06 0D        	asl	<L549+b_1
 14500 08:368B: 06 0D        	asl	<L549+b_1
 14501 08:368D: C2 20        	rep	#$20
 14502                        	longa	on
 14503                        ;	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf
  Mon Aug  9 2021 16:52                                                Page 277


                     |= NS_LFN; /* LFN entry needs to be created if composite ca
                    pitals */
 14504                        L10325:
 14505                        	.line	3274
 14506 08:368F: A5 0D        	lda	<L549+b_1
 14507 08:3691: 29 0C 00     	and	#<$c
 14508 08:3694: 85 01        	sta	<R0
 14509 08:3696: A5 01        	lda	<R0
 14510 08:3698: C9 0C 00     	cmp	#<$c
 14511 08:369B: D0 03        	bne	L602
 14512 08:369D: 82 11 00     	brl	L601
 14513                        L602:
 14514 08:36A0: A5 0D        	lda	<L549+b_1
 14515 08:36A2: 29 03 00     	and	#<$3
 14516 08:36A5: 85 01        	sta	<R0
 14517 08:36A7: A5 01        	lda	<R0
 14518 08:36A9: C9 03 00     	cmp	#<$3
 14519 08:36AC: F0 03        	beq	L603
 14520 08:36AE: 82 08 00     	brl	L10326
 14521                        L603:
 14522                        L601:
 14523                        	.line	3274
 14524 08:36B1: E2 20        	sep	#$20
 14525                        	longa	off
 14526 08:36B3: A9 02        	lda	#$2
 14527 08:36B5: 04 0E        	tsb	<L549+cf_1
 14528 08:36B7: C2 20        	rep	#$20
 14529                        	longa	on
 14530                        ;	if (!(cf & NS_LFN))
 14531                        L10326:
 14532                        	.line	3275
 14533                        ;	{ /* When LFN is in 8.3 format without extended 
                    character, NT flags are created */
 14534 08:36B9: E2 20        	sep	#$20
 14535                        	longa	off
 14536 08:36BB: A5 0E        	lda	<L549+cf_1
 14537 08:36BD: 29 02        	and	#<$2
 14538 08:36BF: C2 20        	rep	#$20
 14539                        	longa	on
 14540 08:36C1: F0 03        	beq	L604
 14541 08:36C3: 82 2A 00     	brl	L10327
 14542                        L604:
 14543                        	.line	3276
 14544                        ;		if (b & 0x01) cf |= NS_EXT; /* NT flag (
                    Extension has small capital letters only) */
 14545                        	.line	3277
 14546 08:36C6: E2 20        	sep	#$20
 14547                        	longa	off
 14548 08:36C8: A5 0D        	lda	<L549+b_1
 14549 08:36CA: 29 01        	and	#<$1
 14550 08:36CC: C2 20        	rep	#$20
 14551                        	longa	on
 14552 08:36CE: D0 03        	bne	L605
 14553 08:36D0: 82 08 00     	brl	L10328
 14554                        L605:
 14555                        	.line	3277
 14556 08:36D3: E2 20        	sep	#$20
 14557                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 278


 14558 08:36D5: A9 10        	lda	#$10
 14559 08:36D7: 04 0E        	tsb	<L549+cf_1
 14560 08:36D9: C2 20        	rep	#$20
 14561                        	longa	on
 14562                        ;		if (b & 0x04) cf |= NS_BODY; /* NT flag 
                    (Body has small capital letters only) */
 14563                        L10328:
 14564                        	.line	3278
 14565 08:36DB: E2 20        	sep	#$20
 14566                        	longa	off
 14567 08:36DD: A5 0D        	lda	<L549+b_1
 14568 08:36DF: 29 04        	and	#<$4
 14569 08:36E1: C2 20        	rep	#$20
 14570                        	longa	on
 14571 08:36E3: D0 03        	bne	L606
 14572 08:36E5: 82 08 00     	brl	L10329
 14573                        L606:
 14574                        	.line	3278
 14575 08:36E8: E2 20        	sep	#$20
 14576                        	longa	off
 14577 08:36EA: A9 08        	lda	#$8
 14578 08:36EC: 04 0E        	tsb	<L549+cf_1
 14579 08:36EE: C2 20        	rep	#$20
 14580                        	longa	on
 14581                        ;	}
 14582                        L10329:
 14583                        	.line	3279
 14584                        ;
 14585                        ;	dp->fn[NSFLAG] = cf; /* SFN is created into dp->
                    fn[] */
 14586                        L10327:
 14587                        	.line	3281
 14588 08:36F0: E2 20        	sep	#$20
 14589                        	longa	off
 14590 08:36F2: A5 0E        	lda	<L549+cf_1
 14591 08:36F4: A0 2B 00     	ldy	#$2b
 14592 08:36F7: 97 28        	sta	[<L548+dp_0],Y
 14593 08:36F9: C2 20        	rep	#$20
 14594                        	longa	on
 14595                        ;
 14596                        ;	return FR_OK;
 14597                        	.line	3283
 14598 08:36FB: A9 00 00     	lda	#$0
 14599 08:36FE: 82 25 FB     	brl	L553
 14600                        ;
 14601                        ;#else	/* FF_USE_LFN : Non-LFN configuration */
 14602                        ;	BYTE c, d, *sfn;
 14603                        ;	UINT ni, si, i;
 14604                        ;	const char *p;
 14605                        ;
 14606                        ;	/* Create file name in directory form */
 14607                        ;	p = *path;
 14608                        ;	sfn = dp->fn;
 14609                        ;	mem_set(sfn, ' ', 11);
 14610                        ;	si = i = 0;
 14611                        ;	ni = 8;
 14612                        ;#if FF_FS_RPATH != 0
 14613                        ;	if (p[si] == '.')
  Mon Aug  9 2021 16:52                                                Page 279


 14614                        ;	{ /* Is this a dot entry? */
 14615                        ;		for (;;)
 14616                        ;		{
 14617                        ;			c = (BYTE)p[si++];
 14618                        ;			if (c != '.' || si >= 3) break;
 14619                        ;			sfn[i++] = c;
 14620                        ;		}
 14621                        ;		if (c != '/' && c != '\\' && c > ' ') re
                    turn FR_INVALID_NAME;
 14622                        ;		*path = p + si; /* Return pointer to the
                     next segment */
 14623                        ;		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_
                    DOT : NS_DOT; /* Set last segment flag if end of the path */
 14624                        ;		return FR_OK;
 14625                        ;	}
 14626                        ;#endif
 14627                        ;	for (;;)
 14628                        ;	{
 14629                        ;		c = (BYTE) p[si++]; /* Get a byte */
 14630                        ;		if (c <= ' ')
 14631                        ;			break; /* Break if end of the pa
                    th name */
 14632                        ;		if (c == '/' || c == '\\')
 14633                        ;		{ /* Break if a separator is found */
 14634                        ;			while (p[si] == '/' || p[si] == 
                    '\\')
 14635                        ;				si++; /* Skip duplicated
                     separator if exist */
 14636                        ;			break;
 14637                        ;		}
 14638                        ;		if (c == '.' || i >= ni)
 14639                        ;		{ /* End of body or field overflow? */
 14640                        ;			if (ni == 11 || c != '.')
 14641                        ;				return FR_INVALID_NAME; 
                    /* Field overflow or invalid dot? */
 14642                        ;			i = 8;
 14643                        ;			ni = 11; /* Enter file extension
                     field */
 14644                        ;			continue;
 14645                        ;		}
 14646                        ;#if FF_CODE_PAGE == 0
 14647                        ;		if (ExCvt && c >= 0x80)
 14648                        ;		{ /* Is SBC extended character? */
 14649                        ;			c = ExCvt[c & 0x7F]; /* To upper
                     SBC extended character */
 14650                        ;		}
 14651                        ;#elif FF_CODE_PAGE < 900
 14652                        ;		if (c >= 0x80)
 14653                        ;		{ /* Is SBC extended character? */
 14654                        ;			c = ExCvt[c & 0x7F]; /* To upper
                     SBC extended character */
 14655                        ;		}
 14656                        ;#endif
 14657                        ;		if (dbc_1st(c))
 14658                        ;		{ /* Check if it is a DBC 1st byte */
 14659                        ;			d = (BYTE) p[si++]; /* Get 2nd b
                    yte */
 14660                        ;			if (!dbc_2nd(d) || i >= ni - 1)
  Mon Aug  9 2021 16:52                                                Page 280


 14661                        ;				return FR_INVALID_NAME; 
                    /* Reject invalid DBC */
 14662                        ;			sfn[i++] = c;
 14663                        ;			sfn[i++] = d;
 14664                        ;		}
 14665                        ;		else
 14666                        ;		{ /* SBC */
 14667                        ;			if (chk_chr("\"*+,:;<=>\?[]|\x7F
                    ", c))
 14668                        ;				return FR_INVALID_NAME; 
                    /* Reject illegal chrs for SFN */
 14669                        ;			if (IsLower(c))
 14670                        ;				c -= 0x20; /* To upper *
                    /
 14671                        ;			sfn[i++] = c;
 14672                        ;		}
 14673                        ;	}
 14674                        ;	*path = p + si; /* Return pointer to the next se
                    gment */
 14675                        ;	if (i == 0)
 14676                        ;		return FR_INVALID_NAME; /* Reject nul st
                    ring */
 14677                        ;
 14678                        ;	if (sfn[0] == DDEM)
 14679                        ;		sfn[0] = RDDEM; /* If the first characte
                    r collides with DDEM, replace it with RDDEM */
 14680                        ;	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0; /* Set l
                    ast segment flag if end of the path */
 14681                        ;
 14682                        ;	return FR_OK;
 14683                        ;#endif /* FF_USE_LFN */
 14684                        ;}
 14685                        	.line	3368
 14686                        	.endblock	3368
 14687             00000024   L548	equ	36
 14688             0000000D   L549	equ	13
 14689 08:3701:              	ends
 14690                        	efunc
 14691                        	.endfunc	3368,13,36
 14692                        	.line	3368
 14693                        	data
 14694                        L2:
 14695 00:00ED: 22 2A 3A 3C  	db	$22,$2A,$3A,$3C,$3E,$3F,$7C,$7F,$00,$2B,
                    $2C,$3B,$3D,$5B,$5D
       00:00F1: 3E 3F 7C 7F 
       00:00F5: 00 2B 2C 3B 
       00:00F9: 3D 5B 5D 
 14696 00:00FC: 00           	db	$00
 14697 00:00FD:              	ends
 14698                        ;
 14699                        ;/*-----------------------------------------------
                    ------------------------*/
 14700                        ;/* Follow a file path                            
                                            */
 14701                        ;/*-----------------------------------------------
                    ------------------------*/
 14702                        ;
 14703                        ;static FRESULT follow_path( /* FR_OK(0): successf
  Mon Aug  9 2021 16:52                                                Page 281


                    ul, !=0: error code */
 14704                        ;DIR* dp, /* Directory object to return last direc
                    tory and found object */
 14705                        ;const TCHAR* path /* Full-path string to find a f
                    ile or directory */
 14706                        ;)
 14707                        ;{
 14708                        	.line	3374
 14709                        	.line	3378
 14710                        	FFDOS
 14711                        	func
 14712                        	.function	3378
 14713                        ~~follow_path:
 14714                        	longa	on
 14715                        	longi	on
 14716 08:3701: 3B           	tsc
 14717 08:3702: 38           	sec
 14718 08:3703: E9 13 00     	sbc	#L608
 14719 08:3706: 1B           	tcs
 14720 08:3707: 0B           	phd
 14721 08:3708: 5B           	tcd
 14722             00000004   dp_0	set	4
 14723             00000008   path_0	set	8
 14724                        	.block	3378
 14725                        ;	FRESULT res;
 14726                        ;	BYTE ns;
 14727                        ;	FATFS *fs = dp->obj.fs;
 14728                        ;
 14729                        ;	//k_debug_string("follow_path...\r\n");
 14730                        ;
 14731                        ;#if FF_FS_RPATH != 0
 14732                        ;	if (*path != '/' && *path != '\\')
 14733                        ;	{ /* Without heading separator */
 14734                        ;		dp->obj.sclust = fs->cdir; /* Start from
                     current directory */
 14735                        ;	}
 14736                        ;	else
 14737                        ;#endif
 14738                        ;	{ /* With heading separator */
 14739             00000000   res_1	set	0
 14740             00000002   ns_1	set	2
 14741             00000003   fs_1	set	3
 14742                        	.sym	res,0,5,1,16
 14743                        	.sym	ns,2,14,1,8
 14744                        	.sym	fs,3,138,1,32,75
 14745                        	.sym	dp,4,138,6,32,78
 14746                        	.sym	path,8,142,6,32
 14747 08:3709: A7 17        	lda	[<L608+dp_0]
 14748 08:370B: 85 10        	sta	<L609+fs_1
 14749 08:370D: A0 02 00     	ldy	#$2
 14750 08:3710: B7 17        	lda	[<L608+dp_0],Y
 14751 08:3712: 85 12        	sta	<L609+fs_1+2
 14752                        	.line	3392
 14753                        ;		while (*path == '/' || *path == '\\')
 14754                        	.line	3393
 14755                        L10330:
 14756 08:3714: E2 20        	sep	#$20
 14757                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 282


 14758 08:3716: A7 1B        	lda	[<L608+path_0]
 14759 08:3718: C9 2F        	cmp	#<$2f
 14760 08:371A: C2 20        	rep	#$20
 14761                        	longa	on
 14762 08:371C: D0 03        	bne	L612
 14763 08:371E: 82 0D 00     	brl	L611
 14764                        L612:
 14765 08:3721: E2 20        	sep	#$20
 14766                        	longa	off
 14767 08:3723: A7 1B        	lda	[<L608+path_0]
 14768 08:3725: C9 5C        	cmp	#<$5c
 14769 08:3727: C2 20        	rep	#$20
 14770                        	longa	on
 14771 08:3729: F0 03        	beq	L613
 14772 08:372B: 82 09 00     	brl	L10331
 14773                        L613:
 14774                        L611:
 14775                        ;			path++; /* Strip heading separat
                    or */
 14776                        	.line	3394
 14777 08:372E: E6 1B        	inc	<L608+path_0
 14778 08:3730: D0 02        	bne	L614
 14779 08:3732: E6 1D        	inc	<L608+path_0+2
 14780                        L614:
 14781 08:3734: 82 DD FF     	brl	L10330
 14782                        L10331:
 14783                        ;		dp->obj.sclust = 0; /* Start from root d
                    irectory */
 14784                        	.line	3395
 14785 08:3737: A9 00 00     	lda	#$0
 14786 08:373A: A0 08 00     	ldy	#$8
 14787 08:373D: 97 17        	sta	[<L608+dp_0],Y
 14788 08:373F: A9 00 00     	lda	#$0
 14789 08:3742: A0 0A 00     	ldy	#$a
 14790 08:3745: 97 17        	sta	[<L608+dp_0],Y
 14791                        ;	}
 14792                        	.line	3396
 14793                        ;#if FF_FS_EXFAT
 14794                        ;	dp->obj.n_frag = 0; /* Invalidate last fragment 
                    counter of the object */
 14795                        ;#if FF_FS_RPATH != 0
 14796                        ;	if (fs->fs_type == FS_EXFAT && dp->obj.sclust)
 14797                        ;	{ /* exFAT: Retrieve the sub-directory's status 
                    */
 14798                        ;		DIR dj;
 14799                        ;
 14800                        ;		dp->obj.c_scl = fs->cdc_scl;
 14801                        ;		dp->obj.c_size = fs->cdc_size;
 14802                        ;		dp->obj.c_ofs = fs->cdc_ofs;
 14803                        ;		res = load_obj_xdir(&dj, &dp->obj);
 14804                        ;		if (res != FR_OK) return res;
 14805                        ;		dp->obj.objsize = ld_dword(fs->dirbuf + 
                    XDIR_FileSize);
 14806                        ;		dp->obj.stat = fs->dirbuf[XDIR_GenFlags]
                     & 2;
 14807                        ;	}
 14808                        ;#endif
 14809                        ;#endif
  Mon Aug  9 2021 16:52                                                Page 283


 14810                        ;
 14811                        ;	if ((UINT) *path < ' ')
 14812                        	.line	3415
 14813                        ;	{ /* Null path name is the origin directory itse
                    lf */
 14814 08:3747: E2 20        	sep	#$20
 14815                        	longa	off
 14816 08:3749: A7 1B        	lda	[<L608+path_0]
 14817 08:374B: C9 20        	cmp	#<$20
 14818 08:374D: C2 20        	rep	#$20
 14819                        	longa	on
 14820 08:374F: 90 03        	bcc	L615
 14821 08:3751: 82 1E 00     	brl	L10332
 14822                        L615:
 14823                        	.line	3416
 14824                        ;		dp->fn[NSFLAG] = NS_NONAME;
 14825                        	.line	3417
 14826 08:3754: E2 20        	sep	#$20
 14827                        	longa	off
 14828 08:3756: A9 80        	lda	#$80
 14829 08:3758: A0 2B 00     	ldy	#$2b
 14830 08:375B: 97 17        	sta	[<L608+dp_0],Y
 14831 08:375D: C2 20        	rep	#$20
 14832                        	longa	on
 14833                        ;		res = dir_sdi(dp, 0);
 14834                        	.line	3418
 14835 08:375F: F4 00 00     	pea	#^$0
 14836 08:3762: F4 00 00     	pea	#<$0
 14837 08:3765: D4 19        	pei	<L608+dp_0+2
 14838 08:3767: D4 17        	pei	<L608+dp_0
 14839 08:3769: 22 36 17 08  	jsl	~~dir_sdi
 14840 08:376D: 85 0D        	sta	<L609+res_1
 14841                        ;
 14842                        ;	}
 14843                        	.line	3420
 14844                        ;	else
 14845 08:376F: 82 F0 00     	brl	L10333
 14846                        L10332:
 14847                        ;	{ /* Follow path */
 14848                        	.line	3422
 14849                        ;		for (;;)
 14850                        	.line	3423
 14851                        L10336:
 14852                        ;		{
 14853                        	.line	3424
 14854                        ;			res = create_name(dp, &path); /*
                     Get a segment name of the path */
 14855                        	.line	3425
 14856 08:3772: F4 00 00     	pea	#0
 14857 08:3775: 18           	clc
 14858 08:3776: 7B           	tdc
 14859 08:3777: 69 1B 00     	adc	#<L608+path_0
 14860 08:377A: 48           	pha
 14861 08:377B: D4 19        	pei	<L608+dp_0+2
 14862 08:377D: D4 17        	pei	<L608+dp_0
 14863 08:377F: 22 D3 31 08  	jsl	~~create_name
 14864 08:3783: 85 0D        	sta	<L609+res_1
 14865                        ;			if (res != FR_OK)
  Mon Aug  9 2021 16:52                                                Page 284


 14866                        	.line	3426
 14867                        ;				break;
 14868 08:3785: A5 0D        	lda	<L609+res_1
 14869 08:3787: F0 03        	beq	L616
 14870 08:3789: 82 D6 00     	brl	L10335
 14871                        L616:
 14872                        ;			res = dir_find(dp); /* Find an o
                    bject with the segment name */
 14873                        	.line	3428
 14874 08:378C: D4 19        	pei	<L608+dp_0+2
 14875 08:378E: D4 17        	pei	<L608+dp_0
 14876 08:3790: 22 A2 25 08  	jsl	~~dir_find
 14877 08:3794: 85 0D        	sta	<L609+res_1
 14878                        ;			ns = dp->fn[NSFLAG];
 14879                        	.line	3429
 14880 08:3796: E2 20        	sep	#$20
 14881                        	longa	off
 14882 08:3798: A0 2B 00     	ldy	#$2b
 14883 08:379B: B7 17        	lda	[<L608+dp_0],Y
 14884 08:379D: 85 0F        	sta	<L609+ns_1
 14885 08:379F: C2 20        	rep	#$20
 14886                        	longa	on
 14887                        ;			if (res != FR_OK)
 14888                        	.line	3430
 14889                        ;			{ /* Failed to find the object *
                    /
 14890 08:37A1: A5 0D        	lda	<L609+res_1
 14891 08:37A3: D0 03        	bne	L617
 14892 08:37A5: 82 4C 00     	brl	L10337
 14893                        L617:
 14894                        	.line	3431
 14895                        ;				if (res == FR_NO_FILE)
 14896                        	.line	3432
 14897                        ;				{ /* Object is not found
                     */
 14898 08:37A8: A5 0D        	lda	<L609+res_1
 14899 08:37AA: C9 04 00     	cmp	#<$4
 14900 08:37AD: F0 03        	beq	L618
 14901 08:37AF: 82 3F 00     	brl	L10338
 14902                        L618:
 14903                        	.line	3433
 14904                        ;					if (FF_FS_RPATH 
                    && (ns & NS_DOT))
 14905                        	.line	3434
 14906                        ;					{ /* If dot entr
                    y is not exist, stay there */
 14907 08:37B2: 82 2A 00     	brl	L10339
 14908 08:37B5: E2 20        	sep	#$20
 14909                        	longa	off
 14910 08:37B7: A5 0F        	lda	<L609+ns_1
 14911 08:37B9: 29 20        	and	#<$20
 14912 08:37BB: C2 20        	rep	#$20
 14913                        	longa	on
 14914 08:37BD: D0 03        	bne	L619
 14915 08:37BF: 82 1D 00     	brl	L10339
 14916                        L619:
 14917                        	.line	3435
 14918                        ;						if (!(ns
  Mon Aug  9 2021 16:52                                                Page 285


                     & NS_LAST))
 14919                        	.line	3436
 14920                        ;							
                    continue; /* Continue to follow if not last segment */
 14921 08:37C2: E2 20        	sep	#$20
 14922                        	longa	off
 14923 08:37C4: A5 0F        	lda	<L609+ns_1
 14924 08:37C6: 29 04        	and	#<$4
 14925 08:37C8: C2 20        	rep	#$20
 14926                        	longa	on
 14927 08:37CA: D0 03        	bne	L620
 14928 08:37CC: 82 90 00     	brl	L10334
 14929                        L620:
 14930                        ;						dp->fn[N
                    SFLAG] = NS_NONAME;
 14931                        	.line	3438
 14932 08:37CF: E2 20        	sep	#$20
 14933                        	longa	off
 14934 08:37D1: A9 80        	lda	#$80
 14935 08:37D3: A0 2B 00     	ldy	#$2b
 14936 08:37D6: 97 17        	sta	[<L608+dp_0],Y
 14937 08:37D8: C2 20        	rep	#$20
 14938                        	longa	on
 14939                        ;						res = FR
                    _OK;
 14940                        	.line	3439
 14941 08:37DA: 64 0D        	stz	<L609+res_1
 14942                        ;					}
 14943                        	.line	3440
 14944                        ;					else
 14945 08:37DC: 82 12 00     	brl	L10340
 14946                        L10339:
 14947                        ;					{ /* Could not f
                    ind the object */
 14948                        	.line	3442
 14949                        ;						if (!(ns
                     & NS_LAST))
 14950                        	.line	3443
 14951                        ;							
                    res = FR_NO_PATH; /* Adjust error code if not last segment *
                    /
 14952 08:37DF: E2 20        	sep	#$20
 14953                        	longa	off
 14954 08:37E1: A5 0F        	lda	<L609+ns_1
 14955 08:37E3: 29 04        	and	#<$4
 14956 08:37E5: C2 20        	rep	#$20
 14957                        	longa	on
 14958 08:37E7: F0 03        	beq	L621
 14959 08:37E9: 82 05 00     	brl	L10341
 14960                        L621:
 14961                        	.line	3444
 14962 08:37EC: A9 05 00     	lda	#$5
 14963 08:37EF: 85 0D        	sta	<L609+res_1
 14964                        ;					}
 14965                        L10341:
 14966                        	.line	3445
 14967                        L10340:
 14968                        ;				}
  Mon Aug  9 2021 16:52                                                Page 286


 14969                        	.line	3446
 14970                        ;				break;
 14971                        L10338:
 14972                        	.line	3447
 14973 08:37F1: 82 6E 00     	brl	L10335
 14974                        ;			}
 14975                        	.line	3448
 14976                        ;			if (ns & NS_LAST)
 14977                        L10337:
 14978                        	.line	3449
 14979                        ;				break; /* Last segment m
                    atched. Function completed. */
 14980 08:37F4: E2 20        	sep	#$20
 14981                        	longa	off
 14982 08:37F6: A5 0F        	lda	<L609+ns_1
 14983 08:37F8: 29 04        	and	#<$4
 14984 08:37FA: C2 20        	rep	#$20
 14985                        	longa	on
 14986 08:37FC: F0 03        	beq	L622
 14987 08:37FE: 82 61 00     	brl	L10335
 14988                        L622:
 14989                        ;			/* Get into the sub-directory */
 14990                        ;			if (!(dp->obj.attr & AM_DIR))
 14991                        	.line	3452
 14992                        ;			{ /* It is not a sub-directory a
                    nd cannot follow */
 14993 08:3801: E2 20        	sep	#$20
 14994                        	longa	off
 14995 08:3803: A0 06 00     	ldy	#$6
 14996 08:3806: B7 17        	lda	[<L608+dp_0],Y
 14997 08:3808: 29 10        	and	#<$10
 14998 08:380A: C2 20        	rep	#$20
 14999                        	longa	on
 15000 08:380C: F0 03        	beq	L623
 15001 08:380E: 82 08 00     	brl	L10342
 15002                        L623:
 15003                        	.line	3453
 15004                        ;				res = FR_NO_PATH;
 15005                        	.line	3454
 15006 08:3811: A9 05 00     	lda	#$5
 15007 08:3814: 85 0D        	sta	<L609+res_1
 15008                        ;				break;
 15009                        	.line	3455
 15010 08:3816: 82 49 00     	brl	L10335
 15011                        ;			}
 15012                        	.line	3456
 15013                        ;#if FF_FS_EXFAT
 15014                        ;			if (fs->fs_type == FS_EXFAT)
 15015                        ;			{ /* Save containing directory i
                    nformation for next dir */
 15016                        ;				dp->obj.c_scl = dp->obj.
                    sclust;
 15017                        ;				dp->obj.c_size = ((DWORD
                    )dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 15018                        ;				dp->obj.c_ofs = dp->blk_
                    ofs;
 15019                        ;				init_alloc_info(fs, &dp-
                    >obj); /* Open next directory */
  Mon Aug  9 2021 16:52                                                Page 287


 15020                        ;			}
 15021                        ;			else
 15022                        ;#endif
 15023                        ;			{
 15024                        L10342:
 15025                        	.line	3467
 15026                        ;				dp->obj.sclust = ld_clus
                    t(fs, fs->win + dp->dptr % SS(fs)); /* Open next directory *
                    /
 15027                        	.line	3468
 15028 08:3819: A0 10 00     	ldy	#$10
 15029 08:381C: B7 17        	lda	[<L608+dp_0],Y
 15030 08:381E: 29 FF 01     	and	#<$1ff
 15031 08:3821: 85 01        	sta	<R0
 15032 08:3823: 64 03        	stz	<R0+2
 15033 08:3825: 18           	clc
 15034 08:3826: A9 33 00     	lda	#$33
 15035 08:3829: 65 01        	adc	<R0
 15036 08:382B: 85 05        	sta	<R1
 15037 08:382D: A9 00 00     	lda	#$0
 15038 08:3830: 65 03        	adc	<R0+2
 15039 08:3832: 85 07        	sta	<R1+2
 15040 08:3834: 18           	clc
 15041 08:3835: A5 10        	lda	<L609+fs_1
 15042 08:3837: 65 05        	adc	<R1
 15043 08:3839: 85 01        	sta	<R0
 15044 08:383B: A5 12        	lda	<L609+fs_1+2
 15045 08:383D: 65 07        	adc	<R1+2
 15046 08:383F: 85 03        	sta	<R0+2
 15047 08:3841: D4 03        	pei	<R0+2
 15048 08:3843: D4 01        	pei	<R0
 15049 08:3845: D4 12        	pei	<L609+fs_1+2
 15050 08:3847: D4 10        	pei	<L609+fs_1
 15051 08:3849: 22 EC 1C 08  	jsl	~~ld_clust
 15052 08:384D: 85 09        	sta	<R2
 15053 08:384F: 86 0B        	stx	<R2+2
 15054 08:3851: A5 09        	lda	<R2
 15055 08:3853: A0 08 00     	ldy	#$8
 15056 08:3856: 97 17        	sta	[<L608+dp_0],Y
 15057 08:3858: A5 0B        	lda	<R2+2
 15058 08:385A: A0 0A 00     	ldy	#$a
 15059 08:385D: 97 17        	sta	[<L608+dp_0],Y
 15060                        ;			}
 15061                        	.line	3469
 15062                        ;		}
 15063                        	.line	3470
 15064                        L10334:
 15065 08:385F: 82 10 FF     	brl	L10336
 15066                        L10335:
 15067                        ;	}
 15068                        	.line	3471
 15069                        L10333:
 15070                        ;
 15071                        ;	return res;
 15072                        	.line	3473
 15073 08:3862: A5 0D        	lda	<L609+res_1
 15074                        L624:
 15075 08:3864: A8           	tay
  Mon Aug  9 2021 16:52                                                Page 288


 15076 08:3865: A5 15        	lda	<L608+2
 15077 08:3867: 85 1D        	sta	<L608+2+8
 15078 08:3869: A5 14        	lda	<L608+1
 15079 08:386B: 85 1C        	sta	<L608+1+8
 15080 08:386D: 2B           	pld
 15081 08:386E: 3B           	tsc
 15082 08:386F: 18           	clc
 15083 08:3870: 69 1B 00     	adc	#L608+8
 15084 08:3873: 1B           	tcs
 15085 08:3874: 98           	tya
 15086 08:3875: 6B           	rtl
 15087                        ;}
 15088                        	.line	3474
 15089                        	.endblock	3474
 15090             00000013   L608	equ	19
 15091             0000000D   L609	equ	13
 15092 08:3876:              	ends
 15093                        	efunc
 15094                        	.endfunc	3474,13,19
 15095                        	.line	3474
 15096                        ;
 15097                        ;/*-----------------------------------------------
                    ------------------------*/
 15098                        ;/* Get logical drive number from path name       
                                            */
 15099                        ;/*-----------------------------------------------
                    ------------------------*/
 15100                        ;
 15101                        ;static int get_ldnumber( /* Returns logical drive
                     number (-1:invalid drive number or null pointer) */
 15102                        ;const TCHAR** path /* Pointer to pointer to the p
                    ath name */
 15103                        ;)
 15104                        ;{
 15105                        	.line	3480
 15106                        	.line	3483
 15107                        	FFDOS
 15108                        	func
 15109                        	.function	3483
 15110                        ~~get_ldnumber:
 15111                        	longa	on
 15112                        	longi	on
 15113 08:3876: 3B           	tsc
 15114 08:3877: 38           	sec
 15115 08:3878: E9 1A 00     	sbc	#L625
 15116 08:387B: 1B           	tcs
 15117 08:387C: 0B           	phd
 15118 08:387D: 5B           	tcd
 15119             00000004   path_0	set	4
 15120                        	.block	3483
 15121                        ;	const TCHAR *tp, *tt;
 15122                        ;	TCHAR tc;
 15123                        ;	int i, vol = -1;
 15124                        ;#if FF_STR_VOLUME_ID		/* Find string v
                    olume ID */
 15125                        ;	const char *sp;
 15126                        ;	char c;
 15127                        ;#endif
  Mon Aug  9 2021 16:52                                                Page 289


 15128                        ;
 15129                        ;	tt = tp = *path;
 15130             00000000   tp_1	set	0
 15131             00000004   tt_1	set	4
 15132             00000008   tc_1	set	8
 15133             00000009   i_1	set	9
 15134             0000000B   vol_1	set	11
 15135             0000000D   sp_1	set	13
 15136             00000011   c_1	set	17
 15137                        	.sym	tp,0,142,1,32
 15138                        	.sym	tt,4,142,1,32
 15139                        	.sym	tc,8,14,1,8
 15140                        	.sym	i,9,5,1,16
 15141                        	.sym	vol,11,5,1,16
 15142                        	.sym	sp,13,142,1,32
 15143                        	.sym	c,17,14,1,8
 15144                        	.sym	path,4,1166,6,32
 15145 08:387E: A9 FF FF     	lda	#$ffff
 15146 08:3881: 85 14        	sta	<L626+vol_1
 15147                        	.line	3492
 15148 08:3883: A7 1E        	lda	[<L625+path_0]
 15149 08:3885: 85 09        	sta	<L626+tp_1
 15150 08:3887: A0 02 00     	ldy	#$2
 15151 08:388A: B7 1E        	lda	[<L625+path_0],Y
 15152 08:388C: 85 0B        	sta	<L626+tp_1+2
 15153 08:388E: A5 09        	lda	<L626+tp_1
 15154 08:3890: 85 0D        	sta	<L626+tt_1
 15155 08:3892: A5 0B        	lda	<L626+tp_1+2
 15156 08:3894: 85 0F        	sta	<L626+tt_1+2
 15157                        ;	if (!tp)
 15158                        	.line	3493
 15159                        ;		return vol; /* Invalid path name? */
 15160 08:3896: A5 09        	lda	<L626+tp_1
 15161 08:3898: 05 0B        	ora	<L626+tp_1+2
 15162 08:389A: F0 03        	beq	L628
 15163 08:389C: 82 14 00     	brl	L10343
 15164                        L628:
 15165                        	.line	3494
 15166 08:389F: A5 14        	lda	<L626+vol_1
 15167                        L629:
 15168 08:38A1: A8           	tay
 15169 08:38A2: A5 1C        	lda	<L625+2
 15170 08:38A4: 85 20        	sta	<L625+2+4
 15171 08:38A6: A5 1B        	lda	<L625+1
 15172 08:38A8: 85 1F        	sta	<L625+1+4
 15173 08:38AA: 2B           	pld
 15174 08:38AB: 3B           	tsc
 15175 08:38AC: 18           	clc
 15176 08:38AD: 69 1E 00     	adc	#L625+4
 15177 08:38B0: 1B           	tcs
 15178 08:38B1: 98           	tya
 15179 08:38B2: 6B           	rtl
 15180                        ;	do
 15181                        L10343:
 15182                        	.line	3495
 15183                        L10346:
 15184                        ;		tc = *tt++;
 15185                        	.line	3496
  Mon Aug  9 2021 16:52                                                Page 290


 15186 08:38B3: E2 20        	sep	#$20
 15187                        	longa	off
 15188 08:38B5: A7 0D        	lda	[<L626+tt_1]
 15189 08:38B7: 85 11        	sta	<L626+tc_1
 15190 08:38B9: C2 20        	rep	#$20
 15191                        	longa	on
 15192 08:38BB: E6 0D        	inc	<L626+tt_1
 15193 08:38BD: D0 02        	bne	L630
 15194 08:38BF: E6 0F        	inc	<L626+tt_1+2
 15195                        L630:
 15196                        ;	while ((UINT) tc >= (FF_USE_LFN ? ' ' : '!') && 
                    tc != ':'); /* Find a colon in the path */
 15197                        L10344:
 15198 08:38C1: E2 20        	sep	#$20
 15199                        	longa	off
 15200 08:38C3: A5 11        	lda	<L626+tc_1
 15201 08:38C5: C9 20        	cmp	#<$20
 15202 08:38C7: C2 20        	rep	#$20
 15203                        	longa	on
 15204 08:38C9: B0 03        	bcs	L632
 15205 08:38CB: 82 0D 00     	brl	L631
 15206                        L632:
 15207 08:38CE: E2 20        	sep	#$20
 15208                        	longa	off
 15209 08:38D0: A5 11        	lda	<L626+tc_1
 15210 08:38D2: C9 3A        	cmp	#<$3a
 15211 08:38D4: C2 20        	rep	#$20
 15212                        	longa	on
 15213 08:38D6: F0 03        	beq	L633
 15214 08:38D8: 82 D8 FF     	brl	L10346
 15215                        L633:
 15216                        L631:
 15217                        L10345:
 15218                        ;
 15219                        ;	if (tc == ':')
 15220                        	.line	3499
 15221                        ;	{ /* DOS/Windows style volume ID? */
 15222 08:38DB: E2 20        	sep	#$20
 15223                        	longa	off
 15224 08:38DD: A5 11        	lda	<L626+tc_1
 15225 08:38DF: C9 3A        	cmp	#<$3a
 15226 08:38E1: C2 20        	rep	#$20
 15227                        	longa	on
 15228 08:38E3: F0 03        	beq	L634
 15229 08:38E5: 82 59 01     	brl	L10347
 15230                        L634:
 15231                        	.line	3500
 15232                        ;		i = FF_VOLUMES;
 15233                        	.line	3501
 15234 08:38E8: A9 08 00     	lda	#$8
 15235 08:38EB: 85 12        	sta	<L626+i_1
 15236                        ;		if (IsDigit(*tp) && tp + 2 == tt)
 15237                        	.line	3502
 15238                        ;		{ /* Is there a numeric volume ID + colo
                    n? */
 15239 08:38ED: E2 20        	sep	#$20
 15240                        	longa	off
 15241 08:38EF: A7 09        	lda	[<L626+tp_1]
  Mon Aug  9 2021 16:52                                                Page 291


 15242 08:38F1: C9 30        	cmp	#<$30
 15243 08:38F3: C2 20        	rep	#$20
 15244                        	longa	on
 15245 08:38F5: B0 03        	bcs	L635
 15246 08:38F7: 82 3D 00     	brl	L10348
 15247                        L635:
 15248 08:38FA: E2 20        	sep	#$20
 15249                        	longa	off
 15250 08:38FC: A9 39        	lda	#$39
 15251 08:38FE: C7 09        	cmp	[<L626+tp_1]
 15252 08:3900: C2 20        	rep	#$20
 15253                        	longa	on
 15254 08:3902: B0 03        	bcs	L636
 15255 08:3904: 82 30 00     	brl	L10348
 15256                        L636:
 15257 08:3907: 18           	clc
 15258 08:3908: A9 02 00     	lda	#$2
 15259 08:390B: 65 09        	adc	<L626+tp_1
 15260 08:390D: 85 01        	sta	<R0
 15261 08:390F: A9 00 00     	lda	#$0
 15262 08:3912: 65 0B        	adc	<L626+tp_1+2
 15263 08:3914: 85 03        	sta	<R0+2
 15264 08:3916: A5 0D        	lda	<L626+tt_1
 15265 08:3918: C5 01        	cmp	<R0
 15266 08:391A: D0 04        	bne	L637
 15267 08:391C: A5 0F        	lda	<L626+tt_1+2
 15268 08:391E: C5 03        	cmp	<R0+2
 15269                        L637:
 15270 08:3920: F0 03        	beq	L638
 15271 08:3922: 82 12 00     	brl	L10348
 15272                        L638:
 15273                        	.line	3503
 15274                        ;			i = (int) *tp - '0'; /* Get the 
                    LD number */
 15275                        	.line	3504
 15276 08:3925: A7 09        	lda	[<L626+tp_1]
 15277 08:3927: 29 FF 00     	and	#$ff
 15278 08:392A: 85 01        	sta	<R0
 15279 08:392C: 18           	clc
 15280 08:392D: A9 D0 FF     	lda	#$ffd0
 15281 08:3930: 65 01        	adc	<R0
 15282 08:3932: 85 12        	sta	<L626+i_1
 15283                        ;		}
 15284                        	.line	3505
 15285                        ;#if FF_STR_VOLUME_ID == 1	/* Arbitrary str
                    ing is enabled */
 15286                        ;		else
 15287 08:3934: 82 E6 00     	brl	L10349
 15288                        L10348:
 15289                        ;		{
 15290                        	.line	3508
 15291                        ;			i = 0;
 15292                        	.line	3509
 15293 08:3937: 64 12        	stz	<L626+i_1
 15294                        ;			do
 15295                        	.line	3510
 15296                        L10352:
 15297                        ;			{
  Mon Aug  9 2021 16:52                                                Page 292


 15298                        	.line	3511
 15299                        ;				sp = VolumeStr[i]; tp = 
                    *path; /* This string volume ID and path name */
 15300                        	.line	3512
 15301 08:3939: A5 12        	lda	<L626+i_1
 15302 08:393B: 0A           	asl	A
 15303 08:393C: 0A           	asl	A
 15304 08:393D: 85 01        	sta	<R0
 15305 08:393F: 18           	clc
 15306 08:3940: A9 xx xx     	lda	#<~~VolumeStr
 15307 08:3943: 65 01        	adc	<R0
 15308 08:3945: 85 05        	sta	<R1
 15309 08:3947: B2 05        	lda	(<R1)
 15310 08:3949: 85 16        	sta	<L626+sp_1
 15311 08:394B: A0 02 00     	ldy	#$2
 15312 08:394E: B1 05        	lda	(<R1),Y
 15313 08:3950: 85 18        	sta	<L626+sp_1+2
 15314                        	.line	3512
 15315 08:3952: A7 1E        	lda	[<L625+path_0]
 15316 08:3954: 85 09        	sta	<L626+tp_1
 15317 08:3956: A0 02 00     	ldy	#$2
 15318 08:3959: B7 1E        	lda	[<L625+path_0],Y
 15319 08:395B: 85 0B        	sta	<L626+tp_1+2
 15320                        ;				do
 15321                        	.line	3513
 15322                        L10355:
 15323                        ;				{ /* Compare the volume 
                    ID with path name */
 15324                        	.line	3514
 15325                        ;					c = *sp++; tc = 
                    *tp++;
 15326                        	.line	3515
 15327 08:395D: E2 20        	sep	#$20
 15328                        	longa	off
 15329 08:395F: A7 16        	lda	[<L626+sp_1]
 15330 08:3961: 85 1A        	sta	<L626+c_1
 15331 08:3963: C2 20        	rep	#$20
 15332                        	longa	on
 15333 08:3965: E6 16        	inc	<L626+sp_1
 15334 08:3967: D0 02        	bne	L639
 15335 08:3969: E6 18        	inc	<L626+sp_1+2
 15336                        L639:
 15337                        	.line	3515
 15338 08:396B: E2 20        	sep	#$20
 15339                        	longa	off
 15340 08:396D: A7 09        	lda	[<L626+tp_1]
 15341 08:396F: 85 11        	sta	<L626+tc_1
 15342 08:3971: C2 20        	rep	#$20
 15343                        	longa	on
 15344 08:3973: E6 09        	inc	<L626+tp_1
 15345 08:3975: D0 02        	bne	L640
 15346 08:3977: E6 0B        	inc	<L626+tp_1+2
 15347                        L640:
 15348                        ;					if (IsLower(c)) 
                    c -= 0x20;
 15349                        	.line	3516
 15350 08:3979: E2 20        	sep	#$20
 15351                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 293


 15352 08:397B: A5 1A        	lda	<L626+c_1
 15353 08:397D: C9 61        	cmp	#<$61
 15354 08:397F: C2 20        	rep	#$20
 15355                        	longa	on
 15356 08:3981: B0 03        	bcs	L641
 15357 08:3983: 82 24 00     	brl	L10356
 15358                        L641:
 15359 08:3986: E2 20        	sep	#$20
 15360                        	longa	off
 15361 08:3988: A9 7A        	lda	#$7a
 15362 08:398A: C5 1A        	cmp	<L626+c_1
 15363 08:398C: C2 20        	rep	#$20
 15364                        	longa	on
 15365 08:398E: B0 03        	bcs	L642
 15366 08:3990: 82 17 00     	brl	L10356
 15367                        L642:
 15368                        	.line	3516
 15369 08:3993: A5 1A        	lda	<L626+c_1
 15370 08:3995: 29 FF 00     	and	#$ff
 15371 08:3998: 85 01        	sta	<R0
 15372 08:399A: 18           	clc
 15373 08:399B: A9 E0 FF     	lda	#$ffe0
 15374 08:399E: 65 01        	adc	<R0
 15375 08:39A0: 85 05        	sta	<R1
 15376 08:39A2: E2 20        	sep	#$20
 15377                        	longa	off
 15378 08:39A4: A5 05        	lda	<R1
 15379 08:39A6: 85 1A        	sta	<L626+c_1
 15380 08:39A8: C2 20        	rep	#$20
 15381                        	longa	on
 15382                        ;					if (IsLower(tc))
                     tc -= 0x20;
 15383                        L10356:
 15384                        	.line	3517
 15385 08:39AA: E2 20        	sep	#$20
 15386                        	longa	off
 15387 08:39AC: A5 11        	lda	<L626+tc_1
 15388 08:39AE: C9 61        	cmp	#<$61
 15389 08:39B0: C2 20        	rep	#$20
 15390                        	longa	on
 15391 08:39B2: B0 03        	bcs	L643
 15392 08:39B4: 82 24 00     	brl	L10357
 15393                        L643:
 15394 08:39B7: E2 20        	sep	#$20
 15395                        	longa	off
 15396 08:39B9: A9 7A        	lda	#$7a
 15397 08:39BB: C5 11        	cmp	<L626+tc_1
 15398 08:39BD: C2 20        	rep	#$20
 15399                        	longa	on
 15400 08:39BF: B0 03        	bcs	L644
 15401 08:39C1: 82 17 00     	brl	L10357
 15402                        L644:
 15403                        	.line	3517
 15404 08:39C4: A5 11        	lda	<L626+tc_1
 15405 08:39C6: 29 FF 00     	and	#$ff
 15406 08:39C9: 85 01        	sta	<R0
 15407 08:39CB: 18           	clc
 15408 08:39CC: A9 E0 FF     	lda	#$ffe0
  Mon Aug  9 2021 16:52                                                Page 294


 15409 08:39CF: 65 01        	adc	<R0
 15410 08:39D1: 85 05        	sta	<R1
 15411 08:39D3: E2 20        	sep	#$20
 15412                        	longa	off
 15413 08:39D5: A5 05        	lda	<R1
 15414 08:39D7: 85 11        	sta	<L626+tc_1
 15415 08:39D9: C2 20        	rep	#$20
 15416                        	longa	on
 15417                        ;				}while (c && (TCHAR)c ==
                     tc);
 15418                        L10357:
 15419                        	.line	3518
 15420                        L10353:
 15421 08:39DB: A5 1A        	lda	<L626+c_1
 15422 08:39DD: 29 FF 00     	and	#$ff
 15423 08:39E0: D0 03        	bne	L646
 15424 08:39E2: 82 0D 00     	brl	L645
 15425                        L646:
 15426 08:39E5: E2 20        	sep	#$20
 15427                        	longa	off
 15428 08:39E7: A5 1A        	lda	<L626+c_1
 15429 08:39E9: C5 11        	cmp	<L626+tc_1
 15430 08:39EB: C2 20        	rep	#$20
 15431                        	longa	on
 15432 08:39ED: D0 03        	bne	L647
 15433 08:39EF: 82 6B FF     	brl	L10355
 15434                        L647:
 15435                        L645:
 15436                        L10354:
 15437                        ;			}while ((c || tp != tt) && ++i <
                     FF_VOLUMES); /* Repeat for each id until pattern match */
 15438                        	.line	3519
 15439                        L10350:
 15440 08:39F2: A5 1A        	lda	<L626+c_1
 15441 08:39F4: 29 FF 00     	and	#$ff
 15442 08:39F7: F0 03        	beq	L650
 15443 08:39F9: 82 0F 00     	brl	L649
 15444                        L650:
 15445 08:39FC: A5 09        	lda	<L626+tp_1
 15446 08:39FE: C5 0D        	cmp	<L626+tt_1
 15447 08:3A00: D0 04        	bne	L651
 15448 08:3A02: A5 0B        	lda	<L626+tp_1+2
 15449 08:3A04: C5 0F        	cmp	<L626+tt_1+2
 15450                        L651:
 15451 08:3A06: D0 03        	bne	L652
 15452 08:3A08: 82 12 00     	brl	L648
 15453                        L652:
 15454                        L649:
 15455 08:3A0B: E6 12        	inc	<L626+i_1
 15456 08:3A0D: 38           	sec
 15457 08:3A0E: A5 12        	lda	<L626+i_1
 15458 08:3A10: E9 08 00     	sbc	#<$8
 15459 08:3A13: 70 03        	bvs	L653
 15460 08:3A15: 49 00 80     	eor	#$8000
 15461                        L653:
 15462 08:3A18: 30 03        	bmi	L654
 15463 08:3A1A: 82 1C FF     	brl	L10352
 15464                        L654:
  Mon Aug  9 2021 16:52                                                Page 295


 15465                        L648:
 15466                        L10351:
 15467                        ;		}
 15468                        	.line	3520
 15469                        L10349:
 15470                        ;#endif
 15471                        ;		if (i < FF_VOLUMES)
 15472                        	.line	3522
 15473                        ;		{ /* If a volume ID is found, get the dr
                    ive number and strip it */
 15474 08:3A1D: 38           	sec
 15475 08:3A1E: A5 12        	lda	<L626+i_1
 15476 08:3A20: E9 08 00     	sbc	#<$8
 15477 08:3A23: 70 03        	bvs	L655
 15478 08:3A25: 49 00 80     	eor	#$8000
 15479                        L655:
 15480 08:3A28: 10 03        	bpl	L656
 15481 08:3A2A: 82 0F 00     	brl	L10358
 15482                        L656:
 15483                        	.line	3523
 15484                        ;			vol = i; /* Drive number */
 15485                        	.line	3524
 15486 08:3A2D: A5 12        	lda	<L626+i_1
 15487 08:3A2F: 85 14        	sta	<L626+vol_1
 15488                        ;			*path = tt; /* Snip the drive pr
                    efix off */
 15489                        	.line	3525
 15490 08:3A31: A5 0D        	lda	<L626+tt_1
 15491 08:3A33: 87 1E        	sta	[<L625+path_0]
 15492 08:3A35: A5 0F        	lda	<L626+tt_1+2
 15493 08:3A37: A0 02 00     	ldy	#$2
 15494 08:3A3A: 97 1E        	sta	[<L625+path_0],Y
 15495                        ;		}
 15496                        	.line	3526
 15497                        ;		return vol;
 15498                        L10358:
 15499                        	.line	3527
 15500 08:3A3C: A5 14        	lda	<L626+vol_1
 15501 08:3A3E: 82 60 FE     	brl	L629
 15502                        ;	}
 15503                        	.line	3528
 15504                        ;#if FF_STR_VOLUME_ID == 2		/* Unix 
                    style volume ID is enabled */
 15505                        ;	if (*tp == '/')
 15506                        ;	{
 15507                        ;		i = 0;
 15508                        ;		do
 15509                        ;		{
 15510                        ;			sp = VolumeStr[i]; tp = *path; /
                    * This string volume ID and path name */
 15511                        ;			do
 15512                        ;			{ /* Compare the volume ID with 
                    path name */
 15513                        ;				c = *sp++; tc = *(++tp);
 15514                        ;				if (IsLower(c)) c -= 0x2
                    0;
 15515                        ;				if (IsLower(tc)) tc -= 0
                    x20;
  Mon Aug  9 2021 16:52                                                Page 296


 15516                        ;			}while (c && (TCHAR)c == tc);
 15517                        ;		}while ((c || (tc != '/' && (UINT)tc >= 
                    (FF_USE_LFN ? ' ' : '!'))) && ++i < FF_VOLUMES); /* Repeat f
                    or each ID until pattern match */
 15518                        ;		if (i < FF_VOLUMES)
 15519                        ;		{ /* If a volume ID is found, get the dr
                    ive number and strip it */
 15520                        ;			vol = i; /* Drive number */
 15521                        ;			*path = tp; /* Snip the drive pr
                    efix off */
 15522                        ;			return vol;
 15523                        ;		}
 15524                        ;	}
 15525                        ;#endif
 15526                        ;	/* No drive prefix is found */
 15527                        ;#if FF_FS_RPATH != 0
 15528                        ;	vol = CurrVol; /* Default drive is current drive
                     */
 15529                        ;#else
 15530                        ;	vol = 0; /* Default drive is 0 */
 15531                        L10347:
 15532                        	.line	3555
 15533 08:3A41: 64 14        	stz	<L626+vol_1
 15534                        ;#endif
 15535                        ;	return vol; /* Return the default drive */
 15536                        	.line	3557
 15537 08:3A43: A5 14        	lda	<L626+vol_1
 15538 08:3A45: 82 59 FE     	brl	L629
 15539                        ;}
 15540                        	.line	3558
 15541                        	.endblock	3558
 15542             0000001A   L625	equ	26
 15543             00000009   L626	equ	9
 15544 08:3A48:              	ends
 15545                        	efunc
 15546                        	.endfunc	3558,9,26
 15547                        	.line	3558
 15548                        ;
 15549                        ;/*-----------------------------------------------
                    ------------------------*/
 15550                        ;/* GPT support functions                         
                                            */
 15551                        ;/*-----------------------------------------------
                    ------------------------*/
 15552                        ;
 15553                        ;#if FF_LBA64
 15554                        ;
 15555                        ;/* Calculate CRC32 in byte-by-byte */
 15556                        ;
 15557                        ;static DWORD crc32 ( /* Returns next CRC value */
 15558                        ;		DWORD crc, /* Current CRC value */
 15559                        ;		BYTE d /* A byte to be processed */
 15560                        ;)
 15561                        ;{
 15562                        ;	BYTE b;
 15563                        ;
 15564                        ;	for (b = 1; b; b <<= 1)
 15565                        ;	{
  Mon Aug  9 2021 16:52                                                Page 297


 15566                        ;		crc ^= (d & b) ? 1 : 0;
 15567                        ;		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 
                    : crc >> 1;
 15568                        ;	}
 15569                        ;	return crc;
 15570                        ;}
 15571                        ;
 15572                        ;/* Check validity of GPT header */
 15573                        ;
 15574                        ;static int test_gpt_header ( /* 0:Invalid, 1:Vali
                    d */
 15575                        ;		const BYTE* gpth /* Pointer to the GPT h
                    eader */
 15576                        ;)
 15577                        ;{
 15578                        ;	UINT i;
 15579                        ;	DWORD bcc;
 15580                        ;
 15581                        ;	if (mem_cmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1
                    \0" "\x5C\0\0", 16)) return 0; /* Check sign, version (1.0) 
                    and length (92) */
 15582                        ;	for (i = 0, bcc = 0xFFFFFFFF; i < 92; i++)
 15583                        ;	{ /* Check header BCC */
 15584                        ;		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : 
                    gpth[i]);
 15585                        ;	}
 15586                        ;	if (~bcc != ld_dword(gpth + GPTH_Bcc)) return 0;
 15587                        ;	if (ld_dword(gpth + GPTH_PteSize) != SZ_GPTE) re
                    turn 0; /* Table entry size (must be SZ_GPTE bytes) */
 15588                        ;	if (ld_dword(gpth + GPTH_PtNum) > 128) return 0;
                     /* Table size (must be 128 entries or less) */
 15589                        ;
 15590                        ;	return 1;
 15591                        ;}
 15592                        ;
 15593                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 15594                        ;
 15595                        ;/* Generate random value */
 15596                        ;static DWORD make_rand (
 15597                        ;		DWORD seed, /* Seed value */
 15598                        ;		BYTE* buff, /* Output buffer */
 15599                        ;		UINT n /* Data length */
 15600                        ;)
 15601                        ;{
 15602                        ;	UINT r;
 15603                        ;
 15604                        ;	if (seed == 0) seed = 1;
 15605                        ;	do
 15606                        ;	{
 15607                        ;		for (r = 0; r < 8; r++) seed = seed & 1 
                    ? seed >> 1 ^ 0xA3000000 : seed >> 1; /* Shift 8 bits the 32
                    -bit LFSR */
 15608                        ;		*buff++ = (BYTE)seed;
 15609                        ;	}while (--n);
 15610                        ;	return seed;
 15611                        ;}
 15612                        ;
 15613                        ;#endif
  Mon Aug  9 2021 16:52                                                Page 298


 15614                        ;#endif
 15615                        ;
 15616                        ;/*-----------------------------------------------
                    ------------------------*/
 15617                        ;/* Load a sector and check if it is an FAT VBR   
                                            */
 15618                        ;/*-----------------------------------------------
                    ------------------------*/
 15619                        ;
 15620                        ;/* Check what the sector is */
 15621                        ;
 15622                        ;static UINT check_fs( /* 0:FAT VBR, 1:exFAT VBR, 
                    2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
 15623                        ;FATFS* fs, /* Filesystem object */
 15624                        ;LBA_t sect /* Sector to load and check if it is a
                    n FAT-VBR or not */
 15625                        ;)
 15626                        ;{
 15627                        	.line	3633
 15628                        	.line	3637
 15629                        	FFDOS
 15630                        	func
 15631                        	.function	3637
 15632                        ~~check_fs:
 15633                        	longa	on
 15634                        	longi	on
 15635 08:3A48: 3B           	tsc
 15636 08:3A49: 38           	sec
 15637 08:3A4A: E9 08 00     	sbc	#L657
 15638 08:3A4D: 1B           	tcs
 15639 08:3A4E: 0B           	phd
 15640 08:3A4F: 5B           	tcd
 15641             00000004   fs_0	set	4
 15642             00000008   sect_0	set	8
 15643                        	.block	3637
 15644                        ;
 15645                        ;	////k_debug_long("check_fs:", sect);
 15646                        ;
 15647                        ;	fs->wflag = 0;
 15648                        	.sym	fs,4,138,6,32,75
 15649                        	.sym	sect,8,18,6,32
 15650                        	.line	3641
 15651 08:3A50: E2 20        	sep	#$20
 15652                        	longa	off
 15653 08:3A52: A9 00        	lda	#$0
 15654 08:3A54: A0 03 00     	ldy	#$3
 15655 08:3A57: 97 0C        	sta	[<L657+fs_0],Y
 15656 08:3A59: C2 20        	rep	#$20
 15657                        	longa	on
 15658                        ;	fs->winsect = (LBA_t) 0 - 1; /* Invaidate window
                     */
 15659                        	.line	3642
 15660 08:3A5B: A9 FF FF     	lda	#$ffff
 15661 08:3A5E: A0 2F 00     	ldy	#$2f
 15662 08:3A61: 97 0C        	sta	[<L657+fs_0],Y
 15663 08:3A63: A9 FF FF     	lda	#$ffff
 15664 08:3A66: A0 31 00     	ldy	#$31
 15665 08:3A69: 97 0C        	sta	[<L657+fs_0],Y
  Mon Aug  9 2021 16:52                                                Page 299


 15666                        ;	if (move_window(fs, sect) != FR_OK)
 15667                        	.line	3643
 15668                        ;		return 4; /* Load the boot sector */
 15669 08:3A6B: D4 12        	pei	<L657+sect_0+2
 15670 08:3A6D: D4 10        	pei	<L657+sect_0
 15671 08:3A6F: D4 0E        	pei	<L657+fs_0+2
 15672 08:3A71: D4 0C        	pei	<L657+fs_0
 15673 08:3A73: 22 97 08 08  	jsl	~~move_window
 15674 08:3A77: AA           	tax
 15675 08:3A78: D0 03        	bne	L660
 15676 08:3A7A: 82 15 00     	brl	L10359
 15677                        L660:
 15678                        	.line	3644
 15679 08:3A7D: A9 04 00     	lda	#$4
 15680                        L661:
 15681 08:3A80: A8           	tay
 15682 08:3A81: A5 0A        	lda	<L657+2
 15683 08:3A83: 85 12        	sta	<L657+2+8
 15684 08:3A85: A5 09        	lda	<L657+1
 15685 08:3A87: 85 11        	sta	<L657+1+8
 15686 08:3A89: 2B           	pld
 15687 08:3A8A: 3B           	tsc
 15688 08:3A8B: 18           	clc
 15689 08:3A8C: 69 10 00     	adc	#L657+8
 15690 08:3A8F: 1B           	tcs
 15691 08:3A90: 98           	tya
 15692 08:3A91: 6B           	rtl
 15693                        ;
 15694                        ;	//k_debug_integer("check_fs:ld_word(&fs->win[BS_
                    55AA]):",ld_word(&fs->win[BS_55AA]));
 15695                        ;	if (ld_word(&fs->win[BS_55AA]) != 0xAA55)
 15696                        L10359:
 15697                        	.line	3647
 15698                        ;		return 3; /* Check boot signature (alway
                    s here regardless of the sector size) */
 15699 08:3A92: 18           	clc
 15700 08:3A93: A9 31 02     	lda	#$231
 15701 08:3A96: 65 0C        	adc	<L657+fs_0
 15702 08:3A98: 85 01        	sta	<R0
 15703 08:3A9A: A9 00 00     	lda	#$0
 15704 08:3A9D: 65 0E        	adc	<L657+fs_0+2
 15705 08:3A9F: 85 03        	sta	<R0+2
 15706 08:3AA1: D4 03        	pei	<R0+2
 15707 08:3AA3: D4 01        	pei	<R0
 15708 08:3AA5: 22 00 00 08  	jsl	~~ld_word
 15709 08:3AA9: 85 05        	sta	<R1
 15710 08:3AAB: A5 05        	lda	<R1
 15711 08:3AAD: C9 55 AA     	cmp	#<$aa55
 15712 08:3AB0: D0 03        	bne	L662
 15713 08:3AB2: 82 06 00     	brl	L10360
 15714                        L662:
 15715                        	.line	3648
 15716 08:3AB5: A9 03 00     	lda	#$3
 15717 08:3AB8: 82 C5 FF     	brl	L661
 15718                        ;
 15719                        ;	if (FF_FS_EXFAT
 15720                        L10360:
 15721                        	.line	3650
  Mon Aug  9 2021 16:52                                                Page 300


 15722                        ;			&& !mem_cmp(&(fs->win[BS_JmpBoot
                    ]), "\xEB\x76\x90" "EXFAT   ", 11))
 15723                        ;		return 1; /* Check if exFAT VBR */
 15724 08:3ABB: 82 2C 00     	brl	L10361
 15725 08:3ABE: F4 0B 00     	pea	#<$b
 15726 08:3AC1: F4 xx xx     	pea	#^L607
 15727 08:3AC4: F4 xx xx     	pea	#<L607
 15728 08:3AC7: 18           	clc
 15729 08:3AC8: A9 33 00     	lda	#$33
 15730 08:3ACB: 65 0C        	adc	<L657+fs_0
 15731 08:3ACD: 85 01        	sta	<R0
 15732 08:3ACF: A9 00 00     	lda	#$0
 15733 08:3AD2: 65 0E        	adc	<L657+fs_0+2
 15734 08:3AD4: 85 03        	sta	<R0+2
 15735 08:3AD6: D4 03        	pei	<R0+2
 15736 08:3AD8: D4 01        	pei	<R0
 15737 08:3ADA: 22 16 02 08  	jsl	~~mem_cmp
 15738 08:3ADE: AA           	tax
 15739 08:3ADF: F0 03        	beq	L663
 15740 08:3AE1: 82 06 00     	brl	L10361
 15741                        L663:
 15742                        	.line	3652
 15743 08:3AE4: A9 01 00     	lda	#$1
 15744 08:3AE7: 82 96 FF     	brl	L661
 15745                        ;
 15746                        ;	////k_debug_hex("check_fs:BS_JmpBoot:", fs->win[
                    BS_JmpBoot]);
 15747                        ;
 15748                        ;	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_Jm
                    pBoot] == 0xEB
 15749                        L10361:
 15750                        	.line	3656
 15751                        ;			|| fs->win[BS_JmpBoot] == 0xE8)
 15752                        ;	{ /* Valid JumpBoot code? */
 15753 08:3AEA: E2 20        	sep	#$20
 15754                        	longa	off
 15755 08:3AEC: A0 33 00     	ldy	#$33
 15756 08:3AEF: B7 0C        	lda	[<L657+fs_0],Y
 15757 08:3AF1: C9 E9        	cmp	#<$e9
 15758 08:3AF3: C2 20        	rep	#$20
 15759                        	longa	on
 15760 08:3AF5: D0 03        	bne	L665
 15761 08:3AF7: 82 20 00     	brl	L664
 15762                        L665:
 15763 08:3AFA: E2 20        	sep	#$20
 15764                        	longa	off
 15765 08:3AFC: A0 33 00     	ldy	#$33
 15766 08:3AFF: B7 0C        	lda	[<L657+fs_0],Y
 15767 08:3B01: C9 EB        	cmp	#<$eb
 15768 08:3B03: C2 20        	rep	#$20
 15769                        	longa	on
 15770 08:3B05: D0 03        	bne	L666
 15771 08:3B07: 82 10 00     	brl	L664
 15772                        L666:
 15773 08:3B0A: E2 20        	sep	#$20
 15774                        	longa	off
 15775 08:3B0C: A0 33 00     	ldy	#$33
 15776 08:3B0F: B7 0C        	lda	[<L657+fs_0],Y
  Mon Aug  9 2021 16:52                                                Page 301


 15777 08:3B11: C9 E8        	cmp	#<$e8
 15778 08:3B13: C2 20        	rep	#$20
 15779                        	longa	on
 15780 08:3B15: F0 03        	beq	L667
 15781 08:3B17: 82 58 00     	brl	L10362
 15782                        L667:
 15783                        L664:
 15784                        	.line	3658
 15785                        ;		if (!mem_cmp(&(fs->win[BS_FilSysType]), 
                    "FAT", 3))
 15786                        	.line	3659
 15787                        ;			return 0; /* Is it an FAT VBR? *
                    /
 15788 08:3B1A: F4 03 00     	pea	#<$3
 15789 08:3B1D: F4 xx xx     	pea	#^L607+12
 15790 08:3B20: F4 xx xx     	pea	#<L607+12
 15791 08:3B23: 18           	clc
 15792 08:3B24: A9 69 00     	lda	#$69
 15793 08:3B27: 65 0C        	adc	<L657+fs_0
 15794 08:3B29: 85 01        	sta	<R0
 15795 08:3B2B: A9 00 00     	lda	#$0
 15796 08:3B2E: 65 0E        	adc	<L657+fs_0+2
 15797 08:3B30: 85 03        	sta	<R0+2
 15798 08:3B32: D4 03        	pei	<R0+2
 15799 08:3B34: D4 01        	pei	<R0
 15800 08:3B36: 22 16 02 08  	jsl	~~mem_cmp
 15801 08:3B3A: AA           	tax
 15802 08:3B3B: F0 03        	beq	L668
 15803 08:3B3D: 82 06 00     	brl	L10363
 15804                        L668:
 15805                        	.line	3660
 15806 08:3B40: A9 00 00     	lda	#$0
 15807 08:3B43: 82 3A FF     	brl	L661
 15808                        ;		if (!mem_cmp(&(fs->win[BS_FilSysType32])
                    , "FAT32", 5))
 15809                        L10363:
 15810                        	.line	3661
 15811                        ;			return 0; /* Is it an FAT32 VBR?
                     */
 15812 08:3B46: F4 05 00     	pea	#<$5
 15813 08:3B49: F4 xx xx     	pea	#^L607+16
 15814 08:3B4C: F4 xx xx     	pea	#<L607+16
 15815 08:3B4F: 18           	clc
 15816 08:3B50: A9 85 00     	lda	#$85
 15817 08:3B53: 65 0C        	adc	<L657+fs_0
 15818 08:3B55: 85 01        	sta	<R0
 15819 08:3B57: A9 00 00     	lda	#$0
 15820 08:3B5A: 65 0E        	adc	<L657+fs_0+2
 15821 08:3B5C: 85 03        	sta	<R0+2
 15822 08:3B5E: D4 03        	pei	<R0+2
 15823 08:3B60: D4 01        	pei	<R0
 15824 08:3B62: 22 16 02 08  	jsl	~~mem_cmp
 15825 08:3B66: AA           	tax
 15826 08:3B67: F0 03        	beq	L669
 15827 08:3B69: 82 06 00     	brl	L10364
 15828                        L669:
 15829                        	.line	3662
 15830 08:3B6C: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 302


 15831 08:3B6F: 82 0E FF     	brl	L661
 15832                        ;	}
 15833                        L10364:
 15834                        	.line	3663
 15835                        ;	return 2; /* Valid BS but not FAT */
 15836                        L10362:
 15837                        	.line	3664
 15838 08:3B72: A9 02 00     	lda	#$2
 15839 08:3B75: 82 08 FF     	brl	L661
 15840                        ;}
 15841                        	.line	3665
 15842                        	.endblock	3665
 15843             00000008   L657	equ	8
 15844             00000009   L658	equ	9
 15845 08:3B78:              	ends
 15846                        	efunc
 15847                        	.endfunc	3665,9,8
 15848                        	.line	3665
 15849                        	data
 15850                        L607:
 15851 00:00FD: EB 76 90 45  	db	$EB,$76,$FFFFFF90,$45,$58,$46,$41,$54,$2
                    0,$20,$20,$00,$46,$41,$54
       00:0101: 58 46 41 54 
       00:0105: 20 20 20 00 
       00:0109: 46 41 54 
 15852 00:010C: 00 46 41 54  	db	$00,$46,$41,$54,$33,$32,$00
       00:0110: 33 32 00 
 15853 00:0113:              	ends
 15854                        ;
 15855                        ;/* Find an FAT volume */
 15856                        ;/* (It supports only generic partitioning rules, 
                    MBR, GPT and SFD) */
 15857                        ;
 15858                        ;static UINT find_volume( /* Returns BS status fou
                    nd in the hosting drive */
 15859                        ;FATFS* fs, /* Filesystem object */
 15860                        ;UINT part /* Partition to fined = 0:auto, 1..:for
                    ced */
 15861                        ;)
 15862                        ;{
 15863                        	.line	3670
 15864                        	.line	3674
 15865                        	FFDOS
 15866                        	func
 15867                        	.function	3674
 15868                        ~~find_volume:
 15869                        	longa	on
 15870                        	longi	on
 15871 08:3B78: 3B           	tsc
 15872 08:3B79: 38           	sec
 15873 08:3B7A: E9 3C 00     	sbc	#L671
 15874 08:3B7D: 1B           	tcs
 15875 08:3B7E: 0B           	phd
 15876 08:3B7F: 5B           	tcd
 15877             00000004   fs_0	set	4
 15878             00000008   part_0	set	8
 15879                        	.block	3674
 15880                        ;	UINT fmt, i;
  Mon Aug  9 2021 16:52                                                Page 303


 15881                        ;	DWORD mbr_pt[4];
 15882                        ;
 15883                        ;	PPARTITIONTABLE ppt[4];
 15884                        ;
 15885                        ;	//k_debug_string("find_volume...\r\n");
 15886                        ;
 15887                        ;	fmt = check_fs(fs, 0); /* Load sector 0 and chec
                    k if it is an FAT VBR as SFD */
 15888             00000000   fmt_1	set	0
 15889             00000002   i_1	set	2
 15890             00000004   mbr_pt_1	set	4
 15891             00000014   ppt_1	set	20
 15892                        	.sym	fmt,0,16,1,16
 15893                        	.sym	i,2,16,1,16
 15894                        	.sym	mbr_pt,4,114,1,0,4
 15895                        	.sym	ppt,20,1130,1,32,98,4
 15896                        	.sym	fs,4,138,6,32,75
 15897                        	.sym	part,8,16,6,16
 15898                        	.line	3682
 15899 08:3B80: F4 00 00     	pea	#^$0
 15900 08:3B83: F4 00 00     	pea	#<$0
 15901 08:3B86: D4 42        	pei	<L671+fs_0+2
 15902 08:3B88: D4 40        	pei	<L671+fs_0
 15903 08:3B8A: 22 48 3A 08  	jsl	~~check_fs
 15904 08:3B8E: 85 19        	sta	<L672+fmt_1
 15905                        ;
 15906                        ;	//k_debug_integer("find_volume:fmt:", fmt);
 15907                        ;
 15908                        ;	if (fmt != 2 && (fmt >= 3 || part == 0))
 15909                        	.line	3686
 15910                        ;	{
 15911 08:3B90: A5 19        	lda	<L672+fmt_1
 15912 08:3B92: C9 02 00     	cmp	#<$2
 15913 08:3B95: D0 03        	bne	L674
 15914 08:3B97: 82 25 00     	brl	L10365
 15915                        L674:
 15916 08:3B9A: A5 19        	lda	<L672+fmt_1
 15917 08:3B9C: C9 03 00     	cmp	#<$3
 15918 08:3B9F: 90 03        	bcc	L676
 15919 08:3BA1: 82 07 00     	brl	L675
 15920                        L676:
 15921 08:3BA4: A5 44        	lda	<L671+part_0
 15922 08:3BA6: F0 03        	beq	L677
 15923 08:3BA8: 82 14 00     	brl	L10365
 15924                        L677:
 15925                        L675:
 15926                        	.line	3687
 15927                        ;		return fmt; /* Returns if it is a FAT VB
                    R as auto scan, not a BS or disk error */
 15928                        	.line	3688
 15929 08:3BAB: A5 19        	lda	<L672+fmt_1
 15930                        L678:
 15931 08:3BAD: A8           	tay
 15932 08:3BAE: A5 3E        	lda	<L671+2
 15933 08:3BB0: 85 44        	sta	<L671+2+6
 15934 08:3BB2: A5 3D        	lda	<L671+1
 15935 08:3BB4: 85 43        	sta	<L671+1+6
 15936 08:3BB6: 2B           	pld
  Mon Aug  9 2021 16:52                                                Page 304


 15937 08:3BB7: 3B           	tsc
 15938 08:3BB8: 18           	clc
 15939 08:3BB9: 69 42 00     	adc	#L671+6
 15940 08:3BBC: 1B           	tcs
 15941 08:3BBD: 98           	tya
 15942 08:3BBE: 6B           	rtl
 15943                        ;	}
 15944                        	.line	3689
 15945                        ;	/* Sector 0 is not an FAT VBR or forced partitio
                    n number wants a partition */
 15946                        ;
 15947                        ;#if FF_LBA64
 15948                        ;	if (fs->win[MBR_Table + PTE_System] == 0xEE)
 15949                        ;	{ /* GPT protective MBR? */
 15950                        ;		DWORD n_ent, v_ent, ofs;
 15951                        ;		QWORD pt_lba;
 15952                        ;
 15953                        ;		if (move_window(fs, 1) != FR_OK) return 
                    4; /* Load GPT header sector (next to MBR) */
 15954                        ;		if (!test_gpt_header(fs->win)) return 3;
                     /* Check if GPT header is valid */
 15955                        ;		n_ent = ld_dword(fs->win + GPTH_PtNum); 
                    /* Number of entries */
 15956                        ;		pt_lba = ld_qword(fs->win + GPTH_PtOfs);
                     /* Table location */
 15957                        ;		for (v_ent = i = 0; i < n_ent; i++)
 15958                        ;		{ /* Find FAT partition */
 15959                        ;			if (move_window(fs, pt_lba + i *
                     SZ_GPTE / SS(fs)) != FR_OK) return 4; /* PT sector */
 15960                        ;			ofs = i * SZ_GPTE % SS(fs); /* O
                    ffset in the sector */
 15961                        ;			if (!mem_cmp(fs->win + ofs + GPT
                    E_PtGuid, GUID_MS_Basic, 16))
 15962                        ;			{ /* MS basic data partition? */
 15963                        ;				v_ent++;
 15964                        ;				fmt = check_fs(fs, ld_qw
                    ord(fs->win + ofs + GPTE_FstLba)); /* Load VBR and check sta
                    tus */
 15965                        ;				if (part == 0 && fmt <= 
                    1) return fmt; /* Auto search (valid FAT volume found first)
                     */
 15966                        ;				if (part != 0 && v_ent =
                    = part) return fmt; /* Forced partition order (regardless of
                     it is valid or not) */
 15967                        ;			}
 15968                        ;		}
 15969                        ;		return 3; /* Not found */
 15970                        ;	}
 15971                        ;#endif
 15972                        ;	if (FF_MULTI_PARTITION && part > 4)
 15973                        L10365:
 15974                        	.line	3717
 15975                        ;		return 3; /* MBR has 4 partitions max */
 15976 08:3BBF: 82 10 00     	brl	L10366
 15977 08:3BC2: A9 04 00     	lda	#$4
 15978 08:3BC5: C5 44        	cmp	<L671+part_0
 15979 08:3BC7: 90 03        	bcc	L679
 15980 08:3BC9: 82 06 00     	brl	L10366
  Mon Aug  9 2021 16:52                                                Page 305


 15981                        L679:
 15982                        	.line	3718
 15983 08:3BCC: A9 03 00     	lda	#$3
 15984 08:3BCF: 82 DB FF     	brl	L678
 15985                        ;	for (i = 0; i < 4; i++)
 15986                        L10366:
 15987                        	.line	3719
 15988 08:3BD2: 64 1B        	stz	<L672+i_1
 15989                        L10369:
 15990                        ;	{ /* Load partition offset in the MBR */
 15991                        	.line	3720
 15992                        ;		//mbr_pt[i] = ld_dword(&(fs->win[ MBR_Ta
                    ble + i * SZ_PTE + PTE_StLba ]));
 15993                        ;
 15994                        ;		ppt[i] = (PPARTITIONTABLE) &(fs->win[(UL
                    ONG) MBR_Table
 15995                        	.line	3723
 15996                        ;				+ ((ULONG) i * 0x10L)]);
 15997 08:3BD4: A5 1B        	lda	<L672+i_1
 15998 08:3BD6: 85 05        	sta	<R1
 15999 08:3BD8: 64 07        	stz	<R1+2
 16000 08:3BDA: D4 07        	pei	<R1+2
 16001 08:3BDC: D4 05        	pei	<R1
 16002 08:3BDE: A9 02 00     	lda	#$2
 16003                        	xref	~~~lasl
 16004 08:3BE1: 22 xx xx xx  	jsl	~~~lasl
 16005 08:3BE5: 85 01        	sta	<R0
 16006 08:3BE7: 86 03        	stx	<R0+2
 16007 08:3BE9: 18           	clc
 16008 08:3BEA: 7B           	tdc
 16009 08:3BEB: 69 2D 00     	adc	#<L672+ppt_1
 16010 08:3BEE: 85 09        	sta	<R2
 16011 08:3BF0: A9 00 00     	lda	#$0
 16012 08:3BF3: 85 0B        	sta	<R2+2
 16013 08:3BF5: 18           	clc
 16014 08:3BF6: A5 09        	lda	<R2
 16015 08:3BF8: 65 01        	adc	<R0
 16016 08:3BFA: 85 0D        	sta	<R3
 16017 08:3BFC: A5 0B        	lda	<R2+2
 16018 08:3BFE: 65 03        	adc	<R0+2
 16019 08:3C00: 85 0F        	sta	<R3+2
 16020 08:3C02: A5 1B        	lda	<L672+i_1
 16021 08:3C04: 85 09        	sta	<R2
 16022 08:3C06: 64 0B        	stz	<R2+2
 16023 08:3C08: D4 0B        	pei	<R2+2
 16024 08:3C0A: D4 09        	pei	<R2
 16025 08:3C0C: A9 04 00     	lda	#$4
 16026                        	xref	~~~lasl
 16027 08:3C0F: 22 xx xx xx  	jsl	~~~lasl
 16028 08:3C13: 85 01        	sta	<R0
 16029 08:3C15: 86 03        	stx	<R0+2
 16030 08:3C17: 18           	clc
 16031 08:3C18: A9 F1 01     	lda	#$1f1
 16032 08:3C1B: 65 01        	adc	<R0
 16033 08:3C1D: 85 11        	sta	<17
 16034 08:3C1F: A9 00 00     	lda	#$0
 16035 08:3C22: 65 03        	adc	<R0+2
 16036 08:3C24: 85 13        	sta	<17+2
  Mon Aug  9 2021 16:52                                                Page 306


 16037 08:3C26: 18           	clc
 16038 08:3C27: A5 40        	lda	<L671+fs_0
 16039 08:3C29: 65 11        	adc	<17
 16040 08:3C2B: 85 01        	sta	<R0
 16041 08:3C2D: A5 42        	lda	<L671+fs_0+2
 16042 08:3C2F: 65 13        	adc	<17+2
 16043 08:3C31: 85 03        	sta	<R0+2
 16044 08:3C33: A5 01        	lda	<R0
 16045 08:3C35: 87 0D        	sta	[<R3]
 16046 08:3C37: A5 03        	lda	<R0+2
 16047 08:3C39: A0 02 00     	ldy	#$2
 16048 08:3C3C: 97 0D        	sta	[<R3],Y
 16049                        ;		////k_debug_hex("find_volume:ppt[i].part
                    ition_type:",ppt[i]->partition_type);
 16050                        ;		////k_debug_long("find_volume:ppt[i].sta
                    rt_sector:", ppt[i]->start_sector);
 16051                        ;
 16052                        ;		mbr_pt[i] = ld_dword(
 16053                        	.line	3728
 16054                        ;				&(fs->win[(ULONG) MBR_Ta
                    ble + ((ULONG) i * 0x10L)]));
 16055 08:3C3E: A5 1B        	lda	<L672+i_1
 16056 08:3C40: 85 05        	sta	<R1
 16057 08:3C42: 64 07        	stz	<R1+2
 16058 08:3C44: D4 07        	pei	<R1+2
 16059 08:3C46: D4 05        	pei	<R1
 16060 08:3C48: A9 02 00     	lda	#$2
 16061                        	xref	~~~lasl
 16062 08:3C4B: 22 xx xx xx  	jsl	~~~lasl
 16063 08:3C4F: 85 01        	sta	<R0
 16064 08:3C51: 86 03        	stx	<R0+2
 16065 08:3C53: 18           	clc
 16066 08:3C54: 7B           	tdc
 16067 08:3C55: 69 1D 00     	adc	#<L672+mbr_pt_1
 16068 08:3C58: 85 09        	sta	<R2
 16069 08:3C5A: A9 00 00     	lda	#$0
 16070 08:3C5D: 85 0B        	sta	<R2+2
 16071 08:3C5F: 18           	clc
 16072 08:3C60: A5 09        	lda	<R2
 16073 08:3C62: 65 01        	adc	<R0
 16074 08:3C64: 85 0D        	sta	<R3
 16075 08:3C66: A5 0B        	lda	<R2+2
 16076 08:3C68: 65 03        	adc	<R0+2
 16077 08:3C6A: 85 0F        	sta	<R3+2
 16078 08:3C6C: A5 1B        	lda	<L672+i_1
 16079 08:3C6E: 85 09        	sta	<R2
 16080 08:3C70: 64 0B        	stz	<R2+2
 16081 08:3C72: D4 0B        	pei	<R2+2
 16082 08:3C74: D4 09        	pei	<R2
 16083 08:3C76: A9 04 00     	lda	#$4
 16084                        	xref	~~~lasl
 16085 08:3C79: 22 xx xx xx  	jsl	~~~lasl
 16086 08:3C7D: 85 01        	sta	<R0
 16087 08:3C7F: 86 03        	stx	<R0+2
 16088 08:3C81: 18           	clc
 16089 08:3C82: A9 F1 01     	lda	#$1f1
 16090 08:3C85: 65 01        	adc	<R0
 16091 08:3C87: 85 11        	sta	<17
  Mon Aug  9 2021 16:52                                                Page 307


 16092 08:3C89: A9 00 00     	lda	#$0
 16093 08:3C8C: 65 03        	adc	<R0+2
 16094 08:3C8E: 85 13        	sta	<17+2
 16095 08:3C90: 18           	clc
 16096 08:3C91: A5 40        	lda	<L671+fs_0
 16097 08:3C93: 65 11        	adc	<17
 16098 08:3C95: 85 01        	sta	<R0
 16099 08:3C97: A5 42        	lda	<L671+fs_0+2
 16100 08:3C99: 65 13        	adc	<17+2
 16101 08:3C9B: 85 03        	sta	<R0+2
 16102 08:3C9D: D4 03        	pei	<R0+2
 16103 08:3C9F: D4 01        	pei	<R0
 16104 08:3CA1: 22 3B 00 08  	jsl	~~ld_dword
 16105 08:3CA5: 85 15        	sta	<21
 16106 08:3CA7: 86 17        	stx	<21+2
 16107 08:3CA9: A5 15        	lda	<21
 16108 08:3CAB: 87 0D        	sta	[<R3]
 16109 08:3CAD: A5 17        	lda	<21+2
 16110 08:3CAF: A0 02 00     	ldy	#$2
 16111 08:3CB2: 97 0D        	sta	[<R3],Y
 16112                        ;		////k_debug_long("find_volume:mbr_pt[i]:
                    ", mbr_pt[i]);
 16113                        ;	}
 16114                        	.line	3731
 16115                        L10367:
 16116 08:3CB4: E6 1B        	inc	<L672+i_1
 16117 08:3CB6: A5 1B        	lda	<L672+i_1
 16118 08:3CB8: C9 04 00     	cmp	#<$4
 16119 08:3CBB: B0 03        	bcs	L680
 16120 08:3CBD: 82 14 FF     	brl	L10369
 16121                        L680:
 16122                        L10368:
 16123                        ;
 16124                        ;	i = part ? part - 1 : 0; /* Table index to find 
                    first */
 16125                        	.line	3733
 16126 08:3CC0: A5 44        	lda	<L671+part_0
 16127 08:3CC2: D0 03        	bne	L682
 16128 08:3CC4: 82 08 00     	brl	L681
 16129                        L682:
 16130 08:3CC7: 18           	clc
 16131 08:3CC8: A9 FF FF     	lda	#$ffff
 16132 08:3CCB: 65 44        	adc	<L671+part_0
 16133 08:3CCD: 80 03        	bra	L683
 16134                        L681:
 16135 08:3CCF: A9 00 00     	lda	#$0
 16136                        L683:
 16137 08:3CD2: 85 1B        	sta	<L672+i_1
 16138                        ;
 16139                        ;	do
 16140                        	.line	3735
 16141                        L10372:
 16142                        ;	{ /* Find an FAT volume */
 16143                        	.line	3736
 16144                        ;
 16145                        ;		//fmt = mbr_pt[i] ? check_fs(fs,  mbr_pt
                    [i]) : 3;	/* Check if the partition is FAT */
 16146                        ;		fmt = mbr_pt[i] ? check_fs(fs, ppt[i]->s
  Mon Aug  9 2021 16:52                                                Page 308


                    tart_sector) : 3; /* Check if the partition is FAT */
 16147                        	.line	3739
 16148 08:3CD4: A5 1B        	lda	<L672+i_1
 16149 08:3CD6: 85 05        	sta	<R1
 16150 08:3CD8: 64 07        	stz	<R1+2
 16151 08:3CDA: D4 07        	pei	<R1+2
 16152 08:3CDC: D4 05        	pei	<R1
 16153 08:3CDE: A9 02 00     	lda	#$2
 16154                        	xref	~~~lasl
 16155 08:3CE1: 22 xx xx xx  	jsl	~~~lasl
 16156 08:3CE5: 85 01        	sta	<R0
 16157 08:3CE7: 86 03        	stx	<R0+2
 16158 08:3CE9: 18           	clc
 16159 08:3CEA: 7B           	tdc
 16160 08:3CEB: 69 1D 00     	adc	#<L672+mbr_pt_1
 16161 08:3CEE: 85 09        	sta	<R2
 16162 08:3CF0: A9 00 00     	lda	#$0
 16163 08:3CF3: 85 0B        	sta	<R2+2
 16164 08:3CF5: 18           	clc
 16165 08:3CF6: A5 09        	lda	<R2
 16166 08:3CF8: 65 01        	adc	<R0
 16167 08:3CFA: 85 0D        	sta	<R3
 16168 08:3CFC: A5 0B        	lda	<R2+2
 16169 08:3CFE: 65 03        	adc	<R0+2
 16170 08:3D00: 85 0F        	sta	<R3+2
 16171 08:3D02: A7 0D        	lda	[<R3]
 16172 08:3D04: A0 02 00     	ldy	#$2
 16173 08:3D07: 17 0D        	ora	[<R3],Y
 16174 08:3D09: D0 03        	bne	L685
 16175 08:3D0B: 82 4F 00     	brl	L684
 16176                        L685:
 16177 08:3D0E: A5 1B        	lda	<L672+i_1
 16178 08:3D10: 85 09        	sta	<R2
 16179 08:3D12: 64 0B        	stz	<R2+2
 16180 08:3D14: D4 0B        	pei	<R2+2
 16181 08:3D16: D4 09        	pei	<R2
 16182 08:3D18: A9 02 00     	lda	#$2
 16183                        	xref	~~~lasl
 16184 08:3D1B: 22 xx xx xx  	jsl	~~~lasl
 16185 08:3D1F: 85 01        	sta	<R0
 16186 08:3D21: 86 03        	stx	<R0+2
 16187 08:3D23: 18           	clc
 16188 08:3D24: 7B           	tdc
 16189 08:3D25: 69 2D 00     	adc	#<L672+ppt_1
 16190 08:3D28: 85 0D        	sta	<R3
 16191 08:3D2A: A9 00 00     	lda	#$0
 16192 08:3D2D: 85 0F        	sta	<R3+2
 16193 08:3D2F: 18           	clc
 16194 08:3D30: A5 0D        	lda	<R3
 16195 08:3D32: 65 01        	adc	<R0
 16196 08:3D34: 85 11        	sta	<17
 16197 08:3D36: A5 0F        	lda	<R3+2
 16198 08:3D38: 65 03        	adc	<R0+2
 16199 08:3D3A: 85 13        	sta	<17+2
 16200 08:3D3C: A7 11        	lda	[<17]
 16201 08:3D3E: 85 01        	sta	<R0
 16202 08:3D40: A0 02 00     	ldy	#$2
 16203 08:3D43: B7 11        	lda	[<17],Y
  Mon Aug  9 2021 16:52                                                Page 309


 16204 08:3D45: 85 03        	sta	<R0+2
 16205 08:3D47: A0 0A 00     	ldy	#$a
 16206 08:3D4A: B7 01        	lda	[<R0],Y
 16207 08:3D4C: 48           	pha
 16208 08:3D4D: A0 08 00     	ldy	#$8
 16209 08:3D50: B7 01        	lda	[<R0],Y
 16210 08:3D52: 48           	pha
 16211 08:3D53: D4 42        	pei	<L671+fs_0+2
 16212 08:3D55: D4 40        	pei	<L671+fs_0
 16213 08:3D57: 22 48 3A 08  	jsl	~~check_fs
 16214 08:3D5B: 80 03        	bra	L686
 16215                        L684:
 16216 08:3D5D: A9 03 00     	lda	#$3
 16217                        L686:
 16218 08:3D60: 85 19        	sta	<L672+fmt_1
 16219                        ;		////k_debug_integer("find_volume:part-fm
                    t:", fmt);
 16220                        ;	} while (part == 0 && fmt >= 2 && ++i < 4);
 16221                        	.line	3741
 16222                        L10370:
 16223 08:3D62: A5 44        	lda	<L671+part_0
 16224 08:3D64: F0 03        	beq	L688
 16225 08:3D66: 82 16 00     	brl	L687
 16226                        L688:
 16227 08:3D69: A5 19        	lda	<L672+fmt_1
 16228 08:3D6B: C9 02 00     	cmp	#<$2
 16229 08:3D6E: B0 03        	bcs	L689
 16230 08:3D70: 82 0C 00     	brl	L687
 16231                        L689:
 16232 08:3D73: E6 1B        	inc	<L672+i_1
 16233 08:3D75: A5 1B        	lda	<L672+i_1
 16234 08:3D77: C9 04 00     	cmp	#<$4
 16235 08:3D7A: B0 03        	bcs	L690
 16236 08:3D7C: 82 55 FF     	brl	L10372
 16237                        L690:
 16238                        L687:
 16239                        L10371:
 16240                        ;
 16241                        ;	//k_debug_integer("find_volume:fmt2:", fmt);
 16242                        ;
 16243                        ;	return fmt;
 16244                        	.line	3745
 16245 08:3D7F: A5 19        	lda	<L672+fmt_1
 16246 08:3D81: 82 29 FE     	brl	L678
 16247                        ;}
 16248                        	.line	3746
 16249                        	.endblock	3746
 16250             0000003C   L671	equ	60
 16251             00000019   L672	equ	25
 16252 08:3D84:              	ends
 16253                        	efunc
 16254                        	.endfunc	3746,25,60
 16255                        	.line	3746
 16256                        ;
 16257                        ;/*-----------------------------------------------
                    ------------------------*/
 16258                        ;/* Determine logical drive number and mount the v
                    olume if needed         */
  Mon Aug  9 2021 16:52                                                Page 310


 16259                        ;/*-----------------------------------------------
                    ------------------------*/
 16260                        ;
 16261                        ;static FRESULT mount_volume( /* FR_OK(0): success
                    ful, !=0: an error occurred */
 16262                        ;const TCHAR** path, /* Pointer to pointer to the 
                    path name (drive number) */
 16263                        ;FATFS** rfs, /* Pointer to pointer to the found f
                    ilesystem object */
 16264                        ;BYTE mode /* !=0: Check write protection for writ
                    e access */
 16265                        ;)
 16266                        ;{
 16267                        	.line	3752
 16268                        	.line	3757
 16269                        	FFDOS
 16270                        	func
 16271                        	.function	3757
 16272                        ~~mount_volume:
 16273                        	longa	on
 16274                        	longi	on
 16275 08:3D84: 3B           	tsc
 16276 08:3D85: 38           	sec
 16277 08:3D86: E9 33 00     	sbc	#L691
 16278 08:3D89: 1B           	tcs
 16279 08:3D8A: 0B           	phd
 16280 08:3D8B: 5B           	tcd
 16281             00000004   path_0	set	4
 16282             00000008   rfs_0	set	8
 16283             0000000C   mode_0	set	12
 16284                        	.block	3757
 16285                        ;	int vol;
 16286                        ;	DSTATUS stat;
 16287                        ;	LBA_t bsect;
 16288                        ;	DWORD tsect, sysect, fasize, nclst, szbfat;
 16289                        ;	WORD nrsv;
 16290                        ;	FATFS *fs;
 16291                        ;	UINT fmt;
 16292                        ;
 16293                        ;	//k_debug_string("mount_volume...\r\n");
 16294                        ;	//k_debug_pointer("mount_volume:1:_k_eventManage
                    r_IdleProcList->listhead:",_k_eventManager_IdleProcList->lis
                    thead);
 16295                        ;
 16296                        ;	/* Get logical drive number */
 16297                        ;	*rfs = 0;
 16298             00000000   vol_1	set	0
 16299             00000002   stat_1	set	2
 16300             00000003   bsect_1	set	3
 16301             00000007   tsect_1	set	7
 16302             0000000B   sysect_1	set	11
 16303             0000000F   fasize_1	set	15
 16304             00000013   nclst_1	set	19
 16305             00000017   szbfat_1	set	23
 16306             0000001B   nrsv_1	set	27
 16307             0000001D   fs_1	set	29
 16308             00000021   fmt_1	set	33
 16309                        	.sym	vol,0,5,1,16
  Mon Aug  9 2021 16:52                                                Page 311


 16310                        	.sym	stat,2,14,1,8
 16311                        	.sym	bsect,3,18,1,32
 16312                        	.sym	tsect,7,18,1,32
 16313                        	.sym	sysect,11,18,1,32
 16314                        	.sym	fasize,15,18,1,32
 16315                        	.sym	nclst,19,18,1,32
 16316                        	.sym	szbfat,23,18,1,32
 16317                        	.sym	nrsv,27,5,1,16
 16318                        	.sym	fs,29,138,1,32,75
 16319                        	.sym	fmt,33,16,1,16
 16320                        	.sym	path,4,1166,6,32
 16321                        	.sym	rfs,8,1162,6,32,75
 16322                        	.sym	mode,12,14,6,8
 16323                        	.line	3770
 16324 08:3D8C: A9 00 00     	lda	#$0
 16325 08:3D8F: 87 3B        	sta	[<L691+rfs_0]
 16326 08:3D91: A9 00 00     	lda	#$0
 16327 08:3D94: A0 02 00     	ldy	#$2
 16328 08:3D97: 97 3B        	sta	[<L691+rfs_0],Y
 16329                        ;	vol = get_ldnumber(path);
 16330                        	.line	3771
 16331 08:3D99: D4 39        	pei	<L691+path_0+2
 16332 08:3D9B: D4 37        	pei	<L691+path_0
 16333 08:3D9D: 22 76 38 08  	jsl	~~get_ldnumber
 16334 08:3DA1: 85 11        	sta	<L692+vol_1
 16335                        ;
 16336                        ;
 16337                        ;	;
 16338                        	.line	3774
 16339                        ;
 16340                        ;	//k_debug_integer("mount_volume:vol:", vol);
 16341                        ;
 16342                        ;	if (vol < 0)
 16343                        	.line	3778
 16344                        ;		return FR_INVALID_DRIVE;
 16345 08:3DA3: A5 11        	lda	<L692+vol_1
 16346 08:3DA5: 30 03        	bmi	L694
 16347 08:3DA7: 82 15 00     	brl	L10373
 16348                        L694:
 16349                        	.line	3779
 16350 08:3DAA: A9 0B 00     	lda	#$b
 16351                        L695:
 16352 08:3DAD: A8           	tay
 16353 08:3DAE: A5 35        	lda	<L691+2
 16354 08:3DB0: 85 3F        	sta	<L691+2+10
 16355 08:3DB2: A5 34        	lda	<L691+1
 16356 08:3DB4: 85 3E        	sta	<L691+1+10
 16357 08:3DB6: 2B           	pld
 16358 08:3DB7: 3B           	tsc
 16359 08:3DB8: 18           	clc
 16360 08:3DB9: 69 3D 00     	adc	#L691+10
 16361 08:3DBC: 1B           	tcs
 16362 08:3DBD: 98           	tya
 16363 08:3DBE: 6B           	rtl
 16364                        ;
 16365                        ;	/* Check if the filesystem object is valid or no
                    t */
 16366                        ;	fs = FatFs[vol]; /* Get pointer to the filesyste
  Mon Aug  9 2021 16:52                                                Page 312


                    m object */
 16367                        L10373:
 16368                        	.line	3782
 16369 08:3DBF: A5 11        	lda	<L692+vol_1
 16370 08:3DC1: 0A           	asl	A
 16371 08:3DC2: 0A           	asl	A
 16372 08:3DC3: 85 01        	sta	<R0
 16373 08:3DC5: 18           	clc
 16374 08:3DC6: A9 xx xx     	lda	#<~~FatFs
 16375 08:3DC9: 65 01        	adc	<R0
 16376 08:3DCB: 85 05        	sta	<R1
 16377 08:3DCD: B2 05        	lda	(<R1)
 16378 08:3DCF: 85 2E        	sta	<L692+fs_1
 16379 08:3DD1: A0 02 00     	ldy	#$2
 16380 08:3DD4: B1 05        	lda	(<R1),Y
 16381 08:3DD6: 85 30        	sta	<L692+fs_1+2
 16382                        ;	if (!fs)
 16383                        	.line	3783
 16384                        ;		return FR_NOT_ENABLED; /* Is the filesys
                    tem object available? */
 16385 08:3DD8: A5 2E        	lda	<L692+fs_1
 16386 08:3DDA: 05 30        	ora	<L692+fs_1+2
 16387 08:3DDC: F0 03        	beq	L696
 16388 08:3DDE: 82 06 00     	brl	L10374
 16389                        L696:
 16390                        	.line	3784
 16391 08:3DE1: A9 0C 00     	lda	#$c
 16392 08:3DE4: 82 C6 FF     	brl	L695
 16393                        ;#if FF_FS_REENTRANT
 16394                        ;	if (!lock_fs(fs)) return FR_TIMEOUT; /* Lock the
                     volume */
 16395                        ;#endif
 16396                        ;	*rfs = fs; /* Return pointer to the filesystem o
                    bject */
 16397                        L10374:
 16398                        	.line	3788
 16399 08:3DE7: A5 2E        	lda	<L692+fs_1
 16400 08:3DE9: 87 3B        	sta	[<L691+rfs_0]
 16401 08:3DEB: A5 30        	lda	<L692+fs_1+2
 16402 08:3DED: A0 02 00     	ldy	#$2
 16403 08:3DF0: 97 3B        	sta	[<L691+rfs_0],Y
 16404                        ;
 16405                        ;	//k_debug_pointer("mount_volume:3:_k_eventManage
                    r_IdleProcList->listhead:",_k_eventManager_IdleProcList->lis
                    thead);
 16406                        ;
 16407                        ;	mode &= (BYTE) ~FA_READ; /* Desired access mode,
                     write access or not */
 16408                        	.line	3792
 16409 08:3DF2: E2 20        	sep	#$20
 16410                        	longa	off
 16411 08:3DF4: A9 01        	lda	#$1
 16412 08:3DF6: 14 3F        	trb	<L691+mode_0
 16413 08:3DF8: C2 20        	rep	#$20
 16414                        	longa	on
 16415                        ;	if (fs->fs_type != 0)
 16416                        	.line	3793
 16417                        ;	{ /* If the volume has been mounted */
  Mon Aug  9 2021 16:52                                                Page 313


 16418 08:3DFA: A7 2E        	lda	[<L692+fs_1]
 16419 08:3DFC: 29 FF 00     	and	#$ff
 16420 08:3DFF: D0 03        	bne	L697
 16421 08:3E01: 82 40 00     	brl	L10375
 16422                        L697:
 16423                        	.line	3794
 16424                        ;		stat = disk_status(fs->pdrv);
 16425                        	.line	3795
 16426 08:3E04: A0 01 00     	ldy	#$1
 16427 08:3E07: B7 2E        	lda	[<L692+fs_1],Y
 16428 08:3E09: 48           	pha
 16429 08:3E0A: 22 xx xx xx  	jsl	~~disk_status
 16430 08:3E0E: E2 20        	sep	#$20
 16431                        	longa	off
 16432 08:3E10: 85 13        	sta	<L692+stat_1
 16433 08:3E12: C2 20        	rep	#$20
 16434                        	longa	on
 16435                        ;		if (!(stat & STA_NOINIT))
 16436                        	.line	3796
 16437                        ;		{ /* and the physical drive is kept init
                    ialized */
 16438 08:3E14: E2 20        	sep	#$20
 16439                        	longa	off
 16440 08:3E16: A5 13        	lda	<L692+stat_1
 16441 08:3E18: 29 01        	and	#<$1
 16442 08:3E1A: C2 20        	rep	#$20
 16443                        	longa	on
 16444 08:3E1C: F0 03        	beq	L698
 16445 08:3E1E: 82 23 00     	brl	L10376
 16446                        L698:
 16447                        	.line	3797
 16448                        ;			if (!FF_FS_READONLY && mode && (
                    stat & STA_PROTECT))
 16449                        	.line	3798
 16450                        ;			{ /* Check write protection if n
                    eeded */
 16451 08:3E21: A5 3F        	lda	<L691+mode_0
 16452 08:3E23: 29 FF 00     	and	#$ff
 16453 08:3E26: D0 03        	bne	L699
 16454 08:3E28: 82 13 00     	brl	L10377
 16455                        L699:
 16456 08:3E2B: E2 20        	sep	#$20
 16457                        	longa	off
 16458 08:3E2D: A5 13        	lda	<L692+stat_1
 16459 08:3E2F: 29 04        	and	#<$4
 16460 08:3E31: C2 20        	rep	#$20
 16461                        	longa	on
 16462 08:3E33: D0 03        	bne	L700
 16463 08:3E35: 82 06 00     	brl	L10377
 16464                        L700:
 16465                        	.line	3799
 16466                        ;				return FR_WRITE_PROTECTE
                    D;
 16467                        	.line	3800
 16468 08:3E38: A9 0A 00     	lda	#$a
 16469 08:3E3B: 82 6F FF     	brl	L695
 16470                        ;			}
 16471                        	.line	3801
  Mon Aug  9 2021 16:52                                                Page 314


 16472                        ;
 16473                        ;			////k_debug_integer("mount_volum
                    e:FR_OK:", FR_OK);
 16474                        ;
 16475                        ;			return FR_OK; /* The filesystem 
                    object is already valid */
 16476                        L10377:
 16477                        	.line	3805
 16478 08:3E3E: A9 00 00     	lda	#$0
 16479 08:3E41: 82 69 FF     	brl	L695
 16480                        ;		}
 16481                        	.line	3806
 16482                        ;	}
 16483                        L10376:
 16484                        	.line	3807
 16485                        ;
 16486                        ;	/* The filesystem object is not valid. */
 16487                        ;	/* Following code attempts to mount the volume. 
                    (find a FAT volume, analyze the BPB and initialize the files
                    ystem object) */
 16488                        ;
 16489                        ;	fs->fs_type = 0; /* Clear the filesystem object 
                    */
 16490                        L10375:
 16491                        	.line	3812
 16492 08:3E44: E2 20        	sep	#$20
 16493                        	longa	off
 16494 08:3E46: A9 00        	lda	#$0
 16495 08:3E48: 87 2E        	sta	[<L692+fs_1]
 16496 08:3E4A: C2 20        	rep	#$20
 16497                        	longa	on
 16498                        ;	fs->pdrv = LD2PD(vol); /* Volume hosting physica
                    l drive */
 16499                        	.line	3813
 16500 08:3E4C: E2 20        	sep	#$20
 16501                        	longa	off
 16502 08:3E4E: A5 11        	lda	<L692+vol_1
 16503 08:3E50: A0 01 00     	ldy	#$1
 16504 08:3E53: 97 2E        	sta	[<L692+fs_1],Y
 16505 08:3E55: C2 20        	rep	#$20
 16506                        	longa	on
 16507                        ;	stat = disk_initialize(fs->pdrv); /* Initialize 
                    the physical drive */
 16508                        	.line	3814
 16509 08:3E57: A0 01 00     	ldy	#$1
 16510 08:3E5A: B7 2E        	lda	[<L692+fs_1],Y
 16511 08:3E5C: 48           	pha
 16512 08:3E5D: 22 xx xx xx  	jsl	~~disk_initialize
 16513 08:3E61: E2 20        	sep	#$20
 16514                        	longa	off
 16515 08:3E63: 85 13        	sta	<L692+stat_1
 16516 08:3E65: C2 20        	rep	#$20
 16517                        	longa	on
 16518                        ;	if (stat & STA_NOINIT)
 16519                        	.line	3815
 16520                        ;	{ /* Check if the initialization succeeded */
 16521 08:3E67: E2 20        	sep	#$20
 16522                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 315


 16523 08:3E69: A5 13        	lda	<L692+stat_1
 16524 08:3E6B: 29 01        	and	#<$1
 16525 08:3E6D: C2 20        	rep	#$20
 16526                        	longa	on
 16527 08:3E6F: D0 03        	bne	L701
 16528 08:3E71: 82 06 00     	brl	L10378
 16529                        L701:
 16530                        	.line	3816
 16531                        ;		return FR_NOT_READY; /* Failed to initia
                    lize due to no medium or hard error */
 16532                        	.line	3817
 16533 08:3E74: A9 03 00     	lda	#$3
 16534 08:3E77: 82 33 FF     	brl	L695
 16535                        ;	}
 16536                        	.line	3818
 16537                        ;	if (!FF_FS_READONLY && mode && (stat & STA_PROTE
                    CT))
 16538                        L10378:
 16539                        	.line	3819
 16540                        ;	{ /* Check disk write protection if needed */
 16541 08:3E7A: A5 3F        	lda	<L691+mode_0
 16542 08:3E7C: 29 FF 00     	and	#$ff
 16543 08:3E7F: D0 03        	bne	L702
 16544 08:3E81: 82 13 00     	brl	L10379
 16545                        L702:
 16546 08:3E84: E2 20        	sep	#$20
 16547                        	longa	off
 16548 08:3E86: A5 13        	lda	<L692+stat_1
 16549 08:3E88: 29 04        	and	#<$4
 16550 08:3E8A: C2 20        	rep	#$20
 16551                        	longa	on
 16552 08:3E8C: D0 03        	bne	L703
 16553 08:3E8E: 82 06 00     	brl	L10379
 16554                        L703:
 16555                        	.line	3820
 16556                        ;		return FR_WRITE_PROTECTED;
 16557                        	.line	3821
 16558 08:3E91: A9 0A 00     	lda	#$a
 16559 08:3E94: 82 16 FF     	brl	L695
 16560                        ;	}
 16561                        	.line	3822
 16562                        ;#if FF_MAX_SS != FF_MIN_SS			
                    	/* Get sector size (multiple sector size cfg only) */
 16563                        ;	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs
                    )) != RES_OK) return FR_DISK_ERR;
 16564                        ;	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || 
                    (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 16565                        ;#endif
 16566                        ;
 16567                        ;	/* Find an FAT volume on the drive */
 16568                        ;	fmt = find_volume(fs, LD2PT(vol));
 16569                        L10379:
 16570                        	.line	3829
 16571 08:3E97: F4 00 00     	pea	#<$0
 16572 08:3E9A: D4 30        	pei	<L692+fs_1+2
 16573 08:3E9C: D4 2E        	pei	<L692+fs_1
 16574 08:3E9E: 22 78 3B 08  	jsl	~~find_volume
 16575 08:3EA2: 85 32        	sta	<L692+fmt_1
  Mon Aug  9 2021 16:52                                                Page 316


 16576                        ;
 16577                        ;	//k_debug_pointer("mount_volume:4:_k_eventManage
                    r_IdleProcList->listhead:",_k_eventManager_IdleProcList->lis
                    thead);
 16578                        ;
 16579                        ;	////k_debug_integer("mount_volume:fmt:", fmt);
 16580                        ;	//k_debug_integer("mount_volume::fmt:",fmt);
 16581                        ;
 16582                        ;	if (fmt == 4)
 16583                        	.line	3836
 16584                        ;		return FR_DISK_ERR; /* An error occured 
                    in the disk I/O layer */
 16585 08:3EA4: A5 32        	lda	<L692+fmt_1
 16586 08:3EA6: C9 04 00     	cmp	#<$4
 16587 08:3EA9: F0 03        	beq	L704
 16588 08:3EAB: 82 06 00     	brl	L10380
 16589                        L704:
 16590                        	.line	3837
 16591 08:3EAE: A9 01 00     	lda	#$1
 16592 08:3EB1: 82 F9 FE     	brl	L695
 16593                        ;	//if (fmt >= 2) return FR_NO_FILESYSTEM;	
                    /* No FAT volume is found */
 16594                        ;	if (fmt == 2)
 16595                        L10380:
 16596                        	.line	3839
 16597                        ;		return FR_NO_FILESYSTEM; /* No FAT volum
                    e is found */
 16598 08:3EB4: A5 32        	lda	<L692+fmt_1
 16599 08:3EB6: C9 02 00     	cmp	#<$2
 16600 08:3EB9: F0 03        	beq	L705
 16601 08:3EBB: 82 06 00     	brl	L10381
 16602                        L705:
 16603                        	.line	3840
 16604 08:3EBE: A9 0D 00     	lda	#$d
 16605 08:3EC1: 82 E9 FE     	brl	L695
 16606                        ;	bsect = fs->winsect; /* Volume location */
 16607                        L10381:
 16608                        	.line	3841
 16609 08:3EC4: A0 2F 00     	ldy	#$2f
 16610 08:3EC7: B7 2E        	lda	[<L692+fs_1],Y
 16611 08:3EC9: 85 14        	sta	<L692+bsect_1
 16612 08:3ECB: A0 31 00     	ldy	#$31
 16613 08:3ECE: B7 2E        	lda	[<L692+fs_1],Y
 16614 08:3ED0: 85 16        	sta	<L692+bsect_1+2
 16615                        ;
 16616                        ;	////k_debug_long("mount_volume:bsect:", bsect);
 16617                        ;	/* An FAT volume is found (bsect). Following cod
                    e initializes the filesystem object */
 16618                        ;
 16619                        ;#if FF_FS_EXFAT
 16620                        ;	if (fmt == 1)
 16621                        ;	{
 16622                        ;		QWORD maxlba;
 16623                        ;		DWORD so, cv, bcl, i;
 16624                        ;
 16625                        ;		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx 
                    + 53 && fs->win[i] == 0; i++); /* Check zero filler */
 16626                        ;		if (i < BPB_ZeroedEx + 53) return FR_NO_
  Mon Aug  9 2021 16:52                                                Page 317


                    FILESYSTEM;
 16627                        ;
 16628                        ;		if (ld_word(FADDR(BPB_FSVerEx)) != 0x100
                    ) return FR_NO_FILESYSTEM; /* Check exFAT version (must be v
                    ersion 1.0) */
 16629                        ;
 16630                        ;		if (1 << fs->win[BPB_BytsPerSecEx] != SS
                    (fs))
 16631                        ;		{ /* (BPB_BytsPerSecEx must be equal to 
                    the physical sector size) */
 16632                        ;			return FR_NO_FILESYSTEM;
 16633                        ;		}
 16634                        ;
 16635                        ;		maxlba = ld_qword(FADDR(BPB_TotSecEx)) +
                     bsect; /* Last LBA + 1 of the volume */
 16636                        ;		if (!FF_LBA64 && maxlba >= 0x100000000) 
                    return FR_NO_FILESYSTEM; /* (It cannot be handled in 32-bit 
                    LBA) */
 16637                        ;
 16638                        ;		fs->fsize = ld_dword(fs->win[BPB_FatSzEx
                    ]); /* Number of sectors per FAT */
 16639                        ;
 16640                        ;		fs->n_fats = fs->win[BPB_NumFATsEx]; /* 
                    Number of FATs */
 16641                        ;		if (fs->n_fats != 1) return FR_NO_FILESY
                    STEM; /* (Supports only 1 FAT) */
 16642                        ;
 16643                        ;		fs->csize = 1 << fs->win[BPB_SecPerClusE
                    x]; /* Cluster size */
 16644                        ;		if (fs->csize == 0) return FR_NO_FILESYS
                    TEM; /* (Must be 1..32768) */
 16645                        ;
 16646                        ;		nclst = ld_dword(fs->win + BPB_NumClusEx
                    ); /* Number of clusters */
 16647                        ;		if (nclst > MAX_EXFAT) return FR_NO_FILE
                    SYSTEM; /* (Too many clusters) */
 16648                        ;		fs->n_fatent = nclst + 2;
 16649                        ;
 16650                        ;		/* Boundaries and Limits */
 16651                        ;		fs->volbase = bsect;
 16652                        ;		fs->database = bsect + ld_dword(fs->win 
                    + BPB_DataOfsEx);
 16653                        ;		fs->fatbase = bsect + ld_dword(fs->win +
                     BPB_FatOfsEx);
 16654                        ;		if (maxlba < (QWORD)fs->database + nclst
                     * fs->csize) return FR_NO_FILESYSTEM; /* (Volume size must 
                    not be smaller than the size requiered) */
 16655                        ;		fs->dirbase = ld_dword(fs->win + BPB_Roo
                    tClusEx);
 16656                        ;
 16657                        ;		/* Get bitmap location and check if it i
                    s contiguous (implementation assumption) */
 16658                        ;		so = i = 0;
 16659                        ;		for (;;)
 16660                        ;		{ /* Find the bitmap entry in the root d
                    irectory (in only first cluster) */
 16661                        ;			if (i == 0)
 16662                        ;			{
  Mon Aug  9 2021 16:52                                                Page 318


 16663                        ;				if (so >= fs->csize) ret
                    urn FR_NO_FILESYSTEM; /* Not found? */
 16664                        ;				if (move_window(fs, clst
                    2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK
                    _ERR;
 16665                        ;				so++;
 16666                        ;			}
 16667                        ;			if (fs->win[i] == ET_BITMAP) bre
                    ak; /* Is it a bitmap entry? */
 16668                        ;			i = (i + SZDIRE) % SS(fs); /* Ne
                    xt entry */
 16669                        ;		}
 16670                        ;		bcl = ld_dword(fs->win + i + 20); /* Bit
                    map cluster */
 16671                        ;		if (bcl < 2 || bcl >= fs->n_fatent) retu
                    rn FR_NO_FILESYSTEM;
 16672                        ;		fs->bitbase = fs->database + fs->csize *
                     (bcl - 2); /* Bitmap sector */
 16673                        ;		for (;;)
 16674                        ;		{ /* Check if bitmap is contiguous */
 16675                        ;			if (move_window(fs, fs->fatbase 
                    + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 16676                        ;			cv = ld_dword(fs->win + bcl % (S
                    S(fs) / 4) * 4);
 16677                        ;			if (cv == 0xFFFFFFFF) break; /* 
                    Last link? */
 16678                        ;			if (cv != ++bcl) return FR_NO_FI
                    LESYSTEM; /* Fragmented? */
 16679                        ;		}
 16680                        ;
 16681                        ;#if !FF_FS_READONLY
 16682                        ;		fs->last_clst = fs->free_clst = 0xFFFFFF
                    FF; /* Initialize cluster allocation information */
 16683                        ;#endif
 16684                        ;		fmt = FS_EXFAT; /* FAT sub-type */
 16685                        ;	}
 16686                        ;	else
 16687                        ;#endif	/* FF_FS_EXFAT */
 16688                        ;	{
 16689                        	.line	3915
 16690                        ;
 16691                        ;		////k_debug_pointer("mount_volume:fs->wi
                    n:", fs->win);
 16692                        ;		//k_debug_long( "mount_volume:BPB_BytsPe
                    rSec:",(long)BPB_BytsPerSec);
 16693                        ;		//k_debug_integer("mount_volume:SS(fs):"
                    , SS(fs));
 16694                        ;		//k_debug_integer("mount_volume:fs->win 
                    + BPB_BytsPerSec:",ld_word(FADDR(BPB_BytsPerSec)));
 16695                        ;
 16696                        ;
 16697                        ;		if (ld_word(FADDR(BPB_BytsPerSec)) != SS
                    (fs))
 16698                        	.line	3923
 16699                        ;			return FR_NO_FILESYSTEM; /* (BPB
                    _BytsPerSec must be equal to the physical sector size) */
 16700 08:3ED2: 18           	clc
 16701 08:3ED3: A9 3E 00     	lda	#$3e
  Mon Aug  9 2021 16:52                                                Page 319


 16702 08:3ED6: 65 2E        	adc	<L692+fs_1
 16703 08:3ED8: 85 01        	sta	<R0
 16704 08:3EDA: A9 00 00     	lda	#$0
 16705 08:3EDD: 65 30        	adc	<L692+fs_1+2
 16706 08:3EDF: 85 03        	sta	<R0+2
 16707 08:3EE1: D4 03        	pei	<R0+2
 16708 08:3EE3: D4 01        	pei	<R0
 16709 08:3EE5: 22 00 00 08  	jsl	~~ld_word
 16710 08:3EE9: 85 05        	sta	<R1
 16711 08:3EEB: A5 05        	lda	<R1
 16712 08:3EED: C9 00 02     	cmp	#<$200
 16713 08:3EF0: D0 03        	bne	L706
 16714 08:3EF2: 82 06 00     	brl	L10382
 16715                        L706:
 16716                        	.line	3924
 16717 08:3EF5: A9 0D 00     	lda	#$d
 16718 08:3EF8: 82 B2 FE     	brl	L695
 16719                        ;
 16720                        ;		fasize = ld_word(FADDR(BPB_FATSz16)); /*
                     Number of sectors per FAT */
 16721                        L10382:
 16722                        	.line	3926
 16723 08:3EFB: 18           	clc
 16724 08:3EFC: A9 49 00     	lda	#$49
 16725 08:3EFF: 65 2E        	adc	<L692+fs_1
 16726 08:3F01: 85 01        	sta	<R0
 16727 08:3F03: A9 00 00     	lda	#$0
 16728 08:3F06: 65 30        	adc	<L692+fs_1+2
 16729 08:3F08: 85 03        	sta	<R0+2
 16730 08:3F0A: D4 03        	pei	<R0+2
 16731 08:3F0C: D4 01        	pei	<R0
 16732 08:3F0E: 22 00 00 08  	jsl	~~ld_word
 16733 08:3F12: 85 05        	sta	<R1
 16734 08:3F14: A0 00 00     	ldy	#$0
 16735 08:3F17: A5 05        	lda	<R1
 16736 08:3F19: 10 01        	bpl	L707
 16737 08:3F1B: 88           	dey
 16738                        L707:
 16739 08:3F1C: 85 20        	sta	<L692+fasize_1
 16740 08:3F1E: 84 22        	sty	<L692+fasize_1+2
 16741                        ;		if (fasize == 0)
 16742                        	.line	3927
 16743                        ;			fasize = ld_dword(&(fs->win[BPB_
                    FATSz32]));
 16744 08:3F20: A5 20        	lda	<L692+fasize_1
 16745 08:3F22: 05 22        	ora	<L692+fasize_1+2
 16746 08:3F24: F0 03        	beq	L708
 16747 08:3F26: 82 1B 00     	brl	L10383
 16748                        L708:
 16749                        	.line	3928
 16750 08:3F29: 18           	clc
 16751 08:3F2A: A9 57 00     	lda	#$57
 16752 08:3F2D: 65 2E        	adc	<L692+fs_1
 16753 08:3F2F: 85 01        	sta	<R0
 16754 08:3F31: A9 00 00     	lda	#$0
 16755 08:3F34: 65 30        	adc	<L692+fs_1+2
 16756 08:3F36: 85 03        	sta	<R0+2
 16757 08:3F38: D4 03        	pei	<R0+2
  Mon Aug  9 2021 16:52                                                Page 320


 16758 08:3F3A: D4 01        	pei	<R0
 16759 08:3F3C: 22 3B 00 08  	jsl	~~ld_dword
 16760 08:3F40: 85 20        	sta	<L692+fasize_1
 16761 08:3F42: 86 22        	stx	<L692+fasize_1+2
 16762                        ;		fs->fsize = fasize;
 16763                        L10383:
 16764                        	.line	3929
 16765 08:3F44: A5 20        	lda	<L692+fasize_1
 16766 08:3F46: A0 1B 00     	ldy	#$1b
 16767 08:3F49: 97 2E        	sta	[<L692+fs_1],Y
 16768 08:3F4B: A5 22        	lda	<L692+fasize_1+2
 16769 08:3F4D: A0 1D 00     	ldy	#$1d
 16770 08:3F50: 97 2E        	sta	[<L692+fs_1],Y
 16771                        ;
 16772                        ;		fs->n_fats = fs->win[BPB_NumFATs]; /* Nu
                    mber of FATs */
 16773                        	.line	3931
 16774 08:3F52: E2 20        	sep	#$20
 16775                        	longa	off
 16776 08:3F54: A0 43 00     	ldy	#$43
 16777 08:3F57: B7 2E        	lda	[<L692+fs_1],Y
 16778 08:3F59: A0 02 00     	ldy	#$2
 16779 08:3F5C: 97 2E        	sta	[<L692+fs_1],Y
 16780 08:3F5E: C2 20        	rep	#$20
 16781                        	longa	on
 16782                        ;
 16783                        ;		//k_debug_long("mount_volume:n_fats:", f
                    s->n_fats);
 16784                        ;		//k_debug_pointer("mount_volume:5:_k_eve
                    ntManager_IdleProcList->listhead:",_k_eventManager_IdleProcL
                    ist->listhead);
 16785                        ;
 16786                        ;		if (fs->n_fats != 1 && fs->n_fats != 2)
 16787                        	.line	3936
 16788                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be 1 or 2) */
 16789 08:3F60: E2 20        	sep	#$20
 16790                        	longa	off
 16791 08:3F62: A0 02 00     	ldy	#$2
 16792 08:3F65: B7 2E        	lda	[<L692+fs_1],Y
 16793 08:3F67: C9 01        	cmp	#<$1
 16794 08:3F69: C2 20        	rep	#$20
 16795                        	longa	on
 16796 08:3F6B: D0 03        	bne	L709
 16797 08:3F6D: 82 16 00     	brl	L10384
 16798                        L709:
 16799 08:3F70: E2 20        	sep	#$20
 16800                        	longa	off
 16801 08:3F72: A0 02 00     	ldy	#$2
 16802 08:3F75: B7 2E        	lda	[<L692+fs_1],Y
 16803 08:3F77: C9 02        	cmp	#<$2
 16804 08:3F79: C2 20        	rep	#$20
 16805                        	longa	on
 16806 08:3F7B: D0 03        	bne	L710
 16807 08:3F7D: 82 06 00     	brl	L10384
 16808                        L710:
 16809                        	.line	3937
 16810 08:3F80: A9 0D 00     	lda	#$d
  Mon Aug  9 2021 16:52                                                Page 321


 16811 08:3F83: 82 27 FE     	brl	L695
 16812                        ;		fasize *= fs->n_fats; /* Number of secto
                    rs for FAT area */
 16813                        L10384:
 16814                        	.line	3938
 16815 08:3F86: A0 02 00     	ldy	#$2
 16816 08:3F89: B7 2E        	lda	[<L692+fs_1],Y
 16817 08:3F8B: 29 FF 00     	and	#$ff
 16818 08:3F8E: 85 01        	sta	<R0
 16819 08:3F90: 64 03        	stz	<R0+2
 16820 08:3F92: D4 22        	pei	<L692+fasize_1+2
 16821 08:3F94: D4 20        	pei	<L692+fasize_1
 16822 08:3F96: D4 03        	pei	<R0+2
 16823 08:3F98: D4 01        	pei	<R0
 16824                        	xref	~~~lmul
 16825 08:3F9A: 22 xx xx xx  	jsl	~~~lmul
 16826 08:3F9E: 85 20        	sta	<L692+fasize_1
 16827 08:3FA0: 86 22        	stx	<L692+fasize_1+2
 16828                        ;
 16829                        ;		fs->csize = fs->win[BPB_SecPerClus]; /* 
                    Cluster size */
 16830                        	.line	3940
 16831 08:3FA2: A0 40 00     	ldy	#$40
 16832 08:3FA5: B7 2E        	lda	[<L692+fs_1],Y
 16833 08:3FA7: 29 FF 00     	and	#$ff
 16834 08:3FAA: A0 09 00     	ldy	#$9
 16835 08:3FAD: 97 2E        	sta	[<L692+fs_1],Y
 16836                        ;		if (fs->csize == 0 || (fs->csize & (fs->
                    csize - 1)))
 16837                        	.line	3941
 16838                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be power of 2) */
 16839 08:3FAF: A0 09 00     	ldy	#$9
 16840 08:3FB2: B7 2E        	lda	[<L692+fs_1],Y
 16841 08:3FB4: D0 03        	bne	L712
 16842 08:3FB6: 82 17 00     	brl	L711
 16843                        L712:
 16844 08:3FB9: 18           	clc
 16845 08:3FBA: A9 FF FF     	lda	#$ffff
 16846 08:3FBD: A0 09 00     	ldy	#$9
 16847 08:3FC0: 77 2E        	adc	[<L692+fs_1],Y
 16848 08:3FC2: 85 01        	sta	<R0
 16849 08:3FC4: A0 09 00     	ldy	#$9
 16850 08:3FC7: B7 2E        	lda	[<L692+fs_1],Y
 16851 08:3FC9: 25 01        	and	<R0
 16852 08:3FCB: D0 03        	bne	L713
 16853 08:3FCD: 82 06 00     	brl	L10385
 16854                        L713:
 16855                        L711:
 16856                        	.line	3942
 16857 08:3FD0: A9 0D 00     	lda	#$d
 16858 08:3FD3: 82 D7 FD     	brl	L695
 16859                        ;
 16860                        ;		fs->n_rootdir = ld_word(FADDR(BPB_RootEn
                    tCnt)); /* Number of root directory entries */
 16861                        L10385:
 16862                        	.line	3944
 16863 08:3FD6: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 322


 16864 08:3FD7: A9 44 00     	lda	#$44
 16865 08:3FDA: 65 2E        	adc	<L692+fs_1
 16866 08:3FDC: 85 01        	sta	<R0
 16867 08:3FDE: A9 00 00     	lda	#$0
 16868 08:3FE1: 65 30        	adc	<L692+fs_1+2
 16869 08:3FE3: 85 03        	sta	<R0+2
 16870 08:3FE5: D4 03        	pei	<R0+2
 16871 08:3FE7: D4 01        	pei	<R0
 16872 08:3FE9: 22 00 00 08  	jsl	~~ld_word
 16873 08:3FED: A0 07 00     	ldy	#$7
 16874 08:3FF0: 97 2E        	sta	[<L692+fs_1],Y
 16875                        ;		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 16876                        	.line	3945
 16877                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be sector aligned) */
 16878 08:3FF2: A0 07 00     	ldy	#$7
 16879 08:3FF5: B7 2E        	lda	[<L692+fs_1],Y
 16880 08:3FF7: 29 0F 00     	and	#<$f
 16881 08:3FFA: D0 03        	bne	L714
 16882 08:3FFC: 82 06 00     	brl	L10386
 16883                        L714:
 16884                        	.line	3946
 16885 08:3FFF: A9 0D 00     	lda	#$d
 16886 08:4002: 82 A8 FD     	brl	L695
 16887                        ;
 16888                        ;		tsect = ld_word(FADDR(BPB_TotSec16)); /*
                     Number of sectors on the volume */
 16889                        L10386:
 16890                        	.line	3948
 16891 08:4005: 18           	clc
 16892 08:4006: A9 46 00     	lda	#$46
 16893 08:4009: 65 2E        	adc	<L692+fs_1
 16894 08:400B: 85 01        	sta	<R0
 16895 08:400D: A9 00 00     	lda	#$0
 16896 08:4010: 65 30        	adc	<L692+fs_1+2
 16897 08:4012: 85 03        	sta	<R0+2
 16898 08:4014: D4 03        	pei	<R0+2
 16899 08:4016: D4 01        	pei	<R0
 16900 08:4018: 22 00 00 08  	jsl	~~ld_word
 16901 08:401C: 85 05        	sta	<R1
 16902 08:401E: A0 00 00     	ldy	#$0
 16903 08:4021: A5 05        	lda	<R1
 16904 08:4023: 10 01        	bpl	L715
 16905 08:4025: 88           	dey
 16906                        L715:
 16907 08:4026: 85 18        	sta	<L692+tsect_1
 16908 08:4028: 84 1A        	sty	<L692+tsect_1+2
 16909                        ;		if (tsect == 0)
 16910                        	.line	3949
 16911                        ;			tsect = ld_dword(fs->win + BPB_T
                    otSec32);
 16912 08:402A: A5 18        	lda	<L692+tsect_1
 16913 08:402C: 05 1A        	ora	<L692+tsect_1+2
 16914 08:402E: F0 03        	beq	L716
 16915 08:4030: 82 1B 00     	brl	L10387
 16916                        L716:
 16917                        	.line	3950
 16918 08:4033: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 323


 16919 08:4034: A9 53 00     	lda	#$53
 16920 08:4037: 65 2E        	adc	<L692+fs_1
 16921 08:4039: 85 01        	sta	<R0
 16922 08:403B: A9 00 00     	lda	#$0
 16923 08:403E: 65 30        	adc	<L692+fs_1+2
 16924 08:4040: 85 03        	sta	<R0+2
 16925 08:4042: D4 03        	pei	<R0+2
 16926 08:4044: D4 01        	pei	<R0
 16927 08:4046: 22 3B 00 08  	jsl	~~ld_dword
 16928 08:404A: 85 18        	sta	<L692+tsect_1
 16929 08:404C: 86 1A        	stx	<L692+tsect_1+2
 16930                        ;
 16931                        ;		nrsv = ld_word(FADDR(BPB_RsvdSecCnt)); /
                    * Number of reserved sectors */
 16932                        L10387:
 16933                        	.line	3952
 16934 08:404E: 18           	clc
 16935 08:404F: A9 41 00     	lda	#$41
 16936 08:4052: 65 2E        	adc	<L692+fs_1
 16937 08:4054: 85 01        	sta	<R0
 16938 08:4056: A9 00 00     	lda	#$0
 16939 08:4059: 65 30        	adc	<L692+fs_1+2
 16940 08:405B: 85 03        	sta	<R0+2
 16941 08:405D: D4 03        	pei	<R0+2
 16942 08:405F: D4 01        	pei	<R0
 16943 08:4061: 22 00 00 08  	jsl	~~ld_word
 16944 08:4065: 85 2C        	sta	<L692+nrsv_1
 16945                        ;		if (nrsv == 0)
 16946                        	.line	3953
 16947                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t not be 0) */
 16948 08:4067: A5 2C        	lda	<L692+nrsv_1
 16949 08:4069: F0 03        	beq	L717
 16950 08:406B: 82 06 00     	brl	L10388
 16951                        L717:
 16952                        	.line	3954
 16953 08:406E: A9 0D 00     	lda	#$d
 16954 08:4071: 82 39 FD     	brl	L695
 16955                        ;
 16956                        ;		/* Determine the FAT sub type */
 16957                        ;		sysect = nrsv + fasize + fs->n_rootdir /
                     (SS(fs) / SZDIRE); /* RSV + FAT + DIR */
 16958                        L10388:
 16959                        	.line	3957
 16960 08:4074: A0 07 00     	ldy	#$7
 16961 08:4077: B7 2E        	lda	[<L692+fs_1],Y
 16962 08:4079: 4A           	lsr	A
 16963 08:407A: 4A           	lsr	A
 16964 08:407B: 4A           	lsr	A
 16965 08:407C: 4A           	lsr	A
 16966 08:407D: 85 01        	sta	<R0
 16967 08:407F: A5 01        	lda	<R0
 16968 08:4081: 85 01        	sta	<R0
 16969 08:4083: 64 03        	stz	<R0+2
 16970 08:4085: A0 00 00     	ldy	#$0
 16971 08:4088: A5 2C        	lda	<L692+nrsv_1
 16972 08:408A: 10 01        	bpl	L718
 16973 08:408C: 88           	dey
  Mon Aug  9 2021 16:52                                                Page 324


 16974                        L718:
 16975 08:408D: 85 05        	sta	<R1
 16976 08:408F: 84 07        	sty	<R1+2
 16977 08:4091: 18           	clc
 16978 08:4092: A5 05        	lda	<R1
 16979 08:4094: 65 01        	adc	<R0
 16980 08:4096: 85 09        	sta	<R2
 16981 08:4098: A5 07        	lda	<R1+2
 16982 08:409A: 65 03        	adc	<R0+2
 16983 08:409C: 85 0B        	sta	<R2+2
 16984 08:409E: 18           	clc
 16985 08:409F: A5 09        	lda	<R2
 16986 08:40A1: 65 20        	adc	<L692+fasize_1
 16987 08:40A3: 85 1C        	sta	<L692+sysect_1
 16988 08:40A5: A5 0B        	lda	<R2+2
 16989 08:40A7: 65 22        	adc	<L692+fasize_1+2
 16990 08:40A9: 85 1E        	sta	<L692+sysect_1+2
 16991                        ;		if (tsect < sysect)
 16992                        	.line	3958
 16993                        ;			return FR_NO_FILESYSTEM; /* (Inv
                    alid volume size) */
 16994 08:40AB: A5 18        	lda	<L692+tsect_1
 16995 08:40AD: C5 1C        	cmp	<L692+sysect_1
 16996 08:40AF: A5 1A        	lda	<L692+tsect_1+2
 16997 08:40B1: E5 1E        	sbc	<L692+sysect_1+2
 16998 08:40B3: 90 03        	bcc	L719
 16999 08:40B5: 82 06 00     	brl	L10389
 17000                        L719:
 17001                        	.line	3959
 17002 08:40B8: A9 0D 00     	lda	#$d
 17003 08:40BB: 82 EF FC     	brl	L695
 17004                        ;		nclst = (tsect - sysect) / fs->csize; /*
                     Number of clusters */
 17005                        L10389:
 17006                        	.line	3960
 17007 08:40BE: A0 00 00     	ldy	#$0
 17008 08:40C1: 5A           	phy
 17009 08:40C2: A0 09 00     	ldy	#$9
 17010 08:40C5: B7 2E        	lda	[<L692+fs_1],Y
 17011 08:40C7: 7A           	ply
 17012 08:40C8: 2A           	rol	A
 17013 08:40C9: 6A           	ror	A
 17014 08:40CA: 10 01        	bpl	L720
 17015 08:40CC: 88           	dey
 17016                        L720:
 17017 08:40CD: 85 01        	sta	<R0
 17018 08:40CF: 84 03        	sty	<R0+2
 17019 08:40D1: 38           	sec
 17020 08:40D2: A5 18        	lda	<L692+tsect_1
 17021 08:40D4: E5 1C        	sbc	<L692+sysect_1
 17022 08:40D6: 85 05        	sta	<R1
 17023 08:40D8: A5 1A        	lda	<L692+tsect_1+2
 17024 08:40DA: E5 1E        	sbc	<L692+sysect_1+2
 17025 08:40DC: 85 07        	sta	<R1+2
 17026 08:40DE: D4 03        	pei	<R0+2
 17027 08:40E0: D4 01        	pei	<R0
 17028 08:40E2: D4 07        	pei	<R1+2
 17029 08:40E4: D4 05        	pei	<R1
  Mon Aug  9 2021 16:52                                                Page 325


 17030                        	xref	~~~ludv
 17031 08:40E6: 22 xx xx xx  	jsl	~~~ludv
 17032 08:40EA: 85 24        	sta	<L692+nclst_1
 17033 08:40EC: 86 26        	stx	<L692+nclst_1+2
 17034                        ;		if (nclst == 0)
 17035                        	.line	3961
 17036                        ;			return FR_NO_FILESYSTEM; /* (Inv
                    alid volume size) */
 17037 08:40EE: A5 24        	lda	<L692+nclst_1
 17038 08:40F0: 05 26        	ora	<L692+nclst_1+2
 17039 08:40F2: F0 03        	beq	L721
 17040 08:40F4: 82 06 00     	brl	L10390
 17041                        L721:
 17042                        	.line	3962
 17043 08:40F7: A9 0D 00     	lda	#$d
 17044 08:40FA: 82 B0 FC     	brl	L695
 17045                        ;		fmt = 0;
 17046                        L10390:
 17047                        	.line	3963
 17048 08:40FD: 64 32        	stz	<L692+fmt_1
 17049                        ;		if (nclst <= MAX_FAT32)
 17050                        	.line	3964
 17051                        ;			fmt = FS_FAT32;
 17052 08:40FF: A9 F5 FF     	lda	#$fff5
 17053 08:4102: C5 24        	cmp	<L692+nclst_1
 17054 08:4104: A9 FF 0F     	lda	#$fff
 17055 08:4107: E5 26        	sbc	<L692+nclst_1+2
 17056 08:4109: B0 03        	bcs	L722
 17057 08:410B: 82 05 00     	brl	L10391
 17058                        L722:
 17059                        	.line	3965
 17060 08:410E: A9 03 00     	lda	#$3
 17061 08:4111: 85 32        	sta	<L692+fmt_1
 17062                        ;		if (nclst <= MAX_FAT16)
 17063                        L10391:
 17064                        	.line	3966
 17065                        ;			fmt = FS_FAT16;
 17066 08:4113: A9 F5 FF     	lda	#$fff5
 17067 08:4116: C5 24        	cmp	<L692+nclst_1
 17068 08:4118: A9 00 00     	lda	#$0
 17069 08:411B: E5 26        	sbc	<L692+nclst_1+2
 17070 08:411D: B0 03        	bcs	L723
 17071 08:411F: 82 05 00     	brl	L10392
 17072                        L723:
 17073                        	.line	3967
 17074 08:4122: A9 02 00     	lda	#$2
 17075 08:4125: 85 32        	sta	<L692+fmt_1
 17076                        ;		if (nclst <= MAX_FAT12)
 17077                        L10392:
 17078                        	.line	3968
 17079                        ;			fmt = FS_FAT12;
 17080 08:4127: A9 F5 0F     	lda	#$ff5
 17081 08:412A: C5 24        	cmp	<L692+nclst_1
 17082 08:412C: A9 00 00     	lda	#$0
 17083 08:412F: E5 26        	sbc	<L692+nclst_1+2
 17084 08:4131: B0 03        	bcs	L724
 17085 08:4133: 82 05 00     	brl	L10393
 17086                        L724:
  Mon Aug  9 2021 16:52                                                Page 326


 17087                        	.line	3969
 17088 08:4136: A9 01 00     	lda	#$1
 17089 08:4139: 85 32        	sta	<L692+fmt_1
 17090                        ;		if (fmt == 0)
 17091                        L10393:
 17092                        	.line	3970
 17093                        ;			return FR_NO_FILESYSTEM;
 17094 08:413B: A5 32        	lda	<L692+fmt_1
 17095 08:413D: F0 03        	beq	L725
 17096 08:413F: 82 06 00     	brl	L10394
 17097                        L725:
 17098                        	.line	3971
 17099 08:4142: A9 0D 00     	lda	#$d
 17100 08:4145: 82 65 FC     	brl	L695
 17101                        ;
 17102                        ;		/* Boundaries and Limits */
 17103                        ;		fs->n_fatent = nclst + 2; /* Number of F
                    AT entries */
 17104                        L10394:
 17105                        	.line	3974
 17106 08:4148: 18           	clc
 17107 08:4149: A9 02 00     	lda	#$2
 17108 08:414C: 65 24        	adc	<L692+nclst_1
 17109 08:414E: 85 01        	sta	<R0
 17110 08:4150: A9 00 00     	lda	#$0
 17111 08:4153: 65 26        	adc	<L692+nclst_1+2
 17112 08:4155: 85 03        	sta	<R0+2
 17113 08:4157: A5 01        	lda	<R0
 17114 08:4159: A0 17 00     	ldy	#$17
 17115 08:415C: 97 2E        	sta	[<L692+fs_1],Y
 17116 08:415E: A5 03        	lda	<R0+2
 17117 08:4160: A0 19 00     	ldy	#$19
 17118 08:4163: 97 2E        	sta	[<L692+fs_1],Y
 17119                        ;		fs->volbase = bsect; /* Volume start sec
                    tor */
 17120                        	.line	3975
 17121 08:4165: A5 14        	lda	<L692+bsect_1
 17122 08:4167: A0 1F 00     	ldy	#$1f
 17123 08:416A: 97 2E        	sta	[<L692+fs_1],Y
 17124 08:416C: A5 16        	lda	<L692+bsect_1+2
 17125 08:416E: A0 21 00     	ldy	#$21
 17126 08:4171: 97 2E        	sta	[<L692+fs_1],Y
 17127                        ;		fs->fatbase = bsect + nrsv; /* FAT start
                     sector */
 17128                        	.line	3976
 17129 08:4173: A0 00 00     	ldy	#$0
 17130 08:4176: A5 2C        	lda	<L692+nrsv_1
 17131 08:4178: 10 01        	bpl	L726
 17132 08:417A: 88           	dey
 17133                        L726:
 17134 08:417B: 85 01        	sta	<R0
 17135 08:417D: 84 03        	sty	<R0+2
 17136 08:417F: 18           	clc
 17137 08:4180: A5 01        	lda	<R0
 17138 08:4182: 65 14        	adc	<L692+bsect_1
 17139 08:4184: 85 05        	sta	<R1
 17140 08:4186: A5 03        	lda	<R0+2
 17141 08:4188: 65 16        	adc	<L692+bsect_1+2
  Mon Aug  9 2021 16:52                                                Page 327


 17142 08:418A: 85 07        	sta	<R1+2
 17143 08:418C: A5 05        	lda	<R1
 17144 08:418E: A0 23 00     	ldy	#$23
 17145 08:4191: 97 2E        	sta	[<L692+fs_1],Y
 17146 08:4193: A5 07        	lda	<R1+2
 17147 08:4195: A0 25 00     	ldy	#$25
 17148 08:4198: 97 2E        	sta	[<L692+fs_1],Y
 17149                        ;		fs->database = bsect + sysect; /* Data s
                    tart sector */
 17150                        	.line	3977
 17151 08:419A: 18           	clc
 17152 08:419B: A5 14        	lda	<L692+bsect_1
 17153 08:419D: 65 1C        	adc	<L692+sysect_1
 17154 08:419F: 85 01        	sta	<R0
 17155 08:41A1: A5 16        	lda	<L692+bsect_1+2
 17156 08:41A3: 65 1E        	adc	<L692+sysect_1+2
 17157 08:41A5: 85 03        	sta	<R0+2
 17158 08:41A7: A5 01        	lda	<R0
 17159 08:41A9: A0 2B 00     	ldy	#$2b
 17160 08:41AC: 97 2E        	sta	[<L692+fs_1],Y
 17161 08:41AE: A5 03        	lda	<R0+2
 17162 08:41B0: A0 2D 00     	ldy	#$2d
 17163 08:41B3: 97 2E        	sta	[<L692+fs_1],Y
 17164                        ;		if (fmt == FS_FAT32)
 17165                        	.line	3978
 17166                        ;		{
 17167 08:41B5: A5 32        	lda	<L692+fmt_1
 17168 08:41B7: C9 03 00     	cmp	#<$3
 17169 08:41BA: F0 03        	beq	L727
 17170 08:41BC: 82 76 00     	brl	L10395
 17171                        L727:
 17172                        	.line	3979
 17173                        ;			if (ld_word(FADDR(BPB_FSVer32)) 
                    != 0)
 17174                        	.line	3980
 17175                        ;				return FR_NO_FILESYSTEM;
                     /* (Must be FAT32 revision 0.0) */
 17176 08:41BF: 18           	clc
 17177 08:41C0: A9 5D 00     	lda	#$5d
 17178 08:41C3: 65 2E        	adc	<L692+fs_1
 17179 08:41C5: 85 01        	sta	<R0
 17180 08:41C7: A9 00 00     	lda	#$0
 17181 08:41CA: 65 30        	adc	<L692+fs_1+2
 17182 08:41CC: 85 03        	sta	<R0+2
 17183 08:41CE: D4 03        	pei	<R0+2
 17184 08:41D0: D4 01        	pei	<R0
 17185 08:41D2: 22 00 00 08  	jsl	~~ld_word
 17186 08:41D6: AA           	tax
 17187 08:41D7: D0 03        	bne	L728
 17188 08:41D9: 82 06 00     	brl	L10396
 17189                        L728:
 17190                        	.line	3981
 17191 08:41DC: A9 0D 00     	lda	#$d
 17192 08:41DF: 82 CB FB     	brl	L695
 17193                        ;			if (fs->n_rootdir != 0)
 17194                        L10396:
 17195                        	.line	3982
 17196                        ;				return FR_NO_FILESYSTEM;
  Mon Aug  9 2021 16:52                                                Page 328


                     /* (BPB_RootEntCnt must be 0) */
 17197 08:41E2: A0 07 00     	ldy	#$7
 17198 08:41E5: B7 2E        	lda	[<L692+fs_1],Y
 17199 08:41E7: D0 03        	bne	L729
 17200 08:41E9: 82 06 00     	brl	L10397
 17201                        L729:
 17202                        	.line	3983
 17203 08:41EC: A9 0D 00     	lda	#$d
 17204 08:41EF: 82 BB FB     	brl	L695
 17205                        ;			fs->dirbase = ld_dword(fs->win +
                     BPB_RootClus32); /* Root directory start cluster */
 17206                        L10397:
 17207                        	.line	3984
 17208 08:41F2: 18           	clc
 17209 08:41F3: A9 5F 00     	lda	#$5f
 17210 08:41F6: 65 2E        	adc	<L692+fs_1
 17211 08:41F8: 85 01        	sta	<R0
 17212 08:41FA: A9 00 00     	lda	#$0
 17213 08:41FD: 65 30        	adc	<L692+fs_1+2
 17214 08:41FF: 85 03        	sta	<R0+2
 17215 08:4201: D4 03        	pei	<R0+2
 17216 08:4203: D4 01        	pei	<R0
 17217 08:4205: 22 3B 00 08  	jsl	~~ld_dword
 17218 08:4209: 85 05        	sta	<R1
 17219 08:420B: 86 07        	stx	<R1+2
 17220 08:420D: A5 05        	lda	<R1
 17221 08:420F: A0 27 00     	ldy	#$27
 17222 08:4212: 97 2E        	sta	[<L692+fs_1],Y
 17223 08:4214: A5 07        	lda	<R1+2
 17224 08:4216: A0 29 00     	ldy	#$29
 17225 08:4219: 97 2E        	sta	[<L692+fs_1],Y
 17226                        ;			szbfat = fs->n_fatent * 4; /* (N
                    eeded FAT size) */
 17227                        	.line	3985
 17228 08:421B: A0 19 00     	ldy	#$19
 17229 08:421E: B7 2E        	lda	[<L692+fs_1],Y
 17230 08:4220: 48           	pha
 17231 08:4221: A0 17 00     	ldy	#$17
 17232 08:4224: B7 2E        	lda	[<L692+fs_1],Y
 17233 08:4226: 48           	pha
 17234 08:4227: A9 02 00     	lda	#$2
 17235                        	xref	~~~lasl
 17236 08:422A: 22 xx xx xx  	jsl	~~~lasl
 17237 08:422E: 85 28        	sta	<L692+szbfat_1
 17238 08:4230: 86 2A        	stx	<L692+szbfat_1+2
 17239                        ;		}
 17240                        	.line	3986
 17241                        ;		else
 17242 08:4232: 82 AA 00     	brl	L10398
 17243                        L10395:
 17244                        ;		{
 17245                        	.line	3988
 17246                        ;			if (fs->n_rootdir == 0)
 17247                        	.line	3989
 17248                        ;				return FR_NO_FILESYSTEM;
                     /* (BPB_RootEntCnt must not be 0) */
 17249 08:4235: A0 07 00     	ldy	#$7
 17250 08:4238: B7 2E        	lda	[<L692+fs_1],Y
  Mon Aug  9 2021 16:52                                                Page 329


 17251 08:423A: F0 03        	beq	L730
 17252 08:423C: 82 06 00     	brl	L10399
 17253                        L730:
 17254                        	.line	3990
 17255 08:423F: A9 0D 00     	lda	#$d
 17256 08:4242: 82 68 FB     	brl	L695
 17257                        ;			fs->dirbase = fs->fatbase + fasi
                    ze; /* Root directory start sector */
 17258                        L10399:
 17259                        	.line	3991
 17260 08:4245: 18           	clc
 17261 08:4246: A0 23 00     	ldy	#$23
 17262 08:4249: B7 2E        	lda	[<L692+fs_1],Y
 17263 08:424B: 65 20        	adc	<L692+fasize_1
 17264 08:424D: 85 01        	sta	<R0
 17265 08:424F: A0 25 00     	ldy	#$25
 17266 08:4252: B7 2E        	lda	[<L692+fs_1],Y
 17267 08:4254: 65 22        	adc	<L692+fasize_1+2
 17268 08:4256: 85 03        	sta	<R0+2
 17269 08:4258: A5 01        	lda	<R0
 17270 08:425A: A0 27 00     	ldy	#$27
 17271 08:425D: 97 2E        	sta	[<L692+fs_1],Y
 17272 08:425F: A5 03        	lda	<R0+2
 17273 08:4261: A0 29 00     	ldy	#$29
 17274 08:4264: 97 2E        	sta	[<L692+fs_1],Y
 17275                        ;			szbfat = (fmt == FS_FAT16) ? /* 
                    (Needed FAT size) */
 17276                        	.line	3992
 17277                        ;			fs->n_fatent * 2 : fs->n_fatent 
                    * 3 / 2 + (fs->n_fatent & 1);
 17278 08:4266: A5 32        	lda	<L692+fmt_1
 17279 08:4268: C9 02 00     	cmp	#<$2
 17280 08:426B: F0 03        	beq	L732
 17281 08:426D: 82 1D 00     	brl	L731
 17282                        L732:
 17283 08:4270: A0 19 00     	ldy	#$19
 17284 08:4273: B7 2E        	lda	[<L692+fs_1],Y
 17285 08:4275: 48           	pha
 17286 08:4276: A0 17 00     	ldy	#$17
 17287 08:4279: B7 2E        	lda	[<L692+fs_1],Y
 17288 08:427B: 48           	pha
 17289 08:427C: A9 01 00     	lda	#$1
 17290                        	xref	~~~lasl
 17291 08:427F: 22 xx xx xx  	jsl	~~~lasl
 17292 08:4283: 85 01        	sta	<R0
 17293 08:4285: 86 03        	stx	<R0+2
 17294 08:4287: A6 03        	ldx	<R0+2
 17295 08:4289: A5 01        	lda	<R0
 17296 08:428B: 80 46        	bra	L733
 17297                        L731:
 17298 08:428D: A0 17 00     	ldy	#$17
 17299 08:4290: B7 2E        	lda	[<L692+fs_1],Y
 17300 08:4292: 29 01 00     	and	#<$1
 17301 08:4295: 85 01        	sta	<R0
 17302 08:4297: 64 03        	stz	<R0+2
 17303 08:4299: F4 00 00     	pea	#^$3
 17304 08:429C: F4 03 00     	pea	#<$3
 17305 08:429F: A0 19 00     	ldy	#$19
  Mon Aug  9 2021 16:52                                                Page 330


 17306 08:42A2: B7 2E        	lda	[<L692+fs_1],Y
 17307 08:42A4: 48           	pha
 17308 08:42A5: A0 17 00     	ldy	#$17
 17309 08:42A8: B7 2E        	lda	[<L692+fs_1],Y
 17310 08:42AA: 48           	pha
 17311                        	xref	~~~lmul
 17312 08:42AB: 22 xx xx xx  	jsl	~~~lmul
 17313 08:42AF: 85 09        	sta	<R2
 17314 08:42B1: 86 0B        	stx	<R2+2
 17315 08:42B3: D4 0B        	pei	<R2+2
 17316 08:42B5: D4 09        	pei	<R2
 17317 08:42B7: A9 01 00     	lda	#$1
 17318                        	xref	~~~llsr
 17319 08:42BA: 22 xx xx xx  	jsl	~~~llsr
 17320 08:42BE: 85 05        	sta	<R1
 17321 08:42C0: 86 07        	stx	<R1+2
 17322 08:42C2: 18           	clc
 17323 08:42C3: A5 05        	lda	<R1
 17324 08:42C5: 65 01        	adc	<R0
 17325 08:42C7: 85 0D        	sta	<R3
 17326 08:42C9: A5 07        	lda	<R1+2
 17327 08:42CB: 65 03        	adc	<R0+2
 17328 08:42CD: 85 0F        	sta	<R3+2
 17329 08:42CF: A6 0F        	ldx	<R3+2
 17330 08:42D1: A5 0D        	lda	<R3
 17331                        L733:
 17332 08:42D3: 85 01        	sta	<R0
 17333 08:42D5: 86 03        	stx	<R0+2
 17334 08:42D7: A5 01        	lda	<R0
 17335 08:42D9: 85 28        	sta	<L692+szbfat_1
 17336 08:42DB: A5 03        	lda	<R0+2
 17337 08:42DD: 85 2A        	sta	<L692+szbfat_1+2
 17338                        ;		}
 17339                        	.line	3994
 17340                        L10398:
 17341                        ;		if (fs->fsize < (szbfat + (SS(fs) - 1)) 
                    / SS(fs))
 17342                        	.line	3995
 17343                        ;			return FR_NO_FILESYSTEM; /* (BPB
                    _FATSz must not be less than the size needed) */
 17344 08:42DF: 18           	clc
 17345 08:42E0: A9 FF 01     	lda	#$1ff
 17346 08:42E3: 65 28        	adc	<L692+szbfat_1
 17347 08:42E5: 85 05        	sta	<R1
 17348 08:42E7: A9 00 00     	lda	#$0
 17349 08:42EA: 65 2A        	adc	<L692+szbfat_1+2
 17350 08:42EC: 85 07        	sta	<R1+2
 17351 08:42EE: D4 07        	pei	<R1+2
 17352 08:42F0: D4 05        	pei	<R1
 17353 08:42F2: A9 09 00     	lda	#$9
 17354                        	xref	~~~llsr
 17355 08:42F5: 22 xx xx xx  	jsl	~~~llsr
 17356 08:42F9: 85 01        	sta	<R0
 17357 08:42FB: 86 03        	stx	<R0+2
 17358 08:42FD: A0 1B 00     	ldy	#$1b
 17359 08:4300: B7 2E        	lda	[<L692+fs_1],Y
 17360 08:4302: C5 01        	cmp	<R0
 17361 08:4304: A0 1D 00     	ldy	#$1d
  Mon Aug  9 2021 16:52                                                Page 331


 17362 08:4307: B7 2E        	lda	[<L692+fs_1],Y
 17363 08:4309: E5 03        	sbc	<R0+2
 17364 08:430B: 90 03        	bcc	L734
 17365 08:430D: 82 06 00     	brl	L10400
 17366                        L734:
 17367                        	.line	3996
 17368 08:4310: A9 0D 00     	lda	#$d
 17369 08:4313: 82 97 FA     	brl	L695
 17370                        ;
 17371                        ;#if !FF_FS_READONLY
 17372                        ;		/* Get FSInfo if available */
 17373                        ;		fs->last_clst = fs->free_clst = 0xFFFFFF
                    FF; /* Initialize cluster allocation information */
 17374                        L10400:
 17375                        	.line	4000
 17376 08:4316: A9 FF FF     	lda	#$ffff
 17377 08:4319: A0 13 00     	ldy	#$13
 17378 08:431C: 97 2E        	sta	[<L692+fs_1],Y
 17379 08:431E: A9 FF FF     	lda	#$ffff
 17380 08:4321: A0 15 00     	ldy	#$15
 17381 08:4324: 97 2E        	sta	[<L692+fs_1],Y
 17382 08:4326: A9 FF FF     	lda	#$ffff
 17383 08:4329: A0 0F 00     	ldy	#$f
 17384 08:432C: 97 2E        	sta	[<L692+fs_1],Y
 17385 08:432E: A9 FF FF     	lda	#$ffff
 17386 08:4331: A0 11 00     	ldy	#$11
 17387 08:4334: 97 2E        	sta	[<L692+fs_1],Y
 17388                        ;		fs->fsi_flag = 0x80;
 17389                        	.line	4001
 17390 08:4336: E2 20        	sep	#$20
 17391                        	longa	off
 17392 08:4338: A9 80        	lda	#$80
 17393 08:433A: A0 04 00     	ldy	#$4
 17394 08:433D: 97 2E        	sta	[<L692+fs_1],Y
 17395 08:433F: C2 20        	rep	#$20
 17396                        	longa	on
 17397                        ;#if (FF_FS_NOFSINFO & 3) != 3
 17398                        ;		if (fmt == FS_FAT32 /* Allow to update F
                    SInfo only if BPB_FSInfo32 == 1 */
 17399                        	.line	4003
 17400                        ;		&& ld_word(fs->win + BPB_FSInfo32) == 1
 17401                        ;				&& move_window(fs, bsect
                     + 1) == FR_OK)
 17402                        ;		{
 17403 08:4341: A5 32        	lda	<L692+fmt_1
 17404 08:4343: C9 03 00     	cmp	#<$3
 17405 08:4346: F0 03        	beq	L735
 17406 08:4348: 82 F3 00     	brl	L10401
 17407                        L735:
 17408 08:434B: 18           	clc
 17409 08:434C: A9 63 00     	lda	#$63
 17410 08:434F: 65 2E        	adc	<L692+fs_1
 17411 08:4351: 85 01        	sta	<R0
 17412 08:4353: A9 00 00     	lda	#$0
 17413 08:4356: 65 30        	adc	<L692+fs_1+2
 17414 08:4358: 85 03        	sta	<R0+2
 17415 08:435A: D4 03        	pei	<R0+2
 17416 08:435C: D4 01        	pei	<R0
  Mon Aug  9 2021 16:52                                                Page 332


 17417 08:435E: 22 00 00 08  	jsl	~~ld_word
 17418 08:4362: 85 05        	sta	<R1
 17419 08:4364: A5 05        	lda	<R1
 17420 08:4366: C9 01 00     	cmp	#<$1
 17421 08:4369: F0 03        	beq	L736
 17422 08:436B: 82 D0 00     	brl	L10401
 17423                        L736:
 17424 08:436E: 18           	clc
 17425 08:436F: A9 01 00     	lda	#$1
 17426 08:4372: 65 14        	adc	<L692+bsect_1
 17427 08:4374: 85 05        	sta	<R1
 17428 08:4376: A9 00 00     	lda	#$0
 17429 08:4379: 65 16        	adc	<L692+bsect_1+2
 17430 08:437B: 85 07        	sta	<R1+2
 17431 08:437D: D4 07        	pei	<R1+2
 17432 08:437F: D4 05        	pei	<R1
 17433 08:4381: D4 30        	pei	<L692+fs_1+2
 17434 08:4383: D4 2E        	pei	<L692+fs_1
 17435 08:4385: 22 97 08 08  	jsl	~~move_window
 17436 08:4389: AA           	tax
 17437 08:438A: F0 03        	beq	L737
 17438 08:438C: 82 AF 00     	brl	L10401
 17439                        L737:
 17440                        	.line	4006
 17441                        ;			fs->fsi_flag = 0;
 17442                        	.line	4007
 17443 08:438F: E2 20        	sep	#$20
 17444                        	longa	off
 17445 08:4391: A9 00        	lda	#$0
 17446 08:4393: A0 04 00     	ldy	#$4
 17447 08:4396: 97 2E        	sta	[<L692+fs_1],Y
 17448 08:4398: C2 20        	rep	#$20
 17449                        	longa	on
 17450                        ;			if (ld_word(fs->win + BS_55AA) =
                    = 0xAA55 /* Load FSInfo data if available */
 17451                        	.line	4008
 17452                        ;			&& ld_dword(fs->win + FSI_LeadSi
                    g) == 0x41615252
 17453                        ;					&& ld_dword(fs->
                    win + FSI_StrucSig) == 0x61417272)
 17454                        ;			{
 17455 08:439A: 18           	clc
 17456 08:439B: A9 31 02     	lda	#$231
 17457 08:439E: 65 2E        	adc	<L692+fs_1
 17458 08:43A0: 85 01        	sta	<R0
 17459 08:43A2: A9 00 00     	lda	#$0
 17460 08:43A5: 65 30        	adc	<L692+fs_1+2
 17461 08:43A7: 85 03        	sta	<R0+2
 17462 08:43A9: D4 03        	pei	<R0+2
 17463 08:43AB: D4 01        	pei	<R0
 17464 08:43AD: 22 00 00 08  	jsl	~~ld_word
 17465 08:43B1: 85 05        	sta	<R1
 17466 08:43B3: A5 05        	lda	<R1
 17467 08:43B5: C9 55 AA     	cmp	#<$aa55
 17468 08:43B8: F0 03        	beq	L738
 17469 08:43BA: 82 81 00     	brl	L10402
 17470                        L738:
 17471 08:43BD: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 333


 17472 08:43BE: A9 33 00     	lda	#$33
 17473 08:43C1: 65 2E        	adc	<L692+fs_1
 17474 08:43C3: 85 05        	sta	<R1
 17475 08:43C5: A9 00 00     	lda	#$0
 17476 08:43C8: 65 30        	adc	<L692+fs_1+2
 17477 08:43CA: 85 07        	sta	<R1+2
 17478 08:43CC: D4 07        	pei	<R1+2
 17479 08:43CE: D4 05        	pei	<R1
 17480 08:43D0: 22 3B 00 08  	jsl	~~ld_dword
 17481 08:43D4: 85 09        	sta	<R2
 17482 08:43D6: 86 0B        	stx	<R2+2
 17483 08:43D8: A5 09        	lda	<R2
 17484 08:43DA: C9 52 52     	cmp	#<$41615252
 17485 08:43DD: D0 05        	bne	L739
 17486 08:43DF: A5 0B        	lda	<R2+2
 17487 08:43E1: C9 61 41     	cmp	#^$41615252
 17488                        L739:
 17489 08:43E4: F0 03        	beq	L740
 17490 08:43E6: 82 55 00     	brl	L10402
 17491                        L740:
 17492 08:43E9: 18           	clc
 17493 08:43EA: A9 17 02     	lda	#$217
 17494 08:43ED: 65 2E        	adc	<L692+fs_1
 17495 08:43EF: 85 09        	sta	<R2
 17496 08:43F1: A9 00 00     	lda	#$0
 17497 08:43F4: 65 30        	adc	<L692+fs_1+2
 17498 08:43F6: 85 0B        	sta	<R2+2
 17499 08:43F8: D4 0B        	pei	<R2+2
 17500 08:43FA: D4 09        	pei	<R2
 17501 08:43FC: 22 3B 00 08  	jsl	~~ld_dword
 17502 08:4400: 85 0D        	sta	<R3
 17503 08:4402: 86 0F        	stx	<R3+2
 17504 08:4404: A5 0D        	lda	<R3
 17505 08:4406: C9 72 72     	cmp	#<$61417272
 17506 08:4409: D0 05        	bne	L741
 17507 08:440B: A5 0F        	lda	<R3+2
 17508 08:440D: C9 41 61     	cmp	#^$61417272
 17509                        L741:
 17510 08:4410: F0 03        	beq	L742
 17511 08:4412: 82 29 00     	brl	L10402
 17512                        L742:
 17513                        	.line	4011
 17514                        ;#if (FF_FS_NOFSINFO & 1) == 0
 17515                        ;				fs->free_clst = ld_dword
                    (fs->win + FSI_Free_Count);
 17516                        ;#endif
 17517                        ;#if (FF_FS_NOFSINFO & 2) == 0
 17518                        ;				fs->last_clst = ld_dword
                    (fs->win + FSI_Nxt_Free);
 17519                        	.line	4016
 17520 08:4415: 18           	clc
 17521 08:4416: A9 1F 02     	lda	#$21f
 17522 08:4419: 65 2E        	adc	<L692+fs_1
 17523 08:441B: 85 01        	sta	<R0
 17524 08:441D: A9 00 00     	lda	#$0
 17525 08:4420: 65 30        	adc	<L692+fs_1+2
 17526 08:4422: 85 03        	sta	<R0+2
 17527 08:4424: D4 03        	pei	<R0+2
  Mon Aug  9 2021 16:52                                                Page 334


 17528 08:4426: D4 01        	pei	<R0
 17529 08:4428: 22 3B 00 08  	jsl	~~ld_dword
 17530 08:442C: 85 05        	sta	<R1
 17531 08:442E: 86 07        	stx	<R1+2
 17532 08:4430: A5 05        	lda	<R1
 17533 08:4432: A0 0F 00     	ldy	#$f
 17534 08:4435: 97 2E        	sta	[<L692+fs_1],Y
 17535 08:4437: A5 07        	lda	<R1+2
 17536 08:4439: A0 11 00     	ldy	#$11
 17537 08:443C: 97 2E        	sta	[<L692+fs_1],Y
 17538                        ;#endif
 17539                        ;			}
 17540                        	.line	4018
 17541                        ;		}
 17542                        L10402:
 17543                        	.line	4019
 17544                        ;#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
 17545                        ;#endif	/* !FF_FS_READONLY */
 17546                        ;	}
 17547                        L10401:
 17548                        	.line	4022
 17549                        ;
 17550                        ;	fs->fs_type = (BYTE) fmt;/* FAT sub-type */
 17551                        	.line	4024
 17552 08:443E: E2 20        	sep	#$20
 17553                        	longa	off
 17554 08:4440: A5 32        	lda	<L692+fmt_1
 17555 08:4442: 87 2E        	sta	[<L692+fs_1]
 17556 08:4444: C2 20        	rep	#$20
 17557                        	longa	on
 17558                        ;	fs->id = ++Fsid; /* Volume mount ID */
 17559                        	.line	4025
 17560 08:4446: EE xx xx     	inc	|~~Fsid
 17561 08:4449: AD xx xx     	lda	|~~Fsid
 17562 08:444C: A0 05 00     	ldy	#$5
 17563 08:444F: 97 2E        	sta	[<L692+fs_1],Y
 17564                        ;#if FF_USE_LFN == 1
 17565                        ;	fs->lfnbuf = LfnBuf; /* Static LFN working buffe
                    r */
 17566                        ;#if FF_FS_EXFAT
 17567                        ;	fs->dirbuf = DirBuf; /* Static directory block s
                    cratchpad buuffer */
 17568                        ;#endif
 17569                        ;#endif
 17570                        ;#if FF_FS_RPATH != 0
 17571                        ;	fs->cdir = 0; /* Initialize current directory */
 17572                        ;#endif
 17573                        ;#if FF_FS_LOCK != 0			/* Clear
                     file lock semaphores */
 17574                        ;	clear_lock(fs);
 17575                        ;#endif
 17576                        ;	return FR_OK;
 17577                        	.line	4038
 17578 08:4451: A9 00 00     	lda	#$0
 17579 08:4454: 82 56 F9     	brl	L695
 17580                        ;}
 17581                        	.line	4039
 17582                        	.endblock	4039
  Mon Aug  9 2021 16:52                                                Page 335


 17583             00000033   L691	equ	51
 17584             00000011   L692	equ	17
 17585 08:4457:              	ends
 17586                        	efunc
 17587                        	.endfunc	4039,17,51
 17588                        	.line	4039
 17589                        ;
 17590                        ;/*-----------------------------------------------
                    ------------------------*/
 17591                        ;/* Check if the file/directory object is valid or
                     not                    */
 17592                        ;/*-----------------------------------------------
                    ------------------------*/
 17593                        ;
 17594                        ;static FRESULT validate( /* Returns FR_OK or FR_I
                    NVALID_OBJECT */
 17595                        ;FFOBJID* obj, /* Pointer to the FFOBJID, the 1st 
                    member in the FIL/DIR object, to check validity */
 17596                        ;FATFS** rfs /* Pointer to pointer to the owner fi
                    lesystem object to return */
 17597                        ;)
 17598                        ;{
 17599                        	.line	4045
 17600                        	.line	4049
 17601                        	FFDOS
 17602                        	func
 17603                        	.function	4049
 17604                        ~~validate:
 17605                        	longa	on
 17606                        	longi	on
 17607 08:4457: 3B           	tsc
 17608 08:4458: 38           	sec
 17609 08:4459: E9 06 00     	sbc	#L743
 17610 08:445C: 1B           	tcs
 17611 08:445D: 0B           	phd
 17612 08:445E: 5B           	tcd
 17613             00000004   obj_0	set	4
 17614             00000008   rfs_0	set	8
 17615                        	.block	4049
 17616                        ;	FRESULT res = FR_INVALID_OBJECT;
 17617                        ;
 17618                        ;	if (obj && obj->fs && obj->fs->fs_type && obj->i
                    d == obj->fs->id)
 17619             00000000   res_1	set	0
 17620                        	.sym	res,0,5,1,16
 17621                        	.sym	obj,4,138,6,32,76
 17622                        	.sym	rfs,8,1162,6,32,75
 17623 08:445F: A9 09 00     	lda	#$9
 17624 08:4462: 85 05        	sta	<L744+res_1
 17625                        	.line	4052
 17626                        ;	{ /* Test if the object is valid */
 17627 08:4464: A5 0A        	lda	<L743+obj_0
 17628 08:4466: 05 0C        	ora	<L743+obj_0+2
 17629 08:4468: D0 03        	bne	L746
 17630 08:446A: 82 5D 00     	brl	L10403
 17631                        L746:
 17632 08:446D: A7 0A        	lda	[<L743+obj_0]
 17633 08:446F: A0 02 00     	ldy	#$2
  Mon Aug  9 2021 16:52                                                Page 336


 17634 08:4472: 17 0A        	ora	[<L743+obj_0],Y
 17635 08:4474: D0 03        	bne	L747
 17636 08:4476: 82 51 00     	brl	L10403
 17637                        L747:
 17638 08:4479: A7 0A        	lda	[<L743+obj_0]
 17639 08:447B: 85 01        	sta	<R0
 17640 08:447D: A0 02 00     	ldy	#$2
 17641 08:4480: B7 0A        	lda	[<L743+obj_0],Y
 17642 08:4482: 85 03        	sta	<R0+2
 17643 08:4484: A7 01        	lda	[<R0]
 17644 08:4486: 29 FF 00     	and	#$ff
 17645 08:4489: D0 03        	bne	L748
 17646 08:448B: 82 3C 00     	brl	L10403
 17647                        L748:
 17648 08:448E: A7 0A        	lda	[<L743+obj_0]
 17649 08:4490: 85 01        	sta	<R0
 17650 08:4492: A0 02 00     	ldy	#$2
 17651 08:4495: B7 0A        	lda	[<L743+obj_0],Y
 17652 08:4497: 85 03        	sta	<R0+2
 17653 08:4499: A0 04 00     	ldy	#$4
 17654 08:449C: B7 0A        	lda	[<L743+obj_0],Y
 17655 08:449E: A0 05 00     	ldy	#$5
 17656 08:44A1: D7 01        	cmp	[<R0],Y
 17657 08:44A3: F0 03        	beq	L749
 17658 08:44A5: 82 22 00     	brl	L10403
 17659                        L749:
 17660                        	.line	4053
 17661                        ;#if FF_FS_REENTRANT
 17662                        ;		if (lock_fs(obj->fs))
 17663                        ;		{ /* Obtain the filesystem object */
 17664                        ;			if (!(disk_status(obj->fs->pdrv)
                     & STA_NOINIT))
 17665                        ;			{ /* Test if the phsical drive i
                    s kept initialized */
 17666                        ;				res = FR_OK;
 17667                        ;			}
 17668                        ;			else
 17669                        ;			{
 17670                        ;				unlock_fs(obj->fs, FR_OK
                    );
 17671                        ;			}
 17672                        ;		}
 17673                        ;		else
 17674                        ;		{
 17675                        ;			res = FR_TIMEOUT;
 17676                        ;		}
 17677                        ;#else
 17678                        ;		if (!(disk_status(obj->fs->pdrv) & STA_N
                    OINIT))
 17679                        	.line	4071
 17680                        ;		{ /* Test if the phsical drive is kept i
                    nitialized */
 17681 08:44A8: A7 0A        	lda	[<L743+obj_0]
 17682 08:44AA: 85 01        	sta	<R0
 17683 08:44AC: A0 02 00     	ldy	#$2
 17684 08:44AF: B7 0A        	lda	[<L743+obj_0],Y
 17685 08:44B1: 85 03        	sta	<R0+2
 17686 08:44B3: A0 01 00     	ldy	#$1
  Mon Aug  9 2021 16:52                                                Page 337


 17687 08:44B6: B7 01        	lda	[<R0],Y
 17688 08:44B8: 48           	pha
 17689 08:44B9: 22 xx xx xx  	jsl	~~disk_status
 17690 08:44BD: E2 20        	sep	#$20
 17691                        	longa	off
 17692 08:44BF: 29 01        	and	#<$1
 17693 08:44C1: C2 20        	rep	#$20
 17694                        	longa	on
 17695 08:44C3: F0 03        	beq	L750
 17696 08:44C5: 82 02 00     	brl	L10404
 17697                        L750:
 17698                        	.line	4072
 17699                        ;			res = FR_OK;
 17700                        	.line	4073
 17701 08:44C8: 64 05        	stz	<L744+res_1
 17702                        ;		}
 17703                        	.line	4074
 17704                        ;#endif
 17705                        ;	}
 17706                        L10404:
 17707                        	.line	4076
 17708                        ;	*rfs = (res == FR_OK) ? obj->fs : 0; /* Correspo
                    nding filesystem object */
 17709                        L10403:
 17710                        	.line	4077
 17711 08:44CA: A5 05        	lda	<L744+res_1
 17712 08:44CC: F0 03        	beq	L752
 17713 08:44CE: 82 0A 00     	brl	L751
 17714                        L752:
 17715 08:44D1: A0 02 00     	ldy	#$2
 17716 08:44D4: B7 0A        	lda	[<L743+obj_0],Y
 17717 08:44D6: AA           	tax
 17718 08:44D7: A7 0A        	lda	[<L743+obj_0]
 17719 08:44D9: 80 07        	bra	L753
 17720                        L751:
 17721 08:44DB: A9 00 00     	lda	#$0
 17722 08:44DE: AA           	tax
 17723 08:44DF: A9 00 00     	lda	#$0
 17724                        L753:
 17725 08:44E2: 85 01        	sta	<R0
 17726 08:44E4: 86 03        	stx	<R0+2
 17727 08:44E6: A5 01        	lda	<R0
 17728 08:44E8: 87 0E        	sta	[<L743+rfs_0]
 17729 08:44EA: A5 03        	lda	<R0+2
 17730 08:44EC: A0 02 00     	ldy	#$2
 17731 08:44EF: 97 0E        	sta	[<L743+rfs_0],Y
 17732                        ;	return res;
 17733                        	.line	4078
 17734 08:44F1: A5 05        	lda	<L744+res_1
 17735                        L754:
 17736 08:44F3: A8           	tay
 17737 08:44F4: A5 08        	lda	<L743+2
 17738 08:44F6: 85 10        	sta	<L743+2+8
 17739 08:44F8: A5 07        	lda	<L743+1
 17740 08:44FA: 85 0F        	sta	<L743+1+8
 17741 08:44FC: 2B           	pld
 17742 08:44FD: 3B           	tsc
 17743 08:44FE: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 338


 17744 08:44FF: 69 0E 00     	adc	#L743+8
 17745 08:4502: 1B           	tcs
 17746 08:4503: 98           	tya
 17747 08:4504: 6B           	rtl
 17748                        ;}
 17749                        	.line	4079
 17750                        	.endblock	4079
 17751             00000006   L743	equ	6
 17752             00000005   L744	equ	5
 17753 08:4505:              	ends
 17754                        	efunc
 17755                        	.endfunc	4079,5,6
 17756                        	.line	4079
 17757                        ;
 17758                        ;/*-----------------------------------------------
                    ----------------------------
 17759                        ;
 17760                        ; Public Functions (FatFs API)
 17761                        ;
 17762                        ; ------------------------------------------------
                    ----------------------------*/
 17763                        ;
 17764                        ;/*-----------------------------------------------
                    ------------------------*/
 17765                        ;/* Mount/Unmount a Logical Drive                 
                                            */
 17766                        ;/*-----------------------------------------------
                    ------------------------*/
 17767                        ;
 17768                        ;FRESULT f_mount(FATFS* fs, /* Pointer to the file
                    system object (NULL:unmount)*/
 17769                        ;const TCHAR* path, /* Logical drive number to be 
                    mounted/unmounted */
 17770                        ;BYTE opt /* Mode option 0:Do not mount (delayed m
                    ount), 1:Mount immediately */
 17771                        ;)
 17772                        ;{
 17773                        	.line	4091
 17774                        	.line	4095
 17775                        	FFDOS
 17776                        	xdef	~~f_mount
 17777                        	func
 17778                        	.function	4095
 17779                        ~~f_mount:
 17780                        	longa	on
 17781                        	longi	on
 17782 08:4505: 3B           	tsc
 17783 08:4506: 38           	sec
 17784 08:4507: E9 14 00     	sbc	#L755
 17785 08:450A: 1B           	tcs
 17786 08:450B: 0B           	phd
 17787 08:450C: 5B           	tcd
 17788             00000004   fs_0	set	4
 17789             00000008   path_0	set	8
 17790             0000000C   opt_0	set	12
 17791                        	.block	4095
 17792                        ;	FATFS *cfs;
 17793                        ;	int vol;
  Mon Aug  9 2021 16:52                                                Page 339


 17794                        ;	FRESULT res;
 17795                        ;	const TCHAR *rp = path;
 17796                        ;
 17797                        ;	//k_debug_string("f_mount...\r\n");
 17798                        ;
 17799                        ;	/* Get logical drive number */
 17800                        ;	vol = get_ldnumber(&rp);
 17801             00000000   cfs_1	set	0
 17802             00000004   vol_1	set	4
 17803             00000006   res_1	set	6
 17804             00000008   rp_1	set	8
 17805                        	.sym	cfs,0,138,1,32,75
 17806                        	.sym	vol,4,5,1,16
 17807                        	.sym	res,6,5,1,16
 17808                        	.sym	rp,8,142,1,32
 17809                        	.sym	fs,4,138,6,32,75
 17810                        	.sym	path,8,142,6,32
 17811                        	.sym	opt,12,14,6,8
 17812 08:450D: A5 1C        	lda	<L755+path_0
 17813 08:450F: 85 11        	sta	<L756+rp_1
 17814 08:4511: A5 1E        	lda	<L755+path_0+2
 17815 08:4513: 85 13        	sta	<L756+rp_1+2
 17816                        	.line	4104
 17817 08:4515: F4 00 00     	pea	#0
 17818 08:4518: 18           	clc
 17819 08:4519: 7B           	tdc
 17820 08:451A: 69 11 00     	adc	#<L756+rp_1
 17821 08:451D: 48           	pha
 17822 08:451E: 22 76 38 08  	jsl	~~get_ldnumber
 17823 08:4522: 85 0D        	sta	<L756+vol_1
 17824                        ;	if (vol < 0)
 17825                        	.line	4105
 17826                        ;		return FR_INVALID_DRIVE;
 17827 08:4524: A5 0D        	lda	<L756+vol_1
 17828 08:4526: 30 03        	bmi	L758
 17829 08:4528: 82 15 00     	brl	L10405
 17830                        L758:
 17831                        	.line	4106
 17832 08:452B: A9 0B 00     	lda	#$b
 17833                        L759:
 17834 08:452E: A8           	tay
 17835 08:452F: A5 16        	lda	<L755+2
 17836 08:4531: 85 20        	sta	<L755+2+10
 17837 08:4533: A5 15        	lda	<L755+1
 17838 08:4535: 85 1F        	sta	<L755+1+10
 17839 08:4537: 2B           	pld
 17840 08:4538: 3B           	tsc
 17841 08:4539: 18           	clc
 17842 08:453A: 69 1E 00     	adc	#L755+10
 17843 08:453D: 1B           	tcs
 17844 08:453E: 98           	tya
 17845 08:453F: 6B           	rtl
 17846                        ;
 17847                        ;	cfs = FatFs[vol]; /* Pointer to fs object */
 17848                        L10405:
 17849                        	.line	4108
 17850 08:4540: A5 0D        	lda	<L756+vol_1
 17851 08:4542: 0A           	asl	A
  Mon Aug  9 2021 16:52                                                Page 340


 17852 08:4543: 0A           	asl	A
 17853 08:4544: 85 01        	sta	<R0
 17854 08:4546: 18           	clc
 17855 08:4547: A9 xx xx     	lda	#<~~FatFs
 17856 08:454A: 65 01        	adc	<R0
 17857 08:454C: 85 05        	sta	<R1
 17858 08:454E: B2 05        	lda	(<R1)
 17859 08:4550: 85 09        	sta	<L756+cfs_1
 17860 08:4552: A0 02 00     	ldy	#$2
 17861 08:4555: B1 05        	lda	(<R1),Y
 17862 08:4557: 85 0B        	sta	<L756+cfs_1+2
 17863                        ;
 17864                        ;	////k_debug_pointer("f_mount:cfs:",cfs);
 17865                        ;	//k_debug_pointer("f_mount:1:_k_eventManager_Idl
                    eProcList->listhead:",_k_eventManager_IdleProcList->listhead
                    );
 17866                        ;	//k_debug_pointer("f_mount:1:cfs:",cfs);
 17867                        ;
 17868                        ;	//if (cfs)
 17869                        ;	if (cfs && fs)
 17870                        	.line	4115
 17871                        ;	{
 17872 08:4559: A5 09        	lda	<L756+cfs_1
 17873 08:455B: 05 0B        	ora	<L756+cfs_1+2
 17874 08:455D: D0 03        	bne	L760
 17875 08:455F: 82 11 00     	brl	L10406
 17876                        L760:
 17877 08:4562: A5 18        	lda	<L755+fs_0
 17878 08:4564: 05 1A        	ora	<L755+fs_0+2
 17879 08:4566: D0 03        	bne	L761
 17880 08:4568: 82 08 00     	brl	L10406
 17881                        L761:
 17882                        	.line	4116
 17883                        ;#if FF_FS_LOCK != 0
 17884                        ;		clear_lock(cfs);
 17885                        ;#endif
 17886                        ;#if FF_FS_REENTRANT				
                    		/* Discard sync object of the current volume */
 17887                        ;		if (!ff_del_syncobj(cfs->sobj)) return F
                    R_INT_ERR;
 17888                        ;#endif
 17889                        ;		cfs->fs_type = 0; /* Clear old fs object
                     */
 17890                        	.line	4123
 17891 08:456B: E2 20        	sep	#$20
 17892                        	longa	off
 17893 08:456D: A9 00        	lda	#$0
 17894 08:456F: 87 09        	sta	[<L756+cfs_1]
 17895 08:4571: C2 20        	rep	#$20
 17896                        	longa	on
 17897                        ;	}
 17898                        	.line	4124
 17899                        ;
 17900                        ;	//k_debug_pointer("f_mount:2:_k_eventManager_Idl
                    eProcList->listhead:",_k_eventManager_IdleProcList->listhead
                    );
 17901                        ;
 17902                        ;	if (fs)
  Mon Aug  9 2021 16:52                                                Page 341


 17903                        L10406:
 17904                        	.line	4128
 17905                        ;	{
 17906 08:4573: A5 18        	lda	<L755+fs_0
 17907 08:4575: 05 1A        	ora	<L755+fs_0+2
 17908 08:4577: D0 03        	bne	L762
 17909 08:4579: 82 08 00     	brl	L10407
 17910                        L762:
 17911                        	.line	4129
 17912                        ;		fs->fs_type = 0; /* Clear new fs object 
                    */
 17913                        	.line	4130
 17914 08:457C: E2 20        	sep	#$20
 17915                        	longa	off
 17916 08:457E: A9 00        	lda	#$0
 17917 08:4580: 87 18        	sta	[<L755+fs_0]
 17918 08:4582: C2 20        	rep	#$20
 17919                        	longa	on
 17920                        ;#if FF_FS_REENTRANT				
                    		/* Create sync object for the new volume */
 17921                        ;		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj
                    )) return FR_INT_ERR;
 17922                        ;#endif
 17923                        ;	}
 17924                        	.line	4134
 17925                        ;	FatFs[vol] = fs; /* Register new fs object */
 17926                        L10407:
 17927                        	.line	4135
 17928 08:4584: A5 0D        	lda	<L756+vol_1
 17929 08:4586: 0A           	asl	A
 17930 08:4587: 0A           	asl	A
 17931 08:4588: 85 01        	sta	<R0
 17932 08:458A: 18           	clc
 17933 08:458B: A9 xx xx     	lda	#<~~FatFs
 17934 08:458E: 65 01        	adc	<R0
 17935 08:4590: 85 05        	sta	<R1
 17936 08:4592: A5 18        	lda	<L755+fs_0
 17937 08:4594: 92 05        	sta	(<R1)
 17938 08:4596: A5 1A        	lda	<L755+fs_0+2
 17939 08:4598: A0 02 00     	ldy	#$2
 17940 08:459B: 91 05        	sta	(<R1),Y
 17941                        ;
 17942                        ;	//k_debug_pointer("f_mount:3:_k_eventManager_Idl
                    eProcList->listhead:",_k_eventManager_IdleProcList->listhead
                    );
 17943                        ;
 17944                        ;	if (opt == 0)
 17945                        	.line	4139
 17946                        ;		return FR_OK; /* Do not mount now, it wi
                    ll be mounted later */
 17947 08:459D: A5 20        	lda	<L755+opt_0
 17948 08:459F: 29 FF 00     	and	#$ff
 17949 08:45A2: F0 03        	beq	L763
 17950 08:45A4: 82 06 00     	brl	L10408
 17951                        L763:
 17952                        	.line	4140
 17953 08:45A7: A9 00 00     	lda	#$0
 17954 08:45AA: 82 81 FF     	brl	L759
  Mon Aug  9 2021 16:52                                                Page 342


 17955                        ;
 17956                        ;	res = mount_volume(&path, &fs, 0); /* Force moun
                    ted the volume */
 17957                        L10408:
 17958                        	.line	4142
 17959 08:45AD: F4 00 00     	pea	#<$0
 17960 08:45B0: F4 00 00     	pea	#0
 17961 08:45B3: 18           	clc
 17962 08:45B4: 7B           	tdc
 17963 08:45B5: 69 18 00     	adc	#<L755+fs_0
 17964 08:45B8: 48           	pha
 17965 08:45B9: F4 00 00     	pea	#0
 17966 08:45BC: 18           	clc
 17967 08:45BD: 7B           	tdc
 17968 08:45BE: 69 1C 00     	adc	#<L755+path_0
 17969 08:45C1: 48           	pha
 17970 08:45C2: 22 84 3D 08  	jsl	~~mount_volume
 17971 08:45C6: 85 0F        	sta	<L756+res_1
 17972                        ;	LEAVE_FF(fs, res);
 17973                        	.line	4143
 17974 08:45C8: A5 0F        	lda	<L756+res_1
 17975 08:45CA: 82 61 FF     	brl	L759
 17976                        ;}
 17977                        	.line	4144
 17978                        	.endblock	4144
 17979             00000014   L755	equ	20
 17980             00000009   L756	equ	9
 17981 08:45CD:              	ends
 17982                        	efunc
 17983                        	.endfunc	4144,9,20
 17984                        	.line	4144
 17985                        ;
 17986                        ;/*-----------------------------------------------
                    ------------------------*/
 17987                        ;/* Open or Create a File                         
                                            */
 17988                        ;/*-----------------------------------------------
                    ------------------------*/
 17989                        ;
 17990                        ;FRESULT f_open(FIL* fp, /* Pointer to the blank f
                    ile object */
 17991                        ;const TCHAR* path, /* Pointer to the file name */
 17992                        ;BYTE mode /* Access mode and file open mode flags
                     */
 17993                        ;)
 17994                        ;{
 17995                        	.line	4150
 17996                        	.line	4154
 17997                        	FFDOS
 17998                        	xdef	~~f_open
 17999                        	func
 18000                        	.function	4154
 18001                        ~~f_open:
 18002                        	longa	on
 18003                        	longi	on
 18004 08:45CD: 3B           	tsc
 18005 08:45CE: 38           	sec
 18006 08:45CF: E9 5A 00     	sbc	#L764
  Mon Aug  9 2021 16:52                                                Page 343


 18007 08:45D2: 1B           	tcs
 18008 08:45D3: 0B           	phd
 18009 08:45D4: 5B           	tcd
 18010             00000004   fp_0	set	4
 18011             00000008   path_0	set	8
 18012             0000000C   mode_0	set	12
 18013                        	.block	4154
 18014                        ;	FRESULT res;
 18015                        ;	DIR dj;
 18016                        ;	FATFS *fs;
 18017                        ;#if !FF_FS_READONLY
 18018                        ;	DWORD cl, bcs, clst;
 18019                        ;	LBA_t sc;
 18020                        ;	FSIZE_t ofs;
 18021                        ;#endif
 18022                        ;	DEF_NAMBUF
 18023                        ;
 18024                        ;	//k_debug_string("f_open...\r\n");
 18025                        ;
 18026                        ;	if (!fp)
 18027             00000000   res_1	set	0
 18028             00000002   dj_1	set	2
 18029             00000036   fs_1	set	54
 18030             0000003A   cl_1	set	58
 18031             0000003E   bcs_1	set	62
 18032             00000042   clst_1	set	66
 18033             00000046   sc_1	set	70
 18034             0000004A   ofs_1	set	74
 18035             0000004E   lfn_1	set	78
 18036                        	.sym	res,0,5,1,16
 18037                        	.sym	dj,2,10,1,416,78
 18038                        	.sym	fs,54,138,1,32,75
 18039                        	.sym	cl,58,18,1,32
 18040                        	.sym	bcs,62,18,1,32
 18041                        	.sym	clst,66,18,1,32
 18042                        	.sym	sc,70,18,1,32
 18043                        	.sym	ofs,74,18,1,32
 18044                        	.sym	lfn,78,144,1,32
 18045                        	.sym	fp,4,138,6,32,77
 18046                        	.sym	path,8,142,6,32
 18047                        	.sym	mode,12,14,6,8
 18048                        	.line	4167
 18049                        ;		return FR_INVALID_OBJECT;
 18050 08:45D5: A5 5E        	lda	<L764+fp_0
 18051 08:45D7: 05 60        	ora	<L764+fp_0+2
 18052 08:45D9: F0 03        	beq	L767
 18053 08:45DB: 82 15 00     	brl	L10409
 18054                        L767:
 18055                        	.line	4168
 18056 08:45DE: A9 09 00     	lda	#$9
 18057                        L768:
 18058 08:45E1: A8           	tay
 18059 08:45E2: A5 5C        	lda	<L764+2
 18060 08:45E4: 85 66        	sta	<L764+2+10
 18061 08:45E6: A5 5B        	lda	<L764+1
 18062 08:45E8: 85 65        	sta	<L764+1+10
 18063 08:45EA: 2B           	pld
 18064 08:45EB: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 344


 18065 08:45EC: 18           	clc
 18066 08:45ED: 69 64 00     	adc	#L764+10
 18067 08:45F0: 1B           	tcs
 18068 08:45F1: 98           	tya
 18069 08:45F2: 6B           	rtl
 18070                        ;
 18071                        ;	/* Get logical drive number */
 18072                        ;	mode &= FF_FS_READONLY ?
 18073                        L10409:
 18074                        	.line	4171
 18075                        ;			FA_READ :
 18076                        ;			FA_READ | FA_WRITE | FA_CREATE_A
                    LWAYS | FA_CREATE_NEW
 18077                        ;					| FA_OPEN_ALWAYS
                     | FA_OPEN_APPEND;
 18078 08:45F3: E2 20        	sep	#$20
 18079                        	longa	off
 18080 08:45F5: A9 C0        	lda	#$c0
 18081 08:45F7: 14 66        	trb	<L764+mode_0
 18082 08:45F9: C2 20        	rep	#$20
 18083                        	longa	on
 18084                        ;	res = mount_volume(&path, &fs, mode);
 18085                        	.line	4175
 18086 08:45FB: D4 66        	pei	<L764+mode_0
 18087 08:45FD: F4 00 00     	pea	#0
 18088 08:4600: 18           	clc
 18089 08:4601: 7B           	tdc
 18090 08:4602: 69 3F 00     	adc	#<L765+fs_1
 18091 08:4605: 48           	pha
 18092 08:4606: F4 00 00     	pea	#0
 18093 08:4609: 18           	clc
 18094 08:460A: 7B           	tdc
 18095 08:460B: 69 62 00     	adc	#<L764+path_0
 18096 08:460E: 48           	pha
 18097 08:460F: 22 84 3D 08  	jsl	~~mount_volume
 18098 08:4613: 85 09        	sta	<L765+res_1
 18099                        ;
 18100                        ;	//k_debug_long("f_open:mount_volume:",res);
 18101                        ;
 18102                        ;	if (res == FR_OK)
 18103                        	.line	4179
 18104                        ;	{
 18105 08:4615: A5 09        	lda	<L765+res_1
 18106 08:4617: F0 03        	beq	L769
 18107 08:4619: 82 50 04     	brl	L10410
 18108                        L769:
 18109                        	.line	4180
 18110                        ;		dj.obj.fs = fs;
 18111                        	.line	4181
 18112 08:461C: A5 3F        	lda	<L765+fs_1
 18113 08:461E: 85 0B        	sta	<L765+dj_1
 18114 08:4620: A5 41        	lda	<L765+fs_1+2
 18115 08:4622: 85 0D        	sta	<L765+dj_1+2
 18116                        ;		INIT_NAMBUF(fs);
 18117                        	.line	4182
 18118                        	.line	4182
 18119 08:4624: F4 00 02     	pea	#<$200
 18120 08:4627: 22 40 92 08  	jsl	~~ff_memalloc
  Mon Aug  9 2021 16:52                                                Page 345


 18121 08:462B: 85 57        	sta	<L765+lfn_1
 18122 08:462D: 86 59        	stx	<L765+lfn_1+2
 18123                        	.line	4182
 18124 08:462F: A5 57        	lda	<L765+lfn_1
 18125 08:4631: 05 59        	ora	<L765+lfn_1+2
 18126 08:4633: F0 03        	beq	L770
 18127 08:4635: 82 06 00     	brl	L10411
 18128                        L770:
 18129                        	.line	4182
 18130 08:4638: A9 11 00     	lda	#$11
 18131 08:463B: 82 A3 FF     	brl	L768
 18132                        L10411:
 18133                        	.line	4182
 18134 08:463E: A5 57        	lda	<L765+lfn_1
 18135 08:4640: A0 0B 00     	ldy	#$b
 18136 08:4643: 97 3F        	sta	[<L765+fs_1],Y
 18137 08:4645: A5 59        	lda	<L765+lfn_1+2
 18138 08:4647: A0 0D 00     	ldy	#$d
 18139 08:464A: 97 3F        	sta	[<L765+fs_1],Y
 18140                        	.line	4182
 18141                        	.line	4182
 18142                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 18143                        	.line	4183
 18144 08:464C: D4 64        	pei	<L764+path_0+2
 18145 08:464E: D4 62        	pei	<L764+path_0
 18146 08:4650: F4 00 00     	pea	#0
 18147 08:4653: 18           	clc
 18148 08:4654: 7B           	tdc
 18149 08:4655: 69 0B 00     	adc	#<L765+dj_1
 18150 08:4658: 48           	pha
 18151 08:4659: 22 01 37 08  	jsl	~~follow_path
 18152 08:465D: 85 09        	sta	<L765+res_1
 18153                        ;#if !FF_FS_READONLY	/* Read/Write configurat
                    ion */
 18154                        ;		if (res == FR_OK)
 18155                        	.line	4185
 18156                        ;		{
 18157 08:465F: A5 09        	lda	<L765+res_1
 18158 08:4661: F0 03        	beq	L771
 18159 08:4663: 82 12 00     	brl	L10412
 18160                        L771:
 18161                        	.line	4186
 18162                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 18163                        	.line	4187
 18164                        ;			{ /* Origin directory itself? */
 18165 08:4666: E2 20        	sep	#$20
 18166                        	longa	off
 18167 08:4668: A5 36        	lda	<L765+dj_1+43
 18168 08:466A: 29 80        	and	#<$80
 18169 08:466C: C2 20        	rep	#$20
 18170                        	longa	on
 18171 08:466E: D0 03        	bne	L772
 18172 08:4670: 82 05 00     	brl	L10413
 18173                        L772:
 18174                        	.line	4188
 18175                        ;				////k_debug_string("f_op
                    en mode:FR_INVALID_NAME\r\n");
  Mon Aug  9 2021 16:52                                                Page 346


 18176                        ;				res = FR_INVALID_NAME;
 18177                        	.line	4190
 18178 08:4673: A9 06 00     	lda	#$6
 18179 08:4676: 85 09        	sta	<L765+res_1
 18180                        ;			}
 18181                        	.line	4191
 18182                        ;#if FF_FS_LOCK != 0
 18183                        ;			else
 18184                        ;			{
 18185                        ;				res = chk_lock(&dj, (mod
                    e & ~FA_READ) ? 1 : 0); /* Check if the file can be used */
 18186                        ;			}
 18187                        ;#endif
 18188                        ;		}
 18189                        L10413:
 18190                        	.line	4198
 18191                        ;
 18192                        ;		//k_debug_integer("f_open mode:", mode);
 18193                        ;
 18194                        ;		/* Create or Open a file */
 18195                        ;		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_A
                    LWAYS | FA_CREATE_NEW))
 18196                        L10412:
 18197                        	.line	4203
 18198                        ;		{
 18199 08:4678: E2 20        	sep	#$20
 18200                        	longa	off
 18201 08:467A: A5 66        	lda	<L764+mode_0
 18202 08:467C: 29 1C        	and	#<$1c
 18203 08:467E: C2 20        	rep	#$20
 18204                        	longa	on
 18205 08:4680: D0 03        	bne	L773
 18206 08:4682: 82 3D 01     	brl	L10414
 18207                        L773:
 18208                        	.line	4204
 18209                        ;			if (res != FR_OK)
 18210                        	.line	4205
 18211                        ;			{ /* No file, create new */
 18212 08:4685: A5 09        	lda	<L765+res_1
 18213 08:4687: D0 03        	bne	L774
 18214 08:4689: 82 24 00     	brl	L10415
 18215                        L774:
 18216                        	.line	4206
 18217                        ;				if (res == FR_NO_FILE)
 18218                        	.line	4207
 18219                        ;				{ /* There is no file to
                     open, create a new entry */
 18220 08:468C: A5 09        	lda	<L765+res_1
 18221 08:468E: C9 04 00     	cmp	#<$4
 18222 08:4691: F0 03        	beq	L775
 18223 08:4693: 82 0F 00     	brl	L10416
 18224                        L775:
 18225                        	.line	4208
 18226                        ;#if FF_FS_LOCK != 0
 18227                        ;					res = enq_lock()
                     ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 18228                        ;#else
 18229                        ;					res = dir_regist
  Mon Aug  9 2021 16:52                                                Page 347


                    er(&dj);
 18230                        	.line	4212
 18231 08:4696: F4 00 00     	pea	#0
 18232 08:4699: 18           	clc
 18233 08:469A: 7B           	tdc
 18234 08:469B: 69 0B 00     	adc	#<L765+dj_1
 18235 08:469E: 48           	pha
 18236 08:469F: 22 1E 28 08  	jsl	~~dir_register
 18237 08:46A3: 85 09        	sta	<L765+res_1
 18238                        ;#endif
 18239                        ;				}
 18240                        	.line	4214
 18241                        ;				mode |= FA_CREATE_ALWAYS
                    ; /* File is created */
 18242                        L10416:
 18243                        	.line	4215
 18244 08:46A5: E2 20        	sep	#$20
 18245                        	longa	off
 18246 08:46A7: A9 08        	lda	#$8
 18247 08:46A9: 04 66        	tsb	<L764+mode_0
 18248 08:46AB: C2 20        	rep	#$20
 18249                        	longa	on
 18250                        ;			}
 18251                        	.line	4216
 18252                        ;			else
 18253 08:46AD: 82 27 00     	brl	L10417
 18254                        L10415:
 18255                        ;			{ /* Any object with the same na
                    me is already existing */
 18256                        	.line	4218
 18257                        ;				if (dj.obj.attr & (AM_RD
                    O | AM_DIR))
 18258                        	.line	4219
 18259                        ;				{ /* Cannot overwrite it
                     (R/O or DIR) */
 18260 08:46B0: E2 20        	sep	#$20
 18261                        	longa	off
 18262 08:46B2: A5 11        	lda	<L765+dj_1+6
 18263 08:46B4: 29 11        	and	#<$11
 18264 08:46B6: C2 20        	rep	#$20
 18265                        	longa	on
 18266 08:46B8: D0 03        	bne	L776
 18267 08:46BA: 82 08 00     	brl	L10418
 18268                        L776:
 18269                        	.line	4220
 18270                        ;					res = FR_DENIED;
 18271                        	.line	4221
 18272 08:46BD: A9 07 00     	lda	#$7
 18273 08:46C0: 85 09        	sta	<L765+res_1
 18274                        ;				}
 18275                        	.line	4222
 18276                        ;				else
 18277 08:46C2: 82 12 00     	brl	L10419
 18278                        L10418:
 18279                        ;				{
 18280                        	.line	4224
 18281                        ;					if (mode & FA_CR
                    EATE_NEW)
  Mon Aug  9 2021 16:52                                                Page 348


 18282                        	.line	4225
 18283                        ;						res = FR
                    _EXIST; /* Cannot create as new file */
 18284 08:46C5: E2 20        	sep	#$20
 18285                        	longa	off
 18286 08:46C7: A5 66        	lda	<L764+mode_0
 18287 08:46C9: 29 04        	and	#<$4
 18288 08:46CB: C2 20        	rep	#$20
 18289                        	longa	on
 18290 08:46CD: D0 03        	bne	L777
 18291 08:46CF: 82 05 00     	brl	L10420
 18292                        L777:
 18293                        	.line	4226
 18294 08:46D2: A9 08 00     	lda	#$8
 18295 08:46D5: 85 09        	sta	<L765+res_1
 18296                        ;				}
 18297                        L10420:
 18298                        	.line	4227
 18299                        L10419:
 18300                        ;			}
 18301                        	.line	4228
 18302                        L10417:
 18303                        ;			if (res == FR_OK && (mode & FA_C
                    REATE_ALWAYS))
 18304                        	.line	4229
 18305                        ;			{ /* Truncate the file if overwr
                    ite mode */
 18306 08:46D7: A5 09        	lda	<L765+res_1
 18307 08:46D9: F0 03        	beq	L778
 18308 08:46DB: 82 E1 00     	brl	L10421
 18309                        L778:
 18310 08:46DE: E2 20        	sep	#$20
 18311                        	longa	off
 18312 08:46E0: A5 66        	lda	<L764+mode_0
 18313 08:46E2: 29 08        	and	#<$8
 18314 08:46E4: C2 20        	rep	#$20
 18315                        	longa	on
 18316 08:46E6: D0 03        	bne	L779
 18317 08:46E8: 82 D4 00     	brl	L10421
 18318                        L779:
 18319                        	.line	4230
 18320                        ;#if FF_FS_EXFAT
 18321                        ;				if (fs->fs_type == FS_EX
                    FAT)
 18322                        ;				{
 18323                        ;					/* Get current a
                    llocation info */
 18324                        ;					fp->obj.fs = fs;
 18325                        ;					init_alloc_info(
                    fs, &fp->obj);
 18326                        ;					/* Set directory
                     entry block initial state */
 18327                        ;					mem_set(fs->dirb
                    uf + 2, 0, 30); /* Clear 85 entry except for NumSec */
 18328                        ;					mem_set(fs->dirb
                    uf + 38, 0, 26); /* Clear C0 entry except for NumName and Na
                    meHash */
 18329                        ;					fs->dirbuf[XDIR_
  Mon Aug  9 2021 16:52                                                Page 349


                    Attr] = AM_ARC;
 18330                        ;					st_dword(fs->dir
                    buf + XDIR_CrtTime, GET_FATTIME());
 18331                        ;					fs->dirbuf[XDIR_
                    GenFlags] = 1;
 18332                        ;					res = store_xdir
                    (&dj);
 18333                        ;					if (res == FR_OK
                     && fp->obj.sclust != 0)
 18334                        ;					{ /* Remove the 
                    cluster chain if exist */
 18335                        ;						res = re
                    move_chain(&fp->obj, fp->obj.sclust, 0);
 18336                        ;						fs->last
                    _clst = fp->obj.sclust - 1; /* Reuse the cluster hole */
 18337                        ;					}
 18338                        ;				}
 18339                        ;				else
 18340                        ;#endif
 18341                        ;				{
 18342                        	.line	4252
 18343                        ;					//k_debug_string
                    ("f_open::Set directory entry initial state...\r\n");
 18344                        ;					/* Set directory
                     entry initial state */
 18345                        ;					cl = ld_clust(fs
                    , dj.dir); /* Get current cluster chain */
 18346                        	.line	4255
 18347 08:46EB: D4 29        	pei	<L765+dj_1+30
 18348 08:46ED: D4 27        	pei	<L765+dj_1+28
 18349 08:46EF: D4 41        	pei	<L765+fs_1+2
 18350 08:46F1: D4 3F        	pei	<L765+fs_1
 18351 08:46F3: 22 EC 1C 08  	jsl	~~ld_clust
 18352 08:46F7: 85 43        	sta	<L765+cl_1
 18353 08:46F9: 86 45        	stx	<L765+cl_1+2
 18354                        ;					st_dword(dj.dir 
                    + DIR_CrtTime, GET_FATTIME()); /* Set created time */
 18355                        	.line	4256
 18356 08:46FB: F4 21 52     	pea	#^$52210000
 18357 08:46FE: F4 00 00     	pea	#<$52210000
 18358 08:4701: 18           	clc
 18359 08:4702: A9 0E 00     	lda	#$e
 18360 08:4705: 65 27        	adc	<L765+dj_1+28
 18361 08:4707: 85 01        	sta	<R0
 18362 08:4709: A9 00 00     	lda	#$0
 18363 08:470C: 65 29        	adc	<L765+dj_1+30
 18364 08:470E: 85 03        	sta	<R0+2
 18365 08:4710: D4 03        	pei	<R0+2
 18366 08:4712: D4 01        	pei	<R0
 18367 08:4714: 22 16 01 08  	jsl	~~st_dword
 18368                        ;					dj.dir[DIR_Attr]
                     = AM_ARC; /* Reset attribute */
 18369                        	.line	4257
 18370 08:4718: E2 20        	sep	#$20
 18371                        	longa	off
 18372 08:471A: A9 20        	lda	#$20
 18373 08:471C: A0 0B 00     	ldy	#$b
 18374 08:471F: 97 27        	sta	[<L765+dj_1+28],Y
  Mon Aug  9 2021 16:52                                                Page 350


 18375 08:4721: C2 20        	rep	#$20
 18376                        	longa	on
 18377                        ;					st_clust(fs, dj.
                    dir, 0); /* Reset file allocation info */
 18378                        	.line	4258
 18379 08:4723: F4 00 00     	pea	#^$0
 18380 08:4726: F4 00 00     	pea	#<$0
 18381 08:4729: D4 29        	pei	<L765+dj_1+30
 18382 08:472B: D4 27        	pei	<L765+dj_1+28
 18383 08:472D: D4 41        	pei	<L765+fs_1+2
 18384 08:472F: D4 3F        	pei	<L765+fs_1
 18385 08:4731: 22 7C 1D 08  	jsl	~~st_clust
 18386                        ;					st_dword(dj.dir 
                    + DIR_FileSize, 0);
 18387                        	.line	4259
 18388 08:4735: F4 00 00     	pea	#^$0
 18389 08:4738: F4 00 00     	pea	#<$0
 18390 08:473B: 18           	clc
 18391 08:473C: A9 1C 00     	lda	#$1c
 18392 08:473F: 65 27        	adc	<L765+dj_1+28
 18393 08:4741: 85 01        	sta	<R0
 18394 08:4743: A9 00 00     	lda	#$0
 18395 08:4746: 65 29        	adc	<L765+dj_1+30
 18396 08:4748: 85 03        	sta	<R0+2
 18397 08:474A: D4 03        	pei	<R0+2
 18398 08:474C: D4 01        	pei	<R0
 18399 08:474E: 22 16 01 08  	jsl	~~st_dword
 18400                        ;					fs->wflag = 1;
 18401                        	.line	4260
 18402 08:4752: E2 20        	sep	#$20
 18403                        	longa	off
 18404 08:4754: A9 01        	lda	#$1
 18405 08:4756: A0 03 00     	ldy	#$3
 18406 08:4759: 97 3F        	sta	[<L765+fs_1],Y
 18407 08:475B: C2 20        	rep	#$20
 18408                        	longa	on
 18409                        ;					if (cl != 0)
 18410                        	.line	4261
 18411                        ;					{ /* Remove the 
                    cluster chain if exist */
 18412 08:475D: A5 43        	lda	<L765+cl_1
 18413 08:475F: 05 45        	ora	<L765+cl_1+2
 18414 08:4761: D0 03        	bne	L780
 18415 08:4763: 82 59 00     	brl	L10422
 18416                        L780:
 18417                        	.line	4262
 18418                        ;						sc = fs-
                    >winsect;
 18419                        	.line	4263
 18420 08:4766: A0 2F 00     	ldy	#$2f
 18421 08:4769: B7 3F        	lda	[<L765+fs_1],Y
 18422 08:476B: 85 4F        	sta	<L765+sc_1
 18423 08:476D: A0 31 00     	ldy	#$31
 18424 08:4770: B7 3F        	lda	[<L765+fs_1],Y
 18425 08:4772: 85 51        	sta	<L765+sc_1+2
 18426                        ;						res = re
                    move_chain(&dj.obj, cl, 0);
 18427                        	.line	4264
  Mon Aug  9 2021 16:52                                                Page 351


 18428 08:4774: F4 00 00     	pea	#^$0
 18429 08:4777: F4 00 00     	pea	#<$0
 18430 08:477A: D4 45        	pei	<L765+cl_1+2
 18431 08:477C: D4 43        	pei	<L765+cl_1
 18432 08:477E: F4 00 00     	pea	#0
 18433 08:4781: 18           	clc
 18434 08:4782: 7B           	tdc
 18435 08:4783: 69 0B 00     	adc	#<L765+dj_1
 18436 08:4786: 48           	pha
 18437 08:4787: 22 E0 10 08  	jsl	~~remove_chain
 18438 08:478B: 85 09        	sta	<L765+res_1
 18439                        ;						if (res 
                    == FR_OK)
 18440                        	.line	4265
 18441                        ;						{
 18442 08:478D: A5 09        	lda	<L765+res_1
 18443 08:478F: F0 03        	beq	L781
 18444 08:4791: 82 2B 00     	brl	L10423
 18445                        L781:
 18446                        	.line	4266
 18447                        ;							
                    res = move_window(fs, sc);
 18448                        	.line	4267
 18449 08:4794: D4 51        	pei	<L765+sc_1+2
 18450 08:4796: D4 4F        	pei	<L765+sc_1
 18451 08:4798: D4 41        	pei	<L765+fs_1+2
 18452 08:479A: D4 3F        	pei	<L765+fs_1
 18453 08:479C: 22 97 08 08  	jsl	~~move_window
 18454 08:47A0: 85 09        	sta	<L765+res_1
 18455                        ;							
                    fs->last_clst = cl - 1; /* Reuse the cluster hole */
 18456                        	.line	4268
 18457 08:47A2: 18           	clc
 18458 08:47A3: A9 FF FF     	lda	#$ffff
 18459 08:47A6: 65 43        	adc	<L765+cl_1
 18460 08:47A8: 85 01        	sta	<R0
 18461 08:47AA: A9 FF FF     	lda	#$ffff
 18462 08:47AD: 65 45        	adc	<L765+cl_1+2
 18463 08:47AF: 85 03        	sta	<R0+2
 18464 08:47B1: A5 01        	lda	<R0
 18465 08:47B3: A0 0F 00     	ldy	#$f
 18466 08:47B6: 97 3F        	sta	[<L765+fs_1],Y
 18467 08:47B8: A5 03        	lda	<R0+2
 18468 08:47BA: A0 11 00     	ldy	#$11
 18469 08:47BD: 97 3F        	sta	[<L765+fs_1],Y
 18470                        ;						}
 18471                        	.line	4269
 18472                        ;					}
 18473                        L10423:
 18474                        	.line	4270
 18475                        ;				}
 18476                        L10422:
 18477                        	.line	4271
 18478                        ;			}
 18479                        	.line	4272
 18480                        ;		}
 18481                        L10421:
 18482                        	.line	4273
  Mon Aug  9 2021 16:52                                                Page 352


 18483                        ;		else
 18484 08:47BF: 82 3B 00     	brl	L10424
 18485                        L10414:
 18486                        ;		{ /* Open an existing file */
 18487                        	.line	4275
 18488                        ;			if (res == FR_OK)
 18489                        	.line	4276
 18490                        ;			{ /* Is the object exsiting? */
 18491 08:47C2: A5 09        	lda	<L765+res_1
 18492 08:47C4: F0 03        	beq	L782
 18493 08:47C6: 82 34 00     	brl	L10425
 18494                        L782:
 18495                        	.line	4277
 18496                        ;				if (dj.obj.attr & AM_DIR
                    )
 18497                        	.line	4278
 18498                        ;				{ /* File open against a
                     directory */
 18499 08:47C9: E2 20        	sep	#$20
 18500                        	longa	off
 18501 08:47CB: A5 11        	lda	<L765+dj_1+6
 18502 08:47CD: 29 10        	and	#<$10
 18503 08:47CF: C2 20        	rep	#$20
 18504                        	longa	on
 18505 08:47D1: D0 03        	bne	L783
 18506 08:47D3: 82 08 00     	brl	L10426
 18507                        L783:
 18508                        	.line	4279
 18509                        ;					res = FR_NO_FILE
                    ;
 18510                        	.line	4280
 18511 08:47D6: A9 04 00     	lda	#$4
 18512 08:47D9: 85 09        	sta	<L765+res_1
 18513                        ;				}
 18514                        	.line	4281
 18515                        ;				else
 18516 08:47DB: 82 1F 00     	brl	L10427
 18517                        L10426:
 18518                        ;				{
 18519                        	.line	4283
 18520                        ;					if ((mode & FA_W
                    RITE) && (dj.obj.attr & AM_RDO))
 18521                        	.line	4284
 18522                        ;					{ /* Write mode 
                    open against R/O file */
 18523 08:47DE: E2 20        	sep	#$20
 18524                        	longa	off
 18525 08:47E0: A5 66        	lda	<L764+mode_0
 18526 08:47E2: 29 02        	and	#<$2
 18527 08:47E4: C2 20        	rep	#$20
 18528                        	longa	on
 18529 08:47E6: D0 03        	bne	L784
 18530 08:47E8: 82 12 00     	brl	L10428
 18531                        L784:
 18532 08:47EB: E2 20        	sep	#$20
 18533                        	longa	off
 18534 08:47ED: A5 11        	lda	<L765+dj_1+6
 18535 08:47EF: 29 01        	and	#<$1
  Mon Aug  9 2021 16:52                                                Page 353


 18536 08:47F1: C2 20        	rep	#$20
 18537                        	longa	on
 18538 08:47F3: D0 03        	bne	L785
 18539 08:47F5: 82 05 00     	brl	L10428
 18540                        L785:
 18541                        	.line	4285
 18542                        ;						res = FR
                    _DENIED;
 18543                        	.line	4286
 18544 08:47F8: A9 07 00     	lda	#$7
 18545 08:47FB: 85 09        	sta	<L765+res_1
 18546                        ;					}
 18547                        	.line	4287
 18548                        ;				}
 18549                        L10428:
 18550                        	.line	4288
 18551                        L10427:
 18552                        ;			}
 18553                        	.line	4289
 18554                        ;		}
 18555                        L10425:
 18556                        	.line	4290
 18557                        L10424:
 18558                        ;		if (res == FR_OK)
 18559                        	.line	4291
 18560                        ;		{
 18561 08:47FD: A5 09        	lda	<L765+res_1
 18562 08:47FF: F0 03        	beq	L786
 18563 08:4801: 82 37 00     	brl	L10429
 18564                        L786:
 18565                        	.line	4292
 18566                        ;			if (mode & FA_CREATE_ALWAYS)
 18567                        	.line	4293
 18568                        ;				mode |= FA_MODIFIED; /* 
                    Set file change flag if created or overwritten */
 18569 08:4804: E2 20        	sep	#$20
 18570                        	longa	off
 18571 08:4806: A5 66        	lda	<L764+mode_0
 18572 08:4808: 29 08        	and	#<$8
 18573 08:480A: C2 20        	rep	#$20
 18574                        	longa	on
 18575 08:480C: D0 03        	bne	L787
 18576 08:480E: 82 08 00     	brl	L10430
 18577                        L787:
 18578                        	.line	4294
 18579 08:4811: E2 20        	sep	#$20
 18580                        	longa	off
 18581 08:4813: A9 40        	lda	#$40
 18582 08:4815: 04 66        	tsb	<L764+mode_0
 18583 08:4817: C2 20        	rep	#$20
 18584                        	longa	on
 18585                        ;			fp->dir_sect = fs->winsect; /* P
                    ointer to the directory entry */
 18586                        L10430:
 18587                        	.line	4295
 18588 08:4819: A0 2F 00     	ldy	#$2f
 18589 08:481C: B7 3F        	lda	[<L765+fs_1],Y
 18590 08:481E: A0 1E 00     	ldy	#$1e
  Mon Aug  9 2021 16:52                                                Page 354


 18591 08:4821: 97 5E        	sta	[<L764+fp_0],Y
 18592 08:4823: A0 31 00     	ldy	#$31
 18593 08:4826: B7 3F        	lda	[<L765+fs_1],Y
 18594 08:4828: A0 20 00     	ldy	#$20
 18595 08:482B: 97 5E        	sta	[<L764+fp_0],Y
 18596                        ;			fp->dir_ptr = dj.dir;
 18597                        	.line	4296
 18598 08:482D: A5 27        	lda	<L765+dj_1+28
 18599 08:482F: A0 22 00     	ldy	#$22
 18600 08:4832: 97 5E        	sta	[<L764+fp_0],Y
 18601 08:4834: A5 29        	lda	<L765+dj_1+30
 18602 08:4836: A0 24 00     	ldy	#$24
 18603 08:4839: 97 5E        	sta	[<L764+fp_0],Y
 18604                        ;#if FF_FS_LOCK != 0
 18605                        ;			fp->obj.lockid = inc_lock(&dj, (
                    mode & ~FA_READ) ? 1 : 0); /* Lock the file for this session
                     */
 18606                        ;			if (fp->obj.lockid == 0) res = F
                    R_INT_ERR;
 18607                        ;#endif
 18608                        ;		}
 18609                        	.line	4301
 18610                        ;#else		/* R/O configuration */
 18611                        ;		if (res == FR_OK)
 18612                        ;		{
 18613                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 18614                        ;			{ /* Is it origin directory itse
                    lf? */
 18615                        ;				res = FR_INVALID_NAME;
 18616                        ;			}
 18617                        ;			else
 18618                        ;			{
 18619                        ;				if (dj.obj.attr & AM_DIR
                    )
 18620                        ;				{ /* Is it a directory? 
                    */
 18621                        ;					res = FR_NO_FILE
                    ;
 18622                        ;				}
 18623                        ;			}
 18624                        ;		}
 18625                        ;#endif
 18626                        ;
 18627                        ;		if (res == FR_OK)
 18628                        L10429:
 18629                        	.line	4319
 18630                        ;		{
 18631 08:483B: A5 09        	lda	<L765+res_1
 18632 08:483D: F0 03        	beq	L788
 18633 08:483F: 82 22 02     	brl	L10431
 18634                        L788:
 18635                        	.line	4320
 18636                        ;#if FF_FS_EXFAT
 18637                        ;			if (fs->fs_type == FS_EXFAT)
 18638                        ;			{
 18639                        ;				fp->obj.c_scl = dj.obj.s
                    clust; /* Get containing directory info */
 18640                        ;				fp->obj.c_size = ((DWORD
  Mon Aug  9 2021 16:52                                                Page 355


                    )dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 18641                        ;				fp->obj.c_ofs = dj.blk_o
                    fs;
 18642                        ;				init_alloc_info(fs, &fp-
                    >obj);
 18643                        ;			}
 18644                        ;			else
 18645                        ;#endif
 18646                        ;			{
 18647                        	.line	4331
 18648                        ;				fp->obj.sclust = ld_clus
                    t(fs, dj.dir); /* Get object allocation info */
 18649                        	.line	4332
 18650 08:4842: D4 29        	pei	<L765+dj_1+30
 18651 08:4844: D4 27        	pei	<L765+dj_1+28
 18652 08:4846: D4 41        	pei	<L765+fs_1+2
 18653 08:4848: D4 3F        	pei	<L765+fs_1
 18654 08:484A: 22 EC 1C 08  	jsl	~~ld_clust
 18655 08:484E: 85 01        	sta	<R0
 18656 08:4850: 86 03        	stx	<R0+2
 18657 08:4852: A5 01        	lda	<R0
 18658 08:4854: A0 08 00     	ldy	#$8
 18659 08:4857: 97 5E        	sta	[<L764+fp_0],Y
 18660 08:4859: A5 03        	lda	<R0+2
 18661 08:485B: A0 0A 00     	ldy	#$a
 18662 08:485E: 97 5E        	sta	[<L764+fp_0],Y
 18663                        ;				fp->obj.objsize = ld_dwo
                    rd(dj.dir + DIR_FileSize);
 18664                        	.line	4333
 18665 08:4860: 18           	clc
 18666 08:4861: A9 1C 00     	lda	#$1c
 18667 08:4864: 65 27        	adc	<L765+dj_1+28
 18668 08:4866: 85 01        	sta	<R0
 18669 08:4868: A9 00 00     	lda	#$0
 18670 08:486B: 65 29        	adc	<L765+dj_1+30
 18671 08:486D: 85 03        	sta	<R0+2
 18672 08:486F: D4 03        	pei	<R0+2
 18673 08:4871: D4 01        	pei	<R0
 18674 08:4873: 22 3B 00 08  	jsl	~~ld_dword
 18675 08:4877: 85 05        	sta	<R1
 18676 08:4879: 86 07        	stx	<R1+2
 18677 08:487B: A5 05        	lda	<R1
 18678 08:487D: A0 0C 00     	ldy	#$c
 18679 08:4880: 97 5E        	sta	[<L764+fp_0],Y
 18680 08:4882: A5 07        	lda	<R1+2
 18681 08:4884: A0 0E 00     	ldy	#$e
 18682 08:4887: 97 5E        	sta	[<L764+fp_0],Y
 18683                        ;			}
 18684                        	.line	4334
 18685                        ;#if FF_USE_FASTSEEK
 18686                        ;			fp->cltbl = 0; /* Disable fast s
                    eek mode */
 18687                        ;#endif
 18688                        ;			fp->obj.fs = fs; /* Validate the
                     file object */
 18689                        	.line	4338
 18690 08:4889: A5 3F        	lda	<L765+fs_1
 18691 08:488B: 87 5E        	sta	[<L764+fp_0]
  Mon Aug  9 2021 16:52                                                Page 356


 18692 08:488D: A5 41        	lda	<L765+fs_1+2
 18693 08:488F: A0 02 00     	ldy	#$2
 18694 08:4892: 97 5E        	sta	[<L764+fp_0],Y
 18695                        ;			fp->obj.id = fs->id;
 18696                        	.line	4339
 18697 08:4894: A0 05 00     	ldy	#$5
 18698 08:4897: B7 3F        	lda	[<L765+fs_1],Y
 18699 08:4899: A0 04 00     	ldy	#$4
 18700 08:489C: 97 5E        	sta	[<L764+fp_0],Y
 18701                        ;			fp->flag = mode; /* Set file acc
                    ess mode */
 18702                        	.line	4340
 18703 08:489E: E2 20        	sep	#$20
 18704                        	longa	off
 18705 08:48A0: A5 66        	lda	<L764+mode_0
 18706 08:48A2: A0 10 00     	ldy	#$10
 18707 08:48A5: 97 5E        	sta	[<L764+fp_0],Y
 18708 08:48A7: C2 20        	rep	#$20
 18709                        	longa	on
 18710                        ;			fp->err = 0; /* Clear error flag
                     */
 18711                        	.line	4341
 18712 08:48A9: E2 20        	sep	#$20
 18713                        	longa	off
 18714 08:48AB: A9 00        	lda	#$0
 18715 08:48AD: A0 11 00     	ldy	#$11
 18716 08:48B0: 97 5E        	sta	[<L764+fp_0],Y
 18717 08:48B2: C2 20        	rep	#$20
 18718                        	longa	on
 18719                        ;			fp->sect = 0; /* Invalidate curr
                    ent data sector */
 18720                        	.line	4342
 18721 08:48B4: A9 00 00     	lda	#$0
 18722 08:48B7: A0 1A 00     	ldy	#$1a
 18723 08:48BA: 97 5E        	sta	[<L764+fp_0],Y
 18724 08:48BC: A9 00 00     	lda	#$0
 18725 08:48BF: A0 1C 00     	ldy	#$1c
 18726 08:48C2: 97 5E        	sta	[<L764+fp_0],Y
 18727                        ;			fp->fptr = 0; /* Set file pointe
                    r top of the file */
 18728                        	.line	4343
 18729 08:48C4: A9 00 00     	lda	#$0
 18730 08:48C7: A0 12 00     	ldy	#$12
 18731 08:48CA: 97 5E        	sta	[<L764+fp_0],Y
 18732 08:48CC: A9 00 00     	lda	#$0
 18733 08:48CF: A0 14 00     	ldy	#$14
 18734 08:48D2: 97 5E        	sta	[<L764+fp_0],Y
 18735                        ;#if !FF_FS_READONLY
 18736                        ;#if !FF_FS_TINY
 18737                        ;			mem_set(fp->buf, 0, sizeof fp->b
                    uf); /* Clear sector buffer */
 18738                        	.line	4346
 18739 08:48D4: F4 00 02     	pea	#<$200
 18740 08:48D7: F4 00 00     	pea	#<$0
 18741 08:48DA: 18           	clc
 18742 08:48DB: A9 26 00     	lda	#$26
 18743 08:48DE: 65 5E        	adc	<L764+fp_0
 18744 08:48E0: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 357


 18745 08:48E2: A9 00 00     	lda	#$0
 18746 08:48E5: 65 60        	adc	<L764+fp_0+2
 18747 08:48E7: 85 03        	sta	<R0+2
 18748 08:48E9: D4 03        	pei	<R0+2
 18749 08:48EB: D4 01        	pei	<R0
 18750 08:48ED: 22 DF 01 08  	jsl	~~mem_set
 18751                        ;#endif
 18752                        ;			if ((mode & FA_SEEKEND) && fp->o
                    bj.objsize > 0)
 18753                        	.line	4348
 18754                        ;			{ /* Seek to end of file if FA_O
                    PEN_APPEND is specified */
 18755 08:48F1: E2 20        	sep	#$20
 18756                        	longa	off
 18757 08:48F3: A5 66        	lda	<L764+mode_0
 18758 08:48F5: 29 20        	and	#<$20
 18759 08:48F7: C2 20        	rep	#$20
 18760                        	longa	on
 18761 08:48F9: D0 03        	bne	L789
 18762 08:48FB: 82 66 01     	brl	L10432
 18763                        L789:
 18764 08:48FE: A9 00 00     	lda	#$0
 18765 08:4901: A0 0C 00     	ldy	#$c
 18766 08:4904: D7 5E        	cmp	[<L764+fp_0],Y
 18767 08:4906: A9 00 00     	lda	#$0
 18768 08:4909: A0 0E 00     	ldy	#$e
 18769 08:490C: F7 5E        	sbc	[<L764+fp_0],Y
 18770 08:490E: 90 03        	bcc	L790
 18771 08:4910: 82 51 01     	brl	L10432
 18772                        L790:
 18773                        	.line	4349
 18774                        ;				fp->fptr = fp->obj.objsi
                    ze; /* Offset to seek */
 18775                        	.line	4350
 18776 08:4913: A0 0C 00     	ldy	#$c
 18777 08:4916: B7 5E        	lda	[<L764+fp_0],Y
 18778 08:4918: A0 12 00     	ldy	#$12
 18779 08:491B: 97 5E        	sta	[<L764+fp_0],Y
 18780 08:491D: A0 0E 00     	ldy	#$e
 18781 08:4920: B7 5E        	lda	[<L764+fp_0],Y
 18782 08:4922: A0 14 00     	ldy	#$14
 18783 08:4925: 97 5E        	sta	[<L764+fp_0],Y
 18784                        ;				bcs = (DWORD) fs->csize 
                    * SS(fs); /* Cluster size in byte */
 18785                        	.line	4351
 18786 08:4927: A0 00 00     	ldy	#$0
 18787 08:492A: 5A           	phy
 18788 08:492B: A0 09 00     	ldy	#$9
 18789 08:492E: B7 3F        	lda	[<L765+fs_1],Y
 18790 08:4930: 7A           	ply
 18791 08:4931: 2A           	rol	A
 18792 08:4932: 6A           	ror	A
 18793 08:4933: 10 01        	bpl	L791
 18794 08:4935: 88           	dey
 18795                        L791:
 18796 08:4936: 85 01        	sta	<R0
 18797 08:4938: 84 03        	sty	<R0+2
 18798 08:493A: D4 03        	pei	<R0+2
  Mon Aug  9 2021 16:52                                                Page 358


 18799 08:493C: D4 01        	pei	<R0
 18800 08:493E: A9 09 00     	lda	#$9
 18801                        	xref	~~~lasl
 18802 08:4941: 22 xx xx xx  	jsl	~~~lasl
 18803 08:4945: 85 47        	sta	<L765+bcs_1
 18804 08:4947: 86 49        	stx	<L765+bcs_1+2
 18805                        ;				clst = fp->obj.sclust; /
                    * Follow the cluster chain */
 18806                        	.line	4352
 18807 08:4949: A0 08 00     	ldy	#$8
 18808 08:494C: B7 5E        	lda	[<L764+fp_0],Y
 18809 08:494E: 85 4B        	sta	<L765+clst_1
 18810 08:4950: A0 0A 00     	ldy	#$a
 18811 08:4953: B7 5E        	lda	[<L764+fp_0],Y
 18812 08:4955: 85 4D        	sta	<L765+clst_1+2
 18813                        ;				for (ofs = fp->obj.objsi
                    ze; res == FR_OK && ofs > bcs; ofs -=
 18814                        	.line	4353
 18815 08:4957: A0 0C 00     	ldy	#$c
 18816 08:495A: B7 5E        	lda	[<L764+fp_0],Y
 18817 08:495C: 85 53        	sta	<L765+ofs_1
 18818 08:495E: A0 0E 00     	ldy	#$e
 18819 08:4961: B7 5E        	lda	[<L764+fp_0],Y
 18820 08:4963: 85 55        	sta	<L765+ofs_1+2
 18821 08:4965: 82 47 00     	brl	L10436
 18822                        ;						bcs)
 18823                        L10435:
 18824                        ;				{
 18825                        	.line	4355
 18826                        ;					clst = get_fat(&
                    fp->obj, clst);
 18827                        	.line	4356
 18828 08:4968: D4 4D        	pei	<L765+clst_1+2
 18829 08:496A: D4 4B        	pei	<L765+clst_1
 18830 08:496C: D4 60        	pei	<L764+fp_0+2
 18831 08:496E: D4 5E        	pei	<L764+fp_0
 18832 08:4970: 22 2A 0B 08  	jsl	~~get_fat
 18833 08:4974: 85 4B        	sta	<L765+clst_1
 18834 08:4976: 86 4D        	stx	<L765+clst_1+2
 18835                        ;					if (clst <= 1)
 18836                        	.line	4357
 18837                        ;						res = FR
                    _INT_ERR;
 18838 08:4978: A9 01 00     	lda	#$1
 18839 08:497B: C5 4B        	cmp	<L765+clst_1
 18840 08:497D: A9 00 00     	lda	#$0
 18841 08:4980: E5 4D        	sbc	<L765+clst_1+2
 18842 08:4982: B0 03        	bcs	L792
 18843 08:4984: 82 05 00     	brl	L10437
 18844                        L792:
 18845                        	.line	4358
 18846 08:4987: A9 02 00     	lda	#$2
 18847 08:498A: 85 09        	sta	<L765+res_1
 18848                        ;					if (clst == 0xFF
                    FFFFFF)
 18849                        L10437:
 18850                        	.line	4359
 18851                        ;						res = FR
  Mon Aug  9 2021 16:52                                                Page 359


                    _DISK_ERR;
 18852 08:498C: A5 4B        	lda	<L765+clst_1
 18853 08:498E: C9 FF FF     	cmp	#<$ffffffff
 18854 08:4991: D0 05        	bne	L793
 18855 08:4993: A5 4D        	lda	<L765+clst_1+2
 18856 08:4995: C9 FF FF     	cmp	#^$ffffffff
 18857                        L793:
 18858 08:4998: F0 03        	beq	L794
 18859 08:499A: 82 05 00     	brl	L10438
 18860                        L794:
 18861                        	.line	4360
 18862 08:499D: A9 01 00     	lda	#$1
 18863 08:49A0: 85 09        	sta	<L765+res_1
 18864                        ;				}
 18865                        L10438:
 18866                        	.line	4361
 18867                        L10433:
 18868 08:49A2: 38           	sec
 18869 08:49A3: A5 53        	lda	<L765+ofs_1
 18870 08:49A5: E5 47        	sbc	<L765+bcs_1
 18871 08:49A7: 85 53        	sta	<L765+ofs_1
 18872 08:49A9: A5 55        	lda	<L765+ofs_1+2
 18873 08:49AB: E5 49        	sbc	<L765+bcs_1+2
 18874 08:49AD: 85 55        	sta	<L765+ofs_1+2
 18875                        L10436:
 18876 08:49AF: A5 09        	lda	<L765+res_1
 18877 08:49B1: F0 03        	beq	L796
 18878 08:49B3: 82 0D 00     	brl	L795
 18879                        L796:
 18880 08:49B6: A5 47        	lda	<L765+bcs_1
 18881 08:49B8: C5 53        	cmp	<L765+ofs_1
 18882 08:49BA: A5 49        	lda	<L765+bcs_1+2
 18883 08:49BC: E5 55        	sbc	<L765+ofs_1+2
 18884 08:49BE: B0 03        	bcs	L797
 18885 08:49C0: 82 A5 FF     	brl	L10435
 18886                        L797:
 18887                        L795:
 18888                        L10434:
 18889                        ;				fp->clust = clst;
 18890                        	.line	4362
 18891 08:49C3: A5 4B        	lda	<L765+clst_1
 18892 08:49C5: A0 16 00     	ldy	#$16
 18893 08:49C8: 97 5E        	sta	[<L764+fp_0],Y
 18894 08:49CA: A5 4D        	lda	<L765+clst_1+2
 18895 08:49CC: A0 18 00     	ldy	#$18
 18896 08:49CF: 97 5E        	sta	[<L764+fp_0],Y
 18897                        ;				if (res == FR_OK && ofs 
                    % SS(fs))
 18898                        	.line	4363
 18899                        ;				{ /* Fill sector buffer 
                    if not on the sector boundary */
 18900 08:49D1: A5 09        	lda	<L765+res_1
 18901 08:49D3: F0 03        	beq	L798
 18902 08:49D5: 82 8C 00     	brl	L10439
 18903                        L798:
 18904 08:49D8: A5 53        	lda	<L765+ofs_1
 18905 08:49DA: 29 FF 01     	and	#<$1ff
 18906 08:49DD: D0 03        	bne	L799
  Mon Aug  9 2021 16:52                                                Page 360


 18907 08:49DF: 82 82 00     	brl	L10439
 18908                        L799:
 18909                        	.line	4364
 18910                        ;					sc = clst2sect(f
                    s, clst);
 18911                        	.line	4365
 18912 08:49E2: D4 4D        	pei	<L765+clst_1+2
 18913 08:49E4: D4 4B        	pei	<L765+clst_1
 18914 08:49E6: D4 41        	pei	<L765+fs_1+2
 18915 08:49E8: D4 3F        	pei	<L765+fs_1
 18916 08:49EA: 22 9B 0A 08  	jsl	~~clst2sect
 18917 08:49EE: 85 4F        	sta	<L765+sc_1
 18918 08:49F0: 86 51        	stx	<L765+sc_1+2
 18919                        ;					if (sc == 0)
 18920                        	.line	4366
 18921                        ;					{
 18922 08:49F2: A5 4F        	lda	<L765+sc_1
 18923 08:49F4: 05 51        	ora	<L765+sc_1+2
 18924 08:49F6: F0 03        	beq	L800
 18925 08:49F8: 82 08 00     	brl	L10440
 18926                        L800:
 18927                        	.line	4367
 18928                        ;						res = FR
                    _INT_ERR;
 18929                        	.line	4368
 18930 08:49FB: A9 02 00     	lda	#$2
 18931 08:49FE: 85 09        	sta	<L765+res_1
 18932                        ;					}
 18933                        	.line	4369
 18934                        ;					else
 18935 08:4A00: 82 61 00     	brl	L10441
 18936                        L10440:
 18937                        ;					{
 18938                        	.line	4371
 18939                        ;						fp->sect
                     = sc + (DWORD) (ofs / SS(fs));
 18940                        	.line	4372
 18941 08:4A03: D4 55        	pei	<L765+ofs_1+2
 18942 08:4A05: D4 53        	pei	<L765+ofs_1
 18943 08:4A07: A9 09 00     	lda	#$9
 18944                        	xref	~~~llsr
 18945 08:4A0A: 22 xx xx xx  	jsl	~~~llsr
 18946 08:4A0E: 85 01        	sta	<R0
 18947 08:4A10: 86 03        	stx	<R0+2
 18948 08:4A12: 18           	clc
 18949 08:4A13: A5 01        	lda	<R0
 18950 08:4A15: 65 4F        	adc	<L765+sc_1
 18951 08:4A17: 85 05        	sta	<R1
 18952 08:4A19: A5 03        	lda	<R0+2
 18953 08:4A1B: 65 51        	adc	<L765+sc_1+2
 18954 08:4A1D: 85 07        	sta	<R1+2
 18955 08:4A1F: A5 05        	lda	<R1
 18956 08:4A21: A0 1A 00     	ldy	#$1a
 18957 08:4A24: 97 5E        	sta	[<L764+fp_0],Y
 18958 08:4A26: A5 07        	lda	<R1+2
 18959 08:4A28: A0 1C 00     	ldy	#$1c
 18960 08:4A2B: 97 5E        	sta	[<L764+fp_0],Y
 18961                        ;#if !FF_FS_TINY
  Mon Aug  9 2021 16:52                                                Page 361


 18962                        ;						if (disk
                    _read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK)
 18963                        	.line	4374
 18964                        ;							
                    res = FR_DISK_ERR;
 18965 08:4A2D: F4 01 00     	pea	#<$1
 18966 08:4A30: A0 1C 00     	ldy	#$1c
 18967 08:4A33: B7 5E        	lda	[<L764+fp_0],Y
 18968 08:4A35: 48           	pha
 18969 08:4A36: A0 1A 00     	ldy	#$1a
 18970 08:4A39: B7 5E        	lda	[<L764+fp_0],Y
 18971 08:4A3B: 48           	pha
 18972 08:4A3C: 18           	clc
 18973 08:4A3D: A9 26 00     	lda	#$26
 18974 08:4A40: 65 5E        	adc	<L764+fp_0
 18975 08:4A42: 85 01        	sta	<R0
 18976 08:4A44: A9 00 00     	lda	#$0
 18977 08:4A47: 65 60        	adc	<L764+fp_0+2
 18978 08:4A49: 85 03        	sta	<R0+2
 18979 08:4A4B: D4 03        	pei	<R0+2
 18980 08:4A4D: D4 01        	pei	<R0
 18981 08:4A4F: A0 01 00     	ldy	#$1
 18982 08:4A52: B7 3F        	lda	[<L765+fs_1],Y
 18983 08:4A54: 48           	pha
 18984 08:4A55: 22 xx xx xx  	jsl	~~disk_read
 18985 08:4A59: AA           	tax
 18986 08:4A5A: D0 03        	bne	L801
 18987 08:4A5C: 82 05 00     	brl	L10442
 18988                        L801:
 18989                        	.line	4375
 18990 08:4A5F: A9 01 00     	lda	#$1
 18991 08:4A62: 85 09        	sta	<L765+res_1
 18992                        ;#endif
 18993                        ;					}
 18994                        L10442:
 18995                        	.line	4377
 18996                        L10441:
 18997                        ;				}
 18998                        	.line	4378
 18999                        ;			}
 19000                        L10439:
 19001                        	.line	4379
 19002                        ;#endif
 19003                        ;		}
 19004                        L10432:
 19005                        	.line	4381
 19006                        ;
 19007                        ;		FREE_NAMBUF();
 19008                        L10431:
 19009                        	.line	4383
 19010 08:4A64: D4 59        	pei	<L765+lfn_1+2
 19011 08:4A66: D4 57        	pei	<L765+lfn_1
 19012 08:4A68: 22 70 92 08  	jsl	~~ff_memfree
 19013                        ;	}
 19014                        	.line	4384
 19015                        ;
 19016                        ;	if (res != FR_OK)
 19017                        L10410:
  Mon Aug  9 2021 16:52                                                Page 362


 19018                        	.line	4386
 19019                        ;		fp->obj.fs = 0; /* Invalidate file objec
                    t on error */
 19020 08:4A6C: A5 09        	lda	<L765+res_1
 19021 08:4A6E: D0 03        	bne	L802
 19022 08:4A70: 82 0D 00     	brl	L10443
 19023                        L802:
 19024                        	.line	4387
 19025 08:4A73: A9 00 00     	lda	#$0
 19026 08:4A76: 87 5E        	sta	[<L764+fp_0]
 19027 08:4A78: A9 00 00     	lda	#$0
 19028 08:4A7B: A0 02 00     	ldy	#$2
 19029 08:4A7E: 97 5E        	sta	[<L764+fp_0],Y
 19030                        ;
 19031                        ;	LEAVE_FF(fs, res);
 19032                        L10443:
 19033                        	.line	4389
 19034 08:4A80: A5 09        	lda	<L765+res_1
 19035 08:4A82: 82 5C FB     	brl	L768
 19036                        ;}
 19037                        	.line	4390
 19038                        	.endblock	4390
 19039             0000005A   L764	equ	90
 19040             00000009   L765	equ	9
 19041 08:4A85:              	ends
 19042                        	efunc
 19043                        	.endfunc	4390,9,90
 19044                        	.line	4390
 19045                        ;
 19046                        ;/*-----------------------------------------------
                    ------------------------*/
 19047                        ;/* Read File                                     
                                            */
 19048                        ;/*-----------------------------------------------
                    ------------------------*/
 19049                        ;
 19050                        ;FRESULT f_read(FIL* fp, /* Pointer to the file ob
                    ject */
 19051                        ;void* buff, /* Pointer to data buffer */
 19052                        ;UINT btr, /* Number of bytes to read */
 19053                        ;UINT* br /* Pointer to number of bytes read */
 19054                        ;)
 19055                        ;{
 19056                        	.line	4396
 19057                        	.line	4401
 19058                        	FFDOS
 19059                        	xdef	~~f_read
 19060                        	func
 19061                        	.function	4401
 19062                        ~~f_read:
 19063                        	longa	on
 19064                        	longi	on
 19065 08:4A85: 3B           	tsc
 19066 08:4A86: 38           	sec
 19067 08:4A87: E9 2C 00     	sbc	#L803
 19068 08:4A8A: 1B           	tcs
 19069 08:4A8B: 0B           	phd
 19070 08:4A8C: 5B           	tcd
  Mon Aug  9 2021 16:52                                                Page 363


 19071             00000004   fp_0	set	4
 19072             00000008   buff_0	set	8
 19073             0000000C   btr_0	set	12
 19074             0000000E   br_0	set	14
 19075                        	.block	4401
 19076                        ;	FRESULT res;
 19077                        ;	FATFS *fs;
 19078                        ;	DWORD clst;
 19079                        ;	LBA_t sect;
 19080                        ;	FSIZE_t remain;
 19081                        ;	UINT rcnt, cc, csect;
 19082                        ;	BYTE *rbuff = (BYTE*) buff;
 19083                        ;
 19084                        ;	////k_debug_string("f_read...\r\n");
 19085                        ;
 19086                        ;	*br = 0; /* Clear read byte counter */
 19087             00000000   res_1	set	0
 19088             00000002   fs_1	set	2
 19089             00000006   clst_1	set	6
 19090             0000000A   sect_1	set	10
 19091             0000000E   remain_1	set	14
 19092             00000012   rcnt_1	set	18
 19093             00000014   cc_1	set	20
 19094             00000016   csect_1	set	22
 19095             00000018   rbuff_1	set	24
 19096                        	.sym	res,0,5,1,16
 19097                        	.sym	fs,2,138,1,32,75
 19098                        	.sym	clst,6,18,1,32
 19099                        	.sym	sect,10,18,1,32
 19100                        	.sym	remain,14,18,1,32
 19101                        	.sym	rcnt,18,16,1,16
 19102                        	.sym	cc,20,16,1,16
 19103                        	.sym	csect,22,16,1,16
 19104                        	.sym	rbuff,24,142,1,32
 19105                        	.sym	fp,4,138,6,32,77
 19106                        	.sym	buff,8,129,6,32
 19107                        	.sym	btr,12,16,6,16
 19108                        	.sym	br,14,144,6,32
 19109 08:4A8D: A5 34        	lda	<L803+buff_0
 19110 08:4A8F: 85 29        	sta	<L804+rbuff_1
 19111 08:4A91: A5 36        	lda	<L803+buff_0+2
 19112 08:4A93: 85 2B        	sta	<L804+rbuff_1+2
 19113                        	.line	4412
 19114 08:4A95: A9 00 00     	lda	#$0
 19115 08:4A98: 87 3A        	sta	[<L803+br_0]
 19116                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 19117                        	.line	4413
 19118 08:4A9A: F4 00 00     	pea	#0
 19119 08:4A9D: 18           	clc
 19120 08:4A9E: 7B           	tdc
 19121 08:4A9F: 69 13 00     	adc	#<L804+fs_1
 19122 08:4AA2: 48           	pha
 19123 08:4AA3: D4 32        	pei	<L803+fp_0+2
 19124 08:4AA5: D4 30        	pei	<L803+fp_0
 19125 08:4AA7: 22 57 44 08  	jsl	~~validate
 19126 08:4AAB: 85 11        	sta	<L804+res_1
 19127                        ;
  Mon Aug  9 2021 16:52                                                Page 364


 19128                        ;	////k_debug_long("f_read:res:", res);
 19129                        ;
 19130                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 19131                        	.line	4417
 19132                        ;		LEAVE_FF(fs, res); /* Check validity */
 19133 08:4AAD: A5 11        	lda	<L804+res_1
 19134 08:4AAF: F0 03        	beq	L807
 19135 08:4AB1: 82 11 00     	brl	L806
 19136                        L807:
 19137 08:4AB4: A0 11 00     	ldy	#$11
 19138 08:4AB7: B7 30        	lda	[<L803+fp_0],Y
 19139 08:4AB9: 29 FF 00     	and	#$ff
 19140 08:4ABC: 85 11        	sta	<L804+res_1
 19141 08:4ABE: A5 11        	lda	<L804+res_1
 19142 08:4AC0: D0 03        	bne	L808
 19143 08:4AC2: 82 14 00     	brl	L10444
 19144                        L808:
 19145                        L806:
 19146                        	.line	4418
 19147 08:4AC5: A5 11        	lda	<L804+res_1
 19148                        L809:
 19149 08:4AC7: A8           	tay
 19150 08:4AC8: A5 2E        	lda	<L803+2
 19151 08:4ACA: 85 3C        	sta	<L803+2+14
 19152 08:4ACC: A5 2D        	lda	<L803+1
 19153 08:4ACE: 85 3B        	sta	<L803+1+14
 19154 08:4AD0: 2B           	pld
 19155 08:4AD1: 3B           	tsc
 19156 08:4AD2: 18           	clc
 19157 08:4AD3: 69 3A 00     	adc	#L803+14
 19158 08:4AD6: 1B           	tcs
 19159 08:4AD7: 98           	tya
 19160 08:4AD8: 6B           	rtl
 19161                        ;	if (!(fp->flag & FA_READ))
 19162                        L10444:
 19163                        	.line	4419
 19164                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 19165 08:4AD9: E2 20        	sep	#$20
 19166                        	longa	off
 19167 08:4ADB: A0 10 00     	ldy	#$10
 19168 08:4ADE: B7 30        	lda	[<L803+fp_0],Y
 19169 08:4AE0: 29 01        	and	#<$1
 19170 08:4AE2: C2 20        	rep	#$20
 19171                        	longa	on
 19172 08:4AE4: F0 03        	beq	L810
 19173 08:4AE6: 82 06 00     	brl	L10445
 19174                        L810:
 19175                        	.line	4420
 19176 08:4AE9: A9 07 00     	lda	#$7
 19177 08:4AEC: 82 D8 FF     	brl	L809
 19178                        ;	remain = fp->obj.objsize - fp->fptr;
 19179                        L10445:
 19180                        	.line	4421
 19181 08:4AEF: 38           	sec
 19182 08:4AF0: A0 0C 00     	ldy	#$c
 19183 08:4AF3: B7 30        	lda	[<L803+fp_0],Y
  Mon Aug  9 2021 16:52                                                Page 365


 19184 08:4AF5: A0 12 00     	ldy	#$12
 19185 08:4AF8: F7 30        	sbc	[<L803+fp_0],Y
 19186 08:4AFA: 85 1F        	sta	<L804+remain_1
 19187 08:4AFC: A0 0E 00     	ldy	#$e
 19188 08:4AFF: B7 30        	lda	[<L803+fp_0],Y
 19189 08:4B01: A0 14 00     	ldy	#$14
 19190 08:4B04: F7 30        	sbc	[<L803+fp_0],Y
 19191 08:4B06: 85 21        	sta	<L804+remain_1+2
 19192                        ;	if (btr > remain)
 19193                        	.line	4422
 19194                        ;		btr = (UINT) remain; /* Truncate btr by 
                    remaining bytes */
 19195 08:4B08: A5 38        	lda	<L803+btr_0
 19196 08:4B0A: 85 01        	sta	<R0
 19197 08:4B0C: 64 03        	stz	<R0+2
 19198 08:4B0E: A5 1F        	lda	<L804+remain_1
 19199 08:4B10: C5 01        	cmp	<R0
 19200 08:4B12: A5 21        	lda	<L804+remain_1+2
 19201 08:4B14: E5 03        	sbc	<R0+2
 19202 08:4B16: 90 03        	bcc	L811
 19203 08:4B18: 82 04 00     	brl	L10446
 19204                        L811:
 19205                        	.line	4423
 19206 08:4B1B: A5 1F        	lda	<L804+remain_1
 19207 08:4B1D: 85 38        	sta	<L803+btr_0
 19208                        ;
 19209                        ;	for (; btr; /* Repeat until btr bytes read */
 19210                        L10446:
 19211                        	.line	4425
 19212 08:4B1F: 82 75 03     	brl	L10450
 19213                        ;	btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fpt
                    r += rcnt)
 19214                        L10449:
 19215                        ;	{
 19216                        	.line	4427
 19217                        ;		if (fp->fptr % SS(fs) == 0)
 19218                        	.line	4428
 19219                        ;		{ /* On the sector boundary? */
 19220 08:4B22: A0 12 00     	ldy	#$12
 19221 08:4B25: B7 30        	lda	[<L803+fp_0],Y
 19222 08:4B27: 29 FF 01     	and	#<$1ff
 19223 08:4B2A: F0 03        	beq	L812
 19224 08:4B2C: 82 CA 02     	brl	L10451
 19225                        L812:
 19226                        	.line	4429
 19227                        ;			csect = (UINT) (fp->fptr / SS(fs
                    ) & (fs->csize - 1)); /* Sector offset in the cluster */
 19228                        	.line	4430
 19229 08:4B2F: A0 14 00     	ldy	#$14
 19230 08:4B32: B7 30        	lda	[<L803+fp_0],Y
 19231 08:4B34: 48           	pha
 19232 08:4B35: A0 12 00     	ldy	#$12
 19233 08:4B38: B7 30        	lda	[<L803+fp_0],Y
 19234 08:4B3A: 48           	pha
 19235 08:4B3B: A9 09 00     	lda	#$9
 19236                        	xref	~~~llsr
 19237 08:4B3E: 22 xx xx xx  	jsl	~~~llsr
 19238 08:4B42: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 366


 19239 08:4B44: 86 03        	stx	<R0+2
 19240 08:4B46: 18           	clc
 19241 08:4B47: A9 FF FF     	lda	#$ffff
 19242 08:4B4A: A0 09 00     	ldy	#$9
 19243 08:4B4D: 77 13        	adc	[<L804+fs_1],Y
 19244 08:4B4F: 85 05        	sta	<R1
 19245 08:4B51: A0 00 00     	ldy	#$0
 19246 08:4B54: A5 05        	lda	<R1
 19247 08:4B56: 10 01        	bpl	L813
 19248 08:4B58: 88           	dey
 19249                        L813:
 19250 08:4B59: 85 05        	sta	<R1
 19251 08:4B5B: 84 07        	sty	<R1+2
 19252 08:4B5D: A5 05        	lda	<R1
 19253 08:4B5F: 25 01        	and	<R0
 19254 08:4B61: 85 09        	sta	<R2
 19255 08:4B63: A5 07        	lda	<R1+2
 19256 08:4B65: 25 03        	and	<R0+2
 19257 08:4B67: 85 0B        	sta	<R2+2
 19258 08:4B69: A5 09        	lda	<R2
 19259 08:4B6B: 85 27        	sta	<L804+csect_1
 19260                        ;			if (csect == 0)
 19261                        	.line	4431
 19262                        ;			{ /* On the cluster boundary? */
 19263 08:4B6D: A5 27        	lda	<L804+csect_1
 19264 08:4B6F: F0 03        	beq	L814
 19265 08:4B71: 82 88 00     	brl	L10452
 19266                        L814:
 19267                        	.line	4432
 19268                        ;				if (fp->fptr == 0)
 19269                        	.line	4433
 19270                        ;				{ /* On the top of the f
                    ile? */
 19271 08:4B74: A0 12 00     	ldy	#$12
 19272 08:4B77: B7 30        	lda	[<L803+fp_0],Y
 19273 08:4B79: A0 14 00     	ldy	#$14
 19274 08:4B7C: 17 30        	ora	[<L803+fp_0],Y
 19275 08:4B7E: F0 03        	beq	L815
 19276 08:4B80: 82 11 00     	brl	L10453
 19277                        L815:
 19278                        	.line	4434
 19279                        ;					clst = fp->obj.s
                    clust; /* Follow cluster chain from the origin */
 19280                        	.line	4435
 19281 08:4B83: A0 08 00     	ldy	#$8
 19282 08:4B86: B7 30        	lda	[<L803+fp_0],Y
 19283 08:4B88: 85 17        	sta	<L804+clst_1
 19284 08:4B8A: A0 0A 00     	ldy	#$a
 19285 08:4B8D: B7 30        	lda	[<L803+fp_0],Y
 19286 08:4B8F: 85 19        	sta	<L804+clst_1+2
 19287                        ;				}
 19288                        	.line	4436
 19289                        ;				else
 19290 08:4B91: 82 18 00     	brl	L10454
 19291                        L10453:
 19292                        ;				{ /* Middle or end of th
                    e file */
 19293                        	.line	4438
  Mon Aug  9 2021 16:52                                                Page 367


 19294                        ;#if FF_USE_FASTSEEK
 19295                        ;					if (fp->cltbl)
 19296                        ;					{
 19297                        ;						clst = c
                    lmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
 19298                        ;					}
 19299                        ;					else
 19300                        ;#endif
 19301                        ;					{
 19302                        	.line	4446
 19303                        ;						clst = g
                    et_fat(&fp->obj, fp->clust); /* Follow cluster chain on the 
                    FAT */
 19304                        	.line	4447
 19305 08:4B94: A0 18 00     	ldy	#$18
 19306 08:4B97: B7 30        	lda	[<L803+fp_0],Y
 19307 08:4B99: 48           	pha
 19308 08:4B9A: A0 16 00     	ldy	#$16
 19309 08:4B9D: B7 30        	lda	[<L803+fp_0],Y
 19310 08:4B9F: 48           	pha
 19311 08:4BA0: D4 32        	pei	<L803+fp_0+2
 19312 08:4BA2: D4 30        	pei	<L803+fp_0
 19313 08:4BA4: 22 2A 0B 08  	jsl	~~get_fat
 19314 08:4BA8: 85 17        	sta	<L804+clst_1
 19315 08:4BAA: 86 19        	stx	<L804+clst_1+2
 19316                        ;					}
 19317                        	.line	4448
 19318                        ;				}
 19319                        	.line	4449
 19320                        L10454:
 19321                        ;				if (clst < 2)
 19322                        	.line	4450
 19323                        ;					ABORT(fs, FR_INT
                    _ERR);
 19324 08:4BAC: A5 17        	lda	<L804+clst_1
 19325 08:4BAE: C9 02 00     	cmp	#<$2
 19326 08:4BB1: A5 19        	lda	<L804+clst_1+2
 19327 08:4BB3: E9 00 00     	sbc	#^$2
 19328 08:4BB6: 90 03        	bcc	L816
 19329 08:4BB8: 82 11 00     	brl	L10455
 19330                        L816:
 19331                        	.line	4451
 19332                        	.line	4451
 19333 08:4BBB: E2 20        	sep	#$20
 19334                        	longa	off
 19335 08:4BBD: A9 02        	lda	#$2
 19336 08:4BBF: A0 11 00     	ldy	#$11
 19337 08:4BC2: 97 30        	sta	[<L803+fp_0],Y
 19338 08:4BC4: C2 20        	rep	#$20
 19339                        	longa	on
 19340                        	.line	4451
 19341 08:4BC6: A9 02 00     	lda	#$2
 19342 08:4BC9: 82 FB FE     	brl	L809
 19343                        	.line	4451
 19344                        L10455:
 19345                        	.line	4451
 19346                        ;				if (clst == 0xFFFFFFFF)
 19347                        	.line	4452
  Mon Aug  9 2021 16:52                                                Page 368


 19348                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 19349 08:4BCC: A5 17        	lda	<L804+clst_1
 19350 08:4BCE: C9 FF FF     	cmp	#<$ffffffff
 19351 08:4BD1: D0 05        	bne	L817
 19352 08:4BD3: A5 19        	lda	<L804+clst_1+2
 19353 08:4BD5: C9 FF FF     	cmp	#^$ffffffff
 19354                        L817:
 19355 08:4BD8: F0 03        	beq	L818
 19356 08:4BDA: 82 11 00     	brl	L10456
 19357                        L818:
 19358                        	.line	4453
 19359                        	.line	4453
 19360 08:4BDD: E2 20        	sep	#$20
 19361                        	longa	off
 19362 08:4BDF: A9 01        	lda	#$1
 19363 08:4BE1: A0 11 00     	ldy	#$11
 19364 08:4BE4: 97 30        	sta	[<L803+fp_0],Y
 19365 08:4BE6: C2 20        	rep	#$20
 19366                        	longa	on
 19367                        	.line	4453
 19368 08:4BE8: A9 01 00     	lda	#$1
 19369 08:4BEB: 82 D9 FE     	brl	L809
 19370                        	.line	4453
 19371                        L10456:
 19372                        	.line	4453
 19373                        ;				fp->clust = clst; /* Upd
                    ate current cluster */
 19374                        	.line	4454
 19375 08:4BEE: A5 17        	lda	<L804+clst_1
 19376 08:4BF0: A0 16 00     	ldy	#$16
 19377 08:4BF3: 97 30        	sta	[<L803+fp_0],Y
 19378 08:4BF5: A5 19        	lda	<L804+clst_1+2
 19379 08:4BF7: A0 18 00     	ldy	#$18
 19380 08:4BFA: 97 30        	sta	[<L803+fp_0],Y
 19381                        ;			}
 19382                        	.line	4455
 19383                        ;			sect = clst2sect(fs, fp->clust);
                     /* Get current sector */
 19384                        L10452:
 19385                        	.line	4456
 19386 08:4BFC: A0 18 00     	ldy	#$18
 19387 08:4BFF: B7 30        	lda	[<L803+fp_0],Y
 19388 08:4C01: 48           	pha
 19389 08:4C02: A0 16 00     	ldy	#$16
 19390 08:4C05: B7 30        	lda	[<L803+fp_0],Y
 19391 08:4C07: 48           	pha
 19392 08:4C08: D4 15        	pei	<L804+fs_1+2
 19393 08:4C0A: D4 13        	pei	<L804+fs_1
 19394 08:4C0C: 22 9B 0A 08  	jsl	~~clst2sect
 19395 08:4C10: 85 1B        	sta	<L804+sect_1
 19396 08:4C12: 86 1D        	stx	<L804+sect_1+2
 19397                        ;			if (sect == 0)
 19398                        	.line	4457
 19399                        ;				ABORT(fs, FR_INT_ERR);
 19400 08:4C14: A5 1B        	lda	<L804+sect_1
 19401 08:4C16: 05 1D        	ora	<L804+sect_1+2
 19402 08:4C18: F0 03        	beq	L819
  Mon Aug  9 2021 16:52                                                Page 369


 19403 08:4C1A: 82 11 00     	brl	L10457
 19404                        L819:
 19405                        	.line	4458
 19406                        	.line	4458
 19407 08:4C1D: E2 20        	sep	#$20
 19408                        	longa	off
 19409 08:4C1F: A9 02        	lda	#$2
 19410 08:4C21: A0 11 00     	ldy	#$11
 19411 08:4C24: 97 30        	sta	[<L803+fp_0],Y
 19412 08:4C26: C2 20        	rep	#$20
 19413                        	longa	on
 19414                        	.line	4458
 19415 08:4C28: A9 02 00     	lda	#$2
 19416 08:4C2B: 82 99 FE     	brl	L809
 19417                        	.line	4458
 19418                        L10457:
 19419                        	.line	4458
 19420                        ;			sect += csect;
 19421                        	.line	4459
 19422 08:4C2E: A5 27        	lda	<L804+csect_1
 19423 08:4C30: 85 01        	sta	<R0
 19424 08:4C32: 64 03        	stz	<R0+2
 19425 08:4C34: 18           	clc
 19426 08:4C35: A5 01        	lda	<R0
 19427 08:4C37: 65 1B        	adc	<L804+sect_1
 19428 08:4C39: 85 1B        	sta	<L804+sect_1
 19429 08:4C3B: A5 03        	lda	<R0+2
 19430 08:4C3D: 65 1D        	adc	<L804+sect_1+2
 19431 08:4C3F: 85 1D        	sta	<L804+sect_1+2
 19432                        ;			cc = btr / SS(fs); /* When remai
                    ning bytes >= sector size, */
 19433                        	.line	4460
 19434 08:4C41: A5 38        	lda	<L803+btr_0
 19435 08:4C43: A2 09 00     	ldx	#<$9
 19436                        	xref	~~~lsr
 19437 08:4C46: 22 xx xx xx  	jsl	~~~lsr
 19438 08:4C4A: 85 25        	sta	<L804+cc_1
 19439                        ;			if (cc > 0)
 19440                        	.line	4461
 19441                        ;			{ /* Read maximum contiguous sec
                    tors directly */
 19442 08:4C4C: A9 00 00     	lda	#$0
 19443 08:4C4F: C5 25        	cmp	<L804+cc_1
 19444 08:4C51: 90 03        	bcc	L820
 19445 08:4C53: 82 D9 00     	brl	L10458
 19446                        L820:
 19447                        	.line	4462
 19448                        ;				if (csect + cc > fs->csi
                    ze)
 19449                        	.line	4463
 19450                        ;				{ /* Clip at cluster bou
                    ndary */
 19451 08:4C56: 18           	clc
 19452 08:4C57: A5 27        	lda	<L804+csect_1
 19453 08:4C59: 65 25        	adc	<L804+cc_1
 19454 08:4C5B: 85 01        	sta	<R0
 19455 08:4C5D: A0 09 00     	ldy	#$9
 19456 08:4C60: B7 13        	lda	[<L804+fs_1],Y
  Mon Aug  9 2021 16:52                                                Page 370


 19457 08:4C62: C5 01        	cmp	<R0
 19458 08:4C64: 90 03        	bcc	L821
 19459 08:4C66: 82 0A 00     	brl	L10459
 19460                        L821:
 19461                        	.line	4464
 19462                        ;					cc = fs->csize -
                     csect;
 19463                        	.line	4465
 19464 08:4C69: 38           	sec
 19465 08:4C6A: A0 09 00     	ldy	#$9
 19466 08:4C6D: B7 13        	lda	[<L804+fs_1],Y
 19467 08:4C6F: E5 27        	sbc	<L804+csect_1
 19468 08:4C71: 85 25        	sta	<L804+cc_1
 19469                        ;				}
 19470                        	.line	4466
 19471                        ;				if (disk_read(fs->pdrv, 
                    rbuff, sect, cc) != RES_OK)
 19472                        L10459:
 19473                        	.line	4467
 19474                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 19475 08:4C73: D4 25        	pei	<L804+cc_1
 19476 08:4C75: D4 1D        	pei	<L804+sect_1+2
 19477 08:4C77: D4 1B        	pei	<L804+sect_1
 19478 08:4C79: D4 2B        	pei	<L804+rbuff_1+2
 19479 08:4C7B: D4 29        	pei	<L804+rbuff_1
 19480 08:4C7D: A0 01 00     	ldy	#$1
 19481 08:4C80: B7 13        	lda	[<L804+fs_1],Y
 19482 08:4C82: 48           	pha
 19483 08:4C83: 22 xx xx xx  	jsl	~~disk_read
 19484 08:4C87: AA           	tax
 19485 08:4C88: D0 03        	bne	L822
 19486 08:4C8A: 82 11 00     	brl	L10460
 19487                        L822:
 19488                        	.line	4468
 19489                        	.line	4468
 19490 08:4C8D: E2 20        	sep	#$20
 19491                        	longa	off
 19492 08:4C8F: A9 01        	lda	#$1
 19493 08:4C91: A0 11 00     	ldy	#$11
 19494 08:4C94: 97 30        	sta	[<L803+fp_0],Y
 19495 08:4C96: C2 20        	rep	#$20
 19496                        	longa	on
 19497                        	.line	4468
 19498 08:4C98: A9 01 00     	lda	#$1
 19499 08:4C9B: 82 29 FE     	brl	L809
 19500                        	.line	4468
 19501                        L10460:
 19502                        	.line	4468
 19503                        ;#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2	
                    	/* Replace one of the read sectors with cached data if i
                    t contains a dirty sector */
 19504                        ;#if FF_FS_TINY
 19505                        ;				if (fs->wflag && fs->win
                    sect - sect < cc)
 19506                        ;				{
 19507                        ;					mem_cpy(rbuff + 
                    ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
  Mon Aug  9 2021 16:52                                                Page 371


 19508                        ;				}
 19509                        ;#else
 19510                        ;				if ((fp->flag & FA_DIRTY
                    ) && fp->sect - sect < cc)
 19511                        	.line	4476
 19512                        ;				{
 19513 08:4C9E: E2 20        	sep	#$20
 19514                        	longa	off
 19515 08:4CA0: A0 10 00     	ldy	#$10
 19516 08:4CA3: B7 30        	lda	[<L803+fp_0],Y
 19517 08:4CA5: 29 80        	and	#<$80
 19518 08:4CA7: C2 20        	rep	#$20
 19519                        	longa	on
 19520 08:4CA9: D0 03        	bne	L823
 19521 08:4CAB: 82 73 00     	brl	L10461
 19522                        L823:
 19523 08:4CAE: A5 25        	lda	<L804+cc_1
 19524 08:4CB0: 85 01        	sta	<R0
 19525 08:4CB2: 64 03        	stz	<R0+2
 19526 08:4CB4: 38           	sec
 19527 08:4CB5: A0 1A 00     	ldy	#$1a
 19528 08:4CB8: B7 30        	lda	[<L803+fp_0],Y
 19529 08:4CBA: E5 1B        	sbc	<L804+sect_1
 19530 08:4CBC: 85 05        	sta	<R1
 19531 08:4CBE: A0 1C 00     	ldy	#$1c
 19532 08:4CC1: B7 30        	lda	[<L803+fp_0],Y
 19533 08:4CC3: E5 1D        	sbc	<L804+sect_1+2
 19534 08:4CC5: 85 07        	sta	<R1+2
 19535 08:4CC7: A5 05        	lda	<R1
 19536 08:4CC9: C5 01        	cmp	<R0
 19537 08:4CCB: A5 07        	lda	<R1+2
 19538 08:4CCD: E5 03        	sbc	<R0+2
 19539 08:4CCF: 90 03        	bcc	L824
 19540 08:4CD1: 82 4D 00     	brl	L10461
 19541                        L824:
 19542                        	.line	4477
 19543                        ;					mem_cpy(rbuff + 
                    ((fp->sect - sect) * SS(fs)), fp->buf,
 19544                        	.line	4478
 19545                        ;							
                    SS(fs));
 19546 08:4CD4: F4 00 02     	pea	#<$200
 19547 08:4CD7: 18           	clc
 19548 08:4CD8: A9 26 00     	lda	#$26
 19549 08:4CDB: 65 30        	adc	<L803+fp_0
 19550 08:4CDD: 85 01        	sta	<R0
 19551 08:4CDF: A9 00 00     	lda	#$0
 19552 08:4CE2: 65 32        	adc	<L803+fp_0+2
 19553 08:4CE4: 85 03        	sta	<R0+2
 19554 08:4CE6: D4 03        	pei	<R0+2
 19555 08:4CE8: D4 01        	pei	<R0
 19556 08:4CEA: 38           	sec
 19557 08:4CEB: A0 1A 00     	ldy	#$1a
 19558 08:4CEE: B7 30        	lda	[<L803+fp_0],Y
 19559 08:4CF0: E5 1B        	sbc	<L804+sect_1
 19560 08:4CF2: 85 09        	sta	<R2
 19561 08:4CF4: A0 1C 00     	ldy	#$1c
 19562 08:4CF7: B7 30        	lda	[<L803+fp_0],Y
  Mon Aug  9 2021 16:52                                                Page 372


 19563 08:4CF9: E5 1D        	sbc	<L804+sect_1+2
 19564 08:4CFB: 85 0B        	sta	<R2+2
 19565 08:4CFD: D4 0B        	pei	<R2+2
 19566 08:4CFF: D4 09        	pei	<R2
 19567 08:4D01: A9 09 00     	lda	#$9
 19568                        	xref	~~~lasl
 19569 08:4D04: 22 xx xx xx  	jsl	~~~lasl
 19570 08:4D08: 85 05        	sta	<R1
 19571 08:4D0A: 86 07        	stx	<R1+2
 19572 08:4D0C: 18           	clc
 19573 08:4D0D: A5 29        	lda	<L804+rbuff_1
 19574 08:4D0F: 65 05        	adc	<R1
 19575 08:4D11: 85 0D        	sta	<R3
 19576 08:4D13: A5 2B        	lda	<L804+rbuff_1+2
 19577 08:4D15: 65 07        	adc	<R1+2
 19578 08:4D17: 85 0F        	sta	<R3+2
 19579 08:4D19: D4 0F        	pei	<R3+2
 19580 08:4D1B: D4 0D        	pei	<R3
 19581 08:4D1D: 22 93 01 08  	jsl	~~mem_cpy
 19582                        ;				}
 19583                        	.line	4480
 19584                        ;#endif
 19585                        ;#endif
 19586                        ;				rcnt = SS(fs) * cc; /* N
                    umber of bytes transferred */
 19587                        L10461:
 19588                        	.line	4483
 19589 08:4D21: A5 25        	lda	<L804+cc_1
 19590 08:4D23: A2 09 00     	ldx	#<$9
 19591                        	xref	~~~asl
 19592 08:4D26: 22 xx xx xx  	jsl	~~~asl
 19593 08:4D2A: 85 23        	sta	<L804+rcnt_1
 19594                        ;				continue;
 19595                        	.line	4484
 19596 08:4D2C: 82 1F 01     	brl	L10447
 19597                        ;			}
 19598                        	.line	4485
 19599                        ;#if !FF_FS_TINY
 19600                        ;			if (fp->sect != sect)
 19601                        L10458:
 19602                        	.line	4487
 19603                        ;			{ /* Load data sector if not in 
                    cache */
 19604 08:4D2F: A0 1A 00     	ldy	#$1a
 19605 08:4D32: B7 30        	lda	[<L803+fp_0],Y
 19606 08:4D34: C5 1B        	cmp	<L804+sect_1
 19607 08:4D36: D0 07        	bne	L825
 19608 08:4D38: A0 1C 00     	ldy	#$1c
 19609 08:4D3B: B7 30        	lda	[<L803+fp_0],Y
 19610 08:4D3D: C5 1D        	cmp	<L804+sect_1+2
 19611                        L825:
 19612 08:4D3F: D0 03        	bne	L826
 19613 08:4D41: 82 A7 00     	brl	L10462
 19614                        L826:
 19615                        	.line	4488
 19616                        ;#if !FF_FS_READONLY
 19617                        ;				if (fp->flag & FA_DIRTY)
 19618                        	.line	4490
  Mon Aug  9 2021 16:52                                                Page 373


 19619                        ;				{ /* Write-back dirty se
                    ctor cache */
 19620 08:4D44: E2 20        	sep	#$20
 19621                        	longa	off
 19622 08:4D46: A0 10 00     	ldy	#$10
 19623 08:4D49: B7 30        	lda	[<L803+fp_0],Y
 19624 08:4D4B: 29 80        	and	#<$80
 19625 08:4D4D: C2 20        	rep	#$20
 19626                        	longa	on
 19627 08:4D4F: D0 03        	bne	L827
 19628 08:4D51: 82 5C 00     	brl	L10463
 19629                        L827:
 19630                        	.line	4491
 19631                        ;					if (disk_write(f
                    s->pdrv, fp->buf, fp->sect, 1) != RES_OK)
 19632                        	.line	4492
 19633                        ;						ABORT(fs
                    , FR_DISK_ERR);
 19634 08:4D54: F4 01 00     	pea	#<$1
 19635 08:4D57: A0 1C 00     	ldy	#$1c
 19636 08:4D5A: B7 30        	lda	[<L803+fp_0],Y
 19637 08:4D5C: 48           	pha
 19638 08:4D5D: A0 1A 00     	ldy	#$1a
 19639 08:4D60: B7 30        	lda	[<L803+fp_0],Y
 19640 08:4D62: 48           	pha
 19641 08:4D63: 18           	clc
 19642 08:4D64: A9 26 00     	lda	#$26
 19643 08:4D67: 65 30        	adc	<L803+fp_0
 19644 08:4D69: 85 01        	sta	<R0
 19645 08:4D6B: A9 00 00     	lda	#$0
 19646 08:4D6E: 65 32        	adc	<L803+fp_0+2
 19647 08:4D70: 85 03        	sta	<R0+2
 19648 08:4D72: D4 03        	pei	<R0+2
 19649 08:4D74: D4 01        	pei	<R0
 19650 08:4D76: A0 01 00     	ldy	#$1
 19651 08:4D79: B7 13        	lda	[<L804+fs_1],Y
 19652 08:4D7B: 48           	pha
 19653 08:4D7C: 22 xx xx xx  	jsl	~~disk_write
 19654 08:4D80: AA           	tax
 19655 08:4D81: D0 03        	bne	L828
 19656 08:4D83: 82 11 00     	brl	L10464
 19657                        L828:
 19658                        	.line	4493
 19659                        	.line	4493
 19660 08:4D86: E2 20        	sep	#$20
 19661                        	longa	off
 19662 08:4D88: A9 01        	lda	#$1
 19663 08:4D8A: A0 11 00     	ldy	#$11
 19664 08:4D8D: 97 30        	sta	[<L803+fp_0],Y
 19665 08:4D8F: C2 20        	rep	#$20
 19666                        	longa	on
 19667                        	.line	4493
 19668 08:4D91: A9 01 00     	lda	#$1
 19669 08:4D94: 82 30 FD     	brl	L809
 19670                        	.line	4493
 19671                        L10464:
 19672                        	.line	4493
 19673                        ;					fp->flag &= (BYT
  Mon Aug  9 2021 16:52                                                Page 374


                    E) ~FA_DIRTY;
 19674                        	.line	4494
 19675 08:4D97: 18           	clc
 19676 08:4D98: A9 10 00     	lda	#$10
 19677 08:4D9B: 65 30        	adc	<L803+fp_0
 19678 08:4D9D: 85 01        	sta	<R0
 19679 08:4D9F: A9 00 00     	lda	#$0
 19680 08:4DA2: 65 32        	adc	<L803+fp_0+2
 19681 08:4DA4: 85 03        	sta	<R0+2
 19682 08:4DA6: E2 20        	sep	#$20
 19683                        	longa	off
 19684 08:4DA8: A7 01        	lda	[<R0]
 19685 08:4DAA: 29 7F        	and	#<$7f
 19686 08:4DAC: 87 01        	sta	[<R0]
 19687 08:4DAE: C2 20        	rep	#$20
 19688                        	longa	on
 19689                        ;				}
 19690                        	.line	4495
 19691                        ;#endif
 19692                        ;				if (disk_read(fs->pdrv, 
                    fp->buf, sect, 1) != RES_OK)
 19693                        L10463:
 19694                        	.line	4497
 19695                        ;					ABORT(fs, FR_DIS
                    K_ERR); /* Fill sector cache */
 19696 08:4DB0: F4 01 00     	pea	#<$1
 19697 08:4DB3: D4 1D        	pei	<L804+sect_1+2
 19698 08:4DB5: D4 1B        	pei	<L804+sect_1
 19699 08:4DB7: 18           	clc
 19700 08:4DB8: A9 26 00     	lda	#$26
 19701 08:4DBB: 65 30        	adc	<L803+fp_0
 19702 08:4DBD: 85 01        	sta	<R0
 19703 08:4DBF: A9 00 00     	lda	#$0
 19704 08:4DC2: 65 32        	adc	<L803+fp_0+2
 19705 08:4DC4: 85 03        	sta	<R0+2
 19706 08:4DC6: D4 03        	pei	<R0+2
 19707 08:4DC8: D4 01        	pei	<R0
 19708 08:4DCA: A0 01 00     	ldy	#$1
 19709 08:4DCD: B7 13        	lda	[<L804+fs_1],Y
 19710 08:4DCF: 48           	pha
 19711 08:4DD0: 22 xx xx xx  	jsl	~~disk_read
 19712 08:4DD4: AA           	tax
 19713 08:4DD5: D0 03        	bne	L829
 19714 08:4DD7: 82 11 00     	brl	L10465
 19715                        L829:
 19716                        	.line	4498
 19717                        	.line	4498
 19718 08:4DDA: E2 20        	sep	#$20
 19719                        	longa	off
 19720 08:4DDC: A9 01        	lda	#$1
 19721 08:4DDE: A0 11 00     	ldy	#$11
 19722 08:4DE1: 97 30        	sta	[<L803+fp_0],Y
 19723 08:4DE3: C2 20        	rep	#$20
 19724                        	longa	on
 19725                        	.line	4498
 19726 08:4DE5: A9 01 00     	lda	#$1
 19727 08:4DE8: 82 DC FC     	brl	L809
 19728                        	.line	4498
  Mon Aug  9 2021 16:52                                                Page 375


 19729                        L10465:
 19730                        	.line	4498
 19731                        ;			}
 19732                        	.line	4499
 19733                        ;#endif
 19734                        ;			fp->sect = sect;
 19735                        L10462:
 19736                        	.line	4501
 19737 08:4DEB: A5 1B        	lda	<L804+sect_1
 19738 08:4DED: A0 1A 00     	ldy	#$1a
 19739 08:4DF0: 97 30        	sta	[<L803+fp_0],Y
 19740 08:4DF2: A5 1D        	lda	<L804+sect_1+2
 19741 08:4DF4: A0 1C 00     	ldy	#$1c
 19742 08:4DF7: 97 30        	sta	[<L803+fp_0],Y
 19743                        ;		}
 19744                        	.line	4502
 19745                        ;		rcnt = SS(fs) - (UINT) fp->fptr % SS(fs)
                    ; /* Number of bytes remains in the sector */
 19746                        L10451:
 19747                        	.line	4503
 19748 08:4DF9: A0 12 00     	ldy	#$12
 19749 08:4DFC: B7 30        	lda	[<L803+fp_0],Y
 19750 08:4DFE: 29 FF 01     	and	#<$1ff
 19751 08:4E01: 85 01        	sta	<R0
 19752 08:4E03: 38           	sec
 19753 08:4E04: A9 00 02     	lda	#$200
 19754 08:4E07: E5 01        	sbc	<R0
 19755 08:4E09: 85 23        	sta	<L804+rcnt_1
 19756                        ;		if (rcnt > btr)
 19757                        	.line	4504
 19758                        ;			rcnt = btr; /* Clip it by btr if
                     needed */
 19759 08:4E0B: A5 38        	lda	<L803+btr_0
 19760 08:4E0D: C5 23        	cmp	<L804+rcnt_1
 19761 08:4E0F: 90 03        	bcc	L830
 19762 08:4E11: 82 04 00     	brl	L10466
 19763                        L830:
 19764                        	.line	4505
 19765 08:4E14: A5 38        	lda	<L803+btr_0
 19766 08:4E16: 85 23        	sta	<L804+rcnt_1
 19767                        ;#if FF_FS_TINY
 19768                        ;		if (move_window(fs, fp->sect) != FR_OK) 
                    ABORT(fs, FR_DISK_ERR); /* Move sector window */
 19769                        ;		mem_cpy(rbuff, fs->win + fp->fptr % SS(f
                    s), rcnt); /* Extract partial sector */
 19770                        ;#else
 19771                        ;		mem_cpy(rbuff, fp->buf + fp->fptr % SS(f
                    s), rcnt); /* Extract partial sector */
 19772                        L10466:
 19773                        	.line	4510
 19774 08:4E18: D4 23        	pei	<L804+rcnt_1
 19775 08:4E1A: A0 12 00     	ldy	#$12
 19776 08:4E1D: B7 30        	lda	[<L803+fp_0],Y
 19777 08:4E1F: 29 FF 01     	and	#<$1ff
 19778 08:4E22: 85 01        	sta	<R0
 19779 08:4E24: 64 03        	stz	<R0+2
 19780 08:4E26: 18           	clc
 19781 08:4E27: A9 26 00     	lda	#$26
  Mon Aug  9 2021 16:52                                                Page 376


 19782 08:4E2A: 65 01        	adc	<R0
 19783 08:4E2C: 85 05        	sta	<R1
 19784 08:4E2E: A9 00 00     	lda	#$0
 19785 08:4E31: 65 03        	adc	<R0+2
 19786 08:4E33: 85 07        	sta	<R1+2
 19787 08:4E35: 18           	clc
 19788 08:4E36: A5 30        	lda	<L803+fp_0
 19789 08:4E38: 65 05        	adc	<R1
 19790 08:4E3A: 85 01        	sta	<R0
 19791 08:4E3C: A5 32        	lda	<L803+fp_0+2
 19792 08:4E3E: 65 07        	adc	<R1+2
 19793 08:4E40: 85 03        	sta	<R0+2
 19794 08:4E42: D4 03        	pei	<R0+2
 19795 08:4E44: D4 01        	pei	<R0
 19796 08:4E46: D4 2B        	pei	<L804+rbuff_1+2
 19797 08:4E48: D4 29        	pei	<L804+rbuff_1
 19798 08:4E4A: 22 93 01 08  	jsl	~~mem_cpy
 19799                        ;#endif
 19800                        ;	}
 19801                        	.line	4512
 19802                        L10447:
 19803 08:4E4E: 38           	sec
 19804 08:4E4F: A5 38        	lda	<L803+btr_0
 19805 08:4E51: E5 23        	sbc	<L804+rcnt_1
 19806 08:4E53: 85 38        	sta	<L803+btr_0
 19807 08:4E55: 18           	clc
 19808 08:4E56: A7 3A        	lda	[<L803+br_0]
 19809 08:4E58: 65 23        	adc	<L804+rcnt_1
 19810 08:4E5A: 87 3A        	sta	[<L803+br_0]
 19811 08:4E5C: A5 23        	lda	<L804+rcnt_1
 19812 08:4E5E: 85 01        	sta	<R0
 19813 08:4E60: 64 03        	stz	<R0+2
 19814 08:4E62: 18           	clc
 19815 08:4E63: A5 29        	lda	<L804+rbuff_1
 19816 08:4E65: 65 01        	adc	<R0
 19817 08:4E67: 85 29        	sta	<L804+rbuff_1
 19818 08:4E69: A5 2B        	lda	<L804+rbuff_1+2
 19819 08:4E6B: 65 03        	adc	<R0+2
 19820 08:4E6D: 85 2B        	sta	<L804+rbuff_1+2
 19821 08:4E6F: 18           	clc
 19822 08:4E70: A9 12 00     	lda	#$12
 19823 08:4E73: 65 30        	adc	<L803+fp_0
 19824 08:4E75: 85 01        	sta	<R0
 19825 08:4E77: A9 00 00     	lda	#$0
 19826 08:4E7A: 65 32        	adc	<L803+fp_0+2
 19827 08:4E7C: 85 03        	sta	<R0+2
 19828 08:4E7E: A5 23        	lda	<L804+rcnt_1
 19829 08:4E80: 85 05        	sta	<R1
 19830 08:4E82: 64 07        	stz	<R1+2
 19831 08:4E84: 18           	clc
 19832 08:4E85: A5 05        	lda	<R1
 19833 08:4E87: 67 01        	adc	[<R0]
 19834 08:4E89: 87 01        	sta	[<R0]
 19835 08:4E8B: A5 07        	lda	<R1+2
 19836 08:4E8D: A0 02 00     	ldy	#$2
 19837 08:4E90: 77 01        	adc	[<R0],Y
 19838 08:4E92: A0 02 00     	ldy	#$2
 19839 08:4E95: 97 01        	sta	[<R0],Y
  Mon Aug  9 2021 16:52                                                Page 377


 19840                        L10450:
 19841 08:4E97: A5 38        	lda	<L803+btr_0
 19842 08:4E99: F0 03        	beq	L831
 19843 08:4E9B: 82 84 FC     	brl	L10449
 19844                        L831:
 19845                        L10448:
 19846                        ;
 19847                        ;	LEAVE_FF(fs, FR_OK);
 19848                        	.line	4514
 19849 08:4E9E: A9 00 00     	lda	#$0
 19850 08:4EA1: 82 23 FC     	brl	L809
 19851                        ;}
 19852                        	.line	4515
 19853                        	.endblock	4515
 19854             0000002C   L803	equ	44
 19855             00000011   L804	equ	17
 19856 08:4EA4:              	ends
 19857                        	efunc
 19858                        	.endfunc	4515,17,44
 19859                        	.line	4515
 19860                        ;
 19861                        ;#if !FF_FS_READONLY
 19862                        ;/*-----------------------------------------------
                    ------------------------*/
 19863                        ;/* Write File                                    
                                            */
 19864                        ;/*-----------------------------------------------
                    ------------------------*/
 19865                        ;
 19866                        ;FRESULT f_write(FIL* fp, /* Pointer to the file o
                    bject */
 19867                        ;const void* buff, /* Pointer to the data to be wr
                    itten */
 19868                        ;UINT btw, /* Number of bytes to write */
 19869                        ;UINT* bw /* Pointer to number of bytes written */
 19870                        ;)
 19871                        ;{
 19872                        	.line	4522
 19873                        	.line	4527
 19874                        	FFDOS
 19875                        	xdef	~~f_write
 19876                        	func
 19877                        	.function	4527
 19878                        ~~f_write:
 19879                        	longa	on
 19880                        	longi	on
 19881 08:4EA4: 3B           	tsc
 19882 08:4EA5: 38           	sec
 19883 08:4EA6: E9 24 00     	sbc	#L832
 19884 08:4EA9: 1B           	tcs
 19885 08:4EAA: 0B           	phd
 19886 08:4EAB: 5B           	tcd
 19887             00000004   fp_0	set	4
 19888             00000008   buff_0	set	8
 19889             0000000C   btw_0	set	12
 19890             0000000E   bw_0	set	14
 19891                        	.block	4527
 19892                        ;	FRESULT res;
  Mon Aug  9 2021 16:52                                                Page 378


 19893                        ;	FATFS *fs;
 19894                        ;	DWORD clst;
 19895                        ;	LBA_t sect;
 19896                        ;	UINT wcnt, cc, csect;
 19897                        ;	const BYTE *wbuff = (const BYTE*) buff;
 19898                        ;
 19899                        ;	*bw = 0; /* Clear write byte counter */
 19900             00000000   res_1	set	0
 19901             00000002   fs_1	set	2
 19902             00000006   clst_1	set	6
 19903             0000000A   sect_1	set	10
 19904             0000000E   wcnt_1	set	14
 19905             00000010   cc_1	set	16
 19906             00000012   csect_1	set	18
 19907             00000014   wbuff_1	set	20
 19908                        	.sym	res,0,5,1,16
 19909                        	.sym	fs,2,138,1,32,75
 19910                        	.sym	clst,6,18,1,32
 19911                        	.sym	sect,10,18,1,32
 19912                        	.sym	wcnt,14,16,1,16
 19913                        	.sym	cc,16,16,1,16
 19914                        	.sym	csect,18,16,1,16
 19915                        	.sym	wbuff,20,142,1,32
 19916                        	.sym	fp,4,138,6,32,77
 19917                        	.sym	buff,8,129,6,32
 19918                        	.sym	btw,12,16,6,16
 19919                        	.sym	bw,14,144,6,32
 19920 08:4EAC: A5 2C        	lda	<L832+buff_0
 19921 08:4EAE: 85 21        	sta	<L833+wbuff_1
 19922 08:4EB0: A5 2E        	lda	<L832+buff_0+2
 19923 08:4EB2: 85 23        	sta	<L833+wbuff_1+2
 19924                        	.line	4535
 19925 08:4EB4: A9 00 00     	lda	#$0
 19926 08:4EB7: 87 32        	sta	[<L832+bw_0]
 19927                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 19928                        	.line	4536
 19929 08:4EB9: F4 00 00     	pea	#0
 19930 08:4EBC: 18           	clc
 19931 08:4EBD: 7B           	tdc
 19932 08:4EBE: 69 0F 00     	adc	#<L833+fs_1
 19933 08:4EC1: 48           	pha
 19934 08:4EC2: D4 2A        	pei	<L832+fp_0+2
 19935 08:4EC4: D4 28        	pei	<L832+fp_0
 19936 08:4EC6: 22 57 44 08  	jsl	~~validate
 19937 08:4ECA: 85 0D        	sta	<L833+res_1
 19938                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 19939                        	.line	4537
 19940                        ;		LEAVE_FF(fs, res); /* Check validity */
 19941 08:4ECC: A5 0D        	lda	<L833+res_1
 19942 08:4ECE: F0 03        	beq	L836
 19943 08:4ED0: 82 11 00     	brl	L835
 19944                        L836:
 19945 08:4ED3: A0 11 00     	ldy	#$11
 19946 08:4ED6: B7 28        	lda	[<L832+fp_0],Y
 19947 08:4ED8: 29 FF 00     	and	#$ff
 19948 08:4EDB: 85 0D        	sta	<L833+res_1
  Mon Aug  9 2021 16:52                                                Page 379


 19949 08:4EDD: A5 0D        	lda	<L833+res_1
 19950 08:4EDF: D0 03        	bne	L837
 19951 08:4EE1: 82 14 00     	brl	L10467
 19952                        L837:
 19953                        L835:
 19954                        	.line	4538
 19955 08:4EE4: A5 0D        	lda	<L833+res_1
 19956                        L838:
 19957 08:4EE6: A8           	tay
 19958 08:4EE7: A5 26        	lda	<L832+2
 19959 08:4EE9: 85 34        	sta	<L832+2+14
 19960 08:4EEB: A5 25        	lda	<L832+1
 19961 08:4EED: 85 33        	sta	<L832+1+14
 19962 08:4EEF: 2B           	pld
 19963 08:4EF0: 3B           	tsc
 19964 08:4EF1: 18           	clc
 19965 08:4EF2: 69 32 00     	adc	#L832+14
 19966 08:4EF5: 1B           	tcs
 19967 08:4EF6: 98           	tya
 19968 08:4EF7: 6B           	rtl
 19969                        ;	if (!(fp->flag & FA_WRITE))
 19970                        L10467:
 19971                        	.line	4539
 19972                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 19973 08:4EF8: E2 20        	sep	#$20
 19974                        	longa	off
 19975 08:4EFA: A0 10 00     	ldy	#$10
 19976 08:4EFD: B7 28        	lda	[<L832+fp_0],Y
 19977 08:4EFF: 29 02        	and	#<$2
 19978 08:4F01: C2 20        	rep	#$20
 19979                        	longa	on
 19980 08:4F03: F0 03        	beq	L839
 19981 08:4F05: 82 06 00     	brl	L10468
 19982                        L839:
 19983                        	.line	4540
 19984 08:4F08: A9 07 00     	lda	#$7
 19985 08:4F0B: 82 D8 FF     	brl	L838
 19986                        ;
 19987                        ;	/* Check fptr wrap-around (file size cannot reac
                    h 4 GiB at FAT volume) */
 19988                        ;	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)
 19989                        L10468:
 19990                        	.line	4543
 19991                        ;			&& (DWORD) (fp->fptr + btw) < (D
                    WORD) fp->fptr)
 19992                        ;	{
 19993 08:4F0E: 82 0D 00     	brl	L840
 19994 08:4F11: E2 20        	sep	#$20
 19995                        	longa	off
 19996 08:4F13: A7 0F        	lda	[<L833+fs_1]
 19997 08:4F15: C9 04        	cmp	#<$4
 19998 08:4F17: C2 20        	rep	#$20
 19999                        	longa	on
 20000 08:4F19: D0 03        	bne	L841
 20001 08:4F1B: 82 45 00     	brl	L10469
 20002                        L841:
 20003                        L840:
  Mon Aug  9 2021 16:52                                                Page 380


 20004 08:4F1E: A5 30        	lda	<L832+btw_0
 20005 08:4F20: 85 01        	sta	<R0
 20006 08:4F22: 64 03        	stz	<R0+2
 20007 08:4F24: 18           	clc
 20008 08:4F25: A5 01        	lda	<R0
 20009 08:4F27: A0 12 00     	ldy	#$12
 20010 08:4F2A: 77 28        	adc	[<L832+fp_0],Y
 20011 08:4F2C: 85 05        	sta	<R1
 20012 08:4F2E: A5 03        	lda	<R0+2
 20013 08:4F30: A0 14 00     	ldy	#$14
 20014 08:4F33: 77 28        	adc	[<L832+fp_0],Y
 20015 08:4F35: 85 07        	sta	<R1+2
 20016 08:4F37: A5 05        	lda	<R1
 20017 08:4F39: A0 12 00     	ldy	#$12
 20018 08:4F3C: D7 28        	cmp	[<L832+fp_0],Y
 20019 08:4F3E: A5 07        	lda	<R1+2
 20020 08:4F40: A0 14 00     	ldy	#$14
 20021 08:4F43: F7 28        	sbc	[<L832+fp_0],Y
 20022 08:4F45: 90 03        	bcc	L842
 20023 08:4F47: 82 19 00     	brl	L10469
 20024                        L842:
 20025                        	.line	4545
 20026                        ;		btw = (UINT) (0xFFFFFFFF - (DWORD) fp->f
                    ptr);
 20027                        	.line	4546
 20028 08:4F4A: 38           	sec
 20029 08:4F4B: A9 FF FF     	lda	#$ffff
 20030 08:4F4E: A0 12 00     	ldy	#$12
 20031 08:4F51: F7 28        	sbc	[<L832+fp_0],Y
 20032 08:4F53: 85 01        	sta	<R0
 20033 08:4F55: A9 FF FF     	lda	#$ffff
 20034 08:4F58: A0 14 00     	ldy	#$14
 20035 08:4F5B: F7 28        	sbc	[<L832+fp_0],Y
 20036 08:4F5D: 85 03        	sta	<R0+2
 20037 08:4F5F: A5 01        	lda	<R0
 20038 08:4F61: 85 30        	sta	<L832+btw_0
 20039                        ;	}
 20040                        	.line	4547
 20041                        ;
 20042                        ;	for (; btw;
 20043                        L10469:
 20044                        	.line	4549
 20045 08:4F63: 82 20 04     	brl	L10473
 20046                        ;			/* Repeat until all data written
                     */
 20047                        ;			btw -= wcnt, *bw += wcnt, wbuff 
                    += wcnt, fp->fptr += wcnt, fp->obj.objsize =
 20048                        ;					(fp->fptr > fp->
                    obj.objsize) ? fp->fptr : fp->obj.objsize)
 20049                        L10472:
 20050                        ;	{
 20051                        	.line	4553
 20052                        ;		if (fp->fptr % SS(fs) == 0)
 20053                        	.line	4554
 20054                        ;		{ /* On the sector boundary? */
 20055 08:4F66: A0 12 00     	ldy	#$12
 20056 08:4F69: B7 28        	lda	[<L832+fp_0],Y
 20057 08:4F6B: 29 FF 01     	and	#<$1ff
  Mon Aug  9 2021 16:52                                                Page 381


 20058 08:4F6E: F0 03        	beq	L843
 20059 08:4F70: 82 19 03     	brl	L10474
 20060                        L843:
 20061                        	.line	4555
 20062                        ;			csect = (UINT) (fp->fptr / SS(fs
                    )) & (fs->csize - 1); /* Sector offset in the cluster */
 20063                        	.line	4556
 20064 08:4F73: A0 14 00     	ldy	#$14
 20065 08:4F76: B7 28        	lda	[<L832+fp_0],Y
 20066 08:4F78: 48           	pha
 20067 08:4F79: A0 12 00     	ldy	#$12
 20068 08:4F7C: B7 28        	lda	[<L832+fp_0],Y
 20069 08:4F7E: 48           	pha
 20070 08:4F7F: A9 09 00     	lda	#$9
 20071                        	xref	~~~llsr
 20072 08:4F82: 22 xx xx xx  	jsl	~~~llsr
 20073 08:4F86: 85 01        	sta	<R0
 20074 08:4F88: 86 03        	stx	<R0+2
 20075 08:4F8A: 18           	clc
 20076 08:4F8B: A9 FF FF     	lda	#$ffff
 20077 08:4F8E: A0 09 00     	ldy	#$9
 20078 08:4F91: 77 0F        	adc	[<L833+fs_1],Y
 20079 08:4F93: 85 05        	sta	<R1
 20080 08:4F95: A5 05        	lda	<R1
 20081 08:4F97: 25 01        	and	<R0
 20082 08:4F99: 85 1F        	sta	<L833+csect_1
 20083                        ;			if (csect == 0)
 20084                        	.line	4557
 20085                        ;			{ /* On the cluster boundary? */
 20086 08:4F9B: A5 1F        	lda	<L833+csect_1
 20087 08:4F9D: F0 03        	beq	L844
 20088 08:4F9F: 82 CB 00     	brl	L10475
 20089                        L844:
 20090                        	.line	4558
 20091                        ;				if (fp->fptr == 0)
 20092                        	.line	4559
 20093                        ;				{ /* On the top of the f
                    ile? */
 20094 08:4FA2: A0 12 00     	ldy	#$12
 20095 08:4FA5: B7 28        	lda	[<L832+fp_0],Y
 20096 08:4FA7: A0 14 00     	ldy	#$14
 20097 08:4FAA: 17 28        	ora	[<L832+fp_0],Y
 20098 08:4FAC: F0 03        	beq	L845
 20099 08:4FAE: 82 2C 00     	brl	L10476
 20100                        L845:
 20101                        	.line	4560
 20102                        ;					clst = fp->obj.s
                    clust; /* Follow from the origin */
 20103                        	.line	4561
 20104 08:4FB1: A0 08 00     	ldy	#$8
 20105 08:4FB4: B7 28        	lda	[<L832+fp_0],Y
 20106 08:4FB6: 85 13        	sta	<L833+clst_1
 20107 08:4FB8: A0 0A 00     	ldy	#$a
 20108 08:4FBB: B7 28        	lda	[<L832+fp_0],Y
 20109 08:4FBD: 85 15        	sta	<L833+clst_1+2
 20110                        ;					if (clst == 0)
 20111                        	.line	4562
 20112                        ;					{ /* If no clust
  Mon Aug  9 2021 16:52                                                Page 382


                    er is allocated, */
 20113 08:4FBF: A5 13        	lda	<L833+clst_1
 20114 08:4FC1: 05 15        	ora	<L833+clst_1+2
 20115 08:4FC3: F0 03        	beq	L846
 20116 08:4FC5: 82 12 00     	brl	L10477
 20117                        L846:
 20118                        	.line	4563
 20119                        ;						clst = c
                    reate_chain(&fp->obj, 0); /* create a new cluster chain */
 20120                        	.line	4564
 20121 08:4FC8: F4 00 00     	pea	#^$0
 20122 08:4FCB: F4 00 00     	pea	#<$0
 20123 08:4FCE: D4 2A        	pei	<L832+fp_0+2
 20124 08:4FD0: D4 28        	pei	<L832+fp_0
 20125 08:4FD2: 22 69 12 08  	jsl	~~create_chain
 20126 08:4FD6: 85 13        	sta	<L833+clst_1
 20127 08:4FD8: 86 15        	stx	<L833+clst_1+2
 20128                        ;					}
 20129                        	.line	4565
 20130                        ;				}
 20131                        L10477:
 20132                        	.line	4566
 20133                        ;				else
 20134 08:4FDA: 82 18 00     	brl	L10478
 20135                        L10476:
 20136                        ;				{ /* On the middle or en
                    d of the file */
 20137                        	.line	4568
 20138                        ;#if FF_USE_FASTSEEK
 20139                        ;					if (fp->cltbl)
 20140                        ;					{
 20141                        ;						clst = c
                    lmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
 20142                        ;					}
 20143                        ;					else
 20144                        ;#endif
 20145                        ;					{
 20146                        	.line	4576
 20147                        ;						clst = c
                    reate_chain(&fp->obj, fp->clust); /* Follow or stretch clust
                    er chain on the FAT */
 20148                        	.line	4577
 20149 08:4FDD: A0 18 00     	ldy	#$18
 20150 08:4FE0: B7 28        	lda	[<L832+fp_0],Y
 20151 08:4FE2: 48           	pha
 20152 08:4FE3: A0 16 00     	ldy	#$16
 20153 08:4FE6: B7 28        	lda	[<L832+fp_0],Y
 20154 08:4FE8: 48           	pha
 20155 08:4FE9: D4 2A        	pei	<L832+fp_0+2
 20156 08:4FEB: D4 28        	pei	<L832+fp_0
 20157 08:4FED: 22 69 12 08  	jsl	~~create_chain
 20158 08:4FF1: 85 13        	sta	<L833+clst_1
 20159 08:4FF3: 86 15        	stx	<L833+clst_1+2
 20160                        ;					}
 20161                        	.line	4578
 20162                        ;				}
 20163                        	.line	4579
 20164                        L10478:
  Mon Aug  9 2021 16:52                                                Page 383


 20165                        ;				if (clst == 0)
 20166                        	.line	4580
 20167                        ;					break; /* Could 
                    not allocate a new cluster (disk full) */
 20168 08:4FF5: A5 13        	lda	<L833+clst_1
 20169 08:4FF7: 05 15        	ora	<L833+clst_1+2
 20170 08:4FF9: D0 03        	bne	L847
 20171 08:4FFB: 82 8F 03     	brl	L10471
 20172                        L847:
 20173                        ;				if (clst == 1)
 20174                        	.line	4582
 20175                        ;					ABORT(fs, FR_INT
                    _ERR);
 20176 08:4FFE: A5 13        	lda	<L833+clst_1
 20177 08:5000: C9 01 00     	cmp	#<$1
 20178 08:5003: D0 05        	bne	L848
 20179 08:5005: A5 15        	lda	<L833+clst_1+2
 20180 08:5007: C9 00 00     	cmp	#^$1
 20181                        L848:
 20182 08:500A: F0 03        	beq	L849
 20183 08:500C: 82 11 00     	brl	L10479
 20184                        L849:
 20185                        	.line	4583
 20186                        	.line	4583
 20187 08:500F: E2 20        	sep	#$20
 20188                        	longa	off
 20189 08:5011: A9 02        	lda	#$2
 20190 08:5013: A0 11 00     	ldy	#$11
 20191 08:5016: 97 28        	sta	[<L832+fp_0],Y
 20192 08:5018: C2 20        	rep	#$20
 20193                        	longa	on
 20194                        	.line	4583
 20195 08:501A: A9 02 00     	lda	#$2
 20196 08:501D: 82 C6 FE     	brl	L838
 20197                        	.line	4583
 20198                        L10479:
 20199                        	.line	4583
 20200                        ;				if (clst == 0xFFFFFFFF)
 20201                        	.line	4584
 20202                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 20203 08:5020: A5 13        	lda	<L833+clst_1
 20204 08:5022: C9 FF FF     	cmp	#<$ffffffff
 20205 08:5025: D0 05        	bne	L850
 20206 08:5027: A5 15        	lda	<L833+clst_1+2
 20207 08:5029: C9 FF FF     	cmp	#^$ffffffff
 20208                        L850:
 20209 08:502C: F0 03        	beq	L851
 20210 08:502E: 82 11 00     	brl	L10480
 20211                        L851:
 20212                        	.line	4585
 20213                        	.line	4585
 20214 08:5031: E2 20        	sep	#$20
 20215                        	longa	off
 20216 08:5033: A9 01        	lda	#$1
 20217 08:5035: A0 11 00     	ldy	#$11
 20218 08:5038: 97 28        	sta	[<L832+fp_0],Y
 20219 08:503A: C2 20        	rep	#$20
  Mon Aug  9 2021 16:52                                                Page 384


 20220                        	longa	on
 20221                        	.line	4585
 20222 08:503C: A9 01 00     	lda	#$1
 20223 08:503F: 82 A4 FE     	brl	L838
 20224                        	.line	4585
 20225                        L10480:
 20226                        	.line	4585
 20227                        ;				fp->clust = clst; /* Upd
                    ate current cluster */
 20228                        	.line	4586
 20229 08:5042: A5 13        	lda	<L833+clst_1
 20230 08:5044: A0 16 00     	ldy	#$16
 20231 08:5047: 97 28        	sta	[<L832+fp_0],Y
 20232 08:5049: A5 15        	lda	<L833+clst_1+2
 20233 08:504B: A0 18 00     	ldy	#$18
 20234 08:504E: 97 28        	sta	[<L832+fp_0],Y
 20235                        ;				if (fp->obj.sclust == 0)
 20236                        	.line	4587
 20237                        ;					fp->obj.sclust =
                     clst; /* Set start cluster if the first write */
 20238 08:5050: A0 08 00     	ldy	#$8
 20239 08:5053: B7 28        	lda	[<L832+fp_0],Y
 20240 08:5055: A0 0A 00     	ldy	#$a
 20241 08:5058: 17 28        	ora	[<L832+fp_0],Y
 20242 08:505A: F0 03        	beq	L852
 20243 08:505C: 82 0E 00     	brl	L10481
 20244                        L852:
 20245                        	.line	4588
 20246 08:505F: A5 13        	lda	<L833+clst_1
 20247 08:5061: A0 08 00     	ldy	#$8
 20248 08:5064: 97 28        	sta	[<L832+fp_0],Y
 20249 08:5066: A5 15        	lda	<L833+clst_1+2
 20250 08:5068: A0 0A 00     	ldy	#$a
 20251 08:506B: 97 28        	sta	[<L832+fp_0],Y
 20252                        ;			}
 20253                        L10481:
 20254                        	.line	4589
 20255                        ;#if FF_FS_TINY
 20256                        ;			if (fs->winsect == fp->sect && s
                    ync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR); /* Write-ba
                    ck sector cache */
 20257                        ;#else
 20258                        ;			if (fp->flag & FA_DIRTY)
 20259                        L10475:
 20260                        	.line	4593
 20261                        ;			{ /* Write-back sector cache */
 20262 08:506D: E2 20        	sep	#$20
 20263                        	longa	off
 20264 08:506F: A0 10 00     	ldy	#$10
 20265 08:5072: B7 28        	lda	[<L832+fp_0],Y
 20266 08:5074: 29 80        	and	#<$80
 20267 08:5076: C2 20        	rep	#$20
 20268                        	longa	on
 20269 08:5078: D0 03        	bne	L853
 20270 08:507A: 82 5C 00     	brl	L10482
 20271                        L853:
 20272                        	.line	4594
 20273                        ;				if (disk_write(fs->pdrv,
  Mon Aug  9 2021 16:52                                                Page 385


                     fp->buf, fp->sect, 1) != RES_OK)
 20274                        	.line	4595
 20275                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 20276 08:507D: F4 01 00     	pea	#<$1
 20277 08:5080: A0 1C 00     	ldy	#$1c
 20278 08:5083: B7 28        	lda	[<L832+fp_0],Y
 20279 08:5085: 48           	pha
 20280 08:5086: A0 1A 00     	ldy	#$1a
 20281 08:5089: B7 28        	lda	[<L832+fp_0],Y
 20282 08:508B: 48           	pha
 20283 08:508C: 18           	clc
 20284 08:508D: A9 26 00     	lda	#$26
 20285 08:5090: 65 28        	adc	<L832+fp_0
 20286 08:5092: 85 01        	sta	<R0
 20287 08:5094: A9 00 00     	lda	#$0
 20288 08:5097: 65 2A        	adc	<L832+fp_0+2
 20289 08:5099: 85 03        	sta	<R0+2
 20290 08:509B: D4 03        	pei	<R0+2
 20291 08:509D: D4 01        	pei	<R0
 20292 08:509F: A0 01 00     	ldy	#$1
 20293 08:50A2: B7 0F        	lda	[<L833+fs_1],Y
 20294 08:50A4: 48           	pha
 20295 08:50A5: 22 xx xx xx  	jsl	~~disk_write
 20296 08:50A9: AA           	tax
 20297 08:50AA: D0 03        	bne	L854
 20298 08:50AC: 82 11 00     	brl	L10483
 20299                        L854:
 20300                        	.line	4596
 20301                        	.line	4596
 20302 08:50AF: E2 20        	sep	#$20
 20303                        	longa	off
 20304 08:50B1: A9 01        	lda	#$1
 20305 08:50B3: A0 11 00     	ldy	#$11
 20306 08:50B6: 97 28        	sta	[<L832+fp_0],Y
 20307 08:50B8: C2 20        	rep	#$20
 20308                        	longa	on
 20309                        	.line	4596
 20310 08:50BA: A9 01 00     	lda	#$1
 20311 08:50BD: 82 26 FE     	brl	L838
 20312                        	.line	4596
 20313                        L10483:
 20314                        	.line	4596
 20315                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 20316                        	.line	4597
 20317 08:50C0: 18           	clc
 20318 08:50C1: A9 10 00     	lda	#$10
 20319 08:50C4: 65 28        	adc	<L832+fp_0
 20320 08:50C6: 85 01        	sta	<R0
 20321 08:50C8: A9 00 00     	lda	#$0
 20322 08:50CB: 65 2A        	adc	<L832+fp_0+2
 20323 08:50CD: 85 03        	sta	<R0+2
 20324 08:50CF: E2 20        	sep	#$20
 20325                        	longa	off
 20326 08:50D1: A7 01        	lda	[<R0]
 20327 08:50D3: 29 7F        	and	#<$7f
 20328 08:50D5: 87 01        	sta	[<R0]
  Mon Aug  9 2021 16:52                                                Page 386


 20329 08:50D7: C2 20        	rep	#$20
 20330                        	longa	on
 20331                        ;			}
 20332                        	.line	4598
 20333                        ;#endif
 20334                        ;			sect = clst2sect(fs, fp->clust);
                     /* Get current sector */
 20335                        L10482:
 20336                        	.line	4600
 20337 08:50D9: A0 18 00     	ldy	#$18
 20338 08:50DC: B7 28        	lda	[<L832+fp_0],Y
 20339 08:50DE: 48           	pha
 20340 08:50DF: A0 16 00     	ldy	#$16
 20341 08:50E2: B7 28        	lda	[<L832+fp_0],Y
 20342 08:50E4: 48           	pha
 20343 08:50E5: D4 11        	pei	<L833+fs_1+2
 20344 08:50E7: D4 0F        	pei	<L833+fs_1
 20345 08:50E9: 22 9B 0A 08  	jsl	~~clst2sect
 20346 08:50ED: 85 17        	sta	<L833+sect_1
 20347 08:50EF: 86 19        	stx	<L833+sect_1+2
 20348                        ;			if (sect == 0)
 20349                        	.line	4601
 20350                        ;				ABORT(fs, FR_INT_ERR);
 20351 08:50F1: A5 17        	lda	<L833+sect_1
 20352 08:50F3: 05 19        	ora	<L833+sect_1+2
 20353 08:50F5: F0 03        	beq	L855
 20354 08:50F7: 82 11 00     	brl	L10484
 20355                        L855:
 20356                        	.line	4602
 20357                        	.line	4602
 20358 08:50FA: E2 20        	sep	#$20
 20359                        	longa	off
 20360 08:50FC: A9 02        	lda	#$2
 20361 08:50FE: A0 11 00     	ldy	#$11
 20362 08:5101: 97 28        	sta	[<L832+fp_0],Y
 20363 08:5103: C2 20        	rep	#$20
 20364                        	longa	on
 20365                        	.line	4602
 20366 08:5105: A9 02 00     	lda	#$2
 20367 08:5108: 82 DB FD     	brl	L838
 20368                        	.line	4602
 20369                        L10484:
 20370                        	.line	4602
 20371                        ;			sect += csect;
 20372                        	.line	4603
 20373 08:510B: A5 1F        	lda	<L833+csect_1
 20374 08:510D: 85 01        	sta	<R0
 20375 08:510F: 64 03        	stz	<R0+2
 20376 08:5111: 18           	clc
 20377 08:5112: A5 01        	lda	<R0
 20378 08:5114: 65 17        	adc	<L833+sect_1
 20379 08:5116: 85 17        	sta	<L833+sect_1
 20380 08:5118: A5 03        	lda	<R0+2
 20381 08:511A: 65 19        	adc	<L833+sect_1+2
 20382 08:511C: 85 19        	sta	<L833+sect_1+2
 20383                        ;			cc = btw / SS(fs); /* When remai
                    ning bytes >= sector size, */
 20384                        	.line	4604
  Mon Aug  9 2021 16:52                                                Page 387


 20385 08:511E: A5 30        	lda	<L832+btw_0
 20386 08:5120: A2 09 00     	ldx	#<$9
 20387                        	xref	~~~lsr
 20388 08:5123: 22 xx xx xx  	jsl	~~~lsr
 20389 08:5127: 85 1D        	sta	<L833+cc_1
 20390                        ;			if (cc > 0)
 20391                        	.line	4605
 20392                        ;			{ /* Write maximum contiguous se
                    ctors directly */
 20393 08:5129: A9 00 00     	lda	#$0
 20394 08:512C: C5 1D        	cmp	<L833+cc_1
 20395 08:512E: 90 03        	bcc	L856
 20396 08:5130: 82 E2 00     	brl	L10485
 20397                        L856:
 20398                        	.line	4606
 20399                        ;				if (csect + cc > fs->csi
                    ze)
 20400                        	.line	4607
 20401                        ;				{ /* Clip at cluster bou
                    ndary */
 20402 08:5133: 18           	clc
 20403 08:5134: A5 1F        	lda	<L833+csect_1
 20404 08:5136: 65 1D        	adc	<L833+cc_1
 20405 08:5138: 85 01        	sta	<R0
 20406 08:513A: A0 09 00     	ldy	#$9
 20407 08:513D: B7 0F        	lda	[<L833+fs_1],Y
 20408 08:513F: C5 01        	cmp	<R0
 20409 08:5141: 90 03        	bcc	L857
 20410 08:5143: 82 0A 00     	brl	L10486
 20411                        L857:
 20412                        	.line	4608
 20413                        ;					cc = fs->csize -
                     csect;
 20414                        	.line	4609
 20415 08:5146: 38           	sec
 20416 08:5147: A0 09 00     	ldy	#$9
 20417 08:514A: B7 0F        	lda	[<L833+fs_1],Y
 20418 08:514C: E5 1F        	sbc	<L833+csect_1
 20419 08:514E: 85 1D        	sta	<L833+cc_1
 20420                        ;				}
 20421                        	.line	4610
 20422                        ;				if (disk_write(fs->pdrv,
                     wbuff, sect, cc) != RES_OK)
 20423                        L10486:
 20424                        	.line	4611
 20425                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 20426 08:5150: D4 1D        	pei	<L833+cc_1
 20427 08:5152: D4 19        	pei	<L833+sect_1+2
 20428 08:5154: D4 17        	pei	<L833+sect_1
 20429 08:5156: D4 23        	pei	<L833+wbuff_1+2
 20430 08:5158: D4 21        	pei	<L833+wbuff_1
 20431 08:515A: A0 01 00     	ldy	#$1
 20432 08:515D: B7 0F        	lda	[<L833+fs_1],Y
 20433 08:515F: 48           	pha
 20434 08:5160: 22 xx xx xx  	jsl	~~disk_write
 20435 08:5164: AA           	tax
 20436 08:5165: D0 03        	bne	L858
  Mon Aug  9 2021 16:52                                                Page 388


 20437 08:5167: 82 11 00     	brl	L10487
 20438                        L858:
 20439                        	.line	4612
 20440                        	.line	4612
 20441 08:516A: E2 20        	sep	#$20
 20442                        	longa	off
 20443 08:516C: A9 01        	lda	#$1
 20444 08:516E: A0 11 00     	ldy	#$11
 20445 08:5171: 97 28        	sta	[<L832+fp_0],Y
 20446 08:5173: C2 20        	rep	#$20
 20447                        	longa	on
 20448                        	.line	4612
 20449 08:5175: A9 01 00     	lda	#$1
 20450 08:5178: 82 6B FD     	brl	L838
 20451                        	.line	4612
 20452                        L10487:
 20453                        	.line	4612
 20454                        ;#if FF_FS_MINIMIZE <= 2
 20455                        ;#if FF_FS_TINY
 20456                        ;				if (fs->winsect - sect <
                     cc)
 20457                        ;				{ /* Refill sector cache
                     if it gets invalidated by the direct write */
 20458                        ;					mem_cpy(fs->win,
                     wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 20459                        ;					fs->wflag = 0;
 20460                        ;				}
 20461                        ;#else
 20462                        ;				if (fp->sect - sect < cc
                    )
 20463                        	.line	4621
 20464                        ;				{ /* Refill sector cache
                     if it gets invalidated by the direct write */
 20465 08:517B: A5 1D        	lda	<L833+cc_1
 20466 08:517D: 85 01        	sta	<R0
 20467 08:517F: 64 03        	stz	<R0+2
 20468 08:5181: 38           	sec
 20469 08:5182: A0 1A 00     	ldy	#$1a
 20470 08:5185: B7 28        	lda	[<L832+fp_0],Y
 20471 08:5187: E5 17        	sbc	<L833+sect_1
 20472 08:5189: 85 05        	sta	<R1
 20473 08:518B: A0 1C 00     	ldy	#$1c
 20474 08:518E: B7 28        	lda	[<L832+fp_0],Y
 20475 08:5190: E5 19        	sbc	<L833+sect_1+2
 20476 08:5192: 85 07        	sta	<R1+2
 20477 08:5194: A5 05        	lda	<R1
 20478 08:5196: C5 01        	cmp	<R0
 20479 08:5198: A5 07        	lda	<R1+2
 20480 08:519A: E5 03        	sbc	<R0+2
 20481 08:519C: 90 03        	bcc	L859
 20482 08:519E: 82 66 00     	brl	L10488
 20483                        L859:
 20484                        	.line	4622
 20485                        ;					mem_cpy(fp->buf,
                     wbuff + ((fp->sect - sect) * SS(fs)),
 20486                        	.line	4623
 20487                        ;							
                    SS(fs));
  Mon Aug  9 2021 16:52                                                Page 389


 20488 08:51A1: F4 00 02     	pea	#<$200
 20489 08:51A4: 38           	sec
 20490 08:51A5: A0 1A 00     	ldy	#$1a
 20491 08:51A8: B7 28        	lda	[<L832+fp_0],Y
 20492 08:51AA: E5 17        	sbc	<L833+sect_1
 20493 08:51AC: 85 05        	sta	<R1
 20494 08:51AE: A0 1C 00     	ldy	#$1c
 20495 08:51B1: B7 28        	lda	[<L832+fp_0],Y
 20496 08:51B3: E5 19        	sbc	<L833+sect_1+2
 20497 08:51B5: 85 07        	sta	<R1+2
 20498 08:51B7: D4 07        	pei	<R1+2
 20499 08:51B9: D4 05        	pei	<R1
 20500 08:51BB: A9 09 00     	lda	#$9
 20501                        	xref	~~~lasl
 20502 08:51BE: 22 xx xx xx  	jsl	~~~lasl
 20503 08:51C2: 85 01        	sta	<R0
 20504 08:51C4: 86 03        	stx	<R0+2
 20505 08:51C6: 18           	clc
 20506 08:51C7: A5 21        	lda	<L833+wbuff_1
 20507 08:51C9: 65 01        	adc	<R0
 20508 08:51CB: 85 09        	sta	<R2
 20509 08:51CD: A5 23        	lda	<L833+wbuff_1+2
 20510 08:51CF: 65 03        	adc	<R0+2
 20511 08:51D1: 85 0B        	sta	<R2+2
 20512 08:51D3: D4 0B        	pei	<R2+2
 20513 08:51D5: D4 09        	pei	<R2
 20514 08:51D7: 18           	clc
 20515 08:51D8: A9 26 00     	lda	#$26
 20516 08:51DB: 65 28        	adc	<L832+fp_0
 20517 08:51DD: 85 01        	sta	<R0
 20518 08:51DF: A9 00 00     	lda	#$0
 20519 08:51E2: 65 2A        	adc	<L832+fp_0+2
 20520 08:51E4: 85 03        	sta	<R0+2
 20521 08:51E6: D4 03        	pei	<R0+2
 20522 08:51E8: D4 01        	pei	<R0
 20523 08:51EA: 22 93 01 08  	jsl	~~mem_cpy
 20524                        ;					fp->flag &= (BYT
                    E) ~FA_DIRTY;
 20525                        	.line	4625
 20526 08:51EE: 18           	clc
 20527 08:51EF: A9 10 00     	lda	#$10
 20528 08:51F2: 65 28        	adc	<L832+fp_0
 20529 08:51F4: 85 01        	sta	<R0
 20530 08:51F6: A9 00 00     	lda	#$0
 20531 08:51F9: 65 2A        	adc	<L832+fp_0+2
 20532 08:51FB: 85 03        	sta	<R0+2
 20533 08:51FD: E2 20        	sep	#$20
 20534                        	longa	off
 20535 08:51FF: A7 01        	lda	[<R0]
 20536 08:5201: 29 7F        	and	#<$7f
 20537 08:5203: 87 01        	sta	[<R0]
 20538 08:5205: C2 20        	rep	#$20
 20539                        	longa	on
 20540                        ;				}
 20541                        	.line	4626
 20542                        ;#endif
 20543                        ;#endif
 20544                        ;				wcnt = SS(fs) * cc; /* N
  Mon Aug  9 2021 16:52                                                Page 390


                    umber of bytes transferred */
 20545                        L10488:
 20546                        	.line	4629
 20547 08:5207: A5 1D        	lda	<L833+cc_1
 20548 08:5209: A2 09 00     	ldx	#<$9
 20549                        	xref	~~~asl
 20550 08:520C: 22 xx xx xx  	jsl	~~~asl
 20551 08:5210: 85 1B        	sta	<L833+wcnt_1
 20552                        ;				continue;
 20553                        	.line	4630
 20554 08:5212: 82 E5 00     	brl	L10470
 20555                        ;			}
 20556                        	.line	4631
 20557                        ;#if FF_FS_TINY
 20558                        ;			if (fp->fptr >= fp->obj.objsize)
 20559                        ;			{ /* Avoid silly cache filling o
                    n the growing edge */
 20560                        ;				if (sync_window(fs) != F
                    R_OK) ABORT(fs, FR_DISK_ERR);
 20561                        ;				fs->winsect = sect;
 20562                        ;			}
 20563                        ;#else
 20564                        ;			if (fp->sect != sect && /* Fill 
                    sector cache with file data */
 20565                        L10485:
 20566                        	.line	4639
 20567                        ;			fp->fptr < fp->obj.objsize
 20568                        ;					&& disk_read(fs-
                    >pdrv, fp->buf, sect, 1) != RES_OK)
 20569                        ;			{
 20570 08:5215: A0 1A 00     	ldy	#$1a
 20571 08:5218: B7 28        	lda	[<L832+fp_0],Y
 20572 08:521A: C5 17        	cmp	<L833+sect_1
 20573 08:521C: D0 07        	bne	L860
 20574 08:521E: A0 1C 00     	ldy	#$1c
 20575 08:5221: B7 28        	lda	[<L832+fp_0],Y
 20576 08:5223: C5 19        	cmp	<L833+sect_1+2
 20577                        L860:
 20578 08:5225: D0 03        	bne	L861
 20579 08:5227: 82 54 00     	brl	L10489
 20580                        L861:
 20581 08:522A: A0 12 00     	ldy	#$12
 20582 08:522D: B7 28        	lda	[<L832+fp_0],Y
 20583 08:522F: A0 0C 00     	ldy	#$c
 20584 08:5232: D7 28        	cmp	[<L832+fp_0],Y
 20585 08:5234: A0 14 00     	ldy	#$14
 20586 08:5237: B7 28        	lda	[<L832+fp_0],Y
 20587 08:5239: A0 0E 00     	ldy	#$e
 20588 08:523C: F7 28        	sbc	[<L832+fp_0],Y
 20589 08:523E: 90 03        	bcc	L862
 20590 08:5240: 82 3B 00     	brl	L10489
 20591                        L862:
 20592 08:5243: F4 01 00     	pea	#<$1
 20593 08:5246: D4 19        	pei	<L833+sect_1+2
 20594 08:5248: D4 17        	pei	<L833+sect_1
 20595 08:524A: 18           	clc
 20596 08:524B: A9 26 00     	lda	#$26
 20597 08:524E: 65 28        	adc	<L832+fp_0
  Mon Aug  9 2021 16:52                                                Page 391


 20598 08:5250: 85 01        	sta	<R0
 20599 08:5252: A9 00 00     	lda	#$0
 20600 08:5255: 65 2A        	adc	<L832+fp_0+2
 20601 08:5257: 85 03        	sta	<R0+2
 20602 08:5259: D4 03        	pei	<R0+2
 20603 08:525B: D4 01        	pei	<R0
 20604 08:525D: A0 01 00     	ldy	#$1
 20605 08:5260: B7 0F        	lda	[<L833+fs_1],Y
 20606 08:5262: 48           	pha
 20607 08:5263: 22 xx xx xx  	jsl	~~disk_read
 20608 08:5267: AA           	tax
 20609 08:5268: D0 03        	bne	L863
 20610 08:526A: 82 11 00     	brl	L10489
 20611                        L863:
 20612                        	.line	4642
 20613                        ;				ABORT(fs, FR_DISK_ERR);
 20614                        	.line	4643
 20615                        	.line	4643
 20616 08:526D: E2 20        	sep	#$20
 20617                        	longa	off
 20618 08:526F: A9 01        	lda	#$1
 20619 08:5271: A0 11 00     	ldy	#$11
 20620 08:5274: 97 28        	sta	[<L832+fp_0],Y
 20621 08:5276: C2 20        	rep	#$20
 20622                        	longa	on
 20623                        	.line	4643
 20624 08:5278: A9 01 00     	lda	#$1
 20625 08:527B: 82 68 FC     	brl	L838
 20626                        	.line	4643
 20627                        	.line	4643
 20628                        ;			}
 20629                        	.line	4644
 20630                        ;#endif
 20631                        ;			fp->sect = sect;
 20632                        L10489:
 20633                        	.line	4646
 20634 08:527E: A5 17        	lda	<L833+sect_1
 20635 08:5280: A0 1A 00     	ldy	#$1a
 20636 08:5283: 97 28        	sta	[<L832+fp_0],Y
 20637 08:5285: A5 19        	lda	<L833+sect_1+2
 20638 08:5287: A0 1C 00     	ldy	#$1c
 20639 08:528A: 97 28        	sta	[<L832+fp_0],Y
 20640                        ;		}
 20641                        	.line	4647
 20642                        ;		wcnt = SS(fs) - (UINT) fp->fptr % SS(fs)
                    ; /* Number of bytes remains in the sector */
 20643                        L10474:
 20644                        	.line	4648
 20645 08:528C: A0 12 00     	ldy	#$12
 20646 08:528F: B7 28        	lda	[<L832+fp_0],Y
 20647 08:5291: 29 FF 01     	and	#<$1ff
 20648 08:5294: 85 01        	sta	<R0
 20649 08:5296: 38           	sec
 20650 08:5297: A9 00 02     	lda	#$200
 20651 08:529A: E5 01        	sbc	<R0
 20652 08:529C: 85 1B        	sta	<L833+wcnt_1
 20653                        ;		if (wcnt > btw)
 20654                        	.line	4649
  Mon Aug  9 2021 16:52                                                Page 392


 20655                        ;			wcnt = btw; /* Clip it by btw if
                     needed */
 20656 08:529E: A5 30        	lda	<L832+btw_0
 20657 08:52A0: C5 1B        	cmp	<L833+wcnt_1
 20658 08:52A2: 90 03        	bcc	L864
 20659 08:52A4: 82 04 00     	brl	L10490
 20660                        L864:
 20661                        	.line	4650
 20662 08:52A7: A5 30        	lda	<L832+btw_0
 20663 08:52A9: 85 1B        	sta	<L833+wcnt_1
 20664                        ;#if FF_FS_TINY
 20665                        ;		if (move_window(fs, fp->sect) != FR_OK) 
                    ABORT(fs, FR_DISK_ERR); /* Move sector window */
 20666                        ;		mem_cpy(fs->win + fp->fptr % SS(fs), wbu
                    ff, wcnt); /* Fit data to the sector */
 20667                        ;		fs->wflag = 1;
 20668                        ;#else
 20669                        ;		mem_cpy(fp->buf + fp->fptr % SS(fs), wbu
                    ff, wcnt); /* Fit data to the sector */
 20670                        L10490:
 20671                        	.line	4656
 20672 08:52AB: D4 1B        	pei	<L833+wcnt_1
 20673 08:52AD: D4 23        	pei	<L833+wbuff_1+2
 20674 08:52AF: D4 21        	pei	<L833+wbuff_1
 20675 08:52B1: A0 12 00     	ldy	#$12
 20676 08:52B4: B7 28        	lda	[<L832+fp_0],Y
 20677 08:52B6: 29 FF 01     	and	#<$1ff
 20678 08:52B9: 85 01        	sta	<R0
 20679 08:52BB: 64 03        	stz	<R0+2
 20680 08:52BD: 18           	clc
 20681 08:52BE: A9 26 00     	lda	#$26
 20682 08:52C1: 65 01        	adc	<R0
 20683 08:52C3: 85 05        	sta	<R1
 20684 08:52C5: A9 00 00     	lda	#$0
 20685 08:52C8: 65 03        	adc	<R0+2
 20686 08:52CA: 85 07        	sta	<R1+2
 20687 08:52CC: 18           	clc
 20688 08:52CD: A5 28        	lda	<L832+fp_0
 20689 08:52CF: 65 05        	adc	<R1
 20690 08:52D1: 85 01        	sta	<R0
 20691 08:52D3: A5 2A        	lda	<L832+fp_0+2
 20692 08:52D5: 65 07        	adc	<R1+2
 20693 08:52D7: 85 03        	sta	<R0+2
 20694 08:52D9: D4 03        	pei	<R0+2
 20695 08:52DB: D4 01        	pei	<R0
 20696 08:52DD: 22 93 01 08  	jsl	~~mem_cpy
 20697                        ;		fp->flag |= FA_DIRTY;
 20698                        	.line	4657
 20699 08:52E1: 18           	clc
 20700 08:52E2: A9 10 00     	lda	#$10
 20701 08:52E5: 65 28        	adc	<L832+fp_0
 20702 08:52E7: 85 01        	sta	<R0
 20703 08:52E9: A9 00 00     	lda	#$0
 20704 08:52EC: 65 2A        	adc	<L832+fp_0+2
 20705 08:52EE: 85 03        	sta	<R0+2
 20706 08:52F0: E2 20        	sep	#$20
 20707                        	longa	off
 20708 08:52F2: A7 01        	lda	[<R0]
  Mon Aug  9 2021 16:52                                                Page 393


 20709 08:52F4: 09 80        	ora	#<$80
 20710 08:52F6: 87 01        	sta	[<R0]
 20711 08:52F8: C2 20        	rep	#$20
 20712                        	longa	on
 20713                        ;#endif
 20714                        ;	}
 20715                        	.line	4659
 20716                        L10470:
 20717 08:52FA: 38           	sec
 20718 08:52FB: A5 30        	lda	<L832+btw_0
 20719 08:52FD: E5 1B        	sbc	<L833+wcnt_1
 20720 08:52FF: 85 30        	sta	<L832+btw_0
 20721 08:5301: 18           	clc
 20722 08:5302: A7 32        	lda	[<L832+bw_0]
 20723 08:5304: 65 1B        	adc	<L833+wcnt_1
 20724 08:5306: 87 32        	sta	[<L832+bw_0]
 20725 08:5308: A5 1B        	lda	<L833+wcnt_1
 20726 08:530A: 85 01        	sta	<R0
 20727 08:530C: 64 03        	stz	<R0+2
 20728 08:530E: 18           	clc
 20729 08:530F: A5 21        	lda	<L833+wbuff_1
 20730 08:5311: 65 01        	adc	<R0
 20731 08:5313: 85 21        	sta	<L833+wbuff_1
 20732 08:5315: A5 23        	lda	<L833+wbuff_1+2
 20733 08:5317: 65 03        	adc	<R0+2
 20734 08:5319: 85 23        	sta	<L833+wbuff_1+2
 20735 08:531B: 18           	clc
 20736 08:531C: A9 12 00     	lda	#$12
 20737 08:531F: 65 28        	adc	<L832+fp_0
 20738 08:5321: 85 01        	sta	<R0
 20739 08:5323: A9 00 00     	lda	#$0
 20740 08:5326: 65 2A        	adc	<L832+fp_0+2
 20741 08:5328: 85 03        	sta	<R0+2
 20742 08:532A: A5 1B        	lda	<L833+wcnt_1
 20743 08:532C: 85 05        	sta	<R1
 20744 08:532E: 64 07        	stz	<R1+2
 20745 08:5330: 18           	clc
 20746 08:5331: A5 05        	lda	<R1
 20747 08:5333: 67 01        	adc	[<R0]
 20748 08:5335: 87 01        	sta	[<R0]
 20749 08:5337: A5 07        	lda	<R1+2
 20750 08:5339: A0 02 00     	ldy	#$2
 20751 08:533C: 77 01        	adc	[<R0],Y
 20752 08:533E: A0 02 00     	ldy	#$2
 20753 08:5341: 97 01        	sta	[<R0],Y
 20754 08:5343: A0 0C 00     	ldy	#$c
 20755 08:5346: B7 28        	lda	[<L832+fp_0],Y
 20756 08:5348: A0 12 00     	ldy	#$12
 20757 08:534B: D7 28        	cmp	[<L832+fp_0],Y
 20758 08:534D: A0 0E 00     	ldy	#$e
 20759 08:5350: B7 28        	lda	[<L832+fp_0],Y
 20760 08:5352: A0 14 00     	ldy	#$14
 20761 08:5355: F7 28        	sbc	[<L832+fp_0],Y
 20762 08:5357: 90 03        	bcc	L866
 20763 08:5359: 82 0D 00     	brl	L865
 20764                        L866:
 20765 08:535C: A0 14 00     	ldy	#$14
 20766 08:535F: B7 28        	lda	[<L832+fp_0],Y
  Mon Aug  9 2021 16:52                                                Page 394


 20767 08:5361: AA           	tax
 20768 08:5362: A0 12 00     	ldy	#$12
 20769 08:5365: B7 28        	lda	[<L832+fp_0],Y
 20770 08:5367: 80 0B        	bra	L867
 20771                        L865:
 20772 08:5369: A0 0E 00     	ldy	#$e
 20773 08:536C: B7 28        	lda	[<L832+fp_0],Y
 20774 08:536E: AA           	tax
 20775 08:536F: A0 0C 00     	ldy	#$c
 20776 08:5372: B7 28        	lda	[<L832+fp_0],Y
 20777                        L867:
 20778 08:5374: 85 01        	sta	<R0
 20779 08:5376: 86 03        	stx	<R0+2
 20780 08:5378: A5 01        	lda	<R0
 20781 08:537A: A0 0C 00     	ldy	#$c
 20782 08:537D: 97 28        	sta	[<L832+fp_0],Y
 20783 08:537F: A5 03        	lda	<R0+2
 20784 08:5381: A0 0E 00     	ldy	#$e
 20785 08:5384: 97 28        	sta	[<L832+fp_0],Y
 20786                        L10473:
 20787 08:5386: A5 30        	lda	<L832+btw_0
 20788 08:5388: F0 03        	beq	L868
 20789 08:538A: 82 D9 FB     	brl	L10472
 20790                        L868:
 20791                        L10471:
 20792                        ;
 20793                        ;	fp->flag |= FA_MODIFIED; /* Set file change flag
                     */
 20794                        	.line	4661
 20795 08:538D: 18           	clc
 20796 08:538E: A9 10 00     	lda	#$10
 20797 08:5391: 65 28        	adc	<L832+fp_0
 20798 08:5393: 85 01        	sta	<R0
 20799 08:5395: A9 00 00     	lda	#$0
 20800 08:5398: 65 2A        	adc	<L832+fp_0+2
 20801 08:539A: 85 03        	sta	<R0+2
 20802 08:539C: E2 20        	sep	#$20
 20803                        	longa	off
 20804 08:539E: A7 01        	lda	[<R0]
 20805 08:53A0: 09 40        	ora	#<$40
 20806 08:53A2: 87 01        	sta	[<R0]
 20807 08:53A4: C2 20        	rep	#$20
 20808                        	longa	on
 20809                        ;
 20810                        ;	LEAVE_FF(fs, FR_OK);
 20811                        	.line	4663
 20812 08:53A6: A9 00 00     	lda	#$0
 20813 08:53A9: 82 3A FB     	brl	L838
 20814                        ;}
 20815                        	.line	4664
 20816                        	.endblock	4664
 20817             00000024   L832	equ	36
 20818             0000000D   L833	equ	13
 20819 08:53AC:              	ends
 20820                        	efunc
 20821                        	.endfunc	4664,13,36
 20822                        	.line	4664
 20823                        ;
  Mon Aug  9 2021 16:52                                                Page 395


 20824                        ;/*-----------------------------------------------
                    ------------------------*/
 20825                        ;/* Synchronize the File                          
                                            */
 20826                        ;/*-----------------------------------------------
                    ------------------------*/
 20827                        ;
 20828                        ;FRESULT f_sync(FIL* fp /* Pointer to the file obj
                    ect */
 20829                        ;)
 20830                        ;{
 20831                        	.line	4670
 20832                        	.line	4672
 20833                        	FFDOS
 20834                        	xdef	~~f_sync
 20835                        	func
 20836                        	.function	4672
 20837                        ~~f_sync:
 20838                        	longa	on
 20839                        	longi	on
 20840 08:53AC: 3B           	tsc
 20841 08:53AD: 38           	sec
 20842 08:53AE: E9 12 00     	sbc	#L869
 20843 08:53B1: 1B           	tcs
 20844 08:53B2: 0B           	phd
 20845 08:53B3: 5B           	tcd
 20846             00000004   fp_0	set	4
 20847                        	.block	4672
 20848                        ;	FRESULT res;
 20849                        ;	FATFS *fs;
 20850                        ;	DWORD tm;
 20851                        ;	BYTE *dir;
 20852                        ;
 20853                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 20854             00000000   res_1	set	0
 20855             00000002   fs_1	set	2
 20856             00000006   tm_1	set	6
 20857             0000000A   dir_1	set	10
 20858                        	.sym	res,0,5,1,16
 20859                        	.sym	fs,2,138,1,32,75
 20860                        	.sym	tm,6,18,1,32
 20861                        	.sym	dir,10,142,1,32
 20862                        	.sym	fp,4,138,6,32,77
 20863                        	.line	4678
 20864 08:53B4: F4 00 00     	pea	#0
 20865 08:53B7: 18           	clc
 20866 08:53B8: 7B           	tdc
 20867 08:53B9: 69 07 00     	adc	#<L870+fs_1
 20868 08:53BC: 48           	pha
 20869 08:53BD: D4 18        	pei	<L869+fp_0+2
 20870 08:53BF: D4 16        	pei	<L869+fp_0
 20871 08:53C1: 22 57 44 08  	jsl	~~validate
 20872 08:53C5: 85 05        	sta	<L870+res_1
 20873                        ;	if (res == FR_OK)
 20874                        	.line	4679
 20875                        ;	{
 20876 08:53C7: A5 05        	lda	<L870+res_1
  Mon Aug  9 2021 16:52                                                Page 396


 20877 08:53C9: F0 03        	beq	L872
 20878 08:53CB: 82 71 01     	brl	L10491
 20879                        L872:
 20880                        	.line	4680
 20881                        ;		if (fp->flag & FA_MODIFIED)
 20882                        	.line	4681
 20883                        ;		{ /* Is there any change to the file? */
 20884 08:53CE: E2 20        	sep	#$20
 20885                        	longa	off
 20886 08:53D0: A0 10 00     	ldy	#$10
 20887 08:53D3: B7 16        	lda	[<L869+fp_0],Y
 20888 08:53D5: 29 40        	and	#<$40
 20889 08:53D7: C2 20        	rep	#$20
 20890                        	longa	on
 20891 08:53D9: D0 03        	bne	L873
 20892 08:53DB: 82 61 01     	brl	L10492
 20893                        L873:
 20894                        	.line	4682
 20895                        ;#if !FF_FS_TINY
 20896                        ;			if (fp->flag & FA_DIRTY)
 20897                        	.line	4684
 20898                        ;			{ /* Write-back cached data if n
                    eeded */
 20899 08:53DE: E2 20        	sep	#$20
 20900                        	longa	off
 20901 08:53E0: A0 10 00     	ldy	#$10
 20902 08:53E3: B7 16        	lda	[<L869+fp_0],Y
 20903 08:53E5: 29 80        	and	#<$80
 20904 08:53E7: C2 20        	rep	#$20
 20905                        	longa	on
 20906 08:53E9: D0 03        	bne	L874
 20907 08:53EB: 82 60 00     	brl	L10493
 20908                        L874:
 20909                        	.line	4685
 20910                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK)
 20911                        	.line	4686
 20912                        ;					LEAVE_FF(fs, FR_
                    DISK_ERR);
 20913 08:53EE: F4 01 00     	pea	#<$1
 20914 08:53F1: A0 1C 00     	ldy	#$1c
 20915 08:53F4: B7 16        	lda	[<L869+fp_0],Y
 20916 08:53F6: 48           	pha
 20917 08:53F7: A0 1A 00     	ldy	#$1a
 20918 08:53FA: B7 16        	lda	[<L869+fp_0],Y
 20919 08:53FC: 48           	pha
 20920 08:53FD: 18           	clc
 20921 08:53FE: A9 26 00     	lda	#$26
 20922 08:5401: 65 16        	adc	<L869+fp_0
 20923 08:5403: 85 01        	sta	<R0
 20924 08:5405: A9 00 00     	lda	#$0
 20925 08:5408: 65 18        	adc	<L869+fp_0+2
 20926 08:540A: 85 03        	sta	<R0+2
 20927 08:540C: D4 03        	pei	<R0+2
 20928 08:540E: D4 01        	pei	<R0
 20929 08:5410: A0 01 00     	ldy	#$1
 20930 08:5413: B7 07        	lda	[<L870+fs_1],Y
 20931 08:5415: 48           	pha
  Mon Aug  9 2021 16:52                                                Page 397


 20932 08:5416: 22 xx xx xx  	jsl	~~disk_write
 20933 08:541A: AA           	tax
 20934 08:541B: D0 03        	bne	L875
 20935 08:541D: 82 15 00     	brl	L10494
 20936                        L875:
 20937                        	.line	4687
 20938 08:5420: A9 01 00     	lda	#$1
 20939                        L876:
 20940 08:5423: A8           	tay
 20941 08:5424: A5 14        	lda	<L869+2
 20942 08:5426: 85 18        	sta	<L869+2+4
 20943 08:5428: A5 13        	lda	<L869+1
 20944 08:542A: 85 17        	sta	<L869+1+4
 20945 08:542C: 2B           	pld
 20946 08:542D: 3B           	tsc
 20947 08:542E: 18           	clc
 20948 08:542F: 69 16 00     	adc	#L869+4
 20949 08:5432: 1B           	tcs
 20950 08:5433: 98           	tya
 20951 08:5434: 6B           	rtl
 20952                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 20953                        L10494:
 20954                        	.line	4688
 20955 08:5435: 18           	clc
 20956 08:5436: A9 10 00     	lda	#$10
 20957 08:5439: 65 16        	adc	<L869+fp_0
 20958 08:543B: 85 01        	sta	<R0
 20959 08:543D: A9 00 00     	lda	#$0
 20960 08:5440: 65 18        	adc	<L869+fp_0+2
 20961 08:5442: 85 03        	sta	<R0+2
 20962 08:5444: E2 20        	sep	#$20
 20963                        	longa	off
 20964 08:5446: A7 01        	lda	[<R0]
 20965 08:5448: 29 7F        	and	#<$7f
 20966 08:544A: 87 01        	sta	[<R0]
 20967 08:544C: C2 20        	rep	#$20
 20968                        	longa	on
 20969                        ;			}
 20970                        	.line	4689
 20971                        ;#endif
 20972                        ;			/* Update the directory entry */
 20973                        ;			tm = GET_FATTIME(); /* Modified 
                    time */
 20974                        L10493:
 20975                        	.line	4692
 20976 08:544E: A9 00 00     	lda	#$0
 20977 08:5451: 85 0B        	sta	<L870+tm_1
 20978 08:5453: A9 21 52     	lda	#$5221
 20979 08:5456: 85 0D        	sta	<L870+tm_1+2
 20980                        ;#if FF_FS_EXFAT
 20981                        ;			if (fs->fs_type == FS_EXFAT)
 20982                        ;			{
 20983                        ;				res = fill_first_frag(&f
                    p->obj); /* Fill first fragment on the FAT if needed */
 20984                        ;				if (res == FR_OK)
 20985                        ;				{
 20986                        ;					res = fill_last_
  Mon Aug  9 2021 16:52                                                Page 398


                    frag(&fp->obj, fp->clust, 0xFFFFFFFF); /* Fill last fragment
                     on the FAT if needed */
 20987                        ;				}
 20988                        ;				if (res == FR_OK)
 20989                        ;				{
 20990                        ;					DIR dj;
 20991                        ;					DEF_NAMBUF
 20992                        ;
 20993                        ;					INIT_NAMBUF(fs);
 20994                        ;					res = load_obj_x
                    dir(&dj, &fp->obj); /* Load directory entry block */
 20995                        ;					if (res == FR_OK
                    )
 20996                        ;					{
 20997                        ;						fs->dirb
                    uf[XDIR_Attr] |= AM_ARC; /* Set archive attribute to indicat
                    e that the file has been changed */
 20998                        ;						fs->dirb
                    uf[XDIR_GenFlags] = fp->obj.stat | 1; /* Update file allocat
                    ion information */
 20999                        ;						st_dword
                    (fs->dirbuf + XDIR_FstClus, fp->obj.sclust); /* Update start
                     cluster */
 21000                        ;						st_qword
                    (fs->dirbuf + XDIR_FileSize, fp->obj.objsize); /* Update fil
                    e size */
 21001                        ;						st_qword
                    (fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize); /* (FatF
                    s does not support Valid File Size feature) */
 21002                        ;						st_dword
                    (fs->dirbuf + XDIR_ModTime, tm); /* Update modified time */
 21003                        ;						fs->dirb
                    uf[XDIR_ModTime10] = 0;
 21004                        ;						st_dword
                    (fs->dirbuf + XDIR_AccTime, 0);
 21005                        ;						res = st
                    ore_xdir(&dj); /* Restore it to the directory */
 21006                        ;						if (res 
                    == FR_OK)
 21007                        ;						{
 21008                        ;							
                    res = sync_fs(fs);
 21009                        ;							
                    fp->flag &= (BYTE)~FA_MODIFIED;
 21010                        ;						}
 21011                        ;					}
 21012                        ;					FREE_NAMBUF();
 21013                        ;				}
 21014                        ;			}
 21015                        ;			else
 21016                        ;#endif
 21017                        ;			{
 21018                        	.line	4730
 21019                        ;				res = move_window(fs, fp
                    ->dir_sect);
 21020                        	.line	4731
 21021 08:5458: A0 20 00     	ldy	#$20
 21022 08:545B: B7 16        	lda	[<L869+fp_0],Y
  Mon Aug  9 2021 16:52                                                Page 399


 21023 08:545D: 48           	pha
 21024 08:545E: A0 1E 00     	ldy	#$1e
 21025 08:5461: B7 16        	lda	[<L869+fp_0],Y
 21026 08:5463: 48           	pha
 21027 08:5464: D4 09        	pei	<L870+fs_1+2
 21028 08:5466: D4 07        	pei	<L870+fs_1
 21029 08:5468: 22 97 08 08  	jsl	~~move_window
 21030 08:546C: 85 05        	sta	<L870+res_1
 21031                        ;				if (res == FR_OK)
 21032                        	.line	4732
 21033                        ;				{
 21034 08:546E: A5 05        	lda	<L870+res_1
 21035 08:5470: F0 03        	beq	L877
 21036 08:5472: 82 CA 00     	brl	L10495
 21037                        L877:
 21038                        	.line	4733
 21039                        ;					dir = fp->dir_pt
                    r;
 21040                        	.line	4734
 21041 08:5475: A0 22 00     	ldy	#$22
 21042 08:5478: B7 16        	lda	[<L869+fp_0],Y
 21043 08:547A: 85 0F        	sta	<L870+dir_1
 21044 08:547C: A0 24 00     	ldy	#$24
 21045 08:547F: B7 16        	lda	[<L869+fp_0],Y
 21046 08:5481: 85 11        	sta	<L870+dir_1+2
 21047                        ;					dir[DIR_Attr] |=
                     AM_ARC; /* Set archive attribute to indicate that the file 
                    has been changed */
 21048                        	.line	4735
 21049 08:5483: 18           	clc
 21050 08:5484: A9 0B 00     	lda	#$b
 21051 08:5487: 65 0F        	adc	<L870+dir_1
 21052 08:5489: 85 01        	sta	<R0
 21053 08:548B: A9 00 00     	lda	#$0
 21054 08:548E: 65 11        	adc	<L870+dir_1+2
 21055 08:5490: 85 03        	sta	<R0+2
 21056 08:5492: E2 20        	sep	#$20
 21057                        	longa	off
 21058 08:5494: A7 01        	lda	[<R0]
 21059 08:5496: 09 20        	ora	#<$20
 21060 08:5498: 87 01        	sta	[<R0]
 21061 08:549A: C2 20        	rep	#$20
 21062                        	longa	on
 21063                        ;					st_clust(fp->obj
                    .fs, dir, fp->obj.sclust); /* Update file allocation informa
                    tion  */
 21064                        	.line	4736
 21065 08:549C: A0 0A 00     	ldy	#$a
 21066 08:549F: B7 16        	lda	[<L869+fp_0],Y
 21067 08:54A1: 48           	pha
 21068 08:54A2: A0 08 00     	ldy	#$8
 21069 08:54A5: B7 16        	lda	[<L869+fp_0],Y
 21070 08:54A7: 48           	pha
 21071 08:54A8: D4 11        	pei	<L870+dir_1+2
 21072 08:54AA: D4 0F        	pei	<L870+dir_1
 21073 08:54AC: A0 02 00     	ldy	#$2
 21074 08:54AF: B7 16        	lda	[<L869+fp_0],Y
 21075 08:54B1: 48           	pha
  Mon Aug  9 2021 16:52                                                Page 400


 21076 08:54B2: A7 16        	lda	[<L869+fp_0]
 21077 08:54B4: 48           	pha
 21078 08:54B5: 22 7C 1D 08  	jsl	~~st_clust
 21079                        ;					st_dword(dir + D
                    IR_FileSize, (DWORD) fp->obj.objsize); /* Update file size *
                    /
 21080                        	.line	4737
 21081 08:54B9: A0 0E 00     	ldy	#$e
 21082 08:54BC: B7 16        	lda	[<L869+fp_0],Y
 21083 08:54BE: 48           	pha
 21084 08:54BF: A0 0C 00     	ldy	#$c
 21085 08:54C2: B7 16        	lda	[<L869+fp_0],Y
 21086 08:54C4: 48           	pha
 21087 08:54C5: 18           	clc
 21088 08:54C6: A9 1C 00     	lda	#$1c
 21089 08:54C9: 65 0F        	adc	<L870+dir_1
 21090 08:54CB: 85 01        	sta	<R0
 21091 08:54CD: A9 00 00     	lda	#$0
 21092 08:54D0: 65 11        	adc	<L870+dir_1+2
 21093 08:54D2: 85 03        	sta	<R0+2
 21094 08:54D4: D4 03        	pei	<R0+2
 21095 08:54D6: D4 01        	pei	<R0
 21096 08:54D8: 22 16 01 08  	jsl	~~st_dword
 21097                        ;					st_dword(dir + D
                    IR_ModTime, tm); /* Update modified time */
 21098                        	.line	4738
 21099 08:54DC: D4 0D        	pei	<L870+tm_1+2
 21100 08:54DE: D4 0B        	pei	<L870+tm_1
 21101 08:54E0: 18           	clc
 21102 08:54E1: A9 16 00     	lda	#$16
 21103 08:54E4: 65 0F        	adc	<L870+dir_1
 21104 08:54E6: 85 01        	sta	<R0
 21105 08:54E8: A9 00 00     	lda	#$0
 21106 08:54EB: 65 11        	adc	<L870+dir_1+2
 21107 08:54ED: 85 03        	sta	<R0+2
 21108 08:54EF: D4 03        	pei	<R0+2
 21109 08:54F1: D4 01        	pei	<R0
 21110 08:54F3: 22 16 01 08  	jsl	~~st_dword
 21111                        ;					st_word(dir + DI
                    R_LstAccDate, 0);
 21112                        	.line	4739
 21113 08:54F7: F4 00 00     	pea	#<$0
 21114 08:54FA: 18           	clc
 21115 08:54FB: A9 12 00     	lda	#$12
 21116 08:54FE: 65 0F        	adc	<L870+dir_1
 21117 08:5500: 85 01        	sta	<R0
 21118 08:5502: A9 00 00     	lda	#$0
 21119 08:5505: 65 11        	adc	<L870+dir_1+2
 21120 08:5507: 85 03        	sta	<R0+2
 21121 08:5509: D4 03        	pei	<R0+2
 21122 08:550B: D4 01        	pei	<R0
 21123 08:550D: 22 D7 00 08  	jsl	~~st_word
 21124                        ;					fs->wflag = 1;
 21125                        	.line	4740
 21126 08:5511: E2 20        	sep	#$20
 21127                        	longa	off
 21128 08:5513: A9 01        	lda	#$1
 21129 08:5515: A0 03 00     	ldy	#$3
  Mon Aug  9 2021 16:52                                                Page 401


 21130 08:5518: 97 07        	sta	[<L870+fs_1],Y
 21131 08:551A: C2 20        	rep	#$20
 21132                        	longa	on
 21133                        ;					res = sync_fs(fs
                    ); /* Restore it to the directory */
 21134                        	.line	4741
 21135 08:551C: D4 09        	pei	<L870+fs_1+2
 21136 08:551E: D4 07        	pei	<L870+fs_1
 21137 08:5520: 22 22 09 08  	jsl	~~sync_fs
 21138 08:5524: 85 05        	sta	<L870+res_1
 21139                        ;					fp->flag &= (BYT
                    E) ~FA_MODIFIED;
 21140                        	.line	4742
 21141 08:5526: 18           	clc
 21142 08:5527: A9 10 00     	lda	#$10
 21143 08:552A: 65 16        	adc	<L869+fp_0
 21144 08:552C: 85 01        	sta	<R0
 21145 08:552E: A9 00 00     	lda	#$0
 21146 08:5531: 65 18        	adc	<L869+fp_0+2
 21147 08:5533: 85 03        	sta	<R0+2
 21148 08:5535: E2 20        	sep	#$20
 21149                        	longa	off
 21150 08:5537: A7 01        	lda	[<R0]
 21151 08:5539: 29 BF        	and	#<$bf
 21152 08:553B: 87 01        	sta	[<R0]
 21153 08:553D: C2 20        	rep	#$20
 21154                        	longa	on
 21155                        ;				}
 21156                        	.line	4743
 21157                        ;			}
 21158                        L10495:
 21159                        	.line	4744
 21160                        ;		}
 21161                        	.line	4745
 21162                        ;	}
 21163                        L10492:
 21164                        	.line	4746
 21165                        ;
 21166                        ;	LEAVE_FF(fs, res);
 21167                        L10491:
 21168                        	.line	4748
 21169 08:553F: A5 05        	lda	<L870+res_1
 21170 08:5541: 82 DF FE     	brl	L876
 21171                        ;}
 21172                        	.line	4749
 21173                        	.endblock	4749
 21174             00000012   L869	equ	18
 21175             00000005   L870	equ	5
 21176 08:5544:              	ends
 21177                        	efunc
 21178                        	.endfunc	4749,5,18
 21179                        	.line	4749
 21180                        ;
 21181                        ;#endif /* !FF_FS_READONLY */
 21182                        ;
 21183                        ;/*-----------------------------------------------
                    ------------------------*/
 21184                        ;/* Close File                                    
  Mon Aug  9 2021 16:52                                                Page 402


                                            */
 21185                        ;/*-----------------------------------------------
                    ------------------------*/
 21186                        ;
 21187                        ;FRESULT f_close(FIL* fp /* Pointer to the file ob
                    ject to be closed */
 21188                        ;)
 21189                        ;{
 21190                        	.line	4757
 21191                        	.line	4759
 21192                        	FFDOS
 21193                        	xdef	~~f_close
 21194                        	func
 21195                        	.function	4759
 21196                        ~~f_close:
 21197                        	longa	on
 21198                        	longi	on
 21199 08:5544: 3B           	tsc
 21200 08:5545: 38           	sec
 21201 08:5546: E9 06 00     	sbc	#L878
 21202 08:5549: 1B           	tcs
 21203 08:554A: 0B           	phd
 21204 08:554B: 5B           	tcd
 21205             00000004   fp_0	set	4
 21206                        	.block	4759
 21207                        ;	FRESULT res;
 21208                        ;	FATFS *fs;
 21209                        ;
 21210                        ;#if !FF_FS_READONLY
 21211                        ;	res = f_sync(fp); /* Flush cached data */
 21212             00000000   res_1	set	0
 21213             00000002   fs_1	set	2
 21214                        	.sym	res,0,5,1,16
 21215                        	.sym	fs,2,138,1,32,75
 21216                        	.sym	fp,4,138,6,32,77
 21217                        	.line	4764
 21218 08:554C: D4 0C        	pei	<L878+fp_0+2
 21219 08:554E: D4 0A        	pei	<L878+fp_0
 21220 08:5550: 22 AC 53 08  	jsl	~~f_sync
 21221 08:5554: 85 01        	sta	<L879+res_1
 21222                        ;	if (res == FR_OK)
 21223                        	.line	4765
 21224                        ;#endif
 21225                        ;	{
 21226 08:5556: A5 01        	lda	<L879+res_1
 21227 08:5558: F0 03        	beq	L881
 21228 08:555A: 82 27 00     	brl	L10496
 21229                        L881:
 21230                        	.line	4767
 21231                        ;		res = validate(&fp->obj, &fs); /* Lock v
                    olume */
 21232                        	.line	4768
 21233 08:555D: F4 00 00     	pea	#0
 21234 08:5560: 18           	clc
 21235 08:5561: 7B           	tdc
 21236 08:5562: 69 03 00     	adc	#<L879+fs_1
 21237 08:5565: 48           	pha
 21238 08:5566: D4 0C        	pei	<L878+fp_0+2
  Mon Aug  9 2021 16:52                                                Page 403


 21239 08:5568: D4 0A        	pei	<L878+fp_0
 21240 08:556A: 22 57 44 08  	jsl	~~validate
 21241 08:556E: 85 01        	sta	<L879+res_1
 21242                        ;		if (res == FR_OK)
 21243                        	.line	4769
 21244                        ;		{
 21245 08:5570: A5 01        	lda	<L879+res_1
 21246 08:5572: F0 03        	beq	L882
 21247 08:5574: 82 0D 00     	brl	L10497
 21248                        L882:
 21249                        	.line	4770
 21250                        ;#if FF_FS_LOCK != 0
 21251                        ;			res = dec_lock(fp->obj.lockid); 
                    /* Decrement file open counter */
 21252                        ;			if (res == FR_OK) fp->obj.fs = 0
                    ; /* Invalidate file object */
 21253                        ;#else
 21254                        ;			fp->obj.fs = 0; /* Invalidate fi
                    le object */
 21255                        	.line	4775
 21256 08:5577: A9 00 00     	lda	#$0
 21257 08:557A: 87 0A        	sta	[<L878+fp_0]
 21258 08:557C: A9 00 00     	lda	#$0
 21259 08:557F: A0 02 00     	ldy	#$2
 21260 08:5582: 97 0A        	sta	[<L878+fp_0],Y
 21261                        ;#endif
 21262                        ;#if FF_FS_REENTRANT
 21263                        ;			unlock_fs(fs, FR_OK); /* Unlock 
                    volume */
 21264                        ;#endif
 21265                        ;		}
 21266                        	.line	4780
 21267                        ;	}
 21268                        L10497:
 21269                        	.line	4781
 21270                        ;	return res;
 21271                        L10496:
 21272                        	.line	4782
 21273 08:5584: A5 01        	lda	<L879+res_1
 21274                        L883:
 21275 08:5586: A8           	tay
 21276 08:5587: A5 08        	lda	<L878+2
 21277 08:5589: 85 0C        	sta	<L878+2+4
 21278 08:558B: A5 07        	lda	<L878+1
 21279 08:558D: 85 0B        	sta	<L878+1+4
 21280 08:558F: 2B           	pld
 21281 08:5590: 3B           	tsc
 21282 08:5591: 18           	clc
 21283 08:5592: 69 0A 00     	adc	#L878+4
 21284 08:5595: 1B           	tcs
 21285 08:5596: 98           	tya
 21286 08:5597: 6B           	rtl
 21287                        ;}
 21288                        	.line	4783
 21289                        	.endblock	4783
 21290             00000006   L878	equ	6
 21291             00000001   L879	equ	1
 21292 08:5598:              	ends
  Mon Aug  9 2021 16:52                                                Page 404


 21293                        	efunc
 21294                        	.endfunc	4783,1,6
 21295                        	.line	4783
 21296                        ;
 21297                        ;#if FF_FS_RPATH >= 1
 21298                        ;/*-----------------------------------------------
                    ------------------------*/
 21299                        ;/* Change Current Directory or Current Drive, Get
                     Current Directory      */
 21300                        ;/*-----------------------------------------------
                    ------------------------*/
 21301                        ;
 21302                        ;FRESULT f_chdrive (
 21303                        ;		const TCHAR* path /* Drive number to set
                     */
 21304                        ;)
 21305                        ;{
 21306                        ;	int vol;
 21307                        ;
 21308                        ;	/* Get logical drive number */
 21309                        ;	vol = get_ldnumber(&path);
 21310                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 21311                        ;	CurrVol = (BYTE)vol; /* Set it as current volume
                     */
 21312                        ;
 21313                        ;	return FR_OK;
 21314                        ;}
 21315                        ;
 21316                        ;FRESULT f_chdir (
 21317                        ;		const TCHAR* path /* Pointer to the dire
                    ctory path */
 21318                        ;)
 21319                        ;{
 21320                        ;#if FF_STR_VOLUME_ID == 2
 21321                        ;	UINT i;
 21322                        ;#endif
 21323                        ;	FRESULT res;
 21324                        ;	DIR dj;
 21325                        ;	FATFS *fs;
 21326                        ;	DEF_NAMBUF
 21327                        ;
 21328                        ;	////k_debug_string( "f_chdir...\r\n");
 21329                        ;
 21330                        ;	/* Get logical drive */
 21331                        ;	res = mount_volume(&path, &fs, 0);
 21332                        ;	if (res == FR_OK)
 21333                        ;	{
 21334                        ;		dj.obj.fs = fs;
 21335                        ;		INIT_NAMBUF(fs);
 21336                        ;		res = follow_path(&dj, path); /* Follow 
                    the path */
 21337                        ;		if (res == FR_OK)
 21338                        ;		{ /* Follow completed */
 21339                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 21340                        ;			{ /* Is it the start directory i
                    tself? */
 21341                        ;				fs->cdir = dj.obj.sclust
                    ;
  Mon Aug  9 2021 16:52                                                Page 405


 21342                        ;#if FF_FS_EXFAT
 21343                        ;				if (fs->fs_type == FS_EX
                    FAT)
 21344                        ;				{
 21345                        ;					fs->cdc_scl = dj
                    .obj.c_scl;
 21346                        ;					fs->cdc_size = d
                    j.obj.c_size;
 21347                        ;					fs->cdc_ofs = dj
                    .obj.c_ofs;
 21348                        ;				}
 21349                        ;#endif
 21350                        ;			}
 21351                        ;			else
 21352                        ;			{
 21353                        ;				if (dj.obj.attr & AM_DIR
                    )
 21354                        ;				{ /* It is a sub-directo
                    ry */
 21355                        ;#if FF_FS_EXFAT
 21356                        ;					if (fs->fs_type 
                    == FS_EXFAT)
 21357                        ;					{
 21358                        ;						fs->cdir
                     = ld_dword(fs->dirbuf + XDIR_FstClus); /* Sub-directory clu
                    ster */
 21359                        ;						fs->cdc_
                    scl = dj.obj.sclust; /* Save containing directory informatio
                    n */
 21360                        ;						fs->cdc_
                    size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 21361                        ;						fs->cdc_
                    ofs = dj.blk_ofs;
 21362                        ;					}
 21363                        ;					else
 21364                        ;#endif
 21365                        ;					{
 21366                        ;						fs->cdir
                     = ld_clust(fs, dj.dir); /* Sub-directory cluster */
 21367                        ;					}
 21368                        ;				}
 21369                        ;				else
 21370                        ;				{
 21371                        ;					res = FR_NO_PATH
                    ; /* Reached but a file */
 21372                        ;				}
 21373                        ;			}
 21374                        ;		}
 21375                        ;		FREE_NAMBUF();
 21376                        ;		if (res == FR_NO_FILE) res = FR_NO_PATH;
 21377                        ;#if FF_STR_VOLUME_ID == 2	/* Also current 
                    drive is changed at Unix style volume ID */
 21378                        ;		if (res == FR_OK)
 21379                        ;		{
 21380                        ;			for (i = FF_VOLUMES - 1; i && fs
                     != FatFs[i]; i--); /* Set current drive */
 21381                        ;			CurrVol = (BYTE)i;
 21382                        ;		}
  Mon Aug  9 2021 16:52                                                Page 406


 21383                        ;#endif
 21384                        ;	}
 21385                        ;
 21386                        ;	LEAVE_FF(fs, res);
 21387                        ;}
 21388                        ;
 21389                        ;#if FF_FS_RPATH >= 2
 21390                        ;FRESULT f_getcwd (
 21391                        ;		TCHAR* buff, /* Pointer to the directory
                     path */
 21392                        ;		UINT len /* Size of buff in unit of TCHA
                    R */
 21393                        ;)
 21394                        ;{
 21395                        ;	FRESULT res;
 21396                        ;	DIR dj;
 21397                        ;	FATFS *fs;
 21398                        ;	UINT i, n;
 21399                        ;	DWORD ccl;
 21400                        ;	TCHAR *tp = buff;
 21401                        ;#if FF_VOLUMES >= 2
 21402                        ;	UINT vl;
 21403                        ;#if FF_STR_VOLUME_ID
 21404                        ;	const char *vp;
 21405                        ;#endif
 21406                        ;#endif
 21407                        ;	FILINFO fno;
 21408                        ;	DEF_NAMBUF
 21409                        ;
 21410                        ;	/* Get logical drive */
 21411                        ;	buff[0] = 0; /* Set null string to get current v
                    olume */
 21412                        ;	res = mount_volume((const TCHAR**)&buff, &fs, 0)
                    ; /* Get current volume */
 21413                        ;	if (res == FR_OK)
 21414                        ;	{
 21415                        ;		dj.obj.fs = fs;
 21416                        ;		INIT_NAMBUF(fs);
 21417                        ;
 21418                        ;		/* Follow parent directories and create 
                    the path */
 21419                        ;		i = len; /* Bottom of buffer (directory 
                    stack base) */
 21420                        ;		if (!FF_FS_EXFAT || fs->fs_type != FS_EX
                    FAT)
 21421                        ;		{ /* (Cannot do getcwd on exFAT and retu
                    rns root path) */
 21422                        ;			dj.obj.sclust = fs->cdir; /* Sta
                    rt to follow upper directory from current directory */
 21423                        ;			while ((ccl = dj.obj.sclust) != 
                    0)
 21424                        ;			{ /* Repeat while current direct
                    ory is a sub-directory */
 21425                        ;				res = dir_sdi(&dj, 1 * S
                    ZDIRE); /* Get parent directory */
 21426                        ;				if (res != FR_OK) break;
 21427                        ;				res = move_window(fs, dj
                    .sect);
  Mon Aug  9 2021 16:52                                                Page 407


 21428                        ;				if (res != FR_OK) break;
 21429                        ;				dj.obj.sclust = ld_clust
                    (fs, dj.dir); /* Goto parent directory */
 21430                        ;				res = dir_sdi(&dj, 0);
 21431                        ;				if (res != FR_OK) break;
 21432                        ;				do
 21433                        ;				{ /* Find the entry link
                    s to the child directory */
 21434                        ;					res = DIR_READ_F
                    ILE(&dj);
 21435                        ;					if (res != FR_OK
                    ) break;
 21436                        ;					if (ccl == ld_cl
                    ust(fs, dj.dir)) break; /* Found the entry */
 21437                        ;					res = dir_next(&
                    dj, 0);
 21438                        ;				}while (res == FR_OK);
 21439                        ;				if (res == FR_NO_FILE) r
                    es = FR_INT_ERR;/* It cannot be 'not found'. */
 21440                        ;				if (res != FR_OK) break;
 21441                        ;				get_fileinfo(&dj, &fno);
                     /* Get the directory name and push it to the buffer */
 21442                        ;				for (n = 0; fno.fname[n]
                    ; n++); /* Name length */
 21443                        ;				if (i < n + 1)
 21444                        ;				{ /* Insufficient space 
                    to store the path name? */
 21445                        ;					res = FR_NOT_ENO
                    UGH_CORE; break;
 21446                        ;				}
 21447                        ;				while (n) buff[--i] = fn
                    o.fname[--n]; /* Stack the name */
 21448                        ;				buff[--i] = '/';
 21449                        ;			}
 21450                        ;		}
 21451                        ;		if (res == FR_OK)
 21452                        ;		{
 21453                        ;			if (i == len) buff[--i] = '/'; /
                    * Is it the root-directory? */
 21454                        ;#if FF_VOLUMES >= 2			/* Put d
                    rive prefix */
 21455                        ;			vl = 0;
 21456                        ;#if FF_STR_VOLUME_ID >= 1	/* String volume
                     ID */
 21457                        ;			for (n = 0, vp = (const char*)Vo
                    lumeStr[CurrVol]; vp[n]; n++);
 21458                        ;			if (i >= n + 2)
 21459                        ;			{
 21460                        ;				if (FF_STR_VOLUME_ID == 
                    2) *tp++ = (TCHAR)'/';
 21461                        ;				for (vl = 0; vl < n; *tp
                    ++ = (TCHAR)vp[vl], vl++);
 21462                        ;				if (FF_STR_VOLUME_ID == 
                    1) *tp++ = (TCHAR)':';
 21463                        ;				vl++;
 21464                        ;			}
 21465                        ;#else						
                    /* Numeric volume ID */
  Mon Aug  9 2021 16:52                                                Page 408


 21466                        ;			if (i >= 3)
 21467                        ;			{
 21468                        ;				*tp++ = (TCHAR)'0' + Cur
                    rVol;
 21469                        ;				*tp++ = (TCHAR)':';
 21470                        ;				vl = 2;
 21471                        ;			}
 21472                        ;#endif
 21473                        ;			if (vl == 0) res = FR_NOT_ENOUGH
                    _CORE;
 21474                        ;#endif
 21475                        ;			/* Add current directory path */
 21476                        ;			if (res == FR_OK)
 21477                        ;			{
 21478                        ;				do *tp++ = buff[i++]; wh
                    ile (i < len); /* Copy stacked path string */
 21479                        ;			}
 21480                        ;		}
 21481                        ;		FREE_NAMBUF();
 21482                        ;	}
 21483                        ;
 21484                        ;	*tp = 0;
 21485                        ;	LEAVE_FF(fs, res);
 21486                        ;}
 21487                        ;
 21488                        ;#endif /* FF_FS_RPATH >= 2 */
 21489                        ;#endif /* FF_FS_RPATH >= 1 */
 21490                        ;
 21491                        ;#if FF_FS_MINIMIZE <= 2
 21492                        ;/*-----------------------------------------------
                    ------------------------*/
 21493                        ;/* Seek File Read/Write Pointer                  
                                            */
 21494                        ;/*-----------------------------------------------
                    ------------------------*/
 21495                        ;
 21496                        ;FRESULT f_lseek(FIL* fp, /* Pointer to the file o
                    bject */
 21497                        ;FSIZE_t ofs /* File pointer from top of file */
 21498                        ;)
 21499                        ;{
 21500                        	.line	4984
 21501                        	.line	4987
 21502                        	FFDOS
 21503                        	xdef	~~f_lseek
 21504                        	func
 21505                        	.function	4987
 21506                        ~~f_lseek:
 21507                        	longa	on
 21508                        	longi	on
 21509 08:5598: 3B           	tsc
 21510 08:5599: 38           	sec
 21511 08:559A: E9 22 00     	sbc	#L884
 21512 08:559D: 1B           	tcs
 21513 08:559E: 0B           	phd
 21514 08:559F: 5B           	tcd
 21515             00000004   fp_0	set	4
 21516             00000008   ofs_0	set	8
  Mon Aug  9 2021 16:52                                                Page 409


 21517                        	.block	4987
 21518                        ;	FRESULT res;
 21519                        ;	FATFS *fs;
 21520                        ;	DWORD clst, bcs;
 21521                        ;	LBA_t nsect;
 21522                        ;	FSIZE_t ifptr;
 21523                        ;#if FF_USE_FASTSEEK
 21524                        ;	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
 21525                        ;	LBA_t dsc;
 21526                        ;#endif
 21527                        ;
 21528                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 21529             00000000   res_1	set	0
 21530             00000002   fs_1	set	2
 21531             00000006   clst_1	set	6
 21532             0000000A   bcs_1	set	10
 21533             0000000E   nsect_1	set	14
 21534             00000012   ifptr_1	set	18
 21535                        	.sym	res,0,5,1,16
 21536                        	.sym	fs,2,138,1,32,75
 21537                        	.sym	clst,6,18,1,32
 21538                        	.sym	bcs,10,18,1,32
 21539                        	.sym	nsect,14,18,1,32
 21540                        	.sym	ifptr,18,18,1,32
 21541                        	.sym	fp,4,138,6,32,77
 21542                        	.sym	ofs,8,18,6,32
 21543                        	.line	4998
 21544 08:55A0: F4 00 00     	pea	#0
 21545 08:55A3: 18           	clc
 21546 08:55A4: 7B           	tdc
 21547 08:55A5: 69 0F 00     	adc	#<L885+fs_1
 21548 08:55A8: 48           	pha
 21549 08:55A9: D4 28        	pei	<L884+fp_0+2
 21550 08:55AB: D4 26        	pei	<L884+fp_0
 21551 08:55AD: 22 57 44 08  	jsl	~~validate
 21552 08:55B1: 85 0D        	sta	<L885+res_1
 21553                        ;	if (res == FR_OK)
 21554                        	.line	4999
 21555                        ;		res = (FRESULT) fp->err;
 21556 08:55B3: A5 0D        	lda	<L885+res_1
 21557 08:55B5: F0 03        	beq	L887
 21558 08:55B7: 82 0A 00     	brl	L10498
 21559                        L887:
 21560                        	.line	5000
 21561 08:55BA: A0 11 00     	ldy	#$11
 21562 08:55BD: B7 26        	lda	[<L884+fp_0],Y
 21563 08:55BF: 29 FF 00     	and	#$ff
 21564 08:55C2: 85 0D        	sta	<L885+res_1
 21565                        ;#if FF_FS_EXFAT && !FF_FS_READONLY
 21566                        ;	if (res == FR_OK && fs->fs_type == FS_EXFAT)
 21567                        ;	{
 21568                        ;		res = fill_last_frag(&fp->obj, fp->clust
                    , 0xFFFFFFFF); /* Fill last fragment on the FAT if needed */
 21569                        ;	}
 21570                        ;#endif
 21571                        ;	if (res != FR_OK)
 21572                        L10498:
  Mon Aug  9 2021 16:52                                                Page 410


 21573                        	.line	5007
 21574                        ;		LEAVE_FF(fs, res);
 21575 08:55C4: A5 0D        	lda	<L885+res_1
 21576 08:55C6: D0 03        	bne	L888
 21577 08:55C8: 82 14 00     	brl	L10499
 21578                        L888:
 21579                        	.line	5008
 21580 08:55CB: A5 0D        	lda	<L885+res_1
 21581                        L889:
 21582 08:55CD: A8           	tay
 21583 08:55CE: A5 24        	lda	<L884+2
 21584 08:55D0: 85 2C        	sta	<L884+2+8
 21585 08:55D2: A5 23        	lda	<L884+1
 21586 08:55D4: 85 2B        	sta	<L884+1+8
 21587 08:55D6: 2B           	pld
 21588 08:55D7: 3B           	tsc
 21589 08:55D8: 18           	clc
 21590 08:55D9: 69 2A 00     	adc	#L884+8
 21591 08:55DC: 1B           	tcs
 21592 08:55DD: 98           	tya
 21593 08:55DE: 6B           	rtl
 21594                        ;
 21595                        ;#if FF_USE_FASTSEEK
 21596                        ;	if (fp->cltbl)
 21597                        ;	{ /* Fast seek */
 21598                        ;		if (ofs == CREATE_LINKMAP)
 21599                        ;		{ /* Create CLMT */
 21600                        ;			tbl = fp->cltbl;
 21601                        ;			tlen = *tbl++; ulen = 2; /* Give
                    n table size and required table size */
 21602                        ;			cl = fp->obj.sclust; /* Origin o
                    f the chain */
 21603                        ;			if (cl != 0)
 21604                        ;			{
 21605                        ;				do
 21606                        ;				{
 21607                        ;					/* Get a fragmen
                    t */
 21608                        ;					tcl = cl; ncl = 
                    0; ulen += 2; /* Top, length and used items */
 21609                        ;					do
 21610                        ;					{
 21611                        ;						pcl = cl
                    ; ncl++;
 21612                        ;						cl = get
                    _fat(&fp->obj, cl);
 21613                        ;						if (cl <
                    = 1) ABORT(fs, FR_INT_ERR);
 21614                        ;						if (cl =
                    = 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 21615                        ;					}while (cl == pc
                    l + 1);
 21616                        ;					if (ulen <= tlen
                    )
 21617                        ;					{ /* Store the l
                    ength and top of the fragment */
 21618                        ;						*tbl++ =
                     ncl; *tbl++ = tcl;
  Mon Aug  9 2021 16:52                                                Page 411


 21619                        ;					}
 21620                        ;				}while (cl < fs->n_faten
                    t); /* Repeat until end of chain */
 21621                        ;			}
 21622                        ;			*fp->cltbl = ulen; /* Number of 
                    items used */
 21623                        ;			if (ulen <= tlen)
 21624                        ;			{
 21625                        ;				*tbl = 0; /* Terminate t
                    able */
 21626                        ;			}
 21627                        ;			else
 21628                        ;			{
 21629                        ;				res = FR_NOT_ENOUGH_CORE
                    ; /* Given table size is smaller than required */
 21630                        ;			}
 21631                        ;		}
 21632                        ;		else
 21633                        ;		{ /* Fast seek */
 21634                        ;			if (ofs > fp->obj.objsize) ofs =
                     fp->obj.objsize; /* Clip offset at the file size */
 21635                        ;			fp->fptr = ofs; /* Set file poin
                    ter */
 21636                        ;			if (ofs > 0)
 21637                        ;			{
 21638                        ;				fp->clust = clmt_clust(f
                    p, ofs - 1);
 21639                        ;				dsc = clst2sect(fs, fp->
                    clust);
 21640                        ;				if (dsc == 0) ABORT(fs, 
                    FR_INT_ERR);
 21641                        ;				dsc += (DWORD)((ofs - 1)
                     / SS(fs)) & (fs->csize - 1);
 21642                        ;				if (fp->fptr % SS(fs) &&
                     dsc != fp->sect)
 21643                        ;				{ /* Refill sector cache
                     if needed */
 21644                        ;#if !FF_FS_TINY
 21645                        ;#if !FF_FS_READONLY
 21646                        ;					if (fp->flag & F
                    A_DIRTY)
 21647                        ;					{ /* Write-back 
                    dirty sector cache */
 21648                        ;						if (disk
                    _write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, 
                    FR_DISK_ERR);
 21649                        ;						fp->flag
                     &= (BYTE)~FA_DIRTY;
 21650                        ;					}
 21651                        ;#endif
 21652                        ;					if (disk_read(fs
                    ->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR); 
                    /* Load current sector */
 21653                        ;#endif
 21654                        ;					fp->sect = dsc;
 21655                        ;				}
 21656                        ;			}
 21657                        ;		}
  Mon Aug  9 2021 16:52                                                Page 412


 21658                        ;	}
 21659                        ;	else
 21660                        ;#endif
 21661                        ;
 21662                        ;	/* Normal Seek */
 21663                        ;	{
 21664                        L10499:
 21665                        	.line	5078
 21666                        ;#if FF_FS_EXFAT
 21667                        ;		if (fs->fs_type != FS_EXFAT && ofs >= 0x
                    100000000) ofs = 0xFFFFFFFF; /* Clip at 4 GiB - 1 if at FATx
                    x */
 21668                        ;#endif
 21669                        ;		if (ofs > fp->obj.objsize && (FF_FS_READ
                    ONLY || !(fp->flag & FA_WRITE)))
 21670                        	.line	5082
 21671                        ;		{ /* In read-only mode, clip offset with
                     the file size */
 21672 08:55DF: A0 0C 00     	ldy	#$c
 21673 08:55E2: B7 26        	lda	[<L884+fp_0],Y
 21674 08:55E4: C5 2A        	cmp	<L884+ofs_0
 21675 08:55E6: A0 0E 00     	ldy	#$e
 21676 08:55E9: B7 26        	lda	[<L884+fp_0],Y
 21677 08:55EB: E5 2C        	sbc	<L884+ofs_0+2
 21678 08:55ED: 90 03        	bcc	L890
 21679 08:55EF: 82 1E 00     	brl	L10500
 21680                        L890:
 21681 08:55F2: E2 20        	sep	#$20
 21682                        	longa	off
 21683 08:55F4: A0 10 00     	ldy	#$10
 21684 08:55F7: B7 26        	lda	[<L884+fp_0],Y
 21685 08:55F9: 29 02        	and	#<$2
 21686 08:55FB: C2 20        	rep	#$20
 21687                        	longa	on
 21688 08:55FD: F0 03        	beq	L892
 21689 08:55FF: 82 0E 00     	brl	L10500
 21690                        L892:
 21691                        L891:
 21692                        	.line	5083
 21693                        ;			ofs = fp->obj.objsize;
 21694                        	.line	5084
 21695 08:5602: A0 0C 00     	ldy	#$c
 21696 08:5605: B7 26        	lda	[<L884+fp_0],Y
 21697 08:5607: 85 2A        	sta	<L884+ofs_0
 21698 08:5609: A0 0E 00     	ldy	#$e
 21699 08:560C: B7 26        	lda	[<L884+fp_0],Y
 21700 08:560E: 85 2C        	sta	<L884+ofs_0+2
 21701                        ;		}
 21702                        	.line	5085
 21703                        ;		ifptr = fp->fptr;
 21704                        L10500:
 21705                        	.line	5086
 21706 08:5610: A0 12 00     	ldy	#$12
 21707 08:5613: B7 26        	lda	[<L884+fp_0],Y
 21708 08:5615: 85 1F        	sta	<L885+ifptr_1
 21709 08:5617: A0 14 00     	ldy	#$14
 21710 08:561A: B7 26        	lda	[<L884+fp_0],Y
 21711 08:561C: 85 21        	sta	<L885+ifptr_1+2
  Mon Aug  9 2021 16:52                                                Page 413


 21712                        ;		fp->fptr = nsect = 0;
 21713                        	.line	5087
 21714 08:561E: 64 1B        	stz	<L885+nsect_1
 21715 08:5620: 64 1D        	stz	<L885+nsect_1+2
 21716 08:5622: A9 00 00     	lda	#$0
 21717 08:5625: A0 12 00     	ldy	#$12
 21718 08:5628: 97 26        	sta	[<L884+fp_0],Y
 21719 08:562A: A9 00 00     	lda	#$0
 21720 08:562D: A0 14 00     	ldy	#$14
 21721 08:5630: 97 26        	sta	[<L884+fp_0],Y
 21722                        ;		if (ofs > 0)
 21723                        	.line	5088
 21724                        ;		{
 21725 08:5632: A9 00 00     	lda	#$0
 21726 08:5635: C5 2A        	cmp	<L884+ofs_0
 21727 08:5637: A9 00 00     	lda	#$0
 21728 08:563A: E5 2C        	sbc	<L884+ofs_0+2
 21729 08:563C: 90 03        	bcc	L893
 21730 08:563E: 82 18 03     	brl	L10501
 21731                        L893:
 21732                        	.line	5089
 21733                        ;			bcs = (DWORD) fs->csize * SS(fs)
                    ; /* Cluster size (byte) */
 21734                        	.line	5090
 21735 08:5641: A0 00 00     	ldy	#$0
 21736 08:5644: 5A           	phy
 21737 08:5645: A0 09 00     	ldy	#$9
 21738 08:5648: B7 0F        	lda	[<L885+fs_1],Y
 21739 08:564A: 7A           	ply
 21740 08:564B: 2A           	rol	A
 21741 08:564C: 6A           	ror	A
 21742 08:564D: 10 01        	bpl	L894
 21743 08:564F: 88           	dey
 21744                        L894:
 21745 08:5650: 85 01        	sta	<R0
 21746 08:5652: 84 03        	sty	<R0+2
 21747 08:5654: D4 03        	pei	<R0+2
 21748 08:5656: D4 01        	pei	<R0
 21749 08:5658: A9 09 00     	lda	#$9
 21750                        	xref	~~~lasl
 21751 08:565B: 22 xx xx xx  	jsl	~~~lasl
 21752 08:565F: 85 17        	sta	<L885+bcs_1
 21753 08:5661: 86 19        	stx	<L885+bcs_1+2
 21754                        ;			if (ifptr > 0 && (ofs - 1) / bcs
                     >= (ifptr - 1) / bcs)
 21755                        	.line	5091
 21756                        ;			{ /* When seek to same or follow
                    ing cluster, */
 21757 08:5663: A9 00 00     	lda	#$0
 21758 08:5666: C5 1F        	cmp	<L885+ifptr_1
 21759 08:5668: A9 00 00     	lda	#$0
 21760 08:566B: E5 21        	sbc	<L885+ifptr_1+2
 21761 08:566D: 90 03        	bcc	L895
 21762 08:566F: 82 B5 00     	brl	L10502
 21763                        L895:
 21764 08:5672: 18           	clc
 21765 08:5673: A9 FF FF     	lda	#$ffff
 21766 08:5676: 65 1F        	adc	<L885+ifptr_1
  Mon Aug  9 2021 16:52                                                Page 414


 21767 08:5678: 85 01        	sta	<R0
 21768 08:567A: A9 FF FF     	lda	#$ffff
 21769 08:567D: 65 21        	adc	<L885+ifptr_1+2
 21770 08:567F: 85 03        	sta	<R0+2
 21771 08:5681: D4 19        	pei	<L885+bcs_1+2
 21772 08:5683: D4 17        	pei	<L885+bcs_1
 21773 08:5685: D4 03        	pei	<R0+2
 21774 08:5687: D4 01        	pei	<R0
 21775                        	xref	~~~ludv
 21776 08:5689: 22 xx xx xx  	jsl	~~~ludv
 21777 08:568D: 85 01        	sta	<R0
 21778 08:568F: 86 03        	stx	<R0+2
 21779 08:5691: 18           	clc
 21780 08:5692: A9 FF FF     	lda	#$ffff
 21781 08:5695: 65 2A        	adc	<L884+ofs_0
 21782 08:5697: 85 05        	sta	<R1
 21783 08:5699: A9 FF FF     	lda	#$ffff
 21784 08:569C: 65 2C        	adc	<L884+ofs_0+2
 21785 08:569E: 85 07        	sta	<R1+2
 21786 08:56A0: D4 19        	pei	<L885+bcs_1+2
 21787 08:56A2: D4 17        	pei	<L885+bcs_1
 21788 08:56A4: D4 07        	pei	<R1+2
 21789 08:56A6: D4 05        	pei	<R1
 21790                        	xref	~~~ludv
 21791 08:56A8: 22 xx xx xx  	jsl	~~~ludv
 21792 08:56AC: 85 05        	sta	<R1
 21793 08:56AE: 86 07        	stx	<R1+2
 21794 08:56B0: A5 05        	lda	<R1
 21795 08:56B2: C5 01        	cmp	<R0
 21796 08:56B4: A5 07        	lda	<R1+2
 21797 08:56B6: E5 03        	sbc	<R0+2
 21798 08:56B8: B0 03        	bcs	L896
 21799 08:56BA: 82 6A 00     	brl	L10502
 21800                        L896:
 21801                        	.line	5092
 21802                        ;				fp->fptr = (ifptr - 1) &
                     ~(FSIZE_t) (bcs - 1); /* start from the current cluster */
 21803                        	.line	5093
 21804 08:56BD: 18           	clc
 21805 08:56BE: A9 FF FF     	lda	#$ffff
 21806 08:56C1: 65 1F        	adc	<L885+ifptr_1
 21807 08:56C3: 85 01        	sta	<R0
 21808 08:56C5: A9 FF FF     	lda	#$ffff
 21809 08:56C8: 65 21        	adc	<L885+ifptr_1+2
 21810 08:56CA: 85 03        	sta	<R0+2
 21811 08:56CC: 18           	clc
 21812 08:56CD: A9 FF FF     	lda	#$ffff
 21813 08:56D0: 65 17        	adc	<L885+bcs_1
 21814 08:56D2: 85 05        	sta	<R1
 21815 08:56D4: A9 FF FF     	lda	#$ffff
 21816 08:56D7: 65 19        	adc	<L885+bcs_1+2
 21817 08:56D9: 85 07        	sta	<R1+2
 21818 08:56DB: A5 05        	lda	<R1
 21819 08:56DD: 49 FF FF     	eor	#<$ffffffff
 21820 08:56E0: 85 09        	sta	<R2
 21821 08:56E2: A5 07        	lda	<R1+2
 21822 08:56E4: 49 FF FF     	eor	#^$ffffffff
 21823 08:56E7: 85 0B        	sta	<R2+2
  Mon Aug  9 2021 16:52                                                Page 415


 21824 08:56E9: A5 09        	lda	<R2
 21825 08:56EB: 25 01        	and	<R0
 21826 08:56ED: 85 05        	sta	<R1
 21827 08:56EF: A5 0B        	lda	<R2+2
 21828 08:56F1: 25 03        	and	<R0+2
 21829 08:56F3: 85 07        	sta	<R1+2
 21830 08:56F5: A5 05        	lda	<R1
 21831 08:56F7: A0 12 00     	ldy	#$12
 21832 08:56FA: 97 26        	sta	[<L884+fp_0],Y
 21833 08:56FC: A5 07        	lda	<R1+2
 21834 08:56FE: A0 14 00     	ldy	#$14
 21835 08:5701: 97 26        	sta	[<L884+fp_0],Y
 21836                        ;				ofs -= fp->fptr;
 21837                        	.line	5094
 21838 08:5703: 38           	sec
 21839 08:5704: A5 2A        	lda	<L884+ofs_0
 21840 08:5706: A0 12 00     	ldy	#$12
 21841 08:5709: F7 26        	sbc	[<L884+fp_0],Y
 21842 08:570B: 85 2A        	sta	<L884+ofs_0
 21843 08:570D: A5 2C        	lda	<L884+ofs_0+2
 21844 08:570F: A0 14 00     	ldy	#$14
 21845 08:5712: F7 26        	sbc	[<L884+fp_0],Y
 21846 08:5714: 85 2C        	sta	<L884+ofs_0+2
 21847                        ;				clst = fp->clust;
 21848                        	.line	5095
 21849 08:5716: A0 16 00     	ldy	#$16
 21850 08:5719: B7 26        	lda	[<L884+fp_0],Y
 21851 08:571B: 85 13        	sta	<L885+clst_1
 21852 08:571D: A0 18 00     	ldy	#$18
 21853 08:5720: B7 26        	lda	[<L884+fp_0],Y
 21854 08:5722: 85 15        	sta	<L885+clst_1+2
 21855                        ;			}
 21856                        	.line	5096
 21857                        ;			else
 21858 08:5724: 82 89 00     	brl	L10503
 21859                        L10502:
 21860                        ;			{ /* When seek to back cluster, 
                    */
 21861                        	.line	5098
 21862                        ;				clst = fp->obj.sclust; /
                    * start from the first cluster */
 21863                        	.line	5099
 21864 08:5727: A0 08 00     	ldy	#$8
 21865 08:572A: B7 26        	lda	[<L884+fp_0],Y
 21866 08:572C: 85 13        	sta	<L885+clst_1
 21867 08:572E: A0 0A 00     	ldy	#$a
 21868 08:5731: B7 26        	lda	[<L884+fp_0],Y
 21869 08:5733: 85 15        	sta	<L885+clst_1+2
 21870                        ;#if !FF_FS_READONLY
 21871                        ;				if (clst == 0)
 21872                        	.line	5101
 21873                        ;				{ /* If no cluster chain
                    , create a new chain */
 21874 08:5735: A5 13        	lda	<L885+clst_1
 21875 08:5737: 05 15        	ora	<L885+clst_1+2
 21876 08:5739: F0 03        	beq	L897
 21877 08:573B: 82 64 00     	brl	L10504
 21878                        L897:
  Mon Aug  9 2021 16:52                                                Page 416


 21879                        	.line	5102
 21880                        ;					clst = create_ch
                    ain(&fp->obj, 0);
 21881                        	.line	5103
 21882 08:573E: F4 00 00     	pea	#^$0
 21883 08:5741: F4 00 00     	pea	#<$0
 21884 08:5744: D4 28        	pei	<L884+fp_0+2
 21885 08:5746: D4 26        	pei	<L884+fp_0
 21886 08:5748: 22 69 12 08  	jsl	~~create_chain
 21887 08:574C: 85 13        	sta	<L885+clst_1
 21888 08:574E: 86 15        	stx	<L885+clst_1+2
 21889                        ;					if (clst == 1)
 21890                        	.line	5104
 21891                        ;						ABORT(fs
                    , FR_INT_ERR);
 21892 08:5750: A5 13        	lda	<L885+clst_1
 21893 08:5752: C9 01 00     	cmp	#<$1
 21894 08:5755: D0 05        	bne	L898
 21895 08:5757: A5 15        	lda	<L885+clst_1+2
 21896 08:5759: C9 00 00     	cmp	#^$1
 21897                        L898:
 21898 08:575C: F0 03        	beq	L899
 21899 08:575E: 82 11 00     	brl	L10505
 21900                        L899:
 21901                        	.line	5105
 21902                        	.line	5105
 21903 08:5761: E2 20        	sep	#$20
 21904                        	longa	off
 21905 08:5763: A9 02        	lda	#$2
 21906 08:5765: A0 11 00     	ldy	#$11
 21907 08:5768: 97 26        	sta	[<L884+fp_0],Y
 21908 08:576A: C2 20        	rep	#$20
 21909                        	longa	on
 21910                        	.line	5105
 21911 08:576C: A9 02 00     	lda	#$2
 21912 08:576F: 82 5B FE     	brl	L889
 21913                        	.line	5105
 21914                        L10505:
 21915                        	.line	5105
 21916                        ;					if (clst == 0xFF
                    FFFFFF)
 21917                        	.line	5106
 21918                        ;						ABORT(fs
                    , FR_DISK_ERR);
 21919 08:5772: A5 13        	lda	<L885+clst_1
 21920 08:5774: C9 FF FF     	cmp	#<$ffffffff
 21921 08:5777: D0 05        	bne	L900
 21922 08:5779: A5 15        	lda	<L885+clst_1+2
 21923 08:577B: C9 FF FF     	cmp	#^$ffffffff
 21924                        L900:
 21925 08:577E: F0 03        	beq	L901
 21926 08:5780: 82 11 00     	brl	L10506
 21927                        L901:
 21928                        	.line	5107
 21929                        	.line	5107
 21930 08:5783: E2 20        	sep	#$20
 21931                        	longa	off
 21932 08:5785: A9 01        	lda	#$1
  Mon Aug  9 2021 16:52                                                Page 417


 21933 08:5787: A0 11 00     	ldy	#$11
 21934 08:578A: 97 26        	sta	[<L884+fp_0],Y
 21935 08:578C: C2 20        	rep	#$20
 21936                        	longa	on
 21937                        	.line	5107
 21938 08:578E: A9 01 00     	lda	#$1
 21939 08:5791: 82 39 FE     	brl	L889
 21940                        	.line	5107
 21941                        L10506:
 21942                        	.line	5107
 21943                        ;					fp->obj.sclust =
                     clst;
 21944                        	.line	5108
 21945 08:5794: A5 13        	lda	<L885+clst_1
 21946 08:5796: A0 08 00     	ldy	#$8
 21947 08:5799: 97 26        	sta	[<L884+fp_0],Y
 21948 08:579B: A5 15        	lda	<L885+clst_1+2
 21949 08:579D: A0 0A 00     	ldy	#$a
 21950 08:57A0: 97 26        	sta	[<L884+fp_0],Y
 21951                        ;				}
 21952                        	.line	5109
 21953                        ;#endif
 21954                        ;				fp->clust = clst;
 21955                        L10504:
 21956                        	.line	5111
 21957 08:57A2: A5 13        	lda	<L885+clst_1
 21958 08:57A4: A0 16 00     	ldy	#$16
 21959 08:57A7: 97 26        	sta	[<L884+fp_0],Y
 21960 08:57A9: A5 15        	lda	<L885+clst_1+2
 21961 08:57AB: A0 18 00     	ldy	#$18
 21962 08:57AE: 97 26        	sta	[<L884+fp_0],Y
 21963                        ;			}
 21964                        	.line	5112
 21965                        L10503:
 21966                        ;			if (clst != 0)
 21967                        	.line	5113
 21968                        ;			{
 21969 08:57B0: A5 13        	lda	<L885+clst_1
 21970 08:57B2: 05 15        	ora	<L885+clst_1+2
 21971 08:57B4: D0 03        	bne	L902
 21972 08:57B6: 82 A0 01     	brl	L10507
 21973                        L902:
 21974                        	.line	5114
 21975                        ;				while (ofs > bcs)
 21976                        	.line	5115
 21977                        L10508:
 21978 08:57B9: A5 17        	lda	<L885+bcs_1
 21979 08:57BB: C5 2A        	cmp	<L884+ofs_0
 21980 08:57BD: A5 19        	lda	<L885+bcs_1+2
 21981 08:57BF: E5 2C        	sbc	<L884+ofs_0+2
 21982 08:57C1: 90 03        	bcc	L903
 21983 08:57C3: 82 21 01     	brl	L10509
 21984                        L903:
 21985                        ;				{ /* Cluster following l
                    oop */
 21986                        	.line	5116
 21987                        ;					ofs -= bcs;
 21988                        	.line	5117
  Mon Aug  9 2021 16:52                                                Page 418


 21989 08:57C6: 38           	sec
 21990 08:57C7: A5 2A        	lda	<L884+ofs_0
 21991 08:57C9: E5 17        	sbc	<L885+bcs_1
 21992 08:57CB: 85 2A        	sta	<L884+ofs_0
 21993 08:57CD: A5 2C        	lda	<L884+ofs_0+2
 21994 08:57CF: E5 19        	sbc	<L885+bcs_1+2
 21995 08:57D1: 85 2C        	sta	<L884+ofs_0+2
 21996                        ;					fp->fptr += bcs;
 21997                        	.line	5118
 21998 08:57D3: 18           	clc
 21999 08:57D4: A9 12 00     	lda	#$12
 22000 08:57D7: 65 26        	adc	<L884+fp_0
 22001 08:57D9: 85 01        	sta	<R0
 22002 08:57DB: A9 00 00     	lda	#$0
 22003 08:57DE: 65 28        	adc	<L884+fp_0+2
 22004 08:57E0: 85 03        	sta	<R0+2
 22005 08:57E2: 18           	clc
 22006 08:57E3: A7 01        	lda	[<R0]
 22007 08:57E5: 65 17        	adc	<L885+bcs_1
 22008 08:57E7: 87 01        	sta	[<R0]
 22009 08:57E9: A0 02 00     	ldy	#$2
 22010 08:57EC: B7 01        	lda	[<R0],Y
 22011 08:57EE: 65 19        	adc	<L885+bcs_1+2
 22012 08:57F0: A0 02 00     	ldy	#$2
 22013 08:57F3: 97 01        	sta	[<R0],Y
 22014                        ;#if !FF_FS_READONLY
 22015                        ;					if (fp->flag & F
                    A_WRITE)
 22016                        	.line	5120
 22017                        ;					{ /* Check if in
                     write mode or not */
 22018 08:57F5: E2 20        	sep	#$20
 22019                        	longa	off
 22020 08:57F7: A0 10 00     	ldy	#$10
 22021 08:57FA: B7 26        	lda	[<L884+fp_0],Y
 22022 08:57FC: 29 02        	and	#<$2
 22023 08:57FE: C2 20        	rep	#$20
 22024                        	longa	on
 22025 08:5800: D0 03        	bne	L904
 22026 08:5802: 82 6C 00     	brl	L10510
 22027                        L904:
 22028                        	.line	5121
 22029                        ;						if (FF_F
                    S_EXFAT && fp->fptr > fp->obj.objsize)
 22030                        	.line	5122
 22031                        ;						{ /* No 
                    FAT chain object needs correct objsize to generate FAT value
                     */
 22032 08:5805: 82 46 00     	brl	L10511
 22033 08:5808: A0 0C 00     	ldy	#$c
 22034 08:580B: B7 26        	lda	[<L884+fp_0],Y
 22035 08:580D: A0 12 00     	ldy	#$12
 22036 08:5810: D7 26        	cmp	[<L884+fp_0],Y
 22037 08:5812: A0 0E 00     	ldy	#$e
 22038 08:5815: B7 26        	lda	[<L884+fp_0],Y
 22039 08:5817: A0 14 00     	ldy	#$14
 22040 08:581A: F7 26        	sbc	[<L884+fp_0],Y
 22041 08:581C: 90 03        	bcc	L905
  Mon Aug  9 2021 16:52                                                Page 419


 22042 08:581E: 82 2D 00     	brl	L10511
 22043                        L905:
 22044                        	.line	5123
 22045                        ;							
                    fp->obj.objsize = fp->fptr;
 22046                        	.line	5124
 22047 08:5821: A0 12 00     	ldy	#$12
 22048 08:5824: B7 26        	lda	[<L884+fp_0],Y
 22049 08:5826: A0 0C 00     	ldy	#$c
 22050 08:5829: 97 26        	sta	[<L884+fp_0],Y
 22051 08:582B: A0 14 00     	ldy	#$14
 22052 08:582E: B7 26        	lda	[<L884+fp_0],Y
 22053 08:5830: A0 0E 00     	ldy	#$e
 22054 08:5833: 97 26        	sta	[<L884+fp_0],Y
 22055                        ;							
                    fp->flag |= FA_MODIFIED;
 22056                        	.line	5125
 22057 08:5835: 18           	clc
 22058 08:5836: A9 10 00     	lda	#$10
 22059 08:5839: 65 26        	adc	<L884+fp_0
 22060 08:583B: 85 01        	sta	<R0
 22061 08:583D: A9 00 00     	lda	#$0
 22062 08:5840: 65 28        	adc	<L884+fp_0+2
 22063 08:5842: 85 03        	sta	<R0+2
 22064 08:5844: E2 20        	sep	#$20
 22065                        	longa	off
 22066 08:5846: A7 01        	lda	[<R0]
 22067 08:5848: 09 40        	ora	#<$40
 22068 08:584A: 87 01        	sta	[<R0]
 22069 08:584C: C2 20        	rep	#$20
 22070                        	longa	on
 22071                        ;						}
 22072                        	.line	5126
 22073                        ;						clst = c
                    reate_chain(&fp->obj, clst); /* Follow chain with forceed st
                    retch */
 22074                        L10511:
 22075                        	.line	5127
 22076 08:584E: D4 15        	pei	<L885+clst_1+2
 22077 08:5850: D4 13        	pei	<L885+clst_1
 22078 08:5852: D4 28        	pei	<L884+fp_0+2
 22079 08:5854: D4 26        	pei	<L884+fp_0
 22080 08:5856: 22 69 12 08  	jsl	~~create_chain
 22081 08:585A: 85 13        	sta	<L885+clst_1
 22082 08:585C: 86 15        	stx	<L885+clst_1+2
 22083                        ;						if (clst
                     == 0)
 22084                        	.line	5128
 22085                        ;						{ /* Cli
                    p file size in case of disk full */
 22086 08:585E: A5 13        	lda	<L885+clst_1
 22087 08:5860: 05 15        	ora	<L885+clst_1+2
 22088 08:5862: F0 03        	beq	L906
 22089 08:5864: 82 07 00     	brl	L10512
 22090                        L906:
 22091                        	.line	5129
 22092                        ;							
                    ofs = 0;
  Mon Aug  9 2021 16:52                                                Page 420


 22093                        	.line	5130
 22094 08:5867: 64 2A        	stz	<L884+ofs_0
 22095 08:5869: 64 2C        	stz	<L884+ofs_0+2
 22096                        ;							
                    break;
 22097                        	.line	5131
 22098 08:586B: 82 79 00     	brl	L10509
 22099                        ;						}
 22100                        	.line	5132
 22101                        ;					}
 22102                        L10512:
 22103                        	.line	5133
 22104                        ;					else
 22105 08:586E: 82 10 00     	brl	L10513
 22106                        L10510:
 22107                        ;#endif
 22108                        ;					{
 22109                        	.line	5136
 22110                        ;						clst = g
                    et_fat(&fp->obj, clst); /* Follow cluster chain if not in wr
                    ite mode */
 22111                        	.line	5137
 22112 08:5871: D4 15        	pei	<L885+clst_1+2
 22113 08:5873: D4 13        	pei	<L885+clst_1
 22114 08:5875: D4 28        	pei	<L884+fp_0+2
 22115 08:5877: D4 26        	pei	<L884+fp_0
 22116 08:5879: 22 2A 0B 08  	jsl	~~get_fat
 22117 08:587D: 85 13        	sta	<L885+clst_1
 22118 08:587F: 86 15        	stx	<L885+clst_1+2
 22119                        ;					}
 22120                        	.line	5138
 22121                        L10513:
 22122                        ;					if (clst == 0xFF
                    FFFFFF)
 22123                        	.line	5139
 22124                        ;						ABORT(fs
                    , FR_DISK_ERR);
 22125 08:5881: A5 13        	lda	<L885+clst_1
 22126 08:5883: C9 FF FF     	cmp	#<$ffffffff
 22127 08:5886: D0 05        	bne	L907
 22128 08:5888: A5 15        	lda	<L885+clst_1+2
 22129 08:588A: C9 FF FF     	cmp	#^$ffffffff
 22130                        L907:
 22131 08:588D: F0 03        	beq	L908
 22132 08:588F: 82 11 00     	brl	L10514
 22133                        L908:
 22134                        	.line	5140
 22135                        	.line	5140
 22136 08:5892: E2 20        	sep	#$20
 22137                        	longa	off
 22138 08:5894: A9 01        	lda	#$1
 22139 08:5896: A0 11 00     	ldy	#$11
 22140 08:5899: 97 26        	sta	[<L884+fp_0],Y
 22141 08:589B: C2 20        	rep	#$20
 22142                        	longa	on
 22143                        	.line	5140
 22144 08:589D: A9 01 00     	lda	#$1
 22145 08:58A0: 82 2A FD     	brl	L889
  Mon Aug  9 2021 16:52                                                Page 421


 22146                        	.line	5140
 22147                        L10514:
 22148                        	.line	5140
 22149                        ;					if (clst <= 1 ||
                     clst >= fs->n_fatent)
 22150                        	.line	5141
 22151                        ;						ABORT(fs
                    , FR_INT_ERR);
 22152 08:58A3: A9 01 00     	lda	#$1
 22153 08:58A6: C5 13        	cmp	<L885+clst_1
 22154 08:58A8: A9 00 00     	lda	#$0
 22155 08:58AB: E5 15        	sbc	<L885+clst_1+2
 22156 08:58AD: 90 03        	bcc	L910
 22157 08:58AF: 82 13 00     	brl	L909
 22158                        L910:
 22159 08:58B2: A5 13        	lda	<L885+clst_1
 22160 08:58B4: A0 17 00     	ldy	#$17
 22161 08:58B7: D7 0F        	cmp	[<L885+fs_1],Y
 22162 08:58B9: A5 15        	lda	<L885+clst_1+2
 22163 08:58BB: A0 19 00     	ldy	#$19
 22164 08:58BE: F7 0F        	sbc	[<L885+fs_1],Y
 22165 08:58C0: B0 03        	bcs	L911
 22166 08:58C2: 82 11 00     	brl	L10515
 22167                        L911:
 22168                        L909:
 22169                        	.line	5142
 22170                        	.line	5142
 22171 08:58C5: E2 20        	sep	#$20
 22172                        	longa	off
 22173 08:58C7: A9 02        	lda	#$2
 22174 08:58C9: A0 11 00     	ldy	#$11
 22175 08:58CC: 97 26        	sta	[<L884+fp_0],Y
 22176 08:58CE: C2 20        	rep	#$20
 22177                        	longa	on
 22178                        	.line	5142
 22179 08:58D0: A9 02 00     	lda	#$2
 22180 08:58D3: 82 F7 FC     	brl	L889
 22181                        	.line	5142
 22182                        L10515:
 22183                        	.line	5142
 22184                        ;					fp->clust = clst
                    ;
 22185                        	.line	5143
 22186 08:58D6: A5 13        	lda	<L885+clst_1
 22187 08:58D8: A0 16 00     	ldy	#$16
 22188 08:58DB: 97 26        	sta	[<L884+fp_0],Y
 22189 08:58DD: A5 15        	lda	<L885+clst_1+2
 22190 08:58DF: A0 18 00     	ldy	#$18
 22191 08:58E2: 97 26        	sta	[<L884+fp_0],Y
 22192                        ;				}
 22193                        	.line	5144
 22194 08:58E4: 82 D2 FE     	brl	L10508
 22195                        L10509:
 22196                        ;				fp->fptr += ofs;
 22197                        	.line	5145
 22198 08:58E7: 18           	clc
 22199 08:58E8: A9 12 00     	lda	#$12
 22200 08:58EB: 65 26        	adc	<L884+fp_0
  Mon Aug  9 2021 16:52                                                Page 422


 22201 08:58ED: 85 01        	sta	<R0
 22202 08:58EF: A9 00 00     	lda	#$0
 22203 08:58F2: 65 28        	adc	<L884+fp_0+2
 22204 08:58F4: 85 03        	sta	<R0+2
 22205 08:58F6: 18           	clc
 22206 08:58F7: A7 01        	lda	[<R0]
 22207 08:58F9: 65 2A        	adc	<L884+ofs_0
 22208 08:58FB: 87 01        	sta	[<R0]
 22209 08:58FD: A0 02 00     	ldy	#$2
 22210 08:5900: B7 01        	lda	[<R0],Y
 22211 08:5902: 65 2C        	adc	<L884+ofs_0+2
 22212 08:5904: A0 02 00     	ldy	#$2
 22213 08:5907: 97 01        	sta	[<R0],Y
 22214                        ;				if (ofs % SS(fs))
 22215                        	.line	5146
 22216                        ;				{
 22217 08:5909: A5 2A        	lda	<L884+ofs_0
 22218 08:590B: 29 FF 01     	and	#<$1ff
 22219 08:590E: D0 03        	bne	L912
 22220 08:5910: 82 46 00     	brl	L10516
 22221                        L912:
 22222                        	.line	5147
 22223                        ;					nsect = clst2sec
                    t(fs, clst); /* Current sector */
 22224                        	.line	5148
 22225 08:5913: D4 15        	pei	<L885+clst_1+2
 22226 08:5915: D4 13        	pei	<L885+clst_1
 22227 08:5917: D4 11        	pei	<L885+fs_1+2
 22228 08:5919: D4 0F        	pei	<L885+fs_1
 22229 08:591B: 22 9B 0A 08  	jsl	~~clst2sect
 22230 08:591F: 85 1B        	sta	<L885+nsect_1
 22231 08:5921: 86 1D        	stx	<L885+nsect_1+2
 22232                        ;					if (nsect == 0)
 22233                        	.line	5149
 22234                        ;						ABORT(fs
                    , FR_INT_ERR);
 22235 08:5923: A5 1B        	lda	<L885+nsect_1
 22236 08:5925: 05 1D        	ora	<L885+nsect_1+2
 22237 08:5927: F0 03        	beq	L913
 22238 08:5929: 82 11 00     	brl	L10517
 22239                        L913:
 22240                        	.line	5150
 22241                        	.line	5150
 22242 08:592C: E2 20        	sep	#$20
 22243                        	longa	off
 22244 08:592E: A9 02        	lda	#$2
 22245 08:5930: A0 11 00     	ldy	#$11
 22246 08:5933: 97 26        	sta	[<L884+fp_0],Y
 22247 08:5935: C2 20        	rep	#$20
 22248                        	longa	on
 22249                        	.line	5150
 22250 08:5937: A9 02 00     	lda	#$2
 22251 08:593A: 82 90 FC     	brl	L889
 22252                        	.line	5150
 22253                        L10517:
 22254                        	.line	5150
 22255                        ;					nsect += (DWORD)
                     (ofs / SS(fs));
  Mon Aug  9 2021 16:52                                                Page 423


 22256                        	.line	5151
 22257 08:593D: D4 2C        	pei	<L884+ofs_0+2
 22258 08:593F: D4 2A        	pei	<L884+ofs_0
 22259 08:5941: A9 09 00     	lda	#$9
 22260                        	xref	~~~llsr
 22261 08:5944: 22 xx xx xx  	jsl	~~~llsr
 22262 08:5948: 85 01        	sta	<R0
 22263 08:594A: 86 03        	stx	<R0+2
 22264 08:594C: 18           	clc
 22265 08:594D: A5 01        	lda	<R0
 22266 08:594F: 65 1B        	adc	<L885+nsect_1
 22267 08:5951: 85 1B        	sta	<L885+nsect_1
 22268 08:5953: A5 03        	lda	<R0+2
 22269 08:5955: 65 1D        	adc	<L885+nsect_1+2
 22270 08:5957: 85 1D        	sta	<L885+nsect_1+2
 22271                        ;				}
 22272                        	.line	5152
 22273                        ;			}
 22274                        L10516:
 22275                        	.line	5153
 22276                        ;		}
 22277                        L10507:
 22278                        	.line	5154
 22279                        ;		if (!FF_FS_READONLY && fp->fptr > fp->ob
                    j.objsize)
 22280                        L10501:
 22281                        	.line	5155
 22282                        ;		{ /* Set file change flag if the file si
                    ze is extended */
 22283 08:5959: A0 0C 00     	ldy	#$c
 22284 08:595C: B7 26        	lda	[<L884+fp_0],Y
 22285 08:595E: A0 12 00     	ldy	#$12
 22286 08:5961: D7 26        	cmp	[<L884+fp_0],Y
 22287 08:5963: A0 0E 00     	ldy	#$e
 22288 08:5966: B7 26        	lda	[<L884+fp_0],Y
 22289 08:5968: A0 14 00     	ldy	#$14
 22290 08:596B: F7 26        	sbc	[<L884+fp_0],Y
 22291 08:596D: 90 03        	bcc	L914
 22292 08:596F: 82 2D 00     	brl	L10518
 22293                        L914:
 22294                        	.line	5156
 22295                        ;			fp->obj.objsize = fp->fptr;
 22296                        	.line	5157
 22297 08:5972: A0 12 00     	ldy	#$12
 22298 08:5975: B7 26        	lda	[<L884+fp_0],Y
 22299 08:5977: A0 0C 00     	ldy	#$c
 22300 08:597A: 97 26        	sta	[<L884+fp_0],Y
 22301 08:597C: A0 14 00     	ldy	#$14
 22302 08:597F: B7 26        	lda	[<L884+fp_0],Y
 22303 08:5981: A0 0E 00     	ldy	#$e
 22304 08:5984: 97 26        	sta	[<L884+fp_0],Y
 22305                        ;			fp->flag |= FA_MODIFIED;
 22306                        	.line	5158
 22307 08:5986: 18           	clc
 22308 08:5987: A9 10 00     	lda	#$10
 22309 08:598A: 65 26        	adc	<L884+fp_0
 22310 08:598C: 85 01        	sta	<R0
 22311 08:598E: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 424


 22312 08:5991: 65 28        	adc	<L884+fp_0+2
 22313 08:5993: 85 03        	sta	<R0+2
 22314 08:5995: E2 20        	sep	#$20
 22315                        	longa	off
 22316 08:5997: A7 01        	lda	[<R0]
 22317 08:5999: 09 40        	ora	#<$40
 22318 08:599B: 87 01        	sta	[<R0]
 22319 08:599D: C2 20        	rep	#$20
 22320                        	longa	on
 22321                        ;		}
 22322                        	.line	5159
 22323                        ;		if (fp->fptr % SS(fs) && nsect != fp->se
                    ct)
 22324                        L10518:
 22325                        	.line	5160
 22326                        ;		{ /* Fill sector cache if needed */
 22327 08:599F: A0 12 00     	ldy	#$12
 22328 08:59A2: B7 26        	lda	[<L884+fp_0],Y
 22329 08:59A4: 29 FF 01     	and	#<$1ff
 22330 08:59A7: D0 03        	bne	L915
 22331 08:59A9: 82 CA 00     	brl	L10519
 22332                        L915:
 22333 08:59AC: A5 1B        	lda	<L885+nsect_1
 22334 08:59AE: A0 1A 00     	ldy	#$1a
 22335 08:59B1: D7 26        	cmp	[<L884+fp_0],Y
 22336 08:59B3: D0 07        	bne	L916
 22337 08:59B5: A5 1D        	lda	<L885+nsect_1+2
 22338 08:59B7: A0 1C 00     	ldy	#$1c
 22339 08:59BA: D7 26        	cmp	[<L884+fp_0],Y
 22340                        L916:
 22341 08:59BC: D0 03        	bne	L917
 22342 08:59BE: 82 B5 00     	brl	L10519
 22343                        L917:
 22344                        	.line	5161
 22345                        ;#if !FF_FS_TINY
 22346                        ;#if !FF_FS_READONLY
 22347                        ;			if (fp->flag & FA_DIRTY)
 22348                        	.line	5164
 22349                        ;			{ /* Write-back dirty sector cac
                    he */
 22350 08:59C1: E2 20        	sep	#$20
 22351                        	longa	off
 22352 08:59C3: A0 10 00     	ldy	#$10
 22353 08:59C6: B7 26        	lda	[<L884+fp_0],Y
 22354 08:59C8: 29 80        	and	#<$80
 22355 08:59CA: C2 20        	rep	#$20
 22356                        	longa	on
 22357 08:59CC: D0 03        	bne	L918
 22358 08:59CE: 82 5C 00     	brl	L10520
 22359                        L918:
 22360                        	.line	5165
 22361                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK)
 22362                        	.line	5166
 22363                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 22364 08:59D1: F4 01 00     	pea	#<$1
 22365 08:59D4: A0 1C 00     	ldy	#$1c
  Mon Aug  9 2021 16:52                                                Page 425


 22366 08:59D7: B7 26        	lda	[<L884+fp_0],Y
 22367 08:59D9: 48           	pha
 22368 08:59DA: A0 1A 00     	ldy	#$1a
 22369 08:59DD: B7 26        	lda	[<L884+fp_0],Y
 22370 08:59DF: 48           	pha
 22371 08:59E0: 18           	clc
 22372 08:59E1: A9 26 00     	lda	#$26
 22373 08:59E4: 65 26        	adc	<L884+fp_0
 22374 08:59E6: 85 01        	sta	<R0
 22375 08:59E8: A9 00 00     	lda	#$0
 22376 08:59EB: 65 28        	adc	<L884+fp_0+2
 22377 08:59ED: 85 03        	sta	<R0+2
 22378 08:59EF: D4 03        	pei	<R0+2
 22379 08:59F1: D4 01        	pei	<R0
 22380 08:59F3: A0 01 00     	ldy	#$1
 22381 08:59F6: B7 0F        	lda	[<L885+fs_1],Y
 22382 08:59F8: 48           	pha
 22383 08:59F9: 22 xx xx xx  	jsl	~~disk_write
 22384 08:59FD: AA           	tax
 22385 08:59FE: D0 03        	bne	L919
 22386 08:5A00: 82 11 00     	brl	L10521
 22387                        L919:
 22388                        	.line	5167
 22389                        	.line	5167
 22390 08:5A03: E2 20        	sep	#$20
 22391                        	longa	off
 22392 08:5A05: A9 01        	lda	#$1
 22393 08:5A07: A0 11 00     	ldy	#$11
 22394 08:5A0A: 97 26        	sta	[<L884+fp_0],Y
 22395 08:5A0C: C2 20        	rep	#$20
 22396                        	longa	on
 22397                        	.line	5167
 22398 08:5A0E: A9 01 00     	lda	#$1
 22399 08:5A11: 82 B9 FB     	brl	L889
 22400                        	.line	5167
 22401                        L10521:
 22402                        	.line	5167
 22403                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 22404                        	.line	5168
 22405 08:5A14: 18           	clc
 22406 08:5A15: A9 10 00     	lda	#$10
 22407 08:5A18: 65 26        	adc	<L884+fp_0
 22408 08:5A1A: 85 01        	sta	<R0
 22409 08:5A1C: A9 00 00     	lda	#$0
 22410 08:5A1F: 65 28        	adc	<L884+fp_0+2
 22411 08:5A21: 85 03        	sta	<R0+2
 22412 08:5A23: E2 20        	sep	#$20
 22413                        	longa	off
 22414 08:5A25: A7 01        	lda	[<R0]
 22415 08:5A27: 29 7F        	and	#<$7f
 22416 08:5A29: 87 01        	sta	[<R0]
 22417 08:5A2B: C2 20        	rep	#$20
 22418                        	longa	on
 22419                        ;			}
 22420                        	.line	5169
 22421                        ;#endif
 22422                        ;			if (disk_read(fs->pdrv, fp->buf,
  Mon Aug  9 2021 16:52                                                Page 426


                     nsect, 1) != RES_OK)
 22423                        L10520:
 22424                        	.line	5171
 22425                        ;				ABORT(fs, FR_DISK_ERR); 
                    /* Fill sector cache */
 22426 08:5A2D: F4 01 00     	pea	#<$1
 22427 08:5A30: D4 1D        	pei	<L885+nsect_1+2
 22428 08:5A32: D4 1B        	pei	<L885+nsect_1
 22429 08:5A34: 18           	clc
 22430 08:5A35: A9 26 00     	lda	#$26
 22431 08:5A38: 65 26        	adc	<L884+fp_0
 22432 08:5A3A: 85 01        	sta	<R0
 22433 08:5A3C: A9 00 00     	lda	#$0
 22434 08:5A3F: 65 28        	adc	<L884+fp_0+2
 22435 08:5A41: 85 03        	sta	<R0+2
 22436 08:5A43: D4 03        	pei	<R0+2
 22437 08:5A45: D4 01        	pei	<R0
 22438 08:5A47: A0 01 00     	ldy	#$1
 22439 08:5A4A: B7 0F        	lda	[<L885+fs_1],Y
 22440 08:5A4C: 48           	pha
 22441 08:5A4D: 22 xx xx xx  	jsl	~~disk_read
 22442 08:5A51: AA           	tax
 22443 08:5A52: D0 03        	bne	L920
 22444 08:5A54: 82 11 00     	brl	L10522
 22445                        L920:
 22446                        	.line	5172
 22447                        	.line	5172
 22448 08:5A57: E2 20        	sep	#$20
 22449                        	longa	off
 22450 08:5A59: A9 01        	lda	#$1
 22451 08:5A5B: A0 11 00     	ldy	#$11
 22452 08:5A5E: 97 26        	sta	[<L884+fp_0],Y
 22453 08:5A60: C2 20        	rep	#$20
 22454                        	longa	on
 22455                        	.line	5172
 22456 08:5A62: A9 01 00     	lda	#$1
 22457 08:5A65: 82 65 FB     	brl	L889
 22458                        	.line	5172
 22459                        L10522:
 22460                        	.line	5172
 22461                        ;#endif
 22462                        ;			fp->sect = nsect;
 22463                        	.line	5174
 22464 08:5A68: A5 1B        	lda	<L885+nsect_1
 22465 08:5A6A: A0 1A 00     	ldy	#$1a
 22466 08:5A6D: 97 26        	sta	[<L884+fp_0],Y
 22467 08:5A6F: A5 1D        	lda	<L885+nsect_1+2
 22468 08:5A71: A0 1C 00     	ldy	#$1c
 22469 08:5A74: 97 26        	sta	[<L884+fp_0],Y
 22470                        ;		}
 22471                        	.line	5175
 22472                        ;	}
 22473                        L10519:
 22474                        	.line	5176
 22475                        ;
 22476                        ;	LEAVE_FF(fs, res);
 22477                        	.line	5178
 22478 08:5A76: A5 0D        	lda	<L885+res_1
  Mon Aug  9 2021 16:52                                                Page 427


 22479 08:5A78: 82 52 FB     	brl	L889
 22480                        ;}
 22481                        	.line	5179
 22482                        	.endblock	5179
 22483             00000022   L884	equ	34
 22484             0000000D   L885	equ	13
 22485 08:5A7B:              	ends
 22486                        	efunc
 22487                        	.endfunc	5179,13,34
 22488                        	.line	5179
 22489                        ;
 22490                        ;#if FF_FS_MINIMIZE <= 1
 22491                        ;/*-----------------------------------------------
                    ------------------------*/
 22492                        ;/* Create a Directory Object                     
                                            */
 22493                        ;/*-----------------------------------------------
                    ------------------------*/
 22494                        ;
 22495                        ;FRESULT f_opendir(DIR* dp, /* Pointer to director
                    y object to create */
 22496                        ;const TCHAR* path /* Pointer to the directory pat
                    h */
 22497                        ;)
 22498                        ;{
 22499                        	.line	5186
 22500                        	.line	5189
 22501                        	FFDOS
 22502                        	xdef	~~f_opendir
 22503                        	func
 22504                        	.function	5189
 22505                        ~~f_opendir:
 22506                        	longa	on
 22507                        	longi	on
 22508 08:5A7B: 3B           	tsc
 22509 08:5A7C: 38           	sec
 22510 08:5A7D: E9 0E 00     	sbc	#L921
 22511 08:5A80: 1B           	tcs
 22512 08:5A81: 0B           	phd
 22513 08:5A82: 5B           	tcd
 22514             00000004   dp_0	set	4
 22515             00000008   path_0	set	8
 22516                        	.block	5189
 22517                        ;	FRESULT res;
 22518                        ;	FATFS *fs;
 22519                        ;	DEF_NAMBUF
 22520                        ;
 22521                        ;	if (!dp)
 22522             00000000   res_1	set	0
 22523             00000002   fs_1	set	2
 22524             00000006   lfn_1	set	6
 22525                        	.sym	res,0,5,1,16
 22526                        	.sym	fs,2,138,1,32,75
 22527                        	.sym	lfn,6,144,1,32
 22528                        	.sym	dp,4,138,6,32,78
 22529                        	.sym	path,8,142,6,32
 22530                        	.line	5194
 22531                        ;		return FR_INVALID_OBJECT;
  Mon Aug  9 2021 16:52                                                Page 428


 22532 08:5A83: A5 12        	lda	<L921+dp_0
 22533 08:5A85: 05 14        	ora	<L921+dp_0+2
 22534 08:5A87: F0 03        	beq	L924
 22535 08:5A89: 82 15 00     	brl	L10523
 22536                        L924:
 22537                        	.line	5195
 22538 08:5A8C: A9 09 00     	lda	#$9
 22539                        L925:
 22540 08:5A8F: A8           	tay
 22541 08:5A90: A5 10        	lda	<L921+2
 22542 08:5A92: 85 18        	sta	<L921+2+8
 22543 08:5A94: A5 0F        	lda	<L921+1
 22544 08:5A96: 85 17        	sta	<L921+1+8
 22545 08:5A98: 2B           	pld
 22546 08:5A99: 3B           	tsc
 22547 08:5A9A: 18           	clc
 22548 08:5A9B: 69 16 00     	adc	#L921+8
 22549 08:5A9E: 1B           	tcs
 22550 08:5A9F: 98           	tya
 22551 08:5AA0: 6B           	rtl
 22552                        ;
 22553                        ;	//k_debug_string("f_opendir::f_opendir\r\n");
 22554                        ;
 22555                        ;	/* Get logical drive */
 22556                        ;	res = mount_volume(&path, &fs, 0);
 22557                        L10523:
 22558                        	.line	5200
 22559 08:5AA1: F4 00 00     	pea	#<$0
 22560 08:5AA4: F4 00 00     	pea	#0
 22561 08:5AA7: 18           	clc
 22562 08:5AA8: 7B           	tdc
 22563 08:5AA9: 69 07 00     	adc	#<L922+fs_1
 22564 08:5AAC: 48           	pha
 22565 08:5AAD: F4 00 00     	pea	#0
 22566 08:5AB0: 18           	clc
 22567 08:5AB1: 7B           	tdc
 22568 08:5AB2: 69 16 00     	adc	#<L921+path_0
 22569 08:5AB5: 48           	pha
 22570 08:5AB6: 22 84 3D 08  	jsl	~~mount_volume
 22571 08:5ABA: 85 05        	sta	<L922+res_1
 22572                        ;	if (res == FR_OK)
 22573                        	.line	5201
 22574                        ;	{
 22575 08:5ABC: A5 05        	lda	<L922+res_1
 22576 08:5ABE: F0 03        	beq	L926
 22577 08:5AC0: 82 CE 00     	brl	L10524
 22578                        L926:
 22579                        	.line	5202
 22580                        ;		dp->obj.fs = fs;
 22581                        	.line	5203
 22582 08:5AC3: A5 07        	lda	<L922+fs_1
 22583 08:5AC5: 87 12        	sta	[<L921+dp_0]
 22584 08:5AC7: A5 09        	lda	<L922+fs_1+2
 22585 08:5AC9: A0 02 00     	ldy	#$2
 22586 08:5ACC: 97 12        	sta	[<L921+dp_0],Y
 22587                        ;		INIT_NAMBUF(fs);
 22588                        	.line	5204
 22589                        	.line	5204
  Mon Aug  9 2021 16:52                                                Page 429


 22590 08:5ACE: F4 00 02     	pea	#<$200
 22591 08:5AD1: 22 40 92 08  	jsl	~~ff_memalloc
 22592 08:5AD5: 85 0B        	sta	<L922+lfn_1
 22593 08:5AD7: 86 0D        	stx	<L922+lfn_1+2
 22594                        	.line	5204
 22595 08:5AD9: A5 0B        	lda	<L922+lfn_1
 22596 08:5ADB: 05 0D        	ora	<L922+lfn_1+2
 22597 08:5ADD: F0 03        	beq	L927
 22598 08:5ADF: 82 06 00     	brl	L10525
 22599                        L927:
 22600                        	.line	5204
 22601 08:5AE2: A9 11 00     	lda	#$11
 22602 08:5AE5: 82 A7 FF     	brl	L925
 22603                        L10525:
 22604                        	.line	5204
 22605 08:5AE8: A5 0B        	lda	<L922+lfn_1
 22606 08:5AEA: A0 0B 00     	ldy	#$b
 22607 08:5AED: 97 07        	sta	[<L922+fs_1],Y
 22608 08:5AEF: A5 0D        	lda	<L922+lfn_1+2
 22609 08:5AF1: A0 0D 00     	ldy	#$d
 22610 08:5AF4: 97 07        	sta	[<L922+fs_1],Y
 22611                        	.line	5204
 22612                        	.line	5204
 22613                        ;		res = follow_path(dp, path); /* Follow t
                    he path to the directory */
 22614                        	.line	5205
 22615 08:5AF6: D4 18        	pei	<L921+path_0+2
 22616 08:5AF8: D4 16        	pei	<L921+path_0
 22617 08:5AFA: D4 14        	pei	<L921+dp_0+2
 22618 08:5AFC: D4 12        	pei	<L921+dp_0
 22619 08:5AFE: 22 01 37 08  	jsl	~~follow_path
 22620 08:5B02: 85 05        	sta	<L922+res_1
 22621                        ;		if (res == FR_OK)
 22622                        	.line	5206
 22623                        ;		{ /* Follow completed */
 22624 08:5B04: A5 05        	lda	<L922+res_1
 22625 08:5B06: F0 03        	beq	L928
 22626 08:5B08: 82 6F 00     	brl	L10526
 22627                        L928:
 22628                        	.line	5207
 22629                        ;			if (!(dp->fn[NSFLAG] & NS_NONAME
                    ))
 22630                        	.line	5208
 22631                        ;			{ /* It is not the origin direct
                    ory itself */
 22632 08:5B0B: E2 20        	sep	#$20
 22633                        	longa	off
 22634 08:5B0D: A0 2B 00     	ldy	#$2b
 22635 08:5B10: B7 12        	lda	[<L921+dp_0],Y
 22636 08:5B12: 29 80        	and	#<$80
 22637 08:5B14: C2 20        	rep	#$20
 22638                        	longa	on
 22639 08:5B16: F0 03        	beq	L929
 22640 08:5B18: 82 3E 00     	brl	L10527
 22641                        L929:
 22642                        	.line	5209
 22643                        ;				if (dp->obj.attr & AM_DI
                    R)
  Mon Aug  9 2021 16:52                                                Page 430


 22644                        	.line	5210
 22645                        ;				{ /* This object is a su
                    b-directory */
 22646 08:5B1B: E2 20        	sep	#$20
 22647                        	longa	off
 22648 08:5B1D: A0 06 00     	ldy	#$6
 22649 08:5B20: B7 12        	lda	[<L921+dp_0],Y
 22650 08:5B22: 29 10        	and	#<$10
 22651 08:5B24: C2 20        	rep	#$20
 22652                        	longa	on
 22653 08:5B26: D0 03        	bne	L930
 22654 08:5B28: 82 29 00     	brl	L10528
 22655                        L930:
 22656                        	.line	5211
 22657                        ;#if FF_FS_EXFAT
 22658                        ;					if (fs->fs_type 
                    == FS_EXFAT)
 22659                        ;					{
 22660                        ;						dp->obj.
                    c_scl = dp->obj.sclust; /* Get containing directory inforama
                    tion */
 22661                        ;						dp->obj.
                    c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.sta
                    t;
 22662                        ;						dp->obj.
                    c_ofs = dp->blk_ofs;
 22663                        ;						init_all
                    oc_info(fs, &dp->obj); /* Get object allocation info */
 22664                        ;					}
 22665                        ;					else
 22666                        ;#endif
 22667                        ;					{
 22668                        	.line	5222
 22669                        ;						dp->obj.
                    sclust = ld_clust(fs, dp->dir); /* Get object allocation inf
                    o */
 22670                        	.line	5223
 22671 08:5B2B: A0 1E 00     	ldy	#$1e
 22672 08:5B2E: B7 12        	lda	[<L921+dp_0],Y
 22673 08:5B30: 48           	pha
 22674 08:5B31: A0 1C 00     	ldy	#$1c
 22675 08:5B34: B7 12        	lda	[<L921+dp_0],Y
 22676 08:5B36: 48           	pha
 22677 08:5B37: D4 09        	pei	<L922+fs_1+2
 22678 08:5B39: D4 07        	pei	<L922+fs_1
 22679 08:5B3B: 22 EC 1C 08  	jsl	~~ld_clust
 22680 08:5B3F: 85 01        	sta	<R0
 22681 08:5B41: 86 03        	stx	<R0+2
 22682 08:5B43: A5 01        	lda	<R0
 22683 08:5B45: A0 08 00     	ldy	#$8
 22684 08:5B48: 97 12        	sta	[<L921+dp_0],Y
 22685 08:5B4A: A5 03        	lda	<R0+2
 22686 08:5B4C: A0 0A 00     	ldy	#$a
 22687 08:5B4F: 97 12        	sta	[<L921+dp_0],Y
 22688                        ;					}
 22689                        	.line	5224
 22690                        ;				}
 22691                        	.line	5225
  Mon Aug  9 2021 16:52                                                Page 431


 22692                        ;				else
 22693 08:5B51: 82 05 00     	brl	L10529
 22694                        L10528:
 22695                        ;				{ /* This object is a fi
                    le */
 22696                        	.line	5227
 22697                        ;					res = FR_NO_PATH
                    ;
 22698                        	.line	5228
 22699 08:5B54: A9 05 00     	lda	#$5
 22700 08:5B57: 85 05        	sta	<L922+res_1
 22701                        ;				}
 22702                        	.line	5229
 22703                        L10529:
 22704                        ;			}
 22705                        	.line	5230
 22706                        ;			if (res == FR_OK)
 22707                        L10527:
 22708                        	.line	5231
 22709                        ;			{
 22710 08:5B59: A5 05        	lda	<L922+res_1
 22711 08:5B5B: F0 03        	beq	L931
 22712 08:5B5D: 82 1A 00     	brl	L10530
 22713                        L931:
 22714                        	.line	5232
 22715                        ;				dp->obj.id = fs->id;
 22716                        	.line	5233
 22717 08:5B60: A0 05 00     	ldy	#$5
 22718 08:5B63: B7 07        	lda	[<L922+fs_1],Y
 22719 08:5B65: A0 04 00     	ldy	#$4
 22720 08:5B68: 97 12        	sta	[<L921+dp_0],Y
 22721                        ;				res = dir_sdi(dp, 0); /*
                     Rewind directory */
 22722                        	.line	5234
 22723 08:5B6A: F4 00 00     	pea	#^$0
 22724 08:5B6D: F4 00 00     	pea	#<$0
 22725 08:5B70: D4 14        	pei	<L921+dp_0+2
 22726 08:5B72: D4 12        	pei	<L921+dp_0
 22727 08:5B74: 22 36 17 08  	jsl	~~dir_sdi
 22728 08:5B78: 85 05        	sta	<L922+res_1
 22729                        ;#if FF_FS_LOCK != 0
 22730                        ;				if (res == FR_OK)
 22731                        ;				{
 22732                        ;					if (dp->obj.sclu
                    st != 0)
 22733                        ;					{
 22734                        ;						dp->obj.
                    lockid = inc_lock(dp, 0); /* Lock the sub directory */
 22735                        ;						if (!dp-
                    >obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 22736                        ;					}
 22737                        ;					else
 22738                        ;					{
 22739                        ;						dp->obj.
                    lockid = 0; /* Root directory need not to be locked */
 22740                        ;					}
 22741                        ;				}
 22742                        ;#endif
  Mon Aug  9 2021 16:52                                                Page 432


 22743                        ;			}
 22744                        	.line	5249
 22745                        ;		} FREE_NAMBUF();
 22746                        L10530:
 22747                        	.line	5250
 22748                        L10526:
 22749                        	.line	5250
 22750 08:5B7A: D4 0D        	pei	<L922+lfn_1+2
 22751 08:5B7C: D4 0B        	pei	<L922+lfn_1
 22752 08:5B7E: 22 70 92 08  	jsl	~~ff_memfree
 22753                        ;		if (res == FR_NO_FILE)
 22754                        	.line	5251
 22755                        ;			res = FR_NO_PATH;
 22756 08:5B82: A5 05        	lda	<L922+res_1
 22757 08:5B84: C9 04 00     	cmp	#<$4
 22758 08:5B87: F0 03        	beq	L932
 22759 08:5B89: 82 05 00     	brl	L10531
 22760                        L932:
 22761                        	.line	5252
 22762 08:5B8C: A9 05 00     	lda	#$5
 22763 08:5B8F: 85 05        	sta	<L922+res_1
 22764                        ;	}
 22765                        L10531:
 22766                        	.line	5253
 22767                        ;	if (res != FR_OK)
 22768                        L10524:
 22769                        	.line	5254
 22770                        ;		dp->obj.fs = 0; /* Invalidate the direct
                    ory object if function faild */
 22771 08:5B91: A5 05        	lda	<L922+res_1
 22772 08:5B93: D0 03        	bne	L933
 22773 08:5B95: 82 0D 00     	brl	L10532
 22774                        L933:
 22775                        	.line	5255
 22776 08:5B98: A9 00 00     	lda	#$0
 22777 08:5B9B: 87 12        	sta	[<L921+dp_0]
 22778 08:5B9D: A9 00 00     	lda	#$0
 22779 08:5BA0: A0 02 00     	ldy	#$2
 22780 08:5BA3: 97 12        	sta	[<L921+dp_0],Y
 22781                        ;
 22782                        ;	LEAVE_FF(fs, res);
 22783                        L10532:
 22784                        	.line	5257
 22785 08:5BA5: A5 05        	lda	<L922+res_1
 22786 08:5BA7: 82 E5 FE     	brl	L925
 22787                        ;}
 22788                        	.line	5258
 22789                        	.endblock	5258
 22790             0000000E   L921	equ	14
 22791             00000005   L922	equ	5
 22792 08:5BAA:              	ends
 22793                        	efunc
 22794                        	.endfunc	5258,5,14
 22795                        	.line	5258
 22796                        ;
 22797                        ;/*-----------------------------------------------
                    ------------------------*/
 22798                        ;/* Close Directory                               
  Mon Aug  9 2021 16:52                                                Page 433


                                            */
 22799                        ;/*-----------------------------------------------
                    ------------------------*/
 22800                        ;
 22801                        ;FRESULT f_closedir(DIR *dp /* Pointer to the dire
                    ctory object to be closed */
 22802                        ;)
 22803                        ;{
 22804                        	.line	5264
 22805                        	.line	5266
 22806                        	FFDOS
 22807                        	xdef	~~f_closedir
 22808                        	func
 22809                        	.function	5266
 22810                        ~~f_closedir:
 22811                        	longa	on
 22812                        	longi	on
 22813 08:5BAA: 3B           	tsc
 22814 08:5BAB: 38           	sec
 22815 08:5BAC: E9 06 00     	sbc	#L934
 22816 08:5BAF: 1B           	tcs
 22817 08:5BB0: 0B           	phd
 22818 08:5BB1: 5B           	tcd
 22819             00000004   dp_0	set	4
 22820                        	.block	5266
 22821                        ;	FRESULT res;
 22822                        ;	FATFS *fs;
 22823                        ;
 22824                        ;	res = validate(&dp->obj, &fs); /* Check validity
                     of the file object */
 22825             00000000   res_1	set	0
 22826             00000002   fs_1	set	2
 22827                        	.sym	res,0,5,1,16
 22828                        	.sym	fs,2,138,1,32,75
 22829                        	.sym	dp,4,138,6,32,78
 22830                        	.line	5270
 22831 08:5BB2: F4 00 00     	pea	#0
 22832 08:5BB5: 18           	clc
 22833 08:5BB6: 7B           	tdc
 22834 08:5BB7: 69 03 00     	adc	#<L935+fs_1
 22835 08:5BBA: 48           	pha
 22836 08:5BBB: D4 0C        	pei	<L934+dp_0+2
 22837 08:5BBD: D4 0A        	pei	<L934+dp_0
 22838 08:5BBF: 22 57 44 08  	jsl	~~validate
 22839 08:5BC3: 85 01        	sta	<L935+res_1
 22840                        ;	if (res == FR_OK)
 22841                        	.line	5271
 22842                        ;	{
 22843 08:5BC5: A5 01        	lda	<L935+res_1
 22844 08:5BC7: F0 03        	beq	L937
 22845 08:5BC9: 82 0D 00     	brl	L10533
 22846                        L937:
 22847                        	.line	5272
 22848                        ;#if FF_FS_LOCK != 0
 22849                        ;		if (dp->obj.lockid) res = dec_lock(dp->o
                    bj.lockid); /* Decrement sub-directory open counter */
 22850                        ;		if (res == FR_OK) dp->obj.fs = 0; /* Inv
                    alidate directory object */
  Mon Aug  9 2021 16:52                                                Page 434


 22851                        ;#else
 22852                        ;		dp->obj.fs = 0; /* Invalidate directory 
                    object */
 22853                        	.line	5277
 22854 08:5BCC: A9 00 00     	lda	#$0
 22855 08:5BCF: 87 0A        	sta	[<L934+dp_0]
 22856 08:5BD1: A9 00 00     	lda	#$0
 22857 08:5BD4: A0 02 00     	ldy	#$2
 22858 08:5BD7: 97 0A        	sta	[<L934+dp_0],Y
 22859                        ;#endif
 22860                        ;#if FF_FS_REENTRANT
 22861                        ;		unlock_fs(fs, FR_OK); /* Unlock volume *
                    /
 22862                        ;#endif
 22863                        ;	}
 22864                        	.line	5282
 22865                        ;	return res;
 22866                        L10533:
 22867                        	.line	5283
 22868 08:5BD9: A5 01        	lda	<L935+res_1
 22869                        L938:
 22870 08:5BDB: A8           	tay
 22871 08:5BDC: A5 08        	lda	<L934+2
 22872 08:5BDE: 85 0C        	sta	<L934+2+4
 22873 08:5BE0: A5 07        	lda	<L934+1
 22874 08:5BE2: 85 0B        	sta	<L934+1+4
 22875 08:5BE4: 2B           	pld
 22876 08:5BE5: 3B           	tsc
 22877 08:5BE6: 18           	clc
 22878 08:5BE7: 69 0A 00     	adc	#L934+4
 22879 08:5BEA: 1B           	tcs
 22880 08:5BEB: 98           	tya
 22881 08:5BEC: 6B           	rtl
 22882                        ;}
 22883                        	.line	5284
 22884                        	.endblock	5284
 22885             00000006   L934	equ	6
 22886             00000001   L935	equ	1
 22887 08:5BED:              	ends
 22888                        	efunc
 22889                        	.endfunc	5284,1,6
 22890                        	.line	5284
 22891                        ;
 22892                        ;/*-----------------------------------------------
                    ------------------------*/
 22893                        ;/* Read Directory Entries in Sequence            
                                            */
 22894                        ;/*-----------------------------------------------
                    ------------------------*/
 22895                        ;
 22896                        ;FRESULT f_readdir(DIR* dp, /* Pointer to the open
                     directory object */
 22897                        ;FILINFO* fno /* Pointer to file information to re
                    turn */
 22898                        ;)
 22899                        ;{
 22900                        	.line	5290
 22901                        	.line	5293
  Mon Aug  9 2021 16:52                                                Page 435


 22902                        	FFDOS
 22903                        	xdef	~~f_readdir
 22904                        	func
 22905                        	.function	5293
 22906                        ~~f_readdir:
 22907                        	longa	on
 22908                        	longi	on
 22909 08:5BED: 3B           	tsc
 22910 08:5BEE: 38           	sec
 22911 08:5BEF: E9 0A 00     	sbc	#L939
 22912 08:5BF2: 1B           	tcs
 22913 08:5BF3: 0B           	phd
 22914 08:5BF4: 5B           	tcd
 22915             00000004   dp_0	set	4
 22916             00000008   fno_0	set	8
 22917                        	.block	5293
 22918                        ;	FRESULT res;
 22919                        ;	FATFS *fs;
 22920                        ;	DEF_NAMBUF
 22921                        ;
 22922                        ;	res = validate(&dp->obj, &fs); /* Check validity
                     of the directory object */
 22923             00000000   res_1	set	0
 22924             00000002   fs_1	set	2
 22925             00000006   lfn_1	set	6
 22926                        	.sym	res,0,5,1,16
 22927                        	.sym	fs,2,138,1,32,75
 22928                        	.sym	lfn,6,144,1,32
 22929                        	.sym	dp,4,138,6,32,78
 22930                        	.sym	fno,8,138,6,32,79
 22931                        	.line	5298
 22932 08:5BF5: F4 00 00     	pea	#0
 22933 08:5BF8: 18           	clc
 22934 08:5BF9: 7B           	tdc
 22935 08:5BFA: 69 03 00     	adc	#<L940+fs_1
 22936 08:5BFD: 48           	pha
 22937 08:5BFE: D4 10        	pei	<L939+dp_0+2
 22938 08:5C00: D4 0E        	pei	<L939+dp_0
 22939 08:5C02: 22 57 44 08  	jsl	~~validate
 22940 08:5C06: 85 01        	sta	<L940+res_1
 22941                        ;	if (res == FR_OK)
 22942                        	.line	5299
 22943                        ;	{
 22944 08:5C08: A5 01        	lda	<L940+res_1
 22945 08:5C0A: F0 03        	beq	L942
 22946 08:5C0C: 82 A0 00     	brl	L10534
 22947                        L942:
 22948                        	.line	5300
 22949                        ;		if (!fno)
 22950                        	.line	5301
 22951                        ;		{
 22952 08:5C0F: A5 12        	lda	<L939+fno_0
 22953 08:5C11: 05 14        	ora	<L939+fno_0+2
 22954 08:5C13: F0 03        	beq	L943
 22955 08:5C15: 82 13 00     	brl	L10535
 22956                        L943:
 22957                        	.line	5302
 22958                        ;			res = dir_sdi(dp, 0); /* Rewind 
  Mon Aug  9 2021 16:52                                                Page 436


                    the directory object */
 22959                        	.line	5303
 22960 08:5C18: F4 00 00     	pea	#^$0
 22961 08:5C1B: F4 00 00     	pea	#<$0
 22962 08:5C1E: D4 10        	pei	<L939+dp_0+2
 22963 08:5C20: D4 0E        	pei	<L939+dp_0
 22964 08:5C22: 22 36 17 08  	jsl	~~dir_sdi
 22965 08:5C26: 85 01        	sta	<L940+res_1
 22966                        ;		}
 22967                        	.line	5304
 22968                        ;		else
 22969 08:5C28: 82 84 00     	brl	L10536
 22970                        L10535:
 22971                        ;		{
 22972                        	.line	5306
 22973                        ;			INIT_NAMBUF(fs);
 22974                        	.line	5307
 22975                        	.line	5307
 22976 08:5C2B: F4 00 02     	pea	#<$200
 22977 08:5C2E: 22 40 92 08  	jsl	~~ff_memalloc
 22978 08:5C32: 85 07        	sta	<L940+lfn_1
 22979 08:5C34: 86 09        	stx	<L940+lfn_1+2
 22980                        	.line	5307
 22981 08:5C36: A5 07        	lda	<L940+lfn_1
 22982 08:5C38: 05 09        	ora	<L940+lfn_1+2
 22983 08:5C3A: F0 03        	beq	L944
 22984 08:5C3C: 82 15 00     	brl	L10537
 22985                        L944:
 22986                        	.line	5307
 22987 08:5C3F: A9 11 00     	lda	#$11
 22988                        L945:
 22989 08:5C42: A8           	tay
 22990 08:5C43: A5 0C        	lda	<L939+2
 22991 08:5C45: 85 14        	sta	<L939+2+8
 22992 08:5C47: A5 0B        	lda	<L939+1
 22993 08:5C49: 85 13        	sta	<L939+1+8
 22994 08:5C4B: 2B           	pld
 22995 08:5C4C: 3B           	tsc
 22996 08:5C4D: 18           	clc
 22997 08:5C4E: 69 12 00     	adc	#L939+8
 22998 08:5C51: 1B           	tcs
 22999 08:5C52: 98           	tya
 23000 08:5C53: 6B           	rtl
 23001                        L10537:
 23002                        	.line	5307
 23003 08:5C54: A5 07        	lda	<L940+lfn_1
 23004 08:5C56: A0 0B 00     	ldy	#$b
 23005 08:5C59: 97 03        	sta	[<L940+fs_1],Y
 23006 08:5C5B: A5 09        	lda	<L940+lfn_1+2
 23007 08:5C5D: A0 0D 00     	ldy	#$d
 23008 08:5C60: 97 03        	sta	[<L940+fs_1],Y
 23009                        	.line	5307
 23010                        	.line	5307
 23011                        ;			res = DIR_READ_FILE(dp); /* Read
                     an item */
 23012                        	.line	5308
 23013 08:5C62: F4 00 00     	pea	#<$0
 23014 08:5C65: D4 10        	pei	<L939+dp_0+2
  Mon Aug  9 2021 16:52                                                Page 437


 23015 08:5C67: D4 0E        	pei	<L939+dp_0
 23016 08:5C69: 22 71 23 08  	jsl	~~dir_read
 23017 08:5C6D: 85 01        	sta	<L940+res_1
 23018                        ;			if (res == FR_NO_FILE)
 23019                        	.line	5309
 23020                        ;				res = FR_OK; /* Ignore e
                    nd of directory */
 23021 08:5C6F: A5 01        	lda	<L940+res_1
 23022 08:5C71: C9 04 00     	cmp	#<$4
 23023 08:5C74: F0 03        	beq	L946
 23024 08:5C76: 82 02 00     	brl	L10538
 23025                        L946:
 23026                        	.line	5310
 23027 08:5C79: 64 01        	stz	<L940+res_1
 23028                        ;			if (res == FR_OK)
 23029                        L10538:
 23030                        	.line	5311
 23031                        ;			{ /* A valid entry is found */
 23032 08:5C7B: A5 01        	lda	<L940+res_1
 23033 08:5C7D: F0 03        	beq	L947
 23034 08:5C7F: 82 25 00     	brl	L10539
 23035                        L947:
 23036                        	.line	5312
 23037                        ;				get_fileinfo(dp, fno); /
                    * Get the object information */
 23038                        	.line	5313
 23039 08:5C82: D4 14        	pei	<L939+fno_0+2
 23040 08:5C84: D4 12        	pei	<L939+fno_0
 23041 08:5C86: D4 10        	pei	<L939+dp_0+2
 23042 08:5C88: D4 0E        	pei	<L939+dp_0
 23043 08:5C8A: 22 DF 2B 08  	jsl	~~get_fileinfo
 23044                        ;				res = dir_next(dp, 0); /
                    * Increment index for next */
 23045                        	.line	5314
 23046 08:5C8E: F4 00 00     	pea	#<$0
 23047 08:5C91: D4 10        	pei	<L939+dp_0+2
 23048 08:5C93: D4 0E        	pei	<L939+dp_0
 23049 08:5C95: 22 75 19 08  	jsl	~~dir_next
 23050 08:5C99: 85 01        	sta	<L940+res_1
 23051                        ;				if (res == FR_NO_FILE)
 23052                        	.line	5315
 23053                        ;					res = FR_OK; /* 
                    Ignore end of directory now */
 23054 08:5C9B: A5 01        	lda	<L940+res_1
 23055 08:5C9D: C9 04 00     	cmp	#<$4
 23056 08:5CA0: F0 03        	beq	L948
 23057 08:5CA2: 82 02 00     	brl	L10540
 23058                        L948:
 23059                        	.line	5316
 23060 08:5CA5: 64 01        	stz	<L940+res_1
 23061                        ;			} FREE_NAMBUF();
 23062                        L10540:
 23063                        	.line	5317
 23064                        L10539:
 23065                        	.line	5317
 23066 08:5CA7: D4 09        	pei	<L940+lfn_1+2
 23067 08:5CA9: D4 07        	pei	<L940+lfn_1
 23068 08:5CAB: 22 70 92 08  	jsl	~~ff_memfree
  Mon Aug  9 2021 16:52                                                Page 438


 23069                        ;		}
 23070                        	.line	5318
 23071                        L10536:
 23072                        ;	}
 23073                        	.line	5319
 23074                        ;	LEAVE_FF(fs, res);
 23075                        L10534:
 23076                        	.line	5320
 23077 08:5CAF: A5 01        	lda	<L940+res_1
 23078 08:5CB1: 82 8E FF     	brl	L945
 23079                        ;}
 23080                        	.line	5321
 23081                        	.endblock	5321
 23082             0000000A   L939	equ	10
 23083             00000001   L940	equ	1
 23084 08:5CB4:              	ends
 23085                        	efunc
 23086                        	.endfunc	5321,1,10
 23087                        	.line	5321
 23088                        ;
 23089                        ;#if FF_USE_FIND
 23090                        ;/*-----------------------------------------------
                    ------------------------*/
 23091                        ;/* Find Next File                                
                                            */
 23092                        ;/*-----------------------------------------------
                    ------------------------*/
 23093                        ;
 23094                        ;FRESULT f_findnext (
 23095                        ;		DIR* dp, /* Pointer to the open director
                    y object */
 23096                        ;		FILINFO* fno /* Pointer to the file info
                    rmation structure */
 23097                        ;)
 23098                        ;{
 23099                        	.line	5328
 23100                        	.line	5332
 23101                        	FFDOS
 23102                        	xdef	~~f_findnext
 23103                        	func
 23104                        	.function	5332
 23105                        ~~f_findnext:
 23106                        	longa	on
 23107                        	longi	on
 23108 08:5CB4: 3B           	tsc
 23109 08:5CB5: 38           	sec
 23110 08:5CB6: E9 06 00     	sbc	#L949
 23111 08:5CB9: 1B           	tcs
 23112 08:5CBA: 0B           	phd
 23113 08:5CBB: 5B           	tcd
 23114             00000004   dp_0	set	4
 23115             00000008   fno_0	set	8
 23116                        	.block	5332
 23117                        ;	FRESULT res;
 23118                        ;
 23119                        ;	for (;;)
 23120             00000000   res_1	set	0
 23121                        	.sym	res,0,5,1,16
  Mon Aug  9 2021 16:52                                                Page 439


 23122                        	.sym	dp,4,138,6,32,78
 23123                        	.sym	fno,8,138,6,32,79
 23124                        	.line	5335
 23125                        L10543:
 23126                        ;	{
 23127                        	.line	5336
 23128                        ;		res = f_readdir(dp, fno); /* Get a direc
                    tory item */
 23129                        	.line	5337
 23130 08:5CBC: D4 10        	pei	<L949+fno_0+2
 23131 08:5CBE: D4 0E        	pei	<L949+fno_0
 23132 08:5CC0: D4 0C        	pei	<L949+dp_0+2
 23133 08:5CC2: D4 0A        	pei	<L949+dp_0
 23134 08:5CC4: 22 ED 5B 08  	jsl	~~f_readdir
 23135 08:5CC8: 85 05        	sta	<L950+res_1
 23136                        ;		if (res != FR_OK || !fno || !fno->fname[
                    0]) break; /* Terminate if any error or end of directory */
 23137                        	.line	5338
 23138 08:5CCA: A5 05        	lda	<L950+res_1
 23139 08:5CCC: F0 03        	beq	L952
 23140 08:5CCE: 82 77 00     	brl	L10542
 23141                        L952:
 23142 08:5CD1: A5 0E        	lda	<L949+fno_0
 23143 08:5CD3: 05 10        	ora	<L949+fno_0+2
 23144 08:5CD5: D0 03        	bne	L953
 23145 08:5CD7: 82 6E 00     	brl	L10542
 23146                        L953:
 23147 08:5CDA: A0 16 00     	ldy	#$16
 23148 08:5CDD: B7 0E        	lda	[<L949+fno_0],Y
 23149 08:5CDF: 29 FF 00     	and	#$ff
 23150 08:5CE2: D0 03        	bne	L954
 23151 08:5CE4: 82 61 00     	brl	L10542
 23152                        L954:
 23153                        ;		if (pattern_matching(dp->pat, fno->fname
                    , 0, 0)) break; /* Test for the file name */
 23154                        	.line	5339
 23155 08:5CE7: F4 00 00     	pea	#<$0
 23156 08:5CEA: F4 00 00     	pea	#<$0
 23157 08:5CED: 18           	clc
 23158 08:5CEE: A9 16 00     	lda	#$16
 23159 08:5CF1: 65 0E        	adc	<L949+fno_0
 23160 08:5CF3: 85 01        	sta	<R0
 23161 08:5CF5: A9 00 00     	lda	#$0
 23162 08:5CF8: 65 10        	adc	<L949+fno_0+2
 23163 08:5CFA: 85 03        	sta	<R0+2
 23164 08:5CFC: D4 03        	pei	<R0+2
 23165 08:5CFE: D4 01        	pei	<R0
 23166 08:5D00: A0 32 00     	ldy	#$32
 23167 08:5D03: B7 0A        	lda	[<L949+dp_0],Y
 23168 08:5D05: 48           	pha
 23169 08:5D06: A0 30 00     	ldy	#$30
 23170 08:5D09: B7 0A        	lda	[<L949+dp_0],Y
 23171 08:5D0B: 48           	pha
 23172 08:5D0C: 22 7A 30 08  	jsl	~~pattern_matching
 23173 08:5D10: AA           	tax
 23174 08:5D11: F0 03        	beq	L955
 23175 08:5D13: 82 32 00     	brl	L10542
 23176                        L955:
  Mon Aug  9 2021 16:52                                                Page 440


 23177                        ;#if FF_USE_LFN && FF_USE_FIND == 2
 23178                        ;		if (pattern_matching(dp->pat, fno->altna
                    me, 0, 0)) break; /* Test for alternative name if exist */
 23179                        	.line	5341
 23180 08:5D16: F4 00 00     	pea	#<$0
 23181 08:5D19: F4 00 00     	pea	#<$0
 23182 08:5D1C: 18           	clc
 23183 08:5D1D: A9 09 00     	lda	#$9
 23184 08:5D20: 65 0E        	adc	<L949+fno_0
 23185 08:5D22: 85 01        	sta	<R0
 23186 08:5D24: A9 00 00     	lda	#$0
 23187 08:5D27: 65 10        	adc	<L949+fno_0+2
 23188 08:5D29: 85 03        	sta	<R0+2
 23189 08:5D2B: D4 03        	pei	<R0+2
 23190 08:5D2D: D4 01        	pei	<R0
 23191 08:5D2F: A0 32 00     	ldy	#$32
 23192 08:5D32: B7 0A        	lda	[<L949+dp_0],Y
 23193 08:5D34: 48           	pha
 23194 08:5D35: A0 30 00     	ldy	#$30
 23195 08:5D38: B7 0A        	lda	[<L949+dp_0],Y
 23196 08:5D3A: 48           	pha
 23197 08:5D3B: 22 7A 30 08  	jsl	~~pattern_matching
 23198 08:5D3F: AA           	tax
 23199 08:5D40: F0 03        	beq	L956
 23200 08:5D42: 82 03 00     	brl	L10542
 23201                        L956:
 23202                        ;#endif
 23203                        ;	}
 23204                        	.line	5343
 23205                        L10541:
 23206 08:5D45: 82 74 FF     	brl	L10543
 23207                        L10542:
 23208                        ;	return res;
 23209                        	.line	5344
 23210 08:5D48: A5 05        	lda	<L950+res_1
 23211                        L957:
 23212 08:5D4A: A8           	tay
 23213 08:5D4B: A5 08        	lda	<L949+2
 23214 08:5D4D: 85 10        	sta	<L949+2+8
 23215 08:5D4F: A5 07        	lda	<L949+1
 23216 08:5D51: 85 0F        	sta	<L949+1+8
 23217 08:5D53: 2B           	pld
 23218 08:5D54: 3B           	tsc
 23219 08:5D55: 18           	clc
 23220 08:5D56: 69 0E 00     	adc	#L949+8
 23221 08:5D59: 1B           	tcs
 23222 08:5D5A: 98           	tya
 23223 08:5D5B: 6B           	rtl
 23224                        ;}
 23225                        	.line	5345
 23226                        	.endblock	5345
 23227             00000006   L949	equ	6
 23228             00000005   L950	equ	5
 23229 08:5D5C:              	ends
 23230                        	efunc
 23231                        	.endfunc	5345,5,6
 23232                        	.line	5345
 23233                        ;
  Mon Aug  9 2021 16:52                                                Page 441


 23234                        ;/*-----------------------------------------------
                    ------------------------*/
 23235                        ;/* Find First File                               
                                            */
 23236                        ;/*-----------------------------------------------
                    ------------------------*/
 23237                        ;
 23238                        ;FRESULT f_findfirst (
 23239                        ;		DIR* dp, /* Pointer to the blank directo
                    ry object */
 23240                        ;		FILINFO* fno, /* Pointer to the file inf
                    ormation structure */
 23241                        ;		const TCHAR* path, /* Pointer to the dir
                    ectory to open */
 23242                        ;		const TCHAR* pattern /* Pointer to the m
                    atching pattern */
 23243                        ;)
 23244                        ;{
 23245                        	.line	5351
 23246                        	.line	5357
 23247                        	FFDOS
 23248                        	xdef	~~f_findfirst
 23249                        	func
 23250                        	.function	5357
 23251                        ~~f_findfirst:
 23252                        	longa	on
 23253                        	longi	on
 23254 08:5D5C: 3B           	tsc
 23255 08:5D5D: 38           	sec
 23256 08:5D5E: E9 02 00     	sbc	#L958
 23257 08:5D61: 1B           	tcs
 23258 08:5D62: 0B           	phd
 23259 08:5D63: 5B           	tcd
 23260             00000004   dp_0	set	4
 23261             00000008   fno_0	set	8
 23262             0000000C   path_0	set	12
 23263             00000010   pattern_0	set	16
 23264                        	.block	5357
 23265                        ;	FRESULT res;
 23266                        ;
 23267                        ;	dp->pat = pattern; /* Save pointer to pattern st
                    ring */
 23268             00000000   res_1	set	0
 23269                        	.sym	res,0,5,1,16
 23270                        	.sym	dp,4,138,6,32,78
 23271                        	.sym	fno,8,138,6,32,79
 23272                        	.sym	path,12,142,6,32
 23273                        	.sym	pattern,16,142,6,32
 23274                        	.line	5360
 23275 08:5D64: A5 12        	lda	<L958+pattern_0
 23276 08:5D66: A0 30 00     	ldy	#$30
 23277 08:5D69: 97 06        	sta	[<L958+dp_0],Y
 23278 08:5D6B: A5 14        	lda	<L958+pattern_0+2
 23279 08:5D6D: A0 32 00     	ldy	#$32
 23280 08:5D70: 97 06        	sta	[<L958+dp_0],Y
 23281                        ;	res = f_opendir(dp, path); /* Open the target di
                    rectory */
 23282                        	.line	5361
  Mon Aug  9 2021 16:52                                                Page 442


 23283 08:5D72: D4 10        	pei	<L958+path_0+2
 23284 08:5D74: D4 0E        	pei	<L958+path_0
 23285 08:5D76: D4 08        	pei	<L958+dp_0+2
 23286 08:5D78: D4 06        	pei	<L958+dp_0
 23287 08:5D7A: 22 7B 5A 08  	jsl	~~f_opendir
 23288 08:5D7E: 85 01        	sta	<L959+res_1
 23289                        ;	if (res == FR_OK)
 23290                        	.line	5362
 23291                        ;	{
 23292 08:5D80: A5 01        	lda	<L959+res_1
 23293 08:5D82: F0 03        	beq	L961
 23294 08:5D84: 82 0E 00     	brl	L10544
 23295                        L961:
 23296                        	.line	5363
 23297                        ;		res = f_findnext(dp, fno); /* Find the f
                    irst item */
 23298                        	.line	5364
 23299 08:5D87: D4 0C        	pei	<L958+fno_0+2
 23300 08:5D89: D4 0A        	pei	<L958+fno_0
 23301 08:5D8B: D4 08        	pei	<L958+dp_0+2
 23302 08:5D8D: D4 06        	pei	<L958+dp_0
 23303 08:5D8F: 22 B4 5C 08  	jsl	~~f_findnext
 23304 08:5D93: 85 01        	sta	<L959+res_1
 23305                        ;	}
 23306                        	.line	5365
 23307                        ;	return res;
 23308                        L10544:
 23309                        	.line	5366
 23310 08:5D95: A5 01        	lda	<L959+res_1
 23311                        L962:
 23312 08:5D97: A8           	tay
 23313 08:5D98: A5 04        	lda	<L958+2
 23314 08:5D9A: 85 14        	sta	<L958+2+16
 23315 08:5D9C: A5 03        	lda	<L958+1
 23316 08:5D9E: 85 13        	sta	<L958+1+16
 23317 08:5DA0: 2B           	pld
 23318 08:5DA1: 3B           	tsc
 23319 08:5DA2: 18           	clc
 23320 08:5DA3: 69 12 00     	adc	#L958+16
 23321 08:5DA6: 1B           	tcs
 23322 08:5DA7: 98           	tya
 23323 08:5DA8: 6B           	rtl
 23324                        ;}
 23325                        	.line	5367
 23326                        	.endblock	5367
 23327             00000002   L958	equ	2
 23328             00000001   L959	equ	1
 23329 08:5DA9:              	ends
 23330                        	efunc
 23331                        	.endfunc	5367,1,2
 23332                        	.line	5367
 23333                        ;
 23334                        ;#endif	/* FF_USE_FIND */
 23335                        ;
 23336                        ;#if FF_FS_MINIMIZE == 0
 23337                        ;/*-----------------------------------------------
                    ------------------------*/
 23338                        ;/* Get File Status                               
  Mon Aug  9 2021 16:52                                                Page 443


                                            */
 23339                        ;/*-----------------------------------------------
                    ------------------------*/
 23340                        ;
 23341                        ;FRESULT f_stat(const TCHAR* path, /* Pointer to t
                    he file path */
 23342                        ;FILINFO* fno /* Pointer to file information to re
                    turn */
 23343                        ;)
 23344                        ;{
 23345                        	.line	5376
 23346                        	.line	5379
 23347                        	FFDOS
 23348                        	xdef	~~f_stat
 23349                        	func
 23350                        	.function	5379
 23351                        ~~f_stat:
 23352                        	longa	on
 23353                        	longi	on
 23354 08:5DA9: 3B           	tsc
 23355 08:5DAA: 38           	sec
 23356 08:5DAB: E9 3A 00     	sbc	#L963
 23357 08:5DAE: 1B           	tcs
 23358 08:5DAF: 0B           	phd
 23359 08:5DB0: 5B           	tcd
 23360             00000004   path_0	set	4
 23361             00000008   fno_0	set	8
 23362                        	.block	5379
 23363                        ;	FRESULT res;
 23364                        ;	DIR dj;
 23365                        ;	DEF_NAMBUF
 23366                        ;
 23367                        ;	/* Get logical drive */
 23368                        ;	res = mount_volume(&path, &dj.obj.fs, 0);
 23369             00000000   res_1	set	0
 23370             00000002   dj_1	set	2
 23371             00000036   lfn_1	set	54
 23372                        	.sym	res,0,5,1,16
 23373                        	.sym	dj,2,10,1,416,78
 23374                        	.sym	lfn,54,144,1,32
 23375                        	.sym	path,4,142,6,32
 23376                        	.sym	fno,8,138,6,32,79
 23377                        	.line	5385
 23378 08:5DB1: F4 00 00     	pea	#<$0
 23379 08:5DB4: F4 00 00     	pea	#0
 23380 08:5DB7: 18           	clc
 23381 08:5DB8: 7B           	tdc
 23382 08:5DB9: 69 03 00     	adc	#<L964+dj_1
 23383 08:5DBC: 48           	pha
 23384 08:5DBD: F4 00 00     	pea	#0
 23385 08:5DC0: 18           	clc
 23386 08:5DC1: 7B           	tdc
 23387 08:5DC2: 69 3E 00     	adc	#<L963+path_0
 23388 08:5DC5: 48           	pha
 23389 08:5DC6: 22 84 3D 08  	jsl	~~mount_volume
 23390 08:5DCA: 85 01        	sta	<L964+res_1
 23391                        ;	if (res == FR_OK)
 23392                        	.line	5386
  Mon Aug  9 2021 16:52                                                Page 444


 23393                        ;	{
 23394 08:5DCC: A5 01        	lda	<L964+res_1
 23395 08:5DCE: F0 03        	beq	L966
 23396 08:5DD0: 82 88 00     	brl	L10545
 23397                        L966:
 23398                        	.line	5387
 23399                        ;		INIT_NAMBUF(dj.obj.fs);
 23400                        	.line	5388
 23401                        	.line	5388
 23402 08:5DD3: F4 00 02     	pea	#<$200
 23403 08:5DD6: 22 40 92 08  	jsl	~~ff_memalloc
 23404 08:5DDA: 85 37        	sta	<L964+lfn_1
 23405 08:5DDC: 86 39        	stx	<L964+lfn_1+2
 23406                        	.line	5388
 23407 08:5DDE: A5 37        	lda	<L964+lfn_1
 23408 08:5DE0: 05 39        	ora	<L964+lfn_1+2
 23409 08:5DE2: F0 03        	beq	L967
 23410 08:5DE4: 82 15 00     	brl	L10546
 23411                        L967:
 23412                        	.line	5388
 23413 08:5DE7: A9 11 00     	lda	#$11
 23414                        L968:
 23415 08:5DEA: A8           	tay
 23416 08:5DEB: A5 3C        	lda	<L963+2
 23417 08:5DED: 85 44        	sta	<L963+2+8
 23418 08:5DEF: A5 3B        	lda	<L963+1
 23419 08:5DF1: 85 43        	sta	<L963+1+8
 23420 08:5DF3: 2B           	pld
 23421 08:5DF4: 3B           	tsc
 23422 08:5DF5: 18           	clc
 23423 08:5DF6: 69 42 00     	adc	#L963+8
 23424 08:5DF9: 1B           	tcs
 23425 08:5DFA: 98           	tya
 23426 08:5DFB: 6B           	rtl
 23427                        L10546:
 23428                        	.line	5388
 23429 08:5DFC: A5 37        	lda	<L964+lfn_1
 23430 08:5DFE: A0 0B 00     	ldy	#$b
 23431 08:5E01: 97 03        	sta	[<L964+dj_1],Y
 23432 08:5E03: A5 39        	lda	<L964+lfn_1+2
 23433 08:5E05: A0 0D 00     	ldy	#$d
 23434 08:5E08: 97 03        	sta	[<L964+dj_1],Y
 23435                        	.line	5388
 23436                        	.line	5388
 23437                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 23438                        	.line	5389
 23439 08:5E0A: D4 40        	pei	<L963+path_0+2
 23440 08:5E0C: D4 3E        	pei	<L963+path_0
 23441 08:5E0E: F4 00 00     	pea	#0
 23442 08:5E11: 18           	clc
 23443 08:5E12: 7B           	tdc
 23444 08:5E13: 69 03 00     	adc	#<L964+dj_1
 23445 08:5E16: 48           	pha
 23446 08:5E17: 22 01 37 08  	jsl	~~follow_path
 23447 08:5E1B: 85 01        	sta	<L964+res_1
 23448                        ;		if (res == FR_OK)
 23449                        	.line	5390
  Mon Aug  9 2021 16:52                                                Page 445


 23450                        ;		{ /* Follow completed */
 23451 08:5E1D: A5 01        	lda	<L964+res_1
 23452 08:5E1F: F0 03        	beq	L969
 23453 08:5E21: 82 2F 00     	brl	L10547
 23454                        L969:
 23455                        	.line	5391
 23456                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 23457                        	.line	5392
 23458                        ;			{ /* It is origin directory */
 23459 08:5E24: E2 20        	sep	#$20
 23460                        	longa	off
 23461 08:5E26: A5 2E        	lda	<L964+dj_1+43
 23462 08:5E28: 29 80        	and	#<$80
 23463 08:5E2A: C2 20        	rep	#$20
 23464                        	longa	on
 23465 08:5E2C: D0 03        	bne	L970
 23466 08:5E2E: 82 08 00     	brl	L10548
 23467                        L970:
 23468                        	.line	5393
 23469                        ;				res = FR_INVALID_NAME;
 23470                        	.line	5394
 23471 08:5E31: A9 06 00     	lda	#$6
 23472 08:5E34: 85 01        	sta	<L964+res_1
 23473                        ;			}
 23474                        	.line	5395
 23475                        ;			else
 23476 08:5E36: 82 1A 00     	brl	L10549
 23477                        L10548:
 23478                        ;			{ /* Found an object */
 23479                        	.line	5397
 23480                        ;				if (fno)
 23481                        	.line	5398
 23482                        ;					get_fileinfo(&dj
                    , fno);
 23483 08:5E39: A5 42        	lda	<L963+fno_0
 23484 08:5E3B: 05 44        	ora	<L963+fno_0+2
 23485 08:5E3D: D0 03        	bne	L971
 23486 08:5E3F: 82 11 00     	brl	L10550
 23487                        L971:
 23488                        	.line	5399
 23489 08:5E42: D4 44        	pei	<L963+fno_0+2
 23490 08:5E44: D4 42        	pei	<L963+fno_0
 23491 08:5E46: F4 00 00     	pea	#0
 23492 08:5E49: 18           	clc
 23493 08:5E4A: 7B           	tdc
 23494 08:5E4B: 69 03 00     	adc	#<L964+dj_1
 23495 08:5E4E: 48           	pha
 23496 08:5E4F: 22 DF 2B 08  	jsl	~~get_fileinfo
 23497                        ;			}
 23498                        L10550:
 23499                        	.line	5400
 23500                        L10549:
 23501                        ;		} FREE_NAMBUF();
 23502                        	.line	5401
 23503                        L10547:
 23504                        	.line	5401
 23505 08:5E53: D4 39        	pei	<L964+lfn_1+2
 23506 08:5E55: D4 37        	pei	<L964+lfn_1
  Mon Aug  9 2021 16:52                                                Page 446


 23507 08:5E57: 22 70 92 08  	jsl	~~ff_memfree
 23508                        ;	}
 23509                        	.line	5402
 23510                        ;
 23511                        ;	LEAVE_FF(dj.obj.fs, res);
 23512                        L10545:
 23513                        	.line	5404
 23514 08:5E5B: A5 01        	lda	<L964+res_1
 23515 08:5E5D: 82 8A FF     	brl	L968
 23516                        ;}
 23517                        	.line	5405
 23518                        	.endblock	5405
 23519             0000003A   L963	equ	58
 23520             00000001   L964	equ	1
 23521 08:5E60:              	ends
 23522                        	efunc
 23523                        	.endfunc	5405,1,58
 23524                        	.line	5405
 23525                        ;
 23526                        ;#if !FF_FS_READONLY
 23527                        ;/*-----------------------------------------------
                    ------------------------*/
 23528                        ;/* Get Number of Free Clusters                   
                                            */
 23529                        ;/*-----------------------------------------------
                    ------------------------*/
 23530                        ;
 23531                        ;FRESULT f_getfree(const TCHAR* path, /* Logical d
                    rive number */
 23532                        ;DWORD* nclst, /* Pointer to a variable to return 
                    number of free clusters */
 23533                        ;FATFS** fatfs /* Pointer to return pointer to cor
                    responding filesystem object */
 23534                        ;)
 23535                        ;{
 23536                        	.line	5412
 23537                        	.line	5416
 23538                        	FFDOS
 23539                        	xdef	~~f_getfree
 23540                        	func
 23541                        	.function	5416
 23542                        ~~f_getfree:
 23543                        	longa	on
 23544                        	longi	on
 23545 08:5E60: 3B           	tsc
 23546 08:5E61: 38           	sec
 23547 08:5E62: E9 38 00     	sbc	#L972
 23548 08:5E65: 1B           	tcs
 23549 08:5E66: 0B           	phd
 23550 08:5E67: 5B           	tcd
 23551             00000004   path_0	set	4
 23552             00000008   nclst_0	set	8
 23553             0000000C   fatfs_0	set	12
 23554                        	.block	5416
 23555                        ;	FRESULT res;
 23556                        ;	FATFS *fs;
 23557                        ;	DWORD nfree, clst, stat;
 23558                        ;	LBA_t sect;
  Mon Aug  9 2021 16:52                                                Page 447


 23559                        ;	UINT i;
 23560                        ;	FFOBJID obj;
 23561                        ;
 23562                        ;	/* Get logical drive */
 23563                        ;	res = mount_volume(&path, &fs, 0);
 23564             00000000   res_1	set	0
 23565             00000002   fs_1	set	2
 23566             00000006   nfree_1	set	6
 23567             0000000A   clst_1	set	10
 23568             0000000E   stat_1	set	14
 23569             00000012   sect_1	set	18
 23570             00000016   i_1	set	22
 23571             00000018   obj_1	set	24
 23572                        	.sym	res,0,5,1,16
 23573                        	.sym	fs,2,138,1,32,75
 23574                        	.sym	nfree,6,18,1,32
 23575                        	.sym	clst,10,18,1,32
 23576                        	.sym	stat,14,18,1,32
 23577                        	.sym	sect,18,18,1,32
 23578                        	.sym	i,22,16,1,16
 23579                        	.sym	obj,24,10,1,128,76
 23580                        	.sym	path,4,142,6,32
 23581                        	.sym	nclst,8,146,6,32
 23582                        	.sym	fatfs,12,1162,6,32,75
 23583                        	.line	5425
 23584 08:5E68: F4 00 00     	pea	#<$0
 23585 08:5E6B: F4 00 00     	pea	#0
 23586 08:5E6E: 18           	clc
 23587 08:5E6F: 7B           	tdc
 23588 08:5E70: 69 13 00     	adc	#<L973+fs_1
 23589 08:5E73: 48           	pha
 23590 08:5E74: F4 00 00     	pea	#0
 23591 08:5E77: 18           	clc
 23592 08:5E78: 7B           	tdc
 23593 08:5E79: 69 3C 00     	adc	#<L972+path_0
 23594 08:5E7C: 48           	pha
 23595 08:5E7D: 22 84 3D 08  	jsl	~~mount_volume
 23596 08:5E81: 85 11        	sta	<L973+res_1
 23597                        ;	if (res == FR_OK)
 23598                        	.line	5426
 23599                        ;	{
 23600 08:5E83: A5 11        	lda	<L973+res_1
 23601 08:5E85: F0 03        	beq	L975
 23602 08:5E87: 82 06 02     	brl	L10551
 23603                        L975:
 23604                        	.line	5427
 23605                        ;		*fatfs = fs; /* Return ptr to the fs obj
                    ect */
 23606                        	.line	5428
 23607 08:5E8A: A5 13        	lda	<L973+fs_1
 23608 08:5E8C: 87 44        	sta	[<L972+fatfs_0]
 23609 08:5E8E: A5 15        	lda	<L973+fs_1+2
 23610 08:5E90: A0 02 00     	ldy	#$2
 23611 08:5E93: 97 44        	sta	[<L972+fatfs_0],Y
 23612                        ;		/* If free_clst is valid, return it with
                    out full FAT scan */
 23613                        ;		if (fs->free_clst <= fs->n_fatent - 2)
 23614                        	.line	5430
  Mon Aug  9 2021 16:52                                                Page 448


 23615                        ;		{
 23616 08:5E95: 18           	clc
 23617 08:5E96: A9 FE FF     	lda	#$fffe
 23618 08:5E99: A0 17 00     	ldy	#$17
 23619 08:5E9C: 77 13        	adc	[<L973+fs_1],Y
 23620 08:5E9E: 85 01        	sta	<R0
 23621 08:5EA0: A9 FF FF     	lda	#$ffff
 23622 08:5EA3: A0 19 00     	ldy	#$19
 23623 08:5EA6: 77 13        	adc	[<L973+fs_1],Y
 23624 08:5EA8: 85 03        	sta	<R0+2
 23625 08:5EAA: A5 01        	lda	<R0
 23626 08:5EAC: A0 13 00     	ldy	#$13
 23627 08:5EAF: D7 13        	cmp	[<L973+fs_1],Y
 23628 08:5EB1: A5 03        	lda	<R0+2
 23629 08:5EB3: A0 15 00     	ldy	#$15
 23630 08:5EB6: F7 13        	sbc	[<L973+fs_1],Y
 23631 08:5EB8: B0 03        	bcs	L976
 23632 08:5EBA: 82 14 00     	brl	L10552
 23633                        L976:
 23634                        	.line	5431
 23635                        ;			*nclst = fs->free_clst;
 23636                        	.line	5432
 23637 08:5EBD: A0 13 00     	ldy	#$13
 23638 08:5EC0: B7 13        	lda	[<L973+fs_1],Y
 23639 08:5EC2: 87 40        	sta	[<L972+nclst_0]
 23640 08:5EC4: A0 15 00     	ldy	#$15
 23641 08:5EC7: B7 13        	lda	[<L973+fs_1],Y
 23642 08:5EC9: A0 02 00     	ldy	#$2
 23643 08:5ECC: 97 40        	sta	[<L972+nclst_0],Y
 23644                        ;		}
 23645                        	.line	5433
 23646                        ;		else
 23647 08:5ECE: 82 BF 01     	brl	L10553
 23648                        L10552:
 23649                        ;		{
 23650                        	.line	5435
 23651                        ;			/* Scan FAT to obtain number of 
                    free clusters */
 23652                        ;			nfree = 0;
 23653                        	.line	5437
 23654 08:5ED1: 64 17        	stz	<L973+nfree_1
 23655 08:5ED3: 64 19        	stz	<L973+nfree_1+2
 23656                        ;			if (fs->fs_type == FS_FAT12)
 23657                        	.line	5438
 23658                        ;			{ /* FAT12: Scan bit field FAT e
                    ntries */
 23659 08:5ED5: E2 20        	sep	#$20
 23660                        	longa	off
 23661 08:5ED7: A7 13        	lda	[<L973+fs_1]
 23662 08:5ED9: C9 01        	cmp	#<$1
 23663 08:5EDB: C2 20        	rep	#$20
 23664                        	longa	on
 23665 08:5EDD: F0 03        	beq	L977
 23666 08:5EDF: 82 84 00     	brl	L10554
 23667                        L977:
 23668                        	.line	5439
 23669                        ;				clst = 2;
 23670                        	.line	5440
  Mon Aug  9 2021 16:52                                                Page 449


 23671 08:5EE2: A9 02 00     	lda	#$2
 23672 08:5EE5: 85 1B        	sta	<L973+clst_1
 23673 08:5EE7: A9 00 00     	lda	#$0
 23674 08:5EEA: 85 1D        	sta	<L973+clst_1+2
 23675                        ;				obj.fs = fs;
 23676                        	.line	5441
 23677 08:5EEC: A5 13        	lda	<L973+fs_1
 23678 08:5EEE: 85 29        	sta	<L973+obj_1
 23679 08:5EF0: A5 15        	lda	<L973+fs_1+2
 23680 08:5EF2: 85 2B        	sta	<L973+obj_1+2
 23681                        ;				do
 23682                        	.line	5442
 23683                        L10557:
 23684                        ;				{
 23685                        	.line	5443
 23686                        ;					stat = get_fat(&
                    obj, clst);
 23687                        	.line	5444
 23688 08:5EF4: D4 1D        	pei	<L973+clst_1+2
 23689 08:5EF6: D4 1B        	pei	<L973+clst_1
 23690 08:5EF8: F4 00 00     	pea	#0
 23691 08:5EFB: 18           	clc
 23692 08:5EFC: 7B           	tdc
 23693 08:5EFD: 69 29 00     	adc	#<L973+obj_1
 23694 08:5F00: 48           	pha
 23695 08:5F01: 22 2A 0B 08  	jsl	~~get_fat
 23696 08:5F05: 85 1F        	sta	<L973+stat_1
 23697 08:5F07: 86 21        	stx	<L973+stat_1+2
 23698                        ;					if (stat == 0xFF
                    FFFFFF)
 23699                        	.line	5445
 23700                        ;					{
 23701 08:5F09: A5 1F        	lda	<L973+stat_1
 23702 08:5F0B: C9 FF FF     	cmp	#<$ffffffff
 23703 08:5F0E: D0 05        	bne	L978
 23704 08:5F10: A5 21        	lda	<L973+stat_1+2
 23705 08:5F12: C9 FF FF     	cmp	#^$ffffffff
 23706                        L978:
 23707 08:5F15: F0 03        	beq	L979
 23708 08:5F17: 82 08 00     	brl	L10558
 23709                        L979:
 23710                        	.line	5446
 23711                        ;						res = FR
                    _DISK_ERR;
 23712                        	.line	5447
 23713 08:5F1A: A9 01 00     	lda	#$1
 23714 08:5F1D: 85 11        	sta	<L973+res_1
 23715                        ;						break;
 23716                        	.line	5448
 23717 08:5F1F: 82 41 00     	brl	L10556
 23718                        ;					}
 23719                        	.line	5449
 23720                        ;					if (stat == 1)
 23721                        L10558:
 23722                        	.line	5450
 23723                        ;					{
 23724 08:5F22: A5 1F        	lda	<L973+stat_1
 23725 08:5F24: C9 01 00     	cmp	#<$1
  Mon Aug  9 2021 16:52                                                Page 450


 23726 08:5F27: D0 05        	bne	L980
 23727 08:5F29: A5 21        	lda	<L973+stat_1+2
 23728 08:5F2B: C9 00 00     	cmp	#^$1
 23729                        L980:
 23730 08:5F2E: F0 03        	beq	L981
 23731 08:5F30: 82 08 00     	brl	L10559
 23732                        L981:
 23733                        	.line	5451
 23734                        ;						res = FR
                    _INT_ERR;
 23735                        	.line	5452
 23736 08:5F33: A9 02 00     	lda	#$2
 23737 08:5F36: 85 11        	sta	<L973+res_1
 23738                        ;						break;
 23739                        	.line	5453
 23740 08:5F38: 82 28 00     	brl	L10556
 23741                        ;					}
 23742                        	.line	5454
 23743                        ;					if (stat == 0)
 23744                        L10559:
 23745                        	.line	5455
 23746                        ;						nfree++;
 23747 08:5F3B: A5 1F        	lda	<L973+stat_1
 23748 08:5F3D: 05 21        	ora	<L973+stat_1+2
 23749 08:5F3F: F0 03        	beq	L982
 23750 08:5F41: 82 06 00     	brl	L10560
 23751                        L982:
 23752                        	.line	5456
 23753 08:5F44: E6 17        	inc	<L973+nfree_1
 23754 08:5F46: D0 02        	bne	L983
 23755 08:5F48: E6 19        	inc	<L973+nfree_1+2
 23756                        L983:
 23757                        ;				} while (++clst < fs->n_
                    fatent);
 23758                        L10560:
 23759                        	.line	5457
 23760                        L10555:
 23761 08:5F4A: E6 1B        	inc	<L973+clst_1
 23762 08:5F4C: D0 02        	bne	L984
 23763 08:5F4E: E6 1D        	inc	<L973+clst_1+2
 23764                        L984:
 23765 08:5F50: A5 1B        	lda	<L973+clst_1
 23766 08:5F52: A0 17 00     	ldy	#$17
 23767 08:5F55: D7 13        	cmp	[<L973+fs_1],Y
 23768 08:5F57: A5 1D        	lda	<L973+clst_1+2
 23769 08:5F59: A0 19 00     	ldy	#$19
 23770 08:5F5C: F7 13        	sbc	[<L973+fs_1],Y
 23771 08:5F5E: B0 03        	bcs	L985
 23772 08:5F60: 82 91 FF     	brl	L10557
 23773                        L985:
 23774                        L10556:
 23775                        ;			}
 23776                        	.line	5458
 23777                        ;			else
 23778 08:5F63: 82 F8 00     	brl	L10561
 23779                        L10554:
 23780                        ;			{
 23781                        	.line	5460
  Mon Aug  9 2021 16:52                                                Page 451


 23782                        ;#if FF_FS_EXFAT
 23783                        ;				if (fs->fs_type == FS_EX
                    FAT)
 23784                        ;				{ /* exFAT: Scan allocat
                    ion bitmap */
 23785                        ;					BYTE bm;
 23786                        ;					UINT b;
 23787                        ;
 23788                        ;					clst = fs->n_fat
                    ent - 2; /* Number of clusters */
 23789                        ;					sect = fs->bitba
                    se; /* Bitmap sector */
 23790                        ;					i = 0; /* Offset
                     in the sector */
 23791                        ;					do
 23792                        ;					{ /* Counts numb
                    uer of bits with zero in the bitmap */
 23793                        ;						if (i ==
                     0)
 23794                        ;						{
 23795                        ;							
                    res = move_window(fs, sect++);
 23796                        ;							
                    if (res != FR_OK) break;
 23797                        ;						}
 23798                        ;						for (b =
                     8, bm = fs->win[i]; b && clst; b--, clst--)
 23799                        ;						{
 23800                        ;							
                    if (!(bm & 1)) nfree++;
 23801                        ;							
                    bm >>= 1;
 23802                        ;						}
 23803                        ;						i = (i +
                     1) % SS(fs);
 23804                        ;					}while (clst);
 23805                        ;				}
 23806                        ;				else
 23807                        ;#endif
 23808                        ;				{ /* FAT16/32: Scan WORD
                    /DWORD FAT entries */
 23809                        	.line	5487
 23810                        ;					clst = fs->n_fat
                    ent; /* Number of entries */
 23811                        	.line	5488
 23812 08:5F66: A0 17 00     	ldy	#$17
 23813 08:5F69: B7 13        	lda	[<L973+fs_1],Y
 23814 08:5F6B: 85 1B        	sta	<L973+clst_1
 23815 08:5F6D: A0 19 00     	ldy	#$19
 23816 08:5F70: B7 13        	lda	[<L973+fs_1],Y
 23817 08:5F72: 85 1D        	sta	<L973+clst_1+2
 23818                        ;					sect = fs->fatba
                    se; /* Top of the FAT */
 23819                        	.line	5489
 23820 08:5F74: A0 23 00     	ldy	#$23
 23821 08:5F77: B7 13        	lda	[<L973+fs_1],Y
 23822 08:5F79: 85 23        	sta	<L973+sect_1
 23823 08:5F7B: A0 25 00     	ldy	#$25
  Mon Aug  9 2021 16:52                                                Page 452


 23824 08:5F7E: B7 13        	lda	[<L973+fs_1],Y
 23825 08:5F80: 85 25        	sta	<L973+sect_1+2
 23826                        ;					i = 0; /* Offset
                     in the sector */
 23827                        	.line	5490
 23828 08:5F82: 64 27        	stz	<L973+i_1
 23829                        ;					do
 23830                        	.line	5491
 23831                        L10564:
 23832                        ;					{ /* Counts numb
                    uer of entries with zero in the FAT */
 23833                        	.line	5492
 23834                        ;						if (i ==
                     0)
 23835                        	.line	5493
 23836                        ;						{
 23837 08:5F84: A5 27        	lda	<L973+i_1
 23838 08:5F86: F0 03        	beq	L986
 23839 08:5F88: 82 23 00     	brl	L10565
 23840                        L986:
 23841                        	.line	5494
 23842                        ;							
                    res = move_window(fs, sect++);
 23843                        	.line	5495
 23844 08:5F8B: A5 23        	lda	<L973+sect_1
 23845 08:5F8D: 85 01        	sta	<R0
 23846 08:5F8F: A5 25        	lda	<L973+sect_1+2
 23847 08:5F91: 85 03        	sta	<R0+2
 23848 08:5F93: E6 23        	inc	<L973+sect_1
 23849 08:5F95: D0 02        	bne	L987
 23850 08:5F97: E6 25        	inc	<L973+sect_1+2
 23851                        L987:
 23852 08:5F99: D4 03        	pei	<R0+2
 23853 08:5F9B: D4 01        	pei	<R0
 23854 08:5F9D: D4 15        	pei	<L973+fs_1+2
 23855 08:5F9F: D4 13        	pei	<L973+fs_1
 23856 08:5FA1: 22 97 08 08  	jsl	~~move_window
 23857 08:5FA5: 85 11        	sta	<L973+res_1
 23858                        ;							
                    if (res != FR_OK)
 23859                        	.line	5496
 23860                        ;							
                    	break;
 23861 08:5FA7: A5 11        	lda	<L973+res_1
 23862 08:5FA9: F0 03        	beq	L988
 23863 08:5FAB: 82 B0 00     	brl	L10563
 23864                        L988:
 23865                        ;						}
 23866                        	.line	5498
 23867                        ;						if (fs->
                    fs_type == FS_FAT16)
 23868                        L10565:
 23869                        	.line	5499
 23870                        ;						{
 23871 08:5FAE: E2 20        	sep	#$20
 23872                        	longa	off
 23873 08:5FB0: A7 13        	lda	[<L973+fs_1]
 23874 08:5FB2: C9 02        	cmp	#<$2
  Mon Aug  9 2021 16:52                                                Page 453


 23875 08:5FB4: C2 20        	rep	#$20
 23876                        	longa	on
 23877 08:5FB6: F0 03        	beq	L989
 23878 08:5FB8: 82 3D 00     	brl	L10566
 23879                        L989:
 23880                        	.line	5500
 23881                        ;							
                    if (ld_word(fs->win + i) == 0)
 23882                        	.line	5501
 23883                        ;							
                    	nfree++;
 23884 08:5FBB: A5 27        	lda	<L973+i_1
 23885 08:5FBD: 85 01        	sta	<R0
 23886 08:5FBF: 64 03        	stz	<R0+2
 23887 08:5FC1: 18           	clc
 23888 08:5FC2: A9 33 00     	lda	#$33
 23889 08:5FC5: 65 01        	adc	<R0
 23890 08:5FC7: 85 05        	sta	<R1
 23891 08:5FC9: A9 00 00     	lda	#$0
 23892 08:5FCC: 65 03        	adc	<R0+2
 23893 08:5FCE: 85 07        	sta	<R1+2
 23894 08:5FD0: 18           	clc
 23895 08:5FD1: A5 13        	lda	<L973+fs_1
 23896 08:5FD3: 65 05        	adc	<R1
 23897 08:5FD5: 85 01        	sta	<R0
 23898 08:5FD7: A5 15        	lda	<L973+fs_1+2
 23899 08:5FD9: 65 07        	adc	<R1+2
 23900 08:5FDB: 85 03        	sta	<R0+2
 23901 08:5FDD: D4 03        	pei	<R0+2
 23902 08:5FDF: D4 01        	pei	<R0
 23903 08:5FE1: 22 00 00 08  	jsl	~~ld_word
 23904 08:5FE5: AA           	tax
 23905 08:5FE6: F0 03        	beq	L990
 23906 08:5FE8: 82 06 00     	brl	L10567
 23907                        L990:
 23908                        	.line	5502
 23909 08:5FEB: E6 17        	inc	<L973+nfree_1
 23910 08:5FED: D0 02        	bne	L991
 23911 08:5FEF: E6 19        	inc	<L973+nfree_1+2
 23912                        L991:
 23913                        ;							
                    i += 2;
 23914                        L10567:
 23915                        	.line	5503
 23916 08:5FF1: E6 27        	inc	<L973+i_1
 23917 08:5FF3: E6 27        	inc	<L973+i_1
 23918                        ;						}
 23919                        	.line	5504
 23920                        ;						else
 23921 08:5FF5: 82 50 00     	brl	L10568
 23922                        L10566:
 23923                        ;						{
 23924                        	.line	5506
 23925                        ;							
                    if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0)
 23926                        	.line	5507
 23927                        ;							
                    	nfree++;
  Mon Aug  9 2021 16:52                                                Page 454


 23928 08:5FF8: A5 27        	lda	<L973+i_1
 23929 08:5FFA: 85 01        	sta	<R0
 23930 08:5FFC: 64 03        	stz	<R0+2
 23931 08:5FFE: 18           	clc
 23932 08:5FFF: A9 33 00     	lda	#$33
 23933 08:6002: 65 01        	adc	<R0
 23934 08:6004: 85 05        	sta	<R1
 23935 08:6006: A9 00 00     	lda	#$0
 23936 08:6009: 65 03        	adc	<R0+2
 23937 08:600B: 85 07        	sta	<R1+2
 23938 08:600D: 18           	clc
 23939 08:600E: A5 13        	lda	<L973+fs_1
 23940 08:6010: 65 05        	adc	<R1
 23941 08:6012: 85 01        	sta	<R0
 23942 08:6014: A5 15        	lda	<L973+fs_1+2
 23943 08:6016: 65 07        	adc	<R1+2
 23944 08:6018: 85 03        	sta	<R0+2
 23945 08:601A: D4 03        	pei	<R0+2
 23946 08:601C: D4 01        	pei	<R0
 23947 08:601E: 22 3B 00 08  	jsl	~~ld_dword
 23948 08:6022: 85 09        	sta	<R2
 23949 08:6024: 86 0B        	stx	<R2+2
 23950 08:6026: A5 09        	lda	<R2
 23951 08:6028: 85 0D        	sta	<R3
 23952 08:602A: A5 0B        	lda	<R2+2
 23953 08:602C: 29 FF 0F     	and	#^$fffffff
 23954 08:602F: 85 0F        	sta	<R3+2
 23955 08:6031: A5 0D        	lda	<R3
 23956 08:6033: 05 0F        	ora	<R3+2
 23957 08:6035: F0 03        	beq	L992
 23958 08:6037: 82 06 00     	brl	L10569
 23959                        L992:
 23960                        	.line	5508
 23961 08:603A: E6 17        	inc	<L973+nfree_1
 23962 08:603C: D0 02        	bne	L993
 23963 08:603E: E6 19        	inc	<L973+nfree_1+2
 23964                        L993:
 23965                        ;							
                    i += 4;
 23966                        L10569:
 23967                        	.line	5509
 23968 08:6040: 18           	clc
 23969 08:6041: A9 04 00     	lda	#$4
 23970 08:6044: 65 27        	adc	<L973+i_1
 23971 08:6046: 85 27        	sta	<L973+i_1
 23972                        ;						}
 23973                        	.line	5510
 23974                        L10568:
 23975                        ;						i %= SS(
                    fs);
 23976                        	.line	5511
 23977 08:6048: A9 00 FE     	lda	#$fe00
 23978 08:604B: 14 27        	trb	<L973+i_1
 23979                        ;					} while (--clst)
                    ;
 23980                        	.line	5512
 23981                        L10562:
 23982 08:604D: A5 1B        	lda	<L973+clst_1
  Mon Aug  9 2021 16:52                                                Page 455


 23983 08:604F: D0 02        	bne	L994
 23984 08:6051: C6 1D        	dec	<L973+clst_1+2
 23985                        L994:
 23986 08:6053: C6 1B        	dec	<L973+clst_1
 23987 08:6055: A5 1B        	lda	<L973+clst_1
 23988 08:6057: 05 1D        	ora	<L973+clst_1+2
 23989 08:6059: F0 03        	beq	L995
 23990 08:605B: 82 26 FF     	brl	L10564
 23991                        L995:
 23992                        L10563:
 23993                        ;				}
 23994                        	.line	5513
 23995                        ;			}
 23996                        	.line	5514
 23997                        L10561:
 23998                        ;			*nclst = nfree; /* Return the fr
                    ee clusters */
 23999                        	.line	5515
 24000 08:605E: A5 17        	lda	<L973+nfree_1
 24001 08:6060: 87 40        	sta	[<L972+nclst_0]
 24002 08:6062: A5 19        	lda	<L973+nfree_1+2
 24003 08:6064: A0 02 00     	ldy	#$2
 24004 08:6067: 97 40        	sta	[<L972+nclst_0],Y
 24005                        ;			fs->free_clst = nfree; /* Now fr
                    ee_clst is valid */
 24006                        	.line	5516
 24007 08:6069: A5 17        	lda	<L973+nfree_1
 24008 08:606B: A0 13 00     	ldy	#$13
 24009 08:606E: 97 13        	sta	[<L973+fs_1],Y
 24010 08:6070: A5 19        	lda	<L973+nfree_1+2
 24011 08:6072: A0 15 00     	ldy	#$15
 24012 08:6075: 97 13        	sta	[<L973+fs_1],Y
 24013                        ;			fs->fsi_flag |= 1; /* FAT32: FSI
                    nfo is to be updated */
 24014                        	.line	5517
 24015 08:6077: 18           	clc
 24016 08:6078: A9 04 00     	lda	#$4
 24017 08:607B: 65 13        	adc	<L973+fs_1
 24018 08:607D: 85 01        	sta	<R0
 24019 08:607F: A9 00 00     	lda	#$0
 24020 08:6082: 65 15        	adc	<L973+fs_1+2
 24021 08:6084: 85 03        	sta	<R0+2
 24022 08:6086: E2 20        	sep	#$20
 24023                        	longa	off
 24024 08:6088: A7 01        	lda	[<R0]
 24025 08:608A: 09 01        	ora	#<$1
 24026 08:608C: 87 01        	sta	[<R0]
 24027 08:608E: C2 20        	rep	#$20
 24028                        	longa	on
 24029                        ;		}
 24030                        	.line	5518
 24031                        L10553:
 24032                        ;	}
 24033                        	.line	5519
 24034                        ;
 24035                        ;	LEAVE_FF(fs, res);
 24036                        L10551:
 24037                        	.line	5521
  Mon Aug  9 2021 16:52                                                Page 456


 24038 08:6090: A5 11        	lda	<L973+res_1
 24039                        L996:
 24040 08:6092: A8           	tay
 24041 08:6093: A5 3A        	lda	<L972+2
 24042 08:6095: 85 46        	sta	<L972+2+12
 24043 08:6097: A5 39        	lda	<L972+1
 24044 08:6099: 85 45        	sta	<L972+1+12
 24045 08:609B: 2B           	pld
 24046 08:609C: 3B           	tsc
 24047 08:609D: 18           	clc
 24048 08:609E: 69 44 00     	adc	#L972+12
 24049 08:60A1: 1B           	tcs
 24050 08:60A2: 98           	tya
 24051 08:60A3: 6B           	rtl
 24052                        ;}
 24053                        	.line	5522
 24054                        	.endblock	5522
 24055             00000038   L972	equ	56
 24056             00000011   L973	equ	17
 24057 08:60A4:              	ends
 24058                        	efunc
 24059                        	.endfunc	5522,17,56
 24060                        	.line	5522
 24061                        ;
 24062                        ;/*-----------------------------------------------
                    ------------------------*/
 24063                        ;/* Truncate File                                 
                                            */
 24064                        ;/*-----------------------------------------------
                    ------------------------*/
 24065                        ;
 24066                        ;FRESULT f_truncate(FIL* fp /* Pointer to the file
                     object */
 24067                        ;)
 24068                        ;{
 24069                        	.line	5528
 24070                        	.line	5530
 24071                        	FFDOS
 24072                        	xdef	~~f_truncate
 24073                        	func
 24074                        	.function	5530
 24075                        ~~f_truncate:
 24076                        	longa	on
 24077                        	longi	on
 24078 08:60A4: 3B           	tsc
 24079 08:60A5: 38           	sec
 24080 08:60A6: E9 0E 00     	sbc	#L997
 24081 08:60A9: 1B           	tcs
 24082 08:60AA: 0B           	phd
 24083 08:60AB: 5B           	tcd
 24084             00000004   fp_0	set	4
 24085                        	.block	5530
 24086                        ;	FRESULT res;
 24087                        ;	FATFS *fs;
 24088                        ;	DWORD ncl;
 24089                        ;
 24090                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
  Mon Aug  9 2021 16:52                                                Page 457


 24091             00000000   res_1	set	0
 24092             00000002   fs_1	set	2
 24093             00000006   ncl_1	set	6
 24094                        	.sym	res,0,5,1,16
 24095                        	.sym	fs,2,138,1,32,75
 24096                        	.sym	ncl,6,18,1,32
 24097                        	.sym	fp,4,138,6,32,77
 24098                        	.line	5535
 24099 08:60AC: F4 00 00     	pea	#0
 24100 08:60AF: 18           	clc
 24101 08:60B0: 7B           	tdc
 24102 08:60B1: 69 07 00     	adc	#<L998+fs_1
 24103 08:60B4: 48           	pha
 24104 08:60B5: D4 14        	pei	<L997+fp_0+2
 24105 08:60B7: D4 12        	pei	<L997+fp_0
 24106 08:60B9: 22 57 44 08  	jsl	~~validate
 24107 08:60BD: 85 05        	sta	<L998+res_1
 24108                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 24109                        	.line	5536
 24110                        ;		LEAVE_FF(fs, res);
 24111 08:60BF: A5 05        	lda	<L998+res_1
 24112 08:60C1: F0 03        	beq	L1001
 24113 08:60C3: 82 11 00     	brl	L1000
 24114                        L1001:
 24115 08:60C6: A0 11 00     	ldy	#$11
 24116 08:60C9: B7 12        	lda	[<L997+fp_0],Y
 24117 08:60CB: 29 FF 00     	and	#$ff
 24118 08:60CE: 85 05        	sta	<L998+res_1
 24119 08:60D0: A5 05        	lda	<L998+res_1
 24120 08:60D2: D0 03        	bne	L1002
 24121 08:60D4: 82 14 00     	brl	L10570
 24122                        L1002:
 24123                        L1000:
 24124                        	.line	5537
 24125 08:60D7: A5 05        	lda	<L998+res_1
 24126                        L1003:
 24127 08:60D9: A8           	tay
 24128 08:60DA: A5 10        	lda	<L997+2
 24129 08:60DC: 85 14        	sta	<L997+2+4
 24130 08:60DE: A5 0F        	lda	<L997+1
 24131 08:60E0: 85 13        	sta	<L997+1+4
 24132 08:60E2: 2B           	pld
 24133 08:60E3: 3B           	tsc
 24134 08:60E4: 18           	clc
 24135 08:60E5: 69 12 00     	adc	#L997+4
 24136 08:60E8: 1B           	tcs
 24137 08:60E9: 98           	tya
 24138 08:60EA: 6B           	rtl
 24139                        ;	if (!(fp->flag & FA_WRITE))
 24140                        L10570:
 24141                        	.line	5538
 24142                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 24143 08:60EB: E2 20        	sep	#$20
 24144                        	longa	off
 24145 08:60ED: A0 10 00     	ldy	#$10
 24146 08:60F0: B7 12        	lda	[<L997+fp_0],Y
  Mon Aug  9 2021 16:52                                                Page 458


 24147 08:60F2: 29 02        	and	#<$2
 24148 08:60F4: C2 20        	rep	#$20
 24149                        	longa	on
 24150 08:60F6: F0 03        	beq	L1004
 24151 08:60F8: 82 06 00     	brl	L10571
 24152                        L1004:
 24153                        	.line	5539
 24154 08:60FB: A9 07 00     	lda	#$7
 24155 08:60FE: 82 D8 FF     	brl	L1003
 24156                        ;
 24157                        ;	if (fp->fptr < fp->obj.objsize)
 24158                        L10571:
 24159                        	.line	5541
 24160                        ;	{ /* Process when fptr is not on the eof */
 24161 08:6101: A0 12 00     	ldy	#$12
 24162 08:6104: B7 12        	lda	[<L997+fp_0],Y
 24163 08:6106: A0 0C 00     	ldy	#$c
 24164 08:6109: D7 12        	cmp	[<L997+fp_0],Y
 24165 08:610B: A0 14 00     	ldy	#$14
 24166 08:610E: B7 12        	lda	[<L997+fp_0],Y
 24167 08:6110: A0 0E 00     	ldy	#$e
 24168 08:6113: F7 12        	sbc	[<L997+fp_0],Y
 24169 08:6115: 90 03        	bcc	L1005
 24170 08:6117: 82 66 01     	brl	L10572
 24171                        L1005:
 24172                        	.line	5542
 24173                        ;		if (fp->fptr == 0)
 24174                        	.line	5543
 24175                        ;		{ /* When set file size to zero, remove 
                    entire cluster chain */
 24176 08:611A: A0 12 00     	ldy	#$12
 24177 08:611D: B7 12        	lda	[<L997+fp_0],Y
 24178 08:611F: A0 14 00     	ldy	#$14
 24179 08:6122: 17 12        	ora	[<L997+fp_0],Y
 24180 08:6124: F0 03        	beq	L1006
 24181 08:6126: 82 2F 00     	brl	L10573
 24182                        L1006:
 24183                        	.line	5544
 24184                        ;			res = remove_chain(&fp->obj, fp-
                    >obj.sclust, 0);
 24185                        	.line	5545
 24186 08:6129: F4 00 00     	pea	#^$0
 24187 08:612C: F4 00 00     	pea	#<$0
 24188 08:612F: A0 0A 00     	ldy	#$a
 24189 08:6132: B7 12        	lda	[<L997+fp_0],Y
 24190 08:6134: 48           	pha
 24191 08:6135: A0 08 00     	ldy	#$8
 24192 08:6138: B7 12        	lda	[<L997+fp_0],Y
 24193 08:613A: 48           	pha
 24194 08:613B: D4 14        	pei	<L997+fp_0+2
 24195 08:613D: D4 12        	pei	<L997+fp_0
 24196 08:613F: 22 E0 10 08  	jsl	~~remove_chain
 24197 08:6143: 85 05        	sta	<L998+res_1
 24198                        ;			fp->obj.sclust = 0;
 24199                        	.line	5546
 24200 08:6145: A9 00 00     	lda	#$0
 24201 08:6148: A0 08 00     	ldy	#$8
 24202 08:614B: 97 12        	sta	[<L997+fp_0],Y
  Mon Aug  9 2021 16:52                                                Page 459


 24203 08:614D: A9 00 00     	lda	#$0
 24204 08:6150: A0 0A 00     	ldy	#$a
 24205 08:6153: 97 12        	sta	[<L997+fp_0],Y
 24206                        ;		}
 24207                        	.line	5547
 24208                        ;		else
 24209 08:6155: 82 7A 00     	brl	L10574
 24210                        L10573:
 24211                        ;		{ /* When truncate a part of the file, r
                    emove remaining clusters */
 24212                        	.line	5549
 24213                        ;			ncl = get_fat(&fp->obj, fp->clus
                    t);
 24214                        	.line	5550
 24215 08:6158: A0 18 00     	ldy	#$18
 24216 08:615B: B7 12        	lda	[<L997+fp_0],Y
 24217 08:615D: 48           	pha
 24218 08:615E: A0 16 00     	ldy	#$16
 24219 08:6161: B7 12        	lda	[<L997+fp_0],Y
 24220 08:6163: 48           	pha
 24221 08:6164: D4 14        	pei	<L997+fp_0+2
 24222 08:6166: D4 12        	pei	<L997+fp_0
 24223 08:6168: 22 2A 0B 08  	jsl	~~get_fat
 24224 08:616C: 85 0B        	sta	<L998+ncl_1
 24225 08:616E: 86 0D        	stx	<L998+ncl_1+2
 24226                        ;			res = FR_OK;
 24227                        	.line	5551
 24228 08:6170: 64 05        	stz	<L998+res_1
 24229                        ;			if (ncl == 0xFFFFFFFF)
 24230                        	.line	5552
 24231                        ;				res = FR_DISK_ERR;
 24232 08:6172: A5 0B        	lda	<L998+ncl_1
 24233 08:6174: C9 FF FF     	cmp	#<$ffffffff
 24234 08:6177: D0 05        	bne	L1007
 24235 08:6179: A5 0D        	lda	<L998+ncl_1+2
 24236 08:617B: C9 FF FF     	cmp	#^$ffffffff
 24237                        L1007:
 24238 08:617E: F0 03        	beq	L1008
 24239 08:6180: 82 05 00     	brl	L10575
 24240                        L1008:
 24241                        	.line	5553
 24242 08:6183: A9 01 00     	lda	#$1
 24243 08:6186: 85 05        	sta	<L998+res_1
 24244                        ;			if (ncl == 1)
 24245                        L10575:
 24246                        	.line	5554
 24247                        ;				res = FR_INT_ERR;
 24248 08:6188: A5 0B        	lda	<L998+ncl_1
 24249 08:618A: C9 01 00     	cmp	#<$1
 24250 08:618D: D0 05        	bne	L1009
 24251 08:618F: A5 0D        	lda	<L998+ncl_1+2
 24252 08:6191: C9 00 00     	cmp	#^$1
 24253                        L1009:
 24254 08:6194: F0 03        	beq	L1010
 24255 08:6196: 82 05 00     	brl	L10576
 24256                        L1010:
 24257                        	.line	5555
 24258 08:6199: A9 02 00     	lda	#$2
  Mon Aug  9 2021 16:52                                                Page 460


 24259 08:619C: 85 05        	sta	<L998+res_1
 24260                        ;			if (res == FR_OK && ncl < fs->n_
                    fatent)
 24261                        L10576:
 24262                        	.line	5556
 24263                        ;			{
 24264 08:619E: A5 05        	lda	<L998+res_1
 24265 08:61A0: F0 03        	beq	L1011
 24266 08:61A2: 82 2D 00     	brl	L10577
 24267                        L1011:
 24268 08:61A5: A5 0B        	lda	<L998+ncl_1
 24269 08:61A7: A0 17 00     	ldy	#$17
 24270 08:61AA: D7 07        	cmp	[<L998+fs_1],Y
 24271 08:61AC: A5 0D        	lda	<L998+ncl_1+2
 24272 08:61AE: A0 19 00     	ldy	#$19
 24273 08:61B1: F7 07        	sbc	[<L998+fs_1],Y
 24274 08:61B3: 90 03        	bcc	L1012
 24275 08:61B5: 82 1A 00     	brl	L10577
 24276                        L1012:
 24277                        	.line	5557
 24278                        ;				res = remove_chain(&fp->
                    obj, ncl, fp->clust);
 24279                        	.line	5558
 24280 08:61B8: A0 18 00     	ldy	#$18
 24281 08:61BB: B7 12        	lda	[<L997+fp_0],Y
 24282 08:61BD: 48           	pha
 24283 08:61BE: A0 16 00     	ldy	#$16
 24284 08:61C1: B7 12        	lda	[<L997+fp_0],Y
 24285 08:61C3: 48           	pha
 24286 08:61C4: D4 0D        	pei	<L998+ncl_1+2
 24287 08:61C6: D4 0B        	pei	<L998+ncl_1
 24288 08:61C8: D4 14        	pei	<L997+fp_0+2
 24289 08:61CA: D4 12        	pei	<L997+fp_0
 24290 08:61CC: 22 E0 10 08  	jsl	~~remove_chain
 24291 08:61D0: 85 05        	sta	<L998+res_1
 24292                        ;			}
 24293                        	.line	5559
 24294                        ;		}
 24295                        L10577:
 24296                        	.line	5560
 24297                        L10574:
 24298                        ;		fp->obj.objsize = fp->fptr; /* Set file 
                    size to current read/write point */
 24299                        	.line	5561
 24300 08:61D2: A0 12 00     	ldy	#$12
 24301 08:61D5: B7 12        	lda	[<L997+fp_0],Y
 24302 08:61D7: A0 0C 00     	ldy	#$c
 24303 08:61DA: 97 12        	sta	[<L997+fp_0],Y
 24304 08:61DC: A0 14 00     	ldy	#$14
 24305 08:61DF: B7 12        	lda	[<L997+fp_0],Y
 24306 08:61E1: A0 0E 00     	ldy	#$e
 24307 08:61E4: 97 12        	sta	[<L997+fp_0],Y
 24308                        ;		fp->flag |= FA_MODIFIED;
 24309                        	.line	5562
 24310 08:61E6: 18           	clc
 24311 08:61E7: A9 10 00     	lda	#$10
 24312 08:61EA: 65 12        	adc	<L997+fp_0
 24313 08:61EC: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 461


 24314 08:61EE: A9 00 00     	lda	#$0
 24315 08:61F1: 65 14        	adc	<L997+fp_0+2
 24316 08:61F3: 85 03        	sta	<R0+2
 24317 08:61F5: E2 20        	sep	#$20
 24318                        	longa	off
 24319 08:61F7: A7 01        	lda	[<R0]
 24320 08:61F9: 09 40        	ora	#<$40
 24321 08:61FB: 87 01        	sta	[<R0]
 24322 08:61FD: C2 20        	rep	#$20
 24323                        	longa	on
 24324                        ;#if !FF_FS_TINY
 24325                        ;		if (res == FR_OK && (fp->flag & FA_DIRTY
                    ))
 24326                        	.line	5564
 24327                        ;		{
 24328 08:61FF: A5 05        	lda	<L998+res_1
 24329 08:6201: F0 03        	beq	L1013
 24330 08:6203: 82 63 00     	brl	L10578
 24331                        L1013:
 24332 08:6206: E2 20        	sep	#$20
 24333                        	longa	off
 24334 08:6208: A0 10 00     	ldy	#$10
 24335 08:620B: B7 12        	lda	[<L997+fp_0],Y
 24336 08:620D: 29 80        	and	#<$80
 24337 08:620F: C2 20        	rep	#$20
 24338                        	longa	on
 24339 08:6211: D0 03        	bne	L1014
 24340 08:6213: 82 53 00     	brl	L10578
 24341                        L1014:
 24342                        	.line	5565
 24343                        ;			if (disk_write(fs->pdrv, fp->buf
                    , fp->sect, 1) != RES_OK)
 24344                        	.line	5566
 24345                        ;			{
 24346 08:6216: F4 01 00     	pea	#<$1
 24347 08:6219: A0 1C 00     	ldy	#$1c
 24348 08:621C: B7 12        	lda	[<L997+fp_0],Y
 24349 08:621E: 48           	pha
 24350 08:621F: A0 1A 00     	ldy	#$1a
 24351 08:6222: B7 12        	lda	[<L997+fp_0],Y
 24352 08:6224: 48           	pha
 24353 08:6225: 18           	clc
 24354 08:6226: A9 26 00     	lda	#$26
 24355 08:6229: 65 12        	adc	<L997+fp_0
 24356 08:622B: 85 01        	sta	<R0
 24357 08:622D: A9 00 00     	lda	#$0
 24358 08:6230: 65 14        	adc	<L997+fp_0+2
 24359 08:6232: 85 03        	sta	<R0+2
 24360 08:6234: D4 03        	pei	<R0+2
 24361 08:6236: D4 01        	pei	<R0
 24362 08:6238: A0 01 00     	ldy	#$1
 24363 08:623B: B7 07        	lda	[<L998+fs_1],Y
 24364 08:623D: 48           	pha
 24365 08:623E: 22 xx xx xx  	jsl	~~disk_write
 24366 08:6242: AA           	tax
 24367 08:6243: D0 03        	bne	L1015
 24368 08:6245: 82 08 00     	brl	L10579
 24369                        L1015:
  Mon Aug  9 2021 16:52                                                Page 462


 24370                        	.line	5567
 24371                        ;				res = FR_DISK_ERR;
 24372                        	.line	5568
 24373 08:6248: A9 01 00     	lda	#$1
 24374 08:624B: 85 05        	sta	<L998+res_1
 24375                        ;			}
 24376                        	.line	5569
 24377                        ;			else
 24378 08:624D: 82 19 00     	brl	L10580
 24379                        L10579:
 24380                        ;			{
 24381                        	.line	5571
 24382                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 24383                        	.line	5572
 24384 08:6250: 18           	clc
 24385 08:6251: A9 10 00     	lda	#$10
 24386 08:6254: 65 12        	adc	<L997+fp_0
 24387 08:6256: 85 01        	sta	<R0
 24388 08:6258: A9 00 00     	lda	#$0
 24389 08:625B: 65 14        	adc	<L997+fp_0+2
 24390 08:625D: 85 03        	sta	<R0+2
 24391 08:625F: E2 20        	sep	#$20
 24392                        	longa	off
 24393 08:6261: A7 01        	lda	[<R0]
 24394 08:6263: 29 7F        	and	#<$7f
 24395 08:6265: 87 01        	sta	[<R0]
 24396 08:6267: C2 20        	rep	#$20
 24397                        	longa	on
 24398                        ;			}
 24399                        	.line	5573
 24400                        L10580:
 24401                        ;		}
 24402                        	.line	5574
 24403                        ;#endif
 24404                        ;		if (res != FR_OK)
 24405                        L10578:
 24406                        	.line	5576
 24407                        ;			ABORT(fs, res);
 24408 08:6269: A5 05        	lda	<L998+res_1
 24409 08:626B: D0 03        	bne	L1016
 24410 08:626D: 82 10 00     	brl	L10581
 24411                        L1016:
 24412                        	.line	5577
 24413                        	.line	5577
 24414 08:6270: E2 20        	sep	#$20
 24415                        	longa	off
 24416 08:6272: A5 05        	lda	<L998+res_1
 24417 08:6274: A0 11 00     	ldy	#$11
 24418 08:6277: 97 12        	sta	[<L997+fp_0],Y
 24419 08:6279: C2 20        	rep	#$20
 24420                        	longa	on
 24421                        	.line	5577
 24422 08:627B: A5 05        	lda	<L998+res_1
 24423 08:627D: 82 59 FE     	brl	L1003
 24424                        	.line	5577
 24425                        L10581:
 24426                        	.line	5577
  Mon Aug  9 2021 16:52                                                Page 463


 24427                        ;	}
 24428                        	.line	5578
 24429                        ;
 24430                        ;	LEAVE_FF(fs, res);
 24431                        L10572:
 24432                        	.line	5580
 24433 08:6280: A5 05        	lda	<L998+res_1
 24434 08:6282: 82 54 FE     	brl	L1003
 24435                        ;}
 24436                        	.line	5581
 24437                        	.endblock	5581
 24438             0000000E   L997	equ	14
 24439             00000005   L998	equ	5
 24440 08:6285:              	ends
 24441                        	efunc
 24442                        	.endfunc	5581,5,14
 24443                        	.line	5581
 24444                        ;
 24445                        ;/*-----------------------------------------------
                    ------------------------*/
 24446                        ;/* Delete a File/Directory                       
                                            */
 24447                        ;/*-----------------------------------------------
                    ------------------------*/
 24448                        ;
 24449                        ;FRESULT f_unlink(const TCHAR* path /* Pointer to 
                    the file or directory path */
 24450                        ;)
 24451                        ;{
 24452                        	.line	5587
 24453                        	.line	5589
 24454                        	FFDOS
 24455                        	xdef	~~f_unlink
 24456                        	func
 24457                        	.function	5589
 24458                        ~~f_unlink:
 24459                        	longa	on
 24460                        	longi	on
 24461 08:6285: 3B           	tsc
 24462 08:6286: 38           	sec
 24463 08:6287: E9 76 00     	sbc	#L1017
 24464 08:628A: 1B           	tcs
 24465 08:628B: 0B           	phd
 24466 08:628C: 5B           	tcd
 24467             00000004   path_0	set	4
 24468                        	.block	5589
 24469                        ;	FRESULT res;
 24470                        ;	DIR dj, sdj;
 24471                        ;	DWORD dclst = 0;
 24472                        ;	FATFS *fs;
 24473                        ;#if FF_FS_EXFAT
 24474                        ;	FFOBJID obj;
 24475                        ;#endif
 24476                        ;	DEF_NAMBUF
 24477                        ;
 24478                        ;	/* Get logical drive */
 24479                        ;	res = mount_volume(&path, &fs, FA_WRITE);
 24480             00000000   res_1	set	0
  Mon Aug  9 2021 16:52                                                Page 464


 24481             00000002   dj_1	set	2
 24482             00000036   sdj_1	set	54
 24483             0000006A   dclst_1	set	106
 24484             0000006E   fs_1	set	110
 24485             00000072   lfn_1	set	114
 24486                        	.sym	res,0,5,1,16
 24487                        	.sym	dj,2,10,1,416,78
 24488                        	.sym	sdj,54,10,1,416,78
 24489                        	.sym	dclst,106,18,1,32
 24490                        	.sym	fs,110,138,1,32,75
 24491                        	.sym	lfn,114,144,1,32
 24492                        	.sym	path,4,142,6,32
 24493 08:628D: 64 6B        	stz	<L1018+dclst_1
 24494 08:628F: 64 6D        	stz	<L1018+dclst_1+2
 24495                        	.line	5600
 24496 08:6291: F4 02 00     	pea	#<$2
 24497 08:6294: F4 00 00     	pea	#0
 24498 08:6297: 18           	clc
 24499 08:6298: 7B           	tdc
 24500 08:6299: 69 6F 00     	adc	#<L1018+fs_1
 24501 08:629C: 48           	pha
 24502 08:629D: F4 00 00     	pea	#0
 24503 08:62A0: 18           	clc
 24504 08:62A1: 7B           	tdc
 24505 08:62A2: 69 7A 00     	adc	#<L1017+path_0
 24506 08:62A5: 48           	pha
 24507 08:62A6: 22 84 3D 08  	jsl	~~mount_volume
 24508 08:62AA: 85 01        	sta	<L1018+res_1
 24509                        ;	if (res == FR_OK)
 24510                        	.line	5601
 24511                        ;	{
 24512 08:62AC: A5 01        	lda	<L1018+res_1
 24513 08:62AE: F0 03        	beq	L1020
 24514 08:62B0: 82 6E 01     	brl	L10582
 24515                        L1020:
 24516                        	.line	5602
 24517                        ;		dj.obj.fs = fs;
 24518                        	.line	5603
 24519 08:62B3: A5 6F        	lda	<L1018+fs_1
 24520 08:62B5: 85 03        	sta	<L1018+dj_1
 24521 08:62B7: A5 71        	lda	<L1018+fs_1+2
 24522 08:62B9: 85 05        	sta	<L1018+dj_1+2
 24523                        ;		INIT_NAMBUF(fs);
 24524                        	.line	5604
 24525                        	.line	5604
 24526 08:62BB: F4 00 02     	pea	#<$200
 24527 08:62BE: 22 40 92 08  	jsl	~~ff_memalloc
 24528 08:62C2: 85 73        	sta	<L1018+lfn_1
 24529 08:62C4: 86 75        	stx	<L1018+lfn_1+2
 24530                        	.line	5604
 24531 08:62C6: A5 73        	lda	<L1018+lfn_1
 24532 08:62C8: 05 75        	ora	<L1018+lfn_1+2
 24533 08:62CA: F0 03        	beq	L1021
 24534 08:62CC: 82 15 00     	brl	L10583
 24535                        L1021:
 24536                        	.line	5604
 24537 08:62CF: A9 11 00     	lda	#$11
 24538                        L1022:
  Mon Aug  9 2021 16:52                                                Page 465


 24539 08:62D2: A8           	tay
 24540 08:62D3: A5 78        	lda	<L1017+2
 24541 08:62D5: 85 7C        	sta	<L1017+2+4
 24542 08:62D7: A5 77        	lda	<L1017+1
 24543 08:62D9: 85 7B        	sta	<L1017+1+4
 24544 08:62DB: 2B           	pld
 24545 08:62DC: 3B           	tsc
 24546 08:62DD: 18           	clc
 24547 08:62DE: 69 7A 00     	adc	#L1017+4
 24548 08:62E1: 1B           	tcs
 24549 08:62E2: 98           	tya
 24550 08:62E3: 6B           	rtl
 24551                        L10583:
 24552                        	.line	5604
 24553 08:62E4: A5 73        	lda	<L1018+lfn_1
 24554 08:62E6: A0 0B 00     	ldy	#$b
 24555 08:62E9: 97 6F        	sta	[<L1018+fs_1],Y
 24556 08:62EB: A5 75        	lda	<L1018+lfn_1+2
 24557 08:62ED: A0 0D 00     	ldy	#$d
 24558 08:62F0: 97 6F        	sta	[<L1018+fs_1],Y
 24559                        	.line	5604
 24560                        	.line	5604
 24561                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 24562                        	.line	5605
 24563 08:62F2: D4 7C        	pei	<L1017+path_0+2
 24564 08:62F4: D4 7A        	pei	<L1017+path_0
 24565 08:62F6: F4 00 00     	pea	#0
 24566 08:62F9: 18           	clc
 24567 08:62FA: 7B           	tdc
 24568 08:62FB: 69 03 00     	adc	#<L1018+dj_1
 24569 08:62FE: 48           	pha
 24570 08:62FF: 22 01 37 08  	jsl	~~follow_path
 24571 08:6303: 85 01        	sta	<L1018+res_1
 24572                        ;		if (FF_FS_RPATH && res == FR_OK && (dj.f
                    n[NSFLAG] & NS_DOT))
 24573                        	.line	5606
 24574                        ;		{
 24575 08:6305: 82 19 00     	brl	L10584
 24576 08:6308: A5 01        	lda	<L1018+res_1
 24577 08:630A: F0 03        	beq	L1023
 24578 08:630C: 82 12 00     	brl	L10584
 24579                        L1023:
 24580 08:630F: E2 20        	sep	#$20
 24581                        	longa	off
 24582 08:6311: A5 2E        	lda	<L1018+dj_1+43
 24583 08:6313: 29 20        	and	#<$20
 24584 08:6315: C2 20        	rep	#$20
 24585                        	longa	on
 24586 08:6317: D0 03        	bne	L1024
 24587 08:6319: 82 05 00     	brl	L10584
 24588                        L1024:
 24589                        	.line	5607
 24590                        ;			res = FR_INVALID_NAME; /* Cannot
                     remove dot entry */
 24591                        	.line	5608
 24592 08:631C: A9 06 00     	lda	#$6
 24593 08:631F: 85 01        	sta	<L1018+res_1
  Mon Aug  9 2021 16:52                                                Page 466


 24594                        ;		}
 24595                        	.line	5609
 24596                        ;#if FF_FS_LOCK != 0
 24597                        ;		if (res == FR_OK) res = chk_lock(&dj, 2)
                    ; /* Check if it is an open object */
 24598                        ;#endif
 24599                        ;		if (res == FR_OK)
 24600                        L10584:
 24601                        	.line	5613
 24602                        ;		{ /* The object is accessible */
 24603 08:6321: A5 01        	lda	<L1018+res_1
 24604 08:6323: F0 03        	beq	L1025
 24605 08:6325: 82 F1 00     	brl	L10585
 24606                        L1025:
 24607                        	.line	5614
 24608                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 24609                        	.line	5615
 24610                        ;			{
 24611 08:6328: E2 20        	sep	#$20
 24612                        	longa	off
 24613 08:632A: A5 2E        	lda	<L1018+dj_1+43
 24614 08:632C: 29 80        	and	#<$80
 24615 08:632E: C2 20        	rep	#$20
 24616                        	longa	on
 24617 08:6330: D0 03        	bne	L1026
 24618 08:6332: 82 08 00     	brl	L10586
 24619                        L1026:
 24620                        	.line	5616
 24621                        ;				res = FR_INVALID_NAME; /
                    * Cannot remove the origin directory */
 24622                        	.line	5617
 24623 08:6335: A9 06 00     	lda	#$6
 24624 08:6338: 85 01        	sta	<L1018+res_1
 24625                        ;			}
 24626                        	.line	5618
 24627                        ;			else
 24628 08:633A: 82 12 00     	brl	L10587
 24629                        L10586:
 24630                        ;			{
 24631                        	.line	5620
 24632                        ;				if (dj.obj.attr & AM_RDO
                    )
 24633                        	.line	5621
 24634                        ;				{
 24635 08:633D: E2 20        	sep	#$20
 24636                        	longa	off
 24637 08:633F: A5 09        	lda	<L1018+dj_1+6
 24638 08:6341: 29 01        	and	#<$1
 24639 08:6343: C2 20        	rep	#$20
 24640                        	longa	on
 24641 08:6345: D0 03        	bne	L1027
 24642 08:6347: 82 05 00     	brl	L10588
 24643                        L1027:
 24644                        	.line	5622
 24645                        ;					res = FR_DENIED;
                     /* Cannot remove R/O object */
 24646                        	.line	5623
 24647 08:634A: A9 07 00     	lda	#$7
  Mon Aug  9 2021 16:52                                                Page 467


 24648 08:634D: 85 01        	sta	<L1018+res_1
 24649                        ;				}
 24650                        	.line	5624
 24651                        ;			}
 24652                        L10588:
 24653                        	.line	5625
 24654                        L10587:
 24655                        ;			if (res == FR_OK)
 24656                        	.line	5626
 24657                        ;			{
 24658 08:634F: A5 01        	lda	<L1018+res_1
 24659 08:6351: F0 03        	beq	L1028
 24660 08:6353: 82 73 00     	brl	L10589
 24661                        L1028:
 24662                        	.line	5627
 24663                        ;#if FF_FS_EXFAT
 24664                        ;				obj.fs = fs;
 24665                        ;				if (fs->fs_type == FS_EX
                    FAT)
 24666                        ;				{
 24667                        ;					init_alloc_info(
                    fs, &obj);
 24668                        ;					dclst = obj.sclu
                    st;
 24669                        ;				}
 24670                        ;				else
 24671                        ;#endif
 24672                        ;				{
 24673                        	.line	5637
 24674                        ;					dclst = ld_clust
                    (fs, dj.dir);
 24675                        	.line	5638
 24676 08:6356: D4 21        	pei	<L1018+dj_1+30
 24677 08:6358: D4 1F        	pei	<L1018+dj_1+28
 24678 08:635A: D4 71        	pei	<L1018+fs_1+2
 24679 08:635C: D4 6F        	pei	<L1018+fs_1
 24680 08:635E: 22 EC 1C 08  	jsl	~~ld_clust
 24681 08:6362: 85 6B        	sta	<L1018+dclst_1
 24682 08:6364: 86 6D        	stx	<L1018+dclst_1+2
 24683                        ;				}
 24684                        	.line	5639
 24685                        ;				if (dj.obj.attr & AM_DIR
                    )
 24686                        	.line	5640
 24687                        ;				{ /* Is it a sub-directo
                    ry? */
 24688 08:6366: E2 20        	sep	#$20
 24689                        	longa	off
 24690 08:6368: A5 09        	lda	<L1018+dj_1+6
 24691 08:636A: 29 10        	and	#<$10
 24692 08:636C: C2 20        	rep	#$20
 24693                        	longa	on
 24694 08:636E: D0 03        	bne	L1029
 24695 08:6370: 82 56 00     	brl	L10590
 24696                        L1029:
 24697                        	.line	5641
 24698                        ;#if FF_FS_RPATH != 0
 24699                        ;					if (dclst == fs-
  Mon Aug  9 2021 16:52                                                Page 468


                    >cdir)
 24700                        ;					{ /* Is it the c
                    urrent directory? */
 24701                        ;						res = FR
                    _DENIED;
 24702                        ;					}
 24703                        ;					else
 24704                        ;#endif
 24705                        ;					{
 24706                        	.line	5649
 24707                        ;						sdj.obj.
                    fs = fs; /* Open the sub-directory */
 24708                        	.line	5650
 24709 08:6373: A5 6F        	lda	<L1018+fs_1
 24710 08:6375: 85 37        	sta	<L1018+sdj_1
 24711 08:6377: A5 71        	lda	<L1018+fs_1+2
 24712 08:6379: 85 39        	sta	<L1018+sdj_1+2
 24713                        ;						sdj.obj.
                    sclust = dclst;
 24714                        	.line	5651
 24715 08:637B: A5 6B        	lda	<L1018+dclst_1
 24716 08:637D: 85 3F        	sta	<L1018+sdj_1+8
 24717 08:637F: A5 6D        	lda	<L1018+dclst_1+2
 24718 08:6381: 85 41        	sta	<L1018+sdj_1+10
 24719                        ;#if FF_FS_EXFAT
 24720                        ;						if (fs->
                    fs_type == FS_EXFAT)
 24721                        ;						{
 24722                        ;							
                    sdj.obj.objsize = obj.objsize;
 24723                        ;							
                    sdj.obj.stat = obj.stat;
 24724                        ;						}
 24725                        ;#endif
 24726                        ;						res = di
                    r_sdi(&sdj, 0);
 24727                        	.line	5659
 24728 08:6383: F4 00 00     	pea	#^$0
 24729 08:6386: F4 00 00     	pea	#<$0
 24730 08:6389: F4 00 00     	pea	#0
 24731 08:638C: 18           	clc
 24732 08:638D: 7B           	tdc
 24733 08:638E: 69 37 00     	adc	#<L1018+sdj_1
 24734 08:6391: 48           	pha
 24735 08:6392: 22 36 17 08  	jsl	~~dir_sdi
 24736 08:6396: 85 01        	sta	<L1018+res_1
 24737                        ;						if (res 
                    == FR_OK)
 24738                        	.line	5660
 24739                        ;						{
 24740 08:6398: A5 01        	lda	<L1018+res_1
 24741 08:639A: F0 03        	beq	L1030
 24742 08:639C: 82 2A 00     	brl	L10591
 24743                        L1030:
 24744                        	.line	5661
 24745                        ;							
                    res = DIR_READ_FILE(&sdj); /* Test if the directory is empty
                     */
  Mon Aug  9 2021 16:52                                                Page 469


 24746                        	.line	5662
 24747 08:639F: F4 00 00     	pea	#<$0
 24748 08:63A2: F4 00 00     	pea	#0
 24749 08:63A5: 18           	clc
 24750 08:63A6: 7B           	tdc
 24751 08:63A7: 69 37 00     	adc	#<L1018+sdj_1
 24752 08:63AA: 48           	pha
 24753 08:63AB: 22 71 23 08  	jsl	~~dir_read
 24754 08:63AF: 85 01        	sta	<L1018+res_1
 24755                        ;							
                    if (res == FR_OK)
 24756                        	.line	5663
 24757                        ;							
                    	res = FR_DENIED; /* Not empty? */
 24758 08:63B1: A5 01        	lda	<L1018+res_1
 24759 08:63B3: F0 03        	beq	L1031
 24760 08:63B5: 82 05 00     	brl	L10592
 24761                        L1031:
 24762                        	.line	5664
 24763 08:63B8: A9 07 00     	lda	#$7
 24764 08:63BB: 85 01        	sta	<L1018+res_1
 24765                        ;							
                    if (res == FR_NO_FILE)
 24766                        L10592:
 24767                        	.line	5665
 24768                        ;							
                    	res = FR_OK; /* Empty? */
 24769 08:63BD: A5 01        	lda	<L1018+res_1
 24770 08:63BF: C9 04 00     	cmp	#<$4
 24771 08:63C2: F0 03        	beq	L1032
 24772 08:63C4: 82 02 00     	brl	L10593
 24773                        L1032:
 24774                        	.line	5666
 24775 08:63C7: 64 01        	stz	<L1018+res_1
 24776                        ;						}
 24777                        L10593:
 24778                        	.line	5667
 24779                        ;					}
 24780                        L10591:
 24781                        	.line	5668
 24782                        ;				}
 24783                        	.line	5669
 24784                        ;			}
 24785                        L10590:
 24786                        	.line	5670
 24787                        ;			if (res == FR_OK)
 24788                        L10589:
 24789                        	.line	5671
 24790                        ;			{
 24791 08:63C9: A5 01        	lda	<L1018+res_1
 24792 08:63CB: F0 03        	beq	L1033
 24793 08:63CD: 82 49 00     	brl	L10594
 24794                        L1033:
 24795                        	.line	5672
 24796                        ;				res = dir_remove(&dj); /
                    * Remove the directory entry */
 24797                        	.line	5673
 24798 08:63D0: F4 00 00     	pea	#0
  Mon Aug  9 2021 16:52                                                Page 470


 24799 08:63D3: 18           	clc
 24800 08:63D4: 7B           	tdc
 24801 08:63D5: 69 03 00     	adc	#<L1018+dj_1
 24802 08:63D8: 48           	pha
 24803 08:63D9: 22 D2 2A 08  	jsl	~~dir_remove
 24804 08:63DD: 85 01        	sta	<L1018+res_1
 24805                        ;				if (res == FR_OK && dcls
                    t != 0)
 24806                        	.line	5674
 24807                        ;				{ /* Remove the cluster 
                    chain if exist */
 24808 08:63DF: A5 01        	lda	<L1018+res_1
 24809 08:63E1: F0 03        	beq	L1034
 24810 08:63E3: 82 22 00     	brl	L10595
 24811                        L1034:
 24812 08:63E6: A5 6B        	lda	<L1018+dclst_1
 24813 08:63E8: 05 6D        	ora	<L1018+dclst_1+2
 24814 08:63EA: D0 03        	bne	L1035
 24815 08:63EC: 82 19 00     	brl	L10595
 24816                        L1035:
 24817                        	.line	5675
 24818                        ;#if FF_FS_EXFAT
 24819                        ;					res = remove_cha
                    in(&obj, dclst, 0);
 24820                        ;#else
 24821                        ;					res = remove_cha
                    in(&dj.obj, dclst, 0);
 24822                        	.line	5679
 24823 08:63EF: F4 00 00     	pea	#^$0
 24824 08:63F2: F4 00 00     	pea	#<$0
 24825 08:63F5: D4 6D        	pei	<L1018+dclst_1+2
 24826 08:63F7: D4 6B        	pei	<L1018+dclst_1
 24827 08:63F9: F4 00 00     	pea	#0
 24828 08:63FC: 18           	clc
 24829 08:63FD: 7B           	tdc
 24830 08:63FE: 69 03 00     	adc	#<L1018+dj_1
 24831 08:6401: 48           	pha
 24832 08:6402: 22 E0 10 08  	jsl	~~remove_chain
 24833 08:6406: 85 01        	sta	<L1018+res_1
 24834                        ;#endif
 24835                        ;				}
 24836                        	.line	5681
 24837                        ;				if (res == FR_OK)
 24838                        L10595:
 24839                        	.line	5682
 24840                        ;					res = sync_fs(fs
                    );
 24841 08:6408: A5 01        	lda	<L1018+res_1
 24842 08:640A: F0 03        	beq	L1036
 24843 08:640C: 82 0A 00     	brl	L10596
 24844                        L1036:
 24845                        	.line	5683
 24846 08:640F: D4 71        	pei	<L1018+fs_1+2
 24847 08:6411: D4 6F        	pei	<L1018+fs_1
 24848 08:6413: 22 22 09 08  	jsl	~~sync_fs
 24849 08:6417: 85 01        	sta	<L1018+res_1
 24850                        ;			}
 24851                        L10596:
  Mon Aug  9 2021 16:52                                                Page 471


 24852                        	.line	5684
 24853                        ;		} FREE_NAMBUF();
 24854                        L10594:
 24855                        	.line	5685
 24856                        L10585:
 24857                        	.line	5685
 24858 08:6419: D4 75        	pei	<L1018+lfn_1+2
 24859 08:641B: D4 73        	pei	<L1018+lfn_1
 24860 08:641D: 22 70 92 08  	jsl	~~ff_memfree
 24861                        ;	}
 24862                        	.line	5686
 24863                        ;
 24864                        ;	LEAVE_FF(fs, res);
 24865                        L10582:
 24866                        	.line	5688
 24867 08:6421: A5 01        	lda	<L1018+res_1
 24868 08:6423: 82 AC FE     	brl	L1022
 24869                        ;}
 24870                        	.line	5689
 24871                        	.endblock	5689
 24872             00000076   L1017	equ	118
 24873             00000001   L1018	equ	1
 24874 08:6426:              	ends
 24875                        	efunc
 24876                        	.endfunc	5689,1,118
 24877                        	.line	5689
 24878                        ;
 24879                        ;/*-----------------------------------------------
                    ------------------------*/
 24880                        ;/* Create a Directory                            
                                            */
 24881                        ;/*-----------------------------------------------
                    ------------------------*/
 24882                        ;
 24883                        ;FRESULT f_mkdir(const TCHAR* path /* Pointer to t
                    he directory path */
 24884                        ;)
 24885                        ;{
 24886                        	.line	5695
 24887                        	.line	5697
 24888                        	FFDOS
 24889                        	xdef	~~f_mkdir
 24890                        	func
 24891                        	.function	5697
 24892                        ~~f_mkdir:
 24893                        	longa	on
 24894                        	longi	on
 24895 08:6426: 3B           	tsc
 24896 08:6427: 38           	sec
 24897 08:6428: E9 62 00     	sbc	#L1037
 24898 08:642B: 1B           	tcs
 24899 08:642C: 0B           	phd
 24900 08:642D: 5B           	tcd
 24901             00000004   path_0	set	4
 24902                        	.block	5697
 24903                        ;	FRESULT res;
 24904                        ;	DIR dj;
 24905                        ;	FFOBJID sobj;
  Mon Aug  9 2021 16:52                                                Page 472


 24906                        ;	FATFS *fs;
 24907                        ;	DWORD dcl, pcl, tm;
 24908                        ;	DEF_NAMBUF
 24909                        ;
 24910                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 24911             00000000   res_1	set	0
 24912             00000002   dj_1	set	2
 24913             00000036   sobj_1	set	54
 24914             00000046   fs_1	set	70
 24915             0000004A   dcl_1	set	74
 24916             0000004E   pcl_1	set	78
 24917             00000052   tm_1	set	82
 24918             00000056   lfn_1	set	86
 24919                        	.sym	res,0,5,1,16
 24920                        	.sym	dj,2,10,1,416,78
 24921                        	.sym	sobj,54,10,1,128,76
 24922                        	.sym	fs,70,138,1,32,75
 24923                        	.sym	dcl,74,18,1,32
 24924                        	.sym	pcl,78,18,1,32
 24925                        	.sym	tm,82,18,1,32
 24926                        	.sym	lfn,86,144,1,32
 24927                        	.sym	path,4,142,6,32
 24928                        	.line	5705
 24929 08:642E: F4 02 00     	pea	#<$2
 24930 08:6431: F4 00 00     	pea	#0
 24931 08:6434: 18           	clc
 24932 08:6435: 7B           	tdc
 24933 08:6436: 69 4F 00     	adc	#<L1038+fs_1
 24934 08:6439: 48           	pha
 24935 08:643A: F4 00 00     	pea	#0
 24936 08:643D: 18           	clc
 24937 08:643E: 7B           	tdc
 24938 08:643F: 69 66 00     	adc	#<L1037+path_0
 24939 08:6442: 48           	pha
 24940 08:6443: 22 84 3D 08  	jsl	~~mount_volume
 24941 08:6447: 85 09        	sta	<L1038+res_1
 24942                        ;	if (res == FR_OK)
 24943                        	.line	5706
 24944                        ;	{
 24945 08:6449: A5 09        	lda	<L1038+res_1
 24946 08:644B: F0 03        	beq	L1040
 24947 08:644D: 82 79 02     	brl	L10597
 24948                        L1040:
 24949                        	.line	5707
 24950                        ;		dj.obj.fs = fs;
 24951                        	.line	5708
 24952 08:6450: A5 4F        	lda	<L1038+fs_1
 24953 08:6452: 85 0B        	sta	<L1038+dj_1
 24954 08:6454: A5 51        	lda	<L1038+fs_1+2
 24955 08:6456: 85 0D        	sta	<L1038+dj_1+2
 24956                        ;		INIT_NAMBUF(fs);
 24957                        	.line	5709
 24958                        	.line	5709
 24959 08:6458: F4 00 02     	pea	#<$200
 24960 08:645B: 22 40 92 08  	jsl	~~ff_memalloc
 24961 08:645F: 85 5F        	sta	<L1038+lfn_1
 24962 08:6461: 86 61        	stx	<L1038+lfn_1+2
  Mon Aug  9 2021 16:52                                                Page 473


 24963                        	.line	5709
 24964 08:6463: A5 5F        	lda	<L1038+lfn_1
 24965 08:6465: 05 61        	ora	<L1038+lfn_1+2
 24966 08:6467: F0 03        	beq	L1041
 24967 08:6469: 82 15 00     	brl	L10598
 24968                        L1041:
 24969                        	.line	5709
 24970 08:646C: A9 11 00     	lda	#$11
 24971                        L1042:
 24972 08:646F: A8           	tay
 24973 08:6470: A5 64        	lda	<L1037+2
 24974 08:6472: 85 68        	sta	<L1037+2+4
 24975 08:6474: A5 63        	lda	<L1037+1
 24976 08:6476: 85 67        	sta	<L1037+1+4
 24977 08:6478: 2B           	pld
 24978 08:6479: 3B           	tsc
 24979 08:647A: 18           	clc
 24980 08:647B: 69 66 00     	adc	#L1037+4
 24981 08:647E: 1B           	tcs
 24982 08:647F: 98           	tya
 24983 08:6480: 6B           	rtl
 24984                        L10598:
 24985                        	.line	5709
 24986 08:6481: A5 5F        	lda	<L1038+lfn_1
 24987 08:6483: A0 0B 00     	ldy	#$b
 24988 08:6486: 97 4F        	sta	[<L1038+fs_1],Y
 24989 08:6488: A5 61        	lda	<L1038+lfn_1+2
 24990 08:648A: A0 0D 00     	ldy	#$d
 24991 08:648D: 97 4F        	sta	[<L1038+fs_1],Y
 24992                        	.line	5709
 24993                        	.line	5709
 24994                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 24995                        	.line	5710
 24996 08:648F: D4 68        	pei	<L1037+path_0+2
 24997 08:6491: D4 66        	pei	<L1037+path_0
 24998 08:6493: F4 00 00     	pea	#0
 24999 08:6496: 18           	clc
 25000 08:6497: 7B           	tdc
 25001 08:6498: 69 0B 00     	adc	#<L1038+dj_1
 25002 08:649B: 48           	pha
 25003 08:649C: 22 01 37 08  	jsl	~~follow_path
 25004 08:64A0: 85 09        	sta	<L1038+res_1
 25005                        ;		if (res == FR_OK)
 25006                        	.line	5711
 25007                        ;			res = FR_EXIST; /* Name collisio
                    n? */
 25008 08:64A2: A5 09        	lda	<L1038+res_1
 25009 08:64A4: F0 03        	beq	L1043
 25010 08:64A6: 82 05 00     	brl	L10599
 25011                        L1043:
 25012                        	.line	5712
 25013 08:64A9: A9 08 00     	lda	#$8
 25014 08:64AC: 85 09        	sta	<L1038+res_1
 25015                        ;		if (FF_FS_RPATH && res == FR_NO_FILE && 
                    (dj.fn[NSFLAG] & NS_DOT))
 25016                        L10599:
 25017                        	.line	5713
  Mon Aug  9 2021 16:52                                                Page 474


 25018                        ;		{ /* Invalid name? */
 25019 08:64AE: 82 1C 00     	brl	L10600
 25020 08:64B1: A5 09        	lda	<L1038+res_1
 25021 08:64B3: C9 04 00     	cmp	#<$4
 25022 08:64B6: F0 03        	beq	L1044
 25023 08:64B8: 82 12 00     	brl	L10600
 25024                        L1044:
 25025 08:64BB: E2 20        	sep	#$20
 25026                        	longa	off
 25027 08:64BD: A5 36        	lda	<L1038+dj_1+43
 25028 08:64BF: 29 20        	and	#<$20
 25029 08:64C1: C2 20        	rep	#$20
 25030                        	longa	on
 25031 08:64C3: D0 03        	bne	L1045
 25032 08:64C5: 82 05 00     	brl	L10600
 25033                        L1045:
 25034                        	.line	5714
 25035                        ;			res = FR_INVALID_NAME;
 25036                        	.line	5715
 25037 08:64C8: A9 06 00     	lda	#$6
 25038 08:64CB: 85 09        	sta	<L1038+res_1
 25039                        ;		}
 25040                        	.line	5716
 25041                        ;		if (res == FR_NO_FILE)
 25042                        L10600:
 25043                        	.line	5717
 25044                        ;		{ /* It is clear to create a new directo
                    ry */
 25045 08:64CD: A5 09        	lda	<L1038+res_1
 25046 08:64CF: C9 04 00     	cmp	#<$4
 25047 08:64D2: F0 03        	beq	L1046
 25048 08:64D4: 82 EA 01     	brl	L10601
 25049                        L1046:
 25050                        	.line	5718
 25051                        ;			sobj.fs = fs; /* New object id t
                    o create a new chain */
 25052                        	.line	5719
 25053 08:64D7: A5 4F        	lda	<L1038+fs_1
 25054 08:64D9: 85 3F        	sta	<L1038+sobj_1
 25055 08:64DB: A5 51        	lda	<L1038+fs_1+2
 25056 08:64DD: 85 41        	sta	<L1038+sobj_1+2
 25057                        ;			dcl = create_chain(&sobj, 0); /*
                     Allocate a cluster for the new directory */
 25058                        	.line	5720
 25059 08:64DF: F4 00 00     	pea	#^$0
 25060 08:64E2: F4 00 00     	pea	#<$0
 25061 08:64E5: F4 00 00     	pea	#0
 25062 08:64E8: 18           	clc
 25063 08:64E9: 7B           	tdc
 25064 08:64EA: 69 3F 00     	adc	#<L1038+sobj_1
 25065 08:64ED: 48           	pha
 25066 08:64EE: 22 69 12 08  	jsl	~~create_chain
 25067 08:64F2: 85 53        	sta	<L1038+dcl_1
 25068 08:64F4: 86 55        	stx	<L1038+dcl_1+2
 25069                        ;
 25070                        ;			//k_debug_long("f_mkdir::create_
                    chain:dcl:",dcl);
 25071                        ;
  Mon Aug  9 2021 16:52                                                Page 475


 25072                        ;			res = FR_OK;
 25073                        	.line	5724
 25074 08:64F6: 64 09        	stz	<L1038+res_1
 25075                        ;			if (dcl == 0)
 25076                        	.line	5725
 25077                        ;				res = FR_DENIED; /* No s
                    pace to allocate a new cluster? */
 25078 08:64F8: A5 53        	lda	<L1038+dcl_1
 25079 08:64FA: 05 55        	ora	<L1038+dcl_1+2
 25080 08:64FC: F0 03        	beq	L1047
 25081 08:64FE: 82 05 00     	brl	L10602
 25082                        L1047:
 25083                        	.line	5726
 25084 08:6501: A9 07 00     	lda	#$7
 25085 08:6504: 85 09        	sta	<L1038+res_1
 25086                        ;			if (dcl == 1)
 25087                        L10602:
 25088                        	.line	5727
 25089                        ;				res = FR_INT_ERR; /* Any
                     insanity? */
 25090 08:6506: A5 53        	lda	<L1038+dcl_1
 25091 08:6508: C9 01 00     	cmp	#<$1
 25092 08:650B: D0 05        	bne	L1048
 25093 08:650D: A5 55        	lda	<L1038+dcl_1+2
 25094 08:650F: C9 00 00     	cmp	#^$1
 25095                        L1048:
 25096 08:6512: F0 03        	beq	L1049
 25097 08:6514: 82 05 00     	brl	L10603
 25098                        L1049:
 25099                        	.line	5728
 25100 08:6517: A9 02 00     	lda	#$2
 25101 08:651A: 85 09        	sta	<L1038+res_1
 25102                        ;			if (dcl == 0xFFFFFFFF)
 25103                        L10603:
 25104                        	.line	5729
 25105                        ;				res = FR_DISK_ERR; /* Di
                    sk error? */
 25106 08:651C: A5 53        	lda	<L1038+dcl_1
 25107 08:651E: C9 FF FF     	cmp	#<$ffffffff
 25108 08:6521: D0 05        	bne	L1050
 25109 08:6523: A5 55        	lda	<L1038+dcl_1+2
 25110 08:6525: C9 FF FF     	cmp	#^$ffffffff
 25111                        L1050:
 25112 08:6528: F0 03        	beq	L1051
 25113 08:652A: 82 05 00     	brl	L10604
 25114                        L1051:
 25115                        	.line	5730
 25116 08:652D: A9 01 00     	lda	#$1
 25117 08:6530: 85 09        	sta	<L1038+res_1
 25118                        ;
 25119                        ;			tm = GET_FATTIME();
 25120                        L10604:
 25121                        	.line	5732
 25122 08:6532: A9 00 00     	lda	#$0
 25123 08:6535: 85 5B        	sta	<L1038+tm_1
 25124 08:6537: A9 21 52     	lda	#$5221
 25125 08:653A: 85 5D        	sta	<L1038+tm_1+2
 25126                        ;
  Mon Aug  9 2021 16:52                                                Page 476


 25127                        ;			//k_debug_long("f_mkdir::create_
                    chain:tm:",tm);
 25128                        ;			//k_debug_integer("f_mkdir::crea
                    te_chain:res:",res);
 25129                        ;
 25130                        ;			if (res == FR_OK)
 25131                        	.line	5737
 25132                        ;			{
 25133 08:653C: A5 09        	lda	<L1038+res_1
 25134 08:653E: F0 03        	beq	L1052
 25135 08:6540: 82 0B 01     	brl	L10605
 25136                        L1052:
 25137                        	.line	5738
 25138                        ;				res = dir_clear(fs, dcl)
                    ; /* Clean up the new table */
 25139                        	.line	5739
 25140 08:6543: D4 55        	pei	<L1038+dcl_1+2
 25141 08:6545: D4 53        	pei	<L1038+dcl_1
 25142 08:6547: D4 51        	pei	<L1038+fs_1+2
 25143 08:6549: D4 4F        	pei	<L1038+fs_1
 25144 08:654B: 22 84 15 08  	jsl	~~dir_clear
 25145 08:654F: 85 09        	sta	<L1038+res_1
 25146                        ;
 25147                        ;				//k_debug_integer("f_mkd
                    ir::dir_clear:",res);
 25148                        ;
 25149                        ;				if (res == FR_OK)
 25150                        	.line	5743
 25151                        ;				{
 25152 08:6551: A5 09        	lda	<L1038+res_1
 25153 08:6553: F0 03        	beq	L1053
 25154 08:6555: 82 F6 00     	brl	L10606
 25155                        L1053:
 25156                        	.line	5744
 25157                        ;					if (!FF_FS_EXFAT
                     || fs->fs_type != FS_EXFAT)
 25158                        	.line	5745
 25159                        ;					{ /* Create dot 
                    entries (FAT only) */
 25160 08:6558: 82 0D 00     	brl	L1054
 25161 08:655B: E2 20        	sep	#$20
 25162                        	longa	off
 25163 08:655D: A7 4F        	lda	[<L1038+fs_1]
 25164 08:655F: C9 04        	cmp	#<$4
 25165 08:6561: C2 20        	rep	#$20
 25166                        	longa	on
 25167 08:6563: D0 03        	bne	L1055
 25168 08:6565: 82 D7 00     	brl	L10607
 25169                        L1055:
 25170                        L1054:
 25171                        	.line	5746
 25172                        ;						mem_set(
                    fs->win + DIR_Name, ' ', 11); /* Create "." entry */
 25173                        	.line	5747
 25174 08:6568: F4 0B 00     	pea	#<$b
 25175 08:656B: F4 20 00     	pea	#<$20
 25176 08:656E: 18           	clc
 25177 08:656F: A9 33 00     	lda	#$33
  Mon Aug  9 2021 16:52                                                Page 477


 25178 08:6572: 65 4F        	adc	<L1038+fs_1
 25179 08:6574: 85 01        	sta	<R0
 25180 08:6576: A9 00 00     	lda	#$0
 25181 08:6579: 65 51        	adc	<L1038+fs_1+2
 25182 08:657B: 85 03        	sta	<R0+2
 25183 08:657D: D4 03        	pei	<R0+2
 25184 08:657F: D4 01        	pei	<R0
 25185 08:6581: 22 DF 01 08  	jsl	~~mem_set
 25186                        ;						fs->win[
                    DIR_Name] = '.';
 25187                        	.line	5748
 25188 08:6585: E2 20        	sep	#$20
 25189                        	longa	off
 25190 08:6587: A9 2E        	lda	#$2e
 25191 08:6589: A0 33 00     	ldy	#$33
 25192 08:658C: 97 4F        	sta	[<L1038+fs_1],Y
 25193 08:658E: C2 20        	rep	#$20
 25194                        	longa	on
 25195                        ;						fs->win[
                    DIR_Attr] = AM_DIR;
 25196                        	.line	5749
 25197 08:6590: E2 20        	sep	#$20
 25198                        	longa	off
 25199 08:6592: A9 10        	lda	#$10
 25200 08:6594: A0 3E 00     	ldy	#$3e
 25201 08:6597: 97 4F        	sta	[<L1038+fs_1],Y
 25202 08:6599: C2 20        	rep	#$20
 25203                        	longa	on
 25204                        ;						st_dword
                    (fs->win + DIR_ModTime, tm);
 25205                        	.line	5750
 25206 08:659B: D4 5D        	pei	<L1038+tm_1+2
 25207 08:659D: D4 5B        	pei	<L1038+tm_1
 25208 08:659F: 18           	clc
 25209 08:65A0: A9 49 00     	lda	#$49
 25210 08:65A3: 65 4F        	adc	<L1038+fs_1
 25211 08:65A5: 85 01        	sta	<R0
 25212 08:65A7: A9 00 00     	lda	#$0
 25213 08:65AA: 65 51        	adc	<L1038+fs_1+2
 25214 08:65AC: 85 03        	sta	<R0+2
 25215 08:65AE: D4 03        	pei	<R0+2
 25216 08:65B0: D4 01        	pei	<R0
 25217 08:65B2: 22 16 01 08  	jsl	~~st_dword
 25218                        ;						st_clust
                    (fs, fs->win, dcl);
 25219                        	.line	5751
 25220 08:65B6: D4 55        	pei	<L1038+dcl_1+2
 25221 08:65B8: D4 53        	pei	<L1038+dcl_1
 25222 08:65BA: 18           	clc
 25223 08:65BB: A9 33 00     	lda	#$33
 25224 08:65BE: 65 4F        	adc	<L1038+fs_1
 25225 08:65C0: 85 01        	sta	<R0
 25226 08:65C2: A9 00 00     	lda	#$0
 25227 08:65C5: 65 51        	adc	<L1038+fs_1+2
 25228 08:65C7: 85 03        	sta	<R0+2
 25229 08:65C9: D4 03        	pei	<R0+2
 25230 08:65CB: D4 01        	pei	<R0
 25231 08:65CD: D4 51        	pei	<L1038+fs_1+2
  Mon Aug  9 2021 16:52                                                Page 478


 25232 08:65CF: D4 4F        	pei	<L1038+fs_1
 25233 08:65D1: 22 7C 1D 08  	jsl	~~st_clust
 25234                        ;						mem_cpy(
                    fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 25235                        	.line	5752
 25236 08:65D5: F4 20 00     	pea	#<$20
 25237 08:65D8: 18           	clc
 25238 08:65D9: A9 33 00     	lda	#$33
 25239 08:65DC: 65 4F        	adc	<L1038+fs_1
 25240 08:65DE: 85 01        	sta	<R0
 25241 08:65E0: A9 00 00     	lda	#$0
 25242 08:65E3: 65 51        	adc	<L1038+fs_1+2
 25243 08:65E5: 85 03        	sta	<R0+2
 25244 08:65E7: D4 03        	pei	<R0+2
 25245 08:65E9: D4 01        	pei	<R0
 25246 08:65EB: 18           	clc
 25247 08:65EC: A9 53 00     	lda	#$53
 25248 08:65EF: 65 4F        	adc	<L1038+fs_1
 25249 08:65F1: 85 05        	sta	<R1
 25250 08:65F3: A9 00 00     	lda	#$0
 25251 08:65F6: 65 51        	adc	<L1038+fs_1+2
 25252 08:65F8: 85 07        	sta	<R1+2
 25253 08:65FA: D4 07        	pei	<R1+2
 25254 08:65FC: D4 05        	pei	<R1
 25255 08:65FE: 22 93 01 08  	jsl	~~mem_cpy
 25256                        ;						fs->win[
                    SZDIRE + 1] = '.';
 25257                        	.line	5753
 25258 08:6602: E2 20        	sep	#$20
 25259                        	longa	off
 25260 08:6604: A9 2E        	lda	#$2e
 25261 08:6606: A0 54 00     	ldy	#$54
 25262 08:6609: 97 4F        	sta	[<L1038+fs_1],Y
 25263 08:660B: C2 20        	rep	#$20
 25264                        	longa	on
 25265                        ;						pcl = dj
                    .obj.sclust;
 25266                        	.line	5754
 25267 08:660D: A5 13        	lda	<L1038+dj_1+8
 25268 08:660F: 85 57        	sta	<L1038+pcl_1
 25269 08:6611: A5 15        	lda	<L1038+dj_1+10
 25270 08:6613: 85 59        	sta	<L1038+pcl_1+2
 25271                        ;						st_clust
                    (fs, fs->win + SZDIRE, pcl);
 25272                        	.line	5755
 25273 08:6615: D4 59        	pei	<L1038+pcl_1+2
 25274 08:6617: D4 57        	pei	<L1038+pcl_1
 25275 08:6619: 18           	clc
 25276 08:661A: A9 53 00     	lda	#$53
 25277 08:661D: 65 4F        	adc	<L1038+fs_1
 25278 08:661F: 85 01        	sta	<R0
 25279 08:6621: A9 00 00     	lda	#$0
 25280 08:6624: 65 51        	adc	<L1038+fs_1+2
 25281 08:6626: 85 03        	sta	<R0+2
 25282 08:6628: D4 03        	pei	<R0+2
 25283 08:662A: D4 01        	pei	<R0
 25284 08:662C: D4 51        	pei	<L1038+fs_1+2
 25285 08:662E: D4 4F        	pei	<L1038+fs_1
  Mon Aug  9 2021 16:52                                                Page 479


 25286 08:6630: 22 7C 1D 08  	jsl	~~st_clust
 25287                        ;						fs->wfla
                    g = 1;
 25288                        	.line	5756
 25289 08:6634: E2 20        	sep	#$20
 25290                        	longa	off
 25291 08:6636: A9 01        	lda	#$1
 25292 08:6638: A0 03 00     	ldy	#$3
 25293 08:663B: 97 4F        	sta	[<L1038+fs_1],Y
 25294 08:663D: C2 20        	rep	#$20
 25295                        	longa	on
 25296                        ;					}
 25297                        	.line	5757
 25298                        ;					res = dir_regist
                    er(&dj); /* Register the object to the parent directoy */
 25299                        L10607:
 25300                        	.line	5758
 25301 08:663F: F4 00 00     	pea	#0
 25302 08:6642: 18           	clc
 25303 08:6643: 7B           	tdc
 25304 08:6644: 69 0B 00     	adc	#<L1038+dj_1
 25305 08:6647: 48           	pha
 25306 08:6648: 22 1E 28 08  	jsl	~~dir_register
 25307 08:664C: 85 09        	sta	<L1038+res_1
 25308                        ;					//k_debug_intege
                    r("f_mkdir::dir_register:",res);
 25309                        ;				}
 25310                        	.line	5760
 25311                        ;			}
 25312                        L10606:
 25313                        	.line	5761
 25314                        ;			if (res == FR_OK)
 25315                        L10605:
 25316                        	.line	5762
 25317                        ;			{
 25318 08:664E: A5 09        	lda	<L1038+res_1
 25319 08:6650: F0 03        	beq	L1056
 25320 08:6652: 82 55 00     	brl	L10608
 25321                        L1056:
 25322                        	.line	5763
 25323                        ;#if FF_FS_EXFAT
 25324                        ;				if (fs->fs_type == FS_EX
                    FAT)
 25325                        ;				{ /* Initialize director
                    y entry block */
 25326                        ;					st_dword(fs->dir
                    buf + XDIR_ModTime, tm); /* Created time */
 25327                        ;					st_dword(fs->dir
                    buf + XDIR_FstClus, dcl); /* Table start cluster */
 25328                        ;					st_dword(fs->dir
                    buf + XDIR_FileSize, (DWORD)fs->csize * SS(fs)); /* Director
                    y size needs to be valid */
 25329                        ;					st_dword(fs->dir
                    buf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
 25330                        ;					fs->dirbuf[XDIR_
                    GenFlags] = 3; /* Initialize the object flag */
 25331                        ;					fs->dirbuf[XDIR_
                    Attr] = AM_DIR; /* Attribute */
  Mon Aug  9 2021 16:52                                                Page 480


 25332                        ;					res = store_xdir
                    (&dj);
 25333                        ;				}
 25334                        ;				else
 25335                        ;#endif
 25336                        ;				{
 25337                        	.line	5777
 25338                        ;					st_dword(dj.dir 
                    + DIR_ModTime, tm); /* Created time */
 25339                        	.line	5778
 25340 08:6655: D4 5D        	pei	<L1038+tm_1+2
 25341 08:6657: D4 5B        	pei	<L1038+tm_1
 25342 08:6659: 18           	clc
 25343 08:665A: A9 16 00     	lda	#$16
 25344 08:665D: 65 27        	adc	<L1038+dj_1+28
 25345 08:665F: 85 01        	sta	<R0
 25346 08:6661: A9 00 00     	lda	#$0
 25347 08:6664: 65 29        	adc	<L1038+dj_1+30
 25348 08:6666: 85 03        	sta	<R0+2
 25349 08:6668: D4 03        	pei	<R0+2
 25350 08:666A: D4 01        	pei	<R0
 25351 08:666C: 22 16 01 08  	jsl	~~st_dword
 25352                        ;					st_clust(fs, dj.
                    dir, dcl); /* Table start cluster */
 25353                        	.line	5779
 25354 08:6670: D4 55        	pei	<L1038+dcl_1+2
 25355 08:6672: D4 53        	pei	<L1038+dcl_1
 25356 08:6674: D4 29        	pei	<L1038+dj_1+30
 25357 08:6676: D4 27        	pei	<L1038+dj_1+28
 25358 08:6678: D4 51        	pei	<L1038+fs_1+2
 25359 08:667A: D4 4F        	pei	<L1038+fs_1
 25360 08:667C: 22 7C 1D 08  	jsl	~~st_clust
 25361                        ;					dj.dir[DIR_Attr]
                     = AM_DIR; /* Attribute */
 25362                        	.line	5780
 25363 08:6680: E2 20        	sep	#$20
 25364                        	longa	off
 25365 08:6682: A9 10        	lda	#$10
 25366 08:6684: A0 0B 00     	ldy	#$b
 25367 08:6687: 97 27        	sta	[<L1038+dj_1+28],Y
 25368 08:6689: C2 20        	rep	#$20
 25369                        	longa	on
 25370                        ;					fs->wflag = 1;
 25371                        	.line	5781
 25372 08:668B: E2 20        	sep	#$20
 25373                        	longa	off
 25374 08:668D: A9 01        	lda	#$1
 25375 08:668F: A0 03 00     	ldy	#$3
 25376 08:6692: 97 4F        	sta	[<L1038+fs_1],Y
 25377 08:6694: C2 20        	rep	#$20
 25378                        	longa	on
 25379                        ;				}
 25380                        	.line	5782
 25381                        ;				if (res == FR_OK)
 25382                        	.line	5783
 25383                        ;				{
 25384 08:6696: A5 09        	lda	<L1038+res_1
 25385 08:6698: F0 03        	beq	L1057
  Mon Aug  9 2021 16:52                                                Page 481


 25386 08:669A: 82 0A 00     	brl	L10609
 25387                        L1057:
 25388                        	.line	5784
 25389                        ;					res = sync_fs(fs
                    );
 25390                        	.line	5785
 25391 08:669D: D4 51        	pei	<L1038+fs_1+2
 25392 08:669F: D4 4F        	pei	<L1038+fs_1
 25393 08:66A1: 22 22 09 08  	jsl	~~sync_fs
 25394 08:66A5: 85 09        	sta	<L1038+res_1
 25395                        ;				}
 25396                        	.line	5786
 25397                        ;
 25398                        ;				//k_debug_integer("f_mkd
                    ir::sync_fs:",res);
 25399                        ;			}
 25400                        L10609:
 25401                        	.line	5789
 25402                        ;			else
 25403 08:66A7: 82 17 00     	brl	L10610
 25404                        L10608:
 25405                        ;			{
 25406                        	.line	5791
 25407                        ;				remove_chain(&sobj, dcl,
                     0); /* Could not register, remove the allocated cluster */
 25408                        	.line	5792
 25409 08:66AA: F4 00 00     	pea	#^$0
 25410 08:66AD: F4 00 00     	pea	#<$0
 25411 08:66B0: D4 55        	pei	<L1038+dcl_1+2
 25412 08:66B2: D4 53        	pei	<L1038+dcl_1
 25413 08:66B4: F4 00 00     	pea	#0
 25414 08:66B7: 18           	clc
 25415 08:66B8: 7B           	tdc
 25416 08:66B9: 69 3F 00     	adc	#<L1038+sobj_1
 25417 08:66BC: 48           	pha
 25418 08:66BD: 22 E0 10 08  	jsl	~~remove_chain
 25419                        ;			}
 25420                        	.line	5793
 25421                        L10610:
 25422                        ;		} FREE_NAMBUF();
 25423                        	.line	5794
 25424                        L10601:
 25425                        	.line	5794
 25426 08:66C1: D4 61        	pei	<L1038+lfn_1+2
 25427 08:66C3: D4 5F        	pei	<L1038+lfn_1
 25428 08:66C5: 22 70 92 08  	jsl	~~ff_memfree
 25429                        ;	}
 25430                        	.line	5795
 25431                        ;
 25432                        ;	LEAVE_FF(fs, res);
 25433                        L10597:
 25434                        	.line	5797
 25435 08:66C9: A5 09        	lda	<L1038+res_1
 25436 08:66CB: 82 A1 FD     	brl	L1042
 25437                        ;}
 25438                        	.line	5798
 25439                        	.endblock	5798
 25440             00000062   L1037	equ	98
  Mon Aug  9 2021 16:52                                                Page 482


 25441             00000009   L1038	equ	9
 25442 08:66CE:              	ends
 25443                        	efunc
 25444                        	.endfunc	5798,9,98
 25445                        	.line	5798
 25446                        ;
 25447                        ;/*-----------------------------------------------
                    ------------------------*/
 25448                        ;/* Rename a File/Directory                       
                                            */
 25449                        ;/*-----------------------------------------------
                    ------------------------*/
 25450                        ;
 25451                        ;FRESULT f_rename(const TCHAR* path_old, /* Pointe
                    r to the object name to be renamed */
 25452                        ;const TCHAR* path_new /* Pointer to the new name 
                    */
 25453                        ;)
 25454                        ;{
 25455                        	.line	5804
 25456                        	.line	5807
 25457                        	FFDOS
 25458                        	xdef	~~f_rename
 25459                        	func
 25460                        	.function	5807
 25461                        ~~f_rename:
 25462                        	longa	on
 25463                        	longi	on
 25464 08:66CE: 3B           	tsc
 25465 08:66CF: 38           	sec
 25466 08:66D0: E9 9E 00     	sbc	#L1058
 25467 08:66D3: 1B           	tcs
 25468 08:66D4: 0B           	phd
 25469 08:66D5: 5B           	tcd
 25470             00000004   path_old_0	set	4
 25471             00000008   path_new_0	set	8
 25472                        	.block	5807
 25473                        ;	FRESULT res;
 25474                        ;	DIR djo, djn;
 25475                        ;	FATFS *fs;
 25476                        ;	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *di
                    r;
 25477                        ;	LBA_t sect;
 25478                        ;	DEF_NAMBUF
 25479                        ;
 25480                        ;	get_ldnumber(&path_new); /* Snip the drive numbe
                    r of new name off */
 25481             00000000   res_1	set	0
 25482             00000002   djo_1	set	2
 25483             00000036   djn_1	set	54
 25484             0000006A   fs_1	set	106
 25485             0000006E   buf_1	set	110
 25486             0000008E   dir_1	set	142
 25487             00000092   sect_1	set	146
 25488             00000096   lfn_1	set	150
 25489                        	.sym	res,0,5,1,16
 25490                        	.sym	djo,2,10,1,416,78
 25491                        	.sym	djn,54,10,1,416,78
  Mon Aug  9 2021 16:52                                                Page 483


 25492                        	.sym	fs,106,138,1,32,75
 25493                        	.sym	buf,110,110,1,0,32
 25494                        	.sym	dir,142,142,1,32
 25495                        	.sym	sect,146,18,1,32
 25496                        	.sym	lfn,150,144,1,32
 25497                        	.sym	path_old,4,142,6,32
 25498                        	.sym	path_new,8,142,6,32
 25499                        	.line	5815
 25500 08:66D6: F4 00 00     	pea	#0
 25501 08:66D9: 18           	clc
 25502 08:66DA: 7B           	tdc
 25503 08:66DB: 69 A6 00     	adc	#<L1058+path_new_0
 25504 08:66DE: 48           	pha
 25505 08:66DF: 22 76 38 08  	jsl	~~get_ldnumber
 25506                        ;	res = mount_volume(&path_old, &fs, FA_WRITE); /*
                     Get logical drive of the old object */
 25507                        	.line	5816
 25508 08:66E3: F4 02 00     	pea	#<$2
 25509 08:66E6: F4 00 00     	pea	#0
 25510 08:66E9: 18           	clc
 25511 08:66EA: 7B           	tdc
 25512 08:66EB: 69 6F 00     	adc	#<L1059+fs_1
 25513 08:66EE: 48           	pha
 25514 08:66EF: F4 00 00     	pea	#0
 25515 08:66F2: 18           	clc
 25516 08:66F3: 7B           	tdc
 25517 08:66F4: 69 A2 00     	adc	#<L1058+path_old_0
 25518 08:66F7: 48           	pha
 25519 08:66F8: 22 84 3D 08  	jsl	~~mount_volume
 25520 08:66FC: 85 05        	sta	<L1059+res_1
 25521                        ;	if (res == FR_OK)
 25522                        	.line	5817
 25523                        ;	{
 25524 08:66FE: A5 05        	lda	<L1059+res_1
 25525 08:6700: F0 03        	beq	L1061
 25526 08:6702: 82 37 02     	brl	L10611
 25527                        L1061:
 25528                        	.line	5818
 25529                        ;		djo.obj.fs = fs;
 25530                        	.line	5819
 25531 08:6705: A5 6F        	lda	<L1059+fs_1
 25532 08:6707: 85 07        	sta	<L1059+djo_1
 25533 08:6709: A5 71        	lda	<L1059+fs_1+2
 25534 08:670B: 85 09        	sta	<L1059+djo_1+2
 25535                        ;		INIT_NAMBUF(fs);
 25536                        	.line	5820
 25537                        	.line	5820
 25538 08:670D: F4 00 02     	pea	#<$200
 25539 08:6710: 22 40 92 08  	jsl	~~ff_memalloc
 25540 08:6714: 85 9B        	sta	<L1059+lfn_1
 25541 08:6716: 86 9D        	stx	<L1059+lfn_1+2
 25542                        	.line	5820
 25543 08:6718: A5 9B        	lda	<L1059+lfn_1
 25544 08:671A: 05 9D        	ora	<L1059+lfn_1+2
 25545 08:671C: F0 03        	beq	L1062
 25546 08:671E: 82 15 00     	brl	L10612
 25547                        L1062:
 25548                        	.line	5820
  Mon Aug  9 2021 16:52                                                Page 484


 25549 08:6721: A9 11 00     	lda	#$11
 25550                        L1063:
 25551 08:6724: A8           	tay
 25552 08:6725: A5 A0        	lda	<L1058+2
 25553 08:6727: 85 A8        	sta	<L1058+2+8
 25554 08:6729: A5 9F        	lda	<L1058+1
 25555 08:672B: 85 A7        	sta	<L1058+1+8
 25556 08:672D: 2B           	pld
 25557 08:672E: 3B           	tsc
 25558 08:672F: 18           	clc
 25559 08:6730: 69 A6 00     	adc	#L1058+8
 25560 08:6733: 1B           	tcs
 25561 08:6734: 98           	tya
 25562 08:6735: 6B           	rtl
 25563                        L10612:
 25564                        	.line	5820
 25565 08:6736: A5 9B        	lda	<L1059+lfn_1
 25566 08:6738: A0 0B 00     	ldy	#$b
 25567 08:673B: 97 6F        	sta	[<L1059+fs_1],Y
 25568 08:673D: A5 9D        	lda	<L1059+lfn_1+2
 25569 08:673F: A0 0D 00     	ldy	#$d
 25570 08:6742: 97 6F        	sta	[<L1059+fs_1],Y
 25571                        	.line	5820
 25572                        	.line	5820
 25573                        ;		res = follow_path(&djo, path_old); /* Ch
                    eck old object */
 25574                        	.line	5821
 25575 08:6744: D4 A4        	pei	<L1058+path_old_0+2
 25576 08:6746: D4 A2        	pei	<L1058+path_old_0
 25577 08:6748: F4 00 00     	pea	#0
 25578 08:674B: 18           	clc
 25579 08:674C: 7B           	tdc
 25580 08:674D: 69 07 00     	adc	#<L1059+djo_1
 25581 08:6750: 48           	pha
 25582 08:6751: 22 01 37 08  	jsl	~~follow_path
 25583 08:6755: 85 05        	sta	<L1059+res_1
 25584                        ;		if (res == FR_OK && (djo.fn[NSFLAG] & (N
                    S_DOT | NS_NONAME)))
 25585                        	.line	5822
 25586                        ;			res = FR_INVALID_NAME; /* Check 
                    validity of name */
 25587 08:6757: A5 05        	lda	<L1059+res_1
 25588 08:6759: F0 03        	beq	L1064
 25589 08:675B: 82 12 00     	brl	L10613
 25590                        L1064:
 25591 08:675E: E2 20        	sep	#$20
 25592                        	longa	off
 25593 08:6760: A5 32        	lda	<L1059+djo_1+43
 25594 08:6762: 29 A0        	and	#<$a0
 25595 08:6764: C2 20        	rep	#$20
 25596                        	longa	on
 25597 08:6766: D0 03        	bne	L1065
 25598 08:6768: 82 05 00     	brl	L10613
 25599                        L1065:
 25600                        	.line	5823
 25601 08:676B: A9 06 00     	lda	#$6
 25602 08:676E: 85 05        	sta	<L1059+res_1
 25603                        ;#if FF_FS_LOCK != 0
  Mon Aug  9 2021 16:52                                                Page 485


 25604                        ;		if (res == FR_OK)
 25605                        ;		{
 25606                        ;			res = chk_lock(&djo, 2);
 25607                        ;		}
 25608                        ;#endif
 25609                        ;		if (res == FR_OK)
 25610                        L10613:
 25611                        	.line	5830
 25612                        ;		{ /* Object to be renamed is found */
 25613 08:6770: A5 05        	lda	<L1059+res_1
 25614 08:6772: F0 03        	beq	L1066
 25615 08:6774: 82 BD 01     	brl	L10614
 25616                        L1066:
 25617                        	.line	5831
 25618                        ;#if FF_FS_EXFAT
 25619                        ;			if (fs->fs_type == FS_EXFAT)
 25620                        ;			{ /* At exFAT volume */
 25621                        ;				BYTE nf, nn;
 25622                        ;				WORD nh;
 25623                        ;
 25624                        ;				mem_cpy(buf, fs->dirbuf,
                     SZDIRE * 2); /* Save 85+C0 entry of old object */
 25625                        ;				mem_cpy(&djn, &djo, size
                    of djo);
 25626                        ;				res = follow_path(&djn, 
                    path_new); /* Make sure if new object name is not in use */
 25627                        ;				if (res == FR_OK)
 25628                        ;				{ /* Is new name already
                     in use by any other object? */
 25629                        ;					res = (djn.obj.s
                    clust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FIL
                    E : FR_EXIST;
 25630                        ;				}
 25631                        ;				if (res == FR_NO_FILE)
 25632                        ;				{ /* It is a valid path 
                    and no name collision */
 25633                        ;					res = dir_regist
                    er(&djn); /* Register the new entry */
 25634                        ;					if (res == FR_OK
                    )
 25635                        ;					{
 25636                        ;						nf = fs-
                    >dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
 25637                        ;						nh = ld_
                    word(fs->dirbuf + XDIR_NameHash);
 25638                        ;						mem_cpy(
                    fs->dirbuf, buf, SZDIRE * 2); /* Restore 85+C0 entry */
 25639                        ;						fs->dirb
                    uf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
 25640                        ;						st_word(
                    fs->dirbuf + XDIR_NameHash, nh);
 25641                        ;						if (!(fs
                    ->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_A
                    RC; /* Set archive attribute if it is a file */
 25642                        ;						/* Start
                     of critical section where an interruption can cause a cross
                    -link */
 25643                        ;						res = st
  Mon Aug  9 2021 16:52                                                Page 486


                    ore_xdir(&djn);
 25644                        ;					}
 25645                        ;				}
 25646                        ;			}
 25647                        ;			else
 25648                        ;#endif
 25649                        ;			{ /* At FAT/FAT32 volume */
 25650                        	.line	5863
 25651                        ;				mem_cpy(buf, djo.dir, SZ
                    DIRE); /* Save directory entry of the object */
 25652                        	.line	5864
 25653 08:6777: F4 20 00     	pea	#<$20
 25654 08:677A: D4 25        	pei	<L1059+djo_1+30
 25655 08:677C: D4 23        	pei	<L1059+djo_1+28
 25656 08:677E: F4 00 00     	pea	#0
 25657 08:6781: 18           	clc
 25658 08:6782: 7B           	tdc
 25659 08:6783: 69 73 00     	adc	#<L1059+buf_1
 25660 08:6786: 48           	pha
 25661 08:6787: 22 93 01 08  	jsl	~~mem_cpy
 25662                        ;				mem_cpy(&djn, &djo, size
                    of(DIR)); /* Duplicate the directory object */
 25663                        	.line	5865
 25664 08:678B: F4 34 00     	pea	#<$34
 25665 08:678E: F4 00 00     	pea	#0
 25666 08:6791: 18           	clc
 25667 08:6792: 7B           	tdc
 25668 08:6793: 69 07 00     	adc	#<L1059+djo_1
 25669 08:6796: 48           	pha
 25670 08:6797: F4 00 00     	pea	#0
 25671 08:679A: 18           	clc
 25672 08:679B: 7B           	tdc
 25673 08:679C: 69 3B 00     	adc	#<L1059+djn_1
 25674 08:679F: 48           	pha
 25675 08:67A0: 22 93 01 08  	jsl	~~mem_cpy
 25676                        ;				res = follow_path(&djn, 
                    path_new); /* Make sure if new object name is not in use */
 25677                        	.line	5866
 25678 08:67A4: D4 A8        	pei	<L1058+path_new_0+2
 25679 08:67A6: D4 A6        	pei	<L1058+path_new_0
 25680 08:67A8: F4 00 00     	pea	#0
 25681 08:67AB: 18           	clc
 25682 08:67AC: 7B           	tdc
 25683 08:67AD: 69 3B 00     	adc	#<L1059+djn_1
 25684 08:67B0: 48           	pha
 25685 08:67B1: 22 01 37 08  	jsl	~~follow_path
 25686 08:67B5: 85 05        	sta	<L1059+res_1
 25687                        ;				if (res == FR_OK)
 25688                        	.line	5867
 25689                        ;				{ /* Is new name already
                     in use by any other object? */
 25690 08:67B7: A5 05        	lda	<L1059+res_1
 25691 08:67B9: F0 03        	beq	L1067
 25692 08:67BB: 82 28 00     	brl	L10615
 25693                        L1067:
 25694                        	.line	5868
 25695                        ;					res = (djn.obj.s
                    clust == djo.obj.sclust
  Mon Aug  9 2021 16:52                                                Page 487


 25696                        	.line	5869
 25697                        ;							
                    && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 25698 08:67BE: A5 43        	lda	<L1059+djn_1+8
 25699 08:67C0: C5 0F        	cmp	<L1059+djo_1+8
 25700 08:67C2: D0 04        	bne	L1069
 25701 08:67C4: A5 45        	lda	<L1059+djn_1+10
 25702 08:67C6: C5 11        	cmp	<L1059+djo_1+10
 25703                        L1069:
 25704 08:67C8: F0 03        	beq	L1070
 25705 08:67CA: 82 14 00     	brl	L1068
 25706                        L1070:
 25707 08:67CD: A5 4B        	lda	<L1059+djn_1+16
 25708 08:67CF: C5 17        	cmp	<L1059+djo_1+16
 25709 08:67D1: D0 04        	bne	L1071
 25710 08:67D3: A5 4D        	lda	<L1059+djn_1+18
 25711 08:67D5: C5 19        	cmp	<L1059+djo_1+18
 25712                        L1071:
 25713 08:67D7: F0 03        	beq	L1072
 25714 08:67D9: 82 05 00     	brl	L1068
 25715                        L1072:
 25716 08:67DC: A9 04 00     	lda	#$4
 25717 08:67DF: 80 03        	bra	L1073
 25718                        L1068:
 25719 08:67E1: A9 08 00     	lda	#$8
 25720                        L1073:
 25721 08:67E4: 85 05        	sta	<L1059+res_1
 25722                        ;				}
 25723                        	.line	5871
 25724                        ;				if (res == FR_NO_FILE)
 25725                        L10615:
 25726                        	.line	5872
 25727                        ;				{ /* It is a valid path 
                    and no name collision */
 25728 08:67E6: A5 05        	lda	<L1059+res_1
 25729 08:67E8: C9 04 00     	cmp	#<$4
 25730 08:67EB: F0 03        	beq	L1074
 25731 08:67ED: 82 1D 01     	brl	L10616
 25732                        L1074:
 25733                        	.line	5873
 25734                        ;					res = dir_regist
                    er(&djn); /* Register the new entry */
 25735                        	.line	5874
 25736 08:67F0: F4 00 00     	pea	#0
 25737 08:67F3: 18           	clc
 25738 08:67F4: 7B           	tdc
 25739 08:67F5: 69 3B 00     	adc	#<L1059+djn_1
 25740 08:67F8: 48           	pha
 25741 08:67F9: 22 1E 28 08  	jsl	~~dir_register
 25742 08:67FD: 85 05        	sta	<L1059+res_1
 25743                        ;					if (res == FR_OK
                    )
 25744                        	.line	5875
 25745                        ;					{
 25746 08:67FF: A5 05        	lda	<L1059+res_1
 25747 08:6801: F0 03        	beq	L1075
 25748 08:6803: 82 07 01     	brl	L10617
 25749                        L1075:
  Mon Aug  9 2021 16:52                                                Page 488


 25750                        	.line	5876
 25751                        ;						dir = dj
                    n.dir; /* Copy directory entry of the object except name */
 25752                        	.line	5877
 25753 08:6806: A5 57        	lda	<L1059+djn_1+28
 25754 08:6808: 85 93        	sta	<L1059+dir_1
 25755 08:680A: A5 59        	lda	<L1059+djn_1+30
 25756 08:680C: 85 95        	sta	<L1059+dir_1+2
 25757                        ;						mem_cpy(
                    dir + 13, buf + 13, SZDIRE - 13);
 25758                        	.line	5878
 25759 08:680E: F4 13 00     	pea	#<$13
 25760 08:6811: F4 00 00     	pea	#0
 25761 08:6814: 18           	clc
 25762 08:6815: 7B           	tdc
 25763 08:6816: 69 80 00     	adc	#<L1059+buf_1+13
 25764 08:6819: 48           	pha
 25765 08:681A: 18           	clc
 25766 08:681B: A9 0D 00     	lda	#$d
 25767 08:681E: 65 93        	adc	<L1059+dir_1
 25768 08:6820: 85 01        	sta	<R0
 25769 08:6822: A9 00 00     	lda	#$0
 25770 08:6825: 65 95        	adc	<L1059+dir_1+2
 25771 08:6827: 85 03        	sta	<R0+2
 25772 08:6829: D4 03        	pei	<R0+2
 25773 08:682B: D4 01        	pei	<R0
 25774 08:682D: 22 93 01 08  	jsl	~~mem_cpy
 25775                        ;						dir[DIR_
                    Attr] = buf[DIR_Attr];
 25776                        	.line	5879
 25777 08:6831: E2 20        	sep	#$20
 25778                        	longa	off
 25779 08:6833: A5 7E        	lda	<L1059+buf_1+11
 25780 08:6835: A0 0B 00     	ldy	#$b
 25781 08:6838: 97 93        	sta	[<L1059+dir_1],Y
 25782 08:683A: C2 20        	rep	#$20
 25783                        	longa	on
 25784                        ;						if (!(di
                    r[DIR_Attr] & AM_DIR))
 25785                        	.line	5880
 25786                        ;							
                    dir[DIR_Attr] |= AM_ARC; /* Set archive attribute if it is a
                     file */
 25787 08:683C: E2 20        	sep	#$20
 25788                        	longa	off
 25789 08:683E: A0 0B 00     	ldy	#$b
 25790 08:6841: B7 93        	lda	[<L1059+dir_1],Y
 25791 08:6843: 29 10        	and	#<$10
 25792 08:6845: C2 20        	rep	#$20
 25793                        	longa	on
 25794 08:6847: F0 03        	beq	L1076
 25795 08:6849: 82 19 00     	brl	L10618
 25796                        L1076:
 25797                        	.line	5881
 25798 08:684C: 18           	clc
 25799 08:684D: A9 0B 00     	lda	#$b
 25800 08:6850: 65 93        	adc	<L1059+dir_1
 25801 08:6852: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 489


 25802 08:6854: A9 00 00     	lda	#$0
 25803 08:6857: 65 95        	adc	<L1059+dir_1+2
 25804 08:6859: 85 03        	sta	<R0+2
 25805 08:685B: E2 20        	sep	#$20
 25806                        	longa	off
 25807 08:685D: A7 01        	lda	[<R0]
 25808 08:685F: 09 20        	ora	#<$20
 25809 08:6861: 87 01        	sta	[<R0]
 25810 08:6863: C2 20        	rep	#$20
 25811                        	longa	on
 25812                        ;						fs->wfla
                    g = 1;
 25813                        L10618:
 25814                        	.line	5882
 25815 08:6865: E2 20        	sep	#$20
 25816                        	longa	off
 25817 08:6867: A9 01        	lda	#$1
 25818 08:6869: A0 03 00     	ldy	#$3
 25819 08:686C: 97 6F        	sta	[<L1059+fs_1],Y
 25820 08:686E: C2 20        	rep	#$20
 25821                        	longa	on
 25822                        ;						if ((dir
                    [DIR_Attr] & AM_DIR)
 25823                        	.line	5883
 25824                        ;							
                    	&& djo.obj.sclust != djn.obj.sclust)
 25825                        ;						{ /* Upd
                    ate .. entry in the sub-directory if needed */
 25826 08:6870: E2 20        	sep	#$20
 25827                        	longa	off
 25828 08:6872: A0 0B 00     	ldy	#$b
 25829 08:6875: B7 93        	lda	[<L1059+dir_1],Y
 25830 08:6877: 29 10        	and	#<$10
 25831 08:6879: C2 20        	rep	#$20
 25832                        	longa	on
 25833 08:687B: D0 03        	bne	L1077
 25834 08:687D: 82 8D 00     	brl	L10619
 25835                        L1077:
 25836 08:6880: A5 0F        	lda	<L1059+djo_1+8
 25837 08:6882: C5 43        	cmp	<L1059+djn_1+8
 25838 08:6884: D0 04        	bne	L1078
 25839 08:6886: A5 11        	lda	<L1059+djo_1+10
 25840 08:6888: C5 45        	cmp	<L1059+djn_1+10
 25841                        L1078:
 25842 08:688A: D0 03        	bne	L1079
 25843 08:688C: 82 7E 00     	brl	L10619
 25844                        L1079:
 25845                        	.line	5885
 25846                        ;							
                    sect = clst2sect(fs, ld_clust(fs, dir));
 25847                        	.line	5886
 25848 08:688F: D4 95        	pei	<L1059+dir_1+2
 25849 08:6891: D4 93        	pei	<L1059+dir_1
 25850 08:6893: D4 71        	pei	<L1059+fs_1+2
 25851 08:6895: D4 6F        	pei	<L1059+fs_1
 25852 08:6897: 22 EC 1C 08  	jsl	~~ld_clust
 25853 08:689B: 85 01        	sta	<R0
 25854 08:689D: 86 03        	stx	<R0+2
  Mon Aug  9 2021 16:52                                                Page 490


 25855 08:689F: DA           	phx
 25856 08:68A0: 48           	pha
 25857 08:68A1: D4 71        	pei	<L1059+fs_1+2
 25858 08:68A3: D4 6F        	pei	<L1059+fs_1
 25859 08:68A5: 22 9B 0A 08  	jsl	~~clst2sect
 25860 08:68A9: 85 97        	sta	<L1059+sect_1
 25861 08:68AB: 86 99        	stx	<L1059+sect_1+2
 25862                        ;							
                    if (sect == 0)
 25863                        	.line	5887
 25864                        ;							
                    {
 25865 08:68AD: A5 97        	lda	<L1059+sect_1
 25866 08:68AF: 05 99        	ora	<L1059+sect_1+2
 25867 08:68B1: F0 03        	beq	L1080
 25868 08:68B3: 82 08 00     	brl	L10620
 25869                        L1080:
 25870                        	.line	5888
 25871                        ;							
                    	res = FR_INT_ERR;
 25872                        	.line	5889
 25873 08:68B6: A9 02 00     	lda	#$2
 25874 08:68B9: 85 05        	sta	<L1059+res_1
 25875                        ;							
                    }
 25876                        	.line	5890
 25877                        ;							
                    else
 25878 08:68BB: 82 4F 00     	brl	L10621
 25879                        L10620:
 25880                        ;							
                    {
 25881                        	.line	5892
 25882                        ;							
                    	/* Start of critical section where an interruption can c
                    ause a cross-link */
 25883                        ;							
                    	res = move_window(fs, sect);
 25884                        	.line	5894
 25885 08:68BE: D4 99        	pei	<L1059+sect_1+2
 25886 08:68C0: D4 97        	pei	<L1059+sect_1
 25887 08:68C2: D4 71        	pei	<L1059+fs_1+2
 25888 08:68C4: D4 6F        	pei	<L1059+fs_1
 25889 08:68C6: 22 97 08 08  	jsl	~~move_window
 25890 08:68CA: 85 05        	sta	<L1059+res_1
 25891                        ;							
                    	dir = fs->win + SZDIRE * 1; /* Ptr to .. entry */
 25892                        	.line	5895
 25893 08:68CC: 18           	clc
 25894 08:68CD: A9 53 00     	lda	#$53
 25895 08:68D0: 65 6F        	adc	<L1059+fs_1
 25896 08:68D2: 85 93        	sta	<L1059+dir_1
 25897 08:68D4: A9 00 00     	lda	#$0
 25898 08:68D7: 65 71        	adc	<L1059+fs_1+2
 25899 08:68D9: 85 95        	sta	<L1059+dir_1+2
 25900                        ;							
                    	if (res == FR_OK && dir[1] == '.')
 25901                        	.line	5896
  Mon Aug  9 2021 16:52                                                Page 491


 25902                        ;							
                    	{
 25903 08:68DB: A5 05        	lda	<L1059+res_1
 25904 08:68DD: F0 03        	beq	L1081
 25905 08:68DF: 82 2B 00     	brl	L10622
 25906                        L1081:
 25907 08:68E2: E2 20        	sep	#$20
 25908                        	longa	off
 25909 08:68E4: A0 01 00     	ldy	#$1
 25910 08:68E7: B7 93        	lda	[<L1059+dir_1],Y
 25911 08:68E9: C9 2E        	cmp	#<$2e
 25912 08:68EB: C2 20        	rep	#$20
 25913                        	longa	on
 25914 08:68ED: F0 03        	beq	L1082
 25915 08:68EF: 82 1B 00     	brl	L10622
 25916                        L1082:
 25917                        	.line	5897
 25918                        ;							
                    		st_clust(fs, dir, djn.obj.sclust);
 25919                        	.line	5898
 25920 08:68F2: D4 45        	pei	<L1059+djn_1+10
 25921 08:68F4: D4 43        	pei	<L1059+djn_1+8
 25922 08:68F6: D4 95        	pei	<L1059+dir_1+2
 25923 08:68F8: D4 93        	pei	<L1059+dir_1
 25924 08:68FA: D4 71        	pei	<L1059+fs_1+2
 25925 08:68FC: D4 6F        	pei	<L1059+fs_1
 25926 08:68FE: 22 7C 1D 08  	jsl	~~st_clust
 25927                        ;							
                    		fs->wflag = 1;
 25928                        	.line	5899
 25929 08:6902: E2 20        	sep	#$20
 25930                        	longa	off
 25931 08:6904: A9 01        	lda	#$1
 25932 08:6906: A0 03 00     	ldy	#$3
 25933 08:6909: 97 6F        	sta	[<L1059+fs_1],Y
 25934 08:690B: C2 20        	rep	#$20
 25935                        	longa	on
 25936                        ;							
                    	}
 25937                        	.line	5900
 25938                        ;							
                    }
 25939                        L10622:
 25940                        	.line	5901
 25941                        L10621:
 25942                        ;						}
 25943                        	.line	5902
 25944                        ;					}
 25945                        L10619:
 25946                        	.line	5903
 25947                        ;				}
 25948                        L10617:
 25949                        	.line	5904
 25950                        ;			}
 25951                        L10616:
 25952                        	.line	5905
 25953                        ;			if (res == FR_OK)
 25954                        	.line	5906
  Mon Aug  9 2021 16:52                                                Page 492


 25955                        ;			{
 25956 08:690D: A5 05        	lda	<L1059+res_1
 25957 08:690F: F0 03        	beq	L1083
 25958 08:6911: 82 20 00     	brl	L10623
 25959                        L1083:
 25960                        	.line	5907
 25961                        ;				res = dir_remove(&djo); 
                    /* Remove old entry */
 25962                        	.line	5908
 25963 08:6914: F4 00 00     	pea	#0
 25964 08:6917: 18           	clc
 25965 08:6918: 7B           	tdc
 25966 08:6919: 69 07 00     	adc	#<L1059+djo_1
 25967 08:691C: 48           	pha
 25968 08:691D: 22 D2 2A 08  	jsl	~~dir_remove
 25969 08:6921: 85 05        	sta	<L1059+res_1
 25970                        ;				if (res == FR_OK)
 25971                        	.line	5909
 25972                        ;				{
 25973 08:6923: A5 05        	lda	<L1059+res_1
 25974 08:6925: F0 03        	beq	L1084
 25975 08:6927: 82 0A 00     	brl	L10624
 25976                        L1084:
 25977                        	.line	5910
 25978                        ;					res = sync_fs(fs
                    );
 25979                        	.line	5911
 25980 08:692A: D4 71        	pei	<L1059+fs_1+2
 25981 08:692C: D4 6F        	pei	<L1059+fs_1
 25982 08:692E: 22 22 09 08  	jsl	~~sync_fs
 25983 08:6932: 85 05        	sta	<L1059+res_1
 25984                        ;				}
 25985                        	.line	5912
 25986                        ;			}
 25987                        L10624:
 25988                        	.line	5913
 25989                        ;			/* End of the critical section *
                    /
 25990                        ;		} FREE_NAMBUF();
 25991                        L10623:
 25992                        	.line	5915
 25993                        L10614:
 25994                        	.line	5915
 25995 08:6934: D4 9D        	pei	<L1059+lfn_1+2
 25996 08:6936: D4 9B        	pei	<L1059+lfn_1
 25997 08:6938: 22 70 92 08  	jsl	~~ff_memfree
 25998                        ;	}
 25999                        	.line	5916
 26000                        ;
 26001                        ;	LEAVE_FF(fs, res);
 26002                        L10611:
 26003                        	.line	5918
 26004 08:693C: A5 05        	lda	<L1059+res_1
 26005 08:693E: 82 E3 FD     	brl	L1063
 26006                        ;}
 26007                        	.line	5919
 26008                        	.endblock	5919
 26009             0000009E   L1058	equ	158
  Mon Aug  9 2021 16:52                                                Page 493


 26010             00000005   L1059	equ	5
 26011 08:6941:              	ends
 26012                        	efunc
 26013                        	.endfunc	5919,5,158
 26014                        	.line	5919
 26015                        ;
 26016                        ;#endif /* !FF_FS_READONLY */
 26017                        ;#endif /* FF_FS_MINIMIZE == 0 */
 26018                        ;#endif /* FF_FS_MINIMIZE <= 1 */
 26019                        ;#endif /* FF_FS_MINIMIZE <= 2 */
 26020                        ;
 26021                        ;#if FF_USE_CHMOD && !FF_FS_READONLY
 26022                        ;/*-----------------------------------------------
                    ------------------------*/
 26023                        ;/* Change Attribute                              
                                            */
 26024                        ;/*-----------------------------------------------
                    ------------------------*/
 26025                        ;
 26026                        ;FRESULT f_chmod (
 26027                        ;		const TCHAR* path, /* Pointer to the fil
                    e path */
 26028                        ;		BYTE attr, /* Attribute bits */
 26029                        ;		BYTE mask /* Attribute mask to change */
 26030                        ;)
 26031                        ;{
 26032                        ;	FRESULT res;
 26033                        ;	DIR dj;
 26034                        ;	FATFS *fs;
 26035                        ;	DEF_NAMBUF
 26036                        ;
 26037                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 26038                        ;	if (res == FR_OK)
 26039                        ;	{
 26040                        ;		dj.obj.fs = fs;
 26041                        ;		INIT_NAMBUF(fs);
 26042                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 26043                        ;		if (res == FR_OK && (dj.fn[NSFLAG] & (NS
                    _DOT | NS_NONAME))) res = FR_INVALID_NAME; /* Check object v
                    alidity */
 26044                        ;		if (res == FR_OK)
 26045                        ;		{
 26046                        ;			mask &= AM_RDO|AM_HID|AM_SYS|AM_
                    ARC; /* Valid attribute mask */
 26047                        ;#if FF_FS_EXFAT
 26048                        ;			if (fs->fs_type == FS_EXFAT)
 26049                        ;			{
 26050                        ;				fs->dirbuf[XDIR_Attr] = 
                    (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask); /* Ap
                    ply attribute change */
 26051                        ;				res = store_xdir(&dj);
 26052                        ;			}
 26053                        ;			else
 26054                        ;#endif
 26055                        ;			{
 26056                        ;				dj.dir[DIR_Attr] = (attr
  Mon Aug  9 2021 16:52                                                Page 494


                     & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask); /* Apply attrib
                    ute change */
 26057                        ;				fs->wflag = 1;
 26058                        ;			}
 26059                        ;			if (res == FR_OK)
 26060                        ;			{
 26061                        ;				res = sync_fs(fs);
 26062                        ;			}
 26063                        ;		}
 26064                        ;		FREE_NAMBUF();
 26065                        ;	}
 26066                        ;
 26067                        ;	LEAVE_FF(fs, res);
 26068                        ;}
 26069                        ;
 26070                        ;/*-----------------------------------------------
                    ------------------------*/
 26071                        ;/* Change Timestamp                              
                                            */
 26072                        ;/*-----------------------------------------------
                    ------------------------*/
 26073                        ;
 26074                        ;FRESULT f_utime (
 26075                        ;		const TCHAR* path, /* Pointer to the fil
                    e/directory name */
 26076                        ;		const FILINFO* fno /* Pointer to the tim
                    estamp to be set */
 26077                        ;)
 26078                        ;{
 26079                        ;	FRESULT res;
 26080                        ;	DIR dj;
 26081                        ;	FATFS *fs;
 26082                        ;	DEF_NAMBUF
 26083                        ;
 26084                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 26085                        ;	if (res == FR_OK)
 26086                        ;	{
 26087                        ;		dj.obj.fs = fs;
 26088                        ;		INIT_NAMBUF(fs);
 26089                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 26090                        ;		if (res == FR_OK && (dj.fn[NSFLAG] & (NS
                    _DOT | NS_NONAME))) res = FR_INVALID_NAME; /* Check object v
                    alidity */
 26091                        ;		if (res == FR_OK)
 26092                        ;		{
 26093                        ;#if FF_FS_EXFAT
 26094                        ;			if (fs->fs_type == FS_EXFAT)
 26095                        ;			{
 26096                        ;				st_dword(fs->dirbuf + XD
                    IR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
 26097                        ;				res = store_xdir(&dj);
 26098                        ;			}
 26099                        ;			else
 26100                        ;#endif
 26101                        ;			{
 26102                        ;				st_dword(dj.dir + DIR_Mo
  Mon Aug  9 2021 16:52                                                Page 495


                    dTime, (DWORD)fno->fdate << 16 | fno->ftime);
 26103                        ;				fs->wflag = 1;
 26104                        ;			}
 26105                        ;			if (res == FR_OK)
 26106                        ;			{
 26107                        ;				res = sync_fs(fs);
 26108                        ;			}
 26109                        ;		}
 26110                        ;		FREE_NAMBUF();
 26111                        ;	}
 26112                        ;
 26113                        ;	LEAVE_FF(fs, res);
 26114                        ;}
 26115                        ;
 26116                        ;#endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
 26117                        ;
 26118                        ;#if FF_USE_LABEL
 26119                        ;/*-----------------------------------------------
                    ------------------------*/
 26120                        ;/* Get Volume Label                              
                                            */
 26121                        ;/*-----------------------------------------------
                    ------------------------*/
 26122                        ;
 26123                        ;FRESULT f_getlabel (
 26124                        ;		const TCHAR* path, /* Logical drive numb
                    er */
 26125                        ;		TCHAR* label, /* Buffer to store the vol
                    ume label */
 26126                        ;		DWORD* vsn /* Variable to store the volu
                    me serial number */
 26127                        ;)
 26128                        ;{
 26129                        	.line	6028
 26130                        	.line	6033
 26131                        	FFDOS
 26132                        	xdef	~~f_getlabel
 26133                        	func
 26134                        	.function	6033
 26135                        ~~f_getlabel:
 26136                        	longa	on
 26137                        	longi	on
 26138 08:6941: 3B           	tsc
 26139 08:6942: 38           	sec
 26140 08:6943: E9 4C 00     	sbc	#L1085
 26141 08:6946: 1B           	tcs
 26142 08:6947: 0B           	phd
 26143 08:6948: 5B           	tcd
 26144             00000004   path_0	set	4
 26145             00000008   label_0	set	8
 26146             0000000C   vsn_0	set	12
 26147                        	.block	6033
 26148                        ;	FRESULT res;
 26149                        ;	DIR dj;
 26150                        ;	FATFS *fs;
 26151                        ;	UINT si, di;
 26152                        ;	WCHAR wc;
 26153                        ;
  Mon Aug  9 2021 16:52                                                Page 496


 26154                        ;	/* Get logical drive */
 26155                        ;	res = mount_volume(&path, &fs, 0);
 26156             00000000   res_1	set	0
 26157             00000002   dj_1	set	2
 26158             00000036   fs_1	set	54
 26159             0000003A   si_1	set	58
 26160             0000003C   di_1	set	60
 26161             0000003E   wc_1	set	62
 26162                        	.sym	res,0,5,1,16
 26163                        	.sym	dj,2,10,1,416,78
 26164                        	.sym	fs,54,138,1,32,75
 26165                        	.sym	si,58,16,1,16
 26166                        	.sym	di,60,16,1,16
 26167                        	.sym	wc,62,16,1,16
 26168                        	.sym	path,4,142,6,32
 26169                        	.sym	label,8,142,6,32
 26170                        	.sym	vsn,12,146,6,32
 26171                        	.line	6041
 26172 08:6949: F4 00 00     	pea	#<$0
 26173 08:694C: F4 00 00     	pea	#0
 26174 08:694F: 18           	clc
 26175 08:6950: 7B           	tdc
 26176 08:6951: 69 43 00     	adc	#<L1086+fs_1
 26177 08:6954: 48           	pha
 26178 08:6955: F4 00 00     	pea	#0
 26179 08:6958: 18           	clc
 26180 08:6959: 7B           	tdc
 26181 08:695A: 69 50 00     	adc	#<L1085+path_0
 26182 08:695D: 48           	pha
 26183 08:695E: 22 84 3D 08  	jsl	~~mount_volume
 26184 08:6962: 85 0D        	sta	<L1086+res_1
 26185                        ;
 26186                        ;	/* Get volume label */
 26187                        ;	if (res == FR_OK && label)
 26188                        	.line	6044
 26189                        ;	{
 26190 08:6964: A5 0D        	lda	<L1086+res_1
 26191 08:6966: F0 03        	beq	L1088
 26192 08:6968: 82 25 01     	brl	L10625
 26193                        L1088:
 26194 08:696B: A5 54        	lda	<L1085+label_0
 26195 08:696D: 05 56        	ora	<L1085+label_0+2
 26196 08:696F: D0 03        	bne	L1089
 26197 08:6971: 82 1C 01     	brl	L10625
 26198                        L1089:
 26199                        	.line	6045
 26200                        ;		dj.obj.fs = fs; dj.obj.sclust = 0; /* Op
                    en root directory */
 26201                        	.line	6046
 26202 08:6974: A5 43        	lda	<L1086+fs_1
 26203 08:6976: 85 0F        	sta	<L1086+dj_1
 26204 08:6978: A5 45        	lda	<L1086+fs_1+2
 26205 08:697A: 85 11        	sta	<L1086+dj_1+2
 26206                        	.line	6046
 26207 08:697C: 64 17        	stz	<L1086+dj_1+8
 26208 08:697E: 64 19        	stz	<L1086+dj_1+10
 26209                        ;		res = dir_sdi(&dj, 0);
 26210                        	.line	6047
  Mon Aug  9 2021 16:52                                                Page 497


 26211 08:6980: F4 00 00     	pea	#^$0
 26212 08:6983: F4 00 00     	pea	#<$0
 26213 08:6986: F4 00 00     	pea	#0
 26214 08:6989: 18           	clc
 26215 08:698A: 7B           	tdc
 26216 08:698B: 69 0F 00     	adc	#<L1086+dj_1
 26217 08:698E: 48           	pha
 26218 08:698F: 22 36 17 08  	jsl	~~dir_sdi
 26219 08:6993: 85 0D        	sta	<L1086+res_1
 26220                        ;		if (res == FR_OK)
 26221                        	.line	6048
 26222                        ;		{
 26223 08:6995: A5 0D        	lda	<L1086+res_1
 26224 08:6997: F0 03        	beq	L1090
 26225 08:6999: 82 E0 00     	brl	L10626
 26226                        L1090:
 26227                        	.line	6049
 26228                        ;			res = DIR_READ_LABEL(&dj); /* Fi
                    nd a volume label entry */
 26229                        	.line	6050
 26230 08:699C: F4 01 00     	pea	#<$1
 26231 08:699F: F4 00 00     	pea	#0
 26232 08:69A2: 18           	clc
 26233 08:69A3: 7B           	tdc
 26234 08:69A4: 69 0F 00     	adc	#<L1086+dj_1
 26235 08:69A7: 48           	pha
 26236 08:69A8: 22 71 23 08  	jsl	~~dir_read
 26237 08:69AC: 85 0D        	sta	<L1086+res_1
 26238                        ;			if (res == FR_OK)
 26239                        	.line	6051
 26240                        ;			{
 26241 08:69AE: A5 0D        	lda	<L1086+res_1
 26242 08:69B0: F0 03        	beq	L1091
 26243 08:69B2: 82 C7 00     	brl	L10627
 26244                        L1091:
 26245                        	.line	6052
 26246                        ;#if FF_FS_EXFAT
 26247                        ;				if (fs->fs_type == FS_EX
                    FAT)
 26248                        ;				{
 26249                        ;					WCHAR hs;
 26250                        ;
 26251                        ;					for (si = di = h
                    s = 0; si < dj.dir[XDIR_NumLabel]; si++)
 26252                        ;					{ /* Extract vol
                    ume label from 83 entry */
 26253                        ;						wc = ld_
                    word(dj.dir + XDIR_Label + si * 2);
 26254                        ;						if (hs =
                    = 0 && IsSurrogate(wc))
 26255                        ;						{ /* Is 
                    the code a surrogate? */
 26256                        ;							
                    hs = wc; continue;
 26257                        ;						}
 26258                        ;						wc = put
                    _utf((DWORD)hs << 16 | wc, &label[di], 4);
 26259                        ;						if (wc =
  Mon Aug  9 2021 16:52                                                Page 498


                    = 0)
 26260                        ;						{	
                    di = 0; break;}
 26261                        ;						di += wc
                    ;
 26262                        ;						hs = 0;
 26263                        ;					}
 26264                        ;					if (hs != 0) di 
                    = 0; /* Broken surrogate pair? */
 26265                        ;					label[di] = 0;
 26266                        ;				}
 26267                        ;				else
 26268                        ;#endif
 26269                        ;				{
 26270                        	.line	6076
 26271                        ;					si = di = 0; /* 
                    Extract volume label from AM_VOL entry */
 26272                        	.line	6077
 26273 08:69B5: 64 49        	stz	<L1086+di_1
 26274 08:69B7: 64 47        	stz	<L1086+si_1
 26275                        ;					while (si < 11)
 26276                        	.line	6078
 26277                        L10628:
 26278 08:69B9: A5 47        	lda	<L1086+si_1
 26279 08:69BB: C9 0B 00     	cmp	#<$b
 26280 08:69BE: 90 03        	bcc	L1092
 26281 08:69C0: 82 97 00     	brl	L10629
 26282                        L1092:
 26283                        ;					{
 26284                        	.line	6079
 26285                        ;						wc = dj.
                    dir[si++];
 26286                        	.line	6080
 26287 08:69C3: A4 47        	ldy	<L1086+si_1
 26288 08:69C5: B7 2B        	lda	[<L1086+dj_1+28],Y
 26289 08:69C7: 29 FF 00     	and	#$ff
 26290 08:69CA: 85 4B        	sta	<L1086+wc_1
 26291 08:69CC: E6 47        	inc	<L1086+si_1
 26292                        ;#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unico
                    de output */
 26293                        ;						if (dbc_
                    1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++]; /* Is
                     it a DBC? */
 26294                        	.line	6082
 26295 08:69CE: D4 4B        	pei	<L1086+wc_1
 26296 08:69D0: 22 B7 02 08  	jsl	~~dbc_1st
 26297 08:69D4: AA           	tax
 26298 08:69D5: D0 03        	bne	L1093
 26299 08:69D7: 82 23 00     	brl	L10630
 26300                        L1093:
 26301 08:69DA: A5 47        	lda	<L1086+si_1
 26302 08:69DC: C9 0B 00     	cmp	#<$b
 26303 08:69DF: 90 03        	bcc	L1094
 26304 08:69E1: 82 19 00     	brl	L10630
 26305                        L1094:
 26306                        	.line	6082
 26307 08:69E4: A4 47        	ldy	<L1086+si_1
 26308 08:69E6: B7 2B        	lda	[<L1086+dj_1+28],Y
  Mon Aug  9 2021 16:52                                                Page 499


 26309 08:69E8: 29 FF 00     	and	#$ff
 26310 08:69EB: 85 01        	sta	<R0
 26311 08:69ED: A5 4B        	lda	<L1086+wc_1
 26312 08:69EF: EB           	xba
 26313 08:69F0: 29 00 FF     	and	#$ff00
 26314 08:69F3: 85 05        	sta	<R1
 26315 08:69F5: A5 05        	lda	<R1
 26316 08:69F7: 05 01        	ora	<R0
 26317 08:69F9: 85 4B        	sta	<L1086+wc_1
 26318 08:69FB: E6 47        	inc	<L1086+si_1
 26319                        ;						wc = ff_
                    oem2uni(wc, CODEPAGE); /* Convert it into Unicode */
 26320                        L10630:
 26321                        	.line	6083
 26322 08:69FD: F4 B5 01     	pea	#<$1b5
 26323 08:6A00: D4 4B        	pei	<L1086+wc_1
 26324 08:6A02: 22 EA 91 08  	jsl	~~ff_oem2uni
 26325 08:6A06: 85 4B        	sta	<L1086+wc_1
 26326                        ;						if (wc !
                    = 0) wc = put_utf(wc, &label[di], 4); /* Put it in Unicode *
                    /
 26327                        	.line	6084
 26328 08:6A08: A5 4B        	lda	<L1086+wc_1
 26329 08:6A0A: D0 03        	bne	L1095
 26330 08:6A0C: 82 35 00     	brl	L10631
 26331                        L1095:
 26332                        	.line	6084
 26333 08:6A0F: F4 04 00     	pea	#<$4
 26334 08:6A12: A5 49        	lda	<L1086+di_1
 26335 08:6A14: 85 01        	sta	<R0
 26336 08:6A16: 64 03        	stz	<R0+2
 26337 08:6A18: 18           	clc
 26338 08:6A19: A5 54        	lda	<L1085+label_0
 26339 08:6A1B: 65 01        	adc	<R0
 26340 08:6A1D: 85 05        	sta	<R1
 26341 08:6A1F: A5 56        	lda	<L1085+label_0+2
 26342 08:6A21: 65 03        	adc	<R0+2
 26343 08:6A23: 85 07        	sta	<R1+2
 26344 08:6A25: D4 07        	pei	<R1+2
 26345 08:6A27: D4 05        	pei	<R1
 26346 08:6A29: A5 4B        	lda	<L1086+wc_1
 26347 08:6A2B: 85 01        	sta	<R0
 26348 08:6A2D: 64 03        	stz	<R0+2
 26349 08:6A2F: D4 03        	pei	<R0+2
 26350 08:6A31: D4 01        	pei	<R0
 26351 08:6A33: 22 E8 04 08  	jsl	~~put_utf
 26352 08:6A37: E2 20        	sep	#$20
 26353                        	longa	off
 26354 08:6A39: 85 09        	sta	<R2
 26355 08:6A3B: C2 20        	rep	#$20
 26356                        	longa	on
 26357 08:6A3D: A5 09        	lda	<R2
 26358 08:6A3F: 29 FF 00     	and	#$ff
 26359 08:6A42: 85 4B        	sta	<L1086+wc_1
 26360                        ;						if (wc =
                    = 0)
 26361                        L10631:
 26362                        	.line	6085
  Mon Aug  9 2021 16:52                                                Page 500


 26363                        ;						{	
                    di = 0; break;}
 26364 08:6A44: A5 4B        	lda	<L1086+wc_1
 26365 08:6A46: F0 03        	beq	L1096
 26366 08:6A48: 82 05 00     	brl	L10632
 26367                        L1096:
 26368                        	.line	6086
 26369                        	.line	6086
 26370 08:6A4B: 64 49        	stz	<L1086+di_1
 26371                        	.line	6086
 26372 08:6A4D: 82 0A 00     	brl	L10629
 26373                        	.line	6086
 26374                        ;						di += wc
                    ;
 26375                        L10632:
 26376                        	.line	6087
 26377 08:6A50: 18           	clc
 26378 08:6A51: A5 49        	lda	<L1086+di_1
 26379 08:6A53: 65 4B        	adc	<L1086+wc_1
 26380 08:6A55: 85 49        	sta	<L1086+di_1
 26381                        ;#else						
                    			/* ANSI/OEM output */
 26382                        ;						label[di
                    ++] = (TCHAR)wc;
 26383                        ;#endif
 26384                        ;					}
 26385                        	.line	6091
 26386 08:6A57: 82 5F FF     	brl	L10628
 26387                        L10629:
 26388                        ;					do
 26389                        	.line	6092
 26390                        L10635:
 26391                        ;					{ /* Truncate tr
                    ailing spaces */
 26392                        	.line	6093
 26393                        ;						label[di
                    ] = 0;
 26394                        	.line	6094
 26395 08:6A5A: E2 20        	sep	#$20
 26396                        	longa	off
 26397 08:6A5C: A9 00        	lda	#$0
 26398 08:6A5E: A4 49        	ldy	<L1086+di_1
 26399 08:6A60: 97 54        	sta	[<L1085+label_0],Y
 26400 08:6A62: C2 20        	rep	#$20
 26401                        	longa	on
 26402                        ;						if (di =
                    = 0) break;
 26403                        	.line	6095
 26404 08:6A64: A5 49        	lda	<L1086+di_1
 26405 08:6A66: D0 03        	bne	L1097
 26406 08:6A68: 82 11 00     	brl	L10634
 26407                        L1097:
 26408                        ;					}while (label[--
                    di] == ' ');
 26409                        	.line	6096
 26410                        L10633:
 26411 08:6A6B: C6 49        	dec	<L1086+di_1
 26412 08:6A6D: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 501


 26413                        	longa	off
 26414 08:6A6F: A4 49        	ldy	<L1086+di_1
 26415 08:6A71: B7 54        	lda	[<L1085+label_0],Y
 26416 08:6A73: C9 20        	cmp	#<$20
 26417 08:6A75: C2 20        	rep	#$20
 26418                        	longa	on
 26419 08:6A77: D0 03        	bne	L1098
 26420 08:6A79: 82 DE FF     	brl	L10635
 26421                        L1098:
 26422                        L10634:
 26423                        ;				}
 26424                        	.line	6097
 26425                        ;			}
 26426                        	.line	6098
 26427                        ;		}
 26428                        L10627:
 26429                        	.line	6099
 26430                        ;		if (res == FR_NO_FILE)
 26431                        L10626:
 26432                        	.line	6100
 26433                        ;		{ /* No label entry and return nul strin
                    g */
 26434 08:6A7C: A5 0D        	lda	<L1086+res_1
 26435 08:6A7E: C9 04 00     	cmp	#<$4
 26436 08:6A81: F0 03        	beq	L1099
 26437 08:6A83: 82 0A 00     	brl	L10636
 26438                        L1099:
 26439                        	.line	6101
 26440                        ;			label[0] = 0;
 26441                        	.line	6102
 26442 08:6A86: E2 20        	sep	#$20
 26443                        	longa	off
 26444 08:6A88: A9 00        	lda	#$0
 26445 08:6A8A: 87 54        	sta	[<L1085+label_0]
 26446 08:6A8C: C2 20        	rep	#$20
 26447                        	longa	on
 26448                        ;			res = FR_OK;
 26449                        	.line	6103
 26450 08:6A8E: 64 0D        	stz	<L1086+res_1
 26451                        ;		}
 26452                        	.line	6104
 26453                        ;	}
 26454                        L10636:
 26455                        	.line	6105
 26456                        ;
 26457                        ;	/* Get volume serial number */
 26458                        ;	if (res == FR_OK && vsn)
 26459                        L10625:
 26460                        	.line	6108
 26461                        ;	{
 26462 08:6A90: A5 0D        	lda	<L1086+res_1
 26463 08:6A92: F0 03        	beq	L1100
 26464 08:6A94: 82 8F 00     	brl	L10637
 26465                        L1100:
 26466 08:6A97: A5 58        	lda	<L1085+vsn_0
 26467 08:6A99: 05 5A        	ora	<L1085+vsn_0+2
 26468 08:6A9B: D0 03        	bne	L1101
 26469 08:6A9D: 82 86 00     	brl	L10637
  Mon Aug  9 2021 16:52                                                Page 502


 26470                        L1101:
 26471                        	.line	6109
 26472                        ;		res = move_window(fs, fs->volbase);
 26473                        	.line	6110
 26474 08:6AA0: A0 21 00     	ldy	#$21
 26475 08:6AA3: B7 43        	lda	[<L1086+fs_1],Y
 26476 08:6AA5: 48           	pha
 26477 08:6AA6: A0 1F 00     	ldy	#$1f
 26478 08:6AA9: B7 43        	lda	[<L1086+fs_1],Y
 26479 08:6AAB: 48           	pha
 26480 08:6AAC: D4 45        	pei	<L1086+fs_1+2
 26481 08:6AAE: D4 43        	pei	<L1086+fs_1
 26482 08:6AB0: 22 97 08 08  	jsl	~~move_window
 26483 08:6AB4: 85 0D        	sta	<L1086+res_1
 26484                        ;		if (res == FR_OK)
 26485                        	.line	6111
 26486                        ;		{
 26487 08:6AB6: A5 0D        	lda	<L1086+res_1
 26488 08:6AB8: F0 03        	beq	L1102
 26489 08:6ABA: 82 69 00     	brl	L10638
 26490                        L1102:
 26491                        	.line	6112
 26492                        ;			switch (fs->fs_type)
 26493                        	.line	6113
 26494 08:6ABD: A7 43        	lda	[<L1086+fs_1]
 26495 08:6ABF: 29 FF 00     	and	#$ff
 26496 08:6AC2: 82 18 00     	brl	L10639
 26497                        ;			{
 26498                        	.line	6114
 26499                        ;				case FS_EXFAT:
 26500                        	.line	6115
 26501                        L10641:
 26502                        ;				di = BPB_VolIDEx; break;
 26503                        	.line	6116
 26504 08:6AC5: A9 64 00     	lda	#$64
 26505 08:6AC8: 85 49        	sta	<L1086+di_1
 26506                        	.line	6116
 26507 08:6ACA: 82 20 00     	brl	L10640
 26508                        ;
 26509                        ;				case FS_FAT32:
 26510                        	.line	6118
 26511                        L10642:
 26512                        ;				di = BS_VolID32; break;
 26513                        	.line	6119
 26514 08:6ACD: A9 43 00     	lda	#$43
 26515 08:6AD0: 85 49        	sta	<L1086+di_1
 26516                        	.line	6119
 26517 08:6AD2: 82 18 00     	brl	L10640
 26518                        ;
 26519                        ;				default:
 26520                        	.line	6121
 26521                        L10643:
 26522                        ;				di = BS_VolID;
 26523                        	.line	6122
 26524 08:6AD5: A9 27 00     	lda	#$27
 26525 08:6AD8: 85 49        	sta	<L1086+di_1
 26526                        ;			}
 26527                        	.line	6123
  Mon Aug  9 2021 16:52                                                Page 503


 26528 08:6ADA: 82 10 00     	brl	L10640
 26529                        L10639:
 26530                        	xref	~~~swt
 26531 08:6ADD: 22 xx xx xx  	jsl	~~~swt
 26532 08:6AE1: 02 00        	dw	2
 26533 08:6AE3: 03 00        	dw	3
 26534 08:6AE5: CC 6A        	dw	L10642-1
 26535 08:6AE7: 04 00        	dw	4
 26536 08:6AE9: C4 6A        	dw	L10641-1
 26537 08:6AEB: D4 6A        	dw	L10643-1
 26538                        L10640:
 26539                        ;			*vsn = ld_dword(fs->win + di);
 26540                        	.line	6124
 26541 08:6AED: A5 49        	lda	<L1086+di_1
 26542 08:6AEF: 85 01        	sta	<R0
 26543 08:6AF1: 64 03        	stz	<R0+2
 26544 08:6AF3: 18           	clc
 26545 08:6AF4: A9 33 00     	lda	#$33
 26546 08:6AF7: 65 01        	adc	<R0
 26547 08:6AF9: 85 05        	sta	<R1
 26548 08:6AFB: A9 00 00     	lda	#$0
 26549 08:6AFE: 65 03        	adc	<R0+2
 26550 08:6B00: 85 07        	sta	<R1+2
 26551 08:6B02: 18           	clc
 26552 08:6B03: A5 43        	lda	<L1086+fs_1
 26553 08:6B05: 65 05        	adc	<R1
 26554 08:6B07: 85 01        	sta	<R0
 26555 08:6B09: A5 45        	lda	<L1086+fs_1+2
 26556 08:6B0B: 65 07        	adc	<R1+2
 26557 08:6B0D: 85 03        	sta	<R0+2
 26558 08:6B0F: D4 03        	pei	<R0+2
 26559 08:6B11: D4 01        	pei	<R0
 26560 08:6B13: 22 3B 00 08  	jsl	~~ld_dword
 26561 08:6B17: 85 09        	sta	<R2
 26562 08:6B19: 86 0B        	stx	<R2+2
 26563 08:6B1B: A5 09        	lda	<R2
 26564 08:6B1D: 87 58        	sta	[<L1085+vsn_0]
 26565 08:6B1F: A5 0B        	lda	<R2+2
 26566 08:6B21: A0 02 00     	ldy	#$2
 26567 08:6B24: 97 58        	sta	[<L1085+vsn_0],Y
 26568                        ;		}
 26569                        	.line	6125
 26570                        ;	}
 26571                        L10638:
 26572                        	.line	6126
 26573                        ;
 26574                        ;	LEAVE_FF(fs, res);
 26575                        L10637:
 26576                        	.line	6128
 26577 08:6B26: A5 0D        	lda	<L1086+res_1
 26578                        L1103:
 26579 08:6B28: A8           	tay
 26580 08:6B29: A5 4E        	lda	<L1085+2
 26581 08:6B2B: 85 5A        	sta	<L1085+2+12
 26582 08:6B2D: A5 4D        	lda	<L1085+1
 26583 08:6B2F: 85 59        	sta	<L1085+1+12
 26584 08:6B31: 2B           	pld
 26585 08:6B32: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 504


 26586 08:6B33: 18           	clc
 26587 08:6B34: 69 58 00     	adc	#L1085+12
 26588 08:6B37: 1B           	tcs
 26589 08:6B38: 98           	tya
 26590 08:6B39: 6B           	rtl
 26591                        ;}
 26592                        	.line	6129
 26593                        	.endblock	6129
 26594             0000004C   L1085	equ	76
 26595             0000000D   L1086	equ	13
 26596 08:6B3A:              	ends
 26597                        	efunc
 26598                        	.endfunc	6129,13,76
 26599                        	.line	6129
 26600                        ;
 26601                        ;#if !FF_FS_READONLY
 26602                        ;/*-----------------------------------------------
                    ------------------------*/
 26603                        ;/* Set Volume Label                              
                                            */
 26604                        ;/*-----------------------------------------------
                    ------------------------*/
 26605                        ;
 26606                        ;FRESULT f_setlabel (
 26607                        ;		const TCHAR* label /* Volume label to se
                    t with heading logical drive number */
 26608                        ;)
 26609                        ;{
 26610                        	.line	6136
 26611                        	.line	6139
 26612                        	FFDOS
 26613                        	xdef	~~f_setlabel
 26614                        	func
 26615                        	.function	6139
 26616                        ~~f_setlabel:
 26617                        	longa	on
 26618                        	longi	on
 26619 08:6B3A: 3B           	tsc
 26620 08:6B3B: 38           	sec
 26621 08:6B3C: E9 60 00     	sbc	#L1104
 26622 08:6B3F: 1B           	tcs
 26623 08:6B40: 0B           	phd
 26624 08:6B41: 5B           	tcd
 26625             00000004   label_0	set	4
 26626                        	.block	6139
 26627                        ;	FRESULT res;
 26628                        ;	DIR dj;
 26629                        ;	FATFS *fs;
 26630                        ;	BYTE dirvn[22];
 26631                        ;	UINT di;
 26632                        ;	WCHAR wc;
 26633                        ;	static const char badchr[] = "+.,;=[]/\\\"*:<>\?
                    |\x7F"; /* [0..] for FAT, [7..] for exFAT */
 26634                        	data
 26635                        L1107:
 26636 00:0113: 2B 2E 2C 3B  	db	$2B,$2E,$2C,$3B,$3D,$5B,$5D,$2F,$5C,$22
       00:0117: 3D 5B 5D 2F 
       00:011B: 5C 22 
  Mon Aug  9 2021 16:52                                                Page 505


 26637 00:011D: 2A 3A 3C 3E  	db	$2A,$3A,$3C,$3E,$3F,$7C,$7F,$0
       00:0121: 3F 7C 7F 00 
 26638 00:0125:              	ends
 26639                        ;#if FF_USE_LFN
 26640                        ;	DWORD dc;
 26641                        ;#endif
 26642                        ;
 26643                        ;	/* Get logical drive */
 26644                        ;	res = mount_volume(&label, &fs, FA_WRITE);
 26645             00000000   res_1	set	0
 26646             00000002   dj_1	set	2
 26647             00000036   fs_1	set	54
 26648             0000003A   dirvn_1	set	58
 26649             00000050   di_1	set	80
 26650             00000052   wc_1	set	82
 26651             00000054   dc_1	set	84
 26652                        	.sym	res,0,5,1,16
 26653                        	.sym	dj,2,10,1,416,78
 26654                        	.sym	fs,54,138,1,32,75
 26655                        	.sym	dirvn,58,110,1,0,22
 26656                        	.sym	di,80,16,1,16
 26657                        	.sym	wc,82,16,1,16
 26658                        	.sym	badchr,1107,110,19,0,18
 26659                        	.sym	dc,84,18,1,32
 26660                        	.sym	label,4,142,6,32
 26661                        	.line	6152
 26662 08:6B42: F4 02 00     	pea	#<$2
 26663 08:6B45: F4 00 00     	pea	#0
 26664 08:6B48: 18           	clc
 26665 08:6B49: 7B           	tdc
 26666 08:6B4A: 69 3F 00     	adc	#<L1105+fs_1
 26667 08:6B4D: 48           	pha
 26668 08:6B4E: F4 00 00     	pea	#0
 26669 08:6B51: 18           	clc
 26670 08:6B52: 7B           	tdc
 26671 08:6B53: 69 64 00     	adc	#<L1104+label_0
 26672 08:6B56: 48           	pha
 26673 08:6B57: 22 84 3D 08  	jsl	~~mount_volume
 26674 08:6B5B: 85 09        	sta	<L1105+res_1
 26675                        ;	if (res != FR_OK) LEAVE_FF(fs, res);
 26676                        	.line	6153
 26677 08:6B5D: A5 09        	lda	<L1105+res_1
 26678 08:6B5F: D0 03        	bne	L1108
 26679 08:6B61: 82 14 00     	brl	L10644
 26680                        L1108:
 26681                        	.line	6153
 26682 08:6B64: A5 09        	lda	<L1105+res_1
 26683                        L1109:
 26684 08:6B66: A8           	tay
 26685 08:6B67: A5 62        	lda	<L1104+2
 26686 08:6B69: 85 66        	sta	<L1104+2+4
 26687 08:6B6B: A5 61        	lda	<L1104+1
 26688 08:6B6D: 85 65        	sta	<L1104+1+4
 26689 08:6B6F: 2B           	pld
 26690 08:6B70: 3B           	tsc
 26691 08:6B71: 18           	clc
 26692 08:6B72: 69 64 00     	adc	#L1104+4
 26693 08:6B75: 1B           	tcs
  Mon Aug  9 2021 16:52                                                Page 506


 26694 08:6B76: 98           	tya
 26695 08:6B77: 6B           	rtl
 26696                        ;
 26697                        ;#if FF_FS_EXFAT
 26698                        ;	if (fs->fs_type == FS_EXFAT)
 26699                        ;	{ /* On the exFAT volume */
 26700                        ;		mem_set(dirvn, 0, 22);
 26701                        ;		di = 0;
 26702                        ;		while ((UINT)*label >= ' ')
 26703                        ;		{ /* Create volume label */
 26704                        ;			dc = tchar2uni(&label); /* Get a
                     Unicode character */
 26705                        ;			if (dc >= 0x10000)
 26706                        ;			{
 26707                        ;				if (dc == 0xFFFFFFFF || 
                    di >= 10)
 26708                        ;				{ /* Wrong surrogate or 
                    buffer overflow */
 26709                        ;					dc = 0;
 26710                        ;				}
 26711                        ;				else
 26712                        ;				{
 26713                        ;					st_word(dirvn + 
                    di * 2, (WCHAR)(dc >> 16)); di++;
 26714                        ;				}
 26715                        ;			}
 26716                        ;			if (dc == 0 || chk_chr(badchr + 
                    7, (int)dc) || di >= 11)
 26717                        ;			{ /* Check validity of the volum
                    e label */
 26718                        ;				LEAVE_FF(fs, FR_INVALID_
                    NAME);
 26719                        ;			}
 26720                        ;			st_word(dirvn + di * 2, (WCHAR)d
                    c); di++;
 26721                        ;		}
 26722                        ;	}
 26723                        ;	else
 26724                        ;#endif
 26725                        ;	{ /* On the FAT/FAT32 volume */
 26726                        L10644:
 26727                        	.line	6183
 26728                        ;		mem_set(dirvn, ' ', 11);
 26729                        	.line	6184
 26730 08:6B78: F4 0B 00     	pea	#<$b
 26731 08:6B7B: F4 20 00     	pea	#<$20
 26732 08:6B7E: F4 00 00     	pea	#0
 26733 08:6B81: 18           	clc
 26734 08:6B82: 7B           	tdc
 26735 08:6B83: 69 43 00     	adc	#<L1105+dirvn_1
 26736 08:6B86: 48           	pha
 26737 08:6B87: 22 DF 01 08  	jsl	~~mem_set
 26738                        ;		di = 0;
 26739                        	.line	6185
 26740 08:6B8B: 64 59        	stz	<L1105+di_1
 26741                        ;		while ((UINT)*label >= ' ')
 26742                        	.line	6186
 26743                        L10645:
  Mon Aug  9 2021 16:52                                                Page 507


 26744 08:6B8D: E2 20        	sep	#$20
 26745                        	longa	off
 26746 08:6B8F: A7 64        	lda	[<L1104+label_0]
 26747 08:6B91: C9 20        	cmp	#<$20
 26748 08:6B93: C2 20        	rep	#$20
 26749                        	longa	on
 26750 08:6B95: B0 03        	bcs	L1110
 26751 08:6B97: 82 A9 00     	brl	L10646
 26752                        L1110:
 26753                        ;		{ /* Create volume label */
 26754                        	.line	6187
 26755                        ;#if FF_USE_LFN
 26756                        ;			dc = tchar2uni(&label);
 26757                        	.line	6189
 26758 08:6B9A: F4 00 00     	pea	#0
 26759 08:6B9D: 18           	clc
 26760 08:6B9E: 7B           	tdc
 26761 08:6B9F: 69 64 00     	adc	#<L1104+label_0
 26762 08:6BA2: 48           	pha
 26763 08:6BA3: 22 11 03 08  	jsl	~~tchar2uni
 26764 08:6BA7: 85 5D        	sta	<L1105+dc_1
 26765 08:6BA9: 86 5F        	stx	<L1105+dc_1+2
 26766                        ;			wc = (dc < 0x10000) ? ff_uni2oem
                    (ff_wtoupper(dc), CODEPAGE) : 0;
 26767                        	.line	6190
 26768 08:6BAB: A5 5D        	lda	<L1105+dc_1
 26769 08:6BAD: C9 00 00     	cmp	#<$10000
 26770 08:6BB0: A5 5F        	lda	<L1105+dc_1+2
 26771 08:6BB2: E9 01 00     	sbc	#^$10000
 26772 08:6BB5: 90 03        	bcc	L1112
 26773 08:6BB7: 82 17 00     	brl	L1111
 26774                        L1112:
 26775 08:6BBA: F4 B5 01     	pea	#<$1b5
 26776 08:6BBD: D4 5F        	pei	<L1105+dc_1+2
 26777 08:6BBF: D4 5D        	pei	<L1105+dc_1
 26778 08:6BC1: 22 22 92 08  	jsl	~~ff_wtoupper
 26779 08:6BC5: 85 01        	sta	<R0
 26780 08:6BC7: 86 03        	stx	<R0+2
 26781 08:6BC9: DA           	phx
 26782 08:6BCA: 48           	pha
 26783 08:6BCB: 22 06 92 08  	jsl	~~ff_uni2oem
 26784 08:6BCF: 80 03        	bra	L1113
 26785                        L1111:
 26786 08:6BD1: A9 00 00     	lda	#$0
 26787                        L1113:
 26788 08:6BD4: 85 5B        	sta	<L1105+wc_1
 26789                        ;#else						
                    			/* ANSI/OEM input */
 26790                        ;			wc = (BYTE)*label++;
 26791                        ;			if (dbc_1st((BYTE)wc)) wc = dbc_
                    2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
 26792                        ;			if (IsLower(wc)) wc -= 0x20; /* 
                    To upper ASCII characters */
 26793                        ;#if FF_CODE_PAGE == 0
 26794                        ;			if (ExCvt && wc >= 0x80) wc = Ex
                    Cvt[wc - 0x80]; /* To upper extended characters (SBCS cfg) *
                    /
 26795                        ;#elif FF_CODE_PAGE < 900
  Mon Aug  9 2021 16:52                                                Page 508


 26796                        ;			if (wc >= 0x80) wc = ExCvt[wc - 
                    0x80]; /* To upper extended characters (SBCS cfg) */
 26797                        ;#endif
 26798                        ;#endif
 26799                        ;			if (wc == 0 || chk_chr(badchr + 
                    0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11))
 26800                        	.line	6201
 26801                        ;			{ /* Reject invalid characters f
                    or volume label */
 26802 08:6BD6: A5 5B        	lda	<L1105+wc_1
 26803 08:6BD8: D0 03        	bne	L1115
 26804 08:6BDA: 82 37 00     	brl	L1114
 26805                        L1115:
 26806 08:6BDD: D4 5B        	pei	<L1105+wc_1
 26807 08:6BDF: A9 xx xx     	lda	#<L1107
 26808 08:6BE2: 85 01        	sta	<R0
 26809                        	xref	_BEG_DATA
 26810 08:6BE4: A9 xx xx     	lda	#_BEG_DATA>>16
 26811 08:6BE7: 85 03        	sta	<R0+2
 26812 08:6BE9: D4 03        	pei	<R0+2
 26813 08:6BEB: D4 01        	pei	<R0
 26814 08:6BED: 22 75 02 08  	jsl	~~chk_chr
 26815 08:6BF1: AA           	tax
 26816 08:6BF2: F0 03        	beq	L1116
 26817 08:6BF4: 82 1D 00     	brl	L1114
 26818                        L1116:
 26819 08:6BF7: A5 5B        	lda	<L1105+wc_1
 26820 08:6BF9: C9 00 01     	cmp	#<$100
 26821 08:6BFC: B0 03        	bcs	L1118
 26822 08:6BFE: 82 05 00     	brl	L1117
 26823                        L1118:
 26824 08:6C01: A9 0A 00     	lda	#$a
 26825 08:6C04: 80 03        	bra	L1119
 26826                        L1117:
 26827 08:6C06: A9 0B 00     	lda	#$b
 26828                        L1119:
 26829 08:6C09: 85 05        	sta	<R1
 26830 08:6C0B: A5 59        	lda	<L1105+di_1
 26831 08:6C0D: C5 05        	cmp	<R1
 26832 08:6C0F: B0 03        	bcs	L1120
 26833 08:6C11: 82 06 00     	brl	L10647
 26834                        L1120:
 26835                        L1114:
 26836                        	.line	6202
 26837                        ;				LEAVE_FF(fs, FR_INVALID_
                    NAME);
 26838                        	.line	6203
 26839 08:6C14: A9 06 00     	lda	#$6
 26840 08:6C17: 82 4C FF     	brl	L1109
 26841                        ;			}
 26842                        	.line	6204
 26843                        ;			if (wc >= 0x100) dirvn[di++] = (
                    BYTE)(wc >> 8);
 26844                        L10647:
 26845                        	.line	6205
 26846 08:6C1A: A5 5B        	lda	<L1105+wc_1
 26847 08:6C1C: C9 00 01     	cmp	#<$100
 26848 08:6C1F: B0 03        	bcs	L1121
  Mon Aug  9 2021 16:52                                                Page 509


 26849 08:6C21: 82 10 00     	brl	L10648
 26850                        L1121:
 26851                        	.line	6205
 26852 08:6C24: A5 5B        	lda	<L1105+wc_1
 26853 08:6C26: EB           	xba
 26854 08:6C27: 29 FF 00     	and	#$00ff
 26855 08:6C2A: E2 20        	sep	#$20
 26856                        	longa	off
 26857 08:6C2C: A6 59        	ldx	<L1105+di_1
 26858 08:6C2E: 95 43        	sta	<L1105+dirvn_1,X
 26859 08:6C30: C2 20        	rep	#$20
 26860                        	longa	on
 26861 08:6C32: E6 59        	inc	<L1105+di_1
 26862                        ;			dirvn[di++] = (BYTE)wc;
 26863                        L10648:
 26864                        	.line	6206
 26865 08:6C34: E2 20        	sep	#$20
 26866                        	longa	off
 26867 08:6C36: A5 5B        	lda	<L1105+wc_1
 26868 08:6C38: A6 59        	ldx	<L1105+di_1
 26869 08:6C3A: 95 43        	sta	<L1105+dirvn_1,X
 26870 08:6C3C: C2 20        	rep	#$20
 26871                        	longa	on
 26872 08:6C3E: E6 59        	inc	<L1105+di_1
 26873                        ;		}
 26874                        	.line	6207
 26875 08:6C40: 82 4A FF     	brl	L10645
 26876                        L10646:
 26877                        ;		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_IN
                    VALID_NAME); /* Reject illegal name (heading DDEM) */
 26878                        	.line	6208
 26879 08:6C43: E2 20        	sep	#$20
 26880                        	longa	off
 26881 08:6C45: A5 43        	lda	<L1105+dirvn_1
 26882 08:6C47: C9 E5        	cmp	#<$e5
 26883 08:6C49: C2 20        	rep	#$20
 26884                        	longa	on
 26885 08:6C4B: F0 03        	beq	L1122
 26886 08:6C4D: 82 06 00     	brl	L10649
 26887                        L1122:
 26888                        	.line	6208
 26889 08:6C50: A9 06 00     	lda	#$6
 26890 08:6C53: 82 10 FF     	brl	L1109
 26891                        ;		while (di && dirvn[di - 1] == ' ') di--;
                     /* Snip trailing spaces */
 26892                        L10649:
 26893                        	.line	6209
 26894                        L10650:
 26895 08:6C56: A5 59        	lda	<L1105+di_1
 26896 08:6C58: D0 03        	bne	L1123
 26897 08:6C5A: 82 1C 00     	brl	L10651
 26898                        L1123:
 26899 08:6C5D: 18           	clc
 26900 08:6C5E: A9 FF FF     	lda	#$ffff
 26901 08:6C61: 65 59        	adc	<L1105+di_1
 26902 08:6C63: 85 01        	sta	<R0
 26903 08:6C65: E2 20        	sep	#$20
 26904                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 510


 26905 08:6C67: A6 01        	ldx	<R0
 26906 08:6C69: B5 43        	lda	<L1105+dirvn_1,X
 26907 08:6C6B: C9 20        	cmp	#<$20
 26908 08:6C6D: C2 20        	rep	#$20
 26909                        	longa	on
 26910 08:6C6F: F0 03        	beq	L1124
 26911 08:6C71: 82 05 00     	brl	L10651
 26912                        L1124:
 26913                        	.line	6209
 26914 08:6C74: C6 59        	dec	<L1105+di_1
 26915 08:6C76: 82 DD FF     	brl	L10650
 26916                        L10651:
 26917                        ;	}
 26918                        	.line	6210
 26919                        ;
 26920                        ;	/* Set volume label */
 26921                        ;	dj.obj.fs = fs; dj.obj.sclust = 0; /* Open root 
                    directory */
 26922                        	.line	6213
 26923 08:6C79: A5 3F        	lda	<L1105+fs_1
 26924 08:6C7B: 85 0B        	sta	<L1105+dj_1
 26925 08:6C7D: A5 41        	lda	<L1105+fs_1+2
 26926 08:6C7F: 85 0D        	sta	<L1105+dj_1+2
 26927                        	.line	6213
 26928 08:6C81: 64 13        	stz	<L1105+dj_1+8
 26929 08:6C83: 64 15        	stz	<L1105+dj_1+10
 26930                        ;	res = dir_sdi(&dj, 0);
 26931                        	.line	6214
 26932 08:6C85: F4 00 00     	pea	#^$0
 26933 08:6C88: F4 00 00     	pea	#<$0
 26934 08:6C8B: F4 00 00     	pea	#0
 26935 08:6C8E: 18           	clc
 26936 08:6C8F: 7B           	tdc
 26937 08:6C90: 69 0B 00     	adc	#<L1105+dj_1
 26938 08:6C93: 48           	pha
 26939 08:6C94: 22 36 17 08  	jsl	~~dir_sdi
 26940 08:6C98: 85 09        	sta	<L1105+res_1
 26941                        ;	if (res == FR_OK)
 26942                        	.line	6215
 26943                        ;	{
 26944 08:6C9A: A5 09        	lda	<L1105+res_1
 26945 08:6C9C: F0 03        	beq	L1125
 26946 08:6C9E: 82 4F 01     	brl	L10652
 26947                        L1125:
 26948                        	.line	6216
 26949                        ;		res = DIR_READ_LABEL(&dj); /* Get volume
                     label entry */
 26950                        	.line	6217
 26951 08:6CA1: F4 01 00     	pea	#<$1
 26952 08:6CA4: F4 00 00     	pea	#0
 26953 08:6CA7: 18           	clc
 26954 08:6CA8: 7B           	tdc
 26955 08:6CA9: 69 0B 00     	adc	#<L1105+dj_1
 26956 08:6CAC: 48           	pha
 26957 08:6CAD: 22 71 23 08  	jsl	~~dir_read
 26958 08:6CB1: 85 09        	sta	<L1105+res_1
 26959                        ;		if (res == FR_OK)
 26960                        	.line	6218
  Mon Aug  9 2021 16:52                                                Page 511


 26961                        ;		{
 26962 08:6CB3: A5 09        	lda	<L1105+res_1
 26963 08:6CB5: F0 03        	beq	L1126
 26964 08:6CB7: 82 7F 00     	brl	L10653
 26965                        L1126:
 26966                        	.line	6219
 26967                        ;			if (FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT)
 26968                        	.line	6220
 26969                        ;			{
 26970 08:6CBA: 82 3E 00     	brl	L10654
 26971 08:6CBD: E2 20        	sep	#$20
 26972                        	longa	off
 26973 08:6CBF: A7 3F        	lda	[<L1105+fs_1]
 26974 08:6CC1: C9 04        	cmp	#<$4
 26975 08:6CC3: C2 20        	rep	#$20
 26976                        	longa	on
 26977 08:6CC5: F0 03        	beq	L1127
 26978 08:6CC7: 82 31 00     	brl	L10654
 26979                        L1127:
 26980                        	.line	6221
 26981                        ;				dj.dir[XDIR_NumLabel] = 
                    (BYTE)di; /* Change the volume label */
 26982                        	.line	6222
 26983 08:6CCA: E2 20        	sep	#$20
 26984                        	longa	off
 26985 08:6CCC: A5 59        	lda	<L1105+di_1
 26986 08:6CCE: A0 01 00     	ldy	#$1
 26987 08:6CD1: 97 27        	sta	[<L1105+dj_1+28],Y
 26988 08:6CD3: C2 20        	rep	#$20
 26989                        	longa	on
 26990                        ;				mem_cpy(dj.dir + XDIR_La
                    bel, dirvn, 22);
 26991                        	.line	6223
 26992 08:6CD5: F4 16 00     	pea	#<$16
 26993 08:6CD8: F4 00 00     	pea	#0
 26994 08:6CDB: 18           	clc
 26995 08:6CDC: 7B           	tdc
 26996 08:6CDD: 69 43 00     	adc	#<L1105+dirvn_1
 26997 08:6CE0: 48           	pha
 26998 08:6CE1: 18           	clc
 26999 08:6CE2: A9 02 00     	lda	#$2
 27000 08:6CE5: 65 27        	adc	<L1105+dj_1+28
 27001 08:6CE7: 85 01        	sta	<R0
 27002 08:6CE9: A9 00 00     	lda	#$0
 27003 08:6CEC: 65 29        	adc	<L1105+dj_1+30
 27004 08:6CEE: 85 03        	sta	<R0+2
 27005 08:6CF0: D4 03        	pei	<R0+2
 27006 08:6CF2: D4 01        	pei	<R0
 27007 08:6CF4: 22 93 01 08  	jsl	~~mem_cpy
 27008                        ;			}
 27009                        	.line	6224
 27010                        ;			else
 27011 08:6CF8: 82 26 00     	brl	L10655
 27012                        L10654:
 27013                        ;			{
 27014                        	.line	6226
 27015                        ;				if (di != 0)
  Mon Aug  9 2021 16:52                                                Page 512


 27016                        	.line	6227
 27017                        ;				{
 27018 08:6CFB: A5 59        	lda	<L1105+di_1
 27019 08:6CFD: D0 03        	bne	L1128
 27020 08:6CFF: 82 17 00     	brl	L10656
 27021                        L1128:
 27022                        	.line	6228
 27023                        ;					mem_cpy(dj.dir, 
                    dirvn, 11); /* Change the volume label */
 27024                        	.line	6229
 27025 08:6D02: F4 0B 00     	pea	#<$b
 27026 08:6D05: F4 00 00     	pea	#0
 27027 08:6D08: 18           	clc
 27028 08:6D09: 7B           	tdc
 27029 08:6D0A: 69 43 00     	adc	#<L1105+dirvn_1
 27030 08:6D0D: 48           	pha
 27031 08:6D0E: D4 29        	pei	<L1105+dj_1+30
 27032 08:6D10: D4 27        	pei	<L1105+dj_1+28
 27033 08:6D12: 22 93 01 08  	jsl	~~mem_cpy
 27034                        ;				}
 27035                        	.line	6230
 27036                        ;				else
 27037 08:6D16: 82 08 00     	brl	L10657
 27038                        L10656:
 27039                        ;				{
 27040                        	.line	6232
 27041                        ;					dj.dir[DIR_Name]
                     = DDEM; /* Remove the volume label */
 27042                        	.line	6233
 27043 08:6D19: E2 20        	sep	#$20
 27044                        	longa	off
 27045 08:6D1B: A9 E5        	lda	#$e5
 27046 08:6D1D: 87 27        	sta	[<L1105+dj_1+28]
 27047 08:6D1F: C2 20        	rep	#$20
 27048                        	longa	on
 27049                        ;				}
 27050                        	.line	6234
 27051                        L10657:
 27052                        ;			}
 27053                        	.line	6235
 27054                        L10655:
 27055                        ;			fs->wflag = 1;
 27056                        	.line	6236
 27057 08:6D21: E2 20        	sep	#$20
 27058                        	longa	off
 27059 08:6D23: A9 01        	lda	#$1
 27060 08:6D25: A0 03 00     	ldy	#$3
 27061 08:6D28: 97 3F        	sta	[<L1105+fs_1],Y
 27062 08:6D2A: C2 20        	rep	#$20
 27063                        	longa	on
 27064                        ;			res = sync_fs(fs);
 27065                        	.line	6237
 27066 08:6D2C: D4 41        	pei	<L1105+fs_1+2
 27067 08:6D2E: D4 3F        	pei	<L1105+fs_1
 27068 08:6D30: 22 22 09 08  	jsl	~~sync_fs
 27069 08:6D34: 85 09        	sta	<L1105+res_1
 27070                        ;		}
 27071                        	.line	6238
  Mon Aug  9 2021 16:52                                                Page 513


 27072                        ;		else
 27073 08:6D36: 82 B7 00     	brl	L10658
 27074                        L10653:
 27075                        ;		{ /* No volume label entry or an error *
                    /
 27076                        	.line	6240
 27077                        ;			if (res == FR_NO_FILE)
 27078                        	.line	6241
 27079                        ;			{
 27080 08:6D39: A5 09        	lda	<L1105+res_1
 27081 08:6D3B: C9 04 00     	cmp	#<$4
 27082 08:6D3E: F0 03        	beq	L1129
 27083 08:6D40: 82 AD 00     	brl	L10659
 27084                        L1129:
 27085                        	.line	6242
 27086                        ;				res = FR_OK;
 27087                        	.line	6243
 27088 08:6D43: 64 09        	stz	<L1105+res_1
 27089                        ;				if (di != 0)
 27090                        	.line	6244
 27091                        ;				{ /* Create a volume lab
                    el entry */
 27092 08:6D45: A5 59        	lda	<L1105+di_1
 27093 08:6D47: D0 03        	bne	L1130
 27094 08:6D49: 82 A4 00     	brl	L10660
 27095                        L1130:
 27096                        	.line	6245
 27097                        ;					res = dir_alloc(
                    &dj, 1); /* Allocate an entry */
 27098                        	.line	6246
 27099 08:6D4C: F4 01 00     	pea	#<$1
 27100 08:6D4F: F4 00 00     	pea	#0
 27101 08:6D52: 18           	clc
 27102 08:6D53: 7B           	tdc
 27103 08:6D54: 69 0B 00     	adc	#<L1105+dj_1
 27104 08:6D57: 48           	pha
 27105 08:6D58: 22 29 1C 08  	jsl	~~dir_alloc
 27106 08:6D5C: 85 09        	sta	<L1105+res_1
 27107                        ;					if (res == FR_OK
                    )
 27108                        	.line	6247
 27109                        ;					{
 27110 08:6D5E: A5 09        	lda	<L1105+res_1
 27111 08:6D60: F0 03        	beq	L1131
 27112 08:6D62: 82 8B 00     	brl	L10661
 27113                        L1131:
 27114                        	.line	6248
 27115                        ;						mem_set(
                    dj.dir, 0, SZDIRE); /* Clean the entry */
 27116                        	.line	6249
 27117 08:6D65: F4 20 00     	pea	#<$20
 27118 08:6D68: F4 00 00     	pea	#<$0
 27119 08:6D6B: D4 29        	pei	<L1105+dj_1+30
 27120 08:6D6D: D4 27        	pei	<L1105+dj_1+28
 27121 08:6D6F: 22 DF 01 08  	jsl	~~mem_set
 27122                        ;						if (FF_F
                    S_EXFAT && fs->fs_type == FS_EXFAT)
 27123                        	.line	6250
  Mon Aug  9 2021 16:52                                                Page 514


 27124                        ;						{
 27125 08:6D73: 82 46 00     	brl	L10662
 27126 08:6D76: E2 20        	sep	#$20
 27127                        	longa	off
 27128 08:6D78: A7 3F        	lda	[<L1105+fs_1]
 27129 08:6D7A: C9 04        	cmp	#<$4
 27130 08:6D7C: C2 20        	rep	#$20
 27131                        	longa	on
 27132 08:6D7E: F0 03        	beq	L1132
 27133 08:6D80: 82 39 00     	brl	L10662
 27134                        L1132:
 27135                        	.line	6251
 27136                        ;							
                    dj.dir[XDIR_Type] = ET_VLABEL; /* Create volume label entry 
                    */
 27137                        	.line	6252
 27138 08:6D83: E2 20        	sep	#$20
 27139                        	longa	off
 27140 08:6D85: A9 83        	lda	#$83
 27141 08:6D87: 87 27        	sta	[<L1105+dj_1+28]
 27142 08:6D89: C2 20        	rep	#$20
 27143                        	longa	on
 27144                        ;							
                    dj.dir[XDIR_NumLabel] = (BYTE)di;
 27145                        	.line	6253
 27146 08:6D8B: E2 20        	sep	#$20
 27147                        	longa	off
 27148 08:6D8D: A5 59        	lda	<L1105+di_1
 27149 08:6D8F: A0 01 00     	ldy	#$1
 27150 08:6D92: 97 27        	sta	[<L1105+dj_1+28],Y
 27151 08:6D94: C2 20        	rep	#$20
 27152                        	longa	on
 27153                        ;							
                    mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
 27154                        	.line	6254
 27155 08:6D96: F4 16 00     	pea	#<$16
 27156 08:6D99: F4 00 00     	pea	#0
 27157 08:6D9C: 18           	clc
 27158 08:6D9D: 7B           	tdc
 27159 08:6D9E: 69 43 00     	adc	#<L1105+dirvn_1
 27160 08:6DA1: 48           	pha
 27161 08:6DA2: 18           	clc
 27162 08:6DA3: A9 02 00     	lda	#$2
 27163 08:6DA6: 65 27        	adc	<L1105+dj_1+28
 27164 08:6DA8: 85 01        	sta	<R0
 27165 08:6DAA: A9 00 00     	lda	#$0
 27166 08:6DAD: 65 29        	adc	<L1105+dj_1+30
 27167 08:6DAF: 85 03        	sta	<R0+2
 27168 08:6DB1: D4 03        	pei	<R0+2
 27169 08:6DB3: D4 01        	pei	<R0
 27170 08:6DB5: 22 93 01 08  	jsl	~~mem_cpy
 27171                        ;						}
 27172                        	.line	6255
 27173                        ;						else
 27174 08:6DB9: 82 1F 00     	brl	L10663
 27175                        L10662:
 27176                        ;						{
 27177                        	.line	6257
  Mon Aug  9 2021 16:52                                                Page 515


 27178                        ;							
                    dj.dir[DIR_Attr] = AM_VOL; /* Create volume label entry */
 27179                        	.line	6258
 27180 08:6DBC: E2 20        	sep	#$20
 27181                        	longa	off
 27182 08:6DBE: A9 08        	lda	#$8
 27183 08:6DC0: A0 0B 00     	ldy	#$b
 27184 08:6DC3: 97 27        	sta	[<L1105+dj_1+28],Y
 27185 08:6DC5: C2 20        	rep	#$20
 27186                        	longa	on
 27187                        ;							
                    mem_cpy(dj.dir, dirvn, 11);
 27188                        	.line	6259
 27189 08:6DC7: F4 0B 00     	pea	#<$b
 27190 08:6DCA: F4 00 00     	pea	#0
 27191 08:6DCD: 18           	clc
 27192 08:6DCE: 7B           	tdc
 27193 08:6DCF: 69 43 00     	adc	#<L1105+dirvn_1
 27194 08:6DD2: 48           	pha
 27195 08:6DD3: D4 29        	pei	<L1105+dj_1+30
 27196 08:6DD5: D4 27        	pei	<L1105+dj_1+28
 27197 08:6DD7: 22 93 01 08  	jsl	~~mem_cpy
 27198                        ;						}
 27199                        	.line	6260
 27200                        L10663:
 27201                        ;						fs->wfla
                    g = 1;
 27202                        	.line	6261
 27203 08:6DDB: E2 20        	sep	#$20
 27204                        	longa	off
 27205 08:6DDD: A9 01        	lda	#$1
 27206 08:6DDF: A0 03 00     	ldy	#$3
 27207 08:6DE2: 97 3F        	sta	[<L1105+fs_1],Y
 27208 08:6DE4: C2 20        	rep	#$20
 27209                        	longa	on
 27210                        ;						res = sy
                    nc_fs(fs);
 27211                        	.line	6262
 27212 08:6DE6: D4 41        	pei	<L1105+fs_1+2
 27213 08:6DE8: D4 3F        	pei	<L1105+fs_1
 27214 08:6DEA: 22 22 09 08  	jsl	~~sync_fs
 27215 08:6DEE: 85 09        	sta	<L1105+res_1
 27216                        ;					}
 27217                        	.line	6263
 27218                        ;				}
 27219                        L10661:
 27220                        	.line	6264
 27221                        ;			}
 27222                        L10660:
 27223                        	.line	6265
 27224                        ;		}
 27225                        L10659:
 27226                        	.line	6266
 27227                        L10658:
 27228                        ;	}
 27229                        	.line	6267
 27230                        ;
 27231                        ;	LEAVE_FF(fs, res);
  Mon Aug  9 2021 16:52                                                Page 516


 27232                        L10652:
 27233                        	.line	6269
 27234 08:6DF0: A5 09        	lda	<L1105+res_1
 27235 08:6DF2: 82 71 FD     	brl	L1109
 27236                        ;}
 27237                        	.line	6270
 27238                        	.endblock	6270
 27239             00000060   L1104	equ	96
 27240             00000009   L1105	equ	9
 27241 08:6DF5:              	ends
 27242                        	efunc
 27243                        	.endfunc	6270,9,96
 27244                        	.line	6270
 27245                        ;
 27246                        ;#endif /* !FF_FS_READONLY */
 27247                        ;#endif /* FF_USE_LABEL */
 27248                        ;
 27249                        ;#if FF_USE_EXPAND && !FF_FS_READONLY
 27250                        ;/*-----------------------------------------------
                    ------------------------*/
 27251                        ;/* Allocate a Contiguous Blocks to the File      
                                            */
 27252                        ;/*-----------------------------------------------
                    ------------------------*/
 27253                        ;
 27254                        ;FRESULT f_expand (
 27255                        ;		FIL* fp, /* Pointer to the file object *
                    /
 27256                        ;		FSIZE_t fsz, /* File size to be expanded
                     to */
 27257                        ;		BYTE opt /* Operation mode 0:Find and pr
                    epare or 1:Find and allocate */
 27258                        ;)
 27259                        ;{
 27260                        ;	FRESULT res;
 27261                        ;	FATFS *fs;
 27262                        ;	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
 27263                        ;
 27264                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 27265                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 27266                        ;	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->fl
                    ag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
 27267                        ;#if FF_FS_EXFAT
 27268                        ;	if (fs->fs_type != FS_EXFAT && fsz >= 0x10000000
                    0) LEAVE_FF(fs, FR_DENIED); /* Check if in size limit */
 27269                        ;#endif
 27270                        ;	n = (DWORD)fs->csize * SS(fs); /* Cluster size *
                    /
 27271                        ;	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 
                    0); /* Number of clusters required */
 27272                        ;	stcl = fs->last_clst; lclst = 0;
 27273                        ;	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
 27274                        ;
 27275                        ;#if FF_FS_EXFAT
 27276                        ;	if (fs->fs_type == FS_EXFAT)
 27277                        ;	{
  Mon Aug  9 2021 16:52                                                Page 517


 27278                        ;		scl = find_bitmap(fs, stcl, tcl); /* Fin
                    d a contiguous cluster block */
 27279                        ;		if (scl == 0) res = FR_DENIED; /* No con
                    tiguous cluster block was found */
 27280                        ;		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR
                    ;
 27281                        ;		if (res == FR_OK)
 27282                        ;		{ /* A contiguous free area is found */
 27283                        ;			if (opt)
 27284                        ;			{ /* Allocate it now */
 27285                        ;				res = change_bitmap(fs, 
                    scl, tcl, 1); /* Mark the cluster block 'in use' */
 27286                        ;				lclst = scl + tcl - 1;
 27287                        ;			}
 27288                        ;			else
 27289                        ;			{ /* Set it as suggested point f
                    or next allocation */
 27290                        ;				lclst = scl - 1;
 27291                        ;			}
 27292                        ;		}
 27293                        ;	}
 27294                        ;	else
 27295                        ;#endif
 27296                        ;	{
 27297                        ;		scl = clst = stcl; ncl = 0;
 27298                        ;		for (;;)
 27299                        ;		{ /* Find a contiguous cluster block */
 27300                        ;			n = get_fat(&fp->obj, clst);
 27301                        ;			if (++clst >= fs->n_fatent) clst
                     = 2;
 27302                        ;			if (n == 1)
 27303                        ;			{	res = FR_INT_ERR; break;
                    }
 27304                        ;			if (n == 0xFFFFFFFF)
 27305                        ;			{	res = FR_DISK_ERR; break
                    ;}
 27306                        ;			if (n == 0)
 27307                        ;			{ /* Is it a free cluster? */
 27308                        ;				if (++ncl == tcl) break;
                     /* Break if a contiguous cluster block is found */
 27309                        ;			}
 27310                        ;			else
 27311                        ;			{
 27312                        ;				scl = clst; ncl = 0; /* 
                    Not a free cluster */
 27313                        ;			}
 27314                        ;			if (clst == stcl)
 27315                        ;			{	res = FR_DENIED; break;}
                     /* No contiguous cluster? */
 27316                        ;		}
 27317                        ;		if (res == FR_OK)
 27318                        ;		{ /* A contiguous free area is found */
 27319                        ;			if (opt)
 27320                        ;			{ /* Allocate it now */
 27321                        ;				for (clst = scl, n = tcl
                    ; n; clst++, n--)
 27322                        ;				{ /* Create a cluster ch
                    ain on the FAT */
  Mon Aug  9 2021 16:52                                                Page 518


 27323                        ;					res = put_fat(fs
                    , clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
 27324                        ;					if (res != FR_OK
                    ) break;
 27325                        ;					lclst = clst;
 27326                        ;				}
 27327                        ;			}
 27328                        ;			else
 27329                        ;			{ /* Set it as suggested point f
                    or next allocation */
 27330                        ;				lclst = scl - 1;
 27331                        ;			}
 27332                        ;		}
 27333                        ;	}
 27334                        ;
 27335                        ;	if (res == FR_OK)
 27336                        ;	{
 27337                        ;		fs->last_clst = lclst; /* Set suggested 
                    start cluster to start next */
 27338                        ;		if (opt)
 27339                        ;		{ /* Is it allocated now? */
 27340                        ;			fp->obj.sclust = scl; /* Update 
                    object allocation information */
 27341                        ;			fp->obj.objsize = fsz;
 27342                        ;			if (FF_FS_EXFAT) fp->obj.stat = 
                    2; /* Set status 'contiguous chain' */
 27343                        ;			fp->flag |= FA_MODIFIED;
 27344                        ;			if (fs->free_clst <= fs->n_faten
                    t - 2)
 27345                        ;			{ /* Update FSINFO */
 27346                        ;				fs->free_clst -= tcl;
 27347                        ;				fs->fsi_flag |= 1;
 27348                        ;			}
 27349                        ;		}
 27350                        ;	}
 27351                        ;
 27352                        ;	LEAVE_FF(fs, res);
 27353                        ;}
 27354                        ;
 27355                        ;#endif /* FF_USE_EXPAND && !FF_FS_READONLY */
 27356                        ;
 27357                        ;#if FF_USE_FORWARD
 27358                        ;/*-----------------------------------------------
                    ------------------------*/
 27359                        ;/* Forward Data to the Stream Directly           
                                            */
 27360                        ;/*-----------------------------------------------
                    ------------------------*/
 27361                        ;
 27362                        ;FRESULT f_forward (
 27363                        ;		FIL* fp, /* Pointer to the file object *
                    /
 27364                        ;		UINT (*func)(const BYTE*,UINT), /* Point
                    er to the streaming function */
 27365                        ;		UINT btf, /* Number of bytes to forward 
                    */
 27366                        ;		UINT* bf /* Pointer to number of bytes f
                    orwarded */
  Mon Aug  9 2021 16:52                                                Page 519


 27367                        ;)
 27368                        ;{
 27369                        ;	FRESULT res;
 27370                        ;	FATFS *fs;
 27371                        ;	DWORD clst;
 27372                        ;	LBA_t sect;
 27373                        ;	FSIZE_t remain;
 27374                        ;	UINT rcnt, csect;
 27375                        ;	BYTE *dbuf;
 27376                        ;
 27377                        ;	*bf = 0; /* Clear transfer byte counter */
 27378                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 27379                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 27380                        ;	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIE
                    D); /* Check access mode */
 27381                        ;
 27382                        ;	remain = fp->obj.objsize - fp->fptr;
 27383                        ;	if (btf > remain) btf = (UINT)remain; /* Truncat
                    e btf by remaining bytes */
 27384                        ;
 27385                        ;	for (; btf && (*func)(0, 0); /* Repeat until all
                     data transferred or stream goes busy */
 27386                        ;			fp->fptr += rcnt, *bf += rcnt, b
                    tf -= rcnt)
 27387                        ;	{
 27388                        ;		csect = (UINT)(fp->fptr / SS(fs) & (fs->
                    csize - 1)); /* Sector offset in the cluster */
 27389                        ;		if (fp->fptr % SS(fs) == 0)
 27390                        ;		{ /* On the sector boundary? */
 27391                        ;			if (csect == 0)
 27392                        ;			{ /* On the cluster boundary? */
 27393                        ;				clst = (fp->fptr == 0) ?
                     /* On the top of the file? */
 27394                        ;				fp->obj.sclust : get_fat
                    (&fp->obj, fp->clust);
 27395                        ;				if (clst <= 1) ABORT(fs,
                     FR_INT_ERR);
 27396                        ;				if (clst == 0xFFFFFFFF) 
                    ABORT(fs, FR_DISK_ERR);
 27397                        ;				fp->clust = clst; /* Upd
                    ate current cluster */
 27398                        ;			}
 27399                        ;		}
 27400                        ;		sect = clst2sect(fs, fp->clust); /* Get 
                    current data sector */
 27401                        ;		if (sect == 0) ABORT(fs, FR_INT_ERR);
 27402                        ;		sect += csect;
 27403                        ;#if FF_FS_TINY
 27404                        ;		if (move_window(fs, sect) != FR_OK) ABOR
                    T(fs, FR_DISK_ERR); /* Move sector window to the file data *
                    /
 27405                        ;		dbuf = fs->win;
 27406                        ;#else
 27407                        ;		if (fp->sect != sect)
 27408                        ;		{ /* Fill sector cache with file data */
 27409                        ;#if !FF_FS_READONLY
  Mon Aug  9 2021 16:52                                                Page 520


 27410                        ;			if (fp->flag & FA_DIRTY)
 27411                        ;			{ /* Write-back dirty sector cac
                    he */
 27412                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 27413                        ;				fp->flag &= (BYTE)~FA_DI
                    RTY;
 27414                        ;			}
 27415                        ;#endif
 27416                        ;			if (disk_read(fs->pdrv, fp->buf,
                     sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 27417                        ;		}
 27418                        ;		dbuf = fp->buf;
 27419                        ;#endif
 27420                        ;		fp->sect = sect;
 27421                        ;		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);
                     /* Number of bytes remains in the sector */
 27422                        ;		if (rcnt > btf) rcnt = btf; /* Clip it b
                    y btr if needed */
 27423                        ;		rcnt = (*func)(dbuf + ((UINT)fp->fptr % 
                    SS(fs)), rcnt); /* Forward the file data */
 27424                        ;		if (rcnt == 0) ABORT(fs, FR_INT_ERR);
 27425                        ;	}
 27426                        ;
 27427                        ;	LEAVE_FF(fs, FR_OK);
 27428                        ;}
 27429                        ;#endif /* FF_USE_FORWARD */
 27430                        ;
 27431                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 27432                        ;/*-----------------------------------------------
                    ------------------------*/
 27433                        ;/* Create an FAT/exFAT volume                    
                                            */
 27434                        ;/*-----------------------------------------------
                    ------------------------*/
 27435                        ;
 27436                        ;#define N_SEC_TRACK 63			/* Secto
                    rs per track for determination of drive CHS */
 27437                        ;#define	GPT_ALIGN	0x100000	/* Align
                    ment of partitions in GPT [byte] (>=128KB) */
 27438                        ;#define GPT_ITEMS	128			
                    /* Number of GPT table size (>=128, sector aligned) */
 27439                        ;
 27440                        ;/* Create partitions on the physical drive */
 27441                        ;
 27442                        ;static FRESULT create_partition (
 27443                        ;		BYTE drv, /* Physical drive number */
 27444                        ;		const LBA_t plst[], /* Partition list */
 27445                        ;		UINT sys, /* System ID (for only MBR, te
                    mp setting) and bit8:GPT */
 27446                        ;		BYTE* buf /* Working buffer for a sector
                     */
 27447                        ;)
 27448                        ;{
 27449                        	.line	6468
 27450                        	.line	6474
 27451                        	FFDOS
 27452                        	func
  Mon Aug  9 2021 16:52                                                Page 521


 27453                        	.function	6474
 27454                        ~~create_partition:
 27455                        	longa	on
 27456                        	longi	on
 27457 08:6DF5: 3B           	tsc
 27458 08:6DF6: 38           	sec
 27459 08:6DF7: E9 2C 00     	sbc	#L1133
 27460 08:6DFA: 1B           	tcs
 27461 08:6DFB: 0B           	phd
 27462 08:6DFC: 5B           	tcd
 27463             00000004   drv_0	set	4
 27464             00000006   plst_0	set	6
 27465             0000000A   sys_0	set	10
 27466             0000000C   buf_0	set	12
 27467                        	.block	6474
 27468                        ;	UINT i, cy;
 27469                        ;	LBA_t sz_drv;
 27470                        ;	DWORD sz_drv32, s_lba32, n_lba32;
 27471                        ;	BYTE *pte, hd, n_hd, sc, n_sc;
 27472                        ;
 27473                        ;	/* Get drive size */
 27474                        ;	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) !
                    = RES_OK) return FR_DISK_ERR;
 27475             00000000   i_1	set	0
 27476             00000002   cy_1	set	2
 27477             00000004   sz_drv_1	set	4
 27478             00000008   sz_drv32_1	set	8
 27479             0000000C   s_lba32_1	set	12
 27480             00000010   n_lba32_1	set	16
 27481             00000014   pte_1	set	20
 27482             00000018   hd_1	set	24
 27483             00000019   n_hd_1	set	25
 27484             0000001A   sc_1	set	26
 27485             0000001B   n_sc_1	set	27
 27486                        	.sym	i,0,16,1,16
 27487                        	.sym	cy,2,16,1,16
 27488                        	.sym	sz_drv,4,18,1,32
 27489                        	.sym	sz_drv32,8,18,1,32
 27490                        	.sym	s_lba32,12,18,1,32
 27491                        	.sym	n_lba32,16,18,1,32
 27492                        	.sym	pte,20,142,1,32
 27493                        	.sym	hd,24,14,1,8
 27494                        	.sym	n_hd,25,14,1,8
 27495                        	.sym	sc,26,14,1,8
 27496                        	.sym	n_sc,27,14,1,8
 27497                        	.sym	drv,4,14,6,8
 27498                        	.sym	plst,6,146,6,32
 27499                        	.sym	sys,10,16,6,16
 27500                        	.sym	buf,12,142,6,32
 27501                        	.line	6481
 27502 08:6DFD: F4 00 00     	pea	#0
 27503 08:6E00: 18           	clc
 27504 08:6E01: 7B           	tdc
 27505 08:6E02: 69 15 00     	adc	#<L1134+sz_drv_1
 27506 08:6E05: 48           	pha
 27507 08:6E06: F4 01 00     	pea	#<$1
 27508 08:6E09: D4 30        	pei	<L1133+drv_0
 27509 08:6E0B: 22 xx xx xx  	jsl	~~disk_ioctl
  Mon Aug  9 2021 16:52                                                Page 522


 27510 08:6E0F: AA           	tax
 27511 08:6E10: D0 03        	bne	L1136
 27512 08:6E12: 82 15 00     	brl	L10664
 27513                        L1136:
 27514                        	.line	6481
 27515 08:6E15: A9 01 00     	lda	#$1
 27516                        L1137:
 27517 08:6E18: A8           	tay
 27518 08:6E19: A5 2E        	lda	<L1133+2
 27519 08:6E1B: 85 3A        	sta	<L1133+2+12
 27520 08:6E1D: A5 2D        	lda	<L1133+1
 27521 08:6E1F: 85 39        	sta	<L1133+1+12
 27522 08:6E21: 2B           	pld
 27523 08:6E22: 3B           	tsc
 27524 08:6E23: 18           	clc
 27525 08:6E24: 69 38 00     	adc	#L1133+12
 27526 08:6E27: 1B           	tcs
 27527 08:6E28: 98           	tya
 27528 08:6E29: 6B           	rtl
 27529                        ;
 27530                        ;#if FF_LBA64
 27531                        ;	if (sz_drv >= FF_MIN_GPT)
 27532                        ;	{ /* Create partitions in GPT */
 27533                        ;		WORD ss;
 27534                        ;		UINT sz_pt, pi, si, ofs;
 27535                        ;		DWORD bcc, rnd, align;
 27536                        ;		QWORD s_lba64, n_lba64, sz_pool, s_bpt;
 27537                        ;		static const BYTE gpt_mbr[16] =
 27538                        ;		{	0x00, 0x00, 0x02, 0x00, 0xEE, 0x
                    FE, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x
                    FF};
 27539                        ;
 27540                        ;#if FF_MAX_SS != FF_MIN_SS
 27541                        ;		if (disk_ioctl(drv, GET_SECTOR_SIZE, &ss
                    ) != RES_OK) return FR_DISK_ERR; /* Get sector size */
 27542                        ;		if (ss > FF_MAX_SS || ss < FF_MIN_SS || 
                    (ss & (ss - 1))) return FR_DISK_ERR;
 27543                        ;#else
 27544                        ;		ss = FF_MAX_SS;
 27545                        ;#endif
 27546                        ;		rnd = GET_FATTIME(); /* Random seed */
 27547                        ;		align = GPT_ALIGN / ss; /* Partition ali
                    gnment [sector] */
 27548                        ;		sz_pt = GPT_ITEMS * SZ_GPTE / ss; /* Siz
                    e of PT [sector] */
 27549                        ;		s_bpt = sz_drv - sz_pt - 1; /* Backup PT
                     start sector */
 27550                        ;		s_lba64 = 2 + sz_pt; /* First allocatabl
                    e sector */
 27551                        ;		sz_pool = s_bpt - s_lba64; /* Size of al
                    locatable area */
 27552                        ;		bcc = 0xFFFFFFFF; n_lba64 = 1;
 27553                        ;		pi = si = 0; /* partition table index, s
                    ize table index */
 27554                        ;		do
 27555                        ;		{
 27556                        ;			if (pi * SZ_GPTE % ss == 0) mem_
                    set(buf, 0, ss); /* Clean the buffer if needed */
  Mon Aug  9 2021 16:52                                                Page 523


 27557                        ;			if (n_lba64 != 0)
 27558                        ;			{ /* Is the size table not termi
                    ntated? */
 27559                        ;				s_lba64 = (s_lba64 + ali
                    gn - 1) & ((QWORD)0 - align); /* Align partition start */
 27560                        ;				n_lba64 = plst[si++]; /*
                     Get a partition size */
 27561                        ;				if (n_lba64 <= 100)
 27562                        ;				{ /* Is the size in perc
                    entage? */
 27563                        ;					n_lba64 = sz_poo
                    l * n_lba64 / 100;
 27564                        ;					n_lba64 = (n_lba
                    64 + align - 1) & ((QWORD)0 - align); /* Align partition end
                     (only if in percentage) */
 27565                        ;				}
 27566                        ;				if (s_lba64 + n_lba64 > 
                    s_bpt)
 27567                        ;				{ /* Clip at end of the 
                    pool */
 27568                        ;					n_lba64 = (s_lba
                    64 < s_bpt) ? s_bpt - s_lba64 : 0;
 27569                        ;				}
 27570                        ;			}
 27571                        ;			if (n_lba64 != 0)
 27572                        ;			{ /* Add a partition? */
 27573                        ;				ofs = pi * SZ_GPTE % ss;
 27574                        ;				mem_cpy(buf + ofs + GPTE
                    _PtGuid, GUID_MS_Basic, 16); /* Partition GUID (Microsoft Ba
                    sic Data) */
 27575                        ;				rnd = make_rand(rnd, buf
                     + ofs + GPTE_UpGuid, 16); /* Unique partition GUID */
 27576                        ;				st_qword(buf + ofs + GPT
                    E_FstLba, s_lba64); /* Partition start LBA */
 27577                        ;				st_qword(buf + ofs + GPT
                    E_LstLba, s_lba64 + n_lba64 - 1); /* Partition end LBA */
 27578                        ;				s_lba64 += n_lba64; /* N
                    ext partition LBA */
 27579                        ;			}
 27580                        ;			if ((pi + 1) * SZ_GPTE % ss == 0
                    )
 27581                        ;			{ /* Write the buffer if it is f
                    illed up */
 27582                        ;				for (i = 0; i < ss; bcc 
                    = crc32(bcc, buf[i++])); /* Calculate table check sum */
 27583                        ;				if (disk_write(drv, buf,
                     2 + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR; /*
                     Primary table */
 27584                        ;				if (disk_write(drv, buf,
                     s_bpt + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR
                    ; /* Secondary table */
 27585                        ;			}
 27586                        ;		}while (++pi < GPT_ITEMS);
 27587                        ;
 27588                        ;		/* Create primary GPT header */
 27589                        ;		mem_set(buf, 0, ss);
 27590                        ;		mem_cpy(buf + GPTH_Sign, "EFI PART" "\0\
                    0\1\0" "\x5C\0\0", 16); /* Signature, version (1.0) and size
  Mon Aug  9 2021 16:52                                                Page 524


                     (92) */
 27591                        ;		st_dword(buf + GPTH_PtBcc, ~bcc); /* Tab
                    le check sum */
 27592                        ;		st_qword(buf + GPTH_CurLba, 1); /* LBA o
                    f this header */
 27593                        ;		st_qword(buf + GPTH_BakLba, sz_drv - 1);
                     /* LBA of another header */
 27594                        ;		st_qword(buf + GPTH_FstLba, 2 + sz_pt); 
                    /* LBA of first allocatable sector */
 27595                        ;		st_qword(buf + GPTH_LstLba, s_bpt - 1); 
                    /* LBA of last allocatable sector */
 27596                        ;		st_dword(buf + GPTH_PteSize, SZ_GPTE); /
                    * Size of a table entry */
 27597                        ;		st_dword(buf + GPTH_PtNum, GPT_ITEMS); /
                    * Number of table entries */
 27598                        ;		st_dword(buf + GPTH_PtOfs, 2); /* LBA of
                     this table */
 27599                        ;		rnd = make_rand(rnd, buf + GPTH_DskGuid,
                     16); /* Disk GUID */
 27600                        ;		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc
                     = crc32(bcc, buf[i++])); /* Calculate header check sum */
 27601                        ;		st_dword(buf + GPTH_Bcc, ~bcc); /* Heade
                    r check sum */
 27602                        ;		if (disk_write(drv, buf, 1, 1) != RES_OK
                    ) return FR_DISK_ERR;
 27603                        ;
 27604                        ;		/* Create secondary GPT header */
 27605                        ;		st_qword(buf + GPTH_CurLba, sz_drv - 1);
                     /* LBA of this header */
 27606                        ;		st_qword(buf + GPTH_BakLba, 1); /* LBA o
                    f another header */
 27607                        ;		st_qword(buf + GPTH_PtOfs, s_bpt); /* LB
                    A of this table */
 27608                        ;		st_dword(buf + GPTH_Bcc, 0);
 27609                        ;		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc
                     = crc32(bcc, buf[i++])); /* Calculate header check sum */
 27610                        ;		st_dword(buf + GPTH_Bcc, ~bcc); /* Heade
                    r check sum */
 27611                        ;		if (disk_write(drv, buf, sz_drv - 1, 1) 
                    != RES_OK) return FR_DISK_ERR;
 27612                        ;
 27613                        ;		/* Create protective MBR */
 27614                        ;		mem_set(buf, 0, ss);
 27615                        ;		mem_cpy(buf + MBR_Table, gpt_mbr, 16); /
                    * Create a GPT partition */
 27616                        ;		st_word(buf + BS_55AA, 0xAA55);
 27617                        ;		if (disk_write(drv, buf, 0, 1) != RES_OK
                    ) return FR_DISK_ERR;
 27618                        ;
 27619                        ;	}
 27620                        ;	else
 27621                        ;#endif
 27622                        ;	{ /* Create partitions in MBR */
 27623                        L10664:
 27624                        	.line	6575
 27625                        ;		sz_drv32 = (DWORD)sz_drv;
 27626                        	.line	6576
 27627 08:6E2A: A5 15        	lda	<L1134+sz_drv_1
  Mon Aug  9 2021 16:52                                                Page 525


 27628 08:6E2C: 85 19        	sta	<L1134+sz_drv32_1
 27629 08:6E2E: A5 17        	lda	<L1134+sz_drv_1+2
 27630 08:6E30: 85 1B        	sta	<L1134+sz_drv32_1+2
 27631                        ;		n_sc = N_SEC_TRACK; /* Determine drive C
                    HS without any consideration of the drive geometry */
 27632                        	.line	6577
 27633 08:6E32: E2 20        	sep	#$20
 27634                        	longa	off
 27635 08:6E34: A9 3F        	lda	#$3f
 27636 08:6E36: 85 2C        	sta	<L1134+n_sc_1
 27637 08:6E38: C2 20        	rep	#$20
 27638                        	longa	on
 27639                        ;		for (n_hd = 8; n_hd != 0 && sz_drv32 / n
                    _hd / n_sc > 1024; n_hd *= 2);
 27640                        	.line	6578
 27641 08:6E3A: E2 20        	sep	#$20
 27642                        	longa	off
 27643 08:6E3C: A9 08        	lda	#$8
 27644 08:6E3E: 85 2A        	sta	<L1134+n_hd_1
 27645 08:6E40: C2 20        	rep	#$20
 27646                        	longa	on
 27647 08:6E42: 82 06 00     	brl	L10668
 27648                        L10667:
 27649                        	.line	6578
 27650                        L10665:
 27651 08:6E45: E2 20        	sep	#$20
 27652                        	longa	off
 27653 08:6E47: 06 2A        	asl	<L1134+n_hd_1
 27654 08:6E49: C2 20        	rep	#$20
 27655                        	longa	on
 27656                        L10668:
 27657 08:6E4B: A5 2A        	lda	<L1134+n_hd_1
 27658 08:6E4D: 29 FF 00     	and	#$ff
 27659 08:6E50: D0 03        	bne	L1139
 27660 08:6E52: 82 41 00     	brl	L1138
 27661                        L1139:
 27662 08:6E55: A5 2C        	lda	<L1134+n_sc_1
 27663 08:6E57: 29 FF 00     	and	#$ff
 27664 08:6E5A: 85 01        	sta	<R0
 27665 08:6E5C: 64 03        	stz	<R0+2
 27666 08:6E5E: A5 2A        	lda	<L1134+n_hd_1
 27667 08:6E60: 29 FF 00     	and	#$ff
 27668 08:6E63: 85 05        	sta	<R1
 27669 08:6E65: 64 07        	stz	<R1+2
 27670 08:6E67: D4 07        	pei	<R1+2
 27671 08:6E69: D4 05        	pei	<R1
 27672 08:6E6B: D4 1B        	pei	<L1134+sz_drv32_1+2
 27673 08:6E6D: D4 19        	pei	<L1134+sz_drv32_1
 27674                        	xref	~~~ludv
 27675 08:6E6F: 22 xx xx xx  	jsl	~~~ludv
 27676 08:6E73: 85 05        	sta	<R1
 27677 08:6E75: 86 07        	stx	<R1+2
 27678 08:6E77: D4 03        	pei	<R0+2
 27679 08:6E79: D4 01        	pei	<R0
 27680 08:6E7B: D4 07        	pei	<R1+2
 27681 08:6E7D: D4 05        	pei	<R1
 27682                        	xref	~~~ludv
 27683 08:6E7F: 22 xx xx xx  	jsl	~~~ludv
  Mon Aug  9 2021 16:52                                                Page 526


 27684 08:6E83: 85 01        	sta	<R0
 27685 08:6E85: 86 03        	stx	<R0+2
 27686 08:6E87: A9 00 04     	lda	#$400
 27687 08:6E8A: C5 01        	cmp	<R0
 27688 08:6E8C: A9 00 00     	lda	#$0
 27689 08:6E8F: E5 03        	sbc	<R0+2
 27690 08:6E91: B0 03        	bcs	L1140
 27691 08:6E93: 82 AF FF     	brl	L10667
 27692                        L1140:
 27693                        L1138:
 27694                        L10666:
 27695                        ;		if (n_hd == 0) n_hd = 255; /* Number of 
                    heads needs to be <256 */
 27696                        	.line	6579
 27697 08:6E96: A5 2A        	lda	<L1134+n_hd_1
 27698 08:6E98: 29 FF 00     	and	#$ff
 27699 08:6E9B: F0 03        	beq	L1141
 27700 08:6E9D: 82 08 00     	brl	L10669
 27701                        L1141:
 27702                        	.line	6579
 27703 08:6EA0: E2 20        	sep	#$20
 27704                        	longa	off
 27705 08:6EA2: A9 FF        	lda	#$ff
 27706 08:6EA4: 85 2A        	sta	<L1134+n_hd_1
 27707 08:6EA6: C2 20        	rep	#$20
 27708                        	longa	on
 27709                        ;
 27710                        ;		mem_set(buf, 0, FF_MAX_SS); /* Clear MBR
                     */
 27711                        L10669:
 27712                        	.line	6581
 27713 08:6EA8: F4 00 02     	pea	#<$200
 27714 08:6EAB: F4 00 00     	pea	#<$0
 27715 08:6EAE: D4 3A        	pei	<L1133+buf_0+2
 27716 08:6EB0: D4 38        	pei	<L1133+buf_0
 27717 08:6EB2: 22 DF 01 08  	jsl	~~mem_set
 27718                        ;		pte = buf + MBR_Table; /* Partition tabl
                    e in the MBR */
 27719                        	.line	6582
 27720 08:6EB6: 18           	clc
 27721 08:6EB7: A9 BE 01     	lda	#$1be
 27722 08:6EBA: 65 38        	adc	<L1133+buf_0
 27723 08:6EBC: 85 25        	sta	<L1134+pte_1
 27724 08:6EBE: A9 00 00     	lda	#$0
 27725 08:6EC1: 65 3A        	adc	<L1133+buf_0+2
 27726 08:6EC3: 85 27        	sta	<L1134+pte_1+2
 27727                        ;		for (i = 0, s_lba32 = n_sc; i < 4 && s_l
                    ba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32)
 27728                        	.line	6583
 27729 08:6EC5: 64 11        	stz	<L1134+i_1
 27730 08:6EC7: A5 2C        	lda	<L1134+n_sc_1
 27731 08:6EC9: 29 FF 00     	and	#$ff
 27732 08:6ECC: 85 1D        	sta	<L1134+s_lba32_1
 27733 08:6ECE: 64 1F        	stz	<L1134+s_lba32_1+2
 27734 08:6ED0: 82 25 03     	brl	L10673
 27735                        L10672:
 27736                        ;		{
 27737                        	.line	6584
  Mon Aug  9 2021 16:52                                                Page 527


 27738                        ;			n_lba32 = (DWORD)plst[i]; /* Get
                     partition size */
 27739                        	.line	6585
 27740 08:6ED3: A5 11        	lda	<L1134+i_1
 27741 08:6ED5: 85 05        	sta	<R1
 27742 08:6ED7: 64 07        	stz	<R1+2
 27743 08:6ED9: D4 07        	pei	<R1+2
 27744 08:6EDB: D4 05        	pei	<R1
 27745 08:6EDD: A9 02 00     	lda	#$2
 27746                        	xref	~~~lasl
 27747 08:6EE0: 22 xx xx xx  	jsl	~~~lasl
 27748 08:6EE4: 85 01        	sta	<R0
 27749 08:6EE6: 86 03        	stx	<R0+2
 27750 08:6EE8: 18           	clc
 27751 08:6EE9: A5 32        	lda	<L1133+plst_0
 27752 08:6EEB: 65 01        	adc	<R0
 27753 08:6EED: 85 09        	sta	<R2
 27754 08:6EEF: A5 34        	lda	<L1133+plst_0+2
 27755 08:6EF1: 65 03        	adc	<R0+2
 27756 08:6EF3: 85 0B        	sta	<R2+2
 27757 08:6EF5: A7 09        	lda	[<R2]
 27758 08:6EF7: 85 21        	sta	<L1134+n_lba32_1
 27759 08:6EF9: A0 02 00     	ldy	#$2
 27760 08:6EFC: B7 09        	lda	[<R2],Y
 27761 08:6EFE: 85 23        	sta	<L1134+n_lba32_1+2
 27762                        ;			if (n_lba32 <= 100) n_lba32 = (n
                    _lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32; /* Siz
                    e in percentage? */
 27763                        	.line	6586
 27764 08:6F00: A9 64 00     	lda	#$64
 27765 08:6F03: C5 21        	cmp	<L1134+n_lba32_1
 27766 08:6F05: A9 00 00     	lda	#$0
 27767 08:6F08: E5 23        	sbc	<L1134+n_lba32_1+2
 27768 08:6F0A: B0 03        	bcs	L1142
 27769 08:6F0C: 82 49 00     	brl	L10674
 27770                        L1142:
 27771                        	.line	6586
 27772 08:6F0F: A5 21        	lda	<L1134+n_lba32_1
 27773 08:6F11: C9 64 00     	cmp	#<$64
 27774 08:6F14: D0 05        	bne	L1144
 27775 08:6F16: A5 23        	lda	<L1134+n_lba32_1+2
 27776 08:6F18: C9 00 00     	cmp	#^$64
 27777                        L1144:
 27778 08:6F1B: F0 03        	beq	L1145
 27779 08:6F1D: 82 06 00     	brl	L1143
 27780                        L1145:
 27781 08:6F20: A6 1B        	ldx	<L1134+sz_drv32_1+2
 27782 08:6F22: A5 19        	lda	<L1134+sz_drv32_1
 27783 08:6F24: 80 26        	bra	L1146
 27784                        L1143:
 27785 08:6F26: F4 00 00     	pea	#^$64
 27786 08:6F29: F4 64 00     	pea	#<$64
 27787 08:6F2C: D4 1B        	pei	<L1134+sz_drv32_1+2
 27788 08:6F2E: D4 19        	pei	<L1134+sz_drv32_1
 27789                        	xref	~~~ludv
 27790 08:6F30: 22 xx xx xx  	jsl	~~~ludv
 27791 08:6F34: 85 01        	sta	<R0
 27792 08:6F36: 86 03        	stx	<R0+2
  Mon Aug  9 2021 16:52                                                Page 528


 27793 08:6F38: D4 23        	pei	<L1134+n_lba32_1+2
 27794 08:6F3A: D4 21        	pei	<L1134+n_lba32_1
 27795 08:6F3C: D4 03        	pei	<R0+2
 27796 08:6F3E: D4 01        	pei	<R0
 27797                        	xref	~~~lmul
 27798 08:6F40: 22 xx xx xx  	jsl	~~~lmul
 27799 08:6F44: 85 01        	sta	<R0
 27800 08:6F46: 86 03        	stx	<R0+2
 27801 08:6F48: A6 03        	ldx	<R0+2
 27802 08:6F4A: A5 01        	lda	<R0
 27803                        L1146:
 27804 08:6F4C: 85 01        	sta	<R0
 27805 08:6F4E: 86 03        	stx	<R0+2
 27806 08:6F50: A5 01        	lda	<R0
 27807 08:6F52: 85 21        	sta	<L1134+n_lba32_1
 27808 08:6F54: A5 03        	lda	<R0+2
 27809 08:6F56: 85 23        	sta	<L1134+n_lba32_1+2
 27810                        ;			if (s_lba32 + n_lba32 > sz_drv32
                     || s_lba32 + n_lba32 < s_lba32) n_lba32 = sz_drv32 - s_lba3
                    2; /* Clip at drive size */
 27811                        L10674:
 27812                        	.line	6587
 27813 08:6F58: 18           	clc
 27814 08:6F59: A5 1D        	lda	<L1134+s_lba32_1
 27815 08:6F5B: 65 21        	adc	<L1134+n_lba32_1
 27816 08:6F5D: 85 01        	sta	<R0
 27817 08:6F5F: A5 1F        	lda	<L1134+s_lba32_1+2
 27818 08:6F61: 65 23        	adc	<L1134+n_lba32_1+2
 27819 08:6F63: 85 03        	sta	<R0+2
 27820 08:6F65: A5 19        	lda	<L1134+sz_drv32_1
 27821 08:6F67: C5 01        	cmp	<R0
 27822 08:6F69: A5 1B        	lda	<L1134+sz_drv32_1+2
 27823 08:6F6B: E5 03        	sbc	<R0+2
 27824 08:6F6D: B0 03        	bcs	L1148
 27825 08:6F6F: 82 1A 00     	brl	L1147
 27826                        L1148:
 27827 08:6F72: 18           	clc
 27828 08:6F73: A5 1D        	lda	<L1134+s_lba32_1
 27829 08:6F75: 65 21        	adc	<L1134+n_lba32_1
 27830 08:6F77: 85 01        	sta	<R0
 27831 08:6F79: A5 1F        	lda	<L1134+s_lba32_1+2
 27832 08:6F7B: 65 23        	adc	<L1134+n_lba32_1+2
 27833 08:6F7D: 85 03        	sta	<R0+2
 27834 08:6F7F: A5 01        	lda	<R0
 27835 08:6F81: C5 1D        	cmp	<L1134+s_lba32_1
 27836 08:6F83: A5 03        	lda	<R0+2
 27837 08:6F85: E5 1F        	sbc	<L1134+s_lba32_1+2
 27838 08:6F87: 90 03        	bcc	L1149
 27839 08:6F89: 82 0D 00     	brl	L10675
 27840                        L1149:
 27841                        L1147:
 27842                        	.line	6587
 27843 08:6F8C: 38           	sec
 27844 08:6F8D: A5 19        	lda	<L1134+sz_drv32_1
 27845 08:6F8F: E5 1D        	sbc	<L1134+s_lba32_1
 27846 08:6F91: 85 21        	sta	<L1134+n_lba32_1
 27847 08:6F93: A5 1B        	lda	<L1134+sz_drv32_1+2
 27848 08:6F95: E5 1F        	sbc	<L1134+s_lba32_1+2
  Mon Aug  9 2021 16:52                                                Page 529


 27849 08:6F97: 85 23        	sta	<L1134+n_lba32_1+2
 27850                        ;			if (n_lba32 == 0) break; /* End 
                    of table or no sector to allocate? */
 27851                        L10675:
 27852                        	.line	6588
 27853 08:6F99: A5 21        	lda	<L1134+n_lba32_1
 27854 08:6F9B: 05 23        	ora	<L1134+n_lba32_1+2
 27855 08:6F9D: D0 03        	bne	L1150
 27856 08:6F9F: 82 76 02     	brl	L10671
 27857                        L1150:
 27858                        ;
 27859                        ;			st_dword(pte + PTE_StLba, s_lba3
                    2); /* Start LBA */
 27860                        	.line	6590
 27861 08:6FA2: D4 1F        	pei	<L1134+s_lba32_1+2
 27862 08:6FA4: D4 1D        	pei	<L1134+s_lba32_1
 27863 08:6FA6: 18           	clc
 27864 08:6FA7: A9 08 00     	lda	#$8
 27865 08:6FAA: 65 25        	adc	<L1134+pte_1
 27866 08:6FAC: 85 01        	sta	<R0
 27867 08:6FAE: A9 00 00     	lda	#$0
 27868 08:6FB1: 65 27        	adc	<L1134+pte_1+2
 27869 08:6FB3: 85 03        	sta	<R0+2
 27870 08:6FB5: D4 03        	pei	<R0+2
 27871 08:6FB7: D4 01        	pei	<R0
 27872 08:6FB9: 22 16 01 08  	jsl	~~st_dword
 27873                        ;			st_dword(pte + PTE_SizLba, n_lba
                    32); /* Number of sectors */
 27874                        	.line	6591
 27875 08:6FBD: D4 23        	pei	<L1134+n_lba32_1+2
 27876 08:6FBF: D4 21        	pei	<L1134+n_lba32_1
 27877 08:6FC1: 18           	clc
 27878 08:6FC2: A9 0C 00     	lda	#$c
 27879 08:6FC5: 65 25        	adc	<L1134+pte_1
 27880 08:6FC7: 85 01        	sta	<R0
 27881 08:6FC9: A9 00 00     	lda	#$0
 27882 08:6FCC: 65 27        	adc	<L1134+pte_1+2
 27883 08:6FCE: 85 03        	sta	<R0+2
 27884 08:6FD0: D4 03        	pei	<R0+2
 27885 08:6FD2: D4 01        	pei	<R0
 27886 08:6FD4: 22 16 01 08  	jsl	~~st_dword
 27887                        ;			pte[PTE_System] = (BYTE)sys; /* 
                    System type */
 27888                        	.line	6592
 27889 08:6FD8: E2 20        	sep	#$20
 27890                        	longa	off
 27891 08:6FDA: A5 36        	lda	<L1133+sys_0
 27892 08:6FDC: A0 04 00     	ldy	#$4
 27893 08:6FDF: 97 25        	sta	[<L1134+pte_1],Y
 27894 08:6FE1: C2 20        	rep	#$20
 27895                        	longa	on
 27896                        ;
 27897                        ;			cy = (UINT)(s_lba32 / n_sc / n_h
                    d); /* Start cylinder */
 27898                        	.line	6594
 27899 08:6FE3: A5 2A        	lda	<L1134+n_hd_1
 27900 08:6FE5: 29 FF 00     	and	#$ff
 27901 08:6FE8: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 530


 27902 08:6FEA: 64 03        	stz	<R0+2
 27903 08:6FEC: A5 2C        	lda	<L1134+n_sc_1
 27904 08:6FEE: 29 FF 00     	and	#$ff
 27905 08:6FF1: 85 05        	sta	<R1
 27906 08:6FF3: 64 07        	stz	<R1+2
 27907 08:6FF5: D4 07        	pei	<R1+2
 27908 08:6FF7: D4 05        	pei	<R1
 27909 08:6FF9: D4 1F        	pei	<L1134+s_lba32_1+2
 27910 08:6FFB: D4 1D        	pei	<L1134+s_lba32_1
 27911                        	xref	~~~ludv
 27912 08:6FFD: 22 xx xx xx  	jsl	~~~ludv
 27913 08:7001: 85 05        	sta	<R1
 27914 08:7003: 86 07        	stx	<R1+2
 27915 08:7005: D4 03        	pei	<R0+2
 27916 08:7007: D4 01        	pei	<R0
 27917 08:7009: D4 07        	pei	<R1+2
 27918 08:700B: D4 05        	pei	<R1
 27919                        	xref	~~~ludv
 27920 08:700D: 22 xx xx xx  	jsl	~~~ludv
 27921 08:7011: 85 01        	sta	<R0
 27922 08:7013: 86 03        	stx	<R0+2
 27923 08:7015: A5 01        	lda	<R0
 27924 08:7017: 85 13        	sta	<L1134+cy_1
 27925                        ;			hd = (BYTE)(s_lba32 / n_sc % n_h
                    d); /* Start head */
 27926                        	.line	6595
 27927 08:7019: A5 2A        	lda	<L1134+n_hd_1
 27928 08:701B: 29 FF 00     	and	#$ff
 27929 08:701E: 85 01        	sta	<R0
 27930 08:7020: 64 03        	stz	<R0+2
 27931 08:7022: A5 2C        	lda	<L1134+n_sc_1
 27932 08:7024: 29 FF 00     	and	#$ff
 27933 08:7027: 85 05        	sta	<R1
 27934 08:7029: 64 07        	stz	<R1+2
 27935 08:702B: D4 07        	pei	<R1+2
 27936 08:702D: D4 05        	pei	<R1
 27937 08:702F: D4 1F        	pei	<L1134+s_lba32_1+2
 27938 08:7031: D4 1D        	pei	<L1134+s_lba32_1
 27939                        	xref	~~~ludv
 27940 08:7033: 22 xx xx xx  	jsl	~~~ludv
 27941 08:7037: 85 05        	sta	<R1
 27942 08:7039: 86 07        	stx	<R1+2
 27943 08:703B: D4 03        	pei	<R0+2
 27944 08:703D: D4 01        	pei	<R0
 27945 08:703F: D4 07        	pei	<R1+2
 27946 08:7041: D4 05        	pei	<R1
 27947                        	xref	~~~lumd
 27948 08:7043: 22 xx xx xx  	jsl	~~~lumd
 27949 08:7047: 85 01        	sta	<R0
 27950 08:7049: 86 03        	stx	<R0+2
 27951 08:704B: E2 20        	sep	#$20
 27952                        	longa	off
 27953 08:704D: A5 01        	lda	<R0
 27954 08:704F: 85 29        	sta	<L1134+hd_1
 27955 08:7051: C2 20        	rep	#$20
 27956                        	longa	on
 27957                        ;			sc = (BYTE)(s_lba32 % n_sc + 1);
                     /* Start sector */
  Mon Aug  9 2021 16:52                                                Page 531


 27958                        	.line	6596
 27959 08:7053: A5 2C        	lda	<L1134+n_sc_1
 27960 08:7055: 29 FF 00     	and	#$ff
 27961 08:7058: 85 01        	sta	<R0
 27962 08:705A: 64 03        	stz	<R0+2
 27963 08:705C: D4 03        	pei	<R0+2
 27964 08:705E: D4 01        	pei	<R0
 27965 08:7060: D4 1F        	pei	<L1134+s_lba32_1+2
 27966 08:7062: D4 1D        	pei	<L1134+s_lba32_1
 27967                        	xref	~~~lumd
 27968 08:7064: 22 xx xx xx  	jsl	~~~lumd
 27969 08:7068: 85 01        	sta	<R0
 27970 08:706A: 86 03        	stx	<R0+2
 27971 08:706C: 18           	clc
 27972 08:706D: A9 01 00     	lda	#$1
 27973 08:7070: 65 01        	adc	<R0
 27974 08:7072: 85 05        	sta	<R1
 27975 08:7074: A9 00 00     	lda	#$0
 27976 08:7077: 65 03        	adc	<R0+2
 27977 08:7079: 85 07        	sta	<R1+2
 27978 08:707B: E2 20        	sep	#$20
 27979                        	longa	off
 27980 08:707D: A5 05        	lda	<R1
 27981 08:707F: 85 2B        	sta	<L1134+sc_1
 27982 08:7081: C2 20        	rep	#$20
 27983                        	longa	on
 27984                        ;			pte[PTE_StHead] = hd;
 27985                        	.line	6597
 27986 08:7083: E2 20        	sep	#$20
 27987                        	longa	off
 27988 08:7085: A5 29        	lda	<L1134+hd_1
 27989 08:7087: A0 01 00     	ldy	#$1
 27990 08:708A: 97 25        	sta	[<L1134+pte_1],Y
 27991 08:708C: C2 20        	rep	#$20
 27992                        	longa	on
 27993                        ;			pte[PTE_StSec] = (BYTE)((cy >> 2
                     & 0xC0) | sc);
 27994                        	.line	6598
 27995 08:708E: A5 13        	lda	<L1134+cy_1
 27996 08:7090: 4A           	lsr	A
 27997 08:7091: 4A           	lsr	A
 27998 08:7092: 29 C0 00     	and	#<$c0
 27999 08:7095: 85 01        	sta	<R0
 28000 08:7097: A5 2B        	lda	<L1134+sc_1
 28001 08:7099: 29 FF 00     	and	#$ff
 28002 08:709C: 85 05        	sta	<R1
 28003 08:709E: A5 05        	lda	<R1
 28004 08:70A0: 05 01        	ora	<R0
 28005 08:70A2: E2 20        	sep	#$20
 28006                        	longa	off
 28007 08:70A4: A0 02 00     	ldy	#$2
 28008 08:70A7: 97 25        	sta	[<L1134+pte_1],Y
 28009 08:70A9: C2 20        	rep	#$20
 28010                        	longa	on
 28011                        ;			pte[PTE_StCyl] = (BYTE)cy;
 28012                        	.line	6599
 28013 08:70AB: E2 20        	sep	#$20
 28014                        	longa	off
  Mon Aug  9 2021 16:52                                                Page 532


 28015 08:70AD: A5 13        	lda	<L1134+cy_1
 28016 08:70AF: A0 03 00     	ldy	#$3
 28017 08:70B2: 97 25        	sta	[<L1134+pte_1],Y
 28018 08:70B4: C2 20        	rep	#$20
 28019                        	longa	on
 28020                        ;
 28021                        ;			cy = (UINT)((s_lba32 + n_lba32 -
                     1) / n_sc / n_hd); /* End cylinder */
 28022                        	.line	6601
 28023 08:70B6: A5 2A        	lda	<L1134+n_hd_1
 28024 08:70B8: 29 FF 00     	and	#$ff
 28025 08:70BB: 85 01        	sta	<R0
 28026 08:70BD: 64 03        	stz	<R0+2
 28027 08:70BF: A5 2C        	lda	<L1134+n_sc_1
 28028 08:70C1: 29 FF 00     	and	#$ff
 28029 08:70C4: 85 05        	sta	<R1
 28030 08:70C6: 64 07        	stz	<R1+2
 28031 08:70C8: 18           	clc
 28032 08:70C9: A5 1D        	lda	<L1134+s_lba32_1
 28033 08:70CB: 65 21        	adc	<L1134+n_lba32_1
 28034 08:70CD: 85 09        	sta	<R2
 28035 08:70CF: A5 1F        	lda	<L1134+s_lba32_1+2
 28036 08:70D1: 65 23        	adc	<L1134+n_lba32_1+2
 28037 08:70D3: 85 0B        	sta	<R2+2
 28038 08:70D5: 18           	clc
 28039 08:70D6: A9 FF FF     	lda	#$ffff
 28040 08:70D9: 65 09        	adc	<R2
 28041 08:70DB: 85 0D        	sta	<R3
 28042 08:70DD: A9 FF FF     	lda	#$ffff
 28043 08:70E0: 65 0B        	adc	<R2+2
 28044 08:70E2: 85 0F        	sta	<R3+2
 28045 08:70E4: D4 07        	pei	<R1+2
 28046 08:70E6: D4 05        	pei	<R1
 28047 08:70E8: D4 0F        	pei	<R3+2
 28048 08:70EA: D4 0D        	pei	<R3
 28049                        	xref	~~~ludv
 28050 08:70EC: 22 xx xx xx  	jsl	~~~ludv
 28051 08:70F0: 85 05        	sta	<R1
 28052 08:70F2: 86 07        	stx	<R1+2
 28053 08:70F4: D4 03        	pei	<R0+2
 28054 08:70F6: D4 01        	pei	<R0
 28055 08:70F8: D4 07        	pei	<R1+2
 28056 08:70FA: D4 05        	pei	<R1
 28057                        	xref	~~~ludv
 28058 08:70FC: 22 xx xx xx  	jsl	~~~ludv
 28059 08:7100: 85 01        	sta	<R0
 28060 08:7102: 86 03        	stx	<R0+2
 28061 08:7104: A5 01        	lda	<R0
 28062 08:7106: 85 13        	sta	<L1134+cy_1
 28063                        ;			hd = (BYTE)((s_lba32 + n_lba32 -
                     1) / n_sc % n_hd); /* End head */
 28064                        	.line	6602
 28065 08:7108: A5 2A        	lda	<L1134+n_hd_1
 28066 08:710A: 29 FF 00     	and	#$ff
 28067 08:710D: 85 01        	sta	<R0
 28068 08:710F: 64 03        	stz	<R0+2
 28069 08:7111: A5 2C        	lda	<L1134+n_sc_1
 28070 08:7113: 29 FF 00     	and	#$ff
  Mon Aug  9 2021 16:52                                                Page 533


 28071 08:7116: 85 05        	sta	<R1
 28072 08:7118: 64 07        	stz	<R1+2
 28073 08:711A: 18           	clc
 28074 08:711B: A5 1D        	lda	<L1134+s_lba32_1
 28075 08:711D: 65 21        	adc	<L1134+n_lba32_1
 28076 08:711F: 85 09        	sta	<R2
 28077 08:7121: A5 1F        	lda	<L1134+s_lba32_1+2
 28078 08:7123: 65 23        	adc	<L1134+n_lba32_1+2
 28079 08:7125: 85 0B        	sta	<R2+2
 28080 08:7127: 18           	clc
 28081 08:7128: A9 FF FF     	lda	#$ffff
 28082 08:712B: 65 09        	adc	<R2
 28083 08:712D: 85 0D        	sta	<R3
 28084 08:712F: A9 FF FF     	lda	#$ffff
 28085 08:7132: 65 0B        	adc	<R2+2
 28086 08:7134: 85 0F        	sta	<R3+2
 28087 08:7136: D4 07        	pei	<R1+2
 28088 08:7138: D4 05        	pei	<R1
 28089 08:713A: D4 0F        	pei	<R3+2
 28090 08:713C: D4 0D        	pei	<R3
 28091                        	xref	~~~ludv
 28092 08:713E: 22 xx xx xx  	jsl	~~~ludv
 28093 08:7142: 85 05        	sta	<R1
 28094 08:7144: 86 07        	stx	<R1+2
 28095 08:7146: D4 03        	pei	<R0+2
 28096 08:7148: D4 01        	pei	<R0
 28097 08:714A: D4 07        	pei	<R1+2
 28098 08:714C: D4 05        	pei	<R1
 28099                        	xref	~~~lumd
 28100 08:714E: 22 xx xx xx  	jsl	~~~lumd
 28101 08:7152: 85 01        	sta	<R0
 28102 08:7154: 86 03        	stx	<R0+2
 28103 08:7156: E2 20        	sep	#$20
 28104                        	longa	off
 28105 08:7158: A5 01        	lda	<R0
 28106 08:715A: 85 29        	sta	<L1134+hd_1
 28107 08:715C: C2 20        	rep	#$20
 28108                        	longa	on
 28109                        ;			sc = (BYTE)((s_lba32 + n_lba32 -
                     1) % n_sc + 1); /* End sector */
 28110                        	.line	6603
 28111 08:715E: A5 2C        	lda	<L1134+n_sc_1
 28112 08:7160: 29 FF 00     	and	#$ff
 28113 08:7163: 85 01        	sta	<R0
 28114 08:7165: 64 03        	stz	<R0+2
 28115 08:7167: 18           	clc
 28116 08:7168: A5 1D        	lda	<L1134+s_lba32_1
 28117 08:716A: 65 21        	adc	<L1134+n_lba32_1
 28118 08:716C: 85 05        	sta	<R1
 28119 08:716E: A5 1F        	lda	<L1134+s_lba32_1+2
 28120 08:7170: 65 23        	adc	<L1134+n_lba32_1+2
 28121 08:7172: 85 07        	sta	<R1+2
 28122 08:7174: 18           	clc
 28123 08:7175: A9 FF FF     	lda	#$ffff
 28124 08:7178: 65 05        	adc	<R1
 28125 08:717A: 85 09        	sta	<R2
 28126 08:717C: A9 FF FF     	lda	#$ffff
 28127 08:717F: 65 07        	adc	<R1+2
  Mon Aug  9 2021 16:52                                                Page 534


 28128 08:7181: 85 0B        	sta	<R2+2
 28129 08:7183: D4 03        	pei	<R0+2
 28130 08:7185: D4 01        	pei	<R0
 28131 08:7187: D4 0B        	pei	<R2+2
 28132 08:7189: D4 09        	pei	<R2
 28133                        	xref	~~~lumd
 28134 08:718B: 22 xx xx xx  	jsl	~~~lumd
 28135 08:718F: 85 01        	sta	<R0
 28136 08:7191: 86 03        	stx	<R0+2
 28137 08:7193: 18           	clc
 28138 08:7194: A9 01 00     	lda	#$1
 28139 08:7197: 65 01        	adc	<R0
 28140 08:7199: 85 05        	sta	<R1
 28141 08:719B: A9 00 00     	lda	#$0
 28142 08:719E: 65 03        	adc	<R0+2
 28143 08:71A0: 85 07        	sta	<R1+2
 28144 08:71A2: E2 20        	sep	#$20
 28145                        	longa	off
 28146 08:71A4: A5 05        	lda	<R1
 28147 08:71A6: 85 2B        	sta	<L1134+sc_1
 28148 08:71A8: C2 20        	rep	#$20
 28149                        	longa	on
 28150                        ;			pte[PTE_EdHead] = hd;
 28151                        	.line	6604
 28152 08:71AA: E2 20        	sep	#$20
 28153                        	longa	off
 28154 08:71AC: A5 29        	lda	<L1134+hd_1
 28155 08:71AE: A0 05 00     	ldy	#$5
 28156 08:71B1: 97 25        	sta	[<L1134+pte_1],Y
 28157 08:71B3: C2 20        	rep	#$20
 28158                        	longa	on
 28159                        ;			pte[PTE_EdSec] = (BYTE)((cy >> 2
                     & 0xC0) | sc);
 28160                        	.line	6605
 28161 08:71B5: A5 13        	lda	<L1134+cy_1
 28162 08:71B7: 4A           	lsr	A
 28163 08:71B8: 4A           	lsr	A
 28164 08:71B9: 29 C0 00     	and	#<$c0
 28165 08:71BC: 85 01        	sta	<R0
 28166 08:71BE: A5 2B        	lda	<L1134+sc_1
 28167 08:71C0: 29 FF 00     	and	#$ff
 28168 08:71C3: 85 05        	sta	<R1
 28169 08:71C5: A5 05        	lda	<R1
 28170 08:71C7: 05 01        	ora	<R0
 28171 08:71C9: E2 20        	sep	#$20
 28172                        	longa	off
 28173 08:71CB: A0 06 00     	ldy	#$6
 28174 08:71CE: 97 25        	sta	[<L1134+pte_1],Y
 28175 08:71D0: C2 20        	rep	#$20
 28176                        	longa	on
 28177                        ;			pte[PTE_EdCyl] = (BYTE)cy;
 28178                        	.line	6606
 28179 08:71D2: E2 20        	sep	#$20
 28180                        	longa	off
 28181 08:71D4: A5 13        	lda	<L1134+cy_1
 28182 08:71D6: A0 07 00     	ldy	#$7
 28183 08:71D9: 97 25        	sta	[<L1134+pte_1],Y
 28184 08:71DB: C2 20        	rep	#$20
  Mon Aug  9 2021 16:52                                                Page 535


 28185                        	longa	on
 28186                        ;
 28187                        ;			pte += SZ_PTE; /* Next entry */
 28188                        	.line	6608
 28189 08:71DD: 18           	clc
 28190 08:71DE: A9 10 00     	lda	#$10
 28191 08:71E1: 65 25        	adc	<L1134+pte_1
 28192 08:71E3: 85 25        	sta	<L1134+pte_1
 28193 08:71E5: 90 02        	bcc	L1151
 28194 08:71E7: E6 27        	inc	<L1134+pte_1+2
 28195                        L1151:
 28196                        ;		}
 28197                        	.line	6609
 28198                        L10670:
 28199 08:71E9: 18           	clc
 28200 08:71EA: A5 1D        	lda	<L1134+s_lba32_1
 28201 08:71EC: 65 21        	adc	<L1134+n_lba32_1
 28202 08:71EE: 85 1D        	sta	<L1134+s_lba32_1
 28203 08:71F0: A5 1F        	lda	<L1134+s_lba32_1+2
 28204 08:71F2: 65 23        	adc	<L1134+n_lba32_1+2
 28205 08:71F4: 85 1F        	sta	<L1134+s_lba32_1+2
 28206 08:71F6: E6 11        	inc	<L1134+i_1
 28207                        L10673:
 28208 08:71F8: A5 11        	lda	<L1134+i_1
 28209 08:71FA: C9 04 00     	cmp	#<$4
 28210 08:71FD: 90 03        	bcc	L1153
 28211 08:71FF: 82 16 00     	brl	L1152
 28212                        L1153:
 28213 08:7202: A5 1D        	lda	<L1134+s_lba32_1
 28214 08:7204: 05 1F        	ora	<L1134+s_lba32_1+2
 28215 08:7206: D0 03        	bne	L1154
 28216 08:7208: 82 0D 00     	brl	L1152
 28217                        L1154:
 28218 08:720B: A5 1D        	lda	<L1134+s_lba32_1
 28219 08:720D: C5 19        	cmp	<L1134+sz_drv32_1
 28220 08:720F: A5 1F        	lda	<L1134+s_lba32_1+2
 28221 08:7211: E5 1B        	sbc	<L1134+sz_drv32_1+2
 28222 08:7213: B0 03        	bcs	L1155
 28223 08:7215: 82 BB FC     	brl	L10672
 28224                        L1155:
 28225                        L1152:
 28226                        L10671:
 28227                        ;
 28228                        ;		st_word(buf + BS_55AA, 0xAA55); /* MBR s
                    ignature */
 28229                        	.line	6611
 28230 08:7218: F4 55 AA     	pea	#<$aa55
 28231 08:721B: 18           	clc
 28232 08:721C: A9 FE 01     	lda	#$1fe
 28233 08:721F: 65 38        	adc	<L1133+buf_0
 28234 08:7221: 85 01        	sta	<R0
 28235 08:7223: A9 00 00     	lda	#$0
 28236 08:7226: 65 3A        	adc	<L1133+buf_0+2
 28237 08:7228: 85 03        	sta	<R0+2
 28238 08:722A: D4 03        	pei	<R0+2
 28239 08:722C: D4 01        	pei	<R0
 28240 08:722E: 22 D7 00 08  	jsl	~~st_word
 28241                        ;		if (disk_write(drv, buf, 0, 1) != RES_OK
  Mon Aug  9 2021 16:52                                                Page 536


                    ) return FR_DISK_ERR; /* Write it to the MBR */
 28242                        	.line	6612
 28243 08:7232: F4 01 00     	pea	#<$1
 28244 08:7235: F4 00 00     	pea	#^$0
 28245 08:7238: F4 00 00     	pea	#<$0
 28246 08:723B: D4 3A        	pei	<L1133+buf_0+2
 28247 08:723D: D4 38        	pei	<L1133+buf_0
 28248 08:723F: D4 30        	pei	<L1133+drv_0
 28249 08:7241: 22 xx xx xx  	jsl	~~disk_write
 28250 08:7245: AA           	tax
 28251 08:7246: D0 03        	bne	L1156
 28252 08:7248: 82 06 00     	brl	L10676
 28253                        L1156:
 28254                        	.line	6612
 28255 08:724B: A9 01 00     	lda	#$1
 28256 08:724E: 82 C7 FB     	brl	L1137
 28257                        ;	}
 28258                        L10676:
 28259                        	.line	6613
 28260                        ;
 28261                        ;	return FR_OK;
 28262                        	.line	6615
 28263 08:7251: A9 00 00     	lda	#$0
 28264 08:7254: 82 C1 FB     	brl	L1137
 28265                        ;}
 28266                        	.line	6616
 28267                        	.endblock	6616
 28268             0000002C   L1133	equ	44
 28269             00000011   L1134	equ	17
 28270 08:7257:              	ends
 28271                        	efunc
 28272                        	.endfunc	6616,17,44
 28273                        	.line	6616
 28274                        ;
 28275                        ;FRESULT f_mkfs (
 28276                        ;		const TCHAR* path, /* Logical drive numb
                    er */
 28277                        ;		const MKFS_PARM* opt, /* Format options 
                    */
 28278                        ;		void* work, /* Pointer to working buffer
                     (null: use heap memory) */
 28279                        ;		UINT len /* Size of working buffer [byte
                    ] */
 28280                        ;)
 28281                        ;{
 28282                        	.line	6618
 28283                        	.line	6624
 28284                        	FFDOS
 28285                        	xdef	~~f_mkfs
 28286                        	func
 28287                        	.function	6624
 28288                        ~~f_mkfs:
 28289                        	longa	on
 28290                        	longi	on
 28291 08:7257: 3B           	tsc
 28292 08:7258: 38           	sec
 28293 08:7259: E9 6E 00     	sbc	#L1157
 28294 08:725C: 1B           	tcs
  Mon Aug  9 2021 16:52                                                Page 537


 28295 08:725D: 0B           	phd
 28296 08:725E: 5B           	tcd
 28297             00000004   path_0	set	4
 28298             00000008   opt_0	set	8
 28299             0000000C   work_0	set	12
 28300             00000010   len_0	set	16
 28301                        	.block	6624
 28302                        ;	static const WORD cst[] =
 28303                        	data
 28304                        L1160:
 28305                        ;	{	1, 4, 16, 64, 256, 512, 0}; /* Cluster s
                    ize boundary for FAT volume (4Ks unit) */
 28306 00:0125: 01 00 04 00  	dw	$1,$4,$10,$40,$100,$200,$0
       00:0129: 10 00 40 00 
       00:012D: 00 01 00 02 
       00:0131: 00 00 
 28307 00:0133:              	ends
 28308                        ;	static const WORD cst32[] =
 28309                        	data
 28310                        L1161:
 28311                        ;	{	1, 2, 4, 8, 16, 32, 0}; /* Cluster size 
                    boundary for FAT32 volume (128Ks unit) */
 28312 00:0133: 01 00 02 00  	dw	$1,$2,$4,$8,$10,$20,$0
       00:0137: 04 00 08 00 
       00:013B: 10 00 20 00 
       00:013F: 00 00 
 28313 00:0141:              	ends
 28314                        ;	static const MKFS_PARM defopt =
 28315                        	data
 28316                        L1162:
 28317                        ;	{	FM_ANY, 0, 0, 0, 0}; /* Default paramete
                    r */
 28318 00:0141: 07 00        	db	$7,$0
 28319 00:0143: 00 00 00 00  	dw	$0,$0
 28320 00:0147: 00 00 00 00  	dl	$0
 28321 00:014B:              	ends
 28322                        ;	BYTE fsopt, fsty, sys, *buf, *pte, pdrv, ipart;
 28323                        ;	WORD ss; /* Sector size */
 28324                        ;	DWORD sz_buf, sz_blk, n_clst, pau, nsect, n;
 28325                        ;	LBA_t sz_vol, b_vol, b_fat, b_data; /* Size of v
                    olume, Base LBA of volume, fat, data */
 28326                        ;	LBA_t sect, lba[2];
 28327                        ;	DWORD sz_rsv, sz_fat, sz_dir, sz_au; /* Size of 
                    reserved, fat, dir, data, cluster */
 28328                        ;	UINT n_fat, n_root, i; /* Index, Number of FATs 
                    and Number of roor dir entries */
 28329                        ;	int vol;
 28330                        ;	DSTATUS ds;
 28331                        ;	FRESULT fr;
 28332                        ;
 28333                        ;	/* Check mounted drive and clear work area */
 28334                        ;	vol = get_ldnumber(&path); /* Get target logical
                     drive */
 28335             00000000   fsopt_1	set	0
 28336             00000001   fsty_1	set	1
 28337             00000002   sys_1	set	2
 28338             00000003   buf_1	set	3
 28339             00000007   pte_1	set	7
  Mon Aug  9 2021 16:52                                                Page 538


 28340             0000000B   pdrv_1	set	11
 28341             0000000C   ipart_1	set	12
 28342             0000000D   ss_1	set	13
 28343             0000000F   sz_buf_1	set	15
 28344             00000013   sz_blk_1	set	19
 28345             00000017   n_clst_1	set	23
 28346             0000001B   pau_1	set	27
 28347             0000001F   nsect_1	set	31
 28348             00000023   n_1	set	35
 28349             00000027   sz_vol_1	set	39
 28350             0000002B   b_vol_1	set	43
 28351             0000002F   b_fat_1	set	47
 28352             00000033   b_data_1	set	51
 28353             00000037   sect_1	set	55
 28354             0000003B   lba_1	set	59
 28355             00000043   sz_rsv_1	set	67
 28356             00000047   sz_fat_1	set	71
 28357             0000004B   sz_dir_1	set	75
 28358             0000004F   sz_au_1	set	79
 28359             00000053   n_fat_1	set	83
 28360             00000055   n_root_1	set	85
 28361             00000057   i_1	set	87
 28362             00000059   vol_1	set	89
 28363             0000005B   ds_1	set	91
 28364             0000005C   fr_1	set	92
 28365                        	.sym	cst,1160,101,19,0,7
 28366                        	.sym	cst32,1161,101,19,0,7
 28367                        	.sym	defopt,1162,10,19,80,80
 28368                        	.sym	fsopt,0,14,1,8
 28369                        	.sym	fsty,1,14,1,8
 28370                        	.sym	sys,2,14,1,8
 28371                        	.sym	buf,3,142,1,32
 28372                        	.sym	pte,7,142,1,32
 28373                        	.sym	pdrv,11,14,1,8
 28374                        	.sym	ipart,12,14,1,8
 28375                        	.sym	ss,13,5,1,16
 28376                        	.sym	sz_buf,15,18,1,32
 28377                        	.sym	sz_blk,19,18,1,32
 28378                        	.sym	n_clst,23,18,1,32
 28379                        	.sym	pau,27,18,1,32
 28380                        	.sym	nsect,31,18,1,32
 28381                        	.sym	n,35,18,1,32
 28382                        	.sym	sz_vol,39,18,1,32
 28383                        	.sym	b_vol,43,18,1,32
 28384                        	.sym	b_fat,47,18,1,32
 28385                        	.sym	b_data,51,18,1,32
 28386                        	.sym	sect,55,18,1,32
 28387                        	.sym	lba,59,114,1,0,2
 28388                        	.sym	sz_rsv,67,18,1,32
 28389                        	.sym	sz_fat,71,18,1,32
 28390                        	.sym	sz_dir,75,18,1,32
 28391                        	.sym	sz_au,79,18,1,32
 28392                        	.sym	n_fat,83,16,1,16
 28393                        	.sym	n_root,85,16,1,16
 28394                        	.sym	i,87,16,1,16
 28395                        	.sym	vol,89,5,1,16
 28396                        	.sym	ds,91,14,1,8
 28397                        	.sym	fr,92,5,1,16
  Mon Aug  9 2021 16:52                                                Page 539


 28398                        	.sym	path,4,142,6,32
 28399                        	.sym	opt,8,138,6,32,80
 28400                        	.sym	work,12,129,6,32
 28401                        	.sym	len,16,16,6,16
 28402                        	.line	6643
 28403 08:725F: F4 00 00     	pea	#0
 28404 08:7262: 18           	clc
 28405 08:7263: 7B           	tdc
 28406 08:7264: 69 72 00     	adc	#<L1157+path_0
 28407 08:7267: 48           	pha
 28408 08:7268: 22 76 38 08  	jsl	~~get_ldnumber
 28409 08:726C: 85 6A        	sta	<L1158+vol_1
 28410                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 28411                        	.line	6644
 28412 08:726E: A5 6A        	lda	<L1158+vol_1
 28413 08:7270: 30 03        	bmi	L1163
 28414 08:7272: 82 15 00     	brl	L10677
 28415                        L1163:
 28416                        	.line	6644
 28417 08:7275: A9 0B 00     	lda	#$b
 28418                        L1164:
 28419 08:7278: A8           	tay
 28420 08:7279: A5 70        	lda	<L1157+2
 28421 08:727B: 85 7E        	sta	<L1157+2+14
 28422 08:727D: A5 6F        	lda	<L1157+1
 28423 08:727F: 85 7D        	sta	<L1157+1+14
 28424 08:7281: 2B           	pld
 28425 08:7282: 3B           	tsc
 28426 08:7283: 18           	clc
 28427 08:7284: 69 7C 00     	adc	#L1157+14
 28428 08:7287: 1B           	tcs
 28429 08:7288: 98           	tya
 28430 08:7289: 6B           	rtl
 28431                        ;	if (FatFs[vol]) FatFs[vol]->fs_type = 0; /* Clea
                    r the fs object if mounted */
 28432                        L10677:
 28433                        	.line	6645
 28434 08:728A: A5 6A        	lda	<L1158+vol_1
 28435 08:728C: 0A           	asl	A
 28436 08:728D: 0A           	asl	A
 28437 08:728E: 85 01        	sta	<R0
 28438 08:7290: 18           	clc
 28439 08:7291: A9 xx xx     	lda	#<~~FatFs
 28440 08:7294: 65 01        	adc	<R0
 28441 08:7296: 85 05        	sta	<R1
 28442 08:7298: B2 05        	lda	(<R1)
 28443 08:729A: A0 02 00     	ldy	#$2
 28444 08:729D: 11 05        	ora	(<R1),Y
 28445 08:729F: D0 03        	bne	L1165
 28446 08:72A1: 82 21 00     	brl	L10678
 28447                        L1165:
 28448                        	.line	6645
 28449 08:72A4: A5 6A        	lda	<L1158+vol_1
 28450 08:72A6: 0A           	asl	A
 28451 08:72A7: 0A           	asl	A
 28452 08:72A8: 85 01        	sta	<R0
 28453 08:72AA: 18           	clc
 28454 08:72AB: A9 xx xx     	lda	#<~~FatFs
  Mon Aug  9 2021 16:52                                                Page 540


 28455 08:72AE: 65 01        	adc	<R0
 28456 08:72B0: 85 05        	sta	<R1
 28457 08:72B2: B2 05        	lda	(<R1)
 28458 08:72B4: 85 01        	sta	<R0
 28459 08:72B6: A0 02 00     	ldy	#$2
 28460 08:72B9: B1 05        	lda	(<R1),Y
 28461 08:72BB: 85 03        	sta	<R0+2
 28462 08:72BD: E2 20        	sep	#$20
 28463                        	longa	off
 28464 08:72BF: A9 00        	lda	#$0
 28465 08:72C1: 87 01        	sta	[<R0]
 28466 08:72C3: C2 20        	rep	#$20
 28467                        	longa	on
 28468                        ;	pdrv = LD2PD(vol); /* Physical drive */
 28469                        L10678:
 28470                        	.line	6646
 28471 08:72C5: E2 20        	sep	#$20
 28472                        	longa	off
 28473 08:72C7: A5 6A        	lda	<L1158+vol_1
 28474 08:72C9: 85 1C        	sta	<L1158+pdrv_1
 28475 08:72CB: C2 20        	rep	#$20
 28476                        	longa	on
 28477                        ;	ipart = LD2PT(vol); /* Partition (0:create as ne
                    w, 1..:get from partition table) */
 28478                        	.line	6647
 28479 08:72CD: E2 20        	sep	#$20
 28480                        	longa	off
 28481 08:72CF: 64 1D        	stz	<L1158+ipart_1
 28482 08:72D1: C2 20        	rep	#$20
 28483                        	longa	on
 28484                        ;	if (!opt) opt = &defopt; /* Use default paramete
                    r if it is not given */
 28485                        	.line	6648
 28486 08:72D3: A5 76        	lda	<L1157+opt_0
 28487 08:72D5: 05 78        	ora	<L1157+opt_0+2
 28488 08:72D7: F0 03        	beq	L1166
 28489 08:72D9: 82 0A 00     	brl	L10679
 28490                        L1166:
 28491                        	.line	6648
 28492 08:72DC: A9 xx xx     	lda	#<L1162
 28493 08:72DF: 85 76        	sta	<L1157+opt_0
 28494                        	xref	_BEG_DATA
 28495 08:72E1: A9 xx xx     	lda	#_BEG_DATA>>16
 28496 08:72E4: 85 78        	sta	<L1157+opt_0+2
 28497                        ;
 28498                        ;	/* Get physical drive status (sz_drv, sz_blk, ss
                    ) */
 28499                        ;	ds = disk_initialize(pdrv);
 28500                        L10679:
 28501                        	.line	6651
 28502 08:72E6: D4 1C        	pei	<L1158+pdrv_1
 28503 08:72E8: 22 xx xx xx  	jsl	~~disk_initialize
 28504 08:72EC: E2 20        	sep	#$20
 28505                        	longa	off
 28506 08:72EE: 85 6C        	sta	<L1158+ds_1
 28507 08:72F0: C2 20        	rep	#$20
 28508                        	longa	on
 28509                        ;	if (ds & STA_NOINIT) return FR_NOT_READY;
  Mon Aug  9 2021 16:52                                                Page 541


 28510                        	.line	6652
 28511 08:72F2: E2 20        	sep	#$20
 28512                        	longa	off
 28513 08:72F4: A5 6C        	lda	<L1158+ds_1
 28514 08:72F6: 29 01        	and	#<$1
 28515 08:72F8: C2 20        	rep	#$20
 28516                        	longa	on
 28517 08:72FA: D0 03        	bne	L1167
 28518 08:72FC: 82 06 00     	brl	L10680
 28519                        L1167:
 28520                        	.line	6652
 28521 08:72FF: A9 03 00     	lda	#$3
 28522 08:7302: 82 73 FF     	brl	L1164
 28523                        ;	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 28524                        L10680:
 28525                        	.line	6653
 28526 08:7305: E2 20        	sep	#$20
 28527                        	longa	off
 28528 08:7307: A5 6C        	lda	<L1158+ds_1
 28529 08:7309: 29 04        	and	#<$4
 28530 08:730B: C2 20        	rep	#$20
 28531                        	longa	on
 28532 08:730D: D0 03        	bne	L1168
 28533 08:730F: 82 06 00     	brl	L10681
 28534                        L1168:
 28535                        	.line	6653
 28536 08:7312: A9 0A 00     	lda	#$a
 28537 08:7315: 82 60 FF     	brl	L1164
 28538                        ;	sz_blk = opt->align;
 28539                        L10681:
 28540                        	.line	6654
 28541 08:7318: A0 02 00     	ldy	#$2
 28542 08:731B: B7 76        	lda	[<L1157+opt_0],Y
 28543 08:731D: 85 24        	sta	<L1158+sz_blk_1
 28544 08:731F: 64 26        	stz	<L1158+sz_blk_1+2
 28545                        ;	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SI
                    ZE, &sz_blk) != RES_OK) sz_blk = 1;
 28546                        	.line	6655
 28547 08:7321: A5 24        	lda	<L1158+sz_blk_1
 28548 08:7323: 05 26        	ora	<L1158+sz_blk_1+2
 28549 08:7325: F0 03        	beq	L1169
 28550 08:7327: 82 22 00     	brl	L10682
 28551                        L1169:
 28552 08:732A: F4 00 00     	pea	#0
 28553 08:732D: 18           	clc
 28554 08:732E: 7B           	tdc
 28555 08:732F: 69 24 00     	adc	#<L1158+sz_blk_1
 28556 08:7332: 48           	pha
 28557 08:7333: F4 03 00     	pea	#<$3
 28558 08:7336: D4 1C        	pei	<L1158+pdrv_1
 28559 08:7338: 22 xx xx xx  	jsl	~~disk_ioctl
 28560 08:733C: AA           	tax
 28561 08:733D: D0 03        	bne	L1170
 28562 08:733F: 82 0A 00     	brl	L10682
 28563                        L1170:
 28564                        	.line	6655
 28565 08:7342: A9 01 00     	lda	#$1
 28566 08:7345: 85 24        	sta	<L1158+sz_blk_1
  Mon Aug  9 2021 16:52                                                Page 542


 28567 08:7347: A9 00 00     	lda	#$0
 28568 08:734A: 85 26        	sta	<L1158+sz_blk_1+2
 28569                        ;	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & 
                    (sz_blk - 1))) sz_blk = 1;
 28570                        L10682:
 28571                        	.line	6656
 28572 08:734C: A5 24        	lda	<L1158+sz_blk_1
 28573 08:734E: 05 26        	ora	<L1158+sz_blk_1+2
 28574 08:7350: D0 03        	bne	L1172
 28575 08:7352: 82 33 00     	brl	L1171
 28576                        L1172:
 28577 08:7355: A9 00 80     	lda	#$8000
 28578 08:7358: C5 24        	cmp	<L1158+sz_blk_1
 28579 08:735A: A9 00 00     	lda	#$0
 28580 08:735D: E5 26        	sbc	<L1158+sz_blk_1+2
 28581 08:735F: B0 03        	bcs	L1173
 28582 08:7361: 82 24 00     	brl	L1171
 28583                        L1173:
 28584 08:7364: 18           	clc
 28585 08:7365: A9 FF FF     	lda	#$ffff
 28586 08:7368: 65 24        	adc	<L1158+sz_blk_1
 28587 08:736A: 85 01        	sta	<R0
 28588 08:736C: A9 FF FF     	lda	#$ffff
 28589 08:736F: 65 26        	adc	<L1158+sz_blk_1+2
 28590 08:7371: 85 03        	sta	<R0+2
 28591 08:7373: A5 24        	lda	<L1158+sz_blk_1
 28592 08:7375: 25 01        	and	<R0
 28593 08:7377: 85 05        	sta	<R1
 28594 08:7379: A5 26        	lda	<L1158+sz_blk_1+2
 28595 08:737B: 25 03        	and	<R0+2
 28596 08:737D: 85 07        	sta	<R1+2
 28597 08:737F: A5 05        	lda	<R1
 28598 08:7381: 05 07        	ora	<R1+2
 28599 08:7383: D0 03        	bne	L1174
 28600 08:7385: 82 0A 00     	brl	L10683
 28601                        L1174:
 28602                        L1171:
 28603                        	.line	6656
 28604 08:7388: A9 01 00     	lda	#$1
 28605 08:738B: 85 24        	sta	<L1158+sz_blk_1
 28606 08:738D: A9 00 00     	lda	#$0
 28607 08:7390: 85 26        	sta	<L1158+sz_blk_1+2
 28608                        ;#if FF_MAX_SS != FF_MIN_SS
 28609                        ;	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RE
                    S_OK) return FR_DISK_ERR;
 28610                        ;	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (s
                    s - 1))) return FR_DISK_ERR;
 28611                        ;#else
 28612                        ;	ss = FF_MAX_SS;
 28613                        L10683:
 28614                        	.line	6661
 28615 08:7392: A9 00 02     	lda	#$200
 28616 08:7395: 85 1E        	sta	<L1158+ss_1
 28617                        ;#endif
 28618                        ;	/* Options for FAT sub-type and FAT parameters *
                    /
 28619                        ;	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 28620                        	.line	6664
  Mon Aug  9 2021 16:52                                                Page 543


 28621 08:7397: E2 20        	sep	#$20
 28622                        	longa	off
 28623 08:7399: A7 76        	lda	[<L1157+opt_0]
 28624 08:739B: 29 0F        	and	#<$f
 28625 08:739D: 85 11        	sta	<L1158+fsopt_1
 28626 08:739F: C2 20        	rep	#$20
 28627                        	longa	on
 28628                        ;	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? o
                    pt->n_fat : 1;
 28629                        	.line	6665
 28630 08:73A1: E2 20        	sep	#$20
 28631                        	longa	off
 28632 08:73A3: A0 01 00     	ldy	#$1
 28633 08:73A6: B7 76        	lda	[<L1157+opt_0],Y
 28634 08:73A8: C9 01        	cmp	#<$1
 28635 08:73AA: C2 20        	rep	#$20
 28636                        	longa	on
 28637 08:73AC: B0 03        	bcs	L1176
 28638 08:73AE: 82 1A 00     	brl	L1175
 28639                        L1176:
 28640 08:73B1: E2 20        	sep	#$20
 28641                        	longa	off
 28642 08:73B3: A9 02        	lda	#$2
 28643 08:73B5: A0 01 00     	ldy	#$1
 28644 08:73B8: D7 76        	cmp	[<L1157+opt_0],Y
 28645 08:73BA: C2 20        	rep	#$20
 28646                        	longa	on
 28647 08:73BC: B0 03        	bcs	L1177
 28648 08:73BE: 82 0A 00     	brl	L1175
 28649                        L1177:
 28650 08:73C1: A0 01 00     	ldy	#$1
 28651 08:73C4: B7 76        	lda	[<L1157+opt_0],Y
 28652 08:73C6: 29 FF 00     	and	#$ff
 28653 08:73C9: 80 03        	bra	L1178
 28654                        L1175:
 28655 08:73CB: A9 01 00     	lda	#$1
 28656                        L1178:
 28657 08:73CE: 85 64        	sta	<L1158+n_fat_1
 28658                        ;	n_root = (opt->n_root >= 1 && opt->n_root <= 327
                    68 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 51
                    2;
 28659                        	.line	6666
 28660 08:73D0: A0 04 00     	ldy	#$4
 28661 08:73D3: B7 76        	lda	[<L1157+opt_0],Y
 28662 08:73D5: C9 01 00     	cmp	#<$1
 28663 08:73D8: B0 03        	bcs	L1180
 28664 08:73DA: 82 41 00     	brl	L1179
 28665                        L1180:
 28666 08:73DD: A0 04 00     	ldy	#$4
 28667 08:73E0: B7 76        	lda	[<L1157+opt_0],Y
 28668 08:73E2: 85 01        	sta	<R0
 28669 08:73E4: 64 03        	stz	<R0+2
 28670 08:73E6: 38           	sec
 28671 08:73E7: A9 00 80     	lda	#$8000
 28672 08:73EA: E5 01        	sbc	<R0
 28673 08:73EC: A9 00 00     	lda	#$0
 28674 08:73EF: E5 03        	sbc	<R0+2
 28675 08:73F1: 70 03        	bvs	L1181
  Mon Aug  9 2021 16:52                                                Page 544


 28676 08:73F3: 49 00 80     	eor	#$8000
 28677                        L1181:
 28678 08:73F6: 30 03        	bmi	L1182
 28679 08:73F8: 82 23 00     	brl	L1179
 28680                        L1182:
 28681 08:73FB: A5 1E        	lda	<L1158+ss_1
 28682 08:73FD: A2 20 00     	ldx	#<$20
 28683                        	xref	~~~div
 28684 08:7400: 22 xx xx xx  	jsl	~~~div
 28685 08:7404: 85 01        	sta	<R0
 28686 08:7406: A0 04 00     	ldy	#$4
 28687 08:7409: B7 76        	lda	[<L1157+opt_0],Y
 28688 08:740B: A6 01        	ldx	<R0
 28689                        	xref	~~~umd
 28690 08:740D: 22 xx xx xx  	jsl	~~~umd
 28691 08:7411: AA           	tax
 28692 08:7412: F0 03        	beq	L1183
 28693 08:7414: 82 07 00     	brl	L1179
 28694                        L1183:
 28695 08:7417: A0 04 00     	ldy	#$4
 28696 08:741A: B7 76        	lda	[<L1157+opt_0],Y
 28697 08:741C: 80 03        	bra	L1184
 28698                        L1179:
 28699 08:741E: A9 00 02     	lda	#$200
 28700                        L1184:
 28701 08:7421: 85 66        	sta	<L1158+n_root_1
 28702                        ;	sz_au = (opt->au_size <= 0x1000000 && (opt->au_s
                    ize & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 28703                        	.line	6667
 28704 08:7423: A9 00 00     	lda	#$0
 28705 08:7426: A0 06 00     	ldy	#$6
 28706 08:7429: D7 76        	cmp	[<L1157+opt_0],Y
 28707 08:742B: A9 00 01     	lda	#$100
 28708 08:742E: A0 08 00     	ldy	#$8
 28709 08:7431: F7 76        	sbc	[<L1157+opt_0],Y
 28710 08:7433: B0 03        	bcs	L1186
 28711 08:7435: 82 3D 00     	brl	L1185
 28712                        L1186:
 28713 08:7438: 18           	clc
 28714 08:7439: A9 FF FF     	lda	#$ffff
 28715 08:743C: A0 06 00     	ldy	#$6
 28716 08:743F: 77 76        	adc	[<L1157+opt_0],Y
 28717 08:7441: 85 01        	sta	<R0
 28718 08:7443: A9 FF FF     	lda	#$ffff
 28719 08:7446: A0 08 00     	ldy	#$8
 28720 08:7449: 77 76        	adc	[<L1157+opt_0],Y
 28721 08:744B: 85 03        	sta	<R0+2
 28722 08:744D: A0 06 00     	ldy	#$6
 28723 08:7450: B7 76        	lda	[<L1157+opt_0],Y
 28724 08:7452: 25 01        	and	<R0
 28725 08:7454: 85 05        	sta	<R1
 28726 08:7456: A0 08 00     	ldy	#$8
 28727 08:7459: B7 76        	lda	[<L1157+opt_0],Y
 28728 08:745B: 25 03        	and	<R0+2
 28729 08:745D: 85 07        	sta	<R1+2
 28730 08:745F: A5 05        	lda	<R1
 28731 08:7461: 05 07        	ora	<R1+2
 28732 08:7463: F0 03        	beq	L1187
  Mon Aug  9 2021 16:52                                                Page 545


 28733 08:7465: 82 0D 00     	brl	L1185
 28734                        L1187:
 28735 08:7468: A0 08 00     	ldy	#$8
 28736 08:746B: B7 76        	lda	[<L1157+opt_0],Y
 28737 08:746D: AA           	tax
 28738 08:746E: A0 06 00     	ldy	#$6
 28739 08:7471: B7 76        	lda	[<L1157+opt_0],Y
 28740 08:7473: 80 07        	bra	L1188
 28741                        L1185:
 28742 08:7475: A9 00 00     	lda	#$0
 28743 08:7478: AA           	tax
 28744 08:7479: A9 00 00     	lda	#$0
 28745                        L1188:
 28746 08:747C: 85 01        	sta	<R0
 28747 08:747E: 86 03        	stx	<R0+2
 28748 08:7480: A5 01        	lda	<R0
 28749 08:7482: 85 60        	sta	<L1158+sz_au_1
 28750 08:7484: A5 03        	lda	<R0+2
 28751 08:7486: 85 62        	sta	<L1158+sz_au_1+2
 28752                        ;	sz_au /= ss; /* Byte --> Sector */
 28753                        	.line	6668
 28754 08:7488: A0 00 00     	ldy	#$0
 28755 08:748B: A5 1E        	lda	<L1158+ss_1
 28756 08:748D: 10 01        	bpl	L1189
 28757 08:748F: 88           	dey
 28758                        L1189:
 28759 08:7490: 85 01        	sta	<R0
 28760 08:7492: 84 03        	sty	<R0+2
 28761 08:7494: D4 03        	pei	<R0+2
 28762 08:7496: D4 01        	pei	<R0
 28763 08:7498: D4 62        	pei	<L1158+sz_au_1+2
 28764 08:749A: D4 60        	pei	<L1158+sz_au_1
 28765                        	xref	~~~ludv
 28766 08:749C: 22 xx xx xx  	jsl	~~~ludv
 28767 08:74A0: 85 60        	sta	<L1158+sz_au_1
 28768 08:74A2: 86 62        	stx	<L1158+sz_au_1+2
 28769                        ;
 28770                        ;	/* Get working buffer */
 28771                        ;	sz_buf = len / ss; /* Size of working buffer [se
                    ctor] */
 28772                        	.line	6671
 28773 08:74A4: A5 7E        	lda	<L1157+len_0
 28774 08:74A6: A6 1E        	ldx	<L1158+ss_1
 28775                        	xref	~~~udv
 28776 08:74A8: 22 xx xx xx  	jsl	~~~udv
 28777 08:74AC: 85 01        	sta	<R0
 28778 08:74AE: A5 01        	lda	<R0
 28779 08:74B0: 85 20        	sta	<L1158+sz_buf_1
 28780 08:74B2: 64 22        	stz	<L1158+sz_buf_1+2
 28781                        ;	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 28782                        	.line	6672
 28783 08:74B4: A5 20        	lda	<L1158+sz_buf_1
 28784 08:74B6: 05 22        	ora	<L1158+sz_buf_1+2
 28785 08:74B8: F0 03        	beq	L1190
 28786 08:74BA: 82 06 00     	brl	L10684
 28787                        L1190:
 28788                        	.line	6672
 28789 08:74BD: A9 11 00     	lda	#$11
  Mon Aug  9 2021 16:52                                                Page 546


 28790 08:74C0: 82 B5 FD     	brl	L1164
 28791                        ;	buf = (BYTE*)work; /* Working buffer */
 28792                        L10684:
 28793                        	.line	6673
 28794 08:74C3: A5 7A        	lda	<L1157+work_0
 28795 08:74C5: 85 14        	sta	<L1158+buf_1
 28796 08:74C7: A5 7C        	lda	<L1157+work_0+2
 28797 08:74C9: 85 16        	sta	<L1158+buf_1+2
 28798                        ;#if FF_USE_LFN == 3
 28799                        ;	if (!buf) buf = ff_memalloc(sz_buf * ss); /* Use
                     heap memory for working buffer */
 28800                        	.line	6675
 28801 08:74CB: A5 14        	lda	<L1158+buf_1
 28802 08:74CD: 05 16        	ora	<L1158+buf_1+2
 28803 08:74CF: F0 03        	beq	L1191
 28804 08:74D1: 82 26 00     	brl	L10685
 28805                        L1191:
 28806                        	.line	6675
 28807 08:74D4: A0 00 00     	ldy	#$0
 28808 08:74D7: A5 1E        	lda	<L1158+ss_1
 28809 08:74D9: 10 01        	bpl	L1192
 28810 08:74DB: 88           	dey
 28811                        L1192:
 28812 08:74DC: 85 01        	sta	<R0
 28813 08:74DE: 84 03        	sty	<R0+2
 28814 08:74E0: D4 22        	pei	<L1158+sz_buf_1+2
 28815 08:74E2: D4 20        	pei	<L1158+sz_buf_1
 28816 08:74E4: D4 03        	pei	<R0+2
 28817 08:74E6: D4 01        	pei	<R0
 28818                        	xref	~~~lmul
 28819 08:74E8: 22 xx xx xx  	jsl	~~~lmul
 28820 08:74EC: 85 01        	sta	<R0
 28821 08:74EE: 86 03        	stx	<R0+2
 28822 08:74F0: D4 01        	pei	<R0
 28823 08:74F2: 22 40 92 08  	jsl	~~ff_memalloc
 28824 08:74F6: 85 14        	sta	<L1158+buf_1
 28825 08:74F8: 86 16        	stx	<L1158+buf_1+2
 28826                        ;#endif
 28827                        ;	if (!buf) return FR_NOT_ENOUGH_CORE;
 28828                        L10685:
 28829                        	.line	6677
 28830 08:74FA: A5 14        	lda	<L1158+buf_1
 28831 08:74FC: 05 16        	ora	<L1158+buf_1+2
 28832 08:74FE: F0 03        	beq	L1193
 28833 08:7500: 82 06 00     	brl	L10686
 28834                        L1193:
 28835                        	.line	6677
 28836 08:7503: A9 11 00     	lda	#$11
 28837 08:7506: 82 6F FD     	brl	L1164
 28838                        ;
 28839                        ;	/* Determine where the volume to be located (b_v
                    ol, sz_vol) */
 28840                        ;	b_vol = sz_vol = 0;
 28841                        L10686:
 28842                        	.line	6680
 28843 08:7509: 64 38        	stz	<L1158+sz_vol_1
 28844 08:750B: 64 3A        	stz	<L1158+sz_vol_1+2
 28845 08:750D: 64 3C        	stz	<L1158+b_vol_1
  Mon Aug  9 2021 16:52                                                Page 547


 28846 08:750F: 64 3E        	stz	<L1158+b_vol_1+2
 28847                        ;	if (FF_MULTI_PARTITION && ipart != 0)
 28848                        	.line	6681
 28849                        ;	{ /* Is the volume associated with any specific 
                    partition? */
 28850 08:7511: 82 0E 01     	brl	L10687
 28851 08:7514: A5 1D        	lda	<L1158+ipart_1
 28852 08:7516: 29 FF 00     	and	#$ff
 28853 08:7519: D0 03        	bne	L1194
 28854 08:751B: 82 04 01     	brl	L10687
 28855                        L1194:
 28856                        	.line	6682
 28857                        ;		/* Get partition location from the exist
                    ing partition table */
 28858                        ;		if (disk_read(pdrv, buf, 0, 1) != RES_OK
                    ) LEAVE_MKFS(FR_DISK_ERR); /* Load MBR */
 28859                        	.line	6684
 28860 08:751E: F4 01 00     	pea	#<$1
 28861 08:7521: F4 00 00     	pea	#^$0
 28862 08:7524: F4 00 00     	pea	#<$0
 28863 08:7527: D4 16        	pei	<L1158+buf_1+2
 28864 08:7529: D4 14        	pei	<L1158+buf_1
 28865 08:752B: D4 1C        	pei	<L1158+pdrv_1
 28866 08:752D: 22 xx xx xx  	jsl	~~disk_read
 28867 08:7531: AA           	tax
 28868 08:7532: D0 03        	bne	L1195
 28869 08:7534: 82 17 00     	brl	L10688
 28870                        L1195:
 28871                        	.line	6684
 28872                        	.line	6684
 28873 08:7537: A5 7A        	lda	<L1157+work_0
 28874 08:7539: 05 7C        	ora	<L1157+work_0+2
 28875 08:753B: F0 03        	beq	L1196
 28876 08:753D: 82 08 00     	brl	L10689
 28877                        L1196:
 28878                        	.line	6684
 28879 08:7540: D4 16        	pei	<L1158+buf_1+2
 28880 08:7542: D4 14        	pei	<L1158+buf_1
 28881 08:7544: 22 70 92 08  	jsl	~~ff_memfree
 28882                        L10689:
 28883                        	.line	6684
 28884 08:7548: A9 01 00     	lda	#$1
 28885 08:754B: 82 2A FD     	brl	L1164
 28886                        	.line	6684
 28887                        L10688:
 28888                        	.line	6684
 28889                        ;		if (ld_word(buf + BS_55AA) != 0xAA55) LE
                    AVE_MKFS(FR_MKFS_ABORTED); /* Check if MBR is valid */
 28890                        	.line	6685
 28891 08:754E: 18           	clc
 28892 08:754F: A9 FE 01     	lda	#$1fe
 28893 08:7552: 65 14        	adc	<L1158+buf_1
 28894 08:7554: 85 01        	sta	<R0
 28895 08:7556: A9 00 00     	lda	#$0
 28896 08:7559: 65 16        	adc	<L1158+buf_1+2
 28897 08:755B: 85 03        	sta	<R0+2
 28898 08:755D: D4 03        	pei	<R0+2
 28899 08:755F: D4 01        	pei	<R0
  Mon Aug  9 2021 16:52                                                Page 548


 28900 08:7561: 22 00 00 08  	jsl	~~ld_word
 28901 08:7565: 85 05        	sta	<R1
 28902 08:7567: A5 05        	lda	<R1
 28903 08:7569: C9 55 AA     	cmp	#<$aa55
 28904 08:756C: D0 03        	bne	L1197
 28905 08:756E: 82 17 00     	brl	L10690
 28906                        L1197:
 28907                        	.line	6685
 28908                        	.line	6685
 28909 08:7571: A5 7A        	lda	<L1157+work_0
 28910 08:7573: 05 7C        	ora	<L1157+work_0+2
 28911 08:7575: F0 03        	beq	L1198
 28912 08:7577: 82 08 00     	brl	L10691
 28913                        L1198:
 28914                        	.line	6685
 28915 08:757A: D4 16        	pei	<L1158+buf_1+2
 28916 08:757C: D4 14        	pei	<L1158+buf_1
 28917 08:757E: 22 70 92 08  	jsl	~~ff_memfree
 28918                        L10691:
 28919                        	.line	6685
 28920 08:7582: A9 0E 00     	lda	#$e
 28921 08:7585: 82 F0 FC     	brl	L1164
 28922                        	.line	6685
 28923                        L10690:
 28924                        	.line	6685
 28925                        ;#if FF_LBA64
 28926                        ;		if (buf[MBR_Table + PTE_System] == 0xEE)
 28927                        ;		{ /* GPT protective MBR? */
 28928                        ;			DWORD n_ent, ofs;
 28929                        ;			QWORD pt_lba;
 28930                        ;
 28931                        ;			/* Get the partition location fr
                    om GPT */
 28932                        ;			if (disk_read(pdrv, buf, 1, 1) !
                    = RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Load GPT header sector
                     (next to MBR) */
 28933                        ;			if (!test_gpt_header(buf)) LEAVE
                    _MKFS(FR_MKFS_ABORTED); /* Check if GPT header is valid */
 28934                        ;			n_ent = ld_dword(buf + GPTH_PtNu
                    m); /* Number of entries */
 28935                        ;			pt_lba = ld_qword(buf + GPTH_PtO
                    fs); /* Table start sector */
 28936                        ;			ofs = i = 0;
 28937                        ;			while (n_ent)
 28938                        ;			{ /* Find MS Basic partition wit
                    h order of ipart */
 28939                        ;				if (ofs == 0 && disk_rea
                    d(pdrv, buf, pt_lba++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR)
                    ; /* Get PT sector */
 28940                        ;				if (!mem_cmp(buf + ofs +
                     GPTE_PtGuid, GUID_MS_Basic, 16) && ++i == ipart)
 28941                        ;				{ /* MS basic data parti
                    tion? */
 28942                        ;					b_vol = ld_qword
                    (buf + ofs + GPTE_FstLba);
 28943                        ;					sz_vol = ld_qwor
                    d(buf + ofs + GPTE_LstLba) - b_vol + 1;
 28944                        ;					break;
  Mon Aug  9 2021 16:52                                                Page 549


 28945                        ;				}
 28946                        ;				n_ent--; ofs = (ofs + SZ
                    _GPTE) % ss; /* Next entry */
 28947                        ;			}
 28948                        ;			if (n_ent == 0) LEAVE_MKFS(FR_MK
                    FS_ABORTED); /* Partition not found */
 28949                        ;			fsopt |= 0x80; /* Partitioning i
                    s in GPT */
 28950                        ;		}
 28951                        ;		else
 28952                        ;#endif
 28953                        ;		{ /* Get the partition location from MBR
                     partition table */
 28954                        	.line	6714
 28955                        ;			pte = buf + (MBR_Table + (ipart 
                    - 1) * SZ_PTE);
 28956                        	.line	6715
 28957 08:7588: A5 1D        	lda	<L1158+ipart_1
 28958 08:758A: 29 FF 00     	and	#$ff
 28959 08:758D: 85 05        	sta	<R1
 28960 08:758F: A5 05        	lda	<R1
 28961 08:7591: 0A           	asl	A
 28962 08:7592: 0A           	asl	A
 28963 08:7593: 0A           	asl	A
 28964 08:7594: 0A           	asl	A
 28965 08:7595: 85 01        	sta	<R0
 28966 08:7597: 18           	clc
 28967 08:7598: A9 AE 01     	lda	#$1ae
 28968 08:759B: 65 01        	adc	<R0
 28969 08:759D: 85 05        	sta	<R1
 28970 08:759F: A0 00 00     	ldy	#$0
 28971 08:75A2: A5 05        	lda	<R1
 28972 08:75A4: 10 01        	bpl	L1199
 28973 08:75A6: 88           	dey
 28974                        L1199:
 28975 08:75A7: 85 01        	sta	<R0
 28976 08:75A9: 84 03        	sty	<R0+2
 28977 08:75AB: 18           	clc
 28978 08:75AC: A5 14        	lda	<L1158+buf_1
 28979 08:75AE: 65 01        	adc	<R0
 28980 08:75B0: 85 18        	sta	<L1158+pte_1
 28981 08:75B2: A5 16        	lda	<L1158+buf_1+2
 28982 08:75B4: 65 03        	adc	<R0+2
 28983 08:75B6: 85 1A        	sta	<L1158+pte_1+2
 28984                        ;			if (ipart > 4 || pte[PTE_System]
                     == 0) LEAVE_MKFS(FR_MKFS_ABORTED); /* No partition? */
 28985                        	.line	6716
 28986 08:75B8: E2 20        	sep	#$20
 28987                        	longa	off
 28988 08:75BA: A9 04        	lda	#$4
 28989 08:75BC: C5 1D        	cmp	<L1158+ipart_1
 28990 08:75BE: C2 20        	rep	#$20
 28991                        	longa	on
 28992 08:75C0: B0 03        	bcs	L1201
 28993 08:75C2: 82 0D 00     	brl	L1200
 28994                        L1201:
 28995 08:75C5: A0 04 00     	ldy	#$4
 28996 08:75C8: B7 18        	lda	[<L1158+pte_1],Y
  Mon Aug  9 2021 16:52                                                Page 550


 28997 08:75CA: 29 FF 00     	and	#$ff
 28998 08:75CD: F0 03        	beq	L1202
 28999 08:75CF: 82 17 00     	brl	L10692
 29000                        L1202:
 29001                        L1200:
 29002                        	.line	6716
 29003                        	.line	6716
 29004 08:75D2: A5 7A        	lda	<L1157+work_0
 29005 08:75D4: 05 7C        	ora	<L1157+work_0+2
 29006 08:75D6: F0 03        	beq	L1203
 29007 08:75D8: 82 08 00     	brl	L10693
 29008                        L1203:
 29009                        	.line	6716
 29010 08:75DB: D4 16        	pei	<L1158+buf_1+2
 29011 08:75DD: D4 14        	pei	<L1158+buf_1
 29012 08:75DF: 22 70 92 08  	jsl	~~ff_memfree
 29013                        L10693:
 29014                        	.line	6716
 29015 08:75E3: A9 0E 00     	lda	#$e
 29016 08:75E6: 82 8F FC     	brl	L1164
 29017                        	.line	6716
 29018                        L10692:
 29019                        	.line	6716
 29020                        ;			b_vol = ld_dword(pte + PTE_StLba
                    ); /* Get volume start sector */
 29021                        	.line	6717
 29022 08:75E9: 18           	clc
 29023 08:75EA: A9 08 00     	lda	#$8
 29024 08:75ED: 65 18        	adc	<L1158+pte_1
 29025 08:75EF: 85 01        	sta	<R0
 29026 08:75F1: A9 00 00     	lda	#$0
 29027 08:75F4: 65 1A        	adc	<L1158+pte_1+2
 29028 08:75F6: 85 03        	sta	<R0+2
 29029 08:75F8: D4 03        	pei	<R0+2
 29030 08:75FA: D4 01        	pei	<R0
 29031 08:75FC: 22 3B 00 08  	jsl	~~ld_dword
 29032 08:7600: 85 3C        	sta	<L1158+b_vol_1
 29033 08:7602: 86 3E        	stx	<L1158+b_vol_1+2
 29034                        ;			sz_vol = ld_dword(pte + PTE_SizL
                    ba); /* Get volume size */
 29035                        	.line	6718
 29036 08:7604: 18           	clc
 29037 08:7605: A9 0C 00     	lda	#$c
 29038 08:7608: 65 18        	adc	<L1158+pte_1
 29039 08:760A: 85 01        	sta	<R0
 29040 08:760C: A9 00 00     	lda	#$0
 29041 08:760F: 65 1A        	adc	<L1158+pte_1+2
 29042 08:7611: 85 03        	sta	<R0+2
 29043 08:7613: D4 03        	pei	<R0+2
 29044 08:7615: D4 01        	pei	<R0
 29045 08:7617: 22 3B 00 08  	jsl	~~ld_dword
 29046 08:761B: 85 38        	sta	<L1158+sz_vol_1
 29047 08:761D: 86 3A        	stx	<L1158+sz_vol_1+2
 29048                        ;		}
 29049                        	.line	6719
 29050                        ;	}
 29051                        	.line	6720
 29052                        ;	else
  Mon Aug  9 2021 16:52                                                Page 551


 29053 08:761F: 82 62 00     	brl	L10694
 29054                        L10687:
 29055                        ;	{ /* The volume is associated with a physical dr
                    ive */
 29056                        	.line	6722
 29057                        ;		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &
                    sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29058                        	.line	6723
 29059 08:7622: F4 00 00     	pea	#0
 29060 08:7625: 18           	clc
 29061 08:7626: 7B           	tdc
 29062 08:7627: 69 38 00     	adc	#<L1158+sz_vol_1
 29063 08:762A: 48           	pha
 29064 08:762B: F4 01 00     	pea	#<$1
 29065 08:762E: D4 1C        	pei	<L1158+pdrv_1
 29066 08:7630: 22 xx xx xx  	jsl	~~disk_ioctl
 29067 08:7634: AA           	tax
 29068 08:7635: D0 03        	bne	L1204
 29069 08:7637: 82 17 00     	brl	L10695
 29070                        L1204:
 29071                        	.line	6723
 29072                        	.line	6723
 29073 08:763A: A5 7A        	lda	<L1157+work_0
 29074 08:763C: 05 7C        	ora	<L1157+work_0+2
 29075 08:763E: F0 03        	beq	L1205
 29076 08:7640: 82 08 00     	brl	L10696
 29077                        L1205:
 29078                        	.line	6723
 29079 08:7643: D4 16        	pei	<L1158+buf_1+2
 29080 08:7645: D4 14        	pei	<L1158+buf_1
 29081 08:7647: 22 70 92 08  	jsl	~~ff_memfree
 29082                        L10696:
 29083                        	.line	6723
 29084 08:764B: A9 01 00     	lda	#$1
 29085 08:764E: 82 27 FC     	brl	L1164
 29086                        	.line	6723
 29087                        L10695:
 29088                        	.line	6723
 29089                        ;		if (!(fsopt & FM_SFD))
 29090                        	.line	6724
 29091                        ;		{ /* To be partitioned? */
 29092 08:7651: E2 20        	sep	#$20
 29093                        	longa	off
 29094 08:7653: A5 11        	lda	<L1158+fsopt_1
 29095 08:7655: 29 08        	and	#<$8
 29096 08:7657: C2 20        	rep	#$20
 29097                        	longa	on
 29098 08:7659: F0 03        	beq	L1206
 29099 08:765B: 82 26 00     	brl	L10697
 29100                        L1206:
 29101                        	.line	6725
 29102                        ;			/* Create a single-partition on 
                    the drive in this function */
 29103                        ;#if FF_LBA64
 29104                        ;			if (sz_vol >= FF_MIN_GPT)
 29105                        ;			{ /* Which partition type to cre
                    ate, MBR or GPT? */
 29106                        ;				fsopt |= 0x80; /* Partit
  Mon Aug  9 2021 16:52                                                Page 552


                    ioning is in GPT */
 29107                        ;				b_vol = GPT_ALIGN / ss; 
                    sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1; /* Estimated
                     partition offset and size */
 29108                        ;			}
 29109                        ;			else
 29110                        ;#endif
 29111                        ;			{ /* Partitioning is in MBR */
 29112                        	.line	6735
 29113                        ;				if (sz_vol > N_SEC_TRACK
                    )
 29114                        	.line	6736
 29115                        ;				{
 29116 08:765E: A9 3F 00     	lda	#$3f
 29117 08:7661: C5 38        	cmp	<L1158+sz_vol_1
 29118 08:7663: A9 00 00     	lda	#$0
 29119 08:7666: E5 3A        	sbc	<L1158+sz_vol_1+2
 29120 08:7668: 90 03        	bcc	L1207
 29121 08:766A: 82 17 00     	brl	L10698
 29122                        L1207:
 29123                        	.line	6737
 29124                        ;					b_vol = N_SEC_TR
                    ACK; sz_vol -= b_vol; /* Estimated partition offset and size
                     */
 29125                        	.line	6738
 29126 08:766D: A9 3F 00     	lda	#$3f
 29127 08:7670: 85 3C        	sta	<L1158+b_vol_1
 29128 08:7672: A9 00 00     	lda	#$0
 29129 08:7675: 85 3E        	sta	<L1158+b_vol_1+2
 29130                        	.line	6738
 29131 08:7677: 38           	sec
 29132 08:7678: A5 38        	lda	<L1158+sz_vol_1
 29133 08:767A: E5 3C        	sbc	<L1158+b_vol_1
 29134 08:767C: 85 38        	sta	<L1158+sz_vol_1
 29135 08:767E: A5 3A        	lda	<L1158+sz_vol_1+2
 29136 08:7680: E5 3E        	sbc	<L1158+b_vol_1+2
 29137 08:7682: 85 3A        	sta	<L1158+sz_vol_1+2
 29138                        ;				}
 29139                        	.line	6739
 29140                        ;			}
 29141                        L10698:
 29142                        	.line	6740
 29143                        ;		}
 29144                        	.line	6741
 29145                        ;	}
 29146                        L10697:
 29147                        	.line	6742
 29148                        L10694:
 29149                        ;	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED); /
                    * Check if volume size is >=128s */
 29150                        	.line	6743
 29151 08:7684: A5 38        	lda	<L1158+sz_vol_1
 29152 08:7686: C9 80 00     	cmp	#<$80
 29153 08:7689: A5 3A        	lda	<L1158+sz_vol_1+2
 29154 08:768B: E9 00 00     	sbc	#^$80
 29155 08:768E: 90 03        	bcc	L1208
 29156 08:7690: 82 17 00     	brl	L10699
 29157                        L1208:
  Mon Aug  9 2021 16:52                                                Page 553


 29158                        	.line	6743
 29159                        	.line	6743
 29160 08:7693: A5 7A        	lda	<L1157+work_0
 29161 08:7695: 05 7C        	ora	<L1157+work_0+2
 29162 08:7697: F0 03        	beq	L1209
 29163 08:7699: 82 08 00     	brl	L10700
 29164                        L1209:
 29165                        	.line	6743
 29166 08:769C: D4 16        	pei	<L1158+buf_1+2
 29167 08:769E: D4 14        	pei	<L1158+buf_1
 29168 08:76A0: 22 70 92 08  	jsl	~~ff_memfree
 29169                        L10700:
 29170                        	.line	6743
 29171 08:76A4: A9 0E 00     	lda	#$e
 29172 08:76A7: 82 CE FB     	brl	L1164
 29173                        	.line	6743
 29174                        L10699:
 29175                        	.line	6743
 29176                        ;
 29177                        ;	/* Now start to create a FAT volume at b_vol and
                     sz_vol */
 29178                        ;
 29179                        ;	do
 29180                        	.line	6747
 29181                        L10703:
 29182                        ;	{ /* Pre-determine the FAT type */
 29183                        	.line	6748
 29184                        ;		if (FF_FS_EXFAT && (fsopt & FM_EXFAT))
 29185                        	.line	6749
 29186                        ;		{ /* exFAT possible? */
 29187 08:76AA: 82 47 00     	brl	L10704
 29188 08:76AD: E2 20        	sep	#$20
 29189                        	longa	off
 29190 08:76AF: A5 11        	lda	<L1158+fsopt_1
 29191 08:76B1: 29 04        	and	#<$4
 29192 08:76B3: C2 20        	rep	#$20
 29193                        	longa	on
 29194 08:76B5: D0 03        	bne	L1210
 29195 08:76B7: 82 3A 00     	brl	L10704
 29196                        L1210:
 29197                        	.line	6750
 29198                        ;			if ((fsopt & FM_ANY) == FM_EXFAT
                     || sz_vol >= 0x4000000 || sz_au > 128)
 29199                        	.line	6751
 29200                        ;			{ /* exFAT only, vol >= 64MS or 
                    sz_au > 128S ? */
 29201 08:76BA: A5 11        	lda	<L1158+fsopt_1
 29202 08:76BC: 29 07 00     	and	#<$7
 29203 08:76BF: 85 01        	sta	<R0
 29204 08:76C1: A5 01        	lda	<R0
 29205 08:76C3: C9 04 00     	cmp	#<$4
 29206 08:76C6: D0 03        	bne	L1212
 29207 08:76C8: 82 1E 00     	brl	L1211
 29208                        L1212:
 29209 08:76CB: A5 38        	lda	<L1158+sz_vol_1
 29210 08:76CD: C9 00 00     	cmp	#<$4000000
 29211 08:76D0: A5 3A        	lda	<L1158+sz_vol_1+2
 29212 08:76D2: E9 00 04     	sbc	#^$4000000
  Mon Aug  9 2021 16:52                                                Page 554


 29213 08:76D5: 90 03        	bcc	L1213
 29214 08:76D7: 82 0F 00     	brl	L1211
 29215                        L1213:
 29216 08:76DA: A9 80 00     	lda	#$80
 29217 08:76DD: C5 60        	cmp	<L1158+sz_au_1
 29218 08:76DF: A9 00 00     	lda	#$0
 29219 08:76E2: E5 62        	sbc	<L1158+sz_au_1+2
 29220 08:76E4: 90 03        	bcc	L1214
 29221 08:76E6: 82 0B 00     	brl	L10705
 29222                        L1214:
 29223                        L1211:
 29224                        	.line	6752
 29225                        ;				fsty = FS_EXFAT; break;
 29226                        	.line	6753
 29227 08:76E9: E2 20        	sep	#$20
 29228                        	longa	off
 29229 08:76EB: A9 04        	lda	#$4
 29230 08:76ED: 85 12        	sta	<L1158+fsty_1
 29231 08:76EF: C2 20        	rep	#$20
 29232                        	longa	on
 29233                        	.line	6753
 29234 08:76F1: 82 6A 00     	brl	L10702
 29235                        ;			}
 29236                        	.line	6754
 29237                        ;		}
 29238                        L10705:
 29239                        	.line	6755
 29240                        ;#if FF_LBA64
 29241                        ;		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR
                    _MKFS_ABORTED); /* Too large volume for FAT/FAT32 */
 29242                        ;#endif
 29243                        ;		if (sz_au > 128) sz_au = 128; /* Invalid
                     AU for FAT/FAT32? */
 29244                        L10704:
 29245                        	.line	6759
 29246 08:76F4: A9 80 00     	lda	#$80
 29247 08:76F7: C5 60        	cmp	<L1158+sz_au_1
 29248 08:76F9: A9 00 00     	lda	#$0
 29249 08:76FC: E5 62        	sbc	<L1158+sz_au_1+2
 29250 08:76FE: 90 03        	bcc	L1215
 29251 08:7700: 82 0A 00     	brl	L10706
 29252                        L1215:
 29253                        	.line	6759
 29254 08:7703: A9 80 00     	lda	#$80
 29255 08:7706: 85 60        	sta	<L1158+sz_au_1
 29256 08:7708: A9 00 00     	lda	#$0
 29257 08:770B: 85 62        	sta	<L1158+sz_au_1+2
 29258                        ;		if (fsopt & FM_FAT32)
 29259                        L10706:
 29260                        	.line	6760
 29261                        ;		{ /* FAT32 possible? */
 29262 08:770D: E2 20        	sep	#$20
 29263                        	longa	off
 29264 08:770F: A5 11        	lda	<L1158+fsopt_1
 29265 08:7711: 29 02        	and	#<$2
 29266 08:7713: C2 20        	rep	#$20
 29267                        	longa	on
 29268 08:7715: D0 03        	bne	L1216
  Mon Aug  9 2021 16:52                                                Page 555


 29269 08:7717: 82 18 00     	brl	L10707
 29270                        L1216:
 29271                        	.line	6761
 29272                        ;			if (!(fsopt & FM_FAT))
 29273                        	.line	6762
 29274                        ;			{ /* no-FAT? */
 29275 08:771A: E2 20        	sep	#$20
 29276                        	longa	off
 29277 08:771C: A5 11        	lda	<L1158+fsopt_1
 29278 08:771E: 29 01        	and	#<$1
 29279 08:7720: C2 20        	rep	#$20
 29280                        	longa	on
 29281 08:7722: F0 03        	beq	L1217
 29282 08:7724: 82 0B 00     	brl	L10708
 29283                        L1217:
 29284                        	.line	6763
 29285                        ;				fsty = FS_FAT32; break;
 29286                        	.line	6764
 29287 08:7727: E2 20        	sep	#$20
 29288                        	longa	off
 29289 08:7729: A9 03        	lda	#$3
 29290 08:772B: 85 12        	sta	<L1158+fsty_1
 29291 08:772D: C2 20        	rep	#$20
 29292                        	longa	on
 29293                        	.line	6764
 29294 08:772F: 82 2C 00     	brl	L10702
 29295                        ;			}
 29296                        	.line	6765
 29297                        ;		}
 29298                        L10708:
 29299                        	.line	6766
 29300                        ;		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INV
                    ALID_PARAMETER); /* no-FAT? */
 29301                        L10707:
 29302                        	.line	6767
 29303 08:7732: E2 20        	sep	#$20
 29304                        	longa	off
 29305 08:7734: A5 11        	lda	<L1158+fsopt_1
 29306 08:7736: 29 01        	and	#<$1
 29307 08:7738: C2 20        	rep	#$20
 29308                        	longa	on
 29309 08:773A: F0 03        	beq	L1218
 29310 08:773C: 82 17 00     	brl	L10709
 29311                        L1218:
 29312                        	.line	6767
 29313                        	.line	6767
 29314 08:773F: A5 7A        	lda	<L1157+work_0
 29315 08:7741: 05 7C        	ora	<L1157+work_0+2
 29316 08:7743: F0 03        	beq	L1219
 29317 08:7745: 82 08 00     	brl	L10710
 29318                        L1219:
 29319                        	.line	6767
 29320 08:7748: D4 16        	pei	<L1158+buf_1+2
 29321 08:774A: D4 14        	pei	<L1158+buf_1
 29322 08:774C: 22 70 92 08  	jsl	~~ff_memfree
 29323                        L10710:
 29324                        	.line	6767
 29325 08:7750: A9 13 00     	lda	#$13
  Mon Aug  9 2021 16:52                                                Page 556


 29326 08:7753: 82 22 FB     	brl	L1164
 29327                        	.line	6767
 29328                        L10709:
 29329                        	.line	6767
 29330                        ;		fsty = FS_FAT16;
 29331                        	.line	6768
 29332 08:7756: E2 20        	sep	#$20
 29333                        	longa	off
 29334 08:7758: A9 02        	lda	#$2
 29335 08:775A: 85 12        	sta	<L1158+fsty_1
 29336 08:775C: C2 20        	rep	#$20
 29337                        	longa	on
 29338                        ;	}while (0);
 29339                        	.line	6769
 29340                        L10701:
 29341                        L10702:
 29342                        ;
 29343                        ;#if FF_FS_EXFAT
 29344                        ;	if (fsty == FS_EXFAT)
 29345                        ;	{ /* Create an exFAT volume */
 29346                        ;		DWORD szb_bit, szb_case, sum, nb, cl, tb
                    l[3];
 29347                        ;		WCHAR ch, si;
 29348                        ;		UINT j, st;
 29349                        ;		BYTE b;
 29350                        ;
 29351                        ;		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_
                    ABORTED); /* Too small volume for exFAT? */
 29352                        ;#if FF_USE_TRIM
 29353                        ;		lba[0] = b_vol; lba[1] = b_vol + sz_vol 
                    - 1; /* Inform storage device that the volume area may be er
                    ased */
 29354                        ;		disk_ioctl(pdrv, CTRL_TRIM, lba);
 29355                        ;#endif
 29356                        ;		/* Determine FAT location, data location
                     and number of clusters */
 29357                        ;		if (sz_au == 0)
 29358                        ;		{ /* AU auto-selection */
 29359                        ;			sz_au = 8;
 29360                        ;			if (sz_vol >= 0x80000) sz_au = 6
                    4; /* >= 512Ks */
 29361                        ;			if (sz_vol >= 0x4000000) sz_au =
                     256; /* >= 64Ms */
 29362                        ;		}
 29363                        ;		b_fat = b_vol + 32; /* FAT start at offs
                    et 32 */
 29364                        ;		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 
                    4 + ss - 1) / ss; /* Number of FAT sectors */
 29365                        ;		b_data = (b_fat + sz_fat + sz_blk - 1) &
                     ~((LBA_t)sz_blk - 1); /* Align data area to the erase block
                     boundary */
 29366                        ;		if (b_data - b_vol >= sz_vol / 2) LEAVE_
                    MKFS(FR_MKFS_ABORTED); /* Too small volume? */
 29367                        ;		n_clst = (DWORD)(sz_vol - (b_data - b_vo
                    l)) / sz_au; /* Number of clusters */
 29368                        ;		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORT
                    ED); /* Too few clusters? */
 29369                        ;		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MK
  Mon Aug  9 2021 16:52                                                Page 557


                    FS_ABORTED); /* Too many clusters? */
 29370                        ;
 29371                        ;		szb_bit = (n_clst + 7) / 8; /* Size of a
                    llocation bitmap */
 29372                        ;		tbl[0] = (szb_bit + sz_au * ss - 1) / (s
                    z_au * ss); /* Number of allocation bitmap clusters */
 29373                        ;
 29374                        ;		/* Create a compressed up-case table */
 29375                        ;		sect = b_data + sz_au * tbl[0]; /* Table
                     start sector */
 29376                        ;		sum = 0; /* Table checksum to be stored 
                    in the 82 entry */
 29377                        ;		st = 0; si = 0; i = 0; j = 0; szb_case =
                     0;
 29378                        ;		do
 29379                        ;		{
 29380                        ;			switch (st)
 29381                        ;			{
 29382                        ;				case 0:
 29383                        ;				ch = (WCHAR)ff_wtoupper(
                    si); /* Get an up-case char */
 29384                        ;				if (ch != si)
 29385                        ;				{
 29386                        ;					si++; break; /* 
                    Store the up-case char if exist */
 29387                        ;				}
 29388                        ;				for (j = 1; (WCHAR)(si +
                     j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++)
                    ; /* Get run length of no-case block */
 29389                        ;				if (j >= 128)
 29390                        ;				{
 29391                        ;					ch = 0xFFFF; st 
                    = 2; break; /* Compress the no-case block if run is >= 128 *
                    /
 29392                        ;				}
 29393                        ;				st = 1; /* Do not compre
                    ss short run */
 29394                        ;				/* go to next case */
 29395                        ;				case 1:
 29396                        ;				ch = si++; /* Fill the s
                    hort run */
 29397                        ;				if (--j == 0) st = 0;
 29398                        ;				break;
 29399                        ;
 29400                        ;				default:
 29401                        ;				ch = (WCHAR)j; si += (WC
                    HAR)j; /* Number of chars to skip */
 29402                        ;				st = 0;
 29403                        ;			}
 29404                        ;			sum = xsum32(buf[i + 0] = (BYTE)
                    ch, sum); /* Put it into the write buffer */
 29405                        ;			sum = xsum32(buf[i + 1] = (BYTE)
                    (ch >> 8), sum);
 29406                        ;			i += 2; szb_case += 2;
 29407                        ;			if (si == 0 || i == sz_buf * ss)
 29408                        ;			{ /* Write buffered data when bu
                    ffer full or end of process */
 29409                        ;				n = (i + ss - 1) / ss;
  Mon Aug  9 2021 16:52                                                Page 558


 29410                        ;				if (disk_write(pdrv, buf
                    , sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29411                        ;				sect += n; i = 0;
 29412                        ;			}
 29413                        ;		}while (si);
 29414                        ;		tbl[1] = (szb_case + sz_au * ss - 1) / (
                    sz_au * ss); /* Number of up-case table clusters */
 29415                        ;		tbl[2] = 1; /* Number of root dir cluste
                    rs */
 29416                        ;
 29417                        ;		/* Initialize the allocation bitmap */
 29418                        ;		sect = b_data; nsect = (szb_bit + ss - 1
                    ) / ss; /* Start of bitmap and number of sectors */
 29419                        ;		nb = tbl[0] + tbl[1] + tbl[2]; /* Number
                     of clusters in-use by system */
 29420                        ;		do
 29421                        ;		{
 29422                        ;			mem_set(buf, 0, sz_buf * ss);
 29423                        ;			for (i = 0; nb >= 8 && i < sz_bu
                    f * ss; buf[i++] = 0xFF, nb -= 8);
 29424                        ;			for (b = 1; nb != 0 && i < sz_bu
                    f * ss; buf[i] |= b, b <<= 1, nb--);
 29425                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect; /* Write the buffered data */
 29426                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29427                        ;			sect += n; nsect -= n;
 29428                        ;		}while (nsect);
 29429                        ;
 29430                        ;		/* Initialize the FAT */
 29431                        ;		sect = b_fat; nsect = sz_fat; /* Start o
                    f FAT and number of FAT sectors */
 29432                        ;		j = nb = cl = 0;
 29433                        ;		do
 29434                        ;		{
 29435                        ;			mem_set(buf, 0, sz_buf * ss); i 
                    = 0; /* Clear work area and reset write index */
 29436                        ;			if (cl == 0)
 29437                        ;			{ /* Set FAT [0] and FAT[1] */
 29438                        ;				st_dword(buf + i, 0xFFFF
                    FFF8); i += 4; cl++;
 29439                        ;				st_dword(buf + i, 0xFFFF
                    FFFF); i += 4; cl++;
 29440                        ;			}
 29441                        ;			do
 29442                        ;			{ /* Create chains of bitmap, up
                    -case and root dir */
 29443                        ;				while (nb != 0 && i < sz
                    _buf * ss)
 29444                        ;				{ /* Create a chain */
 29445                        ;					st_dword(buf + i
                    , (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 29446                        ;					i += 4; cl++; nb
                    --;
 29447                        ;				}
 29448                        ;				if (nb == 0 && j < 3) nb
                     = tbl[j++]; /* Next chain */
 29449                        ;			}while (nb != 0 && i < sz_buf * 
  Mon Aug  9 2021 16:52                                                Page 559


                    ss);
 29450                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect; /* Write the buffered data */
 29451                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29452                        ;			sect += n; nsect -= n;
 29453                        ;		}while (nsect);
 29454                        ;
 29455                        ;		/* Initialize the root directory */
 29456                        ;		mem_set(buf, 0, sz_buf * ss);
 29457                        ;		buf[SZDIRE * 0 + 0] = ET_VLABEL; /* Volu
                    me label entry (no label) */
 29458                        ;		buf[SZDIRE * 1 + 0] = ET_BITMAP; /* Bitm
                    ap entry */
 29459                        ;		st_dword(buf + SZDIRE * 1 + 20, 2); /*  
                    cluster */
 29460                        ;		st_dword(buf + SZDIRE * 1 + 24, szb_bit)
                    ; /*  size */
 29461                        ;		buf[SZDIRE * 2 + 0] = ET_UPCASE; /* Up-c
                    ase table entry */
 29462                        ;		st_dword(buf + SZDIRE * 2 + 4, sum); /* 
                     sum */
 29463                        ;		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[
                    0]); /*  cluster */
 29464                        ;		st_dword(buf + SZDIRE * 2 + 24, szb_case
                    ); /*  size */
 29465                        ;		sect = b_data + sz_au * (tbl[0] + tbl[1]
                    ); nsect = sz_au; /* Start of the root directory and number 
                    of sectors */
 29466                        ;		do
 29467                        ;		{ /* Fill root directory sectors */
 29468                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;
 29469                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29470                        ;			mem_set(buf, 0, ss);
 29471                        ;			sect += n; nsect -= n;
 29472                        ;		}while (nsect);
 29473                        ;
 29474                        ;		/* Create two set of the exFAT VBR block
                    s */
 29475                        ;		sect = b_vol;
 29476                        ;		for (n = 0; n < 2; n++)
 29477                        ;		{
 29478                        ;			/* Main record (+0) */
 29479                        ;			mem_set(buf, 0, ss);
 29480                        ;			mem_cpy(buf + BS_JmpBoot, "\xEB\
                    x76\x90" "EXFAT   ", 11); /* Boot jump code (x86), OEM name 
                    */
 29481                        ;			st_qword(buf + BPB_VolOfsEx, b_v
                    ol); /* Volume offset in the physical drive [sector] */
 29482                        ;			st_qword(buf + BPB_TotSecEx, sz_
                    vol); /* Volume size [sector] */
 29483                        ;			st_dword(buf + BPB_FatOfsEx, (DW
                    ORD)(b_fat - b_vol)); /* FAT offset [sector] */
 29484                        ;			st_dword(buf + BPB_FatSzEx, sz_f
                    at); /* FAT size [sector] */
 29485                        ;			st_dword(buf + BPB_DataOfsEx, (D
  Mon Aug  9 2021 16:52                                                Page 560


                    WORD)(b_data - b_vol)); /* Data offset [sector] */
 29486                        ;			st_dword(buf + BPB_NumClusEx, n_
                    clst); /* Number of clusters */
 29487                        ;			st_dword(buf + BPB_RootClusEx, 2
                     + tbl[0] + tbl[1]); /* Root dir cluster # */
 29488                        ;			st_dword(buf + BPB_VolIDEx, GET_
                    FATTIME()); /* VSN */
 29489                        ;			st_word(buf + BPB_FSVerEx, 0x100
                    ); /* Filesystem version (1.00) */
 29490                        ;			for (buf[BPB_BytsPerSecEx] = 0, 
                    i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++); /* Log2 of sector
                     size [byte] */
 29491                        ;			for (buf[BPB_SecPerClusEx] = 0, 
                    i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++); /* Log2 of clu
                    ster size [sector] */
 29492                        ;			buf[BPB_NumFATsEx] = 1; /* Numbe
                    r of FATs */
 29493                        ;			buf[BPB_DrvNumEx] = 0x80; /* Dri
                    ve number (for int13) */
 29494                        ;			st_word(buf + BS_BootCodeEx, 0xF
                    EEB); /* Boot code (x86) */
 29495                        ;			st_word(buf + BS_55AA, 0xAA55); 
                    /* Signature (placed here regardless of sector size) */
 29496                        ;			for (i = sum = 0; i < ss; i++)
 29497                        ;			{ /* VBR checksum */
 29498                        ;				if (i != BPB_VolFlagEx &
                    & i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum
                    32(buf[i], sum);
 29499                        ;			}
 29500                        ;			if (disk_write(pdrv, buf, sect++
                    , 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29501                        ;			/* Extended bootstrap record (+1
                    ..+8) */
 29502                        ;			mem_set(buf, 0, ss);
 29503                        ;			st_word(buf + ss - 2, 0xAA55); /
                    * Signature (placed at end of sector) */
 29504                        ;			for (j = 1; j < 9; j++)
 29505                        ;			{
 29506                        ;				for (i = 0; i < ss; sum 
                    = xsum32(buf[i++], sum)); /* VBR checksum */
 29507                        ;				if (disk_write(pdrv, buf
                    , sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29508                        ;			}
 29509                        ;			/* OEM/Reserved record (+9..+10)
                     */
 29510                        ;			mem_set(buf, 0, ss);
 29511                        ;			for (; j < 11; j++)
 29512                        ;			{
 29513                        ;				for (i = 0; i < ss; sum 
                    = xsum32(buf[i++], sum)); /* VBR checksum */
 29514                        ;				if (disk_write(pdrv, buf
                    , sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29515                        ;			}
 29516                        ;			/* Sum record (+11) */
 29517                        ;			for (i = 0; i < ss; i += 4) st_d
                    word(buf + i, sum); /* Fill with checksum value */
 29518                        ;			if (disk_write(pdrv, buf, sect++
                    , 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
  Mon Aug  9 2021 16:52                                                Page 561


 29519                        ;		}
 29520                        ;
 29521                        ;	}
 29522                        ;	else
 29523                        ;#endif	/* FF_FS_EXFAT */
 29524                        ;	{ /* Create an FAT/FAT32 volume */
 29525                        	.line	6952
 29526                        ;		do
 29527                        	.line	6953
 29528                        L10713:
 29529                        ;		{
 29530                        	.line	6954
 29531                        ;			pau = sz_au;
 29532                        	.line	6955
 29533 08:775E: A5 60        	lda	<L1158+sz_au_1
 29534 08:7760: 85 2C        	sta	<L1158+pau_1
 29535 08:7762: A5 62        	lda	<L1158+sz_au_1+2
 29536 08:7764: 85 2E        	sta	<L1158+pau_1+2
 29537                        ;			/* Pre-determine number of clust
                    ers and FAT sub-type */
 29538                        ;			if (fsty == FS_FAT32)
 29539                        	.line	6957
 29540                        ;			{ /* FAT32 volume */
 29541 08:7766: E2 20        	sep	#$20
 29542                        	longa	off
 29543 08:7768: A5 12        	lda	<L1158+fsty_1
 29544 08:776A: C9 03        	cmp	#<$3
 29545 08:776C: C2 20        	rep	#$20
 29546                        	longa	on
 29547 08:776E: F0 03        	beq	L1220
 29548 08:7770: 82 07 01     	brl	L10714
 29549                        L1220:
 29550                        	.line	6958
 29551                        ;				if (pau == 0)
 29552                        	.line	6959
 29553                        ;				{ /* AU auto-selection *
                    /
 29554 08:7773: A5 2C        	lda	<L1158+pau_1
 29555 08:7775: 05 2E        	ora	<L1158+pau_1+2
 29556 08:7777: F0 03        	beq	L1221
 29557 08:7779: 82 54 00     	brl	L10715
 29558                        L1221:
 29559                        	.line	6960
 29560                        ;					n = (DWORD)sz_vo
                    l / 0x20000; /* Volume size in unit of 128KS */
 29561                        	.line	6961
 29562 08:777C: D4 3A        	pei	<L1158+sz_vol_1+2
 29563 08:777E: D4 38        	pei	<L1158+sz_vol_1
 29564 08:7780: A9 11 00     	lda	#$11
 29565                        	xref	~~~llsr
 29566 08:7783: 22 xx xx xx  	jsl	~~~llsr
 29567 08:7787: 85 34        	sta	<L1158+n_1
 29568 08:7789: 86 36        	stx	<L1158+n_1+2
 29569                        ;					for (i = 0, pau 
                    = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1); /* Get from
                     table */
 29570                        	.line	6962
 29571 08:778B: 64 68        	stz	<L1158+i_1
  Mon Aug  9 2021 16:52                                                Page 562


 29572 08:778D: A9 01 00     	lda	#$1
 29573 08:7790: 85 2C        	sta	<L1158+pau_1
 29574 08:7792: A9 00 00     	lda	#$0
 29575 08:7795: 85 2E        	sta	<L1158+pau_1+2
 29576 08:7797: 82 06 00     	brl	L10719
 29577                        L10718:
 29578                        	.line	6962
 29579                        L10716:
 29580 08:779A: 06 2C        	asl	<L1158+pau_1
 29581 08:779C: 26 2E        	rol	<L1158+pau_1+2
 29582 08:779E: E6 68        	inc	<L1158+i_1
 29583                        L10719:
 29584 08:77A0: A5 68        	lda	<L1158+i_1
 29585 08:77A2: 0A           	asl	A
 29586 08:77A3: 85 01        	sta	<R0
 29587 08:77A5: A6 01        	ldx	<R0
 29588 08:77A7: BD xx xx     	lda	|L1161,X ;cst32
 29589 08:77AA: D0 03        	bne	L1223
 29590 08:77AC: 82 21 00     	brl	L1222
 29591                        L1223:
 29592 08:77AF: A5 68        	lda	<L1158+i_1
 29593 08:77B1: 0A           	asl	A
 29594 08:77B2: 85 05        	sta	<R1
 29595 08:77B4: A0 00 00     	ldy	#$0
 29596 08:77B7: A6 05        	ldx	<R1
 29597 08:77B9: BD xx xx     	lda	|L1161,X ;cst32
 29598 08:77BC: 10 01        	bpl	L1224
 29599 08:77BE: 88           	dey
 29600                        L1224:
 29601 08:77BF: 85 09        	sta	<R2
 29602 08:77C1: 84 0B        	sty	<R2+2
 29603 08:77C3: A5 34        	lda	<L1158+n_1
 29604 08:77C5: C5 09        	cmp	<R2
 29605 08:77C7: A5 36        	lda	<L1158+n_1+2
 29606 08:77C9: E5 0B        	sbc	<R2+2
 29607 08:77CB: 90 03        	bcc	L1225
 29608 08:77CD: 82 CA FF     	brl	L10718
 29609                        L1225:
 29610                        L1222:
 29611                        L10717:
 29612                        ;				}
 29613                        	.line	6963
 29614                        ;				n_clst = (DWORD)sz_vol /
                     pau; /* Number of clusters */
 29615                        L10715:
 29616                        	.line	6964
 29617 08:77D0: D4 2E        	pei	<L1158+pau_1+2
 29618 08:77D2: D4 2C        	pei	<L1158+pau_1
 29619 08:77D4: D4 3A        	pei	<L1158+sz_vol_1+2
 29620 08:77D6: D4 38        	pei	<L1158+sz_vol_1
 29621                        	xref	~~~ludv
 29622 08:77D8: 22 xx xx xx  	jsl	~~~ludv
 29623 08:77DC: 85 28        	sta	<L1158+n_clst_1
 29624 08:77DE: 86 2A        	stx	<L1158+n_clst_1+2
 29625                        ;				sz_fat = (n_clst * 4 + 8
                     + ss - 1) / ss; /* FAT size [sector] */
 29626                        	.line	6965
 29627 08:77E0: A0 00 00     	ldy	#$0
  Mon Aug  9 2021 16:52                                                Page 563


 29628 08:77E3: A5 1E        	lda	<L1158+ss_1
 29629 08:77E5: 10 01        	bpl	L1226
 29630 08:77E7: 88           	dey
 29631                        L1226:
 29632 08:77E8: 85 01        	sta	<R0
 29633 08:77EA: 84 03        	sty	<R0+2
 29634 08:77EC: A0 00 00     	ldy	#$0
 29635 08:77EF: A5 1E        	lda	<L1158+ss_1
 29636 08:77F1: 10 01        	bpl	L1227
 29637 08:77F3: 88           	dey
 29638                        L1227:
 29639 08:77F4: 85 05        	sta	<R1
 29640 08:77F6: 84 07        	sty	<R1+2
 29641 08:77F8: A5 28        	lda	<L1158+n_clst_1
 29642 08:77FA: 85 09        	sta	<R2
 29643 08:77FC: A5 2A        	lda	<L1158+n_clst_1+2
 29644 08:77FE: 85 0B        	sta	<R2+2
 29645 08:7800: 06 09        	asl	<R2
 29646 08:7802: 26 0B        	rol	<R2+2
 29647 08:7804: 06 09        	asl	<R2
 29648 08:7806: 26 0B        	rol	<R2+2
 29649 08:7808: 18           	clc
 29650 08:7809: A5 09        	lda	<R2
 29651 08:780B: 65 05        	adc	<R1
 29652 08:780D: 85 0D        	sta	<R3
 29653 08:780F: A5 0B        	lda	<R2+2
 29654 08:7811: 65 07        	adc	<R1+2
 29655 08:7813: 85 0F        	sta	<R3+2
 29656 08:7815: 18           	clc
 29657 08:7816: A9 07 00     	lda	#$7
 29658 08:7819: 65 0D        	adc	<R3
 29659 08:781B: 85 05        	sta	<R1
 29660 08:781D: A9 00 00     	lda	#$0
 29661 08:7820: 65 0F        	adc	<R3+2
 29662 08:7822: 85 07        	sta	<R1+2
 29663 08:7824: D4 03        	pei	<R0+2
 29664 08:7826: D4 01        	pei	<R0
 29665 08:7828: D4 07        	pei	<R1+2
 29666 08:782A: D4 05        	pei	<R1
 29667                        	xref	~~~ludv
 29668 08:782C: 22 xx xx xx  	jsl	~~~ludv
 29669 08:7830: 85 58        	sta	<L1158+sz_fat_1
 29670 08:7832: 86 5A        	stx	<L1158+sz_fat_1+2
 29671                        ;				sz_rsv = 32; /* Number o
                    f reserved sectors */
 29672                        	.line	6966
 29673 08:7834: A9 20 00     	lda	#$20
 29674 08:7837: 85 54        	sta	<L1158+sz_rsv_1
 29675 08:7839: A9 00 00     	lda	#$0
 29676 08:783C: 85 56        	sta	<L1158+sz_rsv_1+2
 29677                        ;				sz_dir = 0; /* No static
                     directory */
 29678                        	.line	6967
 29679 08:783E: 64 5C        	stz	<L1158+sz_dir_1
 29680 08:7840: 64 5E        	stz	<L1158+sz_dir_1+2
 29681                        ;				if (n_clst <= MAX_FAT16 
                    || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 29682                        	.line	6968
  Mon Aug  9 2021 16:52                                                Page 564


 29683 08:7842: A9 F5 FF     	lda	#$fff5
 29684 08:7845: C5 28        	cmp	<L1158+n_clst_1
 29685 08:7847: A9 00 00     	lda	#$0
 29686 08:784A: E5 2A        	sbc	<L1158+n_clst_1+2
 29687 08:784C: 90 03        	bcc	L1229
 29688 08:784E: 82 0F 00     	brl	L1228
 29689                        L1229:
 29690 08:7851: A9 F5 FF     	lda	#$fff5
 29691 08:7854: C5 28        	cmp	<L1158+n_clst_1
 29692 08:7856: A9 FF 0F     	lda	#$fff
 29693 08:7859: E5 2A        	sbc	<L1158+n_clst_1+2
 29694 08:785B: 90 03        	bcc	L1230
 29695 08:785D: 82 17 00     	brl	L10720
 29696                        L1230:
 29697                        L1228:
 29698                        	.line	6968
 29699                        	.line	6968
 29700 08:7860: A5 7A        	lda	<L1157+work_0
 29701 08:7862: 05 7C        	ora	<L1157+work_0+2
 29702 08:7864: F0 03        	beq	L1231
 29703 08:7866: 82 08 00     	brl	L10721
 29704                        L1231:
 29705                        	.line	6968
 29706 08:7869: D4 16        	pei	<L1158+buf_1+2
 29707 08:786B: D4 14        	pei	<L1158+buf_1
 29708 08:786D: 22 70 92 08  	jsl	~~ff_memfree
 29709                        L10721:
 29710                        	.line	6968
 29711 08:7871: A9 0E 00     	lda	#$e
 29712 08:7874: 82 01 FA     	brl	L1164
 29713                        	.line	6968
 29714                        L10720:
 29715                        	.line	6968
 29716                        ;			}
 29717                        	.line	6969
 29718                        ;			else
 29719 08:7877: 82 60 01     	brl	L10722
 29720                        L10714:
 29721                        ;			{ /* FAT volume */
 29722                        	.line	6971
 29723                        ;				if (pau == 0)
 29724                        	.line	6972
 29725                        ;				{ /* au auto-selection *
                    /
 29726 08:787A: A5 2C        	lda	<L1158+pau_1
 29727 08:787C: 05 2E        	ora	<L1158+pau_1+2
 29728 08:787E: F0 03        	beq	L1232
 29729 08:7880: 82 54 00     	brl	L10723
 29730                        L1232:
 29731                        	.line	6973
 29732                        ;					n = (DWORD)sz_vo
                    l / 0x1000; /* Volume size in unit of 4KS */
 29733                        	.line	6974
 29734 08:7883: D4 3A        	pei	<L1158+sz_vol_1+2
 29735 08:7885: D4 38        	pei	<L1158+sz_vol_1
 29736 08:7887: A9 0C 00     	lda	#$c
 29737                        	xref	~~~llsr
 29738 08:788A: 22 xx xx xx  	jsl	~~~llsr
  Mon Aug  9 2021 16:52                                                Page 565


 29739 08:788E: 85 34        	sta	<L1158+n_1
 29740 08:7890: 86 36        	stx	<L1158+n_1+2
 29741                        ;					for (i = 0, pau 
                    = 1; cst[i] && cst[i] <= n; i++, pau <<= 1); /* Get from tab
                    le */
 29742                        	.line	6975
 29743 08:7892: 64 68        	stz	<L1158+i_1
 29744 08:7894: A9 01 00     	lda	#$1
 29745 08:7897: 85 2C        	sta	<L1158+pau_1
 29746 08:7899: A9 00 00     	lda	#$0
 29747 08:789C: 85 2E        	sta	<L1158+pau_1+2
 29748 08:789E: 82 06 00     	brl	L10727
 29749                        L10726:
 29750                        	.line	6975
 29751                        L10724:
 29752 08:78A1: 06 2C        	asl	<L1158+pau_1
 29753 08:78A3: 26 2E        	rol	<L1158+pau_1+2
 29754 08:78A5: E6 68        	inc	<L1158+i_1
 29755                        L10727:
 29756 08:78A7: A5 68        	lda	<L1158+i_1
 29757 08:78A9: 0A           	asl	A
 29758 08:78AA: 85 01        	sta	<R0
 29759 08:78AC: A6 01        	ldx	<R0
 29760 08:78AE: BD xx xx     	lda	|L1160,X ;cst
 29761 08:78B1: D0 03        	bne	L1234
 29762 08:78B3: 82 21 00     	brl	L1233
 29763                        L1234:
 29764 08:78B6: A5 68        	lda	<L1158+i_1
 29765 08:78B8: 0A           	asl	A
 29766 08:78B9: 85 05        	sta	<R1
 29767 08:78BB: A0 00 00     	ldy	#$0
 29768 08:78BE: A6 05        	ldx	<R1
 29769 08:78C0: BD xx xx     	lda	|L1160,X ;cst
 29770 08:78C3: 10 01        	bpl	L1235
 29771 08:78C5: 88           	dey
 29772                        L1235:
 29773 08:78C6: 85 09        	sta	<R2
 29774 08:78C8: 84 0B        	sty	<R2+2
 29775 08:78CA: A5 34        	lda	<L1158+n_1
 29776 08:78CC: C5 09        	cmp	<R2
 29777 08:78CE: A5 36        	lda	<L1158+n_1+2
 29778 08:78D0: E5 0B        	sbc	<R2+2
 29779 08:78D2: 90 03        	bcc	L1236
 29780 08:78D4: 82 CA FF     	brl	L10726
 29781                        L1236:
 29782                        L1233:
 29783                        L10725:
 29784                        ;				}
 29785                        	.line	6976
 29786                        ;				n_clst = (DWORD)sz_vol /
                     pau;
 29787                        L10723:
 29788                        	.line	6977
 29789 08:78D7: D4 2E        	pei	<L1158+pau_1+2
 29790 08:78D9: D4 2C        	pei	<L1158+pau_1
 29791 08:78DB: D4 3A        	pei	<L1158+sz_vol_1+2
 29792 08:78DD: D4 38        	pei	<L1158+sz_vol_1
 29793                        	xref	~~~ludv
  Mon Aug  9 2021 16:52                                                Page 566


 29794 08:78DF: 22 xx xx xx  	jsl	~~~ludv
 29795 08:78E3: 85 28        	sta	<L1158+n_clst_1
 29796 08:78E5: 86 2A        	stx	<L1158+n_clst_1+2
 29797                        ;				if (n_clst > MAX_FAT12)
 29798                        	.line	6978
 29799                        ;				{
 29800 08:78E7: A9 F5 0F     	lda	#$ff5
 29801 08:78EA: C5 28        	cmp	<L1158+n_clst_1
 29802 08:78EC: A9 00 00     	lda	#$0
 29803 08:78EF: E5 2A        	sbc	<L1158+n_clst_1+2
 29804 08:78F1: 90 03        	bcc	L1237
 29805 08:78F3: 82 1E 00     	brl	L10728
 29806                        L1237:
 29807                        	.line	6979
 29808                        ;					n = n_clst * 2 +
                     4; /* FAT size [byte] */
 29809                        	.line	6980
 29810 08:78F6: A5 28        	lda	<L1158+n_clst_1
 29811 08:78F8: 85 01        	sta	<R0
 29812 08:78FA: A5 2A        	lda	<L1158+n_clst_1+2
 29813 08:78FC: 85 03        	sta	<R0+2
 29814 08:78FE: 06 01        	asl	<R0
 29815 08:7900: 26 03        	rol	<R0+2
 29816 08:7902: 18           	clc
 29817 08:7903: A9 04 00     	lda	#$4
 29818 08:7906: 65 01        	adc	<R0
 29819 08:7908: 85 34        	sta	<L1158+n_1
 29820 08:790A: A9 00 00     	lda	#$0
 29821 08:790D: 65 03        	adc	<R0+2
 29822 08:790F: 85 36        	sta	<L1158+n_1+2
 29823                        ;				}
 29824                        	.line	6981
 29825                        ;				else
 29826 08:7911: 82 47 00     	brl	L10729
 29827                        L10728:
 29828                        ;				{
 29829                        	.line	6983
 29830                        ;					fsty = FS_FAT12;
 29831                        	.line	6984
 29832 08:7914: E2 20        	sep	#$20
 29833                        	longa	off
 29834 08:7916: A9 01        	lda	#$1
 29835 08:7918: 85 12        	sta	<L1158+fsty_1
 29836 08:791A: C2 20        	rep	#$20
 29837                        	longa	on
 29838                        ;					n = (n_clst * 3 
                    + 1) / 2 + 3; /* FAT size [byte] */
 29839                        	.line	6985
 29840 08:791C: F4 00 00     	pea	#^$3
 29841 08:791F: F4 03 00     	pea	#<$3
 29842 08:7922: D4 2A        	pei	<L1158+n_clst_1+2
 29843 08:7924: D4 28        	pei	<L1158+n_clst_1
 29844                        	xref	~~~lmul
 29845 08:7926: 22 xx xx xx  	jsl	~~~lmul
 29846 08:792A: 85 05        	sta	<R1
 29847 08:792C: 86 07        	stx	<R1+2
 29848 08:792E: 18           	clc
 29849 08:792F: A9 01 00     	lda	#$1
  Mon Aug  9 2021 16:52                                                Page 567


 29850 08:7932: 65 05        	adc	<R1
 29851 08:7934: 85 09        	sta	<R2
 29852 08:7936: A9 00 00     	lda	#$0
 29853 08:7939: 65 07        	adc	<R1+2
 29854 08:793B: 85 0B        	sta	<R2+2
 29855 08:793D: D4 0B        	pei	<R2+2
 29856 08:793F: D4 09        	pei	<R2
 29857 08:7941: A9 01 00     	lda	#$1
 29858                        	xref	~~~llsr
 29859 08:7944: 22 xx xx xx  	jsl	~~~llsr
 29860 08:7948: 85 01        	sta	<R0
 29861 08:794A: 86 03        	stx	<R0+2
 29862 08:794C: 18           	clc
 29863 08:794D: A9 03 00     	lda	#$3
 29864 08:7950: 65 01        	adc	<R0
 29865 08:7952: 85 34        	sta	<L1158+n_1
 29866 08:7954: A9 00 00     	lda	#$0
 29867 08:7957: 65 03        	adc	<R0+2
 29868 08:7959: 85 36        	sta	<L1158+n_1+2
 29869                        ;				}
 29870                        	.line	6986
 29871                        L10729:
 29872                        ;				sz_fat = (n + ss - 1) / 
                    ss; /* FAT size [sector] */
 29873                        	.line	6987
 29874 08:795B: A0 00 00     	ldy	#$0
 29875 08:795E: A5 1E        	lda	<L1158+ss_1
 29876 08:7960: 10 01        	bpl	L1238
 29877 08:7962: 88           	dey
 29878                        L1238:
 29879 08:7963: 85 01        	sta	<R0
 29880 08:7965: 84 03        	sty	<R0+2
 29881 08:7967: A0 00 00     	ldy	#$0
 29882 08:796A: A5 1E        	lda	<L1158+ss_1
 29883 08:796C: 10 01        	bpl	L1239
 29884 08:796E: 88           	dey
 29885                        L1239:
 29886 08:796F: 85 05        	sta	<R1
 29887 08:7971: 84 07        	sty	<R1+2
 29888 08:7973: 18           	clc
 29889 08:7974: A5 05        	lda	<R1
 29890 08:7976: 65 34        	adc	<L1158+n_1
 29891 08:7978: 85 09        	sta	<R2
 29892 08:797A: A5 07        	lda	<R1+2
 29893 08:797C: 65 36        	adc	<L1158+n_1+2
 29894 08:797E: 85 0B        	sta	<R2+2
 29895 08:7980: 18           	clc
 29896 08:7981: A9 FF FF     	lda	#$ffff
 29897 08:7984: 65 09        	adc	<R2
 29898 08:7986: 85 05        	sta	<R1
 29899 08:7988: A9 FF FF     	lda	#$ffff
 29900 08:798B: 65 0B        	adc	<R2+2
 29901 08:798D: 85 07        	sta	<R1+2
 29902 08:798F: D4 03        	pei	<R0+2
 29903 08:7991: D4 01        	pei	<R0
 29904 08:7993: D4 07        	pei	<R1+2
 29905 08:7995: D4 05        	pei	<R1
 29906                        	xref	~~~ludv
  Mon Aug  9 2021 16:52                                                Page 568


 29907 08:7997: 22 xx xx xx  	jsl	~~~ludv
 29908 08:799B: 85 58        	sta	<L1158+sz_fat_1
 29909 08:799D: 86 5A        	stx	<L1158+sz_fat_1+2
 29910                        ;				sz_rsv = 1; /* Number of
                     reserved sectors */
 29911                        	.line	6988
 29912 08:799F: A9 01 00     	lda	#$1
 29913 08:79A2: 85 54        	sta	<L1158+sz_rsv_1
 29914 08:79A4: A9 00 00     	lda	#$0
 29915 08:79A7: 85 56        	sta	<L1158+sz_rsv_1+2
 29916                        ;				sz_dir = (DWORD)n_root *
                     SZDIRE / ss; /* Root dir size [sector] */
 29917                        	.line	6989
 29918 08:79A9: A0 00 00     	ldy	#$0
 29919 08:79AC: A5 1E        	lda	<L1158+ss_1
 29920 08:79AE: 10 01        	bpl	L1240
 29921 08:79B0: 88           	dey
 29922                        L1240:
 29923 08:79B1: 85 01        	sta	<R0
 29924 08:79B3: 84 03        	sty	<R0+2
 29925 08:79B5: A5 66        	lda	<L1158+n_root_1
 29926 08:79B7: 85 09        	sta	<R2
 29927 08:79B9: 64 0B        	stz	<R2+2
 29928 08:79BB: D4 0B        	pei	<R2+2
 29929 08:79BD: D4 09        	pei	<R2
 29930 08:79BF: A9 05 00     	lda	#$5
 29931                        	xref	~~~lasl
 29932 08:79C2: 22 xx xx xx  	jsl	~~~lasl
 29933 08:79C6: 85 05        	sta	<R1
 29934 08:79C8: 86 07        	stx	<R1+2
 29935 08:79CA: D4 03        	pei	<R0+2
 29936 08:79CC: D4 01        	pei	<R0
 29937 08:79CE: D4 07        	pei	<R1+2
 29938 08:79D0: D4 05        	pei	<R1
 29939                        	xref	~~~ludv
 29940 08:79D2: 22 xx xx xx  	jsl	~~~ludv
 29941 08:79D6: 85 5C        	sta	<L1158+sz_dir_1
 29942 08:79D8: 86 5E        	stx	<L1158+sz_dir_1+2
 29943                        ;			}
 29944                        	.line	6990
 29945                        L10722:
 29946                        ;			b_fat = b_vol + sz_rsv; /* FAT b
                    ase */
 29947                        	.line	6991
 29948 08:79DA: 18           	clc
 29949 08:79DB: A5 3C        	lda	<L1158+b_vol_1
 29950 08:79DD: 65 54        	adc	<L1158+sz_rsv_1
 29951 08:79DF: 85 40        	sta	<L1158+b_fat_1
 29952 08:79E1: A5 3E        	lda	<L1158+b_vol_1+2
 29953 08:79E3: 65 56        	adc	<L1158+sz_rsv_1+2
 29954 08:79E5: 85 42        	sta	<L1158+b_fat_1+2
 29955                        ;			b_data = b_fat + sz_fat * n_fat 
                    + sz_dir; /* Data base */
 29956                        	.line	6992
 29957 08:79E7: A5 64        	lda	<L1158+n_fat_1
 29958 08:79E9: 85 01        	sta	<R0
 29959 08:79EB: 64 03        	stz	<R0+2
 29960 08:79ED: D4 5A        	pei	<L1158+sz_fat_1+2
  Mon Aug  9 2021 16:52                                                Page 569


 29961 08:79EF: D4 58        	pei	<L1158+sz_fat_1
 29962 08:79F1: D4 03        	pei	<R0+2
 29963 08:79F3: D4 01        	pei	<R0
 29964                        	xref	~~~lmul
 29965 08:79F5: 22 xx xx xx  	jsl	~~~lmul
 29966 08:79F9: 85 01        	sta	<R0
 29967 08:79FB: 86 03        	stx	<R0+2
 29968 08:79FD: 18           	clc
 29969 08:79FE: A5 01        	lda	<R0
 29970 08:7A00: 65 40        	adc	<L1158+b_fat_1
 29971 08:7A02: 85 05        	sta	<R1
 29972 08:7A04: A5 03        	lda	<R0+2
 29973 08:7A06: 65 42        	adc	<L1158+b_fat_1+2
 29974 08:7A08: 85 07        	sta	<R1+2
 29975 08:7A0A: 18           	clc
 29976 08:7A0B: A5 05        	lda	<R1
 29977 08:7A0D: 65 5C        	adc	<L1158+sz_dir_1
 29978 08:7A0F: 85 44        	sta	<L1158+b_data_1
 29979 08:7A11: A5 07        	lda	<R1+2
 29980 08:7A13: 65 5E        	adc	<L1158+sz_dir_1+2
 29981 08:7A15: 85 46        	sta	<L1158+b_data_1+2
 29982                        ;
 29983                        ;			/* Align data area to erase bloc
                    k boundary (for flash memory media) */
 29984                        ;			n = (DWORD)(((b_data + sz_blk - 
                    1) & ~(sz_blk - 1)) - b_data); /* Sectors to next nearest fr
                    om current data base */
 29985                        	.line	6995
 29986 08:7A17: 18           	clc
 29987 08:7A18: A5 44        	lda	<L1158+b_data_1
 29988 08:7A1A: 65 24        	adc	<L1158+sz_blk_1
 29989 08:7A1C: 85 01        	sta	<R0
 29990 08:7A1E: A5 46        	lda	<L1158+b_data_1+2
 29991 08:7A20: 65 26        	adc	<L1158+sz_blk_1+2
 29992 08:7A22: 85 03        	sta	<R0+2
 29993 08:7A24: 18           	clc
 29994 08:7A25: A9 FF FF     	lda	#$ffff
 29995 08:7A28: 65 01        	adc	<R0
 29996 08:7A2A: 85 05        	sta	<R1
 29997 08:7A2C: A9 FF FF     	lda	#$ffff
 29998 08:7A2F: 65 03        	adc	<R0+2
 29999 08:7A31: 85 07        	sta	<R1+2
 30000 08:7A33: 18           	clc
 30001 08:7A34: A9 FF FF     	lda	#$ffff
 30002 08:7A37: 65 24        	adc	<L1158+sz_blk_1
 30003 08:7A39: 85 01        	sta	<R0
 30004 08:7A3B: A9 FF FF     	lda	#$ffff
 30005 08:7A3E: 65 26        	adc	<L1158+sz_blk_1+2
 30006 08:7A40: 85 03        	sta	<R0+2
 30007 08:7A42: A5 01        	lda	<R0
 30008 08:7A44: 49 FF FF     	eor	#<$ffffffff
 30009 08:7A47: 85 09        	sta	<R2
 30010 08:7A49: A5 03        	lda	<R0+2
 30011 08:7A4B: 49 FF FF     	eor	#^$ffffffff
 30012 08:7A4E: 85 0B        	sta	<R2+2
 30013 08:7A50: A5 09        	lda	<R2
 30014 08:7A52: 25 05        	and	<R1
 30015 08:7A54: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 570


 30016 08:7A56: A5 0B        	lda	<R2+2
 30017 08:7A58: 25 07        	and	<R1+2
 30018 08:7A5A: 85 03        	sta	<R0+2
 30019 08:7A5C: 38           	sec
 30020 08:7A5D: A5 01        	lda	<R0
 30021 08:7A5F: E5 44        	sbc	<L1158+b_data_1
 30022 08:7A61: 85 34        	sta	<L1158+n_1
 30023 08:7A63: A5 03        	lda	<R0+2
 30024 08:7A65: E5 46        	sbc	<L1158+b_data_1+2
 30025 08:7A67: 85 36        	sta	<L1158+n_1+2
 30026                        ;			if (fsty == FS_FAT32)
 30027                        	.line	6996
 30028                        ;			{ /* FAT32: Move FAT */
 30029 08:7A69: E2 20        	sep	#$20
 30030                        	longa	off
 30031 08:7A6B: A5 12        	lda	<L1158+fsty_1
 30032 08:7A6D: C9 03        	cmp	#<$3
 30033 08:7A6F: C2 20        	rep	#$20
 30034                        	longa	on
 30035 08:7A71: F0 03        	beq	L1241
 30036 08:7A73: 82 1D 00     	brl	L10730
 30037                        L1241:
 30038                        	.line	6997
 30039                        ;				sz_rsv += n; b_fat += n;
 30040                        	.line	6998
 30041 08:7A76: 18           	clc
 30042 08:7A77: A5 54        	lda	<L1158+sz_rsv_1
 30043 08:7A79: 65 34        	adc	<L1158+n_1
 30044 08:7A7B: 85 54        	sta	<L1158+sz_rsv_1
 30045 08:7A7D: A5 56        	lda	<L1158+sz_rsv_1+2
 30046 08:7A7F: 65 36        	adc	<L1158+n_1+2
 30047 08:7A81: 85 56        	sta	<L1158+sz_rsv_1+2
 30048                        	.line	6998
 30049 08:7A83: 18           	clc
 30050 08:7A84: A5 40        	lda	<L1158+b_fat_1
 30051 08:7A86: 65 34        	adc	<L1158+n_1
 30052 08:7A88: 85 40        	sta	<L1158+b_fat_1
 30053 08:7A8A: A5 42        	lda	<L1158+b_fat_1+2
 30054 08:7A8C: 65 36        	adc	<L1158+n_1+2
 30055 08:7A8E: 85 42        	sta	<L1158+b_fat_1+2
 30056                        ;			}
 30057                        	.line	6999
 30058                        ;			else
 30059 08:7A90: 82 56 00     	brl	L10731
 30060                        L10730:
 30061                        ;			{ /* FAT: Expand FAT */
 30062                        	.line	7001
 30063                        ;				if (n % n_fat)
 30064                        	.line	7002
 30065                        ;				{ /* Adjust fractional e
                    rror if needed */
 30066 08:7A93: A5 64        	lda	<L1158+n_fat_1
 30067 08:7A95: 85 01        	sta	<R0
 30068 08:7A97: 64 03        	stz	<R0+2
 30069 08:7A99: D4 03        	pei	<R0+2
 30070 08:7A9B: D4 01        	pei	<R0
 30071 08:7A9D: D4 36        	pei	<L1158+n_1+2
 30072 08:7A9F: D4 34        	pei	<L1158+n_1
  Mon Aug  9 2021 16:52                                                Page 571


 30073                        	xref	~~~lumd
 30074 08:7AA1: 22 xx xx xx  	jsl	~~~lumd
 30075 08:7AA5: 85 01        	sta	<R0
 30076 08:7AA7: 86 03        	stx	<R0+2
 30077 08:7AA9: A5 01        	lda	<R0
 30078 08:7AAB: 05 03        	ora	<R0+2
 30079 08:7AAD: D0 03        	bne	L1242
 30080 08:7AAF: 82 14 00     	brl	L10732
 30081                        L1242:
 30082                        	.line	7003
 30083                        ;					n--; sz_rsv++; b
                    _fat++;
 30084                        	.line	7004
 30085 08:7AB2: A5 34        	lda	<L1158+n_1
 30086 08:7AB4: D0 02        	bne	L1243
 30087 08:7AB6: C6 36        	dec	<L1158+n_1+2
 30088                        L1243:
 30089 08:7AB8: C6 34        	dec	<L1158+n_1
 30090                        	.line	7004
 30091 08:7ABA: E6 54        	inc	<L1158+sz_rsv_1
 30092 08:7ABC: D0 02        	bne	L1244
 30093 08:7ABE: E6 56        	inc	<L1158+sz_rsv_1+2
 30094                        L1244:
 30095                        	.line	7004
 30096 08:7AC0: E6 40        	inc	<L1158+b_fat_1
 30097 08:7AC2: D0 02        	bne	L1245
 30098 08:7AC4: E6 42        	inc	<L1158+b_fat_1+2
 30099                        L1245:
 30100                        ;				}
 30101                        	.line	7005
 30102                        ;				sz_fat += n / n_fat;
 30103                        L10732:
 30104                        	.line	7006
 30105 08:7AC6: A5 64        	lda	<L1158+n_fat_1
 30106 08:7AC8: 85 01        	sta	<R0
 30107 08:7ACA: 64 03        	stz	<R0+2
 30108 08:7ACC: D4 03        	pei	<R0+2
 30109 08:7ACE: D4 01        	pei	<R0
 30110 08:7AD0: D4 36        	pei	<L1158+n_1+2
 30111 08:7AD2: D4 34        	pei	<L1158+n_1
 30112                        	xref	~~~ludv
 30113 08:7AD4: 22 xx xx xx  	jsl	~~~ludv
 30114 08:7AD8: 85 01        	sta	<R0
 30115 08:7ADA: 86 03        	stx	<R0+2
 30116 08:7ADC: 18           	clc
 30117 08:7ADD: A5 01        	lda	<R0
 30118 08:7ADF: 65 58        	adc	<L1158+sz_fat_1
 30119 08:7AE1: 85 58        	sta	<L1158+sz_fat_1
 30120 08:7AE3: A5 03        	lda	<R0+2
 30121 08:7AE5: 65 5A        	adc	<L1158+sz_fat_1+2
 30122 08:7AE7: 85 5A        	sta	<L1158+sz_fat_1+2
 30123                        ;			}
 30124                        	.line	7007
 30125                        L10731:
 30126                        ;
 30127                        ;			/* Determine number of clusters 
                    and final check of validity of the FAT sub-type */
 30128                        ;			if (sz_vol < b_data + pau * 16 -
  Mon Aug  9 2021 16:52                                                Page 572


                     b_vol) LEAVE_MKFS(FR_MKFS_ABORTED); /* Too small volume? */
 30129                        	.line	7010
 30130 08:7AE9: A5 2C        	lda	<L1158+pau_1
 30131 08:7AEB: 85 01        	sta	<R0
 30132 08:7AED: A5 2E        	lda	<L1158+pau_1+2
 30133 08:7AEF: 85 03        	sta	<R0+2
 30134 08:7AF1: 06 01        	asl	<R0
 30135 08:7AF3: 26 03        	rol	<R0+2
 30136 08:7AF5: 06 01        	asl	<R0
 30137 08:7AF7: 26 03        	rol	<R0+2
 30138 08:7AF9: 06 01        	asl	<R0
 30139 08:7AFB: 26 03        	rol	<R0+2
 30140 08:7AFD: 06 01        	asl	<R0
 30141 08:7AFF: 26 03        	rol	<R0+2
 30142 08:7B01: 18           	clc
 30143 08:7B02: A5 01        	lda	<R0
 30144 08:7B04: 65 44        	adc	<L1158+b_data_1
 30145 08:7B06: 85 05        	sta	<R1
 30146 08:7B08: A5 03        	lda	<R0+2
 30147 08:7B0A: 65 46        	adc	<L1158+b_data_1+2
 30148 08:7B0C: 85 07        	sta	<R1+2
 30149 08:7B0E: 38           	sec
 30150 08:7B0F: A5 05        	lda	<R1
 30151 08:7B11: E5 3C        	sbc	<L1158+b_vol_1
 30152 08:7B13: 85 01        	sta	<R0
 30153 08:7B15: A5 07        	lda	<R1+2
 30154 08:7B17: E5 3E        	sbc	<L1158+b_vol_1+2
 30155 08:7B19: 85 03        	sta	<R0+2
 30156 08:7B1B: A5 38        	lda	<L1158+sz_vol_1
 30157 08:7B1D: C5 01        	cmp	<R0
 30158 08:7B1F: A5 3A        	lda	<L1158+sz_vol_1+2
 30159 08:7B21: E5 03        	sbc	<R0+2
 30160 08:7B23: 90 03        	bcc	L1246
 30161 08:7B25: 82 17 00     	brl	L10733
 30162                        L1246:
 30163                        	.line	7010
 30164                        	.line	7010
 30165 08:7B28: A5 7A        	lda	<L1157+work_0
 30166 08:7B2A: 05 7C        	ora	<L1157+work_0+2
 30167 08:7B2C: F0 03        	beq	L1247
 30168 08:7B2E: 82 08 00     	brl	L10734
 30169                        L1247:
 30170                        	.line	7010
 30171 08:7B31: D4 16        	pei	<L1158+buf_1+2
 30172 08:7B33: D4 14        	pei	<L1158+buf_1
 30173 08:7B35: 22 70 92 08  	jsl	~~ff_memfree
 30174                        L10734:
 30175                        	.line	7010
 30176 08:7B39: A9 0E 00     	lda	#$e
 30177 08:7B3C: 82 39 F7     	brl	L1164
 30178                        	.line	7010
 30179                        L10733:
 30180                        	.line	7010
 30181                        ;			n_clst = ((DWORD)sz_vol - sz_rsv
                     - sz_fat * n_fat - sz_dir) / pau;
 30182                        	.line	7011
 30183 08:7B3F: A5 64        	lda	<L1158+n_fat_1
 30184 08:7B41: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 573


 30185 08:7B43: 64 03        	stz	<R0+2
 30186 08:7B45: D4 5A        	pei	<L1158+sz_fat_1+2
 30187 08:7B47: D4 58        	pei	<L1158+sz_fat_1
 30188 08:7B49: D4 03        	pei	<R0+2
 30189 08:7B4B: D4 01        	pei	<R0
 30190                        	xref	~~~lmul
 30191 08:7B4D: 22 xx xx xx  	jsl	~~~lmul
 30192 08:7B51: 85 01        	sta	<R0
 30193 08:7B53: 86 03        	stx	<R0+2
 30194 08:7B55: 38           	sec
 30195 08:7B56: A5 38        	lda	<L1158+sz_vol_1
 30196 08:7B58: E5 54        	sbc	<L1158+sz_rsv_1
 30197 08:7B5A: 85 05        	sta	<R1
 30198 08:7B5C: A5 3A        	lda	<L1158+sz_vol_1+2
 30199 08:7B5E: E5 56        	sbc	<L1158+sz_rsv_1+2
 30200 08:7B60: 85 07        	sta	<R1+2
 30201 08:7B62: 38           	sec
 30202 08:7B63: A5 05        	lda	<R1
 30203 08:7B65: E5 01        	sbc	<R0
 30204 08:7B67: 85 09        	sta	<R2
 30205 08:7B69: A5 07        	lda	<R1+2
 30206 08:7B6B: E5 03        	sbc	<R0+2
 30207 08:7B6D: 85 0B        	sta	<R2+2
 30208 08:7B6F: 38           	sec
 30209 08:7B70: A5 09        	lda	<R2
 30210 08:7B72: E5 5C        	sbc	<L1158+sz_dir_1
 30211 08:7B74: 85 01        	sta	<R0
 30212 08:7B76: A5 0B        	lda	<R2+2
 30213 08:7B78: E5 5E        	sbc	<L1158+sz_dir_1+2
 30214 08:7B7A: 85 03        	sta	<R0+2
 30215 08:7B7C: D4 2E        	pei	<L1158+pau_1+2
 30216 08:7B7E: D4 2C        	pei	<L1158+pau_1
 30217 08:7B80: D4 03        	pei	<R0+2
 30218 08:7B82: D4 01        	pei	<R0
 30219                        	xref	~~~ludv
 30220 08:7B84: 22 xx xx xx  	jsl	~~~ludv
 30221 08:7B88: 85 28        	sta	<L1158+n_clst_1
 30222 08:7B8A: 86 2A        	stx	<L1158+n_clst_1+2
 30223                        ;			if (fsty == FS_FAT32)
 30224                        	.line	7012
 30225                        ;			{
 30226 08:7B8C: E2 20        	sep	#$20
 30227                        	longa	off
 30228 08:7B8E: A5 12        	lda	<L1158+fsty_1
 30229 08:7B90: C9 03        	cmp	#<$3
 30230 08:7B92: C2 20        	rep	#$20
 30231                        	longa	on
 30232 08:7B94: F0 03        	beq	L1248
 30233 08:7B96: 82 44 00     	brl	L10735
 30234                        L1248:
 30235                        	.line	7013
 30236                        ;				if (n_clst <= MAX_FAT16)
 30237                        	.line	7014
 30238                        ;				{ /* Too few clusters fo
                    r FAT32? */
 30239 08:7B99: A9 F5 FF     	lda	#$fff5
 30240 08:7B9C: C5 28        	cmp	<L1158+n_clst_1
 30241 08:7B9E: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 574


 30242 08:7BA1: E5 2A        	sbc	<L1158+n_clst_1+2
 30243 08:7BA3: B0 03        	bcs	L1249
 30244 08:7BA5: 82 35 00     	brl	L10736
 30245                        L1249:
 30246                        	.line	7015
 30247                        ;					if (sz_au == 0 &
                    & (sz_au = pau / 2) != 0) continue; /* Adjust cluster size a
                    nd retry */
 30248                        	.line	7016
 30249 08:7BA8: A5 60        	lda	<L1158+sz_au_1
 30250 08:7BAA: 05 62        	ora	<L1158+sz_au_1+2
 30251 08:7BAC: F0 03        	beq	L1251
 30252 08:7BAE: 82 15 00     	brl	L1250
 30253                        L1251:
 30254 08:7BB1: A5 2C        	lda	<L1158+pau_1
 30255 08:7BB3: 85 60        	sta	<L1158+sz_au_1
 30256 08:7BB5: A5 2E        	lda	<L1158+pau_1+2
 30257 08:7BB7: 85 62        	sta	<L1158+sz_au_1+2
 30258 08:7BB9: 46 62        	lsr	<L1158+sz_au_1+2
 30259 08:7BBB: 66 60        	ror	<L1158+sz_au_1
 30260 08:7BBD: A5 60        	lda	<L1158+sz_au_1
 30261 08:7BBF: 05 62        	ora	<L1158+sz_au_1+2
 30262 08:7BC1: F0 03        	beq	L1252
 30263 08:7BC3: 82 39 01     	brl	L10711
 30264                        L1252:
 30265                        L1250:
 30266                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 30267                        	.line	7017
 30268                        	.line	7017
 30269 08:7BC6: A5 7A        	lda	<L1157+work_0
 30270 08:7BC8: 05 7C        	ora	<L1157+work_0+2
 30271 08:7BCA: F0 03        	beq	L1253
 30272 08:7BCC: 82 08 00     	brl	L10737
 30273                        L1253:
 30274                        	.line	7017
 30275 08:7BCF: D4 16        	pei	<L1158+buf_1+2
 30276 08:7BD1: D4 14        	pei	<L1158+buf_1
 30277 08:7BD3: 22 70 92 08  	jsl	~~ff_memfree
 30278                        L10737:
 30279                        	.line	7017
 30280 08:7BD7: A9 0E 00     	lda	#$e
 30281 08:7BDA: 82 9B F6     	brl	L1164
 30282                        	.line	7017
 30283                        	.line	7017
 30284                        ;				}
 30285                        	.line	7018
 30286                        ;			}
 30287                        L10736:
 30288                        	.line	7019
 30289                        ;			if (fsty == FS_FAT16)
 30290                        L10735:
 30291                        	.line	7020
 30292                        ;			{
 30293 08:7BDD: E2 20        	sep	#$20
 30294                        	longa	off
 30295 08:7BDF: A5 12        	lda	<L1158+fsty_1
 30296 08:7BE1: C9 02        	cmp	#<$2
  Mon Aug  9 2021 16:52                                                Page 575


 30297 08:7BE3: C2 20        	rep	#$20
 30298                        	longa	on
 30299 08:7BE5: F0 03        	beq	L1254
 30300 08:7BE7: 82 DF 00     	brl	L10738
 30301                        L1254:
 30302                        	.line	7021
 30303                        ;				if (n_clst > MAX_FAT16)
 30304                        	.line	7022
 30305                        ;				{ /* Too many clusters f
                    or FAT16 */
 30306 08:7BEA: A9 F5 FF     	lda	#$fff5
 30307 08:7BED: C5 28        	cmp	<L1158+n_clst_1
 30308 08:7BEF: A9 00 00     	lda	#$0
 30309 08:7BF2: E5 2A        	sbc	<L1158+n_clst_1+2
 30310 08:7BF4: 90 03        	bcc	L1255
 30311 08:7BF6: 82 86 00     	brl	L10739
 30312                        L1255:
 30313                        	.line	7023
 30314                        ;					if (sz_au == 0 &
                    & (pau * 2) <= 64)
 30315                        	.line	7024
 30316                        ;					{
 30317 08:7BF9: A5 60        	lda	<L1158+sz_au_1
 30318 08:7BFB: 05 62        	ora	<L1158+sz_au_1+2
 30319 08:7BFD: F0 03        	beq	L1256
 30320 08:7BFF: 82 2A 00     	brl	L10740
 30321                        L1256:
 30322 08:7C02: A5 2C        	lda	<L1158+pau_1
 30323 08:7C04: 85 01        	sta	<R0
 30324 08:7C06: A5 2E        	lda	<L1158+pau_1+2
 30325 08:7C08: 85 03        	sta	<R0+2
 30326 08:7C0A: 06 01        	asl	<R0
 30327 08:7C0C: 26 03        	rol	<R0+2
 30328 08:7C0E: A9 40 00     	lda	#$40
 30329 08:7C11: C5 01        	cmp	<R0
 30330 08:7C13: A9 00 00     	lda	#$0
 30331 08:7C16: E5 03        	sbc	<R0+2
 30332 08:7C18: B0 03        	bcs	L1257
 30333 08:7C1A: 82 0F 00     	brl	L10740
 30334                        L1257:
 30335                        	.line	7025
 30336                        ;						sz_au = 
                    pau * 2; continue; /* Adjust cluster size and retry */
 30337                        	.line	7026
 30338 08:7C1D: A5 2C        	lda	<L1158+pau_1
 30339 08:7C1F: 85 60        	sta	<L1158+sz_au_1
 30340 08:7C21: A5 2E        	lda	<L1158+pau_1+2
 30341 08:7C23: 85 62        	sta	<L1158+sz_au_1+2
 30342 08:7C25: 06 60        	asl	<L1158+sz_au_1
 30343 08:7C27: 26 62        	rol	<L1158+sz_au_1+2
 30344                        	.line	7026
 30345 08:7C29: 82 D3 00     	brl	L10711
 30346                        ;					}
 30347                        	.line	7027
 30348                        ;					if ((fsopt & FM_
                    FAT32))
 30349                        L10740:
 30350                        	.line	7028
  Mon Aug  9 2021 16:52                                                Page 576


 30351                        ;					{
 30352 08:7C2C: E2 20        	sep	#$20
 30353                        	longa	off
 30354 08:7C2E: A5 11        	lda	<L1158+fsopt_1
 30355 08:7C30: 29 02        	and	#<$2
 30356 08:7C32: C2 20        	rep	#$20
 30357                        	longa	on
 30358 08:7C34: D0 03        	bne	L1258
 30359 08:7C36: 82 0B 00     	brl	L10741
 30360                        L1258:
 30361                        	.line	7029
 30362                        ;						fsty = F
                    S_FAT32; continue; /* Switch type to FAT32 and retry */
 30363                        	.line	7030
 30364 08:7C39: E2 20        	sep	#$20
 30365                        	longa	off
 30366 08:7C3B: A9 03        	lda	#$3
 30367 08:7C3D: 85 12        	sta	<L1158+fsty_1
 30368 08:7C3F: C2 20        	rep	#$20
 30369                        	longa	on
 30370                        	.line	7030
 30371 08:7C41: 82 BB 00     	brl	L10711
 30372                        ;					}
 30373                        	.line	7031
 30374                        ;					if (sz_au == 0 &
                    & (sz_au = pau * 2) <= 128) continue; /* Adjust cluster size
                     and retry */
 30375                        L10741:
 30376                        	.line	7032
 30377 08:7C44: A5 60        	lda	<L1158+sz_au_1
 30378 08:7C46: 05 62        	ora	<L1158+sz_au_1+2
 30379 08:7C48: F0 03        	beq	L1260
 30380 08:7C4A: 82 1B 00     	brl	L1259
 30381                        L1260:
 30382 08:7C4D: A5 2C        	lda	<L1158+pau_1
 30383 08:7C4F: 85 60        	sta	<L1158+sz_au_1
 30384 08:7C51: A5 2E        	lda	<L1158+pau_1+2
 30385 08:7C53: 85 62        	sta	<L1158+sz_au_1+2
 30386 08:7C55: 06 60        	asl	<L1158+sz_au_1
 30387 08:7C57: 26 62        	rol	<L1158+sz_au_1+2
 30388 08:7C59: A9 80 00     	lda	#$80
 30389 08:7C5C: C5 60        	cmp	<L1158+sz_au_1
 30390 08:7C5E: A9 00 00     	lda	#$0
 30391 08:7C61: E5 62        	sbc	<L1158+sz_au_1+2
 30392 08:7C63: 90 03        	bcc	L1261
 30393 08:7C65: 82 97 00     	brl	L10711
 30394                        L1261:
 30395                        L1259:
 30396                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 30397                        	.line	7033
 30398                        	.line	7033
 30399 08:7C68: A5 7A        	lda	<L1157+work_0
 30400 08:7C6A: 05 7C        	ora	<L1157+work_0+2
 30401 08:7C6C: F0 03        	beq	L1262
 30402 08:7C6E: 82 08 00     	brl	L10742
 30403                        L1262:
 30404                        	.line	7033
  Mon Aug  9 2021 16:52                                                Page 577


 30405 08:7C71: D4 16        	pei	<L1158+buf_1+2
 30406 08:7C73: D4 14        	pei	<L1158+buf_1
 30407 08:7C75: 22 70 92 08  	jsl	~~ff_memfree
 30408                        L10742:
 30409                        	.line	7033
 30410 08:7C79: A9 0E 00     	lda	#$e
 30411 08:7C7C: 82 F9 F5     	brl	L1164
 30412                        	.line	7033
 30413                        	.line	7033
 30414                        ;				}
 30415                        	.line	7034
 30416                        ;				if (n_clst <= MAX_FAT12)
 30417                        L10739:
 30418                        	.line	7035
 30419                        ;				{ /* Too few clusters fo
                    r FAT16 */
 30420 08:7C7F: A9 F5 0F     	lda	#$ff5
 30421 08:7C82: C5 28        	cmp	<L1158+n_clst_1
 30422 08:7C84: A9 00 00     	lda	#$0
 30423 08:7C87: E5 2A        	sbc	<L1158+n_clst_1+2
 30424 08:7C89: B0 03        	bcs	L1263
 30425 08:7C8B: 82 3B 00     	brl	L10743
 30426                        L1263:
 30427                        	.line	7036
 30428                        ;					if (sz_au == 0 &
                    & (sz_au = pau * 2) <= 128) continue; /* Adjust cluster size
                     and retry */
 30429                        	.line	7037
 30430 08:7C8E: A5 60        	lda	<L1158+sz_au_1
 30431 08:7C90: 05 62        	ora	<L1158+sz_au_1+2
 30432 08:7C92: F0 03        	beq	L1265
 30433 08:7C94: 82 1B 00     	brl	L1264
 30434                        L1265:
 30435 08:7C97: A5 2C        	lda	<L1158+pau_1
 30436 08:7C99: 85 60        	sta	<L1158+sz_au_1
 30437 08:7C9B: A5 2E        	lda	<L1158+pau_1+2
 30438 08:7C9D: 85 62        	sta	<L1158+sz_au_1+2
 30439 08:7C9F: 06 60        	asl	<L1158+sz_au_1
 30440 08:7CA1: 26 62        	rol	<L1158+sz_au_1+2
 30441 08:7CA3: A9 80 00     	lda	#$80
 30442 08:7CA6: C5 60        	cmp	<L1158+sz_au_1
 30443 08:7CA8: A9 00 00     	lda	#$0
 30444 08:7CAB: E5 62        	sbc	<L1158+sz_au_1+2
 30445 08:7CAD: 90 03        	bcc	L1266
 30446 08:7CAF: 82 4D 00     	brl	L10711
 30447                        L1266:
 30448                        L1264:
 30449                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 30450                        	.line	7038
 30451                        	.line	7038
 30452 08:7CB2: A5 7A        	lda	<L1157+work_0
 30453 08:7CB4: 05 7C        	ora	<L1157+work_0+2
 30454 08:7CB6: F0 03        	beq	L1267
 30455 08:7CB8: 82 08 00     	brl	L10744
 30456                        L1267:
 30457                        	.line	7038
 30458 08:7CBB: D4 16        	pei	<L1158+buf_1+2
  Mon Aug  9 2021 16:52                                                Page 578


 30459 08:7CBD: D4 14        	pei	<L1158+buf_1
 30460 08:7CBF: 22 70 92 08  	jsl	~~ff_memfree
 30461                        L10744:
 30462                        	.line	7038
 30463 08:7CC3: A9 0E 00     	lda	#$e
 30464 08:7CC6: 82 AF F5     	brl	L1164
 30465                        	.line	7038
 30466                        	.line	7038
 30467                        ;				}
 30468                        	.line	7039
 30469                        ;			}
 30470                        L10743:
 30471                        	.line	7040
 30472                        ;			if (fsty == FS_FAT12 && n_clst >
                     MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED); /* Too many cluster
                    s for FAT12 */
 30473                        L10738:
 30474                        	.line	7041
 30475 08:7CC9: E2 20        	sep	#$20
 30476                        	longa	off
 30477 08:7CCB: A5 12        	lda	<L1158+fsty_1
 30478 08:7CCD: C9 01        	cmp	#<$1
 30479 08:7CCF: C2 20        	rep	#$20
 30480                        	longa	on
 30481 08:7CD1: F0 03        	beq	L1268
 30482 08:7CD3: 82 26 00     	brl	L10745
 30483                        L1268:
 30484 08:7CD6: A9 F5 0F     	lda	#$ff5
 30485 08:7CD9: C5 28        	cmp	<L1158+n_clst_1
 30486 08:7CDB: A9 00 00     	lda	#$0
 30487 08:7CDE: E5 2A        	sbc	<L1158+n_clst_1+2
 30488 08:7CE0: 90 03        	bcc	L1269
 30489 08:7CE2: 82 17 00     	brl	L10745
 30490                        L1269:
 30491                        	.line	7041
 30492                        	.line	7041
 30493 08:7CE5: A5 7A        	lda	<L1157+work_0
 30494 08:7CE7: 05 7C        	ora	<L1157+work_0+2
 30495 08:7CE9: F0 03        	beq	L1270
 30496 08:7CEB: 82 08 00     	brl	L10746
 30497                        L1270:
 30498                        	.line	7041
 30499 08:7CEE: D4 16        	pei	<L1158+buf_1+2
 30500 08:7CF0: D4 14        	pei	<L1158+buf_1
 30501 08:7CF2: 22 70 92 08  	jsl	~~ff_memfree
 30502                        L10746:
 30503                        	.line	7041
 30504 08:7CF6: A9 0E 00     	lda	#$e
 30505 08:7CF9: 82 7C F5     	brl	L1164
 30506                        	.line	7041
 30507                        L10745:
 30508                        	.line	7041
 30509                        ;
 30510                        ;			/* Ok, it is the valid cluster c
                    onfiguration */
 30511                        ;			break;
 30512                        	.line	7044
 30513 08:7CFC: 82 03 00     	brl	L10712
  Mon Aug  9 2021 16:52                                                Page 579


 30514                        ;		}while (1);
 30515                        	.line	7045
 30516                        L10711:
 30517 08:7CFF: 82 5C FA     	brl	L10713
 30518                        L10712:
 30519                        ;
 30520                        ;#if FF_USE_TRIM
 30521                        ;		lba[0] = b_vol; lba[1] = b_vol + sz_vol 
                    - 1; /* Inform storage device that the volume area may be er
                    ased */
 30522                        ;		disk_ioctl(pdrv, CTRL_TRIM, lba);
 30523                        ;#endif
 30524                        ;		/* Create FAT VBR */
 30525                        ;		mem_set(buf, 0, ss);
 30526                        	.line	7052
 30527 08:7D02: D4 1E        	pei	<L1158+ss_1
 30528 08:7D04: F4 00 00     	pea	#<$0
 30529 08:7D07: D4 16        	pei	<L1158+buf_1+2
 30530 08:7D09: D4 14        	pei	<L1158+buf_1
 30531 08:7D0B: 22 DF 01 08  	jsl	~~mem_set
 30532                        ;		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90"
                     "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 30533                        	.line	7053
 30534 08:7D0F: F4 0B 00     	pea	#<$b
 30535 08:7D12: F4 xx xx     	pea	#^L670
 30536 08:7D15: F4 xx xx     	pea	#<L670
 30537 08:7D18: D4 16        	pei	<L1158+buf_1+2
 30538 08:7D1A: D4 14        	pei	<L1158+buf_1
 30539 08:7D1C: 22 93 01 08  	jsl	~~mem_cpy
 30540                        ;		st_word(buf + BPB_BytsPerSec, ss); /* Se
                    ctor size [byte] */
 30541                        	.line	7054
 30542 08:7D20: D4 1E        	pei	<L1158+ss_1
 30543 08:7D22: 18           	clc
 30544 08:7D23: A9 0B 00     	lda	#$b
 30545 08:7D26: 65 14        	adc	<L1158+buf_1
 30546 08:7D28: 85 01        	sta	<R0
 30547 08:7D2A: A9 00 00     	lda	#$0
 30548 08:7D2D: 65 16        	adc	<L1158+buf_1+2
 30549 08:7D2F: 85 03        	sta	<R0+2
 30550 08:7D31: D4 03        	pei	<R0+2
 30551 08:7D33: D4 01        	pei	<R0
 30552 08:7D35: 22 D7 00 08  	jsl	~~st_word
 30553                        ;		buf[BPB_SecPerClus] = (BYTE)pau; /* Clus
                    ter size [sector] */
 30554                        	.line	7055
 30555 08:7D39: E2 20        	sep	#$20
 30556                        	longa	off
 30557 08:7D3B: A5 2C        	lda	<L1158+pau_1
 30558 08:7D3D: A0 0D 00     	ldy	#$d
 30559 08:7D40: 97 14        	sta	[<L1158+buf_1],Y
 30560 08:7D42: C2 20        	rep	#$20
 30561                        	longa	on
 30562                        ;		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_r
                    sv); /* Size of reserved area */
 30563                        	.line	7056
 30564 08:7D44: D4 54        	pei	<L1158+sz_rsv_1
 30565 08:7D46: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 580


 30566 08:7D47: A9 0E 00     	lda	#$e
 30567 08:7D4A: 65 14        	adc	<L1158+buf_1
 30568 08:7D4C: 85 01        	sta	<R0
 30569 08:7D4E: A9 00 00     	lda	#$0
 30570 08:7D51: 65 16        	adc	<L1158+buf_1+2
 30571 08:7D53: 85 03        	sta	<R0+2
 30572 08:7D55: D4 03        	pei	<R0+2
 30573 08:7D57: D4 01        	pei	<R0
 30574 08:7D59: 22 D7 00 08  	jsl	~~st_word
 30575                        ;		buf[BPB_NumFATs] = (BYTE)n_fat; /* Numbe
                    r of FATs */
 30576                        	.line	7057
 30577 08:7D5D: E2 20        	sep	#$20
 30578                        	longa	off
 30579 08:7D5F: A5 64        	lda	<L1158+n_fat_1
 30580 08:7D61: A0 10 00     	ldy	#$10
 30581 08:7D64: 97 14        	sta	[<L1158+buf_1],Y
 30582 08:7D66: C2 20        	rep	#$20
 30583                        	longa	on
 30584                        ;		st_word(buf + BPB_RootEntCnt, (WORD)((fs
                    ty == FS_FAT32) ? 0 : n_root)); /* Number of root directory 
                    entries */
 30585                        	.line	7058
 30586 08:7D68: E2 20        	sep	#$20
 30587                        	longa	off
 30588 08:7D6A: A5 12        	lda	<L1158+fsty_1
 30589 08:7D6C: C9 03        	cmp	#<$3
 30590 08:7D6E: C2 20        	rep	#$20
 30591                        	longa	on
 30592 08:7D70: F0 03        	beq	L1272
 30593 08:7D72: 82 05 00     	brl	L1271
 30594                        L1272:
 30595 08:7D75: A9 00 00     	lda	#$0
 30596 08:7D78: 80 02        	bra	L1273
 30597                        L1271:
 30598 08:7D7A: A5 66        	lda	<L1158+n_root_1
 30599                        L1273:
 30600 08:7D7C: 48           	pha
 30601 08:7D7D: 18           	clc
 30602 08:7D7E: A9 11 00     	lda	#$11
 30603 08:7D81: 65 14        	adc	<L1158+buf_1
 30604 08:7D83: 85 01        	sta	<R0
 30605 08:7D85: A9 00 00     	lda	#$0
 30606 08:7D88: 65 16        	adc	<L1158+buf_1+2
 30607 08:7D8A: 85 03        	sta	<R0+2
 30608 08:7D8C: D4 03        	pei	<R0+2
 30609 08:7D8E: D4 01        	pei	<R0
 30610 08:7D90: 22 D7 00 08  	jsl	~~st_word
 30611                        ;		if (sz_vol < 0x10000)
 30612                        	.line	7059
 30613                        ;		{
 30614 08:7D94: A5 38        	lda	<L1158+sz_vol_1
 30615 08:7D96: C9 00 00     	cmp	#<$10000
 30616 08:7D99: A5 3A        	lda	<L1158+sz_vol_1+2
 30617 08:7D9B: E9 01 00     	sbc	#^$10000
 30618 08:7D9E: 90 03        	bcc	L1274
 30619 08:7DA0: 82 1C 00     	brl	L10747
 30620                        L1274:
  Mon Aug  9 2021 16:52                                                Page 581


 30621                        	.line	7060
 30622                        ;			st_word(buf + BPB_TotSec16, (WOR
                    D)sz_vol); /* Volume size in 16-bit LBA */
 30623                        	.line	7061
 30624 08:7DA3: D4 38        	pei	<L1158+sz_vol_1
 30625 08:7DA5: 18           	clc
 30626 08:7DA6: A9 13 00     	lda	#$13
 30627 08:7DA9: 65 14        	adc	<L1158+buf_1
 30628 08:7DAB: 85 01        	sta	<R0
 30629 08:7DAD: A9 00 00     	lda	#$0
 30630 08:7DB0: 65 16        	adc	<L1158+buf_1+2
 30631 08:7DB2: 85 03        	sta	<R0+2
 30632 08:7DB4: D4 03        	pei	<R0+2
 30633 08:7DB6: D4 01        	pei	<R0
 30634 08:7DB8: 22 D7 00 08  	jsl	~~st_word
 30635                        ;		}
 30636                        	.line	7062
 30637                        ;		else
 30638 08:7DBC: 82 1B 00     	brl	L10748
 30639                        L10747:
 30640                        ;		{
 30641                        	.line	7064
 30642                        ;			st_dword(buf + BPB_TotSec32, (DW
                    ORD)sz_vol); /* Volume size in 32-bit LBA */
 30643                        	.line	7065
 30644 08:7DBF: D4 3A        	pei	<L1158+sz_vol_1+2
 30645 08:7DC1: D4 38        	pei	<L1158+sz_vol_1
 30646 08:7DC3: 18           	clc
 30647 08:7DC4: A9 20 00     	lda	#$20
 30648 08:7DC7: 65 14        	adc	<L1158+buf_1
 30649 08:7DC9: 85 01        	sta	<R0
 30650 08:7DCB: A9 00 00     	lda	#$0
 30651 08:7DCE: 65 16        	adc	<L1158+buf_1+2
 30652 08:7DD0: 85 03        	sta	<R0+2
 30653 08:7DD2: D4 03        	pei	<R0+2
 30654 08:7DD4: D4 01        	pei	<R0
 30655 08:7DD6: 22 16 01 08  	jsl	~~st_dword
 30656                        ;		}
 30657                        	.line	7066
 30658                        L10748:
 30659                        ;		buf[BPB_Media] = 0xF8; /* Media descript
                    or byte */
 30660                        	.line	7067
 30661 08:7DDA: E2 20        	sep	#$20
 30662                        	longa	off
 30663 08:7DDC: A9 F8        	lda	#$f8
 30664 08:7DDE: A0 15 00     	ldy	#$15
 30665 08:7DE1: 97 14        	sta	[<L1158+buf_1],Y
 30666 08:7DE3: C2 20        	rep	#$20
 30667                        	longa	on
 30668                        ;		st_word(buf + BPB_SecPerTrk, 63); /* Num
                    ber of sectors per track (for int13) */
 30669                        	.line	7068
 30670 08:7DE5: F4 3F 00     	pea	#<$3f
 30671 08:7DE8: 18           	clc
 30672 08:7DE9: A9 18 00     	lda	#$18
 30673 08:7DEC: 65 14        	adc	<L1158+buf_1
 30674 08:7DEE: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 582


 30675 08:7DF0: A9 00 00     	lda	#$0
 30676 08:7DF3: 65 16        	adc	<L1158+buf_1+2
 30677 08:7DF5: 85 03        	sta	<R0+2
 30678 08:7DF7: D4 03        	pei	<R0+2
 30679 08:7DF9: D4 01        	pei	<R0
 30680 08:7DFB: 22 D7 00 08  	jsl	~~st_word
 30681                        ;		st_word(buf + BPB_NumHeads, 255); /* Num
                    ber of heads (for int13) */
 30682                        	.line	7069
 30683 08:7DFF: F4 FF 00     	pea	#<$ff
 30684 08:7E02: 18           	clc
 30685 08:7E03: A9 1A 00     	lda	#$1a
 30686 08:7E06: 65 14        	adc	<L1158+buf_1
 30687 08:7E08: 85 01        	sta	<R0
 30688 08:7E0A: A9 00 00     	lda	#$0
 30689 08:7E0D: 65 16        	adc	<L1158+buf_1+2
 30690 08:7E0F: 85 03        	sta	<R0+2
 30691 08:7E11: D4 03        	pei	<R0+2
 30692 08:7E13: D4 01        	pei	<R0
 30693 08:7E15: 22 D7 00 08  	jsl	~~st_word
 30694                        ;		st_dword(buf + BPB_HiddSec, (DWORD)b_vol
                    ); /* Volume offset in the physical drive [sector] */
 30695                        	.line	7070
 30696 08:7E19: D4 3E        	pei	<L1158+b_vol_1+2
 30697 08:7E1B: D4 3C        	pei	<L1158+b_vol_1
 30698 08:7E1D: 18           	clc
 30699 08:7E1E: A9 1C 00     	lda	#$1c
 30700 08:7E21: 65 14        	adc	<L1158+buf_1
 30701 08:7E23: 85 01        	sta	<R0
 30702 08:7E25: A9 00 00     	lda	#$0
 30703 08:7E28: 65 16        	adc	<L1158+buf_1+2
 30704 08:7E2A: 85 03        	sta	<R0+2
 30705 08:7E2C: D4 03        	pei	<R0+2
 30706 08:7E2E: D4 01        	pei	<R0
 30707 08:7E30: 22 16 01 08  	jsl	~~st_dword
 30708                        ;		if (fsty == FS_FAT32)
 30709                        	.line	7071
 30710                        ;		{
 30711 08:7E34: E2 20        	sep	#$20
 30712                        	longa	off
 30713 08:7E36: A5 12        	lda	<L1158+fsty_1
 30714 08:7E38: C9 03        	cmp	#<$3
 30715 08:7E3A: C2 20        	rep	#$20
 30716                        	longa	on
 30717 08:7E3C: F0 03        	beq	L1275
 30718 08:7E3E: 82 C2 00     	brl	L10749
 30719                        L1275:
 30720                        	.line	7072
 30721                        ;			st_dword(buf + BS_VolID32, GET_F
                    ATTIME()); /* VSN */
 30722                        	.line	7073
 30723 08:7E41: F4 21 52     	pea	#^$52210000
 30724 08:7E44: F4 00 00     	pea	#<$52210000
 30725 08:7E47: 18           	clc
 30726 08:7E48: A9 43 00     	lda	#$43
 30727 08:7E4B: 65 14        	adc	<L1158+buf_1
 30728 08:7E4D: 85 01        	sta	<R0
 30729 08:7E4F: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 583


 30730 08:7E52: 65 16        	adc	<L1158+buf_1+2
 30731 08:7E54: 85 03        	sta	<R0+2
 30732 08:7E56: D4 03        	pei	<R0+2
 30733 08:7E58: D4 01        	pei	<R0
 30734 08:7E5A: 22 16 01 08  	jsl	~~st_dword
 30735                        ;			st_dword(buf + BPB_FATSz32, sz_f
                    at); /* FAT size [sector] */
 30736                        	.line	7074
 30737 08:7E5E: D4 5A        	pei	<L1158+sz_fat_1+2
 30738 08:7E60: D4 58        	pei	<L1158+sz_fat_1
 30739 08:7E62: 18           	clc
 30740 08:7E63: A9 24 00     	lda	#$24
 30741 08:7E66: 65 14        	adc	<L1158+buf_1
 30742 08:7E68: 85 01        	sta	<R0
 30743 08:7E6A: A9 00 00     	lda	#$0
 30744 08:7E6D: 65 16        	adc	<L1158+buf_1+2
 30745 08:7E6F: 85 03        	sta	<R0+2
 30746 08:7E71: D4 03        	pei	<R0+2
 30747 08:7E73: D4 01        	pei	<R0
 30748 08:7E75: 22 16 01 08  	jsl	~~st_dword
 30749                        ;			st_dword(buf + BPB_RootClus32, 2
                    ); /* Root directory cluster # (2) */
 30750                        	.line	7075
 30751 08:7E79: F4 00 00     	pea	#^$2
 30752 08:7E7C: F4 02 00     	pea	#<$2
 30753 08:7E7F: 18           	clc
 30754 08:7E80: A9 2C 00     	lda	#$2c
 30755 08:7E83: 65 14        	adc	<L1158+buf_1
 30756 08:7E85: 85 01        	sta	<R0
 30757 08:7E87: A9 00 00     	lda	#$0
 30758 08:7E8A: 65 16        	adc	<L1158+buf_1+2
 30759 08:7E8C: 85 03        	sta	<R0+2
 30760 08:7E8E: D4 03        	pei	<R0+2
 30761 08:7E90: D4 01        	pei	<R0
 30762 08:7E92: 22 16 01 08  	jsl	~~st_dword
 30763                        ;			st_word(buf + BPB_FSInfo32, 1); 
                    /* Offset of FSINFO sector (VBR + 1) */
 30764                        	.line	7076
 30765 08:7E96: F4 01 00     	pea	#<$1
 30766 08:7E99: 18           	clc
 30767 08:7E9A: A9 30 00     	lda	#$30
 30768 08:7E9D: 65 14        	adc	<L1158+buf_1
 30769 08:7E9F: 85 01        	sta	<R0
 30770 08:7EA1: A9 00 00     	lda	#$0
 30771 08:7EA4: 65 16        	adc	<L1158+buf_1+2
 30772 08:7EA6: 85 03        	sta	<R0+2
 30773 08:7EA8: D4 03        	pei	<R0+2
 30774 08:7EAA: D4 01        	pei	<R0
 30775 08:7EAC: 22 D7 00 08  	jsl	~~st_word
 30776                        ;			st_word(buf + BPB_BkBootSec32, 6
                    ); /* Offset of backup VBR (VBR + 6) */
 30777                        	.line	7077
 30778 08:7EB0: F4 06 00     	pea	#<$6
 30779 08:7EB3: 18           	clc
 30780 08:7EB4: A9 32 00     	lda	#$32
 30781 08:7EB7: 65 14        	adc	<L1158+buf_1
 30782 08:7EB9: 85 01        	sta	<R0
 30783 08:7EBB: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 584


 30784 08:7EBE: 65 16        	adc	<L1158+buf_1+2
 30785 08:7EC0: 85 03        	sta	<R0+2
 30786 08:7EC2: D4 03        	pei	<R0+2
 30787 08:7EC4: D4 01        	pei	<R0
 30788 08:7EC6: 22 D7 00 08  	jsl	~~st_word
 30789                        ;			buf[BS_DrvNum32] = 0x80; /* Driv
                    e number (for int13) */
 30790                        	.line	7078
 30791 08:7ECA: E2 20        	sep	#$20
 30792                        	longa	off
 30793 08:7ECC: A9 80        	lda	#$80
 30794 08:7ECE: A0 40 00     	ldy	#$40
 30795 08:7ED1: 97 14        	sta	[<L1158+buf_1],Y
 30796 08:7ED3: C2 20        	rep	#$20
 30797                        	longa	on
 30798                        ;			buf[BS_BootSig32] = 0x29; /* Ext
                    ended boot signature */
 30799                        	.line	7079
 30800 08:7ED5: E2 20        	sep	#$20
 30801                        	longa	off
 30802 08:7ED7: A9 29        	lda	#$29
 30803 08:7ED9: A0 42 00     	ldy	#$42
 30804 08:7EDC: 97 14        	sta	[<L1158+buf_1],Y
 30805 08:7EDE: C2 20        	rep	#$20
 30806                        	longa	on
 30807                        ;			mem_cpy(buf + BS_VolLab32, "NO N
                    AME    " "FAT32   ", 19); /* Volume label, FAT signature */
 30808                        	.line	7080
 30809 08:7EE0: F4 13 00     	pea	#<$13
 30810 08:7EE3: F4 xx xx     	pea	#^L670+12
 30811 08:7EE6: F4 xx xx     	pea	#<L670+12
 30812 08:7EE9: 18           	clc
 30813 08:7EEA: A9 47 00     	lda	#$47
 30814 08:7EED: 65 14        	adc	<L1158+buf_1
 30815 08:7EEF: 85 01        	sta	<R0
 30816 08:7EF1: A9 00 00     	lda	#$0
 30817 08:7EF4: 65 16        	adc	<L1158+buf_1+2
 30818 08:7EF6: 85 03        	sta	<R0+2
 30819 08:7EF8: D4 03        	pei	<R0+2
 30820 08:7EFA: D4 01        	pei	<R0
 30821 08:7EFC: 22 93 01 08  	jsl	~~mem_cpy
 30822                        ;		}
 30823                        	.line	7081
 30824                        ;		else
 30825 08:7F00: 82 6C 00     	brl	L10750
 30826                        L10749:
 30827                        ;		{
 30828                        	.line	7083
 30829                        ;			st_dword(buf + BS_VolID, GET_FAT
                    TIME()); /* VSN */
 30830                        	.line	7084
 30831 08:7F03: F4 21 52     	pea	#^$52210000
 30832 08:7F06: F4 00 00     	pea	#<$52210000
 30833 08:7F09: 18           	clc
 30834 08:7F0A: A9 27 00     	lda	#$27
 30835 08:7F0D: 65 14        	adc	<L1158+buf_1
 30836 08:7F0F: 85 01        	sta	<R0
 30837 08:7F11: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 585


 30838 08:7F14: 65 16        	adc	<L1158+buf_1+2
 30839 08:7F16: 85 03        	sta	<R0+2
 30840 08:7F18: D4 03        	pei	<R0+2
 30841 08:7F1A: D4 01        	pei	<R0
 30842 08:7F1C: 22 16 01 08  	jsl	~~st_dword
 30843                        ;			st_word(buf + BPB_FATSz16, (WORD
                    )sz_fat); /* FAT size [sector] */
 30844                        	.line	7085
 30845 08:7F20: D4 58        	pei	<L1158+sz_fat_1
 30846 08:7F22: 18           	clc
 30847 08:7F23: A9 16 00     	lda	#$16
 30848 08:7F26: 65 14        	adc	<L1158+buf_1
 30849 08:7F28: 85 01        	sta	<R0
 30850 08:7F2A: A9 00 00     	lda	#$0
 30851 08:7F2D: 65 16        	adc	<L1158+buf_1+2
 30852 08:7F2F: 85 03        	sta	<R0+2
 30853 08:7F31: D4 03        	pei	<R0+2
 30854 08:7F33: D4 01        	pei	<R0
 30855 08:7F35: 22 D7 00 08  	jsl	~~st_word
 30856                        ;			buf[BS_DrvNum] = 0x80; /* Drive 
                    number (for int13) */
 30857                        	.line	7086
 30858 08:7F39: E2 20        	sep	#$20
 30859                        	longa	off
 30860 08:7F3B: A9 80        	lda	#$80
 30861 08:7F3D: A0 24 00     	ldy	#$24
 30862 08:7F40: 97 14        	sta	[<L1158+buf_1],Y
 30863 08:7F42: C2 20        	rep	#$20
 30864                        	longa	on
 30865                        ;			buf[BS_BootSig] = 0x29; /* Exten
                    ded boot signature */
 30866                        	.line	7087
 30867 08:7F44: E2 20        	sep	#$20
 30868                        	longa	off
 30869 08:7F46: A9 29        	lda	#$29
 30870 08:7F48: A0 26 00     	ldy	#$26
 30871 08:7F4B: 97 14        	sta	[<L1158+buf_1],Y
 30872 08:7F4D: C2 20        	rep	#$20
 30873                        	longa	on
 30874                        ;			mem_cpy(buf + BS_VolLab, "NO NAM
                    E    " "FAT     ", 19); /* Volume label, FAT signature */
 30875                        	.line	7088
 30876 08:7F4F: F4 13 00     	pea	#<$13
 30877 08:7F52: F4 xx xx     	pea	#^L670+32
 30878 08:7F55: F4 xx xx     	pea	#<L670+32
 30879 08:7F58: 18           	clc
 30880 08:7F59: A9 2B 00     	lda	#$2b
 30881 08:7F5C: 65 14        	adc	<L1158+buf_1
 30882 08:7F5E: 85 01        	sta	<R0
 30883 08:7F60: A9 00 00     	lda	#$0
 30884 08:7F63: 65 16        	adc	<L1158+buf_1+2
 30885 08:7F65: 85 03        	sta	<R0+2
 30886 08:7F67: D4 03        	pei	<R0+2
 30887 08:7F69: D4 01        	pei	<R0
 30888 08:7F6B: 22 93 01 08  	jsl	~~mem_cpy
 30889                        ;		}
 30890                        	.line	7089
 30891                        L10750:
  Mon Aug  9 2021 16:52                                                Page 586


 30892                        ;		st_word(buf + BS_55AA, 0xAA55); /* Signa
                    ture (offset is fixed here regardless of sector size) */
 30893                        	.line	7090
 30894 08:7F6F: F4 55 AA     	pea	#<$aa55
 30895 08:7F72: 18           	clc
 30896 08:7F73: A9 FE 01     	lda	#$1fe
 30897 08:7F76: 65 14        	adc	<L1158+buf_1
 30898 08:7F78: 85 01        	sta	<R0
 30899 08:7F7A: A9 00 00     	lda	#$0
 30900 08:7F7D: 65 16        	adc	<L1158+buf_1+2
 30901 08:7F7F: 85 03        	sta	<R0+2
 30902 08:7F81: D4 03        	pei	<R0+2
 30903 08:7F83: D4 01        	pei	<R0
 30904 08:7F85: 22 D7 00 08  	jsl	~~st_word
 30905                        ;		if (disk_write(pdrv, buf, b_vol, 1) != R
                    ES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Write it to the VBR secto
                    r */
 30906                        	.line	7091
 30907 08:7F89: F4 01 00     	pea	#<$1
 30908 08:7F8C: D4 3E        	pei	<L1158+b_vol_1+2
 30909 08:7F8E: D4 3C        	pei	<L1158+b_vol_1
 30910 08:7F90: D4 16        	pei	<L1158+buf_1+2
 30911 08:7F92: D4 14        	pei	<L1158+buf_1
 30912 08:7F94: D4 1C        	pei	<L1158+pdrv_1
 30913 08:7F96: 22 xx xx xx  	jsl	~~disk_write
 30914 08:7F9A: AA           	tax
 30915 08:7F9B: D0 03        	bne	L1276
 30916 08:7F9D: 82 17 00     	brl	L10751
 30917                        L1276:
 30918                        	.line	7091
 30919                        	.line	7091
 30920 08:7FA0: A5 7A        	lda	<L1157+work_0
 30921 08:7FA2: 05 7C        	ora	<L1157+work_0+2
 30922 08:7FA4: F0 03        	beq	L1277
 30923 08:7FA6: 82 08 00     	brl	L10752
 30924                        L1277:
 30925                        	.line	7091
 30926 08:7FA9: D4 16        	pei	<L1158+buf_1+2
 30927 08:7FAB: D4 14        	pei	<L1158+buf_1
 30928 08:7FAD: 22 70 92 08  	jsl	~~ff_memfree
 30929                        L10752:
 30930                        	.line	7091
 30931 08:7FB1: A9 01 00     	lda	#$1
 30932 08:7FB4: 82 C1 F2     	brl	L1164
 30933                        	.line	7091
 30934                        L10751:
 30935                        	.line	7091
 30936                        ;
 30937                        ;		/* Create FSINFO record if needed */
 30938                        ;		if (fsty == FS_FAT32)
 30939                        	.line	7094
 30940                        ;		{
 30941 08:7FB7: E2 20        	sep	#$20
 30942                        	longa	off
 30943 08:7FB9: A5 12        	lda	<L1158+fsty_1
 30944 08:7FBB: C9 03        	cmp	#<$3
 30945 08:7FBD: C2 20        	rep	#$20
 30946                        	longa	on
  Mon Aug  9 2021 16:52                                                Page 587


 30947 08:7FBF: F0 03        	beq	L1278
 30948 08:7FC1: 82 F9 00     	brl	L10753
 30949                        L1278:
 30950                        	.line	7095
 30951                        ;			disk_write(pdrv, buf, b_vol + 6,
                     1); /* Write backup VBR (VBR + 6) */
 30952                        	.line	7096
 30953 08:7FC4: F4 01 00     	pea	#<$1
 30954 08:7FC7: 18           	clc
 30955 08:7FC8: A9 06 00     	lda	#$6
 30956 08:7FCB: 65 3C        	adc	<L1158+b_vol_1
 30957 08:7FCD: 85 01        	sta	<R0
 30958 08:7FCF: A9 00 00     	lda	#$0
 30959 08:7FD2: 65 3E        	adc	<L1158+b_vol_1+2
 30960 08:7FD4: 85 03        	sta	<R0+2
 30961 08:7FD6: D4 03        	pei	<R0+2
 30962 08:7FD8: D4 01        	pei	<R0
 30963 08:7FDA: D4 16        	pei	<L1158+buf_1+2
 30964 08:7FDC: D4 14        	pei	<L1158+buf_1
 30965 08:7FDE: D4 1C        	pei	<L1158+pdrv_1
 30966 08:7FE0: 22 xx xx xx  	jsl	~~disk_write
 30967                        ;			mem_set(buf, 0, ss);
 30968                        	.line	7097
 30969 08:7FE4: D4 1E        	pei	<L1158+ss_1
 30970 08:7FE6: F4 00 00     	pea	#<$0
 30971 08:7FE9: D4 16        	pei	<L1158+buf_1+2
 30972 08:7FEB: D4 14        	pei	<L1158+buf_1
 30973 08:7FED: 22 DF 01 08  	jsl	~~mem_set
 30974                        ;			st_dword(buf + FSI_LeadSig, 0x41
                    615252);
 30975                        	.line	7098
 30976 08:7FF1: F4 61 41     	pea	#^$41615252
 30977 08:7FF4: F4 52 52     	pea	#<$41615252
 30978 08:7FF7: D4 16        	pei	<L1158+buf_1+2
 30979 08:7FF9: D4 14        	pei	<L1158+buf_1
 30980 08:7FFB: 22 16 01 08  	jsl	~~st_dword
 30981                        ;			st_dword(buf + FSI_StrucSig, 0x6
                    1417272);
 30982                        	.line	7099
 30983 08:7FFF: F4 41 61     	pea	#^$61417272
 30984 08:8002: F4 72 72     	pea	#<$61417272
 30985 08:8005: 18           	clc
 30986 08:8006: A9 E4 01     	lda	#$1e4
 30987 08:8009: 65 14        	adc	<L1158+buf_1
 30988 08:800B: 85 01        	sta	<R0
 30989 08:800D: A9 00 00     	lda	#$0
 30990 08:8010: 65 16        	adc	<L1158+buf_1+2
 30991 08:8012: 85 03        	sta	<R0+2
 30992 08:8014: D4 03        	pei	<R0+2
 30993 08:8016: D4 01        	pei	<R0
 30994 08:8018: 22 16 01 08  	jsl	~~st_dword
 30995                        ;			st_dword(buf + FSI_Free_Count, n
                    _clst - 1); /* Number of free clusters */
 30996                        	.line	7100
 30997 08:801C: 18           	clc
 30998 08:801D: A9 FF FF     	lda	#$ffff
 30999 08:8020: 65 28        	adc	<L1158+n_clst_1
 31000 08:8022: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 588


 31001 08:8024: A9 FF FF     	lda	#$ffff
 31002 08:8027: 65 2A        	adc	<L1158+n_clst_1+2
 31003 08:8029: 85 03        	sta	<R0+2
 31004 08:802B: D4 03        	pei	<R0+2
 31005 08:802D: D4 01        	pei	<R0
 31006 08:802F: 18           	clc
 31007 08:8030: A9 E8 01     	lda	#$1e8
 31008 08:8033: 65 14        	adc	<L1158+buf_1
 31009 08:8035: 85 05        	sta	<R1
 31010 08:8037: A9 00 00     	lda	#$0
 31011 08:803A: 65 16        	adc	<L1158+buf_1+2
 31012 08:803C: 85 07        	sta	<R1+2
 31013 08:803E: D4 07        	pei	<R1+2
 31014 08:8040: D4 05        	pei	<R1
 31015 08:8042: 22 16 01 08  	jsl	~~st_dword
 31016                        ;			st_dword(buf + FSI_Nxt_Free, 2);
                     /* Last allocated cluster# */
 31017                        	.line	7101
 31018 08:8046: F4 00 00     	pea	#^$2
 31019 08:8049: F4 02 00     	pea	#<$2
 31020 08:804C: 18           	clc
 31021 08:804D: A9 EC 01     	lda	#$1ec
 31022 08:8050: 65 14        	adc	<L1158+buf_1
 31023 08:8052: 85 01        	sta	<R0
 31024 08:8054: A9 00 00     	lda	#$0
 31025 08:8057: 65 16        	adc	<L1158+buf_1+2
 31026 08:8059: 85 03        	sta	<R0+2
 31027 08:805B: D4 03        	pei	<R0+2
 31028 08:805D: D4 01        	pei	<R0
 31029 08:805F: 22 16 01 08  	jsl	~~st_dword
 31030                        ;			st_word(buf + BS_55AA, 0xAA55);
 31031                        	.line	7102
 31032 08:8063: F4 55 AA     	pea	#<$aa55
 31033 08:8066: 18           	clc
 31034 08:8067: A9 FE 01     	lda	#$1fe
 31035 08:806A: 65 14        	adc	<L1158+buf_1
 31036 08:806C: 85 01        	sta	<R0
 31037 08:806E: A9 00 00     	lda	#$0
 31038 08:8071: 65 16        	adc	<L1158+buf_1+2
 31039 08:8073: 85 03        	sta	<R0+2
 31040 08:8075: D4 03        	pei	<R0+2
 31041 08:8077: D4 01        	pei	<R0
 31042 08:8079: 22 D7 00 08  	jsl	~~st_word
 31043                        ;			disk_write(pdrv, buf, b_vol + 7,
                     1); /* Write backup FSINFO (VBR + 7) */
 31044                        	.line	7103
 31045 08:807D: F4 01 00     	pea	#<$1
 31046 08:8080: 18           	clc
 31047 08:8081: A9 07 00     	lda	#$7
 31048 08:8084: 65 3C        	adc	<L1158+b_vol_1
 31049 08:8086: 85 01        	sta	<R0
 31050 08:8088: A9 00 00     	lda	#$0
 31051 08:808B: 65 3E        	adc	<L1158+b_vol_1+2
 31052 08:808D: 85 03        	sta	<R0+2
 31053 08:808F: D4 03        	pei	<R0+2
 31054 08:8091: D4 01        	pei	<R0
 31055 08:8093: D4 16        	pei	<L1158+buf_1+2
 31056 08:8095: D4 14        	pei	<L1158+buf_1
  Mon Aug  9 2021 16:52                                                Page 589


 31057 08:8097: D4 1C        	pei	<L1158+pdrv_1
 31058 08:8099: 22 xx xx xx  	jsl	~~disk_write
 31059                        ;			disk_write(pdrv, buf, b_vol + 1,
                     1); /* Write original FSINFO (VBR + 1) */
 31060                        	.line	7104
 31061 08:809D: F4 01 00     	pea	#<$1
 31062 08:80A0: 18           	clc
 31063 08:80A1: A9 01 00     	lda	#$1
 31064 08:80A4: 65 3C        	adc	<L1158+b_vol_1
 31065 08:80A6: 85 01        	sta	<R0
 31066 08:80A8: A9 00 00     	lda	#$0
 31067 08:80AB: 65 3E        	adc	<L1158+b_vol_1+2
 31068 08:80AD: 85 03        	sta	<R0+2
 31069 08:80AF: D4 03        	pei	<R0+2
 31070 08:80B1: D4 01        	pei	<R0
 31071 08:80B3: D4 16        	pei	<L1158+buf_1+2
 31072 08:80B5: D4 14        	pei	<L1158+buf_1
 31073 08:80B7: D4 1C        	pei	<L1158+pdrv_1
 31074 08:80B9: 22 xx xx xx  	jsl	~~disk_write
 31075                        ;		}
 31076                        	.line	7105
 31077                        ;
 31078                        ;		/* Initialize FAT area */
 31079                        ;		mem_set(buf, 0, sz_buf * ss);
 31080                        L10753:
 31081                        	.line	7108
 31082 08:80BD: A0 00 00     	ldy	#$0
 31083 08:80C0: A5 1E        	lda	<L1158+ss_1
 31084 08:80C2: 10 01        	bpl	L1279
 31085 08:80C4: 88           	dey
 31086                        L1279:
 31087 08:80C5: 85 01        	sta	<R0
 31088 08:80C7: 84 03        	sty	<R0+2
 31089 08:80C9: D4 22        	pei	<L1158+sz_buf_1+2
 31090 08:80CB: D4 20        	pei	<L1158+sz_buf_1
 31091 08:80CD: D4 03        	pei	<R0+2
 31092 08:80CF: D4 01        	pei	<R0
 31093                        	xref	~~~lmul
 31094 08:80D1: 22 xx xx xx  	jsl	~~~lmul
 31095 08:80D5: 85 01        	sta	<R0
 31096 08:80D7: 86 03        	stx	<R0+2
 31097 08:80D9: D4 01        	pei	<R0
 31098 08:80DB: F4 00 00     	pea	#<$0
 31099 08:80DE: D4 16        	pei	<L1158+buf_1+2
 31100 08:80E0: D4 14        	pei	<L1158+buf_1
 31101 08:80E2: 22 DF 01 08  	jsl	~~mem_set
 31102                        ;		sect = b_fat; /* FAT start sector */
 31103                        	.line	7109
 31104 08:80E6: A5 40        	lda	<L1158+b_fat_1
 31105 08:80E8: 85 48        	sta	<L1158+sect_1
 31106 08:80EA: A5 42        	lda	<L1158+b_fat_1+2
 31107 08:80EC: 85 4A        	sta	<L1158+sect_1+2
 31108                        ;		for (i = 0; i < n_fat; i++)
 31109                        	.line	7110
 31110 08:80EE: 64 68        	stz	<L1158+i_1
 31111 08:80F0: 82 0F 01     	brl	L10757
 31112                        L10756:
 31113                        ;		{ /* Initialize FATs each */
  Mon Aug  9 2021 16:52                                                Page 590


 31114                        	.line	7111
 31115                        ;			if (fsty == FS_FAT32)
 31116                        	.line	7112
 31117                        ;			{
 31118 08:80F3: E2 20        	sep	#$20
 31119                        	longa	off
 31120 08:80F5: A5 12        	lda	<L1158+fsty_1
 31121 08:80F7: C9 03        	cmp	#<$3
 31122 08:80F9: C2 20        	rep	#$20
 31123                        	longa	on
 31124 08:80FB: F0 03        	beq	L1280
 31125 08:80FD: 82 4B 00     	brl	L10758
 31126                        L1280:
 31127                        	.line	7113
 31128                        ;				st_dword(buf + 0, 0xFFFF
                    FFF8); /* FAT[0] */
 31129                        	.line	7114
 31130 08:8100: F4 FF FF     	pea	#^$fffffff8
 31131 08:8103: F4 F8 FF     	pea	#<$fffffff8
 31132 08:8106: D4 16        	pei	<L1158+buf_1+2
 31133 08:8108: D4 14        	pei	<L1158+buf_1
 31134 08:810A: 22 16 01 08  	jsl	~~st_dword
 31135                        ;				st_dword(buf + 4, 0xFFFF
                    FFFF); /* FAT[1] */
 31136                        	.line	7115
 31137 08:810E: F4 FF FF     	pea	#^$ffffffff
 31138 08:8111: F4 FF FF     	pea	#<$ffffffff
 31139 08:8114: 18           	clc
 31140 08:8115: A9 04 00     	lda	#$4
 31141 08:8118: 65 14        	adc	<L1158+buf_1
 31142 08:811A: 85 01        	sta	<R0
 31143 08:811C: A9 00 00     	lda	#$0
 31144 08:811F: 65 16        	adc	<L1158+buf_1+2
 31145 08:8121: 85 03        	sta	<R0+2
 31146 08:8123: D4 03        	pei	<R0+2
 31147 08:8125: D4 01        	pei	<R0
 31148 08:8127: 22 16 01 08  	jsl	~~st_dword
 31149                        ;				st_dword(buf + 8, 0x0FFF
                    FFFF); /* FAT[2] (root directory) */
 31150                        	.line	7116
 31151 08:812B: F4 FF 0F     	pea	#^$fffffff
 31152 08:812E: F4 FF FF     	pea	#<$fffffff
 31153 08:8131: 18           	clc
 31154 08:8132: A9 08 00     	lda	#$8
 31155 08:8135: 65 14        	adc	<L1158+buf_1
 31156 08:8137: 85 01        	sta	<R0
 31157 08:8139: A9 00 00     	lda	#$0
 31158 08:813C: 65 16        	adc	<L1158+buf_1+2
 31159 08:813E: 85 03        	sta	<R0+2
 31160 08:8140: D4 03        	pei	<R0+2
 31161 08:8142: D4 01        	pei	<R0
 31162 08:8144: 22 16 01 08  	jsl	~~st_dword
 31163                        ;			}
 31164                        	.line	7117
 31165                        ;			else
 31166 08:8148: 82 2D 00     	brl	L10759
 31167                        L10758:
 31168                        ;			{
  Mon Aug  9 2021 16:52                                                Page 591


 31169                        	.line	7119
 31170                        ;				st_dword(buf + 0, (fsty 
                    == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8); /* FAT[0] and FAT[1] 
                    */
 31171                        	.line	7120
 31172 08:814B: E2 20        	sep	#$20
 31173                        	longa	off
 31174 08:814D: A5 12        	lda	<L1158+fsty_1
 31175 08:814F: C9 01        	cmp	#<$1
 31176 08:8151: C2 20        	rep	#$20
 31177                        	longa	on
 31178 08:8153: F0 03        	beq	L1282
 31179 08:8155: 82 09 00     	brl	L1281
 31180                        L1282:
 31181 08:8158: A9 FF 00     	lda	#$ff
 31182 08:815B: AA           	tax
 31183 08:815C: A9 F8 FF     	lda	#$fff8
 31184 08:815F: 80 07        	bra	L1283
 31185                        L1281:
 31186 08:8161: A9 FF FF     	lda	#$ffff
 31187 08:8164: AA           	tax
 31188 08:8165: A9 F8 FF     	lda	#$fff8
 31189                        L1283:
 31190 08:8168: 85 01        	sta	<R0
 31191 08:816A: 86 03        	stx	<R0+2
 31192 08:816C: D4 03        	pei	<R0+2
 31193 08:816E: D4 01        	pei	<R0
 31194 08:8170: D4 16        	pei	<L1158+buf_1+2
 31195 08:8172: D4 14        	pei	<L1158+buf_1
 31196 08:8174: 22 16 01 08  	jsl	~~st_dword
 31197                        ;			}
 31198                        	.line	7121
 31199                        L10759:
 31200                        ;			nsect = sz_fat; /* Number of FAT
                     sectors */
 31201                        	.line	7122
 31202 08:8178: A5 58        	lda	<L1158+sz_fat_1
 31203 08:817A: 85 30        	sta	<L1158+nsect_1
 31204 08:817C: A5 5A        	lda	<L1158+sz_fat_1+2
 31205 08:817E: 85 32        	sta	<L1158+nsect_1+2
 31206                        ;			do
 31207                        	.line	7123
 31208                        L10762:
 31209                        ;			{ /* Fill FAT sectors */
 31210                        	.line	7124
 31211                        ;				n = (nsect > sz_buf) ? s
                    z_buf : nsect;
 31212                        	.line	7125
 31213 08:8180: A5 20        	lda	<L1158+sz_buf_1
 31214 08:8182: C5 30        	cmp	<L1158+nsect_1
 31215 08:8184: A5 22        	lda	<L1158+sz_buf_1+2
 31216 08:8186: E5 32        	sbc	<L1158+nsect_1+2
 31217 08:8188: 90 03        	bcc	L1285
 31218 08:818A: 82 06 00     	brl	L1284
 31219                        L1285:
 31220 08:818D: A6 22        	ldx	<L1158+sz_buf_1+2
 31221 08:818F: A5 20        	lda	<L1158+sz_buf_1
 31222 08:8191: 80 04        	bra	L1286
  Mon Aug  9 2021 16:52                                                Page 592


 31223                        L1284:
 31224 08:8193: A6 32        	ldx	<L1158+nsect_1+2
 31225 08:8195: A5 30        	lda	<L1158+nsect_1
 31226                        L1286:
 31227 08:8197: 85 01        	sta	<R0
 31228 08:8199: 86 03        	stx	<R0+2
 31229 08:819B: A5 01        	lda	<R0
 31230 08:819D: 85 34        	sta	<L1158+n_1
 31231 08:819F: A5 03        	lda	<R0+2
 31232 08:81A1: 85 36        	sta	<L1158+n_1+2
 31233                        ;				if (disk_write(pdrv, buf
                    , sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 31234                        	.line	7126
 31235 08:81A3: D4 34        	pei	<L1158+n_1
 31236 08:81A5: D4 4A        	pei	<L1158+sect_1+2
 31237 08:81A7: D4 48        	pei	<L1158+sect_1
 31238 08:81A9: D4 16        	pei	<L1158+buf_1+2
 31239 08:81AB: D4 14        	pei	<L1158+buf_1
 31240 08:81AD: D4 1C        	pei	<L1158+pdrv_1
 31241 08:81AF: 22 xx xx xx  	jsl	~~disk_write
 31242 08:81B3: AA           	tax
 31243 08:81B4: D0 03        	bne	L1287
 31244 08:81B6: 82 17 00     	brl	L10763
 31245                        L1287:
 31246                        	.line	7126
 31247                        	.line	7126
 31248 08:81B9: A5 7A        	lda	<L1157+work_0
 31249 08:81BB: 05 7C        	ora	<L1157+work_0+2
 31250 08:81BD: F0 03        	beq	L1288
 31251 08:81BF: 82 08 00     	brl	L10764
 31252                        L1288:
 31253                        	.line	7126
 31254 08:81C2: D4 16        	pei	<L1158+buf_1+2
 31255 08:81C4: D4 14        	pei	<L1158+buf_1
 31256 08:81C6: 22 70 92 08  	jsl	~~ff_memfree
 31257                        L10764:
 31258                        	.line	7126
 31259 08:81CA: A9 01 00     	lda	#$1
 31260 08:81CD: 82 A8 F0     	brl	L1164
 31261                        	.line	7126
 31262                        L10763:
 31263                        	.line	7126
 31264                        ;				mem_set(buf, 0, ss); /* 
                    Rest of FAT all are cleared */
 31265                        	.line	7127
 31266 08:81D0: D4 1E        	pei	<L1158+ss_1
 31267 08:81D2: F4 00 00     	pea	#<$0
 31268 08:81D5: D4 16        	pei	<L1158+buf_1+2
 31269 08:81D7: D4 14        	pei	<L1158+buf_1
 31270 08:81D9: 22 DF 01 08  	jsl	~~mem_set
 31271                        ;				sect += n; nsect -= n;
 31272                        	.line	7128
 31273 08:81DD: 18           	clc
 31274 08:81DE: A5 48        	lda	<L1158+sect_1
 31275 08:81E0: 65 34        	adc	<L1158+n_1
 31276 08:81E2: 85 48        	sta	<L1158+sect_1
 31277 08:81E4: A5 4A        	lda	<L1158+sect_1+2
 31278 08:81E6: 65 36        	adc	<L1158+n_1+2
  Mon Aug  9 2021 16:52                                                Page 593


 31279 08:81E8: 85 4A        	sta	<L1158+sect_1+2
 31280                        	.line	7128
 31281 08:81EA: 38           	sec
 31282 08:81EB: A5 30        	lda	<L1158+nsect_1
 31283 08:81ED: E5 34        	sbc	<L1158+n_1
 31284 08:81EF: 85 30        	sta	<L1158+nsect_1
 31285 08:81F1: A5 32        	lda	<L1158+nsect_1+2
 31286 08:81F3: E5 36        	sbc	<L1158+n_1+2
 31287 08:81F5: 85 32        	sta	<L1158+nsect_1+2
 31288                        ;			}while (nsect);
 31289                        	.line	7129
 31290                        L10760:
 31291 08:81F7: A5 30        	lda	<L1158+nsect_1
 31292 08:81F9: 05 32        	ora	<L1158+nsect_1+2
 31293 08:81FB: F0 03        	beq	L1289
 31294 08:81FD: 82 80 FF     	brl	L10762
 31295                        L1289:
 31296                        L10761:
 31297                        ;		}
 31298                        	.line	7130
 31299                        L10754:
 31300 08:8200: E6 68        	inc	<L1158+i_1
 31301                        L10757:
 31302 08:8202: A5 68        	lda	<L1158+i_1
 31303 08:8204: C5 64        	cmp	<L1158+n_fat_1
 31304 08:8206: B0 03        	bcs	L1290
 31305 08:8208: 82 E8 FE     	brl	L10756
 31306                        L1290:
 31307                        L10755:
 31308                        ;
 31309                        ;		/* Initialize root directory (fill with 
                    zero) */
 31310                        ;		nsect = (fsty == FS_FAT32) ? pau : sz_di
                    r; /* Number of root directory sectors */
 31311                        	.line	7133
 31312 08:820B: E2 20        	sep	#$20
 31313                        	longa	off
 31314 08:820D: A5 12        	lda	<L1158+fsty_1
 31315 08:820F: C9 03        	cmp	#<$3
 31316 08:8211: C2 20        	rep	#$20
 31317                        	longa	on
 31318 08:8213: F0 03        	beq	L1292
 31319 08:8215: 82 06 00     	brl	L1291
 31320                        L1292:
 31321 08:8218: A6 2E        	ldx	<L1158+pau_1+2
 31322 08:821A: A5 2C        	lda	<L1158+pau_1
 31323 08:821C: 80 04        	bra	L1293
 31324                        L1291:
 31325 08:821E: A6 5E        	ldx	<L1158+sz_dir_1+2
 31326 08:8220: A5 5C        	lda	<L1158+sz_dir_1
 31327                        L1293:
 31328 08:8222: 85 01        	sta	<R0
 31329 08:8224: 86 03        	stx	<R0+2
 31330 08:8226: A5 01        	lda	<R0
 31331 08:8228: 85 30        	sta	<L1158+nsect_1
 31332 08:822A: A5 03        	lda	<R0+2
 31333 08:822C: 85 32        	sta	<L1158+nsect_1+2
 31334                        ;		do
  Mon Aug  9 2021 16:52                                                Page 594


 31335                        	.line	7134
 31336                        L10767:
 31337                        ;		{
 31338                        	.line	7135
 31339                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;
 31340                        	.line	7136
 31341 08:822E: A5 20        	lda	<L1158+sz_buf_1
 31342 08:8230: C5 30        	cmp	<L1158+nsect_1
 31343 08:8232: A5 22        	lda	<L1158+sz_buf_1+2
 31344 08:8234: E5 32        	sbc	<L1158+nsect_1+2
 31345 08:8236: 90 03        	bcc	L1295
 31346 08:8238: 82 06 00     	brl	L1294
 31347                        L1295:
 31348 08:823B: A6 22        	ldx	<L1158+sz_buf_1+2
 31349 08:823D: A5 20        	lda	<L1158+sz_buf_1
 31350 08:823F: 80 04        	bra	L1296
 31351                        L1294:
 31352 08:8241: A6 32        	ldx	<L1158+nsect_1+2
 31353 08:8243: A5 30        	lda	<L1158+nsect_1
 31354                        L1296:
 31355 08:8245: 85 01        	sta	<R0
 31356 08:8247: 86 03        	stx	<R0+2
 31357 08:8249: A5 01        	lda	<R0
 31358 08:824B: 85 34        	sta	<L1158+n_1
 31359 08:824D: A5 03        	lda	<R0+2
 31360 08:824F: 85 36        	sta	<L1158+n_1+2
 31361                        ;			if (disk_write(pdrv, buf, sect, 
                    (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 31362                        	.line	7137
 31363 08:8251: D4 34        	pei	<L1158+n_1
 31364 08:8253: D4 4A        	pei	<L1158+sect_1+2
 31365 08:8255: D4 48        	pei	<L1158+sect_1
 31366 08:8257: D4 16        	pei	<L1158+buf_1+2
 31367 08:8259: D4 14        	pei	<L1158+buf_1
 31368 08:825B: D4 1C        	pei	<L1158+pdrv_1
 31369 08:825D: 22 xx xx xx  	jsl	~~disk_write
 31370 08:8261: AA           	tax
 31371 08:8262: D0 03        	bne	L1297
 31372 08:8264: 82 17 00     	brl	L10768
 31373                        L1297:
 31374                        	.line	7137
 31375                        	.line	7137
 31376 08:8267: A5 7A        	lda	<L1157+work_0
 31377 08:8269: 05 7C        	ora	<L1157+work_0+2
 31378 08:826B: F0 03        	beq	L1298
 31379 08:826D: 82 08 00     	brl	L10769
 31380                        L1298:
 31381                        	.line	7137
 31382 08:8270: D4 16        	pei	<L1158+buf_1+2
 31383 08:8272: D4 14        	pei	<L1158+buf_1
 31384 08:8274: 22 70 92 08  	jsl	~~ff_memfree
 31385                        L10769:
 31386                        	.line	7137
 31387 08:8278: A9 01 00     	lda	#$1
 31388 08:827B: 82 FA EF     	brl	L1164
 31389                        	.line	7137
 31390                        L10768:
  Mon Aug  9 2021 16:52                                                Page 595


 31391                        	.line	7137
 31392                        ;			sect += n; nsect -= n;
 31393                        	.line	7138
 31394 08:827E: 18           	clc
 31395 08:827F: A5 48        	lda	<L1158+sect_1
 31396 08:8281: 65 34        	adc	<L1158+n_1
 31397 08:8283: 85 48        	sta	<L1158+sect_1
 31398 08:8285: A5 4A        	lda	<L1158+sect_1+2
 31399 08:8287: 65 36        	adc	<L1158+n_1+2
 31400 08:8289: 85 4A        	sta	<L1158+sect_1+2
 31401                        	.line	7138
 31402 08:828B: 38           	sec
 31403 08:828C: A5 30        	lda	<L1158+nsect_1
 31404 08:828E: E5 34        	sbc	<L1158+n_1
 31405 08:8290: 85 30        	sta	<L1158+nsect_1
 31406 08:8292: A5 32        	lda	<L1158+nsect_1+2
 31407 08:8294: E5 36        	sbc	<L1158+n_1+2
 31408 08:8296: 85 32        	sta	<L1158+nsect_1+2
 31409                        ;		}while (nsect);
 31410                        	.line	7139
 31411                        L10765:
 31412 08:8298: A5 30        	lda	<L1158+nsect_1
 31413 08:829A: 05 32        	ora	<L1158+nsect_1+2
 31414 08:829C: F0 03        	beq	L1299
 31415 08:829E: 82 8D FF     	brl	L10767
 31416                        L1299:
 31417                        L10766:
 31418                        ;	}
 31419                        	.line	7140
 31420                        ;
 31421                        ;	/* A FAT volume has been created here */
 31422                        ;
 31423                        ;	/* Determine system ID in the MBR partition tabl
                    e */
 31424                        ;	if (FF_FS_EXFAT && fsty == FS_EXFAT)
 31425                        	.line	7145
 31426                        ;	{
 31427 08:82A1: 82 18 00     	brl	L10770
 31428 08:82A4: E2 20        	sep	#$20
 31429                        	longa	off
 31430 08:82A6: A5 12        	lda	<L1158+fsty_1
 31431 08:82A8: C9 04        	cmp	#<$4
 31432 08:82AA: C2 20        	rep	#$20
 31433                        	longa	on
 31434 08:82AC: F0 03        	beq	L1300
 31435 08:82AE: 82 0B 00     	brl	L10770
 31436                        L1300:
 31437                        	.line	7146
 31438                        ;		sys = 0x07; /* exFAT */
 31439                        	.line	7147
 31440 08:82B1: E2 20        	sep	#$20
 31441                        	longa	off
 31442 08:82B3: A9 07        	lda	#$7
 31443 08:82B5: 85 13        	sta	<L1158+sys_1
 31444 08:82B7: C2 20        	rep	#$20
 31445                        	longa	on
 31446                        ;	}
 31447                        	.line	7148
  Mon Aug  9 2021 16:52                                                Page 596


 31448                        ;	else
 31449 08:82B9: 82 51 00     	brl	L10771
 31450                        L10770:
 31451                        ;	{
 31452                        	.line	7150
 31453                        ;		if (fsty == FS_FAT32)
 31454                        	.line	7151
 31455                        ;		{
 31456 08:82BC: E2 20        	sep	#$20
 31457                        	longa	off
 31458 08:82BE: A5 12        	lda	<L1158+fsty_1
 31459 08:82C0: C9 03        	cmp	#<$3
 31460 08:82C2: C2 20        	rep	#$20
 31461                        	longa	on
 31462 08:82C4: F0 03        	beq	L1301
 31463 08:82C6: 82 0B 00     	brl	L10772
 31464                        L1301:
 31465                        	.line	7152
 31466                        ;			sys = 0x0C; /* FAT32X */
 31467                        	.line	7153
 31468 08:82C9: E2 20        	sep	#$20
 31469                        	longa	off
 31470 08:82CB: A9 0C        	lda	#$c
 31471 08:82CD: 85 13        	sta	<L1158+sys_1
 31472 08:82CF: C2 20        	rep	#$20
 31473                        	longa	on
 31474                        ;		}
 31475                        	.line	7154
 31476                        ;		else
 31477 08:82D1: 82 39 00     	brl	L10773
 31478                        L10772:
 31479                        ;		{
 31480                        	.line	7156
 31481                        ;			if (sz_vol >= 0x10000)
 31482                        	.line	7157
 31483                        ;			{
 31484 08:82D4: A5 38        	lda	<L1158+sz_vol_1
 31485 08:82D6: C9 00 00     	cmp	#<$10000
 31486 08:82D9: A5 3A        	lda	<L1158+sz_vol_1+2
 31487 08:82DB: E9 01 00     	sbc	#^$10000
 31488 08:82DE: B0 03        	bcs	L1302
 31489 08:82E0: 82 0B 00     	brl	L10774
 31490                        L1302:
 31491                        	.line	7158
 31492                        ;				sys = 0x06; /* FAT12/16 
                    (large) */
 31493                        	.line	7159
 31494 08:82E3: E2 20        	sep	#$20
 31495                        	longa	off
 31496 08:82E5: A9 06        	lda	#$6
 31497 08:82E7: 85 13        	sta	<L1158+sys_1
 31498 08:82E9: C2 20        	rep	#$20
 31499                        	longa	on
 31500                        ;			}
 31501                        	.line	7160
 31502                        ;			else
 31503 08:82EB: 82 1F 00     	brl	L10775
 31504                        L10774:
  Mon Aug  9 2021 16:52                                                Page 597


 31505                        ;			{
 31506                        	.line	7162
 31507                        ;				sys = (fsty == FS_FAT16)
                     ? 0x04 : 0x01; /* FAT16 : FAT12 */
 31508                        	.line	7163
 31509 08:82EE: E2 20        	sep	#$20
 31510                        	longa	off
 31511 08:82F0: A5 12        	lda	<L1158+fsty_1
 31512 08:82F2: C9 02        	cmp	#<$2
 31513 08:82F4: C2 20        	rep	#$20
 31514                        	longa	on
 31515 08:82F6: F0 03        	beq	L1304
 31516 08:82F8: 82 05 00     	brl	L1303
 31517                        L1304:
 31518 08:82FB: A9 04 00     	lda	#$4
 31519 08:82FE: 80 03        	bra	L1305
 31520                        L1303:
 31521 08:8300: A9 01 00     	lda	#$1
 31522                        L1305:
 31523 08:8303: 85 01        	sta	<R0
 31524 08:8305: E2 20        	sep	#$20
 31525                        	longa	off
 31526 08:8307: A5 01        	lda	<R0
 31527 08:8309: 85 13        	sta	<L1158+sys_1
 31528 08:830B: C2 20        	rep	#$20
 31529                        	longa	on
 31530                        ;			}
 31531                        	.line	7164
 31532                        L10775:
 31533                        ;		}
 31534                        	.line	7165
 31535                        L10773:
 31536                        ;	}
 31537                        	.line	7166
 31538                        L10771:
 31539                        ;
 31540                        ;	/* Update partition information */
 31541                        ;	if (FF_MULTI_PARTITION && ipart != 0)
 31542                        	.line	7169
 31543                        ;	{ /* Volume is in the existing partition */
 31544 08:830D: 82 9E 00     	brl	L10776
 31545 08:8310: A5 1D        	lda	<L1158+ipart_1
 31546 08:8312: 29 FF 00     	and	#$ff
 31547 08:8315: D0 03        	bne	L1306
 31548 08:8317: 82 94 00     	brl	L10776
 31549                        L1306:
 31550                        	.line	7170
 31551                        ;		if (!FF_LBA64 || !(fsopt & 0x80))
 31552                        	.line	7171
 31553                        ;		{
 31554 08:831A: 82 0D 00     	brl	L1307
 31555 08:831D: E2 20        	sep	#$20
 31556                        	longa	off
 31557 08:831F: A5 11        	lda	<L1158+fsopt_1
 31558 08:8321: 29 80        	and	#<$80
 31559 08:8323: C2 20        	rep	#$20
 31560                        	longa	on
 31561 08:8325: F0 03        	beq	L1308
  Mon Aug  9 2021 16:52                                                Page 598


 31562 08:8327: 82 81 00     	brl	L10777
 31563                        L1308:
 31564                        L1307:
 31565                        	.line	7172
 31566                        ;			/* Update system ID in the parti
                    tion table */
 31567                        ;			if (disk_read(pdrv, buf, 0, 1) !
                    = RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Read the MBR */
 31568                        	.line	7174
 31569 08:832A: F4 01 00     	pea	#<$1
 31570 08:832D: F4 00 00     	pea	#^$0
 31571 08:8330: F4 00 00     	pea	#<$0
 31572 08:8333: D4 16        	pei	<L1158+buf_1+2
 31573 08:8335: D4 14        	pei	<L1158+buf_1
 31574 08:8337: D4 1C        	pei	<L1158+pdrv_1
 31575 08:8339: 22 xx xx xx  	jsl	~~disk_read
 31576 08:833D: AA           	tax
 31577 08:833E: D0 03        	bne	L1309
 31578 08:8340: 82 17 00     	brl	L10778
 31579                        L1309:
 31580                        	.line	7174
 31581                        	.line	7174
 31582 08:8343: A5 7A        	lda	<L1157+work_0
 31583 08:8345: 05 7C        	ora	<L1157+work_0+2
 31584 08:8347: F0 03        	beq	L1310
 31585 08:8349: 82 08 00     	brl	L10779
 31586                        L1310:
 31587                        	.line	7174
 31588 08:834C: D4 16        	pei	<L1158+buf_1+2
 31589 08:834E: D4 14        	pei	<L1158+buf_1
 31590 08:8350: 22 70 92 08  	jsl	~~ff_memfree
 31591                        L10779:
 31592                        	.line	7174
 31593 08:8354: A9 01 00     	lda	#$1
 31594 08:8357: 82 1E EF     	brl	L1164
 31595                        	.line	7174
 31596                        L10778:
 31597                        	.line	7174
 31598                        ;			buf[MBR_Table + (ipart - 1) * SZ
                    _PTE + PTE_System] = sys; /* Set system ID */
 31599                        	.line	7175
 31600 08:835A: A5 1D        	lda	<L1158+ipart_1
 31601 08:835C: 29 FF 00     	and	#$ff
 31602 08:835F: 85 05        	sta	<R1
 31603 08:8361: A5 05        	lda	<R1
 31604 08:8363: 0A           	asl	A
 31605 08:8364: 0A           	asl	A
 31606 08:8365: 0A           	asl	A
 31607 08:8366: 0A           	asl	A
 31608 08:8367: 85 01        	sta	<R0
 31609 08:8369: 18           	clc
 31610 08:836A: A9 B2 01     	lda	#$1b2
 31611 08:836D: 65 01        	adc	<R0
 31612 08:836F: 85 05        	sta	<R1
 31613 08:8371: E2 20        	sep	#$20
 31614                        	longa	off
 31615 08:8373: A5 13        	lda	<L1158+sys_1
 31616 08:8375: A4 05        	ldy	<R1
  Mon Aug  9 2021 16:52                                                Page 599


 31617 08:8377: 97 14        	sta	[<L1158+buf_1],Y
 31618 08:8379: C2 20        	rep	#$20
 31619                        	longa	on
 31620                        ;			if (disk_write(pdrv, buf, 0, 1) 
                    != RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Write it back to the 
                    MBR */
 31621                        	.line	7176
 31622 08:837B: F4 01 00     	pea	#<$1
 31623 08:837E: F4 00 00     	pea	#^$0
 31624 08:8381: F4 00 00     	pea	#<$0
 31625 08:8384: D4 16        	pei	<L1158+buf_1+2
 31626 08:8386: D4 14        	pei	<L1158+buf_1
 31627 08:8388: D4 1C        	pei	<L1158+pdrv_1
 31628 08:838A: 22 xx xx xx  	jsl	~~disk_write
 31629 08:838E: AA           	tax
 31630 08:838F: D0 03        	bne	L1311
 31631 08:8391: 82 17 00     	brl	L10780
 31632                        L1311:
 31633                        	.line	7176
 31634                        	.line	7176
 31635 08:8394: A5 7A        	lda	<L1157+work_0
 31636 08:8396: 05 7C        	ora	<L1157+work_0+2
 31637 08:8398: F0 03        	beq	L1312
 31638 08:839A: 82 08 00     	brl	L10781
 31639                        L1312:
 31640                        	.line	7176
 31641 08:839D: D4 16        	pei	<L1158+buf_1+2
 31642 08:839F: D4 14        	pei	<L1158+buf_1
 31643 08:83A1: 22 70 92 08  	jsl	~~ff_memfree
 31644                        L10781:
 31645                        	.line	7176
 31646 08:83A5: A9 01 00     	lda	#$1
 31647 08:83A8: 82 CD EE     	brl	L1164
 31648                        	.line	7176
 31649                        L10780:
 31650                        	.line	7176
 31651                        ;		}
 31652                        	.line	7177
 31653                        ;	}
 31654                        L10777:
 31655                        	.line	7178
 31656                        ;	else
 31657 08:83AB: 82 51 00     	brl	L10782
 31658                        L10776:
 31659                        ;	{ /* Volume as a new single partition */
 31660                        	.line	7180
 31661                        ;		if (!(fsopt & FM_SFD))
 31662                        	.line	7181
 31663                        ;		{ /* Create partition table if not in SF
                    D */
 31664 08:83AE: E2 20        	sep	#$20
 31665                        	longa	off
 31666 08:83B0: A5 11        	lda	<L1158+fsopt_1
 31667 08:83B2: 29 08        	and	#<$8
 31668 08:83B4: C2 20        	rep	#$20
 31669                        	longa	on
 31670 08:83B6: F0 03        	beq	L1313
 31671 08:83B8: 82 44 00     	brl	L10783
  Mon Aug  9 2021 16:52                                                Page 600


 31672                        L1313:
 31673                        	.line	7182
 31674                        ;			lba[0] = sz_vol, lba[1] = 0;
 31675                        	.line	7183
 31676 08:83BB: A5 38        	lda	<L1158+sz_vol_1
 31677 08:83BD: 85 4C        	sta	<L1158+lba_1
 31678 08:83BF: A5 3A        	lda	<L1158+sz_vol_1+2
 31679 08:83C1: 85 4E        	sta	<L1158+lba_1+2
 31680 08:83C3: 64 50        	stz	<L1158+lba_1+4
 31681 08:83C5: 64 52        	stz	<L1158+lba_1+6
 31682                        ;			fr = create_partition(pdrv, lba,
                     sys, buf);
 31683                        	.line	7184
 31684 08:83C7: D4 16        	pei	<L1158+buf_1+2
 31685 08:83C9: D4 14        	pei	<L1158+buf_1
 31686 08:83CB: A5 13        	lda	<L1158+sys_1
 31687 08:83CD: 29 FF 00     	and	#$ff
 31688 08:83D0: 48           	pha
 31689 08:83D1: F4 00 00     	pea	#0
 31690 08:83D4: 18           	clc
 31691 08:83D5: 7B           	tdc
 31692 08:83D6: 69 4C 00     	adc	#<L1158+lba_1
 31693 08:83D9: 48           	pha
 31694 08:83DA: D4 1C        	pei	<L1158+pdrv_1
 31695 08:83DC: 22 F5 6D 08  	jsl	~~create_partition
 31696 08:83E0: 85 6D        	sta	<L1158+fr_1
 31697                        ;			if (fr != FR_OK) LEAVE_MKFS(fr);
 31698                        	.line	7185
 31699 08:83E2: A5 6D        	lda	<L1158+fr_1
 31700 08:83E4: D0 03        	bne	L1314
 31701 08:83E6: 82 16 00     	brl	L10784
 31702                        L1314:
 31703                        	.line	7185
 31704                        	.line	7185
 31705 08:83E9: A5 7A        	lda	<L1157+work_0
 31706 08:83EB: 05 7C        	ora	<L1157+work_0+2
 31707 08:83ED: F0 03        	beq	L1315
 31708 08:83EF: 82 08 00     	brl	L10785
 31709                        L1315:
 31710                        	.line	7185
 31711 08:83F2: D4 16        	pei	<L1158+buf_1+2
 31712 08:83F4: D4 14        	pei	<L1158+buf_1
 31713 08:83F6: 22 70 92 08  	jsl	~~ff_memfree
 31714                        L10785:
 31715                        	.line	7185
 31716 08:83FA: A5 6D        	lda	<L1158+fr_1
 31717 08:83FC: 82 79 EE     	brl	L1164
 31718                        	.line	7185
 31719                        L10784:
 31720                        	.line	7185
 31721                        ;		}
 31722                        	.line	7186
 31723                        ;	}
 31724                        L10783:
 31725                        	.line	7187
 31726                        L10782:
 31727                        ;
 31728                        ;	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LE
  Mon Aug  9 2021 16:52                                                Page 601


                    AVE_MKFS(FR_DISK_ERR);
 31729                        	.line	7189
 31730 08:83FF: F4 00 00     	pea	#^$0
 31731 08:8402: F4 00 00     	pea	#<$0
 31732 08:8405: F4 00 00     	pea	#<$0
 31733 08:8408: D4 1C        	pei	<L1158+pdrv_1
 31734 08:840A: 22 xx xx xx  	jsl	~~disk_ioctl
 31735 08:840E: AA           	tax
 31736 08:840F: D0 03        	bne	L1316
 31737 08:8411: 82 17 00     	brl	L10786
 31738                        L1316:
 31739                        	.line	7189
 31740                        	.line	7189
 31741 08:8414: A5 7A        	lda	<L1157+work_0
 31742 08:8416: 05 7C        	ora	<L1157+work_0+2
 31743 08:8418: F0 03        	beq	L1317
 31744 08:841A: 82 08 00     	brl	L10787
 31745                        L1317:
 31746                        	.line	7189
 31747 08:841D: D4 16        	pei	<L1158+buf_1+2
 31748 08:841F: D4 14        	pei	<L1158+buf_1
 31749 08:8421: 22 70 92 08  	jsl	~~ff_memfree
 31750                        L10787:
 31751                        	.line	7189
 31752 08:8425: A9 01 00     	lda	#$1
 31753 08:8428: 82 4D EE     	brl	L1164
 31754                        	.line	7189
 31755                        L10786:
 31756                        	.line	7189
 31757                        ;
 31758                        ;	LEAVE_MKFS(FR_OK);
 31759                        	.line	7191
 31760                        	.line	7191
 31761 08:842B: A5 7A        	lda	<L1157+work_0
 31762 08:842D: 05 7C        	ora	<L1157+work_0+2
 31763 08:842F: F0 03        	beq	L1318
 31764 08:8431: 82 08 00     	brl	L10788
 31765                        L1318:
 31766                        	.line	7191
 31767 08:8434: D4 16        	pei	<L1158+buf_1+2
 31768 08:8436: D4 14        	pei	<L1158+buf_1
 31769 08:8438: 22 70 92 08  	jsl	~~ff_memfree
 31770                        L10788:
 31771                        	.line	7191
 31772 08:843C: A9 00 00     	lda	#$0
 31773 08:843F: 82 36 EE     	brl	L1164
 31774                        	.line	7191
 31775                        	.line	7191
 31776                        ;}
 31777                        	.line	7192
 31778                        	.endblock	7192
 31779             0000006E   L1157	equ	110
 31780             00000011   L1158	equ	17
 31781 08:8442:              	ends
 31782                        	efunc
 31783                        	.endfunc	7192,17,110
 31784                        	.line	7192
 31785                        	data
  Mon Aug  9 2021 16:52                                                Page 602


 31786                        L670:
 31787 00:014B: EB FE 90 4D  	db	$EB,$FFFFFFFE,$FFFFFF90,$4D,$53,$44,$4F,
                    $53,$35,$2E,$30,$00,$4E,$4F,$20
       00:014F: 53 44 4F 53 
       00:0153: 35 2E 30 00 
       00:0157: 4E 4F 20 
 31788 00:015A: 4E 41 4D 45  	db	$4E,$41,$4D,$45,$20,$20,$20,$20,$46,$41,
                    $54,$33,$32,$20,$20
       00:015E: 20 20 20 20 
       00:0162: 46 41 54 33 
       00:0166: 32 20 20 
 31789 00:0169: 20 00 4E 4F  	db	$20,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,
                    $20,$20,$20,$46,$41
       00:016D: 20 4E 41 4D 
       00:0171: 45 20 20 20 
       00:0175: 20 46 41 
 31790 00:0178: 54 20 20 20  	db	$54,$20,$20,$20,$20,$20,$00
       00:017C: 20 20 00 
 31791 00:017F:              	ends
 31792                        ;
 31793                        ;#if FF_MULTI_PARTITION
 31794                        ;/*-----------------------------------------------
                    ------------------------*/
 31795                        ;/* Create Partition Table on the Physical Drive  
                                            */
 31796                        ;/*-----------------------------------------------
                    ------------------------*/
 31797                        ;
 31798                        ;FRESULT f_fdisk (
 31799                        ;		BYTE pdrv, /* Physical drive number */
 31800                        ;		const LBA_t ptbl[], /* Pointer to the si
                    ze table for each partitions */
 31801                        ;		void* work /* Pointer to the working buf
                    fer (null: use heap memory) */
 31802                        ;)
 31803                        ;{
 31804                        ;	BYTE *buf = (BYTE*)work;
 31805                        ;	DSTATUS stat;
 31806                        ;
 31807                        ;	stat = disk_initialize(pdrv);
 31808                        ;	if (stat & STA_NOINIT) return FR_NOT_READY;
 31809                        ;	if (stat & STA_PROTECT) return FR_WRITE_PROTECTE
                    D;
 31810                        ;#if FF_USE_LFN == 3
 31811                        ;	if (!buf) buf = ff_memalloc(FF_MAX_SS); /* Use h
                    eap memory for working buffer */
 31812                        ;#endif
 31813                        ;	if (!buf) return FR_NOT_ENOUGH_CORE;
 31814                        ;
 31815                        ;	LEAVE_MKFS(create_partition(pdrv, ptbl, 0x07, bu
                    f));
 31816                        ;}
 31817                        ;
 31818                        ;#endif /* FF_MULTI_PARTITION */
 31819                        ;#endif /* !FF_FS_READONLY && FF_USE_MKFS */
 31820                        ;
 31821                        ;#if FF_USE_STRFUNC
 31822                        ;#if FF_USE_LFN && FF_LFN_UNICODE && (FF_STRF_ENCO
  Mon Aug  9 2021 16:52                                                Page 603


                    DE < 0 || FF_STRF_ENCODE > 3)
 31823                        ;#error Wrong FF_STRF_ENCODE setting
 31824                        ;#endif
 31825                        ;/*-----------------------------------------------
                    ------------------------*/
 31826                        ;/* Get a String from the File                    
                                            */
 31827                        ;/*-----------------------------------------------
                    ------------------------*/
 31828                        ;
 31829                        ;TCHAR* f_gets(TCHAR* buff, /* Pointer to the buff
                    er to store read string */
 31830                        ;int len, /* Size of string buffer (items) */
 31831                        ;FIL* fp /* Pointer to the file object */
 31832                        ;)
 31833                        ;{
 31834                        	.line	7230
 31835                        	.line	7234
 31836                        	FFDOS
 31837                        	xdef	~~f_gets
 31838                        	func
 31839                        	.function	7234
 31840                        ~~f_gets:
 31841                        	longa	on
 31842                        	longi	on
 31843 08:8442: 3B           	tsc
 31844 08:8443: 38           	sec
 31845 08:8444: E9 1A 00     	sbc	#L1320
 31846 08:8447: 1B           	tcs
 31847 08:8448: 0B           	phd
 31848 08:8449: 5B           	tcd
 31849             00000004   buff_0	set	4
 31850             00000008   len_0	set	8
 31851             0000000A   fp_0	set	10
 31852                        	.block	7234
 31853                        ;	int nc = 0;
 31854                        ;	TCHAR *p = buff;
 31855                        ;	BYTE s[4];
 31856                        ;	UINT rc;
 31857                        ;	DWORD dc;
 31858                        ;#if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCOD
                    E <= 2
 31859                        ;	WCHAR wc;
 31860                        ;#endif
 31861                        ;#if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCOD
                    E == 3
 31862                        ;	UINT ct;
 31863                        ;#endif
 31864                        ;
 31865                        ;#if FF_USE_LFN && FF_LFN_UNICODE			
                    /* With code conversion (Unicode API) */
 31866                        ;	/* Make a room for the character and terminator 
                     */
 31867                        ;	if (FF_LFN_UNICODE == 1) len -= (FF_STRF_ENCODE 
                    == 0) ? 1 : 2;
 31868             00000000   nc_1	set	0
 31869             00000002   p_1	set	2
 31870             00000006   s_1	set	6
  Mon Aug  9 2021 16:52                                                Page 604


 31871             0000000A   rc_1	set	10
 31872             0000000C   dc_1	set	12
 31873             00000010   ct_1	set	16
 31874                        	.sym	nc,0,5,1,16
 31875                        	.sym	p,2,142,1,32
 31876                        	.sym	s,6,110,1,0,4
 31877                        	.sym	rc,10,16,1,16
 31878                        	.sym	dc,12,18,1,32
 31879                        	.sym	ct,16,16,1,16
 31880                        	.sym	buff,4,142,6,32
 31881                        	.sym	len,8,5,6,16
 31882                        	.sym	fp,10,138,6,32,77
 31883 08:844A: 64 09        	stz	<L1321+nc_1
 31884 08:844C: A5 1E        	lda	<L1320+buff_0
 31885 08:844E: 85 0B        	sta	<L1321+p_1
 31886 08:8450: A5 20        	lda	<L1320+buff_0+2
 31887 08:8452: 85 0D        	sta	<L1321+p_1+2
 31888                        	.line	7249
 31889 08:8454: 82 04 00     	brl	L10789
 31890                        	.line	7249
 31891 08:8457: C6 22        	dec	<L1320+len_0
 31892 08:8459: C6 22        	dec	<L1320+len_0
 31893                        ;	if (FF_LFN_UNICODE == 2) len -= (FF_STRF_ENCODE 
                    == 0) ? 3 : 4;
 31894                        L10789:
 31895                        	.line	7250
 31896                        	.line	7250
 31897 08:845B: 18           	clc
 31898 08:845C: A9 FC FF     	lda	#$fffc
 31899 08:845F: 65 22        	adc	<L1320+len_0
 31900 08:8461: 85 22        	sta	<L1320+len_0
 31901                        ;	if (FF_LFN_UNICODE == 3) len -= 1;
 31902                        L10790:
 31903                        	.line	7251
 31904 08:8463: 82 02 00     	brl	L10791
 31905                        	.line	7251
 31906 08:8466: C6 22        	dec	<L1320+len_0
 31907                        ;	while (nc < len)
 31908                        L10791:
 31909                        	.line	7252
 31910                        L10792:
 31911 08:8468: 38           	sec
 31912 08:8469: A5 09        	lda	<L1321+nc_1
 31913 08:846B: E5 22        	sbc	<L1320+len_0
 31914 08:846D: 70 03        	bvs	L1323
 31915 08:846F: 49 00 80     	eor	#$8000
 31916                        L1323:
 31917 08:8472: 10 03        	bpl	L1324
 31918 08:8474: 82 86 03     	brl	L10793
 31919                        L1324:
 31920                        ;	{
 31921                        	.line	7253
 31922                        ;#if FF_STRF_ENCODE == 0				
                    /* Read a character in ANSI/OEM */
 31923                        ;		f_read(fp, s, 1, &rc); /* Get a code uni
                    t */
 31924                        ;		if (rc != 1) break; /* EOF? */
 31925                        ;		wc = s[0];
  Mon Aug  9 2021 16:52                                                Page 605


 31926                        ;		if (dbc_1st((BYTE)wc))
 31927                        ;		{ /* DBC 1st byte? */
 31928                        ;			f_read(fp, s, 1, &rc); /* Get DB
                    C 2nd byte */
 31929                        ;			if (rc != 1 || !dbc_2nd(s[0])) c
                    ontinue; /* Wrong code? */
 31930                        ;			wc = wc << 8 | s[0];
 31931                        ;		}
 31932                        ;		dc = ff_oem2uni(wc, CODEPAGE); /* OEM --
                    > */
 31933                        ;		if (dc == 0) continue;
 31934                        ;#elif FF_STRF_ENCODE == 1 || FF_STRF_ENCODE == 2 
                    	/* Read a character in UTF-16LE/BE */
 31935                        ;		f_read(fp, s, 2, &rc); /* Get a code uni
                    t */
 31936                        ;		if (rc != 2) break; /* EOF? */
 31937                        ;		dc = (FF_STRF_ENCODE == 1) ? ld_word(s) 
                    : s[0] << 8 | s[1];
 31938                        ;		if (IsSurrogateL(dc)) continue; /* Broke
                    n surrogate pair? */
 31939                        ;		if (IsSurrogateH(dc))
 31940                        ;		{ /* High surrogate? */
 31941                        ;			f_read(fp, s, 2, &rc); /* Get lo
                    w surrogate */
 31942                        ;			if (rc != 2) break; /* EOF? */
 31943                        ;			wc = (FF_STRF_ENCODE == 1) ? ld_
                    word(s) : s[0] << 8 | s[1];
 31944                        ;			if (!IsSurrogateL(wc)) continue;
                     /* Broken surrogate pair? */
 31945                        ;			dc = ((dc & 0x3FF) + 0x40) << 10
                     | (wc & 0x3FF); /* Merge surrogate pair */
 31946                        ;		}
 31947                        ;#else	/* Read a character in UTF-8 */
 31948                        ;		f_read(fp, s, 1, &rc); /* Get a code uni
                    t */
 31949                        	.line	7280
 31950 08:8477: F4 00 00     	pea	#0
 31951 08:847A: 18           	clc
 31952 08:847B: 7B           	tdc
 31953 08:847C: 69 13 00     	adc	#<L1321+rc_1
 31954 08:847F: 48           	pha
 31955 08:8480: F4 01 00     	pea	#<$1
 31956 08:8483: F4 00 00     	pea	#0
 31957 08:8486: 18           	clc
 31958 08:8487: 7B           	tdc
 31959 08:8488: 69 0F 00     	adc	#<L1321+s_1
 31960 08:848B: 48           	pha
 31961 08:848C: D4 26        	pei	<L1320+fp_0+2
 31962 08:848E: D4 24        	pei	<L1320+fp_0
 31963 08:8490: 22 85 4A 08  	jsl	~~f_read
 31964                        ;		if (rc != 1) break; /* EOF? */
 31965                        	.line	7281
 31966 08:8494: A5 13        	lda	<L1321+rc_1
 31967 08:8496: C9 01 00     	cmp	#<$1
 31968 08:8499: F0 03        	beq	L1325
 31969 08:849B: 82 5F 03     	brl	L10793
 31970                        L1325:
 31971                        ;		dc = s[0];
  Mon Aug  9 2021 16:52                                                Page 606


 31972                        	.line	7282
 31973 08:849E: A5 0F        	lda	<L1321+s_1
 31974 08:84A0: 29 FF 00     	and	#$ff
 31975 08:84A3: 85 15        	sta	<L1321+dc_1
 31976 08:84A5: 64 17        	stz	<L1321+dc_1+2
 31977                        ;		if (dc >= 0x80)
 31978                        	.line	7283
 31979                        ;		{ /* Multi-byte sequence? */
 31980 08:84A7: A5 15        	lda	<L1321+dc_1
 31981 08:84A9: C9 80 00     	cmp	#<$80
 31982 08:84AC: A5 17        	lda	<L1321+dc_1+2
 31983 08:84AE: E9 00 00     	sbc	#^$80
 31984 08:84B1: B0 03        	bcs	L1326
 31985 08:84B3: 82 3B 01     	brl	L10794
 31986                        L1326:
 31987                        	.line	7284
 31988                        ;			ct = 0;
 31989                        	.line	7285
 31990 08:84B6: 64 19        	stz	<L1321+ct_1
 31991                        ;			if ((dc & 0xE0) == 0xC0)
 31992                        	.line	7286
 31993                        ;			{	dc &= 0x1F; ct = 1;} /* 
                    2-byte sequence? */
 31994 08:84B8: A5 15        	lda	<L1321+dc_1
 31995 08:84BA: 29 E0 00     	and	#<$e0
 31996 08:84BD: 85 01        	sta	<R0
 31997 08:84BF: 64 03        	stz	<R0+2
 31998 08:84C1: A5 01        	lda	<R0
 31999 08:84C3: C9 C0 00     	cmp	#<$c0
 32000 08:84C6: D0 05        	bne	L1327
 32001 08:84C8: A5 03        	lda	<R0+2
 32002 08:84CA: C9 00 00     	cmp	#^$c0
 32003                        L1327:
 32004 08:84CD: F0 03        	beq	L1328
 32005 08:84CF: 82 0E 00     	brl	L10795
 32006                        L1328:
 32007                        	.line	7287
 32008                        	.line	7287
 32009 08:84D2: A5 15        	lda	<L1321+dc_1
 32010 08:84D4: 29 1F 00     	and	#<$1f
 32011 08:84D7: 85 15        	sta	<L1321+dc_1
 32012 08:84D9: 64 17        	stz	<L1321+dc_1+2
 32013                        	.line	7287
 32014 08:84DB: A9 01 00     	lda	#$1
 32015 08:84DE: 85 19        	sta	<L1321+ct_1
 32016                        	.line	7287
 32017                        ;			if ((dc & 0xF0) == 0xE0)
 32018                        L10795:
 32019                        	.line	7288
 32020                        ;			{	dc &= 0x0F; ct = 2;} /* 
                    3-byte sequence? */
 32021 08:84E0: A5 15        	lda	<L1321+dc_1
 32022 08:84E2: 29 F0 00     	and	#<$f0
 32023 08:84E5: 85 01        	sta	<R0
 32024 08:84E7: 64 03        	stz	<R0+2
 32025 08:84E9: A5 01        	lda	<R0
 32026 08:84EB: C9 E0 00     	cmp	#<$e0
 32027 08:84EE: D0 05        	bne	L1329
  Mon Aug  9 2021 16:52                                                Page 607


 32028 08:84F0: A5 03        	lda	<R0+2
 32029 08:84F2: C9 00 00     	cmp	#^$e0
 32030                        L1329:
 32031 08:84F5: F0 03        	beq	L1330
 32032 08:84F7: 82 0E 00     	brl	L10796
 32033                        L1330:
 32034                        	.line	7289
 32035                        	.line	7289
 32036 08:84FA: A5 15        	lda	<L1321+dc_1
 32037 08:84FC: 29 0F 00     	and	#<$f
 32038 08:84FF: 85 15        	sta	<L1321+dc_1
 32039 08:8501: 64 17        	stz	<L1321+dc_1+2
 32040                        	.line	7289
 32041 08:8503: A9 02 00     	lda	#$2
 32042 08:8506: 85 19        	sta	<L1321+ct_1
 32043                        	.line	7289
 32044                        ;			if ((dc & 0xF8) == 0xF0)
 32045                        L10796:
 32046                        	.line	7290
 32047                        ;			{	dc &= 0x07; ct = 3;} /* 
                    4-byte sequence? */
 32048 08:8508: A5 15        	lda	<L1321+dc_1
 32049 08:850A: 29 F8 00     	and	#<$f8
 32050 08:850D: 85 01        	sta	<R0
 32051 08:850F: 64 03        	stz	<R0+2
 32052 08:8511: A5 01        	lda	<R0
 32053 08:8513: C9 F0 00     	cmp	#<$f0
 32054 08:8516: D0 05        	bne	L1331
 32055 08:8518: A5 03        	lda	<R0+2
 32056 08:851A: C9 00 00     	cmp	#^$f0
 32057                        L1331:
 32058 08:851D: F0 03        	beq	L1332
 32059 08:851F: 82 0E 00     	brl	L10797
 32060                        L1332:
 32061                        	.line	7291
 32062                        	.line	7291
 32063 08:8522: A5 15        	lda	<L1321+dc_1
 32064 08:8524: 29 07 00     	and	#<$7
 32065 08:8527: 85 15        	sta	<L1321+dc_1
 32066 08:8529: 64 17        	stz	<L1321+dc_1+2
 32067                        	.line	7291
 32068 08:852B: A9 03 00     	lda	#$3
 32069 08:852E: 85 19        	sta	<L1321+ct_1
 32070                        	.line	7291
 32071                        ;			if (ct == 0) continue;
 32072                        L10797:
 32073                        	.line	7292
 32074 08:8530: A5 19        	lda	<L1321+ct_1
 32075 08:8532: D0 03        	bne	L1333
 32076 08:8534: 82 31 FF     	brl	L10792
 32077                        L1333:
 32078                        ;			f_read(fp, s, ct, &rc); /* Get t
                    railing bytes */
 32079                        	.line	7293
 32080 08:8537: F4 00 00     	pea	#0
 32081 08:853A: 18           	clc
 32082 08:853B: 7B           	tdc
 32083 08:853C: 69 13 00     	adc	#<L1321+rc_1
  Mon Aug  9 2021 16:52                                                Page 608


 32084 08:853F: 48           	pha
 32085 08:8540: D4 19        	pei	<L1321+ct_1
 32086 08:8542: F4 00 00     	pea	#0
 32087 08:8545: 18           	clc
 32088 08:8546: 7B           	tdc
 32089 08:8547: 69 0F 00     	adc	#<L1321+s_1
 32090 08:854A: 48           	pha
 32091 08:854B: D4 26        	pei	<L1320+fp_0+2
 32092 08:854D: D4 24        	pei	<L1320+fp_0
 32093 08:854F: 22 85 4A 08  	jsl	~~f_read
 32094                        ;			if (rc != ct) break;
 32095                        	.line	7294
 32096 08:8553: A5 13        	lda	<L1321+rc_1
 32097 08:8555: C5 19        	cmp	<L1321+ct_1
 32098 08:8557: F0 03        	beq	L1334
 32099 08:8559: 82 A1 02     	brl	L10793
 32100                        L1334:
 32101                        ;			rc = 0;
 32102                        	.line	7295
 32103 08:855C: 64 13        	stz	<L1321+rc_1
 32104                        ;			do
 32105                        	.line	7296
 32106                        L10800:
 32107                        ;			{ /* Merge the byte sequence */
 32108                        	.line	7297
 32109                        ;				if ((s[rc] & 0xC0) != 0x
                    80) break;
 32110                        	.line	7298
 32111 08:855E: A6 13        	ldx	<L1321+rc_1
 32112 08:8560: B5 0F        	lda	<L1321+s_1,X
 32113 08:8562: 29 C0 00     	and	#<$c0
 32114 08:8565: 85 01        	sta	<R0
 32115 08:8567: A5 01        	lda	<R0
 32116 08:8569: C9 80 00     	cmp	#<$80
 32117 08:856C: F0 03        	beq	L1335
 32118 08:856E: 82 3B 00     	brl	L10799
 32119                        L1335:
 32120                        ;				dc = dc << 6 | (s[rc] & 
                    0x3F);
 32121                        	.line	7299
 32122 08:8571: D4 17        	pei	<L1321+dc_1+2
 32123 08:8573: D4 15        	pei	<L1321+dc_1
 32124 08:8575: A9 06 00     	lda	#$6
 32125                        	xref	~~~lasl
 32126 08:8578: 22 xx xx xx  	jsl	~~~lasl
 32127 08:857C: 85 01        	sta	<R0
 32128 08:857E: 86 03        	stx	<R0+2
 32129 08:8580: A6 13        	ldx	<L1321+rc_1
 32130 08:8582: B5 0F        	lda	<L1321+s_1,X
 32131 08:8584: 29 3F 00     	and	#<$3f
 32132 08:8587: 85 05        	sta	<R1
 32133 08:8589: A0 00 00     	ldy	#$0
 32134 08:858C: A5 05        	lda	<R1
 32135 08:858E: 10 01        	bpl	L1336
 32136 08:8590: 88           	dey
 32137                        L1336:
 32138 08:8591: 85 05        	sta	<R1
 32139 08:8593: 84 07        	sty	<R1+2
  Mon Aug  9 2021 16:52                                                Page 609


 32140 08:8595: A5 05        	lda	<R1
 32141 08:8597: 05 01        	ora	<R0
 32142 08:8599: 85 15        	sta	<L1321+dc_1
 32143 08:859B: A5 07        	lda	<R1+2
 32144 08:859D: 05 03        	ora	<R0+2
 32145 08:859F: 85 17        	sta	<L1321+dc_1+2
 32146                        ;			}while (++rc < ct);
 32147                        	.line	7300
 32148                        L10798:
 32149 08:85A1: E6 13        	inc	<L1321+rc_1
 32150 08:85A3: A5 13        	lda	<L1321+rc_1
 32151 08:85A5: C5 19        	cmp	<L1321+ct_1
 32152 08:85A7: B0 03        	bcs	L1337
 32153 08:85A9: 82 B2 FF     	brl	L10800
 32154                        L1337:
 32155                        L10799:
 32156                        ;			if (rc != ct || dc < 0x80 || IsS
                    urrogate(dc) || dc >= 0x110000) continue; /* Wrong encoding?
                     */
 32157                        	.line	7301
 32158 08:85AC: A5 13        	lda	<L1321+rc_1
 32159 08:85AE: C5 19        	cmp	<L1321+ct_1
 32160 08:85B0: F0 03        	beq	L1338
 32161 08:85B2: 82 B3 FE     	brl	L10792
 32162                        L1338:
 32163 08:85B5: A5 15        	lda	<L1321+dc_1
 32164 08:85B7: C9 80 00     	cmp	#<$80
 32165 08:85BA: A5 17        	lda	<L1321+dc_1+2
 32166 08:85BC: E9 00 00     	sbc	#^$80
 32167 08:85BF: B0 03        	bcs	L1339
 32168 08:85C1: 82 A4 FE     	brl	L10792
 32169                        L1339:
 32170 08:85C4: A5 15        	lda	<L1321+dc_1
 32171 08:85C6: C9 00 D8     	cmp	#<$d800
 32172 08:85C9: A5 17        	lda	<L1321+dc_1+2
 32173 08:85CB: E9 00 00     	sbc	#^$d800
 32174 08:85CE: B0 03        	bcs	L1341
 32175 08:85D0: 82 0F 00     	brl	L1340
 32176                        L1341:
 32177 08:85D3: A9 FF DF     	lda	#$dfff
 32178 08:85D6: C5 15        	cmp	<L1321+dc_1
 32179 08:85D8: A9 00 00     	lda	#$0
 32180 08:85DB: E5 17        	sbc	<L1321+dc_1+2
 32181 08:85DD: 90 03        	bcc	L1342
 32182 08:85DF: 82 86 FE     	brl	L10792
 32183                        L1342:
 32184                        L1340:
 32185 08:85E2: A5 15        	lda	<L1321+dc_1
 32186 08:85E4: C9 00 00     	cmp	#<$110000
 32187 08:85E7: A5 17        	lda	<L1321+dc_1+2
 32188 08:85E9: E9 11 00     	sbc	#^$110000
 32189 08:85EC: 90 03        	bcc	L1343
 32190 08:85EE: 82 77 FE     	brl	L10792
 32191                        L1343:
 32192                        ;		}
 32193                        	.line	7302
 32194                        ;#endif
 32195                        ;		/* A code point is avaialble in dc to be
  Mon Aug  9 2021 16:52                                                Page 610


                     output */
 32196                        ;
 32197                        ;		if (FF_USE_STRFUNC == 2 && dc == '\r') c
                    ontinue; /* Strip \r off if needed */
 32198                        L10794:
 32199                        	.line	7306
 32200 08:85F1: 82 11 00     	brl	L1344
 32201 08:85F4: A5 15        	lda	<L1321+dc_1
 32202 08:85F6: C9 0D 00     	cmp	#<$d
 32203 08:85F9: D0 05        	bne	L1345
 32204 08:85FB: A5 17        	lda	<L1321+dc_1+2
 32205 08:85FD: C9 00 00     	cmp	#^$d
 32206                        L1345:
 32207 08:8600: D0 03        	bne	L1346
 32208 08:8602: 82 63 FE     	brl	L10792
 32209                        L1346:
 32210                        L1344:
 32211                        ;#if FF_LFN_UNICODE == 1	|| FF_LFN_UNICODE == 3	
                    /* Output it in UTF-16/32 encoding */
 32212                        ;		if (FF_LFN_UNICODE == 1 && dc >= 0x10000
                    )
 32213                        ;		{ /* Out of BMP at UTF-16? */
 32214                        ;			*p++ = (TCHAR)(0xD800 | ((dc >> 
                    10) - 0x40)); nc++; /* Make and output high surrogate */
 32215                        ;			dc = 0xDC00 | (dc & 0x3FF); /* M
                    ake low surrogate */
 32216                        ;		}
 32217                        ;		*p++ = (TCHAR)dc; nc++;
 32218                        ;		if (dc == '\n') break; /* End of line? *
                    /
 32219                        ;#elif FF_LFN_UNICODE == 2		/* Outpu
                    t it in UTF-8 encoding */
 32220                        ;		if (dc < 0x80)
 32221                        	.line	7316
 32222                        ;		{ /* Single byte? */
 32223 08:8605: A5 15        	lda	<L1321+dc_1
 32224 08:8607: C9 80 00     	cmp	#<$80
 32225 08:860A: A5 17        	lda	<L1321+dc_1+2
 32226 08:860C: E9 00 00     	sbc	#^$80
 32227 08:860F: 90 03        	bcc	L1347
 32228 08:8611: 82 24 00     	brl	L10801
 32229                        L1347:
 32230                        	.line	7317
 32231                        ;			*p++ = (TCHAR)dc;
 32232                        	.line	7318
 32233 08:8614: E2 20        	sep	#$20
 32234                        	longa	off
 32235 08:8616: A5 15        	lda	<L1321+dc_1
 32236 08:8618: 87 0B        	sta	[<L1321+p_1]
 32237 08:861A: C2 20        	rep	#$20
 32238                        	longa	on
 32239 08:861C: E6 0B        	inc	<L1321+p_1
 32240 08:861E: D0 02        	bne	L1348
 32241 08:8620: E6 0D        	inc	<L1321+p_1+2
 32242                        L1348:
 32243                        ;			nc++;
 32244                        	.line	7319
 32245 08:8622: E6 09        	inc	<L1321+nc_1
  Mon Aug  9 2021 16:52                                                Page 611


 32246                        ;			if (dc == '\n') break; /* End of
                     line? */
 32247                        	.line	7320
 32248 08:8624: A5 15        	lda	<L1321+dc_1
 32249 08:8626: C9 0A 00     	cmp	#<$a
 32250 08:8629: D0 05        	bne	L1349
 32251 08:862B: A5 17        	lda	<L1321+dc_1+2
 32252 08:862D: C9 00 00     	cmp	#^$a
 32253                        L1349:
 32254 08:8630: D0 03        	bne	L1350
 32255 08:8632: 82 C8 01     	brl	L10793
 32256                        L1350:
 32257                        ;		}
 32258                        	.line	7321
 32259                        ;		else
 32260 08:8635: 82 C2 01     	brl	L10802
 32261                        L10801:
 32262                        ;		{
 32263                        	.line	7323
 32264                        ;			if (dc < 0x800)
 32265                        	.line	7324
 32266                        ;			{ /* 2-byte sequence? */
 32267 08:8638: A5 15        	lda	<L1321+dc_1
 32268 08:863A: C9 00 08     	cmp	#<$800
 32269 08:863D: A5 17        	lda	<L1321+dc_1+2
 32270 08:863F: E9 00 00     	sbc	#^$800
 32271 08:8642: 90 03        	bcc	L1351
 32272 08:8644: 82 5A 00     	brl	L10803
 32273                        L1351:
 32274                        	.line	7325
 32275                        ;				*p++ = (TCHAR)(0xC0 | (d
                    c >> 6 & 0x1F));
 32276                        	.line	7326
 32277 08:8647: D4 17        	pei	<L1321+dc_1+2
 32278 08:8649: D4 15        	pei	<L1321+dc_1
 32279 08:864B: A9 06 00     	lda	#$6
 32280                        	xref	~~~llsr
 32281 08:864E: 22 xx xx xx  	jsl	~~~llsr
 32282 08:8652: 85 01        	sta	<R0
 32283 08:8654: 86 03        	stx	<R0+2
 32284 08:8656: A5 01        	lda	<R0
 32285 08:8658: 29 1F 00     	and	#<$1f
 32286 08:865B: 85 05        	sta	<R1
 32287 08:865D: 64 07        	stz	<R1+2
 32288 08:865F: A5 05        	lda	<R1
 32289 08:8661: 09 C0 00     	ora	#<$c0
 32290 08:8664: 85 01        	sta	<R0
 32291 08:8666: A5 07        	lda	<R1+2
 32292 08:8668: 85 03        	sta	<R0+2
 32293 08:866A: E2 20        	sep	#$20
 32294                        	longa	off
 32295 08:866C: A5 01        	lda	<R0
 32296 08:866E: 87 0B        	sta	[<L1321+p_1]
 32297 08:8670: C2 20        	rep	#$20
 32298                        	longa	on
 32299 08:8672: E6 0B        	inc	<L1321+p_1
 32300 08:8674: D0 02        	bne	L1352
 32301 08:8676: E6 0D        	inc	<L1321+p_1+2
  Mon Aug  9 2021 16:52                                                Page 612


 32302                        L1352:
 32303                        ;				*p++ = (TCHAR)(0x80 | (d
                    c >> 0 & 0x3F));
 32304                        	.line	7327
 32305 08:8678: A5 15        	lda	<L1321+dc_1
 32306 08:867A: 29 3F 00     	and	#<$3f
 32307 08:867D: 85 01        	sta	<R0
 32308 08:867F: 64 03        	stz	<R0+2
 32309 08:8681: A5 01        	lda	<R0
 32310 08:8683: 09 80 00     	ora	#<$80
 32311 08:8686: 85 05        	sta	<R1
 32312 08:8688: A5 03        	lda	<R0+2
 32313 08:868A: 85 07        	sta	<R1+2
 32314 08:868C: E2 20        	sep	#$20
 32315                        	longa	off
 32316 08:868E: A5 05        	lda	<R1
 32317 08:8690: 87 0B        	sta	[<L1321+p_1]
 32318 08:8692: C2 20        	rep	#$20
 32319                        	longa	on
 32320 08:8694: E6 0B        	inc	<L1321+p_1
 32321 08:8696: D0 02        	bne	L1353
 32322 08:8698: E6 0D        	inc	<L1321+p_1+2
 32323                        L1353:
 32324                        ;				nc += 2;
 32325                        	.line	7328
 32326 08:869A: E6 09        	inc	<L1321+nc_1
 32327 08:869C: E6 09        	inc	<L1321+nc_1
 32328                        ;			}
 32329                        	.line	7329
 32330                        ;			else
 32331 08:869E: 82 59 01     	brl	L10804
 32332                        L10803:
 32333                        ;			{
 32334                        	.line	7331
 32335                        ;				if (dc < 0x10000)
 32336                        	.line	7332
 32337                        ;				{ /* 3-byte sequence? */
 32338 08:86A1: A5 15        	lda	<L1321+dc_1
 32339 08:86A3: C9 00 00     	cmp	#<$10000
 32340 08:86A6: A5 17        	lda	<L1321+dc_1+2
 32341 08:86A8: E9 01 00     	sbc	#^$10000
 32342 08:86AB: 90 03        	bcc	L1354
 32343 08:86AD: 82 8D 00     	brl	L10805
 32344                        L1354:
 32345                        	.line	7333
 32346                        ;					*p++ = (TCHAR)(0
                    xE0 | (dc >> 12 & 0x0F));
 32347                        	.line	7334
 32348 08:86B0: D4 17        	pei	<L1321+dc_1+2
 32349 08:86B2: D4 15        	pei	<L1321+dc_1
 32350 08:86B4: A9 0C 00     	lda	#$c
 32351                        	xref	~~~llsr
 32352 08:86B7: 22 xx xx xx  	jsl	~~~llsr
 32353 08:86BB: 85 01        	sta	<R0
 32354 08:86BD: 86 03        	stx	<R0+2
 32355 08:86BF: A5 01        	lda	<R0
 32356 08:86C1: 29 0F 00     	and	#<$f
 32357 08:86C4: 85 05        	sta	<R1
  Mon Aug  9 2021 16:52                                                Page 613


 32358 08:86C6: 64 07        	stz	<R1+2
 32359 08:86C8: A5 05        	lda	<R1
 32360 08:86CA: 09 E0 00     	ora	#<$e0
 32361 08:86CD: 85 01        	sta	<R0
 32362 08:86CF: A5 07        	lda	<R1+2
 32363 08:86D1: 85 03        	sta	<R0+2
 32364 08:86D3: E2 20        	sep	#$20
 32365                        	longa	off
 32366 08:86D5: A5 01        	lda	<R0
 32367 08:86D7: 87 0B        	sta	[<L1321+p_1]
 32368 08:86D9: C2 20        	rep	#$20
 32369                        	longa	on
 32370 08:86DB: E6 0B        	inc	<L1321+p_1
 32371 08:86DD: D0 02        	bne	L1355
 32372 08:86DF: E6 0D        	inc	<L1321+p_1+2
 32373                        L1355:
 32374                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 6 & 0x3F));
 32375                        	.line	7335
 32376 08:86E1: D4 17        	pei	<L1321+dc_1+2
 32377 08:86E3: D4 15        	pei	<L1321+dc_1
 32378 08:86E5: A9 06 00     	lda	#$6
 32379                        	xref	~~~llsr
 32380 08:86E8: 22 xx xx xx  	jsl	~~~llsr
 32381 08:86EC: 85 01        	sta	<R0
 32382 08:86EE: 86 03        	stx	<R0+2
 32383 08:86F0: A5 01        	lda	<R0
 32384 08:86F2: 29 3F 00     	and	#<$3f
 32385 08:86F5: 85 05        	sta	<R1
 32386 08:86F7: 64 07        	stz	<R1+2
 32387 08:86F9: A5 05        	lda	<R1
 32388 08:86FB: 09 80 00     	ora	#<$80
 32389 08:86FE: 85 01        	sta	<R0
 32390 08:8700: A5 07        	lda	<R1+2
 32391 08:8702: 85 03        	sta	<R0+2
 32392 08:8704: E2 20        	sep	#$20
 32393                        	longa	off
 32394 08:8706: A5 01        	lda	<R0
 32395 08:8708: 87 0B        	sta	[<L1321+p_1]
 32396 08:870A: C2 20        	rep	#$20
 32397                        	longa	on
 32398 08:870C: E6 0B        	inc	<L1321+p_1
 32399 08:870E: D0 02        	bne	L1356
 32400 08:8710: E6 0D        	inc	<L1321+p_1+2
 32401                        L1356:
 32402                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 0 & 0x3F));
 32403                        	.line	7336
 32404 08:8712: A5 15        	lda	<L1321+dc_1
 32405 08:8714: 29 3F 00     	and	#<$3f
 32406 08:8717: 85 01        	sta	<R0
 32407 08:8719: 64 03        	stz	<R0+2
 32408 08:871B: A5 01        	lda	<R0
 32409 08:871D: 09 80 00     	ora	#<$80
 32410 08:8720: 85 05        	sta	<R1
 32411 08:8722: A5 03        	lda	<R0+2
 32412 08:8724: 85 07        	sta	<R1+2
 32413 08:8726: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 614


 32414                        	longa	off
 32415 08:8728: A5 05        	lda	<R1
 32416 08:872A: 87 0B        	sta	[<L1321+p_1]
 32417 08:872C: C2 20        	rep	#$20
 32418                        	longa	on
 32419 08:872E: E6 0B        	inc	<L1321+p_1
 32420 08:8730: D0 02        	bne	L1357
 32421 08:8732: E6 0D        	inc	<L1321+p_1+2
 32422                        L1357:
 32423                        ;					nc += 3;
 32424                        	.line	7337
 32425 08:8734: E6 09        	inc	<L1321+nc_1
 32426 08:8736: E6 09        	inc	<L1321+nc_1
 32427 08:8738: E6 09        	inc	<L1321+nc_1
 32428                        ;				}
 32429                        	.line	7338
 32430                        ;				else
 32431 08:873A: 82 BD 00     	brl	L10806
 32432                        L10805:
 32433                        ;				{ /* 4-byte sequence? */
 32434                        	.line	7340
 32435                        ;					*p++ = (TCHAR)(0
                    xF0 | (dc >> 18 & 0x07));
 32436                        	.line	7341
 32437 08:873D: D4 17        	pei	<L1321+dc_1+2
 32438 08:873F: D4 15        	pei	<L1321+dc_1
 32439 08:8741: A9 12 00     	lda	#$12
 32440                        	xref	~~~llsr
 32441 08:8744: 22 xx xx xx  	jsl	~~~llsr
 32442 08:8748: 85 01        	sta	<R0
 32443 08:874A: 86 03        	stx	<R0+2
 32444 08:874C: A5 01        	lda	<R0
 32445 08:874E: 29 07 00     	and	#<$7
 32446 08:8751: 85 05        	sta	<R1
 32447 08:8753: 64 07        	stz	<R1+2
 32448 08:8755: A5 05        	lda	<R1
 32449 08:8757: 09 F0 00     	ora	#<$f0
 32450 08:875A: 85 01        	sta	<R0
 32451 08:875C: A5 07        	lda	<R1+2
 32452 08:875E: 85 03        	sta	<R0+2
 32453 08:8760: E2 20        	sep	#$20
 32454                        	longa	off
 32455 08:8762: A5 01        	lda	<R0
 32456 08:8764: 87 0B        	sta	[<L1321+p_1]
 32457 08:8766: C2 20        	rep	#$20
 32458                        	longa	on
 32459 08:8768: E6 0B        	inc	<L1321+p_1
 32460 08:876A: D0 02        	bne	L1358
 32461 08:876C: E6 0D        	inc	<L1321+p_1+2
 32462                        L1358:
 32463                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 12 & 0x3F));
 32464                        	.line	7342
 32465 08:876E: D4 17        	pei	<L1321+dc_1+2
 32466 08:8770: D4 15        	pei	<L1321+dc_1
 32467 08:8772: A9 0C 00     	lda	#$c
 32468                        	xref	~~~llsr
 32469 08:8775: 22 xx xx xx  	jsl	~~~llsr
  Mon Aug  9 2021 16:52                                                Page 615


 32470 08:8779: 85 01        	sta	<R0
 32471 08:877B: 86 03        	stx	<R0+2
 32472 08:877D: A5 01        	lda	<R0
 32473 08:877F: 29 3F 00     	and	#<$3f
 32474 08:8782: 85 05        	sta	<R1
 32475 08:8784: 64 07        	stz	<R1+2
 32476 08:8786: A5 05        	lda	<R1
 32477 08:8788: 09 80 00     	ora	#<$80
 32478 08:878B: 85 01        	sta	<R0
 32479 08:878D: A5 07        	lda	<R1+2
 32480 08:878F: 85 03        	sta	<R0+2
 32481 08:8791: E2 20        	sep	#$20
 32482                        	longa	off
 32483 08:8793: A5 01        	lda	<R0
 32484 08:8795: 87 0B        	sta	[<L1321+p_1]
 32485 08:8797: C2 20        	rep	#$20
 32486                        	longa	on
 32487 08:8799: E6 0B        	inc	<L1321+p_1
 32488 08:879B: D0 02        	bne	L1359
 32489 08:879D: E6 0D        	inc	<L1321+p_1+2
 32490                        L1359:
 32491                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 6 & 0x3F));
 32492                        	.line	7343
 32493 08:879F: D4 17        	pei	<L1321+dc_1+2
 32494 08:87A1: D4 15        	pei	<L1321+dc_1
 32495 08:87A3: A9 06 00     	lda	#$6
 32496                        	xref	~~~llsr
 32497 08:87A6: 22 xx xx xx  	jsl	~~~llsr
 32498 08:87AA: 85 01        	sta	<R0
 32499 08:87AC: 86 03        	stx	<R0+2
 32500 08:87AE: A5 01        	lda	<R0
 32501 08:87B0: 29 3F 00     	and	#<$3f
 32502 08:87B3: 85 05        	sta	<R1
 32503 08:87B5: 64 07        	stz	<R1+2
 32504 08:87B7: A5 05        	lda	<R1
 32505 08:87B9: 09 80 00     	ora	#<$80
 32506 08:87BC: 85 01        	sta	<R0
 32507 08:87BE: A5 07        	lda	<R1+2
 32508 08:87C0: 85 03        	sta	<R0+2
 32509 08:87C2: E2 20        	sep	#$20
 32510                        	longa	off
 32511 08:87C4: A5 01        	lda	<R0
 32512 08:87C6: 87 0B        	sta	[<L1321+p_1]
 32513 08:87C8: C2 20        	rep	#$20
 32514                        	longa	on
 32515 08:87CA: E6 0B        	inc	<L1321+p_1
 32516 08:87CC: D0 02        	bne	L1360
 32517 08:87CE: E6 0D        	inc	<L1321+p_1+2
 32518                        L1360:
 32519                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 0 & 0x3F));
 32520                        	.line	7344
 32521 08:87D0: A5 15        	lda	<L1321+dc_1
 32522 08:87D2: 29 3F 00     	and	#<$3f
 32523 08:87D5: 85 01        	sta	<R0
 32524 08:87D7: 64 03        	stz	<R0+2
 32525 08:87D9: A5 01        	lda	<R0
  Mon Aug  9 2021 16:52                                                Page 616


 32526 08:87DB: 09 80 00     	ora	#<$80
 32527 08:87DE: 85 05        	sta	<R1
 32528 08:87E0: A5 03        	lda	<R0+2
 32529 08:87E2: 85 07        	sta	<R1+2
 32530 08:87E4: E2 20        	sep	#$20
 32531                        	longa	off
 32532 08:87E6: A5 05        	lda	<R1
 32533 08:87E8: 87 0B        	sta	[<L1321+p_1]
 32534 08:87EA: C2 20        	rep	#$20
 32535                        	longa	on
 32536 08:87EC: E6 0B        	inc	<L1321+p_1
 32537 08:87EE: D0 02        	bne	L1361
 32538 08:87F0: E6 0D        	inc	<L1321+p_1+2
 32539                        L1361:
 32540                        ;					nc += 4;
 32541                        	.line	7345
 32542 08:87F2: 18           	clc
 32543 08:87F3: A9 04 00     	lda	#$4
 32544 08:87F6: 65 09        	adc	<L1321+nc_1
 32545 08:87F8: 85 09        	sta	<L1321+nc_1
 32546                        ;				}
 32547                        	.line	7346
 32548                        L10806:
 32549                        ;			}
 32550                        	.line	7347
 32551                        L10804:
 32552                        ;		}
 32553                        	.line	7348
 32554                        L10802:
 32555                        ;#endif
 32556                        ;	}
 32557                        	.line	7350
 32558 08:87FA: 82 6B FC     	brl	L10792
 32559                        L10793:
 32560                        ;
 32561                        ;#else			/* Byte-by-byte read wit
                    hout any conversion (ANSI/OEM API) */
 32562                        ;	len -= 1; /* Make a room for the terminator */
 32563                        ;	while (nc < len)
 32564                        ;	{
 32565                        ;		f_read(fp, s, 1, &rc); /* Get a byte */
 32566                        ;		if (rc != 1)
 32567                        ;			break; /* EOF? */
 32568                        ;		dc = s[0];
 32569                        ;		if (FF_USE_STRFUNC == 2 && dc == '\r')
 32570                        ;			continue;
 32571                        ;		*p++ = (TCHAR) dc;
 32572                        ;		nc++;
 32573                        ;		if (dc == '\n')
 32574                        ;			break;
 32575                        ;	}
 32576                        ;#endif
 32577                        ;
 32578                        ;	*p = 0; /* Terminate the string */
 32579                        	.line	7369
 32580 08:87FD: E2 20        	sep	#$20
 32581                        	longa	off
 32582 08:87FF: A9 00        	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 617


 32583 08:8801: 87 0B        	sta	[<L1321+p_1]
 32584 08:8803: C2 20        	rep	#$20
 32585                        	longa	on
 32586                        ;	return nc ? buff : 0; /* When no data read due t
                    o EOF or error, return with error. */
 32587                        	.line	7370
 32588 08:8805: A5 09        	lda	<L1321+nc_1
 32589 08:8807: D0 03        	bne	L1363
 32590 08:8809: 82 06 00     	brl	L1362
 32591                        L1363:
 32592 08:880C: A6 20        	ldx	<L1320+buff_0+2
 32593 08:880E: A5 1E        	lda	<L1320+buff_0
 32594 08:8810: 80 07        	bra	L1364
 32595                        L1362:
 32596 08:8812: A9 00 00     	lda	#$0
 32597 08:8815: AA           	tax
 32598 08:8816: A9 00 00     	lda	#$0
 32599                        L1364:
 32600 08:8819: 85 01        	sta	<R0
 32601 08:881B: 86 03        	stx	<R0+2
 32602 08:881D: A6 03        	ldx	<R0+2
 32603 08:881F: A5 01        	lda	<R0
 32604                        L1365:
 32605 08:8821: A8           	tay
 32606 08:8822: A5 1C        	lda	<L1320+2
 32607 08:8824: 85 26        	sta	<L1320+2+10
 32608 08:8826: A5 1B        	lda	<L1320+1
 32609 08:8828: 85 25        	sta	<L1320+1+10
 32610 08:882A: 2B           	pld
 32611 08:882B: 3B           	tsc
 32612 08:882C: 18           	clc
 32613 08:882D: 69 24 00     	adc	#L1320+10
 32614 08:8830: 1B           	tcs
 32615 08:8831: 98           	tya
 32616 08:8832: 6B           	rtl
 32617                        ;}
 32618                        	.line	7371
 32619                        	.endblock	7371
 32620             0000001A   L1320	equ	26
 32621             00000009   L1321	equ	9
 32622 08:8833:              	ends
 32623                        	efunc
 32624                        	.endfunc	7371,9,26
 32625                        	.line	7371
 32626                        ;
 32627                        ;#if !FF_FS_READONLY
 32628                        ;#include <stdarg.h>
 32629                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
 32630                        	.line	51
 32631                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",7374
 32632                        ;/*-----------------------------------------------
                    ------------------------*/
 32633                        ;/* Put a Character to the File (sub-functions)   
                                            */
 32634                        ;/*-----------------------------------------------
                    ------------------------*/
  Mon Aug  9 2021 16:52                                                Page 618


 32635                        ;
 32636                        ;/* Putchar output buffer and work area */
 32637                        ;
 32638                        ;typedef struct
 32639                        ;{
 32640                        ;	FIL *fp; /* Ptr to the writing file */
 32641                        ;	int idx, nchr; /* Write index of buf[] (-1:error
                    ), number of encoding units written */
 32642                        ;#if FF_USE_LFN && FF_LFN_UNICODE == 1
 32643                        ;	WCHAR hs;
 32644                        ;#elif FF_USE_LFN && FF_LFN_UNICODE == 2
 32645                        ;	BYTE bs[4];
 32646                        ;	UINT wi, ct;
 32647                        ;#endif
 32648                        ;	BYTE buf[64]; /* Write buffer */
 32649                        ;} putbuff;
 32650                        	.stag	fake131_,640,131
 32651                        	.member	fp,0,138,8,32,77
 32652                        	.member	idx,32,5,8,16
 32653                        	.member	nchr,48,5,8,16
 32654                        	.member	bs,64,110,8,0,4
 32655                        	.member	wi,96,16,8,16
 32656                        	.member	ct,112,16,8,16
 32657                        	.member	buf,128,110,8,0,64
 32658                        	.eos
 32659                        ;
 32660                        ;/* Buffered write with code conversion */
 32661                        ;
 32662                        ;static void putc_bfd(putbuff* pb, TCHAR c)
 32663                        ;{
 32664                        	.line	7396
 32665                        	.line	7397
 32666                        	FFDOS
 32667                        	func
 32668                        	.function	7397
 32669                        ~~putc_bfd:
 32670                        	longa	on
 32671                        	longi	on
 32672 08:8833: 3B           	tsc
 32673 08:8834: 38           	sec
 32674 08:8835: E9 1E 00     	sbc	#L1366
 32675 08:8838: 1B           	tcs
 32676 08:8839: 0B           	phd
 32677 08:883A: 5B           	tcd
 32678             00000004   pb_0	set	4
 32679             00000008   c_0	set	8
 32680                        	.block	7397
 32681                        ;	UINT n;
 32682                        ;	int i, nc;
 32683                        ;#if FF_USE_LFN && FF_LFN_UNICODE
 32684                        ;	WCHAR hs, wc;
 32685                        ;#if FF_LFN_UNICODE == 2
 32686                        ;	DWORD dc;
 32687                        ;	TCHAR *tp;
 32688                        ;#endif
 32689                        ;#endif
 32690                        ;
 32691                        ;	if (FF_USE_STRFUNC == 2 && c == '\n')
  Mon Aug  9 2021 16:52                                                Page 619


 32692             00000000   n_1	set	0
 32693             00000002   i_1	set	2
 32694             00000004   nc_1	set	4
 32695             00000006   hs_1	set	6
 32696             00000008   wc_1	set	8
 32697             0000000A   dc_1	set	10
 32698             0000000E   tp_1	set	14
 32699                        	.sym	n,0,16,1,16
 32700                        	.sym	i,2,5,1,16
 32701                        	.sym	nc,4,5,1,16
 32702                        	.sym	hs,6,16,1,16
 32703                        	.sym	wc,8,16,1,16
 32704                        	.sym	dc,10,18,1,32
 32705                        	.sym	tp,14,142,1,32
 32706                        	.sym	pb,4,138,6,32,131
 32707                        	.sym	c,8,14,6,8
 32708                        	.line	7408
 32709                        ;	{ /* LF -> CRLF conversion */
 32710 08:883B: 82 18 00     	brl	L10807
 32711 08:883E: E2 20        	sep	#$20
 32712                        	longa	off
 32713 08:8840: A5 26        	lda	<L1366+c_0
 32714 08:8842: C9 0A        	cmp	#<$a
 32715 08:8844: C2 20        	rep	#$20
 32716                        	longa	on
 32717 08:8846: F0 03        	beq	L1369
 32718 08:8848: 82 0B 00     	brl	L10807
 32719                        L1369:
 32720                        	.line	7409
 32721                        ;		putc_bfd(pb, '\r');
 32722                        	.line	7410
 32723 08:884B: F4 0D 00     	pea	#<$d
 32724 08:884E: D4 24        	pei	<L1366+pb_0+2
 32725 08:8850: D4 22        	pei	<L1366+pb_0
 32726 08:8852: 22 33 88 08  	jsl	~~putc_bfd
 32727                        ;	}
 32728                        	.line	7411
 32729                        ;
 32730                        ;	i = pb->idx; /* Write index of pb->buf[] */
 32731                        L10807:
 32732                        	.line	7413
 32733 08:8856: A0 04 00     	ldy	#$4
 32734 08:8859: B7 22        	lda	[<L1366+pb_0],Y
 32735 08:885B: 85 0F        	sta	<L1367+i_1
 32736                        ;	if (i < 0)
 32737                        	.line	7414
 32738                        ;		return;
 32739 08:885D: A5 0F        	lda	<L1367+i_1
 32740 08:885F: 30 03        	bmi	L1370
 32741 08:8861: 82 10 00     	brl	L10808
 32742                        L1370:
 32743                        	.line	7415
 32744                        L1371:
 32745 08:8864: A5 20        	lda	<L1366+2
 32746 08:8866: 85 26        	sta	<L1366+2+6
 32747 08:8868: A5 1F        	lda	<L1366+1
 32748 08:886A: 85 25        	sta	<L1366+1+6
 32749 08:886C: 2B           	pld
  Mon Aug  9 2021 16:52                                                Page 620


 32750 08:886D: 3B           	tsc
 32751 08:886E: 18           	clc
 32752 08:886F: 69 24 00     	adc	#L1366+6
 32753 08:8872: 1B           	tcs
 32754 08:8873: 6B           	rtl
 32755                        ;	nc = pb->nchr; /* Write unit counter */
 32756                        L10808:
 32757                        	.line	7416
 32758 08:8874: A0 06 00     	ldy	#$6
 32759 08:8877: B7 22        	lda	[<L1366+pb_0],Y
 32760 08:8879: 85 11        	sta	<L1367+nc_1
 32761                        ;
 32762                        ;#if FF_USE_LFN && FF_LFN_UNICODE
 32763                        ;#if FF_LFN_UNICODE == 1		/* UTF-16 input 
                    */
 32764                        ;	if (IsSurrogateH(c))
 32765                        ;	{ /* High surrogate? */
 32766                        ;		pb->hs = c; return; /* Save it for next 
                    */
 32767                        ;	}
 32768                        ;	hs = pb->hs; pb->hs = 0;
 32769                        ;	if (hs != 0)
 32770                        ;	{ /* There is a leading high surrogate */
 32771                        ;		if (!IsSurrogateL(c)) hs = 0; /* Discard
                     high surrogate if not a surrogate pair */
 32772                        ;	}
 32773                        ;	else
 32774                        ;	{
 32775                        ;		if (IsSurrogateL(c)) return; /* Discard 
                    stray low surrogate */
 32776                        ;	}
 32777                        ;	wc = c;
 32778                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 input *
                    /
 32779                        ;	for (;;)
 32780                        	.line	7435
 32781                        L10811:
 32782                        ;	{
 32783                        	.line	7436
 32784                        ;		if (pb->ct == 0)
 32785                        	.line	7437
 32786                        ;		{ /* Out of multi-byte sequence? */
 32787 08:887B: A0 0E 00     	ldy	#$e
 32788 08:887E: B7 22        	lda	[<L1366+pb_0],Y
 32789 08:8880: F0 03        	beq	L1372
 32790 08:8882: 82 76 00     	brl	L10812
 32791                        L1372:
 32792                        	.line	7438
 32793                        ;			pb->bs[pb->wi = 0] = (BYTE)c; /*
                     Save 1st byte */
 32794                        	.line	7439
 32795 08:8885: A9 00 00     	lda	#$0
 32796 08:8888: A0 0C 00     	ldy	#$c
 32797 08:888B: 97 22        	sta	[<L1366+pb_0],Y
 32798 08:888D: 18           	clc
 32799 08:888E: A9 08 00     	lda	#$8
 32800 08:8891: 69 00 00     	adc	#<$0
 32801 08:8894: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 621


 32802 08:8896: E2 20        	sep	#$20
 32803                        	longa	off
 32804 08:8898: A5 26        	lda	<L1366+c_0
 32805 08:889A: A4 01        	ldy	<R0
 32806 08:889C: 97 22        	sta	[<L1366+pb_0],Y
 32807 08:889E: C2 20        	rep	#$20
 32808                        	longa	on
 32809                        ;			if ((BYTE)c < 0x80) break; /* Si
                    ngle byte? */
 32810                        	.line	7440
 32811 08:88A0: E2 20        	sep	#$20
 32812                        	longa	off
 32813 08:88A2: A5 26        	lda	<L1366+c_0
 32814 08:88A4: C9 80        	cmp	#<$80
 32815 08:88A6: C2 20        	rep	#$20
 32816                        	longa	on
 32817 08:88A8: B0 03        	bcs	L1373
 32818 08:88AA: 82 AC 00     	brl	L10810
 32819                        L1373:
 32820                        ;			if (((BYTE)c & 0xE0) == 0xC0) pb
                    ->ct = 1; /* 2-byte sequence? */
 32821                        	.line	7441
 32822 08:88AD: A5 26        	lda	<L1366+c_0
 32823 08:88AF: 29 E0 00     	and	#<$e0
 32824 08:88B2: 85 01        	sta	<R0
 32825 08:88B4: A5 01        	lda	<R0
 32826 08:88B6: C9 C0 00     	cmp	#<$c0
 32827 08:88B9: F0 03        	beq	L1374
 32828 08:88BB: 82 08 00     	brl	L10813
 32829                        L1374:
 32830                        	.line	7441
 32831 08:88BE: A9 01 00     	lda	#$1
 32832 08:88C1: A0 0E 00     	ldy	#$e
 32833 08:88C4: 97 22        	sta	[<L1366+pb_0],Y
 32834                        ;			if (((BYTE)c & 0xF0) == 0xE0) pb
                    ->ct = 2; /* 3-byte sequence? */
 32835                        L10813:
 32836                        	.line	7442
 32837 08:88C6: A5 26        	lda	<L1366+c_0
 32838 08:88C8: 29 F0 00     	and	#<$f0
 32839 08:88CB: 85 01        	sta	<R0
 32840 08:88CD: A5 01        	lda	<R0
 32841 08:88CF: C9 E0 00     	cmp	#<$e0
 32842 08:88D2: F0 03        	beq	L1375
 32843 08:88D4: 82 08 00     	brl	L10814
 32844                        L1375:
 32845                        	.line	7442
 32846 08:88D7: A9 02 00     	lda	#$2
 32847 08:88DA: A0 0E 00     	ldy	#$e
 32848 08:88DD: 97 22        	sta	[<L1366+pb_0],Y
 32849                        ;			if (((BYTE)c & 0xF1) == 0xF0) pb
                    ->ct = 3; /* 4-byte sequence? */
 32850                        L10814:
 32851                        	.line	7443
 32852 08:88DF: A5 26        	lda	<L1366+c_0
 32853 08:88E1: 29 F1 00     	and	#<$f1
 32854 08:88E4: 85 01        	sta	<R0
 32855 08:88E6: A5 01        	lda	<R0
  Mon Aug  9 2021 16:52                                                Page 622


 32856 08:88E8: C9 F0 00     	cmp	#<$f0
 32857 08:88EB: F0 03        	beq	L1376
 32858 08:88ED: 82 08 00     	brl	L10815
 32859                        L1376:
 32860                        	.line	7443
 32861 08:88F0: A9 03 00     	lda	#$3
 32862 08:88F3: A0 0E 00     	ldy	#$e
 32863 08:88F6: 97 22        	sta	[<L1366+pb_0],Y
 32864                        ;			return;
 32865                        L10815:
 32866                        	.line	7444
 32867 08:88F8: 82 69 FF     	brl	L1371
 32868                        ;		}
 32869                        	.line	7445
 32870                        ;		else
 32871                        L10812:
 32872                        ;		{ /* In the multi-byte sequence */
 32873                        	.line	7447
 32874                        ;			if (((BYTE)c & 0xC0) != 0x80)
 32875                        	.line	7448
 32876                        ;			{ /* Broken sequence? */
 32877 08:88FB: A5 26        	lda	<L1366+c_0
 32878 08:88FD: 29 C0 00     	and	#<$c0
 32879 08:8900: 85 01        	sta	<R0
 32880 08:8902: A5 01        	lda	<R0
 32881 08:8904: C9 80 00     	cmp	#<$80
 32882 08:8907: D0 03        	bne	L1377
 32883 08:8909: 82 0B 00     	brl	L10816
 32884                        L1377:
 32885                        	.line	7449
 32886                        ;				pb->ct = 0; continue;
 32887                        	.line	7450
 32888 08:890C: A9 00 00     	lda	#$0
 32889 08:890F: A0 0E 00     	ldy	#$e
 32890 08:8912: 97 22        	sta	[<L1366+pb_0],Y
 32891                        	.line	7450
 32892 08:8914: 82 3F 00     	brl	L10809
 32893                        ;			}
 32894                        	.line	7451
 32895                        ;			pb->bs[++pb->wi] = (BYTE)c; /* S
                    ave the trailing byte */
 32896                        L10816:
 32897                        	.line	7452
 32898 08:8917: A0 0C 00     	ldy	#$c
 32899 08:891A: B7 22        	lda	[<L1366+pb_0],Y
 32900 08:891C: 1A           	ina
 32901 08:891D: A0 0C 00     	ldy	#$c
 32902 08:8920: 97 22        	sta	[<L1366+pb_0],Y
 32903 08:8922: A0 0C 00     	ldy	#$c
 32904 08:8925: B7 22        	lda	[<L1366+pb_0],Y
 32905 08:8927: 85 01        	sta	<R0
 32906 08:8929: 18           	clc
 32907 08:892A: A9 08 00     	lda	#$8
 32908 08:892D: 65 01        	adc	<R0
 32909 08:892F: 85 05        	sta	<R1
 32910 08:8931: E2 20        	sep	#$20
 32911                        	longa	off
 32912 08:8933: A5 26        	lda	<L1366+c_0
  Mon Aug  9 2021 16:52                                                Page 623


 32913 08:8935: A4 05        	ldy	<R1
 32914 08:8937: 97 22        	sta	[<L1366+pb_0],Y
 32915 08:8939: C2 20        	rep	#$20
 32916                        	longa	on
 32917                        ;			if (--pb->ct == 0) break; /* End
                     of multi-byte sequence? */
 32918                        	.line	7453
 32919 08:893B: 18           	clc
 32920 08:893C: A9 FF FF     	lda	#$ffff
 32921 08:893F: A0 0E 00     	ldy	#$e
 32922 08:8942: 77 22        	adc	[<L1366+pb_0],Y
 32923 08:8944: A0 0E 00     	ldy	#$e
 32924 08:8947: 97 22        	sta	[<L1366+pb_0],Y
 32925 08:8949: A0 0E 00     	ldy	#$e
 32926 08:894C: B7 22        	lda	[<L1366+pb_0],Y
 32927 08:894E: D0 03        	bne	L1378
 32928 08:8950: 82 06 00     	brl	L10810
 32929                        L1378:
 32930                        ;			return;
 32931                        	.line	7454
 32932 08:8953: 82 0E FF     	brl	L1371
 32933                        ;		}
 32934                        	.line	7455
 32935                        ;	}
 32936                        	.line	7456
 32937                        L10809:
 32938 08:8956: 82 22 FF     	brl	L10811
 32939                        L10810:
 32940                        ;	tp = (TCHAR*)pb->bs;
 32941                        	.line	7457
 32942 08:8959: 18           	clc
 32943 08:895A: A9 08 00     	lda	#$8
 32944 08:895D: 65 22        	adc	<L1366+pb_0
 32945 08:895F: 85 1B        	sta	<L1367+tp_1
 32946 08:8961: A9 00 00     	lda	#$0
 32947 08:8964: 65 24        	adc	<L1366+pb_0+2
 32948 08:8966: 85 1D        	sta	<L1367+tp_1+2
 32949                        ;	dc = tchar2uni(&tp); /* UTF-8 ==> UTF-16 */
 32950                        	.line	7458
 32951 08:8968: F4 00 00     	pea	#0
 32952 08:896B: 18           	clc
 32953 08:896C: 7B           	tdc
 32954 08:896D: 69 1B 00     	adc	#<L1367+tp_1
 32955 08:8970: 48           	pha
 32956 08:8971: 22 11 03 08  	jsl	~~tchar2uni
 32957 08:8975: 85 17        	sta	<L1367+dc_1
 32958 08:8977: 86 19        	stx	<L1367+dc_1+2
 32959                        ;	if (dc == 0xFFFFFFFF) return; /* Wrong code? */
 32960                        	.line	7459
 32961 08:8979: A5 17        	lda	<L1367+dc_1
 32962 08:897B: C9 FF FF     	cmp	#<$ffffffff
 32963 08:897E: D0 05        	bne	L1379
 32964 08:8980: A5 19        	lda	<L1367+dc_1+2
 32965 08:8982: C9 FF FF     	cmp	#^$ffffffff
 32966                        L1379:
 32967 08:8985: F0 03        	beq	L1380
 32968 08:8987: 82 03 00     	brl	L10817
 32969                        L1380:
  Mon Aug  9 2021 16:52                                                Page 624


 32970                        	.line	7459
 32971 08:898A: 82 D7 FE     	brl	L1371
 32972                        ;	wc = (WCHAR)dc;
 32973                        L10817:
 32974                        	.line	7460
 32975 08:898D: A5 17        	lda	<L1367+dc_1
 32976 08:898F: 85 15        	sta	<L1367+wc_1
 32977                        ;	hs = (WCHAR)(dc >> 16);
 32978                        	.line	7461
 32979 08:8991: D4 19        	pei	<L1367+dc_1+2
 32980 08:8993: D4 17        	pei	<L1367+dc_1
 32981 08:8995: A9 10 00     	lda	#$10
 32982                        	xref	~~~llsr
 32983 08:8998: 22 xx xx xx  	jsl	~~~llsr
 32984 08:899C: 85 01        	sta	<R0
 32985 08:899E: 86 03        	stx	<R0+2
 32986 08:89A0: A5 01        	lda	<R0
 32987 08:89A2: 85 13        	sta	<L1367+hs_1
 32988                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 input 
                    */
 32989                        ;	if (IsSurrogate(c) || c >= 0x110000) return; /* 
                    Discard invalid code */
 32990                        ;	if (c >= 0x10000)
 32991                        ;	{ /* Out of BMP? */
 32992                        ;		hs = (WCHAR)(0xD800 | ((c >> 10) - 0x40)
                    ); /* Make high surrogate */
 32993                        ;		wc = 0xDC00 | (c & 0x3FF); /* Make low s
                    urrogate */
 32994                        ;	}
 32995                        ;	else
 32996                        ;	{
 32997                        ;		hs = 0;
 32998                        ;		wc = (WCHAR)c;
 32999                        ;	}
 33000                        ;#endif
 33001                        ;	/* A code point in UTF-16 is available in hs and
                     wc */
 33002                        ;
 33003                        ;#if FF_STRF_ENCODE == 1		/* Write a code 
                    point in UTF-16LE */
 33004                        ;	if (hs != 0)
 33005                        ;	{ /* Surrogate pair? */
 33006                        ;		st_word(&pb->buf[i], hs);
 33007                        ;		i += 2;
 33008                        ;		nc++;
 33009                        ;	}
 33010                        ;	st_word(&pb->buf[i], wc);
 33011                        ;	i += 2;
 33012                        ;#elif FF_STRF_ENCODE == 2	/* Write a code 
                    point in UTF-16BE */
 33013                        ;	if (hs != 0)
 33014                        ;	{ /* Surrogate pair? */
 33015                        ;		pb->buf[i++] = (BYTE)(hs >> 8);
 33016                        ;		pb->buf[i++] = (BYTE)hs;
 33017                        ;		nc++;
 33018                        ;	}
 33019                        ;	pb->buf[i++] = (BYTE)(wc >> 8);
 33020                        ;	pb->buf[i++] = (BYTE)wc;
  Mon Aug  9 2021 16:52                                                Page 625


 33021                        ;#elif FF_STRF_ENCODE == 3	/* Write a code 
                    point in UTF-8 */
 33022                        ;	if (hs != 0)
 33023                        	.line	7496
 33024                        ;	{ /* 4-byte sequence? */
 33025 08:89A4: A5 13        	lda	<L1367+hs_1
 33026 08:89A6: D0 03        	bne	L1381
 33027 08:89A8: 82 9F 00     	brl	L10818
 33028                        L1381:
 33029                        	.line	7497
 33030                        ;		nc += 3;
 33031                        	.line	7498
 33032 08:89AB: E6 11        	inc	<L1367+nc_1
 33033 08:89AD: E6 11        	inc	<L1367+nc_1
 33034 08:89AF: E6 11        	inc	<L1367+nc_1
 33035                        ;		hs = (hs & 0x3FF) + 0x40;
 33036                        	.line	7499
 33037 08:89B1: A5 13        	lda	<L1367+hs_1
 33038 08:89B3: 29 FF 03     	and	#<$3ff
 33039 08:89B6: 85 01        	sta	<R0
 33040 08:89B8: 18           	clc
 33041 08:89B9: A9 40 00     	lda	#$40
 33042 08:89BC: 65 01        	adc	<R0
 33043 08:89BE: 85 13        	sta	<L1367+hs_1
 33044                        ;		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
 33045                        	.line	7500
 33046 08:89C0: 18           	clc
 33047 08:89C1: A9 10 00     	lda	#$10
 33048 08:89C4: 65 0F        	adc	<L1367+i_1
 33049 08:89C6: 85 01        	sta	<R0
 33050 08:89C8: A5 13        	lda	<L1367+hs_1
 33051 08:89CA: EB           	xba
 33052 08:89CB: 29 FF 00     	and	#$00ff
 33053 08:89CE: 09 F0 00     	ora	#<$f0
 33054 08:89D1: E2 20        	sep	#$20
 33055                        	longa	off
 33056 08:89D3: A4 01        	ldy	<R0
 33057 08:89D5: 97 22        	sta	[<L1366+pb_0],Y
 33058 08:89D7: C2 20        	rep	#$20
 33059                        	longa	on
 33060 08:89D9: E6 0F        	inc	<L1367+i_1
 33061                        ;		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 
                    0x3F));
 33062                        	.line	7501
 33063 08:89DB: 18           	clc
 33064 08:89DC: A9 10 00     	lda	#$10
 33065 08:89DF: 65 0F        	adc	<L1367+i_1
 33066 08:89E1: 85 01        	sta	<R0
 33067 08:89E3: A5 13        	lda	<L1367+hs_1
 33068 08:89E5: 4A           	lsr	A
 33069 08:89E6: 4A           	lsr	A
 33070 08:89E7: 29 3F 00     	and	#<$3f
 33071 08:89EA: 09 80 00     	ora	#<$80
 33072 08:89ED: E2 20        	sep	#$20
 33073                        	longa	off
 33074 08:89EF: A4 01        	ldy	<R0
 33075 08:89F1: 97 22        	sta	[<L1366+pb_0],Y
 33076 08:89F3: C2 20        	rep	#$20
  Mon Aug  9 2021 16:52                                                Page 626


 33077                        	longa	on
 33078 08:89F5: E6 0F        	inc	<L1367+i_1
 33079                        ;		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) <<
                     4 | (wc >> 6 & 0x0F));
 33080                        	.line	7502
 33081 08:89F7: 18           	clc
 33082 08:89F8: A9 10 00     	lda	#$10
 33083 08:89FB: 65 0F        	adc	<L1367+i_1
 33084 08:89FD: 85 01        	sta	<R0
 33085 08:89FF: A5 13        	lda	<L1367+hs_1
 33086 08:8A01: 29 03 00     	and	#<$3
 33087 08:8A04: 85 09        	sta	<R2
 33088 08:8A06: A5 09        	lda	<R2
 33089 08:8A08: 0A           	asl	A
 33090 08:8A09: 0A           	asl	A
 33091 08:8A0A: 0A           	asl	A
 33092 08:8A0B: 0A           	asl	A
 33093 08:8A0C: 85 05        	sta	<R1
 33094 08:8A0E: A5 15        	lda	<L1367+wc_1
 33095 08:8A10: A2 06 00     	ldx	#<$6
 33096                        	xref	~~~lsr
 33097 08:8A13: 22 xx xx xx  	jsl	~~~lsr
 33098 08:8A17: 29 0F 00     	and	#<$f
 33099 08:8A1A: 85 09        	sta	<R2
 33100 08:8A1C: A5 09        	lda	<R2
 33101 08:8A1E: 05 05        	ora	<R1
 33102 08:8A20: 09 80 00     	ora	#<$80
 33103 08:8A23: E2 20        	sep	#$20
 33104                        	longa	off
 33105 08:8A25: A4 01        	ldy	<R0
 33106 08:8A27: 97 22        	sta	[<L1366+pb_0],Y
 33107 08:8A29: C2 20        	rep	#$20
 33108                        	longa	on
 33109 08:8A2B: E6 0F        	inc	<L1367+i_1
 33110                        ;		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F)
                    );
 33111                        	.line	7503
 33112 08:8A2D: 18           	clc
 33113 08:8A2E: A9 10 00     	lda	#$10
 33114 08:8A31: 65 0F        	adc	<L1367+i_1
 33115 08:8A33: 85 01        	sta	<R0
 33116 08:8A35: A5 15        	lda	<L1367+wc_1
 33117 08:8A37: 29 3F 00     	and	#<$3f
 33118 08:8A3A: 09 80 00     	ora	#<$80
 33119 08:8A3D: E2 20        	sep	#$20
 33120                        	longa	off
 33121 08:8A3F: A4 01        	ldy	<R0
 33122 08:8A41: 97 22        	sta	[<L1366+pb_0],Y
 33123 08:8A43: C2 20        	rep	#$20
 33124                        	longa	on
 33125 08:8A45: E6 0F        	inc	<L1367+i_1
 33126                        ;	}
 33127                        	.line	7504
 33128                        ;	else
 33129 08:8A47: 82 AB 00     	brl	L10819
 33130                        L10818:
 33131                        ;	{
 33132                        	.line	7506
  Mon Aug  9 2021 16:52                                                Page 627


 33133                        ;		if (wc < 0x80)
 33134                        	.line	7507
 33135                        ;		{ /* Single byte? */
 33136 08:8A4A: A5 15        	lda	<L1367+wc_1
 33137 08:8A4C: C9 80 00     	cmp	#<$80
 33138 08:8A4F: 90 03        	bcc	L1382
 33139 08:8A51: 82 17 00     	brl	L10820
 33140                        L1382:
 33141                        	.line	7508
 33142                        ;			pb->buf[i++] = (BYTE)wc;
 33143                        	.line	7509
 33144 08:8A54: 18           	clc
 33145 08:8A55: A9 10 00     	lda	#$10
 33146 08:8A58: 65 0F        	adc	<L1367+i_1
 33147 08:8A5A: 85 01        	sta	<R0
 33148 08:8A5C: E2 20        	sep	#$20
 33149                        	longa	off
 33150 08:8A5E: A5 15        	lda	<L1367+wc_1
 33151 08:8A60: A4 01        	ldy	<R0
 33152 08:8A62: 97 22        	sta	[<L1366+pb_0],Y
 33153 08:8A64: C2 20        	rep	#$20
 33154                        	longa	on
 33155 08:8A66: E6 0F        	inc	<L1367+i_1
 33156                        ;		}
 33157                        	.line	7510
 33158                        ;		else
 33159 08:8A68: 82 8A 00     	brl	L10821
 33160                        L10820:
 33161                        ;		{
 33162                        	.line	7512
 33163                        ;			if (wc < 0x800)
 33164                        	.line	7513
 33165                        ;			{ /* 2-byte sequence? */
 33166 08:8A6B: A5 15        	lda	<L1367+wc_1
 33167 08:8A6D: C9 00 08     	cmp	#<$800
 33168 08:8A70: 90 03        	bcc	L1383
 33169 08:8A72: 82 23 00     	brl	L10822
 33170                        L1383:
 33171                        	.line	7514
 33172                        ;				nc += 1;
 33173                        	.line	7515
 33174 08:8A75: E6 11        	inc	<L1367+nc_1
 33175                        ;				pb->buf[i++] = (BYTE)(0x
                    C0 | wc >> 6);
 33176                        	.line	7516
 33177 08:8A77: 18           	clc
 33178 08:8A78: A9 10 00     	lda	#$10
 33179 08:8A7B: 65 0F        	adc	<L1367+i_1
 33180 08:8A7D: 85 01        	sta	<R0
 33181 08:8A7F: A5 15        	lda	<L1367+wc_1
 33182 08:8A81: A2 06 00     	ldx	#<$6
 33183                        	xref	~~~lsr
 33184 08:8A84: 22 xx xx xx  	jsl	~~~lsr
 33185 08:8A88: 09 C0 00     	ora	#<$c0
 33186 08:8A8B: E2 20        	sep	#$20
 33187                        	longa	off
 33188 08:8A8D: A4 01        	ldy	<R0
 33189 08:8A8F: 97 22        	sta	[<L1366+pb_0],Y
  Mon Aug  9 2021 16:52                                                Page 628


 33190 08:8A91: C2 20        	rep	#$20
 33191                        	longa	on
 33192 08:8A93: E6 0F        	inc	<L1367+i_1
 33193                        ;			}
 33194                        	.line	7517
 33195                        ;			else
 33196 08:8A95: 82 43 00     	brl	L10823
 33197                        L10822:
 33198                        ;			{ /* 3-byte sequence */
 33199                        	.line	7519
 33200                        ;				nc += 2;
 33201                        	.line	7520
 33202 08:8A98: E6 11        	inc	<L1367+nc_1
 33203 08:8A9A: E6 11        	inc	<L1367+nc_1
 33204                        ;				pb->buf[i++] = (BYTE)(0x
                    E0 | wc >> 12);
 33205                        	.line	7521
 33206 08:8A9C: 18           	clc
 33207 08:8A9D: A9 10 00     	lda	#$10
 33208 08:8AA0: 65 0F        	adc	<L1367+i_1
 33209 08:8AA2: 85 01        	sta	<R0
 33210 08:8AA4: A5 15        	lda	<L1367+wc_1
 33211 08:8AA6: A2 0C 00     	ldx	#<$c
 33212                        	xref	~~~lsr
 33213 08:8AA9: 22 xx xx xx  	jsl	~~~lsr
 33214 08:8AAD: 09 E0 00     	ora	#<$e0
 33215 08:8AB0: E2 20        	sep	#$20
 33216                        	longa	off
 33217 08:8AB2: A4 01        	ldy	<R0
 33218 08:8AB4: 97 22        	sta	[<L1366+pb_0],Y
 33219 08:8AB6: C2 20        	rep	#$20
 33220                        	longa	on
 33221 08:8AB8: E6 0F        	inc	<L1367+i_1
 33222                        ;				pb->buf[i++] = (BYTE)(0x
                    80 | (wc >> 6 & 0x3F));
 33223                        	.line	7522
 33224 08:8ABA: 18           	clc
 33225 08:8ABB: A9 10 00     	lda	#$10
 33226 08:8ABE: 65 0F        	adc	<L1367+i_1
 33227 08:8AC0: 85 01        	sta	<R0
 33228 08:8AC2: A5 15        	lda	<L1367+wc_1
 33229 08:8AC4: A2 06 00     	ldx	#<$6
 33230                        	xref	~~~lsr
 33231 08:8AC7: 22 xx xx xx  	jsl	~~~lsr
 33232 08:8ACB: 29 3F 00     	and	#<$3f
 33233 08:8ACE: 09 80 00     	ora	#<$80
 33234 08:8AD1: E2 20        	sep	#$20
 33235                        	longa	off
 33236 08:8AD3: A4 01        	ldy	<R0
 33237 08:8AD5: 97 22        	sta	[<L1366+pb_0],Y
 33238 08:8AD7: C2 20        	rep	#$20
 33239                        	longa	on
 33240 08:8AD9: E6 0F        	inc	<L1367+i_1
 33241                        ;			}
 33242                        	.line	7523
 33243                        L10823:
 33244                        ;			pb->buf[i++] = (BYTE)(0x80 | (wc
                     & 0x3F));
  Mon Aug  9 2021 16:52                                                Page 629


 33245                        	.line	7524
 33246 08:8ADB: 18           	clc
 33247 08:8ADC: A9 10 00     	lda	#$10
 33248 08:8ADF: 65 0F        	adc	<L1367+i_1
 33249 08:8AE1: 85 01        	sta	<R0
 33250 08:8AE3: A5 15        	lda	<L1367+wc_1
 33251 08:8AE5: 29 3F 00     	and	#<$3f
 33252 08:8AE8: 09 80 00     	ora	#<$80
 33253 08:8AEB: E2 20        	sep	#$20
 33254                        	longa	off
 33255 08:8AED: A4 01        	ldy	<R0
 33256 08:8AEF: 97 22        	sta	[<L1366+pb_0],Y
 33257 08:8AF1: C2 20        	rep	#$20
 33258                        	longa	on
 33259 08:8AF3: E6 0F        	inc	<L1367+i_1
 33260                        ;		}
 33261                        	.line	7525
 33262                        L10821:
 33263                        ;	}
 33264                        	.line	7526
 33265                        L10819:
 33266                        ;#else						
                    /* Write a code point in ANSI/OEM */
 33267                        ;	if (hs != 0) return;
 33268                        ;	wc = ff_uni2oem(wc, CODEPAGE); /* UTF-16 ==> ANS
                    I/OEM */
 33269                        ;	if (wc == 0) return;
 33270                        ;	if (wc >= 0x100)
 33271                        ;	{
 33272                        ;		pb->buf[i++] = (BYTE)(wc >> 8); nc++;
 33273                        ;	}
 33274                        ;	pb->buf[i++] = (BYTE)wc;
 33275                        ;#endif
 33276                        ;
 33277                        ;#else						
                    			/* ANSI/OEM input (without re-encoding) 
                    */
 33278                        ;	pb->buf[i++] = (BYTE) c;
 33279                        ;#endif
 33280                        ;
 33281                        ;	if (i >= (int) (sizeof pb->buf) - 4)
 33282                        	.line	7542
 33283                        ;	{ /* Write buffered characters to the file */
 33284 08:8AF5: 38           	sec
 33285 08:8AF6: A5 0F        	lda	<L1367+i_1
 33286 08:8AF8: E9 3C 00     	sbc	#<$3c
 33287 08:8AFB: 70 03        	bvs	L1384
 33288 08:8AFD: 49 00 80     	eor	#$8000
 33289                        L1384:
 33290 08:8B00: 30 03        	bmi	L1385
 33291 08:8B02: 82 3E 00     	brl	L10824
 33292                        L1385:
 33293                        	.line	7543
 33294                        ;		f_write(pb->fp, pb->buf, (UINT) i, &n);
 33295                        	.line	7544
 33296 08:8B05: F4 00 00     	pea	#0
 33297 08:8B08: 18           	clc
 33298 08:8B09: 7B           	tdc
  Mon Aug  9 2021 16:52                                                Page 630


 33299 08:8B0A: 69 0D 00     	adc	#<L1367+n_1
 33300 08:8B0D: 48           	pha
 33301 08:8B0E: D4 0F        	pei	<L1367+i_1
 33302 08:8B10: 18           	clc
 33303 08:8B11: A9 10 00     	lda	#$10
 33304 08:8B14: 65 22        	adc	<L1366+pb_0
 33305 08:8B16: 85 01        	sta	<R0
 33306 08:8B18: A9 00 00     	lda	#$0
 33307 08:8B1B: 65 24        	adc	<L1366+pb_0+2
 33308 08:8B1D: 85 03        	sta	<R0+2
 33309 08:8B1F: D4 03        	pei	<R0+2
 33310 08:8B21: D4 01        	pei	<R0
 33311 08:8B23: A0 02 00     	ldy	#$2
 33312 08:8B26: B7 22        	lda	[<L1366+pb_0],Y
 33313 08:8B28: 48           	pha
 33314 08:8B29: A7 22        	lda	[<L1366+pb_0]
 33315 08:8B2B: 48           	pha
 33316 08:8B2C: 22 A4 4E 08  	jsl	~~f_write
 33317                        ;		i = (n == (UINT) i) ? 0 : -1;
 33318                        	.line	7545
 33319 08:8B30: A5 0D        	lda	<L1367+n_1
 33320 08:8B32: C5 0F        	cmp	<L1367+i_1
 33321 08:8B34: F0 03        	beq	L1387
 33322 08:8B36: 82 05 00     	brl	L1386
 33323                        L1387:
 33324 08:8B39: A9 00 00     	lda	#$0
 33325 08:8B3C: 80 03        	bra	L1388
 33326                        L1386:
 33327 08:8B3E: A9 FF FF     	lda	#$ffff
 33328                        L1388:
 33329 08:8B41: 85 0F        	sta	<L1367+i_1
 33330                        ;	}
 33331                        	.line	7546
 33332                        ;	pb->idx = i;
 33333                        L10824:
 33334                        	.line	7547
 33335 08:8B43: A5 0F        	lda	<L1367+i_1
 33336 08:8B45: A0 04 00     	ldy	#$4
 33337 08:8B48: 97 22        	sta	[<L1366+pb_0],Y
 33338                        ;	pb->nchr = nc + 1;
 33339                        	.line	7548
 33340 08:8B4A: A5 11        	lda	<L1367+nc_1
 33341 08:8B4C: 1A           	ina
 33342 08:8B4D: A0 06 00     	ldy	#$6
 33343 08:8B50: 97 22        	sta	[<L1366+pb_0],Y
 33344                        ;}
 33345                        	.line	7549
 33346 08:8B52: 82 0F FD     	brl	L1371
 33347                        	.endblock	7549
 33348             0000001E   L1366	equ	30
 33349             0000000D   L1367	equ	13
 33350 08:8B55:              	ends
 33351                        	efunc
 33352                        	.endfunc	7549,13,30
 33353                        	.line	7549
 33354                        ;
 33355                        ;/* Flush remaining characters in the buffer */
 33356                        ;
  Mon Aug  9 2021 16:52                                                Page 631


 33357                        ;static int putc_flush(putbuff* pb)
 33358                        ;{
 33359                        	.line	7553
 33360                        	.line	7554
 33361                        	FFDOS
 33362                        	func
 33363                        	.function	7554
 33364                        ~~putc_flush:
 33365                        	longa	on
 33366                        	longi	on
 33367 08:8B55: 3B           	tsc
 33368 08:8B56: 38           	sec
 33369 08:8B57: E9 06 00     	sbc	#L1389
 33370 08:8B5A: 1B           	tcs
 33371 08:8B5B: 0B           	phd
 33372 08:8B5C: 5B           	tcd
 33373             00000004   pb_0	set	4
 33374                        	.block	7554
 33375                        ;	UINT nw;
 33376                        ;
 33377                        ;	if (pb->idx >= 0 /* Flush buffered characters to
                     the file */
 33378             00000000   nw_1	set	0
 33379                        	.sym	nw,0,16,1,16
 33380                        	.sym	pb,4,138,6,32,131
 33381                        	.line	7557
 33382                        ;	&& f_write(pb->fp, pb->buf, (UINT) pb->idx, &nw)
                     == FR_OK
 33383                        ;			&& (UINT) pb->idx == nw)
 33384                        ;		return pb->nchr;
 33385 08:8B5D: A0 04 00     	ldy	#$4
 33386 08:8B60: B7 0A        	lda	[<L1389+pb_0],Y
 33387 08:8B62: 10 03        	bpl	L1392
 33388 08:8B64: 82 58 00     	brl	L10825
 33389                        L1392:
 33390 08:8B67: F4 00 00     	pea	#0
 33391 08:8B6A: 18           	clc
 33392 08:8B6B: 7B           	tdc
 33393 08:8B6C: 69 05 00     	adc	#<L1390+nw_1
 33394 08:8B6F: 48           	pha
 33395 08:8B70: A0 04 00     	ldy	#$4
 33396 08:8B73: B7 0A        	lda	[<L1389+pb_0],Y
 33397 08:8B75: 48           	pha
 33398 08:8B76: 18           	clc
 33399 08:8B77: A9 10 00     	lda	#$10
 33400 08:8B7A: 65 0A        	adc	<L1389+pb_0
 33401 08:8B7C: 85 01        	sta	<R0
 33402 08:8B7E: A9 00 00     	lda	#$0
 33403 08:8B81: 65 0C        	adc	<L1389+pb_0+2
 33404 08:8B83: 85 03        	sta	<R0+2
 33405 08:8B85: D4 03        	pei	<R0+2
 33406 08:8B87: D4 01        	pei	<R0
 33407 08:8B89: A0 02 00     	ldy	#$2
 33408 08:8B8C: B7 0A        	lda	[<L1389+pb_0],Y
 33409 08:8B8E: 48           	pha
 33410 08:8B8F: A7 0A        	lda	[<L1389+pb_0]
 33411 08:8B91: 48           	pha
 33412 08:8B92: 22 A4 4E 08  	jsl	~~f_write
  Mon Aug  9 2021 16:52                                                Page 632


 33413 08:8B96: AA           	tax
 33414 08:8B97: F0 03        	beq	L1393
 33415 08:8B99: 82 23 00     	brl	L10825
 33416                        L1393:
 33417 08:8B9C: A0 04 00     	ldy	#$4
 33418 08:8B9F: B7 0A        	lda	[<L1389+pb_0],Y
 33419 08:8BA1: C5 05        	cmp	<L1390+nw_1
 33420 08:8BA3: F0 03        	beq	L1394
 33421 08:8BA5: 82 17 00     	brl	L10825
 33422                        L1394:
 33423                        	.line	7560
 33424 08:8BA8: A0 06 00     	ldy	#$6
 33425 08:8BAB: B7 0A        	lda	[<L1389+pb_0],Y
 33426                        L1395:
 33427 08:8BAD: A8           	tay
 33428 08:8BAE: A5 08        	lda	<L1389+2
 33429 08:8BB0: 85 0C        	sta	<L1389+2+4
 33430 08:8BB2: A5 07        	lda	<L1389+1
 33431 08:8BB4: 85 0B        	sta	<L1389+1+4
 33432 08:8BB6: 2B           	pld
 33433 08:8BB7: 3B           	tsc
 33434 08:8BB8: 18           	clc
 33435 08:8BB9: 69 0A 00     	adc	#L1389+4
 33436 08:8BBC: 1B           	tcs
 33437 08:8BBD: 98           	tya
 33438 08:8BBE: 6B           	rtl
 33439                        ;	return EOF;
 33440                        L10825:
 33441                        	.line	7561
 33442 08:8BBF: A9 FF FF     	lda	#$ffff
 33443 08:8BC2: 82 E8 FF     	brl	L1395
 33444                        ;}
 33445                        	.line	7562
 33446                        	.endblock	7562
 33447             00000006   L1389	equ	6
 33448             00000005   L1390	equ	5
 33449 08:8BC5:              	ends
 33450                        	efunc
 33451                        	.endfunc	7562,5,6
 33452                        	.line	7562
 33453                        ;
 33454                        ;/* Initialize write buffer */
 33455                        ;
 33456                        ;static void putc_init(putbuff* pb, FIL* fp)
 33457                        ;{
 33458                        	.line	7566
 33459                        	.line	7567
 33460                        	FFDOS
 33461                        	func
 33462                        	.function	7567
 33463                        ~~putc_init:
 33464                        	longa	on
 33465                        	longi	on
 33466 08:8BC5: 3B           	tsc
 33467 08:8BC6: 38           	sec
 33468 08:8BC7: E9 00 00     	sbc	#L1396
 33469 08:8BCA: 1B           	tcs
 33470 08:8BCB: 0B           	phd
  Mon Aug  9 2021 16:52                                                Page 633


 33471 08:8BCC: 5B           	tcd
 33472             00000004   pb_0	set	4
 33473             00000008   fp_0	set	8
 33474                        	.block	7567
 33475                        ;	mem_set(pb, 0, sizeof(putbuff));
 33476                        	.sym	pb,4,138,6,32,131
 33477                        	.sym	fp,8,138,6,32,77
 33478                        	.line	7568
 33479 08:8BCD: F4 50 00     	pea	#<$50
 33480 08:8BD0: F4 00 00     	pea	#<$0
 33481 08:8BD3: D4 06        	pei	<L1396+pb_0+2
 33482 08:8BD5: D4 04        	pei	<L1396+pb_0
 33483 08:8BD7: 22 DF 01 08  	jsl	~~mem_set
 33484                        ;	pb->fp = fp;
 33485                        	.line	7569
 33486 08:8BDB: A5 08        	lda	<L1396+fp_0
 33487 08:8BDD: 87 04        	sta	[<L1396+pb_0]
 33488 08:8BDF: A5 0A        	lda	<L1396+fp_0+2
 33489 08:8BE1: A0 02 00     	ldy	#$2
 33490 08:8BE4: 97 04        	sta	[<L1396+pb_0],Y
 33491                        ;}
 33492                        	.line	7570
 33493                        L1399:
 33494 08:8BE6: A5 02        	lda	<L1396+2
 33495 08:8BE8: 85 0A        	sta	<L1396+2+8
 33496 08:8BEA: A5 01        	lda	<L1396+1
 33497 08:8BEC: 85 09        	sta	<L1396+1+8
 33498 08:8BEE: 2B           	pld
 33499 08:8BEF: 3B           	tsc
 33500 08:8BF0: 18           	clc
 33501 08:8BF1: 69 08 00     	adc	#L1396+8
 33502 08:8BF4: 1B           	tcs
 33503 08:8BF5: 6B           	rtl
 33504                        	.endblock	7570
 33505             00000000   L1396	equ	0
 33506             00000001   L1397	equ	1
 33507 08:8BF6:              	ends
 33508                        	efunc
 33509                        	.endfunc	7570,1,0
 33510                        	.line	7570
 33511                        ;
 33512                        ;int f_putc(TCHAR c, /* A character to be output *
                    /
 33513                        ;FIL* fp /* Pointer to the file object */
 33514                        ;)
 33515                        ;{
 33516                        	.line	7572
 33517                        	.line	7575
 33518                        	FFDOS
 33519                        	xdef	~~f_putc
 33520                        	func
 33521                        	.function	7575
 33522                        ~~f_putc:
 33523                        	longa	on
 33524                        	longi	on
 33525 08:8BF6: 3B           	tsc
 33526 08:8BF7: 38           	sec
 33527 08:8BF8: E9 50 00     	sbc	#L1400
  Mon Aug  9 2021 16:52                                                Page 634


 33528 08:8BFB: 1B           	tcs
 33529 08:8BFC: 0B           	phd
 33530 08:8BFD: 5B           	tcd
 33531             00000004   c_0	set	4
 33532             00000006   fp_0	set	6
 33533                        	.block	7575
 33534                        ;	putbuff pb;
 33535                        ;
 33536                        ;	putc_init(&pb, fp);
 33537             00000000   pb_1	set	0
 33538                        	.sym	pb,0,10,1,640,131
 33539                        	.sym	c,4,14,6,8
 33540                        	.sym	fp,6,138,6,32,77
 33541                        	.line	7578
 33542 08:8BFE: D4 58        	pei	<L1400+fp_0+2
 33543 08:8C00: D4 56        	pei	<L1400+fp_0
 33544 08:8C02: F4 00 00     	pea	#0
 33545 08:8C05: 18           	clc
 33546 08:8C06: 7B           	tdc
 33547 08:8C07: 69 01 00     	adc	#<L1401+pb_1
 33548 08:8C0A: 48           	pha
 33549 08:8C0B: 22 C5 8B 08  	jsl	~~putc_init
 33550                        ;	putc_bfd(&pb, c); /* Put the character */
 33551                        	.line	7579
 33552 08:8C0F: D4 54        	pei	<L1400+c_0
 33553 08:8C11: F4 00 00     	pea	#0
 33554 08:8C14: 18           	clc
 33555 08:8C15: 7B           	tdc
 33556 08:8C16: 69 01 00     	adc	#<L1401+pb_1
 33557 08:8C19: 48           	pha
 33558 08:8C1A: 22 33 88 08  	jsl	~~putc_bfd
 33559                        ;	return putc_flush(&pb);
 33560                        	.line	7580
 33561 08:8C1E: F4 00 00     	pea	#0
 33562 08:8C21: 18           	clc
 33563 08:8C22: 7B           	tdc
 33564 08:8C23: 69 01 00     	adc	#<L1401+pb_1
 33565 08:8C26: 48           	pha
 33566 08:8C27: 22 55 8B 08  	jsl	~~putc_flush
 33567                        L1403:
 33568 08:8C2B: A8           	tay
 33569 08:8C2C: A5 52        	lda	<L1400+2
 33570 08:8C2E: 85 58        	sta	<L1400+2+6
 33571 08:8C30: A5 51        	lda	<L1400+1
 33572 08:8C32: 85 57        	sta	<L1400+1+6
 33573 08:8C34: 2B           	pld
 33574 08:8C35: 3B           	tsc
 33575 08:8C36: 18           	clc
 33576 08:8C37: 69 56 00     	adc	#L1400+6
 33577 08:8C3A: 1B           	tcs
 33578 08:8C3B: 98           	tya
 33579 08:8C3C: 6B           	rtl
 33580                        ;}
 33581                        	.line	7581
 33582                        	.endblock	7581
 33583             00000050   L1400	equ	80
 33584             00000001   L1401	equ	1
 33585 08:8C3D:              	ends
  Mon Aug  9 2021 16:52                                                Page 635


 33586                        	efunc
 33587                        	.endfunc	7581,1,80
 33588                        	.line	7581
 33589                        ;
 33590                        ;/*-----------------------------------------------
                    ------------------------*/
 33591                        ;/* Put a String to the File                      
                                            */
 33592                        ;/*-----------------------------------------------
                    ------------------------*/
 33593                        ;
 33594                        ;int f_puts(const TCHAR* str, /* Pointer to the st
                    ring to be output */
 33595                        ;FIL* fp /* Pointer to the file object */
 33596                        ;)
 33597                        ;{
 33598                        	.line	7587
 33599                        	.line	7590
 33600                        	FFDOS
 33601                        	xdef	~~f_puts
 33602                        	func
 33603                        	.function	7590
 33604                        ~~f_puts:
 33605                        	longa	on
 33606                        	longi	on
 33607 08:8C3D: 3B           	tsc
 33608 08:8C3E: 38           	sec
 33609 08:8C3F: E9 54 00     	sbc	#L1404
 33610 08:8C42: 1B           	tcs
 33611 08:8C43: 0B           	phd
 33612 08:8C44: 5B           	tcd
 33613             00000004   str_0	set	4
 33614             00000008   fp_0	set	8
 33615                        	.block	7590
 33616                        ;	putbuff pb;
 33617                        ;
 33618                        ;	putc_init(&pb, fp);
 33619             00000000   pb_1	set	0
 33620                        	.sym	pb,0,10,1,640,131
 33621                        	.sym	str,4,142,6,32
 33622                        	.sym	fp,8,138,6,32,77
 33623                        	.line	7593
 33624 08:8C45: D4 5E        	pei	<L1404+fp_0+2
 33625 08:8C47: D4 5C        	pei	<L1404+fp_0
 33626 08:8C49: F4 00 00     	pea	#0
 33627 08:8C4C: 18           	clc
 33628 08:8C4D: 7B           	tdc
 33629 08:8C4E: 69 05 00     	adc	#<L1405+pb_1
 33630 08:8C51: 48           	pha
 33631 08:8C52: 22 C5 8B 08  	jsl	~~putc_init
 33632                        ;	while (*str)
 33633                        	.line	7594
 33634                        L10826:
 33635 08:8C56: A7 58        	lda	[<L1404+str_0]
 33636 08:8C58: 29 FF 00     	and	#$ff
 33637 08:8C5B: D0 03        	bne	L1407
 33638 08:8C5D: 82 21 00     	brl	L10827
 33639                        L1407:
  Mon Aug  9 2021 16:52                                                Page 636


 33640                        ;		putc_bfd(&pb, *str++); /* Put the string
                     */
 33641                        	.line	7595
 33642 08:8C60: A5 58        	lda	<L1404+str_0
 33643 08:8C62: 85 01        	sta	<R0
 33644 08:8C64: A5 5A        	lda	<L1404+str_0+2
 33645 08:8C66: 85 03        	sta	<R0+2
 33646 08:8C68: E6 58        	inc	<L1404+str_0
 33647 08:8C6A: D0 02        	bne	L1408
 33648 08:8C6C: E6 5A        	inc	<L1404+str_0+2
 33649                        L1408:
 33650 08:8C6E: A7 01        	lda	[<R0]
 33651 08:8C70: 48           	pha
 33652 08:8C71: F4 00 00     	pea	#0
 33653 08:8C74: 18           	clc
 33654 08:8C75: 7B           	tdc
 33655 08:8C76: 69 05 00     	adc	#<L1405+pb_1
 33656 08:8C79: 48           	pha
 33657 08:8C7A: 22 33 88 08  	jsl	~~putc_bfd
 33658 08:8C7E: 82 D5 FF     	brl	L10826
 33659                        L10827:
 33660                        ;	return putc_flush(&pb);
 33661                        	.line	7596
 33662 08:8C81: F4 00 00     	pea	#0
 33663 08:8C84: 18           	clc
 33664 08:8C85: 7B           	tdc
 33665 08:8C86: 69 05 00     	adc	#<L1405+pb_1
 33666 08:8C89: 48           	pha
 33667 08:8C8A: 22 55 8B 08  	jsl	~~putc_flush
 33668                        L1409:
 33669 08:8C8E: A8           	tay
 33670 08:8C8F: A5 56        	lda	<L1404+2
 33671 08:8C91: 85 5E        	sta	<L1404+2+8
 33672 08:8C93: A5 55        	lda	<L1404+1
 33673 08:8C95: 85 5D        	sta	<L1404+1+8
 33674 08:8C97: 2B           	pld
 33675 08:8C98: 3B           	tsc
 33676 08:8C99: 18           	clc
 33677 08:8C9A: 69 5C 00     	adc	#L1404+8
 33678 08:8C9D: 1B           	tcs
 33679 08:8C9E: 98           	tya
 33680 08:8C9F: 6B           	rtl
 33681                        ;}
 33682                        	.line	7597
 33683                        	.endblock	7597
 33684             00000054   L1404	equ	84
 33685             00000005   L1405	equ	5
 33686 08:8CA0:              	ends
 33687                        	efunc
 33688                        	.endfunc	7597,5,84
 33689                        	.line	7597
 33690                        ;
 33691                        ;/*-----------------------------------------------
                    ------------------------*/
 33692                        ;/* Put a Formatted String to the File            
                                            */
 33693                        ;/*-----------------------------------------------
                    ------------------------*/
  Mon Aug  9 2021 16:52                                                Page 637


 33694                        ;
 33695                        ;int f_printf(FIL* fp, /* Pointer to the file obje
                    ct */
 33696                        ;const TCHAR* fmt, /* Pointer to the format string
                     */
 33697                        ;... /* Optional arguments... */
 33698                        ;)
 33699                        ;{
 33700                        	.line	7603
 33701                        	.line	7607
 33702                        	FFDOS
 33703                        	xdef	~~f_printf
 33704                        	func
 33705                        	.function	7607
 33706                        ~~f_printf:
 33707                        	longa	on
 33708                        	longi	on
 33709 08:8CA0: 3B           	tsc
 33710 08:8CA1: 38           	sec
 33711 08:8CA2: E9 92 00     	sbc	#L1410
 33712 08:8CA5: 1B           	tcs
 33713 08:8CA6: 0B           	phd
 33714 08:8CA7: 5B           	tcd
 33715             00000006   fp_0	set	6
 33716             0000000A   fmt_0	set	10
 33717                        	.block	7607
 33718                        ;	va_list arp;
 33719                        ;	putbuff pb;
 33720                        ;	BYTE f, r;
 33721                        ;	UINT i, j, w;
 33722                        ;	DWORD v;
 33723                        ;	TCHAR c, d, str[32], *p;
 33724                        ;
 33725                        ;	putc_init(&pb, fp);
 33726             00000000   arp_1	set	0
 33727             00000004   pb_1	set	4
 33728             00000054   f_1	set	84
 33729             00000055   r_1	set	85
 33730             00000056   i_1	set	86
 33731             00000058   j_1	set	88
 33732             0000005A   w_1	set	90
 33733             0000005C   v_1	set	92
 33734             00000060   c_1	set	96
 33735             00000061   d_1	set	97
 33736             00000062   str_1	set	98
 33737             00000082   p_1	set	130
 33738                        	.sym	arp,0,142,1,32
 33739                        	.sym	pb,4,10,1,640,131
 33740                        	.sym	f,84,14,1,8
 33741                        	.sym	r,85,14,1,8
 33742                        	.sym	i,86,16,1,16
 33743                        	.sym	j,88,16,1,16
 33744                        	.sym	w,90,16,1,16
 33745                        	.sym	v,92,18,1,32
 33746                        	.sym	c,96,14,1,8
 33747                        	.sym	d,97,14,1,8
 33748                        	.sym	str,98,110,1,0,32
 33749                        	.sym	p,130,142,1,32
  Mon Aug  9 2021 16:52                                                Page 638


 33750                        	.sym	fp,6,138,6,32,77
 33751                        	.sym	fmt,10,142,6,32
 33752                        	.line	7615
 33753 08:8CA8: D4 9A        	pei	<L1410+fp_0+2
 33754 08:8CAA: D4 98        	pei	<L1410+fp_0
 33755 08:8CAC: F4 00 00     	pea	#0
 33756 08:8CAF: 18           	clc
 33757 08:8CB0: 7B           	tdc
 33758 08:8CB1: 69 11 00     	adc	#<L1411+pb_1
 33759 08:8CB4: 48           	pha
 33760 08:8CB5: 22 C5 8B 08  	jsl	~~putc_init
 33761                        ;
 33762                        ;	va_start(arp, fmt);
 33763                        	.line	7617
 33764 08:8CB9: 18           	clc
 33765 08:8CBA: 7B           	tdc
 33766 08:8CBB: 69 A0 00     	adc	#<L1410+fmt_0+4
 33767 08:8CBE: 85 0D        	sta	<L1411+arp_1
 33768 08:8CC0: A9 00 00     	lda	#$0
 33769 08:8CC3: 85 0F        	sta	<L1411+arp_1+2
 33770                        ;
 33771                        ;	for (;;)
 33772                        	.line	7619
 33773                        L10830:
 33774                        ;	{
 33775                        	.line	7620
 33776                        ;		c = *fmt++;
 33777                        	.line	7621
 33778 08:8CC5: E2 20        	sep	#$20
 33779                        	longa	off
 33780 08:8CC7: A7 9C        	lda	[<L1410+fmt_0]
 33781 08:8CC9: 85 6D        	sta	<L1411+c_1
 33782 08:8CCB: C2 20        	rep	#$20
 33783                        	longa	on
 33784 08:8CCD: E6 9C        	inc	<L1410+fmt_0
 33785 08:8CCF: D0 02        	bne	L1413
 33786 08:8CD1: E6 9E        	inc	<L1410+fmt_0+2
 33787                        L1413:
 33788                        ;		if (c == 0)
 33789                        	.line	7622
 33790                        ;			break; /* End of string */
 33791 08:8CD3: A5 6D        	lda	<L1411+c_1
 33792 08:8CD5: 29 FF 00     	and	#$ff
 33793 08:8CD8: D0 03        	bne	L1414
 33794 08:8CDA: 82 E6 04     	brl	L10829
 33795                        L1414:
 33796                        ;		if (c != '%')
 33797                        	.line	7624
 33798                        ;		{ /* Non escape character */
 33799 08:8CDD: E2 20        	sep	#$20
 33800                        	longa	off
 33801 08:8CDF: A5 6D        	lda	<L1411+c_1
 33802 08:8CE1: C9 25        	cmp	#<$25
 33803 08:8CE3: C2 20        	rep	#$20
 33804                        	longa	on
 33805 08:8CE5: D0 03        	bne	L1415
 33806 08:8CE7: 82 12 00     	brl	L10831
 33807                        L1415:
  Mon Aug  9 2021 16:52                                                Page 639


 33808                        	.line	7625
 33809                        ;			putc_bfd(&pb, c);
 33810                        	.line	7626
 33811 08:8CEA: D4 6D        	pei	<L1411+c_1
 33812 08:8CEC: F4 00 00     	pea	#0
 33813 08:8CEF: 18           	clc
 33814 08:8CF0: 7B           	tdc
 33815 08:8CF1: 69 11 00     	adc	#<L1411+pb_1
 33816 08:8CF4: 48           	pha
 33817 08:8CF5: 22 33 88 08  	jsl	~~putc_bfd
 33818                        ;			continue;
 33819                        	.line	7627
 33820 08:8CF9: 82 C4 04     	brl	L10828
 33821                        ;		}
 33822                        	.line	7628
 33823                        ;		w = f = 0;
 33824                        L10831:
 33825                        	.line	7629
 33826 08:8CFC: E2 20        	sep	#$20
 33827                        	longa	off
 33828 08:8CFE: 64 61        	stz	<L1411+f_1
 33829 08:8D00: C2 20        	rep	#$20
 33830                        	longa	on
 33831 08:8D02: A9 00 00     	lda	#$0
 33832 08:8D05: 29 FF 00     	and	#$ff
 33833 08:8D08: 85 67        	sta	<L1411+w_1
 33834                        ;		c = *fmt++;
 33835                        	.line	7630
 33836 08:8D0A: E2 20        	sep	#$20
 33837                        	longa	off
 33838 08:8D0C: A7 9C        	lda	[<L1410+fmt_0]
 33839 08:8D0E: 85 6D        	sta	<L1411+c_1
 33840 08:8D10: C2 20        	rep	#$20
 33841                        	longa	on
 33842 08:8D12: E6 9C        	inc	<L1410+fmt_0
 33843 08:8D14: D0 02        	bne	L1416
 33844 08:8D16: E6 9E        	inc	<L1410+fmt_0+2
 33845                        L1416:
 33846                        ;		if (c == '0')
 33847                        	.line	7631
 33848                        ;		{ /* Flag: '0' padding */
 33849 08:8D18: E2 20        	sep	#$20
 33850                        	longa	off
 33851 08:8D1A: A5 6D        	lda	<L1411+c_1
 33852 08:8D1C: C9 30        	cmp	#<$30
 33853 08:8D1E: C2 20        	rep	#$20
 33854                        	longa	on
 33855 08:8D20: F0 03        	beq	L1417
 33856 08:8D22: 82 19 00     	brl	L10832
 33857                        L1417:
 33858                        	.line	7632
 33859                        ;			f = 1;
 33860                        	.line	7633
 33861 08:8D25: E2 20        	sep	#$20
 33862                        	longa	off
 33863 08:8D27: A9 01        	lda	#$1
 33864 08:8D29: 85 61        	sta	<L1411+f_1
 33865 08:8D2B: C2 20        	rep	#$20
  Mon Aug  9 2021 16:52                                                Page 640


 33866                        	longa	on
 33867                        ;			c = *fmt++;
 33868                        	.line	7634
 33869 08:8D2D: E2 20        	sep	#$20
 33870                        	longa	off
 33871 08:8D2F: A7 9C        	lda	[<L1410+fmt_0]
 33872 08:8D31: 85 6D        	sta	<L1411+c_1
 33873 08:8D33: C2 20        	rep	#$20
 33874                        	longa	on
 33875 08:8D35: E6 9C        	inc	<L1410+fmt_0
 33876 08:8D37: D0 02        	bne	L1418
 33877 08:8D39: E6 9E        	inc	<L1410+fmt_0+2
 33878                        L1418:
 33879                        ;		}
 33880                        	.line	7635
 33881                        ;		else
 33882 08:8D3B: 82 23 00     	brl	L10833
 33883                        L10832:
 33884                        ;		{
 33885                        	.line	7637
 33886                        ;			if (c == '-')
 33887                        	.line	7638
 33888                        ;			{ /* Flag: left justified */
 33889 08:8D3E: E2 20        	sep	#$20
 33890                        	longa	off
 33891 08:8D40: A5 6D        	lda	<L1411+c_1
 33892 08:8D42: C9 2D        	cmp	#<$2d
 33893 08:8D44: C2 20        	rep	#$20
 33894                        	longa	on
 33895 08:8D46: F0 03        	beq	L1419
 33896 08:8D48: 82 16 00     	brl	L10834
 33897                        L1419:
 33898                        	.line	7639
 33899                        ;				f = 2;
 33900                        	.line	7640
 33901 08:8D4B: E2 20        	sep	#$20
 33902                        	longa	off
 33903 08:8D4D: A9 02        	lda	#$2
 33904 08:8D4F: 85 61        	sta	<L1411+f_1
 33905 08:8D51: C2 20        	rep	#$20
 33906                        	longa	on
 33907                        ;				c = *fmt++;
 33908                        	.line	7641
 33909 08:8D53: E2 20        	sep	#$20
 33910                        	longa	off
 33911 08:8D55: A7 9C        	lda	[<L1410+fmt_0]
 33912 08:8D57: 85 6D        	sta	<L1411+c_1
 33913 08:8D59: C2 20        	rep	#$20
 33914                        	longa	on
 33915 08:8D5B: E6 9C        	inc	<L1410+fmt_0
 33916 08:8D5D: D0 02        	bne	L1420
 33917 08:8D5F: E6 9E        	inc	<L1410+fmt_0+2
 33918                        L1420:
 33919                        ;			}
 33920                        	.line	7642
 33921                        ;		}
 33922                        L10834:
 33923                        	.line	7643
  Mon Aug  9 2021 16:52                                                Page 641


 33924                        L10833:
 33925                        ;		if (c == '*')
 33926                        	.line	7644
 33927                        ;		{ /* Minimum width by argument */
 33928 08:8D61: E2 20        	sep	#$20
 33929                        	longa	off
 33930 08:8D63: A5 6D        	lda	<L1411+c_1
 33931 08:8D65: C9 2A        	cmp	#<$2a
 33932 08:8D67: C2 20        	rep	#$20
 33933                        	longa	on
 33934 08:8D69: F0 03        	beq	L1421
 33935 08:8D6B: 82 30 00     	brl	L10835
 33936                        L1421:
 33937                        	.line	7645
 33938                        ;			w = va_arg(arp, int);
 33939                        	.line	7646
 33940 08:8D6E: 18           	clc
 33941 08:8D6F: A9 02 00     	lda	#$2
 33942 08:8D72: 65 0D        	adc	<L1411+arp_1
 33943 08:8D74: 85 0D        	sta	<L1411+arp_1
 33944 08:8D76: 90 02        	bcc	L1422
 33945 08:8D78: E6 0F        	inc	<L1411+arp_1+2
 33946                        L1422:
 33947 08:8D7A: 18           	clc
 33948 08:8D7B: A9 FE FF     	lda	#$fffe
 33949 08:8D7E: 65 0D        	adc	<L1411+arp_1
 33950 08:8D80: 85 01        	sta	<R0
 33951 08:8D82: A9 FF FF     	lda	#$ffff
 33952 08:8D85: 65 0F        	adc	<L1411+arp_1+2
 33953 08:8D87: 85 03        	sta	<R0+2
 33954 08:8D89: A7 01        	lda	[<R0]
 33955 08:8D8B: 85 67        	sta	<L1411+w_1
 33956                        ;			c = *fmt++;
 33957                        	.line	7647
 33958 08:8D8D: E2 20        	sep	#$20
 33959                        	longa	off
 33960 08:8D8F: A7 9C        	lda	[<L1410+fmt_0]
 33961 08:8D91: 85 6D        	sta	<L1411+c_1
 33962 08:8D93: C2 20        	rep	#$20
 33963                        	longa	on
 33964 08:8D95: E6 9C        	inc	<L1410+fmt_0
 33965 08:8D97: D0 02        	bne	L1423
 33966 08:8D99: E6 9E        	inc	<L1410+fmt_0+2
 33967                        L1423:
 33968                        ;		}
 33969                        	.line	7648
 33970                        ;		else
 33971 08:8D9B: 82 4A 00     	brl	L10836
 33972                        L10835:
 33973                        ;		{
 33974                        	.line	7650
 33975                        ;			while (IsDigit(c))
 33976                        	.line	7651
 33977                        L10837:
 33978 08:8D9E: E2 20        	sep	#$20
 33979                        	longa	off
 33980 08:8DA0: A5 6D        	lda	<L1411+c_1
 33981 08:8DA2: C9 30        	cmp	#<$30
  Mon Aug  9 2021 16:52                                                Page 642


 33982 08:8DA4: C2 20        	rep	#$20
 33983                        	longa	on
 33984 08:8DA6: B0 03        	bcs	L1424
 33985 08:8DA8: 82 3D 00     	brl	L10838
 33986                        L1424:
 33987 08:8DAB: E2 20        	sep	#$20
 33988                        	longa	off
 33989 08:8DAD: A9 39        	lda	#$39
 33990 08:8DAF: C5 6D        	cmp	<L1411+c_1
 33991 08:8DB1: C2 20        	rep	#$20
 33992                        	longa	on
 33993 08:8DB3: B0 03        	bcs	L1425
 33994 08:8DB5: 82 30 00     	brl	L10838
 33995                        L1425:
 33996                        ;			{ /* Minimum width */
 33997                        	.line	7652
 33998                        ;				w = w * 10 + c - '0';
 33999                        	.line	7653
 34000 08:8DB8: A5 6D        	lda	<L1411+c_1
 34001 08:8DBA: 29 FF 00     	and	#$ff
 34002 08:8DBD: 85 01        	sta	<R0
 34003 08:8DBF: A5 67        	lda	<L1411+w_1
 34004 08:8DC1: 0A           	asl	A
 34005 08:8DC2: 0A           	asl	A
 34006 08:8DC3: 65 67        	adc	<L1411+w_1
 34007 08:8DC5: 0A           	asl	A
 34008 08:8DC6: 85 05        	sta	<R1
 34009 08:8DC8: 18           	clc
 34010 08:8DC9: A5 05        	lda	<R1
 34011 08:8DCB: 65 01        	adc	<R0
 34012 08:8DCD: 85 09        	sta	<R2
 34013 08:8DCF: 18           	clc
 34014 08:8DD0: A9 D0 FF     	lda	#$ffd0
 34015 08:8DD3: 65 09        	adc	<R2
 34016 08:8DD5: 85 67        	sta	<L1411+w_1
 34017                        ;				c = *fmt++;
 34018                        	.line	7654
 34019 08:8DD7: E2 20        	sep	#$20
 34020                        	longa	off
 34021 08:8DD9: A7 9C        	lda	[<L1410+fmt_0]
 34022 08:8DDB: 85 6D        	sta	<L1411+c_1
 34023 08:8DDD: C2 20        	rep	#$20
 34024                        	longa	on
 34025 08:8DDF: E6 9C        	inc	<L1410+fmt_0
 34026 08:8DE1: D0 02        	bne	L1426
 34027 08:8DE3: E6 9E        	inc	<L1410+fmt_0+2
 34028                        L1426:
 34029                        ;			}
 34030                        	.line	7655
 34031 08:8DE5: 82 B6 FF     	brl	L10837
 34032                        L10838:
 34033                        ;		}
 34034                        	.line	7656
 34035                        L10836:
 34036                        ;		if (c == 'l' || c == 'L')
 34037                        	.line	7657
 34038                        ;		{ /* Type prefix: Size is long int */
 34039 08:8DE8: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 643


 34040                        	longa	off
 34041 08:8DEA: A5 6D        	lda	<L1411+c_1
 34042 08:8DEC: C9 6C        	cmp	#<$6c
 34043 08:8DEE: C2 20        	rep	#$20
 34044                        	longa	on
 34045 08:8DF0: D0 03        	bne	L1428
 34046 08:8DF2: 82 0D 00     	brl	L1427
 34047                        L1428:
 34048 08:8DF5: E2 20        	sep	#$20
 34049                        	longa	off
 34050 08:8DF7: A5 6D        	lda	<L1411+c_1
 34051 08:8DF9: C9 4C        	cmp	#<$4c
 34052 08:8DFB: C2 20        	rep	#$20
 34053                        	longa	on
 34054 08:8DFD: F0 03        	beq	L1429
 34055 08:8DFF: 82 16 00     	brl	L10839
 34056                        L1429:
 34057                        L1427:
 34058                        	.line	7658
 34059                        ;			f |= 4;
 34060                        	.line	7659
 34061 08:8E02: E2 20        	sep	#$20
 34062                        	longa	off
 34063 08:8E04: A9 04        	lda	#$4
 34064 08:8E06: 04 61        	tsb	<L1411+f_1
 34065 08:8E08: C2 20        	rep	#$20
 34066                        	longa	on
 34067                        ;			c = *fmt++;
 34068                        	.line	7660
 34069 08:8E0A: E2 20        	sep	#$20
 34070                        	longa	off
 34071 08:8E0C: A7 9C        	lda	[<L1410+fmt_0]
 34072 08:8E0E: 85 6D        	sta	<L1411+c_1
 34073 08:8E10: C2 20        	rep	#$20
 34074                        	longa	on
 34075 08:8E12: E6 9C        	inc	<L1410+fmt_0
 34076 08:8E14: D0 02        	bne	L1430
 34077 08:8E16: E6 9E        	inc	<L1410+fmt_0+2
 34078                        L1430:
 34079                        ;		}
 34080                        	.line	7661
 34081                        ;		if (c == 0)
 34082                        L10839:
 34083                        	.line	7662
 34084                        ;			break;
 34085 08:8E18: A5 6D        	lda	<L1411+c_1
 34086 08:8E1A: 29 FF 00     	and	#$ff
 34087 08:8E1D: D0 03        	bne	L1431
 34088 08:8E1F: 82 A1 03     	brl	L10829
 34089                        L1431:
 34090                        ;		d = c;
 34091                        	.line	7664
 34092 08:8E22: E2 20        	sep	#$20
 34093                        	longa	off
 34094 08:8E24: A5 6D        	lda	<L1411+c_1
 34095 08:8E26: 85 6E        	sta	<L1411+d_1
 34096 08:8E28: C2 20        	rep	#$20
 34097                        	longa	on
  Mon Aug  9 2021 16:52                                                Page 644


 34098                        ;		if (IsLower(d))
 34099                        	.line	7665
 34100                        ;			d -= 0x20;
 34101 08:8E2A: E2 20        	sep	#$20
 34102                        	longa	off
 34103 08:8E2C: A5 6E        	lda	<L1411+d_1
 34104 08:8E2E: C9 61        	cmp	#<$61
 34105 08:8E30: C2 20        	rep	#$20
 34106                        	longa	on
 34107 08:8E32: B0 03        	bcs	L1432
 34108 08:8E34: 82 24 00     	brl	L10840
 34109                        L1432:
 34110 08:8E37: E2 20        	sep	#$20
 34111                        	longa	off
 34112 08:8E39: A9 7A        	lda	#$7a
 34113 08:8E3B: C5 6E        	cmp	<L1411+d_1
 34114 08:8E3D: C2 20        	rep	#$20
 34115                        	longa	on
 34116 08:8E3F: B0 03        	bcs	L1433
 34117 08:8E41: 82 17 00     	brl	L10840
 34118                        L1433:
 34119                        	.line	7666
 34120 08:8E44: A5 6E        	lda	<L1411+d_1
 34121 08:8E46: 29 FF 00     	and	#$ff
 34122 08:8E49: 85 01        	sta	<R0
 34123 08:8E4B: 18           	clc
 34124 08:8E4C: A9 E0 FF     	lda	#$ffe0
 34125 08:8E4F: 65 01        	adc	<R0
 34126 08:8E51: 85 05        	sta	<R1
 34127 08:8E53: E2 20        	sep	#$20
 34128                        	longa	off
 34129 08:8E55: A5 05        	lda	<R1
 34130 08:8E57: 85 6E        	sta	<L1411+d_1
 34131 08:8E59: C2 20        	rep	#$20
 34132                        	longa	on
 34133                        ;		switch (d)
 34134                        L10840:
 34135                        	.line	7667
 34136 08:8E5B: A5 6E        	lda	<L1411+d_1
 34137 08:8E5D: 29 FF 00     	and	#$ff
 34138 08:8E60: 82 24 01     	brl	L10841
 34139                        ;		{ /* Atgument type is... */
 34140                        	.line	7668
 34141                        ;		case 'S': /* String */
 34142                        	.line	7669
 34143                        L10843:
 34144                        ;			p = va_arg(arp, TCHAR*);
 34145                        	.line	7670
 34146 08:8E63: 18           	clc
 34147 08:8E64: A9 04 00     	lda	#$4
 34148 08:8E67: 65 0D        	adc	<L1411+arp_1
 34149 08:8E69: 85 0D        	sta	<L1411+arp_1
 34150 08:8E6B: 90 02        	bcc	L1434
 34151 08:8E6D: E6 0F        	inc	<L1411+arp_1+2
 34152                        L1434:
 34153 08:8E6F: 18           	clc
 34154 08:8E70: A9 FC FF     	lda	#$fffc
 34155 08:8E73: 65 0D        	adc	<L1411+arp_1
  Mon Aug  9 2021 16:52                                                Page 645


 34156 08:8E75: 85 01        	sta	<R0
 34157 08:8E77: A9 FF FF     	lda	#$ffff
 34158 08:8E7A: 65 0F        	adc	<L1411+arp_1+2
 34159 08:8E7C: 85 03        	sta	<R0+2
 34160 08:8E7E: A7 01        	lda	[<R0]
 34161 08:8E80: 85 8F        	sta	<L1411+p_1
 34162 08:8E82: A0 02 00     	ldy	#$2
 34163 08:8E85: B7 01        	lda	[<R0],Y
 34164 08:8E87: 85 91        	sta	<L1411+p_1+2
 34165                        ;			for (j = 0; p[j]; j++)
 34166                        	.line	7671
 34167 08:8E89: 64 65        	stz	<L1411+j_1
 34168 08:8E8B: 82 02 00     	brl	L10847
 34169                        L10846:
 34170                        ;				;
 34171                        	.line	7672
 34172                        L10844:
 34173 08:8E8E: E6 65        	inc	<L1411+j_1
 34174                        L10847:
 34175 08:8E90: A4 65        	ldy	<L1411+j_1
 34176 08:8E92: B7 8F        	lda	[<L1411+p_1],Y
 34177 08:8E94: 29 FF 00     	and	#$ff
 34178 08:8E97: F0 03        	beq	L1435
 34179 08:8E99: 82 F2 FF     	brl	L10846
 34180                        L1435:
 34181                        L10845:
 34182                        ;			if (!(f & 2))
 34183                        	.line	7673
 34184                        ;			{ /* Right padded */
 34185 08:8E9C: E2 20        	sep	#$20
 34186                        	longa	off
 34187 08:8E9E: A5 61        	lda	<L1411+f_1
 34188 08:8EA0: 29 02        	and	#<$2
 34189 08:8EA2: C2 20        	rep	#$20
 34190                        	longa	on
 34191 08:8EA4: F0 03        	beq	L1436
 34192 08:8EA6: 82 22 00     	brl	L10848
 34193                        L1436:
 34194                        	.line	7674
 34195                        ;				while (j++ < w)
 34196                        	.line	7675
 34197                        L10849:
 34198 08:8EA9: A5 65        	lda	<L1411+j_1
 34199 08:8EAB: 85 01        	sta	<R0
 34200 08:8EAD: E6 65        	inc	<L1411+j_1
 34201 08:8EAF: A5 01        	lda	<R0
 34202 08:8EB1: C5 67        	cmp	<L1411+w_1
 34203 08:8EB3: 90 03        	bcc	L1437
 34204 08:8EB5: 82 13 00     	brl	L10850
 34205                        L1437:
 34206                        ;					putc_bfd(&pb, ' 
                    ');
 34207                        	.line	7676
 34208 08:8EB8: F4 20 00     	pea	#<$20
 34209 08:8EBB: F4 00 00     	pea	#0
 34210 08:8EBE: 18           	clc
 34211 08:8EBF: 7B           	tdc
 34212 08:8EC0: 69 11 00     	adc	#<L1411+pb_1
  Mon Aug  9 2021 16:52                                                Page 646


 34213 08:8EC3: 48           	pha
 34214 08:8EC4: 22 33 88 08  	jsl	~~putc_bfd
 34215 08:8EC8: 82 DE FF     	brl	L10849
 34216                        L10850:
 34217                        ;			}
 34218                        	.line	7677
 34219                        ;			while (*p)
 34220                        L10848:
 34221                        	.line	7678
 34222                        L10851:
 34223 08:8ECB: A7 8F        	lda	[<L1411+p_1]
 34224 08:8ECD: 29 FF 00     	and	#$ff
 34225 08:8ED0: D0 03        	bne	L1438
 34226 08:8ED2: 82 21 00     	brl	L10852
 34227                        L1438:
 34228                        ;				putc_bfd(&pb, *p++); /* 
                    String body */
 34229                        	.line	7679
 34230 08:8ED5: A5 8F        	lda	<L1411+p_1
 34231 08:8ED7: 85 01        	sta	<R0
 34232 08:8ED9: A5 91        	lda	<L1411+p_1+2
 34233 08:8EDB: 85 03        	sta	<R0+2
 34234 08:8EDD: E6 8F        	inc	<L1411+p_1
 34235 08:8EDF: D0 02        	bne	L1439
 34236 08:8EE1: E6 91        	inc	<L1411+p_1+2
 34237                        L1439:
 34238 08:8EE3: A7 01        	lda	[<R0]
 34239 08:8EE5: 48           	pha
 34240 08:8EE6: F4 00 00     	pea	#0
 34241 08:8EE9: 18           	clc
 34242 08:8EEA: 7B           	tdc
 34243 08:8EEB: 69 11 00     	adc	#<L1411+pb_1
 34244 08:8EEE: 48           	pha
 34245 08:8EEF: 22 33 88 08  	jsl	~~putc_bfd
 34246 08:8EF3: 82 D5 FF     	brl	L10851
 34247                        L10852:
 34248                        ;			while (j++ < w)
 34249                        	.line	7680
 34250                        L10853:
 34251 08:8EF6: A5 65        	lda	<L1411+j_1
 34252 08:8EF8: 85 01        	sta	<R0
 34253 08:8EFA: E6 65        	inc	<L1411+j_1
 34254 08:8EFC: A5 01        	lda	<R0
 34255 08:8EFE: C5 67        	cmp	<L1411+w_1
 34256 08:8F00: 90 03        	bcc	L1440
 34257 08:8F02: 82 13 00     	brl	L10854
 34258                        L1440:
 34259                        ;				putc_bfd(&pb, ' '); /* L
                    eft padded */
 34260                        	.line	7681
 34261 08:8F05: F4 20 00     	pea	#<$20
 34262 08:8F08: F4 00 00     	pea	#0
 34263 08:8F0B: 18           	clc
 34264 08:8F0C: 7B           	tdc
 34265 08:8F0D: 69 11 00     	adc	#<L1411+pb_1
 34266 08:8F10: 48           	pha
 34267 08:8F11: 22 33 88 08  	jsl	~~putc_bfd
 34268 08:8F15: 82 DE FF     	brl	L10853
  Mon Aug  9 2021 16:52                                                Page 647


 34269                        L10854:
 34270                        ;			continue;
 34271                        	.line	7682
 34272 08:8F18: 82 A5 02     	brl	L10828
 34273                        ;
 34274                        ;		case 'C': /* Character */
 34275                        	.line	7684
 34276                        L10855:
 34277                        ;			putc_bfd(&pb, (TCHAR) va_arg(arp
                    , int));
 34278                        	.line	7685
 34279 08:8F1B: 18           	clc
 34280 08:8F1C: A9 02 00     	lda	#$2
 34281 08:8F1F: 65 0D        	adc	<L1411+arp_1
 34282 08:8F21: 85 0D        	sta	<L1411+arp_1
 34283 08:8F23: 90 02        	bcc	L1441
 34284 08:8F25: E6 0F        	inc	<L1411+arp_1+2
 34285                        L1441:
 34286 08:8F27: 18           	clc
 34287 08:8F28: A9 FE FF     	lda	#$fffe
 34288 08:8F2B: 65 0D        	adc	<L1411+arp_1
 34289 08:8F2D: 85 01        	sta	<R0
 34290 08:8F2F: A9 FF FF     	lda	#$ffff
 34291 08:8F32: 65 0F        	adc	<L1411+arp_1+2
 34292 08:8F34: 85 03        	sta	<R0+2
 34293 08:8F36: A7 01        	lda	[<R0]
 34294 08:8F38: 48           	pha
 34295 08:8F39: F4 00 00     	pea	#0
 34296 08:8F3C: 18           	clc
 34297 08:8F3D: 7B           	tdc
 34298 08:8F3E: 69 11 00     	adc	#<L1411+pb_1
 34299 08:8F41: 48           	pha
 34300 08:8F42: 22 33 88 08  	jsl	~~putc_bfd
 34301                        ;			continue;
 34302                        	.line	7686
 34303 08:8F46: 82 77 02     	brl	L10828
 34304                        ;
 34305                        ;		case 'B': /* Unsigned binary */
 34306                        	.line	7688
 34307                        L10856:
 34308                        ;			r = 2;
 34309                        	.line	7689
 34310 08:8F49: E2 20        	sep	#$20
 34311                        	longa	off
 34312 08:8F4B: A9 02        	lda	#$2
 34313 08:8F4D: 85 62        	sta	<L1411+r_1
 34314 08:8F4F: C2 20        	rep	#$20
 34315                        	longa	on
 34316                        ;			break;
 34317                        	.line	7690
 34318 08:8F51: 82 57 00     	brl	L10842
 34319                        ;
 34320                        ;		case 'O': /* Unsigned octal */
 34321                        	.line	7692
 34322                        L10857:
 34323                        ;			r = 8;
 34324                        	.line	7693
 34325 08:8F54: E2 20        	sep	#$20
  Mon Aug  9 2021 16:52                                                Page 648


 34326                        	longa	off
 34327 08:8F56: A9 08        	lda	#$8
 34328 08:8F58: 85 62        	sta	<L1411+r_1
 34329 08:8F5A: C2 20        	rep	#$20
 34330                        	longa	on
 34331                        ;			break;
 34332                        	.line	7694
 34333 08:8F5C: 82 4C 00     	brl	L10842
 34334                        ;
 34335                        ;		case 'D': /* Signed decimal */
 34336                        	.line	7696
 34337                        L10858:
 34338                        ;		case 'U': /* Unsigned decimal */
 34339                        	.line	7697
 34340                        L10859:
 34341                        ;			r = 10;
 34342                        	.line	7698
 34343 08:8F5F: E2 20        	sep	#$20
 34344                        	longa	off
 34345 08:8F61: A9 0A        	lda	#$a
 34346 08:8F63: 85 62        	sta	<L1411+r_1
 34347 08:8F65: C2 20        	rep	#$20
 34348                        	longa	on
 34349                        ;			break;
 34350                        	.line	7699
 34351 08:8F67: 82 41 00     	brl	L10842
 34352                        ;
 34353                        ;		case 'X': /* Unsigned hexdecimal */
 34354                        	.line	7701
 34355                        L10860:
 34356                        ;			r = 16;
 34357                        	.line	7702
 34358 08:8F6A: E2 20        	sep	#$20
 34359                        	longa	off
 34360 08:8F6C: A9 10        	lda	#$10
 34361 08:8F6E: 85 62        	sta	<L1411+r_1
 34362 08:8F70: C2 20        	rep	#$20
 34363                        	longa	on
 34364                        ;			break;
 34365                        	.line	7703
 34366 08:8F72: 82 36 00     	brl	L10842
 34367                        ;
 34368                        ;		default: /* Unknown type (pass-through) 
                    */
 34369                        	.line	7705
 34370                        L10861:
 34371                        ;			putc_bfd(&pb, c);
 34372                        	.line	7706
 34373 08:8F75: D4 6D        	pei	<L1411+c_1
 34374 08:8F77: F4 00 00     	pea	#0
 34375 08:8F7A: 18           	clc
 34376 08:8F7B: 7B           	tdc
 34377 08:8F7C: 69 11 00     	adc	#<L1411+pb_1
 34378 08:8F7F: 48           	pha
 34379 08:8F80: 22 33 88 08  	jsl	~~putc_bfd
 34380                        ;			continue;
 34381                        	.line	7707
 34382 08:8F84: 82 39 02     	brl	L10828
  Mon Aug  9 2021 16:52                                                Page 649


 34383                        ;		}
 34384                        	.line	7708
 34385                        L10841:
 34386                        	xref	~~~swt
 34387 08:8F87: 22 xx xx xx  	jsl	~~~swt
 34388 08:8F8B: 07 00        	dw	7
 34389 08:8F8D: 42 00        	dw	66
 34390 08:8F8F: 48 8F        	dw	L10856-1
 34391 08:8F91: 43 00        	dw	67
 34392 08:8F93: 1A 8F        	dw	L10855-1
 34393 08:8F95: 44 00        	dw	68
 34394 08:8F97: 5E 8F        	dw	L10858-1
 34395 08:8F99: 4F 00        	dw	79
 34396 08:8F9B: 53 8F        	dw	L10857-1
 34397 08:8F9D: 53 00        	dw	83
 34398 08:8F9F: 62 8E        	dw	L10843-1
 34399 08:8FA1: 55 00        	dw	85
 34400 08:8FA3: 5E 8F        	dw	L10859-1
 34401 08:8FA5: 58 00        	dw	88
 34402 08:8FA7: 69 8F        	dw	L10860-1
 34403 08:8FA9: 74 8F        	dw	L10861-1
 34404                        L10842:
 34405                        ;
 34406                        ;		/* Get an argument and put it in numeral
                     */
 34407                        ;		v = (f & 4) ?
 34408                        	.line	7711
 34409                        ;				(DWORD) va_arg(arp, long
                    ) :
 34410                        ;				((d == 'D') ?
 34411                        ;						(DWORD) 
                    (long) va_arg(arp, int) :
 34412                        ;						(DWORD) 
                    va_arg(arp, unsigned int));
 34413 08:8FAB: E2 20        	sep	#$20
 34414                        	longa	off
 34415 08:8FAD: A5 61        	lda	<L1411+f_1
 34416 08:8FAF: 29 04        	and	#<$4
 34417 08:8FB1: C2 20        	rep	#$20
 34418                        	longa	on
 34419 08:8FB3: D0 03        	bne	L1443
 34420 08:8FB5: 82 25 00     	brl	L1442
 34421                        L1443:
 34422 08:8FB8: 18           	clc
 34423 08:8FB9: A9 04 00     	lda	#$4
 34424 08:8FBC: 65 0D        	adc	<L1411+arp_1
 34425 08:8FBE: 85 0D        	sta	<L1411+arp_1
 34426 08:8FC0: 90 02        	bcc	L1444
 34427 08:8FC2: E6 0F        	inc	<L1411+arp_1+2
 34428                        L1444:
 34429 08:8FC4: 18           	clc
 34430 08:8FC5: A9 FC FF     	lda	#$fffc
 34431 08:8FC8: 65 0D        	adc	<L1411+arp_1
 34432 08:8FCA: 85 01        	sta	<R0
 34433 08:8FCC: A9 FF FF     	lda	#$ffff
 34434 08:8FCF: 65 0F        	adc	<L1411+arp_1+2
 34435 08:8FD1: 85 03        	sta	<R0+2
 34436 08:8FD3: A0 02 00     	ldy	#$2
  Mon Aug  9 2021 16:52                                                Page 650


 34437 08:8FD6: B7 01        	lda	[<R0],Y
 34438 08:8FD8: AA           	tax
 34439 08:8FD9: A7 01        	lda	[<R0]
 34440 08:8FDB: 80 67        	bra	L1445
 34441                        L1442:
 34442 08:8FDD: E2 20        	sep	#$20
 34443                        	longa	off
 34444 08:8FDF: A5 6E        	lda	<L1411+d_1
 34445 08:8FE1: C9 44        	cmp	#<$44
 34446 08:8FE3: C2 20        	rep	#$20
 34447                        	longa	on
 34448 08:8FE5: F0 03        	beq	L1447
 34449 08:8FE7: 82 2D 00     	brl	L1446
 34450                        L1447:
 34451 08:8FEA: 18           	clc
 34452 08:8FEB: A9 02 00     	lda	#$2
 34453 08:8FEE: 65 0D        	adc	<L1411+arp_1
 34454 08:8FF0: 85 0D        	sta	<L1411+arp_1
 34455 08:8FF2: 90 02        	bcc	L1448
 34456 08:8FF4: E6 0F        	inc	<L1411+arp_1+2
 34457                        L1448:
 34458 08:8FF6: 18           	clc
 34459 08:8FF7: A9 FE FF     	lda	#$fffe
 34460 08:8FFA: 65 0D        	adc	<L1411+arp_1
 34461 08:8FFC: 85 01        	sta	<R0
 34462 08:8FFE: A9 FF FF     	lda	#$ffff
 34463 08:9001: 65 0F        	adc	<L1411+arp_1+2
 34464 08:9003: 85 03        	sta	<R0+2
 34465 08:9005: A0 00 00     	ldy	#$0
 34466 08:9008: A7 01        	lda	[<R0]
 34467 08:900A: 10 01        	bpl	L1449
 34468 08:900C: 88           	dey
 34469                        L1449:
 34470 08:900D: 85 01        	sta	<R0
 34471 08:900F: 84 03        	sty	<R0+2
 34472 08:9011: A6 03        	ldx	<R0+2
 34473 08:9013: A5 01        	lda	<R0
 34474 08:9015: 80 25        	bra	L1450
 34475                        L1446:
 34476 08:9017: 18           	clc
 34477 08:9018: A9 02 00     	lda	#$2
 34478 08:901B: 65 0D        	adc	<L1411+arp_1
 34479 08:901D: 85 0D        	sta	<L1411+arp_1
 34480 08:901F: 90 02        	bcc	L1451
 34481 08:9021: E6 0F        	inc	<L1411+arp_1+2
 34482                        L1451:
 34483 08:9023: 18           	clc
 34484 08:9024: A9 FE FF     	lda	#$fffe
 34485 08:9027: 65 0D        	adc	<L1411+arp_1
 34486 08:9029: 85 01        	sta	<R0
 34487 08:902B: A9 FF FF     	lda	#$ffff
 34488 08:902E: 65 0F        	adc	<L1411+arp_1+2
 34489 08:9030: 85 03        	sta	<R0+2
 34490 08:9032: A7 01        	lda	[<R0]
 34491 08:9034: 85 01        	sta	<R0
 34492 08:9036: 64 03        	stz	<R0+2
 34493 08:9038: A6 03        	ldx	<R0+2
 34494 08:903A: A5 01        	lda	<R0
  Mon Aug  9 2021 16:52                                                Page 651


 34495                        L1450:
 34496 08:903C: 85 01        	sta	<R0
 34497 08:903E: 86 03        	stx	<R0+2
 34498 08:9040: A6 03        	ldx	<R0+2
 34499 08:9042: A5 01        	lda	<R0
 34500                        L1445:
 34501 08:9044: 85 01        	sta	<R0
 34502 08:9046: 86 03        	stx	<R0+2
 34503 08:9048: A5 01        	lda	<R0
 34504 08:904A: 85 69        	sta	<L1411+v_1
 34505 08:904C: A5 03        	lda	<R0+2
 34506 08:904E: 85 6B        	sta	<L1411+v_1+2
 34507                        ;		if (d == 'D' && (v & 0x80000000))
 34508                        	.line	7716
 34509                        ;		{
 34510 08:9050: E2 20        	sep	#$20
 34511                        	longa	off
 34512 08:9052: A5 6E        	lda	<L1411+d_1
 34513 08:9054: C9 44        	cmp	#<$44
 34514 08:9056: C2 20        	rep	#$20
 34515                        	longa	on
 34516 08:9058: F0 03        	beq	L1452
 34517 08:905A: 82 21 00     	brl	L10862
 34518                        L1452:
 34519 08:905D: A5 6B        	lda	<L1411+v_1+2
 34520 08:905F: 29 00 80     	and	#^$80000000
 34521 08:9062: D0 03        	bne	L1453
 34522 08:9064: 82 17 00     	brl	L10862
 34523                        L1453:
 34524                        	.line	7717
 34525                        ;			v = 0 - v;
 34526                        	.line	7718
 34527 08:9067: 38           	sec
 34528 08:9068: A9 00 00     	lda	#$0
 34529 08:906B: E5 69        	sbc	<L1411+v_1
 34530 08:906D: 85 69        	sta	<L1411+v_1
 34531 08:906F: A9 00 00     	lda	#$0
 34532 08:9072: E5 6B        	sbc	<L1411+v_1+2
 34533 08:9074: 85 6B        	sta	<L1411+v_1+2
 34534                        ;			f |= 8;
 34535                        	.line	7719
 34536 08:9076: E2 20        	sep	#$20
 34537                        	longa	off
 34538 08:9078: A9 08        	lda	#$8
 34539 08:907A: 04 61        	tsb	<L1411+f_1
 34540 08:907C: C2 20        	rep	#$20
 34541                        	longa	on
 34542                        ;		}
 34543                        	.line	7720
 34544                        ;		i = 0;
 34545                        L10862:
 34546                        	.line	7721
 34547 08:907E: 64 63        	stz	<L1411+i_1
 34548                        ;		do
 34549                        	.line	7722
 34550                        L10865:
 34551                        ;		{
 34552                        	.line	7723
  Mon Aug  9 2021 16:52                                                Page 652


 34553                        ;			d = (TCHAR) (v % r);
 34554                        	.line	7724
 34555 08:9080: A5 62        	lda	<L1411+r_1
 34556 08:9082: 29 FF 00     	and	#$ff
 34557 08:9085: 85 01        	sta	<R0
 34558 08:9087: 64 03        	stz	<R0+2
 34559 08:9089: D4 03        	pei	<R0+2
 34560 08:908B: D4 01        	pei	<R0
 34561 08:908D: D4 6B        	pei	<L1411+v_1+2
 34562 08:908F: D4 69        	pei	<L1411+v_1
 34563                        	xref	~~~lumd
 34564 08:9091: 22 xx xx xx  	jsl	~~~lumd
 34565 08:9095: 85 01        	sta	<R0
 34566 08:9097: 86 03        	stx	<R0+2
 34567 08:9099: E2 20        	sep	#$20
 34568                        	longa	off
 34569 08:909B: A5 01        	lda	<R0
 34570 08:909D: 85 6E        	sta	<L1411+d_1
 34571 08:909F: C2 20        	rep	#$20
 34572                        	longa	on
 34573                        ;			v /= r;
 34574                        	.line	7725
 34575 08:90A1: A5 62        	lda	<L1411+r_1
 34576 08:90A3: 29 FF 00     	and	#$ff
 34577 08:90A6: 85 01        	sta	<R0
 34578 08:90A8: 64 03        	stz	<R0+2
 34579 08:90AA: D4 03        	pei	<R0+2
 34580 08:90AC: D4 01        	pei	<R0
 34581 08:90AE: D4 6B        	pei	<L1411+v_1+2
 34582 08:90B0: D4 69        	pei	<L1411+v_1
 34583                        	xref	~~~ludv
 34584 08:90B2: 22 xx xx xx  	jsl	~~~ludv
 34585 08:90B6: 85 69        	sta	<L1411+v_1
 34586 08:90B8: 86 6B        	stx	<L1411+v_1+2
 34587                        ;			if (d > 9)
 34588                        	.line	7726
 34589                        ;				d += (c == 'x') ? 0x27 :
                     0x07;
 34590 08:90BA: E2 20        	sep	#$20
 34591                        	longa	off
 34592 08:90BC: A9 09        	lda	#$9
 34593 08:90BE: C5 6E        	cmp	<L1411+d_1
 34594 08:90C0: C2 20        	rep	#$20
 34595                        	longa	on
 34596 08:90C2: 90 03        	bcc	L1454
 34597 08:90C4: 82 2D 00     	brl	L10866
 34598                        L1454:
 34599                        	.line	7727
 34600 08:90C7: A5 6E        	lda	<L1411+d_1
 34601 08:90C9: 29 FF 00     	and	#$ff
 34602 08:90CC: 85 01        	sta	<R0
 34603 08:90CE: E2 20        	sep	#$20
 34604                        	longa	off
 34605 08:90D0: A5 6D        	lda	<L1411+c_1
 34606 08:90D2: C9 78        	cmp	#<$78
 34607 08:90D4: C2 20        	rep	#$20
 34608                        	longa	on
 34609 08:90D6: F0 03        	beq	L1456
  Mon Aug  9 2021 16:52                                                Page 653


 34610 08:90D8: 82 05 00     	brl	L1455
 34611                        L1456:
 34612 08:90DB: A9 27 00     	lda	#$27
 34613 08:90DE: 80 03        	bra	L1457
 34614                        L1455:
 34615 08:90E0: A9 07 00     	lda	#$7
 34616                        L1457:
 34617 08:90E3: 85 05        	sta	<R1
 34618 08:90E5: 18           	clc
 34619 08:90E6: A5 05        	lda	<R1
 34620 08:90E8: 65 01        	adc	<R0
 34621 08:90EA: 85 09        	sta	<R2
 34622 08:90EC: E2 20        	sep	#$20
 34623                        	longa	off
 34624 08:90EE: A5 09        	lda	<R2
 34625 08:90F0: 85 6E        	sta	<L1411+d_1
 34626 08:90F2: C2 20        	rep	#$20
 34627                        	longa	on
 34628                        ;			str[i++] = d + '0';
 34629                        L10866:
 34630                        	.line	7728
 34631 08:90F4: E2 20        	sep	#$20
 34632                        	longa	off
 34633 08:90F6: 18           	clc
 34634 08:90F7: A9 30        	lda	#$30
 34635 08:90F9: 65 6E        	adc	<L1411+d_1
 34636 08:90FB: C2 20        	rep	#$20
 34637                        	longa	on
 34638 08:90FD: E2 20        	sep	#$20
 34639                        	longa	off
 34640 08:90FF: A6 63        	ldx	<L1411+i_1
 34641 08:9101: 95 6F        	sta	<L1411+str_1,X
 34642 08:9103: C2 20        	rep	#$20
 34643                        	longa	on
 34644 08:9105: E6 63        	inc	<L1411+i_1
 34645                        ;		} while (v && i < sizeof str / sizeof *s
                    tr);
 34646                        	.line	7729
 34647                        L10863:
 34648 08:9107: A5 69        	lda	<L1411+v_1
 34649 08:9109: 05 6B        	ora	<L1411+v_1+2
 34650 08:910B: D0 03        	bne	L1459
 34651 08:910D: 82 0A 00     	brl	L1458
 34652                        L1459:
 34653 08:9110: A5 63        	lda	<L1411+i_1
 34654 08:9112: C9 20 00     	cmp	#<$20
 34655 08:9115: B0 03        	bcs	L1460
 34656 08:9117: 82 66 FF     	brl	L10865
 34657                        L1460:
 34658                        L1458:
 34659                        L10864:
 34660                        ;		if (f & 8)
 34661                        	.line	7730
 34662                        ;			str[i++] = '-';
 34663 08:911A: E2 20        	sep	#$20
 34664                        	longa	off
 34665 08:911C: A5 61        	lda	<L1411+f_1
 34666 08:911E: 29 08        	and	#<$8
  Mon Aug  9 2021 16:52                                                Page 654


 34667 08:9120: C2 20        	rep	#$20
 34668                        	longa	on
 34669 08:9122: D0 03        	bne	L1461
 34670 08:9124: 82 0C 00     	brl	L10867
 34671                        L1461:
 34672                        	.line	7731
 34673 08:9127: E2 20        	sep	#$20
 34674                        	longa	off
 34675 08:9129: A9 2D        	lda	#$2d
 34676 08:912B: A6 63        	ldx	<L1411+i_1
 34677 08:912D: 95 6F        	sta	<L1411+str_1,X
 34678 08:912F: C2 20        	rep	#$20
 34679                        	longa	on
 34680 08:9131: E6 63        	inc	<L1411+i_1
 34681                        ;		j = i;
 34682                        L10867:
 34683                        	.line	7732
 34684 08:9133: A5 63        	lda	<L1411+i_1
 34685 08:9135: 85 65        	sta	<L1411+j_1
 34686                        ;		d = (f & 1) ? '0' : ' ';
 34687                        	.line	7733
 34688 08:9137: E2 20        	sep	#$20
 34689                        	longa	off
 34690 08:9139: A5 61        	lda	<L1411+f_1
 34691 08:913B: 29 01        	and	#<$1
 34692 08:913D: C2 20        	rep	#$20
 34693                        	longa	on
 34694 08:913F: D0 03        	bne	L1463
 34695 08:9141: 82 05 00     	brl	L1462
 34696                        L1463:
 34697 08:9144: A9 30 00     	lda	#$30
 34698 08:9147: 80 03        	bra	L1464
 34699                        L1462:
 34700 08:9149: A9 20 00     	lda	#$20
 34701                        L1464:
 34702 08:914C: 85 01        	sta	<R0
 34703 08:914E: E2 20        	sep	#$20
 34704                        	longa	off
 34705 08:9150: A5 01        	lda	<R0
 34706 08:9152: 85 6E        	sta	<L1411+d_1
 34707 08:9154: C2 20        	rep	#$20
 34708                        	longa	on
 34709                        ;		if (!(f & 2))
 34710                        	.line	7734
 34711                        ;		{
 34712 08:9156: E2 20        	sep	#$20
 34713                        	longa	off
 34714 08:9158: A5 61        	lda	<L1411+f_1
 34715 08:915A: 29 02        	and	#<$2
 34716 08:915C: C2 20        	rep	#$20
 34717                        	longa	on
 34718 08:915E: F0 03        	beq	L1465
 34719 08:9160: 82 21 00     	brl	L10868
 34720                        L1465:
 34721                        	.line	7735
 34722                        ;			while (j++ < w)
 34723                        	.line	7736
 34724                        L10869:
  Mon Aug  9 2021 16:52                                                Page 655


 34725 08:9163: A5 65        	lda	<L1411+j_1
 34726 08:9165: 85 01        	sta	<R0
 34727 08:9167: E6 65        	inc	<L1411+j_1
 34728 08:9169: A5 01        	lda	<R0
 34729 08:916B: C5 67        	cmp	<L1411+w_1
 34730 08:916D: 90 03        	bcc	L1466
 34731 08:916F: 82 12 00     	brl	L10870
 34732                        L1466:
 34733                        ;				putc_bfd(&pb, d); /* Rig
                    ht pad */
 34734                        	.line	7737
 34735 08:9172: D4 6E        	pei	<L1411+d_1
 34736 08:9174: F4 00 00     	pea	#0
 34737 08:9177: 18           	clc
 34738 08:9178: 7B           	tdc
 34739 08:9179: 69 11 00     	adc	#<L1411+pb_1
 34740 08:917C: 48           	pha
 34741 08:917D: 22 33 88 08  	jsl	~~putc_bfd
 34742 08:9181: 82 DF FF     	brl	L10869
 34743                        L10870:
 34744                        ;		}
 34745                        	.line	7738
 34746                        ;		do
 34747                        L10868:
 34748                        	.line	7739
 34749                        L10873:
 34750                        ;		{
 34751                        	.line	7740
 34752                        ;			putc_bfd(&pb, str[--i]); /* Numb
                    er body */
 34753                        	.line	7741
 34754 08:9184: C6 63        	dec	<L1411+i_1
 34755 08:9186: A6 63        	ldx	<L1411+i_1
 34756 08:9188: B5 6F        	lda	<L1411+str_1,X
 34757 08:918A: 48           	pha
 34758 08:918B: F4 00 00     	pea	#0
 34759 08:918E: 18           	clc
 34760 08:918F: 7B           	tdc
 34761 08:9190: 69 11 00     	adc	#<L1411+pb_1
 34762 08:9193: 48           	pha
 34763 08:9194: 22 33 88 08  	jsl	~~putc_bfd
 34764                        ;		} while (i);
 34765                        	.line	7742
 34766                        L10871:
 34767 08:9198: A5 63        	lda	<L1411+i_1
 34768 08:919A: F0 03        	beq	L1467
 34769 08:919C: 82 E5 FF     	brl	L10873
 34770                        L1467:
 34771                        L10872:
 34772                        ;		while (j++ < w)
 34773                        	.line	7743
 34774                        L10874:
 34775 08:919F: A5 65        	lda	<L1411+j_1
 34776 08:91A1: 85 01        	sta	<R0
 34777 08:91A3: E6 65        	inc	<L1411+j_1
 34778 08:91A5: A5 01        	lda	<R0
 34779 08:91A7: C5 67        	cmp	<L1411+w_1
 34780 08:91A9: 90 03        	bcc	L1468
  Mon Aug  9 2021 16:52                                                Page 656


 34781 08:91AB: 82 12 00     	brl	L10875
 34782                        L1468:
 34783                        ;			putc_bfd(&pb, d); /* Left pad */
 34784                        	.line	7744
 34785 08:91AE: D4 6E        	pei	<L1411+d_1
 34786 08:91B0: F4 00 00     	pea	#0
 34787 08:91B3: 18           	clc
 34788 08:91B4: 7B           	tdc
 34789 08:91B5: 69 11 00     	adc	#<L1411+pb_1
 34790 08:91B8: 48           	pha
 34791 08:91B9: 22 33 88 08  	jsl	~~putc_bfd
 34792 08:91BD: 82 DF FF     	brl	L10874
 34793                        L10875:
 34794                        ;	}
 34795                        	.line	7745
 34796                        L10828:
 34797 08:91C0: 82 02 FB     	brl	L10830
 34798                        L10829:
 34799                        ;
 34800                        ;	va_end(arp);
 34801                        	.line	7747
 34802                        ;
 34803                        ;	return putc_flush(&pb);
 34804                        	.line	7749
 34805 08:91C3: F4 00 00     	pea	#0
 34806 08:91C6: 18           	clc
 34807 08:91C7: 7B           	tdc
 34808 08:91C8: 69 11 00     	adc	#<L1411+pb_1
 34809 08:91CB: 48           	pha
 34810 08:91CC: 22 55 8B 08  	jsl	~~putc_flush
 34811                        L1469:
 34812 08:91D0: A8           	tay
 34813 08:91D1: DA           	phx
 34814 08:91D2: A6 96        	ldx	<L1410+4
 34815 08:91D4: A5 94        	lda	<L1410+2
 34816 08:91D6: 95 94        	sta	<L1410+2,X
 34817 08:91D8: A5 93        	lda	<L1410+1
 34818 08:91DA: 95 93        	sta	<L1410+1,X
 34819 08:91DC: 8A           	txa
 34820 08:91DD: FA           	plx
 34821 08:91DE: 2B           	pld
 34822 08:91DF: 48           	pha
 34823 08:91E0: 3B           	tsc
 34824 08:91E1: 18           	clc
 34825 08:91E2: 69 94 00     	adc	#L1410+2
 34826 08:91E5: 63 01        	adc	<1,s
 34827 08:91E7: 1B           	tcs
 34828 08:91E8: 98           	tya
 34829 08:91E9: 6B           	rtl
 34830                        ;}
 34831                        	.line	7750
 34832                        	.endblock	7750
 34833             00000092   L1410	equ	146
 34834             0000000D   L1411	equ	13
 34835 08:91EA:              	ends
 34836                        	efunc
 34837                        	.endfunc	7750,13,146
 34838                        	.line	7750
  Mon Aug  9 2021 16:52                                                Page 657


 34839                        ;
 34840                        ;#endif /* !FF_FS_READONLY */
 34841                        ;#endif /* FF_USE_STRFUNC */
 34842                        ;
 34843                        ;#if FF_CODE_PAGE == 0
 34844                        ;/*-----------------------------------------------
                    ------------------------*/
 34845                        ;/* Set Active Codepage for the Path Name         
                                            */
 34846                        ;/*-----------------------------------------------
                    ------------------------*/
 34847                        ;
 34848                        ;FRESULT f_setcp (
 34849                        ;		WORD cp /* Value to be set as active cod
                    e page */
 34850                        ;)
 34851                        ;{
 34852                        ;	static const WORD validcp[] =
 34853                        ;	{	437, 720, 737, 771, 775, 850, 852, 857, 
                    860, 861, 862, 863, 864, 865, 866, 869, 932, 936, 949, 950, 
                    0};
 34854                        ;	static const BYTE* const tables[] =
 34855                        ;	{	Ct437, Ct720, Ct737, Ct771, Ct775, Ct850
                    , Ct852, Ct857, Ct860, Ct861, Ct862, Ct863, Ct864, Ct865, Ct
                    866, Ct869, Dc932, Dc936, Dc949, Dc950, 0};
 34856                        ;	UINT i;
 34857                        ;
 34858                        ;	for (i = 0; validcp[i] != 0 && validcp[i] != cp;
                     i++); /* Find the code page */
 34859                        ;	if (validcp[i] != cp) return FR_INVALID_PARAMETE
                    R; /* Not found? */
 34860                        ;
 34861                        ;	CodePage = cp;
 34862                        ;	if (cp >= 900)
 34863                        ;	{ /* DBCS */
 34864                        ;		ExCvt = 0;
 34865                        ;		DbcTbl = tables[i];
 34866                        ;	}
 34867                        ;	else
 34868                        ;	{ /* SBCS */
 34869                        ;		ExCvt = tables[i];
 34870                        ;		DbcTbl = 0;
 34871                        ;	}
 34872                        ;	return FR_OK;
 34873                        ;}
 34874                        ;#endif	/* FF_CODE_PAGE == 0 */
 34875                        ;
 34876                        ;#if FF_USE_LFN >= 1				
                    		/* Code conversion (defined in unicode.c) */
 34877                        ;WCHAR ff_oem2uni (WCHAR oem, WORD cp)
 34878                        ;{
 34879                        	.line	7789
 34880                        	.line	7790
 34881                        	FFDOS
 34882                        	xdef	~~ff_oem2uni
 34883                        	func
 34884                        	.function	7790
 34885                        ~~ff_oem2uni:
  Mon Aug  9 2021 16:52                                                Page 658


 34886                        	longa	on
 34887                        	longi	on
 34888 08:91EA: 3B           	tsc
 34889 08:91EB: 38           	sec
 34890 08:91EC: E9 00 00     	sbc	#L1470
 34891 08:91EF: 1B           	tcs
 34892 08:91F0: 0B           	phd
 34893 08:91F1: 5B           	tcd
 34894             00000004   oem_0	set	4
 34895             00000006   cp_0	set	6
 34896                        	.block	7790
 34897                        ;	return oem;
 34898                        	.sym	oem,4,16,6,16
 34899                        	.sym	cp,6,5,6,16
 34900                        	.line	7791
 34901 08:91F2: A5 04        	lda	<L1470+oem_0
 34902                        L1473:
 34903 08:91F4: A8           	tay
 34904 08:91F5: A5 02        	lda	<L1470+2
 34905 08:91F7: 85 06        	sta	<L1470+2+4
 34906 08:91F9: A5 01        	lda	<L1470+1
 34907 08:91FB: 85 05        	sta	<L1470+1+4
 34908 08:91FD: 2B           	pld
 34909 08:91FE: 3B           	tsc
 34910 08:91FF: 18           	clc
 34911 08:9200: 69 04 00     	adc	#L1470+4
 34912 08:9203: 1B           	tcs
 34913 08:9204: 98           	tya
 34914 08:9205: 6B           	rtl
 34915                        ;}
 34916                        	.line	7792
 34917                        	.endblock	7792
 34918             00000000   L1470	equ	0
 34919             00000001   L1471	equ	1
 34920 08:9206:              	ends
 34921                        	efunc
 34922                        	.endfunc	7792,1,0
 34923                        	.line	7792
 34924                        ;
 34925                        ;WCHAR ff_uni2oem (DWORD uni, WORD cp)
 34926                        ;{
 34927                        	.line	7794
 34928                        	.line	7795
 34929                        	FFDOS
 34930                        	xdef	~~ff_uni2oem
 34931                        	func
 34932                        	.function	7795
 34933                        ~~ff_uni2oem:
 34934                        	longa	on
 34935                        	longi	on
 34936 08:9206: 3B           	tsc
 34937 08:9207: 38           	sec
 34938 08:9208: E9 00 00     	sbc	#L1474
 34939 08:920B: 1B           	tcs
 34940 08:920C: 0B           	phd
 34941 08:920D: 5B           	tcd
 34942             00000004   uni_0	set	4
 34943             00000008   cp_0	set	8
  Mon Aug  9 2021 16:52                                                Page 659


 34944                        	.block	7795
 34945                        ;	return uni;
 34946                        	.sym	uni,4,18,6,32
 34947                        	.sym	cp,8,5,6,16
 34948                        	.line	7796
 34949 08:920E: A5 04        	lda	<L1474+uni_0
 34950                        L1477:
 34951 08:9210: A8           	tay
 34952 08:9211: A5 02        	lda	<L1474+2
 34953 08:9213: 85 08        	sta	<L1474+2+6
 34954 08:9215: A5 01        	lda	<L1474+1
 34955 08:9217: 85 07        	sta	<L1474+1+6
 34956 08:9219: 2B           	pld
 34957 08:921A: 3B           	tsc
 34958 08:921B: 18           	clc
 34959 08:921C: 69 06 00     	adc	#L1474+6
 34960 08:921F: 1B           	tcs
 34961 08:9220: 98           	tya
 34962 08:9221: 6B           	rtl
 34963                        ;}
 34964                        	.line	7797
 34965                        	.endblock	7797
 34966             00000000   L1474	equ	0
 34967             00000001   L1475	equ	1
 34968 08:9222:              	ends
 34969                        	efunc
 34970                        	.endfunc	7797,1,0
 34971                        	.line	7797
 34972                        ;
 34973                        ;DWORD ff_wtoupper (DWORD uni)
 34974                        ;{
 34975                        	.line	7799
 34976                        	.line	7800
 34977                        	FFDOS
 34978                        	xdef	~~ff_wtoupper
 34979                        	func
 34980                        	.function	7800
 34981                        ~~ff_wtoupper:
 34982                        	longa	on
 34983                        	longi	on
 34984 08:9222: 3B           	tsc
 34985 08:9223: 38           	sec
 34986 08:9224: E9 00 00     	sbc	#L1478
 34987 08:9227: 1B           	tcs
 34988 08:9228: 0B           	phd
 34989 08:9229: 5B           	tcd
 34990             00000004   uni_0	set	4
 34991                        	.block	7800
 34992                        ;	return uni;
 34993                        	.sym	uni,4,18,6,32
 34994                        	.line	7801
 34995 08:922A: A6 06        	ldx	<L1478+uni_0+2
 34996 08:922C: A5 04        	lda	<L1478+uni_0
 34997                        L1481:
 34998 08:922E: A8           	tay
 34999 08:922F: A5 02        	lda	<L1478+2
 35000 08:9231: 85 06        	sta	<L1478+2+4
 35001 08:9233: A5 01        	lda	<L1478+1
  Mon Aug  9 2021 16:52                                                Page 660


 35002 08:9235: 85 05        	sta	<L1478+1+4
 35003 08:9237: 2B           	pld
 35004 08:9238: 3B           	tsc
 35005 08:9239: 18           	clc
 35006 08:923A: 69 04 00     	adc	#L1478+4
 35007 08:923D: 1B           	tcs
 35008 08:923E: 98           	tya
 35009 08:923F: 6B           	rtl
 35010                        ;}
 35011                        	.line	7802
 35012                        	.endblock	7802
 35013             00000000   L1478	equ	0
 35014             00000001   L1479	equ	1
 35015 08:9240:              	ends
 35016                        	efunc
 35017                        	.endfunc	7802,1,0
 35018                        	.line	7802
 35019                        ;#endif
 35020                        ;
 35021                        ;#if FF_USE_LFN == 3				
                    		/* Dynamic memory allocation */
 35022                        ;void* ff_memalloc (UINT msize)
 35023                        ;{
 35024                        	.line	7806
 35025                        	.line	7807
 35026                        	FFDOS
 35027                        	xdef	~~ff_memalloc
 35028                        	func
 35029                        	.function	7807
 35030                        ~~ff_memalloc:
 35031                        	longa	on
 35032                        	longi	on
 35033 08:9240: 3B           	tsc
 35034 08:9241: 38           	sec
 35035 08:9242: E9 08 00     	sbc	#L1482
 35036 08:9245: 1B           	tcs
 35037 08:9246: 0B           	phd
 35038 08:9247: 5B           	tcd
 35039             00000004   msize_0	set	4
 35040                        	.block	7807
 35041                        ;	//k_debug_integer("ff_memalloc:",msize);
 35042                        ;	return k_mem_allocate_heap(msize);
 35043                        	.sym	msize,4,16,6,16
 35044                        	.line	7809
 35045 08:9248: A5 0C        	lda	<L1482+msize_0
 35046 08:924A: 85 01        	sta	<R0
 35047 08:924C: 64 03        	stz	<R0+2
 35048 08:924E: D4 03        	pei	<R0+2
 35049 08:9250: D4 01        	pei	<R0
 35050 08:9252: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
 35051 08:9256: 85 05        	sta	<R1
 35052 08:9258: 86 07        	stx	<R1+2
 35053 08:925A: A6 07        	ldx	<R1+2
 35054 08:925C: A5 05        	lda	<R1
 35055                        L1485:
 35056 08:925E: A8           	tay
 35057 08:925F: A5 0A        	lda	<L1482+2
 35058 08:9261: 85 0C        	sta	<L1482+2+2
  Mon Aug  9 2021 16:52                                                Page 661


 35059 08:9263: A5 09        	lda	<L1482+1
 35060 08:9265: 85 0B        	sta	<L1482+1+2
 35061 08:9267: 2B           	pld
 35062 08:9268: 3B           	tsc
 35063 08:9269: 18           	clc
 35064 08:926A: 69 0A 00     	adc	#L1482+2
 35065 08:926D: 1B           	tcs
 35066 08:926E: 98           	tya
 35067 08:926F: 6B           	rtl
 35068                        ;}
 35069                        	.line	7810
 35070                        	.endblock	7810
 35071             00000008   L1482	equ	8
 35072             00000009   L1483	equ	9
 35073 08:9270:              	ends
 35074                        	efunc
 35075                        	.endfunc	7810,9,8
 35076                        	.line	7810
 35077                        ;
 35078                        ;void ff_memfree (void* mblock)
 35079                        ;{
 35080                        	.line	7812
 35081                        	.line	7813
 35082                        	FFDOS
 35083                        	xdef	~~ff_memfree
 35084                        	func
 35085                        	.function	7813
 35086                        ~~ff_memfree:
 35087                        	longa	on
 35088                        	longi	on
 35089 08:9270: 3B           	tsc
 35090 08:9271: 38           	sec
 35091 08:9272: E9 00 00     	sbc	#L1486
 35092 08:9275: 1B           	tcs
 35093 08:9276: 0B           	phd
 35094 08:9277: 5B           	tcd
 35095             00000004   mblock_0	set	4
 35096                        	.block	7813
 35097                        ;	//k_debug_pointer("ff_memalloc:",mblock);
 35098                        ;	k_mem_deallocate_heap(mblock);
 35099                        	.sym	mblock,4,129,6,32
 35100                        	.line	7815
 35101 08:9278: D4 06        	pei	<L1486+mblock_0+2
 35102 08:927A: D4 04        	pei	<L1486+mblock_0
 35103 08:927C: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
 35104                        ;}
 35105                        	.line	7816
 35106                        L1489:
 35107 08:9280: A5 02        	lda	<L1486+2
 35108 08:9282: 85 06        	sta	<L1486+2+4
 35109 08:9284: A5 01        	lda	<L1486+1
 35110 08:9286: 85 05        	sta	<L1486+1+4
 35111 08:9288: 2B           	pld
 35112 08:9289: 3B           	tsc
 35113 08:928A: 18           	clc
 35114 08:928B: 69 04 00     	adc	#L1486+4
 35115 08:928E: 1B           	tcs
 35116 08:928F: 6B           	rtl
  Mon Aug  9 2021 16:52                                                Page 662


 35117                        	.endblock	7816
 35118             00000000   L1486	equ	0
 35119             00000001   L1487	equ	1
 35120 08:9290:              	ends
 35121                        	efunc
 35122                        	.endfunc	7816,1,0
 35123                        	.line	7816
 35124                        ;
 35125                        ;#endif
 35126                        ;
 35127                        ;
 35128                        	.line	7819
 35129                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.c",7812
 35130                        	xref	~~disk_ioctl
 35131                        	xref	~~disk_write
 35132                        	xref	~~disk_read
 35133                        	xref	~~disk_status
 35134                        	xref	~~disk_initialize
 35135                        	xref	~~k_mem_deallocate_heap
 35136                        	xref	~~k_mem_allocate_heap
 35137                        	udata
 35138                        ~~Fsid
 35139 00:0000:              	ds	2
 35140 00:0002:              	ends
 35141                        	.sym	~~putc_init,~~putc_init,65,3,0
 35142                        	.sym	~~putc_flush,~~putc_flush,69,3,0
 35143                        	.sym	~~putc_bfd,~~putc_bfd,65,3,0
 35144                        	.sym	putbuff,0,10,14,640,131
 35145                        	.sym	~~create_partition,~~create_partition,69
                    ,3,0
 35146                        	.sym	~~validate,~~validate,69,3,0
 35147                        	.sym	~~mount_volume,~~mount_volume,69,3,0
 35148                        	.sym	~~find_volume,~~find_volume,80,3,0
 35149                        	.sym	~~check_fs,~~check_fs,80,3,0
 35150                        	.sym	~~get_ldnumber,~~get_ldnumber,69,3,0
 35151                        	.sym	~~follow_path,~~follow_path,69,3,0
 35152                        	.sym	~~create_name,~~create_name,69,3,0
 35153                        	.sym	~~pattern_matching,~~pattern_matching,69
                    ,3,0
 35154                        	.sym	~~get_achar,~~get_achar,82,3,0
 35155                        	.sym	~~get_fileinfo,~~get_fileinfo,65,3,0
 35156                        	.sym	~~dir_remove,~~dir_remove,69,3,0
 35157                        	.sym	~~dir_register,~~dir_register,69,3,0
 35158                        	.sym	~~dir_find,~~dir_find,69,3,0
 35159                        	.sym	~~dir_read,~~dir_read,69,3,0
 35160                        	.sym	~~sum_sfn,~~sum_sfn,78,3,0
 35161                        	.sym	~~gen_numname,~~gen_numname,65,3,0
 35162                        	.sym	~~put_lfn,~~put_lfn,65,3,0
 35163                        	.sym	~~pick_lfn,~~pick_lfn,69,3,0
 35164                        	.sym	~~cmp_lfn,~~cmp_lfn,69,3,0
 35165                        	.sym	~~st_clust,~~st_clust,65,3,0
 35166                        	.sym	~~ld_clust,~~ld_clust,82,3,0
 35167                        	.sym	~~dir_alloc,~~dir_alloc,69,3,0
 35168                        	.sym	~~dir_next,~~dir_next,69,3,0
 35169                        	.sym	~~dir_sdi,~~dir_sdi,69,3,0
 35170                        	.sym	~~dir_clear,~~dir_clear,69,3,0
 35171                        	.sym	~~create_chain,~~create_chain,82,3,0
  Mon Aug  9 2021 16:52                                                Page 663


 35172                        	.sym	~~remove_chain,~~remove_chain,69,3,0
 35173                        	.sym	~~put_fat,~~put_fat,69,3,0
 35174                        	.sym	~~get_fat,~~get_fat,82,3,0
 35175                        	.sym	~~clst2sect,~~clst2sect,82,3,0
 35176                        	.sym	~~sync_fs,~~sync_fs,69,3,0
 35177                        	.sym	~~move_window,~~move_window,69,3,0
 35178                        	.sym	~~sync_window,~~sync_window,69,3,0
 35179                        	.sym	~~put_utf,~~put_utf,78,3,0
 35180                        	.sym	~~tchar2uni,~~tchar2uni,82,3,0
 35181                        	.sym	~~dbc_2nd,~~dbc_2nd,69,3,0
 35182                        	.sym	~~dbc_1st,~~dbc_1st,69,3,0
 35183                        	.sym	~~chk_chr,~~chk_chr,69,3,0
 35184                        	.sym	~~mem_cmp,~~mem_cmp,69,3,0
 35185                        	.sym	~~mem_set,~~mem_set,65,3,0
 35186                        	.sym	~~mem_cpy,~~mem_cpy,65,3,0
 35187                        	.sym	~~st_dword,~~st_dword,65,3,0
 35188                        	.sym	~~st_word,~~st_word,65,3,0
 35189                        	.sym	~~ld_dword,~~ld_dword,82,3,0
 35190                        	.sym	~~ld_word,~~ld_word,69,3,0
 35191                        	.sym	~~ExCvt,~~ExCvt,110,3,0,128
 35192                        	.sym	~~LfnOfs,~~LfnOfs,110,3,0,13
 35193                        	.sym	~~VolumeStr,~~VolumeStr,1134,3,32,8
 35194                        	.sym	~~Fsid,~~Fsid,5,3,16
 35195                        	.sym	~~FatFs,~~FatFs,1130,3,32,75,8
 35196                        	.sym	va_list,0,142,14,32
 35197                        	.sym	FILE,0,138,14,32,130
 35198                        	.sym	FILE_POINTER,0,10,14,112,130
 35199                        	.sym	PDOSHANDLE,0,138,14,32,129
 35200                        	.sym	DOSHANDLE,0,10,14,80,129
 35201                        	.sym	PFXDOSDEVICE,0,138,14,32,127
 35202                        	.sym	FXDOSDEVICE,0,10,14,5744,127
 35203                        	.sym	DOSINITDEVICE,0,641,14,32
 35204                        	.sym	DOSSECTORWRITER,0,654,14,32
 35205                        	.sym	DOSSECTORREADER,0,654,14,32
 35206                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,126
 35207                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,126
 35208                        	.sym	PIDSECTOR,0,138,14,32,103
 35209                        	.sym	IDSECTOR,0,10,14,2048,103
 35210                        	.sym	PLFN,0,138,14,32,102
 35211                        	.sym	LFN,0,10,14,256,102
 35212                        	.sym	PFAT16ENTRYLONG,0,138,14,32,101
 35213                        	.sym	FAT16ENTRYLONG,0,10,14,288,101
 35214                        	.sym	PFAT16ENTRY,0,138,14,32,100
 35215                        	.sym	FAT16ENTRY,0,10,14,256,100
 35216                        	.sym	Fat16BootSector,0,10,14,4096,99
 35217                        	.sym	PPARTITIONTABLE,0,138,14,32,98
 35218                        	.sym	PARTITIONTABLE,0,10,14,128,98
 35219                        	.sym	PFATBOOTSECTOR,0,138,14,32,97
 35220                        	.sym	FATBOOTSECTOR,0,10,14,928,97
 35221                        	.sym	fat_BS_t,0,10,14,688,96
 35222                        	.sym	fat_extBS_16_t,0,10,14,192,95
 35223                        	.sym	PFAT32EXT,0,138,14,32,94
 35224                        	.sym	fat_extBS_32_t,0,10,14,416,94
 35225                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,93
 35226                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,93
 35227                        	.sym	PFILEINFO,0,138,14,32,92
 35228                        	.sym	FILEINFO,0,10,14,136,92
 35229                        	.sym	PDISKINFO,0,138,14,32,91
  Mon Aug  9 2021 16:52                                                Page 664


 35230                        	.sym	DISKINFO,0,10,14,416,91
 35231                        	.sym	PDIRENTRY,0,138,14,32,90
 35232                        	.sym	DIRENTRY,0,10,14,256,90
 35233                        	.sym	~~disk_ioctl,~~disk_ioctl,69,18,0
 35234                        	.sym	~~disk_write,~~disk_write,69,18,0
 35235                        	.sym	~~disk_read,~~disk_read,69,18,0
 35236                        	.sym	~~disk_status,~~disk_status,78,18,0
 35237                        	.sym	~~disk_initialize,~~disk_initialize,78,1
                    8,0
 35238                        	.sym	DRESULT,0,5,14,16
 35239                        	.sym	DSTATUS,0,14,14,8
 35240                        	.sym	PIRQCHAIN,0,138,14,32,89
 35241                        	.sym	IRQCHAIN,0,10,14,128,89
 35242                        	.sym	DEVICEDRIVER_COMMAND,0,654,14,32
 35243                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
 35244                        	.sym	DEVICEDRIVER_WRITE,0,654,14,32
 35245                        	.sym	DEVICEDRIVER_READ,0,654,14,32
 35246                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
 35247                        	.sym	DEVICEDRIVER_IRQ,0,641,14,32
 35248                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,88
 35249                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,88
 35250                        	.sym	GETDRIVERDEF,0,8842,14,32,87
 35251                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,87
 35252                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,87
 35253                        	.sym	PSEGMENTHEADER,0,138,14,32,86
 35254                        	.sym	SEGMENTHEADER,0,10,14,160,86
 35255                        	.sym	PDEBUGBYTEBITS,0,138,14,32,85
 35256                        	.sym	DEBUGBYTEBITS,0,10,14,8,85
 35257                        	.sym	PFXENVIRONMENT,0,138,14,32,84
 35258                        	.sym	FXENVIRONMENT,0,10,14,96,84
 35259                        	.sym	PFXZEROPAGE,0,138,14,32,83
 35260                        	.sym	FXZEROPAGE,0,10,14,720,83
 35261                        	.sym	IRQBUFFER,0,10,14,32,82
 35262                        	.sym	KERNELTRAPCALL,0,641,14,32
 35263                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,81
 35264                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,81
 35265                        	.sym	~~ff_memfree,~~ff_memfree,65,2,0
 35266                        	.sym	~~ff_memalloc,~~ff_memalloc,1089,2,32
 35267                        	.sym	~~ff_wtoupper,~~ff_wtoupper,82,2,0
 35268                        	.sym	~~ff_uni2oem,~~ff_uni2oem,80,2,0
 35269                        	.sym	~~ff_oem2uni,~~ff_oem2uni,80,2,0
 35270                        	.sym	~~f_gets,~~f_gets,1102,2,32
 35271                        	.sym	~~f_printf,~~f_printf,69,2,0
 35272                        	.sym	~~f_puts,~~f_puts,69,2,0
 35273                        	.sym	~~f_putc,~~f_putc,69,2,0
 35274                        	.sym	~~f_mkfs,~~f_mkfs,69,2,0
 35275                        	.sym	~~f_mount,~~f_mount,69,2,0
 35276                        	.sym	~~f_setlabel,~~f_setlabel,69,2,0
 35277                        	.sym	~~f_getlabel,~~f_getlabel,69,2,0
 35278                        	.sym	~~f_getfree,~~f_getfree,69,2,0
 35279                        	.sym	~~f_stat,~~f_stat,69,2,0
 35280                        	.sym	~~f_rename,~~f_rename,69,2,0
 35281                        	.sym	~~f_unlink,~~f_unlink,69,2,0
 35282                        	.sym	~~f_mkdir,~~f_mkdir,69,2,0
 35283                        	.sym	~~f_findnext,~~f_findnext,69,2,0
 35284                        	.sym	~~f_findfirst,~~f_findfirst,69,2,0
 35285                        	.sym	~~f_readdir,~~f_readdir,69,2,0
 35286                        	.sym	~~f_closedir,~~f_closedir,69,2,0
  Mon Aug  9 2021 16:52                                                Page 665


 35287                        	.sym	~~f_opendir,~~f_opendir,69,2,0
 35288                        	.sym	~~f_sync,~~f_sync,69,2,0
 35289                        	.sym	~~f_truncate,~~f_truncate,69,2,0
 35290                        	.sym	~~f_lseek,~~f_lseek,69,2,0
 35291                        	.sym	~~f_write,~~f_write,69,2,0
 35292                        	.sym	~~f_read,~~f_read,69,2,0
 35293                        	.sym	~~f_close,~~f_close,69,2,0
 35294                        	.sym	~~f_open,~~f_open,69,2,0
 35295                        	.sym	FRESULT,0,5,14,16
 35296                        	.sym	MKFS_PARM,0,10,14,80,80
 35297                        	.sym	FILINFO,0,10,14,2224,79
 35298                        	.sym	DIR,0,10,14,416,78
 35299                        	.sym	FIL,0,10,14,4400,77
 35300                        	.sym	FFOBJID,0,10,14,128,76
 35301                        	.sym	FATFS,0,10,14,4504,75
 35302                        	.sym	LBA_t,0,18,14,32
 35303                        	.sym	FSIZE_t,0,18,14,32
 35304                        	.sym	TCHAR,0,14,14,8
 35305                        	.sym	PCOMMANDARGS,0,138,14,32,74
 35306                        	.sym	COMMANDARGS,0,10,14,64,74
 35307                        	.sym	PTOKENIZESTATE,0,133,14,32
 35308                        	.sym	TOKENIZESTATE,0,5,14,16
 35309                        	.sym	PTOKEN,0,138,14,32,73
 35310                        	.sym	TOKEN,0,10,14,64,73
 35311                        	.sym	PTOKENTYPE,0,133,14,32
 35312                        	.sym	TOKENTYPE,0,5,14,16
 35313                        	.sym	FXCommandHandler,0,656,14,32
 35314                        	.sym	PCONSOLECTX,0,138,14,32,72
 35315                        	.sym	CONSOLECTX,0,10,14,1144,72
 35316                        	.sym	PSPINNERCTX,0,138,14,32,71
 35317                        	.sym	SPINNERCTX,0,10,14,48,71
 35318                        	.sym	HCLIP,0,138,14,32,70
 35319                        	.sym	PCLIPBOARD_DATA,0,138,14,32,70
 35320                        	.sym	CLIPBOARD_DATA,0,10,14,168,70
 35321                        	.sym	PEVENTMANAGER,0,138,14,32,69
 35322                        	.sym	EVENTMANAGER,0,10,14,192,69
 35323                        	.sym	EV_RUN,0,656,14,32
 35324                        	.sym	EV_QUERY_METRIC,0,656,14,32
 35325                        	.sym	EV_CONFIGURE,0,656,14,32
 35326                        	.sym	EV_UNINIT,0,641,14,32
 35327                        	.sym	EV_INIT,0,8833,14,32
 35328                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,68
 35329                        	.sym	MOUSE_MSG_STATE,0,10,14,184,68
 35330                        	.sym	PFXEVENTPROCESS,0,138,14,32,67
 35331                        	.sym	FXEVENTPROCESS,0,10,14,64,67
 35332                        	.sym	FXASYNCPROCESS,0,641,14,32
 35333                        	.sym	PMARSHALDATA,0,139,14,32,66
 35334                        	.sym	MARSHALDATA,0,11,14,32,66
 35335                        	.sym	FXIDLEPROCESS,0,641,14,32
 35336                        	.sym	FXEventProc,0,641,14,32
 35337                        	.sym	PMOUSEMSGDATA,0,138,14,32,65
 35338                        	.sym	MOUSEMSGDATA,0,10,14,64,65
 35339                        	.sym	MSGIRQ,0,5,14,16
 35340                        	.sym	MAINLOOPARGS,0,10,14,16,64
 35341                        	.sym	PEACHCHILD_MSG,0,138,14,32,63
 35342                        	.sym	EACHCHILD_MSG,0,10,14,64,63
 35343                        	.sym	PMSGBOX_DATA,0,138,14,32,62
 35344                        	.sym	MSGBOX_DATA,0,10,14,96,62
  Mon Aug  9 2021 16:52                                                Page 666


 35345                        	.sym	PDESKTOP_DATA,0,138,14,32,61
 35346                        	.sym	DESKTOP_DATA,0,10,14,64,61
 35347                        	.sym	PWINDOWMANAGER,0,138,14,32,60
 35348                        	.sym	WINDOWMANAGER,0,10,14,160,60
 35349                        	.sym	WM_DOPROCS,0,641,14,32
 35350                        	.sym	WM_QUERY_METRIC,0,656,14,32
 35351                        	.sym	WM_CONFIGURE,0,656,14,32
 35352                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
 35353                        	.sym	WM_EVENTS,0,641,14,32
 35354                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,59
 35355                        	.sym	CUR_PALETTE_MAP,0,10,14,400,59
 35356                        	.sym	PCLICKDETECTED,0,138,14,32,58
 35357                        	.sym	CLICKDETECTED,0,10,14,64,58
 35358                        	.sym	OBJECTCLICKED,0,641,14,32
 35359                        	.sym	PALLOCATIONHEADER,0,138,14,32,57
 35360                        	.sym	ALLOCATIONHEADER,0,10,14,80,57
 35361                        	.sym	PIPCPORT,0,138,14,32,56
 35362                        	.sym	IPCPORT,0,10,14,144,56
 35363                        	.sym	~~k_mem_deallocate_heap,~~k_mem_dealloca
                    te_heap,65,18,0
 35364                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
 35365                        	.sym	MemoryCallback,0,641,14,32
 35366                        	.sym	PFXMEMORYMAP,0,138,14,32,55
 35367                        	.sym	FXMEMORYMAP,0,10,14,2072,55
 35368                        	.sym	UMM_HEAP_INFO,0,10,14,256,54
 35369                        	.sym	FOREACHNODEUNTIL,0,654,14,32
 35370                        	.sym	FOREACHNODE,0,641,14,32
 35371                        	.sym	PEXECUTIVE,0,138,14,32,53
 35372                        	.sym	EXECUTIVE,0,10,14,128,53
 35373                        	.sym	EX_QUERY_METRIC,0,656,14,32
 35374                        	.sym	EX_CONFIGURE,0,656,14,32
 35375                        	.sym	EX_UNINIT,0,641,14,32
 35376                        	.sym	EX_INIT,0,8833,14,32
 35377                        	.sym	PFXSTRING,0,138,14,32,52
 35378                        	.sym	FXSTRING,0,10,14,64,52
 35379                        	.sym	Boolean_T,0,5,14,16
 35380                        	.sym	ldiv_t,0,10,14,64,50
 35381                        	.sym	div_t,0,10,14,32,49
 35382                        	.sym	wctype_t,0,16,14,16
 35383                        	.sym	wint_t,0,16,14,16
 35384                        	.sym	wchar_t,0,14,14,8
 35385                        	.sym	ptrdiff_t,0,7,14,32
 35386                        	.sym	size_t,0,16,14,16
 35387                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,48
 35388                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,48
 35389                        	.sym	PFXRFHEADER_STRING,0,138,14,32,47
 35390                        	.sym	FXRFHEADER_STRING,0,10,14,32,47
 35391                        	.sym	PFXRFHEADER_FONT,0,138,14,32,46
 35392                        	.sym	FXRFHEADER_FONT,0,10,14,144,46
 35393                        	.sym	PFXRFHEADER,0,138,14,32,45
 35394                        	.sym	FXRFHEADER,0,10,14,72,45
 35395                        	.sym	PFXCOMBUFFER,0,138,14,32,44
 35396                        	.sym	FXCOMBUFFER,0,10,14,2080,44
 35397                        	.sym	PSUBMENULIST,0,138,14,32,43
 35398                        	.sym	SUBMENULIST,0,10,14,40,43
 35399                        	.sym	HSUBMENU,0,7,14,32
 35400                        	.sym	PSUBMENU,0,138,14,32,42
  Mon Aug  9 2021 16:52                                                Page 667


 35401                        	.sym	SUBMENU,0,10,14,64,42
 35402                        	.sym	MenuAction,0,641,14,32
 35403                        	.sym	PMENUANCHOR,0,138,14,32,41
 35404                        	.sym	MENUANCHOR,0,10,14,272,41
 35405                        	.sym	PMSGBOX,0,138,14,32,40
 35406                        	.sym	MSGBOX,0,10,14,144,40
 35407                        	.sym	PTEXTBOX,0,138,14,32,39
 35408                        	.sym	TEXTBOX,0,10,14,144,39
 35409                        	.sym	PLISTBOX,0,138,14,32,38
 35410                        	.sym	LISTBOX,0,10,14,240,38
 35411                        	.sym	PSCROLLBAR,0,138,14,32,37
 35412                        	.sym	SCROLLBAR,0,10,14,240,37
 35413                        	.sym	PBUTTON,0,138,14,32,36
 35414                        	.sym	BUTTON,0,10,14,96,36
 35415                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,35
 35416                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,35
 35417                        	.sym	PMENUTAG,0,138,14,32,34
 35418                        	.sym	MENUTAG,0,10,14,160,34
 35419                        	.sym	PMENU,0,138,14,32,33
 35420                        	.sym	MENU,0,10,14,280,33
 35421                        	.sym	HMENURESOURCE,0,129,14,32
 35422                        	.sym	FONTMETRIC,0,10,14,32,32
 35423                        	.sym	TITLE,0,142,14,32
 35424                        	.sym	PHANDLE,0,1153,14,32
 35425                        	.sym	HANDLE,0,129,14,32
 35426                        	.sym	PWINDOWEX,0,138,14,32,31
 35427                        	.sym	WINDOWEX,0,10,14,3880,31
 35428                        	.sym	PWINDOW,0,138,14,32,30
 35429                        	.sym	WINDOW,0,10,14,3904,30
 35430                        	.sym	PDRAGDATA,0,138,14,32,29
 35431                        	.sym	DRAGDATA,0,10,14,216,29
 35432                        	.sym	PNCCLICKABLE,0,138,14,32,28
 35433                        	.sym	NCCLICKABLE,0,10,14,136,28
 35434                        	.sym	HCLICKABLE,0,7,14,32
 35435                        	.sym	PCLICKABLE,0,138,14,32,27
 35436                        	.sym	CLICKABLE,0,10,14,152,27
 35437                        	.sym	PWNDCLASS,0,138,14,32,26
 35438                        	.sym	WNDCLASS,0,10,14,272,26
 35439                        	.sym	HBRUSH,0,129,14,32
 35440                        	.sym	HCURSOR,0,129,14,32
 35441                        	.sym	HICON,0,129,14,32
 35442                        	.sym	HINSTANCE,0,129,14,32
 35443                        	.sym	FXWndProc,0,654,14,32
 35444                        	.sym	PDRECT,0,138,14,32,25
 35445                        	.sym	DRECT,0,10,14,112,25
 35446                        	.sym	PRECTP,0,138,14,32,24
 35447                        	.sym	RECTP,0,10,14,96,24
 35448                        	.sym	PRECT,0,138,14,32,23
 35449                        	.sym	RECT,0,10,14,112,23
 35450                        	.sym	PPOINT,0,138,14,32,22
 35451                        	.sym	POINT,0,10,14,32,22
 35452                        	.sym	PFXPROPERTY,0,138,14,32,20
 35453                        	.sym	FXPROPERTY,0,10,14,384,20
 35454                        	.sym	PKEYSTATE,0,138,14,32,19
 35455                        	.sym	KEYSTATE,0,10,14,112,19
 35456                        	.sym	SCANCODE,0,14,14,8
 35457                        	.sym	KEYCODE,0,16,14,16
 35458                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
  Mon Aug  9 2021 16:52                                                Page 668


 35459                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
 35460                        	.sym	PFXPROCESS,0,138,14,32,17
 35461                        	.sym	FXPROCESS,0,10,14,800,17
 35462                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
 35463                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
 35464                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
 35465                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
 35466                        	.sym	FXProcessProc,0,641,14,32
 35467                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
 35468                        	.sym	FXCMDMESSAGE,0,10,14,312,14
 35469                        	.sym	PFXOSMESSAGE,0,138,14,32,13
 35470                        	.sym	FXOSMESSAGE,0,10,14,312,13
 35471                        	.sym	PINT_REGS,0,138,14,32,12
 35472                        	.sym	INT_REGS,0,10,14,104,12
 35473                        	.sym	TASK_STACK,0,10,14,32,11
 35474                        	.sym	TASK,0,10,14,48,10
 35475                        	.sym	PIRQDATA,0,138,14,32,9
 35476                        	.sym	IRQDATA,0,10,14,48,9
 35477                        	.sym	HMENU,0,129,14,32
 35478                        	.sym	HWND,0,129,14,32
 35479                        	.sym	MSGDATA,0,14,14,8
 35480                        	.sym	MSGDEST,0,18,14,32
 35481                        	.sym	MSGSRC,0,18,14,32
 35482                        	.sym	MSGTYPE,0,16,14,16
 35483                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
 35484                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
 35485                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
 35486                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
 35487                        	.sym	FILE_PATH_LIST,0,138,14,32,3
 35488                        	.sym	PROCEDURE_LIST,0,138,14,32,3
 35489                        	.sym	FILE_HANDLE,0,138,14,32,8
 35490                        	.sym	FILE_BLOCK,0,10,14,552,8
 35491                        	.sym	SEMAPHORE,0,10,14,16,7
 35492                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
 35493                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
 35494                        	.sym	KRESULT,0,18,14,32
 35495                        	.sym	PKERNEL_ERROR,0,138,14,32,5
 35496                        	.sym	KERNEL_ERROR,0,10,14,32,5
 35497                        	.sym	PROCESS_STATUS,0,16,14,16
 35498                        	.sym	FILE_PATH_NAME,0,142,14,32
 35499                        	.sym	PROCESS_RESOURCE,0,129,14,32
 35500                        	.sym	PROCESS_TLS,0,129,14,32
 35501                        	.sym	PROCESS_CTX,0,129,14,32
 35502                        	.sym	USERID,0,16,14,16
 35503                        	.sym	PROCESS_ID,0,18,14,32
 35504                        	.sym	PROCESS_BANK,0,14,14,8
 35505                        	.sym	PFXQUEUE,0,138,14,32,4
 35506                        	.sym	FXQUEUE,0,10,14,80,4
 35507                        	.sym	PFXNODELIST,0,138,14,32,3
 35508                        	.sym	FXNODELIST,0,10,14,96,3
 35509                        	.sym	NodeListDeallocator,0,641,14,32
 35510                        	.sym	PFXNODE,0,138,14,32,2
 35511                        	.sym	FXNODE,0,10,14,384,2
 35512                        	.sym	PBYTEBITS,0,138,14,32,1
 35513                        	.sym	BYTEBITS,0,10,14,8,1
 35514                        	.sym	HRESULT,0,18,14,32
 35515                        	.sym	LPWCHAR,0,144,14,32
 35516                        	.sym	WCHAR,0,16,14,16
  Mon Aug  9 2021 16:52                                                Page 669


 35517                        	.sym	HSTRINGTABLE,0,129,14,32
 35518                        	.sym	HCOLOR,0,129,14,32
 35519                        	.sym	HFONT,0,129,14,32
 35520                        	.sym	HDC,0,129,14,32
 35521                        	.sym	HPOINTER,0,129,14,32
 35522                        	.sym	uint32_t,0,18,14,32
 35523                        	.sym	uint8_t,0,14,14,8
 35524                        	.sym	LPBOOL,0,142,14,32
 35525                        	.sym	BOOL,0,14,14,8
 35526                        	.sym	DWORD,0,18,14,32
 35527                        	.sym	ULONG,0,18,14,32
 35528                        	.sym	LPLONG,0,135,14,32
 35529                        	.sym	LONG,0,7,14,32
 35530                        	.sym	PUINT,0,144,14,32
 35531                        	.sym	USHORT,0,16,14,16
 35532                        	.sym	UINT,0,16,14,16
 35533                        	.sym	INT,0,5,14,16
 35534                        	.sym	WORD,0,5,14,16
 35535                        	.sym	PBYTE,0,142,14,32
 35536                        	.sym	BYTE,0,14,14,8
 35537                        	.sym	IOPORT,0,142,14,32
 35538                        	.sym	PUCHAR,0,142,14,32
 35539                        	.sym	UCHAR,0,14,14,8
 35540                        	.sym	LPWCSTR,0,142,14,32
 35541                        	.sym	LPCSTR,0,142,14,32
 35542                        	.sym	LPSTR,0,142,14,32
 35543                        	.sym	LPCHAR,0,142,14,32
 35544                        	.sym	CHAR,0,14,14,8
 35545                        	.sym	PUINT_32,0,146,14,32
 35546                        	.sym	UINT_32,0,18,14,32
 35547                        	.sym	PUINT_16,0,144,14,32
 35548                        	.sym	UINT_16,0,16,14,16
 35549                        	.sym	PUINT_8,0,142,14,32
 35550                        	.sym	UINT_8,0,14,14,8
 35551                        	.sym	LPVOID,0,129,14,32
 35552                        	.sym	VOID,0,1,14,32
 35553                        	end


      Lines assembled: 35553
      Errors: 0
