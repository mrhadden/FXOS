  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",0
     7                        ;/*-----------------------------------------------
                    -----------------------------/
     8                        ; /  FatFs - Generic FAT Filesystem Module  R0.14 
                                                  /
     9                        ; /-----------------------------------------------
                    ------------------------------/
    10                        ; /
    11                        ; / Copyright (C) 2019, ChaN, all right reserved.
    12                        ; /
    13                        ; / FatFs module is an open source software. Redis
                    tribution and use of FatFs in
    14                        ; / source and binary forms, with or without modif
                    ication, are permitted provided
    15                        ; / that the following condition is met:
    16                        ; /
    17                        ; / 1. Redistributions of source code must retain 
                    the above copyright notice,
    18                        ; /    this condition and the following disclaimer
                    .
    19                        ; /
    20                        ; / This software is provided by the copyright hol
                    der and contributors "AS IS"
    21                        ; / and any warranties related to this software ar
                    e DISCLAIMED.
    22                        ; / The copyright owner or contributors be NOT LIA
                    BLE for any damages caused
    23                        ; / by use of this software.
    24                        ; /
    25                        ; /-----------------------------------------------
                    -----------------------------*/
    26                        ;
    27                        ;#include "fxtypes.h"
    28                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    29                        	.stag	_fx_bytebits,8,1
    30                        	.member	b7,0,14,17,1
    31                        	.member	b6,1,14,17,1
    32                        	.member	b5,2,14,17,1
    33                        	.member	b4,3,14,17,1
    34                        	.member	b3,4,14,17,1
    35                        	.member	b2,5,14,17,1
    36                        	.member	b1,6,14,17,1
    37                        	.member	b0,7,14,17,1
    38                        	.eos
    39                        	.stag	_fx_node,384,2
  Sat Jul 10 2021  1:15                                                Page 2


    40                        	.member	type,0,14,8,8
    41                        	.member	Reserved0,8,14,8,8
    42                        	.member	data,16,129,8,32
    43                        	.member	last,48,138,8,32,2
    44                        	.member	next,80,138,8,32,2
    45                        	.member	name,112,110,8,0,32
    46                        	.member	Reserved1,368,16,8,16
    47                        	.eos
    48                        	.stag	_fx_nodelist,96,3
    49                        	.member	listhead,0,138,8,32,2
    50                        	.member	listData,32,129,8,32
    51                        	.member	deallocator,64,641,8,32
    52                        	.eos
    53                        	.stag	_fx_queue,80,4
    54                        	.member	count,0,5,8,16
    55                        	.member	front,16,138,8,32,2
    56                        	.member	rear,48,138,8,32,2
    57                        	.eos
    58                        	.stag	fake5_,32,5
    59                        	.member	subsystem,0,14,8,8
    60                        	.member	level,8,14,8,8
    61                        	.member	error,16,16,8,16
    62                        	.eos
    63                        	.stag	_fx_process_signal,16,6
    64                        	.member	cbSize,0,16,8,16
    65                        	.eos
    66                        	.stag	_fx_semaphore,16,7
    67                        	.member	reserved,0,5,8,16
    68                        	.eos
    69                        	.stag	_fx_fileBlock,552,8
    70                        	.member	openCount,0,16,8,16
    71                        	.member	lockCount,16,16,8,16
    72                        	.member	dirty,32,14,8,8
    73                        	.member	fileBuffer,40,110,8,0,64
    74                        	.eos
    75                        	.stag	_fx_irq_data,48,9
    76                        	.member	line,0,5,8,16
    77                        	.member	keycode,16,142,8,32
    78                        	.eos
    79                        	.stag	_task,48,10
    80                        	.member	SPL,0,14,8,8
    81                        	.member	SPH,8,14,8,8
    82                        	.member	pstack,16,142,8,32
    83                        	.eos
    84                        	.stag	_task_stack,32,11
    85                        	.member	SS,0,142,8,32
    86                        	.eos
    87                        	.stag	int_regs,104,12
    88                        	.member	PB,0,14,8,8
    89                        	.member	PH,8,14,8,8
    90                        	.member	PL,16,14,8,8
    91                        	.member	PP,24,14,8,8
    92                        	.member	DB,32,14,8,8
    93                        	.member	DH,40,14,8,8
    94                        	.member	DL,48,14,8,8
    95                        	.member	AH,56,14,8,8
    96                        	.member	AL,64,14,8,8
    97                        	.member	XH,72,14,8,8
  Sat Jul 10 2021  1:15                                                Page 3


    98                        	.member	XL,80,14,8,8
    99                        	.member	YH,88,14,8,8
   100                        	.member	YL,96,14,8,8
   101                        	.eos
   102                        	.stag	_fx_eventMessage,304,13
   103                        	.member	src,0,18,8,32
   104                        	.member	dest,32,18,8,32
   105                        	.member	type,64,16,8,16
   106                        	.member	hwnd,80,129,8,32
   107                        	.member	pheap,112,129,8,32
   108                        	.member	msgTime,144,18,8,32
   109                        	.member	data,176,110,8,0,16
   110                        	.eos
   111                        	.stag	_fx_cmdMessage,304,14
   112                        	.member	src,0,18,8,32
   113                        	.member	dest,32,18,8,32
   114                        	.member	type,64,16,8,16
   115                        	.member	hwnd,80,129,8,32
   116                        	.member	pheap,112,129,8,32
   117                        	.member	msgTime,144,18,8,32
   118                        	.member	cmdCId,176,16,8,16
   119                        	.member	cmdMId,192,16,8,16
   120                        	.member	parameter1,208,18,8,32
   121                        	.member	parameter2,240,18,8,32
   122                        	.member	parameter3,272,18,8,32
   123                        	.eos
   124                        	.stag	_fx_console_ctl,448,15
   125                        	.member	maxCols,0,5,8,16
   126                        	.member	maxRows,16,5,8,16
   127                        	.member	curX,32,5,8,16
   128                        	.member	curY,48,5,8,16
   129                        	.member	fgColor,64,5,8,16
   130                        	.member	bgColor,80,5,8,16
   131                        	.member	mode,96,14,8,8
   132                        	.member	kbBuffer,104,101,8,0,16
   133                        	.member	screenBuffer,360,142,8,32
   134                        	.member	desktopMode,392,14,8,8
   135                        	.member	lastMouseButton,400,5,8,16
   136                        	.member	lastMouseX,416,5,8,16
   137                        	.member	lastMouseY,432,5,8,16
   138                        	.eos
   139                        	.stag	_fx_desktop_ctl,392,16
   140                        	.member	desktopMode,0,14,8,8
   141                        	.member	cursorCtl,8,5,8,16
   142                        	.member	cursorState,24,5,8,16
   143                        	.member	backgroundColor,40,5,8,16
   144                        	.member	foregroundColor,56,5,8,16
   145                        	.member	menuMode,72,5,8,16
   146                        	.member	lastMouseButton,88,5,8,16
   147                        	.member	lastMouseX,104,5,8,16
   148                        	.member	lastMouseY,120,5,8,16
   149                        	.member	currentDiskName,136,142,8,32
   150                        	.member	diskNodes,168,129,8,32
   151                        	.member	titleNodes,200,129,8,32
   152                        	.member	menuNodes,232,129,8,32
   153                        	.member	iconNodes,264,129,8,32
   154                        	.member	windowNodes,296,129,8,32
   155                        	.member	fontNodes,328,129,8,32
  Sat Jul 10 2021  1:15                                                Page 4


   156                        	.member	wndProc,360,138,8,32,3
   157                        	.eos
   158                        	.stag	_fx_process,800,17
   159                        	.member	cbSize,0,5,8,16
   160                        	.member	procId,16,18,8,32
   161                        	.member	parentId,48,18,8,32
   162                        	.member	ctx,80,129,8,32
   163                        	.member	userId,112,16,8,16
   164                        	.member	status,128,16,8,16
   165                        	.member	foregroundActive,144,14,8,8
   166                        	.member	tls,152,1121,8,32,8
   167                        	.member	commandLine,408,142,8,32
   168                        	.member	semaphores,440,138,8,32,3
   169                        	.member	fileHandles,472,138,8,32,3
   170                        	.member	pathList,504,138,8,32,3
   171                        	.member	resources,536,138,8,32,3
   172                        	.member	timerAware,568,14,8,8
   173                        	.member	timerTicks,576,112,8,0,2
   174                        	.member	timerTickCount,608,112,8,0,2
   175                        	.member	kernelError,640,10,8,32,5
   176                        	.member	consoleCtl,672,138,8,32,15
   177                        	.member	desktopCtl,704,138,8,32,16
   178                        	.member	execProc,736,641,8,32
   179                        	.member	startupArgs,768,129,8,32
   180                        	.eos
   181                        	.stag	_fxProcessMessage,112,18
   182                        	.member	src,0,18,8,32
   183                        	.member	dest,32,18,8,32
   184                        	.member	type,64,16,8,16
   185                        	.member	processInfo,80,138,8,32,17
   186                        	.eos
   187                        	.stag	_k_key_state,112,19
   188                        	.member	scanCode,0,14,8,8
   189                        	.member	isShifted,8,14,8,8
   190                        	.member	isAlt,16,14,8,8
   191                        	.member	isExtended,24,14,8,8
   192                        	.member	isCapsLock,32,14,8,8
   193                        	.member	isNumLock,40,14,8,8
   194                        	.member	isScrollLock,48,14,8,8
   195                        	.member	keyChar,56,16,8,16
   196                        	.member	scanTime,72,18,8,32
   197                        	.member	ledStatus,104,14,8,8
   198                        	.eos
   199                        	.stag	_fx_property,384,20
   200                        	.member	name,0,110,8,0,16
   201                        	.member	value,128,110,8,0,32
   202                        	.eos
   203                        	.utag	_24bitPointer,32,21
   204                        	.member	address,0,142,11,32
   205                        	.member	bytes,0,110,11,0,4
   206                        	.eos
   207                        	.stag	_PointStruct,32,22
   208                        	.member	x,0,5,8,16
   209                        	.member	y,16,5,8,16
   210                        	.eos
   211                        	.stag	_RectStruct,112,23
   212                        	.member	x,0,5,8,16
   213                        	.member	y,16,5,8,16
  Sat Jul 10 2021  1:15                                                Page 5


   214                        	.member	z,32,18,8,32
   215                        	.member	width,64,5,8,16
   216                        	.member	height,80,5,8,16
   217                        	.member	attr,96,5,8,16
   218                        	.eos
   219                        	.stag	fake24_,96,24
   220                        	.member	name,0,142,8,32
   221                        	.member	topLeft,32,10,8,32,22
   222                        	.member	bottomRight,64,10,8,32,22
   223                        	.eos
   224                        	.stag	fake25_,112,25
   225                        	.member	x,0,5,8,16
   226                        	.member	y,16,5,8,16
   227                        	.member	z,32,5,8,16
   228                        	.member	width,48,5,8,16
   229                        	.member	height,64,5,8,16
   230                        	.member	data,80,18,8,32
   231                        	.eos
   232                        	.stag	_k_WindowClass,272,26
   233                        	.member	cbSize,0,16,8,16
   234                        	.member	style,16,16,8,16
   235                        	.member	styleEx,32,16,8,16
   236                        	.member	pWndProc,48,654,8,32
   237                        	.member	hInstance,80,129,8,32
   238                        	.member	hIcon,112,129,8,32
   239                        	.member	hCursor,144,129,8,32
   240                        	.member	hbrBackground,176,129,8,32
   241                        	.member	lpszMenuName,208,142,8,32
   242                        	.member	lpszClassName,240,142,8,32
   243                        	.eos
   244                        	.stag	_ClickableRect,152,27
   245                        	.member	area,0,10,8,112,23
   246                        	.member	z,112,18,8,32
   247                        	.member	enabled,144,14,8,8
   248                        	.eos
   249                        	.stag	_NCClickableRect,136,28
   250                        	.member	area,0,10,8,112,23
   251                        	.member	msgType,112,16,8,16
   252                        	.member	enabled,128,14,8,8
   253                        	.eos
   254                        	.stag	_DragData,216,29
   255                        	.member	area,0,10,8,112,23
   256                        	.member	xoffset,112,5,8,16
   257                        	.member	yoffset,128,5,8,16
   258                        	.member	msgType,144,16,8,16
   259                        	.member	ncAction,160,16,8,16
   260                        	.member	isDrag,176,14,8,8
   261                        	.member	isResize,184,14,8,8
   262                        	.member	canDrag,192,14,8,8
   263                        	.member	canDrop,200,14,8,8
   264                        	.member	didDrag,208,14,8,8
   265                        	.eos
   266                        	.stag	_k_WindowStruct,3904,30
   267                        	.member	cbSize,0,16,8,16
   268                        	.member	style,16,18,8,32
   269                        	.member	styleEx,48,18,8,32
   270                        	.member	win_id,80,5,8,16
   271                        	.member	win_x,96,5,8,16
  Sat Jul 10 2021  1:15                                                Page 6


   272                        	.member	win_y,112,5,8,16
   273                        	.member	win_width,128,5,8,16
   274                        	.member	win_height,144,5,8,16
   275                        	.member	win_xoffset,160,5,8,16
   276                        	.member	win_yoffset,176,5,8,16
   277                        	.member	win_cxoffset,192,5,8,16
   278                        	.member	win_cyoffset,208,5,8,16
   279                        	.member	wndRect,224,10,8,112,23
   280                        	.member	clientRect,336,10,8,112,23
   281                        	.member	nonclientGadgets,448,106,8,0,28,16
   282                        	.member	clickable,2624,129,8,32
   283                        	.member	win_title,2656,110,8,0,32
   284                        	.member	Reserved0,2912,16,8,16
   285                        	.member	win_class,2928,110,8,0,16
   286                        	.member	win_class_name,3056,110,8,0,32
   287                        	.member	nBitmapLayer,3312,16,8,16
   288                        	.member	bgRegion,3328,129,8,32
   289                        	.member	procid,3360,18,8,32
   290                        	.member	pWndClass,3392,138,8,32,26
   291                        	.member	pParentWindow,3424,129,8,32
   292                        	.member	hMenu,3456,129,8,32
   293                        	.member	hPointer,3488,129,8,32
   294                        	.member	hBackground,3520,129,8,32
   295                        	.member	pChildWindows,3552,138,8,32,3
   296                        	.member	pChildHitList,3584,138,8,32,3
   297                        	.member	isVisible,3616,14,8,8
   298                        	.member	windowData,3624,129,8,32
   299                        	.member	clientData,3656,1121,8,32,6
   300                        	.member	isClosed,3848,14,8,8
   301                        	.member	isClosing,3856,14,8,8
   302                        	.member	isDesktop,3864,14,8,8
   303                        	.member	clickableNode,3872,138,8,32,2
   304                        	.eos
   305                        	.stag	_k_WindowStructEx,3880,31
   306                        	.member	cbSize,0,16,8,16
   307                        	.member	style,16,18,8,32
   308                        	.member	styleEx,48,18,8,32
   309                        	.member	win_id,80,5,8,16
   310                        	.member	win_x,96,5,8,16
   311                        	.member	win_y,112,5,8,16
   312                        	.member	win_width,128,5,8,16
   313                        	.member	win_height,144,5,8,16
   314                        	.member	win_xoffset,160,5,8,16
   315                        	.member	win_yoffset,176,5,8,16
   316                        	.member	win_cxoffset,192,5,8,16
   317                        	.member	win_cyoffset,208,5,8,16
   318                        	.member	wndRect,224,10,8,112,23
   319                        	.member	clientRect,336,10,8,112,23
   320                        	.member	nonclientGadgets,448,106,8,0,28,16
   321                        	.member	clickable,2624,129,8,32
   322                        	.member	win_title,2656,110,8,0,32
   323                        	.member	Reserved0,2912,16,8,16
   324                        	.member	win_class,2928,110,8,0,16
   325                        	.member	nBitmapLayer,3056,16,8,16
   326                        	.member	procid,3072,18,8,32
   327                        	.member	pWndClass,3104,138,8,32,26
   328                        	.member	pParentWindow,3136,129,8,32
   329                        	.member	hMenu,3168,129,8,32
  Sat Jul 10 2021  1:15                                                Page 7


   330                        	.member	hPointer,3200,129,8,32
   331                        	.member	hBackground,3232,129,8,32
   332                        	.member	pChildWindows,3264,138,8,32,3
   333                        	.member	pChildHitList,3296,138,8,32,3
   334                        	.member	isVisible,3328,14,8,8
   335                        	.member	windowData,3336,129,8,32
   336                        	.member	clientData,3368,1121,8,32,4
   337                        	.member	isClosed,3496,14,8,8
   338                        	.member	hWnd,3504,129,8,32
   339                        	.member	localRect,3536,10,8,112,23
   340                        	.member	globalRect,3648,10,8,112,23
   341                        	.member	clientOffsetRect,3760,10,8,112,23
   342                        	.member	isDesktop,3872,14,8,8
   343                        	.eos
   344                        	.stag	_FontMetric,32,32
   345                        	.member	width,0,5,8,16
   346                        	.member	height,16,5,8,16
   347                        	.eos
   348                        	.stag	_MenuStruct,280,33
   349                        	.member	cx,0,5,8,16
   350                        	.member	cy,16,5,8,16
   351                        	.member	width,32,5,8,16
   352                        	.member	height,48,5,8,16
   353                        	.member	fcolor,64,14,8,8
   354                        	.member	bcolor,72,14,8,8
   355                        	.member	chromeLeft,80,14,8,8
   356                        	.member	chromeRight1,88,14,8,8
   357                        	.member	chromeRight2,96,14,8,8
   358                        	.member	hFont,104,129,8,32
   359                        	.member	itemId,136,16,8,16
   360                        	.member	pCaption,152,142,8,32
   361                        	.member	subMenus,184,138,8,32,3
   362                        	.member	pBackground,216,129,8,32
   363                        	.member	hWndOwner,248,129,8,32
   364                        	.eos
   365                        	.stag	fake34_,160,34
   366                        	.member	menuId,0,16,8,16
   367                        	.member	caption,16,142,8,32
   368                        	.member	rect,48,10,8,112,23
   369                        	.eos
   370                        	.stag	fake35_,5152,35
   371                        	.member	pParent,0,138,8,32,30
   372                        	.member	rect,32,10,8,112,23
   373                        	.member	captions,144,1134,8,32,24
   374                        	.member	chrome,912,110,8,0,24
   375                        	.member	ids,1104,112,8,0,24
   376                        	.member	clickable,1488,106,8,0,27,24
   377                        	.member	selected,5136,16,8,16
   378                        	.eos
   379                        	.stag	_fx_button_t,96,36
   380                        	.member	pCaption,0,142,8,32
   381                        	.member	cCaption,32,16,8,16
   382                        	.member	data,48,129,8,32
   383                        	.member	captionPixelWidth,80,16,8,16
   384                        	.eos
   385                        	.stag	_fx_scrollbar_t,240,37
   386                        	.member	min,0,16,8,16
   387                        	.member	max,16,16,8,16
  Sat Jul 10 2021  1:15                                                Page 8


   388                        	.member	increment,32,16,8,16
   389                        	.member	stopsize,48,16,8,16
   390                        	.member	location,64,5,8,16
   391                        	.member	state,80,5,8,16
   392                        	.member	rectThumb,96,10,8,112,23
   393                        	.member	data,208,129,8,32
   394                        	.eos
   395                        	.stag	_fx_listbox_t,240,38
   396                        	.member	pos,0,5,8,16
   397                        	.member	selected,16,16,8,16
   398                        	.member	offsetX,32,5,8,16
   399                        	.member	offsetY,48,5,8,16
   400                        	.member	inc,64,5,8,16
   401                        	.member	direction,80,5,8,16
   402                        	.member	top,96,5,8,16
   403                        	.member	bottom,112,5,8,16
   404                        	.member	indexTop,128,5,8,16
   405                        	.member	indexBottom,144,5,8,16
   406                        	.member	maxItems,160,16,8,16
   407                        	.member	fontSet,176,142,8,32
   408                        	.member	data,208,129,8,32
   409                        	.eos
   410                        	.stag	_fx_textbox_t,144,39
   411                        	.member	pos,0,5,8,16
   412                        	.member	selected,16,16,8,16
   413                        	.member	offsetX,32,5,8,16
   414                        	.member	offsetY,48,5,8,16
   415                        	.member	isShifted,64,14,8,8
   416                        	.member	cursorState,72,14,8,8
   417                        	.member	fontSet,80,142,8,32
   418                        	.member	data,112,129,8,32
   419                        	.eos
   420                        	.stag	_fx_msgbox_t,144,40
   421                        	.member	pos,0,5,8,16
   422                        	.member	selected,16,16,8,16
   423                        	.member	offsetX,32,5,8,16
   424                        	.member	offsetY,48,5,8,16
   425                        	.member	isShifted,64,14,8,8
   426                        	.member	cursorState,72,14,8,8
   427                        	.member	fontSet,80,142,8,32
   428                        	.member	data,112,129,8,32
   429                        	.eos
   430                        	.stag	_fx_menuAnchor_t,272,41
   431                        	.member	pCaption,0,142,8,32
   432                        	.member	renderLayoutX,32,16,8,16
   433                        	.member	renderLayoutY,48,16,8,16
   434                        	.member	captionPixelWidth,64,16,8,16
   435                        	.member	data,80,129,8,32
   436                        	.member	droppedWindow,112,138,8,32,30
   437                        	.member	bytes,144,110,8,0,16
   438                        	.eos
   439                        	.stag	_SubMenuStruct,64,42
   440                        	.member	caption,0,142,8,32
   441                        	.member	action,32,641,8,32
   442                        	.eos
   443                        	.stag	_SubMenuListStruct,40,43
   444                        	.member	cMenus,0,14,8,8
   445                        	.member	psubmenus,8,9354,8,32,42
  Sat Jul 10 2021  1:15                                                Page 9


   446                        	.eos
   447                        	.stag	_fx_ComBuffer,2080,44
   448                        	.member	cbSize,0,16,8,16
   449                        	.member	cbBuffer,16,16,8,16
   450                        	.member	buffer,32,110,8,0,256
   451                        	.eos
   452                        	.stag	_fx_resource_header,72,45
   453                        	.member	magic,0,110,8,0,4
   454                        	.member	major,32,14,8,8
   455                        	.member	minor,40,14,8,8
   456                        	.member	type,48,14,8,8
   457                        	.member	reserved,56,14,8,8
   458                        	.member	resheaderSize,64,14,8,8
   459                        	.eos
   460                        	.stag	_fx_resource_header_font,144,46
   461                        	.member	title,0,110,8,0,16
   462                        	.member	height,128,14,8,8
   463                        	.member	width,136,14,8,8
   464                        	.eos
   465                        	.line	1010
   466                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",21
   467                        ;#include "fxkernel.h"
   468                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   469                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   470                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   471                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   472                        	.line	88
   473                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   474                        	.stag	fake47_,32,47
   475                        	.member	quot,0,5,8,16
   476                        	.member	rem,16,5,8,16
   477                        	.eos
   478                        	.stag	fake48_,64,48
   479                        	.member	quot,0,7,8,32
   480                        	.member	rem,32,7,8,32
   481                        	.eos
   482                        	.stag	int_sqrt,32,49
   483                        	.member	sqrt,0,16,8,16
   484                        	.member	frac,16,16,8,16
   485                        	.eos
   486                        	.line	205
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
   488                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   489                        	.line	134
   490                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   491                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   492                        	.line	103
   493                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 10


                    space\FXOSv1\src\fxos.h",6
   494                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   495                        	.line	1010
   496                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   497                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   498                        	.line	89
   499                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   500                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   501                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   502                        	.line	1010
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",5
   504                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   506                        	.line	1010
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   508                        	.line	72
   509                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   510                        	.line	1960
   511                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
   512                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   513                        	.line	400
   514                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   516                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   517                        	.line	134
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   519                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   520                        	.line	205
   521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   523                        	.line	1010
   524                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   526                        	.line	1960
   527                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
  Sat Jul 10 2021  1:15                                                Page 11


   528                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   529                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   530                        	.line	205
   531                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   532                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   533                        	.line	134
   534                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   535                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   536                        	.line	1010
   537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   538                        	.stag	_fx_string,64,50
   539                        	.member	size,0,16,8,16
   540                        	.member	pos,16,5,8,16
   541                        	.member	buffer,32,142,8,32
   542                        	.eos
   543                        	.line	139
   544                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   545                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   546                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   547                        	.line	30
   548                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   549                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   550                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   551                        	.line	1010
   552                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   553                        	.stag	_fxos_executive_vtable,128,51
   554                        	.member	Init,0,8833,8,32
   555                        	.member	Configure,32,656,8,32
   556                        	.member	Query,64,656,8,32
   557                        	.member	Uninit,96,641,8,32
   558                        	.eos
   559                        	.line	86
   560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   563                        	.line	1010
   564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   565                        	.line	114
   566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
  Sat Jul 10 2021  1:15                                                Page 12


   567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   568                        	.line	208
   569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   570                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   571                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   572                        	.line	30
   573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   574                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   576                        	.line	30
   577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   578                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   579                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   580                        	.line	35
   581                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   582                        	.stag	UMM_HEAP_INFO_t,256,52
   583                        	.member	totalEntries,0,18,8,32
   584                        	.member	usedEntries,32,18,8,32
   585                        	.member	freeEntries,64,18,8,32
   586                        	.member	totalBlocks,96,18,8,32
   587                        	.member	usedBlocks,128,18,8,32
   588                        	.member	freeBlocks,160,18,8,32
   589                        	.member	maxFreeContiguousBlocks,192,18,8,32
   590                        	.member	blockSize,224,18,8,32
   591                        	.eos
   592                        	.line	199
   593                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   594                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   595                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   596                        	.line	1010
   597                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   598                        	.line	24
   599                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   600                        	.stag	_fx_memory_map,2072,53
   601                        	.member	availableMemory,0,18,8,32
   602                        	.member	valid_segments,32,110,8,0,255
   603                        	.eos
   604                        	.stag	_fx_ipc_port,144,54
   605                        	.member	id,0,18,8,32
   606                        	.member	type,32,14,8,8
   607                        	.member	name,40,138,8,32,50
   608                        	.member	time,72,18,8,32
  Sat Jul 10 2021  1:15                                                Page 13


   609                        	.member	queue,104,138,8,32,4
   610                        	.member	reserved_1,136,14,8,8
   611                        	.eos
   612                        	.line	105
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   615                        	.line	564
   616                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   617                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   618                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   619                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   620                        	.line	1010
   621                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   622                        	.line	74
   623                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   624                        	.stag	_click_detected,64,55
   625                        	.member	window,0,138,8,32,30
   626                        	.member	handler,32,641,8,32
   627                        	.eos
   628                        	.stag	_current_palette_map,400,56
   629                        	.member	CUR_DESKTOP,0,5,8,16
   630                        	.member	CUR_BACKGROUND,16,5,8,16
   631                        	.member	CUR_FONT,32,5,8,16
   632                        	.member	CUR_SELECTED_FONT,48,5,8,16
   633                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   634                        	.member	CUR_WINDOWFRAME,80,5,8,16
   635                        	.member	CUR_WINDOWBORDER,96,5,8,16
   636                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   637                        	.member	CUR_MENU,128,5,8,16
   638                        	.member	CUR_GADGET,144,5,8,16
   639                        	.member	CUR_COLOR,160,101,8,0,15
   640                        	.eos
   641                        	.line	359
   642                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   643                        	.stag	_fxos_winman_vtable,160,57
   644                        	.member	Events,0,641,8,32
   645                        	.member	ConfigureWindowManager,32,656,8,32
   646                        	.member	ProcessWindowEvent,64,8833,8,32
   647                        	.member	QueryWindowManager,96,656,8,32
   648                        	.member	DoWndProcs,128,641,8,32
   649                        	.eos
   650                        	.stag	fake58_,64,58
   651                        	.member	type,0,16,8,16
   652                        	.member	size,16,16,8,16
   653                        	.member	desktopAction,32,129,8,32
   654                        	.eos
   655                        	.stag	fake59_,96,59
   656                        	.member	type,0,16,8,16
   657                        	.member	caption,16,138,8,32,50
  Sat Jul 10 2021  1:15                                                Page 14


   658                        	.member	buttonType,48,16,8,16
   659                        	.member	x,64,5,8,16
   660                        	.member	y,80,5,8,16
   661                        	.eos
   662                        	.stag	_childMessage_t,64,60
   663                        	.member	msgType,0,16,8,16
   664                        	.member	msgData,16,129,8,32
   665                        	.member	dataSize,48,16,8,16
   666                        	.eos
   667                        	.line	581
   668                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   669                        	.stag	_fx_main_loopvars,16,61
   670                        	.member	dummy,0,5,8,16
   671                        	.eos
   672                        	.stag	_fxMouseMessageData,64,62
   673                        	.member	button1,0,14,8,8
   674                        	.member	button2,8,14,8,8
   675                        	.member	button3,16,14,8,8
   676                        	.member	button4,24,14,8,8
   677                        	.member	x,32,16,8,16
   678                        	.member	y,48,16,8,16
   679                        	.eos
   680                        	.utag	marshalled_data,32,63
   681                        	.member	byteValue,0,14,11,8
   682                        	.member	verbValue,0,110,11,0,2
   683                        	.member	intValue,0,16,11,16
   684                        	.member	longValue,0,18,11,32
   685                        	.member	pointerValue,0,129,11,32
   686                        	.eos
   687                        	.stag	_fx_eventProcess,64,64
   688                        	.member	process,0,138,8,32,17
   689                        	.member	eventProc,32,641,8,32
   690                        	.eos
   691                        	.stag	_mouse_msg_state,184,65
   692                        	.member	lastEvent,0,18,8,32
   693                        	.member	buttonLeftDown,32,14,8,8
   694                        	.member	lastLeftDown,40,18,8,32
   695                        	.member	buttonRightDown,72,14,8,8
   696                        	.member	lastRightDown,80,18,8,32
   697                        	.member	buttonMiddleDown,112,14,8,8
   698                        	.member	lastMiddleDown,120,18,8,32
   699                        	.member	lastX,152,16,8,16
   700                        	.member	lastY,168,16,8,16
   701                        	.eos
   702                        	.stag	_fxos_eventmanager_vtable,192,66
   703                        	.member	EventQueue,0,138,8,32,4
   704                        	.member	Init,32,8833,8,32
   705                        	.member	Run,64,656,8,32
   706                        	.member	Configure,96,656,8,32
   707                        	.member	Query,128,656,8,32
   708                        	.member	Uninit,160,641,8,32
   709                        	.eos
   710                        	.stag	_k_clipboard_data,168,67
   711                        	.member	type,0,14,8,8
   712                        	.member	readable,8,110,8,0,16
   713                        	.member	data,136,129,8,32
   714                        	.eos
  Sat Jul 10 2021  1:15                                                Page 15


   715                        	.line	564
   716                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   717                        	.stag	_fx_spinner_ctx,48,68
   718                        	.member	index,0,5,8,16
   719                        	.member	spinner,16,142,8,32
   720                        	.eos
   721                        	.stag	_fx_console_ctx,1144,69
   722                        	.member	lineBufferIndex,0,5,8,16
   723                        	.member	lineBuffer,16,110,8,0,128
   724                        	.member	isShifted,1040,14,8,8
   725                        	.member	userData,1048,129,8,32
   726                        	.member	screenBuffer,1080,129,8,32
   727                        	.member	Reserved1,1112,129,8,32
   728                        	.eos
   729                        	.stag	_token,64,70
   730                        	.member	type,0,5,8,16
   731                        	.member	depth,16,16,8,16
   732                        	.member	text,32,142,8,32
   733                        	.eos
   734                        	.stag	_command_args,64,71
   735                        	.member	proc,0,656,8,32
   736                        	.member	tokens,32,138,8,32,2
   737                        	.eos
   738                        	.line	208
   739                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   740                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   741                        	.line	139
   742                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",24
   743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   744                        	.line	114
   745                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   746                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   747                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
   748                        	.line	298
   749                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   750                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   751                        	.line	1010
   752                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   753                        	.stag	fake72_,4504,72
   754                        	.member	fs_type,0,14,8,8
   755                        	.member	pdrv,8,14,8,8
   756                        	.member	n_fats,16,14,8,8
   757                        	.member	wflag,24,14,8,8
   758                        	.member	fsi_flag,32,14,8,8
   759                        	.member	id,40,5,8,16
   760                        	.member	n_rootdir,56,5,8,16
   761                        	.member	csize,72,5,8,16
  Sat Jul 10 2021  1:15                                                Page 16


   762                        	.member	lfnbuf,88,144,8,32
   763                        	.member	last_clst,120,18,8,32
   764                        	.member	free_clst,152,18,8,32
   765                        	.member	n_fatent,184,18,8,32
   766                        	.member	fsize,216,18,8,32
   767                        	.member	volbase,248,18,8,32
   768                        	.member	fatbase,280,18,8,32
   769                        	.member	dirbase,312,18,8,32
   770                        	.member	database,344,18,8,32
   771                        	.member	winsect,376,18,8,32
   772                        	.member	win,408,110,8,0,512
   773                        	.eos
   774                        	.stag	fake73_,128,73
   775                        	.member	fs,0,138,8,32,72
   776                        	.member	id,32,5,8,16
   777                        	.member	attr,48,14,8,8
   778                        	.member	stat,56,14,8,8
   779                        	.member	sclust,64,18,8,32
   780                        	.member	objsize,96,18,8,32
   781                        	.eos
   782                        	.stag	fake74_,4400,74
   783                        	.member	obj,0,10,8,128,73
   784                        	.member	flag,128,14,8,8
   785                        	.member	err,136,14,8,8
   786                        	.member	fptr,144,18,8,32
   787                        	.member	clust,176,18,8,32
   788                        	.member	sect,208,18,8,32
   789                        	.member	dir_sect,240,18,8,32
   790                        	.member	dir_ptr,272,142,8,32
   791                        	.member	buf,304,110,8,0,512
   792                        	.eos
   793                        	.stag	fake75_,416,75
   794                        	.member	obj,0,10,8,128,73
   795                        	.member	dptr,128,18,8,32
   796                        	.member	clust,160,18,8,32
   797                        	.member	sect,192,18,8,32
   798                        	.member	dir,224,142,8,32
   799                        	.member	fn,256,110,8,0,12
   800                        	.member	blk_ofs,352,18,8,32
   801                        	.member	pat,384,142,8,32
   802                        	.eos
   803                        	.stag	fake76_,2224,76
   804                        	.member	fsize,0,18,8,32
   805                        	.member	fdate,32,5,8,16
   806                        	.member	ftime,48,5,8,16
   807                        	.member	fattrib,64,14,8,8
   808                        	.member	altname,72,110,8,0,13
   809                        	.member	fname,176,110,8,0,256
   810                        	.eos
   811                        	.stag	fake77_,80,77
   812                        	.member	fmt,0,14,8,8
   813                        	.member	n_fat,8,14,8,8
   814                        	.member	align,16,16,8,16
   815                        	.member	n_root,32,16,8,16
   816                        	.member	au_size,48,18,8,32
   817                        	.eos
   818                        	.line	429
   819                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 17


                    space\FXOSv1\src\fxos.h",26
   820                        	.line	30
   821                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   822                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   823                        	.line	114
   824                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   825                        	.stag	_fx_api_call_table,8192,78
   826                        	.member	call_table,0,1121,8,32,256
   827                        	.eos
   828                        	.stag	_fx_zero_page,824,79
   829                        	.member	fxos_mouse_byte_0,0,14,8,8
   830                        	.member	fxos_mouse_byte_1,8,14,8,8
   831                        	.member	fxos_mouse_byte_2,16,14,8,8
   832                        	.member	fxos_mouse_byte_t,24,14,8,8
   833                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   834                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   835                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   836                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   837                        	.member	fxos_key_byte_0,64,14,8,8
   838                        	.member	fxos_key_byte_1,72,14,8,8
   839                        	.member	fxos_key_byte_2,80,14,8,8
   840                        	.member	fxos_mouse_ctl,88,14,8,8
   841                        	.member	fxos_mouse_index,96,14,8,8
   842                        	.member	fxos_mouse_status,104,14,8,8
   843                        	.member	fxos_mouse_dbg_1,112,18,8,32
   844                        	.member	fxos_mouse_dbg_2,144,18,8,32
   845                        	.member	fxos_mouse_dbg_3,176,18,8,32
   846                        	.member	fxos_vicky_byte_0,208,14,8,8
   847                        	.member	fxos_vicky_byte_1,216,14,8,8
   848                        	.member	fxos_vicky_byte_2,224,14,8,8
   849                        	.member	VersionMajor,232,16,8,16
   850                        	.member	VersionMinor,248,16,8,16
   851                        	.member	VersionRelease,264,16,8,16
   852                        	.member	topMemory,280,18,8,32
   853                        	.member	bottomMemory,312,18,8,32
   854                        	.member	availableMemory,344,18,8,32
   855                        	.member	availableMemoryK,376,18,8,32
   856                        	.member	availableHeapMemory,408,18,8,32
   857                        	.member	availableHeapMemoryK,440,18,8,32
   858                        	.member	fxos_console_row,472,16,8,16
   859                        	.member	fxos_console_col,488,16,8,16
   860                        	.member	executive,504,129,8,32
   861                        	.member	eventmanager,536,129,8,32
   862                        	.member	devicemanager,568,129,8,32
   863                        	.member	windowmanager,600,129,8,32
   864                        	.member	fxos_kernel_api,632,138,8,32,78
   865                        	.member	fxos_dos_api,664,138,8,32,78
   866                        	.member	fxos_gfx_api,696,138,8,32,78
   867                        	.member	fxos_gui_api,728,138,8,32,78
   868                        	.member	fxos_con_api,760,138,8,32,78
   869                        	.member	fxos_reserved_2_api,792,138,8,32,78
   870                        	.eos
   871                        	.stag	_fx_environment,96,80
   872                        	.member	variables,0,142,8,32
   873                        	.member	reserved1,32,5,8,16
  Sat Jul 10 2021  1:15                                                Page 18


   874                        	.member	reserved2,48,5,8,16
   875                        	.member	reserved3,64,5,8,16
   876                        	.member	reserved4,80,5,8,16
   877                        	.eos
   878                        	.stag	_debug_byte_bits,8,81
   879                        	.member	bit7,0,14,17,1
   880                        	.member	bit6,1,14,17,1
   881                        	.member	bit5,2,14,17,1
   882                        	.member	bit4,3,14,17,1
   883                        	.member	bit3,4,14,17,1
   884                        	.member	bit2,5,14,17,1
   885                        	.member	bit1,6,14,17,1
   886                        	.member	bit0,7,14,17,1
   887                        	.eos
   888                        	.stag	_k_segmentheader,160,82
   889                        	.member	version_major,0,14,8,8
   890                        	.member	version_minor,8,14,8,8
   891                        	.member	length,16,5,8,16
   892                        	.member	segment_start_addr,32,7,8,32
   893                        	.member	segment_end_addr,64,7,8,32
   894                        	.member	segment_size,96,7,8,32
   895                        	.member	main_entry_addr,128,7,8,32
   896                        	.eos
   897                        	.stag	_fx_device_driver,776,83
   898                        	.member	name,0,110,8,0,32
   899                        	.member	version,256,110,8,0,16
   900                        	.member	hmajor,384,110,8,0,8
   901                        	.member	hminor,448,110,8,0,8
   902                        	.member	type,512,14,8,8
   903                        	.member	designation,520,110,8,0,6
   904                        	.member	reserved_1,568,16,8,16
   905                        	.member	f_driver_irq,584,129,8,32
   906                        	.member	driver_context,616,129,8,32
   907                        	.member	f_driver_load,648,129,8,32
   908                        	.member	f_driver_read,680,129,8,32
   909                        	.member	f_driver_write,712,129,8,32
   910                        	.member	f_driver_unload,744,129,8,32
   911                        	.eos
   912                        	.stag	_fx_block_device_driver,808,84
   913                        	.member	name,0,110,8,0,32
   914                        	.member	version,256,110,8,0,16
   915                        	.member	hmajor,384,110,8,0,8
   916                        	.member	hminor,448,110,8,0,8
   917                        	.member	type,512,14,8,8
   918                        	.member	designation,520,110,8,0,6
   919                        	.member	reserved_1,568,16,8,16
   920                        	.member	f_driver_irq,584,129,8,32
   921                        	.member	driver_context,616,129,8,32
   922                        	.member	f_driver_load,648,129,8,32
   923                        	.member	f_driver_read,680,129,8,32
   924                        	.member	f_driver_write,712,129,8,32
   925                        	.member	f_driver_unload,744,129,8,32
   926                        	.member	f_driver_command,776,129,8,32
   927                        	.eos
   928                        	.line	400
   929                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",22
   930                        ;#include "fxdos.h"
  Sat Jul 10 2021  1:15                                                Page 19


   931                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",0
   932                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   933                        	.line	1010
   934                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",5
   935                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   936                        	.line	429
   937                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",6
   938                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\diskio.h",0
   939                        	.line	85
   940                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",7
   941                        	.stag	_fx_sd_direntry,256,85
   942                        	.member	filename,0,110,8,0,11
   943                        	.member	type,88,14,8,8
   944                        	.member	attrs,96,110,8,0,20
   945                        	.eos
   946                        	.stag	_fx_info,416,86
   947                        	.member	stgName,0,110,8,0,32
   948                        	.member	Reserved1,256,14,8,8
   949                        	.member	stgType,264,16,8,16
   950                        	.member	Reserved2,280,14,8,8
   951                        	.member	stgReserved,288,110,8,0,16
   952                        	.eos
   953                        	.stag	_fx_fileinfo,136,87
   954                        	.member	type,0,14,8,8
   955                        	.member	pFilename,8,142,8,32
   956                        	.member	lSize,40,18,8,32
   957                        	.member	lcreateDate,72,18,8,32
   958                        	.member	lchangeDate,104,18,8,32
   959                        	.eos
   960                        	.stag	_FX_FAT_DIR_INFO,256,88
   961                        	.member	DIR_Name,0,110,8,0,11
   962                        	.member	DIR_Attr,88,14,8,8
   963                        	.member	DIR_NTRes,96,14,8,8
   964                        	.member	DIR_CrtTimeTenth,104,14,8,8
   965                        	.member	DIR_CrtTime,112,16,8,16
   966                        	.member	DIR_CrtDate,128,16,8,16
   967                        	.member	DIR_LstAccDate,144,16,8,16
   968                        	.member	DIR_FstClusHI,160,16,8,16
   969                        	.member	DIR_WrtTime,176,16,8,16
   970                        	.member	DIR_WrtDate,192,16,8,16
   971                        	.member	DIR_FstClusLO,208,16,8,16
   972                        	.member	DIR_FileSize,224,18,8,32
   973                        	.eos
   974                        	.stag	fat_extBS_32,416,89
   975                        	.member	table_size_32,0,18,8,32
   976                        	.member	extended_flags,32,16,8,16
   977                        	.member	fat_version,48,16,8,16
   978                        	.member	root_cluster,64,18,8,32
   979                        	.member	fat_info,96,16,8,16
   980                        	.member	backup_BS_sector,112,16,8,16
   981                        	.member	reserved_0,128,110,8,0,12
  Sat Jul 10 2021  1:15                                                Page 20


   982                        	.member	drive_number,224,14,8,8
   983                        	.member	reserved_1,232,14,8,8
   984                        	.member	boot_signature,240,14,8,8
   985                        	.member	volume_id,248,16,8,16
   986                        	.member	volume_label,264,110,8,0,11
   987                        	.member	fat_type_label,352,110,8,0,8
   988                        	.eos
   989                        	.stag	fat_extBS_16,192,90
   990                        	.member	bios_drive_num,0,14,8,8
   991                        	.member	reserved1,8,14,8,8
   992                        	.member	boot_signature,16,14,8,8
   993                        	.member	volume_id,24,16,8,16
   994                        	.member	volume_label,40,110,8,0,11
   995                        	.member	fat_type_label,128,110,8,0,8
   996                        	.eos
   997                        	.stag	fat_BS,688,91
   998                        	.member	bootjmp,0,110,8,0,3
   999                        	.member	oem_name,24,110,8,0,8
  1000                        	.member	bytes_per_sector,88,16,8,16
  1001                        	.member	sectors_per_cluster,104,14,8,8
  1002                        	.member	reserved_sector_count,112,16,8,16
  1003                        	.member	table_count,128,14,8,8
  1004                        	.member	root_entry_count,136,16,8,16
  1005                        	.member	total_sectors_16,152,16,8,16
  1006                        	.member	media_type,168,14,8,8
  1007                        	.member	table_size_16,176,16,8,16
  1008                        	.member	sectors_per_track,192,16,8,16
  1009                        	.member	head_side_count,208,16,8,16
  1010                        	.member	hidden_sector_count,224,16,8,16
  1011                        	.member	total_sectors_32,240,16,8,16
  1012                        	.member	extended_section,256,110,8,0,54
  1013                        	.eos
  1014                        	.stag	__FATBootSector,928,92
  1015                        	.member	bootjmp,0,110,8,0,3
  1016                        	.member	oem_name,24,110,8,0,8
  1017                        	.member	bytes_per_sector,88,16,8,16
  1018                        	.member	sectors_per_cluster,104,14,8,8
  1019                        	.member	reserved_sector_count,112,16,8,16
  1020                        	.member	fat_table_count,128,14,8,8
  1021                        	.member	root_entry_count,136,16,8,16
  1022                        	.member	total_sectors_16,152,16,8,16
  1023                        	.member	media_type,168,14,8,8
  1024                        	.member	sectors_per_fat,176,16,8,16
  1025                        	.member	sectors_per_track,192,16,8,16
  1026                        	.member	head_side_count,208,16,8,16
  1027                        	.member	hidden_sector_count,224,18,8,32
  1028                        	.member	total_sectors_32,256,18,8,32
  1029                        	.member	drive_number,288,14,8,8
  1030                        	.member	reserved1,296,14,8,8
  1031                        	.member	boot_sig,304,14,8,8
  1032                        	.member	vol_id,312,18,8,32
  1033                        	.member	vol_name,344,110,8,0,11
  1034                        	.member	file_system_type,432,110,8,0,8
  1035                        	.member	extended_section,496,110,8,0,54
  1036                        	.eos
  1037                        	.stag	__PARTITIONTABLE,128,93
  1038                        	.member	first_byte,0,14,8,8
  1039                        	.member	start_chs,8,110,8,0,3
  Sat Jul 10 2021  1:15                                                Page 21


  1040                        	.member	partition_type,32,14,8,8
  1041                        	.member	end_chs,40,110,8,0,3
  1042                        	.member	start_sector,64,18,8,32
  1043                        	.member	length_sectors,96,18,8,32
  1044                        	.eos
  1045                        	.stag	fake94_,4096,94
  1046                        	.member	jmp,0,110,8,0,3
  1047                        	.member	oem,24,110,8,0,8
  1048                        	.member	sector_size,88,15,8,16
  1049                        	.member	sectors_per_cluster,104,14,8,8
  1050                        	.member	reserved_sectors,112,15,8,16
  1051                        	.member	number_ok_dos_fats,128,14,8,8
  1052                        	.member	root_dir_entries,136,15,8,16
  1053                        	.member	total_sectors_short,152,15,8,16
  1054                        	.member	media_descriptor,168,14,8,8
  1055                        	.member	fat_size_sectors,176,15,8,16
  1056                        	.member	sectors_per_track,192,15,8,16
  1057                        	.member	number_ok_dos_heads,208,15,8,16
  1058                        	.member	hidden_sectors,224,18,8,32
  1059                        	.member	total_sectors_long,256,18,8,32
  1060                        	.member	drive_number,288,14,8,8
  1061                        	.member	current_head,296,14,8,8
  1062                        	.member	boot_signature,304,14,8,8
  1063                        	.member	volume_id,312,18,8,32
  1064                        	.member	volume_label,344,110,8,0,11
  1065                        	.member	fs_type,432,110,8,0,8
  1066                        	.member	boot_code,496,110,8,0,448
  1067                        	.member	boot_sector_signature,4080,15,8,16
  1068                        	.eos
  1069                        	.stag	__FAT16ENTRY,256,95
  1070                        	.member	filename,0,110,8,0,8
  1071                        	.member	ext,64,110,8,0,3
  1072                        	.member	attributes,88,14,8,8
  1073                        	.member	reserved,96,110,8,0,10
  1074                        	.member	modify_time,176,16,8,16
  1075                        	.member	modify_date,192,16,8,16
  1076                        	.member	starting_cluster,208,16,8,16
  1077                        	.member	file_size,224,18,8,32
  1078                        	.eos
  1079                        	.stag	__FAT16ENTRYLONG,288,96
  1080                        	.member	filename,0,110,8,0,8
  1081                        	.member	ext,64,110,8,0,3
  1082                        	.member	attributes,88,14,8,8
  1083                        	.member	reserved,96,110,8,0,10
  1084                        	.member	modify_time,176,16,8,16
  1085                        	.member	modify_date,192,16,8,16
  1086                        	.member	starting_cluster,208,16,8,16
  1087                        	.member	file_size,224,18,8,32
  1088                        	.member	plongfileName,256,142,8,32
  1089                        	.eos
  1090                        	.stag	_LongFileName,256,97
  1091                        	.member	sequenceNo,0,14,8,8
  1092                        	.member	fileName_Part1,8,110,8,0,10
  1093                        	.member	fileattribute,88,14,8,8
  1094                        	.member	type,96,14,8,8
  1095                        	.member	checksum,104,14,8,8
  1096                        	.member	fileName_Part2,112,110,8,0,12
  1097                        	.member	fstclusLO,208,5,8,16
  Sat Jul 10 2021  1:15                                                Page 22


  1098                        	.member	fileName_Part3,224,110,8,0,4
  1099                        	.eos
  1100                        	.stag	_IDSECTOR,2048,98
  1101                        	.member	wGenConfig,0,16,8,16
  1102                        	.member	wNumCyls,16,16,8,16
  1103                        	.member	wReserved,32,16,8,16
  1104                        	.member	wNumHeads,48,16,8,16
  1105                        	.member	wBytesPerTrack,64,16,8,16
  1106                        	.member	wBytesPerSector,80,16,8,16
  1107                        	.member	wSectorsPerTrack,96,16,8,16
  1108                        	.member	wVendorUnique,112,112,8,0,3
  1109                        	.member	sSerialNumber,160,110,8,0,20
  1110                        	.member	wBufferType,320,16,8,16
  1111                        	.member	wBufferSize,336,16,8,16
  1112                        	.member	wECCSize,352,16,8,16
  1113                        	.member	sFirmwareRev,368,110,8,0,8
  1114                        	.member	sModelNumber,432,110,8,0,40
  1115                        	.member	wMoreVendorUnique,752,16,8,16
  1116                        	.member	wDoubleWordIO,768,16,8,16
  1117                        	.member	wCapabilities,784,16,8,16
  1118                        	.member	wReserved1,800,16,8,16
  1119                        	.member	wPIOTiming,816,16,8,16
  1120                        	.member	wDMATiming,832,16,8,16
  1121                        	.member	wBS,848,16,8,16
  1122                        	.member	wNumCurrentCyls,864,16,8,16
  1123                        	.member	wNumCurrentHeads,880,16,8,16
  1124                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1125                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1126                        	.member	wMultSectorStuff,944,16,8,16
  1127                        	.member	ulTotalAddressableSectors,960,18,8,32
  1128                        	.member	wSingleWordDMA,992,16,8,16
  1129                        	.member	wMultiWordDMA,1008,16,8,16
  1130                        	.member	bReserved,1024,110,8,0,128
  1131                        	.eos
  1132                        	.stag	fake99_,16,99
  1133                        	.member	Reserved1,0,16,17,1
  1134                        	.member	Retired3,1,16,17,1
  1135                        	.member	ResponseIncomplete,2,16,17,1
  1136                        	.member	Retired2,3,16,17,3
  1137                        	.member	FixedDevice,6,16,17,1
  1138                        	.member	RemovableMedia,7,16,17,1
  1139                        	.member	Retired1,8,16,17,7
  1140                        	.member	DeviceType,15,16,17,1
  1141                        	.eos
  1142                        	.stag	fake100_,16,100
  1143                        	.member	FeatureSupported,0,16,17,1
  1144                        	.member	Reserved,1,16,17,15
  1145                        	.eos
  1146                        	.stag	fake101_,32,101
  1147                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1148                        	.member	ReservedByte49,2,14,17,6
  1149                        	.member	DmaSupported,8,14,17,1
  1150                        	.member	LbaSupported,9,14,17,1
  1151                        	.member	IordyDisable,10,14,17,1
  1152                        	.member	IordySupported,11,14,17,1
  1153                        	.member	Reserved1,12,14,17,1
  1154                        	.member	StandybyTimerSupport,13,14,17,1
  Sat Jul 10 2021  1:15                                                Page 23


  1155                        	.member	Reserved2,14,14,17,2
  1156                        	.member	ReservedWord50,16,16,8,16
  1157                        	.eos
  1158                        	.stag	fake102_,16,102
  1159                        	.member	ZonedCapabilities,0,16,17,2
  1160                        	.member	NonVolatileWriteCache,2,16,17,1
  1161                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1162                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1163                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1164                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1165                        	.member	IEEE1667,7,16,17,1
  1166                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1167                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1168                        	.member	WriteBufferDmaSupported,10,16,17,1
  1169                        	.member	ReadBufferDmaSupported,11,16,17,1
  1170                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  1171                        	.member	LPSAERCSupported,13,16,17,1
  1172                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1173                        	.member	CFastSpecSupported,15,16,17,1
  1174                        	.eos
  1175                        	.stag	fake103_,32,103
  1176                        	.member	Reserved0,0,16,17,1
  1177                        	.member	SataGen1,1,16,17,1
  1178                        	.member	SataGen2,2,16,17,1
  1179                        	.member	SataGen3,3,16,17,1
  1180                        	.member	Reserved1,4,16,17,4
  1181                        	.member	NCQ,8,16,17,1
  1182                        	.member	HIPM,9,16,17,1
  1183                        	.member	PhyEvents,10,16,17,1
  1184                        	.member	NcqUnload,11,16,17,1
  1185                        	.member	NcqPriority,12,16,17,1
  1186                        	.member	HostAutoPS,13,16,17,1
  1187                        	.member	DeviceAutoPS,14,16,17,1
  1188                        	.member	ReadLogDMA,15,16,17,1
  1189                        	.member	Reserved2,16,16,17,1
  1190                        	.member	CurrentSpeed,17,16,17,3
  1191                        	.member	NcqStreaming,20,16,17,1
  1192                        	.member	NcqQueueMgmt,21,16,17,1
  1193                        	.member	NcqReceiveSend,22,16,17,1
  1194                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1195                        	.member	Reserved3,24,16,17,8
  1196                        	.eos
  1197                        	.stag	fake104_,16,104
  1198                        	.member	Reserved0,0,16,17,1
  1199                        	.member	NonZeroOffsets,1,16,17,1
  1200                        	.member	DmaSetupAutoActivate,2,16,17,1
  1201                        	.member	DIPM,3,16,17,1
  1202                        	.member	InOrderData,4,16,17,1
  1203                        	.member	HardwareFeatureControl,5,16,17,1
  1204                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1205                        	.member	NCQAutosense,7,16,17,1
  1206                        	.member	DEVSLP,8,16,17,1
  1207                        	.member	HybridInformation,9,16,17,1
  1208                        	.member	Reserved1,10,16,17,6
  Sat Jul 10 2021  1:15                                                Page 24


  1209                        	.eos
  1210                        	.stag	fake105_,16,105
  1211                        	.member	Reserved0,0,16,17,1
  1212                        	.member	NonZeroOffsets,1,16,17,1
  1213                        	.member	DmaSetupAutoActivate,2,16,17,1
  1214                        	.member	DIPM,3,16,17,1
  1215                        	.member	InOrderData,4,16,17,1
  1216                        	.member	HardwareFeatureControl,5,16,17,1
  1217                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1218                        	.member	DeviceAutoPS,7,16,17,1
  1219                        	.member	DEVSLP,8,16,17,1
  1220                        	.member	HybridInformation,9,16,17,1
  1221                        	.member	Reserved1,10,16,17,6
  1222                        	.eos
  1223                        	.stag	fake106_,48,106
  1224                        	.member	SmartCommands,0,16,17,1
  1225                        	.member	SecurityMode,1,16,17,1
  1226                        	.member	RemovableMediaFeature,2,16,17,1
  1227                        	.member	PowerManagement,3,16,17,1
  1228                        	.member	Reserved1,4,16,17,1
  1229                        	.member	WriteCache,5,16,17,1
  1230                        	.member	LookAhead,6,16,17,1
  1231                        	.member	ReleaseInterrupt,7,16,17,1
  1232                        	.member	ServiceInterrupt,8,16,17,1
  1233                        	.member	DeviceReset,9,16,17,1
  1234                        	.member	HostProtectedArea,10,16,17,1
  1235                        	.member	Obsolete1,11,16,17,1
  1236                        	.member	WriteBuffer,12,16,17,1
  1237                        	.member	ReadBuffer,13,16,17,1
  1238                        	.member	Nop,14,16,17,1
  1239                        	.member	Obsolete2,15,16,17,1
  1240                        	.member	DownloadMicrocode,16,16,17,1
  1241                        	.member	DmaQueued,17,16,17,1
  1242                        	.member	Cfa,18,16,17,1
  1243                        	.member	AdvancedPm,19,16,17,1
  1244                        	.member	Msn,20,16,17,1
  1245                        	.member	PowerUpInStandby,21,16,17,1
  1246                        	.member	ManualPowerUp,22,16,17,1
  1247                        	.member	Reserved2,23,16,17,1
  1248                        	.member	SetMax,24,16,17,1
  1249                        	.member	Acoustics,25,16,17,1
  1250                        	.member	BigLba,26,16,17,1
  1251                        	.member	DeviceConfigOverlay,27,16,17,1
  1252                        	.member	FlushCache,28,16,17,1
  1253                        	.member	FlushCacheExt,29,16,17,1
  1254                        	.member	WordValid83,30,16,17,2
  1255                        	.member	SmartErrorLog,32,16,17,1
  1256                        	.member	SmartSelfTest,33,16,17,1
  1257                        	.member	MediaSerialNumber,34,16,17,1
  1258                        	.member	MediaCardPassThrough,35,16,17,1
  1259                        	.member	StreamingFeature,36,16,17,1
  1260                        	.member	GpLogging,37,16,17,1
  1261                        	.member	WriteFua,38,16,17,1
  1262                        	.member	WriteQueuedFua,39,16,17,1
  1263                        	.member	WWN64Bit,40,16,17,1
  1264                        	.member	URGReadStream,41,16,17,1
  1265                        	.member	URGWriteStream,42,16,17,1
  1266                        	.member	ReservedForTechReport,43,16,17,2
  Sat Jul 10 2021  1:15                                                Page 25


  1267                        	.member	IdleWithUnloadFeature,45,16,17,1
  1268                        	.member	WordValid,46,16,17,2
  1269                        	.eos
  1270                        	.stag	fake107_,48,107
  1271                        	.member	SmartCommands,0,16,17,1
  1272                        	.member	SecurityMode,1,16,17,1
  1273                        	.member	RemovableMediaFeature,2,16,17,1
  1274                        	.member	PowerManagement,3,16,17,1
  1275                        	.member	Reserved1,4,16,17,1
  1276                        	.member	WriteCache,5,16,17,1
  1277                        	.member	LookAhead,6,16,17,1
  1278                        	.member	ReleaseInterrupt,7,16,17,1
  1279                        	.member	ServiceInterrupt,8,16,17,1
  1280                        	.member	DeviceReset,9,16,17,1
  1281                        	.member	HostProtectedArea,10,16,17,1
  1282                        	.member	Obsolete1,11,16,17,1
  1283                        	.member	WriteBuffer,12,16,17,1
  1284                        	.member	ReadBuffer,13,16,17,1
  1285                        	.member	Nop,14,16,17,1
  1286                        	.member	Obsolete2,15,16,17,1
  1287                        	.member	DownloadMicrocode,16,16,17,1
  1288                        	.member	DmaQueued,17,16,17,1
  1289                        	.member	Cfa,18,16,17,1
  1290                        	.member	AdvancedPm,19,16,17,1
  1291                        	.member	Msn,20,16,17,1
  1292                        	.member	PowerUpInStandby,21,16,17,1
  1293                        	.member	ManualPowerUp,22,16,17,1
  1294                        	.member	Reserved2,23,16,17,1
  1295                        	.member	SetMax,24,16,17,1
  1296                        	.member	Acoustics,25,16,17,1
  1297                        	.member	BigLba,26,16,17,1
  1298                        	.member	DeviceConfigOverlay,27,16,17,1
  1299                        	.member	FlushCache,28,16,17,1
  1300                        	.member	FlushCacheExt,29,16,17,1
  1301                        	.member	Resrved3,30,16,17,1
  1302                        	.member	Words119_120Valid,31,16,17,1
  1303                        	.member	SmartErrorLog,32,16,17,1
  1304                        	.member	SmartSelfTest,33,16,17,1
  1305                        	.member	MediaSerialNumber,34,16,17,1
  1306                        	.member	MediaCardPassThrough,35,16,17,1
  1307                        	.member	StreamingFeature,36,16,17,1
  1308                        	.member	GpLogging,37,16,17,1
  1309                        	.member	WriteFua,38,16,17,1
  1310                        	.member	WriteQueuedFua,39,16,17,1
  1311                        	.member	WWN64Bit,40,16,17,1
  1312                        	.member	URGReadStream,41,16,17,1
  1313                        	.member	URGWriteStream,42,16,17,1
  1314                        	.member	ReservedForTechReport,43,16,17,2
  1315                        	.member	IdleWithUnloadFeature,45,16,17,1
  1316                        	.member	Reserved4,46,16,17,2
  1317                        	.eos
  1318                        	.stag	fake108_,16,108
  1319                        	.member	TimeRequired,0,16,17,15
  1320                        	.member	ExtendedTimeReported,15,16,17,1
  1321                        	.eos
  1322                        	.stag	fake109_,16,109
  1323                        	.member	TimeRequired,0,16,17,15
  1324                        	.member	ExtendedTimeReported,15,16,17,1
  Sat Jul 10 2021  1:15                                                Page 26


  1325                        	.eos
  1326                        	.stag	fake110_,16,110
  1327                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1328                        	.member	Reserved0,4,16,17,8
  1329                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1330                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1331                        	.member	Reserved1,14,16,17,2
  1332                        	.eos
  1333                        	.stag	fake111_,16,111
  1334                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1335                        	.member	WriteReadVerify,1,16,17,1
  1336                        	.member	WriteUncorrectableExt,2,16,17,1
  1337                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1338                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1339                        	.member	FreefallControl,5,16,17,1
  1340                        	.member	SenseDataReporting,6,16,17,1
  1341                        	.member	ExtendedPowerConditions,7,16,17,1
  1342                        	.member	Reserved0,8,16,17,6
  1343                        	.member	WordValid,14,16,17,2
  1344                        	.eos
  1345                        	.stag	fake112_,16,112
  1346                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1347                        	.member	WriteReadVerify,1,16,17,1
  1348                        	.member	WriteUncorrectableExt,2,16,17,1
  1349                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1350                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1351                        	.member	FreefallControl,5,16,17,1
  1352                        	.member	SenseDataReporting,6,16,17,1
  1353                        	.member	ExtendedPowerConditions,7,16,17,1
  1354                        	.member	Reserved0,8,16,17,6
  1355                        	.member	Reserved1,14,16,17,2
  1356                        	.eos
  1357                        	.stag	fake113_,16,113
  1358                        	.member	SecuritySupported,0,16,17,1
  1359                        	.member	SecurityEnabled,1,16,17,1
  1360                        	.member	SecurityLocked,2,16,17,1
  1361                        	.member	SecurityFrozen,3,16,17,1
  1362                        	.member	SecurityCountExpired,4,16,17,1
  1363                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1364                        	.member	Reserved0,6,16,17,2
  1365                        	.member	SecurityLevel,8,16,17,1
  1366                        	.member	Reserved1,9,16,17,7
  1367                        	.eos
  1368                        	.stag	fake114_,16,114
  1369                        	.member	MaximumCurrentInMA,0,16,17,12
  1370                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1371                        	.member	CfaPowerMode1Required,13,16,17,1
  1372                        	.member	Reserved0,14,16,17,1
  1373                        	.member	Word160Supported,15,16,17,1
  1374                        	.eos
  1375                        	.stag	fake115_,16,115
  1376                        	.member	SupportsTrim,0,16,17,1
  1377                        	.member	Reserved0,1,16,17,15
  1378                        	.eos
  1379                        	.stag	fake116_,16,116
  Sat Jul 10 2021  1:15                                                Page 27


  1380                        	.member	Supported,0,16,17,1
  1381                        	.member	Reserved0,1,16,17,1
  1382                        	.member	WriteSameSuported,2,16,17,1
  1383                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1384                        	.member	FeatureControlSuported,4,16,17,1
  1385                        	.member	DataTablesSuported,5,16,17,1
  1386                        	.member	Reserved1,6,16,17,6
  1387                        	.member	VendorSpecific,12,16,17,4
  1388                        	.eos
  1389                        	.stag	fake117_,16,117
  1390                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1391                        	.member	Word209Supported,14,16,17,1
  1392                        	.member	Reserved0,15,16,17,1
  1393                        	.eos
  1394                        	.stag	fake118_,16,118
  1395                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1396                        	.member	Reserved0,1,16,17,3
  1397                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  1398                        	.member	Reserved1,5,16,17,3
  1399                        	.member	NVCachePowerModeVersion,8,16,17,4
  1400                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1401                        	.eos
  1402                        	.stag	fake119_,16,119
  1403                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1404                        	.member	Reserved,8,14,8,8
  1405                        	.eos
  1406                        	.stag	fake120_,16,120
  1407                        	.member	MajorVersion,0,16,17,12
  1408                        	.member	TransportType,12,16,17,4
  1409                        	.eos
  1410                        	.stag	_IDENTIFY_DEVICE_DATA,4096,121
  1411                        	.member	GeneralConfiguration,0,10,8,16,99
  1412                        	.member	NumCylinders,16,16,8,16
  1413                        	.member	SpecificConfiguration,32,16,8,16
  1414                        	.member	NumHeads,48,16,8,16
  1415                        	.member	Retired1Bytes,64,110,8,0,4
  1416                        	.member	NumSectorsPerTrack,96,16,8,16
  1417                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1418                        	.member	SerialNumber,160,110,8,0,20
  1419                        	.member	Retired2,320,112,8,0,2
  1420                        	.member	Obsolete1,352,16,8,16
  1421                        	.member	FirmwareRevision,368,110,8,0,8
  1422                        	.member	ModelNumber,432,110,8,0,40
  1423                        	.member	MaximumBlockTransfer,752,14,8,8
  1424                        	.member	VendorUnique2,760,14,8,8
  1425                        	.member	TrustedComputing,768,10,8,16,100
  1426                        	.member	Capabilities,784,10,8,32,101
  1427                        	.member	ObsoleteWords51,816,112,8,0,2
  1428                        	.member	TranslationFieldsValid,848,16,17,3
  1429                        	.member	Reserved3,851,16,17,5
  1430                        	.member	FreeFallControlSensitivity,856,16,17,8
  1431                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1432                        	.member	NumberOfCurrentHeads,880,16,8,16
  1433                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1434                        	.member	CurrentSectorCapacity,912,18,8,32
  1435                        	.member	CurrentMultiSectorSetting,944,14,8,8
  Sat Jul 10 2021  1:15                                                Page 28


  1436                        	.member	MultiSectorSettingValid,952,14,17,1
  1437                        	.member	ReservedByte59,953,14,17,3
  1438                        	.member	SanitizeFeatureSupported,956,14,17,1
  1439                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1440                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1441                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1442                        	.member	UserAddressableSectors,960,18,8,32
  1443                        	.member	ObsoleteWord62,992,16,8,16
  1444                        	.member	MultiWordDMASupport,1008,16,17,8
  1445                        	.member	MultiWordDMAActive,1016,16,17,8
  1446                        	.member	AdvancedPIOModes,1024,16,17,8
  1447                        	.member	ReservedByte64,1032,16,17,8
  1448                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1449                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1450                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1451                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1452                        	.member	AdditionalSupported,1104,10,8,16,102
  1453                        	.member	ReservedWords70,1120,112,8,0,5
  1454                        	.member	QueueDepth,1200,16,17,5
  1455                        	.member	ReservedWord75,1205,16,17,11
  1456                        	.member	SerialAtaCapabilities,1216,10,8,32,103
  1457                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    104
  1458                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,10
                    5
  1459                        	.member	MajorRevision,1280,16,8,16
  1460                        	.member	MinorRevision,1296,16,8,16
  1461                        	.member	CommandSetSupport,1312,10,8,48,106
  1462                        	.member	CommandSetActive,1360,10,8,48,107
  1463                        	.member	UltraDMASupport,1408,16,17,8
  1464                        	.member	UltraDMAActive,1416,16,17,8
  1465                        	.member	NormalSecurityEraseUnit,1424,10,8,16,108
  1466                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
                    09
  1467                        	.member	CurrentAPMLevel,1456,16,17,8
  1468                        	.member	ReservedWord91,1464,16,17,8
  1469                        	.member	MasterPasswordID,1472,16,8,16
  1470                        	.member	HardwareResetResult,1488,16,8,16
  1471                        	.member	CurrentAcousticValue,1504,16,17,8
  1472                        	.member	RecommendedAcousticValue,1512,16,17,8
  1473                        	.member	StreamMinRequestSize,1520,16,8,16
  1474                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1475                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1476                        	.member	StreamingPerfGranularity,1568,18,8,32
  1477                        	.member	Max48BitLBA,1600,114,8,0,2
  1478                        	.member	StreamingTransferTime,1664,16,8,16
  1479                        	.member	DsmCap,1680,16,8,16
  1480                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    10
  1481                        	.member	InterSeekDelay,1712,16,8,16
  1482                        	.member	WorldWideName,1728,112,8,0,4
  1483                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1484                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  Sat Jul 10 2021  1:15                                                Page 29


  1485                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1486                        	.member	CommandSetSupportExt,1904,10,8,16,111
  1487                        	.member	CommandSetActiveExt,1920,10,8,16,112
  1488                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1489                        	.member	MsnSupport,2032,16,17,2
  1490                        	.member	ReservedWord127,2034,16,17,14
  1491                        	.member	SecurityStatus,2048,10,8,16,113
  1492                        	.member	ReservedWord129,2064,112,8,0,31
  1493                        	.member	CfaPowerMode1,2560,10,8,16,114
  1494                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1495                        	.member	NominalFormFactor,2688,16,17,4
  1496                        	.member	ReservedWord168,2692,16,17,12
  1497                        	.member	DataSetManagementFeature,2704,10,8,16,11
                    5
  1498                        	.member	AdditionalProductID,2720,112,8,0,4
  1499                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1500                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1501                        	.member	SCTCommandTransport,3296,10,8,16,116
  1502                        	.member	ReservedWord207,3312,112,8,0,2
  1503                        	.member	BlockAlignment,3344,10,8,16,117
  1504                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1505                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1506                        	.member	NVCacheCapabilities,3424,10,8,16,118
  1507                        	.member	NVCacheSizeLSW,3440,16,8,16
  1508                        	.member	NVCacheSizeMSW,3456,16,8,16
  1509                        	.member	NominalMediaRotationRate,3472,16,8,16
  1510                        	.member	ReservedWord218,3488,16,8,16
  1511                        	.member	NVCacheOptions,3504,10,8,16,119
  1512                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1513                        	.member	ReservedWord220,3528,16,17,8
  1514                        	.member	ReservedWord221,3536,16,8,16
  1515                        	.member	TransportMajorVersion,3552,10,8,16,120
  1516                        	.member	TransportMinorVersion,3568,16,8,16
  1517                        	.member	ReservedWord224,3584,112,8,0,6
  1518                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1519                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1520                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1521                        	.member	ReservedWord236,3776,112,8,0,19
  1522                        	.member	Signature,4080,16,17,8
  1523                        	.member	CheckSum,4088,16,17,8
  1524                        	.eos
  1525                        	.stag	_FXDosDevice,5744,122
  1526                        	.member	type,0,14,8,8
  1527                        	.member	initialized,8,14,8,8
  1528                        	.member	devdata,16,129,8,32
  1529                        	.member	devstatus,48,14,8,8
  1530                        	.member	bootSector,56,10,8,928,92
  1531                        	.member	partitionTable,984,10,8,128,93
  1532                        	.member	fileAllocationTable,1112,110,8,0,512
  1533                        	.member	bsOffset,5208,18,8,32
  1534                        	.member	rootDirSectors,5240,18,8,32
  Sat Jul 10 2021  1:15                                                Page 30


  1535                        	.member	root_entry_count,5272,5,8,16
  1536                        	.member	rootEntriesPerPage,5288,5,8,16
  1537                        	.member	sectors_per_cluster,5304,5,8,16
  1538                        	.member	firstDataSector,5320,18,8,32
  1539                        	.member	fatTableOffset,5352,18,8,32
  1540                        	.member	volume_name,5384,110,8,0,12
  1541                        	.member	root_volume_name,5480,110,8,0,12
  1542                        	.member	errorCode,5576,14,8,8
  1543                        	.member	pfInit,5584,641,8,32
  1544                        	.member	pfReset,5616,641,8,32
  1545                        	.member	pfUninit,5648,641,8,32
  1546                        	.member	pfReader,5680,654,8,32
  1547                        	.member	pfWriter,5712,654,8,32
  1548                        	.eos
  1549                        	.utag	item,32,123
  1550                        	.member	dir,0,138,11,32,75
  1551                        	.member	file,0,138,11,32,74
  1552                        	.member	fileInfo,0,138,11,32,76
  1553                        	.eos
  1554                        	.stag	_dos_handle,80,124
  1555                        	.member	fs,0,138,8,32,72
  1556                        	.member	fr,32,5,8,16
  1557                        	.member	path,48,142,8,32
  1558                        	.eos
  1559                        	.line	800
  1560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",23
  1561                        ;#include "ff.h"			/* Declarations 
                    of FatFs API */
  1562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
  1563                        	.line	429
  1564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",24
  1565                        ;#include "diskio.h"		/* Declarations 
                    of device I/O functions */
  1566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\diskio.h",0
  1567                        	.line	85
  1568                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",25
  1569                        ;
  1570                        ;#include <stdarg.h>
  1571                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
  1572                        	.line	51
  1573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",27
  1574                        ;
  1575                        ;#pragma section CODE=FFDOS,offset $08:0000
  1576                        FFDOS	section	offset $08:0000
  1577 08:0000:              	ends
  1578                        ;
  1579                        ;/*-----------------------------------------------
                    ---------------------------
  1580                        ;
  1581                        ; Module Private Definitions
  1582                        ;
  Sat Jul 10 2021  1:15                                                Page 31


  1583                        ; ------------------------------------------------
                    ---------------------------*/
  1584                        ;
  1585                        ;#if FF_DEFINED != 86606	/* Revision ID */
  1586                        ;#error Wrong include file (ff.h).
  1587                        ;#endif
  1588                        ;
  1589                        ;/* Limits and boundaries */
  1590                        ;#define MAX_DIR		0x200000		
                    /* Max size of FAT directory */
  1591                        ;#define MAX_DIR_EX	0x10000000		
                    /* Max size of exFAT directory */
  1592                        ;#define MAX_FAT12	0xFF5			
                    /* Max FAT12 clusters (differs from specs, but right for rea
                    l DOS/Windows behavior) */
  1593                        ;#define MAX_FAT16	0xFFF5			
                    /* Max FAT16 clusters (differs from specs, but right for rea
                    l DOS/Windows behavior) */
  1594                        ;#define MAX_FAT32	0x0FFFFFF5		
                    /* Max FAT32 clusters (not specified, practical limit) */
  1595                        ;#define MAX_EXFAT	0x7FFFFFFD		
                    /* Max exFAT clusters (differs from specs, implementation li
                    mit) */
  1596                        ;
  1597                        ;#define FADDR(x) (&(fs->win[x]))
  1598                        ;
  1599                        ;/* Character code support macros */
  1600                        ;#define IsUpper(c)		((c) >= 'A' && (
                    c) <= 'Z')
  1601                        ;#define IsLower(c)		((c) >= 'a' && (
                    c) <= 'z')
  1602                        ;#define IsDigit(c)		((c) >= '0' && (
                    c) <= '9')
  1603                        ;#define IsSurrogate(c)	((c) >= 0xD800 && (c) <=
                     0xDFFF)
  1604                        ;#define IsSurrogateH(c)	((c) >= 0xD800 && (c) <=
                     0xDBFF)
  1605                        ;#define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <=
                     0xDFFF)
  1606                        ;
  1607                        ;/* Additional file access control and file status
                     flags for internal use */
  1608                        ;#define FA_SEEKEND	0x20	/* Seek to end o
                    f the file on file open */
  1609                        ;#define FA_MODIFIED	0x40	/* File has been
                     modified */
  1610                        ;#define FA_DIRTY	0x80	/* FIL.buf[] needs to be
                     written-back */
  1611                        ;
  1612                        ;/* Additional file attribute bits for internal us
                    e */
  1613                        ;#define AM_VOL		0x08	/* Volume label 
                    */
  1614                        ;#define AM_LFN		0x0F	/* LFN entry */
  1615                        ;#define AM_MASK		0x3F	/* Mask of defin
                    ed bits */
  1616                        ;
  1617                        ;/* Name status flags in fn[11] */
  Sat Jul 10 2021  1:15                                                Page 32


  1618                        ;#define NSFLAG		11		/* Index
                     of the name status byte */
  1619                        ;#define NS_LOSS		0x01	/* Out of 8.3 fo
                    rmat */
  1620                        ;#define NS_LFN		0x02	/* Force to crea
                    te LFN entry */
  1621                        ;#define NS_LAST		0x04	/* Last segment 
                    */
  1622                        ;#define NS_BODY		0x08	/* Lower case fl
                    ag (body) */
  1623                        ;#define NS_EXT		0x10	/* Lower case fl
                    ag (ext) */
  1624                        ;#define NS_DOT		0x20	/* Dot entry */
  1625                        ;#define NS_NOLFN	0x40	/* Do not find LFN */
  1626                        ;#define NS_NONAME	0x80	/* Not followed 
                    */
  1627                        ;
  1628                        ;/* exFAT directory entry types */
  1629                        ;#define	ET_BITMAP	0x81	/* Allocation bi
                    tmap */
  1630                        ;#define	ET_UPCASE	0x82	/* Up-case table
                     */
  1631                        ;#define	ET_VLABEL	0x83	/* Volume label 
                    */
  1632                        ;#define	ET_FILEDIR	0x85	/* File and dire
                    ctory */
  1633                        ;#define	ET_STREAM	0xC0	/* Stream extens
                    ion */
  1634                        ;#define	ET_FILENAME	0xC1	/* Name extensio
                    n */
  1635                        ;
  1636                        ;/* FatFs refers the FAT structure as simple byte 
                    array instead of structure member
  1637                        ; / because the C structure is not binary compatib
                    le between different platforms */
  1638                        ;
  1639                        ;#define BS_JmpBoot			0	
                    	/* x86 jump instruction (3-byte) */
  1640                        ;#define BS_OEMName			3	
                    	/* OEM name (8-byte) */
  1641                        ;#define BPB_BytsPerSec		11		
                    /* Sector size [byte] (WORD) */
  1642                        ;#define BPB_SecPerClus		13		
                    /* Cluster size [sector] (BYTE) */
  1643                        ;#define BPB_RsvdSecCnt		14		
                    /* Size of reserved area [sector] (WORD) */
  1644                        ;#define BPB_NumFATs			16	
                    	/* Number of FATs (BYTE) */
  1645                        ;#define BPB_RootEntCnt		17		
                    /* Size of root directory area for FAT [entry] (WORD) */
  1646                        ;#define BPB_TotSec16		19		
                    /* Volume size (16-bit) [sector] (WORD) */
  1647                        ;#define BPB_Media			21	
                    	/* Media descriptor byte (BYTE) */
  1648                        ;#define BPB_FATSz16			22	
                    	/* FAT size (16-bit) [sector] (WORD) */
  1649                        ;#define BPB_SecPerTrk		24		
                    /* Number of sectors per track for int13h [sector] (WORD) */
  Sat Jul 10 2021  1:15                                                Page 33


  1650                        ;#define BPB_NumHeads		26		
                    /* Number of heads for int13h (WORD) */
  1651                        ;#define BPB_HiddSec			28	
                    	/* Volume offset from top of the drive (DWORD) */
  1652                        ;#define BPB_TotSec32		32		
                    /* Volume size (32-bit) [sector] (DWORD) */
  1653                        ;#define BS_DrvNum			36	
                    	/* Physical drive number for int13h (BYTE) */
  1654                        ;#define BS_NTres			37		
                    /* WindowsNT error flag (BYTE) */
  1655                        ;#define BS_BootSig			38	
                    	/* Extended boot signature (BYTE) */
  1656                        ;#define BS_VolID			39		
                    /* Volume serial number (DWORD) */
  1657                        ;#define BS_VolLab			43	
                    	/* Volume label string (8-byte) */
  1658                        ;#define BS_FilSysType		54		
                    /* Filesystem type string (8-byte) */
  1659                        ;#define BS_BootCode			62	
                    	/* Boot code (448-byte) */
  1660                        ;#define BS_55AA				510	
                    	/* Signature word (WORD) */
  1661                        ;
  1662                        ;#define BPB_FATSz32			36	
                    	/* FAT32: FAT size [sector] (DWORD) */
  1663                        ;#define BPB_ExtFlags32		40		
                    /* FAT32: Extended flags (WORD) */
  1664                        ;#define BPB_FSVer32			42	
                    	/* FAT32: Filesystem version (WORD) */
  1665                        ;#define BPB_RootClus32		44		
                    /* FAT32: Root directory cluster (DWORD) */
  1666                        ;#define BPB_FSInfo32		48		
                    /* FAT32: Offset of FSINFO sector (WORD) */
  1667                        ;#define BPB_BkBootSec32		50		
                    /* FAT32: Offset of backup boot sector (WORD) */
  1668                        ;#define BS_DrvNum32			64	
                    	/* FAT32: Physical drive number for int13h (BYTE) */
  1669                        ;#define BS_NTres32			65	
                    	/* FAT32: Error flag (BYTE) */
  1670                        ;#define BS_BootSig32		66		
                    /* FAT32: Extended boot signature (BYTE) */
  1671                        ;#define BS_VolID32			67	
                    	/* FAT32: Volume serial number (DWORD) */
  1672                        ;#define BS_VolLab32			71	
                    	/* FAT32: Volume label string (8-byte) */
  1673                        ;#define BS_FilSysType32		82		
                    /* FAT32: Filesystem type string (8-byte) */
  1674                        ;#define BS_BootCode32		90		
                    /* FAT32: Boot code (420-byte) */
  1675                        ;
  1676                        ;#define BPB_ZeroedEx		11		
                    /* exFAT: MBZ field (53-byte) */
  1677                        ;#define BPB_VolOfsEx		64		
                    /* exFAT: Volume offset from top of the drive [sector] (QWOR
                    D) */
  1678                        ;#define BPB_TotSecEx		72		
                    /* exFAT: Volume size [sector] (QWORD) */
  1679                        ;#define BPB_FatOfsEx		80		
  Sat Jul 10 2021  1:15                                                Page 34


                    /* exFAT: FAT offset from top of the volume [sector] (DWORD)
                     */
  1680                        ;#define BPB_FatSzEx			84	
                    	/* exFAT: FAT size [sector] (DWORD) */
  1681                        ;#define BPB_DataOfsEx		88		
                    /* exFAT: Data offset from top of the volume [sector] (DWORD
                    ) */
  1682                        ;#define BPB_NumClusEx		92		
                    /* exFAT: Number of clusters (DWORD) */
  1683                        ;#define BPB_RootClusEx		96		
                    /* exFAT: Root directory start cluster (DWORD) */
  1684                        ;#define BPB_VolIDEx			100	
                    	/* exFAT: Volume serial number (DWORD) */
  1685                        ;#define BPB_FSVerEx			104	
                    	/* exFAT: Filesystem version (WORD) */
  1686                        ;#define BPB_VolFlagEx		106		
                    /* exFAT: Volume flags (WORD) */
  1687                        ;#define BPB_BytsPerSecEx	108		/* exFAT
                    : Log2 of sector size in unit of byte (BYTE) */
  1688                        ;#define BPB_SecPerClusEx	109		/* exFAT
                    : Log2 of cluster size in unit of sector (BYTE) */
  1689                        ;#define BPB_NumFATsEx		110		
                    /* exFAT: Number of FATs (BYTE) */
  1690                        ;#define BPB_DrvNumEx		111		
                    /* exFAT: Physical drive number for int13h (BYTE) */
  1691                        ;#define BPB_PercInUseEx		112		
                    /* exFAT: Percent in use (BYTE) */
  1692                        ;#define BPB_RsvdEx			113	
                    	/* exFAT: Reserved (7-byte) */
  1693                        ;#define BS_BootCodeEx		120		
                    /* exFAT: Boot code (390-byte) */
  1694                        ;
  1695                        ;#define DIR_Name			0		
                    /* Short file name (11-byte) */
  1696                        ;#define DIR_Attr			11		
                    /* Attribute (BYTE) */
  1697                        ;#define DIR_NTres			12	
                    	/* Lower case flag (BYTE) */
  1698                        ;#define DIR_CrtTime10		13		
                    /* Created time sub-second (BYTE) */
  1699                        ;#define DIR_CrtTime			14	
                    	/* Created time (DWORD) */
  1700                        ;#define DIR_LstAccDate		18		
                    /* Last accessed date (WORD) */
  1701                        ;#define DIR_FstClusHI		20		
                    /* Higher 16-bit of first cluster (WORD) */
  1702                        ;#define DIR_ModTime			22	
                    	/* Modified time (DWORD) */
  1703                        ;#define DIR_FstClusLO		26		
                    /* Lower 16-bit of first cluster (WORD) */
  1704                        ;#define DIR_FileSize		28		
                    /* File size (DWORD) */
  1705                        ;#define LDIR_Ord			0		
                    /* LFN: LFN order and LLE flag (BYTE) */
  1706                        ;#define LDIR_Attr			11	
                    	/* LFN: LFN attribute (BYTE) */
  1707                        ;#define LDIR_Type			12	
                    	/* LFN: Entry type (BYTE) */
  Sat Jul 10 2021  1:15                                                Page 35


  1708                        ;#define LDIR_Chksum			13	
                    	/* LFN: Checksum of the SFN (BYTE) */
  1709                        ;#define LDIR_FstClusLO		26		
                    /* LFN: MBZ field (WORD) */
  1710                        ;#define XDIR_Type			0	
                    	/* exFAT: Type of exFAT directory entry (BYTE) */
  1711                        ;#define XDIR_NumLabel		1		
                    /* exFAT: Number of volume label characters (BYTE) */
  1712                        ;#define XDIR_Label			2	
                    	/* exFAT: Volume label (11-WORD) */
  1713                        ;#define XDIR_CaseSum		4		
                    /* exFAT: Sum of case conversion table (DWORD) */
  1714                        ;#define XDIR_NumSec			1	
                    	/* exFAT: Number of secondary entries (BYTE) */
  1715                        ;#define XDIR_SetSum			2	
                    	/* exFAT: Sum of the set of directory entries (WORD) */
  1716                        ;#define XDIR_Attr			4	
                    	/* exFAT: File attribute (WORD) */
  1717                        ;#define XDIR_CrtTime		8		
                    /* exFAT: Created time (DWORD) */
  1718                        ;#define XDIR_ModTime		12		
                    /* exFAT: Modified time (DWORD) */
  1719                        ;#define XDIR_AccTime		16		
                    /* exFAT: Last accessed time (DWORD) */
  1720                        ;#define XDIR_CrtTime10		20		
                    /* exFAT: Created time subsecond (BYTE) */
  1721                        ;#define XDIR_ModTime10		21		
                    /* exFAT: Modified time subsecond (BYTE) */
  1722                        ;#define XDIR_CrtTZ			22	
                    	/* exFAT: Created timezone (BYTE) */
  1723                        ;#define XDIR_ModTZ			23	
                    	/* exFAT: Modified timezone (BYTE) */
  1724                        ;#define XDIR_AccTZ			24	
                    	/* exFAT: Last accessed timezone (BYTE) */
  1725                        ;#define XDIR_GenFlags		33		
                    /* exFAT: General secondary flags (BYTE) */
  1726                        ;#define XDIR_NumName		35		
                    /* exFAT: Number of file name characters (BYTE) */
  1727                        ;#define XDIR_NameHash		36		
                    /* exFAT: Hash of file name (WORD) */
  1728                        ;#define XDIR_ValidFileSize	40		
                    /* exFAT: Valid file size (QWORD) */
  1729                        ;#define XDIR_FstClus		52		
                    /* exFAT: First cluster of the file data (DWORD) */
  1730                        ;#define XDIR_FileSize		56		
                    /* exFAT: File/Directory size (QWORD) */
  1731                        ;
  1732                        ;#define SZDIRE				32	
                    	/* Size of a directory entry */
  1733                        ;#define DDEM				0xE5	
                    /* Deleted directory entry mark set to DIR_Name[0] */
  1734                        ;#define RDDEM				0x05	
                    /* Replacement of the character collides with DDEM */
  1735                        ;#define LLEF				0x40	
                    /* Last long entry flag in LDIR_Ord */
  1736                        ;
  1737                        ;#define FSI_LeadSig			0	
                    	/* FAT32 FSI: Leading signature (DWORD) */
  Sat Jul 10 2021  1:15                                                Page 36


  1738                        ;#define FSI_StrucSig		484		
                    /* FAT32 FSI: Structure signature (DWORD) */
  1739                        ;#define FSI_Free_Count		488		
                    /* FAT32 FSI: Number of free clusters (DWORD) */
  1740                        ;#define FSI_Nxt_Free		492		
                    /* FAT32 FSI: Last allocated cluster (DWORD) */
  1741                        ;
  1742                        ;#define MBR_Table			446	
                    	/* MBR: Offset of partition table in the MBR */
  1743                        ;#define SZ_PTE				16	
                    	/* MBR: Size of a partition table entry */
  1744                        ;#define PTE_Boot			0		
                    /* MBR PTE: Boot indicator */
  1745                        ;#define PTE_StHead			1	
                    	/* MBR PTE: Start head */
  1746                        ;#define PTE_StSec			2	
                    	/* MBR PTE: Start sector */
  1747                        ;#define PTE_StCyl			3	
                    	/* MBR PTE: Start cylinder */
  1748                        ;#define PTE_System			4	
                    	/* MBR PTE: System ID */
  1749                        ;#define PTE_EdHead			5	
                    	/* MBR PTE: End head */
  1750                        ;#define PTE_EdSec			6	
                    	/* MBR PTE: End sector */
  1751                        ;#define PTE_EdCyl			7	
                    	/* MBR PTE: End cylinder */
  1752                        ;#define PTE_StLba			8	
                    	/* MBR PTE: Start in LBA */
  1753                        ;#define PTE_SizLba			12	
                    	/* MBR PTE: Size in LBA */
  1754                        ;
  1755                        ;#define GPTH_Sign			0	
                    	/* GPT: Header signature (8-byte) */
  1756                        ;#define GPTH_Rev			8		
                    /* GPT: Revision (DWORD) */
  1757                        ;#define GPTH_Size			12	
                    	/* GPT: Header size (DWORD) */
  1758                        ;#define GPTH_Bcc			16		
                    /* GPT: Header BCC (DWORD) */
  1759                        ;#define GPTH_CurLba			24	
                    	/* GPT: Main header LBA (QWORD) */
  1760                        ;#define GPTH_BakLba			32	
                    	/* GPT: Backup header LBA (QWORD) */
  1761                        ;#define GPTH_FstLba			40	
                    	/* GPT: First LBA for partitions (QWORD) */
  1762                        ;#define GPTH_LstLba			48	
                    	/* GPT: Last LBA for partitions (QWORD) */
  1763                        ;#define GPTH_DskGuid		56		
                    /* GPT: Disk GUID (16-byte) */
  1764                        ;#define GPTH_PtOfs			72	
                    	/* GPT: Partation table LBA (QWORD) */
  1765                        ;#define GPTH_PtNum			80	
                    	/* GPT: Number of table entries (DWORD) */
  1766                        ;#define GPTH_PteSize		84		
                    /* GPT: Size of table entry (DWORD) */
  1767                        ;#define GPTH_PtBcc			88	
                    	/* GPT: Partation table BCC (DWORD) */
  Sat Jul 10 2021  1:15                                                Page 37


  1768                        ;#define SZ_GPTE				128	
                    	/* GPT: Size of partition table entry */
  1769                        ;#define GPTE_PtGuid			0	
                    	/* GPT PTE: Partition type GUID (16-byte) */
  1770                        ;#define GPTE_UpGuid			16	
                    	/* GPT PTE: Partition unique GUID (16-byte) */
  1771                        ;#define GPTE_FstLba			32	
                    	/* GPT PTE: First LBA (QWORD) */
  1772                        ;#define GPTE_LstLba			40	
                    	/* GPT PTE: Last LBA inclusive (QWORD) */
  1773                        ;#define GPTE_Flags			48	
                    	/* GPT PTE: Flags (QWORD) */
  1774                        ;#define GPTE_Name			56	
                    	/* GPT PTE: Name */
  1775                        ;
  1776                        ;/* Post process on fatal error in the file operat
                    ions */
  1777                        ;#define ABORT(fs, res)		{ fp->err = (BYT
                    E)(res); LEAVE_FF(fs, res); }
  1778                        ;
  1779                        ;/* Re-entrancy related */
  1780                        ;#if FF_FS_REENTRANT
  1781                        ;#if FF_USE_LFN == 1
  1782                        ;#error Static LFN work area cannot be used at thr
                    ead-safe configuration
  1783                        ;#endif
  1784                        ;#define LEAVE_FF(fs, res)	{ unlock_fs(fs, 
                    res); return res; }
  1785                        ;#else
  1786                        ;#define LEAVE_FF(fs, res)	return res
  1787                        ;#endif
  1788                        ;
  1789                        ;/* Definitions of logical drive - physical locati
                    on conversion */
  1790                        ;#if FF_MULTI_PARTITION
  1791                        ;#define LD2PD(vol) VolToPart[vol].pd	/* Get p
                    hysical drive number */
  1792                        ;#define LD2PT(vol) VolToPart[vol].pt	/* Get p
                    artition index */
  1793                        ;#else
  1794                        ;#define LD2PD(vol) (BYTE)(vol)	/* Each logical 
                    drive is associated with the same physical drive number */
  1795                        ;#define LD2PT(vol) 0			/* Find 
                    first valid partition or in SFD */
  1796                        ;#endif
  1797                        ;
  1798                        ;/* Definitions of sector size */
  1799                        ;#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 
                    && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MAX_SS != 40
                    96) || (FF_MIN_SS != 512 && FF_MIN_SS != 1024 && FF_MIN_SS !
                    = 2048 && FF_MIN_SS != 4096)
  1800                        ;#error Wrong sector size configuration
  1801                        ;#endif
  1802                        ;#if FF_MAX_SS == FF_MIN_SS
  1803                        ;#define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed
                     sector size */
  1804                        ;#else
  1805                        ;#define SS(fs)	((fs)->ssize)	/* Variable sect
  Sat Jul 10 2021  1:15                                                Page 38


                    or size */
  1806                        ;#endif
  1807                        ;
  1808                        ;/* Timestamp */
  1809                        ;#if FF_FS_NORTC == 1
  1810                        ;#if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 
                    || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NORTC_MDAY < 
                    1 || FF_NORTC_MDAY > 31
  1811                        ;#error Invalid FF_FS_NORTC settings
  1812                        ;#endif
  1813                        ;#define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR -
                     1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_NORTC_M
                    DAY << 16)
  1814                        ;#else
  1815                        ;#define GET_FATTIME()	get_fattime()
  1816                        ;#endif
  1817                        ;
  1818                        ;/* File lock controls */
  1819                        ;#if FF_FS_LOCK != 0
  1820                        ;#if FF_FS_READONLY
  1821                        ;#error FF_FS_LOCK must be 0 at read-only configur
                    ation
  1822                        ;#endif
  1823                        ;typedef struct
  1824                        ;{
  1825                        ;	FATFS *fs; /* Object ID 1, volume (NULL:blank en
                    try) */
  1826                        ;	DWORD clu; /* Object ID 2, containing directory 
                    (0:root) */
  1827                        ;	DWORD ofs; /* Object ID 3, offset in the directo
                    ry */
  1828                        ;	WORD ctr; /* Object open counter, 0:none, 0x01..
                    0xFF:read mode open count, 0x100:write mode */
  1829                        ;}FILESEM;
  1830                        ;#endif
  1831                        ;
  1832                        ;/* SBCS up-case tables (\x80-\xFF) */
  1833                        ;#define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1834                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1835                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1836                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1837                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1838                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1839                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1840                        ;					0xF0,0xF1,0xF2,0
  Sat Jul 10 2021  1:15                                                Page 39


                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1841                        ;#define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1842                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1843                        ;					0xA0,0xA1,0xA2,0
                    xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1844                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1845                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1846                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1847                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1848                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1849                        ;#define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1850                        ;					0x90,0x92,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0
                    x87, \
  1851                        ;					0x88,0x89,0x8A,0
                    x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0
                    x96, \
  1852                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1853                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1854                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1855                        ;					0x97,0xEA,0xEB,0
                    xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1856                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1857                        ;#define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1858                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1859                        ;					0x80,0x81,0x82,0
                    x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0
                    x8F, \
  1860                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
  Sat Jul 10 2021  1:15                                                Page 40


                    xBF, \
  1861                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1862                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0
                    xDE, \
  1863                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1864                        ;					0xF0,0xF0,0xF2,0
                    xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0
                    xFF}
  1865                        ;#define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95
                    ,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
  1866                        ;					0x90,0x92,0x92,0
                    xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9F, \
  1867                        ;					0xA0,0xA1,0xE0,0
                    xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1868                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1869                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1870                        ;					0xB5,0xB6,0xB7,0
                    xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1871                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0
                    xEF, \
  1872                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1873                        ;#define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41
                    ,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
  1874                        ;					0x45,0x92,0x92,0
                    x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0
                    x9F, \
  1875                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1876                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1877                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1878                        ;					0xD1,0xD1,0x45,0
                    x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0
                    xDF, \
  1879                        ;					0x4F,0xE1,0x4F,0
                    x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0
                    xEF, \
  1880                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
  Sat Jul 10 2021  1:15                                                Page 41


                    xFF}
  1881                        ;#define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE
                    ,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
  1882                        ;					0x90,0x91,0x91,0
                    xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0
                    xAC, \
  1883                        ;					0xB5,0xD6,0xE0,0
                    xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0
                    xAF, \
  1884                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0
                    xBF, \
  1885                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1886                        ;					0xD1,0xD1,0xD2,0
                    xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1887                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0
                    xEF, \
  1888                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0
                    xFF}
  1889                        ;#define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85
                    ,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
  1890                        ;					0x91,0x91,0x93,0
                    x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0
                    x9F, \
  1891                        ;					0xA1,0xA1,0xA3,0
                    xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0
                    xAF, \
  1892                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0
                    xBF, \
  1893                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1894                        ;					0xD1,0xD1,0xD3,0
                    xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0
                    xDF, \
  1895                        ;					0xE0,0xE2,0xE2,0
                    xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0
                    xEF, \
  1896                        ;					0xF0,0xF2,0xF2,0
                    xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0
                    xFF}
  1897                        ;#define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7
                    ,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
  1898                        ;					0x90,0x92,0x92,0
                    xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9E, \
  1899                        ;					0xB5,0xD6,0xE0,0
                    xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1900                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  Sat Jul 10 2021  1:15                                                Page 42


  1901                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1902                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1903                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0
                    xEF, \
  1904                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1905                        ;#define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91
                    ,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
  1906                        ;					0x90,0x91,0x92,0
                    x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1907                        ;					0x86,0x8B,0x9F,0
                    x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1908                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1909                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1910                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1911                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1912                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1913                        ;#define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
  1914                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9F, \
  1915                        ;					0xA4,0xA5,0xA6,0
                    xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1916                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1917                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1918                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1919                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1920                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  Sat Jul 10 2021  1:15                                                Page 43


  1921                        ;#define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1922                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1923                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1924                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1925                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1926                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1927                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1928                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1929                        ;#define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41
                    ,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
  1930                        ;					0x45,0x45,0x45,0
                    x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0
                    x9F, \
  1931                        ;					0xA0,0xA1,0x4F,0
                    x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1932                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1933                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1934                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1935                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1936                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1937                        ;#define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1938                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1939                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1940                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1941                        ;					0xC0,0xC1,0xC2,0
  Sat Jul 10 2021  1:15                                                Page 44


                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1942                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1943                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1944                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1945                        ;#define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1946                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1947                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1948                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1949                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1950                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1951                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1952                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1953                        ;#define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1954                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1955                        ;					0x80,0x81,0x82,0
                    x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0
                    x8F, \
  1956                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1957                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1958                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1959                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1960                        ;					0xF0,0xF0,0xF2,0
                    xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1961                        ;#define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85
  Sat Jul 10 2021  1:15                                                Page 45


                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1962                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0
                    x90, \
  1963                        ;					0x91,0x90,0x92,0
                    x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1964                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1965                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1966                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0
                    xDF, \
  1967                        ;					0xA9,0xAA,0xAC,0
                    xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0
                    xEF, \
  1968                        ;					0xF0,0xF1,0xD1,0
                    xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0
                    xFF}
  1969                        ;
  1970                        ;/* DBCS code range |----- 1st byte -----|  |-----
                    ------ 2nd byte -----------| */
  1971                        ;/*                  <------>    <------>    <----
                    -->    <------>    <------>  */
  1972                        ;#define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 
                    0x7E, 0x80, 0xFC, 0x00, 0x00}
  1973                        ;#define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 
                    0x7E, 0x80, 0xFE, 0x00, 0x00}
  1974                        ;#define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 
                    0x5A, 0x61, 0x7A, 0x81, 0xFE}
  1975                        ;#define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 
                    0x7E, 0xA1, 0xFE, 0x00, 0x00}
  1976                        ;
  1977                        ;/* Macros for table definitions */
  1978                        ;#define MERGE_2STR(a, b) a ## b
  1979                        ;#define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
  1980                        ;
  1981                        ;/*-----------------------------------------------
                    ---------------------------
  1982                        ;
  1983                        ; Module Private Work Area
  1984                        ;
  1985                        ; ------------------------------------------------
                    ---------------------------*/
  1986                        ;/* Remark: Variables defined here without initial
                     value shall be guaranteed
  1987                        ; /  zero/null at start-up. If not, the linker opt
                    ion or start-up routine is
  1988                        ; /  not compliance with C standard. */
  1989                        ;
  1990                        ;/*--------------------------------*/
  1991                        ;/* File/Volume controls           */
  1992                        ;/*--------------------------------*/
  1993                        ;
  1994                        ;#if FF_VOLUMES < 1 || FF_VOLUMES > 10
  Sat Jul 10 2021  1:15                                                Page 46


  1995                        ;#error Wrong FF_VOLUMES setting
  1996                        ;#endif
  1997                        ;static FATFS* FatFs[FF_VOLUMES]; /* Pointer to th
                    e filesystem objects (logical drives) */
  1998                        ;static WORD Fsid; /* Filesystem mount ID */
  1999                        ;
  2000                        ;#if FF_FS_RPATH != 0
  2001                        ;static BYTE CurrVol; /* Current drive */
  2002                        ;#endif
  2003                        ;
  2004                        ;#if FF_FS_LOCK != 0
  2005                        ;static FILESEM Files[FF_FS_LOCK]; /* Open object 
                    lock semaphores */
  2006                        ;#endif
  2007                        ;
  2008                        ;#if FF_STR_VOLUME_ID
  2009                        ;#ifdef FF_VOLUME_STRS
  2010                        ;static const char* const VolumeStr[FF_VOLUMES] = 
                    {FF_VOLUME_STRS}; /* Pre-defined volume ID */
  2011                        	data
  2012                        ~~VolumeStr:
  2013 00:0000: xx xx xx xx  	dl	L1+0
  2014 00:0004: xx xx xx xx  	dl	L1+4
  2015 00:0008: xx xx xx xx  	dl	L1+9
  2016 00:000C: xx xx xx xx  	dl	L1+12
  2017 00:0010: xx xx xx xx  	dl	L1+15
  2018 00:0014: xx xx xx xx  	dl	L1+18
  2019 00:0018: xx xx xx xx  	dl	L1+22
  2020 00:001C: xx xx xx xx  	dl	L1+27
  2021 00:0020:              	ends
  2022                        	data
  2023                        L1:
  2024 00:0020: 52 41 4D 00  	db	$52,$41,$4D,$00,$4E,$41,$4E,$44,$00,$50,
                    $43,$00,$53,$44,$00
       00:0024: 4E 41 4E 44 
       00:0028: 00 50 43 00 
       00:002C: 53 44 00 
  2025 00:002F: 48 44 00 55  	db	$48,$44,$00,$55,$53,$42,$00,$55,$53,$42,
                    $32,$00,$55,$53,$42
       00:0033: 53 42 00 55 
       00:0037: 53 42 32 00 
       00:003B: 55 53 42 
  2026 00:003E: 33 00        	db	$33,$00
  2027 00:0040:              	ends
  2028                        ;#endif
  2029                        ;#endif
  2030                        ;
  2031                        ;#if FF_LBA64
  2032                        ;#if FF_MIN_GPT > 0x100000000
  2033                        ;#error Wrong FF_MIN_GPT setting
  2034                        ;#endif
  2035                        ;static const BYTE GUID_MS_Basic[16] =
  2036                        ;{	0xA2,0xA0,0xD0,0xEB,0xE5,0xB9,0x33,0x44,
                    0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7};
  2037                        ;#endif
  2038                        ;
  2039                        ;/*--------------------------------*/
  2040                        ;/* LFN/Directory working buffer   */
  Sat Jul 10 2021  1:15                                                Page 47


  2041                        ;/*--------------------------------*/
  2042                        ;
  2043                        ;#if FF_USE_LFN == 0		/* Non-LFN confi
                    guration */
  2044                        ;#if FF_FS_EXFAT
  2045                        ;#error LFN must be enabled when enable exFAT
  2046                        ;#endif
  2047                        ;#define DEF_NAMBUF
  2048                        ;#define INIT_NAMBUF(fs)
  2049                        ;#define FREE_NAMBUF()
  2050                        ;#define LEAVE_MKFS(res)	return res
  2051                        ;
  2052                        ;#else					/* LFN c
                    onfigurations */
  2053                        ;#if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
  2054                        ;#error Wrong setting of FF_MAX_LFN
  2055                        ;#endif
  2056                        ;#if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
  2057                        ;#error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
  2058                        ;#endif
  2059                        ;#if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
  2060                        ;#error Wrong setting of FF_LFN_UNICODE
  2061                        ;#endif
  2062                        ;static const BYTE LfnOfs[] =
  2063                        	data
  2064                        ~~LfnOfs:
  2065                        ;{	1,3,5,7,9,14,16,18,20,22,24,28,30}; /* F
                    AT: Offset of LFN characters in the directory entry */
  2066 00:0040: 01 03 05 07  	db	$1,$3,$5,$7,$9,$E,$10,$12,$14,$16
       00:0044: 09 0E 10 12 
       00:0048: 14 16 
  2067 00:004A: 18 1C 1E     	db	$18,$1C,$1E
  2068 00:004D:              	ends
  2069                        ;#define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIR
                    E)	/* exFAT: Size of directory entry block scratchpad buffe
                    r needed for the name length */
  2070                        ;
  2071                        ;#if FF_USE_LFN == 1		/* LFN enabled w
                    ith static working buffer */
  2072                        ;#if FF_FS_EXFAT
  2073                        ;static BYTE DirBuf[MAXDIRB(FF_MAX_LFN)]; /* Direc
                    tory entry block scratchpad buffer */
  2074                        ;#endif
  2075                        ;static WCHAR LfnBuf[FF_MAX_LFN + 1]; /* LFN worki
                    ng buffer */
  2076                        ;#define DEF_NAMBUF
  2077                        ;#define INIT_NAMBUF(fs)
  2078                        ;#define FREE_NAMBUF()
  2079                        ;#define LEAVE_MKFS(res)	return res
  2080                        ;
  2081                        ;#elif FF_USE_LFN == 2 	/* LFN enabled with dyna
                    mic working buffer on the stack */
  2082                        ;#if FF_FS_EXFAT
  2083                        ;#define DEF_NAMBUF		WCHAR lbuf[FF_MA
                    X_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working b
                    uffer and directory entry block scratchpad buffer */
  2084                        ;#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (
                    fs)->dirbuf = dbuf; }
  Sat Jul 10 2021  1:15                                                Page 48


  2085                        ;#define FREE_NAMBUF()
  2086                        ;#else
  2087                        ;#define DEF_NAMBUF		WCHAR lbuf[FF_MA
                    X_LFN+1];	/* LFN working buffer */
  2088                        ;#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
  2089                        ;#define FREE_NAMBUF()
  2090                        ;#endif
  2091                        ;#define LEAVE_MKFS(res)	return res
  2092                        ;
  2093                        ;#elif FF_USE_LFN == 3 	/* LFN enabled with dyna
                    mic working buffer on the heap */
  2094                        ;#if FF_FS_EXFAT
  2095                        ;#define DEF_NAMBUF		WCHAR *lfn;	
                    /* Pointer to LFN working buffer and directory entry block s
                    cratchpad buffer */
  2096                        ;#define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_
                    MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAVE_FF(fs, 
                    FR_NOT_ENOUGH_CORE); (fs)->lfnbuf = lfn; (fs)->dirbuf = (BYT
                    E*)(lfn+FF_MAX_LFN+1); }
  2097                        ;#define FREE_NAMBUF()	ff_memfree(lfn)
  2098                        ;#else
  2099                        ;#define DEF_NAMBUF		WCHAR *lfn;	
                    /* Pointer to LFN working buffer */
  2100                        ;#define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_
                    MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_CORE); (
                    fs)->lfnbuf = lfn; }
  2101                        ;#define FREE_NAMBUF()	ff_memfree(lfn)
  2102                        ;#endif
  2103                        ;#define LEAVE_MKFS(res)	{ if (!work) ff_memfree(
                    buf); return res; }
  2104                        ;#define MAX_MALLOC 0x400
  2105                        ;//0x8000
  2106                        ;/* Must be >=FF_MAX_SS */
  2107                        ;
  2108                        ;#else
  2109                        ;#error Wrong setting of FF_USE_LFN
  2110                        ;
  2111                        ;#endif	/* FF_USE_LFN == 1 */
  2112                        ;#endif	/* FF_USE_LFN == 0 */
  2113                        ;
  2114                        ;/*--------------------------------*/
  2115                        ;/* Code conversion tables         */
  2116                        ;/*--------------------------------*/
  2117                        ;
  2118                        ;#if FF_CODE_PAGE == 0		/* Run-time code
                     page configuration */
  2119                        ;#define CODEPAGE CodePage
  2120                        ;static WORD CodePage; /* Current code page */
  2121                        ;static const BYTE *ExCvt, *DbcTbl; /* Pointer to 
                    current SBCS up-case table and DBCS code range table below *
                    /
  2122                        ;
  2123                        ;static const BYTE Ct437[] = TBL_CT437;
  2124                        ;static const BYTE Ct720[] = TBL_CT720;
  2125                        ;static const BYTE Ct737[] = TBL_CT737;
  2126                        ;static const BYTE Ct771[] = TBL_CT771;
  2127                        ;static const BYTE Ct775[] = TBL_CT775;
  2128                        ;static const BYTE Ct850[] = TBL_CT850;
  Sat Jul 10 2021  1:15                                                Page 49


  2129                        ;static const BYTE Ct852[] = TBL_CT852;
  2130                        ;static const BYTE Ct855[] = TBL_CT855;
  2131                        ;static const BYTE Ct857[] = TBL_CT857;
  2132                        ;static const BYTE Ct860[] = TBL_CT860;
  2133                        ;static const BYTE Ct861[] = TBL_CT861;
  2134                        ;static const BYTE Ct862[] = TBL_CT862;
  2135                        ;static const BYTE Ct863[] = TBL_CT863;
  2136                        ;static const BYTE Ct864[] = TBL_CT864;
  2137                        ;static const BYTE Ct865[] = TBL_CT865;
  2138                        ;static const BYTE Ct866[] = TBL_CT866;
  2139                        ;static const BYTE Ct869[] = TBL_CT869;
  2140                        ;static const BYTE Dc932[] = TBL_DC932;
  2141                        ;static const BYTE Dc936[] = TBL_DC936;
  2142                        ;static const BYTE Dc949[] = TBL_DC949;
  2143                        ;static const BYTE Dc950[] = TBL_DC950;
  2144                        ;
  2145                        ;#elif FF_CODE_PAGE < 900	/* Static code page conf
                    iguration (SBCS) */
  2146                        ;#define CODEPAGE FF_CODE_PAGE
  2147                        ;static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CO
                    DE_PAGE);
  2148                        	data
  2149                        ~~ExCvt:
  2150 00:004D: 80 9A 45 41  	db	$80,$9A,$45,$41,$8E,$41,$8F,$80,$45,$45
       00:0051: 8E 41 8F 80 
       00:0055: 45 45 
  2151 00:0057: 45 49 49 49  	db	$45,$49,$49,$49,$8E,$8F,$90,$92,$92,$4F
       00:005B: 8E 8F 90 92 
       00:005F: 92 4F 
  2152 00:0061: 99 4F 55 55  	db	$99,$4F,$55,$55,$59,$99,$9A,$9B,$9C,$9D
       00:0065: 59 99 9A 9B 
       00:0069: 9C 9D 
  2153 00:006B: 9E 9F 41 49  	db	$9E,$9F,$41,$49,$4F,$55,$A5,$A5,$A6,$A7
       00:006F: 4F 55 A5 A5 
       00:0073: A6 A7 
  2154 00:0075: A8 A9 AA AB  	db	$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF,$B0,$B1
       00:0079: AC AD AE AF 
       00:007D: B0 B1 
  2155 00:007F: B2 B3 B4 B5  	db	$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB
       00:0083: B6 B7 B8 B9 
       00:0087: BA BB 
  2156 00:0089: BC BD BE BF  	db	$BC,$BD,$BE,$BF,$C0,$C1,$C2,$C3,$C4,$C5
       00:008D: C0 C1 C2 C3 
       00:0091: C4 C5 
  2157 00:0093: C6 C7 C8 C9  	db	$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
       00:0097: CA CB CC CD 
       00:009B: CE CF 
  2158 00:009D: D0 D1 D2 D3  	db	$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9
       00:00A1: D4 D5 D6 D7 
       00:00A5: D8 D9 
  2159 00:00A7: DA DB DC DD  	db	$DA,$DB,$DC,$DD,$DE,$DF,$E0,$E1,$E2,$E3
       00:00AB: DE DF E0 E1 
       00:00AF: E2 E3 
  2160 00:00B1: E4 E5 E6 E7  	db	$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED
       00:00B5: E8 E9 EA EB 
       00:00B9: EC ED 
  2161 00:00BB: EE EF F0 F1  	db	$EE,$EF,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7
       00:00BF: F2 F3 F4 F5 
  Sat Jul 10 2021  1:15                                                Page 50


       00:00C3: F6 F7 
  2162 00:00C5: F8 F9 FA FB  	db	$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF
       00:00C9: FC FD FE FF 
  2163 00:00CD:              	ends
  2164                        ;
  2165                        ;#else					/* Stati
                    c code page configuration (DBCS) */
  2166                        ;#define CODEPAGE FF_CODE_PAGE
  2167                        ;static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_C
                    ODE_PAGE);
  2168                        ;
  2169                        ;#endif
  2170                        ;
  2171                        ;/*-----------------------------------------------
                    ---------------------------
  2172                        ;
  2173                        ; Module Private Functions
  2174                        ;
  2175                        ; ------------------------------------------------
                    ---------------------------*/
  2176                        ;
  2177                        ;/*-----------------------------------------------
                    ------------------------*/
  2178                        ;/* Load/Store multi-byte word in the FAT structur
                    e                       */
  2179                        ;/*-----------------------------------------------
                    ------------------------*/
  2180                        ;
  2181                        ;static WORD ld_word(const BYTE* ptr) /*	 Load a 
                    2-byte little-endian word */
  2182                        ;{
  2183                        	.line	595
  2184                        	.line	596
  2185                        	FFDOS
  2186                        	func
  2187                        	.function	596
  2188                        ~~ld_word:
  2189                        	longa	on
  2190                        	longi	on
  2191 08:0000: 3B           	tsc
  2192 08:0001: 38           	sec
  2193 08:0002: E9 0A 00     	sbc	#L3
  2194 08:0005: 1B           	tcs
  2195 08:0006: 0B           	phd
  2196 08:0007: 5B           	tcd
  2197             00000004   ptr_0	set	4
  2198                        	.block	596
  2199                        ;	WORD rv;
  2200                        ;
  2201                        ;	//////k_debug_integer("ld_word::before:", *((UIN
                    T*)ptr)  );
  2202                        ;
  2203                        ;	rv = ptr[1];
  2204             00000000   rv_1	set	0
  2205                        	.sym	rv,0,5,1,16
  2206                        	.sym	ptr,4,142,6,32
  2207                        	.line	601
  2208 08:0008: A0 01 00     	ldy	#$1
  Sat Jul 10 2021  1:15                                                Page 51


  2209 08:000B: B7 0E        	lda	[<L3+ptr_0],Y
  2210 08:000D: 29 FF 00     	and	#$ff
  2211 08:0010: 85 09        	sta	<L4+rv_1
  2212                        ;	rv = rv << 8 | ptr[0];
  2213                        	.line	602
  2214 08:0012: A5 09        	lda	<L4+rv_1
  2215 08:0014: EB           	xba
  2216 08:0015: 29 00 FF     	and	#$ff00
  2217 08:0018: 85 01        	sta	<R0
  2218 08:001A: A7 0E        	lda	[<L3+ptr_0]
  2219 08:001C: 29 FF 00     	and	#$ff
  2220 08:001F: 85 05        	sta	<R1
  2221 08:0021: A5 05        	lda	<R1
  2222 08:0023: 05 01        	ora	<R0
  2223 08:0025: 85 09        	sta	<L4+rv_1
  2224                        ;
  2225                        ;	//////k_debug_integer("ld_word::after:", rv);
  2226                        ;
  2227                        ;	return rv;
  2228                        	.line	606
  2229 08:0027: A5 09        	lda	<L4+rv_1
  2230                        L6:
  2231 08:0029: A8           	tay
  2232 08:002A: A5 0C        	lda	<L3+2
  2233 08:002C: 85 10        	sta	<L3+2+4
  2234 08:002E: A5 0B        	lda	<L3+1
  2235 08:0030: 85 0F        	sta	<L3+1+4
  2236 08:0032: 2B           	pld
  2237 08:0033: 3B           	tsc
  2238 08:0034: 18           	clc
  2239 08:0035: 69 0E 00     	adc	#L3+4
  2240 08:0038: 1B           	tcs
  2241 08:0039: 98           	tya
  2242 08:003A: 6B           	rtl
  2243                        ;}
  2244                        	.line	607
  2245                        	.endblock	607
  2246             0000000A   L3	equ	10
  2247             00000009   L4	equ	9
  2248 08:003B:              	ends
  2249                        	efunc
  2250                        	.endfunc	607,9,10
  2251                        	.line	607
  2252                        ;
  2253                        ;static DWORD ld_dword(const BYTE* ptr) /* Load a 
                    4-byte little-endian word */
  2254                        ;{
  2255                        	.line	609
  2256                        	.line	610
  2257                        	FFDOS
  2258                        	func
  2259                        	.function	610
  2260                        ~~ld_dword:
  2261                        	longa	on
  2262                        	longi	on
  2263 08:003B: 3B           	tsc
  2264 08:003C: 38           	sec
  2265 08:003D: E9 0C 00     	sbc	#L7
  Sat Jul 10 2021  1:15                                                Page 52


  2266 08:0040: 1B           	tcs
  2267 08:0041: 0B           	phd
  2268 08:0042: 5B           	tcd
  2269             00000004   ptr_0	set	4
  2270                        	.block	610
  2271                        ;	DWORD rv;
  2272                        ;
  2273                        ;	rv = ptr[3];
  2274             00000000   rv_1	set	0
  2275                        	.sym	rv,0,18,1,32
  2276                        	.sym	ptr,4,142,6,32
  2277                        	.line	613
  2278 08:0043: A0 03 00     	ldy	#$3
  2279 08:0046: B7 10        	lda	[<L7+ptr_0],Y
  2280 08:0048: 29 FF 00     	and	#$ff
  2281 08:004B: 85 09        	sta	<L8+rv_1
  2282 08:004D: 64 0B        	stz	<L8+rv_1+2
  2283                        ;	rv = rv << 8 | ptr[2];
  2284                        	.line	614
  2285 08:004F: D4 0B        	pei	<L8+rv_1+2
  2286 08:0051: D4 09        	pei	<L8+rv_1
  2287 08:0053: A9 08 00     	lda	#$8
  2288                        	xref	~~~lasl
  2289 08:0056: 22 xx xx xx  	jsl	~~~lasl
  2290 08:005A: 85 01        	sta	<R0
  2291 08:005C: 86 03        	stx	<R0+2
  2292 08:005E: A0 02 00     	ldy	#$2
  2293 08:0061: B7 10        	lda	[<L7+ptr_0],Y
  2294 08:0063: 29 FF 00     	and	#$ff
  2295 08:0066: 85 05        	sta	<R1
  2296 08:0068: 64 07        	stz	<R1+2
  2297 08:006A: A5 05        	lda	<R1
  2298 08:006C: 05 01        	ora	<R0
  2299 08:006E: 85 09        	sta	<L8+rv_1
  2300 08:0070: A5 07        	lda	<R1+2
  2301 08:0072: 05 03        	ora	<R0+2
  2302 08:0074: 85 0B        	sta	<L8+rv_1+2
  2303                        ;	rv = rv << 8 | ptr[1];
  2304                        	.line	615
  2305 08:0076: D4 0B        	pei	<L8+rv_1+2
  2306 08:0078: D4 09        	pei	<L8+rv_1
  2307 08:007A: A9 08 00     	lda	#$8
  2308                        	xref	~~~lasl
  2309 08:007D: 22 xx xx xx  	jsl	~~~lasl
  2310 08:0081: 85 01        	sta	<R0
  2311 08:0083: 86 03        	stx	<R0+2
  2312 08:0085: A0 01 00     	ldy	#$1
  2313 08:0088: B7 10        	lda	[<L7+ptr_0],Y
  2314 08:008A: 29 FF 00     	and	#$ff
  2315 08:008D: 85 05        	sta	<R1
  2316 08:008F: 64 07        	stz	<R1+2
  2317 08:0091: A5 05        	lda	<R1
  2318 08:0093: 05 01        	ora	<R0
  2319 08:0095: 85 09        	sta	<L8+rv_1
  2320 08:0097: A5 07        	lda	<R1+2
  2321 08:0099: 05 03        	ora	<R0+2
  2322 08:009B: 85 0B        	sta	<L8+rv_1+2
  2323                        ;	rv = rv << 8 | ptr[0];
  Sat Jul 10 2021  1:15                                                Page 53


  2324                        	.line	616
  2325 08:009D: D4 0B        	pei	<L8+rv_1+2
  2326 08:009F: D4 09        	pei	<L8+rv_1
  2327 08:00A1: A9 08 00     	lda	#$8
  2328                        	xref	~~~lasl
  2329 08:00A4: 22 xx xx xx  	jsl	~~~lasl
  2330 08:00A8: 85 01        	sta	<R0
  2331 08:00AA: 86 03        	stx	<R0+2
  2332 08:00AC: A7 10        	lda	[<L7+ptr_0]
  2333 08:00AE: 29 FF 00     	and	#$ff
  2334 08:00B1: 85 05        	sta	<R1
  2335 08:00B3: 64 07        	stz	<R1+2
  2336 08:00B5: A5 05        	lda	<R1
  2337 08:00B7: 05 01        	ora	<R0
  2338 08:00B9: 85 09        	sta	<L8+rv_1
  2339 08:00BB: A5 07        	lda	<R1+2
  2340 08:00BD: 05 03        	ora	<R0+2
  2341 08:00BF: 85 0B        	sta	<L8+rv_1+2
  2342                        ;	return rv;
  2343                        	.line	617
  2344 08:00C1: A6 0B        	ldx	<L8+rv_1+2
  2345 08:00C3: A5 09        	lda	<L8+rv_1
  2346                        L10:
  2347 08:00C5: A8           	tay
  2348 08:00C6: A5 0E        	lda	<L7+2
  2349 08:00C8: 85 12        	sta	<L7+2+4
  2350 08:00CA: A5 0D        	lda	<L7+1
  2351 08:00CC: 85 11        	sta	<L7+1+4
  2352 08:00CE: 2B           	pld
  2353 08:00CF: 3B           	tsc
  2354 08:00D0: 18           	clc
  2355 08:00D1: 69 10 00     	adc	#L7+4
  2356 08:00D4: 1B           	tcs
  2357 08:00D5: 98           	tya
  2358 08:00D6: 6B           	rtl
  2359                        ;}
  2360                        	.line	618
  2361                        	.endblock	618
  2362             0000000C   L7	equ	12
  2363             00000009   L8	equ	9
  2364 08:00D7:              	ends
  2365                        	efunc
  2366                        	.endfunc	618,9,12
  2367                        	.line	618
  2368                        ;
  2369                        ;#if FF_FS_EXFAT
  2370                        ;static QWORD ld_qword (const BYTE* ptr) /* Load a
                    n 8-byte little-endian word */
  2371                        ;{
  2372                        ;	QWORD rv;
  2373                        ;
  2374                        ;	rv = ptr[7];
  2375                        ;	rv = rv << 8 | ptr[6];
  2376                        ;	rv = rv << 8 | ptr[5];
  2377                        ;	rv = rv << 8 | ptr[4];
  2378                        ;	rv = rv << 8 | ptr[3];
  2379                        ;	rv = rv << 8 | ptr[2];
  2380                        ;	rv = rv << 8 | ptr[1];
  Sat Jul 10 2021  1:15                                                Page 54


  2381                        ;	rv = rv << 8 | ptr[0];
  2382                        ;	return rv;
  2383                        ;}
  2384                        ;#endif
  2385                        ;
  2386                        ;#if !FF_FS_READONLY
  2387                        ;static void st_word(BYTE* ptr, WORD val) /* Store
                     a 2-byte word in little-endian */
  2388                        ;{
  2389                        	.line	638
  2390                        	.line	639
  2391                        	FFDOS
  2392                        	func
  2393                        	.function	639
  2394                        ~~st_word:
  2395                        	longa	on
  2396                        	longi	on
  2397 08:00D7: 3B           	tsc
  2398 08:00D8: 38           	sec
  2399 08:00D9: E9 00 00     	sbc	#L11
  2400 08:00DC: 1B           	tcs
  2401 08:00DD: 0B           	phd
  2402 08:00DE: 5B           	tcd
  2403             00000004   ptr_0	set	4
  2404             00000008   val_0	set	8
  2405                        	.block	639
  2406                        ;	*ptr++ = (BYTE) val;
  2407                        	.sym	ptr,4,142,6,32
  2408                        	.sym	val,8,5,6,16
  2409                        	.line	640
  2410 08:00DF: E2 20        	sep	#$20
  2411                        	longa	off
  2412 08:00E1: A5 08        	lda	<L11+val_0
  2413 08:00E3: 87 04        	sta	[<L11+ptr_0]
  2414 08:00E5: C2 20        	rep	#$20
  2415                        	longa	on
  2416 08:00E7: E6 04        	inc	<L11+ptr_0
  2417 08:00E9: D0 02        	bne	L14
  2418 08:00EB: E6 06        	inc	<L11+ptr_0+2
  2419                        L14:
  2420                        ;	val >>= 8;
  2421                        	.line	641
  2422 08:00ED: A5 08        	lda	<L11+val_0
  2423 08:00EF: A2 08 00     	ldx	#<$8
  2424                        	xref	~~~asr
  2425 08:00F2: 22 xx xx xx  	jsl	~~~asr
  2426 08:00F6: 85 08        	sta	<L11+val_0
  2427                        ;	*ptr++ = (BYTE) val;
  2428                        	.line	642
  2429 08:00F8: E2 20        	sep	#$20
  2430                        	longa	off
  2431 08:00FA: A5 08        	lda	<L11+val_0
  2432 08:00FC: 87 04        	sta	[<L11+ptr_0]
  2433 08:00FE: C2 20        	rep	#$20
  2434                        	longa	on
  2435 08:0100: E6 04        	inc	<L11+ptr_0
  2436 08:0102: D0 02        	bne	L15
  2437 08:0104: E6 06        	inc	<L11+ptr_0+2
  Sat Jul 10 2021  1:15                                                Page 55


  2438                        L15:
  2439                        ;}
  2440                        	.line	643
  2441                        L16:
  2442 08:0106: A5 02        	lda	<L11+2
  2443 08:0108: 85 08        	sta	<L11+2+6
  2444 08:010A: A5 01        	lda	<L11+1
  2445 08:010C: 85 07        	sta	<L11+1+6
  2446 08:010E: 2B           	pld
  2447 08:010F: 3B           	tsc
  2448 08:0110: 18           	clc
  2449 08:0111: 69 06 00     	adc	#L11+6
  2450 08:0114: 1B           	tcs
  2451 08:0115: 6B           	rtl
  2452                        	.endblock	643
  2453             00000000   L11	equ	0
  2454             00000001   L12	equ	1
  2455 08:0116:              	ends
  2456                        	efunc
  2457                        	.endfunc	643,1,0
  2458                        	.line	643
  2459                        ;
  2460                        ;static void st_dword(BYTE* ptr, DWORD val) /* Sto
                    re a 4-byte word in little-endian */
  2461                        ;{
  2462                        	.line	645
  2463                        	.line	646
  2464                        	FFDOS
  2465                        	func
  2466                        	.function	646
  2467                        ~~st_dword:
  2468                        	longa	on
  2469                        	longi	on
  2470 08:0116: 3B           	tsc
  2471 08:0117: 38           	sec
  2472 08:0118: E9 00 00     	sbc	#L17
  2473 08:011B: 1B           	tcs
  2474 08:011C: 0B           	phd
  2475 08:011D: 5B           	tcd
  2476             00000004   ptr_0	set	4
  2477             00000008   val_0	set	8
  2478                        	.block	646
  2479                        ;	*ptr++ = (BYTE) val;
  2480                        	.sym	ptr,4,142,6,32
  2481                        	.sym	val,8,18,6,32
  2482                        	.line	647
  2483 08:011E: E2 20        	sep	#$20
  2484                        	longa	off
  2485 08:0120: A5 08        	lda	<L17+val_0
  2486 08:0122: 87 04        	sta	[<L17+ptr_0]
  2487 08:0124: C2 20        	rep	#$20
  2488                        	longa	on
  2489 08:0126: E6 04        	inc	<L17+ptr_0
  2490 08:0128: D0 02        	bne	L20
  2491 08:012A: E6 06        	inc	<L17+ptr_0+2
  2492                        L20:
  2493                        ;	val >>= 8;
  2494                        	.line	648
  Sat Jul 10 2021  1:15                                                Page 56


  2495 08:012C: D4 0A        	pei	<L17+val_0+2
  2496 08:012E: D4 08        	pei	<L17+val_0
  2497 08:0130: A9 08 00     	lda	#$8
  2498                        	xref	~~~llsr
  2499 08:0133: 22 xx xx xx  	jsl	~~~llsr
  2500 08:0137: 85 08        	sta	<L17+val_0
  2501 08:0139: 86 0A        	stx	<L17+val_0+2
  2502                        ;	*ptr++ = (BYTE) val;
  2503                        	.line	649
  2504 08:013B: E2 20        	sep	#$20
  2505                        	longa	off
  2506 08:013D: A5 08        	lda	<L17+val_0
  2507 08:013F: 87 04        	sta	[<L17+ptr_0]
  2508 08:0141: C2 20        	rep	#$20
  2509                        	longa	on
  2510 08:0143: E6 04        	inc	<L17+ptr_0
  2511 08:0145: D0 02        	bne	L21
  2512 08:0147: E6 06        	inc	<L17+ptr_0+2
  2513                        L21:
  2514                        ;	val >>= 8;
  2515                        	.line	650
  2516 08:0149: D4 0A        	pei	<L17+val_0+2
  2517 08:014B: D4 08        	pei	<L17+val_0
  2518 08:014D: A9 08 00     	lda	#$8
  2519                        	xref	~~~llsr
  2520 08:0150: 22 xx xx xx  	jsl	~~~llsr
  2521 08:0154: 85 08        	sta	<L17+val_0
  2522 08:0156: 86 0A        	stx	<L17+val_0+2
  2523                        ;	*ptr++ = (BYTE) val;
  2524                        	.line	651
  2525 08:0158: E2 20        	sep	#$20
  2526                        	longa	off
  2527 08:015A: A5 08        	lda	<L17+val_0
  2528 08:015C: 87 04        	sta	[<L17+ptr_0]
  2529 08:015E: C2 20        	rep	#$20
  2530                        	longa	on
  2531 08:0160: E6 04        	inc	<L17+ptr_0
  2532 08:0162: D0 02        	bne	L22
  2533 08:0164: E6 06        	inc	<L17+ptr_0+2
  2534                        L22:
  2535                        ;	val >>= 8;
  2536                        	.line	652
  2537 08:0166: D4 0A        	pei	<L17+val_0+2
  2538 08:0168: D4 08        	pei	<L17+val_0
  2539 08:016A: A9 08 00     	lda	#$8
  2540                        	xref	~~~llsr
  2541 08:016D: 22 xx xx xx  	jsl	~~~llsr
  2542 08:0171: 85 08        	sta	<L17+val_0
  2543 08:0173: 86 0A        	stx	<L17+val_0+2
  2544                        ;	*ptr++ = (BYTE) val;
  2545                        	.line	653
  2546 08:0175: E2 20        	sep	#$20
  2547                        	longa	off
  2548 08:0177: A5 08        	lda	<L17+val_0
  2549 08:0179: 87 04        	sta	[<L17+ptr_0]
  2550 08:017B: C2 20        	rep	#$20
  2551                        	longa	on
  2552 08:017D: E6 04        	inc	<L17+ptr_0
  Sat Jul 10 2021  1:15                                                Page 57


  2553 08:017F: D0 02        	bne	L23
  2554 08:0181: E6 06        	inc	<L17+ptr_0+2
  2555                        L23:
  2556                        ;}
  2557                        	.line	654
  2558                        L24:
  2559 08:0183: A5 02        	lda	<L17+2
  2560 08:0185: 85 0A        	sta	<L17+2+8
  2561 08:0187: A5 01        	lda	<L17+1
  2562 08:0189: 85 09        	sta	<L17+1+8
  2563 08:018B: 2B           	pld
  2564 08:018C: 3B           	tsc
  2565 08:018D: 18           	clc
  2566 08:018E: 69 08 00     	adc	#L17+8
  2567 08:0191: 1B           	tcs
  2568 08:0192: 6B           	rtl
  2569                        	.endblock	654
  2570             00000000   L17	equ	0
  2571             00000001   L18	equ	1
  2572 08:0193:              	ends
  2573                        	efunc
  2574                        	.endfunc	654,1,0
  2575                        	.line	654
  2576                        ;
  2577                        ;#if FF_FS_EXFAT
  2578                        ;static void st_qword (BYTE* ptr, QWORD val) /* St
                    ore an 8-byte word in little-endian */
  2579                        ;{
  2580                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2581                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2582                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2583                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2584                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2585                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2586                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2587                        ;	*ptr++ = (BYTE)val;
  2588                        ;}
  2589                        ;#endif
  2590                        ;#endif	/* !FF_FS_READONLY */
  2591                        ;
  2592                        ;/*-----------------------------------------------
                    ------------------------*/
  2593                        ;/* String functions                              
                                            */
  2594                        ;/*-----------------------------------------------
                    ------------------------*/
  2595                        ;
  2596                        ;/* Copy memory to memory */
  2597                        ;static void mem_cpy(void* dst, const void* src, U
                    INT cnt)
  2598                        ;{
  2599                        	.line	676
  2600                        	.line	677
  2601                        	FFDOS
  2602                        	func
  2603                        	.function	677
  2604                        ~~mem_cpy:
  2605                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 58


  2606                        	longi	on
  2607 08:0193: 3B           	tsc
  2608 08:0194: 38           	sec
  2609 08:0195: E9 08 00     	sbc	#L25
  2610 08:0198: 1B           	tcs
  2611 08:0199: 0B           	phd
  2612 08:019A: 5B           	tcd
  2613             00000004   dst_0	set	4
  2614             00000008   src_0	set	8
  2615             0000000C   cnt_0	set	12
  2616                        	.block	677
  2617                        ;	BYTE *d = (BYTE*) dst;
  2618                        ;	const BYTE *s = (const BYTE*) src;
  2619                        ;
  2620                        ;	if (cnt != 0)
  2621             00000000   d_1	set	0
  2622             00000004   s_1	set	4
  2623                        	.sym	d,0,142,1,32
  2624                        	.sym	s,4,142,1,32
  2625                        	.sym	dst,4,129,6,32
  2626                        	.sym	src,8,129,6,32
  2627                        	.sym	cnt,12,16,6,16
  2628 08:019B: A5 0C        	lda	<L25+dst_0
  2629 08:019D: 85 01        	sta	<L26+d_1
  2630 08:019F: A5 0E        	lda	<L25+dst_0+2
  2631 08:01A1: 85 03        	sta	<L26+d_1+2
  2632 08:01A3: A5 10        	lda	<L25+src_0
  2633 08:01A5: 85 05        	sta	<L26+s_1
  2634 08:01A7: A5 12        	lda	<L25+src_0+2
  2635 08:01A9: 85 07        	sta	<L26+s_1+2
  2636                        	.line	681
  2637                        ;	{
  2638 08:01AB: A5 14        	lda	<L25+cnt_0
  2639 08:01AD: D0 03        	bne	L28
  2640 08:01AF: 82 1D 00     	brl	L10001
  2641                        L28:
  2642                        	.line	682
  2643                        ;		do
  2644                        	.line	683
  2645                        L10004:
  2646                        ;		{
  2647                        	.line	684
  2648                        ;			*d++ = *s++;
  2649                        	.line	685
  2650 08:01B2: E2 20        	sep	#$20
  2651                        	longa	off
  2652 08:01B4: A7 05        	lda	[<L26+s_1]
  2653 08:01B6: 87 01        	sta	[<L26+d_1]
  2654 08:01B8: C2 20        	rep	#$20
  2655                        	longa	on
  2656 08:01BA: E6 05        	inc	<L26+s_1
  2657 08:01BC: D0 02        	bne	L29
  2658 08:01BE: E6 07        	inc	<L26+s_1+2
  2659                        L29:
  2660 08:01C0: E6 01        	inc	<L26+d_1
  2661 08:01C2: D0 02        	bne	L30
  2662 08:01C4: E6 03        	inc	<L26+d_1+2
  2663                        L30:
  Sat Jul 10 2021  1:15                                                Page 59


  2664                        ;		} while (--cnt);
  2665                        	.line	686
  2666                        L10002:
  2667 08:01C6: C6 14        	dec	<L25+cnt_0
  2668 08:01C8: A5 14        	lda	<L25+cnt_0
  2669 08:01CA: F0 03        	beq	L31
  2670 08:01CC: 82 E3 FF     	brl	L10004
  2671                        L31:
  2672                        L10003:
  2673                        ;	}
  2674                        	.line	687
  2675                        ;}
  2676                        L10001:
  2677                        	.line	688
  2678                        L32:
  2679 08:01CF: A5 0A        	lda	<L25+2
  2680 08:01D1: 85 14        	sta	<L25+2+10
  2681 08:01D3: A5 09        	lda	<L25+1
  2682 08:01D5: 85 13        	sta	<L25+1+10
  2683 08:01D7: 2B           	pld
  2684 08:01D8: 3B           	tsc
  2685 08:01D9: 18           	clc
  2686 08:01DA: 69 12 00     	adc	#L25+10
  2687 08:01DD: 1B           	tcs
  2688 08:01DE: 6B           	rtl
  2689                        	.endblock	688
  2690             00000008   L25	equ	8
  2691             00000001   L26	equ	1
  2692 08:01DF:              	ends
  2693                        	efunc
  2694                        	.endfunc	688,1,8
  2695                        	.line	688
  2696                        ;
  2697                        ;/* Fill memory block */
  2698                        ;static void mem_set(void* dst, int val, UINT cnt)
  2699                        ;{
  2700                        	.line	691
  2701                        	.line	692
  2702                        	FFDOS
  2703                        	func
  2704                        	.function	692
  2705                        ~~mem_set:
  2706                        	longa	on
  2707                        	longi	on
  2708 08:01DF: 3B           	tsc
  2709 08:01E0: 38           	sec
  2710 08:01E1: E9 04 00     	sbc	#L33
  2711 08:01E4: 1B           	tcs
  2712 08:01E5: 0B           	phd
  2713 08:01E6: 5B           	tcd
  2714             00000004   dst_0	set	4
  2715             00000008   val_0	set	8
  2716             0000000A   cnt_0	set	10
  2717                        	.block	692
  2718                        ;	BYTE *d = (BYTE*) dst;
  2719                        ;
  2720                        ;	do
  2721             00000000   d_1	set	0
  Sat Jul 10 2021  1:15                                                Page 60


  2722                        	.sym	d,0,142,1,32
  2723                        	.sym	dst,4,129,6,32
  2724                        	.sym	val,8,5,6,16
  2725                        	.sym	cnt,10,16,6,16
  2726 08:01E7: A5 08        	lda	<L33+dst_0
  2727 08:01E9: 85 01        	sta	<L34+d_1
  2728 08:01EB: A5 0A        	lda	<L33+dst_0+2
  2729 08:01ED: 85 03        	sta	<L34+d_1+2
  2730                        	.line	695
  2731                        L10007:
  2732                        ;	{
  2733                        	.line	696
  2734                        ;		*d++ = (BYTE) val;
  2735                        	.line	697
  2736 08:01EF: E2 20        	sep	#$20
  2737                        	longa	off
  2738 08:01F1: A5 0C        	lda	<L33+val_0
  2739 08:01F3: 87 01        	sta	[<L34+d_1]
  2740 08:01F5: C2 20        	rep	#$20
  2741                        	longa	on
  2742 08:01F7: E6 01        	inc	<L34+d_1
  2743 08:01F9: D0 02        	bne	L36
  2744 08:01FB: E6 03        	inc	<L34+d_1+2
  2745                        L36:
  2746                        ;	} while (--cnt);
  2747                        	.line	698
  2748                        L10005:
  2749 08:01FD: C6 0E        	dec	<L33+cnt_0
  2750 08:01FF: A5 0E        	lda	<L33+cnt_0
  2751 08:0201: F0 03        	beq	L37
  2752 08:0203: 82 E9 FF     	brl	L10007
  2753                        L37:
  2754                        L10006:
  2755                        ;}
  2756                        	.line	699
  2757                        L38:
  2758 08:0206: A5 06        	lda	<L33+2
  2759 08:0208: 85 0E        	sta	<L33+2+8
  2760 08:020A: A5 05        	lda	<L33+1
  2761 08:020C: 85 0D        	sta	<L33+1+8
  2762 08:020E: 2B           	pld
  2763 08:020F: 3B           	tsc
  2764 08:0210: 18           	clc
  2765 08:0211: 69 0C 00     	adc	#L33+8
  2766 08:0214: 1B           	tcs
  2767 08:0215: 6B           	rtl
  2768                        	.endblock	699
  2769             00000004   L33	equ	4
  2770             00000001   L34	equ	1
  2771 08:0216:              	ends
  2772                        	efunc
  2773                        	.endfunc	699,1,4
  2774                        	.line	699
  2775                        ;
  2776                        ;/* Compare memory block */
  2777                        ;static int mem_cmp(const void* dst, const void* s
                    rc, UINT cnt) /* ZR:same, NZ:different */
  2778                        ;{
  Sat Jul 10 2021  1:15                                                Page 61


  2779                        	.line	702
  2780                        	.line	703
  2781                        	FFDOS
  2782                        	func
  2783                        	.function	703
  2784                        ~~mem_cmp:
  2785                        	longa	on
  2786                        	longi	on
  2787 08:0216: 3B           	tsc
  2788 08:0217: 38           	sec
  2789 08:0218: E9 12 00     	sbc	#L39
  2790 08:021B: 1B           	tcs
  2791 08:021C: 0B           	phd
  2792 08:021D: 5B           	tcd
  2793             00000004   dst_0	set	4
  2794             00000008   src_0	set	8
  2795             0000000C   cnt_0	set	12
  2796                        	.block	703
  2797                        ;	const BYTE *d = (const BYTE *) dst, *s = (const 
                    BYTE *) src;
  2798                        ;	int r = 0;
  2799                        ;
  2800                        ;	do
  2801             00000000   d_1	set	0
  2802             00000004   s_1	set	4
  2803             00000008   r_1	set	8
  2804                        	.sym	d,0,142,1,32
  2805                        	.sym	s,4,142,1,32
  2806                        	.sym	r,8,5,1,16
  2807                        	.sym	dst,4,129,6,32
  2808                        	.sym	src,8,129,6,32
  2809                        	.sym	cnt,12,16,6,16
  2810 08:021E: A5 16        	lda	<L39+dst_0
  2811 08:0220: 85 09        	sta	<L40+d_1
  2812 08:0222: A5 18        	lda	<L39+dst_0+2
  2813 08:0224: 85 0B        	sta	<L40+d_1+2
  2814 08:0226: A5 1A        	lda	<L39+src_0
  2815 08:0228: 85 0D        	sta	<L40+s_1
  2816 08:022A: A5 1C        	lda	<L39+src_0+2
  2817 08:022C: 85 0F        	sta	<L40+s_1+2
  2818 08:022E: 64 11        	stz	<L40+r_1
  2819                        	.line	707
  2820                        L10010:
  2821                        ;	{
  2822                        	.line	708
  2823                        ;		r = *d++ - *s++;
  2824                        	.line	709
  2825 08:0230: A7 0D        	lda	[<L40+s_1]
  2826 08:0232: 29 FF 00     	and	#$ff
  2827 08:0235: 85 01        	sta	<R0
  2828 08:0237: A7 09        	lda	[<L40+d_1]
  2829 08:0239: 29 FF 00     	and	#$ff
  2830 08:023C: 85 05        	sta	<R1
  2831 08:023E: 38           	sec
  2832 08:023F: A5 05        	lda	<R1
  2833 08:0241: E5 01        	sbc	<R0
  2834 08:0243: 85 11        	sta	<L40+r_1
  2835 08:0245: E6 0D        	inc	<L40+s_1
  Sat Jul 10 2021  1:15                                                Page 62


  2836 08:0247: D0 02        	bne	L42
  2837 08:0249: E6 0F        	inc	<L40+s_1+2
  2838                        L42:
  2839 08:024B: E6 09        	inc	<L40+d_1
  2840 08:024D: D0 02        	bne	L43
  2841 08:024F: E6 0B        	inc	<L40+d_1+2
  2842                        L43:
  2843                        ;	} while (--cnt && r == 0);
  2844                        	.line	710
  2845                        L10008:
  2846 08:0251: C6 1E        	dec	<L39+cnt_0
  2847 08:0253: A5 1E        	lda	<L39+cnt_0
  2848 08:0255: D0 03        	bne	L45
  2849 08:0257: 82 07 00     	brl	L44
  2850                        L45:
  2851 08:025A: A5 11        	lda	<L40+r_1
  2852 08:025C: D0 03        	bne	L46
  2853 08:025E: 82 CF FF     	brl	L10010
  2854                        L46:
  2855                        L44:
  2856                        L10009:
  2857                        ;
  2858                        ;	return r;
  2859                        	.line	712
  2860 08:0261: A5 11        	lda	<L40+r_1
  2861                        L47:
  2862 08:0263: A8           	tay
  2863 08:0264: A5 14        	lda	<L39+2
  2864 08:0266: 85 1E        	sta	<L39+2+10
  2865 08:0268: A5 13        	lda	<L39+1
  2866 08:026A: 85 1D        	sta	<L39+1+10
  2867 08:026C: 2B           	pld
  2868 08:026D: 3B           	tsc
  2869 08:026E: 18           	clc
  2870 08:026F: 69 1C 00     	adc	#L39+10
  2871 08:0272: 1B           	tcs
  2872 08:0273: 98           	tya
  2873 08:0274: 6B           	rtl
  2874                        ;}
  2875                        	.line	713
  2876                        	.endblock	713
  2877             00000012   L39	equ	18
  2878             00000009   L40	equ	9
  2879 08:0275:              	ends
  2880                        	efunc
  2881                        	.endfunc	713,9,18
  2882                        	.line	713
  2883                        ;
  2884                        ;/* Check if chr is contained in the string */
  2885                        ;static int chk_chr(const char* str, int chr) /* N
                    Z:contained, ZR:not contained */
  2886                        ;{
  2887                        	.line	716
  2888                        	.line	717
  2889                        	FFDOS
  2890                        	func
  2891                        	.function	717
  2892                        ~~chk_chr:
  Sat Jul 10 2021  1:15                                                Page 63


  2893                        	longa	on
  2894                        	longi	on
  2895 08:0275: 3B           	tsc
  2896 08:0276: 38           	sec
  2897 08:0277: E9 04 00     	sbc	#L48
  2898 08:027A: 1B           	tcs
  2899 08:027B: 0B           	phd
  2900 08:027C: 5B           	tcd
  2901             00000004   str_0	set	4
  2902             00000008   chr_0	set	8
  2903                        	.block	717
  2904                        ;	while (*str && *str != chr)
  2905                        	.sym	str,4,142,6,32
  2906                        	.sym	chr,8,5,6,16
  2907                        	.line	718
  2908                        L10011:
  2909 08:027D: A7 08        	lda	[<L48+str_0]
  2910 08:027F: 29 FF 00     	and	#$ff
  2911 08:0282: D0 03        	bne	L51
  2912 08:0284: 82 19 00     	brl	L10012
  2913                        L51:
  2914 08:0287: A7 08        	lda	[<L48+str_0]
  2915 08:0289: 29 FF 00     	and	#$ff
  2916 08:028C: 85 01        	sta	<R0
  2917 08:028E: A5 01        	lda	<R0
  2918 08:0290: C5 0C        	cmp	<L48+chr_0
  2919 08:0292: D0 03        	bne	L52
  2920 08:0294: 82 09 00     	brl	L10012
  2921                        L52:
  2922                        ;		str++;
  2923                        	.line	719
  2924 08:0297: E6 08        	inc	<L48+str_0
  2925 08:0299: D0 02        	bne	L53
  2926 08:029B: E6 0A        	inc	<L48+str_0+2
  2927                        L53:
  2928 08:029D: 82 DD FF     	brl	L10011
  2929                        L10012:
  2930                        ;	return *str;
  2931                        	.line	720
  2932 08:02A0: A7 08        	lda	[<L48+str_0]
  2933 08:02A2: 29 FF 00     	and	#$ff
  2934                        L54:
  2935 08:02A5: A8           	tay
  2936 08:02A6: A5 06        	lda	<L48+2
  2937 08:02A8: 85 0C        	sta	<L48+2+6
  2938 08:02AA: A5 05        	lda	<L48+1
  2939 08:02AC: 85 0B        	sta	<L48+1+6
  2940 08:02AE: 2B           	pld
  2941 08:02AF: 3B           	tsc
  2942 08:02B0: 18           	clc
  2943 08:02B1: 69 0A 00     	adc	#L48+6
  2944 08:02B4: 1B           	tcs
  2945 08:02B5: 98           	tya
  2946 08:02B6: 6B           	rtl
  2947                        ;}
  2948                        	.line	721
  2949                        	.endblock	721
  2950             00000004   L48	equ	4
  Sat Jul 10 2021  1:15                                                Page 64


  2951             00000005   L49	equ	5
  2952 08:02B7:              	ends
  2953                        	efunc
  2954                        	.endfunc	721,5,4
  2955                        	.line	721
  2956                        ;
  2957                        ;/* Test if the byte is DBC 1st byte */
  2958                        ;static int dbc_1st(BYTE c)
  2959                        ;{
  2960                        	.line	724
  2961                        	.line	725
  2962                        	FFDOS
  2963                        	func
  2964                        	.function	725
  2965                        ~~dbc_1st:
  2966                        	longa	on
  2967                        	longi	on
  2968 08:02B7: 3B           	tsc
  2969 08:02B8: 38           	sec
  2970 08:02B9: E9 00 00     	sbc	#L55
  2971 08:02BC: 1B           	tcs
  2972 08:02BD: 0B           	phd
  2973 08:02BE: 5B           	tcd
  2974             00000004   c_0	set	4
  2975                        	.block	725
  2976                        ;#if FF_CODE_PAGE == 0		/* Variable code
                     page */
  2977                        ;	if (DbcTbl && c >= DbcTbl[0])
  2978                        ;	{
  2979                        ;		if (c <= DbcTbl[1]) return 1; /* 1st byt
                    e range 1 */
  2980                        ;		if (c >= DbcTbl[2] && c <= DbcTbl[3]) re
                    turn 1; /* 1st byte range 2 */
  2981                        ;	}
  2982                        ;#elif FF_CODE_PAGE >= 900	/* DBCS fixed co
                    de page */
  2983                        ;	if (c >= DbcTbl[0])
  2984                        ;	{
  2985                        ;		if (c <= DbcTbl[1]) return 1;
  2986                        ;		if (c >= DbcTbl[2] && c <= DbcTbl[3]) re
                    turn 1;
  2987                        ;	}
  2988                        ;#else						
                    /* SBCS fixed code page */
  2989                        ;	if (c != 0)
  2990                        	.sym	c,4,14,6,8
  2991                        	.line	739
  2992                        ;		return 0; /* Always false */
  2993 08:02BF: A5 04        	lda	<L55+c_0
  2994 08:02C1: 29 FF 00     	and	#$ff
  2995 08:02C4: D0 03        	bne	L58
  2996 08:02C6: 82 15 00     	brl	L10013
  2997                        L58:
  2998                        	.line	740
  2999 08:02C9: A9 00 00     	lda	#$0
  3000                        L59:
  3001 08:02CC: A8           	tay
  3002 08:02CD: A5 02        	lda	<L55+2
  Sat Jul 10 2021  1:15                                                Page 65


  3003 08:02CF: 85 04        	sta	<L55+2+2
  3004 08:02D1: A5 01        	lda	<L55+1
  3005 08:02D3: 85 03        	sta	<L55+1+2
  3006 08:02D5: 2B           	pld
  3007 08:02D6: 3B           	tsc
  3008 08:02D7: 18           	clc
  3009 08:02D8: 69 02 00     	adc	#L55+2
  3010 08:02DB: 1B           	tcs
  3011 08:02DC: 98           	tya
  3012 08:02DD: 6B           	rtl
  3013                        ;#endif
  3014                        ;	return 0;
  3015                        L10013:
  3016                        	.line	742
  3017 08:02DE: A9 00 00     	lda	#$0
  3018 08:02E1: 82 E8 FF     	brl	L59
  3019                        ;}
  3020                        	.line	743
  3021                        	.endblock	743
  3022             00000000   L55	equ	0
  3023             00000001   L56	equ	1
  3024 08:02E4:              	ends
  3025                        	efunc
  3026                        	.endfunc	743,1,0
  3027                        	.line	743
  3028                        ;
  3029                        ;/* Test if the byte is DBC 2nd byte */
  3030                        ;static int dbc_2nd(BYTE c)
  3031                        ;{
  3032                        	.line	746
  3033                        	.line	747
  3034                        	FFDOS
  3035                        	func
  3036                        	.function	747
  3037                        ~~dbc_2nd:
  3038                        	longa	on
  3039                        	longi	on
  3040 08:02E4: 3B           	tsc
  3041 08:02E5: 38           	sec
  3042 08:02E6: E9 00 00     	sbc	#L60
  3043 08:02E9: 1B           	tcs
  3044 08:02EA: 0B           	phd
  3045 08:02EB: 5B           	tcd
  3046             00000004   c_0	set	4
  3047                        	.block	747
  3048                        ;#if FF_CODE_PAGE == 0		/* Variable code
                     page */
  3049                        ;	if (DbcTbl && c >= DbcTbl[4])
  3050                        ;	{
  3051                        ;		if (c <= DbcTbl[5]) return 1; /* 2nd byt
                    e range 1 */
  3052                        ;		if (c >= DbcTbl[6] && c <= DbcTbl[7]) re
                    turn 1; /* 2nd byte range 2 */
  3053                        ;		if (c >= DbcTbl[8] && c <= DbcTbl[9]) re
                    turn 1; /* 2nd byte range 3 */
  3054                        ;	}
  3055                        ;#elif FF_CODE_PAGE >= 900	/* DBCS fixed co
                    de page */
  Sat Jul 10 2021  1:15                                                Page 66


  3056                        ;	if (c >= DbcTbl[4])
  3057                        ;	{
  3058                        ;		if (c <= DbcTbl[5]) return 1;
  3059                        ;		if (c >= DbcTbl[6] && c <= DbcTbl[7]) re
                    turn 1;
  3060                        ;		if (c >= DbcTbl[8] && c <= DbcTbl[9]) re
                    turn 1;
  3061                        ;	}
  3062                        ;#else						
                    /* SBCS fixed code page */
  3063                        ;	if (c != 0)
  3064                        	.sym	c,4,14,6,8
  3065                        	.line	763
  3066                        ;		return 0; /* Always false */
  3067 08:02EC: A5 04        	lda	<L60+c_0
  3068 08:02EE: 29 FF 00     	and	#$ff
  3069 08:02F1: D0 03        	bne	L63
  3070 08:02F3: 82 15 00     	brl	L10014
  3071                        L63:
  3072                        	.line	764
  3073 08:02F6: A9 00 00     	lda	#$0
  3074                        L64:
  3075 08:02F9: A8           	tay
  3076 08:02FA: A5 02        	lda	<L60+2
  3077 08:02FC: 85 04        	sta	<L60+2+2
  3078 08:02FE: A5 01        	lda	<L60+1
  3079 08:0300: 85 03        	sta	<L60+1+2
  3080 08:0302: 2B           	pld
  3081 08:0303: 3B           	tsc
  3082 08:0304: 18           	clc
  3083 08:0305: 69 02 00     	adc	#L60+2
  3084 08:0308: 1B           	tcs
  3085 08:0309: 98           	tya
  3086 08:030A: 6B           	rtl
  3087                        ;#endif
  3088                        ;	return 0;
  3089                        L10014:
  3090                        	.line	766
  3091 08:030B: A9 00 00     	lda	#$0
  3092 08:030E: 82 E8 FF     	brl	L64
  3093                        ;}
  3094                        	.line	767
  3095                        	.endblock	767
  3096             00000000   L60	equ	0
  3097             00000001   L61	equ	1
  3098 08:0311:              	ends
  3099                        	efunc
  3100                        	.endfunc	767,1,0
  3101                        	.line	767
  3102                        ;
  3103                        ;#if FF_USE_LFN
  3104                        ;
  3105                        ;/* Get a Unicode code point from the TCHAR string
                     in defined API encodeing */
  3106                        ;static DWORD tchar2uni ( /* Returns a character i
                    n UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF o
                    n decode error) */
  3107                        ;		const TCHAR** str /* Pointer to pointer 
  Sat Jul 10 2021  1:15                                                Page 67


                    to TCHAR string in configured encoding */
  3108                        ;)
  3109                        ;{
  3110                        	.line	772
  3111                        	.line	775
  3112                        	FFDOS
  3113                        	func
  3114                        	.function	775
  3115                        ~~tchar2uni:
  3116                        	longa	on
  3117                        	longi	on
  3118 08:0311: 3B           	tsc
  3119 08:0312: 38           	sec
  3120 08:0313: E9 1B 00     	sbc	#L65
  3121 08:0316: 1B           	tcs
  3122 08:0317: 0B           	phd
  3123 08:0318: 5B           	tcd
  3124             00000004   str_0	set	4
  3125                        	.block	775
  3126                        ;	DWORD uc;
  3127                        ;	const TCHAR *p = *str;
  3128                        ;
  3129                        ;#if FF_LFN_UNICODE == 1		/* UTF-16 input 
                    */
  3130                        ;	WCHAR wc;
  3131                        ;
  3132                        ;	uc = *p++; /* Get a unit */
  3133                        ;	if (IsSurrogate(uc))
  3134                        ;	{ /* Surrogate? */
  3135                        ;		wc = *p++; /* Get low surrogate */
  3136                        ;		if (!IsSurrogateH(uc) || !IsSurrogateL(w
                    c)) return 0xFFFFFFFF; /* Wrong surrogate? */
  3137                        ;		uc = uc << 16 | wc;
  3138                        ;	}
  3139                        ;
  3140                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 input *
                    /
  3141                        ;	BYTE b;
  3142                        ;	int nf;
  3143                        ;
  3144                        ;	uc = (BYTE)*p++; /* Get an encoding unit */
  3145             00000000   uc_1	set	0
  3146             00000004   p_1	set	4
  3147             00000008   b_1	set	8
  3148             00000009   nf_1	set	9
  3149                        	.sym	uc,0,18,1,32
  3150                        	.sym	p,4,142,1,32
  3151                        	.sym	b,8,14,1,8
  3152                        	.sym	nf,9,5,1,16
  3153                        	.sym	str,4,1166,6,32
  3154 08:0319: A7 1F        	lda	[<L65+str_0]
  3155 08:031B: 85 15        	sta	<L66+p_1
  3156 08:031D: A0 02 00     	ldy	#$2
  3157 08:0320: B7 1F        	lda	[<L65+str_0],Y
  3158 08:0322: 85 17        	sta	<L66+p_1+2
  3159                        	.line	794
  3160 08:0324: A7 15        	lda	[<L66+p_1]
  3161 08:0326: 29 FF 00     	and	#$ff
  Sat Jul 10 2021  1:15                                                Page 68


  3162 08:0329: 85 11        	sta	<L66+uc_1
  3163 08:032B: 64 13        	stz	<L66+uc_1+2
  3164 08:032D: E6 15        	inc	<L66+p_1
  3165 08:032F: D0 02        	bne	L68
  3166 08:0331: E6 17        	inc	<L66+p_1+2
  3167                        L68:
  3168                        ;	if (uc & 0x80)
  3169                        	.line	795
  3170                        ;	{ /* Multiple byte code? */
  3171 08:0333: A5 11        	lda	<L66+uc_1
  3172 08:0335: 29 80 00     	and	#<$80
  3173 08:0338: D0 03        	bne	L69
  3174 08:033A: 82 99 01     	brl	L10015
  3175                        L69:
  3176                        	.line	796
  3177                        ;		if ((uc & 0xE0) == 0xC0)
  3178                        	.line	797
  3179                        ;		{ /* 2-byte sequence? */
  3180 08:033D: A5 11        	lda	<L66+uc_1
  3181 08:033F: 29 E0 00     	and	#<$e0
  3182 08:0342: 85 01        	sta	<R0
  3183 08:0344: 64 03        	stz	<R0+2
  3184 08:0346: A5 01        	lda	<R0
  3185 08:0348: C9 C0 00     	cmp	#<$c0
  3186 08:034B: D0 05        	bne	L70
  3187 08:034D: A5 03        	lda	<R0+2
  3188 08:034F: C9 00 00     	cmp	#^$c0
  3189                        L70:
  3190 08:0352: F0 03        	beq	L71
  3191 08:0354: 82 11 00     	brl	L10016
  3192                        L71:
  3193                        	.line	798
  3194                        ;			uc &= 0x1F; nf = 1;
  3195                        	.line	799
  3196 08:0357: A5 11        	lda	<L66+uc_1
  3197 08:0359: 29 1F 00     	and	#<$1f
  3198 08:035C: 85 11        	sta	<L66+uc_1
  3199 08:035E: 64 13        	stz	<L66+uc_1+2
  3200                        	.line	799
  3201 08:0360: A9 01 00     	lda	#$1
  3202 08:0363: 85 1A        	sta	<L66+nf_1
  3203                        ;		}
  3204                        	.line	800
  3205                        ;		else
  3206 08:0365: 82 6F 00     	brl	L10017
  3207                        L10016:
  3208                        ;		{
  3209                        	.line	802
  3210                        ;			if ((uc & 0xF0) == 0xE0)
  3211                        	.line	803
  3212                        ;			{ /* 3-byte sequence? */
  3213 08:0368: A5 11        	lda	<L66+uc_1
  3214 08:036A: 29 F0 00     	and	#<$f0
  3215 08:036D: 85 01        	sta	<R0
  3216 08:036F: 64 03        	stz	<R0+2
  3217 08:0371: A5 01        	lda	<R0
  3218 08:0373: C9 E0 00     	cmp	#<$e0
  3219 08:0376: D0 05        	bne	L72
  Sat Jul 10 2021  1:15                                                Page 69


  3220 08:0378: A5 03        	lda	<R0+2
  3221 08:037A: C9 00 00     	cmp	#^$e0
  3222                        L72:
  3223 08:037D: F0 03        	beq	L73
  3224 08:037F: 82 11 00     	brl	L10018
  3225                        L73:
  3226                        	.line	804
  3227                        ;				uc &= 0x0F; nf = 2;
  3228                        	.line	805
  3229 08:0382: A5 11        	lda	<L66+uc_1
  3230 08:0384: 29 0F 00     	and	#<$f
  3231 08:0387: 85 11        	sta	<L66+uc_1
  3232 08:0389: 64 13        	stz	<L66+uc_1+2
  3233                        	.line	805
  3234 08:038B: A9 02 00     	lda	#$2
  3235 08:038E: 85 1A        	sta	<L66+nf_1
  3236                        ;			}
  3237                        	.line	806
  3238                        ;			else
  3239 08:0390: 82 44 00     	brl	L10019
  3240                        L10018:
  3241                        ;			{
  3242                        	.line	808
  3243                        ;				if ((uc & 0xF8) == 0xF0)
  3244                        	.line	809
  3245                        ;				{ /* 4-byte sequence? */
  3246 08:0393: A5 11        	lda	<L66+uc_1
  3247 08:0395: 29 F8 00     	and	#<$f8
  3248 08:0398: 85 01        	sta	<R0
  3249 08:039A: 64 03        	stz	<R0+2
  3250 08:039C: A5 01        	lda	<R0
  3251 08:039E: C9 F0 00     	cmp	#<$f0
  3252 08:03A1: D0 05        	bne	L74
  3253 08:03A3: A5 03        	lda	<R0+2
  3254 08:03A5: C9 00 00     	cmp	#^$f0
  3255                        L74:
  3256 08:03A8: F0 03        	beq	L75
  3257 08:03AA: 82 11 00     	brl	L10020
  3258                        L75:
  3259                        	.line	810
  3260                        ;					uc &= 0x07; nf =
                     3;
  3261                        	.line	811
  3262 08:03AD: A5 11        	lda	<L66+uc_1
  3263 08:03AF: 29 07 00     	and	#<$7
  3264 08:03B2: 85 11        	sta	<L66+uc_1
  3265 08:03B4: 64 13        	stz	<L66+uc_1+2
  3266                        	.line	811
  3267 08:03B6: A9 03 00     	lda	#$3
  3268 08:03B9: 85 1A        	sta	<L66+nf_1
  3269                        ;				}
  3270                        	.line	812
  3271                        ;				else
  3272 08:03BB: 82 19 00     	brl	L10021
  3273                        L10020:
  3274                        ;				{ /* Wrong sequence */
  3275                        	.line	814
  3276                        ;					return 0xFFFFFFF
  Sat Jul 10 2021  1:15                                                Page 70


                    F;
  3277                        	.line	815
  3278 08:03BE: A9 FF FF     	lda	#$ffff
  3279 08:03C1: AA           	tax
  3280 08:03C2: A9 FF FF     	lda	#$ffff
  3281                        L76:
  3282 08:03C5: A8           	tay
  3283 08:03C6: A5 1D        	lda	<L65+2
  3284 08:03C8: 85 21        	sta	<L65+2+4
  3285 08:03CA: A5 1C        	lda	<L65+1
  3286 08:03CC: 85 20        	sta	<L65+1+4
  3287 08:03CE: 2B           	pld
  3288 08:03CF: 3B           	tsc
  3289 08:03D0: 18           	clc
  3290 08:03D1: 69 1F 00     	adc	#L65+4
  3291 08:03D4: 1B           	tcs
  3292 08:03D5: 98           	tya
  3293 08:03D6: 6B           	rtl
  3294                        ;				}
  3295                        	.line	816
  3296                        L10021:
  3297                        ;			}
  3298                        	.line	817
  3299                        L10019:
  3300                        ;		}
  3301                        	.line	818
  3302                        L10017:
  3303                        ;		do
  3304                        	.line	819
  3305                        L10024:
  3306                        ;		{ /* Get trailing bytes */
  3307                        	.line	820
  3308                        ;			b = (BYTE)*p++;
  3309                        	.line	821
  3310 08:03D7: E2 20        	sep	#$20
  3311                        	longa	off
  3312 08:03D9: A7 15        	lda	[<L66+p_1]
  3313 08:03DB: 85 19        	sta	<L66+b_1
  3314 08:03DD: C2 20        	rep	#$20
  3315                        	longa	on
  3316 08:03DF: E6 15        	inc	<L66+p_1
  3317 08:03E1: D0 02        	bne	L77
  3318 08:03E3: E6 17        	inc	<L66+p_1+2
  3319                        L77:
  3320                        ;			if ((b & 0xC0) != 0x80) return 0
                    xFFFFFFFF; /* Wrong sequence? */
  3321                        	.line	822
  3322 08:03E5: A5 19        	lda	<L66+b_1
  3323 08:03E7: 29 C0 00     	and	#<$c0
  3324 08:03EA: 85 01        	sta	<R0
  3325 08:03EC: A5 01        	lda	<R0
  3326 08:03EE: C9 80 00     	cmp	#<$80
  3327 08:03F1: D0 03        	bne	L78
  3328 08:03F3: 82 0A 00     	brl	L10025
  3329                        L78:
  3330                        	.line	822
  3331 08:03F6: A9 FF FF     	lda	#$ffff
  3332 08:03F9: AA           	tax
  Sat Jul 10 2021  1:15                                                Page 71


  3333 08:03FA: A9 FF FF     	lda	#$ffff
  3334 08:03FD: 82 C5 FF     	brl	L76
  3335                        ;			uc = uc << 6 | (b & 0x3F);
  3336                        L10025:
  3337                        	.line	823
  3338 08:0400: D4 13        	pei	<L66+uc_1+2
  3339 08:0402: D4 11        	pei	<L66+uc_1
  3340 08:0404: A9 06 00     	lda	#$6
  3341                        	xref	~~~lasl
  3342 08:0407: 22 xx xx xx  	jsl	~~~lasl
  3343 08:040B: 85 01        	sta	<R0
  3344 08:040D: 86 03        	stx	<R0+2
  3345 08:040F: A5 19        	lda	<L66+b_1
  3346 08:0411: 29 3F 00     	and	#<$3f
  3347 08:0414: 85 05        	sta	<R1
  3348 08:0416: A0 00 00     	ldy	#$0
  3349 08:0419: A5 05        	lda	<R1
  3350 08:041B: 10 01        	bpl	L79
  3351 08:041D: 88           	dey
  3352                        L79:
  3353 08:041E: 85 05        	sta	<R1
  3354 08:0420: 84 07        	sty	<R1+2
  3355 08:0422: A5 05        	lda	<R1
  3356 08:0424: 05 01        	ora	<R0
  3357 08:0426: 85 11        	sta	<L66+uc_1
  3358 08:0428: A5 07        	lda	<R1+2
  3359 08:042A: 05 03        	ora	<R0+2
  3360 08:042C: 85 13        	sta	<L66+uc_1+2
  3361                        ;		}while (--nf != 0);
  3362                        	.line	824
  3363                        L10022:
  3364 08:042E: C6 1A        	dec	<L66+nf_1
  3365 08:0430: A5 1A        	lda	<L66+nf_1
  3366 08:0432: F0 03        	beq	L80
  3367 08:0434: 82 A0 FF     	brl	L10024
  3368                        L80:
  3369                        L10023:
  3370                        ;		if (uc < 0x80 || IsSurrogate(uc) || uc >
                    = 0x110000) return 0xFFFFFFFF; /* Wrong code? */
  3371                        	.line	825
  3372 08:0437: A5 11        	lda	<L66+uc_1
  3373 08:0439: C9 80 00     	cmp	#<$80
  3374 08:043C: A5 13        	lda	<L66+uc_1+2
  3375 08:043E: E9 00 00     	sbc	#^$80
  3376 08:0441: B0 03        	bcs	L82
  3377 08:0443: 82 2D 00     	brl	L81
  3378                        L82:
  3379 08:0446: A5 11        	lda	<L66+uc_1
  3380 08:0448: C9 00 D8     	cmp	#<$d800
  3381 08:044B: A5 13        	lda	<L66+uc_1+2
  3382 08:044D: E9 00 00     	sbc	#^$d800
  3383 08:0450: B0 03        	bcs	L84
  3384 08:0452: 82 0F 00     	brl	L83
  3385                        L84:
  3386 08:0455: A9 FF DF     	lda	#$dfff
  3387 08:0458: C5 11        	cmp	<L66+uc_1
  3388 08:045A: A9 00 00     	lda	#$0
  3389 08:045D: E5 13        	sbc	<L66+uc_1+2
  Sat Jul 10 2021  1:15                                                Page 72


  3390 08:045F: 90 03        	bcc	L85
  3391 08:0461: 82 0F 00     	brl	L81
  3392                        L85:
  3393                        L83:
  3394 08:0464: A5 11        	lda	<L66+uc_1
  3395 08:0466: C9 00 00     	cmp	#<$110000
  3396 08:0469: A5 13        	lda	<L66+uc_1+2
  3397 08:046B: E9 11 00     	sbc	#^$110000
  3398 08:046E: B0 03        	bcs	L86
  3399 08:0470: 82 0A 00     	brl	L10026
  3400                        L86:
  3401                        L81:
  3402                        	.line	825
  3403 08:0473: A9 FF FF     	lda	#$ffff
  3404 08:0476: AA           	tax
  3405 08:0477: A9 FF FF     	lda	#$ffff
  3406 08:047A: 82 48 FF     	brl	L76
  3407                        ;		if (uc >= 0x010000) uc = 0xD800DC00 | ((
                    uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF); /* Make a su
                    rrogate pair if needed */
  3408                        L10026:
  3409                        	.line	826
  3410 08:047D: A5 11        	lda	<L66+uc_1
  3411 08:047F: C9 00 00     	cmp	#<$10000
  3412 08:0482: A5 13        	lda	<L66+uc_1+2
  3413 08:0484: E9 01 00     	sbc	#^$10000
  3414 08:0487: B0 03        	bcs	L87
  3415 08:0489: 82 4A 00     	brl	L10027
  3416                        L87:
  3417                        	.line	826
  3418 08:048C: 18           	clc
  3419 08:048D: A9 00 00     	lda	#$0
  3420 08:0490: 65 11        	adc	<L66+uc_1
  3421 08:0492: 85 05        	sta	<R1
  3422 08:0494: A9 FF FF     	lda	#$ffff
  3423 08:0497: 65 13        	adc	<L66+uc_1+2
  3424 08:0499: 85 07        	sta	<R1+2
  3425 08:049B: D4 07        	pei	<R1+2
  3426 08:049D: D4 05        	pei	<R1
  3427 08:049F: A9 06 00     	lda	#$6
  3428                        	xref	~~~lasl
  3429 08:04A2: 22 xx xx xx  	jsl	~~~lasl
  3430 08:04A6: 85 01        	sta	<R0
  3431 08:04A8: 86 03        	stx	<R0+2
  3432 08:04AA: 64 09        	stz	<R2
  3433 08:04AC: A5 03        	lda	<R0+2
  3434 08:04AE: 29 FF 03     	and	#^$3ff0000
  3435 08:04B1: 85 0B        	sta	<R2+2
  3436 08:04B3: A5 11        	lda	<L66+uc_1
  3437 08:04B5: 29 FF 03     	and	#<$3ff
  3438 08:04B8: 85 01        	sta	<R0
  3439 08:04BA: 64 03        	stz	<R0+2
  3440 08:04BC: A5 01        	lda	<R0
  3441 08:04BE: 05 09        	ora	<R2
  3442 08:04C0: 85 0D        	sta	<R3
  3443 08:04C2: A5 03        	lda	<R0+2
  3444 08:04C4: 05 0B        	ora	<R2+2
  3445 08:04C6: 85 0F        	sta	<R3+2
  Sat Jul 10 2021  1:15                                                Page 73


  3446 08:04C8: A5 0D        	lda	<R3
  3447 08:04CA: 09 00 DC     	ora	#<$d800dc00
  3448 08:04CD: 85 11        	sta	<L66+uc_1
  3449 08:04CF: A5 0F        	lda	<R3+2
  3450 08:04D1: 09 00 D8     	ora	#^$d800dc00
  3451 08:04D4: 85 13        	sta	<L66+uc_1+2
  3452                        ;	}
  3453                        L10027:
  3454                        	.line	827
  3455                        ;
  3456                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 input 
                    */
  3457                        ;	uc = (TCHAR)*p++; /* Get a unit */
  3458                        ;	if (uc >= 0x110000 || IsSurrogate(uc)) return 0x
                    FFFFFFFF; /* Wrong code? */
  3459                        ;	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x1
                    0000) << 6 & 0x3FF0000) | (uc & 0x3FF); /* Make a surrogate 
                    pair if needed */
  3460                        ;
  3461                        ;#else		/* ANSI/OEM input */
  3462                        ;	BYTE b;
  3463                        ;	WCHAR wc;
  3464                        ;
  3465                        ;	wc = (BYTE)*p++; /* Get a byte */
  3466                        ;	if (dbc_1st((BYTE)wc))
  3467                        ;	{ /* Is it a DBC 1st byte? */
  3468                        ;		b = (BYTE)*p++; /* Get 2nd byte */
  3469                        ;		if (!dbc_2nd(b)) return 0xFFFFFFFF; /* I
                    nvalid code? */
  3470                        ;		wc = (wc << 8) + b; /* Make a DBC */
  3471                        ;	}
  3472                        ;	if (wc != 0)
  3473                        ;	{
  3474                        ;		wc = ff_oem2uni(wc, CODEPAGE); /* ANSI/O
                    EM ==> Unicode */
  3475                        ;		if (wc == 0) return 0xFFFFFFFF; /* Inval
                    id code? */
  3476                        ;	}
  3477                        ;	uc = wc;
  3478                        ;
  3479                        ;#endif
  3480                        ;	*str = p; /* Next read pointer */
  3481                        L10015:
  3482                        	.line	853
  3483 08:04D6: A5 15        	lda	<L66+p_1
  3484 08:04D8: 87 1F        	sta	[<L65+str_0]
  3485 08:04DA: A5 17        	lda	<L66+p_1+2
  3486 08:04DC: A0 02 00     	ldy	#$2
  3487 08:04DF: 97 1F        	sta	[<L65+str_0],Y
  3488                        ;	return uc;
  3489                        	.line	854
  3490 08:04E1: A6 13        	ldx	<L66+uc_1+2
  3491 08:04E3: A5 11        	lda	<L66+uc_1
  3492 08:04E5: 82 DD FE     	brl	L76
  3493                        ;}
  3494                        	.line	855
  3495                        	.endblock	855
  3496             0000001B   L65	equ	27
  Sat Jul 10 2021  1:15                                                Page 74


  3497             00000011   L66	equ	17
  3498 08:04E8:              	ends
  3499                        	efunc
  3500                        	.endfunc	855,17,27
  3501                        	.line	855
  3502                        ;
  3503                        ;/* Output a TCHAR string in defined API encoding 
                    */
  3504                        ;static BYTE put_utf ( /* Returns number of encodi
                    ng units written (0:buffer overflow or wrong encoding) */
  3505                        ;		DWORD chr, /* UTF-16 encoded character (
                    Surrogate pair if >=0x10000) */
  3506                        ;		TCHAR* buf, /* Output buffer */
  3507                        ;		UINT szb /* Size of the buffer */
  3508                        ;)
  3509                        ;{
  3510                        	.line	858
  3511                        	.line	863
  3512                        	FFDOS
  3513                        	func
  3514                        	.function	863
  3515                        ~~put_utf:
  3516                        	longa	on
  3517                        	longi	on
  3518 08:04E8: 3B           	tsc
  3519 08:04E9: 38           	sec
  3520 08:04EA: E9 0C 00     	sbc	#L88
  3521 08:04ED: 1B           	tcs
  3522 08:04EE: 0B           	phd
  3523 08:04EF: 5B           	tcd
  3524             00000004   chr_0	set	4
  3525             00000008   buf_0	set	8
  3526             0000000C   szb_0	set	12
  3527                        	.block	863
  3528                        ;#if FF_LFN_UNICODE == 1	/* UTF-16 output */
  3529                        ;	WCHAR hs, wc;
  3530                        ;
  3531                        ;	hs = (WCHAR)(chr >> 16);
  3532                        ;	wc = (WCHAR)chr;
  3533                        ;	if (hs == 0)
  3534                        ;	{ /* Single encoding unit? */
  3535                        ;		if (szb < 1 || IsSurrogate(wc)) return 0
                    ; /* Buffer overflow or wrong code? */
  3536                        ;		*buf = wc;
  3537                        ;		return 1;
  3538                        ;	}
  3539                        ;	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogate
                    L(wc)) return 0; /* Buffer overflow or wrong surrogate? */
  3540                        ;	*buf++ = hs;
  3541                        ;	*buf++ = wc;
  3542                        ;	return 2;
  3543                        ;
  3544                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 output 
                    */
  3545                        ;	DWORD hc;
  3546                        ;
  3547                        ;	if (chr < 0x80)
  3548             00000000   hc_1	set	0
  Sat Jul 10 2021  1:15                                                Page 75


  3549                        	.sym	hc,0,18,1,32
  3550                        	.sym	chr,4,18,6,32
  3551                        	.sym	buf,8,142,6,32
  3552                        	.sym	szb,12,16,6,16
  3553                        	.line	883
  3554                        ;	{ /* Single byte code? */
  3555 08:04F0: A5 10        	lda	<L88+chr_0
  3556 08:04F2: C9 80 00     	cmp	#<$80
  3557 08:04F5: A5 12        	lda	<L88+chr_0+2
  3558 08:04F7: E9 00 00     	sbc	#^$80
  3559 08:04FA: 90 03        	bcc	L91
  3560 08:04FC: 82 2D 00     	brl	L10028
  3561                        L91:
  3562                        	.line	884
  3563                        ;		if (szb < 1) return 0; /* Buffer overflo
                    w? */
  3564                        	.line	885
  3565 08:04FF: A5 18        	lda	<L88+szb_0
  3566 08:0501: C9 01 00     	cmp	#<$1
  3567 08:0504: 90 03        	bcc	L92
  3568 08:0506: 82 15 00     	brl	L10029
  3569                        L92:
  3570                        	.line	885
  3571 08:0509: A9 00 00     	lda	#$0
  3572                        L93:
  3573 08:050C: A8           	tay
  3574 08:050D: A5 0E        	lda	<L88+2
  3575 08:050F: 85 18        	sta	<L88+2+10
  3576 08:0511: A5 0D        	lda	<L88+1
  3577 08:0513: 85 17        	sta	<L88+1+10
  3578 08:0515: 2B           	pld
  3579 08:0516: 3B           	tsc
  3580 08:0517: 18           	clc
  3581 08:0518: 69 16 00     	adc	#L88+10
  3582 08:051B: 1B           	tcs
  3583 08:051C: 98           	tya
  3584 08:051D: 6B           	rtl
  3585                        ;		*buf = (TCHAR)chr;
  3586                        L10029:
  3587                        	.line	886
  3588 08:051E: E2 20        	sep	#$20
  3589                        	longa	off
  3590 08:0520: A5 10        	lda	<L88+chr_0
  3591 08:0522: 87 14        	sta	[<L88+buf_0]
  3592 08:0524: C2 20        	rep	#$20
  3593                        	longa	on
  3594                        ;		return 1;
  3595                        	.line	887
  3596 08:0526: A9 01 00     	lda	#$1
  3597 08:0529: 82 E0 FF     	brl	L93
  3598                        ;	}
  3599                        	.line	888
  3600                        ;	if (chr < 0x800)
  3601                        L10028:
  3602                        	.line	889
  3603                        ;	{ /* 2-byte sequence? */
  3604 08:052C: A5 10        	lda	<L88+chr_0
  3605 08:052E: C9 00 08     	cmp	#<$800
  Sat Jul 10 2021  1:15                                                Page 76


  3606 08:0531: A5 12        	lda	<L88+chr_0+2
  3607 08:0533: E9 00 00     	sbc	#^$800
  3608 08:0536: 90 03        	bcc	L94
  3609 08:0538: 82 69 00     	brl	L10030
  3610                        L94:
  3611                        	.line	890
  3612                        ;		if (szb < 2) return 0; /* Buffer overflo
                    w? */
  3613                        	.line	891
  3614 08:053B: A5 18        	lda	<L88+szb_0
  3615 08:053D: C9 02 00     	cmp	#<$2
  3616 08:0540: 90 03        	bcc	L95
  3617 08:0542: 82 06 00     	brl	L10031
  3618                        L95:
  3619                        	.line	891
  3620 08:0545: A9 00 00     	lda	#$0
  3621 08:0548: 82 C1 FF     	brl	L93
  3622                        ;		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F
                    ));
  3623                        L10031:
  3624                        	.line	892
  3625 08:054B: D4 12        	pei	<L88+chr_0+2
  3626 08:054D: D4 10        	pei	<L88+chr_0
  3627 08:054F: A9 06 00     	lda	#$6
  3628                        	xref	~~~llsr
  3629 08:0552: 22 xx xx xx  	jsl	~~~llsr
  3630 08:0556: 85 01        	sta	<R0
  3631 08:0558: 86 03        	stx	<R0+2
  3632 08:055A: A5 01        	lda	<R0
  3633 08:055C: 29 1F 00     	and	#<$1f
  3634 08:055F: 85 05        	sta	<R1
  3635 08:0561: 64 07        	stz	<R1+2
  3636 08:0563: A5 05        	lda	<R1
  3637 08:0565: 09 C0 00     	ora	#<$c0
  3638 08:0568: 85 01        	sta	<R0
  3639 08:056A: A5 07        	lda	<R1+2
  3640 08:056C: 85 03        	sta	<R0+2
  3641 08:056E: E2 20        	sep	#$20
  3642                        	longa	off
  3643 08:0570: A5 01        	lda	<R0
  3644 08:0572: 87 14        	sta	[<L88+buf_0]
  3645 08:0574: C2 20        	rep	#$20
  3646                        	longa	on
  3647 08:0576: E6 14        	inc	<L88+buf_0
  3648 08:0578: D0 02        	bne	L96
  3649 08:057A: E6 16        	inc	<L88+buf_0+2
  3650                        L96:
  3651                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F
                    ));
  3652                        	.line	893
  3653 08:057C: A5 10        	lda	<L88+chr_0
  3654 08:057E: 29 3F 00     	and	#<$3f
  3655 08:0581: 85 01        	sta	<R0
  3656 08:0583: 64 03        	stz	<R0+2
  3657 08:0585: A5 01        	lda	<R0
  3658 08:0587: 09 80 00     	ora	#<$80
  3659 08:058A: 85 05        	sta	<R1
  3660 08:058C: A5 03        	lda	<R0+2
  Sat Jul 10 2021  1:15                                                Page 77


  3661 08:058E: 85 07        	sta	<R1+2
  3662 08:0590: E2 20        	sep	#$20
  3663                        	longa	off
  3664 08:0592: A5 05        	lda	<R1
  3665 08:0594: 87 14        	sta	[<L88+buf_0]
  3666 08:0596: C2 20        	rep	#$20
  3667                        	longa	on
  3668 08:0598: E6 14        	inc	<L88+buf_0
  3669 08:059A: D0 02        	bne	L97
  3670 08:059C: E6 16        	inc	<L88+buf_0+2
  3671                        L97:
  3672                        ;		return 2;
  3673                        	.line	894
  3674 08:059E: A9 02 00     	lda	#$2
  3675 08:05A1: 82 68 FF     	brl	L93
  3676                        ;	}
  3677                        	.line	895
  3678                        ;	if (chr < 0x10000)
  3679                        L10030:
  3680                        	.line	896
  3681                        ;	{ /* 3-byte sequence? */
  3682 08:05A4: A5 10        	lda	<L88+chr_0
  3683 08:05A6: C9 00 00     	cmp	#<$10000
  3684 08:05A9: A5 12        	lda	<L88+chr_0+2
  3685 08:05AB: E9 01 00     	sbc	#^$10000
  3686 08:05AE: 90 03        	bcc	L98
  3687 08:05B0: 82 B8 00     	brl	L10032
  3688                        L98:
  3689                        	.line	897
  3690                        ;		if (szb < 3 || IsSurrogate(chr)) return 
                    0; /* Buffer overflow or wrong code? */
  3691                        	.line	898
  3692 08:05B3: A5 18        	lda	<L88+szb_0
  3693 08:05B5: C9 03 00     	cmp	#<$3
  3694 08:05B8: B0 03        	bcs	L100
  3695 08:05BA: 82 1E 00     	brl	L99
  3696                        L100:
  3697 08:05BD: A5 10        	lda	<L88+chr_0
  3698 08:05BF: C9 00 D8     	cmp	#<$d800
  3699 08:05C2: A5 12        	lda	<L88+chr_0+2
  3700 08:05C4: E9 00 00     	sbc	#^$d800
  3701 08:05C7: B0 03        	bcs	L101
  3702 08:05C9: 82 15 00     	brl	L10033
  3703                        L101:
  3704 08:05CC: A9 FF DF     	lda	#$dfff
  3705 08:05CF: C5 10        	cmp	<L88+chr_0
  3706 08:05D1: A9 00 00     	lda	#$0
  3707 08:05D4: E5 12        	sbc	<L88+chr_0+2
  3708 08:05D6: B0 03        	bcs	L102
  3709 08:05D8: 82 06 00     	brl	L10033
  3710                        L102:
  3711                        L99:
  3712                        	.line	898
  3713 08:05DB: A9 00 00     	lda	#$0
  3714 08:05DE: 82 2B FF     	brl	L93
  3715                        ;		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0
                    F));
  3716                        L10033:
  Sat Jul 10 2021  1:15                                                Page 78


  3717                        	.line	899
  3718 08:05E1: D4 12        	pei	<L88+chr_0+2
  3719 08:05E3: D4 10        	pei	<L88+chr_0
  3720 08:05E5: A9 0C 00     	lda	#$c
  3721                        	xref	~~~llsr
  3722 08:05E8: 22 xx xx xx  	jsl	~~~llsr
  3723 08:05EC: 85 01        	sta	<R0
  3724 08:05EE: 86 03        	stx	<R0+2
  3725 08:05F0: A5 01        	lda	<R0
  3726 08:05F2: 29 0F 00     	and	#<$f
  3727 08:05F5: 85 05        	sta	<R1
  3728 08:05F7: 64 07        	stz	<R1+2
  3729 08:05F9: A5 05        	lda	<R1
  3730 08:05FB: 09 E0 00     	ora	#<$e0
  3731 08:05FE: 85 01        	sta	<R0
  3732 08:0600: A5 07        	lda	<R1+2
  3733 08:0602: 85 03        	sta	<R0+2
  3734 08:0604: E2 20        	sep	#$20
  3735                        	longa	off
  3736 08:0606: A5 01        	lda	<R0
  3737 08:0608: 87 14        	sta	[<L88+buf_0]
  3738 08:060A: C2 20        	rep	#$20
  3739                        	longa	on
  3740 08:060C: E6 14        	inc	<L88+buf_0
  3741 08:060E: D0 02        	bne	L103
  3742 08:0610: E6 16        	inc	<L88+buf_0+2
  3743                        L103:
  3744                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F
                    ));
  3745                        	.line	900
  3746 08:0612: D4 12        	pei	<L88+chr_0+2
  3747 08:0614: D4 10        	pei	<L88+chr_0
  3748 08:0616: A9 06 00     	lda	#$6
  3749                        	xref	~~~llsr
  3750 08:0619: 22 xx xx xx  	jsl	~~~llsr
  3751 08:061D: 85 01        	sta	<R0
  3752 08:061F: 86 03        	stx	<R0+2
  3753 08:0621: A5 01        	lda	<R0
  3754 08:0623: 29 3F 00     	and	#<$3f
  3755 08:0626: 85 05        	sta	<R1
  3756 08:0628: 64 07        	stz	<R1+2
  3757 08:062A: A5 05        	lda	<R1
  3758 08:062C: 09 80 00     	ora	#<$80
  3759 08:062F: 85 01        	sta	<R0
  3760 08:0631: A5 07        	lda	<R1+2
  3761 08:0633: 85 03        	sta	<R0+2
  3762 08:0635: E2 20        	sep	#$20
  3763                        	longa	off
  3764 08:0637: A5 01        	lda	<R0
  3765 08:0639: 87 14        	sta	[<L88+buf_0]
  3766 08:063B: C2 20        	rep	#$20
  3767                        	longa	on
  3768 08:063D: E6 14        	inc	<L88+buf_0
  3769 08:063F: D0 02        	bne	L104
  3770 08:0641: E6 16        	inc	<L88+buf_0+2
  3771                        L104:
  3772                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F
                    ));
  Sat Jul 10 2021  1:15                                                Page 79


  3773                        	.line	901
  3774 08:0643: A5 10        	lda	<L88+chr_0
  3775 08:0645: 29 3F 00     	and	#<$3f
  3776 08:0648: 85 01        	sta	<R0
  3777 08:064A: 64 03        	stz	<R0+2
  3778 08:064C: A5 01        	lda	<R0
  3779 08:064E: 09 80 00     	ora	#<$80
  3780 08:0651: 85 05        	sta	<R1
  3781 08:0653: A5 03        	lda	<R0+2
  3782 08:0655: 85 07        	sta	<R1+2
  3783 08:0657: E2 20        	sep	#$20
  3784                        	longa	off
  3785 08:0659: A5 05        	lda	<R1
  3786 08:065B: 87 14        	sta	[<L88+buf_0]
  3787 08:065D: C2 20        	rep	#$20
  3788                        	longa	on
  3789 08:065F: E6 14        	inc	<L88+buf_0
  3790 08:0661: D0 02        	bne	L105
  3791 08:0663: E6 16        	inc	<L88+buf_0+2
  3792                        L105:
  3793                        ;		return 3;
  3794                        	.line	902
  3795 08:0665: A9 03 00     	lda	#$3
  3796 08:0668: 82 A1 FE     	brl	L93
  3797                        ;	}
  3798                        	.line	903
  3799                        ;	/* 4-byte sequence */
  3800                        ;	if (szb < 4) return 0; /* Buffer overflow? */
  3801                        L10032:
  3802                        	.line	905
  3803 08:066B: A5 18        	lda	<L88+szb_0
  3804 08:066D: C9 04 00     	cmp	#<$4
  3805 08:0670: 90 03        	bcc	L106
  3806 08:0672: 82 06 00     	brl	L10034
  3807                        L106:
  3808                        	.line	905
  3809 08:0675: A9 00 00     	lda	#$0
  3810 08:0678: 82 91 FE     	brl	L93
  3811                        ;	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6; /* 
                    Get high 10 bits */
  3812                        L10034:
  3813                        	.line	906
  3814 08:067B: 64 01        	stz	<R0
  3815 08:067D: A5 12        	lda	<L88+chr_0+2
  3816 08:067F: 85 03        	sta	<R0+2
  3817 08:0681: 18           	clc
  3818 08:0682: A9 00 00     	lda	#$0
  3819 08:0685: 65 01        	adc	<R0
  3820 08:0687: 85 05        	sta	<R1
  3821 08:0689: A9 00 28     	lda	#$2800
  3822 08:068C: 65 03        	adc	<R0+2
  3823 08:068E: 85 07        	sta	<R1+2
  3824 08:0690: D4 07        	pei	<R1+2
  3825 08:0692: D4 05        	pei	<R1
  3826 08:0694: A9 06 00     	lda	#$6
  3827                        	xref	~~~llsr
  3828 08:0697: 22 xx xx xx  	jsl	~~~llsr
  3829 08:069B: 85 09        	sta	<L89+hc_1
  Sat Jul 10 2021  1:15                                                Page 80


  3830 08:069D: 86 0B        	stx	<L89+hc_1+2
  3831                        ;	chr = (chr & 0xFFFF) - 0xDC00; /* Get low 10 bit
                    s */
  3832                        	.line	907
  3833 08:069F: A5 10        	lda	<L88+chr_0
  3834 08:06A1: 85 01        	sta	<R0
  3835 08:06A3: 64 03        	stz	<R0+2
  3836 08:06A5: 18           	clc
  3837 08:06A6: A9 00 24     	lda	#$2400
  3838 08:06A9: 65 01        	adc	<R0
  3839 08:06AB: 85 10        	sta	<L88+chr_0
  3840 08:06AD: A9 FF FF     	lda	#$ffff
  3841 08:06B0: 65 03        	adc	<R0+2
  3842 08:06B2: 85 12        	sta	<L88+chr_0+2
  3843                        ;	if (hc >= 0x100000 || chr >= 0x400) return 0; /*
                     Wrong surrogate? */
  3844                        	.line	908
  3845 08:06B4: A5 09        	lda	<L89+hc_1
  3846 08:06B6: C9 00 00     	cmp	#<$100000
  3847 08:06B9: A5 0B        	lda	<L89+hc_1+2
  3848 08:06BB: E9 10 00     	sbc	#^$100000
  3849 08:06BE: 90 03        	bcc	L108
  3850 08:06C0: 82 0F 00     	brl	L107
  3851                        L108:
  3852 08:06C3: A5 10        	lda	<L88+chr_0
  3853 08:06C5: C9 00 04     	cmp	#<$400
  3854 08:06C8: A5 12        	lda	<L88+chr_0+2
  3855 08:06CA: E9 00 00     	sbc	#^$400
  3856 08:06CD: B0 03        	bcs	L109
  3857 08:06CF: 82 06 00     	brl	L10035
  3858                        L109:
  3859                        L107:
  3860                        	.line	908
  3861 08:06D2: A9 00 00     	lda	#$0
  3862 08:06D5: 82 34 FE     	brl	L93
  3863                        ;	chr = (hc | chr) + 0x10000;
  3864                        L10035:
  3865                        	.line	909
  3866 08:06D8: A5 10        	lda	<L88+chr_0
  3867 08:06DA: 05 09        	ora	<L89+hc_1
  3868 08:06DC: 85 01        	sta	<R0
  3869 08:06DE: A5 12        	lda	<L88+chr_0+2
  3870 08:06E0: 05 0B        	ora	<L89+hc_1+2
  3871 08:06E2: 85 03        	sta	<R0+2
  3872 08:06E4: 18           	clc
  3873 08:06E5: A9 00 00     	lda	#$0
  3874 08:06E8: 65 01        	adc	<R0
  3875 08:06EA: 85 10        	sta	<L88+chr_0
  3876 08:06EC: A9 01 00     	lda	#$1
  3877 08:06EF: 65 03        	adc	<R0+2
  3878 08:06F1: 85 12        	sta	<L88+chr_0+2
  3879                        ;	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
  3880                        	.line	910
  3881 08:06F3: D4 12        	pei	<L88+chr_0+2
  3882 08:06F5: D4 10        	pei	<L88+chr_0
  3883 08:06F7: A9 12 00     	lda	#$12
  3884                        	xref	~~~llsr
  3885 08:06FA: 22 xx xx xx  	jsl	~~~llsr
  Sat Jul 10 2021  1:15                                                Page 81


  3886 08:06FE: 85 01        	sta	<R0
  3887 08:0700: 86 03        	stx	<R0+2
  3888 08:0702: A5 01        	lda	<R0
  3889 08:0704: 29 07 00     	and	#<$7
  3890 08:0707: 85 05        	sta	<R1
  3891 08:0709: 64 07        	stz	<R1+2
  3892 08:070B: A5 05        	lda	<R1
  3893 08:070D: 09 F0 00     	ora	#<$f0
  3894 08:0710: 85 01        	sta	<R0
  3895 08:0712: A5 07        	lda	<R1+2
  3896 08:0714: 85 03        	sta	<R0+2
  3897 08:0716: E2 20        	sep	#$20
  3898                        	longa	off
  3899 08:0718: A5 01        	lda	<R0
  3900 08:071A: 87 14        	sta	[<L88+buf_0]
  3901 08:071C: C2 20        	rep	#$20
  3902                        	longa	on
  3903 08:071E: E6 14        	inc	<L88+buf_0
  3904 08:0720: D0 02        	bne	L110
  3905 08:0722: E6 16        	inc	<L88+buf_0+2
  3906                        L110:
  3907                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
  3908                        	.line	911
  3909 08:0724: D4 12        	pei	<L88+chr_0+2
  3910 08:0726: D4 10        	pei	<L88+chr_0
  3911 08:0728: A9 0C 00     	lda	#$c
  3912                        	xref	~~~llsr
  3913 08:072B: 22 xx xx xx  	jsl	~~~llsr
  3914 08:072F: 85 01        	sta	<R0
  3915 08:0731: 86 03        	stx	<R0+2
  3916 08:0733: A5 01        	lda	<R0
  3917 08:0735: 29 3F 00     	and	#<$3f
  3918 08:0738: 85 05        	sta	<R1
  3919 08:073A: 64 07        	stz	<R1+2
  3920 08:073C: A5 05        	lda	<R1
  3921 08:073E: 09 80 00     	ora	#<$80
  3922 08:0741: 85 01        	sta	<R0
  3923 08:0743: A5 07        	lda	<R1+2
  3924 08:0745: 85 03        	sta	<R0+2
  3925 08:0747: E2 20        	sep	#$20
  3926                        	longa	off
  3927 08:0749: A5 01        	lda	<R0
  3928 08:074B: 87 14        	sta	[<L88+buf_0]
  3929 08:074D: C2 20        	rep	#$20
  3930                        	longa	on
  3931 08:074F: E6 14        	inc	<L88+buf_0
  3932 08:0751: D0 02        	bne	L111
  3933 08:0753: E6 16        	inc	<L88+buf_0+2
  3934                        L111:
  3935                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  3936                        	.line	912
  3937 08:0755: D4 12        	pei	<L88+chr_0+2
  3938 08:0757: D4 10        	pei	<L88+chr_0
  3939 08:0759: A9 06 00     	lda	#$6
  3940                        	xref	~~~llsr
  3941 08:075C: 22 xx xx xx  	jsl	~~~llsr
  3942 08:0760: 85 01        	sta	<R0
  3943 08:0762: 86 03        	stx	<R0+2
  Sat Jul 10 2021  1:15                                                Page 82


  3944 08:0764: A5 01        	lda	<R0
  3945 08:0766: 29 3F 00     	and	#<$3f
  3946 08:0769: 85 05        	sta	<R1
  3947 08:076B: 64 07        	stz	<R1+2
  3948 08:076D: A5 05        	lda	<R1
  3949 08:076F: 09 80 00     	ora	#<$80
  3950 08:0772: 85 01        	sta	<R0
  3951 08:0774: A5 07        	lda	<R1+2
  3952 08:0776: 85 03        	sta	<R0+2
  3953 08:0778: E2 20        	sep	#$20
  3954                        	longa	off
  3955 08:077A: A5 01        	lda	<R0
  3956 08:077C: 87 14        	sta	[<L88+buf_0]
  3957 08:077E: C2 20        	rep	#$20
  3958                        	longa	on
  3959 08:0780: E6 14        	inc	<L88+buf_0
  3960 08:0782: D0 02        	bne	L112
  3961 08:0784: E6 16        	inc	<L88+buf_0+2
  3962                        L112:
  3963                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  3964                        	.line	913
  3965 08:0786: A5 10        	lda	<L88+chr_0
  3966 08:0788: 29 3F 00     	and	#<$3f
  3967 08:078B: 85 01        	sta	<R0
  3968 08:078D: 64 03        	stz	<R0+2
  3969 08:078F: A5 01        	lda	<R0
  3970 08:0791: 09 80 00     	ora	#<$80
  3971 08:0794: 85 05        	sta	<R1
  3972 08:0796: A5 03        	lda	<R0+2
  3973 08:0798: 85 07        	sta	<R1+2
  3974 08:079A: E2 20        	sep	#$20
  3975                        	longa	off
  3976 08:079C: A5 05        	lda	<R1
  3977 08:079E: 87 14        	sta	[<L88+buf_0]
  3978 08:07A0: C2 20        	rep	#$20
  3979                        	longa	on
  3980 08:07A2: E6 14        	inc	<L88+buf_0
  3981 08:07A4: D0 02        	bne	L113
  3982 08:07A6: E6 16        	inc	<L88+buf_0+2
  3983                        L113:
  3984                        ;	return 4;
  3985                        	.line	914
  3986 08:07A8: A9 04 00     	lda	#$4
  3987 08:07AB: 82 5E FD     	brl	L93
  3988                        ;
  3989                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 output
                     */
  3990                        ;	DWORD hc;
  3991                        ;
  3992                        ;	if (szb < 1) return 0; /* Buffer overflow? */
  3993                        ;	if (chr >= 0x10000)
  3994                        ;	{ /* Out of BMP? */
  3995                        ;		hc = ((chr & 0xFFFF0000) - 0xD8000000) >
                    > 6; /* Get high 10 bits */
  3996                        ;		chr = (chr & 0xFFFF) - 0xDC00; /* Get lo
                    w 10 bits */
  3997                        ;		if (hc >= 0x100000 || chr >= 0x400) retu
                    rn 0; /* Wrong surrogate? */
  Sat Jul 10 2021  1:15                                                Page 83


  3998                        ;		chr = (hc | chr) + 0x10000;
  3999                        ;	}
  4000                        ;	*buf++ = (TCHAR)chr;
  4001                        ;	return 1;
  4002                        ;
  4003                        ;#else						
                    /* ANSI/OEM output */
  4004                        ;	WCHAR wc;
  4005                        ;
  4006                        ;	wc = ff_uni2oem(chr, CODEPAGE);
  4007                        ;	if (wc >= 0x100)
  4008                        ;	{ /* Is this a DBC? */
  4009                        ;		if (szb < 2) return 0;
  4010                        ;		*buf++ = (char)(wc >> 8); /* Store DBC 1
                    st byte */
  4011                        ;		*buf++ = (TCHAR)wc; /* Store DBC 2nd byt
                    e */
  4012                        ;		return 2;
  4013                        ;	}
  4014                        ;	if (wc == 0 || szb < 1) return 0; /* Invalid cha
                    r or buffer overflow? */
  4015                        ;	*buf++ = (TCHAR)wc; /* Store the character */
  4016                        ;	return 1;
  4017                        ;#endif
  4018                        ;}
  4019                        	.line	945
  4020                        	.endblock	945
  4021             0000000C   L88	equ	12
  4022             00000009   L89	equ	9
  4023 08:07AE:              	ends
  4024                        	efunc
  4025                        	.endfunc	945,9,12
  4026                        	.line	945
  4027                        ;#endif	/* FF_USE_LFN */
  4028                        ;
  4029                        ;#if FF_FS_REENTRANT
  4030                        ;/*-----------------------------------------------
                    ------------------------*/
  4031                        ;/* Request/Release grant to access the volume    
                                            */
  4032                        ;/*-----------------------------------------------
                    ------------------------*/
  4033                        ;static int lock_fs ( /* 1:Ok, 0:timeout */
  4034                        ;		FATFS* fs /* Filesystem object */
  4035                        ;)
  4036                        ;{
  4037                        ;	return ff_req_grant(fs->sobj);
  4038                        ;}
  4039                        ;
  4040                        ;static void unlock_fs (
  4041                        ;		FATFS* fs, /* Filesystem object */
  4042                        ;		FRESULT res /* Result code to be returne
                    d */
  4043                        ;)
  4044                        ;{
  4045                        ;	if (fs && res != FR_NOT_ENABLED && res != FR_INV
                    ALID_DRIVE && res != FR_TIMEOUT)
  4046                        ;	{
  Sat Jul 10 2021  1:15                                                Page 84


  4047                        ;		ff_rel_grant(fs->sobj);
  4048                        ;	}
  4049                        ;}
  4050                        ;
  4051                        ;#endif
  4052                        ;
  4053                        ;#if FF_FS_LOCK != 0
  4054                        ;/*-----------------------------------------------
                    ------------------------*/
  4055                        ;/* File lock control functions                   
                                            */
  4056                        ;/*-----------------------------------------------
                    ------------------------*/
  4057                        ;
  4058                        ;static FRESULT chk_lock ( /* Check if the file ca
                    n be accessed */
  4059                        ;		DIR* dp, /* Directory object pointing th
                    e file to be checked */
  4060                        ;		int acc /* Desired access type (0:Read m
                    ode open, 1:Write mode open, 2:Delete or rename) */
  4061                        ;)
  4062                        ;{
  4063                        ;	UINT i, be;
  4064                        ;
  4065                        ;	/* Search open object table for the object */
  4066                        ;	be = 0;
  4067                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  4068                        ;	{
  4069                        ;		if (Files[i].fs)
  4070                        ;		{ /* Existing entry */
  4071                        ;			if (Files[i].fs == dp->obj.fs &&
                     /* Check if the object matches with an open object */
  4072                        ;					Files[i].clu == 
                    dp->obj.sclust &&
  4073                        ;					Files[i].ofs == 
                    dp->dptr) break;
  4074                        ;		}
  4075                        ;		else
  4076                        ;		{ /* Blank entry */
  4077                        ;			be = 1;
  4078                        ;		}
  4079                        ;	}
  4080                        ;	if (i == FF_FS_LOCK)
  4081                        ;	{ /* The object has not been opened */
  4082                        ;		return (!be && acc != 2) ? FR_TOO_MANY_O
                    PEN_FILES : FR_OK; /* Is there a blank entry for new object?
                     */
  4083                        ;	}
  4084                        ;
  4085                        ;	/* The object was opened. Reject any open agains
                    t writing file and all write mode open */
  4086                        ;	return (acc != 0 || Files[i].ctr == 0x100) ? FR_
                    LOCKED : FR_OK;
  4087                        ;}
  4088                        ;
  4089                        ;static int enq_lock (void) /* Check if an entry i
                    s available for a new object */
  4090                        ;{
  Sat Jul 10 2021  1:15                                                Page 85


  4091                        ;	UINT i;
  4092                        ;
  4093                        ;	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++);
  4094                        ;	return (i == FF_FS_LOCK) ? 0 : 1;
  4095                        ;}
  4096                        ;
  4097                        ;static UINT inc_lock ( /* Increment object open c
                    ounter and returns its index (0:Internal error) */
  4098                        ;		DIR* dp, /* Directory object pointing th
                    e file to register or increment */
  4099                        ;		int acc /* Desired access (0:Read, 1:Wri
                    te, 2:Delete/Rename) */
  4100                        ;)
  4101                        ;{
  4102                        ;	UINT i;
  4103                        ;
  4104                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  4105                        ;	{ /* Find the object */
  4106                        ;		if (Files[i].fs == dp->obj.fs
  4107                        ;				&& Files[i].clu == dp->o
                    bj.sclust
  4108                        ;				&& Files[i].ofs == dp->d
                    ptr) break;
  4109                        ;	}
  4110                        ;
  4111                        ;	if (i == FF_FS_LOCK)
  4112                        ;	{ /* Not opened. Register it as new. */
  4113                        ;		for (i = 0; i < FF_FS_LOCK && Files[i].f
                    s; i++);
  4114                        ;		if (i == FF_FS_LOCK) return 0; /* No fre
                    e entry to register (int err) */
  4115                        ;		Files[i].fs = dp->obj.fs;
  4116                        ;		Files[i].clu = dp->obj.sclust;
  4117                        ;		Files[i].ofs = dp->dptr;
  4118                        ;		Files[i].ctr = 0;
  4119                        ;	}
  4120                        ;
  4121                        ;	if (acc >= 1 && Files[i].ctr) return 0; /* Acces
                    s violation (int err) */
  4122                        ;
  4123                        ;	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1; /
                    * Set semaphore value */
  4124                        ;
  4125                        ;	return i + 1; /* Index number origin from 1 */
  4126                        ;}
  4127                        ;
  4128                        ;static FRESULT dec_lock ( /* Decrement object ope
                    n counter */
  4129                        ;		UINT i /* Semaphore index (1..) */
  4130                        ;)
  4131                        ;{
  4132                        ;	WORD n;
  4133                        ;	FRESULT res;
  4134                        ;
  4135                        ;	if (--i < FF_FS_LOCK)
  4136                        ;	{ /* Index number origin from 0 */
  4137                        ;		n = Files[i].ctr;
  4138                        ;		if (n == 0x100) n = 0; /* If write mode 
  Sat Jul 10 2021  1:15                                                Page 86


                    open, delete the entry */
  4139                        ;		if (n > 0) n--; /* Decrement read mode o
                    pen count */
  4140                        ;		Files[i].ctr = n;
  4141                        ;		if (n == 0) Files[i].fs = 0; /* Delete t
                    he entry if open count gets zero */
  4142                        ;		res = FR_OK;
  4143                        ;	}
  4144                        ;	else
  4145                        ;	{
  4146                        ;		res = FR_INT_ERR; /* Invalid index nunbe
                    r */
  4147                        ;	}
  4148                        ;	return res;
  4149                        ;}
  4150                        ;
  4151                        ;static void clear_lock ( /* Clear lock entries of
                     the volume */
  4152                        ;		FATFS *fs
  4153                        ;)
  4154                        ;{
  4155                        ;	UINT i;
  4156                        ;
  4157                        ;	for (i = 0; i < FF_FS_LOCK; i++)
  4158                        ;	{
  4159                        ;		if (Files[i].fs == fs) Files[i].fs = 0;
  4160                        ;	}
  4161                        ;}
  4162                        ;
  4163                        ;#endif	/* FF_FS_LOCK != 0 */
  4164                        ;
  4165                        ;/*-----------------------------------------------
                    ------------------------*/
  4166                        ;/* Move/Flush disk access window in the filesyste
                    m object                */
  4167                        ;/*-----------------------------------------------
                    ------------------------*/
  4168                        ;#if !FF_FS_READONLY
  4169                        ;static FRESULT sync_window( /* Returns FR_OK or F
                    R_DISK_ERR */
  4170                        ;FATFS* fs /* Filesystem object */
  4171                        ;)
  4172                        ;{
  4173                        	.line	1088
  4174                        	.line	1091
  4175                        	FFDOS
  4176                        	func
  4177                        	.function	1091
  4178                        ~~sync_window:
  4179                        	longa	on
  4180                        	longi	on
  4181 08:07AE: 3B           	tsc
  4182 08:07AF: 38           	sec
  4183 08:07B0: E9 0A 00     	sbc	#L114
  4184 08:07B3: 1B           	tcs
  4185 08:07B4: 0B           	phd
  4186 08:07B5: 5B           	tcd
  4187             00000004   fs_0	set	4
  Sat Jul 10 2021  1:15                                                Page 87


  4188                        	.block	1091
  4189                        ;	FRESULT res = FR_OK;
  4190                        ;
  4191                        ;	//k_debug_string("sync_window...\r\n");
  4192                        ;
  4193                        ;	if (fs->wflag)
  4194             00000000   res_1	set	0
  4195                        	.sym	res,0,5,1,16
  4196                        	.sym	fs,4,138,6,32,72
  4197 08:07B6: 64 09        	stz	<L115+res_1
  4198                        	.line	1096
  4199                        ;	{ /* Is the disk access window dirty? */
  4200 08:07B8: A0 03 00     	ldy	#$3
  4201 08:07BB: B7 0E        	lda	[<L114+fs_0],Y
  4202 08:07BD: 29 FF 00     	and	#$ff
  4203 08:07C0: D0 03        	bne	L117
  4204 08:07C2: 82 E8 00     	brl	L10036
  4205                        L117:
  4206                        	.line	1097
  4207                        ;		k_debug_long("sync_window:fs->wflag:",fs
                    ->wflag);
  4208                        	.line	1098
  4209 08:07C5: A0 03 00     	ldy	#$3
  4210 08:07C8: B7 0E        	lda	[<L114+fs_0],Y
  4211 08:07CA: 29 FF 00     	and	#$ff
  4212 08:07CD: 85 01        	sta	<R0
  4213 08:07CF: 64 03        	stz	<R0+2
  4214 08:07D1: D4 03        	pei	<R0+2
  4215 08:07D3: D4 01        	pei	<R0
  4216 08:07D5: F4 xx xx     	pea	#^L2
  4217 08:07D8: F4 xx xx     	pea	#<L2
  4218 08:07DB: 22 xx xx xx  	jsl	~~k_debug_long
  4219                        ;		if (disk_write(fs->pdrv, fs->win, fs->wi
                    nsect, 1) == RES_OK)
  4220                        	.line	1099
  4221                        ;		{
  4222 08:07DF: F4 01 00     	pea	#<$1
  4223 08:07E2: A0 31 00     	ldy	#$31
  4224 08:07E5: B7 0E        	lda	[<L114+fs_0],Y
  4225 08:07E7: 48           	pha
  4226 08:07E8: A0 2F 00     	ldy	#$2f
  4227 08:07EB: B7 0E        	lda	[<L114+fs_0],Y
  4228 08:07ED: 48           	pha
  4229 08:07EE: 18           	clc
  4230 08:07EF: A9 33 00     	lda	#$33
  4231 08:07F2: 65 0E        	adc	<L114+fs_0
  4232 08:07F4: 85 01        	sta	<R0
  4233 08:07F6: A9 00 00     	lda	#$0
  4234 08:07F9: 65 10        	adc	<L114+fs_0+2
  4235 08:07FB: 85 03        	sta	<R0+2
  4236 08:07FD: D4 03        	pei	<R0+2
  4237 08:07FF: D4 01        	pei	<R0
  4238 08:0801: A0 01 00     	ldy	#$1
  4239 08:0804: B7 0E        	lda	[<L114+fs_0],Y
  4240 08:0806: 48           	pha
  4241 08:0807: 22 xx xx xx  	jsl	~~disk_write
  4242 08:080B: AA           	tax
  4243 08:080C: F0 03        	beq	L118
  Sat Jul 10 2021  1:15                                                Page 88


  4244 08:080E: 82 97 00     	brl	L10037
  4245                        L118:
  4246                        	.line	1100
  4247                        ;			k_debug_long("sync_window:disk_w
                    rite:",0);
  4248                        	.line	1101
  4249 08:0811: F4 00 00     	pea	#^$0
  4250 08:0814: F4 00 00     	pea	#<$0
  4251 08:0817: F4 xx xx     	pea	#^L2+23
  4252 08:081A: F4 xx xx     	pea	#<L2+23
  4253 08:081D: 22 xx xx xx  	jsl	~~k_debug_long
  4254                        ;			/* Write it back into the volume
                     */
  4255                        ;			fs->wflag = 0; /* Clear window d
                    irty flag */
  4256                        	.line	1103
  4257 08:0821: E2 20        	sep	#$20
  4258                        	longa	off
  4259 08:0823: A9 00        	lda	#$0
  4260 08:0825: A0 03 00     	ldy	#$3
  4261 08:0828: 97 0E        	sta	[<L114+fs_0],Y
  4262 08:082A: C2 20        	rep	#$20
  4263                        	longa	on
  4264                        ;			if (fs->winsect - fs->fatbase < 
                    fs->fsize)
  4265                        	.line	1104
  4266                        ;			{ /* Is it in the 1st FAT? */
  4267 08:082C: 38           	sec
  4268 08:082D: A0 2F 00     	ldy	#$2f
  4269 08:0830: B7 0E        	lda	[<L114+fs_0],Y
  4270 08:0832: A0 23 00     	ldy	#$23
  4271 08:0835: F7 0E        	sbc	[<L114+fs_0],Y
  4272 08:0837: 85 01        	sta	<R0
  4273 08:0839: A0 31 00     	ldy	#$31
  4274 08:083C: B7 0E        	lda	[<L114+fs_0],Y
  4275 08:083E: A0 25 00     	ldy	#$25
  4276 08:0841: F7 0E        	sbc	[<L114+fs_0],Y
  4277 08:0843: 85 03        	sta	<R0+2
  4278 08:0845: A5 01        	lda	<R0
  4279 08:0847: A0 1B 00     	ldy	#$1b
  4280 08:084A: D7 0E        	cmp	[<L114+fs_0],Y
  4281 08:084C: A5 03        	lda	<R0+2
  4282 08:084E: A0 1D 00     	ldy	#$1d
  4283 08:0851: F7 0E        	sbc	[<L114+fs_0],Y
  4284 08:0853: 90 03        	bcc	L119
  4285 08:0855: 82 4D 00     	brl	L10038
  4286                        L119:
  4287                        	.line	1105
  4288                        ;				if (fs->n_fats == 2)
  4289                        	.line	1106
  4290                        ;					disk_write(fs->p
                    drv, fs->win, fs->winsect + fs->fsize, 1); /* Reflect it to 
                    2nd FAT if needed */
  4291 08:0858: E2 20        	sep	#$20
  4292                        	longa	off
  4293 08:085A: A0 02 00     	ldy	#$2
  4294 08:085D: B7 0E        	lda	[<L114+fs_0],Y
  4295 08:085F: C9 02        	cmp	#<$2
  Sat Jul 10 2021  1:15                                                Page 89


  4296 08:0861: C2 20        	rep	#$20
  4297                        	longa	on
  4298 08:0863: F0 03        	beq	L120
  4299 08:0865: 82 3D 00     	brl	L10039
  4300                        L120:
  4301                        	.line	1107
  4302 08:0868: F4 01 00     	pea	#<$1
  4303 08:086B: 18           	clc
  4304 08:086C: A0 2F 00     	ldy	#$2f
  4305 08:086F: B7 0E        	lda	[<L114+fs_0],Y
  4306 08:0871: A0 1B 00     	ldy	#$1b
  4307 08:0874: 77 0E        	adc	[<L114+fs_0],Y
  4308 08:0876: 85 01        	sta	<R0
  4309 08:0878: A0 31 00     	ldy	#$31
  4310 08:087B: B7 0E        	lda	[<L114+fs_0],Y
  4311 08:087D: A0 1D 00     	ldy	#$1d
  4312 08:0880: 77 0E        	adc	[<L114+fs_0],Y
  4313 08:0882: 85 03        	sta	<R0+2
  4314 08:0884: D4 03        	pei	<R0+2
  4315 08:0886: D4 01        	pei	<R0
  4316 08:0888: 18           	clc
  4317 08:0889: A9 33 00     	lda	#$33
  4318 08:088C: 65 0E        	adc	<L114+fs_0
  4319 08:088E: 85 05        	sta	<R1
  4320 08:0890: A9 00 00     	lda	#$0
  4321 08:0893: 65 10        	adc	<L114+fs_0+2
  4322 08:0895: 85 07        	sta	<R1+2
  4323 08:0897: D4 07        	pei	<R1+2
  4324 08:0899: D4 05        	pei	<R1
  4325 08:089B: A0 01 00     	ldy	#$1
  4326 08:089E: B7 0E        	lda	[<L114+fs_0],Y
  4327 08:08A0: 48           	pha
  4328 08:08A1: 22 xx xx xx  	jsl	~~disk_write
  4329                        ;			}
  4330                        L10039:
  4331                        	.line	1108
  4332                        ;		}
  4333                        L10038:
  4334                        	.line	1109
  4335                        ;		else
  4336 08:08A5: 82 05 00     	brl	L10040
  4337                        L10037:
  4338                        ;		{
  4339                        	.line	1111
  4340                        ;			res = FR_DISK_ERR;
  4341                        	.line	1112
  4342 08:08A8: A9 01 00     	lda	#$1
  4343 08:08AB: 85 09        	sta	<L115+res_1
  4344                        ;		}
  4345                        	.line	1113
  4346                        L10040:
  4347                        ;	}
  4348                        	.line	1114
  4349                        ;	return res;
  4350                        L10036:
  4351                        	.line	1115
  4352 08:08AD: A5 09        	lda	<L115+res_1
  4353                        L121:
  Sat Jul 10 2021  1:15                                                Page 90


  4354 08:08AF: A8           	tay
  4355 08:08B0: A5 0C        	lda	<L114+2
  4356 08:08B2: 85 10        	sta	<L114+2+4
  4357 08:08B4: A5 0B        	lda	<L114+1
  4358 08:08B6: 85 0F        	sta	<L114+1+4
  4359 08:08B8: 2B           	pld
  4360 08:08B9: 3B           	tsc
  4361 08:08BA: 18           	clc
  4362 08:08BB: 69 0E 00     	adc	#L114+4
  4363 08:08BE: 1B           	tcs
  4364 08:08BF: 98           	tya
  4365 08:08C0: 6B           	rtl
  4366                        ;}
  4367                        	.line	1116
  4368                        	.endblock	1116
  4369             0000000A   L114	equ	10
  4370             00000009   L115	equ	9
  4371 08:08C1:              	ends
  4372                        	efunc
  4373                        	.endfunc	1116,9,10
  4374                        	.line	1116
  4375                        	data
  4376                        L2:
  4377 00:00CD: 73 79 6E 63  	db	$73,$79,$6E,$63,$5F,$77,$69,$6E,$64,$6F,
                    $77,$3A,$66,$73,$2D
       00:00D1: 5F 77 69 6E 
       00:00D5: 64 6F 77 3A 
       00:00D9: 66 73 2D 
  4378 00:00DC: 3E 77 66 6C  	db	$3E,$77,$66,$6C,$61,$67,$3A,$00,$73,$79,
                    $6E,$63,$5F,$77,$69
       00:00E0: 61 67 3A 00 
       00:00E4: 73 79 6E 63 
       00:00E8: 5F 77 69 
  4379 00:00EB: 6E 64 6F 77  	db	$6E,$64,$6F,$77,$3A,$64,$69,$73,$6B,$5F,
                    $77,$72,$69,$74,$65
       00:00EF: 3A 64 69 73 
       00:00F3: 6B 5F 77 72 
       00:00F7: 69 74 65 
  4380 00:00FA: 3A 00        	db	$3A,$00
  4381 00:00FC:              	ends
  4382                        ;#endif
  4383                        ;
  4384                        ;static FRESULT move_window( /* Returns FR_OK or F
                    R_DISK_ERR */
  4385                        ;FATFS* fs, /* Filesystem object */
  4386                        ;LBA_t sect /* Sector LBA to make appearance in th
                    e fs->win[] */
  4387                        ;)
  4388                        ;{
  4389                        	.line	1119
  4390                        	.line	1123
  4391                        	FFDOS
  4392                        	func
  4393                        	.function	1123
  4394                        ~~move_window:
  4395                        	longa	on
  4396                        	longi	on
  4397 08:08C1: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 91


  4398 08:08C2: 38           	sec
  4399 08:08C3: E9 06 00     	sbc	#L123
  4400 08:08C6: 1B           	tcs
  4401 08:08C7: 0B           	phd
  4402 08:08C8: 5B           	tcd
  4403             00000004   fs_0	set	4
  4404             00000008   sect_0	set	8
  4405                        	.block	1123
  4406                        ;	FRESULT res = FR_OK;
  4407                        ;
  4408                        ;	//k_debug_string("move_window...\r\n");
  4409                        ;
  4410                        ;	if (sect != fs->winsect)
  4411             00000000   res_1	set	0
  4412                        	.sym	res,0,5,1,16
  4413                        	.sym	fs,4,138,6,32,72
  4414                        	.sym	sect,8,18,6,32
  4415 08:08C9: 64 05        	stz	<L124+res_1
  4416                        	.line	1128
  4417                        ;	{ /* Window offset changed? */
  4418 08:08CB: A5 0E        	lda	<L123+sect_0
  4419 08:08CD: A0 2F 00     	ldy	#$2f
  4420 08:08D0: D7 0A        	cmp	[<L123+fs_0],Y
  4421 08:08D2: D0 07        	bne	L126
  4422 08:08D4: A5 10        	lda	<L123+sect_0+2
  4423 08:08D6: A0 31 00     	ldy	#$31
  4424 08:08D9: D7 0A        	cmp	[<L123+fs_0],Y
  4425                        L126:
  4426 08:08DB: D0 03        	bne	L127
  4427 08:08DD: 82 58 00     	brl	L10041
  4428                        L127:
  4429                        	.line	1129
  4430                        ;#if !FF_FS_READONLY
  4431                        ;		res = sync_window(fs); /* Flush the wind
                    ow */
  4432                        	.line	1131
  4433 08:08E0: D4 0C        	pei	<L123+fs_0+2
  4434 08:08E2: D4 0A        	pei	<L123+fs_0
  4435 08:08E4: 22 AE 07 08  	jsl	~~sync_window
  4436 08:08E8: 85 05        	sta	<L124+res_1
  4437                        ;#endif
  4438                        ;		if (res == FR_OK)
  4439                        	.line	1133
  4440                        ;		{ /* Fill sector window with new data */
  4441 08:08EA: A5 05        	lda	<L124+res_1
  4442 08:08EC: F0 03        	beq	L128
  4443 08:08EE: 82 47 00     	brl	L10042
  4444                        L128:
  4445                        	.line	1134
  4446                        ;			if (disk_read(fs->pdrv, fs->win,
                     sect, 1) != RES_OK)
  4447                        	.line	1135
  4448                        ;			{
  4449 08:08F1: F4 01 00     	pea	#<$1
  4450 08:08F4: D4 10        	pei	<L123+sect_0+2
  4451 08:08F6: D4 0E        	pei	<L123+sect_0
  4452 08:08F8: 18           	clc
  4453 08:08F9: A9 33 00     	lda	#$33
  Sat Jul 10 2021  1:15                                                Page 92


  4454 08:08FC: 65 0A        	adc	<L123+fs_0
  4455 08:08FE: 85 01        	sta	<R0
  4456 08:0900: A9 00 00     	lda	#$0
  4457 08:0903: 65 0C        	adc	<L123+fs_0+2
  4458 08:0905: 85 03        	sta	<R0+2
  4459 08:0907: D4 03        	pei	<R0+2
  4460 08:0909: D4 01        	pei	<R0
  4461 08:090B: A0 01 00     	ldy	#$1
  4462 08:090E: B7 0A        	lda	[<L123+fs_0],Y
  4463 08:0910: 48           	pha
  4464 08:0911: 22 xx xx xx  	jsl	~~disk_read
  4465 08:0915: AA           	tax
  4466 08:0916: D0 03        	bne	L129
  4467 08:0918: 82 0F 00     	brl	L10043
  4468                        L129:
  4469                        	.line	1136
  4470                        ;				sect = (LBA_t) 0 - 1; /*
                     Invalidate window if read data is not valid */
  4471                        	.line	1137
  4472 08:091B: A9 FF FF     	lda	#$ffff
  4473 08:091E: 85 0E        	sta	<L123+sect_0
  4474 08:0920: A9 FF FF     	lda	#$ffff
  4475 08:0923: 85 10        	sta	<L123+sect_0+2
  4476                        ;				res = FR_DISK_ERR;
  4477                        	.line	1138
  4478 08:0925: A9 01 00     	lda	#$1
  4479 08:0928: 85 05        	sta	<L124+res_1
  4480                        ;			}
  4481                        	.line	1139
  4482                        ;			fs->winsect = sect;
  4483                        L10043:
  4484                        	.line	1140
  4485 08:092A: A5 0E        	lda	<L123+sect_0
  4486 08:092C: A0 2F 00     	ldy	#$2f
  4487 08:092F: 97 0A        	sta	[<L123+fs_0],Y
  4488 08:0931: A5 10        	lda	<L123+sect_0+2
  4489 08:0933: A0 31 00     	ldy	#$31
  4490 08:0936: 97 0A        	sta	[<L123+fs_0],Y
  4491                        ;			//k_debug_long("move_window::sec
                    t:",sect);
  4492                        ;		}
  4493                        	.line	1142
  4494                        ;	}
  4495                        L10042:
  4496                        	.line	1143
  4497                        ;	//k_debug_hex("move_window::res:",res);
  4498                        ;	return res;
  4499                        L10041:
  4500                        	.line	1145
  4501 08:0938: A5 05        	lda	<L124+res_1
  4502                        L130:
  4503 08:093A: A8           	tay
  4504 08:093B: A5 08        	lda	<L123+2
  4505 08:093D: 85 10        	sta	<L123+2+8
  4506 08:093F: A5 07        	lda	<L123+1
  4507 08:0941: 85 0F        	sta	<L123+1+8
  4508 08:0943: 2B           	pld
  4509 08:0944: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 93


  4510 08:0945: 18           	clc
  4511 08:0946: 69 0E 00     	adc	#L123+8
  4512 08:0949: 1B           	tcs
  4513 08:094A: 98           	tya
  4514 08:094B: 6B           	rtl
  4515                        ;}
  4516                        	.line	1146
  4517                        	.endblock	1146
  4518             00000006   L123	equ	6
  4519             00000005   L124	equ	5
  4520 08:094C:              	ends
  4521                        	efunc
  4522                        	.endfunc	1146,5,6
  4523                        	.line	1146
  4524                        ;
  4525                        ;#if !FF_FS_READONLY
  4526                        ;/*-----------------------------------------------
                    ------------------------*/
  4527                        ;/* Synchronize filesystem and data on the storage
                                            */
  4528                        ;/*-----------------------------------------------
                    ------------------------*/
  4529                        ;
  4530                        ;static FRESULT sync_fs( /* Returns FR_OK or FR_DI
                    SK_ERR */
  4531                        ;FATFS* fs /* Filesystem object */
  4532                        ;)
  4533                        ;{
  4534                        	.line	1153
  4535                        	.line	1156
  4536                        	FFDOS
  4537                        	func
  4538                        	.function	1156
  4539                        ~~sync_fs:
  4540                        	longa	on
  4541                        	longi	on
  4542 08:094C: 3B           	tsc
  4543 08:094D: 38           	sec
  4544 08:094E: E9 06 00     	sbc	#L131
  4545 08:0951: 1B           	tcs
  4546 08:0952: 0B           	phd
  4547 08:0953: 5B           	tcd
  4548             00000004   fs_0	set	4
  4549                        	.block	1156
  4550                        ;	FRESULT res;
  4551                        ;
  4552                        ;	res = sync_window(fs);
  4553             00000000   res_1	set	0
  4554                        	.sym	res,0,5,1,16
  4555                        	.sym	fs,4,138,6,32,72
  4556                        	.line	1159
  4557 08:0954: D4 0C        	pei	<L131+fs_0+2
  4558 08:0956: D4 0A        	pei	<L131+fs_0
  4559 08:0958: 22 AE 07 08  	jsl	~~sync_window
  4560 08:095C: 85 05        	sta	<L132+res_1
  4561                        ;	if (res == FR_OK)
  4562                        	.line	1160
  4563                        ;	{
  Sat Jul 10 2021  1:15                                                Page 94


  4564 08:095E: A5 05        	lda	<L132+res_1
  4565 08:0960: F0 03        	beq	L134
  4566 08:0962: 82 4C 01     	brl	L10044
  4567                        L134:
  4568                        	.line	1161
  4569                        ;		if (fs->fs_type == FS_FAT32 && fs->fsi_f
                    lag == 1)
  4570                        	.line	1162
  4571                        ;		{ /* FAT32: Update FSInfo sector if need
                    ed */
  4572 08:0965: E2 20        	sep	#$20
  4573                        	longa	off
  4574 08:0967: A7 0A        	lda	[<L131+fs_0]
  4575 08:0969: C9 03        	cmp	#<$3
  4576 08:096B: C2 20        	rep	#$20
  4577                        	longa	on
  4578 08:096D: F0 03        	beq	L135
  4579 08:096F: 82 21 01     	brl	L10045
  4580                        L135:
  4581 08:0972: E2 20        	sep	#$20
  4582                        	longa	off
  4583 08:0974: A0 04 00     	ldy	#$4
  4584 08:0977: B7 0A        	lda	[<L131+fs_0],Y
  4585 08:0979: C9 01        	cmp	#<$1
  4586 08:097B: C2 20        	rep	#$20
  4587                        	longa	on
  4588 08:097D: F0 03        	beq	L136
  4589 08:097F: 82 11 01     	brl	L10045
  4590                        L136:
  4591                        	.line	1163
  4592                        ;			/* Create FSInfo structure */
  4593                        ;			mem_set(fs->win, 0, sizeof fs->w
                    in);
  4594                        	.line	1165
  4595 08:0982: F4 00 02     	pea	#<$200
  4596 08:0985: F4 00 00     	pea	#<$0
  4597 08:0988: 18           	clc
  4598 08:0989: A9 33 00     	lda	#$33
  4599 08:098C: 65 0A        	adc	<L131+fs_0
  4600 08:098E: 85 01        	sta	<R0
  4601 08:0990: A9 00 00     	lda	#$0
  4602 08:0993: 65 0C        	adc	<L131+fs_0+2
  4603 08:0995: 85 03        	sta	<R0+2
  4604 08:0997: D4 03        	pei	<R0+2
  4605 08:0999: D4 01        	pei	<R0
  4606 08:099B: 22 DF 01 08  	jsl	~~mem_set
  4607                        ;			st_word(fs->win + BS_55AA, 0xAA5
                    5);
  4608                        	.line	1166
  4609 08:099F: F4 55 AA     	pea	#<$aa55
  4610 08:09A2: 18           	clc
  4611 08:09A3: A9 31 02     	lda	#$231
  4612 08:09A6: 65 0A        	adc	<L131+fs_0
  4613 08:09A8: 85 01        	sta	<R0
  4614 08:09AA: A9 00 00     	lda	#$0
  4615 08:09AD: 65 0C        	adc	<L131+fs_0+2
  4616 08:09AF: 85 03        	sta	<R0+2
  4617 08:09B1: D4 03        	pei	<R0+2
  Sat Jul 10 2021  1:15                                                Page 95


  4618 08:09B3: D4 01        	pei	<R0
  4619 08:09B5: 22 D7 00 08  	jsl	~~st_word
  4620                        ;			st_dword(fs->win + FSI_LeadSig, 
                    0x41615252);
  4621                        	.line	1167
  4622 08:09B9: F4 61 41     	pea	#^$41615252
  4623 08:09BC: F4 52 52     	pea	#<$41615252
  4624 08:09BF: 18           	clc
  4625 08:09C0: A9 33 00     	lda	#$33
  4626 08:09C3: 65 0A        	adc	<L131+fs_0
  4627 08:09C5: 85 01        	sta	<R0
  4628 08:09C7: A9 00 00     	lda	#$0
  4629 08:09CA: 65 0C        	adc	<L131+fs_0+2
  4630 08:09CC: 85 03        	sta	<R0+2
  4631 08:09CE: D4 03        	pei	<R0+2
  4632 08:09D0: D4 01        	pei	<R0
  4633 08:09D2: 22 16 01 08  	jsl	~~st_dword
  4634                        ;			st_dword(fs->win + FSI_StrucSig,
                     0x61417272);
  4635                        	.line	1168
  4636 08:09D6: F4 41 61     	pea	#^$61417272
  4637 08:09D9: F4 72 72     	pea	#<$61417272
  4638 08:09DC: 18           	clc
  4639 08:09DD: A9 17 02     	lda	#$217
  4640 08:09E0: 65 0A        	adc	<L131+fs_0
  4641 08:09E2: 85 01        	sta	<R0
  4642 08:09E4: A9 00 00     	lda	#$0
  4643 08:09E7: 65 0C        	adc	<L131+fs_0+2
  4644 08:09E9: 85 03        	sta	<R0+2
  4645 08:09EB: D4 03        	pei	<R0+2
  4646 08:09ED: D4 01        	pei	<R0
  4647 08:09EF: 22 16 01 08  	jsl	~~st_dword
  4648                        ;			st_dword(fs->win + FSI_Free_Coun
                    t, fs->free_clst);
  4649                        	.line	1169
  4650 08:09F3: A0 15 00     	ldy	#$15
  4651 08:09F6: B7 0A        	lda	[<L131+fs_0],Y
  4652 08:09F8: 48           	pha
  4653 08:09F9: A0 13 00     	ldy	#$13
  4654 08:09FC: B7 0A        	lda	[<L131+fs_0],Y
  4655 08:09FE: 48           	pha
  4656 08:09FF: 18           	clc
  4657 08:0A00: A9 1B 02     	lda	#$21b
  4658 08:0A03: 65 0A        	adc	<L131+fs_0
  4659 08:0A05: 85 01        	sta	<R0
  4660 08:0A07: A9 00 00     	lda	#$0
  4661 08:0A0A: 65 0C        	adc	<L131+fs_0+2
  4662 08:0A0C: 85 03        	sta	<R0+2
  4663 08:0A0E: D4 03        	pei	<R0+2
  4664 08:0A10: D4 01        	pei	<R0
  4665 08:0A12: 22 16 01 08  	jsl	~~st_dword
  4666                        ;			st_dword(fs->win + FSI_Nxt_Free,
                     fs->last_clst);
  4667                        	.line	1170
  4668 08:0A16: A0 11 00     	ldy	#$11
  4669 08:0A19: B7 0A        	lda	[<L131+fs_0],Y
  4670 08:0A1B: 48           	pha
  4671 08:0A1C: A0 0F 00     	ldy	#$f
  Sat Jul 10 2021  1:15                                                Page 96


  4672 08:0A1F: B7 0A        	lda	[<L131+fs_0],Y
  4673 08:0A21: 48           	pha
  4674 08:0A22: 18           	clc
  4675 08:0A23: A9 1F 02     	lda	#$21f
  4676 08:0A26: 65 0A        	adc	<L131+fs_0
  4677 08:0A28: 85 01        	sta	<R0
  4678 08:0A2A: A9 00 00     	lda	#$0
  4679 08:0A2D: 65 0C        	adc	<L131+fs_0+2
  4680 08:0A2F: 85 03        	sta	<R0+2
  4681 08:0A31: D4 03        	pei	<R0+2
  4682 08:0A33: D4 01        	pei	<R0
  4683 08:0A35: 22 16 01 08  	jsl	~~st_dword
  4684                        ;			/* Write it into the FSInfo sect
                    or */
  4685                        ;			fs->winsect = fs->volbase + 1;
  4686                        	.line	1172
  4687 08:0A39: 18           	clc
  4688 08:0A3A: A9 01 00     	lda	#$1
  4689 08:0A3D: A0 1F 00     	ldy	#$1f
  4690 08:0A40: 77 0A        	adc	[<L131+fs_0],Y
  4691 08:0A42: 85 01        	sta	<R0
  4692 08:0A44: A9 00 00     	lda	#$0
  4693 08:0A47: A0 21 00     	ldy	#$21
  4694 08:0A4A: 77 0A        	adc	[<L131+fs_0],Y
  4695 08:0A4C: 85 03        	sta	<R0+2
  4696 08:0A4E: A5 01        	lda	<R0
  4697 08:0A50: A0 2F 00     	ldy	#$2f
  4698 08:0A53: 97 0A        	sta	[<L131+fs_0],Y
  4699 08:0A55: A5 03        	lda	<R0+2
  4700 08:0A57: A0 31 00     	ldy	#$31
  4701 08:0A5A: 97 0A        	sta	[<L131+fs_0],Y
  4702                        ;			disk_write(fs->pdrv, fs->win, fs
                    ->winsect, 1);
  4703                        	.line	1173
  4704 08:0A5C: F4 01 00     	pea	#<$1
  4705 08:0A5F: A0 31 00     	ldy	#$31
  4706 08:0A62: B7 0A        	lda	[<L131+fs_0],Y
  4707 08:0A64: 48           	pha
  4708 08:0A65: A0 2F 00     	ldy	#$2f
  4709 08:0A68: B7 0A        	lda	[<L131+fs_0],Y
  4710 08:0A6A: 48           	pha
  4711 08:0A6B: 18           	clc
  4712 08:0A6C: A9 33 00     	lda	#$33
  4713 08:0A6F: 65 0A        	adc	<L131+fs_0
  4714 08:0A71: 85 01        	sta	<R0
  4715 08:0A73: A9 00 00     	lda	#$0
  4716 08:0A76: 65 0C        	adc	<L131+fs_0+2
  4717 08:0A78: 85 03        	sta	<R0+2
  4718 08:0A7A: D4 03        	pei	<R0+2
  4719 08:0A7C: D4 01        	pei	<R0
  4720 08:0A7E: A0 01 00     	ldy	#$1
  4721 08:0A81: B7 0A        	lda	[<L131+fs_0],Y
  4722 08:0A83: 48           	pha
  4723 08:0A84: 22 xx xx xx  	jsl	~~disk_write
  4724                        ;			fs->fsi_flag = 0;
  4725                        	.line	1174
  4726 08:0A88: E2 20        	sep	#$20
  4727                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 97


  4728 08:0A8A: A9 00        	lda	#$0
  4729 08:0A8C: A0 04 00     	ldy	#$4
  4730 08:0A8F: 97 0A        	sta	[<L131+fs_0],Y
  4731 08:0A91: C2 20        	rep	#$20
  4732                        	longa	on
  4733                        ;		}
  4734                        	.line	1175
  4735                        ;		/* Make sure that no pending write proce
                    ss in the lower layer */
  4736                        ;		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) !
                    = RES_OK)
  4737                        L10045:
  4738                        	.line	1177
  4739                        ;			res = FR_DISK_ERR;
  4740 08:0A93: F4 00 00     	pea	#^$0
  4741 08:0A96: F4 00 00     	pea	#<$0
  4742 08:0A99: F4 00 00     	pea	#<$0
  4743 08:0A9C: A0 01 00     	ldy	#$1
  4744 08:0A9F: B7 0A        	lda	[<L131+fs_0],Y
  4745 08:0AA1: 48           	pha
  4746 08:0AA2: 22 xx xx xx  	jsl	~~disk_ioctl
  4747 08:0AA6: AA           	tax
  4748 08:0AA7: D0 03        	bne	L137
  4749 08:0AA9: 82 05 00     	brl	L10046
  4750                        L137:
  4751                        	.line	1178
  4752 08:0AAC: A9 01 00     	lda	#$1
  4753 08:0AAF: 85 05        	sta	<L132+res_1
  4754                        ;	}
  4755                        L10046:
  4756                        	.line	1179
  4757                        ;
  4758                        ;	return res;
  4759                        L10044:
  4760                        	.line	1181
  4761 08:0AB1: A5 05        	lda	<L132+res_1
  4762                        L138:
  4763 08:0AB3: A8           	tay
  4764 08:0AB4: A5 08        	lda	<L131+2
  4765 08:0AB6: 85 0C        	sta	<L131+2+4
  4766 08:0AB8: A5 07        	lda	<L131+1
  4767 08:0ABA: 85 0B        	sta	<L131+1+4
  4768 08:0ABC: 2B           	pld
  4769 08:0ABD: 3B           	tsc
  4770 08:0ABE: 18           	clc
  4771 08:0ABF: 69 0A 00     	adc	#L131+4
  4772 08:0AC2: 1B           	tcs
  4773 08:0AC3: 98           	tya
  4774 08:0AC4: 6B           	rtl
  4775                        ;}
  4776                        	.line	1182
  4777                        	.endblock	1182
  4778             00000006   L131	equ	6
  4779             00000005   L132	equ	5
  4780 08:0AC5:              	ends
  4781                        	efunc
  4782                        	.endfunc	1182,5,6
  4783                        	.line	1182
  Sat Jul 10 2021  1:15                                                Page 98


  4784                        ;
  4785                        ;#endif
  4786                        ;
  4787                        ;/*-----------------------------------------------
                    ------------------------*/
  4788                        ;/* Get physical sector number from cluster number
                                            */
  4789                        ;/*-----------------------------------------------
                    ------------------------*/
  4790                        ;
  4791                        ;static LBA_t clst2sect( /* !=0:Sector number, 0:F
                    ailed (invalid cluster#) */
  4792                        ;FATFS* fs, /* Filesystem object */
  4793                        ;DWORD clst /* Cluster# to be converted */
  4794                        ;)
  4795                        ;{
  4796                        	.line	1190
  4797                        	.line	1194
  4798                        	FFDOS
  4799                        	func
  4800                        	.function	1194
  4801                        ~~clst2sect:
  4802                        	longa	on
  4803                        	longi	on
  4804 08:0AC5: 3B           	tsc
  4805 08:0AC6: 38           	sec
  4806 08:0AC7: E9 08 00     	sbc	#L139
  4807 08:0ACA: 1B           	tcs
  4808 08:0ACB: 0B           	phd
  4809 08:0ACC: 5B           	tcd
  4810             00000004   fs_0	set	4
  4811             00000008   clst_0	set	8
  4812                        	.block	1194
  4813                        ;	clst -= 2; /* Cluster number is origin from 2 */
  4814                        	.sym	fs,4,138,6,32,72
  4815                        	.sym	clst,8,18,6,32
  4816                        	.line	1195
  4817 08:0ACD: 18           	clc
  4818 08:0ACE: A9 FE FF     	lda	#$fffe
  4819 08:0AD1: 65 10        	adc	<L139+clst_0
  4820 08:0AD3: 85 10        	sta	<L139+clst_0
  4821 08:0AD5: A9 FF FF     	lda	#$ffff
  4822 08:0AD8: 65 12        	adc	<L139+clst_0+2
  4823 08:0ADA: 85 12        	sta	<L139+clst_0+2
  4824                        ;	if (clst >= fs->n_fatent - 2)
  4825                        	.line	1196
  4826                        ;		return 0; /* Is it invalid cluster numbe
                    r? */
  4827 08:0ADC: 18           	clc
  4828 08:0ADD: A9 FE FF     	lda	#$fffe
  4829 08:0AE0: A0 17 00     	ldy	#$17
  4830 08:0AE3: 77 0C        	adc	[<L139+fs_0],Y
  4831 08:0AE5: 85 01        	sta	<R0
  4832 08:0AE7: A9 FF FF     	lda	#$ffff
  4833 08:0AEA: A0 19 00     	ldy	#$19
  4834 08:0AED: 77 0C        	adc	[<L139+fs_0],Y
  4835 08:0AEF: 85 03        	sta	<R0+2
  4836 08:0AF1: A5 10        	lda	<L139+clst_0
  Sat Jul 10 2021  1:15                                                Page 99


  4837 08:0AF3: C5 01        	cmp	<R0
  4838 08:0AF5: A5 12        	lda	<L139+clst_0+2
  4839 08:0AF7: E5 03        	sbc	<R0+2
  4840 08:0AF9: B0 03        	bcs	L142
  4841 08:0AFB: 82 19 00     	brl	L10047
  4842                        L142:
  4843                        	.line	1197
  4844 08:0AFE: A9 00 00     	lda	#$0
  4845 08:0B01: AA           	tax
  4846 08:0B02: A9 00 00     	lda	#$0
  4847                        L143:
  4848 08:0B05: A8           	tay
  4849 08:0B06: A5 0A        	lda	<L139+2
  4850 08:0B08: 85 12        	sta	<L139+2+8
  4851 08:0B0A: A5 09        	lda	<L139+1
  4852 08:0B0C: 85 11        	sta	<L139+1+8
  4853 08:0B0E: 2B           	pld
  4854 08:0B0F: 3B           	tsc
  4855 08:0B10: 18           	clc
  4856 08:0B11: 69 10 00     	adc	#L139+8
  4857 08:0B14: 1B           	tcs
  4858 08:0B15: 98           	tya
  4859 08:0B16: 6B           	rtl
  4860                        ;	return fs->database + (LBA_t) fs->csize * clst; 
                    /* Start sector number of the cluster */
  4861                        L10047:
  4862                        	.line	1198
  4863 08:0B17: A0 00 00     	ldy	#$0
  4864 08:0B1A: 5A           	phy
  4865 08:0B1B: A0 09 00     	ldy	#$9
  4866 08:0B1E: B7 0C        	lda	[<L139+fs_0],Y
  4867 08:0B20: 7A           	ply
  4868 08:0B21: 2A           	rol	A
  4869 08:0B22: 6A           	ror	A
  4870 08:0B23: 10 01        	bpl	L144
  4871 08:0B25: 88           	dey
  4872                        L144:
  4873 08:0B26: 85 01        	sta	<R0
  4874 08:0B28: 84 03        	sty	<R0+2
  4875 08:0B2A: D4 12        	pei	<L139+clst_0+2
  4876 08:0B2C: D4 10        	pei	<L139+clst_0
  4877 08:0B2E: D4 03        	pei	<R0+2
  4878 08:0B30: D4 01        	pei	<R0
  4879                        	xref	~~~lmul
  4880 08:0B32: 22 xx xx xx  	jsl	~~~lmul
  4881 08:0B36: 85 01        	sta	<R0
  4882 08:0B38: 86 03        	stx	<R0+2
  4883 08:0B3A: 18           	clc
  4884 08:0B3B: A5 01        	lda	<R0
  4885 08:0B3D: A0 2B 00     	ldy	#$2b
  4886 08:0B40: 77 0C        	adc	[<L139+fs_0],Y
  4887 08:0B42: 85 05        	sta	<R1
  4888 08:0B44: A5 03        	lda	<R0+2
  4889 08:0B46: A0 2D 00     	ldy	#$2d
  4890 08:0B49: 77 0C        	adc	[<L139+fs_0],Y
  4891 08:0B4B: 85 07        	sta	<R1+2
  4892 08:0B4D: A6 07        	ldx	<R1+2
  4893 08:0B4F: A5 05        	lda	<R1
  Sat Jul 10 2021  1:15                                                Page 100


  4894 08:0B51: 82 B1 FF     	brl	L143
  4895                        ;}
  4896                        	.line	1199
  4897                        	.endblock	1199
  4898             00000008   L139	equ	8
  4899             00000009   L140	equ	9
  4900 08:0B54:              	ends
  4901                        	efunc
  4902                        	.endfunc	1199,9,8
  4903                        	.line	1199
  4904                        ;
  4905                        ;/*-----------------------------------------------
                    ------------------------*/
  4906                        ;/* FAT access - Read value of a FAT entry        
                                            */
  4907                        ;/*-----------------------------------------------
                    ------------------------*/
  4908                        ;
  4909                        ;static DWORD get_fat( /* 0xFFFFFFFF:Disk error, 1
                    :Internal error, 2..0x7FFFFFFF:Cluster status */
  4910                        ;FFOBJID* obj, /* Corresponding object */
  4911                        ;DWORD clst /* Cluster number to get the value */
  4912                        ;)
  4913                        ;{
  4914                        	.line	1205
  4915                        	.line	1209
  4916                        	FFDOS
  4917                        	func
  4918                        	.function	1209
  4919                        ~~get_fat:
  4920                        	longa	on
  4921                        	longi	on
  4922 08:0B54: 3B           	tsc
  4923 08:0B55: 38           	sec
  4924 08:0B56: E9 1E 00     	sbc	#L145
  4925 08:0B59: 1B           	tcs
  4926 08:0B5A: 0B           	phd
  4927 08:0B5B: 5B           	tcd
  4928             00000004   obj_0	set	4
  4929             00000008   clst_0	set	8
  4930                        	.block	1209
  4931                        ;	UINT wc, bc;
  4932                        ;	DWORD val;
  4933                        ;	FATFS *fs = obj->fs;
  4934                        ;	WORD rv;
  4935                        ;	UCHAR *p;
  4936                        ;	//k_debug_long("get_fat::clst:",clst);
  4937                        ;
  4938                        ;	if (clst < 2 || clst >= fs->n_fatent)
  4939             00000000   wc_1	set	0
  4940             00000002   bc_1	set	2
  4941             00000004   val_1	set	4
  4942             00000008   fs_1	set	8
  4943             0000000C   rv_1	set	12
  4944             0000000E   p_1	set	14
  4945                        	.sym	wc,0,16,1,16
  4946                        	.sym	bc,2,16,1,16
  4947                        	.sym	val,4,18,1,32
  Sat Jul 10 2021  1:15                                                Page 101


  4948                        	.sym	fs,8,138,1,32,72
  4949                        	.sym	rv,12,5,1,16
  4950                        	.sym	p,14,142,1,32
  4951                        	.sym	obj,4,138,6,32,73
  4952                        	.sym	clst,8,18,6,32
  4953 08:0B5C: A7 22        	lda	[<L145+obj_0]
  4954 08:0B5E: 85 15        	sta	<L146+fs_1
  4955 08:0B60: A0 02 00     	ldy	#$2
  4956 08:0B63: B7 22        	lda	[<L145+obj_0],Y
  4957 08:0B65: 85 17        	sta	<L146+fs_1+2
  4958                        	.line	1217
  4959                        ;	{ /* Check if in valid range */
  4960 08:0B67: A5 26        	lda	<L145+clst_0
  4961 08:0B69: C9 02 00     	cmp	#<$2
  4962 08:0B6C: A5 28        	lda	<L145+clst_0+2
  4963 08:0B6E: E9 00 00     	sbc	#^$2
  4964 08:0B71: B0 03        	bcs	L149
  4965 08:0B73: 82 13 00     	brl	L148
  4966                        L149:
  4967 08:0B76: A5 26        	lda	<L145+clst_0
  4968 08:0B78: A0 17 00     	ldy	#$17
  4969 08:0B7B: D7 15        	cmp	[<L146+fs_1],Y
  4970 08:0B7D: A5 28        	lda	<L145+clst_0+2
  4971 08:0B7F: A0 19 00     	ldy	#$19
  4972 08:0B82: F7 15        	sbc	[<L146+fs_1],Y
  4973 08:0B84: B0 03        	bcs	L150
  4974 08:0B86: 82 0D 00     	brl	L10048
  4975                        L150:
  4976                        L148:
  4977                        	.line	1218
  4978                        ;		val = 1; /* Internal error */
  4979                        	.line	1219
  4980 08:0B89: A9 01 00     	lda	#$1
  4981 08:0B8C: 85 11        	sta	<L146+val_1
  4982 08:0B8E: A9 00 00     	lda	#$0
  4983 08:0B91: 85 13        	sta	<L146+val_1+2
  4984                        ;
  4985                        ;	}
  4986                        	.line	1221
  4987                        ;	else
  4988 08:0B93: 82 18 02     	brl	L10049
  4989                        L10048:
  4990                        ;	{
  4991                        	.line	1223
  4992                        ;		val = 0xFFFFFFFF; /* Default value fails
                     on disk error */
  4993                        	.line	1224
  4994 08:0B96: A9 FF FF     	lda	#$ffff
  4995 08:0B99: 85 11        	sta	<L146+val_1
  4996 08:0B9B: A9 FF FF     	lda	#$ffff
  4997 08:0B9E: 85 13        	sta	<L146+val_1+2
  4998                        ;
  4999                        ;		////k_debug_long("get_fat::fs->fs_type:"
                    ,fs->fs_type);
  5000                        ;
  5001                        ;		switch (fs->fs_type)
  5002                        	.line	1228
  5003 08:0BA0: A7 15        	lda	[<L146+fs_1]
  Sat Jul 10 2021  1:15                                                Page 102


  5004 08:0BA2: 29 FF 00     	and	#$ff
  5005 08:0BA5: 82 F2 01     	brl	L10050
  5006                        ;		{
  5007                        	.line	1229
  5008                        ;		case FS_FAT12:
  5009                        	.line	1230
  5010                        L10052:
  5011                        ;			bc = (UINT) clst;
  5012                        	.line	1231
  5013 08:0BA8: A5 26        	lda	<L145+clst_0
  5014 08:0BAA: 85 0F        	sta	<L146+bc_1
  5015                        ;			bc += bc / 2;
  5016                        	.line	1232
  5017 08:0BAC: A5 0F        	lda	<L146+bc_1
  5018 08:0BAE: 4A           	lsr	A
  5019 08:0BAF: 85 01        	sta	<R0
  5020 08:0BB1: 18           	clc
  5021 08:0BB2: A5 01        	lda	<R0
  5022 08:0BB4: 65 0F        	adc	<L146+bc_1
  5023 08:0BB6: 85 0F        	sta	<L146+bc_1
  5024                        ;			if (move_window(fs, fs->fatbase 
                    + (bc / SS(fs))) != FR_OK)
  5025                        	.line	1233
  5026                        ;				break;
  5027 08:0BB8: A5 0F        	lda	<L146+bc_1
  5028 08:0BBA: A2 09 00     	ldx	#<$9
  5029                        	xref	~~~lsr
  5030 08:0BBD: 22 xx xx xx  	jsl	~~~lsr
  5031 08:0BC1: 85 01        	sta	<R0
  5032 08:0BC3: A5 01        	lda	<R0
  5033 08:0BC5: 85 01        	sta	<R0
  5034 08:0BC7: 64 03        	stz	<R0+2
  5035 08:0BC9: 18           	clc
  5036 08:0BCA: A5 01        	lda	<R0
  5037 08:0BCC: A0 23 00     	ldy	#$23
  5038 08:0BCF: 77 15        	adc	[<L146+fs_1],Y
  5039 08:0BD1: 85 05        	sta	<R1
  5040 08:0BD3: A5 03        	lda	<R0+2
  5041 08:0BD5: A0 25 00     	ldy	#$25
  5042 08:0BD8: 77 15        	adc	[<L146+fs_1],Y
  5043 08:0BDA: 85 07        	sta	<R1+2
  5044 08:0BDC: D4 07        	pei	<R1+2
  5045 08:0BDE: D4 05        	pei	<R1
  5046 08:0BE0: D4 17        	pei	<L146+fs_1+2
  5047 08:0BE2: D4 15        	pei	<L146+fs_1
  5048 08:0BE4: 22 C1 08 08  	jsl	~~move_window
  5049 08:0BE8: AA           	tax
  5050 08:0BE9: F0 03        	beq	L151
  5051 08:0BEB: 82 C0 01     	brl	L10051
  5052                        L151:
  5053                        ;			wc = fs->win[bc++ % SS(fs)]; /* 
                    Get 1st byte of the entry */
  5054                        	.line	1235
  5055 08:0BEE: A5 0F        	lda	<L146+bc_1
  5056 08:0BF0: 29 FF 01     	and	#<$1ff
  5057 08:0BF3: 85 01        	sta	<R0
  5058 08:0BF5: 18           	clc
  5059 08:0BF6: A9 33 00     	lda	#$33
  Sat Jul 10 2021  1:15                                                Page 103


  5060 08:0BF9: 65 01        	adc	<R0
  5061 08:0BFB: 85 05        	sta	<R1
  5062 08:0BFD: A4 05        	ldy	<R1
  5063 08:0BFF: B7 15        	lda	[<L146+fs_1],Y
  5064 08:0C01: 29 FF 00     	and	#$ff
  5065 08:0C04: 85 0D        	sta	<L146+wc_1
  5066 08:0C06: E6 0F        	inc	<L146+bc_1
  5067                        ;			if (move_window(fs, fs->fatbase 
                    + (bc / SS(fs))) != FR_OK)
  5068                        	.line	1236
  5069                        ;				break;
  5070 08:0C08: A5 0F        	lda	<L146+bc_1
  5071 08:0C0A: A2 09 00     	ldx	#<$9
  5072                        	xref	~~~lsr
  5073 08:0C0D: 22 xx xx xx  	jsl	~~~lsr
  5074 08:0C11: 85 01        	sta	<R0
  5075 08:0C13: A5 01        	lda	<R0
  5076 08:0C15: 85 01        	sta	<R0
  5077 08:0C17: 64 03        	stz	<R0+2
  5078 08:0C19: 18           	clc
  5079 08:0C1A: A5 01        	lda	<R0
  5080 08:0C1C: A0 23 00     	ldy	#$23
  5081 08:0C1F: 77 15        	adc	[<L146+fs_1],Y
  5082 08:0C21: 85 05        	sta	<R1
  5083 08:0C23: A5 03        	lda	<R0+2
  5084 08:0C25: A0 25 00     	ldy	#$25
  5085 08:0C28: 77 15        	adc	[<L146+fs_1],Y
  5086 08:0C2A: 85 07        	sta	<R1+2
  5087 08:0C2C: D4 07        	pei	<R1+2
  5088 08:0C2E: D4 05        	pei	<R1
  5089 08:0C30: D4 17        	pei	<L146+fs_1+2
  5090 08:0C32: D4 15        	pei	<L146+fs_1
  5091 08:0C34: 22 C1 08 08  	jsl	~~move_window
  5092 08:0C38: AA           	tax
  5093 08:0C39: F0 03        	beq	L152
  5094 08:0C3B: 82 70 01     	brl	L10051
  5095                        L152:
  5096                        ;			wc |= fs->win[bc % SS(fs)] << 8;
                     /* Merge 2nd byte of the entry */
  5097                        	.line	1238
  5098 08:0C3E: A5 0F        	lda	<L146+bc_1
  5099 08:0C40: 29 FF 01     	and	#<$1ff
  5100 08:0C43: 85 05        	sta	<R1
  5101 08:0C45: 18           	clc
  5102 08:0C46: A9 33 00     	lda	#$33
  5103 08:0C49: 65 05        	adc	<R1
  5104 08:0C4B: 85 09        	sta	<R2
  5105 08:0C4D: A4 09        	ldy	<R2
  5106 08:0C4F: B7 15        	lda	[<L146+fs_1],Y
  5107 08:0C51: 29 FF 00     	and	#$ff
  5108 08:0C54: 85 05        	sta	<R1
  5109 08:0C56: A5 05        	lda	<R1
  5110 08:0C58: EB           	xba
  5111 08:0C59: 29 00 FF     	and	#$ff00
  5112 08:0C5C: 85 01        	sta	<R0
  5113 08:0C5E: A5 01        	lda	<R0
  5114 08:0C60: 04 0D        	tsb	<L146+wc_1
  5115                        ;			val = (clst & 1) ? (wc >> 4) : (
  Sat Jul 10 2021  1:15                                                Page 104


                    wc & 0xFFF); /* Adjust bit position */
  5116                        	.line	1239
  5117 08:0C62: A5 26        	lda	<L145+clst_0
  5118 08:0C64: 29 01 00     	and	#<$1
  5119 08:0C67: D0 03        	bne	L154
  5120 08:0C69: 82 0C 00     	brl	L153
  5121                        L154:
  5122 08:0C6C: A5 0D        	lda	<L146+wc_1
  5123 08:0C6E: 4A           	lsr	A
  5124 08:0C6F: 4A           	lsr	A
  5125 08:0C70: 4A           	lsr	A
  5126 08:0C71: 4A           	lsr	A
  5127 08:0C72: 85 01        	sta	<R0
  5128 08:0C74: A5 01        	lda	<R0
  5129 08:0C76: 80 09        	bra	L155
  5130                        L153:
  5131 08:0C78: A5 0D        	lda	<L146+wc_1
  5132 08:0C7A: 29 FF 0F     	and	#<$fff
  5133 08:0C7D: 85 01        	sta	<R0
  5134 08:0C7F: A5 01        	lda	<R0
  5135                        L155:
  5136 08:0C81: 85 01        	sta	<R0
  5137 08:0C83: A5 01        	lda	<R0
  5138 08:0C85: 85 11        	sta	<L146+val_1
  5139 08:0C87: 64 13        	stz	<L146+val_1+2
  5140                        ;			break;
  5141                        	.line	1240
  5142 08:0C89: 82 22 01     	brl	L10051
  5143                        ;
  5144                        ;		case FS_FAT16:
  5145                        	.line	1242
  5146                        L10053:
  5147                        ;			if (move_window(fs, fs->fatbase 
                    + (clst / (SS(fs) / 2))) != FR_OK)
  5148                        	.line	1243
  5149                        ;				break;
  5150 08:0C8C: D4 28        	pei	<L145+clst_0+2
  5151 08:0C8E: D4 26        	pei	<L145+clst_0
  5152 08:0C90: A9 08 00     	lda	#$8
  5153                        	xref	~~~llsr
  5154 08:0C93: 22 xx xx xx  	jsl	~~~llsr
  5155 08:0C97: 85 01        	sta	<R0
  5156 08:0C99: 86 03        	stx	<R0+2
  5157 08:0C9B: 18           	clc
  5158 08:0C9C: A5 01        	lda	<R0
  5159 08:0C9E: A0 23 00     	ldy	#$23
  5160 08:0CA1: 77 15        	adc	[<L146+fs_1],Y
  5161 08:0CA3: 85 05        	sta	<R1
  5162 08:0CA5: A5 03        	lda	<R0+2
  5163 08:0CA7: A0 25 00     	ldy	#$25
  5164 08:0CAA: 77 15        	adc	[<L146+fs_1],Y
  5165 08:0CAC: 85 07        	sta	<R1+2
  5166 08:0CAE: D4 07        	pei	<R1+2
  5167 08:0CB0: D4 05        	pei	<R1
  5168 08:0CB2: D4 17        	pei	<L146+fs_1+2
  5169 08:0CB4: D4 15        	pei	<L146+fs_1
  5170 08:0CB6: 22 C1 08 08  	jsl	~~move_window
  5171 08:0CBA: AA           	tax
  Sat Jul 10 2021  1:15                                                Page 105


  5172 08:0CBB: F0 03        	beq	L156
  5173 08:0CBD: 82 EE 00     	brl	L10051
  5174                        L156:
  5175                        ;
  5176                        ;			//k_debug_byte_array("fs->win:",
                    fs->win,512);
  5177                        ;
  5178                        ;			//k_debug_long("fs->win:offset:"
                    ,(clst * 2 % SS(fs)) );
  5179                        ;
  5180                        ;			//k_debug_byte_array("fs->win:",
                    (LPSTR)(fs->win + clst * 2 % SS(fs)),4);
  5181                        ;
  5182                        ;			val = ld_word(fs->win + clst * 2
                     % SS(fs)); /* Simple WORD array */
  5183                        	.line	1252
  5184 08:0CC0: A5 26        	lda	<L145+clst_0
  5185 08:0CC2: 85 01        	sta	<R0
  5186 08:0CC4: A5 28        	lda	<L145+clst_0+2
  5187 08:0CC6: 85 03        	sta	<R0+2
  5188 08:0CC8: 06 01        	asl	<R0
  5189 08:0CCA: 26 03        	rol	<R0+2
  5190 08:0CCC: A5 01        	lda	<R0
  5191 08:0CCE: 29 FF 01     	and	#<$1ff
  5192 08:0CD1: 85 05        	sta	<R1
  5193 08:0CD3: 64 07        	stz	<R1+2
  5194 08:0CD5: 18           	clc
  5195 08:0CD6: A9 33 00     	lda	#$33
  5196 08:0CD9: 65 05        	adc	<R1
  5197 08:0CDB: 85 01        	sta	<R0
  5198 08:0CDD: A9 00 00     	lda	#$0
  5199 08:0CE0: 65 07        	adc	<R1+2
  5200 08:0CE2: 85 03        	sta	<R0+2
  5201 08:0CE4: 18           	clc
  5202 08:0CE5: A5 15        	lda	<L146+fs_1
  5203 08:0CE7: 65 01        	adc	<R0
  5204 08:0CE9: 85 05        	sta	<R1
  5205 08:0CEB: A5 17        	lda	<L146+fs_1+2
  5206 08:0CED: 65 03        	adc	<R0+2
  5207 08:0CEF: 85 07        	sta	<R1+2
  5208 08:0CF1: D4 07        	pei	<R1+2
  5209 08:0CF3: D4 05        	pei	<R1
  5210 08:0CF5: 22 00 00 08  	jsl	~~ld_word
  5211 08:0CF9: 85 09        	sta	<R2
  5212 08:0CFB: A0 00 00     	ldy	#$0
  5213 08:0CFE: A5 09        	lda	<R2
  5214 08:0D00: 10 01        	bpl	L157
  5215 08:0D02: 88           	dey
  5216                        L157:
  5217 08:0D03: 85 11        	sta	<L146+val_1
  5218 08:0D05: 84 13        	sty	<L146+val_1+2
  5219                        ;
  5220                        ;			/*
  5221                        ;			p = ((UCHAR*)((ULONG)fs->win + (
                    ULONG)clst * 2L % ((ULONG)SS(fs)) ));
  5222                        ;
  5223                        ;
  5224                        ;			rv = p[1];
  Sat Jul 10 2021  1:15                                                Page 106


  5225                        ;			//k_debug_integer("rv::1:", rv);
  5226                        ;			rv = rv << 8 | p[0];
  5227                        ;			//k_debug_integer("rv::2:", rv);
  5228                        ;
  5229                        ;			//////k_debug_integer("ld_word::
                    after:", rv);
  5230                        ;
  5231                        ;
  5232                        ;			val = ld_word((ULONG)fs->win + (
                    ULONG)clst * 2L % ((ULONG)SS(fs)) );
  5233                        ;
  5234                        ;			//val = (DWORD)(fs->win + clst *
                     2 % SS(fs));
  5235                        ;
  5236                        ;			////k_debug_long("get_fat::val:F
                    S_FAT16:fs->win+...:", (fs->win + clst * 2 % SS(fs)) );
  5237                        ;			////k_debug_long("get_fat::val:F
                    S_FAT16:ld_word:",ld_word(fs->win + clst * 2 % SS(fs)));
  5238                        ;			////k_debug_long("get_fat::val:F
                    S_FAT16:ld_dword:",ld_dword(fs->win + clst * 2 % SS(fs)));
  5239                        ;			*/
  5240                        ;
  5241                        ;			break;
  5242                        	.line	1275
  5243 08:0D07: 82 A4 00     	brl	L10051
  5244                        ;
  5245                        ;		case FS_FAT32:
  5246                        	.line	1277
  5247                        L10054:
  5248                        ;			if (move_window(fs, fs->fatbase 
                    + (clst / (SS(fs) / 4))) != FR_OK)
  5249                        	.line	1278
  5250                        ;				break;
  5251 08:0D0A: D4 28        	pei	<L145+clst_0+2
  5252 08:0D0C: D4 26        	pei	<L145+clst_0
  5253 08:0D0E: A9 07 00     	lda	#$7
  5254                        	xref	~~~llsr
  5255 08:0D11: 22 xx xx xx  	jsl	~~~llsr
  5256 08:0D15: 85 01        	sta	<R0
  5257 08:0D17: 86 03        	stx	<R0+2
  5258 08:0D19: 18           	clc
  5259 08:0D1A: A5 01        	lda	<R0
  5260 08:0D1C: A0 23 00     	ldy	#$23
  5261 08:0D1F: 77 15        	adc	[<L146+fs_1],Y
  5262 08:0D21: 85 05        	sta	<R1
  5263 08:0D23: A5 03        	lda	<R0+2
  5264 08:0D25: A0 25 00     	ldy	#$25
  5265 08:0D28: 77 15        	adc	[<L146+fs_1],Y
  5266 08:0D2A: 85 07        	sta	<R1+2
  5267 08:0D2C: D4 07        	pei	<R1+2
  5268 08:0D2E: D4 05        	pei	<R1
  5269 08:0D30: D4 17        	pei	<L146+fs_1+2
  5270 08:0D32: D4 15        	pei	<L146+fs_1
  5271 08:0D34: 22 C1 08 08  	jsl	~~move_window
  5272 08:0D38: AA           	tax
  5273 08:0D39: F0 03        	beq	L158
  5274 08:0D3B: 82 70 00     	brl	L10051
  5275                        L158:
  Sat Jul 10 2021  1:15                                                Page 107


  5276                        ;			val = ld_dword(fs->win + clst * 
                    4 % SS(fs)) & 0x0FFFFFFF; /* Simple DWORD array but mask out
                     upper 4 bits */
  5277                        	.line	1280
  5278 08:0D3E: A5 26        	lda	<L145+clst_0
  5279 08:0D40: 85 01        	sta	<R0
  5280 08:0D42: A5 28        	lda	<L145+clst_0+2
  5281 08:0D44: 85 03        	sta	<R0+2
  5282 08:0D46: 06 01        	asl	<R0
  5283 08:0D48: 26 03        	rol	<R0+2
  5284 08:0D4A: 06 01        	asl	<R0
  5285 08:0D4C: 26 03        	rol	<R0+2
  5286 08:0D4E: A5 01        	lda	<R0
  5287 08:0D50: 29 FF 01     	and	#<$1ff
  5288 08:0D53: 85 05        	sta	<R1
  5289 08:0D55: 64 07        	stz	<R1+2
  5290 08:0D57: 18           	clc
  5291 08:0D58: A9 33 00     	lda	#$33
  5292 08:0D5B: 65 05        	adc	<R1
  5293 08:0D5D: 85 01        	sta	<R0
  5294 08:0D5F: A9 00 00     	lda	#$0
  5295 08:0D62: 65 07        	adc	<R1+2
  5296 08:0D64: 85 03        	sta	<R0+2
  5297 08:0D66: 18           	clc
  5298 08:0D67: A5 15        	lda	<L146+fs_1
  5299 08:0D69: 65 01        	adc	<R0
  5300 08:0D6B: 85 05        	sta	<R1
  5301 08:0D6D: A5 17        	lda	<L146+fs_1+2
  5302 08:0D6F: 65 03        	adc	<R0+2
  5303 08:0D71: 85 07        	sta	<R1+2
  5304 08:0D73: D4 07        	pei	<R1+2
  5305 08:0D75: D4 05        	pei	<R1
  5306 08:0D77: 22 3B 00 08  	jsl	~~ld_dword
  5307 08:0D7B: 85 09        	sta	<R2
  5308 08:0D7D: 86 0B        	stx	<R2+2
  5309 08:0D7F: A5 09        	lda	<R2
  5310 08:0D81: 85 11        	sta	<L146+val_1
  5311 08:0D83: A5 0B        	lda	<R2+2
  5312 08:0D85: 29 FF 0F     	and	#^$fffffff
  5313 08:0D88: 85 13        	sta	<L146+val_1+2
  5314                        ;			break;
  5315                        	.line	1281
  5316 08:0D8A: 82 21 00     	brl	L10051
  5317                        ;#if FF_FS_EXFAT
  5318                        ;			case FS_EXFAT :
  5319                        ;			if ((obj->objsize != 0 && obj->s
                    clust != 0) || obj->stat == 0)
  5320                        ;			{ /* Object except root dir must
                     have valid data length */
  5321                        ;				DWORD cofs = clst - obj-
                    >sclust; /* Offset from start cluster */
  5322                        ;				DWORD clen = (DWORD)((LB
                    A_t)((obj->objsize - 1) / SS(fs)) / fs->csize); /* Number of
                     clusters - 1 */
  5323                        ;
  5324                        ;				if (obj->stat == 2 && co
                    fs <= clen)
  5325                        ;				{ /* Is it a contiguous 
  Sat Jul 10 2021  1:15                                                Page 108


                    chain? */
  5326                        ;					val = (cofs == c
                    len) ? 0x7FFFFFFF : clst + 1; /* No data on the FAT, generat
                    e the value */
  5327                        ;					break;
  5328                        ;				}
  5329                        ;				if (obj->stat == 3 && co
                    fs < obj->n_cont)
  5330                        ;				{ /* Is it in the 1st fr
                    agment? */
  5331                        ;					val = clst + 1; 
                    /* Generate the value */
  5332                        ;					break;
  5333                        ;				}
  5334                        ;				if (obj->stat != 2)
  5335                        ;				{ /* Get value from FAT 
                    if FAT chain is valid */
  5336                        ;					if (obj->n_frag 
                    != 0)
  5337                        ;					{ /* Is it on th
                    e growing edge? */
  5338                        ;						val = 0x
                    7FFFFFFF; /* Generate EOC */
  5339                        ;					}
  5340                        ;					else
  5341                        ;					{
  5342                        ;						if (move
                    _window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) b
                    reak;
  5343                        ;						val = ld
                    _dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
  5344                        ;					}
  5345                        ;					break;
  5346                        ;				}
  5347                        ;			}
  5348                        ;			/* go to default */
  5349                        ;#endif
  5350                        ;		default:
  5351                        	.line	1315
  5352                        L10055:
  5353                        ;			val = 1; /* Internal error */
  5354                        	.line	1316
  5355 08:0D8D: A9 01 00     	lda	#$1
  5356 08:0D90: 85 11        	sta	<L146+val_1
  5357 08:0D92: A9 00 00     	lda	#$0
  5358 08:0D95: 85 13        	sta	<L146+val_1+2
  5359                        ;		}
  5360                        	.line	1317
  5361 08:0D97: 82 14 00     	brl	L10051
  5362                        L10050:
  5363                        	xref	~~~swt
  5364 08:0D9A: 22 xx xx xx  	jsl	~~~swt
  5365 08:0D9E: 03 00        	dw	3
  5366 08:0DA0: 01 00        	dw	1
  5367 08:0DA2: A7 0B        	dw	L10052-1
  5368 08:0DA4: 02 00        	dw	2
  5369 08:0DA6: 8B 0C        	dw	L10053-1
  5370 08:0DA8: 03 00        	dw	3
  Sat Jul 10 2021  1:15                                                Page 109


  5371 08:0DAA: 09 0D        	dw	L10054-1
  5372 08:0DAC: 8C 0D        	dw	L10055-1
  5373                        L10051:
  5374                        ;	}
  5375                        	.line	1318
  5376                        L10049:
  5377                        ;
  5378                        ;	////k_debug_long("get_fat::val:",val);
  5379                        ;
  5380                        ;	return val;
  5381                        	.line	1322
  5382 08:0DAE: A6 13        	ldx	<L146+val_1+2
  5383 08:0DB0: A5 11        	lda	<L146+val_1
  5384                        L159:
  5385 08:0DB2: A8           	tay
  5386 08:0DB3: A5 20        	lda	<L145+2
  5387 08:0DB5: 85 28        	sta	<L145+2+8
  5388 08:0DB7: A5 1F        	lda	<L145+1
  5389 08:0DB9: 85 27        	sta	<L145+1+8
  5390 08:0DBB: 2B           	pld
  5391 08:0DBC: 3B           	tsc
  5392 08:0DBD: 18           	clc
  5393 08:0DBE: 69 26 00     	adc	#L145+8
  5394 08:0DC1: 1B           	tcs
  5395 08:0DC2: 98           	tya
  5396 08:0DC3: 6B           	rtl
  5397                        ;}
  5398                        	.line	1323
  5399                        	.endblock	1323
  5400             0000001E   L145	equ	30
  5401             0000000D   L146	equ	13
  5402 08:0DC4:              	ends
  5403                        	efunc
  5404                        	.endfunc	1323,13,30
  5405                        	.line	1323
  5406                        ;
  5407                        ;#if !FF_FS_READONLY
  5408                        ;/*-----------------------------------------------
                    ------------------------*/
  5409                        ;/* FAT access - Change value of a FAT entry      
                                            */
  5410                        ;/*-----------------------------------------------
                    ------------------------*/
  5411                        ;
  5412                        ;static FRESULT put_fat( /* FR_OK(0):succeeded, !=
                    0:error */
  5413                        ;FATFS* fs, /* Corresponding filesystem object */
  5414                        ;DWORD clst, /* FAT index number (cluster number) 
                    to be changed */
  5415                        ;DWORD val /* New value to be set to the entry */
  5416                        ;)
  5417                        ;{
  5418                        	.line	1330
  5419                        	.line	1335
  5420                        	FFDOS
  5421                        	func
  5422                        	.function	1335
  5423                        ~~put_fat:
  Sat Jul 10 2021  1:15                                                Page 110


  5424                        	longa	on
  5425                        	longi	on
  5426 08:0DC4: 3B           	tsc
  5427 08:0DC5: 38           	sec
  5428 08:0DC6: E9 18 00     	sbc	#L160
  5429 08:0DC9: 1B           	tcs
  5430 08:0DCA: 0B           	phd
  5431 08:0DCB: 5B           	tcd
  5432             00000004   fs_0	set	4
  5433             00000008   clst_0	set	8
  5434             0000000C   val_0	set	12
  5435                        	.block	1335
  5436                        ;	UINT bc;
  5437                        ;	BYTE *p;
  5438                        ;	FRESULT res = FR_INT_ERR;
  5439                        ;
  5440                        ;	if (clst >= 2 && clst < fs->n_fatent)
  5441             00000000   bc_1	set	0
  5442             00000002   p_1	set	2
  5443             00000006   res_1	set	6
  5444                        	.sym	bc,0,16,1,16
  5445                        	.sym	p,2,142,1,32
  5446                        	.sym	res,6,5,1,16
  5447                        	.sym	fs,4,138,6,32,72
  5448                        	.sym	clst,8,18,6,32
  5449                        	.sym	val,12,18,6,32
  5450 08:0DCC: A9 02 00     	lda	#$2
  5451 08:0DCF: 85 17        	sta	<L161+res_1
  5452                        	.line	1340
  5453                        ;	{ /* Check if in valid range */
  5454 08:0DD1: A5 20        	lda	<L160+clst_0
  5455 08:0DD3: C9 02 00     	cmp	#<$2
  5456 08:0DD6: A5 22        	lda	<L160+clst_0+2
  5457 08:0DD8: E9 00 00     	sbc	#^$2
  5458 08:0DDB: B0 03        	bcs	L163
  5459 08:0DDD: 82 16 03     	brl	L10056
  5460                        L163:
  5461 08:0DE0: A5 20        	lda	<L160+clst_0
  5462 08:0DE2: A0 17 00     	ldy	#$17
  5463 08:0DE5: D7 1C        	cmp	[<L160+fs_0],Y
  5464 08:0DE7: A5 22        	lda	<L160+clst_0+2
  5465 08:0DE9: A0 19 00     	ldy	#$19
  5466 08:0DEC: F7 1C        	sbc	[<L160+fs_0],Y
  5467 08:0DEE: 90 03        	bcc	L164
  5468 08:0DF0: 82 03 03     	brl	L10056
  5469                        L164:
  5470                        	.line	1341
  5471                        ;		switch (fs->fs_type)
  5472                        	.line	1342
  5473 08:0DF3: A7 1C        	lda	[<L160+fs_0]
  5474 08:0DF5: 29 FF 00     	and	#$ff
  5475 08:0DF8: 82 E7 02     	brl	L10057
  5476                        ;		{
  5477                        	.line	1343
  5478                        ;		case FS_FAT12:
  5479                        	.line	1344
  5480                        L10059:
  5481                        ;			bc = (UINT) clst;
  Sat Jul 10 2021  1:15                                                Page 111


  5482                        	.line	1345
  5483 08:0DFB: A5 20        	lda	<L160+clst_0
  5484 08:0DFD: 85 11        	sta	<L161+bc_1
  5485                        ;			bc += bc / 2; /* bc: byte offset
                     of the entry */
  5486                        	.line	1346
  5487 08:0DFF: A5 11        	lda	<L161+bc_1
  5488 08:0E01: 4A           	lsr	A
  5489 08:0E02: 85 01        	sta	<R0
  5490 08:0E04: 18           	clc
  5491 08:0E05: A5 01        	lda	<R0
  5492 08:0E07: 65 11        	adc	<L161+bc_1
  5493 08:0E09: 85 11        	sta	<L161+bc_1
  5494                        ;			res = move_window(fs, fs->fatbas
                    e + (bc / SS(fs)));
  5495                        	.line	1347
  5496 08:0E0B: A5 11        	lda	<L161+bc_1
  5497 08:0E0D: A2 09 00     	ldx	#<$9
  5498                        	xref	~~~lsr
  5499 08:0E10: 22 xx xx xx  	jsl	~~~lsr
  5500 08:0E14: 85 01        	sta	<R0
  5501 08:0E16: A5 01        	lda	<R0
  5502 08:0E18: 85 01        	sta	<R0
  5503 08:0E1A: 64 03        	stz	<R0+2
  5504 08:0E1C: 18           	clc
  5505 08:0E1D: A5 01        	lda	<R0
  5506 08:0E1F: A0 23 00     	ldy	#$23
  5507 08:0E22: 77 1C        	adc	[<L160+fs_0],Y
  5508 08:0E24: 85 05        	sta	<R1
  5509 08:0E26: A5 03        	lda	<R0+2
  5510 08:0E28: A0 25 00     	ldy	#$25
  5511 08:0E2B: 77 1C        	adc	[<L160+fs_0],Y
  5512 08:0E2D: 85 07        	sta	<R1+2
  5513 08:0E2F: D4 07        	pei	<R1+2
  5514 08:0E31: D4 05        	pei	<R1
  5515 08:0E33: D4 1E        	pei	<L160+fs_0+2
  5516 08:0E35: D4 1C        	pei	<L160+fs_0
  5517 08:0E37: 22 C1 08 08  	jsl	~~move_window
  5518 08:0E3B: 85 17        	sta	<L161+res_1
  5519                        ;			if (res != FR_OK)
  5520                        	.line	1348
  5521                        ;				break;
  5522 08:0E3D: A5 17        	lda	<L161+res_1
  5523 08:0E3F: F0 03        	beq	L165
  5524 08:0E41: 82 B2 02     	brl	L10058
  5525                        L165:
  5526                        ;			p = fs->win + bc++ % SS(fs);
  5527                        	.line	1350
  5528 08:0E44: A5 11        	lda	<L161+bc_1
  5529 08:0E46: 29 FF 01     	and	#<$1ff
  5530 08:0E49: 85 01        	sta	<R0
  5531 08:0E4B: A5 01        	lda	<R0
  5532 08:0E4D: 85 01        	sta	<R0
  5533 08:0E4F: 64 03        	stz	<R0+2
  5534 08:0E51: 18           	clc
  5535 08:0E52: A9 33 00     	lda	#$33
  5536 08:0E55: 65 01        	adc	<R0
  5537 08:0E57: 85 05        	sta	<R1
  Sat Jul 10 2021  1:15                                                Page 112


  5538 08:0E59: A9 00 00     	lda	#$0
  5539 08:0E5C: 65 03        	adc	<R0+2
  5540 08:0E5E: 85 07        	sta	<R1+2
  5541 08:0E60: 18           	clc
  5542 08:0E61: A5 1C        	lda	<L160+fs_0
  5543 08:0E63: 65 05        	adc	<R1
  5544 08:0E65: 85 13        	sta	<L161+p_1
  5545 08:0E67: A5 1E        	lda	<L160+fs_0+2
  5546 08:0E69: 65 07        	adc	<R1+2
  5547 08:0E6B: 85 15        	sta	<L161+p_1+2
  5548 08:0E6D: E6 11        	inc	<L161+bc_1
  5549                        ;			*p = (clst & 1) ? ((*p & 0x0F) |
                     ((BYTE) val << 4)) : (BYTE) val; /* Update 1st byte */
  5550                        	.line	1351
  5551 08:0E6F: A5 20        	lda	<L160+clst_0
  5552 08:0E71: 29 01 00     	and	#<$1
  5553 08:0E74: D0 03        	bne	L167
  5554 08:0E76: 82 1C 00     	brl	L166
  5555                        L167:
  5556 08:0E79: A7 13        	lda	[<L161+p_1]
  5557 08:0E7B: 29 0F 00     	and	#<$f
  5558 08:0E7E: 85 01        	sta	<R0
  5559 08:0E80: A5 24        	lda	<L160+val_0
  5560 08:0E82: 29 FF 00     	and	#$ff
  5561 08:0E85: 85 09        	sta	<R2
  5562 08:0E87: A5 09        	lda	<R2
  5563 08:0E89: 0A           	asl	A
  5564 08:0E8A: 0A           	asl	A
  5565 08:0E8B: 0A           	asl	A
  5566 08:0E8C: 0A           	asl	A
  5567 08:0E8D: 85 05        	sta	<R1
  5568 08:0E8F: A5 05        	lda	<R1
  5569 08:0E91: 05 01        	ora	<R0
  5570 08:0E93: 80 05        	bra	L168
  5571                        L166:
  5572 08:0E95: A5 24        	lda	<L160+val_0
  5573 08:0E97: 29 FF 00     	and	#$ff
  5574                        L168:
  5575 08:0E9A: E2 20        	sep	#$20
  5576                        	longa	off
  5577 08:0E9C: 87 13        	sta	[<L161+p_1]
  5578 08:0E9E: C2 20        	rep	#$20
  5579                        	longa	on
  5580                        ;			fs->wflag = 1;
  5581                        	.line	1352
  5582 08:0EA0: E2 20        	sep	#$20
  5583                        	longa	off
  5584 08:0EA2: A9 01        	lda	#$1
  5585 08:0EA4: A0 03 00     	ldy	#$3
  5586 08:0EA7: 97 1C        	sta	[<L160+fs_0],Y
  5587 08:0EA9: C2 20        	rep	#$20
  5588                        	longa	on
  5589                        ;			res = move_window(fs, fs->fatbas
                    e + (bc / SS(fs)));
  5590                        	.line	1353
  5591 08:0EAB: A5 11        	lda	<L161+bc_1
  5592 08:0EAD: A2 09 00     	ldx	#<$9
  5593                        	xref	~~~lsr
  Sat Jul 10 2021  1:15                                                Page 113


  5594 08:0EB0: 22 xx xx xx  	jsl	~~~lsr
  5595 08:0EB4: 85 01        	sta	<R0
  5596 08:0EB6: A5 01        	lda	<R0
  5597 08:0EB8: 85 01        	sta	<R0
  5598 08:0EBA: 64 03        	stz	<R0+2
  5599 08:0EBC: 18           	clc
  5600 08:0EBD: A5 01        	lda	<R0
  5601 08:0EBF: A0 23 00     	ldy	#$23
  5602 08:0EC2: 77 1C        	adc	[<L160+fs_0],Y
  5603 08:0EC4: 85 05        	sta	<R1
  5604 08:0EC6: A5 03        	lda	<R0+2
  5605 08:0EC8: A0 25 00     	ldy	#$25
  5606 08:0ECB: 77 1C        	adc	[<L160+fs_0],Y
  5607 08:0ECD: 85 07        	sta	<R1+2
  5608 08:0ECF: D4 07        	pei	<R1+2
  5609 08:0ED1: D4 05        	pei	<R1
  5610 08:0ED3: D4 1E        	pei	<L160+fs_0+2
  5611 08:0ED5: D4 1C        	pei	<L160+fs_0
  5612 08:0ED7: 22 C1 08 08  	jsl	~~move_window
  5613 08:0EDB: 85 17        	sta	<L161+res_1
  5614                        ;			if (res != FR_OK)
  5615                        	.line	1354
  5616                        ;				break;
  5617 08:0EDD: A5 17        	lda	<L161+res_1
  5618 08:0EDF: F0 03        	beq	L169
  5619 08:0EE1: 82 12 02     	brl	L10058
  5620                        L169:
  5621                        ;			p = fs->win + bc % SS(fs);
  5622                        	.line	1356
  5623 08:0EE4: A5 11        	lda	<L161+bc_1
  5624 08:0EE6: 29 FF 01     	and	#<$1ff
  5625 08:0EE9: 85 01        	sta	<R0
  5626 08:0EEB: A5 01        	lda	<R0
  5627 08:0EED: 85 01        	sta	<R0
  5628 08:0EEF: 64 03        	stz	<R0+2
  5629 08:0EF1: 18           	clc
  5630 08:0EF2: A9 33 00     	lda	#$33
  5631 08:0EF5: 65 01        	adc	<R0
  5632 08:0EF7: 85 05        	sta	<R1
  5633 08:0EF9: A9 00 00     	lda	#$0
  5634 08:0EFC: 65 03        	adc	<R0+2
  5635 08:0EFE: 85 07        	sta	<R1+2
  5636 08:0F00: 18           	clc
  5637 08:0F01: A5 1C        	lda	<L160+fs_0
  5638 08:0F03: 65 05        	adc	<R1
  5639 08:0F05: 85 13        	sta	<L161+p_1
  5640 08:0F07: A5 1E        	lda	<L160+fs_0+2
  5641 08:0F09: 65 07        	adc	<R1+2
  5642 08:0F0B: 85 15        	sta	<L161+p_1+2
  5643                        ;			*p = (clst & 1) ?
  5644                        	.line	1357
  5645                        ;					(BYTE) (val >> 4
                    ) :
  5646                        ;					((*p & 0xF0) | (
                    (BYTE) (val >> 8) & 0x0F)); /* Update 2nd byte */
  5647 08:0F0D: A5 20        	lda	<L160+clst_0
  5648 08:0F0F: 29 01 00     	and	#<$1
  5649 08:0F12: D0 03        	bne	L171
  Sat Jul 10 2021  1:15                                                Page 114


  5650 08:0F14: 82 1F 00     	brl	L170
  5651                        L171:
  5652 08:0F17: A5 24        	lda	<L160+val_0
  5653 08:0F19: 85 01        	sta	<R0
  5654 08:0F1B: A5 26        	lda	<L160+val_0+2
  5655 08:0F1D: 85 03        	sta	<R0+2
  5656 08:0F1F: 46 03        	lsr	<R0+2
  5657 08:0F21: 66 01        	ror	<R0
  5658 08:0F23: 46 03        	lsr	<R0+2
  5659 08:0F25: 66 01        	ror	<R0
  5660 08:0F27: 46 03        	lsr	<R0+2
  5661 08:0F29: 66 01        	ror	<R0
  5662 08:0F2B: 46 03        	lsr	<R0+2
  5663 08:0F2D: 66 01        	ror	<R0
  5664 08:0F2F: A5 01        	lda	<R0
  5665 08:0F31: 29 FF 00     	and	#$ff
  5666 08:0F34: 80 21        	bra	L172
  5667                        L170:
  5668 08:0F36: D4 26        	pei	<L160+val_0+2
  5669 08:0F38: D4 24        	pei	<L160+val_0
  5670 08:0F3A: A9 08 00     	lda	#$8
  5671                        	xref	~~~llsr
  5672 08:0F3D: 22 xx xx xx  	jsl	~~~llsr
  5673 08:0F41: 85 01        	sta	<R0
  5674 08:0F43: 86 03        	stx	<R0+2
  5675 08:0F45: A5 01        	lda	<R0
  5676 08:0F47: 29 0F 00     	and	#<$f
  5677 08:0F4A: 85 05        	sta	<R1
  5678 08:0F4C: A7 13        	lda	[<L161+p_1]
  5679 08:0F4E: 29 F0 00     	and	#<$f0
  5680 08:0F51: 85 01        	sta	<R0
  5681 08:0F53: A5 01        	lda	<R0
  5682 08:0F55: 05 05        	ora	<R1
  5683                        L172:
  5684 08:0F57: E2 20        	sep	#$20
  5685                        	longa	off
  5686 08:0F59: 87 13        	sta	[<L161+p_1]
  5687 08:0F5B: C2 20        	rep	#$20
  5688                        	longa	on
  5689                        ;			fs->wflag = 1;
  5690                        	.line	1360
  5691 08:0F5D: E2 20        	sep	#$20
  5692                        	longa	off
  5693 08:0F5F: A9 01        	lda	#$1
  5694 08:0F61: A0 03 00     	ldy	#$3
  5695 08:0F64: 97 1C        	sta	[<L160+fs_0],Y
  5696 08:0F66: C2 20        	rep	#$20
  5697                        	longa	on
  5698                        ;			break;
  5699                        	.line	1361
  5700 08:0F68: 82 8B 01     	brl	L10058
  5701                        ;
  5702                        ;		case FS_FAT16:
  5703                        	.line	1363
  5704                        L10060:
  5705                        ;			res = move_window(fs, fs->fatbas
                    e + (clst / (SS(fs) / 2)));
  5706                        	.line	1364
  Sat Jul 10 2021  1:15                                                Page 115


  5707 08:0F6B: D4 22        	pei	<L160+clst_0+2
  5708 08:0F6D: D4 20        	pei	<L160+clst_0
  5709 08:0F6F: A9 08 00     	lda	#$8
  5710                        	xref	~~~llsr
  5711 08:0F72: 22 xx xx xx  	jsl	~~~llsr
  5712 08:0F76: 85 01        	sta	<R0
  5713 08:0F78: 86 03        	stx	<R0+2
  5714 08:0F7A: 18           	clc
  5715 08:0F7B: A5 01        	lda	<R0
  5716 08:0F7D: A0 23 00     	ldy	#$23
  5717 08:0F80: 77 1C        	adc	[<L160+fs_0],Y
  5718 08:0F82: 85 05        	sta	<R1
  5719 08:0F84: A5 03        	lda	<R0+2
  5720 08:0F86: A0 25 00     	ldy	#$25
  5721 08:0F89: 77 1C        	adc	[<L160+fs_0],Y
  5722 08:0F8B: 85 07        	sta	<R1+2
  5723 08:0F8D: D4 07        	pei	<R1+2
  5724 08:0F8F: D4 05        	pei	<R1
  5725 08:0F91: D4 1E        	pei	<L160+fs_0+2
  5726 08:0F93: D4 1C        	pei	<L160+fs_0
  5727 08:0F95: 22 C1 08 08  	jsl	~~move_window
  5728 08:0F99: 85 17        	sta	<L161+res_1
  5729                        ;			if (res != FR_OK)
  5730                        	.line	1365
  5731                        ;				break;
  5732 08:0F9B: A5 17        	lda	<L161+res_1
  5733 08:0F9D: F0 03        	beq	L173
  5734 08:0F9F: 82 54 01     	brl	L10058
  5735                        L173:
  5736                        ;			st_word(fs->win + clst * 2 % SS(
                    fs), (WORD) val); /* Simple WORD array */
  5737                        	.line	1367
  5738 08:0FA2: D4 24        	pei	<L160+val_0
  5739 08:0FA4: A5 20        	lda	<L160+clst_0
  5740 08:0FA6: 85 01        	sta	<R0
  5741 08:0FA8: A5 22        	lda	<L160+clst_0+2
  5742 08:0FAA: 85 03        	sta	<R0+2
  5743 08:0FAC: 06 01        	asl	<R0
  5744 08:0FAE: 26 03        	rol	<R0+2
  5745 08:0FB0: A5 01        	lda	<R0
  5746 08:0FB2: 29 FF 01     	and	#<$1ff
  5747 08:0FB5: 85 05        	sta	<R1
  5748 08:0FB7: 64 07        	stz	<R1+2
  5749 08:0FB9: 18           	clc
  5750 08:0FBA: A9 33 00     	lda	#$33
  5751 08:0FBD: 65 05        	adc	<R1
  5752 08:0FBF: 85 01        	sta	<R0
  5753 08:0FC1: A9 00 00     	lda	#$0
  5754 08:0FC4: 65 07        	adc	<R1+2
  5755 08:0FC6: 85 03        	sta	<R0+2
  5756 08:0FC8: 18           	clc
  5757 08:0FC9: A5 1C        	lda	<L160+fs_0
  5758 08:0FCB: 65 01        	adc	<R0
  5759 08:0FCD: 85 05        	sta	<R1
  5760 08:0FCF: A5 1E        	lda	<L160+fs_0+2
  5761 08:0FD1: 65 03        	adc	<R0+2
  5762 08:0FD3: 85 07        	sta	<R1+2
  5763 08:0FD5: D4 07        	pei	<R1+2
  Sat Jul 10 2021  1:15                                                Page 116


  5764 08:0FD7: D4 05        	pei	<R1
  5765 08:0FD9: 22 D7 00 08  	jsl	~~st_word
  5766                        ;			fs->wflag = 1;
  5767                        	.line	1368
  5768 08:0FDD: E2 20        	sep	#$20
  5769                        	longa	off
  5770 08:0FDF: A9 01        	lda	#$1
  5771 08:0FE1: A0 03 00     	ldy	#$3
  5772 08:0FE4: 97 1C        	sta	[<L160+fs_0],Y
  5773 08:0FE6: C2 20        	rep	#$20
  5774                        	longa	on
  5775                        ;			break;
  5776                        	.line	1369
  5777 08:0FE8: 82 0B 01     	brl	L10058
  5778                        ;
  5779                        ;		case FS_FAT32:
  5780                        	.line	1371
  5781                        L10061:
  5782                        ;#if FF_FS_EXFAT
  5783                        ;			case FS_EXFAT :
  5784                        ;#endif
  5785                        ;			res = move_window(fs, fs->fatbas
                    e + (clst / (SS(fs) / 4)));
  5786                        	.line	1375
  5787 08:0FEB: D4 22        	pei	<L160+clst_0+2
  5788 08:0FED: D4 20        	pei	<L160+clst_0
  5789 08:0FEF: A9 07 00     	lda	#$7
  5790                        	xref	~~~llsr
  5791 08:0FF2: 22 xx xx xx  	jsl	~~~llsr
  5792 08:0FF6: 85 01        	sta	<R0
  5793 08:0FF8: 86 03        	stx	<R0+2
  5794 08:0FFA: 18           	clc
  5795 08:0FFB: A5 01        	lda	<R0
  5796 08:0FFD: A0 23 00     	ldy	#$23
  5797 08:1000: 77 1C        	adc	[<L160+fs_0],Y
  5798 08:1002: 85 05        	sta	<R1
  5799 08:1004: A5 03        	lda	<R0+2
  5800 08:1006: A0 25 00     	ldy	#$25
  5801 08:1009: 77 1C        	adc	[<L160+fs_0],Y
  5802 08:100B: 85 07        	sta	<R1+2
  5803 08:100D: D4 07        	pei	<R1+2
  5804 08:100F: D4 05        	pei	<R1
  5805 08:1011: D4 1E        	pei	<L160+fs_0+2
  5806 08:1013: D4 1C        	pei	<L160+fs_0
  5807 08:1015: 22 C1 08 08  	jsl	~~move_window
  5808 08:1019: 85 17        	sta	<L161+res_1
  5809                        ;			if (res != FR_OK)
  5810                        	.line	1376
  5811                        ;				break;
  5812 08:101B: A5 17        	lda	<L161+res_1
  5813 08:101D: F0 03        	beq	L174
  5814 08:101F: 82 D4 00     	brl	L10058
  5815                        L174:
  5816                        ;			if (!FF_FS_EXFAT || fs->fs_type 
                    != FS_EXFAT)
  5817                        	.line	1378
  5818                        ;			{
  5819 08:1022: 82 0D 00     	brl	L175
  Sat Jul 10 2021  1:15                                                Page 117


  5820 08:1025: E2 20        	sep	#$20
  5821                        	longa	off
  5822 08:1027: A7 1C        	lda	[<L160+fs_0]
  5823 08:1029: C9 04        	cmp	#<$4
  5824 08:102B: C2 20        	rep	#$20
  5825                        	longa	on
  5826 08:102D: D0 03        	bne	L176
  5827 08:102F: 82 61 00     	brl	L10062
  5828                        L176:
  5829                        L175:
  5830                        	.line	1379
  5831                        ;				val = (val & 0x0FFFFFFF)
  5832                        	.line	1380
  5833                        ;						| (ld_dw
                    ord(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
  5834 08:1032: A5 20        	lda	<L160+clst_0
  5835 08:1034: 85 01        	sta	<R0
  5836 08:1036: A5 22        	lda	<L160+clst_0+2
  5837 08:1038: 85 03        	sta	<R0+2
  5838 08:103A: 06 01        	asl	<R0
  5839 08:103C: 26 03        	rol	<R0+2
  5840 08:103E: 06 01        	asl	<R0
  5841 08:1040: 26 03        	rol	<R0+2
  5842 08:1042: A5 01        	lda	<R0
  5843 08:1044: 29 FF 01     	and	#<$1ff
  5844 08:1047: 85 05        	sta	<R1
  5845 08:1049: 64 07        	stz	<R1+2
  5846 08:104B: 18           	clc
  5847 08:104C: A9 33 00     	lda	#$33
  5848 08:104F: 65 05        	adc	<R1
  5849 08:1051: 85 01        	sta	<R0
  5850 08:1053: A9 00 00     	lda	#$0
  5851 08:1056: 65 07        	adc	<R1+2
  5852 08:1058: 85 03        	sta	<R0+2
  5853 08:105A: 18           	clc
  5854 08:105B: A5 1C        	lda	<L160+fs_0
  5855 08:105D: 65 01        	adc	<R0
  5856 08:105F: 85 05        	sta	<R1
  5857 08:1061: A5 1E        	lda	<L160+fs_0+2
  5858 08:1063: 65 03        	adc	<R0+2
  5859 08:1065: 85 07        	sta	<R1+2
  5860 08:1067: D4 07        	pei	<R1+2
  5861 08:1069: D4 05        	pei	<R1
  5862 08:106B: 22 3B 00 08  	jsl	~~ld_dword
  5863 08:106F: 85 09        	sta	<R2
  5864 08:1071: 86 0B        	stx	<R2+2
  5865 08:1073: 64 0D        	stz	<R3
  5866 08:1075: A5 0B        	lda	<R2+2
  5867 08:1077: 29 00 F0     	and	#^$f0000000
  5868 08:107A: 85 0F        	sta	<R3+2
  5869 08:107C: A5 24        	lda	<L160+val_0
  5870 08:107E: 85 09        	sta	<R2
  5871 08:1080: A5 26        	lda	<L160+val_0+2
  5872 08:1082: 29 FF 0F     	and	#^$fffffff
  5873 08:1085: 85 0B        	sta	<R2+2
  5874 08:1087: A5 09        	lda	<R2
  5875 08:1089: 05 0D        	ora	<R3
  5876 08:108B: 85 24        	sta	<L160+val_0
  Sat Jul 10 2021  1:15                                                Page 118


  5877 08:108D: A5 0B        	lda	<R2+2
  5878 08:108F: 05 0F        	ora	<R3+2
  5879 08:1091: 85 26        	sta	<L160+val_0+2
  5880                        ;			}
  5881                        	.line	1382
  5882                        ;			st_dword(fs->win + clst * 4 % SS
                    (fs), val);
  5883                        L10062:
  5884                        	.line	1383
  5885 08:1093: D4 26        	pei	<L160+val_0+2
  5886 08:1095: D4 24        	pei	<L160+val_0
  5887 08:1097: A5 20        	lda	<L160+clst_0
  5888 08:1099: 85 01        	sta	<R0
  5889 08:109B: A5 22        	lda	<L160+clst_0+2
  5890 08:109D: 85 03        	sta	<R0+2
  5891 08:109F: 06 01        	asl	<R0
  5892 08:10A1: 26 03        	rol	<R0+2
  5893 08:10A3: 06 01        	asl	<R0
  5894 08:10A5: 26 03        	rol	<R0+2
  5895 08:10A7: A5 01        	lda	<R0
  5896 08:10A9: 29 FF 01     	and	#<$1ff
  5897 08:10AC: 85 05        	sta	<R1
  5898 08:10AE: 64 07        	stz	<R1+2
  5899 08:10B0: 18           	clc
  5900 08:10B1: A9 33 00     	lda	#$33
  5901 08:10B4: 65 05        	adc	<R1
  5902 08:10B6: 85 01        	sta	<R0
  5903 08:10B8: A9 00 00     	lda	#$0
  5904 08:10BB: 65 07        	adc	<R1+2
  5905 08:10BD: 85 03        	sta	<R0+2
  5906 08:10BF: 18           	clc
  5907 08:10C0: A5 1C        	lda	<L160+fs_0
  5908 08:10C2: 65 01        	adc	<R0
  5909 08:10C4: 85 05        	sta	<R1
  5910 08:10C6: A5 1E        	lda	<L160+fs_0+2
  5911 08:10C8: 65 03        	adc	<R0+2
  5912 08:10CA: 85 07        	sta	<R1+2
  5913 08:10CC: D4 07        	pei	<R1+2
  5914 08:10CE: D4 05        	pei	<R1
  5915 08:10D0: 22 16 01 08  	jsl	~~st_dword
  5916                        ;			fs->wflag = 1;
  5917                        	.line	1384
  5918 08:10D4: E2 20        	sep	#$20
  5919                        	longa	off
  5920 08:10D6: A9 01        	lda	#$1
  5921 08:10D8: A0 03 00     	ldy	#$3
  5922 08:10DB: 97 1C        	sta	[<L160+fs_0],Y
  5923 08:10DD: C2 20        	rep	#$20
  5924                        	longa	on
  5925                        ;			break;
  5926                        	.line	1385
  5927 08:10DF: 82 14 00     	brl	L10058
  5928                        ;		}
  5929                        	.line	1386
  5930                        L10057:
  5931                        	xref	~~~swt
  5932 08:10E2: 22 xx xx xx  	jsl	~~~swt
  5933 08:10E6: 03 00        	dw	3
  Sat Jul 10 2021  1:15                                                Page 119


  5934 08:10E8: 01 00        	dw	1
  5935 08:10EA: FA 0D        	dw	L10059-1
  5936 08:10EC: 02 00        	dw	2
  5937 08:10EE: 6A 0F        	dw	L10060-1
  5938 08:10F0: 03 00        	dw	3
  5939 08:10F2: EA 0F        	dw	L10061-1
  5940 08:10F4: F5 10        	dw	L10058-1
  5941                        L10058:
  5942                        ;	}
  5943                        	.line	1387
  5944                        ;	return res;
  5945                        L10056:
  5946                        	.line	1388
  5947 08:10F6: A5 17        	lda	<L161+res_1
  5948                        L177:
  5949 08:10F8: A8           	tay
  5950 08:10F9: A5 1A        	lda	<L160+2
  5951 08:10FB: 85 26        	sta	<L160+2+12
  5952 08:10FD: A5 19        	lda	<L160+1
  5953 08:10FF: 85 25        	sta	<L160+1+12
  5954 08:1101: 2B           	pld
  5955 08:1102: 3B           	tsc
  5956 08:1103: 18           	clc
  5957 08:1104: 69 24 00     	adc	#L160+12
  5958 08:1107: 1B           	tcs
  5959 08:1108: 98           	tya
  5960 08:1109: 6B           	rtl
  5961                        ;}
  5962                        	.line	1389
  5963                        	.endblock	1389
  5964             00000018   L160	equ	24
  5965             00000011   L161	equ	17
  5966 08:110A:              	ends
  5967                        	efunc
  5968                        	.endfunc	1389,17,24
  5969                        	.line	1389
  5970                        ;
  5971                        ;#endif /* !FF_FS_READONLY */
  5972                        ;
  5973                        ;#if FF_FS_EXFAT && !FF_FS_READONLY
  5974                        ;/*-----------------------------------------------
                    ------------------------*/
  5975                        ;/* exFAT: Accessing FAT and Allocation Bitmap    
                                            */
  5976                        ;/*-----------------------------------------------
                    ------------------------*/
  5977                        ;
  5978                        ;/*--------------------------------------*/
  5979                        ;/* Find a contiguous free cluster block */
  5980                        ;/*--------------------------------------*/
  5981                        ;
  5982                        ;static DWORD find_bitmap ( /* 0:Not found, 2..:Cl
                    uster block found, 0xFFFFFFFF:Disk error */
  5983                        ;		FATFS* fs, /* Filesystem object */
  5984                        ;		DWORD clst, /* Cluster number to scan fr
                    om */
  5985                        ;		DWORD ncl /* Number of contiguous cluste
                    rs to find (1..) */
  Sat Jul 10 2021  1:15                                                Page 120


  5986                        ;)
  5987                        ;{
  5988                        ;	BYTE bm, bv;
  5989                        ;	UINT i;
  5990                        ;	DWORD val, scl, ctr;
  5991                        ;
  5992                        ;	clst -= 2; /* The first bit in the bitmap corres
                    ponds to cluster #2 */
  5993                        ;	if (clst >= fs->n_fatent - 2) clst = 0;
  5994                        ;	scl = val = clst; ctr = 0;
  5995                        ;	for (;;)
  5996                        ;	{
  5997                        ;		if (move_window(fs, fs->bitbase + val / 
                    8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
  5998                        ;		i = val / 8 % SS(fs); bm = 1 << (val % 8
                    );
  5999                        ;		do
  6000                        ;		{
  6001                        ;			do
  6002                        ;			{
  6003                        ;				bv = fs->win[i] & bm; bm
                     <<= 1; /* Get bit value */
  6004                        ;				if (++val >= fs->n_faten
                    t - 2)
  6005                        ;				{ /* Next cluster (with 
                    wrap-around) */
  6006                        ;					val = 0; bm = 0;
                     i = SS(fs);
  6007                        ;				}
  6008                        ;				if (bv == 0)
  6009                        ;				{ /* Is it a free cluste
                    r? */
  6010                        ;					if (++ctr == ncl
                    ) return scl + 2; /* Check if run length is sufficient for r
                    equired */
  6011                        ;				}
  6012                        ;				else
  6013                        ;				{
  6014                        ;					scl = val; ctr =
                     0; /* Encountered a cluster in-use, restart to scan */
  6015                        ;				}
  6016                        ;				if (val == clst) return 
                    0; /* All cluster scanned? */
  6017                        ;			}while (bm != 0);
  6018                        ;			bm = 1;
  6019                        ;		}while (++i < SS(fs));
  6020                        ;	}
  6021                        ;}
  6022                        ;
  6023                        ;/*----------------------------------------*/
  6024                        ;/* Set/Clear a block of allocation bitmap */
  6025                        ;/*----------------------------------------*/
  6026                        ;
  6027                        ;static FRESULT change_bitmap (
  6028                        ;		FATFS* fs, /* Filesystem object */
  6029                        ;		DWORD clst, /* Cluster number to change 
                    from */
  6030                        ;		DWORD ncl, /* Number of clusters to be c
  Sat Jul 10 2021  1:15                                                Page 121


                    hanged */
  6031                        ;		int bv /* bit value to be set (0 or 1) *
                    /
  6032                        ;)
  6033                        ;{
  6034                        ;	BYTE bm;
  6035                        ;	UINT i;
  6036                        ;	LBA_t sect;
  6037                        ;
  6038                        ;	clst -= 2; /* The first bit corresponds to clust
                    er #2 */
  6039                        ;	sect = fs->bitbase + clst / 8 / SS(fs); /* Secto
                    r address */
  6040                        ;	i = clst / 8 % SS(fs); /* Byte offset in the sec
                    tor */
  6041                        ;	bm = 1 << (clst % 8); /* Bit mask in the byte */
  6042                        ;	for (;;)
  6043                        ;	{
  6044                        ;		if (move_window(fs, sect++) != FR_OK) re
                    turn FR_DISK_ERR;
  6045                        ;		do
  6046                        ;		{
  6047                        ;			do
  6048                        ;			{
  6049                        ;				if (bv == (int)((fs->win
                    [i] & bm) != 0)) return FR_INT_ERR; /* Is the bit expected v
                    alue? */
  6050                        ;				fs->win[i] ^= bm; /* Fli
                    p the bit */
  6051                        ;				fs->wflag = 1;
  6052                        ;				if (--ncl == 0) return F
                    R_OK; /* All bits processed? */
  6053                        ;			}while (bm <<= 1); /* Next bit *
                    /
  6054                        ;			bm = 1;
  6055                        ;		}while (++i < SS(fs)); /* Next byte */
  6056                        ;		i = 0;
  6057                        ;	}
  6058                        ;}
  6059                        ;
  6060                        ;/*---------------------------------------------*/
  6061                        ;/* Fill the first fragment of the FAT chain    */
  6062                        ;/*---------------------------------------------*/
  6063                        ;
  6064                        ;static FRESULT fill_first_frag (
  6065                        ;		FFOBJID* obj /* Pointer to the correspon
                    ding object */
  6066                        ;)
  6067                        ;{
  6068                        ;	FRESULT res;
  6069                        ;	DWORD cl, n;
  6070                        ;
  6071                        ;	if (obj->stat == 3)
  6072                        ;	{ /* Has the object been changed 'fragmented' in
                     this session? */
  6073                        ;		for (cl = obj->sclust, n = obj->n_cont; 
                    n; cl++, n--)
  6074                        ;		{ /* Create cluster chain on the FAT */
  Sat Jul 10 2021  1:15                                                Page 122


  6075                        ;			res = put_fat(obj->fs, cl, cl + 
                    1);
  6076                        ;			if (res != FR_OK) return res;
  6077                        ;		}
  6078                        ;		obj->stat = 0; /* Change status 'FAT cha
                    in is valid' */
  6079                        ;	}
  6080                        ;	return FR_OK;
  6081                        ;}
  6082                        ;
  6083                        ;/*---------------------------------------------*/
  6084                        ;/* Fill the last fragment of the FAT chain     */
  6085                        ;/*---------------------------------------------*/
  6086                        ;
  6087                        ;static FRESULT fill_last_frag (
  6088                        ;		FFOBJID* obj, /* Pointer to the correspo
                    nding object */
  6089                        ;		DWORD lcl, /* Last cluster of the fragme
                    nt */
  6090                        ;		DWORD term /* Value to set the last FAT 
                    entry */
  6091                        ;)
  6092                        ;{
  6093                        ;	FRESULT res;
  6094                        ;
  6095                        ;	while (obj->n_frag > 0)
  6096                        ;	{ /* Create the chain of last fragment */
  6097                        ;		res = put_fat(obj->fs, lcl - obj->n_frag
                     + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
  6098                        ;		if (res != FR_OK) return res;
  6099                        ;		obj->n_frag--;
  6100                        ;	}
  6101                        ;	return FR_OK;
  6102                        ;}
  6103                        ;
  6104                        ;#endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
  6105                        ;
  6106                        ;#if !FF_FS_READONLY
  6107                        ;/*-----------------------------------------------
                    ------------------------*/
  6108                        ;/* FAT handling - Remove a cluster chain         
                                            */
  6109                        ;/*-----------------------------------------------
                    ------------------------*/
  6110                        ;
  6111                        ;static FRESULT remove_chain( /* FR_OK(0):succeede
                    d, !=0:error */
  6112                        ;FFOBJID* obj, /* Corresponding object */
  6113                        ;DWORD clst, /* Cluster to remove a chain from */
  6114                        ;DWORD pclst /* Previous cluster of clst (0 if ent
                    ire chain) */
  6115                        ;)
  6116                        ;{
  6117                        	.line	1531
  6118                        	.line	1536
  6119                        	FFDOS
  6120                        	func
  6121                        	.function	1536
  Sat Jul 10 2021  1:15                                                Page 123


  6122                        ~~remove_chain:
  6123                        	longa	on
  6124                        	longi	on
  6125 08:110A: 3B           	tsc
  6126 08:110B: 38           	sec
  6127 08:110C: E9 0E 00     	sbc	#L178
  6128 08:110F: 1B           	tcs
  6129 08:1110: 0B           	phd
  6130 08:1111: 5B           	tcd
  6131             00000004   obj_0	set	4
  6132             00000008   clst_0	set	8
  6133             0000000C   pclst_0	set	12
  6134                        	.block	1536
  6135                        ;	FRESULT res = FR_OK;
  6136                        ;	DWORD nxt;
  6137                        ;	FATFS *fs = obj->fs;
  6138                        ;#if FF_FS_EXFAT || FF_USE_TRIM
  6139                        ;	DWORD scl = clst, ecl = clst;
  6140                        ;#endif
  6141                        ;#if FF_USE_TRIM
  6142                        ;	LBA_t rt[2];
  6143                        ;#endif
  6144                        ;
  6145                        ;	if (clst < 2 || clst >= fs->n_fatent)
  6146             00000000   res_1	set	0
  6147             00000002   nxt_1	set	2
  6148             00000006   fs_1	set	6
  6149                        	.sym	res,0,5,1,16
  6150                        	.sym	nxt,2,18,1,32
  6151                        	.sym	fs,6,138,1,32,72
  6152                        	.sym	obj,4,138,6,32,73
  6153                        	.sym	clst,8,18,6,32
  6154                        	.sym	pclst,12,18,6,32
  6155 08:1112: 64 05        	stz	<L179+res_1
  6156 08:1114: A7 12        	lda	[<L178+obj_0]
  6157 08:1116: 85 0B        	sta	<L179+fs_1
  6158 08:1118: A0 02 00     	ldy	#$2
  6159 08:111B: B7 12        	lda	[<L178+obj_0],Y
  6160 08:111D: 85 0D        	sta	<L179+fs_1+2
  6161                        	.line	1547
  6162                        ;		return FR_INT_ERR; /* Check if in valid 
                    range */
  6163 08:111F: A5 16        	lda	<L178+clst_0
  6164 08:1121: C9 02 00     	cmp	#<$2
  6165 08:1124: A5 18        	lda	<L178+clst_0+2
  6166 08:1126: E9 00 00     	sbc	#^$2
  6167 08:1129: B0 03        	bcs	L182
  6168 08:112B: 82 13 00     	brl	L181
  6169                        L182:
  6170 08:112E: A5 16        	lda	<L178+clst_0
  6171 08:1130: A0 17 00     	ldy	#$17
  6172 08:1133: D7 0B        	cmp	[<L179+fs_1],Y
  6173 08:1135: A5 18        	lda	<L178+clst_0+2
  6174 08:1137: A0 19 00     	ldy	#$19
  6175 08:113A: F7 0B        	sbc	[<L179+fs_1],Y
  6176 08:113C: B0 03        	bcs	L183
  6177 08:113E: 82 15 00     	brl	L10063
  6178                        L183:
  Sat Jul 10 2021  1:15                                                Page 124


  6179                        L181:
  6180                        	.line	1548
  6181 08:1141: A9 02 00     	lda	#$2
  6182                        L184:
  6183 08:1144: A8           	tay
  6184 08:1145: A5 10        	lda	<L178+2
  6185 08:1147: 85 1C        	sta	<L178+2+12
  6186 08:1149: A5 0F        	lda	<L178+1
  6187 08:114B: 85 1B        	sta	<L178+1+12
  6188 08:114D: 2B           	pld
  6189 08:114E: 3B           	tsc
  6190 08:114F: 18           	clc
  6191 08:1150: 69 1A 00     	adc	#L178+12
  6192 08:1153: 1B           	tcs
  6193 08:1154: 98           	tya
  6194 08:1155: 6B           	rtl
  6195                        ;
  6196                        ;	/* Mark the previous cluster 'EOC' on the FAT if
                     it exists */
  6197                        ;	if (pclst != 0
  6198                        L10063:
  6199                        	.line	1551
  6200                        ;			&& (!FF_FS_EXFAT || fs->fs_type 
                    != FS_EXFAT || obj->stat != 2))
  6201                        ;	{
  6202 08:1156: A5 1A        	lda	<L178+pclst_0
  6203 08:1158: 05 1C        	ora	<L178+pclst_0+2
  6204 08:115A: D0 03        	bne	L185
  6205 08:115C: 82 40 00     	brl	L10064
  6206                        L185:
  6207 08:115F: 82 1D 00     	brl	L186
  6208 08:1162: E2 20        	sep	#$20
  6209                        	longa	off
  6210 08:1164: A7 0B        	lda	[<L179+fs_1]
  6211 08:1166: C9 04        	cmp	#<$4
  6212 08:1168: C2 20        	rep	#$20
  6213                        	longa	on
  6214 08:116A: F0 03        	beq	L187
  6215 08:116C: 82 10 00     	brl	L186
  6216                        L187:
  6217 08:116F: E2 20        	sep	#$20
  6218                        	longa	off
  6219 08:1171: A0 07 00     	ldy	#$7
  6220 08:1174: B7 12        	lda	[<L178+obj_0],Y
  6221 08:1176: C9 02        	cmp	#<$2
  6222 08:1178: C2 20        	rep	#$20
  6223                        	longa	on
  6224 08:117A: D0 03        	bne	L188
  6225 08:117C: 82 20 00     	brl	L10064
  6226                        L188:
  6227                        L186:
  6228                        	.line	1553
  6229                        ;		res = put_fat(fs, pclst, 0xFFFFFFFF);
  6230                        	.line	1554
  6231 08:117F: F4 FF FF     	pea	#^$ffffffff
  6232 08:1182: F4 FF FF     	pea	#<$ffffffff
  6233 08:1185: D4 1C        	pei	<L178+pclst_0+2
  6234 08:1187: D4 1A        	pei	<L178+pclst_0
  Sat Jul 10 2021  1:15                                                Page 125


  6235 08:1189: D4 0D        	pei	<L179+fs_1+2
  6236 08:118B: D4 0B        	pei	<L179+fs_1
  6237 08:118D: 22 C4 0D 08  	jsl	~~put_fat
  6238 08:1191: 85 05        	sta	<L179+res_1
  6239                        ;		if (res != FR_OK)
  6240                        	.line	1555
  6241                        ;			return res;
  6242 08:1193: A5 05        	lda	<L179+res_1
  6243 08:1195: D0 03        	bne	L189
  6244 08:1197: 82 05 00     	brl	L10065
  6245                        L189:
  6246                        	.line	1556
  6247 08:119A: A5 05        	lda	<L179+res_1
  6248 08:119C: 82 A5 FF     	brl	L184
  6249                        ;	}
  6250                        L10065:
  6251                        	.line	1557
  6252                        ;
  6253                        ;	/* Remove the chain */
  6254                        ;	do
  6255                        L10064:
  6256                        	.line	1560
  6257                        L10068:
  6258                        ;	{
  6259                        	.line	1561
  6260                        ;		nxt = get_fat(obj, clst); /* Get cluster
                     status */
  6261                        	.line	1562
  6262 08:119F: D4 18        	pei	<L178+clst_0+2
  6263 08:11A1: D4 16        	pei	<L178+clst_0
  6264 08:11A3: D4 14        	pei	<L178+obj_0+2
  6265 08:11A5: D4 12        	pei	<L178+obj_0
  6266 08:11A7: 22 54 0B 08  	jsl	~~get_fat
  6267 08:11AB: 85 07        	sta	<L179+nxt_1
  6268 08:11AD: 86 09        	stx	<L179+nxt_1+2
  6269                        ;		if (nxt == 0)
  6270                        	.line	1563
  6271                        ;			break; /* Empty cluster? */
  6272 08:11AF: A5 07        	lda	<L179+nxt_1
  6273 08:11B1: 05 09        	ora	<L179+nxt_1+2
  6274 08:11B3: D0 03        	bne	L190
  6275 08:11B5: 82 D5 00     	brl	L10067
  6276                        L190:
  6277                        ;		if (nxt == 1)
  6278                        	.line	1565
  6279                        ;			return FR_INT_ERR; /* Internal e
                    rror? */
  6280 08:11B8: A5 07        	lda	<L179+nxt_1
  6281 08:11BA: C9 01 00     	cmp	#<$1
  6282 08:11BD: D0 05        	bne	L191
  6283 08:11BF: A5 09        	lda	<L179+nxt_1+2
  6284 08:11C1: C9 00 00     	cmp	#^$1
  6285                        L191:
  6286 08:11C4: F0 03        	beq	L192
  6287 08:11C6: 82 06 00     	brl	L10069
  6288                        L192:
  6289                        	.line	1566
  6290 08:11C9: A9 02 00     	lda	#$2
  Sat Jul 10 2021  1:15                                                Page 126


  6291 08:11CC: 82 75 FF     	brl	L184
  6292                        ;		if (nxt == 0xFFFFFFFF)
  6293                        L10069:
  6294                        	.line	1567
  6295                        ;			return FR_DISK_ERR; /* Disk erro
                    r? */
  6296 08:11CF: A5 07        	lda	<L179+nxt_1
  6297 08:11D1: C9 FF FF     	cmp	#<$ffffffff
  6298 08:11D4: D0 05        	bne	L193
  6299 08:11D6: A5 09        	lda	<L179+nxt_1+2
  6300 08:11D8: C9 FF FF     	cmp	#^$ffffffff
  6301                        L193:
  6302 08:11DB: F0 03        	beq	L194
  6303 08:11DD: 82 06 00     	brl	L10070
  6304                        L194:
  6305                        	.line	1568
  6306 08:11E0: A9 01 00     	lda	#$1
  6307 08:11E3: 82 5E FF     	brl	L184
  6308                        ;		if (!FF_FS_EXFAT || fs->fs_type != FS_EX
                    FAT)
  6309                        L10070:
  6310                        	.line	1569
  6311                        ;		{
  6312 08:11E6: 82 0D 00     	brl	L195
  6313 08:11E9: E2 20        	sep	#$20
  6314                        	longa	off
  6315 08:11EB: A7 0B        	lda	[<L179+fs_1]
  6316 08:11ED: C9 04        	cmp	#<$4
  6317 08:11EF: C2 20        	rep	#$20
  6318                        	longa	on
  6319 08:11F1: D0 03        	bne	L196
  6320 08:11F3: 82 20 00     	brl	L10071
  6321                        L196:
  6322                        L195:
  6323                        	.line	1570
  6324                        ;			res = put_fat(fs, clst, 0); /* M
                    ark the cluster 'free' on the FAT */
  6325                        	.line	1571
  6326 08:11F6: F4 00 00     	pea	#^$0
  6327 08:11F9: F4 00 00     	pea	#<$0
  6328 08:11FC: D4 18        	pei	<L178+clst_0+2
  6329 08:11FE: D4 16        	pei	<L178+clst_0
  6330 08:1200: D4 0D        	pei	<L179+fs_1+2
  6331 08:1202: D4 0B        	pei	<L179+fs_1
  6332 08:1204: 22 C4 0D 08  	jsl	~~put_fat
  6333 08:1208: 85 05        	sta	<L179+res_1
  6334                        ;			if (res != FR_OK)
  6335                        	.line	1572
  6336                        ;				return res;
  6337 08:120A: A5 05        	lda	<L179+res_1
  6338 08:120C: D0 03        	bne	L197
  6339 08:120E: 82 05 00     	brl	L10072
  6340                        L197:
  6341                        	.line	1573
  6342 08:1211: A5 05        	lda	<L179+res_1
  6343 08:1213: 82 2E FF     	brl	L184
  6344                        ;		}
  6345                        L10072:
  Sat Jul 10 2021  1:15                                                Page 127


  6346                        	.line	1574
  6347                        ;		if (fs->free_clst < fs->n_fatent - 2)
  6348                        L10071:
  6349                        	.line	1575
  6350                        ;		{ /* Update FSINFO */
  6351 08:1216: 18           	clc
  6352 08:1217: A9 FE FF     	lda	#$fffe
  6353 08:121A: A0 17 00     	ldy	#$17
  6354 08:121D: 77 0B        	adc	[<L179+fs_1],Y
  6355 08:121F: 85 01        	sta	<R0
  6356 08:1221: A9 FF FF     	lda	#$ffff
  6357 08:1224: A0 19 00     	ldy	#$19
  6358 08:1227: 77 0B        	adc	[<L179+fs_1],Y
  6359 08:1229: 85 03        	sta	<R0+2
  6360 08:122B: A0 13 00     	ldy	#$13
  6361 08:122E: B7 0B        	lda	[<L179+fs_1],Y
  6362 08:1230: C5 01        	cmp	<R0
  6363 08:1232: A0 15 00     	ldy	#$15
  6364 08:1235: B7 0B        	lda	[<L179+fs_1],Y
  6365 08:1237: E5 03        	sbc	<R0+2
  6366 08:1239: 90 03        	bcc	L198
  6367 08:123B: 82 34 00     	brl	L10073
  6368                        L198:
  6369                        	.line	1576
  6370                        ;			fs->free_clst++;
  6371                        	.line	1577
  6372 08:123E: 18           	clc
  6373 08:123F: A9 01 00     	lda	#$1
  6374 08:1242: A0 13 00     	ldy	#$13
  6375 08:1245: 77 0B        	adc	[<L179+fs_1],Y
  6376 08:1247: A0 13 00     	ldy	#$13
  6377 08:124A: 97 0B        	sta	[<L179+fs_1],Y
  6378 08:124C: A9 00 00     	lda	#$0
  6379 08:124F: A0 15 00     	ldy	#$15
  6380 08:1252: 77 0B        	adc	[<L179+fs_1],Y
  6381 08:1254: A0 15 00     	ldy	#$15
  6382 08:1257: 97 0B        	sta	[<L179+fs_1],Y
  6383                        ;			fs->fsi_flag |= 1;
  6384                        	.line	1578
  6385 08:1259: 18           	clc
  6386 08:125A: A9 04 00     	lda	#$4
  6387 08:125D: 65 0B        	adc	<L179+fs_1
  6388 08:125F: 85 01        	sta	<R0
  6389 08:1261: A9 00 00     	lda	#$0
  6390 08:1264: 65 0D        	adc	<L179+fs_1+2
  6391 08:1266: 85 03        	sta	<R0+2
  6392 08:1268: E2 20        	sep	#$20
  6393                        	longa	off
  6394 08:126A: A7 01        	lda	[<R0]
  6395 08:126C: 09 01        	ora	#<$1
  6396 08:126E: 87 01        	sta	[<R0]
  6397 08:1270: C2 20        	rep	#$20
  6398                        	longa	on
  6399                        ;		}
  6400                        	.line	1579
  6401                        ;#if FF_FS_EXFAT || FF_USE_TRIM
  6402                        ;		if (ecl + 1 == nxt)
  6403                        ;		{ /* Is next cluster contiguous? */
  Sat Jul 10 2021  1:15                                                Page 128


  6404                        ;			ecl = nxt;
  6405                        ;		}
  6406                        ;		else
  6407                        ;		{ /* End of contiguous cluster block */
  6408                        ;#if FF_FS_EXFAT
  6409                        ;			if (fs->fs_type == FS_EXFAT)
  6410                        ;			{
  6411                        ;				res = change_bitmap(fs, 
                    scl, ecl - scl + 1, 0); /* Mark the cluster block 'free' on 
                    the bitmap */
  6412                        ;				if (res != FR_OK) return
                     res;
  6413                        ;			}
  6414                        ;#endif
  6415                        ;#if FF_USE_TRIM
  6416                        ;			rt[0] = clst2sect(fs, scl); /* S
                    tart of data area to be freed */
  6417                        ;			rt[1] = clst2sect(fs, ecl) + fs-
                    >csize - 1; /* End of data area to be freed */
  6418                        ;			disk_ioctl(fs->pdrv, CTRL_TRIM, 
                    rt); /* Inform storage device that the data in the block may
                     be erased */
  6419                        ;#endif
  6420                        ;			scl = ecl = nxt;
  6421                        ;		}
  6422                        ;#endif
  6423                        ;		clst = nxt; /* Next cluster */
  6424                        L10073:
  6425                        	.line	1602
  6426 08:1272: A5 07        	lda	<L179+nxt_1
  6427 08:1274: 85 16        	sta	<L178+clst_0
  6428 08:1276: A5 09        	lda	<L179+nxt_1+2
  6429 08:1278: 85 18        	sta	<L178+clst_0+2
  6430                        ;	} while (clst < fs->n_fatent); /* Repeat while n
                    ot the last link */
  6431                        	.line	1603
  6432                        L10066:
  6433 08:127A: A5 16        	lda	<L178+clst_0
  6434 08:127C: A0 17 00     	ldy	#$17
  6435 08:127F: D7 0B        	cmp	[<L179+fs_1],Y
  6436 08:1281: A5 18        	lda	<L178+clst_0+2
  6437 08:1283: A0 19 00     	ldy	#$19
  6438 08:1286: F7 0B        	sbc	[<L179+fs_1],Y
  6439 08:1288: B0 03        	bcs	L199
  6440 08:128A: 82 12 FF     	brl	L10068
  6441                        L199:
  6442                        L10067:
  6443                        ;
  6444                        ;#if FF_FS_EXFAT
  6445                        ;	/* Some post processes for chain status */
  6446                        ;	if (fs->fs_type == FS_EXFAT)
  6447                        ;	{
  6448                        ;		if (pclst == 0)
  6449                        ;		{ /* Has the entire chain been removed? 
                    */
  6450                        ;			obj->stat = 0; /* Change the cha
                    in status 'initial' */
  6451                        ;		}
  Sat Jul 10 2021  1:15                                                Page 129


  6452                        ;		else
  6453                        ;		{
  6454                        ;			if (obj->stat == 0)
  6455                        ;			{ /* Is it a fragmented chain fr
                    om the beginning of this session? */
  6456                        ;				clst = obj->sclust; /* F
                    ollow the chain to check if it gets contiguous */
  6457                        ;				while (clst != pclst)
  6458                        ;				{
  6459                        ;					nxt = get_fat(ob
                    j, clst);
  6460                        ;					if (nxt < 2) ret
                    urn FR_INT_ERR;
  6461                        ;					if (nxt == 0xFFF
                    FFFFF) return FR_DISK_ERR;
  6462                        ;					if (nxt != clst 
                    + 1) break; /* Not contiguous? */
  6463                        ;					clst++;
  6464                        ;				}
  6465                        ;				if (clst == pclst)
  6466                        ;				{ /* Has the chain got c
                    ontiguous again? */
  6467                        ;					obj->stat = 2; /
                    * Change the chain status 'contiguous' */
  6468                        ;				}
  6469                        ;			}
  6470                        ;			else
  6471                        ;			{
  6472                        ;				if (obj->stat == 3 && pc
                    lst >= obj->sclust && pclst <= obj->sclust + obj->n_cont)
  6473                        ;				{ /* Was the chain fragm
                    ented in this session and got contiguous again? */
  6474                        ;					obj->stat = 2; /
                    * Change the chain status 'contiguous' */
  6475                        ;				}
  6476                        ;			}
  6477                        ;		}
  6478                        ;	}
  6479                        ;#endif
  6480                        ;	return FR_OK;
  6481                        	.line	1641
  6482 08:128D: A9 00 00     	lda	#$0
  6483 08:1290: 82 B1 FE     	brl	L184
  6484                        ;}
  6485                        	.line	1642
  6486                        	.endblock	1642
  6487             0000000E   L178	equ	14
  6488             00000005   L179	equ	5
  6489 08:1293:              	ends
  6490                        	efunc
  6491                        	.endfunc	1642,5,14
  6492                        	.line	1642
  6493                        ;
  6494                        ;/*-----------------------------------------------
                    ------------------------*/
  6495                        ;/* FAT handling - Stretch a chain or Create a new
                     chain                  */
  6496                        ;/*-----------------------------------------------
  Sat Jul 10 2021  1:15                                                Page 130


                    ------------------------*/
  6497                        ;
  6498                        ;static DWORD create_chain( /* 0:No free cluster, 
                    1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
  6499                        ;FFOBJID* obj, /* Corresponding object */
  6500                        ;DWORD clst /* Cluster# to stretch, 0:Create a new
                     chain */
  6501                        ;)
  6502                        ;{
  6503                        	.line	1648
  6504                        	.line	1652
  6505                        	FFDOS
  6506                        	func
  6507                        	.function	1652
  6508                        ~~create_chain:
  6509                        	longa	on
  6510                        	longi	on
  6511 08:1293: 3B           	tsc
  6512 08:1294: 38           	sec
  6513 08:1295: E9 16 00     	sbc	#L200
  6514 08:1298: 1B           	tcs
  6515 08:1299: 0B           	phd
  6516 08:129A: 5B           	tcd
  6517             00000004   obj_0	set	4
  6518             00000008   clst_0	set	8
  6519                        	.block	1652
  6520                        ;	DWORD cs, ncl, scl;
  6521                        ;	FRESULT res;
  6522                        ;	FATFS *fs = obj->fs;
  6523                        ;
  6524                        ;	//k_debug_long("create_chain::clst:",clst);
  6525                        ;
  6526                        ;	if (clst == 0)
  6527             00000000   cs_1	set	0
  6528             00000004   ncl_1	set	4
  6529             00000008   scl_1	set	8
  6530             0000000C   res_1	set	12
  6531             0000000E   fs_1	set	14
  6532                        	.sym	cs,0,18,1,32
  6533                        	.sym	ncl,4,18,1,32
  6534                        	.sym	scl,8,18,1,32
  6535                        	.sym	res,12,5,1,16
  6536                        	.sym	fs,14,138,1,32,72
  6537                        	.sym	obj,4,138,6,32,73
  6538                        	.sym	clst,8,18,6,32
  6539 08:129B: A7 1A        	lda	[<L200+obj_0]
  6540 08:129D: 85 13        	sta	<L201+fs_1
  6541 08:129F: A0 02 00     	ldy	#$2
  6542 08:12A2: B7 1A        	lda	[<L200+obj_0],Y
  6543 08:12A4: 85 15        	sta	<L201+fs_1+2
  6544                        	.line	1659
  6545                        ;	{ /* Create a new chain */
  6546 08:12A6: A5 1E        	lda	<L200+clst_0
  6547 08:12A8: 05 20        	ora	<L200+clst_0+2
  6548 08:12AA: F0 03        	beq	L203
  6549 08:12AC: 82 37 00     	brl	L10074
  6550                        L203:
  6551                        	.line	1660
  Sat Jul 10 2021  1:15                                                Page 131


  6552                        ;		scl = fs->last_clst; /* Suggested cluste
                    r to start to find */
  6553                        	.line	1661
  6554 08:12AF: A0 0F 00     	ldy	#$f
  6555 08:12B2: B7 13        	lda	[<L201+fs_1],Y
  6556 08:12B4: 85 0D        	sta	<L201+scl_1
  6557 08:12B6: A0 11 00     	ldy	#$11
  6558 08:12B9: B7 13        	lda	[<L201+fs_1],Y
  6559 08:12BB: 85 0F        	sta	<L201+scl_1+2
  6560                        ;		if (scl == 0 || scl >= fs->n_fatent)
  6561                        	.line	1662
  6562                        ;			scl = 1;
  6563 08:12BD: A5 0D        	lda	<L201+scl_1
  6564 08:12BF: 05 0F        	ora	<L201+scl_1+2
  6565 08:12C1: D0 03        	bne	L205
  6566 08:12C3: 82 13 00     	brl	L204
  6567                        L205:
  6568 08:12C6: A5 0D        	lda	<L201+scl_1
  6569 08:12C8: A0 17 00     	ldy	#$17
  6570 08:12CB: D7 13        	cmp	[<L201+fs_1],Y
  6571 08:12CD: A5 0F        	lda	<L201+scl_1+2
  6572 08:12CF: A0 19 00     	ldy	#$19
  6573 08:12D2: F7 13        	sbc	[<L201+fs_1],Y
  6574 08:12D4: B0 03        	bcs	L206
  6575 08:12D6: 82 0A 00     	brl	L10075
  6576                        L206:
  6577                        L204:
  6578                        	.line	1663
  6579 08:12D9: A9 01 00     	lda	#$1
  6580 08:12DC: 85 0D        	sta	<L201+scl_1
  6581 08:12DE: A9 00 00     	lda	#$0
  6582 08:12E1: 85 0F        	sta	<L201+scl_1+2
  6583                        ;
  6584                        ;		//k_debug_long("create_chain::scl:",scl)
                    ;
  6585                        ;	}
  6586                        L10075:
  6587                        	.line	1666
  6588                        ;	else
  6589 08:12E3: 82 72 00     	brl	L10076
  6590                        L10074:
  6591                        ;	{ /* Stretch a chain */
  6592                        	.line	1668
  6593                        ;		cs = get_fat(obj, clst); /* Check the cl
                    uster status */
  6594                        	.line	1669
  6595 08:12E6: D4 20        	pei	<L200+clst_0+2
  6596 08:12E8: D4 1E        	pei	<L200+clst_0
  6597 08:12EA: D4 1C        	pei	<L200+obj_0+2
  6598 08:12EC: D4 1A        	pei	<L200+obj_0
  6599 08:12EE: 22 54 0B 08  	jsl	~~get_fat
  6600 08:12F2: 85 05        	sta	<L201+cs_1
  6601 08:12F4: 86 07        	stx	<L201+cs_1+2
  6602                        ;
  6603                        ;		//k_debug_long("create_chain::cs1:",cs);
  6604                        ;
  6605                        ;
  6606                        ;		if (cs < 2)
  Sat Jul 10 2021  1:15                                                Page 132


  6607                        	.line	1674
  6608                        ;			return 1; /* Test for insanity *
                    /
  6609 08:12F6: A5 05        	lda	<L201+cs_1
  6610 08:12F8: C9 02 00     	cmp	#<$2
  6611 08:12FB: A5 07        	lda	<L201+cs_1+2
  6612 08:12FD: E9 00 00     	sbc	#^$2
  6613 08:1300: 90 03        	bcc	L207
  6614 08:1302: 82 19 00     	brl	L10077
  6615                        L207:
  6616                        	.line	1675
  6617 08:1305: A9 00 00     	lda	#$0
  6618 08:1308: AA           	tax
  6619 08:1309: A9 01 00     	lda	#$1
  6620                        L208:
  6621 08:130C: A8           	tay
  6622 08:130D: A5 18        	lda	<L200+2
  6623 08:130F: 85 20        	sta	<L200+2+8
  6624 08:1311: A5 17        	lda	<L200+1
  6625 08:1313: 85 1F        	sta	<L200+1+8
  6626 08:1315: 2B           	pld
  6627 08:1316: 3B           	tsc
  6628 08:1317: 18           	clc
  6629 08:1318: 69 1E 00     	adc	#L200+8
  6630 08:131B: 1B           	tcs
  6631 08:131C: 98           	tya
  6632 08:131D: 6B           	rtl
  6633                        ;		if (cs == 0xFFFFFFFF)
  6634                        L10077:
  6635                        	.line	1676
  6636                        ;			return cs; /* Test for disk erro
                    r */
  6637 08:131E: A5 05        	lda	<L201+cs_1
  6638 08:1320: C9 FF FF     	cmp	#<$ffffffff
  6639 08:1323: D0 05        	bne	L209
  6640 08:1325: A5 07        	lda	<L201+cs_1+2
  6641 08:1327: C9 FF FF     	cmp	#^$ffffffff
  6642                        L209:
  6643 08:132A: F0 03        	beq	L210
  6644 08:132C: 82 07 00     	brl	L10078
  6645                        L210:
  6646                        	.line	1677
  6647 08:132F: A6 07        	ldx	<L201+cs_1+2
  6648 08:1331: A5 05        	lda	<L201+cs_1
  6649 08:1333: 82 D6 FF     	brl	L208
  6650                        ;		if (cs < fs->n_fatent)
  6651                        L10078:
  6652                        	.line	1678
  6653                        ;			return cs; /* It is already foll
                    owed by next cluster */
  6654 08:1336: A5 05        	lda	<L201+cs_1
  6655 08:1338: A0 17 00     	ldy	#$17
  6656 08:133B: D7 13        	cmp	[<L201+fs_1],Y
  6657 08:133D: A5 07        	lda	<L201+cs_1+2
  6658 08:133F: A0 19 00     	ldy	#$19
  6659 08:1342: F7 13        	sbc	[<L201+fs_1],Y
  6660 08:1344: 90 03        	bcc	L211
  6661 08:1346: 82 07 00     	brl	L10079
  Sat Jul 10 2021  1:15                                                Page 133


  6662                        L211:
  6663                        	.line	1679
  6664 08:1349: A6 07        	ldx	<L201+cs_1+2
  6665 08:134B: A5 05        	lda	<L201+cs_1
  6666 08:134D: 82 BC FF     	brl	L208
  6667                        ;		scl = clst; /* Cluster to start to find 
                    */
  6668                        L10079:
  6669                        	.line	1680
  6670 08:1350: A5 1E        	lda	<L200+clst_0
  6671 08:1352: 85 0D        	sta	<L201+scl_1
  6672 08:1354: A5 20        	lda	<L200+clst_0+2
  6673 08:1356: 85 0F        	sta	<L201+scl_1+2
  6674                        ;	}
  6675                        	.line	1681
  6676                        L10076:
  6677                        ;
  6678                        ;	//k_debug_long("create_chain::fs->free_clst:",fs
                    ->free_clst);
  6679                        ;
  6680                        ;	if (fs->free_clst == 0)
  6681                        	.line	1685
  6682                        ;		return 0; /* No free cluster */
  6683 08:1358: A0 13 00     	ldy	#$13
  6684 08:135B: B7 13        	lda	[<L201+fs_1],Y
  6685 08:135D: A0 15 00     	ldy	#$15
  6686 08:1360: 17 13        	ora	[<L201+fs_1],Y
  6687 08:1362: F0 03        	beq	L212
  6688 08:1364: 82 0A 00     	brl	L10080
  6689                        L212:
  6690                        	.line	1686
  6691 08:1367: A9 00 00     	lda	#$0
  6692 08:136A: AA           	tax
  6693 08:136B: A9 00 00     	lda	#$0
  6694 08:136E: 82 9B FF     	brl	L208
  6695                        ;
  6696                        ;#if FF_FS_EXFAT
  6697                        ;	if (fs->fs_type == FS_EXFAT)
  6698                        ;	{ /* On the exFAT volume */
  6699                        ;		ncl = find_bitmap(fs, scl, 1); /* Find a
                     free cluster */
  6700                        ;		if (ncl == 0 || ncl == 0xFFFFFFFF) retur
                    n ncl; /* No free cluster or hard error? */
  6701                        ;		res = change_bitmap(fs, ncl, 1, 1); /* M
                    ark the cluster 'in use' */
  6702                        ;		if (res == FR_INT_ERR) return 1;
  6703                        ;		if (res == FR_DISK_ERR) return 0xFFFFFFF
                    F;
  6704                        ;		if (clst == 0)
  6705                        ;		{ /* Is it a new chain? */
  6706                        ;			obj->stat = 2; /* Set status 'co
                    ntiguous' */
  6707                        ;		}
  6708                        ;		else
  6709                        ;		{ /* It is a stretched chain */
  6710                        ;			if (obj->stat == 2 && ncl != scl
                     + 1)
  6711                        ;			{ /* Is the chain got fragmented
  Sat Jul 10 2021  1:15                                                Page 134


                    ? */
  6712                        ;				obj->n_cont = scl - obj-
                    >sclust; /* Set size of the contiguous part */
  6713                        ;				obj->stat = 3; /* Change
                     status 'just fragmented' */
  6714                        ;			}
  6715                        ;		}
  6716                        ;		if (obj->stat != 2)
  6717                        ;		{ /* Is the file non-contiguous? */
  6718                        ;			if (ncl == clst + 1)
  6719                        ;			{ /* Is the cluster next to prev
                    ious one? */
  6720                        ;				obj->n_frag = obj->n_fra
                    g ? obj->n_frag + 1 : 2; /* Increment size of last framgent 
                    */
  6721                        ;			}
  6722                        ;			else
  6723                        ;			{ /* New fragment */
  6724                        ;				if (obj->n_frag == 0) ob
                    j->n_frag = 1;
  6725                        ;				res = fill_last_frag(obj
                    , clst, ncl); /* Fill last fragment on the FAT and link it t
                    o new one */
  6726                        ;				if (res == FR_OK) obj->n
                    _frag = 1;
  6727                        ;			}
  6728                        ;		}
  6729                        ;	}
  6730                        ;	else
  6731                        ;#endif
  6732                        ;	{ /* On the FAT/FAT32 volume */
  6733                        L10080:
  6734                        	.line	1724
  6735                        ;		ncl = 0;
  6736                        	.line	1725
  6737 08:1371: 64 09        	stz	<L201+ncl_1
  6738 08:1373: 64 0B        	stz	<L201+ncl_1+2
  6739                        ;		if (scl == clst)
  6740                        	.line	1726
  6741                        ;		{
  6742 08:1375: A5 0D        	lda	<L201+scl_1
  6743 08:1377: C5 1E        	cmp	<L200+clst_0
  6744 08:1379: D0 04        	bne	L213
  6745 08:137B: A5 0F        	lda	<L201+scl_1+2
  6746 08:137D: C5 20        	cmp	<L200+clst_0+2
  6747                        L213:
  6748 08:137F: F0 03        	beq	L214
  6749 08:1381: 82 AA 00     	brl	L10081
  6750                        L214:
  6751                        	.line	1727
  6752                        ;			//k_debug_long("create_chain::(s
                    cl == clst):",(scl == clst));
  6753                        ;
  6754                        ;			/* Stretching an existing chain?
                     */
  6755                        ;			ncl = scl + 1; /* Test if next c
                    luster is free */
  6756                        	.line	1731
  Sat Jul 10 2021  1:15                                                Page 135


  6757 08:1384: 18           	clc
  6758 08:1385: A9 01 00     	lda	#$1
  6759 08:1388: 65 0D        	adc	<L201+scl_1
  6760 08:138A: 85 09        	sta	<L201+ncl_1
  6761 08:138C: A9 00 00     	lda	#$0
  6762 08:138F: 65 0F        	adc	<L201+scl_1+2
  6763 08:1391: 85 0B        	sta	<L201+ncl_1+2
  6764                        ;			if (ncl >= fs->n_fatent)
  6765                        	.line	1732
  6766                        ;				ncl = 2;
  6767 08:1393: A5 09        	lda	<L201+ncl_1
  6768 08:1395: A0 17 00     	ldy	#$17
  6769 08:1398: D7 13        	cmp	[<L201+fs_1],Y
  6770 08:139A: A5 0B        	lda	<L201+ncl_1+2
  6771 08:139C: A0 19 00     	ldy	#$19
  6772 08:139F: F7 13        	sbc	[<L201+fs_1],Y
  6773 08:13A1: B0 03        	bcs	L215
  6774 08:13A3: 82 0A 00     	brl	L10082
  6775                        L215:
  6776                        	.line	1733
  6777 08:13A6: A9 02 00     	lda	#$2
  6778 08:13A9: 85 09        	sta	<L201+ncl_1
  6779 08:13AB: A9 00 00     	lda	#$0
  6780 08:13AE: 85 0B        	sta	<L201+ncl_1+2
  6781                        ;			cs = get_fat(obj, ncl); /* Get n
                    ext cluster status */
  6782                        L10082:
  6783                        	.line	1734
  6784 08:13B0: D4 0B        	pei	<L201+ncl_1+2
  6785 08:13B2: D4 09        	pei	<L201+ncl_1
  6786 08:13B4: D4 1C        	pei	<L200+obj_0+2
  6787 08:13B6: D4 1A        	pei	<L200+obj_0
  6788 08:13B8: 22 54 0B 08  	jsl	~~get_fat
  6789 08:13BC: 85 05        	sta	<L201+cs_1
  6790 08:13BE: 86 07        	stx	<L201+cs_1+2
  6791                        ;
  6792                        ;			//k_debug_long("create_chain::cs
                    2:",cs);
  6793                        ;
  6794                        ;			if (cs == 1 || cs == 0xFFFFFFFF)
  6795                        	.line	1738
  6796                        ;				return cs; /* Test for e
                    rror */
  6797 08:13C0: A5 05        	lda	<L201+cs_1
  6798 08:13C2: C9 01 00     	cmp	#<$1
  6799 08:13C5: D0 05        	bne	L217
  6800 08:13C7: A5 07        	lda	<L201+cs_1+2
  6801 08:13C9: C9 00 00     	cmp	#^$1
  6802                        L217:
  6803 08:13CC: D0 03        	bne	L218
  6804 08:13CE: 82 11 00     	brl	L216
  6805                        L218:
  6806 08:13D1: A5 05        	lda	<L201+cs_1
  6807 08:13D3: C9 FF FF     	cmp	#<$ffffffff
  6808 08:13D6: D0 05        	bne	L219
  6809 08:13D8: A5 07        	lda	<L201+cs_1+2
  6810 08:13DA: C9 FF FF     	cmp	#^$ffffffff
  6811                        L219:
  Sat Jul 10 2021  1:15                                                Page 136


  6812 08:13DD: F0 03        	beq	L220
  6813 08:13DF: 82 07 00     	brl	L10083
  6814                        L220:
  6815                        L216:
  6816                        	.line	1739
  6817 08:13E2: A6 07        	ldx	<L201+cs_1+2
  6818 08:13E4: A5 05        	lda	<L201+cs_1
  6819 08:13E6: 82 23 FF     	brl	L208
  6820                        ;			if (cs != 0)
  6821                        L10083:
  6822                        	.line	1740
  6823                        ;			{ /* Not free? */
  6824 08:13E9: A5 05        	lda	<L201+cs_1
  6825 08:13EB: 05 07        	ora	<L201+cs_1+2
  6826 08:13ED: D0 03        	bne	L221
  6827 08:13EF: 82 3C 00     	brl	L10084
  6828                        L221:
  6829                        	.line	1741
  6830                        ;				cs = fs->last_clst; /* S
                    tart at suggested cluster if it is valid */
  6831                        	.line	1742
  6832 08:13F2: A0 0F 00     	ldy	#$f
  6833 08:13F5: B7 13        	lda	[<L201+fs_1],Y
  6834 08:13F7: 85 05        	sta	<L201+cs_1
  6835 08:13F9: A0 11 00     	ldy	#$11
  6836 08:13FC: B7 13        	lda	[<L201+fs_1],Y
  6837 08:13FE: 85 07        	sta	<L201+cs_1+2
  6838                        ;				if (cs >= 2 && cs < fs->
                    n_fatent)
  6839                        	.line	1743
  6840                        ;					scl = cs;
  6841 08:1400: A5 05        	lda	<L201+cs_1
  6842 08:1402: C9 02 00     	cmp	#<$2
  6843 08:1405: A5 07        	lda	<L201+cs_1+2
  6844 08:1407: E9 00 00     	sbc	#^$2
  6845 08:140A: B0 03        	bcs	L222
  6846 08:140C: 82 1B 00     	brl	L10085
  6847                        L222:
  6848 08:140F: A5 05        	lda	<L201+cs_1
  6849 08:1411: A0 17 00     	ldy	#$17
  6850 08:1414: D7 13        	cmp	[<L201+fs_1],Y
  6851 08:1416: A5 07        	lda	<L201+cs_1+2
  6852 08:1418: A0 19 00     	ldy	#$19
  6853 08:141B: F7 13        	sbc	[<L201+fs_1],Y
  6854 08:141D: 90 03        	bcc	L223
  6855 08:141F: 82 08 00     	brl	L10085
  6856                        L223:
  6857                        	.line	1744
  6858 08:1422: A5 05        	lda	<L201+cs_1
  6859 08:1424: 85 0D        	sta	<L201+scl_1
  6860 08:1426: A5 07        	lda	<L201+cs_1+2
  6861 08:1428: 85 0F        	sta	<L201+scl_1+2
  6862                        ;				ncl = 0;
  6863                        L10085:
  6864                        	.line	1745
  6865 08:142A: 64 09        	stz	<L201+ncl_1
  6866 08:142C: 64 0B        	stz	<L201+ncl_1+2
  6867                        ;			}
  Sat Jul 10 2021  1:15                                                Page 137


  6868                        	.line	1746
  6869                        ;		}
  6870                        L10084:
  6871                        	.line	1747
  6872                        ;		if (ncl == 0)
  6873                        L10081:
  6874                        	.line	1748
  6875                        ;		{ /* The new cluster cannot be contiguou
                    s and find another fragment */
  6876 08:142E: A5 09        	lda	<L201+ncl_1
  6877 08:1430: 05 0B        	ora	<L201+ncl_1+2
  6878 08:1432: F0 03        	beq	L224
  6879 08:1434: 82 A0 00     	brl	L10086
  6880                        L224:
  6881                        	.line	1749
  6882                        ;			ncl = scl; /* Start cluster */
  6883                        	.line	1750
  6884 08:1437: A5 0D        	lda	<L201+scl_1
  6885 08:1439: 85 09        	sta	<L201+ncl_1
  6886 08:143B: A5 0F        	lda	<L201+scl_1+2
  6887 08:143D: 85 0B        	sta	<L201+ncl_1+2
  6888                        ;			for (;;)
  6889                        	.line	1751
  6890                        L10089:
  6891                        ;			{
  6892                        	.line	1752
  6893                        ;				ncl++; /* Next cluster *
                    /
  6894                        	.line	1753
  6895 08:143F: E6 09        	inc	<L201+ncl_1
  6896 08:1441: D0 02        	bne	L225
  6897 08:1443: E6 0B        	inc	<L201+ncl_1+2
  6898                        L225:
  6899                        ;				if (ncl >= fs->n_fatent)
  6900                        	.line	1754
  6901                        ;				{ /* Check wrap-around *
                    /
  6902 08:1445: A5 09        	lda	<L201+ncl_1
  6903 08:1447: A0 17 00     	ldy	#$17
  6904 08:144A: D7 13        	cmp	[<L201+fs_1],Y
  6905 08:144C: A5 0B        	lda	<L201+ncl_1+2
  6906 08:144E: A0 19 00     	ldy	#$19
  6907 08:1451: F7 13        	sbc	[<L201+fs_1],Y
  6908 08:1453: B0 03        	bcs	L226
  6909 08:1455: 82 21 00     	brl	L10090
  6910                        L226:
  6911                        	.line	1755
  6912                        ;					ncl = 2;
  6913                        	.line	1756
  6914 08:1458: A9 02 00     	lda	#$2
  6915 08:145B: 85 09        	sta	<L201+ncl_1
  6916 08:145D: A9 00 00     	lda	#$0
  6917 08:1460: 85 0B        	sta	<L201+ncl_1+2
  6918                        ;					if (ncl > scl)
  6919                        	.line	1757
  6920                        ;						return 0
                    ; /* No free cluster found? */
  6921 08:1462: A5 0D        	lda	<L201+scl_1
  Sat Jul 10 2021  1:15                                                Page 138


  6922 08:1464: C5 09        	cmp	<L201+ncl_1
  6923 08:1466: A5 0F        	lda	<L201+scl_1+2
  6924 08:1468: E5 0B        	sbc	<L201+ncl_1+2
  6925 08:146A: 90 03        	bcc	L227
  6926 08:146C: 82 0A 00     	brl	L10091
  6927                        L227:
  6928                        	.line	1758
  6929 08:146F: A9 00 00     	lda	#$0
  6930 08:1472: AA           	tax
  6931 08:1473: A9 00 00     	lda	#$0
  6932 08:1476: 82 93 FE     	brl	L208
  6933                        ;				}
  6934                        L10091:
  6935                        	.line	1759
  6936                        ;				cs = get_fat(obj, ncl); 
                    /* Get the cluster status */
  6937                        L10090:
  6938                        	.line	1760
  6939 08:1479: D4 0B        	pei	<L201+ncl_1+2
  6940 08:147B: D4 09        	pei	<L201+ncl_1
  6941 08:147D: D4 1C        	pei	<L200+obj_0+2
  6942 08:147F: D4 1A        	pei	<L200+obj_0
  6943 08:1481: 22 54 0B 08  	jsl	~~get_fat
  6944 08:1485: 85 05        	sta	<L201+cs_1
  6945 08:1487: 86 07        	stx	<L201+cs_1+2
  6946                        ;
  6947                        ;
  6948                        ;				//k_debug_long("create_c
                    hain::get_fat::cs:",cs);
  6949                        ;
  6950                        ;
  6951                        ;				if (cs == 0)
  6952                        	.line	1766
  6953                        ;					break; /* Found 
                    a free cluster? */
  6954 08:1489: A5 05        	lda	<L201+cs_1
  6955 08:148B: 05 07        	ora	<L201+cs_1+2
  6956 08:148D: D0 03        	bne	L228
  6957 08:148F: 82 45 00     	brl	L10088
  6958                        L228:
  6959                        ;				if (cs == 1 || cs == 0xF
                    FFFFFFF)
  6960                        	.line	1768
  6961                        ;					return cs; /* Te
                    st for error */
  6962 08:1492: A5 05        	lda	<L201+cs_1
  6963 08:1494: C9 01 00     	cmp	#<$1
  6964 08:1497: D0 05        	bne	L230
  6965 08:1499: A5 07        	lda	<L201+cs_1+2
  6966 08:149B: C9 00 00     	cmp	#^$1
  6967                        L230:
  6968 08:149E: D0 03        	bne	L231
  6969 08:14A0: 82 11 00     	brl	L229
  6970                        L231:
  6971 08:14A3: A5 05        	lda	<L201+cs_1
  6972 08:14A5: C9 FF FF     	cmp	#<$ffffffff
  6973 08:14A8: D0 05        	bne	L232
  6974 08:14AA: A5 07        	lda	<L201+cs_1+2
  Sat Jul 10 2021  1:15                                                Page 139


  6975 08:14AC: C9 FF FF     	cmp	#^$ffffffff
  6976                        L232:
  6977 08:14AF: F0 03        	beq	L233
  6978 08:14B1: 82 07 00     	brl	L10092
  6979                        L233:
  6980                        L229:
  6981                        	.line	1769
  6982 08:14B4: A6 07        	ldx	<L201+cs_1+2
  6983 08:14B6: A5 05        	lda	<L201+cs_1
  6984 08:14B8: 82 51 FE     	brl	L208
  6985                        ;				if (ncl == scl)
  6986                        L10092:
  6987                        	.line	1770
  6988                        ;					return 0; /* No 
                    free cluster found? */
  6989 08:14BB: A5 09        	lda	<L201+ncl_1
  6990 08:14BD: C5 0D        	cmp	<L201+scl_1
  6991 08:14BF: D0 04        	bne	L234
  6992 08:14C1: A5 0B        	lda	<L201+ncl_1+2
  6993 08:14C3: C5 0F        	cmp	<L201+scl_1+2
  6994                        L234:
  6995 08:14C5: F0 03        	beq	L235
  6996 08:14C7: 82 0A 00     	brl	L10093
  6997                        L235:
  6998                        	.line	1771
  6999 08:14CA: A9 00 00     	lda	#$0
  7000 08:14CD: AA           	tax
  7001 08:14CE: A9 00 00     	lda	#$0
  7002 08:14D1: 82 38 FE     	brl	L208
  7003                        ;			}
  7004                        L10093:
  7005                        	.line	1772
  7006                        L10087:
  7007 08:14D4: 82 68 FF     	brl	L10089
  7008                        L10088:
  7009                        ;		}
  7010                        	.line	1773
  7011                        ;		res = put_fat(fs, ncl, 0xFFFFFFFF); /* M
                    ark the new cluster 'EOC' */
  7012                        L10086:
  7013                        	.line	1774
  7014 08:14D7: F4 FF FF     	pea	#^$ffffffff
  7015 08:14DA: F4 FF FF     	pea	#<$ffffffff
  7016 08:14DD: D4 0B        	pei	<L201+ncl_1+2
  7017 08:14DF: D4 09        	pei	<L201+ncl_1
  7018 08:14E1: D4 15        	pei	<L201+fs_1+2
  7019 08:14E3: D4 13        	pei	<L201+fs_1
  7020 08:14E5: 22 C4 0D 08  	jsl	~~put_fat
  7021 08:14E9: 85 11        	sta	<L201+res_1
  7022                        ;		if (res == FR_OK && clst != 0)
  7023                        	.line	1775
  7024                        ;		{
  7025 08:14EB: A5 11        	lda	<L201+res_1
  7026 08:14ED: F0 03        	beq	L236
  7027 08:14EF: 82 1B 00     	brl	L10094
  7028                        L236:
  7029 08:14F2: A5 1E        	lda	<L200+clst_0
  7030 08:14F4: 05 20        	ora	<L200+clst_0+2
  Sat Jul 10 2021  1:15                                                Page 140


  7031 08:14F6: D0 03        	bne	L237
  7032 08:14F8: 82 12 00     	brl	L10094
  7033                        L237:
  7034                        	.line	1776
  7035                        ;			res = put_fat(fs, clst, ncl); /*
                     Link it from the previous one if needed */
  7036                        	.line	1777
  7037 08:14FB: D4 0B        	pei	<L201+ncl_1+2
  7038 08:14FD: D4 09        	pei	<L201+ncl_1
  7039 08:14FF: D4 20        	pei	<L200+clst_0+2
  7040 08:1501: D4 1E        	pei	<L200+clst_0
  7041 08:1503: D4 15        	pei	<L201+fs_1+2
  7042 08:1505: D4 13        	pei	<L201+fs_1
  7043 08:1507: 22 C4 0D 08  	jsl	~~put_fat
  7044 08:150B: 85 11        	sta	<L201+res_1
  7045                        ;		}
  7046                        	.line	1778
  7047                        ;	}
  7048                        L10094:
  7049                        	.line	1779
  7050                        ;
  7051                        ;	if (res == FR_OK)
  7052                        	.line	1781
  7053                        ;	{ /* Update FSINFO if function succeeded. */
  7054 08:150D: A5 11        	lda	<L201+res_1
  7055 08:150F: F0 03        	beq	L238
  7056 08:1511: 82 6D 00     	brl	L10095
  7057                        L238:
  7058                        	.line	1782
  7059                        ;		fs->last_clst = ncl;
  7060                        	.line	1783
  7061 08:1514: A5 09        	lda	<L201+ncl_1
  7062 08:1516: A0 0F 00     	ldy	#$f
  7063 08:1519: 97 13        	sta	[<L201+fs_1],Y
  7064 08:151B: A5 0B        	lda	<L201+ncl_1+2
  7065 08:151D: A0 11 00     	ldy	#$11
  7066 08:1520: 97 13        	sta	[<L201+fs_1],Y
  7067                        ;		if (fs->free_clst <= fs->n_fatent - 2)
  7068                        	.line	1784
  7069                        ;			fs->free_clst--;
  7070 08:1522: 18           	clc
  7071 08:1523: A9 FE FF     	lda	#$fffe
  7072 08:1526: A0 17 00     	ldy	#$17
  7073 08:1529: 77 13        	adc	[<L201+fs_1],Y
  7074 08:152B: 85 01        	sta	<R0
  7075 08:152D: A9 FF FF     	lda	#$ffff
  7076 08:1530: A0 19 00     	ldy	#$19
  7077 08:1533: 77 13        	adc	[<L201+fs_1],Y
  7078 08:1535: 85 03        	sta	<R0+2
  7079 08:1537: A5 01        	lda	<R0
  7080 08:1539: A0 13 00     	ldy	#$13
  7081 08:153C: D7 13        	cmp	[<L201+fs_1],Y
  7082 08:153E: A5 03        	lda	<R0+2
  7083 08:1540: A0 15 00     	ldy	#$15
  7084 08:1543: F7 13        	sbc	[<L201+fs_1],Y
  7085 08:1545: B0 03        	bcs	L239
  7086 08:1547: 82 1B 00     	brl	L10096
  7087                        L239:
  Sat Jul 10 2021  1:15                                                Page 141


  7088                        	.line	1785
  7089 08:154A: 18           	clc
  7090 08:154B: A9 FF FF     	lda	#$ffff
  7091 08:154E: A0 13 00     	ldy	#$13
  7092 08:1551: 77 13        	adc	[<L201+fs_1],Y
  7093 08:1553: A0 13 00     	ldy	#$13
  7094 08:1556: 97 13        	sta	[<L201+fs_1],Y
  7095 08:1558: A9 FF FF     	lda	#$ffff
  7096 08:155B: A0 15 00     	ldy	#$15
  7097 08:155E: 77 13        	adc	[<L201+fs_1],Y
  7098 08:1560: A0 15 00     	ldy	#$15
  7099 08:1563: 97 13        	sta	[<L201+fs_1],Y
  7100                        ;		fs->fsi_flag |= 1;
  7101                        L10096:
  7102                        	.line	1786
  7103 08:1565: 18           	clc
  7104 08:1566: A9 04 00     	lda	#$4
  7105 08:1569: 65 13        	adc	<L201+fs_1
  7106 08:156B: 85 01        	sta	<R0
  7107 08:156D: A9 00 00     	lda	#$0
  7108 08:1570: 65 15        	adc	<L201+fs_1+2
  7109 08:1572: 85 03        	sta	<R0+2
  7110 08:1574: E2 20        	sep	#$20
  7111                        	longa	off
  7112 08:1576: A7 01        	lda	[<R0]
  7113 08:1578: 09 01        	ora	#<$1
  7114 08:157A: 87 01        	sta	[<R0]
  7115 08:157C: C2 20        	rep	#$20
  7116                        	longa	on
  7117                        ;	}
  7118                        	.line	1787
  7119                        ;	else
  7120 08:157E: 82 26 00     	brl	L10097
  7121                        L10095:
  7122                        ;	{
  7123                        	.line	1789
  7124                        ;		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF 
                    : 1; /* Failed. Generate error status */
  7125                        	.line	1790
  7126 08:1581: A5 11        	lda	<L201+res_1
  7127 08:1583: C9 01 00     	cmp	#<$1
  7128 08:1586: F0 03        	beq	L241
  7129 08:1588: 82 09 00     	brl	L240
  7130                        L241:
  7131 08:158B: A9 FF FF     	lda	#$ffff
  7132 08:158E: AA           	tax
  7133 08:158F: A9 FF FF     	lda	#$ffff
  7134 08:1592: 80 07        	bra	L242
  7135                        L240:
  7136 08:1594: A9 00 00     	lda	#$0
  7137 08:1597: AA           	tax
  7138 08:1598: A9 01 00     	lda	#$1
  7139                        L242:
  7140 08:159B: 85 01        	sta	<R0
  7141 08:159D: 86 03        	stx	<R0+2
  7142 08:159F: A5 01        	lda	<R0
  7143 08:15A1: 85 09        	sta	<L201+ncl_1
  7144 08:15A3: A5 03        	lda	<R0+2
  Sat Jul 10 2021  1:15                                                Page 142


  7145 08:15A5: 85 0B        	sta	<L201+ncl_1+2
  7146                        ;	}
  7147                        	.line	1791
  7148                        L10097:
  7149                        ;
  7150                        ;	return ncl; /* Return new cluster number or erro
                    r status */
  7151                        	.line	1793
  7152 08:15A7: A6 0B        	ldx	<L201+ncl_1+2
  7153 08:15A9: A5 09        	lda	<L201+ncl_1
  7154 08:15AB: 82 5E FD     	brl	L208
  7155                        ;}
  7156                        	.line	1794
  7157                        	.endblock	1794
  7158             00000016   L200	equ	22
  7159             00000005   L201	equ	5
  7160 08:15AE:              	ends
  7161                        	efunc
  7162                        	.endfunc	1794,5,22
  7163                        	.line	1794
  7164                        ;
  7165                        ;#endif /* !FF_FS_READONLY */
  7166                        ;
  7167                        ;#if FF_USE_FASTSEEK
  7168                        ;/*-----------------------------------------------
                    ------------------------*/
  7169                        ;/* FAT handling - Convert offset into cluster wit
                    h link map table        */
  7170                        ;/*-----------------------------------------------
                    ------------------------*/
  7171                        ;
  7172                        ;static DWORD clmt_clust ( /* <2:Error, >=2:Cluste
                    r number */
  7173                        ;		FIL* fp, /* Pointer to the file object *
                    /
  7174                        ;		FSIZE_t ofs /* File offset to be convert
                    ed to cluster# */
  7175                        ;)
  7176                        ;{
  7177                        ;	DWORD cl, ncl, *tbl;
  7178                        ;	FATFS *fs = fp->obj.fs;
  7179                        ;
  7180                        ;	tbl = fp->cltbl + 1; /* Top of CLMT */
  7181                        ;	cl = (DWORD)(ofs / SS(fs) / fs->csize); /* Clust
                    er order from top of the file */
  7182                        ;	for (;;)
  7183                        ;	{
  7184                        ;		ncl = *tbl++; /* Number of cluters in th
                    e fragment */
  7185                        ;		if (ncl == 0) return 0; /* End of table?
                     (error) */
  7186                        ;		if (cl < ncl) break; /* In this fragment
                    ? */
  7187                        ;		cl -= ncl; tbl++; /* Next fragment */
  7188                        ;	}
  7189                        ;	return cl + *tbl; /* Return the cluster number *
                    /
  7190                        ;}
  Sat Jul 10 2021  1:15                                                Page 143


  7191                        ;
  7192                        ;#endif	/* FF_USE_FASTSEEK */
  7193                        ;
  7194                        ;/*-----------------------------------------------
                    ------------------------*/
  7195                        ;/* Directory handling - Fill a cluster with zeros
                                            */
  7196                        ;/*-----------------------------------------------
                    ------------------------*/
  7197                        ;
  7198                        ;#if !FF_FS_READONLY
  7199                        ;static FRESULT dir_clear( /* Returns FR_OK or FR_
                    DISK_ERR */
  7200                        ;FATFS *fs, /* Filesystem object */
  7201                        ;DWORD clst /* Directory table to clear */
  7202                        ;)
  7203                        ;{
  7204                        	.line	1830
  7205                        	.line	1834
  7206                        	FFDOS
  7207                        	func
  7208                        	.function	1834
  7209                        ~~dir_clear:
  7210                        	longa	on
  7211                        	longi	on
  7212 08:15AE: 3B           	tsc
  7213 08:15AF: 38           	sec
  7214 08:15B0: E9 14 00     	sbc	#L243
  7215 08:15B3: 1B           	tcs
  7216 08:15B4: 0B           	phd
  7217 08:15B5: 5B           	tcd
  7218             00000004   fs_0	set	4
  7219             00000008   clst_0	set	8
  7220                        	.block	1834
  7221                        ;	LBA_t sect;
  7222                        ;	UINT n, szb;
  7223                        ;	BYTE *ibuf;
  7224                        ;
  7225                        ;	//k_debug_long("dir_clear:",clst);
  7226                        ;
  7227                        ;	if (sync_window(fs) != FR_OK)
  7228             00000000   sect_1	set	0
  7229             00000004   n_1	set	4
  7230             00000006   szb_1	set	6
  7231             00000008   ibuf_1	set	8
  7232                        	.sym	sect,0,18,1,32
  7233                        	.sym	n,4,16,1,16
  7234                        	.sym	szb,6,16,1,16
  7235                        	.sym	ibuf,8,142,1,32
  7236                        	.sym	fs,4,138,6,32,72
  7237                        	.sym	clst,8,18,6,32
  7238                        	.line	1841
  7239                        ;		return FR_DISK_ERR; /* Flush disk access
                     window */
  7240 08:15B6: D4 1A        	pei	<L243+fs_0+2
  7241 08:15B8: D4 18        	pei	<L243+fs_0
  7242 08:15BA: 22 AE 07 08  	jsl	~~sync_window
  7243 08:15BE: AA           	tax
  Sat Jul 10 2021  1:15                                                Page 144


  7244 08:15BF: D0 03        	bne	L246
  7245 08:15C1: 82 15 00     	brl	L10098
  7246                        L246:
  7247                        	.line	1842
  7248 08:15C4: A9 01 00     	lda	#$1
  7249                        L247:
  7250 08:15C7: A8           	tay
  7251 08:15C8: A5 16        	lda	<L243+2
  7252 08:15CA: 85 1E        	sta	<L243+2+8
  7253 08:15CC: A5 15        	lda	<L243+1
  7254 08:15CE: 85 1D        	sta	<L243+1+8
  7255 08:15D0: 2B           	pld
  7256 08:15D1: 3B           	tsc
  7257 08:15D2: 18           	clc
  7258 08:15D3: 69 1C 00     	adc	#L243+8
  7259 08:15D6: 1B           	tcs
  7260 08:15D7: 98           	tya
  7261 08:15D8: 6B           	rtl
  7262                        ;
  7263                        ;
  7264                        ;
  7265                        ;	sect = clst2sect(fs, clst); /* Top of the cluste
                    r */
  7266                        L10098:
  7267                        	.line	1846
  7268 08:15D9: D4 1E        	pei	<L243+clst_0+2
  7269 08:15DB: D4 1C        	pei	<L243+clst_0
  7270 08:15DD: D4 1A        	pei	<L243+fs_0+2
  7271 08:15DF: D4 18        	pei	<L243+fs_0
  7272 08:15E1: 22 C5 0A 08  	jsl	~~clst2sect
  7273 08:15E5: 85 09        	sta	<L244+sect_1
  7274 08:15E7: 86 0B        	stx	<L244+sect_1+2
  7275                        ;	fs->winsect = sect; /* Set window to top of the 
                    cluster */
  7276                        	.line	1847
  7277 08:15E9: A5 09        	lda	<L244+sect_1
  7278 08:15EB: A0 2F 00     	ldy	#$2f
  7279 08:15EE: 97 18        	sta	[<L243+fs_0],Y
  7280 08:15F0: A5 0B        	lda	<L244+sect_1+2
  7281 08:15F2: A0 31 00     	ldy	#$31
  7282 08:15F5: 97 18        	sta	[<L243+fs_0],Y
  7283                        ;	mem_set(fs->win, 0, sizeof fs->win); /* Clear wi
                    ndow buffer */
  7284                        	.line	1848
  7285 08:15F7: F4 00 02     	pea	#<$200
  7286 08:15FA: F4 00 00     	pea	#<$0
  7287 08:15FD: 18           	clc
  7288 08:15FE: A9 33 00     	lda	#$33
  7289 08:1601: 65 18        	adc	<L243+fs_0
  7290 08:1603: 85 01        	sta	<R0
  7291 08:1605: A9 00 00     	lda	#$0
  7292 08:1608: 65 1A        	adc	<L243+fs_0+2
  7293 08:160A: 85 03        	sta	<R0+2
  7294 08:160C: D4 03        	pei	<R0+2
  7295 08:160E: D4 01        	pei	<R0
  7296 08:1610: 22 DF 01 08  	jsl	~~mem_set
  7297                        ;#if FF_USE_LFN == 3		/* Quick table c
                    lear by using multi-secter write */
  Sat Jul 10 2021  1:15                                                Page 145


  7298                        ;	/* Allocate a temporary buffer */
  7299                        ;	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MAL
                    LOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; szb > SS(f
                    s) && (ibuf = ff_memalloc(szb)) == 0; szb /= 2);
  7300                        	.line	1851
  7301 08:1614: A0 00 00     	ldy	#$0
  7302 08:1617: 5A           	phy
  7303 08:1618: A0 09 00     	ldy	#$9
  7304 08:161B: B7 18        	lda	[<L243+fs_0],Y
  7305 08:161D: 7A           	ply
  7306 08:161E: 2A           	rol	A
  7307 08:161F: 6A           	ror	A
  7308 08:1620: 10 01        	bpl	L249
  7309 08:1622: 88           	dey
  7310                        L249:
  7311 08:1623: 85 05        	sta	<R1
  7312 08:1625: 84 07        	sty	<R1+2
  7313 08:1627: D4 07        	pei	<R1+2
  7314 08:1629: D4 05        	pei	<R1
  7315 08:162B: A9 09 00     	lda	#$9
  7316                        	xref	~~~lasl
  7317 08:162E: 22 xx xx xx  	jsl	~~~lasl
  7318 08:1632: 85 01        	sta	<R0
  7319 08:1634: 86 03        	stx	<R0+2
  7320 08:1636: A5 01        	lda	<R0
  7321 08:1638: C9 00 04     	cmp	#<$400
  7322 08:163B: A5 03        	lda	<R0+2
  7323 08:163D: E9 00 00     	sbc	#^$400
  7324 08:1640: B0 03        	bcs	L250
  7325 08:1642: 82 05 00     	brl	L248
  7326                        L250:
  7327 08:1645: A9 00 04     	lda	#$400
  7328 08:1648: 80 0C        	bra	L251
  7329                        L248:
  7330 08:164A: A0 09 00     	ldy	#$9
  7331 08:164D: B7 18        	lda	[<L243+fs_0],Y
  7332 08:164F: A2 09 00     	ldx	#<$9
  7333                        	xref	~~~asl
  7334 08:1652: 22 xx xx xx  	jsl	~~~asl
  7335                        L251:
  7336 08:1656: 85 0F        	sta	<L244+szb_1
  7337 08:1658: 64 11        	stz	<L244+ibuf_1
  7338 08:165A: 64 13        	stz	<L244+ibuf_1+2
  7339 08:165C: 82 02 00     	brl	L10102
  7340                        L10101:
  7341                        	.line	1851
  7342                        L10099:
  7343 08:165F: 46 0F        	lsr	<L244+szb_1
  7344                        L10102:
  7345 08:1661: A9 00 02     	lda	#$200
  7346 08:1664: C5 0F        	cmp	<L244+szb_1
  7347 08:1666: 90 03        	bcc	L253
  7348 08:1668: 82 13 00     	brl	L252
  7349                        L253:
  7350 08:166B: D4 0F        	pei	<L244+szb_1
  7351 08:166D: 22 AB 92 08  	jsl	~~ff_memalloc
  7352 08:1671: 85 11        	sta	<L244+ibuf_1
  7353 08:1673: 86 13        	stx	<L244+ibuf_1+2
  Sat Jul 10 2021  1:15                                                Page 146


  7354 08:1675: A5 11        	lda	<L244+ibuf_1
  7355 08:1677: 05 13        	ora	<L244+ibuf_1+2
  7356 08:1679: D0 03        	bne	L254
  7357 08:167B: 82 E1 FF     	brl	L10101
  7358                        L254:
  7359                        L252:
  7360                        L10100:
  7361                        ;
  7362                        ;
  7363                        ;	if (szb > SS(fs))
  7364                        	.line	1854
  7365                        ;	{ /* Buffer allocated? */
  7366 08:167E: A9 00 02     	lda	#$200
  7367 08:1681: C5 0F        	cmp	<L244+szb_1
  7368 08:1683: 90 03        	bcc	L255
  7369 08:1685: 82 68 00     	brl	L10103
  7370                        L255:
  7371                        	.line	1855
  7372                        ;		mem_set(ibuf, 0, szb);
  7373                        	.line	1856
  7374 08:1688: D4 0F        	pei	<L244+szb_1
  7375 08:168A: F4 00 00     	pea	#<$0
  7376 08:168D: D4 13        	pei	<L244+ibuf_1+2
  7377 08:168F: D4 11        	pei	<L244+ibuf_1
  7378 08:1691: 22 DF 01 08  	jsl	~~mem_set
  7379                        ;		szb /= SS(fs); /* Bytes -> Sectors */
  7380                        	.line	1857
  7381 08:1695: A5 0F        	lda	<L244+szb_1
  7382 08:1697: A2 09 00     	ldx	#<$9
  7383                        	xref	~~~lsr
  7384 08:169A: 22 xx xx xx  	jsl	~~~lsr
  7385 08:169E: 85 0F        	sta	<L244+szb_1
  7386                        ;		for (n = 0; n < fs->csize && disk_write(
                    fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb); /* Fill
                     the cluster with 0 */
  7387                        	.line	1858
  7388 08:16A0: 64 0D        	stz	<L244+n_1
  7389 08:16A2: 82 07 00     	brl	L10107
  7390                        L10106:
  7391                        	.line	1858
  7392                        L10104:
  7393 08:16A5: 18           	clc
  7394 08:16A6: A5 0D        	lda	<L244+n_1
  7395 08:16A8: 65 0F        	adc	<L244+szb_1
  7396 08:16AA: 85 0D        	sta	<L244+n_1
  7397                        L10107:
  7398 08:16AC: A5 0D        	lda	<L244+n_1
  7399 08:16AE: A0 09 00     	ldy	#$9
  7400 08:16B1: D7 18        	cmp	[<L243+fs_0],Y
  7401 08:16B3: 90 03        	bcc	L257
  7402 08:16B5: 82 2D 00     	brl	L256
  7403                        L257:
  7404 08:16B8: D4 0F        	pei	<L244+szb_1
  7405 08:16BA: A5 0D        	lda	<L244+n_1
  7406 08:16BC: 85 01        	sta	<R0
  7407 08:16BE: 64 03        	stz	<R0+2
  7408 08:16C0: 18           	clc
  7409 08:16C1: A5 01        	lda	<R0
  Sat Jul 10 2021  1:15                                                Page 147


  7410 08:16C3: 65 09        	adc	<L244+sect_1
  7411 08:16C5: 85 05        	sta	<R1
  7412 08:16C7: A5 03        	lda	<R0+2
  7413 08:16C9: 65 0B        	adc	<L244+sect_1+2
  7414 08:16CB: 85 07        	sta	<R1+2
  7415 08:16CD: D4 07        	pei	<R1+2
  7416 08:16CF: D4 05        	pei	<R1
  7417 08:16D1: D4 13        	pei	<L244+ibuf_1+2
  7418 08:16D3: D4 11        	pei	<L244+ibuf_1
  7419 08:16D5: A0 01 00     	ldy	#$1
  7420 08:16D8: B7 18        	lda	[<L243+fs_0],Y
  7421 08:16DA: 48           	pha
  7422 08:16DB: 22 xx xx xx  	jsl	~~disk_write
  7423 08:16DF: AA           	tax
  7424 08:16E0: D0 03        	bne	L258
  7425 08:16E2: 82 C0 FF     	brl	L10106
  7426                        L258:
  7427                        L256:
  7428                        L10105:
  7429                        ;		ff_memfree(ibuf);
  7430                        	.line	1859
  7431 08:16E5: D4 13        	pei	<L244+ibuf_1+2
  7432 08:16E7: D4 11        	pei	<L244+ibuf_1
  7433 08:16E9: 22 D3 92 08  	jsl	~~ff_memfree
  7434                        ;	}
  7435                        	.line	1860
  7436                        ;	else
  7437 08:16ED: 82 59 00     	brl	L10108
  7438                        L10103:
  7439                        ;#endif
  7440                        ;	{
  7441                        	.line	1863
  7442                        ;		ibuf = fs->win;
  7443                        	.line	1864
  7444 08:16F0: 18           	clc
  7445 08:16F1: A9 33 00     	lda	#$33
  7446 08:16F4: 65 18        	adc	<L243+fs_0
  7447 08:16F6: 85 11        	sta	<L244+ibuf_1
  7448 08:16F8: A9 00 00     	lda	#$0
  7449 08:16FB: 65 1A        	adc	<L243+fs_0+2
  7450 08:16FD: 85 13        	sta	<L244+ibuf_1+2
  7451                        ;		szb = 1; /* Use window buffer (many sing
                    le-sector writes may take a time) */
  7452                        	.line	1865
  7453 08:16FF: A9 01 00     	lda	#$1
  7454 08:1702: 85 0F        	sta	<L244+szb_1
  7455                        ;		for (n = 0;
  7456                        	.line	1866
  7457                        ;				n < fs->csize
  7458                        ;						&& disk_
                    write(fs->pdrv, ibuf, sect + n, szb) == RES_OK;
  7459 08:1704: 64 0D        	stz	<L244+n_1
  7460 08:1706: 82 07 00     	brl	L10112
  7461                        ;				n += szb)
  7462                        L10111:
  7463                        ;			; /* Fill the cluster with 0 */
  7464                        	.line	1870
  7465                        L10109:
  Sat Jul 10 2021  1:15                                                Page 148


  7466 08:1709: 18           	clc
  7467 08:170A: A5 0D        	lda	<L244+n_1
  7468 08:170C: 65 0F        	adc	<L244+szb_1
  7469 08:170E: 85 0D        	sta	<L244+n_1
  7470                        L10112:
  7471 08:1710: A5 0D        	lda	<L244+n_1
  7472 08:1712: A0 09 00     	ldy	#$9
  7473 08:1715: D7 18        	cmp	[<L243+fs_0],Y
  7474 08:1717: 90 03        	bcc	L260
  7475 08:1719: 82 2D 00     	brl	L259
  7476                        L260:
  7477 08:171C: D4 0F        	pei	<L244+szb_1
  7478 08:171E: A5 0D        	lda	<L244+n_1
  7479 08:1720: 85 01        	sta	<R0
  7480 08:1722: 64 03        	stz	<R0+2
  7481 08:1724: 18           	clc
  7482 08:1725: A5 01        	lda	<R0
  7483 08:1727: 65 09        	adc	<L244+sect_1
  7484 08:1729: 85 05        	sta	<R1
  7485 08:172B: A5 03        	lda	<R0+2
  7486 08:172D: 65 0B        	adc	<L244+sect_1+2
  7487 08:172F: 85 07        	sta	<R1+2
  7488 08:1731: D4 07        	pei	<R1+2
  7489 08:1733: D4 05        	pei	<R1
  7490 08:1735: D4 13        	pei	<L244+ibuf_1+2
  7491 08:1737: D4 11        	pei	<L244+ibuf_1
  7492 08:1739: A0 01 00     	ldy	#$1
  7493 08:173C: B7 18        	lda	[<L243+fs_0],Y
  7494 08:173E: 48           	pha
  7495 08:173F: 22 xx xx xx  	jsl	~~disk_write
  7496 08:1743: AA           	tax
  7497 08:1744: D0 03        	bne	L261
  7498 08:1746: 82 C0 FF     	brl	L10111
  7499                        L261:
  7500                        L259:
  7501                        L10110:
  7502                        ;	}
  7503                        	.line	1871
  7504                        L10108:
  7505                        ;
  7506                        ;	//k_debug_long("dir_clear:ret:",(n == fs->csize)
                    );
  7507                        ;
  7508                        ;	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
  7509                        	.line	1875
  7510 08:1749: A5 0D        	lda	<L244+n_1
  7511 08:174B: A0 09 00     	ldy	#$9
  7512 08:174E: D7 18        	cmp	[<L243+fs_0],Y
  7513 08:1750: F0 03        	beq	L263
  7514 08:1752: 82 05 00     	brl	L262
  7515                        L263:
  7516 08:1755: A9 00 00     	lda	#$0
  7517 08:1758: 80 03        	bra	L264
  7518                        L262:
  7519 08:175A: A9 01 00     	lda	#$1
  7520                        L264:
  7521 08:175D: 82 67 FE     	brl	L247
  7522                        ;}
  Sat Jul 10 2021  1:15                                                Page 149


  7523                        	.line	1876
  7524                        	.endblock	1876
  7525             00000014   L243	equ	20
  7526             00000009   L244	equ	9
  7527 08:1760:              	ends
  7528                        	efunc
  7529                        	.endfunc	1876,9,20
  7530                        	.line	1876
  7531                        ;#endif	/* !FF_FS_READONLY */
  7532                        ;
  7533                        ;/*-----------------------------------------------
                    ------------------------*/
  7534                        ;/* Directory handling - Set directory index      
                                            */
  7535                        ;/*-----------------------------------------------
                    ------------------------*/
  7536                        ;
  7537                        ;static FRESULT dir_sdi( /* FR_OK(0):succeeded, !=
                    0:error */
  7538                        ;DIR* dp, /* Pointer to directory object */
  7539                        ;DWORD ofs /* Offset of directory table */
  7540                        ;)
  7541                        ;{
  7542                        	.line	1883
  7543                        	.line	1887
  7544                        	FFDOS
  7545                        	func
  7546                        	.function	1887
  7547                        ~~dir_sdi:
  7548                        	longa	on
  7549                        	longi	on
  7550 08:1760: 3B           	tsc
  7551 08:1761: 38           	sec
  7552 08:1762: E9 14 00     	sbc	#L265
  7553 08:1765: 1B           	tcs
  7554 08:1766: 0B           	phd
  7555 08:1767: 5B           	tcd
  7556             00000004   dp_0	set	4
  7557             00000008   ofs_0	set	8
  7558                        	.block	1887
  7559                        ;	DWORD csz, clst;
  7560                        ;	FATFS *fs = dp->obj.fs;
  7561                        ;
  7562                        ;	if (ofs
  7563             00000000   csz_1	set	0
  7564             00000004   clst_1	set	4
  7565             00000008   fs_1	set	8
  7566                        	.sym	csz,0,18,1,32
  7567                        	.sym	clst,4,18,1,32
  7568                        	.sym	fs,8,138,1,32,72
  7569                        	.sym	dp,4,138,6,32,75
  7570                        	.sym	ofs,8,18,6,32
  7571 08:1768: A7 18        	lda	[<L265+dp_0]
  7572 08:176A: 85 11        	sta	<L266+fs_1
  7573 08:176C: A0 02 00     	ldy	#$2
  7574 08:176F: B7 18        	lda	[<L265+dp_0],Y
  7575 08:1771: 85 13        	sta	<L266+fs_1+2
  7576                        	.line	1891
  Sat Jul 10 2021  1:15                                                Page 150


  7577                        ;			>= (DWORD) (
  7578                        ;					(FF_FS_EXFAT && 
                    fs->fs_type == FS_EXFAT) ?
  7579                        ;							
                    MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
  7580                        ;	{ /* Check range of offset and alignment */
  7581 08:1773: 82 16 00     	brl	L269
  7582 08:1776: E2 20        	sep	#$20
  7583                        	longa	off
  7584 08:1778: A7 11        	lda	[<L266+fs_1]
  7585 08:177A: C9 04        	cmp	#<$4
  7586 08:177C: C2 20        	rep	#$20
  7587                        	longa	on
  7588 08:177E: F0 03        	beq	L270
  7589 08:1780: 82 09 00     	brl	L269
  7590                        L270:
  7591 08:1783: A9 00 10     	lda	#$1000
  7592 08:1786: AA           	tax
  7593 08:1787: A9 00 00     	lda	#$0
  7594 08:178A: 80 07        	bra	L271
  7595                        L269:
  7596 08:178C: A9 20 00     	lda	#$20
  7597 08:178F: AA           	tax
  7598 08:1790: A9 00 00     	lda	#$0
  7599                        L271:
  7600 08:1793: 85 01        	sta	<R0
  7601 08:1795: 86 03        	stx	<R0+2
  7602 08:1797: A5 1C        	lda	<L265+ofs_0
  7603 08:1799: C5 01        	cmp	<R0
  7604 08:179B: A5 1E        	lda	<L265+ofs_0+2
  7605 08:179D: E5 03        	sbc	<R0+2
  7606 08:179F: 90 03        	bcc	L272
  7607 08:17A1: 82 0A 00     	brl	L268
  7608                        L272:
  7609 08:17A4: A5 1C        	lda	<L265+ofs_0
  7610 08:17A6: 29 1F 00     	and	#<$1f
  7611 08:17A9: D0 03        	bne	L273
  7612 08:17AB: 82 15 00     	brl	L10113
  7613                        L273:
  7614                        L268:
  7615                        	.line	1895
  7616                        ;		return FR_INT_ERR;
  7617                        	.line	1896
  7618 08:17AE: A9 02 00     	lda	#$2
  7619                        L274:
  7620 08:17B1: A8           	tay
  7621 08:17B2: A5 16        	lda	<L265+2
  7622 08:17B4: 85 1E        	sta	<L265+2+8
  7623 08:17B6: A5 15        	lda	<L265+1
  7624 08:17B8: 85 1D        	sta	<L265+1+8
  7625 08:17BA: 2B           	pld
  7626 08:17BB: 3B           	tsc
  7627 08:17BC: 18           	clc
  7628 08:17BD: 69 1C 00     	adc	#L265+8
  7629 08:17C0: 1B           	tcs
  7630 08:17C1: 98           	tya
  7631 08:17C2: 6B           	rtl
  7632                        ;	}
  Sat Jul 10 2021  1:15                                                Page 151


  7633                        	.line	1897
  7634                        ;	dp->dptr = ofs; /* Set current offset */
  7635                        L10113:
  7636                        	.line	1898
  7637 08:17C3: A5 1C        	lda	<L265+ofs_0
  7638 08:17C5: A0 10 00     	ldy	#$10
  7639 08:17C8: 97 18        	sta	[<L265+dp_0],Y
  7640 08:17CA: A5 1E        	lda	<L265+ofs_0+2
  7641 08:17CC: A0 12 00     	ldy	#$12
  7642 08:17CF: 97 18        	sta	[<L265+dp_0],Y
  7643                        ;	clst = dp->obj.sclust; /* Table start cluster (0
                    :root) */
  7644                        	.line	1899
  7645 08:17D1: A0 08 00     	ldy	#$8
  7646 08:17D4: B7 18        	lda	[<L265+dp_0],Y
  7647 08:17D6: 85 0D        	sta	<L266+clst_1
  7648 08:17D8: A0 0A 00     	ldy	#$a
  7649 08:17DB: B7 18        	lda	[<L265+dp_0],Y
  7650 08:17DD: 85 0F        	sta	<L266+clst_1+2
  7651                        ;	if (clst == 0 && fs->fs_type >= FS_FAT32)
  7652                        	.line	1900
  7653                        ;	{ /* Replace cluster# 0 with root cluster# */
  7654 08:17DF: A5 0D        	lda	<L266+clst_1
  7655 08:17E1: 05 0F        	ora	<L266+clst_1+2
  7656 08:17E3: F0 03        	beq	L275
  7657 08:17E5: 82 29 00     	brl	L10114
  7658                        L275:
  7659 08:17E8: E2 20        	sep	#$20
  7660                        	longa	off
  7661 08:17EA: A7 11        	lda	[<L266+fs_1]
  7662 08:17EC: C9 03        	cmp	#<$3
  7663 08:17EE: C2 20        	rep	#$20
  7664                        	longa	on
  7665 08:17F0: B0 03        	bcs	L276
  7666 08:17F2: 82 1C 00     	brl	L10114
  7667                        L276:
  7668                        	.line	1901
  7669                        ;		clst = (DWORD) fs->dirbase;
  7670                        	.line	1902
  7671 08:17F5: A0 27 00     	ldy	#$27
  7672 08:17F8: B7 11        	lda	[<L266+fs_1],Y
  7673 08:17FA: 85 0D        	sta	<L266+clst_1
  7674 08:17FC: A0 29 00     	ldy	#$29
  7675 08:17FF: B7 11        	lda	[<L266+fs_1],Y
  7676 08:1801: 85 0F        	sta	<L266+clst_1+2
  7677                        ;		if (FF_FS_EXFAT)
  7678                        	.line	1903
  7679                        ;			dp->obj.stat = 0; /* exFAT: Root
                     dir has an FAT chain */
  7680 08:1803: 82 0B 00     	brl	L10115
  7681                        	.line	1904
  7682 08:1806: E2 20        	sep	#$20
  7683                        	longa	off
  7684 08:1808: A9 00        	lda	#$0
  7685 08:180A: A0 07 00     	ldy	#$7
  7686 08:180D: 97 18        	sta	[<L265+dp_0],Y
  7687 08:180F: C2 20        	rep	#$20
  7688                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 152


  7689                        ;	}
  7690                        L10115:
  7691                        	.line	1905
  7692                        ;
  7693                        ;	if (clst == 0)
  7694                        L10114:
  7695                        	.line	1907
  7696                        ;	{ /* Static table (root-directory on the FAT vol
                    ume) */
  7697 08:1811: A5 0D        	lda	<L266+clst_1
  7698 08:1813: 05 0F        	ora	<L266+clst_1+2
  7699 08:1815: F0 03        	beq	L277
  7700 08:1817: 82 4C 00     	brl	L10116
  7701                        L277:
  7702                        	.line	1908
  7703                        ;		if (ofs / SZDIRE >= fs->n_rootdir)
  7704                        	.line	1909
  7705                        ;			return FR_INT_ERR; /* Is index o
                    ut of range? */
  7706 08:181A: A0 00 00     	ldy	#$0
  7707 08:181D: 5A           	phy
  7708 08:181E: A0 07 00     	ldy	#$7
  7709 08:1821: B7 11        	lda	[<L266+fs_1],Y
  7710 08:1823: 7A           	ply
  7711 08:1824: 2A           	rol	A
  7712 08:1825: 6A           	ror	A
  7713 08:1826: 10 01        	bpl	L278
  7714 08:1828: 88           	dey
  7715                        L278:
  7716 08:1829: 85 01        	sta	<R0
  7717 08:182B: 84 03        	sty	<R0+2
  7718 08:182D: D4 1E        	pei	<L265+ofs_0+2
  7719 08:182F: D4 1C        	pei	<L265+ofs_0
  7720 08:1831: A9 05 00     	lda	#$5
  7721                        	xref	~~~llsr
  7722 08:1834: 22 xx xx xx  	jsl	~~~llsr
  7723 08:1838: 85 05        	sta	<R1
  7724 08:183A: 86 07        	stx	<R1+2
  7725 08:183C: A5 05        	lda	<R1
  7726 08:183E: C5 01        	cmp	<R0
  7727 08:1840: A5 07        	lda	<R1+2
  7728 08:1842: E5 03        	sbc	<R0+2
  7729 08:1844: B0 03        	bcs	L279
  7730 08:1846: 82 06 00     	brl	L10117
  7731                        L279:
  7732                        	.line	1910
  7733 08:1849: A9 02 00     	lda	#$2
  7734 08:184C: 82 62 FF     	brl	L274
  7735                        ;		dp->sect = fs->dirbase;
  7736                        L10117:
  7737                        	.line	1911
  7738 08:184F: A0 27 00     	ldy	#$27
  7739 08:1852: B7 11        	lda	[<L266+fs_1],Y
  7740 08:1854: A0 18 00     	ldy	#$18
  7741 08:1857: 97 18        	sta	[<L265+dp_0],Y
  7742 08:1859: A0 29 00     	ldy	#$29
  7743 08:185C: B7 11        	lda	[<L266+fs_1],Y
  7744 08:185E: A0 1A 00     	ldy	#$1a
  Sat Jul 10 2021  1:15                                                Page 153


  7745 08:1861: 97 18        	sta	[<L265+dp_0],Y
  7746                        ;
  7747                        ;	}
  7748                        	.line	1913
  7749                        ;	else
  7750 08:1863: 82 AC 00     	brl	L10118
  7751                        L10116:
  7752                        ;	{ /* Dynamic table (sub-directory or root-direct
                    ory on the FAT32/exFAT volume) */
  7753                        	.line	1915
  7754                        ;		csz = (DWORD) fs->csize * SS(fs); /* Byt
                    es per cluster */
  7755                        	.line	1916
  7756 08:1866: A0 00 00     	ldy	#$0
  7757 08:1869: 5A           	phy
  7758 08:186A: A0 09 00     	ldy	#$9
  7759 08:186D: B7 11        	lda	[<L266+fs_1],Y
  7760 08:186F: 7A           	ply
  7761 08:1870: 2A           	rol	A
  7762 08:1871: 6A           	ror	A
  7763 08:1872: 10 01        	bpl	L280
  7764 08:1874: 88           	dey
  7765                        L280:
  7766 08:1875: 85 01        	sta	<R0
  7767 08:1877: 84 03        	sty	<R0+2
  7768 08:1879: D4 03        	pei	<R0+2
  7769 08:187B: D4 01        	pei	<R0
  7770 08:187D: A9 09 00     	lda	#$9
  7771                        	xref	~~~lasl
  7772 08:1880: 22 xx xx xx  	jsl	~~~lasl
  7773 08:1884: 85 09        	sta	<L266+csz_1
  7774 08:1886: 86 0B        	stx	<L266+csz_1+2
  7775                        ;		while (ofs >= csz)
  7776                        	.line	1917
  7777                        L10119:
  7778 08:1888: A5 1C        	lda	<L265+ofs_0
  7779 08:188A: C5 09        	cmp	<L266+csz_1
  7780 08:188C: A5 1E        	lda	<L265+ofs_0+2
  7781 08:188E: E5 0B        	sbc	<L266+csz_1+2
  7782 08:1890: B0 03        	bcs	L281
  7783 08:1892: 82 5F 00     	brl	L10120
  7784                        L281:
  7785                        ;		{ /* Follow cluster chain */
  7786                        	.line	1918
  7787                        ;			clst = get_fat(&dp->obj, clst); 
                    /* Get next cluster */
  7788                        	.line	1919
  7789 08:1895: D4 0F        	pei	<L266+clst_1+2
  7790 08:1897: D4 0D        	pei	<L266+clst_1
  7791 08:1899: D4 1A        	pei	<L265+dp_0+2
  7792 08:189B: D4 18        	pei	<L265+dp_0
  7793 08:189D: 22 54 0B 08  	jsl	~~get_fat
  7794 08:18A1: 85 0D        	sta	<L266+clst_1
  7795 08:18A3: 86 0F        	stx	<L266+clst_1+2
  7796                        ;			if (clst == 0xFFFFFFFF)
  7797                        	.line	1920
  7798                        ;				return FR_DISK_ERR; /* D
                    isk error */
  Sat Jul 10 2021  1:15                                                Page 154


  7799 08:18A5: A5 0D        	lda	<L266+clst_1
  7800 08:18A7: C9 FF FF     	cmp	#<$ffffffff
  7801 08:18AA: D0 05        	bne	L282
  7802 08:18AC: A5 0F        	lda	<L266+clst_1+2
  7803 08:18AE: C9 FF FF     	cmp	#^$ffffffff
  7804                        L282:
  7805 08:18B1: F0 03        	beq	L283
  7806 08:18B3: 82 06 00     	brl	L10121
  7807                        L283:
  7808                        	.line	1921
  7809 08:18B6: A9 01 00     	lda	#$1
  7810 08:18B9: 82 F5 FE     	brl	L274
  7811                        ;			if (clst < 2 || clst >= fs->n_fa
                    tent)
  7812                        L10121:
  7813                        	.line	1922
  7814                        ;				return FR_INT_ERR; /* Re
                    ached to end of table or internal error */
  7815 08:18BC: A5 0D        	lda	<L266+clst_1
  7816 08:18BE: C9 02 00     	cmp	#<$2
  7817 08:18C1: A5 0F        	lda	<L266+clst_1+2
  7818 08:18C3: E9 00 00     	sbc	#^$2
  7819 08:18C6: B0 03        	bcs	L285
  7820 08:18C8: 82 13 00     	brl	L284
  7821                        L285:
  7822 08:18CB: A5 0D        	lda	<L266+clst_1
  7823 08:18CD: A0 17 00     	ldy	#$17
  7824 08:18D0: D7 11        	cmp	[<L266+fs_1],Y
  7825 08:18D2: A5 0F        	lda	<L266+clst_1+2
  7826 08:18D4: A0 19 00     	ldy	#$19
  7827 08:18D7: F7 11        	sbc	[<L266+fs_1],Y
  7828 08:18D9: B0 03        	bcs	L286
  7829 08:18DB: 82 06 00     	brl	L10122
  7830                        L286:
  7831                        L284:
  7832                        	.line	1923
  7833 08:18DE: A9 02 00     	lda	#$2
  7834 08:18E1: 82 CD FE     	brl	L274
  7835                        ;			ofs -= csz;
  7836                        L10122:
  7837                        	.line	1924
  7838 08:18E4: 38           	sec
  7839 08:18E5: A5 1C        	lda	<L265+ofs_0
  7840 08:18E7: E5 09        	sbc	<L266+csz_1
  7841 08:18E9: 85 1C        	sta	<L265+ofs_0
  7842 08:18EB: A5 1E        	lda	<L265+ofs_0+2
  7843 08:18ED: E5 0B        	sbc	<L266+csz_1+2
  7844 08:18EF: 85 1E        	sta	<L265+ofs_0+2
  7845                        ;		}
  7846                        	.line	1925
  7847 08:18F1: 82 94 FF     	brl	L10119
  7848                        L10120:
  7849                        ;		dp->sect = clst2sect(fs, clst);
  7850                        	.line	1926
  7851 08:18F4: D4 0F        	pei	<L266+clst_1+2
  7852 08:18F6: D4 0D        	pei	<L266+clst_1
  7853 08:18F8: D4 13        	pei	<L266+fs_1+2
  7854 08:18FA: D4 11        	pei	<L266+fs_1
  Sat Jul 10 2021  1:15                                                Page 155


  7855 08:18FC: 22 C5 0A 08  	jsl	~~clst2sect
  7856 08:1900: 85 01        	sta	<R0
  7857 08:1902: 86 03        	stx	<R0+2
  7858 08:1904: A5 01        	lda	<R0
  7859 08:1906: A0 18 00     	ldy	#$18
  7860 08:1909: 97 18        	sta	[<L265+dp_0],Y
  7861 08:190B: A5 03        	lda	<R0+2
  7862 08:190D: A0 1A 00     	ldy	#$1a
  7863 08:1910: 97 18        	sta	[<L265+dp_0],Y
  7864                        ;	}
  7865                        	.line	1927
  7866                        L10118:
  7867                        ;	dp->clust = clst; /* Current cluster# */
  7868                        	.line	1928
  7869 08:1912: A5 0D        	lda	<L266+clst_1
  7870 08:1914: A0 14 00     	ldy	#$14
  7871 08:1917: 97 18        	sta	[<L265+dp_0],Y
  7872 08:1919: A5 0F        	lda	<L266+clst_1+2
  7873 08:191B: A0 16 00     	ldy	#$16
  7874 08:191E: 97 18        	sta	[<L265+dp_0],Y
  7875                        ;	if (dp->sect == 0)
  7876                        	.line	1929
  7877                        ;		return FR_INT_ERR;
  7878 08:1920: A0 18 00     	ldy	#$18
  7879 08:1923: B7 18        	lda	[<L265+dp_0],Y
  7880 08:1925: A0 1A 00     	ldy	#$1a
  7881 08:1928: 17 18        	ora	[<L265+dp_0],Y
  7882 08:192A: F0 03        	beq	L287
  7883 08:192C: 82 06 00     	brl	L10123
  7884                        L287:
  7885                        	.line	1930
  7886 08:192F: A9 02 00     	lda	#$2
  7887 08:1932: 82 7C FE     	brl	L274
  7888                        ;	dp->sect += ofs / SS(fs); /* Sector# of the dire
                    ctory entry */
  7889                        L10123:
  7890                        	.line	1931
  7891 08:1935: 18           	clc
  7892 08:1936: A9 18 00     	lda	#$18
  7893 08:1939: 65 18        	adc	<L265+dp_0
  7894 08:193B: 85 01        	sta	<R0
  7895 08:193D: A9 00 00     	lda	#$0
  7896 08:1940: 65 1A        	adc	<L265+dp_0+2
  7897 08:1942: 85 03        	sta	<R0+2
  7898 08:1944: D4 1E        	pei	<L265+ofs_0+2
  7899 08:1946: D4 1C        	pei	<L265+ofs_0
  7900 08:1948: A9 09 00     	lda	#$9
  7901                        	xref	~~~llsr
  7902 08:194B: 22 xx xx xx  	jsl	~~~llsr
  7903 08:194F: 85 05        	sta	<R1
  7904 08:1951: 86 07        	stx	<R1+2
  7905 08:1953: 18           	clc
  7906 08:1954: A5 05        	lda	<R1
  7907 08:1956: 67 01        	adc	[<R0]
  7908 08:1958: 87 01        	sta	[<R0]
  7909 08:195A: A5 07        	lda	<R1+2
  7910 08:195C: A0 02 00     	ldy	#$2
  7911 08:195F: 77 01        	adc	[<R0],Y
  Sat Jul 10 2021  1:15                                                Page 156


  7912 08:1961: A0 02 00     	ldy	#$2
  7913 08:1964: 97 01        	sta	[<R0],Y
  7914                        ;	dp->dir = fs->win + (ofs % SS(fs)); /* Pointer t
                    o the entry in the win[] */
  7915                        	.line	1932
  7916 08:1966: A5 1C        	lda	<L265+ofs_0
  7917 08:1968: 29 FF 01     	and	#<$1ff
  7918 08:196B: 85 01        	sta	<R0
  7919 08:196D: 64 03        	stz	<R0+2
  7920 08:196F: 18           	clc
  7921 08:1970: A9 33 00     	lda	#$33
  7922 08:1973: 65 01        	adc	<R0
  7923 08:1975: 85 05        	sta	<R1
  7924 08:1977: A9 00 00     	lda	#$0
  7925 08:197A: 65 03        	adc	<R0+2
  7926 08:197C: 85 07        	sta	<R1+2
  7927 08:197E: 18           	clc
  7928 08:197F: A5 11        	lda	<L266+fs_1
  7929 08:1981: 65 05        	adc	<R1
  7930 08:1983: 85 01        	sta	<R0
  7931 08:1985: A5 13        	lda	<L266+fs_1+2
  7932 08:1987: 65 07        	adc	<R1+2
  7933 08:1989: 85 03        	sta	<R0+2
  7934 08:198B: A5 01        	lda	<R0
  7935 08:198D: A0 1C 00     	ldy	#$1c
  7936 08:1990: 97 18        	sta	[<L265+dp_0],Y
  7937 08:1992: A5 03        	lda	<R0+2
  7938 08:1994: A0 1E 00     	ldy	#$1e
  7939 08:1997: 97 18        	sta	[<L265+dp_0],Y
  7940                        ;
  7941                        ;	return FR_OK;
  7942                        	.line	1934
  7943 08:1999: A9 00 00     	lda	#$0
  7944 08:199C: 82 12 FE     	brl	L274
  7945                        ;}
  7946                        	.line	1935
  7947                        	.endblock	1935
  7948             00000014   L265	equ	20
  7949             00000009   L266	equ	9
  7950 08:199F:              	ends
  7951                        	efunc
  7952                        	.endfunc	1935,9,20
  7953                        	.line	1935
  7954                        ;
  7955                        ;/*-----------------------------------------------
                    ------------------------*/
  7956                        ;/* Directory handling - Move directory table inde
                    x next                  */
  7957                        ;/*-----------------------------------------------
                    ------------------------*/
  7958                        ;
  7959                        ;static FRESULT dir_next( /* FR_OK(0):succeeded, F
                    R_NO_FILE:End of table, FR_DENIED:Could not stretch */
  7960                        ;DIR* dp, /* Pointer to the directory object */
  7961                        ;int stretch /* 0: Do not stretch table, 1: Stretc
                    h table if needed */
  7962                        ;)
  7963                        ;{
  Sat Jul 10 2021  1:15                                                Page 157


  7964                        	.line	1941
  7965                        	.line	1945
  7966                        	FFDOS
  7967                        	func
  7968                        	.function	1945
  7969                        ~~dir_next:
  7970                        	longa	on
  7971                        	longi	on
  7972 08:199F: 3B           	tsc
  7973 08:19A0: 38           	sec
  7974 08:19A1: E9 18 00     	sbc	#L288
  7975 08:19A4: 1B           	tcs
  7976 08:19A5: 0B           	phd
  7977 08:19A6: 5B           	tcd
  7978             00000004   dp_0	set	4
  7979             00000008   stretch_0	set	8
  7980                        	.block	1945
  7981                        ;	DWORD ofs, clst;
  7982                        ;	FATFS *fs = dp->obj.fs;
  7983                        ;
  7984                        ;	ofs = dp->dptr + SZDIRE; /* Next entry */
  7985             00000000   ofs_1	set	0
  7986             00000004   clst_1	set	4
  7987             00000008   fs_1	set	8
  7988                        	.sym	ofs,0,18,1,32
  7989                        	.sym	clst,4,18,1,32
  7990                        	.sym	fs,8,138,1,32,72
  7991                        	.sym	dp,4,138,6,32,75
  7992                        	.sym	stretch,8,5,6,16
  7993 08:19A7: A7 1C        	lda	[<L288+dp_0]
  7994 08:19A9: 85 15        	sta	<L289+fs_1
  7995 08:19AB: A0 02 00     	ldy	#$2
  7996 08:19AE: B7 1C        	lda	[<L288+dp_0],Y
  7997 08:19B0: 85 17        	sta	<L289+fs_1+2
  7998                        	.line	1949
  7999 08:19B2: 18           	clc
  8000 08:19B3: A9 20 00     	lda	#$20
  8001 08:19B6: A0 10 00     	ldy	#$10
  8002 08:19B9: 77 1C        	adc	[<L288+dp_0],Y
  8003 08:19BB: 85 0D        	sta	<L289+ofs_1
  8004 08:19BD: A9 00 00     	lda	#$0
  8005 08:19C0: A0 12 00     	ldy	#$12
  8006 08:19C3: 77 1C        	adc	[<L288+dp_0],Y
  8007 08:19C5: 85 0F        	sta	<L289+ofs_1+2
  8008                        ;	if (ofs
  8009                        	.line	1950
  8010                        ;			>= (DWORD) (
  8011                        ;					(FF_FS_EXFAT && 
                    fs->fs_type == FS_EXFAT) ?
  8012                        ;							
                    MAX_DIR_EX : MAX_DIR))
  8013                        ;		dp->sect = 0; /* Disable it if the offse
                    t reached the max value */
  8014 08:19C7: 82 16 00     	brl	L291
  8015 08:19CA: E2 20        	sep	#$20
  8016                        	longa	off
  8017 08:19CC: A7 15        	lda	[<L289+fs_1]
  8018 08:19CE: C9 04        	cmp	#<$4
  Sat Jul 10 2021  1:15                                                Page 158


  8019 08:19D0: C2 20        	rep	#$20
  8020                        	longa	on
  8021 08:19D2: F0 03        	beq	L292
  8022 08:19D4: 82 09 00     	brl	L291
  8023                        L292:
  8024 08:19D7: A9 00 10     	lda	#$1000
  8025 08:19DA: AA           	tax
  8026 08:19DB: A9 00 00     	lda	#$0
  8027 08:19DE: 80 07        	bra	L293
  8028                        L291:
  8029 08:19E0: A9 20 00     	lda	#$20
  8030 08:19E3: AA           	tax
  8031 08:19E4: A9 00 00     	lda	#$0
  8032                        L293:
  8033 08:19E7: 85 01        	sta	<R0
  8034 08:19E9: 86 03        	stx	<R0+2
  8035 08:19EB: A5 0D        	lda	<L289+ofs_1
  8036 08:19ED: C5 01        	cmp	<R0
  8037 08:19EF: A5 0F        	lda	<L289+ofs_1+2
  8038 08:19F1: E5 03        	sbc	<R0+2
  8039 08:19F3: B0 03        	bcs	L294
  8040 08:19F5: 82 10 00     	brl	L10124
  8041                        L294:
  8042                        	.line	1954
  8043 08:19F8: A9 00 00     	lda	#$0
  8044 08:19FB: A0 18 00     	ldy	#$18
  8045 08:19FE: 97 1C        	sta	[<L288+dp_0],Y
  8046 08:1A00: A9 00 00     	lda	#$0
  8047 08:1A03: A0 1A 00     	ldy	#$1a
  8048 08:1A06: 97 1C        	sta	[<L288+dp_0],Y
  8049                        ;	if (dp->sect == 0)
  8050                        L10124:
  8051                        	.line	1955
  8052                        ;		return FR_NO_FILE; /* Report EOT if it h
                    as been disabled */
  8053 08:1A08: A0 18 00     	ldy	#$18
  8054 08:1A0B: B7 1C        	lda	[<L288+dp_0],Y
  8055 08:1A0D: A0 1A 00     	ldy	#$1a
  8056 08:1A10: 17 1C        	ora	[<L288+dp_0],Y
  8057 08:1A12: F0 03        	beq	L295
  8058 08:1A14: 82 15 00     	brl	L10125
  8059                        L295:
  8060                        	.line	1956
  8061 08:1A17: A9 04 00     	lda	#$4
  8062                        L296:
  8063 08:1A1A: A8           	tay
  8064 08:1A1B: A5 1A        	lda	<L288+2
  8065 08:1A1D: 85 20        	sta	<L288+2+6
  8066 08:1A1F: A5 19        	lda	<L288+1
  8067 08:1A21: 85 1F        	sta	<L288+1+6
  8068 08:1A23: 2B           	pld
  8069 08:1A24: 3B           	tsc
  8070 08:1A25: 18           	clc
  8071 08:1A26: 69 1E 00     	adc	#L288+6
  8072 08:1A29: 1B           	tcs
  8073 08:1A2A: 98           	tya
  8074 08:1A2B: 6B           	rtl
  8075                        ;
  Sat Jul 10 2021  1:15                                                Page 159


  8076                        ;	if (ofs % SS(fs) == 0)
  8077                        L10125:
  8078                        	.line	1958
  8079                        ;	{ /* Sector changed? */
  8080 08:1A2C: A5 0D        	lda	<L289+ofs_1
  8081 08:1A2E: 29 FF 01     	and	#<$1ff
  8082 08:1A31: F0 03        	beq	L297
  8083 08:1A33: 82 D6 01     	brl	L10126
  8084                        L297:
  8085                        	.line	1959
  8086                        ;		dp->sect++; /* Next sector */
  8087                        	.line	1960
  8088 08:1A36: 18           	clc
  8089 08:1A37: A9 01 00     	lda	#$1
  8090 08:1A3A: A0 18 00     	ldy	#$18
  8091 08:1A3D: 77 1C        	adc	[<L288+dp_0],Y
  8092 08:1A3F: A0 18 00     	ldy	#$18
  8093 08:1A42: 97 1C        	sta	[<L288+dp_0],Y
  8094 08:1A44: A9 00 00     	lda	#$0
  8095 08:1A47: A0 1A 00     	ldy	#$1a
  8096 08:1A4A: 77 1C        	adc	[<L288+dp_0],Y
  8097 08:1A4C: A0 1A 00     	ldy	#$1a
  8098 08:1A4F: 97 1C        	sta	[<L288+dp_0],Y
  8099                        ;
  8100                        ;		if (dp->clust == 0)
  8101                        	.line	1962
  8102                        ;		{ /* Static table */
  8103 08:1A51: A0 14 00     	ldy	#$14
  8104 08:1A54: B7 1C        	lda	[<L288+dp_0],Y
  8105 08:1A56: A0 16 00     	ldy	#$16
  8106 08:1A59: 17 1C        	ora	[<L288+dp_0],Y
  8107 08:1A5B: F0 03        	beq	L298
  8108 08:1A5D: 82 48 00     	brl	L10127
  8109                        L298:
  8110                        	.line	1963
  8111                        ;			if (ofs / SZDIRE >= fs->n_rootdi
                    r)
  8112                        	.line	1964
  8113                        ;			{ /* Report EOT if it reached en
                    d of static table */
  8114 08:1A60: A0 00 00     	ldy	#$0
  8115 08:1A63: 5A           	phy
  8116 08:1A64: A0 07 00     	ldy	#$7
  8117 08:1A67: B7 15        	lda	[<L289+fs_1],Y
  8118 08:1A69: 7A           	ply
  8119 08:1A6A: 2A           	rol	A
  8120 08:1A6B: 6A           	ror	A
  8121 08:1A6C: 10 01        	bpl	L299
  8122 08:1A6E: 88           	dey
  8123                        L299:
  8124 08:1A6F: 85 01        	sta	<R0
  8125 08:1A71: 84 03        	sty	<R0+2
  8126 08:1A73: D4 0F        	pei	<L289+ofs_1+2
  8127 08:1A75: D4 0D        	pei	<L289+ofs_1
  8128 08:1A77: A9 05 00     	lda	#$5
  8129                        	xref	~~~llsr
  8130 08:1A7A: 22 xx xx xx  	jsl	~~~llsr
  8131 08:1A7E: 85 05        	sta	<R1
  Sat Jul 10 2021  1:15                                                Page 160


  8132 08:1A80: 86 07        	stx	<R1+2
  8133 08:1A82: A5 05        	lda	<R1
  8134 08:1A84: C5 01        	cmp	<R0
  8135 08:1A86: A5 07        	lda	<R1+2
  8136 08:1A88: E5 03        	sbc	<R0+2
  8137 08:1A8A: B0 03        	bcs	L300
  8138 08:1A8C: 82 16 00     	brl	L10128
  8139                        L300:
  8140                        	.line	1965
  8141                        ;				dp->sect = 0;
  8142                        	.line	1966
  8143 08:1A8F: A9 00 00     	lda	#$0
  8144 08:1A92: A0 18 00     	ldy	#$18
  8145 08:1A95: 97 1C        	sta	[<L288+dp_0],Y
  8146 08:1A97: A9 00 00     	lda	#$0
  8147 08:1A9A: A0 1A 00     	ldy	#$1a
  8148 08:1A9D: 97 1C        	sta	[<L288+dp_0],Y
  8149                        ;				return FR_NO_FILE;
  8150                        	.line	1967
  8151 08:1A9F: A9 04 00     	lda	#$4
  8152 08:1AA2: 82 75 FF     	brl	L296
  8153                        ;			}
  8154                        	.line	1968
  8155                        ;		}
  8156                        L10128:
  8157                        	.line	1969
  8158                        ;		else
  8159 08:1AA5: 82 64 01     	brl	L10129
  8160                        L10127:
  8161                        ;		{ /* Dynamic table */
  8162                        	.line	1971
  8163                        ;			if ((ofs / SS(fs) & (fs->csize -
                     1)) == 0)
  8164                        	.line	1972
  8165                        ;			{ /* Cluster changed? */
  8166 08:1AA8: D4 0F        	pei	<L289+ofs_1+2
  8167 08:1AAA: D4 0D        	pei	<L289+ofs_1
  8168 08:1AAC: A9 09 00     	lda	#$9
  8169                        	xref	~~~llsr
  8170 08:1AAF: 22 xx xx xx  	jsl	~~~llsr
  8171 08:1AB3: 85 01        	sta	<R0
  8172 08:1AB5: 86 03        	stx	<R0+2
  8173 08:1AB7: 18           	clc
  8174 08:1AB8: A9 FF FF     	lda	#$ffff
  8175 08:1ABB: A0 09 00     	ldy	#$9
  8176 08:1ABE: 77 15        	adc	[<L289+fs_1],Y
  8177 08:1AC0: 85 05        	sta	<R1
  8178 08:1AC2: A0 00 00     	ldy	#$0
  8179 08:1AC5: A5 05        	lda	<R1
  8180 08:1AC7: 10 01        	bpl	L301
  8181 08:1AC9: 88           	dey
  8182                        L301:
  8183 08:1ACA: 85 05        	sta	<R1
  8184 08:1ACC: 84 07        	sty	<R1+2
  8185 08:1ACE: A5 05        	lda	<R1
  8186 08:1AD0: 25 01        	and	<R0
  8187 08:1AD2: 85 09        	sta	<R2
  8188 08:1AD4: A5 07        	lda	<R1+2
  Sat Jul 10 2021  1:15                                                Page 161


  8189 08:1AD6: 25 03        	and	<R0+2
  8190 08:1AD8: 85 0B        	sta	<R2+2
  8191 08:1ADA: A5 09        	lda	<R2
  8192 08:1ADC: 05 0B        	ora	<R2+2
  8193 08:1ADE: F0 03        	beq	L302
  8194 08:1AE0: 82 29 01     	brl	L10130
  8195                        L302:
  8196                        	.line	1973
  8197                        ;				clst = get_fat(&dp->obj,
                     dp->clust); /* Get next cluster */
  8198                        	.line	1974
  8199 08:1AE3: A0 16 00     	ldy	#$16
  8200 08:1AE6: B7 1C        	lda	[<L288+dp_0],Y
  8201 08:1AE8: 48           	pha
  8202 08:1AE9: A0 14 00     	ldy	#$14
  8203 08:1AEC: B7 1C        	lda	[<L288+dp_0],Y
  8204 08:1AEE: 48           	pha
  8205 08:1AEF: D4 1E        	pei	<L288+dp_0+2
  8206 08:1AF1: D4 1C        	pei	<L288+dp_0
  8207 08:1AF3: 22 54 0B 08  	jsl	~~get_fat
  8208 08:1AF7: 85 11        	sta	<L289+clst_1
  8209 08:1AF9: 86 13        	stx	<L289+clst_1+2
  8210                        ;				if (clst <= 1)
  8211                        	.line	1975
  8212                        ;					return FR_INT_ER
                    R; /* Internal error */
  8213 08:1AFB: A9 01 00     	lda	#$1
  8214 08:1AFE: C5 11        	cmp	<L289+clst_1
  8215 08:1B00: A9 00 00     	lda	#$0
  8216 08:1B03: E5 13        	sbc	<L289+clst_1+2
  8217 08:1B05: B0 03        	bcs	L303
  8218 08:1B07: 82 06 00     	brl	L10131
  8219                        L303:
  8220                        	.line	1976
  8221 08:1B0A: A9 02 00     	lda	#$2
  8222 08:1B0D: 82 0A FF     	brl	L296
  8223                        ;				if (clst == 0xFFFFFFFF)
  8224                        L10131:
  8225                        	.line	1977
  8226                        ;					return FR_DISK_E
                    RR; /* Disk error */
  8227 08:1B10: A5 11        	lda	<L289+clst_1
  8228 08:1B12: C9 FF FF     	cmp	#<$ffffffff
  8229 08:1B15: D0 05        	bne	L304
  8230 08:1B17: A5 13        	lda	<L289+clst_1+2
  8231 08:1B19: C9 FF FF     	cmp	#^$ffffffff
  8232                        L304:
  8233 08:1B1C: F0 03        	beq	L305
  8234 08:1B1E: 82 06 00     	brl	L10132
  8235                        L305:
  8236                        	.line	1978
  8237 08:1B21: A9 01 00     	lda	#$1
  8238 08:1B24: 82 F3 FE     	brl	L296
  8239                        ;				if (clst >= fs->n_fatent
                    )
  8240                        L10132:
  8241                        	.line	1979
  8242                        ;				{ /* It reached end of d
  Sat Jul 10 2021  1:15                                                Page 162


                    ynamic table */
  8243 08:1B27: A5 11        	lda	<L289+clst_1
  8244 08:1B29: A0 17 00     	ldy	#$17
  8245 08:1B2C: D7 15        	cmp	[<L289+fs_1],Y
  8246 08:1B2E: A5 13        	lda	<L289+clst_1+2
  8247 08:1B30: A0 19 00     	ldy	#$19
  8248 08:1B33: F7 15        	sbc	[<L289+fs_1],Y
  8249 08:1B35: B0 03        	bcs	L306
  8250 08:1B37: 82 A6 00     	brl	L10133
  8251                        L306:
  8252                        	.line	1980
  8253                        ;#if !FF_FS_READONLY
  8254                        ;					if (!stretch)
  8255                        	.line	1982
  8256                        ;					{ /* If no stret
                    ch, report EOT */
  8257 08:1B3A: A5 20        	lda	<L288+stretch_0
  8258 08:1B3C: F0 03        	beq	L307
  8259 08:1B3E: 82 16 00     	brl	L10134
  8260                        L307:
  8261                        	.line	1983
  8262                        ;						dp->sect
                     = 0;
  8263                        	.line	1984
  8264 08:1B41: A9 00 00     	lda	#$0
  8265 08:1B44: A0 18 00     	ldy	#$18
  8266 08:1B47: 97 1C        	sta	[<L288+dp_0],Y
  8267 08:1B49: A9 00 00     	lda	#$0
  8268 08:1B4C: A0 1A 00     	ldy	#$1a
  8269 08:1B4F: 97 1C        	sta	[<L288+dp_0],Y
  8270                        ;						return F
                    R_NO_FILE;
  8271                        	.line	1985
  8272 08:1B51: A9 04 00     	lda	#$4
  8273 08:1B54: 82 C3 FE     	brl	L296
  8274                        ;					}
  8275                        	.line	1986
  8276                        ;					clst = create_ch
                    ain(&dp->obj, dp->clust); /* Allocate a cluster */
  8277                        L10134:
  8278                        	.line	1987
  8279 08:1B57: A0 16 00     	ldy	#$16
  8280 08:1B5A: B7 1C        	lda	[<L288+dp_0],Y
  8281 08:1B5C: 48           	pha
  8282 08:1B5D: A0 14 00     	ldy	#$14
  8283 08:1B60: B7 1C        	lda	[<L288+dp_0],Y
  8284 08:1B62: 48           	pha
  8285 08:1B63: D4 1E        	pei	<L288+dp_0+2
  8286 08:1B65: D4 1C        	pei	<L288+dp_0
  8287 08:1B67: 22 93 12 08  	jsl	~~create_chain
  8288 08:1B6B: 85 11        	sta	<L289+clst_1
  8289 08:1B6D: 86 13        	stx	<L289+clst_1+2
  8290                        ;					if (clst == 0)
  8291                        	.line	1988
  8292                        ;						return F
                    R_DENIED; /* No free cluster */
  8293 08:1B6F: A5 11        	lda	<L289+clst_1
  8294 08:1B71: 05 13        	ora	<L289+clst_1+2
  Sat Jul 10 2021  1:15                                                Page 163


  8295 08:1B73: F0 03        	beq	L308
  8296 08:1B75: 82 06 00     	brl	L10135
  8297                        L308:
  8298                        	.line	1989
  8299 08:1B78: A9 07 00     	lda	#$7
  8300 08:1B7B: 82 9C FE     	brl	L296
  8301                        ;					if (clst == 1)
  8302                        L10135:
  8303                        	.line	1990
  8304                        ;						return F
                    R_INT_ERR; /* Internal error */
  8305 08:1B7E: A5 11        	lda	<L289+clst_1
  8306 08:1B80: C9 01 00     	cmp	#<$1
  8307 08:1B83: D0 05        	bne	L309
  8308 08:1B85: A5 13        	lda	<L289+clst_1+2
  8309 08:1B87: C9 00 00     	cmp	#^$1
  8310                        L309:
  8311 08:1B8A: F0 03        	beq	L310
  8312 08:1B8C: 82 06 00     	brl	L10136
  8313                        L310:
  8314                        	.line	1991
  8315 08:1B8F: A9 02 00     	lda	#$2
  8316 08:1B92: 82 85 FE     	brl	L296
  8317                        ;					if (clst == 0xFF
                    FFFFFF)
  8318                        L10136:
  8319                        	.line	1992
  8320                        ;						return F
                    R_DISK_ERR; /* Disk error */
  8321 08:1B95: A5 11        	lda	<L289+clst_1
  8322 08:1B97: C9 FF FF     	cmp	#<$ffffffff
  8323 08:1B9A: D0 05        	bne	L311
  8324 08:1B9C: A5 13        	lda	<L289+clst_1+2
  8325 08:1B9E: C9 FF FF     	cmp	#^$ffffffff
  8326                        L311:
  8327 08:1BA1: F0 03        	beq	L312
  8328 08:1BA3: 82 06 00     	brl	L10137
  8329                        L312:
  8330                        	.line	1993
  8331 08:1BA6: A9 01 00     	lda	#$1
  8332 08:1BA9: 82 6E FE     	brl	L296
  8333                        ;					if (dir_clear(fs
                    , clst) != FR_OK)
  8334                        L10137:
  8335                        	.line	1994
  8336                        ;						return F
                    R_DISK_ERR; /* Clean up the stretched table */
  8337 08:1BAC: D4 13        	pei	<L289+clst_1+2
  8338 08:1BAE: D4 11        	pei	<L289+clst_1
  8339 08:1BB0: D4 17        	pei	<L289+fs_1+2
  8340 08:1BB2: D4 15        	pei	<L289+fs_1
  8341 08:1BB4: 22 AE 15 08  	jsl	~~dir_clear
  8342 08:1BB8: AA           	tax
  8343 08:1BB9: D0 03        	bne	L313
  8344 08:1BBB: 82 06 00     	brl	L10138
  8345                        L313:
  8346                        	.line	1995
  8347 08:1BBE: A9 01 00     	lda	#$1
  Sat Jul 10 2021  1:15                                                Page 164


  8348 08:1BC1: 82 56 FE     	brl	L296
  8349                        ;					if (FF_FS_EXFAT)
  8350                        L10138:
  8351                        	.line	1996
  8352                        ;						dp->obj.
                    stat |= 4; /* exFAT: The directory has been stretched */
  8353 08:1BC4: 82 19 00     	brl	L10139
  8354                        	.line	1997
  8355 08:1BC7: 18           	clc
  8356 08:1BC8: A9 07 00     	lda	#$7
  8357 08:1BCB: 65 1C        	adc	<L288+dp_0
  8358 08:1BCD: 85 01        	sta	<R0
  8359 08:1BCF: A9 00 00     	lda	#$0
  8360 08:1BD2: 65 1E        	adc	<L288+dp_0+2
  8361 08:1BD4: 85 03        	sta	<R0+2
  8362 08:1BD6: E2 20        	sep	#$20
  8363                        	longa	off
  8364 08:1BD8: A7 01        	lda	[<R0]
  8365 08:1BDA: 09 04        	ora	#<$4
  8366 08:1BDC: 87 01        	sta	[<R0]
  8367 08:1BDE: C2 20        	rep	#$20
  8368                        	longa	on
  8369                        ;#else
  8370                        ;					if (!stretch) dp
                    ->sect = 0; /* (this line is to suppress compiler warning) *
                    /
  8371                        ;					dp->sect = 0; re
                    turn FR_NO_FILE; /* Report EOT */
  8372                        ;#endif
  8373                        ;				}
  8374                        L10139:
  8375                        	.line	2002
  8376                        ;				dp->clust = clst; /* Ini
                    tialize data for new cluster */
  8377                        L10133:
  8378                        	.line	2003
  8379 08:1BE0: A5 11        	lda	<L289+clst_1
  8380 08:1BE2: A0 14 00     	ldy	#$14
  8381 08:1BE5: 97 1C        	sta	[<L288+dp_0],Y
  8382 08:1BE7: A5 13        	lda	<L289+clst_1+2
  8383 08:1BE9: A0 16 00     	ldy	#$16
  8384 08:1BEC: 97 1C        	sta	[<L288+dp_0],Y
  8385                        ;				dp->sect = clst2sect(fs,
                     clst);
  8386                        	.line	2004
  8387 08:1BEE: D4 13        	pei	<L289+clst_1+2
  8388 08:1BF0: D4 11        	pei	<L289+clst_1
  8389 08:1BF2: D4 17        	pei	<L289+fs_1+2
  8390 08:1BF4: D4 15        	pei	<L289+fs_1
  8391 08:1BF6: 22 C5 0A 08  	jsl	~~clst2sect
  8392 08:1BFA: 85 01        	sta	<R0
  8393 08:1BFC: 86 03        	stx	<R0+2
  8394 08:1BFE: A5 01        	lda	<R0
  8395 08:1C00: A0 18 00     	ldy	#$18
  8396 08:1C03: 97 1C        	sta	[<L288+dp_0],Y
  8397 08:1C05: A5 03        	lda	<R0+2
  8398 08:1C07: A0 1A 00     	ldy	#$1a
  8399 08:1C0A: 97 1C        	sta	[<L288+dp_0],Y
  Sat Jul 10 2021  1:15                                                Page 165


  8400                        ;			}
  8401                        	.line	2005
  8402                        ;		}
  8403                        L10130:
  8404                        	.line	2006
  8405                        L10129:
  8406                        ;	}
  8407                        	.line	2007
  8408                        ;	dp->dptr = ofs; /* Current entry */
  8409                        L10126:
  8410                        	.line	2008
  8411 08:1C0C: A5 0D        	lda	<L289+ofs_1
  8412 08:1C0E: A0 10 00     	ldy	#$10
  8413 08:1C11: 97 1C        	sta	[<L288+dp_0],Y
  8414 08:1C13: A5 0F        	lda	<L289+ofs_1+2
  8415 08:1C15: A0 12 00     	ldy	#$12
  8416 08:1C18: 97 1C        	sta	[<L288+dp_0],Y
  8417                        ;	dp->dir = fs->win + ofs % SS(fs); /* Pointer to 
                    the entry in the win[] */
  8418                        	.line	2009
  8419 08:1C1A: A5 0D        	lda	<L289+ofs_1
  8420 08:1C1C: 29 FF 01     	and	#<$1ff
  8421 08:1C1F: 85 01        	sta	<R0
  8422 08:1C21: 64 03        	stz	<R0+2
  8423 08:1C23: 18           	clc
  8424 08:1C24: A9 33 00     	lda	#$33
  8425 08:1C27: 65 01        	adc	<R0
  8426 08:1C29: 85 05        	sta	<R1
  8427 08:1C2B: A9 00 00     	lda	#$0
  8428 08:1C2E: 65 03        	adc	<R0+2
  8429 08:1C30: 85 07        	sta	<R1+2
  8430 08:1C32: 18           	clc
  8431 08:1C33: A5 15        	lda	<L289+fs_1
  8432 08:1C35: 65 05        	adc	<R1
  8433 08:1C37: 85 01        	sta	<R0
  8434 08:1C39: A5 17        	lda	<L289+fs_1+2
  8435 08:1C3B: 65 07        	adc	<R1+2
  8436 08:1C3D: 85 03        	sta	<R0+2
  8437 08:1C3F: A5 01        	lda	<R0
  8438 08:1C41: A0 1C 00     	ldy	#$1c
  8439 08:1C44: 97 1C        	sta	[<L288+dp_0],Y
  8440 08:1C46: A5 03        	lda	<R0+2
  8441 08:1C48: A0 1E 00     	ldy	#$1e
  8442 08:1C4B: 97 1C        	sta	[<L288+dp_0],Y
  8443                        ;
  8444                        ;	return FR_OK;
  8445                        	.line	2011
  8446 08:1C4D: A9 00 00     	lda	#$0
  8447 08:1C50: 82 C7 FD     	brl	L296
  8448                        ;}
  8449                        	.line	2012
  8450                        	.endblock	2012
  8451             00000018   L288	equ	24
  8452             0000000D   L289	equ	13
  8453 08:1C53:              	ends
  8454                        	efunc
  8455                        	.endfunc	2012,13,24
  8456                        	.line	2012
  Sat Jul 10 2021  1:15                                                Page 166


  8457                        ;
  8458                        ;#if !FF_FS_READONLY
  8459                        ;/*-----------------------------------------------
                    ------------------------*/
  8460                        ;/* Directory handling - Reserve a block of direct
                    ory entries             */
  8461                        ;/*-----------------------------------------------
                    ------------------------*/
  8462                        ;
  8463                        ;static FRESULT dir_alloc( /* FR_OK(0):succeeded, 
                    !=0:error */
  8464                        ;DIR* dp, /* Pointer to the directory object */
  8465                        ;UINT nent /* Number of contiguous entries to allo
                    cate */
  8466                        ;)
  8467                        ;{
  8468                        	.line	2019
  8469                        	.line	2023
  8470                        	FFDOS
  8471                        	func
  8472                        	.function	2023
  8473                        ~~dir_alloc:
  8474                        	longa	on
  8475                        	longi	on
  8476 08:1C53: 3B           	tsc
  8477 08:1C54: 38           	sec
  8478 08:1C55: E9 0C 00     	sbc	#L314
  8479 08:1C58: 1B           	tcs
  8480 08:1C59: 0B           	phd
  8481 08:1C5A: 5B           	tcd
  8482             00000004   dp_0	set	4
  8483             00000008   nent_0	set	8
  8484                        	.block	2023
  8485                        ;	FRESULT res;
  8486                        ;	UINT n;
  8487                        ;	FATFS *fs = dp->obj.fs;
  8488                        ;
  8489                        ;	res = dir_sdi(dp, 0);
  8490             00000000   res_1	set	0
  8491             00000002   n_1	set	2
  8492             00000004   fs_1	set	4
  8493                        	.sym	res,0,5,1,16
  8494                        	.sym	n,2,16,1,16
  8495                        	.sym	fs,4,138,1,32,72
  8496                        	.sym	dp,4,138,6,32,75
  8497                        	.sym	nent,8,16,6,16
  8498 08:1C5B: A7 10        	lda	[<L314+dp_0]
  8499 08:1C5D: 85 09        	sta	<L315+fs_1
  8500 08:1C5F: A0 02 00     	ldy	#$2
  8501 08:1C62: B7 10        	lda	[<L314+dp_0],Y
  8502 08:1C64: 85 0B        	sta	<L315+fs_1+2
  8503                        	.line	2028
  8504 08:1C66: F4 00 00     	pea	#^$0
  8505 08:1C69: F4 00 00     	pea	#<$0
  8506 08:1C6C: D4 12        	pei	<L314+dp_0+2
  8507 08:1C6E: D4 10        	pei	<L314+dp_0
  8508 08:1C70: 22 60 17 08  	jsl	~~dir_sdi
  8509 08:1C74: 85 05        	sta	<L315+res_1
  Sat Jul 10 2021  1:15                                                Page 167


  8510                        ;	if (res == FR_OK)
  8511                        	.line	2029
  8512                        ;	{
  8513 08:1C76: A5 05        	lda	<L315+res_1
  8514 08:1C78: F0 03        	beq	L317
  8515 08:1C7A: 82 76 00     	brl	L10140
  8516                        L317:
  8517                        	.line	2030
  8518                        ;		n = 0;
  8519                        	.line	2031
  8520 08:1C7D: 64 07        	stz	<L315+n_1
  8521                        ;		do
  8522                        	.line	2032
  8523                        L10143:
  8524                        ;		{
  8525                        	.line	2033
  8526                        ;			res = move_window(fs, dp->sect);
  8527                        	.line	2034
  8528 08:1C7F: A0 1A 00     	ldy	#$1a
  8529 08:1C82: B7 10        	lda	[<L314+dp_0],Y
  8530 08:1C84: 48           	pha
  8531 08:1C85: A0 18 00     	ldy	#$18
  8532 08:1C88: B7 10        	lda	[<L314+dp_0],Y
  8533 08:1C8A: 48           	pha
  8534 08:1C8B: D4 0B        	pei	<L315+fs_1+2
  8535 08:1C8D: D4 09        	pei	<L315+fs_1
  8536 08:1C8F: 22 C1 08 08  	jsl	~~move_window
  8537 08:1C93: 85 05        	sta	<L315+res_1
  8538                        ;			if (res != FR_OK)
  8539                        	.line	2035
  8540                        ;				break;
  8541 08:1C95: A5 05        	lda	<L315+res_1
  8542 08:1C97: F0 03        	beq	L318
  8543 08:1C99: 82 57 00     	brl	L10142
  8544                        L318:
  8545                        ;#if FF_FS_EXFAT
  8546                        ;			if ((fs->fs_type == FS_EXFAT) ? 
                    (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_
                    Name] == DDEM || dp->dir[DIR_Name] == 0))
  8547                        ;			{
  8548                        ;#else
  8549                        ;			if (dp->dir[DIR_Name] == DDEM ||
                     dp->dir[DIR_Name] == 0)
  8550                        	.line	2041
  8551                        ;			{
  8552 08:1C9C: A0 1C 00     	ldy	#$1c
  8553 08:1C9F: B7 10        	lda	[<L314+dp_0],Y
  8554 08:1CA1: 85 01        	sta	<R0
  8555 08:1CA3: A0 1E 00     	ldy	#$1e
  8556 08:1CA6: B7 10        	lda	[<L314+dp_0],Y
  8557 08:1CA8: 85 03        	sta	<R0+2
  8558 08:1CAA: E2 20        	sep	#$20
  8559                        	longa	off
  8560 08:1CAC: A7 01        	lda	[<R0]
  8561 08:1CAE: C9 E5        	cmp	#<$e5
  8562 08:1CB0: C2 20        	rep	#$20
  8563                        	longa	on
  8564 08:1CB2: D0 03        	bne	L320
  Sat Jul 10 2021  1:15                                                Page 168


  8565 08:1CB4: 82 18 00     	brl	L319
  8566                        L320:
  8567 08:1CB7: A0 1C 00     	ldy	#$1c
  8568 08:1CBA: B7 10        	lda	[<L314+dp_0],Y
  8569 08:1CBC: 85 01        	sta	<R0
  8570 08:1CBE: A0 1E 00     	ldy	#$1e
  8571 08:1CC1: B7 10        	lda	[<L314+dp_0],Y
  8572 08:1CC3: 85 03        	sta	<R0+2
  8573 08:1CC5: A7 01        	lda	[<R0]
  8574 08:1CC7: 29 FF 00     	and	#$ff
  8575 08:1CCA: F0 03        	beq	L321
  8576 08:1CCC: 82 0E 00     	brl	L10144
  8577                        L321:
  8578                        L319:
  8579                        	.line	2042
  8580                        ;#endif
  8581                        ;				if (++n == nent)
  8582                        	.line	2044
  8583                        ;					break; /* A bloc
                    k of contiguous free entries is found */
  8584 08:1CCF: E6 07        	inc	<L315+n_1
  8585 08:1CD1: A5 07        	lda	<L315+n_1
  8586 08:1CD3: C5 14        	cmp	<L314+nent_0
  8587 08:1CD5: D0 03        	bne	L322
  8588 08:1CD7: 82 19 00     	brl	L10142
  8589                        L322:
  8590                        ;			}
  8591                        	.line	2046
  8592                        ;			else
  8593 08:1CDA: 82 02 00     	brl	L10145
  8594                        L10144:
  8595                        ;			{
  8596                        	.line	2048
  8597                        ;				n = 0; /* Not a blank en
                    try. Restart to search */
  8598                        	.line	2049
  8599 08:1CDD: 64 07        	stz	<L315+n_1
  8600                        ;			}
  8601                        	.line	2050
  8602                        L10145:
  8603                        ;			res = dir_next(dp, 1);
  8604                        	.line	2051
  8605 08:1CDF: F4 01 00     	pea	#<$1
  8606 08:1CE2: D4 12        	pei	<L314+dp_0+2
  8607 08:1CE4: D4 10        	pei	<L314+dp_0
  8608 08:1CE6: 22 9F 19 08  	jsl	~~dir_next
  8609 08:1CEA: 85 05        	sta	<L315+res_1
  8610                        ;		} while (res == FR_OK); /* Next entry wi
                    th table stretch enabled */
  8611                        	.line	2052
  8612                        L10141:
  8613 08:1CEC: A5 05        	lda	<L315+res_1
  8614 08:1CEE: D0 03        	bne	L323
  8615 08:1CF0: 82 8C FF     	brl	L10143
  8616                        L323:
  8617                        L10142:
  8618                        ;	}
  8619                        	.line	2053
  Sat Jul 10 2021  1:15                                                Page 169


  8620                        ;
  8621                        ;	if (res == FR_NO_FILE)
  8622                        L10140:
  8623                        	.line	2055
  8624                        ;		res = FR_DENIED; /* No directory entry t
                    o allocate */
  8625 08:1CF3: A5 05        	lda	<L315+res_1
  8626 08:1CF5: C9 04 00     	cmp	#<$4
  8627 08:1CF8: F0 03        	beq	L324
  8628 08:1CFA: 82 05 00     	brl	L10146
  8629                        L324:
  8630                        	.line	2056
  8631 08:1CFD: A9 07 00     	lda	#$7
  8632 08:1D00: 85 05        	sta	<L315+res_1
  8633                        ;	return res;
  8634                        L10146:
  8635                        	.line	2057
  8636 08:1D02: A5 05        	lda	<L315+res_1
  8637                        L325:
  8638 08:1D04: A8           	tay
  8639 08:1D05: A5 0E        	lda	<L314+2
  8640 08:1D07: 85 14        	sta	<L314+2+6
  8641 08:1D09: A5 0D        	lda	<L314+1
  8642 08:1D0B: 85 13        	sta	<L314+1+6
  8643 08:1D0D: 2B           	pld
  8644 08:1D0E: 3B           	tsc
  8645 08:1D0F: 18           	clc
  8646 08:1D10: 69 12 00     	adc	#L314+6
  8647 08:1D13: 1B           	tcs
  8648 08:1D14: 98           	tya
  8649 08:1D15: 6B           	rtl
  8650                        ;}
  8651                        	.line	2058
  8652                        	.endblock	2058
  8653             0000000C   L314	equ	12
  8654             00000005   L315	equ	5
  8655 08:1D16:              	ends
  8656                        	efunc
  8657                        	.endfunc	2058,5,12
  8658                        	.line	2058
  8659                        ;
  8660                        ;#endif	/* !FF_FS_READONLY */
  8661                        ;
  8662                        ;/*-----------------------------------------------
                    ------------------------*/
  8663                        ;/* FAT: Directory handling - Load/Store start clu
                    ster number             */
  8664                        ;/*-----------------------------------------------
                    ------------------------*/
  8665                        ;
  8666                        ;static DWORD ld_clust( /* Returns the top cluster
                     value of the SFN entry */
  8667                        ;FATFS* fs, /* Pointer to the fs object */
  8668                        ;const BYTE* dir /* Pointer to the key entry */
  8669                        ;)
  8670                        ;{
  8671                        	.line	2066
  8672                        	.line	2070
  Sat Jul 10 2021  1:15                                                Page 170


  8673                        	FFDOS
  8674                        	func
  8675                        	.function	2070
  8676                        ~~ld_clust:
  8677                        	longa	on
  8678                        	longi	on
  8679 08:1D16: 3B           	tsc
  8680 08:1D17: 38           	sec
  8681 08:1D18: E9 10 00     	sbc	#L326
  8682 08:1D1B: 1B           	tcs
  8683 08:1D1C: 0B           	phd
  8684 08:1D1D: 5B           	tcd
  8685             00000004   fs_0	set	4
  8686             00000008   dir_0	set	8
  8687                        	.block	2070
  8688                        ;	DWORD cl;
  8689                        ;
  8690                        ;	cl = ld_word(dir + DIR_FstClusLO);
  8691             00000000   cl_1	set	0
  8692                        	.sym	cl,0,18,1,32
  8693                        	.sym	fs,4,138,6,32,72
  8694                        	.sym	dir,8,142,6,32
  8695                        	.line	2073
  8696 08:1D1E: 18           	clc
  8697 08:1D1F: A9 1A 00     	lda	#$1a
  8698 08:1D22: 65 18        	adc	<L326+dir_0
  8699 08:1D24: 85 01        	sta	<R0
  8700 08:1D26: A9 00 00     	lda	#$0
  8701 08:1D29: 65 1A        	adc	<L326+dir_0+2
  8702 08:1D2B: 85 03        	sta	<R0+2
  8703 08:1D2D: D4 03        	pei	<R0+2
  8704 08:1D2F: D4 01        	pei	<R0
  8705 08:1D31: 22 00 00 08  	jsl	~~ld_word
  8706 08:1D35: 85 05        	sta	<R1
  8707 08:1D37: A0 00 00     	ldy	#$0
  8708 08:1D3A: A5 05        	lda	<R1
  8709 08:1D3C: 10 01        	bpl	L329
  8710 08:1D3E: 88           	dey
  8711                        L329:
  8712 08:1D3F: 85 0D        	sta	<L327+cl_1
  8713 08:1D41: 84 0F        	sty	<L327+cl_1+2
  8714                        ;	if (fs->fs_type == FS_FAT32)
  8715                        	.line	2074
  8716                        ;	{
  8717 08:1D43: E2 20        	sep	#$20
  8718                        	longa	off
  8719 08:1D45: A7 14        	lda	[<L326+fs_0]
  8720 08:1D47: C9 03        	cmp	#<$3
  8721 08:1D49: C2 20        	rep	#$20
  8722                        	longa	on
  8723 08:1D4B: F0 03        	beq	L330
  8724 08:1D4D: 82 40 00     	brl	L10147
  8725                        L330:
  8726                        	.line	2075
  8727                        ;		cl |= (DWORD) ld_word(dir + DIR_FstClusH
                    I) << 16;
  8728                        	.line	2076
  8729 08:1D50: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 171


  8730 08:1D51: A9 14 00     	lda	#$14
  8731 08:1D54: 65 18        	adc	<L326+dir_0
  8732 08:1D56: 85 05        	sta	<R1
  8733 08:1D58: A9 00 00     	lda	#$0
  8734 08:1D5B: 65 1A        	adc	<L326+dir_0+2
  8735 08:1D5D: 85 07        	sta	<R1+2
  8736 08:1D5F: D4 07        	pei	<R1+2
  8737 08:1D61: D4 05        	pei	<R1
  8738 08:1D63: 22 00 00 08  	jsl	~~ld_word
  8739 08:1D67: 85 09        	sta	<R2
  8740 08:1D69: A0 00 00     	ldy	#$0
  8741 08:1D6C: A5 09        	lda	<R2
  8742 08:1D6E: 10 01        	bpl	L331
  8743 08:1D70: 88           	dey
  8744                        L331:
  8745 08:1D71: 85 09        	sta	<R2
  8746 08:1D73: 84 0B        	sty	<R2+2
  8747 08:1D75: D4 0B        	pei	<R2+2
  8748 08:1D77: D4 09        	pei	<R2
  8749 08:1D79: A9 10 00     	lda	#$10
  8750                        	xref	~~~lasl
  8751 08:1D7C: 22 xx xx xx  	jsl	~~~lasl
  8752 08:1D80: 85 01        	sta	<R0
  8753 08:1D82: 86 03        	stx	<R0+2
  8754 08:1D84: A5 0D        	lda	<L327+cl_1
  8755 08:1D86: 05 01        	ora	<R0
  8756 08:1D88: 85 0D        	sta	<L327+cl_1
  8757 08:1D8A: A5 0F        	lda	<L327+cl_1+2
  8758 08:1D8C: 05 03        	ora	<R0+2
  8759 08:1D8E: 85 0F        	sta	<L327+cl_1+2
  8760                        ;	}
  8761                        	.line	2077
  8762                        ;
  8763                        ;	return cl;
  8764                        L10147:
  8765                        	.line	2079
  8766 08:1D90: A6 0F        	ldx	<L327+cl_1+2
  8767 08:1D92: A5 0D        	lda	<L327+cl_1
  8768                        L332:
  8769 08:1D94: A8           	tay
  8770 08:1D95: A5 12        	lda	<L326+2
  8771 08:1D97: 85 1A        	sta	<L326+2+8
  8772 08:1D99: A5 11        	lda	<L326+1
  8773 08:1D9B: 85 19        	sta	<L326+1+8
  8774 08:1D9D: 2B           	pld
  8775 08:1D9E: 3B           	tsc
  8776 08:1D9F: 18           	clc
  8777 08:1DA0: 69 18 00     	adc	#L326+8
  8778 08:1DA3: 1B           	tcs
  8779 08:1DA4: 98           	tya
  8780 08:1DA5: 6B           	rtl
  8781                        ;}
  8782                        	.line	2080
  8783                        	.endblock	2080
  8784             00000010   L326	equ	16
  8785             0000000D   L327	equ	13
  8786 08:1DA6:              	ends
  8787                        	efunc
  Sat Jul 10 2021  1:15                                                Page 172


  8788                        	.endfunc	2080,13,16
  8789                        	.line	2080
  8790                        ;
  8791                        ;#if !FF_FS_READONLY
  8792                        ;static void st_clust(FATFS* fs, /* Pointer to the
                     fs object */
  8793                        ;BYTE* dir, /* Pointer to the key entry */
  8794                        ;DWORD cl /* Value to be set */
  8795                        ;)
  8796                        ;{
  8797                        	.line	2083
  8798                        	.line	2087
  8799                        	FFDOS
  8800                        	func
  8801                        	.function	2087
  8802                        ~~st_clust:
  8803                        	longa	on
  8804                        	longi	on
  8805 08:1DA6: 3B           	tsc
  8806 08:1DA7: 38           	sec
  8807 08:1DA8: E9 08 00     	sbc	#L333
  8808 08:1DAB: 1B           	tcs
  8809 08:1DAC: 0B           	phd
  8810 08:1DAD: 5B           	tcd
  8811             00000004   fs_0	set	4
  8812             00000008   dir_0	set	8
  8813             0000000C   cl_0	set	12
  8814                        	.block	2087
  8815                        ;	st_word(dir + DIR_FstClusLO, (WORD) cl);
  8816                        	.sym	fs,4,138,6,32,72
  8817                        	.sym	dir,8,142,6,32
  8818                        	.sym	cl,12,18,6,32
  8819                        	.line	2088
  8820 08:1DAE: D4 14        	pei	<L333+cl_0
  8821 08:1DB0: 18           	clc
  8822 08:1DB1: A9 1A 00     	lda	#$1a
  8823 08:1DB4: 65 10        	adc	<L333+dir_0
  8824 08:1DB6: 85 01        	sta	<R0
  8825 08:1DB8: A9 00 00     	lda	#$0
  8826 08:1DBB: 65 12        	adc	<L333+dir_0+2
  8827 08:1DBD: 85 03        	sta	<R0+2
  8828 08:1DBF: D4 03        	pei	<R0+2
  8829 08:1DC1: D4 01        	pei	<R0
  8830 08:1DC3: 22 D7 00 08  	jsl	~~st_word
  8831                        ;	if (fs->fs_type == FS_FAT32)
  8832                        	.line	2089
  8833                        ;	{
  8834 08:1DC7: E2 20        	sep	#$20
  8835                        	longa	off
  8836 08:1DC9: A7 0C        	lda	[<L333+fs_0]
  8837 08:1DCB: C9 03        	cmp	#<$3
  8838 08:1DCD: C2 20        	rep	#$20
  8839                        	longa	on
  8840 08:1DCF: F0 03        	beq	L336
  8841 08:1DD1: 82 28 00     	brl	L10148
  8842                        L336:
  8843                        	.line	2090
  8844                        ;		st_word(dir + DIR_FstClusHI, (WORD) (cl 
  Sat Jul 10 2021  1:15                                                Page 173


                    >> 16));
  8845                        	.line	2091
  8846 08:1DD4: D4 16        	pei	<L333+cl_0+2
  8847 08:1DD6: D4 14        	pei	<L333+cl_0
  8848 08:1DD8: A9 10 00     	lda	#$10
  8849                        	xref	~~~llsr
  8850 08:1DDB: 22 xx xx xx  	jsl	~~~llsr
  8851 08:1DDF: 85 01        	sta	<R0
  8852 08:1DE1: 86 03        	stx	<R0+2
  8853 08:1DE3: D4 01        	pei	<R0
  8854 08:1DE5: 18           	clc
  8855 08:1DE6: A9 14 00     	lda	#$14
  8856 08:1DE9: 65 10        	adc	<L333+dir_0
  8857 08:1DEB: 85 05        	sta	<R1
  8858 08:1DED: A9 00 00     	lda	#$0
  8859 08:1DF0: 65 12        	adc	<L333+dir_0+2
  8860 08:1DF2: 85 07        	sta	<R1+2
  8861 08:1DF4: D4 07        	pei	<R1+2
  8862 08:1DF6: D4 05        	pei	<R1
  8863 08:1DF8: 22 D7 00 08  	jsl	~~st_word
  8864                        ;	}
  8865                        	.line	2092
  8866                        ;}
  8867                        L10148:
  8868                        	.line	2093
  8869                        L337:
  8870 08:1DFC: A5 0A        	lda	<L333+2
  8871 08:1DFE: 85 16        	sta	<L333+2+12
  8872 08:1E00: A5 09        	lda	<L333+1
  8873 08:1E02: 85 15        	sta	<L333+1+12
  8874 08:1E04: 2B           	pld
  8875 08:1E05: 3B           	tsc
  8876 08:1E06: 18           	clc
  8877 08:1E07: 69 14 00     	adc	#L333+12
  8878 08:1E0A: 1B           	tcs
  8879 08:1E0B: 6B           	rtl
  8880                        	.endblock	2093
  8881             00000008   L333	equ	8
  8882             00000009   L334	equ	9
  8883 08:1E0C:              	ends
  8884                        	efunc
  8885                        	.endfunc	2093,9,8
  8886                        	.line	2093
  8887                        ;#endif
  8888                        ;
  8889                        ;#if FF_USE_LFN
  8890                        ;/*-----------------------------------------------
                    ---------*/
  8891                        ;/* FAT-LFN: Compare a part of file name with an L
                    FN entry */
  8892                        ;/*-----------------------------------------------
                    ---------*/
  8893                        ;
  8894                        ;static int cmp_lfn ( /* 1:matched, 0:not matched 
                    */
  8895                        ;		const WCHAR* lfnbuf, /* Pointer to the L
                    FN working buffer to be compared */
  8896                        ;		BYTE* dir /* Pointer to the directory en
  Sat Jul 10 2021  1:15                                                Page 174


                    try containing the part of LFN */
  8897                        ;)
  8898                        ;{
  8899                        	.line	2101
  8900                        	.line	2105
  8901                        	FFDOS
  8902                        	func
  8903                        	.function	2105
  8904                        ~~cmp_lfn:
  8905                        	longa	on
  8906                        	longi	on
  8907 08:1E0C: 3B           	tsc
  8908 08:1E0D: 38           	sec
  8909 08:1E0E: E9 1C 00     	sbc	#L338
  8910 08:1E11: 1B           	tcs
  8911 08:1E12: 0B           	phd
  8912 08:1E13: 5B           	tcd
  8913             00000004   lfnbuf_0	set	4
  8914             00000008   dir_0	set	8
  8915                        	.block	2105
  8916                        ;	UINT i, s;
  8917                        ;	WCHAR wc, uc;
  8918                        ;
  8919                        ;	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0
                    ; /* Check LDIR_FstClusLO */
  8920             00000000   i_1	set	0
  8921             00000002   s_1	set	2
  8922             00000004   wc_1	set	4
  8923             00000006   uc_1	set	6
  8924                        	.sym	i,0,16,1,16
  8925                        	.sym	s,2,16,1,16
  8926                        	.sym	wc,4,16,1,16
  8927                        	.sym	uc,6,16,1,16
  8928                        	.sym	lfnbuf,4,144,6,32
  8929                        	.sym	dir,8,142,6,32
  8930                        	.line	2109
  8931 08:1E14: 18           	clc
  8932 08:1E15: A9 1A 00     	lda	#$1a
  8933 08:1E18: 65 24        	adc	<L338+dir_0
  8934 08:1E1A: 85 01        	sta	<R0
  8935 08:1E1C: A9 00 00     	lda	#$0
  8936 08:1E1F: 65 26        	adc	<L338+dir_0+2
  8937 08:1E21: 85 03        	sta	<R0+2
  8938 08:1E23: D4 03        	pei	<R0+2
  8939 08:1E25: D4 01        	pei	<R0
  8940 08:1E27: 22 00 00 08  	jsl	~~ld_word
  8941 08:1E2B: AA           	tax
  8942 08:1E2C: D0 03        	bne	L341
  8943 08:1E2E: 82 15 00     	brl	L10149
  8944                        L341:
  8945                        	.line	2109
  8946 08:1E31: A9 00 00     	lda	#$0
  8947                        L342:
  8948 08:1E34: A8           	tay
  8949 08:1E35: A5 1E        	lda	<L338+2
  8950 08:1E37: 85 26        	sta	<L338+2+8
  8951 08:1E39: A5 1D        	lda	<L338+1
  8952 08:1E3B: 85 25        	sta	<L338+1+8
  Sat Jul 10 2021  1:15                                                Page 175


  8953 08:1E3D: 2B           	pld
  8954 08:1E3E: 3B           	tsc
  8955 08:1E3F: 18           	clc
  8956 08:1E40: 69 24 00     	adc	#L338+8
  8957 08:1E43: 1B           	tcs
  8958 08:1E44: 98           	tya
  8959 08:1E45: 6B           	rtl
  8960                        ;
  8961                        ;	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13; /* Offset
                     in the LFN buffer */
  8962                        L10149:
  8963                        	.line	2111
  8964 08:1E46: A7 24        	lda	[<L338+dir_0]
  8965 08:1E48: 29 3F 00     	and	#<$3f
  8966 08:1E4B: 85 01        	sta	<R0
  8967 08:1E4D: A5 01        	lda	<R0
  8968 08:1E4F: A2 0D 00     	ldx	#<$d
  8969                        	xref	~~~mul
  8970 08:1E52: 22 xx xx xx  	jsl	~~~mul
  8971 08:1E56: 85 01        	sta	<R0
  8972 08:1E58: 18           	clc
  8973 08:1E59: A9 F3 FF     	lda	#$fff3
  8974 08:1E5C: 65 01        	adc	<R0
  8975 08:1E5E: 85 15        	sta	<L339+i_1
  8976                        ;
  8977                        ;	for (wc = 1, s = 0; s < 13; s++)
  8978                        	.line	2113
  8979 08:1E60: A9 01 00     	lda	#$1
  8980 08:1E63: 85 19        	sta	<L339+wc_1
  8981 08:1E65: 64 17        	stz	<L339+s_1
  8982 08:1E67: 82 AE 00     	brl	L10153
  8983                        L10152:
  8984                        ;	{ /* Process all characters in the entry */
  8985                        	.line	2114
  8986                        ;		uc = ld_word(dir + LfnOfs[s]); /* Pick a
                    n LFN character */
  8987                        	.line	2115
  8988 08:1E6A: A6 17        	ldx	<L339+s_1
  8989 08:1E6C: BD xx xx     	lda	|~~LfnOfs,X
  8990 08:1E6F: 29 FF 00     	and	#$ff
  8991 08:1E72: 85 01        	sta	<R0
  8992 08:1E74: 64 03        	stz	<R0+2
  8993 08:1E76: 18           	clc
  8994 08:1E77: A5 24        	lda	<L338+dir_0
  8995 08:1E79: 65 01        	adc	<R0
  8996 08:1E7B: 85 05        	sta	<R1
  8997 08:1E7D: A5 26        	lda	<L338+dir_0+2
  8998 08:1E7F: 65 03        	adc	<R0+2
  8999 08:1E81: 85 07        	sta	<R1+2
  9000 08:1E83: D4 07        	pei	<R1+2
  9001 08:1E85: D4 05        	pei	<R1
  9002 08:1E87: 22 00 00 08  	jsl	~~ld_word
  9003 08:1E8B: 85 1B        	sta	<L339+uc_1
  9004                        ;		if (wc != 0)
  9005                        	.line	2116
  9006                        ;		{
  9007 08:1E8D: A5 19        	lda	<L339+wc_1
  9008 08:1E8F: D0 03        	bne	L343
  Sat Jul 10 2021  1:15                                                Page 176


  9009 08:1E91: 82 72 00     	brl	L10154
  9010                        L343:
  9011                        	.line	2117
  9012                        ;			if (i >= FF_MAX_LFN + 1 || ff_wt
                    oupper(uc) != ff_wtoupper(lfnbuf[i++]))
  9013                        	.line	2118
  9014                        ;			{ /* Compare it */
  9015 08:1E94: A5 15        	lda	<L339+i_1
  9016 08:1E96: C9 00 01     	cmp	#<$100
  9017 08:1E99: 90 03        	bcc	L345
  9018 08:1E9B: 82 5B 00     	brl	L344
  9019                        L345:
  9020 08:1E9E: A5 15        	lda	<L339+i_1
  9021 08:1EA0: 85 05        	sta	<R1
  9022 08:1EA2: E6 15        	inc	<L339+i_1
  9023 08:1EA4: A5 05        	lda	<R1
  9024 08:1EA6: 85 05        	sta	<R1
  9025 08:1EA8: 64 07        	stz	<R1+2
  9026 08:1EAA: D4 07        	pei	<R1+2
  9027 08:1EAC: D4 05        	pei	<R1
  9028 08:1EAE: A9 01 00     	lda	#$1
  9029                        	xref	~~~lasl
  9030 08:1EB1: 22 xx xx xx  	jsl	~~~lasl
  9031 08:1EB5: 85 01        	sta	<R0
  9032 08:1EB7: 86 03        	stx	<R0+2
  9033 08:1EB9: 18           	clc
  9034 08:1EBA: A5 20        	lda	<L338+lfnbuf_0
  9035 08:1EBC: 65 01        	adc	<R0
  9036 08:1EBE: 85 09        	sta	<R2
  9037 08:1EC0: A5 22        	lda	<L338+lfnbuf_0+2
  9038 08:1EC2: 65 03        	adc	<R0+2
  9039 08:1EC4: 85 0B        	sta	<R2+2
  9040 08:1EC6: A7 09        	lda	[<R2]
  9041 08:1EC8: 85 01        	sta	<R0
  9042 08:1ECA: 64 03        	stz	<R0+2
  9043 08:1ECC: D4 03        	pei	<R0+2
  9044 08:1ECE: D4 01        	pei	<R0
  9045 08:1ED0: 22 8D 92 08  	jsl	~~ff_wtoupper
  9046 08:1ED4: 85 09        	sta	<R2
  9047 08:1ED6: 86 0B        	stx	<R2+2
  9048 08:1ED8: A5 1B        	lda	<L339+uc_1
  9049 08:1EDA: 85 0D        	sta	<R3
  9050 08:1EDC: 64 0F        	stz	<R3+2
  9051 08:1EDE: D4 0F        	pei	<R3+2
  9052 08:1EE0: D4 0D        	pei	<R3
  9053 08:1EE2: 22 8D 92 08  	jsl	~~ff_wtoupper
  9054 08:1EE6: 85 11        	sta	<17
  9055 08:1EE8: 86 13        	stx	<17+2
  9056 08:1EEA: A5 11        	lda	<17
  9057 08:1EEC: C5 09        	cmp	<R2
  9058 08:1EEE: D0 04        	bne	L346
  9059 08:1EF0: A5 13        	lda	<17+2
  9060 08:1EF2: C5 0B        	cmp	<R2+2
  9061                        L346:
  9062 08:1EF4: D0 03        	bne	L347
  9063 08:1EF6: 82 06 00     	brl	L10155
  9064                        L347:
  9065                        L344:
  Sat Jul 10 2021  1:15                                                Page 177


  9066                        	.line	2119
  9067                        ;				return 0; /* Not matched
                     */
  9068                        	.line	2120
  9069 08:1EF9: A9 00 00     	lda	#$0
  9070 08:1EFC: 82 35 FF     	brl	L342
  9071                        ;			}
  9072                        	.line	2121
  9073                        ;			wc = uc;
  9074                        L10155:
  9075                        	.line	2122
  9076 08:1EFF: A5 1B        	lda	<L339+uc_1
  9077 08:1F01: 85 19        	sta	<L339+wc_1
  9078                        ;		}
  9079                        	.line	2123
  9080                        ;		else
  9081 08:1F03: 82 10 00     	brl	L10156
  9082                        L10154:
  9083                        ;		{
  9084                        	.line	2125
  9085                        ;			if (uc != 0xFFFF) return 0; /* C
                    heck filler */
  9086                        	.line	2126
  9087 08:1F06: A5 1B        	lda	<L339+uc_1
  9088 08:1F08: C9 FF FF     	cmp	#<$ffff
  9089 08:1F0B: D0 03        	bne	L348
  9090 08:1F0D: 82 06 00     	brl	L10157
  9091                        L348:
  9092                        	.line	2126
  9093 08:1F10: A9 00 00     	lda	#$0
  9094 08:1F13: 82 1E FF     	brl	L342
  9095                        ;		}
  9096                        L10157:
  9097                        	.line	2127
  9098                        L10156:
  9099                        ;	}
  9100                        	.line	2128
  9101                        L10150:
  9102 08:1F16: E6 17        	inc	<L339+s_1
  9103                        L10153:
  9104 08:1F18: A5 17        	lda	<L339+s_1
  9105 08:1F1A: C9 0D 00     	cmp	#<$d
  9106 08:1F1D: B0 03        	bcs	L349
  9107 08:1F1F: 82 48 FF     	brl	L10152
  9108                        L349:
  9109                        L10151:
  9110                        ;
  9111                        ;	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) r
                    eturn 0; /* Last segment matched but different length */
  9112                        	.line	2130
  9113 08:1F22: E2 20        	sep	#$20
  9114                        	longa	off
  9115 08:1F24: A7 24        	lda	[<L338+dir_0]
  9116 08:1F26: 29 40        	and	#<$40
  9117 08:1F28: C2 20        	rep	#$20
  9118                        	longa	on
  9119 08:1F2A: D0 03        	bne	L350
  9120 08:1F2C: 82 36 00     	brl	L10158
  Sat Jul 10 2021  1:15                                                Page 178


  9121                        L350:
  9122 08:1F2F: A5 19        	lda	<L339+wc_1
  9123 08:1F31: D0 03        	bne	L351
  9124 08:1F33: 82 2F 00     	brl	L10158
  9125                        L351:
  9126 08:1F36: A5 15        	lda	<L339+i_1
  9127 08:1F38: 85 05        	sta	<R1
  9128 08:1F3A: 64 07        	stz	<R1+2
  9129 08:1F3C: D4 07        	pei	<R1+2
  9130 08:1F3E: D4 05        	pei	<R1
  9131 08:1F40: A9 01 00     	lda	#$1
  9132                        	xref	~~~lasl
  9133 08:1F43: 22 xx xx xx  	jsl	~~~lasl
  9134 08:1F47: 85 01        	sta	<R0
  9135 08:1F49: 86 03        	stx	<R0+2
  9136 08:1F4B: 18           	clc
  9137 08:1F4C: A5 20        	lda	<L338+lfnbuf_0
  9138 08:1F4E: 65 01        	adc	<R0
  9139 08:1F50: 85 09        	sta	<R2
  9140 08:1F52: A5 22        	lda	<L338+lfnbuf_0+2
  9141 08:1F54: 65 03        	adc	<R0+2
  9142 08:1F56: 85 0B        	sta	<R2+2
  9143 08:1F58: A7 09        	lda	[<R2]
  9144 08:1F5A: D0 03        	bne	L352
  9145 08:1F5C: 82 06 00     	brl	L10158
  9146                        L352:
  9147                        	.line	2130
  9148 08:1F5F: A9 00 00     	lda	#$0
  9149 08:1F62: 82 CF FE     	brl	L342
  9150                        ;
  9151                        ;	return 1; /* The part of LFN matched */
  9152                        L10158:
  9153                        	.line	2132
  9154 08:1F65: A9 01 00     	lda	#$1
  9155 08:1F68: 82 C9 FE     	brl	L342
  9156                        ;}
  9157                        	.line	2133
  9158                        	.endblock	2133
  9159             0000001C   L338	equ	28
  9160             00000015   L339	equ	21
  9161 08:1F6B:              	ends
  9162                        	efunc
  9163                        	.endfunc	2133,21,28
  9164                        	.line	2133
  9165                        ;
  9166                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF
                    _USE_LABEL || FF_FS_EXFAT
  9167                        ;/*-----------------------------------------------
                    ------*/
  9168                        ;/* FAT-LFN: Pick a part of file name from an LFN 
                    entry */
  9169                        ;/*-----------------------------------------------
                    ------*/
  9170                        ;
  9171                        ;static int pick_lfn ( /* 1:succeeded, 0:buffer ov
                    erflow or invalid LFN entry */
  9172                        ;		WCHAR* lfnbuf, /* Pointer to the LFN wor
                    king buffer */
  Sat Jul 10 2021  1:15                                                Page 179


  9173                        ;		BYTE* dir /* Pointer to the LFN entry */
  9174                        ;)
  9175                        ;{
  9176                        	.line	2140
  9177                        	.line	2144
  9178                        	FFDOS
  9179                        	func
  9180                        	.function	2144
  9181                        ~~pick_lfn:
  9182                        	longa	on
  9183                        	longi	on
  9184 08:1F6B: 3B           	tsc
  9185 08:1F6C: 38           	sec
  9186 08:1F6D: E9 14 00     	sbc	#L353
  9187 08:1F70: 1B           	tcs
  9188 08:1F71: 0B           	phd
  9189 08:1F72: 5B           	tcd
  9190             00000004   lfnbuf_0	set	4
  9191             00000008   dir_0	set	8
  9192                        	.block	2144
  9193                        ;	UINT i, s;
  9194                        ;	WCHAR wc, uc;
  9195                        ;
  9196                        ;	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0
                    ; /* Check LDIR_FstClusLO is 0 */
  9197             00000000   i_1	set	0
  9198             00000002   s_1	set	2
  9199             00000004   wc_1	set	4
  9200             00000006   uc_1	set	6
  9201                        	.sym	i,0,16,1,16
  9202                        	.sym	s,2,16,1,16
  9203                        	.sym	wc,4,16,1,16
  9204                        	.sym	uc,6,16,1,16
  9205                        	.sym	lfnbuf,4,144,6,32
  9206                        	.sym	dir,8,142,6,32
  9207                        	.line	2148
  9208 08:1F73: 18           	clc
  9209 08:1F74: A9 1A 00     	lda	#$1a
  9210 08:1F77: 65 1C        	adc	<L353+dir_0
  9211 08:1F79: 85 01        	sta	<R0
  9212 08:1F7B: A9 00 00     	lda	#$0
  9213 08:1F7E: 65 1E        	adc	<L353+dir_0+2
  9214 08:1F80: 85 03        	sta	<R0+2
  9215 08:1F82: D4 03        	pei	<R0+2
  9216 08:1F84: D4 01        	pei	<R0
  9217 08:1F86: 22 00 00 08  	jsl	~~ld_word
  9218 08:1F8A: AA           	tax
  9219 08:1F8B: D0 03        	bne	L356
  9220 08:1F8D: 82 15 00     	brl	L10159
  9221                        L356:
  9222                        	.line	2148
  9223 08:1F90: A9 00 00     	lda	#$0
  9224                        L357:
  9225 08:1F93: A8           	tay
  9226 08:1F94: A5 16        	lda	<L353+2
  9227 08:1F96: 85 1E        	sta	<L353+2+8
  9228 08:1F98: A5 15        	lda	<L353+1
  9229 08:1F9A: 85 1D        	sta	<L353+1+8
  Sat Jul 10 2021  1:15                                                Page 180


  9230 08:1F9C: 2B           	pld
  9231 08:1F9D: 3B           	tsc
  9232 08:1F9E: 18           	clc
  9233 08:1F9F: 69 1C 00     	adc	#L353+8
  9234 08:1FA2: 1B           	tcs
  9235 08:1FA3: 98           	tya
  9236 08:1FA4: 6B           	rtl
  9237                        ;
  9238                        ;	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13; /* Offse
                    t in the LFN buffer */
  9239                        L10159:
  9240                        	.line	2150
  9241 08:1FA5: A7 1C        	lda	[<L353+dir_0]
  9242 08:1FA7: 29 FF 00     	and	#$ff
  9243 08:1FAA: 29 BF FF     	and	#<$ffffffbf
  9244 08:1FAD: 85 01        	sta	<R0
  9245 08:1FAF: A5 01        	lda	<R0
  9246 08:1FB1: A2 0D 00     	ldx	#<$d
  9247                        	xref	~~~mul
  9248 08:1FB4: 22 xx xx xx  	jsl	~~~mul
  9249 08:1FB8: 85 01        	sta	<R0
  9250 08:1FBA: 18           	clc
  9251 08:1FBB: A9 F3 FF     	lda	#$fff3
  9252 08:1FBE: 65 01        	adc	<R0
  9253 08:1FC0: 85 0D        	sta	<L354+i_1
  9254                        ;
  9255                        ;	for (wc = 1, s = 0; s < 13; s++)
  9256                        	.line	2152
  9257 08:1FC2: A9 01 00     	lda	#$1
  9258 08:1FC5: 85 11        	sta	<L354+wc_1
  9259 08:1FC7: 64 0F        	stz	<L354+s_1
  9260 08:1FC9: 82 7B 00     	brl	L10163
  9261                        L10162:
  9262                        ;	{ /* Process all characters in the entry */
  9263                        	.line	2153
  9264                        ;		uc = ld_word(dir + LfnOfs[s]); /* Pick a
                    n LFN character */
  9265                        	.line	2154
  9266 08:1FCC: A6 0F        	ldx	<L354+s_1
  9267 08:1FCE: BD xx xx     	lda	|~~LfnOfs,X
  9268 08:1FD1: 29 FF 00     	and	#$ff
  9269 08:1FD4: 85 01        	sta	<R0
  9270 08:1FD6: 64 03        	stz	<R0+2
  9271 08:1FD8: 18           	clc
  9272 08:1FD9: A5 1C        	lda	<L353+dir_0
  9273 08:1FDB: 65 01        	adc	<R0
  9274 08:1FDD: 85 05        	sta	<R1
  9275 08:1FDF: A5 1E        	lda	<L353+dir_0+2
  9276 08:1FE1: 65 03        	adc	<R0+2
  9277 08:1FE3: 85 07        	sta	<R1+2
  9278 08:1FE5: D4 07        	pei	<R1+2
  9279 08:1FE7: D4 05        	pei	<R1
  9280 08:1FE9: 22 00 00 08  	jsl	~~ld_word
  9281 08:1FED: 85 13        	sta	<L354+uc_1
  9282                        ;		if (wc != 0)
  9283                        	.line	2155
  9284                        ;		{
  9285 08:1FEF: A5 11        	lda	<L354+wc_1
  Sat Jul 10 2021  1:15                                                Page 181


  9286 08:1FF1: D0 03        	bne	L358
  9287 08:1FF3: 82 3F 00     	brl	L10164
  9288                        L358:
  9289                        	.line	2156
  9290                        ;			if (i >= FF_MAX_LFN + 1) return 
                    0; /* Buffer overflow? */
  9291                        	.line	2157
  9292 08:1FF6: A5 0D        	lda	<L354+i_1
  9293 08:1FF8: C9 00 01     	cmp	#<$100
  9294 08:1FFB: B0 03        	bcs	L359
  9295 08:1FFD: 82 06 00     	brl	L10165
  9296                        L359:
  9297                        	.line	2157
  9298 08:2000: A9 00 00     	lda	#$0
  9299 08:2003: 82 8D FF     	brl	L357
  9300                        ;			lfnbuf[i++] = wc = uc; /* Store 
                    it */
  9301                        L10165:
  9302                        	.line	2158
  9303 08:2006: A5 0D        	lda	<L354+i_1
  9304 08:2008: 85 05        	sta	<R1
  9305 08:200A: 64 07        	stz	<R1+2
  9306 08:200C: D4 07        	pei	<R1+2
  9307 08:200E: D4 05        	pei	<R1
  9308 08:2010: A9 01 00     	lda	#$1
  9309                        	xref	~~~lasl
  9310 08:2013: 22 xx xx xx  	jsl	~~~lasl
  9311 08:2017: 85 01        	sta	<R0
  9312 08:2019: 86 03        	stx	<R0+2
  9313 08:201B: 18           	clc
  9314 08:201C: A5 18        	lda	<L353+lfnbuf_0
  9315 08:201E: 65 01        	adc	<R0
  9316 08:2020: 85 09        	sta	<R2
  9317 08:2022: A5 1A        	lda	<L353+lfnbuf_0+2
  9318 08:2024: 65 03        	adc	<R0+2
  9319 08:2026: 85 0B        	sta	<R2+2
  9320 08:2028: A5 13        	lda	<L354+uc_1
  9321 08:202A: 85 11        	sta	<L354+wc_1
  9322 08:202C: A5 13        	lda	<L354+uc_1
  9323 08:202E: 87 09        	sta	[<R2]
  9324 08:2030: E6 0D        	inc	<L354+i_1
  9325                        ;		}
  9326                        	.line	2159
  9327                        ;		else
  9328 08:2032: 82 10 00     	brl	L10166
  9329                        L10164:
  9330                        ;		{
  9331                        	.line	2161
  9332                        ;			if (uc != 0xFFFF) return 0; /* C
                    heck filler */
  9333                        	.line	2162
  9334 08:2035: A5 13        	lda	<L354+uc_1
  9335 08:2037: C9 FF FF     	cmp	#<$ffff
  9336 08:203A: D0 03        	bne	L360
  9337 08:203C: 82 06 00     	brl	L10167
  9338                        L360:
  9339                        	.line	2162
  9340 08:203F: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 182


  9341 08:2042: 82 4E FF     	brl	L357
  9342                        ;		}
  9343                        L10167:
  9344                        	.line	2163
  9345                        L10166:
  9346                        ;	}
  9347                        	.line	2164
  9348                        L10160:
  9349 08:2045: E6 0F        	inc	<L354+s_1
  9350                        L10163:
  9351 08:2047: A5 0F        	lda	<L354+s_1
  9352 08:2049: C9 0D 00     	cmp	#<$d
  9353 08:204C: B0 03        	bcs	L361
  9354 08:204E: 82 7B FF     	brl	L10162
  9355                        L361:
  9356                        L10161:
  9357                        ;
  9358                        ;	if (dir[LDIR_Ord] & LLEF && wc != 0)
  9359                        	.line	2166
  9360                        ;	{ /* Put terminator if it is the last LFN part a
                    nd not terminated */
  9361 08:2051: E2 20        	sep	#$20
  9362                        	longa	off
  9363 08:2053: A7 1C        	lda	[<L353+dir_0]
  9364 08:2055: 29 40        	and	#<$40
  9365 08:2057: C2 20        	rep	#$20
  9366                        	longa	on
  9367 08:2059: D0 03        	bne	L362
  9368 08:205B: 82 3E 00     	brl	L10168
  9369                        L362:
  9370 08:205E: A5 11        	lda	<L354+wc_1
  9371 08:2060: D0 03        	bne	L363
  9372 08:2062: 82 37 00     	brl	L10168
  9373                        L363:
  9374                        	.line	2167
  9375                        ;		if (i >= FF_MAX_LFN + 1) return 0; /* Bu
                    ffer overflow? */
  9376                        	.line	2168
  9377 08:2065: A5 0D        	lda	<L354+i_1
  9378 08:2067: C9 00 01     	cmp	#<$100
  9379 08:206A: B0 03        	bcs	L364
  9380 08:206C: 82 06 00     	brl	L10169
  9381                        L364:
  9382                        	.line	2168
  9383 08:206F: A9 00 00     	lda	#$0
  9384 08:2072: 82 1E FF     	brl	L357
  9385                        ;		lfnbuf[i] = 0;
  9386                        L10169:
  9387                        	.line	2169
  9388 08:2075: A5 0D        	lda	<L354+i_1
  9389 08:2077: 85 05        	sta	<R1
  9390 08:2079: 64 07        	stz	<R1+2
  9391 08:207B: D4 07        	pei	<R1+2
  9392 08:207D: D4 05        	pei	<R1
  9393 08:207F: A9 01 00     	lda	#$1
  9394                        	xref	~~~lasl
  9395 08:2082: 22 xx xx xx  	jsl	~~~lasl
  9396 08:2086: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 183


  9397 08:2088: 86 03        	stx	<R0+2
  9398 08:208A: 18           	clc
  9399 08:208B: A5 18        	lda	<L353+lfnbuf_0
  9400 08:208D: 65 01        	adc	<R0
  9401 08:208F: 85 09        	sta	<R2
  9402 08:2091: A5 1A        	lda	<L353+lfnbuf_0+2
  9403 08:2093: 65 03        	adc	<R0+2
  9404 08:2095: 85 0B        	sta	<R2+2
  9405 08:2097: A9 00 00     	lda	#$0
  9406 08:209A: 87 09        	sta	[<R2]
  9407                        ;	}
  9408                        	.line	2170
  9409                        ;
  9410                        ;	return 1; /* The part of LFN is valid */
  9411                        L10168:
  9412                        	.line	2172
  9413 08:209C: A9 01 00     	lda	#$1
  9414 08:209F: 82 F1 FE     	brl	L357
  9415                        ;}
  9416                        	.line	2173
  9417                        	.endblock	2173
  9418             00000014   L353	equ	20
  9419             0000000D   L354	equ	13
  9420 08:20A2:              	ends
  9421                        	efunc
  9422                        	.endfunc	2173,13,20
  9423                        	.line	2173
  9424                        ;#endif
  9425                        ;
  9426                        ;#if !FF_FS_READONLY
  9427                        ;/*-----------------------------------------*/
  9428                        ;/* FAT-LFN: Create an entry of LFN entries */
  9429                        ;/*-----------------------------------------*/
  9430                        ;
  9431                        ;static void put_lfn (
  9432                        ;		const WCHAR* lfn, /* Pointer to the LFN 
                    */
  9433                        ;		BYTE* dir, /* Pointer to the LFN entry t
                    o be created */
  9434                        ;		BYTE ord, /* LFN order (1-20) */
  9435                        ;		BYTE sum /* Checksum of the correspondin
                    g SFN */
  9436                        ;)
  9437                        ;{
  9438                        	.line	2181
  9439                        	.line	2187
  9440                        	FFDOS
  9441                        	func
  9442                        	.function	2187
  9443                        ~~put_lfn:
  9444                        	longa	on
  9445                        	longi	on
  9446 08:20A2: 3B           	tsc
  9447 08:20A3: 38           	sec
  9448 08:20A4: E9 12 00     	sbc	#L365
  9449 08:20A7: 1B           	tcs
  9450 08:20A8: 0B           	phd
  9451 08:20A9: 5B           	tcd
  Sat Jul 10 2021  1:15                                                Page 184


  9452             00000004   lfn_0	set	4
  9453             00000008   dir_0	set	8
  9454             0000000C   ord_0	set	12
  9455             0000000E   sum_0	set	14
  9456                        	.block	2187
  9457                        ;	UINT i, s;
  9458                        ;	WCHAR wc;
  9459                        ;
  9460                        ;	dir[LDIR_Chksum] = sum; /* Set checksum */
  9461             00000000   i_1	set	0
  9462             00000002   s_1	set	2
  9463             00000004   wc_1	set	4
  9464                        	.sym	i,0,16,1,16
  9465                        	.sym	s,2,16,1,16
  9466                        	.sym	wc,4,16,1,16
  9467                        	.sym	lfn,4,144,6,32
  9468                        	.sym	dir,8,142,6,32
  9469                        	.sym	ord,12,14,6,8
  9470                        	.sym	sum,14,14,6,8
  9471                        	.line	2191
  9472 08:20AA: E2 20        	sep	#$20
  9473                        	longa	off
  9474 08:20AC: A5 20        	lda	<L365+sum_0
  9475 08:20AE: A0 0D 00     	ldy	#$d
  9476 08:20B1: 97 1A        	sta	[<L365+dir_0],Y
  9477 08:20B3: C2 20        	rep	#$20
  9478                        	longa	on
  9479                        ;	dir[LDIR_Attr] = AM_LFN; /* Set attribute. LFN e
                    ntry */
  9480                        	.line	2192
  9481 08:20B5: E2 20        	sep	#$20
  9482                        	longa	off
  9483 08:20B7: A9 0F        	lda	#$f
  9484 08:20B9: A0 0B 00     	ldy	#$b
  9485 08:20BC: 97 1A        	sta	[<L365+dir_0],Y
  9486 08:20BE: C2 20        	rep	#$20
  9487                        	longa	on
  9488                        ;	dir[LDIR_Type] = 0;
  9489                        	.line	2193
  9490 08:20C0: E2 20        	sep	#$20
  9491                        	longa	off
  9492 08:20C2: A9 00        	lda	#$0
  9493 08:20C4: A0 0C 00     	ldy	#$c
  9494 08:20C7: 97 1A        	sta	[<L365+dir_0],Y
  9495 08:20C9: C2 20        	rep	#$20
  9496                        	longa	on
  9497                        ;	st_word(dir + LDIR_FstClusLO, 0);
  9498                        	.line	2194
  9499 08:20CB: F4 00 00     	pea	#<$0
  9500 08:20CE: 18           	clc
  9501 08:20CF: A9 1A 00     	lda	#$1a
  9502 08:20D2: 65 1A        	adc	<L365+dir_0
  9503 08:20D4: 85 01        	sta	<R0
  9504 08:20D6: A9 00 00     	lda	#$0
  9505 08:20D9: 65 1C        	adc	<L365+dir_0+2
  9506 08:20DB: 85 03        	sta	<R0+2
  9507 08:20DD: D4 03        	pei	<R0+2
  9508 08:20DF: D4 01        	pei	<R0
  Sat Jul 10 2021  1:15                                                Page 185


  9509 08:20E1: 22 D7 00 08  	jsl	~~st_word
  9510                        ;
  9511                        ;	i = (ord - 1) * 13; /* Get offset in the LFN wor
                    king buffer */
  9512                        	.line	2196
  9513 08:20E5: A5 1E        	lda	<L365+ord_0
  9514 08:20E7: 29 FF 00     	and	#$ff
  9515 08:20EA: 85 01        	sta	<R0
  9516 08:20EC: A5 01        	lda	<R0
  9517 08:20EE: A2 0D 00     	ldx	#<$d
  9518                        	xref	~~~mul
  9519 08:20F1: 22 xx xx xx  	jsl	~~~mul
  9520 08:20F5: 85 01        	sta	<R0
  9521 08:20F7: 18           	clc
  9522 08:20F8: A9 F3 FF     	lda	#$fff3
  9523 08:20FB: 65 01        	adc	<R0
  9524 08:20FD: 85 0D        	sta	<L366+i_1
  9525                        ;	s = wc = 0;
  9526                        	.line	2197
  9527 08:20FF: 64 11        	stz	<L366+wc_1
  9528 08:2101: 64 0F        	stz	<L366+s_1
  9529                        ;	do
  9530                        	.line	2198
  9531                        L10172:
  9532                        ;	{
  9533                        	.line	2199
  9534                        ;		if (wc != 0xFFFF) wc = lfn[i++]; /* Get 
                    an effective character */
  9535                        	.line	2200
  9536 08:2103: A5 11        	lda	<L366+wc_1
  9537 08:2105: C9 FF FF     	cmp	#<$ffff
  9538 08:2108: D0 03        	bne	L368
  9539 08:210A: 82 28 00     	brl	L10173
  9540                        L368:
  9541                        	.line	2200
  9542 08:210D: A5 0D        	lda	<L366+i_1
  9543 08:210F: 85 05        	sta	<R1
  9544 08:2111: 64 07        	stz	<R1+2
  9545 08:2113: D4 07        	pei	<R1+2
  9546 08:2115: D4 05        	pei	<R1
  9547 08:2117: A9 01 00     	lda	#$1
  9548                        	xref	~~~lasl
  9549 08:211A: 22 xx xx xx  	jsl	~~~lasl
  9550 08:211E: 85 01        	sta	<R0
  9551 08:2120: 86 03        	stx	<R0+2
  9552 08:2122: 18           	clc
  9553 08:2123: A5 16        	lda	<L365+lfn_0
  9554 08:2125: 65 01        	adc	<R0
  9555 08:2127: 85 09        	sta	<R2
  9556 08:2129: A5 18        	lda	<L365+lfn_0+2
  9557 08:212B: 65 03        	adc	<R0+2
  9558 08:212D: 85 0B        	sta	<R2+2
  9559 08:212F: A7 09        	lda	[<R2]
  9560 08:2131: 85 11        	sta	<L366+wc_1
  9561 08:2133: E6 0D        	inc	<L366+i_1
  9562                        ;		st_word(dir + LfnOfs[s], wc); /* Put it 
                    */
  9563                        L10173:
  Sat Jul 10 2021  1:15                                                Page 186


  9564                        	.line	2201
  9565 08:2135: D4 11        	pei	<L366+wc_1
  9566 08:2137: A6 0F        	ldx	<L366+s_1
  9567 08:2139: BD xx xx     	lda	|~~LfnOfs,X
  9568 08:213C: 29 FF 00     	and	#$ff
  9569 08:213F: 85 01        	sta	<R0
  9570 08:2141: 64 03        	stz	<R0+2
  9571 08:2143: 18           	clc
  9572 08:2144: A5 1A        	lda	<L365+dir_0
  9573 08:2146: 65 01        	adc	<R0
  9574 08:2148: 85 05        	sta	<R1
  9575 08:214A: A5 1C        	lda	<L365+dir_0+2
  9576 08:214C: 65 03        	adc	<R0+2
  9577 08:214E: 85 07        	sta	<R1+2
  9578 08:2150: D4 07        	pei	<R1+2
  9579 08:2152: D4 05        	pei	<R1
  9580 08:2154: 22 D7 00 08  	jsl	~~st_word
  9581                        ;		if (wc == 0) wc = 0xFFFF; /* Padding cha
                    racters for following items */
  9582                        	.line	2202
  9583 08:2158: A5 11        	lda	<L366+wc_1
  9584 08:215A: F0 03        	beq	L369
  9585 08:215C: 82 05 00     	brl	L10174
  9586                        L369:
  9587                        	.line	2202
  9588 08:215F: A9 FF FF     	lda	#$ffff
  9589 08:2162: 85 11        	sta	<L366+wc_1
  9590                        ;	}while (++s < 13);
  9591                        L10174:
  9592                        	.line	2203
  9593                        L10170:
  9594 08:2164: E6 0F        	inc	<L366+s_1
  9595 08:2166: A5 0F        	lda	<L366+s_1
  9596 08:2168: C9 0D 00     	cmp	#<$d
  9597 08:216B: B0 03        	bcs	L370
  9598 08:216D: 82 93 FF     	brl	L10172
  9599                        L370:
  9600                        L10171:
  9601                        ;	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF; /* Las
                    t LFN part is the start of LFN sequence */
  9602                        	.line	2204
  9603 08:2170: A5 11        	lda	<L366+wc_1
  9604 08:2172: C9 FF FF     	cmp	#<$ffff
  9605 08:2175: D0 03        	bne	L372
  9606 08:2177: 82 29 00     	brl	L371
  9607                        L372:
  9608 08:217A: A5 0D        	lda	<L366+i_1
  9609 08:217C: 85 05        	sta	<R1
  9610 08:217E: 64 07        	stz	<R1+2
  9611 08:2180: D4 07        	pei	<R1+2
  9612 08:2182: D4 05        	pei	<R1
  9613 08:2184: A9 01 00     	lda	#$1
  9614                        	xref	~~~lasl
  9615 08:2187: 22 xx xx xx  	jsl	~~~lasl
  9616 08:218B: 85 01        	sta	<R0
  9617 08:218D: 86 03        	stx	<R0+2
  9618 08:218F: 18           	clc
  9619 08:2190: A5 16        	lda	<L365+lfn_0
  Sat Jul 10 2021  1:15                                                Page 187


  9620 08:2192: 65 01        	adc	<R0
  9621 08:2194: 85 09        	sta	<R2
  9622 08:2196: A5 18        	lda	<L365+lfn_0+2
  9623 08:2198: 65 03        	adc	<R0+2
  9624 08:219A: 85 0B        	sta	<R2+2
  9625 08:219C: A7 09        	lda	[<R2]
  9626 08:219E: F0 03        	beq	L373
  9627 08:21A0: 82 08 00     	brl	L10175
  9628                        L373:
  9629                        L371:
  9630                        	.line	2204
  9631 08:21A3: E2 20        	sep	#$20
  9632                        	longa	off
  9633 08:21A5: A9 40        	lda	#$40
  9634 08:21A7: 04 1E        	tsb	<L365+ord_0
  9635 08:21A9: C2 20        	rep	#$20
  9636                        	longa	on
  9637                        ;	dir[LDIR_Ord] = ord; /* Set the LFN order */
  9638                        L10175:
  9639                        	.line	2205
  9640 08:21AB: E2 20        	sep	#$20
  9641                        	longa	off
  9642 08:21AD: A5 1E        	lda	<L365+ord_0
  9643 08:21AF: 87 1A        	sta	[<L365+dir_0]
  9644 08:21B1: C2 20        	rep	#$20
  9645                        	longa	on
  9646                        ;}
  9647                        	.line	2206
  9648                        L374:
  9649 08:21B3: A5 14        	lda	<L365+2
  9650 08:21B5: 85 20        	sta	<L365+2+12
  9651 08:21B7: A5 13        	lda	<L365+1
  9652 08:21B9: 85 1F        	sta	<L365+1+12
  9653 08:21BB: 2B           	pld
  9654 08:21BC: 3B           	tsc
  9655 08:21BD: 18           	clc
  9656 08:21BE: 69 1E 00     	adc	#L365+12
  9657 08:21C1: 1B           	tcs
  9658 08:21C2: 6B           	rtl
  9659                        	.endblock	2206
  9660             00000012   L365	equ	18
  9661             0000000D   L366	equ	13
  9662 08:21C3:              	ends
  9663                        	efunc
  9664                        	.endfunc	2206,13,18
  9665                        	.line	2206
  9666                        ;
  9667                        ;#endif	/* !FF_FS_READONLY */
  9668                        ;#endif	/* FF_USE_LFN */
  9669                        ;
  9670                        ;#if FF_USE_LFN && !FF_FS_READONLY
  9671                        ;/*-----------------------------------------------
                    ------------------------*/
  9672                        ;/* FAT-LFN: Create a Numbered SFN                
                                            */
  9673                        ;/*-----------------------------------------------
                    ------------------------*/
  9674                        ;
  Sat Jul 10 2021  1:15                                                Page 188


  9675                        ;static void gen_numname (
  9676                        ;		BYTE* dst, /* Pointer to the buffer to s
                    tore numbered SFN */
  9677                        ;		const BYTE* src, /* Pointer to SFN */
  9678                        ;		const WCHAR* lfn, /* Pointer to LFN */
  9679                        ;		UINT seq /* Sequence number */
  9680                        ;)
  9681                        ;{
  9682                        	.line	2216
  9683                        	.line	2222
  9684                        	FFDOS
  9685                        	func
  9686                        	.function	2222
  9687                        ~~gen_numname:
  9688                        	longa	on
  9689                        	longi	on
  9690 08:21C3: 3B           	tsc
  9691 08:21C4: 38           	sec
  9692 08:21C5: E9 1B 00     	sbc	#L375
  9693 08:21C8: 1B           	tcs
  9694 08:21C9: 0B           	phd
  9695 08:21CA: 5B           	tcd
  9696             00000004   dst_0	set	4
  9697             00000008   src_0	set	8
  9698             0000000C   lfn_0	set	12
  9699             00000010   seq_0	set	16
  9700                        	.block	2222
  9701                        ;	BYTE ns[8], c;
  9702                        ;	UINT i, j;
  9703                        ;	WCHAR wc;
  9704                        ;	DWORD sreg;
  9705                        ;
  9706                        ;	mem_cpy(dst, src, 11);
  9707             00000000   ns_1	set	0
  9708             00000008   c_1	set	8
  9709             00000009   i_1	set	9
  9710             0000000B   j_1	set	11
  9711             0000000D   wc_1	set	13
  9712             0000000F   sreg_1	set	15
  9713                        	.sym	ns,0,110,1,0,8
  9714                        	.sym	c,8,14,1,8
  9715                        	.sym	i,9,16,1,16
  9716                        	.sym	j,11,16,1,16
  9717                        	.sym	wc,13,16,1,16
  9718                        	.sym	sreg,15,18,1,32
  9719                        	.sym	dst,4,142,6,32
  9720                        	.sym	src,8,142,6,32
  9721                        	.sym	lfn,12,144,6,32
  9722                        	.sym	seq,16,16,6,16
  9723                        	.line	2228
  9724 08:21CB: F4 0B 00     	pea	#<$b
  9725 08:21CE: D4 25        	pei	<L375+src_0+2
  9726 08:21D0: D4 23        	pei	<L375+src_0
  9727 08:21D2: D4 21        	pei	<L375+dst_0+2
  9728 08:21D4: D4 1F        	pei	<L375+dst_0
  9729 08:21D6: 22 93 01 08  	jsl	~~mem_cpy
  9730                        ;
  9731                        ;	if (seq > 5)
  Sat Jul 10 2021  1:15                                                Page 189


  9732                        	.line	2230
  9733                        ;	{ /* In case of many collisions, generate a hash
                     number instead of sequential number */
  9734 08:21DA: A9 05 00     	lda	#$5
  9735 08:21DD: C5 2B        	cmp	<L375+seq_0
  9736 08:21DF: 90 03        	bcc	L378
  9737 08:21E1: 82 72 00     	brl	L10176
  9738                        L378:
  9739                        	.line	2231
  9740                        ;		sreg = seq;
  9741                        	.line	2232
  9742 08:21E4: A5 2B        	lda	<L375+seq_0
  9743 08:21E6: 85 18        	sta	<L376+sreg_1
  9744 08:21E8: 64 1A        	stz	<L376+sreg_1+2
  9745                        ;		while (*lfn)
  9746                        	.line	2233
  9747                        L10177:
  9748 08:21EA: A7 27        	lda	[<L375+lfn_0]
  9749 08:21EC: D0 03        	bne	L379
  9750 08:21EE: 82 61 00     	brl	L10178
  9751                        L379:
  9752                        ;		{ /* Create a CRC as hash value */
  9753                        	.line	2234
  9754                        ;			wc = *lfn++;
  9755                        	.line	2235
  9756 08:21F1: A7 27        	lda	[<L375+lfn_0]
  9757 08:21F3: 85 16        	sta	<L376+wc_1
  9758 08:21F5: 18           	clc
  9759 08:21F6: A9 02 00     	lda	#$2
  9760 08:21F9: 65 27        	adc	<L375+lfn_0
  9761 08:21FB: 85 27        	sta	<L375+lfn_0
  9762 08:21FD: 90 02        	bcc	L380
  9763 08:21FF: E6 29        	inc	<L375+lfn_0+2
  9764                        L380:
  9765                        ;			for (i = 0; i < 16; i++)
  9766                        	.line	2236
  9767 08:2201: 64 12        	stz	<L376+i_1
  9768                        L10181:
  9769                        ;			{
  9770                        	.line	2237
  9771                        ;				sreg = (sreg << 1) + (wc
                     & 1);
  9772                        	.line	2238
  9773 08:2203: A5 16        	lda	<L376+wc_1
  9774 08:2205: 29 01 00     	and	#<$1
  9775 08:2208: 85 01        	sta	<R0
  9776 08:220A: A5 01        	lda	<R0
  9777 08:220C: 85 01        	sta	<R0
  9778 08:220E: 64 03        	stz	<R0+2
  9779 08:2210: A5 18        	lda	<L376+sreg_1
  9780 08:2212: 85 05        	sta	<R1
  9781 08:2214: A5 1A        	lda	<L376+sreg_1+2
  9782 08:2216: 85 07        	sta	<R1+2
  9783 08:2218: 06 05        	asl	<R1
  9784 08:221A: 26 07        	rol	<R1+2
  9785 08:221C: 18           	clc
  9786 08:221D: A5 05        	lda	<R1
  9787 08:221F: 65 01        	adc	<R0
  Sat Jul 10 2021  1:15                                                Page 190


  9788 08:2221: 85 18        	sta	<L376+sreg_1
  9789 08:2223: A5 07        	lda	<R1+2
  9790 08:2225: 65 03        	adc	<R0+2
  9791 08:2227: 85 1A        	sta	<L376+sreg_1+2
  9792                        ;				wc >>= 1;
  9793                        	.line	2239
  9794 08:2229: 46 16        	lsr	<L376+wc_1
  9795                        ;				if (sreg & 0x10000) sreg
                     ^= 0x11021;
  9796                        	.line	2240
  9797 08:222B: A5 1A        	lda	<L376+sreg_1+2
  9798 08:222D: 29 01 00     	and	#^$10000
  9799 08:2230: D0 03        	bne	L381
  9800 08:2232: 82 0E 00     	brl	L10182
  9801                        L381:
  9802                        	.line	2240
  9803 08:2235: A5 18        	lda	<L376+sreg_1
  9804 08:2237: 49 21 10     	eor	#<$11021
  9805 08:223A: 85 18        	sta	<L376+sreg_1
  9806 08:223C: A5 1A        	lda	<L376+sreg_1+2
  9807 08:223E: 49 01 00     	eor	#^$11021
  9808 08:2241: 85 1A        	sta	<L376+sreg_1+2
  9809                        ;			}
  9810                        L10182:
  9811                        	.line	2241
  9812                        L10179:
  9813 08:2243: E6 12        	inc	<L376+i_1
  9814 08:2245: A5 12        	lda	<L376+i_1
  9815 08:2247: C9 10 00     	cmp	#<$10
  9816 08:224A: B0 03        	bcs	L382
  9817 08:224C: 82 B4 FF     	brl	L10181
  9818                        L382:
  9819                        L10180:
  9820                        ;		}
  9821                        	.line	2242
  9822 08:224F: 82 98 FF     	brl	L10177
  9823                        L10178:
  9824                        ;		seq = (UINT)sreg;
  9825                        	.line	2243
  9826 08:2252: A5 18        	lda	<L376+sreg_1
  9827 08:2254: 85 2B        	sta	<L375+seq_0
  9828                        ;	}
  9829                        	.line	2244
  9830                        ;
  9831                        ;	/* itoa (hexdecimal) */
  9832                        ;	i = 7;
  9833                        L10176:
  9834                        	.line	2247
  9835 08:2256: A9 07 00     	lda	#$7
  9836 08:2259: 85 12        	sta	<L376+i_1
  9837                        ;	do
  9838                        	.line	2248
  9839                        L10185:
  9840                        ;	{
  9841                        	.line	2249
  9842                        ;		c = (BYTE)((seq % 16) + '0');
  9843                        	.line	2250
  9844 08:225B: A5 2B        	lda	<L375+seq_0
  Sat Jul 10 2021  1:15                                                Page 191


  9845 08:225D: 29 0F 00     	and	#<$f
  9846 08:2260: 85 01        	sta	<R0
  9847 08:2262: 18           	clc
  9848 08:2263: A9 30 00     	lda	#$30
  9849 08:2266: 65 01        	adc	<R0
  9850 08:2268: 85 05        	sta	<R1
  9851 08:226A: E2 20        	sep	#$20
  9852                        	longa	off
  9853 08:226C: A5 05        	lda	<R1
  9854 08:226E: 85 11        	sta	<L376+c_1
  9855 08:2270: C2 20        	rep	#$20
  9856                        	longa	on
  9857                        ;		if (c > '9') c += 7;
  9858                        	.line	2251
  9859 08:2272: E2 20        	sep	#$20
  9860                        	longa	off
  9861 08:2274: A9 39        	lda	#$39
  9862 08:2276: C5 11        	cmp	<L376+c_1
  9863 08:2278: C2 20        	rep	#$20
  9864                        	longa	on
  9865 08:227A: 90 03        	bcc	L383
  9866 08:227C: 82 0B 00     	brl	L10186
  9867                        L383:
  9868                        	.line	2251
  9869 08:227F: E2 20        	sep	#$20
  9870                        	longa	off
  9871 08:2281: 18           	clc
  9872 08:2282: A9 07        	lda	#$7
  9873 08:2284: 65 11        	adc	<L376+c_1
  9874 08:2286: 85 11        	sta	<L376+c_1
  9875 08:2288: C2 20        	rep	#$20
  9876                        	longa	on
  9877                        ;		ns[i--] = c;
  9878                        L10186:
  9879                        	.line	2252
  9880 08:228A: E2 20        	sep	#$20
  9881                        	longa	off
  9882 08:228C: A5 11        	lda	<L376+c_1
  9883 08:228E: A6 12        	ldx	<L376+i_1
  9884 08:2290: 95 09        	sta	<L376+ns_1,X
  9885 08:2292: C2 20        	rep	#$20
  9886                        	longa	on
  9887 08:2294: C6 12        	dec	<L376+i_1
  9888                        ;		seq /= 16;
  9889                        	.line	2253
  9890 08:2296: A5 2B        	lda	<L375+seq_0
  9891 08:2298: 4A           	lsr	A
  9892 08:2299: 4A           	lsr	A
  9893 08:229A: 4A           	lsr	A
  9894 08:229B: 4A           	lsr	A
  9895 08:229C: 85 2B        	sta	<L375+seq_0
  9896                        ;	}while (seq);
  9897                        	.line	2254
  9898                        L10183:
  9899 08:229E: A5 2B        	lda	<L375+seq_0
  9900 08:22A0: F0 03        	beq	L384
  9901 08:22A2: 82 B6 FF     	brl	L10185
  9902                        L384:
  Sat Jul 10 2021  1:15                                                Page 192


  9903                        L10184:
  9904                        ;	ns[i] = '~';
  9905                        	.line	2255
  9906 08:22A5: E2 20        	sep	#$20
  9907                        	longa	off
  9908 08:22A7: A9 7E        	lda	#$7e
  9909 08:22A9: A6 12        	ldx	<L376+i_1
  9910 08:22AB: 95 09        	sta	<L376+ns_1,X
  9911 08:22AD: C2 20        	rep	#$20
  9912                        	longa	on
  9913                        ;
  9914                        ;	/* Append the number to the SFN body */
  9915                        ;	for (j = 0; j < i && dst[j] != ' '; j++)
  9916                        	.line	2258
  9917 08:22AF: 64 14        	stz	<L376+j_1
  9918 08:22B1: 82 24 00     	brl	L10190
  9919                        L10189:
  9920                        ;	{
  9921                        	.line	2259
  9922                        ;		if (dbc_1st(dst[j]))
  9923                        	.line	2260
  9924                        ;		{
  9925 08:22B4: A4 14        	ldy	<L376+j_1
  9926 08:22B6: B7 1F        	lda	[<L375+dst_0],Y
  9927 08:22B8: 48           	pha
  9928 08:22B9: 22 B7 02 08  	jsl	~~dbc_1st
  9929 08:22BD: AA           	tax
  9930 08:22BE: D0 03        	bne	L385
  9931 08:22C0: 82 13 00     	brl	L10191
  9932                        L385:
  9933                        	.line	2261
  9934                        ;			if (j == i - 1) break;
  9935                        	.line	2262
  9936 08:22C3: 18           	clc
  9937 08:22C4: A9 FF FF     	lda	#$ffff
  9938 08:22C7: 65 12        	adc	<L376+i_1
  9939 08:22C9: 85 01        	sta	<R0
  9940 08:22CB: A5 01        	lda	<R0
  9941 08:22CD: C5 14        	cmp	<L376+j_1
  9942 08:22CF: D0 03        	bne	L386
  9943 08:22D1: 82 1C 00     	brl	L10188
  9944                        L386:
  9945                        ;			j++;
  9946                        	.line	2263
  9947 08:22D4: E6 14        	inc	<L376+j_1
  9948                        ;		}
  9949                        	.line	2264
  9950                        ;	}
  9951                        L10191:
  9952                        	.line	2265
  9953                        L10187:
  9954 08:22D6: E6 14        	inc	<L376+j_1
  9955                        L10190:
  9956 08:22D8: A5 14        	lda	<L376+j_1
  9957 08:22DA: C5 12        	cmp	<L376+i_1
  9958 08:22DC: 90 03        	bcc	L388
  9959 08:22DE: 82 0F 00     	brl	L387
  9960                        L388:
  Sat Jul 10 2021  1:15                                                Page 193


  9961 08:22E1: E2 20        	sep	#$20
  9962                        	longa	off
  9963 08:22E3: A4 14        	ldy	<L376+j_1
  9964 08:22E5: B7 1F        	lda	[<L375+dst_0],Y
  9965 08:22E7: C9 20        	cmp	#<$20
  9966 08:22E9: C2 20        	rep	#$20
  9967                        	longa	on
  9968 08:22EB: F0 03        	beq	L389
  9969 08:22ED: 82 C4 FF     	brl	L10189
  9970                        L389:
  9971                        L387:
  9972                        L10188:
  9973                        ;	do
  9974                        	.line	2266
  9975                        L10194:
  9976                        ;	{
  9977                        	.line	2267
  9978                        ;		dst[j++] = (i < 8) ? ns[i++] : ' ';
  9979                        	.line	2268
  9980 08:22F0: A5 14        	lda	<L376+j_1
  9981 08:22F2: 85 01        	sta	<R0
  9982 08:22F4: E6 14        	inc	<L376+j_1
  9983 08:22F6: A5 12        	lda	<L376+i_1
  9984 08:22F8: C9 08 00     	cmp	#<$8
  9985 08:22FB: 90 03        	bcc	L391
  9986 08:22FD: 82 0F 00     	brl	L390
  9987                        L391:
  9988 08:2300: A5 12        	lda	<L376+i_1
  9989 08:2302: 85 05        	sta	<R1
  9990 08:2304: E6 12        	inc	<L376+i_1
  9991 08:2306: A6 05        	ldx	<R1
  9992 08:2308: B5 09        	lda	<L376+ns_1,X
  9993 08:230A: 29 FF 00     	and	#$ff
  9994 08:230D: 80 03        	bra	L392
  9995                        L390:
  9996 08:230F: A9 20 00     	lda	#$20
  9997                        L392:
  9998 08:2312: E2 20        	sep	#$20
  9999                        	longa	off
 10000 08:2314: A4 01        	ldy	<R0
 10001 08:2316: 97 1F        	sta	[<L375+dst_0],Y
 10002 08:2318: C2 20        	rep	#$20
 10003                        	longa	on
 10004                        ;	}while (j < 8);
 10005                        	.line	2269
 10006                        L10192:
 10007 08:231A: A5 14        	lda	<L376+j_1
 10008 08:231C: C9 08 00     	cmp	#<$8
 10009 08:231F: B0 03        	bcs	L393
 10010 08:2321: 82 CC FF     	brl	L10194
 10011                        L393:
 10012                        L10193:
 10013                        ;}
 10014                        	.line	2270
 10015                        L394:
 10016 08:2324: A5 1D        	lda	<L375+2
 10017 08:2326: 85 2B        	sta	<L375+2+14
 10018 08:2328: A5 1C        	lda	<L375+1
  Sat Jul 10 2021  1:15                                                Page 194


 10019 08:232A: 85 2A        	sta	<L375+1+14
 10020 08:232C: 2B           	pld
 10021 08:232D: 3B           	tsc
 10022 08:232E: 18           	clc
 10023 08:232F: 69 29 00     	adc	#L375+14
 10024 08:2332: 1B           	tcs
 10025 08:2333: 6B           	rtl
 10026                        	.endblock	2270
 10027             0000001B   L375	equ	27
 10028             00000009   L376	equ	9
 10029 08:2334:              	ends
 10030                        	efunc
 10031                        	.endfunc	2270,9,27
 10032                        	.line	2270
 10033                        ;#endif	/* FF_USE_LFN && !FF_FS_READONLY */
 10034                        ;
 10035                        ;#if FF_USE_LFN
 10036                        ;/*-----------------------------------------------
                    ------------------------*/
 10037                        ;/* FAT-LFN: Calculate checksum of an SFN entry   
                                            */
 10038                        ;/*-----------------------------------------------
                    ------------------------*/
 10039                        ;
 10040                        ;static BYTE sum_sfn (
 10041                        ;		const BYTE* dir /* Pointer to the SFN en
                    try */
 10042                        ;)
 10043                        ;{
 10044                        	.line	2278
 10045                        	.line	2281
 10046                        	FFDOS
 10047                        	func
 10048                        	.function	2281
 10049                        ~~sum_sfn:
 10050                        	longa	on
 10051                        	longi	on
 10052 08:2334: 3B           	tsc
 10053 08:2335: 38           	sec
 10054 08:2336: E9 0F 00     	sbc	#L395
 10055 08:2339: 1B           	tcs
 10056 08:233A: 0B           	phd
 10057 08:233B: 5B           	tcd
 10058             00000004   dir_0	set	4
 10059                        	.block	2281
 10060                        ;	BYTE sum = 0;
 10061                        ;	UINT n = 11;
 10062                        ;
 10063                        ;	do
 10064             00000000   sum_1	set	0
 10065             00000001   n_1	set	1
 10066                        	.sym	sum,0,14,1,8
 10067                        	.sym	n,1,16,1,16
 10068                        	.sym	dir,4,142,6,32
 10069 08:233C: E2 20        	sep	#$20
 10070                        	longa	off
 10071 08:233E: 64 0D        	stz	<L396+sum_1
 10072 08:2340: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 195


 10073                        	longa	on
 10074 08:2342: A9 0B 00     	lda	#$b
 10075 08:2345: 85 0E        	sta	<L396+n_1
 10076                        	.line	2285
 10077                        L10197:
 10078                        ;	{
 10079                        	.line	2286
 10080                        ;		sum = (sum >> 1) + (sum << 7) + *dir++;
 10081                        	.line	2287
 10082 08:2347: A5 0D        	lda	<L396+sum_1
 10083 08:2349: A2 07 00     	ldx	#<$7
 10084                        	xref	~~~casl
 10085 08:234C: 22 xx xx xx  	jsl	~~~casl
 10086 08:2350: E2 20        	sep	#$20
 10087                        	longa	off
 10088 08:2352: 85 01        	sta	<R0
 10089 08:2354: C2 20        	rep	#$20
 10090                        	longa	on
 10091 08:2356: E2 20        	sep	#$20
 10092                        	longa	off
 10093 08:2358: A5 0D        	lda	<L396+sum_1
 10094 08:235A: 4A           	lsr	A
 10095 08:235B: 85 05        	sta	<R1
 10096 08:235D: C2 20        	rep	#$20
 10097                        	longa	on
 10098 08:235F: E2 20        	sep	#$20
 10099                        	longa	off
 10100 08:2361: 18           	clc
 10101 08:2362: A5 05        	lda	<R1
 10102 08:2364: 65 01        	adc	<R0
 10103 08:2366: 85 09        	sta	<R2
 10104 08:2368: C2 20        	rep	#$20
 10105                        	longa	on
 10106 08:236A: E2 20        	sep	#$20
 10107                        	longa	off
 10108 08:236C: 18           	clc
 10109 08:236D: A5 09        	lda	<R2
 10110 08:236F: 67 13        	adc	[<L395+dir_0]
 10111 08:2371: 85 0D        	sta	<L396+sum_1
 10112 08:2373: C2 20        	rep	#$20
 10113                        	longa	on
 10114 08:2375: E6 13        	inc	<L395+dir_0
 10115 08:2377: D0 02        	bne	L398
 10116 08:2379: E6 15        	inc	<L395+dir_0+2
 10117                        L398:
 10118                        ;	}while (--n);
 10119                        	.line	2288
 10120                        L10195:
 10121 08:237B: C6 0E        	dec	<L396+n_1
 10122 08:237D: A5 0E        	lda	<L396+n_1
 10123 08:237F: F0 03        	beq	L399
 10124 08:2381: 82 C3 FF     	brl	L10197
 10125                        L399:
 10126                        L10196:
 10127                        ;	return sum;
 10128                        	.line	2289
 10129 08:2384: A5 0D        	lda	<L396+sum_1
 10130 08:2386: 29 FF 00     	and	#$ff
  Sat Jul 10 2021  1:15                                                Page 196


 10131                        L400:
 10132 08:2389: A8           	tay
 10133 08:238A: A5 11        	lda	<L395+2
 10134 08:238C: 85 15        	sta	<L395+2+4
 10135 08:238E: A5 10        	lda	<L395+1
 10136 08:2390: 85 14        	sta	<L395+1+4
 10137 08:2392: 2B           	pld
 10138 08:2393: 3B           	tsc
 10139 08:2394: 18           	clc
 10140 08:2395: 69 13 00     	adc	#L395+4
 10141 08:2398: 1B           	tcs
 10142 08:2399: 98           	tya
 10143 08:239A: 6B           	rtl
 10144                        ;}
 10145                        	.line	2290
 10146                        	.endblock	2290
 10147             0000000F   L395	equ	15
 10148             0000000D   L396	equ	13
 10149 08:239B:              	ends
 10150                        	efunc
 10151                        	.endfunc	2290,13,15
 10152                        	.line	2290
 10153                        ;
 10154                        ;#endif	/* FF_USE_LFN */
 10155                        ;
 10156                        ;#if FF_FS_EXFAT
 10157                        ;/*-----------------------------------------------
                    ------------------------*/
 10158                        ;/* exFAT: Checksum                               
                                            */
 10159                        ;/*-----------------------------------------------
                    ------------------------*/
 10160                        ;
 10161                        ;static WORD xdir_sum ( /* Get checksum of the dir
                    ectoly entry block */
 10162                        ;		const BYTE* dir /* Directory entry block
                     to be calculated */
 10163                        ;)
 10164                        ;{
 10165                        ;	UINT i, szblk;
 10166                        ;	WORD sum;
 10167                        ;
 10168                        ;	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE; /* Numb
                    er of bytes of the entry block */
 10169                        ;	for (i = sum = 0; i < szblk; i++)
 10170                        ;	{
 10171                        ;		if (i == XDIR_SetSum)
 10172                        ;		{ /* Skip 2-byte sum field */
 10173                        ;			i++;
 10174                        ;		}
 10175                        ;		else
 10176                        ;		{
 10177                        ;			sum = ((sum & 1) ? 0x8000 : 0) +
                     (sum >> 1) + dir[i];
 10178                        ;		}
 10179                        ;	}
 10180                        ;	return sum;
 10181                        ;}
  Sat Jul 10 2021  1:15                                                Page 197


 10182                        ;
 10183                        ;static WORD xname_sum ( /* Get check sum (to be u
                    sed as hash) of the file name */
 10184                        ;		const WCHAR* name /* File name to be cal
                    culated */
 10185                        ;)
 10186                        ;{
 10187                        ;	WCHAR chr;
 10188                        ;	WORD sum = 0;
 10189                        ;
 10190                        ;	while ((chr = *name++) != 0)
 10191                        ;	{
 10192                        ;		chr = (WCHAR)ff_wtoupper(chr); /* File n
                    ame needs to be up-case converted */
 10193                        ;		sum = ((sum & 1) ? 0x8000 : 0) + (sum >>
                     1) + (chr & 0xFF);
 10194                        ;		sum = ((sum & 1) ? 0x8000 : 0) + (sum >>
                     1) + (chr >> 8);
 10195                        ;	}
 10196                        ;	return sum;
 10197                        ;}
 10198                        ;
 10199                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 10200                        ;static DWORD xsum32 ( /* Returns 32-bit checksum 
                    */
 10201                        ;		BYTE dat, /* Byte to be calculated (byte
                    -by-byte processing) */
 10202                        ;		DWORD sum /* Previous sum value */
 10203                        ;)
 10204                        ;{
 10205                        ;	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) 
                    + dat;
 10206                        ;	return sum;
 10207                        ;}
 10208                        ;#endif
 10209                        ;
 10210                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
 10211                        ;/*-----------------------------------------------
                    -------*/
 10212                        ;/* exFAT: Get object information from a directory
                     block */
 10213                        ;/*-----------------------------------------------
                    -------*/
 10214                        ;
 10215                        ;static void get_xfileinfo (
 10216                        ;		BYTE* dirb, /* Pointer to the direcotry 
                    entry block 85+C0+C1s */
 10217                        ;		FILINFO* fno /* Buffer to store the extr
                    acted file information */
 10218                        ;)
 10219                        ;{
 10220                        ;	WCHAR wc, hs;
 10221                        ;	UINT di, si, nc;
 10222                        ;
 10223                        ;	/* Get file name from the entry block */
 10224                        ;	si = SZDIRE * 2; /* 1st C1 entry */
 10225                        ;	nc = 0; hs = 0; di = 0;
 10226                        ;	while (nc < dirb[XDIR_NumName])
  Sat Jul 10 2021  1:15                                                Page 198


 10227                        ;	{
 10228                        ;		if (si >= MAXDIRB(FF_MAX_LFN))
 10229                        ;		{	di = 0; break;} /* Truncated dir
                    ectory block? */
 10230                        ;		if ((si % SZDIRE) == 0) si += 2; /* Skip
                     entry type field */
 10231                        ;		wc = ld_word(dirb + si); si += 2; nc++; 
                    /* Get a character */
 10232                        ;		if (hs == 0 && IsSurrogate(wc))
 10233                        ;		{ /* Is it a surrogate? */
 10234                        ;			hs = wc; continue; /* Get low su
                    rrogate */
 10235                        ;		}
 10236                        ;		wc = put_utf((DWORD)hs << 16 | wc, &fno-
                    >fname[di], FF_LFN_BUF - di); /* Store it in API encoding */
 10237                        ;		if (wc == 0)
 10238                        ;		{	di = 0; break;} /* Buffer overfl
                    ow or wrong encoding? */
 10239                        ;		di += wc;
 10240                        ;		hs = 0;
 10241                        ;	}
 10242                        ;	if (hs != 0) di = 0; /* Broken surrogate pair? *
                    /
 10243                        ;	if (di == 0) fno->fname[di++] = '?'; /* Inaccess
                    ible object name? */
 10244                        ;	fno->fname[di] = 0; /* Terminate the name */
 10245                        ;	fno->altname[0] = 0; /* exFAT does not support S
                    FN */
 10246                        ;
 10247                        ;	fno->fattrib = dirb[XDIR_Attr]; /* Attribute */
 10248                        ;	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qw
                    ord(dirb + XDIR_FileSize); /* Size */
 10249                        ;	fno->ftime = ld_word(dirb + XDIR_ModTime + 0); /
                    * Time */
 10250                        ;	fno->fdate = ld_word(dirb + XDIR_ModTime + 2); /
                    * Date */
 10251                        ;}
 10252                        ;
 10253                        ;#endif	/* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >=
                     2 */
 10254                        ;
 10255                        ;/*-----------------------------------*/
 10256                        ;/* exFAT: Get a directry entry block */
 10257                        ;/*-----------------------------------*/
 10258                        ;
 10259                        ;static FRESULT load_xdir ( /* FR_INT_ERR: invalid
                     entry block */
 10260                        ;		DIR* dp /* Reading direcotry object poin
                    ting top of the entry block to load */
 10261                        ;)
 10262                        ;{
 10263                        ;	FRESULT res;
 10264                        ;	UINT i, sz_ent;
 10265                        ;	BYTE* dirb = dp->obj.fs->dirbuf; /* Pointer to t
                    he on-memory direcotry entry block 85+C0+C1s */
 10266                        ;
 10267                        ;	/* Load file-directory entry */
 10268                        ;	res = move_window(dp->obj.fs, dp->sect);
  Sat Jul 10 2021  1:15                                                Page 199


 10269                        ;	if (res != FR_OK) return res;
 10270                        ;	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_
                    INT_ERR; /* Invalid order */
 10271                        ;	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 10272                        ;	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 10273                        ;	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE)
                     return FR_INT_ERR;
 10274                        ;
 10275                        ;	/* Load stream-extension entry */
 10276                        ;	res = dir_next(dp, 0);
 10277                        ;	if (res == FR_NO_FILE) res = FR_INT_ERR; /* It c
                    annot be */
 10278                        ;	if (res != FR_OK) return res;
 10279                        ;	res = move_window(dp->obj.fs, dp->sect);
 10280                        ;	if (res != FR_OK) return res;
 10281                        ;	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_I
                    NT_ERR; /* Invalid order */
 10282                        ;	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 10283                        ;	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return
                     FR_INT_ERR;
 10284                        ;
 10285                        ;	/* Load file-name entries */
 10286                        ;	i = 2 * SZDIRE; /* Name offset to load */
 10287                        ;	do
 10288                        ;	{
 10289                        ;		res = dir_next(dp, 0);
 10290                        ;		if (res == FR_NO_FILE) res = FR_INT_ERR;
                     /* It cannot be */
 10291                        ;		if (res != FR_OK) return res;
 10292                        ;		res = move_window(dp->obj.fs, dp->sect);
 10293                        ;		if (res != FR_OK) return res;
 10294                        ;		if (dp->dir[XDIR_Type] != ET_FILENAME) r
                    eturn FR_INT_ERR; /* Invalid order */
 10295                        ;		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dir
                    b + i, dp->dir, SZDIRE);
 10296                        ;	}while ((i += SZDIRE) < sz_ent);
 10297                        ;
 10298                        ;	/* Sanity check (do it for only accessible objec
                    t) */
 10299                        ;	if (i <= MAXDIRB(FF_MAX_LFN))
 10300                        ;	{
 10301                        ;		if (xdir_sum(dirb) != ld_word(dirb + XDI
                    R_SetSum)) return FR_INT_ERR;
 10302                        ;	}
 10303                        ;	return FR_OK;
 10304                        ;}
 10305                        ;
 10306                        ;/*-----------------------------------------------
                    -------------------*/
 10307                        ;/* exFAT: Initialize object allocation info with 
                    loaded entry block */
 10308                        ;/*-----------------------------------------------
                    -------------------*/
 10309                        ;
 10310                        ;static void init_alloc_info (
 10311                        ;		FATFS* fs, /* Filesystem object */
 10312                        ;		FFOBJID* obj /* Object allocation inform
                    ation to be initialized */
  Sat Jul 10 2021  1:15                                                Page 200


 10313                        ;)
 10314                        ;{
 10315                        ;	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus
                    ); /* Start cluster */
 10316                        ;	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSi
                    ze); /* Size */
 10317                        ;	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2; /* Al
                    location status */
 10318                        ;	obj->n_frag = 0; /* No last fragment info */
 10319                        ;}
 10320                        ;
 10321                        ;#if !FF_FS_READONLY || FF_FS_RPATH != 0
 10322                        ;/*-----------------------------------------------
                    -*/
 10323                        ;/* exFAT: Load the object's directory entry block
                     */
 10324                        ;/*-----------------------------------------------
                    -*/
 10325                        ;
 10326                        ;static FRESULT load_obj_xdir (
 10327                        ;		DIR* dp, /* Blank directory object to be
                     used to access containing direcotry */
 10328                        ;		const FFOBJID* obj /* Object with its co
                    ntaining directory information */
 10329                        ;)
 10330                        ;{
 10331                        ;	FRESULT res;
 10332                        ;
 10333                        ;	/* Open object containing directory */
 10334                        ;	dp->obj.fs = obj->fs;
 10335                        ;	dp->obj.sclust = obj->c_scl;
 10336                        ;	dp->obj.stat = (BYTE)obj->c_size;
 10337                        ;	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 10338                        ;	dp->obj.n_frag = 0;
 10339                        ;	dp->blk_ofs = obj->c_ofs;
 10340                        ;
 10341                        ;	res = dir_sdi(dp, dp->blk_ofs); /* Goto object's
                     entry block */
 10342                        ;	if (res == FR_OK)
 10343                        ;	{
 10344                        ;		res = load_xdir(dp); /* Load the object'
                    s entry block */
 10345                        ;	}
 10346                        ;	return res;
 10347                        ;}
 10348                        ;#endif
 10349                        ;
 10350                        ;#if !FF_FS_READONLY
 10351                        ;/*----------------------------------------*/
 10352                        ;/* exFAT: Store the directory entry block */
 10353                        ;/*----------------------------------------*/
 10354                        ;
 10355                        ;static FRESULT store_xdir (
 10356                        ;		DIR* dp /* Pointer to the direcotry obje
                    ct */
 10357                        ;)
 10358                        ;{
 10359                        ;	FRESULT res;
  Sat Jul 10 2021  1:15                                                Page 201


 10360                        ;	UINT nent;
 10361                        ;	BYTE* dirb = dp->obj.fs->dirbuf; /* Pointer to t
                    he direcotry entry block 85+C0+C1s */
 10362                        ;
 10363                        ;	/* Create set sum */
 10364                        ;	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 10365                        ;	nent = dirb[XDIR_NumSec] + 1;
 10366                        ;
 10367                        ;	/* Store the direcotry entry block to the direct
                    ory */
 10368                        ;	res = dir_sdi(dp, dp->blk_ofs);
 10369                        ;	while (res == FR_OK)
 10370                        ;	{
 10371                        ;		res = move_window(dp->obj.fs, dp->sect);
 10372                        ;		if (res != FR_OK) break;
 10373                        ;		mem_cpy(dp->dir, dirb, SZDIRE);
 10374                        ;		dp->obj.fs->wflag = 1;
 10375                        ;		if (--nent == 0) break;
 10376                        ;		dirb += SZDIRE;
 10377                        ;		res = dir_next(dp, 0);
 10378                        ;	}
 10379                        ;	return (res == FR_OK || res == FR_DISK_ERR) ? re
                    s : FR_INT_ERR;
 10380                        ;}
 10381                        ;
 10382                        ;/*-------------------------------------------*/
 10383                        ;/* exFAT: Create a new directory enrty block */
 10384                        ;/*-------------------------------------------*/
 10385                        ;
 10386                        ;static void create_xdir (
 10387                        ;		BYTE* dirb, /* Pointer to the direcotry 
                    entry block buffer */
 10388                        ;		const WCHAR* lfn /* Pointer to the objec
                    t name */
 10389                        ;)
 10390                        ;{
 10391                        ;	UINT i;
 10392                        ;	BYTE nc1, nlen;
 10393                        ;	WCHAR wc;
 10394                        ;
 10395                        ;	/* Create file-directory and stream-extension en
                    try */
 10396                        ;	mem_set(dirb, 0, 2 * SZDIRE);
 10397                        ;	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 10398                        ;	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 10399                        ;
 10400                        ;	/* Create file-name entries */
 10401                        ;	i = SZDIRE * 2; /* Top of file_name entries */
 10402                        ;	nlen = nc1 = 0; wc = 1;
 10403                        ;	do
 10404                        ;	{
 10405                        ;		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 10406                        ;		do
 10407                        ;		{ /* Fill name field */
 10408                        ;			if (wc != 0 && (wc = lfn[nlen]) 
                    != 0) nlen++; /* Get a character if exist */
 10409                        ;			st_word(dirb + i, wc); /* Store 
                    it */
  Sat Jul 10 2021  1:15                                                Page 202


 10410                        ;			i += 2;
 10411                        ;		}while (i % SZDIRE != 0);
 10412                        ;		nc1++;
 10413                        ;	}while (lfn[nlen]); /* Fill next entry if any ch
                    ar follows */
 10414                        ;
 10415                        ;	dirb[XDIR_NumName] = nlen; /* Set name length */
 10416                        ;	dirb[XDIR_NumSec] = 1 + nc1; /* Set secondary co
                    unt (C0 + C1s) */
 10417                        ;	st_word(dirb + XDIR_NameHash, xname_sum(lfn)); /
                    * Set name hash */
 10418                        ;}
 10419                        ;
 10420                        ;#endif	/* !FF_FS_READONLY */
 10421                        ;#endif	/* FF_FS_EXFAT */
 10422                        ;
 10423                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF
                    _USE_LABEL || FF_FS_EXFAT
 10424                        ;/*-----------------------------------------------
                    ------------------------*/
 10425                        ;/* Read an object from the directory             
                                            */
 10426                        ;/*-----------------------------------------------
                    ------------------------*/
 10427                        ;
 10428                        ;#define DIR_READ_FILE(dp) dir_read(dp, 0)
 10429                        ;#define DIR_READ_LABEL(dp) dir_read(dp, 1)
 10430                        ;
 10431                        ;static FRESULT dir_read(DIR* dp, /* Pointer to th
                    e directory object */
 10432                        ;int vol /* Filtered by 0:file/directory or 1:volu
                    me label */
 10433                        ;)
 10434                        ;{
 10435                        	.line	2569
 10436                        	.line	2572
 10437                        	FFDOS
 10438                        	func
 10439                        	.function	2572
 10440                        ~~dir_read:
 10441                        	longa	on
 10442                        	longi	on
 10443 08:239B: 3B           	tsc
 10444 08:239C: 38           	sec
 10445 08:239D: E9 12 00     	sbc	#L401
 10446 08:23A0: 1B           	tcs
 10447 08:23A1: 0B           	phd
 10448 08:23A2: 5B           	tcd
 10449             00000004   dp_0	set	4
 10450             00000008   vol_0	set	8
 10451                        	.block	2572
 10452                        ;	FRESULT res = FR_NO_FILE;
 10453                        ;	FATFS *fs = dp->obj.fs;
 10454                        ;	BYTE attr, b;
 10455                        ;#if FF_USE_LFN
 10456                        ;	BYTE ord = 0xFF, sum = 0xFF;
 10457                        ;#endif
 10458                        ;
  Sat Jul 10 2021  1:15                                                Page 203


 10459                        ;	while (dp->sect)
 10460             00000000   res_1	set	0
 10461             00000002   fs_1	set	2
 10462             00000006   attr_1	set	6
 10463             00000007   b_1	set	7
 10464             00000008   ord_1	set	8
 10465             00000009   sum_1	set	9
 10466                        	.sym	res,0,5,1,16
 10467                        	.sym	fs,2,138,1,32,72
 10468                        	.sym	attr,6,14,1,8
 10469                        	.sym	b,7,14,1,8
 10470                        	.sym	ord,8,14,1,8
 10471                        	.sym	sum,9,14,1,8
 10472                        	.sym	dp,4,138,6,32,75
 10473                        	.sym	vol,8,5,6,16
 10474 08:23A3: A9 04 00     	lda	#$4
 10475 08:23A6: 85 09        	sta	<L402+res_1
 10476 08:23A8: A7 16        	lda	[<L401+dp_0]
 10477 08:23AA: 85 0B        	sta	<L402+fs_1
 10478 08:23AC: A0 02 00     	ldy	#$2
 10479 08:23AF: B7 16        	lda	[<L401+dp_0],Y
 10480 08:23B1: 85 0D        	sta	<L402+fs_1+2
 10481 08:23B3: E2 20        	sep	#$20
 10482                        	longa	off
 10483 08:23B5: A9 FF        	lda	#$ff
 10484 08:23B7: 85 11        	sta	<L402+ord_1
 10485 08:23B9: C2 20        	rep	#$20
 10486                        	longa	on
 10487 08:23BB: E2 20        	sep	#$20
 10488                        	longa	off
 10489 08:23BD: A9 FF        	lda	#$ff
 10490 08:23BF: 85 12        	sta	<L402+sum_1
 10491 08:23C1: C2 20        	rep	#$20
 10492                        	longa	on
 10493                        	.line	2580
 10494                        L10198:
 10495 08:23C3: A0 18 00     	ldy	#$18
 10496 08:23C6: B7 16        	lda	[<L401+dp_0],Y
 10497 08:23C8: A0 1A 00     	ldy	#$1a
 10498 08:23CB: 17 16        	ora	[<L401+dp_0],Y
 10499 08:23CD: D0 03        	bne	L404
 10500 08:23CF: 82 CF 01     	brl	L10199
 10501                        L404:
 10502                        ;	{
 10503                        	.line	2581
 10504                        ;		res = move_window(fs, dp->sect);
 10505                        	.line	2582
 10506 08:23D2: A0 1A 00     	ldy	#$1a
 10507 08:23D5: B7 16        	lda	[<L401+dp_0],Y
 10508 08:23D7: 48           	pha
 10509 08:23D8: A0 18 00     	ldy	#$18
 10510 08:23DB: B7 16        	lda	[<L401+dp_0],Y
 10511 08:23DD: 48           	pha
 10512 08:23DE: D4 0D        	pei	<L402+fs_1+2
 10513 08:23E0: D4 0B        	pei	<L402+fs_1
 10514 08:23E2: 22 C1 08 08  	jsl	~~move_window
 10515 08:23E6: 85 09        	sta	<L402+res_1
 10516                        ;		if (res != FR_OK)
  Sat Jul 10 2021  1:15                                                Page 204


 10517                        	.line	2583
 10518                        ;			break;
 10519 08:23E8: A5 09        	lda	<L402+res_1
 10520 08:23EA: F0 03        	beq	L405
 10521 08:23EC: 82 B2 01     	brl	L10199
 10522                        L405:
 10523                        ;		b = dp->dir[DIR_Name]; /* Test for the e
                    ntry type */
 10524                        	.line	2585
 10525 08:23EF: A0 1C 00     	ldy	#$1c
 10526 08:23F2: B7 16        	lda	[<L401+dp_0],Y
 10527 08:23F4: 85 01        	sta	<R0
 10528 08:23F6: A0 1E 00     	ldy	#$1e
 10529 08:23F9: B7 16        	lda	[<L401+dp_0],Y
 10530 08:23FB: 85 03        	sta	<R0+2
 10531 08:23FD: E2 20        	sep	#$20
 10532                        	longa	off
 10533 08:23FF: A7 01        	lda	[<R0]
 10534 08:2401: 85 10        	sta	<L402+b_1
 10535 08:2403: C2 20        	rep	#$20
 10536                        	longa	on
 10537                        ;		if (b == 0)
 10538                        	.line	2586
 10539                        ;		{
 10540 08:2405: A5 10        	lda	<L402+b_1
 10541 08:2407: 29 FF 00     	and	#$ff
 10542 08:240A: F0 03        	beq	L406
 10543 08:240C: 82 08 00     	brl	L10200
 10544                        L406:
 10545                        	.line	2587
 10546                        ;			res = FR_NO_FILE;
 10547                        	.line	2588
 10548 08:240F: A9 04 00     	lda	#$4
 10549 08:2412: 85 09        	sta	<L402+res_1
 10550                        ;			break; /* Reached to end of the 
                    directory */
 10551                        	.line	2589
 10552 08:2414: 82 8A 01     	brl	L10199
 10553                        ;		}
 10554                        	.line	2590
 10555                        ;#if FF_FS_EXFAT
 10556                        ;		if (fs->fs_type == FS_EXFAT)
 10557                        ;		{ /* On the exFAT volume */
 10558                        ;			if (FF_USE_LABEL && vol)
 10559                        ;			{
 10560                        ;				if (b == ET_VLABEL) brea
                    k; /* Volume label entry? */
 10561                        ;			}
 10562                        ;			else
 10563                        ;			{
 10564                        ;				if (b == ET_FILEDIR)
 10565                        ;				{ /* Start of the file e
                    ntry block? */
 10566                        ;					dp->blk_ofs = dp
                    ->dptr; /* Get location of the block */
 10567                        ;					res = load_xdir(
                    dp); /* Load the entry block */
 10568                        ;					if (res == FR_OK
  Sat Jul 10 2021  1:15                                                Page 205


                    )
 10569                        ;					{
 10570                        ;						dp->obj.
                    attr = fs->dirbuf[XDIR_Attr] & AM_MASK; /* Get attribute */
 10571                        ;					}
 10572                        ;					break;
 10573                        ;				}
 10574                        ;			}
 10575                        ;		}
 10576                        ;		else
 10577                        ;#endif
 10578                        ;		{ /* On the FAT/FAT32 volume */
 10579                        L10200:
 10580                        	.line	2614
 10581                        ;			dp->obj.attr = attr = dp->dir[DI
                    R_Attr] & AM_MASK; /* Get attribute */
 10582                        	.line	2615
 10583 08:2417: A0 1C 00     	ldy	#$1c
 10584 08:241A: B7 16        	lda	[<L401+dp_0],Y
 10585 08:241C: 85 01        	sta	<R0
 10586 08:241E: A0 1E 00     	ldy	#$1e
 10587 08:2421: B7 16        	lda	[<L401+dp_0],Y
 10588 08:2423: 85 03        	sta	<R0+2
 10589 08:2425: E2 20        	sep	#$20
 10590                        	longa	off
 10591 08:2427: A0 0B 00     	ldy	#$b
 10592 08:242A: B7 01        	lda	[<R0],Y
 10593 08:242C: 29 3F        	and	#<$3f
 10594 08:242E: 85 0F        	sta	<L402+attr_1
 10595 08:2430: C2 20        	rep	#$20
 10596                        	longa	on
 10597 08:2432: E2 20        	sep	#$20
 10598                        	longa	off
 10599 08:2434: A5 0F        	lda	<L402+attr_1
 10600 08:2436: A0 06 00     	ldy	#$6
 10601 08:2439: 97 16        	sta	[<L401+dp_0],Y
 10602 08:243B: C2 20        	rep	#$20
 10603                        	longa	on
 10604                        ;#if FF_USE_LFN		/* LFN configuration */
 10605                        ;			if (b == DDEM || b == '.' || (in
                    t)((attr & ~AM_ARC) == AM_VOL) != vol)
 10606                        	.line	2617
 10607                        ;			{ /* An entry without valid data
                     */
 10608 08:243D: E2 20        	sep	#$20
 10609                        	longa	off
 10610 08:243F: A5 10        	lda	<L402+b_1
 10611 08:2441: C9 E5        	cmp	#<$e5
 10612 08:2443: C2 20        	rep	#$20
 10613                        	longa	on
 10614 08:2445: D0 03        	bne	L408
 10615 08:2447: 82 2E 00     	brl	L407
 10616                        L408:
 10617 08:244A: E2 20        	sep	#$20
 10618                        	longa	off
 10619 08:244C: A5 10        	lda	<L402+b_1
 10620 08:244E: C9 2E        	cmp	#<$2e
 10621 08:2450: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 206


 10622                        	longa	on
 10623 08:2452: D0 03        	bne	L409
 10624 08:2454: 82 21 00     	brl	L407
 10625                        L409:
 10626 08:2457: 64 01        	stz	<R0
 10627 08:2459: A5 0F        	lda	<L402+attr_1
 10628 08:245B: 29 FF 00     	and	#$ff
 10629 08:245E: 29 DF FF     	and	#<$ffffffdf
 10630 08:2461: 85 05        	sta	<R1
 10631 08:2463: A5 05        	lda	<R1
 10632 08:2465: C9 08 00     	cmp	#<$8
 10633 08:2468: F0 03        	beq	L411
 10634 08:246A: 82 02 00     	brl	L410
 10635                        L411:
 10636 08:246D: E6 01        	inc	<R0
 10637                        L410:
 10638 08:246F: A5 01        	lda	<R0
 10639 08:2471: C5 1A        	cmp	<L401+vol_0
 10640 08:2473: D0 03        	bne	L412
 10641 08:2475: 82 0B 00     	brl	L10201
 10642                        L412:
 10643                        L407:
 10644                        	.line	2618
 10645                        ;				ord = 0xFF;
 10646                        	.line	2619
 10647 08:2478: E2 20        	sep	#$20
 10648                        	longa	off
 10649 08:247A: A9 FF        	lda	#$ff
 10650 08:247C: 85 11        	sta	<L402+ord_1
 10651 08:247E: C2 20        	rep	#$20
 10652                        	longa	on
 10653                        ;			}
 10654                        	.line	2620
 10655                        ;			else
 10656 08:2480: 82 07 01     	brl	L10202
 10657                        L10201:
 10658                        ;			{
 10659                        	.line	2622
 10660                        ;				if (attr == AM_LFN)
 10661                        	.line	2623
 10662                        ;				{ /* An LFN entry is fou
                    nd */
 10663 08:2483: E2 20        	sep	#$20
 10664                        	longa	off
 10665 08:2485: A5 0F        	lda	<L402+attr_1
 10666 08:2487: C9 0F        	cmp	#<$f
 10667 08:2489: C2 20        	rep	#$20
 10668                        	longa	on
 10669 08:248B: F0 03        	beq	L413
 10670 08:248D: 82 BA 00     	brl	L10203
 10671                        L413:
 10672                        	.line	2624
 10673                        ;					if (b & LLEF)
 10674                        	.line	2625
 10675                        ;					{ /* Is it start
                     of an LFN sequence? */
 10676 08:2490: E2 20        	sep	#$20
 10677                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 207


 10678 08:2492: A5 10        	lda	<L402+b_1
 10679 08:2494: 29 40        	and	#<$40
 10680 08:2496: C2 20        	rep	#$20
 10681                        	longa	on
 10682 08:2498: D0 03        	bne	L414
 10683 08:249A: 82 3D 00     	brl	L10204
 10684                        L414:
 10685                        	.line	2626
 10686                        ;						sum = dp
                    ->dir[LDIR_Chksum];
 10687                        	.line	2627
 10688 08:249D: A0 1C 00     	ldy	#$1c
 10689 08:24A0: B7 16        	lda	[<L401+dp_0],Y
 10690 08:24A2: 85 01        	sta	<R0
 10691 08:24A4: A0 1E 00     	ldy	#$1e
 10692 08:24A7: B7 16        	lda	[<L401+dp_0],Y
 10693 08:24A9: 85 03        	sta	<R0+2
 10694 08:24AB: E2 20        	sep	#$20
 10695                        	longa	off
 10696 08:24AD: A0 0D 00     	ldy	#$d
 10697 08:24B0: B7 01        	lda	[<R0],Y
 10698 08:24B2: 85 12        	sta	<L402+sum_1
 10699 08:24B4: C2 20        	rep	#$20
 10700                        	longa	on
 10701                        ;						b &= (BY
                    TE)~LLEF; ord = b;
 10702                        	.line	2628
 10703 08:24B6: E2 20        	sep	#$20
 10704                        	longa	off
 10705 08:24B8: A9 40        	lda	#$40
 10706 08:24BA: 14 10        	trb	<L402+b_1
 10707 08:24BC: C2 20        	rep	#$20
 10708                        	longa	on
 10709                        	.line	2628
 10710 08:24BE: E2 20        	sep	#$20
 10711                        	longa	off
 10712 08:24C0: A5 10        	lda	<L402+b_1
 10713 08:24C2: 85 11        	sta	<L402+ord_1
 10714 08:24C4: C2 20        	rep	#$20
 10715                        	longa	on
 10716                        ;						dp->blk_
                    ofs = dp->dptr;
 10717                        	.line	2629
 10718 08:24C6: A0 10 00     	ldy	#$10
 10719 08:24C9: B7 16        	lda	[<L401+dp_0],Y
 10720 08:24CB: A0 2C 00     	ldy	#$2c
 10721 08:24CE: 97 16        	sta	[<L401+dp_0],Y
 10722 08:24D0: A0 12 00     	ldy	#$12
 10723 08:24D3: B7 16        	lda	[<L401+dp_0],Y
 10724 08:24D5: A0 2E 00     	ldy	#$2e
 10725 08:24D8: 97 16        	sta	[<L401+dp_0],Y
 10726                        ;					}
 10727                        	.line	2630
 10728                        ;					/* Check LFN val
                    idity and capture it */
 10729                        ;					ord = (b == ord 
                    && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->d
                    ir)) ? ord - 1 : 0xFF;
  Sat Jul 10 2021  1:15                                                Page 208


 10730                        L10204:
 10731                        	.line	2632
 10732 08:24DA: E2 20        	sep	#$20
 10733                        	longa	off
 10734 08:24DC: A5 10        	lda	<L402+b_1
 10735 08:24DE: C5 11        	cmp	<L402+ord_1
 10736 08:24E0: C2 20        	rep	#$20
 10737                        	longa	on
 10738 08:24E2: F0 03        	beq	L416
 10739 08:24E4: 82 53 00     	brl	L415
 10740                        L416:
 10741 08:24E7: A0 1C 00     	ldy	#$1c
 10742 08:24EA: B7 16        	lda	[<L401+dp_0],Y
 10743 08:24EC: 85 01        	sta	<R0
 10744 08:24EE: A0 1E 00     	ldy	#$1e
 10745 08:24F1: B7 16        	lda	[<L401+dp_0],Y
 10746 08:24F3: 85 03        	sta	<R0+2
 10747 08:24F5: E2 20        	sep	#$20
 10748                        	longa	off
 10749 08:24F7: A5 12        	lda	<L402+sum_1
 10750 08:24F9: A0 0D 00     	ldy	#$d
 10751 08:24FC: D7 01        	cmp	[<R0],Y
 10752 08:24FE: C2 20        	rep	#$20
 10753                        	longa	on
 10754 08:2500: F0 03        	beq	L417
 10755 08:2502: 82 35 00     	brl	L415
 10756                        L417:
 10757 08:2505: A0 1E 00     	ldy	#$1e
 10758 08:2508: B7 16        	lda	[<L401+dp_0],Y
 10759 08:250A: 48           	pha
 10760 08:250B: A0 1C 00     	ldy	#$1c
 10761 08:250E: B7 16        	lda	[<L401+dp_0],Y
 10762 08:2510: 48           	pha
 10763 08:2511: A0 0D 00     	ldy	#$d
 10764 08:2514: B7 0B        	lda	[<L402+fs_1],Y
 10765 08:2516: 48           	pha
 10766 08:2517: A0 0B 00     	ldy	#$b
 10767 08:251A: B7 0B        	lda	[<L402+fs_1],Y
 10768 08:251C: 48           	pha
 10769 08:251D: 22 6B 1F 08  	jsl	~~pick_lfn
 10770 08:2521: AA           	tax
 10771 08:2522: D0 03        	bne	L418
 10772 08:2524: 82 13 00     	brl	L415
 10773                        L418:
 10774 08:2527: A5 11        	lda	<L402+ord_1
 10775 08:2529: 29 FF 00     	and	#$ff
 10776 08:252C: 85 01        	sta	<R0
 10777 08:252E: 18           	clc
 10778 08:252F: A9 FF FF     	lda	#$ffff
 10779 08:2532: 65 01        	adc	<R0
 10780 08:2534: 85 05        	sta	<R1
 10781 08:2536: A5 05        	lda	<R1
 10782 08:2538: 80 03        	bra	L419
 10783                        L415:
 10784 08:253A: A9 FF 00     	lda	#$ff
 10785                        L419:
 10786 08:253D: 85 01        	sta	<R0
 10787 08:253F: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 209


 10788                        	longa	off
 10789 08:2541: A5 01        	lda	<R0
 10790 08:2543: 85 11        	sta	<L402+ord_1
 10791 08:2545: C2 20        	rep	#$20
 10792                        	longa	on
 10793                        ;				}
 10794                        	.line	2633
 10795                        ;				else
 10796 08:2547: 82 40 00     	brl	L10205
 10797                        L10203:
 10798                        ;				{ /* An SFN entry is fou
                    nd */
 10799                        	.line	2635
 10800                        ;					if (ord != 0 || 
                    sum != sum_sfn(dp->dir))
 10801                        	.line	2636
 10802                        ;					{ /* Is there a 
                    valid LFN? */
 10803 08:254A: A5 11        	lda	<L402+ord_1
 10804 08:254C: 29 FF 00     	and	#$ff
 10805 08:254F: F0 03        	beq	L421
 10806 08:2551: 82 23 00     	brl	L420
 10807                        L421:
 10808 08:2554: A0 1E 00     	ldy	#$1e
 10809 08:2557: B7 16        	lda	[<L401+dp_0],Y
 10810 08:2559: 48           	pha
 10811 08:255A: A0 1C 00     	ldy	#$1c
 10812 08:255D: B7 16        	lda	[<L401+dp_0],Y
 10813 08:255F: 48           	pha
 10814 08:2560: 22 34 23 08  	jsl	~~sum_sfn
 10815 08:2564: E2 20        	sep	#$20
 10816                        	longa	off
 10817 08:2566: 85 01        	sta	<R0
 10818 08:2568: C2 20        	rep	#$20
 10819                        	longa	on
 10820 08:256A: E2 20        	sep	#$20
 10821                        	longa	off
 10822 08:256C: A5 01        	lda	<R0
 10823 08:256E: C5 12        	cmp	<L402+sum_1
 10824 08:2570: C2 20        	rep	#$20
 10825                        	longa	on
 10826 08:2572: D0 03        	bne	L422
 10827 08:2574: 82 10 00     	brl	L10206
 10828                        L422:
 10829                        L420:
 10830                        	.line	2637
 10831                        ;						dp->blk_
                    ofs = 0xFFFFFFFF; /* It has no LFN. */
 10832                        	.line	2638
 10833 08:2577: A9 FF FF     	lda	#$ffff
 10834 08:257A: A0 2C 00     	ldy	#$2c
 10835 08:257D: 97 16        	sta	[<L401+dp_0],Y
 10836 08:257F: A9 FF FF     	lda	#$ffff
 10837 08:2582: A0 2E 00     	ldy	#$2e
 10838 08:2585: 97 16        	sta	[<L401+dp_0],Y
 10839                        ;					}
 10840                        	.line	2639
 10841                        ;					break;
  Sat Jul 10 2021  1:15                                                Page 210


 10842                        L10206:
 10843                        	.line	2640
 10844 08:2587: 82 17 00     	brl	L10199
 10845                        ;				}
 10846                        	.line	2641
 10847                        L10205:
 10848                        ;			}
 10849                        	.line	2642
 10850                        L10202:
 10851                        ;#else		/* Non LFN configuration */
 10852                        ;			if (b != DDEM && b != '.' && att
                    r != AM_LFN
 10853                        ;					&& (int) ((attr 
                    & ~AM_ARC) == AM_VOL) == vol)
 10854                        ;			{ /* Is it a valid entry? */
 10855                        ;				break;
 10856                        ;			}
 10857                        ;#endif
 10858                        ;		}
 10859                        	.line	2650
 10860                        ;		res = dir_next(dp, 0); /* Next entry */
 10861                        	.line	2651
 10862 08:258A: F4 00 00     	pea	#<$0
 10863 08:258D: D4 18        	pei	<L401+dp_0+2
 10864 08:258F: D4 16        	pei	<L401+dp_0
 10865 08:2591: 22 9F 19 08  	jsl	~~dir_next
 10866 08:2595: 85 09        	sta	<L402+res_1
 10867                        ;		if (res != FR_OK)
 10868                        	.line	2652
 10869                        ;			break;
 10870 08:2597: A5 09        	lda	<L402+res_1
 10871 08:2599: F0 03        	beq	L423
 10872 08:259B: 82 03 00     	brl	L10199
 10873                        L423:
 10874                        ;	}
 10875                        	.line	2654
 10876 08:259E: 82 22 FE     	brl	L10198
 10877                        L10199:
 10878                        ;
 10879                        ;	if (res != FR_OK)
 10880                        	.line	2656
 10881                        ;		dp->sect = 0; /* Terminate the read oper
                    ation on error or EOT */
 10882 08:25A1: A5 09        	lda	<L402+res_1
 10883 08:25A3: D0 03        	bne	L424
 10884 08:25A5: 82 10 00     	brl	L10207
 10885                        L424:
 10886                        	.line	2657
 10887 08:25A8: A9 00 00     	lda	#$0
 10888 08:25AB: A0 18 00     	ldy	#$18
 10889 08:25AE: 97 16        	sta	[<L401+dp_0],Y
 10890 08:25B0: A9 00 00     	lda	#$0
 10891 08:25B3: A0 1A 00     	ldy	#$1a
 10892 08:25B6: 97 16        	sta	[<L401+dp_0],Y
 10893                        ;	return res;
 10894                        L10207:
 10895                        	.line	2658
 10896 08:25B8: A5 09        	lda	<L402+res_1
  Sat Jul 10 2021  1:15                                                Page 211


 10897                        L425:
 10898 08:25BA: A8           	tay
 10899 08:25BB: A5 14        	lda	<L401+2
 10900 08:25BD: 85 1A        	sta	<L401+2+6
 10901 08:25BF: A5 13        	lda	<L401+1
 10902 08:25C1: 85 19        	sta	<L401+1+6
 10903 08:25C3: 2B           	pld
 10904 08:25C4: 3B           	tsc
 10905 08:25C5: 18           	clc
 10906 08:25C6: 69 18 00     	adc	#L401+6
 10907 08:25C9: 1B           	tcs
 10908 08:25CA: 98           	tya
 10909 08:25CB: 6B           	rtl
 10910                        ;}
 10911                        	.line	2659
 10912                        	.endblock	2659
 10913             00000012   L401	equ	18
 10914             00000009   L402	equ	9
 10915 08:25CC:              	ends
 10916                        	efunc
 10917                        	.endfunc	2659,9,18
 10918                        	.line	2659
 10919                        ;
 10920                        ;#endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL |
                    | FF_FS_RPATH >= 2 */
 10921                        ;
 10922                        ;/*-----------------------------------------------
                    ------------------------*/
 10923                        ;/* Directory handling - Find an object in the dir
                    ectory                  */
 10924                        ;/*-----------------------------------------------
                    ------------------------*/
 10925                        ;
 10926                        ;static FRESULT dir_find( /* FR_OK(0):succeeded, !
                    =0:error */
 10927                        ;DIR* dp /* Pointer to the directory object with t
                    he file name */
 10928                        ;)
 10929                        ;{
 10930                        	.line	2667
 10931                        	.line	2670
 10932                        	FFDOS
 10933                        	func
 10934                        	.function	2670
 10935                        ~~dir_find:
 10936                        	longa	on
 10937                        	longi	on
 10938 08:25CC: 3B           	tsc
 10939 08:25CD: 38           	sec
 10940 08:25CE: E9 12 00     	sbc	#L426
 10941 08:25D1: 1B           	tcs
 10942 08:25D2: 0B           	phd
 10943 08:25D3: 5B           	tcd
 10944             00000004   dp_0	set	4
 10945                        	.block	2670
 10946                        ;	FRESULT res;
 10947                        ;	FATFS *fs = dp->obj.fs;
 10948                        ;	BYTE c;
  Sat Jul 10 2021  1:15                                                Page 212


 10949                        ;#if FF_USE_LFN
 10950                        ;	BYTE a, ord, sum;
 10951                        ;#endif
 10952                        ;
 10953                        ;	res = dir_sdi(dp, 0); /* Rewind directory object
                     */
 10954             00000000   res_1	set	0
 10955             00000002   fs_1	set	2
 10956             00000006   c_1	set	6
 10957             00000007   a_1	set	7
 10958             00000008   ord_1	set	8
 10959             00000009   sum_1	set	9
 10960                        	.sym	res,0,5,1,16
 10961                        	.sym	fs,2,138,1,32,72
 10962                        	.sym	c,6,14,1,8
 10963                        	.sym	a,7,14,1,8
 10964                        	.sym	ord,8,14,1,8
 10965                        	.sym	sum,9,14,1,8
 10966                        	.sym	dp,4,138,6,32,75
 10967 08:25D4: A7 16        	lda	[<L426+dp_0]
 10968 08:25D6: 85 0B        	sta	<L427+fs_1
 10969 08:25D8: A0 02 00     	ldy	#$2
 10970 08:25DB: B7 16        	lda	[<L426+dp_0],Y
 10971 08:25DD: 85 0D        	sta	<L427+fs_1+2
 10972                        	.line	2678
 10973 08:25DF: F4 00 00     	pea	#^$0
 10974 08:25E2: F4 00 00     	pea	#<$0
 10975 08:25E5: D4 18        	pei	<L426+dp_0+2
 10976 08:25E7: D4 16        	pei	<L426+dp_0
 10977 08:25E9: 22 60 17 08  	jsl	~~dir_sdi
 10978 08:25ED: 85 09        	sta	<L427+res_1
 10979                        ;	if (res != FR_OK)
 10980                        	.line	2679
 10981                        ;		return res;
 10982 08:25EF: A5 09        	lda	<L427+res_1
 10983 08:25F1: D0 03        	bne	L429
 10984 08:25F3: 82 14 00     	brl	L10208
 10985                        L429:
 10986                        	.line	2680
 10987 08:25F6: A5 09        	lda	<L427+res_1
 10988                        L430:
 10989 08:25F8: A8           	tay
 10990 08:25F9: A5 14        	lda	<L426+2
 10991 08:25FB: 85 18        	sta	<L426+2+4
 10992 08:25FD: A5 13        	lda	<L426+1
 10993 08:25FF: 85 17        	sta	<L426+1+4
 10994 08:2601: 2B           	pld
 10995 08:2602: 3B           	tsc
 10996 08:2603: 18           	clc
 10997 08:2604: 69 16 00     	adc	#L426+4
 10998 08:2607: 1B           	tcs
 10999 08:2608: 98           	tya
 11000 08:2609: 6B           	rtl
 11001                        ;#if FF_FS_EXFAT
 11002                        ;	if (fs->fs_type == FS_EXFAT)
 11003                        ;	{ /* On the exFAT volume */
 11004                        ;		BYTE nc;
 11005                        ;		UINT di, ni;
  Sat Jul 10 2021  1:15                                                Page 213


 11006                        ;		WORD hash = xname_sum(fs->lfnbuf); /* Ha
                    sh value of the name to find */
 11007                        ;
 11008                        ;		while ((res = DIR_READ_FILE(dp)) == FR_O
                    K)
 11009                        ;		{ /* Read an item */
 11010                        ;#if FF_MAX_LFN < 255
 11011                        ;			if (fs->dirbuf[XDIR_NumName] > F
                    F_MAX_LFN) continue; /* Skip comparison if inaccessible obje
                    ct name */
 11012                        ;#endif
 11013                        ;			if (ld_word(fs->dirbuf + XDIR_Na
                    meHash) != hash) continue; /* Skip comparison if hash mismat
                    ched */
 11014                        ;			for (nc = fs->dirbuf[XDIR_NumNam
                    e], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++)
 11015                        ;			{ /* Compare the name */
 11016                        ;				if ((di % SZDIRE) == 0) 
                    di += 2;
 11017                        ;				if (ff_wtoupper(ld_word(
                    fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 11018                        ;			}
 11019                        ;			if (nc == 0 && !fs->lfnbuf[ni]) 
                    break; /* Name matched? */
 11020                        ;		}
 11021                        ;		return res;
 11022                        ;	}
 11023                        ;#endif
 11024                        ;	/* On the FAT/FAT32 volume */
 11025                        ;#if FF_USE_LFN
 11026                        ;	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF; /* R
                    eset LFN sequence */
 11027                        L10208:
 11028                        	.line	2706
 11029 08:260A: E2 20        	sep	#$20
 11030                        	longa	off
 11031 08:260C: A9 FF        	lda	#$ff
 11032 08:260E: 85 12        	sta	<L427+sum_1
 11033 08:2610: C2 20        	rep	#$20
 11034                        	longa	on
 11035 08:2612: E2 20        	sep	#$20
 11036                        	longa	off
 11037 08:2614: A9 FF        	lda	#$ff
 11038 08:2616: 85 11        	sta	<L427+ord_1
 11039 08:2618: C2 20        	rep	#$20
 11040                        	longa	on
 11041                        	.line	2706
 11042 08:261A: A9 FF FF     	lda	#$ffff
 11043 08:261D: A0 2C 00     	ldy	#$2c
 11044 08:2620: 97 16        	sta	[<L426+dp_0],Y
 11045 08:2622: A9 FF FF     	lda	#$ffff
 11046 08:2625: A0 2E 00     	ldy	#$2e
 11047 08:2628: 97 16        	sta	[<L426+dp_0],Y
 11048                        ;#endif
 11049                        ;	do
 11050                        	.line	2708
 11051                        L10211:
 11052                        ;	{
  Sat Jul 10 2021  1:15                                                Page 214


 11053                        	.line	2709
 11054                        ;		res = move_window(fs, dp->sect);
 11055                        	.line	2710
 11056 08:262A: A0 1A 00     	ldy	#$1a
 11057 08:262D: B7 16        	lda	[<L426+dp_0],Y
 11058 08:262F: 48           	pha
 11059 08:2630: A0 18 00     	ldy	#$18
 11060 08:2633: B7 16        	lda	[<L426+dp_0],Y
 11061 08:2635: 48           	pha
 11062 08:2636: D4 0D        	pei	<L427+fs_1+2
 11063 08:2638: D4 0B        	pei	<L427+fs_1
 11064 08:263A: 22 C1 08 08  	jsl	~~move_window
 11065 08:263E: 85 09        	sta	<L427+res_1
 11066                        ;		if (res != FR_OK)
 11067                        	.line	2711
 11068                        ;			break;
 11069 08:2640: A5 09        	lda	<L427+res_1
 11070 08:2642: F0 03        	beq	L431
 11071 08:2644: 82 FC 01     	brl	L10210
 11072                        L431:
 11073                        ;		c = dp->dir[DIR_Name];
 11074                        	.line	2713
 11075 08:2647: A0 1C 00     	ldy	#$1c
 11076 08:264A: B7 16        	lda	[<L426+dp_0],Y
 11077 08:264C: 85 01        	sta	<R0
 11078 08:264E: A0 1E 00     	ldy	#$1e
 11079 08:2651: B7 16        	lda	[<L426+dp_0],Y
 11080 08:2653: 85 03        	sta	<R0+2
 11081 08:2655: E2 20        	sep	#$20
 11082                        	longa	off
 11083 08:2657: A7 01        	lda	[<R0]
 11084 08:2659: 85 0F        	sta	<L427+c_1
 11085 08:265B: C2 20        	rep	#$20
 11086                        	longa	on
 11087                        ;		if (c == 0)
 11088                        	.line	2714
 11089                        ;		{
 11090 08:265D: A5 0F        	lda	<L427+c_1
 11091 08:265F: 29 FF 00     	and	#$ff
 11092 08:2662: F0 03        	beq	L432
 11093 08:2664: 82 08 00     	brl	L10212
 11094                        L432:
 11095                        	.line	2715
 11096                        ;			res = FR_NO_FILE;
 11097                        	.line	2716
 11098 08:2667: A9 04 00     	lda	#$4
 11099 08:266A: 85 09        	sta	<L427+res_1
 11100                        ;			break;
 11101                        	.line	2717
 11102 08:266C: 82 D4 01     	brl	L10210
 11103                        ;		} /* Reached to end of table */
 11104                        	.line	2718
 11105                        ;#if FF_USE_LFN		/* LFN configuration */
 11106                        ;		dp->obj.attr = a = dp->dir[DIR_Attr] & A
                    M_MASK;
 11107                        L10212:
 11108                        	.line	2720
 11109 08:266F: A0 1C 00     	ldy	#$1c
  Sat Jul 10 2021  1:15                                                Page 215


 11110 08:2672: B7 16        	lda	[<L426+dp_0],Y
 11111 08:2674: 85 01        	sta	<R0
 11112 08:2676: A0 1E 00     	ldy	#$1e
 11113 08:2679: B7 16        	lda	[<L426+dp_0],Y
 11114 08:267B: 85 03        	sta	<R0+2
 11115 08:267D: E2 20        	sep	#$20
 11116                        	longa	off
 11117 08:267F: A0 0B 00     	ldy	#$b
 11118 08:2682: B7 01        	lda	[<R0],Y
 11119 08:2684: 29 3F        	and	#<$3f
 11120 08:2686: 85 10        	sta	<L427+a_1
 11121 08:2688: C2 20        	rep	#$20
 11122                        	longa	on
 11123 08:268A: E2 20        	sep	#$20
 11124                        	longa	off
 11125 08:268C: A5 10        	lda	<L427+a_1
 11126 08:268E: A0 06 00     	ldy	#$6
 11127 08:2691: 97 16        	sta	[<L426+dp_0],Y
 11128 08:2693: C2 20        	rep	#$20
 11129                        	longa	on
 11130                        ;		if (c == DDEM || ((a & AM_VOL) && a != A
                    M_LFN))
 11131                        	.line	2721
 11132                        ;		{ /* An entry without valid data */
 11133 08:2695: E2 20        	sep	#$20
 11134                        	longa	off
 11135 08:2697: A5 0F        	lda	<L427+c_1
 11136 08:2699: C9 E5        	cmp	#<$e5
 11137 08:269B: C2 20        	rep	#$20
 11138                        	longa	on
 11139 08:269D: D0 03        	bne	L434
 11140 08:269F: 82 1A 00     	brl	L433
 11141                        L434:
 11142 08:26A2: E2 20        	sep	#$20
 11143                        	longa	off
 11144 08:26A4: A5 10        	lda	<L427+a_1
 11145 08:26A6: 29 08        	and	#<$8
 11146 08:26A8: C2 20        	rep	#$20
 11147                        	longa	on
 11148 08:26AA: D0 03        	bne	L435
 11149 08:26AC: 82 28 00     	brl	L10213
 11150                        L435:
 11151 08:26AF: E2 20        	sep	#$20
 11152                        	longa	off
 11153 08:26B1: A5 10        	lda	<L427+a_1
 11154 08:26B3: C9 0F        	cmp	#<$f
 11155 08:26B5: C2 20        	rep	#$20
 11156                        	longa	on
 11157 08:26B7: D0 03        	bne	L436
 11158 08:26B9: 82 1B 00     	brl	L10213
 11159                        L436:
 11160                        L433:
 11161                        	.line	2722
 11162                        ;			ord = 0xFF; dp->blk_ofs = 0xFFFF
                    FFFF; /* Reset LFN sequence */
 11163                        	.line	2723
 11164 08:26BC: E2 20        	sep	#$20
 11165                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 216


 11166 08:26BE: A9 FF        	lda	#$ff
 11167 08:26C0: 85 11        	sta	<L427+ord_1
 11168 08:26C2: C2 20        	rep	#$20
 11169                        	longa	on
 11170                        	.line	2723
 11171 08:26C4: A9 FF FF     	lda	#$ffff
 11172 08:26C7: A0 2C 00     	ldy	#$2c
 11173 08:26CA: 97 16        	sta	[<L426+dp_0],Y
 11174 08:26CC: A9 FF FF     	lda	#$ffff
 11175 08:26CF: A0 2E 00     	ldy	#$2e
 11176 08:26D2: 97 16        	sta	[<L426+dp_0],Y
 11177                        ;		}
 11178                        	.line	2724
 11179                        ;		else
 11180 08:26D4: 82 58 01     	brl	L10214
 11181                        L10213:
 11182                        ;		{
 11183                        	.line	2726
 11184                        ;			if (a == AM_LFN)
 11185                        	.line	2727
 11186                        ;			{ /* An LFN entry is found */
 11187 08:26D7: E2 20        	sep	#$20
 11188                        	longa	off
 11189 08:26D9: A5 10        	lda	<L427+a_1
 11190 08:26DB: C9 0F        	cmp	#<$f
 11191 08:26DD: C2 20        	rep	#$20
 11192                        	longa	on
 11193 08:26DF: F0 03        	beq	L437
 11194 08:26E1: 82 CA 00     	brl	L10215
 11195                        L437:
 11196                        	.line	2728
 11197                        ;				if (!(dp->fn[NSFLAG] & N
                    S_NOLFN))
 11198                        	.line	2729
 11199                        ;				{
 11200 08:26E4: E2 20        	sep	#$20
 11201                        	longa	off
 11202 08:26E6: A0 2B 00     	ldy	#$2b
 11203 08:26E9: B7 16        	lda	[<L426+dp_0],Y
 11204 08:26EB: 29 40        	and	#<$40
 11205 08:26ED: C2 20        	rep	#$20
 11206                        	longa	on
 11207 08:26EF: F0 03        	beq	L438
 11208 08:26F1: 82 B7 00     	brl	L10216
 11209                        L438:
 11210                        	.line	2730
 11211                        ;					if (c & LLEF)
 11212                        	.line	2731
 11213                        ;					{ /* Is it start
                     of LFN sequence? */
 11214 08:26F4: E2 20        	sep	#$20
 11215                        	longa	off
 11216 08:26F6: A5 0F        	lda	<L427+c_1
 11217 08:26F8: 29 40        	and	#<$40
 11218 08:26FA: C2 20        	rep	#$20
 11219                        	longa	on
 11220 08:26FC: D0 03        	bne	L439
 11221 08:26FE: 82 3D 00     	brl	L10217
  Sat Jul 10 2021  1:15                                                Page 217


 11222                        L439:
 11223                        	.line	2732
 11224                        ;						sum = dp
                    ->dir[LDIR_Chksum];
 11225                        	.line	2733
 11226 08:2701: A0 1C 00     	ldy	#$1c
 11227 08:2704: B7 16        	lda	[<L426+dp_0],Y
 11228 08:2706: 85 01        	sta	<R0
 11229 08:2708: A0 1E 00     	ldy	#$1e
 11230 08:270B: B7 16        	lda	[<L426+dp_0],Y
 11231 08:270D: 85 03        	sta	<R0+2
 11232 08:270F: E2 20        	sep	#$20
 11233                        	longa	off
 11234 08:2711: A0 0D 00     	ldy	#$d
 11235 08:2714: B7 01        	lda	[<R0],Y
 11236 08:2716: 85 12        	sta	<L427+sum_1
 11237 08:2718: C2 20        	rep	#$20
 11238                        	longa	on
 11239                        ;						c &= (BY
                    TE)~LLEF; ord = c; /* LFN start order */
 11240                        	.line	2734
 11241 08:271A: E2 20        	sep	#$20
 11242                        	longa	off
 11243 08:271C: A9 40        	lda	#$40
 11244 08:271E: 14 0F        	trb	<L427+c_1
 11245 08:2720: C2 20        	rep	#$20
 11246                        	longa	on
 11247                        	.line	2734
 11248 08:2722: E2 20        	sep	#$20
 11249                        	longa	off
 11250 08:2724: A5 0F        	lda	<L427+c_1
 11251 08:2726: 85 11        	sta	<L427+ord_1
 11252 08:2728: C2 20        	rep	#$20
 11253                        	longa	on
 11254                        ;						dp->blk_
                    ofs = dp->dptr; /* Start offset of LFN */
 11255                        	.line	2735
 11256 08:272A: A0 10 00     	ldy	#$10
 11257 08:272D: B7 16        	lda	[<L426+dp_0],Y
 11258 08:272F: A0 2C 00     	ldy	#$2c
 11259 08:2732: 97 16        	sta	[<L426+dp_0],Y
 11260 08:2734: A0 12 00     	ldy	#$12
 11261 08:2737: B7 16        	lda	[<L426+dp_0],Y
 11262 08:2739: A0 2E 00     	ldy	#$2e
 11263 08:273C: 97 16        	sta	[<L426+dp_0],Y
 11264                        ;					}
 11265                        	.line	2736
 11266                        ;					/* Check validit
                    y of the LFN entry and compare it with given name */
 11267                        ;					ord = (c == ord 
                    && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->di
                    r)) ? ord - 1 : 0xFF;
 11268                        L10217:
 11269                        	.line	2738
 11270 08:273E: E2 20        	sep	#$20
 11271                        	longa	off
 11272 08:2740: A5 0F        	lda	<L427+c_1
 11273 08:2742: C5 11        	cmp	<L427+ord_1
  Sat Jul 10 2021  1:15                                                Page 218


 11274 08:2744: C2 20        	rep	#$20
 11275                        	longa	on
 11276 08:2746: F0 03        	beq	L441
 11277 08:2748: 82 53 00     	brl	L440
 11278                        L441:
 11279 08:274B: A0 1C 00     	ldy	#$1c
 11280 08:274E: B7 16        	lda	[<L426+dp_0],Y
 11281 08:2750: 85 01        	sta	<R0
 11282 08:2752: A0 1E 00     	ldy	#$1e
 11283 08:2755: B7 16        	lda	[<L426+dp_0],Y
 11284 08:2757: 85 03        	sta	<R0+2
 11285 08:2759: E2 20        	sep	#$20
 11286                        	longa	off
 11287 08:275B: A5 12        	lda	<L427+sum_1
 11288 08:275D: A0 0D 00     	ldy	#$d
 11289 08:2760: D7 01        	cmp	[<R0],Y
 11290 08:2762: C2 20        	rep	#$20
 11291                        	longa	on
 11292 08:2764: F0 03        	beq	L442
 11293 08:2766: 82 35 00     	brl	L440
 11294                        L442:
 11295 08:2769: A0 1E 00     	ldy	#$1e
 11296 08:276C: B7 16        	lda	[<L426+dp_0],Y
 11297 08:276E: 48           	pha
 11298 08:276F: A0 1C 00     	ldy	#$1c
 11299 08:2772: B7 16        	lda	[<L426+dp_0],Y
 11300 08:2774: 48           	pha
 11301 08:2775: A0 0D 00     	ldy	#$d
 11302 08:2778: B7 0B        	lda	[<L427+fs_1],Y
 11303 08:277A: 48           	pha
 11304 08:277B: A0 0B 00     	ldy	#$b
 11305 08:277E: B7 0B        	lda	[<L427+fs_1],Y
 11306 08:2780: 48           	pha
 11307 08:2781: 22 0C 1E 08  	jsl	~~cmp_lfn
 11308 08:2785: AA           	tax
 11309 08:2786: D0 03        	bne	L443
 11310 08:2788: 82 13 00     	brl	L440
 11311                        L443:
 11312 08:278B: A5 11        	lda	<L427+ord_1
 11313 08:278D: 29 FF 00     	and	#$ff
 11314 08:2790: 85 01        	sta	<R0
 11315 08:2792: 18           	clc
 11316 08:2793: A9 FF FF     	lda	#$ffff
 11317 08:2796: 65 01        	adc	<R0
 11318 08:2798: 85 05        	sta	<R1
 11319 08:279A: A5 05        	lda	<R1
 11320 08:279C: 80 03        	bra	L444
 11321                        L440:
 11322 08:279E: A9 FF 00     	lda	#$ff
 11323                        L444:
 11324 08:27A1: 85 01        	sta	<R0
 11325 08:27A3: E2 20        	sep	#$20
 11326                        	longa	off
 11327 08:27A5: A5 01        	lda	<R0
 11328 08:27A7: 85 11        	sta	<L427+ord_1
 11329 08:27A9: C2 20        	rep	#$20
 11330                        	longa	on
 11331                        ;				}
  Sat Jul 10 2021  1:15                                                Page 219


 11332                        	.line	2739
 11333                        ;			}
 11334                        L10216:
 11335                        	.line	2740
 11336                        ;			else
 11337 08:27AB: 82 81 00     	brl	L10218
 11338                        L10215:
 11339                        ;			{ /* An SFN entry is found */
 11340                        	.line	2742
 11341                        ;				if (ord == 0 && sum == s
                    um_sfn(dp->dir)) break; /* LFN matched? */
 11342                        	.line	2743
 11343 08:27AE: A5 11        	lda	<L427+ord_1
 11344 08:27B0: 29 FF 00     	and	#$ff
 11345 08:27B3: F0 03        	beq	L446
 11346 08:27B5: 82 23 00     	brl	L445
 11347                        L446:
 11348 08:27B8: A0 1E 00     	ldy	#$1e
 11349 08:27BB: B7 16        	lda	[<L426+dp_0],Y
 11350 08:27BD: 48           	pha
 11351 08:27BE: A0 1C 00     	ldy	#$1c
 11352 08:27C1: B7 16        	lda	[<L426+dp_0],Y
 11353 08:27C3: 48           	pha
 11354 08:27C4: 22 34 23 08  	jsl	~~sum_sfn
 11355 08:27C8: E2 20        	sep	#$20
 11356                        	longa	off
 11357 08:27CA: 85 01        	sta	<R0
 11358 08:27CC: C2 20        	rep	#$20
 11359                        	longa	on
 11360 08:27CE: E2 20        	sep	#$20
 11361                        	longa	off
 11362 08:27D0: A5 01        	lda	<R0
 11363 08:27D2: C5 12        	cmp	<L427+sum_1
 11364 08:27D4: C2 20        	rep	#$20
 11365                        	longa	on
 11366 08:27D6: D0 03        	bne	L447
 11367 08:27D8: 82 68 00     	brl	L10210
 11368                        L447:
 11369                        L445:
 11370                        ;				if (!(dp->fn[NSFLAG] & N
                    S_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break; /* SFN matc
                    hed? */
 11371                        	.line	2744
 11372 08:27DB: E2 20        	sep	#$20
 11373                        	longa	off
 11374 08:27DD: A0 2B 00     	ldy	#$2b
 11375 08:27E0: B7 16        	lda	[<L426+dp_0],Y
 11376 08:27E2: 29 01        	and	#<$1
 11377 08:27E4: C2 20        	rep	#$20
 11378                        	longa	on
 11379 08:27E6: F0 03        	beq	L449
 11380 08:27E8: 82 2C 00     	brl	L448
 11381                        L449:
 11382 08:27EB: F4 0B 00     	pea	#<$b
 11383 08:27EE: 18           	clc
 11384 08:27EF: A9 20 00     	lda	#$20
 11385 08:27F2: 65 16        	adc	<L426+dp_0
 11386 08:27F4: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 220


 11387 08:27F6: A9 00 00     	lda	#$0
 11388 08:27F9: 65 18        	adc	<L426+dp_0+2
 11389 08:27FB: 85 03        	sta	<R0+2
 11390 08:27FD: D4 03        	pei	<R0+2
 11391 08:27FF: D4 01        	pei	<R0
 11392 08:2801: A0 1E 00     	ldy	#$1e
 11393 08:2804: B7 16        	lda	[<L426+dp_0],Y
 11394 08:2806: 48           	pha
 11395 08:2807: A0 1C 00     	ldy	#$1c
 11396 08:280A: B7 16        	lda	[<L426+dp_0],Y
 11397 08:280C: 48           	pha
 11398 08:280D: 22 16 02 08  	jsl	~~mem_cmp
 11399 08:2811: AA           	tax
 11400 08:2812: D0 03        	bne	L450
 11401 08:2814: 82 2C 00     	brl	L10210
 11402                        L450:
 11403                        L448:
 11404                        ;				ord = 0xFF; dp->blk_ofs 
                    = 0xFFFFFFFF; /* Reset LFN sequence */
 11405                        	.line	2745
 11406 08:2817: E2 20        	sep	#$20
 11407                        	longa	off
 11408 08:2819: A9 FF        	lda	#$ff
 11409 08:281B: 85 11        	sta	<L427+ord_1
 11410 08:281D: C2 20        	rep	#$20
 11411                        	longa	on
 11412                        	.line	2745
 11413 08:281F: A9 FF FF     	lda	#$ffff
 11414 08:2822: A0 2C 00     	ldy	#$2c
 11415 08:2825: 97 16        	sta	[<L426+dp_0],Y
 11416 08:2827: A9 FF FF     	lda	#$ffff
 11417 08:282A: A0 2E 00     	ldy	#$2e
 11418 08:282D: 97 16        	sta	[<L426+dp_0],Y
 11419                        ;			}
 11420                        	.line	2746
 11421                        L10218:
 11422                        ;		}
 11423                        	.line	2747
 11424                        L10214:
 11425                        ;#else		/* Non LFN configuration */
 11426                        ;		dp->obj.attr = dp->dir[DIR_Attr] & AM_MA
                    SK;
 11427                        ;		if (!(dp->dir[DIR_Attr] & AM_VOL) && !me
                    m_cmp(dp->dir, dp->fn, 11))
 11428                        ;			break; /* Is it a valid entry? *
                    /
 11429                        ;#endif
 11430                        ;		res = dir_next(dp, 0); /* Next entry */
 11431                        	.line	2753
 11432 08:282F: F4 00 00     	pea	#<$0
 11433 08:2832: D4 18        	pei	<L426+dp_0+2
 11434 08:2834: D4 16        	pei	<L426+dp_0
 11435 08:2836: 22 9F 19 08  	jsl	~~dir_next
 11436 08:283A: 85 09        	sta	<L427+res_1
 11437                        ;	} while (res == FR_OK);
 11438                        	.line	2754
 11439                        L10209:
 11440 08:283C: A5 09        	lda	<L427+res_1
  Sat Jul 10 2021  1:15                                                Page 221


 11441 08:283E: D0 03        	bne	L451
 11442 08:2840: 82 E7 FD     	brl	L10211
 11443                        L451:
 11444                        L10210:
 11445                        ;
 11446                        ;	return res;
 11447                        	.line	2756
 11448 08:2843: A5 09        	lda	<L427+res_1
 11449 08:2845: 82 B0 FD     	brl	L430
 11450                        ;}
 11451                        	.line	2757
 11452                        	.endblock	2757
 11453             00000012   L426	equ	18
 11454             00000009   L427	equ	9
 11455 08:2848:              	ends
 11456                        	efunc
 11457                        	.endfunc	2757,9,18
 11458                        	.line	2757
 11459                        ;
 11460                        ;#if !FF_FS_READONLY
 11461                        ;/*-----------------------------------------------
                    ------------------------*/
 11462                        ;/* Register an object to the directory           
                                            */
 11463                        ;/*-----------------------------------------------
                    ------------------------*/
 11464                        ;
 11465                        ;static FRESULT dir_register( /* FR_OK:succeeded, 
                    FR_DENIED:no free entry or too many SFN collision, FR_DISK_E
                    RR:disk error */
 11466                        ;DIR* dp /* Target directory with object name to b
                    e created */
 11467                        ;)
 11468                        ;{
 11469                        	.line	2764
 11470                        	.line	2767
 11471                        	FFDOS
 11472                        	func
 11473                        	.function	2767
 11474                        ~~dir_register:
 11475                        	longa	on
 11476                        	longi	on
 11477 08:2848: 3B           	tsc
 11478 08:2849: 38           	sec
 11479 08:284A: E9 25 00     	sbc	#L452
 11480 08:284D: 1B           	tcs
 11481 08:284E: 0B           	phd
 11482 08:284F: 5B           	tcd
 11483             00000004   dp_0	set	4
 11484                        	.block	2767
 11485                        ;	FRESULT res;
 11486                        ;	FATFS *fs = dp->obj.fs;
 11487                        ;#if FF_USE_LFN		/* LFN configuration */
 11488                        ;	UINT n, nlen, nent;
 11489                        ;	BYTE sn[12], sum;
 11490                        ;
 11491                        ;	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) retur
                    n FR_INVALID_NAME; /* Check name validity */
  Sat Jul 10 2021  1:15                                                Page 222


 11492             00000000   res_1	set	0
 11493             00000002   fs_1	set	2
 11494             00000006   n_1	set	6
 11495             00000008   nlen_1	set	8
 11496             0000000A   nent_1	set	10
 11497             0000000C   sn_1	set	12
 11498             00000018   sum_1	set	24
 11499                        	.sym	res,0,5,1,16
 11500                        	.sym	fs,2,138,1,32,72
 11501                        	.sym	n,6,16,1,16
 11502                        	.sym	nlen,8,16,1,16
 11503                        	.sym	nent,10,16,1,16
 11504                        	.sym	sn,12,110,1,0,12
 11505                        	.sym	sum,24,14,1,8
 11506                        	.sym	dp,4,138,6,32,75
 11507 08:2850: A7 29        	lda	[<L452+dp_0]
 11508 08:2852: 85 0F        	sta	<L453+fs_1
 11509 08:2854: A0 02 00     	ldy	#$2
 11510 08:2857: B7 29        	lda	[<L452+dp_0],Y
 11511 08:2859: 85 11        	sta	<L453+fs_1+2
 11512                        	.line	2774
 11513 08:285B: E2 20        	sep	#$20
 11514                        	longa	off
 11515 08:285D: A0 2B 00     	ldy	#$2b
 11516 08:2860: B7 29        	lda	[<L452+dp_0],Y
 11517 08:2862: 29 A0        	and	#<$a0
 11518 08:2864: C2 20        	rep	#$20
 11519                        	longa	on
 11520 08:2866: D0 03        	bne	L455
 11521 08:2868: 82 15 00     	brl	L10219
 11522                        L455:
 11523                        	.line	2774
 11524 08:286B: A9 06 00     	lda	#$6
 11525                        L456:
 11526 08:286E: A8           	tay
 11527 08:286F: A5 27        	lda	<L452+2
 11528 08:2871: 85 2B        	sta	<L452+2+4
 11529 08:2873: A5 26        	lda	<L452+1
 11530 08:2875: 85 2A        	sta	<L452+1+4
 11531 08:2877: 2B           	pld
 11532 08:2878: 3B           	tsc
 11533 08:2879: 18           	clc
 11534 08:287A: 69 29 00     	adc	#L452+4
 11535 08:287D: 1B           	tcs
 11536 08:287E: 98           	tya
 11537 08:287F: 6B           	rtl
 11538                        ;	for (nlen = 0; fs->lfnbuf[nlen]; nlen++); /* Get
                     lfn length */
 11539                        L10219:
 11540                        	.line	2775
 11541 08:2880: 64 15        	stz	<L453+nlen_1
 11542 08:2882: 82 02 00     	brl	L10223
 11543                        L10222:
 11544                        	.line	2775
 11545                        L10220:
 11546 08:2885: E6 15        	inc	<L453+nlen_1
 11547                        L10223:
 11548 08:2887: A5 15        	lda	<L453+nlen_1
  Sat Jul 10 2021  1:15                                                Page 223


 11549 08:2889: 85 05        	sta	<R1
 11550 08:288B: 64 07        	stz	<R1+2
 11551 08:288D: D4 07        	pei	<R1+2
 11552 08:288F: D4 05        	pei	<R1
 11553 08:2891: A9 01 00     	lda	#$1
 11554                        	xref	~~~lasl
 11555 08:2894: 22 xx xx xx  	jsl	~~~lasl
 11556 08:2898: 85 01        	sta	<R0
 11557 08:289A: 86 03        	stx	<R0+2
 11558 08:289C: 18           	clc
 11559 08:289D: A0 0B 00     	ldy	#$b
 11560 08:28A0: B7 0F        	lda	[<L453+fs_1],Y
 11561 08:28A2: 65 01        	adc	<R0
 11562 08:28A4: 85 09        	sta	<R2
 11563 08:28A6: A0 0D 00     	ldy	#$d
 11564 08:28A9: B7 0F        	lda	[<L453+fs_1],Y
 11565 08:28AB: 65 03        	adc	<R0+2
 11566 08:28AD: 85 0B        	sta	<R2+2
 11567 08:28AF: A7 09        	lda	[<R2]
 11568 08:28B1: F0 03        	beq	L457
 11569 08:28B3: 82 CF FF     	brl	L10222
 11570                        L457:
 11571                        L10221:
 11572                        ;
 11573                        ;#if FF_FS_EXFAT
 11574                        ;	if (fs->fs_type == FS_EXFAT)
 11575                        ;	{ /* On the exFAT volume */
 11576                        ;		nent = (nlen + 14) / 15 + 2; /* Number o
                    f entries to allocate (85+C0+C1s) */
 11577                        ;		res = dir_alloc(dp, nent); /* Allocate d
                    irectory entries */
 11578                        ;		if (res != FR_OK) return res;
 11579                        ;		dp->blk_ofs = dp->dptr - SZDIRE * (nent 
                    - 1); /* Set the allocated entry block offset */
 11580                        ;
 11581                        ;		if (dp->obj.stat & 4)
 11582                        ;		{ /* Has the directory been stretched by
                     new allocation? */
 11583                        ;			dp->obj.stat &= ~4;
 11584                        ;			res = fill_first_frag(&dp->obj);
                     /* Fill the first fragment on the FAT if needed */
 11585                        ;			if (res != FR_OK) return res;
 11586                        ;			res = fill_last_frag(&dp->obj, d
                    p->clust, 0xFFFFFFFF); /* Fill the last fragment on the FAT 
                    if needed */
 11587                        ;			if (res != FR_OK) return res;
 11588                        ;			if (dp->obj.sclust != 0)
 11589                        ;			{ /* Is it a sub-directory? */
 11590                        ;				DIR dj;
 11591                        ;
 11592                        ;				res = load_obj_xdir(&dj,
                     &dp->obj); /* Load the object status */
 11593                        ;				if (res != FR_OK) return
                     res;
 11594                        ;				dp->obj.objsize += (DWOR
                    D)fs->csize * SS(fs); /* Increase the directory size by clus
                    ter size */
 11595                        ;				st_qword(fs->dirbuf + XD
  Sat Jul 10 2021  1:15                                                Page 224


                    IR_FileSize, dp->obj.objsize);
 11596                        ;				st_qword(fs->dirbuf + XD
                    IR_ValidFileSize, dp->obj.objsize);
 11597                        ;				fs->dirbuf[XDIR_GenFlags
                    ] = dp->obj.stat | 1; /* Update the allocation status */
 11598                        ;				res = store_xdir(&dj); /
                    * Store the object status */
 11599                        ;				if (res != FR_OK) return
                     res;
 11600                        ;			}
 11601                        ;		}
 11602                        ;
 11603                        ;		create_xdir(fs->dirbuf, fs->lfnbuf); /* 
                    Create on-memory directory block to be written later */
 11604                        ;		return FR_OK;
 11605                        ;	}
 11606                        ;#endif
 11607                        ;	/* On the FAT/FAT32 volume */
 11608                        ;	mem_cpy(sn, dp->fn, 12);
 11609                        	.line	2812
 11610 08:28B6: F4 0C 00     	pea	#<$c
 11611 08:28B9: 18           	clc
 11612 08:28BA: A9 20 00     	lda	#$20
 11613 08:28BD: 65 29        	adc	<L452+dp_0
 11614 08:28BF: 85 01        	sta	<R0
 11615 08:28C1: A9 00 00     	lda	#$0
 11616 08:28C4: 65 2B        	adc	<L452+dp_0+2
 11617 08:28C6: 85 03        	sta	<R0+2
 11618 08:28C8: D4 03        	pei	<R0+2
 11619 08:28CA: D4 01        	pei	<R0
 11620 08:28CC: F4 00 00     	pea	#0
 11621 08:28CF: 18           	clc
 11622 08:28D0: 7B           	tdc
 11623 08:28D1: 69 19 00     	adc	#<L453+sn_1
 11624 08:28D4: 48           	pha
 11625 08:28D5: 22 93 01 08  	jsl	~~mem_cpy
 11626                        ;	if (sn[NSFLAG] & NS_LOSS)
 11627                        	.line	2813
 11628                        ;	{ /* When LFN is out of 8.3 format, generate a n
                    umbered name */
 11629 08:28D9: E2 20        	sep	#$20
 11630                        	longa	off
 11631 08:28DB: A5 24        	lda	<L453+sn_1+11
 11632 08:28DD: 29 01        	and	#<$1
 11633 08:28DF: C2 20        	rep	#$20
 11634                        	longa	on
 11635 08:28E1: D0 03        	bne	L458
 11636 08:28E3: 82 85 00     	brl	L10224
 11637                        L458:
 11638                        	.line	2814
 11639                        ;		dp->fn[NSFLAG] = NS_NOLFN; /* Find only 
                    SFN */
 11640                        	.line	2815
 11641 08:28E6: E2 20        	sep	#$20
 11642                        	longa	off
 11643 08:28E8: A9 40        	lda	#$40
 11644 08:28EA: A0 2B 00     	ldy	#$2b
 11645 08:28ED: 97 29        	sta	[<L452+dp_0],Y
  Sat Jul 10 2021  1:15                                                Page 225


 11646 08:28EF: C2 20        	rep	#$20
 11647                        	longa	on
 11648                        ;		for (n = 1; n < 100; n++)
 11649                        	.line	2816
 11650 08:28F1: A9 01 00     	lda	#$1
 11651 08:28F4: 85 13        	sta	<L453+n_1
 11652                        L10227:
 11653                        ;		{
 11654                        	.line	2817
 11655                        ;			gen_numname(dp->fn, sn, fs->lfnb
                    uf, n); /* Generate a numbered name */
 11656                        	.line	2818
 11657 08:28F6: D4 13        	pei	<L453+n_1
 11658 08:28F8: A0 0D 00     	ldy	#$d
 11659 08:28FB: B7 0F        	lda	[<L453+fs_1],Y
 11660 08:28FD: 48           	pha
 11661 08:28FE: A0 0B 00     	ldy	#$b
 11662 08:2901: B7 0F        	lda	[<L453+fs_1],Y
 11663 08:2903: 48           	pha
 11664 08:2904: F4 00 00     	pea	#0
 11665 08:2907: 18           	clc
 11666 08:2908: 7B           	tdc
 11667 08:2909: 69 19 00     	adc	#<L453+sn_1
 11668 08:290C: 48           	pha
 11669 08:290D: 18           	clc
 11670 08:290E: A9 20 00     	lda	#$20
 11671 08:2911: 65 29        	adc	<L452+dp_0
 11672 08:2913: 85 01        	sta	<R0
 11673 08:2915: A9 00 00     	lda	#$0
 11674 08:2918: 65 2B        	adc	<L452+dp_0+2
 11675 08:291A: 85 03        	sta	<R0+2
 11676 08:291C: D4 03        	pei	<R0+2
 11677 08:291E: D4 01        	pei	<R0
 11678 08:2920: 22 C3 21 08  	jsl	~~gen_numname
 11679                        ;			res = dir_find(dp); /* Check if 
                    the name collides with existing SFN */
 11680                        	.line	2819
 11681 08:2924: D4 2B        	pei	<L452+dp_0+2
 11682 08:2926: D4 29        	pei	<L452+dp_0
 11683 08:2928: 22 CC 25 08  	jsl	~~dir_find
 11684 08:292C: 85 0D        	sta	<L453+res_1
 11685                        ;			if (res != FR_OK) break;
 11686                        	.line	2820
 11687 08:292E: A5 0D        	lda	<L453+res_1
 11688 08:2930: F0 03        	beq	L459
 11689 08:2932: 82 0C 00     	brl	L10226
 11690                        L459:
 11691                        ;		}
 11692                        	.line	2821
 11693                        L10225:
 11694 08:2935: E6 13        	inc	<L453+n_1
 11695 08:2937: A5 13        	lda	<L453+n_1
 11696 08:2939: C9 64 00     	cmp	#<$64
 11697 08:293C: B0 03        	bcs	L460
 11698 08:293E: 82 B5 FF     	brl	L10227
 11699                        L460:
 11700                        L10226:
 11701                        ;		if (n == 100) return FR_DENIED; /* Abort
  Sat Jul 10 2021  1:15                                                Page 226


                     if too many collisions */
 11702                        	.line	2822
 11703 08:2941: A5 13        	lda	<L453+n_1
 11704 08:2943: C9 64 00     	cmp	#<$64
 11705 08:2946: F0 03        	beq	L461
 11706 08:2948: 82 06 00     	brl	L10228
 11707                        L461:
 11708                        	.line	2822
 11709 08:294B: A9 07 00     	lda	#$7
 11710 08:294E: 82 1D FF     	brl	L456
 11711                        ;		if (res != FR_NO_FILE) return res; /* Ab
                    ort if the result is other than 'not collided' */
 11712                        L10228:
 11713                        	.line	2823
 11714 08:2951: A5 0D        	lda	<L453+res_1
 11715 08:2953: C9 04 00     	cmp	#<$4
 11716 08:2956: D0 03        	bne	L462
 11717 08:2958: 82 05 00     	brl	L10229
 11718                        L462:
 11719                        	.line	2823
 11720 08:295B: A5 0D        	lda	<L453+res_1
 11721 08:295D: 82 0E FF     	brl	L456
 11722                        ;		dp->fn[NSFLAG] = sn[NSFLAG];
 11723                        L10229:
 11724                        	.line	2824
 11725 08:2960: E2 20        	sep	#$20
 11726                        	longa	off
 11727 08:2962: A5 24        	lda	<L453+sn_1+11
 11728 08:2964: A0 2B 00     	ldy	#$2b
 11729 08:2967: 97 29        	sta	[<L452+dp_0],Y
 11730 08:2969: C2 20        	rep	#$20
 11731                        	longa	on
 11732                        ;	}
 11733                        	.line	2825
 11734                        ;
 11735                        ;	/* Create an SFN with/without LFNs. */
 11736                        ;	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 
                    + 1 : 1; /* Number of entries to allocate */
 11737                        L10224:
 11738                        	.line	2828
 11739 08:296B: E2 20        	sep	#$20
 11740                        	longa	off
 11741 08:296D: A5 24        	lda	<L453+sn_1+11
 11742 08:296F: 29 02        	and	#<$2
 11743 08:2971: C2 20        	rep	#$20
 11744                        	longa	on
 11745 08:2973: D0 03        	bne	L464
 11746 08:2975: 82 18 00     	brl	L463
 11747                        L464:
 11748 08:2978: 18           	clc
 11749 08:2979: A9 0C 00     	lda	#$c
 11750 08:297C: 65 15        	adc	<L453+nlen_1
 11751 08:297E: 85 01        	sta	<R0
 11752 08:2980: A5 01        	lda	<R0
 11753 08:2982: A2 0D 00     	ldx	#<$d
 11754                        	xref	~~~udv
 11755 08:2985: 22 xx xx xx  	jsl	~~~udv
 11756 08:2989: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 227


 11757 08:298B: A5 01        	lda	<R0
 11758 08:298D: 1A           	ina
 11759 08:298E: 80 03        	bra	L465
 11760                        L463:
 11761 08:2990: A9 01 00     	lda	#$1
 11762                        L465:
 11763 08:2993: 85 17        	sta	<L453+nent_1
 11764                        ;	res = dir_alloc(dp, nent); /* Allocate entries *
                    /
 11765                        	.line	2829
 11766 08:2995: D4 17        	pei	<L453+nent_1
 11767 08:2997: D4 2B        	pei	<L452+dp_0+2
 11768 08:2999: D4 29        	pei	<L452+dp_0
 11769 08:299B: 22 53 1C 08  	jsl	~~dir_alloc
 11770 08:299F: 85 0D        	sta	<L453+res_1
 11771                        ;	if (res == FR_OK && --nent)
 11772                        	.line	2830
 11773                        ;	{ /* Set LFN entry if needed */
 11774 08:29A1: A5 0D        	lda	<L453+res_1
 11775 08:29A3: F0 03        	beq	L466
 11776 08:29A5: 82 C2 00     	brl	L10230
 11777                        L466:
 11778 08:29A8: C6 17        	dec	<L453+nent_1
 11779 08:29AA: A5 17        	lda	<L453+nent_1
 11780 08:29AC: D0 03        	bne	L467
 11781 08:29AE: 82 B9 00     	brl	L10230
 11782                        L467:
 11783                        	.line	2831
 11784                        ;		res = dir_sdi(dp, dp->dptr - nent * SZDI
                    RE);
 11785                        	.line	2832
 11786 08:29B1: A5 17        	lda	<L453+nent_1
 11787 08:29B3: 0A           	asl	A
 11788 08:29B4: 0A           	asl	A
 11789 08:29B5: 0A           	asl	A
 11790 08:29B6: 0A           	asl	A
 11791 08:29B7: 0A           	asl	A
 11792 08:29B8: 85 01        	sta	<R0
 11793 08:29BA: A5 01        	lda	<R0
 11794 08:29BC: 85 01        	sta	<R0
 11795 08:29BE: 64 03        	stz	<R0+2
 11796 08:29C0: 38           	sec
 11797 08:29C1: A0 10 00     	ldy	#$10
 11798 08:29C4: B7 29        	lda	[<L452+dp_0],Y
 11799 08:29C6: E5 01        	sbc	<R0
 11800 08:29C8: 85 05        	sta	<R1
 11801 08:29CA: A0 12 00     	ldy	#$12
 11802 08:29CD: B7 29        	lda	[<L452+dp_0],Y
 11803 08:29CF: E5 03        	sbc	<R0+2
 11804 08:29D1: 85 07        	sta	<R1+2
 11805 08:29D3: D4 07        	pei	<R1+2
 11806 08:29D5: D4 05        	pei	<R1
 11807 08:29D7: D4 2B        	pei	<L452+dp_0+2
 11808 08:29D9: D4 29        	pei	<L452+dp_0
 11809 08:29DB: 22 60 17 08  	jsl	~~dir_sdi
 11810 08:29DF: 85 0D        	sta	<L453+res_1
 11811                        ;		if (res == FR_OK)
 11812                        	.line	2833
  Sat Jul 10 2021  1:15                                                Page 228


 11813                        ;		{
 11814 08:29E1: A5 0D        	lda	<L453+res_1
 11815 08:29E3: F0 03        	beq	L468
 11816 08:29E5: 82 82 00     	brl	L10231
 11817                        L468:
 11818                        	.line	2834
 11819                        ;			sum = sum_sfn(dp->fn); /* Checks
                    um value of the SFN tied to the LFN */
 11820                        	.line	2835
 11821 08:29E8: 18           	clc
 11822 08:29E9: A9 20 00     	lda	#$20
 11823 08:29EC: 65 29        	adc	<L452+dp_0
 11824 08:29EE: 85 01        	sta	<R0
 11825 08:29F0: A9 00 00     	lda	#$0
 11826 08:29F3: 65 2B        	adc	<L452+dp_0+2
 11827 08:29F5: 85 03        	sta	<R0+2
 11828 08:29F7: D4 03        	pei	<R0+2
 11829 08:29F9: D4 01        	pei	<R0
 11830 08:29FB: 22 34 23 08  	jsl	~~sum_sfn
 11831 08:29FF: E2 20        	sep	#$20
 11832                        	longa	off
 11833 08:2A01: 85 25        	sta	<L453+sum_1
 11834 08:2A03: C2 20        	rep	#$20
 11835                        	longa	on
 11836                        ;			do
 11837                        	.line	2836
 11838                        L10234:
 11839                        ;			{ /* Store LFN entries in bottom
                     first */
 11840                        	.line	2837
 11841                        ;				res = move_window(fs, dp
                    ->sect);
 11842                        	.line	2838
 11843 08:2A05: A0 1A 00     	ldy	#$1a
 11844 08:2A08: B7 29        	lda	[<L452+dp_0],Y
 11845 08:2A0A: 48           	pha
 11846 08:2A0B: A0 18 00     	ldy	#$18
 11847 08:2A0E: B7 29        	lda	[<L452+dp_0],Y
 11848 08:2A10: 48           	pha
 11849 08:2A11: D4 11        	pei	<L453+fs_1+2
 11850 08:2A13: D4 0F        	pei	<L453+fs_1
 11851 08:2A15: 22 C1 08 08  	jsl	~~move_window
 11852 08:2A19: 85 0D        	sta	<L453+res_1
 11853                        ;				if (res != FR_OK) break;
 11854                        	.line	2839
 11855 08:2A1B: A5 0D        	lda	<L453+res_1
 11856 08:2A1D: F0 03        	beq	L469
 11857 08:2A1F: 82 48 00     	brl	L10233
 11858                        L469:
 11859                        ;				put_lfn(fs->lfnbuf, dp->
                    dir, (BYTE)nent, sum);
 11860                        	.line	2840
 11861 08:2A22: D4 25        	pei	<L453+sum_1
 11862 08:2A24: D4 17        	pei	<L453+nent_1
 11863 08:2A26: A0 1E 00     	ldy	#$1e
 11864 08:2A29: B7 29        	lda	[<L452+dp_0],Y
 11865 08:2A2B: 48           	pha
 11866 08:2A2C: A0 1C 00     	ldy	#$1c
  Sat Jul 10 2021  1:15                                                Page 229


 11867 08:2A2F: B7 29        	lda	[<L452+dp_0],Y
 11868 08:2A31: 48           	pha
 11869 08:2A32: A0 0D 00     	ldy	#$d
 11870 08:2A35: B7 0F        	lda	[<L453+fs_1],Y
 11871 08:2A37: 48           	pha
 11872 08:2A38: A0 0B 00     	ldy	#$b
 11873 08:2A3B: B7 0F        	lda	[<L453+fs_1],Y
 11874 08:2A3D: 48           	pha
 11875 08:2A3E: 22 A2 20 08  	jsl	~~put_lfn
 11876                        ;				fs->wflag = 1;
 11877                        	.line	2841
 11878 08:2A42: E2 20        	sep	#$20
 11879                        	longa	off
 11880 08:2A44: A9 01        	lda	#$1
 11881 08:2A46: A0 03 00     	ldy	#$3
 11882 08:2A49: 97 0F        	sta	[<L453+fs_1],Y
 11883 08:2A4B: C2 20        	rep	#$20
 11884                        	longa	on
 11885                        ;				res = dir_next(dp, 0); /
                    * Next entry */
 11886                        	.line	2842
 11887 08:2A4D: F4 00 00     	pea	#<$0
 11888 08:2A50: D4 2B        	pei	<L452+dp_0+2
 11889 08:2A52: D4 29        	pei	<L452+dp_0
 11890 08:2A54: 22 9F 19 08  	jsl	~~dir_next
 11891 08:2A58: 85 0D        	sta	<L453+res_1
 11892                        ;			}while (res == FR_OK && --nent);
 11893                        	.line	2843
 11894                        L10232:
 11895 08:2A5A: A5 0D        	lda	<L453+res_1
 11896 08:2A5C: F0 03        	beq	L471
 11897 08:2A5E: 82 09 00     	brl	L470
 11898                        L471:
 11899 08:2A61: C6 17        	dec	<L453+nent_1
 11900 08:2A63: A5 17        	lda	<L453+nent_1
 11901 08:2A65: F0 03        	beq	L472
 11902 08:2A67: 82 9B FF     	brl	L10234
 11903                        L472:
 11904                        L470:
 11905                        L10233:
 11906                        ;		}
 11907                        	.line	2844
 11908                        ;	}
 11909                        L10231:
 11910                        	.line	2845
 11911                        ;
 11912                        ;#else	/* Non LFN configuration */
 11913                        ;	res = dir_alloc(dp, 1); /* Allocate an entry for
                     SFN */
 11914                        ;
 11915                        ;#endif
 11916                        ;
 11917                        ;	/* Set SFN entry */
 11918                        ;	if (res == FR_OK)
 11919                        L10230:
 11920                        	.line	2853
 11921                        ;	{
 11922 08:2A6A: A5 0D        	lda	<L453+res_1
  Sat Jul 10 2021  1:15                                                Page 230


 11923 08:2A6C: F0 03        	beq	L473
 11924 08:2A6E: 82 86 00     	brl	L10235
 11925                        L473:
 11926                        	.line	2854
 11927                        ;		res = move_window(fs, dp->sect);
 11928                        	.line	2855
 11929 08:2A71: A0 1A 00     	ldy	#$1a
 11930 08:2A74: B7 29        	lda	[<L452+dp_0],Y
 11931 08:2A76: 48           	pha
 11932 08:2A77: A0 18 00     	ldy	#$18
 11933 08:2A7A: B7 29        	lda	[<L452+dp_0],Y
 11934 08:2A7C: 48           	pha
 11935 08:2A7D: D4 11        	pei	<L453+fs_1+2
 11936 08:2A7F: D4 0F        	pei	<L453+fs_1
 11937 08:2A81: 22 C1 08 08  	jsl	~~move_window
 11938 08:2A85: 85 0D        	sta	<L453+res_1
 11939                        ;		if (res == FR_OK)
 11940                        	.line	2856
 11941                        ;		{
 11942 08:2A87: A5 0D        	lda	<L453+res_1
 11943 08:2A89: F0 03        	beq	L474
 11944 08:2A8B: 82 69 00     	brl	L10236
 11945                        L474:
 11946                        	.line	2857
 11947                        ;			mem_set(dp->dir, 0, SZDIRE); /* 
                    Clean the entry */
 11948                        	.line	2858
 11949 08:2A8E: F4 20 00     	pea	#<$20
 11950 08:2A91: F4 00 00     	pea	#<$0
 11951 08:2A94: A0 1E 00     	ldy	#$1e
 11952 08:2A97: B7 29        	lda	[<L452+dp_0],Y
 11953 08:2A99: 48           	pha
 11954 08:2A9A: A0 1C 00     	ldy	#$1c
 11955 08:2A9D: B7 29        	lda	[<L452+dp_0],Y
 11956 08:2A9F: 48           	pha
 11957 08:2AA0: 22 DF 01 08  	jsl	~~mem_set
 11958                        ;			mem_cpy(dp->dir + DIR_Name, dp->
                    fn, 11); /* Put SFN */
 11959                        	.line	2859
 11960 08:2AA4: F4 0B 00     	pea	#<$b
 11961 08:2AA7: 18           	clc
 11962 08:2AA8: A9 20 00     	lda	#$20
 11963 08:2AAB: 65 29        	adc	<L452+dp_0
 11964 08:2AAD: 85 01        	sta	<R0
 11965 08:2AAF: A9 00 00     	lda	#$0
 11966 08:2AB2: 65 2B        	adc	<L452+dp_0+2
 11967 08:2AB4: 85 03        	sta	<R0+2
 11968 08:2AB6: D4 03        	pei	<R0+2
 11969 08:2AB8: D4 01        	pei	<R0
 11970 08:2ABA: A0 1E 00     	ldy	#$1e
 11971 08:2ABD: B7 29        	lda	[<L452+dp_0],Y
 11972 08:2ABF: 48           	pha
 11973 08:2AC0: A0 1C 00     	ldy	#$1c
 11974 08:2AC3: B7 29        	lda	[<L452+dp_0],Y
 11975 08:2AC5: 48           	pha
 11976 08:2AC6: 22 93 01 08  	jsl	~~mem_cpy
 11977                        ;#if FF_USE_LFN
 11978                        ;			dp->dir[DIR_NTres] = dp->fn[NSFL
  Sat Jul 10 2021  1:15                                                Page 231


                    AG] & (NS_BODY | NS_EXT); /* Put NT flag */
 11979                        	.line	2861
 11980 08:2ACA: A0 1C 00     	ldy	#$1c
 11981 08:2ACD: B7 29        	lda	[<L452+dp_0],Y
 11982 08:2ACF: 85 01        	sta	<R0
 11983 08:2AD1: A0 1E 00     	ldy	#$1e
 11984 08:2AD4: B7 29        	lda	[<L452+dp_0],Y
 11985 08:2AD6: 85 03        	sta	<R0+2
 11986 08:2AD8: E2 20        	sep	#$20
 11987                        	longa	off
 11988 08:2ADA: A0 2B 00     	ldy	#$2b
 11989 08:2ADD: B7 29        	lda	[<L452+dp_0],Y
 11990 08:2ADF: 29 18        	and	#<$18
 11991 08:2AE1: C2 20        	rep	#$20
 11992                        	longa	on
 11993 08:2AE3: E2 20        	sep	#$20
 11994                        	longa	off
 11995 08:2AE5: A0 0C 00     	ldy	#$c
 11996 08:2AE8: 97 01        	sta	[<R0],Y
 11997 08:2AEA: C2 20        	rep	#$20
 11998                        	longa	on
 11999                        ;#endif
 12000                        ;			fs->wflag = 1;
 12001                        	.line	2863
 12002 08:2AEC: E2 20        	sep	#$20
 12003                        	longa	off
 12004 08:2AEE: A9 01        	lda	#$1
 12005 08:2AF0: A0 03 00     	ldy	#$3
 12006 08:2AF3: 97 0F        	sta	[<L453+fs_1],Y
 12007 08:2AF5: C2 20        	rep	#$20
 12008                        	longa	on
 12009                        ;		}
 12010                        	.line	2864
 12011                        ;	}
 12012                        L10236:
 12013                        	.line	2865
 12014                        ;
 12015                        ;	return res;
 12016                        L10235:
 12017                        	.line	2867
 12018 08:2AF7: A5 0D        	lda	<L453+res_1
 12019 08:2AF9: 82 72 FD     	brl	L456
 12020                        ;}
 12021                        	.line	2868
 12022                        	.endblock	2868
 12023             00000025   L452	equ	37
 12024             0000000D   L453	equ	13
 12025 08:2AFC:              	ends
 12026                        	efunc
 12027                        	.endfunc	2868,13,37
 12028                        	.line	2868
 12029                        ;
 12030                        ;#endif /* !FF_FS_READONLY */
 12031                        ;
 12032                        ;#if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
 12033                        ;/*-----------------------------------------------
                    ------------------------*/
 12034                        ;/* Remove an object from the directory           
  Sat Jul 10 2021  1:15                                                Page 232


                                            */
 12035                        ;/*-----------------------------------------------
                    ------------------------*/
 12036                        ;
 12037                        ;static FRESULT dir_remove( /* FR_OK:Succeeded, FR
                    _DISK_ERR:A disk error */
 12038                        ;DIR* dp /* Directory object pointing the entry to
                     be removed */
 12039                        ;)
 12040                        ;{
 12041                        	.line	2877
 12042                        	.line	2880
 12043                        	FFDOS
 12044                        	func
 12045                        	.function	2880
 12046                        ~~dir_remove:
 12047                        	longa	on
 12048                        	longi	on
 12049 08:2AFC: 3B           	tsc
 12050 08:2AFD: 38           	sec
 12051 08:2AFE: E9 0E 00     	sbc	#L475
 12052 08:2B01: 1B           	tcs
 12053 08:2B02: 0B           	phd
 12054 08:2B03: 5B           	tcd
 12055             00000004   dp_0	set	4
 12056                        	.block	2880
 12057                        ;	FRESULT res;
 12058                        ;	FATFS *fs = dp->obj.fs;
 12059                        ;#if FF_USE_LFN		/* LFN configuration */
 12060                        ;	DWORD last = dp->dptr;
 12061                        ;
 12062                        ;	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_
                    sdi(dp, dp->blk_ofs); /* Goto top of the entry block if LFN 
                    is exist */
 12063             00000000   res_1	set	0
 12064             00000002   fs_1	set	2
 12065             00000006   last_1	set	6
 12066                        	.sym	res,0,5,1,16
 12067                        	.sym	fs,2,138,1,32,72
 12068                        	.sym	last,6,18,1,32
 12069                        	.sym	dp,4,138,6,32,75
 12070 08:2B04: A7 12        	lda	[<L475+dp_0]
 12071 08:2B06: 85 07        	sta	<L476+fs_1
 12072 08:2B08: A0 02 00     	ldy	#$2
 12073 08:2B0B: B7 12        	lda	[<L475+dp_0],Y
 12074 08:2B0D: 85 09        	sta	<L476+fs_1+2
 12075 08:2B0F: A0 10 00     	ldy	#$10
 12076 08:2B12: B7 12        	lda	[<L475+dp_0],Y
 12077 08:2B14: 85 0B        	sta	<L476+last_1
 12078 08:2B16: A0 12 00     	ldy	#$12
 12079 08:2B19: B7 12        	lda	[<L475+dp_0],Y
 12080 08:2B1B: 85 0D        	sta	<L476+last_1+2
 12081                        	.line	2886
 12082 08:2B1D: A0 2C 00     	ldy	#$2c
 12083 08:2B20: B7 12        	lda	[<L475+dp_0],Y
 12084 08:2B22: C9 FF FF     	cmp	#<$ffffffff
 12085 08:2B25: D0 08        	bne	L479
 12086 08:2B27: A0 2E 00     	ldy	#$2e
  Sat Jul 10 2021  1:15                                                Page 233


 12087 08:2B2A: B7 12        	lda	[<L475+dp_0],Y
 12088 08:2B2C: C9 FF FF     	cmp	#^$ffffffff
 12089                        L479:
 12090 08:2B2F: F0 03        	beq	L480
 12091 08:2B31: 82 05 00     	brl	L478
 12092                        L480:
 12093 08:2B34: A9 00 00     	lda	#$0
 12094 08:2B37: 80 14        	bra	L481
 12095                        L478:
 12096 08:2B39: A0 2E 00     	ldy	#$2e
 12097 08:2B3C: B7 12        	lda	[<L475+dp_0],Y
 12098 08:2B3E: 48           	pha
 12099 08:2B3F: A0 2C 00     	ldy	#$2c
 12100 08:2B42: B7 12        	lda	[<L475+dp_0],Y
 12101 08:2B44: 48           	pha
 12102 08:2B45: D4 14        	pei	<L475+dp_0+2
 12103 08:2B47: D4 12        	pei	<L475+dp_0
 12104 08:2B49: 22 60 17 08  	jsl	~~dir_sdi
 12105                        L481:
 12106 08:2B4D: 85 05        	sta	<L476+res_1
 12107                        ;	if (res == FR_OK)
 12108                        	.line	2887
 12109                        ;	{
 12110 08:2B4F: A5 05        	lda	<L476+res_1
 12111 08:2B51: F0 03        	beq	L482
 12112 08:2B53: 82 9F 00     	brl	L10237
 12113                        L482:
 12114                        	.line	2888
 12115                        ;		do
 12116                        	.line	2889
 12117                        L10240:
 12118                        ;		{
 12119                        	.line	2890
 12120                        ;			res = move_window(fs, dp->sect);
 12121                        	.line	2891
 12122 08:2B56: A0 1A 00     	ldy	#$1a
 12123 08:2B59: B7 12        	lda	[<L475+dp_0],Y
 12124 08:2B5B: 48           	pha
 12125 08:2B5C: A0 18 00     	ldy	#$18
 12126 08:2B5F: B7 12        	lda	[<L475+dp_0],Y
 12127 08:2B61: 48           	pha
 12128 08:2B62: D4 09        	pei	<L476+fs_1+2
 12129 08:2B64: D4 07        	pei	<L476+fs_1
 12130 08:2B66: 22 C1 08 08  	jsl	~~move_window
 12131 08:2B6A: 85 05        	sta	<L476+res_1
 12132                        ;			if (res != FR_OK) break;
 12133                        	.line	2892
 12134 08:2B6C: A5 05        	lda	<L476+res_1
 12135 08:2B6E: F0 03        	beq	L483
 12136 08:2B70: 82 73 00     	brl	L10239
 12137                        L483:
 12138                        ;			if (FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT)
 12139                        	.line	2893
 12140                        ;			{ /* On the exFAT volume */
 12141 08:2B73: 82 28 00     	brl	L10241
 12142 08:2B76: E2 20        	sep	#$20
 12143                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 234


 12144 08:2B78: A7 07        	lda	[<L476+fs_1]
 12145 08:2B7A: C9 04        	cmp	#<$4
 12146 08:2B7C: C2 20        	rep	#$20
 12147                        	longa	on
 12148 08:2B7E: F0 03        	beq	L484
 12149 08:2B80: 82 1B 00     	brl	L10241
 12150                        L484:
 12151                        	.line	2894
 12152                        ;				dp->dir[XDIR_Type] &= 0x
                    7F; /* Clear the entry InUse flag. */
 12153                        	.line	2895
 12154 08:2B83: A0 1C 00     	ldy	#$1c
 12155 08:2B86: B7 12        	lda	[<L475+dp_0],Y
 12156 08:2B88: 85 01        	sta	<R0
 12157 08:2B8A: A0 1E 00     	ldy	#$1e
 12158 08:2B8D: B7 12        	lda	[<L475+dp_0],Y
 12159 08:2B8F: 85 03        	sta	<R0+2
 12160 08:2B91: E2 20        	sep	#$20
 12161                        	longa	off
 12162 08:2B93: A7 01        	lda	[<R0]
 12163 08:2B95: 29 7F        	and	#<$7f
 12164 08:2B97: 87 01        	sta	[<R0]
 12165 08:2B99: C2 20        	rep	#$20
 12166                        	longa	on
 12167                        ;			}
 12168                        	.line	2896
 12169                        ;			else
 12170 08:2B9B: 82 16 00     	brl	L10242
 12171                        L10241:
 12172                        ;			{ /* On the FAT/FAT32 volume */
 12173                        	.line	2898
 12174                        ;				dp->dir[DIR_Name] = DDEM
                    ; /* Mark the entry 'deleted'. */
 12175                        	.line	2899
 12176 08:2B9E: A0 1C 00     	ldy	#$1c
 12177 08:2BA1: B7 12        	lda	[<L475+dp_0],Y
 12178 08:2BA3: 85 01        	sta	<R0
 12179 08:2BA5: A0 1E 00     	ldy	#$1e
 12180 08:2BA8: B7 12        	lda	[<L475+dp_0],Y
 12181 08:2BAA: 85 03        	sta	<R0+2
 12182 08:2BAC: E2 20        	sep	#$20
 12183                        	longa	off
 12184 08:2BAE: A9 E5        	lda	#$e5
 12185 08:2BB0: 87 01        	sta	[<R0]
 12186 08:2BB2: C2 20        	rep	#$20
 12187                        	longa	on
 12188                        ;			}
 12189                        	.line	2900
 12190                        L10242:
 12191                        ;			fs->wflag = 1;
 12192                        	.line	2901
 12193 08:2BB4: E2 20        	sep	#$20
 12194                        	longa	off
 12195 08:2BB6: A9 01        	lda	#$1
 12196 08:2BB8: A0 03 00     	ldy	#$3
 12197 08:2BBB: 97 07        	sta	[<L476+fs_1],Y
 12198 08:2BBD: C2 20        	rep	#$20
 12199                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 235


 12200                        ;			if (dp->dptr >= last) break; /* 
                    If reached last entry then all entries of the object has bee
                    n deleted. */
 12201                        	.line	2902
 12202 08:2BBF: A0 10 00     	ldy	#$10
 12203 08:2BC2: B7 12        	lda	[<L475+dp_0],Y
 12204 08:2BC4: C5 0B        	cmp	<L476+last_1
 12205 08:2BC6: A0 12 00     	ldy	#$12
 12206 08:2BC9: B7 12        	lda	[<L475+dp_0],Y
 12207 08:2BCB: E5 0D        	sbc	<L476+last_1+2
 12208 08:2BCD: 90 03        	bcc	L485
 12209 08:2BCF: 82 14 00     	brl	L10239
 12210                        L485:
 12211                        ;			res = dir_next(dp, 0); /* Next e
                    ntry */
 12212                        	.line	2903
 12213 08:2BD2: F4 00 00     	pea	#<$0
 12214 08:2BD5: D4 14        	pei	<L475+dp_0+2
 12215 08:2BD7: D4 12        	pei	<L475+dp_0
 12216 08:2BD9: 22 9F 19 08  	jsl	~~dir_next
 12217 08:2BDD: 85 05        	sta	<L476+res_1
 12218                        ;		}while (res == FR_OK);
 12219                        	.line	2904
 12220                        L10238:
 12221 08:2BDF: A5 05        	lda	<L476+res_1
 12222 08:2BE1: D0 03        	bne	L486
 12223 08:2BE3: 82 70 FF     	brl	L10240
 12224                        L486:
 12225                        L10239:
 12226                        ;		if (res == FR_NO_FILE) res = FR_INT_ERR;
 12227                        	.line	2905
 12228 08:2BE6: A5 05        	lda	<L476+res_1
 12229 08:2BE8: C9 04 00     	cmp	#<$4
 12230 08:2BEB: F0 03        	beq	L487
 12231 08:2BED: 82 05 00     	brl	L10243
 12232                        L487:
 12233                        	.line	2905
 12234 08:2BF0: A9 02 00     	lda	#$2
 12235 08:2BF3: 85 05        	sta	<L476+res_1
 12236                        ;	}
 12237                        L10243:
 12238                        	.line	2906
 12239                        ;#else			/* Non LFN configuration
                     */
 12240                        ;
 12241                        ;	res = move_window(fs, dp->sect);
 12242                        ;	if (res == FR_OK)
 12243                        ;	{
 12244                        ;		dp->dir[DIR_Name] = DDEM; /* Mark the en
                    try 'deleted'.*/
 12245                        ;		fs->wflag = 1;
 12246                        ;	}
 12247                        ;#endif
 12248                        ;
 12249                        ;	return res;
 12250                        L10237:
 12251                        	.line	2917
 12252 08:2BF5: A5 05        	lda	<L476+res_1
  Sat Jul 10 2021  1:15                                                Page 236


 12253                        L488:
 12254 08:2BF7: A8           	tay
 12255 08:2BF8: A5 10        	lda	<L475+2
 12256 08:2BFA: 85 14        	sta	<L475+2+4
 12257 08:2BFC: A5 0F        	lda	<L475+1
 12258 08:2BFE: 85 13        	sta	<L475+1+4
 12259 08:2C00: 2B           	pld
 12260 08:2C01: 3B           	tsc
 12261 08:2C02: 18           	clc
 12262 08:2C03: 69 12 00     	adc	#L475+4
 12263 08:2C06: 1B           	tcs
 12264 08:2C07: 98           	tya
 12265 08:2C08: 6B           	rtl
 12266                        ;}
 12267                        	.line	2918
 12268                        	.endblock	2918
 12269             0000000E   L475	equ	14
 12270             00000005   L476	equ	5
 12271 08:2C09:              	ends
 12272                        	efunc
 12273                        	.endfunc	2918,5,14
 12274                        	.line	2918
 12275                        ;
 12276                        ;#endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 
                    */
 12277                        ;
 12278                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
 12279                        ;/*-----------------------------------------------
                    ------------------------*/
 12280                        ;/* Get file information from directory entry     
                                            */
 12281                        ;/*-----------------------------------------------
                    ------------------------*/
 12282                        ;
 12283                        ;static void get_fileinfo(DIR* dp, /* Pointer to t
                    he directory object */
 12284                        ;FILINFO* fno /* Pointer to the file information t
                    o be filled */
 12285                        ;)
 12286                        ;{
 12287                        	.line	2927
 12288                        	.line	2930
 12289                        	FFDOS
 12290                        	func
 12291                        	.function	2930
 12292                        ~~get_fileinfo:
 12293                        	longa	on
 12294                        	longi	on
 12295 08:2C09: 3B           	tsc
 12296 08:2C0A: 38           	sec
 12297 08:2C0B: E9 25 00     	sbc	#L489
 12298 08:2C0E: 1B           	tcs
 12299 08:2C0F: 0B           	phd
 12300 08:2C10: 5B           	tcd
 12301             00000004   dp_0	set	4
 12302             00000008   fno_0	set	8
 12303                        	.block	2930
 12304                        ;	UINT si, di;
  Sat Jul 10 2021  1:15                                                Page 237


 12305                        ;#if FF_USE_LFN
 12306                        ;	BYTE lcf;
 12307                        ;	WCHAR wc, hs;
 12308                        ;	FATFS *fs = dp->obj.fs;
 12309                        ;#else
 12310                        ;	TCHAR c;
 12311                        ;#endif
 12312                        ;
 12313                        ;	fno->fname[0] = 0; /* Invaidate file info */
 12314             00000000   si_1	set	0
 12315             00000002   di_1	set	2
 12316             00000004   lcf_1	set	4
 12317             00000005   wc_1	set	5
 12318             00000007   hs_1	set	7
 12319             00000009   fs_1	set	9
 12320                        	.sym	si,0,16,1,16
 12321                        	.sym	di,2,16,1,16
 12322                        	.sym	lcf,4,14,1,8
 12323                        	.sym	wc,5,16,1,16
 12324                        	.sym	hs,7,16,1,16
 12325                        	.sym	fs,9,138,1,32,72
 12326                        	.sym	dp,4,138,6,32,75
 12327                        	.sym	fno,8,138,6,32,76
 12328 08:2C11: A7 29        	lda	[<L489+dp_0]
 12329 08:2C13: 85 22        	sta	<L490+fs_1
 12330 08:2C15: A0 02 00     	ldy	#$2
 12331 08:2C18: B7 29        	lda	[<L489+dp_0],Y
 12332 08:2C1A: 85 24        	sta	<L490+fs_1+2
 12333                        	.line	2940
 12334 08:2C1C: E2 20        	sep	#$20
 12335                        	longa	off
 12336 08:2C1E: A9 00        	lda	#$0
 12337 08:2C20: A0 16 00     	ldy	#$16
 12338 08:2C23: 97 2D        	sta	[<L489+fno_0],Y
 12339 08:2C25: C2 20        	rep	#$20
 12340                        	longa	on
 12341                        ;	if (dp->sect == 0)
 12342                        	.line	2941
 12343                        ;		return; /* Exit if read pointer has reac
                    hed end of directory */
 12344 08:2C27: A0 18 00     	ldy	#$18
 12345 08:2C2A: B7 29        	lda	[<L489+dp_0],Y
 12346 08:2C2C: A0 1A 00     	ldy	#$1a
 12347 08:2C2F: 17 29        	ora	[<L489+dp_0],Y
 12348 08:2C31: F0 03        	beq	L492
 12349 08:2C33: 82 10 00     	brl	L10244
 12350                        L492:
 12351                        	.line	2942
 12352                        L493:
 12353 08:2C36: A5 27        	lda	<L489+2
 12354 08:2C38: 85 2F        	sta	<L489+2+8
 12355 08:2C3A: A5 26        	lda	<L489+1
 12356 08:2C3C: 85 2E        	sta	<L489+1+8
 12357 08:2C3E: 2B           	pld
 12358 08:2C3F: 3B           	tsc
 12359 08:2C40: 18           	clc
 12360 08:2C41: 69 2D 00     	adc	#L489+8
 12361 08:2C44: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 238


 12362 08:2C45: 6B           	rtl
 12363                        ;
 12364                        ;#if FF_USE_LFN		/* LFN configuration */
 12365                        ;#if FF_FS_EXFAT
 12366                        ;	if (fs->fs_type == FS_EXFAT)
 12367                        ;	{ /* On the exFAT volume */
 12368                        ;		get_xfileinfo(fs->dirbuf, fno);
 12369                        ;		return;
 12370                        ;	}
 12371                        ;	else
 12372                        ;#endif
 12373                        ;	{ /* On the FAT/FAT32 volume */
 12374                        L10244:
 12375                        	.line	2953
 12376                        ;		if (dp->blk_ofs != 0xFFFFFFFF)
 12377                        	.line	2954
 12378                        ;		{ /* Get LFN if available */
 12379 08:2C46: A0 2C 00     	ldy	#$2c
 12380 08:2C49: B7 29        	lda	[<L489+dp_0],Y
 12381 08:2C4B: C9 FF FF     	cmp	#<$ffffffff
 12382 08:2C4E: D0 08        	bne	L494
 12383 08:2C50: A0 2E 00     	ldy	#$2e
 12384 08:2C53: B7 29        	lda	[<L489+dp_0],Y
 12385 08:2C55: C9 FF FF     	cmp	#^$ffffffff
 12386                        L494:
 12387 08:2C58: D0 03        	bne	L495
 12388 08:2C5A: 82 21 01     	brl	L10245
 12389                        L495:
 12390                        	.line	2955
 12391                        ;			si = di = hs = 0;
 12392                        	.line	2956
 12393 08:2C5D: 64 20        	stz	<L490+hs_1
 12394 08:2C5F: 64 1B        	stz	<L490+di_1
 12395 08:2C61: 64 19        	stz	<L490+si_1
 12396                        ;			while (fs->lfnbuf[si] != 0)
 12397                        	.line	2957
 12398                        L10246:
 12399 08:2C63: A5 19        	lda	<L490+si_1
 12400 08:2C65: 85 05        	sta	<R1
 12401 08:2C67: 64 07        	stz	<R1+2
 12402 08:2C69: D4 07        	pei	<R1+2
 12403 08:2C6B: D4 05        	pei	<R1
 12404 08:2C6D: A9 01 00     	lda	#$1
 12405                        	xref	~~~lasl
 12406 08:2C70: 22 xx xx xx  	jsl	~~~lasl
 12407 08:2C74: 85 01        	sta	<R0
 12408 08:2C76: 86 03        	stx	<R0+2
 12409 08:2C78: 18           	clc
 12410 08:2C79: A0 0B 00     	ldy	#$b
 12411 08:2C7C: B7 22        	lda	[<L490+fs_1],Y
 12412 08:2C7E: 65 01        	adc	<R0
 12413 08:2C80: 85 09        	sta	<R2
 12414 08:2C82: A0 0D 00     	ldy	#$d
 12415 08:2C85: B7 22        	lda	[<L490+fs_1],Y
 12416 08:2C87: 65 03        	adc	<R0+2
 12417 08:2C89: 85 0B        	sta	<R2+2
 12418 08:2C8B: A7 09        	lda	[<R2]
 12419 08:2C8D: D0 03        	bne	L496
  Sat Jul 10 2021  1:15                                                Page 239


 12420 08:2C8F: 82 D1 00     	brl	L10247
 12421                        L496:
 12422                        ;			{
 12423                        	.line	2958
 12424                        ;				wc = fs->lfnbuf[si++]; /
                    * Get an LFN character (UTF-16) */
 12425                        	.line	2959
 12426 08:2C92: A5 19        	lda	<L490+si_1
 12427 08:2C94: 85 05        	sta	<R1
 12428 08:2C96: 64 07        	stz	<R1+2
 12429 08:2C98: D4 07        	pei	<R1+2
 12430 08:2C9A: D4 05        	pei	<R1
 12431 08:2C9C: A9 01 00     	lda	#$1
 12432                        	xref	~~~lasl
 12433 08:2C9F: 22 xx xx xx  	jsl	~~~lasl
 12434 08:2CA3: 85 01        	sta	<R0
 12435 08:2CA5: 86 03        	stx	<R0+2
 12436 08:2CA7: 18           	clc
 12437 08:2CA8: A0 0B 00     	ldy	#$b
 12438 08:2CAB: B7 22        	lda	[<L490+fs_1],Y
 12439 08:2CAD: 65 01        	adc	<R0
 12440 08:2CAF: 85 09        	sta	<R2
 12441 08:2CB1: A0 0D 00     	ldy	#$d
 12442 08:2CB4: B7 22        	lda	[<L490+fs_1],Y
 12443 08:2CB6: 65 03        	adc	<R0+2
 12444 08:2CB8: 85 0B        	sta	<R2+2
 12445 08:2CBA: A7 09        	lda	[<R2]
 12446 08:2CBC: 85 1E        	sta	<L490+wc_1
 12447 08:2CBE: E6 19        	inc	<L490+si_1
 12448                        ;				if (hs == 0 && IsSurroga
                    te(wc))
 12449                        	.line	2960
 12450                        ;				{ /* Is it a surrogate? 
                    */
 12451 08:2CC0: A5 20        	lda	<L490+hs_1
 12452 08:2CC2: F0 03        	beq	L497
 12453 08:2CC4: 82 1B 00     	brl	L10248
 12454                        L497:
 12455 08:2CC7: A5 1E        	lda	<L490+wc_1
 12456 08:2CC9: C9 00 D8     	cmp	#<$d800
 12457 08:2CCC: B0 03        	bcs	L498
 12458 08:2CCE: 82 11 00     	brl	L10248
 12459                        L498:
 12460 08:2CD1: A9 FF DF     	lda	#$dfff
 12461 08:2CD4: C5 1E        	cmp	<L490+wc_1
 12462 08:2CD6: B0 03        	bcs	L499
 12463 08:2CD8: 82 07 00     	brl	L10248
 12464                        L499:
 12465                        	.line	2961
 12466                        ;					hs = wc; continu
                    e; /* Get low surrogate */
 12467                        	.line	2962
 12468 08:2CDB: A5 1E        	lda	<L490+wc_1
 12469 08:2CDD: 85 20        	sta	<L490+hs_1
 12470                        	.line	2962
 12471 08:2CDF: 82 81 FF     	brl	L10246
 12472                        ;				}
 12473                        	.line	2963
  Sat Jul 10 2021  1:15                                                Page 240


 12474                        ;				wc = put_utf((DWORD)hs <
                    < 16 | wc, &fno->fname[di], FF_LFN_BUF - di); /* Store it in
                     UTF-16 or UTF-8 encoding */
 12475                        L10248:
 12476                        	.line	2964
 12477 08:2CE2: 38           	sec
 12478 08:2CE3: A9 FF 00     	lda	#$ff
 12479 08:2CE6: E5 1B        	sbc	<L490+di_1
 12480 08:2CE8: 48           	pha
 12481 08:2CE9: A5 1B        	lda	<L490+di_1
 12482 08:2CEB: 85 01        	sta	<R0
 12483 08:2CED: 64 03        	stz	<R0+2
 12484 08:2CEF: 18           	clc
 12485 08:2CF0: A9 16 00     	lda	#$16
 12486 08:2CF3: 65 01        	adc	<R0
 12487 08:2CF5: 85 05        	sta	<R1
 12488 08:2CF7: A9 00 00     	lda	#$0
 12489 08:2CFA: 65 03        	adc	<R0+2
 12490 08:2CFC: 85 07        	sta	<R1+2
 12491 08:2CFE: 18           	clc
 12492 08:2CFF: A5 2D        	lda	<L489+fno_0
 12493 08:2D01: 65 05        	adc	<R1
 12494 08:2D03: 85 01        	sta	<R0
 12495 08:2D05: A5 2F        	lda	<L489+fno_0+2
 12496 08:2D07: 65 07        	adc	<R1+2
 12497 08:2D09: 85 03        	sta	<R0+2
 12498 08:2D0B: D4 03        	pei	<R0+2
 12499 08:2D0D: D4 01        	pei	<R0
 12500 08:2D0F: A5 20        	lda	<L490+hs_1
 12501 08:2D11: 85 0D        	sta	<R3
 12502 08:2D13: 64 0F        	stz	<R3+2
 12503 08:2D15: D4 0F        	pei	<R3+2
 12504 08:2D17: D4 0D        	pei	<R3
 12505 08:2D19: A9 10 00     	lda	#$10
 12506                        	xref	~~~lasl
 12507 08:2D1C: 22 xx xx xx  	jsl	~~~lasl
 12508 08:2D20: 85 09        	sta	<R2
 12509 08:2D22: 86 0B        	stx	<R2+2
 12510 08:2D24: A5 1E        	lda	<L490+wc_1
 12511 08:2D26: 85 11        	sta	<17
 12512 08:2D28: 64 13        	stz	<17+2
 12513 08:2D2A: A5 11        	lda	<17
 12514 08:2D2C: 05 09        	ora	<R2
 12515 08:2D2E: 85 15        	sta	<21
 12516 08:2D30: A5 13        	lda	<17+2
 12517 08:2D32: 05 0B        	ora	<R2+2
 12518 08:2D34: 85 17        	sta	<21+2
 12519 08:2D36: D4 17        	pei	<21+2
 12520 08:2D38: D4 15        	pei	<21
 12521 08:2D3A: 22 E8 04 08  	jsl	~~put_utf
 12522 08:2D3E: E2 20        	sep	#$20
 12523                        	longa	off
 12524 08:2D40: 85 09        	sta	<R2
 12525 08:2D42: C2 20        	rep	#$20
 12526                        	longa	on
 12527 08:2D44: A5 09        	lda	<R2
 12528 08:2D46: 29 FF 00     	and	#$ff
 12529 08:2D49: 85 1E        	sta	<L490+wc_1
  Sat Jul 10 2021  1:15                                                Page 241


 12530                        ;				if (wc == 0)
 12531                        	.line	2965
 12532                        ;				{	di = 0; break;} 
                    /* Invalid char or buffer overflow? */
 12533 08:2D4B: A5 1E        	lda	<L490+wc_1
 12534 08:2D4D: F0 03        	beq	L500
 12535 08:2D4F: 82 05 00     	brl	L10249
 12536                        L500:
 12537                        	.line	2966
 12538                        	.line	2966
 12539 08:2D52: 64 1B        	stz	<L490+di_1
 12540                        	.line	2966
 12541 08:2D54: 82 0C 00     	brl	L10247
 12542                        	.line	2966
 12543                        ;				di += wc;
 12544                        L10249:
 12545                        	.line	2967
 12546 08:2D57: 18           	clc
 12547 08:2D58: A5 1B        	lda	<L490+di_1
 12548 08:2D5A: 65 1E        	adc	<L490+wc_1
 12549 08:2D5C: 85 1B        	sta	<L490+di_1
 12550                        ;				hs = 0;
 12551                        	.line	2968
 12552 08:2D5E: 64 20        	stz	<L490+hs_1
 12553                        ;			}
 12554                        	.line	2969
 12555 08:2D60: 82 00 FF     	brl	L10246
 12556                        L10247:
 12557                        ;			if (hs != 0) di = 0; /* Broken s
                    urrogate pair? */
 12558                        	.line	2970
 12559 08:2D63: A5 20        	lda	<L490+hs_1
 12560 08:2D65: D0 03        	bne	L501
 12561 08:2D67: 82 02 00     	brl	L10250
 12562                        L501:
 12563                        	.line	2970
 12564 08:2D6A: 64 1B        	stz	<L490+di_1
 12565                        ;			fno->fname[di] = 0; /* Terminate
                     the LFN (null string means LFN is invalid) */
 12566                        L10250:
 12567                        	.line	2971
 12568 08:2D6C: 18           	clc
 12569 08:2D6D: A9 16 00     	lda	#$16
 12570 08:2D70: 65 1B        	adc	<L490+di_1
 12571 08:2D72: 85 01        	sta	<R0
 12572 08:2D74: E2 20        	sep	#$20
 12573                        	longa	off
 12574 08:2D76: A9 00        	lda	#$0
 12575 08:2D78: A4 01        	ldy	<R0
 12576 08:2D7A: 97 2D        	sta	[<L489+fno_0],Y
 12577 08:2D7C: C2 20        	rep	#$20
 12578                        	longa	on
 12579                        ;		}
 12580                        	.line	2972
 12581                        ;	}
 12582                        L10245:
 12583                        	.line	2973
 12584                        ;
  Sat Jul 10 2021  1:15                                                Page 242


 12585                        ;	si = di = 0;
 12586                        	.line	2975
 12587 08:2D7E: 64 1B        	stz	<L490+di_1
 12588 08:2D80: 64 19        	stz	<L490+si_1
 12589                        ;	while (si < 11)
 12590                        	.line	2976
 12591                        L10251:
 12592 08:2D82: A5 19        	lda	<L490+si_1
 12593 08:2D84: C9 0B 00     	cmp	#<$b
 12594 08:2D87: 90 03        	bcc	L502
 12595 08:2D89: 82 33 01     	brl	L10252
 12596                        L502:
 12597                        ;	{ /* Get SFN from SFN entry */
 12598                        	.line	2977
 12599                        ;		wc = dp->dir[si++]; /* Get a char */
 12600                        	.line	2978
 12601 08:2D8C: A0 1C 00     	ldy	#$1c
 12602 08:2D8F: B7 29        	lda	[<L489+dp_0],Y
 12603 08:2D91: 85 01        	sta	<R0
 12604 08:2D93: A0 1E 00     	ldy	#$1e
 12605 08:2D96: B7 29        	lda	[<L489+dp_0],Y
 12606 08:2D98: 85 03        	sta	<R0+2
 12607 08:2D9A: A4 19        	ldy	<L490+si_1
 12608 08:2D9C: B7 01        	lda	[<R0],Y
 12609 08:2D9E: 29 FF 00     	and	#$ff
 12610 08:2DA1: 85 1E        	sta	<L490+wc_1
 12611 08:2DA3: E6 19        	inc	<L490+si_1
 12612                        ;		if (wc == ' ') continue; /* Skip padding
                     spaces */
 12613                        	.line	2979
 12614 08:2DA5: A5 1E        	lda	<L490+wc_1
 12615 08:2DA7: C9 20 00     	cmp	#<$20
 12616 08:2DAA: D0 03        	bne	L503
 12617 08:2DAC: 82 D3 FF     	brl	L10251
 12618                        L503:
 12619                        ;		if (wc == RDDEM) wc = DDEM; /* Restore r
                    eplaced DDEM character */
 12620                        	.line	2980
 12621 08:2DAF: A5 1E        	lda	<L490+wc_1
 12622 08:2DB1: C9 05 00     	cmp	#<$5
 12623 08:2DB4: F0 03        	beq	L504
 12624 08:2DB6: 82 05 00     	brl	L10253
 12625                        L504:
 12626                        	.line	2980
 12627 08:2DB9: A9 E5 00     	lda	#$e5
 12628 08:2DBC: 85 1E        	sta	<L490+wc_1
 12629                        ;		if (si == 9 && di < FF_SFN_BUF) fno->alt
                    name[di++] = '.'; /* Insert a . if extension is exist */
 12630                        L10253:
 12631                        	.line	2981
 12632 08:2DBE: A5 19        	lda	<L490+si_1
 12633 08:2DC0: C9 09 00     	cmp	#<$9
 12634 08:2DC3: F0 03        	beq	L505
 12635 08:2DC5: 82 1E 00     	brl	L10254
 12636                        L505:
 12637 08:2DC8: A5 1B        	lda	<L490+di_1
 12638 08:2DCA: C9 0C 00     	cmp	#<$c
 12639 08:2DCD: 90 03        	bcc	L506
  Sat Jul 10 2021  1:15                                                Page 243


 12640 08:2DCF: 82 14 00     	brl	L10254
 12641                        L506:
 12642                        	.line	2981
 12643 08:2DD2: 18           	clc
 12644 08:2DD3: A9 09 00     	lda	#$9
 12645 08:2DD6: 65 1B        	adc	<L490+di_1
 12646 08:2DD8: 85 01        	sta	<R0
 12647 08:2DDA: E2 20        	sep	#$20
 12648                        	longa	off
 12649 08:2DDC: A9 2E        	lda	#$2e
 12650 08:2DDE: A4 01        	ldy	<R0
 12651 08:2DE0: 97 2D        	sta	[<L489+fno_0],Y
 12652 08:2DE2: C2 20        	rep	#$20
 12653                        	longa	on
 12654 08:2DE4: E6 1B        	inc	<L490+di_1
 12655                        ;#if FF_LFN_UNICODE >= 1	/* Unicode output */
 12656                        ;		if (dbc_1st((BYTE)wc) && si != 8 && si !
                    = 11 && dbc_2nd(dp->dir[si]))
 12657                        L10254:
 12658                        	.line	2983
 12659                        ;		{ /* Make a DBC if needed */
 12660 08:2DE6: D4 1E        	pei	<L490+wc_1
 12661 08:2DE8: 22 B7 02 08  	jsl	~~dbc_1st
 12662 08:2DEC: AA           	tax
 12663 08:2DED: D0 03        	bne	L507
 12664 08:2DEF: 82 58 00     	brl	L10255
 12665                        L507:
 12666 08:2DF2: A5 19        	lda	<L490+si_1
 12667 08:2DF4: C9 08 00     	cmp	#<$8
 12668 08:2DF7: D0 03        	bne	L508
 12669 08:2DF9: 82 4E 00     	brl	L10255
 12670                        L508:
 12671 08:2DFC: A5 19        	lda	<L490+si_1
 12672 08:2DFE: C9 0B 00     	cmp	#<$b
 12673 08:2E01: D0 03        	bne	L509
 12674 08:2E03: 82 44 00     	brl	L10255
 12675                        L509:
 12676 08:2E06: A0 1C 00     	ldy	#$1c
 12677 08:2E09: B7 29        	lda	[<L489+dp_0],Y
 12678 08:2E0B: 85 01        	sta	<R0
 12679 08:2E0D: A0 1E 00     	ldy	#$1e
 12680 08:2E10: B7 29        	lda	[<L489+dp_0],Y
 12681 08:2E12: 85 03        	sta	<R0+2
 12682 08:2E14: A4 19        	ldy	<L490+si_1
 12683 08:2E16: B7 01        	lda	[<R0],Y
 12684 08:2E18: 48           	pha
 12685 08:2E19: 22 E4 02 08  	jsl	~~dbc_2nd
 12686 08:2E1D: AA           	tax
 12687 08:2E1E: D0 03        	bne	L510
 12688 08:2E20: 82 27 00     	brl	L10255
 12689                        L510:
 12690                        	.line	2984
 12691                        ;			wc = wc << 8 | dp->dir[si++];
 12692                        	.line	2985
 12693 08:2E23: A0 1C 00     	ldy	#$1c
 12694 08:2E26: B7 29        	lda	[<L489+dp_0],Y
 12695 08:2E28: 85 01        	sta	<R0
 12696 08:2E2A: A0 1E 00     	ldy	#$1e
  Sat Jul 10 2021  1:15                                                Page 244


 12697 08:2E2D: B7 29        	lda	[<L489+dp_0],Y
 12698 08:2E2F: 85 03        	sta	<R0+2
 12699 08:2E31: A4 19        	ldy	<L490+si_1
 12700 08:2E33: B7 01        	lda	[<R0],Y
 12701 08:2E35: 29 FF 00     	and	#$ff
 12702 08:2E38: 85 01        	sta	<R0
 12703 08:2E3A: A5 1E        	lda	<L490+wc_1
 12704 08:2E3C: EB           	xba
 12705 08:2E3D: 29 00 FF     	and	#$ff00
 12706 08:2E40: 85 05        	sta	<R1
 12707 08:2E42: A5 05        	lda	<R1
 12708 08:2E44: 05 01        	ora	<R0
 12709 08:2E46: 85 1E        	sta	<L490+wc_1
 12710 08:2E48: E6 19        	inc	<L490+si_1
 12711                        ;		}
 12712                        	.line	2986
 12713                        ;		wc = ff_oem2uni(wc, CODEPAGE); /* ANSI/O
                    EM -> Unicode */
 12714                        L10255:
 12715                        	.line	2987
 12716 08:2E4A: F4 B5 01     	pea	#<$1b5
 12717 08:2E4D: D4 1E        	pei	<L490+wc_1
 12718 08:2E4F: 22 55 92 08  	jsl	~~ff_oem2uni
 12719 08:2E53: 85 1E        	sta	<L490+wc_1
 12720                        ;		if (wc == 0)
 12721                        	.line	2988
 12722                        ;		{	di = 0; break;} /* Wrong char in
                     the current code page? */
 12723 08:2E55: A5 1E        	lda	<L490+wc_1
 12724 08:2E57: F0 03        	beq	L511
 12725 08:2E59: 82 05 00     	brl	L10256
 12726                        L511:
 12727                        	.line	2989
 12728                        	.line	2989
 12729 08:2E5C: 64 1B        	stz	<L490+di_1
 12730                        	.line	2989
 12731 08:2E5E: 82 5E 00     	brl	L10252
 12732                        	.line	2989
 12733                        ;		wc = put_utf(wc, &fno->altname[di], FF_S
                    FN_BUF - di); /* Store it in Unicode */
 12734                        L10256:
 12735                        	.line	2990
 12736 08:2E61: 38           	sec
 12737 08:2E62: A9 0C 00     	lda	#$c
 12738 08:2E65: E5 1B        	sbc	<L490+di_1
 12739 08:2E67: 48           	pha
 12740 08:2E68: A5 1B        	lda	<L490+di_1
 12741 08:2E6A: 85 01        	sta	<R0
 12742 08:2E6C: 64 03        	stz	<R0+2
 12743 08:2E6E: 18           	clc
 12744 08:2E6F: A9 09 00     	lda	#$9
 12745 08:2E72: 65 01        	adc	<R0
 12746 08:2E74: 85 05        	sta	<R1
 12747 08:2E76: A9 00 00     	lda	#$0
 12748 08:2E79: 65 03        	adc	<R0+2
 12749 08:2E7B: 85 07        	sta	<R1+2
 12750 08:2E7D: 18           	clc
 12751 08:2E7E: A5 2D        	lda	<L489+fno_0
  Sat Jul 10 2021  1:15                                                Page 245


 12752 08:2E80: 65 05        	adc	<R1
 12753 08:2E82: 85 01        	sta	<R0
 12754 08:2E84: A5 2F        	lda	<L489+fno_0+2
 12755 08:2E86: 65 07        	adc	<R1+2
 12756 08:2E88: 85 03        	sta	<R0+2
 12757 08:2E8A: D4 03        	pei	<R0+2
 12758 08:2E8C: D4 01        	pei	<R0
 12759 08:2E8E: A5 1E        	lda	<L490+wc_1
 12760 08:2E90: 85 09        	sta	<R2
 12761 08:2E92: 64 0B        	stz	<R2+2
 12762 08:2E94: D4 0B        	pei	<R2+2
 12763 08:2E96: D4 09        	pei	<R2
 12764 08:2E98: 22 E8 04 08  	jsl	~~put_utf
 12765 08:2E9C: E2 20        	sep	#$20
 12766                        	longa	off
 12767 08:2E9E: 85 0D        	sta	<R3
 12768 08:2EA0: C2 20        	rep	#$20
 12769                        	longa	on
 12770 08:2EA2: A5 0D        	lda	<R3
 12771 08:2EA4: 29 FF 00     	and	#$ff
 12772 08:2EA7: 85 1E        	sta	<L490+wc_1
 12773                        ;		if (wc == 0)
 12774                        	.line	2991
 12775                        ;		{	di = 0; break;} /* Buffer overfl
                    ow? */
 12776 08:2EA9: A5 1E        	lda	<L490+wc_1
 12777 08:2EAB: F0 03        	beq	L512
 12778 08:2EAD: 82 05 00     	brl	L10257
 12779                        L512:
 12780                        	.line	2992
 12781                        	.line	2992
 12782 08:2EB0: 64 1B        	stz	<L490+di_1
 12783                        	.line	2992
 12784 08:2EB2: 82 0A 00     	brl	L10252
 12785                        	.line	2992
 12786                        ;		di += wc;
 12787                        L10257:
 12788                        	.line	2993
 12789 08:2EB5: 18           	clc
 12790 08:2EB6: A5 1B        	lda	<L490+di_1
 12791 08:2EB8: 65 1E        	adc	<L490+wc_1
 12792 08:2EBA: 85 1B        	sta	<L490+di_1
 12793                        ;#else					/* ANSI/
                    OEM output */
 12794                        ;		fno->altname[di++] = (TCHAR)wc; /* Store
                     it without any conversion */
 12795                        ;#endif
 12796                        ;	}
 12797                        	.line	2997
 12798 08:2EBC: 82 C3 FE     	brl	L10251
 12799                        L10252:
 12800                        ;	fno->altname[di] = 0; /* Terminate the SFN  (nul
                    l string means SFN is invalid) */
 12801                        	.line	2998
 12802 08:2EBF: 18           	clc
 12803 08:2EC0: A9 09 00     	lda	#$9
 12804 08:2EC3: 65 1B        	adc	<L490+di_1
 12805 08:2EC5: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 246


 12806 08:2EC7: E2 20        	sep	#$20
 12807                        	longa	off
 12808 08:2EC9: A9 00        	lda	#$0
 12809 08:2ECB: A4 01        	ldy	<R0
 12810 08:2ECD: 97 2D        	sta	[<L489+fno_0],Y
 12811 08:2ECF: C2 20        	rep	#$20
 12812                        	longa	on
 12813                        ;
 12814                        ;	if (fno->fname[0] == 0)
 12815                        	.line	3000
 12816                        ;	{ /* If LFN is invalid, altname[] needs to be co
                    pied to fname[] */
 12817 08:2ED1: A0 16 00     	ldy	#$16
 12818 08:2ED4: B7 2D        	lda	[<L489+fno_0],Y
 12819 08:2ED6: 29 FF 00     	and	#$ff
 12820 08:2ED9: F0 03        	beq	L513
 12821 08:2EDB: 82 EC 00     	brl	L10258
 12822                        L513:
 12823                        	.line	3001
 12824                        ;		if (di == 0)
 12825                        	.line	3002
 12826                        ;		{ /* If LFN and SFN both are invalid, th
                    is object is inaccesible */
 12827 08:2EDE: A5 1B        	lda	<L490+di_1
 12828 08:2EE0: F0 03        	beq	L514
 12829 08:2EE2: 82 17 00     	brl	L10259
 12830                        L514:
 12831                        	.line	3003
 12832                        ;			fno->fname[di++] = '?';
 12833                        	.line	3004
 12834 08:2EE5: 18           	clc
 12835 08:2EE6: A9 16 00     	lda	#$16
 12836 08:2EE9: 65 1B        	adc	<L490+di_1
 12837 08:2EEB: 85 01        	sta	<R0
 12838 08:2EED: E2 20        	sep	#$20
 12839                        	longa	off
 12840 08:2EEF: A9 3F        	lda	#$3f
 12841 08:2EF1: A4 01        	ldy	<R0
 12842 08:2EF3: 97 2D        	sta	[<L489+fno_0],Y
 12843 08:2EF5: C2 20        	rep	#$20
 12844                        	longa	on
 12845 08:2EF7: E6 1B        	inc	<L490+di_1
 12846                        ;		}
 12847                        	.line	3005
 12848                        ;		else
 12849 08:2EF9: 82 96 00     	brl	L10260
 12850                        L10259:
 12851                        ;		{
 12852                        	.line	3007
 12853                        ;			for (si = di = 0, lcf = NS_BODY;
                     fno->altname[si]; si++, di++)
 12854                        	.line	3008
 12855 08:2EFC: 64 1B        	stz	<L490+di_1
 12856 08:2EFE: 64 19        	stz	<L490+si_1
 12857 08:2F00: E2 20        	sep	#$20
 12858                        	longa	off
 12859 08:2F02: A9 08        	lda	#$8
 12860 08:2F04: 85 1D        	sta	<L490+lcf_1
  Sat Jul 10 2021  1:15                                                Page 247


 12861 08:2F06: C2 20        	rep	#$20
 12862                        	longa	on
 12863 08:2F08: 82 73 00     	brl	L10264
 12864                        L10263:
 12865                        ;			{ /* Copy altname[] to fname[] w
                    ith case information */
 12866                        	.line	3009
 12867                        ;				wc = (WCHAR)fno->altname
                    [si];
 12868                        	.line	3010
 12869 08:2F0B: 18           	clc
 12870 08:2F0C: A9 09 00     	lda	#$9
 12871 08:2F0F: 65 19        	adc	<L490+si_1
 12872 08:2F11: 85 01        	sta	<R0
 12873 08:2F13: A4 01        	ldy	<R0
 12874 08:2F15: B7 2D        	lda	[<L489+fno_0],Y
 12875 08:2F17: 29 FF 00     	and	#$ff
 12876 08:2F1A: 85 1E        	sta	<L490+wc_1
 12877                        ;				if (wc == '.') lcf = NS_
                    EXT;
 12878                        	.line	3011
 12879 08:2F1C: A5 1E        	lda	<L490+wc_1
 12880 08:2F1E: C9 2E 00     	cmp	#<$2e
 12881 08:2F21: F0 03        	beq	L515
 12882 08:2F23: 82 08 00     	brl	L10265
 12883                        L515:
 12884                        	.line	3011
 12885 08:2F26: E2 20        	sep	#$20
 12886                        	longa	off
 12887 08:2F28: A9 10        	lda	#$10
 12888 08:2F2A: 85 1D        	sta	<L490+lcf_1
 12889 08:2F2C: C2 20        	rep	#$20
 12890                        	longa	on
 12891                        ;				if (IsUpper(wc) && (dp->
                    dir[DIR_NTres] & lcf)) wc += 0x20;
 12892                        L10265:
 12893                        	.line	3012
 12894 08:2F2E: A5 1E        	lda	<L490+wc_1
 12895 08:2F30: C9 41 00     	cmp	#<$41
 12896 08:2F33: B0 03        	bcs	L516
 12897 08:2F35: 82 30 00     	brl	L10266
 12898                        L516:
 12899 08:2F38: A9 5A 00     	lda	#$5a
 12900 08:2F3B: C5 1E        	cmp	<L490+wc_1
 12901 08:2F3D: B0 03        	bcs	L517
 12902 08:2F3F: 82 26 00     	brl	L10266
 12903                        L517:
 12904 08:2F42: A0 1C 00     	ldy	#$1c
 12905 08:2F45: B7 29        	lda	[<L489+dp_0],Y
 12906 08:2F47: 85 01        	sta	<R0
 12907 08:2F49: A0 1E 00     	ldy	#$1e
 12908 08:2F4C: B7 29        	lda	[<L489+dp_0],Y
 12909 08:2F4E: 85 03        	sta	<R0+2
 12910 08:2F50: E2 20        	sep	#$20
 12911                        	longa	off
 12912 08:2F52: A5 1D        	lda	<L490+lcf_1
 12913 08:2F54: A0 0C 00     	ldy	#$c
 12914 08:2F57: 37 01        	and	[<R0],Y
  Sat Jul 10 2021  1:15                                                Page 248


 12915 08:2F59: C2 20        	rep	#$20
 12916                        	longa	on
 12917 08:2F5B: D0 03        	bne	L518
 12918 08:2F5D: 82 08 00     	brl	L10266
 12919                        L518:
 12920                        	.line	3012
 12921 08:2F60: 18           	clc
 12922 08:2F61: A9 20 00     	lda	#$20
 12923 08:2F64: 65 1E        	adc	<L490+wc_1
 12924 08:2F66: 85 1E        	sta	<L490+wc_1
 12925                        ;				fno->fname[di] = (TCHAR)
                    wc;
 12926                        L10266:
 12927                        	.line	3013
 12928 08:2F68: 18           	clc
 12929 08:2F69: A9 16 00     	lda	#$16
 12930 08:2F6C: 65 1B        	adc	<L490+di_1
 12931 08:2F6E: 85 01        	sta	<R0
 12932 08:2F70: E2 20        	sep	#$20
 12933                        	longa	off
 12934 08:2F72: A5 1E        	lda	<L490+wc_1
 12935 08:2F74: A4 01        	ldy	<R0
 12936 08:2F76: 97 2D        	sta	[<L489+fno_0],Y
 12937 08:2F78: C2 20        	rep	#$20
 12938                        	longa	on
 12939                        ;			}
 12940                        	.line	3014
 12941                        L10261:
 12942 08:2F7A: E6 1B        	inc	<L490+di_1
 12943 08:2F7C: E6 19        	inc	<L490+si_1
 12944                        L10264:
 12945 08:2F7E: 18           	clc
 12946 08:2F7F: A9 09 00     	lda	#$9
 12947 08:2F82: 65 19        	adc	<L490+si_1
 12948 08:2F84: 85 01        	sta	<R0
 12949 08:2F86: A4 01        	ldy	<R0
 12950 08:2F88: B7 2D        	lda	[<L489+fno_0],Y
 12951 08:2F8A: 29 FF 00     	and	#$ff
 12952 08:2F8D: F0 03        	beq	L519
 12953 08:2F8F: 82 79 FF     	brl	L10263
 12954                        L519:
 12955                        L10262:
 12956                        ;		}
 12957                        	.line	3015
 12958                        L10260:
 12959                        ;		fno->fname[di] = 0; /* Terminate the LFN
                     */
 12960                        	.line	3016
 12961 08:2F92: 18           	clc
 12962 08:2F93: A9 16 00     	lda	#$16
 12963 08:2F96: 65 1B        	adc	<L490+di_1
 12964 08:2F98: 85 01        	sta	<R0
 12965 08:2F9A: E2 20        	sep	#$20
 12966                        	longa	off
 12967 08:2F9C: A9 00        	lda	#$0
 12968 08:2F9E: A4 01        	ldy	<R0
 12969 08:2FA0: 97 2D        	sta	[<L489+fno_0],Y
 12970 08:2FA2: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 249


 12971                        	longa	on
 12972                        ;		if (!dp->dir[DIR_NTres]) fno->altname[0]
                     = 0; /* Altname is not needed if neither LFN nor case info 
                    is exist. */
 12973                        	.line	3017
 12974 08:2FA4: A0 1C 00     	ldy	#$1c
 12975 08:2FA7: B7 29        	lda	[<L489+dp_0],Y
 12976 08:2FA9: 85 01        	sta	<R0
 12977 08:2FAB: A0 1E 00     	ldy	#$1e
 12978 08:2FAE: B7 29        	lda	[<L489+dp_0],Y
 12979 08:2FB0: 85 03        	sta	<R0+2
 12980 08:2FB2: A0 0C 00     	ldy	#$c
 12981 08:2FB5: B7 01        	lda	[<R0],Y
 12982 08:2FB7: 29 FF 00     	and	#$ff
 12983 08:2FBA: F0 03        	beq	L520
 12984 08:2FBC: 82 0B 00     	brl	L10267
 12985                        L520:
 12986                        	.line	3017
 12987 08:2FBF: E2 20        	sep	#$20
 12988                        	longa	off
 12989 08:2FC1: A9 00        	lda	#$0
 12990 08:2FC3: A0 09 00     	ldy	#$9
 12991 08:2FC6: 97 2D        	sta	[<L489+fno_0],Y
 12992 08:2FC8: C2 20        	rep	#$20
 12993                        	longa	on
 12994                        ;	}
 12995                        L10267:
 12996                        	.line	3018
 12997                        ;
 12998                        ;#else	/* Non-LFN configuration */
 12999                        ;	si = di = 0;
 13000                        ;	while (si < 11)
 13001                        ;	{ /* Copy name body and extension */
 13002                        ;		c = (TCHAR) dp->dir[si++];
 13003                        ;		if (c == ' ')
 13004                        ;			continue; /* Skip padding spaces
                     */
 13005                        ;		if (c == RDDEM)
 13006                        ;			c = DDEM; /* Restore replaced DD
                    EM character */
 13007                        ;		if (si == 9)
 13008                        ;			fno->fname[di++] = '.';/* Insert
                     a . if extension is exist */
 13009                        ;		fno->fname[di++] = c;
 13010                        ;	}
 13011                        ;	fno->fname[di] = 0;
 13012                        ;#endif
 13013                        ;
 13014                        ;	fno->fattrib = dp->dir[DIR_Attr]; /* Attribute *
                    /
 13015                        L10258:
 13016                        	.line	3036
 13017 08:2FCA: A0 1C 00     	ldy	#$1c
 13018 08:2FCD: B7 29        	lda	[<L489+dp_0],Y
 13019 08:2FCF: 85 01        	sta	<R0
 13020 08:2FD1: A0 1E 00     	ldy	#$1e
 13021 08:2FD4: B7 29        	lda	[<L489+dp_0],Y
 13022 08:2FD6: 85 03        	sta	<R0+2
  Sat Jul 10 2021  1:15                                                Page 250


 13023 08:2FD8: E2 20        	sep	#$20
 13024                        	longa	off
 13025 08:2FDA: A0 0B 00     	ldy	#$b
 13026 08:2FDD: B7 01        	lda	[<R0],Y
 13027 08:2FDF: A0 08 00     	ldy	#$8
 13028 08:2FE2: 97 2D        	sta	[<L489+fno_0],Y
 13029 08:2FE4: C2 20        	rep	#$20
 13030                        	longa	on
 13031                        ;	fno->fsize = ld_dword(dp->dir + DIR_FileSize); /
                    * Size */
 13032                        	.line	3037
 13033 08:2FE6: 18           	clc
 13034 08:2FE7: A9 1C 00     	lda	#$1c
 13035 08:2FEA: A0 1C 00     	ldy	#$1c
 13036 08:2FED: 77 29        	adc	[<L489+dp_0],Y
 13037 08:2FEF: 85 01        	sta	<R0
 13038 08:2FF1: A9 00 00     	lda	#$0
 13039 08:2FF4: A0 1E 00     	ldy	#$1e
 13040 08:2FF7: 77 29        	adc	[<L489+dp_0],Y
 13041 08:2FF9: 85 03        	sta	<R0+2
 13042 08:2FFB: D4 03        	pei	<R0+2
 13043 08:2FFD: D4 01        	pei	<R0
 13044 08:2FFF: 22 3B 00 08  	jsl	~~ld_dword
 13045 08:3003: 85 05        	sta	<R1
 13046 08:3005: 86 07        	stx	<R1+2
 13047 08:3007: A5 05        	lda	<R1
 13048 08:3009: 87 2D        	sta	[<L489+fno_0]
 13049 08:300B: A5 07        	lda	<R1+2
 13050 08:300D: A0 02 00     	ldy	#$2
 13051 08:3010: 97 2D        	sta	[<L489+fno_0],Y
 13052                        ;	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);
                     /* Time */
 13053                        	.line	3038
 13054 08:3012: 18           	clc
 13055 08:3013: A9 16 00     	lda	#$16
 13056 08:3016: A0 1C 00     	ldy	#$1c
 13057 08:3019: 77 29        	adc	[<L489+dp_0],Y
 13058 08:301B: 85 01        	sta	<R0
 13059 08:301D: A9 00 00     	lda	#$0
 13060 08:3020: A0 1E 00     	ldy	#$1e
 13061 08:3023: 77 29        	adc	[<L489+dp_0],Y
 13062 08:3025: 85 03        	sta	<R0+2
 13063 08:3027: D4 03        	pei	<R0+2
 13064 08:3029: D4 01        	pei	<R0
 13065 08:302B: 22 00 00 08  	jsl	~~ld_word
 13066 08:302F: A0 06 00     	ldy	#$6
 13067 08:3032: 97 2D        	sta	[<L489+fno_0],Y
 13068                        ;	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);
                     /* Date */
 13069                        	.line	3039
 13070 08:3034: 18           	clc
 13071 08:3035: A9 18 00     	lda	#$18
 13072 08:3038: A0 1C 00     	ldy	#$1c
 13073 08:303B: 77 29        	adc	[<L489+dp_0],Y
 13074 08:303D: 85 01        	sta	<R0
 13075 08:303F: A9 00 00     	lda	#$0
 13076 08:3042: A0 1E 00     	ldy	#$1e
 13077 08:3045: 77 29        	adc	[<L489+dp_0],Y
  Sat Jul 10 2021  1:15                                                Page 251


 13078 08:3047: 85 03        	sta	<R0+2
 13079 08:3049: D4 03        	pei	<R0+2
 13080 08:304B: D4 01        	pei	<R0
 13081 08:304D: 22 00 00 08  	jsl	~~ld_word
 13082 08:3051: A0 04 00     	ldy	#$4
 13083 08:3054: 97 2D        	sta	[<L489+fno_0],Y
 13084                        ;}
 13085                        	.line	3040
 13086 08:3056: 82 DD FB     	brl	L493
 13087                        	.endblock	3040
 13088             00000025   L489	equ	37
 13089             00000019   L490	equ	25
 13090 08:3059:              	ends
 13091                        	efunc
 13092                        	.endfunc	3040,25,37
 13093                        	.line	3040
 13094                        ;
 13095                        ;#endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
                     */
 13096                        ;
 13097                        ;#if FF_USE_FIND && FF_FS_MINIMIZE <= 1
 13098                        ;/*-----------------------------------------------
                    ------------------------*/
 13099                        ;/* Pattern matching                              
                                            */
 13100                        ;/*-----------------------------------------------
                    ------------------------*/
 13101                        ;
 13102                        ;static DWORD get_achar ( /* Get a character and a
                    dvances ptr */
 13103                        ;		const TCHAR** ptr /* Pointer to pointer 
                    to the ANSI/OEM or Unicode string */
 13104                        ;)
 13105                        ;{
 13106                        	.line	3049
 13107                        	.line	3052
 13108                        	FFDOS
 13109                        	func
 13110                        	.function	3052
 13111                        ~~get_achar:
 13112                        	longa	on
 13113                        	longi	on
 13114 08:3059: 3B           	tsc
 13115 08:305A: 38           	sec
 13116 08:305B: E9 04 00     	sbc	#L521
 13117 08:305E: 1B           	tcs
 13118 08:305F: 0B           	phd
 13119 08:3060: 5B           	tcd
 13120             00000004   ptr_0	set	4
 13121                        	.block	3052
 13122                        ;	DWORD chr;
 13123                        ;
 13124                        ;#if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unico
                    de input */
 13125                        ;	chr = tchar2uni(ptr);
 13126             00000000   chr_1	set	0
 13127                        	.sym	chr,0,18,1,32
 13128                        	.sym	ptr,4,1166,6,32
  Sat Jul 10 2021  1:15                                                Page 252


 13129                        	.line	3056
 13130 08:3061: D4 0A        	pei	<L521+ptr_0+2
 13131 08:3063: D4 08        	pei	<L521+ptr_0
 13132 08:3065: 22 11 03 08  	jsl	~~tchar2uni
 13133 08:3069: 85 01        	sta	<L522+chr_1
 13134 08:306B: 86 03        	stx	<L522+chr_1+2
 13135                        ;	if (chr == 0xFFFFFFFF) chr = 0; /* Wrong UTF enc
                    oding is recognized as end of the string */
 13136                        	.line	3057
 13137 08:306D: A5 01        	lda	<L522+chr_1
 13138 08:306F: C9 FF FF     	cmp	#<$ffffffff
 13139 08:3072: D0 05        	bne	L524
 13140 08:3074: A5 03        	lda	<L522+chr_1+2
 13141 08:3076: C9 FF FF     	cmp	#^$ffffffff
 13142                        L524:
 13143 08:3079: F0 03        	beq	L525
 13144 08:307B: 82 04 00     	brl	L10268
 13145                        L525:
 13146                        	.line	3057
 13147 08:307E: 64 01        	stz	<L522+chr_1
 13148 08:3080: 64 03        	stz	<L522+chr_1+2
 13149                        ;	chr = ff_wtoupper(chr);
 13150                        L10268:
 13151                        	.line	3058
 13152 08:3082: D4 03        	pei	<L522+chr_1+2
 13153 08:3084: D4 01        	pei	<L522+chr_1
 13154 08:3086: 22 8D 92 08  	jsl	~~ff_wtoupper
 13155 08:308A: 85 01        	sta	<L522+chr_1
 13156 08:308C: 86 03        	stx	<L522+chr_1+2
 13157                        ;
 13158                        ;#else						
                    			/* ANSI/OEM input */
 13159                        ;	chr = (BYTE)*(*ptr)++; /* Get a byte */
 13160                        ;	if (IsLower(chr)) chr -= 0x20; /* To upper ASCII
                     char */
 13161                        ;#if FF_CODE_PAGE == 0
 13162                        ;	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80
                    ]; /* To upper SBCS extended char */
 13163                        ;#elif FF_CODE_PAGE < 900
 13164                        ;	if (chr >= 0x80) chr = ExCvt[chr - 0x80]; /* To 
                    upper SBCS extended char */
 13165                        ;#endif
 13166                        ;#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
 13167                        ;	if (dbc_1st((BYTE)chr))
 13168                        ;	{ /* Get DBC 2nd byte if needed */
 13169                        ;		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | 
                    (BYTE)*(*ptr)++ : 0;
 13170                        ;	}
 13171                        ;#endif
 13172                        ;
 13173                        ;#endif
 13174                        ;	return chr;
 13175                        	.line	3076
 13176 08:308E: A6 03        	ldx	<L522+chr_1+2
 13177 08:3090: A5 01        	lda	<L522+chr_1
 13178                        L526:
 13179 08:3092: A8           	tay
 13180 08:3093: A5 06        	lda	<L521+2
  Sat Jul 10 2021  1:15                                                Page 253


 13181 08:3095: 85 0A        	sta	<L521+2+4
 13182 08:3097: A5 05        	lda	<L521+1
 13183 08:3099: 85 09        	sta	<L521+1+4
 13184 08:309B: 2B           	pld
 13185 08:309C: 3B           	tsc
 13186 08:309D: 18           	clc
 13187 08:309E: 69 08 00     	adc	#L521+4
 13188 08:30A1: 1B           	tcs
 13189 08:30A2: 98           	tya
 13190 08:30A3: 6B           	rtl
 13191                        ;}
 13192                        	.line	3077
 13193                        	.endblock	3077
 13194             00000004   L521	equ	4
 13195             00000001   L522	equ	1
 13196 08:30A4:              	ends
 13197                        	efunc
 13198                        	.endfunc	3077,1,4
 13199                        	.line	3077
 13200                        ;
 13201                        ;static int pattern_matching ( /* 0:not matched, 1
                    :matched */
 13202                        ;		const TCHAR* pat, /* Matching pattern */
 13203                        ;		const TCHAR* nam, /* String to be tested
                     */
 13204                        ;		int skip, /* Number of pre-skip chars (n
                    umber of ?s) */
 13205                        ;		int inf /* Infinite search (* specified)
                     */
 13206                        ;)
 13207                        ;{
 13208                        	.line	3079
 13209                        	.line	3085
 13210                        	FFDOS
 13211                        	func
 13212                        	.function	3085
 13213                        ~~pattern_matching:
 13214                        	longa	on
 13215                        	longi	on
 13216 08:30A4: 3B           	tsc
 13217 08:30A5: 38           	sec
 13218 08:30A6: E9 18 00     	sbc	#L527
 13219 08:30A9: 1B           	tcs
 13220 08:30AA: 0B           	phd
 13221 08:30AB: 5B           	tcd
 13222             00000004   pat_0	set	4
 13223             00000008   nam_0	set	8
 13224             0000000C   skip_0	set	12
 13225             0000000E   inf_0	set	14
 13226                        	.block	3085
 13227                        ;	const TCHAR *pp, *np;
 13228                        ;	DWORD pc, nc;
 13229                        ;	int nm, nx;
 13230                        ;
 13231                        ;	while (skip--)
 13232             00000000   pp_1	set	0
 13233             00000004   np_1	set	4
 13234             00000008   pc_1	set	8
  Sat Jul 10 2021  1:15                                                Page 254


 13235             0000000C   nc_1	set	12
 13236             00000010   nm_1	set	16
 13237             00000012   nx_1	set	18
 13238                        	.sym	pp,0,142,1,32
 13239                        	.sym	np,4,142,1,32
 13240                        	.sym	pc,8,18,1,32
 13241                        	.sym	nc,12,18,1,32
 13242                        	.sym	nm,16,5,1,16
 13243                        	.sym	nx,18,5,1,16
 13244                        	.sym	pat,4,142,6,32
 13245                        	.sym	nam,8,142,6,32
 13246                        	.sym	skip,12,5,6,16
 13247                        	.sym	inf,14,5,6,16
 13248                        	.line	3090
 13249                        L10269:
 13250 08:30AC: A5 24        	lda	<L527+skip_0
 13251 08:30AE: 85 01        	sta	<R0
 13252 08:30B0: C6 24        	dec	<L527+skip_0
 13253 08:30B2: A5 01        	lda	<R0
 13254 08:30B4: D0 03        	bne	L530
 13255 08:30B6: 82 32 00     	brl	L10270
 13256                        L530:
 13257                        ;	{ /* Pre-skip name chars */
 13258                        	.line	3091
 13259                        ;		if (!get_achar(&nam)) return 0; /* Branc
                    h mismatched if less name chars */
 13260                        	.line	3092
 13261 08:30B9: F4 00 00     	pea	#0
 13262 08:30BC: 18           	clc
 13263 08:30BD: 7B           	tdc
 13264 08:30BE: 69 20 00     	adc	#<L527+nam_0
 13265 08:30C1: 48           	pha
 13266 08:30C2: 22 59 30 08  	jsl	~~get_achar
 13267 08:30C6: 85 01        	sta	<R0
 13268 08:30C8: 86 03        	stx	<R0+2
 13269 08:30CA: A5 01        	lda	<R0
 13270 08:30CC: 05 03        	ora	<R0+2
 13271 08:30CE: F0 03        	beq	L531
 13272 08:30D0: 82 15 00     	brl	L10271
 13273                        L531:
 13274                        	.line	3092
 13275 08:30D3: A9 00 00     	lda	#$0
 13276                        L532:
 13277 08:30D6: A8           	tay
 13278 08:30D7: A5 1A        	lda	<L527+2
 13279 08:30D9: 85 26        	sta	<L527+2+12
 13280 08:30DB: A5 19        	lda	<L527+1
 13281 08:30DD: 85 25        	sta	<L527+1+12
 13282 08:30DF: 2B           	pld
 13283 08:30E0: 3B           	tsc
 13284 08:30E1: 18           	clc
 13285 08:30E2: 69 24 00     	adc	#L527+12
 13286 08:30E5: 1B           	tcs
 13287 08:30E6: 98           	tya
 13288 08:30E7: 6B           	rtl
 13289                        ;	}
 13290                        L10271:
 13291                        	.line	3093
  Sat Jul 10 2021  1:15                                                Page 255


 13292 08:30E8: 82 C1 FF     	brl	L10269
 13293                        L10270:
 13294                        ;	if (*pat == 0 && inf) return 1; /* (short circui
                    t) */
 13295                        	.line	3094
 13296 08:30EB: A7 1C        	lda	[<L527+pat_0]
 13297 08:30ED: 29 FF 00     	and	#$ff
 13298 08:30F0: F0 03        	beq	L533
 13299 08:30F2: 82 0D 00     	brl	L10272
 13300                        L533:
 13301 08:30F5: A5 26        	lda	<L527+inf_0
 13302 08:30F7: D0 03        	bne	L534
 13303 08:30F9: 82 06 00     	brl	L10272
 13304                        L534:
 13305                        	.line	3094
 13306 08:30FC: A9 01 00     	lda	#$1
 13307 08:30FF: 82 D4 FF     	brl	L532
 13308                        ;
 13309                        ;	do
 13310                        L10272:
 13311                        	.line	3096
 13312                        L10275:
 13313                        ;	{
 13314                        	.line	3097
 13315                        ;		pp = pat; np = nam; /* Top of pattern an
                    d name to match */
 13316                        	.line	3098
 13317 08:3102: A5 1C        	lda	<L527+pat_0
 13318 08:3104: 85 05        	sta	<L528+pp_1
 13319 08:3106: A5 1E        	lda	<L527+pat_0+2
 13320 08:3108: 85 07        	sta	<L528+pp_1+2
 13321                        	.line	3098
 13322 08:310A: A5 20        	lda	<L527+nam_0
 13323 08:310C: 85 09        	sta	<L528+np_1
 13324 08:310E: A5 22        	lda	<L527+nam_0+2
 13325 08:3110: 85 0B        	sta	<L528+np_1+2
 13326                        ;		for (;;)
 13327                        	.line	3099
 13328                        L10278:
 13329                        ;		{
 13330                        	.line	3100
 13331                        ;			if (*pp == '?' || *pp == '*')
 13332                        	.line	3101
 13333                        ;			{ /* Wildcard? */
 13334 08:3112: E2 20        	sep	#$20
 13335                        	longa	off
 13336 08:3114: A7 05        	lda	[<L528+pp_1]
 13337 08:3116: C9 3F        	cmp	#<$3f
 13338 08:3118: C2 20        	rep	#$20
 13339                        	longa	on
 13340 08:311A: D0 03        	bne	L536
 13341 08:311C: 82 0D 00     	brl	L535
 13342                        L536:
 13343 08:311F: E2 20        	sep	#$20
 13344                        	longa	off
 13345 08:3121: A7 05        	lda	[<L528+pp_1]
 13346 08:3123: C9 2A        	cmp	#<$2a
 13347 08:3125: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 256


 13348                        	longa	on
 13349 08:3127: F0 03        	beq	L537
 13350 08:3129: 82 6B 00     	brl	L10279
 13351                        L537:
 13352                        L535:
 13353                        	.line	3102
 13354                        ;				nm = nx = 0;
 13355                        	.line	3103
 13356 08:312C: 64 17        	stz	<L528+nx_1
 13357 08:312E: 64 15        	stz	<L528+nm_1
 13358                        ;				do
 13359                        	.line	3104
 13360                        L10282:
 13361                        ;				{ /* Analyze the wildcar
                    d block */
 13362                        	.line	3105
 13363                        ;					if (*pp++ == '?'
                    ) nm++;
 13364                        	.line	3106
 13365 08:3130: A5 05        	lda	<L528+pp_1
 13366 08:3132: 85 01        	sta	<R0
 13367 08:3134: A5 07        	lda	<L528+pp_1+2
 13368 08:3136: 85 03        	sta	<R0+2
 13369 08:3138: E6 05        	inc	<L528+pp_1
 13370 08:313A: D0 02        	bne	L538
 13371 08:313C: E6 07        	inc	<L528+pp_1+2
 13372                        L538:
 13373 08:313E: E2 20        	sep	#$20
 13374                        	longa	off
 13375 08:3140: A7 01        	lda	[<R0]
 13376 08:3142: C9 3F        	cmp	#<$3f
 13377 08:3144: C2 20        	rep	#$20
 13378                        	longa	on
 13379 08:3146: F0 03        	beq	L539
 13380 08:3148: 82 05 00     	brl	L10283
 13381                        L539:
 13382                        	.line	3106
 13383 08:314B: E6 15        	inc	<L528+nm_1
 13384                        ;					else nx = 1;
 13385 08:314D: 82 05 00     	brl	L10284
 13386                        L10283:
 13387                        	.line	3107
 13388 08:3150: A9 01 00     	lda	#$1
 13389 08:3153: 85 17        	sta	<L528+nx_1
 13390                        L10284:
 13391                        ;				}while (*pp == '?' || *p
                    p == '*');
 13392                        	.line	3108
 13393                        L10280:
 13394 08:3155: E2 20        	sep	#$20
 13395                        	longa	off
 13396 08:3157: A7 05        	lda	[<L528+pp_1]
 13397 08:3159: C9 3F        	cmp	#<$3f
 13398 08:315B: C2 20        	rep	#$20
 13399                        	longa	on
 13400 08:315D: D0 03        	bne	L540
 13401 08:315F: 82 CE FF     	brl	L10282
 13402                        L540:
  Sat Jul 10 2021  1:15                                                Page 257


 13403 08:3162: E2 20        	sep	#$20
 13404                        	longa	off
 13405 08:3164: A7 05        	lda	[<L528+pp_1]
 13406 08:3166: C9 2A        	cmp	#<$2a
 13407 08:3168: C2 20        	rep	#$20
 13408                        	longa	on
 13409 08:316A: D0 03        	bne	L541
 13410 08:316C: 82 C1 FF     	brl	L10282
 13411                        L541:
 13412                        L10281:
 13413                        ;				if (pattern_matching(pp,
                     np, nm, nx)) return 1; /* Test new branch (recurs upto numb
                    er of wildcard blocks in the pattern) */
 13414                        	.line	3109
 13415 08:316F: D4 17        	pei	<L528+nx_1
 13416 08:3171: D4 15        	pei	<L528+nm_1
 13417 08:3173: D4 0B        	pei	<L528+np_1+2
 13418 08:3175: D4 09        	pei	<L528+np_1
 13419 08:3177: D4 07        	pei	<L528+pp_1+2
 13420 08:3179: D4 05        	pei	<L528+pp_1
 13421 08:317B: 22 A4 30 08  	jsl	~~pattern_matching
 13422 08:317F: AA           	tax
 13423 08:3180: D0 03        	bne	L542
 13424 08:3182: 82 06 00     	brl	L10285
 13425                        L542:
 13426                        	.line	3109
 13427 08:3185: A9 01 00     	lda	#$1
 13428 08:3188: 82 4B FF     	brl	L532
 13429                        ;				nc = *np; break; /* Bran
                    ch mismatched */
 13430                        L10285:
 13431                        	.line	3110
 13432 08:318B: A7 09        	lda	[<L528+np_1]
 13433 08:318D: 29 FF 00     	and	#$ff
 13434 08:3190: 85 11        	sta	<L528+nc_1
 13435 08:3192: 64 13        	stz	<L528+nc_1+2
 13436                        	.line	3110
 13437 08:3194: 82 43 00     	brl	L10277
 13438                        ;			}
 13439                        	.line	3111
 13440                        ;			pc = get_achar(&pp); /* Get a pa
                    ttern char */
 13441                        L10279:
 13442                        	.line	3112
 13443 08:3197: F4 00 00     	pea	#0
 13444 08:319A: 18           	clc
 13445 08:319B: 7B           	tdc
 13446 08:319C: 69 05 00     	adc	#<L528+pp_1
 13447 08:319F: 48           	pha
 13448 08:31A0: 22 59 30 08  	jsl	~~get_achar
 13449 08:31A4: 85 0D        	sta	<L528+pc_1
 13450 08:31A6: 86 0F        	stx	<L528+pc_1+2
 13451                        ;			nc = get_achar(&np); /* Get a na
                    me char */
 13452                        	.line	3113
 13453 08:31A8: F4 00 00     	pea	#0
 13454 08:31AB: 18           	clc
 13455 08:31AC: 7B           	tdc
  Sat Jul 10 2021  1:15                                                Page 258


 13456 08:31AD: 69 09 00     	adc	#<L528+np_1
 13457 08:31B0: 48           	pha
 13458 08:31B1: 22 59 30 08  	jsl	~~get_achar
 13459 08:31B5: 85 11        	sta	<L528+nc_1
 13460 08:31B7: 86 13        	stx	<L528+nc_1+2
 13461                        ;			if (pc != nc) break; /* Branch m
                    ismatched? */
 13462                        	.line	3114
 13463 08:31B9: A5 0D        	lda	<L528+pc_1
 13464 08:31BB: C5 11        	cmp	<L528+nc_1
 13465 08:31BD: D0 04        	bne	L543
 13466 08:31BF: A5 0F        	lda	<L528+pc_1+2
 13467 08:31C1: C5 13        	cmp	<L528+nc_1+2
 13468                        L543:
 13469 08:31C3: F0 03        	beq	L544
 13470 08:31C5: 82 12 00     	brl	L10277
 13471                        L544:
 13472                        ;			if (pc == 0) return 1; /* Branch
                     matched? (matched at end of both strings) */
 13473                        	.line	3115
 13474 08:31C8: A5 0D        	lda	<L528+pc_1
 13475 08:31CA: 05 0F        	ora	<L528+pc_1+2
 13476 08:31CC: F0 03        	beq	L545
 13477 08:31CE: 82 06 00     	brl	L10286
 13478                        L545:
 13479                        	.line	3115
 13480 08:31D1: A9 01 00     	lda	#$1
 13481 08:31D4: 82 FF FE     	brl	L532
 13482                        ;		}
 13483                        L10286:
 13484                        	.line	3116
 13485                        L10276:
 13486 08:31D7: 82 38 FF     	brl	L10278
 13487                        L10277:
 13488                        ;		get_achar(&nam); /* nam++ */
 13489                        	.line	3117
 13490 08:31DA: F4 00 00     	pea	#0
 13491 08:31DD: 18           	clc
 13492 08:31DE: 7B           	tdc
 13493 08:31DF: 69 20 00     	adc	#<L527+nam_0
 13494 08:31E2: 48           	pha
 13495 08:31E3: 22 59 30 08  	jsl	~~get_achar
 13496                        ;	}while (inf && nc); /* Retry until end of name i
                    f infinite search is specified */
 13497                        	.line	3118
 13498                        L10273:
 13499 08:31E7: A5 26        	lda	<L527+inf_0
 13500 08:31E9: D0 03        	bne	L547
 13501 08:31EB: 82 09 00     	brl	L546
 13502                        L547:
 13503 08:31EE: A5 11        	lda	<L528+nc_1
 13504 08:31F0: 05 13        	ora	<L528+nc_1+2
 13505 08:31F2: F0 03        	beq	L548
 13506 08:31F4: 82 0B FF     	brl	L10275
 13507                        L548:
 13508                        L546:
 13509                        L10274:
 13510                        ;
  Sat Jul 10 2021  1:15                                                Page 259


 13511                        ;	return 0;
 13512                        	.line	3120
 13513 08:31F7: A9 00 00     	lda	#$0
 13514 08:31FA: 82 D9 FE     	brl	L532
 13515                        ;}
 13516                        	.line	3121
 13517                        	.endblock	3121
 13518             00000018   L527	equ	24
 13519             00000005   L528	equ	5
 13520 08:31FD:              	ends
 13521                        	efunc
 13522                        	.endfunc	3121,5,24
 13523                        	.line	3121
 13524                        ;
 13525                        ;#endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
 13526                        ;
 13527                        ;/*-----------------------------------------------
                    ------------------------*/
 13528                        ;/* Pick a top segment and create the object name 
                    in directory form       */
 13529                        ;/*-----------------------------------------------
                    ------------------------*/
 13530                        ;
 13531                        ;static FRESULT create_name( /* FR_OK: successful,
                     FR_INVALID_NAME: could not create */
 13532                        ;DIR* dp, /* Pointer to the directory object */
 13533                        ;const TCHAR** path /* Pointer to pointer to the s
                    egment in the path string */
 13534                        ;)
 13535                        ;{
 13536                        	.line	3129
 13537                        	.line	3133
 13538                        	FFDOS
 13539                        	func
 13540                        	.function	3133
 13541                        ~~create_name:
 13542                        	longa	on
 13543                        	longi	on
 13544 08:31FD: 3B           	tsc
 13545 08:31FE: 38           	sec
 13546 08:31FF: E9 24 00     	sbc	#L549
 13547 08:3202: 1B           	tcs
 13548 08:3203: 0B           	phd
 13549 08:3204: 5B           	tcd
 13550             00000004   dp_0	set	4
 13551             00000008   path_0	set	8
 13552                        	.block	3133
 13553                        ;#if FF_USE_LFN		/* LFN configuration */
 13554                        ;	BYTE b, cf;
 13555                        ;	WCHAR wc, *lfn;
 13556                        ;	DWORD uc;
 13557                        ;	UINT i, ni, si, di;
 13558                        ;	const TCHAR *p;
 13559                        ;
 13560                        ;	/* Create LFN into LFN working buffer */
 13561                        ;	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 13562             00000000   b_1	set	0
 13563             00000001   cf_1	set	1
  Sat Jul 10 2021  1:15                                                Page 260


 13564             00000002   wc_1	set	2
 13565             00000004   lfn_1	set	4
 13566             00000008   uc_1	set	8
 13567             0000000C   i_1	set	12
 13568             0000000E   ni_1	set	14
 13569             00000010   si_1	set	16
 13570             00000012   di_1	set	18
 13571             00000014   p_1	set	20
 13572                        	.sym	b,0,14,1,8
 13573                        	.sym	cf,1,14,1,8
 13574                        	.sym	wc,2,16,1,16
 13575                        	.sym	lfn,4,144,1,32
 13576                        	.sym	uc,8,18,1,32
 13577                        	.sym	i,12,16,1,16
 13578                        	.sym	ni,14,16,1,16
 13579                        	.sym	si,16,16,1,16
 13580                        	.sym	di,18,16,1,16
 13581                        	.sym	p,20,142,1,32
 13582                        	.sym	dp,4,138,6,32,75
 13583                        	.sym	path,8,1166,6,32
 13584                        	.line	3142
 13585 08:3205: A7 2C        	lda	[<L549+path_0]
 13586 08:3207: 85 21        	sta	<L550+p_1
 13587 08:3209: A0 02 00     	ldy	#$2
 13588 08:320C: B7 2C        	lda	[<L549+path_0],Y
 13589 08:320E: 85 23        	sta	<L550+p_1+2
 13590                        	.line	3142
 13591 08:3210: A7 28        	lda	[<L549+dp_0]
 13592 08:3212: 85 01        	sta	<R0
 13593 08:3214: A0 02 00     	ldy	#$2
 13594 08:3217: B7 28        	lda	[<L549+dp_0],Y
 13595 08:3219: 85 03        	sta	<R0+2
 13596 08:321B: A0 0B 00     	ldy	#$b
 13597 08:321E: B7 01        	lda	[<R0],Y
 13598 08:3220: 85 11        	sta	<L550+lfn_1
 13599 08:3222: A0 0D 00     	ldy	#$d
 13600 08:3225: B7 01        	lda	[<R0],Y
 13601 08:3227: 85 13        	sta	<L550+lfn_1+2
 13602                        	.line	3142
 13603 08:3229: 64 1F        	stz	<L550+di_1
 13604                        ;	for (;;)
 13605                        	.line	3143
 13606                        L10289:
 13607                        ;	{
 13608                        	.line	3144
 13609                        ;		uc = tchar2uni(&p); /* Get a character *
                    /
 13610                        	.line	3145
 13611 08:322B: F4 00 00     	pea	#0
 13612 08:322E: 18           	clc
 13613 08:322F: 7B           	tdc
 13614 08:3230: 69 21 00     	adc	#<L550+p_1
 13615 08:3233: 48           	pha
 13616 08:3234: 22 11 03 08  	jsl	~~tchar2uni
 13617 08:3238: 85 15        	sta	<L550+uc_1
 13618 08:323A: 86 17        	stx	<L550+uc_1+2
 13619                        ;		if (uc == 0xFFFFFFFF) return FR_INVALID_
                    NAME; /* Invalid code or UTF decode error */
  Sat Jul 10 2021  1:15                                                Page 261


 13620                        	.line	3146
 13621 08:323C: A5 15        	lda	<L550+uc_1
 13622 08:323E: C9 FF FF     	cmp	#<$ffffffff
 13623 08:3241: D0 05        	bne	L552
 13624 08:3243: A5 17        	lda	<L550+uc_1+2
 13625 08:3245: C9 FF FF     	cmp	#^$ffffffff
 13626                        L552:
 13627 08:3248: F0 03        	beq	L553
 13628 08:324A: 82 15 00     	brl	L10290
 13629                        L553:
 13630                        	.line	3146
 13631 08:324D: A9 06 00     	lda	#$6
 13632                        L554:
 13633 08:3250: A8           	tay
 13634 08:3251: A5 26        	lda	<L549+2
 13635 08:3253: 85 2E        	sta	<L549+2+8
 13636 08:3255: A5 25        	lda	<L549+1
 13637 08:3257: 85 2D        	sta	<L549+1+8
 13638 08:3259: 2B           	pld
 13639 08:325A: 3B           	tsc
 13640 08:325B: 18           	clc
 13641 08:325C: 69 2C 00     	adc	#L549+8
 13642 08:325F: 1B           	tcs
 13643 08:3260: 98           	tya
 13644 08:3261: 6B           	rtl
 13645                        ;		if (uc >= 0x10000) lfn[di++] = (WCHAR)(u
                    c >> 16); /* Store high surrogate if needed */
 13646                        L10290:
 13647                        	.line	3147
 13648 08:3262: A5 15        	lda	<L550+uc_1
 13649 08:3264: C9 00 00     	cmp	#<$10000
 13650 08:3267: A5 17        	lda	<L550+uc_1+2
 13651 08:3269: E9 01 00     	sbc	#^$10000
 13652 08:326C: B0 03        	bcs	L555
 13653 08:326E: 82 37 00     	brl	L10291
 13654                        L555:
 13655                        	.line	3147
 13656 08:3271: A5 1F        	lda	<L550+di_1
 13657 08:3273: 85 05        	sta	<R1
 13658 08:3275: 64 07        	stz	<R1+2
 13659 08:3277: D4 07        	pei	<R1+2
 13660 08:3279: D4 05        	pei	<R1
 13661 08:327B: A9 01 00     	lda	#$1
 13662                        	xref	~~~lasl
 13663 08:327E: 22 xx xx xx  	jsl	~~~lasl
 13664 08:3282: 85 01        	sta	<R0
 13665 08:3284: 86 03        	stx	<R0+2
 13666 08:3286: 18           	clc
 13667 08:3287: A5 11        	lda	<L550+lfn_1
 13668 08:3289: 65 01        	adc	<R0
 13669 08:328B: 85 09        	sta	<R2
 13670 08:328D: A5 13        	lda	<L550+lfn_1+2
 13671 08:328F: 65 03        	adc	<R0+2
 13672 08:3291: 85 0B        	sta	<R2+2
 13673 08:3293: D4 17        	pei	<L550+uc_1+2
 13674 08:3295: D4 15        	pei	<L550+uc_1
 13675 08:3297: A9 10 00     	lda	#$10
 13676                        	xref	~~~llsr
  Sat Jul 10 2021  1:15                                                Page 262


 13677 08:329A: 22 xx xx xx  	jsl	~~~llsr
 13678 08:329E: 85 01        	sta	<R0
 13679 08:32A0: 86 03        	stx	<R0+2
 13680 08:32A2: A5 01        	lda	<R0
 13681 08:32A4: 87 09        	sta	[<R2]
 13682 08:32A6: E6 1F        	inc	<L550+di_1
 13683                        ;		wc = (WCHAR)uc;
 13684                        L10291:
 13685                        	.line	3148
 13686 08:32A8: A5 15        	lda	<L550+uc_1
 13687 08:32AA: 85 0F        	sta	<L550+wc_1
 13688                        ;		if (wc < ' ' || wc == '/' || wc == '\\')
                     break; /* Break if end of the path or a separator is found 
                    */
 13689                        	.line	3149
 13690 08:32AC: A5 0F        	lda	<L550+wc_1
 13691 08:32AE: C9 20 00     	cmp	#<$20
 13692 08:32B1: B0 03        	bcs	L556
 13693 08:32B3: 82 71 00     	brl	L10288
 13694                        L556:
 13695 08:32B6: A5 0F        	lda	<L550+wc_1
 13696 08:32B8: C9 2F 00     	cmp	#<$2f
 13697 08:32BB: D0 03        	bne	L557
 13698 08:32BD: 82 67 00     	brl	L10288
 13699                        L557:
 13700 08:32C0: A5 0F        	lda	<L550+wc_1
 13701 08:32C2: C9 5C 00     	cmp	#<$5c
 13702 08:32C5: D0 03        	bne	L558
 13703 08:32C7: 82 5D 00     	brl	L10288
 13704                        L558:
 13705                        ;		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F"
                    , wc)) return FR_INVALID_NAME; /* Reject illegal characters 
                    for LFN */
 13706                        	.line	3150
 13707 08:32CA: A5 0F        	lda	<L550+wc_1
 13708 08:32CC: C9 80 00     	cmp	#<$80
 13709 08:32CF: 90 03        	bcc	L559
 13710 08:32D1: 82 18 00     	brl	L10292
 13711                        L559:
 13712 08:32D4: D4 0F        	pei	<L550+wc_1
 13713 08:32D6: F4 xx xx     	pea	#^L122
 13714 08:32D9: F4 xx xx     	pea	#<L122
 13715 08:32DC: 22 75 02 08  	jsl	~~chk_chr
 13716 08:32E0: AA           	tax
 13717 08:32E1: D0 03        	bne	L560
 13718 08:32E3: 82 06 00     	brl	L10292
 13719                        L560:
 13720                        	.line	3150
 13721 08:32E6: A9 06 00     	lda	#$6
 13722 08:32E9: 82 64 FF     	brl	L554
 13723                        ;		if (di >= FF_MAX_LFN) return FR_INVALID_
                    NAME; /* Reject too long name */
 13724                        L10292:
 13725                        	.line	3151
 13726 08:32EC: A5 1F        	lda	<L550+di_1
 13727 08:32EE: C9 FF 00     	cmp	#<$ff
 13728 08:32F1: B0 03        	bcs	L561
 13729 08:32F3: 82 06 00     	brl	L10293
  Sat Jul 10 2021  1:15                                                Page 263


 13730                        L561:
 13731                        	.line	3151
 13732 08:32F6: A9 06 00     	lda	#$6
 13733 08:32F9: 82 54 FF     	brl	L554
 13734                        ;		lfn[di++] = wc; /* Store the Unicode cha
                    racter */
 13735                        L10293:
 13736                        	.line	3152
 13737 08:32FC: A5 1F        	lda	<L550+di_1
 13738 08:32FE: 85 05        	sta	<R1
 13739 08:3300: 64 07        	stz	<R1+2
 13740 08:3302: D4 07        	pei	<R1+2
 13741 08:3304: D4 05        	pei	<R1
 13742 08:3306: A9 01 00     	lda	#$1
 13743                        	xref	~~~lasl
 13744 08:3309: 22 xx xx xx  	jsl	~~~lasl
 13745 08:330D: 85 01        	sta	<R0
 13746 08:330F: 86 03        	stx	<R0+2
 13747 08:3311: 18           	clc
 13748 08:3312: A5 11        	lda	<L550+lfn_1
 13749 08:3314: 65 01        	adc	<R0
 13750 08:3316: 85 09        	sta	<R2
 13751 08:3318: A5 13        	lda	<L550+lfn_1+2
 13752 08:331A: 65 03        	adc	<R0+2
 13753 08:331C: 85 0B        	sta	<R2+2
 13754 08:331E: A5 0F        	lda	<L550+wc_1
 13755 08:3320: 87 09        	sta	[<R2]
 13756 08:3322: E6 1F        	inc	<L550+di_1
 13757                        ;	}
 13758                        	.line	3153
 13759                        L10287:
 13760 08:3324: 82 04 FF     	brl	L10289
 13761                        L10288:
 13762                        ;	if (wc < ' ')
 13763                        	.line	3154
 13764                        ;	{ /* End of path? */
 13765 08:3327: A5 0F        	lda	<L550+wc_1
 13766 08:3329: C9 20 00     	cmp	#<$20
 13767 08:332C: 90 03        	bcc	L562
 13768 08:332E: 82 0B 00     	brl	L10294
 13769                        L562:
 13770                        	.line	3155
 13771                        ;		cf = NS_LAST; /* Set last segment flag *
                    /
 13772                        	.line	3156
 13773 08:3331: E2 20        	sep	#$20
 13774                        	longa	off
 13775 08:3333: A9 04        	lda	#$4
 13776 08:3335: 85 0E        	sta	<L550+cf_1
 13777 08:3337: C2 20        	rep	#$20
 13778                        	longa	on
 13779                        ;	}
 13780                        	.line	3157
 13781                        ;	else
 13782 08:3339: 82 29 00     	brl	L10295
 13783                        L10294:
 13784                        ;	{
 13785                        	.line	3159
  Sat Jul 10 2021  1:15                                                Page 264


 13786                        ;		cf = 0; /* Next segment follows */
 13787                        	.line	3160
 13788 08:333C: E2 20        	sep	#$20
 13789                        	longa	off
 13790 08:333E: 64 0E        	stz	<L550+cf_1
 13791 08:3340: C2 20        	rep	#$20
 13792                        	longa	on
 13793                        ;		while (*p == '/' || *p == '\\') p++; /* 
                    Skip duplicated separators if exist */
 13794                        	.line	3161
 13795                        L10296:
 13796 08:3342: E2 20        	sep	#$20
 13797                        	longa	off
 13798 08:3344: A7 21        	lda	[<L550+p_1]
 13799 08:3346: C9 2F        	cmp	#<$2f
 13800 08:3348: C2 20        	rep	#$20
 13801                        	longa	on
 13802 08:334A: D0 03        	bne	L564
 13803 08:334C: 82 0D 00     	brl	L563
 13804                        L564:
 13805 08:334F: E2 20        	sep	#$20
 13806                        	longa	off
 13807 08:3351: A7 21        	lda	[<L550+p_1]
 13808 08:3353: C9 5C        	cmp	#<$5c
 13809 08:3355: C2 20        	rep	#$20
 13810                        	longa	on
 13811 08:3357: F0 03        	beq	L565
 13812 08:3359: 82 09 00     	brl	L10297
 13813                        L565:
 13814                        L563:
 13815                        	.line	3161
 13816 08:335C: E6 21        	inc	<L550+p_1
 13817 08:335E: D0 02        	bne	L566
 13818 08:3360: E6 23        	inc	<L550+p_1+2
 13819                        L566:
 13820 08:3362: 82 DD FF     	brl	L10296
 13821                        L10297:
 13822                        ;	}
 13823                        	.line	3162
 13824                        L10295:
 13825                        ;	*path = p; /* Return pointer to the next segment
                     */
 13826                        	.line	3163
 13827 08:3365: A5 21        	lda	<L550+p_1
 13828 08:3367: 87 2C        	sta	[<L549+path_0]
 13829 08:3369: A5 23        	lda	<L550+p_1+2
 13830 08:336B: A0 02 00     	ldy	#$2
 13831 08:336E: 97 2C        	sta	[<L549+path_0],Y
 13832                        ;
 13833                        ;#if FF_FS_RPATH != 0
 13834                        ;	if ((di == 1 && lfn[di - 1] == '.') ||
 13835                        ;			(di == 2 && lfn[di - 1] == '.' &
                    & lfn[di - 2] == '.'))
 13836                        ;	{ /* Is this segment a dot name? */
 13837                        ;		lfn[di] = 0;
 13838                        ;		for (i = 0; i < 11; i++)
 13839                        ;		{ /* Create dot name for SFN entry */
 13840                        ;			dp->fn[i] = (i < di) ? '.' : ' '
  Sat Jul 10 2021  1:15                                                Page 265


                    ;
 13841                        ;		}
 13842                        ;		dp->fn[i] = cf | NS_DOT; /* This is a do
                    t entry */
 13843                        ;		return FR_OK;
 13844                        ;	}
 13845                        ;#endif
 13846                        ;	while (di)
 13847                        	.line	3178
 13848                        L10298:
 13849 08:3370: A5 1F        	lda	<L550+di_1
 13850 08:3372: D0 03        	bne	L567
 13851 08:3374: 82 47 00     	brl	L10299
 13852                        L567:
 13853                        ;	{ /* Snip off trailing spaces and dots if exist 
                    */
 13854                        	.line	3179
 13855                        ;		wc = lfn[di - 1];
 13856                        	.line	3180
 13857 08:3377: 18           	clc
 13858 08:3378: A9 FF FF     	lda	#$ffff
 13859 08:337B: 65 1F        	adc	<L550+di_1
 13860 08:337D: 85 05        	sta	<R1
 13861 08:337F: A5 05        	lda	<R1
 13862 08:3381: 85 05        	sta	<R1
 13863 08:3383: 64 07        	stz	<R1+2
 13864 08:3385: D4 07        	pei	<R1+2
 13865 08:3387: D4 05        	pei	<R1
 13866 08:3389: A9 01 00     	lda	#$1
 13867                        	xref	~~~lasl
 13868 08:338C: 22 xx xx xx  	jsl	~~~lasl
 13869 08:3390: 85 01        	sta	<R0
 13870 08:3392: 86 03        	stx	<R0+2
 13871 08:3394: 18           	clc
 13872 08:3395: A5 11        	lda	<L550+lfn_1
 13873 08:3397: 65 01        	adc	<R0
 13874 08:3399: 85 09        	sta	<R2
 13875 08:339B: A5 13        	lda	<L550+lfn_1+2
 13876 08:339D: 65 03        	adc	<R0+2
 13877 08:339F: 85 0B        	sta	<R2+2
 13878 08:33A1: A7 09        	lda	[<R2]
 13879 08:33A3: 85 0F        	sta	<L550+wc_1
 13880                        ;		if (wc != ' ' && wc != '.') break;
 13881                        	.line	3181
 13882 08:33A5: A5 0F        	lda	<L550+wc_1
 13883 08:33A7: C9 20 00     	cmp	#<$20
 13884 08:33AA: D0 03        	bne	L569
 13885 08:33AC: 82 0A 00     	brl	L568
 13886                        L569:
 13887 08:33AF: A5 0F        	lda	<L550+wc_1
 13888 08:33B1: C9 2E 00     	cmp	#<$2e
 13889 08:33B4: F0 03        	beq	L570
 13890 08:33B6: 82 05 00     	brl	L10299
 13891                        L570:
 13892                        L568:
 13893                        ;		di--;
 13894                        	.line	3182
 13895 08:33B9: C6 1F        	dec	<L550+di_1
  Sat Jul 10 2021  1:15                                                Page 266


 13896                        ;	}
 13897                        	.line	3183
 13898 08:33BB: 82 B2 FF     	brl	L10298
 13899                        L10299:
 13900                        ;	lfn[di] = 0; /* LFN is created into the working 
                    buffer */
 13901                        	.line	3184
 13902 08:33BE: A5 1F        	lda	<L550+di_1
 13903 08:33C0: 85 05        	sta	<R1
 13904 08:33C2: 64 07        	stz	<R1+2
 13905 08:33C4: D4 07        	pei	<R1+2
 13906 08:33C6: D4 05        	pei	<R1
 13907 08:33C8: A9 01 00     	lda	#$1
 13908                        	xref	~~~lasl
 13909 08:33CB: 22 xx xx xx  	jsl	~~~lasl
 13910 08:33CF: 85 01        	sta	<R0
 13911 08:33D1: 86 03        	stx	<R0+2
 13912 08:33D3: 18           	clc
 13913 08:33D4: A5 11        	lda	<L550+lfn_1
 13914 08:33D6: 65 01        	adc	<R0
 13915 08:33D8: 85 09        	sta	<R2
 13916 08:33DA: A5 13        	lda	<L550+lfn_1+2
 13917 08:33DC: 65 03        	adc	<R0+2
 13918 08:33DE: 85 0B        	sta	<R2+2
 13919 08:33E0: A9 00 00     	lda	#$0
 13920 08:33E3: 87 09        	sta	[<R2]
 13921                        ;	if (di == 0) return FR_INVALID_NAME; /* Reject n
                    ull name */
 13922                        	.line	3185
 13923 08:33E5: A5 1F        	lda	<L550+di_1
 13924 08:33E7: F0 03        	beq	L571
 13925 08:33E9: 82 06 00     	brl	L10300
 13926                        L571:
 13927                        	.line	3185
 13928 08:33EC: A9 06 00     	lda	#$6
 13929 08:33EF: 82 5E FE     	brl	L554
 13930                        ;
 13931                        ;	/* Create SFN in directory form */
 13932                        ;	for (si = 0; lfn[si] == ' '; si++); /* Remove le
                    ading spaces */
 13933                        L10300:
 13934                        	.line	3188
 13935 08:33F2: 64 1D        	stz	<L550+si_1
 13936 08:33F4: 82 02 00     	brl	L10304
 13937                        L10303:
 13938                        	.line	3188
 13939                        L10301:
 13940 08:33F7: E6 1D        	inc	<L550+si_1
 13941                        L10304:
 13942 08:33F9: A5 1D        	lda	<L550+si_1
 13943 08:33FB: 85 05        	sta	<R1
 13944 08:33FD: 64 07        	stz	<R1+2
 13945 08:33FF: D4 07        	pei	<R1+2
 13946 08:3401: D4 05        	pei	<R1
 13947 08:3403: A9 01 00     	lda	#$1
 13948                        	xref	~~~lasl
 13949 08:3406: 22 xx xx xx  	jsl	~~~lasl
 13950 08:340A: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 267


 13951 08:340C: 86 03        	stx	<R0+2
 13952 08:340E: 18           	clc
 13953 08:340F: A5 11        	lda	<L550+lfn_1
 13954 08:3411: 65 01        	adc	<R0
 13955 08:3413: 85 09        	sta	<R2
 13956 08:3415: A5 13        	lda	<L550+lfn_1+2
 13957 08:3417: 65 03        	adc	<R0+2
 13958 08:3419: 85 0B        	sta	<R2+2
 13959 08:341B: A7 09        	lda	[<R2]
 13960 08:341D: C9 20 00     	cmp	#<$20
 13961 08:3420: D0 03        	bne	L572
 13962 08:3422: 82 D2 FF     	brl	L10303
 13963                        L572:
 13964                        L10302:
 13965                        ;	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS
                    _LFN; /* Is there any leading space or dot? */
 13966                        	.line	3189
 13967 08:3425: A9 00 00     	lda	#$0
 13968 08:3428: C5 1D        	cmp	<L550+si_1
 13969 08:342A: B0 03        	bcs	L574
 13970 08:342C: 82 2C 00     	brl	L573
 13971                        L574:
 13972 08:342F: A5 1D        	lda	<L550+si_1
 13973 08:3431: 85 05        	sta	<R1
 13974 08:3433: 64 07        	stz	<R1+2
 13975 08:3435: D4 07        	pei	<R1+2
 13976 08:3437: D4 05        	pei	<R1
 13977 08:3439: A9 01 00     	lda	#$1
 13978                        	xref	~~~lasl
 13979 08:343C: 22 xx xx xx  	jsl	~~~lasl
 13980 08:3440: 85 01        	sta	<R0
 13981 08:3442: 86 03        	stx	<R0+2
 13982 08:3444: 18           	clc
 13983 08:3445: A5 11        	lda	<L550+lfn_1
 13984 08:3447: 65 01        	adc	<R0
 13985 08:3449: 85 09        	sta	<R2
 13986 08:344B: A5 13        	lda	<L550+lfn_1+2
 13987 08:344D: 65 03        	adc	<R0+2
 13988 08:344F: 85 0B        	sta	<R2+2
 13989 08:3451: A7 09        	lda	[<R2]
 13990 08:3453: C9 2E 00     	cmp	#<$2e
 13991 08:3456: F0 03        	beq	L575
 13992 08:3458: 82 08 00     	brl	L10305
 13993                        L575:
 13994                        L573:
 13995                        	.line	3189
 13996 08:345B: E2 20        	sep	#$20
 13997                        	longa	off
 13998 08:345D: A9 03        	lda	#$3
 13999 08:345F: 04 0E        	tsb	<L550+cf_1
 14000 08:3461: C2 20        	rep	#$20
 14001                        	longa	on
 14002                        ;	while (di > 0 && lfn[di - 1] != '.') di--; /* Fi
                    nd last dot (di<=si: no extension) */
 14003                        L10305:
 14004                        	.line	3190
 14005                        L10306:
 14006 08:3463: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 268


 14007 08:3466: C5 1F        	cmp	<L550+di_1
 14008 08:3468: 90 03        	bcc	L576
 14009 08:346A: 82 39 00     	brl	L10307
 14010                        L576:
 14011 08:346D: 18           	clc
 14012 08:346E: A9 FF FF     	lda	#$ffff
 14013 08:3471: 65 1F        	adc	<L550+di_1
 14014 08:3473: 85 05        	sta	<R1
 14015 08:3475: A5 05        	lda	<R1
 14016 08:3477: 85 05        	sta	<R1
 14017 08:3479: 64 07        	stz	<R1+2
 14018 08:347B: D4 07        	pei	<R1+2
 14019 08:347D: D4 05        	pei	<R1
 14020 08:347F: A9 01 00     	lda	#$1
 14021                        	xref	~~~lasl
 14022 08:3482: 22 xx xx xx  	jsl	~~~lasl
 14023 08:3486: 85 01        	sta	<R0
 14024 08:3488: 86 03        	stx	<R0+2
 14025 08:348A: 18           	clc
 14026 08:348B: A5 11        	lda	<L550+lfn_1
 14027 08:348D: 65 01        	adc	<R0
 14028 08:348F: 85 09        	sta	<R2
 14029 08:3491: A5 13        	lda	<L550+lfn_1+2
 14030 08:3493: 65 03        	adc	<R0+2
 14031 08:3495: 85 0B        	sta	<R2+2
 14032 08:3497: A7 09        	lda	[<R2]
 14033 08:3499: C9 2E 00     	cmp	#<$2e
 14034 08:349C: D0 03        	bne	L577
 14035 08:349E: 82 05 00     	brl	L10307
 14036                        L577:
 14037                        	.line	3190
 14038 08:34A1: C6 1F        	dec	<L550+di_1
 14039 08:34A3: 82 BD FF     	brl	L10306
 14040                        L10307:
 14041                        ;
 14042                        ;	mem_set(dp->fn, ' ', 11);
 14043                        	.line	3192
 14044 08:34A6: F4 0B 00     	pea	#<$b
 14045 08:34A9: F4 20 00     	pea	#<$20
 14046 08:34AC: 18           	clc
 14047 08:34AD: A9 20 00     	lda	#$20
 14048 08:34B0: 65 28        	adc	<L549+dp_0
 14049 08:34B2: 85 01        	sta	<R0
 14050 08:34B4: A9 00 00     	lda	#$0
 14051 08:34B7: 65 2A        	adc	<L549+dp_0+2
 14052 08:34B9: 85 03        	sta	<R0+2
 14053 08:34BB: D4 03        	pei	<R0+2
 14054 08:34BD: D4 01        	pei	<R0
 14055 08:34BF: 22 DF 01 08  	jsl	~~mem_set
 14056                        ;	i = b = 0; ni = 8;
 14057                        	.line	3193
 14058 08:34C3: E2 20        	sep	#$20
 14059                        	longa	off
 14060 08:34C5: 64 0D        	stz	<L550+b_1
 14061 08:34C7: C2 20        	rep	#$20
 14062                        	longa	on
 14063 08:34C9: A9 00 00     	lda	#$0
 14064 08:34CC: 29 FF 00     	and	#$ff
  Sat Jul 10 2021  1:15                                                Page 269


 14065 08:34CF: 85 19        	sta	<L550+i_1
 14066                        	.line	3193
 14067 08:34D1: A9 08 00     	lda	#$8
 14068 08:34D4: 85 1B        	sta	<L550+ni_1
 14069                        ;	for (;;)
 14070                        	.line	3194
 14071                        L10310:
 14072                        ;	{
 14073                        	.line	3195
 14074                        ;		wc = lfn[si++]; /* Get an LFN character 
                    */
 14075                        	.line	3196
 14076 08:34D6: A5 1D        	lda	<L550+si_1
 14077 08:34D8: 85 05        	sta	<R1
 14078 08:34DA: 64 07        	stz	<R1+2
 14079 08:34DC: D4 07        	pei	<R1+2
 14080 08:34DE: D4 05        	pei	<R1
 14081 08:34E0: A9 01 00     	lda	#$1
 14082                        	xref	~~~lasl
 14083 08:34E3: 22 xx xx xx  	jsl	~~~lasl
 14084 08:34E7: 85 01        	sta	<R0
 14085 08:34E9: 86 03        	stx	<R0+2
 14086 08:34EB: 18           	clc
 14087 08:34EC: A5 11        	lda	<L550+lfn_1
 14088 08:34EE: 65 01        	adc	<R0
 14089 08:34F0: 85 09        	sta	<R2
 14090 08:34F2: A5 13        	lda	<L550+lfn_1+2
 14091 08:34F4: 65 03        	adc	<R0+2
 14092 08:34F6: 85 0B        	sta	<R2+2
 14093 08:34F8: A7 09        	lda	[<R2]
 14094 08:34FA: 85 0F        	sta	<L550+wc_1
 14095 08:34FC: E6 1D        	inc	<L550+si_1
 14096                        ;		if (wc == 0) break; /* Break on end of t
                    he LFN */
 14097                        	.line	3197
 14098 08:34FE: A5 0F        	lda	<L550+wc_1
 14099 08:3500: D0 03        	bne	L578
 14100 08:3502: 82 87 01     	brl	L10309
 14101                        L578:
 14102                        ;		if (wc == ' ' || (wc == '.' && si != di)
                    )
 14103                        	.line	3198
 14104                        ;		{ /* Remove embedded spaces and dots */
 14105 08:3505: A5 0F        	lda	<L550+wc_1
 14106 08:3507: C9 20 00     	cmp	#<$20
 14107 08:350A: D0 03        	bne	L580
 14108 08:350C: 82 13 00     	brl	L579
 14109                        L580:
 14110 08:350F: A5 0F        	lda	<L550+wc_1
 14111 08:3511: C9 2E 00     	cmp	#<$2e
 14112 08:3514: F0 03        	beq	L581
 14113 08:3516: 82 14 00     	brl	L10311
 14114                        L581:
 14115 08:3519: A5 1D        	lda	<L550+si_1
 14116 08:351B: C5 1F        	cmp	<L550+di_1
 14117 08:351D: D0 03        	bne	L582
 14118 08:351F: 82 0B 00     	brl	L10311
 14119                        L582:
  Sat Jul 10 2021  1:15                                                Page 270


 14120                        L579:
 14121                        	.line	3199
 14122                        ;			cf |= NS_LOSS | NS_LFN;
 14123                        	.line	3200
 14124 08:3522: E2 20        	sep	#$20
 14125                        	longa	off
 14126 08:3524: A9 03        	lda	#$3
 14127 08:3526: 04 0E        	tsb	<L550+cf_1
 14128 08:3528: C2 20        	rep	#$20
 14129                        	longa	on
 14130                        ;			continue;
 14131                        	.line	3201
 14132 08:352A: 82 5C 01     	brl	L10308
 14133                        ;		}
 14134                        	.line	3202
 14135                        ;
 14136                        ;		if (i >= ni || si == di)
 14137                        L10311:
 14138                        	.line	3204
 14139                        ;		{ /* End of field? */
 14140 08:352D: A5 19        	lda	<L550+i_1
 14141 08:352F: C5 1B        	cmp	<L550+ni_1
 14142 08:3531: 90 03        	bcc	L584
 14143 08:3533: 82 09 00     	brl	L583
 14144                        L584:
 14145 08:3536: A5 1D        	lda	<L550+si_1
 14146 08:3538: C5 1F        	cmp	<L550+di_1
 14147 08:353A: F0 03        	beq	L585
 14148 08:353C: 82 48 00     	brl	L10312
 14149                        L585:
 14150                        L583:
 14151                        	.line	3205
 14152                        ;			if (ni == 11)
 14153                        	.line	3206
 14154                        ;			{ /* Name extension overflow? */
 14155 08:353F: A5 1B        	lda	<L550+ni_1
 14156 08:3541: C9 0B 00     	cmp	#<$b
 14157 08:3544: F0 03        	beq	L586
 14158 08:3546: 82 0B 00     	brl	L10313
 14159                        L586:
 14160                        	.line	3207
 14161                        ;				cf |= NS_LOSS | NS_LFN;
 14162                        	.line	3208
 14163 08:3549: E2 20        	sep	#$20
 14164                        	longa	off
 14165 08:354B: A9 03        	lda	#$3
 14166 08:354D: 04 0E        	tsb	<L550+cf_1
 14167 08:354F: C2 20        	rep	#$20
 14168                        	longa	on
 14169                        ;				break;
 14170                        	.line	3209
 14171 08:3551: 82 38 01     	brl	L10309
 14172                        ;			}
 14173                        	.line	3210
 14174                        ;			if (si != di) cf |= NS_LOSS | NS
                    _LFN; /* Name body overflow? */
 14175                        L10313:
 14176                        	.line	3211
  Sat Jul 10 2021  1:15                                                Page 271


 14177 08:3554: A5 1D        	lda	<L550+si_1
 14178 08:3556: C5 1F        	cmp	<L550+di_1
 14179 08:3558: D0 03        	bne	L587
 14180 08:355A: 82 08 00     	brl	L10314
 14181                        L587:
 14182                        	.line	3211
 14183 08:355D: E2 20        	sep	#$20
 14184                        	longa	off
 14185 08:355F: A9 03        	lda	#$3
 14186 08:3561: 04 0E        	tsb	<L550+cf_1
 14187 08:3563: C2 20        	rep	#$20
 14188                        	longa	on
 14189                        ;			if (si > di) break; /* No name e
                    xtension? */
 14190                        L10314:
 14191                        	.line	3212
 14192 08:3565: A5 1F        	lda	<L550+di_1
 14193 08:3567: C5 1D        	cmp	<L550+si_1
 14194 08:3569: B0 03        	bcs	L588
 14195 08:356B: 82 1E 01     	brl	L10309
 14196                        L588:
 14197                        ;			si = di; i = 8; ni = 11; b <<= 2
                    ; /* Enter name extension */
 14198                        	.line	3213
 14199 08:356E: A5 1F        	lda	<L550+di_1
 14200 08:3570: 85 1D        	sta	<L550+si_1
 14201                        	.line	3213
 14202 08:3572: A9 08 00     	lda	#$8
 14203 08:3575: 85 19        	sta	<L550+i_1
 14204                        	.line	3213
 14205 08:3577: A9 0B 00     	lda	#$b
 14206 08:357A: 85 1B        	sta	<L550+ni_1
 14207                        	.line	3213
 14208 08:357C: E2 20        	sep	#$20
 14209                        	longa	off
 14210 08:357E: 06 0D        	asl	<L550+b_1
 14211 08:3580: 06 0D        	asl	<L550+b_1
 14212 08:3582: C2 20        	rep	#$20
 14213                        	longa	on
 14214                        ;			continue;
 14215                        	.line	3214
 14216 08:3584: 82 02 01     	brl	L10308
 14217                        ;		}
 14218                        	.line	3215
 14219                        ;
 14220                        ;		if (wc >= 0x80)
 14221                        L10312:
 14222                        	.line	3217
 14223                        ;		{ /* Is this a non-ASCII character? */
 14224 08:3587: A5 0F        	lda	<L550+wc_1
 14225 08:3589: C9 80 00     	cmp	#<$80
 14226 08:358C: B0 03        	bcs	L589
 14227 08:358E: 82 36 00     	brl	L10315
 14228                        L589:
 14229                        	.line	3218
 14230                        ;			cf |= NS_LFN; /* LFN entry needs
                     to be created */
 14231                        	.line	3219
  Sat Jul 10 2021  1:15                                                Page 272


 14232 08:3591: E2 20        	sep	#$20
 14233                        	longa	off
 14234 08:3593: A9 02        	lda	#$2
 14235 08:3595: 04 0E        	tsb	<L550+cf_1
 14236 08:3597: C2 20        	rep	#$20
 14237                        	longa	on
 14238                        ;#if FF_CODE_PAGE == 0
 14239                        ;			if (ExCvt)
 14240                        ;			{ /* At SBCS */
 14241                        ;				wc = ff_uni2oem(wc, CODE
                    PAGE); /* Unicode ==> ANSI/OEM code */
 14242                        ;				if (wc & 0x80) wc = ExCv
                    t[wc & 0x7F]; /* Convert extended character to upper (SBCS) 
                    */
 14243                        ;			}
 14244                        ;			else
 14245                        ;			{ /* At DBCS */
 14246                        ;				wc = ff_uni2oem(ff_wtoup
                    per(wc), CODEPAGE); /* Unicode ==> Upper convert ==> ANSI/OE
                    M code */
 14247                        ;			}
 14248                        ;#elif FF_CODE_PAGE < 900	/* SBCS cfg */
 14249                        ;			wc = ff_uni2oem(wc, CODEPAGE); /
                    * Unicode ==> ANSI/OEM code */
 14250                        	.line	3231
 14251 08:3599: F4 B5 01     	pea	#<$1b5
 14252 08:359C: A5 0F        	lda	<L550+wc_1
 14253 08:359E: 85 01        	sta	<R0
 14254 08:35A0: 64 03        	stz	<R0+2
 14255 08:35A2: D4 03        	pei	<R0+2
 14256 08:35A4: D4 01        	pei	<R0
 14257 08:35A6: 22 71 92 08  	jsl	~~ff_uni2oem
 14258 08:35AA: 85 0F        	sta	<L550+wc_1
 14259                        ;			if (wc & 0x80) wc = ExCvt[wc & 0
                    x7F]; /* Convert extended character to upper (SBCS) */
 14260                        	.line	3232
 14261 08:35AC: A5 0F        	lda	<L550+wc_1
 14262 08:35AE: 29 80 00     	and	#<$80
 14263 08:35B1: D0 03        	bne	L590
 14264 08:35B3: 82 11 00     	brl	L10316
 14265                        L590:
 14266                        	.line	3232
 14267 08:35B6: A5 0F        	lda	<L550+wc_1
 14268 08:35B8: 29 7F 00     	and	#<$7f
 14269 08:35BB: 85 01        	sta	<R0
 14270 08:35BD: A6 01        	ldx	<R0
 14271 08:35BF: BD xx xx     	lda	|~~ExCvt,X
 14272 08:35C2: 29 FF 00     	and	#$ff
 14273 08:35C5: 85 0F        	sta	<L550+wc_1
 14274                        ;#else						
                    /* DBCS cfg */
 14275                        ;			wc = ff_uni2oem(ff_wtoupper(wc),
                     CODEPAGE); /* Unicode ==> Upper convert ==> ANSI/OEM code *
                    /
 14276                        ;#endif
 14277                        ;		}
 14278                        L10316:
 14279                        	.line	3236
  Sat Jul 10 2021  1:15                                                Page 273


 14280                        ;
 14281                        ;		if (wc >= 0x100)
 14282                        L10315:
 14283                        	.line	3238
 14284                        ;		{ /* Is this a DBC? */
 14285 08:35C7: A5 0F        	lda	<L550+wc_1
 14286 08:35C9: C9 00 01     	cmp	#<$100
 14287 08:35CC: B0 03        	bcs	L591
 14288 08:35CE: 82 3B 00     	brl	L10317
 14289                        L591:
 14290                        	.line	3239
 14291                        ;			if (i >= ni - 1)
 14292                        	.line	3240
 14293                        ;			{ /* Field overflow? */
 14294 08:35D1: 18           	clc
 14295 08:35D2: A9 FF FF     	lda	#$ffff
 14296 08:35D5: 65 1B        	adc	<L550+ni_1
 14297 08:35D7: 85 01        	sta	<R0
 14298 08:35D9: A5 19        	lda	<L550+i_1
 14299 08:35DB: C5 01        	cmp	<R0
 14300 08:35DD: B0 03        	bcs	L592
 14301 08:35DF: 82 0F 00     	brl	L10318
 14302                        L592:
 14303                        	.line	3241
 14304                        ;				cf |= NS_LOSS | NS_LFN;
 14305                        	.line	3242
 14306 08:35E2: E2 20        	sep	#$20
 14307                        	longa	off
 14308 08:35E4: A9 03        	lda	#$3
 14309 08:35E6: 04 0E        	tsb	<L550+cf_1
 14310 08:35E8: C2 20        	rep	#$20
 14311                        	longa	on
 14312                        ;				i = ni; continue; /* Nex
                    t field */
 14313                        	.line	3243
 14314 08:35EA: A5 1B        	lda	<L550+ni_1
 14315 08:35EC: 85 19        	sta	<L550+i_1
 14316                        	.line	3243
 14317 08:35EE: 82 98 00     	brl	L10308
 14318                        ;			}
 14319                        	.line	3244
 14320                        ;			dp->fn[i++] = (BYTE)(wc >> 8); /
                    * Put 1st byte */
 14321                        L10318:
 14322                        	.line	3245
 14323 08:35F1: 18           	clc
 14324 08:35F2: A9 20 00     	lda	#$20
 14325 08:35F5: 65 19        	adc	<L550+i_1
 14326 08:35F7: 85 01        	sta	<R0
 14327 08:35F9: A5 0F        	lda	<L550+wc_1
 14328 08:35FB: EB           	xba
 14329 08:35FC: 29 FF 00     	and	#$00ff
 14330 08:35FF: E2 20        	sep	#$20
 14331                        	longa	off
 14332 08:3601: A4 01        	ldy	<R0
 14333 08:3603: 97 28        	sta	[<L549+dp_0],Y
 14334 08:3605: C2 20        	rep	#$20
 14335                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 274


 14336 08:3607: E6 19        	inc	<L550+i_1
 14337                        ;		}
 14338                        	.line	3246
 14339                        ;		else
 14340 08:3609: 82 69 00     	brl	L10319
 14341                        L10317:
 14342                        ;		{ /* SBC */
 14343                        	.line	3248
 14344                        ;			if (wc == 0 || chk_chr("+,;=[]",
                     wc))
 14345                        	.line	3249
 14346                        ;			{ /* Replace illegal characters 
                    for SFN if needed */
 14347 08:360C: A5 0F        	lda	<L550+wc_1
 14348 08:360E: D0 03        	bne	L594
 14349 08:3610: 82 12 00     	brl	L593
 14350                        L594:
 14351 08:3613: D4 0F        	pei	<L550+wc_1
 14352 08:3615: F4 xx xx     	pea	#^L122+9
 14353 08:3618: F4 xx xx     	pea	#<L122+9
 14354 08:361B: 22 75 02 08  	jsl	~~chk_chr
 14355 08:361F: AA           	tax
 14356 08:3620: D0 03        	bne	L595
 14357 08:3622: 82 10 00     	brl	L10320
 14358                        L595:
 14359                        L593:
 14360                        	.line	3250
 14361                        ;				wc = '_'; cf |= NS_LOSS 
                    | NS_LFN;/* Lossy conversion */
 14362                        	.line	3251
 14363 08:3625: A9 5F 00     	lda	#$5f
 14364 08:3628: 85 0F        	sta	<L550+wc_1
 14365                        	.line	3251
 14366 08:362A: E2 20        	sep	#$20
 14367                        	longa	off
 14368 08:362C: A9 03        	lda	#$3
 14369 08:362E: 04 0E        	tsb	<L550+cf_1
 14370 08:3630: C2 20        	rep	#$20
 14371                        	longa	on
 14372                        ;			}
 14373                        	.line	3252
 14374                        ;			else
 14375 08:3632: 82 40 00     	brl	L10321
 14376                        L10320:
 14377                        ;			{
 14378                        	.line	3254
 14379                        ;				if (IsUpper(wc))
 14380                        	.line	3255
 14381                        ;				{ /* ASCII upper case? *
                    /
 14382 08:3635: A5 0F        	lda	<L550+wc_1
 14383 08:3637: C9 41 00     	cmp	#<$41
 14384 08:363A: B0 03        	bcs	L596
 14385 08:363C: 82 12 00     	brl	L10322
 14386                        L596:
 14387 08:363F: A9 5A 00     	lda	#$5a
 14388 08:3642: C5 0F        	cmp	<L550+wc_1
 14389 08:3644: B0 03        	bcs	L597
  Sat Jul 10 2021  1:15                                                Page 275


 14390 08:3646: 82 08 00     	brl	L10322
 14391                        L597:
 14392                        	.line	3256
 14393                        ;					b |= 2;
 14394                        	.line	3257
 14395 08:3649: E2 20        	sep	#$20
 14396                        	longa	off
 14397 08:364B: A9 02        	lda	#$2
 14398 08:364D: 04 0D        	tsb	<L550+b_1
 14399 08:364F: C2 20        	rep	#$20
 14400                        	longa	on
 14401                        ;				}
 14402                        	.line	3258
 14403                        ;				if (IsLower(wc))
 14404                        L10322:
 14405                        	.line	3259
 14406                        ;				{ /* ASCII lower case? *
                    /
 14407 08:3651: A5 0F        	lda	<L550+wc_1
 14408 08:3653: C9 61 00     	cmp	#<$61
 14409 08:3656: B0 03        	bcs	L598
 14410 08:3658: 82 1A 00     	brl	L10323
 14411                        L598:
 14412 08:365B: A9 7A 00     	lda	#$7a
 14413 08:365E: C5 0F        	cmp	<L550+wc_1
 14414 08:3660: B0 03        	bcs	L599
 14415 08:3662: 82 10 00     	brl	L10323
 14416                        L599:
 14417                        	.line	3260
 14418                        ;					b |= 1; wc -= 0x
                    20;
 14419                        	.line	3261
 14420 08:3665: E2 20        	sep	#$20
 14421                        	longa	off
 14422 08:3667: A9 01        	lda	#$1
 14423 08:3669: 04 0D        	tsb	<L550+b_1
 14424 08:366B: C2 20        	rep	#$20
 14425                        	longa	on
 14426                        	.line	3261
 14427 08:366D: 18           	clc
 14428 08:366E: A9 E0 FF     	lda	#$ffe0
 14429 08:3671: 65 0F        	adc	<L550+wc_1
 14430 08:3673: 85 0F        	sta	<L550+wc_1
 14431                        ;				}
 14432                        	.line	3262
 14433                        ;			}
 14434                        L10323:
 14435                        	.line	3263
 14436                        L10321:
 14437                        ;		}
 14438                        	.line	3264
 14439                        L10319:
 14440                        ;		dp->fn[i++] = (BYTE)wc;
 14441                        	.line	3265
 14442 08:3675: 18           	clc
 14443 08:3676: A9 20 00     	lda	#$20
 14444 08:3679: 65 19        	adc	<L550+i_1
 14445 08:367B: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 276


 14446 08:367D: E2 20        	sep	#$20
 14447                        	longa	off
 14448 08:367F: A5 0F        	lda	<L550+wc_1
 14449 08:3681: A4 01        	ldy	<R0
 14450 08:3683: 97 28        	sta	[<L549+dp_0],Y
 14451 08:3685: C2 20        	rep	#$20
 14452                        	longa	on
 14453 08:3687: E6 19        	inc	<L550+i_1
 14454                        ;	}
 14455                        	.line	3266
 14456                        L10308:
 14457 08:3689: 82 4A FE     	brl	L10310
 14458                        L10309:
 14459                        ;
 14460                        ;	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM; /* If 
                    the first character collides with DDEM, replace it with RDDE
                    M */
 14461                        	.line	3268
 14462 08:368C: E2 20        	sep	#$20
 14463                        	longa	off
 14464 08:368E: A0 20 00     	ldy	#$20
 14465 08:3691: B7 28        	lda	[<L549+dp_0],Y
 14466 08:3693: C9 E5        	cmp	#<$e5
 14467 08:3695: C2 20        	rep	#$20
 14468                        	longa	on
 14469 08:3697: F0 03        	beq	L600
 14470 08:3699: 82 0B 00     	brl	L10324
 14471                        L600:
 14472                        	.line	3268
 14473 08:369C: E2 20        	sep	#$20
 14474                        	longa	off
 14475 08:369E: A9 05        	lda	#$5
 14476 08:36A0: A0 20 00     	ldy	#$20
 14477 08:36A3: 97 28        	sta	[<L549+dp_0],Y
 14478 08:36A5: C2 20        	rep	#$20
 14479                        	longa	on
 14480                        ;
 14481                        ;	if (ni == 8) b <<= 2; /* Shift capital flags if 
                    no extension */
 14482                        L10324:
 14483                        	.line	3270
 14484 08:36A7: A5 1B        	lda	<L550+ni_1
 14485 08:36A9: C9 08 00     	cmp	#<$8
 14486 08:36AC: F0 03        	beq	L601
 14487 08:36AE: 82 08 00     	brl	L10325
 14488                        L601:
 14489                        	.line	3270
 14490 08:36B1: E2 20        	sep	#$20
 14491                        	longa	off
 14492 08:36B3: 06 0D        	asl	<L550+b_1
 14493 08:36B5: 06 0D        	asl	<L550+b_1
 14494 08:36B7: C2 20        	rep	#$20
 14495                        	longa	on
 14496                        ;	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf
                     |= NS_LFN; /* LFN entry needs to be created if composite ca
                    pitals */
 14497                        L10325:
 14498                        	.line	3271
  Sat Jul 10 2021  1:15                                                Page 277


 14499 08:36B9: A5 0D        	lda	<L550+b_1
 14500 08:36BB: 29 0C 00     	and	#<$c
 14501 08:36BE: 85 01        	sta	<R0
 14502 08:36C0: A5 01        	lda	<R0
 14503 08:36C2: C9 0C 00     	cmp	#<$c
 14504 08:36C5: D0 03        	bne	L603
 14505 08:36C7: 82 11 00     	brl	L602
 14506                        L603:
 14507 08:36CA: A5 0D        	lda	<L550+b_1
 14508 08:36CC: 29 03 00     	and	#<$3
 14509 08:36CF: 85 01        	sta	<R0
 14510 08:36D1: A5 01        	lda	<R0
 14511 08:36D3: C9 03 00     	cmp	#<$3
 14512 08:36D6: F0 03        	beq	L604
 14513 08:36D8: 82 08 00     	brl	L10326
 14514                        L604:
 14515                        L602:
 14516                        	.line	3271
 14517 08:36DB: E2 20        	sep	#$20
 14518                        	longa	off
 14519 08:36DD: A9 02        	lda	#$2
 14520 08:36DF: 04 0E        	tsb	<L550+cf_1
 14521 08:36E1: C2 20        	rep	#$20
 14522                        	longa	on
 14523                        ;	if (!(cf & NS_LFN))
 14524                        L10326:
 14525                        	.line	3272
 14526                        ;	{ /* When LFN is in 8.3 format without extended 
                    character, NT flags are created */
 14527 08:36E3: E2 20        	sep	#$20
 14528                        	longa	off
 14529 08:36E5: A5 0E        	lda	<L550+cf_1
 14530 08:36E7: 29 02        	and	#<$2
 14531 08:36E9: C2 20        	rep	#$20
 14532                        	longa	on
 14533 08:36EB: F0 03        	beq	L605
 14534 08:36ED: 82 2A 00     	brl	L10327
 14535                        L605:
 14536                        	.line	3273
 14537                        ;		if (b & 0x01) cf |= NS_EXT; /* NT flag (
                    Extension has small capital letters only) */
 14538                        	.line	3274
 14539 08:36F0: E2 20        	sep	#$20
 14540                        	longa	off
 14541 08:36F2: A5 0D        	lda	<L550+b_1
 14542 08:36F4: 29 01        	and	#<$1
 14543 08:36F6: C2 20        	rep	#$20
 14544                        	longa	on
 14545 08:36F8: D0 03        	bne	L606
 14546 08:36FA: 82 08 00     	brl	L10328
 14547                        L606:
 14548                        	.line	3274
 14549 08:36FD: E2 20        	sep	#$20
 14550                        	longa	off
 14551 08:36FF: A9 10        	lda	#$10
 14552 08:3701: 04 0E        	tsb	<L550+cf_1
 14553 08:3703: C2 20        	rep	#$20
 14554                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 278


 14555                        ;		if (b & 0x04) cf |= NS_BODY; /* NT flag 
                    (Body has small capital letters only) */
 14556                        L10328:
 14557                        	.line	3275
 14558 08:3705: E2 20        	sep	#$20
 14559                        	longa	off
 14560 08:3707: A5 0D        	lda	<L550+b_1
 14561 08:3709: 29 04        	and	#<$4
 14562 08:370B: C2 20        	rep	#$20
 14563                        	longa	on
 14564 08:370D: D0 03        	bne	L607
 14565 08:370F: 82 08 00     	brl	L10329
 14566                        L607:
 14567                        	.line	3275
 14568 08:3712: E2 20        	sep	#$20
 14569                        	longa	off
 14570 08:3714: A9 08        	lda	#$8
 14571 08:3716: 04 0E        	tsb	<L550+cf_1
 14572 08:3718: C2 20        	rep	#$20
 14573                        	longa	on
 14574                        ;	}
 14575                        L10329:
 14576                        	.line	3276
 14577                        ;
 14578                        ;	dp->fn[NSFLAG] = cf; /* SFN is created into dp->
                    fn[] */
 14579                        L10327:
 14580                        	.line	3278
 14581 08:371A: E2 20        	sep	#$20
 14582                        	longa	off
 14583 08:371C: A5 0E        	lda	<L550+cf_1
 14584 08:371E: A0 2B 00     	ldy	#$2b
 14585 08:3721: 97 28        	sta	[<L549+dp_0],Y
 14586 08:3723: C2 20        	rep	#$20
 14587                        	longa	on
 14588                        ;
 14589                        ;	return FR_OK;
 14590                        	.line	3280
 14591 08:3725: A9 00 00     	lda	#$0
 14592 08:3728: 82 25 FB     	brl	L554
 14593                        ;
 14594                        ;#else	/* FF_USE_LFN : Non-LFN configuration */
 14595                        ;	BYTE c, d, *sfn;
 14596                        ;	UINT ni, si, i;
 14597                        ;	const char *p;
 14598                        ;
 14599                        ;	/* Create file name in directory form */
 14600                        ;	p = *path;
 14601                        ;	sfn = dp->fn;
 14602                        ;	mem_set(sfn, ' ', 11);
 14603                        ;	si = i = 0;
 14604                        ;	ni = 8;
 14605                        ;#if FF_FS_RPATH != 0
 14606                        ;	if (p[si] == '.')
 14607                        ;	{ /* Is this a dot entry? */
 14608                        ;		for (;;)
 14609                        ;		{
 14610                        ;			c = (BYTE)p[si++];
  Sat Jul 10 2021  1:15                                                Page 279


 14611                        ;			if (c != '.' || si >= 3) break;
 14612                        ;			sfn[i++] = c;
 14613                        ;		}
 14614                        ;		if (c != '/' && c != '\\' && c > ' ') re
                    turn FR_INVALID_NAME;
 14615                        ;		*path = p + si; /* Return pointer to the
                     next segment */
 14616                        ;		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_
                    DOT : NS_DOT; /* Set last segment flag if end of the path */
 14617                        ;		return FR_OK;
 14618                        ;	}
 14619                        ;#endif
 14620                        ;	for (;;)
 14621                        ;	{
 14622                        ;		c = (BYTE) p[si++]; /* Get a byte */
 14623                        ;		if (c <= ' ')
 14624                        ;			break; /* Break if end of the pa
                    th name */
 14625                        ;		if (c == '/' || c == '\\')
 14626                        ;		{ /* Break if a separator is found */
 14627                        ;			while (p[si] == '/' || p[si] == 
                    '\\')
 14628                        ;				si++; /* Skip duplicated
                     separator if exist */
 14629                        ;			break;
 14630                        ;		}
 14631                        ;		if (c == '.' || i >= ni)
 14632                        ;		{ /* End of body or field overflow? */
 14633                        ;			if (ni == 11 || c != '.')
 14634                        ;				return FR_INVALID_NAME; 
                    /* Field overflow or invalid dot? */
 14635                        ;			i = 8;
 14636                        ;			ni = 11; /* Enter file extension
                     field */
 14637                        ;			continue;
 14638                        ;		}
 14639                        ;#if FF_CODE_PAGE == 0
 14640                        ;		if (ExCvt && c >= 0x80)
 14641                        ;		{ /* Is SBC extended character? */
 14642                        ;			c = ExCvt[c & 0x7F]; /* To upper
                     SBC extended character */
 14643                        ;		}
 14644                        ;#elif FF_CODE_PAGE < 900
 14645                        ;		if (c >= 0x80)
 14646                        ;		{ /* Is SBC extended character? */
 14647                        ;			c = ExCvt[c & 0x7F]; /* To upper
                     SBC extended character */
 14648                        ;		}
 14649                        ;#endif
 14650                        ;		if (dbc_1st(c))
 14651                        ;		{ /* Check if it is a DBC 1st byte */
 14652                        ;			d = (BYTE) p[si++]; /* Get 2nd b
                    yte */
 14653                        ;			if (!dbc_2nd(d) || i >= ni - 1)
 14654                        ;				return FR_INVALID_NAME; 
                    /* Reject invalid DBC */
 14655                        ;			sfn[i++] = c;
 14656                        ;			sfn[i++] = d;
  Sat Jul 10 2021  1:15                                                Page 280


 14657                        ;		}
 14658                        ;		else
 14659                        ;		{ /* SBC */
 14660                        ;			if (chk_chr("\"*+,:;<=>\?[]|\x7F
                    ", c))
 14661                        ;				return FR_INVALID_NAME; 
                    /* Reject illegal chrs for SFN */
 14662                        ;			if (IsLower(c))
 14663                        ;				c -= 0x20; /* To upper *
                    /
 14664                        ;			sfn[i++] = c;
 14665                        ;		}
 14666                        ;	}
 14667                        ;	*path = p + si; /* Return pointer to the next se
                    gment */
 14668                        ;	if (i == 0)
 14669                        ;		return FR_INVALID_NAME; /* Reject nul st
                    ring */
 14670                        ;
 14671                        ;	if (sfn[0] == DDEM)
 14672                        ;		sfn[0] = RDDEM; /* If the first characte
                    r collides with DDEM, replace it with RDDEM */
 14673                        ;	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0; /* Set l
                    ast segment flag if end of the path */
 14674                        ;
 14675                        ;	return FR_OK;
 14676                        ;#endif /* FF_USE_LFN */
 14677                        ;}
 14678                        	.line	3365
 14679                        	.endblock	3365
 14680             00000024   L549	equ	36
 14681             0000000D   L550	equ	13
 14682 08:372B:              	ends
 14683                        	efunc
 14684                        	.endfunc	3365,13,36
 14685                        	.line	3365
 14686                        	data
 14687                        L122:
 14688 00:00FC: 22 2A 3A 3C  	db	$22,$2A,$3A,$3C,$3E,$3F,$7C,$7F,$00,$2B,
                    $2C,$3B,$3D,$5B,$5D
       00:0100: 3E 3F 7C 7F 
       00:0104: 00 2B 2C 3B 
       00:0108: 3D 5B 5D 
 14689 00:010B: 00           	db	$00
 14690 00:010C:              	ends
 14691                        ;
 14692                        ;/*-----------------------------------------------
                    ------------------------*/
 14693                        ;/* Follow a file path                            
                                            */
 14694                        ;/*-----------------------------------------------
                    ------------------------*/
 14695                        ;
 14696                        ;static FRESULT follow_path( /* FR_OK(0): successf
                    ul, !=0: error code */
 14697                        ;DIR* dp, /* Directory object to return last direc
                    tory and found object */
 14698                        ;const TCHAR* path /* Full-path string to find a f
  Sat Jul 10 2021  1:15                                                Page 281


                    ile or directory */
 14699                        ;)
 14700                        ;{
 14701                        	.line	3371
 14702                        	.line	3375
 14703                        	FFDOS
 14704                        	func
 14705                        	.function	3375
 14706                        ~~follow_path:
 14707                        	longa	on
 14708                        	longi	on
 14709 08:372B: 3B           	tsc
 14710 08:372C: 38           	sec
 14711 08:372D: E9 13 00     	sbc	#L609
 14712 08:3730: 1B           	tcs
 14713 08:3731: 0B           	phd
 14714 08:3732: 5B           	tcd
 14715             00000004   dp_0	set	4
 14716             00000008   path_0	set	8
 14717                        	.block	3375
 14718                        ;	FRESULT res;
 14719                        ;	BYTE ns;
 14720                        ;	FATFS *fs = dp->obj.fs;
 14721                        ;
 14722                        ;	//k_debug_string("follow_path...\r\n");
 14723                        ;
 14724                        ;#if FF_FS_RPATH != 0
 14725                        ;	if (*path != '/' && *path != '\\')
 14726                        ;	{ /* Without heading separator */
 14727                        ;		dp->obj.sclust = fs->cdir; /* Start from
                     current directory */
 14728                        ;	}
 14729                        ;	else
 14730                        ;#endif
 14731                        ;	{ /* With heading separator */
 14732             00000000   res_1	set	0
 14733             00000002   ns_1	set	2
 14734             00000003   fs_1	set	3
 14735                        	.sym	res,0,5,1,16
 14736                        	.sym	ns,2,14,1,8
 14737                        	.sym	fs,3,138,1,32,72
 14738                        	.sym	dp,4,138,6,32,75
 14739                        	.sym	path,8,142,6,32
 14740 08:3733: A7 17        	lda	[<L609+dp_0]
 14741 08:3735: 85 10        	sta	<L610+fs_1
 14742 08:3737: A0 02 00     	ldy	#$2
 14743 08:373A: B7 17        	lda	[<L609+dp_0],Y
 14744 08:373C: 85 12        	sta	<L610+fs_1+2
 14745                        	.line	3389
 14746                        ;		while (*path == '/' || *path == '\\')
 14747                        	.line	3390
 14748                        L10330:
 14749 08:373E: E2 20        	sep	#$20
 14750                        	longa	off
 14751 08:3740: A7 1B        	lda	[<L609+path_0]
 14752 08:3742: C9 2F        	cmp	#<$2f
 14753 08:3744: C2 20        	rep	#$20
 14754                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 282


 14755 08:3746: D0 03        	bne	L613
 14756 08:3748: 82 0D 00     	brl	L612
 14757                        L613:
 14758 08:374B: E2 20        	sep	#$20
 14759                        	longa	off
 14760 08:374D: A7 1B        	lda	[<L609+path_0]
 14761 08:374F: C9 5C        	cmp	#<$5c
 14762 08:3751: C2 20        	rep	#$20
 14763                        	longa	on
 14764 08:3753: F0 03        	beq	L614
 14765 08:3755: 82 09 00     	brl	L10331
 14766                        L614:
 14767                        L612:
 14768                        ;			path++; /* Strip heading separat
                    or */
 14769                        	.line	3391
 14770 08:3758: E6 1B        	inc	<L609+path_0
 14771 08:375A: D0 02        	bne	L615
 14772 08:375C: E6 1D        	inc	<L609+path_0+2
 14773                        L615:
 14774 08:375E: 82 DD FF     	brl	L10330
 14775                        L10331:
 14776                        ;		dp->obj.sclust = 0; /* Start from root d
                    irectory */
 14777                        	.line	3392
 14778 08:3761: A9 00 00     	lda	#$0
 14779 08:3764: A0 08 00     	ldy	#$8
 14780 08:3767: 97 17        	sta	[<L609+dp_0],Y
 14781 08:3769: A9 00 00     	lda	#$0
 14782 08:376C: A0 0A 00     	ldy	#$a
 14783 08:376F: 97 17        	sta	[<L609+dp_0],Y
 14784                        ;	}
 14785                        	.line	3393
 14786                        ;#if FF_FS_EXFAT
 14787                        ;	dp->obj.n_frag = 0; /* Invalidate last fragment 
                    counter of the object */
 14788                        ;#if FF_FS_RPATH != 0
 14789                        ;	if (fs->fs_type == FS_EXFAT && dp->obj.sclust)
 14790                        ;	{ /* exFAT: Retrieve the sub-directory's status 
                    */
 14791                        ;		DIR dj;
 14792                        ;
 14793                        ;		dp->obj.c_scl = fs->cdc_scl;
 14794                        ;		dp->obj.c_size = fs->cdc_size;
 14795                        ;		dp->obj.c_ofs = fs->cdc_ofs;
 14796                        ;		res = load_obj_xdir(&dj, &dp->obj);
 14797                        ;		if (res != FR_OK) return res;
 14798                        ;		dp->obj.objsize = ld_dword(fs->dirbuf + 
                    XDIR_FileSize);
 14799                        ;		dp->obj.stat = fs->dirbuf[XDIR_GenFlags]
                     & 2;
 14800                        ;	}
 14801                        ;#endif
 14802                        ;#endif
 14803                        ;
 14804                        ;	if ((UINT) *path < ' ')
 14805                        	.line	3412
 14806                        ;	{ /* Null path name is the origin directory itse
  Sat Jul 10 2021  1:15                                                Page 283


                    lf */
 14807 08:3771: E2 20        	sep	#$20
 14808                        	longa	off
 14809 08:3773: A7 1B        	lda	[<L609+path_0]
 14810 08:3775: C9 20        	cmp	#<$20
 14811 08:3777: C2 20        	rep	#$20
 14812                        	longa	on
 14813 08:3779: 90 03        	bcc	L616
 14814 08:377B: 82 1E 00     	brl	L10332
 14815                        L616:
 14816                        	.line	3413
 14817                        ;		dp->fn[NSFLAG] = NS_NONAME;
 14818                        	.line	3414
 14819 08:377E: E2 20        	sep	#$20
 14820                        	longa	off
 14821 08:3780: A9 80        	lda	#$80
 14822 08:3782: A0 2B 00     	ldy	#$2b
 14823 08:3785: 97 17        	sta	[<L609+dp_0],Y
 14824 08:3787: C2 20        	rep	#$20
 14825                        	longa	on
 14826                        ;		res = dir_sdi(dp, 0);
 14827                        	.line	3415
 14828 08:3789: F4 00 00     	pea	#^$0
 14829 08:378C: F4 00 00     	pea	#<$0
 14830 08:378F: D4 19        	pei	<L609+dp_0+2
 14831 08:3791: D4 17        	pei	<L609+dp_0
 14832 08:3793: 22 60 17 08  	jsl	~~dir_sdi
 14833 08:3797: 85 0D        	sta	<L610+res_1
 14834                        ;
 14835                        ;	}
 14836                        	.line	3417
 14837                        ;	else
 14838 08:3799: 82 F0 00     	brl	L10333
 14839                        L10332:
 14840                        ;	{ /* Follow path */
 14841                        	.line	3419
 14842                        ;		for (;;)
 14843                        	.line	3420
 14844                        L10336:
 14845                        ;		{
 14846                        	.line	3421
 14847                        ;			res = create_name(dp, &path); /*
                     Get a segment name of the path */
 14848                        	.line	3422
 14849 08:379C: F4 00 00     	pea	#0
 14850 08:379F: 18           	clc
 14851 08:37A0: 7B           	tdc
 14852 08:37A1: 69 1B 00     	adc	#<L609+path_0
 14853 08:37A4: 48           	pha
 14854 08:37A5: D4 19        	pei	<L609+dp_0+2
 14855 08:37A7: D4 17        	pei	<L609+dp_0
 14856 08:37A9: 22 FD 31 08  	jsl	~~create_name
 14857 08:37AD: 85 0D        	sta	<L610+res_1
 14858                        ;			if (res != FR_OK)
 14859                        	.line	3423
 14860                        ;				break;
 14861 08:37AF: A5 0D        	lda	<L610+res_1
 14862 08:37B1: F0 03        	beq	L617
  Sat Jul 10 2021  1:15                                                Page 284


 14863 08:37B3: 82 D6 00     	brl	L10335
 14864                        L617:
 14865                        ;			res = dir_find(dp); /* Find an o
                    bject with the segment name */
 14866                        	.line	3425
 14867 08:37B6: D4 19        	pei	<L609+dp_0+2
 14868 08:37B8: D4 17        	pei	<L609+dp_0
 14869 08:37BA: 22 CC 25 08  	jsl	~~dir_find
 14870 08:37BE: 85 0D        	sta	<L610+res_1
 14871                        ;			ns = dp->fn[NSFLAG];
 14872                        	.line	3426
 14873 08:37C0: E2 20        	sep	#$20
 14874                        	longa	off
 14875 08:37C2: A0 2B 00     	ldy	#$2b
 14876 08:37C5: B7 17        	lda	[<L609+dp_0],Y
 14877 08:37C7: 85 0F        	sta	<L610+ns_1
 14878 08:37C9: C2 20        	rep	#$20
 14879                        	longa	on
 14880                        ;			if (res != FR_OK)
 14881                        	.line	3427
 14882                        ;			{ /* Failed to find the object *
                    /
 14883 08:37CB: A5 0D        	lda	<L610+res_1
 14884 08:37CD: D0 03        	bne	L618
 14885 08:37CF: 82 4C 00     	brl	L10337
 14886                        L618:
 14887                        	.line	3428
 14888                        ;				if (res == FR_NO_FILE)
 14889                        	.line	3429
 14890                        ;				{ /* Object is not found
                     */
 14891 08:37D2: A5 0D        	lda	<L610+res_1
 14892 08:37D4: C9 04 00     	cmp	#<$4
 14893 08:37D7: F0 03        	beq	L619
 14894 08:37D9: 82 3F 00     	brl	L10338
 14895                        L619:
 14896                        	.line	3430
 14897                        ;					if (FF_FS_RPATH 
                    && (ns & NS_DOT))
 14898                        	.line	3431
 14899                        ;					{ /* If dot entr
                    y is not exist, stay there */
 14900 08:37DC: 82 2A 00     	brl	L10339
 14901 08:37DF: E2 20        	sep	#$20
 14902                        	longa	off
 14903 08:37E1: A5 0F        	lda	<L610+ns_1
 14904 08:37E3: 29 20        	and	#<$20
 14905 08:37E5: C2 20        	rep	#$20
 14906                        	longa	on
 14907 08:37E7: D0 03        	bne	L620
 14908 08:37E9: 82 1D 00     	brl	L10339
 14909                        L620:
 14910                        	.line	3432
 14911                        ;						if (!(ns
                     & NS_LAST))
 14912                        	.line	3433
 14913                        ;							
                    continue; /* Continue to follow if not last segment */
  Sat Jul 10 2021  1:15                                                Page 285


 14914 08:37EC: E2 20        	sep	#$20
 14915                        	longa	off
 14916 08:37EE: A5 0F        	lda	<L610+ns_1
 14917 08:37F0: 29 04        	and	#<$4
 14918 08:37F2: C2 20        	rep	#$20
 14919                        	longa	on
 14920 08:37F4: D0 03        	bne	L621
 14921 08:37F6: 82 90 00     	brl	L10334
 14922                        L621:
 14923                        ;						dp->fn[N
                    SFLAG] = NS_NONAME;
 14924                        	.line	3435
 14925 08:37F9: E2 20        	sep	#$20
 14926                        	longa	off
 14927 08:37FB: A9 80        	lda	#$80
 14928 08:37FD: A0 2B 00     	ldy	#$2b
 14929 08:3800: 97 17        	sta	[<L609+dp_0],Y
 14930 08:3802: C2 20        	rep	#$20
 14931                        	longa	on
 14932                        ;						res = FR
                    _OK;
 14933                        	.line	3436
 14934 08:3804: 64 0D        	stz	<L610+res_1
 14935                        ;					}
 14936                        	.line	3437
 14937                        ;					else
 14938 08:3806: 82 12 00     	brl	L10340
 14939                        L10339:
 14940                        ;					{ /* Could not f
                    ind the object */
 14941                        	.line	3439
 14942                        ;						if (!(ns
                     & NS_LAST))
 14943                        	.line	3440
 14944                        ;							
                    res = FR_NO_PATH; /* Adjust error code if not last segment *
                    /
 14945 08:3809: E2 20        	sep	#$20
 14946                        	longa	off
 14947 08:380B: A5 0F        	lda	<L610+ns_1
 14948 08:380D: 29 04        	and	#<$4
 14949 08:380F: C2 20        	rep	#$20
 14950                        	longa	on
 14951 08:3811: F0 03        	beq	L622
 14952 08:3813: 82 05 00     	brl	L10341
 14953                        L622:
 14954                        	.line	3441
 14955 08:3816: A9 05 00     	lda	#$5
 14956 08:3819: 85 0D        	sta	<L610+res_1
 14957                        ;					}
 14958                        L10341:
 14959                        	.line	3442
 14960                        L10340:
 14961                        ;				}
 14962                        	.line	3443
 14963                        ;				break;
 14964                        L10338:
 14965                        	.line	3444
  Sat Jul 10 2021  1:15                                                Page 286


 14966 08:381B: 82 6E 00     	brl	L10335
 14967                        ;			}
 14968                        	.line	3445
 14969                        ;			if (ns & NS_LAST)
 14970                        L10337:
 14971                        	.line	3446
 14972                        ;				break; /* Last segment m
                    atched. Function completed. */
 14973 08:381E: E2 20        	sep	#$20
 14974                        	longa	off
 14975 08:3820: A5 0F        	lda	<L610+ns_1
 14976 08:3822: 29 04        	and	#<$4
 14977 08:3824: C2 20        	rep	#$20
 14978                        	longa	on
 14979 08:3826: F0 03        	beq	L623
 14980 08:3828: 82 61 00     	brl	L10335
 14981                        L623:
 14982                        ;			/* Get into the sub-directory */
 14983                        ;			if (!(dp->obj.attr & AM_DIR))
 14984                        	.line	3449
 14985                        ;			{ /* It is not a sub-directory a
                    nd cannot follow */
 14986 08:382B: E2 20        	sep	#$20
 14987                        	longa	off
 14988 08:382D: A0 06 00     	ldy	#$6
 14989 08:3830: B7 17        	lda	[<L609+dp_0],Y
 14990 08:3832: 29 10        	and	#<$10
 14991 08:3834: C2 20        	rep	#$20
 14992                        	longa	on
 14993 08:3836: F0 03        	beq	L624
 14994 08:3838: 82 08 00     	brl	L10342
 14995                        L624:
 14996                        	.line	3450
 14997                        ;				res = FR_NO_PATH;
 14998                        	.line	3451
 14999 08:383B: A9 05 00     	lda	#$5
 15000 08:383E: 85 0D        	sta	<L610+res_1
 15001                        ;				break;
 15002                        	.line	3452
 15003 08:3840: 82 49 00     	brl	L10335
 15004                        ;			}
 15005                        	.line	3453
 15006                        ;#if FF_FS_EXFAT
 15007                        ;			if (fs->fs_type == FS_EXFAT)
 15008                        ;			{ /* Save containing directory i
                    nformation for next dir */
 15009                        ;				dp->obj.c_scl = dp->obj.
                    sclust;
 15010                        ;				dp->obj.c_size = ((DWORD
                    )dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 15011                        ;				dp->obj.c_ofs = dp->blk_
                    ofs;
 15012                        ;				init_alloc_info(fs, &dp-
                    >obj); /* Open next directory */
 15013                        ;			}
 15014                        ;			else
 15015                        ;#endif
 15016                        ;			{
  Sat Jul 10 2021  1:15                                                Page 287


 15017                        L10342:
 15018                        	.line	3464
 15019                        ;				dp->obj.sclust = ld_clus
                    t(fs, fs->win + dp->dptr % SS(fs)); /* Open next directory *
                    /
 15020                        	.line	3465
 15021 08:3843: A0 10 00     	ldy	#$10
 15022 08:3846: B7 17        	lda	[<L609+dp_0],Y
 15023 08:3848: 29 FF 01     	and	#<$1ff
 15024 08:384B: 85 01        	sta	<R0
 15025 08:384D: 64 03        	stz	<R0+2
 15026 08:384F: 18           	clc
 15027 08:3850: A9 33 00     	lda	#$33
 15028 08:3853: 65 01        	adc	<R0
 15029 08:3855: 85 05        	sta	<R1
 15030 08:3857: A9 00 00     	lda	#$0
 15031 08:385A: 65 03        	adc	<R0+2
 15032 08:385C: 85 07        	sta	<R1+2
 15033 08:385E: 18           	clc
 15034 08:385F: A5 10        	lda	<L610+fs_1
 15035 08:3861: 65 05        	adc	<R1
 15036 08:3863: 85 01        	sta	<R0
 15037 08:3865: A5 12        	lda	<L610+fs_1+2
 15038 08:3867: 65 07        	adc	<R1+2
 15039 08:3869: 85 03        	sta	<R0+2
 15040 08:386B: D4 03        	pei	<R0+2
 15041 08:386D: D4 01        	pei	<R0
 15042 08:386F: D4 12        	pei	<L610+fs_1+2
 15043 08:3871: D4 10        	pei	<L610+fs_1
 15044 08:3873: 22 16 1D 08  	jsl	~~ld_clust
 15045 08:3877: 85 09        	sta	<R2
 15046 08:3879: 86 0B        	stx	<R2+2
 15047 08:387B: A5 09        	lda	<R2
 15048 08:387D: A0 08 00     	ldy	#$8
 15049 08:3880: 97 17        	sta	[<L609+dp_0],Y
 15050 08:3882: A5 0B        	lda	<R2+2
 15051 08:3884: A0 0A 00     	ldy	#$a
 15052 08:3887: 97 17        	sta	[<L609+dp_0],Y
 15053                        ;			}
 15054                        	.line	3466
 15055                        ;		}
 15056                        	.line	3467
 15057                        L10334:
 15058 08:3889: 82 10 FF     	brl	L10336
 15059                        L10335:
 15060                        ;	}
 15061                        	.line	3468
 15062                        L10333:
 15063                        ;
 15064                        ;	return res;
 15065                        	.line	3470
 15066 08:388C: A5 0D        	lda	<L610+res_1
 15067                        L625:
 15068 08:388E: A8           	tay
 15069 08:388F: A5 15        	lda	<L609+2
 15070 08:3891: 85 1D        	sta	<L609+2+8
 15071 08:3893: A5 14        	lda	<L609+1
 15072 08:3895: 85 1C        	sta	<L609+1+8
  Sat Jul 10 2021  1:15                                                Page 288


 15073 08:3897: 2B           	pld
 15074 08:3898: 3B           	tsc
 15075 08:3899: 18           	clc
 15076 08:389A: 69 1B 00     	adc	#L609+8
 15077 08:389D: 1B           	tcs
 15078 08:389E: 98           	tya
 15079 08:389F: 6B           	rtl
 15080                        ;}
 15081                        	.line	3471
 15082                        	.endblock	3471
 15083             00000013   L609	equ	19
 15084             0000000D   L610	equ	13
 15085 08:38A0:              	ends
 15086                        	efunc
 15087                        	.endfunc	3471,13,19
 15088                        	.line	3471
 15089                        ;
 15090                        ;/*-----------------------------------------------
                    ------------------------*/
 15091                        ;/* Get logical drive number from path name       
                                            */
 15092                        ;/*-----------------------------------------------
                    ------------------------*/
 15093                        ;
 15094                        ;static int get_ldnumber( /* Returns logical drive
                     number (-1:invalid drive number or null pointer) */
 15095                        ;const TCHAR** path /* Pointer to pointer to the p
                    ath name */
 15096                        ;)
 15097                        ;{
 15098                        	.line	3477
 15099                        	.line	3480
 15100                        	FFDOS
 15101                        	func
 15102                        	.function	3480
 15103                        ~~get_ldnumber:
 15104                        	longa	on
 15105                        	longi	on
 15106 08:38A0: 3B           	tsc
 15107 08:38A1: 38           	sec
 15108 08:38A2: E9 1A 00     	sbc	#L626
 15109 08:38A5: 1B           	tcs
 15110 08:38A6: 0B           	phd
 15111 08:38A7: 5B           	tcd
 15112             00000004   path_0	set	4
 15113                        	.block	3480
 15114                        ;	const TCHAR *tp, *tt;
 15115                        ;	TCHAR tc;
 15116                        ;	int i, vol = -1;
 15117                        ;#if FF_STR_VOLUME_ID		/* Find string v
                    olume ID */
 15118                        ;	const char *sp;
 15119                        ;	char c;
 15120                        ;#endif
 15121                        ;
 15122                        ;	tt = tp = *path;
 15123             00000000   tp_1	set	0
 15124             00000004   tt_1	set	4
  Sat Jul 10 2021  1:15                                                Page 289


 15125             00000008   tc_1	set	8
 15126             00000009   i_1	set	9
 15127             0000000B   vol_1	set	11
 15128             0000000D   sp_1	set	13
 15129             00000011   c_1	set	17
 15130                        	.sym	tp,0,142,1,32
 15131                        	.sym	tt,4,142,1,32
 15132                        	.sym	tc,8,14,1,8
 15133                        	.sym	i,9,5,1,16
 15134                        	.sym	vol,11,5,1,16
 15135                        	.sym	sp,13,142,1,32
 15136                        	.sym	c,17,14,1,8
 15137                        	.sym	path,4,1166,6,32
 15138 08:38A8: A9 FF FF     	lda	#$ffff
 15139 08:38AB: 85 14        	sta	<L627+vol_1
 15140                        	.line	3489
 15141 08:38AD: A7 1E        	lda	[<L626+path_0]
 15142 08:38AF: 85 09        	sta	<L627+tp_1
 15143 08:38B1: A0 02 00     	ldy	#$2
 15144 08:38B4: B7 1E        	lda	[<L626+path_0],Y
 15145 08:38B6: 85 0B        	sta	<L627+tp_1+2
 15146 08:38B8: A5 09        	lda	<L627+tp_1
 15147 08:38BA: 85 0D        	sta	<L627+tt_1
 15148 08:38BC: A5 0B        	lda	<L627+tp_1+2
 15149 08:38BE: 85 0F        	sta	<L627+tt_1+2
 15150                        ;	if (!tp)
 15151                        	.line	3490
 15152                        ;		return vol; /* Invalid path name? */
 15153 08:38C0: A5 09        	lda	<L627+tp_1
 15154 08:38C2: 05 0B        	ora	<L627+tp_1+2
 15155 08:38C4: F0 03        	beq	L629
 15156 08:38C6: 82 14 00     	brl	L10343
 15157                        L629:
 15158                        	.line	3491
 15159 08:38C9: A5 14        	lda	<L627+vol_1
 15160                        L630:
 15161 08:38CB: A8           	tay
 15162 08:38CC: A5 1C        	lda	<L626+2
 15163 08:38CE: 85 20        	sta	<L626+2+4
 15164 08:38D0: A5 1B        	lda	<L626+1
 15165 08:38D2: 85 1F        	sta	<L626+1+4
 15166 08:38D4: 2B           	pld
 15167 08:38D5: 3B           	tsc
 15168 08:38D6: 18           	clc
 15169 08:38D7: 69 1E 00     	adc	#L626+4
 15170 08:38DA: 1B           	tcs
 15171 08:38DB: 98           	tya
 15172 08:38DC: 6B           	rtl
 15173                        ;	do
 15174                        L10343:
 15175                        	.line	3492
 15176                        L10346:
 15177                        ;		tc = *tt++;
 15178                        	.line	3493
 15179 08:38DD: E2 20        	sep	#$20
 15180                        	longa	off
 15181 08:38DF: A7 0D        	lda	[<L627+tt_1]
 15182 08:38E1: 85 11        	sta	<L627+tc_1
  Sat Jul 10 2021  1:15                                                Page 290


 15183 08:38E3: C2 20        	rep	#$20
 15184                        	longa	on
 15185 08:38E5: E6 0D        	inc	<L627+tt_1
 15186 08:38E7: D0 02        	bne	L631
 15187 08:38E9: E6 0F        	inc	<L627+tt_1+2
 15188                        L631:
 15189                        ;	while ((UINT) tc >= (FF_USE_LFN ? ' ' : '!') && 
                    tc != ':'); /* Find a colon in the path */
 15190                        L10344:
 15191 08:38EB: E2 20        	sep	#$20
 15192                        	longa	off
 15193 08:38ED: A5 11        	lda	<L627+tc_1
 15194 08:38EF: C9 20        	cmp	#<$20
 15195 08:38F1: C2 20        	rep	#$20
 15196                        	longa	on
 15197 08:38F3: B0 03        	bcs	L633
 15198 08:38F5: 82 0D 00     	brl	L632
 15199                        L633:
 15200 08:38F8: E2 20        	sep	#$20
 15201                        	longa	off
 15202 08:38FA: A5 11        	lda	<L627+tc_1
 15203 08:38FC: C9 3A        	cmp	#<$3a
 15204 08:38FE: C2 20        	rep	#$20
 15205                        	longa	on
 15206 08:3900: F0 03        	beq	L634
 15207 08:3902: 82 D8 FF     	brl	L10346
 15208                        L634:
 15209                        L632:
 15210                        L10345:
 15211                        ;
 15212                        ;	if (tc == ':')
 15213                        	.line	3496
 15214                        ;	{ /* DOS/Windows style volume ID? */
 15215 08:3905: E2 20        	sep	#$20
 15216                        	longa	off
 15217 08:3907: A5 11        	lda	<L627+tc_1
 15218 08:3909: C9 3A        	cmp	#<$3a
 15219 08:390B: C2 20        	rep	#$20
 15220                        	longa	on
 15221 08:390D: F0 03        	beq	L635
 15222 08:390F: 82 59 01     	brl	L10347
 15223                        L635:
 15224                        	.line	3497
 15225                        ;		i = FF_VOLUMES;
 15226                        	.line	3498
 15227 08:3912: A9 08 00     	lda	#$8
 15228 08:3915: 85 12        	sta	<L627+i_1
 15229                        ;		if (IsDigit(*tp) && tp + 2 == tt)
 15230                        	.line	3499
 15231                        ;		{ /* Is there a numeric volume ID + colo
                    n? */
 15232 08:3917: E2 20        	sep	#$20
 15233                        	longa	off
 15234 08:3919: A7 09        	lda	[<L627+tp_1]
 15235 08:391B: C9 30        	cmp	#<$30
 15236 08:391D: C2 20        	rep	#$20
 15237                        	longa	on
 15238 08:391F: B0 03        	bcs	L636
  Sat Jul 10 2021  1:15                                                Page 291


 15239 08:3921: 82 3D 00     	brl	L10348
 15240                        L636:
 15241 08:3924: E2 20        	sep	#$20
 15242                        	longa	off
 15243 08:3926: A9 39        	lda	#$39
 15244 08:3928: C7 09        	cmp	[<L627+tp_1]
 15245 08:392A: C2 20        	rep	#$20
 15246                        	longa	on
 15247 08:392C: B0 03        	bcs	L637
 15248 08:392E: 82 30 00     	brl	L10348
 15249                        L637:
 15250 08:3931: 18           	clc
 15251 08:3932: A9 02 00     	lda	#$2
 15252 08:3935: 65 09        	adc	<L627+tp_1
 15253 08:3937: 85 01        	sta	<R0
 15254 08:3939: A9 00 00     	lda	#$0
 15255 08:393C: 65 0B        	adc	<L627+tp_1+2
 15256 08:393E: 85 03        	sta	<R0+2
 15257 08:3940: A5 0D        	lda	<L627+tt_1
 15258 08:3942: C5 01        	cmp	<R0
 15259 08:3944: D0 04        	bne	L638
 15260 08:3946: A5 0F        	lda	<L627+tt_1+2
 15261 08:3948: C5 03        	cmp	<R0+2
 15262                        L638:
 15263 08:394A: F0 03        	beq	L639
 15264 08:394C: 82 12 00     	brl	L10348
 15265                        L639:
 15266                        	.line	3500
 15267                        ;			i = (int) *tp - '0'; /* Get the 
                    LD number */
 15268                        	.line	3501
 15269 08:394F: A7 09        	lda	[<L627+tp_1]
 15270 08:3951: 29 FF 00     	and	#$ff
 15271 08:3954: 85 01        	sta	<R0
 15272 08:3956: 18           	clc
 15273 08:3957: A9 D0 FF     	lda	#$ffd0
 15274 08:395A: 65 01        	adc	<R0
 15275 08:395C: 85 12        	sta	<L627+i_1
 15276                        ;		}
 15277                        	.line	3502
 15278                        ;#if FF_STR_VOLUME_ID == 1	/* Arbitrary str
                    ing is enabled */
 15279                        ;		else
 15280 08:395E: 82 E6 00     	brl	L10349
 15281                        L10348:
 15282                        ;		{
 15283                        	.line	3505
 15284                        ;			i = 0;
 15285                        	.line	3506
 15286 08:3961: 64 12        	stz	<L627+i_1
 15287                        ;			do
 15288                        	.line	3507
 15289                        L10352:
 15290                        ;			{
 15291                        	.line	3508
 15292                        ;				sp = VolumeStr[i]; tp = 
                    *path; /* This string volume ID and path name */
 15293                        	.line	3509
  Sat Jul 10 2021  1:15                                                Page 292


 15294 08:3963: A5 12        	lda	<L627+i_1
 15295 08:3965: 0A           	asl	A
 15296 08:3966: 0A           	asl	A
 15297 08:3967: 85 01        	sta	<R0
 15298 08:3969: 18           	clc
 15299 08:396A: A9 xx xx     	lda	#<~~VolumeStr
 15300 08:396D: 65 01        	adc	<R0
 15301 08:396F: 85 05        	sta	<R1
 15302 08:3971: B2 05        	lda	(<R1)
 15303 08:3973: 85 16        	sta	<L627+sp_1
 15304 08:3975: A0 02 00     	ldy	#$2
 15305 08:3978: B1 05        	lda	(<R1),Y
 15306 08:397A: 85 18        	sta	<L627+sp_1+2
 15307                        	.line	3509
 15308 08:397C: A7 1E        	lda	[<L626+path_0]
 15309 08:397E: 85 09        	sta	<L627+tp_1
 15310 08:3980: A0 02 00     	ldy	#$2
 15311 08:3983: B7 1E        	lda	[<L626+path_0],Y
 15312 08:3985: 85 0B        	sta	<L627+tp_1+2
 15313                        ;				do
 15314                        	.line	3510
 15315                        L10355:
 15316                        ;				{ /* Compare the volume 
                    ID with path name */
 15317                        	.line	3511
 15318                        ;					c = *sp++; tc = 
                    *tp++;
 15319                        	.line	3512
 15320 08:3987: E2 20        	sep	#$20
 15321                        	longa	off
 15322 08:3989: A7 16        	lda	[<L627+sp_1]
 15323 08:398B: 85 1A        	sta	<L627+c_1
 15324 08:398D: C2 20        	rep	#$20
 15325                        	longa	on
 15326 08:398F: E6 16        	inc	<L627+sp_1
 15327 08:3991: D0 02        	bne	L640
 15328 08:3993: E6 18        	inc	<L627+sp_1+2
 15329                        L640:
 15330                        	.line	3512
 15331 08:3995: E2 20        	sep	#$20
 15332                        	longa	off
 15333 08:3997: A7 09        	lda	[<L627+tp_1]
 15334 08:3999: 85 11        	sta	<L627+tc_1
 15335 08:399B: C2 20        	rep	#$20
 15336                        	longa	on
 15337 08:399D: E6 09        	inc	<L627+tp_1
 15338 08:399F: D0 02        	bne	L641
 15339 08:39A1: E6 0B        	inc	<L627+tp_1+2
 15340                        L641:
 15341                        ;					if (IsLower(c)) 
                    c -= 0x20;
 15342                        	.line	3513
 15343 08:39A3: E2 20        	sep	#$20
 15344                        	longa	off
 15345 08:39A5: A5 1A        	lda	<L627+c_1
 15346 08:39A7: C9 61        	cmp	#<$61
 15347 08:39A9: C2 20        	rep	#$20
 15348                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 293


 15349 08:39AB: B0 03        	bcs	L642
 15350 08:39AD: 82 24 00     	brl	L10356
 15351                        L642:
 15352 08:39B0: E2 20        	sep	#$20
 15353                        	longa	off
 15354 08:39B2: A9 7A        	lda	#$7a
 15355 08:39B4: C5 1A        	cmp	<L627+c_1
 15356 08:39B6: C2 20        	rep	#$20
 15357                        	longa	on
 15358 08:39B8: B0 03        	bcs	L643
 15359 08:39BA: 82 17 00     	brl	L10356
 15360                        L643:
 15361                        	.line	3513
 15362 08:39BD: A5 1A        	lda	<L627+c_1
 15363 08:39BF: 29 FF 00     	and	#$ff
 15364 08:39C2: 85 01        	sta	<R0
 15365 08:39C4: 18           	clc
 15366 08:39C5: A9 E0 FF     	lda	#$ffe0
 15367 08:39C8: 65 01        	adc	<R0
 15368 08:39CA: 85 05        	sta	<R1
 15369 08:39CC: E2 20        	sep	#$20
 15370                        	longa	off
 15371 08:39CE: A5 05        	lda	<R1
 15372 08:39D0: 85 1A        	sta	<L627+c_1
 15373 08:39D2: C2 20        	rep	#$20
 15374                        	longa	on
 15375                        ;					if (IsLower(tc))
                     tc -= 0x20;
 15376                        L10356:
 15377                        	.line	3514
 15378 08:39D4: E2 20        	sep	#$20
 15379                        	longa	off
 15380 08:39D6: A5 11        	lda	<L627+tc_1
 15381 08:39D8: C9 61        	cmp	#<$61
 15382 08:39DA: C2 20        	rep	#$20
 15383                        	longa	on
 15384 08:39DC: B0 03        	bcs	L644
 15385 08:39DE: 82 24 00     	brl	L10357
 15386                        L644:
 15387 08:39E1: E2 20        	sep	#$20
 15388                        	longa	off
 15389 08:39E3: A9 7A        	lda	#$7a
 15390 08:39E5: C5 11        	cmp	<L627+tc_1
 15391 08:39E7: C2 20        	rep	#$20
 15392                        	longa	on
 15393 08:39E9: B0 03        	bcs	L645
 15394 08:39EB: 82 17 00     	brl	L10357
 15395                        L645:
 15396                        	.line	3514
 15397 08:39EE: A5 11        	lda	<L627+tc_1
 15398 08:39F0: 29 FF 00     	and	#$ff
 15399 08:39F3: 85 01        	sta	<R0
 15400 08:39F5: 18           	clc
 15401 08:39F6: A9 E0 FF     	lda	#$ffe0
 15402 08:39F9: 65 01        	adc	<R0
 15403 08:39FB: 85 05        	sta	<R1
 15404 08:39FD: E2 20        	sep	#$20
 15405                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 294


 15406 08:39FF: A5 05        	lda	<R1
 15407 08:3A01: 85 11        	sta	<L627+tc_1
 15408 08:3A03: C2 20        	rep	#$20
 15409                        	longa	on
 15410                        ;				}while (c && (TCHAR)c ==
                     tc);
 15411                        L10357:
 15412                        	.line	3515
 15413                        L10353:
 15414 08:3A05: A5 1A        	lda	<L627+c_1
 15415 08:3A07: 29 FF 00     	and	#$ff
 15416 08:3A0A: D0 03        	bne	L647
 15417 08:3A0C: 82 0D 00     	brl	L646
 15418                        L647:
 15419 08:3A0F: E2 20        	sep	#$20
 15420                        	longa	off
 15421 08:3A11: A5 1A        	lda	<L627+c_1
 15422 08:3A13: C5 11        	cmp	<L627+tc_1
 15423 08:3A15: C2 20        	rep	#$20
 15424                        	longa	on
 15425 08:3A17: D0 03        	bne	L648
 15426 08:3A19: 82 6B FF     	brl	L10355
 15427                        L648:
 15428                        L646:
 15429                        L10354:
 15430                        ;			}while ((c || tp != tt) && ++i <
                     FF_VOLUMES); /* Repeat for each id until pattern match */
 15431                        	.line	3516
 15432                        L10350:
 15433 08:3A1C: A5 1A        	lda	<L627+c_1
 15434 08:3A1E: 29 FF 00     	and	#$ff
 15435 08:3A21: F0 03        	beq	L651
 15436 08:3A23: 82 0F 00     	brl	L650
 15437                        L651:
 15438 08:3A26: A5 09        	lda	<L627+tp_1
 15439 08:3A28: C5 0D        	cmp	<L627+tt_1
 15440 08:3A2A: D0 04        	bne	L652
 15441 08:3A2C: A5 0B        	lda	<L627+tp_1+2
 15442 08:3A2E: C5 0F        	cmp	<L627+tt_1+2
 15443                        L652:
 15444 08:3A30: D0 03        	bne	L653
 15445 08:3A32: 82 12 00     	brl	L649
 15446                        L653:
 15447                        L650:
 15448 08:3A35: E6 12        	inc	<L627+i_1
 15449 08:3A37: 38           	sec
 15450 08:3A38: A5 12        	lda	<L627+i_1
 15451 08:3A3A: E9 08 00     	sbc	#<$8
 15452 08:3A3D: 70 03        	bvs	L654
 15453 08:3A3F: 49 00 80     	eor	#$8000
 15454                        L654:
 15455 08:3A42: 30 03        	bmi	L655
 15456 08:3A44: 82 1C FF     	brl	L10352
 15457                        L655:
 15458                        L649:
 15459                        L10351:
 15460                        ;		}
 15461                        	.line	3517
  Sat Jul 10 2021  1:15                                                Page 295


 15462                        L10349:
 15463                        ;#endif
 15464                        ;		if (i < FF_VOLUMES)
 15465                        	.line	3519
 15466                        ;		{ /* If a volume ID is found, get the dr
                    ive number and strip it */
 15467 08:3A47: 38           	sec
 15468 08:3A48: A5 12        	lda	<L627+i_1
 15469 08:3A4A: E9 08 00     	sbc	#<$8
 15470 08:3A4D: 70 03        	bvs	L656
 15471 08:3A4F: 49 00 80     	eor	#$8000
 15472                        L656:
 15473 08:3A52: 10 03        	bpl	L657
 15474 08:3A54: 82 0F 00     	brl	L10358
 15475                        L657:
 15476                        	.line	3520
 15477                        ;			vol = i; /* Drive number */
 15478                        	.line	3521
 15479 08:3A57: A5 12        	lda	<L627+i_1
 15480 08:3A59: 85 14        	sta	<L627+vol_1
 15481                        ;			*path = tt; /* Snip the drive pr
                    efix off */
 15482                        	.line	3522
 15483 08:3A5B: A5 0D        	lda	<L627+tt_1
 15484 08:3A5D: 87 1E        	sta	[<L626+path_0]
 15485 08:3A5F: A5 0F        	lda	<L627+tt_1+2
 15486 08:3A61: A0 02 00     	ldy	#$2
 15487 08:3A64: 97 1E        	sta	[<L626+path_0],Y
 15488                        ;		}
 15489                        	.line	3523
 15490                        ;		return vol;
 15491                        L10358:
 15492                        	.line	3524
 15493 08:3A66: A5 14        	lda	<L627+vol_1
 15494 08:3A68: 82 60 FE     	brl	L630
 15495                        ;	}
 15496                        	.line	3525
 15497                        ;#if FF_STR_VOLUME_ID == 2		/* Unix 
                    style volume ID is enabled */
 15498                        ;	if (*tp == '/')
 15499                        ;	{
 15500                        ;		i = 0;
 15501                        ;		do
 15502                        ;		{
 15503                        ;			sp = VolumeStr[i]; tp = *path; /
                    * This string volume ID and path name */
 15504                        ;			do
 15505                        ;			{ /* Compare the volume ID with 
                    path name */
 15506                        ;				c = *sp++; tc = *(++tp);
 15507                        ;				if (IsLower(c)) c -= 0x2
                    0;
 15508                        ;				if (IsLower(tc)) tc -= 0
                    x20;
 15509                        ;			}while (c && (TCHAR)c == tc);
 15510                        ;		}while ((c || (tc != '/' && (UINT)tc >= 
                    (FF_USE_LFN ? ' ' : '!'))) && ++i < FF_VOLUMES); /* Repeat f
                    or each ID until pattern match */
  Sat Jul 10 2021  1:15                                                Page 296


 15511                        ;		if (i < FF_VOLUMES)
 15512                        ;		{ /* If a volume ID is found, get the dr
                    ive number and strip it */
 15513                        ;			vol = i; /* Drive number */
 15514                        ;			*path = tp; /* Snip the drive pr
                    efix off */
 15515                        ;			return vol;
 15516                        ;		}
 15517                        ;	}
 15518                        ;#endif
 15519                        ;	/* No drive prefix is found */
 15520                        ;#if FF_FS_RPATH != 0
 15521                        ;	vol = CurrVol; /* Default drive is current drive
                     */
 15522                        ;#else
 15523                        ;	vol = 0; /* Default drive is 0 */
 15524                        L10347:
 15525                        	.line	3552
 15526 08:3A6B: 64 14        	stz	<L627+vol_1
 15527                        ;#endif
 15528                        ;	return vol; /* Return the default drive */
 15529                        	.line	3554
 15530 08:3A6D: A5 14        	lda	<L627+vol_1
 15531 08:3A6F: 82 59 FE     	brl	L630
 15532                        ;}
 15533                        	.line	3555
 15534                        	.endblock	3555
 15535             0000001A   L626	equ	26
 15536             00000009   L627	equ	9
 15537 08:3A72:              	ends
 15538                        	efunc
 15539                        	.endfunc	3555,9,26
 15540                        	.line	3555
 15541                        ;
 15542                        ;/*-----------------------------------------------
                    ------------------------*/
 15543                        ;/* GPT support functions                         
                                            */
 15544                        ;/*-----------------------------------------------
                    ------------------------*/
 15545                        ;
 15546                        ;#if FF_LBA64
 15547                        ;
 15548                        ;/* Calculate CRC32 in byte-by-byte */
 15549                        ;
 15550                        ;static DWORD crc32 ( /* Returns next CRC value */
 15551                        ;		DWORD crc, /* Current CRC value */
 15552                        ;		BYTE d /* A byte to be processed */
 15553                        ;)
 15554                        ;{
 15555                        ;	BYTE b;
 15556                        ;
 15557                        ;	for (b = 1; b; b <<= 1)
 15558                        ;	{
 15559                        ;		crc ^= (d & b) ? 1 : 0;
 15560                        ;		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 
                    : crc >> 1;
 15561                        ;	}
  Sat Jul 10 2021  1:15                                                Page 297


 15562                        ;	return crc;
 15563                        ;}
 15564                        ;
 15565                        ;/* Check validity of GPT header */
 15566                        ;
 15567                        ;static int test_gpt_header ( /* 0:Invalid, 1:Vali
                    d */
 15568                        ;		const BYTE* gpth /* Pointer to the GPT h
                    eader */
 15569                        ;)
 15570                        ;{
 15571                        ;	UINT i;
 15572                        ;	DWORD bcc;
 15573                        ;
 15574                        ;	if (mem_cmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1
                    \0" "\x5C\0\0", 16)) return 0; /* Check sign, version (1.0) 
                    and length (92) */
 15575                        ;	for (i = 0, bcc = 0xFFFFFFFF; i < 92; i++)
 15576                        ;	{ /* Check header BCC */
 15577                        ;		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : 
                    gpth[i]);
 15578                        ;	}
 15579                        ;	if (~bcc != ld_dword(gpth + GPTH_Bcc)) return 0;
 15580                        ;	if (ld_dword(gpth + GPTH_PteSize) != SZ_GPTE) re
                    turn 0; /* Table entry size (must be SZ_GPTE bytes) */
 15581                        ;	if (ld_dword(gpth + GPTH_PtNum) > 128) return 0;
                     /* Table size (must be 128 entries or less) */
 15582                        ;
 15583                        ;	return 1;
 15584                        ;}
 15585                        ;
 15586                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 15587                        ;
 15588                        ;/* Generate random value */
 15589                        ;static DWORD make_rand (
 15590                        ;		DWORD seed, /* Seed value */
 15591                        ;		BYTE* buff, /* Output buffer */
 15592                        ;		UINT n /* Data length */
 15593                        ;)
 15594                        ;{
 15595                        ;	UINT r;
 15596                        ;
 15597                        ;	if (seed == 0) seed = 1;
 15598                        ;	do
 15599                        ;	{
 15600                        ;		for (r = 0; r < 8; r++) seed = seed & 1 
                    ? seed >> 1 ^ 0xA3000000 : seed >> 1; /* Shift 8 bits the 32
                    -bit LFSR */
 15601                        ;		*buff++ = (BYTE)seed;
 15602                        ;	}while (--n);
 15603                        ;	return seed;
 15604                        ;}
 15605                        ;
 15606                        ;#endif
 15607                        ;#endif
 15608                        ;
 15609                        ;/*-----------------------------------------------
                    ------------------------*/
  Sat Jul 10 2021  1:15                                                Page 298


 15610                        ;/* Load a sector and check if it is an FAT VBR   
                                            */
 15611                        ;/*-----------------------------------------------
                    ------------------------*/
 15612                        ;
 15613                        ;/* Check what the sector is */
 15614                        ;
 15615                        ;static UINT check_fs( /* 0:FAT VBR, 1:exFAT VBR, 
                    2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
 15616                        ;FATFS* fs, /* Filesystem object */
 15617                        ;LBA_t sect /* Sector to load and check if it is a
                    n FAT-VBR or not */
 15618                        ;)
 15619                        ;{
 15620                        	.line	3630
 15621                        	.line	3634
 15622                        	FFDOS
 15623                        	func
 15624                        	.function	3634
 15625                        ~~check_fs:
 15626                        	longa	on
 15627                        	longi	on
 15628 08:3A72: 3B           	tsc
 15629 08:3A73: 38           	sec
 15630 08:3A74: E9 08 00     	sbc	#L658
 15631 08:3A77: 1B           	tcs
 15632 08:3A78: 0B           	phd
 15633 08:3A79: 5B           	tcd
 15634             00000004   fs_0	set	4
 15635             00000008   sect_0	set	8
 15636                        	.block	3634
 15637                        ;
 15638                        ;	////k_debug_long("check_fs:", sect);
 15639                        ;
 15640                        ;	fs->wflag = 0;
 15641                        	.sym	fs,4,138,6,32,72
 15642                        	.sym	sect,8,18,6,32
 15643                        	.line	3638
 15644 08:3A7A: E2 20        	sep	#$20
 15645                        	longa	off
 15646 08:3A7C: A9 00        	lda	#$0
 15647 08:3A7E: A0 03 00     	ldy	#$3
 15648 08:3A81: 97 0C        	sta	[<L658+fs_0],Y
 15649 08:3A83: C2 20        	rep	#$20
 15650                        	longa	on
 15651                        ;	fs->winsect = (LBA_t) 0 - 1; /* Invaidate window
                     */
 15652                        	.line	3639
 15653 08:3A85: A9 FF FF     	lda	#$ffff
 15654 08:3A88: A0 2F 00     	ldy	#$2f
 15655 08:3A8B: 97 0C        	sta	[<L658+fs_0],Y
 15656 08:3A8D: A9 FF FF     	lda	#$ffff
 15657 08:3A90: A0 31 00     	ldy	#$31
 15658 08:3A93: 97 0C        	sta	[<L658+fs_0],Y
 15659                        ;	if (move_window(fs, sect) != FR_OK)
 15660                        	.line	3640
 15661                        ;		return 4; /* Load the boot sector */
 15662 08:3A95: D4 12        	pei	<L658+sect_0+2
  Sat Jul 10 2021  1:15                                                Page 299


 15663 08:3A97: D4 10        	pei	<L658+sect_0
 15664 08:3A99: D4 0E        	pei	<L658+fs_0+2
 15665 08:3A9B: D4 0C        	pei	<L658+fs_0
 15666 08:3A9D: 22 C1 08 08  	jsl	~~move_window
 15667 08:3AA1: AA           	tax
 15668 08:3AA2: D0 03        	bne	L661
 15669 08:3AA4: 82 15 00     	brl	L10359
 15670                        L661:
 15671                        	.line	3641
 15672 08:3AA7: A9 04 00     	lda	#$4
 15673                        L662:
 15674 08:3AAA: A8           	tay
 15675 08:3AAB: A5 0A        	lda	<L658+2
 15676 08:3AAD: 85 12        	sta	<L658+2+8
 15677 08:3AAF: A5 09        	lda	<L658+1
 15678 08:3AB1: 85 11        	sta	<L658+1+8
 15679 08:3AB3: 2B           	pld
 15680 08:3AB4: 3B           	tsc
 15681 08:3AB5: 18           	clc
 15682 08:3AB6: 69 10 00     	adc	#L658+8
 15683 08:3AB9: 1B           	tcs
 15684 08:3ABA: 98           	tya
 15685 08:3ABB: 6B           	rtl
 15686                        ;
 15687                        ;	//k_debug_integer("check_fs:ld_word(&fs->win[BS_
                    55AA]):",ld_word(&fs->win[BS_55AA]));
 15688                        ;	if (ld_word(&fs->win[BS_55AA]) != 0xAA55)
 15689                        L10359:
 15690                        	.line	3644
 15691                        ;		return 3; /* Check boot signature (alway
                    s here regardless of the sector size) */
 15692 08:3ABC: 18           	clc
 15693 08:3ABD: A9 31 02     	lda	#$231
 15694 08:3AC0: 65 0C        	adc	<L658+fs_0
 15695 08:3AC2: 85 01        	sta	<R0
 15696 08:3AC4: A9 00 00     	lda	#$0
 15697 08:3AC7: 65 0E        	adc	<L658+fs_0+2
 15698 08:3AC9: 85 03        	sta	<R0+2
 15699 08:3ACB: D4 03        	pei	<R0+2
 15700 08:3ACD: D4 01        	pei	<R0
 15701 08:3ACF: 22 00 00 08  	jsl	~~ld_word
 15702 08:3AD3: 85 05        	sta	<R1
 15703 08:3AD5: A5 05        	lda	<R1
 15704 08:3AD7: C9 55 AA     	cmp	#<$aa55
 15705 08:3ADA: D0 03        	bne	L663
 15706 08:3ADC: 82 06 00     	brl	L10360
 15707                        L663:
 15708                        	.line	3645
 15709 08:3ADF: A9 03 00     	lda	#$3
 15710 08:3AE2: 82 C5 FF     	brl	L662
 15711                        ;
 15712                        ;	if (FF_FS_EXFAT
 15713                        L10360:
 15714                        	.line	3647
 15715                        ;			&& !mem_cmp(&(fs->win[BS_JmpBoot
                    ]), "\xEB\x76\x90" "EXFAT   ", 11))
 15716                        ;		return 1; /* Check if exFAT VBR */
 15717 08:3AE5: 82 2C 00     	brl	L10361
  Sat Jul 10 2021  1:15                                                Page 300


 15718 08:3AE8: F4 0B 00     	pea	#<$b
 15719 08:3AEB: F4 xx xx     	pea	#^L608
 15720 08:3AEE: F4 xx xx     	pea	#<L608
 15721 08:3AF1: 18           	clc
 15722 08:3AF2: A9 33 00     	lda	#$33
 15723 08:3AF5: 65 0C        	adc	<L658+fs_0
 15724 08:3AF7: 85 01        	sta	<R0
 15725 08:3AF9: A9 00 00     	lda	#$0
 15726 08:3AFC: 65 0E        	adc	<L658+fs_0+2
 15727 08:3AFE: 85 03        	sta	<R0+2
 15728 08:3B00: D4 03        	pei	<R0+2
 15729 08:3B02: D4 01        	pei	<R0
 15730 08:3B04: 22 16 02 08  	jsl	~~mem_cmp
 15731 08:3B08: AA           	tax
 15732 08:3B09: F0 03        	beq	L664
 15733 08:3B0B: 82 06 00     	brl	L10361
 15734                        L664:
 15735                        	.line	3649
 15736 08:3B0E: A9 01 00     	lda	#$1
 15737 08:3B11: 82 96 FF     	brl	L662
 15738                        ;
 15739                        ;	////k_debug_hex("check_fs:BS_JmpBoot:", fs->win[
                    BS_JmpBoot]);
 15740                        ;
 15741                        ;	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_Jm
                    pBoot] == 0xEB
 15742                        L10361:
 15743                        	.line	3653
 15744                        ;			|| fs->win[BS_JmpBoot] == 0xE8)
 15745                        ;	{ /* Valid JumpBoot code? */
 15746 08:3B14: E2 20        	sep	#$20
 15747                        	longa	off
 15748 08:3B16: A0 33 00     	ldy	#$33
 15749 08:3B19: B7 0C        	lda	[<L658+fs_0],Y
 15750 08:3B1B: C9 E9        	cmp	#<$e9
 15751 08:3B1D: C2 20        	rep	#$20
 15752                        	longa	on
 15753 08:3B1F: D0 03        	bne	L666
 15754 08:3B21: 82 20 00     	brl	L665
 15755                        L666:
 15756 08:3B24: E2 20        	sep	#$20
 15757                        	longa	off
 15758 08:3B26: A0 33 00     	ldy	#$33
 15759 08:3B29: B7 0C        	lda	[<L658+fs_0],Y
 15760 08:3B2B: C9 EB        	cmp	#<$eb
 15761 08:3B2D: C2 20        	rep	#$20
 15762                        	longa	on
 15763 08:3B2F: D0 03        	bne	L667
 15764 08:3B31: 82 10 00     	brl	L665
 15765                        L667:
 15766 08:3B34: E2 20        	sep	#$20
 15767                        	longa	off
 15768 08:3B36: A0 33 00     	ldy	#$33
 15769 08:3B39: B7 0C        	lda	[<L658+fs_0],Y
 15770 08:3B3B: C9 E8        	cmp	#<$e8
 15771 08:3B3D: C2 20        	rep	#$20
 15772                        	longa	on
 15773 08:3B3F: F0 03        	beq	L668
  Sat Jul 10 2021  1:15                                                Page 301


 15774 08:3B41: 82 58 00     	brl	L10362
 15775                        L668:
 15776                        L665:
 15777                        	.line	3655
 15778                        ;		if (!mem_cmp(&(fs->win[BS_FilSysType]), 
                    "FAT", 3))
 15779                        	.line	3656
 15780                        ;			return 0; /* Is it an FAT VBR? *
                    /
 15781 08:3B44: F4 03 00     	pea	#<$3
 15782 08:3B47: F4 xx xx     	pea	#^L608+12
 15783 08:3B4A: F4 xx xx     	pea	#<L608+12
 15784 08:3B4D: 18           	clc
 15785 08:3B4E: A9 69 00     	lda	#$69
 15786 08:3B51: 65 0C        	adc	<L658+fs_0
 15787 08:3B53: 85 01        	sta	<R0
 15788 08:3B55: A9 00 00     	lda	#$0
 15789 08:3B58: 65 0E        	adc	<L658+fs_0+2
 15790 08:3B5A: 85 03        	sta	<R0+2
 15791 08:3B5C: D4 03        	pei	<R0+2
 15792 08:3B5E: D4 01        	pei	<R0
 15793 08:3B60: 22 16 02 08  	jsl	~~mem_cmp
 15794 08:3B64: AA           	tax
 15795 08:3B65: F0 03        	beq	L669
 15796 08:3B67: 82 06 00     	brl	L10363
 15797                        L669:
 15798                        	.line	3657
 15799 08:3B6A: A9 00 00     	lda	#$0
 15800 08:3B6D: 82 3A FF     	brl	L662
 15801                        ;		if (!mem_cmp(&(fs->win[BS_FilSysType32])
                    , "FAT32", 5))
 15802                        L10363:
 15803                        	.line	3658
 15804                        ;			return 0; /* Is it an FAT32 VBR?
                     */
 15805 08:3B70: F4 05 00     	pea	#<$5
 15806 08:3B73: F4 xx xx     	pea	#^L608+16
 15807 08:3B76: F4 xx xx     	pea	#<L608+16
 15808 08:3B79: 18           	clc
 15809 08:3B7A: A9 85 00     	lda	#$85
 15810 08:3B7D: 65 0C        	adc	<L658+fs_0
 15811 08:3B7F: 85 01        	sta	<R0
 15812 08:3B81: A9 00 00     	lda	#$0
 15813 08:3B84: 65 0E        	adc	<L658+fs_0+2
 15814 08:3B86: 85 03        	sta	<R0+2
 15815 08:3B88: D4 03        	pei	<R0+2
 15816 08:3B8A: D4 01        	pei	<R0
 15817 08:3B8C: 22 16 02 08  	jsl	~~mem_cmp
 15818 08:3B90: AA           	tax
 15819 08:3B91: F0 03        	beq	L670
 15820 08:3B93: 82 06 00     	brl	L10364
 15821                        L670:
 15822                        	.line	3659
 15823 08:3B96: A9 00 00     	lda	#$0
 15824 08:3B99: 82 0E FF     	brl	L662
 15825                        ;	}
 15826                        L10364:
 15827                        	.line	3660
  Sat Jul 10 2021  1:15                                                Page 302


 15828                        ;	return 2; /* Valid BS but not FAT */
 15829                        L10362:
 15830                        	.line	3661
 15831 08:3B9C: A9 02 00     	lda	#$2
 15832 08:3B9F: 82 08 FF     	brl	L662
 15833                        ;}
 15834                        	.line	3662
 15835                        	.endblock	3662
 15836             00000008   L658	equ	8
 15837             00000009   L659	equ	9
 15838 08:3BA2:              	ends
 15839                        	efunc
 15840                        	.endfunc	3662,9,8
 15841                        	.line	3662
 15842                        	data
 15843                        L608:
 15844 00:010C: EB 76 90 45  	db	$EB,$76,$FFFFFF90,$45,$58,$46,$41,$54,$2
                    0,$20,$20,$00,$46,$41,$54
       00:0110: 58 46 41 54 
       00:0114: 20 20 20 00 
       00:0118: 46 41 54 
 15845 00:011B: 00 46 41 54  	db	$00,$46,$41,$54,$33,$32,$00
       00:011F: 33 32 00 
 15846 00:0122:              	ends
 15847                        ;
 15848                        ;/* Find an FAT volume */
 15849                        ;/* (It supports only generic partitioning rules, 
                    MBR, GPT and SFD) */
 15850                        ;
 15851                        ;static UINT find_volume( /* Returns BS status fou
                    nd in the hosting drive */
 15852                        ;FATFS* fs, /* Filesystem object */
 15853                        ;UINT part /* Partition to fined = 0:auto, 1..:for
                    ced */
 15854                        ;)
 15855                        ;{
 15856                        	.line	3667
 15857                        	.line	3671
 15858                        	FFDOS
 15859                        	func
 15860                        	.function	3671
 15861                        ~~find_volume:
 15862                        	longa	on
 15863                        	longi	on
 15864 08:3BA2: 3B           	tsc
 15865 08:3BA3: 38           	sec
 15866 08:3BA4: E9 3C 00     	sbc	#L672
 15867 08:3BA7: 1B           	tcs
 15868 08:3BA8: 0B           	phd
 15869 08:3BA9: 5B           	tcd
 15870             00000004   fs_0	set	4
 15871             00000008   part_0	set	8
 15872                        	.block	3671
 15873                        ;	UINT fmt, i;
 15874                        ;	DWORD mbr_pt[4];
 15875                        ;
 15876                        ;	PPARTITIONTABLE ppt[4];
 15877                        ;
  Sat Jul 10 2021  1:15                                                Page 303


 15878                        ;	k_debug_string("find_volume...\r\n");
 15879             00000000   fmt_1	set	0
 15880             00000002   i_1	set	2
 15881             00000004   mbr_pt_1	set	4
 15882             00000014   ppt_1	set	20
 15883                        	.sym	fmt,0,16,1,16
 15884                        	.sym	i,2,16,1,16
 15885                        	.sym	mbr_pt,4,114,1,0,4
 15886                        	.sym	ppt,20,1130,1,32,93,4
 15887                        	.sym	fs,4,138,6,32,72
 15888                        	.sym	part,8,16,6,16
 15889                        	.line	3677
 15890 08:3BAA: F4 xx xx     	pea	#^L671
 15891 08:3BAD: F4 xx xx     	pea	#<L671
 15892 08:3BB0: 22 xx xx xx  	jsl	~~k_debug_string
 15893                        ;
 15894                        ;	fmt = check_fs(fs, 0); /* Load sector 0 and chec
                    k if it is an FAT VBR as SFD */
 15895                        	.line	3679
 15896 08:3BB4: F4 00 00     	pea	#^$0
 15897 08:3BB7: F4 00 00     	pea	#<$0
 15898 08:3BBA: D4 42        	pei	<L672+fs_0+2
 15899 08:3BBC: D4 40        	pei	<L672+fs_0
 15900 08:3BBE: 22 72 3A 08  	jsl	~~check_fs
 15901 08:3BC2: 85 19        	sta	<L673+fmt_1
 15902                        ;
 15903                        ;	//k_debug_integer("find_volume:fmt:", fmt);
 15904                        ;
 15905                        ;	if (fmt != 2 && (fmt >= 3 || part == 0))
 15906                        	.line	3683
 15907                        ;	{
 15908 08:3BC4: A5 19        	lda	<L673+fmt_1
 15909 08:3BC6: C9 02 00     	cmp	#<$2
 15910 08:3BC9: D0 03        	bne	L675
 15911 08:3BCB: 82 25 00     	brl	L10365
 15912                        L675:
 15913 08:3BCE: A5 19        	lda	<L673+fmt_1
 15914 08:3BD0: C9 03 00     	cmp	#<$3
 15915 08:3BD3: 90 03        	bcc	L677
 15916 08:3BD5: 82 07 00     	brl	L676
 15917                        L677:
 15918 08:3BD8: A5 44        	lda	<L672+part_0
 15919 08:3BDA: F0 03        	beq	L678
 15920 08:3BDC: 82 14 00     	brl	L10365
 15921                        L678:
 15922                        L676:
 15923                        	.line	3684
 15924                        ;		return fmt; /* Returns if it is a FAT VB
                    R as auto scan, not a BS or disk error */
 15925                        	.line	3685
 15926 08:3BDF: A5 19        	lda	<L673+fmt_1
 15927                        L679:
 15928 08:3BE1: A8           	tay
 15929 08:3BE2: A5 3E        	lda	<L672+2
 15930 08:3BE4: 85 44        	sta	<L672+2+6
 15931 08:3BE6: A5 3D        	lda	<L672+1
 15932 08:3BE8: 85 43        	sta	<L672+1+6
 15933 08:3BEA: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 304


 15934 08:3BEB: 3B           	tsc
 15935 08:3BEC: 18           	clc
 15936 08:3BED: 69 42 00     	adc	#L672+6
 15937 08:3BF0: 1B           	tcs
 15938 08:3BF1: 98           	tya
 15939 08:3BF2: 6B           	rtl
 15940                        ;	}
 15941                        	.line	3686
 15942                        ;	/* Sector 0 is not an FAT VBR or forced partitio
                    n number wants a partition */
 15943                        ;
 15944                        ;#if FF_LBA64
 15945                        ;	if (fs->win[MBR_Table + PTE_System] == 0xEE)
 15946                        ;	{ /* GPT protective MBR? */
 15947                        ;		DWORD n_ent, v_ent, ofs;
 15948                        ;		QWORD pt_lba;
 15949                        ;
 15950                        ;		if (move_window(fs, 1) != FR_OK) return 
                    4; /* Load GPT header sector (next to MBR) */
 15951                        ;		if (!test_gpt_header(fs->win)) return 3;
                     /* Check if GPT header is valid */
 15952                        ;		n_ent = ld_dword(fs->win + GPTH_PtNum); 
                    /* Number of entries */
 15953                        ;		pt_lba = ld_qword(fs->win + GPTH_PtOfs);
                     /* Table location */
 15954                        ;		for (v_ent = i = 0; i < n_ent; i++)
 15955                        ;		{ /* Find FAT partition */
 15956                        ;			if (move_window(fs, pt_lba + i *
                     SZ_GPTE / SS(fs)) != FR_OK) return 4; /* PT sector */
 15957                        ;			ofs = i * SZ_GPTE % SS(fs); /* O
                    ffset in the sector */
 15958                        ;			if (!mem_cmp(fs->win + ofs + GPT
                    E_PtGuid, GUID_MS_Basic, 16))
 15959                        ;			{ /* MS basic data partition? */
 15960                        ;				v_ent++;
 15961                        ;				fmt = check_fs(fs, ld_qw
                    ord(fs->win + ofs + GPTE_FstLba)); /* Load VBR and check sta
                    tus */
 15962                        ;				if (part == 0 && fmt <= 
                    1) return fmt; /* Auto search (valid FAT volume found first)
                     */
 15963                        ;				if (part != 0 && v_ent =
                    = part) return fmt; /* Forced partition order (regardless of
                     it is valid or not) */
 15964                        ;			}
 15965                        ;		}
 15966                        ;		return 3; /* Not found */
 15967                        ;	}
 15968                        ;#endif
 15969                        ;	if (FF_MULTI_PARTITION && part > 4)
 15970                        L10365:
 15971                        	.line	3714
 15972                        ;		return 3; /* MBR has 4 partitions max */
 15973 08:3BF3: 82 10 00     	brl	L10366
 15974 08:3BF6: A9 04 00     	lda	#$4
 15975 08:3BF9: C5 44        	cmp	<L672+part_0
 15976 08:3BFB: 90 03        	bcc	L680
 15977 08:3BFD: 82 06 00     	brl	L10366
  Sat Jul 10 2021  1:15                                                Page 305


 15978                        L680:
 15979                        	.line	3715
 15980 08:3C00: A9 03 00     	lda	#$3
 15981 08:3C03: 82 DB FF     	brl	L679
 15982                        ;	for (i = 0; i < 4; i++)
 15983                        L10366:
 15984                        	.line	3716
 15985 08:3C06: 64 1B        	stz	<L673+i_1
 15986                        L10369:
 15987                        ;	{ /* Load partition offset in the MBR */
 15988                        	.line	3717
 15989                        ;		//mbr_pt[i] = ld_dword(&(fs->win[ MBR_Ta
                    ble + i * SZ_PTE + PTE_StLba ]));
 15990                        ;
 15991                        ;		ppt[i] = (PPARTITIONTABLE) &(fs->win[(UL
                    ONG) MBR_Table
 15992                        	.line	3720
 15993                        ;				+ ((ULONG) i * 0x10L)]);
 15994 08:3C08: A5 1B        	lda	<L673+i_1
 15995 08:3C0A: 85 05        	sta	<R1
 15996 08:3C0C: 64 07        	stz	<R1+2
 15997 08:3C0E: D4 07        	pei	<R1+2
 15998 08:3C10: D4 05        	pei	<R1
 15999 08:3C12: A9 02 00     	lda	#$2
 16000                        	xref	~~~lasl
 16001 08:3C15: 22 xx xx xx  	jsl	~~~lasl
 16002 08:3C19: 85 01        	sta	<R0
 16003 08:3C1B: 86 03        	stx	<R0+2
 16004 08:3C1D: 18           	clc
 16005 08:3C1E: 7B           	tdc
 16006 08:3C1F: 69 2D 00     	adc	#<L673+ppt_1
 16007 08:3C22: 85 09        	sta	<R2
 16008 08:3C24: A9 00 00     	lda	#$0
 16009 08:3C27: 85 0B        	sta	<R2+2
 16010 08:3C29: 18           	clc
 16011 08:3C2A: A5 09        	lda	<R2
 16012 08:3C2C: 65 01        	adc	<R0
 16013 08:3C2E: 85 0D        	sta	<R3
 16014 08:3C30: A5 0B        	lda	<R2+2
 16015 08:3C32: 65 03        	adc	<R0+2
 16016 08:3C34: 85 0F        	sta	<R3+2
 16017 08:3C36: A5 1B        	lda	<L673+i_1
 16018 08:3C38: 85 09        	sta	<R2
 16019 08:3C3A: 64 0B        	stz	<R2+2
 16020 08:3C3C: D4 0B        	pei	<R2+2
 16021 08:3C3E: D4 09        	pei	<R2
 16022 08:3C40: A9 04 00     	lda	#$4
 16023                        	xref	~~~lasl
 16024 08:3C43: 22 xx xx xx  	jsl	~~~lasl
 16025 08:3C47: 85 01        	sta	<R0
 16026 08:3C49: 86 03        	stx	<R0+2
 16027 08:3C4B: 18           	clc
 16028 08:3C4C: A9 F1 01     	lda	#$1f1
 16029 08:3C4F: 65 01        	adc	<R0
 16030 08:3C51: 85 11        	sta	<17
 16031 08:3C53: A9 00 00     	lda	#$0
 16032 08:3C56: 65 03        	adc	<R0+2
 16033 08:3C58: 85 13        	sta	<17+2
  Sat Jul 10 2021  1:15                                                Page 306


 16034 08:3C5A: 18           	clc
 16035 08:3C5B: A5 40        	lda	<L672+fs_0
 16036 08:3C5D: 65 11        	adc	<17
 16037 08:3C5F: 85 01        	sta	<R0
 16038 08:3C61: A5 42        	lda	<L672+fs_0+2
 16039 08:3C63: 65 13        	adc	<17+2
 16040 08:3C65: 85 03        	sta	<R0+2
 16041 08:3C67: A5 01        	lda	<R0
 16042 08:3C69: 87 0D        	sta	[<R3]
 16043 08:3C6B: A5 03        	lda	<R0+2
 16044 08:3C6D: A0 02 00     	ldy	#$2
 16045 08:3C70: 97 0D        	sta	[<R3],Y
 16046                        ;		////k_debug_hex("find_volume:ppt[i].part
                    ition_type:",ppt[i]->partition_type);
 16047                        ;		////k_debug_long("find_volume:ppt[i].sta
                    rt_sector:", ppt[i]->start_sector);
 16048                        ;
 16049                        ;		mbr_pt[i] = ld_dword(
 16050                        	.line	3725
 16051                        ;				&(fs->win[(ULONG) MBR_Ta
                    ble + ((ULONG) i * 0x10L)]));
 16052 08:3C72: A5 1B        	lda	<L673+i_1
 16053 08:3C74: 85 05        	sta	<R1
 16054 08:3C76: 64 07        	stz	<R1+2
 16055 08:3C78: D4 07        	pei	<R1+2
 16056 08:3C7A: D4 05        	pei	<R1
 16057 08:3C7C: A9 02 00     	lda	#$2
 16058                        	xref	~~~lasl
 16059 08:3C7F: 22 xx xx xx  	jsl	~~~lasl
 16060 08:3C83: 85 01        	sta	<R0
 16061 08:3C85: 86 03        	stx	<R0+2
 16062 08:3C87: 18           	clc
 16063 08:3C88: 7B           	tdc
 16064 08:3C89: 69 1D 00     	adc	#<L673+mbr_pt_1
 16065 08:3C8C: 85 09        	sta	<R2
 16066 08:3C8E: A9 00 00     	lda	#$0
 16067 08:3C91: 85 0B        	sta	<R2+2
 16068 08:3C93: 18           	clc
 16069 08:3C94: A5 09        	lda	<R2
 16070 08:3C96: 65 01        	adc	<R0
 16071 08:3C98: 85 0D        	sta	<R3
 16072 08:3C9A: A5 0B        	lda	<R2+2
 16073 08:3C9C: 65 03        	adc	<R0+2
 16074 08:3C9E: 85 0F        	sta	<R3+2
 16075 08:3CA0: A5 1B        	lda	<L673+i_1
 16076 08:3CA2: 85 09        	sta	<R2
 16077 08:3CA4: 64 0B        	stz	<R2+2
 16078 08:3CA6: D4 0B        	pei	<R2+2
 16079 08:3CA8: D4 09        	pei	<R2
 16080 08:3CAA: A9 04 00     	lda	#$4
 16081                        	xref	~~~lasl
 16082 08:3CAD: 22 xx xx xx  	jsl	~~~lasl
 16083 08:3CB1: 85 01        	sta	<R0
 16084 08:3CB3: 86 03        	stx	<R0+2
 16085 08:3CB5: 18           	clc
 16086 08:3CB6: A9 F1 01     	lda	#$1f1
 16087 08:3CB9: 65 01        	adc	<R0
 16088 08:3CBB: 85 11        	sta	<17
  Sat Jul 10 2021  1:15                                                Page 307


 16089 08:3CBD: A9 00 00     	lda	#$0
 16090 08:3CC0: 65 03        	adc	<R0+2
 16091 08:3CC2: 85 13        	sta	<17+2
 16092 08:3CC4: 18           	clc
 16093 08:3CC5: A5 40        	lda	<L672+fs_0
 16094 08:3CC7: 65 11        	adc	<17
 16095 08:3CC9: 85 01        	sta	<R0
 16096 08:3CCB: A5 42        	lda	<L672+fs_0+2
 16097 08:3CCD: 65 13        	adc	<17+2
 16098 08:3CCF: 85 03        	sta	<R0+2
 16099 08:3CD1: D4 03        	pei	<R0+2
 16100 08:3CD3: D4 01        	pei	<R0
 16101 08:3CD5: 22 3B 00 08  	jsl	~~ld_dword
 16102 08:3CD9: 85 15        	sta	<21
 16103 08:3CDB: 86 17        	stx	<21+2
 16104 08:3CDD: A5 15        	lda	<21
 16105 08:3CDF: 87 0D        	sta	[<R3]
 16106 08:3CE1: A5 17        	lda	<21+2
 16107 08:3CE3: A0 02 00     	ldy	#$2
 16108 08:3CE6: 97 0D        	sta	[<R3],Y
 16109                        ;		////k_debug_long("find_volume:mbr_pt[i]:
                    ", mbr_pt[i]);
 16110                        ;	}
 16111                        	.line	3728
 16112                        L10367:
 16113 08:3CE8: E6 1B        	inc	<L673+i_1
 16114 08:3CEA: A5 1B        	lda	<L673+i_1
 16115 08:3CEC: C9 04 00     	cmp	#<$4
 16116 08:3CEF: B0 03        	bcs	L681
 16117 08:3CF1: 82 14 FF     	brl	L10369
 16118                        L681:
 16119                        L10368:
 16120                        ;
 16121                        ;	i = part ? part - 1 : 0; /* Table index to find 
                    first */
 16122                        	.line	3730
 16123 08:3CF4: A5 44        	lda	<L672+part_0
 16124 08:3CF6: D0 03        	bne	L683
 16125 08:3CF8: 82 08 00     	brl	L682
 16126                        L683:
 16127 08:3CFB: 18           	clc
 16128 08:3CFC: A9 FF FF     	lda	#$ffff
 16129 08:3CFF: 65 44        	adc	<L672+part_0
 16130 08:3D01: 80 03        	bra	L684
 16131                        L682:
 16132 08:3D03: A9 00 00     	lda	#$0
 16133                        L684:
 16134 08:3D06: 85 1B        	sta	<L673+i_1
 16135                        ;
 16136                        ;	do
 16137                        	.line	3732
 16138                        L10372:
 16139                        ;	{ /* Find an FAT volume */
 16140                        	.line	3733
 16141                        ;
 16142                        ;		//fmt = mbr_pt[i] ? check_fs(fs,  mbr_pt
                    [i]) : 3;	/* Check if the partition is FAT */
 16143                        ;		fmt = mbr_pt[i] ? check_fs(fs, ppt[i]->s
  Sat Jul 10 2021  1:15                                                Page 308


                    tart_sector) : 3; /* Check if the partition is FAT */
 16144                        	.line	3736
 16145 08:3D08: A5 1B        	lda	<L673+i_1
 16146 08:3D0A: 85 05        	sta	<R1
 16147 08:3D0C: 64 07        	stz	<R1+2
 16148 08:3D0E: D4 07        	pei	<R1+2
 16149 08:3D10: D4 05        	pei	<R1
 16150 08:3D12: A9 02 00     	lda	#$2
 16151                        	xref	~~~lasl
 16152 08:3D15: 22 xx xx xx  	jsl	~~~lasl
 16153 08:3D19: 85 01        	sta	<R0
 16154 08:3D1B: 86 03        	stx	<R0+2
 16155 08:3D1D: 18           	clc
 16156 08:3D1E: 7B           	tdc
 16157 08:3D1F: 69 1D 00     	adc	#<L673+mbr_pt_1
 16158 08:3D22: 85 09        	sta	<R2
 16159 08:3D24: A9 00 00     	lda	#$0
 16160 08:3D27: 85 0B        	sta	<R2+2
 16161 08:3D29: 18           	clc
 16162 08:3D2A: A5 09        	lda	<R2
 16163 08:3D2C: 65 01        	adc	<R0
 16164 08:3D2E: 85 0D        	sta	<R3
 16165 08:3D30: A5 0B        	lda	<R2+2
 16166 08:3D32: 65 03        	adc	<R0+2
 16167 08:3D34: 85 0F        	sta	<R3+2
 16168 08:3D36: A7 0D        	lda	[<R3]
 16169 08:3D38: A0 02 00     	ldy	#$2
 16170 08:3D3B: 17 0D        	ora	[<R3],Y
 16171 08:3D3D: D0 03        	bne	L686
 16172 08:3D3F: 82 4F 00     	brl	L685
 16173                        L686:
 16174 08:3D42: A5 1B        	lda	<L673+i_1
 16175 08:3D44: 85 09        	sta	<R2
 16176 08:3D46: 64 0B        	stz	<R2+2
 16177 08:3D48: D4 0B        	pei	<R2+2
 16178 08:3D4A: D4 09        	pei	<R2
 16179 08:3D4C: A9 02 00     	lda	#$2
 16180                        	xref	~~~lasl
 16181 08:3D4F: 22 xx xx xx  	jsl	~~~lasl
 16182 08:3D53: 85 01        	sta	<R0
 16183 08:3D55: 86 03        	stx	<R0+2
 16184 08:3D57: 18           	clc
 16185 08:3D58: 7B           	tdc
 16186 08:3D59: 69 2D 00     	adc	#<L673+ppt_1
 16187 08:3D5C: 85 0D        	sta	<R3
 16188 08:3D5E: A9 00 00     	lda	#$0
 16189 08:3D61: 85 0F        	sta	<R3+2
 16190 08:3D63: 18           	clc
 16191 08:3D64: A5 0D        	lda	<R3
 16192 08:3D66: 65 01        	adc	<R0
 16193 08:3D68: 85 11        	sta	<17
 16194 08:3D6A: A5 0F        	lda	<R3+2
 16195 08:3D6C: 65 03        	adc	<R0+2
 16196 08:3D6E: 85 13        	sta	<17+2
 16197 08:3D70: A7 11        	lda	[<17]
 16198 08:3D72: 85 01        	sta	<R0
 16199 08:3D74: A0 02 00     	ldy	#$2
 16200 08:3D77: B7 11        	lda	[<17],Y
  Sat Jul 10 2021  1:15                                                Page 309


 16201 08:3D79: 85 03        	sta	<R0+2
 16202 08:3D7B: A0 0A 00     	ldy	#$a
 16203 08:3D7E: B7 01        	lda	[<R0],Y
 16204 08:3D80: 48           	pha
 16205 08:3D81: A0 08 00     	ldy	#$8
 16206 08:3D84: B7 01        	lda	[<R0],Y
 16207 08:3D86: 48           	pha
 16208 08:3D87: D4 42        	pei	<L672+fs_0+2
 16209 08:3D89: D4 40        	pei	<L672+fs_0
 16210 08:3D8B: 22 72 3A 08  	jsl	~~check_fs
 16211 08:3D8F: 80 03        	bra	L687
 16212                        L685:
 16213 08:3D91: A9 03 00     	lda	#$3
 16214                        L687:
 16215 08:3D94: 85 19        	sta	<L673+fmt_1
 16216                        ;		////k_debug_integer("find_volume:part-fm
                    t:", fmt);
 16217                        ;	} while (part == 0 && fmt >= 2 && ++i < 4);
 16218                        	.line	3738
 16219                        L10370:
 16220 08:3D96: A5 44        	lda	<L672+part_0
 16221 08:3D98: F0 03        	beq	L689
 16222 08:3D9A: 82 16 00     	brl	L688
 16223                        L689:
 16224 08:3D9D: A5 19        	lda	<L673+fmt_1
 16225 08:3D9F: C9 02 00     	cmp	#<$2
 16226 08:3DA2: B0 03        	bcs	L690
 16227 08:3DA4: 82 0C 00     	brl	L688
 16228                        L690:
 16229 08:3DA7: E6 1B        	inc	<L673+i_1
 16230 08:3DA9: A5 1B        	lda	<L673+i_1
 16231 08:3DAB: C9 04 00     	cmp	#<$4
 16232 08:3DAE: B0 03        	bcs	L691
 16233 08:3DB0: 82 55 FF     	brl	L10372
 16234                        L691:
 16235                        L688:
 16236                        L10371:
 16237                        ;
 16238                        ;	//k_debug_integer("find_volume:fmt2:", fmt);
 16239                        ;
 16240                        ;	return fmt;
 16241                        	.line	3742
 16242 08:3DB3: A5 19        	lda	<L673+fmt_1
 16243 08:3DB5: 82 29 FE     	brl	L679
 16244                        ;}
 16245                        	.line	3743
 16246                        	.endblock	3743
 16247             0000003C   L672	equ	60
 16248             00000019   L673	equ	25
 16249 08:3DB8:              	ends
 16250                        	efunc
 16251                        	.endfunc	3743,25,60
 16252                        	.line	3743
 16253                        	data
 16254                        L671:
 16255 00:0122: 66 69 6E 64  	db	$66,$69,$6E,$64,$5F,$76,$6F,$6C,$75,$6D,
                    $65,$2E,$2E,$2E,$0D
       00:0126: 5F 76 6F 6C 
  Sat Jul 10 2021  1:15                                                Page 310


       00:012A: 75 6D 65 2E 
       00:012E: 2E 2E 0D 
 16256 00:0131: 0A 00        	db	$0A,$00
 16257 00:0133:              	ends
 16258                        ;
 16259                        ;/*-----------------------------------------------
                    ------------------------*/
 16260                        ;/* Determine logical drive number and mount the v
                    olume if needed         */
 16261                        ;/*-----------------------------------------------
                    ------------------------*/
 16262                        ;
 16263                        ;static FRESULT mount_volume( /* FR_OK(0): success
                    ful, !=0: an error occurred */
 16264                        ;const TCHAR** path, /* Pointer to pointer to the 
                    path name (drive number) */
 16265                        ;FATFS** rfs, /* Pointer to pointer to the found f
                    ilesystem object */
 16266                        ;BYTE mode /* !=0: Check write protection for writ
                    e access */
 16267                        ;)
 16268                        ;{
 16269                        	.line	3749
 16270                        	.line	3754
 16271                        	FFDOS
 16272                        	func
 16273                        	.function	3754
 16274                        ~~mount_volume:
 16275                        	longa	on
 16276                        	longi	on
 16277 08:3DB8: 3B           	tsc
 16278 08:3DB9: 38           	sec
 16279 08:3DBA: E9 33 00     	sbc	#L693
 16280 08:3DBD: 1B           	tcs
 16281 08:3DBE: 0B           	phd
 16282 08:3DBF: 5B           	tcd
 16283             00000004   path_0	set	4
 16284             00000008   rfs_0	set	8
 16285             0000000C   mode_0	set	12
 16286                        	.block	3754
 16287                        ;	int vol;
 16288                        ;	DSTATUS stat;
 16289                        ;	LBA_t bsect;
 16290                        ;	DWORD tsect, sysect, fasize, nclst, szbfat;
 16291                        ;	WORD nrsv;
 16292                        ;	FATFS *fs;
 16293                        ;	UINT fmt;
 16294                        ;
 16295                        ;	//k_debug_string("mount_volume...\r\n");
 16296                        ;
 16297                        ;	/* Get logical drive number */
 16298                        ;	*rfs = 0;
 16299             00000000   vol_1	set	0
 16300             00000002   stat_1	set	2
 16301             00000003   bsect_1	set	3
 16302             00000007   tsect_1	set	7
 16303             0000000B   sysect_1	set	11
 16304             0000000F   fasize_1	set	15
  Sat Jul 10 2021  1:15                                                Page 311


 16305             00000013   nclst_1	set	19
 16306             00000017   szbfat_1	set	23
 16307             0000001B   nrsv_1	set	27
 16308             0000001D   fs_1	set	29
 16309             00000021   fmt_1	set	33
 16310                        	.sym	vol,0,5,1,16
 16311                        	.sym	stat,2,14,1,8
 16312                        	.sym	bsect,3,18,1,32
 16313                        	.sym	tsect,7,18,1,32
 16314                        	.sym	sysect,11,18,1,32
 16315                        	.sym	fasize,15,18,1,32
 16316                        	.sym	nclst,19,18,1,32
 16317                        	.sym	szbfat,23,18,1,32
 16318                        	.sym	nrsv,27,5,1,16
 16319                        	.sym	fs,29,138,1,32,72
 16320                        	.sym	fmt,33,16,1,16
 16321                        	.sym	path,4,1166,6,32
 16322                        	.sym	rfs,8,1162,6,32,72
 16323                        	.sym	mode,12,14,6,8
 16324                        	.line	3766
 16325 08:3DC0: A9 00 00     	lda	#$0
 16326 08:3DC3: 87 3B        	sta	[<L693+rfs_0]
 16327 08:3DC5: A9 00 00     	lda	#$0
 16328 08:3DC8: A0 02 00     	ldy	#$2
 16329 08:3DCB: 97 3B        	sta	[<L693+rfs_0],Y
 16330                        ;	vol = get_ldnumber(path);
 16331                        	.line	3767
 16332 08:3DCD: D4 39        	pei	<L693+path_0+2
 16333 08:3DCF: D4 37        	pei	<L693+path_0
 16334 08:3DD1: 22 A0 38 08  	jsl	~~get_ldnumber
 16335 08:3DD5: 85 11        	sta	<L694+vol_1
 16336                        ;
 16337                        ;	////k_debug_integer("mount_volume:vol:", vol);
 16338                        ;
 16339                        ;	if (vol < 0)
 16340                        	.line	3771
 16341                        ;		return FR_INVALID_DRIVE;
 16342 08:3DD7: A5 11        	lda	<L694+vol_1
 16343 08:3DD9: 30 03        	bmi	L696
 16344 08:3DDB: 82 15 00     	brl	L10373
 16345                        L696:
 16346                        	.line	3772
 16347 08:3DDE: A9 0B 00     	lda	#$b
 16348                        L697:
 16349 08:3DE1: A8           	tay
 16350 08:3DE2: A5 35        	lda	<L693+2
 16351 08:3DE4: 85 3F        	sta	<L693+2+10
 16352 08:3DE6: A5 34        	lda	<L693+1
 16353 08:3DE8: 85 3E        	sta	<L693+1+10
 16354 08:3DEA: 2B           	pld
 16355 08:3DEB: 3B           	tsc
 16356 08:3DEC: 18           	clc
 16357 08:3DED: 69 3D 00     	adc	#L693+10
 16358 08:3DF0: 1B           	tcs
 16359 08:3DF1: 98           	tya
 16360 08:3DF2: 6B           	rtl
 16361                        ;
 16362                        ;	/* Check if the filesystem object is valid or no
  Sat Jul 10 2021  1:15                                                Page 312


                    t */
 16363                        ;	fs = FatFs[vol]; /* Get pointer to the filesyste
                    m object */
 16364                        L10373:
 16365                        	.line	3775
 16366 08:3DF3: A5 11        	lda	<L694+vol_1
 16367 08:3DF5: 0A           	asl	A
 16368 08:3DF6: 0A           	asl	A
 16369 08:3DF7: 85 01        	sta	<R0
 16370 08:3DF9: 18           	clc
 16371 08:3DFA: A9 xx xx     	lda	#<~~FatFs
 16372 08:3DFD: 65 01        	adc	<R0
 16373 08:3DFF: 85 05        	sta	<R1
 16374 08:3E01: B2 05        	lda	(<R1)
 16375 08:3E03: 85 2E        	sta	<L694+fs_1
 16376 08:3E05: A0 02 00     	ldy	#$2
 16377 08:3E08: B1 05        	lda	(<R1),Y
 16378 08:3E0A: 85 30        	sta	<L694+fs_1+2
 16379                        ;	if (!fs)
 16380                        	.line	3776
 16381                        ;		return FR_NOT_ENABLED; /* Is the filesys
                    tem object available? */
 16382 08:3E0C: A5 2E        	lda	<L694+fs_1
 16383 08:3E0E: 05 30        	ora	<L694+fs_1+2
 16384 08:3E10: F0 03        	beq	L698
 16385 08:3E12: 82 06 00     	brl	L10374
 16386                        L698:
 16387                        	.line	3777
 16388 08:3E15: A9 0C 00     	lda	#$c
 16389 08:3E18: 82 C6 FF     	brl	L697
 16390                        ;#if FF_FS_REENTRANT
 16391                        ;	if (!lock_fs(fs)) return FR_TIMEOUT; /* Lock the
                     volume */
 16392                        ;#endif
 16393                        ;	*rfs = fs; /* Return pointer to the filesystem o
                    bject */
 16394                        L10374:
 16395                        	.line	3781
 16396 08:3E1B: A5 2E        	lda	<L694+fs_1
 16397 08:3E1D: 87 3B        	sta	[<L693+rfs_0]
 16398 08:3E1F: A5 30        	lda	<L694+fs_1+2
 16399 08:3E21: A0 02 00     	ldy	#$2
 16400 08:3E24: 97 3B        	sta	[<L693+rfs_0],Y
 16401                        ;
 16402                        ;	mode &= (BYTE) ~FA_READ; /* Desired access mode,
                     write access or not */
 16403                        	.line	3783
 16404 08:3E26: E2 20        	sep	#$20
 16405                        	longa	off
 16406 08:3E28: A9 01        	lda	#$1
 16407 08:3E2A: 14 3F        	trb	<L693+mode_0
 16408 08:3E2C: C2 20        	rep	#$20
 16409                        	longa	on
 16410                        ;	if (fs->fs_type != 0)
 16411                        	.line	3784
 16412                        ;	{ /* If the volume has been mounted */
 16413 08:3E2E: A7 2E        	lda	[<L694+fs_1]
 16414 08:3E30: 29 FF 00     	and	#$ff
  Sat Jul 10 2021  1:15                                                Page 313


 16415 08:3E33: D0 03        	bne	L699
 16416 08:3E35: 82 40 00     	brl	L10375
 16417                        L699:
 16418                        	.line	3785
 16419                        ;		stat = disk_status(fs->pdrv);
 16420                        	.line	3786
 16421 08:3E38: A0 01 00     	ldy	#$1
 16422 08:3E3B: B7 2E        	lda	[<L694+fs_1],Y
 16423 08:3E3D: 48           	pha
 16424 08:3E3E: 22 xx xx xx  	jsl	~~disk_status
 16425 08:3E42: E2 20        	sep	#$20
 16426                        	longa	off
 16427 08:3E44: 85 13        	sta	<L694+stat_1
 16428 08:3E46: C2 20        	rep	#$20
 16429                        	longa	on
 16430                        ;		if (!(stat & STA_NOINIT))
 16431                        	.line	3787
 16432                        ;		{ /* and the physical drive is kept init
                    ialized */
 16433 08:3E48: E2 20        	sep	#$20
 16434                        	longa	off
 16435 08:3E4A: A5 13        	lda	<L694+stat_1
 16436 08:3E4C: 29 01        	and	#<$1
 16437 08:3E4E: C2 20        	rep	#$20
 16438                        	longa	on
 16439 08:3E50: F0 03        	beq	L700
 16440 08:3E52: 82 23 00     	brl	L10376
 16441                        L700:
 16442                        	.line	3788
 16443                        ;			if (!FF_FS_READONLY && mode && (
                    stat & STA_PROTECT))
 16444                        	.line	3789
 16445                        ;			{ /* Check write protection if n
                    eeded */
 16446 08:3E55: A5 3F        	lda	<L693+mode_0
 16447 08:3E57: 29 FF 00     	and	#$ff
 16448 08:3E5A: D0 03        	bne	L701
 16449 08:3E5C: 82 13 00     	brl	L10377
 16450                        L701:
 16451 08:3E5F: E2 20        	sep	#$20
 16452                        	longa	off
 16453 08:3E61: A5 13        	lda	<L694+stat_1
 16454 08:3E63: 29 04        	and	#<$4
 16455 08:3E65: C2 20        	rep	#$20
 16456                        	longa	on
 16457 08:3E67: D0 03        	bne	L702
 16458 08:3E69: 82 06 00     	brl	L10377
 16459                        L702:
 16460                        	.line	3790
 16461                        ;				return FR_WRITE_PROTECTE
                    D;
 16462                        	.line	3791
 16463 08:3E6C: A9 0A 00     	lda	#$a
 16464 08:3E6F: 82 6F FF     	brl	L697
 16465                        ;			}
 16466                        	.line	3792
 16467                        ;
 16468                        ;			////k_debug_integer("mount_volum
  Sat Jul 10 2021  1:15                                                Page 314


                    e:FR_OK:", FR_OK);
 16469                        ;
 16470                        ;			return FR_OK; /* The filesystem 
                    object is already valid */
 16471                        L10377:
 16472                        	.line	3796
 16473 08:3E72: A9 00 00     	lda	#$0
 16474 08:3E75: 82 69 FF     	brl	L697
 16475                        ;		}
 16476                        	.line	3797
 16477                        ;	}
 16478                        L10376:
 16479                        	.line	3798
 16480                        ;
 16481                        ;	/* The filesystem object is not valid. */
 16482                        ;	/* Following code attempts to mount the volume. 
                    (find a FAT volume, analyze the BPB and initialize the files
                    ystem object) */
 16483                        ;
 16484                        ;	fs->fs_type = 0; /* Clear the filesystem object 
                    */
 16485                        L10375:
 16486                        	.line	3803
 16487 08:3E78: E2 20        	sep	#$20
 16488                        	longa	off
 16489 08:3E7A: A9 00        	lda	#$0
 16490 08:3E7C: 87 2E        	sta	[<L694+fs_1]
 16491 08:3E7E: C2 20        	rep	#$20
 16492                        	longa	on
 16493                        ;	fs->pdrv = LD2PD(vol); /* Volume hosting physica
                    l drive */
 16494                        	.line	3804
 16495 08:3E80: E2 20        	sep	#$20
 16496                        	longa	off
 16497 08:3E82: A5 11        	lda	<L694+vol_1
 16498 08:3E84: A0 01 00     	ldy	#$1
 16499 08:3E87: 97 2E        	sta	[<L694+fs_1],Y
 16500 08:3E89: C2 20        	rep	#$20
 16501                        	longa	on
 16502                        ;	stat = disk_initialize(fs->pdrv); /* Initialize 
                    the physical drive */
 16503                        	.line	3805
 16504 08:3E8B: A0 01 00     	ldy	#$1
 16505 08:3E8E: B7 2E        	lda	[<L694+fs_1],Y
 16506 08:3E90: 48           	pha
 16507 08:3E91: 22 xx xx xx  	jsl	~~disk_initialize
 16508 08:3E95: E2 20        	sep	#$20
 16509                        	longa	off
 16510 08:3E97: 85 13        	sta	<L694+stat_1
 16511 08:3E99: C2 20        	rep	#$20
 16512                        	longa	on
 16513                        ;	if (stat & STA_NOINIT)
 16514                        	.line	3806
 16515                        ;	{ /* Check if the initialization succeeded */
 16516 08:3E9B: E2 20        	sep	#$20
 16517                        	longa	off
 16518 08:3E9D: A5 13        	lda	<L694+stat_1
 16519 08:3E9F: 29 01        	and	#<$1
  Sat Jul 10 2021  1:15                                                Page 315


 16520 08:3EA1: C2 20        	rep	#$20
 16521                        	longa	on
 16522 08:3EA3: D0 03        	bne	L703
 16523 08:3EA5: 82 06 00     	brl	L10378
 16524                        L703:
 16525                        	.line	3807
 16526                        ;		return FR_NOT_READY; /* Failed to initia
                    lize due to no medium or hard error */
 16527                        	.line	3808
 16528 08:3EA8: A9 03 00     	lda	#$3
 16529 08:3EAB: 82 33 FF     	brl	L697
 16530                        ;	}
 16531                        	.line	3809
 16532                        ;	if (!FF_FS_READONLY && mode && (stat & STA_PROTE
                    CT))
 16533                        L10378:
 16534                        	.line	3810
 16535                        ;	{ /* Check disk write protection if needed */
 16536 08:3EAE: A5 3F        	lda	<L693+mode_0
 16537 08:3EB0: 29 FF 00     	and	#$ff
 16538 08:3EB3: D0 03        	bne	L704
 16539 08:3EB5: 82 13 00     	brl	L10379
 16540                        L704:
 16541 08:3EB8: E2 20        	sep	#$20
 16542                        	longa	off
 16543 08:3EBA: A5 13        	lda	<L694+stat_1
 16544 08:3EBC: 29 04        	and	#<$4
 16545 08:3EBE: C2 20        	rep	#$20
 16546                        	longa	on
 16547 08:3EC0: D0 03        	bne	L705
 16548 08:3EC2: 82 06 00     	brl	L10379
 16549                        L705:
 16550                        	.line	3811
 16551                        ;		return FR_WRITE_PROTECTED;
 16552                        	.line	3812
 16553 08:3EC5: A9 0A 00     	lda	#$a
 16554 08:3EC8: 82 16 FF     	brl	L697
 16555                        ;	}
 16556                        	.line	3813
 16557                        ;#if FF_MAX_SS != FF_MIN_SS			
                    	/* Get sector size (multiple sector size cfg only) */
 16558                        ;	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs
                    )) != RES_OK) return FR_DISK_ERR;
 16559                        ;	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || 
                    (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 16560                        ;#endif
 16561                        ;
 16562                        ;	/* Find an FAT volume on the drive */
 16563                        ;	fmt = find_volume(fs, LD2PT(vol));
 16564                        L10379:
 16565                        	.line	3820
 16566 08:3ECB: F4 00 00     	pea	#<$0
 16567 08:3ECE: D4 30        	pei	<L694+fs_1+2
 16568 08:3ED0: D4 2E        	pei	<L694+fs_1
 16569 08:3ED2: 22 A2 3B 08  	jsl	~~find_volume
 16570 08:3ED6: 85 32        	sta	<L694+fmt_1
 16571                        ;
 16572                        ;	////k_debug_integer("mount_volume:fmt:", fmt);
  Sat Jul 10 2021  1:15                                                Page 316


 16573                        ;	//k_debug_integer("mount_volume::fmt:",fmt);
 16574                        ;
 16575                        ;	if (fmt == 4)
 16576                        	.line	3825
 16577                        ;		return FR_DISK_ERR; /* An error occured 
                    in the disk I/O layer */
 16578 08:3ED8: A5 32        	lda	<L694+fmt_1
 16579 08:3EDA: C9 04 00     	cmp	#<$4
 16580 08:3EDD: F0 03        	beq	L706
 16581 08:3EDF: 82 06 00     	brl	L10380
 16582                        L706:
 16583                        	.line	3826
 16584 08:3EE2: A9 01 00     	lda	#$1
 16585 08:3EE5: 82 F9 FE     	brl	L697
 16586                        ;	//if (fmt >= 2) return FR_NO_FILESYSTEM;	
                    /* No FAT volume is found */
 16587                        ;	if (fmt == 2)
 16588                        L10380:
 16589                        	.line	3828
 16590                        ;		return FR_NO_FILESYSTEM; /* No FAT volum
                    e is found */
 16591 08:3EE8: A5 32        	lda	<L694+fmt_1
 16592 08:3EEA: C9 02 00     	cmp	#<$2
 16593 08:3EED: F0 03        	beq	L707
 16594 08:3EEF: 82 06 00     	brl	L10381
 16595                        L707:
 16596                        	.line	3829
 16597 08:3EF2: A9 0D 00     	lda	#$d
 16598 08:3EF5: 82 E9 FE     	brl	L697
 16599                        ;	bsect = fs->winsect; /* Volume location */
 16600                        L10381:
 16601                        	.line	3830
 16602 08:3EF8: A0 2F 00     	ldy	#$2f
 16603 08:3EFB: B7 2E        	lda	[<L694+fs_1],Y
 16604 08:3EFD: 85 14        	sta	<L694+bsect_1
 16605 08:3EFF: A0 31 00     	ldy	#$31
 16606 08:3F02: B7 2E        	lda	[<L694+fs_1],Y
 16607 08:3F04: 85 16        	sta	<L694+bsect_1+2
 16608                        ;
 16609                        ;	////k_debug_long("mount_volume:bsect:", bsect);
 16610                        ;	/* An FAT volume is found (bsect). Following cod
                    e initializes the filesystem object */
 16611                        ;
 16612                        ;#if FF_FS_EXFAT
 16613                        ;	if (fmt == 1)
 16614                        ;	{
 16615                        ;		QWORD maxlba;
 16616                        ;		DWORD so, cv, bcl, i;
 16617                        ;
 16618                        ;		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx 
                    + 53 && fs->win[i] == 0; i++); /* Check zero filler */
 16619                        ;		if (i < BPB_ZeroedEx + 53) return FR_NO_
                    FILESYSTEM;
 16620                        ;
 16621                        ;		if (ld_word(FADDR(BPB_FSVerEx)) != 0x100
                    ) return FR_NO_FILESYSTEM; /* Check exFAT version (must be v
                    ersion 1.0) */
 16622                        ;
  Sat Jul 10 2021  1:15                                                Page 317


 16623                        ;		if (1 << fs->win[BPB_BytsPerSecEx] != SS
                    (fs))
 16624                        ;		{ /* (BPB_BytsPerSecEx must be equal to 
                    the physical sector size) */
 16625                        ;			return FR_NO_FILESYSTEM;
 16626                        ;		}
 16627                        ;
 16628                        ;		maxlba = ld_qword(FADDR(BPB_TotSecEx)) +
                     bsect; /* Last LBA + 1 of the volume */
 16629                        ;		if (!FF_LBA64 && maxlba >= 0x100000000) 
                    return FR_NO_FILESYSTEM; /* (It cannot be handled in 32-bit 
                    LBA) */
 16630                        ;
 16631                        ;		fs->fsize = ld_dword(fs->win[BPB_FatSzEx
                    ]); /* Number of sectors per FAT */
 16632                        ;
 16633                        ;		fs->n_fats = fs->win[BPB_NumFATsEx]; /* 
                    Number of FATs */
 16634                        ;		if (fs->n_fats != 1) return FR_NO_FILESY
                    STEM; /* (Supports only 1 FAT) */
 16635                        ;
 16636                        ;		fs->csize = 1 << fs->win[BPB_SecPerClusE
                    x]; /* Cluster size */
 16637                        ;		if (fs->csize == 0) return FR_NO_FILESYS
                    TEM; /* (Must be 1..32768) */
 16638                        ;
 16639                        ;		nclst = ld_dword(fs->win + BPB_NumClusEx
                    ); /* Number of clusters */
 16640                        ;		if (nclst > MAX_EXFAT) return FR_NO_FILE
                    SYSTEM; /* (Too many clusters) */
 16641                        ;		fs->n_fatent = nclst + 2;
 16642                        ;
 16643                        ;		/* Boundaries and Limits */
 16644                        ;		fs->volbase = bsect;
 16645                        ;		fs->database = bsect + ld_dword(fs->win 
                    + BPB_DataOfsEx);
 16646                        ;		fs->fatbase = bsect + ld_dword(fs->win +
                     BPB_FatOfsEx);
 16647                        ;		if (maxlba < (QWORD)fs->database + nclst
                     * fs->csize) return FR_NO_FILESYSTEM; /* (Volume size must 
                    not be smaller than the size requiered) */
 16648                        ;		fs->dirbase = ld_dword(fs->win + BPB_Roo
                    tClusEx);
 16649                        ;
 16650                        ;		/* Get bitmap location and check if it i
                    s contiguous (implementation assumption) */
 16651                        ;		so = i = 0;
 16652                        ;		for (;;)
 16653                        ;		{ /* Find the bitmap entry in the root d
                    irectory (in only first cluster) */
 16654                        ;			if (i == 0)
 16655                        ;			{
 16656                        ;				if (so >= fs->csize) ret
                    urn FR_NO_FILESYSTEM; /* Not found? */
 16657                        ;				if (move_window(fs, clst
                    2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK
                    _ERR;
 16658                        ;				so++;
  Sat Jul 10 2021  1:15                                                Page 318


 16659                        ;			}
 16660                        ;			if (fs->win[i] == ET_BITMAP) bre
                    ak; /* Is it a bitmap entry? */
 16661                        ;			i = (i + SZDIRE) % SS(fs); /* Ne
                    xt entry */
 16662                        ;		}
 16663                        ;		bcl = ld_dword(fs->win + i + 20); /* Bit
                    map cluster */
 16664                        ;		if (bcl < 2 || bcl >= fs->n_fatent) retu
                    rn FR_NO_FILESYSTEM;
 16665                        ;		fs->bitbase = fs->database + fs->csize *
                     (bcl - 2); /* Bitmap sector */
 16666                        ;		for (;;)
 16667                        ;		{ /* Check if bitmap is contiguous */
 16668                        ;			if (move_window(fs, fs->fatbase 
                    + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 16669                        ;			cv = ld_dword(fs->win + bcl % (S
                    S(fs) / 4) * 4);
 16670                        ;			if (cv == 0xFFFFFFFF) break; /* 
                    Last link? */
 16671                        ;			if (cv != ++bcl) return FR_NO_FI
                    LESYSTEM; /* Fragmented? */
 16672                        ;		}
 16673                        ;
 16674                        ;#if !FF_FS_READONLY
 16675                        ;		fs->last_clst = fs->free_clst = 0xFFFFFF
                    FF; /* Initialize cluster allocation information */
 16676                        ;#endif
 16677                        ;		fmt = FS_EXFAT; /* FAT sub-type */
 16678                        ;	}
 16679                        ;	else
 16680                        ;#endif	/* FF_FS_EXFAT */
 16681                        ;	{
 16682                        	.line	3904
 16683                        ;
 16684                        ;		////k_debug_pointer("mount_volume:fs->wi
                    n:", fs->win);
 16685                        ;		//k_debug_long( "mount_volume:BPB_BytsPe
                    rSec:",(long)BPB_BytsPerSec);
 16686                        ;		//k_debug_integer("mount_volume:SS(fs):"
                    , SS(fs));
 16687                        ;		//k_debug_integer("mount_volume:fs->win 
                    + BPB_BytsPerSec:",ld_word(FADDR(BPB_BytsPerSec)));
 16688                        ;
 16689                        ;
 16690                        ;		if (ld_word(FADDR(BPB_BytsPerSec)) != SS
                    (fs))
 16691                        	.line	3912
 16692                        ;			return FR_NO_FILESYSTEM; /* (BPB
                    _BytsPerSec must be equal to the physical sector size) */
 16693 08:3F06: 18           	clc
 16694 08:3F07: A9 3E 00     	lda	#$3e
 16695 08:3F0A: 65 2E        	adc	<L694+fs_1
 16696 08:3F0C: 85 01        	sta	<R0
 16697 08:3F0E: A9 00 00     	lda	#$0
 16698 08:3F11: 65 30        	adc	<L694+fs_1+2
 16699 08:3F13: 85 03        	sta	<R0+2
 16700 08:3F15: D4 03        	pei	<R0+2
  Sat Jul 10 2021  1:15                                                Page 319


 16701 08:3F17: D4 01        	pei	<R0
 16702 08:3F19: 22 00 00 08  	jsl	~~ld_word
 16703 08:3F1D: 85 05        	sta	<R1
 16704 08:3F1F: A5 05        	lda	<R1
 16705 08:3F21: C9 00 02     	cmp	#<$200
 16706 08:3F24: D0 03        	bne	L708
 16707 08:3F26: 82 06 00     	brl	L10382
 16708                        L708:
 16709                        	.line	3913
 16710 08:3F29: A9 0D 00     	lda	#$d
 16711 08:3F2C: 82 B2 FE     	brl	L697
 16712                        ;
 16713                        ;		fasize = ld_word(FADDR(BPB_FATSz16)); /*
                     Number of sectors per FAT */
 16714                        L10382:
 16715                        	.line	3915
 16716 08:3F2F: 18           	clc
 16717 08:3F30: A9 49 00     	lda	#$49
 16718 08:3F33: 65 2E        	adc	<L694+fs_1
 16719 08:3F35: 85 01        	sta	<R0
 16720 08:3F37: A9 00 00     	lda	#$0
 16721 08:3F3A: 65 30        	adc	<L694+fs_1+2
 16722 08:3F3C: 85 03        	sta	<R0+2
 16723 08:3F3E: D4 03        	pei	<R0+2
 16724 08:3F40: D4 01        	pei	<R0
 16725 08:3F42: 22 00 00 08  	jsl	~~ld_word
 16726 08:3F46: 85 05        	sta	<R1
 16727 08:3F48: A0 00 00     	ldy	#$0
 16728 08:3F4B: A5 05        	lda	<R1
 16729 08:3F4D: 10 01        	bpl	L709
 16730 08:3F4F: 88           	dey
 16731                        L709:
 16732 08:3F50: 85 20        	sta	<L694+fasize_1
 16733 08:3F52: 84 22        	sty	<L694+fasize_1+2
 16734                        ;		if (fasize == 0)
 16735                        	.line	3916
 16736                        ;			fasize = ld_dword(&(fs->win[BPB_
                    FATSz32]));
 16737 08:3F54: A5 20        	lda	<L694+fasize_1
 16738 08:3F56: 05 22        	ora	<L694+fasize_1+2
 16739 08:3F58: F0 03        	beq	L710
 16740 08:3F5A: 82 1B 00     	brl	L10383
 16741                        L710:
 16742                        	.line	3917
 16743 08:3F5D: 18           	clc
 16744 08:3F5E: A9 57 00     	lda	#$57
 16745 08:3F61: 65 2E        	adc	<L694+fs_1
 16746 08:3F63: 85 01        	sta	<R0
 16747 08:3F65: A9 00 00     	lda	#$0
 16748 08:3F68: 65 30        	adc	<L694+fs_1+2
 16749 08:3F6A: 85 03        	sta	<R0+2
 16750 08:3F6C: D4 03        	pei	<R0+2
 16751 08:3F6E: D4 01        	pei	<R0
 16752 08:3F70: 22 3B 00 08  	jsl	~~ld_dword
 16753 08:3F74: 85 20        	sta	<L694+fasize_1
 16754 08:3F76: 86 22        	stx	<L694+fasize_1+2
 16755                        ;		fs->fsize = fasize;
 16756                        L10383:
  Sat Jul 10 2021  1:15                                                Page 320


 16757                        	.line	3918
 16758 08:3F78: A5 20        	lda	<L694+fasize_1
 16759 08:3F7A: A0 1B 00     	ldy	#$1b
 16760 08:3F7D: 97 2E        	sta	[<L694+fs_1],Y
 16761 08:3F7F: A5 22        	lda	<L694+fasize_1+2
 16762 08:3F81: A0 1D 00     	ldy	#$1d
 16763 08:3F84: 97 2E        	sta	[<L694+fs_1],Y
 16764                        ;
 16765                        ;		fs->n_fats = fs->win[BPB_NumFATs]; /* Nu
                    mber of FATs */
 16766                        	.line	3920
 16767 08:3F86: E2 20        	sep	#$20
 16768                        	longa	off
 16769 08:3F88: A0 43 00     	ldy	#$43
 16770 08:3F8B: B7 2E        	lda	[<L694+fs_1],Y
 16771 08:3F8D: A0 02 00     	ldy	#$2
 16772 08:3F90: 97 2E        	sta	[<L694+fs_1],Y
 16773 08:3F92: C2 20        	rep	#$20
 16774                        	longa	on
 16775                        ;
 16776                        ;		//k_debug_long("mount_volume:n_fats:", f
                    s->n_fats);
 16777                        ;
 16778                        ;		if (fs->n_fats != 1 && fs->n_fats != 2)
 16779                        	.line	3924
 16780                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be 1 or 2) */
 16781 08:3F94: E2 20        	sep	#$20
 16782                        	longa	off
 16783 08:3F96: A0 02 00     	ldy	#$2
 16784 08:3F99: B7 2E        	lda	[<L694+fs_1],Y
 16785 08:3F9B: C9 01        	cmp	#<$1
 16786 08:3F9D: C2 20        	rep	#$20
 16787                        	longa	on
 16788 08:3F9F: D0 03        	bne	L711
 16789 08:3FA1: 82 16 00     	brl	L10384
 16790                        L711:
 16791 08:3FA4: E2 20        	sep	#$20
 16792                        	longa	off
 16793 08:3FA6: A0 02 00     	ldy	#$2
 16794 08:3FA9: B7 2E        	lda	[<L694+fs_1],Y
 16795 08:3FAB: C9 02        	cmp	#<$2
 16796 08:3FAD: C2 20        	rep	#$20
 16797                        	longa	on
 16798 08:3FAF: D0 03        	bne	L712
 16799 08:3FB1: 82 06 00     	brl	L10384
 16800                        L712:
 16801                        	.line	3925
 16802 08:3FB4: A9 0D 00     	lda	#$d
 16803 08:3FB7: 82 27 FE     	brl	L697
 16804                        ;		fasize *= fs->n_fats; /* Number of secto
                    rs for FAT area */
 16805                        L10384:
 16806                        	.line	3926
 16807 08:3FBA: A0 02 00     	ldy	#$2
 16808 08:3FBD: B7 2E        	lda	[<L694+fs_1],Y
 16809 08:3FBF: 29 FF 00     	and	#$ff
 16810 08:3FC2: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 321


 16811 08:3FC4: 64 03        	stz	<R0+2
 16812 08:3FC6: D4 22        	pei	<L694+fasize_1+2
 16813 08:3FC8: D4 20        	pei	<L694+fasize_1
 16814 08:3FCA: D4 03        	pei	<R0+2
 16815 08:3FCC: D4 01        	pei	<R0
 16816                        	xref	~~~lmul
 16817 08:3FCE: 22 xx xx xx  	jsl	~~~lmul
 16818 08:3FD2: 85 20        	sta	<L694+fasize_1
 16819 08:3FD4: 86 22        	stx	<L694+fasize_1+2
 16820                        ;
 16821                        ;		fs->csize = fs->win[BPB_SecPerClus]; /* 
                    Cluster size */
 16822                        	.line	3928
 16823 08:3FD6: A0 40 00     	ldy	#$40
 16824 08:3FD9: B7 2E        	lda	[<L694+fs_1],Y
 16825 08:3FDB: 29 FF 00     	and	#$ff
 16826 08:3FDE: A0 09 00     	ldy	#$9
 16827 08:3FE1: 97 2E        	sta	[<L694+fs_1],Y
 16828                        ;		if (fs->csize == 0 || (fs->csize & (fs->
                    csize - 1)))
 16829                        	.line	3929
 16830                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be power of 2) */
 16831 08:3FE3: A0 09 00     	ldy	#$9
 16832 08:3FE6: B7 2E        	lda	[<L694+fs_1],Y
 16833 08:3FE8: D0 03        	bne	L714
 16834 08:3FEA: 82 17 00     	brl	L713
 16835                        L714:
 16836 08:3FED: 18           	clc
 16837 08:3FEE: A9 FF FF     	lda	#$ffff
 16838 08:3FF1: A0 09 00     	ldy	#$9
 16839 08:3FF4: 77 2E        	adc	[<L694+fs_1],Y
 16840 08:3FF6: 85 01        	sta	<R0
 16841 08:3FF8: A0 09 00     	ldy	#$9
 16842 08:3FFB: B7 2E        	lda	[<L694+fs_1],Y
 16843 08:3FFD: 25 01        	and	<R0
 16844 08:3FFF: D0 03        	bne	L715
 16845 08:4001: 82 06 00     	brl	L10385
 16846                        L715:
 16847                        L713:
 16848                        	.line	3930
 16849 08:4004: A9 0D 00     	lda	#$d
 16850 08:4007: 82 D7 FD     	brl	L697
 16851                        ;
 16852                        ;		fs->n_rootdir = ld_word(FADDR(BPB_RootEn
                    tCnt)); /* Number of root directory entries */
 16853                        L10385:
 16854                        	.line	3932
 16855 08:400A: 18           	clc
 16856 08:400B: A9 44 00     	lda	#$44
 16857 08:400E: 65 2E        	adc	<L694+fs_1
 16858 08:4010: 85 01        	sta	<R0
 16859 08:4012: A9 00 00     	lda	#$0
 16860 08:4015: 65 30        	adc	<L694+fs_1+2
 16861 08:4017: 85 03        	sta	<R0+2
 16862 08:4019: D4 03        	pei	<R0+2
 16863 08:401B: D4 01        	pei	<R0
 16864 08:401D: 22 00 00 08  	jsl	~~ld_word
  Sat Jul 10 2021  1:15                                                Page 322


 16865 08:4021: A0 07 00     	ldy	#$7
 16866 08:4024: 97 2E        	sta	[<L694+fs_1],Y
 16867                        ;		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 16868                        	.line	3933
 16869                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t be sector aligned) */
 16870 08:4026: A0 07 00     	ldy	#$7
 16871 08:4029: B7 2E        	lda	[<L694+fs_1],Y
 16872 08:402B: 29 0F 00     	and	#<$f
 16873 08:402E: D0 03        	bne	L716
 16874 08:4030: 82 06 00     	brl	L10386
 16875                        L716:
 16876                        	.line	3934
 16877 08:4033: A9 0D 00     	lda	#$d
 16878 08:4036: 82 A8 FD     	brl	L697
 16879                        ;
 16880                        ;		tsect = ld_word(FADDR(BPB_TotSec16)); /*
                     Number of sectors on the volume */
 16881                        L10386:
 16882                        	.line	3936
 16883 08:4039: 18           	clc
 16884 08:403A: A9 46 00     	lda	#$46
 16885 08:403D: 65 2E        	adc	<L694+fs_1
 16886 08:403F: 85 01        	sta	<R0
 16887 08:4041: A9 00 00     	lda	#$0
 16888 08:4044: 65 30        	adc	<L694+fs_1+2
 16889 08:4046: 85 03        	sta	<R0+2
 16890 08:4048: D4 03        	pei	<R0+2
 16891 08:404A: D4 01        	pei	<R0
 16892 08:404C: 22 00 00 08  	jsl	~~ld_word
 16893 08:4050: 85 05        	sta	<R1
 16894 08:4052: A0 00 00     	ldy	#$0
 16895 08:4055: A5 05        	lda	<R1
 16896 08:4057: 10 01        	bpl	L717
 16897 08:4059: 88           	dey
 16898                        L717:
 16899 08:405A: 85 18        	sta	<L694+tsect_1
 16900 08:405C: 84 1A        	sty	<L694+tsect_1+2
 16901                        ;		if (tsect == 0)
 16902                        	.line	3937
 16903                        ;			tsect = ld_dword(fs->win + BPB_T
                    otSec32);
 16904 08:405E: A5 18        	lda	<L694+tsect_1
 16905 08:4060: 05 1A        	ora	<L694+tsect_1+2
 16906 08:4062: F0 03        	beq	L718
 16907 08:4064: 82 1B 00     	brl	L10387
 16908                        L718:
 16909                        	.line	3938
 16910 08:4067: 18           	clc
 16911 08:4068: A9 53 00     	lda	#$53
 16912 08:406B: 65 2E        	adc	<L694+fs_1
 16913 08:406D: 85 01        	sta	<R0
 16914 08:406F: A9 00 00     	lda	#$0
 16915 08:4072: 65 30        	adc	<L694+fs_1+2
 16916 08:4074: 85 03        	sta	<R0+2
 16917 08:4076: D4 03        	pei	<R0+2
 16918 08:4078: D4 01        	pei	<R0
 16919 08:407A: 22 3B 00 08  	jsl	~~ld_dword
  Sat Jul 10 2021  1:15                                                Page 323


 16920 08:407E: 85 18        	sta	<L694+tsect_1
 16921 08:4080: 86 1A        	stx	<L694+tsect_1+2
 16922                        ;
 16923                        ;		nrsv = ld_word(FADDR(BPB_RsvdSecCnt)); /
                    * Number of reserved sectors */
 16924                        L10387:
 16925                        	.line	3940
 16926 08:4082: 18           	clc
 16927 08:4083: A9 41 00     	lda	#$41
 16928 08:4086: 65 2E        	adc	<L694+fs_1
 16929 08:4088: 85 01        	sta	<R0
 16930 08:408A: A9 00 00     	lda	#$0
 16931 08:408D: 65 30        	adc	<L694+fs_1+2
 16932 08:408F: 85 03        	sta	<R0+2
 16933 08:4091: D4 03        	pei	<R0+2
 16934 08:4093: D4 01        	pei	<R0
 16935 08:4095: 22 00 00 08  	jsl	~~ld_word
 16936 08:4099: 85 2C        	sta	<L694+nrsv_1
 16937                        ;		if (nrsv == 0)
 16938                        	.line	3941
 16939                        ;			return FR_NO_FILESYSTEM; /* (Mus
                    t not be 0) */
 16940 08:409B: A5 2C        	lda	<L694+nrsv_1
 16941 08:409D: F0 03        	beq	L719
 16942 08:409F: 82 06 00     	brl	L10388
 16943                        L719:
 16944                        	.line	3942
 16945 08:40A2: A9 0D 00     	lda	#$d
 16946 08:40A5: 82 39 FD     	brl	L697
 16947                        ;
 16948                        ;		/* Determine the FAT sub type */
 16949                        ;		sysect = nrsv + fasize + fs->n_rootdir /
                     (SS(fs) / SZDIRE); /* RSV + FAT + DIR */
 16950                        L10388:
 16951                        	.line	3945
 16952 08:40A8: A0 07 00     	ldy	#$7
 16953 08:40AB: B7 2E        	lda	[<L694+fs_1],Y
 16954 08:40AD: 4A           	lsr	A
 16955 08:40AE: 4A           	lsr	A
 16956 08:40AF: 4A           	lsr	A
 16957 08:40B0: 4A           	lsr	A
 16958 08:40B1: 85 01        	sta	<R0
 16959 08:40B3: A5 01        	lda	<R0
 16960 08:40B5: 85 01        	sta	<R0
 16961 08:40B7: 64 03        	stz	<R0+2
 16962 08:40B9: A0 00 00     	ldy	#$0
 16963 08:40BC: A5 2C        	lda	<L694+nrsv_1
 16964 08:40BE: 10 01        	bpl	L720
 16965 08:40C0: 88           	dey
 16966                        L720:
 16967 08:40C1: 85 05        	sta	<R1
 16968 08:40C3: 84 07        	sty	<R1+2
 16969 08:40C5: 18           	clc
 16970 08:40C6: A5 05        	lda	<R1
 16971 08:40C8: 65 01        	adc	<R0
 16972 08:40CA: 85 09        	sta	<R2
 16973 08:40CC: A5 07        	lda	<R1+2
 16974 08:40CE: 65 03        	adc	<R0+2
  Sat Jul 10 2021  1:15                                                Page 324


 16975 08:40D0: 85 0B        	sta	<R2+2
 16976 08:40D2: 18           	clc
 16977 08:40D3: A5 09        	lda	<R2
 16978 08:40D5: 65 20        	adc	<L694+fasize_1
 16979 08:40D7: 85 1C        	sta	<L694+sysect_1
 16980 08:40D9: A5 0B        	lda	<R2+2
 16981 08:40DB: 65 22        	adc	<L694+fasize_1+2
 16982 08:40DD: 85 1E        	sta	<L694+sysect_1+2
 16983                        ;		if (tsect < sysect)
 16984                        	.line	3946
 16985                        ;			return FR_NO_FILESYSTEM; /* (Inv
                    alid volume size) */
 16986 08:40DF: A5 18        	lda	<L694+tsect_1
 16987 08:40E1: C5 1C        	cmp	<L694+sysect_1
 16988 08:40E3: A5 1A        	lda	<L694+tsect_1+2
 16989 08:40E5: E5 1E        	sbc	<L694+sysect_1+2
 16990 08:40E7: 90 03        	bcc	L721
 16991 08:40E9: 82 06 00     	brl	L10389
 16992                        L721:
 16993                        	.line	3947
 16994 08:40EC: A9 0D 00     	lda	#$d
 16995 08:40EF: 82 EF FC     	brl	L697
 16996                        ;		nclst = (tsect - sysect) / fs->csize; /*
                     Number of clusters */
 16997                        L10389:
 16998                        	.line	3948
 16999 08:40F2: A0 00 00     	ldy	#$0
 17000 08:40F5: 5A           	phy
 17001 08:40F6: A0 09 00     	ldy	#$9
 17002 08:40F9: B7 2E        	lda	[<L694+fs_1],Y
 17003 08:40FB: 7A           	ply
 17004 08:40FC: 2A           	rol	A
 17005 08:40FD: 6A           	ror	A
 17006 08:40FE: 10 01        	bpl	L722
 17007 08:4100: 88           	dey
 17008                        L722:
 17009 08:4101: 85 01        	sta	<R0
 17010 08:4103: 84 03        	sty	<R0+2
 17011 08:4105: 38           	sec
 17012 08:4106: A5 18        	lda	<L694+tsect_1
 17013 08:4108: E5 1C        	sbc	<L694+sysect_1
 17014 08:410A: 85 05        	sta	<R1
 17015 08:410C: A5 1A        	lda	<L694+tsect_1+2
 17016 08:410E: E5 1E        	sbc	<L694+sysect_1+2
 17017 08:4110: 85 07        	sta	<R1+2
 17018 08:4112: D4 03        	pei	<R0+2
 17019 08:4114: D4 01        	pei	<R0
 17020 08:4116: D4 07        	pei	<R1+2
 17021 08:4118: D4 05        	pei	<R1
 17022                        	xref	~~~ludv
 17023 08:411A: 22 xx xx xx  	jsl	~~~ludv
 17024 08:411E: 85 24        	sta	<L694+nclst_1
 17025 08:4120: 86 26        	stx	<L694+nclst_1+2
 17026                        ;		if (nclst == 0)
 17027                        	.line	3949
 17028                        ;			return FR_NO_FILESYSTEM; /* (Inv
                    alid volume size) */
 17029 08:4122: A5 24        	lda	<L694+nclst_1
  Sat Jul 10 2021  1:15                                                Page 325


 17030 08:4124: 05 26        	ora	<L694+nclst_1+2
 17031 08:4126: F0 03        	beq	L723
 17032 08:4128: 82 06 00     	brl	L10390
 17033                        L723:
 17034                        	.line	3950
 17035 08:412B: A9 0D 00     	lda	#$d
 17036 08:412E: 82 B0 FC     	brl	L697
 17037                        ;		fmt = 0;
 17038                        L10390:
 17039                        	.line	3951
 17040 08:4131: 64 32        	stz	<L694+fmt_1
 17041                        ;		if (nclst <= MAX_FAT32)
 17042                        	.line	3952
 17043                        ;			fmt = FS_FAT32;
 17044 08:4133: A9 F5 FF     	lda	#$fff5
 17045 08:4136: C5 24        	cmp	<L694+nclst_1
 17046 08:4138: A9 FF 0F     	lda	#$fff
 17047 08:413B: E5 26        	sbc	<L694+nclst_1+2
 17048 08:413D: B0 03        	bcs	L724
 17049 08:413F: 82 05 00     	brl	L10391
 17050                        L724:
 17051                        	.line	3953
 17052 08:4142: A9 03 00     	lda	#$3
 17053 08:4145: 85 32        	sta	<L694+fmt_1
 17054                        ;		if (nclst <= MAX_FAT16)
 17055                        L10391:
 17056                        	.line	3954
 17057                        ;			fmt = FS_FAT16;
 17058 08:4147: A9 F5 FF     	lda	#$fff5
 17059 08:414A: C5 24        	cmp	<L694+nclst_1
 17060 08:414C: A9 00 00     	lda	#$0
 17061 08:414F: E5 26        	sbc	<L694+nclst_1+2
 17062 08:4151: B0 03        	bcs	L725
 17063 08:4153: 82 05 00     	brl	L10392
 17064                        L725:
 17065                        	.line	3955
 17066 08:4156: A9 02 00     	lda	#$2
 17067 08:4159: 85 32        	sta	<L694+fmt_1
 17068                        ;		if (nclst <= MAX_FAT12)
 17069                        L10392:
 17070                        	.line	3956
 17071                        ;			fmt = FS_FAT12;
 17072 08:415B: A9 F5 0F     	lda	#$ff5
 17073 08:415E: C5 24        	cmp	<L694+nclst_1
 17074 08:4160: A9 00 00     	lda	#$0
 17075 08:4163: E5 26        	sbc	<L694+nclst_1+2
 17076 08:4165: B0 03        	bcs	L726
 17077 08:4167: 82 05 00     	brl	L10393
 17078                        L726:
 17079                        	.line	3957
 17080 08:416A: A9 01 00     	lda	#$1
 17081 08:416D: 85 32        	sta	<L694+fmt_1
 17082                        ;		if (fmt == 0)
 17083                        L10393:
 17084                        	.line	3958
 17085                        ;			return FR_NO_FILESYSTEM;
 17086 08:416F: A5 32        	lda	<L694+fmt_1
 17087 08:4171: F0 03        	beq	L727
  Sat Jul 10 2021  1:15                                                Page 326


 17088 08:4173: 82 06 00     	brl	L10394
 17089                        L727:
 17090                        	.line	3959
 17091 08:4176: A9 0D 00     	lda	#$d
 17092 08:4179: 82 65 FC     	brl	L697
 17093                        ;
 17094                        ;		/* Boundaries and Limits */
 17095                        ;		fs->n_fatent = nclst + 2; /* Number of F
                    AT entries */
 17096                        L10394:
 17097                        	.line	3962
 17098 08:417C: 18           	clc
 17099 08:417D: A9 02 00     	lda	#$2
 17100 08:4180: 65 24        	adc	<L694+nclst_1
 17101 08:4182: 85 01        	sta	<R0
 17102 08:4184: A9 00 00     	lda	#$0
 17103 08:4187: 65 26        	adc	<L694+nclst_1+2
 17104 08:4189: 85 03        	sta	<R0+2
 17105 08:418B: A5 01        	lda	<R0
 17106 08:418D: A0 17 00     	ldy	#$17
 17107 08:4190: 97 2E        	sta	[<L694+fs_1],Y
 17108 08:4192: A5 03        	lda	<R0+2
 17109 08:4194: A0 19 00     	ldy	#$19
 17110 08:4197: 97 2E        	sta	[<L694+fs_1],Y
 17111                        ;		fs->volbase = bsect; /* Volume start sec
                    tor */
 17112                        	.line	3963
 17113 08:4199: A5 14        	lda	<L694+bsect_1
 17114 08:419B: A0 1F 00     	ldy	#$1f
 17115 08:419E: 97 2E        	sta	[<L694+fs_1],Y
 17116 08:41A0: A5 16        	lda	<L694+bsect_1+2
 17117 08:41A2: A0 21 00     	ldy	#$21
 17118 08:41A5: 97 2E        	sta	[<L694+fs_1],Y
 17119                        ;		fs->fatbase = bsect + nrsv; /* FAT start
                     sector */
 17120                        	.line	3964
 17121 08:41A7: A0 00 00     	ldy	#$0
 17122 08:41AA: A5 2C        	lda	<L694+nrsv_1
 17123 08:41AC: 10 01        	bpl	L728
 17124 08:41AE: 88           	dey
 17125                        L728:
 17126 08:41AF: 85 01        	sta	<R0
 17127 08:41B1: 84 03        	sty	<R0+2
 17128 08:41B3: 18           	clc
 17129 08:41B4: A5 01        	lda	<R0
 17130 08:41B6: 65 14        	adc	<L694+bsect_1
 17131 08:41B8: 85 05        	sta	<R1
 17132 08:41BA: A5 03        	lda	<R0+2
 17133 08:41BC: 65 16        	adc	<L694+bsect_1+2
 17134 08:41BE: 85 07        	sta	<R1+2
 17135 08:41C0: A5 05        	lda	<R1
 17136 08:41C2: A0 23 00     	ldy	#$23
 17137 08:41C5: 97 2E        	sta	[<L694+fs_1],Y
 17138 08:41C7: A5 07        	lda	<R1+2
 17139 08:41C9: A0 25 00     	ldy	#$25
 17140 08:41CC: 97 2E        	sta	[<L694+fs_1],Y
 17141                        ;		fs->database = bsect + sysect; /* Data s
                    tart sector */
  Sat Jul 10 2021  1:15                                                Page 327


 17142                        	.line	3965
 17143 08:41CE: 18           	clc
 17144 08:41CF: A5 14        	lda	<L694+bsect_1
 17145 08:41D1: 65 1C        	adc	<L694+sysect_1
 17146 08:41D3: 85 01        	sta	<R0
 17147 08:41D5: A5 16        	lda	<L694+bsect_1+2
 17148 08:41D7: 65 1E        	adc	<L694+sysect_1+2
 17149 08:41D9: 85 03        	sta	<R0+2
 17150 08:41DB: A5 01        	lda	<R0
 17151 08:41DD: A0 2B 00     	ldy	#$2b
 17152 08:41E0: 97 2E        	sta	[<L694+fs_1],Y
 17153 08:41E2: A5 03        	lda	<R0+2
 17154 08:41E4: A0 2D 00     	ldy	#$2d
 17155 08:41E7: 97 2E        	sta	[<L694+fs_1],Y
 17156                        ;		if (fmt == FS_FAT32)
 17157                        	.line	3966
 17158                        ;		{
 17159 08:41E9: A5 32        	lda	<L694+fmt_1
 17160 08:41EB: C9 03 00     	cmp	#<$3
 17161 08:41EE: F0 03        	beq	L729
 17162 08:41F0: 82 76 00     	brl	L10395
 17163                        L729:
 17164                        	.line	3967
 17165                        ;			if (ld_word(FADDR(BPB_FSVer32)) 
                    != 0)
 17166                        	.line	3968
 17167                        ;				return FR_NO_FILESYSTEM;
                     /* (Must be FAT32 revision 0.0) */
 17168 08:41F3: 18           	clc
 17169 08:41F4: A9 5D 00     	lda	#$5d
 17170 08:41F7: 65 2E        	adc	<L694+fs_1
 17171 08:41F9: 85 01        	sta	<R0
 17172 08:41FB: A9 00 00     	lda	#$0
 17173 08:41FE: 65 30        	adc	<L694+fs_1+2
 17174 08:4200: 85 03        	sta	<R0+2
 17175 08:4202: D4 03        	pei	<R0+2
 17176 08:4204: D4 01        	pei	<R0
 17177 08:4206: 22 00 00 08  	jsl	~~ld_word
 17178 08:420A: AA           	tax
 17179 08:420B: D0 03        	bne	L730
 17180 08:420D: 82 06 00     	brl	L10396
 17181                        L730:
 17182                        	.line	3969
 17183 08:4210: A9 0D 00     	lda	#$d
 17184 08:4213: 82 CB FB     	brl	L697
 17185                        ;			if (fs->n_rootdir != 0)
 17186                        L10396:
 17187                        	.line	3970
 17188                        ;				return FR_NO_FILESYSTEM;
                     /* (BPB_RootEntCnt must be 0) */
 17189 08:4216: A0 07 00     	ldy	#$7
 17190 08:4219: B7 2E        	lda	[<L694+fs_1],Y
 17191 08:421B: D0 03        	bne	L731
 17192 08:421D: 82 06 00     	brl	L10397
 17193                        L731:
 17194                        	.line	3971
 17195 08:4220: A9 0D 00     	lda	#$d
 17196 08:4223: 82 BB FB     	brl	L697
  Sat Jul 10 2021  1:15                                                Page 328


 17197                        ;			fs->dirbase = ld_dword(fs->win +
                     BPB_RootClus32); /* Root directory start cluster */
 17198                        L10397:
 17199                        	.line	3972
 17200 08:4226: 18           	clc
 17201 08:4227: A9 5F 00     	lda	#$5f
 17202 08:422A: 65 2E        	adc	<L694+fs_1
 17203 08:422C: 85 01        	sta	<R0
 17204 08:422E: A9 00 00     	lda	#$0
 17205 08:4231: 65 30        	adc	<L694+fs_1+2
 17206 08:4233: 85 03        	sta	<R0+2
 17207 08:4235: D4 03        	pei	<R0+2
 17208 08:4237: D4 01        	pei	<R0
 17209 08:4239: 22 3B 00 08  	jsl	~~ld_dword
 17210 08:423D: 85 05        	sta	<R1
 17211 08:423F: 86 07        	stx	<R1+2
 17212 08:4241: A5 05        	lda	<R1
 17213 08:4243: A0 27 00     	ldy	#$27
 17214 08:4246: 97 2E        	sta	[<L694+fs_1],Y
 17215 08:4248: A5 07        	lda	<R1+2
 17216 08:424A: A0 29 00     	ldy	#$29
 17217 08:424D: 97 2E        	sta	[<L694+fs_1],Y
 17218                        ;			szbfat = fs->n_fatent * 4; /* (N
                    eeded FAT size) */
 17219                        	.line	3973
 17220 08:424F: A0 19 00     	ldy	#$19
 17221 08:4252: B7 2E        	lda	[<L694+fs_1],Y
 17222 08:4254: 48           	pha
 17223 08:4255: A0 17 00     	ldy	#$17
 17224 08:4258: B7 2E        	lda	[<L694+fs_1],Y
 17225 08:425A: 48           	pha
 17226 08:425B: A9 02 00     	lda	#$2
 17227                        	xref	~~~lasl
 17228 08:425E: 22 xx xx xx  	jsl	~~~lasl
 17229 08:4262: 85 28        	sta	<L694+szbfat_1
 17230 08:4264: 86 2A        	stx	<L694+szbfat_1+2
 17231                        ;		}
 17232                        	.line	3974
 17233                        ;		else
 17234 08:4266: 82 AA 00     	brl	L10398
 17235                        L10395:
 17236                        ;		{
 17237                        	.line	3976
 17238                        ;			if (fs->n_rootdir == 0)
 17239                        	.line	3977
 17240                        ;				return FR_NO_FILESYSTEM;
                     /* (BPB_RootEntCnt must not be 0) */
 17241 08:4269: A0 07 00     	ldy	#$7
 17242 08:426C: B7 2E        	lda	[<L694+fs_1],Y
 17243 08:426E: F0 03        	beq	L732
 17244 08:4270: 82 06 00     	brl	L10399
 17245                        L732:
 17246                        	.line	3978
 17247 08:4273: A9 0D 00     	lda	#$d
 17248 08:4276: 82 68 FB     	brl	L697
 17249                        ;			fs->dirbase = fs->fatbase + fasi
                    ze; /* Root directory start sector */
 17250                        L10399:
  Sat Jul 10 2021  1:15                                                Page 329


 17251                        	.line	3979
 17252 08:4279: 18           	clc
 17253 08:427A: A0 23 00     	ldy	#$23
 17254 08:427D: B7 2E        	lda	[<L694+fs_1],Y
 17255 08:427F: 65 20        	adc	<L694+fasize_1
 17256 08:4281: 85 01        	sta	<R0
 17257 08:4283: A0 25 00     	ldy	#$25
 17258 08:4286: B7 2E        	lda	[<L694+fs_1],Y
 17259 08:4288: 65 22        	adc	<L694+fasize_1+2
 17260 08:428A: 85 03        	sta	<R0+2
 17261 08:428C: A5 01        	lda	<R0
 17262 08:428E: A0 27 00     	ldy	#$27
 17263 08:4291: 97 2E        	sta	[<L694+fs_1],Y
 17264 08:4293: A5 03        	lda	<R0+2
 17265 08:4295: A0 29 00     	ldy	#$29
 17266 08:4298: 97 2E        	sta	[<L694+fs_1],Y
 17267                        ;			szbfat = (fmt == FS_FAT16) ? /* 
                    (Needed FAT size) */
 17268                        	.line	3980
 17269                        ;			fs->n_fatent * 2 : fs->n_fatent 
                    * 3 / 2 + (fs->n_fatent & 1);
 17270 08:429A: A5 32        	lda	<L694+fmt_1
 17271 08:429C: C9 02 00     	cmp	#<$2
 17272 08:429F: F0 03        	beq	L734
 17273 08:42A1: 82 1D 00     	brl	L733
 17274                        L734:
 17275 08:42A4: A0 19 00     	ldy	#$19
 17276 08:42A7: B7 2E        	lda	[<L694+fs_1],Y
 17277 08:42A9: 48           	pha
 17278 08:42AA: A0 17 00     	ldy	#$17
 17279 08:42AD: B7 2E        	lda	[<L694+fs_1],Y
 17280 08:42AF: 48           	pha
 17281 08:42B0: A9 01 00     	lda	#$1
 17282                        	xref	~~~lasl
 17283 08:42B3: 22 xx xx xx  	jsl	~~~lasl
 17284 08:42B7: 85 01        	sta	<R0
 17285 08:42B9: 86 03        	stx	<R0+2
 17286 08:42BB: A6 03        	ldx	<R0+2
 17287 08:42BD: A5 01        	lda	<R0
 17288 08:42BF: 80 46        	bra	L735
 17289                        L733:
 17290 08:42C1: A0 17 00     	ldy	#$17
 17291 08:42C4: B7 2E        	lda	[<L694+fs_1],Y
 17292 08:42C6: 29 01 00     	and	#<$1
 17293 08:42C9: 85 01        	sta	<R0
 17294 08:42CB: 64 03        	stz	<R0+2
 17295 08:42CD: F4 00 00     	pea	#^$3
 17296 08:42D0: F4 03 00     	pea	#<$3
 17297 08:42D3: A0 19 00     	ldy	#$19
 17298 08:42D6: B7 2E        	lda	[<L694+fs_1],Y
 17299 08:42D8: 48           	pha
 17300 08:42D9: A0 17 00     	ldy	#$17
 17301 08:42DC: B7 2E        	lda	[<L694+fs_1],Y
 17302 08:42DE: 48           	pha
 17303                        	xref	~~~lmul
 17304 08:42DF: 22 xx xx xx  	jsl	~~~lmul
 17305 08:42E3: 85 09        	sta	<R2
 17306 08:42E5: 86 0B        	stx	<R2+2
  Sat Jul 10 2021  1:15                                                Page 330


 17307 08:42E7: D4 0B        	pei	<R2+2
 17308 08:42E9: D4 09        	pei	<R2
 17309 08:42EB: A9 01 00     	lda	#$1
 17310                        	xref	~~~llsr
 17311 08:42EE: 22 xx xx xx  	jsl	~~~llsr
 17312 08:42F2: 85 05        	sta	<R1
 17313 08:42F4: 86 07        	stx	<R1+2
 17314 08:42F6: 18           	clc
 17315 08:42F7: A5 05        	lda	<R1
 17316 08:42F9: 65 01        	adc	<R0
 17317 08:42FB: 85 0D        	sta	<R3
 17318 08:42FD: A5 07        	lda	<R1+2
 17319 08:42FF: 65 03        	adc	<R0+2
 17320 08:4301: 85 0F        	sta	<R3+2
 17321 08:4303: A6 0F        	ldx	<R3+2
 17322 08:4305: A5 0D        	lda	<R3
 17323                        L735:
 17324 08:4307: 85 01        	sta	<R0
 17325 08:4309: 86 03        	stx	<R0+2
 17326 08:430B: A5 01        	lda	<R0
 17327 08:430D: 85 28        	sta	<L694+szbfat_1
 17328 08:430F: A5 03        	lda	<R0+2
 17329 08:4311: 85 2A        	sta	<L694+szbfat_1+2
 17330                        ;		}
 17331                        	.line	3982
 17332                        L10398:
 17333                        ;		if (fs->fsize < (szbfat + (SS(fs) - 1)) 
                    / SS(fs))
 17334                        	.line	3983
 17335                        ;			return FR_NO_FILESYSTEM; /* (BPB
                    _FATSz must not be less than the size needed) */
 17336 08:4313: 18           	clc
 17337 08:4314: A9 FF 01     	lda	#$1ff
 17338 08:4317: 65 28        	adc	<L694+szbfat_1
 17339 08:4319: 85 05        	sta	<R1
 17340 08:431B: A9 00 00     	lda	#$0
 17341 08:431E: 65 2A        	adc	<L694+szbfat_1+2
 17342 08:4320: 85 07        	sta	<R1+2
 17343 08:4322: D4 07        	pei	<R1+2
 17344 08:4324: D4 05        	pei	<R1
 17345 08:4326: A9 09 00     	lda	#$9
 17346                        	xref	~~~llsr
 17347 08:4329: 22 xx xx xx  	jsl	~~~llsr
 17348 08:432D: 85 01        	sta	<R0
 17349 08:432F: 86 03        	stx	<R0+2
 17350 08:4331: A0 1B 00     	ldy	#$1b
 17351 08:4334: B7 2E        	lda	[<L694+fs_1],Y
 17352 08:4336: C5 01        	cmp	<R0
 17353 08:4338: A0 1D 00     	ldy	#$1d
 17354 08:433B: B7 2E        	lda	[<L694+fs_1],Y
 17355 08:433D: E5 03        	sbc	<R0+2
 17356 08:433F: 90 03        	bcc	L736
 17357 08:4341: 82 06 00     	brl	L10400
 17358                        L736:
 17359                        	.line	3984
 17360 08:4344: A9 0D 00     	lda	#$d
 17361 08:4347: 82 97 FA     	brl	L697
 17362                        ;
  Sat Jul 10 2021  1:15                                                Page 331


 17363                        ;#if !FF_FS_READONLY
 17364                        ;		/* Get FSInfo if available */
 17365                        ;		fs->last_clst = fs->free_clst = 0xFFFFFF
                    FF; /* Initialize cluster allocation information */
 17366                        L10400:
 17367                        	.line	3988
 17368 08:434A: A9 FF FF     	lda	#$ffff
 17369 08:434D: A0 13 00     	ldy	#$13
 17370 08:4350: 97 2E        	sta	[<L694+fs_1],Y
 17371 08:4352: A9 FF FF     	lda	#$ffff
 17372 08:4355: A0 15 00     	ldy	#$15
 17373 08:4358: 97 2E        	sta	[<L694+fs_1],Y
 17374 08:435A: A9 FF FF     	lda	#$ffff
 17375 08:435D: A0 0F 00     	ldy	#$f
 17376 08:4360: 97 2E        	sta	[<L694+fs_1],Y
 17377 08:4362: A9 FF FF     	lda	#$ffff
 17378 08:4365: A0 11 00     	ldy	#$11
 17379 08:4368: 97 2E        	sta	[<L694+fs_1],Y
 17380                        ;		fs->fsi_flag = 0x80;
 17381                        	.line	3989
 17382 08:436A: E2 20        	sep	#$20
 17383                        	longa	off
 17384 08:436C: A9 80        	lda	#$80
 17385 08:436E: A0 04 00     	ldy	#$4
 17386 08:4371: 97 2E        	sta	[<L694+fs_1],Y
 17387 08:4373: C2 20        	rep	#$20
 17388                        	longa	on
 17389                        ;#if (FF_FS_NOFSINFO & 3) != 3
 17390                        ;		if (fmt == FS_FAT32 /* Allow to update F
                    SInfo only if BPB_FSInfo32 == 1 */
 17391                        	.line	3991
 17392                        ;		&& ld_word(fs->win + BPB_FSInfo32) == 1
 17393                        ;				&& move_window(fs, bsect
                     + 1) == FR_OK)
 17394                        ;		{
 17395 08:4375: A5 32        	lda	<L694+fmt_1
 17396 08:4377: C9 03 00     	cmp	#<$3
 17397 08:437A: F0 03        	beq	L737
 17398 08:437C: 82 F3 00     	brl	L10401
 17399                        L737:
 17400 08:437F: 18           	clc
 17401 08:4380: A9 63 00     	lda	#$63
 17402 08:4383: 65 2E        	adc	<L694+fs_1
 17403 08:4385: 85 01        	sta	<R0
 17404 08:4387: A9 00 00     	lda	#$0
 17405 08:438A: 65 30        	adc	<L694+fs_1+2
 17406 08:438C: 85 03        	sta	<R0+2
 17407 08:438E: D4 03        	pei	<R0+2
 17408 08:4390: D4 01        	pei	<R0
 17409 08:4392: 22 00 00 08  	jsl	~~ld_word
 17410 08:4396: 85 05        	sta	<R1
 17411 08:4398: A5 05        	lda	<R1
 17412 08:439A: C9 01 00     	cmp	#<$1
 17413 08:439D: F0 03        	beq	L738
 17414 08:439F: 82 D0 00     	brl	L10401
 17415                        L738:
 17416 08:43A2: 18           	clc
 17417 08:43A3: A9 01 00     	lda	#$1
  Sat Jul 10 2021  1:15                                                Page 332


 17418 08:43A6: 65 14        	adc	<L694+bsect_1
 17419 08:43A8: 85 05        	sta	<R1
 17420 08:43AA: A9 00 00     	lda	#$0
 17421 08:43AD: 65 16        	adc	<L694+bsect_1+2
 17422 08:43AF: 85 07        	sta	<R1+2
 17423 08:43B1: D4 07        	pei	<R1+2
 17424 08:43B3: D4 05        	pei	<R1
 17425 08:43B5: D4 30        	pei	<L694+fs_1+2
 17426 08:43B7: D4 2E        	pei	<L694+fs_1
 17427 08:43B9: 22 C1 08 08  	jsl	~~move_window
 17428 08:43BD: AA           	tax
 17429 08:43BE: F0 03        	beq	L739
 17430 08:43C0: 82 AF 00     	brl	L10401
 17431                        L739:
 17432                        	.line	3994
 17433                        ;			fs->fsi_flag = 0;
 17434                        	.line	3995
 17435 08:43C3: E2 20        	sep	#$20
 17436                        	longa	off
 17437 08:43C5: A9 00        	lda	#$0
 17438 08:43C7: A0 04 00     	ldy	#$4
 17439 08:43CA: 97 2E        	sta	[<L694+fs_1],Y
 17440 08:43CC: C2 20        	rep	#$20
 17441                        	longa	on
 17442                        ;			if (ld_word(fs->win + BS_55AA) =
                    = 0xAA55 /* Load FSInfo data if available */
 17443                        	.line	3996
 17444                        ;			&& ld_dword(fs->win + FSI_LeadSi
                    g) == 0x41615252
 17445                        ;					&& ld_dword(fs->
                    win + FSI_StrucSig) == 0x61417272)
 17446                        ;			{
 17447 08:43CE: 18           	clc
 17448 08:43CF: A9 31 02     	lda	#$231
 17449 08:43D2: 65 2E        	adc	<L694+fs_1
 17450 08:43D4: 85 01        	sta	<R0
 17451 08:43D6: A9 00 00     	lda	#$0
 17452 08:43D9: 65 30        	adc	<L694+fs_1+2
 17453 08:43DB: 85 03        	sta	<R0+2
 17454 08:43DD: D4 03        	pei	<R0+2
 17455 08:43DF: D4 01        	pei	<R0
 17456 08:43E1: 22 00 00 08  	jsl	~~ld_word
 17457 08:43E5: 85 05        	sta	<R1
 17458 08:43E7: A5 05        	lda	<R1
 17459 08:43E9: C9 55 AA     	cmp	#<$aa55
 17460 08:43EC: F0 03        	beq	L740
 17461 08:43EE: 82 81 00     	brl	L10402
 17462                        L740:
 17463 08:43F1: 18           	clc
 17464 08:43F2: A9 33 00     	lda	#$33
 17465 08:43F5: 65 2E        	adc	<L694+fs_1
 17466 08:43F7: 85 05        	sta	<R1
 17467 08:43F9: A9 00 00     	lda	#$0
 17468 08:43FC: 65 30        	adc	<L694+fs_1+2
 17469 08:43FE: 85 07        	sta	<R1+2
 17470 08:4400: D4 07        	pei	<R1+2
 17471 08:4402: D4 05        	pei	<R1
 17472 08:4404: 22 3B 00 08  	jsl	~~ld_dword
  Sat Jul 10 2021  1:15                                                Page 333


 17473 08:4408: 85 09        	sta	<R2
 17474 08:440A: 86 0B        	stx	<R2+2
 17475 08:440C: A5 09        	lda	<R2
 17476 08:440E: C9 52 52     	cmp	#<$41615252
 17477 08:4411: D0 05        	bne	L741
 17478 08:4413: A5 0B        	lda	<R2+2
 17479 08:4415: C9 61 41     	cmp	#^$41615252
 17480                        L741:
 17481 08:4418: F0 03        	beq	L742
 17482 08:441A: 82 55 00     	brl	L10402
 17483                        L742:
 17484 08:441D: 18           	clc
 17485 08:441E: A9 17 02     	lda	#$217
 17486 08:4421: 65 2E        	adc	<L694+fs_1
 17487 08:4423: 85 09        	sta	<R2
 17488 08:4425: A9 00 00     	lda	#$0
 17489 08:4428: 65 30        	adc	<L694+fs_1+2
 17490 08:442A: 85 0B        	sta	<R2+2
 17491 08:442C: D4 0B        	pei	<R2+2
 17492 08:442E: D4 09        	pei	<R2
 17493 08:4430: 22 3B 00 08  	jsl	~~ld_dword
 17494 08:4434: 85 0D        	sta	<R3
 17495 08:4436: 86 0F        	stx	<R3+2
 17496 08:4438: A5 0D        	lda	<R3
 17497 08:443A: C9 72 72     	cmp	#<$61417272
 17498 08:443D: D0 05        	bne	L743
 17499 08:443F: A5 0F        	lda	<R3+2
 17500 08:4441: C9 41 61     	cmp	#^$61417272
 17501                        L743:
 17502 08:4444: F0 03        	beq	L744
 17503 08:4446: 82 29 00     	brl	L10402
 17504                        L744:
 17505                        	.line	3999
 17506                        ;#if (FF_FS_NOFSINFO & 1) == 0
 17507                        ;				fs->free_clst = ld_dword
                    (fs->win + FSI_Free_Count);
 17508                        ;#endif
 17509                        ;#if (FF_FS_NOFSINFO & 2) == 0
 17510                        ;				fs->last_clst = ld_dword
                    (fs->win + FSI_Nxt_Free);
 17511                        	.line	4004
 17512 08:4449: 18           	clc
 17513 08:444A: A9 1F 02     	lda	#$21f
 17514 08:444D: 65 2E        	adc	<L694+fs_1
 17515 08:444F: 85 01        	sta	<R0
 17516 08:4451: A9 00 00     	lda	#$0
 17517 08:4454: 65 30        	adc	<L694+fs_1+2
 17518 08:4456: 85 03        	sta	<R0+2
 17519 08:4458: D4 03        	pei	<R0+2
 17520 08:445A: D4 01        	pei	<R0
 17521 08:445C: 22 3B 00 08  	jsl	~~ld_dword
 17522 08:4460: 85 05        	sta	<R1
 17523 08:4462: 86 07        	stx	<R1+2
 17524 08:4464: A5 05        	lda	<R1
 17525 08:4466: A0 0F 00     	ldy	#$f
 17526 08:4469: 97 2E        	sta	[<L694+fs_1],Y
 17527 08:446B: A5 07        	lda	<R1+2
 17528 08:446D: A0 11 00     	ldy	#$11
  Sat Jul 10 2021  1:15                                                Page 334


 17529 08:4470: 97 2E        	sta	[<L694+fs_1],Y
 17530                        ;#endif
 17531                        ;			}
 17532                        	.line	4006
 17533                        ;		}
 17534                        L10402:
 17535                        	.line	4007
 17536                        ;#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
 17537                        ;#endif	/* !FF_FS_READONLY */
 17538                        ;	}
 17539                        L10401:
 17540                        	.line	4010
 17541                        ;
 17542                        ;	fs->fs_type = (BYTE) fmt;/* FAT sub-type */
 17543                        	.line	4012
 17544 08:4472: E2 20        	sep	#$20
 17545                        	longa	off
 17546 08:4474: A5 32        	lda	<L694+fmt_1
 17547 08:4476: 87 2E        	sta	[<L694+fs_1]
 17548 08:4478: C2 20        	rep	#$20
 17549                        	longa	on
 17550                        ;	fs->id = ++Fsid; /* Volume mount ID */
 17551                        	.line	4013
 17552 08:447A: EE xx xx     	inc	|~~Fsid
 17553 08:447D: AD xx xx     	lda	|~~Fsid
 17554 08:4480: A0 05 00     	ldy	#$5
 17555 08:4483: 97 2E        	sta	[<L694+fs_1],Y
 17556                        ;#if FF_USE_LFN == 1
 17557                        ;	fs->lfnbuf = LfnBuf; /* Static LFN working buffe
                    r */
 17558                        ;#if FF_FS_EXFAT
 17559                        ;	fs->dirbuf = DirBuf; /* Static directory block s
                    cratchpad buuffer */
 17560                        ;#endif
 17561                        ;#endif
 17562                        ;#if FF_FS_RPATH != 0
 17563                        ;	fs->cdir = 0; /* Initialize current directory */
 17564                        ;#endif
 17565                        ;#if FF_FS_LOCK != 0			/* Clear
                     file lock semaphores */
 17566                        ;	clear_lock(fs);
 17567                        ;#endif
 17568                        ;	return FR_OK;
 17569                        	.line	4026
 17570 08:4485: A9 00 00     	lda	#$0
 17571 08:4488: 82 56 F9     	brl	L697
 17572                        ;}
 17573                        	.line	4027
 17574                        	.endblock	4027
 17575             00000033   L693	equ	51
 17576             00000011   L694	equ	17
 17577 08:448B:              	ends
 17578                        	efunc
 17579                        	.endfunc	4027,17,51
 17580                        	.line	4027
 17581                        ;
 17582                        ;/*-----------------------------------------------
                    ------------------------*/
  Sat Jul 10 2021  1:15                                                Page 335


 17583                        ;/* Check if the file/directory object is valid or
                     not                    */
 17584                        ;/*-----------------------------------------------
                    ------------------------*/
 17585                        ;
 17586                        ;static FRESULT validate( /* Returns FR_OK or FR_I
                    NVALID_OBJECT */
 17587                        ;FFOBJID* obj, /* Pointer to the FFOBJID, the 1st 
                    member in the FIL/DIR object, to check validity */
 17588                        ;FATFS** rfs /* Pointer to pointer to the owner fi
                    lesystem object to return */
 17589                        ;)
 17590                        ;{
 17591                        	.line	4033
 17592                        	.line	4037
 17593                        	FFDOS
 17594                        	func
 17595                        	.function	4037
 17596                        ~~validate:
 17597                        	longa	on
 17598                        	longi	on
 17599 08:448B: 3B           	tsc
 17600 08:448C: 38           	sec
 17601 08:448D: E9 06 00     	sbc	#L745
 17602 08:4490: 1B           	tcs
 17603 08:4491: 0B           	phd
 17604 08:4492: 5B           	tcd
 17605             00000004   obj_0	set	4
 17606             00000008   rfs_0	set	8
 17607                        	.block	4037
 17608                        ;	FRESULT res = FR_INVALID_OBJECT;
 17609                        ;
 17610                        ;	if (obj && obj->fs && obj->fs->fs_type && obj->i
                    d == obj->fs->id)
 17611             00000000   res_1	set	0
 17612                        	.sym	res,0,5,1,16
 17613                        	.sym	obj,4,138,6,32,73
 17614                        	.sym	rfs,8,1162,6,32,72
 17615 08:4493: A9 09 00     	lda	#$9
 17616 08:4496: 85 05        	sta	<L746+res_1
 17617                        	.line	4040
 17618                        ;	{ /* Test if the object is valid */
 17619 08:4498: A5 0A        	lda	<L745+obj_0
 17620 08:449A: 05 0C        	ora	<L745+obj_0+2
 17621 08:449C: D0 03        	bne	L748
 17622 08:449E: 82 5D 00     	brl	L10403
 17623                        L748:
 17624 08:44A1: A7 0A        	lda	[<L745+obj_0]
 17625 08:44A3: A0 02 00     	ldy	#$2
 17626 08:44A6: 17 0A        	ora	[<L745+obj_0],Y
 17627 08:44A8: D0 03        	bne	L749
 17628 08:44AA: 82 51 00     	brl	L10403
 17629                        L749:
 17630 08:44AD: A7 0A        	lda	[<L745+obj_0]
 17631 08:44AF: 85 01        	sta	<R0
 17632 08:44B1: A0 02 00     	ldy	#$2
 17633 08:44B4: B7 0A        	lda	[<L745+obj_0],Y
 17634 08:44B6: 85 03        	sta	<R0+2
  Sat Jul 10 2021  1:15                                                Page 336


 17635 08:44B8: A7 01        	lda	[<R0]
 17636 08:44BA: 29 FF 00     	and	#$ff
 17637 08:44BD: D0 03        	bne	L750
 17638 08:44BF: 82 3C 00     	brl	L10403
 17639                        L750:
 17640 08:44C2: A7 0A        	lda	[<L745+obj_0]
 17641 08:44C4: 85 01        	sta	<R0
 17642 08:44C6: A0 02 00     	ldy	#$2
 17643 08:44C9: B7 0A        	lda	[<L745+obj_0],Y
 17644 08:44CB: 85 03        	sta	<R0+2
 17645 08:44CD: A0 04 00     	ldy	#$4
 17646 08:44D0: B7 0A        	lda	[<L745+obj_0],Y
 17647 08:44D2: A0 05 00     	ldy	#$5
 17648 08:44D5: D7 01        	cmp	[<R0],Y
 17649 08:44D7: F0 03        	beq	L751
 17650 08:44D9: 82 22 00     	brl	L10403
 17651                        L751:
 17652                        	.line	4041
 17653                        ;#if FF_FS_REENTRANT
 17654                        ;		if (lock_fs(obj->fs))
 17655                        ;		{ /* Obtain the filesystem object */
 17656                        ;			if (!(disk_status(obj->fs->pdrv)
                     & STA_NOINIT))
 17657                        ;			{ /* Test if the phsical drive i
                    s kept initialized */
 17658                        ;				res = FR_OK;
 17659                        ;			}
 17660                        ;			else
 17661                        ;			{
 17662                        ;				unlock_fs(obj->fs, FR_OK
                    );
 17663                        ;			}
 17664                        ;		}
 17665                        ;		else
 17666                        ;		{
 17667                        ;			res = FR_TIMEOUT;
 17668                        ;		}
 17669                        ;#else
 17670                        ;		if (!(disk_status(obj->fs->pdrv) & STA_N
                    OINIT))
 17671                        	.line	4059
 17672                        ;		{ /* Test if the phsical drive is kept i
                    nitialized */
 17673 08:44DC: A7 0A        	lda	[<L745+obj_0]
 17674 08:44DE: 85 01        	sta	<R0
 17675 08:44E0: A0 02 00     	ldy	#$2
 17676 08:44E3: B7 0A        	lda	[<L745+obj_0],Y
 17677 08:44E5: 85 03        	sta	<R0+2
 17678 08:44E7: A0 01 00     	ldy	#$1
 17679 08:44EA: B7 01        	lda	[<R0],Y
 17680 08:44EC: 48           	pha
 17681 08:44ED: 22 xx xx xx  	jsl	~~disk_status
 17682 08:44F1: E2 20        	sep	#$20
 17683                        	longa	off
 17684 08:44F3: 29 01        	and	#<$1
 17685 08:44F5: C2 20        	rep	#$20
 17686                        	longa	on
 17687 08:44F7: F0 03        	beq	L752
  Sat Jul 10 2021  1:15                                                Page 337


 17688 08:44F9: 82 02 00     	brl	L10404
 17689                        L752:
 17690                        	.line	4060
 17691                        ;			res = FR_OK;
 17692                        	.line	4061
 17693 08:44FC: 64 05        	stz	<L746+res_1
 17694                        ;		}
 17695                        	.line	4062
 17696                        ;#endif
 17697                        ;	}
 17698                        L10404:
 17699                        	.line	4064
 17700                        ;	*rfs = (res == FR_OK) ? obj->fs : 0; /* Correspo
                    nding filesystem object */
 17701                        L10403:
 17702                        	.line	4065
 17703 08:44FE: A5 05        	lda	<L746+res_1
 17704 08:4500: F0 03        	beq	L754
 17705 08:4502: 82 0A 00     	brl	L753
 17706                        L754:
 17707 08:4505: A0 02 00     	ldy	#$2
 17708 08:4508: B7 0A        	lda	[<L745+obj_0],Y
 17709 08:450A: AA           	tax
 17710 08:450B: A7 0A        	lda	[<L745+obj_0]
 17711 08:450D: 80 07        	bra	L755
 17712                        L753:
 17713 08:450F: A9 00 00     	lda	#$0
 17714 08:4512: AA           	tax
 17715 08:4513: A9 00 00     	lda	#$0
 17716                        L755:
 17717 08:4516: 85 01        	sta	<R0
 17718 08:4518: 86 03        	stx	<R0+2
 17719 08:451A: A5 01        	lda	<R0
 17720 08:451C: 87 0E        	sta	[<L745+rfs_0]
 17721 08:451E: A5 03        	lda	<R0+2
 17722 08:4520: A0 02 00     	ldy	#$2
 17723 08:4523: 97 0E        	sta	[<L745+rfs_0],Y
 17724                        ;	return res;
 17725                        	.line	4066
 17726 08:4525: A5 05        	lda	<L746+res_1
 17727                        L756:
 17728 08:4527: A8           	tay
 17729 08:4528: A5 08        	lda	<L745+2
 17730 08:452A: 85 10        	sta	<L745+2+8
 17731 08:452C: A5 07        	lda	<L745+1
 17732 08:452E: 85 0F        	sta	<L745+1+8
 17733 08:4530: 2B           	pld
 17734 08:4531: 3B           	tsc
 17735 08:4532: 18           	clc
 17736 08:4533: 69 0E 00     	adc	#L745+8
 17737 08:4536: 1B           	tcs
 17738 08:4537: 98           	tya
 17739 08:4538: 6B           	rtl
 17740                        ;}
 17741                        	.line	4067
 17742                        	.endblock	4067
 17743             00000006   L745	equ	6
 17744             00000005   L746	equ	5
  Sat Jul 10 2021  1:15                                                Page 338


 17745 08:4539:              	ends
 17746                        	efunc
 17747                        	.endfunc	4067,5,6
 17748                        	.line	4067
 17749                        ;
 17750                        ;/*-----------------------------------------------
                    ----------------------------
 17751                        ;
 17752                        ; Public Functions (FatFs API)
 17753                        ;
 17754                        ; ------------------------------------------------
                    ----------------------------*/
 17755                        ;
 17756                        ;/*-----------------------------------------------
                    ------------------------*/
 17757                        ;/* Mount/Unmount a Logical Drive                 
                                            */
 17758                        ;/*-----------------------------------------------
                    ------------------------*/
 17759                        ;
 17760                        ;FRESULT f_mount(FATFS* fs, /* Pointer to the file
                    system object (NULL:unmount)*/
 17761                        ;const TCHAR* path, /* Logical drive number to be 
                    mounted/unmounted */
 17762                        ;BYTE opt /* Mode option 0:Do not mount (delayed m
                    ount), 1:Mount immediately */
 17763                        ;)
 17764                        ;{
 17765                        	.line	4079
 17766                        	.line	4083
 17767                        	FFDOS
 17768                        	xdef	~~f_mount
 17769                        	func
 17770                        	.function	4083
 17771                        ~~f_mount:
 17772                        	longa	on
 17773                        	longi	on
 17774 08:4539: 3B           	tsc
 17775 08:453A: 38           	sec
 17776 08:453B: E9 14 00     	sbc	#L757
 17777 08:453E: 1B           	tcs
 17778 08:453F: 0B           	phd
 17779 08:4540: 5B           	tcd
 17780             00000004   fs_0	set	4
 17781             00000008   path_0	set	8
 17782             0000000C   opt_0	set	12
 17783                        	.block	4083
 17784                        ;	FATFS *cfs;
 17785                        ;	int vol;
 17786                        ;	FRESULT res;
 17787                        ;	const TCHAR *rp = path;
 17788                        ;
 17789                        ;	//k_debug_string("f_mount...\r\n");
 17790                        ;
 17791                        ;	/* Get logical drive number */
 17792                        ;	vol = get_ldnumber(&rp);
 17793             00000000   cfs_1	set	0
 17794             00000004   vol_1	set	4
  Sat Jul 10 2021  1:15                                                Page 339


 17795             00000006   res_1	set	6
 17796             00000008   rp_1	set	8
 17797                        	.sym	cfs,0,138,1,32,72
 17798                        	.sym	vol,4,5,1,16
 17799                        	.sym	res,6,5,1,16
 17800                        	.sym	rp,8,142,1,32
 17801                        	.sym	fs,4,138,6,32,72
 17802                        	.sym	path,8,142,6,32
 17803                        	.sym	opt,12,14,6,8
 17804 08:4541: A5 1C        	lda	<L757+path_0
 17805 08:4543: 85 11        	sta	<L758+rp_1
 17806 08:4545: A5 1E        	lda	<L757+path_0+2
 17807 08:4547: 85 13        	sta	<L758+rp_1+2
 17808                        	.line	4092
 17809 08:4549: F4 00 00     	pea	#0
 17810 08:454C: 18           	clc
 17811 08:454D: 7B           	tdc
 17812 08:454E: 69 11 00     	adc	#<L758+rp_1
 17813 08:4551: 48           	pha
 17814 08:4552: 22 A0 38 08  	jsl	~~get_ldnumber
 17815 08:4556: 85 0D        	sta	<L758+vol_1
 17816                        ;	if (vol < 0)
 17817                        	.line	4093
 17818                        ;		return FR_INVALID_DRIVE;
 17819 08:4558: A5 0D        	lda	<L758+vol_1
 17820 08:455A: 30 03        	bmi	L760
 17821 08:455C: 82 15 00     	brl	L10405
 17822                        L760:
 17823                        	.line	4094
 17824 08:455F: A9 0B 00     	lda	#$b
 17825                        L761:
 17826 08:4562: A8           	tay
 17827 08:4563: A5 16        	lda	<L757+2
 17828 08:4565: 85 20        	sta	<L757+2+10
 17829 08:4567: A5 15        	lda	<L757+1
 17830 08:4569: 85 1F        	sta	<L757+1+10
 17831 08:456B: 2B           	pld
 17832 08:456C: 3B           	tsc
 17833 08:456D: 18           	clc
 17834 08:456E: 69 1E 00     	adc	#L757+10
 17835 08:4571: 1B           	tcs
 17836 08:4572: 98           	tya
 17837 08:4573: 6B           	rtl
 17838                        ;	cfs = FatFs[vol]; /* Pointer to fs object */
 17839                        L10405:
 17840                        	.line	4095
 17841 08:4574: A5 0D        	lda	<L758+vol_1
 17842 08:4576: 0A           	asl	A
 17843 08:4577: 0A           	asl	A
 17844 08:4578: 85 01        	sta	<R0
 17845 08:457A: 18           	clc
 17846 08:457B: A9 xx xx     	lda	#<~~FatFs
 17847 08:457E: 65 01        	adc	<R0
 17848 08:4580: 85 05        	sta	<R1
 17849 08:4582: B2 05        	lda	(<R1)
 17850 08:4584: 85 09        	sta	<L758+cfs_1
 17851 08:4586: A0 02 00     	ldy	#$2
 17852 08:4589: B1 05        	lda	(<R1),Y
  Sat Jul 10 2021  1:15                                                Page 340


 17853 08:458B: 85 0B        	sta	<L758+cfs_1+2
 17854                        ;
 17855                        ;	////k_debug_pointer("f_mount:cfs:",cfs);
 17856                        ;
 17857                        ;	if (cfs)
 17858                        	.line	4099
 17859                        ;	{
 17860 08:458D: A5 09        	lda	<L758+cfs_1
 17861 08:458F: 05 0B        	ora	<L758+cfs_1+2
 17862 08:4591: D0 03        	bne	L762
 17863 08:4593: 82 08 00     	brl	L10406
 17864                        L762:
 17865                        	.line	4100
 17866                        ;#if FF_FS_LOCK != 0
 17867                        ;		clear_lock(cfs);
 17868                        ;#endif
 17869                        ;#if FF_FS_REENTRANT				
                    		/* Discard sync object of the current volume */
 17870                        ;		if (!ff_del_syncobj(cfs->sobj)) return F
                    R_INT_ERR;
 17871                        ;#endif
 17872                        ;		cfs->fs_type = 0; /* Clear old fs object
                     */
 17873                        	.line	4107
 17874 08:4596: E2 20        	sep	#$20
 17875                        	longa	off
 17876 08:4598: A9 00        	lda	#$0
 17877 08:459A: 87 09        	sta	[<L758+cfs_1]
 17878 08:459C: C2 20        	rep	#$20
 17879                        	longa	on
 17880                        ;	}
 17881                        	.line	4108
 17882                        ;
 17883                        ;	if (fs)
 17884                        L10406:
 17885                        	.line	4110
 17886                        ;	{
 17887 08:459E: A5 18        	lda	<L757+fs_0
 17888 08:45A0: 05 1A        	ora	<L757+fs_0+2
 17889 08:45A2: D0 03        	bne	L763
 17890 08:45A4: 82 08 00     	brl	L10407
 17891                        L763:
 17892                        	.line	4111
 17893                        ;		fs->fs_type = 0; /* Clear new fs object 
                    */
 17894                        	.line	4112
 17895 08:45A7: E2 20        	sep	#$20
 17896                        	longa	off
 17897 08:45A9: A9 00        	lda	#$0
 17898 08:45AB: 87 18        	sta	[<L757+fs_0]
 17899 08:45AD: C2 20        	rep	#$20
 17900                        	longa	on
 17901                        ;#if FF_FS_REENTRANT				
                    		/* Create sync object for the new volume */
 17902                        ;		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj
                    )) return FR_INT_ERR;
 17903                        ;#endif
 17904                        ;	}
  Sat Jul 10 2021  1:15                                                Page 341


 17905                        	.line	4116
 17906                        ;	FatFs[vol] = fs; /* Register new fs object */
 17907                        L10407:
 17908                        	.line	4117
 17909 08:45AF: A5 0D        	lda	<L758+vol_1
 17910 08:45B1: 0A           	asl	A
 17911 08:45B2: 0A           	asl	A
 17912 08:45B3: 85 01        	sta	<R0
 17913 08:45B5: 18           	clc
 17914 08:45B6: A9 xx xx     	lda	#<~~FatFs
 17915 08:45B9: 65 01        	adc	<R0
 17916 08:45BB: 85 05        	sta	<R1
 17917 08:45BD: A5 18        	lda	<L757+fs_0
 17918 08:45BF: 92 05        	sta	(<R1)
 17919 08:45C1: A5 1A        	lda	<L757+fs_0+2
 17920 08:45C3: A0 02 00     	ldy	#$2
 17921 08:45C6: 91 05        	sta	(<R1),Y
 17922                        ;
 17923                        ;	if (opt == 0)
 17924                        	.line	4119
 17925                        ;		return FR_OK; /* Do not mount now, it wi
                    ll be mounted later */
 17926 08:45C8: A5 20        	lda	<L757+opt_0
 17927 08:45CA: 29 FF 00     	and	#$ff
 17928 08:45CD: F0 03        	beq	L764
 17929 08:45CF: 82 06 00     	brl	L10408
 17930                        L764:
 17931                        	.line	4120
 17932 08:45D2: A9 00 00     	lda	#$0
 17933 08:45D5: 82 8A FF     	brl	L761
 17934                        ;
 17935                        ;	res = mount_volume(&path, &fs, 0); /* Force moun
                    ted the volume */
 17936                        L10408:
 17937                        	.line	4122
 17938 08:45D8: F4 00 00     	pea	#<$0
 17939 08:45DB: F4 00 00     	pea	#0
 17940 08:45DE: 18           	clc
 17941 08:45DF: 7B           	tdc
 17942 08:45E0: 69 18 00     	adc	#<L757+fs_0
 17943 08:45E3: 48           	pha
 17944 08:45E4: F4 00 00     	pea	#0
 17945 08:45E7: 18           	clc
 17946 08:45E8: 7B           	tdc
 17947 08:45E9: 69 1C 00     	adc	#<L757+path_0
 17948 08:45EC: 48           	pha
 17949 08:45ED: 22 B8 3D 08  	jsl	~~mount_volume
 17950 08:45F1: 85 0F        	sta	<L758+res_1
 17951                        ;	LEAVE_FF(fs, res);
 17952                        	.line	4123
 17953 08:45F3: A5 0F        	lda	<L758+res_1
 17954 08:45F5: 82 6A FF     	brl	L761
 17955                        ;}
 17956                        	.line	4124
 17957                        	.endblock	4124
 17958             00000014   L757	equ	20
 17959             00000009   L758	equ	9
 17960 08:45F8:              	ends
  Sat Jul 10 2021  1:15                                                Page 342


 17961                        	efunc
 17962                        	.endfunc	4124,9,20
 17963                        	.line	4124
 17964                        ;
 17965                        ;/*-----------------------------------------------
                    ------------------------*/
 17966                        ;/* Open or Create a File                         
                                            */
 17967                        ;/*-----------------------------------------------
                    ------------------------*/
 17968                        ;
 17969                        ;FRESULT f_open(FIL* fp, /* Pointer to the blank f
                    ile object */
 17970                        ;const TCHAR* path, /* Pointer to the file name */
 17971                        ;BYTE mode /* Access mode and file open mode flags
                     */
 17972                        ;)
 17973                        ;{
 17974                        	.line	4130
 17975                        	.line	4134
 17976                        	FFDOS
 17977                        	xdef	~~f_open
 17978                        	func
 17979                        	.function	4134
 17980                        ~~f_open:
 17981                        	longa	on
 17982                        	longi	on
 17983 08:45F8: 3B           	tsc
 17984 08:45F9: 38           	sec
 17985 08:45FA: E9 5A 00     	sbc	#L765
 17986 08:45FD: 1B           	tcs
 17987 08:45FE: 0B           	phd
 17988 08:45FF: 5B           	tcd
 17989             00000004   fp_0	set	4
 17990             00000008   path_0	set	8
 17991             0000000C   mode_0	set	12
 17992                        	.block	4134
 17993                        ;	FRESULT res;
 17994                        ;	DIR dj;
 17995                        ;	FATFS *fs;
 17996                        ;#if !FF_FS_READONLY
 17997                        ;	DWORD cl, bcs, clst;
 17998                        ;	LBA_t sc;
 17999                        ;	FSIZE_t ofs;
 18000                        ;#endif
 18001                        ;	DEF_NAMBUF
 18002                        ;
 18003                        ;	//k_debug_string("f_open...\r\n");
 18004                        ;
 18005                        ;	if (!fp)
 18006             00000000   res_1	set	0
 18007             00000002   dj_1	set	2
 18008             00000036   fs_1	set	54
 18009             0000003A   cl_1	set	58
 18010             0000003E   bcs_1	set	62
 18011             00000042   clst_1	set	66
 18012             00000046   sc_1	set	70
 18013             0000004A   ofs_1	set	74
  Sat Jul 10 2021  1:15                                                Page 343


 18014             0000004E   lfn_1	set	78
 18015                        	.sym	res,0,5,1,16
 18016                        	.sym	dj,2,10,1,416,75
 18017                        	.sym	fs,54,138,1,32,72
 18018                        	.sym	cl,58,18,1,32
 18019                        	.sym	bcs,62,18,1,32
 18020                        	.sym	clst,66,18,1,32
 18021                        	.sym	sc,70,18,1,32
 18022                        	.sym	ofs,74,18,1,32
 18023                        	.sym	lfn,78,144,1,32
 18024                        	.sym	fp,4,138,6,32,74
 18025                        	.sym	path,8,142,6,32
 18026                        	.sym	mode,12,14,6,8
 18027                        	.line	4147
 18028                        ;		return FR_INVALID_OBJECT;
 18029 08:4600: A5 5E        	lda	<L765+fp_0
 18030 08:4602: 05 60        	ora	<L765+fp_0+2
 18031 08:4604: F0 03        	beq	L768
 18032 08:4606: 82 15 00     	brl	L10409
 18033                        L768:
 18034                        	.line	4148
 18035 08:4609: A9 09 00     	lda	#$9
 18036                        L769:
 18037 08:460C: A8           	tay
 18038 08:460D: A5 5C        	lda	<L765+2
 18039 08:460F: 85 66        	sta	<L765+2+10
 18040 08:4611: A5 5B        	lda	<L765+1
 18041 08:4613: 85 65        	sta	<L765+1+10
 18042 08:4615: 2B           	pld
 18043 08:4616: 3B           	tsc
 18044 08:4617: 18           	clc
 18045 08:4618: 69 64 00     	adc	#L765+10
 18046 08:461B: 1B           	tcs
 18047 08:461C: 98           	tya
 18048 08:461D: 6B           	rtl
 18049                        ;
 18050                        ;	/* Get logical drive number */
 18051                        ;	mode &= FF_FS_READONLY ?
 18052                        L10409:
 18053                        	.line	4151
 18054                        ;			FA_READ :
 18055                        ;			FA_READ | FA_WRITE | FA_CREATE_A
                    LWAYS | FA_CREATE_NEW
 18056                        ;					| FA_OPEN_ALWAYS
                     | FA_OPEN_APPEND;
 18057 08:461E: E2 20        	sep	#$20
 18058                        	longa	off
 18059 08:4620: A9 C0        	lda	#$c0
 18060 08:4622: 14 66        	trb	<L765+mode_0
 18061 08:4624: C2 20        	rep	#$20
 18062                        	longa	on
 18063                        ;	res = mount_volume(&path, &fs, mode);
 18064                        	.line	4155
 18065 08:4626: D4 66        	pei	<L765+mode_0
 18066 08:4628: F4 00 00     	pea	#0
 18067 08:462B: 18           	clc
 18068 08:462C: 7B           	tdc
 18069 08:462D: 69 3F 00     	adc	#<L766+fs_1
  Sat Jul 10 2021  1:15                                                Page 344


 18070 08:4630: 48           	pha
 18071 08:4631: F4 00 00     	pea	#0
 18072 08:4634: 18           	clc
 18073 08:4635: 7B           	tdc
 18074 08:4636: 69 62 00     	adc	#<L765+path_0
 18075 08:4639: 48           	pha
 18076 08:463A: 22 B8 3D 08  	jsl	~~mount_volume
 18077 08:463E: 85 09        	sta	<L766+res_1
 18078                        ;
 18079                        ;	////k_debug_long("f_open:mount_volume:",res);
 18080                        ;
 18081                        ;	if (res == FR_OK)
 18082                        	.line	4159
 18083                        ;	{
 18084 08:4640: A5 09        	lda	<L766+res_1
 18085 08:4642: F0 03        	beq	L770
 18086 08:4644: 82 50 04     	brl	L10410
 18087                        L770:
 18088                        	.line	4160
 18089                        ;		dj.obj.fs = fs;
 18090                        	.line	4161
 18091 08:4647: A5 3F        	lda	<L766+fs_1
 18092 08:4649: 85 0B        	sta	<L766+dj_1
 18093 08:464B: A5 41        	lda	<L766+fs_1+2
 18094 08:464D: 85 0D        	sta	<L766+dj_1+2
 18095                        ;		INIT_NAMBUF(fs);
 18096                        	.line	4162
 18097                        	.line	4162
 18098 08:464F: F4 00 02     	pea	#<$200
 18099 08:4652: 22 AB 92 08  	jsl	~~ff_memalloc
 18100 08:4656: 85 57        	sta	<L766+lfn_1
 18101 08:4658: 86 59        	stx	<L766+lfn_1+2
 18102                        	.line	4162
 18103 08:465A: A5 57        	lda	<L766+lfn_1
 18104 08:465C: 05 59        	ora	<L766+lfn_1+2
 18105 08:465E: F0 03        	beq	L771
 18106 08:4660: 82 06 00     	brl	L10411
 18107                        L771:
 18108                        	.line	4162
 18109 08:4663: A9 11 00     	lda	#$11
 18110 08:4666: 82 A3 FF     	brl	L769
 18111                        L10411:
 18112                        	.line	4162
 18113 08:4669: A5 57        	lda	<L766+lfn_1
 18114 08:466B: A0 0B 00     	ldy	#$b
 18115 08:466E: 97 3F        	sta	[<L766+fs_1],Y
 18116 08:4670: A5 59        	lda	<L766+lfn_1+2
 18117 08:4672: A0 0D 00     	ldy	#$d
 18118 08:4675: 97 3F        	sta	[<L766+fs_1],Y
 18119                        	.line	4162
 18120                        	.line	4162
 18121                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 18122                        	.line	4163
 18123 08:4677: D4 64        	pei	<L765+path_0+2
 18124 08:4679: D4 62        	pei	<L765+path_0
 18125 08:467B: F4 00 00     	pea	#0
 18126 08:467E: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 345


 18127 08:467F: 7B           	tdc
 18128 08:4680: 69 0B 00     	adc	#<L766+dj_1
 18129 08:4683: 48           	pha
 18130 08:4684: 22 2B 37 08  	jsl	~~follow_path
 18131 08:4688: 85 09        	sta	<L766+res_1
 18132                        ;#if !FF_FS_READONLY	/* Read/Write configurat
                    ion */
 18133                        ;		if (res == FR_OK)
 18134                        	.line	4165
 18135                        ;		{
 18136 08:468A: A5 09        	lda	<L766+res_1
 18137 08:468C: F0 03        	beq	L772
 18138 08:468E: 82 12 00     	brl	L10412
 18139                        L772:
 18140                        	.line	4166
 18141                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 18142                        	.line	4167
 18143                        ;			{ /* Origin directory itself? */
 18144 08:4691: E2 20        	sep	#$20
 18145                        	longa	off
 18146 08:4693: A5 36        	lda	<L766+dj_1+43
 18147 08:4695: 29 80        	and	#<$80
 18148 08:4697: C2 20        	rep	#$20
 18149                        	longa	on
 18150 08:4699: D0 03        	bne	L773
 18151 08:469B: 82 05 00     	brl	L10413
 18152                        L773:
 18153                        	.line	4168
 18154                        ;				////k_debug_string("f_op
                    en mode:FR_INVALID_NAME\r\n");
 18155                        ;				res = FR_INVALID_NAME;
 18156                        	.line	4170
 18157 08:469E: A9 06 00     	lda	#$6
 18158 08:46A1: 85 09        	sta	<L766+res_1
 18159                        ;			}
 18160                        	.line	4171
 18161                        ;#if FF_FS_LOCK != 0
 18162                        ;			else
 18163                        ;			{
 18164                        ;				res = chk_lock(&dj, (mod
                    e & ~FA_READ) ? 1 : 0); /* Check if the file can be used */
 18165                        ;			}
 18166                        ;#endif
 18167                        ;		}
 18168                        L10413:
 18169                        	.line	4178
 18170                        ;
 18171                        ;		////k_debug_integer("f_open mode:", mode
                    );
 18172                        ;
 18173                        ;		/* Create or Open a file */
 18174                        ;		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_A
                    LWAYS | FA_CREATE_NEW))
 18175                        L10412:
 18176                        	.line	4183
 18177                        ;		{
 18178 08:46A3: E2 20        	sep	#$20
 18179                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 346


 18180 08:46A5: A5 66        	lda	<L765+mode_0
 18181 08:46A7: 29 1C        	and	#<$1c
 18182 08:46A9: C2 20        	rep	#$20
 18183                        	longa	on
 18184 08:46AB: D0 03        	bne	L774
 18185 08:46AD: 82 3D 01     	brl	L10414
 18186                        L774:
 18187                        	.line	4184
 18188                        ;			if (res != FR_OK)
 18189                        	.line	4185
 18190                        ;			{ /* No file, create new */
 18191 08:46B0: A5 09        	lda	<L766+res_1
 18192 08:46B2: D0 03        	bne	L775
 18193 08:46B4: 82 24 00     	brl	L10415
 18194                        L775:
 18195                        	.line	4186
 18196                        ;				if (res == FR_NO_FILE)
 18197                        	.line	4187
 18198                        ;				{ /* There is no file to
                     open, create a new entry */
 18199 08:46B7: A5 09        	lda	<L766+res_1
 18200 08:46B9: C9 04 00     	cmp	#<$4
 18201 08:46BC: F0 03        	beq	L776
 18202 08:46BE: 82 0F 00     	brl	L10416
 18203                        L776:
 18204                        	.line	4188
 18205                        ;#if FF_FS_LOCK != 0
 18206                        ;					res = enq_lock()
                     ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 18207                        ;#else
 18208                        ;					res = dir_regist
                    er(&dj);
 18209                        	.line	4192
 18210 08:46C1: F4 00 00     	pea	#0
 18211 08:46C4: 18           	clc
 18212 08:46C5: 7B           	tdc
 18213 08:46C6: 69 0B 00     	adc	#<L766+dj_1
 18214 08:46C9: 48           	pha
 18215 08:46CA: 22 48 28 08  	jsl	~~dir_register
 18216 08:46CE: 85 09        	sta	<L766+res_1
 18217                        ;#endif
 18218                        ;				}
 18219                        	.line	4194
 18220                        ;				mode |= FA_CREATE_ALWAYS
                    ; /* File is created */
 18221                        L10416:
 18222                        	.line	4195
 18223 08:46D0: E2 20        	sep	#$20
 18224                        	longa	off
 18225 08:46D2: A9 08        	lda	#$8
 18226 08:46D4: 04 66        	tsb	<L765+mode_0
 18227 08:46D6: C2 20        	rep	#$20
 18228                        	longa	on
 18229                        ;			}
 18230                        	.line	4196
 18231                        ;			else
 18232 08:46D8: 82 27 00     	brl	L10417
 18233                        L10415:
  Sat Jul 10 2021  1:15                                                Page 347


 18234                        ;			{ /* Any object with the same na
                    me is already existing */
 18235                        	.line	4198
 18236                        ;				if (dj.obj.attr & (AM_RD
                    O | AM_DIR))
 18237                        	.line	4199
 18238                        ;				{ /* Cannot overwrite it
                     (R/O or DIR) */
 18239 08:46DB: E2 20        	sep	#$20
 18240                        	longa	off
 18241 08:46DD: A5 11        	lda	<L766+dj_1+6
 18242 08:46DF: 29 11        	and	#<$11
 18243 08:46E1: C2 20        	rep	#$20
 18244                        	longa	on
 18245 08:46E3: D0 03        	bne	L777
 18246 08:46E5: 82 08 00     	brl	L10418
 18247                        L777:
 18248                        	.line	4200
 18249                        ;					res = FR_DENIED;
 18250                        	.line	4201
 18251 08:46E8: A9 07 00     	lda	#$7
 18252 08:46EB: 85 09        	sta	<L766+res_1
 18253                        ;				}
 18254                        	.line	4202
 18255                        ;				else
 18256 08:46ED: 82 12 00     	brl	L10419
 18257                        L10418:
 18258                        ;				{
 18259                        	.line	4204
 18260                        ;					if (mode & FA_CR
                    EATE_NEW)
 18261                        	.line	4205
 18262                        ;						res = FR
                    _EXIST; /* Cannot create as new file */
 18263 08:46F0: E2 20        	sep	#$20
 18264                        	longa	off
 18265 08:46F2: A5 66        	lda	<L765+mode_0
 18266 08:46F4: 29 04        	and	#<$4
 18267 08:46F6: C2 20        	rep	#$20
 18268                        	longa	on
 18269 08:46F8: D0 03        	bne	L778
 18270 08:46FA: 82 05 00     	brl	L10420
 18271                        L778:
 18272                        	.line	4206
 18273 08:46FD: A9 08 00     	lda	#$8
 18274 08:4700: 85 09        	sta	<L766+res_1
 18275                        ;				}
 18276                        L10420:
 18277                        	.line	4207
 18278                        L10419:
 18279                        ;			}
 18280                        	.line	4208
 18281                        L10417:
 18282                        ;			if (res == FR_OK && (mode & FA_C
                    REATE_ALWAYS))
 18283                        	.line	4209
 18284                        ;			{ /* Truncate the file if overwr
                    ite mode */
  Sat Jul 10 2021  1:15                                                Page 348


 18285 08:4702: A5 09        	lda	<L766+res_1
 18286 08:4704: F0 03        	beq	L779
 18287 08:4706: 82 E1 00     	brl	L10421
 18288                        L779:
 18289 08:4709: E2 20        	sep	#$20
 18290                        	longa	off
 18291 08:470B: A5 66        	lda	<L765+mode_0
 18292 08:470D: 29 08        	and	#<$8
 18293 08:470F: C2 20        	rep	#$20
 18294                        	longa	on
 18295 08:4711: D0 03        	bne	L780
 18296 08:4713: 82 D4 00     	brl	L10421
 18297                        L780:
 18298                        	.line	4210
 18299                        ;#if FF_FS_EXFAT
 18300                        ;				if (fs->fs_type == FS_EX
                    FAT)
 18301                        ;				{
 18302                        ;					/* Get current a
                    llocation info */
 18303                        ;					fp->obj.fs = fs;
 18304                        ;					init_alloc_info(
                    fs, &fp->obj);
 18305                        ;					/* Set directory
                     entry block initial state */
 18306                        ;					mem_set(fs->dirb
                    uf + 2, 0, 30); /* Clear 85 entry except for NumSec */
 18307                        ;					mem_set(fs->dirb
                    uf + 38, 0, 26); /* Clear C0 entry except for NumName and Na
                    meHash */
 18308                        ;					fs->dirbuf[XDIR_
                    Attr] = AM_ARC;
 18309                        ;					st_dword(fs->dir
                    buf + XDIR_CrtTime, GET_FATTIME());
 18310                        ;					fs->dirbuf[XDIR_
                    GenFlags] = 1;
 18311                        ;					res = store_xdir
                    (&dj);
 18312                        ;					if (res == FR_OK
                     && fp->obj.sclust != 0)
 18313                        ;					{ /* Remove the 
                    cluster chain if exist */
 18314                        ;						res = re
                    move_chain(&fp->obj, fp->obj.sclust, 0);
 18315                        ;						fs->last
                    _clst = fp->obj.sclust - 1; /* Reuse the cluster hole */
 18316                        ;					}
 18317                        ;				}
 18318                        ;				else
 18319                        ;#endif
 18320                        ;				{
 18321                        	.line	4232
 18322                        ;					//k_debug_string
                    ("f_open::Set directory entry initial state...\r\n");
 18323                        ;					/* Set directory
                     entry initial state */
 18324                        ;					cl = ld_clust(fs
                    , dj.dir); /* Get current cluster chain */
  Sat Jul 10 2021  1:15                                                Page 349


 18325                        	.line	4235
 18326 08:4716: D4 29        	pei	<L766+dj_1+30
 18327 08:4718: D4 27        	pei	<L766+dj_1+28
 18328 08:471A: D4 41        	pei	<L766+fs_1+2
 18329 08:471C: D4 3F        	pei	<L766+fs_1
 18330 08:471E: 22 16 1D 08  	jsl	~~ld_clust
 18331 08:4722: 85 43        	sta	<L766+cl_1
 18332 08:4724: 86 45        	stx	<L766+cl_1+2
 18333                        ;					st_dword(dj.dir 
                    + DIR_CrtTime, GET_FATTIME()); /* Set created time */
 18334                        	.line	4236
 18335 08:4726: F4 21 52     	pea	#^$52210000
 18336 08:4729: F4 00 00     	pea	#<$52210000
 18337 08:472C: 18           	clc
 18338 08:472D: A9 0E 00     	lda	#$e
 18339 08:4730: 65 27        	adc	<L766+dj_1+28
 18340 08:4732: 85 01        	sta	<R0
 18341 08:4734: A9 00 00     	lda	#$0
 18342 08:4737: 65 29        	adc	<L766+dj_1+30
 18343 08:4739: 85 03        	sta	<R0+2
 18344 08:473B: D4 03        	pei	<R0+2
 18345 08:473D: D4 01        	pei	<R0
 18346 08:473F: 22 16 01 08  	jsl	~~st_dword
 18347                        ;					dj.dir[DIR_Attr]
                     = AM_ARC; /* Reset attribute */
 18348                        	.line	4237
 18349 08:4743: E2 20        	sep	#$20
 18350                        	longa	off
 18351 08:4745: A9 20        	lda	#$20
 18352 08:4747: A0 0B 00     	ldy	#$b
 18353 08:474A: 97 27        	sta	[<L766+dj_1+28],Y
 18354 08:474C: C2 20        	rep	#$20
 18355                        	longa	on
 18356                        ;					st_clust(fs, dj.
                    dir, 0); /* Reset file allocation info */
 18357                        	.line	4238
 18358 08:474E: F4 00 00     	pea	#^$0
 18359 08:4751: F4 00 00     	pea	#<$0
 18360 08:4754: D4 29        	pei	<L766+dj_1+30
 18361 08:4756: D4 27        	pei	<L766+dj_1+28
 18362 08:4758: D4 41        	pei	<L766+fs_1+2
 18363 08:475A: D4 3F        	pei	<L766+fs_1
 18364 08:475C: 22 A6 1D 08  	jsl	~~st_clust
 18365                        ;					st_dword(dj.dir 
                    + DIR_FileSize, 0);
 18366                        	.line	4239
 18367 08:4760: F4 00 00     	pea	#^$0
 18368 08:4763: F4 00 00     	pea	#<$0
 18369 08:4766: 18           	clc
 18370 08:4767: A9 1C 00     	lda	#$1c
 18371 08:476A: 65 27        	adc	<L766+dj_1+28
 18372 08:476C: 85 01        	sta	<R0
 18373 08:476E: A9 00 00     	lda	#$0
 18374 08:4771: 65 29        	adc	<L766+dj_1+30
 18375 08:4773: 85 03        	sta	<R0+2
 18376 08:4775: D4 03        	pei	<R0+2
 18377 08:4777: D4 01        	pei	<R0
 18378 08:4779: 22 16 01 08  	jsl	~~st_dword
  Sat Jul 10 2021  1:15                                                Page 350


 18379                        ;					fs->wflag = 1;
 18380                        	.line	4240
 18381 08:477D: E2 20        	sep	#$20
 18382                        	longa	off
 18383 08:477F: A9 01        	lda	#$1
 18384 08:4781: A0 03 00     	ldy	#$3
 18385 08:4784: 97 3F        	sta	[<L766+fs_1],Y
 18386 08:4786: C2 20        	rep	#$20
 18387                        	longa	on
 18388                        ;					if (cl != 0)
 18389                        	.line	4241
 18390                        ;					{ /* Remove the 
                    cluster chain if exist */
 18391 08:4788: A5 43        	lda	<L766+cl_1
 18392 08:478A: 05 45        	ora	<L766+cl_1+2
 18393 08:478C: D0 03        	bne	L781
 18394 08:478E: 82 59 00     	brl	L10422
 18395                        L781:
 18396                        	.line	4242
 18397                        ;						sc = fs-
                    >winsect;
 18398                        	.line	4243
 18399 08:4791: A0 2F 00     	ldy	#$2f
 18400 08:4794: B7 3F        	lda	[<L766+fs_1],Y
 18401 08:4796: 85 4F        	sta	<L766+sc_1
 18402 08:4798: A0 31 00     	ldy	#$31
 18403 08:479B: B7 3F        	lda	[<L766+fs_1],Y
 18404 08:479D: 85 51        	sta	<L766+sc_1+2
 18405                        ;						res = re
                    move_chain(&dj.obj, cl, 0);
 18406                        	.line	4244
 18407 08:479F: F4 00 00     	pea	#^$0
 18408 08:47A2: F4 00 00     	pea	#<$0
 18409 08:47A5: D4 45        	pei	<L766+cl_1+2
 18410 08:47A7: D4 43        	pei	<L766+cl_1
 18411 08:47A9: F4 00 00     	pea	#0
 18412 08:47AC: 18           	clc
 18413 08:47AD: 7B           	tdc
 18414 08:47AE: 69 0B 00     	adc	#<L766+dj_1
 18415 08:47B1: 48           	pha
 18416 08:47B2: 22 0A 11 08  	jsl	~~remove_chain
 18417 08:47B6: 85 09        	sta	<L766+res_1
 18418                        ;						if (res 
                    == FR_OK)
 18419                        	.line	4245
 18420                        ;						{
 18421 08:47B8: A5 09        	lda	<L766+res_1
 18422 08:47BA: F0 03        	beq	L782
 18423 08:47BC: 82 2B 00     	brl	L10423
 18424                        L782:
 18425                        	.line	4246
 18426                        ;							
                    res = move_window(fs, sc);
 18427                        	.line	4247
 18428 08:47BF: D4 51        	pei	<L766+sc_1+2
 18429 08:47C1: D4 4F        	pei	<L766+sc_1
 18430 08:47C3: D4 41        	pei	<L766+fs_1+2
 18431 08:47C5: D4 3F        	pei	<L766+fs_1
  Sat Jul 10 2021  1:15                                                Page 351


 18432 08:47C7: 22 C1 08 08  	jsl	~~move_window
 18433 08:47CB: 85 09        	sta	<L766+res_1
 18434                        ;							
                    fs->last_clst = cl - 1; /* Reuse the cluster hole */
 18435                        	.line	4248
 18436 08:47CD: 18           	clc
 18437 08:47CE: A9 FF FF     	lda	#$ffff
 18438 08:47D1: 65 43        	adc	<L766+cl_1
 18439 08:47D3: 85 01        	sta	<R0
 18440 08:47D5: A9 FF FF     	lda	#$ffff
 18441 08:47D8: 65 45        	adc	<L766+cl_1+2
 18442 08:47DA: 85 03        	sta	<R0+2
 18443 08:47DC: A5 01        	lda	<R0
 18444 08:47DE: A0 0F 00     	ldy	#$f
 18445 08:47E1: 97 3F        	sta	[<L766+fs_1],Y
 18446 08:47E3: A5 03        	lda	<R0+2
 18447 08:47E5: A0 11 00     	ldy	#$11
 18448 08:47E8: 97 3F        	sta	[<L766+fs_1],Y
 18449                        ;						}
 18450                        	.line	4249
 18451                        ;					}
 18452                        L10423:
 18453                        	.line	4250
 18454                        ;				}
 18455                        L10422:
 18456                        	.line	4251
 18457                        ;			}
 18458                        	.line	4252
 18459                        ;		}
 18460                        L10421:
 18461                        	.line	4253
 18462                        ;		else
 18463 08:47EA: 82 3B 00     	brl	L10424
 18464                        L10414:
 18465                        ;		{ /* Open an existing file */
 18466                        	.line	4255
 18467                        ;			if (res == FR_OK)
 18468                        	.line	4256
 18469                        ;			{ /* Is the object exsiting? */
 18470 08:47ED: A5 09        	lda	<L766+res_1
 18471 08:47EF: F0 03        	beq	L783
 18472 08:47F1: 82 34 00     	brl	L10425
 18473                        L783:
 18474                        	.line	4257
 18475                        ;				if (dj.obj.attr & AM_DIR
                    )
 18476                        	.line	4258
 18477                        ;				{ /* File open against a
                     directory */
 18478 08:47F4: E2 20        	sep	#$20
 18479                        	longa	off
 18480 08:47F6: A5 11        	lda	<L766+dj_1+6
 18481 08:47F8: 29 10        	and	#<$10
 18482 08:47FA: C2 20        	rep	#$20
 18483                        	longa	on
 18484 08:47FC: D0 03        	bne	L784
 18485 08:47FE: 82 08 00     	brl	L10426
 18486                        L784:
  Sat Jul 10 2021  1:15                                                Page 352


 18487                        	.line	4259
 18488                        ;					res = FR_NO_FILE
                    ;
 18489                        	.line	4260
 18490 08:4801: A9 04 00     	lda	#$4
 18491 08:4804: 85 09        	sta	<L766+res_1
 18492                        ;				}
 18493                        	.line	4261
 18494                        ;				else
 18495 08:4806: 82 1F 00     	brl	L10427
 18496                        L10426:
 18497                        ;				{
 18498                        	.line	4263
 18499                        ;					if ((mode & FA_W
                    RITE) && (dj.obj.attr & AM_RDO))
 18500                        	.line	4264
 18501                        ;					{ /* Write mode 
                    open against R/O file */
 18502 08:4809: E2 20        	sep	#$20
 18503                        	longa	off
 18504 08:480B: A5 66        	lda	<L765+mode_0
 18505 08:480D: 29 02        	and	#<$2
 18506 08:480F: C2 20        	rep	#$20
 18507                        	longa	on
 18508 08:4811: D0 03        	bne	L785
 18509 08:4813: 82 12 00     	brl	L10428
 18510                        L785:
 18511 08:4816: E2 20        	sep	#$20
 18512                        	longa	off
 18513 08:4818: A5 11        	lda	<L766+dj_1+6
 18514 08:481A: 29 01        	and	#<$1
 18515 08:481C: C2 20        	rep	#$20
 18516                        	longa	on
 18517 08:481E: D0 03        	bne	L786
 18518 08:4820: 82 05 00     	brl	L10428
 18519                        L786:
 18520                        	.line	4265
 18521                        ;						res = FR
                    _DENIED;
 18522                        	.line	4266
 18523 08:4823: A9 07 00     	lda	#$7
 18524 08:4826: 85 09        	sta	<L766+res_1
 18525                        ;					}
 18526                        	.line	4267
 18527                        ;				}
 18528                        L10428:
 18529                        	.line	4268
 18530                        L10427:
 18531                        ;			}
 18532                        	.line	4269
 18533                        ;		}
 18534                        L10425:
 18535                        	.line	4270
 18536                        L10424:
 18537                        ;		if (res == FR_OK)
 18538                        	.line	4271
 18539                        ;		{
 18540 08:4828: A5 09        	lda	<L766+res_1
  Sat Jul 10 2021  1:15                                                Page 353


 18541 08:482A: F0 03        	beq	L787
 18542 08:482C: 82 37 00     	brl	L10429
 18543                        L787:
 18544                        	.line	4272
 18545                        ;			if (mode & FA_CREATE_ALWAYS)
 18546                        	.line	4273
 18547                        ;				mode |= FA_MODIFIED; /* 
                    Set file change flag if created or overwritten */
 18548 08:482F: E2 20        	sep	#$20
 18549                        	longa	off
 18550 08:4831: A5 66        	lda	<L765+mode_0
 18551 08:4833: 29 08        	and	#<$8
 18552 08:4835: C2 20        	rep	#$20
 18553                        	longa	on
 18554 08:4837: D0 03        	bne	L788
 18555 08:4839: 82 08 00     	brl	L10430
 18556                        L788:
 18557                        	.line	4274
 18558 08:483C: E2 20        	sep	#$20
 18559                        	longa	off
 18560 08:483E: A9 40        	lda	#$40
 18561 08:4840: 04 66        	tsb	<L765+mode_0
 18562 08:4842: C2 20        	rep	#$20
 18563                        	longa	on
 18564                        ;			fp->dir_sect = fs->winsect; /* P
                    ointer to the directory entry */
 18565                        L10430:
 18566                        	.line	4275
 18567 08:4844: A0 2F 00     	ldy	#$2f
 18568 08:4847: B7 3F        	lda	[<L766+fs_1],Y
 18569 08:4849: A0 1E 00     	ldy	#$1e
 18570 08:484C: 97 5E        	sta	[<L765+fp_0],Y
 18571 08:484E: A0 31 00     	ldy	#$31
 18572 08:4851: B7 3F        	lda	[<L766+fs_1],Y
 18573 08:4853: A0 20 00     	ldy	#$20
 18574 08:4856: 97 5E        	sta	[<L765+fp_0],Y
 18575                        ;			fp->dir_ptr = dj.dir;
 18576                        	.line	4276
 18577 08:4858: A5 27        	lda	<L766+dj_1+28
 18578 08:485A: A0 22 00     	ldy	#$22
 18579 08:485D: 97 5E        	sta	[<L765+fp_0],Y
 18580 08:485F: A5 29        	lda	<L766+dj_1+30
 18581 08:4861: A0 24 00     	ldy	#$24
 18582 08:4864: 97 5E        	sta	[<L765+fp_0],Y
 18583                        ;#if FF_FS_LOCK != 0
 18584                        ;			fp->obj.lockid = inc_lock(&dj, (
                    mode & ~FA_READ) ? 1 : 0); /* Lock the file for this session
                     */
 18585                        ;			if (fp->obj.lockid == 0) res = F
                    R_INT_ERR;
 18586                        ;#endif
 18587                        ;		}
 18588                        	.line	4281
 18589                        ;#else		/* R/O configuration */
 18590                        ;		if (res == FR_OK)
 18591                        ;		{
 18592                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 18593                        ;			{ /* Is it origin directory itse
  Sat Jul 10 2021  1:15                                                Page 354


                    lf? */
 18594                        ;				res = FR_INVALID_NAME;
 18595                        ;			}
 18596                        ;			else
 18597                        ;			{
 18598                        ;				if (dj.obj.attr & AM_DIR
                    )
 18599                        ;				{ /* Is it a directory? 
                    */
 18600                        ;					res = FR_NO_FILE
                    ;
 18601                        ;				}
 18602                        ;			}
 18603                        ;		}
 18604                        ;#endif
 18605                        ;
 18606                        ;		if (res == FR_OK)
 18607                        L10429:
 18608                        	.line	4299
 18609                        ;		{
 18610 08:4866: A5 09        	lda	<L766+res_1
 18611 08:4868: F0 03        	beq	L789
 18612 08:486A: 82 22 02     	brl	L10431
 18613                        L789:
 18614                        	.line	4300
 18615                        ;#if FF_FS_EXFAT
 18616                        ;			if (fs->fs_type == FS_EXFAT)
 18617                        ;			{
 18618                        ;				fp->obj.c_scl = dj.obj.s
                    clust; /* Get containing directory info */
 18619                        ;				fp->obj.c_size = ((DWORD
                    )dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 18620                        ;				fp->obj.c_ofs = dj.blk_o
                    fs;
 18621                        ;				init_alloc_info(fs, &fp-
                    >obj);
 18622                        ;			}
 18623                        ;			else
 18624                        ;#endif
 18625                        ;			{
 18626                        	.line	4311
 18627                        ;				fp->obj.sclust = ld_clus
                    t(fs, dj.dir); /* Get object allocation info */
 18628                        	.line	4312
 18629 08:486D: D4 29        	pei	<L766+dj_1+30
 18630 08:486F: D4 27        	pei	<L766+dj_1+28
 18631 08:4871: D4 41        	pei	<L766+fs_1+2
 18632 08:4873: D4 3F        	pei	<L766+fs_1
 18633 08:4875: 22 16 1D 08  	jsl	~~ld_clust
 18634 08:4879: 85 01        	sta	<R0
 18635 08:487B: 86 03        	stx	<R0+2
 18636 08:487D: A5 01        	lda	<R0
 18637 08:487F: A0 08 00     	ldy	#$8
 18638 08:4882: 97 5E        	sta	[<L765+fp_0],Y
 18639 08:4884: A5 03        	lda	<R0+2
 18640 08:4886: A0 0A 00     	ldy	#$a
 18641 08:4889: 97 5E        	sta	[<L765+fp_0],Y
 18642                        ;				fp->obj.objsize = ld_dwo
  Sat Jul 10 2021  1:15                                                Page 355


                    rd(dj.dir + DIR_FileSize);
 18643                        	.line	4313
 18644 08:488B: 18           	clc
 18645 08:488C: A9 1C 00     	lda	#$1c
 18646 08:488F: 65 27        	adc	<L766+dj_1+28
 18647 08:4891: 85 01        	sta	<R0
 18648 08:4893: A9 00 00     	lda	#$0
 18649 08:4896: 65 29        	adc	<L766+dj_1+30
 18650 08:4898: 85 03        	sta	<R0+2
 18651 08:489A: D4 03        	pei	<R0+2
 18652 08:489C: D4 01        	pei	<R0
 18653 08:489E: 22 3B 00 08  	jsl	~~ld_dword
 18654 08:48A2: 85 05        	sta	<R1
 18655 08:48A4: 86 07        	stx	<R1+2
 18656 08:48A6: A5 05        	lda	<R1
 18657 08:48A8: A0 0C 00     	ldy	#$c
 18658 08:48AB: 97 5E        	sta	[<L765+fp_0],Y
 18659 08:48AD: A5 07        	lda	<R1+2
 18660 08:48AF: A0 0E 00     	ldy	#$e
 18661 08:48B2: 97 5E        	sta	[<L765+fp_0],Y
 18662                        ;			}
 18663                        	.line	4314
 18664                        ;#if FF_USE_FASTSEEK
 18665                        ;			fp->cltbl = 0; /* Disable fast s
                    eek mode */
 18666                        ;#endif
 18667                        ;			fp->obj.fs = fs; /* Validate the
                     file object */
 18668                        	.line	4318
 18669 08:48B4: A5 3F        	lda	<L766+fs_1
 18670 08:48B6: 87 5E        	sta	[<L765+fp_0]
 18671 08:48B8: A5 41        	lda	<L766+fs_1+2
 18672 08:48BA: A0 02 00     	ldy	#$2
 18673 08:48BD: 97 5E        	sta	[<L765+fp_0],Y
 18674                        ;			fp->obj.id = fs->id;
 18675                        	.line	4319
 18676 08:48BF: A0 05 00     	ldy	#$5
 18677 08:48C2: B7 3F        	lda	[<L766+fs_1],Y
 18678 08:48C4: A0 04 00     	ldy	#$4
 18679 08:48C7: 97 5E        	sta	[<L765+fp_0],Y
 18680                        ;			fp->flag = mode; /* Set file acc
                    ess mode */
 18681                        	.line	4320
 18682 08:48C9: E2 20        	sep	#$20
 18683                        	longa	off
 18684 08:48CB: A5 66        	lda	<L765+mode_0
 18685 08:48CD: A0 10 00     	ldy	#$10
 18686 08:48D0: 97 5E        	sta	[<L765+fp_0],Y
 18687 08:48D2: C2 20        	rep	#$20
 18688                        	longa	on
 18689                        ;			fp->err = 0; /* Clear error flag
                     */
 18690                        	.line	4321
 18691 08:48D4: E2 20        	sep	#$20
 18692                        	longa	off
 18693 08:48D6: A9 00        	lda	#$0
 18694 08:48D8: A0 11 00     	ldy	#$11
 18695 08:48DB: 97 5E        	sta	[<L765+fp_0],Y
  Sat Jul 10 2021  1:15                                                Page 356


 18696 08:48DD: C2 20        	rep	#$20
 18697                        	longa	on
 18698                        ;			fp->sect = 0; /* Invalidate curr
                    ent data sector */
 18699                        	.line	4322
 18700 08:48DF: A9 00 00     	lda	#$0
 18701 08:48E2: A0 1A 00     	ldy	#$1a
 18702 08:48E5: 97 5E        	sta	[<L765+fp_0],Y
 18703 08:48E7: A9 00 00     	lda	#$0
 18704 08:48EA: A0 1C 00     	ldy	#$1c
 18705 08:48ED: 97 5E        	sta	[<L765+fp_0],Y
 18706                        ;			fp->fptr = 0; /* Set file pointe
                    r top of the file */
 18707                        	.line	4323
 18708 08:48EF: A9 00 00     	lda	#$0
 18709 08:48F2: A0 12 00     	ldy	#$12
 18710 08:48F5: 97 5E        	sta	[<L765+fp_0],Y
 18711 08:48F7: A9 00 00     	lda	#$0
 18712 08:48FA: A0 14 00     	ldy	#$14
 18713 08:48FD: 97 5E        	sta	[<L765+fp_0],Y
 18714                        ;#if !FF_FS_READONLY
 18715                        ;#if !FF_FS_TINY
 18716                        ;			mem_set(fp->buf, 0, sizeof fp->b
                    uf); /* Clear sector buffer */
 18717                        	.line	4326
 18718 08:48FF: F4 00 02     	pea	#<$200
 18719 08:4902: F4 00 00     	pea	#<$0
 18720 08:4905: 18           	clc
 18721 08:4906: A9 26 00     	lda	#$26
 18722 08:4909: 65 5E        	adc	<L765+fp_0
 18723 08:490B: 85 01        	sta	<R0
 18724 08:490D: A9 00 00     	lda	#$0
 18725 08:4910: 65 60        	adc	<L765+fp_0+2
 18726 08:4912: 85 03        	sta	<R0+2
 18727 08:4914: D4 03        	pei	<R0+2
 18728 08:4916: D4 01        	pei	<R0
 18729 08:4918: 22 DF 01 08  	jsl	~~mem_set
 18730                        ;#endif
 18731                        ;			if ((mode & FA_SEEKEND) && fp->o
                    bj.objsize > 0)
 18732                        	.line	4328
 18733                        ;			{ /* Seek to end of file if FA_O
                    PEN_APPEND is specified */
 18734 08:491C: E2 20        	sep	#$20
 18735                        	longa	off
 18736 08:491E: A5 66        	lda	<L765+mode_0
 18737 08:4920: 29 20        	and	#<$20
 18738 08:4922: C2 20        	rep	#$20
 18739                        	longa	on
 18740 08:4924: D0 03        	bne	L790
 18741 08:4926: 82 66 01     	brl	L10432
 18742                        L790:
 18743 08:4929: A9 00 00     	lda	#$0
 18744 08:492C: A0 0C 00     	ldy	#$c
 18745 08:492F: D7 5E        	cmp	[<L765+fp_0],Y
 18746 08:4931: A9 00 00     	lda	#$0
 18747 08:4934: A0 0E 00     	ldy	#$e
 18748 08:4937: F7 5E        	sbc	[<L765+fp_0],Y
  Sat Jul 10 2021  1:15                                                Page 357


 18749 08:4939: 90 03        	bcc	L791
 18750 08:493B: 82 51 01     	brl	L10432
 18751                        L791:
 18752                        	.line	4329
 18753                        ;				fp->fptr = fp->obj.objsi
                    ze; /* Offset to seek */
 18754                        	.line	4330
 18755 08:493E: A0 0C 00     	ldy	#$c
 18756 08:4941: B7 5E        	lda	[<L765+fp_0],Y
 18757 08:4943: A0 12 00     	ldy	#$12
 18758 08:4946: 97 5E        	sta	[<L765+fp_0],Y
 18759 08:4948: A0 0E 00     	ldy	#$e
 18760 08:494B: B7 5E        	lda	[<L765+fp_0],Y
 18761 08:494D: A0 14 00     	ldy	#$14
 18762 08:4950: 97 5E        	sta	[<L765+fp_0],Y
 18763                        ;				bcs = (DWORD) fs->csize 
                    * SS(fs); /* Cluster size in byte */
 18764                        	.line	4331
 18765 08:4952: A0 00 00     	ldy	#$0
 18766 08:4955: 5A           	phy
 18767 08:4956: A0 09 00     	ldy	#$9
 18768 08:4959: B7 3F        	lda	[<L766+fs_1],Y
 18769 08:495B: 7A           	ply
 18770 08:495C: 2A           	rol	A
 18771 08:495D: 6A           	ror	A
 18772 08:495E: 10 01        	bpl	L792
 18773 08:4960: 88           	dey
 18774                        L792:
 18775 08:4961: 85 01        	sta	<R0
 18776 08:4963: 84 03        	sty	<R0+2
 18777 08:4965: D4 03        	pei	<R0+2
 18778 08:4967: D4 01        	pei	<R0
 18779 08:4969: A9 09 00     	lda	#$9
 18780                        	xref	~~~lasl
 18781 08:496C: 22 xx xx xx  	jsl	~~~lasl
 18782 08:4970: 85 47        	sta	<L766+bcs_1
 18783 08:4972: 86 49        	stx	<L766+bcs_1+2
 18784                        ;				clst = fp->obj.sclust; /
                    * Follow the cluster chain */
 18785                        	.line	4332
 18786 08:4974: A0 08 00     	ldy	#$8
 18787 08:4977: B7 5E        	lda	[<L765+fp_0],Y
 18788 08:4979: 85 4B        	sta	<L766+clst_1
 18789 08:497B: A0 0A 00     	ldy	#$a
 18790 08:497E: B7 5E        	lda	[<L765+fp_0],Y
 18791 08:4980: 85 4D        	sta	<L766+clst_1+2
 18792                        ;				for (ofs = fp->obj.objsi
                    ze; res == FR_OK && ofs > bcs; ofs -=
 18793                        	.line	4333
 18794 08:4982: A0 0C 00     	ldy	#$c
 18795 08:4985: B7 5E        	lda	[<L765+fp_0],Y
 18796 08:4987: 85 53        	sta	<L766+ofs_1
 18797 08:4989: A0 0E 00     	ldy	#$e
 18798 08:498C: B7 5E        	lda	[<L765+fp_0],Y
 18799 08:498E: 85 55        	sta	<L766+ofs_1+2
 18800 08:4990: 82 47 00     	brl	L10436
 18801                        ;						bcs)
 18802                        L10435:
  Sat Jul 10 2021  1:15                                                Page 358


 18803                        ;				{
 18804                        	.line	4335
 18805                        ;					clst = get_fat(&
                    fp->obj, clst);
 18806                        	.line	4336
 18807 08:4993: D4 4D        	pei	<L766+clst_1+2
 18808 08:4995: D4 4B        	pei	<L766+clst_1
 18809 08:4997: D4 60        	pei	<L765+fp_0+2
 18810 08:4999: D4 5E        	pei	<L765+fp_0
 18811 08:499B: 22 54 0B 08  	jsl	~~get_fat
 18812 08:499F: 85 4B        	sta	<L766+clst_1
 18813 08:49A1: 86 4D        	stx	<L766+clst_1+2
 18814                        ;					if (clst <= 1)
 18815                        	.line	4337
 18816                        ;						res = FR
                    _INT_ERR;
 18817 08:49A3: A9 01 00     	lda	#$1
 18818 08:49A6: C5 4B        	cmp	<L766+clst_1
 18819 08:49A8: A9 00 00     	lda	#$0
 18820 08:49AB: E5 4D        	sbc	<L766+clst_1+2
 18821 08:49AD: B0 03        	bcs	L793
 18822 08:49AF: 82 05 00     	brl	L10437
 18823                        L793:
 18824                        	.line	4338
 18825 08:49B2: A9 02 00     	lda	#$2
 18826 08:49B5: 85 09        	sta	<L766+res_1
 18827                        ;					if (clst == 0xFF
                    FFFFFF)
 18828                        L10437:
 18829                        	.line	4339
 18830                        ;						res = FR
                    _DISK_ERR;
 18831 08:49B7: A5 4B        	lda	<L766+clst_1
 18832 08:49B9: C9 FF FF     	cmp	#<$ffffffff
 18833 08:49BC: D0 05        	bne	L794
 18834 08:49BE: A5 4D        	lda	<L766+clst_1+2
 18835 08:49C0: C9 FF FF     	cmp	#^$ffffffff
 18836                        L794:
 18837 08:49C3: F0 03        	beq	L795
 18838 08:49C5: 82 05 00     	brl	L10438
 18839                        L795:
 18840                        	.line	4340
 18841 08:49C8: A9 01 00     	lda	#$1
 18842 08:49CB: 85 09        	sta	<L766+res_1
 18843                        ;				}
 18844                        L10438:
 18845                        	.line	4341
 18846                        L10433:
 18847 08:49CD: 38           	sec
 18848 08:49CE: A5 53        	lda	<L766+ofs_1
 18849 08:49D0: E5 47        	sbc	<L766+bcs_1
 18850 08:49D2: 85 53        	sta	<L766+ofs_1
 18851 08:49D4: A5 55        	lda	<L766+ofs_1+2
 18852 08:49D6: E5 49        	sbc	<L766+bcs_1+2
 18853 08:49D8: 85 55        	sta	<L766+ofs_1+2
 18854                        L10436:
 18855 08:49DA: A5 09        	lda	<L766+res_1
 18856 08:49DC: F0 03        	beq	L797
  Sat Jul 10 2021  1:15                                                Page 359


 18857 08:49DE: 82 0D 00     	brl	L796
 18858                        L797:
 18859 08:49E1: A5 47        	lda	<L766+bcs_1
 18860 08:49E3: C5 53        	cmp	<L766+ofs_1
 18861 08:49E5: A5 49        	lda	<L766+bcs_1+2
 18862 08:49E7: E5 55        	sbc	<L766+ofs_1+2
 18863 08:49E9: B0 03        	bcs	L798
 18864 08:49EB: 82 A5 FF     	brl	L10435
 18865                        L798:
 18866                        L796:
 18867                        L10434:
 18868                        ;				fp->clust = clst;
 18869                        	.line	4342
 18870 08:49EE: A5 4B        	lda	<L766+clst_1
 18871 08:49F0: A0 16 00     	ldy	#$16
 18872 08:49F3: 97 5E        	sta	[<L765+fp_0],Y
 18873 08:49F5: A5 4D        	lda	<L766+clst_1+2
 18874 08:49F7: A0 18 00     	ldy	#$18
 18875 08:49FA: 97 5E        	sta	[<L765+fp_0],Y
 18876                        ;				if (res == FR_OK && ofs 
                    % SS(fs))
 18877                        	.line	4343
 18878                        ;				{ /* Fill sector buffer 
                    if not on the sector boundary */
 18879 08:49FC: A5 09        	lda	<L766+res_1
 18880 08:49FE: F0 03        	beq	L799
 18881 08:4A00: 82 8C 00     	brl	L10439
 18882                        L799:
 18883 08:4A03: A5 53        	lda	<L766+ofs_1
 18884 08:4A05: 29 FF 01     	and	#<$1ff
 18885 08:4A08: D0 03        	bne	L800
 18886 08:4A0A: 82 82 00     	brl	L10439
 18887                        L800:
 18888                        	.line	4344
 18889                        ;					sc = clst2sect(f
                    s, clst);
 18890                        	.line	4345
 18891 08:4A0D: D4 4D        	pei	<L766+clst_1+2
 18892 08:4A0F: D4 4B        	pei	<L766+clst_1
 18893 08:4A11: D4 41        	pei	<L766+fs_1+2
 18894 08:4A13: D4 3F        	pei	<L766+fs_1
 18895 08:4A15: 22 C5 0A 08  	jsl	~~clst2sect
 18896 08:4A19: 85 4F        	sta	<L766+sc_1
 18897 08:4A1B: 86 51        	stx	<L766+sc_1+2
 18898                        ;					if (sc == 0)
 18899                        	.line	4346
 18900                        ;					{
 18901 08:4A1D: A5 4F        	lda	<L766+sc_1
 18902 08:4A1F: 05 51        	ora	<L766+sc_1+2
 18903 08:4A21: F0 03        	beq	L801
 18904 08:4A23: 82 08 00     	brl	L10440
 18905                        L801:
 18906                        	.line	4347
 18907                        ;						res = FR
                    _INT_ERR;
 18908                        	.line	4348
 18909 08:4A26: A9 02 00     	lda	#$2
 18910 08:4A29: 85 09        	sta	<L766+res_1
  Sat Jul 10 2021  1:15                                                Page 360


 18911                        ;					}
 18912                        	.line	4349
 18913                        ;					else
 18914 08:4A2B: 82 61 00     	brl	L10441
 18915                        L10440:
 18916                        ;					{
 18917                        	.line	4351
 18918                        ;						fp->sect
                     = sc + (DWORD) (ofs / SS(fs));
 18919                        	.line	4352
 18920 08:4A2E: D4 55        	pei	<L766+ofs_1+2
 18921 08:4A30: D4 53        	pei	<L766+ofs_1
 18922 08:4A32: A9 09 00     	lda	#$9
 18923                        	xref	~~~llsr
 18924 08:4A35: 22 xx xx xx  	jsl	~~~llsr
 18925 08:4A39: 85 01        	sta	<R0
 18926 08:4A3B: 86 03        	stx	<R0+2
 18927 08:4A3D: 18           	clc
 18928 08:4A3E: A5 01        	lda	<R0
 18929 08:4A40: 65 4F        	adc	<L766+sc_1
 18930 08:4A42: 85 05        	sta	<R1
 18931 08:4A44: A5 03        	lda	<R0+2
 18932 08:4A46: 65 51        	adc	<L766+sc_1+2
 18933 08:4A48: 85 07        	sta	<R1+2
 18934 08:4A4A: A5 05        	lda	<R1
 18935 08:4A4C: A0 1A 00     	ldy	#$1a
 18936 08:4A4F: 97 5E        	sta	[<L765+fp_0],Y
 18937 08:4A51: A5 07        	lda	<R1+2
 18938 08:4A53: A0 1C 00     	ldy	#$1c
 18939 08:4A56: 97 5E        	sta	[<L765+fp_0],Y
 18940                        ;#if !FF_FS_TINY
 18941                        ;						if (disk
                    _read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK)
 18942                        	.line	4354
 18943                        ;							
                    res = FR_DISK_ERR;
 18944 08:4A58: F4 01 00     	pea	#<$1
 18945 08:4A5B: A0 1C 00     	ldy	#$1c
 18946 08:4A5E: B7 5E        	lda	[<L765+fp_0],Y
 18947 08:4A60: 48           	pha
 18948 08:4A61: A0 1A 00     	ldy	#$1a
 18949 08:4A64: B7 5E        	lda	[<L765+fp_0],Y
 18950 08:4A66: 48           	pha
 18951 08:4A67: 18           	clc
 18952 08:4A68: A9 26 00     	lda	#$26
 18953 08:4A6B: 65 5E        	adc	<L765+fp_0
 18954 08:4A6D: 85 01        	sta	<R0
 18955 08:4A6F: A9 00 00     	lda	#$0
 18956 08:4A72: 65 60        	adc	<L765+fp_0+2
 18957 08:4A74: 85 03        	sta	<R0+2
 18958 08:4A76: D4 03        	pei	<R0+2
 18959 08:4A78: D4 01        	pei	<R0
 18960 08:4A7A: A0 01 00     	ldy	#$1
 18961 08:4A7D: B7 3F        	lda	[<L766+fs_1],Y
 18962 08:4A7F: 48           	pha
 18963 08:4A80: 22 xx xx xx  	jsl	~~disk_read
 18964 08:4A84: AA           	tax
 18965 08:4A85: D0 03        	bne	L802
  Sat Jul 10 2021  1:15                                                Page 361


 18966 08:4A87: 82 05 00     	brl	L10442
 18967                        L802:
 18968                        	.line	4355
 18969 08:4A8A: A9 01 00     	lda	#$1
 18970 08:4A8D: 85 09        	sta	<L766+res_1
 18971                        ;#endif
 18972                        ;					}
 18973                        L10442:
 18974                        	.line	4357
 18975                        L10441:
 18976                        ;				}
 18977                        	.line	4358
 18978                        ;			}
 18979                        L10439:
 18980                        	.line	4359
 18981                        ;#endif
 18982                        ;		}
 18983                        L10432:
 18984                        	.line	4361
 18985                        ;
 18986                        ;		FREE_NAMBUF();
 18987                        L10431:
 18988                        	.line	4363
 18989 08:4A8F: D4 59        	pei	<L766+lfn_1+2
 18990 08:4A91: D4 57        	pei	<L766+lfn_1
 18991 08:4A93: 22 D3 92 08  	jsl	~~ff_memfree
 18992                        ;	}
 18993                        	.line	4364
 18994                        ;
 18995                        ;	if (res != FR_OK)
 18996                        L10410:
 18997                        	.line	4366
 18998                        ;		fp->obj.fs = 0; /* Invalidate file objec
                    t on error */
 18999 08:4A97: A5 09        	lda	<L766+res_1
 19000 08:4A99: D0 03        	bne	L803
 19001 08:4A9B: 82 0D 00     	brl	L10443
 19002                        L803:
 19003                        	.line	4367
 19004 08:4A9E: A9 00 00     	lda	#$0
 19005 08:4AA1: 87 5E        	sta	[<L765+fp_0]
 19006 08:4AA3: A9 00 00     	lda	#$0
 19007 08:4AA6: A0 02 00     	ldy	#$2
 19008 08:4AA9: 97 5E        	sta	[<L765+fp_0],Y
 19009                        ;
 19010                        ;	LEAVE_FF(fs, res);
 19011                        L10443:
 19012                        	.line	4369
 19013 08:4AAB: A5 09        	lda	<L766+res_1
 19014 08:4AAD: 82 5C FB     	brl	L769
 19015                        ;}
 19016                        	.line	4370
 19017                        	.endblock	4370
 19018             0000005A   L765	equ	90
 19019             00000009   L766	equ	9
 19020 08:4AB0:              	ends
 19021                        	efunc
 19022                        	.endfunc	4370,9,90
  Sat Jul 10 2021  1:15                                                Page 362


 19023                        	.line	4370
 19024                        ;
 19025                        ;/*-----------------------------------------------
                    ------------------------*/
 19026                        ;/* Read File                                     
                                            */
 19027                        ;/*-----------------------------------------------
                    ------------------------*/
 19028                        ;
 19029                        ;FRESULT f_read(FIL* fp, /* Pointer to the file ob
                    ject */
 19030                        ;void* buff, /* Pointer to data buffer */
 19031                        ;UINT btr, /* Number of bytes to read */
 19032                        ;UINT* br /* Pointer to number of bytes read */
 19033                        ;)
 19034                        ;{
 19035                        	.line	4376
 19036                        	.line	4381
 19037                        	FFDOS
 19038                        	xdef	~~f_read
 19039                        	func
 19040                        	.function	4381
 19041                        ~~f_read:
 19042                        	longa	on
 19043                        	longi	on
 19044 08:4AB0: 3B           	tsc
 19045 08:4AB1: 38           	sec
 19046 08:4AB2: E9 2C 00     	sbc	#L804
 19047 08:4AB5: 1B           	tcs
 19048 08:4AB6: 0B           	phd
 19049 08:4AB7: 5B           	tcd
 19050             00000004   fp_0	set	4
 19051             00000008   buff_0	set	8
 19052             0000000C   btr_0	set	12
 19053             0000000E   br_0	set	14
 19054                        	.block	4381
 19055                        ;	FRESULT res;
 19056                        ;	FATFS *fs;
 19057                        ;	DWORD clst;
 19058                        ;	LBA_t sect;
 19059                        ;	FSIZE_t remain;
 19060                        ;	UINT rcnt, cc, csect;
 19061                        ;	BYTE *rbuff = (BYTE*) buff;
 19062                        ;
 19063                        ;	////k_debug_string("f_read...\r\n");
 19064                        ;
 19065                        ;	*br = 0; /* Clear read byte counter */
 19066             00000000   res_1	set	0
 19067             00000002   fs_1	set	2
 19068             00000006   clst_1	set	6
 19069             0000000A   sect_1	set	10
 19070             0000000E   remain_1	set	14
 19071             00000012   rcnt_1	set	18
 19072             00000014   cc_1	set	20
 19073             00000016   csect_1	set	22
 19074             00000018   rbuff_1	set	24
 19075                        	.sym	res,0,5,1,16
 19076                        	.sym	fs,2,138,1,32,72
  Sat Jul 10 2021  1:15                                                Page 363


 19077                        	.sym	clst,6,18,1,32
 19078                        	.sym	sect,10,18,1,32
 19079                        	.sym	remain,14,18,1,32
 19080                        	.sym	rcnt,18,16,1,16
 19081                        	.sym	cc,20,16,1,16
 19082                        	.sym	csect,22,16,1,16
 19083                        	.sym	rbuff,24,142,1,32
 19084                        	.sym	fp,4,138,6,32,74
 19085                        	.sym	buff,8,129,6,32
 19086                        	.sym	btr,12,16,6,16
 19087                        	.sym	br,14,144,6,32
 19088 08:4AB8: A5 34        	lda	<L804+buff_0
 19089 08:4ABA: 85 29        	sta	<L805+rbuff_1
 19090 08:4ABC: A5 36        	lda	<L804+buff_0+2
 19091 08:4ABE: 85 2B        	sta	<L805+rbuff_1+2
 19092                        	.line	4392
 19093 08:4AC0: A9 00 00     	lda	#$0
 19094 08:4AC3: 87 3A        	sta	[<L804+br_0]
 19095                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 19096                        	.line	4393
 19097 08:4AC5: F4 00 00     	pea	#0
 19098 08:4AC8: 18           	clc
 19099 08:4AC9: 7B           	tdc
 19100 08:4ACA: 69 13 00     	adc	#<L805+fs_1
 19101 08:4ACD: 48           	pha
 19102 08:4ACE: D4 32        	pei	<L804+fp_0+2
 19103 08:4AD0: D4 30        	pei	<L804+fp_0
 19104 08:4AD2: 22 8B 44 08  	jsl	~~validate
 19105 08:4AD6: 85 11        	sta	<L805+res_1
 19106                        ;
 19107                        ;	////k_debug_long("f_read:res:", res);
 19108                        ;
 19109                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 19110                        	.line	4397
 19111                        ;		LEAVE_FF(fs, res); /* Check validity */
 19112 08:4AD8: A5 11        	lda	<L805+res_1
 19113 08:4ADA: F0 03        	beq	L808
 19114 08:4ADC: 82 11 00     	brl	L807
 19115                        L808:
 19116 08:4ADF: A0 11 00     	ldy	#$11
 19117 08:4AE2: B7 30        	lda	[<L804+fp_0],Y
 19118 08:4AE4: 29 FF 00     	and	#$ff
 19119 08:4AE7: 85 11        	sta	<L805+res_1
 19120 08:4AE9: A5 11        	lda	<L805+res_1
 19121 08:4AEB: D0 03        	bne	L809
 19122 08:4AED: 82 14 00     	brl	L10444
 19123                        L809:
 19124                        L807:
 19125                        	.line	4398
 19126 08:4AF0: A5 11        	lda	<L805+res_1
 19127                        L810:
 19128 08:4AF2: A8           	tay
 19129 08:4AF3: A5 2E        	lda	<L804+2
 19130 08:4AF5: 85 3C        	sta	<L804+2+14
 19131 08:4AF7: A5 2D        	lda	<L804+1
 19132 08:4AF9: 85 3B        	sta	<L804+1+14
  Sat Jul 10 2021  1:15                                                Page 364


 19133 08:4AFB: 2B           	pld
 19134 08:4AFC: 3B           	tsc
 19135 08:4AFD: 18           	clc
 19136 08:4AFE: 69 3A 00     	adc	#L804+14
 19137 08:4B01: 1B           	tcs
 19138 08:4B02: 98           	tya
 19139 08:4B03: 6B           	rtl
 19140                        ;	if (!(fp->flag & FA_READ))
 19141                        L10444:
 19142                        	.line	4399
 19143                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 19144 08:4B04: E2 20        	sep	#$20
 19145                        	longa	off
 19146 08:4B06: A0 10 00     	ldy	#$10
 19147 08:4B09: B7 30        	lda	[<L804+fp_0],Y
 19148 08:4B0B: 29 01        	and	#<$1
 19149 08:4B0D: C2 20        	rep	#$20
 19150                        	longa	on
 19151 08:4B0F: F0 03        	beq	L811
 19152 08:4B11: 82 06 00     	brl	L10445
 19153                        L811:
 19154                        	.line	4400
 19155 08:4B14: A9 07 00     	lda	#$7
 19156 08:4B17: 82 D8 FF     	brl	L810
 19157                        ;	remain = fp->obj.objsize - fp->fptr;
 19158                        L10445:
 19159                        	.line	4401
 19160 08:4B1A: 38           	sec
 19161 08:4B1B: A0 0C 00     	ldy	#$c
 19162 08:4B1E: B7 30        	lda	[<L804+fp_0],Y
 19163 08:4B20: A0 12 00     	ldy	#$12
 19164 08:4B23: F7 30        	sbc	[<L804+fp_0],Y
 19165 08:4B25: 85 1F        	sta	<L805+remain_1
 19166 08:4B27: A0 0E 00     	ldy	#$e
 19167 08:4B2A: B7 30        	lda	[<L804+fp_0],Y
 19168 08:4B2C: A0 14 00     	ldy	#$14
 19169 08:4B2F: F7 30        	sbc	[<L804+fp_0],Y
 19170 08:4B31: 85 21        	sta	<L805+remain_1+2
 19171                        ;	if (btr > remain)
 19172                        	.line	4402
 19173                        ;		btr = (UINT) remain; /* Truncate btr by 
                    remaining bytes */
 19174 08:4B33: A5 38        	lda	<L804+btr_0
 19175 08:4B35: 85 01        	sta	<R0
 19176 08:4B37: 64 03        	stz	<R0+2
 19177 08:4B39: A5 1F        	lda	<L805+remain_1
 19178 08:4B3B: C5 01        	cmp	<R0
 19179 08:4B3D: A5 21        	lda	<L805+remain_1+2
 19180 08:4B3F: E5 03        	sbc	<R0+2
 19181 08:4B41: 90 03        	bcc	L812
 19182 08:4B43: 82 04 00     	brl	L10446
 19183                        L812:
 19184                        	.line	4403
 19185 08:4B46: A5 1F        	lda	<L805+remain_1
 19186 08:4B48: 85 38        	sta	<L804+btr_0
 19187                        ;
 19188                        ;	for (; btr; /* Repeat until btr bytes read */
  Sat Jul 10 2021  1:15                                                Page 365


 19189                        L10446:
 19190                        	.line	4405
 19191 08:4B4A: 82 75 03     	brl	L10450
 19192                        ;	btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fpt
                    r += rcnt)
 19193                        L10449:
 19194                        ;	{
 19195                        	.line	4407
 19196                        ;		if (fp->fptr % SS(fs) == 0)
 19197                        	.line	4408
 19198                        ;		{ /* On the sector boundary? */
 19199 08:4B4D: A0 12 00     	ldy	#$12
 19200 08:4B50: B7 30        	lda	[<L804+fp_0],Y
 19201 08:4B52: 29 FF 01     	and	#<$1ff
 19202 08:4B55: F0 03        	beq	L813
 19203 08:4B57: 82 CA 02     	brl	L10451
 19204                        L813:
 19205                        	.line	4409
 19206                        ;			csect = (UINT) (fp->fptr / SS(fs
                    ) & (fs->csize - 1)); /* Sector offset in the cluster */
 19207                        	.line	4410
 19208 08:4B5A: A0 14 00     	ldy	#$14
 19209 08:4B5D: B7 30        	lda	[<L804+fp_0],Y
 19210 08:4B5F: 48           	pha
 19211 08:4B60: A0 12 00     	ldy	#$12
 19212 08:4B63: B7 30        	lda	[<L804+fp_0],Y
 19213 08:4B65: 48           	pha
 19214 08:4B66: A9 09 00     	lda	#$9
 19215                        	xref	~~~llsr
 19216 08:4B69: 22 xx xx xx  	jsl	~~~llsr
 19217 08:4B6D: 85 01        	sta	<R0
 19218 08:4B6F: 86 03        	stx	<R0+2
 19219 08:4B71: 18           	clc
 19220 08:4B72: A9 FF FF     	lda	#$ffff
 19221 08:4B75: A0 09 00     	ldy	#$9
 19222 08:4B78: 77 13        	adc	[<L805+fs_1],Y
 19223 08:4B7A: 85 05        	sta	<R1
 19224 08:4B7C: A0 00 00     	ldy	#$0
 19225 08:4B7F: A5 05        	lda	<R1
 19226 08:4B81: 10 01        	bpl	L814
 19227 08:4B83: 88           	dey
 19228                        L814:
 19229 08:4B84: 85 05        	sta	<R1
 19230 08:4B86: 84 07        	sty	<R1+2
 19231 08:4B88: A5 05        	lda	<R1
 19232 08:4B8A: 25 01        	and	<R0
 19233 08:4B8C: 85 09        	sta	<R2
 19234 08:4B8E: A5 07        	lda	<R1+2
 19235 08:4B90: 25 03        	and	<R0+2
 19236 08:4B92: 85 0B        	sta	<R2+2
 19237 08:4B94: A5 09        	lda	<R2
 19238 08:4B96: 85 27        	sta	<L805+csect_1
 19239                        ;			if (csect == 0)
 19240                        	.line	4411
 19241                        ;			{ /* On the cluster boundary? */
 19242 08:4B98: A5 27        	lda	<L805+csect_1
 19243 08:4B9A: F0 03        	beq	L815
 19244 08:4B9C: 82 88 00     	brl	L10452
  Sat Jul 10 2021  1:15                                                Page 366


 19245                        L815:
 19246                        	.line	4412
 19247                        ;				if (fp->fptr == 0)
 19248                        	.line	4413
 19249                        ;				{ /* On the top of the f
                    ile? */
 19250 08:4B9F: A0 12 00     	ldy	#$12
 19251 08:4BA2: B7 30        	lda	[<L804+fp_0],Y
 19252 08:4BA4: A0 14 00     	ldy	#$14
 19253 08:4BA7: 17 30        	ora	[<L804+fp_0],Y
 19254 08:4BA9: F0 03        	beq	L816
 19255 08:4BAB: 82 11 00     	brl	L10453
 19256                        L816:
 19257                        	.line	4414
 19258                        ;					clst = fp->obj.s
                    clust; /* Follow cluster chain from the origin */
 19259                        	.line	4415
 19260 08:4BAE: A0 08 00     	ldy	#$8
 19261 08:4BB1: B7 30        	lda	[<L804+fp_0],Y
 19262 08:4BB3: 85 17        	sta	<L805+clst_1
 19263 08:4BB5: A0 0A 00     	ldy	#$a
 19264 08:4BB8: B7 30        	lda	[<L804+fp_0],Y
 19265 08:4BBA: 85 19        	sta	<L805+clst_1+2
 19266                        ;				}
 19267                        	.line	4416
 19268                        ;				else
 19269 08:4BBC: 82 18 00     	brl	L10454
 19270                        L10453:
 19271                        ;				{ /* Middle or end of th
                    e file */
 19272                        	.line	4418
 19273                        ;#if FF_USE_FASTSEEK
 19274                        ;					if (fp->cltbl)
 19275                        ;					{
 19276                        ;						clst = c
                    lmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
 19277                        ;					}
 19278                        ;					else
 19279                        ;#endif
 19280                        ;					{
 19281                        	.line	4426
 19282                        ;						clst = g
                    et_fat(&fp->obj, fp->clust); /* Follow cluster chain on the 
                    FAT */
 19283                        	.line	4427
 19284 08:4BBF: A0 18 00     	ldy	#$18
 19285 08:4BC2: B7 30        	lda	[<L804+fp_0],Y
 19286 08:4BC4: 48           	pha
 19287 08:4BC5: A0 16 00     	ldy	#$16
 19288 08:4BC8: B7 30        	lda	[<L804+fp_0],Y
 19289 08:4BCA: 48           	pha
 19290 08:4BCB: D4 32        	pei	<L804+fp_0+2
 19291 08:4BCD: D4 30        	pei	<L804+fp_0
 19292 08:4BCF: 22 54 0B 08  	jsl	~~get_fat
 19293 08:4BD3: 85 17        	sta	<L805+clst_1
 19294 08:4BD5: 86 19        	stx	<L805+clst_1+2
 19295                        ;					}
 19296                        	.line	4428
  Sat Jul 10 2021  1:15                                                Page 367


 19297                        ;				}
 19298                        	.line	4429
 19299                        L10454:
 19300                        ;				if (clst < 2)
 19301                        	.line	4430
 19302                        ;					ABORT(fs, FR_INT
                    _ERR);
 19303 08:4BD7: A5 17        	lda	<L805+clst_1
 19304 08:4BD9: C9 02 00     	cmp	#<$2
 19305 08:4BDC: A5 19        	lda	<L805+clst_1+2
 19306 08:4BDE: E9 00 00     	sbc	#^$2
 19307 08:4BE1: 90 03        	bcc	L817
 19308 08:4BE3: 82 11 00     	brl	L10455
 19309                        L817:
 19310                        	.line	4431
 19311                        	.line	4431
 19312 08:4BE6: E2 20        	sep	#$20
 19313                        	longa	off
 19314 08:4BE8: A9 02        	lda	#$2
 19315 08:4BEA: A0 11 00     	ldy	#$11
 19316 08:4BED: 97 30        	sta	[<L804+fp_0],Y
 19317 08:4BEF: C2 20        	rep	#$20
 19318                        	longa	on
 19319                        	.line	4431
 19320 08:4BF1: A9 02 00     	lda	#$2
 19321 08:4BF4: 82 FB FE     	brl	L810
 19322                        	.line	4431
 19323                        L10455:
 19324                        	.line	4431
 19325                        ;				if (clst == 0xFFFFFFFF)
 19326                        	.line	4432
 19327                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 19328 08:4BF7: A5 17        	lda	<L805+clst_1
 19329 08:4BF9: C9 FF FF     	cmp	#<$ffffffff
 19330 08:4BFC: D0 05        	bne	L818
 19331 08:4BFE: A5 19        	lda	<L805+clst_1+2
 19332 08:4C00: C9 FF FF     	cmp	#^$ffffffff
 19333                        L818:
 19334 08:4C03: F0 03        	beq	L819
 19335 08:4C05: 82 11 00     	brl	L10456
 19336                        L819:
 19337                        	.line	4433
 19338                        	.line	4433
 19339 08:4C08: E2 20        	sep	#$20
 19340                        	longa	off
 19341 08:4C0A: A9 01        	lda	#$1
 19342 08:4C0C: A0 11 00     	ldy	#$11
 19343 08:4C0F: 97 30        	sta	[<L804+fp_0],Y
 19344 08:4C11: C2 20        	rep	#$20
 19345                        	longa	on
 19346                        	.line	4433
 19347 08:4C13: A9 01 00     	lda	#$1
 19348 08:4C16: 82 D9 FE     	brl	L810
 19349                        	.line	4433
 19350                        L10456:
 19351                        	.line	4433
 19352                        ;				fp->clust = clst; /* Upd
  Sat Jul 10 2021  1:15                                                Page 368


                    ate current cluster */
 19353                        	.line	4434
 19354 08:4C19: A5 17        	lda	<L805+clst_1
 19355 08:4C1B: A0 16 00     	ldy	#$16
 19356 08:4C1E: 97 30        	sta	[<L804+fp_0],Y
 19357 08:4C20: A5 19        	lda	<L805+clst_1+2
 19358 08:4C22: A0 18 00     	ldy	#$18
 19359 08:4C25: 97 30        	sta	[<L804+fp_0],Y
 19360                        ;			}
 19361                        	.line	4435
 19362                        ;			sect = clst2sect(fs, fp->clust);
                     /* Get current sector */
 19363                        L10452:
 19364                        	.line	4436
 19365 08:4C27: A0 18 00     	ldy	#$18
 19366 08:4C2A: B7 30        	lda	[<L804+fp_0],Y
 19367 08:4C2C: 48           	pha
 19368 08:4C2D: A0 16 00     	ldy	#$16
 19369 08:4C30: B7 30        	lda	[<L804+fp_0],Y
 19370 08:4C32: 48           	pha
 19371 08:4C33: D4 15        	pei	<L805+fs_1+2
 19372 08:4C35: D4 13        	pei	<L805+fs_1
 19373 08:4C37: 22 C5 0A 08  	jsl	~~clst2sect
 19374 08:4C3B: 85 1B        	sta	<L805+sect_1
 19375 08:4C3D: 86 1D        	stx	<L805+sect_1+2
 19376                        ;			if (sect == 0)
 19377                        	.line	4437
 19378                        ;				ABORT(fs, FR_INT_ERR);
 19379 08:4C3F: A5 1B        	lda	<L805+sect_1
 19380 08:4C41: 05 1D        	ora	<L805+sect_1+2
 19381 08:4C43: F0 03        	beq	L820
 19382 08:4C45: 82 11 00     	brl	L10457
 19383                        L820:
 19384                        	.line	4438
 19385                        	.line	4438
 19386 08:4C48: E2 20        	sep	#$20
 19387                        	longa	off
 19388 08:4C4A: A9 02        	lda	#$2
 19389 08:4C4C: A0 11 00     	ldy	#$11
 19390 08:4C4F: 97 30        	sta	[<L804+fp_0],Y
 19391 08:4C51: C2 20        	rep	#$20
 19392                        	longa	on
 19393                        	.line	4438
 19394 08:4C53: A9 02 00     	lda	#$2
 19395 08:4C56: 82 99 FE     	brl	L810
 19396                        	.line	4438
 19397                        L10457:
 19398                        	.line	4438
 19399                        ;			sect += csect;
 19400                        	.line	4439
 19401 08:4C59: A5 27        	lda	<L805+csect_1
 19402 08:4C5B: 85 01        	sta	<R0
 19403 08:4C5D: 64 03        	stz	<R0+2
 19404 08:4C5F: 18           	clc
 19405 08:4C60: A5 01        	lda	<R0
 19406 08:4C62: 65 1B        	adc	<L805+sect_1
 19407 08:4C64: 85 1B        	sta	<L805+sect_1
 19408 08:4C66: A5 03        	lda	<R0+2
  Sat Jul 10 2021  1:15                                                Page 369


 19409 08:4C68: 65 1D        	adc	<L805+sect_1+2
 19410 08:4C6A: 85 1D        	sta	<L805+sect_1+2
 19411                        ;			cc = btr / SS(fs); /* When remai
                    ning bytes >= sector size, */
 19412                        	.line	4440
 19413 08:4C6C: A5 38        	lda	<L804+btr_0
 19414 08:4C6E: A2 09 00     	ldx	#<$9
 19415                        	xref	~~~lsr
 19416 08:4C71: 22 xx xx xx  	jsl	~~~lsr
 19417 08:4C75: 85 25        	sta	<L805+cc_1
 19418                        ;			if (cc > 0)
 19419                        	.line	4441
 19420                        ;			{ /* Read maximum contiguous sec
                    tors directly */
 19421 08:4C77: A9 00 00     	lda	#$0
 19422 08:4C7A: C5 25        	cmp	<L805+cc_1
 19423 08:4C7C: 90 03        	bcc	L821
 19424 08:4C7E: 82 D9 00     	brl	L10458
 19425                        L821:
 19426                        	.line	4442
 19427                        ;				if (csect + cc > fs->csi
                    ze)
 19428                        	.line	4443
 19429                        ;				{ /* Clip at cluster bou
                    ndary */
 19430 08:4C81: 18           	clc
 19431 08:4C82: A5 27        	lda	<L805+csect_1
 19432 08:4C84: 65 25        	adc	<L805+cc_1
 19433 08:4C86: 85 01        	sta	<R0
 19434 08:4C88: A0 09 00     	ldy	#$9
 19435 08:4C8B: B7 13        	lda	[<L805+fs_1],Y
 19436 08:4C8D: C5 01        	cmp	<R0
 19437 08:4C8F: 90 03        	bcc	L822
 19438 08:4C91: 82 0A 00     	brl	L10459
 19439                        L822:
 19440                        	.line	4444
 19441                        ;					cc = fs->csize -
                     csect;
 19442                        	.line	4445
 19443 08:4C94: 38           	sec
 19444 08:4C95: A0 09 00     	ldy	#$9
 19445 08:4C98: B7 13        	lda	[<L805+fs_1],Y
 19446 08:4C9A: E5 27        	sbc	<L805+csect_1
 19447 08:4C9C: 85 25        	sta	<L805+cc_1
 19448                        ;				}
 19449                        	.line	4446
 19450                        ;				if (disk_read(fs->pdrv, 
                    rbuff, sect, cc) != RES_OK)
 19451                        L10459:
 19452                        	.line	4447
 19453                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 19454 08:4C9E: D4 25        	pei	<L805+cc_1
 19455 08:4CA0: D4 1D        	pei	<L805+sect_1+2
 19456 08:4CA2: D4 1B        	pei	<L805+sect_1
 19457 08:4CA4: D4 2B        	pei	<L805+rbuff_1+2
 19458 08:4CA6: D4 29        	pei	<L805+rbuff_1
 19459 08:4CA8: A0 01 00     	ldy	#$1
  Sat Jul 10 2021  1:15                                                Page 370


 19460 08:4CAB: B7 13        	lda	[<L805+fs_1],Y
 19461 08:4CAD: 48           	pha
 19462 08:4CAE: 22 xx xx xx  	jsl	~~disk_read
 19463 08:4CB2: AA           	tax
 19464 08:4CB3: D0 03        	bne	L823
 19465 08:4CB5: 82 11 00     	brl	L10460
 19466                        L823:
 19467                        	.line	4448
 19468                        	.line	4448
 19469 08:4CB8: E2 20        	sep	#$20
 19470                        	longa	off
 19471 08:4CBA: A9 01        	lda	#$1
 19472 08:4CBC: A0 11 00     	ldy	#$11
 19473 08:4CBF: 97 30        	sta	[<L804+fp_0],Y
 19474 08:4CC1: C2 20        	rep	#$20
 19475                        	longa	on
 19476                        	.line	4448
 19477 08:4CC3: A9 01 00     	lda	#$1
 19478 08:4CC6: 82 29 FE     	brl	L810
 19479                        	.line	4448
 19480                        L10460:
 19481                        	.line	4448
 19482                        ;#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2	
                    	/* Replace one of the read sectors with cached data if i
                    t contains a dirty sector */
 19483                        ;#if FF_FS_TINY
 19484                        ;				if (fs->wflag && fs->win
                    sect - sect < cc)
 19485                        ;				{
 19486                        ;					mem_cpy(rbuff + 
                    ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
 19487                        ;				}
 19488                        ;#else
 19489                        ;				if ((fp->flag & FA_DIRTY
                    ) && fp->sect - sect < cc)
 19490                        	.line	4456
 19491                        ;				{
 19492 08:4CC9: E2 20        	sep	#$20
 19493                        	longa	off
 19494 08:4CCB: A0 10 00     	ldy	#$10
 19495 08:4CCE: B7 30        	lda	[<L804+fp_0],Y
 19496 08:4CD0: 29 80        	and	#<$80
 19497 08:4CD2: C2 20        	rep	#$20
 19498                        	longa	on
 19499 08:4CD4: D0 03        	bne	L824
 19500 08:4CD6: 82 73 00     	brl	L10461
 19501                        L824:
 19502 08:4CD9: A5 25        	lda	<L805+cc_1
 19503 08:4CDB: 85 01        	sta	<R0
 19504 08:4CDD: 64 03        	stz	<R0+2
 19505 08:4CDF: 38           	sec
 19506 08:4CE0: A0 1A 00     	ldy	#$1a
 19507 08:4CE3: B7 30        	lda	[<L804+fp_0],Y
 19508 08:4CE5: E5 1B        	sbc	<L805+sect_1
 19509 08:4CE7: 85 05        	sta	<R1
 19510 08:4CE9: A0 1C 00     	ldy	#$1c
 19511 08:4CEC: B7 30        	lda	[<L804+fp_0],Y
 19512 08:4CEE: E5 1D        	sbc	<L805+sect_1+2
  Sat Jul 10 2021  1:15                                                Page 371


 19513 08:4CF0: 85 07        	sta	<R1+2
 19514 08:4CF2: A5 05        	lda	<R1
 19515 08:4CF4: C5 01        	cmp	<R0
 19516 08:4CF6: A5 07        	lda	<R1+2
 19517 08:4CF8: E5 03        	sbc	<R0+2
 19518 08:4CFA: 90 03        	bcc	L825
 19519 08:4CFC: 82 4D 00     	brl	L10461
 19520                        L825:
 19521                        	.line	4457
 19522                        ;					mem_cpy(rbuff + 
                    ((fp->sect - sect) * SS(fs)), fp->buf,
 19523                        	.line	4458
 19524                        ;							
                    SS(fs));
 19525 08:4CFF: F4 00 02     	pea	#<$200
 19526 08:4D02: 18           	clc
 19527 08:4D03: A9 26 00     	lda	#$26
 19528 08:4D06: 65 30        	adc	<L804+fp_0
 19529 08:4D08: 85 01        	sta	<R0
 19530 08:4D0A: A9 00 00     	lda	#$0
 19531 08:4D0D: 65 32        	adc	<L804+fp_0+2
 19532 08:4D0F: 85 03        	sta	<R0+2
 19533 08:4D11: D4 03        	pei	<R0+2
 19534 08:4D13: D4 01        	pei	<R0
 19535 08:4D15: 38           	sec
 19536 08:4D16: A0 1A 00     	ldy	#$1a
 19537 08:4D19: B7 30        	lda	[<L804+fp_0],Y
 19538 08:4D1B: E5 1B        	sbc	<L805+sect_1
 19539 08:4D1D: 85 09        	sta	<R2
 19540 08:4D1F: A0 1C 00     	ldy	#$1c
 19541 08:4D22: B7 30        	lda	[<L804+fp_0],Y
 19542 08:4D24: E5 1D        	sbc	<L805+sect_1+2
 19543 08:4D26: 85 0B        	sta	<R2+2
 19544 08:4D28: D4 0B        	pei	<R2+2
 19545 08:4D2A: D4 09        	pei	<R2
 19546 08:4D2C: A9 09 00     	lda	#$9
 19547                        	xref	~~~lasl
 19548 08:4D2F: 22 xx xx xx  	jsl	~~~lasl
 19549 08:4D33: 85 05        	sta	<R1
 19550 08:4D35: 86 07        	stx	<R1+2
 19551 08:4D37: 18           	clc
 19552 08:4D38: A5 29        	lda	<L805+rbuff_1
 19553 08:4D3A: 65 05        	adc	<R1
 19554 08:4D3C: 85 0D        	sta	<R3
 19555 08:4D3E: A5 2B        	lda	<L805+rbuff_1+2
 19556 08:4D40: 65 07        	adc	<R1+2
 19557 08:4D42: 85 0F        	sta	<R3+2
 19558 08:4D44: D4 0F        	pei	<R3+2
 19559 08:4D46: D4 0D        	pei	<R3
 19560 08:4D48: 22 93 01 08  	jsl	~~mem_cpy
 19561                        ;				}
 19562                        	.line	4460
 19563                        ;#endif
 19564                        ;#endif
 19565                        ;				rcnt = SS(fs) * cc; /* N
                    umber of bytes transferred */
 19566                        L10461:
 19567                        	.line	4463
  Sat Jul 10 2021  1:15                                                Page 372


 19568 08:4D4C: A5 25        	lda	<L805+cc_1
 19569 08:4D4E: A2 09 00     	ldx	#<$9
 19570                        	xref	~~~asl
 19571 08:4D51: 22 xx xx xx  	jsl	~~~asl
 19572 08:4D55: 85 23        	sta	<L805+rcnt_1
 19573                        ;				continue;
 19574                        	.line	4464
 19575 08:4D57: 82 1F 01     	brl	L10447
 19576                        ;			}
 19577                        	.line	4465
 19578                        ;#if !FF_FS_TINY
 19579                        ;			if (fp->sect != sect)
 19580                        L10458:
 19581                        	.line	4467
 19582                        ;			{ /* Load data sector if not in 
                    cache */
 19583 08:4D5A: A0 1A 00     	ldy	#$1a
 19584 08:4D5D: B7 30        	lda	[<L804+fp_0],Y
 19585 08:4D5F: C5 1B        	cmp	<L805+sect_1
 19586 08:4D61: D0 07        	bne	L826
 19587 08:4D63: A0 1C 00     	ldy	#$1c
 19588 08:4D66: B7 30        	lda	[<L804+fp_0],Y
 19589 08:4D68: C5 1D        	cmp	<L805+sect_1+2
 19590                        L826:
 19591 08:4D6A: D0 03        	bne	L827
 19592 08:4D6C: 82 A7 00     	brl	L10462
 19593                        L827:
 19594                        	.line	4468
 19595                        ;#if !FF_FS_READONLY
 19596                        ;				if (fp->flag & FA_DIRTY)
 19597                        	.line	4470
 19598                        ;				{ /* Write-back dirty se
                    ctor cache */
 19599 08:4D6F: E2 20        	sep	#$20
 19600                        	longa	off
 19601 08:4D71: A0 10 00     	ldy	#$10
 19602 08:4D74: B7 30        	lda	[<L804+fp_0],Y
 19603 08:4D76: 29 80        	and	#<$80
 19604 08:4D78: C2 20        	rep	#$20
 19605                        	longa	on
 19606 08:4D7A: D0 03        	bne	L828
 19607 08:4D7C: 82 5C 00     	brl	L10463
 19608                        L828:
 19609                        	.line	4471
 19610                        ;					if (disk_write(f
                    s->pdrv, fp->buf, fp->sect, 1) != RES_OK)
 19611                        	.line	4472
 19612                        ;						ABORT(fs
                    , FR_DISK_ERR);
 19613 08:4D7F: F4 01 00     	pea	#<$1
 19614 08:4D82: A0 1C 00     	ldy	#$1c
 19615 08:4D85: B7 30        	lda	[<L804+fp_0],Y
 19616 08:4D87: 48           	pha
 19617 08:4D88: A0 1A 00     	ldy	#$1a
 19618 08:4D8B: B7 30        	lda	[<L804+fp_0],Y
 19619 08:4D8D: 48           	pha
 19620 08:4D8E: 18           	clc
 19621 08:4D8F: A9 26 00     	lda	#$26
  Sat Jul 10 2021  1:15                                                Page 373


 19622 08:4D92: 65 30        	adc	<L804+fp_0
 19623 08:4D94: 85 01        	sta	<R0
 19624 08:4D96: A9 00 00     	lda	#$0
 19625 08:4D99: 65 32        	adc	<L804+fp_0+2
 19626 08:4D9B: 85 03        	sta	<R0+2
 19627 08:4D9D: D4 03        	pei	<R0+2
 19628 08:4D9F: D4 01        	pei	<R0
 19629 08:4DA1: A0 01 00     	ldy	#$1
 19630 08:4DA4: B7 13        	lda	[<L805+fs_1],Y
 19631 08:4DA6: 48           	pha
 19632 08:4DA7: 22 xx xx xx  	jsl	~~disk_write
 19633 08:4DAB: AA           	tax
 19634 08:4DAC: D0 03        	bne	L829
 19635 08:4DAE: 82 11 00     	brl	L10464
 19636                        L829:
 19637                        	.line	4473
 19638                        	.line	4473
 19639 08:4DB1: E2 20        	sep	#$20
 19640                        	longa	off
 19641 08:4DB3: A9 01        	lda	#$1
 19642 08:4DB5: A0 11 00     	ldy	#$11
 19643 08:4DB8: 97 30        	sta	[<L804+fp_0],Y
 19644 08:4DBA: C2 20        	rep	#$20
 19645                        	longa	on
 19646                        	.line	4473
 19647 08:4DBC: A9 01 00     	lda	#$1
 19648 08:4DBF: 82 30 FD     	brl	L810
 19649                        	.line	4473
 19650                        L10464:
 19651                        	.line	4473
 19652                        ;					fp->flag &= (BYT
                    E) ~FA_DIRTY;
 19653                        	.line	4474
 19654 08:4DC2: 18           	clc
 19655 08:4DC3: A9 10 00     	lda	#$10
 19656 08:4DC6: 65 30        	adc	<L804+fp_0
 19657 08:4DC8: 85 01        	sta	<R0
 19658 08:4DCA: A9 00 00     	lda	#$0
 19659 08:4DCD: 65 32        	adc	<L804+fp_0+2
 19660 08:4DCF: 85 03        	sta	<R0+2
 19661 08:4DD1: E2 20        	sep	#$20
 19662                        	longa	off
 19663 08:4DD3: A7 01        	lda	[<R0]
 19664 08:4DD5: 29 7F        	and	#<$7f
 19665 08:4DD7: 87 01        	sta	[<R0]
 19666 08:4DD9: C2 20        	rep	#$20
 19667                        	longa	on
 19668                        ;				}
 19669                        	.line	4475
 19670                        ;#endif
 19671                        ;				if (disk_read(fs->pdrv, 
                    fp->buf, sect, 1) != RES_OK)
 19672                        L10463:
 19673                        	.line	4477
 19674                        ;					ABORT(fs, FR_DIS
                    K_ERR); /* Fill sector cache */
 19675 08:4DDB: F4 01 00     	pea	#<$1
 19676 08:4DDE: D4 1D        	pei	<L805+sect_1+2
  Sat Jul 10 2021  1:15                                                Page 374


 19677 08:4DE0: D4 1B        	pei	<L805+sect_1
 19678 08:4DE2: 18           	clc
 19679 08:4DE3: A9 26 00     	lda	#$26
 19680 08:4DE6: 65 30        	adc	<L804+fp_0
 19681 08:4DE8: 85 01        	sta	<R0
 19682 08:4DEA: A9 00 00     	lda	#$0
 19683 08:4DED: 65 32        	adc	<L804+fp_0+2
 19684 08:4DEF: 85 03        	sta	<R0+2
 19685 08:4DF1: D4 03        	pei	<R0+2
 19686 08:4DF3: D4 01        	pei	<R0
 19687 08:4DF5: A0 01 00     	ldy	#$1
 19688 08:4DF8: B7 13        	lda	[<L805+fs_1],Y
 19689 08:4DFA: 48           	pha
 19690 08:4DFB: 22 xx xx xx  	jsl	~~disk_read
 19691 08:4DFF: AA           	tax
 19692 08:4E00: D0 03        	bne	L830
 19693 08:4E02: 82 11 00     	brl	L10465
 19694                        L830:
 19695                        	.line	4478
 19696                        	.line	4478
 19697 08:4E05: E2 20        	sep	#$20
 19698                        	longa	off
 19699 08:4E07: A9 01        	lda	#$1
 19700 08:4E09: A0 11 00     	ldy	#$11
 19701 08:4E0C: 97 30        	sta	[<L804+fp_0],Y
 19702 08:4E0E: C2 20        	rep	#$20
 19703                        	longa	on
 19704                        	.line	4478
 19705 08:4E10: A9 01 00     	lda	#$1
 19706 08:4E13: 82 DC FC     	brl	L810
 19707                        	.line	4478
 19708                        L10465:
 19709                        	.line	4478
 19710                        ;			}
 19711                        	.line	4479
 19712                        ;#endif
 19713                        ;			fp->sect = sect;
 19714                        L10462:
 19715                        	.line	4481
 19716 08:4E16: A5 1B        	lda	<L805+sect_1
 19717 08:4E18: A0 1A 00     	ldy	#$1a
 19718 08:4E1B: 97 30        	sta	[<L804+fp_0],Y
 19719 08:4E1D: A5 1D        	lda	<L805+sect_1+2
 19720 08:4E1F: A0 1C 00     	ldy	#$1c
 19721 08:4E22: 97 30        	sta	[<L804+fp_0],Y
 19722                        ;		}
 19723                        	.line	4482
 19724                        ;		rcnt = SS(fs) - (UINT) fp->fptr % SS(fs)
                    ; /* Number of bytes remains in the sector */
 19725                        L10451:
 19726                        	.line	4483
 19727 08:4E24: A0 12 00     	ldy	#$12
 19728 08:4E27: B7 30        	lda	[<L804+fp_0],Y
 19729 08:4E29: 29 FF 01     	and	#<$1ff
 19730 08:4E2C: 85 01        	sta	<R0
 19731 08:4E2E: 38           	sec
 19732 08:4E2F: A9 00 02     	lda	#$200
 19733 08:4E32: E5 01        	sbc	<R0
  Sat Jul 10 2021  1:15                                                Page 375


 19734 08:4E34: 85 23        	sta	<L805+rcnt_1
 19735                        ;		if (rcnt > btr)
 19736                        	.line	4484
 19737                        ;			rcnt = btr; /* Clip it by btr if
                     needed */
 19738 08:4E36: A5 38        	lda	<L804+btr_0
 19739 08:4E38: C5 23        	cmp	<L805+rcnt_1
 19740 08:4E3A: 90 03        	bcc	L831
 19741 08:4E3C: 82 04 00     	brl	L10466
 19742                        L831:
 19743                        	.line	4485
 19744 08:4E3F: A5 38        	lda	<L804+btr_0
 19745 08:4E41: 85 23        	sta	<L805+rcnt_1
 19746                        ;#if FF_FS_TINY
 19747                        ;		if (move_window(fs, fp->sect) != FR_OK) 
                    ABORT(fs, FR_DISK_ERR); /* Move sector window */
 19748                        ;		mem_cpy(rbuff, fs->win + fp->fptr % SS(f
                    s), rcnt); /* Extract partial sector */
 19749                        ;#else
 19750                        ;		mem_cpy(rbuff, fp->buf + fp->fptr % SS(f
                    s), rcnt); /* Extract partial sector */
 19751                        L10466:
 19752                        	.line	4490
 19753 08:4E43: D4 23        	pei	<L805+rcnt_1
 19754 08:4E45: A0 12 00     	ldy	#$12
 19755 08:4E48: B7 30        	lda	[<L804+fp_0],Y
 19756 08:4E4A: 29 FF 01     	and	#<$1ff
 19757 08:4E4D: 85 01        	sta	<R0
 19758 08:4E4F: 64 03        	stz	<R0+2
 19759 08:4E51: 18           	clc
 19760 08:4E52: A9 26 00     	lda	#$26
 19761 08:4E55: 65 01        	adc	<R0
 19762 08:4E57: 85 05        	sta	<R1
 19763 08:4E59: A9 00 00     	lda	#$0
 19764 08:4E5C: 65 03        	adc	<R0+2
 19765 08:4E5E: 85 07        	sta	<R1+2
 19766 08:4E60: 18           	clc
 19767 08:4E61: A5 30        	lda	<L804+fp_0
 19768 08:4E63: 65 05        	adc	<R1
 19769 08:4E65: 85 01        	sta	<R0
 19770 08:4E67: A5 32        	lda	<L804+fp_0+2
 19771 08:4E69: 65 07        	adc	<R1+2
 19772 08:4E6B: 85 03        	sta	<R0+2
 19773 08:4E6D: D4 03        	pei	<R0+2
 19774 08:4E6F: D4 01        	pei	<R0
 19775 08:4E71: D4 2B        	pei	<L805+rbuff_1+2
 19776 08:4E73: D4 29        	pei	<L805+rbuff_1
 19777 08:4E75: 22 93 01 08  	jsl	~~mem_cpy
 19778                        ;#endif
 19779                        ;	}
 19780                        	.line	4492
 19781                        L10447:
 19782 08:4E79: 38           	sec
 19783 08:4E7A: A5 38        	lda	<L804+btr_0
 19784 08:4E7C: E5 23        	sbc	<L805+rcnt_1
 19785 08:4E7E: 85 38        	sta	<L804+btr_0
 19786 08:4E80: 18           	clc
 19787 08:4E81: A7 3A        	lda	[<L804+br_0]
  Sat Jul 10 2021  1:15                                                Page 376


 19788 08:4E83: 65 23        	adc	<L805+rcnt_1
 19789 08:4E85: 87 3A        	sta	[<L804+br_0]
 19790 08:4E87: A5 23        	lda	<L805+rcnt_1
 19791 08:4E89: 85 01        	sta	<R0
 19792 08:4E8B: 64 03        	stz	<R0+2
 19793 08:4E8D: 18           	clc
 19794 08:4E8E: A5 29        	lda	<L805+rbuff_1
 19795 08:4E90: 65 01        	adc	<R0
 19796 08:4E92: 85 29        	sta	<L805+rbuff_1
 19797 08:4E94: A5 2B        	lda	<L805+rbuff_1+2
 19798 08:4E96: 65 03        	adc	<R0+2
 19799 08:4E98: 85 2B        	sta	<L805+rbuff_1+2
 19800 08:4E9A: 18           	clc
 19801 08:4E9B: A9 12 00     	lda	#$12
 19802 08:4E9E: 65 30        	adc	<L804+fp_0
 19803 08:4EA0: 85 01        	sta	<R0
 19804 08:4EA2: A9 00 00     	lda	#$0
 19805 08:4EA5: 65 32        	adc	<L804+fp_0+2
 19806 08:4EA7: 85 03        	sta	<R0+2
 19807 08:4EA9: A5 23        	lda	<L805+rcnt_1
 19808 08:4EAB: 85 05        	sta	<R1
 19809 08:4EAD: 64 07        	stz	<R1+2
 19810 08:4EAF: 18           	clc
 19811 08:4EB0: A5 05        	lda	<R1
 19812 08:4EB2: 67 01        	adc	[<R0]
 19813 08:4EB4: 87 01        	sta	[<R0]
 19814 08:4EB6: A5 07        	lda	<R1+2
 19815 08:4EB8: A0 02 00     	ldy	#$2
 19816 08:4EBB: 77 01        	adc	[<R0],Y
 19817 08:4EBD: A0 02 00     	ldy	#$2
 19818 08:4EC0: 97 01        	sta	[<R0],Y
 19819                        L10450:
 19820 08:4EC2: A5 38        	lda	<L804+btr_0
 19821 08:4EC4: F0 03        	beq	L832
 19822 08:4EC6: 82 84 FC     	brl	L10449
 19823                        L832:
 19824                        L10448:
 19825                        ;
 19826                        ;	LEAVE_FF(fs, FR_OK);
 19827                        	.line	4494
 19828 08:4EC9: A9 00 00     	lda	#$0
 19829 08:4ECC: 82 23 FC     	brl	L810
 19830                        ;}
 19831                        	.line	4495
 19832                        	.endblock	4495
 19833             0000002C   L804	equ	44
 19834             00000011   L805	equ	17
 19835 08:4ECF:              	ends
 19836                        	efunc
 19837                        	.endfunc	4495,17,44
 19838                        	.line	4495
 19839                        ;
 19840                        ;#if !FF_FS_READONLY
 19841                        ;/*-----------------------------------------------
                    ------------------------*/
 19842                        ;/* Write File                                    
                                            */
 19843                        ;/*-----------------------------------------------
  Sat Jul 10 2021  1:15                                                Page 377


                    ------------------------*/
 19844                        ;
 19845                        ;FRESULT f_write(FIL* fp, /* Pointer to the file o
                    bject */
 19846                        ;const void* buff, /* Pointer to the data to be wr
                    itten */
 19847                        ;UINT btw, /* Number of bytes to write */
 19848                        ;UINT* bw /* Pointer to number of bytes written */
 19849                        ;)
 19850                        ;{
 19851                        	.line	4502
 19852                        	.line	4507
 19853                        	FFDOS
 19854                        	xdef	~~f_write
 19855                        	func
 19856                        	.function	4507
 19857                        ~~f_write:
 19858                        	longa	on
 19859                        	longi	on
 19860 08:4ECF: 3B           	tsc
 19861 08:4ED0: 38           	sec
 19862 08:4ED1: E9 24 00     	sbc	#L833
 19863 08:4ED4: 1B           	tcs
 19864 08:4ED5: 0B           	phd
 19865 08:4ED6: 5B           	tcd
 19866             00000004   fp_0	set	4
 19867             00000008   buff_0	set	8
 19868             0000000C   btw_0	set	12
 19869             0000000E   bw_0	set	14
 19870                        	.block	4507
 19871                        ;	FRESULT res;
 19872                        ;	FATFS *fs;
 19873                        ;	DWORD clst;
 19874                        ;	LBA_t sect;
 19875                        ;	UINT wcnt, cc, csect;
 19876                        ;	const BYTE *wbuff = (const BYTE*) buff;
 19877                        ;
 19878                        ;	*bw = 0; /* Clear write byte counter */
 19879             00000000   res_1	set	0
 19880             00000002   fs_1	set	2
 19881             00000006   clst_1	set	6
 19882             0000000A   sect_1	set	10
 19883             0000000E   wcnt_1	set	14
 19884             00000010   cc_1	set	16
 19885             00000012   csect_1	set	18
 19886             00000014   wbuff_1	set	20
 19887                        	.sym	res,0,5,1,16
 19888                        	.sym	fs,2,138,1,32,72
 19889                        	.sym	clst,6,18,1,32
 19890                        	.sym	sect,10,18,1,32
 19891                        	.sym	wcnt,14,16,1,16
 19892                        	.sym	cc,16,16,1,16
 19893                        	.sym	csect,18,16,1,16
 19894                        	.sym	wbuff,20,142,1,32
 19895                        	.sym	fp,4,138,6,32,74
 19896                        	.sym	buff,8,129,6,32
 19897                        	.sym	btw,12,16,6,16
 19898                        	.sym	bw,14,144,6,32
  Sat Jul 10 2021  1:15                                                Page 378


 19899 08:4ED7: A5 2C        	lda	<L833+buff_0
 19900 08:4ED9: 85 21        	sta	<L834+wbuff_1
 19901 08:4EDB: A5 2E        	lda	<L833+buff_0+2
 19902 08:4EDD: 85 23        	sta	<L834+wbuff_1+2
 19903                        	.line	4515
 19904 08:4EDF: A9 00 00     	lda	#$0
 19905 08:4EE2: 87 32        	sta	[<L833+bw_0]
 19906                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 19907                        	.line	4516
 19908 08:4EE4: F4 00 00     	pea	#0
 19909 08:4EE7: 18           	clc
 19910 08:4EE8: 7B           	tdc
 19911 08:4EE9: 69 0F 00     	adc	#<L834+fs_1
 19912 08:4EEC: 48           	pha
 19913 08:4EED: D4 2A        	pei	<L833+fp_0+2
 19914 08:4EEF: D4 28        	pei	<L833+fp_0
 19915 08:4EF1: 22 8B 44 08  	jsl	~~validate
 19916 08:4EF5: 85 0D        	sta	<L834+res_1
 19917                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 19918                        	.line	4517
 19919                        ;		LEAVE_FF(fs, res); /* Check validity */
 19920 08:4EF7: A5 0D        	lda	<L834+res_1
 19921 08:4EF9: F0 03        	beq	L837
 19922 08:4EFB: 82 11 00     	brl	L836
 19923                        L837:
 19924 08:4EFE: A0 11 00     	ldy	#$11
 19925 08:4F01: B7 28        	lda	[<L833+fp_0],Y
 19926 08:4F03: 29 FF 00     	and	#$ff
 19927 08:4F06: 85 0D        	sta	<L834+res_1
 19928 08:4F08: A5 0D        	lda	<L834+res_1
 19929 08:4F0A: D0 03        	bne	L838
 19930 08:4F0C: 82 14 00     	brl	L10467
 19931                        L838:
 19932                        L836:
 19933                        	.line	4518
 19934 08:4F0F: A5 0D        	lda	<L834+res_1
 19935                        L839:
 19936 08:4F11: A8           	tay
 19937 08:4F12: A5 26        	lda	<L833+2
 19938 08:4F14: 85 34        	sta	<L833+2+14
 19939 08:4F16: A5 25        	lda	<L833+1
 19940 08:4F18: 85 33        	sta	<L833+1+14
 19941 08:4F1A: 2B           	pld
 19942 08:4F1B: 3B           	tsc
 19943 08:4F1C: 18           	clc
 19944 08:4F1D: 69 32 00     	adc	#L833+14
 19945 08:4F20: 1B           	tcs
 19946 08:4F21: 98           	tya
 19947 08:4F22: 6B           	rtl
 19948                        ;	if (!(fp->flag & FA_WRITE))
 19949                        L10467:
 19950                        	.line	4519
 19951                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 19952 08:4F23: E2 20        	sep	#$20
 19953                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 379


 19954 08:4F25: A0 10 00     	ldy	#$10
 19955 08:4F28: B7 28        	lda	[<L833+fp_0],Y
 19956 08:4F2A: 29 02        	and	#<$2
 19957 08:4F2C: C2 20        	rep	#$20
 19958                        	longa	on
 19959 08:4F2E: F0 03        	beq	L840
 19960 08:4F30: 82 06 00     	brl	L10468
 19961                        L840:
 19962                        	.line	4520
 19963 08:4F33: A9 07 00     	lda	#$7
 19964 08:4F36: 82 D8 FF     	brl	L839
 19965                        ;
 19966                        ;	/* Check fptr wrap-around (file size cannot reac
                    h 4 GiB at FAT volume) */
 19967                        ;	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)
 19968                        L10468:
 19969                        	.line	4523
 19970                        ;			&& (DWORD) (fp->fptr + btw) < (D
                    WORD) fp->fptr)
 19971                        ;	{
 19972 08:4F39: 82 0D 00     	brl	L841
 19973 08:4F3C: E2 20        	sep	#$20
 19974                        	longa	off
 19975 08:4F3E: A7 0F        	lda	[<L834+fs_1]
 19976 08:4F40: C9 04        	cmp	#<$4
 19977 08:4F42: C2 20        	rep	#$20
 19978                        	longa	on
 19979 08:4F44: D0 03        	bne	L842
 19980 08:4F46: 82 45 00     	brl	L10469
 19981                        L842:
 19982                        L841:
 19983 08:4F49: A5 30        	lda	<L833+btw_0
 19984 08:4F4B: 85 01        	sta	<R0
 19985 08:4F4D: 64 03        	stz	<R0+2
 19986 08:4F4F: 18           	clc
 19987 08:4F50: A5 01        	lda	<R0
 19988 08:4F52: A0 12 00     	ldy	#$12
 19989 08:4F55: 77 28        	adc	[<L833+fp_0],Y
 19990 08:4F57: 85 05        	sta	<R1
 19991 08:4F59: A5 03        	lda	<R0+2
 19992 08:4F5B: A0 14 00     	ldy	#$14
 19993 08:4F5E: 77 28        	adc	[<L833+fp_0],Y
 19994 08:4F60: 85 07        	sta	<R1+2
 19995 08:4F62: A5 05        	lda	<R1
 19996 08:4F64: A0 12 00     	ldy	#$12
 19997 08:4F67: D7 28        	cmp	[<L833+fp_0],Y
 19998 08:4F69: A5 07        	lda	<R1+2
 19999 08:4F6B: A0 14 00     	ldy	#$14
 20000 08:4F6E: F7 28        	sbc	[<L833+fp_0],Y
 20001 08:4F70: 90 03        	bcc	L843
 20002 08:4F72: 82 19 00     	brl	L10469
 20003                        L843:
 20004                        	.line	4525
 20005                        ;		btw = (UINT) (0xFFFFFFFF - (DWORD) fp->f
                    ptr);
 20006                        	.line	4526
 20007 08:4F75: 38           	sec
 20008 08:4F76: A9 FF FF     	lda	#$ffff
  Sat Jul 10 2021  1:15                                                Page 380


 20009 08:4F79: A0 12 00     	ldy	#$12
 20010 08:4F7C: F7 28        	sbc	[<L833+fp_0],Y
 20011 08:4F7E: 85 01        	sta	<R0
 20012 08:4F80: A9 FF FF     	lda	#$ffff
 20013 08:4F83: A0 14 00     	ldy	#$14
 20014 08:4F86: F7 28        	sbc	[<L833+fp_0],Y
 20015 08:4F88: 85 03        	sta	<R0+2
 20016 08:4F8A: A5 01        	lda	<R0
 20017 08:4F8C: 85 30        	sta	<L833+btw_0
 20018                        ;	}
 20019                        	.line	4527
 20020                        ;
 20021                        ;	for (; btw;
 20022                        L10469:
 20023                        	.line	4529
 20024 08:4F8E: 82 20 04     	brl	L10473
 20025                        ;			/* Repeat until all data written
                     */
 20026                        ;			btw -= wcnt, *bw += wcnt, wbuff 
                    += wcnt, fp->fptr += wcnt, fp->obj.objsize =
 20027                        ;					(fp->fptr > fp->
                    obj.objsize) ? fp->fptr : fp->obj.objsize)
 20028                        L10472:
 20029                        ;	{
 20030                        	.line	4533
 20031                        ;		if (fp->fptr % SS(fs) == 0)
 20032                        	.line	4534
 20033                        ;		{ /* On the sector boundary? */
 20034 08:4F91: A0 12 00     	ldy	#$12
 20035 08:4F94: B7 28        	lda	[<L833+fp_0],Y
 20036 08:4F96: 29 FF 01     	and	#<$1ff
 20037 08:4F99: F0 03        	beq	L844
 20038 08:4F9B: 82 19 03     	brl	L10474
 20039                        L844:
 20040                        	.line	4535
 20041                        ;			csect = (UINT) (fp->fptr / SS(fs
                    )) & (fs->csize - 1); /* Sector offset in the cluster */
 20042                        	.line	4536
 20043 08:4F9E: A0 14 00     	ldy	#$14
 20044 08:4FA1: B7 28        	lda	[<L833+fp_0],Y
 20045 08:4FA3: 48           	pha
 20046 08:4FA4: A0 12 00     	ldy	#$12
 20047 08:4FA7: B7 28        	lda	[<L833+fp_0],Y
 20048 08:4FA9: 48           	pha
 20049 08:4FAA: A9 09 00     	lda	#$9
 20050                        	xref	~~~llsr
 20051 08:4FAD: 22 xx xx xx  	jsl	~~~llsr
 20052 08:4FB1: 85 01        	sta	<R0
 20053 08:4FB3: 86 03        	stx	<R0+2
 20054 08:4FB5: 18           	clc
 20055 08:4FB6: A9 FF FF     	lda	#$ffff
 20056 08:4FB9: A0 09 00     	ldy	#$9
 20057 08:4FBC: 77 0F        	adc	[<L834+fs_1],Y
 20058 08:4FBE: 85 05        	sta	<R1
 20059 08:4FC0: A5 05        	lda	<R1
 20060 08:4FC2: 25 01        	and	<R0
 20061 08:4FC4: 85 1F        	sta	<L834+csect_1
 20062                        ;			if (csect == 0)
  Sat Jul 10 2021  1:15                                                Page 381


 20063                        	.line	4537
 20064                        ;			{ /* On the cluster boundary? */
 20065 08:4FC6: A5 1F        	lda	<L834+csect_1
 20066 08:4FC8: F0 03        	beq	L845
 20067 08:4FCA: 82 CB 00     	brl	L10475
 20068                        L845:
 20069                        	.line	4538
 20070                        ;				if (fp->fptr == 0)
 20071                        	.line	4539
 20072                        ;				{ /* On the top of the f
                    ile? */
 20073 08:4FCD: A0 12 00     	ldy	#$12
 20074 08:4FD0: B7 28        	lda	[<L833+fp_0],Y
 20075 08:4FD2: A0 14 00     	ldy	#$14
 20076 08:4FD5: 17 28        	ora	[<L833+fp_0],Y
 20077 08:4FD7: F0 03        	beq	L846
 20078 08:4FD9: 82 2C 00     	brl	L10476
 20079                        L846:
 20080                        	.line	4540
 20081                        ;					clst = fp->obj.s
                    clust; /* Follow from the origin */
 20082                        	.line	4541
 20083 08:4FDC: A0 08 00     	ldy	#$8
 20084 08:4FDF: B7 28        	lda	[<L833+fp_0],Y
 20085 08:4FE1: 85 13        	sta	<L834+clst_1
 20086 08:4FE3: A0 0A 00     	ldy	#$a
 20087 08:4FE6: B7 28        	lda	[<L833+fp_0],Y
 20088 08:4FE8: 85 15        	sta	<L834+clst_1+2
 20089                        ;					if (clst == 0)
 20090                        	.line	4542
 20091                        ;					{ /* If no clust
                    er is allocated, */
 20092 08:4FEA: A5 13        	lda	<L834+clst_1
 20093 08:4FEC: 05 15        	ora	<L834+clst_1+2
 20094 08:4FEE: F0 03        	beq	L847
 20095 08:4FF0: 82 12 00     	brl	L10477
 20096                        L847:
 20097                        	.line	4543
 20098                        ;						clst = c
                    reate_chain(&fp->obj, 0); /* create a new cluster chain */
 20099                        	.line	4544
 20100 08:4FF3: F4 00 00     	pea	#^$0
 20101 08:4FF6: F4 00 00     	pea	#<$0
 20102 08:4FF9: D4 2A        	pei	<L833+fp_0+2
 20103 08:4FFB: D4 28        	pei	<L833+fp_0
 20104 08:4FFD: 22 93 12 08  	jsl	~~create_chain
 20105 08:5001: 85 13        	sta	<L834+clst_1
 20106 08:5003: 86 15        	stx	<L834+clst_1+2
 20107                        ;					}
 20108                        	.line	4545
 20109                        ;				}
 20110                        L10477:
 20111                        	.line	4546
 20112                        ;				else
 20113 08:5005: 82 18 00     	brl	L10478
 20114                        L10476:
 20115                        ;				{ /* On the middle or en
                    d of the file */
  Sat Jul 10 2021  1:15                                                Page 382


 20116                        	.line	4548
 20117                        ;#if FF_USE_FASTSEEK
 20118                        ;					if (fp->cltbl)
 20119                        ;					{
 20120                        ;						clst = c
                    lmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
 20121                        ;					}
 20122                        ;					else
 20123                        ;#endif
 20124                        ;					{
 20125                        	.line	4556
 20126                        ;						clst = c
                    reate_chain(&fp->obj, fp->clust); /* Follow or stretch clust
                    er chain on the FAT */
 20127                        	.line	4557
 20128 08:5008: A0 18 00     	ldy	#$18
 20129 08:500B: B7 28        	lda	[<L833+fp_0],Y
 20130 08:500D: 48           	pha
 20131 08:500E: A0 16 00     	ldy	#$16
 20132 08:5011: B7 28        	lda	[<L833+fp_0],Y
 20133 08:5013: 48           	pha
 20134 08:5014: D4 2A        	pei	<L833+fp_0+2
 20135 08:5016: D4 28        	pei	<L833+fp_0
 20136 08:5018: 22 93 12 08  	jsl	~~create_chain
 20137 08:501C: 85 13        	sta	<L834+clst_1
 20138 08:501E: 86 15        	stx	<L834+clst_1+2
 20139                        ;					}
 20140                        	.line	4558
 20141                        ;				}
 20142                        	.line	4559
 20143                        L10478:
 20144                        ;				if (clst == 0)
 20145                        	.line	4560
 20146                        ;					break; /* Could 
                    not allocate a new cluster (disk full) */
 20147 08:5020: A5 13        	lda	<L834+clst_1
 20148 08:5022: 05 15        	ora	<L834+clst_1+2
 20149 08:5024: D0 03        	bne	L848
 20150 08:5026: 82 8F 03     	brl	L10471
 20151                        L848:
 20152                        ;				if (clst == 1)
 20153                        	.line	4562
 20154                        ;					ABORT(fs, FR_INT
                    _ERR);
 20155 08:5029: A5 13        	lda	<L834+clst_1
 20156 08:502B: C9 01 00     	cmp	#<$1
 20157 08:502E: D0 05        	bne	L849
 20158 08:5030: A5 15        	lda	<L834+clst_1+2
 20159 08:5032: C9 00 00     	cmp	#^$1
 20160                        L849:
 20161 08:5035: F0 03        	beq	L850
 20162 08:5037: 82 11 00     	brl	L10479
 20163                        L850:
 20164                        	.line	4563
 20165                        	.line	4563
 20166 08:503A: E2 20        	sep	#$20
 20167                        	longa	off
 20168 08:503C: A9 02        	lda	#$2
  Sat Jul 10 2021  1:15                                                Page 383


 20169 08:503E: A0 11 00     	ldy	#$11
 20170 08:5041: 97 28        	sta	[<L833+fp_0],Y
 20171 08:5043: C2 20        	rep	#$20
 20172                        	longa	on
 20173                        	.line	4563
 20174 08:5045: A9 02 00     	lda	#$2
 20175 08:5048: 82 C6 FE     	brl	L839
 20176                        	.line	4563
 20177                        L10479:
 20178                        	.line	4563
 20179                        ;				if (clst == 0xFFFFFFFF)
 20180                        	.line	4564
 20181                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 20182 08:504B: A5 13        	lda	<L834+clst_1
 20183 08:504D: C9 FF FF     	cmp	#<$ffffffff
 20184 08:5050: D0 05        	bne	L851
 20185 08:5052: A5 15        	lda	<L834+clst_1+2
 20186 08:5054: C9 FF FF     	cmp	#^$ffffffff
 20187                        L851:
 20188 08:5057: F0 03        	beq	L852
 20189 08:5059: 82 11 00     	brl	L10480
 20190                        L852:
 20191                        	.line	4565
 20192                        	.line	4565
 20193 08:505C: E2 20        	sep	#$20
 20194                        	longa	off
 20195 08:505E: A9 01        	lda	#$1
 20196 08:5060: A0 11 00     	ldy	#$11
 20197 08:5063: 97 28        	sta	[<L833+fp_0],Y
 20198 08:5065: C2 20        	rep	#$20
 20199                        	longa	on
 20200                        	.line	4565
 20201 08:5067: A9 01 00     	lda	#$1
 20202 08:506A: 82 A4 FE     	brl	L839
 20203                        	.line	4565
 20204                        L10480:
 20205                        	.line	4565
 20206                        ;				fp->clust = clst; /* Upd
                    ate current cluster */
 20207                        	.line	4566
 20208 08:506D: A5 13        	lda	<L834+clst_1
 20209 08:506F: A0 16 00     	ldy	#$16
 20210 08:5072: 97 28        	sta	[<L833+fp_0],Y
 20211 08:5074: A5 15        	lda	<L834+clst_1+2
 20212 08:5076: A0 18 00     	ldy	#$18
 20213 08:5079: 97 28        	sta	[<L833+fp_0],Y
 20214                        ;				if (fp->obj.sclust == 0)
 20215                        	.line	4567
 20216                        ;					fp->obj.sclust =
                     clst; /* Set start cluster if the first write */
 20217 08:507B: A0 08 00     	ldy	#$8
 20218 08:507E: B7 28        	lda	[<L833+fp_0],Y
 20219 08:5080: A0 0A 00     	ldy	#$a
 20220 08:5083: 17 28        	ora	[<L833+fp_0],Y
 20221 08:5085: F0 03        	beq	L853
 20222 08:5087: 82 0E 00     	brl	L10481
 20223                        L853:
  Sat Jul 10 2021  1:15                                                Page 384


 20224                        	.line	4568
 20225 08:508A: A5 13        	lda	<L834+clst_1
 20226 08:508C: A0 08 00     	ldy	#$8
 20227 08:508F: 97 28        	sta	[<L833+fp_0],Y
 20228 08:5091: A5 15        	lda	<L834+clst_1+2
 20229 08:5093: A0 0A 00     	ldy	#$a
 20230 08:5096: 97 28        	sta	[<L833+fp_0],Y
 20231                        ;			}
 20232                        L10481:
 20233                        	.line	4569
 20234                        ;#if FF_FS_TINY
 20235                        ;			if (fs->winsect == fp->sect && s
                    ync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR); /* Write-ba
                    ck sector cache */
 20236                        ;#else
 20237                        ;			if (fp->flag & FA_DIRTY)
 20238                        L10475:
 20239                        	.line	4573
 20240                        ;			{ /* Write-back sector cache */
 20241 08:5098: E2 20        	sep	#$20
 20242                        	longa	off
 20243 08:509A: A0 10 00     	ldy	#$10
 20244 08:509D: B7 28        	lda	[<L833+fp_0],Y
 20245 08:509F: 29 80        	and	#<$80
 20246 08:50A1: C2 20        	rep	#$20
 20247                        	longa	on
 20248 08:50A3: D0 03        	bne	L854
 20249 08:50A5: 82 5C 00     	brl	L10482
 20250                        L854:
 20251                        	.line	4574
 20252                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK)
 20253                        	.line	4575
 20254                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 20255 08:50A8: F4 01 00     	pea	#<$1
 20256 08:50AB: A0 1C 00     	ldy	#$1c
 20257 08:50AE: B7 28        	lda	[<L833+fp_0],Y
 20258 08:50B0: 48           	pha
 20259 08:50B1: A0 1A 00     	ldy	#$1a
 20260 08:50B4: B7 28        	lda	[<L833+fp_0],Y
 20261 08:50B6: 48           	pha
 20262 08:50B7: 18           	clc
 20263 08:50B8: A9 26 00     	lda	#$26
 20264 08:50BB: 65 28        	adc	<L833+fp_0
 20265 08:50BD: 85 01        	sta	<R0
 20266 08:50BF: A9 00 00     	lda	#$0
 20267 08:50C2: 65 2A        	adc	<L833+fp_0+2
 20268 08:50C4: 85 03        	sta	<R0+2
 20269 08:50C6: D4 03        	pei	<R0+2
 20270 08:50C8: D4 01        	pei	<R0
 20271 08:50CA: A0 01 00     	ldy	#$1
 20272 08:50CD: B7 0F        	lda	[<L834+fs_1],Y
 20273 08:50CF: 48           	pha
 20274 08:50D0: 22 xx xx xx  	jsl	~~disk_write
 20275 08:50D4: AA           	tax
 20276 08:50D5: D0 03        	bne	L855
 20277 08:50D7: 82 11 00     	brl	L10483
  Sat Jul 10 2021  1:15                                                Page 385


 20278                        L855:
 20279                        	.line	4576
 20280                        	.line	4576
 20281 08:50DA: E2 20        	sep	#$20
 20282                        	longa	off
 20283 08:50DC: A9 01        	lda	#$1
 20284 08:50DE: A0 11 00     	ldy	#$11
 20285 08:50E1: 97 28        	sta	[<L833+fp_0],Y
 20286 08:50E3: C2 20        	rep	#$20
 20287                        	longa	on
 20288                        	.line	4576
 20289 08:50E5: A9 01 00     	lda	#$1
 20290 08:50E8: 82 26 FE     	brl	L839
 20291                        	.line	4576
 20292                        L10483:
 20293                        	.line	4576
 20294                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 20295                        	.line	4577
 20296 08:50EB: 18           	clc
 20297 08:50EC: A9 10 00     	lda	#$10
 20298 08:50EF: 65 28        	adc	<L833+fp_0
 20299 08:50F1: 85 01        	sta	<R0
 20300 08:50F3: A9 00 00     	lda	#$0
 20301 08:50F6: 65 2A        	adc	<L833+fp_0+2
 20302 08:50F8: 85 03        	sta	<R0+2
 20303 08:50FA: E2 20        	sep	#$20
 20304                        	longa	off
 20305 08:50FC: A7 01        	lda	[<R0]
 20306 08:50FE: 29 7F        	and	#<$7f
 20307 08:5100: 87 01        	sta	[<R0]
 20308 08:5102: C2 20        	rep	#$20
 20309                        	longa	on
 20310                        ;			}
 20311                        	.line	4578
 20312                        ;#endif
 20313                        ;			sect = clst2sect(fs, fp->clust);
                     /* Get current sector */
 20314                        L10482:
 20315                        	.line	4580
 20316 08:5104: A0 18 00     	ldy	#$18
 20317 08:5107: B7 28        	lda	[<L833+fp_0],Y
 20318 08:5109: 48           	pha
 20319 08:510A: A0 16 00     	ldy	#$16
 20320 08:510D: B7 28        	lda	[<L833+fp_0],Y
 20321 08:510F: 48           	pha
 20322 08:5110: D4 11        	pei	<L834+fs_1+2
 20323 08:5112: D4 0F        	pei	<L834+fs_1
 20324 08:5114: 22 C5 0A 08  	jsl	~~clst2sect
 20325 08:5118: 85 17        	sta	<L834+sect_1
 20326 08:511A: 86 19        	stx	<L834+sect_1+2
 20327                        ;			if (sect == 0)
 20328                        	.line	4581
 20329                        ;				ABORT(fs, FR_INT_ERR);
 20330 08:511C: A5 17        	lda	<L834+sect_1
 20331 08:511E: 05 19        	ora	<L834+sect_1+2
 20332 08:5120: F0 03        	beq	L856
 20333 08:5122: 82 11 00     	brl	L10484
  Sat Jul 10 2021  1:15                                                Page 386


 20334                        L856:
 20335                        	.line	4582
 20336                        	.line	4582
 20337 08:5125: E2 20        	sep	#$20
 20338                        	longa	off
 20339 08:5127: A9 02        	lda	#$2
 20340 08:5129: A0 11 00     	ldy	#$11
 20341 08:512C: 97 28        	sta	[<L833+fp_0],Y
 20342 08:512E: C2 20        	rep	#$20
 20343                        	longa	on
 20344                        	.line	4582
 20345 08:5130: A9 02 00     	lda	#$2
 20346 08:5133: 82 DB FD     	brl	L839
 20347                        	.line	4582
 20348                        L10484:
 20349                        	.line	4582
 20350                        ;			sect += csect;
 20351                        	.line	4583
 20352 08:5136: A5 1F        	lda	<L834+csect_1
 20353 08:5138: 85 01        	sta	<R0
 20354 08:513A: 64 03        	stz	<R0+2
 20355 08:513C: 18           	clc
 20356 08:513D: A5 01        	lda	<R0
 20357 08:513F: 65 17        	adc	<L834+sect_1
 20358 08:5141: 85 17        	sta	<L834+sect_1
 20359 08:5143: A5 03        	lda	<R0+2
 20360 08:5145: 65 19        	adc	<L834+sect_1+2
 20361 08:5147: 85 19        	sta	<L834+sect_1+2
 20362                        ;			cc = btw / SS(fs); /* When remai
                    ning bytes >= sector size, */
 20363                        	.line	4584
 20364 08:5149: A5 30        	lda	<L833+btw_0
 20365 08:514B: A2 09 00     	ldx	#<$9
 20366                        	xref	~~~lsr
 20367 08:514E: 22 xx xx xx  	jsl	~~~lsr
 20368 08:5152: 85 1D        	sta	<L834+cc_1
 20369                        ;			if (cc > 0)
 20370                        	.line	4585
 20371                        ;			{ /* Write maximum contiguous se
                    ctors directly */
 20372 08:5154: A9 00 00     	lda	#$0
 20373 08:5157: C5 1D        	cmp	<L834+cc_1
 20374 08:5159: 90 03        	bcc	L857
 20375 08:515B: 82 E2 00     	brl	L10485
 20376                        L857:
 20377                        	.line	4586
 20378                        ;				if (csect + cc > fs->csi
                    ze)
 20379                        	.line	4587
 20380                        ;				{ /* Clip at cluster bou
                    ndary */
 20381 08:515E: 18           	clc
 20382 08:515F: A5 1F        	lda	<L834+csect_1
 20383 08:5161: 65 1D        	adc	<L834+cc_1
 20384 08:5163: 85 01        	sta	<R0
 20385 08:5165: A0 09 00     	ldy	#$9
 20386 08:5168: B7 0F        	lda	[<L834+fs_1],Y
 20387 08:516A: C5 01        	cmp	<R0
  Sat Jul 10 2021  1:15                                                Page 387


 20388 08:516C: 90 03        	bcc	L858
 20389 08:516E: 82 0A 00     	brl	L10486
 20390                        L858:
 20391                        	.line	4588
 20392                        ;					cc = fs->csize -
                     csect;
 20393                        	.line	4589
 20394 08:5171: 38           	sec
 20395 08:5172: A0 09 00     	ldy	#$9
 20396 08:5175: B7 0F        	lda	[<L834+fs_1],Y
 20397 08:5177: E5 1F        	sbc	<L834+csect_1
 20398 08:5179: 85 1D        	sta	<L834+cc_1
 20399                        ;				}
 20400                        	.line	4590
 20401                        ;				if (disk_write(fs->pdrv,
                     wbuff, sect, cc) != RES_OK)
 20402                        L10486:
 20403                        	.line	4591
 20404                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 20405 08:517B: D4 1D        	pei	<L834+cc_1
 20406 08:517D: D4 19        	pei	<L834+sect_1+2
 20407 08:517F: D4 17        	pei	<L834+sect_1
 20408 08:5181: D4 23        	pei	<L834+wbuff_1+2
 20409 08:5183: D4 21        	pei	<L834+wbuff_1
 20410 08:5185: A0 01 00     	ldy	#$1
 20411 08:5188: B7 0F        	lda	[<L834+fs_1],Y
 20412 08:518A: 48           	pha
 20413 08:518B: 22 xx xx xx  	jsl	~~disk_write
 20414 08:518F: AA           	tax
 20415 08:5190: D0 03        	bne	L859
 20416 08:5192: 82 11 00     	brl	L10487
 20417                        L859:
 20418                        	.line	4592
 20419                        	.line	4592
 20420 08:5195: E2 20        	sep	#$20
 20421                        	longa	off
 20422 08:5197: A9 01        	lda	#$1
 20423 08:5199: A0 11 00     	ldy	#$11
 20424 08:519C: 97 28        	sta	[<L833+fp_0],Y
 20425 08:519E: C2 20        	rep	#$20
 20426                        	longa	on
 20427                        	.line	4592
 20428 08:51A0: A9 01 00     	lda	#$1
 20429 08:51A3: 82 6B FD     	brl	L839
 20430                        	.line	4592
 20431                        L10487:
 20432                        	.line	4592
 20433                        ;#if FF_FS_MINIMIZE <= 2
 20434                        ;#if FF_FS_TINY
 20435                        ;				if (fs->winsect - sect <
                     cc)
 20436                        ;				{ /* Refill sector cache
                     if it gets invalidated by the direct write */
 20437                        ;					mem_cpy(fs->win,
                     wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 20438                        ;					fs->wflag = 0;
 20439                        ;				}
  Sat Jul 10 2021  1:15                                                Page 388


 20440                        ;#else
 20441                        ;				if (fp->sect - sect < cc
                    )
 20442                        	.line	4601
 20443                        ;				{ /* Refill sector cache
                     if it gets invalidated by the direct write */
 20444 08:51A6: A5 1D        	lda	<L834+cc_1
 20445 08:51A8: 85 01        	sta	<R0
 20446 08:51AA: 64 03        	stz	<R0+2
 20447 08:51AC: 38           	sec
 20448 08:51AD: A0 1A 00     	ldy	#$1a
 20449 08:51B0: B7 28        	lda	[<L833+fp_0],Y
 20450 08:51B2: E5 17        	sbc	<L834+sect_1
 20451 08:51B4: 85 05        	sta	<R1
 20452 08:51B6: A0 1C 00     	ldy	#$1c
 20453 08:51B9: B7 28        	lda	[<L833+fp_0],Y
 20454 08:51BB: E5 19        	sbc	<L834+sect_1+2
 20455 08:51BD: 85 07        	sta	<R1+2
 20456 08:51BF: A5 05        	lda	<R1
 20457 08:51C1: C5 01        	cmp	<R0
 20458 08:51C3: A5 07        	lda	<R1+2
 20459 08:51C5: E5 03        	sbc	<R0+2
 20460 08:51C7: 90 03        	bcc	L860
 20461 08:51C9: 82 66 00     	brl	L10488
 20462                        L860:
 20463                        	.line	4602
 20464                        ;					mem_cpy(fp->buf,
                     wbuff + ((fp->sect - sect) * SS(fs)),
 20465                        	.line	4603
 20466                        ;							
                    SS(fs));
 20467 08:51CC: F4 00 02     	pea	#<$200
 20468 08:51CF: 38           	sec
 20469 08:51D0: A0 1A 00     	ldy	#$1a
 20470 08:51D3: B7 28        	lda	[<L833+fp_0],Y
 20471 08:51D5: E5 17        	sbc	<L834+sect_1
 20472 08:51D7: 85 05        	sta	<R1
 20473 08:51D9: A0 1C 00     	ldy	#$1c
 20474 08:51DC: B7 28        	lda	[<L833+fp_0],Y
 20475 08:51DE: E5 19        	sbc	<L834+sect_1+2
 20476 08:51E0: 85 07        	sta	<R1+2
 20477 08:51E2: D4 07        	pei	<R1+2
 20478 08:51E4: D4 05        	pei	<R1
 20479 08:51E6: A9 09 00     	lda	#$9
 20480                        	xref	~~~lasl
 20481 08:51E9: 22 xx xx xx  	jsl	~~~lasl
 20482 08:51ED: 85 01        	sta	<R0
 20483 08:51EF: 86 03        	stx	<R0+2
 20484 08:51F1: 18           	clc
 20485 08:51F2: A5 21        	lda	<L834+wbuff_1
 20486 08:51F4: 65 01        	adc	<R0
 20487 08:51F6: 85 09        	sta	<R2
 20488 08:51F8: A5 23        	lda	<L834+wbuff_1+2
 20489 08:51FA: 65 03        	adc	<R0+2
 20490 08:51FC: 85 0B        	sta	<R2+2
 20491 08:51FE: D4 0B        	pei	<R2+2
 20492 08:5200: D4 09        	pei	<R2
 20493 08:5202: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 389


 20494 08:5203: A9 26 00     	lda	#$26
 20495 08:5206: 65 28        	adc	<L833+fp_0
 20496 08:5208: 85 01        	sta	<R0
 20497 08:520A: A9 00 00     	lda	#$0
 20498 08:520D: 65 2A        	adc	<L833+fp_0+2
 20499 08:520F: 85 03        	sta	<R0+2
 20500 08:5211: D4 03        	pei	<R0+2
 20501 08:5213: D4 01        	pei	<R0
 20502 08:5215: 22 93 01 08  	jsl	~~mem_cpy
 20503                        ;					fp->flag &= (BYT
                    E) ~FA_DIRTY;
 20504                        	.line	4605
 20505 08:5219: 18           	clc
 20506 08:521A: A9 10 00     	lda	#$10
 20507 08:521D: 65 28        	adc	<L833+fp_0
 20508 08:521F: 85 01        	sta	<R0
 20509 08:5221: A9 00 00     	lda	#$0
 20510 08:5224: 65 2A        	adc	<L833+fp_0+2
 20511 08:5226: 85 03        	sta	<R0+2
 20512 08:5228: E2 20        	sep	#$20
 20513                        	longa	off
 20514 08:522A: A7 01        	lda	[<R0]
 20515 08:522C: 29 7F        	and	#<$7f
 20516 08:522E: 87 01        	sta	[<R0]
 20517 08:5230: C2 20        	rep	#$20
 20518                        	longa	on
 20519                        ;				}
 20520                        	.line	4606
 20521                        ;#endif
 20522                        ;#endif
 20523                        ;				wcnt = SS(fs) * cc; /* N
                    umber of bytes transferred */
 20524                        L10488:
 20525                        	.line	4609
 20526 08:5232: A5 1D        	lda	<L834+cc_1
 20527 08:5234: A2 09 00     	ldx	#<$9
 20528                        	xref	~~~asl
 20529 08:5237: 22 xx xx xx  	jsl	~~~asl
 20530 08:523B: 85 1B        	sta	<L834+wcnt_1
 20531                        ;				continue;
 20532                        	.line	4610
 20533 08:523D: 82 E5 00     	brl	L10470
 20534                        ;			}
 20535                        	.line	4611
 20536                        ;#if FF_FS_TINY
 20537                        ;			if (fp->fptr >= fp->obj.objsize)
 20538                        ;			{ /* Avoid silly cache filling o
                    n the growing edge */
 20539                        ;				if (sync_window(fs) != F
                    R_OK) ABORT(fs, FR_DISK_ERR);
 20540                        ;				fs->winsect = sect;
 20541                        ;			}
 20542                        ;#else
 20543                        ;			if (fp->sect != sect && /* Fill 
                    sector cache with file data */
 20544                        L10485:
 20545                        	.line	4619
 20546                        ;			fp->fptr < fp->obj.objsize
  Sat Jul 10 2021  1:15                                                Page 390


 20547                        ;					&& disk_read(fs-
                    >pdrv, fp->buf, sect, 1) != RES_OK)
 20548                        ;			{
 20549 08:5240: A0 1A 00     	ldy	#$1a
 20550 08:5243: B7 28        	lda	[<L833+fp_0],Y
 20551 08:5245: C5 17        	cmp	<L834+sect_1
 20552 08:5247: D0 07        	bne	L861
 20553 08:5249: A0 1C 00     	ldy	#$1c
 20554 08:524C: B7 28        	lda	[<L833+fp_0],Y
 20555 08:524E: C5 19        	cmp	<L834+sect_1+2
 20556                        L861:
 20557 08:5250: D0 03        	bne	L862
 20558 08:5252: 82 54 00     	brl	L10489
 20559                        L862:
 20560 08:5255: A0 12 00     	ldy	#$12
 20561 08:5258: B7 28        	lda	[<L833+fp_0],Y
 20562 08:525A: A0 0C 00     	ldy	#$c
 20563 08:525D: D7 28        	cmp	[<L833+fp_0],Y
 20564 08:525F: A0 14 00     	ldy	#$14
 20565 08:5262: B7 28        	lda	[<L833+fp_0],Y
 20566 08:5264: A0 0E 00     	ldy	#$e
 20567 08:5267: F7 28        	sbc	[<L833+fp_0],Y
 20568 08:5269: 90 03        	bcc	L863
 20569 08:526B: 82 3B 00     	brl	L10489
 20570                        L863:
 20571 08:526E: F4 01 00     	pea	#<$1
 20572 08:5271: D4 19        	pei	<L834+sect_1+2
 20573 08:5273: D4 17        	pei	<L834+sect_1
 20574 08:5275: 18           	clc
 20575 08:5276: A9 26 00     	lda	#$26
 20576 08:5279: 65 28        	adc	<L833+fp_0
 20577 08:527B: 85 01        	sta	<R0
 20578 08:527D: A9 00 00     	lda	#$0
 20579 08:5280: 65 2A        	adc	<L833+fp_0+2
 20580 08:5282: 85 03        	sta	<R0+2
 20581 08:5284: D4 03        	pei	<R0+2
 20582 08:5286: D4 01        	pei	<R0
 20583 08:5288: A0 01 00     	ldy	#$1
 20584 08:528B: B7 0F        	lda	[<L834+fs_1],Y
 20585 08:528D: 48           	pha
 20586 08:528E: 22 xx xx xx  	jsl	~~disk_read
 20587 08:5292: AA           	tax
 20588 08:5293: D0 03        	bne	L864
 20589 08:5295: 82 11 00     	brl	L10489
 20590                        L864:
 20591                        	.line	4622
 20592                        ;				ABORT(fs, FR_DISK_ERR);
 20593                        	.line	4623
 20594                        	.line	4623
 20595 08:5298: E2 20        	sep	#$20
 20596                        	longa	off
 20597 08:529A: A9 01        	lda	#$1
 20598 08:529C: A0 11 00     	ldy	#$11
 20599 08:529F: 97 28        	sta	[<L833+fp_0],Y
 20600 08:52A1: C2 20        	rep	#$20
 20601                        	longa	on
 20602                        	.line	4623
 20603 08:52A3: A9 01 00     	lda	#$1
  Sat Jul 10 2021  1:15                                                Page 391


 20604 08:52A6: 82 68 FC     	brl	L839
 20605                        	.line	4623
 20606                        	.line	4623
 20607                        ;			}
 20608                        	.line	4624
 20609                        ;#endif
 20610                        ;			fp->sect = sect;
 20611                        L10489:
 20612                        	.line	4626
 20613 08:52A9: A5 17        	lda	<L834+sect_1
 20614 08:52AB: A0 1A 00     	ldy	#$1a
 20615 08:52AE: 97 28        	sta	[<L833+fp_0],Y
 20616 08:52B0: A5 19        	lda	<L834+sect_1+2
 20617 08:52B2: A0 1C 00     	ldy	#$1c
 20618 08:52B5: 97 28        	sta	[<L833+fp_0],Y
 20619                        ;		}
 20620                        	.line	4627
 20621                        ;		wcnt = SS(fs) - (UINT) fp->fptr % SS(fs)
                    ; /* Number of bytes remains in the sector */
 20622                        L10474:
 20623                        	.line	4628
 20624 08:52B7: A0 12 00     	ldy	#$12
 20625 08:52BA: B7 28        	lda	[<L833+fp_0],Y
 20626 08:52BC: 29 FF 01     	and	#<$1ff
 20627 08:52BF: 85 01        	sta	<R0
 20628 08:52C1: 38           	sec
 20629 08:52C2: A9 00 02     	lda	#$200
 20630 08:52C5: E5 01        	sbc	<R0
 20631 08:52C7: 85 1B        	sta	<L834+wcnt_1
 20632                        ;		if (wcnt > btw)
 20633                        	.line	4629
 20634                        ;			wcnt = btw; /* Clip it by btw if
                     needed */
 20635 08:52C9: A5 30        	lda	<L833+btw_0
 20636 08:52CB: C5 1B        	cmp	<L834+wcnt_1
 20637 08:52CD: 90 03        	bcc	L865
 20638 08:52CF: 82 04 00     	brl	L10490
 20639                        L865:
 20640                        	.line	4630
 20641 08:52D2: A5 30        	lda	<L833+btw_0
 20642 08:52D4: 85 1B        	sta	<L834+wcnt_1
 20643                        ;#if FF_FS_TINY
 20644                        ;		if (move_window(fs, fp->sect) != FR_OK) 
                    ABORT(fs, FR_DISK_ERR); /* Move sector window */
 20645                        ;		mem_cpy(fs->win + fp->fptr % SS(fs), wbu
                    ff, wcnt); /* Fit data to the sector */
 20646                        ;		fs->wflag = 1;
 20647                        ;#else
 20648                        ;		mem_cpy(fp->buf + fp->fptr % SS(fs), wbu
                    ff, wcnt); /* Fit data to the sector */
 20649                        L10490:
 20650                        	.line	4636
 20651 08:52D6: D4 1B        	pei	<L834+wcnt_1
 20652 08:52D8: D4 23        	pei	<L834+wbuff_1+2
 20653 08:52DA: D4 21        	pei	<L834+wbuff_1
 20654 08:52DC: A0 12 00     	ldy	#$12
 20655 08:52DF: B7 28        	lda	[<L833+fp_0],Y
 20656 08:52E1: 29 FF 01     	and	#<$1ff
  Sat Jul 10 2021  1:15                                                Page 392


 20657 08:52E4: 85 01        	sta	<R0
 20658 08:52E6: 64 03        	stz	<R0+2
 20659 08:52E8: 18           	clc
 20660 08:52E9: A9 26 00     	lda	#$26
 20661 08:52EC: 65 01        	adc	<R0
 20662 08:52EE: 85 05        	sta	<R1
 20663 08:52F0: A9 00 00     	lda	#$0
 20664 08:52F3: 65 03        	adc	<R0+2
 20665 08:52F5: 85 07        	sta	<R1+2
 20666 08:52F7: 18           	clc
 20667 08:52F8: A5 28        	lda	<L833+fp_0
 20668 08:52FA: 65 05        	adc	<R1
 20669 08:52FC: 85 01        	sta	<R0
 20670 08:52FE: A5 2A        	lda	<L833+fp_0+2
 20671 08:5300: 65 07        	adc	<R1+2
 20672 08:5302: 85 03        	sta	<R0+2
 20673 08:5304: D4 03        	pei	<R0+2
 20674 08:5306: D4 01        	pei	<R0
 20675 08:5308: 22 93 01 08  	jsl	~~mem_cpy
 20676                        ;		fp->flag |= FA_DIRTY;
 20677                        	.line	4637
 20678 08:530C: 18           	clc
 20679 08:530D: A9 10 00     	lda	#$10
 20680 08:5310: 65 28        	adc	<L833+fp_0
 20681 08:5312: 85 01        	sta	<R0
 20682 08:5314: A9 00 00     	lda	#$0
 20683 08:5317: 65 2A        	adc	<L833+fp_0+2
 20684 08:5319: 85 03        	sta	<R0+2
 20685 08:531B: E2 20        	sep	#$20
 20686                        	longa	off
 20687 08:531D: A7 01        	lda	[<R0]
 20688 08:531F: 09 80        	ora	#<$80
 20689 08:5321: 87 01        	sta	[<R0]
 20690 08:5323: C2 20        	rep	#$20
 20691                        	longa	on
 20692                        ;#endif
 20693                        ;	}
 20694                        	.line	4639
 20695                        L10470:
 20696 08:5325: 38           	sec
 20697 08:5326: A5 30        	lda	<L833+btw_0
 20698 08:5328: E5 1B        	sbc	<L834+wcnt_1
 20699 08:532A: 85 30        	sta	<L833+btw_0
 20700 08:532C: 18           	clc
 20701 08:532D: A7 32        	lda	[<L833+bw_0]
 20702 08:532F: 65 1B        	adc	<L834+wcnt_1
 20703 08:5331: 87 32        	sta	[<L833+bw_0]
 20704 08:5333: A5 1B        	lda	<L834+wcnt_1
 20705 08:5335: 85 01        	sta	<R0
 20706 08:5337: 64 03        	stz	<R0+2
 20707 08:5339: 18           	clc
 20708 08:533A: A5 21        	lda	<L834+wbuff_1
 20709 08:533C: 65 01        	adc	<R0
 20710 08:533E: 85 21        	sta	<L834+wbuff_1
 20711 08:5340: A5 23        	lda	<L834+wbuff_1+2
 20712 08:5342: 65 03        	adc	<R0+2
 20713 08:5344: 85 23        	sta	<L834+wbuff_1+2
 20714 08:5346: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 393


 20715 08:5347: A9 12 00     	lda	#$12
 20716 08:534A: 65 28        	adc	<L833+fp_0
 20717 08:534C: 85 01        	sta	<R0
 20718 08:534E: A9 00 00     	lda	#$0
 20719 08:5351: 65 2A        	adc	<L833+fp_0+2
 20720 08:5353: 85 03        	sta	<R0+2
 20721 08:5355: A5 1B        	lda	<L834+wcnt_1
 20722 08:5357: 85 05        	sta	<R1
 20723 08:5359: 64 07        	stz	<R1+2
 20724 08:535B: 18           	clc
 20725 08:535C: A5 05        	lda	<R1
 20726 08:535E: 67 01        	adc	[<R0]
 20727 08:5360: 87 01        	sta	[<R0]
 20728 08:5362: A5 07        	lda	<R1+2
 20729 08:5364: A0 02 00     	ldy	#$2
 20730 08:5367: 77 01        	adc	[<R0],Y
 20731 08:5369: A0 02 00     	ldy	#$2
 20732 08:536C: 97 01        	sta	[<R0],Y
 20733 08:536E: A0 0C 00     	ldy	#$c
 20734 08:5371: B7 28        	lda	[<L833+fp_0],Y
 20735 08:5373: A0 12 00     	ldy	#$12
 20736 08:5376: D7 28        	cmp	[<L833+fp_0],Y
 20737 08:5378: A0 0E 00     	ldy	#$e
 20738 08:537B: B7 28        	lda	[<L833+fp_0],Y
 20739 08:537D: A0 14 00     	ldy	#$14
 20740 08:5380: F7 28        	sbc	[<L833+fp_0],Y
 20741 08:5382: 90 03        	bcc	L867
 20742 08:5384: 82 0D 00     	brl	L866
 20743                        L867:
 20744 08:5387: A0 14 00     	ldy	#$14
 20745 08:538A: B7 28        	lda	[<L833+fp_0],Y
 20746 08:538C: AA           	tax
 20747 08:538D: A0 12 00     	ldy	#$12
 20748 08:5390: B7 28        	lda	[<L833+fp_0],Y
 20749 08:5392: 80 0B        	bra	L868
 20750                        L866:
 20751 08:5394: A0 0E 00     	ldy	#$e
 20752 08:5397: B7 28        	lda	[<L833+fp_0],Y
 20753 08:5399: AA           	tax
 20754 08:539A: A0 0C 00     	ldy	#$c
 20755 08:539D: B7 28        	lda	[<L833+fp_0],Y
 20756                        L868:
 20757 08:539F: 85 01        	sta	<R0
 20758 08:53A1: 86 03        	stx	<R0+2
 20759 08:53A3: A5 01        	lda	<R0
 20760 08:53A5: A0 0C 00     	ldy	#$c
 20761 08:53A8: 97 28        	sta	[<L833+fp_0],Y
 20762 08:53AA: A5 03        	lda	<R0+2
 20763 08:53AC: A0 0E 00     	ldy	#$e
 20764 08:53AF: 97 28        	sta	[<L833+fp_0],Y
 20765                        L10473:
 20766 08:53B1: A5 30        	lda	<L833+btw_0
 20767 08:53B3: F0 03        	beq	L869
 20768 08:53B5: 82 D9 FB     	brl	L10472
 20769                        L869:
 20770                        L10471:
 20771                        ;
 20772                        ;	fp->flag |= FA_MODIFIED; /* Set file change flag
  Sat Jul 10 2021  1:15                                                Page 394


                     */
 20773                        	.line	4641
 20774 08:53B8: 18           	clc
 20775 08:53B9: A9 10 00     	lda	#$10
 20776 08:53BC: 65 28        	adc	<L833+fp_0
 20777 08:53BE: 85 01        	sta	<R0
 20778 08:53C0: A9 00 00     	lda	#$0
 20779 08:53C3: 65 2A        	adc	<L833+fp_0+2
 20780 08:53C5: 85 03        	sta	<R0+2
 20781 08:53C7: E2 20        	sep	#$20
 20782                        	longa	off
 20783 08:53C9: A7 01        	lda	[<R0]
 20784 08:53CB: 09 40        	ora	#<$40
 20785 08:53CD: 87 01        	sta	[<R0]
 20786 08:53CF: C2 20        	rep	#$20
 20787                        	longa	on
 20788                        ;
 20789                        ;	LEAVE_FF(fs, FR_OK);
 20790                        	.line	4643
 20791 08:53D1: A9 00 00     	lda	#$0
 20792 08:53D4: 82 3A FB     	brl	L839
 20793                        ;}
 20794                        	.line	4644
 20795                        	.endblock	4644
 20796             00000024   L833	equ	36
 20797             0000000D   L834	equ	13
 20798 08:53D7:              	ends
 20799                        	efunc
 20800                        	.endfunc	4644,13,36
 20801                        	.line	4644
 20802                        ;
 20803                        ;/*-----------------------------------------------
                    ------------------------*/
 20804                        ;/* Synchronize the File                          
                                            */
 20805                        ;/*-----------------------------------------------
                    ------------------------*/
 20806                        ;
 20807                        ;FRESULT f_sync(FIL* fp /* Pointer to the file obj
                    ect */
 20808                        ;)
 20809                        ;{
 20810                        	.line	4650
 20811                        	.line	4652
 20812                        	FFDOS
 20813                        	xdef	~~f_sync
 20814                        	func
 20815                        	.function	4652
 20816                        ~~f_sync:
 20817                        	longa	on
 20818                        	longi	on
 20819 08:53D7: 3B           	tsc
 20820 08:53D8: 38           	sec
 20821 08:53D9: E9 12 00     	sbc	#L870
 20822 08:53DC: 1B           	tcs
 20823 08:53DD: 0B           	phd
 20824 08:53DE: 5B           	tcd
 20825             00000004   fp_0	set	4
  Sat Jul 10 2021  1:15                                                Page 395


 20826                        	.block	4652
 20827                        ;	FRESULT res;
 20828                        ;	FATFS *fs;
 20829                        ;	DWORD tm;
 20830                        ;	BYTE *dir;
 20831                        ;
 20832                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 20833             00000000   res_1	set	0
 20834             00000002   fs_1	set	2
 20835             00000006   tm_1	set	6
 20836             0000000A   dir_1	set	10
 20837                        	.sym	res,0,5,1,16
 20838                        	.sym	fs,2,138,1,32,72
 20839                        	.sym	tm,6,18,1,32
 20840                        	.sym	dir,10,142,1,32
 20841                        	.sym	fp,4,138,6,32,74
 20842                        	.line	4658
 20843 08:53DF: F4 00 00     	pea	#0
 20844 08:53E2: 18           	clc
 20845 08:53E3: 7B           	tdc
 20846 08:53E4: 69 07 00     	adc	#<L871+fs_1
 20847 08:53E7: 48           	pha
 20848 08:53E8: D4 18        	pei	<L870+fp_0+2
 20849 08:53EA: D4 16        	pei	<L870+fp_0
 20850 08:53EC: 22 8B 44 08  	jsl	~~validate
 20851 08:53F0: 85 05        	sta	<L871+res_1
 20852                        ;	if (res == FR_OK)
 20853                        	.line	4659
 20854                        ;	{
 20855 08:53F2: A5 05        	lda	<L871+res_1
 20856 08:53F4: F0 03        	beq	L873
 20857 08:53F6: 82 71 01     	brl	L10491
 20858                        L873:
 20859                        	.line	4660
 20860                        ;		if (fp->flag & FA_MODIFIED)
 20861                        	.line	4661
 20862                        ;		{ /* Is there any change to the file? */
 20863 08:53F9: E2 20        	sep	#$20
 20864                        	longa	off
 20865 08:53FB: A0 10 00     	ldy	#$10
 20866 08:53FE: B7 16        	lda	[<L870+fp_0],Y
 20867 08:5400: 29 40        	and	#<$40
 20868 08:5402: C2 20        	rep	#$20
 20869                        	longa	on
 20870 08:5404: D0 03        	bne	L874
 20871 08:5406: 82 61 01     	brl	L10492
 20872                        L874:
 20873                        	.line	4662
 20874                        ;#if !FF_FS_TINY
 20875                        ;			if (fp->flag & FA_DIRTY)
 20876                        	.line	4664
 20877                        ;			{ /* Write-back cached data if n
                    eeded */
 20878 08:5409: E2 20        	sep	#$20
 20879                        	longa	off
 20880 08:540B: A0 10 00     	ldy	#$10
 20881 08:540E: B7 16        	lda	[<L870+fp_0],Y
  Sat Jul 10 2021  1:15                                                Page 396


 20882 08:5410: 29 80        	and	#<$80
 20883 08:5412: C2 20        	rep	#$20
 20884                        	longa	on
 20885 08:5414: D0 03        	bne	L875
 20886 08:5416: 82 60 00     	brl	L10493
 20887                        L875:
 20888                        	.line	4665
 20889                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK)
 20890                        	.line	4666
 20891                        ;					LEAVE_FF(fs, FR_
                    DISK_ERR);
 20892 08:5419: F4 01 00     	pea	#<$1
 20893 08:541C: A0 1C 00     	ldy	#$1c
 20894 08:541F: B7 16        	lda	[<L870+fp_0],Y
 20895 08:5421: 48           	pha
 20896 08:5422: A0 1A 00     	ldy	#$1a
 20897 08:5425: B7 16        	lda	[<L870+fp_0],Y
 20898 08:5427: 48           	pha
 20899 08:5428: 18           	clc
 20900 08:5429: A9 26 00     	lda	#$26
 20901 08:542C: 65 16        	adc	<L870+fp_0
 20902 08:542E: 85 01        	sta	<R0
 20903 08:5430: A9 00 00     	lda	#$0
 20904 08:5433: 65 18        	adc	<L870+fp_0+2
 20905 08:5435: 85 03        	sta	<R0+2
 20906 08:5437: D4 03        	pei	<R0+2
 20907 08:5439: D4 01        	pei	<R0
 20908 08:543B: A0 01 00     	ldy	#$1
 20909 08:543E: B7 07        	lda	[<L871+fs_1],Y
 20910 08:5440: 48           	pha
 20911 08:5441: 22 xx xx xx  	jsl	~~disk_write
 20912 08:5445: AA           	tax
 20913 08:5446: D0 03        	bne	L876
 20914 08:5448: 82 15 00     	brl	L10494
 20915                        L876:
 20916                        	.line	4667
 20917 08:544B: A9 01 00     	lda	#$1
 20918                        L877:
 20919 08:544E: A8           	tay
 20920 08:544F: A5 14        	lda	<L870+2
 20921 08:5451: 85 18        	sta	<L870+2+4
 20922 08:5453: A5 13        	lda	<L870+1
 20923 08:5455: 85 17        	sta	<L870+1+4
 20924 08:5457: 2B           	pld
 20925 08:5458: 3B           	tsc
 20926 08:5459: 18           	clc
 20927 08:545A: 69 16 00     	adc	#L870+4
 20928 08:545D: 1B           	tcs
 20929 08:545E: 98           	tya
 20930 08:545F: 6B           	rtl
 20931                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 20932                        L10494:
 20933                        	.line	4668
 20934 08:5460: 18           	clc
 20935 08:5461: A9 10 00     	lda	#$10
 20936 08:5464: 65 16        	adc	<L870+fp_0
  Sat Jul 10 2021  1:15                                                Page 397


 20937 08:5466: 85 01        	sta	<R0
 20938 08:5468: A9 00 00     	lda	#$0
 20939 08:546B: 65 18        	adc	<L870+fp_0+2
 20940 08:546D: 85 03        	sta	<R0+2
 20941 08:546F: E2 20        	sep	#$20
 20942                        	longa	off
 20943 08:5471: A7 01        	lda	[<R0]
 20944 08:5473: 29 7F        	and	#<$7f
 20945 08:5475: 87 01        	sta	[<R0]
 20946 08:5477: C2 20        	rep	#$20
 20947                        	longa	on
 20948                        ;			}
 20949                        	.line	4669
 20950                        ;#endif
 20951                        ;			/* Update the directory entry */
 20952                        ;			tm = GET_FATTIME(); /* Modified 
                    time */
 20953                        L10493:
 20954                        	.line	4672
 20955 08:5479: A9 00 00     	lda	#$0
 20956 08:547C: 85 0B        	sta	<L871+tm_1
 20957 08:547E: A9 21 52     	lda	#$5221
 20958 08:5481: 85 0D        	sta	<L871+tm_1+2
 20959                        ;#if FF_FS_EXFAT
 20960                        ;			if (fs->fs_type == FS_EXFAT)
 20961                        ;			{
 20962                        ;				res = fill_first_frag(&f
                    p->obj); /* Fill first fragment on the FAT if needed */
 20963                        ;				if (res == FR_OK)
 20964                        ;				{
 20965                        ;					res = fill_last_
                    frag(&fp->obj, fp->clust, 0xFFFFFFFF); /* Fill last fragment
                     on the FAT if needed */
 20966                        ;				}
 20967                        ;				if (res == FR_OK)
 20968                        ;				{
 20969                        ;					DIR dj;
 20970                        ;					DEF_NAMBUF
 20971                        ;
 20972                        ;					INIT_NAMBUF(fs);
 20973                        ;					res = load_obj_x
                    dir(&dj, &fp->obj); /* Load directory entry block */
 20974                        ;					if (res == FR_OK
                    )
 20975                        ;					{
 20976                        ;						fs->dirb
                    uf[XDIR_Attr] |= AM_ARC; /* Set archive attribute to indicat
                    e that the file has been changed */
 20977                        ;						fs->dirb
                    uf[XDIR_GenFlags] = fp->obj.stat | 1; /* Update file allocat
                    ion information */
 20978                        ;						st_dword
                    (fs->dirbuf + XDIR_FstClus, fp->obj.sclust); /* Update start
                     cluster */
 20979                        ;						st_qword
                    (fs->dirbuf + XDIR_FileSize, fp->obj.objsize); /* Update fil
                    e size */
 20980                        ;						st_qword
  Sat Jul 10 2021  1:15                                                Page 398


                    (fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize); /* (FatF
                    s does not support Valid File Size feature) */
 20981                        ;						st_dword
                    (fs->dirbuf + XDIR_ModTime, tm); /* Update modified time */
 20982                        ;						fs->dirb
                    uf[XDIR_ModTime10] = 0;
 20983                        ;						st_dword
                    (fs->dirbuf + XDIR_AccTime, 0);
 20984                        ;						res = st
                    ore_xdir(&dj); /* Restore it to the directory */
 20985                        ;						if (res 
                    == FR_OK)
 20986                        ;						{
 20987                        ;							
                    res = sync_fs(fs);
 20988                        ;							
                    fp->flag &= (BYTE)~FA_MODIFIED;
 20989                        ;						}
 20990                        ;					}
 20991                        ;					FREE_NAMBUF();
 20992                        ;				}
 20993                        ;			}
 20994                        ;			else
 20995                        ;#endif
 20996                        ;			{
 20997                        	.line	4710
 20998                        ;				res = move_window(fs, fp
                    ->dir_sect);
 20999                        	.line	4711
 21000 08:5483: A0 20 00     	ldy	#$20
 21001 08:5486: B7 16        	lda	[<L870+fp_0],Y
 21002 08:5488: 48           	pha
 21003 08:5489: A0 1E 00     	ldy	#$1e
 21004 08:548C: B7 16        	lda	[<L870+fp_0],Y
 21005 08:548E: 48           	pha
 21006 08:548F: D4 09        	pei	<L871+fs_1+2
 21007 08:5491: D4 07        	pei	<L871+fs_1
 21008 08:5493: 22 C1 08 08  	jsl	~~move_window
 21009 08:5497: 85 05        	sta	<L871+res_1
 21010                        ;				if (res == FR_OK)
 21011                        	.line	4712
 21012                        ;				{
 21013 08:5499: A5 05        	lda	<L871+res_1
 21014 08:549B: F0 03        	beq	L878
 21015 08:549D: 82 CA 00     	brl	L10495
 21016                        L878:
 21017                        	.line	4713
 21018                        ;					dir = fp->dir_pt
                    r;
 21019                        	.line	4714
 21020 08:54A0: A0 22 00     	ldy	#$22
 21021 08:54A3: B7 16        	lda	[<L870+fp_0],Y
 21022 08:54A5: 85 0F        	sta	<L871+dir_1
 21023 08:54A7: A0 24 00     	ldy	#$24
 21024 08:54AA: B7 16        	lda	[<L870+fp_0],Y
 21025 08:54AC: 85 11        	sta	<L871+dir_1+2
 21026                        ;					dir[DIR_Attr] |=
                     AM_ARC; /* Set archive attribute to indicate that the file 
  Sat Jul 10 2021  1:15                                                Page 399


                    has been changed */
 21027                        	.line	4715
 21028 08:54AE: 18           	clc
 21029 08:54AF: A9 0B 00     	lda	#$b
 21030 08:54B2: 65 0F        	adc	<L871+dir_1
 21031 08:54B4: 85 01        	sta	<R0
 21032 08:54B6: A9 00 00     	lda	#$0
 21033 08:54B9: 65 11        	adc	<L871+dir_1+2
 21034 08:54BB: 85 03        	sta	<R0+2
 21035 08:54BD: E2 20        	sep	#$20
 21036                        	longa	off
 21037 08:54BF: A7 01        	lda	[<R0]
 21038 08:54C1: 09 20        	ora	#<$20
 21039 08:54C3: 87 01        	sta	[<R0]
 21040 08:54C5: C2 20        	rep	#$20
 21041                        	longa	on
 21042                        ;					st_clust(fp->obj
                    .fs, dir, fp->obj.sclust); /* Update file allocation informa
                    tion  */
 21043                        	.line	4716
 21044 08:54C7: A0 0A 00     	ldy	#$a
 21045 08:54CA: B7 16        	lda	[<L870+fp_0],Y
 21046 08:54CC: 48           	pha
 21047 08:54CD: A0 08 00     	ldy	#$8
 21048 08:54D0: B7 16        	lda	[<L870+fp_0],Y
 21049 08:54D2: 48           	pha
 21050 08:54D3: D4 11        	pei	<L871+dir_1+2
 21051 08:54D5: D4 0F        	pei	<L871+dir_1
 21052 08:54D7: A0 02 00     	ldy	#$2
 21053 08:54DA: B7 16        	lda	[<L870+fp_0],Y
 21054 08:54DC: 48           	pha
 21055 08:54DD: A7 16        	lda	[<L870+fp_0]
 21056 08:54DF: 48           	pha
 21057 08:54E0: 22 A6 1D 08  	jsl	~~st_clust
 21058                        ;					st_dword(dir + D
                    IR_FileSize, (DWORD) fp->obj.objsize); /* Update file size *
                    /
 21059                        	.line	4717
 21060 08:54E4: A0 0E 00     	ldy	#$e
 21061 08:54E7: B7 16        	lda	[<L870+fp_0],Y
 21062 08:54E9: 48           	pha
 21063 08:54EA: A0 0C 00     	ldy	#$c
 21064 08:54ED: B7 16        	lda	[<L870+fp_0],Y
 21065 08:54EF: 48           	pha
 21066 08:54F0: 18           	clc
 21067 08:54F1: A9 1C 00     	lda	#$1c
 21068 08:54F4: 65 0F        	adc	<L871+dir_1
 21069 08:54F6: 85 01        	sta	<R0
 21070 08:54F8: A9 00 00     	lda	#$0
 21071 08:54FB: 65 11        	adc	<L871+dir_1+2
 21072 08:54FD: 85 03        	sta	<R0+2
 21073 08:54FF: D4 03        	pei	<R0+2
 21074 08:5501: D4 01        	pei	<R0
 21075 08:5503: 22 16 01 08  	jsl	~~st_dword
 21076                        ;					st_dword(dir + D
                    IR_ModTime, tm); /* Update modified time */
 21077                        	.line	4718
 21078 08:5507: D4 0D        	pei	<L871+tm_1+2
  Sat Jul 10 2021  1:15                                                Page 400


 21079 08:5509: D4 0B        	pei	<L871+tm_1
 21080 08:550B: 18           	clc
 21081 08:550C: A9 16 00     	lda	#$16
 21082 08:550F: 65 0F        	adc	<L871+dir_1
 21083 08:5511: 85 01        	sta	<R0
 21084 08:5513: A9 00 00     	lda	#$0
 21085 08:5516: 65 11        	adc	<L871+dir_1+2
 21086 08:5518: 85 03        	sta	<R0+2
 21087 08:551A: D4 03        	pei	<R0+2
 21088 08:551C: D4 01        	pei	<R0
 21089 08:551E: 22 16 01 08  	jsl	~~st_dword
 21090                        ;					st_word(dir + DI
                    R_LstAccDate, 0);
 21091                        	.line	4719
 21092 08:5522: F4 00 00     	pea	#<$0
 21093 08:5525: 18           	clc
 21094 08:5526: A9 12 00     	lda	#$12
 21095 08:5529: 65 0F        	adc	<L871+dir_1
 21096 08:552B: 85 01        	sta	<R0
 21097 08:552D: A9 00 00     	lda	#$0
 21098 08:5530: 65 11        	adc	<L871+dir_1+2
 21099 08:5532: 85 03        	sta	<R0+2
 21100 08:5534: D4 03        	pei	<R0+2
 21101 08:5536: D4 01        	pei	<R0
 21102 08:5538: 22 D7 00 08  	jsl	~~st_word
 21103                        ;					fs->wflag = 1;
 21104                        	.line	4720
 21105 08:553C: E2 20        	sep	#$20
 21106                        	longa	off
 21107 08:553E: A9 01        	lda	#$1
 21108 08:5540: A0 03 00     	ldy	#$3
 21109 08:5543: 97 07        	sta	[<L871+fs_1],Y
 21110 08:5545: C2 20        	rep	#$20
 21111                        	longa	on
 21112                        ;					res = sync_fs(fs
                    ); /* Restore it to the directory */
 21113                        	.line	4721
 21114 08:5547: D4 09        	pei	<L871+fs_1+2
 21115 08:5549: D4 07        	pei	<L871+fs_1
 21116 08:554B: 22 4C 09 08  	jsl	~~sync_fs
 21117 08:554F: 85 05        	sta	<L871+res_1
 21118                        ;					fp->flag &= (BYT
                    E) ~FA_MODIFIED;
 21119                        	.line	4722
 21120 08:5551: 18           	clc
 21121 08:5552: A9 10 00     	lda	#$10
 21122 08:5555: 65 16        	adc	<L870+fp_0
 21123 08:5557: 85 01        	sta	<R0
 21124 08:5559: A9 00 00     	lda	#$0
 21125 08:555C: 65 18        	adc	<L870+fp_0+2
 21126 08:555E: 85 03        	sta	<R0+2
 21127 08:5560: E2 20        	sep	#$20
 21128                        	longa	off
 21129 08:5562: A7 01        	lda	[<R0]
 21130 08:5564: 29 BF        	and	#<$bf
 21131 08:5566: 87 01        	sta	[<R0]
 21132 08:5568: C2 20        	rep	#$20
 21133                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 401


 21134                        ;				}
 21135                        	.line	4723
 21136                        ;			}
 21137                        L10495:
 21138                        	.line	4724
 21139                        ;		}
 21140                        	.line	4725
 21141                        ;	}
 21142                        L10492:
 21143                        	.line	4726
 21144                        ;
 21145                        ;	LEAVE_FF(fs, res);
 21146                        L10491:
 21147                        	.line	4728
 21148 08:556A: A5 05        	lda	<L871+res_1
 21149 08:556C: 82 DF FE     	brl	L877
 21150                        ;}
 21151                        	.line	4729
 21152                        	.endblock	4729
 21153             00000012   L870	equ	18
 21154             00000005   L871	equ	5
 21155 08:556F:              	ends
 21156                        	efunc
 21157                        	.endfunc	4729,5,18
 21158                        	.line	4729
 21159                        ;
 21160                        ;#endif /* !FF_FS_READONLY */
 21161                        ;
 21162                        ;/*-----------------------------------------------
                    ------------------------*/
 21163                        ;/* Close File                                    
                                            */
 21164                        ;/*-----------------------------------------------
                    ------------------------*/
 21165                        ;
 21166                        ;FRESULT f_close(FIL* fp /* Pointer to the file ob
                    ject to be closed */
 21167                        ;)
 21168                        ;{
 21169                        	.line	4737
 21170                        	.line	4739
 21171                        	FFDOS
 21172                        	xdef	~~f_close
 21173                        	func
 21174                        	.function	4739
 21175                        ~~f_close:
 21176                        	longa	on
 21177                        	longi	on
 21178 08:556F: 3B           	tsc
 21179 08:5570: 38           	sec
 21180 08:5571: E9 06 00     	sbc	#L879
 21181 08:5574: 1B           	tcs
 21182 08:5575: 0B           	phd
 21183 08:5576: 5B           	tcd
 21184             00000004   fp_0	set	4
 21185                        	.block	4739
 21186                        ;	FRESULT res;
 21187                        ;	FATFS *fs;
  Sat Jul 10 2021  1:15                                                Page 402


 21188                        ;
 21189                        ;#if !FF_FS_READONLY
 21190                        ;	res = f_sync(fp); /* Flush cached data */
 21191             00000000   res_1	set	0
 21192             00000002   fs_1	set	2
 21193                        	.sym	res,0,5,1,16
 21194                        	.sym	fs,2,138,1,32,72
 21195                        	.sym	fp,4,138,6,32,74
 21196                        	.line	4744
 21197 08:5577: D4 0C        	pei	<L879+fp_0+2
 21198 08:5579: D4 0A        	pei	<L879+fp_0
 21199 08:557B: 22 D7 53 08  	jsl	~~f_sync
 21200 08:557F: 85 01        	sta	<L880+res_1
 21201                        ;	if (res == FR_OK)
 21202                        	.line	4745
 21203                        ;#endif
 21204                        ;	{
 21205 08:5581: A5 01        	lda	<L880+res_1
 21206 08:5583: F0 03        	beq	L882
 21207 08:5585: 82 27 00     	brl	L10496
 21208                        L882:
 21209                        	.line	4747
 21210                        ;		res = validate(&fp->obj, &fs); /* Lock v
                    olume */
 21211                        	.line	4748
 21212 08:5588: F4 00 00     	pea	#0
 21213 08:558B: 18           	clc
 21214 08:558C: 7B           	tdc
 21215 08:558D: 69 03 00     	adc	#<L880+fs_1
 21216 08:5590: 48           	pha
 21217 08:5591: D4 0C        	pei	<L879+fp_0+2
 21218 08:5593: D4 0A        	pei	<L879+fp_0
 21219 08:5595: 22 8B 44 08  	jsl	~~validate
 21220 08:5599: 85 01        	sta	<L880+res_1
 21221                        ;		if (res == FR_OK)
 21222                        	.line	4749
 21223                        ;		{
 21224 08:559B: A5 01        	lda	<L880+res_1
 21225 08:559D: F0 03        	beq	L883
 21226 08:559F: 82 0D 00     	brl	L10497
 21227                        L883:
 21228                        	.line	4750
 21229                        ;#if FF_FS_LOCK != 0
 21230                        ;			res = dec_lock(fp->obj.lockid); 
                    /* Decrement file open counter */
 21231                        ;			if (res == FR_OK) fp->obj.fs = 0
                    ; /* Invalidate file object */
 21232                        ;#else
 21233                        ;			fp->obj.fs = 0; /* Invalidate fi
                    le object */
 21234                        	.line	4755
 21235 08:55A2: A9 00 00     	lda	#$0
 21236 08:55A5: 87 0A        	sta	[<L879+fp_0]
 21237 08:55A7: A9 00 00     	lda	#$0
 21238 08:55AA: A0 02 00     	ldy	#$2
 21239 08:55AD: 97 0A        	sta	[<L879+fp_0],Y
 21240                        ;#endif
 21241                        ;#if FF_FS_REENTRANT
  Sat Jul 10 2021  1:15                                                Page 403


 21242                        ;			unlock_fs(fs, FR_OK); /* Unlock 
                    volume */
 21243                        ;#endif
 21244                        ;		}
 21245                        	.line	4760
 21246                        ;	}
 21247                        L10497:
 21248                        	.line	4761
 21249                        ;	return res;
 21250                        L10496:
 21251                        	.line	4762
 21252 08:55AF: A5 01        	lda	<L880+res_1
 21253                        L884:
 21254 08:55B1: A8           	tay
 21255 08:55B2: A5 08        	lda	<L879+2
 21256 08:55B4: 85 0C        	sta	<L879+2+4
 21257 08:55B6: A5 07        	lda	<L879+1
 21258 08:55B8: 85 0B        	sta	<L879+1+4
 21259 08:55BA: 2B           	pld
 21260 08:55BB: 3B           	tsc
 21261 08:55BC: 18           	clc
 21262 08:55BD: 69 0A 00     	adc	#L879+4
 21263 08:55C0: 1B           	tcs
 21264 08:55C1: 98           	tya
 21265 08:55C2: 6B           	rtl
 21266                        ;}
 21267                        	.line	4763
 21268                        	.endblock	4763
 21269             00000006   L879	equ	6
 21270             00000001   L880	equ	1
 21271 08:55C3:              	ends
 21272                        	efunc
 21273                        	.endfunc	4763,1,6
 21274                        	.line	4763
 21275                        ;
 21276                        ;#if FF_FS_RPATH >= 1
 21277                        ;/*-----------------------------------------------
                    ------------------------*/
 21278                        ;/* Change Current Directory or Current Drive, Get
                     Current Directory      */
 21279                        ;/*-----------------------------------------------
                    ------------------------*/
 21280                        ;
 21281                        ;FRESULT f_chdrive (
 21282                        ;		const TCHAR* path /* Drive number to set
                     */
 21283                        ;)
 21284                        ;{
 21285                        ;	int vol;
 21286                        ;
 21287                        ;	/* Get logical drive number */
 21288                        ;	vol = get_ldnumber(&path);
 21289                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 21290                        ;	CurrVol = (BYTE)vol; /* Set it as current volume
                     */
 21291                        ;
 21292                        ;	return FR_OK;
 21293                        ;}
  Sat Jul 10 2021  1:15                                                Page 404


 21294                        ;
 21295                        ;FRESULT f_chdir (
 21296                        ;		const TCHAR* path /* Pointer to the dire
                    ctory path */
 21297                        ;)
 21298                        ;{
 21299                        ;#if FF_STR_VOLUME_ID == 2
 21300                        ;	UINT i;
 21301                        ;#endif
 21302                        ;	FRESULT res;
 21303                        ;	DIR dj;
 21304                        ;	FATFS *fs;
 21305                        ;	DEF_NAMBUF
 21306                        ;
 21307                        ;	////k_debug_string( "f_chdir...\r\n");
 21308                        ;
 21309                        ;	/* Get logical drive */
 21310                        ;	res = mount_volume(&path, &fs, 0);
 21311                        ;	if (res == FR_OK)
 21312                        ;	{
 21313                        ;		dj.obj.fs = fs;
 21314                        ;		INIT_NAMBUF(fs);
 21315                        ;		res = follow_path(&dj, path); /* Follow 
                    the path */
 21316                        ;		if (res == FR_OK)
 21317                        ;		{ /* Follow completed */
 21318                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 21319                        ;			{ /* Is it the start directory i
                    tself? */
 21320                        ;				fs->cdir = dj.obj.sclust
                    ;
 21321                        ;#if FF_FS_EXFAT
 21322                        ;				if (fs->fs_type == FS_EX
                    FAT)
 21323                        ;				{
 21324                        ;					fs->cdc_scl = dj
                    .obj.c_scl;
 21325                        ;					fs->cdc_size = d
                    j.obj.c_size;
 21326                        ;					fs->cdc_ofs = dj
                    .obj.c_ofs;
 21327                        ;				}
 21328                        ;#endif
 21329                        ;			}
 21330                        ;			else
 21331                        ;			{
 21332                        ;				if (dj.obj.attr & AM_DIR
                    )
 21333                        ;				{ /* It is a sub-directo
                    ry */
 21334                        ;#if FF_FS_EXFAT
 21335                        ;					if (fs->fs_type 
                    == FS_EXFAT)
 21336                        ;					{
 21337                        ;						fs->cdir
                     = ld_dword(fs->dirbuf + XDIR_FstClus); /* Sub-directory clu
                    ster */
 21338                        ;						fs->cdc_
  Sat Jul 10 2021  1:15                                                Page 405


                    scl = dj.obj.sclust; /* Save containing directory informatio
                    n */
 21339                        ;						fs->cdc_
                    size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 21340                        ;						fs->cdc_
                    ofs = dj.blk_ofs;
 21341                        ;					}
 21342                        ;					else
 21343                        ;#endif
 21344                        ;					{
 21345                        ;						fs->cdir
                     = ld_clust(fs, dj.dir); /* Sub-directory cluster */
 21346                        ;					}
 21347                        ;				}
 21348                        ;				else
 21349                        ;				{
 21350                        ;					res = FR_NO_PATH
                    ; /* Reached but a file */
 21351                        ;				}
 21352                        ;			}
 21353                        ;		}
 21354                        ;		FREE_NAMBUF();
 21355                        ;		if (res == FR_NO_FILE) res = FR_NO_PATH;
 21356                        ;#if FF_STR_VOLUME_ID == 2	/* Also current 
                    drive is changed at Unix style volume ID */
 21357                        ;		if (res == FR_OK)
 21358                        ;		{
 21359                        ;			for (i = FF_VOLUMES - 1; i && fs
                     != FatFs[i]; i--); /* Set current drive */
 21360                        ;			CurrVol = (BYTE)i;
 21361                        ;		}
 21362                        ;#endif
 21363                        ;	}
 21364                        ;
 21365                        ;	LEAVE_FF(fs, res);
 21366                        ;}
 21367                        ;
 21368                        ;#if FF_FS_RPATH >= 2
 21369                        ;FRESULT f_getcwd (
 21370                        ;		TCHAR* buff, /* Pointer to the directory
                     path */
 21371                        ;		UINT len /* Size of buff in unit of TCHA
                    R */
 21372                        ;)
 21373                        ;{
 21374                        ;	FRESULT res;
 21375                        ;	DIR dj;
 21376                        ;	FATFS *fs;
 21377                        ;	UINT i, n;
 21378                        ;	DWORD ccl;
 21379                        ;	TCHAR *tp = buff;
 21380                        ;#if FF_VOLUMES >= 2
 21381                        ;	UINT vl;
 21382                        ;#if FF_STR_VOLUME_ID
 21383                        ;	const char *vp;
 21384                        ;#endif
 21385                        ;#endif
 21386                        ;	FILINFO fno;
  Sat Jul 10 2021  1:15                                                Page 406


 21387                        ;	DEF_NAMBUF
 21388                        ;
 21389                        ;	/* Get logical drive */
 21390                        ;	buff[0] = 0; /* Set null string to get current v
                    olume */
 21391                        ;	res = mount_volume((const TCHAR**)&buff, &fs, 0)
                    ; /* Get current volume */
 21392                        ;	if (res == FR_OK)
 21393                        ;	{
 21394                        ;		dj.obj.fs = fs;
 21395                        ;		INIT_NAMBUF(fs);
 21396                        ;
 21397                        ;		/* Follow parent directories and create 
                    the path */
 21398                        ;		i = len; /* Bottom of buffer (directory 
                    stack base) */
 21399                        ;		if (!FF_FS_EXFAT || fs->fs_type != FS_EX
                    FAT)
 21400                        ;		{ /* (Cannot do getcwd on exFAT and retu
                    rns root path) */
 21401                        ;			dj.obj.sclust = fs->cdir; /* Sta
                    rt to follow upper directory from current directory */
 21402                        ;			while ((ccl = dj.obj.sclust) != 
                    0)
 21403                        ;			{ /* Repeat while current direct
                    ory is a sub-directory */
 21404                        ;				res = dir_sdi(&dj, 1 * S
                    ZDIRE); /* Get parent directory */
 21405                        ;				if (res != FR_OK) break;
 21406                        ;				res = move_window(fs, dj
                    .sect);
 21407                        ;				if (res != FR_OK) break;
 21408                        ;				dj.obj.sclust = ld_clust
                    (fs, dj.dir); /* Goto parent directory */
 21409                        ;				res = dir_sdi(&dj, 0);
 21410                        ;				if (res != FR_OK) break;
 21411                        ;				do
 21412                        ;				{ /* Find the entry link
                    s to the child directory */
 21413                        ;					res = DIR_READ_F
                    ILE(&dj);
 21414                        ;					if (res != FR_OK
                    ) break;
 21415                        ;					if (ccl == ld_cl
                    ust(fs, dj.dir)) break; /* Found the entry */
 21416                        ;					res = dir_next(&
                    dj, 0);
 21417                        ;				}while (res == FR_OK);
 21418                        ;				if (res == FR_NO_FILE) r
                    es = FR_INT_ERR;/* It cannot be 'not found'. */
 21419                        ;				if (res != FR_OK) break;
 21420                        ;				get_fileinfo(&dj, &fno);
                     /* Get the directory name and push it to the buffer */
 21421                        ;				for (n = 0; fno.fname[n]
                    ; n++); /* Name length */
 21422                        ;				if (i < n + 1)
 21423                        ;				{ /* Insufficient space 
                    to store the path name? */
  Sat Jul 10 2021  1:15                                                Page 407


 21424                        ;					res = FR_NOT_ENO
                    UGH_CORE; break;
 21425                        ;				}
 21426                        ;				while (n) buff[--i] = fn
                    o.fname[--n]; /* Stack the name */
 21427                        ;				buff[--i] = '/';
 21428                        ;			}
 21429                        ;		}
 21430                        ;		if (res == FR_OK)
 21431                        ;		{
 21432                        ;			if (i == len) buff[--i] = '/'; /
                    * Is it the root-directory? */
 21433                        ;#if FF_VOLUMES >= 2			/* Put d
                    rive prefix */
 21434                        ;			vl = 0;
 21435                        ;#if FF_STR_VOLUME_ID >= 1	/* String volume
                     ID */
 21436                        ;			for (n = 0, vp = (const char*)Vo
                    lumeStr[CurrVol]; vp[n]; n++);
 21437                        ;			if (i >= n + 2)
 21438                        ;			{
 21439                        ;				if (FF_STR_VOLUME_ID == 
                    2) *tp++ = (TCHAR)'/';
 21440                        ;				for (vl = 0; vl < n; *tp
                    ++ = (TCHAR)vp[vl], vl++);
 21441                        ;				if (FF_STR_VOLUME_ID == 
                    1) *tp++ = (TCHAR)':';
 21442                        ;				vl++;
 21443                        ;			}
 21444                        ;#else						
                    /* Numeric volume ID */
 21445                        ;			if (i >= 3)
 21446                        ;			{
 21447                        ;				*tp++ = (TCHAR)'0' + Cur
                    rVol;
 21448                        ;				*tp++ = (TCHAR)':';
 21449                        ;				vl = 2;
 21450                        ;			}
 21451                        ;#endif
 21452                        ;			if (vl == 0) res = FR_NOT_ENOUGH
                    _CORE;
 21453                        ;#endif
 21454                        ;			/* Add current directory path */
 21455                        ;			if (res == FR_OK)
 21456                        ;			{
 21457                        ;				do *tp++ = buff[i++]; wh
                    ile (i < len); /* Copy stacked path string */
 21458                        ;			}
 21459                        ;		}
 21460                        ;		FREE_NAMBUF();
 21461                        ;	}
 21462                        ;
 21463                        ;	*tp = 0;
 21464                        ;	LEAVE_FF(fs, res);
 21465                        ;}
 21466                        ;
 21467                        ;#endif /* FF_FS_RPATH >= 2 */
 21468                        ;#endif /* FF_FS_RPATH >= 1 */
  Sat Jul 10 2021  1:15                                                Page 408


 21469                        ;
 21470                        ;#if FF_FS_MINIMIZE <= 2
 21471                        ;/*-----------------------------------------------
                    ------------------------*/
 21472                        ;/* Seek File Read/Write Pointer                  
                                            */
 21473                        ;/*-----------------------------------------------
                    ------------------------*/
 21474                        ;
 21475                        ;FRESULT f_lseek(FIL* fp, /* Pointer to the file o
                    bject */
 21476                        ;FSIZE_t ofs /* File pointer from top of file */
 21477                        ;)
 21478                        ;{
 21479                        	.line	4964
 21480                        	.line	4967
 21481                        	FFDOS
 21482                        	xdef	~~f_lseek
 21483                        	func
 21484                        	.function	4967
 21485                        ~~f_lseek:
 21486                        	longa	on
 21487                        	longi	on
 21488 08:55C3: 3B           	tsc
 21489 08:55C4: 38           	sec
 21490 08:55C5: E9 22 00     	sbc	#L885
 21491 08:55C8: 1B           	tcs
 21492 08:55C9: 0B           	phd
 21493 08:55CA: 5B           	tcd
 21494             00000004   fp_0	set	4
 21495             00000008   ofs_0	set	8
 21496                        	.block	4967
 21497                        ;	FRESULT res;
 21498                        ;	FATFS *fs;
 21499                        ;	DWORD clst, bcs;
 21500                        ;	LBA_t nsect;
 21501                        ;	FSIZE_t ifptr;
 21502                        ;#if FF_USE_FASTSEEK
 21503                        ;	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
 21504                        ;	LBA_t dsc;
 21505                        ;#endif
 21506                        ;
 21507                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 21508             00000000   res_1	set	0
 21509             00000002   fs_1	set	2
 21510             00000006   clst_1	set	6
 21511             0000000A   bcs_1	set	10
 21512             0000000E   nsect_1	set	14
 21513             00000012   ifptr_1	set	18
 21514                        	.sym	res,0,5,1,16
 21515                        	.sym	fs,2,138,1,32,72
 21516                        	.sym	clst,6,18,1,32
 21517                        	.sym	bcs,10,18,1,32
 21518                        	.sym	nsect,14,18,1,32
 21519                        	.sym	ifptr,18,18,1,32
 21520                        	.sym	fp,4,138,6,32,74
 21521                        	.sym	ofs,8,18,6,32
  Sat Jul 10 2021  1:15                                                Page 409


 21522                        	.line	4978
 21523 08:55CB: F4 00 00     	pea	#0
 21524 08:55CE: 18           	clc
 21525 08:55CF: 7B           	tdc
 21526 08:55D0: 69 0F 00     	adc	#<L886+fs_1
 21527 08:55D3: 48           	pha
 21528 08:55D4: D4 28        	pei	<L885+fp_0+2
 21529 08:55D6: D4 26        	pei	<L885+fp_0
 21530 08:55D8: 22 8B 44 08  	jsl	~~validate
 21531 08:55DC: 85 0D        	sta	<L886+res_1
 21532                        ;	if (res == FR_OK)
 21533                        	.line	4979
 21534                        ;		res = (FRESULT) fp->err;
 21535 08:55DE: A5 0D        	lda	<L886+res_1
 21536 08:55E0: F0 03        	beq	L888
 21537 08:55E2: 82 0A 00     	brl	L10498
 21538                        L888:
 21539                        	.line	4980
 21540 08:55E5: A0 11 00     	ldy	#$11
 21541 08:55E8: B7 26        	lda	[<L885+fp_0],Y
 21542 08:55EA: 29 FF 00     	and	#$ff
 21543 08:55ED: 85 0D        	sta	<L886+res_1
 21544                        ;#if FF_FS_EXFAT && !FF_FS_READONLY
 21545                        ;	if (res == FR_OK && fs->fs_type == FS_EXFAT)
 21546                        ;	{
 21547                        ;		res = fill_last_frag(&fp->obj, fp->clust
                    , 0xFFFFFFFF); /* Fill last fragment on the FAT if needed */
 21548                        ;	}
 21549                        ;#endif
 21550                        ;	if (res != FR_OK)
 21551                        L10498:
 21552                        	.line	4987
 21553                        ;		LEAVE_FF(fs, res);
 21554 08:55EF: A5 0D        	lda	<L886+res_1
 21555 08:55F1: D0 03        	bne	L889
 21556 08:55F3: 82 14 00     	brl	L10499
 21557                        L889:
 21558                        	.line	4988
 21559 08:55F6: A5 0D        	lda	<L886+res_1
 21560                        L890:
 21561 08:55F8: A8           	tay
 21562 08:55F9: A5 24        	lda	<L885+2
 21563 08:55FB: 85 2C        	sta	<L885+2+8
 21564 08:55FD: A5 23        	lda	<L885+1
 21565 08:55FF: 85 2B        	sta	<L885+1+8
 21566 08:5601: 2B           	pld
 21567 08:5602: 3B           	tsc
 21568 08:5603: 18           	clc
 21569 08:5604: 69 2A 00     	adc	#L885+8
 21570 08:5607: 1B           	tcs
 21571 08:5608: 98           	tya
 21572 08:5609: 6B           	rtl
 21573                        ;
 21574                        ;#if FF_USE_FASTSEEK
 21575                        ;	if (fp->cltbl)
 21576                        ;	{ /* Fast seek */
 21577                        ;		if (ofs == CREATE_LINKMAP)
 21578                        ;		{ /* Create CLMT */
  Sat Jul 10 2021  1:15                                                Page 410


 21579                        ;			tbl = fp->cltbl;
 21580                        ;			tlen = *tbl++; ulen = 2; /* Give
                    n table size and required table size */
 21581                        ;			cl = fp->obj.sclust; /* Origin o
                    f the chain */
 21582                        ;			if (cl != 0)
 21583                        ;			{
 21584                        ;				do
 21585                        ;				{
 21586                        ;					/* Get a fragmen
                    t */
 21587                        ;					tcl = cl; ncl = 
                    0; ulen += 2; /* Top, length and used items */
 21588                        ;					do
 21589                        ;					{
 21590                        ;						pcl = cl
                    ; ncl++;
 21591                        ;						cl = get
                    _fat(&fp->obj, cl);
 21592                        ;						if (cl <
                    = 1) ABORT(fs, FR_INT_ERR);
 21593                        ;						if (cl =
                    = 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 21594                        ;					}while (cl == pc
                    l + 1);
 21595                        ;					if (ulen <= tlen
                    )
 21596                        ;					{ /* Store the l
                    ength and top of the fragment */
 21597                        ;						*tbl++ =
                     ncl; *tbl++ = tcl;
 21598                        ;					}
 21599                        ;				}while (cl < fs->n_faten
                    t); /* Repeat until end of chain */
 21600                        ;			}
 21601                        ;			*fp->cltbl = ulen; /* Number of 
                    items used */
 21602                        ;			if (ulen <= tlen)
 21603                        ;			{
 21604                        ;				*tbl = 0; /* Terminate t
                    able */
 21605                        ;			}
 21606                        ;			else
 21607                        ;			{
 21608                        ;				res = FR_NOT_ENOUGH_CORE
                    ; /* Given table size is smaller than required */
 21609                        ;			}
 21610                        ;		}
 21611                        ;		else
 21612                        ;		{ /* Fast seek */
 21613                        ;			if (ofs > fp->obj.objsize) ofs =
                     fp->obj.objsize; /* Clip offset at the file size */
 21614                        ;			fp->fptr = ofs; /* Set file poin
                    ter */
 21615                        ;			if (ofs > 0)
 21616                        ;			{
 21617                        ;				fp->clust = clmt_clust(f
                    p, ofs - 1);
  Sat Jul 10 2021  1:15                                                Page 411


 21618                        ;				dsc = clst2sect(fs, fp->
                    clust);
 21619                        ;				if (dsc == 0) ABORT(fs, 
                    FR_INT_ERR);
 21620                        ;				dsc += (DWORD)((ofs - 1)
                     / SS(fs)) & (fs->csize - 1);
 21621                        ;				if (fp->fptr % SS(fs) &&
                     dsc != fp->sect)
 21622                        ;				{ /* Refill sector cache
                     if needed */
 21623                        ;#if !FF_FS_TINY
 21624                        ;#if !FF_FS_READONLY
 21625                        ;					if (fp->flag & F
                    A_DIRTY)
 21626                        ;					{ /* Write-back 
                    dirty sector cache */
 21627                        ;						if (disk
                    _write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, 
                    FR_DISK_ERR);
 21628                        ;						fp->flag
                     &= (BYTE)~FA_DIRTY;
 21629                        ;					}
 21630                        ;#endif
 21631                        ;					if (disk_read(fs
                    ->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR); 
                    /* Load current sector */
 21632                        ;#endif
 21633                        ;					fp->sect = dsc;
 21634                        ;				}
 21635                        ;			}
 21636                        ;		}
 21637                        ;	}
 21638                        ;	else
 21639                        ;#endif
 21640                        ;
 21641                        ;	/* Normal Seek */
 21642                        ;	{
 21643                        L10499:
 21644                        	.line	5058
 21645                        ;#if FF_FS_EXFAT
 21646                        ;		if (fs->fs_type != FS_EXFAT && ofs >= 0x
                    100000000) ofs = 0xFFFFFFFF; /* Clip at 4 GiB - 1 if at FATx
                    x */
 21647                        ;#endif
 21648                        ;		if (ofs > fp->obj.objsize && (FF_FS_READ
                    ONLY || !(fp->flag & FA_WRITE)))
 21649                        	.line	5062
 21650                        ;		{ /* In read-only mode, clip offset with
                     the file size */
 21651 08:560A: A0 0C 00     	ldy	#$c
 21652 08:560D: B7 26        	lda	[<L885+fp_0],Y
 21653 08:560F: C5 2A        	cmp	<L885+ofs_0
 21654 08:5611: A0 0E 00     	ldy	#$e
 21655 08:5614: B7 26        	lda	[<L885+fp_0],Y
 21656 08:5616: E5 2C        	sbc	<L885+ofs_0+2
 21657 08:5618: 90 03        	bcc	L891
 21658 08:561A: 82 1E 00     	brl	L10500
 21659                        L891:
  Sat Jul 10 2021  1:15                                                Page 412


 21660 08:561D: E2 20        	sep	#$20
 21661                        	longa	off
 21662 08:561F: A0 10 00     	ldy	#$10
 21663 08:5622: B7 26        	lda	[<L885+fp_0],Y
 21664 08:5624: 29 02        	and	#<$2
 21665 08:5626: C2 20        	rep	#$20
 21666                        	longa	on
 21667 08:5628: F0 03        	beq	L893
 21668 08:562A: 82 0E 00     	brl	L10500
 21669                        L893:
 21670                        L892:
 21671                        	.line	5063
 21672                        ;			ofs = fp->obj.objsize;
 21673                        	.line	5064
 21674 08:562D: A0 0C 00     	ldy	#$c
 21675 08:5630: B7 26        	lda	[<L885+fp_0],Y
 21676 08:5632: 85 2A        	sta	<L885+ofs_0
 21677 08:5634: A0 0E 00     	ldy	#$e
 21678 08:5637: B7 26        	lda	[<L885+fp_0],Y
 21679 08:5639: 85 2C        	sta	<L885+ofs_0+2
 21680                        ;		}
 21681                        	.line	5065
 21682                        ;		ifptr = fp->fptr;
 21683                        L10500:
 21684                        	.line	5066
 21685 08:563B: A0 12 00     	ldy	#$12
 21686 08:563E: B7 26        	lda	[<L885+fp_0],Y
 21687 08:5640: 85 1F        	sta	<L886+ifptr_1
 21688 08:5642: A0 14 00     	ldy	#$14
 21689 08:5645: B7 26        	lda	[<L885+fp_0],Y
 21690 08:5647: 85 21        	sta	<L886+ifptr_1+2
 21691                        ;		fp->fptr = nsect = 0;
 21692                        	.line	5067
 21693 08:5649: 64 1B        	stz	<L886+nsect_1
 21694 08:564B: 64 1D        	stz	<L886+nsect_1+2
 21695 08:564D: A9 00 00     	lda	#$0
 21696 08:5650: A0 12 00     	ldy	#$12
 21697 08:5653: 97 26        	sta	[<L885+fp_0],Y
 21698 08:5655: A9 00 00     	lda	#$0
 21699 08:5658: A0 14 00     	ldy	#$14
 21700 08:565B: 97 26        	sta	[<L885+fp_0],Y
 21701                        ;		if (ofs > 0)
 21702                        	.line	5068
 21703                        ;		{
 21704 08:565D: A9 00 00     	lda	#$0
 21705 08:5660: C5 2A        	cmp	<L885+ofs_0
 21706 08:5662: A9 00 00     	lda	#$0
 21707 08:5665: E5 2C        	sbc	<L885+ofs_0+2
 21708 08:5667: 90 03        	bcc	L894
 21709 08:5669: 82 18 03     	brl	L10501
 21710                        L894:
 21711                        	.line	5069
 21712                        ;			bcs = (DWORD) fs->csize * SS(fs)
                    ; /* Cluster size (byte) */
 21713                        	.line	5070
 21714 08:566C: A0 00 00     	ldy	#$0
 21715 08:566F: 5A           	phy
 21716 08:5670: A0 09 00     	ldy	#$9
  Sat Jul 10 2021  1:15                                                Page 413


 21717 08:5673: B7 0F        	lda	[<L886+fs_1],Y
 21718 08:5675: 7A           	ply
 21719 08:5676: 2A           	rol	A
 21720 08:5677: 6A           	ror	A
 21721 08:5678: 10 01        	bpl	L895
 21722 08:567A: 88           	dey
 21723                        L895:
 21724 08:567B: 85 01        	sta	<R0
 21725 08:567D: 84 03        	sty	<R0+2
 21726 08:567F: D4 03        	pei	<R0+2
 21727 08:5681: D4 01        	pei	<R0
 21728 08:5683: A9 09 00     	lda	#$9
 21729                        	xref	~~~lasl
 21730 08:5686: 22 xx xx xx  	jsl	~~~lasl
 21731 08:568A: 85 17        	sta	<L886+bcs_1
 21732 08:568C: 86 19        	stx	<L886+bcs_1+2
 21733                        ;			if (ifptr > 0 && (ofs - 1) / bcs
                     >= (ifptr - 1) / bcs)
 21734                        	.line	5071
 21735                        ;			{ /* When seek to same or follow
                    ing cluster, */
 21736 08:568E: A9 00 00     	lda	#$0
 21737 08:5691: C5 1F        	cmp	<L886+ifptr_1
 21738 08:5693: A9 00 00     	lda	#$0
 21739 08:5696: E5 21        	sbc	<L886+ifptr_1+2
 21740 08:5698: 90 03        	bcc	L896
 21741 08:569A: 82 B5 00     	brl	L10502
 21742                        L896:
 21743 08:569D: 18           	clc
 21744 08:569E: A9 FF FF     	lda	#$ffff
 21745 08:56A1: 65 1F        	adc	<L886+ifptr_1
 21746 08:56A3: 85 01        	sta	<R0
 21747 08:56A5: A9 FF FF     	lda	#$ffff
 21748 08:56A8: 65 21        	adc	<L886+ifptr_1+2
 21749 08:56AA: 85 03        	sta	<R0+2
 21750 08:56AC: D4 19        	pei	<L886+bcs_1+2
 21751 08:56AE: D4 17        	pei	<L886+bcs_1
 21752 08:56B0: D4 03        	pei	<R0+2
 21753 08:56B2: D4 01        	pei	<R0
 21754                        	xref	~~~ludv
 21755 08:56B4: 22 xx xx xx  	jsl	~~~ludv
 21756 08:56B8: 85 01        	sta	<R0
 21757 08:56BA: 86 03        	stx	<R0+2
 21758 08:56BC: 18           	clc
 21759 08:56BD: A9 FF FF     	lda	#$ffff
 21760 08:56C0: 65 2A        	adc	<L885+ofs_0
 21761 08:56C2: 85 05        	sta	<R1
 21762 08:56C4: A9 FF FF     	lda	#$ffff
 21763 08:56C7: 65 2C        	adc	<L885+ofs_0+2
 21764 08:56C9: 85 07        	sta	<R1+2
 21765 08:56CB: D4 19        	pei	<L886+bcs_1+2
 21766 08:56CD: D4 17        	pei	<L886+bcs_1
 21767 08:56CF: D4 07        	pei	<R1+2
 21768 08:56D1: D4 05        	pei	<R1
 21769                        	xref	~~~ludv
 21770 08:56D3: 22 xx xx xx  	jsl	~~~ludv
 21771 08:56D7: 85 05        	sta	<R1
 21772 08:56D9: 86 07        	stx	<R1+2
  Sat Jul 10 2021  1:15                                                Page 414


 21773 08:56DB: A5 05        	lda	<R1
 21774 08:56DD: C5 01        	cmp	<R0
 21775 08:56DF: A5 07        	lda	<R1+2
 21776 08:56E1: E5 03        	sbc	<R0+2
 21777 08:56E3: B0 03        	bcs	L897
 21778 08:56E5: 82 6A 00     	brl	L10502
 21779                        L897:
 21780                        	.line	5072
 21781                        ;				fp->fptr = (ifptr - 1) &
                     ~(FSIZE_t) (bcs - 1); /* start from the current cluster */
 21782                        	.line	5073
 21783 08:56E8: 18           	clc
 21784 08:56E9: A9 FF FF     	lda	#$ffff
 21785 08:56EC: 65 1F        	adc	<L886+ifptr_1
 21786 08:56EE: 85 01        	sta	<R0
 21787 08:56F0: A9 FF FF     	lda	#$ffff
 21788 08:56F3: 65 21        	adc	<L886+ifptr_1+2
 21789 08:56F5: 85 03        	sta	<R0+2
 21790 08:56F7: 18           	clc
 21791 08:56F8: A9 FF FF     	lda	#$ffff
 21792 08:56FB: 65 17        	adc	<L886+bcs_1
 21793 08:56FD: 85 05        	sta	<R1
 21794 08:56FF: A9 FF FF     	lda	#$ffff
 21795 08:5702: 65 19        	adc	<L886+bcs_1+2
 21796 08:5704: 85 07        	sta	<R1+2
 21797 08:5706: A5 05        	lda	<R1
 21798 08:5708: 49 FF FF     	eor	#<$ffffffff
 21799 08:570B: 85 09        	sta	<R2
 21800 08:570D: A5 07        	lda	<R1+2
 21801 08:570F: 49 FF FF     	eor	#^$ffffffff
 21802 08:5712: 85 0B        	sta	<R2+2
 21803 08:5714: A5 09        	lda	<R2
 21804 08:5716: 25 01        	and	<R0
 21805 08:5718: 85 05        	sta	<R1
 21806 08:571A: A5 0B        	lda	<R2+2
 21807 08:571C: 25 03        	and	<R0+2
 21808 08:571E: 85 07        	sta	<R1+2
 21809 08:5720: A5 05        	lda	<R1
 21810 08:5722: A0 12 00     	ldy	#$12
 21811 08:5725: 97 26        	sta	[<L885+fp_0],Y
 21812 08:5727: A5 07        	lda	<R1+2
 21813 08:5729: A0 14 00     	ldy	#$14
 21814 08:572C: 97 26        	sta	[<L885+fp_0],Y
 21815                        ;				ofs -= fp->fptr;
 21816                        	.line	5074
 21817 08:572E: 38           	sec
 21818 08:572F: A5 2A        	lda	<L885+ofs_0
 21819 08:5731: A0 12 00     	ldy	#$12
 21820 08:5734: F7 26        	sbc	[<L885+fp_0],Y
 21821 08:5736: 85 2A        	sta	<L885+ofs_0
 21822 08:5738: A5 2C        	lda	<L885+ofs_0+2
 21823 08:573A: A0 14 00     	ldy	#$14
 21824 08:573D: F7 26        	sbc	[<L885+fp_0],Y
 21825 08:573F: 85 2C        	sta	<L885+ofs_0+2
 21826                        ;				clst = fp->clust;
 21827                        	.line	5075
 21828 08:5741: A0 16 00     	ldy	#$16
 21829 08:5744: B7 26        	lda	[<L885+fp_0],Y
  Sat Jul 10 2021  1:15                                                Page 415


 21830 08:5746: 85 13        	sta	<L886+clst_1
 21831 08:5748: A0 18 00     	ldy	#$18
 21832 08:574B: B7 26        	lda	[<L885+fp_0],Y
 21833 08:574D: 85 15        	sta	<L886+clst_1+2
 21834                        ;			}
 21835                        	.line	5076
 21836                        ;			else
 21837 08:574F: 82 89 00     	brl	L10503
 21838                        L10502:
 21839                        ;			{ /* When seek to back cluster, 
                    */
 21840                        	.line	5078
 21841                        ;				clst = fp->obj.sclust; /
                    * start from the first cluster */
 21842                        	.line	5079
 21843 08:5752: A0 08 00     	ldy	#$8
 21844 08:5755: B7 26        	lda	[<L885+fp_0],Y
 21845 08:5757: 85 13        	sta	<L886+clst_1
 21846 08:5759: A0 0A 00     	ldy	#$a
 21847 08:575C: B7 26        	lda	[<L885+fp_0],Y
 21848 08:575E: 85 15        	sta	<L886+clst_1+2
 21849                        ;#if !FF_FS_READONLY
 21850                        ;				if (clst == 0)
 21851                        	.line	5081
 21852                        ;				{ /* If no cluster chain
                    , create a new chain */
 21853 08:5760: A5 13        	lda	<L886+clst_1
 21854 08:5762: 05 15        	ora	<L886+clst_1+2
 21855 08:5764: F0 03        	beq	L898
 21856 08:5766: 82 64 00     	brl	L10504
 21857                        L898:
 21858                        	.line	5082
 21859                        ;					clst = create_ch
                    ain(&fp->obj, 0);
 21860                        	.line	5083
 21861 08:5769: F4 00 00     	pea	#^$0
 21862 08:576C: F4 00 00     	pea	#<$0
 21863 08:576F: D4 28        	pei	<L885+fp_0+2
 21864 08:5771: D4 26        	pei	<L885+fp_0
 21865 08:5773: 22 93 12 08  	jsl	~~create_chain
 21866 08:5777: 85 13        	sta	<L886+clst_1
 21867 08:5779: 86 15        	stx	<L886+clst_1+2
 21868                        ;					if (clst == 1)
 21869                        	.line	5084
 21870                        ;						ABORT(fs
                    , FR_INT_ERR);
 21871 08:577B: A5 13        	lda	<L886+clst_1
 21872 08:577D: C9 01 00     	cmp	#<$1
 21873 08:5780: D0 05        	bne	L899
 21874 08:5782: A5 15        	lda	<L886+clst_1+2
 21875 08:5784: C9 00 00     	cmp	#^$1
 21876                        L899:
 21877 08:5787: F0 03        	beq	L900
 21878 08:5789: 82 11 00     	brl	L10505
 21879                        L900:
 21880                        	.line	5085
 21881                        	.line	5085
 21882 08:578C: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 416


 21883                        	longa	off
 21884 08:578E: A9 02        	lda	#$2
 21885 08:5790: A0 11 00     	ldy	#$11
 21886 08:5793: 97 26        	sta	[<L885+fp_0],Y
 21887 08:5795: C2 20        	rep	#$20
 21888                        	longa	on
 21889                        	.line	5085
 21890 08:5797: A9 02 00     	lda	#$2
 21891 08:579A: 82 5B FE     	brl	L890
 21892                        	.line	5085
 21893                        L10505:
 21894                        	.line	5085
 21895                        ;					if (clst == 0xFF
                    FFFFFF)
 21896                        	.line	5086
 21897                        ;						ABORT(fs
                    , FR_DISK_ERR);
 21898 08:579D: A5 13        	lda	<L886+clst_1
 21899 08:579F: C9 FF FF     	cmp	#<$ffffffff
 21900 08:57A2: D0 05        	bne	L901
 21901 08:57A4: A5 15        	lda	<L886+clst_1+2
 21902 08:57A6: C9 FF FF     	cmp	#^$ffffffff
 21903                        L901:
 21904 08:57A9: F0 03        	beq	L902
 21905 08:57AB: 82 11 00     	brl	L10506
 21906                        L902:
 21907                        	.line	5087
 21908                        	.line	5087
 21909 08:57AE: E2 20        	sep	#$20
 21910                        	longa	off
 21911 08:57B0: A9 01        	lda	#$1
 21912 08:57B2: A0 11 00     	ldy	#$11
 21913 08:57B5: 97 26        	sta	[<L885+fp_0],Y
 21914 08:57B7: C2 20        	rep	#$20
 21915                        	longa	on
 21916                        	.line	5087
 21917 08:57B9: A9 01 00     	lda	#$1
 21918 08:57BC: 82 39 FE     	brl	L890
 21919                        	.line	5087
 21920                        L10506:
 21921                        	.line	5087
 21922                        ;					fp->obj.sclust =
                     clst;
 21923                        	.line	5088
 21924 08:57BF: A5 13        	lda	<L886+clst_1
 21925 08:57C1: A0 08 00     	ldy	#$8
 21926 08:57C4: 97 26        	sta	[<L885+fp_0],Y
 21927 08:57C6: A5 15        	lda	<L886+clst_1+2
 21928 08:57C8: A0 0A 00     	ldy	#$a
 21929 08:57CB: 97 26        	sta	[<L885+fp_0],Y
 21930                        ;				}
 21931                        	.line	5089
 21932                        ;#endif
 21933                        ;				fp->clust = clst;
 21934                        L10504:
 21935                        	.line	5091
 21936 08:57CD: A5 13        	lda	<L886+clst_1
 21937 08:57CF: A0 16 00     	ldy	#$16
  Sat Jul 10 2021  1:15                                                Page 417


 21938 08:57D2: 97 26        	sta	[<L885+fp_0],Y
 21939 08:57D4: A5 15        	lda	<L886+clst_1+2
 21940 08:57D6: A0 18 00     	ldy	#$18
 21941 08:57D9: 97 26        	sta	[<L885+fp_0],Y
 21942                        ;			}
 21943                        	.line	5092
 21944                        L10503:
 21945                        ;			if (clst != 0)
 21946                        	.line	5093
 21947                        ;			{
 21948 08:57DB: A5 13        	lda	<L886+clst_1
 21949 08:57DD: 05 15        	ora	<L886+clst_1+2
 21950 08:57DF: D0 03        	bne	L903
 21951 08:57E1: 82 A0 01     	brl	L10507
 21952                        L903:
 21953                        	.line	5094
 21954                        ;				while (ofs > bcs)
 21955                        	.line	5095
 21956                        L10508:
 21957 08:57E4: A5 17        	lda	<L886+bcs_1
 21958 08:57E6: C5 2A        	cmp	<L885+ofs_0
 21959 08:57E8: A5 19        	lda	<L886+bcs_1+2
 21960 08:57EA: E5 2C        	sbc	<L885+ofs_0+2
 21961 08:57EC: 90 03        	bcc	L904
 21962 08:57EE: 82 21 01     	brl	L10509
 21963                        L904:
 21964                        ;				{ /* Cluster following l
                    oop */
 21965                        	.line	5096
 21966                        ;					ofs -= bcs;
 21967                        	.line	5097
 21968 08:57F1: 38           	sec
 21969 08:57F2: A5 2A        	lda	<L885+ofs_0
 21970 08:57F4: E5 17        	sbc	<L886+bcs_1
 21971 08:57F6: 85 2A        	sta	<L885+ofs_0
 21972 08:57F8: A5 2C        	lda	<L885+ofs_0+2
 21973 08:57FA: E5 19        	sbc	<L886+bcs_1+2
 21974 08:57FC: 85 2C        	sta	<L885+ofs_0+2
 21975                        ;					fp->fptr += bcs;
 21976                        	.line	5098
 21977 08:57FE: 18           	clc
 21978 08:57FF: A9 12 00     	lda	#$12
 21979 08:5802: 65 26        	adc	<L885+fp_0
 21980 08:5804: 85 01        	sta	<R0
 21981 08:5806: A9 00 00     	lda	#$0
 21982 08:5809: 65 28        	adc	<L885+fp_0+2
 21983 08:580B: 85 03        	sta	<R0+2
 21984 08:580D: 18           	clc
 21985 08:580E: A7 01        	lda	[<R0]
 21986 08:5810: 65 17        	adc	<L886+bcs_1
 21987 08:5812: 87 01        	sta	[<R0]
 21988 08:5814: A0 02 00     	ldy	#$2
 21989 08:5817: B7 01        	lda	[<R0],Y
 21990 08:5819: 65 19        	adc	<L886+bcs_1+2
 21991 08:581B: A0 02 00     	ldy	#$2
 21992 08:581E: 97 01        	sta	[<R0],Y
 21993                        ;#if !FF_FS_READONLY
 21994                        ;					if (fp->flag & F
  Sat Jul 10 2021  1:15                                                Page 418


                    A_WRITE)
 21995                        	.line	5100
 21996                        ;					{ /* Check if in
                     write mode or not */
 21997 08:5820: E2 20        	sep	#$20
 21998                        	longa	off
 21999 08:5822: A0 10 00     	ldy	#$10
 22000 08:5825: B7 26        	lda	[<L885+fp_0],Y
 22001 08:5827: 29 02        	and	#<$2
 22002 08:5829: C2 20        	rep	#$20
 22003                        	longa	on
 22004 08:582B: D0 03        	bne	L905
 22005 08:582D: 82 6C 00     	brl	L10510
 22006                        L905:
 22007                        	.line	5101
 22008                        ;						if (FF_F
                    S_EXFAT && fp->fptr > fp->obj.objsize)
 22009                        	.line	5102
 22010                        ;						{ /* No 
                    FAT chain object needs correct objsize to generate FAT value
                     */
 22011 08:5830: 82 46 00     	brl	L10511
 22012 08:5833: A0 0C 00     	ldy	#$c
 22013 08:5836: B7 26        	lda	[<L885+fp_0],Y
 22014 08:5838: A0 12 00     	ldy	#$12
 22015 08:583B: D7 26        	cmp	[<L885+fp_0],Y
 22016 08:583D: A0 0E 00     	ldy	#$e
 22017 08:5840: B7 26        	lda	[<L885+fp_0],Y
 22018 08:5842: A0 14 00     	ldy	#$14
 22019 08:5845: F7 26        	sbc	[<L885+fp_0],Y
 22020 08:5847: 90 03        	bcc	L906
 22021 08:5849: 82 2D 00     	brl	L10511
 22022                        L906:
 22023                        	.line	5103
 22024                        ;							
                    fp->obj.objsize = fp->fptr;
 22025                        	.line	5104
 22026 08:584C: A0 12 00     	ldy	#$12
 22027 08:584F: B7 26        	lda	[<L885+fp_0],Y
 22028 08:5851: A0 0C 00     	ldy	#$c
 22029 08:5854: 97 26        	sta	[<L885+fp_0],Y
 22030 08:5856: A0 14 00     	ldy	#$14
 22031 08:5859: B7 26        	lda	[<L885+fp_0],Y
 22032 08:585B: A0 0E 00     	ldy	#$e
 22033 08:585E: 97 26        	sta	[<L885+fp_0],Y
 22034                        ;							
                    fp->flag |= FA_MODIFIED;
 22035                        	.line	5105
 22036 08:5860: 18           	clc
 22037 08:5861: A9 10 00     	lda	#$10
 22038 08:5864: 65 26        	adc	<L885+fp_0
 22039 08:5866: 85 01        	sta	<R0
 22040 08:5868: A9 00 00     	lda	#$0
 22041 08:586B: 65 28        	adc	<L885+fp_0+2
 22042 08:586D: 85 03        	sta	<R0+2
 22043 08:586F: E2 20        	sep	#$20
 22044                        	longa	off
 22045 08:5871: A7 01        	lda	[<R0]
  Sat Jul 10 2021  1:15                                                Page 419


 22046 08:5873: 09 40        	ora	#<$40
 22047 08:5875: 87 01        	sta	[<R0]
 22048 08:5877: C2 20        	rep	#$20
 22049                        	longa	on
 22050                        ;						}
 22051                        	.line	5106
 22052                        ;						clst = c
                    reate_chain(&fp->obj, clst); /* Follow chain with forceed st
                    retch */
 22053                        L10511:
 22054                        	.line	5107
 22055 08:5879: D4 15        	pei	<L886+clst_1+2
 22056 08:587B: D4 13        	pei	<L886+clst_1
 22057 08:587D: D4 28        	pei	<L885+fp_0+2
 22058 08:587F: D4 26        	pei	<L885+fp_0
 22059 08:5881: 22 93 12 08  	jsl	~~create_chain
 22060 08:5885: 85 13        	sta	<L886+clst_1
 22061 08:5887: 86 15        	stx	<L886+clst_1+2
 22062                        ;						if (clst
                     == 0)
 22063                        	.line	5108
 22064                        ;						{ /* Cli
                    p file size in case of disk full */
 22065 08:5889: A5 13        	lda	<L886+clst_1
 22066 08:588B: 05 15        	ora	<L886+clst_1+2
 22067 08:588D: F0 03        	beq	L907
 22068 08:588F: 82 07 00     	brl	L10512
 22069                        L907:
 22070                        	.line	5109
 22071                        ;							
                    ofs = 0;
 22072                        	.line	5110
 22073 08:5892: 64 2A        	stz	<L885+ofs_0
 22074 08:5894: 64 2C        	stz	<L885+ofs_0+2
 22075                        ;							
                    break;
 22076                        	.line	5111
 22077 08:5896: 82 79 00     	brl	L10509
 22078                        ;						}
 22079                        	.line	5112
 22080                        ;					}
 22081                        L10512:
 22082                        	.line	5113
 22083                        ;					else
 22084 08:5899: 82 10 00     	brl	L10513
 22085                        L10510:
 22086                        ;#endif
 22087                        ;					{
 22088                        	.line	5116
 22089                        ;						clst = g
                    et_fat(&fp->obj, clst); /* Follow cluster chain if not in wr
                    ite mode */
 22090                        	.line	5117
 22091 08:589C: D4 15        	pei	<L886+clst_1+2
 22092 08:589E: D4 13        	pei	<L886+clst_1
 22093 08:58A0: D4 28        	pei	<L885+fp_0+2
 22094 08:58A2: D4 26        	pei	<L885+fp_0
 22095 08:58A4: 22 54 0B 08  	jsl	~~get_fat
  Sat Jul 10 2021  1:15                                                Page 420


 22096 08:58A8: 85 13        	sta	<L886+clst_1
 22097 08:58AA: 86 15        	stx	<L886+clst_1+2
 22098                        ;					}
 22099                        	.line	5118
 22100                        L10513:
 22101                        ;					if (clst == 0xFF
                    FFFFFF)
 22102                        	.line	5119
 22103                        ;						ABORT(fs
                    , FR_DISK_ERR);
 22104 08:58AC: A5 13        	lda	<L886+clst_1
 22105 08:58AE: C9 FF FF     	cmp	#<$ffffffff
 22106 08:58B1: D0 05        	bne	L908
 22107 08:58B3: A5 15        	lda	<L886+clst_1+2
 22108 08:58B5: C9 FF FF     	cmp	#^$ffffffff
 22109                        L908:
 22110 08:58B8: F0 03        	beq	L909
 22111 08:58BA: 82 11 00     	brl	L10514
 22112                        L909:
 22113                        	.line	5120
 22114                        	.line	5120
 22115 08:58BD: E2 20        	sep	#$20
 22116                        	longa	off
 22117 08:58BF: A9 01        	lda	#$1
 22118 08:58C1: A0 11 00     	ldy	#$11
 22119 08:58C4: 97 26        	sta	[<L885+fp_0],Y
 22120 08:58C6: C2 20        	rep	#$20
 22121                        	longa	on
 22122                        	.line	5120
 22123 08:58C8: A9 01 00     	lda	#$1
 22124 08:58CB: 82 2A FD     	brl	L890
 22125                        	.line	5120
 22126                        L10514:
 22127                        	.line	5120
 22128                        ;					if (clst <= 1 ||
                     clst >= fs->n_fatent)
 22129                        	.line	5121
 22130                        ;						ABORT(fs
                    , FR_INT_ERR);
 22131 08:58CE: A9 01 00     	lda	#$1
 22132 08:58D1: C5 13        	cmp	<L886+clst_1
 22133 08:58D3: A9 00 00     	lda	#$0
 22134 08:58D6: E5 15        	sbc	<L886+clst_1+2
 22135 08:58D8: 90 03        	bcc	L911
 22136 08:58DA: 82 13 00     	brl	L910
 22137                        L911:
 22138 08:58DD: A5 13        	lda	<L886+clst_1
 22139 08:58DF: A0 17 00     	ldy	#$17
 22140 08:58E2: D7 0F        	cmp	[<L886+fs_1],Y
 22141 08:58E4: A5 15        	lda	<L886+clst_1+2
 22142 08:58E6: A0 19 00     	ldy	#$19
 22143 08:58E9: F7 0F        	sbc	[<L886+fs_1],Y
 22144 08:58EB: B0 03        	bcs	L912
 22145 08:58ED: 82 11 00     	brl	L10515
 22146                        L912:
 22147                        L910:
 22148                        	.line	5122
 22149                        	.line	5122
  Sat Jul 10 2021  1:15                                                Page 421


 22150 08:58F0: E2 20        	sep	#$20
 22151                        	longa	off
 22152 08:58F2: A9 02        	lda	#$2
 22153 08:58F4: A0 11 00     	ldy	#$11
 22154 08:58F7: 97 26        	sta	[<L885+fp_0],Y
 22155 08:58F9: C2 20        	rep	#$20
 22156                        	longa	on
 22157                        	.line	5122
 22158 08:58FB: A9 02 00     	lda	#$2
 22159 08:58FE: 82 F7 FC     	brl	L890
 22160                        	.line	5122
 22161                        L10515:
 22162                        	.line	5122
 22163                        ;					fp->clust = clst
                    ;
 22164                        	.line	5123
 22165 08:5901: A5 13        	lda	<L886+clst_1
 22166 08:5903: A0 16 00     	ldy	#$16
 22167 08:5906: 97 26        	sta	[<L885+fp_0],Y
 22168 08:5908: A5 15        	lda	<L886+clst_1+2
 22169 08:590A: A0 18 00     	ldy	#$18
 22170 08:590D: 97 26        	sta	[<L885+fp_0],Y
 22171                        ;				}
 22172                        	.line	5124
 22173 08:590F: 82 D2 FE     	brl	L10508
 22174                        L10509:
 22175                        ;				fp->fptr += ofs;
 22176                        	.line	5125
 22177 08:5912: 18           	clc
 22178 08:5913: A9 12 00     	lda	#$12
 22179 08:5916: 65 26        	adc	<L885+fp_0
 22180 08:5918: 85 01        	sta	<R0
 22181 08:591A: A9 00 00     	lda	#$0
 22182 08:591D: 65 28        	adc	<L885+fp_0+2
 22183 08:591F: 85 03        	sta	<R0+2
 22184 08:5921: 18           	clc
 22185 08:5922: A7 01        	lda	[<R0]
 22186 08:5924: 65 2A        	adc	<L885+ofs_0
 22187 08:5926: 87 01        	sta	[<R0]
 22188 08:5928: A0 02 00     	ldy	#$2
 22189 08:592B: B7 01        	lda	[<R0],Y
 22190 08:592D: 65 2C        	adc	<L885+ofs_0+2
 22191 08:592F: A0 02 00     	ldy	#$2
 22192 08:5932: 97 01        	sta	[<R0],Y
 22193                        ;				if (ofs % SS(fs))
 22194                        	.line	5126
 22195                        ;				{
 22196 08:5934: A5 2A        	lda	<L885+ofs_0
 22197 08:5936: 29 FF 01     	and	#<$1ff
 22198 08:5939: D0 03        	bne	L913
 22199 08:593B: 82 46 00     	brl	L10516
 22200                        L913:
 22201                        	.line	5127
 22202                        ;					nsect = clst2sec
                    t(fs, clst); /* Current sector */
 22203                        	.line	5128
 22204 08:593E: D4 15        	pei	<L886+clst_1+2
 22205 08:5940: D4 13        	pei	<L886+clst_1
  Sat Jul 10 2021  1:15                                                Page 422


 22206 08:5942: D4 11        	pei	<L886+fs_1+2
 22207 08:5944: D4 0F        	pei	<L886+fs_1
 22208 08:5946: 22 C5 0A 08  	jsl	~~clst2sect
 22209 08:594A: 85 1B        	sta	<L886+nsect_1
 22210 08:594C: 86 1D        	stx	<L886+nsect_1+2
 22211                        ;					if (nsect == 0)
 22212                        	.line	5129
 22213                        ;						ABORT(fs
                    , FR_INT_ERR);
 22214 08:594E: A5 1B        	lda	<L886+nsect_1
 22215 08:5950: 05 1D        	ora	<L886+nsect_1+2
 22216 08:5952: F0 03        	beq	L914
 22217 08:5954: 82 11 00     	brl	L10517
 22218                        L914:
 22219                        	.line	5130
 22220                        	.line	5130
 22221 08:5957: E2 20        	sep	#$20
 22222                        	longa	off
 22223 08:5959: A9 02        	lda	#$2
 22224 08:595B: A0 11 00     	ldy	#$11
 22225 08:595E: 97 26        	sta	[<L885+fp_0],Y
 22226 08:5960: C2 20        	rep	#$20
 22227                        	longa	on
 22228                        	.line	5130
 22229 08:5962: A9 02 00     	lda	#$2
 22230 08:5965: 82 90 FC     	brl	L890
 22231                        	.line	5130
 22232                        L10517:
 22233                        	.line	5130
 22234                        ;					nsect += (DWORD)
                     (ofs / SS(fs));
 22235                        	.line	5131
 22236 08:5968: D4 2C        	pei	<L885+ofs_0+2
 22237 08:596A: D4 2A        	pei	<L885+ofs_0
 22238 08:596C: A9 09 00     	lda	#$9
 22239                        	xref	~~~llsr
 22240 08:596F: 22 xx xx xx  	jsl	~~~llsr
 22241 08:5973: 85 01        	sta	<R0
 22242 08:5975: 86 03        	stx	<R0+2
 22243 08:5977: 18           	clc
 22244 08:5978: A5 01        	lda	<R0
 22245 08:597A: 65 1B        	adc	<L886+nsect_1
 22246 08:597C: 85 1B        	sta	<L886+nsect_1
 22247 08:597E: A5 03        	lda	<R0+2
 22248 08:5980: 65 1D        	adc	<L886+nsect_1+2
 22249 08:5982: 85 1D        	sta	<L886+nsect_1+2
 22250                        ;				}
 22251                        	.line	5132
 22252                        ;			}
 22253                        L10516:
 22254                        	.line	5133
 22255                        ;		}
 22256                        L10507:
 22257                        	.line	5134
 22258                        ;		if (!FF_FS_READONLY && fp->fptr > fp->ob
                    j.objsize)
 22259                        L10501:
 22260                        	.line	5135
  Sat Jul 10 2021  1:15                                                Page 423


 22261                        ;		{ /* Set file change flag if the file si
                    ze is extended */
 22262 08:5984: A0 0C 00     	ldy	#$c
 22263 08:5987: B7 26        	lda	[<L885+fp_0],Y
 22264 08:5989: A0 12 00     	ldy	#$12
 22265 08:598C: D7 26        	cmp	[<L885+fp_0],Y
 22266 08:598E: A0 0E 00     	ldy	#$e
 22267 08:5991: B7 26        	lda	[<L885+fp_0],Y
 22268 08:5993: A0 14 00     	ldy	#$14
 22269 08:5996: F7 26        	sbc	[<L885+fp_0],Y
 22270 08:5998: 90 03        	bcc	L915
 22271 08:599A: 82 2D 00     	brl	L10518
 22272                        L915:
 22273                        	.line	5136
 22274                        ;			fp->obj.objsize = fp->fptr;
 22275                        	.line	5137
 22276 08:599D: A0 12 00     	ldy	#$12
 22277 08:59A0: B7 26        	lda	[<L885+fp_0],Y
 22278 08:59A2: A0 0C 00     	ldy	#$c
 22279 08:59A5: 97 26        	sta	[<L885+fp_0],Y
 22280 08:59A7: A0 14 00     	ldy	#$14
 22281 08:59AA: B7 26        	lda	[<L885+fp_0],Y
 22282 08:59AC: A0 0E 00     	ldy	#$e
 22283 08:59AF: 97 26        	sta	[<L885+fp_0],Y
 22284                        ;			fp->flag |= FA_MODIFIED;
 22285                        	.line	5138
 22286 08:59B1: 18           	clc
 22287 08:59B2: A9 10 00     	lda	#$10
 22288 08:59B5: 65 26        	adc	<L885+fp_0
 22289 08:59B7: 85 01        	sta	<R0
 22290 08:59B9: A9 00 00     	lda	#$0
 22291 08:59BC: 65 28        	adc	<L885+fp_0+2
 22292 08:59BE: 85 03        	sta	<R0+2
 22293 08:59C0: E2 20        	sep	#$20
 22294                        	longa	off
 22295 08:59C2: A7 01        	lda	[<R0]
 22296 08:59C4: 09 40        	ora	#<$40
 22297 08:59C6: 87 01        	sta	[<R0]
 22298 08:59C8: C2 20        	rep	#$20
 22299                        	longa	on
 22300                        ;		}
 22301                        	.line	5139
 22302                        ;		if (fp->fptr % SS(fs) && nsect != fp->se
                    ct)
 22303                        L10518:
 22304                        	.line	5140
 22305                        ;		{ /* Fill sector cache if needed */
 22306 08:59CA: A0 12 00     	ldy	#$12
 22307 08:59CD: B7 26        	lda	[<L885+fp_0],Y
 22308 08:59CF: 29 FF 01     	and	#<$1ff
 22309 08:59D2: D0 03        	bne	L916
 22310 08:59D4: 82 CA 00     	brl	L10519
 22311                        L916:
 22312 08:59D7: A5 1B        	lda	<L886+nsect_1
 22313 08:59D9: A0 1A 00     	ldy	#$1a
 22314 08:59DC: D7 26        	cmp	[<L885+fp_0],Y
 22315 08:59DE: D0 07        	bne	L917
 22316 08:59E0: A5 1D        	lda	<L886+nsect_1+2
  Sat Jul 10 2021  1:15                                                Page 424


 22317 08:59E2: A0 1C 00     	ldy	#$1c
 22318 08:59E5: D7 26        	cmp	[<L885+fp_0],Y
 22319                        L917:
 22320 08:59E7: D0 03        	bne	L918
 22321 08:59E9: 82 B5 00     	brl	L10519
 22322                        L918:
 22323                        	.line	5141
 22324                        ;#if !FF_FS_TINY
 22325                        ;#if !FF_FS_READONLY
 22326                        ;			if (fp->flag & FA_DIRTY)
 22327                        	.line	5144
 22328                        ;			{ /* Write-back dirty sector cac
                    he */
 22329 08:59EC: E2 20        	sep	#$20
 22330                        	longa	off
 22331 08:59EE: A0 10 00     	ldy	#$10
 22332 08:59F1: B7 26        	lda	[<L885+fp_0],Y
 22333 08:59F3: 29 80        	and	#<$80
 22334 08:59F5: C2 20        	rep	#$20
 22335                        	longa	on
 22336 08:59F7: D0 03        	bne	L919
 22337 08:59F9: 82 5C 00     	brl	L10520
 22338                        L919:
 22339                        	.line	5145
 22340                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK)
 22341                        	.line	5146
 22342                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 22343 08:59FC: F4 01 00     	pea	#<$1
 22344 08:59FF: A0 1C 00     	ldy	#$1c
 22345 08:5A02: B7 26        	lda	[<L885+fp_0],Y
 22346 08:5A04: 48           	pha
 22347 08:5A05: A0 1A 00     	ldy	#$1a
 22348 08:5A08: B7 26        	lda	[<L885+fp_0],Y
 22349 08:5A0A: 48           	pha
 22350 08:5A0B: 18           	clc
 22351 08:5A0C: A9 26 00     	lda	#$26
 22352 08:5A0F: 65 26        	adc	<L885+fp_0
 22353 08:5A11: 85 01        	sta	<R0
 22354 08:5A13: A9 00 00     	lda	#$0
 22355 08:5A16: 65 28        	adc	<L885+fp_0+2
 22356 08:5A18: 85 03        	sta	<R0+2
 22357 08:5A1A: D4 03        	pei	<R0+2
 22358 08:5A1C: D4 01        	pei	<R0
 22359 08:5A1E: A0 01 00     	ldy	#$1
 22360 08:5A21: B7 0F        	lda	[<L886+fs_1],Y
 22361 08:5A23: 48           	pha
 22362 08:5A24: 22 xx xx xx  	jsl	~~disk_write
 22363 08:5A28: AA           	tax
 22364 08:5A29: D0 03        	bne	L920
 22365 08:5A2B: 82 11 00     	brl	L10521
 22366                        L920:
 22367                        	.line	5147
 22368                        	.line	5147
 22369 08:5A2E: E2 20        	sep	#$20
 22370                        	longa	off
 22371 08:5A30: A9 01        	lda	#$1
  Sat Jul 10 2021  1:15                                                Page 425


 22372 08:5A32: A0 11 00     	ldy	#$11
 22373 08:5A35: 97 26        	sta	[<L885+fp_0],Y
 22374 08:5A37: C2 20        	rep	#$20
 22375                        	longa	on
 22376                        	.line	5147
 22377 08:5A39: A9 01 00     	lda	#$1
 22378 08:5A3C: 82 B9 FB     	brl	L890
 22379                        	.line	5147
 22380                        L10521:
 22381                        	.line	5147
 22382                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 22383                        	.line	5148
 22384 08:5A3F: 18           	clc
 22385 08:5A40: A9 10 00     	lda	#$10
 22386 08:5A43: 65 26        	adc	<L885+fp_0
 22387 08:5A45: 85 01        	sta	<R0
 22388 08:5A47: A9 00 00     	lda	#$0
 22389 08:5A4A: 65 28        	adc	<L885+fp_0+2
 22390 08:5A4C: 85 03        	sta	<R0+2
 22391 08:5A4E: E2 20        	sep	#$20
 22392                        	longa	off
 22393 08:5A50: A7 01        	lda	[<R0]
 22394 08:5A52: 29 7F        	and	#<$7f
 22395 08:5A54: 87 01        	sta	[<R0]
 22396 08:5A56: C2 20        	rep	#$20
 22397                        	longa	on
 22398                        ;			}
 22399                        	.line	5149
 22400                        ;#endif
 22401                        ;			if (disk_read(fs->pdrv, fp->buf,
                     nsect, 1) != RES_OK)
 22402                        L10520:
 22403                        	.line	5151
 22404                        ;				ABORT(fs, FR_DISK_ERR); 
                    /* Fill sector cache */
 22405 08:5A58: F4 01 00     	pea	#<$1
 22406 08:5A5B: D4 1D        	pei	<L886+nsect_1+2
 22407 08:5A5D: D4 1B        	pei	<L886+nsect_1
 22408 08:5A5F: 18           	clc
 22409 08:5A60: A9 26 00     	lda	#$26
 22410 08:5A63: 65 26        	adc	<L885+fp_0
 22411 08:5A65: 85 01        	sta	<R0
 22412 08:5A67: A9 00 00     	lda	#$0
 22413 08:5A6A: 65 28        	adc	<L885+fp_0+2
 22414 08:5A6C: 85 03        	sta	<R0+2
 22415 08:5A6E: D4 03        	pei	<R0+2
 22416 08:5A70: D4 01        	pei	<R0
 22417 08:5A72: A0 01 00     	ldy	#$1
 22418 08:5A75: B7 0F        	lda	[<L886+fs_1],Y
 22419 08:5A77: 48           	pha
 22420 08:5A78: 22 xx xx xx  	jsl	~~disk_read
 22421 08:5A7C: AA           	tax
 22422 08:5A7D: D0 03        	bne	L921
 22423 08:5A7F: 82 11 00     	brl	L10522
 22424                        L921:
 22425                        	.line	5152
 22426                        	.line	5152
  Sat Jul 10 2021  1:15                                                Page 426


 22427 08:5A82: E2 20        	sep	#$20
 22428                        	longa	off
 22429 08:5A84: A9 01        	lda	#$1
 22430 08:5A86: A0 11 00     	ldy	#$11
 22431 08:5A89: 97 26        	sta	[<L885+fp_0],Y
 22432 08:5A8B: C2 20        	rep	#$20
 22433                        	longa	on
 22434                        	.line	5152
 22435 08:5A8D: A9 01 00     	lda	#$1
 22436 08:5A90: 82 65 FB     	brl	L890
 22437                        	.line	5152
 22438                        L10522:
 22439                        	.line	5152
 22440                        ;#endif
 22441                        ;			fp->sect = nsect;
 22442                        	.line	5154
 22443 08:5A93: A5 1B        	lda	<L886+nsect_1
 22444 08:5A95: A0 1A 00     	ldy	#$1a
 22445 08:5A98: 97 26        	sta	[<L885+fp_0],Y
 22446 08:5A9A: A5 1D        	lda	<L886+nsect_1+2
 22447 08:5A9C: A0 1C 00     	ldy	#$1c
 22448 08:5A9F: 97 26        	sta	[<L885+fp_0],Y
 22449                        ;		}
 22450                        	.line	5155
 22451                        ;	}
 22452                        L10519:
 22453                        	.line	5156
 22454                        ;
 22455                        ;	LEAVE_FF(fs, res);
 22456                        	.line	5158
 22457 08:5AA1: A5 0D        	lda	<L886+res_1
 22458 08:5AA3: 82 52 FB     	brl	L890
 22459                        ;}
 22460                        	.line	5159
 22461                        	.endblock	5159
 22462             00000022   L885	equ	34
 22463             0000000D   L886	equ	13
 22464 08:5AA6:              	ends
 22465                        	efunc
 22466                        	.endfunc	5159,13,34
 22467                        	.line	5159
 22468                        ;
 22469                        ;#if FF_FS_MINIMIZE <= 1
 22470                        ;/*-----------------------------------------------
                    ------------------------*/
 22471                        ;/* Create a Directory Object                     
                                            */
 22472                        ;/*-----------------------------------------------
                    ------------------------*/
 22473                        ;
 22474                        ;FRESULT f_opendir(DIR* dp, /* Pointer to director
                    y object to create */
 22475                        ;const TCHAR* path /* Pointer to the directory pat
                    h */
 22476                        ;)
 22477                        ;{
 22478                        	.line	5166
 22479                        	.line	5169
  Sat Jul 10 2021  1:15                                                Page 427


 22480                        	FFDOS
 22481                        	xdef	~~f_opendir
 22482                        	func
 22483                        	.function	5169
 22484                        ~~f_opendir:
 22485                        	longa	on
 22486                        	longi	on
 22487 08:5AA6: 3B           	tsc
 22488 08:5AA7: 38           	sec
 22489 08:5AA8: E9 0E 00     	sbc	#L922
 22490 08:5AAB: 1B           	tcs
 22491 08:5AAC: 0B           	phd
 22492 08:5AAD: 5B           	tcd
 22493             00000004   dp_0	set	4
 22494             00000008   path_0	set	8
 22495                        	.block	5169
 22496                        ;	FRESULT res;
 22497                        ;	FATFS *fs;
 22498                        ;	DEF_NAMBUF
 22499                        ;
 22500                        ;	if (!dp)
 22501             00000000   res_1	set	0
 22502             00000002   fs_1	set	2
 22503             00000006   lfn_1	set	6
 22504                        	.sym	res,0,5,1,16
 22505                        	.sym	fs,2,138,1,32,72
 22506                        	.sym	lfn,6,144,1,32
 22507                        	.sym	dp,4,138,6,32,75
 22508                        	.sym	path,8,142,6,32
 22509                        	.line	5174
 22510                        ;		return FR_INVALID_OBJECT;
 22511 08:5AAE: A5 12        	lda	<L922+dp_0
 22512 08:5AB0: 05 14        	ora	<L922+dp_0+2
 22513 08:5AB2: F0 03        	beq	L925
 22514 08:5AB4: 82 15 00     	brl	L10523
 22515                        L925:
 22516                        	.line	5175
 22517 08:5AB7: A9 09 00     	lda	#$9
 22518                        L926:
 22519 08:5ABA: A8           	tay
 22520 08:5ABB: A5 10        	lda	<L922+2
 22521 08:5ABD: 85 18        	sta	<L922+2+8
 22522 08:5ABF: A5 0F        	lda	<L922+1
 22523 08:5AC1: 85 17        	sta	<L922+1+8
 22524 08:5AC3: 2B           	pld
 22525 08:5AC4: 3B           	tsc
 22526 08:5AC5: 18           	clc
 22527 08:5AC6: 69 16 00     	adc	#L922+8
 22528 08:5AC9: 1B           	tcs
 22529 08:5ACA: 98           	tya
 22530 08:5ACB: 6B           	rtl
 22531                        ;
 22532                        ;	//k_debug_string("f_opendir::f_opendir\r\n");
 22533                        ;
 22534                        ;	/* Get logical drive */
 22535                        ;	res = mount_volume(&path, &fs, 0);
 22536                        L10523:
 22537                        	.line	5180
  Sat Jul 10 2021  1:15                                                Page 428


 22538 08:5ACC: F4 00 00     	pea	#<$0
 22539 08:5ACF: F4 00 00     	pea	#0
 22540 08:5AD2: 18           	clc
 22541 08:5AD3: 7B           	tdc
 22542 08:5AD4: 69 07 00     	adc	#<L923+fs_1
 22543 08:5AD7: 48           	pha
 22544 08:5AD8: F4 00 00     	pea	#0
 22545 08:5ADB: 18           	clc
 22546 08:5ADC: 7B           	tdc
 22547 08:5ADD: 69 16 00     	adc	#<L922+path_0
 22548 08:5AE0: 48           	pha
 22549 08:5AE1: 22 B8 3D 08  	jsl	~~mount_volume
 22550 08:5AE5: 85 05        	sta	<L923+res_1
 22551                        ;	if (res == FR_OK)
 22552                        	.line	5181
 22553                        ;	{
 22554 08:5AE7: A5 05        	lda	<L923+res_1
 22555 08:5AE9: F0 03        	beq	L927
 22556 08:5AEB: 82 CE 00     	brl	L10524
 22557                        L927:
 22558                        	.line	5182
 22559                        ;		dp->obj.fs = fs;
 22560                        	.line	5183
 22561 08:5AEE: A5 07        	lda	<L923+fs_1
 22562 08:5AF0: 87 12        	sta	[<L922+dp_0]
 22563 08:5AF2: A5 09        	lda	<L923+fs_1+2
 22564 08:5AF4: A0 02 00     	ldy	#$2
 22565 08:5AF7: 97 12        	sta	[<L922+dp_0],Y
 22566                        ;		INIT_NAMBUF(fs);
 22567                        	.line	5184
 22568                        	.line	5184
 22569 08:5AF9: F4 00 02     	pea	#<$200
 22570 08:5AFC: 22 AB 92 08  	jsl	~~ff_memalloc
 22571 08:5B00: 85 0B        	sta	<L923+lfn_1
 22572 08:5B02: 86 0D        	stx	<L923+lfn_1+2
 22573                        	.line	5184
 22574 08:5B04: A5 0B        	lda	<L923+lfn_1
 22575 08:5B06: 05 0D        	ora	<L923+lfn_1+2
 22576 08:5B08: F0 03        	beq	L928
 22577 08:5B0A: 82 06 00     	brl	L10525
 22578                        L928:
 22579                        	.line	5184
 22580 08:5B0D: A9 11 00     	lda	#$11
 22581 08:5B10: 82 A7 FF     	brl	L926
 22582                        L10525:
 22583                        	.line	5184
 22584 08:5B13: A5 0B        	lda	<L923+lfn_1
 22585 08:5B15: A0 0B 00     	ldy	#$b
 22586 08:5B18: 97 07        	sta	[<L923+fs_1],Y
 22587 08:5B1A: A5 0D        	lda	<L923+lfn_1+2
 22588 08:5B1C: A0 0D 00     	ldy	#$d
 22589 08:5B1F: 97 07        	sta	[<L923+fs_1],Y
 22590                        	.line	5184
 22591                        	.line	5184
 22592                        ;		res = follow_path(dp, path); /* Follow t
                    he path to the directory */
 22593                        	.line	5185
 22594 08:5B21: D4 18        	pei	<L922+path_0+2
  Sat Jul 10 2021  1:15                                                Page 429


 22595 08:5B23: D4 16        	pei	<L922+path_0
 22596 08:5B25: D4 14        	pei	<L922+dp_0+2
 22597 08:5B27: D4 12        	pei	<L922+dp_0
 22598 08:5B29: 22 2B 37 08  	jsl	~~follow_path
 22599 08:5B2D: 85 05        	sta	<L923+res_1
 22600                        ;		if (res == FR_OK)
 22601                        	.line	5186
 22602                        ;		{ /* Follow completed */
 22603 08:5B2F: A5 05        	lda	<L923+res_1
 22604 08:5B31: F0 03        	beq	L929
 22605 08:5B33: 82 6F 00     	brl	L10526
 22606                        L929:
 22607                        	.line	5187
 22608                        ;			if (!(dp->fn[NSFLAG] & NS_NONAME
                    ))
 22609                        	.line	5188
 22610                        ;			{ /* It is not the origin direct
                    ory itself */
 22611 08:5B36: E2 20        	sep	#$20
 22612                        	longa	off
 22613 08:5B38: A0 2B 00     	ldy	#$2b
 22614 08:5B3B: B7 12        	lda	[<L922+dp_0],Y
 22615 08:5B3D: 29 80        	and	#<$80
 22616 08:5B3F: C2 20        	rep	#$20
 22617                        	longa	on
 22618 08:5B41: F0 03        	beq	L930
 22619 08:5B43: 82 3E 00     	brl	L10527
 22620                        L930:
 22621                        	.line	5189
 22622                        ;				if (dp->obj.attr & AM_DI
                    R)
 22623                        	.line	5190
 22624                        ;				{ /* This object is a su
                    b-directory */
 22625 08:5B46: E2 20        	sep	#$20
 22626                        	longa	off
 22627 08:5B48: A0 06 00     	ldy	#$6
 22628 08:5B4B: B7 12        	lda	[<L922+dp_0],Y
 22629 08:5B4D: 29 10        	and	#<$10
 22630 08:5B4F: C2 20        	rep	#$20
 22631                        	longa	on
 22632 08:5B51: D0 03        	bne	L931
 22633 08:5B53: 82 29 00     	brl	L10528
 22634                        L931:
 22635                        	.line	5191
 22636                        ;#if FF_FS_EXFAT
 22637                        ;					if (fs->fs_type 
                    == FS_EXFAT)
 22638                        ;					{
 22639                        ;						dp->obj.
                    c_scl = dp->obj.sclust; /* Get containing directory inforama
                    tion */
 22640                        ;						dp->obj.
                    c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.sta
                    t;
 22641                        ;						dp->obj.
                    c_ofs = dp->blk_ofs;
 22642                        ;						init_all
  Sat Jul 10 2021  1:15                                                Page 430


                    oc_info(fs, &dp->obj); /* Get object allocation info */
 22643                        ;					}
 22644                        ;					else
 22645                        ;#endif
 22646                        ;					{
 22647                        	.line	5202
 22648                        ;						dp->obj.
                    sclust = ld_clust(fs, dp->dir); /* Get object allocation inf
                    o */
 22649                        	.line	5203
 22650 08:5B56: A0 1E 00     	ldy	#$1e
 22651 08:5B59: B7 12        	lda	[<L922+dp_0],Y
 22652 08:5B5B: 48           	pha
 22653 08:5B5C: A0 1C 00     	ldy	#$1c
 22654 08:5B5F: B7 12        	lda	[<L922+dp_0],Y
 22655 08:5B61: 48           	pha
 22656 08:5B62: D4 09        	pei	<L923+fs_1+2
 22657 08:5B64: D4 07        	pei	<L923+fs_1
 22658 08:5B66: 22 16 1D 08  	jsl	~~ld_clust
 22659 08:5B6A: 85 01        	sta	<R0
 22660 08:5B6C: 86 03        	stx	<R0+2
 22661 08:5B6E: A5 01        	lda	<R0
 22662 08:5B70: A0 08 00     	ldy	#$8
 22663 08:5B73: 97 12        	sta	[<L922+dp_0],Y
 22664 08:5B75: A5 03        	lda	<R0+2
 22665 08:5B77: A0 0A 00     	ldy	#$a
 22666 08:5B7A: 97 12        	sta	[<L922+dp_0],Y
 22667                        ;					}
 22668                        	.line	5204
 22669                        ;				}
 22670                        	.line	5205
 22671                        ;				else
 22672 08:5B7C: 82 05 00     	brl	L10529
 22673                        L10528:
 22674                        ;				{ /* This object is a fi
                    le */
 22675                        	.line	5207
 22676                        ;					res = FR_NO_PATH
                    ;
 22677                        	.line	5208
 22678 08:5B7F: A9 05 00     	lda	#$5
 22679 08:5B82: 85 05        	sta	<L923+res_1
 22680                        ;				}
 22681                        	.line	5209
 22682                        L10529:
 22683                        ;			}
 22684                        	.line	5210
 22685                        ;			if (res == FR_OK)
 22686                        L10527:
 22687                        	.line	5211
 22688                        ;			{
 22689 08:5B84: A5 05        	lda	<L923+res_1
 22690 08:5B86: F0 03        	beq	L932
 22691 08:5B88: 82 1A 00     	brl	L10530
 22692                        L932:
 22693                        	.line	5212
 22694                        ;				dp->obj.id = fs->id;
 22695                        	.line	5213
  Sat Jul 10 2021  1:15                                                Page 431


 22696 08:5B8B: A0 05 00     	ldy	#$5
 22697 08:5B8E: B7 07        	lda	[<L923+fs_1],Y
 22698 08:5B90: A0 04 00     	ldy	#$4
 22699 08:5B93: 97 12        	sta	[<L922+dp_0],Y
 22700                        ;				res = dir_sdi(dp, 0); /*
                     Rewind directory */
 22701                        	.line	5214
 22702 08:5B95: F4 00 00     	pea	#^$0
 22703 08:5B98: F4 00 00     	pea	#<$0
 22704 08:5B9B: D4 14        	pei	<L922+dp_0+2
 22705 08:5B9D: D4 12        	pei	<L922+dp_0
 22706 08:5B9F: 22 60 17 08  	jsl	~~dir_sdi
 22707 08:5BA3: 85 05        	sta	<L923+res_1
 22708                        ;#if FF_FS_LOCK != 0
 22709                        ;				if (res == FR_OK)
 22710                        ;				{
 22711                        ;					if (dp->obj.sclu
                    st != 0)
 22712                        ;					{
 22713                        ;						dp->obj.
                    lockid = inc_lock(dp, 0); /* Lock the sub directory */
 22714                        ;						if (!dp-
                    >obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 22715                        ;					}
 22716                        ;					else
 22717                        ;					{
 22718                        ;						dp->obj.
                    lockid = 0; /* Root directory need not to be locked */
 22719                        ;					}
 22720                        ;				}
 22721                        ;#endif
 22722                        ;			}
 22723                        	.line	5229
 22724                        ;		} FREE_NAMBUF();
 22725                        L10530:
 22726                        	.line	5230
 22727                        L10526:
 22728                        	.line	5230
 22729 08:5BA5: D4 0D        	pei	<L923+lfn_1+2
 22730 08:5BA7: D4 0B        	pei	<L923+lfn_1
 22731 08:5BA9: 22 D3 92 08  	jsl	~~ff_memfree
 22732                        ;		if (res == FR_NO_FILE)
 22733                        	.line	5231
 22734                        ;			res = FR_NO_PATH;
 22735 08:5BAD: A5 05        	lda	<L923+res_1
 22736 08:5BAF: C9 04 00     	cmp	#<$4
 22737 08:5BB2: F0 03        	beq	L933
 22738 08:5BB4: 82 05 00     	brl	L10531
 22739                        L933:
 22740                        	.line	5232
 22741 08:5BB7: A9 05 00     	lda	#$5
 22742 08:5BBA: 85 05        	sta	<L923+res_1
 22743                        ;	}
 22744                        L10531:
 22745                        	.line	5233
 22746                        ;	if (res != FR_OK)
 22747                        L10524:
 22748                        	.line	5234
  Sat Jul 10 2021  1:15                                                Page 432


 22749                        ;		dp->obj.fs = 0; /* Invalidate the direct
                    ory object if function faild */
 22750 08:5BBC: A5 05        	lda	<L923+res_1
 22751 08:5BBE: D0 03        	bne	L934
 22752 08:5BC0: 82 0D 00     	brl	L10532
 22753                        L934:
 22754                        	.line	5235
 22755 08:5BC3: A9 00 00     	lda	#$0
 22756 08:5BC6: 87 12        	sta	[<L922+dp_0]
 22757 08:5BC8: A9 00 00     	lda	#$0
 22758 08:5BCB: A0 02 00     	ldy	#$2
 22759 08:5BCE: 97 12        	sta	[<L922+dp_0],Y
 22760                        ;
 22761                        ;	LEAVE_FF(fs, res);
 22762                        L10532:
 22763                        	.line	5237
 22764 08:5BD0: A5 05        	lda	<L923+res_1
 22765 08:5BD2: 82 E5 FE     	brl	L926
 22766                        ;}
 22767                        	.line	5238
 22768                        	.endblock	5238
 22769             0000000E   L922	equ	14
 22770             00000005   L923	equ	5
 22771 08:5BD5:              	ends
 22772                        	efunc
 22773                        	.endfunc	5238,5,14
 22774                        	.line	5238
 22775                        ;
 22776                        ;/*-----------------------------------------------
                    ------------------------*/
 22777                        ;/* Close Directory                               
                                            */
 22778                        ;/*-----------------------------------------------
                    ------------------------*/
 22779                        ;
 22780                        ;FRESULT f_closedir(DIR *dp /* Pointer to the dire
                    ctory object to be closed */
 22781                        ;)
 22782                        ;{
 22783                        	.line	5244
 22784                        	.line	5246
 22785                        	FFDOS
 22786                        	xdef	~~f_closedir
 22787                        	func
 22788                        	.function	5246
 22789                        ~~f_closedir:
 22790                        	longa	on
 22791                        	longi	on
 22792 08:5BD5: 3B           	tsc
 22793 08:5BD6: 38           	sec
 22794 08:5BD7: E9 06 00     	sbc	#L935
 22795 08:5BDA: 1B           	tcs
 22796 08:5BDB: 0B           	phd
 22797 08:5BDC: 5B           	tcd
 22798             00000004   dp_0	set	4
 22799                        	.block	5246
 22800                        ;	FRESULT res;
 22801                        ;	FATFS *fs;
  Sat Jul 10 2021  1:15                                                Page 433


 22802                        ;
 22803                        ;	res = validate(&dp->obj, &fs); /* Check validity
                     of the file object */
 22804             00000000   res_1	set	0
 22805             00000002   fs_1	set	2
 22806                        	.sym	res,0,5,1,16
 22807                        	.sym	fs,2,138,1,32,72
 22808                        	.sym	dp,4,138,6,32,75
 22809                        	.line	5250
 22810 08:5BDD: F4 00 00     	pea	#0
 22811 08:5BE0: 18           	clc
 22812 08:5BE1: 7B           	tdc
 22813 08:5BE2: 69 03 00     	adc	#<L936+fs_1
 22814 08:5BE5: 48           	pha
 22815 08:5BE6: D4 0C        	pei	<L935+dp_0+2
 22816 08:5BE8: D4 0A        	pei	<L935+dp_0
 22817 08:5BEA: 22 8B 44 08  	jsl	~~validate
 22818 08:5BEE: 85 01        	sta	<L936+res_1
 22819                        ;	if (res == FR_OK)
 22820                        	.line	5251
 22821                        ;	{
 22822 08:5BF0: A5 01        	lda	<L936+res_1
 22823 08:5BF2: F0 03        	beq	L938
 22824 08:5BF4: 82 0D 00     	brl	L10533
 22825                        L938:
 22826                        	.line	5252
 22827                        ;#if FF_FS_LOCK != 0
 22828                        ;		if (dp->obj.lockid) res = dec_lock(dp->o
                    bj.lockid); /* Decrement sub-directory open counter */
 22829                        ;		if (res == FR_OK) dp->obj.fs = 0; /* Inv
                    alidate directory object */
 22830                        ;#else
 22831                        ;		dp->obj.fs = 0; /* Invalidate directory 
                    object */
 22832                        	.line	5257
 22833 08:5BF7: A9 00 00     	lda	#$0
 22834 08:5BFA: 87 0A        	sta	[<L935+dp_0]
 22835 08:5BFC: A9 00 00     	lda	#$0
 22836 08:5BFF: A0 02 00     	ldy	#$2
 22837 08:5C02: 97 0A        	sta	[<L935+dp_0],Y
 22838                        ;#endif
 22839                        ;#if FF_FS_REENTRANT
 22840                        ;		unlock_fs(fs, FR_OK); /* Unlock volume *
                    /
 22841                        ;#endif
 22842                        ;	}
 22843                        	.line	5262
 22844                        ;	return res;
 22845                        L10533:
 22846                        	.line	5263
 22847 08:5C04: A5 01        	lda	<L936+res_1
 22848                        L939:
 22849 08:5C06: A8           	tay
 22850 08:5C07: A5 08        	lda	<L935+2
 22851 08:5C09: 85 0C        	sta	<L935+2+4
 22852 08:5C0B: A5 07        	lda	<L935+1
 22853 08:5C0D: 85 0B        	sta	<L935+1+4
 22854 08:5C0F: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 434


 22855 08:5C10: 3B           	tsc
 22856 08:5C11: 18           	clc
 22857 08:5C12: 69 0A 00     	adc	#L935+4
 22858 08:5C15: 1B           	tcs
 22859 08:5C16: 98           	tya
 22860 08:5C17: 6B           	rtl
 22861                        ;}
 22862                        	.line	5264
 22863                        	.endblock	5264
 22864             00000006   L935	equ	6
 22865             00000001   L936	equ	1
 22866 08:5C18:              	ends
 22867                        	efunc
 22868                        	.endfunc	5264,1,6
 22869                        	.line	5264
 22870                        ;
 22871                        ;/*-----------------------------------------------
                    ------------------------*/
 22872                        ;/* Read Directory Entries in Sequence            
                                            */
 22873                        ;/*-----------------------------------------------
                    ------------------------*/
 22874                        ;
 22875                        ;FRESULT f_readdir(DIR* dp, /* Pointer to the open
                     directory object */
 22876                        ;FILINFO* fno /* Pointer to file information to re
                    turn */
 22877                        ;)
 22878                        ;{
 22879                        	.line	5270
 22880                        	.line	5273
 22881                        	FFDOS
 22882                        	xdef	~~f_readdir
 22883                        	func
 22884                        	.function	5273
 22885                        ~~f_readdir:
 22886                        	longa	on
 22887                        	longi	on
 22888 08:5C18: 3B           	tsc
 22889 08:5C19: 38           	sec
 22890 08:5C1A: E9 0A 00     	sbc	#L940
 22891 08:5C1D: 1B           	tcs
 22892 08:5C1E: 0B           	phd
 22893 08:5C1F: 5B           	tcd
 22894             00000004   dp_0	set	4
 22895             00000008   fno_0	set	8
 22896                        	.block	5273
 22897                        ;	FRESULT res;
 22898                        ;	FATFS *fs;
 22899                        ;	DEF_NAMBUF
 22900                        ;
 22901                        ;	res = validate(&dp->obj, &fs); /* Check validity
                     of the directory object */
 22902             00000000   res_1	set	0
 22903             00000002   fs_1	set	2
 22904             00000006   lfn_1	set	6
 22905                        	.sym	res,0,5,1,16
 22906                        	.sym	fs,2,138,1,32,72
  Sat Jul 10 2021  1:15                                                Page 435


 22907                        	.sym	lfn,6,144,1,32
 22908                        	.sym	dp,4,138,6,32,75
 22909                        	.sym	fno,8,138,6,32,76
 22910                        	.line	5278
 22911 08:5C20: F4 00 00     	pea	#0
 22912 08:5C23: 18           	clc
 22913 08:5C24: 7B           	tdc
 22914 08:5C25: 69 03 00     	adc	#<L941+fs_1
 22915 08:5C28: 48           	pha
 22916 08:5C29: D4 10        	pei	<L940+dp_0+2
 22917 08:5C2B: D4 0E        	pei	<L940+dp_0
 22918 08:5C2D: 22 8B 44 08  	jsl	~~validate
 22919 08:5C31: 85 01        	sta	<L941+res_1
 22920                        ;	if (res == FR_OK)
 22921                        	.line	5279
 22922                        ;	{
 22923 08:5C33: A5 01        	lda	<L941+res_1
 22924 08:5C35: F0 03        	beq	L943
 22925 08:5C37: 82 A0 00     	brl	L10534
 22926                        L943:
 22927                        	.line	5280
 22928                        ;		if (!fno)
 22929                        	.line	5281
 22930                        ;		{
 22931 08:5C3A: A5 12        	lda	<L940+fno_0
 22932 08:5C3C: 05 14        	ora	<L940+fno_0+2
 22933 08:5C3E: F0 03        	beq	L944
 22934 08:5C40: 82 13 00     	brl	L10535
 22935                        L944:
 22936                        	.line	5282
 22937                        ;			res = dir_sdi(dp, 0); /* Rewind 
                    the directory object */
 22938                        	.line	5283
 22939 08:5C43: F4 00 00     	pea	#^$0
 22940 08:5C46: F4 00 00     	pea	#<$0
 22941 08:5C49: D4 10        	pei	<L940+dp_0+2
 22942 08:5C4B: D4 0E        	pei	<L940+dp_0
 22943 08:5C4D: 22 60 17 08  	jsl	~~dir_sdi
 22944 08:5C51: 85 01        	sta	<L941+res_1
 22945                        ;		}
 22946                        	.line	5284
 22947                        ;		else
 22948 08:5C53: 82 84 00     	brl	L10536
 22949                        L10535:
 22950                        ;		{
 22951                        	.line	5286
 22952                        ;			INIT_NAMBUF(fs);
 22953                        	.line	5287
 22954                        	.line	5287
 22955 08:5C56: F4 00 02     	pea	#<$200
 22956 08:5C59: 22 AB 92 08  	jsl	~~ff_memalloc
 22957 08:5C5D: 85 07        	sta	<L941+lfn_1
 22958 08:5C5F: 86 09        	stx	<L941+lfn_1+2
 22959                        	.line	5287
 22960 08:5C61: A5 07        	lda	<L941+lfn_1
 22961 08:5C63: 05 09        	ora	<L941+lfn_1+2
 22962 08:5C65: F0 03        	beq	L945
 22963 08:5C67: 82 15 00     	brl	L10537
  Sat Jul 10 2021  1:15                                                Page 436


 22964                        L945:
 22965                        	.line	5287
 22966 08:5C6A: A9 11 00     	lda	#$11
 22967                        L946:
 22968 08:5C6D: A8           	tay
 22969 08:5C6E: A5 0C        	lda	<L940+2
 22970 08:5C70: 85 14        	sta	<L940+2+8
 22971 08:5C72: A5 0B        	lda	<L940+1
 22972 08:5C74: 85 13        	sta	<L940+1+8
 22973 08:5C76: 2B           	pld
 22974 08:5C77: 3B           	tsc
 22975 08:5C78: 18           	clc
 22976 08:5C79: 69 12 00     	adc	#L940+8
 22977 08:5C7C: 1B           	tcs
 22978 08:5C7D: 98           	tya
 22979 08:5C7E: 6B           	rtl
 22980                        L10537:
 22981                        	.line	5287
 22982 08:5C7F: A5 07        	lda	<L941+lfn_1
 22983 08:5C81: A0 0B 00     	ldy	#$b
 22984 08:5C84: 97 03        	sta	[<L941+fs_1],Y
 22985 08:5C86: A5 09        	lda	<L941+lfn_1+2
 22986 08:5C88: A0 0D 00     	ldy	#$d
 22987 08:5C8B: 97 03        	sta	[<L941+fs_1],Y
 22988                        	.line	5287
 22989                        	.line	5287
 22990                        ;			res = DIR_READ_FILE(dp); /* Read
                     an item */
 22991                        	.line	5288
 22992 08:5C8D: F4 00 00     	pea	#<$0
 22993 08:5C90: D4 10        	pei	<L940+dp_0+2
 22994 08:5C92: D4 0E        	pei	<L940+dp_0
 22995 08:5C94: 22 9B 23 08  	jsl	~~dir_read
 22996 08:5C98: 85 01        	sta	<L941+res_1
 22997                        ;			if (res == FR_NO_FILE)
 22998                        	.line	5289
 22999                        ;				res = FR_OK; /* Ignore e
                    nd of directory */
 23000 08:5C9A: A5 01        	lda	<L941+res_1
 23001 08:5C9C: C9 04 00     	cmp	#<$4
 23002 08:5C9F: F0 03        	beq	L947
 23003 08:5CA1: 82 02 00     	brl	L10538
 23004                        L947:
 23005                        	.line	5290
 23006 08:5CA4: 64 01        	stz	<L941+res_1
 23007                        ;			if (res == FR_OK)
 23008                        L10538:
 23009                        	.line	5291
 23010                        ;			{ /* A valid entry is found */
 23011 08:5CA6: A5 01        	lda	<L941+res_1
 23012 08:5CA8: F0 03        	beq	L948
 23013 08:5CAA: 82 25 00     	brl	L10539
 23014                        L948:
 23015                        	.line	5292
 23016                        ;				get_fileinfo(dp, fno); /
                    * Get the object information */
 23017                        	.line	5293
 23018 08:5CAD: D4 14        	pei	<L940+fno_0+2
  Sat Jul 10 2021  1:15                                                Page 437


 23019 08:5CAF: D4 12        	pei	<L940+fno_0
 23020 08:5CB1: D4 10        	pei	<L940+dp_0+2
 23021 08:5CB3: D4 0E        	pei	<L940+dp_0
 23022 08:5CB5: 22 09 2C 08  	jsl	~~get_fileinfo
 23023                        ;				res = dir_next(dp, 0); /
                    * Increment index for next */
 23024                        	.line	5294
 23025 08:5CB9: F4 00 00     	pea	#<$0
 23026 08:5CBC: D4 10        	pei	<L940+dp_0+2
 23027 08:5CBE: D4 0E        	pei	<L940+dp_0
 23028 08:5CC0: 22 9F 19 08  	jsl	~~dir_next
 23029 08:5CC4: 85 01        	sta	<L941+res_1
 23030                        ;				if (res == FR_NO_FILE)
 23031                        	.line	5295
 23032                        ;					res = FR_OK; /* 
                    Ignore end of directory now */
 23033 08:5CC6: A5 01        	lda	<L941+res_1
 23034 08:5CC8: C9 04 00     	cmp	#<$4
 23035 08:5CCB: F0 03        	beq	L949
 23036 08:5CCD: 82 02 00     	brl	L10540
 23037                        L949:
 23038                        	.line	5296
 23039 08:5CD0: 64 01        	stz	<L941+res_1
 23040                        ;			} FREE_NAMBUF();
 23041                        L10540:
 23042                        	.line	5297
 23043                        L10539:
 23044                        	.line	5297
 23045 08:5CD2: D4 09        	pei	<L941+lfn_1+2
 23046 08:5CD4: D4 07        	pei	<L941+lfn_1
 23047 08:5CD6: 22 D3 92 08  	jsl	~~ff_memfree
 23048                        ;		}
 23049                        	.line	5298
 23050                        L10536:
 23051                        ;	}
 23052                        	.line	5299
 23053                        ;	LEAVE_FF(fs, res);
 23054                        L10534:
 23055                        	.line	5300
 23056 08:5CDA: A5 01        	lda	<L941+res_1
 23057 08:5CDC: 82 8E FF     	brl	L946
 23058                        ;}
 23059                        	.line	5301
 23060                        	.endblock	5301
 23061             0000000A   L940	equ	10
 23062             00000001   L941	equ	1
 23063 08:5CDF:              	ends
 23064                        	efunc
 23065                        	.endfunc	5301,1,10
 23066                        	.line	5301
 23067                        ;
 23068                        ;#if FF_USE_FIND
 23069                        ;/*-----------------------------------------------
                    ------------------------*/
 23070                        ;/* Find Next File                                
                                            */
 23071                        ;/*-----------------------------------------------
                    ------------------------*/
  Sat Jul 10 2021  1:15                                                Page 438


 23072                        ;
 23073                        ;FRESULT f_findnext (
 23074                        ;		DIR* dp, /* Pointer to the open director
                    y object */
 23075                        ;		FILINFO* fno /* Pointer to the file info
                    rmation structure */
 23076                        ;)
 23077                        ;{
 23078                        	.line	5308
 23079                        	.line	5312
 23080                        	FFDOS
 23081                        	xdef	~~f_findnext
 23082                        	func
 23083                        	.function	5312
 23084                        ~~f_findnext:
 23085                        	longa	on
 23086                        	longi	on
 23087 08:5CDF: 3B           	tsc
 23088 08:5CE0: 38           	sec
 23089 08:5CE1: E9 06 00     	sbc	#L950
 23090 08:5CE4: 1B           	tcs
 23091 08:5CE5: 0B           	phd
 23092 08:5CE6: 5B           	tcd
 23093             00000004   dp_0	set	4
 23094             00000008   fno_0	set	8
 23095                        	.block	5312
 23096                        ;	FRESULT res;
 23097                        ;
 23098                        ;	for (;;)
 23099             00000000   res_1	set	0
 23100                        	.sym	res,0,5,1,16
 23101                        	.sym	dp,4,138,6,32,75
 23102                        	.sym	fno,8,138,6,32,76
 23103                        	.line	5315
 23104                        L10543:
 23105                        ;	{
 23106                        	.line	5316
 23107                        ;		res = f_readdir(dp, fno); /* Get a direc
                    tory item */
 23108                        	.line	5317
 23109 08:5CE7: D4 10        	pei	<L950+fno_0+2
 23110 08:5CE9: D4 0E        	pei	<L950+fno_0
 23111 08:5CEB: D4 0C        	pei	<L950+dp_0+2
 23112 08:5CED: D4 0A        	pei	<L950+dp_0
 23113 08:5CEF: 22 18 5C 08  	jsl	~~f_readdir
 23114 08:5CF3: 85 05        	sta	<L951+res_1
 23115                        ;		if (res != FR_OK || !fno || !fno->fname[
                    0]) break; /* Terminate if any error or end of directory */
 23116                        	.line	5318
 23117 08:5CF5: A5 05        	lda	<L951+res_1
 23118 08:5CF7: F0 03        	beq	L953
 23119 08:5CF9: 82 77 00     	brl	L10542
 23120                        L953:
 23121 08:5CFC: A5 0E        	lda	<L950+fno_0
 23122 08:5CFE: 05 10        	ora	<L950+fno_0+2
 23123 08:5D00: D0 03        	bne	L954
 23124 08:5D02: 82 6E 00     	brl	L10542
 23125                        L954:
  Sat Jul 10 2021  1:15                                                Page 439


 23126 08:5D05: A0 16 00     	ldy	#$16
 23127 08:5D08: B7 0E        	lda	[<L950+fno_0],Y
 23128 08:5D0A: 29 FF 00     	and	#$ff
 23129 08:5D0D: D0 03        	bne	L955
 23130 08:5D0F: 82 61 00     	brl	L10542
 23131                        L955:
 23132                        ;		if (pattern_matching(dp->pat, fno->fname
                    , 0, 0)) break; /* Test for the file name */
 23133                        	.line	5319
 23134 08:5D12: F4 00 00     	pea	#<$0
 23135 08:5D15: F4 00 00     	pea	#<$0
 23136 08:5D18: 18           	clc
 23137 08:5D19: A9 16 00     	lda	#$16
 23138 08:5D1C: 65 0E        	adc	<L950+fno_0
 23139 08:5D1E: 85 01        	sta	<R0
 23140 08:5D20: A9 00 00     	lda	#$0
 23141 08:5D23: 65 10        	adc	<L950+fno_0+2
 23142 08:5D25: 85 03        	sta	<R0+2
 23143 08:5D27: D4 03        	pei	<R0+2
 23144 08:5D29: D4 01        	pei	<R0
 23145 08:5D2B: A0 32 00     	ldy	#$32
 23146 08:5D2E: B7 0A        	lda	[<L950+dp_0],Y
 23147 08:5D30: 48           	pha
 23148 08:5D31: A0 30 00     	ldy	#$30
 23149 08:5D34: B7 0A        	lda	[<L950+dp_0],Y
 23150 08:5D36: 48           	pha
 23151 08:5D37: 22 A4 30 08  	jsl	~~pattern_matching
 23152 08:5D3B: AA           	tax
 23153 08:5D3C: F0 03        	beq	L956
 23154 08:5D3E: 82 32 00     	brl	L10542
 23155                        L956:
 23156                        ;#if FF_USE_LFN && FF_USE_FIND == 2
 23157                        ;		if (pattern_matching(dp->pat, fno->altna
                    me, 0, 0)) break; /* Test for alternative name if exist */
 23158                        	.line	5321
 23159 08:5D41: F4 00 00     	pea	#<$0
 23160 08:5D44: F4 00 00     	pea	#<$0
 23161 08:5D47: 18           	clc
 23162 08:5D48: A9 09 00     	lda	#$9
 23163 08:5D4B: 65 0E        	adc	<L950+fno_0
 23164 08:5D4D: 85 01        	sta	<R0
 23165 08:5D4F: A9 00 00     	lda	#$0
 23166 08:5D52: 65 10        	adc	<L950+fno_0+2
 23167 08:5D54: 85 03        	sta	<R0+2
 23168 08:5D56: D4 03        	pei	<R0+2
 23169 08:5D58: D4 01        	pei	<R0
 23170 08:5D5A: A0 32 00     	ldy	#$32
 23171 08:5D5D: B7 0A        	lda	[<L950+dp_0],Y
 23172 08:5D5F: 48           	pha
 23173 08:5D60: A0 30 00     	ldy	#$30
 23174 08:5D63: B7 0A        	lda	[<L950+dp_0],Y
 23175 08:5D65: 48           	pha
 23176 08:5D66: 22 A4 30 08  	jsl	~~pattern_matching
 23177 08:5D6A: AA           	tax
 23178 08:5D6B: F0 03        	beq	L957
 23179 08:5D6D: 82 03 00     	brl	L10542
 23180                        L957:
 23181                        ;#endif
  Sat Jul 10 2021  1:15                                                Page 440


 23182                        ;	}
 23183                        	.line	5323
 23184                        L10541:
 23185 08:5D70: 82 74 FF     	brl	L10543
 23186                        L10542:
 23187                        ;	return res;
 23188                        	.line	5324
 23189 08:5D73: A5 05        	lda	<L951+res_1
 23190                        L958:
 23191 08:5D75: A8           	tay
 23192 08:5D76: A5 08        	lda	<L950+2
 23193 08:5D78: 85 10        	sta	<L950+2+8
 23194 08:5D7A: A5 07        	lda	<L950+1
 23195 08:5D7C: 85 0F        	sta	<L950+1+8
 23196 08:5D7E: 2B           	pld
 23197 08:5D7F: 3B           	tsc
 23198 08:5D80: 18           	clc
 23199 08:5D81: 69 0E 00     	adc	#L950+8
 23200 08:5D84: 1B           	tcs
 23201 08:5D85: 98           	tya
 23202 08:5D86: 6B           	rtl
 23203                        ;}
 23204                        	.line	5325
 23205                        	.endblock	5325
 23206             00000006   L950	equ	6
 23207             00000005   L951	equ	5
 23208 08:5D87:              	ends
 23209                        	efunc
 23210                        	.endfunc	5325,5,6
 23211                        	.line	5325
 23212                        ;
 23213                        ;/*-----------------------------------------------
                    ------------------------*/
 23214                        ;/* Find First File                               
                                            */
 23215                        ;/*-----------------------------------------------
                    ------------------------*/
 23216                        ;
 23217                        ;FRESULT f_findfirst (
 23218                        ;		DIR* dp, /* Pointer to the blank directo
                    ry object */
 23219                        ;		FILINFO* fno, /* Pointer to the file inf
                    ormation structure */
 23220                        ;		const TCHAR* path, /* Pointer to the dir
                    ectory to open */
 23221                        ;		const TCHAR* pattern /* Pointer to the m
                    atching pattern */
 23222                        ;)
 23223                        ;{
 23224                        	.line	5331
 23225                        	.line	5337
 23226                        	FFDOS
 23227                        	xdef	~~f_findfirst
 23228                        	func
 23229                        	.function	5337
 23230                        ~~f_findfirst:
 23231                        	longa	on
 23232                        	longi	on
  Sat Jul 10 2021  1:15                                                Page 441


 23233 08:5D87: 3B           	tsc
 23234 08:5D88: 38           	sec
 23235 08:5D89: E9 02 00     	sbc	#L959
 23236 08:5D8C: 1B           	tcs
 23237 08:5D8D: 0B           	phd
 23238 08:5D8E: 5B           	tcd
 23239             00000004   dp_0	set	4
 23240             00000008   fno_0	set	8
 23241             0000000C   path_0	set	12
 23242             00000010   pattern_0	set	16
 23243                        	.block	5337
 23244                        ;	FRESULT res;
 23245                        ;
 23246                        ;	dp->pat = pattern; /* Save pointer to pattern st
                    ring */
 23247             00000000   res_1	set	0
 23248                        	.sym	res,0,5,1,16
 23249                        	.sym	dp,4,138,6,32,75
 23250                        	.sym	fno,8,138,6,32,76
 23251                        	.sym	path,12,142,6,32
 23252                        	.sym	pattern,16,142,6,32
 23253                        	.line	5340
 23254 08:5D8F: A5 12        	lda	<L959+pattern_0
 23255 08:5D91: A0 30 00     	ldy	#$30
 23256 08:5D94: 97 06        	sta	[<L959+dp_0],Y
 23257 08:5D96: A5 14        	lda	<L959+pattern_0+2
 23258 08:5D98: A0 32 00     	ldy	#$32
 23259 08:5D9B: 97 06        	sta	[<L959+dp_0],Y
 23260                        ;	res = f_opendir(dp, path); /* Open the target di
                    rectory */
 23261                        	.line	5341
 23262 08:5D9D: D4 10        	pei	<L959+path_0+2
 23263 08:5D9F: D4 0E        	pei	<L959+path_0
 23264 08:5DA1: D4 08        	pei	<L959+dp_0+2
 23265 08:5DA3: D4 06        	pei	<L959+dp_0
 23266 08:5DA5: 22 A6 5A 08  	jsl	~~f_opendir
 23267 08:5DA9: 85 01        	sta	<L960+res_1
 23268                        ;	if (res == FR_OK)
 23269                        	.line	5342
 23270                        ;	{
 23271 08:5DAB: A5 01        	lda	<L960+res_1
 23272 08:5DAD: F0 03        	beq	L962
 23273 08:5DAF: 82 0E 00     	brl	L10544
 23274                        L962:
 23275                        	.line	5343
 23276                        ;		res = f_findnext(dp, fno); /* Find the f
                    irst item */
 23277                        	.line	5344
 23278 08:5DB2: D4 0C        	pei	<L959+fno_0+2
 23279 08:5DB4: D4 0A        	pei	<L959+fno_0
 23280 08:5DB6: D4 08        	pei	<L959+dp_0+2
 23281 08:5DB8: D4 06        	pei	<L959+dp_0
 23282 08:5DBA: 22 DF 5C 08  	jsl	~~f_findnext
 23283 08:5DBE: 85 01        	sta	<L960+res_1
 23284                        ;	}
 23285                        	.line	5345
 23286                        ;	return res;
 23287                        L10544:
  Sat Jul 10 2021  1:15                                                Page 442


 23288                        	.line	5346
 23289 08:5DC0: A5 01        	lda	<L960+res_1
 23290                        L963:
 23291 08:5DC2: A8           	tay
 23292 08:5DC3: A5 04        	lda	<L959+2
 23293 08:5DC5: 85 14        	sta	<L959+2+16
 23294 08:5DC7: A5 03        	lda	<L959+1
 23295 08:5DC9: 85 13        	sta	<L959+1+16
 23296 08:5DCB: 2B           	pld
 23297 08:5DCC: 3B           	tsc
 23298 08:5DCD: 18           	clc
 23299 08:5DCE: 69 12 00     	adc	#L959+16
 23300 08:5DD1: 1B           	tcs
 23301 08:5DD2: 98           	tya
 23302 08:5DD3: 6B           	rtl
 23303                        ;}
 23304                        	.line	5347
 23305                        	.endblock	5347
 23306             00000002   L959	equ	2
 23307             00000001   L960	equ	1
 23308 08:5DD4:              	ends
 23309                        	efunc
 23310                        	.endfunc	5347,1,2
 23311                        	.line	5347
 23312                        ;
 23313                        ;#endif	/* FF_USE_FIND */
 23314                        ;
 23315                        ;#if FF_FS_MINIMIZE == 0
 23316                        ;/*-----------------------------------------------
                    ------------------------*/
 23317                        ;/* Get File Status                               
                                            */
 23318                        ;/*-----------------------------------------------
                    ------------------------*/
 23319                        ;
 23320                        ;FRESULT f_stat(const TCHAR* path, /* Pointer to t
                    he file path */
 23321                        ;FILINFO* fno /* Pointer to file information to re
                    turn */
 23322                        ;)
 23323                        ;{
 23324                        	.line	5356
 23325                        	.line	5359
 23326                        	FFDOS
 23327                        	xdef	~~f_stat
 23328                        	func
 23329                        	.function	5359
 23330                        ~~f_stat:
 23331                        	longa	on
 23332                        	longi	on
 23333 08:5DD4: 3B           	tsc
 23334 08:5DD5: 38           	sec
 23335 08:5DD6: E9 3A 00     	sbc	#L964
 23336 08:5DD9: 1B           	tcs
 23337 08:5DDA: 0B           	phd
 23338 08:5DDB: 5B           	tcd
 23339             00000004   path_0	set	4
 23340             00000008   fno_0	set	8
  Sat Jul 10 2021  1:15                                                Page 443


 23341                        	.block	5359
 23342                        ;	FRESULT res;
 23343                        ;	DIR dj;
 23344                        ;	DEF_NAMBUF
 23345                        ;
 23346                        ;	/* Get logical drive */
 23347                        ;	res = mount_volume(&path, &dj.obj.fs, 0);
 23348             00000000   res_1	set	0
 23349             00000002   dj_1	set	2
 23350             00000036   lfn_1	set	54
 23351                        	.sym	res,0,5,1,16
 23352                        	.sym	dj,2,10,1,416,75
 23353                        	.sym	lfn,54,144,1,32
 23354                        	.sym	path,4,142,6,32
 23355                        	.sym	fno,8,138,6,32,76
 23356                        	.line	5365
 23357 08:5DDC: F4 00 00     	pea	#<$0
 23358 08:5DDF: F4 00 00     	pea	#0
 23359 08:5DE2: 18           	clc
 23360 08:5DE3: 7B           	tdc
 23361 08:5DE4: 69 03 00     	adc	#<L965+dj_1
 23362 08:5DE7: 48           	pha
 23363 08:5DE8: F4 00 00     	pea	#0
 23364 08:5DEB: 18           	clc
 23365 08:5DEC: 7B           	tdc
 23366 08:5DED: 69 3E 00     	adc	#<L964+path_0
 23367 08:5DF0: 48           	pha
 23368 08:5DF1: 22 B8 3D 08  	jsl	~~mount_volume
 23369 08:5DF5: 85 01        	sta	<L965+res_1
 23370                        ;	if (res == FR_OK)
 23371                        	.line	5366
 23372                        ;	{
 23373 08:5DF7: A5 01        	lda	<L965+res_1
 23374 08:5DF9: F0 03        	beq	L967
 23375 08:5DFB: 82 88 00     	brl	L10545
 23376                        L967:
 23377                        	.line	5367
 23378                        ;		INIT_NAMBUF(dj.obj.fs);
 23379                        	.line	5368
 23380                        	.line	5368
 23381 08:5DFE: F4 00 02     	pea	#<$200
 23382 08:5E01: 22 AB 92 08  	jsl	~~ff_memalloc
 23383 08:5E05: 85 37        	sta	<L965+lfn_1
 23384 08:5E07: 86 39        	stx	<L965+lfn_1+2
 23385                        	.line	5368
 23386 08:5E09: A5 37        	lda	<L965+lfn_1
 23387 08:5E0B: 05 39        	ora	<L965+lfn_1+2
 23388 08:5E0D: F0 03        	beq	L968
 23389 08:5E0F: 82 15 00     	brl	L10546
 23390                        L968:
 23391                        	.line	5368
 23392 08:5E12: A9 11 00     	lda	#$11
 23393                        L969:
 23394 08:5E15: A8           	tay
 23395 08:5E16: A5 3C        	lda	<L964+2
 23396 08:5E18: 85 44        	sta	<L964+2+8
 23397 08:5E1A: A5 3B        	lda	<L964+1
 23398 08:5E1C: 85 43        	sta	<L964+1+8
  Sat Jul 10 2021  1:15                                                Page 444


 23399 08:5E1E: 2B           	pld
 23400 08:5E1F: 3B           	tsc
 23401 08:5E20: 18           	clc
 23402 08:5E21: 69 42 00     	adc	#L964+8
 23403 08:5E24: 1B           	tcs
 23404 08:5E25: 98           	tya
 23405 08:5E26: 6B           	rtl
 23406                        L10546:
 23407                        	.line	5368
 23408 08:5E27: A5 37        	lda	<L965+lfn_1
 23409 08:5E29: A0 0B 00     	ldy	#$b
 23410 08:5E2C: 97 03        	sta	[<L965+dj_1],Y
 23411 08:5E2E: A5 39        	lda	<L965+lfn_1+2
 23412 08:5E30: A0 0D 00     	ldy	#$d
 23413 08:5E33: 97 03        	sta	[<L965+dj_1],Y
 23414                        	.line	5368
 23415                        	.line	5368
 23416                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 23417                        	.line	5369
 23418 08:5E35: D4 40        	pei	<L964+path_0+2
 23419 08:5E37: D4 3E        	pei	<L964+path_0
 23420 08:5E39: F4 00 00     	pea	#0
 23421 08:5E3C: 18           	clc
 23422 08:5E3D: 7B           	tdc
 23423 08:5E3E: 69 03 00     	adc	#<L965+dj_1
 23424 08:5E41: 48           	pha
 23425 08:5E42: 22 2B 37 08  	jsl	~~follow_path
 23426 08:5E46: 85 01        	sta	<L965+res_1
 23427                        ;		if (res == FR_OK)
 23428                        	.line	5370
 23429                        ;		{ /* Follow completed */
 23430 08:5E48: A5 01        	lda	<L965+res_1
 23431 08:5E4A: F0 03        	beq	L970
 23432 08:5E4C: 82 2F 00     	brl	L10547
 23433                        L970:
 23434                        	.line	5371
 23435                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 23436                        	.line	5372
 23437                        ;			{ /* It is origin directory */
 23438 08:5E4F: E2 20        	sep	#$20
 23439                        	longa	off
 23440 08:5E51: A5 2E        	lda	<L965+dj_1+43
 23441 08:5E53: 29 80        	and	#<$80
 23442 08:5E55: C2 20        	rep	#$20
 23443                        	longa	on
 23444 08:5E57: D0 03        	bne	L971
 23445 08:5E59: 82 08 00     	brl	L10548
 23446                        L971:
 23447                        	.line	5373
 23448                        ;				res = FR_INVALID_NAME;
 23449                        	.line	5374
 23450 08:5E5C: A9 06 00     	lda	#$6
 23451 08:5E5F: 85 01        	sta	<L965+res_1
 23452                        ;			}
 23453                        	.line	5375
 23454                        ;			else
 23455 08:5E61: 82 1A 00     	brl	L10549
  Sat Jul 10 2021  1:15                                                Page 445


 23456                        L10548:
 23457                        ;			{ /* Found an object */
 23458                        	.line	5377
 23459                        ;				if (fno)
 23460                        	.line	5378
 23461                        ;					get_fileinfo(&dj
                    , fno);
 23462 08:5E64: A5 42        	lda	<L964+fno_0
 23463 08:5E66: 05 44        	ora	<L964+fno_0+2
 23464 08:5E68: D0 03        	bne	L972
 23465 08:5E6A: 82 11 00     	brl	L10550
 23466                        L972:
 23467                        	.line	5379
 23468 08:5E6D: D4 44        	pei	<L964+fno_0+2
 23469 08:5E6F: D4 42        	pei	<L964+fno_0
 23470 08:5E71: F4 00 00     	pea	#0
 23471 08:5E74: 18           	clc
 23472 08:5E75: 7B           	tdc
 23473 08:5E76: 69 03 00     	adc	#<L965+dj_1
 23474 08:5E79: 48           	pha
 23475 08:5E7A: 22 09 2C 08  	jsl	~~get_fileinfo
 23476                        ;			}
 23477                        L10550:
 23478                        	.line	5380
 23479                        L10549:
 23480                        ;		} FREE_NAMBUF();
 23481                        	.line	5381
 23482                        L10547:
 23483                        	.line	5381
 23484 08:5E7E: D4 39        	pei	<L965+lfn_1+2
 23485 08:5E80: D4 37        	pei	<L965+lfn_1
 23486 08:5E82: 22 D3 92 08  	jsl	~~ff_memfree
 23487                        ;	}
 23488                        	.line	5382
 23489                        ;
 23490                        ;	LEAVE_FF(dj.obj.fs, res);
 23491                        L10545:
 23492                        	.line	5384
 23493 08:5E86: A5 01        	lda	<L965+res_1
 23494 08:5E88: 82 8A FF     	brl	L969
 23495                        ;}
 23496                        	.line	5385
 23497                        	.endblock	5385
 23498             0000003A   L964	equ	58
 23499             00000001   L965	equ	1
 23500 08:5E8B:              	ends
 23501                        	efunc
 23502                        	.endfunc	5385,1,58
 23503                        	.line	5385
 23504                        ;
 23505                        ;#if !FF_FS_READONLY
 23506                        ;/*-----------------------------------------------
                    ------------------------*/
 23507                        ;/* Get Number of Free Clusters                   
                                            */
 23508                        ;/*-----------------------------------------------
                    ------------------------*/
 23509                        ;
  Sat Jul 10 2021  1:15                                                Page 446


 23510                        ;FRESULT f_getfree(const TCHAR* path, /* Logical d
                    rive number */
 23511                        ;DWORD* nclst, /* Pointer to a variable to return 
                    number of free clusters */
 23512                        ;FATFS** fatfs /* Pointer to return pointer to cor
                    responding filesystem object */
 23513                        ;)
 23514                        ;{
 23515                        	.line	5392
 23516                        	.line	5396
 23517                        	FFDOS
 23518                        	xdef	~~f_getfree
 23519                        	func
 23520                        	.function	5396
 23521                        ~~f_getfree:
 23522                        	longa	on
 23523                        	longi	on
 23524 08:5E8B: 3B           	tsc
 23525 08:5E8C: 38           	sec
 23526 08:5E8D: E9 38 00     	sbc	#L973
 23527 08:5E90: 1B           	tcs
 23528 08:5E91: 0B           	phd
 23529 08:5E92: 5B           	tcd
 23530             00000004   path_0	set	4
 23531             00000008   nclst_0	set	8
 23532             0000000C   fatfs_0	set	12
 23533                        	.block	5396
 23534                        ;	FRESULT res;
 23535                        ;	FATFS *fs;
 23536                        ;	DWORD nfree, clst, stat;
 23537                        ;	LBA_t sect;
 23538                        ;	UINT i;
 23539                        ;	FFOBJID obj;
 23540                        ;
 23541                        ;	/* Get logical drive */
 23542                        ;	res = mount_volume(&path, &fs, 0);
 23543             00000000   res_1	set	0
 23544             00000002   fs_1	set	2
 23545             00000006   nfree_1	set	6
 23546             0000000A   clst_1	set	10
 23547             0000000E   stat_1	set	14
 23548             00000012   sect_1	set	18
 23549             00000016   i_1	set	22
 23550             00000018   obj_1	set	24
 23551                        	.sym	res,0,5,1,16
 23552                        	.sym	fs,2,138,1,32,72
 23553                        	.sym	nfree,6,18,1,32
 23554                        	.sym	clst,10,18,1,32
 23555                        	.sym	stat,14,18,1,32
 23556                        	.sym	sect,18,18,1,32
 23557                        	.sym	i,22,16,1,16
 23558                        	.sym	obj,24,10,1,128,73
 23559                        	.sym	path,4,142,6,32
 23560                        	.sym	nclst,8,146,6,32
 23561                        	.sym	fatfs,12,1162,6,32,72
 23562                        	.line	5405
 23563 08:5E93: F4 00 00     	pea	#<$0
 23564 08:5E96: F4 00 00     	pea	#0
  Sat Jul 10 2021  1:15                                                Page 447


 23565 08:5E99: 18           	clc
 23566 08:5E9A: 7B           	tdc
 23567 08:5E9B: 69 13 00     	adc	#<L974+fs_1
 23568 08:5E9E: 48           	pha
 23569 08:5E9F: F4 00 00     	pea	#0
 23570 08:5EA2: 18           	clc
 23571 08:5EA3: 7B           	tdc
 23572 08:5EA4: 69 3C 00     	adc	#<L973+path_0
 23573 08:5EA7: 48           	pha
 23574 08:5EA8: 22 B8 3D 08  	jsl	~~mount_volume
 23575 08:5EAC: 85 11        	sta	<L974+res_1
 23576                        ;	if (res == FR_OK)
 23577                        	.line	5406
 23578                        ;	{
 23579 08:5EAE: A5 11        	lda	<L974+res_1
 23580 08:5EB0: F0 03        	beq	L976
 23581 08:5EB2: 82 06 02     	brl	L10551
 23582                        L976:
 23583                        	.line	5407
 23584                        ;		*fatfs = fs; /* Return ptr to the fs obj
                    ect */
 23585                        	.line	5408
 23586 08:5EB5: A5 13        	lda	<L974+fs_1
 23587 08:5EB7: 87 44        	sta	[<L973+fatfs_0]
 23588 08:5EB9: A5 15        	lda	<L974+fs_1+2
 23589 08:5EBB: A0 02 00     	ldy	#$2
 23590 08:5EBE: 97 44        	sta	[<L973+fatfs_0],Y
 23591                        ;		/* If free_clst is valid, return it with
                    out full FAT scan */
 23592                        ;		if (fs->free_clst <= fs->n_fatent - 2)
 23593                        	.line	5410
 23594                        ;		{
 23595 08:5EC0: 18           	clc
 23596 08:5EC1: A9 FE FF     	lda	#$fffe
 23597 08:5EC4: A0 17 00     	ldy	#$17
 23598 08:5EC7: 77 13        	adc	[<L974+fs_1],Y
 23599 08:5EC9: 85 01        	sta	<R0
 23600 08:5ECB: A9 FF FF     	lda	#$ffff
 23601 08:5ECE: A0 19 00     	ldy	#$19
 23602 08:5ED1: 77 13        	adc	[<L974+fs_1],Y
 23603 08:5ED3: 85 03        	sta	<R0+2
 23604 08:5ED5: A5 01        	lda	<R0
 23605 08:5ED7: A0 13 00     	ldy	#$13
 23606 08:5EDA: D7 13        	cmp	[<L974+fs_1],Y
 23607 08:5EDC: A5 03        	lda	<R0+2
 23608 08:5EDE: A0 15 00     	ldy	#$15
 23609 08:5EE1: F7 13        	sbc	[<L974+fs_1],Y
 23610 08:5EE3: B0 03        	bcs	L977
 23611 08:5EE5: 82 14 00     	brl	L10552
 23612                        L977:
 23613                        	.line	5411
 23614                        ;			*nclst = fs->free_clst;
 23615                        	.line	5412
 23616 08:5EE8: A0 13 00     	ldy	#$13
 23617 08:5EEB: B7 13        	lda	[<L974+fs_1],Y
 23618 08:5EED: 87 40        	sta	[<L973+nclst_0]
 23619 08:5EEF: A0 15 00     	ldy	#$15
 23620 08:5EF2: B7 13        	lda	[<L974+fs_1],Y
  Sat Jul 10 2021  1:15                                                Page 448


 23621 08:5EF4: A0 02 00     	ldy	#$2
 23622 08:5EF7: 97 40        	sta	[<L973+nclst_0],Y
 23623                        ;		}
 23624                        	.line	5413
 23625                        ;		else
 23626 08:5EF9: 82 BF 01     	brl	L10553
 23627                        L10552:
 23628                        ;		{
 23629                        	.line	5415
 23630                        ;			/* Scan FAT to obtain number of 
                    free clusters */
 23631                        ;			nfree = 0;
 23632                        	.line	5417
 23633 08:5EFC: 64 17        	stz	<L974+nfree_1
 23634 08:5EFE: 64 19        	stz	<L974+nfree_1+2
 23635                        ;			if (fs->fs_type == FS_FAT12)
 23636                        	.line	5418
 23637                        ;			{ /* FAT12: Scan bit field FAT e
                    ntries */
 23638 08:5F00: E2 20        	sep	#$20
 23639                        	longa	off
 23640 08:5F02: A7 13        	lda	[<L974+fs_1]
 23641 08:5F04: C9 01        	cmp	#<$1
 23642 08:5F06: C2 20        	rep	#$20
 23643                        	longa	on
 23644 08:5F08: F0 03        	beq	L978
 23645 08:5F0A: 82 84 00     	brl	L10554
 23646                        L978:
 23647                        	.line	5419
 23648                        ;				clst = 2;
 23649                        	.line	5420
 23650 08:5F0D: A9 02 00     	lda	#$2
 23651 08:5F10: 85 1B        	sta	<L974+clst_1
 23652 08:5F12: A9 00 00     	lda	#$0
 23653 08:5F15: 85 1D        	sta	<L974+clst_1+2
 23654                        ;				obj.fs = fs;
 23655                        	.line	5421
 23656 08:5F17: A5 13        	lda	<L974+fs_1
 23657 08:5F19: 85 29        	sta	<L974+obj_1
 23658 08:5F1B: A5 15        	lda	<L974+fs_1+2
 23659 08:5F1D: 85 2B        	sta	<L974+obj_1+2
 23660                        ;				do
 23661                        	.line	5422
 23662                        L10557:
 23663                        ;				{
 23664                        	.line	5423
 23665                        ;					stat = get_fat(&
                    obj, clst);
 23666                        	.line	5424
 23667 08:5F1F: D4 1D        	pei	<L974+clst_1+2
 23668 08:5F21: D4 1B        	pei	<L974+clst_1
 23669 08:5F23: F4 00 00     	pea	#0
 23670 08:5F26: 18           	clc
 23671 08:5F27: 7B           	tdc
 23672 08:5F28: 69 29 00     	adc	#<L974+obj_1
 23673 08:5F2B: 48           	pha
 23674 08:5F2C: 22 54 0B 08  	jsl	~~get_fat
 23675 08:5F30: 85 1F        	sta	<L974+stat_1
  Sat Jul 10 2021  1:15                                                Page 449


 23676 08:5F32: 86 21        	stx	<L974+stat_1+2
 23677                        ;					if (stat == 0xFF
                    FFFFFF)
 23678                        	.line	5425
 23679                        ;					{
 23680 08:5F34: A5 1F        	lda	<L974+stat_1
 23681 08:5F36: C9 FF FF     	cmp	#<$ffffffff
 23682 08:5F39: D0 05        	bne	L979
 23683 08:5F3B: A5 21        	lda	<L974+stat_1+2
 23684 08:5F3D: C9 FF FF     	cmp	#^$ffffffff
 23685                        L979:
 23686 08:5F40: F0 03        	beq	L980
 23687 08:5F42: 82 08 00     	brl	L10558
 23688                        L980:
 23689                        	.line	5426
 23690                        ;						res = FR
                    _DISK_ERR;
 23691                        	.line	5427
 23692 08:5F45: A9 01 00     	lda	#$1
 23693 08:5F48: 85 11        	sta	<L974+res_1
 23694                        ;						break;
 23695                        	.line	5428
 23696 08:5F4A: 82 41 00     	brl	L10556
 23697                        ;					}
 23698                        	.line	5429
 23699                        ;					if (stat == 1)
 23700                        L10558:
 23701                        	.line	5430
 23702                        ;					{
 23703 08:5F4D: A5 1F        	lda	<L974+stat_1
 23704 08:5F4F: C9 01 00     	cmp	#<$1
 23705 08:5F52: D0 05        	bne	L981
 23706 08:5F54: A5 21        	lda	<L974+stat_1+2
 23707 08:5F56: C9 00 00     	cmp	#^$1
 23708                        L981:
 23709 08:5F59: F0 03        	beq	L982
 23710 08:5F5B: 82 08 00     	brl	L10559
 23711                        L982:
 23712                        	.line	5431
 23713                        ;						res = FR
                    _INT_ERR;
 23714                        	.line	5432
 23715 08:5F5E: A9 02 00     	lda	#$2
 23716 08:5F61: 85 11        	sta	<L974+res_1
 23717                        ;						break;
 23718                        	.line	5433
 23719 08:5F63: 82 28 00     	brl	L10556
 23720                        ;					}
 23721                        	.line	5434
 23722                        ;					if (stat == 0)
 23723                        L10559:
 23724                        	.line	5435
 23725                        ;						nfree++;
 23726 08:5F66: A5 1F        	lda	<L974+stat_1
 23727 08:5F68: 05 21        	ora	<L974+stat_1+2
 23728 08:5F6A: F0 03        	beq	L983
 23729 08:5F6C: 82 06 00     	brl	L10560
 23730                        L983:
  Sat Jul 10 2021  1:15                                                Page 450


 23731                        	.line	5436
 23732 08:5F6F: E6 17        	inc	<L974+nfree_1
 23733 08:5F71: D0 02        	bne	L984
 23734 08:5F73: E6 19        	inc	<L974+nfree_1+2
 23735                        L984:
 23736                        ;				} while (++clst < fs->n_
                    fatent);
 23737                        L10560:
 23738                        	.line	5437
 23739                        L10555:
 23740 08:5F75: E6 1B        	inc	<L974+clst_1
 23741 08:5F77: D0 02        	bne	L985
 23742 08:5F79: E6 1D        	inc	<L974+clst_1+2
 23743                        L985:
 23744 08:5F7B: A5 1B        	lda	<L974+clst_1
 23745 08:5F7D: A0 17 00     	ldy	#$17
 23746 08:5F80: D7 13        	cmp	[<L974+fs_1],Y
 23747 08:5F82: A5 1D        	lda	<L974+clst_1+2
 23748 08:5F84: A0 19 00     	ldy	#$19
 23749 08:5F87: F7 13        	sbc	[<L974+fs_1],Y
 23750 08:5F89: B0 03        	bcs	L986
 23751 08:5F8B: 82 91 FF     	brl	L10557
 23752                        L986:
 23753                        L10556:
 23754                        ;			}
 23755                        	.line	5438
 23756                        ;			else
 23757 08:5F8E: 82 F8 00     	brl	L10561
 23758                        L10554:
 23759                        ;			{
 23760                        	.line	5440
 23761                        ;#if FF_FS_EXFAT
 23762                        ;				if (fs->fs_type == FS_EX
                    FAT)
 23763                        ;				{ /* exFAT: Scan allocat
                    ion bitmap */
 23764                        ;					BYTE bm;
 23765                        ;					UINT b;
 23766                        ;
 23767                        ;					clst = fs->n_fat
                    ent - 2; /* Number of clusters */
 23768                        ;					sect = fs->bitba
                    se; /* Bitmap sector */
 23769                        ;					i = 0; /* Offset
                     in the sector */
 23770                        ;					do
 23771                        ;					{ /* Counts numb
                    uer of bits with zero in the bitmap */
 23772                        ;						if (i ==
                     0)
 23773                        ;						{
 23774                        ;							
                    res = move_window(fs, sect++);
 23775                        ;							
                    if (res != FR_OK) break;
 23776                        ;						}
 23777                        ;						for (b =
                     8, bm = fs->win[i]; b && clst; b--, clst--)
  Sat Jul 10 2021  1:15                                                Page 451


 23778                        ;						{
 23779                        ;							
                    if (!(bm & 1)) nfree++;
 23780                        ;							
                    bm >>= 1;
 23781                        ;						}
 23782                        ;						i = (i +
                     1) % SS(fs);
 23783                        ;					}while (clst);
 23784                        ;				}
 23785                        ;				else
 23786                        ;#endif
 23787                        ;				{ /* FAT16/32: Scan WORD
                    /DWORD FAT entries */
 23788                        	.line	5467
 23789                        ;					clst = fs->n_fat
                    ent; /* Number of entries */
 23790                        	.line	5468
 23791 08:5F91: A0 17 00     	ldy	#$17
 23792 08:5F94: B7 13        	lda	[<L974+fs_1],Y
 23793 08:5F96: 85 1B        	sta	<L974+clst_1
 23794 08:5F98: A0 19 00     	ldy	#$19
 23795 08:5F9B: B7 13        	lda	[<L974+fs_1],Y
 23796 08:5F9D: 85 1D        	sta	<L974+clst_1+2
 23797                        ;					sect = fs->fatba
                    se; /* Top of the FAT */
 23798                        	.line	5469
 23799 08:5F9F: A0 23 00     	ldy	#$23
 23800 08:5FA2: B7 13        	lda	[<L974+fs_1],Y
 23801 08:5FA4: 85 23        	sta	<L974+sect_1
 23802 08:5FA6: A0 25 00     	ldy	#$25
 23803 08:5FA9: B7 13        	lda	[<L974+fs_1],Y
 23804 08:5FAB: 85 25        	sta	<L974+sect_1+2
 23805                        ;					i = 0; /* Offset
                     in the sector */
 23806                        	.line	5470
 23807 08:5FAD: 64 27        	stz	<L974+i_1
 23808                        ;					do
 23809                        	.line	5471
 23810                        L10564:
 23811                        ;					{ /* Counts numb
                    uer of entries with zero in the FAT */
 23812                        	.line	5472
 23813                        ;						if (i ==
                     0)
 23814                        	.line	5473
 23815                        ;						{
 23816 08:5FAF: A5 27        	lda	<L974+i_1
 23817 08:5FB1: F0 03        	beq	L987
 23818 08:5FB3: 82 23 00     	brl	L10565
 23819                        L987:
 23820                        	.line	5474
 23821                        ;							
                    res = move_window(fs, sect++);
 23822                        	.line	5475
 23823 08:5FB6: A5 23        	lda	<L974+sect_1
 23824 08:5FB8: 85 01        	sta	<R0
 23825 08:5FBA: A5 25        	lda	<L974+sect_1+2
  Sat Jul 10 2021  1:15                                                Page 452


 23826 08:5FBC: 85 03        	sta	<R0+2
 23827 08:5FBE: E6 23        	inc	<L974+sect_1
 23828 08:5FC0: D0 02        	bne	L988
 23829 08:5FC2: E6 25        	inc	<L974+sect_1+2
 23830                        L988:
 23831 08:5FC4: D4 03        	pei	<R0+2
 23832 08:5FC6: D4 01        	pei	<R0
 23833 08:5FC8: D4 15        	pei	<L974+fs_1+2
 23834 08:5FCA: D4 13        	pei	<L974+fs_1
 23835 08:5FCC: 22 C1 08 08  	jsl	~~move_window
 23836 08:5FD0: 85 11        	sta	<L974+res_1
 23837                        ;							
                    if (res != FR_OK)
 23838                        	.line	5476
 23839                        ;							
                    	break;
 23840 08:5FD2: A5 11        	lda	<L974+res_1
 23841 08:5FD4: F0 03        	beq	L989
 23842 08:5FD6: 82 B0 00     	brl	L10563
 23843                        L989:
 23844                        ;						}
 23845                        	.line	5478
 23846                        ;						if (fs->
                    fs_type == FS_FAT16)
 23847                        L10565:
 23848                        	.line	5479
 23849                        ;						{
 23850 08:5FD9: E2 20        	sep	#$20
 23851                        	longa	off
 23852 08:5FDB: A7 13        	lda	[<L974+fs_1]
 23853 08:5FDD: C9 02        	cmp	#<$2
 23854 08:5FDF: C2 20        	rep	#$20
 23855                        	longa	on
 23856 08:5FE1: F0 03        	beq	L990
 23857 08:5FE3: 82 3D 00     	brl	L10566
 23858                        L990:
 23859                        	.line	5480
 23860                        ;							
                    if (ld_word(fs->win + i) == 0)
 23861                        	.line	5481
 23862                        ;							
                    	nfree++;
 23863 08:5FE6: A5 27        	lda	<L974+i_1
 23864 08:5FE8: 85 01        	sta	<R0
 23865 08:5FEA: 64 03        	stz	<R0+2
 23866 08:5FEC: 18           	clc
 23867 08:5FED: A9 33 00     	lda	#$33
 23868 08:5FF0: 65 01        	adc	<R0
 23869 08:5FF2: 85 05        	sta	<R1
 23870 08:5FF4: A9 00 00     	lda	#$0
 23871 08:5FF7: 65 03        	adc	<R0+2
 23872 08:5FF9: 85 07        	sta	<R1+2
 23873 08:5FFB: 18           	clc
 23874 08:5FFC: A5 13        	lda	<L974+fs_1
 23875 08:5FFE: 65 05        	adc	<R1
 23876 08:6000: 85 01        	sta	<R0
 23877 08:6002: A5 15        	lda	<L974+fs_1+2
 23878 08:6004: 65 07        	adc	<R1+2
  Sat Jul 10 2021  1:15                                                Page 453


 23879 08:6006: 85 03        	sta	<R0+2
 23880 08:6008: D4 03        	pei	<R0+2
 23881 08:600A: D4 01        	pei	<R0
 23882 08:600C: 22 00 00 08  	jsl	~~ld_word
 23883 08:6010: AA           	tax
 23884 08:6011: F0 03        	beq	L991
 23885 08:6013: 82 06 00     	brl	L10567
 23886                        L991:
 23887                        	.line	5482
 23888 08:6016: E6 17        	inc	<L974+nfree_1
 23889 08:6018: D0 02        	bne	L992
 23890 08:601A: E6 19        	inc	<L974+nfree_1+2
 23891                        L992:
 23892                        ;							
                    i += 2;
 23893                        L10567:
 23894                        	.line	5483
 23895 08:601C: E6 27        	inc	<L974+i_1
 23896 08:601E: E6 27        	inc	<L974+i_1
 23897                        ;						}
 23898                        	.line	5484
 23899                        ;						else
 23900 08:6020: 82 50 00     	brl	L10568
 23901                        L10566:
 23902                        ;						{
 23903                        	.line	5486
 23904                        ;							
                    if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0)
 23905                        	.line	5487
 23906                        ;							
                    	nfree++;
 23907 08:6023: A5 27        	lda	<L974+i_1
 23908 08:6025: 85 01        	sta	<R0
 23909 08:6027: 64 03        	stz	<R0+2
 23910 08:6029: 18           	clc
 23911 08:602A: A9 33 00     	lda	#$33
 23912 08:602D: 65 01        	adc	<R0
 23913 08:602F: 85 05        	sta	<R1
 23914 08:6031: A9 00 00     	lda	#$0
 23915 08:6034: 65 03        	adc	<R0+2
 23916 08:6036: 85 07        	sta	<R1+2
 23917 08:6038: 18           	clc
 23918 08:6039: A5 13        	lda	<L974+fs_1
 23919 08:603B: 65 05        	adc	<R1
 23920 08:603D: 85 01        	sta	<R0
 23921 08:603F: A5 15        	lda	<L974+fs_1+2
 23922 08:6041: 65 07        	adc	<R1+2
 23923 08:6043: 85 03        	sta	<R0+2
 23924 08:6045: D4 03        	pei	<R0+2
 23925 08:6047: D4 01        	pei	<R0
 23926 08:6049: 22 3B 00 08  	jsl	~~ld_dword
 23927 08:604D: 85 09        	sta	<R2
 23928 08:604F: 86 0B        	stx	<R2+2
 23929 08:6051: A5 09        	lda	<R2
 23930 08:6053: 85 0D        	sta	<R3
 23931 08:6055: A5 0B        	lda	<R2+2
 23932 08:6057: 29 FF 0F     	and	#^$fffffff
 23933 08:605A: 85 0F        	sta	<R3+2
  Sat Jul 10 2021  1:15                                                Page 454


 23934 08:605C: A5 0D        	lda	<R3
 23935 08:605E: 05 0F        	ora	<R3+2
 23936 08:6060: F0 03        	beq	L993
 23937 08:6062: 82 06 00     	brl	L10569
 23938                        L993:
 23939                        	.line	5488
 23940 08:6065: E6 17        	inc	<L974+nfree_1
 23941 08:6067: D0 02        	bne	L994
 23942 08:6069: E6 19        	inc	<L974+nfree_1+2
 23943                        L994:
 23944                        ;							
                    i += 4;
 23945                        L10569:
 23946                        	.line	5489
 23947 08:606B: 18           	clc
 23948 08:606C: A9 04 00     	lda	#$4
 23949 08:606F: 65 27        	adc	<L974+i_1
 23950 08:6071: 85 27        	sta	<L974+i_1
 23951                        ;						}
 23952                        	.line	5490
 23953                        L10568:
 23954                        ;						i %= SS(
                    fs);
 23955                        	.line	5491
 23956 08:6073: A9 00 FE     	lda	#$fe00
 23957 08:6076: 14 27        	trb	<L974+i_1
 23958                        ;					} while (--clst)
                    ;
 23959                        	.line	5492
 23960                        L10562:
 23961 08:6078: A5 1B        	lda	<L974+clst_1
 23962 08:607A: D0 02        	bne	L995
 23963 08:607C: C6 1D        	dec	<L974+clst_1+2
 23964                        L995:
 23965 08:607E: C6 1B        	dec	<L974+clst_1
 23966 08:6080: A5 1B        	lda	<L974+clst_1
 23967 08:6082: 05 1D        	ora	<L974+clst_1+2
 23968 08:6084: F0 03        	beq	L996
 23969 08:6086: 82 26 FF     	brl	L10564
 23970                        L996:
 23971                        L10563:
 23972                        ;				}
 23973                        	.line	5493
 23974                        ;			}
 23975                        	.line	5494
 23976                        L10561:
 23977                        ;			*nclst = nfree; /* Return the fr
                    ee clusters */
 23978                        	.line	5495
 23979 08:6089: A5 17        	lda	<L974+nfree_1
 23980 08:608B: 87 40        	sta	[<L973+nclst_0]
 23981 08:608D: A5 19        	lda	<L974+nfree_1+2
 23982 08:608F: A0 02 00     	ldy	#$2
 23983 08:6092: 97 40        	sta	[<L973+nclst_0],Y
 23984                        ;			fs->free_clst = nfree; /* Now fr
                    ee_clst is valid */
 23985                        	.line	5496
 23986 08:6094: A5 17        	lda	<L974+nfree_1
  Sat Jul 10 2021  1:15                                                Page 455


 23987 08:6096: A0 13 00     	ldy	#$13
 23988 08:6099: 97 13        	sta	[<L974+fs_1],Y
 23989 08:609B: A5 19        	lda	<L974+nfree_1+2
 23990 08:609D: A0 15 00     	ldy	#$15
 23991 08:60A0: 97 13        	sta	[<L974+fs_1],Y
 23992                        ;			fs->fsi_flag |= 1; /* FAT32: FSI
                    nfo is to be updated */
 23993                        	.line	5497
 23994 08:60A2: 18           	clc
 23995 08:60A3: A9 04 00     	lda	#$4
 23996 08:60A6: 65 13        	adc	<L974+fs_1
 23997 08:60A8: 85 01        	sta	<R0
 23998 08:60AA: A9 00 00     	lda	#$0
 23999 08:60AD: 65 15        	adc	<L974+fs_1+2
 24000 08:60AF: 85 03        	sta	<R0+2
 24001 08:60B1: E2 20        	sep	#$20
 24002                        	longa	off
 24003 08:60B3: A7 01        	lda	[<R0]
 24004 08:60B5: 09 01        	ora	#<$1
 24005 08:60B7: 87 01        	sta	[<R0]
 24006 08:60B9: C2 20        	rep	#$20
 24007                        	longa	on
 24008                        ;		}
 24009                        	.line	5498
 24010                        L10553:
 24011                        ;	}
 24012                        	.line	5499
 24013                        ;
 24014                        ;	LEAVE_FF(fs, res);
 24015                        L10551:
 24016                        	.line	5501
 24017 08:60BB: A5 11        	lda	<L974+res_1
 24018                        L997:
 24019 08:60BD: A8           	tay
 24020 08:60BE: A5 3A        	lda	<L973+2
 24021 08:60C0: 85 46        	sta	<L973+2+12
 24022 08:60C2: A5 39        	lda	<L973+1
 24023 08:60C4: 85 45        	sta	<L973+1+12
 24024 08:60C6: 2B           	pld
 24025 08:60C7: 3B           	tsc
 24026 08:60C8: 18           	clc
 24027 08:60C9: 69 44 00     	adc	#L973+12
 24028 08:60CC: 1B           	tcs
 24029 08:60CD: 98           	tya
 24030 08:60CE: 6B           	rtl
 24031                        ;}
 24032                        	.line	5502
 24033                        	.endblock	5502
 24034             00000038   L973	equ	56
 24035             00000011   L974	equ	17
 24036 08:60CF:              	ends
 24037                        	efunc
 24038                        	.endfunc	5502,17,56
 24039                        	.line	5502
 24040                        ;
 24041                        ;/*-----------------------------------------------
                    ------------------------*/
 24042                        ;/* Truncate File                                 
  Sat Jul 10 2021  1:15                                                Page 456


                                            */
 24043                        ;/*-----------------------------------------------
                    ------------------------*/
 24044                        ;
 24045                        ;FRESULT f_truncate(FIL* fp /* Pointer to the file
                     object */
 24046                        ;)
 24047                        ;{
 24048                        	.line	5508
 24049                        	.line	5510
 24050                        	FFDOS
 24051                        	xdef	~~f_truncate
 24052                        	func
 24053                        	.function	5510
 24054                        ~~f_truncate:
 24055                        	longa	on
 24056                        	longi	on
 24057 08:60CF: 3B           	tsc
 24058 08:60D0: 38           	sec
 24059 08:60D1: E9 0E 00     	sbc	#L998
 24060 08:60D4: 1B           	tcs
 24061 08:60D5: 0B           	phd
 24062 08:60D6: 5B           	tcd
 24063             00000004   fp_0	set	4
 24064                        	.block	5510
 24065                        ;	FRESULT res;
 24066                        ;	FATFS *fs;
 24067                        ;	DWORD ncl;
 24068                        ;
 24069                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 24070             00000000   res_1	set	0
 24071             00000002   fs_1	set	2
 24072             00000006   ncl_1	set	6
 24073                        	.sym	res,0,5,1,16
 24074                        	.sym	fs,2,138,1,32,72
 24075                        	.sym	ncl,6,18,1,32
 24076                        	.sym	fp,4,138,6,32,74
 24077                        	.line	5515
 24078 08:60D7: F4 00 00     	pea	#0
 24079 08:60DA: 18           	clc
 24080 08:60DB: 7B           	tdc
 24081 08:60DC: 69 07 00     	adc	#<L999+fs_1
 24082 08:60DF: 48           	pha
 24083 08:60E0: D4 14        	pei	<L998+fp_0+2
 24084 08:60E2: D4 12        	pei	<L998+fp_0
 24085 08:60E4: 22 8B 44 08  	jsl	~~validate
 24086 08:60E8: 85 05        	sta	<L999+res_1
 24087                        ;	if (res != FR_OK || (res = (FRESULT) fp->err) !=
                     FR_OK)
 24088                        	.line	5516
 24089                        ;		LEAVE_FF(fs, res);
 24090 08:60EA: A5 05        	lda	<L999+res_1
 24091 08:60EC: F0 03        	beq	L1002
 24092 08:60EE: 82 11 00     	brl	L1001
 24093                        L1002:
 24094 08:60F1: A0 11 00     	ldy	#$11
 24095 08:60F4: B7 12        	lda	[<L998+fp_0],Y
  Sat Jul 10 2021  1:15                                                Page 457


 24096 08:60F6: 29 FF 00     	and	#$ff
 24097 08:60F9: 85 05        	sta	<L999+res_1
 24098 08:60FB: A5 05        	lda	<L999+res_1
 24099 08:60FD: D0 03        	bne	L1003
 24100 08:60FF: 82 14 00     	brl	L10570
 24101                        L1003:
 24102                        L1001:
 24103                        	.line	5517
 24104 08:6102: A5 05        	lda	<L999+res_1
 24105                        L1004:
 24106 08:6104: A8           	tay
 24107 08:6105: A5 10        	lda	<L998+2
 24108 08:6107: 85 14        	sta	<L998+2+4
 24109 08:6109: A5 0F        	lda	<L998+1
 24110 08:610B: 85 13        	sta	<L998+1+4
 24111 08:610D: 2B           	pld
 24112 08:610E: 3B           	tsc
 24113 08:610F: 18           	clc
 24114 08:6110: 69 12 00     	adc	#L998+4
 24115 08:6113: 1B           	tcs
 24116 08:6114: 98           	tya
 24117 08:6115: 6B           	rtl
 24118                        ;	if (!(fp->flag & FA_WRITE))
 24119                        L10570:
 24120                        	.line	5518
 24121                        ;		LEAVE_FF(fs, FR_DENIED); /* Check access
                     mode */
 24122 08:6116: E2 20        	sep	#$20
 24123                        	longa	off
 24124 08:6118: A0 10 00     	ldy	#$10
 24125 08:611B: B7 12        	lda	[<L998+fp_0],Y
 24126 08:611D: 29 02        	and	#<$2
 24127 08:611F: C2 20        	rep	#$20
 24128                        	longa	on
 24129 08:6121: F0 03        	beq	L1005
 24130 08:6123: 82 06 00     	brl	L10571
 24131                        L1005:
 24132                        	.line	5519
 24133 08:6126: A9 07 00     	lda	#$7
 24134 08:6129: 82 D8 FF     	brl	L1004
 24135                        ;
 24136                        ;	if (fp->fptr < fp->obj.objsize)
 24137                        L10571:
 24138                        	.line	5521
 24139                        ;	{ /* Process when fptr is not on the eof */
 24140 08:612C: A0 12 00     	ldy	#$12
 24141 08:612F: B7 12        	lda	[<L998+fp_0],Y
 24142 08:6131: A0 0C 00     	ldy	#$c
 24143 08:6134: D7 12        	cmp	[<L998+fp_0],Y
 24144 08:6136: A0 14 00     	ldy	#$14
 24145 08:6139: B7 12        	lda	[<L998+fp_0],Y
 24146 08:613B: A0 0E 00     	ldy	#$e
 24147 08:613E: F7 12        	sbc	[<L998+fp_0],Y
 24148 08:6140: 90 03        	bcc	L1006
 24149 08:6142: 82 66 01     	brl	L10572
 24150                        L1006:
 24151                        	.line	5522
 24152                        ;		if (fp->fptr == 0)
  Sat Jul 10 2021  1:15                                                Page 458


 24153                        	.line	5523
 24154                        ;		{ /* When set file size to zero, remove 
                    entire cluster chain */
 24155 08:6145: A0 12 00     	ldy	#$12
 24156 08:6148: B7 12        	lda	[<L998+fp_0],Y
 24157 08:614A: A0 14 00     	ldy	#$14
 24158 08:614D: 17 12        	ora	[<L998+fp_0],Y
 24159 08:614F: F0 03        	beq	L1007
 24160 08:6151: 82 2F 00     	brl	L10573
 24161                        L1007:
 24162                        	.line	5524
 24163                        ;			res = remove_chain(&fp->obj, fp-
                    >obj.sclust, 0);
 24164                        	.line	5525
 24165 08:6154: F4 00 00     	pea	#^$0
 24166 08:6157: F4 00 00     	pea	#<$0
 24167 08:615A: A0 0A 00     	ldy	#$a
 24168 08:615D: B7 12        	lda	[<L998+fp_0],Y
 24169 08:615F: 48           	pha
 24170 08:6160: A0 08 00     	ldy	#$8
 24171 08:6163: B7 12        	lda	[<L998+fp_0],Y
 24172 08:6165: 48           	pha
 24173 08:6166: D4 14        	pei	<L998+fp_0+2
 24174 08:6168: D4 12        	pei	<L998+fp_0
 24175 08:616A: 22 0A 11 08  	jsl	~~remove_chain
 24176 08:616E: 85 05        	sta	<L999+res_1
 24177                        ;			fp->obj.sclust = 0;
 24178                        	.line	5526
 24179 08:6170: A9 00 00     	lda	#$0
 24180 08:6173: A0 08 00     	ldy	#$8
 24181 08:6176: 97 12        	sta	[<L998+fp_0],Y
 24182 08:6178: A9 00 00     	lda	#$0
 24183 08:617B: A0 0A 00     	ldy	#$a
 24184 08:617E: 97 12        	sta	[<L998+fp_0],Y
 24185                        ;		}
 24186                        	.line	5527
 24187                        ;		else
 24188 08:6180: 82 7A 00     	brl	L10574
 24189                        L10573:
 24190                        ;		{ /* When truncate a part of the file, r
                    emove remaining clusters */
 24191                        	.line	5529
 24192                        ;			ncl = get_fat(&fp->obj, fp->clus
                    t);
 24193                        	.line	5530
 24194 08:6183: A0 18 00     	ldy	#$18
 24195 08:6186: B7 12        	lda	[<L998+fp_0],Y
 24196 08:6188: 48           	pha
 24197 08:6189: A0 16 00     	ldy	#$16
 24198 08:618C: B7 12        	lda	[<L998+fp_0],Y
 24199 08:618E: 48           	pha
 24200 08:618F: D4 14        	pei	<L998+fp_0+2
 24201 08:6191: D4 12        	pei	<L998+fp_0
 24202 08:6193: 22 54 0B 08  	jsl	~~get_fat
 24203 08:6197: 85 0B        	sta	<L999+ncl_1
 24204 08:6199: 86 0D        	stx	<L999+ncl_1+2
 24205                        ;			res = FR_OK;
 24206                        	.line	5531
  Sat Jul 10 2021  1:15                                                Page 459


 24207 08:619B: 64 05        	stz	<L999+res_1
 24208                        ;			if (ncl == 0xFFFFFFFF)
 24209                        	.line	5532
 24210                        ;				res = FR_DISK_ERR;
 24211 08:619D: A5 0B        	lda	<L999+ncl_1
 24212 08:619F: C9 FF FF     	cmp	#<$ffffffff
 24213 08:61A2: D0 05        	bne	L1008
 24214 08:61A4: A5 0D        	lda	<L999+ncl_1+2
 24215 08:61A6: C9 FF FF     	cmp	#^$ffffffff
 24216                        L1008:
 24217 08:61A9: F0 03        	beq	L1009
 24218 08:61AB: 82 05 00     	brl	L10575
 24219                        L1009:
 24220                        	.line	5533
 24221 08:61AE: A9 01 00     	lda	#$1
 24222 08:61B1: 85 05        	sta	<L999+res_1
 24223                        ;			if (ncl == 1)
 24224                        L10575:
 24225                        	.line	5534
 24226                        ;				res = FR_INT_ERR;
 24227 08:61B3: A5 0B        	lda	<L999+ncl_1
 24228 08:61B5: C9 01 00     	cmp	#<$1
 24229 08:61B8: D0 05        	bne	L1010
 24230 08:61BA: A5 0D        	lda	<L999+ncl_1+2
 24231 08:61BC: C9 00 00     	cmp	#^$1
 24232                        L1010:
 24233 08:61BF: F0 03        	beq	L1011
 24234 08:61C1: 82 05 00     	brl	L10576
 24235                        L1011:
 24236                        	.line	5535
 24237 08:61C4: A9 02 00     	lda	#$2
 24238 08:61C7: 85 05        	sta	<L999+res_1
 24239                        ;			if (res == FR_OK && ncl < fs->n_
                    fatent)
 24240                        L10576:
 24241                        	.line	5536
 24242                        ;			{
 24243 08:61C9: A5 05        	lda	<L999+res_1
 24244 08:61CB: F0 03        	beq	L1012
 24245 08:61CD: 82 2D 00     	brl	L10577
 24246                        L1012:
 24247 08:61D0: A5 0B        	lda	<L999+ncl_1
 24248 08:61D2: A0 17 00     	ldy	#$17
 24249 08:61D5: D7 07        	cmp	[<L999+fs_1],Y
 24250 08:61D7: A5 0D        	lda	<L999+ncl_1+2
 24251 08:61D9: A0 19 00     	ldy	#$19
 24252 08:61DC: F7 07        	sbc	[<L999+fs_1],Y
 24253 08:61DE: 90 03        	bcc	L1013
 24254 08:61E0: 82 1A 00     	brl	L10577
 24255                        L1013:
 24256                        	.line	5537
 24257                        ;				res = remove_chain(&fp->
                    obj, ncl, fp->clust);
 24258                        	.line	5538
 24259 08:61E3: A0 18 00     	ldy	#$18
 24260 08:61E6: B7 12        	lda	[<L998+fp_0],Y
 24261 08:61E8: 48           	pha
 24262 08:61E9: A0 16 00     	ldy	#$16
  Sat Jul 10 2021  1:15                                                Page 460


 24263 08:61EC: B7 12        	lda	[<L998+fp_0],Y
 24264 08:61EE: 48           	pha
 24265 08:61EF: D4 0D        	pei	<L999+ncl_1+2
 24266 08:61F1: D4 0B        	pei	<L999+ncl_1
 24267 08:61F3: D4 14        	pei	<L998+fp_0+2
 24268 08:61F5: D4 12        	pei	<L998+fp_0
 24269 08:61F7: 22 0A 11 08  	jsl	~~remove_chain
 24270 08:61FB: 85 05        	sta	<L999+res_1
 24271                        ;			}
 24272                        	.line	5539
 24273                        ;		}
 24274                        L10577:
 24275                        	.line	5540
 24276                        L10574:
 24277                        ;		fp->obj.objsize = fp->fptr; /* Set file 
                    size to current read/write point */
 24278                        	.line	5541
 24279 08:61FD: A0 12 00     	ldy	#$12
 24280 08:6200: B7 12        	lda	[<L998+fp_0],Y
 24281 08:6202: A0 0C 00     	ldy	#$c
 24282 08:6205: 97 12        	sta	[<L998+fp_0],Y
 24283 08:6207: A0 14 00     	ldy	#$14
 24284 08:620A: B7 12        	lda	[<L998+fp_0],Y
 24285 08:620C: A0 0E 00     	ldy	#$e
 24286 08:620F: 97 12        	sta	[<L998+fp_0],Y
 24287                        ;		fp->flag |= FA_MODIFIED;
 24288                        	.line	5542
 24289 08:6211: 18           	clc
 24290 08:6212: A9 10 00     	lda	#$10
 24291 08:6215: 65 12        	adc	<L998+fp_0
 24292 08:6217: 85 01        	sta	<R0
 24293 08:6219: A9 00 00     	lda	#$0
 24294 08:621C: 65 14        	adc	<L998+fp_0+2
 24295 08:621E: 85 03        	sta	<R0+2
 24296 08:6220: E2 20        	sep	#$20
 24297                        	longa	off
 24298 08:6222: A7 01        	lda	[<R0]
 24299 08:6224: 09 40        	ora	#<$40
 24300 08:6226: 87 01        	sta	[<R0]
 24301 08:6228: C2 20        	rep	#$20
 24302                        	longa	on
 24303                        ;#if !FF_FS_TINY
 24304                        ;		if (res == FR_OK && (fp->flag & FA_DIRTY
                    ))
 24305                        	.line	5544
 24306                        ;		{
 24307 08:622A: A5 05        	lda	<L999+res_1
 24308 08:622C: F0 03        	beq	L1014
 24309 08:622E: 82 63 00     	brl	L10578
 24310                        L1014:
 24311 08:6231: E2 20        	sep	#$20
 24312                        	longa	off
 24313 08:6233: A0 10 00     	ldy	#$10
 24314 08:6236: B7 12        	lda	[<L998+fp_0],Y
 24315 08:6238: 29 80        	and	#<$80
 24316 08:623A: C2 20        	rep	#$20
 24317                        	longa	on
 24318 08:623C: D0 03        	bne	L1015
  Sat Jul 10 2021  1:15                                                Page 461


 24319 08:623E: 82 53 00     	brl	L10578
 24320                        L1015:
 24321                        	.line	5545
 24322                        ;			if (disk_write(fs->pdrv, fp->buf
                    , fp->sect, 1) != RES_OK)
 24323                        	.line	5546
 24324                        ;			{
 24325 08:6241: F4 01 00     	pea	#<$1
 24326 08:6244: A0 1C 00     	ldy	#$1c
 24327 08:6247: B7 12        	lda	[<L998+fp_0],Y
 24328 08:6249: 48           	pha
 24329 08:624A: A0 1A 00     	ldy	#$1a
 24330 08:624D: B7 12        	lda	[<L998+fp_0],Y
 24331 08:624F: 48           	pha
 24332 08:6250: 18           	clc
 24333 08:6251: A9 26 00     	lda	#$26
 24334 08:6254: 65 12        	adc	<L998+fp_0
 24335 08:6256: 85 01        	sta	<R0
 24336 08:6258: A9 00 00     	lda	#$0
 24337 08:625B: 65 14        	adc	<L998+fp_0+2
 24338 08:625D: 85 03        	sta	<R0+2
 24339 08:625F: D4 03        	pei	<R0+2
 24340 08:6261: D4 01        	pei	<R0
 24341 08:6263: A0 01 00     	ldy	#$1
 24342 08:6266: B7 07        	lda	[<L999+fs_1],Y
 24343 08:6268: 48           	pha
 24344 08:6269: 22 xx xx xx  	jsl	~~disk_write
 24345 08:626D: AA           	tax
 24346 08:626E: D0 03        	bne	L1016
 24347 08:6270: 82 08 00     	brl	L10579
 24348                        L1016:
 24349                        	.line	5547
 24350                        ;				res = FR_DISK_ERR;
 24351                        	.line	5548
 24352 08:6273: A9 01 00     	lda	#$1
 24353 08:6276: 85 05        	sta	<L999+res_1
 24354                        ;			}
 24355                        	.line	5549
 24356                        ;			else
 24357 08:6278: 82 19 00     	brl	L10580
 24358                        L10579:
 24359                        ;			{
 24360                        	.line	5551
 24361                        ;				fp->flag &= (BYTE) ~FA_D
                    IRTY;
 24362                        	.line	5552
 24363 08:627B: 18           	clc
 24364 08:627C: A9 10 00     	lda	#$10
 24365 08:627F: 65 12        	adc	<L998+fp_0
 24366 08:6281: 85 01        	sta	<R0
 24367 08:6283: A9 00 00     	lda	#$0
 24368 08:6286: 65 14        	adc	<L998+fp_0+2
 24369 08:6288: 85 03        	sta	<R0+2
 24370 08:628A: E2 20        	sep	#$20
 24371                        	longa	off
 24372 08:628C: A7 01        	lda	[<R0]
 24373 08:628E: 29 7F        	and	#<$7f
 24374 08:6290: 87 01        	sta	[<R0]
  Sat Jul 10 2021  1:15                                                Page 462


 24375 08:6292: C2 20        	rep	#$20
 24376                        	longa	on
 24377                        ;			}
 24378                        	.line	5553
 24379                        L10580:
 24380                        ;		}
 24381                        	.line	5554
 24382                        ;#endif
 24383                        ;		if (res != FR_OK)
 24384                        L10578:
 24385                        	.line	5556
 24386                        ;			ABORT(fs, res);
 24387 08:6294: A5 05        	lda	<L999+res_1
 24388 08:6296: D0 03        	bne	L1017
 24389 08:6298: 82 10 00     	brl	L10581
 24390                        L1017:
 24391                        	.line	5557
 24392                        	.line	5557
 24393 08:629B: E2 20        	sep	#$20
 24394                        	longa	off
 24395 08:629D: A5 05        	lda	<L999+res_1
 24396 08:629F: A0 11 00     	ldy	#$11
 24397 08:62A2: 97 12        	sta	[<L998+fp_0],Y
 24398 08:62A4: C2 20        	rep	#$20
 24399                        	longa	on
 24400                        	.line	5557
 24401 08:62A6: A5 05        	lda	<L999+res_1
 24402 08:62A8: 82 59 FE     	brl	L1004
 24403                        	.line	5557
 24404                        L10581:
 24405                        	.line	5557
 24406                        ;	}
 24407                        	.line	5558
 24408                        ;
 24409                        ;	LEAVE_FF(fs, res);
 24410                        L10572:
 24411                        	.line	5560
 24412 08:62AB: A5 05        	lda	<L999+res_1
 24413 08:62AD: 82 54 FE     	brl	L1004
 24414                        ;}
 24415                        	.line	5561
 24416                        	.endblock	5561
 24417             0000000E   L998	equ	14
 24418             00000005   L999	equ	5
 24419 08:62B0:              	ends
 24420                        	efunc
 24421                        	.endfunc	5561,5,14
 24422                        	.line	5561
 24423                        ;
 24424                        ;/*-----------------------------------------------
                    ------------------------*/
 24425                        ;/* Delete a File/Directory                       
                                            */
 24426                        ;/*-----------------------------------------------
                    ------------------------*/
 24427                        ;
 24428                        ;FRESULT f_unlink(const TCHAR* path /* Pointer to 
                    the file or directory path */
  Sat Jul 10 2021  1:15                                                Page 463


 24429                        ;)
 24430                        ;{
 24431                        	.line	5567
 24432                        	.line	5569
 24433                        	FFDOS
 24434                        	xdef	~~f_unlink
 24435                        	func
 24436                        	.function	5569
 24437                        ~~f_unlink:
 24438                        	longa	on
 24439                        	longi	on
 24440 08:62B0: 3B           	tsc
 24441 08:62B1: 38           	sec
 24442 08:62B2: E9 76 00     	sbc	#L1018
 24443 08:62B5: 1B           	tcs
 24444 08:62B6: 0B           	phd
 24445 08:62B7: 5B           	tcd
 24446             00000004   path_0	set	4
 24447                        	.block	5569
 24448                        ;	FRESULT res;
 24449                        ;	DIR dj, sdj;
 24450                        ;	DWORD dclst = 0;
 24451                        ;	FATFS *fs;
 24452                        ;#if FF_FS_EXFAT
 24453                        ;	FFOBJID obj;
 24454                        ;#endif
 24455                        ;	DEF_NAMBUF
 24456                        ;
 24457                        ;	/* Get logical drive */
 24458                        ;	res = mount_volume(&path, &fs, FA_WRITE);
 24459             00000000   res_1	set	0
 24460             00000002   dj_1	set	2
 24461             00000036   sdj_1	set	54
 24462             0000006A   dclst_1	set	106
 24463             0000006E   fs_1	set	110
 24464             00000072   lfn_1	set	114
 24465                        	.sym	res,0,5,1,16
 24466                        	.sym	dj,2,10,1,416,75
 24467                        	.sym	sdj,54,10,1,416,75
 24468                        	.sym	dclst,106,18,1,32
 24469                        	.sym	fs,110,138,1,32,72
 24470                        	.sym	lfn,114,144,1,32
 24471                        	.sym	path,4,142,6,32
 24472 08:62B8: 64 6B        	stz	<L1019+dclst_1
 24473 08:62BA: 64 6D        	stz	<L1019+dclst_1+2
 24474                        	.line	5580
 24475 08:62BC: F4 02 00     	pea	#<$2
 24476 08:62BF: F4 00 00     	pea	#0
 24477 08:62C2: 18           	clc
 24478 08:62C3: 7B           	tdc
 24479 08:62C4: 69 6F 00     	adc	#<L1019+fs_1
 24480 08:62C7: 48           	pha
 24481 08:62C8: F4 00 00     	pea	#0
 24482 08:62CB: 18           	clc
 24483 08:62CC: 7B           	tdc
 24484 08:62CD: 69 7A 00     	adc	#<L1018+path_0
 24485 08:62D0: 48           	pha
 24486 08:62D1: 22 B8 3D 08  	jsl	~~mount_volume
  Sat Jul 10 2021  1:15                                                Page 464


 24487 08:62D5: 85 01        	sta	<L1019+res_1
 24488                        ;	if (res == FR_OK)
 24489                        	.line	5581
 24490                        ;	{
 24491 08:62D7: A5 01        	lda	<L1019+res_1
 24492 08:62D9: F0 03        	beq	L1021
 24493 08:62DB: 82 6E 01     	brl	L10582
 24494                        L1021:
 24495                        	.line	5582
 24496                        ;		dj.obj.fs = fs;
 24497                        	.line	5583
 24498 08:62DE: A5 6F        	lda	<L1019+fs_1
 24499 08:62E0: 85 03        	sta	<L1019+dj_1
 24500 08:62E2: A5 71        	lda	<L1019+fs_1+2
 24501 08:62E4: 85 05        	sta	<L1019+dj_1+2
 24502                        ;		INIT_NAMBUF(fs);
 24503                        	.line	5584
 24504                        	.line	5584
 24505 08:62E6: F4 00 02     	pea	#<$200
 24506 08:62E9: 22 AB 92 08  	jsl	~~ff_memalloc
 24507 08:62ED: 85 73        	sta	<L1019+lfn_1
 24508 08:62EF: 86 75        	stx	<L1019+lfn_1+2
 24509                        	.line	5584
 24510 08:62F1: A5 73        	lda	<L1019+lfn_1
 24511 08:62F3: 05 75        	ora	<L1019+lfn_1+2
 24512 08:62F5: F0 03        	beq	L1022
 24513 08:62F7: 82 15 00     	brl	L10583
 24514                        L1022:
 24515                        	.line	5584
 24516 08:62FA: A9 11 00     	lda	#$11
 24517                        L1023:
 24518 08:62FD: A8           	tay
 24519 08:62FE: A5 78        	lda	<L1018+2
 24520 08:6300: 85 7C        	sta	<L1018+2+4
 24521 08:6302: A5 77        	lda	<L1018+1
 24522 08:6304: 85 7B        	sta	<L1018+1+4
 24523 08:6306: 2B           	pld
 24524 08:6307: 3B           	tsc
 24525 08:6308: 18           	clc
 24526 08:6309: 69 7A 00     	adc	#L1018+4
 24527 08:630C: 1B           	tcs
 24528 08:630D: 98           	tya
 24529 08:630E: 6B           	rtl
 24530                        L10583:
 24531                        	.line	5584
 24532 08:630F: A5 73        	lda	<L1019+lfn_1
 24533 08:6311: A0 0B 00     	ldy	#$b
 24534 08:6314: 97 6F        	sta	[<L1019+fs_1],Y
 24535 08:6316: A5 75        	lda	<L1019+lfn_1+2
 24536 08:6318: A0 0D 00     	ldy	#$d
 24537 08:631B: 97 6F        	sta	[<L1019+fs_1],Y
 24538                        	.line	5584
 24539                        	.line	5584
 24540                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 24541                        	.line	5585
 24542 08:631D: D4 7C        	pei	<L1018+path_0+2
 24543 08:631F: D4 7A        	pei	<L1018+path_0
  Sat Jul 10 2021  1:15                                                Page 465


 24544 08:6321: F4 00 00     	pea	#0
 24545 08:6324: 18           	clc
 24546 08:6325: 7B           	tdc
 24547 08:6326: 69 03 00     	adc	#<L1019+dj_1
 24548 08:6329: 48           	pha
 24549 08:632A: 22 2B 37 08  	jsl	~~follow_path
 24550 08:632E: 85 01        	sta	<L1019+res_1
 24551                        ;		if (FF_FS_RPATH && res == FR_OK && (dj.f
                    n[NSFLAG] & NS_DOT))
 24552                        	.line	5586
 24553                        ;		{
 24554 08:6330: 82 19 00     	brl	L10584
 24555 08:6333: A5 01        	lda	<L1019+res_1
 24556 08:6335: F0 03        	beq	L1024
 24557 08:6337: 82 12 00     	brl	L10584
 24558                        L1024:
 24559 08:633A: E2 20        	sep	#$20
 24560                        	longa	off
 24561 08:633C: A5 2E        	lda	<L1019+dj_1+43
 24562 08:633E: 29 20        	and	#<$20
 24563 08:6340: C2 20        	rep	#$20
 24564                        	longa	on
 24565 08:6342: D0 03        	bne	L1025
 24566 08:6344: 82 05 00     	brl	L10584
 24567                        L1025:
 24568                        	.line	5587
 24569                        ;			res = FR_INVALID_NAME; /* Cannot
                     remove dot entry */
 24570                        	.line	5588
 24571 08:6347: A9 06 00     	lda	#$6
 24572 08:634A: 85 01        	sta	<L1019+res_1
 24573                        ;		}
 24574                        	.line	5589
 24575                        ;#if FF_FS_LOCK != 0
 24576                        ;		if (res == FR_OK) res = chk_lock(&dj, 2)
                    ; /* Check if it is an open object */
 24577                        ;#endif
 24578                        ;		if (res == FR_OK)
 24579                        L10584:
 24580                        	.line	5593
 24581                        ;		{ /* The object is accessible */
 24582 08:634C: A5 01        	lda	<L1019+res_1
 24583 08:634E: F0 03        	beq	L1026
 24584 08:6350: 82 F1 00     	brl	L10585
 24585                        L1026:
 24586                        	.line	5594
 24587                        ;			if (dj.fn[NSFLAG] & NS_NONAME)
 24588                        	.line	5595
 24589                        ;			{
 24590 08:6353: E2 20        	sep	#$20
 24591                        	longa	off
 24592 08:6355: A5 2E        	lda	<L1019+dj_1+43
 24593 08:6357: 29 80        	and	#<$80
 24594 08:6359: C2 20        	rep	#$20
 24595                        	longa	on
 24596 08:635B: D0 03        	bne	L1027
 24597 08:635D: 82 08 00     	brl	L10586
 24598                        L1027:
  Sat Jul 10 2021  1:15                                                Page 466


 24599                        	.line	5596
 24600                        ;				res = FR_INVALID_NAME; /
                    * Cannot remove the origin directory */
 24601                        	.line	5597
 24602 08:6360: A9 06 00     	lda	#$6
 24603 08:6363: 85 01        	sta	<L1019+res_1
 24604                        ;			}
 24605                        	.line	5598
 24606                        ;			else
 24607 08:6365: 82 12 00     	brl	L10587
 24608                        L10586:
 24609                        ;			{
 24610                        	.line	5600
 24611                        ;				if (dj.obj.attr & AM_RDO
                    )
 24612                        	.line	5601
 24613                        ;				{
 24614 08:6368: E2 20        	sep	#$20
 24615                        	longa	off
 24616 08:636A: A5 09        	lda	<L1019+dj_1+6
 24617 08:636C: 29 01        	and	#<$1
 24618 08:636E: C2 20        	rep	#$20
 24619                        	longa	on
 24620 08:6370: D0 03        	bne	L1028
 24621 08:6372: 82 05 00     	brl	L10588
 24622                        L1028:
 24623                        	.line	5602
 24624                        ;					res = FR_DENIED;
                     /* Cannot remove R/O object */
 24625                        	.line	5603
 24626 08:6375: A9 07 00     	lda	#$7
 24627 08:6378: 85 01        	sta	<L1019+res_1
 24628                        ;				}
 24629                        	.line	5604
 24630                        ;			}
 24631                        L10588:
 24632                        	.line	5605
 24633                        L10587:
 24634                        ;			if (res == FR_OK)
 24635                        	.line	5606
 24636                        ;			{
 24637 08:637A: A5 01        	lda	<L1019+res_1
 24638 08:637C: F0 03        	beq	L1029
 24639 08:637E: 82 73 00     	brl	L10589
 24640                        L1029:
 24641                        	.line	5607
 24642                        ;#if FF_FS_EXFAT
 24643                        ;				obj.fs = fs;
 24644                        ;				if (fs->fs_type == FS_EX
                    FAT)
 24645                        ;				{
 24646                        ;					init_alloc_info(
                    fs, &obj);
 24647                        ;					dclst = obj.sclu
                    st;
 24648                        ;				}
 24649                        ;				else
 24650                        ;#endif
  Sat Jul 10 2021  1:15                                                Page 467


 24651                        ;				{
 24652                        	.line	5617
 24653                        ;					dclst = ld_clust
                    (fs, dj.dir);
 24654                        	.line	5618
 24655 08:6381: D4 21        	pei	<L1019+dj_1+30
 24656 08:6383: D4 1F        	pei	<L1019+dj_1+28
 24657 08:6385: D4 71        	pei	<L1019+fs_1+2
 24658 08:6387: D4 6F        	pei	<L1019+fs_1
 24659 08:6389: 22 16 1D 08  	jsl	~~ld_clust
 24660 08:638D: 85 6B        	sta	<L1019+dclst_1
 24661 08:638F: 86 6D        	stx	<L1019+dclst_1+2
 24662                        ;				}
 24663                        	.line	5619
 24664                        ;				if (dj.obj.attr & AM_DIR
                    )
 24665                        	.line	5620
 24666                        ;				{ /* Is it a sub-directo
                    ry? */
 24667 08:6391: E2 20        	sep	#$20
 24668                        	longa	off
 24669 08:6393: A5 09        	lda	<L1019+dj_1+6
 24670 08:6395: 29 10        	and	#<$10
 24671 08:6397: C2 20        	rep	#$20
 24672                        	longa	on
 24673 08:6399: D0 03        	bne	L1030
 24674 08:639B: 82 56 00     	brl	L10590
 24675                        L1030:
 24676                        	.line	5621
 24677                        ;#if FF_FS_RPATH != 0
 24678                        ;					if (dclst == fs-
                    >cdir)
 24679                        ;					{ /* Is it the c
                    urrent directory? */
 24680                        ;						res = FR
                    _DENIED;
 24681                        ;					}
 24682                        ;					else
 24683                        ;#endif
 24684                        ;					{
 24685                        	.line	5629
 24686                        ;						sdj.obj.
                    fs = fs; /* Open the sub-directory */
 24687                        	.line	5630
 24688 08:639E: A5 6F        	lda	<L1019+fs_1
 24689 08:63A0: 85 37        	sta	<L1019+sdj_1
 24690 08:63A2: A5 71        	lda	<L1019+fs_1+2
 24691 08:63A4: 85 39        	sta	<L1019+sdj_1+2
 24692                        ;						sdj.obj.
                    sclust = dclst;
 24693                        	.line	5631
 24694 08:63A6: A5 6B        	lda	<L1019+dclst_1
 24695 08:63A8: 85 3F        	sta	<L1019+sdj_1+8
 24696 08:63AA: A5 6D        	lda	<L1019+dclst_1+2
 24697 08:63AC: 85 41        	sta	<L1019+sdj_1+10
 24698                        ;#if FF_FS_EXFAT
 24699                        ;						if (fs->
                    fs_type == FS_EXFAT)
  Sat Jul 10 2021  1:15                                                Page 468


 24700                        ;						{
 24701                        ;							
                    sdj.obj.objsize = obj.objsize;
 24702                        ;							
                    sdj.obj.stat = obj.stat;
 24703                        ;						}
 24704                        ;#endif
 24705                        ;						res = di
                    r_sdi(&sdj, 0);
 24706                        	.line	5639
 24707 08:63AE: F4 00 00     	pea	#^$0
 24708 08:63B1: F4 00 00     	pea	#<$0
 24709 08:63B4: F4 00 00     	pea	#0
 24710 08:63B7: 18           	clc
 24711 08:63B8: 7B           	tdc
 24712 08:63B9: 69 37 00     	adc	#<L1019+sdj_1
 24713 08:63BC: 48           	pha
 24714 08:63BD: 22 60 17 08  	jsl	~~dir_sdi
 24715 08:63C1: 85 01        	sta	<L1019+res_1
 24716                        ;						if (res 
                    == FR_OK)
 24717                        	.line	5640
 24718                        ;						{
 24719 08:63C3: A5 01        	lda	<L1019+res_1
 24720 08:63C5: F0 03        	beq	L1031
 24721 08:63C7: 82 2A 00     	brl	L10591
 24722                        L1031:
 24723                        	.line	5641
 24724                        ;							
                    res = DIR_READ_FILE(&sdj); /* Test if the directory is empty
                     */
 24725                        	.line	5642
 24726 08:63CA: F4 00 00     	pea	#<$0
 24727 08:63CD: F4 00 00     	pea	#0
 24728 08:63D0: 18           	clc
 24729 08:63D1: 7B           	tdc
 24730 08:63D2: 69 37 00     	adc	#<L1019+sdj_1
 24731 08:63D5: 48           	pha
 24732 08:63D6: 22 9B 23 08  	jsl	~~dir_read
 24733 08:63DA: 85 01        	sta	<L1019+res_1
 24734                        ;							
                    if (res == FR_OK)
 24735                        	.line	5643
 24736                        ;							
                    	res = FR_DENIED; /* Not empty? */
 24737 08:63DC: A5 01        	lda	<L1019+res_1
 24738 08:63DE: F0 03        	beq	L1032
 24739 08:63E0: 82 05 00     	brl	L10592
 24740                        L1032:
 24741                        	.line	5644
 24742 08:63E3: A9 07 00     	lda	#$7
 24743 08:63E6: 85 01        	sta	<L1019+res_1
 24744                        ;							
                    if (res == FR_NO_FILE)
 24745                        L10592:
 24746                        	.line	5645
 24747                        ;							
                    	res = FR_OK; /* Empty? */
  Sat Jul 10 2021  1:15                                                Page 469


 24748 08:63E8: A5 01        	lda	<L1019+res_1
 24749 08:63EA: C9 04 00     	cmp	#<$4
 24750 08:63ED: F0 03        	beq	L1033
 24751 08:63EF: 82 02 00     	brl	L10593
 24752                        L1033:
 24753                        	.line	5646
 24754 08:63F2: 64 01        	stz	<L1019+res_1
 24755                        ;						}
 24756                        L10593:
 24757                        	.line	5647
 24758                        ;					}
 24759                        L10591:
 24760                        	.line	5648
 24761                        ;				}
 24762                        	.line	5649
 24763                        ;			}
 24764                        L10590:
 24765                        	.line	5650
 24766                        ;			if (res == FR_OK)
 24767                        L10589:
 24768                        	.line	5651
 24769                        ;			{
 24770 08:63F4: A5 01        	lda	<L1019+res_1
 24771 08:63F6: F0 03        	beq	L1034
 24772 08:63F8: 82 49 00     	brl	L10594
 24773                        L1034:
 24774                        	.line	5652
 24775                        ;				res = dir_remove(&dj); /
                    * Remove the directory entry */
 24776                        	.line	5653
 24777 08:63FB: F4 00 00     	pea	#0
 24778 08:63FE: 18           	clc
 24779 08:63FF: 7B           	tdc
 24780 08:6400: 69 03 00     	adc	#<L1019+dj_1
 24781 08:6403: 48           	pha
 24782 08:6404: 22 FC 2A 08  	jsl	~~dir_remove
 24783 08:6408: 85 01        	sta	<L1019+res_1
 24784                        ;				if (res == FR_OK && dcls
                    t != 0)
 24785                        	.line	5654
 24786                        ;				{ /* Remove the cluster 
                    chain if exist */
 24787 08:640A: A5 01        	lda	<L1019+res_1
 24788 08:640C: F0 03        	beq	L1035
 24789 08:640E: 82 22 00     	brl	L10595
 24790                        L1035:
 24791 08:6411: A5 6B        	lda	<L1019+dclst_1
 24792 08:6413: 05 6D        	ora	<L1019+dclst_1+2
 24793 08:6415: D0 03        	bne	L1036
 24794 08:6417: 82 19 00     	brl	L10595
 24795                        L1036:
 24796                        	.line	5655
 24797                        ;#if FF_FS_EXFAT
 24798                        ;					res = remove_cha
                    in(&obj, dclst, 0);
 24799                        ;#else
 24800                        ;					res = remove_cha
                    in(&dj.obj, dclst, 0);
  Sat Jul 10 2021  1:15                                                Page 470


 24801                        	.line	5659
 24802 08:641A: F4 00 00     	pea	#^$0
 24803 08:641D: F4 00 00     	pea	#<$0
 24804 08:6420: D4 6D        	pei	<L1019+dclst_1+2
 24805 08:6422: D4 6B        	pei	<L1019+dclst_1
 24806 08:6424: F4 00 00     	pea	#0
 24807 08:6427: 18           	clc
 24808 08:6428: 7B           	tdc
 24809 08:6429: 69 03 00     	adc	#<L1019+dj_1
 24810 08:642C: 48           	pha
 24811 08:642D: 22 0A 11 08  	jsl	~~remove_chain
 24812 08:6431: 85 01        	sta	<L1019+res_1
 24813                        ;#endif
 24814                        ;				}
 24815                        	.line	5661
 24816                        ;				if (res == FR_OK)
 24817                        L10595:
 24818                        	.line	5662
 24819                        ;					res = sync_fs(fs
                    );
 24820 08:6433: A5 01        	lda	<L1019+res_1
 24821 08:6435: F0 03        	beq	L1037
 24822 08:6437: 82 0A 00     	brl	L10596
 24823                        L1037:
 24824                        	.line	5663
 24825 08:643A: D4 71        	pei	<L1019+fs_1+2
 24826 08:643C: D4 6F        	pei	<L1019+fs_1
 24827 08:643E: 22 4C 09 08  	jsl	~~sync_fs
 24828 08:6442: 85 01        	sta	<L1019+res_1
 24829                        ;			}
 24830                        L10596:
 24831                        	.line	5664
 24832                        ;		} FREE_NAMBUF();
 24833                        L10594:
 24834                        	.line	5665
 24835                        L10585:
 24836                        	.line	5665
 24837 08:6444: D4 75        	pei	<L1019+lfn_1+2
 24838 08:6446: D4 73        	pei	<L1019+lfn_1
 24839 08:6448: 22 D3 92 08  	jsl	~~ff_memfree
 24840                        ;	}
 24841                        	.line	5666
 24842                        ;
 24843                        ;	LEAVE_FF(fs, res);
 24844                        L10582:
 24845                        	.line	5668
 24846 08:644C: A5 01        	lda	<L1019+res_1
 24847 08:644E: 82 AC FE     	brl	L1023
 24848                        ;}
 24849                        	.line	5669
 24850                        	.endblock	5669
 24851             00000076   L1018	equ	118
 24852             00000001   L1019	equ	1
 24853 08:6451:              	ends
 24854                        	efunc
 24855                        	.endfunc	5669,1,118
 24856                        	.line	5669
 24857                        ;
  Sat Jul 10 2021  1:15                                                Page 471


 24858                        ;/*-----------------------------------------------
                    ------------------------*/
 24859                        ;/* Create a Directory                            
                                            */
 24860                        ;/*-----------------------------------------------
                    ------------------------*/
 24861                        ;
 24862                        ;FRESULT f_mkdir(const TCHAR* path /* Pointer to t
                    he directory path */
 24863                        ;)
 24864                        ;{
 24865                        	.line	5675
 24866                        	.line	5677
 24867                        	FFDOS
 24868                        	xdef	~~f_mkdir
 24869                        	func
 24870                        	.function	5677
 24871                        ~~f_mkdir:
 24872                        	longa	on
 24873                        	longi	on
 24874 08:6451: 3B           	tsc
 24875 08:6452: 38           	sec
 24876 08:6453: E9 62 00     	sbc	#L1038
 24877 08:6456: 1B           	tcs
 24878 08:6457: 0B           	phd
 24879 08:6458: 5B           	tcd
 24880             00000004   path_0	set	4
 24881                        	.block	5677
 24882                        ;	FRESULT res;
 24883                        ;	DIR dj;
 24884                        ;	FFOBJID sobj;
 24885                        ;	FATFS *fs;
 24886                        ;	DWORD dcl, pcl, tm;
 24887                        ;	DEF_NAMBUF
 24888                        ;
 24889                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 24890             00000000   res_1	set	0
 24891             00000002   dj_1	set	2
 24892             00000036   sobj_1	set	54
 24893             00000046   fs_1	set	70
 24894             0000004A   dcl_1	set	74
 24895             0000004E   pcl_1	set	78
 24896             00000052   tm_1	set	82
 24897             00000056   lfn_1	set	86
 24898                        	.sym	res,0,5,1,16
 24899                        	.sym	dj,2,10,1,416,75
 24900                        	.sym	sobj,54,10,1,128,73
 24901                        	.sym	fs,70,138,1,32,72
 24902                        	.sym	dcl,74,18,1,32
 24903                        	.sym	pcl,78,18,1,32
 24904                        	.sym	tm,82,18,1,32
 24905                        	.sym	lfn,86,144,1,32
 24906                        	.sym	path,4,142,6,32
 24907                        	.line	5685
 24908 08:6459: F4 02 00     	pea	#<$2
 24909 08:645C: F4 00 00     	pea	#0
 24910 08:645F: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 472


 24911 08:6460: 7B           	tdc
 24912 08:6461: 69 4F 00     	adc	#<L1039+fs_1
 24913 08:6464: 48           	pha
 24914 08:6465: F4 00 00     	pea	#0
 24915 08:6468: 18           	clc
 24916 08:6469: 7B           	tdc
 24917 08:646A: 69 66 00     	adc	#<L1038+path_0
 24918 08:646D: 48           	pha
 24919 08:646E: 22 B8 3D 08  	jsl	~~mount_volume
 24920 08:6472: 85 09        	sta	<L1039+res_1
 24921                        ;	if (res == FR_OK)
 24922                        	.line	5686
 24923                        ;	{
 24924 08:6474: A5 09        	lda	<L1039+res_1
 24925 08:6476: F0 03        	beq	L1041
 24926 08:6478: 82 B9 02     	brl	L10597
 24927                        L1041:
 24928                        	.line	5687
 24929                        ;		dj.obj.fs = fs;
 24930                        	.line	5688
 24931 08:647B: A5 4F        	lda	<L1039+fs_1
 24932 08:647D: 85 0B        	sta	<L1039+dj_1
 24933 08:647F: A5 51        	lda	<L1039+fs_1+2
 24934 08:6481: 85 0D        	sta	<L1039+dj_1+2
 24935                        ;		INIT_NAMBUF(fs);
 24936                        	.line	5689
 24937                        	.line	5689
 24938 08:6483: F4 00 02     	pea	#<$200
 24939 08:6486: 22 AB 92 08  	jsl	~~ff_memalloc
 24940 08:648A: 85 5F        	sta	<L1039+lfn_1
 24941 08:648C: 86 61        	stx	<L1039+lfn_1+2
 24942                        	.line	5689
 24943 08:648E: A5 5F        	lda	<L1039+lfn_1
 24944 08:6490: 05 61        	ora	<L1039+lfn_1+2
 24945 08:6492: F0 03        	beq	L1042
 24946 08:6494: 82 15 00     	brl	L10598
 24947                        L1042:
 24948                        	.line	5689
 24949 08:6497: A9 11 00     	lda	#$11
 24950                        L1043:
 24951 08:649A: A8           	tay
 24952 08:649B: A5 64        	lda	<L1038+2
 24953 08:649D: 85 68        	sta	<L1038+2+4
 24954 08:649F: A5 63        	lda	<L1038+1
 24955 08:64A1: 85 67        	sta	<L1038+1+4
 24956 08:64A3: 2B           	pld
 24957 08:64A4: 3B           	tsc
 24958 08:64A5: 18           	clc
 24959 08:64A6: 69 66 00     	adc	#L1038+4
 24960 08:64A9: 1B           	tcs
 24961 08:64AA: 98           	tya
 24962 08:64AB: 6B           	rtl
 24963                        L10598:
 24964                        	.line	5689
 24965 08:64AC: A5 5F        	lda	<L1039+lfn_1
 24966 08:64AE: A0 0B 00     	ldy	#$b
 24967 08:64B1: 97 4F        	sta	[<L1039+fs_1],Y
 24968 08:64B3: A5 61        	lda	<L1039+lfn_1+2
  Sat Jul 10 2021  1:15                                                Page 473


 24969 08:64B5: A0 0D 00     	ldy	#$d
 24970 08:64B8: 97 4F        	sta	[<L1039+fs_1],Y
 24971                        	.line	5689
 24972                        	.line	5689
 24973                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 24974                        	.line	5690
 24975 08:64BA: D4 68        	pei	<L1038+path_0+2
 24976 08:64BC: D4 66        	pei	<L1038+path_0
 24977 08:64BE: F4 00 00     	pea	#0
 24978 08:64C1: 18           	clc
 24979 08:64C2: 7B           	tdc
 24980 08:64C3: 69 0B 00     	adc	#<L1039+dj_1
 24981 08:64C6: 48           	pha
 24982 08:64C7: 22 2B 37 08  	jsl	~~follow_path
 24983 08:64CB: 85 09        	sta	<L1039+res_1
 24984                        ;		if (res == FR_OK)
 24985                        	.line	5691
 24986                        ;			res = FR_EXIST; /* Name collisio
                    n? */
 24987 08:64CD: A5 09        	lda	<L1039+res_1
 24988 08:64CF: F0 03        	beq	L1044
 24989 08:64D1: 82 05 00     	brl	L10599
 24990                        L1044:
 24991                        	.line	5692
 24992 08:64D4: A9 08 00     	lda	#$8
 24993 08:64D7: 85 09        	sta	<L1039+res_1
 24994                        ;		if (FF_FS_RPATH && res == FR_NO_FILE && 
                    (dj.fn[NSFLAG] & NS_DOT))
 24995                        L10599:
 24996                        	.line	5693
 24997                        ;		{ /* Invalid name? */
 24998 08:64D9: 82 1C 00     	brl	L10600
 24999 08:64DC: A5 09        	lda	<L1039+res_1
 25000 08:64DE: C9 04 00     	cmp	#<$4
 25001 08:64E1: F0 03        	beq	L1045
 25002 08:64E3: 82 12 00     	brl	L10600
 25003                        L1045:
 25004 08:64E6: E2 20        	sep	#$20
 25005                        	longa	off
 25006 08:64E8: A5 36        	lda	<L1039+dj_1+43
 25007 08:64EA: 29 20        	and	#<$20
 25008 08:64EC: C2 20        	rep	#$20
 25009                        	longa	on
 25010 08:64EE: D0 03        	bne	L1046
 25011 08:64F0: 82 05 00     	brl	L10600
 25012                        L1046:
 25013                        	.line	5694
 25014                        ;			res = FR_INVALID_NAME;
 25015                        	.line	5695
 25016 08:64F3: A9 06 00     	lda	#$6
 25017 08:64F6: 85 09        	sta	<L1039+res_1
 25018                        ;		}
 25019                        	.line	5696
 25020                        ;		if (res == FR_NO_FILE)
 25021                        L10600:
 25022                        	.line	5697
 25023                        ;		{ /* It is clear to create a new directo
  Sat Jul 10 2021  1:15                                                Page 474


                    ry */
 25024 08:64F8: A5 09        	lda	<L1039+res_1
 25025 08:64FA: C9 04 00     	cmp	#<$4
 25026 08:64FD: F0 03        	beq	L1047
 25027 08:64FF: 82 2A 02     	brl	L10601
 25028                        L1047:
 25029                        	.line	5698
 25030                        ;			sobj.fs = fs; /* New object id t
                    o create a new chain */
 25031                        	.line	5699
 25032 08:6502: A5 4F        	lda	<L1039+fs_1
 25033 08:6504: 85 3F        	sta	<L1039+sobj_1
 25034 08:6506: A5 51        	lda	<L1039+fs_1+2
 25035 08:6508: 85 41        	sta	<L1039+sobj_1+2
 25036                        ;			dcl = create_chain(&sobj, 0); /*
                     Allocate a cluster for the new directory */
 25037                        	.line	5700
 25038 08:650A: F4 00 00     	pea	#^$0
 25039 08:650D: F4 00 00     	pea	#<$0
 25040 08:6510: F4 00 00     	pea	#0
 25041 08:6513: 18           	clc
 25042 08:6514: 7B           	tdc
 25043 08:6515: 69 3F 00     	adc	#<L1039+sobj_1
 25044 08:6518: 48           	pha
 25045 08:6519: 22 93 12 08  	jsl	~~create_chain
 25046 08:651D: 85 53        	sta	<L1039+dcl_1
 25047 08:651F: 86 55        	stx	<L1039+dcl_1+2
 25048                        ;
 25049                        ;			k_debug_long("f_mkdir::create_ch
                    ain:dcl:",dcl);
 25050                        	.line	5702
 25051 08:6521: D4 55        	pei	<L1039+dcl_1+2
 25052 08:6523: D4 53        	pei	<L1039+dcl_1
 25053 08:6525: F4 xx xx     	pea	#^L692
 25054 08:6528: F4 xx xx     	pea	#<L692
 25055 08:652B: 22 xx xx xx  	jsl	~~k_debug_long
 25056                        ;
 25057                        ;			res = FR_OK;
 25058                        	.line	5704
 25059 08:652F: 64 09        	stz	<L1039+res_1
 25060                        ;			if (dcl == 0)
 25061                        	.line	5705
 25062                        ;				res = FR_DENIED; /* No s
                    pace to allocate a new cluster? */
 25063 08:6531: A5 53        	lda	<L1039+dcl_1
 25064 08:6533: 05 55        	ora	<L1039+dcl_1+2
 25065 08:6535: F0 03        	beq	L1048
 25066 08:6537: 82 05 00     	brl	L10602
 25067                        L1048:
 25068                        	.line	5706
 25069 08:653A: A9 07 00     	lda	#$7
 25070 08:653D: 85 09        	sta	<L1039+res_1
 25071                        ;			if (dcl == 1)
 25072                        L10602:
 25073                        	.line	5707
 25074                        ;				res = FR_INT_ERR; /* Any
                     insanity? */
 25075 08:653F: A5 53        	lda	<L1039+dcl_1
  Sat Jul 10 2021  1:15                                                Page 475


 25076 08:6541: C9 01 00     	cmp	#<$1
 25077 08:6544: D0 05        	bne	L1049
 25078 08:6546: A5 55        	lda	<L1039+dcl_1+2
 25079 08:6548: C9 00 00     	cmp	#^$1
 25080                        L1049:
 25081 08:654B: F0 03        	beq	L1050
 25082 08:654D: 82 05 00     	brl	L10603
 25083                        L1050:
 25084                        	.line	5708
 25085 08:6550: A9 02 00     	lda	#$2
 25086 08:6553: 85 09        	sta	<L1039+res_1
 25087                        ;			if (dcl == 0xFFFFFFFF)
 25088                        L10603:
 25089                        	.line	5709
 25090                        ;				res = FR_DISK_ERR; /* Di
                    sk error? */
 25091 08:6555: A5 53        	lda	<L1039+dcl_1
 25092 08:6557: C9 FF FF     	cmp	#<$ffffffff
 25093 08:655A: D0 05        	bne	L1051
 25094 08:655C: A5 55        	lda	<L1039+dcl_1+2
 25095 08:655E: C9 FF FF     	cmp	#^$ffffffff
 25096                        L1051:
 25097 08:6561: F0 03        	beq	L1052
 25098 08:6563: 82 05 00     	brl	L10604
 25099                        L1052:
 25100                        	.line	5710
 25101 08:6566: A9 01 00     	lda	#$1
 25102 08:6569: 85 09        	sta	<L1039+res_1
 25103                        ;
 25104                        ;			tm = GET_FATTIME();
 25105                        L10604:
 25106                        	.line	5712
 25107 08:656B: A9 00 00     	lda	#$0
 25108 08:656E: 85 5B        	sta	<L1039+tm_1
 25109 08:6570: A9 21 52     	lda	#$5221
 25110 08:6573: 85 5D        	sta	<L1039+tm_1+2
 25111                        ;
 25112                        ;			k_debug_long("f_mkdir::create_ch
                    ain:tm:",tm);
 25113                        	.line	5714
 25114 08:6575: D4 5D        	pei	<L1039+tm_1+2
 25115 08:6577: D4 5B        	pei	<L1039+tm_1
 25116 08:6579: F4 xx xx     	pea	#^L692+27
 25117 08:657C: F4 xx xx     	pea	#<L692+27
 25118 08:657F: 22 xx xx xx  	jsl	~~k_debug_long
 25119                        ;			//k_debug_integer("f_mkdir::crea
                    te_chain:res:",res);
 25120                        ;
 25121                        ;			if (res == FR_OK)
 25122                        	.line	5717
 25123                        ;			{
 25124 08:6583: A5 09        	lda	<L1039+res_1
 25125 08:6585: F0 03        	beq	L1053
 25126 08:6587: 82 23 01     	brl	L10605
 25127                        L1053:
 25128                        	.line	5718
 25129                        ;				res = dir_clear(fs, dcl)
                    ; /* Clean up the new table */
  Sat Jul 10 2021  1:15                                                Page 476


 25130                        	.line	5719
 25131 08:658A: D4 55        	pei	<L1039+dcl_1+2
 25132 08:658C: D4 53        	pei	<L1039+dcl_1
 25133 08:658E: D4 51        	pei	<L1039+fs_1+2
 25134 08:6590: D4 4F        	pei	<L1039+fs_1
 25135 08:6592: 22 AE 15 08  	jsl	~~dir_clear
 25136 08:6596: 85 09        	sta	<L1039+res_1
 25137                        ;
 25138                        ;				k_debug_integer("f_mkdir
                    ::dir_clear:",res);
 25139                        	.line	5721
 25140 08:6598: D4 09        	pei	<L1039+res_1
 25141 08:659A: F4 xx xx     	pea	#^L692+53
 25142 08:659D: F4 xx xx     	pea	#<L692+53
 25143 08:65A0: 22 xx xx xx  	jsl	~~k_debug_integer
 25144                        ;
 25145                        ;				if (res == FR_OK)
 25146                        	.line	5723
 25147                        ;				{
 25148 08:65A4: A5 09        	lda	<L1039+res_1
 25149 08:65A6: F0 03        	beq	L1054
 25150 08:65A8: 82 02 01     	brl	L10606
 25151                        L1054:
 25152                        	.line	5724
 25153                        ;					if (!FF_FS_EXFAT
                     || fs->fs_type != FS_EXFAT)
 25154                        	.line	5725
 25155                        ;					{ /* Create dot 
                    entries (FAT only) */
 25156 08:65AB: 82 0D 00     	brl	L1055
 25157 08:65AE: E2 20        	sep	#$20
 25158                        	longa	off
 25159 08:65B0: A7 4F        	lda	[<L1039+fs_1]
 25160 08:65B2: C9 04        	cmp	#<$4
 25161 08:65B4: C2 20        	rep	#$20
 25162                        	longa	on
 25163 08:65B6: D0 03        	bne	L1056
 25164 08:65B8: 82 D7 00     	brl	L10607
 25165                        L1056:
 25166                        L1055:
 25167                        	.line	5726
 25168                        ;						mem_set(
                    fs->win + DIR_Name, ' ', 11); /* Create "." entry */
 25169                        	.line	5727
 25170 08:65BB: F4 0B 00     	pea	#<$b
 25171 08:65BE: F4 20 00     	pea	#<$20
 25172 08:65C1: 18           	clc
 25173 08:65C2: A9 33 00     	lda	#$33
 25174 08:65C5: 65 4F        	adc	<L1039+fs_1
 25175 08:65C7: 85 01        	sta	<R0
 25176 08:65C9: A9 00 00     	lda	#$0
 25177 08:65CC: 65 51        	adc	<L1039+fs_1+2
 25178 08:65CE: 85 03        	sta	<R0+2
 25179 08:65D0: D4 03        	pei	<R0+2
 25180 08:65D2: D4 01        	pei	<R0
 25181 08:65D4: 22 DF 01 08  	jsl	~~mem_set
 25182                        ;						fs->win[
                    DIR_Name] = '.';
  Sat Jul 10 2021  1:15                                                Page 477


 25183                        	.line	5728
 25184 08:65D8: E2 20        	sep	#$20
 25185                        	longa	off
 25186 08:65DA: A9 2E        	lda	#$2e
 25187 08:65DC: A0 33 00     	ldy	#$33
 25188 08:65DF: 97 4F        	sta	[<L1039+fs_1],Y
 25189 08:65E1: C2 20        	rep	#$20
 25190                        	longa	on
 25191                        ;						fs->win[
                    DIR_Attr] = AM_DIR;
 25192                        	.line	5729
 25193 08:65E3: E2 20        	sep	#$20
 25194                        	longa	off
 25195 08:65E5: A9 10        	lda	#$10
 25196 08:65E7: A0 3E 00     	ldy	#$3e
 25197 08:65EA: 97 4F        	sta	[<L1039+fs_1],Y
 25198 08:65EC: C2 20        	rep	#$20
 25199                        	longa	on
 25200                        ;						st_dword
                    (fs->win + DIR_ModTime, tm);
 25201                        	.line	5730
 25202 08:65EE: D4 5D        	pei	<L1039+tm_1+2
 25203 08:65F0: D4 5B        	pei	<L1039+tm_1
 25204 08:65F2: 18           	clc
 25205 08:65F3: A9 49 00     	lda	#$49
 25206 08:65F6: 65 4F        	adc	<L1039+fs_1
 25207 08:65F8: 85 01        	sta	<R0
 25208 08:65FA: A9 00 00     	lda	#$0
 25209 08:65FD: 65 51        	adc	<L1039+fs_1+2
 25210 08:65FF: 85 03        	sta	<R0+2
 25211 08:6601: D4 03        	pei	<R0+2
 25212 08:6603: D4 01        	pei	<R0
 25213 08:6605: 22 16 01 08  	jsl	~~st_dword
 25214                        ;						st_clust
                    (fs, fs->win, dcl);
 25215                        	.line	5731
 25216 08:6609: D4 55        	pei	<L1039+dcl_1+2
 25217 08:660B: D4 53        	pei	<L1039+dcl_1
 25218 08:660D: 18           	clc
 25219 08:660E: A9 33 00     	lda	#$33
 25220 08:6611: 65 4F        	adc	<L1039+fs_1
 25221 08:6613: 85 01        	sta	<R0
 25222 08:6615: A9 00 00     	lda	#$0
 25223 08:6618: 65 51        	adc	<L1039+fs_1+2
 25224 08:661A: 85 03        	sta	<R0+2
 25225 08:661C: D4 03        	pei	<R0+2
 25226 08:661E: D4 01        	pei	<R0
 25227 08:6620: D4 51        	pei	<L1039+fs_1+2
 25228 08:6622: D4 4F        	pei	<L1039+fs_1
 25229 08:6624: 22 A6 1D 08  	jsl	~~st_clust
 25230                        ;						mem_cpy(
                    fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 25231                        	.line	5732
 25232 08:6628: F4 20 00     	pea	#<$20
 25233 08:662B: 18           	clc
 25234 08:662C: A9 33 00     	lda	#$33
 25235 08:662F: 65 4F        	adc	<L1039+fs_1
 25236 08:6631: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 478


 25237 08:6633: A9 00 00     	lda	#$0
 25238 08:6636: 65 51        	adc	<L1039+fs_1+2
 25239 08:6638: 85 03        	sta	<R0+2
 25240 08:663A: D4 03        	pei	<R0+2
 25241 08:663C: D4 01        	pei	<R0
 25242 08:663E: 18           	clc
 25243 08:663F: A9 53 00     	lda	#$53
 25244 08:6642: 65 4F        	adc	<L1039+fs_1
 25245 08:6644: 85 05        	sta	<R1
 25246 08:6646: A9 00 00     	lda	#$0
 25247 08:6649: 65 51        	adc	<L1039+fs_1+2
 25248 08:664B: 85 07        	sta	<R1+2
 25249 08:664D: D4 07        	pei	<R1+2
 25250 08:664F: D4 05        	pei	<R1
 25251 08:6651: 22 93 01 08  	jsl	~~mem_cpy
 25252                        ;						fs->win[
                    SZDIRE + 1] = '.';
 25253                        	.line	5733
 25254 08:6655: E2 20        	sep	#$20
 25255                        	longa	off
 25256 08:6657: A9 2E        	lda	#$2e
 25257 08:6659: A0 54 00     	ldy	#$54
 25258 08:665C: 97 4F        	sta	[<L1039+fs_1],Y
 25259 08:665E: C2 20        	rep	#$20
 25260                        	longa	on
 25261                        ;						pcl = dj
                    .obj.sclust;
 25262                        	.line	5734
 25263 08:6660: A5 13        	lda	<L1039+dj_1+8
 25264 08:6662: 85 57        	sta	<L1039+pcl_1
 25265 08:6664: A5 15        	lda	<L1039+dj_1+10
 25266 08:6666: 85 59        	sta	<L1039+pcl_1+2
 25267                        ;						st_clust
                    (fs, fs->win + SZDIRE, pcl);
 25268                        	.line	5735
 25269 08:6668: D4 59        	pei	<L1039+pcl_1+2
 25270 08:666A: D4 57        	pei	<L1039+pcl_1
 25271 08:666C: 18           	clc
 25272 08:666D: A9 53 00     	lda	#$53
 25273 08:6670: 65 4F        	adc	<L1039+fs_1
 25274 08:6672: 85 01        	sta	<R0
 25275 08:6674: A9 00 00     	lda	#$0
 25276 08:6677: 65 51        	adc	<L1039+fs_1+2
 25277 08:6679: 85 03        	sta	<R0+2
 25278 08:667B: D4 03        	pei	<R0+2
 25279 08:667D: D4 01        	pei	<R0
 25280 08:667F: D4 51        	pei	<L1039+fs_1+2
 25281 08:6681: D4 4F        	pei	<L1039+fs_1
 25282 08:6683: 22 A6 1D 08  	jsl	~~st_clust
 25283                        ;						fs->wfla
                    g = 1;
 25284                        	.line	5736
 25285 08:6687: E2 20        	sep	#$20
 25286                        	longa	off
 25287 08:6689: A9 01        	lda	#$1
 25288 08:668B: A0 03 00     	ldy	#$3
 25289 08:668E: 97 4F        	sta	[<L1039+fs_1],Y
 25290 08:6690: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 479


 25291                        	longa	on
 25292                        ;					}
 25293                        	.line	5737
 25294                        ;					res = dir_regist
                    er(&dj); /* Register the object to the parent directoy */
 25295                        L10607:
 25296                        	.line	5738
 25297 08:6692: F4 00 00     	pea	#0
 25298 08:6695: 18           	clc
 25299 08:6696: 7B           	tdc
 25300 08:6697: 69 0B 00     	adc	#<L1039+dj_1
 25301 08:669A: 48           	pha
 25302 08:669B: 22 48 28 08  	jsl	~~dir_register
 25303 08:669F: 85 09        	sta	<L1039+res_1
 25304                        ;					k_debug_integer(
                    "f_mkdir::dir_register:",res);
 25305                        	.line	5739
 25306 08:66A1: D4 09        	pei	<L1039+res_1
 25307 08:66A3: F4 xx xx     	pea	#^L692+73
 25308 08:66A6: F4 xx xx     	pea	#<L692+73
 25309 08:66A9: 22 xx xx xx  	jsl	~~k_debug_integer
 25310                        ;				}
 25311                        	.line	5740
 25312                        ;			}
 25313                        L10606:
 25314                        	.line	5741
 25315                        ;			if (res == FR_OK)
 25316                        L10605:
 25317                        	.line	5742
 25318                        ;			{
 25319 08:66AD: A5 09        	lda	<L1039+res_1
 25320 08:66AF: F0 03        	beq	L1057
 25321 08:66B1: 82 61 00     	brl	L10608
 25322                        L1057:
 25323                        	.line	5743
 25324                        ;#if FF_FS_EXFAT
 25325                        ;				if (fs->fs_type == FS_EX
                    FAT)
 25326                        ;				{ /* Initialize director
                    y entry block */
 25327                        ;					st_dword(fs->dir
                    buf + XDIR_ModTime, tm); /* Created time */
 25328                        ;					st_dword(fs->dir
                    buf + XDIR_FstClus, dcl); /* Table start cluster */
 25329                        ;					st_dword(fs->dir
                    buf + XDIR_FileSize, (DWORD)fs->csize * SS(fs)); /* Director
                    y size needs to be valid */
 25330                        ;					st_dword(fs->dir
                    buf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
 25331                        ;					fs->dirbuf[XDIR_
                    GenFlags] = 3; /* Initialize the object flag */
 25332                        ;					fs->dirbuf[XDIR_
                    Attr] = AM_DIR; /* Attribute */
 25333                        ;					res = store_xdir
                    (&dj);
 25334                        ;				}
 25335                        ;				else
 25336                        ;#endif
  Sat Jul 10 2021  1:15                                                Page 480


 25337                        ;				{
 25338                        	.line	5757
 25339                        ;					st_dword(dj.dir 
                    + DIR_ModTime, tm); /* Created time */
 25340                        	.line	5758
 25341 08:66B4: D4 5D        	pei	<L1039+tm_1+2
 25342 08:66B6: D4 5B        	pei	<L1039+tm_1
 25343 08:66B8: 18           	clc
 25344 08:66B9: A9 16 00     	lda	#$16
 25345 08:66BC: 65 27        	adc	<L1039+dj_1+28
 25346 08:66BE: 85 01        	sta	<R0
 25347 08:66C0: A9 00 00     	lda	#$0
 25348 08:66C3: 65 29        	adc	<L1039+dj_1+30
 25349 08:66C5: 85 03        	sta	<R0+2
 25350 08:66C7: D4 03        	pei	<R0+2
 25351 08:66C9: D4 01        	pei	<R0
 25352 08:66CB: 22 16 01 08  	jsl	~~st_dword
 25353                        ;					st_clust(fs, dj.
                    dir, dcl); /* Table start cluster */
 25354                        	.line	5759
 25355 08:66CF: D4 55        	pei	<L1039+dcl_1+2
 25356 08:66D1: D4 53        	pei	<L1039+dcl_1
 25357 08:66D3: D4 29        	pei	<L1039+dj_1+30
 25358 08:66D5: D4 27        	pei	<L1039+dj_1+28
 25359 08:66D7: D4 51        	pei	<L1039+fs_1+2
 25360 08:66D9: D4 4F        	pei	<L1039+fs_1
 25361 08:66DB: 22 A6 1D 08  	jsl	~~st_clust
 25362                        ;					dj.dir[DIR_Attr]
                     = AM_DIR; /* Attribute */
 25363                        	.line	5760
 25364 08:66DF: E2 20        	sep	#$20
 25365                        	longa	off
 25366 08:66E1: A9 10        	lda	#$10
 25367 08:66E3: A0 0B 00     	ldy	#$b
 25368 08:66E6: 97 27        	sta	[<L1039+dj_1+28],Y
 25369 08:66E8: C2 20        	rep	#$20
 25370                        	longa	on
 25371                        ;					fs->wflag = 1;
 25372                        	.line	5761
 25373 08:66EA: E2 20        	sep	#$20
 25374                        	longa	off
 25375 08:66EC: A9 01        	lda	#$1
 25376 08:66EE: A0 03 00     	ldy	#$3
 25377 08:66F1: 97 4F        	sta	[<L1039+fs_1],Y
 25378 08:66F3: C2 20        	rep	#$20
 25379                        	longa	on
 25380                        ;				}
 25381                        	.line	5762
 25382                        ;				if (res == FR_OK)
 25383                        	.line	5763
 25384                        ;				{
 25385 08:66F5: A5 09        	lda	<L1039+res_1
 25386 08:66F7: F0 03        	beq	L1058
 25387 08:66F9: 82 0A 00     	brl	L10609
 25388                        L1058:
 25389                        	.line	5764
 25390                        ;					res = sync_fs(fs
                    );
  Sat Jul 10 2021  1:15                                                Page 481


 25391                        	.line	5765
 25392 08:66FC: D4 51        	pei	<L1039+fs_1+2
 25393 08:66FE: D4 4F        	pei	<L1039+fs_1
 25394 08:6700: 22 4C 09 08  	jsl	~~sync_fs
 25395 08:6704: 85 09        	sta	<L1039+res_1
 25396                        ;				}
 25397                        	.line	5766
 25398                        ;
 25399                        ;				k_debug_integer("f_mkdir
                    ::sync_fs:",res);
 25400                        L10609:
 25401                        	.line	5768
 25402 08:6706: D4 09        	pei	<L1039+res_1
 25403 08:6708: F4 xx xx     	pea	#^L692+96
 25404 08:670B: F4 xx xx     	pea	#<L692+96
 25405 08:670E: 22 xx xx xx  	jsl	~~k_debug_integer
 25406                        ;			}
 25407                        	.line	5769
 25408                        ;			else
 25409 08:6712: 82 17 00     	brl	L10610
 25410                        L10608:
 25411                        ;			{
 25412                        	.line	5771
 25413                        ;				remove_chain(&sobj, dcl,
                     0); /* Could not register, remove the allocated cluster */
 25414                        	.line	5772
 25415 08:6715: F4 00 00     	pea	#^$0
 25416 08:6718: F4 00 00     	pea	#<$0
 25417 08:671B: D4 55        	pei	<L1039+dcl_1+2
 25418 08:671D: D4 53        	pei	<L1039+dcl_1
 25419 08:671F: F4 00 00     	pea	#0
 25420 08:6722: 18           	clc
 25421 08:6723: 7B           	tdc
 25422 08:6724: 69 3F 00     	adc	#<L1039+sobj_1
 25423 08:6727: 48           	pha
 25424 08:6728: 22 0A 11 08  	jsl	~~remove_chain
 25425                        ;			}
 25426                        	.line	5773
 25427                        L10610:
 25428                        ;		} FREE_NAMBUF();
 25429                        	.line	5774
 25430                        L10601:
 25431                        	.line	5774
 25432 08:672C: D4 61        	pei	<L1039+lfn_1+2
 25433 08:672E: D4 5F        	pei	<L1039+lfn_1
 25434 08:6730: 22 D3 92 08  	jsl	~~ff_memfree
 25435                        ;	}
 25436                        	.line	5775
 25437                        ;
 25438                        ;	LEAVE_FF(fs, res);
 25439                        L10597:
 25440                        	.line	5777
 25441 08:6734: A5 09        	lda	<L1039+res_1
 25442 08:6736: 82 61 FD     	brl	L1043
 25443                        ;}
 25444                        	.line	5778
 25445                        	.endblock	5778
 25446             00000062   L1038	equ	98
  Sat Jul 10 2021  1:15                                                Page 482


 25447             00000009   L1039	equ	9
 25448 08:6739:              	ends
 25449                        	efunc
 25450                        	.endfunc	5778,9,98
 25451                        	.line	5778
 25452                        	data
 25453                        L692:
 25454 00:0133: 66 5F 6D 6B  	db	$66,$5F,$6D,$6B,$64,$69,$72,$3A,$3A,$63,
                    $72,$65,$61,$74,$65
       00:0137: 64 69 72 3A 
       00:013B: 3A 63 72 65 
       00:013F: 61 74 65 
 25455 00:0142: 5F 63 68 61  	db	$5F,$63,$68,$61,$69,$6E,$3A,$64,$63,$6C,
                    $3A,$00,$66,$5F,$6D
       00:0146: 69 6E 3A 64 
       00:014A: 63 6C 3A 00 
       00:014E: 66 5F 6D 
 25456 00:0151: 6B 64 69 72  	db	$6B,$64,$69,$72,$3A,$3A,$63,$72,$65,$61,
                    $74,$65,$5F,$63,$68
       00:0155: 3A 3A 63 72 
       00:0159: 65 61 74 65 
       00:015D: 5F 63 68 
 25457 00:0160: 61 69 6E 3A  	db	$61,$69,$6E,$3A,$74,$6D,$3A,$00,$66,$5F,
                    $6D,$6B,$64,$69,$72
       00:0164: 74 6D 3A 00 
       00:0168: 66 5F 6D 6B 
       00:016C: 64 69 72 
 25458 00:016F: 3A 3A 64 69  	db	$3A,$3A,$64,$69,$72,$5F,$63,$6C,$65,$61,
                    $72,$3A,$00,$66,$5F
       00:0173: 72 5F 63 6C 
       00:0177: 65 61 72 3A 
       00:017B: 00 66 5F 
 25459 00:017E: 6D 6B 64 69  	db	$6D,$6B,$64,$69,$72,$3A,$3A,$64,$69,$72,
                    $5F,$72,$65,$67,$69
       00:0182: 72 3A 3A 64 
       00:0186: 69 72 5F 72 
       00:018A: 65 67 69 
 25460 00:018D: 73 74 65 72  	db	$73,$74,$65,$72,$3A,$00,$66,$5F,$6D,$6B,
                    $64,$69,$72,$3A,$3A
       00:0191: 3A 00 66 5F 
       00:0195: 6D 6B 64 69 
       00:0199: 72 3A 3A 
 25461 00:019C: 73 79 6E 63  	db	$73,$79,$6E,$63,$5F,$66,$73,$3A,$00
       00:01A0: 5F 66 73 3A 
       00:01A4: 00 
 25462 00:01A5:              	ends
 25463                        ;
 25464                        ;/*-----------------------------------------------
                    ------------------------*/
 25465                        ;/* Rename a File/Directory                       
                                            */
 25466                        ;/*-----------------------------------------------
                    ------------------------*/
 25467                        ;
 25468                        ;FRESULT f_rename(const TCHAR* path_old, /* Pointe
                    r to the object name to be renamed */
 25469                        ;const TCHAR* path_new /* Pointer to the new name 
                    */
  Sat Jul 10 2021  1:15                                                Page 483


 25470                        ;)
 25471                        ;{
 25472                        	.line	5784
 25473                        	.line	5787
 25474                        	FFDOS
 25475                        	xdef	~~f_rename
 25476                        	func
 25477                        	.function	5787
 25478                        ~~f_rename:
 25479                        	longa	on
 25480                        	longi	on
 25481 08:6739: 3B           	tsc
 25482 08:673A: 38           	sec
 25483 08:673B: E9 9E 00     	sbc	#L1060
 25484 08:673E: 1B           	tcs
 25485 08:673F: 0B           	phd
 25486 08:6740: 5B           	tcd
 25487             00000004   path_old_0	set	4
 25488             00000008   path_new_0	set	8
 25489                        	.block	5787
 25490                        ;	FRESULT res;
 25491                        ;	DIR djo, djn;
 25492                        ;	FATFS *fs;
 25493                        ;	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *di
                    r;
 25494                        ;	LBA_t sect;
 25495                        ;	DEF_NAMBUF
 25496                        ;
 25497                        ;	get_ldnumber(&path_new); /* Snip the drive numbe
                    r of new name off */
 25498             00000000   res_1	set	0
 25499             00000002   djo_1	set	2
 25500             00000036   djn_1	set	54
 25501             0000006A   fs_1	set	106
 25502             0000006E   buf_1	set	110
 25503             0000008E   dir_1	set	142
 25504             00000092   sect_1	set	146
 25505             00000096   lfn_1	set	150
 25506                        	.sym	res,0,5,1,16
 25507                        	.sym	djo,2,10,1,416,75
 25508                        	.sym	djn,54,10,1,416,75
 25509                        	.sym	fs,106,138,1,32,72
 25510                        	.sym	buf,110,110,1,0,32
 25511                        	.sym	dir,142,142,1,32
 25512                        	.sym	sect,146,18,1,32
 25513                        	.sym	lfn,150,144,1,32
 25514                        	.sym	path_old,4,142,6,32
 25515                        	.sym	path_new,8,142,6,32
 25516                        	.line	5795
 25517 08:6741: F4 00 00     	pea	#0
 25518 08:6744: 18           	clc
 25519 08:6745: 7B           	tdc
 25520 08:6746: 69 A6 00     	adc	#<L1060+path_new_0
 25521 08:6749: 48           	pha
 25522 08:674A: 22 A0 38 08  	jsl	~~get_ldnumber
 25523                        ;	res = mount_volume(&path_old, &fs, FA_WRITE); /*
                     Get logical drive of the old object */
 25524                        	.line	5796
  Sat Jul 10 2021  1:15                                                Page 484


 25525 08:674E: F4 02 00     	pea	#<$2
 25526 08:6751: F4 00 00     	pea	#0
 25527 08:6754: 18           	clc
 25528 08:6755: 7B           	tdc
 25529 08:6756: 69 6F 00     	adc	#<L1061+fs_1
 25530 08:6759: 48           	pha
 25531 08:675A: F4 00 00     	pea	#0
 25532 08:675D: 18           	clc
 25533 08:675E: 7B           	tdc
 25534 08:675F: 69 A2 00     	adc	#<L1060+path_old_0
 25535 08:6762: 48           	pha
 25536 08:6763: 22 B8 3D 08  	jsl	~~mount_volume
 25537 08:6767: 85 05        	sta	<L1061+res_1
 25538                        ;	if (res == FR_OK)
 25539                        	.line	5797
 25540                        ;	{
 25541 08:6769: A5 05        	lda	<L1061+res_1
 25542 08:676B: F0 03        	beq	L1063
 25543 08:676D: 82 37 02     	brl	L10611
 25544                        L1063:
 25545                        	.line	5798
 25546                        ;		djo.obj.fs = fs;
 25547                        	.line	5799
 25548 08:6770: A5 6F        	lda	<L1061+fs_1
 25549 08:6772: 85 07        	sta	<L1061+djo_1
 25550 08:6774: A5 71        	lda	<L1061+fs_1+2
 25551 08:6776: 85 09        	sta	<L1061+djo_1+2
 25552                        ;		INIT_NAMBUF(fs);
 25553                        	.line	5800
 25554                        	.line	5800
 25555 08:6778: F4 00 02     	pea	#<$200
 25556 08:677B: 22 AB 92 08  	jsl	~~ff_memalloc
 25557 08:677F: 85 9B        	sta	<L1061+lfn_1
 25558 08:6781: 86 9D        	stx	<L1061+lfn_1+2
 25559                        	.line	5800
 25560 08:6783: A5 9B        	lda	<L1061+lfn_1
 25561 08:6785: 05 9D        	ora	<L1061+lfn_1+2
 25562 08:6787: F0 03        	beq	L1064
 25563 08:6789: 82 15 00     	brl	L10612
 25564                        L1064:
 25565                        	.line	5800
 25566 08:678C: A9 11 00     	lda	#$11
 25567                        L1065:
 25568 08:678F: A8           	tay
 25569 08:6790: A5 A0        	lda	<L1060+2
 25570 08:6792: 85 A8        	sta	<L1060+2+8
 25571 08:6794: A5 9F        	lda	<L1060+1
 25572 08:6796: 85 A7        	sta	<L1060+1+8
 25573 08:6798: 2B           	pld
 25574 08:6799: 3B           	tsc
 25575 08:679A: 18           	clc
 25576 08:679B: 69 A6 00     	adc	#L1060+8
 25577 08:679E: 1B           	tcs
 25578 08:679F: 98           	tya
 25579 08:67A0: 6B           	rtl
 25580                        L10612:
 25581                        	.line	5800
 25582 08:67A1: A5 9B        	lda	<L1061+lfn_1
  Sat Jul 10 2021  1:15                                                Page 485


 25583 08:67A3: A0 0B 00     	ldy	#$b
 25584 08:67A6: 97 6F        	sta	[<L1061+fs_1],Y
 25585 08:67A8: A5 9D        	lda	<L1061+lfn_1+2
 25586 08:67AA: A0 0D 00     	ldy	#$d
 25587 08:67AD: 97 6F        	sta	[<L1061+fs_1],Y
 25588                        	.line	5800
 25589                        	.line	5800
 25590                        ;		res = follow_path(&djo, path_old); /* Ch
                    eck old object */
 25591                        	.line	5801
 25592 08:67AF: D4 A4        	pei	<L1060+path_old_0+2
 25593 08:67B1: D4 A2        	pei	<L1060+path_old_0
 25594 08:67B3: F4 00 00     	pea	#0
 25595 08:67B6: 18           	clc
 25596 08:67B7: 7B           	tdc
 25597 08:67B8: 69 07 00     	adc	#<L1061+djo_1
 25598 08:67BB: 48           	pha
 25599 08:67BC: 22 2B 37 08  	jsl	~~follow_path
 25600 08:67C0: 85 05        	sta	<L1061+res_1
 25601                        ;		if (res == FR_OK && (djo.fn[NSFLAG] & (N
                    S_DOT | NS_NONAME)))
 25602                        	.line	5802
 25603                        ;			res = FR_INVALID_NAME; /* Check 
                    validity of name */
 25604 08:67C2: A5 05        	lda	<L1061+res_1
 25605 08:67C4: F0 03        	beq	L1066
 25606 08:67C6: 82 12 00     	brl	L10613
 25607                        L1066:
 25608 08:67C9: E2 20        	sep	#$20
 25609                        	longa	off
 25610 08:67CB: A5 32        	lda	<L1061+djo_1+43
 25611 08:67CD: 29 A0        	and	#<$a0
 25612 08:67CF: C2 20        	rep	#$20
 25613                        	longa	on
 25614 08:67D1: D0 03        	bne	L1067
 25615 08:67D3: 82 05 00     	brl	L10613
 25616                        L1067:
 25617                        	.line	5803
 25618 08:67D6: A9 06 00     	lda	#$6
 25619 08:67D9: 85 05        	sta	<L1061+res_1
 25620                        ;#if FF_FS_LOCK != 0
 25621                        ;		if (res == FR_OK)
 25622                        ;		{
 25623                        ;			res = chk_lock(&djo, 2);
 25624                        ;		}
 25625                        ;#endif
 25626                        ;		if (res == FR_OK)
 25627                        L10613:
 25628                        	.line	5810
 25629                        ;		{ /* Object to be renamed is found */
 25630 08:67DB: A5 05        	lda	<L1061+res_1
 25631 08:67DD: F0 03        	beq	L1068
 25632 08:67DF: 82 BD 01     	brl	L10614
 25633                        L1068:
 25634                        	.line	5811
 25635                        ;#if FF_FS_EXFAT
 25636                        ;			if (fs->fs_type == FS_EXFAT)
 25637                        ;			{ /* At exFAT volume */
  Sat Jul 10 2021  1:15                                                Page 486


 25638                        ;				BYTE nf, nn;
 25639                        ;				WORD nh;
 25640                        ;
 25641                        ;				mem_cpy(buf, fs->dirbuf,
                     SZDIRE * 2); /* Save 85+C0 entry of old object */
 25642                        ;				mem_cpy(&djn, &djo, size
                    of djo);
 25643                        ;				res = follow_path(&djn, 
                    path_new); /* Make sure if new object name is not in use */
 25644                        ;				if (res == FR_OK)
 25645                        ;				{ /* Is new name already
                     in use by any other object? */
 25646                        ;					res = (djn.obj.s
                    clust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FIL
                    E : FR_EXIST;
 25647                        ;				}
 25648                        ;				if (res == FR_NO_FILE)
 25649                        ;				{ /* It is a valid path 
                    and no name collision */
 25650                        ;					res = dir_regist
                    er(&djn); /* Register the new entry */
 25651                        ;					if (res == FR_OK
                    )
 25652                        ;					{
 25653                        ;						nf = fs-
                    >dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
 25654                        ;						nh = ld_
                    word(fs->dirbuf + XDIR_NameHash);
 25655                        ;						mem_cpy(
                    fs->dirbuf, buf, SZDIRE * 2); /* Restore 85+C0 entry */
 25656                        ;						fs->dirb
                    uf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
 25657                        ;						st_word(
                    fs->dirbuf + XDIR_NameHash, nh);
 25658                        ;						if (!(fs
                    ->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_A
                    RC; /* Set archive attribute if it is a file */
 25659                        ;						/* Start
                     of critical section where an interruption can cause a cross
                    -link */
 25660                        ;						res = st
                    ore_xdir(&djn);
 25661                        ;					}
 25662                        ;				}
 25663                        ;			}
 25664                        ;			else
 25665                        ;#endif
 25666                        ;			{ /* At FAT/FAT32 volume */
 25667                        	.line	5843
 25668                        ;				mem_cpy(buf, djo.dir, SZ
                    DIRE); /* Save directory entry of the object */
 25669                        	.line	5844
 25670 08:67E2: F4 20 00     	pea	#<$20
 25671 08:67E5: D4 25        	pei	<L1061+djo_1+30
 25672 08:67E7: D4 23        	pei	<L1061+djo_1+28
 25673 08:67E9: F4 00 00     	pea	#0
 25674 08:67EC: 18           	clc
 25675 08:67ED: 7B           	tdc
  Sat Jul 10 2021  1:15                                                Page 487


 25676 08:67EE: 69 73 00     	adc	#<L1061+buf_1
 25677 08:67F1: 48           	pha
 25678 08:67F2: 22 93 01 08  	jsl	~~mem_cpy
 25679                        ;				mem_cpy(&djn, &djo, size
                    of(DIR)); /* Duplicate the directory object */
 25680                        	.line	5845
 25681 08:67F6: F4 34 00     	pea	#<$34
 25682 08:67F9: F4 00 00     	pea	#0
 25683 08:67FC: 18           	clc
 25684 08:67FD: 7B           	tdc
 25685 08:67FE: 69 07 00     	adc	#<L1061+djo_1
 25686 08:6801: 48           	pha
 25687 08:6802: F4 00 00     	pea	#0
 25688 08:6805: 18           	clc
 25689 08:6806: 7B           	tdc
 25690 08:6807: 69 3B 00     	adc	#<L1061+djn_1
 25691 08:680A: 48           	pha
 25692 08:680B: 22 93 01 08  	jsl	~~mem_cpy
 25693                        ;				res = follow_path(&djn, 
                    path_new); /* Make sure if new object name is not in use */
 25694                        	.line	5846
 25695 08:680F: D4 A8        	pei	<L1060+path_new_0+2
 25696 08:6811: D4 A6        	pei	<L1060+path_new_0
 25697 08:6813: F4 00 00     	pea	#0
 25698 08:6816: 18           	clc
 25699 08:6817: 7B           	tdc
 25700 08:6818: 69 3B 00     	adc	#<L1061+djn_1
 25701 08:681B: 48           	pha
 25702 08:681C: 22 2B 37 08  	jsl	~~follow_path
 25703 08:6820: 85 05        	sta	<L1061+res_1
 25704                        ;				if (res == FR_OK)
 25705                        	.line	5847
 25706                        ;				{ /* Is new name already
                     in use by any other object? */
 25707 08:6822: A5 05        	lda	<L1061+res_1
 25708 08:6824: F0 03        	beq	L1069
 25709 08:6826: 82 28 00     	brl	L10615
 25710                        L1069:
 25711                        	.line	5848
 25712                        ;					res = (djn.obj.s
                    clust == djo.obj.sclust
 25713                        	.line	5849
 25714                        ;							
                    && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 25715 08:6829: A5 43        	lda	<L1061+djn_1+8
 25716 08:682B: C5 0F        	cmp	<L1061+djo_1+8
 25717 08:682D: D0 04        	bne	L1071
 25718 08:682F: A5 45        	lda	<L1061+djn_1+10
 25719 08:6831: C5 11        	cmp	<L1061+djo_1+10
 25720                        L1071:
 25721 08:6833: F0 03        	beq	L1072
 25722 08:6835: 82 14 00     	brl	L1070
 25723                        L1072:
 25724 08:6838: A5 4B        	lda	<L1061+djn_1+16
 25725 08:683A: C5 17        	cmp	<L1061+djo_1+16
 25726 08:683C: D0 04        	bne	L1073
 25727 08:683E: A5 4D        	lda	<L1061+djn_1+18
 25728 08:6840: C5 19        	cmp	<L1061+djo_1+18
  Sat Jul 10 2021  1:15                                                Page 488


 25729                        L1073:
 25730 08:6842: F0 03        	beq	L1074
 25731 08:6844: 82 05 00     	brl	L1070
 25732                        L1074:
 25733 08:6847: A9 04 00     	lda	#$4
 25734 08:684A: 80 03        	bra	L1075
 25735                        L1070:
 25736 08:684C: A9 08 00     	lda	#$8
 25737                        L1075:
 25738 08:684F: 85 05        	sta	<L1061+res_1
 25739                        ;				}
 25740                        	.line	5851
 25741                        ;				if (res == FR_NO_FILE)
 25742                        L10615:
 25743                        	.line	5852
 25744                        ;				{ /* It is a valid path 
                    and no name collision */
 25745 08:6851: A5 05        	lda	<L1061+res_1
 25746 08:6853: C9 04 00     	cmp	#<$4
 25747 08:6856: F0 03        	beq	L1076
 25748 08:6858: 82 1D 01     	brl	L10616
 25749                        L1076:
 25750                        	.line	5853
 25751                        ;					res = dir_regist
                    er(&djn); /* Register the new entry */
 25752                        	.line	5854
 25753 08:685B: F4 00 00     	pea	#0
 25754 08:685E: 18           	clc
 25755 08:685F: 7B           	tdc
 25756 08:6860: 69 3B 00     	adc	#<L1061+djn_1
 25757 08:6863: 48           	pha
 25758 08:6864: 22 48 28 08  	jsl	~~dir_register
 25759 08:6868: 85 05        	sta	<L1061+res_1
 25760                        ;					if (res == FR_OK
                    )
 25761                        	.line	5855
 25762                        ;					{
 25763 08:686A: A5 05        	lda	<L1061+res_1
 25764 08:686C: F0 03        	beq	L1077
 25765 08:686E: 82 07 01     	brl	L10617
 25766                        L1077:
 25767                        	.line	5856
 25768                        ;						dir = dj
                    n.dir; /* Copy directory entry of the object except name */
 25769                        	.line	5857
 25770 08:6871: A5 57        	lda	<L1061+djn_1+28
 25771 08:6873: 85 93        	sta	<L1061+dir_1
 25772 08:6875: A5 59        	lda	<L1061+djn_1+30
 25773 08:6877: 85 95        	sta	<L1061+dir_1+2
 25774                        ;						mem_cpy(
                    dir + 13, buf + 13, SZDIRE - 13);
 25775                        	.line	5858
 25776 08:6879: F4 13 00     	pea	#<$13
 25777 08:687C: F4 00 00     	pea	#0
 25778 08:687F: 18           	clc
 25779 08:6880: 7B           	tdc
 25780 08:6881: 69 80 00     	adc	#<L1061+buf_1+13
 25781 08:6884: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 489


 25782 08:6885: 18           	clc
 25783 08:6886: A9 0D 00     	lda	#$d
 25784 08:6889: 65 93        	adc	<L1061+dir_1
 25785 08:688B: 85 01        	sta	<R0
 25786 08:688D: A9 00 00     	lda	#$0
 25787 08:6890: 65 95        	adc	<L1061+dir_1+2
 25788 08:6892: 85 03        	sta	<R0+2
 25789 08:6894: D4 03        	pei	<R0+2
 25790 08:6896: D4 01        	pei	<R0
 25791 08:6898: 22 93 01 08  	jsl	~~mem_cpy
 25792                        ;						dir[DIR_
                    Attr] = buf[DIR_Attr];
 25793                        	.line	5859
 25794 08:689C: E2 20        	sep	#$20
 25795                        	longa	off
 25796 08:689E: A5 7E        	lda	<L1061+buf_1+11
 25797 08:68A0: A0 0B 00     	ldy	#$b
 25798 08:68A3: 97 93        	sta	[<L1061+dir_1],Y
 25799 08:68A5: C2 20        	rep	#$20
 25800                        	longa	on
 25801                        ;						if (!(di
                    r[DIR_Attr] & AM_DIR))
 25802                        	.line	5860
 25803                        ;							
                    dir[DIR_Attr] |= AM_ARC; /* Set archive attribute if it is a
                     file */
 25804 08:68A7: E2 20        	sep	#$20
 25805                        	longa	off
 25806 08:68A9: A0 0B 00     	ldy	#$b
 25807 08:68AC: B7 93        	lda	[<L1061+dir_1],Y
 25808 08:68AE: 29 10        	and	#<$10
 25809 08:68B0: C2 20        	rep	#$20
 25810                        	longa	on
 25811 08:68B2: F0 03        	beq	L1078
 25812 08:68B4: 82 19 00     	brl	L10618
 25813                        L1078:
 25814                        	.line	5861
 25815 08:68B7: 18           	clc
 25816 08:68B8: A9 0B 00     	lda	#$b
 25817 08:68BB: 65 93        	adc	<L1061+dir_1
 25818 08:68BD: 85 01        	sta	<R0
 25819 08:68BF: A9 00 00     	lda	#$0
 25820 08:68C2: 65 95        	adc	<L1061+dir_1+2
 25821 08:68C4: 85 03        	sta	<R0+2
 25822 08:68C6: E2 20        	sep	#$20
 25823                        	longa	off
 25824 08:68C8: A7 01        	lda	[<R0]
 25825 08:68CA: 09 20        	ora	#<$20
 25826 08:68CC: 87 01        	sta	[<R0]
 25827 08:68CE: C2 20        	rep	#$20
 25828                        	longa	on
 25829                        ;						fs->wfla
                    g = 1;
 25830                        L10618:
 25831                        	.line	5862
 25832 08:68D0: E2 20        	sep	#$20
 25833                        	longa	off
 25834 08:68D2: A9 01        	lda	#$1
  Sat Jul 10 2021  1:15                                                Page 490


 25835 08:68D4: A0 03 00     	ldy	#$3
 25836 08:68D7: 97 6F        	sta	[<L1061+fs_1],Y
 25837 08:68D9: C2 20        	rep	#$20
 25838                        	longa	on
 25839                        ;						if ((dir
                    [DIR_Attr] & AM_DIR)
 25840                        	.line	5863
 25841                        ;							
                    	&& djo.obj.sclust != djn.obj.sclust)
 25842                        ;						{ /* Upd
                    ate .. entry in the sub-directory if needed */
 25843 08:68DB: E2 20        	sep	#$20
 25844                        	longa	off
 25845 08:68DD: A0 0B 00     	ldy	#$b
 25846 08:68E0: B7 93        	lda	[<L1061+dir_1],Y
 25847 08:68E2: 29 10        	and	#<$10
 25848 08:68E4: C2 20        	rep	#$20
 25849                        	longa	on
 25850 08:68E6: D0 03        	bne	L1079
 25851 08:68E8: 82 8D 00     	brl	L10619
 25852                        L1079:
 25853 08:68EB: A5 0F        	lda	<L1061+djo_1+8
 25854 08:68ED: C5 43        	cmp	<L1061+djn_1+8
 25855 08:68EF: D0 04        	bne	L1080
 25856 08:68F1: A5 11        	lda	<L1061+djo_1+10
 25857 08:68F3: C5 45        	cmp	<L1061+djn_1+10
 25858                        L1080:
 25859 08:68F5: D0 03        	bne	L1081
 25860 08:68F7: 82 7E 00     	brl	L10619
 25861                        L1081:
 25862                        	.line	5865
 25863                        ;							
                    sect = clst2sect(fs, ld_clust(fs, dir));
 25864                        	.line	5866
 25865 08:68FA: D4 95        	pei	<L1061+dir_1+2
 25866 08:68FC: D4 93        	pei	<L1061+dir_1
 25867 08:68FE: D4 71        	pei	<L1061+fs_1+2
 25868 08:6900: D4 6F        	pei	<L1061+fs_1
 25869 08:6902: 22 16 1D 08  	jsl	~~ld_clust
 25870 08:6906: 85 01        	sta	<R0
 25871 08:6908: 86 03        	stx	<R0+2
 25872 08:690A: DA           	phx
 25873 08:690B: 48           	pha
 25874 08:690C: D4 71        	pei	<L1061+fs_1+2
 25875 08:690E: D4 6F        	pei	<L1061+fs_1
 25876 08:6910: 22 C5 0A 08  	jsl	~~clst2sect
 25877 08:6914: 85 97        	sta	<L1061+sect_1
 25878 08:6916: 86 99        	stx	<L1061+sect_1+2
 25879                        ;							
                    if (sect == 0)
 25880                        	.line	5867
 25881                        ;							
                    {
 25882 08:6918: A5 97        	lda	<L1061+sect_1
 25883 08:691A: 05 99        	ora	<L1061+sect_1+2
 25884 08:691C: F0 03        	beq	L1082
 25885 08:691E: 82 08 00     	brl	L10620
 25886                        L1082:
  Sat Jul 10 2021  1:15                                                Page 491


 25887                        	.line	5868
 25888                        ;							
                    	res = FR_INT_ERR;
 25889                        	.line	5869
 25890 08:6921: A9 02 00     	lda	#$2
 25891 08:6924: 85 05        	sta	<L1061+res_1
 25892                        ;							
                    }
 25893                        	.line	5870
 25894                        ;							
                    else
 25895 08:6926: 82 4F 00     	brl	L10621
 25896                        L10620:
 25897                        ;							
                    {
 25898                        	.line	5872
 25899                        ;							
                    	/* Start of critical section where an interruption can c
                    ause a cross-link */
 25900                        ;							
                    	res = move_window(fs, sect);
 25901                        	.line	5874
 25902 08:6929: D4 99        	pei	<L1061+sect_1+2
 25903 08:692B: D4 97        	pei	<L1061+sect_1
 25904 08:692D: D4 71        	pei	<L1061+fs_1+2
 25905 08:692F: D4 6F        	pei	<L1061+fs_1
 25906 08:6931: 22 C1 08 08  	jsl	~~move_window
 25907 08:6935: 85 05        	sta	<L1061+res_1
 25908                        ;							
                    	dir = fs->win + SZDIRE * 1; /* Ptr to .. entry */
 25909                        	.line	5875
 25910 08:6937: 18           	clc
 25911 08:6938: A9 53 00     	lda	#$53
 25912 08:693B: 65 6F        	adc	<L1061+fs_1
 25913 08:693D: 85 93        	sta	<L1061+dir_1
 25914 08:693F: A9 00 00     	lda	#$0
 25915 08:6942: 65 71        	adc	<L1061+fs_1+2
 25916 08:6944: 85 95        	sta	<L1061+dir_1+2
 25917                        ;							
                    	if (res == FR_OK && dir[1] == '.')
 25918                        	.line	5876
 25919                        ;							
                    	{
 25920 08:6946: A5 05        	lda	<L1061+res_1
 25921 08:6948: F0 03        	beq	L1083
 25922 08:694A: 82 2B 00     	brl	L10622
 25923                        L1083:
 25924 08:694D: E2 20        	sep	#$20
 25925                        	longa	off
 25926 08:694F: A0 01 00     	ldy	#$1
 25927 08:6952: B7 93        	lda	[<L1061+dir_1],Y
 25928 08:6954: C9 2E        	cmp	#<$2e
 25929 08:6956: C2 20        	rep	#$20
 25930                        	longa	on
 25931 08:6958: F0 03        	beq	L1084
 25932 08:695A: 82 1B 00     	brl	L10622
 25933                        L1084:
 25934                        	.line	5877
  Sat Jul 10 2021  1:15                                                Page 492


 25935                        ;							
                    		st_clust(fs, dir, djn.obj.sclust);
 25936                        	.line	5878
 25937 08:695D: D4 45        	pei	<L1061+djn_1+10
 25938 08:695F: D4 43        	pei	<L1061+djn_1+8
 25939 08:6961: D4 95        	pei	<L1061+dir_1+2
 25940 08:6963: D4 93        	pei	<L1061+dir_1
 25941 08:6965: D4 71        	pei	<L1061+fs_1+2
 25942 08:6967: D4 6F        	pei	<L1061+fs_1
 25943 08:6969: 22 A6 1D 08  	jsl	~~st_clust
 25944                        ;							
                    		fs->wflag = 1;
 25945                        	.line	5879
 25946 08:696D: E2 20        	sep	#$20
 25947                        	longa	off
 25948 08:696F: A9 01        	lda	#$1
 25949 08:6971: A0 03 00     	ldy	#$3
 25950 08:6974: 97 6F        	sta	[<L1061+fs_1],Y
 25951 08:6976: C2 20        	rep	#$20
 25952                        	longa	on
 25953                        ;							
                    	}
 25954                        	.line	5880
 25955                        ;							
                    }
 25956                        L10622:
 25957                        	.line	5881
 25958                        L10621:
 25959                        ;						}
 25960                        	.line	5882
 25961                        ;					}
 25962                        L10619:
 25963                        	.line	5883
 25964                        ;				}
 25965                        L10617:
 25966                        	.line	5884
 25967                        ;			}
 25968                        L10616:
 25969                        	.line	5885
 25970                        ;			if (res == FR_OK)
 25971                        	.line	5886
 25972                        ;			{
 25973 08:6978: A5 05        	lda	<L1061+res_1
 25974 08:697A: F0 03        	beq	L1085
 25975 08:697C: 82 20 00     	brl	L10623
 25976                        L1085:
 25977                        	.line	5887
 25978                        ;				res = dir_remove(&djo); 
                    /* Remove old entry */
 25979                        	.line	5888
 25980 08:697F: F4 00 00     	pea	#0
 25981 08:6982: 18           	clc
 25982 08:6983: 7B           	tdc
 25983 08:6984: 69 07 00     	adc	#<L1061+djo_1
 25984 08:6987: 48           	pha
 25985 08:6988: 22 FC 2A 08  	jsl	~~dir_remove
 25986 08:698C: 85 05        	sta	<L1061+res_1
 25987                        ;				if (res == FR_OK)
  Sat Jul 10 2021  1:15                                                Page 493


 25988                        	.line	5889
 25989                        ;				{
 25990 08:698E: A5 05        	lda	<L1061+res_1
 25991 08:6990: F0 03        	beq	L1086
 25992 08:6992: 82 0A 00     	brl	L10624
 25993                        L1086:
 25994                        	.line	5890
 25995                        ;					res = sync_fs(fs
                    );
 25996                        	.line	5891
 25997 08:6995: D4 71        	pei	<L1061+fs_1+2
 25998 08:6997: D4 6F        	pei	<L1061+fs_1
 25999 08:6999: 22 4C 09 08  	jsl	~~sync_fs
 26000 08:699D: 85 05        	sta	<L1061+res_1
 26001                        ;				}
 26002                        	.line	5892
 26003                        ;			}
 26004                        L10624:
 26005                        	.line	5893
 26006                        ;			/* End of the critical section *
                    /
 26007                        ;		} FREE_NAMBUF();
 26008                        L10623:
 26009                        	.line	5895
 26010                        L10614:
 26011                        	.line	5895
 26012 08:699F: D4 9D        	pei	<L1061+lfn_1+2
 26013 08:69A1: D4 9B        	pei	<L1061+lfn_1
 26014 08:69A3: 22 D3 92 08  	jsl	~~ff_memfree
 26015                        ;	}
 26016                        	.line	5896
 26017                        ;
 26018                        ;	LEAVE_FF(fs, res);
 26019                        L10611:
 26020                        	.line	5898
 26021 08:69A7: A5 05        	lda	<L1061+res_1
 26022 08:69A9: 82 E3 FD     	brl	L1065
 26023                        ;}
 26024                        	.line	5899
 26025                        	.endblock	5899
 26026             0000009E   L1060	equ	158
 26027             00000005   L1061	equ	5
 26028 08:69AC:              	ends
 26029                        	efunc
 26030                        	.endfunc	5899,5,158
 26031                        	.line	5899
 26032                        ;
 26033                        ;#endif /* !FF_FS_READONLY */
 26034                        ;#endif /* FF_FS_MINIMIZE == 0 */
 26035                        ;#endif /* FF_FS_MINIMIZE <= 1 */
 26036                        ;#endif /* FF_FS_MINIMIZE <= 2 */
 26037                        ;
 26038                        ;#if FF_USE_CHMOD && !FF_FS_READONLY
 26039                        ;/*-----------------------------------------------
                    ------------------------*/
 26040                        ;/* Change Attribute                              
                                            */
 26041                        ;/*-----------------------------------------------
  Sat Jul 10 2021  1:15                                                Page 494


                    ------------------------*/
 26042                        ;
 26043                        ;FRESULT f_chmod (
 26044                        ;		const TCHAR* path, /* Pointer to the fil
                    e path */
 26045                        ;		BYTE attr, /* Attribute bits */
 26046                        ;		BYTE mask /* Attribute mask to change */
 26047                        ;)
 26048                        ;{
 26049                        ;	FRESULT res;
 26050                        ;	DIR dj;
 26051                        ;	FATFS *fs;
 26052                        ;	DEF_NAMBUF
 26053                        ;
 26054                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 26055                        ;	if (res == FR_OK)
 26056                        ;	{
 26057                        ;		dj.obj.fs = fs;
 26058                        ;		INIT_NAMBUF(fs);
 26059                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 26060                        ;		if (res == FR_OK && (dj.fn[NSFLAG] & (NS
                    _DOT | NS_NONAME))) res = FR_INVALID_NAME; /* Check object v
                    alidity */
 26061                        ;		if (res == FR_OK)
 26062                        ;		{
 26063                        ;			mask &= AM_RDO|AM_HID|AM_SYS|AM_
                    ARC; /* Valid attribute mask */
 26064                        ;#if FF_FS_EXFAT
 26065                        ;			if (fs->fs_type == FS_EXFAT)
 26066                        ;			{
 26067                        ;				fs->dirbuf[XDIR_Attr] = 
                    (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask); /* Ap
                    ply attribute change */
 26068                        ;				res = store_xdir(&dj);
 26069                        ;			}
 26070                        ;			else
 26071                        ;#endif
 26072                        ;			{
 26073                        ;				dj.dir[DIR_Attr] = (attr
                     & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask); /* Apply attrib
                    ute change */
 26074                        ;				fs->wflag = 1;
 26075                        ;			}
 26076                        ;			if (res == FR_OK)
 26077                        ;			{
 26078                        ;				res = sync_fs(fs);
 26079                        ;			}
 26080                        ;		}
 26081                        ;		FREE_NAMBUF();
 26082                        ;	}
 26083                        ;
 26084                        ;	LEAVE_FF(fs, res);
 26085                        ;}
 26086                        ;
 26087                        ;/*-----------------------------------------------
                    ------------------------*/
  Sat Jul 10 2021  1:15                                                Page 495


 26088                        ;/* Change Timestamp                              
                                            */
 26089                        ;/*-----------------------------------------------
                    ------------------------*/
 26090                        ;
 26091                        ;FRESULT f_utime (
 26092                        ;		const TCHAR* path, /* Pointer to the fil
                    e/directory name */
 26093                        ;		const FILINFO* fno /* Pointer to the tim
                    estamp to be set */
 26094                        ;)
 26095                        ;{
 26096                        ;	FRESULT res;
 26097                        ;	DIR dj;
 26098                        ;	FATFS *fs;
 26099                        ;	DEF_NAMBUF
 26100                        ;
 26101                        ;	res = mount_volume(&path, &fs, FA_WRITE); /* Get
                     logical drive */
 26102                        ;	if (res == FR_OK)
 26103                        ;	{
 26104                        ;		dj.obj.fs = fs;
 26105                        ;		INIT_NAMBUF(fs);
 26106                        ;		res = follow_path(&dj, path); /* Follow 
                    the file path */
 26107                        ;		if (res == FR_OK && (dj.fn[NSFLAG] & (NS
                    _DOT | NS_NONAME))) res = FR_INVALID_NAME; /* Check object v
                    alidity */
 26108                        ;		if (res == FR_OK)
 26109                        ;		{
 26110                        ;#if FF_FS_EXFAT
 26111                        ;			if (fs->fs_type == FS_EXFAT)
 26112                        ;			{
 26113                        ;				st_dword(fs->dirbuf + XD
                    IR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
 26114                        ;				res = store_xdir(&dj);
 26115                        ;			}
 26116                        ;			else
 26117                        ;#endif
 26118                        ;			{
 26119                        ;				st_dword(dj.dir + DIR_Mo
                    dTime, (DWORD)fno->fdate << 16 | fno->ftime);
 26120                        ;				fs->wflag = 1;
 26121                        ;			}
 26122                        ;			if (res == FR_OK)
 26123                        ;			{
 26124                        ;				res = sync_fs(fs);
 26125                        ;			}
 26126                        ;		}
 26127                        ;		FREE_NAMBUF();
 26128                        ;	}
 26129                        ;
 26130                        ;	LEAVE_FF(fs, res);
 26131                        ;}
 26132                        ;
 26133                        ;#endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
 26134                        ;
 26135                        ;#if FF_USE_LABEL
  Sat Jul 10 2021  1:15                                                Page 496


 26136                        ;/*-----------------------------------------------
                    ------------------------*/
 26137                        ;/* Get Volume Label                              
                                            */
 26138                        ;/*-----------------------------------------------
                    ------------------------*/
 26139                        ;
 26140                        ;FRESULT f_getlabel (
 26141                        ;		const TCHAR* path, /* Logical drive numb
                    er */
 26142                        ;		TCHAR* label, /* Buffer to store the vol
                    ume label */
 26143                        ;		DWORD* vsn /* Variable to store the volu
                    me serial number */
 26144                        ;)
 26145                        ;{
 26146                        	.line	6008
 26147                        	.line	6013
 26148                        	FFDOS
 26149                        	xdef	~~f_getlabel
 26150                        	func
 26151                        	.function	6013
 26152                        ~~f_getlabel:
 26153                        	longa	on
 26154                        	longi	on
 26155 08:69AC: 3B           	tsc
 26156 08:69AD: 38           	sec
 26157 08:69AE: E9 4C 00     	sbc	#L1087
 26158 08:69B1: 1B           	tcs
 26159 08:69B2: 0B           	phd
 26160 08:69B3: 5B           	tcd
 26161             00000004   path_0	set	4
 26162             00000008   label_0	set	8
 26163             0000000C   vsn_0	set	12
 26164                        	.block	6013
 26165                        ;	FRESULT res;
 26166                        ;	DIR dj;
 26167                        ;	FATFS *fs;
 26168                        ;	UINT si, di;
 26169                        ;	WCHAR wc;
 26170                        ;
 26171                        ;	/* Get logical drive */
 26172                        ;	res = mount_volume(&path, &fs, 0);
 26173             00000000   res_1	set	0
 26174             00000002   dj_1	set	2
 26175             00000036   fs_1	set	54
 26176             0000003A   si_1	set	58
 26177             0000003C   di_1	set	60
 26178             0000003E   wc_1	set	62
 26179                        	.sym	res,0,5,1,16
 26180                        	.sym	dj,2,10,1,416,75
 26181                        	.sym	fs,54,138,1,32,72
 26182                        	.sym	si,58,16,1,16
 26183                        	.sym	di,60,16,1,16
 26184                        	.sym	wc,62,16,1,16
 26185                        	.sym	path,4,142,6,32
 26186                        	.sym	label,8,142,6,32
 26187                        	.sym	vsn,12,146,6,32
  Sat Jul 10 2021  1:15                                                Page 497


 26188                        	.line	6021
 26189 08:69B4: F4 00 00     	pea	#<$0
 26190 08:69B7: F4 00 00     	pea	#0
 26191 08:69BA: 18           	clc
 26192 08:69BB: 7B           	tdc
 26193 08:69BC: 69 43 00     	adc	#<L1088+fs_1
 26194 08:69BF: 48           	pha
 26195 08:69C0: F4 00 00     	pea	#0
 26196 08:69C3: 18           	clc
 26197 08:69C4: 7B           	tdc
 26198 08:69C5: 69 50 00     	adc	#<L1087+path_0
 26199 08:69C8: 48           	pha
 26200 08:69C9: 22 B8 3D 08  	jsl	~~mount_volume
 26201 08:69CD: 85 0D        	sta	<L1088+res_1
 26202                        ;
 26203                        ;	/* Get volume label */
 26204                        ;	if (res == FR_OK && label)
 26205                        	.line	6024
 26206                        ;	{
 26207 08:69CF: A5 0D        	lda	<L1088+res_1
 26208 08:69D1: F0 03        	beq	L1090
 26209 08:69D3: 82 25 01     	brl	L10625
 26210                        L1090:
 26211 08:69D6: A5 54        	lda	<L1087+label_0
 26212 08:69D8: 05 56        	ora	<L1087+label_0+2
 26213 08:69DA: D0 03        	bne	L1091
 26214 08:69DC: 82 1C 01     	brl	L10625
 26215                        L1091:
 26216                        	.line	6025
 26217                        ;		dj.obj.fs = fs; dj.obj.sclust = 0; /* Op
                    en root directory */
 26218                        	.line	6026
 26219 08:69DF: A5 43        	lda	<L1088+fs_1
 26220 08:69E1: 85 0F        	sta	<L1088+dj_1
 26221 08:69E3: A5 45        	lda	<L1088+fs_1+2
 26222 08:69E5: 85 11        	sta	<L1088+dj_1+2
 26223                        	.line	6026
 26224 08:69E7: 64 17        	stz	<L1088+dj_1+8
 26225 08:69E9: 64 19        	stz	<L1088+dj_1+10
 26226                        ;		res = dir_sdi(&dj, 0);
 26227                        	.line	6027
 26228 08:69EB: F4 00 00     	pea	#^$0
 26229 08:69EE: F4 00 00     	pea	#<$0
 26230 08:69F1: F4 00 00     	pea	#0
 26231 08:69F4: 18           	clc
 26232 08:69F5: 7B           	tdc
 26233 08:69F6: 69 0F 00     	adc	#<L1088+dj_1
 26234 08:69F9: 48           	pha
 26235 08:69FA: 22 60 17 08  	jsl	~~dir_sdi
 26236 08:69FE: 85 0D        	sta	<L1088+res_1
 26237                        ;		if (res == FR_OK)
 26238                        	.line	6028
 26239                        ;		{
 26240 08:6A00: A5 0D        	lda	<L1088+res_1
 26241 08:6A02: F0 03        	beq	L1092
 26242 08:6A04: 82 E0 00     	brl	L10626
 26243                        L1092:
 26244                        	.line	6029
  Sat Jul 10 2021  1:15                                                Page 498


 26245                        ;			res = DIR_READ_LABEL(&dj); /* Fi
                    nd a volume label entry */
 26246                        	.line	6030
 26247 08:6A07: F4 01 00     	pea	#<$1
 26248 08:6A0A: F4 00 00     	pea	#0
 26249 08:6A0D: 18           	clc
 26250 08:6A0E: 7B           	tdc
 26251 08:6A0F: 69 0F 00     	adc	#<L1088+dj_1
 26252 08:6A12: 48           	pha
 26253 08:6A13: 22 9B 23 08  	jsl	~~dir_read
 26254 08:6A17: 85 0D        	sta	<L1088+res_1
 26255                        ;			if (res == FR_OK)
 26256                        	.line	6031
 26257                        ;			{
 26258 08:6A19: A5 0D        	lda	<L1088+res_1
 26259 08:6A1B: F0 03        	beq	L1093
 26260 08:6A1D: 82 C7 00     	brl	L10627
 26261                        L1093:
 26262                        	.line	6032
 26263                        ;#if FF_FS_EXFAT
 26264                        ;				if (fs->fs_type == FS_EX
                    FAT)
 26265                        ;				{
 26266                        ;					WCHAR hs;
 26267                        ;
 26268                        ;					for (si = di = h
                    s = 0; si < dj.dir[XDIR_NumLabel]; si++)
 26269                        ;					{ /* Extract vol
                    ume label from 83 entry */
 26270                        ;						wc = ld_
                    word(dj.dir + XDIR_Label + si * 2);
 26271                        ;						if (hs =
                    = 0 && IsSurrogate(wc))
 26272                        ;						{ /* Is 
                    the code a surrogate? */
 26273                        ;							
                    hs = wc; continue;
 26274                        ;						}
 26275                        ;						wc = put
                    _utf((DWORD)hs << 16 | wc, &label[di], 4);
 26276                        ;						if (wc =
                    = 0)
 26277                        ;						{	
                    di = 0; break;}
 26278                        ;						di += wc
                    ;
 26279                        ;						hs = 0;
 26280                        ;					}
 26281                        ;					if (hs != 0) di 
                    = 0; /* Broken surrogate pair? */
 26282                        ;					label[di] = 0;
 26283                        ;				}
 26284                        ;				else
 26285                        ;#endif
 26286                        ;				{
 26287                        	.line	6056
 26288                        ;					si = di = 0; /* 
                    Extract volume label from AM_VOL entry */
  Sat Jul 10 2021  1:15                                                Page 499


 26289                        	.line	6057
 26290 08:6A20: 64 49        	stz	<L1088+di_1
 26291 08:6A22: 64 47        	stz	<L1088+si_1
 26292                        ;					while (si < 11)
 26293                        	.line	6058
 26294                        L10628:
 26295 08:6A24: A5 47        	lda	<L1088+si_1
 26296 08:6A26: C9 0B 00     	cmp	#<$b
 26297 08:6A29: 90 03        	bcc	L1094
 26298 08:6A2B: 82 97 00     	brl	L10629
 26299                        L1094:
 26300                        ;					{
 26301                        	.line	6059
 26302                        ;						wc = dj.
                    dir[si++];
 26303                        	.line	6060
 26304 08:6A2E: A4 47        	ldy	<L1088+si_1
 26305 08:6A30: B7 2B        	lda	[<L1088+dj_1+28],Y
 26306 08:6A32: 29 FF 00     	and	#$ff
 26307 08:6A35: 85 4B        	sta	<L1088+wc_1
 26308 08:6A37: E6 47        	inc	<L1088+si_1
 26309                        ;#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unico
                    de output */
 26310                        ;						if (dbc_
                    1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++]; /* Is
                     it a DBC? */
 26311                        	.line	6062
 26312 08:6A39: D4 4B        	pei	<L1088+wc_1
 26313 08:6A3B: 22 B7 02 08  	jsl	~~dbc_1st
 26314 08:6A3F: AA           	tax
 26315 08:6A40: D0 03        	bne	L1095
 26316 08:6A42: 82 23 00     	brl	L10630
 26317                        L1095:
 26318 08:6A45: A5 47        	lda	<L1088+si_1
 26319 08:6A47: C9 0B 00     	cmp	#<$b
 26320 08:6A4A: 90 03        	bcc	L1096
 26321 08:6A4C: 82 19 00     	brl	L10630
 26322                        L1096:
 26323                        	.line	6062
 26324 08:6A4F: A4 47        	ldy	<L1088+si_1
 26325 08:6A51: B7 2B        	lda	[<L1088+dj_1+28],Y
 26326 08:6A53: 29 FF 00     	and	#$ff
 26327 08:6A56: 85 01        	sta	<R0
 26328 08:6A58: A5 4B        	lda	<L1088+wc_1
 26329 08:6A5A: EB           	xba
 26330 08:6A5B: 29 00 FF     	and	#$ff00
 26331 08:6A5E: 85 05        	sta	<R1
 26332 08:6A60: A5 05        	lda	<R1
 26333 08:6A62: 05 01        	ora	<R0
 26334 08:6A64: 85 4B        	sta	<L1088+wc_1
 26335 08:6A66: E6 47        	inc	<L1088+si_1
 26336                        ;						wc = ff_
                    oem2uni(wc, CODEPAGE); /* Convert it into Unicode */
 26337                        L10630:
 26338                        	.line	6063
 26339 08:6A68: F4 B5 01     	pea	#<$1b5
 26340 08:6A6B: D4 4B        	pei	<L1088+wc_1
 26341 08:6A6D: 22 55 92 08  	jsl	~~ff_oem2uni
  Sat Jul 10 2021  1:15                                                Page 500


 26342 08:6A71: 85 4B        	sta	<L1088+wc_1
 26343                        ;						if (wc !
                    = 0) wc = put_utf(wc, &label[di], 4); /* Put it in Unicode *
                    /
 26344                        	.line	6064
 26345 08:6A73: A5 4B        	lda	<L1088+wc_1
 26346 08:6A75: D0 03        	bne	L1097
 26347 08:6A77: 82 35 00     	brl	L10631
 26348                        L1097:
 26349                        	.line	6064
 26350 08:6A7A: F4 04 00     	pea	#<$4
 26351 08:6A7D: A5 49        	lda	<L1088+di_1
 26352 08:6A7F: 85 01        	sta	<R0
 26353 08:6A81: 64 03        	stz	<R0+2
 26354 08:6A83: 18           	clc
 26355 08:6A84: A5 54        	lda	<L1087+label_0
 26356 08:6A86: 65 01        	adc	<R0
 26357 08:6A88: 85 05        	sta	<R1
 26358 08:6A8A: A5 56        	lda	<L1087+label_0+2
 26359 08:6A8C: 65 03        	adc	<R0+2
 26360 08:6A8E: 85 07        	sta	<R1+2
 26361 08:6A90: D4 07        	pei	<R1+2
 26362 08:6A92: D4 05        	pei	<R1
 26363 08:6A94: A5 4B        	lda	<L1088+wc_1
 26364 08:6A96: 85 01        	sta	<R0
 26365 08:6A98: 64 03        	stz	<R0+2
 26366 08:6A9A: D4 03        	pei	<R0+2
 26367 08:6A9C: D4 01        	pei	<R0
 26368 08:6A9E: 22 E8 04 08  	jsl	~~put_utf
 26369 08:6AA2: E2 20        	sep	#$20
 26370                        	longa	off
 26371 08:6AA4: 85 09        	sta	<R2
 26372 08:6AA6: C2 20        	rep	#$20
 26373                        	longa	on
 26374 08:6AA8: A5 09        	lda	<R2
 26375 08:6AAA: 29 FF 00     	and	#$ff
 26376 08:6AAD: 85 4B        	sta	<L1088+wc_1
 26377                        ;						if (wc =
                    = 0)
 26378                        L10631:
 26379                        	.line	6065
 26380                        ;						{	
                    di = 0; break;}
 26381 08:6AAF: A5 4B        	lda	<L1088+wc_1
 26382 08:6AB1: F0 03        	beq	L1098
 26383 08:6AB3: 82 05 00     	brl	L10632
 26384                        L1098:
 26385                        	.line	6066
 26386                        	.line	6066
 26387 08:6AB6: 64 49        	stz	<L1088+di_1
 26388                        	.line	6066
 26389 08:6AB8: 82 0A 00     	brl	L10629
 26390                        	.line	6066
 26391                        ;						di += wc
                    ;
 26392                        L10632:
 26393                        	.line	6067
 26394 08:6ABB: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 501


 26395 08:6ABC: A5 49        	lda	<L1088+di_1
 26396 08:6ABE: 65 4B        	adc	<L1088+wc_1
 26397 08:6AC0: 85 49        	sta	<L1088+di_1
 26398                        ;#else						
                    			/* ANSI/OEM output */
 26399                        ;						label[di
                    ++] = (TCHAR)wc;
 26400                        ;#endif
 26401                        ;					}
 26402                        	.line	6071
 26403 08:6AC2: 82 5F FF     	brl	L10628
 26404                        L10629:
 26405                        ;					do
 26406                        	.line	6072
 26407                        L10635:
 26408                        ;					{ /* Truncate tr
                    ailing spaces */
 26409                        	.line	6073
 26410                        ;						label[di
                    ] = 0;
 26411                        	.line	6074
 26412 08:6AC5: E2 20        	sep	#$20
 26413                        	longa	off
 26414 08:6AC7: A9 00        	lda	#$0
 26415 08:6AC9: A4 49        	ldy	<L1088+di_1
 26416 08:6ACB: 97 54        	sta	[<L1087+label_0],Y
 26417 08:6ACD: C2 20        	rep	#$20
 26418                        	longa	on
 26419                        ;						if (di =
                    = 0) break;
 26420                        	.line	6075
 26421 08:6ACF: A5 49        	lda	<L1088+di_1
 26422 08:6AD1: D0 03        	bne	L1099
 26423 08:6AD3: 82 11 00     	brl	L10634
 26424                        L1099:
 26425                        ;					}while (label[--
                    di] == ' ');
 26426                        	.line	6076
 26427                        L10633:
 26428 08:6AD6: C6 49        	dec	<L1088+di_1
 26429 08:6AD8: E2 20        	sep	#$20
 26430                        	longa	off
 26431 08:6ADA: A4 49        	ldy	<L1088+di_1
 26432 08:6ADC: B7 54        	lda	[<L1087+label_0],Y
 26433 08:6ADE: C9 20        	cmp	#<$20
 26434 08:6AE0: C2 20        	rep	#$20
 26435                        	longa	on
 26436 08:6AE2: D0 03        	bne	L1100
 26437 08:6AE4: 82 DE FF     	brl	L10635
 26438                        L1100:
 26439                        L10634:
 26440                        ;				}
 26441                        	.line	6077
 26442                        ;			}
 26443                        	.line	6078
 26444                        ;		}
 26445                        L10627:
 26446                        	.line	6079
  Sat Jul 10 2021  1:15                                                Page 502


 26447                        ;		if (res == FR_NO_FILE)
 26448                        L10626:
 26449                        	.line	6080
 26450                        ;		{ /* No label entry and return nul strin
                    g */
 26451 08:6AE7: A5 0D        	lda	<L1088+res_1
 26452 08:6AE9: C9 04 00     	cmp	#<$4
 26453 08:6AEC: F0 03        	beq	L1101
 26454 08:6AEE: 82 0A 00     	brl	L10636
 26455                        L1101:
 26456                        	.line	6081
 26457                        ;			label[0] = 0;
 26458                        	.line	6082
 26459 08:6AF1: E2 20        	sep	#$20
 26460                        	longa	off
 26461 08:6AF3: A9 00        	lda	#$0
 26462 08:6AF5: 87 54        	sta	[<L1087+label_0]
 26463 08:6AF7: C2 20        	rep	#$20
 26464                        	longa	on
 26465                        ;			res = FR_OK;
 26466                        	.line	6083
 26467 08:6AF9: 64 0D        	stz	<L1088+res_1
 26468                        ;		}
 26469                        	.line	6084
 26470                        ;	}
 26471                        L10636:
 26472                        	.line	6085
 26473                        ;
 26474                        ;	/* Get volume serial number */
 26475                        ;	if (res == FR_OK && vsn)
 26476                        L10625:
 26477                        	.line	6088
 26478                        ;	{
 26479 08:6AFB: A5 0D        	lda	<L1088+res_1
 26480 08:6AFD: F0 03        	beq	L1102
 26481 08:6AFF: 82 8F 00     	brl	L10637
 26482                        L1102:
 26483 08:6B02: A5 58        	lda	<L1087+vsn_0
 26484 08:6B04: 05 5A        	ora	<L1087+vsn_0+2
 26485 08:6B06: D0 03        	bne	L1103
 26486 08:6B08: 82 86 00     	brl	L10637
 26487                        L1103:
 26488                        	.line	6089
 26489                        ;		res = move_window(fs, fs->volbase);
 26490                        	.line	6090
 26491 08:6B0B: A0 21 00     	ldy	#$21
 26492 08:6B0E: B7 43        	lda	[<L1088+fs_1],Y
 26493 08:6B10: 48           	pha
 26494 08:6B11: A0 1F 00     	ldy	#$1f
 26495 08:6B14: B7 43        	lda	[<L1088+fs_1],Y
 26496 08:6B16: 48           	pha
 26497 08:6B17: D4 45        	pei	<L1088+fs_1+2
 26498 08:6B19: D4 43        	pei	<L1088+fs_1
 26499 08:6B1B: 22 C1 08 08  	jsl	~~move_window
 26500 08:6B1F: 85 0D        	sta	<L1088+res_1
 26501                        ;		if (res == FR_OK)
 26502                        	.line	6091
 26503                        ;		{
  Sat Jul 10 2021  1:15                                                Page 503


 26504 08:6B21: A5 0D        	lda	<L1088+res_1
 26505 08:6B23: F0 03        	beq	L1104
 26506 08:6B25: 82 69 00     	brl	L10638
 26507                        L1104:
 26508                        	.line	6092
 26509                        ;			switch (fs->fs_type)
 26510                        	.line	6093
 26511 08:6B28: A7 43        	lda	[<L1088+fs_1]
 26512 08:6B2A: 29 FF 00     	and	#$ff
 26513 08:6B2D: 82 18 00     	brl	L10639
 26514                        ;			{
 26515                        	.line	6094
 26516                        ;				case FS_EXFAT:
 26517                        	.line	6095
 26518                        L10641:
 26519                        ;				di = BPB_VolIDEx; break;
 26520                        	.line	6096
 26521 08:6B30: A9 64 00     	lda	#$64
 26522 08:6B33: 85 49        	sta	<L1088+di_1
 26523                        	.line	6096
 26524 08:6B35: 82 20 00     	brl	L10640
 26525                        ;
 26526                        ;				case FS_FAT32:
 26527                        	.line	6098
 26528                        L10642:
 26529                        ;				di = BS_VolID32; break;
 26530                        	.line	6099
 26531 08:6B38: A9 43 00     	lda	#$43
 26532 08:6B3B: 85 49        	sta	<L1088+di_1
 26533                        	.line	6099
 26534 08:6B3D: 82 18 00     	brl	L10640
 26535                        ;
 26536                        ;				default:
 26537                        	.line	6101
 26538                        L10643:
 26539                        ;				di = BS_VolID;
 26540                        	.line	6102
 26541 08:6B40: A9 27 00     	lda	#$27
 26542 08:6B43: 85 49        	sta	<L1088+di_1
 26543                        ;			}
 26544                        	.line	6103
 26545 08:6B45: 82 10 00     	brl	L10640
 26546                        L10639:
 26547                        	xref	~~~swt
 26548 08:6B48: 22 xx xx xx  	jsl	~~~swt
 26549 08:6B4C: 02 00        	dw	2
 26550 08:6B4E: 03 00        	dw	3
 26551 08:6B50: 37 6B        	dw	L10642-1
 26552 08:6B52: 04 00        	dw	4
 26553 08:6B54: 2F 6B        	dw	L10641-1
 26554 08:6B56: 3F 6B        	dw	L10643-1
 26555                        L10640:
 26556                        ;			*vsn = ld_dword(fs->win + di);
 26557                        	.line	6104
 26558 08:6B58: A5 49        	lda	<L1088+di_1
 26559 08:6B5A: 85 01        	sta	<R0
 26560 08:6B5C: 64 03        	stz	<R0+2
 26561 08:6B5E: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 504


 26562 08:6B5F: A9 33 00     	lda	#$33
 26563 08:6B62: 65 01        	adc	<R0
 26564 08:6B64: 85 05        	sta	<R1
 26565 08:6B66: A9 00 00     	lda	#$0
 26566 08:6B69: 65 03        	adc	<R0+2
 26567 08:6B6B: 85 07        	sta	<R1+2
 26568 08:6B6D: 18           	clc
 26569 08:6B6E: A5 43        	lda	<L1088+fs_1
 26570 08:6B70: 65 05        	adc	<R1
 26571 08:6B72: 85 01        	sta	<R0
 26572 08:6B74: A5 45        	lda	<L1088+fs_1+2
 26573 08:6B76: 65 07        	adc	<R1+2
 26574 08:6B78: 85 03        	sta	<R0+2
 26575 08:6B7A: D4 03        	pei	<R0+2
 26576 08:6B7C: D4 01        	pei	<R0
 26577 08:6B7E: 22 3B 00 08  	jsl	~~ld_dword
 26578 08:6B82: 85 09        	sta	<R2
 26579 08:6B84: 86 0B        	stx	<R2+2
 26580 08:6B86: A5 09        	lda	<R2
 26581 08:6B88: 87 58        	sta	[<L1087+vsn_0]
 26582 08:6B8A: A5 0B        	lda	<R2+2
 26583 08:6B8C: A0 02 00     	ldy	#$2
 26584 08:6B8F: 97 58        	sta	[<L1087+vsn_0],Y
 26585                        ;		}
 26586                        	.line	6105
 26587                        ;	}
 26588                        L10638:
 26589                        	.line	6106
 26590                        ;
 26591                        ;	LEAVE_FF(fs, res);
 26592                        L10637:
 26593                        	.line	6108
 26594 08:6B91: A5 0D        	lda	<L1088+res_1
 26595                        L1105:
 26596 08:6B93: A8           	tay
 26597 08:6B94: A5 4E        	lda	<L1087+2
 26598 08:6B96: 85 5A        	sta	<L1087+2+12
 26599 08:6B98: A5 4D        	lda	<L1087+1
 26600 08:6B9A: 85 59        	sta	<L1087+1+12
 26601 08:6B9C: 2B           	pld
 26602 08:6B9D: 3B           	tsc
 26603 08:6B9E: 18           	clc
 26604 08:6B9F: 69 58 00     	adc	#L1087+12
 26605 08:6BA2: 1B           	tcs
 26606 08:6BA3: 98           	tya
 26607 08:6BA4: 6B           	rtl
 26608                        ;}
 26609                        	.line	6109
 26610                        	.endblock	6109
 26611             0000004C   L1087	equ	76
 26612             0000000D   L1088	equ	13
 26613 08:6BA5:              	ends
 26614                        	efunc
 26615                        	.endfunc	6109,13,76
 26616                        	.line	6109
 26617                        ;
 26618                        ;#if !FF_FS_READONLY
 26619                        ;/*-----------------------------------------------
  Sat Jul 10 2021  1:15                                                Page 505


                    ------------------------*/
 26620                        ;/* Set Volume Label                              
                                            */
 26621                        ;/*-----------------------------------------------
                    ------------------------*/
 26622                        ;
 26623                        ;FRESULT f_setlabel (
 26624                        ;		const TCHAR* label /* Volume label to se
                    t with heading logical drive number */
 26625                        ;)
 26626                        ;{
 26627                        	.line	6116
 26628                        	.line	6119
 26629                        	FFDOS
 26630                        	xdef	~~f_setlabel
 26631                        	func
 26632                        	.function	6119
 26633                        ~~f_setlabel:
 26634                        	longa	on
 26635                        	longi	on
 26636 08:6BA5: 3B           	tsc
 26637 08:6BA6: 38           	sec
 26638 08:6BA7: E9 60 00     	sbc	#L1106
 26639 08:6BAA: 1B           	tcs
 26640 08:6BAB: 0B           	phd
 26641 08:6BAC: 5B           	tcd
 26642             00000004   label_0	set	4
 26643                        	.block	6119
 26644                        ;	FRESULT res;
 26645                        ;	DIR dj;
 26646                        ;	FATFS *fs;
 26647                        ;	BYTE dirvn[22];
 26648                        ;	UINT di;
 26649                        ;	WCHAR wc;
 26650                        ;	static const char badchr[] = "+.,;=[]/\\\"*:<>\?
                    |\x7F"; /* [0..] for FAT, [7..] for exFAT */
 26651                        	data
 26652                        L1109:
 26653 00:01A5: 2B 2E 2C 3B  	db	$2B,$2E,$2C,$3B,$3D,$5B,$5D,$2F,$5C,$22
       00:01A9: 3D 5B 5D 2F 
       00:01AD: 5C 22 
 26654 00:01AF: 2A 3A 3C 3E  	db	$2A,$3A,$3C,$3E,$3F,$7C,$7F,$0
       00:01B3: 3F 7C 7F 00 
 26655 00:01B7:              	ends
 26656                        ;#if FF_USE_LFN
 26657                        ;	DWORD dc;
 26658                        ;#endif
 26659                        ;
 26660                        ;	/* Get logical drive */
 26661                        ;	res = mount_volume(&label, &fs, FA_WRITE);
 26662             00000000   res_1	set	0
 26663             00000002   dj_1	set	2
 26664             00000036   fs_1	set	54
 26665             0000003A   dirvn_1	set	58
 26666             00000050   di_1	set	80
 26667             00000052   wc_1	set	82
 26668             00000054   dc_1	set	84
 26669                        	.sym	res,0,5,1,16
  Sat Jul 10 2021  1:15                                                Page 506


 26670                        	.sym	dj,2,10,1,416,75
 26671                        	.sym	fs,54,138,1,32,72
 26672                        	.sym	dirvn,58,110,1,0,22
 26673                        	.sym	di,80,16,1,16
 26674                        	.sym	wc,82,16,1,16
 26675                        	.sym	badchr,1109,110,19,0,18
 26676                        	.sym	dc,84,18,1,32
 26677                        	.sym	label,4,142,6,32
 26678                        	.line	6132
 26679 08:6BAD: F4 02 00     	pea	#<$2
 26680 08:6BB0: F4 00 00     	pea	#0
 26681 08:6BB3: 18           	clc
 26682 08:6BB4: 7B           	tdc
 26683 08:6BB5: 69 3F 00     	adc	#<L1107+fs_1
 26684 08:6BB8: 48           	pha
 26685 08:6BB9: F4 00 00     	pea	#0
 26686 08:6BBC: 18           	clc
 26687 08:6BBD: 7B           	tdc
 26688 08:6BBE: 69 64 00     	adc	#<L1106+label_0
 26689 08:6BC1: 48           	pha
 26690 08:6BC2: 22 B8 3D 08  	jsl	~~mount_volume
 26691 08:6BC6: 85 09        	sta	<L1107+res_1
 26692                        ;	if (res != FR_OK) LEAVE_FF(fs, res);
 26693                        	.line	6133
 26694 08:6BC8: A5 09        	lda	<L1107+res_1
 26695 08:6BCA: D0 03        	bne	L1110
 26696 08:6BCC: 82 14 00     	brl	L10644
 26697                        L1110:
 26698                        	.line	6133
 26699 08:6BCF: A5 09        	lda	<L1107+res_1
 26700                        L1111:
 26701 08:6BD1: A8           	tay
 26702 08:6BD2: A5 62        	lda	<L1106+2
 26703 08:6BD4: 85 66        	sta	<L1106+2+4
 26704 08:6BD6: A5 61        	lda	<L1106+1
 26705 08:6BD8: 85 65        	sta	<L1106+1+4
 26706 08:6BDA: 2B           	pld
 26707 08:6BDB: 3B           	tsc
 26708 08:6BDC: 18           	clc
 26709 08:6BDD: 69 64 00     	adc	#L1106+4
 26710 08:6BE0: 1B           	tcs
 26711 08:6BE1: 98           	tya
 26712 08:6BE2: 6B           	rtl
 26713                        ;
 26714                        ;#if FF_FS_EXFAT
 26715                        ;	if (fs->fs_type == FS_EXFAT)
 26716                        ;	{ /* On the exFAT volume */
 26717                        ;		mem_set(dirvn, 0, 22);
 26718                        ;		di = 0;
 26719                        ;		while ((UINT)*label >= ' ')
 26720                        ;		{ /* Create volume label */
 26721                        ;			dc = tchar2uni(&label); /* Get a
                     Unicode character */
 26722                        ;			if (dc >= 0x10000)
 26723                        ;			{
 26724                        ;				if (dc == 0xFFFFFFFF || 
                    di >= 10)
 26725                        ;				{ /* Wrong surrogate or 
  Sat Jul 10 2021  1:15                                                Page 507


                    buffer overflow */
 26726                        ;					dc = 0;
 26727                        ;				}
 26728                        ;				else
 26729                        ;				{
 26730                        ;					st_word(dirvn + 
                    di * 2, (WCHAR)(dc >> 16)); di++;
 26731                        ;				}
 26732                        ;			}
 26733                        ;			if (dc == 0 || chk_chr(badchr + 
                    7, (int)dc) || di >= 11)
 26734                        ;			{ /* Check validity of the volum
                    e label */
 26735                        ;				LEAVE_FF(fs, FR_INVALID_
                    NAME);
 26736                        ;			}
 26737                        ;			st_word(dirvn + di * 2, (WCHAR)d
                    c); di++;
 26738                        ;		}
 26739                        ;	}
 26740                        ;	else
 26741                        ;#endif
 26742                        ;	{ /* On the FAT/FAT32 volume */
 26743                        L10644:
 26744                        	.line	6163
 26745                        ;		mem_set(dirvn, ' ', 11);
 26746                        	.line	6164
 26747 08:6BE3: F4 0B 00     	pea	#<$b
 26748 08:6BE6: F4 20 00     	pea	#<$20
 26749 08:6BE9: F4 00 00     	pea	#0
 26750 08:6BEC: 18           	clc
 26751 08:6BED: 7B           	tdc
 26752 08:6BEE: 69 43 00     	adc	#<L1107+dirvn_1
 26753 08:6BF1: 48           	pha
 26754 08:6BF2: 22 DF 01 08  	jsl	~~mem_set
 26755                        ;		di = 0;
 26756                        	.line	6165
 26757 08:6BF6: 64 59        	stz	<L1107+di_1
 26758                        ;		while ((UINT)*label >= ' ')
 26759                        	.line	6166
 26760                        L10645:
 26761 08:6BF8: E2 20        	sep	#$20
 26762                        	longa	off
 26763 08:6BFA: A7 64        	lda	[<L1106+label_0]
 26764 08:6BFC: C9 20        	cmp	#<$20
 26765 08:6BFE: C2 20        	rep	#$20
 26766                        	longa	on
 26767 08:6C00: B0 03        	bcs	L1112
 26768 08:6C02: 82 A9 00     	brl	L10646
 26769                        L1112:
 26770                        ;		{ /* Create volume label */
 26771                        	.line	6167
 26772                        ;#if FF_USE_LFN
 26773                        ;			dc = tchar2uni(&label);
 26774                        	.line	6169
 26775 08:6C05: F4 00 00     	pea	#0
 26776 08:6C08: 18           	clc
 26777 08:6C09: 7B           	tdc
  Sat Jul 10 2021  1:15                                                Page 508


 26778 08:6C0A: 69 64 00     	adc	#<L1106+label_0
 26779 08:6C0D: 48           	pha
 26780 08:6C0E: 22 11 03 08  	jsl	~~tchar2uni
 26781 08:6C12: 85 5D        	sta	<L1107+dc_1
 26782 08:6C14: 86 5F        	stx	<L1107+dc_1+2
 26783                        ;			wc = (dc < 0x10000) ? ff_uni2oem
                    (ff_wtoupper(dc), CODEPAGE) : 0;
 26784                        	.line	6170
 26785 08:6C16: A5 5D        	lda	<L1107+dc_1
 26786 08:6C18: C9 00 00     	cmp	#<$10000
 26787 08:6C1B: A5 5F        	lda	<L1107+dc_1+2
 26788 08:6C1D: E9 01 00     	sbc	#^$10000
 26789 08:6C20: 90 03        	bcc	L1114
 26790 08:6C22: 82 17 00     	brl	L1113
 26791                        L1114:
 26792 08:6C25: F4 B5 01     	pea	#<$1b5
 26793 08:6C28: D4 5F        	pei	<L1107+dc_1+2
 26794 08:6C2A: D4 5D        	pei	<L1107+dc_1
 26795 08:6C2C: 22 8D 92 08  	jsl	~~ff_wtoupper
 26796 08:6C30: 85 01        	sta	<R0
 26797 08:6C32: 86 03        	stx	<R0+2
 26798 08:6C34: DA           	phx
 26799 08:6C35: 48           	pha
 26800 08:6C36: 22 71 92 08  	jsl	~~ff_uni2oem
 26801 08:6C3A: 80 03        	bra	L1115
 26802                        L1113:
 26803 08:6C3C: A9 00 00     	lda	#$0
 26804                        L1115:
 26805 08:6C3F: 85 5B        	sta	<L1107+wc_1
 26806                        ;#else						
                    			/* ANSI/OEM input */
 26807                        ;			wc = (BYTE)*label++;
 26808                        ;			if (dbc_1st((BYTE)wc)) wc = dbc_
                    2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
 26809                        ;			if (IsLower(wc)) wc -= 0x20; /* 
                    To upper ASCII characters */
 26810                        ;#if FF_CODE_PAGE == 0
 26811                        ;			if (ExCvt && wc >= 0x80) wc = Ex
                    Cvt[wc - 0x80]; /* To upper extended characters (SBCS cfg) *
                    /
 26812                        ;#elif FF_CODE_PAGE < 900
 26813                        ;			if (wc >= 0x80) wc = ExCvt[wc - 
                    0x80]; /* To upper extended characters (SBCS cfg) */
 26814                        ;#endif
 26815                        ;#endif
 26816                        ;			if (wc == 0 || chk_chr(badchr + 
                    0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11))
 26817                        	.line	6181
 26818                        ;			{ /* Reject invalid characters f
                    or volume label */
 26819 08:6C41: A5 5B        	lda	<L1107+wc_1
 26820 08:6C43: D0 03        	bne	L1117
 26821 08:6C45: 82 37 00     	brl	L1116
 26822                        L1117:
 26823 08:6C48: D4 5B        	pei	<L1107+wc_1
 26824 08:6C4A: A9 xx xx     	lda	#<L1109
 26825 08:6C4D: 85 01        	sta	<R0
 26826                        	xref	_BEG_DATA
  Sat Jul 10 2021  1:15                                                Page 509


 26827 08:6C4F: A9 xx xx     	lda	#_BEG_DATA>>16
 26828 08:6C52: 85 03        	sta	<R0+2
 26829 08:6C54: D4 03        	pei	<R0+2
 26830 08:6C56: D4 01        	pei	<R0
 26831 08:6C58: 22 75 02 08  	jsl	~~chk_chr
 26832 08:6C5C: AA           	tax
 26833 08:6C5D: F0 03        	beq	L1118
 26834 08:6C5F: 82 1D 00     	brl	L1116
 26835                        L1118:
 26836 08:6C62: A5 5B        	lda	<L1107+wc_1
 26837 08:6C64: C9 00 01     	cmp	#<$100
 26838 08:6C67: B0 03        	bcs	L1120
 26839 08:6C69: 82 05 00     	brl	L1119
 26840                        L1120:
 26841 08:6C6C: A9 0A 00     	lda	#$a
 26842 08:6C6F: 80 03        	bra	L1121
 26843                        L1119:
 26844 08:6C71: A9 0B 00     	lda	#$b
 26845                        L1121:
 26846 08:6C74: 85 05        	sta	<R1
 26847 08:6C76: A5 59        	lda	<L1107+di_1
 26848 08:6C78: C5 05        	cmp	<R1
 26849 08:6C7A: B0 03        	bcs	L1122
 26850 08:6C7C: 82 06 00     	brl	L10647
 26851                        L1122:
 26852                        L1116:
 26853                        	.line	6182
 26854                        ;				LEAVE_FF(fs, FR_INVALID_
                    NAME);
 26855                        	.line	6183
 26856 08:6C7F: A9 06 00     	lda	#$6
 26857 08:6C82: 82 4C FF     	brl	L1111
 26858                        ;			}
 26859                        	.line	6184
 26860                        ;			if (wc >= 0x100) dirvn[di++] = (
                    BYTE)(wc >> 8);
 26861                        L10647:
 26862                        	.line	6185
 26863 08:6C85: A5 5B        	lda	<L1107+wc_1
 26864 08:6C87: C9 00 01     	cmp	#<$100
 26865 08:6C8A: B0 03        	bcs	L1123
 26866 08:6C8C: 82 10 00     	brl	L10648
 26867                        L1123:
 26868                        	.line	6185
 26869 08:6C8F: A5 5B        	lda	<L1107+wc_1
 26870 08:6C91: EB           	xba
 26871 08:6C92: 29 FF 00     	and	#$00ff
 26872 08:6C95: E2 20        	sep	#$20
 26873                        	longa	off
 26874 08:6C97: A6 59        	ldx	<L1107+di_1
 26875 08:6C99: 95 43        	sta	<L1107+dirvn_1,X
 26876 08:6C9B: C2 20        	rep	#$20
 26877                        	longa	on
 26878 08:6C9D: E6 59        	inc	<L1107+di_1
 26879                        ;			dirvn[di++] = (BYTE)wc;
 26880                        L10648:
 26881                        	.line	6186
 26882 08:6C9F: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 510


 26883                        	longa	off
 26884 08:6CA1: A5 5B        	lda	<L1107+wc_1
 26885 08:6CA3: A6 59        	ldx	<L1107+di_1
 26886 08:6CA5: 95 43        	sta	<L1107+dirvn_1,X
 26887 08:6CA7: C2 20        	rep	#$20
 26888                        	longa	on
 26889 08:6CA9: E6 59        	inc	<L1107+di_1
 26890                        ;		}
 26891                        	.line	6187
 26892 08:6CAB: 82 4A FF     	brl	L10645
 26893                        L10646:
 26894                        ;		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_IN
                    VALID_NAME); /* Reject illegal name (heading DDEM) */
 26895                        	.line	6188
 26896 08:6CAE: E2 20        	sep	#$20
 26897                        	longa	off
 26898 08:6CB0: A5 43        	lda	<L1107+dirvn_1
 26899 08:6CB2: C9 E5        	cmp	#<$e5
 26900 08:6CB4: C2 20        	rep	#$20
 26901                        	longa	on
 26902 08:6CB6: F0 03        	beq	L1124
 26903 08:6CB8: 82 06 00     	brl	L10649
 26904                        L1124:
 26905                        	.line	6188
 26906 08:6CBB: A9 06 00     	lda	#$6
 26907 08:6CBE: 82 10 FF     	brl	L1111
 26908                        ;		while (di && dirvn[di - 1] == ' ') di--;
                     /* Snip trailing spaces */
 26909                        L10649:
 26910                        	.line	6189
 26911                        L10650:
 26912 08:6CC1: A5 59        	lda	<L1107+di_1
 26913 08:6CC3: D0 03        	bne	L1125
 26914 08:6CC5: 82 1C 00     	brl	L10651
 26915                        L1125:
 26916 08:6CC8: 18           	clc
 26917 08:6CC9: A9 FF FF     	lda	#$ffff
 26918 08:6CCC: 65 59        	adc	<L1107+di_1
 26919 08:6CCE: 85 01        	sta	<R0
 26920 08:6CD0: E2 20        	sep	#$20
 26921                        	longa	off
 26922 08:6CD2: A6 01        	ldx	<R0
 26923 08:6CD4: B5 43        	lda	<L1107+dirvn_1,X
 26924 08:6CD6: C9 20        	cmp	#<$20
 26925 08:6CD8: C2 20        	rep	#$20
 26926                        	longa	on
 26927 08:6CDA: F0 03        	beq	L1126
 26928 08:6CDC: 82 05 00     	brl	L10651
 26929                        L1126:
 26930                        	.line	6189
 26931 08:6CDF: C6 59        	dec	<L1107+di_1
 26932 08:6CE1: 82 DD FF     	brl	L10650
 26933                        L10651:
 26934                        ;	}
 26935                        	.line	6190
 26936                        ;
 26937                        ;	/* Set volume label */
 26938                        ;	dj.obj.fs = fs; dj.obj.sclust = 0; /* Open root 
  Sat Jul 10 2021  1:15                                                Page 511


                    directory */
 26939                        	.line	6193
 26940 08:6CE4: A5 3F        	lda	<L1107+fs_1
 26941 08:6CE6: 85 0B        	sta	<L1107+dj_1
 26942 08:6CE8: A5 41        	lda	<L1107+fs_1+2
 26943 08:6CEA: 85 0D        	sta	<L1107+dj_1+2
 26944                        	.line	6193
 26945 08:6CEC: 64 13        	stz	<L1107+dj_1+8
 26946 08:6CEE: 64 15        	stz	<L1107+dj_1+10
 26947                        ;	res = dir_sdi(&dj, 0);
 26948                        	.line	6194
 26949 08:6CF0: F4 00 00     	pea	#^$0
 26950 08:6CF3: F4 00 00     	pea	#<$0
 26951 08:6CF6: F4 00 00     	pea	#0
 26952 08:6CF9: 18           	clc
 26953 08:6CFA: 7B           	tdc
 26954 08:6CFB: 69 0B 00     	adc	#<L1107+dj_1
 26955 08:6CFE: 48           	pha
 26956 08:6CFF: 22 60 17 08  	jsl	~~dir_sdi
 26957 08:6D03: 85 09        	sta	<L1107+res_1
 26958                        ;	if (res == FR_OK)
 26959                        	.line	6195
 26960                        ;	{
 26961 08:6D05: A5 09        	lda	<L1107+res_1
 26962 08:6D07: F0 03        	beq	L1127
 26963 08:6D09: 82 4F 01     	brl	L10652
 26964                        L1127:
 26965                        	.line	6196
 26966                        ;		res = DIR_READ_LABEL(&dj); /* Get volume
                     label entry */
 26967                        	.line	6197
 26968 08:6D0C: F4 01 00     	pea	#<$1
 26969 08:6D0F: F4 00 00     	pea	#0
 26970 08:6D12: 18           	clc
 26971 08:6D13: 7B           	tdc
 26972 08:6D14: 69 0B 00     	adc	#<L1107+dj_1
 26973 08:6D17: 48           	pha
 26974 08:6D18: 22 9B 23 08  	jsl	~~dir_read
 26975 08:6D1C: 85 09        	sta	<L1107+res_1
 26976                        ;		if (res == FR_OK)
 26977                        	.line	6198
 26978                        ;		{
 26979 08:6D1E: A5 09        	lda	<L1107+res_1
 26980 08:6D20: F0 03        	beq	L1128
 26981 08:6D22: 82 7F 00     	brl	L10653
 26982                        L1128:
 26983                        	.line	6199
 26984                        ;			if (FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT)
 26985                        	.line	6200
 26986                        ;			{
 26987 08:6D25: 82 3E 00     	brl	L10654
 26988 08:6D28: E2 20        	sep	#$20
 26989                        	longa	off
 26990 08:6D2A: A7 3F        	lda	[<L1107+fs_1]
 26991 08:6D2C: C9 04        	cmp	#<$4
 26992 08:6D2E: C2 20        	rep	#$20
 26993                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 512


 26994 08:6D30: F0 03        	beq	L1129
 26995 08:6D32: 82 31 00     	brl	L10654
 26996                        L1129:
 26997                        	.line	6201
 26998                        ;				dj.dir[XDIR_NumLabel] = 
                    (BYTE)di; /* Change the volume label */
 26999                        	.line	6202
 27000 08:6D35: E2 20        	sep	#$20
 27001                        	longa	off
 27002 08:6D37: A5 59        	lda	<L1107+di_1
 27003 08:6D39: A0 01 00     	ldy	#$1
 27004 08:6D3C: 97 27        	sta	[<L1107+dj_1+28],Y
 27005 08:6D3E: C2 20        	rep	#$20
 27006                        	longa	on
 27007                        ;				mem_cpy(dj.dir + XDIR_La
                    bel, dirvn, 22);
 27008                        	.line	6203
 27009 08:6D40: F4 16 00     	pea	#<$16
 27010 08:6D43: F4 00 00     	pea	#0
 27011 08:6D46: 18           	clc
 27012 08:6D47: 7B           	tdc
 27013 08:6D48: 69 43 00     	adc	#<L1107+dirvn_1
 27014 08:6D4B: 48           	pha
 27015 08:6D4C: 18           	clc
 27016 08:6D4D: A9 02 00     	lda	#$2
 27017 08:6D50: 65 27        	adc	<L1107+dj_1+28
 27018 08:6D52: 85 01        	sta	<R0
 27019 08:6D54: A9 00 00     	lda	#$0
 27020 08:6D57: 65 29        	adc	<L1107+dj_1+30
 27021 08:6D59: 85 03        	sta	<R0+2
 27022 08:6D5B: D4 03        	pei	<R0+2
 27023 08:6D5D: D4 01        	pei	<R0
 27024 08:6D5F: 22 93 01 08  	jsl	~~mem_cpy
 27025                        ;			}
 27026                        	.line	6204
 27027                        ;			else
 27028 08:6D63: 82 26 00     	brl	L10655
 27029                        L10654:
 27030                        ;			{
 27031                        	.line	6206
 27032                        ;				if (di != 0)
 27033                        	.line	6207
 27034                        ;				{
 27035 08:6D66: A5 59        	lda	<L1107+di_1
 27036 08:6D68: D0 03        	bne	L1130
 27037 08:6D6A: 82 17 00     	brl	L10656
 27038                        L1130:
 27039                        	.line	6208
 27040                        ;					mem_cpy(dj.dir, 
                    dirvn, 11); /* Change the volume label */
 27041                        	.line	6209
 27042 08:6D6D: F4 0B 00     	pea	#<$b
 27043 08:6D70: F4 00 00     	pea	#0
 27044 08:6D73: 18           	clc
 27045 08:6D74: 7B           	tdc
 27046 08:6D75: 69 43 00     	adc	#<L1107+dirvn_1
 27047 08:6D78: 48           	pha
 27048 08:6D79: D4 29        	pei	<L1107+dj_1+30
  Sat Jul 10 2021  1:15                                                Page 513


 27049 08:6D7B: D4 27        	pei	<L1107+dj_1+28
 27050 08:6D7D: 22 93 01 08  	jsl	~~mem_cpy
 27051                        ;				}
 27052                        	.line	6210
 27053                        ;				else
 27054 08:6D81: 82 08 00     	brl	L10657
 27055                        L10656:
 27056                        ;				{
 27057                        	.line	6212
 27058                        ;					dj.dir[DIR_Name]
                     = DDEM; /* Remove the volume label */
 27059                        	.line	6213
 27060 08:6D84: E2 20        	sep	#$20
 27061                        	longa	off
 27062 08:6D86: A9 E5        	lda	#$e5
 27063 08:6D88: 87 27        	sta	[<L1107+dj_1+28]
 27064 08:6D8A: C2 20        	rep	#$20
 27065                        	longa	on
 27066                        ;				}
 27067                        	.line	6214
 27068                        L10657:
 27069                        ;			}
 27070                        	.line	6215
 27071                        L10655:
 27072                        ;			fs->wflag = 1;
 27073                        	.line	6216
 27074 08:6D8C: E2 20        	sep	#$20
 27075                        	longa	off
 27076 08:6D8E: A9 01        	lda	#$1
 27077 08:6D90: A0 03 00     	ldy	#$3
 27078 08:6D93: 97 3F        	sta	[<L1107+fs_1],Y
 27079 08:6D95: C2 20        	rep	#$20
 27080                        	longa	on
 27081                        ;			res = sync_fs(fs);
 27082                        	.line	6217
 27083 08:6D97: D4 41        	pei	<L1107+fs_1+2
 27084 08:6D99: D4 3F        	pei	<L1107+fs_1
 27085 08:6D9B: 22 4C 09 08  	jsl	~~sync_fs
 27086 08:6D9F: 85 09        	sta	<L1107+res_1
 27087                        ;		}
 27088                        	.line	6218
 27089                        ;		else
 27090 08:6DA1: 82 B7 00     	brl	L10658
 27091                        L10653:
 27092                        ;		{ /* No volume label entry or an error *
                    /
 27093                        	.line	6220
 27094                        ;			if (res == FR_NO_FILE)
 27095                        	.line	6221
 27096                        ;			{
 27097 08:6DA4: A5 09        	lda	<L1107+res_1
 27098 08:6DA6: C9 04 00     	cmp	#<$4
 27099 08:6DA9: F0 03        	beq	L1131
 27100 08:6DAB: 82 AD 00     	brl	L10659
 27101                        L1131:
 27102                        	.line	6222
 27103                        ;				res = FR_OK;
 27104                        	.line	6223
  Sat Jul 10 2021  1:15                                                Page 514


 27105 08:6DAE: 64 09        	stz	<L1107+res_1
 27106                        ;				if (di != 0)
 27107                        	.line	6224
 27108                        ;				{ /* Create a volume lab
                    el entry */
 27109 08:6DB0: A5 59        	lda	<L1107+di_1
 27110 08:6DB2: D0 03        	bne	L1132
 27111 08:6DB4: 82 A4 00     	brl	L10660
 27112                        L1132:
 27113                        	.line	6225
 27114                        ;					res = dir_alloc(
                    &dj, 1); /* Allocate an entry */
 27115                        	.line	6226
 27116 08:6DB7: F4 01 00     	pea	#<$1
 27117 08:6DBA: F4 00 00     	pea	#0
 27118 08:6DBD: 18           	clc
 27119 08:6DBE: 7B           	tdc
 27120 08:6DBF: 69 0B 00     	adc	#<L1107+dj_1
 27121 08:6DC2: 48           	pha
 27122 08:6DC3: 22 53 1C 08  	jsl	~~dir_alloc
 27123 08:6DC7: 85 09        	sta	<L1107+res_1
 27124                        ;					if (res == FR_OK
                    )
 27125                        	.line	6227
 27126                        ;					{
 27127 08:6DC9: A5 09        	lda	<L1107+res_1
 27128 08:6DCB: F0 03        	beq	L1133
 27129 08:6DCD: 82 8B 00     	brl	L10661
 27130                        L1133:
 27131                        	.line	6228
 27132                        ;						mem_set(
                    dj.dir, 0, SZDIRE); /* Clean the entry */
 27133                        	.line	6229
 27134 08:6DD0: F4 20 00     	pea	#<$20
 27135 08:6DD3: F4 00 00     	pea	#<$0
 27136 08:6DD6: D4 29        	pei	<L1107+dj_1+30
 27137 08:6DD8: D4 27        	pei	<L1107+dj_1+28
 27138 08:6DDA: 22 DF 01 08  	jsl	~~mem_set
 27139                        ;						if (FF_F
                    S_EXFAT && fs->fs_type == FS_EXFAT)
 27140                        	.line	6230
 27141                        ;						{
 27142 08:6DDE: 82 46 00     	brl	L10662
 27143 08:6DE1: E2 20        	sep	#$20
 27144                        	longa	off
 27145 08:6DE3: A7 3F        	lda	[<L1107+fs_1]
 27146 08:6DE5: C9 04        	cmp	#<$4
 27147 08:6DE7: C2 20        	rep	#$20
 27148                        	longa	on
 27149 08:6DE9: F0 03        	beq	L1134
 27150 08:6DEB: 82 39 00     	brl	L10662
 27151                        L1134:
 27152                        	.line	6231
 27153                        ;							
                    dj.dir[XDIR_Type] = ET_VLABEL; /* Create volume label entry 
                    */
 27154                        	.line	6232
 27155 08:6DEE: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 515


 27156                        	longa	off
 27157 08:6DF0: A9 83        	lda	#$83
 27158 08:6DF2: 87 27        	sta	[<L1107+dj_1+28]
 27159 08:6DF4: C2 20        	rep	#$20
 27160                        	longa	on
 27161                        ;							
                    dj.dir[XDIR_NumLabel] = (BYTE)di;
 27162                        	.line	6233
 27163 08:6DF6: E2 20        	sep	#$20
 27164                        	longa	off
 27165 08:6DF8: A5 59        	lda	<L1107+di_1
 27166 08:6DFA: A0 01 00     	ldy	#$1
 27167 08:6DFD: 97 27        	sta	[<L1107+dj_1+28],Y
 27168 08:6DFF: C2 20        	rep	#$20
 27169                        	longa	on
 27170                        ;							
                    mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
 27171                        	.line	6234
 27172 08:6E01: F4 16 00     	pea	#<$16
 27173 08:6E04: F4 00 00     	pea	#0
 27174 08:6E07: 18           	clc
 27175 08:6E08: 7B           	tdc
 27176 08:6E09: 69 43 00     	adc	#<L1107+dirvn_1
 27177 08:6E0C: 48           	pha
 27178 08:6E0D: 18           	clc
 27179 08:6E0E: A9 02 00     	lda	#$2
 27180 08:6E11: 65 27        	adc	<L1107+dj_1+28
 27181 08:6E13: 85 01        	sta	<R0
 27182 08:6E15: A9 00 00     	lda	#$0
 27183 08:6E18: 65 29        	adc	<L1107+dj_1+30
 27184 08:6E1A: 85 03        	sta	<R0+2
 27185 08:6E1C: D4 03        	pei	<R0+2
 27186 08:6E1E: D4 01        	pei	<R0
 27187 08:6E20: 22 93 01 08  	jsl	~~mem_cpy
 27188                        ;						}
 27189                        	.line	6235
 27190                        ;						else
 27191 08:6E24: 82 1F 00     	brl	L10663
 27192                        L10662:
 27193                        ;						{
 27194                        	.line	6237
 27195                        ;							
                    dj.dir[DIR_Attr] = AM_VOL; /* Create volume label entry */
 27196                        	.line	6238
 27197 08:6E27: E2 20        	sep	#$20
 27198                        	longa	off
 27199 08:6E29: A9 08        	lda	#$8
 27200 08:6E2B: A0 0B 00     	ldy	#$b
 27201 08:6E2E: 97 27        	sta	[<L1107+dj_1+28],Y
 27202 08:6E30: C2 20        	rep	#$20
 27203                        	longa	on
 27204                        ;							
                    mem_cpy(dj.dir, dirvn, 11);
 27205                        	.line	6239
 27206 08:6E32: F4 0B 00     	pea	#<$b
 27207 08:6E35: F4 00 00     	pea	#0
 27208 08:6E38: 18           	clc
 27209 08:6E39: 7B           	tdc
  Sat Jul 10 2021  1:15                                                Page 516


 27210 08:6E3A: 69 43 00     	adc	#<L1107+dirvn_1
 27211 08:6E3D: 48           	pha
 27212 08:6E3E: D4 29        	pei	<L1107+dj_1+30
 27213 08:6E40: D4 27        	pei	<L1107+dj_1+28
 27214 08:6E42: 22 93 01 08  	jsl	~~mem_cpy
 27215                        ;						}
 27216                        	.line	6240
 27217                        L10663:
 27218                        ;						fs->wfla
                    g = 1;
 27219                        	.line	6241
 27220 08:6E46: E2 20        	sep	#$20
 27221                        	longa	off
 27222 08:6E48: A9 01        	lda	#$1
 27223 08:6E4A: A0 03 00     	ldy	#$3
 27224 08:6E4D: 97 3F        	sta	[<L1107+fs_1],Y
 27225 08:6E4F: C2 20        	rep	#$20
 27226                        	longa	on
 27227                        ;						res = sy
                    nc_fs(fs);
 27228                        	.line	6242
 27229 08:6E51: D4 41        	pei	<L1107+fs_1+2
 27230 08:6E53: D4 3F        	pei	<L1107+fs_1
 27231 08:6E55: 22 4C 09 08  	jsl	~~sync_fs
 27232 08:6E59: 85 09        	sta	<L1107+res_1
 27233                        ;					}
 27234                        	.line	6243
 27235                        ;				}
 27236                        L10661:
 27237                        	.line	6244
 27238                        ;			}
 27239                        L10660:
 27240                        	.line	6245
 27241                        ;		}
 27242                        L10659:
 27243                        	.line	6246
 27244                        L10658:
 27245                        ;	}
 27246                        	.line	6247
 27247                        ;
 27248                        ;	LEAVE_FF(fs, res);
 27249                        L10652:
 27250                        	.line	6249
 27251 08:6E5B: A5 09        	lda	<L1107+res_1
 27252 08:6E5D: 82 71 FD     	brl	L1111
 27253                        ;}
 27254                        	.line	6250
 27255                        	.endblock	6250
 27256             00000060   L1106	equ	96
 27257             00000009   L1107	equ	9
 27258 08:6E60:              	ends
 27259                        	efunc
 27260                        	.endfunc	6250,9,96
 27261                        	.line	6250
 27262                        ;
 27263                        ;#endif /* !FF_FS_READONLY */
 27264                        ;#endif /* FF_USE_LABEL */
 27265                        ;
  Sat Jul 10 2021  1:15                                                Page 517


 27266                        ;#if FF_USE_EXPAND && !FF_FS_READONLY
 27267                        ;/*-----------------------------------------------
                    ------------------------*/
 27268                        ;/* Allocate a Contiguous Blocks to the File      
                                            */
 27269                        ;/*-----------------------------------------------
                    ------------------------*/
 27270                        ;
 27271                        ;FRESULT f_expand (
 27272                        ;		FIL* fp, /* Pointer to the file object *
                    /
 27273                        ;		FSIZE_t fsz, /* File size to be expanded
                     to */
 27274                        ;		BYTE opt /* Operation mode 0:Find and pr
                    epare or 1:Find and allocate */
 27275                        ;)
 27276                        ;{
 27277                        ;	FRESULT res;
 27278                        ;	FATFS *fs;
 27279                        ;	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
 27280                        ;
 27281                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 27282                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 27283                        ;	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->fl
                    ag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
 27284                        ;#if FF_FS_EXFAT
 27285                        ;	if (fs->fs_type != FS_EXFAT && fsz >= 0x10000000
                    0) LEAVE_FF(fs, FR_DENIED); /* Check if in size limit */
 27286                        ;#endif
 27287                        ;	n = (DWORD)fs->csize * SS(fs); /* Cluster size *
                    /
 27288                        ;	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 
                    0); /* Number of clusters required */
 27289                        ;	stcl = fs->last_clst; lclst = 0;
 27290                        ;	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
 27291                        ;
 27292                        ;#if FF_FS_EXFAT
 27293                        ;	if (fs->fs_type == FS_EXFAT)
 27294                        ;	{
 27295                        ;		scl = find_bitmap(fs, stcl, tcl); /* Fin
                    d a contiguous cluster block */
 27296                        ;		if (scl == 0) res = FR_DENIED; /* No con
                    tiguous cluster block was found */
 27297                        ;		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR
                    ;
 27298                        ;		if (res == FR_OK)
 27299                        ;		{ /* A contiguous free area is found */
 27300                        ;			if (opt)
 27301                        ;			{ /* Allocate it now */
 27302                        ;				res = change_bitmap(fs, 
                    scl, tcl, 1); /* Mark the cluster block 'in use' */
 27303                        ;				lclst = scl + tcl - 1;
 27304                        ;			}
 27305                        ;			else
 27306                        ;			{ /* Set it as suggested point f
                    or next allocation */
  Sat Jul 10 2021  1:15                                                Page 518


 27307                        ;				lclst = scl - 1;
 27308                        ;			}
 27309                        ;		}
 27310                        ;	}
 27311                        ;	else
 27312                        ;#endif
 27313                        ;	{
 27314                        ;		scl = clst = stcl; ncl = 0;
 27315                        ;		for (;;)
 27316                        ;		{ /* Find a contiguous cluster block */
 27317                        ;			n = get_fat(&fp->obj, clst);
 27318                        ;			if (++clst >= fs->n_fatent) clst
                     = 2;
 27319                        ;			if (n == 1)
 27320                        ;			{	res = FR_INT_ERR; break;
                    }
 27321                        ;			if (n == 0xFFFFFFFF)
 27322                        ;			{	res = FR_DISK_ERR; break
                    ;}
 27323                        ;			if (n == 0)
 27324                        ;			{ /* Is it a free cluster? */
 27325                        ;				if (++ncl == tcl) break;
                     /* Break if a contiguous cluster block is found */
 27326                        ;			}
 27327                        ;			else
 27328                        ;			{
 27329                        ;				scl = clst; ncl = 0; /* 
                    Not a free cluster */
 27330                        ;			}
 27331                        ;			if (clst == stcl)
 27332                        ;			{	res = FR_DENIED; break;}
                     /* No contiguous cluster? */
 27333                        ;		}
 27334                        ;		if (res == FR_OK)
 27335                        ;		{ /* A contiguous free area is found */
 27336                        ;			if (opt)
 27337                        ;			{ /* Allocate it now */
 27338                        ;				for (clst = scl, n = tcl
                    ; n; clst++, n--)
 27339                        ;				{ /* Create a cluster ch
                    ain on the FAT */
 27340                        ;					res = put_fat(fs
                    , clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
 27341                        ;					if (res != FR_OK
                    ) break;
 27342                        ;					lclst = clst;
 27343                        ;				}
 27344                        ;			}
 27345                        ;			else
 27346                        ;			{ /* Set it as suggested point f
                    or next allocation */
 27347                        ;				lclst = scl - 1;
 27348                        ;			}
 27349                        ;		}
 27350                        ;	}
 27351                        ;
 27352                        ;	if (res == FR_OK)
 27353                        ;	{
  Sat Jul 10 2021  1:15                                                Page 519


 27354                        ;		fs->last_clst = lclst; /* Set suggested 
                    start cluster to start next */
 27355                        ;		if (opt)
 27356                        ;		{ /* Is it allocated now? */
 27357                        ;			fp->obj.sclust = scl; /* Update 
                    object allocation information */
 27358                        ;			fp->obj.objsize = fsz;
 27359                        ;			if (FF_FS_EXFAT) fp->obj.stat = 
                    2; /* Set status 'contiguous chain' */
 27360                        ;			fp->flag |= FA_MODIFIED;
 27361                        ;			if (fs->free_clst <= fs->n_faten
                    t - 2)
 27362                        ;			{ /* Update FSINFO */
 27363                        ;				fs->free_clst -= tcl;
 27364                        ;				fs->fsi_flag |= 1;
 27365                        ;			}
 27366                        ;		}
 27367                        ;	}
 27368                        ;
 27369                        ;	LEAVE_FF(fs, res);
 27370                        ;}
 27371                        ;
 27372                        ;#endif /* FF_USE_EXPAND && !FF_FS_READONLY */
 27373                        ;
 27374                        ;#if FF_USE_FORWARD
 27375                        ;/*-----------------------------------------------
                    ------------------------*/
 27376                        ;/* Forward Data to the Stream Directly           
                                            */
 27377                        ;/*-----------------------------------------------
                    ------------------------*/
 27378                        ;
 27379                        ;FRESULT f_forward (
 27380                        ;		FIL* fp, /* Pointer to the file object *
                    /
 27381                        ;		UINT (*func)(const BYTE*,UINT), /* Point
                    er to the streaming function */
 27382                        ;		UINT btf, /* Number of bytes to forward 
                    */
 27383                        ;		UINT* bf /* Pointer to number of bytes f
                    orwarded */
 27384                        ;)
 27385                        ;{
 27386                        ;	FRESULT res;
 27387                        ;	FATFS *fs;
 27388                        ;	DWORD clst;
 27389                        ;	LBA_t sect;
 27390                        ;	FSIZE_t remain;
 27391                        ;	UINT rcnt, csect;
 27392                        ;	BYTE *dbuf;
 27393                        ;
 27394                        ;	*bf = 0; /* Clear transfer byte counter */
 27395                        ;	res = validate(&fp->obj, &fs); /* Check validity
                     of the file object */
 27396                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 27397                        ;	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIE
                    D); /* Check access mode */
  Sat Jul 10 2021  1:15                                                Page 520


 27398                        ;
 27399                        ;	remain = fp->obj.objsize - fp->fptr;
 27400                        ;	if (btf > remain) btf = (UINT)remain; /* Truncat
                    e btf by remaining bytes */
 27401                        ;
 27402                        ;	for (; btf && (*func)(0, 0); /* Repeat until all
                     data transferred or stream goes busy */
 27403                        ;			fp->fptr += rcnt, *bf += rcnt, b
                    tf -= rcnt)
 27404                        ;	{
 27405                        ;		csect = (UINT)(fp->fptr / SS(fs) & (fs->
                    csize - 1)); /* Sector offset in the cluster */
 27406                        ;		if (fp->fptr % SS(fs) == 0)
 27407                        ;		{ /* On the sector boundary? */
 27408                        ;			if (csect == 0)
 27409                        ;			{ /* On the cluster boundary? */
 27410                        ;				clst = (fp->fptr == 0) ?
                     /* On the top of the file? */
 27411                        ;				fp->obj.sclust : get_fat
                    (&fp->obj, fp->clust);
 27412                        ;				if (clst <= 1) ABORT(fs,
                     FR_INT_ERR);
 27413                        ;				if (clst == 0xFFFFFFFF) 
                    ABORT(fs, FR_DISK_ERR);
 27414                        ;				fp->clust = clst; /* Upd
                    ate current cluster */
 27415                        ;			}
 27416                        ;		}
 27417                        ;		sect = clst2sect(fs, fp->clust); /* Get 
                    current data sector */
 27418                        ;		if (sect == 0) ABORT(fs, FR_INT_ERR);
 27419                        ;		sect += csect;
 27420                        ;#if FF_FS_TINY
 27421                        ;		if (move_window(fs, sect) != FR_OK) ABOR
                    T(fs, FR_DISK_ERR); /* Move sector window to the file data *
                    /
 27422                        ;		dbuf = fs->win;
 27423                        ;#else
 27424                        ;		if (fp->sect != sect)
 27425                        ;		{ /* Fill sector cache with file data */
 27426                        ;#if !FF_FS_READONLY
 27427                        ;			if (fp->flag & FA_DIRTY)
 27428                        ;			{ /* Write-back dirty sector cac
                    he */
 27429                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 27430                        ;				fp->flag &= (BYTE)~FA_DI
                    RTY;
 27431                        ;			}
 27432                        ;#endif
 27433                        ;			if (disk_read(fs->pdrv, fp->buf,
                     sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 27434                        ;		}
 27435                        ;		dbuf = fp->buf;
 27436                        ;#endif
 27437                        ;		fp->sect = sect;
 27438                        ;		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);
                     /* Number of bytes remains in the sector */
  Sat Jul 10 2021  1:15                                                Page 521


 27439                        ;		if (rcnt > btf) rcnt = btf; /* Clip it b
                    y btr if needed */
 27440                        ;		rcnt = (*func)(dbuf + ((UINT)fp->fptr % 
                    SS(fs)), rcnt); /* Forward the file data */
 27441                        ;		if (rcnt == 0) ABORT(fs, FR_INT_ERR);
 27442                        ;	}
 27443                        ;
 27444                        ;	LEAVE_FF(fs, FR_OK);
 27445                        ;}
 27446                        ;#endif /* FF_USE_FORWARD */
 27447                        ;
 27448                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 27449                        ;/*-----------------------------------------------
                    ------------------------*/
 27450                        ;/* Create an FAT/exFAT volume                    
                                            */
 27451                        ;/*-----------------------------------------------
                    ------------------------*/
 27452                        ;
 27453                        ;#define N_SEC_TRACK 63			/* Secto
                    rs per track for determination of drive CHS */
 27454                        ;#define	GPT_ALIGN	0x100000	/* Align
                    ment of partitions in GPT [byte] (>=128KB) */
 27455                        ;#define GPT_ITEMS	128			
                    /* Number of GPT table size (>=128, sector aligned) */
 27456                        ;
 27457                        ;/* Create partitions on the physical drive */
 27458                        ;
 27459                        ;static FRESULT create_partition (
 27460                        ;		BYTE drv, /* Physical drive number */
 27461                        ;		const LBA_t plst[], /* Partition list */
 27462                        ;		UINT sys, /* System ID (for only MBR, te
                    mp setting) and bit8:GPT */
 27463                        ;		BYTE* buf /* Working buffer for a sector
                     */
 27464                        ;)
 27465                        ;{
 27466                        	.line	6448
 27467                        	.line	6454
 27468                        	FFDOS
 27469                        	func
 27470                        	.function	6454
 27471                        ~~create_partition:
 27472                        	longa	on
 27473                        	longi	on
 27474 08:6E60: 3B           	tsc
 27475 08:6E61: 38           	sec
 27476 08:6E62: E9 2C 00     	sbc	#L1135
 27477 08:6E65: 1B           	tcs
 27478 08:6E66: 0B           	phd
 27479 08:6E67: 5B           	tcd
 27480             00000004   drv_0	set	4
 27481             00000006   plst_0	set	6
 27482             0000000A   sys_0	set	10
 27483             0000000C   buf_0	set	12
 27484                        	.block	6454
 27485                        ;	UINT i, cy;
 27486                        ;	LBA_t sz_drv;
  Sat Jul 10 2021  1:15                                                Page 522


 27487                        ;	DWORD sz_drv32, s_lba32, n_lba32;
 27488                        ;	BYTE *pte, hd, n_hd, sc, n_sc;
 27489                        ;
 27490                        ;	/* Get drive size */
 27491                        ;	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) !
                    = RES_OK) return FR_DISK_ERR;
 27492             00000000   i_1	set	0
 27493             00000002   cy_1	set	2
 27494             00000004   sz_drv_1	set	4
 27495             00000008   sz_drv32_1	set	8
 27496             0000000C   s_lba32_1	set	12
 27497             00000010   n_lba32_1	set	16
 27498             00000014   pte_1	set	20
 27499             00000018   hd_1	set	24
 27500             00000019   n_hd_1	set	25
 27501             0000001A   sc_1	set	26
 27502             0000001B   n_sc_1	set	27
 27503                        	.sym	i,0,16,1,16
 27504                        	.sym	cy,2,16,1,16
 27505                        	.sym	sz_drv,4,18,1,32
 27506                        	.sym	sz_drv32,8,18,1,32
 27507                        	.sym	s_lba32,12,18,1,32
 27508                        	.sym	n_lba32,16,18,1,32
 27509                        	.sym	pte,20,142,1,32
 27510                        	.sym	hd,24,14,1,8
 27511                        	.sym	n_hd,25,14,1,8
 27512                        	.sym	sc,26,14,1,8
 27513                        	.sym	n_sc,27,14,1,8
 27514                        	.sym	drv,4,14,6,8
 27515                        	.sym	plst,6,146,6,32
 27516                        	.sym	sys,10,16,6,16
 27517                        	.sym	buf,12,142,6,32
 27518                        	.line	6461
 27519 08:6E68: F4 00 00     	pea	#0
 27520 08:6E6B: 18           	clc
 27521 08:6E6C: 7B           	tdc
 27522 08:6E6D: 69 15 00     	adc	#<L1136+sz_drv_1
 27523 08:6E70: 48           	pha
 27524 08:6E71: F4 01 00     	pea	#<$1
 27525 08:6E74: D4 30        	pei	<L1135+drv_0
 27526 08:6E76: 22 xx xx xx  	jsl	~~disk_ioctl
 27527 08:6E7A: AA           	tax
 27528 08:6E7B: D0 03        	bne	L1138
 27529 08:6E7D: 82 15 00     	brl	L10664
 27530                        L1138:
 27531                        	.line	6461
 27532 08:6E80: A9 01 00     	lda	#$1
 27533                        L1139:
 27534 08:6E83: A8           	tay
 27535 08:6E84: A5 2E        	lda	<L1135+2
 27536 08:6E86: 85 3A        	sta	<L1135+2+12
 27537 08:6E88: A5 2D        	lda	<L1135+1
 27538 08:6E8A: 85 39        	sta	<L1135+1+12
 27539 08:6E8C: 2B           	pld
 27540 08:6E8D: 3B           	tsc
 27541 08:6E8E: 18           	clc
 27542 08:6E8F: 69 38 00     	adc	#L1135+12
 27543 08:6E92: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 523


 27544 08:6E93: 98           	tya
 27545 08:6E94: 6B           	rtl
 27546                        ;
 27547                        ;#if FF_LBA64
 27548                        ;	if (sz_drv >= FF_MIN_GPT)
 27549                        ;	{ /* Create partitions in GPT */
 27550                        ;		WORD ss;
 27551                        ;		UINT sz_pt, pi, si, ofs;
 27552                        ;		DWORD bcc, rnd, align;
 27553                        ;		QWORD s_lba64, n_lba64, sz_pool, s_bpt;
 27554                        ;		static const BYTE gpt_mbr[16] =
 27555                        ;		{	0x00, 0x00, 0x02, 0x00, 0xEE, 0x
                    FE, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x
                    FF};
 27556                        ;
 27557                        ;#if FF_MAX_SS != FF_MIN_SS
 27558                        ;		if (disk_ioctl(drv, GET_SECTOR_SIZE, &ss
                    ) != RES_OK) return FR_DISK_ERR; /* Get sector size */
 27559                        ;		if (ss > FF_MAX_SS || ss < FF_MIN_SS || 
                    (ss & (ss - 1))) return FR_DISK_ERR;
 27560                        ;#else
 27561                        ;		ss = FF_MAX_SS;
 27562                        ;#endif
 27563                        ;		rnd = GET_FATTIME(); /* Random seed */
 27564                        ;		align = GPT_ALIGN / ss; /* Partition ali
                    gnment [sector] */
 27565                        ;		sz_pt = GPT_ITEMS * SZ_GPTE / ss; /* Siz
                    e of PT [sector] */
 27566                        ;		s_bpt = sz_drv - sz_pt - 1; /* Backup PT
                     start sector */
 27567                        ;		s_lba64 = 2 + sz_pt; /* First allocatabl
                    e sector */
 27568                        ;		sz_pool = s_bpt - s_lba64; /* Size of al
                    locatable area */
 27569                        ;		bcc = 0xFFFFFFFF; n_lba64 = 1;
 27570                        ;		pi = si = 0; /* partition table index, s
                    ize table index */
 27571                        ;		do
 27572                        ;		{
 27573                        ;			if (pi * SZ_GPTE % ss == 0) mem_
                    set(buf, 0, ss); /* Clean the buffer if needed */
 27574                        ;			if (n_lba64 != 0)
 27575                        ;			{ /* Is the size table not termi
                    ntated? */
 27576                        ;				s_lba64 = (s_lba64 + ali
                    gn - 1) & ((QWORD)0 - align); /* Align partition start */
 27577                        ;				n_lba64 = plst[si++]; /*
                     Get a partition size */
 27578                        ;				if (n_lba64 <= 100)
 27579                        ;				{ /* Is the size in perc
                    entage? */
 27580                        ;					n_lba64 = sz_poo
                    l * n_lba64 / 100;
 27581                        ;					n_lba64 = (n_lba
                    64 + align - 1) & ((QWORD)0 - align); /* Align partition end
                     (only if in percentage) */
 27582                        ;				}
 27583                        ;				if (s_lba64 + n_lba64 > 
  Sat Jul 10 2021  1:15                                                Page 524


                    s_bpt)
 27584                        ;				{ /* Clip at end of the 
                    pool */
 27585                        ;					n_lba64 = (s_lba
                    64 < s_bpt) ? s_bpt - s_lba64 : 0;
 27586                        ;				}
 27587                        ;			}
 27588                        ;			if (n_lba64 != 0)
 27589                        ;			{ /* Add a partition? */
 27590                        ;				ofs = pi * SZ_GPTE % ss;
 27591                        ;				mem_cpy(buf + ofs + GPTE
                    _PtGuid, GUID_MS_Basic, 16); /* Partition GUID (Microsoft Ba
                    sic Data) */
 27592                        ;				rnd = make_rand(rnd, buf
                     + ofs + GPTE_UpGuid, 16); /* Unique partition GUID */
 27593                        ;				st_qword(buf + ofs + GPT
                    E_FstLba, s_lba64); /* Partition start LBA */
 27594                        ;				st_qword(buf + ofs + GPT
                    E_LstLba, s_lba64 + n_lba64 - 1); /* Partition end LBA */
 27595                        ;				s_lba64 += n_lba64; /* N
                    ext partition LBA */
 27596                        ;			}
 27597                        ;			if ((pi + 1) * SZ_GPTE % ss == 0
                    )
 27598                        ;			{ /* Write the buffer if it is f
                    illed up */
 27599                        ;				for (i = 0; i < ss; bcc 
                    = crc32(bcc, buf[i++])); /* Calculate table check sum */
 27600                        ;				if (disk_write(drv, buf,
                     2 + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR; /*
                     Primary table */
 27601                        ;				if (disk_write(drv, buf,
                     s_bpt + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR
                    ; /* Secondary table */
 27602                        ;			}
 27603                        ;		}while (++pi < GPT_ITEMS);
 27604                        ;
 27605                        ;		/* Create primary GPT header */
 27606                        ;		mem_set(buf, 0, ss);
 27607                        ;		mem_cpy(buf + GPTH_Sign, "EFI PART" "\0\
                    0\1\0" "\x5C\0\0", 16); /* Signature, version (1.0) and size
                     (92) */
 27608                        ;		st_dword(buf + GPTH_PtBcc, ~bcc); /* Tab
                    le check sum */
 27609                        ;		st_qword(buf + GPTH_CurLba, 1); /* LBA o
                    f this header */
 27610                        ;		st_qword(buf + GPTH_BakLba, sz_drv - 1);
                     /* LBA of another header */
 27611                        ;		st_qword(buf + GPTH_FstLba, 2 + sz_pt); 
                    /* LBA of first allocatable sector */
 27612                        ;		st_qword(buf + GPTH_LstLba, s_bpt - 1); 
                    /* LBA of last allocatable sector */
 27613                        ;		st_dword(buf + GPTH_PteSize, SZ_GPTE); /
                    * Size of a table entry */
 27614                        ;		st_dword(buf + GPTH_PtNum, GPT_ITEMS); /
                    * Number of table entries */
 27615                        ;		st_dword(buf + GPTH_PtOfs, 2); /* LBA of
                     this table */
  Sat Jul 10 2021  1:15                                                Page 525


 27616                        ;		rnd = make_rand(rnd, buf + GPTH_DskGuid,
                     16); /* Disk GUID */
 27617                        ;		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc
                     = crc32(bcc, buf[i++])); /* Calculate header check sum */
 27618                        ;		st_dword(buf + GPTH_Bcc, ~bcc); /* Heade
                    r check sum */
 27619                        ;		if (disk_write(drv, buf, 1, 1) != RES_OK
                    ) return FR_DISK_ERR;
 27620                        ;
 27621                        ;		/* Create secondary GPT header */
 27622                        ;		st_qword(buf + GPTH_CurLba, sz_drv - 1);
                     /* LBA of this header */
 27623                        ;		st_qword(buf + GPTH_BakLba, 1); /* LBA o
                    f another header */
 27624                        ;		st_qword(buf + GPTH_PtOfs, s_bpt); /* LB
                    A of this table */
 27625                        ;		st_dword(buf + GPTH_Bcc, 0);
 27626                        ;		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc
                     = crc32(bcc, buf[i++])); /* Calculate header check sum */
 27627                        ;		st_dword(buf + GPTH_Bcc, ~bcc); /* Heade
                    r check sum */
 27628                        ;		if (disk_write(drv, buf, sz_drv - 1, 1) 
                    != RES_OK) return FR_DISK_ERR;
 27629                        ;
 27630                        ;		/* Create protective MBR */
 27631                        ;		mem_set(buf, 0, ss);
 27632                        ;		mem_cpy(buf + MBR_Table, gpt_mbr, 16); /
                    * Create a GPT partition */
 27633                        ;		st_word(buf + BS_55AA, 0xAA55);
 27634                        ;		if (disk_write(drv, buf, 0, 1) != RES_OK
                    ) return FR_DISK_ERR;
 27635                        ;
 27636                        ;	}
 27637                        ;	else
 27638                        ;#endif
 27639                        ;	{ /* Create partitions in MBR */
 27640                        L10664:
 27641                        	.line	6555
 27642                        ;		sz_drv32 = (DWORD)sz_drv;
 27643                        	.line	6556
 27644 08:6E95: A5 15        	lda	<L1136+sz_drv_1
 27645 08:6E97: 85 19        	sta	<L1136+sz_drv32_1
 27646 08:6E99: A5 17        	lda	<L1136+sz_drv_1+2
 27647 08:6E9B: 85 1B        	sta	<L1136+sz_drv32_1+2
 27648                        ;		n_sc = N_SEC_TRACK; /* Determine drive C
                    HS without any consideration of the drive geometry */
 27649                        	.line	6557
 27650 08:6E9D: E2 20        	sep	#$20
 27651                        	longa	off
 27652 08:6E9F: A9 3F        	lda	#$3f
 27653 08:6EA1: 85 2C        	sta	<L1136+n_sc_1
 27654 08:6EA3: C2 20        	rep	#$20
 27655                        	longa	on
 27656                        ;		for (n_hd = 8; n_hd != 0 && sz_drv32 / n
                    _hd / n_sc > 1024; n_hd *= 2);
 27657                        	.line	6558
 27658 08:6EA5: E2 20        	sep	#$20
 27659                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 526


 27660 08:6EA7: A9 08        	lda	#$8
 27661 08:6EA9: 85 2A        	sta	<L1136+n_hd_1
 27662 08:6EAB: C2 20        	rep	#$20
 27663                        	longa	on
 27664 08:6EAD: 82 06 00     	brl	L10668
 27665                        L10667:
 27666                        	.line	6558
 27667                        L10665:
 27668 08:6EB0: E2 20        	sep	#$20
 27669                        	longa	off
 27670 08:6EB2: 06 2A        	asl	<L1136+n_hd_1
 27671 08:6EB4: C2 20        	rep	#$20
 27672                        	longa	on
 27673                        L10668:
 27674 08:6EB6: A5 2A        	lda	<L1136+n_hd_1
 27675 08:6EB8: 29 FF 00     	and	#$ff
 27676 08:6EBB: D0 03        	bne	L1141
 27677 08:6EBD: 82 41 00     	brl	L1140
 27678                        L1141:
 27679 08:6EC0: A5 2C        	lda	<L1136+n_sc_1
 27680 08:6EC2: 29 FF 00     	and	#$ff
 27681 08:6EC5: 85 01        	sta	<R0
 27682 08:6EC7: 64 03        	stz	<R0+2
 27683 08:6EC9: A5 2A        	lda	<L1136+n_hd_1
 27684 08:6ECB: 29 FF 00     	and	#$ff
 27685 08:6ECE: 85 05        	sta	<R1
 27686 08:6ED0: 64 07        	stz	<R1+2
 27687 08:6ED2: D4 07        	pei	<R1+2
 27688 08:6ED4: D4 05        	pei	<R1
 27689 08:6ED6: D4 1B        	pei	<L1136+sz_drv32_1+2
 27690 08:6ED8: D4 19        	pei	<L1136+sz_drv32_1
 27691                        	xref	~~~ludv
 27692 08:6EDA: 22 xx xx xx  	jsl	~~~ludv
 27693 08:6EDE: 85 05        	sta	<R1
 27694 08:6EE0: 86 07        	stx	<R1+2
 27695 08:6EE2: D4 03        	pei	<R0+2
 27696 08:6EE4: D4 01        	pei	<R0
 27697 08:6EE6: D4 07        	pei	<R1+2
 27698 08:6EE8: D4 05        	pei	<R1
 27699                        	xref	~~~ludv
 27700 08:6EEA: 22 xx xx xx  	jsl	~~~ludv
 27701 08:6EEE: 85 01        	sta	<R0
 27702 08:6EF0: 86 03        	stx	<R0+2
 27703 08:6EF2: A9 00 04     	lda	#$400
 27704 08:6EF5: C5 01        	cmp	<R0
 27705 08:6EF7: A9 00 00     	lda	#$0
 27706 08:6EFA: E5 03        	sbc	<R0+2
 27707 08:6EFC: B0 03        	bcs	L1142
 27708 08:6EFE: 82 AF FF     	brl	L10667
 27709                        L1142:
 27710                        L1140:
 27711                        L10666:
 27712                        ;		if (n_hd == 0) n_hd = 255; /* Number of 
                    heads needs to be <256 */
 27713                        	.line	6559
 27714 08:6F01: A5 2A        	lda	<L1136+n_hd_1
 27715 08:6F03: 29 FF 00     	and	#$ff
 27716 08:6F06: F0 03        	beq	L1143
  Sat Jul 10 2021  1:15                                                Page 527


 27717 08:6F08: 82 08 00     	brl	L10669
 27718                        L1143:
 27719                        	.line	6559
 27720 08:6F0B: E2 20        	sep	#$20
 27721                        	longa	off
 27722 08:6F0D: A9 FF        	lda	#$ff
 27723 08:6F0F: 85 2A        	sta	<L1136+n_hd_1
 27724 08:6F11: C2 20        	rep	#$20
 27725                        	longa	on
 27726                        ;
 27727                        ;		mem_set(buf, 0, FF_MAX_SS); /* Clear MBR
                     */
 27728                        L10669:
 27729                        	.line	6561
 27730 08:6F13: F4 00 02     	pea	#<$200
 27731 08:6F16: F4 00 00     	pea	#<$0
 27732 08:6F19: D4 3A        	pei	<L1135+buf_0+2
 27733 08:6F1B: D4 38        	pei	<L1135+buf_0
 27734 08:6F1D: 22 DF 01 08  	jsl	~~mem_set
 27735                        ;		pte = buf + MBR_Table; /* Partition tabl
                    e in the MBR */
 27736                        	.line	6562
 27737 08:6F21: 18           	clc
 27738 08:6F22: A9 BE 01     	lda	#$1be
 27739 08:6F25: 65 38        	adc	<L1135+buf_0
 27740 08:6F27: 85 25        	sta	<L1136+pte_1
 27741 08:6F29: A9 00 00     	lda	#$0
 27742 08:6F2C: 65 3A        	adc	<L1135+buf_0+2
 27743 08:6F2E: 85 27        	sta	<L1136+pte_1+2
 27744                        ;		for (i = 0, s_lba32 = n_sc; i < 4 && s_l
                    ba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32)
 27745                        	.line	6563
 27746 08:6F30: 64 11        	stz	<L1136+i_1
 27747 08:6F32: A5 2C        	lda	<L1136+n_sc_1
 27748 08:6F34: 29 FF 00     	and	#$ff
 27749 08:6F37: 85 1D        	sta	<L1136+s_lba32_1
 27750 08:6F39: 64 1F        	stz	<L1136+s_lba32_1+2
 27751 08:6F3B: 82 25 03     	brl	L10673
 27752                        L10672:
 27753                        ;		{
 27754                        	.line	6564
 27755                        ;			n_lba32 = (DWORD)plst[i]; /* Get
                     partition size */
 27756                        	.line	6565
 27757 08:6F3E: A5 11        	lda	<L1136+i_1
 27758 08:6F40: 85 05        	sta	<R1
 27759 08:6F42: 64 07        	stz	<R1+2
 27760 08:6F44: D4 07        	pei	<R1+2
 27761 08:6F46: D4 05        	pei	<R1
 27762 08:6F48: A9 02 00     	lda	#$2
 27763                        	xref	~~~lasl
 27764 08:6F4B: 22 xx xx xx  	jsl	~~~lasl
 27765 08:6F4F: 85 01        	sta	<R0
 27766 08:6F51: 86 03        	stx	<R0+2
 27767 08:6F53: 18           	clc
 27768 08:6F54: A5 32        	lda	<L1135+plst_0
 27769 08:6F56: 65 01        	adc	<R0
 27770 08:6F58: 85 09        	sta	<R2
  Sat Jul 10 2021  1:15                                                Page 528


 27771 08:6F5A: A5 34        	lda	<L1135+plst_0+2
 27772 08:6F5C: 65 03        	adc	<R0+2
 27773 08:6F5E: 85 0B        	sta	<R2+2
 27774 08:6F60: A7 09        	lda	[<R2]
 27775 08:6F62: 85 21        	sta	<L1136+n_lba32_1
 27776 08:6F64: A0 02 00     	ldy	#$2
 27777 08:6F67: B7 09        	lda	[<R2],Y
 27778 08:6F69: 85 23        	sta	<L1136+n_lba32_1+2
 27779                        ;			if (n_lba32 <= 100) n_lba32 = (n
                    _lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32; /* Siz
                    e in percentage? */
 27780                        	.line	6566
 27781 08:6F6B: A9 64 00     	lda	#$64
 27782 08:6F6E: C5 21        	cmp	<L1136+n_lba32_1
 27783 08:6F70: A9 00 00     	lda	#$0
 27784 08:6F73: E5 23        	sbc	<L1136+n_lba32_1+2
 27785 08:6F75: B0 03        	bcs	L1144
 27786 08:6F77: 82 49 00     	brl	L10674
 27787                        L1144:
 27788                        	.line	6566
 27789 08:6F7A: A5 21        	lda	<L1136+n_lba32_1
 27790 08:6F7C: C9 64 00     	cmp	#<$64
 27791 08:6F7F: D0 05        	bne	L1146
 27792 08:6F81: A5 23        	lda	<L1136+n_lba32_1+2
 27793 08:6F83: C9 00 00     	cmp	#^$64
 27794                        L1146:
 27795 08:6F86: F0 03        	beq	L1147
 27796 08:6F88: 82 06 00     	brl	L1145
 27797                        L1147:
 27798 08:6F8B: A6 1B        	ldx	<L1136+sz_drv32_1+2
 27799 08:6F8D: A5 19        	lda	<L1136+sz_drv32_1
 27800 08:6F8F: 80 26        	bra	L1148
 27801                        L1145:
 27802 08:6F91: F4 00 00     	pea	#^$64
 27803 08:6F94: F4 64 00     	pea	#<$64
 27804 08:6F97: D4 1B        	pei	<L1136+sz_drv32_1+2
 27805 08:6F99: D4 19        	pei	<L1136+sz_drv32_1
 27806                        	xref	~~~ludv
 27807 08:6F9B: 22 xx xx xx  	jsl	~~~ludv
 27808 08:6F9F: 85 01        	sta	<R0
 27809 08:6FA1: 86 03        	stx	<R0+2
 27810 08:6FA3: D4 23        	pei	<L1136+n_lba32_1+2
 27811 08:6FA5: D4 21        	pei	<L1136+n_lba32_1
 27812 08:6FA7: D4 03        	pei	<R0+2
 27813 08:6FA9: D4 01        	pei	<R0
 27814                        	xref	~~~lmul
 27815 08:6FAB: 22 xx xx xx  	jsl	~~~lmul
 27816 08:6FAF: 85 01        	sta	<R0
 27817 08:6FB1: 86 03        	stx	<R0+2
 27818 08:6FB3: A6 03        	ldx	<R0+2
 27819 08:6FB5: A5 01        	lda	<R0
 27820                        L1148:
 27821 08:6FB7: 85 01        	sta	<R0
 27822 08:6FB9: 86 03        	stx	<R0+2
 27823 08:6FBB: A5 01        	lda	<R0
 27824 08:6FBD: 85 21        	sta	<L1136+n_lba32_1
 27825 08:6FBF: A5 03        	lda	<R0+2
 27826 08:6FC1: 85 23        	sta	<L1136+n_lba32_1+2
  Sat Jul 10 2021  1:15                                                Page 529


 27827                        ;			if (s_lba32 + n_lba32 > sz_drv32
                     || s_lba32 + n_lba32 < s_lba32) n_lba32 = sz_drv32 - s_lba3
                    2; /* Clip at drive size */
 27828                        L10674:
 27829                        	.line	6567
 27830 08:6FC3: 18           	clc
 27831 08:6FC4: A5 1D        	lda	<L1136+s_lba32_1
 27832 08:6FC6: 65 21        	adc	<L1136+n_lba32_1
 27833 08:6FC8: 85 01        	sta	<R0
 27834 08:6FCA: A5 1F        	lda	<L1136+s_lba32_1+2
 27835 08:6FCC: 65 23        	adc	<L1136+n_lba32_1+2
 27836 08:6FCE: 85 03        	sta	<R0+2
 27837 08:6FD0: A5 19        	lda	<L1136+sz_drv32_1
 27838 08:6FD2: C5 01        	cmp	<R0
 27839 08:6FD4: A5 1B        	lda	<L1136+sz_drv32_1+2
 27840 08:6FD6: E5 03        	sbc	<R0+2
 27841 08:6FD8: B0 03        	bcs	L1150
 27842 08:6FDA: 82 1A 00     	brl	L1149
 27843                        L1150:
 27844 08:6FDD: 18           	clc
 27845 08:6FDE: A5 1D        	lda	<L1136+s_lba32_1
 27846 08:6FE0: 65 21        	adc	<L1136+n_lba32_1
 27847 08:6FE2: 85 01        	sta	<R0
 27848 08:6FE4: A5 1F        	lda	<L1136+s_lba32_1+2
 27849 08:6FE6: 65 23        	adc	<L1136+n_lba32_1+2
 27850 08:6FE8: 85 03        	sta	<R0+2
 27851 08:6FEA: A5 01        	lda	<R0
 27852 08:6FEC: C5 1D        	cmp	<L1136+s_lba32_1
 27853 08:6FEE: A5 03        	lda	<R0+2
 27854 08:6FF0: E5 1F        	sbc	<L1136+s_lba32_1+2
 27855 08:6FF2: 90 03        	bcc	L1151
 27856 08:6FF4: 82 0D 00     	brl	L10675
 27857                        L1151:
 27858                        L1149:
 27859                        	.line	6567
 27860 08:6FF7: 38           	sec
 27861 08:6FF8: A5 19        	lda	<L1136+sz_drv32_1
 27862 08:6FFA: E5 1D        	sbc	<L1136+s_lba32_1
 27863 08:6FFC: 85 21        	sta	<L1136+n_lba32_1
 27864 08:6FFE: A5 1B        	lda	<L1136+sz_drv32_1+2
 27865 08:7000: E5 1F        	sbc	<L1136+s_lba32_1+2
 27866 08:7002: 85 23        	sta	<L1136+n_lba32_1+2
 27867                        ;			if (n_lba32 == 0) break; /* End 
                    of table or no sector to allocate? */
 27868                        L10675:
 27869                        	.line	6568
 27870 08:7004: A5 21        	lda	<L1136+n_lba32_1
 27871 08:7006: 05 23        	ora	<L1136+n_lba32_1+2
 27872 08:7008: D0 03        	bne	L1152
 27873 08:700A: 82 76 02     	brl	L10671
 27874                        L1152:
 27875                        ;
 27876                        ;			st_dword(pte + PTE_StLba, s_lba3
                    2); /* Start LBA */
 27877                        	.line	6570
 27878 08:700D: D4 1F        	pei	<L1136+s_lba32_1+2
 27879 08:700F: D4 1D        	pei	<L1136+s_lba32_1
 27880 08:7011: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 530


 27881 08:7012: A9 08 00     	lda	#$8
 27882 08:7015: 65 25        	adc	<L1136+pte_1
 27883 08:7017: 85 01        	sta	<R0
 27884 08:7019: A9 00 00     	lda	#$0
 27885 08:701C: 65 27        	adc	<L1136+pte_1+2
 27886 08:701E: 85 03        	sta	<R0+2
 27887 08:7020: D4 03        	pei	<R0+2
 27888 08:7022: D4 01        	pei	<R0
 27889 08:7024: 22 16 01 08  	jsl	~~st_dword
 27890                        ;			st_dword(pte + PTE_SizLba, n_lba
                    32); /* Number of sectors */
 27891                        	.line	6571
 27892 08:7028: D4 23        	pei	<L1136+n_lba32_1+2
 27893 08:702A: D4 21        	pei	<L1136+n_lba32_1
 27894 08:702C: 18           	clc
 27895 08:702D: A9 0C 00     	lda	#$c
 27896 08:7030: 65 25        	adc	<L1136+pte_1
 27897 08:7032: 85 01        	sta	<R0
 27898 08:7034: A9 00 00     	lda	#$0
 27899 08:7037: 65 27        	adc	<L1136+pte_1+2
 27900 08:7039: 85 03        	sta	<R0+2
 27901 08:703B: D4 03        	pei	<R0+2
 27902 08:703D: D4 01        	pei	<R0
 27903 08:703F: 22 16 01 08  	jsl	~~st_dword
 27904                        ;			pte[PTE_System] = (BYTE)sys; /* 
                    System type */
 27905                        	.line	6572
 27906 08:7043: E2 20        	sep	#$20
 27907                        	longa	off
 27908 08:7045: A5 36        	lda	<L1135+sys_0
 27909 08:7047: A0 04 00     	ldy	#$4
 27910 08:704A: 97 25        	sta	[<L1136+pte_1],Y
 27911 08:704C: C2 20        	rep	#$20
 27912                        	longa	on
 27913                        ;
 27914                        ;			cy = (UINT)(s_lba32 / n_sc / n_h
                    d); /* Start cylinder */
 27915                        	.line	6574
 27916 08:704E: A5 2A        	lda	<L1136+n_hd_1
 27917 08:7050: 29 FF 00     	and	#$ff
 27918 08:7053: 85 01        	sta	<R0
 27919 08:7055: 64 03        	stz	<R0+2
 27920 08:7057: A5 2C        	lda	<L1136+n_sc_1
 27921 08:7059: 29 FF 00     	and	#$ff
 27922 08:705C: 85 05        	sta	<R1
 27923 08:705E: 64 07        	stz	<R1+2
 27924 08:7060: D4 07        	pei	<R1+2
 27925 08:7062: D4 05        	pei	<R1
 27926 08:7064: D4 1F        	pei	<L1136+s_lba32_1+2
 27927 08:7066: D4 1D        	pei	<L1136+s_lba32_1
 27928                        	xref	~~~ludv
 27929 08:7068: 22 xx xx xx  	jsl	~~~ludv
 27930 08:706C: 85 05        	sta	<R1
 27931 08:706E: 86 07        	stx	<R1+2
 27932 08:7070: D4 03        	pei	<R0+2
 27933 08:7072: D4 01        	pei	<R0
 27934 08:7074: D4 07        	pei	<R1+2
 27935 08:7076: D4 05        	pei	<R1
  Sat Jul 10 2021  1:15                                                Page 531


 27936                        	xref	~~~ludv
 27937 08:7078: 22 xx xx xx  	jsl	~~~ludv
 27938 08:707C: 85 01        	sta	<R0
 27939 08:707E: 86 03        	stx	<R0+2
 27940 08:7080: A5 01        	lda	<R0
 27941 08:7082: 85 13        	sta	<L1136+cy_1
 27942                        ;			hd = (BYTE)(s_lba32 / n_sc % n_h
                    d); /* Start head */
 27943                        	.line	6575
 27944 08:7084: A5 2A        	lda	<L1136+n_hd_1
 27945 08:7086: 29 FF 00     	and	#$ff
 27946 08:7089: 85 01        	sta	<R0
 27947 08:708B: 64 03        	stz	<R0+2
 27948 08:708D: A5 2C        	lda	<L1136+n_sc_1
 27949 08:708F: 29 FF 00     	and	#$ff
 27950 08:7092: 85 05        	sta	<R1
 27951 08:7094: 64 07        	stz	<R1+2
 27952 08:7096: D4 07        	pei	<R1+2
 27953 08:7098: D4 05        	pei	<R1
 27954 08:709A: D4 1F        	pei	<L1136+s_lba32_1+2
 27955 08:709C: D4 1D        	pei	<L1136+s_lba32_1
 27956                        	xref	~~~ludv
 27957 08:709E: 22 xx xx xx  	jsl	~~~ludv
 27958 08:70A2: 85 05        	sta	<R1
 27959 08:70A4: 86 07        	stx	<R1+2
 27960 08:70A6: D4 03        	pei	<R0+2
 27961 08:70A8: D4 01        	pei	<R0
 27962 08:70AA: D4 07        	pei	<R1+2
 27963 08:70AC: D4 05        	pei	<R1
 27964                        	xref	~~~lumd
 27965 08:70AE: 22 xx xx xx  	jsl	~~~lumd
 27966 08:70B2: 85 01        	sta	<R0
 27967 08:70B4: 86 03        	stx	<R0+2
 27968 08:70B6: E2 20        	sep	#$20
 27969                        	longa	off
 27970 08:70B8: A5 01        	lda	<R0
 27971 08:70BA: 85 29        	sta	<L1136+hd_1
 27972 08:70BC: C2 20        	rep	#$20
 27973                        	longa	on
 27974                        ;			sc = (BYTE)(s_lba32 % n_sc + 1);
                     /* Start sector */
 27975                        	.line	6576
 27976 08:70BE: A5 2C        	lda	<L1136+n_sc_1
 27977 08:70C0: 29 FF 00     	and	#$ff
 27978 08:70C3: 85 01        	sta	<R0
 27979 08:70C5: 64 03        	stz	<R0+2
 27980 08:70C7: D4 03        	pei	<R0+2
 27981 08:70C9: D4 01        	pei	<R0
 27982 08:70CB: D4 1F        	pei	<L1136+s_lba32_1+2
 27983 08:70CD: D4 1D        	pei	<L1136+s_lba32_1
 27984                        	xref	~~~lumd
 27985 08:70CF: 22 xx xx xx  	jsl	~~~lumd
 27986 08:70D3: 85 01        	sta	<R0
 27987 08:70D5: 86 03        	stx	<R0+2
 27988 08:70D7: 18           	clc
 27989 08:70D8: A9 01 00     	lda	#$1
 27990 08:70DB: 65 01        	adc	<R0
 27991 08:70DD: 85 05        	sta	<R1
  Sat Jul 10 2021  1:15                                                Page 532


 27992 08:70DF: A9 00 00     	lda	#$0
 27993 08:70E2: 65 03        	adc	<R0+2
 27994 08:70E4: 85 07        	sta	<R1+2
 27995 08:70E6: E2 20        	sep	#$20
 27996                        	longa	off
 27997 08:70E8: A5 05        	lda	<R1
 27998 08:70EA: 85 2B        	sta	<L1136+sc_1
 27999 08:70EC: C2 20        	rep	#$20
 28000                        	longa	on
 28001                        ;			pte[PTE_StHead] = hd;
 28002                        	.line	6577
 28003 08:70EE: E2 20        	sep	#$20
 28004                        	longa	off
 28005 08:70F0: A5 29        	lda	<L1136+hd_1
 28006 08:70F2: A0 01 00     	ldy	#$1
 28007 08:70F5: 97 25        	sta	[<L1136+pte_1],Y
 28008 08:70F7: C2 20        	rep	#$20
 28009                        	longa	on
 28010                        ;			pte[PTE_StSec] = (BYTE)((cy >> 2
                     & 0xC0) | sc);
 28011                        	.line	6578
 28012 08:70F9: A5 13        	lda	<L1136+cy_1
 28013 08:70FB: 4A           	lsr	A
 28014 08:70FC: 4A           	lsr	A
 28015 08:70FD: 29 C0 00     	and	#<$c0
 28016 08:7100: 85 01        	sta	<R0
 28017 08:7102: A5 2B        	lda	<L1136+sc_1
 28018 08:7104: 29 FF 00     	and	#$ff
 28019 08:7107: 85 05        	sta	<R1
 28020 08:7109: A5 05        	lda	<R1
 28021 08:710B: 05 01        	ora	<R0
 28022 08:710D: E2 20        	sep	#$20
 28023                        	longa	off
 28024 08:710F: A0 02 00     	ldy	#$2
 28025 08:7112: 97 25        	sta	[<L1136+pte_1],Y
 28026 08:7114: C2 20        	rep	#$20
 28027                        	longa	on
 28028                        ;			pte[PTE_StCyl] = (BYTE)cy;
 28029                        	.line	6579
 28030 08:7116: E2 20        	sep	#$20
 28031                        	longa	off
 28032 08:7118: A5 13        	lda	<L1136+cy_1
 28033 08:711A: A0 03 00     	ldy	#$3
 28034 08:711D: 97 25        	sta	[<L1136+pte_1],Y
 28035 08:711F: C2 20        	rep	#$20
 28036                        	longa	on
 28037                        ;
 28038                        ;			cy = (UINT)((s_lba32 + n_lba32 -
                     1) / n_sc / n_hd); /* End cylinder */
 28039                        	.line	6581
 28040 08:7121: A5 2A        	lda	<L1136+n_hd_1
 28041 08:7123: 29 FF 00     	and	#$ff
 28042 08:7126: 85 01        	sta	<R0
 28043 08:7128: 64 03        	stz	<R0+2
 28044 08:712A: A5 2C        	lda	<L1136+n_sc_1
 28045 08:712C: 29 FF 00     	and	#$ff
 28046 08:712F: 85 05        	sta	<R1
 28047 08:7131: 64 07        	stz	<R1+2
  Sat Jul 10 2021  1:15                                                Page 533


 28048 08:7133: 18           	clc
 28049 08:7134: A5 1D        	lda	<L1136+s_lba32_1
 28050 08:7136: 65 21        	adc	<L1136+n_lba32_1
 28051 08:7138: 85 09        	sta	<R2
 28052 08:713A: A5 1F        	lda	<L1136+s_lba32_1+2
 28053 08:713C: 65 23        	adc	<L1136+n_lba32_1+2
 28054 08:713E: 85 0B        	sta	<R2+2
 28055 08:7140: 18           	clc
 28056 08:7141: A9 FF FF     	lda	#$ffff
 28057 08:7144: 65 09        	adc	<R2
 28058 08:7146: 85 0D        	sta	<R3
 28059 08:7148: A9 FF FF     	lda	#$ffff
 28060 08:714B: 65 0B        	adc	<R2+2
 28061 08:714D: 85 0F        	sta	<R3+2
 28062 08:714F: D4 07        	pei	<R1+2
 28063 08:7151: D4 05        	pei	<R1
 28064 08:7153: D4 0F        	pei	<R3+2
 28065 08:7155: D4 0D        	pei	<R3
 28066                        	xref	~~~ludv
 28067 08:7157: 22 xx xx xx  	jsl	~~~ludv
 28068 08:715B: 85 05        	sta	<R1
 28069 08:715D: 86 07        	stx	<R1+2
 28070 08:715F: D4 03        	pei	<R0+2
 28071 08:7161: D4 01        	pei	<R0
 28072 08:7163: D4 07        	pei	<R1+2
 28073 08:7165: D4 05        	pei	<R1
 28074                        	xref	~~~ludv
 28075 08:7167: 22 xx xx xx  	jsl	~~~ludv
 28076 08:716B: 85 01        	sta	<R0
 28077 08:716D: 86 03        	stx	<R0+2
 28078 08:716F: A5 01        	lda	<R0
 28079 08:7171: 85 13        	sta	<L1136+cy_1
 28080                        ;			hd = (BYTE)((s_lba32 + n_lba32 -
                     1) / n_sc % n_hd); /* End head */
 28081                        	.line	6582
 28082 08:7173: A5 2A        	lda	<L1136+n_hd_1
 28083 08:7175: 29 FF 00     	and	#$ff
 28084 08:7178: 85 01        	sta	<R0
 28085 08:717A: 64 03        	stz	<R0+2
 28086 08:717C: A5 2C        	lda	<L1136+n_sc_1
 28087 08:717E: 29 FF 00     	and	#$ff
 28088 08:7181: 85 05        	sta	<R1
 28089 08:7183: 64 07        	stz	<R1+2
 28090 08:7185: 18           	clc
 28091 08:7186: A5 1D        	lda	<L1136+s_lba32_1
 28092 08:7188: 65 21        	adc	<L1136+n_lba32_1
 28093 08:718A: 85 09        	sta	<R2
 28094 08:718C: A5 1F        	lda	<L1136+s_lba32_1+2
 28095 08:718E: 65 23        	adc	<L1136+n_lba32_1+2
 28096 08:7190: 85 0B        	sta	<R2+2
 28097 08:7192: 18           	clc
 28098 08:7193: A9 FF FF     	lda	#$ffff
 28099 08:7196: 65 09        	adc	<R2
 28100 08:7198: 85 0D        	sta	<R3
 28101 08:719A: A9 FF FF     	lda	#$ffff
 28102 08:719D: 65 0B        	adc	<R2+2
 28103 08:719F: 85 0F        	sta	<R3+2
 28104 08:71A1: D4 07        	pei	<R1+2
  Sat Jul 10 2021  1:15                                                Page 534


 28105 08:71A3: D4 05        	pei	<R1
 28106 08:71A5: D4 0F        	pei	<R3+2
 28107 08:71A7: D4 0D        	pei	<R3
 28108                        	xref	~~~ludv
 28109 08:71A9: 22 xx xx xx  	jsl	~~~ludv
 28110 08:71AD: 85 05        	sta	<R1
 28111 08:71AF: 86 07        	stx	<R1+2
 28112 08:71B1: D4 03        	pei	<R0+2
 28113 08:71B3: D4 01        	pei	<R0
 28114 08:71B5: D4 07        	pei	<R1+2
 28115 08:71B7: D4 05        	pei	<R1
 28116                        	xref	~~~lumd
 28117 08:71B9: 22 xx xx xx  	jsl	~~~lumd
 28118 08:71BD: 85 01        	sta	<R0
 28119 08:71BF: 86 03        	stx	<R0+2
 28120 08:71C1: E2 20        	sep	#$20
 28121                        	longa	off
 28122 08:71C3: A5 01        	lda	<R0
 28123 08:71C5: 85 29        	sta	<L1136+hd_1
 28124 08:71C7: C2 20        	rep	#$20
 28125                        	longa	on
 28126                        ;			sc = (BYTE)((s_lba32 + n_lba32 -
                     1) % n_sc + 1); /* End sector */
 28127                        	.line	6583
 28128 08:71C9: A5 2C        	lda	<L1136+n_sc_1
 28129 08:71CB: 29 FF 00     	and	#$ff
 28130 08:71CE: 85 01        	sta	<R0
 28131 08:71D0: 64 03        	stz	<R0+2
 28132 08:71D2: 18           	clc
 28133 08:71D3: A5 1D        	lda	<L1136+s_lba32_1
 28134 08:71D5: 65 21        	adc	<L1136+n_lba32_1
 28135 08:71D7: 85 05        	sta	<R1
 28136 08:71D9: A5 1F        	lda	<L1136+s_lba32_1+2
 28137 08:71DB: 65 23        	adc	<L1136+n_lba32_1+2
 28138 08:71DD: 85 07        	sta	<R1+2
 28139 08:71DF: 18           	clc
 28140 08:71E0: A9 FF FF     	lda	#$ffff
 28141 08:71E3: 65 05        	adc	<R1
 28142 08:71E5: 85 09        	sta	<R2
 28143 08:71E7: A9 FF FF     	lda	#$ffff
 28144 08:71EA: 65 07        	adc	<R1+2
 28145 08:71EC: 85 0B        	sta	<R2+2
 28146 08:71EE: D4 03        	pei	<R0+2
 28147 08:71F0: D4 01        	pei	<R0
 28148 08:71F2: D4 0B        	pei	<R2+2
 28149 08:71F4: D4 09        	pei	<R2
 28150                        	xref	~~~lumd
 28151 08:71F6: 22 xx xx xx  	jsl	~~~lumd
 28152 08:71FA: 85 01        	sta	<R0
 28153 08:71FC: 86 03        	stx	<R0+2
 28154 08:71FE: 18           	clc
 28155 08:71FF: A9 01 00     	lda	#$1
 28156 08:7202: 65 01        	adc	<R0
 28157 08:7204: 85 05        	sta	<R1
 28158 08:7206: A9 00 00     	lda	#$0
 28159 08:7209: 65 03        	adc	<R0+2
 28160 08:720B: 85 07        	sta	<R1+2
 28161 08:720D: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 535


 28162                        	longa	off
 28163 08:720F: A5 05        	lda	<R1
 28164 08:7211: 85 2B        	sta	<L1136+sc_1
 28165 08:7213: C2 20        	rep	#$20
 28166                        	longa	on
 28167                        ;			pte[PTE_EdHead] = hd;
 28168                        	.line	6584
 28169 08:7215: E2 20        	sep	#$20
 28170                        	longa	off
 28171 08:7217: A5 29        	lda	<L1136+hd_1
 28172 08:7219: A0 05 00     	ldy	#$5
 28173 08:721C: 97 25        	sta	[<L1136+pte_1],Y
 28174 08:721E: C2 20        	rep	#$20
 28175                        	longa	on
 28176                        ;			pte[PTE_EdSec] = (BYTE)((cy >> 2
                     & 0xC0) | sc);
 28177                        	.line	6585
 28178 08:7220: A5 13        	lda	<L1136+cy_1
 28179 08:7222: 4A           	lsr	A
 28180 08:7223: 4A           	lsr	A
 28181 08:7224: 29 C0 00     	and	#<$c0
 28182 08:7227: 85 01        	sta	<R0
 28183 08:7229: A5 2B        	lda	<L1136+sc_1
 28184 08:722B: 29 FF 00     	and	#$ff
 28185 08:722E: 85 05        	sta	<R1
 28186 08:7230: A5 05        	lda	<R1
 28187 08:7232: 05 01        	ora	<R0
 28188 08:7234: E2 20        	sep	#$20
 28189                        	longa	off
 28190 08:7236: A0 06 00     	ldy	#$6
 28191 08:7239: 97 25        	sta	[<L1136+pte_1],Y
 28192 08:723B: C2 20        	rep	#$20
 28193                        	longa	on
 28194                        ;			pte[PTE_EdCyl] = (BYTE)cy;
 28195                        	.line	6586
 28196 08:723D: E2 20        	sep	#$20
 28197                        	longa	off
 28198 08:723F: A5 13        	lda	<L1136+cy_1
 28199 08:7241: A0 07 00     	ldy	#$7
 28200 08:7244: 97 25        	sta	[<L1136+pte_1],Y
 28201 08:7246: C2 20        	rep	#$20
 28202                        	longa	on
 28203                        ;
 28204                        ;			pte += SZ_PTE; /* Next entry */
 28205                        	.line	6588
 28206 08:7248: 18           	clc
 28207 08:7249: A9 10 00     	lda	#$10
 28208 08:724C: 65 25        	adc	<L1136+pte_1
 28209 08:724E: 85 25        	sta	<L1136+pte_1
 28210 08:7250: 90 02        	bcc	L1153
 28211 08:7252: E6 27        	inc	<L1136+pte_1+2
 28212                        L1153:
 28213                        ;		}
 28214                        	.line	6589
 28215                        L10670:
 28216 08:7254: 18           	clc
 28217 08:7255: A5 1D        	lda	<L1136+s_lba32_1
 28218 08:7257: 65 21        	adc	<L1136+n_lba32_1
  Sat Jul 10 2021  1:15                                                Page 536


 28219 08:7259: 85 1D        	sta	<L1136+s_lba32_1
 28220 08:725B: A5 1F        	lda	<L1136+s_lba32_1+2
 28221 08:725D: 65 23        	adc	<L1136+n_lba32_1+2
 28222 08:725F: 85 1F        	sta	<L1136+s_lba32_1+2
 28223 08:7261: E6 11        	inc	<L1136+i_1
 28224                        L10673:
 28225 08:7263: A5 11        	lda	<L1136+i_1
 28226 08:7265: C9 04 00     	cmp	#<$4
 28227 08:7268: 90 03        	bcc	L1155
 28228 08:726A: 82 16 00     	brl	L1154
 28229                        L1155:
 28230 08:726D: A5 1D        	lda	<L1136+s_lba32_1
 28231 08:726F: 05 1F        	ora	<L1136+s_lba32_1+2
 28232 08:7271: D0 03        	bne	L1156
 28233 08:7273: 82 0D 00     	brl	L1154
 28234                        L1156:
 28235 08:7276: A5 1D        	lda	<L1136+s_lba32_1
 28236 08:7278: C5 19        	cmp	<L1136+sz_drv32_1
 28237 08:727A: A5 1F        	lda	<L1136+s_lba32_1+2
 28238 08:727C: E5 1B        	sbc	<L1136+sz_drv32_1+2
 28239 08:727E: B0 03        	bcs	L1157
 28240 08:7280: 82 BB FC     	brl	L10672
 28241                        L1157:
 28242                        L1154:
 28243                        L10671:
 28244                        ;
 28245                        ;		st_word(buf + BS_55AA, 0xAA55); /* MBR s
                    ignature */
 28246                        	.line	6591
 28247 08:7283: F4 55 AA     	pea	#<$aa55
 28248 08:7286: 18           	clc
 28249 08:7287: A9 FE 01     	lda	#$1fe
 28250 08:728A: 65 38        	adc	<L1135+buf_0
 28251 08:728C: 85 01        	sta	<R0
 28252 08:728E: A9 00 00     	lda	#$0
 28253 08:7291: 65 3A        	adc	<L1135+buf_0+2
 28254 08:7293: 85 03        	sta	<R0+2
 28255 08:7295: D4 03        	pei	<R0+2
 28256 08:7297: D4 01        	pei	<R0
 28257 08:7299: 22 D7 00 08  	jsl	~~st_word
 28258                        ;		if (disk_write(drv, buf, 0, 1) != RES_OK
                    ) return FR_DISK_ERR; /* Write it to the MBR */
 28259                        	.line	6592
 28260 08:729D: F4 01 00     	pea	#<$1
 28261 08:72A0: F4 00 00     	pea	#^$0
 28262 08:72A3: F4 00 00     	pea	#<$0
 28263 08:72A6: D4 3A        	pei	<L1135+buf_0+2
 28264 08:72A8: D4 38        	pei	<L1135+buf_0
 28265 08:72AA: D4 30        	pei	<L1135+drv_0
 28266 08:72AC: 22 xx xx xx  	jsl	~~disk_write
 28267 08:72B0: AA           	tax
 28268 08:72B1: D0 03        	bne	L1158
 28269 08:72B3: 82 06 00     	brl	L10676
 28270                        L1158:
 28271                        	.line	6592
 28272 08:72B6: A9 01 00     	lda	#$1
 28273 08:72B9: 82 C7 FB     	brl	L1139
 28274                        ;	}
  Sat Jul 10 2021  1:15                                                Page 537


 28275                        L10676:
 28276                        	.line	6593
 28277                        ;
 28278                        ;	return FR_OK;
 28279                        	.line	6595
 28280 08:72BC: A9 00 00     	lda	#$0
 28281 08:72BF: 82 C1 FB     	brl	L1139
 28282                        ;}
 28283                        	.line	6596
 28284                        	.endblock	6596
 28285             0000002C   L1135	equ	44
 28286             00000011   L1136	equ	17
 28287 08:72C2:              	ends
 28288                        	efunc
 28289                        	.endfunc	6596,17,44
 28290                        	.line	6596
 28291                        ;
 28292                        ;FRESULT f_mkfs (
 28293                        ;		const TCHAR* path, /* Logical drive numb
                    er */
 28294                        ;		const MKFS_PARM* opt, /* Format options 
                    */
 28295                        ;		void* work, /* Pointer to working buffer
                     (null: use heap memory) */
 28296                        ;		UINT len /* Size of working buffer [byte
                    ] */
 28297                        ;)
 28298                        ;{
 28299                        	.line	6598
 28300                        	.line	6604
 28301                        	FFDOS
 28302                        	xdef	~~f_mkfs
 28303                        	func
 28304                        	.function	6604
 28305                        ~~f_mkfs:
 28306                        	longa	on
 28307                        	longi	on
 28308 08:72C2: 3B           	tsc
 28309 08:72C3: 38           	sec
 28310 08:72C4: E9 6E 00     	sbc	#L1159
 28311 08:72C7: 1B           	tcs
 28312 08:72C8: 0B           	phd
 28313 08:72C9: 5B           	tcd
 28314             00000004   path_0	set	4
 28315             00000008   opt_0	set	8
 28316             0000000C   work_0	set	12
 28317             00000010   len_0	set	16
 28318                        	.block	6604
 28319                        ;	static const WORD cst[] =
 28320                        	data
 28321                        L1162:
 28322                        ;	{	1, 4, 16, 64, 256, 512, 0}; /* Cluster s
                    ize boundary for FAT volume (4Ks unit) */
 28323 00:01B7: 01 00 04 00  	dw	$1,$4,$10,$40,$100,$200,$0
       00:01BB: 10 00 40 00 
       00:01BF: 00 01 00 02 
       00:01C3: 00 00 
 28324 00:01C5:              	ends
  Sat Jul 10 2021  1:15                                                Page 538


 28325                        ;	static const WORD cst32[] =
 28326                        	data
 28327                        L1163:
 28328                        ;	{	1, 2, 4, 8, 16, 32, 0}; /* Cluster size 
                    boundary for FAT32 volume (128Ks unit) */
 28329 00:01C5: 01 00 02 00  	dw	$1,$2,$4,$8,$10,$20,$0
       00:01C9: 04 00 08 00 
       00:01CD: 10 00 20 00 
       00:01D1: 00 00 
 28330 00:01D3:              	ends
 28331                        ;	static const MKFS_PARM defopt =
 28332                        	data
 28333                        L1164:
 28334                        ;	{	FM_ANY, 0, 0, 0, 0}; /* Default paramete
                    r */
 28335 00:01D3: 07 00        	db	$7,$0
 28336 00:01D5: 00 00 00 00  	dw	$0,$0
 28337 00:01D9: 00 00 00 00  	dl	$0
 28338 00:01DD:              	ends
 28339                        ;	BYTE fsopt, fsty, sys, *buf, *pte, pdrv, ipart;
 28340                        ;	WORD ss; /* Sector size */
 28341                        ;	DWORD sz_buf, sz_blk, n_clst, pau, nsect, n;
 28342                        ;	LBA_t sz_vol, b_vol, b_fat, b_data; /* Size of v
                    olume, Base LBA of volume, fat, data */
 28343                        ;	LBA_t sect, lba[2];
 28344                        ;	DWORD sz_rsv, sz_fat, sz_dir, sz_au; /* Size of 
                    reserved, fat, dir, data, cluster */
 28345                        ;	UINT n_fat, n_root, i; /* Index, Number of FATs 
                    and Number of roor dir entries */
 28346                        ;	int vol;
 28347                        ;	DSTATUS ds;
 28348                        ;	FRESULT fr;
 28349                        ;
 28350                        ;	/* Check mounted drive and clear work area */
 28351                        ;	vol = get_ldnumber(&path); /* Get target logical
                     drive */
 28352             00000000   fsopt_1	set	0
 28353             00000001   fsty_1	set	1
 28354             00000002   sys_1	set	2
 28355             00000003   buf_1	set	3
 28356             00000007   pte_1	set	7
 28357             0000000B   pdrv_1	set	11
 28358             0000000C   ipart_1	set	12
 28359             0000000D   ss_1	set	13
 28360             0000000F   sz_buf_1	set	15
 28361             00000013   sz_blk_1	set	19
 28362             00000017   n_clst_1	set	23
 28363             0000001B   pau_1	set	27
 28364             0000001F   nsect_1	set	31
 28365             00000023   n_1	set	35
 28366             00000027   sz_vol_1	set	39
 28367             0000002B   b_vol_1	set	43
 28368             0000002F   b_fat_1	set	47
 28369             00000033   b_data_1	set	51
 28370             00000037   sect_1	set	55
 28371             0000003B   lba_1	set	59
 28372             00000043   sz_rsv_1	set	67
 28373             00000047   sz_fat_1	set	71
  Sat Jul 10 2021  1:15                                                Page 539


 28374             0000004B   sz_dir_1	set	75
 28375             0000004F   sz_au_1	set	79
 28376             00000053   n_fat_1	set	83
 28377             00000055   n_root_1	set	85
 28378             00000057   i_1	set	87
 28379             00000059   vol_1	set	89
 28380             0000005B   ds_1	set	91
 28381             0000005C   fr_1	set	92
 28382                        	.sym	cst,1162,101,19,0,7
 28383                        	.sym	cst32,1163,101,19,0,7
 28384                        	.sym	defopt,1164,10,19,80,77
 28385                        	.sym	fsopt,0,14,1,8
 28386                        	.sym	fsty,1,14,1,8
 28387                        	.sym	sys,2,14,1,8
 28388                        	.sym	buf,3,142,1,32
 28389                        	.sym	pte,7,142,1,32
 28390                        	.sym	pdrv,11,14,1,8
 28391                        	.sym	ipart,12,14,1,8
 28392                        	.sym	ss,13,5,1,16
 28393                        	.sym	sz_buf,15,18,1,32
 28394                        	.sym	sz_blk,19,18,1,32
 28395                        	.sym	n_clst,23,18,1,32
 28396                        	.sym	pau,27,18,1,32
 28397                        	.sym	nsect,31,18,1,32
 28398                        	.sym	n,35,18,1,32
 28399                        	.sym	sz_vol,39,18,1,32
 28400                        	.sym	b_vol,43,18,1,32
 28401                        	.sym	b_fat,47,18,1,32
 28402                        	.sym	b_data,51,18,1,32
 28403                        	.sym	sect,55,18,1,32
 28404                        	.sym	lba,59,114,1,0,2
 28405                        	.sym	sz_rsv,67,18,1,32
 28406                        	.sym	sz_fat,71,18,1,32
 28407                        	.sym	sz_dir,75,18,1,32
 28408                        	.sym	sz_au,79,18,1,32
 28409                        	.sym	n_fat,83,16,1,16
 28410                        	.sym	n_root,85,16,1,16
 28411                        	.sym	i,87,16,1,16
 28412                        	.sym	vol,89,5,1,16
 28413                        	.sym	ds,91,14,1,8
 28414                        	.sym	fr,92,5,1,16
 28415                        	.sym	path,4,142,6,32
 28416                        	.sym	opt,8,138,6,32,77
 28417                        	.sym	work,12,129,6,32
 28418                        	.sym	len,16,16,6,16
 28419                        	.line	6623
 28420 08:72CA: F4 00 00     	pea	#0
 28421 08:72CD: 18           	clc
 28422 08:72CE: 7B           	tdc
 28423 08:72CF: 69 72 00     	adc	#<L1159+path_0
 28424 08:72D2: 48           	pha
 28425 08:72D3: 22 A0 38 08  	jsl	~~get_ldnumber
 28426 08:72D7: 85 6A        	sta	<L1160+vol_1
 28427                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 28428                        	.line	6624
 28429 08:72D9: A5 6A        	lda	<L1160+vol_1
 28430 08:72DB: 30 03        	bmi	L1165
 28431 08:72DD: 82 15 00     	brl	L10677
  Sat Jul 10 2021  1:15                                                Page 540


 28432                        L1165:
 28433                        	.line	6624
 28434 08:72E0: A9 0B 00     	lda	#$b
 28435                        L1166:
 28436 08:72E3: A8           	tay
 28437 08:72E4: A5 70        	lda	<L1159+2
 28438 08:72E6: 85 7E        	sta	<L1159+2+14
 28439 08:72E8: A5 6F        	lda	<L1159+1
 28440 08:72EA: 85 7D        	sta	<L1159+1+14
 28441 08:72EC: 2B           	pld
 28442 08:72ED: 3B           	tsc
 28443 08:72EE: 18           	clc
 28444 08:72EF: 69 7C 00     	adc	#L1159+14
 28445 08:72F2: 1B           	tcs
 28446 08:72F3: 98           	tya
 28447 08:72F4: 6B           	rtl
 28448                        ;	if (FatFs[vol]) FatFs[vol]->fs_type = 0; /* Clea
                    r the fs object if mounted */
 28449                        L10677:
 28450                        	.line	6625
 28451 08:72F5: A5 6A        	lda	<L1160+vol_1
 28452 08:72F7: 0A           	asl	A
 28453 08:72F8: 0A           	asl	A
 28454 08:72F9: 85 01        	sta	<R0
 28455 08:72FB: 18           	clc
 28456 08:72FC: A9 xx xx     	lda	#<~~FatFs
 28457 08:72FF: 65 01        	adc	<R0
 28458 08:7301: 85 05        	sta	<R1
 28459 08:7303: B2 05        	lda	(<R1)
 28460 08:7305: A0 02 00     	ldy	#$2
 28461 08:7308: 11 05        	ora	(<R1),Y
 28462 08:730A: D0 03        	bne	L1167
 28463 08:730C: 82 21 00     	brl	L10678
 28464                        L1167:
 28465                        	.line	6625
 28466 08:730F: A5 6A        	lda	<L1160+vol_1
 28467 08:7311: 0A           	asl	A
 28468 08:7312: 0A           	asl	A
 28469 08:7313: 85 01        	sta	<R0
 28470 08:7315: 18           	clc
 28471 08:7316: A9 xx xx     	lda	#<~~FatFs
 28472 08:7319: 65 01        	adc	<R0
 28473 08:731B: 85 05        	sta	<R1
 28474 08:731D: B2 05        	lda	(<R1)
 28475 08:731F: 85 01        	sta	<R0
 28476 08:7321: A0 02 00     	ldy	#$2
 28477 08:7324: B1 05        	lda	(<R1),Y
 28478 08:7326: 85 03        	sta	<R0+2
 28479 08:7328: E2 20        	sep	#$20
 28480                        	longa	off
 28481 08:732A: A9 00        	lda	#$0
 28482 08:732C: 87 01        	sta	[<R0]
 28483 08:732E: C2 20        	rep	#$20
 28484                        	longa	on
 28485                        ;	pdrv = LD2PD(vol); /* Physical drive */
 28486                        L10678:
 28487                        	.line	6626
 28488 08:7330: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 541


 28489                        	longa	off
 28490 08:7332: A5 6A        	lda	<L1160+vol_1
 28491 08:7334: 85 1C        	sta	<L1160+pdrv_1
 28492 08:7336: C2 20        	rep	#$20
 28493                        	longa	on
 28494                        ;	ipart = LD2PT(vol); /* Partition (0:create as ne
                    w, 1..:get from partition table) */
 28495                        	.line	6627
 28496 08:7338: E2 20        	sep	#$20
 28497                        	longa	off
 28498 08:733A: 64 1D        	stz	<L1160+ipart_1
 28499 08:733C: C2 20        	rep	#$20
 28500                        	longa	on
 28501                        ;	if (!opt) opt = &defopt; /* Use default paramete
                    r if it is not given */
 28502                        	.line	6628
 28503 08:733E: A5 76        	lda	<L1159+opt_0
 28504 08:7340: 05 78        	ora	<L1159+opt_0+2
 28505 08:7342: F0 03        	beq	L1168
 28506 08:7344: 82 0A 00     	brl	L10679
 28507                        L1168:
 28508                        	.line	6628
 28509 08:7347: A9 xx xx     	lda	#<L1164
 28510 08:734A: 85 76        	sta	<L1159+opt_0
 28511                        	xref	_BEG_DATA
 28512 08:734C: A9 xx xx     	lda	#_BEG_DATA>>16
 28513 08:734F: 85 78        	sta	<L1159+opt_0+2
 28514                        ;
 28515                        ;	/* Get physical drive status (sz_drv, sz_blk, ss
                    ) */
 28516                        ;	ds = disk_initialize(pdrv);
 28517                        L10679:
 28518                        	.line	6631
 28519 08:7351: D4 1C        	pei	<L1160+pdrv_1
 28520 08:7353: 22 xx xx xx  	jsl	~~disk_initialize
 28521 08:7357: E2 20        	sep	#$20
 28522                        	longa	off
 28523 08:7359: 85 6C        	sta	<L1160+ds_1
 28524 08:735B: C2 20        	rep	#$20
 28525                        	longa	on
 28526                        ;	if (ds & STA_NOINIT) return FR_NOT_READY;
 28527                        	.line	6632
 28528 08:735D: E2 20        	sep	#$20
 28529                        	longa	off
 28530 08:735F: A5 6C        	lda	<L1160+ds_1
 28531 08:7361: 29 01        	and	#<$1
 28532 08:7363: C2 20        	rep	#$20
 28533                        	longa	on
 28534 08:7365: D0 03        	bne	L1169
 28535 08:7367: 82 06 00     	brl	L10680
 28536                        L1169:
 28537                        	.line	6632
 28538 08:736A: A9 03 00     	lda	#$3
 28539 08:736D: 82 73 FF     	brl	L1166
 28540                        ;	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 28541                        L10680:
 28542                        	.line	6633
 28543 08:7370: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 542


 28544                        	longa	off
 28545 08:7372: A5 6C        	lda	<L1160+ds_1
 28546 08:7374: 29 04        	and	#<$4
 28547 08:7376: C2 20        	rep	#$20
 28548                        	longa	on
 28549 08:7378: D0 03        	bne	L1170
 28550 08:737A: 82 06 00     	brl	L10681
 28551                        L1170:
 28552                        	.line	6633
 28553 08:737D: A9 0A 00     	lda	#$a
 28554 08:7380: 82 60 FF     	brl	L1166
 28555                        ;	sz_blk = opt->align;
 28556                        L10681:
 28557                        	.line	6634
 28558 08:7383: A0 02 00     	ldy	#$2
 28559 08:7386: B7 76        	lda	[<L1159+opt_0],Y
 28560 08:7388: 85 24        	sta	<L1160+sz_blk_1
 28561 08:738A: 64 26        	stz	<L1160+sz_blk_1+2
 28562                        ;	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SI
                    ZE, &sz_blk) != RES_OK) sz_blk = 1;
 28563                        	.line	6635
 28564 08:738C: A5 24        	lda	<L1160+sz_blk_1
 28565 08:738E: 05 26        	ora	<L1160+sz_blk_1+2
 28566 08:7390: F0 03        	beq	L1171
 28567 08:7392: 82 22 00     	brl	L10682
 28568                        L1171:
 28569 08:7395: F4 00 00     	pea	#0
 28570 08:7398: 18           	clc
 28571 08:7399: 7B           	tdc
 28572 08:739A: 69 24 00     	adc	#<L1160+sz_blk_1
 28573 08:739D: 48           	pha
 28574 08:739E: F4 03 00     	pea	#<$3
 28575 08:73A1: D4 1C        	pei	<L1160+pdrv_1
 28576 08:73A3: 22 xx xx xx  	jsl	~~disk_ioctl
 28577 08:73A7: AA           	tax
 28578 08:73A8: D0 03        	bne	L1172
 28579 08:73AA: 82 0A 00     	brl	L10682
 28580                        L1172:
 28581                        	.line	6635
 28582 08:73AD: A9 01 00     	lda	#$1
 28583 08:73B0: 85 24        	sta	<L1160+sz_blk_1
 28584 08:73B2: A9 00 00     	lda	#$0
 28585 08:73B5: 85 26        	sta	<L1160+sz_blk_1+2
 28586                        ;	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & 
                    (sz_blk - 1))) sz_blk = 1;
 28587                        L10682:
 28588                        	.line	6636
 28589 08:73B7: A5 24        	lda	<L1160+sz_blk_1
 28590 08:73B9: 05 26        	ora	<L1160+sz_blk_1+2
 28591 08:73BB: D0 03        	bne	L1174
 28592 08:73BD: 82 33 00     	brl	L1173
 28593                        L1174:
 28594 08:73C0: A9 00 80     	lda	#$8000
 28595 08:73C3: C5 24        	cmp	<L1160+sz_blk_1
 28596 08:73C5: A9 00 00     	lda	#$0
 28597 08:73C8: E5 26        	sbc	<L1160+sz_blk_1+2
 28598 08:73CA: B0 03        	bcs	L1175
 28599 08:73CC: 82 24 00     	brl	L1173
  Sat Jul 10 2021  1:15                                                Page 543


 28600                        L1175:
 28601 08:73CF: 18           	clc
 28602 08:73D0: A9 FF FF     	lda	#$ffff
 28603 08:73D3: 65 24        	adc	<L1160+sz_blk_1
 28604 08:73D5: 85 01        	sta	<R0
 28605 08:73D7: A9 FF FF     	lda	#$ffff
 28606 08:73DA: 65 26        	adc	<L1160+sz_blk_1+2
 28607 08:73DC: 85 03        	sta	<R0+2
 28608 08:73DE: A5 24        	lda	<L1160+sz_blk_1
 28609 08:73E0: 25 01        	and	<R0
 28610 08:73E2: 85 05        	sta	<R1
 28611 08:73E4: A5 26        	lda	<L1160+sz_blk_1+2
 28612 08:73E6: 25 03        	and	<R0+2
 28613 08:73E8: 85 07        	sta	<R1+2
 28614 08:73EA: A5 05        	lda	<R1
 28615 08:73EC: 05 07        	ora	<R1+2
 28616 08:73EE: D0 03        	bne	L1176
 28617 08:73F0: 82 0A 00     	brl	L10683
 28618                        L1176:
 28619                        L1173:
 28620                        	.line	6636
 28621 08:73F3: A9 01 00     	lda	#$1
 28622 08:73F6: 85 24        	sta	<L1160+sz_blk_1
 28623 08:73F8: A9 00 00     	lda	#$0
 28624 08:73FB: 85 26        	sta	<L1160+sz_blk_1+2
 28625                        ;#if FF_MAX_SS != FF_MIN_SS
 28626                        ;	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RE
                    S_OK) return FR_DISK_ERR;
 28627                        ;	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (s
                    s - 1))) return FR_DISK_ERR;
 28628                        ;#else
 28629                        ;	ss = FF_MAX_SS;
 28630                        L10683:
 28631                        	.line	6641
 28632 08:73FD: A9 00 02     	lda	#$200
 28633 08:7400: 85 1E        	sta	<L1160+ss_1
 28634                        ;#endif
 28635                        ;	/* Options for FAT sub-type and FAT parameters *
                    /
 28636                        ;	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 28637                        	.line	6644
 28638 08:7402: E2 20        	sep	#$20
 28639                        	longa	off
 28640 08:7404: A7 76        	lda	[<L1159+opt_0]
 28641 08:7406: 29 0F        	and	#<$f
 28642 08:7408: 85 11        	sta	<L1160+fsopt_1
 28643 08:740A: C2 20        	rep	#$20
 28644                        	longa	on
 28645                        ;	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? o
                    pt->n_fat : 1;
 28646                        	.line	6645
 28647 08:740C: E2 20        	sep	#$20
 28648                        	longa	off
 28649 08:740E: A0 01 00     	ldy	#$1
 28650 08:7411: B7 76        	lda	[<L1159+opt_0],Y
 28651 08:7413: C9 01        	cmp	#<$1
 28652 08:7415: C2 20        	rep	#$20
 28653                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 544


 28654 08:7417: B0 03        	bcs	L1178
 28655 08:7419: 82 1A 00     	brl	L1177
 28656                        L1178:
 28657 08:741C: E2 20        	sep	#$20
 28658                        	longa	off
 28659 08:741E: A9 02        	lda	#$2
 28660 08:7420: A0 01 00     	ldy	#$1
 28661 08:7423: D7 76        	cmp	[<L1159+opt_0],Y
 28662 08:7425: C2 20        	rep	#$20
 28663                        	longa	on
 28664 08:7427: B0 03        	bcs	L1179
 28665 08:7429: 82 0A 00     	brl	L1177
 28666                        L1179:
 28667 08:742C: A0 01 00     	ldy	#$1
 28668 08:742F: B7 76        	lda	[<L1159+opt_0],Y
 28669 08:7431: 29 FF 00     	and	#$ff
 28670 08:7434: 80 03        	bra	L1180
 28671                        L1177:
 28672 08:7436: A9 01 00     	lda	#$1
 28673                        L1180:
 28674 08:7439: 85 64        	sta	<L1160+n_fat_1
 28675                        ;	n_root = (opt->n_root >= 1 && opt->n_root <= 327
                    68 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 51
                    2;
 28676                        	.line	6646
 28677 08:743B: A0 04 00     	ldy	#$4
 28678 08:743E: B7 76        	lda	[<L1159+opt_0],Y
 28679 08:7440: C9 01 00     	cmp	#<$1
 28680 08:7443: B0 03        	bcs	L1182
 28681 08:7445: 82 41 00     	brl	L1181
 28682                        L1182:
 28683 08:7448: A0 04 00     	ldy	#$4
 28684 08:744B: B7 76        	lda	[<L1159+opt_0],Y
 28685 08:744D: 85 01        	sta	<R0
 28686 08:744F: 64 03        	stz	<R0+2
 28687 08:7451: 38           	sec
 28688 08:7452: A9 00 80     	lda	#$8000
 28689 08:7455: E5 01        	sbc	<R0
 28690 08:7457: A9 00 00     	lda	#$0
 28691 08:745A: E5 03        	sbc	<R0+2
 28692 08:745C: 70 03        	bvs	L1183
 28693 08:745E: 49 00 80     	eor	#$8000
 28694                        L1183:
 28695 08:7461: 30 03        	bmi	L1184
 28696 08:7463: 82 23 00     	brl	L1181
 28697                        L1184:
 28698 08:7466: A5 1E        	lda	<L1160+ss_1
 28699 08:7468: A2 20 00     	ldx	#<$20
 28700                        	xref	~~~div
 28701 08:746B: 22 xx xx xx  	jsl	~~~div
 28702 08:746F: 85 01        	sta	<R0
 28703 08:7471: A0 04 00     	ldy	#$4
 28704 08:7474: B7 76        	lda	[<L1159+opt_0],Y
 28705 08:7476: A6 01        	ldx	<R0
 28706                        	xref	~~~umd
 28707 08:7478: 22 xx xx xx  	jsl	~~~umd
 28708 08:747C: AA           	tax
 28709 08:747D: F0 03        	beq	L1185
  Sat Jul 10 2021  1:15                                                Page 545


 28710 08:747F: 82 07 00     	brl	L1181
 28711                        L1185:
 28712 08:7482: A0 04 00     	ldy	#$4
 28713 08:7485: B7 76        	lda	[<L1159+opt_0],Y
 28714 08:7487: 80 03        	bra	L1186
 28715                        L1181:
 28716 08:7489: A9 00 02     	lda	#$200
 28717                        L1186:
 28718 08:748C: 85 66        	sta	<L1160+n_root_1
 28719                        ;	sz_au = (opt->au_size <= 0x1000000 && (opt->au_s
                    ize & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 28720                        	.line	6647
 28721 08:748E: A9 00 00     	lda	#$0
 28722 08:7491: A0 06 00     	ldy	#$6
 28723 08:7494: D7 76        	cmp	[<L1159+opt_0],Y
 28724 08:7496: A9 00 01     	lda	#$100
 28725 08:7499: A0 08 00     	ldy	#$8
 28726 08:749C: F7 76        	sbc	[<L1159+opt_0],Y
 28727 08:749E: B0 03        	bcs	L1188
 28728 08:74A0: 82 3D 00     	brl	L1187
 28729                        L1188:
 28730 08:74A3: 18           	clc
 28731 08:74A4: A9 FF FF     	lda	#$ffff
 28732 08:74A7: A0 06 00     	ldy	#$6
 28733 08:74AA: 77 76        	adc	[<L1159+opt_0],Y
 28734 08:74AC: 85 01        	sta	<R0
 28735 08:74AE: A9 FF FF     	lda	#$ffff
 28736 08:74B1: A0 08 00     	ldy	#$8
 28737 08:74B4: 77 76        	adc	[<L1159+opt_0],Y
 28738 08:74B6: 85 03        	sta	<R0+2
 28739 08:74B8: A0 06 00     	ldy	#$6
 28740 08:74BB: B7 76        	lda	[<L1159+opt_0],Y
 28741 08:74BD: 25 01        	and	<R0
 28742 08:74BF: 85 05        	sta	<R1
 28743 08:74C1: A0 08 00     	ldy	#$8
 28744 08:74C4: B7 76        	lda	[<L1159+opt_0],Y
 28745 08:74C6: 25 03        	and	<R0+2
 28746 08:74C8: 85 07        	sta	<R1+2
 28747 08:74CA: A5 05        	lda	<R1
 28748 08:74CC: 05 07        	ora	<R1+2
 28749 08:74CE: F0 03        	beq	L1189
 28750 08:74D0: 82 0D 00     	brl	L1187
 28751                        L1189:
 28752 08:74D3: A0 08 00     	ldy	#$8
 28753 08:74D6: B7 76        	lda	[<L1159+opt_0],Y
 28754 08:74D8: AA           	tax
 28755 08:74D9: A0 06 00     	ldy	#$6
 28756 08:74DC: B7 76        	lda	[<L1159+opt_0],Y
 28757 08:74DE: 80 07        	bra	L1190
 28758                        L1187:
 28759 08:74E0: A9 00 00     	lda	#$0
 28760 08:74E3: AA           	tax
 28761 08:74E4: A9 00 00     	lda	#$0
 28762                        L1190:
 28763 08:74E7: 85 01        	sta	<R0
 28764 08:74E9: 86 03        	stx	<R0+2
 28765 08:74EB: A5 01        	lda	<R0
 28766 08:74ED: 85 60        	sta	<L1160+sz_au_1
  Sat Jul 10 2021  1:15                                                Page 546


 28767 08:74EF: A5 03        	lda	<R0+2
 28768 08:74F1: 85 62        	sta	<L1160+sz_au_1+2
 28769                        ;	sz_au /= ss; /* Byte --> Sector */
 28770                        	.line	6648
 28771 08:74F3: A0 00 00     	ldy	#$0
 28772 08:74F6: A5 1E        	lda	<L1160+ss_1
 28773 08:74F8: 10 01        	bpl	L1191
 28774 08:74FA: 88           	dey
 28775                        L1191:
 28776 08:74FB: 85 01        	sta	<R0
 28777 08:74FD: 84 03        	sty	<R0+2
 28778 08:74FF: D4 03        	pei	<R0+2
 28779 08:7501: D4 01        	pei	<R0
 28780 08:7503: D4 62        	pei	<L1160+sz_au_1+2
 28781 08:7505: D4 60        	pei	<L1160+sz_au_1
 28782                        	xref	~~~ludv
 28783 08:7507: 22 xx xx xx  	jsl	~~~ludv
 28784 08:750B: 85 60        	sta	<L1160+sz_au_1
 28785 08:750D: 86 62        	stx	<L1160+sz_au_1+2
 28786                        ;
 28787                        ;	/* Get working buffer */
 28788                        ;	sz_buf = len / ss; /* Size of working buffer [se
                    ctor] */
 28789                        	.line	6651
 28790 08:750F: A5 7E        	lda	<L1159+len_0
 28791 08:7511: A6 1E        	ldx	<L1160+ss_1
 28792                        	xref	~~~udv
 28793 08:7513: 22 xx xx xx  	jsl	~~~udv
 28794 08:7517: 85 01        	sta	<R0
 28795 08:7519: A5 01        	lda	<R0
 28796 08:751B: 85 20        	sta	<L1160+sz_buf_1
 28797 08:751D: 64 22        	stz	<L1160+sz_buf_1+2
 28798                        ;	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 28799                        	.line	6652
 28800 08:751F: A5 20        	lda	<L1160+sz_buf_1
 28801 08:7521: 05 22        	ora	<L1160+sz_buf_1+2
 28802 08:7523: F0 03        	beq	L1192
 28803 08:7525: 82 06 00     	brl	L10684
 28804                        L1192:
 28805                        	.line	6652
 28806 08:7528: A9 11 00     	lda	#$11
 28807 08:752B: 82 B5 FD     	brl	L1166
 28808                        ;	buf = (BYTE*)work; /* Working buffer */
 28809                        L10684:
 28810                        	.line	6653
 28811 08:752E: A5 7A        	lda	<L1159+work_0
 28812 08:7530: 85 14        	sta	<L1160+buf_1
 28813 08:7532: A5 7C        	lda	<L1159+work_0+2
 28814 08:7534: 85 16        	sta	<L1160+buf_1+2
 28815                        ;#if FF_USE_LFN == 3
 28816                        ;	if (!buf) buf = ff_memalloc(sz_buf * ss); /* Use
                     heap memory for working buffer */
 28817                        	.line	6655
 28818 08:7536: A5 14        	lda	<L1160+buf_1
 28819 08:7538: 05 16        	ora	<L1160+buf_1+2
 28820 08:753A: F0 03        	beq	L1193
 28821 08:753C: 82 26 00     	brl	L10685
 28822                        L1193:
  Sat Jul 10 2021  1:15                                                Page 547


 28823                        	.line	6655
 28824 08:753F: A0 00 00     	ldy	#$0
 28825 08:7542: A5 1E        	lda	<L1160+ss_1
 28826 08:7544: 10 01        	bpl	L1194
 28827 08:7546: 88           	dey
 28828                        L1194:
 28829 08:7547: 85 01        	sta	<R0
 28830 08:7549: 84 03        	sty	<R0+2
 28831 08:754B: D4 22        	pei	<L1160+sz_buf_1+2
 28832 08:754D: D4 20        	pei	<L1160+sz_buf_1
 28833 08:754F: D4 03        	pei	<R0+2
 28834 08:7551: D4 01        	pei	<R0
 28835                        	xref	~~~lmul
 28836 08:7553: 22 xx xx xx  	jsl	~~~lmul
 28837 08:7557: 85 01        	sta	<R0
 28838 08:7559: 86 03        	stx	<R0+2
 28839 08:755B: D4 01        	pei	<R0
 28840 08:755D: 22 AB 92 08  	jsl	~~ff_memalloc
 28841 08:7561: 85 14        	sta	<L1160+buf_1
 28842 08:7563: 86 16        	stx	<L1160+buf_1+2
 28843                        ;#endif
 28844                        ;	if (!buf) return FR_NOT_ENOUGH_CORE;
 28845                        L10685:
 28846                        	.line	6657
 28847 08:7565: A5 14        	lda	<L1160+buf_1
 28848 08:7567: 05 16        	ora	<L1160+buf_1+2
 28849 08:7569: F0 03        	beq	L1195
 28850 08:756B: 82 06 00     	brl	L10686
 28851                        L1195:
 28852                        	.line	6657
 28853 08:756E: A9 11 00     	lda	#$11
 28854 08:7571: 82 6F FD     	brl	L1166
 28855                        ;
 28856                        ;	/* Determine where the volume to be located (b_v
                    ol, sz_vol) */
 28857                        ;	b_vol = sz_vol = 0;
 28858                        L10686:
 28859                        	.line	6660
 28860 08:7574: 64 38        	stz	<L1160+sz_vol_1
 28861 08:7576: 64 3A        	stz	<L1160+sz_vol_1+2
 28862 08:7578: 64 3C        	stz	<L1160+b_vol_1
 28863 08:757A: 64 3E        	stz	<L1160+b_vol_1+2
 28864                        ;	if (FF_MULTI_PARTITION && ipart != 0)
 28865                        	.line	6661
 28866                        ;	{ /* Is the volume associated with any specific 
                    partition? */
 28867 08:757C: 82 0E 01     	brl	L10687
 28868 08:757F: A5 1D        	lda	<L1160+ipart_1
 28869 08:7581: 29 FF 00     	and	#$ff
 28870 08:7584: D0 03        	bne	L1196
 28871 08:7586: 82 04 01     	brl	L10687
 28872                        L1196:
 28873                        	.line	6662
 28874                        ;		/* Get partition location from the exist
                    ing partition table */
 28875                        ;		if (disk_read(pdrv, buf, 0, 1) != RES_OK
                    ) LEAVE_MKFS(FR_DISK_ERR); /* Load MBR */
 28876                        	.line	6664
  Sat Jul 10 2021  1:15                                                Page 548


 28877 08:7589: F4 01 00     	pea	#<$1
 28878 08:758C: F4 00 00     	pea	#^$0
 28879 08:758F: F4 00 00     	pea	#<$0
 28880 08:7592: D4 16        	pei	<L1160+buf_1+2
 28881 08:7594: D4 14        	pei	<L1160+buf_1
 28882 08:7596: D4 1C        	pei	<L1160+pdrv_1
 28883 08:7598: 22 xx xx xx  	jsl	~~disk_read
 28884 08:759C: AA           	tax
 28885 08:759D: D0 03        	bne	L1197
 28886 08:759F: 82 17 00     	brl	L10688
 28887                        L1197:
 28888                        	.line	6664
 28889                        	.line	6664
 28890 08:75A2: A5 7A        	lda	<L1159+work_0
 28891 08:75A4: 05 7C        	ora	<L1159+work_0+2
 28892 08:75A6: F0 03        	beq	L1198
 28893 08:75A8: 82 08 00     	brl	L10689
 28894                        L1198:
 28895                        	.line	6664
 28896 08:75AB: D4 16        	pei	<L1160+buf_1+2
 28897 08:75AD: D4 14        	pei	<L1160+buf_1
 28898 08:75AF: 22 D3 92 08  	jsl	~~ff_memfree
 28899                        L10689:
 28900                        	.line	6664
 28901 08:75B3: A9 01 00     	lda	#$1
 28902 08:75B6: 82 2A FD     	brl	L1166
 28903                        	.line	6664
 28904                        L10688:
 28905                        	.line	6664
 28906                        ;		if (ld_word(buf + BS_55AA) != 0xAA55) LE
                    AVE_MKFS(FR_MKFS_ABORTED); /* Check if MBR is valid */
 28907                        	.line	6665
 28908 08:75B9: 18           	clc
 28909 08:75BA: A9 FE 01     	lda	#$1fe
 28910 08:75BD: 65 14        	adc	<L1160+buf_1
 28911 08:75BF: 85 01        	sta	<R0
 28912 08:75C1: A9 00 00     	lda	#$0
 28913 08:75C4: 65 16        	adc	<L1160+buf_1+2
 28914 08:75C6: 85 03        	sta	<R0+2
 28915 08:75C8: D4 03        	pei	<R0+2
 28916 08:75CA: D4 01        	pei	<R0
 28917 08:75CC: 22 00 00 08  	jsl	~~ld_word
 28918 08:75D0: 85 05        	sta	<R1
 28919 08:75D2: A5 05        	lda	<R1
 28920 08:75D4: C9 55 AA     	cmp	#<$aa55
 28921 08:75D7: D0 03        	bne	L1199
 28922 08:75D9: 82 17 00     	brl	L10690
 28923                        L1199:
 28924                        	.line	6665
 28925                        	.line	6665
 28926 08:75DC: A5 7A        	lda	<L1159+work_0
 28927 08:75DE: 05 7C        	ora	<L1159+work_0+2
 28928 08:75E0: F0 03        	beq	L1200
 28929 08:75E2: 82 08 00     	brl	L10691
 28930                        L1200:
 28931                        	.line	6665
 28932 08:75E5: D4 16        	pei	<L1160+buf_1+2
 28933 08:75E7: D4 14        	pei	<L1160+buf_1
  Sat Jul 10 2021  1:15                                                Page 549


 28934 08:75E9: 22 D3 92 08  	jsl	~~ff_memfree
 28935                        L10691:
 28936                        	.line	6665
 28937 08:75ED: A9 0E 00     	lda	#$e
 28938 08:75F0: 82 F0 FC     	brl	L1166
 28939                        	.line	6665
 28940                        L10690:
 28941                        	.line	6665
 28942                        ;#if FF_LBA64
 28943                        ;		if (buf[MBR_Table + PTE_System] == 0xEE)
 28944                        ;		{ /* GPT protective MBR? */
 28945                        ;			DWORD n_ent, ofs;
 28946                        ;			QWORD pt_lba;
 28947                        ;
 28948                        ;			/* Get the partition location fr
                    om GPT */
 28949                        ;			if (disk_read(pdrv, buf, 1, 1) !
                    = RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Load GPT header sector
                     (next to MBR) */
 28950                        ;			if (!test_gpt_header(buf)) LEAVE
                    _MKFS(FR_MKFS_ABORTED); /* Check if GPT header is valid */
 28951                        ;			n_ent = ld_dword(buf + GPTH_PtNu
                    m); /* Number of entries */
 28952                        ;			pt_lba = ld_qword(buf + GPTH_PtO
                    fs); /* Table start sector */
 28953                        ;			ofs = i = 0;
 28954                        ;			while (n_ent)
 28955                        ;			{ /* Find MS Basic partition wit
                    h order of ipart */
 28956                        ;				if (ofs == 0 && disk_rea
                    d(pdrv, buf, pt_lba++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR)
                    ; /* Get PT sector */
 28957                        ;				if (!mem_cmp(buf + ofs +
                     GPTE_PtGuid, GUID_MS_Basic, 16) && ++i == ipart)
 28958                        ;				{ /* MS basic data parti
                    tion? */
 28959                        ;					b_vol = ld_qword
                    (buf + ofs + GPTE_FstLba);
 28960                        ;					sz_vol = ld_qwor
                    d(buf + ofs + GPTE_LstLba) - b_vol + 1;
 28961                        ;					break;
 28962                        ;				}
 28963                        ;				n_ent--; ofs = (ofs + SZ
                    _GPTE) % ss; /* Next entry */
 28964                        ;			}
 28965                        ;			if (n_ent == 0) LEAVE_MKFS(FR_MK
                    FS_ABORTED); /* Partition not found */
 28966                        ;			fsopt |= 0x80; /* Partitioning i
                    s in GPT */
 28967                        ;		}
 28968                        ;		else
 28969                        ;#endif
 28970                        ;		{ /* Get the partition location from MBR
                     partition table */
 28971                        	.line	6694
 28972                        ;			pte = buf + (MBR_Table + (ipart 
                    - 1) * SZ_PTE);
 28973                        	.line	6695
  Sat Jul 10 2021  1:15                                                Page 550


 28974 08:75F3: A5 1D        	lda	<L1160+ipart_1
 28975 08:75F5: 29 FF 00     	and	#$ff
 28976 08:75F8: 85 05        	sta	<R1
 28977 08:75FA: A5 05        	lda	<R1
 28978 08:75FC: 0A           	asl	A
 28979 08:75FD: 0A           	asl	A
 28980 08:75FE: 0A           	asl	A
 28981 08:75FF: 0A           	asl	A
 28982 08:7600: 85 01        	sta	<R0
 28983 08:7602: 18           	clc
 28984 08:7603: A9 AE 01     	lda	#$1ae
 28985 08:7606: 65 01        	adc	<R0
 28986 08:7608: 85 05        	sta	<R1
 28987 08:760A: A0 00 00     	ldy	#$0
 28988 08:760D: A5 05        	lda	<R1
 28989 08:760F: 10 01        	bpl	L1201
 28990 08:7611: 88           	dey
 28991                        L1201:
 28992 08:7612: 85 01        	sta	<R0
 28993 08:7614: 84 03        	sty	<R0+2
 28994 08:7616: 18           	clc
 28995 08:7617: A5 14        	lda	<L1160+buf_1
 28996 08:7619: 65 01        	adc	<R0
 28997 08:761B: 85 18        	sta	<L1160+pte_1
 28998 08:761D: A5 16        	lda	<L1160+buf_1+2
 28999 08:761F: 65 03        	adc	<R0+2
 29000 08:7621: 85 1A        	sta	<L1160+pte_1+2
 29001                        ;			if (ipart > 4 || pte[PTE_System]
                     == 0) LEAVE_MKFS(FR_MKFS_ABORTED); /* No partition? */
 29002                        	.line	6696
 29003 08:7623: E2 20        	sep	#$20
 29004                        	longa	off
 29005 08:7625: A9 04        	lda	#$4
 29006 08:7627: C5 1D        	cmp	<L1160+ipart_1
 29007 08:7629: C2 20        	rep	#$20
 29008                        	longa	on
 29009 08:762B: B0 03        	bcs	L1203
 29010 08:762D: 82 0D 00     	brl	L1202
 29011                        L1203:
 29012 08:7630: A0 04 00     	ldy	#$4
 29013 08:7633: B7 18        	lda	[<L1160+pte_1],Y
 29014 08:7635: 29 FF 00     	and	#$ff
 29015 08:7638: F0 03        	beq	L1204
 29016 08:763A: 82 17 00     	brl	L10692
 29017                        L1204:
 29018                        L1202:
 29019                        	.line	6696
 29020                        	.line	6696
 29021 08:763D: A5 7A        	lda	<L1159+work_0
 29022 08:763F: 05 7C        	ora	<L1159+work_0+2
 29023 08:7641: F0 03        	beq	L1205
 29024 08:7643: 82 08 00     	brl	L10693
 29025                        L1205:
 29026                        	.line	6696
 29027 08:7646: D4 16        	pei	<L1160+buf_1+2
 29028 08:7648: D4 14        	pei	<L1160+buf_1
 29029 08:764A: 22 D3 92 08  	jsl	~~ff_memfree
 29030                        L10693:
  Sat Jul 10 2021  1:15                                                Page 551


 29031                        	.line	6696
 29032 08:764E: A9 0E 00     	lda	#$e
 29033 08:7651: 82 8F FC     	brl	L1166
 29034                        	.line	6696
 29035                        L10692:
 29036                        	.line	6696
 29037                        ;			b_vol = ld_dword(pte + PTE_StLba
                    ); /* Get volume start sector */
 29038                        	.line	6697
 29039 08:7654: 18           	clc
 29040 08:7655: A9 08 00     	lda	#$8
 29041 08:7658: 65 18        	adc	<L1160+pte_1
 29042 08:765A: 85 01        	sta	<R0
 29043 08:765C: A9 00 00     	lda	#$0
 29044 08:765F: 65 1A        	adc	<L1160+pte_1+2
 29045 08:7661: 85 03        	sta	<R0+2
 29046 08:7663: D4 03        	pei	<R0+2
 29047 08:7665: D4 01        	pei	<R0
 29048 08:7667: 22 3B 00 08  	jsl	~~ld_dword
 29049 08:766B: 85 3C        	sta	<L1160+b_vol_1
 29050 08:766D: 86 3E        	stx	<L1160+b_vol_1+2
 29051                        ;			sz_vol = ld_dword(pte + PTE_SizL
                    ba); /* Get volume size */
 29052                        	.line	6698
 29053 08:766F: 18           	clc
 29054 08:7670: A9 0C 00     	lda	#$c
 29055 08:7673: 65 18        	adc	<L1160+pte_1
 29056 08:7675: 85 01        	sta	<R0
 29057 08:7677: A9 00 00     	lda	#$0
 29058 08:767A: 65 1A        	adc	<L1160+pte_1+2
 29059 08:767C: 85 03        	sta	<R0+2
 29060 08:767E: D4 03        	pei	<R0+2
 29061 08:7680: D4 01        	pei	<R0
 29062 08:7682: 22 3B 00 08  	jsl	~~ld_dword
 29063 08:7686: 85 38        	sta	<L1160+sz_vol_1
 29064 08:7688: 86 3A        	stx	<L1160+sz_vol_1+2
 29065                        ;		}
 29066                        	.line	6699
 29067                        ;	}
 29068                        	.line	6700
 29069                        ;	else
 29070 08:768A: 82 62 00     	brl	L10694
 29071                        L10687:
 29072                        ;	{ /* The volume is associated with a physical dr
                    ive */
 29073                        	.line	6702
 29074                        ;		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &
                    sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29075                        	.line	6703
 29076 08:768D: F4 00 00     	pea	#0
 29077 08:7690: 18           	clc
 29078 08:7691: 7B           	tdc
 29079 08:7692: 69 38 00     	adc	#<L1160+sz_vol_1
 29080 08:7695: 48           	pha
 29081 08:7696: F4 01 00     	pea	#<$1
 29082 08:7699: D4 1C        	pei	<L1160+pdrv_1
 29083 08:769B: 22 xx xx xx  	jsl	~~disk_ioctl
 29084 08:769F: AA           	tax
  Sat Jul 10 2021  1:15                                                Page 552


 29085 08:76A0: D0 03        	bne	L1206
 29086 08:76A2: 82 17 00     	brl	L10695
 29087                        L1206:
 29088                        	.line	6703
 29089                        	.line	6703
 29090 08:76A5: A5 7A        	lda	<L1159+work_0
 29091 08:76A7: 05 7C        	ora	<L1159+work_0+2
 29092 08:76A9: F0 03        	beq	L1207
 29093 08:76AB: 82 08 00     	brl	L10696
 29094                        L1207:
 29095                        	.line	6703
 29096 08:76AE: D4 16        	pei	<L1160+buf_1+2
 29097 08:76B0: D4 14        	pei	<L1160+buf_1
 29098 08:76B2: 22 D3 92 08  	jsl	~~ff_memfree
 29099                        L10696:
 29100                        	.line	6703
 29101 08:76B6: A9 01 00     	lda	#$1
 29102 08:76B9: 82 27 FC     	brl	L1166
 29103                        	.line	6703
 29104                        L10695:
 29105                        	.line	6703
 29106                        ;		if (!(fsopt & FM_SFD))
 29107                        	.line	6704
 29108                        ;		{ /* To be partitioned? */
 29109 08:76BC: E2 20        	sep	#$20
 29110                        	longa	off
 29111 08:76BE: A5 11        	lda	<L1160+fsopt_1
 29112 08:76C0: 29 08        	and	#<$8
 29113 08:76C2: C2 20        	rep	#$20
 29114                        	longa	on
 29115 08:76C4: F0 03        	beq	L1208
 29116 08:76C6: 82 26 00     	brl	L10697
 29117                        L1208:
 29118                        	.line	6705
 29119                        ;			/* Create a single-partition on 
                    the drive in this function */
 29120                        ;#if FF_LBA64
 29121                        ;			if (sz_vol >= FF_MIN_GPT)
 29122                        ;			{ /* Which partition type to cre
                    ate, MBR or GPT? */
 29123                        ;				fsopt |= 0x80; /* Partit
                    ioning is in GPT */
 29124                        ;				b_vol = GPT_ALIGN / ss; 
                    sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1; /* Estimated
                     partition offset and size */
 29125                        ;			}
 29126                        ;			else
 29127                        ;#endif
 29128                        ;			{ /* Partitioning is in MBR */
 29129                        	.line	6715
 29130                        ;				if (sz_vol > N_SEC_TRACK
                    )
 29131                        	.line	6716
 29132                        ;				{
 29133 08:76C9: A9 3F 00     	lda	#$3f
 29134 08:76CC: C5 38        	cmp	<L1160+sz_vol_1
 29135 08:76CE: A9 00 00     	lda	#$0
 29136 08:76D1: E5 3A        	sbc	<L1160+sz_vol_1+2
  Sat Jul 10 2021  1:15                                                Page 553


 29137 08:76D3: 90 03        	bcc	L1209
 29138 08:76D5: 82 17 00     	brl	L10698
 29139                        L1209:
 29140                        	.line	6717
 29141                        ;					b_vol = N_SEC_TR
                    ACK; sz_vol -= b_vol; /* Estimated partition offset and size
                     */
 29142                        	.line	6718
 29143 08:76D8: A9 3F 00     	lda	#$3f
 29144 08:76DB: 85 3C        	sta	<L1160+b_vol_1
 29145 08:76DD: A9 00 00     	lda	#$0
 29146 08:76E0: 85 3E        	sta	<L1160+b_vol_1+2
 29147                        	.line	6718
 29148 08:76E2: 38           	sec
 29149 08:76E3: A5 38        	lda	<L1160+sz_vol_1
 29150 08:76E5: E5 3C        	sbc	<L1160+b_vol_1
 29151 08:76E7: 85 38        	sta	<L1160+sz_vol_1
 29152 08:76E9: A5 3A        	lda	<L1160+sz_vol_1+2
 29153 08:76EB: E5 3E        	sbc	<L1160+b_vol_1+2
 29154 08:76ED: 85 3A        	sta	<L1160+sz_vol_1+2
 29155                        ;				}
 29156                        	.line	6719
 29157                        ;			}
 29158                        L10698:
 29159                        	.line	6720
 29160                        ;		}
 29161                        	.line	6721
 29162                        ;	}
 29163                        L10697:
 29164                        	.line	6722
 29165                        L10694:
 29166                        ;	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED); /
                    * Check if volume size is >=128s */
 29167                        	.line	6723
 29168 08:76EF: A5 38        	lda	<L1160+sz_vol_1
 29169 08:76F1: C9 80 00     	cmp	#<$80
 29170 08:76F4: A5 3A        	lda	<L1160+sz_vol_1+2
 29171 08:76F6: E9 00 00     	sbc	#^$80
 29172 08:76F9: 90 03        	bcc	L1210
 29173 08:76FB: 82 17 00     	brl	L10699
 29174                        L1210:
 29175                        	.line	6723
 29176                        	.line	6723
 29177 08:76FE: A5 7A        	lda	<L1159+work_0
 29178 08:7700: 05 7C        	ora	<L1159+work_0+2
 29179 08:7702: F0 03        	beq	L1211
 29180 08:7704: 82 08 00     	brl	L10700
 29181                        L1211:
 29182                        	.line	6723
 29183 08:7707: D4 16        	pei	<L1160+buf_1+2
 29184 08:7709: D4 14        	pei	<L1160+buf_1
 29185 08:770B: 22 D3 92 08  	jsl	~~ff_memfree
 29186                        L10700:
 29187                        	.line	6723
 29188 08:770F: A9 0E 00     	lda	#$e
 29189 08:7712: 82 CE FB     	brl	L1166
 29190                        	.line	6723
 29191                        L10699:
  Sat Jul 10 2021  1:15                                                Page 554


 29192                        	.line	6723
 29193                        ;
 29194                        ;	/* Now start to create a FAT volume at b_vol and
                     sz_vol */
 29195                        ;
 29196                        ;	do
 29197                        	.line	6727
 29198                        L10703:
 29199                        ;	{ /* Pre-determine the FAT type */
 29200                        	.line	6728
 29201                        ;		if (FF_FS_EXFAT && (fsopt & FM_EXFAT))
 29202                        	.line	6729
 29203                        ;		{ /* exFAT possible? */
 29204 08:7715: 82 47 00     	brl	L10704
 29205 08:7718: E2 20        	sep	#$20
 29206                        	longa	off
 29207 08:771A: A5 11        	lda	<L1160+fsopt_1
 29208 08:771C: 29 04        	and	#<$4
 29209 08:771E: C2 20        	rep	#$20
 29210                        	longa	on
 29211 08:7720: D0 03        	bne	L1212
 29212 08:7722: 82 3A 00     	brl	L10704
 29213                        L1212:
 29214                        	.line	6730
 29215                        ;			if ((fsopt & FM_ANY) == FM_EXFAT
                     || sz_vol >= 0x4000000 || sz_au > 128)
 29216                        	.line	6731
 29217                        ;			{ /* exFAT only, vol >= 64MS or 
                    sz_au > 128S ? */
 29218 08:7725: A5 11        	lda	<L1160+fsopt_1
 29219 08:7727: 29 07 00     	and	#<$7
 29220 08:772A: 85 01        	sta	<R0
 29221 08:772C: A5 01        	lda	<R0
 29222 08:772E: C9 04 00     	cmp	#<$4
 29223 08:7731: D0 03        	bne	L1214
 29224 08:7733: 82 1E 00     	brl	L1213
 29225                        L1214:
 29226 08:7736: A5 38        	lda	<L1160+sz_vol_1
 29227 08:7738: C9 00 00     	cmp	#<$4000000
 29228 08:773B: A5 3A        	lda	<L1160+sz_vol_1+2
 29229 08:773D: E9 00 04     	sbc	#^$4000000
 29230 08:7740: 90 03        	bcc	L1215
 29231 08:7742: 82 0F 00     	brl	L1213
 29232                        L1215:
 29233 08:7745: A9 80 00     	lda	#$80
 29234 08:7748: C5 60        	cmp	<L1160+sz_au_1
 29235 08:774A: A9 00 00     	lda	#$0
 29236 08:774D: E5 62        	sbc	<L1160+sz_au_1+2
 29237 08:774F: 90 03        	bcc	L1216
 29238 08:7751: 82 0B 00     	brl	L10705
 29239                        L1216:
 29240                        L1213:
 29241                        	.line	6732
 29242                        ;				fsty = FS_EXFAT; break;
 29243                        	.line	6733
 29244 08:7754: E2 20        	sep	#$20
 29245                        	longa	off
 29246 08:7756: A9 04        	lda	#$4
  Sat Jul 10 2021  1:15                                                Page 555


 29247 08:7758: 85 12        	sta	<L1160+fsty_1
 29248 08:775A: C2 20        	rep	#$20
 29249                        	longa	on
 29250                        	.line	6733
 29251 08:775C: 82 6A 00     	brl	L10702
 29252                        ;			}
 29253                        	.line	6734
 29254                        ;		}
 29255                        L10705:
 29256                        	.line	6735
 29257                        ;#if FF_LBA64
 29258                        ;		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR
                    _MKFS_ABORTED); /* Too large volume for FAT/FAT32 */
 29259                        ;#endif
 29260                        ;		if (sz_au > 128) sz_au = 128; /* Invalid
                     AU for FAT/FAT32? */
 29261                        L10704:
 29262                        	.line	6739
 29263 08:775F: A9 80 00     	lda	#$80
 29264 08:7762: C5 60        	cmp	<L1160+sz_au_1
 29265 08:7764: A9 00 00     	lda	#$0
 29266 08:7767: E5 62        	sbc	<L1160+sz_au_1+2
 29267 08:7769: 90 03        	bcc	L1217
 29268 08:776B: 82 0A 00     	brl	L10706
 29269                        L1217:
 29270                        	.line	6739
 29271 08:776E: A9 80 00     	lda	#$80
 29272 08:7771: 85 60        	sta	<L1160+sz_au_1
 29273 08:7773: A9 00 00     	lda	#$0
 29274 08:7776: 85 62        	sta	<L1160+sz_au_1+2
 29275                        ;		if (fsopt & FM_FAT32)
 29276                        L10706:
 29277                        	.line	6740
 29278                        ;		{ /* FAT32 possible? */
 29279 08:7778: E2 20        	sep	#$20
 29280                        	longa	off
 29281 08:777A: A5 11        	lda	<L1160+fsopt_1
 29282 08:777C: 29 02        	and	#<$2
 29283 08:777E: C2 20        	rep	#$20
 29284                        	longa	on
 29285 08:7780: D0 03        	bne	L1218
 29286 08:7782: 82 18 00     	brl	L10707
 29287                        L1218:
 29288                        	.line	6741
 29289                        ;			if (!(fsopt & FM_FAT))
 29290                        	.line	6742
 29291                        ;			{ /* no-FAT? */
 29292 08:7785: E2 20        	sep	#$20
 29293                        	longa	off
 29294 08:7787: A5 11        	lda	<L1160+fsopt_1
 29295 08:7789: 29 01        	and	#<$1
 29296 08:778B: C2 20        	rep	#$20
 29297                        	longa	on
 29298 08:778D: F0 03        	beq	L1219
 29299 08:778F: 82 0B 00     	brl	L10708
 29300                        L1219:
 29301                        	.line	6743
 29302                        ;				fsty = FS_FAT32; break;
  Sat Jul 10 2021  1:15                                                Page 556


 29303                        	.line	6744
 29304 08:7792: E2 20        	sep	#$20
 29305                        	longa	off
 29306 08:7794: A9 03        	lda	#$3
 29307 08:7796: 85 12        	sta	<L1160+fsty_1
 29308 08:7798: C2 20        	rep	#$20
 29309                        	longa	on
 29310                        	.line	6744
 29311 08:779A: 82 2C 00     	brl	L10702
 29312                        ;			}
 29313                        	.line	6745
 29314                        ;		}
 29315                        L10708:
 29316                        	.line	6746
 29317                        ;		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INV
                    ALID_PARAMETER); /* no-FAT? */
 29318                        L10707:
 29319                        	.line	6747
 29320 08:779D: E2 20        	sep	#$20
 29321                        	longa	off
 29322 08:779F: A5 11        	lda	<L1160+fsopt_1
 29323 08:77A1: 29 01        	and	#<$1
 29324 08:77A3: C2 20        	rep	#$20
 29325                        	longa	on
 29326 08:77A5: F0 03        	beq	L1220
 29327 08:77A7: 82 17 00     	brl	L10709
 29328                        L1220:
 29329                        	.line	6747
 29330                        	.line	6747
 29331 08:77AA: A5 7A        	lda	<L1159+work_0
 29332 08:77AC: 05 7C        	ora	<L1159+work_0+2
 29333 08:77AE: F0 03        	beq	L1221
 29334 08:77B0: 82 08 00     	brl	L10710
 29335                        L1221:
 29336                        	.line	6747
 29337 08:77B3: D4 16        	pei	<L1160+buf_1+2
 29338 08:77B5: D4 14        	pei	<L1160+buf_1
 29339 08:77B7: 22 D3 92 08  	jsl	~~ff_memfree
 29340                        L10710:
 29341                        	.line	6747
 29342 08:77BB: A9 13 00     	lda	#$13
 29343 08:77BE: 82 22 FB     	brl	L1166
 29344                        	.line	6747
 29345                        L10709:
 29346                        	.line	6747
 29347                        ;		fsty = FS_FAT16;
 29348                        	.line	6748
 29349 08:77C1: E2 20        	sep	#$20
 29350                        	longa	off
 29351 08:77C3: A9 02        	lda	#$2
 29352 08:77C5: 85 12        	sta	<L1160+fsty_1
 29353 08:77C7: C2 20        	rep	#$20
 29354                        	longa	on
 29355                        ;	}while (0);
 29356                        	.line	6749
 29357                        L10701:
 29358                        L10702:
 29359                        ;
  Sat Jul 10 2021  1:15                                                Page 557


 29360                        ;#if FF_FS_EXFAT
 29361                        ;	if (fsty == FS_EXFAT)
 29362                        ;	{ /* Create an exFAT volume */
 29363                        ;		DWORD szb_bit, szb_case, sum, nb, cl, tb
                    l[3];
 29364                        ;		WCHAR ch, si;
 29365                        ;		UINT j, st;
 29366                        ;		BYTE b;
 29367                        ;
 29368                        ;		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_
                    ABORTED); /* Too small volume for exFAT? */
 29369                        ;#if FF_USE_TRIM
 29370                        ;		lba[0] = b_vol; lba[1] = b_vol + sz_vol 
                    - 1; /* Inform storage device that the volume area may be er
                    ased */
 29371                        ;		disk_ioctl(pdrv, CTRL_TRIM, lba);
 29372                        ;#endif
 29373                        ;		/* Determine FAT location, data location
                     and number of clusters */
 29374                        ;		if (sz_au == 0)
 29375                        ;		{ /* AU auto-selection */
 29376                        ;			sz_au = 8;
 29377                        ;			if (sz_vol >= 0x80000) sz_au = 6
                    4; /* >= 512Ks */
 29378                        ;			if (sz_vol >= 0x4000000) sz_au =
                     256; /* >= 64Ms */
 29379                        ;		}
 29380                        ;		b_fat = b_vol + 32; /* FAT start at offs
                    et 32 */
 29381                        ;		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 
                    4 + ss - 1) / ss; /* Number of FAT sectors */
 29382                        ;		b_data = (b_fat + sz_fat + sz_blk - 1) &
                     ~((LBA_t)sz_blk - 1); /* Align data area to the erase block
                     boundary */
 29383                        ;		if (b_data - b_vol >= sz_vol / 2) LEAVE_
                    MKFS(FR_MKFS_ABORTED); /* Too small volume? */
 29384                        ;		n_clst = (DWORD)(sz_vol - (b_data - b_vo
                    l)) / sz_au; /* Number of clusters */
 29385                        ;		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORT
                    ED); /* Too few clusters? */
 29386                        ;		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MK
                    FS_ABORTED); /* Too many clusters? */
 29387                        ;
 29388                        ;		szb_bit = (n_clst + 7) / 8; /* Size of a
                    llocation bitmap */
 29389                        ;		tbl[0] = (szb_bit + sz_au * ss - 1) / (s
                    z_au * ss); /* Number of allocation bitmap clusters */
 29390                        ;
 29391                        ;		/* Create a compressed up-case table */
 29392                        ;		sect = b_data + sz_au * tbl[0]; /* Table
                     start sector */
 29393                        ;		sum = 0; /* Table checksum to be stored 
                    in the 82 entry */
 29394                        ;		st = 0; si = 0; i = 0; j = 0; szb_case =
                     0;
 29395                        ;		do
 29396                        ;		{
 29397                        ;			switch (st)
  Sat Jul 10 2021  1:15                                                Page 558


 29398                        ;			{
 29399                        ;				case 0:
 29400                        ;				ch = (WCHAR)ff_wtoupper(
                    si); /* Get an up-case char */
 29401                        ;				if (ch != si)
 29402                        ;				{
 29403                        ;					si++; break; /* 
                    Store the up-case char if exist */
 29404                        ;				}
 29405                        ;				for (j = 1; (WCHAR)(si +
                     j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++)
                    ; /* Get run length of no-case block */
 29406                        ;				if (j >= 128)
 29407                        ;				{
 29408                        ;					ch = 0xFFFF; st 
                    = 2; break; /* Compress the no-case block if run is >= 128 *
                    /
 29409                        ;				}
 29410                        ;				st = 1; /* Do not compre
                    ss short run */
 29411                        ;				/* go to next case */
 29412                        ;				case 1:
 29413                        ;				ch = si++; /* Fill the s
                    hort run */
 29414                        ;				if (--j == 0) st = 0;
 29415                        ;				break;
 29416                        ;
 29417                        ;				default:
 29418                        ;				ch = (WCHAR)j; si += (WC
                    HAR)j; /* Number of chars to skip */
 29419                        ;				st = 0;
 29420                        ;			}
 29421                        ;			sum = xsum32(buf[i + 0] = (BYTE)
                    ch, sum); /* Put it into the write buffer */
 29422                        ;			sum = xsum32(buf[i + 1] = (BYTE)
                    (ch >> 8), sum);
 29423                        ;			i += 2; szb_case += 2;
 29424                        ;			if (si == 0 || i == sz_buf * ss)
 29425                        ;			{ /* Write buffered data when bu
                    ffer full or end of process */
 29426                        ;				n = (i + ss - 1) / ss;
 29427                        ;				if (disk_write(pdrv, buf
                    , sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29428                        ;				sect += n; i = 0;
 29429                        ;			}
 29430                        ;		}while (si);
 29431                        ;		tbl[1] = (szb_case + sz_au * ss - 1) / (
                    sz_au * ss); /* Number of up-case table clusters */
 29432                        ;		tbl[2] = 1; /* Number of root dir cluste
                    rs */
 29433                        ;
 29434                        ;		/* Initialize the allocation bitmap */
 29435                        ;		sect = b_data; nsect = (szb_bit + ss - 1
                    ) / ss; /* Start of bitmap and number of sectors */
 29436                        ;		nb = tbl[0] + tbl[1] + tbl[2]; /* Number
                     of clusters in-use by system */
 29437                        ;		do
 29438                        ;		{
  Sat Jul 10 2021  1:15                                                Page 559


 29439                        ;			mem_set(buf, 0, sz_buf * ss);
 29440                        ;			for (i = 0; nb >= 8 && i < sz_bu
                    f * ss; buf[i++] = 0xFF, nb -= 8);
 29441                        ;			for (b = 1; nb != 0 && i < sz_bu
                    f * ss; buf[i] |= b, b <<= 1, nb--);
 29442                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect; /* Write the buffered data */
 29443                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29444                        ;			sect += n; nsect -= n;
 29445                        ;		}while (nsect);
 29446                        ;
 29447                        ;		/* Initialize the FAT */
 29448                        ;		sect = b_fat; nsect = sz_fat; /* Start o
                    f FAT and number of FAT sectors */
 29449                        ;		j = nb = cl = 0;
 29450                        ;		do
 29451                        ;		{
 29452                        ;			mem_set(buf, 0, sz_buf * ss); i 
                    = 0; /* Clear work area and reset write index */
 29453                        ;			if (cl == 0)
 29454                        ;			{ /* Set FAT [0] and FAT[1] */
 29455                        ;				st_dword(buf + i, 0xFFFF
                    FFF8); i += 4; cl++;
 29456                        ;				st_dword(buf + i, 0xFFFF
                    FFFF); i += 4; cl++;
 29457                        ;			}
 29458                        ;			do
 29459                        ;			{ /* Create chains of bitmap, up
                    -case and root dir */
 29460                        ;				while (nb != 0 && i < sz
                    _buf * ss)
 29461                        ;				{ /* Create a chain */
 29462                        ;					st_dword(buf + i
                    , (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 29463                        ;					i += 4; cl++; nb
                    --;
 29464                        ;				}
 29465                        ;				if (nb == 0 && j < 3) nb
                     = tbl[j++]; /* Next chain */
 29466                        ;			}while (nb != 0 && i < sz_buf * 
                    ss);
 29467                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect; /* Write the buffered data */
 29468                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29469                        ;			sect += n; nsect -= n;
 29470                        ;		}while (nsect);
 29471                        ;
 29472                        ;		/* Initialize the root directory */
 29473                        ;		mem_set(buf, 0, sz_buf * ss);
 29474                        ;		buf[SZDIRE * 0 + 0] = ET_VLABEL; /* Volu
                    me label entry (no label) */
 29475                        ;		buf[SZDIRE * 1 + 0] = ET_BITMAP; /* Bitm
                    ap entry */
 29476                        ;		st_dword(buf + SZDIRE * 1 + 20, 2); /*  
                    cluster */
 29477                        ;		st_dword(buf + SZDIRE * 1 + 24, szb_bit)
  Sat Jul 10 2021  1:15                                                Page 560


                    ; /*  size */
 29478                        ;		buf[SZDIRE * 2 + 0] = ET_UPCASE; /* Up-c
                    ase table entry */
 29479                        ;		st_dword(buf + SZDIRE * 2 + 4, sum); /* 
                     sum */
 29480                        ;		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[
                    0]); /*  cluster */
 29481                        ;		st_dword(buf + SZDIRE * 2 + 24, szb_case
                    ); /*  size */
 29482                        ;		sect = b_data + sz_au * (tbl[0] + tbl[1]
                    ); nsect = sz_au; /* Start of the root directory and number 
                    of sectors */
 29483                        ;		do
 29484                        ;		{ /* Fill root directory sectors */
 29485                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;
 29486                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29487                        ;			mem_set(buf, 0, ss);
 29488                        ;			sect += n; nsect -= n;
 29489                        ;		}while (nsect);
 29490                        ;
 29491                        ;		/* Create two set of the exFAT VBR block
                    s */
 29492                        ;		sect = b_vol;
 29493                        ;		for (n = 0; n < 2; n++)
 29494                        ;		{
 29495                        ;			/* Main record (+0) */
 29496                        ;			mem_set(buf, 0, ss);
 29497                        ;			mem_cpy(buf + BS_JmpBoot, "\xEB\
                    x76\x90" "EXFAT   ", 11); /* Boot jump code (x86), OEM name 
                    */
 29498                        ;			st_qword(buf + BPB_VolOfsEx, b_v
                    ol); /* Volume offset in the physical drive [sector] */
 29499                        ;			st_qword(buf + BPB_TotSecEx, sz_
                    vol); /* Volume size [sector] */
 29500                        ;			st_dword(buf + BPB_FatOfsEx, (DW
                    ORD)(b_fat - b_vol)); /* FAT offset [sector] */
 29501                        ;			st_dword(buf + BPB_FatSzEx, sz_f
                    at); /* FAT size [sector] */
 29502                        ;			st_dword(buf + BPB_DataOfsEx, (D
                    WORD)(b_data - b_vol)); /* Data offset [sector] */
 29503                        ;			st_dword(buf + BPB_NumClusEx, n_
                    clst); /* Number of clusters */
 29504                        ;			st_dword(buf + BPB_RootClusEx, 2
                     + tbl[0] + tbl[1]); /* Root dir cluster # */
 29505                        ;			st_dword(buf + BPB_VolIDEx, GET_
                    FATTIME()); /* VSN */
 29506                        ;			st_word(buf + BPB_FSVerEx, 0x100
                    ); /* Filesystem version (1.00) */
 29507                        ;			for (buf[BPB_BytsPerSecEx] = 0, 
                    i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++); /* Log2 of sector
                     size [byte] */
 29508                        ;			for (buf[BPB_SecPerClusEx] = 0, 
                    i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++); /* Log2 of clu
                    ster size [sector] */
 29509                        ;			buf[BPB_NumFATsEx] = 1; /* Numbe
                    r of FATs */
  Sat Jul 10 2021  1:15                                                Page 561


 29510                        ;			buf[BPB_DrvNumEx] = 0x80; /* Dri
                    ve number (for int13) */
 29511                        ;			st_word(buf + BS_BootCodeEx, 0xF
                    EEB); /* Boot code (x86) */
 29512                        ;			st_word(buf + BS_55AA, 0xAA55); 
                    /* Signature (placed here regardless of sector size) */
 29513                        ;			for (i = sum = 0; i < ss; i++)
 29514                        ;			{ /* VBR checksum */
 29515                        ;				if (i != BPB_VolFlagEx &
                    & i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum
                    32(buf[i], sum);
 29516                        ;			}
 29517                        ;			if (disk_write(pdrv, buf, sect++
                    , 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29518                        ;			/* Extended bootstrap record (+1
                    ..+8) */
 29519                        ;			mem_set(buf, 0, ss);
 29520                        ;			st_word(buf + ss - 2, 0xAA55); /
                    * Signature (placed at end of sector) */
 29521                        ;			for (j = 1; j < 9; j++)
 29522                        ;			{
 29523                        ;				for (i = 0; i < ss; sum 
                    = xsum32(buf[i++], sum)); /* VBR checksum */
 29524                        ;				if (disk_write(pdrv, buf
                    , sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29525                        ;			}
 29526                        ;			/* OEM/Reserved record (+9..+10)
                     */
 29527                        ;			mem_set(buf, 0, ss);
 29528                        ;			for (; j < 11; j++)
 29529                        ;			{
 29530                        ;				for (i = 0; i < ss; sum 
                    = xsum32(buf[i++], sum)); /* VBR checksum */
 29531                        ;				if (disk_write(pdrv, buf
                    , sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29532                        ;			}
 29533                        ;			/* Sum record (+11) */
 29534                        ;			for (i = 0; i < ss; i += 4) st_d
                    word(buf + i, sum); /* Fill with checksum value */
 29535                        ;			if (disk_write(pdrv, buf, sect++
                    , 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 29536                        ;		}
 29537                        ;
 29538                        ;	}
 29539                        ;	else
 29540                        ;#endif	/* FF_FS_EXFAT */
 29541                        ;	{ /* Create an FAT/FAT32 volume */
 29542                        	.line	6932
 29543                        ;		do
 29544                        	.line	6933
 29545                        L10713:
 29546                        ;		{
 29547                        	.line	6934
 29548                        ;			pau = sz_au;
 29549                        	.line	6935
 29550 08:77C9: A5 60        	lda	<L1160+sz_au_1
 29551 08:77CB: 85 2C        	sta	<L1160+pau_1
 29552 08:77CD: A5 62        	lda	<L1160+sz_au_1+2
  Sat Jul 10 2021  1:15                                                Page 562


 29553 08:77CF: 85 2E        	sta	<L1160+pau_1+2
 29554                        ;			/* Pre-determine number of clust
                    ers and FAT sub-type */
 29555                        ;			if (fsty == FS_FAT32)
 29556                        	.line	6937
 29557                        ;			{ /* FAT32 volume */
 29558 08:77D1: E2 20        	sep	#$20
 29559                        	longa	off
 29560 08:77D3: A5 12        	lda	<L1160+fsty_1
 29561 08:77D5: C9 03        	cmp	#<$3
 29562 08:77D7: C2 20        	rep	#$20
 29563                        	longa	on
 29564 08:77D9: F0 03        	beq	L1222
 29565 08:77DB: 82 07 01     	brl	L10714
 29566                        L1222:
 29567                        	.line	6938
 29568                        ;				if (pau == 0)
 29569                        	.line	6939
 29570                        ;				{ /* AU auto-selection *
                    /
 29571 08:77DE: A5 2C        	lda	<L1160+pau_1
 29572 08:77E0: 05 2E        	ora	<L1160+pau_1+2
 29573 08:77E2: F0 03        	beq	L1223
 29574 08:77E4: 82 54 00     	brl	L10715
 29575                        L1223:
 29576                        	.line	6940
 29577                        ;					n = (DWORD)sz_vo
                    l / 0x20000; /* Volume size in unit of 128KS */
 29578                        	.line	6941
 29579 08:77E7: D4 3A        	pei	<L1160+sz_vol_1+2
 29580 08:77E9: D4 38        	pei	<L1160+sz_vol_1
 29581 08:77EB: A9 11 00     	lda	#$11
 29582                        	xref	~~~llsr
 29583 08:77EE: 22 xx xx xx  	jsl	~~~llsr
 29584 08:77F2: 85 34        	sta	<L1160+n_1
 29585 08:77F4: 86 36        	stx	<L1160+n_1+2
 29586                        ;					for (i = 0, pau 
                    = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1); /* Get from
                     table */
 29587                        	.line	6942
 29588 08:77F6: 64 68        	stz	<L1160+i_1
 29589 08:77F8: A9 01 00     	lda	#$1
 29590 08:77FB: 85 2C        	sta	<L1160+pau_1
 29591 08:77FD: A9 00 00     	lda	#$0
 29592 08:7800: 85 2E        	sta	<L1160+pau_1+2
 29593 08:7802: 82 06 00     	brl	L10719
 29594                        L10718:
 29595                        	.line	6942
 29596                        L10716:
 29597 08:7805: 06 2C        	asl	<L1160+pau_1
 29598 08:7807: 26 2E        	rol	<L1160+pau_1+2
 29599 08:7809: E6 68        	inc	<L1160+i_1
 29600                        L10719:
 29601 08:780B: A5 68        	lda	<L1160+i_1
 29602 08:780D: 0A           	asl	A
 29603 08:780E: 85 01        	sta	<R0
 29604 08:7810: A6 01        	ldx	<R0
 29605 08:7812: BD xx xx     	lda	|L1163,X ;cst32
  Sat Jul 10 2021  1:15                                                Page 563


 29606 08:7815: D0 03        	bne	L1225
 29607 08:7817: 82 21 00     	brl	L1224
 29608                        L1225:
 29609 08:781A: A5 68        	lda	<L1160+i_1
 29610 08:781C: 0A           	asl	A
 29611 08:781D: 85 05        	sta	<R1
 29612 08:781F: A0 00 00     	ldy	#$0
 29613 08:7822: A6 05        	ldx	<R1
 29614 08:7824: BD xx xx     	lda	|L1163,X ;cst32
 29615 08:7827: 10 01        	bpl	L1226
 29616 08:7829: 88           	dey
 29617                        L1226:
 29618 08:782A: 85 09        	sta	<R2
 29619 08:782C: 84 0B        	sty	<R2+2
 29620 08:782E: A5 34        	lda	<L1160+n_1
 29621 08:7830: C5 09        	cmp	<R2
 29622 08:7832: A5 36        	lda	<L1160+n_1+2
 29623 08:7834: E5 0B        	sbc	<R2+2
 29624 08:7836: 90 03        	bcc	L1227
 29625 08:7838: 82 CA FF     	brl	L10718
 29626                        L1227:
 29627                        L1224:
 29628                        L10717:
 29629                        ;				}
 29630                        	.line	6943
 29631                        ;				n_clst = (DWORD)sz_vol /
                     pau; /* Number of clusters */
 29632                        L10715:
 29633                        	.line	6944
 29634 08:783B: D4 2E        	pei	<L1160+pau_1+2
 29635 08:783D: D4 2C        	pei	<L1160+pau_1
 29636 08:783F: D4 3A        	pei	<L1160+sz_vol_1+2
 29637 08:7841: D4 38        	pei	<L1160+sz_vol_1
 29638                        	xref	~~~ludv
 29639 08:7843: 22 xx xx xx  	jsl	~~~ludv
 29640 08:7847: 85 28        	sta	<L1160+n_clst_1
 29641 08:7849: 86 2A        	stx	<L1160+n_clst_1+2
 29642                        ;				sz_fat = (n_clst * 4 + 8
                     + ss - 1) / ss; /* FAT size [sector] */
 29643                        	.line	6945
 29644 08:784B: A0 00 00     	ldy	#$0
 29645 08:784E: A5 1E        	lda	<L1160+ss_1
 29646 08:7850: 10 01        	bpl	L1228
 29647 08:7852: 88           	dey
 29648                        L1228:
 29649 08:7853: 85 01        	sta	<R0
 29650 08:7855: 84 03        	sty	<R0+2
 29651 08:7857: A0 00 00     	ldy	#$0
 29652 08:785A: A5 1E        	lda	<L1160+ss_1
 29653 08:785C: 10 01        	bpl	L1229
 29654 08:785E: 88           	dey
 29655                        L1229:
 29656 08:785F: 85 05        	sta	<R1
 29657 08:7861: 84 07        	sty	<R1+2
 29658 08:7863: A5 28        	lda	<L1160+n_clst_1
 29659 08:7865: 85 09        	sta	<R2
 29660 08:7867: A5 2A        	lda	<L1160+n_clst_1+2
 29661 08:7869: 85 0B        	sta	<R2+2
  Sat Jul 10 2021  1:15                                                Page 564


 29662 08:786B: 06 09        	asl	<R2
 29663 08:786D: 26 0B        	rol	<R2+2
 29664 08:786F: 06 09        	asl	<R2
 29665 08:7871: 26 0B        	rol	<R2+2
 29666 08:7873: 18           	clc
 29667 08:7874: A5 09        	lda	<R2
 29668 08:7876: 65 05        	adc	<R1
 29669 08:7878: 85 0D        	sta	<R3
 29670 08:787A: A5 0B        	lda	<R2+2
 29671 08:787C: 65 07        	adc	<R1+2
 29672 08:787E: 85 0F        	sta	<R3+2
 29673 08:7880: 18           	clc
 29674 08:7881: A9 07 00     	lda	#$7
 29675 08:7884: 65 0D        	adc	<R3
 29676 08:7886: 85 05        	sta	<R1
 29677 08:7888: A9 00 00     	lda	#$0
 29678 08:788B: 65 0F        	adc	<R3+2
 29679 08:788D: 85 07        	sta	<R1+2
 29680 08:788F: D4 03        	pei	<R0+2
 29681 08:7891: D4 01        	pei	<R0
 29682 08:7893: D4 07        	pei	<R1+2
 29683 08:7895: D4 05        	pei	<R1
 29684                        	xref	~~~ludv
 29685 08:7897: 22 xx xx xx  	jsl	~~~ludv
 29686 08:789B: 85 58        	sta	<L1160+sz_fat_1
 29687 08:789D: 86 5A        	stx	<L1160+sz_fat_1+2
 29688                        ;				sz_rsv = 32; /* Number o
                    f reserved sectors */
 29689                        	.line	6946
 29690 08:789F: A9 20 00     	lda	#$20
 29691 08:78A2: 85 54        	sta	<L1160+sz_rsv_1
 29692 08:78A4: A9 00 00     	lda	#$0
 29693 08:78A7: 85 56        	sta	<L1160+sz_rsv_1+2
 29694                        ;				sz_dir = 0; /* No static
                     directory */
 29695                        	.line	6947
 29696 08:78A9: 64 5C        	stz	<L1160+sz_dir_1
 29697 08:78AB: 64 5E        	stz	<L1160+sz_dir_1+2
 29698                        ;				if (n_clst <= MAX_FAT16 
                    || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 29699                        	.line	6948
 29700 08:78AD: A9 F5 FF     	lda	#$fff5
 29701 08:78B0: C5 28        	cmp	<L1160+n_clst_1
 29702 08:78B2: A9 00 00     	lda	#$0
 29703 08:78B5: E5 2A        	sbc	<L1160+n_clst_1+2
 29704 08:78B7: 90 03        	bcc	L1231
 29705 08:78B9: 82 0F 00     	brl	L1230
 29706                        L1231:
 29707 08:78BC: A9 F5 FF     	lda	#$fff5
 29708 08:78BF: C5 28        	cmp	<L1160+n_clst_1
 29709 08:78C1: A9 FF 0F     	lda	#$fff
 29710 08:78C4: E5 2A        	sbc	<L1160+n_clst_1+2
 29711 08:78C6: 90 03        	bcc	L1232
 29712 08:78C8: 82 17 00     	brl	L10720
 29713                        L1232:
 29714                        L1230:
 29715                        	.line	6948
 29716                        	.line	6948
  Sat Jul 10 2021  1:15                                                Page 565


 29717 08:78CB: A5 7A        	lda	<L1159+work_0
 29718 08:78CD: 05 7C        	ora	<L1159+work_0+2
 29719 08:78CF: F0 03        	beq	L1233
 29720 08:78D1: 82 08 00     	brl	L10721
 29721                        L1233:
 29722                        	.line	6948
 29723 08:78D4: D4 16        	pei	<L1160+buf_1+2
 29724 08:78D6: D4 14        	pei	<L1160+buf_1
 29725 08:78D8: 22 D3 92 08  	jsl	~~ff_memfree
 29726                        L10721:
 29727                        	.line	6948
 29728 08:78DC: A9 0E 00     	lda	#$e
 29729 08:78DF: 82 01 FA     	brl	L1166
 29730                        	.line	6948
 29731                        L10720:
 29732                        	.line	6948
 29733                        ;			}
 29734                        	.line	6949
 29735                        ;			else
 29736 08:78E2: 82 60 01     	brl	L10722
 29737                        L10714:
 29738                        ;			{ /* FAT volume */
 29739                        	.line	6951
 29740                        ;				if (pau == 0)
 29741                        	.line	6952
 29742                        ;				{ /* au auto-selection *
                    /
 29743 08:78E5: A5 2C        	lda	<L1160+pau_1
 29744 08:78E7: 05 2E        	ora	<L1160+pau_1+2
 29745 08:78E9: F0 03        	beq	L1234
 29746 08:78EB: 82 54 00     	brl	L10723
 29747                        L1234:
 29748                        	.line	6953
 29749                        ;					n = (DWORD)sz_vo
                    l / 0x1000; /* Volume size in unit of 4KS */
 29750                        	.line	6954
 29751 08:78EE: D4 3A        	pei	<L1160+sz_vol_1+2
 29752 08:78F0: D4 38        	pei	<L1160+sz_vol_1
 29753 08:78F2: A9 0C 00     	lda	#$c
 29754                        	xref	~~~llsr
 29755 08:78F5: 22 xx xx xx  	jsl	~~~llsr
 29756 08:78F9: 85 34        	sta	<L1160+n_1
 29757 08:78FB: 86 36        	stx	<L1160+n_1+2
 29758                        ;					for (i = 0, pau 
                    = 1; cst[i] && cst[i] <= n; i++, pau <<= 1); /* Get from tab
                    le */
 29759                        	.line	6955
 29760 08:78FD: 64 68        	stz	<L1160+i_1
 29761 08:78FF: A9 01 00     	lda	#$1
 29762 08:7902: 85 2C        	sta	<L1160+pau_1
 29763 08:7904: A9 00 00     	lda	#$0
 29764 08:7907: 85 2E        	sta	<L1160+pau_1+2
 29765 08:7909: 82 06 00     	brl	L10727
 29766                        L10726:
 29767                        	.line	6955
 29768                        L10724:
 29769 08:790C: 06 2C        	asl	<L1160+pau_1
 29770 08:790E: 26 2E        	rol	<L1160+pau_1+2
  Sat Jul 10 2021  1:15                                                Page 566


 29771 08:7910: E6 68        	inc	<L1160+i_1
 29772                        L10727:
 29773 08:7912: A5 68        	lda	<L1160+i_1
 29774 08:7914: 0A           	asl	A
 29775 08:7915: 85 01        	sta	<R0
 29776 08:7917: A6 01        	ldx	<R0
 29777 08:7919: BD xx xx     	lda	|L1162,X ;cst
 29778 08:791C: D0 03        	bne	L1236
 29779 08:791E: 82 21 00     	brl	L1235
 29780                        L1236:
 29781 08:7921: A5 68        	lda	<L1160+i_1
 29782 08:7923: 0A           	asl	A
 29783 08:7924: 85 05        	sta	<R1
 29784 08:7926: A0 00 00     	ldy	#$0
 29785 08:7929: A6 05        	ldx	<R1
 29786 08:792B: BD xx xx     	lda	|L1162,X ;cst
 29787 08:792E: 10 01        	bpl	L1237
 29788 08:7930: 88           	dey
 29789                        L1237:
 29790 08:7931: 85 09        	sta	<R2
 29791 08:7933: 84 0B        	sty	<R2+2
 29792 08:7935: A5 34        	lda	<L1160+n_1
 29793 08:7937: C5 09        	cmp	<R2
 29794 08:7939: A5 36        	lda	<L1160+n_1+2
 29795 08:793B: E5 0B        	sbc	<R2+2
 29796 08:793D: 90 03        	bcc	L1238
 29797 08:793F: 82 CA FF     	brl	L10726
 29798                        L1238:
 29799                        L1235:
 29800                        L10725:
 29801                        ;				}
 29802                        	.line	6956
 29803                        ;				n_clst = (DWORD)sz_vol /
                     pau;
 29804                        L10723:
 29805                        	.line	6957
 29806 08:7942: D4 2E        	pei	<L1160+pau_1+2
 29807 08:7944: D4 2C        	pei	<L1160+pau_1
 29808 08:7946: D4 3A        	pei	<L1160+sz_vol_1+2
 29809 08:7948: D4 38        	pei	<L1160+sz_vol_1
 29810                        	xref	~~~ludv
 29811 08:794A: 22 xx xx xx  	jsl	~~~ludv
 29812 08:794E: 85 28        	sta	<L1160+n_clst_1
 29813 08:7950: 86 2A        	stx	<L1160+n_clst_1+2
 29814                        ;				if (n_clst > MAX_FAT12)
 29815                        	.line	6958
 29816                        ;				{
 29817 08:7952: A9 F5 0F     	lda	#$ff5
 29818 08:7955: C5 28        	cmp	<L1160+n_clst_1
 29819 08:7957: A9 00 00     	lda	#$0
 29820 08:795A: E5 2A        	sbc	<L1160+n_clst_1+2
 29821 08:795C: 90 03        	bcc	L1239
 29822 08:795E: 82 1E 00     	brl	L10728
 29823                        L1239:
 29824                        	.line	6959
 29825                        ;					n = n_clst * 2 +
                     4; /* FAT size [byte] */
 29826                        	.line	6960
  Sat Jul 10 2021  1:15                                                Page 567


 29827 08:7961: A5 28        	lda	<L1160+n_clst_1
 29828 08:7963: 85 01        	sta	<R0
 29829 08:7965: A5 2A        	lda	<L1160+n_clst_1+2
 29830 08:7967: 85 03        	sta	<R0+2
 29831 08:7969: 06 01        	asl	<R0
 29832 08:796B: 26 03        	rol	<R0+2
 29833 08:796D: 18           	clc
 29834 08:796E: A9 04 00     	lda	#$4
 29835 08:7971: 65 01        	adc	<R0
 29836 08:7973: 85 34        	sta	<L1160+n_1
 29837 08:7975: A9 00 00     	lda	#$0
 29838 08:7978: 65 03        	adc	<R0+2
 29839 08:797A: 85 36        	sta	<L1160+n_1+2
 29840                        ;				}
 29841                        	.line	6961
 29842                        ;				else
 29843 08:797C: 82 47 00     	brl	L10729
 29844                        L10728:
 29845                        ;				{
 29846                        	.line	6963
 29847                        ;					fsty = FS_FAT12;
 29848                        	.line	6964
 29849 08:797F: E2 20        	sep	#$20
 29850                        	longa	off
 29851 08:7981: A9 01        	lda	#$1
 29852 08:7983: 85 12        	sta	<L1160+fsty_1
 29853 08:7985: C2 20        	rep	#$20
 29854                        	longa	on
 29855                        ;					n = (n_clst * 3 
                    + 1) / 2 + 3; /* FAT size [byte] */
 29856                        	.line	6965
 29857 08:7987: F4 00 00     	pea	#^$3
 29858 08:798A: F4 03 00     	pea	#<$3
 29859 08:798D: D4 2A        	pei	<L1160+n_clst_1+2
 29860 08:798F: D4 28        	pei	<L1160+n_clst_1
 29861                        	xref	~~~lmul
 29862 08:7991: 22 xx xx xx  	jsl	~~~lmul
 29863 08:7995: 85 05        	sta	<R1
 29864 08:7997: 86 07        	stx	<R1+2
 29865 08:7999: 18           	clc
 29866 08:799A: A9 01 00     	lda	#$1
 29867 08:799D: 65 05        	adc	<R1
 29868 08:799F: 85 09        	sta	<R2
 29869 08:79A1: A9 00 00     	lda	#$0
 29870 08:79A4: 65 07        	adc	<R1+2
 29871 08:79A6: 85 0B        	sta	<R2+2
 29872 08:79A8: D4 0B        	pei	<R2+2
 29873 08:79AA: D4 09        	pei	<R2
 29874 08:79AC: A9 01 00     	lda	#$1
 29875                        	xref	~~~llsr
 29876 08:79AF: 22 xx xx xx  	jsl	~~~llsr
 29877 08:79B3: 85 01        	sta	<R0
 29878 08:79B5: 86 03        	stx	<R0+2
 29879 08:79B7: 18           	clc
 29880 08:79B8: A9 03 00     	lda	#$3
 29881 08:79BB: 65 01        	adc	<R0
 29882 08:79BD: 85 34        	sta	<L1160+n_1
 29883 08:79BF: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 568


 29884 08:79C2: 65 03        	adc	<R0+2
 29885 08:79C4: 85 36        	sta	<L1160+n_1+2
 29886                        ;				}
 29887                        	.line	6966
 29888                        L10729:
 29889                        ;				sz_fat = (n + ss - 1) / 
                    ss; /* FAT size [sector] */
 29890                        	.line	6967
 29891 08:79C6: A0 00 00     	ldy	#$0
 29892 08:79C9: A5 1E        	lda	<L1160+ss_1
 29893 08:79CB: 10 01        	bpl	L1240
 29894 08:79CD: 88           	dey
 29895                        L1240:
 29896 08:79CE: 85 01        	sta	<R0
 29897 08:79D0: 84 03        	sty	<R0+2
 29898 08:79D2: A0 00 00     	ldy	#$0
 29899 08:79D5: A5 1E        	lda	<L1160+ss_1
 29900 08:79D7: 10 01        	bpl	L1241
 29901 08:79D9: 88           	dey
 29902                        L1241:
 29903 08:79DA: 85 05        	sta	<R1
 29904 08:79DC: 84 07        	sty	<R1+2
 29905 08:79DE: 18           	clc
 29906 08:79DF: A5 05        	lda	<R1
 29907 08:79E1: 65 34        	adc	<L1160+n_1
 29908 08:79E3: 85 09        	sta	<R2
 29909 08:79E5: A5 07        	lda	<R1+2
 29910 08:79E7: 65 36        	adc	<L1160+n_1+2
 29911 08:79E9: 85 0B        	sta	<R2+2
 29912 08:79EB: 18           	clc
 29913 08:79EC: A9 FF FF     	lda	#$ffff
 29914 08:79EF: 65 09        	adc	<R2
 29915 08:79F1: 85 05        	sta	<R1
 29916 08:79F3: A9 FF FF     	lda	#$ffff
 29917 08:79F6: 65 0B        	adc	<R2+2
 29918 08:79F8: 85 07        	sta	<R1+2
 29919 08:79FA: D4 03        	pei	<R0+2
 29920 08:79FC: D4 01        	pei	<R0
 29921 08:79FE: D4 07        	pei	<R1+2
 29922 08:7A00: D4 05        	pei	<R1
 29923                        	xref	~~~ludv
 29924 08:7A02: 22 xx xx xx  	jsl	~~~ludv
 29925 08:7A06: 85 58        	sta	<L1160+sz_fat_1
 29926 08:7A08: 86 5A        	stx	<L1160+sz_fat_1+2
 29927                        ;				sz_rsv = 1; /* Number of
                     reserved sectors */
 29928                        	.line	6968
 29929 08:7A0A: A9 01 00     	lda	#$1
 29930 08:7A0D: 85 54        	sta	<L1160+sz_rsv_1
 29931 08:7A0F: A9 00 00     	lda	#$0
 29932 08:7A12: 85 56        	sta	<L1160+sz_rsv_1+2
 29933                        ;				sz_dir = (DWORD)n_root *
                     SZDIRE / ss; /* Root dir size [sector] */
 29934                        	.line	6969
 29935 08:7A14: A0 00 00     	ldy	#$0
 29936 08:7A17: A5 1E        	lda	<L1160+ss_1
 29937 08:7A19: 10 01        	bpl	L1242
 29938 08:7A1B: 88           	dey
  Sat Jul 10 2021  1:15                                                Page 569


 29939                        L1242:
 29940 08:7A1C: 85 01        	sta	<R0
 29941 08:7A1E: 84 03        	sty	<R0+2
 29942 08:7A20: A5 66        	lda	<L1160+n_root_1
 29943 08:7A22: 85 09        	sta	<R2
 29944 08:7A24: 64 0B        	stz	<R2+2
 29945 08:7A26: D4 0B        	pei	<R2+2
 29946 08:7A28: D4 09        	pei	<R2
 29947 08:7A2A: A9 05 00     	lda	#$5
 29948                        	xref	~~~lasl
 29949 08:7A2D: 22 xx xx xx  	jsl	~~~lasl
 29950 08:7A31: 85 05        	sta	<R1
 29951 08:7A33: 86 07        	stx	<R1+2
 29952 08:7A35: D4 03        	pei	<R0+2
 29953 08:7A37: D4 01        	pei	<R0
 29954 08:7A39: D4 07        	pei	<R1+2
 29955 08:7A3B: D4 05        	pei	<R1
 29956                        	xref	~~~ludv
 29957 08:7A3D: 22 xx xx xx  	jsl	~~~ludv
 29958 08:7A41: 85 5C        	sta	<L1160+sz_dir_1
 29959 08:7A43: 86 5E        	stx	<L1160+sz_dir_1+2
 29960                        ;			}
 29961                        	.line	6970
 29962                        L10722:
 29963                        ;			b_fat = b_vol + sz_rsv; /* FAT b
                    ase */
 29964                        	.line	6971
 29965 08:7A45: 18           	clc
 29966 08:7A46: A5 3C        	lda	<L1160+b_vol_1
 29967 08:7A48: 65 54        	adc	<L1160+sz_rsv_1
 29968 08:7A4A: 85 40        	sta	<L1160+b_fat_1
 29969 08:7A4C: A5 3E        	lda	<L1160+b_vol_1+2
 29970 08:7A4E: 65 56        	adc	<L1160+sz_rsv_1+2
 29971 08:7A50: 85 42        	sta	<L1160+b_fat_1+2
 29972                        ;			b_data = b_fat + sz_fat * n_fat 
                    + sz_dir; /* Data base */
 29973                        	.line	6972
 29974 08:7A52: A5 64        	lda	<L1160+n_fat_1
 29975 08:7A54: 85 01        	sta	<R0
 29976 08:7A56: 64 03        	stz	<R0+2
 29977 08:7A58: D4 5A        	pei	<L1160+sz_fat_1+2
 29978 08:7A5A: D4 58        	pei	<L1160+sz_fat_1
 29979 08:7A5C: D4 03        	pei	<R0+2
 29980 08:7A5E: D4 01        	pei	<R0
 29981                        	xref	~~~lmul
 29982 08:7A60: 22 xx xx xx  	jsl	~~~lmul
 29983 08:7A64: 85 01        	sta	<R0
 29984 08:7A66: 86 03        	stx	<R0+2
 29985 08:7A68: 18           	clc
 29986 08:7A69: A5 01        	lda	<R0
 29987 08:7A6B: 65 40        	adc	<L1160+b_fat_1
 29988 08:7A6D: 85 05        	sta	<R1
 29989 08:7A6F: A5 03        	lda	<R0+2
 29990 08:7A71: 65 42        	adc	<L1160+b_fat_1+2
 29991 08:7A73: 85 07        	sta	<R1+2
 29992 08:7A75: 18           	clc
 29993 08:7A76: A5 05        	lda	<R1
 29994 08:7A78: 65 5C        	adc	<L1160+sz_dir_1
  Sat Jul 10 2021  1:15                                                Page 570


 29995 08:7A7A: 85 44        	sta	<L1160+b_data_1
 29996 08:7A7C: A5 07        	lda	<R1+2
 29997 08:7A7E: 65 5E        	adc	<L1160+sz_dir_1+2
 29998 08:7A80: 85 46        	sta	<L1160+b_data_1+2
 29999                        ;
 30000                        ;			/* Align data area to erase bloc
                    k boundary (for flash memory media) */
 30001                        ;			n = (DWORD)(((b_data + sz_blk - 
                    1) & ~(sz_blk - 1)) - b_data); /* Sectors to next nearest fr
                    om current data base */
 30002                        	.line	6975
 30003 08:7A82: 18           	clc
 30004 08:7A83: A5 44        	lda	<L1160+b_data_1
 30005 08:7A85: 65 24        	adc	<L1160+sz_blk_1
 30006 08:7A87: 85 01        	sta	<R0
 30007 08:7A89: A5 46        	lda	<L1160+b_data_1+2
 30008 08:7A8B: 65 26        	adc	<L1160+sz_blk_1+2
 30009 08:7A8D: 85 03        	sta	<R0+2
 30010 08:7A8F: 18           	clc
 30011 08:7A90: A9 FF FF     	lda	#$ffff
 30012 08:7A93: 65 01        	adc	<R0
 30013 08:7A95: 85 05        	sta	<R1
 30014 08:7A97: A9 FF FF     	lda	#$ffff
 30015 08:7A9A: 65 03        	adc	<R0+2
 30016 08:7A9C: 85 07        	sta	<R1+2
 30017 08:7A9E: 18           	clc
 30018 08:7A9F: A9 FF FF     	lda	#$ffff
 30019 08:7AA2: 65 24        	adc	<L1160+sz_blk_1
 30020 08:7AA4: 85 01        	sta	<R0
 30021 08:7AA6: A9 FF FF     	lda	#$ffff
 30022 08:7AA9: 65 26        	adc	<L1160+sz_blk_1+2
 30023 08:7AAB: 85 03        	sta	<R0+2
 30024 08:7AAD: A5 01        	lda	<R0
 30025 08:7AAF: 49 FF FF     	eor	#<$ffffffff
 30026 08:7AB2: 85 09        	sta	<R2
 30027 08:7AB4: A5 03        	lda	<R0+2
 30028 08:7AB6: 49 FF FF     	eor	#^$ffffffff
 30029 08:7AB9: 85 0B        	sta	<R2+2
 30030 08:7ABB: A5 09        	lda	<R2
 30031 08:7ABD: 25 05        	and	<R1
 30032 08:7ABF: 85 01        	sta	<R0
 30033 08:7AC1: A5 0B        	lda	<R2+2
 30034 08:7AC3: 25 07        	and	<R1+2
 30035 08:7AC5: 85 03        	sta	<R0+2
 30036 08:7AC7: 38           	sec
 30037 08:7AC8: A5 01        	lda	<R0
 30038 08:7ACA: E5 44        	sbc	<L1160+b_data_1
 30039 08:7ACC: 85 34        	sta	<L1160+n_1
 30040 08:7ACE: A5 03        	lda	<R0+2
 30041 08:7AD0: E5 46        	sbc	<L1160+b_data_1+2
 30042 08:7AD2: 85 36        	sta	<L1160+n_1+2
 30043                        ;			if (fsty == FS_FAT32)
 30044                        	.line	6976
 30045                        ;			{ /* FAT32: Move FAT */
 30046 08:7AD4: E2 20        	sep	#$20
 30047                        	longa	off
 30048 08:7AD6: A5 12        	lda	<L1160+fsty_1
 30049 08:7AD8: C9 03        	cmp	#<$3
  Sat Jul 10 2021  1:15                                                Page 571


 30050 08:7ADA: C2 20        	rep	#$20
 30051                        	longa	on
 30052 08:7ADC: F0 03        	beq	L1243
 30053 08:7ADE: 82 1D 00     	brl	L10730
 30054                        L1243:
 30055                        	.line	6977
 30056                        ;				sz_rsv += n; b_fat += n;
 30057                        	.line	6978
 30058 08:7AE1: 18           	clc
 30059 08:7AE2: A5 54        	lda	<L1160+sz_rsv_1
 30060 08:7AE4: 65 34        	adc	<L1160+n_1
 30061 08:7AE6: 85 54        	sta	<L1160+sz_rsv_1
 30062 08:7AE8: A5 56        	lda	<L1160+sz_rsv_1+2
 30063 08:7AEA: 65 36        	adc	<L1160+n_1+2
 30064 08:7AEC: 85 56        	sta	<L1160+sz_rsv_1+2
 30065                        	.line	6978
 30066 08:7AEE: 18           	clc
 30067 08:7AEF: A5 40        	lda	<L1160+b_fat_1
 30068 08:7AF1: 65 34        	adc	<L1160+n_1
 30069 08:7AF3: 85 40        	sta	<L1160+b_fat_1
 30070 08:7AF5: A5 42        	lda	<L1160+b_fat_1+2
 30071 08:7AF7: 65 36        	adc	<L1160+n_1+2
 30072 08:7AF9: 85 42        	sta	<L1160+b_fat_1+2
 30073                        ;			}
 30074                        	.line	6979
 30075                        ;			else
 30076 08:7AFB: 82 56 00     	brl	L10731
 30077                        L10730:
 30078                        ;			{ /* FAT: Expand FAT */
 30079                        	.line	6981
 30080                        ;				if (n % n_fat)
 30081                        	.line	6982
 30082                        ;				{ /* Adjust fractional e
                    rror if needed */
 30083 08:7AFE: A5 64        	lda	<L1160+n_fat_1
 30084 08:7B00: 85 01        	sta	<R0
 30085 08:7B02: 64 03        	stz	<R0+2
 30086 08:7B04: D4 03        	pei	<R0+2
 30087 08:7B06: D4 01        	pei	<R0
 30088 08:7B08: D4 36        	pei	<L1160+n_1+2
 30089 08:7B0A: D4 34        	pei	<L1160+n_1
 30090                        	xref	~~~lumd
 30091 08:7B0C: 22 xx xx xx  	jsl	~~~lumd
 30092 08:7B10: 85 01        	sta	<R0
 30093 08:7B12: 86 03        	stx	<R0+2
 30094 08:7B14: A5 01        	lda	<R0
 30095 08:7B16: 05 03        	ora	<R0+2
 30096 08:7B18: D0 03        	bne	L1244
 30097 08:7B1A: 82 14 00     	brl	L10732
 30098                        L1244:
 30099                        	.line	6983
 30100                        ;					n--; sz_rsv++; b
                    _fat++;
 30101                        	.line	6984
 30102 08:7B1D: A5 34        	lda	<L1160+n_1
 30103 08:7B1F: D0 02        	bne	L1245
 30104 08:7B21: C6 36        	dec	<L1160+n_1+2
 30105                        L1245:
  Sat Jul 10 2021  1:15                                                Page 572


 30106 08:7B23: C6 34        	dec	<L1160+n_1
 30107                        	.line	6984
 30108 08:7B25: E6 54        	inc	<L1160+sz_rsv_1
 30109 08:7B27: D0 02        	bne	L1246
 30110 08:7B29: E6 56        	inc	<L1160+sz_rsv_1+2
 30111                        L1246:
 30112                        	.line	6984
 30113 08:7B2B: E6 40        	inc	<L1160+b_fat_1
 30114 08:7B2D: D0 02        	bne	L1247
 30115 08:7B2F: E6 42        	inc	<L1160+b_fat_1+2
 30116                        L1247:
 30117                        ;				}
 30118                        	.line	6985
 30119                        ;				sz_fat += n / n_fat;
 30120                        L10732:
 30121                        	.line	6986
 30122 08:7B31: A5 64        	lda	<L1160+n_fat_1
 30123 08:7B33: 85 01        	sta	<R0
 30124 08:7B35: 64 03        	stz	<R0+2
 30125 08:7B37: D4 03        	pei	<R0+2
 30126 08:7B39: D4 01        	pei	<R0
 30127 08:7B3B: D4 36        	pei	<L1160+n_1+2
 30128 08:7B3D: D4 34        	pei	<L1160+n_1
 30129                        	xref	~~~ludv
 30130 08:7B3F: 22 xx xx xx  	jsl	~~~ludv
 30131 08:7B43: 85 01        	sta	<R0
 30132 08:7B45: 86 03        	stx	<R0+2
 30133 08:7B47: 18           	clc
 30134 08:7B48: A5 01        	lda	<R0
 30135 08:7B4A: 65 58        	adc	<L1160+sz_fat_1
 30136 08:7B4C: 85 58        	sta	<L1160+sz_fat_1
 30137 08:7B4E: A5 03        	lda	<R0+2
 30138 08:7B50: 65 5A        	adc	<L1160+sz_fat_1+2
 30139 08:7B52: 85 5A        	sta	<L1160+sz_fat_1+2
 30140                        ;			}
 30141                        	.line	6987
 30142                        L10731:
 30143                        ;
 30144                        ;			/* Determine number of clusters 
                    and final check of validity of the FAT sub-type */
 30145                        ;			if (sz_vol < b_data + pau * 16 -
                     b_vol) LEAVE_MKFS(FR_MKFS_ABORTED); /* Too small volume? */
 30146                        	.line	6990
 30147 08:7B54: A5 2C        	lda	<L1160+pau_1
 30148 08:7B56: 85 01        	sta	<R0
 30149 08:7B58: A5 2E        	lda	<L1160+pau_1+2
 30150 08:7B5A: 85 03        	sta	<R0+2
 30151 08:7B5C: 06 01        	asl	<R0
 30152 08:7B5E: 26 03        	rol	<R0+2
 30153 08:7B60: 06 01        	asl	<R0
 30154 08:7B62: 26 03        	rol	<R0+2
 30155 08:7B64: 06 01        	asl	<R0
 30156 08:7B66: 26 03        	rol	<R0+2
 30157 08:7B68: 06 01        	asl	<R0
 30158 08:7B6A: 26 03        	rol	<R0+2
 30159 08:7B6C: 18           	clc
 30160 08:7B6D: A5 01        	lda	<R0
 30161 08:7B6F: 65 44        	adc	<L1160+b_data_1
  Sat Jul 10 2021  1:15                                                Page 573


 30162 08:7B71: 85 05        	sta	<R1
 30163 08:7B73: A5 03        	lda	<R0+2
 30164 08:7B75: 65 46        	adc	<L1160+b_data_1+2
 30165 08:7B77: 85 07        	sta	<R1+2
 30166 08:7B79: 38           	sec
 30167 08:7B7A: A5 05        	lda	<R1
 30168 08:7B7C: E5 3C        	sbc	<L1160+b_vol_1
 30169 08:7B7E: 85 01        	sta	<R0
 30170 08:7B80: A5 07        	lda	<R1+2
 30171 08:7B82: E5 3E        	sbc	<L1160+b_vol_1+2
 30172 08:7B84: 85 03        	sta	<R0+2
 30173 08:7B86: A5 38        	lda	<L1160+sz_vol_1
 30174 08:7B88: C5 01        	cmp	<R0
 30175 08:7B8A: A5 3A        	lda	<L1160+sz_vol_1+2
 30176 08:7B8C: E5 03        	sbc	<R0+2
 30177 08:7B8E: 90 03        	bcc	L1248
 30178 08:7B90: 82 17 00     	brl	L10733
 30179                        L1248:
 30180                        	.line	6990
 30181                        	.line	6990
 30182 08:7B93: A5 7A        	lda	<L1159+work_0
 30183 08:7B95: 05 7C        	ora	<L1159+work_0+2
 30184 08:7B97: F0 03        	beq	L1249
 30185 08:7B99: 82 08 00     	brl	L10734
 30186                        L1249:
 30187                        	.line	6990
 30188 08:7B9C: D4 16        	pei	<L1160+buf_1+2
 30189 08:7B9E: D4 14        	pei	<L1160+buf_1
 30190 08:7BA0: 22 D3 92 08  	jsl	~~ff_memfree
 30191                        L10734:
 30192                        	.line	6990
 30193 08:7BA4: A9 0E 00     	lda	#$e
 30194 08:7BA7: 82 39 F7     	brl	L1166
 30195                        	.line	6990
 30196                        L10733:
 30197                        	.line	6990
 30198                        ;			n_clst = ((DWORD)sz_vol - sz_rsv
                     - sz_fat * n_fat - sz_dir) / pau;
 30199                        	.line	6991
 30200 08:7BAA: A5 64        	lda	<L1160+n_fat_1
 30201 08:7BAC: 85 01        	sta	<R0
 30202 08:7BAE: 64 03        	stz	<R0+2
 30203 08:7BB0: D4 5A        	pei	<L1160+sz_fat_1+2
 30204 08:7BB2: D4 58        	pei	<L1160+sz_fat_1
 30205 08:7BB4: D4 03        	pei	<R0+2
 30206 08:7BB6: D4 01        	pei	<R0
 30207                        	xref	~~~lmul
 30208 08:7BB8: 22 xx xx xx  	jsl	~~~lmul
 30209 08:7BBC: 85 01        	sta	<R0
 30210 08:7BBE: 86 03        	stx	<R0+2
 30211 08:7BC0: 38           	sec
 30212 08:7BC1: A5 38        	lda	<L1160+sz_vol_1
 30213 08:7BC3: E5 54        	sbc	<L1160+sz_rsv_1
 30214 08:7BC5: 85 05        	sta	<R1
 30215 08:7BC7: A5 3A        	lda	<L1160+sz_vol_1+2
 30216 08:7BC9: E5 56        	sbc	<L1160+sz_rsv_1+2
 30217 08:7BCB: 85 07        	sta	<R1+2
 30218 08:7BCD: 38           	sec
  Sat Jul 10 2021  1:15                                                Page 574


 30219 08:7BCE: A5 05        	lda	<R1
 30220 08:7BD0: E5 01        	sbc	<R0
 30221 08:7BD2: 85 09        	sta	<R2
 30222 08:7BD4: A5 07        	lda	<R1+2
 30223 08:7BD6: E5 03        	sbc	<R0+2
 30224 08:7BD8: 85 0B        	sta	<R2+2
 30225 08:7BDA: 38           	sec
 30226 08:7BDB: A5 09        	lda	<R2
 30227 08:7BDD: E5 5C        	sbc	<L1160+sz_dir_1
 30228 08:7BDF: 85 01        	sta	<R0
 30229 08:7BE1: A5 0B        	lda	<R2+2
 30230 08:7BE3: E5 5E        	sbc	<L1160+sz_dir_1+2
 30231 08:7BE5: 85 03        	sta	<R0+2
 30232 08:7BE7: D4 2E        	pei	<L1160+pau_1+2
 30233 08:7BE9: D4 2C        	pei	<L1160+pau_1
 30234 08:7BEB: D4 03        	pei	<R0+2
 30235 08:7BED: D4 01        	pei	<R0
 30236                        	xref	~~~ludv
 30237 08:7BEF: 22 xx xx xx  	jsl	~~~ludv
 30238 08:7BF3: 85 28        	sta	<L1160+n_clst_1
 30239 08:7BF5: 86 2A        	stx	<L1160+n_clst_1+2
 30240                        ;			if (fsty == FS_FAT32)
 30241                        	.line	6992
 30242                        ;			{
 30243 08:7BF7: E2 20        	sep	#$20
 30244                        	longa	off
 30245 08:7BF9: A5 12        	lda	<L1160+fsty_1
 30246 08:7BFB: C9 03        	cmp	#<$3
 30247 08:7BFD: C2 20        	rep	#$20
 30248                        	longa	on
 30249 08:7BFF: F0 03        	beq	L1250
 30250 08:7C01: 82 44 00     	brl	L10735
 30251                        L1250:
 30252                        	.line	6993
 30253                        ;				if (n_clst <= MAX_FAT16)
 30254                        	.line	6994
 30255                        ;				{ /* Too few clusters fo
                    r FAT32? */
 30256 08:7C04: A9 F5 FF     	lda	#$fff5
 30257 08:7C07: C5 28        	cmp	<L1160+n_clst_1
 30258 08:7C09: A9 00 00     	lda	#$0
 30259 08:7C0C: E5 2A        	sbc	<L1160+n_clst_1+2
 30260 08:7C0E: B0 03        	bcs	L1251
 30261 08:7C10: 82 35 00     	brl	L10736
 30262                        L1251:
 30263                        	.line	6995
 30264                        ;					if (sz_au == 0 &
                    & (sz_au = pau / 2) != 0) continue; /* Adjust cluster size a
                    nd retry */
 30265                        	.line	6996
 30266 08:7C13: A5 60        	lda	<L1160+sz_au_1
 30267 08:7C15: 05 62        	ora	<L1160+sz_au_1+2
 30268 08:7C17: F0 03        	beq	L1253
 30269 08:7C19: 82 15 00     	brl	L1252
 30270                        L1253:
 30271 08:7C1C: A5 2C        	lda	<L1160+pau_1
 30272 08:7C1E: 85 60        	sta	<L1160+sz_au_1
 30273 08:7C20: A5 2E        	lda	<L1160+pau_1+2
  Sat Jul 10 2021  1:15                                                Page 575


 30274 08:7C22: 85 62        	sta	<L1160+sz_au_1+2
 30275 08:7C24: 46 62        	lsr	<L1160+sz_au_1+2
 30276 08:7C26: 66 60        	ror	<L1160+sz_au_1
 30277 08:7C28: A5 60        	lda	<L1160+sz_au_1
 30278 08:7C2A: 05 62        	ora	<L1160+sz_au_1+2
 30279 08:7C2C: F0 03        	beq	L1254
 30280 08:7C2E: 82 39 01     	brl	L10711
 30281                        L1254:
 30282                        L1252:
 30283                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 30284                        	.line	6997
 30285                        	.line	6997
 30286 08:7C31: A5 7A        	lda	<L1159+work_0
 30287 08:7C33: 05 7C        	ora	<L1159+work_0+2
 30288 08:7C35: F0 03        	beq	L1255
 30289 08:7C37: 82 08 00     	brl	L10737
 30290                        L1255:
 30291                        	.line	6997
 30292 08:7C3A: D4 16        	pei	<L1160+buf_1+2
 30293 08:7C3C: D4 14        	pei	<L1160+buf_1
 30294 08:7C3E: 22 D3 92 08  	jsl	~~ff_memfree
 30295                        L10737:
 30296                        	.line	6997
 30297 08:7C42: A9 0E 00     	lda	#$e
 30298 08:7C45: 82 9B F6     	brl	L1166
 30299                        	.line	6997
 30300                        	.line	6997
 30301                        ;				}
 30302                        	.line	6998
 30303                        ;			}
 30304                        L10736:
 30305                        	.line	6999
 30306                        ;			if (fsty == FS_FAT16)
 30307                        L10735:
 30308                        	.line	7000
 30309                        ;			{
 30310 08:7C48: E2 20        	sep	#$20
 30311                        	longa	off
 30312 08:7C4A: A5 12        	lda	<L1160+fsty_1
 30313 08:7C4C: C9 02        	cmp	#<$2
 30314 08:7C4E: C2 20        	rep	#$20
 30315                        	longa	on
 30316 08:7C50: F0 03        	beq	L1256
 30317 08:7C52: 82 DF 00     	brl	L10738
 30318                        L1256:
 30319                        	.line	7001
 30320                        ;				if (n_clst > MAX_FAT16)
 30321                        	.line	7002
 30322                        ;				{ /* Too many clusters f
                    or FAT16 */
 30323 08:7C55: A9 F5 FF     	lda	#$fff5
 30324 08:7C58: C5 28        	cmp	<L1160+n_clst_1
 30325 08:7C5A: A9 00 00     	lda	#$0
 30326 08:7C5D: E5 2A        	sbc	<L1160+n_clst_1+2
 30327 08:7C5F: 90 03        	bcc	L1257
 30328 08:7C61: 82 86 00     	brl	L10739
 30329                        L1257:
  Sat Jul 10 2021  1:15                                                Page 576


 30330                        	.line	7003
 30331                        ;					if (sz_au == 0 &
                    & (pau * 2) <= 64)
 30332                        	.line	7004
 30333                        ;					{
 30334 08:7C64: A5 60        	lda	<L1160+sz_au_1
 30335 08:7C66: 05 62        	ora	<L1160+sz_au_1+2
 30336 08:7C68: F0 03        	beq	L1258
 30337 08:7C6A: 82 2A 00     	brl	L10740
 30338                        L1258:
 30339 08:7C6D: A5 2C        	lda	<L1160+pau_1
 30340 08:7C6F: 85 01        	sta	<R0
 30341 08:7C71: A5 2E        	lda	<L1160+pau_1+2
 30342 08:7C73: 85 03        	sta	<R0+2
 30343 08:7C75: 06 01        	asl	<R0
 30344 08:7C77: 26 03        	rol	<R0+2
 30345 08:7C79: A9 40 00     	lda	#$40
 30346 08:7C7C: C5 01        	cmp	<R0
 30347 08:7C7E: A9 00 00     	lda	#$0
 30348 08:7C81: E5 03        	sbc	<R0+2
 30349 08:7C83: B0 03        	bcs	L1259
 30350 08:7C85: 82 0F 00     	brl	L10740
 30351                        L1259:
 30352                        	.line	7005
 30353                        ;						sz_au = 
                    pau * 2; continue; /* Adjust cluster size and retry */
 30354                        	.line	7006
 30355 08:7C88: A5 2C        	lda	<L1160+pau_1
 30356 08:7C8A: 85 60        	sta	<L1160+sz_au_1
 30357 08:7C8C: A5 2E        	lda	<L1160+pau_1+2
 30358 08:7C8E: 85 62        	sta	<L1160+sz_au_1+2
 30359 08:7C90: 06 60        	asl	<L1160+sz_au_1
 30360 08:7C92: 26 62        	rol	<L1160+sz_au_1+2
 30361                        	.line	7006
 30362 08:7C94: 82 D3 00     	brl	L10711
 30363                        ;					}
 30364                        	.line	7007
 30365                        ;					if ((fsopt & FM_
                    FAT32))
 30366                        L10740:
 30367                        	.line	7008
 30368                        ;					{
 30369 08:7C97: E2 20        	sep	#$20
 30370                        	longa	off
 30371 08:7C99: A5 11        	lda	<L1160+fsopt_1
 30372 08:7C9B: 29 02        	and	#<$2
 30373 08:7C9D: C2 20        	rep	#$20
 30374                        	longa	on
 30375 08:7C9F: D0 03        	bne	L1260
 30376 08:7CA1: 82 0B 00     	brl	L10741
 30377                        L1260:
 30378                        	.line	7009
 30379                        ;						fsty = F
                    S_FAT32; continue; /* Switch type to FAT32 and retry */
 30380                        	.line	7010
 30381 08:7CA4: E2 20        	sep	#$20
 30382                        	longa	off
 30383 08:7CA6: A9 03        	lda	#$3
  Sat Jul 10 2021  1:15                                                Page 577


 30384 08:7CA8: 85 12        	sta	<L1160+fsty_1
 30385 08:7CAA: C2 20        	rep	#$20
 30386                        	longa	on
 30387                        	.line	7010
 30388 08:7CAC: 82 BB 00     	brl	L10711
 30389                        ;					}
 30390                        	.line	7011
 30391                        ;					if (sz_au == 0 &
                    & (sz_au = pau * 2) <= 128) continue; /* Adjust cluster size
                     and retry */
 30392                        L10741:
 30393                        	.line	7012
 30394 08:7CAF: A5 60        	lda	<L1160+sz_au_1
 30395 08:7CB1: 05 62        	ora	<L1160+sz_au_1+2
 30396 08:7CB3: F0 03        	beq	L1262
 30397 08:7CB5: 82 1B 00     	brl	L1261
 30398                        L1262:
 30399 08:7CB8: A5 2C        	lda	<L1160+pau_1
 30400 08:7CBA: 85 60        	sta	<L1160+sz_au_1
 30401 08:7CBC: A5 2E        	lda	<L1160+pau_1+2
 30402 08:7CBE: 85 62        	sta	<L1160+sz_au_1+2
 30403 08:7CC0: 06 60        	asl	<L1160+sz_au_1
 30404 08:7CC2: 26 62        	rol	<L1160+sz_au_1+2
 30405 08:7CC4: A9 80 00     	lda	#$80
 30406 08:7CC7: C5 60        	cmp	<L1160+sz_au_1
 30407 08:7CC9: A9 00 00     	lda	#$0
 30408 08:7CCC: E5 62        	sbc	<L1160+sz_au_1+2
 30409 08:7CCE: 90 03        	bcc	L1263
 30410 08:7CD0: 82 97 00     	brl	L10711
 30411                        L1263:
 30412                        L1261:
 30413                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 30414                        	.line	7013
 30415                        	.line	7013
 30416 08:7CD3: A5 7A        	lda	<L1159+work_0
 30417 08:7CD5: 05 7C        	ora	<L1159+work_0+2
 30418 08:7CD7: F0 03        	beq	L1264
 30419 08:7CD9: 82 08 00     	brl	L10742
 30420                        L1264:
 30421                        	.line	7013
 30422 08:7CDC: D4 16        	pei	<L1160+buf_1+2
 30423 08:7CDE: D4 14        	pei	<L1160+buf_1
 30424 08:7CE0: 22 D3 92 08  	jsl	~~ff_memfree
 30425                        L10742:
 30426                        	.line	7013
 30427 08:7CE4: A9 0E 00     	lda	#$e
 30428 08:7CE7: 82 F9 F5     	brl	L1166
 30429                        	.line	7013
 30430                        	.line	7013
 30431                        ;				}
 30432                        	.line	7014
 30433                        ;				if (n_clst <= MAX_FAT12)
 30434                        L10739:
 30435                        	.line	7015
 30436                        ;				{ /* Too few clusters fo
                    r FAT16 */
 30437 08:7CEA: A9 F5 0F     	lda	#$ff5
  Sat Jul 10 2021  1:15                                                Page 578


 30438 08:7CED: C5 28        	cmp	<L1160+n_clst_1
 30439 08:7CEF: A9 00 00     	lda	#$0
 30440 08:7CF2: E5 2A        	sbc	<L1160+n_clst_1+2
 30441 08:7CF4: B0 03        	bcs	L1265
 30442 08:7CF6: 82 3B 00     	brl	L10743
 30443                        L1265:
 30444                        	.line	7016
 30445                        ;					if (sz_au == 0 &
                    & (sz_au = pau * 2) <= 128) continue; /* Adjust cluster size
                     and retry */
 30446                        	.line	7017
 30447 08:7CF9: A5 60        	lda	<L1160+sz_au_1
 30448 08:7CFB: 05 62        	ora	<L1160+sz_au_1+2
 30449 08:7CFD: F0 03        	beq	L1267
 30450 08:7CFF: 82 1B 00     	brl	L1266
 30451                        L1267:
 30452 08:7D02: A5 2C        	lda	<L1160+pau_1
 30453 08:7D04: 85 60        	sta	<L1160+sz_au_1
 30454 08:7D06: A5 2E        	lda	<L1160+pau_1+2
 30455 08:7D08: 85 62        	sta	<L1160+sz_au_1+2
 30456 08:7D0A: 06 60        	asl	<L1160+sz_au_1
 30457 08:7D0C: 26 62        	rol	<L1160+sz_au_1+2
 30458 08:7D0E: A9 80 00     	lda	#$80
 30459 08:7D11: C5 60        	cmp	<L1160+sz_au_1
 30460 08:7D13: A9 00 00     	lda	#$0
 30461 08:7D16: E5 62        	sbc	<L1160+sz_au_1+2
 30462 08:7D18: 90 03        	bcc	L1268
 30463 08:7D1A: 82 4D 00     	brl	L10711
 30464                        L1268:
 30465                        L1266:
 30466                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 30467                        	.line	7018
 30468                        	.line	7018
 30469 08:7D1D: A5 7A        	lda	<L1159+work_0
 30470 08:7D1F: 05 7C        	ora	<L1159+work_0+2
 30471 08:7D21: F0 03        	beq	L1269
 30472 08:7D23: 82 08 00     	brl	L10744
 30473                        L1269:
 30474                        	.line	7018
 30475 08:7D26: D4 16        	pei	<L1160+buf_1+2
 30476 08:7D28: D4 14        	pei	<L1160+buf_1
 30477 08:7D2A: 22 D3 92 08  	jsl	~~ff_memfree
 30478                        L10744:
 30479                        	.line	7018
 30480 08:7D2E: A9 0E 00     	lda	#$e
 30481 08:7D31: 82 AF F5     	brl	L1166
 30482                        	.line	7018
 30483                        	.line	7018
 30484                        ;				}
 30485                        	.line	7019
 30486                        ;			}
 30487                        L10743:
 30488                        	.line	7020
 30489                        ;			if (fsty == FS_FAT12 && n_clst >
                     MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED); /* Too many cluster
                    s for FAT12 */
 30490                        L10738:
  Sat Jul 10 2021  1:15                                                Page 579


 30491                        	.line	7021
 30492 08:7D34: E2 20        	sep	#$20
 30493                        	longa	off
 30494 08:7D36: A5 12        	lda	<L1160+fsty_1
 30495 08:7D38: C9 01        	cmp	#<$1
 30496 08:7D3A: C2 20        	rep	#$20
 30497                        	longa	on
 30498 08:7D3C: F0 03        	beq	L1270
 30499 08:7D3E: 82 26 00     	brl	L10745
 30500                        L1270:
 30501 08:7D41: A9 F5 0F     	lda	#$ff5
 30502 08:7D44: C5 28        	cmp	<L1160+n_clst_1
 30503 08:7D46: A9 00 00     	lda	#$0
 30504 08:7D49: E5 2A        	sbc	<L1160+n_clst_1+2
 30505 08:7D4B: 90 03        	bcc	L1271
 30506 08:7D4D: 82 17 00     	brl	L10745
 30507                        L1271:
 30508                        	.line	7021
 30509                        	.line	7021
 30510 08:7D50: A5 7A        	lda	<L1159+work_0
 30511 08:7D52: 05 7C        	ora	<L1159+work_0+2
 30512 08:7D54: F0 03        	beq	L1272
 30513 08:7D56: 82 08 00     	brl	L10746
 30514                        L1272:
 30515                        	.line	7021
 30516 08:7D59: D4 16        	pei	<L1160+buf_1+2
 30517 08:7D5B: D4 14        	pei	<L1160+buf_1
 30518 08:7D5D: 22 D3 92 08  	jsl	~~ff_memfree
 30519                        L10746:
 30520                        	.line	7021
 30521 08:7D61: A9 0E 00     	lda	#$e
 30522 08:7D64: 82 7C F5     	brl	L1166
 30523                        	.line	7021
 30524                        L10745:
 30525                        	.line	7021
 30526                        ;
 30527                        ;			/* Ok, it is the valid cluster c
                    onfiguration */
 30528                        ;			break;
 30529                        	.line	7024
 30530 08:7D67: 82 03 00     	brl	L10712
 30531                        ;		}while (1);
 30532                        	.line	7025
 30533                        L10711:
 30534 08:7D6A: 82 5C FA     	brl	L10713
 30535                        L10712:
 30536                        ;
 30537                        ;#if FF_USE_TRIM
 30538                        ;		lba[0] = b_vol; lba[1] = b_vol + sz_vol 
                    - 1; /* Inform storage device that the volume area may be er
                    ased */
 30539                        ;		disk_ioctl(pdrv, CTRL_TRIM, lba);
 30540                        ;#endif
 30541                        ;		/* Create FAT VBR */
 30542                        ;		mem_set(buf, 0, ss);
 30543                        	.line	7032
 30544 08:7D6D: D4 1E        	pei	<L1160+ss_1
 30545 08:7D6F: F4 00 00     	pea	#<$0
  Sat Jul 10 2021  1:15                                                Page 580


 30546 08:7D72: D4 16        	pei	<L1160+buf_1+2
 30547 08:7D74: D4 14        	pei	<L1160+buf_1
 30548 08:7D76: 22 DF 01 08  	jsl	~~mem_set
 30549                        ;		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90"
                     "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 30550                        	.line	7033
 30551 08:7D7A: F4 0B 00     	pea	#<$b
 30552 08:7D7D: F4 xx xx     	pea	#^L1059
 30553 08:7D80: F4 xx xx     	pea	#<L1059
 30554 08:7D83: D4 16        	pei	<L1160+buf_1+2
 30555 08:7D85: D4 14        	pei	<L1160+buf_1
 30556 08:7D87: 22 93 01 08  	jsl	~~mem_cpy
 30557                        ;		st_word(buf + BPB_BytsPerSec, ss); /* Se
                    ctor size [byte] */
 30558                        	.line	7034
 30559 08:7D8B: D4 1E        	pei	<L1160+ss_1
 30560 08:7D8D: 18           	clc
 30561 08:7D8E: A9 0B 00     	lda	#$b
 30562 08:7D91: 65 14        	adc	<L1160+buf_1
 30563 08:7D93: 85 01        	sta	<R0
 30564 08:7D95: A9 00 00     	lda	#$0
 30565 08:7D98: 65 16        	adc	<L1160+buf_1+2
 30566 08:7D9A: 85 03        	sta	<R0+2
 30567 08:7D9C: D4 03        	pei	<R0+2
 30568 08:7D9E: D4 01        	pei	<R0
 30569 08:7DA0: 22 D7 00 08  	jsl	~~st_word
 30570                        ;		buf[BPB_SecPerClus] = (BYTE)pau; /* Clus
                    ter size [sector] */
 30571                        	.line	7035
 30572 08:7DA4: E2 20        	sep	#$20
 30573                        	longa	off
 30574 08:7DA6: A5 2C        	lda	<L1160+pau_1
 30575 08:7DA8: A0 0D 00     	ldy	#$d
 30576 08:7DAB: 97 14        	sta	[<L1160+buf_1],Y
 30577 08:7DAD: C2 20        	rep	#$20
 30578                        	longa	on
 30579                        ;		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_r
                    sv); /* Size of reserved area */
 30580                        	.line	7036
 30581 08:7DAF: D4 54        	pei	<L1160+sz_rsv_1
 30582 08:7DB1: 18           	clc
 30583 08:7DB2: A9 0E 00     	lda	#$e
 30584 08:7DB5: 65 14        	adc	<L1160+buf_1
 30585 08:7DB7: 85 01        	sta	<R0
 30586 08:7DB9: A9 00 00     	lda	#$0
 30587 08:7DBC: 65 16        	adc	<L1160+buf_1+2
 30588 08:7DBE: 85 03        	sta	<R0+2
 30589 08:7DC0: D4 03        	pei	<R0+2
 30590 08:7DC2: D4 01        	pei	<R0
 30591 08:7DC4: 22 D7 00 08  	jsl	~~st_word
 30592                        ;		buf[BPB_NumFATs] = (BYTE)n_fat; /* Numbe
                    r of FATs */
 30593                        	.line	7037
 30594 08:7DC8: E2 20        	sep	#$20
 30595                        	longa	off
 30596 08:7DCA: A5 64        	lda	<L1160+n_fat_1
 30597 08:7DCC: A0 10 00     	ldy	#$10
 30598 08:7DCF: 97 14        	sta	[<L1160+buf_1],Y
  Sat Jul 10 2021  1:15                                                Page 581


 30599 08:7DD1: C2 20        	rep	#$20
 30600                        	longa	on
 30601                        ;		st_word(buf + BPB_RootEntCnt, (WORD)((fs
                    ty == FS_FAT32) ? 0 : n_root)); /* Number of root directory 
                    entries */
 30602                        	.line	7038
 30603 08:7DD3: E2 20        	sep	#$20
 30604                        	longa	off
 30605 08:7DD5: A5 12        	lda	<L1160+fsty_1
 30606 08:7DD7: C9 03        	cmp	#<$3
 30607 08:7DD9: C2 20        	rep	#$20
 30608                        	longa	on
 30609 08:7DDB: F0 03        	beq	L1274
 30610 08:7DDD: 82 05 00     	brl	L1273
 30611                        L1274:
 30612 08:7DE0: A9 00 00     	lda	#$0
 30613 08:7DE3: 80 02        	bra	L1275
 30614                        L1273:
 30615 08:7DE5: A5 66        	lda	<L1160+n_root_1
 30616                        L1275:
 30617 08:7DE7: 48           	pha
 30618 08:7DE8: 18           	clc
 30619 08:7DE9: A9 11 00     	lda	#$11
 30620 08:7DEC: 65 14        	adc	<L1160+buf_1
 30621 08:7DEE: 85 01        	sta	<R0
 30622 08:7DF0: A9 00 00     	lda	#$0
 30623 08:7DF3: 65 16        	adc	<L1160+buf_1+2
 30624 08:7DF5: 85 03        	sta	<R0+2
 30625 08:7DF7: D4 03        	pei	<R0+2
 30626 08:7DF9: D4 01        	pei	<R0
 30627 08:7DFB: 22 D7 00 08  	jsl	~~st_word
 30628                        ;		if (sz_vol < 0x10000)
 30629                        	.line	7039
 30630                        ;		{
 30631 08:7DFF: A5 38        	lda	<L1160+sz_vol_1
 30632 08:7E01: C9 00 00     	cmp	#<$10000
 30633 08:7E04: A5 3A        	lda	<L1160+sz_vol_1+2
 30634 08:7E06: E9 01 00     	sbc	#^$10000
 30635 08:7E09: 90 03        	bcc	L1276
 30636 08:7E0B: 82 1C 00     	brl	L10747
 30637                        L1276:
 30638                        	.line	7040
 30639                        ;			st_word(buf + BPB_TotSec16, (WOR
                    D)sz_vol); /* Volume size in 16-bit LBA */
 30640                        	.line	7041
 30641 08:7E0E: D4 38        	pei	<L1160+sz_vol_1
 30642 08:7E10: 18           	clc
 30643 08:7E11: A9 13 00     	lda	#$13
 30644 08:7E14: 65 14        	adc	<L1160+buf_1
 30645 08:7E16: 85 01        	sta	<R0
 30646 08:7E18: A9 00 00     	lda	#$0
 30647 08:7E1B: 65 16        	adc	<L1160+buf_1+2
 30648 08:7E1D: 85 03        	sta	<R0+2
 30649 08:7E1F: D4 03        	pei	<R0+2
 30650 08:7E21: D4 01        	pei	<R0
 30651 08:7E23: 22 D7 00 08  	jsl	~~st_word
 30652                        ;		}
 30653                        	.line	7042
  Sat Jul 10 2021  1:15                                                Page 582


 30654                        ;		else
 30655 08:7E27: 82 1B 00     	brl	L10748
 30656                        L10747:
 30657                        ;		{
 30658                        	.line	7044
 30659                        ;			st_dword(buf + BPB_TotSec32, (DW
                    ORD)sz_vol); /* Volume size in 32-bit LBA */
 30660                        	.line	7045
 30661 08:7E2A: D4 3A        	pei	<L1160+sz_vol_1+2
 30662 08:7E2C: D4 38        	pei	<L1160+sz_vol_1
 30663 08:7E2E: 18           	clc
 30664 08:7E2F: A9 20 00     	lda	#$20
 30665 08:7E32: 65 14        	adc	<L1160+buf_1
 30666 08:7E34: 85 01        	sta	<R0
 30667 08:7E36: A9 00 00     	lda	#$0
 30668 08:7E39: 65 16        	adc	<L1160+buf_1+2
 30669 08:7E3B: 85 03        	sta	<R0+2
 30670 08:7E3D: D4 03        	pei	<R0+2
 30671 08:7E3F: D4 01        	pei	<R0
 30672 08:7E41: 22 16 01 08  	jsl	~~st_dword
 30673                        ;		}
 30674                        	.line	7046
 30675                        L10748:
 30676                        ;		buf[BPB_Media] = 0xF8; /* Media descript
                    or byte */
 30677                        	.line	7047
 30678 08:7E45: E2 20        	sep	#$20
 30679                        	longa	off
 30680 08:7E47: A9 F8        	lda	#$f8
 30681 08:7E49: A0 15 00     	ldy	#$15
 30682 08:7E4C: 97 14        	sta	[<L1160+buf_1],Y
 30683 08:7E4E: C2 20        	rep	#$20
 30684                        	longa	on
 30685                        ;		st_word(buf + BPB_SecPerTrk, 63); /* Num
                    ber of sectors per track (for int13) */
 30686                        	.line	7048
 30687 08:7E50: F4 3F 00     	pea	#<$3f
 30688 08:7E53: 18           	clc
 30689 08:7E54: A9 18 00     	lda	#$18
 30690 08:7E57: 65 14        	adc	<L1160+buf_1
 30691 08:7E59: 85 01        	sta	<R0
 30692 08:7E5B: A9 00 00     	lda	#$0
 30693 08:7E5E: 65 16        	adc	<L1160+buf_1+2
 30694 08:7E60: 85 03        	sta	<R0+2
 30695 08:7E62: D4 03        	pei	<R0+2
 30696 08:7E64: D4 01        	pei	<R0
 30697 08:7E66: 22 D7 00 08  	jsl	~~st_word
 30698                        ;		st_word(buf + BPB_NumHeads, 255); /* Num
                    ber of heads (for int13) */
 30699                        	.line	7049
 30700 08:7E6A: F4 FF 00     	pea	#<$ff
 30701 08:7E6D: 18           	clc
 30702 08:7E6E: A9 1A 00     	lda	#$1a
 30703 08:7E71: 65 14        	adc	<L1160+buf_1
 30704 08:7E73: 85 01        	sta	<R0
 30705 08:7E75: A9 00 00     	lda	#$0
 30706 08:7E78: 65 16        	adc	<L1160+buf_1+2
 30707 08:7E7A: 85 03        	sta	<R0+2
  Sat Jul 10 2021  1:15                                                Page 583


 30708 08:7E7C: D4 03        	pei	<R0+2
 30709 08:7E7E: D4 01        	pei	<R0
 30710 08:7E80: 22 D7 00 08  	jsl	~~st_word
 30711                        ;		st_dword(buf + BPB_HiddSec, (DWORD)b_vol
                    ); /* Volume offset in the physical drive [sector] */
 30712                        	.line	7050
 30713 08:7E84: D4 3E        	pei	<L1160+b_vol_1+2
 30714 08:7E86: D4 3C        	pei	<L1160+b_vol_1
 30715 08:7E88: 18           	clc
 30716 08:7E89: A9 1C 00     	lda	#$1c
 30717 08:7E8C: 65 14        	adc	<L1160+buf_1
 30718 08:7E8E: 85 01        	sta	<R0
 30719 08:7E90: A9 00 00     	lda	#$0
 30720 08:7E93: 65 16        	adc	<L1160+buf_1+2
 30721 08:7E95: 85 03        	sta	<R0+2
 30722 08:7E97: D4 03        	pei	<R0+2
 30723 08:7E99: D4 01        	pei	<R0
 30724 08:7E9B: 22 16 01 08  	jsl	~~st_dword
 30725                        ;		if (fsty == FS_FAT32)
 30726                        	.line	7051
 30727                        ;		{
 30728 08:7E9F: E2 20        	sep	#$20
 30729                        	longa	off
 30730 08:7EA1: A5 12        	lda	<L1160+fsty_1
 30731 08:7EA3: C9 03        	cmp	#<$3
 30732 08:7EA5: C2 20        	rep	#$20
 30733                        	longa	on
 30734 08:7EA7: F0 03        	beq	L1277
 30735 08:7EA9: 82 C2 00     	brl	L10749
 30736                        L1277:
 30737                        	.line	7052
 30738                        ;			st_dword(buf + BS_VolID32, GET_F
                    ATTIME()); /* VSN */
 30739                        	.line	7053
 30740 08:7EAC: F4 21 52     	pea	#^$52210000
 30741 08:7EAF: F4 00 00     	pea	#<$52210000
 30742 08:7EB2: 18           	clc
 30743 08:7EB3: A9 43 00     	lda	#$43
 30744 08:7EB6: 65 14        	adc	<L1160+buf_1
 30745 08:7EB8: 85 01        	sta	<R0
 30746 08:7EBA: A9 00 00     	lda	#$0
 30747 08:7EBD: 65 16        	adc	<L1160+buf_1+2
 30748 08:7EBF: 85 03        	sta	<R0+2
 30749 08:7EC1: D4 03        	pei	<R0+2
 30750 08:7EC3: D4 01        	pei	<R0
 30751 08:7EC5: 22 16 01 08  	jsl	~~st_dword
 30752                        ;			st_dword(buf + BPB_FATSz32, sz_f
                    at); /* FAT size [sector] */
 30753                        	.line	7054
 30754 08:7EC9: D4 5A        	pei	<L1160+sz_fat_1+2
 30755 08:7ECB: D4 58        	pei	<L1160+sz_fat_1
 30756 08:7ECD: 18           	clc
 30757 08:7ECE: A9 24 00     	lda	#$24
 30758 08:7ED1: 65 14        	adc	<L1160+buf_1
 30759 08:7ED3: 85 01        	sta	<R0
 30760 08:7ED5: A9 00 00     	lda	#$0
 30761 08:7ED8: 65 16        	adc	<L1160+buf_1+2
 30762 08:7EDA: 85 03        	sta	<R0+2
  Sat Jul 10 2021  1:15                                                Page 584


 30763 08:7EDC: D4 03        	pei	<R0+2
 30764 08:7EDE: D4 01        	pei	<R0
 30765 08:7EE0: 22 16 01 08  	jsl	~~st_dword
 30766                        ;			st_dword(buf + BPB_RootClus32, 2
                    ); /* Root directory cluster # (2) */
 30767                        	.line	7055
 30768 08:7EE4: F4 00 00     	pea	#^$2
 30769 08:7EE7: F4 02 00     	pea	#<$2
 30770 08:7EEA: 18           	clc
 30771 08:7EEB: A9 2C 00     	lda	#$2c
 30772 08:7EEE: 65 14        	adc	<L1160+buf_1
 30773 08:7EF0: 85 01        	sta	<R0
 30774 08:7EF2: A9 00 00     	lda	#$0
 30775 08:7EF5: 65 16        	adc	<L1160+buf_1+2
 30776 08:7EF7: 85 03        	sta	<R0+2
 30777 08:7EF9: D4 03        	pei	<R0+2
 30778 08:7EFB: D4 01        	pei	<R0
 30779 08:7EFD: 22 16 01 08  	jsl	~~st_dword
 30780                        ;			st_word(buf + BPB_FSInfo32, 1); 
                    /* Offset of FSINFO sector (VBR + 1) */
 30781                        	.line	7056
 30782 08:7F01: F4 01 00     	pea	#<$1
 30783 08:7F04: 18           	clc
 30784 08:7F05: A9 30 00     	lda	#$30
 30785 08:7F08: 65 14        	adc	<L1160+buf_1
 30786 08:7F0A: 85 01        	sta	<R0
 30787 08:7F0C: A9 00 00     	lda	#$0
 30788 08:7F0F: 65 16        	adc	<L1160+buf_1+2
 30789 08:7F11: 85 03        	sta	<R0+2
 30790 08:7F13: D4 03        	pei	<R0+2
 30791 08:7F15: D4 01        	pei	<R0
 30792 08:7F17: 22 D7 00 08  	jsl	~~st_word
 30793                        ;			st_word(buf + BPB_BkBootSec32, 6
                    ); /* Offset of backup VBR (VBR + 6) */
 30794                        	.line	7057
 30795 08:7F1B: F4 06 00     	pea	#<$6
 30796 08:7F1E: 18           	clc
 30797 08:7F1F: A9 32 00     	lda	#$32
 30798 08:7F22: 65 14        	adc	<L1160+buf_1
 30799 08:7F24: 85 01        	sta	<R0
 30800 08:7F26: A9 00 00     	lda	#$0
 30801 08:7F29: 65 16        	adc	<L1160+buf_1+2
 30802 08:7F2B: 85 03        	sta	<R0+2
 30803 08:7F2D: D4 03        	pei	<R0+2
 30804 08:7F2F: D4 01        	pei	<R0
 30805 08:7F31: 22 D7 00 08  	jsl	~~st_word
 30806                        ;			buf[BS_DrvNum32] = 0x80; /* Driv
                    e number (for int13) */
 30807                        	.line	7058
 30808 08:7F35: E2 20        	sep	#$20
 30809                        	longa	off
 30810 08:7F37: A9 80        	lda	#$80
 30811 08:7F39: A0 40 00     	ldy	#$40
 30812 08:7F3C: 97 14        	sta	[<L1160+buf_1],Y
 30813 08:7F3E: C2 20        	rep	#$20
 30814                        	longa	on
 30815                        ;			buf[BS_BootSig32] = 0x29; /* Ext
                    ended boot signature */
  Sat Jul 10 2021  1:15                                                Page 585


 30816                        	.line	7059
 30817 08:7F40: E2 20        	sep	#$20
 30818                        	longa	off
 30819 08:7F42: A9 29        	lda	#$29
 30820 08:7F44: A0 42 00     	ldy	#$42
 30821 08:7F47: 97 14        	sta	[<L1160+buf_1],Y
 30822 08:7F49: C2 20        	rep	#$20
 30823                        	longa	on
 30824                        ;			mem_cpy(buf + BS_VolLab32, "NO N
                    AME    " "FAT32   ", 19); /* Volume label, FAT signature */
 30825                        	.line	7060
 30826 08:7F4B: F4 13 00     	pea	#<$13
 30827 08:7F4E: F4 xx xx     	pea	#^L1059+12
 30828 08:7F51: F4 xx xx     	pea	#<L1059+12
 30829 08:7F54: 18           	clc
 30830 08:7F55: A9 47 00     	lda	#$47
 30831 08:7F58: 65 14        	adc	<L1160+buf_1
 30832 08:7F5A: 85 01        	sta	<R0
 30833 08:7F5C: A9 00 00     	lda	#$0
 30834 08:7F5F: 65 16        	adc	<L1160+buf_1+2
 30835 08:7F61: 85 03        	sta	<R0+2
 30836 08:7F63: D4 03        	pei	<R0+2
 30837 08:7F65: D4 01        	pei	<R0
 30838 08:7F67: 22 93 01 08  	jsl	~~mem_cpy
 30839                        ;		}
 30840                        	.line	7061
 30841                        ;		else
 30842 08:7F6B: 82 6C 00     	brl	L10750
 30843                        L10749:
 30844                        ;		{
 30845                        	.line	7063
 30846                        ;			st_dword(buf + BS_VolID, GET_FAT
                    TIME()); /* VSN */
 30847                        	.line	7064
 30848 08:7F6E: F4 21 52     	pea	#^$52210000
 30849 08:7F71: F4 00 00     	pea	#<$52210000
 30850 08:7F74: 18           	clc
 30851 08:7F75: A9 27 00     	lda	#$27
 30852 08:7F78: 65 14        	adc	<L1160+buf_1
 30853 08:7F7A: 85 01        	sta	<R0
 30854 08:7F7C: A9 00 00     	lda	#$0
 30855 08:7F7F: 65 16        	adc	<L1160+buf_1+2
 30856 08:7F81: 85 03        	sta	<R0+2
 30857 08:7F83: D4 03        	pei	<R0+2
 30858 08:7F85: D4 01        	pei	<R0
 30859 08:7F87: 22 16 01 08  	jsl	~~st_dword
 30860                        ;			st_word(buf + BPB_FATSz16, (WORD
                    )sz_fat); /* FAT size [sector] */
 30861                        	.line	7065
 30862 08:7F8B: D4 58        	pei	<L1160+sz_fat_1
 30863 08:7F8D: 18           	clc
 30864 08:7F8E: A9 16 00     	lda	#$16
 30865 08:7F91: 65 14        	adc	<L1160+buf_1
 30866 08:7F93: 85 01        	sta	<R0
 30867 08:7F95: A9 00 00     	lda	#$0
 30868 08:7F98: 65 16        	adc	<L1160+buf_1+2
 30869 08:7F9A: 85 03        	sta	<R0+2
 30870 08:7F9C: D4 03        	pei	<R0+2
  Sat Jul 10 2021  1:15                                                Page 586


 30871 08:7F9E: D4 01        	pei	<R0
 30872 08:7FA0: 22 D7 00 08  	jsl	~~st_word
 30873                        ;			buf[BS_DrvNum] = 0x80; /* Drive 
                    number (for int13) */
 30874                        	.line	7066
 30875 08:7FA4: E2 20        	sep	#$20
 30876                        	longa	off
 30877 08:7FA6: A9 80        	lda	#$80
 30878 08:7FA8: A0 24 00     	ldy	#$24
 30879 08:7FAB: 97 14        	sta	[<L1160+buf_1],Y
 30880 08:7FAD: C2 20        	rep	#$20
 30881                        	longa	on
 30882                        ;			buf[BS_BootSig] = 0x29; /* Exten
                    ded boot signature */
 30883                        	.line	7067
 30884 08:7FAF: E2 20        	sep	#$20
 30885                        	longa	off
 30886 08:7FB1: A9 29        	lda	#$29
 30887 08:7FB3: A0 26 00     	ldy	#$26
 30888 08:7FB6: 97 14        	sta	[<L1160+buf_1],Y
 30889 08:7FB8: C2 20        	rep	#$20
 30890                        	longa	on
 30891                        ;			mem_cpy(buf + BS_VolLab, "NO NAM
                    E    " "FAT     ", 19); /* Volume label, FAT signature */
 30892                        	.line	7068
 30893 08:7FBA: F4 13 00     	pea	#<$13
 30894 08:7FBD: F4 xx xx     	pea	#^L1059+32
 30895 08:7FC0: F4 xx xx     	pea	#<L1059+32
 30896 08:7FC3: 18           	clc
 30897 08:7FC4: A9 2B 00     	lda	#$2b
 30898 08:7FC7: 65 14        	adc	<L1160+buf_1
 30899 08:7FC9: 85 01        	sta	<R0
 30900 08:7FCB: A9 00 00     	lda	#$0
 30901 08:7FCE: 65 16        	adc	<L1160+buf_1+2
 30902 08:7FD0: 85 03        	sta	<R0+2
 30903 08:7FD2: D4 03        	pei	<R0+2
 30904 08:7FD4: D4 01        	pei	<R0
 30905 08:7FD6: 22 93 01 08  	jsl	~~mem_cpy
 30906                        ;		}
 30907                        	.line	7069
 30908                        L10750:
 30909                        ;		st_word(buf + BS_55AA, 0xAA55); /* Signa
                    ture (offset is fixed here regardless of sector size) */
 30910                        	.line	7070
 30911 08:7FDA: F4 55 AA     	pea	#<$aa55
 30912 08:7FDD: 18           	clc
 30913 08:7FDE: A9 FE 01     	lda	#$1fe
 30914 08:7FE1: 65 14        	adc	<L1160+buf_1
 30915 08:7FE3: 85 01        	sta	<R0
 30916 08:7FE5: A9 00 00     	lda	#$0
 30917 08:7FE8: 65 16        	adc	<L1160+buf_1+2
 30918 08:7FEA: 85 03        	sta	<R0+2
 30919 08:7FEC: D4 03        	pei	<R0+2
 30920 08:7FEE: D4 01        	pei	<R0
 30921 08:7FF0: 22 D7 00 08  	jsl	~~st_word
 30922                        ;		if (disk_write(pdrv, buf, b_vol, 1) != R
                    ES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Write it to the VBR secto
                    r */
  Sat Jul 10 2021  1:15                                                Page 587


 30923                        	.line	7071
 30924 08:7FF4: F4 01 00     	pea	#<$1
 30925 08:7FF7: D4 3E        	pei	<L1160+b_vol_1+2
 30926 08:7FF9: D4 3C        	pei	<L1160+b_vol_1
 30927 08:7FFB: D4 16        	pei	<L1160+buf_1+2
 30928 08:7FFD: D4 14        	pei	<L1160+buf_1
 30929 08:7FFF: D4 1C        	pei	<L1160+pdrv_1
 30930 08:8001: 22 xx xx xx  	jsl	~~disk_write
 30931 08:8005: AA           	tax
 30932 08:8006: D0 03        	bne	L1278
 30933 08:8008: 82 17 00     	brl	L10751
 30934                        L1278:
 30935                        	.line	7071
 30936                        	.line	7071
 30937 08:800B: A5 7A        	lda	<L1159+work_0
 30938 08:800D: 05 7C        	ora	<L1159+work_0+2
 30939 08:800F: F0 03        	beq	L1279
 30940 08:8011: 82 08 00     	brl	L10752
 30941                        L1279:
 30942                        	.line	7071
 30943 08:8014: D4 16        	pei	<L1160+buf_1+2
 30944 08:8016: D4 14        	pei	<L1160+buf_1
 30945 08:8018: 22 D3 92 08  	jsl	~~ff_memfree
 30946                        L10752:
 30947                        	.line	7071
 30948 08:801C: A9 01 00     	lda	#$1
 30949 08:801F: 82 C1 F2     	brl	L1166
 30950                        	.line	7071
 30951                        L10751:
 30952                        	.line	7071
 30953                        ;
 30954                        ;		/* Create FSINFO record if needed */
 30955                        ;		if (fsty == FS_FAT32)
 30956                        	.line	7074
 30957                        ;		{
 30958 08:8022: E2 20        	sep	#$20
 30959                        	longa	off
 30960 08:8024: A5 12        	lda	<L1160+fsty_1
 30961 08:8026: C9 03        	cmp	#<$3
 30962 08:8028: C2 20        	rep	#$20
 30963                        	longa	on
 30964 08:802A: F0 03        	beq	L1280
 30965 08:802C: 82 F9 00     	brl	L10753
 30966                        L1280:
 30967                        	.line	7075
 30968                        ;			disk_write(pdrv, buf, b_vol + 6,
                     1); /* Write backup VBR (VBR + 6) */
 30969                        	.line	7076
 30970 08:802F: F4 01 00     	pea	#<$1
 30971 08:8032: 18           	clc
 30972 08:8033: A9 06 00     	lda	#$6
 30973 08:8036: 65 3C        	adc	<L1160+b_vol_1
 30974 08:8038: 85 01        	sta	<R0
 30975 08:803A: A9 00 00     	lda	#$0
 30976 08:803D: 65 3E        	adc	<L1160+b_vol_1+2
 30977 08:803F: 85 03        	sta	<R0+2
 30978 08:8041: D4 03        	pei	<R0+2
 30979 08:8043: D4 01        	pei	<R0
  Sat Jul 10 2021  1:15                                                Page 588


 30980 08:8045: D4 16        	pei	<L1160+buf_1+2
 30981 08:8047: D4 14        	pei	<L1160+buf_1
 30982 08:8049: D4 1C        	pei	<L1160+pdrv_1
 30983 08:804B: 22 xx xx xx  	jsl	~~disk_write
 30984                        ;			mem_set(buf, 0, ss);
 30985                        	.line	7077
 30986 08:804F: D4 1E        	pei	<L1160+ss_1
 30987 08:8051: F4 00 00     	pea	#<$0
 30988 08:8054: D4 16        	pei	<L1160+buf_1+2
 30989 08:8056: D4 14        	pei	<L1160+buf_1
 30990 08:8058: 22 DF 01 08  	jsl	~~mem_set
 30991                        ;			st_dword(buf + FSI_LeadSig, 0x41
                    615252);
 30992                        	.line	7078
 30993 08:805C: F4 61 41     	pea	#^$41615252
 30994 08:805F: F4 52 52     	pea	#<$41615252
 30995 08:8062: D4 16        	pei	<L1160+buf_1+2
 30996 08:8064: D4 14        	pei	<L1160+buf_1
 30997 08:8066: 22 16 01 08  	jsl	~~st_dword
 30998                        ;			st_dword(buf + FSI_StrucSig, 0x6
                    1417272);
 30999                        	.line	7079
 31000 08:806A: F4 41 61     	pea	#^$61417272
 31001 08:806D: F4 72 72     	pea	#<$61417272
 31002 08:8070: 18           	clc
 31003 08:8071: A9 E4 01     	lda	#$1e4
 31004 08:8074: 65 14        	adc	<L1160+buf_1
 31005 08:8076: 85 01        	sta	<R0
 31006 08:8078: A9 00 00     	lda	#$0
 31007 08:807B: 65 16        	adc	<L1160+buf_1+2
 31008 08:807D: 85 03        	sta	<R0+2
 31009 08:807F: D4 03        	pei	<R0+2
 31010 08:8081: D4 01        	pei	<R0
 31011 08:8083: 22 16 01 08  	jsl	~~st_dword
 31012                        ;			st_dword(buf + FSI_Free_Count, n
                    _clst - 1); /* Number of free clusters */
 31013                        	.line	7080
 31014 08:8087: 18           	clc
 31015 08:8088: A9 FF FF     	lda	#$ffff
 31016 08:808B: 65 28        	adc	<L1160+n_clst_1
 31017 08:808D: 85 01        	sta	<R0
 31018 08:808F: A9 FF FF     	lda	#$ffff
 31019 08:8092: 65 2A        	adc	<L1160+n_clst_1+2
 31020 08:8094: 85 03        	sta	<R0+2
 31021 08:8096: D4 03        	pei	<R0+2
 31022 08:8098: D4 01        	pei	<R0
 31023 08:809A: 18           	clc
 31024 08:809B: A9 E8 01     	lda	#$1e8
 31025 08:809E: 65 14        	adc	<L1160+buf_1
 31026 08:80A0: 85 05        	sta	<R1
 31027 08:80A2: A9 00 00     	lda	#$0
 31028 08:80A5: 65 16        	adc	<L1160+buf_1+2
 31029 08:80A7: 85 07        	sta	<R1+2
 31030 08:80A9: D4 07        	pei	<R1+2
 31031 08:80AB: D4 05        	pei	<R1
 31032 08:80AD: 22 16 01 08  	jsl	~~st_dword
 31033                        ;			st_dword(buf + FSI_Nxt_Free, 2);
                     /* Last allocated cluster# */
  Sat Jul 10 2021  1:15                                                Page 589


 31034                        	.line	7081
 31035 08:80B1: F4 00 00     	pea	#^$2
 31036 08:80B4: F4 02 00     	pea	#<$2
 31037 08:80B7: 18           	clc
 31038 08:80B8: A9 EC 01     	lda	#$1ec
 31039 08:80BB: 65 14        	adc	<L1160+buf_1
 31040 08:80BD: 85 01        	sta	<R0
 31041 08:80BF: A9 00 00     	lda	#$0
 31042 08:80C2: 65 16        	adc	<L1160+buf_1+2
 31043 08:80C4: 85 03        	sta	<R0+2
 31044 08:80C6: D4 03        	pei	<R0+2
 31045 08:80C8: D4 01        	pei	<R0
 31046 08:80CA: 22 16 01 08  	jsl	~~st_dword
 31047                        ;			st_word(buf + BS_55AA, 0xAA55);
 31048                        	.line	7082
 31049 08:80CE: F4 55 AA     	pea	#<$aa55
 31050 08:80D1: 18           	clc
 31051 08:80D2: A9 FE 01     	lda	#$1fe
 31052 08:80D5: 65 14        	adc	<L1160+buf_1
 31053 08:80D7: 85 01        	sta	<R0
 31054 08:80D9: A9 00 00     	lda	#$0
 31055 08:80DC: 65 16        	adc	<L1160+buf_1+2
 31056 08:80DE: 85 03        	sta	<R0+2
 31057 08:80E0: D4 03        	pei	<R0+2
 31058 08:80E2: D4 01        	pei	<R0
 31059 08:80E4: 22 D7 00 08  	jsl	~~st_word
 31060                        ;			disk_write(pdrv, buf, b_vol + 7,
                     1); /* Write backup FSINFO (VBR + 7) */
 31061                        	.line	7083
 31062 08:80E8: F4 01 00     	pea	#<$1
 31063 08:80EB: 18           	clc
 31064 08:80EC: A9 07 00     	lda	#$7
 31065 08:80EF: 65 3C        	adc	<L1160+b_vol_1
 31066 08:80F1: 85 01        	sta	<R0
 31067 08:80F3: A9 00 00     	lda	#$0
 31068 08:80F6: 65 3E        	adc	<L1160+b_vol_1+2
 31069 08:80F8: 85 03        	sta	<R0+2
 31070 08:80FA: D4 03        	pei	<R0+2
 31071 08:80FC: D4 01        	pei	<R0
 31072 08:80FE: D4 16        	pei	<L1160+buf_1+2
 31073 08:8100: D4 14        	pei	<L1160+buf_1
 31074 08:8102: D4 1C        	pei	<L1160+pdrv_1
 31075 08:8104: 22 xx xx xx  	jsl	~~disk_write
 31076                        ;			disk_write(pdrv, buf, b_vol + 1,
                     1); /* Write original FSINFO (VBR + 1) */
 31077                        	.line	7084
 31078 08:8108: F4 01 00     	pea	#<$1
 31079 08:810B: 18           	clc
 31080 08:810C: A9 01 00     	lda	#$1
 31081 08:810F: 65 3C        	adc	<L1160+b_vol_1
 31082 08:8111: 85 01        	sta	<R0
 31083 08:8113: A9 00 00     	lda	#$0
 31084 08:8116: 65 3E        	adc	<L1160+b_vol_1+2
 31085 08:8118: 85 03        	sta	<R0+2
 31086 08:811A: D4 03        	pei	<R0+2
 31087 08:811C: D4 01        	pei	<R0
 31088 08:811E: D4 16        	pei	<L1160+buf_1+2
 31089 08:8120: D4 14        	pei	<L1160+buf_1
  Sat Jul 10 2021  1:15                                                Page 590


 31090 08:8122: D4 1C        	pei	<L1160+pdrv_1
 31091 08:8124: 22 xx xx xx  	jsl	~~disk_write
 31092                        ;		}
 31093                        	.line	7085
 31094                        ;
 31095                        ;		/* Initialize FAT area */
 31096                        ;		mem_set(buf, 0, sz_buf * ss);
 31097                        L10753:
 31098                        	.line	7088
 31099 08:8128: A0 00 00     	ldy	#$0
 31100 08:812B: A5 1E        	lda	<L1160+ss_1
 31101 08:812D: 10 01        	bpl	L1281
 31102 08:812F: 88           	dey
 31103                        L1281:
 31104 08:8130: 85 01        	sta	<R0
 31105 08:8132: 84 03        	sty	<R0+2
 31106 08:8134: D4 22        	pei	<L1160+sz_buf_1+2
 31107 08:8136: D4 20        	pei	<L1160+sz_buf_1
 31108 08:8138: D4 03        	pei	<R0+2
 31109 08:813A: D4 01        	pei	<R0
 31110                        	xref	~~~lmul
 31111 08:813C: 22 xx xx xx  	jsl	~~~lmul
 31112 08:8140: 85 01        	sta	<R0
 31113 08:8142: 86 03        	stx	<R0+2
 31114 08:8144: D4 01        	pei	<R0
 31115 08:8146: F4 00 00     	pea	#<$0
 31116 08:8149: D4 16        	pei	<L1160+buf_1+2
 31117 08:814B: D4 14        	pei	<L1160+buf_1
 31118 08:814D: 22 DF 01 08  	jsl	~~mem_set
 31119                        ;		sect = b_fat; /* FAT start sector */
 31120                        	.line	7089
 31121 08:8151: A5 40        	lda	<L1160+b_fat_1
 31122 08:8153: 85 48        	sta	<L1160+sect_1
 31123 08:8155: A5 42        	lda	<L1160+b_fat_1+2
 31124 08:8157: 85 4A        	sta	<L1160+sect_1+2
 31125                        ;		for (i = 0; i < n_fat; i++)
 31126                        	.line	7090
 31127 08:8159: 64 68        	stz	<L1160+i_1
 31128 08:815B: 82 0F 01     	brl	L10757
 31129                        L10756:
 31130                        ;		{ /* Initialize FATs each */
 31131                        	.line	7091
 31132                        ;			if (fsty == FS_FAT32)
 31133                        	.line	7092
 31134                        ;			{
 31135 08:815E: E2 20        	sep	#$20
 31136                        	longa	off
 31137 08:8160: A5 12        	lda	<L1160+fsty_1
 31138 08:8162: C9 03        	cmp	#<$3
 31139 08:8164: C2 20        	rep	#$20
 31140                        	longa	on
 31141 08:8166: F0 03        	beq	L1282
 31142 08:8168: 82 4B 00     	brl	L10758
 31143                        L1282:
 31144                        	.line	7093
 31145                        ;				st_dword(buf + 0, 0xFFFF
                    FFF8); /* FAT[0] */
 31146                        	.line	7094
  Sat Jul 10 2021  1:15                                                Page 591


 31147 08:816B: F4 FF FF     	pea	#^$fffffff8
 31148 08:816E: F4 F8 FF     	pea	#<$fffffff8
 31149 08:8171: D4 16        	pei	<L1160+buf_1+2
 31150 08:8173: D4 14        	pei	<L1160+buf_1
 31151 08:8175: 22 16 01 08  	jsl	~~st_dword
 31152                        ;				st_dword(buf + 4, 0xFFFF
                    FFFF); /* FAT[1] */
 31153                        	.line	7095
 31154 08:8179: F4 FF FF     	pea	#^$ffffffff
 31155 08:817C: F4 FF FF     	pea	#<$ffffffff
 31156 08:817F: 18           	clc
 31157 08:8180: A9 04 00     	lda	#$4
 31158 08:8183: 65 14        	adc	<L1160+buf_1
 31159 08:8185: 85 01        	sta	<R0
 31160 08:8187: A9 00 00     	lda	#$0
 31161 08:818A: 65 16        	adc	<L1160+buf_1+2
 31162 08:818C: 85 03        	sta	<R0+2
 31163 08:818E: D4 03        	pei	<R0+2
 31164 08:8190: D4 01        	pei	<R0
 31165 08:8192: 22 16 01 08  	jsl	~~st_dword
 31166                        ;				st_dword(buf + 8, 0x0FFF
                    FFFF); /* FAT[2] (root directory) */
 31167                        	.line	7096
 31168 08:8196: F4 FF 0F     	pea	#^$fffffff
 31169 08:8199: F4 FF FF     	pea	#<$fffffff
 31170 08:819C: 18           	clc
 31171 08:819D: A9 08 00     	lda	#$8
 31172 08:81A0: 65 14        	adc	<L1160+buf_1
 31173 08:81A2: 85 01        	sta	<R0
 31174 08:81A4: A9 00 00     	lda	#$0
 31175 08:81A7: 65 16        	adc	<L1160+buf_1+2
 31176 08:81A9: 85 03        	sta	<R0+2
 31177 08:81AB: D4 03        	pei	<R0+2
 31178 08:81AD: D4 01        	pei	<R0
 31179 08:81AF: 22 16 01 08  	jsl	~~st_dword
 31180                        ;			}
 31181                        	.line	7097
 31182                        ;			else
 31183 08:81B3: 82 2D 00     	brl	L10759
 31184                        L10758:
 31185                        ;			{
 31186                        	.line	7099
 31187                        ;				st_dword(buf + 0, (fsty 
                    == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8); /* FAT[0] and FAT[1] 
                    */
 31188                        	.line	7100
 31189 08:81B6: E2 20        	sep	#$20
 31190                        	longa	off
 31191 08:81B8: A5 12        	lda	<L1160+fsty_1
 31192 08:81BA: C9 01        	cmp	#<$1
 31193 08:81BC: C2 20        	rep	#$20
 31194                        	longa	on
 31195 08:81BE: F0 03        	beq	L1284
 31196 08:81C0: 82 09 00     	brl	L1283
 31197                        L1284:
 31198 08:81C3: A9 FF 00     	lda	#$ff
 31199 08:81C6: AA           	tax
 31200 08:81C7: A9 F8 FF     	lda	#$fff8
  Sat Jul 10 2021  1:15                                                Page 592


 31201 08:81CA: 80 07        	bra	L1285
 31202                        L1283:
 31203 08:81CC: A9 FF FF     	lda	#$ffff
 31204 08:81CF: AA           	tax
 31205 08:81D0: A9 F8 FF     	lda	#$fff8
 31206                        L1285:
 31207 08:81D3: 85 01        	sta	<R0
 31208 08:81D5: 86 03        	stx	<R0+2
 31209 08:81D7: D4 03        	pei	<R0+2
 31210 08:81D9: D4 01        	pei	<R0
 31211 08:81DB: D4 16        	pei	<L1160+buf_1+2
 31212 08:81DD: D4 14        	pei	<L1160+buf_1
 31213 08:81DF: 22 16 01 08  	jsl	~~st_dword
 31214                        ;			}
 31215                        	.line	7101
 31216                        L10759:
 31217                        ;			nsect = sz_fat; /* Number of FAT
                     sectors */
 31218                        	.line	7102
 31219 08:81E3: A5 58        	lda	<L1160+sz_fat_1
 31220 08:81E5: 85 30        	sta	<L1160+nsect_1
 31221 08:81E7: A5 5A        	lda	<L1160+sz_fat_1+2
 31222 08:81E9: 85 32        	sta	<L1160+nsect_1+2
 31223                        ;			do
 31224                        	.line	7103
 31225                        L10762:
 31226                        ;			{ /* Fill FAT sectors */
 31227                        	.line	7104
 31228                        ;				n = (nsect > sz_buf) ? s
                    z_buf : nsect;
 31229                        	.line	7105
 31230 08:81EB: A5 20        	lda	<L1160+sz_buf_1
 31231 08:81ED: C5 30        	cmp	<L1160+nsect_1
 31232 08:81EF: A5 22        	lda	<L1160+sz_buf_1+2
 31233 08:81F1: E5 32        	sbc	<L1160+nsect_1+2
 31234 08:81F3: 90 03        	bcc	L1287
 31235 08:81F5: 82 06 00     	brl	L1286
 31236                        L1287:
 31237 08:81F8: A6 22        	ldx	<L1160+sz_buf_1+2
 31238 08:81FA: A5 20        	lda	<L1160+sz_buf_1
 31239 08:81FC: 80 04        	bra	L1288
 31240                        L1286:
 31241 08:81FE: A6 32        	ldx	<L1160+nsect_1+2
 31242 08:8200: A5 30        	lda	<L1160+nsect_1
 31243                        L1288:
 31244 08:8202: 85 01        	sta	<R0
 31245 08:8204: 86 03        	stx	<R0+2
 31246 08:8206: A5 01        	lda	<R0
 31247 08:8208: 85 34        	sta	<L1160+n_1
 31248 08:820A: A5 03        	lda	<R0+2
 31249 08:820C: 85 36        	sta	<L1160+n_1+2
 31250                        ;				if (disk_write(pdrv, buf
                    , sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 31251                        	.line	7106
 31252 08:820E: D4 34        	pei	<L1160+n_1
 31253 08:8210: D4 4A        	pei	<L1160+sect_1+2
 31254 08:8212: D4 48        	pei	<L1160+sect_1
 31255 08:8214: D4 16        	pei	<L1160+buf_1+2
  Sat Jul 10 2021  1:15                                                Page 593


 31256 08:8216: D4 14        	pei	<L1160+buf_1
 31257 08:8218: D4 1C        	pei	<L1160+pdrv_1
 31258 08:821A: 22 xx xx xx  	jsl	~~disk_write
 31259 08:821E: AA           	tax
 31260 08:821F: D0 03        	bne	L1289
 31261 08:8221: 82 17 00     	brl	L10763
 31262                        L1289:
 31263                        	.line	7106
 31264                        	.line	7106
 31265 08:8224: A5 7A        	lda	<L1159+work_0
 31266 08:8226: 05 7C        	ora	<L1159+work_0+2
 31267 08:8228: F0 03        	beq	L1290
 31268 08:822A: 82 08 00     	brl	L10764
 31269                        L1290:
 31270                        	.line	7106
 31271 08:822D: D4 16        	pei	<L1160+buf_1+2
 31272 08:822F: D4 14        	pei	<L1160+buf_1
 31273 08:8231: 22 D3 92 08  	jsl	~~ff_memfree
 31274                        L10764:
 31275                        	.line	7106
 31276 08:8235: A9 01 00     	lda	#$1
 31277 08:8238: 82 A8 F0     	brl	L1166
 31278                        	.line	7106
 31279                        L10763:
 31280                        	.line	7106
 31281                        ;				mem_set(buf, 0, ss); /* 
                    Rest of FAT all are cleared */
 31282                        	.line	7107
 31283 08:823B: D4 1E        	pei	<L1160+ss_1
 31284 08:823D: F4 00 00     	pea	#<$0
 31285 08:8240: D4 16        	pei	<L1160+buf_1+2
 31286 08:8242: D4 14        	pei	<L1160+buf_1
 31287 08:8244: 22 DF 01 08  	jsl	~~mem_set
 31288                        ;				sect += n; nsect -= n;
 31289                        	.line	7108
 31290 08:8248: 18           	clc
 31291 08:8249: A5 48        	lda	<L1160+sect_1
 31292 08:824B: 65 34        	adc	<L1160+n_1
 31293 08:824D: 85 48        	sta	<L1160+sect_1
 31294 08:824F: A5 4A        	lda	<L1160+sect_1+2
 31295 08:8251: 65 36        	adc	<L1160+n_1+2
 31296 08:8253: 85 4A        	sta	<L1160+sect_1+2
 31297                        	.line	7108
 31298 08:8255: 38           	sec
 31299 08:8256: A5 30        	lda	<L1160+nsect_1
 31300 08:8258: E5 34        	sbc	<L1160+n_1
 31301 08:825A: 85 30        	sta	<L1160+nsect_1
 31302 08:825C: A5 32        	lda	<L1160+nsect_1+2
 31303 08:825E: E5 36        	sbc	<L1160+n_1+2
 31304 08:8260: 85 32        	sta	<L1160+nsect_1+2
 31305                        ;			}while (nsect);
 31306                        	.line	7109
 31307                        L10760:
 31308 08:8262: A5 30        	lda	<L1160+nsect_1
 31309 08:8264: 05 32        	ora	<L1160+nsect_1+2
 31310 08:8266: F0 03        	beq	L1291
 31311 08:8268: 82 80 FF     	brl	L10762
 31312                        L1291:
  Sat Jul 10 2021  1:15                                                Page 594


 31313                        L10761:
 31314                        ;		}
 31315                        	.line	7110
 31316                        L10754:
 31317 08:826B: E6 68        	inc	<L1160+i_1
 31318                        L10757:
 31319 08:826D: A5 68        	lda	<L1160+i_1
 31320 08:826F: C5 64        	cmp	<L1160+n_fat_1
 31321 08:8271: B0 03        	bcs	L1292
 31322 08:8273: 82 E8 FE     	brl	L10756
 31323                        L1292:
 31324                        L10755:
 31325                        ;
 31326                        ;		/* Initialize root directory (fill with 
                    zero) */
 31327                        ;		nsect = (fsty == FS_FAT32) ? pau : sz_di
                    r; /* Number of root directory sectors */
 31328                        	.line	7113
 31329 08:8276: E2 20        	sep	#$20
 31330                        	longa	off
 31331 08:8278: A5 12        	lda	<L1160+fsty_1
 31332 08:827A: C9 03        	cmp	#<$3
 31333 08:827C: C2 20        	rep	#$20
 31334                        	longa	on
 31335 08:827E: F0 03        	beq	L1294
 31336 08:8280: 82 06 00     	brl	L1293
 31337                        L1294:
 31338 08:8283: A6 2E        	ldx	<L1160+pau_1+2
 31339 08:8285: A5 2C        	lda	<L1160+pau_1
 31340 08:8287: 80 04        	bra	L1295
 31341                        L1293:
 31342 08:8289: A6 5E        	ldx	<L1160+sz_dir_1+2
 31343 08:828B: A5 5C        	lda	<L1160+sz_dir_1
 31344                        L1295:
 31345 08:828D: 85 01        	sta	<R0
 31346 08:828F: 86 03        	stx	<R0+2
 31347 08:8291: A5 01        	lda	<R0
 31348 08:8293: 85 30        	sta	<L1160+nsect_1
 31349 08:8295: A5 03        	lda	<R0+2
 31350 08:8297: 85 32        	sta	<L1160+nsect_1+2
 31351                        ;		do
 31352                        	.line	7114
 31353                        L10767:
 31354                        ;		{
 31355                        	.line	7115
 31356                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;
 31357                        	.line	7116
 31358 08:8299: A5 20        	lda	<L1160+sz_buf_1
 31359 08:829B: C5 30        	cmp	<L1160+nsect_1
 31360 08:829D: A5 22        	lda	<L1160+sz_buf_1+2
 31361 08:829F: E5 32        	sbc	<L1160+nsect_1+2
 31362 08:82A1: 90 03        	bcc	L1297
 31363 08:82A3: 82 06 00     	brl	L1296
 31364                        L1297:
 31365 08:82A6: A6 22        	ldx	<L1160+sz_buf_1+2
 31366 08:82A8: A5 20        	lda	<L1160+sz_buf_1
 31367 08:82AA: 80 04        	bra	L1298
  Sat Jul 10 2021  1:15                                                Page 595


 31368                        L1296:
 31369 08:82AC: A6 32        	ldx	<L1160+nsect_1+2
 31370 08:82AE: A5 30        	lda	<L1160+nsect_1
 31371                        L1298:
 31372 08:82B0: 85 01        	sta	<R0
 31373 08:82B2: 86 03        	stx	<R0+2
 31374 08:82B4: A5 01        	lda	<R0
 31375 08:82B6: 85 34        	sta	<L1160+n_1
 31376 08:82B8: A5 03        	lda	<R0+2
 31377 08:82BA: 85 36        	sta	<L1160+n_1+2
 31378                        ;			if (disk_write(pdrv, buf, sect, 
                    (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 31379                        	.line	7117
 31380 08:82BC: D4 34        	pei	<L1160+n_1
 31381 08:82BE: D4 4A        	pei	<L1160+sect_1+2
 31382 08:82C0: D4 48        	pei	<L1160+sect_1
 31383 08:82C2: D4 16        	pei	<L1160+buf_1+2
 31384 08:82C4: D4 14        	pei	<L1160+buf_1
 31385 08:82C6: D4 1C        	pei	<L1160+pdrv_1
 31386 08:82C8: 22 xx xx xx  	jsl	~~disk_write
 31387 08:82CC: AA           	tax
 31388 08:82CD: D0 03        	bne	L1299
 31389 08:82CF: 82 17 00     	brl	L10768
 31390                        L1299:
 31391                        	.line	7117
 31392                        	.line	7117
 31393 08:82D2: A5 7A        	lda	<L1159+work_0
 31394 08:82D4: 05 7C        	ora	<L1159+work_0+2
 31395 08:82D6: F0 03        	beq	L1300
 31396 08:82D8: 82 08 00     	brl	L10769
 31397                        L1300:
 31398                        	.line	7117
 31399 08:82DB: D4 16        	pei	<L1160+buf_1+2
 31400 08:82DD: D4 14        	pei	<L1160+buf_1
 31401 08:82DF: 22 D3 92 08  	jsl	~~ff_memfree
 31402                        L10769:
 31403                        	.line	7117
 31404 08:82E3: A9 01 00     	lda	#$1
 31405 08:82E6: 82 FA EF     	brl	L1166
 31406                        	.line	7117
 31407                        L10768:
 31408                        	.line	7117
 31409                        ;			sect += n; nsect -= n;
 31410                        	.line	7118
 31411 08:82E9: 18           	clc
 31412 08:82EA: A5 48        	lda	<L1160+sect_1
 31413 08:82EC: 65 34        	adc	<L1160+n_1
 31414 08:82EE: 85 48        	sta	<L1160+sect_1
 31415 08:82F0: A5 4A        	lda	<L1160+sect_1+2
 31416 08:82F2: 65 36        	adc	<L1160+n_1+2
 31417 08:82F4: 85 4A        	sta	<L1160+sect_1+2
 31418                        	.line	7118
 31419 08:82F6: 38           	sec
 31420 08:82F7: A5 30        	lda	<L1160+nsect_1
 31421 08:82F9: E5 34        	sbc	<L1160+n_1
 31422 08:82FB: 85 30        	sta	<L1160+nsect_1
 31423 08:82FD: A5 32        	lda	<L1160+nsect_1+2
 31424 08:82FF: E5 36        	sbc	<L1160+n_1+2
  Sat Jul 10 2021  1:15                                                Page 596


 31425 08:8301: 85 32        	sta	<L1160+nsect_1+2
 31426                        ;		}while (nsect);
 31427                        	.line	7119
 31428                        L10765:
 31429 08:8303: A5 30        	lda	<L1160+nsect_1
 31430 08:8305: 05 32        	ora	<L1160+nsect_1+2
 31431 08:8307: F0 03        	beq	L1301
 31432 08:8309: 82 8D FF     	brl	L10767
 31433                        L1301:
 31434                        L10766:
 31435                        ;	}
 31436                        	.line	7120
 31437                        ;
 31438                        ;	/* A FAT volume has been created here */
 31439                        ;
 31440                        ;	/* Determine system ID in the MBR partition tabl
                    e */
 31441                        ;	if (FF_FS_EXFAT && fsty == FS_EXFAT)
 31442                        	.line	7125
 31443                        ;	{
 31444 08:830C: 82 18 00     	brl	L10770
 31445 08:830F: E2 20        	sep	#$20
 31446                        	longa	off
 31447 08:8311: A5 12        	lda	<L1160+fsty_1
 31448 08:8313: C9 04        	cmp	#<$4
 31449 08:8315: C2 20        	rep	#$20
 31450                        	longa	on
 31451 08:8317: F0 03        	beq	L1302
 31452 08:8319: 82 0B 00     	brl	L10770
 31453                        L1302:
 31454                        	.line	7126
 31455                        ;		sys = 0x07; /* exFAT */
 31456                        	.line	7127
 31457 08:831C: E2 20        	sep	#$20
 31458                        	longa	off
 31459 08:831E: A9 07        	lda	#$7
 31460 08:8320: 85 13        	sta	<L1160+sys_1
 31461 08:8322: C2 20        	rep	#$20
 31462                        	longa	on
 31463                        ;	}
 31464                        	.line	7128
 31465                        ;	else
 31466 08:8324: 82 51 00     	brl	L10771
 31467                        L10770:
 31468                        ;	{
 31469                        	.line	7130
 31470                        ;		if (fsty == FS_FAT32)
 31471                        	.line	7131
 31472                        ;		{
 31473 08:8327: E2 20        	sep	#$20
 31474                        	longa	off
 31475 08:8329: A5 12        	lda	<L1160+fsty_1
 31476 08:832B: C9 03        	cmp	#<$3
 31477 08:832D: C2 20        	rep	#$20
 31478                        	longa	on
 31479 08:832F: F0 03        	beq	L1303
 31480 08:8331: 82 0B 00     	brl	L10772
 31481                        L1303:
  Sat Jul 10 2021  1:15                                                Page 597


 31482                        	.line	7132
 31483                        ;			sys = 0x0C; /* FAT32X */
 31484                        	.line	7133
 31485 08:8334: E2 20        	sep	#$20
 31486                        	longa	off
 31487 08:8336: A9 0C        	lda	#$c
 31488 08:8338: 85 13        	sta	<L1160+sys_1
 31489 08:833A: C2 20        	rep	#$20
 31490                        	longa	on
 31491                        ;		}
 31492                        	.line	7134
 31493                        ;		else
 31494 08:833C: 82 39 00     	brl	L10773
 31495                        L10772:
 31496                        ;		{
 31497                        	.line	7136
 31498                        ;			if (sz_vol >= 0x10000)
 31499                        	.line	7137
 31500                        ;			{
 31501 08:833F: A5 38        	lda	<L1160+sz_vol_1
 31502 08:8341: C9 00 00     	cmp	#<$10000
 31503 08:8344: A5 3A        	lda	<L1160+sz_vol_1+2
 31504 08:8346: E9 01 00     	sbc	#^$10000
 31505 08:8349: B0 03        	bcs	L1304
 31506 08:834B: 82 0B 00     	brl	L10774
 31507                        L1304:
 31508                        	.line	7138
 31509                        ;				sys = 0x06; /* FAT12/16 
                    (large) */
 31510                        	.line	7139
 31511 08:834E: E2 20        	sep	#$20
 31512                        	longa	off
 31513 08:8350: A9 06        	lda	#$6
 31514 08:8352: 85 13        	sta	<L1160+sys_1
 31515 08:8354: C2 20        	rep	#$20
 31516                        	longa	on
 31517                        ;			}
 31518                        	.line	7140
 31519                        ;			else
 31520 08:8356: 82 1F 00     	brl	L10775
 31521                        L10774:
 31522                        ;			{
 31523                        	.line	7142
 31524                        ;				sys = (fsty == FS_FAT16)
                     ? 0x04 : 0x01; /* FAT16 : FAT12 */
 31525                        	.line	7143
 31526 08:8359: E2 20        	sep	#$20
 31527                        	longa	off
 31528 08:835B: A5 12        	lda	<L1160+fsty_1
 31529 08:835D: C9 02        	cmp	#<$2
 31530 08:835F: C2 20        	rep	#$20
 31531                        	longa	on
 31532 08:8361: F0 03        	beq	L1306
 31533 08:8363: 82 05 00     	brl	L1305
 31534                        L1306:
 31535 08:8366: A9 04 00     	lda	#$4
 31536 08:8369: 80 03        	bra	L1307
 31537                        L1305:
  Sat Jul 10 2021  1:15                                                Page 598


 31538 08:836B: A9 01 00     	lda	#$1
 31539                        L1307:
 31540 08:836E: 85 01        	sta	<R0
 31541 08:8370: E2 20        	sep	#$20
 31542                        	longa	off
 31543 08:8372: A5 01        	lda	<R0
 31544 08:8374: 85 13        	sta	<L1160+sys_1
 31545 08:8376: C2 20        	rep	#$20
 31546                        	longa	on
 31547                        ;			}
 31548                        	.line	7144
 31549                        L10775:
 31550                        ;		}
 31551                        	.line	7145
 31552                        L10773:
 31553                        ;	}
 31554                        	.line	7146
 31555                        L10771:
 31556                        ;
 31557                        ;	/* Update partition information */
 31558                        ;	if (FF_MULTI_PARTITION && ipart != 0)
 31559                        	.line	7149
 31560                        ;	{ /* Volume is in the existing partition */
 31561 08:8378: 82 9E 00     	brl	L10776
 31562 08:837B: A5 1D        	lda	<L1160+ipart_1
 31563 08:837D: 29 FF 00     	and	#$ff
 31564 08:8380: D0 03        	bne	L1308
 31565 08:8382: 82 94 00     	brl	L10776
 31566                        L1308:
 31567                        	.line	7150
 31568                        ;		if (!FF_LBA64 || !(fsopt & 0x80))
 31569                        	.line	7151
 31570                        ;		{
 31571 08:8385: 82 0D 00     	brl	L1309
 31572 08:8388: E2 20        	sep	#$20
 31573                        	longa	off
 31574 08:838A: A5 11        	lda	<L1160+fsopt_1
 31575 08:838C: 29 80        	and	#<$80
 31576 08:838E: C2 20        	rep	#$20
 31577                        	longa	on
 31578 08:8390: F0 03        	beq	L1310
 31579 08:8392: 82 81 00     	brl	L10777
 31580                        L1310:
 31581                        L1309:
 31582                        	.line	7152
 31583                        ;			/* Update system ID in the parti
                    tion table */
 31584                        ;			if (disk_read(pdrv, buf, 0, 1) !
                    = RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Read the MBR */
 31585                        	.line	7154
 31586 08:8395: F4 01 00     	pea	#<$1
 31587 08:8398: F4 00 00     	pea	#^$0
 31588 08:839B: F4 00 00     	pea	#<$0
 31589 08:839E: D4 16        	pei	<L1160+buf_1+2
 31590 08:83A0: D4 14        	pei	<L1160+buf_1
 31591 08:83A2: D4 1C        	pei	<L1160+pdrv_1
 31592 08:83A4: 22 xx xx xx  	jsl	~~disk_read
 31593 08:83A8: AA           	tax
  Sat Jul 10 2021  1:15                                                Page 599


 31594 08:83A9: D0 03        	bne	L1311
 31595 08:83AB: 82 17 00     	brl	L10778
 31596                        L1311:
 31597                        	.line	7154
 31598                        	.line	7154
 31599 08:83AE: A5 7A        	lda	<L1159+work_0
 31600 08:83B0: 05 7C        	ora	<L1159+work_0+2
 31601 08:83B2: F0 03        	beq	L1312
 31602 08:83B4: 82 08 00     	brl	L10779
 31603                        L1312:
 31604                        	.line	7154
 31605 08:83B7: D4 16        	pei	<L1160+buf_1+2
 31606 08:83B9: D4 14        	pei	<L1160+buf_1
 31607 08:83BB: 22 D3 92 08  	jsl	~~ff_memfree
 31608                        L10779:
 31609                        	.line	7154
 31610 08:83BF: A9 01 00     	lda	#$1
 31611 08:83C2: 82 1E EF     	brl	L1166
 31612                        	.line	7154
 31613                        L10778:
 31614                        	.line	7154
 31615                        ;			buf[MBR_Table + (ipart - 1) * SZ
                    _PTE + PTE_System] = sys; /* Set system ID */
 31616                        	.line	7155
 31617 08:83C5: A5 1D        	lda	<L1160+ipart_1
 31618 08:83C7: 29 FF 00     	and	#$ff
 31619 08:83CA: 85 05        	sta	<R1
 31620 08:83CC: A5 05        	lda	<R1
 31621 08:83CE: 0A           	asl	A
 31622 08:83CF: 0A           	asl	A
 31623 08:83D0: 0A           	asl	A
 31624 08:83D1: 0A           	asl	A
 31625 08:83D2: 85 01        	sta	<R0
 31626 08:83D4: 18           	clc
 31627 08:83D5: A9 B2 01     	lda	#$1b2
 31628 08:83D8: 65 01        	adc	<R0
 31629 08:83DA: 85 05        	sta	<R1
 31630 08:83DC: E2 20        	sep	#$20
 31631                        	longa	off
 31632 08:83DE: A5 13        	lda	<L1160+sys_1
 31633 08:83E0: A4 05        	ldy	<R1
 31634 08:83E2: 97 14        	sta	[<L1160+buf_1],Y
 31635 08:83E4: C2 20        	rep	#$20
 31636                        	longa	on
 31637                        ;			if (disk_write(pdrv, buf, 0, 1) 
                    != RES_OK) LEAVE_MKFS(FR_DISK_ERR); /* Write it back to the 
                    MBR */
 31638                        	.line	7156
 31639 08:83E6: F4 01 00     	pea	#<$1
 31640 08:83E9: F4 00 00     	pea	#^$0
 31641 08:83EC: F4 00 00     	pea	#<$0
 31642 08:83EF: D4 16        	pei	<L1160+buf_1+2
 31643 08:83F1: D4 14        	pei	<L1160+buf_1
 31644 08:83F3: D4 1C        	pei	<L1160+pdrv_1
 31645 08:83F5: 22 xx xx xx  	jsl	~~disk_write
 31646 08:83F9: AA           	tax
 31647 08:83FA: D0 03        	bne	L1313
 31648 08:83FC: 82 17 00     	brl	L10780
  Sat Jul 10 2021  1:15                                                Page 600


 31649                        L1313:
 31650                        	.line	7156
 31651                        	.line	7156
 31652 08:83FF: A5 7A        	lda	<L1159+work_0
 31653 08:8401: 05 7C        	ora	<L1159+work_0+2
 31654 08:8403: F0 03        	beq	L1314
 31655 08:8405: 82 08 00     	brl	L10781
 31656                        L1314:
 31657                        	.line	7156
 31658 08:8408: D4 16        	pei	<L1160+buf_1+2
 31659 08:840A: D4 14        	pei	<L1160+buf_1
 31660 08:840C: 22 D3 92 08  	jsl	~~ff_memfree
 31661                        L10781:
 31662                        	.line	7156
 31663 08:8410: A9 01 00     	lda	#$1
 31664 08:8413: 82 CD EE     	brl	L1166
 31665                        	.line	7156
 31666                        L10780:
 31667                        	.line	7156
 31668                        ;		}
 31669                        	.line	7157
 31670                        ;	}
 31671                        L10777:
 31672                        	.line	7158
 31673                        ;	else
 31674 08:8416: 82 51 00     	brl	L10782
 31675                        L10776:
 31676                        ;	{ /* Volume as a new single partition */
 31677                        	.line	7160
 31678                        ;		if (!(fsopt & FM_SFD))
 31679                        	.line	7161
 31680                        ;		{ /* Create partition table if not in SF
                    D */
 31681 08:8419: E2 20        	sep	#$20
 31682                        	longa	off
 31683 08:841B: A5 11        	lda	<L1160+fsopt_1
 31684 08:841D: 29 08        	and	#<$8
 31685 08:841F: C2 20        	rep	#$20
 31686                        	longa	on
 31687 08:8421: F0 03        	beq	L1315
 31688 08:8423: 82 44 00     	brl	L10783
 31689                        L1315:
 31690                        	.line	7162
 31691                        ;			lba[0] = sz_vol, lba[1] = 0;
 31692                        	.line	7163
 31693 08:8426: A5 38        	lda	<L1160+sz_vol_1
 31694 08:8428: 85 4C        	sta	<L1160+lba_1
 31695 08:842A: A5 3A        	lda	<L1160+sz_vol_1+2
 31696 08:842C: 85 4E        	sta	<L1160+lba_1+2
 31697 08:842E: 64 50        	stz	<L1160+lba_1+4
 31698 08:8430: 64 52        	stz	<L1160+lba_1+6
 31699                        ;			fr = create_partition(pdrv, lba,
                     sys, buf);
 31700                        	.line	7164
 31701 08:8432: D4 16        	pei	<L1160+buf_1+2
 31702 08:8434: D4 14        	pei	<L1160+buf_1
 31703 08:8436: A5 13        	lda	<L1160+sys_1
 31704 08:8438: 29 FF 00     	and	#$ff
  Sat Jul 10 2021  1:15                                                Page 601


 31705 08:843B: 48           	pha
 31706 08:843C: F4 00 00     	pea	#0
 31707 08:843F: 18           	clc
 31708 08:8440: 7B           	tdc
 31709 08:8441: 69 4C 00     	adc	#<L1160+lba_1
 31710 08:8444: 48           	pha
 31711 08:8445: D4 1C        	pei	<L1160+pdrv_1
 31712 08:8447: 22 60 6E 08  	jsl	~~create_partition
 31713 08:844B: 85 6D        	sta	<L1160+fr_1
 31714                        ;			if (fr != FR_OK) LEAVE_MKFS(fr);
 31715                        	.line	7165
 31716 08:844D: A5 6D        	lda	<L1160+fr_1
 31717 08:844F: D0 03        	bne	L1316
 31718 08:8451: 82 16 00     	brl	L10784
 31719                        L1316:
 31720                        	.line	7165
 31721                        	.line	7165
 31722 08:8454: A5 7A        	lda	<L1159+work_0
 31723 08:8456: 05 7C        	ora	<L1159+work_0+2
 31724 08:8458: F0 03        	beq	L1317
 31725 08:845A: 82 08 00     	brl	L10785
 31726                        L1317:
 31727                        	.line	7165
 31728 08:845D: D4 16        	pei	<L1160+buf_1+2
 31729 08:845F: D4 14        	pei	<L1160+buf_1
 31730 08:8461: 22 D3 92 08  	jsl	~~ff_memfree
 31731                        L10785:
 31732                        	.line	7165
 31733 08:8465: A5 6D        	lda	<L1160+fr_1
 31734 08:8467: 82 79 EE     	brl	L1166
 31735                        	.line	7165
 31736                        L10784:
 31737                        	.line	7165
 31738                        ;		}
 31739                        	.line	7166
 31740                        ;	}
 31741                        L10783:
 31742                        	.line	7167
 31743                        L10782:
 31744                        ;
 31745                        ;	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LE
                    AVE_MKFS(FR_DISK_ERR);
 31746                        	.line	7169
 31747 08:846A: F4 00 00     	pea	#^$0
 31748 08:846D: F4 00 00     	pea	#<$0
 31749 08:8470: F4 00 00     	pea	#<$0
 31750 08:8473: D4 1C        	pei	<L1160+pdrv_1
 31751 08:8475: 22 xx xx xx  	jsl	~~disk_ioctl
 31752 08:8479: AA           	tax
 31753 08:847A: D0 03        	bne	L1318
 31754 08:847C: 82 17 00     	brl	L10786
 31755                        L1318:
 31756                        	.line	7169
 31757                        	.line	7169
 31758 08:847F: A5 7A        	lda	<L1159+work_0
 31759 08:8481: 05 7C        	ora	<L1159+work_0+2
 31760 08:8483: F0 03        	beq	L1319
 31761 08:8485: 82 08 00     	brl	L10787
  Sat Jul 10 2021  1:15                                                Page 602


 31762                        L1319:
 31763                        	.line	7169
 31764 08:8488: D4 16        	pei	<L1160+buf_1+2
 31765 08:848A: D4 14        	pei	<L1160+buf_1
 31766 08:848C: 22 D3 92 08  	jsl	~~ff_memfree
 31767                        L10787:
 31768                        	.line	7169
 31769 08:8490: A9 01 00     	lda	#$1
 31770 08:8493: 82 4D EE     	brl	L1166
 31771                        	.line	7169
 31772                        L10786:
 31773                        	.line	7169
 31774                        ;
 31775                        ;	LEAVE_MKFS(FR_OK);
 31776                        	.line	7171
 31777                        	.line	7171
 31778 08:8496: A5 7A        	lda	<L1159+work_0
 31779 08:8498: 05 7C        	ora	<L1159+work_0+2
 31780 08:849A: F0 03        	beq	L1320
 31781 08:849C: 82 08 00     	brl	L10788
 31782                        L1320:
 31783                        	.line	7171
 31784 08:849F: D4 16        	pei	<L1160+buf_1+2
 31785 08:84A1: D4 14        	pei	<L1160+buf_1
 31786 08:84A3: 22 D3 92 08  	jsl	~~ff_memfree
 31787                        L10788:
 31788                        	.line	7171
 31789 08:84A7: A9 00 00     	lda	#$0
 31790 08:84AA: 82 36 EE     	brl	L1166
 31791                        	.line	7171
 31792                        	.line	7171
 31793                        ;}
 31794                        	.line	7172
 31795                        	.endblock	7172
 31796             0000006E   L1159	equ	110
 31797             00000011   L1160	equ	17
 31798 08:84AD:              	ends
 31799                        	efunc
 31800                        	.endfunc	7172,17,110
 31801                        	.line	7172
 31802                        	data
 31803                        L1059:
 31804 00:01DD: EB FE 90 4D  	db	$EB,$FFFFFFFE,$FFFFFF90,$4D,$53,$44,$4F,
                    $53,$35,$2E,$30,$00,$4E,$4F,$20
       00:01E1: 53 44 4F 53 
       00:01E5: 35 2E 30 00 
       00:01E9: 4E 4F 20 
 31805 00:01EC: 4E 41 4D 45  	db	$4E,$41,$4D,$45,$20,$20,$20,$20,$46,$41,
                    $54,$33,$32,$20,$20
       00:01F0: 20 20 20 20 
       00:01F4: 46 41 54 33 
       00:01F8: 32 20 20 
 31806 00:01FB: 20 00 4E 4F  	db	$20,$00,$4E,$4F,$20,$4E,$41,$4D,$45,$20,
                    $20,$20,$20,$46,$41
       00:01FF: 20 4E 41 4D 
       00:0203: 45 20 20 20 
       00:0207: 20 46 41 
 31807 00:020A: 54 20 20 20  	db	$54,$20,$20,$20,$20,$20,$00
  Sat Jul 10 2021  1:15                                                Page 603


       00:020E: 20 20 00 
 31808 00:0211:              	ends
 31809                        ;
 31810                        ;#if FF_MULTI_PARTITION
 31811                        ;/*-----------------------------------------------
                    ------------------------*/
 31812                        ;/* Create Partition Table on the Physical Drive  
                                            */
 31813                        ;/*-----------------------------------------------
                    ------------------------*/
 31814                        ;
 31815                        ;FRESULT f_fdisk (
 31816                        ;		BYTE pdrv, /* Physical drive number */
 31817                        ;		const LBA_t ptbl[], /* Pointer to the si
                    ze table for each partitions */
 31818                        ;		void* work /* Pointer to the working buf
                    fer (null: use heap memory) */
 31819                        ;)
 31820                        ;{
 31821                        ;	BYTE *buf = (BYTE*)work;
 31822                        ;	DSTATUS stat;
 31823                        ;
 31824                        ;	stat = disk_initialize(pdrv);
 31825                        ;	if (stat & STA_NOINIT) return FR_NOT_READY;
 31826                        ;	if (stat & STA_PROTECT) return FR_WRITE_PROTECTE
                    D;
 31827                        ;#if FF_USE_LFN == 3
 31828                        ;	if (!buf) buf = ff_memalloc(FF_MAX_SS); /* Use h
                    eap memory for working buffer */
 31829                        ;#endif
 31830                        ;	if (!buf) return FR_NOT_ENOUGH_CORE;
 31831                        ;
 31832                        ;	LEAVE_MKFS(create_partition(pdrv, ptbl, 0x07, bu
                    f));
 31833                        ;}
 31834                        ;
 31835                        ;#endif /* FF_MULTI_PARTITION */
 31836                        ;#endif /* !FF_FS_READONLY && FF_USE_MKFS */
 31837                        ;
 31838                        ;#if FF_USE_STRFUNC
 31839                        ;#if FF_USE_LFN && FF_LFN_UNICODE && (FF_STRF_ENCO
                    DE < 0 || FF_STRF_ENCODE > 3)
 31840                        ;#error Wrong FF_STRF_ENCODE setting
 31841                        ;#endif
 31842                        ;/*-----------------------------------------------
                    ------------------------*/
 31843                        ;/* Get a String from the File                    
                                            */
 31844                        ;/*-----------------------------------------------
                    ------------------------*/
 31845                        ;
 31846                        ;TCHAR* f_gets(TCHAR* buff, /* Pointer to the buff
                    er to store read string */
 31847                        ;int len, /* Size of string buffer (items) */
 31848                        ;FIL* fp /* Pointer to the file object */
 31849                        ;)
 31850                        ;{
 31851                        	.line	7210
  Sat Jul 10 2021  1:15                                                Page 604


 31852                        	.line	7214
 31853                        	FFDOS
 31854                        	xdef	~~f_gets
 31855                        	func
 31856                        	.function	7214
 31857                        ~~f_gets:
 31858                        	longa	on
 31859                        	longi	on
 31860 08:84AD: 3B           	tsc
 31861 08:84AE: 38           	sec
 31862 08:84AF: E9 1A 00     	sbc	#L1322
 31863 08:84B2: 1B           	tcs
 31864 08:84B3: 0B           	phd
 31865 08:84B4: 5B           	tcd
 31866             00000004   buff_0	set	4
 31867             00000008   len_0	set	8
 31868             0000000A   fp_0	set	10
 31869                        	.block	7214
 31870                        ;	int nc = 0;
 31871                        ;	TCHAR *p = buff;
 31872                        ;	BYTE s[4];
 31873                        ;	UINT rc;
 31874                        ;	DWORD dc;
 31875                        ;#if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCOD
                    E <= 2
 31876                        ;	WCHAR wc;
 31877                        ;#endif
 31878                        ;#if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCOD
                    E == 3
 31879                        ;	UINT ct;
 31880                        ;#endif
 31881                        ;
 31882                        ;#if FF_USE_LFN && FF_LFN_UNICODE			
                    /* With code conversion (Unicode API) */
 31883                        ;	/* Make a room for the character and terminator 
                     */
 31884                        ;	if (FF_LFN_UNICODE == 1) len -= (FF_STRF_ENCODE 
                    == 0) ? 1 : 2;
 31885             00000000   nc_1	set	0
 31886             00000002   p_1	set	2
 31887             00000006   s_1	set	6
 31888             0000000A   rc_1	set	10
 31889             0000000C   dc_1	set	12
 31890             00000010   ct_1	set	16
 31891                        	.sym	nc,0,5,1,16
 31892                        	.sym	p,2,142,1,32
 31893                        	.sym	s,6,110,1,0,4
 31894                        	.sym	rc,10,16,1,16
 31895                        	.sym	dc,12,18,1,32
 31896                        	.sym	ct,16,16,1,16
 31897                        	.sym	buff,4,142,6,32
 31898                        	.sym	len,8,5,6,16
 31899                        	.sym	fp,10,138,6,32,74
 31900 08:84B5: 64 09        	stz	<L1323+nc_1
 31901 08:84B7: A5 1E        	lda	<L1322+buff_0
 31902 08:84B9: 85 0B        	sta	<L1323+p_1
 31903 08:84BB: A5 20        	lda	<L1322+buff_0+2
 31904 08:84BD: 85 0D        	sta	<L1323+p_1+2
  Sat Jul 10 2021  1:15                                                Page 605


 31905                        	.line	7229
 31906 08:84BF: 82 04 00     	brl	L10789
 31907                        	.line	7229
 31908 08:84C2: C6 22        	dec	<L1322+len_0
 31909 08:84C4: C6 22        	dec	<L1322+len_0
 31910                        ;	if (FF_LFN_UNICODE == 2) len -= (FF_STRF_ENCODE 
                    == 0) ? 3 : 4;
 31911                        L10789:
 31912                        	.line	7230
 31913                        	.line	7230
 31914 08:84C6: 18           	clc
 31915 08:84C7: A9 FC FF     	lda	#$fffc
 31916 08:84CA: 65 22        	adc	<L1322+len_0
 31917 08:84CC: 85 22        	sta	<L1322+len_0
 31918                        ;	if (FF_LFN_UNICODE == 3) len -= 1;
 31919                        L10790:
 31920                        	.line	7231
 31921 08:84CE: 82 02 00     	brl	L10791
 31922                        	.line	7231
 31923 08:84D1: C6 22        	dec	<L1322+len_0
 31924                        ;	while (nc < len)
 31925                        L10791:
 31926                        	.line	7232
 31927                        L10792:
 31928 08:84D3: 38           	sec
 31929 08:84D4: A5 09        	lda	<L1323+nc_1
 31930 08:84D6: E5 22        	sbc	<L1322+len_0
 31931 08:84D8: 70 03        	bvs	L1325
 31932 08:84DA: 49 00 80     	eor	#$8000
 31933                        L1325:
 31934 08:84DD: 10 03        	bpl	L1326
 31935 08:84DF: 82 86 03     	brl	L10793
 31936                        L1326:
 31937                        ;	{
 31938                        	.line	7233
 31939                        ;#if FF_STRF_ENCODE == 0				
                    /* Read a character in ANSI/OEM */
 31940                        ;		f_read(fp, s, 1, &rc); /* Get a code uni
                    t */
 31941                        ;		if (rc != 1) break; /* EOF? */
 31942                        ;		wc = s[0];
 31943                        ;		if (dbc_1st((BYTE)wc))
 31944                        ;		{ /* DBC 1st byte? */
 31945                        ;			f_read(fp, s, 1, &rc); /* Get DB
                    C 2nd byte */
 31946                        ;			if (rc != 1 || !dbc_2nd(s[0])) c
                    ontinue; /* Wrong code? */
 31947                        ;			wc = wc << 8 | s[0];
 31948                        ;		}
 31949                        ;		dc = ff_oem2uni(wc, CODEPAGE); /* OEM --
                    > */
 31950                        ;		if (dc == 0) continue;
 31951                        ;#elif FF_STRF_ENCODE == 1 || FF_STRF_ENCODE == 2 
                    	/* Read a character in UTF-16LE/BE */
 31952                        ;		f_read(fp, s, 2, &rc); /* Get a code uni
                    t */
 31953                        ;		if (rc != 2) break; /* EOF? */
 31954                        ;		dc = (FF_STRF_ENCODE == 1) ? ld_word(s) 
  Sat Jul 10 2021  1:15                                                Page 606


                    : s[0] << 8 | s[1];
 31955                        ;		if (IsSurrogateL(dc)) continue; /* Broke
                    n surrogate pair? */
 31956                        ;		if (IsSurrogateH(dc))
 31957                        ;		{ /* High surrogate? */
 31958                        ;			f_read(fp, s, 2, &rc); /* Get lo
                    w surrogate */
 31959                        ;			if (rc != 2) break; /* EOF? */
 31960                        ;			wc = (FF_STRF_ENCODE == 1) ? ld_
                    word(s) : s[0] << 8 | s[1];
 31961                        ;			if (!IsSurrogateL(wc)) continue;
                     /* Broken surrogate pair? */
 31962                        ;			dc = ((dc & 0x3FF) + 0x40) << 10
                     | (wc & 0x3FF); /* Merge surrogate pair */
 31963                        ;		}
 31964                        ;#else	/* Read a character in UTF-8 */
 31965                        ;		f_read(fp, s, 1, &rc); /* Get a code uni
                    t */
 31966                        	.line	7260
 31967 08:84E2: F4 00 00     	pea	#0
 31968 08:84E5: 18           	clc
 31969 08:84E6: 7B           	tdc
 31970 08:84E7: 69 13 00     	adc	#<L1323+rc_1
 31971 08:84EA: 48           	pha
 31972 08:84EB: F4 01 00     	pea	#<$1
 31973 08:84EE: F4 00 00     	pea	#0
 31974 08:84F1: 18           	clc
 31975 08:84F2: 7B           	tdc
 31976 08:84F3: 69 0F 00     	adc	#<L1323+s_1
 31977 08:84F6: 48           	pha
 31978 08:84F7: D4 26        	pei	<L1322+fp_0+2
 31979 08:84F9: D4 24        	pei	<L1322+fp_0
 31980 08:84FB: 22 B0 4A 08  	jsl	~~f_read
 31981                        ;		if (rc != 1) break; /* EOF? */
 31982                        	.line	7261
 31983 08:84FF: A5 13        	lda	<L1323+rc_1
 31984 08:8501: C9 01 00     	cmp	#<$1
 31985 08:8504: F0 03        	beq	L1327
 31986 08:8506: 82 5F 03     	brl	L10793
 31987                        L1327:
 31988                        ;		dc = s[0];
 31989                        	.line	7262
 31990 08:8509: A5 0F        	lda	<L1323+s_1
 31991 08:850B: 29 FF 00     	and	#$ff
 31992 08:850E: 85 15        	sta	<L1323+dc_1
 31993 08:8510: 64 17        	stz	<L1323+dc_1+2
 31994                        ;		if (dc >= 0x80)
 31995                        	.line	7263
 31996                        ;		{ /* Multi-byte sequence? */
 31997 08:8512: A5 15        	lda	<L1323+dc_1
 31998 08:8514: C9 80 00     	cmp	#<$80
 31999 08:8517: A5 17        	lda	<L1323+dc_1+2
 32000 08:8519: E9 00 00     	sbc	#^$80
 32001 08:851C: B0 03        	bcs	L1328
 32002 08:851E: 82 3B 01     	brl	L10794
 32003                        L1328:
 32004                        	.line	7264
 32005                        ;			ct = 0;
  Sat Jul 10 2021  1:15                                                Page 607


 32006                        	.line	7265
 32007 08:8521: 64 19        	stz	<L1323+ct_1
 32008                        ;			if ((dc & 0xE0) == 0xC0)
 32009                        	.line	7266
 32010                        ;			{	dc &= 0x1F; ct = 1;} /* 
                    2-byte sequence? */
 32011 08:8523: A5 15        	lda	<L1323+dc_1
 32012 08:8525: 29 E0 00     	and	#<$e0
 32013 08:8528: 85 01        	sta	<R0
 32014 08:852A: 64 03        	stz	<R0+2
 32015 08:852C: A5 01        	lda	<R0
 32016 08:852E: C9 C0 00     	cmp	#<$c0
 32017 08:8531: D0 05        	bne	L1329
 32018 08:8533: A5 03        	lda	<R0+2
 32019 08:8535: C9 00 00     	cmp	#^$c0
 32020                        L1329:
 32021 08:8538: F0 03        	beq	L1330
 32022 08:853A: 82 0E 00     	brl	L10795
 32023                        L1330:
 32024                        	.line	7267
 32025                        	.line	7267
 32026 08:853D: A5 15        	lda	<L1323+dc_1
 32027 08:853F: 29 1F 00     	and	#<$1f
 32028 08:8542: 85 15        	sta	<L1323+dc_1
 32029 08:8544: 64 17        	stz	<L1323+dc_1+2
 32030                        	.line	7267
 32031 08:8546: A9 01 00     	lda	#$1
 32032 08:8549: 85 19        	sta	<L1323+ct_1
 32033                        	.line	7267
 32034                        ;			if ((dc & 0xF0) == 0xE0)
 32035                        L10795:
 32036                        	.line	7268
 32037                        ;			{	dc &= 0x0F; ct = 2;} /* 
                    3-byte sequence? */
 32038 08:854B: A5 15        	lda	<L1323+dc_1
 32039 08:854D: 29 F0 00     	and	#<$f0
 32040 08:8550: 85 01        	sta	<R0
 32041 08:8552: 64 03        	stz	<R0+2
 32042 08:8554: A5 01        	lda	<R0
 32043 08:8556: C9 E0 00     	cmp	#<$e0
 32044 08:8559: D0 05        	bne	L1331
 32045 08:855B: A5 03        	lda	<R0+2
 32046 08:855D: C9 00 00     	cmp	#^$e0
 32047                        L1331:
 32048 08:8560: F0 03        	beq	L1332
 32049 08:8562: 82 0E 00     	brl	L10796
 32050                        L1332:
 32051                        	.line	7269
 32052                        	.line	7269
 32053 08:8565: A5 15        	lda	<L1323+dc_1
 32054 08:8567: 29 0F 00     	and	#<$f
 32055 08:856A: 85 15        	sta	<L1323+dc_1
 32056 08:856C: 64 17        	stz	<L1323+dc_1+2
 32057                        	.line	7269
 32058 08:856E: A9 02 00     	lda	#$2
 32059 08:8571: 85 19        	sta	<L1323+ct_1
 32060                        	.line	7269
 32061                        ;			if ((dc & 0xF8) == 0xF0)
  Sat Jul 10 2021  1:15                                                Page 608


 32062                        L10796:
 32063                        	.line	7270
 32064                        ;			{	dc &= 0x07; ct = 3;} /* 
                    4-byte sequence? */
 32065 08:8573: A5 15        	lda	<L1323+dc_1
 32066 08:8575: 29 F8 00     	and	#<$f8
 32067 08:8578: 85 01        	sta	<R0
 32068 08:857A: 64 03        	stz	<R0+2
 32069 08:857C: A5 01        	lda	<R0
 32070 08:857E: C9 F0 00     	cmp	#<$f0
 32071 08:8581: D0 05        	bne	L1333
 32072 08:8583: A5 03        	lda	<R0+2
 32073 08:8585: C9 00 00     	cmp	#^$f0
 32074                        L1333:
 32075 08:8588: F0 03        	beq	L1334
 32076 08:858A: 82 0E 00     	brl	L10797
 32077                        L1334:
 32078                        	.line	7271
 32079                        	.line	7271
 32080 08:858D: A5 15        	lda	<L1323+dc_1
 32081 08:858F: 29 07 00     	and	#<$7
 32082 08:8592: 85 15        	sta	<L1323+dc_1
 32083 08:8594: 64 17        	stz	<L1323+dc_1+2
 32084                        	.line	7271
 32085 08:8596: A9 03 00     	lda	#$3
 32086 08:8599: 85 19        	sta	<L1323+ct_1
 32087                        	.line	7271
 32088                        ;			if (ct == 0) continue;
 32089                        L10797:
 32090                        	.line	7272
 32091 08:859B: A5 19        	lda	<L1323+ct_1
 32092 08:859D: D0 03        	bne	L1335
 32093 08:859F: 82 31 FF     	brl	L10792
 32094                        L1335:
 32095                        ;			f_read(fp, s, ct, &rc); /* Get t
                    railing bytes */
 32096                        	.line	7273
 32097 08:85A2: F4 00 00     	pea	#0
 32098 08:85A5: 18           	clc
 32099 08:85A6: 7B           	tdc
 32100 08:85A7: 69 13 00     	adc	#<L1323+rc_1
 32101 08:85AA: 48           	pha
 32102 08:85AB: D4 19        	pei	<L1323+ct_1
 32103 08:85AD: F4 00 00     	pea	#0
 32104 08:85B0: 18           	clc
 32105 08:85B1: 7B           	tdc
 32106 08:85B2: 69 0F 00     	adc	#<L1323+s_1
 32107 08:85B5: 48           	pha
 32108 08:85B6: D4 26        	pei	<L1322+fp_0+2
 32109 08:85B8: D4 24        	pei	<L1322+fp_0
 32110 08:85BA: 22 B0 4A 08  	jsl	~~f_read
 32111                        ;			if (rc != ct) break;
 32112                        	.line	7274
 32113 08:85BE: A5 13        	lda	<L1323+rc_1
 32114 08:85C0: C5 19        	cmp	<L1323+ct_1
 32115 08:85C2: F0 03        	beq	L1336
 32116 08:85C4: 82 A1 02     	brl	L10793
 32117                        L1336:
  Sat Jul 10 2021  1:15                                                Page 609


 32118                        ;			rc = 0;
 32119                        	.line	7275
 32120 08:85C7: 64 13        	stz	<L1323+rc_1
 32121                        ;			do
 32122                        	.line	7276
 32123                        L10800:
 32124                        ;			{ /* Merge the byte sequence */
 32125                        	.line	7277
 32126                        ;				if ((s[rc] & 0xC0) != 0x
                    80) break;
 32127                        	.line	7278
 32128 08:85C9: A6 13        	ldx	<L1323+rc_1
 32129 08:85CB: B5 0F        	lda	<L1323+s_1,X
 32130 08:85CD: 29 C0 00     	and	#<$c0
 32131 08:85D0: 85 01        	sta	<R0
 32132 08:85D2: A5 01        	lda	<R0
 32133 08:85D4: C9 80 00     	cmp	#<$80
 32134 08:85D7: F0 03        	beq	L1337
 32135 08:85D9: 82 3B 00     	brl	L10799
 32136                        L1337:
 32137                        ;				dc = dc << 6 | (s[rc] & 
                    0x3F);
 32138                        	.line	7279
 32139 08:85DC: D4 17        	pei	<L1323+dc_1+2
 32140 08:85DE: D4 15        	pei	<L1323+dc_1
 32141 08:85E0: A9 06 00     	lda	#$6
 32142                        	xref	~~~lasl
 32143 08:85E3: 22 xx xx xx  	jsl	~~~lasl
 32144 08:85E7: 85 01        	sta	<R0
 32145 08:85E9: 86 03        	stx	<R0+2
 32146 08:85EB: A6 13        	ldx	<L1323+rc_1
 32147 08:85ED: B5 0F        	lda	<L1323+s_1,X
 32148 08:85EF: 29 3F 00     	and	#<$3f
 32149 08:85F2: 85 05        	sta	<R1
 32150 08:85F4: A0 00 00     	ldy	#$0
 32151 08:85F7: A5 05        	lda	<R1
 32152 08:85F9: 10 01        	bpl	L1338
 32153 08:85FB: 88           	dey
 32154                        L1338:
 32155 08:85FC: 85 05        	sta	<R1
 32156 08:85FE: 84 07        	sty	<R1+2
 32157 08:8600: A5 05        	lda	<R1
 32158 08:8602: 05 01        	ora	<R0
 32159 08:8604: 85 15        	sta	<L1323+dc_1
 32160 08:8606: A5 07        	lda	<R1+2
 32161 08:8608: 05 03        	ora	<R0+2
 32162 08:860A: 85 17        	sta	<L1323+dc_1+2
 32163                        ;			}while (++rc < ct);
 32164                        	.line	7280
 32165                        L10798:
 32166 08:860C: E6 13        	inc	<L1323+rc_1
 32167 08:860E: A5 13        	lda	<L1323+rc_1
 32168 08:8610: C5 19        	cmp	<L1323+ct_1
 32169 08:8612: B0 03        	bcs	L1339
 32170 08:8614: 82 B2 FF     	brl	L10800
 32171                        L1339:
 32172                        L10799:
 32173                        ;			if (rc != ct || dc < 0x80 || IsS
  Sat Jul 10 2021  1:15                                                Page 610


                    urrogate(dc) || dc >= 0x110000) continue; /* Wrong encoding?
                     */
 32174                        	.line	7281
 32175 08:8617: A5 13        	lda	<L1323+rc_1
 32176 08:8619: C5 19        	cmp	<L1323+ct_1
 32177 08:861B: F0 03        	beq	L1340
 32178 08:861D: 82 B3 FE     	brl	L10792
 32179                        L1340:
 32180 08:8620: A5 15        	lda	<L1323+dc_1
 32181 08:8622: C9 80 00     	cmp	#<$80
 32182 08:8625: A5 17        	lda	<L1323+dc_1+2
 32183 08:8627: E9 00 00     	sbc	#^$80
 32184 08:862A: B0 03        	bcs	L1341
 32185 08:862C: 82 A4 FE     	brl	L10792
 32186                        L1341:
 32187 08:862F: A5 15        	lda	<L1323+dc_1
 32188 08:8631: C9 00 D8     	cmp	#<$d800
 32189 08:8634: A5 17        	lda	<L1323+dc_1+2
 32190 08:8636: E9 00 00     	sbc	#^$d800
 32191 08:8639: B0 03        	bcs	L1343
 32192 08:863B: 82 0F 00     	brl	L1342
 32193                        L1343:
 32194 08:863E: A9 FF DF     	lda	#$dfff
 32195 08:8641: C5 15        	cmp	<L1323+dc_1
 32196 08:8643: A9 00 00     	lda	#$0
 32197 08:8646: E5 17        	sbc	<L1323+dc_1+2
 32198 08:8648: 90 03        	bcc	L1344
 32199 08:864A: 82 86 FE     	brl	L10792
 32200                        L1344:
 32201                        L1342:
 32202 08:864D: A5 15        	lda	<L1323+dc_1
 32203 08:864F: C9 00 00     	cmp	#<$110000
 32204 08:8652: A5 17        	lda	<L1323+dc_1+2
 32205 08:8654: E9 11 00     	sbc	#^$110000
 32206 08:8657: 90 03        	bcc	L1345
 32207 08:8659: 82 77 FE     	brl	L10792
 32208                        L1345:
 32209                        ;		}
 32210                        	.line	7282
 32211                        ;#endif
 32212                        ;		/* A code point is avaialble in dc to be
                     output */
 32213                        ;
 32214                        ;		if (FF_USE_STRFUNC == 2 && dc == '\r') c
                    ontinue; /* Strip \r off if needed */
 32215                        L10794:
 32216                        	.line	7286
 32217 08:865C: 82 11 00     	brl	L1346
 32218 08:865F: A5 15        	lda	<L1323+dc_1
 32219 08:8661: C9 0D 00     	cmp	#<$d
 32220 08:8664: D0 05        	bne	L1347
 32221 08:8666: A5 17        	lda	<L1323+dc_1+2
 32222 08:8668: C9 00 00     	cmp	#^$d
 32223                        L1347:
 32224 08:866B: D0 03        	bne	L1348
 32225 08:866D: 82 63 FE     	brl	L10792
 32226                        L1348:
 32227                        L1346:
  Sat Jul 10 2021  1:15                                                Page 611


 32228                        ;#if FF_LFN_UNICODE == 1	|| FF_LFN_UNICODE == 3	
                    /* Output it in UTF-16/32 encoding */
 32229                        ;		if (FF_LFN_UNICODE == 1 && dc >= 0x10000
                    )
 32230                        ;		{ /* Out of BMP at UTF-16? */
 32231                        ;			*p++ = (TCHAR)(0xD800 | ((dc >> 
                    10) - 0x40)); nc++; /* Make and output high surrogate */
 32232                        ;			dc = 0xDC00 | (dc & 0x3FF); /* M
                    ake low surrogate */
 32233                        ;		}
 32234                        ;		*p++ = (TCHAR)dc; nc++;
 32235                        ;		if (dc == '\n') break; /* End of line? *
                    /
 32236                        ;#elif FF_LFN_UNICODE == 2		/* Outpu
                    t it in UTF-8 encoding */
 32237                        ;		if (dc < 0x80)
 32238                        	.line	7296
 32239                        ;		{ /* Single byte? */
 32240 08:8670: A5 15        	lda	<L1323+dc_1
 32241 08:8672: C9 80 00     	cmp	#<$80
 32242 08:8675: A5 17        	lda	<L1323+dc_1+2
 32243 08:8677: E9 00 00     	sbc	#^$80
 32244 08:867A: 90 03        	bcc	L1349
 32245 08:867C: 82 24 00     	brl	L10801
 32246                        L1349:
 32247                        	.line	7297
 32248                        ;			*p++ = (TCHAR)dc;
 32249                        	.line	7298
 32250 08:867F: E2 20        	sep	#$20
 32251                        	longa	off
 32252 08:8681: A5 15        	lda	<L1323+dc_1
 32253 08:8683: 87 0B        	sta	[<L1323+p_1]
 32254 08:8685: C2 20        	rep	#$20
 32255                        	longa	on
 32256 08:8687: E6 0B        	inc	<L1323+p_1
 32257 08:8689: D0 02        	bne	L1350
 32258 08:868B: E6 0D        	inc	<L1323+p_1+2
 32259                        L1350:
 32260                        ;			nc++;
 32261                        	.line	7299
 32262 08:868D: E6 09        	inc	<L1323+nc_1
 32263                        ;			if (dc == '\n') break; /* End of
                     line? */
 32264                        	.line	7300
 32265 08:868F: A5 15        	lda	<L1323+dc_1
 32266 08:8691: C9 0A 00     	cmp	#<$a
 32267 08:8694: D0 05        	bne	L1351
 32268 08:8696: A5 17        	lda	<L1323+dc_1+2
 32269 08:8698: C9 00 00     	cmp	#^$a
 32270                        L1351:
 32271 08:869B: D0 03        	bne	L1352
 32272 08:869D: 82 C8 01     	brl	L10793
 32273                        L1352:
 32274                        ;		}
 32275                        	.line	7301
 32276                        ;		else
 32277 08:86A0: 82 C2 01     	brl	L10802
 32278                        L10801:
  Sat Jul 10 2021  1:15                                                Page 612


 32279                        ;		{
 32280                        	.line	7303
 32281                        ;			if (dc < 0x800)
 32282                        	.line	7304
 32283                        ;			{ /* 2-byte sequence? */
 32284 08:86A3: A5 15        	lda	<L1323+dc_1
 32285 08:86A5: C9 00 08     	cmp	#<$800
 32286 08:86A8: A5 17        	lda	<L1323+dc_1+2
 32287 08:86AA: E9 00 00     	sbc	#^$800
 32288 08:86AD: 90 03        	bcc	L1353
 32289 08:86AF: 82 5A 00     	brl	L10803
 32290                        L1353:
 32291                        	.line	7305
 32292                        ;				*p++ = (TCHAR)(0xC0 | (d
                    c >> 6 & 0x1F));
 32293                        	.line	7306
 32294 08:86B2: D4 17        	pei	<L1323+dc_1+2
 32295 08:86B4: D4 15        	pei	<L1323+dc_1
 32296 08:86B6: A9 06 00     	lda	#$6
 32297                        	xref	~~~llsr
 32298 08:86B9: 22 xx xx xx  	jsl	~~~llsr
 32299 08:86BD: 85 01        	sta	<R0
 32300 08:86BF: 86 03        	stx	<R0+2
 32301 08:86C1: A5 01        	lda	<R0
 32302 08:86C3: 29 1F 00     	and	#<$1f
 32303 08:86C6: 85 05        	sta	<R1
 32304 08:86C8: 64 07        	stz	<R1+2
 32305 08:86CA: A5 05        	lda	<R1
 32306 08:86CC: 09 C0 00     	ora	#<$c0
 32307 08:86CF: 85 01        	sta	<R0
 32308 08:86D1: A5 07        	lda	<R1+2
 32309 08:86D3: 85 03        	sta	<R0+2
 32310 08:86D5: E2 20        	sep	#$20
 32311                        	longa	off
 32312 08:86D7: A5 01        	lda	<R0
 32313 08:86D9: 87 0B        	sta	[<L1323+p_1]
 32314 08:86DB: C2 20        	rep	#$20
 32315                        	longa	on
 32316 08:86DD: E6 0B        	inc	<L1323+p_1
 32317 08:86DF: D0 02        	bne	L1354
 32318 08:86E1: E6 0D        	inc	<L1323+p_1+2
 32319                        L1354:
 32320                        ;				*p++ = (TCHAR)(0x80 | (d
                    c >> 0 & 0x3F));
 32321                        	.line	7307
 32322 08:86E3: A5 15        	lda	<L1323+dc_1
 32323 08:86E5: 29 3F 00     	and	#<$3f
 32324 08:86E8: 85 01        	sta	<R0
 32325 08:86EA: 64 03        	stz	<R0+2
 32326 08:86EC: A5 01        	lda	<R0
 32327 08:86EE: 09 80 00     	ora	#<$80
 32328 08:86F1: 85 05        	sta	<R1
 32329 08:86F3: A5 03        	lda	<R0+2
 32330 08:86F5: 85 07        	sta	<R1+2
 32331 08:86F7: E2 20        	sep	#$20
 32332                        	longa	off
 32333 08:86F9: A5 05        	lda	<R1
 32334 08:86FB: 87 0B        	sta	[<L1323+p_1]
  Sat Jul 10 2021  1:15                                                Page 613


 32335 08:86FD: C2 20        	rep	#$20
 32336                        	longa	on
 32337 08:86FF: E6 0B        	inc	<L1323+p_1
 32338 08:8701: D0 02        	bne	L1355
 32339 08:8703: E6 0D        	inc	<L1323+p_1+2
 32340                        L1355:
 32341                        ;				nc += 2;
 32342                        	.line	7308
 32343 08:8705: E6 09        	inc	<L1323+nc_1
 32344 08:8707: E6 09        	inc	<L1323+nc_1
 32345                        ;			}
 32346                        	.line	7309
 32347                        ;			else
 32348 08:8709: 82 59 01     	brl	L10804
 32349                        L10803:
 32350                        ;			{
 32351                        	.line	7311
 32352                        ;				if (dc < 0x10000)
 32353                        	.line	7312
 32354                        ;				{ /* 3-byte sequence? */
 32355 08:870C: A5 15        	lda	<L1323+dc_1
 32356 08:870E: C9 00 00     	cmp	#<$10000
 32357 08:8711: A5 17        	lda	<L1323+dc_1+2
 32358 08:8713: E9 01 00     	sbc	#^$10000
 32359 08:8716: 90 03        	bcc	L1356
 32360 08:8718: 82 8D 00     	brl	L10805
 32361                        L1356:
 32362                        	.line	7313
 32363                        ;					*p++ = (TCHAR)(0
                    xE0 | (dc >> 12 & 0x0F));
 32364                        	.line	7314
 32365 08:871B: D4 17        	pei	<L1323+dc_1+2
 32366 08:871D: D4 15        	pei	<L1323+dc_1
 32367 08:871F: A9 0C 00     	lda	#$c
 32368                        	xref	~~~llsr
 32369 08:8722: 22 xx xx xx  	jsl	~~~llsr
 32370 08:8726: 85 01        	sta	<R0
 32371 08:8728: 86 03        	stx	<R0+2
 32372 08:872A: A5 01        	lda	<R0
 32373 08:872C: 29 0F 00     	and	#<$f
 32374 08:872F: 85 05        	sta	<R1
 32375 08:8731: 64 07        	stz	<R1+2
 32376 08:8733: A5 05        	lda	<R1
 32377 08:8735: 09 E0 00     	ora	#<$e0
 32378 08:8738: 85 01        	sta	<R0
 32379 08:873A: A5 07        	lda	<R1+2
 32380 08:873C: 85 03        	sta	<R0+2
 32381 08:873E: E2 20        	sep	#$20
 32382                        	longa	off
 32383 08:8740: A5 01        	lda	<R0
 32384 08:8742: 87 0B        	sta	[<L1323+p_1]
 32385 08:8744: C2 20        	rep	#$20
 32386                        	longa	on
 32387 08:8746: E6 0B        	inc	<L1323+p_1
 32388 08:8748: D0 02        	bne	L1357
 32389 08:874A: E6 0D        	inc	<L1323+p_1+2
 32390                        L1357:
 32391                        ;					*p++ = (TCHAR)(0
  Sat Jul 10 2021  1:15                                                Page 614


                    x80 | (dc >> 6 & 0x3F));
 32392                        	.line	7315
 32393 08:874C: D4 17        	pei	<L1323+dc_1+2
 32394 08:874E: D4 15        	pei	<L1323+dc_1
 32395 08:8750: A9 06 00     	lda	#$6
 32396                        	xref	~~~llsr
 32397 08:8753: 22 xx xx xx  	jsl	~~~llsr
 32398 08:8757: 85 01        	sta	<R0
 32399 08:8759: 86 03        	stx	<R0+2
 32400 08:875B: A5 01        	lda	<R0
 32401 08:875D: 29 3F 00     	and	#<$3f
 32402 08:8760: 85 05        	sta	<R1
 32403 08:8762: 64 07        	stz	<R1+2
 32404 08:8764: A5 05        	lda	<R1
 32405 08:8766: 09 80 00     	ora	#<$80
 32406 08:8769: 85 01        	sta	<R0
 32407 08:876B: A5 07        	lda	<R1+2
 32408 08:876D: 85 03        	sta	<R0+2
 32409 08:876F: E2 20        	sep	#$20
 32410                        	longa	off
 32411 08:8771: A5 01        	lda	<R0
 32412 08:8773: 87 0B        	sta	[<L1323+p_1]
 32413 08:8775: C2 20        	rep	#$20
 32414                        	longa	on
 32415 08:8777: E6 0B        	inc	<L1323+p_1
 32416 08:8779: D0 02        	bne	L1358
 32417 08:877B: E6 0D        	inc	<L1323+p_1+2
 32418                        L1358:
 32419                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 0 & 0x3F));
 32420                        	.line	7316
 32421 08:877D: A5 15        	lda	<L1323+dc_1
 32422 08:877F: 29 3F 00     	and	#<$3f
 32423 08:8782: 85 01        	sta	<R0
 32424 08:8784: 64 03        	stz	<R0+2
 32425 08:8786: A5 01        	lda	<R0
 32426 08:8788: 09 80 00     	ora	#<$80
 32427 08:878B: 85 05        	sta	<R1
 32428 08:878D: A5 03        	lda	<R0+2
 32429 08:878F: 85 07        	sta	<R1+2
 32430 08:8791: E2 20        	sep	#$20
 32431                        	longa	off
 32432 08:8793: A5 05        	lda	<R1
 32433 08:8795: 87 0B        	sta	[<L1323+p_1]
 32434 08:8797: C2 20        	rep	#$20
 32435                        	longa	on
 32436 08:8799: E6 0B        	inc	<L1323+p_1
 32437 08:879B: D0 02        	bne	L1359
 32438 08:879D: E6 0D        	inc	<L1323+p_1+2
 32439                        L1359:
 32440                        ;					nc += 3;
 32441                        	.line	7317
 32442 08:879F: E6 09        	inc	<L1323+nc_1
 32443 08:87A1: E6 09        	inc	<L1323+nc_1
 32444 08:87A3: E6 09        	inc	<L1323+nc_1
 32445                        ;				}
 32446                        	.line	7318
 32447                        ;				else
  Sat Jul 10 2021  1:15                                                Page 615


 32448 08:87A5: 82 BD 00     	brl	L10806
 32449                        L10805:
 32450                        ;				{ /* 4-byte sequence? */
 32451                        	.line	7320
 32452                        ;					*p++ = (TCHAR)(0
                    xF0 | (dc >> 18 & 0x07));
 32453                        	.line	7321
 32454 08:87A8: D4 17        	pei	<L1323+dc_1+2
 32455 08:87AA: D4 15        	pei	<L1323+dc_1
 32456 08:87AC: A9 12 00     	lda	#$12
 32457                        	xref	~~~llsr
 32458 08:87AF: 22 xx xx xx  	jsl	~~~llsr
 32459 08:87B3: 85 01        	sta	<R0
 32460 08:87B5: 86 03        	stx	<R0+2
 32461 08:87B7: A5 01        	lda	<R0
 32462 08:87B9: 29 07 00     	and	#<$7
 32463 08:87BC: 85 05        	sta	<R1
 32464 08:87BE: 64 07        	stz	<R1+2
 32465 08:87C0: A5 05        	lda	<R1
 32466 08:87C2: 09 F0 00     	ora	#<$f0
 32467 08:87C5: 85 01        	sta	<R0
 32468 08:87C7: A5 07        	lda	<R1+2
 32469 08:87C9: 85 03        	sta	<R0+2
 32470 08:87CB: E2 20        	sep	#$20
 32471                        	longa	off
 32472 08:87CD: A5 01        	lda	<R0
 32473 08:87CF: 87 0B        	sta	[<L1323+p_1]
 32474 08:87D1: C2 20        	rep	#$20
 32475                        	longa	on
 32476 08:87D3: E6 0B        	inc	<L1323+p_1
 32477 08:87D5: D0 02        	bne	L1360
 32478 08:87D7: E6 0D        	inc	<L1323+p_1+2
 32479                        L1360:
 32480                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 12 & 0x3F));
 32481                        	.line	7322
 32482 08:87D9: D4 17        	pei	<L1323+dc_1+2
 32483 08:87DB: D4 15        	pei	<L1323+dc_1
 32484 08:87DD: A9 0C 00     	lda	#$c
 32485                        	xref	~~~llsr
 32486 08:87E0: 22 xx xx xx  	jsl	~~~llsr
 32487 08:87E4: 85 01        	sta	<R0
 32488 08:87E6: 86 03        	stx	<R0+2
 32489 08:87E8: A5 01        	lda	<R0
 32490 08:87EA: 29 3F 00     	and	#<$3f
 32491 08:87ED: 85 05        	sta	<R1
 32492 08:87EF: 64 07        	stz	<R1+2
 32493 08:87F1: A5 05        	lda	<R1
 32494 08:87F3: 09 80 00     	ora	#<$80
 32495 08:87F6: 85 01        	sta	<R0
 32496 08:87F8: A5 07        	lda	<R1+2
 32497 08:87FA: 85 03        	sta	<R0+2
 32498 08:87FC: E2 20        	sep	#$20
 32499                        	longa	off
 32500 08:87FE: A5 01        	lda	<R0
 32501 08:8800: 87 0B        	sta	[<L1323+p_1]
 32502 08:8802: C2 20        	rep	#$20
 32503                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 616


 32504 08:8804: E6 0B        	inc	<L1323+p_1
 32505 08:8806: D0 02        	bne	L1361
 32506 08:8808: E6 0D        	inc	<L1323+p_1+2
 32507                        L1361:
 32508                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 6 & 0x3F));
 32509                        	.line	7323
 32510 08:880A: D4 17        	pei	<L1323+dc_1+2
 32511 08:880C: D4 15        	pei	<L1323+dc_1
 32512 08:880E: A9 06 00     	lda	#$6
 32513                        	xref	~~~llsr
 32514 08:8811: 22 xx xx xx  	jsl	~~~llsr
 32515 08:8815: 85 01        	sta	<R0
 32516 08:8817: 86 03        	stx	<R0+2
 32517 08:8819: A5 01        	lda	<R0
 32518 08:881B: 29 3F 00     	and	#<$3f
 32519 08:881E: 85 05        	sta	<R1
 32520 08:8820: 64 07        	stz	<R1+2
 32521 08:8822: A5 05        	lda	<R1
 32522 08:8824: 09 80 00     	ora	#<$80
 32523 08:8827: 85 01        	sta	<R0
 32524 08:8829: A5 07        	lda	<R1+2
 32525 08:882B: 85 03        	sta	<R0+2
 32526 08:882D: E2 20        	sep	#$20
 32527                        	longa	off
 32528 08:882F: A5 01        	lda	<R0
 32529 08:8831: 87 0B        	sta	[<L1323+p_1]
 32530 08:8833: C2 20        	rep	#$20
 32531                        	longa	on
 32532 08:8835: E6 0B        	inc	<L1323+p_1
 32533 08:8837: D0 02        	bne	L1362
 32534 08:8839: E6 0D        	inc	<L1323+p_1+2
 32535                        L1362:
 32536                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 0 & 0x3F));
 32537                        	.line	7324
 32538 08:883B: A5 15        	lda	<L1323+dc_1
 32539 08:883D: 29 3F 00     	and	#<$3f
 32540 08:8840: 85 01        	sta	<R0
 32541 08:8842: 64 03        	stz	<R0+2
 32542 08:8844: A5 01        	lda	<R0
 32543 08:8846: 09 80 00     	ora	#<$80
 32544 08:8849: 85 05        	sta	<R1
 32545 08:884B: A5 03        	lda	<R0+2
 32546 08:884D: 85 07        	sta	<R1+2
 32547 08:884F: E2 20        	sep	#$20
 32548                        	longa	off
 32549 08:8851: A5 05        	lda	<R1
 32550 08:8853: 87 0B        	sta	[<L1323+p_1]
 32551 08:8855: C2 20        	rep	#$20
 32552                        	longa	on
 32553 08:8857: E6 0B        	inc	<L1323+p_1
 32554 08:8859: D0 02        	bne	L1363
 32555 08:885B: E6 0D        	inc	<L1323+p_1+2
 32556                        L1363:
 32557                        ;					nc += 4;
 32558                        	.line	7325
 32559 08:885D: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 617


 32560 08:885E: A9 04 00     	lda	#$4
 32561 08:8861: 65 09        	adc	<L1323+nc_1
 32562 08:8863: 85 09        	sta	<L1323+nc_1
 32563                        ;				}
 32564                        	.line	7326
 32565                        L10806:
 32566                        ;			}
 32567                        	.line	7327
 32568                        L10804:
 32569                        ;		}
 32570                        	.line	7328
 32571                        L10802:
 32572                        ;#endif
 32573                        ;	}
 32574                        	.line	7330
 32575 08:8865: 82 6B FC     	brl	L10792
 32576                        L10793:
 32577                        ;
 32578                        ;#else			/* Byte-by-byte read wit
                    hout any conversion (ANSI/OEM API) */
 32579                        ;	len -= 1; /* Make a room for the terminator */
 32580                        ;	while (nc < len)
 32581                        ;	{
 32582                        ;		f_read(fp, s, 1, &rc); /* Get a byte */
 32583                        ;		if (rc != 1)
 32584                        ;			break; /* EOF? */
 32585                        ;		dc = s[0];
 32586                        ;		if (FF_USE_STRFUNC == 2 && dc == '\r')
 32587                        ;			continue;
 32588                        ;		*p++ = (TCHAR) dc;
 32589                        ;		nc++;
 32590                        ;		if (dc == '\n')
 32591                        ;			break;
 32592                        ;	}
 32593                        ;#endif
 32594                        ;
 32595                        ;	*p = 0; /* Terminate the string */
 32596                        	.line	7349
 32597 08:8868: E2 20        	sep	#$20
 32598                        	longa	off
 32599 08:886A: A9 00        	lda	#$0
 32600 08:886C: 87 0B        	sta	[<L1323+p_1]
 32601 08:886E: C2 20        	rep	#$20
 32602                        	longa	on
 32603                        ;	return nc ? buff : 0; /* When no data read due t
                    o EOF or error, return with error. */
 32604                        	.line	7350
 32605 08:8870: A5 09        	lda	<L1323+nc_1
 32606 08:8872: D0 03        	bne	L1365
 32607 08:8874: 82 06 00     	brl	L1364
 32608                        L1365:
 32609 08:8877: A6 20        	ldx	<L1322+buff_0+2
 32610 08:8879: A5 1E        	lda	<L1322+buff_0
 32611 08:887B: 80 07        	bra	L1366
 32612                        L1364:
 32613 08:887D: A9 00 00     	lda	#$0
 32614 08:8880: AA           	tax
 32615 08:8881: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 618


 32616                        L1366:
 32617 08:8884: 85 01        	sta	<R0
 32618 08:8886: 86 03        	stx	<R0+2
 32619 08:8888: A6 03        	ldx	<R0+2
 32620 08:888A: A5 01        	lda	<R0
 32621                        L1367:
 32622 08:888C: A8           	tay
 32623 08:888D: A5 1C        	lda	<L1322+2
 32624 08:888F: 85 26        	sta	<L1322+2+10
 32625 08:8891: A5 1B        	lda	<L1322+1
 32626 08:8893: 85 25        	sta	<L1322+1+10
 32627 08:8895: 2B           	pld
 32628 08:8896: 3B           	tsc
 32629 08:8897: 18           	clc
 32630 08:8898: 69 24 00     	adc	#L1322+10
 32631 08:889B: 1B           	tcs
 32632 08:889C: 98           	tya
 32633 08:889D: 6B           	rtl
 32634                        ;}
 32635                        	.line	7351
 32636                        	.endblock	7351
 32637             0000001A   L1322	equ	26
 32638             00000009   L1323	equ	9
 32639 08:889E:              	ends
 32640                        	efunc
 32641                        	.endfunc	7351,9,26
 32642                        	.line	7351
 32643                        ;
 32644                        ;#if !FF_FS_READONLY
 32645                        ;#include <stdarg.h>
 32646                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
 32647                        	.line	51
 32648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",7354
 32649                        ;/*-----------------------------------------------
                    ------------------------*/
 32650                        ;/* Put a Character to the File (sub-functions)   
                                            */
 32651                        ;/*-----------------------------------------------
                    ------------------------*/
 32652                        ;
 32653                        ;/* Putchar output buffer and work area */
 32654                        ;
 32655                        ;typedef struct
 32656                        ;{
 32657                        ;	FIL *fp; /* Ptr to the writing file */
 32658                        ;	int idx, nchr; /* Write index of buf[] (-1:error
                    ), number of encoding units written */
 32659                        ;#if FF_USE_LFN && FF_LFN_UNICODE == 1
 32660                        ;	WCHAR hs;
 32661                        ;#elif FF_USE_LFN && FF_LFN_UNICODE == 2
 32662                        ;	BYTE bs[4];
 32663                        ;	UINT wi, ct;
 32664                        ;#endif
 32665                        ;	BYTE buf[64]; /* Write buffer */
 32666                        ;} putbuff;
 32667                        	.stag	fake125_,640,125
  Sat Jul 10 2021  1:15                                                Page 619


 32668                        	.member	fp,0,138,8,32,74
 32669                        	.member	idx,32,5,8,16
 32670                        	.member	nchr,48,5,8,16
 32671                        	.member	bs,64,110,8,0,4
 32672                        	.member	wi,96,16,8,16
 32673                        	.member	ct,112,16,8,16
 32674                        	.member	buf,128,110,8,0,64
 32675                        	.eos
 32676                        ;
 32677                        ;/* Buffered write with code conversion */
 32678                        ;
 32679                        ;static void putc_bfd(putbuff* pb, TCHAR c)
 32680                        ;{
 32681                        	.line	7376
 32682                        	.line	7377
 32683                        	FFDOS
 32684                        	func
 32685                        	.function	7377
 32686                        ~~putc_bfd:
 32687                        	longa	on
 32688                        	longi	on
 32689 08:889E: 3B           	tsc
 32690 08:889F: 38           	sec
 32691 08:88A0: E9 1E 00     	sbc	#L1368
 32692 08:88A3: 1B           	tcs
 32693 08:88A4: 0B           	phd
 32694 08:88A5: 5B           	tcd
 32695             00000004   pb_0	set	4
 32696             00000008   c_0	set	8
 32697                        	.block	7377
 32698                        ;	UINT n;
 32699                        ;	int i, nc;
 32700                        ;#if FF_USE_LFN && FF_LFN_UNICODE
 32701                        ;	WCHAR hs, wc;
 32702                        ;#if FF_LFN_UNICODE == 2
 32703                        ;	DWORD dc;
 32704                        ;	TCHAR *tp;
 32705                        ;#endif
 32706                        ;#endif
 32707                        ;
 32708                        ;	if (FF_USE_STRFUNC == 2 && c == '\n')
 32709             00000000   n_1	set	0
 32710             00000002   i_1	set	2
 32711             00000004   nc_1	set	4
 32712             00000006   hs_1	set	6
 32713             00000008   wc_1	set	8
 32714             0000000A   dc_1	set	10
 32715             0000000E   tp_1	set	14
 32716                        	.sym	n,0,16,1,16
 32717                        	.sym	i,2,5,1,16
 32718                        	.sym	nc,4,5,1,16
 32719                        	.sym	hs,6,16,1,16
 32720                        	.sym	wc,8,16,1,16
 32721                        	.sym	dc,10,18,1,32
 32722                        	.sym	tp,14,142,1,32
 32723                        	.sym	pb,4,138,6,32,125
 32724                        	.sym	c,8,14,6,8
 32725                        	.line	7388
  Sat Jul 10 2021  1:15                                                Page 620


 32726                        ;	{ /* LF -> CRLF conversion */
 32727 08:88A6: 82 18 00     	brl	L10807
 32728 08:88A9: E2 20        	sep	#$20
 32729                        	longa	off
 32730 08:88AB: A5 26        	lda	<L1368+c_0
 32731 08:88AD: C9 0A        	cmp	#<$a
 32732 08:88AF: C2 20        	rep	#$20
 32733                        	longa	on
 32734 08:88B1: F0 03        	beq	L1371
 32735 08:88B3: 82 0B 00     	brl	L10807
 32736                        L1371:
 32737                        	.line	7389
 32738                        ;		putc_bfd(pb, '\r');
 32739                        	.line	7390
 32740 08:88B6: F4 0D 00     	pea	#<$d
 32741 08:88B9: D4 24        	pei	<L1368+pb_0+2
 32742 08:88BB: D4 22        	pei	<L1368+pb_0
 32743 08:88BD: 22 9E 88 08  	jsl	~~putc_bfd
 32744                        ;	}
 32745                        	.line	7391
 32746                        ;
 32747                        ;	i = pb->idx; /* Write index of pb->buf[] */
 32748                        L10807:
 32749                        	.line	7393
 32750 08:88C1: A0 04 00     	ldy	#$4
 32751 08:88C4: B7 22        	lda	[<L1368+pb_0],Y
 32752 08:88C6: 85 0F        	sta	<L1369+i_1
 32753                        ;	if (i < 0)
 32754                        	.line	7394
 32755                        ;		return;
 32756 08:88C8: A5 0F        	lda	<L1369+i_1
 32757 08:88CA: 30 03        	bmi	L1372
 32758 08:88CC: 82 10 00     	brl	L10808
 32759                        L1372:
 32760                        	.line	7395
 32761                        L1373:
 32762 08:88CF: A5 20        	lda	<L1368+2
 32763 08:88D1: 85 26        	sta	<L1368+2+6
 32764 08:88D3: A5 1F        	lda	<L1368+1
 32765 08:88D5: 85 25        	sta	<L1368+1+6
 32766 08:88D7: 2B           	pld
 32767 08:88D8: 3B           	tsc
 32768 08:88D9: 18           	clc
 32769 08:88DA: 69 24 00     	adc	#L1368+6
 32770 08:88DD: 1B           	tcs
 32771 08:88DE: 6B           	rtl
 32772                        ;	nc = pb->nchr; /* Write unit counter */
 32773                        L10808:
 32774                        	.line	7396
 32775 08:88DF: A0 06 00     	ldy	#$6
 32776 08:88E2: B7 22        	lda	[<L1368+pb_0],Y
 32777 08:88E4: 85 11        	sta	<L1369+nc_1
 32778                        ;
 32779                        ;#if FF_USE_LFN && FF_LFN_UNICODE
 32780                        ;#if FF_LFN_UNICODE == 1		/* UTF-16 input 
                    */
 32781                        ;	if (IsSurrogateH(c))
 32782                        ;	{ /* High surrogate? */
  Sat Jul 10 2021  1:15                                                Page 621


 32783                        ;		pb->hs = c; return; /* Save it for next 
                    */
 32784                        ;	}
 32785                        ;	hs = pb->hs; pb->hs = 0;
 32786                        ;	if (hs != 0)
 32787                        ;	{ /* There is a leading high surrogate */
 32788                        ;		if (!IsSurrogateL(c)) hs = 0; /* Discard
                     high surrogate if not a surrogate pair */
 32789                        ;	}
 32790                        ;	else
 32791                        ;	{
 32792                        ;		if (IsSurrogateL(c)) return; /* Discard 
                    stray low surrogate */
 32793                        ;	}
 32794                        ;	wc = c;
 32795                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 input *
                    /
 32796                        ;	for (;;)
 32797                        	.line	7415
 32798                        L10811:
 32799                        ;	{
 32800                        	.line	7416
 32801                        ;		if (pb->ct == 0)
 32802                        	.line	7417
 32803                        ;		{ /* Out of multi-byte sequence? */
 32804 08:88E6: A0 0E 00     	ldy	#$e
 32805 08:88E9: B7 22        	lda	[<L1368+pb_0],Y
 32806 08:88EB: F0 03        	beq	L1374
 32807 08:88ED: 82 76 00     	brl	L10812
 32808                        L1374:
 32809                        	.line	7418
 32810                        ;			pb->bs[pb->wi = 0] = (BYTE)c; /*
                     Save 1st byte */
 32811                        	.line	7419
 32812 08:88F0: A9 00 00     	lda	#$0
 32813 08:88F3: A0 0C 00     	ldy	#$c
 32814 08:88F6: 97 22        	sta	[<L1368+pb_0],Y
 32815 08:88F8: 18           	clc
 32816 08:88F9: A9 08 00     	lda	#$8
 32817 08:88FC: 69 00 00     	adc	#<$0
 32818 08:88FF: 85 01        	sta	<R0
 32819 08:8901: E2 20        	sep	#$20
 32820                        	longa	off
 32821 08:8903: A5 26        	lda	<L1368+c_0
 32822 08:8905: A4 01        	ldy	<R0
 32823 08:8907: 97 22        	sta	[<L1368+pb_0],Y
 32824 08:8909: C2 20        	rep	#$20
 32825                        	longa	on
 32826                        ;			if ((BYTE)c < 0x80) break; /* Si
                    ngle byte? */
 32827                        	.line	7420
 32828 08:890B: E2 20        	sep	#$20
 32829                        	longa	off
 32830 08:890D: A5 26        	lda	<L1368+c_0
 32831 08:890F: C9 80        	cmp	#<$80
 32832 08:8911: C2 20        	rep	#$20
 32833                        	longa	on
 32834 08:8913: B0 03        	bcs	L1375
  Sat Jul 10 2021  1:15                                                Page 622


 32835 08:8915: 82 AC 00     	brl	L10810
 32836                        L1375:
 32837                        ;			if (((BYTE)c & 0xE0) == 0xC0) pb
                    ->ct = 1; /* 2-byte sequence? */
 32838                        	.line	7421
 32839 08:8918: A5 26        	lda	<L1368+c_0
 32840 08:891A: 29 E0 00     	and	#<$e0
 32841 08:891D: 85 01        	sta	<R0
 32842 08:891F: A5 01        	lda	<R0
 32843 08:8921: C9 C0 00     	cmp	#<$c0
 32844 08:8924: F0 03        	beq	L1376
 32845 08:8926: 82 08 00     	brl	L10813
 32846                        L1376:
 32847                        	.line	7421
 32848 08:8929: A9 01 00     	lda	#$1
 32849 08:892C: A0 0E 00     	ldy	#$e
 32850 08:892F: 97 22        	sta	[<L1368+pb_0],Y
 32851                        ;			if (((BYTE)c & 0xF0) == 0xE0) pb
                    ->ct = 2; /* 3-byte sequence? */
 32852                        L10813:
 32853                        	.line	7422
 32854 08:8931: A5 26        	lda	<L1368+c_0
 32855 08:8933: 29 F0 00     	and	#<$f0
 32856 08:8936: 85 01        	sta	<R0
 32857 08:8938: A5 01        	lda	<R0
 32858 08:893A: C9 E0 00     	cmp	#<$e0
 32859 08:893D: F0 03        	beq	L1377
 32860 08:893F: 82 08 00     	brl	L10814
 32861                        L1377:
 32862                        	.line	7422
 32863 08:8942: A9 02 00     	lda	#$2
 32864 08:8945: A0 0E 00     	ldy	#$e
 32865 08:8948: 97 22        	sta	[<L1368+pb_0],Y
 32866                        ;			if (((BYTE)c & 0xF1) == 0xF0) pb
                    ->ct = 3; /* 4-byte sequence? */
 32867                        L10814:
 32868                        	.line	7423
 32869 08:894A: A5 26        	lda	<L1368+c_0
 32870 08:894C: 29 F1 00     	and	#<$f1
 32871 08:894F: 85 01        	sta	<R0
 32872 08:8951: A5 01        	lda	<R0
 32873 08:8953: C9 F0 00     	cmp	#<$f0
 32874 08:8956: F0 03        	beq	L1378
 32875 08:8958: 82 08 00     	brl	L10815
 32876                        L1378:
 32877                        	.line	7423
 32878 08:895B: A9 03 00     	lda	#$3
 32879 08:895E: A0 0E 00     	ldy	#$e
 32880 08:8961: 97 22        	sta	[<L1368+pb_0],Y
 32881                        ;			return;
 32882                        L10815:
 32883                        	.line	7424
 32884 08:8963: 82 69 FF     	brl	L1373
 32885                        ;		}
 32886                        	.line	7425
 32887                        ;		else
 32888                        L10812:
 32889                        ;		{ /* In the multi-byte sequence */
  Sat Jul 10 2021  1:15                                                Page 623


 32890                        	.line	7427
 32891                        ;			if (((BYTE)c & 0xC0) != 0x80)
 32892                        	.line	7428
 32893                        ;			{ /* Broken sequence? */
 32894 08:8966: A5 26        	lda	<L1368+c_0
 32895 08:8968: 29 C0 00     	and	#<$c0
 32896 08:896B: 85 01        	sta	<R0
 32897 08:896D: A5 01        	lda	<R0
 32898 08:896F: C9 80 00     	cmp	#<$80
 32899 08:8972: D0 03        	bne	L1379
 32900 08:8974: 82 0B 00     	brl	L10816
 32901                        L1379:
 32902                        	.line	7429
 32903                        ;				pb->ct = 0; continue;
 32904                        	.line	7430
 32905 08:8977: A9 00 00     	lda	#$0
 32906 08:897A: A0 0E 00     	ldy	#$e
 32907 08:897D: 97 22        	sta	[<L1368+pb_0],Y
 32908                        	.line	7430
 32909 08:897F: 82 3F 00     	brl	L10809
 32910                        ;			}
 32911                        	.line	7431
 32912                        ;			pb->bs[++pb->wi] = (BYTE)c; /* S
                    ave the trailing byte */
 32913                        L10816:
 32914                        	.line	7432
 32915 08:8982: A0 0C 00     	ldy	#$c
 32916 08:8985: B7 22        	lda	[<L1368+pb_0],Y
 32917 08:8987: 1A           	ina
 32918 08:8988: A0 0C 00     	ldy	#$c
 32919 08:898B: 97 22        	sta	[<L1368+pb_0],Y
 32920 08:898D: A0 0C 00     	ldy	#$c
 32921 08:8990: B7 22        	lda	[<L1368+pb_0],Y
 32922 08:8992: 85 01        	sta	<R0
 32923 08:8994: 18           	clc
 32924 08:8995: A9 08 00     	lda	#$8
 32925 08:8998: 65 01        	adc	<R0
 32926 08:899A: 85 05        	sta	<R1
 32927 08:899C: E2 20        	sep	#$20
 32928                        	longa	off
 32929 08:899E: A5 26        	lda	<L1368+c_0
 32930 08:89A0: A4 05        	ldy	<R1
 32931 08:89A2: 97 22        	sta	[<L1368+pb_0],Y
 32932 08:89A4: C2 20        	rep	#$20
 32933                        	longa	on
 32934                        ;			if (--pb->ct == 0) break; /* End
                     of multi-byte sequence? */
 32935                        	.line	7433
 32936 08:89A6: 18           	clc
 32937 08:89A7: A9 FF FF     	lda	#$ffff
 32938 08:89AA: A0 0E 00     	ldy	#$e
 32939 08:89AD: 77 22        	adc	[<L1368+pb_0],Y
 32940 08:89AF: A0 0E 00     	ldy	#$e
 32941 08:89B2: 97 22        	sta	[<L1368+pb_0],Y
 32942 08:89B4: A0 0E 00     	ldy	#$e
 32943 08:89B7: B7 22        	lda	[<L1368+pb_0],Y
 32944 08:89B9: D0 03        	bne	L1380
 32945 08:89BB: 82 06 00     	brl	L10810
  Sat Jul 10 2021  1:15                                                Page 624


 32946                        L1380:
 32947                        ;			return;
 32948                        	.line	7434
 32949 08:89BE: 82 0E FF     	brl	L1373
 32950                        ;		}
 32951                        	.line	7435
 32952                        ;	}
 32953                        	.line	7436
 32954                        L10809:
 32955 08:89C1: 82 22 FF     	brl	L10811
 32956                        L10810:
 32957                        ;	tp = (TCHAR*)pb->bs;
 32958                        	.line	7437
 32959 08:89C4: 18           	clc
 32960 08:89C5: A9 08 00     	lda	#$8
 32961 08:89C8: 65 22        	adc	<L1368+pb_0
 32962 08:89CA: 85 1B        	sta	<L1369+tp_1
 32963 08:89CC: A9 00 00     	lda	#$0
 32964 08:89CF: 65 24        	adc	<L1368+pb_0+2
 32965 08:89D1: 85 1D        	sta	<L1369+tp_1+2
 32966                        ;	dc = tchar2uni(&tp); /* UTF-8 ==> UTF-16 */
 32967                        	.line	7438
 32968 08:89D3: F4 00 00     	pea	#0
 32969 08:89D6: 18           	clc
 32970 08:89D7: 7B           	tdc
 32971 08:89D8: 69 1B 00     	adc	#<L1369+tp_1
 32972 08:89DB: 48           	pha
 32973 08:89DC: 22 11 03 08  	jsl	~~tchar2uni
 32974 08:89E0: 85 17        	sta	<L1369+dc_1
 32975 08:89E2: 86 19        	stx	<L1369+dc_1+2
 32976                        ;	if (dc == 0xFFFFFFFF) return; /* Wrong code? */
 32977                        	.line	7439
 32978 08:89E4: A5 17        	lda	<L1369+dc_1
 32979 08:89E6: C9 FF FF     	cmp	#<$ffffffff
 32980 08:89E9: D0 05        	bne	L1381
 32981 08:89EB: A5 19        	lda	<L1369+dc_1+2
 32982 08:89ED: C9 FF FF     	cmp	#^$ffffffff
 32983                        L1381:
 32984 08:89F0: F0 03        	beq	L1382
 32985 08:89F2: 82 03 00     	brl	L10817
 32986                        L1382:
 32987                        	.line	7439
 32988 08:89F5: 82 D7 FE     	brl	L1373
 32989                        ;	wc = (WCHAR)dc;
 32990                        L10817:
 32991                        	.line	7440
 32992 08:89F8: A5 17        	lda	<L1369+dc_1
 32993 08:89FA: 85 15        	sta	<L1369+wc_1
 32994                        ;	hs = (WCHAR)(dc >> 16);
 32995                        	.line	7441
 32996 08:89FC: D4 19        	pei	<L1369+dc_1+2
 32997 08:89FE: D4 17        	pei	<L1369+dc_1
 32998 08:8A00: A9 10 00     	lda	#$10
 32999                        	xref	~~~llsr
 33000 08:8A03: 22 xx xx xx  	jsl	~~~llsr
 33001 08:8A07: 85 01        	sta	<R0
 33002 08:8A09: 86 03        	stx	<R0+2
 33003 08:8A0B: A5 01        	lda	<R0
  Sat Jul 10 2021  1:15                                                Page 625


 33004 08:8A0D: 85 13        	sta	<L1369+hs_1
 33005                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 input 
                    */
 33006                        ;	if (IsSurrogate(c) || c >= 0x110000) return; /* 
                    Discard invalid code */
 33007                        ;	if (c >= 0x10000)
 33008                        ;	{ /* Out of BMP? */
 33009                        ;		hs = (WCHAR)(0xD800 | ((c >> 10) - 0x40)
                    ); /* Make high surrogate */
 33010                        ;		wc = 0xDC00 | (c & 0x3FF); /* Make low s
                    urrogate */
 33011                        ;	}
 33012                        ;	else
 33013                        ;	{
 33014                        ;		hs = 0;
 33015                        ;		wc = (WCHAR)c;
 33016                        ;	}
 33017                        ;#endif
 33018                        ;	/* A code point in UTF-16 is available in hs and
                     wc */
 33019                        ;
 33020                        ;#if FF_STRF_ENCODE == 1		/* Write a code 
                    point in UTF-16LE */
 33021                        ;	if (hs != 0)
 33022                        ;	{ /* Surrogate pair? */
 33023                        ;		st_word(&pb->buf[i], hs);
 33024                        ;		i += 2;
 33025                        ;		nc++;
 33026                        ;	}
 33027                        ;	st_word(&pb->buf[i], wc);
 33028                        ;	i += 2;
 33029                        ;#elif FF_STRF_ENCODE == 2	/* Write a code 
                    point in UTF-16BE */
 33030                        ;	if (hs != 0)
 33031                        ;	{ /* Surrogate pair? */
 33032                        ;		pb->buf[i++] = (BYTE)(hs >> 8);
 33033                        ;		pb->buf[i++] = (BYTE)hs;
 33034                        ;		nc++;
 33035                        ;	}
 33036                        ;	pb->buf[i++] = (BYTE)(wc >> 8);
 33037                        ;	pb->buf[i++] = (BYTE)wc;
 33038                        ;#elif FF_STRF_ENCODE == 3	/* Write a code 
                    point in UTF-8 */
 33039                        ;	if (hs != 0)
 33040                        	.line	7476
 33041                        ;	{ /* 4-byte sequence? */
 33042 08:8A0F: A5 13        	lda	<L1369+hs_1
 33043 08:8A11: D0 03        	bne	L1383
 33044 08:8A13: 82 9F 00     	brl	L10818
 33045                        L1383:
 33046                        	.line	7477
 33047                        ;		nc += 3;
 33048                        	.line	7478
 33049 08:8A16: E6 11        	inc	<L1369+nc_1
 33050 08:8A18: E6 11        	inc	<L1369+nc_1
 33051 08:8A1A: E6 11        	inc	<L1369+nc_1
 33052                        ;		hs = (hs & 0x3FF) + 0x40;
 33053                        	.line	7479
  Sat Jul 10 2021  1:15                                                Page 626


 33054 08:8A1C: A5 13        	lda	<L1369+hs_1
 33055 08:8A1E: 29 FF 03     	and	#<$3ff
 33056 08:8A21: 85 01        	sta	<R0
 33057 08:8A23: 18           	clc
 33058 08:8A24: A9 40 00     	lda	#$40
 33059 08:8A27: 65 01        	adc	<R0
 33060 08:8A29: 85 13        	sta	<L1369+hs_1
 33061                        ;		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
 33062                        	.line	7480
 33063 08:8A2B: 18           	clc
 33064 08:8A2C: A9 10 00     	lda	#$10
 33065 08:8A2F: 65 0F        	adc	<L1369+i_1
 33066 08:8A31: 85 01        	sta	<R0
 33067 08:8A33: A5 13        	lda	<L1369+hs_1
 33068 08:8A35: EB           	xba
 33069 08:8A36: 29 FF 00     	and	#$00ff
 33070 08:8A39: 09 F0 00     	ora	#<$f0
 33071 08:8A3C: E2 20        	sep	#$20
 33072                        	longa	off
 33073 08:8A3E: A4 01        	ldy	<R0
 33074 08:8A40: 97 22        	sta	[<L1368+pb_0],Y
 33075 08:8A42: C2 20        	rep	#$20
 33076                        	longa	on
 33077 08:8A44: E6 0F        	inc	<L1369+i_1
 33078                        ;		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 
                    0x3F));
 33079                        	.line	7481
 33080 08:8A46: 18           	clc
 33081 08:8A47: A9 10 00     	lda	#$10
 33082 08:8A4A: 65 0F        	adc	<L1369+i_1
 33083 08:8A4C: 85 01        	sta	<R0
 33084 08:8A4E: A5 13        	lda	<L1369+hs_1
 33085 08:8A50: 4A           	lsr	A
 33086 08:8A51: 4A           	lsr	A
 33087 08:8A52: 29 3F 00     	and	#<$3f
 33088 08:8A55: 09 80 00     	ora	#<$80
 33089 08:8A58: E2 20        	sep	#$20
 33090                        	longa	off
 33091 08:8A5A: A4 01        	ldy	<R0
 33092 08:8A5C: 97 22        	sta	[<L1368+pb_0],Y
 33093 08:8A5E: C2 20        	rep	#$20
 33094                        	longa	on
 33095 08:8A60: E6 0F        	inc	<L1369+i_1
 33096                        ;		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) <<
                     4 | (wc >> 6 & 0x0F));
 33097                        	.line	7482
 33098 08:8A62: 18           	clc
 33099 08:8A63: A9 10 00     	lda	#$10
 33100 08:8A66: 65 0F        	adc	<L1369+i_1
 33101 08:8A68: 85 01        	sta	<R0
 33102 08:8A6A: A5 13        	lda	<L1369+hs_1
 33103 08:8A6C: 29 03 00     	and	#<$3
 33104 08:8A6F: 85 09        	sta	<R2
 33105 08:8A71: A5 09        	lda	<R2
 33106 08:8A73: 0A           	asl	A
 33107 08:8A74: 0A           	asl	A
 33108 08:8A75: 0A           	asl	A
 33109 08:8A76: 0A           	asl	A
  Sat Jul 10 2021  1:15                                                Page 627


 33110 08:8A77: 85 05        	sta	<R1
 33111 08:8A79: A5 15        	lda	<L1369+wc_1
 33112 08:8A7B: A2 06 00     	ldx	#<$6
 33113                        	xref	~~~lsr
 33114 08:8A7E: 22 xx xx xx  	jsl	~~~lsr
 33115 08:8A82: 29 0F 00     	and	#<$f
 33116 08:8A85: 85 09        	sta	<R2
 33117 08:8A87: A5 09        	lda	<R2
 33118 08:8A89: 05 05        	ora	<R1
 33119 08:8A8B: 09 80 00     	ora	#<$80
 33120 08:8A8E: E2 20        	sep	#$20
 33121                        	longa	off
 33122 08:8A90: A4 01        	ldy	<R0
 33123 08:8A92: 97 22        	sta	[<L1368+pb_0],Y
 33124 08:8A94: C2 20        	rep	#$20
 33125                        	longa	on
 33126 08:8A96: E6 0F        	inc	<L1369+i_1
 33127                        ;		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F)
                    );
 33128                        	.line	7483
 33129 08:8A98: 18           	clc
 33130 08:8A99: A9 10 00     	lda	#$10
 33131 08:8A9C: 65 0F        	adc	<L1369+i_1
 33132 08:8A9E: 85 01        	sta	<R0
 33133 08:8AA0: A5 15        	lda	<L1369+wc_1
 33134 08:8AA2: 29 3F 00     	and	#<$3f
 33135 08:8AA5: 09 80 00     	ora	#<$80
 33136 08:8AA8: E2 20        	sep	#$20
 33137                        	longa	off
 33138 08:8AAA: A4 01        	ldy	<R0
 33139 08:8AAC: 97 22        	sta	[<L1368+pb_0],Y
 33140 08:8AAE: C2 20        	rep	#$20
 33141                        	longa	on
 33142 08:8AB0: E6 0F        	inc	<L1369+i_1
 33143                        ;	}
 33144                        	.line	7484
 33145                        ;	else
 33146 08:8AB2: 82 AB 00     	brl	L10819
 33147                        L10818:
 33148                        ;	{
 33149                        	.line	7486
 33150                        ;		if (wc < 0x80)
 33151                        	.line	7487
 33152                        ;		{ /* Single byte? */
 33153 08:8AB5: A5 15        	lda	<L1369+wc_1
 33154 08:8AB7: C9 80 00     	cmp	#<$80
 33155 08:8ABA: 90 03        	bcc	L1384
 33156 08:8ABC: 82 17 00     	brl	L10820
 33157                        L1384:
 33158                        	.line	7488
 33159                        ;			pb->buf[i++] = (BYTE)wc;
 33160                        	.line	7489
 33161 08:8ABF: 18           	clc
 33162 08:8AC0: A9 10 00     	lda	#$10
 33163 08:8AC3: 65 0F        	adc	<L1369+i_1
 33164 08:8AC5: 85 01        	sta	<R0
 33165 08:8AC7: E2 20        	sep	#$20
 33166                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 628


 33167 08:8AC9: A5 15        	lda	<L1369+wc_1
 33168 08:8ACB: A4 01        	ldy	<R0
 33169 08:8ACD: 97 22        	sta	[<L1368+pb_0],Y
 33170 08:8ACF: C2 20        	rep	#$20
 33171                        	longa	on
 33172 08:8AD1: E6 0F        	inc	<L1369+i_1
 33173                        ;		}
 33174                        	.line	7490
 33175                        ;		else
 33176 08:8AD3: 82 8A 00     	brl	L10821
 33177                        L10820:
 33178                        ;		{
 33179                        	.line	7492
 33180                        ;			if (wc < 0x800)
 33181                        	.line	7493
 33182                        ;			{ /* 2-byte sequence? */
 33183 08:8AD6: A5 15        	lda	<L1369+wc_1
 33184 08:8AD8: C9 00 08     	cmp	#<$800
 33185 08:8ADB: 90 03        	bcc	L1385
 33186 08:8ADD: 82 23 00     	brl	L10822
 33187                        L1385:
 33188                        	.line	7494
 33189                        ;				nc += 1;
 33190                        	.line	7495
 33191 08:8AE0: E6 11        	inc	<L1369+nc_1
 33192                        ;				pb->buf[i++] = (BYTE)(0x
                    C0 | wc >> 6);
 33193                        	.line	7496
 33194 08:8AE2: 18           	clc
 33195 08:8AE3: A9 10 00     	lda	#$10
 33196 08:8AE6: 65 0F        	adc	<L1369+i_1
 33197 08:8AE8: 85 01        	sta	<R0
 33198 08:8AEA: A5 15        	lda	<L1369+wc_1
 33199 08:8AEC: A2 06 00     	ldx	#<$6
 33200                        	xref	~~~lsr
 33201 08:8AEF: 22 xx xx xx  	jsl	~~~lsr
 33202 08:8AF3: 09 C0 00     	ora	#<$c0
 33203 08:8AF6: E2 20        	sep	#$20
 33204                        	longa	off
 33205 08:8AF8: A4 01        	ldy	<R0
 33206 08:8AFA: 97 22        	sta	[<L1368+pb_0],Y
 33207 08:8AFC: C2 20        	rep	#$20
 33208                        	longa	on
 33209 08:8AFE: E6 0F        	inc	<L1369+i_1
 33210                        ;			}
 33211                        	.line	7497
 33212                        ;			else
 33213 08:8B00: 82 43 00     	brl	L10823
 33214                        L10822:
 33215                        ;			{ /* 3-byte sequence */
 33216                        	.line	7499
 33217                        ;				nc += 2;
 33218                        	.line	7500
 33219 08:8B03: E6 11        	inc	<L1369+nc_1
 33220 08:8B05: E6 11        	inc	<L1369+nc_1
 33221                        ;				pb->buf[i++] = (BYTE)(0x
                    E0 | wc >> 12);
 33222                        	.line	7501
  Sat Jul 10 2021  1:15                                                Page 629


 33223 08:8B07: 18           	clc
 33224 08:8B08: A9 10 00     	lda	#$10
 33225 08:8B0B: 65 0F        	adc	<L1369+i_1
 33226 08:8B0D: 85 01        	sta	<R0
 33227 08:8B0F: A5 15        	lda	<L1369+wc_1
 33228 08:8B11: A2 0C 00     	ldx	#<$c
 33229                        	xref	~~~lsr
 33230 08:8B14: 22 xx xx xx  	jsl	~~~lsr
 33231 08:8B18: 09 E0 00     	ora	#<$e0
 33232 08:8B1B: E2 20        	sep	#$20
 33233                        	longa	off
 33234 08:8B1D: A4 01        	ldy	<R0
 33235 08:8B1F: 97 22        	sta	[<L1368+pb_0],Y
 33236 08:8B21: C2 20        	rep	#$20
 33237                        	longa	on
 33238 08:8B23: E6 0F        	inc	<L1369+i_1
 33239                        ;				pb->buf[i++] = (BYTE)(0x
                    80 | (wc >> 6 & 0x3F));
 33240                        	.line	7502
 33241 08:8B25: 18           	clc
 33242 08:8B26: A9 10 00     	lda	#$10
 33243 08:8B29: 65 0F        	adc	<L1369+i_1
 33244 08:8B2B: 85 01        	sta	<R0
 33245 08:8B2D: A5 15        	lda	<L1369+wc_1
 33246 08:8B2F: A2 06 00     	ldx	#<$6
 33247                        	xref	~~~lsr
 33248 08:8B32: 22 xx xx xx  	jsl	~~~lsr
 33249 08:8B36: 29 3F 00     	and	#<$3f
 33250 08:8B39: 09 80 00     	ora	#<$80
 33251 08:8B3C: E2 20        	sep	#$20
 33252                        	longa	off
 33253 08:8B3E: A4 01        	ldy	<R0
 33254 08:8B40: 97 22        	sta	[<L1368+pb_0],Y
 33255 08:8B42: C2 20        	rep	#$20
 33256                        	longa	on
 33257 08:8B44: E6 0F        	inc	<L1369+i_1
 33258                        ;			}
 33259                        	.line	7503
 33260                        L10823:
 33261                        ;			pb->buf[i++] = (BYTE)(0x80 | (wc
                     & 0x3F));
 33262                        	.line	7504
 33263 08:8B46: 18           	clc
 33264 08:8B47: A9 10 00     	lda	#$10
 33265 08:8B4A: 65 0F        	adc	<L1369+i_1
 33266 08:8B4C: 85 01        	sta	<R0
 33267 08:8B4E: A5 15        	lda	<L1369+wc_1
 33268 08:8B50: 29 3F 00     	and	#<$3f
 33269 08:8B53: 09 80 00     	ora	#<$80
 33270 08:8B56: E2 20        	sep	#$20
 33271                        	longa	off
 33272 08:8B58: A4 01        	ldy	<R0
 33273 08:8B5A: 97 22        	sta	[<L1368+pb_0],Y
 33274 08:8B5C: C2 20        	rep	#$20
 33275                        	longa	on
 33276 08:8B5E: E6 0F        	inc	<L1369+i_1
 33277                        ;		}
 33278                        	.line	7505
  Sat Jul 10 2021  1:15                                                Page 630


 33279                        L10821:
 33280                        ;	}
 33281                        	.line	7506
 33282                        L10819:
 33283                        ;#else						
                    /* Write a code point in ANSI/OEM */
 33284                        ;	if (hs != 0) return;
 33285                        ;	wc = ff_uni2oem(wc, CODEPAGE); /* UTF-16 ==> ANS
                    I/OEM */
 33286                        ;	if (wc == 0) return;
 33287                        ;	if (wc >= 0x100)
 33288                        ;	{
 33289                        ;		pb->buf[i++] = (BYTE)(wc >> 8); nc++;
 33290                        ;	}
 33291                        ;	pb->buf[i++] = (BYTE)wc;
 33292                        ;#endif
 33293                        ;
 33294                        ;#else						
                    			/* ANSI/OEM input (without re-encoding) 
                    */
 33295                        ;	pb->buf[i++] = (BYTE) c;
 33296                        ;#endif
 33297                        ;
 33298                        ;	if (i >= (int) (sizeof pb->buf) - 4)
 33299                        	.line	7522
 33300                        ;	{ /* Write buffered characters to the file */
 33301 08:8B60: 38           	sec
 33302 08:8B61: A5 0F        	lda	<L1369+i_1
 33303 08:8B63: E9 3C 00     	sbc	#<$3c
 33304 08:8B66: 70 03        	bvs	L1386
 33305 08:8B68: 49 00 80     	eor	#$8000
 33306                        L1386:
 33307 08:8B6B: 30 03        	bmi	L1387
 33308 08:8B6D: 82 3E 00     	brl	L10824
 33309                        L1387:
 33310                        	.line	7523
 33311                        ;		f_write(pb->fp, pb->buf, (UINT) i, &n);
 33312                        	.line	7524
 33313 08:8B70: F4 00 00     	pea	#0
 33314 08:8B73: 18           	clc
 33315 08:8B74: 7B           	tdc
 33316 08:8B75: 69 0D 00     	adc	#<L1369+n_1
 33317 08:8B78: 48           	pha
 33318 08:8B79: D4 0F        	pei	<L1369+i_1
 33319 08:8B7B: 18           	clc
 33320 08:8B7C: A9 10 00     	lda	#$10
 33321 08:8B7F: 65 22        	adc	<L1368+pb_0
 33322 08:8B81: 85 01        	sta	<R0
 33323 08:8B83: A9 00 00     	lda	#$0
 33324 08:8B86: 65 24        	adc	<L1368+pb_0+2
 33325 08:8B88: 85 03        	sta	<R0+2
 33326 08:8B8A: D4 03        	pei	<R0+2
 33327 08:8B8C: D4 01        	pei	<R0
 33328 08:8B8E: A0 02 00     	ldy	#$2
 33329 08:8B91: B7 22        	lda	[<L1368+pb_0],Y
 33330 08:8B93: 48           	pha
 33331 08:8B94: A7 22        	lda	[<L1368+pb_0]
 33332 08:8B96: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 631


 33333 08:8B97: 22 CF 4E 08  	jsl	~~f_write
 33334                        ;		i = (n == (UINT) i) ? 0 : -1;
 33335                        	.line	7525
 33336 08:8B9B: A5 0D        	lda	<L1369+n_1
 33337 08:8B9D: C5 0F        	cmp	<L1369+i_1
 33338 08:8B9F: F0 03        	beq	L1389
 33339 08:8BA1: 82 05 00     	brl	L1388
 33340                        L1389:
 33341 08:8BA4: A9 00 00     	lda	#$0
 33342 08:8BA7: 80 03        	bra	L1390
 33343                        L1388:
 33344 08:8BA9: A9 FF FF     	lda	#$ffff
 33345                        L1390:
 33346 08:8BAC: 85 0F        	sta	<L1369+i_1
 33347                        ;	}
 33348                        	.line	7526
 33349                        ;	pb->idx = i;
 33350                        L10824:
 33351                        	.line	7527
 33352 08:8BAE: A5 0F        	lda	<L1369+i_1
 33353 08:8BB0: A0 04 00     	ldy	#$4
 33354 08:8BB3: 97 22        	sta	[<L1368+pb_0],Y
 33355                        ;	pb->nchr = nc + 1;
 33356                        	.line	7528
 33357 08:8BB5: A5 11        	lda	<L1369+nc_1
 33358 08:8BB7: 1A           	ina
 33359 08:8BB8: A0 06 00     	ldy	#$6
 33360 08:8BBB: 97 22        	sta	[<L1368+pb_0],Y
 33361                        ;}
 33362                        	.line	7529
 33363 08:8BBD: 82 0F FD     	brl	L1373
 33364                        	.endblock	7529
 33365             0000001E   L1368	equ	30
 33366             0000000D   L1369	equ	13
 33367 08:8BC0:              	ends
 33368                        	efunc
 33369                        	.endfunc	7529,13,30
 33370                        	.line	7529
 33371                        ;
 33372                        ;/* Flush remaining characters in the buffer */
 33373                        ;
 33374                        ;static int putc_flush(putbuff* pb)
 33375                        ;{
 33376                        	.line	7533
 33377                        	.line	7534
 33378                        	FFDOS
 33379                        	func
 33380                        	.function	7534
 33381                        ~~putc_flush:
 33382                        	longa	on
 33383                        	longi	on
 33384 08:8BC0: 3B           	tsc
 33385 08:8BC1: 38           	sec
 33386 08:8BC2: E9 06 00     	sbc	#L1391
 33387 08:8BC5: 1B           	tcs
 33388 08:8BC6: 0B           	phd
 33389 08:8BC7: 5B           	tcd
 33390             00000004   pb_0	set	4
  Sat Jul 10 2021  1:15                                                Page 632


 33391                        	.block	7534
 33392                        ;	UINT nw;
 33393                        ;
 33394                        ;	if (pb->idx >= 0 /* Flush buffered characters to
                     the file */
 33395             00000000   nw_1	set	0
 33396                        	.sym	nw,0,16,1,16
 33397                        	.sym	pb,4,138,6,32,125
 33398                        	.line	7537
 33399                        ;	&& f_write(pb->fp, pb->buf, (UINT) pb->idx, &nw)
                     == FR_OK
 33400                        ;			&& (UINT) pb->idx == nw)
 33401                        ;		return pb->nchr;
 33402 08:8BC8: A0 04 00     	ldy	#$4
 33403 08:8BCB: B7 0A        	lda	[<L1391+pb_0],Y
 33404 08:8BCD: 10 03        	bpl	L1394
 33405 08:8BCF: 82 58 00     	brl	L10825
 33406                        L1394:
 33407 08:8BD2: F4 00 00     	pea	#0
 33408 08:8BD5: 18           	clc
 33409 08:8BD6: 7B           	tdc
 33410 08:8BD7: 69 05 00     	adc	#<L1392+nw_1
 33411 08:8BDA: 48           	pha
 33412 08:8BDB: A0 04 00     	ldy	#$4
 33413 08:8BDE: B7 0A        	lda	[<L1391+pb_0],Y
 33414 08:8BE0: 48           	pha
 33415 08:8BE1: 18           	clc
 33416 08:8BE2: A9 10 00     	lda	#$10
 33417 08:8BE5: 65 0A        	adc	<L1391+pb_0
 33418 08:8BE7: 85 01        	sta	<R0
 33419 08:8BE9: A9 00 00     	lda	#$0
 33420 08:8BEC: 65 0C        	adc	<L1391+pb_0+2
 33421 08:8BEE: 85 03        	sta	<R0+2
 33422 08:8BF0: D4 03        	pei	<R0+2
 33423 08:8BF2: D4 01        	pei	<R0
 33424 08:8BF4: A0 02 00     	ldy	#$2
 33425 08:8BF7: B7 0A        	lda	[<L1391+pb_0],Y
 33426 08:8BF9: 48           	pha
 33427 08:8BFA: A7 0A        	lda	[<L1391+pb_0]
 33428 08:8BFC: 48           	pha
 33429 08:8BFD: 22 CF 4E 08  	jsl	~~f_write
 33430 08:8C01: AA           	tax
 33431 08:8C02: F0 03        	beq	L1395
 33432 08:8C04: 82 23 00     	brl	L10825
 33433                        L1395:
 33434 08:8C07: A0 04 00     	ldy	#$4
 33435 08:8C0A: B7 0A        	lda	[<L1391+pb_0],Y
 33436 08:8C0C: C5 05        	cmp	<L1392+nw_1
 33437 08:8C0E: F0 03        	beq	L1396
 33438 08:8C10: 82 17 00     	brl	L10825
 33439                        L1396:
 33440                        	.line	7540
 33441 08:8C13: A0 06 00     	ldy	#$6
 33442 08:8C16: B7 0A        	lda	[<L1391+pb_0],Y
 33443                        L1397:
 33444 08:8C18: A8           	tay
 33445 08:8C19: A5 08        	lda	<L1391+2
 33446 08:8C1B: 85 0C        	sta	<L1391+2+4
  Sat Jul 10 2021  1:15                                                Page 633


 33447 08:8C1D: A5 07        	lda	<L1391+1
 33448 08:8C1F: 85 0B        	sta	<L1391+1+4
 33449 08:8C21: 2B           	pld
 33450 08:8C22: 3B           	tsc
 33451 08:8C23: 18           	clc
 33452 08:8C24: 69 0A 00     	adc	#L1391+4
 33453 08:8C27: 1B           	tcs
 33454 08:8C28: 98           	tya
 33455 08:8C29: 6B           	rtl
 33456                        ;	return EOF;
 33457                        L10825:
 33458                        	.line	7541
 33459 08:8C2A: A9 FF FF     	lda	#$ffff
 33460 08:8C2D: 82 E8 FF     	brl	L1397
 33461                        ;}
 33462                        	.line	7542
 33463                        	.endblock	7542
 33464             00000006   L1391	equ	6
 33465             00000005   L1392	equ	5
 33466 08:8C30:              	ends
 33467                        	efunc
 33468                        	.endfunc	7542,5,6
 33469                        	.line	7542
 33470                        ;
 33471                        ;/* Initialize write buffer */
 33472                        ;
 33473                        ;static void putc_init(putbuff* pb, FIL* fp)
 33474                        ;{
 33475                        	.line	7546
 33476                        	.line	7547
 33477                        	FFDOS
 33478                        	func
 33479                        	.function	7547
 33480                        ~~putc_init:
 33481                        	longa	on
 33482                        	longi	on
 33483 08:8C30: 3B           	tsc
 33484 08:8C31: 38           	sec
 33485 08:8C32: E9 00 00     	sbc	#L1398
 33486 08:8C35: 1B           	tcs
 33487 08:8C36: 0B           	phd
 33488 08:8C37: 5B           	tcd
 33489             00000004   pb_0	set	4
 33490             00000008   fp_0	set	8
 33491                        	.block	7547
 33492                        ;	mem_set(pb, 0, sizeof(putbuff));
 33493                        	.sym	pb,4,138,6,32,125
 33494                        	.sym	fp,8,138,6,32,74
 33495                        	.line	7548
 33496 08:8C38: F4 50 00     	pea	#<$50
 33497 08:8C3B: F4 00 00     	pea	#<$0
 33498 08:8C3E: D4 06        	pei	<L1398+pb_0+2
 33499 08:8C40: D4 04        	pei	<L1398+pb_0
 33500 08:8C42: 22 DF 01 08  	jsl	~~mem_set
 33501                        ;	pb->fp = fp;
 33502                        	.line	7549
 33503 08:8C46: A5 08        	lda	<L1398+fp_0
 33504 08:8C48: 87 04        	sta	[<L1398+pb_0]
  Sat Jul 10 2021  1:15                                                Page 634


 33505 08:8C4A: A5 0A        	lda	<L1398+fp_0+2
 33506 08:8C4C: A0 02 00     	ldy	#$2
 33507 08:8C4F: 97 04        	sta	[<L1398+pb_0],Y
 33508                        ;}
 33509                        	.line	7550
 33510                        L1401:
 33511 08:8C51: A5 02        	lda	<L1398+2
 33512 08:8C53: 85 0A        	sta	<L1398+2+8
 33513 08:8C55: A5 01        	lda	<L1398+1
 33514 08:8C57: 85 09        	sta	<L1398+1+8
 33515 08:8C59: 2B           	pld
 33516 08:8C5A: 3B           	tsc
 33517 08:8C5B: 18           	clc
 33518 08:8C5C: 69 08 00     	adc	#L1398+8
 33519 08:8C5F: 1B           	tcs
 33520 08:8C60: 6B           	rtl
 33521                        	.endblock	7550
 33522             00000000   L1398	equ	0
 33523             00000001   L1399	equ	1
 33524 08:8C61:              	ends
 33525                        	efunc
 33526                        	.endfunc	7550,1,0
 33527                        	.line	7550
 33528                        ;
 33529                        ;int f_putc(TCHAR c, /* A character to be output *
                    /
 33530                        ;FIL* fp /* Pointer to the file object */
 33531                        ;)
 33532                        ;{
 33533                        	.line	7552
 33534                        	.line	7555
 33535                        	FFDOS
 33536                        	xdef	~~f_putc
 33537                        	func
 33538                        	.function	7555
 33539                        ~~f_putc:
 33540                        	longa	on
 33541                        	longi	on
 33542 08:8C61: 3B           	tsc
 33543 08:8C62: 38           	sec
 33544 08:8C63: E9 50 00     	sbc	#L1402
 33545 08:8C66: 1B           	tcs
 33546 08:8C67: 0B           	phd
 33547 08:8C68: 5B           	tcd
 33548             00000004   c_0	set	4
 33549             00000006   fp_0	set	6
 33550                        	.block	7555
 33551                        ;	putbuff pb;
 33552                        ;
 33553                        ;	putc_init(&pb, fp);
 33554             00000000   pb_1	set	0
 33555                        	.sym	pb,0,10,1,640,125
 33556                        	.sym	c,4,14,6,8
 33557                        	.sym	fp,6,138,6,32,74
 33558                        	.line	7558
 33559 08:8C69: D4 58        	pei	<L1402+fp_0+2
 33560 08:8C6B: D4 56        	pei	<L1402+fp_0
 33561 08:8C6D: F4 00 00     	pea	#0
  Sat Jul 10 2021  1:15                                                Page 635


 33562 08:8C70: 18           	clc
 33563 08:8C71: 7B           	tdc
 33564 08:8C72: 69 01 00     	adc	#<L1403+pb_1
 33565 08:8C75: 48           	pha
 33566 08:8C76: 22 30 8C 08  	jsl	~~putc_init
 33567                        ;	putc_bfd(&pb, c); /* Put the character */
 33568                        	.line	7559
 33569 08:8C7A: D4 54        	pei	<L1402+c_0
 33570 08:8C7C: F4 00 00     	pea	#0
 33571 08:8C7F: 18           	clc
 33572 08:8C80: 7B           	tdc
 33573 08:8C81: 69 01 00     	adc	#<L1403+pb_1
 33574 08:8C84: 48           	pha
 33575 08:8C85: 22 9E 88 08  	jsl	~~putc_bfd
 33576                        ;	return putc_flush(&pb);
 33577                        	.line	7560
 33578 08:8C89: F4 00 00     	pea	#0
 33579 08:8C8C: 18           	clc
 33580 08:8C8D: 7B           	tdc
 33581 08:8C8E: 69 01 00     	adc	#<L1403+pb_1
 33582 08:8C91: 48           	pha
 33583 08:8C92: 22 C0 8B 08  	jsl	~~putc_flush
 33584                        L1405:
 33585 08:8C96: A8           	tay
 33586 08:8C97: A5 52        	lda	<L1402+2
 33587 08:8C99: 85 58        	sta	<L1402+2+6
 33588 08:8C9B: A5 51        	lda	<L1402+1
 33589 08:8C9D: 85 57        	sta	<L1402+1+6
 33590 08:8C9F: 2B           	pld
 33591 08:8CA0: 3B           	tsc
 33592 08:8CA1: 18           	clc
 33593 08:8CA2: 69 56 00     	adc	#L1402+6
 33594 08:8CA5: 1B           	tcs
 33595 08:8CA6: 98           	tya
 33596 08:8CA7: 6B           	rtl
 33597                        ;}
 33598                        	.line	7561
 33599                        	.endblock	7561
 33600             00000050   L1402	equ	80
 33601             00000001   L1403	equ	1
 33602 08:8CA8:              	ends
 33603                        	efunc
 33604                        	.endfunc	7561,1,80
 33605                        	.line	7561
 33606                        ;
 33607                        ;/*-----------------------------------------------
                    ------------------------*/
 33608                        ;/* Put a String to the File                      
                                            */
 33609                        ;/*-----------------------------------------------
                    ------------------------*/
 33610                        ;
 33611                        ;int f_puts(const TCHAR* str, /* Pointer to the st
                    ring to be output */
 33612                        ;FIL* fp /* Pointer to the file object */
 33613                        ;)
 33614                        ;{
 33615                        	.line	7567
  Sat Jul 10 2021  1:15                                                Page 636


 33616                        	.line	7570
 33617                        	FFDOS
 33618                        	xdef	~~f_puts
 33619                        	func
 33620                        	.function	7570
 33621                        ~~f_puts:
 33622                        	longa	on
 33623                        	longi	on
 33624 08:8CA8: 3B           	tsc
 33625 08:8CA9: 38           	sec
 33626 08:8CAA: E9 54 00     	sbc	#L1406
 33627 08:8CAD: 1B           	tcs
 33628 08:8CAE: 0B           	phd
 33629 08:8CAF: 5B           	tcd
 33630             00000004   str_0	set	4
 33631             00000008   fp_0	set	8
 33632                        	.block	7570
 33633                        ;	putbuff pb;
 33634                        ;
 33635                        ;	putc_init(&pb, fp);
 33636             00000000   pb_1	set	0
 33637                        	.sym	pb,0,10,1,640,125
 33638                        	.sym	str,4,142,6,32
 33639                        	.sym	fp,8,138,6,32,74
 33640                        	.line	7573
 33641 08:8CB0: D4 5E        	pei	<L1406+fp_0+2
 33642 08:8CB2: D4 5C        	pei	<L1406+fp_0
 33643 08:8CB4: F4 00 00     	pea	#0
 33644 08:8CB7: 18           	clc
 33645 08:8CB8: 7B           	tdc
 33646 08:8CB9: 69 05 00     	adc	#<L1407+pb_1
 33647 08:8CBC: 48           	pha
 33648 08:8CBD: 22 30 8C 08  	jsl	~~putc_init
 33649                        ;	while (*str)
 33650                        	.line	7574
 33651                        L10826:
 33652 08:8CC1: A7 58        	lda	[<L1406+str_0]
 33653 08:8CC3: 29 FF 00     	and	#$ff
 33654 08:8CC6: D0 03        	bne	L1409
 33655 08:8CC8: 82 21 00     	brl	L10827
 33656                        L1409:
 33657                        ;		putc_bfd(&pb, *str++); /* Put the string
                     */
 33658                        	.line	7575
 33659 08:8CCB: A5 58        	lda	<L1406+str_0
 33660 08:8CCD: 85 01        	sta	<R0
 33661 08:8CCF: A5 5A        	lda	<L1406+str_0+2
 33662 08:8CD1: 85 03        	sta	<R0+2
 33663 08:8CD3: E6 58        	inc	<L1406+str_0
 33664 08:8CD5: D0 02        	bne	L1410
 33665 08:8CD7: E6 5A        	inc	<L1406+str_0+2
 33666                        L1410:
 33667 08:8CD9: A7 01        	lda	[<R0]
 33668 08:8CDB: 48           	pha
 33669 08:8CDC: F4 00 00     	pea	#0
 33670 08:8CDF: 18           	clc
 33671 08:8CE0: 7B           	tdc
 33672 08:8CE1: 69 05 00     	adc	#<L1407+pb_1
  Sat Jul 10 2021  1:15                                                Page 637


 33673 08:8CE4: 48           	pha
 33674 08:8CE5: 22 9E 88 08  	jsl	~~putc_bfd
 33675 08:8CE9: 82 D5 FF     	brl	L10826
 33676                        L10827:
 33677                        ;	return putc_flush(&pb);
 33678                        	.line	7576
 33679 08:8CEC: F4 00 00     	pea	#0
 33680 08:8CEF: 18           	clc
 33681 08:8CF0: 7B           	tdc
 33682 08:8CF1: 69 05 00     	adc	#<L1407+pb_1
 33683 08:8CF4: 48           	pha
 33684 08:8CF5: 22 C0 8B 08  	jsl	~~putc_flush
 33685                        L1411:
 33686 08:8CF9: A8           	tay
 33687 08:8CFA: A5 56        	lda	<L1406+2
 33688 08:8CFC: 85 5E        	sta	<L1406+2+8
 33689 08:8CFE: A5 55        	lda	<L1406+1
 33690 08:8D00: 85 5D        	sta	<L1406+1+8
 33691 08:8D02: 2B           	pld
 33692 08:8D03: 3B           	tsc
 33693 08:8D04: 18           	clc
 33694 08:8D05: 69 5C 00     	adc	#L1406+8
 33695 08:8D08: 1B           	tcs
 33696 08:8D09: 98           	tya
 33697 08:8D0A: 6B           	rtl
 33698                        ;}
 33699                        	.line	7577
 33700                        	.endblock	7577
 33701             00000054   L1406	equ	84
 33702             00000005   L1407	equ	5
 33703 08:8D0B:              	ends
 33704                        	efunc
 33705                        	.endfunc	7577,5,84
 33706                        	.line	7577
 33707                        ;
 33708                        ;/*-----------------------------------------------
                    ------------------------*/
 33709                        ;/* Put a Formatted String to the File            
                                            */
 33710                        ;/*-----------------------------------------------
                    ------------------------*/
 33711                        ;
 33712                        ;int f_printf(FIL* fp, /* Pointer to the file obje
                    ct */
 33713                        ;const TCHAR* fmt, /* Pointer to the format string
                     */
 33714                        ;... /* Optional arguments... */
 33715                        ;)
 33716                        ;{
 33717                        	.line	7583
 33718                        	.line	7587
 33719                        	FFDOS
 33720                        	xdef	~~f_printf
 33721                        	func
 33722                        	.function	7587
 33723                        ~~f_printf:
 33724                        	longa	on
 33725                        	longi	on
  Sat Jul 10 2021  1:15                                                Page 638


 33726 08:8D0B: 3B           	tsc
 33727 08:8D0C: 38           	sec
 33728 08:8D0D: E9 92 00     	sbc	#L1412
 33729 08:8D10: 1B           	tcs
 33730 08:8D11: 0B           	phd
 33731 08:8D12: 5B           	tcd
 33732             00000006   fp_0	set	6
 33733             0000000A   fmt_0	set	10
 33734                        	.block	7587
 33735                        ;	va_list arp;
 33736                        ;	putbuff pb;
 33737                        ;	BYTE f, r;
 33738                        ;	UINT i, j, w;
 33739                        ;	DWORD v;
 33740                        ;	TCHAR c, d, str[32], *p;
 33741                        ;
 33742                        ;	putc_init(&pb, fp);
 33743             00000000   arp_1	set	0
 33744             00000004   pb_1	set	4
 33745             00000054   f_1	set	84
 33746             00000055   r_1	set	85
 33747             00000056   i_1	set	86
 33748             00000058   j_1	set	88
 33749             0000005A   w_1	set	90
 33750             0000005C   v_1	set	92
 33751             00000060   c_1	set	96
 33752             00000061   d_1	set	97
 33753             00000062   str_1	set	98
 33754             00000082   p_1	set	130
 33755                        	.sym	arp,0,142,1,32
 33756                        	.sym	pb,4,10,1,640,125
 33757                        	.sym	f,84,14,1,8
 33758                        	.sym	r,85,14,1,8
 33759                        	.sym	i,86,16,1,16
 33760                        	.sym	j,88,16,1,16
 33761                        	.sym	w,90,16,1,16
 33762                        	.sym	v,92,18,1,32
 33763                        	.sym	c,96,14,1,8
 33764                        	.sym	d,97,14,1,8
 33765                        	.sym	str,98,110,1,0,32
 33766                        	.sym	p,130,142,1,32
 33767                        	.sym	fp,6,138,6,32,74
 33768                        	.sym	fmt,10,142,6,32
 33769                        	.line	7595
 33770 08:8D13: D4 9A        	pei	<L1412+fp_0+2
 33771 08:8D15: D4 98        	pei	<L1412+fp_0
 33772 08:8D17: F4 00 00     	pea	#0
 33773 08:8D1A: 18           	clc
 33774 08:8D1B: 7B           	tdc
 33775 08:8D1C: 69 11 00     	adc	#<L1413+pb_1
 33776 08:8D1F: 48           	pha
 33777 08:8D20: 22 30 8C 08  	jsl	~~putc_init
 33778                        ;
 33779                        ;	va_start(arp, fmt);
 33780                        	.line	7597
 33781 08:8D24: 18           	clc
 33782 08:8D25: 7B           	tdc
 33783 08:8D26: 69 A0 00     	adc	#<L1412+fmt_0+4
  Sat Jul 10 2021  1:15                                                Page 639


 33784 08:8D29: 85 0D        	sta	<L1413+arp_1
 33785 08:8D2B: A9 00 00     	lda	#$0
 33786 08:8D2E: 85 0F        	sta	<L1413+arp_1+2
 33787                        ;
 33788                        ;	for (;;)
 33789                        	.line	7599
 33790                        L10830:
 33791                        ;	{
 33792                        	.line	7600
 33793                        ;		c = *fmt++;
 33794                        	.line	7601
 33795 08:8D30: E2 20        	sep	#$20
 33796                        	longa	off
 33797 08:8D32: A7 9C        	lda	[<L1412+fmt_0]
 33798 08:8D34: 85 6D        	sta	<L1413+c_1
 33799 08:8D36: C2 20        	rep	#$20
 33800                        	longa	on
 33801 08:8D38: E6 9C        	inc	<L1412+fmt_0
 33802 08:8D3A: D0 02        	bne	L1415
 33803 08:8D3C: E6 9E        	inc	<L1412+fmt_0+2
 33804                        L1415:
 33805                        ;		if (c == 0)
 33806                        	.line	7602
 33807                        ;			break; /* End of string */
 33808 08:8D3E: A5 6D        	lda	<L1413+c_1
 33809 08:8D40: 29 FF 00     	and	#$ff
 33810 08:8D43: D0 03        	bne	L1416
 33811 08:8D45: 82 E6 04     	brl	L10829
 33812                        L1416:
 33813                        ;		if (c != '%')
 33814                        	.line	7604
 33815                        ;		{ /* Non escape character */
 33816 08:8D48: E2 20        	sep	#$20
 33817                        	longa	off
 33818 08:8D4A: A5 6D        	lda	<L1413+c_1
 33819 08:8D4C: C9 25        	cmp	#<$25
 33820 08:8D4E: C2 20        	rep	#$20
 33821                        	longa	on
 33822 08:8D50: D0 03        	bne	L1417
 33823 08:8D52: 82 12 00     	brl	L10831
 33824                        L1417:
 33825                        	.line	7605
 33826                        ;			putc_bfd(&pb, c);
 33827                        	.line	7606
 33828 08:8D55: D4 6D        	pei	<L1413+c_1
 33829 08:8D57: F4 00 00     	pea	#0
 33830 08:8D5A: 18           	clc
 33831 08:8D5B: 7B           	tdc
 33832 08:8D5C: 69 11 00     	adc	#<L1413+pb_1
 33833 08:8D5F: 48           	pha
 33834 08:8D60: 22 9E 88 08  	jsl	~~putc_bfd
 33835                        ;			continue;
 33836                        	.line	7607
 33837 08:8D64: 82 C4 04     	brl	L10828
 33838                        ;		}
 33839                        	.line	7608
 33840                        ;		w = f = 0;
 33841                        L10831:
  Sat Jul 10 2021  1:15                                                Page 640


 33842                        	.line	7609
 33843 08:8D67: E2 20        	sep	#$20
 33844                        	longa	off
 33845 08:8D69: 64 61        	stz	<L1413+f_1
 33846 08:8D6B: C2 20        	rep	#$20
 33847                        	longa	on
 33848 08:8D6D: A9 00 00     	lda	#$0
 33849 08:8D70: 29 FF 00     	and	#$ff
 33850 08:8D73: 85 67        	sta	<L1413+w_1
 33851                        ;		c = *fmt++;
 33852                        	.line	7610
 33853 08:8D75: E2 20        	sep	#$20
 33854                        	longa	off
 33855 08:8D77: A7 9C        	lda	[<L1412+fmt_0]
 33856 08:8D79: 85 6D        	sta	<L1413+c_1
 33857 08:8D7B: C2 20        	rep	#$20
 33858                        	longa	on
 33859 08:8D7D: E6 9C        	inc	<L1412+fmt_0
 33860 08:8D7F: D0 02        	bne	L1418
 33861 08:8D81: E6 9E        	inc	<L1412+fmt_0+2
 33862                        L1418:
 33863                        ;		if (c == '0')
 33864                        	.line	7611
 33865                        ;		{ /* Flag: '0' padding */
 33866 08:8D83: E2 20        	sep	#$20
 33867                        	longa	off
 33868 08:8D85: A5 6D        	lda	<L1413+c_1
 33869 08:8D87: C9 30        	cmp	#<$30
 33870 08:8D89: C2 20        	rep	#$20
 33871                        	longa	on
 33872 08:8D8B: F0 03        	beq	L1419
 33873 08:8D8D: 82 19 00     	brl	L10832
 33874                        L1419:
 33875                        	.line	7612
 33876                        ;			f = 1;
 33877                        	.line	7613
 33878 08:8D90: E2 20        	sep	#$20
 33879                        	longa	off
 33880 08:8D92: A9 01        	lda	#$1
 33881 08:8D94: 85 61        	sta	<L1413+f_1
 33882 08:8D96: C2 20        	rep	#$20
 33883                        	longa	on
 33884                        ;			c = *fmt++;
 33885                        	.line	7614
 33886 08:8D98: E2 20        	sep	#$20
 33887                        	longa	off
 33888 08:8D9A: A7 9C        	lda	[<L1412+fmt_0]
 33889 08:8D9C: 85 6D        	sta	<L1413+c_1
 33890 08:8D9E: C2 20        	rep	#$20
 33891                        	longa	on
 33892 08:8DA0: E6 9C        	inc	<L1412+fmt_0
 33893 08:8DA2: D0 02        	bne	L1420
 33894 08:8DA4: E6 9E        	inc	<L1412+fmt_0+2
 33895                        L1420:
 33896                        ;		}
 33897                        	.line	7615
 33898                        ;		else
 33899 08:8DA6: 82 23 00     	brl	L10833
  Sat Jul 10 2021  1:15                                                Page 641


 33900                        L10832:
 33901                        ;		{
 33902                        	.line	7617
 33903                        ;			if (c == '-')
 33904                        	.line	7618
 33905                        ;			{ /* Flag: left justified */
 33906 08:8DA9: E2 20        	sep	#$20
 33907                        	longa	off
 33908 08:8DAB: A5 6D        	lda	<L1413+c_1
 33909 08:8DAD: C9 2D        	cmp	#<$2d
 33910 08:8DAF: C2 20        	rep	#$20
 33911                        	longa	on
 33912 08:8DB1: F0 03        	beq	L1421
 33913 08:8DB3: 82 16 00     	brl	L10834
 33914                        L1421:
 33915                        	.line	7619
 33916                        ;				f = 2;
 33917                        	.line	7620
 33918 08:8DB6: E2 20        	sep	#$20
 33919                        	longa	off
 33920 08:8DB8: A9 02        	lda	#$2
 33921 08:8DBA: 85 61        	sta	<L1413+f_1
 33922 08:8DBC: C2 20        	rep	#$20
 33923                        	longa	on
 33924                        ;				c = *fmt++;
 33925                        	.line	7621
 33926 08:8DBE: E2 20        	sep	#$20
 33927                        	longa	off
 33928 08:8DC0: A7 9C        	lda	[<L1412+fmt_0]
 33929 08:8DC2: 85 6D        	sta	<L1413+c_1
 33930 08:8DC4: C2 20        	rep	#$20
 33931                        	longa	on
 33932 08:8DC6: E6 9C        	inc	<L1412+fmt_0
 33933 08:8DC8: D0 02        	bne	L1422
 33934 08:8DCA: E6 9E        	inc	<L1412+fmt_0+2
 33935                        L1422:
 33936                        ;			}
 33937                        	.line	7622
 33938                        ;		}
 33939                        L10834:
 33940                        	.line	7623
 33941                        L10833:
 33942                        ;		if (c == '*')
 33943                        	.line	7624
 33944                        ;		{ /* Minimum width by argument */
 33945 08:8DCC: E2 20        	sep	#$20
 33946                        	longa	off
 33947 08:8DCE: A5 6D        	lda	<L1413+c_1
 33948 08:8DD0: C9 2A        	cmp	#<$2a
 33949 08:8DD2: C2 20        	rep	#$20
 33950                        	longa	on
 33951 08:8DD4: F0 03        	beq	L1423
 33952 08:8DD6: 82 30 00     	brl	L10835
 33953                        L1423:
 33954                        	.line	7625
 33955                        ;			w = va_arg(arp, int);
 33956                        	.line	7626
 33957 08:8DD9: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 642


 33958 08:8DDA: A9 02 00     	lda	#$2
 33959 08:8DDD: 65 0D        	adc	<L1413+arp_1
 33960 08:8DDF: 85 0D        	sta	<L1413+arp_1
 33961 08:8DE1: 90 02        	bcc	L1424
 33962 08:8DE3: E6 0F        	inc	<L1413+arp_1+2
 33963                        L1424:
 33964 08:8DE5: 18           	clc
 33965 08:8DE6: A9 FE FF     	lda	#$fffe
 33966 08:8DE9: 65 0D        	adc	<L1413+arp_1
 33967 08:8DEB: 85 01        	sta	<R0
 33968 08:8DED: A9 FF FF     	lda	#$ffff
 33969 08:8DF0: 65 0F        	adc	<L1413+arp_1+2
 33970 08:8DF2: 85 03        	sta	<R0+2
 33971 08:8DF4: A7 01        	lda	[<R0]
 33972 08:8DF6: 85 67        	sta	<L1413+w_1
 33973                        ;			c = *fmt++;
 33974                        	.line	7627
 33975 08:8DF8: E2 20        	sep	#$20
 33976                        	longa	off
 33977 08:8DFA: A7 9C        	lda	[<L1412+fmt_0]
 33978 08:8DFC: 85 6D        	sta	<L1413+c_1
 33979 08:8DFE: C2 20        	rep	#$20
 33980                        	longa	on
 33981 08:8E00: E6 9C        	inc	<L1412+fmt_0
 33982 08:8E02: D0 02        	bne	L1425
 33983 08:8E04: E6 9E        	inc	<L1412+fmt_0+2
 33984                        L1425:
 33985                        ;		}
 33986                        	.line	7628
 33987                        ;		else
 33988 08:8E06: 82 4A 00     	brl	L10836
 33989                        L10835:
 33990                        ;		{
 33991                        	.line	7630
 33992                        ;			while (IsDigit(c))
 33993                        	.line	7631
 33994                        L10837:
 33995 08:8E09: E2 20        	sep	#$20
 33996                        	longa	off
 33997 08:8E0B: A5 6D        	lda	<L1413+c_1
 33998 08:8E0D: C9 30        	cmp	#<$30
 33999 08:8E0F: C2 20        	rep	#$20
 34000                        	longa	on
 34001 08:8E11: B0 03        	bcs	L1426
 34002 08:8E13: 82 3D 00     	brl	L10838
 34003                        L1426:
 34004 08:8E16: E2 20        	sep	#$20
 34005                        	longa	off
 34006 08:8E18: A9 39        	lda	#$39
 34007 08:8E1A: C5 6D        	cmp	<L1413+c_1
 34008 08:8E1C: C2 20        	rep	#$20
 34009                        	longa	on
 34010 08:8E1E: B0 03        	bcs	L1427
 34011 08:8E20: 82 30 00     	brl	L10838
 34012                        L1427:
 34013                        ;			{ /* Minimum width */
 34014                        	.line	7632
 34015                        ;				w = w * 10 + c - '0';
  Sat Jul 10 2021  1:15                                                Page 643


 34016                        	.line	7633
 34017 08:8E23: A5 6D        	lda	<L1413+c_1
 34018 08:8E25: 29 FF 00     	and	#$ff
 34019 08:8E28: 85 01        	sta	<R0
 34020 08:8E2A: A5 67        	lda	<L1413+w_1
 34021 08:8E2C: 0A           	asl	A
 34022 08:8E2D: 0A           	asl	A
 34023 08:8E2E: 65 67        	adc	<L1413+w_1
 34024 08:8E30: 0A           	asl	A
 34025 08:8E31: 85 05        	sta	<R1
 34026 08:8E33: 18           	clc
 34027 08:8E34: A5 05        	lda	<R1
 34028 08:8E36: 65 01        	adc	<R0
 34029 08:8E38: 85 09        	sta	<R2
 34030 08:8E3A: 18           	clc
 34031 08:8E3B: A9 D0 FF     	lda	#$ffd0
 34032 08:8E3E: 65 09        	adc	<R2
 34033 08:8E40: 85 67        	sta	<L1413+w_1
 34034                        ;				c = *fmt++;
 34035                        	.line	7634
 34036 08:8E42: E2 20        	sep	#$20
 34037                        	longa	off
 34038 08:8E44: A7 9C        	lda	[<L1412+fmt_0]
 34039 08:8E46: 85 6D        	sta	<L1413+c_1
 34040 08:8E48: C2 20        	rep	#$20
 34041                        	longa	on
 34042 08:8E4A: E6 9C        	inc	<L1412+fmt_0
 34043 08:8E4C: D0 02        	bne	L1428
 34044 08:8E4E: E6 9E        	inc	<L1412+fmt_0+2
 34045                        L1428:
 34046                        ;			}
 34047                        	.line	7635
 34048 08:8E50: 82 B6 FF     	brl	L10837
 34049                        L10838:
 34050                        ;		}
 34051                        	.line	7636
 34052                        L10836:
 34053                        ;		if (c == 'l' || c == 'L')
 34054                        	.line	7637
 34055                        ;		{ /* Type prefix: Size is long int */
 34056 08:8E53: E2 20        	sep	#$20
 34057                        	longa	off
 34058 08:8E55: A5 6D        	lda	<L1413+c_1
 34059 08:8E57: C9 6C        	cmp	#<$6c
 34060 08:8E59: C2 20        	rep	#$20
 34061                        	longa	on
 34062 08:8E5B: D0 03        	bne	L1430
 34063 08:8E5D: 82 0D 00     	brl	L1429
 34064                        L1430:
 34065 08:8E60: E2 20        	sep	#$20
 34066                        	longa	off
 34067 08:8E62: A5 6D        	lda	<L1413+c_1
 34068 08:8E64: C9 4C        	cmp	#<$4c
 34069 08:8E66: C2 20        	rep	#$20
 34070                        	longa	on
 34071 08:8E68: F0 03        	beq	L1431
 34072 08:8E6A: 82 16 00     	brl	L10839
 34073                        L1431:
  Sat Jul 10 2021  1:15                                                Page 644


 34074                        L1429:
 34075                        	.line	7638
 34076                        ;			f |= 4;
 34077                        	.line	7639
 34078 08:8E6D: E2 20        	sep	#$20
 34079                        	longa	off
 34080 08:8E6F: A9 04        	lda	#$4
 34081 08:8E71: 04 61        	tsb	<L1413+f_1
 34082 08:8E73: C2 20        	rep	#$20
 34083                        	longa	on
 34084                        ;			c = *fmt++;
 34085                        	.line	7640
 34086 08:8E75: E2 20        	sep	#$20
 34087                        	longa	off
 34088 08:8E77: A7 9C        	lda	[<L1412+fmt_0]
 34089 08:8E79: 85 6D        	sta	<L1413+c_1
 34090 08:8E7B: C2 20        	rep	#$20
 34091                        	longa	on
 34092 08:8E7D: E6 9C        	inc	<L1412+fmt_0
 34093 08:8E7F: D0 02        	bne	L1432
 34094 08:8E81: E6 9E        	inc	<L1412+fmt_0+2
 34095                        L1432:
 34096                        ;		}
 34097                        	.line	7641
 34098                        ;		if (c == 0)
 34099                        L10839:
 34100                        	.line	7642
 34101                        ;			break;
 34102 08:8E83: A5 6D        	lda	<L1413+c_1
 34103 08:8E85: 29 FF 00     	and	#$ff
 34104 08:8E88: D0 03        	bne	L1433
 34105 08:8E8A: 82 A1 03     	brl	L10829
 34106                        L1433:
 34107                        ;		d = c;
 34108                        	.line	7644
 34109 08:8E8D: E2 20        	sep	#$20
 34110                        	longa	off
 34111 08:8E8F: A5 6D        	lda	<L1413+c_1
 34112 08:8E91: 85 6E        	sta	<L1413+d_1
 34113 08:8E93: C2 20        	rep	#$20
 34114                        	longa	on
 34115                        ;		if (IsLower(d))
 34116                        	.line	7645
 34117                        ;			d -= 0x20;
 34118 08:8E95: E2 20        	sep	#$20
 34119                        	longa	off
 34120 08:8E97: A5 6E        	lda	<L1413+d_1
 34121 08:8E99: C9 61        	cmp	#<$61
 34122 08:8E9B: C2 20        	rep	#$20
 34123                        	longa	on
 34124 08:8E9D: B0 03        	bcs	L1434
 34125 08:8E9F: 82 24 00     	brl	L10840
 34126                        L1434:
 34127 08:8EA2: E2 20        	sep	#$20
 34128                        	longa	off
 34129 08:8EA4: A9 7A        	lda	#$7a
 34130 08:8EA6: C5 6E        	cmp	<L1413+d_1
 34131 08:8EA8: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 645


 34132                        	longa	on
 34133 08:8EAA: B0 03        	bcs	L1435
 34134 08:8EAC: 82 17 00     	brl	L10840
 34135                        L1435:
 34136                        	.line	7646
 34137 08:8EAF: A5 6E        	lda	<L1413+d_1
 34138 08:8EB1: 29 FF 00     	and	#$ff
 34139 08:8EB4: 85 01        	sta	<R0
 34140 08:8EB6: 18           	clc
 34141 08:8EB7: A9 E0 FF     	lda	#$ffe0
 34142 08:8EBA: 65 01        	adc	<R0
 34143 08:8EBC: 85 05        	sta	<R1
 34144 08:8EBE: E2 20        	sep	#$20
 34145                        	longa	off
 34146 08:8EC0: A5 05        	lda	<R1
 34147 08:8EC2: 85 6E        	sta	<L1413+d_1
 34148 08:8EC4: C2 20        	rep	#$20
 34149                        	longa	on
 34150                        ;		switch (d)
 34151                        L10840:
 34152                        	.line	7647
 34153 08:8EC6: A5 6E        	lda	<L1413+d_1
 34154 08:8EC8: 29 FF 00     	and	#$ff
 34155 08:8ECB: 82 24 01     	brl	L10841
 34156                        ;		{ /* Atgument type is... */
 34157                        	.line	7648
 34158                        ;		case 'S': /* String */
 34159                        	.line	7649
 34160                        L10843:
 34161                        ;			p = va_arg(arp, TCHAR*);
 34162                        	.line	7650
 34163 08:8ECE: 18           	clc
 34164 08:8ECF: A9 04 00     	lda	#$4
 34165 08:8ED2: 65 0D        	adc	<L1413+arp_1
 34166 08:8ED4: 85 0D        	sta	<L1413+arp_1
 34167 08:8ED6: 90 02        	bcc	L1436
 34168 08:8ED8: E6 0F        	inc	<L1413+arp_1+2
 34169                        L1436:
 34170 08:8EDA: 18           	clc
 34171 08:8EDB: A9 FC FF     	lda	#$fffc
 34172 08:8EDE: 65 0D        	adc	<L1413+arp_1
 34173 08:8EE0: 85 01        	sta	<R0
 34174 08:8EE2: A9 FF FF     	lda	#$ffff
 34175 08:8EE5: 65 0F        	adc	<L1413+arp_1+2
 34176 08:8EE7: 85 03        	sta	<R0+2
 34177 08:8EE9: A7 01        	lda	[<R0]
 34178 08:8EEB: 85 8F        	sta	<L1413+p_1
 34179 08:8EED: A0 02 00     	ldy	#$2
 34180 08:8EF0: B7 01        	lda	[<R0],Y
 34181 08:8EF2: 85 91        	sta	<L1413+p_1+2
 34182                        ;			for (j = 0; p[j]; j++)
 34183                        	.line	7651
 34184 08:8EF4: 64 65        	stz	<L1413+j_1
 34185 08:8EF6: 82 02 00     	brl	L10847
 34186                        L10846:
 34187                        ;				;
 34188                        	.line	7652
 34189                        L10844:
  Sat Jul 10 2021  1:15                                                Page 646


 34190 08:8EF9: E6 65        	inc	<L1413+j_1
 34191                        L10847:
 34192 08:8EFB: A4 65        	ldy	<L1413+j_1
 34193 08:8EFD: B7 8F        	lda	[<L1413+p_1],Y
 34194 08:8EFF: 29 FF 00     	and	#$ff
 34195 08:8F02: F0 03        	beq	L1437
 34196 08:8F04: 82 F2 FF     	brl	L10846
 34197                        L1437:
 34198                        L10845:
 34199                        ;			if (!(f & 2))
 34200                        	.line	7653
 34201                        ;			{ /* Right padded */
 34202 08:8F07: E2 20        	sep	#$20
 34203                        	longa	off
 34204 08:8F09: A5 61        	lda	<L1413+f_1
 34205 08:8F0B: 29 02        	and	#<$2
 34206 08:8F0D: C2 20        	rep	#$20
 34207                        	longa	on
 34208 08:8F0F: F0 03        	beq	L1438
 34209 08:8F11: 82 22 00     	brl	L10848
 34210                        L1438:
 34211                        	.line	7654
 34212                        ;				while (j++ < w)
 34213                        	.line	7655
 34214                        L10849:
 34215 08:8F14: A5 65        	lda	<L1413+j_1
 34216 08:8F16: 85 01        	sta	<R0
 34217 08:8F18: E6 65        	inc	<L1413+j_1
 34218 08:8F1A: A5 01        	lda	<R0
 34219 08:8F1C: C5 67        	cmp	<L1413+w_1
 34220 08:8F1E: 90 03        	bcc	L1439
 34221 08:8F20: 82 13 00     	brl	L10850
 34222                        L1439:
 34223                        ;					putc_bfd(&pb, ' 
                    ');
 34224                        	.line	7656
 34225 08:8F23: F4 20 00     	pea	#<$20
 34226 08:8F26: F4 00 00     	pea	#0
 34227 08:8F29: 18           	clc
 34228 08:8F2A: 7B           	tdc
 34229 08:8F2B: 69 11 00     	adc	#<L1413+pb_1
 34230 08:8F2E: 48           	pha
 34231 08:8F2F: 22 9E 88 08  	jsl	~~putc_bfd
 34232 08:8F33: 82 DE FF     	brl	L10849
 34233                        L10850:
 34234                        ;			}
 34235                        	.line	7657
 34236                        ;			while (*p)
 34237                        L10848:
 34238                        	.line	7658
 34239                        L10851:
 34240 08:8F36: A7 8F        	lda	[<L1413+p_1]
 34241 08:8F38: 29 FF 00     	and	#$ff
 34242 08:8F3B: D0 03        	bne	L1440
 34243 08:8F3D: 82 21 00     	brl	L10852
 34244                        L1440:
 34245                        ;				putc_bfd(&pb, *p++); /* 
                    String body */
  Sat Jul 10 2021  1:15                                                Page 647


 34246                        	.line	7659
 34247 08:8F40: A5 8F        	lda	<L1413+p_1
 34248 08:8F42: 85 01        	sta	<R0
 34249 08:8F44: A5 91        	lda	<L1413+p_1+2
 34250 08:8F46: 85 03        	sta	<R0+2
 34251 08:8F48: E6 8F        	inc	<L1413+p_1
 34252 08:8F4A: D0 02        	bne	L1441
 34253 08:8F4C: E6 91        	inc	<L1413+p_1+2
 34254                        L1441:
 34255 08:8F4E: A7 01        	lda	[<R0]
 34256 08:8F50: 48           	pha
 34257 08:8F51: F4 00 00     	pea	#0
 34258 08:8F54: 18           	clc
 34259 08:8F55: 7B           	tdc
 34260 08:8F56: 69 11 00     	adc	#<L1413+pb_1
 34261 08:8F59: 48           	pha
 34262 08:8F5A: 22 9E 88 08  	jsl	~~putc_bfd
 34263 08:8F5E: 82 D5 FF     	brl	L10851
 34264                        L10852:
 34265                        ;			while (j++ < w)
 34266                        	.line	7660
 34267                        L10853:
 34268 08:8F61: A5 65        	lda	<L1413+j_1
 34269 08:8F63: 85 01        	sta	<R0
 34270 08:8F65: E6 65        	inc	<L1413+j_1
 34271 08:8F67: A5 01        	lda	<R0
 34272 08:8F69: C5 67        	cmp	<L1413+w_1
 34273 08:8F6B: 90 03        	bcc	L1442
 34274 08:8F6D: 82 13 00     	brl	L10854
 34275                        L1442:
 34276                        ;				putc_bfd(&pb, ' '); /* L
                    eft padded */
 34277                        	.line	7661
 34278 08:8F70: F4 20 00     	pea	#<$20
 34279 08:8F73: F4 00 00     	pea	#0
 34280 08:8F76: 18           	clc
 34281 08:8F77: 7B           	tdc
 34282 08:8F78: 69 11 00     	adc	#<L1413+pb_1
 34283 08:8F7B: 48           	pha
 34284 08:8F7C: 22 9E 88 08  	jsl	~~putc_bfd
 34285 08:8F80: 82 DE FF     	brl	L10853
 34286                        L10854:
 34287                        ;			continue;
 34288                        	.line	7662
 34289 08:8F83: 82 A5 02     	brl	L10828
 34290                        ;
 34291                        ;		case 'C': /* Character */
 34292                        	.line	7664
 34293                        L10855:
 34294                        ;			putc_bfd(&pb, (TCHAR) va_arg(arp
                    , int));
 34295                        	.line	7665
 34296 08:8F86: 18           	clc
 34297 08:8F87: A9 02 00     	lda	#$2
 34298 08:8F8A: 65 0D        	adc	<L1413+arp_1
 34299 08:8F8C: 85 0D        	sta	<L1413+arp_1
 34300 08:8F8E: 90 02        	bcc	L1443
 34301 08:8F90: E6 0F        	inc	<L1413+arp_1+2
  Sat Jul 10 2021  1:15                                                Page 648


 34302                        L1443:
 34303 08:8F92: 18           	clc
 34304 08:8F93: A9 FE FF     	lda	#$fffe
 34305 08:8F96: 65 0D        	adc	<L1413+arp_1
 34306 08:8F98: 85 01        	sta	<R0
 34307 08:8F9A: A9 FF FF     	lda	#$ffff
 34308 08:8F9D: 65 0F        	adc	<L1413+arp_1+2
 34309 08:8F9F: 85 03        	sta	<R0+2
 34310 08:8FA1: A7 01        	lda	[<R0]
 34311 08:8FA3: 48           	pha
 34312 08:8FA4: F4 00 00     	pea	#0
 34313 08:8FA7: 18           	clc
 34314 08:8FA8: 7B           	tdc
 34315 08:8FA9: 69 11 00     	adc	#<L1413+pb_1
 34316 08:8FAC: 48           	pha
 34317 08:8FAD: 22 9E 88 08  	jsl	~~putc_bfd
 34318                        ;			continue;
 34319                        	.line	7666
 34320 08:8FB1: 82 77 02     	brl	L10828
 34321                        ;
 34322                        ;		case 'B': /* Unsigned binary */
 34323                        	.line	7668
 34324                        L10856:
 34325                        ;			r = 2;
 34326                        	.line	7669
 34327 08:8FB4: E2 20        	sep	#$20
 34328                        	longa	off
 34329 08:8FB6: A9 02        	lda	#$2
 34330 08:8FB8: 85 62        	sta	<L1413+r_1
 34331 08:8FBA: C2 20        	rep	#$20
 34332                        	longa	on
 34333                        ;			break;
 34334                        	.line	7670
 34335 08:8FBC: 82 57 00     	brl	L10842
 34336                        ;
 34337                        ;		case 'O': /* Unsigned octal */
 34338                        	.line	7672
 34339                        L10857:
 34340                        ;			r = 8;
 34341                        	.line	7673
 34342 08:8FBF: E2 20        	sep	#$20
 34343                        	longa	off
 34344 08:8FC1: A9 08        	lda	#$8
 34345 08:8FC3: 85 62        	sta	<L1413+r_1
 34346 08:8FC5: C2 20        	rep	#$20
 34347                        	longa	on
 34348                        ;			break;
 34349                        	.line	7674
 34350 08:8FC7: 82 4C 00     	brl	L10842
 34351                        ;
 34352                        ;		case 'D': /* Signed decimal */
 34353                        	.line	7676
 34354                        L10858:
 34355                        ;		case 'U': /* Unsigned decimal */
 34356                        	.line	7677
 34357                        L10859:
 34358                        ;			r = 10;
 34359                        	.line	7678
  Sat Jul 10 2021  1:15                                                Page 649


 34360 08:8FCA: E2 20        	sep	#$20
 34361                        	longa	off
 34362 08:8FCC: A9 0A        	lda	#$a
 34363 08:8FCE: 85 62        	sta	<L1413+r_1
 34364 08:8FD0: C2 20        	rep	#$20
 34365                        	longa	on
 34366                        ;			break;
 34367                        	.line	7679
 34368 08:8FD2: 82 41 00     	brl	L10842
 34369                        ;
 34370                        ;		case 'X': /* Unsigned hexdecimal */
 34371                        	.line	7681
 34372                        L10860:
 34373                        ;			r = 16;
 34374                        	.line	7682
 34375 08:8FD5: E2 20        	sep	#$20
 34376                        	longa	off
 34377 08:8FD7: A9 10        	lda	#$10
 34378 08:8FD9: 85 62        	sta	<L1413+r_1
 34379 08:8FDB: C2 20        	rep	#$20
 34380                        	longa	on
 34381                        ;			break;
 34382                        	.line	7683
 34383 08:8FDD: 82 36 00     	brl	L10842
 34384                        ;
 34385                        ;		default: /* Unknown type (pass-through) 
                    */
 34386                        	.line	7685
 34387                        L10861:
 34388                        ;			putc_bfd(&pb, c);
 34389                        	.line	7686
 34390 08:8FE0: D4 6D        	pei	<L1413+c_1
 34391 08:8FE2: F4 00 00     	pea	#0
 34392 08:8FE5: 18           	clc
 34393 08:8FE6: 7B           	tdc
 34394 08:8FE7: 69 11 00     	adc	#<L1413+pb_1
 34395 08:8FEA: 48           	pha
 34396 08:8FEB: 22 9E 88 08  	jsl	~~putc_bfd
 34397                        ;			continue;
 34398                        	.line	7687
 34399 08:8FEF: 82 39 02     	brl	L10828
 34400                        ;		}
 34401                        	.line	7688
 34402                        L10841:
 34403                        	xref	~~~swt
 34404 08:8FF2: 22 xx xx xx  	jsl	~~~swt
 34405 08:8FF6: 07 00        	dw	7
 34406 08:8FF8: 42 00        	dw	66
 34407 08:8FFA: B3 8F        	dw	L10856-1
 34408 08:8FFC: 43 00        	dw	67
 34409 08:8FFE: 85 8F        	dw	L10855-1
 34410 08:9000: 44 00        	dw	68
 34411 08:9002: C9 8F        	dw	L10858-1
 34412 08:9004: 4F 00        	dw	79
 34413 08:9006: BE 8F        	dw	L10857-1
 34414 08:9008: 53 00        	dw	83
 34415 08:900A: CD 8E        	dw	L10843-1
 34416 08:900C: 55 00        	dw	85
  Sat Jul 10 2021  1:15                                                Page 650


 34417 08:900E: C9 8F        	dw	L10859-1
 34418 08:9010: 58 00        	dw	88
 34419 08:9012: D4 8F        	dw	L10860-1
 34420 08:9014: DF 8F        	dw	L10861-1
 34421                        L10842:
 34422                        ;
 34423                        ;		/* Get an argument and put it in numeral
                     */
 34424                        ;		v = (f & 4) ?
 34425                        	.line	7691
 34426                        ;				(DWORD) va_arg(arp, long
                    ) :
 34427                        ;				((d == 'D') ?
 34428                        ;						(DWORD) 
                    (long) va_arg(arp, int) :
 34429                        ;						(DWORD) 
                    va_arg(arp, unsigned int));
 34430 08:9016: E2 20        	sep	#$20
 34431                        	longa	off
 34432 08:9018: A5 61        	lda	<L1413+f_1
 34433 08:901A: 29 04        	and	#<$4
 34434 08:901C: C2 20        	rep	#$20
 34435                        	longa	on
 34436 08:901E: D0 03        	bne	L1445
 34437 08:9020: 82 25 00     	brl	L1444
 34438                        L1445:
 34439 08:9023: 18           	clc
 34440 08:9024: A9 04 00     	lda	#$4
 34441 08:9027: 65 0D        	adc	<L1413+arp_1
 34442 08:9029: 85 0D        	sta	<L1413+arp_1
 34443 08:902B: 90 02        	bcc	L1446
 34444 08:902D: E6 0F        	inc	<L1413+arp_1+2
 34445                        L1446:
 34446 08:902F: 18           	clc
 34447 08:9030: A9 FC FF     	lda	#$fffc
 34448 08:9033: 65 0D        	adc	<L1413+arp_1
 34449 08:9035: 85 01        	sta	<R0
 34450 08:9037: A9 FF FF     	lda	#$ffff
 34451 08:903A: 65 0F        	adc	<L1413+arp_1+2
 34452 08:903C: 85 03        	sta	<R0+2
 34453 08:903E: A0 02 00     	ldy	#$2
 34454 08:9041: B7 01        	lda	[<R0],Y
 34455 08:9043: AA           	tax
 34456 08:9044: A7 01        	lda	[<R0]
 34457 08:9046: 80 67        	bra	L1447
 34458                        L1444:
 34459 08:9048: E2 20        	sep	#$20
 34460                        	longa	off
 34461 08:904A: A5 6E        	lda	<L1413+d_1
 34462 08:904C: C9 44        	cmp	#<$44
 34463 08:904E: C2 20        	rep	#$20
 34464                        	longa	on
 34465 08:9050: F0 03        	beq	L1449
 34466 08:9052: 82 2D 00     	brl	L1448
 34467                        L1449:
 34468 08:9055: 18           	clc
 34469 08:9056: A9 02 00     	lda	#$2
 34470 08:9059: 65 0D        	adc	<L1413+arp_1
  Sat Jul 10 2021  1:15                                                Page 651


 34471 08:905B: 85 0D        	sta	<L1413+arp_1
 34472 08:905D: 90 02        	bcc	L1450
 34473 08:905F: E6 0F        	inc	<L1413+arp_1+2
 34474                        L1450:
 34475 08:9061: 18           	clc
 34476 08:9062: A9 FE FF     	lda	#$fffe
 34477 08:9065: 65 0D        	adc	<L1413+arp_1
 34478 08:9067: 85 01        	sta	<R0
 34479 08:9069: A9 FF FF     	lda	#$ffff
 34480 08:906C: 65 0F        	adc	<L1413+arp_1+2
 34481 08:906E: 85 03        	sta	<R0+2
 34482 08:9070: A0 00 00     	ldy	#$0
 34483 08:9073: A7 01        	lda	[<R0]
 34484 08:9075: 10 01        	bpl	L1451
 34485 08:9077: 88           	dey
 34486                        L1451:
 34487 08:9078: 85 01        	sta	<R0
 34488 08:907A: 84 03        	sty	<R0+2
 34489 08:907C: A6 03        	ldx	<R0+2
 34490 08:907E: A5 01        	lda	<R0
 34491 08:9080: 80 25        	bra	L1452
 34492                        L1448:
 34493 08:9082: 18           	clc
 34494 08:9083: A9 02 00     	lda	#$2
 34495 08:9086: 65 0D        	adc	<L1413+arp_1
 34496 08:9088: 85 0D        	sta	<L1413+arp_1
 34497 08:908A: 90 02        	bcc	L1453
 34498 08:908C: E6 0F        	inc	<L1413+arp_1+2
 34499                        L1453:
 34500 08:908E: 18           	clc
 34501 08:908F: A9 FE FF     	lda	#$fffe
 34502 08:9092: 65 0D        	adc	<L1413+arp_1
 34503 08:9094: 85 01        	sta	<R0
 34504 08:9096: A9 FF FF     	lda	#$ffff
 34505 08:9099: 65 0F        	adc	<L1413+arp_1+2
 34506 08:909B: 85 03        	sta	<R0+2
 34507 08:909D: A7 01        	lda	[<R0]
 34508 08:909F: 85 01        	sta	<R0
 34509 08:90A1: 64 03        	stz	<R0+2
 34510 08:90A3: A6 03        	ldx	<R0+2
 34511 08:90A5: A5 01        	lda	<R0
 34512                        L1452:
 34513 08:90A7: 85 01        	sta	<R0
 34514 08:90A9: 86 03        	stx	<R0+2
 34515 08:90AB: A6 03        	ldx	<R0+2
 34516 08:90AD: A5 01        	lda	<R0
 34517                        L1447:
 34518 08:90AF: 85 01        	sta	<R0
 34519 08:90B1: 86 03        	stx	<R0+2
 34520 08:90B3: A5 01        	lda	<R0
 34521 08:90B5: 85 69        	sta	<L1413+v_1
 34522 08:90B7: A5 03        	lda	<R0+2
 34523 08:90B9: 85 6B        	sta	<L1413+v_1+2
 34524                        ;		if (d == 'D' && (v & 0x80000000))
 34525                        	.line	7696
 34526                        ;		{
 34527 08:90BB: E2 20        	sep	#$20
 34528                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 652


 34529 08:90BD: A5 6E        	lda	<L1413+d_1
 34530 08:90BF: C9 44        	cmp	#<$44
 34531 08:90C1: C2 20        	rep	#$20
 34532                        	longa	on
 34533 08:90C3: F0 03        	beq	L1454
 34534 08:90C5: 82 21 00     	brl	L10862
 34535                        L1454:
 34536 08:90C8: A5 6B        	lda	<L1413+v_1+2
 34537 08:90CA: 29 00 80     	and	#^$80000000
 34538 08:90CD: D0 03        	bne	L1455
 34539 08:90CF: 82 17 00     	brl	L10862
 34540                        L1455:
 34541                        	.line	7697
 34542                        ;			v = 0 - v;
 34543                        	.line	7698
 34544 08:90D2: 38           	sec
 34545 08:90D3: A9 00 00     	lda	#$0
 34546 08:90D6: E5 69        	sbc	<L1413+v_1
 34547 08:90D8: 85 69        	sta	<L1413+v_1
 34548 08:90DA: A9 00 00     	lda	#$0
 34549 08:90DD: E5 6B        	sbc	<L1413+v_1+2
 34550 08:90DF: 85 6B        	sta	<L1413+v_1+2
 34551                        ;			f |= 8;
 34552                        	.line	7699
 34553 08:90E1: E2 20        	sep	#$20
 34554                        	longa	off
 34555 08:90E3: A9 08        	lda	#$8
 34556 08:90E5: 04 61        	tsb	<L1413+f_1
 34557 08:90E7: C2 20        	rep	#$20
 34558                        	longa	on
 34559                        ;		}
 34560                        	.line	7700
 34561                        ;		i = 0;
 34562                        L10862:
 34563                        	.line	7701
 34564 08:90E9: 64 63        	stz	<L1413+i_1
 34565                        ;		do
 34566                        	.line	7702
 34567                        L10865:
 34568                        ;		{
 34569                        	.line	7703
 34570                        ;			d = (TCHAR) (v % r);
 34571                        	.line	7704
 34572 08:90EB: A5 62        	lda	<L1413+r_1
 34573 08:90ED: 29 FF 00     	and	#$ff
 34574 08:90F0: 85 01        	sta	<R0
 34575 08:90F2: 64 03        	stz	<R0+2
 34576 08:90F4: D4 03        	pei	<R0+2
 34577 08:90F6: D4 01        	pei	<R0
 34578 08:90F8: D4 6B        	pei	<L1413+v_1+2
 34579 08:90FA: D4 69        	pei	<L1413+v_1
 34580                        	xref	~~~lumd
 34581 08:90FC: 22 xx xx xx  	jsl	~~~lumd
 34582 08:9100: 85 01        	sta	<R0
 34583 08:9102: 86 03        	stx	<R0+2
 34584 08:9104: E2 20        	sep	#$20
 34585                        	longa	off
 34586 08:9106: A5 01        	lda	<R0
  Sat Jul 10 2021  1:15                                                Page 653


 34587 08:9108: 85 6E        	sta	<L1413+d_1
 34588 08:910A: C2 20        	rep	#$20
 34589                        	longa	on
 34590                        ;			v /= r;
 34591                        	.line	7705
 34592 08:910C: A5 62        	lda	<L1413+r_1
 34593 08:910E: 29 FF 00     	and	#$ff
 34594 08:9111: 85 01        	sta	<R0
 34595 08:9113: 64 03        	stz	<R0+2
 34596 08:9115: D4 03        	pei	<R0+2
 34597 08:9117: D4 01        	pei	<R0
 34598 08:9119: D4 6B        	pei	<L1413+v_1+2
 34599 08:911B: D4 69        	pei	<L1413+v_1
 34600                        	xref	~~~ludv
 34601 08:911D: 22 xx xx xx  	jsl	~~~ludv
 34602 08:9121: 85 69        	sta	<L1413+v_1
 34603 08:9123: 86 6B        	stx	<L1413+v_1+2
 34604                        ;			if (d > 9)
 34605                        	.line	7706
 34606                        ;				d += (c == 'x') ? 0x27 :
                     0x07;
 34607 08:9125: E2 20        	sep	#$20
 34608                        	longa	off
 34609 08:9127: A9 09        	lda	#$9
 34610 08:9129: C5 6E        	cmp	<L1413+d_1
 34611 08:912B: C2 20        	rep	#$20
 34612                        	longa	on
 34613 08:912D: 90 03        	bcc	L1456
 34614 08:912F: 82 2D 00     	brl	L10866
 34615                        L1456:
 34616                        	.line	7707
 34617 08:9132: A5 6E        	lda	<L1413+d_1
 34618 08:9134: 29 FF 00     	and	#$ff
 34619 08:9137: 85 01        	sta	<R0
 34620 08:9139: E2 20        	sep	#$20
 34621                        	longa	off
 34622 08:913B: A5 6D        	lda	<L1413+c_1
 34623 08:913D: C9 78        	cmp	#<$78
 34624 08:913F: C2 20        	rep	#$20
 34625                        	longa	on
 34626 08:9141: F0 03        	beq	L1458
 34627 08:9143: 82 05 00     	brl	L1457
 34628                        L1458:
 34629 08:9146: A9 27 00     	lda	#$27
 34630 08:9149: 80 03        	bra	L1459
 34631                        L1457:
 34632 08:914B: A9 07 00     	lda	#$7
 34633                        L1459:
 34634 08:914E: 85 05        	sta	<R1
 34635 08:9150: 18           	clc
 34636 08:9151: A5 05        	lda	<R1
 34637 08:9153: 65 01        	adc	<R0
 34638 08:9155: 85 09        	sta	<R2
 34639 08:9157: E2 20        	sep	#$20
 34640                        	longa	off
 34641 08:9159: A5 09        	lda	<R2
 34642 08:915B: 85 6E        	sta	<L1413+d_1
 34643 08:915D: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 654


 34644                        	longa	on
 34645                        ;			str[i++] = d + '0';
 34646                        L10866:
 34647                        	.line	7708
 34648 08:915F: E2 20        	sep	#$20
 34649                        	longa	off
 34650 08:9161: 18           	clc
 34651 08:9162: A9 30        	lda	#$30
 34652 08:9164: 65 6E        	adc	<L1413+d_1
 34653 08:9166: C2 20        	rep	#$20
 34654                        	longa	on
 34655 08:9168: E2 20        	sep	#$20
 34656                        	longa	off
 34657 08:916A: A6 63        	ldx	<L1413+i_1
 34658 08:916C: 95 6F        	sta	<L1413+str_1,X
 34659 08:916E: C2 20        	rep	#$20
 34660                        	longa	on
 34661 08:9170: E6 63        	inc	<L1413+i_1
 34662                        ;		} while (v && i < sizeof str / sizeof *s
                    tr);
 34663                        	.line	7709
 34664                        L10863:
 34665 08:9172: A5 69        	lda	<L1413+v_1
 34666 08:9174: 05 6B        	ora	<L1413+v_1+2
 34667 08:9176: D0 03        	bne	L1461
 34668 08:9178: 82 0A 00     	brl	L1460
 34669                        L1461:
 34670 08:917B: A5 63        	lda	<L1413+i_1
 34671 08:917D: C9 20 00     	cmp	#<$20
 34672 08:9180: B0 03        	bcs	L1462
 34673 08:9182: 82 66 FF     	brl	L10865
 34674                        L1462:
 34675                        L1460:
 34676                        L10864:
 34677                        ;		if (f & 8)
 34678                        	.line	7710
 34679                        ;			str[i++] = '-';
 34680 08:9185: E2 20        	sep	#$20
 34681                        	longa	off
 34682 08:9187: A5 61        	lda	<L1413+f_1
 34683 08:9189: 29 08        	and	#<$8
 34684 08:918B: C2 20        	rep	#$20
 34685                        	longa	on
 34686 08:918D: D0 03        	bne	L1463
 34687 08:918F: 82 0C 00     	brl	L10867
 34688                        L1463:
 34689                        	.line	7711
 34690 08:9192: E2 20        	sep	#$20
 34691                        	longa	off
 34692 08:9194: A9 2D        	lda	#$2d
 34693 08:9196: A6 63        	ldx	<L1413+i_1
 34694 08:9198: 95 6F        	sta	<L1413+str_1,X
 34695 08:919A: C2 20        	rep	#$20
 34696                        	longa	on
 34697 08:919C: E6 63        	inc	<L1413+i_1
 34698                        ;		j = i;
 34699                        L10867:
 34700                        	.line	7712
  Sat Jul 10 2021  1:15                                                Page 655


 34701 08:919E: A5 63        	lda	<L1413+i_1
 34702 08:91A0: 85 65        	sta	<L1413+j_1
 34703                        ;		d = (f & 1) ? '0' : ' ';
 34704                        	.line	7713
 34705 08:91A2: E2 20        	sep	#$20
 34706                        	longa	off
 34707 08:91A4: A5 61        	lda	<L1413+f_1
 34708 08:91A6: 29 01        	and	#<$1
 34709 08:91A8: C2 20        	rep	#$20
 34710                        	longa	on
 34711 08:91AA: D0 03        	bne	L1465
 34712 08:91AC: 82 05 00     	brl	L1464
 34713                        L1465:
 34714 08:91AF: A9 30 00     	lda	#$30
 34715 08:91B2: 80 03        	bra	L1466
 34716                        L1464:
 34717 08:91B4: A9 20 00     	lda	#$20
 34718                        L1466:
 34719 08:91B7: 85 01        	sta	<R0
 34720 08:91B9: E2 20        	sep	#$20
 34721                        	longa	off
 34722 08:91BB: A5 01        	lda	<R0
 34723 08:91BD: 85 6E        	sta	<L1413+d_1
 34724 08:91BF: C2 20        	rep	#$20
 34725                        	longa	on
 34726                        ;		if (!(f & 2))
 34727                        	.line	7714
 34728                        ;		{
 34729 08:91C1: E2 20        	sep	#$20
 34730                        	longa	off
 34731 08:91C3: A5 61        	lda	<L1413+f_1
 34732 08:91C5: 29 02        	and	#<$2
 34733 08:91C7: C2 20        	rep	#$20
 34734                        	longa	on
 34735 08:91C9: F0 03        	beq	L1467
 34736 08:91CB: 82 21 00     	brl	L10868
 34737                        L1467:
 34738                        	.line	7715
 34739                        ;			while (j++ < w)
 34740                        	.line	7716
 34741                        L10869:
 34742 08:91CE: A5 65        	lda	<L1413+j_1
 34743 08:91D0: 85 01        	sta	<R0
 34744 08:91D2: E6 65        	inc	<L1413+j_1
 34745 08:91D4: A5 01        	lda	<R0
 34746 08:91D6: C5 67        	cmp	<L1413+w_1
 34747 08:91D8: 90 03        	bcc	L1468
 34748 08:91DA: 82 12 00     	brl	L10870
 34749                        L1468:
 34750                        ;				putc_bfd(&pb, d); /* Rig
                    ht pad */
 34751                        	.line	7717
 34752 08:91DD: D4 6E        	pei	<L1413+d_1
 34753 08:91DF: F4 00 00     	pea	#0
 34754 08:91E2: 18           	clc
 34755 08:91E3: 7B           	tdc
 34756 08:91E4: 69 11 00     	adc	#<L1413+pb_1
 34757 08:91E7: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 656


 34758 08:91E8: 22 9E 88 08  	jsl	~~putc_bfd
 34759 08:91EC: 82 DF FF     	brl	L10869
 34760                        L10870:
 34761                        ;		}
 34762                        	.line	7718
 34763                        ;		do
 34764                        L10868:
 34765                        	.line	7719
 34766                        L10873:
 34767                        ;		{
 34768                        	.line	7720
 34769                        ;			putc_bfd(&pb, str[--i]); /* Numb
                    er body */
 34770                        	.line	7721
 34771 08:91EF: C6 63        	dec	<L1413+i_1
 34772 08:91F1: A6 63        	ldx	<L1413+i_1
 34773 08:91F3: B5 6F        	lda	<L1413+str_1,X
 34774 08:91F5: 48           	pha
 34775 08:91F6: F4 00 00     	pea	#0
 34776 08:91F9: 18           	clc
 34777 08:91FA: 7B           	tdc
 34778 08:91FB: 69 11 00     	adc	#<L1413+pb_1
 34779 08:91FE: 48           	pha
 34780 08:91FF: 22 9E 88 08  	jsl	~~putc_bfd
 34781                        ;		} while (i);
 34782                        	.line	7722
 34783                        L10871:
 34784 08:9203: A5 63        	lda	<L1413+i_1
 34785 08:9205: F0 03        	beq	L1469
 34786 08:9207: 82 E5 FF     	brl	L10873
 34787                        L1469:
 34788                        L10872:
 34789                        ;		while (j++ < w)
 34790                        	.line	7723
 34791                        L10874:
 34792 08:920A: A5 65        	lda	<L1413+j_1
 34793 08:920C: 85 01        	sta	<R0
 34794 08:920E: E6 65        	inc	<L1413+j_1
 34795 08:9210: A5 01        	lda	<R0
 34796 08:9212: C5 67        	cmp	<L1413+w_1
 34797 08:9214: 90 03        	bcc	L1470
 34798 08:9216: 82 12 00     	brl	L10875
 34799                        L1470:
 34800                        ;			putc_bfd(&pb, d); /* Left pad */
 34801                        	.line	7724
 34802 08:9219: D4 6E        	pei	<L1413+d_1
 34803 08:921B: F4 00 00     	pea	#0
 34804 08:921E: 18           	clc
 34805 08:921F: 7B           	tdc
 34806 08:9220: 69 11 00     	adc	#<L1413+pb_1
 34807 08:9223: 48           	pha
 34808 08:9224: 22 9E 88 08  	jsl	~~putc_bfd
 34809 08:9228: 82 DF FF     	brl	L10874
 34810                        L10875:
 34811                        ;	}
 34812                        	.line	7725
 34813                        L10828:
 34814 08:922B: 82 02 FB     	brl	L10830
  Sat Jul 10 2021  1:15                                                Page 657


 34815                        L10829:
 34816                        ;
 34817                        ;	va_end(arp);
 34818                        	.line	7727
 34819                        ;
 34820                        ;	return putc_flush(&pb);
 34821                        	.line	7729
 34822 08:922E: F4 00 00     	pea	#0
 34823 08:9231: 18           	clc
 34824 08:9232: 7B           	tdc
 34825 08:9233: 69 11 00     	adc	#<L1413+pb_1
 34826 08:9236: 48           	pha
 34827 08:9237: 22 C0 8B 08  	jsl	~~putc_flush
 34828                        L1471:
 34829 08:923B: A8           	tay
 34830 08:923C: DA           	phx
 34831 08:923D: A6 96        	ldx	<L1412+4
 34832 08:923F: A5 94        	lda	<L1412+2
 34833 08:9241: 95 94        	sta	<L1412+2,X
 34834 08:9243: A5 93        	lda	<L1412+1
 34835 08:9245: 95 93        	sta	<L1412+1,X
 34836 08:9247: 8A           	txa
 34837 08:9248: FA           	plx
 34838 08:9249: 2B           	pld
 34839 08:924A: 48           	pha
 34840 08:924B: 3B           	tsc
 34841 08:924C: 18           	clc
 34842 08:924D: 69 94 00     	adc	#L1412+2
 34843 08:9250: 63 01        	adc	<1,s
 34844 08:9252: 1B           	tcs
 34845 08:9253: 98           	tya
 34846 08:9254: 6B           	rtl
 34847                        ;}
 34848                        	.line	7730
 34849                        	.endblock	7730
 34850             00000092   L1412	equ	146
 34851             0000000D   L1413	equ	13
 34852 08:9255:              	ends
 34853                        	efunc
 34854                        	.endfunc	7730,13,146
 34855                        	.line	7730
 34856                        ;
 34857                        ;#endif /* !FF_FS_READONLY */
 34858                        ;#endif /* FF_USE_STRFUNC */
 34859                        ;
 34860                        ;#if FF_CODE_PAGE == 0
 34861                        ;/*-----------------------------------------------
                    ------------------------*/
 34862                        ;/* Set Active Codepage for the Path Name         
                                            */
 34863                        ;/*-----------------------------------------------
                    ------------------------*/
 34864                        ;
 34865                        ;FRESULT f_setcp (
 34866                        ;		WORD cp /* Value to be set as active cod
                    e page */
 34867                        ;)
 34868                        ;{
  Sat Jul 10 2021  1:15                                                Page 658


 34869                        ;	static const WORD validcp[] =
 34870                        ;	{	437, 720, 737, 771, 775, 850, 852, 857, 
                    860, 861, 862, 863, 864, 865, 866, 869, 932, 936, 949, 950, 
                    0};
 34871                        ;	static const BYTE* const tables[] =
 34872                        ;	{	Ct437, Ct720, Ct737, Ct771, Ct775, Ct850
                    , Ct852, Ct857, Ct860, Ct861, Ct862, Ct863, Ct864, Ct865, Ct
                    866, Ct869, Dc932, Dc936, Dc949, Dc950, 0};
 34873                        ;	UINT i;
 34874                        ;
 34875                        ;	for (i = 0; validcp[i] != 0 && validcp[i] != cp;
                     i++); /* Find the code page */
 34876                        ;	if (validcp[i] != cp) return FR_INVALID_PARAMETE
                    R; /* Not found? */
 34877                        ;
 34878                        ;	CodePage = cp;
 34879                        ;	if (cp >= 900)
 34880                        ;	{ /* DBCS */
 34881                        ;		ExCvt = 0;
 34882                        ;		DbcTbl = tables[i];
 34883                        ;	}
 34884                        ;	else
 34885                        ;	{ /* SBCS */
 34886                        ;		ExCvt = tables[i];
 34887                        ;		DbcTbl = 0;
 34888                        ;	}
 34889                        ;	return FR_OK;
 34890                        ;}
 34891                        ;#endif	/* FF_CODE_PAGE == 0 */
 34892                        ;
 34893                        ;#if FF_USE_LFN >= 1				
                    		/* Code conversion (defined in unicode.c) */
 34894                        ;WCHAR ff_oem2uni (WCHAR oem, WORD cp)
 34895                        ;{
 34896                        	.line	7769
 34897                        	.line	7770
 34898                        	FFDOS
 34899                        	xdef	~~ff_oem2uni
 34900                        	func
 34901                        	.function	7770
 34902                        ~~ff_oem2uni:
 34903                        	longa	on
 34904                        	longi	on
 34905 08:9255: 3B           	tsc
 34906 08:9256: 38           	sec
 34907 08:9257: E9 00 00     	sbc	#L1472
 34908 08:925A: 1B           	tcs
 34909 08:925B: 0B           	phd
 34910 08:925C: 5B           	tcd
 34911             00000004   oem_0	set	4
 34912             00000006   cp_0	set	6
 34913                        	.block	7770
 34914                        ;	return oem;
 34915                        	.sym	oem,4,16,6,16
 34916                        	.sym	cp,6,5,6,16
 34917                        	.line	7771
 34918 08:925D: A5 04        	lda	<L1472+oem_0
 34919                        L1475:
  Sat Jul 10 2021  1:15                                                Page 659


 34920 08:925F: A8           	tay
 34921 08:9260: A5 02        	lda	<L1472+2
 34922 08:9262: 85 06        	sta	<L1472+2+4
 34923 08:9264: A5 01        	lda	<L1472+1
 34924 08:9266: 85 05        	sta	<L1472+1+4
 34925 08:9268: 2B           	pld
 34926 08:9269: 3B           	tsc
 34927 08:926A: 18           	clc
 34928 08:926B: 69 04 00     	adc	#L1472+4
 34929 08:926E: 1B           	tcs
 34930 08:926F: 98           	tya
 34931 08:9270: 6B           	rtl
 34932                        ;}
 34933                        	.line	7772
 34934                        	.endblock	7772
 34935             00000000   L1472	equ	0
 34936             00000001   L1473	equ	1
 34937 08:9271:              	ends
 34938                        	efunc
 34939                        	.endfunc	7772,1,0
 34940                        	.line	7772
 34941                        ;
 34942                        ;WCHAR ff_uni2oem (DWORD uni, WORD cp)
 34943                        ;{
 34944                        	.line	7774
 34945                        	.line	7775
 34946                        	FFDOS
 34947                        	xdef	~~ff_uni2oem
 34948                        	func
 34949                        	.function	7775
 34950                        ~~ff_uni2oem:
 34951                        	longa	on
 34952                        	longi	on
 34953 08:9271: 3B           	tsc
 34954 08:9272: 38           	sec
 34955 08:9273: E9 00 00     	sbc	#L1476
 34956 08:9276: 1B           	tcs
 34957 08:9277: 0B           	phd
 34958 08:9278: 5B           	tcd
 34959             00000004   uni_0	set	4
 34960             00000008   cp_0	set	8
 34961                        	.block	7775
 34962                        ;	return uni;
 34963                        	.sym	uni,4,18,6,32
 34964                        	.sym	cp,8,5,6,16
 34965                        	.line	7776
 34966 08:9279: A5 04        	lda	<L1476+uni_0
 34967                        L1479:
 34968 08:927B: A8           	tay
 34969 08:927C: A5 02        	lda	<L1476+2
 34970 08:927E: 85 08        	sta	<L1476+2+6
 34971 08:9280: A5 01        	lda	<L1476+1
 34972 08:9282: 85 07        	sta	<L1476+1+6
 34973 08:9284: 2B           	pld
 34974 08:9285: 3B           	tsc
 34975 08:9286: 18           	clc
 34976 08:9287: 69 06 00     	adc	#L1476+6
 34977 08:928A: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 660


 34978 08:928B: 98           	tya
 34979 08:928C: 6B           	rtl
 34980                        ;}
 34981                        	.line	7777
 34982                        	.endblock	7777
 34983             00000000   L1476	equ	0
 34984             00000001   L1477	equ	1
 34985 08:928D:              	ends
 34986                        	efunc
 34987                        	.endfunc	7777,1,0
 34988                        	.line	7777
 34989                        ;
 34990                        ;DWORD ff_wtoupper (DWORD uni)
 34991                        ;{
 34992                        	.line	7779
 34993                        	.line	7780
 34994                        	FFDOS
 34995                        	xdef	~~ff_wtoupper
 34996                        	func
 34997                        	.function	7780
 34998                        ~~ff_wtoupper:
 34999                        	longa	on
 35000                        	longi	on
 35001 08:928D: 3B           	tsc
 35002 08:928E: 38           	sec
 35003 08:928F: E9 00 00     	sbc	#L1480
 35004 08:9292: 1B           	tcs
 35005 08:9293: 0B           	phd
 35006 08:9294: 5B           	tcd
 35007             00000004   uni_0	set	4
 35008                        	.block	7780
 35009                        ;	return uni;
 35010                        	.sym	uni,4,18,6,32
 35011                        	.line	7781
 35012 08:9295: A6 06        	ldx	<L1480+uni_0+2
 35013 08:9297: A5 04        	lda	<L1480+uni_0
 35014                        L1483:
 35015 08:9299: A8           	tay
 35016 08:929A: A5 02        	lda	<L1480+2
 35017 08:929C: 85 06        	sta	<L1480+2+4
 35018 08:929E: A5 01        	lda	<L1480+1
 35019 08:92A0: 85 05        	sta	<L1480+1+4
 35020 08:92A2: 2B           	pld
 35021 08:92A3: 3B           	tsc
 35022 08:92A4: 18           	clc
 35023 08:92A5: 69 04 00     	adc	#L1480+4
 35024 08:92A8: 1B           	tcs
 35025 08:92A9: 98           	tya
 35026 08:92AA: 6B           	rtl
 35027                        ;}
 35028                        	.line	7782
 35029                        	.endblock	7782
 35030             00000000   L1480	equ	0
 35031             00000001   L1481	equ	1
 35032 08:92AB:              	ends
 35033                        	efunc
 35034                        	.endfunc	7782,1,0
 35035                        	.line	7782
  Sat Jul 10 2021  1:15                                                Page 661


 35036                        ;#endif
 35037                        ;
 35038                        ;#if FF_USE_LFN == 3				
                    		/* Dynamic memory allocation */
 35039                        ;void* ff_memalloc (UINT msize)
 35040                        ;{
 35041                        	.line	7786
 35042                        	.line	7787
 35043                        	FFDOS
 35044                        	xdef	~~ff_memalloc
 35045                        	func
 35046                        	.function	7787
 35047                        ~~ff_memalloc:
 35048                        	longa	on
 35049                        	longi	on
 35050 08:92AB: 3B           	tsc
 35051 08:92AC: 38           	sec
 35052 08:92AD: E9 04 00     	sbc	#L1484
 35053 08:92B0: 1B           	tcs
 35054 08:92B1: 0B           	phd
 35055 08:92B2: 5B           	tcd
 35056             00000004   msize_0	set	4
 35057                        	.block	7787
 35058                        ;	return k_mem_allocate_heap(msize);
 35059                        	.sym	msize,4,16,6,16
 35060                        	.line	7788
 35061 08:92B3: D4 08        	pei	<L1484+msize_0
 35062 08:92B5: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
 35063 08:92B9: 85 01        	sta	<R0
 35064 08:92BB: 86 03        	stx	<R0+2
 35065 08:92BD: A6 03        	ldx	<R0+2
 35066 08:92BF: A5 01        	lda	<R0
 35067                        L1487:
 35068 08:92C1: A8           	tay
 35069 08:92C2: A5 06        	lda	<L1484+2
 35070 08:92C4: 85 08        	sta	<L1484+2+2
 35071 08:92C6: A5 05        	lda	<L1484+1
 35072 08:92C8: 85 07        	sta	<L1484+1+2
 35073 08:92CA: 2B           	pld
 35074 08:92CB: 3B           	tsc
 35075 08:92CC: 18           	clc
 35076 08:92CD: 69 06 00     	adc	#L1484+2
 35077 08:92D0: 1B           	tcs
 35078 08:92D1: 98           	tya
 35079 08:92D2: 6B           	rtl
 35080                        ;}
 35081                        	.line	7789
 35082                        	.endblock	7789
 35083             00000004   L1484	equ	4
 35084             00000005   L1485	equ	5
 35085 08:92D3:              	ends
 35086                        	efunc
 35087                        	.endfunc	7789,5,4
 35088                        	.line	7789
 35089                        ;
 35090                        ;void ff_memfree (void* mblock)
 35091                        ;{
 35092                        	.line	7791
  Sat Jul 10 2021  1:15                                                Page 662


 35093                        	.line	7792
 35094                        	FFDOS
 35095                        	xdef	~~ff_memfree
 35096                        	func
 35097                        	.function	7792
 35098                        ~~ff_memfree:
 35099                        	longa	on
 35100                        	longi	on
 35101 08:92D3: 3B           	tsc
 35102 08:92D4: 38           	sec
 35103 08:92D5: E9 00 00     	sbc	#L1488
 35104 08:92D8: 1B           	tcs
 35105 08:92D9: 0B           	phd
 35106 08:92DA: 5B           	tcd
 35107             00000004   mblock_0	set	4
 35108                        	.block	7792
 35109                        ;	k_mem_deallocate_heap(mblock);
 35110                        	.sym	mblock,4,129,6,32
 35111                        	.line	7793
 35112 08:92DB: D4 06        	pei	<L1488+mblock_0+2
 35113 08:92DD: D4 04        	pei	<L1488+mblock_0
 35114 08:92DF: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
 35115                        ;}
 35116                        	.line	7794
 35117                        L1491:
 35118 08:92E3: A5 02        	lda	<L1488+2
 35119 08:92E5: 85 06        	sta	<L1488+2+4
 35120 08:92E7: A5 01        	lda	<L1488+1
 35121 08:92E9: 85 05        	sta	<L1488+1+4
 35122 08:92EB: 2B           	pld
 35123 08:92EC: 3B           	tsc
 35124 08:92ED: 18           	clc
 35125 08:92EE: 69 04 00     	adc	#L1488+4
 35126 08:92F1: 1B           	tcs
 35127 08:92F2: 6B           	rtl
 35128                        	.endblock	7794
 35129             00000000   L1488	equ	0
 35130             00000001   L1489	equ	1
 35131 08:92F3:              	ends
 35132                        	efunc
 35133                        	.endfunc	7794,1,0
 35134                        	.line	7794
 35135                        ;
 35136                        ;#endif
 35137                        ;
 35138                        ;
 35139                        	.line	7797
 35140                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",7791
 35141                        	xref	~~disk_ioctl
 35142                        	xref	~~disk_write
 35143                        	xref	~~disk_read
 35144                        	xref	~~disk_status
 35145                        	xref	~~disk_initialize
 35146                        	xref	~~k_debug_long
 35147                        	xref	~~k_debug_integer
 35148                        	xref	~~k_debug_string
 35149                        	xref	~~k_mem_deallocate_heap
  Sat Jul 10 2021  1:15                                                Page 663


 35150                        	xref	~~k_mem_allocate_heap
 35151                        	udata
 35152                        ~~Fsid
 35153 00:0000:              	ds	2
 35154 00:0002:              	ends
 35155                        	udata
 35156                        ~~FatFs
 35157 00:0002:              	ds	32
 35158 00:0022:              	ends
 35159                        	.sym	~~putc_init,~~putc_init,65,3,0
 35160                        	.sym	~~putc_flush,~~putc_flush,69,3,0
 35161                        	.sym	~~putc_bfd,~~putc_bfd,65,3,0
 35162                        	.sym	putbuff,0,10,14,640,125
 35163                        	.sym	~~create_partition,~~create_partition,69
                    ,3,0
 35164                        	.sym	~~validate,~~validate,69,3,0
 35165                        	.sym	~~mount_volume,~~mount_volume,69,3,0
 35166                        	.sym	~~find_volume,~~find_volume,80,3,0
 35167                        	.sym	~~check_fs,~~check_fs,80,3,0
 35168                        	.sym	~~get_ldnumber,~~get_ldnumber,69,3,0
 35169                        	.sym	~~follow_path,~~follow_path,69,3,0
 35170                        	.sym	~~create_name,~~create_name,69,3,0
 35171                        	.sym	~~pattern_matching,~~pattern_matching,69
                    ,3,0
 35172                        	.sym	~~get_achar,~~get_achar,82,3,0
 35173                        	.sym	~~get_fileinfo,~~get_fileinfo,65,3,0
 35174                        	.sym	~~dir_remove,~~dir_remove,69,3,0
 35175                        	.sym	~~dir_register,~~dir_register,69,3,0
 35176                        	.sym	~~dir_find,~~dir_find,69,3,0
 35177                        	.sym	~~dir_read,~~dir_read,69,3,0
 35178                        	.sym	~~sum_sfn,~~sum_sfn,78,3,0
 35179                        	.sym	~~gen_numname,~~gen_numname,65,3,0
 35180                        	.sym	~~put_lfn,~~put_lfn,65,3,0
 35181                        	.sym	~~pick_lfn,~~pick_lfn,69,3,0
 35182                        	.sym	~~cmp_lfn,~~cmp_lfn,69,3,0
 35183                        	.sym	~~st_clust,~~st_clust,65,3,0
 35184                        	.sym	~~ld_clust,~~ld_clust,82,3,0
 35185                        	.sym	~~dir_alloc,~~dir_alloc,69,3,0
 35186                        	.sym	~~dir_next,~~dir_next,69,3,0
 35187                        	.sym	~~dir_sdi,~~dir_sdi,69,3,0
 35188                        	.sym	~~dir_clear,~~dir_clear,69,3,0
 35189                        	.sym	~~create_chain,~~create_chain,82,3,0
 35190                        	.sym	~~remove_chain,~~remove_chain,69,3,0
 35191                        	.sym	~~put_fat,~~put_fat,69,3,0
 35192                        	.sym	~~get_fat,~~get_fat,82,3,0
 35193                        	.sym	~~clst2sect,~~clst2sect,82,3,0
 35194                        	.sym	~~sync_fs,~~sync_fs,69,3,0
 35195                        	.sym	~~move_window,~~move_window,69,3,0
 35196                        	.sym	~~sync_window,~~sync_window,69,3,0
 35197                        	.sym	~~put_utf,~~put_utf,78,3,0
 35198                        	.sym	~~tchar2uni,~~tchar2uni,82,3,0
 35199                        	.sym	~~dbc_2nd,~~dbc_2nd,69,3,0
 35200                        	.sym	~~dbc_1st,~~dbc_1st,69,3,0
 35201                        	.sym	~~chk_chr,~~chk_chr,69,3,0
 35202                        	.sym	~~mem_cmp,~~mem_cmp,69,3,0
 35203                        	.sym	~~mem_set,~~mem_set,65,3,0
 35204                        	.sym	~~mem_cpy,~~mem_cpy,65,3,0
 35205                        	.sym	~~st_dword,~~st_dword,65,3,0
  Sat Jul 10 2021  1:15                                                Page 664


 35206                        	.sym	~~st_word,~~st_word,65,3,0
 35207                        	.sym	~~ld_dword,~~ld_dword,82,3,0
 35208                        	.sym	~~ld_word,~~ld_word,69,3,0
 35209                        	.sym	~~ExCvt,~~ExCvt,110,3,0,128
 35210                        	.sym	~~LfnOfs,~~LfnOfs,110,3,0,13
 35211                        	.sym	~~VolumeStr,~~VolumeStr,1134,3,32,8
 35212                        	.sym	~~Fsid,~~Fsid,5,3,16
 35213                        	.sym	~~FatFs,~~FatFs,1130,3,32,72,8
 35214                        	.sym	va_list,0,142,14,32
 35215                        	.sym	PDOSHANDLE,0,138,14,32,124
 35216                        	.sym	DOSHANDLE,0,10,14,80,124
 35217                        	.sym	PFXDOSDEVICE,0,138,14,32,122
 35218                        	.sym	FXDOSDEVICE,0,10,14,5744,122
 35219                        	.sym	DOSINITDEVICE,0,641,14,32
 35220                        	.sym	DOSSECTORWRITER,0,654,14,32
 35221                        	.sym	DOSSECTORREADER,0,654,14,32
 35222                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,121
 35223                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,121
 35224                        	.sym	PIDSECTOR,0,138,14,32,98
 35225                        	.sym	IDSECTOR,0,10,14,2048,98
 35226                        	.sym	PLFN,0,138,14,32,97
 35227                        	.sym	LFN,0,10,14,256,97
 35228                        	.sym	PFAT16ENTRYLONG,0,138,14,32,96
 35229                        	.sym	FAT16ENTRYLONG,0,10,14,288,96
 35230                        	.sym	PFAT16ENTRY,0,138,14,32,95
 35231                        	.sym	FAT16ENTRY,0,10,14,256,95
 35232                        	.sym	Fat16BootSector,0,10,14,4096,94
 35233                        	.sym	PPARTITIONTABLE,0,138,14,32,93
 35234                        	.sym	PARTITIONTABLE,0,10,14,128,93
 35235                        	.sym	PFATBOOTSECTOR,0,138,14,32,92
 35236                        	.sym	FATBOOTSECTOR,0,10,14,928,92
 35237                        	.sym	fat_BS_t,0,10,14,688,91
 35238                        	.sym	fat_extBS_16_t,0,10,14,192,90
 35239                        	.sym	PFAT32EXT,0,138,14,32,89
 35240                        	.sym	fat_extBS_32_t,0,10,14,416,89
 35241                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,88
 35242                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,88
 35243                        	.sym	PFILEINFO,0,138,14,32,87
 35244                        	.sym	FILEINFO,0,10,14,136,87
 35245                        	.sym	PDISKINFO,0,138,14,32,86
 35246                        	.sym	DISKINFO,0,10,14,416,86
 35247                        	.sym	PDIRENTRY,0,138,14,32,85
 35248                        	.sym	DIRENTRY,0,10,14,256,85
 35249                        	.sym	~~disk_ioctl,~~disk_ioctl,69,18,0
 35250                        	.sym	~~disk_write,~~disk_write,69,18,0
 35251                        	.sym	~~disk_read,~~disk_read,69,18,0
 35252                        	.sym	~~disk_status,~~disk_status,78,18,0
 35253                        	.sym	~~disk_initialize,~~disk_initialize,78,1
                    8,0
 35254                        	.sym	DRESULT,0,5,14,16
 35255                        	.sym	DSTATUS,0,14,14,8
 35256                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
 35257                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
 35258                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
 35259                        	.sym	DEVICEDRIVER_READ,0,656,14,32
 35260                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
 35261                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
 35262                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,84
  Sat Jul 10 2021  1:15                                                Page 665


 35263                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,84
 35264                        	.sym	GETDRIVERDEF,0,8842,14,32,83
 35265                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,83
 35266                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,83
 35267                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
 35268                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
 35269                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
 35270                        	.sym	PSEGMENTHEADER,0,138,14,32,82
 35271                        	.sym	SEGMENTHEADER,0,10,14,160,82
 35272                        	.sym	PDEBUGBYTEBITS,0,138,14,32,81
 35273                        	.sym	DEBUGBYTEBITS,0,10,14,8,81
 35274                        	.sym	PFXENVIRONMENT,0,138,14,32,80
 35275                        	.sym	FXENVIRONMENT,0,10,14,96,80
 35276                        	.sym	PFXZEROPAGE,0,138,14,32,79
 35277                        	.sym	FXZEROPAGE,0,10,14,824,79
 35278                        	.sym	KERNELTRAPCALL,0,641,14,32
 35279                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,78
 35280                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,78
 35281                        	.sym	~~ff_memfree,~~ff_memfree,65,2,0
 35282                        	.sym	~~ff_memalloc,~~ff_memalloc,1089,2,32
 35283                        	.sym	~~ff_wtoupper,~~ff_wtoupper,82,2,0
 35284                        	.sym	~~ff_uni2oem,~~ff_uni2oem,80,2,0
 35285                        	.sym	~~ff_oem2uni,~~ff_oem2uni,80,2,0
 35286                        	.sym	~~f_gets,~~f_gets,1102,2,32
 35287                        	.sym	~~f_printf,~~f_printf,69,2,0
 35288                        	.sym	~~f_puts,~~f_puts,69,2,0
 35289                        	.sym	~~f_putc,~~f_putc,69,2,0
 35290                        	.sym	~~f_mkfs,~~f_mkfs,69,2,0
 35291                        	.sym	~~f_mount,~~f_mount,69,2,0
 35292                        	.sym	~~f_setlabel,~~f_setlabel,69,2,0
 35293                        	.sym	~~f_getlabel,~~f_getlabel,69,2,0
 35294                        	.sym	~~f_getfree,~~f_getfree,69,2,0
 35295                        	.sym	~~f_stat,~~f_stat,69,2,0
 35296                        	.sym	~~f_rename,~~f_rename,69,2,0
 35297                        	.sym	~~f_unlink,~~f_unlink,69,2,0
 35298                        	.sym	~~f_mkdir,~~f_mkdir,69,2,0
 35299                        	.sym	~~f_findnext,~~f_findnext,69,2,0
 35300                        	.sym	~~f_findfirst,~~f_findfirst,69,2,0
 35301                        	.sym	~~f_readdir,~~f_readdir,69,2,0
 35302                        	.sym	~~f_closedir,~~f_closedir,69,2,0
 35303                        	.sym	~~f_opendir,~~f_opendir,69,2,0
 35304                        	.sym	~~f_sync,~~f_sync,69,2,0
 35305                        	.sym	~~f_truncate,~~f_truncate,69,2,0
 35306                        	.sym	~~f_lseek,~~f_lseek,69,2,0
 35307                        	.sym	~~f_write,~~f_write,69,2,0
 35308                        	.sym	~~f_read,~~f_read,69,2,0
 35309                        	.sym	~~f_close,~~f_close,69,2,0
 35310                        	.sym	~~f_open,~~f_open,69,2,0
 35311                        	.sym	FRESULT,0,5,14,16
 35312                        	.sym	MKFS_PARM,0,10,14,80,77
 35313                        	.sym	FILINFO,0,10,14,2224,76
 35314                        	.sym	DIR,0,10,14,416,75
 35315                        	.sym	FIL,0,10,14,4400,74
 35316                        	.sym	FFOBJID,0,10,14,128,73
 35317                        	.sym	FATFS,0,10,14,4504,72
 35318                        	.sym	LBA_t,0,18,14,32
  Sat Jul 10 2021  1:15                                                Page 666


 35319                        	.sym	FSIZE_t,0,18,14,32
 35320                        	.sym	TCHAR,0,14,14,8
 35321                        	.sym	PCOMMANDARGS,0,138,14,32,71
 35322                        	.sym	COMMANDARGS,0,10,14,64,71
 35323                        	.sym	PTOKENIZESTATE,0,133,14,32
 35324                        	.sym	TOKENIZESTATE,0,5,14,16
 35325                        	.sym	PTOKEN,0,138,14,32,70
 35326                        	.sym	TOKEN,0,10,14,64,70
 35327                        	.sym	PTOKENTYPE,0,133,14,32
 35328                        	.sym	TOKENTYPE,0,5,14,16
 35329                        	.sym	FXCommandHandler,0,656,14,32
 35330                        	.sym	PCONSOLECTX,0,138,14,32,69
 35331                        	.sym	CONSOLECTX,0,10,14,1144,69
 35332                        	.sym	PSPINNERCTX,0,138,14,32,68
 35333                        	.sym	SPINNERCTX,0,10,14,48,68
 35334                        	.sym	HCLIP,0,138,14,32,67
 35335                        	.sym	PCLIPBOARD_DATA,0,138,14,32,67
 35336                        	.sym	CLIPBOARD_DATA,0,10,14,168,67
 35337                        	.sym	PEVENTMANAGER,0,138,14,32,66
 35338                        	.sym	EVENTMANAGER,0,10,14,192,66
 35339                        	.sym	EV_RUN,0,656,14,32
 35340                        	.sym	EV_QUERY_METRIC,0,656,14,32
 35341                        	.sym	EV_CONFIGURE,0,656,14,32
 35342                        	.sym	EV_UNINIT,0,641,14,32
 35343                        	.sym	EV_INIT,0,8833,14,32
 35344                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,65
 35345                        	.sym	MOUSE_MSG_STATE,0,10,14,184,65
 35346                        	.sym	PFXEVENTPROCESS,0,138,14,32,64
 35347                        	.sym	FXEVENTPROCESS,0,10,14,64,64
 35348                        	.sym	PMARSHALDATA,0,139,14,32,63
 35349                        	.sym	MARSHALDATA,0,11,14,32,63
 35350                        	.sym	FXIDLEPROCESS,0,641,14,32
 35351                        	.sym	FXEventProc,0,641,14,32
 35352                        	.sym	PMOUSEMSGDATA,0,138,14,32,62
 35353                        	.sym	MOUSEMSGDATA,0,10,14,64,62
 35354                        	.sym	MSGIRQ,0,5,14,16
 35355                        	.sym	MAINLOOPARGS,0,10,14,16,61
 35356                        	.sym	PEACHCHILD_MSG,0,138,14,32,60
 35357                        	.sym	EACHCHILD_MSG,0,10,14,64,60
 35358                        	.sym	PMSGBOX_DATA,0,138,14,32,59
 35359                        	.sym	MSGBOX_DATA,0,10,14,96,59
 35360                        	.sym	PDESKTOP_DATA,0,138,14,32,58
 35361                        	.sym	DESKTOP_DATA,0,10,14,64,58
 35362                        	.sym	PWINDOWMANAGER,0,138,14,32,57
 35363                        	.sym	WINDOWMANAGER,0,10,14,160,57
 35364                        	.sym	WM_DOPROCS,0,641,14,32
 35365                        	.sym	WM_QUERY_METRIC,0,656,14,32
 35366                        	.sym	WM_CONFIGURE,0,656,14,32
 35367                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
 35368                        	.sym	WM_EVENTS,0,641,14,32
 35369                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,56
 35370                        	.sym	CUR_PALETTE_MAP,0,10,14,400,56
 35371                        	.sym	PCLICKDETECTED,0,138,14,32,55
 35372                        	.sym	CLICKDETECTED,0,10,14,64,55
 35373                        	.sym	OBJECTCLICKED,0,641,14,32
 35374                        	.sym	PIPCPORT,0,138,14,32,54
 35375                        	.sym	IPCPORT,0,10,14,144,54
 35376                        	.sym	~~k_mem_deallocate_heap,~~k_mem_dealloca
  Sat Jul 10 2021  1:15                                                Page 667


                    te_heap,65,18,0
 35377                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
 35378                        	.sym	MemoryCallback,0,641,14,32
 35379                        	.sym	PFXMEMORYMAP,0,138,14,32,53
 35380                        	.sym	FXMEMORYMAP,0,10,14,2072,53
 35381                        	.sym	UMM_HEAP_INFO,0,10,14,256,52
 35382                        	.sym	FOREACHNODEUNTIL,0,654,14,32
 35383                        	.sym	FOREACHNODE,0,641,14,32
 35384                        	.sym	PEXECUTIVE,0,138,14,32,51
 35385                        	.sym	EXECUTIVE,0,10,14,128,51
 35386                        	.sym	EX_QUERY_METRIC,0,656,14,32
 35387                        	.sym	EX_CONFIGURE,0,656,14,32
 35388                        	.sym	EX_UNINIT,0,641,14,32
 35389                        	.sym	EX_INIT,0,8833,14,32
 35390                        	.sym	PFXSTRING,0,138,14,32,50
 35391                        	.sym	FXSTRING,0,10,14,64,50
 35392                        	.sym	Boolean_T,0,5,14,16
 35393                        	.sym	ldiv_t,0,10,14,64,48
 35394                        	.sym	div_t,0,10,14,32,47
 35395                        	.sym	wctype_t,0,16,14,16
 35396                        	.sym	wint_t,0,16,14,16
 35397                        	.sym	wchar_t,0,14,14,8
 35398                        	.sym	ptrdiff_t,0,7,14,32
 35399                        	.sym	size_t,0,16,14,16
 35400                        	.sym	PFXRFHEADER_FONT,0,138,14,32,46
 35401                        	.sym	FXRFHEADER_FONT,0,10,14,144,46
 35402                        	.sym	PFXRFHEADER,0,138,14,32,45
 35403                        	.sym	FXRFHEADER,0,10,14,72,45
 35404                        	.sym	PFXCOMBUFFER,0,138,14,32,44
 35405                        	.sym	FXCOMBUFFER,0,10,14,2080,44
 35406                        	.sym	PSUBMENULIST,0,138,14,32,43
 35407                        	.sym	SUBMENULIST,0,10,14,40,43
 35408                        	.sym	HSUBMENU,0,7,14,32
 35409                        	.sym	PSUBMENU,0,138,14,32,42
 35410                        	.sym	SUBMENU,0,10,14,64,42
 35411                        	.sym	MenuAction,0,641,14,32
 35412                        	.sym	PMENUANCHOR,0,138,14,32,41
 35413                        	.sym	MENUANCHOR,0,10,14,272,41
 35414                        	.sym	PMSGBOX,0,138,14,32,40
 35415                        	.sym	MSGBOX,0,10,14,144,40
 35416                        	.sym	PTEXTBOX,0,138,14,32,39
 35417                        	.sym	TEXTBOX,0,10,14,144,39
 35418                        	.sym	PLISTBOX,0,138,14,32,38
 35419                        	.sym	LISTBOX,0,10,14,240,38
 35420                        	.sym	PSCROLLBAR,0,138,14,32,37
 35421                        	.sym	SCROLLBAR,0,10,14,240,37
 35422                        	.sym	PBUTTON,0,138,14,32,36
 35423                        	.sym	BUTTON,0,10,14,96,36
 35424                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,35
 35425                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,35
 35426                        	.sym	PMENUTAG,0,138,14,32,34
 35427                        	.sym	MENUTAG,0,10,14,160,34
 35428                        	.sym	PMENU,0,138,14,32,33
 35429                        	.sym	MENU,0,10,14,280,33
 35430                        	.sym	HMENURESOURCE,0,129,14,32
 35431                        	.sym	FONTMETRIC,0,10,14,32,32
 35432                        	.sym	TITLE,0,142,14,32
  Sat Jul 10 2021  1:15                                                Page 668


 35433                        	.sym	PHANDLE,0,1153,14,32
 35434                        	.sym	HANDLE,0,129,14,32
 35435                        	.sym	PWINDOWEX,0,138,14,32,31
 35436                        	.sym	WINDOWEX,0,10,14,3880,31
 35437                        	.sym	PWINDOW,0,138,14,32,30
 35438                        	.sym	WINDOW,0,10,14,3904,30
 35439                        	.sym	PDRAGDATA,0,138,14,32,29
 35440                        	.sym	DRAGDATA,0,10,14,216,29
 35441                        	.sym	PNCCLICKABLE,0,138,14,32,28
 35442                        	.sym	NCCLICKABLE,0,10,14,136,28
 35443                        	.sym	HCLICKABLE,0,7,14,32
 35444                        	.sym	PCLICKABLE,0,138,14,32,27
 35445                        	.sym	CLICKABLE,0,10,14,152,27
 35446                        	.sym	PWNDCLASS,0,138,14,32,26
 35447                        	.sym	WNDCLASS,0,10,14,272,26
 35448                        	.sym	HBRUSH,0,129,14,32
 35449                        	.sym	HCURSOR,0,129,14,32
 35450                        	.sym	HICON,0,129,14,32
 35451                        	.sym	HINSTANCE,0,129,14,32
 35452                        	.sym	FXWndProc,0,654,14,32
 35453                        	.sym	PDRECT,0,138,14,32,25
 35454                        	.sym	DRECT,0,10,14,112,25
 35455                        	.sym	PRECTP,0,138,14,32,24
 35456                        	.sym	RECTP,0,10,14,96,24
 35457                        	.sym	PRECT,0,138,14,32,23
 35458                        	.sym	RECT,0,10,14,112,23
 35459                        	.sym	PPOINT,0,138,14,32,22
 35460                        	.sym	POINT,0,10,14,32,22
 35461                        	.sym	PFXPROPERTY,0,138,14,32,20
 35462                        	.sym	FXPROPERTY,0,10,14,384,20
 35463                        	.sym	PKEYSTATE,0,138,14,32,19
 35464                        	.sym	KEYSTATE,0,10,14,112,19
 35465                        	.sym	SCANCODE,0,14,14,8
 35466                        	.sym	KEYCODE,0,16,14,16
 35467                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
 35468                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
 35469                        	.sym	PFXPROCESS,0,138,14,32,17
 35470                        	.sym	FXPROCESS,0,10,14,800,17
 35471                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
 35472                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
 35473                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
 35474                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
 35475                        	.sym	FXProcessProc,0,641,14,32
 35476                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
 35477                        	.sym	FXCMDMESSAGE,0,10,14,304,14
 35478                        	.sym	PFXOSMESSAGE,0,138,14,32,13
 35479                        	.sym	FXOSMESSAGE,0,10,14,304,13
 35480                        	.sym	PINT_REGS,0,138,14,32,12
 35481                        	.sym	INT_REGS,0,10,14,104,12
 35482                        	.sym	TASK_STACK,0,10,14,32,11
 35483                        	.sym	TASK,0,10,14,48,10
 35484                        	.sym	PIRQDATA,0,138,14,32,9
 35485                        	.sym	IRQDATA,0,10,14,48,9
 35486                        	.sym	HMENU,0,129,14,32
 35487                        	.sym	HWND,0,129,14,32
 35488                        	.sym	MSGDATA,0,14,14,8
 35489                        	.sym	MSGDEST,0,18,14,32
 35490                        	.sym	MSGSRC,0,18,14,32
  Sat Jul 10 2021  1:15                                                Page 669


 35491                        	.sym	MSGTYPE,0,16,14,16
 35492                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
 35493                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
 35494                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
 35495                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
 35496                        	.sym	FILE_PATH_LIST,0,138,14,32,3
 35497                        	.sym	PROCEDURE_LIST,0,138,14,32,3
 35498                        	.sym	FILE_HANDLE,0,138,14,32,8
 35499                        	.sym	FILE_BLOCK,0,10,14,552,8
 35500                        	.sym	SEMAPHORE,0,10,14,16,7
 35501                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
 35502                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
 35503                        	.sym	KRESULT,0,18,14,32
 35504                        	.sym	PKERNEL_ERROR,0,138,14,32,5
 35505                        	.sym	KERNEL_ERROR,0,10,14,32,5
 35506                        	.sym	PROCESS_STATUS,0,16,14,16
 35507                        	.sym	FILE_PATH_NAME,0,142,14,32
 35508                        	.sym	PROCESS_RESOURCE,0,129,14,32
 35509                        	.sym	PROCESS_TLS,0,129,14,32
 35510                        	.sym	PROCESS_CTX,0,129,14,32
 35511                        	.sym	USERID,0,16,14,16
 35512                        	.sym	PROCESS_ID,0,18,14,32
 35513                        	.sym	PROCESS_BANK,0,14,14,8
 35514                        	.sym	PFXQUEUE,0,138,14,32,4
 35515                        	.sym	FXQUEUE,0,10,14,80,4
 35516                        	.sym	PFXNODELIST,0,138,14,32,3
 35517                        	.sym	FXNODELIST,0,10,14,96,3
 35518                        	.sym	NodeListDeallocator,0,641,14,32
 35519                        	.sym	PFXNODE,0,138,14,32,2
 35520                        	.sym	FXNODE,0,10,14,384,2
 35521                        	.sym	PBYTEBITS,0,138,14,32,1
 35522                        	.sym	BYTEBITS,0,10,14,8,1
 35523                        	.sym	HRESULT,0,18,14,32
 35524                        	.sym	LPWCHAR,0,144,14,32
 35525                        	.sym	WCHAR,0,16,14,16
 35526                        	.sym	HCOLOR,0,129,14,32
 35527                        	.sym	HFONT,0,129,14,32
 35528                        	.sym	HDC,0,129,14,32
 35529                        	.sym	HPOINTER,0,129,14,32
 35530                        	.sym	uint32_t,0,18,14,32
 35531                        	.sym	uint8_t,0,14,14,8
 35532                        	.sym	LPBOOL,0,142,14,32
 35533                        	.sym	BOOL,0,14,14,8
 35534                        	.sym	DWORD,0,18,14,32
 35535                        	.sym	ULONG,0,18,14,32
 35536                        	.sym	LPLONG,0,135,14,32
 35537                        	.sym	LONG,0,7,14,32
 35538                        	.sym	PUINT,0,144,14,32
 35539                        	.sym	USHORT,0,16,14,16
 35540                        	.sym	UINT,0,16,14,16
 35541                        	.sym	INT,0,5,14,16
 35542                        	.sym	WORD,0,5,14,16
 35543                        	.sym	PBYTE,0,142,14,32
 35544                        	.sym	BYTE,0,14,14,8
 35545                        	.sym	IOPORT,0,142,14,32
 35546                        	.sym	PUCHAR,0,142,14,32
 35547                        	.sym	UCHAR,0,14,14,8
 35548                        	.sym	LPWCSTR,0,142,14,32
  Sat Jul 10 2021  1:15                                                Page 670


 35549                        	.sym	LPCSTR,0,142,14,32
 35550                        	.sym	LPSTR,0,142,14,32
 35551                        	.sym	LPCHAR,0,142,14,32
 35552                        	.sym	CHAR,0,14,14,8
 35553                        	.sym	LPVOID,0,129,14,32
 35554                        	.sym	VOID,0,1,14,32
 35555                        	end


      Lines assembled: 35555
      Errors: 0
