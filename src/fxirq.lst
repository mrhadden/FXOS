  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirqV3.c",0
     7                        ;
     8                        ;//#include "fxos.h"
     9                        ;//#include "fxstartup.h"
    10                        ;//#include "fxeventmanager.h"
    11                        ;
    12                        ;#ifdef USE_FX256_FMX
    13                        ;#include "fxc256fmx.h"
    14                        ;#elif USE_FX256_U
    15                        ;#include "fxc256u.h"
    16                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
    17                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    18                        	.stag	_fx_bytebits,8,1
    19                        	.member	b7,0,14,17,1
    20                        	.member	b6,1,14,17,1
    21                        	.member	b5,2,14,17,1
    22                        	.member	b4,3,14,17,1
    23                        	.member	b3,4,14,17,1
    24                        	.member	b2,5,14,17,1
    25                        	.member	b1,6,14,17,1
    26                        	.member	b0,7,14,17,1
    27                        	.eos
    28                        	.stag	_fx_node,384,2
    29                        	.member	type,0,14,8,8
    30                        	.member	Reserved0,8,14,8,8
    31                        	.member	data,16,129,8,32
    32                        	.member	last,48,138,8,32,2
    33                        	.member	next,80,138,8,32,2
    34                        	.member	name,112,110,8,0,32
    35                        	.member	Reserved1,368,16,8,16
    36                        	.eos
    37                        	.stag	_fx_nodelist,96,3
    38                        	.member	listhead,0,138,8,32,2
    39                        	.member	listData,32,129,8,32
    40                        	.member	deallocator,64,641,8,32
    41                        	.eos
    42                        	.stag	_fx_queue,80,4
    43                        	.member	count,0,5,8,16
    44                        	.member	front,16,138,8,32,2
    45                        	.member	rear,48,138,8,32,2
    46                        	.eos
    47                        	.stag	fake5_,32,5
    48                        	.member	subsystem,0,14,8,8
    49                        	.member	level,8,14,8,8
  Sat Jul 10 2021  1:15                                                Page 2


    50                        	.member	error,16,16,8,16
    51                        	.eos
    52                        	.stag	_fx_process_signal,16,6
    53                        	.member	cbSize,0,16,8,16
    54                        	.eos
    55                        	.stag	_fx_semaphore,16,7
    56                        	.member	reserved,0,5,8,16
    57                        	.eos
    58                        	.stag	_fx_fileBlock,552,8
    59                        	.member	openCount,0,16,8,16
    60                        	.member	lockCount,16,16,8,16
    61                        	.member	dirty,32,14,8,8
    62                        	.member	fileBuffer,40,110,8,0,64
    63                        	.eos
    64                        	.stag	_fx_irq_data,48,9
    65                        	.member	line,0,5,8,16
    66                        	.member	keycode,16,142,8,32
    67                        	.eos
    68                        	.stag	_task,48,10
    69                        	.member	SPL,0,14,8,8
    70                        	.member	SPH,8,14,8,8
    71                        	.member	pstack,16,142,8,32
    72                        	.eos
    73                        	.stag	_task_stack,32,11
    74                        	.member	SS,0,142,8,32
    75                        	.eos
    76                        	.stag	int_regs,104,12
    77                        	.member	PB,0,14,8,8
    78                        	.member	PH,8,14,8,8
    79                        	.member	PL,16,14,8,8
    80                        	.member	PP,24,14,8,8
    81                        	.member	DB,32,14,8,8
    82                        	.member	DH,40,14,8,8
    83                        	.member	DL,48,14,8,8
    84                        	.member	AH,56,14,8,8
    85                        	.member	AL,64,14,8,8
    86                        	.member	XH,72,14,8,8
    87                        	.member	XL,80,14,8,8
    88                        	.member	YH,88,14,8,8
    89                        	.member	YL,96,14,8,8
    90                        	.eos
    91                        	.stag	_fx_eventMessage,304,13
    92                        	.member	src,0,18,8,32
    93                        	.member	dest,32,18,8,32
    94                        	.member	type,64,16,8,16
    95                        	.member	hwnd,80,129,8,32
    96                        	.member	pheap,112,129,8,32
    97                        	.member	msgTime,144,18,8,32
    98                        	.member	data,176,110,8,0,16
    99                        	.eos
   100                        	.stag	_fx_cmdMessage,304,14
   101                        	.member	src,0,18,8,32
   102                        	.member	dest,32,18,8,32
   103                        	.member	type,64,16,8,16
   104                        	.member	hwnd,80,129,8,32
   105                        	.member	pheap,112,129,8,32
   106                        	.member	msgTime,144,18,8,32
   107                        	.member	cmdCId,176,16,8,16
  Sat Jul 10 2021  1:15                                                Page 3


   108                        	.member	cmdMId,192,16,8,16
   109                        	.member	parameter1,208,18,8,32
   110                        	.member	parameter2,240,18,8,32
   111                        	.member	parameter3,272,18,8,32
   112                        	.eos
   113                        	.stag	_fx_console_ctl,448,15
   114                        	.member	maxCols,0,5,8,16
   115                        	.member	maxRows,16,5,8,16
   116                        	.member	curX,32,5,8,16
   117                        	.member	curY,48,5,8,16
   118                        	.member	fgColor,64,5,8,16
   119                        	.member	bgColor,80,5,8,16
   120                        	.member	mode,96,14,8,8
   121                        	.member	kbBuffer,104,101,8,0,16
   122                        	.member	screenBuffer,360,142,8,32
   123                        	.member	desktopMode,392,14,8,8
   124                        	.member	lastMouseButton,400,5,8,16
   125                        	.member	lastMouseX,416,5,8,16
   126                        	.member	lastMouseY,432,5,8,16
   127                        	.eos
   128                        	.stag	_fx_desktop_ctl,392,16
   129                        	.member	desktopMode,0,14,8,8
   130                        	.member	cursorCtl,8,5,8,16
   131                        	.member	cursorState,24,5,8,16
   132                        	.member	backgroundColor,40,5,8,16
   133                        	.member	foregroundColor,56,5,8,16
   134                        	.member	menuMode,72,5,8,16
   135                        	.member	lastMouseButton,88,5,8,16
   136                        	.member	lastMouseX,104,5,8,16
   137                        	.member	lastMouseY,120,5,8,16
   138                        	.member	currentDiskName,136,142,8,32
   139                        	.member	diskNodes,168,129,8,32
   140                        	.member	titleNodes,200,129,8,32
   141                        	.member	menuNodes,232,129,8,32
   142                        	.member	iconNodes,264,129,8,32
   143                        	.member	windowNodes,296,129,8,32
   144                        	.member	fontNodes,328,129,8,32
   145                        	.member	wndProc,360,138,8,32,3
   146                        	.eos
   147                        	.stag	_fx_process,800,17
   148                        	.member	cbSize,0,5,8,16
   149                        	.member	procId,16,18,8,32
   150                        	.member	parentId,48,18,8,32
   151                        	.member	ctx,80,129,8,32
   152                        	.member	userId,112,16,8,16
   153                        	.member	status,128,16,8,16
   154                        	.member	foregroundActive,144,14,8,8
   155                        	.member	tls,152,1121,8,32,8
   156                        	.member	commandLine,408,142,8,32
   157                        	.member	semaphores,440,138,8,32,3
   158                        	.member	fileHandles,472,138,8,32,3
   159                        	.member	pathList,504,138,8,32,3
   160                        	.member	resources,536,138,8,32,3
   161                        	.member	timerAware,568,14,8,8
   162                        	.member	timerTicks,576,112,8,0,2
   163                        	.member	timerTickCount,608,112,8,0,2
   164                        	.member	kernelError,640,10,8,32,5
   165                        	.member	consoleCtl,672,138,8,32,15
  Sat Jul 10 2021  1:15                                                Page 4


   166                        	.member	desktopCtl,704,138,8,32,16
   167                        	.member	execProc,736,641,8,32
   168                        	.member	startupArgs,768,129,8,32
   169                        	.eos
   170                        	.stag	_fxProcessMessage,112,18
   171                        	.member	src,0,18,8,32
   172                        	.member	dest,32,18,8,32
   173                        	.member	type,64,16,8,16
   174                        	.member	processInfo,80,138,8,32,17
   175                        	.eos
   176                        	.stag	_k_key_state,112,19
   177                        	.member	scanCode,0,14,8,8
   178                        	.member	isShifted,8,14,8,8
   179                        	.member	isAlt,16,14,8,8
   180                        	.member	isExtended,24,14,8,8
   181                        	.member	isCapsLock,32,14,8,8
   182                        	.member	isNumLock,40,14,8,8
   183                        	.member	isScrollLock,48,14,8,8
   184                        	.member	keyChar,56,16,8,16
   185                        	.member	scanTime,72,18,8,32
   186                        	.member	ledStatus,104,14,8,8
   187                        	.eos
   188                        	.stag	_fx_property,384,20
   189                        	.member	name,0,110,8,0,16
   190                        	.member	value,128,110,8,0,32
   191                        	.eos
   192                        	.utag	_24bitPointer,32,21
   193                        	.member	address,0,142,11,32
   194                        	.member	bytes,0,110,11,0,4
   195                        	.eos
   196                        	.stag	_PointStruct,32,22
   197                        	.member	x,0,5,8,16
   198                        	.member	y,16,5,8,16
   199                        	.eos
   200                        	.stag	_RectStruct,112,23
   201                        	.member	x,0,5,8,16
   202                        	.member	y,16,5,8,16
   203                        	.member	z,32,18,8,32
   204                        	.member	width,64,5,8,16
   205                        	.member	height,80,5,8,16
   206                        	.member	attr,96,5,8,16
   207                        	.eos
   208                        	.stag	fake24_,96,24
   209                        	.member	name,0,142,8,32
   210                        	.member	topLeft,32,10,8,32,22
   211                        	.member	bottomRight,64,10,8,32,22
   212                        	.eos
   213                        	.stag	fake25_,112,25
   214                        	.member	x,0,5,8,16
   215                        	.member	y,16,5,8,16
   216                        	.member	z,32,5,8,16
   217                        	.member	width,48,5,8,16
   218                        	.member	height,64,5,8,16
   219                        	.member	data,80,18,8,32
   220                        	.eos
   221                        	.stag	_k_WindowClass,272,26
   222                        	.member	cbSize,0,16,8,16
   223                        	.member	style,16,16,8,16
  Sat Jul 10 2021  1:15                                                Page 5


   224                        	.member	styleEx,32,16,8,16
   225                        	.member	pWndProc,48,654,8,32
   226                        	.member	hInstance,80,129,8,32
   227                        	.member	hIcon,112,129,8,32
   228                        	.member	hCursor,144,129,8,32
   229                        	.member	hbrBackground,176,129,8,32
   230                        	.member	lpszMenuName,208,142,8,32
   231                        	.member	lpszClassName,240,142,8,32
   232                        	.eos
   233                        	.stag	_ClickableRect,152,27
   234                        	.member	area,0,10,8,112,23
   235                        	.member	z,112,18,8,32
   236                        	.member	enabled,144,14,8,8
   237                        	.eos
   238                        	.stag	_NCClickableRect,136,28
   239                        	.member	area,0,10,8,112,23
   240                        	.member	msgType,112,16,8,16
   241                        	.member	enabled,128,14,8,8
   242                        	.eos
   243                        	.stag	_DragData,216,29
   244                        	.member	area,0,10,8,112,23
   245                        	.member	xoffset,112,5,8,16
   246                        	.member	yoffset,128,5,8,16
   247                        	.member	msgType,144,16,8,16
   248                        	.member	ncAction,160,16,8,16
   249                        	.member	isDrag,176,14,8,8
   250                        	.member	isResize,184,14,8,8
   251                        	.member	canDrag,192,14,8,8
   252                        	.member	canDrop,200,14,8,8
   253                        	.member	didDrag,208,14,8,8
   254                        	.eos
   255                        	.stag	_k_WindowStruct,3904,30
   256                        	.member	cbSize,0,16,8,16
   257                        	.member	style,16,18,8,32
   258                        	.member	styleEx,48,18,8,32
   259                        	.member	win_id,80,5,8,16
   260                        	.member	win_x,96,5,8,16
   261                        	.member	win_y,112,5,8,16
   262                        	.member	win_width,128,5,8,16
   263                        	.member	win_height,144,5,8,16
   264                        	.member	win_xoffset,160,5,8,16
   265                        	.member	win_yoffset,176,5,8,16
   266                        	.member	win_cxoffset,192,5,8,16
   267                        	.member	win_cyoffset,208,5,8,16
   268                        	.member	wndRect,224,10,8,112,23
   269                        	.member	clientRect,336,10,8,112,23
   270                        	.member	nonclientGadgets,448,106,8,0,28,16
   271                        	.member	clickable,2624,129,8,32
   272                        	.member	win_title,2656,110,8,0,32
   273                        	.member	Reserved0,2912,16,8,16
   274                        	.member	win_class,2928,110,8,0,16
   275                        	.member	win_class_name,3056,110,8,0,32
   276                        	.member	nBitmapLayer,3312,16,8,16
   277                        	.member	bgRegion,3328,129,8,32
   278                        	.member	procid,3360,18,8,32
   279                        	.member	pWndClass,3392,138,8,32,26
   280                        	.member	pParentWindow,3424,129,8,32
   281                        	.member	hMenu,3456,129,8,32
  Sat Jul 10 2021  1:15                                                Page 6


   282                        	.member	hPointer,3488,129,8,32
   283                        	.member	hBackground,3520,129,8,32
   284                        	.member	pChildWindows,3552,138,8,32,3
   285                        	.member	pChildHitList,3584,138,8,32,3
   286                        	.member	isVisible,3616,14,8,8
   287                        	.member	windowData,3624,129,8,32
   288                        	.member	clientData,3656,1121,8,32,6
   289                        	.member	isClosed,3848,14,8,8
   290                        	.member	isClosing,3856,14,8,8
   291                        	.member	isDesktop,3864,14,8,8
   292                        	.member	clickableNode,3872,138,8,32,2
   293                        	.eos
   294                        	.stag	_k_WindowStructEx,3880,31
   295                        	.member	cbSize,0,16,8,16
   296                        	.member	style,16,18,8,32
   297                        	.member	styleEx,48,18,8,32
   298                        	.member	win_id,80,5,8,16
   299                        	.member	win_x,96,5,8,16
   300                        	.member	win_y,112,5,8,16
   301                        	.member	win_width,128,5,8,16
   302                        	.member	win_height,144,5,8,16
   303                        	.member	win_xoffset,160,5,8,16
   304                        	.member	win_yoffset,176,5,8,16
   305                        	.member	win_cxoffset,192,5,8,16
   306                        	.member	win_cyoffset,208,5,8,16
   307                        	.member	wndRect,224,10,8,112,23
   308                        	.member	clientRect,336,10,8,112,23
   309                        	.member	nonclientGadgets,448,106,8,0,28,16
   310                        	.member	clickable,2624,129,8,32
   311                        	.member	win_title,2656,110,8,0,32
   312                        	.member	Reserved0,2912,16,8,16
   313                        	.member	win_class,2928,110,8,0,16
   314                        	.member	nBitmapLayer,3056,16,8,16
   315                        	.member	procid,3072,18,8,32
   316                        	.member	pWndClass,3104,138,8,32,26
   317                        	.member	pParentWindow,3136,129,8,32
   318                        	.member	hMenu,3168,129,8,32
   319                        	.member	hPointer,3200,129,8,32
   320                        	.member	hBackground,3232,129,8,32
   321                        	.member	pChildWindows,3264,138,8,32,3
   322                        	.member	pChildHitList,3296,138,8,32,3
   323                        	.member	isVisible,3328,14,8,8
   324                        	.member	windowData,3336,129,8,32
   325                        	.member	clientData,3368,1121,8,32,4
   326                        	.member	isClosed,3496,14,8,8
   327                        	.member	hWnd,3504,129,8,32
   328                        	.member	localRect,3536,10,8,112,23
   329                        	.member	globalRect,3648,10,8,112,23
   330                        	.member	clientOffsetRect,3760,10,8,112,23
   331                        	.member	isDesktop,3872,14,8,8
   332                        	.eos
   333                        	.stag	_FontMetric,32,32
   334                        	.member	width,0,5,8,16
   335                        	.member	height,16,5,8,16
   336                        	.eos
   337                        	.stag	_MenuStruct,280,33
   338                        	.member	cx,0,5,8,16
   339                        	.member	cy,16,5,8,16
  Sat Jul 10 2021  1:15                                                Page 7


   340                        	.member	width,32,5,8,16
   341                        	.member	height,48,5,8,16
   342                        	.member	fcolor,64,14,8,8
   343                        	.member	bcolor,72,14,8,8
   344                        	.member	chromeLeft,80,14,8,8
   345                        	.member	chromeRight1,88,14,8,8
   346                        	.member	chromeRight2,96,14,8,8
   347                        	.member	hFont,104,129,8,32
   348                        	.member	itemId,136,16,8,16
   349                        	.member	pCaption,152,142,8,32
   350                        	.member	subMenus,184,138,8,32,3
   351                        	.member	pBackground,216,129,8,32
   352                        	.member	hWndOwner,248,129,8,32
   353                        	.eos
   354                        	.stag	fake34_,160,34
   355                        	.member	menuId,0,16,8,16
   356                        	.member	caption,16,142,8,32
   357                        	.member	rect,48,10,8,112,23
   358                        	.eos
   359                        	.stag	fake35_,5152,35
   360                        	.member	pParent,0,138,8,32,30
   361                        	.member	rect,32,10,8,112,23
   362                        	.member	captions,144,1134,8,32,24
   363                        	.member	chrome,912,110,8,0,24
   364                        	.member	ids,1104,112,8,0,24
   365                        	.member	clickable,1488,106,8,0,27,24
   366                        	.member	selected,5136,16,8,16
   367                        	.eos
   368                        	.stag	_fx_button_t,96,36
   369                        	.member	pCaption,0,142,8,32
   370                        	.member	cCaption,32,16,8,16
   371                        	.member	data,48,129,8,32
   372                        	.member	captionPixelWidth,80,16,8,16
   373                        	.eos
   374                        	.stag	_fx_scrollbar_t,240,37
   375                        	.member	min,0,16,8,16
   376                        	.member	max,16,16,8,16
   377                        	.member	increment,32,16,8,16
   378                        	.member	stopsize,48,16,8,16
   379                        	.member	location,64,5,8,16
   380                        	.member	state,80,5,8,16
   381                        	.member	rectThumb,96,10,8,112,23
   382                        	.member	data,208,129,8,32
   383                        	.eos
   384                        	.stag	_fx_listbox_t,240,38
   385                        	.member	pos,0,5,8,16
   386                        	.member	selected,16,16,8,16
   387                        	.member	offsetX,32,5,8,16
   388                        	.member	offsetY,48,5,8,16
   389                        	.member	inc,64,5,8,16
   390                        	.member	direction,80,5,8,16
   391                        	.member	top,96,5,8,16
   392                        	.member	bottom,112,5,8,16
   393                        	.member	indexTop,128,5,8,16
   394                        	.member	indexBottom,144,5,8,16
   395                        	.member	maxItems,160,16,8,16
   396                        	.member	fontSet,176,142,8,32
   397                        	.member	data,208,129,8,32
  Sat Jul 10 2021  1:15                                                Page 8


   398                        	.eos
   399                        	.stag	_fx_textbox_t,144,39
   400                        	.member	pos,0,5,8,16
   401                        	.member	selected,16,16,8,16
   402                        	.member	offsetX,32,5,8,16
   403                        	.member	offsetY,48,5,8,16
   404                        	.member	isShifted,64,14,8,8
   405                        	.member	cursorState,72,14,8,8
   406                        	.member	fontSet,80,142,8,32
   407                        	.member	data,112,129,8,32
   408                        	.eos
   409                        	.stag	_fx_msgbox_t,144,40
   410                        	.member	pos,0,5,8,16
   411                        	.member	selected,16,16,8,16
   412                        	.member	offsetX,32,5,8,16
   413                        	.member	offsetY,48,5,8,16
   414                        	.member	isShifted,64,14,8,8
   415                        	.member	cursorState,72,14,8,8
   416                        	.member	fontSet,80,142,8,32
   417                        	.member	data,112,129,8,32
   418                        	.eos
   419                        	.stag	_fx_menuAnchor_t,272,41
   420                        	.member	pCaption,0,142,8,32
   421                        	.member	renderLayoutX,32,16,8,16
   422                        	.member	renderLayoutY,48,16,8,16
   423                        	.member	captionPixelWidth,64,16,8,16
   424                        	.member	data,80,129,8,32
   425                        	.member	droppedWindow,112,138,8,32,30
   426                        	.member	bytes,144,110,8,0,16
   427                        	.eos
   428                        	.stag	_SubMenuStruct,64,42
   429                        	.member	caption,0,142,8,32
   430                        	.member	action,32,641,8,32
   431                        	.eos
   432                        	.stag	_SubMenuListStruct,40,43
   433                        	.member	cMenus,0,14,8,8
   434                        	.member	psubmenus,8,9354,8,32,42
   435                        	.eos
   436                        	.stag	_fx_ComBuffer,2080,44
   437                        	.member	cbSize,0,16,8,16
   438                        	.member	cbBuffer,16,16,8,16
   439                        	.member	buffer,32,110,8,0,256
   440                        	.eos
   441                        	.stag	_fx_resource_header,72,45
   442                        	.member	magic,0,110,8,0,4
   443                        	.member	major,32,14,8,8
   444                        	.member	minor,40,14,8,8
   445                        	.member	type,48,14,8,8
   446                        	.member	reserved,56,14,8,8
   447                        	.member	resheaderSize,64,14,8,8
   448                        	.eos
   449                        	.stag	_fx_resource_header_font,144,46
   450                        	.member	title,0,110,8,0,16
   451                        	.member	height,128,14,8,8
   452                        	.member	width,136,14,8,8
   453                        	.eos
   454                        	.line	1010
   455                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 9


                    space\FXOSv1\src\fxc256u.h",5
   456                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   457                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   458                        	.line	1010
   459                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   460                        	.line	72
   461                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   462                        	.line	1960
   463                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirqV3.c",9
   464                        ;#else
   465                        ;#include "fxc256.h"
   466                        ;#endif
   467                        ;
   468                        ;#include "fxtypes.h"
   469                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   470                        	.line	1010
   471                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirqV3.c",14
   472                        ;#include "fxkernel.h"
   473                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   474                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   475                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   476                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   477                        	.line	88
   478                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   479                        	.stag	fake47_,32,47
   480                        	.member	quot,0,5,8,16
   481                        	.member	rem,16,5,8,16
   482                        	.eos
   483                        	.stag	fake48_,64,48
   484                        	.member	quot,0,7,8,32
   485                        	.member	rem,32,7,8,32
   486                        	.eos
   487                        	.stag	int_sqrt,32,49
   488                        	.member	sqrt,0,16,8,16
   489                        	.member	frac,16,16,8,16
   490                        	.eos
   491                        	.line	205
   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
   493                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   494                        	.line	134
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   496                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
  Sat Jul 10 2021  1:15                                                Page 10


   497                        	.line	103
   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
   499                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   500                        	.line	1010
   501                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   503                        	.line	89
   504                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   506                        	.line	1960
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
   508                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   509                        	.line	400
   510                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   511                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   512                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   513                        	.line	134
   514                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   515                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   516                        	.line	205
   517                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   519                        	.line	1010
   520                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   522                        	.line	1960
   523                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
   524                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   525                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   526                        	.line	205
   527                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   528                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   529                        	.line	134
   530                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   531                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 11


                    space\FXOSv1\src\fxtypes.h",0
   532                        	.line	1010
   533                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   534                        	.stag	_fx_string,64,50
   535                        	.member	size,0,16,8,16
   536                        	.member	pos,16,5,8,16
   537                        	.member	buffer,32,142,8,32
   538                        	.eos
   539                        	.line	139
   540                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   542                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   543                        	.line	30
   544                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   545                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   546                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   547                        	.line	1010
   548                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   549                        	.stag	_fxos_executive_vtable,128,51
   550                        	.member	Init,0,8833,8,32
   551                        	.member	Configure,32,656,8,32
   552                        	.member	Query,64,656,8,32
   553                        	.member	Uninit,96,641,8,32
   554                        	.eos
   555                        	.line	86
   556                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   559                        	.line	1010
   560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   561                        	.line	114
   562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   563                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   564                        	.line	208
   565                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   568                        	.line	30
   569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   570                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 12


                    space\FXOSv1\src\fxmemorymanager.h",0
   571                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   572                        	.line	30
   573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   574                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   576                        	.line	35
   577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   578                        	.stag	UMM_HEAP_INFO_t,256,52
   579                        	.member	totalEntries,0,18,8,32
   580                        	.member	usedEntries,32,18,8,32
   581                        	.member	freeEntries,64,18,8,32
   582                        	.member	totalBlocks,96,18,8,32
   583                        	.member	usedBlocks,128,18,8,32
   584                        	.member	freeBlocks,160,18,8,32
   585                        	.member	maxFreeContiguousBlocks,192,18,8,32
   586                        	.member	blockSize,224,18,8,32
   587                        	.eos
   588                        	.line	199
   589                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   590                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   591                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   592                        	.line	1010
   593                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   594                        	.line	24
   595                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   596                        	.stag	_fx_memory_map,2072,53
   597                        	.member	availableMemory,0,18,8,32
   598                        	.member	valid_segments,32,110,8,0,255
   599                        	.eos
   600                        	.stag	_fx_ipc_port,144,54
   601                        	.member	id,0,18,8,32
   602                        	.member	type,32,14,8,8
   603                        	.member	name,40,138,8,32,50
   604                        	.member	time,72,18,8,32
   605                        	.member	queue,104,138,8,32,4
   606                        	.member	reserved_1,136,14,8,8
   607                        	.eos
   608                        	.line	105
   609                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   611                        	.line	564
   612                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
  Sat Jul 10 2021  1:15                                                Page 13


   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   615                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   616                        	.line	1010
   617                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   618                        	.line	74
   619                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   620                        	.stag	_click_detected,64,55
   621                        	.member	window,0,138,8,32,30
   622                        	.member	handler,32,641,8,32
   623                        	.eos
   624                        	.stag	_current_palette_map,400,56
   625                        	.member	CUR_DESKTOP,0,5,8,16
   626                        	.member	CUR_BACKGROUND,16,5,8,16
   627                        	.member	CUR_FONT,32,5,8,16
   628                        	.member	CUR_SELECTED_FONT,48,5,8,16
   629                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   630                        	.member	CUR_WINDOWFRAME,80,5,8,16
   631                        	.member	CUR_WINDOWBORDER,96,5,8,16
   632                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   633                        	.member	CUR_MENU,128,5,8,16
   634                        	.member	CUR_GADGET,144,5,8,16
   635                        	.member	CUR_COLOR,160,101,8,0,15
   636                        	.eos
   637                        	.line	359
   638                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   639                        	.stag	_fxos_winman_vtable,160,57
   640                        	.member	Events,0,641,8,32
   641                        	.member	ConfigureWindowManager,32,656,8,32
   642                        	.member	ProcessWindowEvent,64,8833,8,32
   643                        	.member	QueryWindowManager,96,656,8,32
   644                        	.member	DoWndProcs,128,641,8,32
   645                        	.eos
   646                        	.stag	fake58_,64,58
   647                        	.member	type,0,16,8,16
   648                        	.member	size,16,16,8,16
   649                        	.member	desktopAction,32,129,8,32
   650                        	.eos
   651                        	.stag	fake59_,96,59
   652                        	.member	type,0,16,8,16
   653                        	.member	caption,16,138,8,32,50
   654                        	.member	buttonType,48,16,8,16
   655                        	.member	x,64,5,8,16
   656                        	.member	y,80,5,8,16
   657                        	.eos
   658                        	.stag	_childMessage_t,64,60
   659                        	.member	msgType,0,16,8,16
   660                        	.member	msgData,16,129,8,32
   661                        	.member	dataSize,48,16,8,16
   662                        	.eos
   663                        	.line	581
   664                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   665                        	.stag	_fx_main_loopvars,16,61
  Sat Jul 10 2021  1:15                                                Page 14


   666                        	.member	dummy,0,5,8,16
   667                        	.eos
   668                        	.stag	_fxMouseMessageData,64,62
   669                        	.member	button1,0,14,8,8
   670                        	.member	button2,8,14,8,8
   671                        	.member	button3,16,14,8,8
   672                        	.member	button4,24,14,8,8
   673                        	.member	x,32,16,8,16
   674                        	.member	y,48,16,8,16
   675                        	.eos
   676                        	.utag	marshalled_data,32,63
   677                        	.member	byteValue,0,14,11,8
   678                        	.member	verbValue,0,110,11,0,2
   679                        	.member	intValue,0,16,11,16
   680                        	.member	longValue,0,18,11,32
   681                        	.member	pointerValue,0,129,11,32
   682                        	.eos
   683                        	.stag	_fx_eventProcess,64,64
   684                        	.member	process,0,138,8,32,17
   685                        	.member	eventProc,32,641,8,32
   686                        	.eos
   687                        	.stag	_mouse_msg_state,184,65
   688                        	.member	lastEvent,0,18,8,32
   689                        	.member	buttonLeftDown,32,14,8,8
   690                        	.member	lastLeftDown,40,18,8,32
   691                        	.member	buttonRightDown,72,14,8,8
   692                        	.member	lastRightDown,80,18,8,32
   693                        	.member	buttonMiddleDown,112,14,8,8
   694                        	.member	lastMiddleDown,120,18,8,32
   695                        	.member	lastX,152,16,8,16
   696                        	.member	lastY,168,16,8,16
   697                        	.eos
   698                        	.stag	_fxos_eventmanager_vtable,192,66
   699                        	.member	EventQueue,0,138,8,32,4
   700                        	.member	Init,32,8833,8,32
   701                        	.member	Run,64,656,8,32
   702                        	.member	Configure,96,656,8,32
   703                        	.member	Query,128,656,8,32
   704                        	.member	Uninit,160,641,8,32
   705                        	.eos
   706                        	.stag	_k_clipboard_data,168,67
   707                        	.member	type,0,14,8,8
   708                        	.member	readable,8,110,8,0,16
   709                        	.member	data,136,129,8,32
   710                        	.eos
   711                        	.line	564
   712                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   713                        	.stag	_fx_spinner_ctx,48,68
   714                        	.member	index,0,5,8,16
   715                        	.member	spinner,16,142,8,32
   716                        	.eos
   717                        	.stag	_fx_console_ctx,1144,69
   718                        	.member	lineBufferIndex,0,5,8,16
   719                        	.member	lineBuffer,16,110,8,0,128
   720                        	.member	isShifted,1040,14,8,8
   721                        	.member	userData,1048,129,8,32
   722                        	.member	screenBuffer,1080,129,8,32
  Sat Jul 10 2021  1:15                                                Page 15


   723                        	.member	Reserved1,1112,129,8,32
   724                        	.eos
   725                        	.stag	_token,64,70
   726                        	.member	type,0,5,8,16
   727                        	.member	depth,16,16,8,16
   728                        	.member	text,32,142,8,32
   729                        	.eos
   730                        	.stag	_command_args,64,71
   731                        	.member	proc,0,656,8,32
   732                        	.member	tokens,32,138,8,32,2
   733                        	.eos
   734                        	.line	208
   735                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   736                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   737                        	.line	139
   738                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",24
   739                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   740                        	.line	114
   741                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   742                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
   744                        	.line	298
   745                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   746                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   747                        	.line	1010
   748                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   749                        	.stag	fake72_,4504,72
   750                        	.member	fs_type,0,14,8,8
   751                        	.member	pdrv,8,14,8,8
   752                        	.member	n_fats,16,14,8,8
   753                        	.member	wflag,24,14,8,8
   754                        	.member	fsi_flag,32,14,8,8
   755                        	.member	id,40,5,8,16
   756                        	.member	n_rootdir,56,5,8,16
   757                        	.member	csize,72,5,8,16
   758                        	.member	lfnbuf,88,144,8,32
   759                        	.member	last_clst,120,18,8,32
   760                        	.member	free_clst,152,18,8,32
   761                        	.member	n_fatent,184,18,8,32
   762                        	.member	fsize,216,18,8,32
   763                        	.member	volbase,248,18,8,32
   764                        	.member	fatbase,280,18,8,32
   765                        	.member	dirbase,312,18,8,32
   766                        	.member	database,344,18,8,32
   767                        	.member	winsect,376,18,8,32
   768                        	.member	win,408,110,8,0,512
   769                        	.eos
   770                        	.stag	fake73_,128,73
  Sat Jul 10 2021  1:15                                                Page 16


   771                        	.member	fs,0,138,8,32,72
   772                        	.member	id,32,5,8,16
   773                        	.member	attr,48,14,8,8
   774                        	.member	stat,56,14,8,8
   775                        	.member	sclust,64,18,8,32
   776                        	.member	objsize,96,18,8,32
   777                        	.eos
   778                        	.stag	fake74_,4400,74
   779                        	.member	obj,0,10,8,128,73
   780                        	.member	flag,128,14,8,8
   781                        	.member	err,136,14,8,8
   782                        	.member	fptr,144,18,8,32
   783                        	.member	clust,176,18,8,32
   784                        	.member	sect,208,18,8,32
   785                        	.member	dir_sect,240,18,8,32
   786                        	.member	dir_ptr,272,142,8,32
   787                        	.member	buf,304,110,8,0,512
   788                        	.eos
   789                        	.stag	fake75_,416,75
   790                        	.member	obj,0,10,8,128,73
   791                        	.member	dptr,128,18,8,32
   792                        	.member	clust,160,18,8,32
   793                        	.member	sect,192,18,8,32
   794                        	.member	dir,224,142,8,32
   795                        	.member	fn,256,110,8,0,12
   796                        	.member	blk_ofs,352,18,8,32
   797                        	.member	pat,384,142,8,32
   798                        	.eos
   799                        	.stag	fake76_,2224,76
   800                        	.member	fsize,0,18,8,32
   801                        	.member	fdate,32,5,8,16
   802                        	.member	ftime,48,5,8,16
   803                        	.member	fattrib,64,14,8,8
   804                        	.member	altname,72,110,8,0,13
   805                        	.member	fname,176,110,8,0,256
   806                        	.eos
   807                        	.stag	fake77_,80,77
   808                        	.member	fmt,0,14,8,8
   809                        	.member	n_fat,8,14,8,8
   810                        	.member	align,16,16,8,16
   811                        	.member	n_root,32,16,8,16
   812                        	.member	au_size,48,18,8,32
   813                        	.eos
   814                        	.line	429
   815                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",26
   816                        	.line	30
   817                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   818                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   819                        	.line	114
   820                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   821                        	.stag	_fx_api_call_table,8192,78
   822                        	.member	call_table,0,1121,8,32,256
   823                        	.eos
   824                        	.stag	_fx_zero_page,824,79
  Sat Jul 10 2021  1:15                                                Page 17


   825                        	.member	fxos_mouse_byte_0,0,14,8,8
   826                        	.member	fxos_mouse_byte_1,8,14,8,8
   827                        	.member	fxos_mouse_byte_2,16,14,8,8
   828                        	.member	fxos_mouse_byte_t,24,14,8,8
   829                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   830                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   831                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   832                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   833                        	.member	fxos_key_byte_0,64,14,8,8
   834                        	.member	fxos_key_byte_1,72,14,8,8
   835                        	.member	fxos_key_byte_2,80,14,8,8
   836                        	.member	fxos_mouse_ctl,88,14,8,8
   837                        	.member	fxos_mouse_index,96,14,8,8
   838                        	.member	fxos_mouse_status,104,14,8,8
   839                        	.member	fxos_mouse_dbg_1,112,18,8,32
   840                        	.member	fxos_mouse_dbg_2,144,18,8,32
   841                        	.member	fxos_mouse_dbg_3,176,18,8,32
   842                        	.member	fxos_vicky_byte_0,208,14,8,8
   843                        	.member	fxos_vicky_byte_1,216,14,8,8
   844                        	.member	fxos_vicky_byte_2,224,14,8,8
   845                        	.member	VersionMajor,232,16,8,16
   846                        	.member	VersionMinor,248,16,8,16
   847                        	.member	VersionRelease,264,16,8,16
   848                        	.member	topMemory,280,18,8,32
   849                        	.member	bottomMemory,312,18,8,32
   850                        	.member	availableMemory,344,18,8,32
   851                        	.member	availableMemoryK,376,18,8,32
   852                        	.member	availableHeapMemory,408,18,8,32
   853                        	.member	availableHeapMemoryK,440,18,8,32
   854                        	.member	fxos_console_row,472,16,8,16
   855                        	.member	fxos_console_col,488,16,8,16
   856                        	.member	executive,504,129,8,32
   857                        	.member	eventmanager,536,129,8,32
   858                        	.member	devicemanager,568,129,8,32
   859                        	.member	windowmanager,600,129,8,32
   860                        	.member	fxos_kernel_api,632,138,8,32,78
   861                        	.member	fxos_dos_api,664,138,8,32,78
   862                        	.member	fxos_gfx_api,696,138,8,32,78
   863                        	.member	fxos_gui_api,728,138,8,32,78
   864                        	.member	fxos_con_api,760,138,8,32,78
   865                        	.member	fxos_reserved_2_api,792,138,8,32,78
   866                        	.eos
   867                        	.stag	_fx_environment,96,80
   868                        	.member	variables,0,142,8,32
   869                        	.member	reserved1,32,5,8,16
   870                        	.member	reserved2,48,5,8,16
   871                        	.member	reserved3,64,5,8,16
   872                        	.member	reserved4,80,5,8,16
   873                        	.eos
   874                        	.stag	_debug_byte_bits,8,81
   875                        	.member	bit7,0,14,17,1
   876                        	.member	bit6,1,14,17,1
   877                        	.member	bit5,2,14,17,1
   878                        	.member	bit4,3,14,17,1
   879                        	.member	bit3,4,14,17,1
   880                        	.member	bit2,5,14,17,1
   881                        	.member	bit1,6,14,17,1
   882                        	.member	bit0,7,14,17,1
  Sat Jul 10 2021  1:15                                                Page 18


   883                        	.eos
   884                        	.stag	_k_segmentheader,160,82
   885                        	.member	version_major,0,14,8,8
   886                        	.member	version_minor,8,14,8,8
   887                        	.member	length,16,5,8,16
   888                        	.member	segment_start_addr,32,7,8,32
   889                        	.member	segment_end_addr,64,7,8,32
   890                        	.member	segment_size,96,7,8,32
   891                        	.member	main_entry_addr,128,7,8,32
   892                        	.eos
   893                        	.stag	_fx_device_driver,776,83
   894                        	.member	name,0,110,8,0,32
   895                        	.member	version,256,110,8,0,16
   896                        	.member	hmajor,384,110,8,0,8
   897                        	.member	hminor,448,110,8,0,8
   898                        	.member	type,512,14,8,8
   899                        	.member	designation,520,110,8,0,6
   900                        	.member	reserved_1,568,16,8,16
   901                        	.member	f_driver_irq,584,129,8,32
   902                        	.member	driver_context,616,129,8,32
   903                        	.member	f_driver_load,648,129,8,32
   904                        	.member	f_driver_read,680,129,8,32
   905                        	.member	f_driver_write,712,129,8,32
   906                        	.member	f_driver_unload,744,129,8,32
   907                        	.eos
   908                        	.stag	_fx_block_device_driver,808,84
   909                        	.member	name,0,110,8,0,32
   910                        	.member	version,256,110,8,0,16
   911                        	.member	hmajor,384,110,8,0,8
   912                        	.member	hminor,448,110,8,0,8
   913                        	.member	type,512,14,8,8
   914                        	.member	designation,520,110,8,0,6
   915                        	.member	reserved_1,568,16,8,16
   916                        	.member	f_driver_irq,584,129,8,32
   917                        	.member	driver_context,616,129,8,32
   918                        	.member	f_driver_load,648,129,8,32
   919                        	.member	f_driver_read,680,129,8,32
   920                        	.member	f_driver_write,712,129,8,32
   921                        	.member	f_driver_unload,744,129,8,32
   922                        	.member	f_driver_command,776,129,8,32
   923                        	.eos
   924                        	.line	400
   925                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirqV3.c",15
   926                        ;#include "fxfloppy.h"
   927                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.h",0
   928                        	.line	70
   929                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirqV3.c",16
   930                        ;#include "flpydsk.h"
   931                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.h",0
   932                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   933                        	.line	1010
   934                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.h",14
  Sat Jul 10 2021  1:15                                                Page 19


   935                        	.line	68
   936                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirqV3.c",17
   937                        ;#include "drivers/DRIVER.h"
   938                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers/DRIVER.h",0
   939                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   940                        	.line	30
   941                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers/DRIVER.h",5
   942                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",0
   943                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   944                        	.line	1010
   945                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",5
   946                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   947                        	.line	429
   948                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",6
   949                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\diskio.h",0
   950                        	.line	85
   951                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",7
   952                        	.stag	_fx_sd_direntry,256,85
   953                        	.member	filename,0,110,8,0,11
   954                        	.member	type,88,14,8,8
   955                        	.member	attrs,96,110,8,0,20
   956                        	.eos
   957                        	.stag	_fx_info,416,86
   958                        	.member	stgName,0,110,8,0,32
   959                        	.member	Reserved1,256,14,8,8
   960                        	.member	stgType,264,16,8,16
   961                        	.member	Reserved2,280,14,8,8
   962                        	.member	stgReserved,288,110,8,0,16
   963                        	.eos
   964                        	.stag	_fx_fileinfo,136,87
   965                        	.member	type,0,14,8,8
   966                        	.member	pFilename,8,142,8,32
   967                        	.member	lSize,40,18,8,32
   968                        	.member	lcreateDate,72,18,8,32
   969                        	.member	lchangeDate,104,18,8,32
   970                        	.eos
   971                        	.stag	_FX_FAT_DIR_INFO,256,88
   972                        	.member	DIR_Name,0,110,8,0,11
   973                        	.member	DIR_Attr,88,14,8,8
   974                        	.member	DIR_NTRes,96,14,8,8
   975                        	.member	DIR_CrtTimeTenth,104,14,8,8
   976                        	.member	DIR_CrtTime,112,16,8,16
   977                        	.member	DIR_CrtDate,128,16,8,16
   978                        	.member	DIR_LstAccDate,144,16,8,16
   979                        	.member	DIR_FstClusHI,160,16,8,16
   980                        	.member	DIR_WrtTime,176,16,8,16
   981                        	.member	DIR_WrtDate,192,16,8,16
  Sat Jul 10 2021  1:15                                                Page 20


   982                        	.member	DIR_FstClusLO,208,16,8,16
   983                        	.member	DIR_FileSize,224,18,8,32
   984                        	.eos
   985                        	.stag	fat_extBS_32,416,89
   986                        	.member	table_size_32,0,18,8,32
   987                        	.member	extended_flags,32,16,8,16
   988                        	.member	fat_version,48,16,8,16
   989                        	.member	root_cluster,64,18,8,32
   990                        	.member	fat_info,96,16,8,16
   991                        	.member	backup_BS_sector,112,16,8,16
   992                        	.member	reserved_0,128,110,8,0,12
   993                        	.member	drive_number,224,14,8,8
   994                        	.member	reserved_1,232,14,8,8
   995                        	.member	boot_signature,240,14,8,8
   996                        	.member	volume_id,248,16,8,16
   997                        	.member	volume_label,264,110,8,0,11
   998                        	.member	fat_type_label,352,110,8,0,8
   999                        	.eos
  1000                        	.stag	fat_extBS_16,192,90
  1001                        	.member	bios_drive_num,0,14,8,8
  1002                        	.member	reserved1,8,14,8,8
  1003                        	.member	boot_signature,16,14,8,8
  1004                        	.member	volume_id,24,16,8,16
  1005                        	.member	volume_label,40,110,8,0,11
  1006                        	.member	fat_type_label,128,110,8,0,8
  1007                        	.eos
  1008                        	.stag	fat_BS,688,91
  1009                        	.member	bootjmp,0,110,8,0,3
  1010                        	.member	oem_name,24,110,8,0,8
  1011                        	.member	bytes_per_sector,88,16,8,16
  1012                        	.member	sectors_per_cluster,104,14,8,8
  1013                        	.member	reserved_sector_count,112,16,8,16
  1014                        	.member	table_count,128,14,8,8
  1015                        	.member	root_entry_count,136,16,8,16
  1016                        	.member	total_sectors_16,152,16,8,16
  1017                        	.member	media_type,168,14,8,8
  1018                        	.member	table_size_16,176,16,8,16
  1019                        	.member	sectors_per_track,192,16,8,16
  1020                        	.member	head_side_count,208,16,8,16
  1021                        	.member	hidden_sector_count,224,16,8,16
  1022                        	.member	total_sectors_32,240,16,8,16
  1023                        	.member	extended_section,256,110,8,0,54
  1024                        	.eos
  1025                        	.stag	__FATBootSector,928,92
  1026                        	.member	bootjmp,0,110,8,0,3
  1027                        	.member	oem_name,24,110,8,0,8
  1028                        	.member	bytes_per_sector,88,16,8,16
  1029                        	.member	sectors_per_cluster,104,14,8,8
  1030                        	.member	reserved_sector_count,112,16,8,16
  1031                        	.member	fat_table_count,128,14,8,8
  1032                        	.member	root_entry_count,136,16,8,16
  1033                        	.member	total_sectors_16,152,16,8,16
  1034                        	.member	media_type,168,14,8,8
  1035                        	.member	sectors_per_fat,176,16,8,16
  1036                        	.member	sectors_per_track,192,16,8,16
  1037                        	.member	head_side_count,208,16,8,16
  1038                        	.member	hidden_sector_count,224,18,8,32
  1039                        	.member	total_sectors_32,256,18,8,32
  Sat Jul 10 2021  1:15                                                Page 21


  1040                        	.member	drive_number,288,14,8,8
  1041                        	.member	reserved1,296,14,8,8
  1042                        	.member	boot_sig,304,14,8,8
  1043                        	.member	vol_id,312,18,8,32
  1044                        	.member	vol_name,344,110,8,0,11
  1045                        	.member	file_system_type,432,110,8,0,8
  1046                        	.member	extended_section,496,110,8,0,54
  1047                        	.eos
  1048                        	.stag	__PARTITIONTABLE,128,93
  1049                        	.member	first_byte,0,14,8,8
  1050                        	.member	start_chs,8,110,8,0,3
  1051                        	.member	partition_type,32,14,8,8
  1052                        	.member	end_chs,40,110,8,0,3
  1053                        	.member	start_sector,64,18,8,32
  1054                        	.member	length_sectors,96,18,8,32
  1055                        	.eos
  1056                        	.stag	fake94_,4096,94
  1057                        	.member	jmp,0,110,8,0,3
  1058                        	.member	oem,24,110,8,0,8
  1059                        	.member	sector_size,88,15,8,16
  1060                        	.member	sectors_per_cluster,104,14,8,8
  1061                        	.member	reserved_sectors,112,15,8,16
  1062                        	.member	number_ok_dos_fats,128,14,8,8
  1063                        	.member	root_dir_entries,136,15,8,16
  1064                        	.member	total_sectors_short,152,15,8,16
  1065                        	.member	media_descriptor,168,14,8,8
  1066                        	.member	fat_size_sectors,176,15,8,16
  1067                        	.member	sectors_per_track,192,15,8,16
  1068                        	.member	number_ok_dos_heads,208,15,8,16
  1069                        	.member	hidden_sectors,224,18,8,32
  1070                        	.member	total_sectors_long,256,18,8,32
  1071                        	.member	drive_number,288,14,8,8
  1072                        	.member	current_head,296,14,8,8
  1073                        	.member	boot_signature,304,14,8,8
  1074                        	.member	volume_id,312,18,8,32
  1075                        	.member	volume_label,344,110,8,0,11
  1076                        	.member	fs_type,432,110,8,0,8
  1077                        	.member	boot_code,496,110,8,0,448
  1078                        	.member	boot_sector_signature,4080,15,8,16
  1079                        	.eos
  1080                        	.stag	__FAT16ENTRY,256,95
  1081                        	.member	filename,0,110,8,0,8
  1082                        	.member	ext,64,110,8,0,3
  1083                        	.member	attributes,88,14,8,8
  1084                        	.member	reserved,96,110,8,0,10
  1085                        	.member	modify_time,176,16,8,16
  1086                        	.member	modify_date,192,16,8,16
  1087                        	.member	starting_cluster,208,16,8,16
  1088                        	.member	file_size,224,18,8,32
  1089                        	.eos
  1090                        	.stag	__FAT16ENTRYLONG,288,96
  1091                        	.member	filename,0,110,8,0,8
  1092                        	.member	ext,64,110,8,0,3
  1093                        	.member	attributes,88,14,8,8
  1094                        	.member	reserved,96,110,8,0,10
  1095                        	.member	modify_time,176,16,8,16
  1096                        	.member	modify_date,192,16,8,16
  1097                        	.member	starting_cluster,208,16,8,16
  Sat Jul 10 2021  1:15                                                Page 22


  1098                        	.member	file_size,224,18,8,32
  1099                        	.member	plongfileName,256,142,8,32
  1100                        	.eos
  1101                        	.stag	_LongFileName,256,97
  1102                        	.member	sequenceNo,0,14,8,8
  1103                        	.member	fileName_Part1,8,110,8,0,10
  1104                        	.member	fileattribute,88,14,8,8
  1105                        	.member	type,96,14,8,8
  1106                        	.member	checksum,104,14,8,8
  1107                        	.member	fileName_Part2,112,110,8,0,12
  1108                        	.member	fstclusLO,208,5,8,16
  1109                        	.member	fileName_Part3,224,110,8,0,4
  1110                        	.eos
  1111                        	.stag	_IDSECTOR,2048,98
  1112                        	.member	wGenConfig,0,16,8,16
  1113                        	.member	wNumCyls,16,16,8,16
  1114                        	.member	wReserved,32,16,8,16
  1115                        	.member	wNumHeads,48,16,8,16
  1116                        	.member	wBytesPerTrack,64,16,8,16
  1117                        	.member	wBytesPerSector,80,16,8,16
  1118                        	.member	wSectorsPerTrack,96,16,8,16
  1119                        	.member	wVendorUnique,112,112,8,0,3
  1120                        	.member	sSerialNumber,160,110,8,0,20
  1121                        	.member	wBufferType,320,16,8,16
  1122                        	.member	wBufferSize,336,16,8,16
  1123                        	.member	wECCSize,352,16,8,16
  1124                        	.member	sFirmwareRev,368,110,8,0,8
  1125                        	.member	sModelNumber,432,110,8,0,40
  1126                        	.member	wMoreVendorUnique,752,16,8,16
  1127                        	.member	wDoubleWordIO,768,16,8,16
  1128                        	.member	wCapabilities,784,16,8,16
  1129                        	.member	wReserved1,800,16,8,16
  1130                        	.member	wPIOTiming,816,16,8,16
  1131                        	.member	wDMATiming,832,16,8,16
  1132                        	.member	wBS,848,16,8,16
  1133                        	.member	wNumCurrentCyls,864,16,8,16
  1134                        	.member	wNumCurrentHeads,880,16,8,16
  1135                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1136                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1137                        	.member	wMultSectorStuff,944,16,8,16
  1138                        	.member	ulTotalAddressableSectors,960,18,8,32
  1139                        	.member	wSingleWordDMA,992,16,8,16
  1140                        	.member	wMultiWordDMA,1008,16,8,16
  1141                        	.member	bReserved,1024,110,8,0,128
  1142                        	.eos
  1143                        	.stag	fake99_,16,99
  1144                        	.member	Reserved1,0,16,17,1
  1145                        	.member	Retired3,1,16,17,1
  1146                        	.member	ResponseIncomplete,2,16,17,1
  1147                        	.member	Retired2,3,16,17,3
  1148                        	.member	FixedDevice,6,16,17,1
  1149                        	.member	RemovableMedia,7,16,17,1
  1150                        	.member	Retired1,8,16,17,7
  1151                        	.member	DeviceType,15,16,17,1
  1152                        	.eos
  1153                        	.stag	fake100_,16,100
  1154                        	.member	FeatureSupported,0,16,17,1
  1155                        	.member	Reserved,1,16,17,15
  Sat Jul 10 2021  1:15                                                Page 23


  1156                        	.eos
  1157                        	.stag	fake101_,32,101
  1158                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1159                        	.member	ReservedByte49,2,14,17,6
  1160                        	.member	DmaSupported,8,14,17,1
  1161                        	.member	LbaSupported,9,14,17,1
  1162                        	.member	IordyDisable,10,14,17,1
  1163                        	.member	IordySupported,11,14,17,1
  1164                        	.member	Reserved1,12,14,17,1
  1165                        	.member	StandybyTimerSupport,13,14,17,1
  1166                        	.member	Reserved2,14,14,17,2
  1167                        	.member	ReservedWord50,16,16,8,16
  1168                        	.eos
  1169                        	.stag	fake102_,16,102
  1170                        	.member	ZonedCapabilities,0,16,17,2
  1171                        	.member	NonVolatileWriteCache,2,16,17,1
  1172                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1173                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1174                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1175                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1176                        	.member	IEEE1667,7,16,17,1
  1177                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1178                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1179                        	.member	WriteBufferDmaSupported,10,16,17,1
  1180                        	.member	ReadBufferDmaSupported,11,16,17,1
  1181                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  1182                        	.member	LPSAERCSupported,13,16,17,1
  1183                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1184                        	.member	CFastSpecSupported,15,16,17,1
  1185                        	.eos
  1186                        	.stag	fake103_,32,103
  1187                        	.member	Reserved0,0,16,17,1
  1188                        	.member	SataGen1,1,16,17,1
  1189                        	.member	SataGen2,2,16,17,1
  1190                        	.member	SataGen3,3,16,17,1
  1191                        	.member	Reserved1,4,16,17,4
  1192                        	.member	NCQ,8,16,17,1
  1193                        	.member	HIPM,9,16,17,1
  1194                        	.member	PhyEvents,10,16,17,1
  1195                        	.member	NcqUnload,11,16,17,1
  1196                        	.member	NcqPriority,12,16,17,1
  1197                        	.member	HostAutoPS,13,16,17,1
  1198                        	.member	DeviceAutoPS,14,16,17,1
  1199                        	.member	ReadLogDMA,15,16,17,1
  1200                        	.member	Reserved2,16,16,17,1
  1201                        	.member	CurrentSpeed,17,16,17,3
  1202                        	.member	NcqStreaming,20,16,17,1
  1203                        	.member	NcqQueueMgmt,21,16,17,1
  1204                        	.member	NcqReceiveSend,22,16,17,1
  1205                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1206                        	.member	Reserved3,24,16,17,8
  1207                        	.eos
  1208                        	.stag	fake104_,16,104
  Sat Jul 10 2021  1:15                                                Page 24


  1209                        	.member	Reserved0,0,16,17,1
  1210                        	.member	NonZeroOffsets,1,16,17,1
  1211                        	.member	DmaSetupAutoActivate,2,16,17,1
  1212                        	.member	DIPM,3,16,17,1
  1213                        	.member	InOrderData,4,16,17,1
  1214                        	.member	HardwareFeatureControl,5,16,17,1
  1215                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1216                        	.member	NCQAutosense,7,16,17,1
  1217                        	.member	DEVSLP,8,16,17,1
  1218                        	.member	HybridInformation,9,16,17,1
  1219                        	.member	Reserved1,10,16,17,6
  1220                        	.eos
  1221                        	.stag	fake105_,16,105
  1222                        	.member	Reserved0,0,16,17,1
  1223                        	.member	NonZeroOffsets,1,16,17,1
  1224                        	.member	DmaSetupAutoActivate,2,16,17,1
  1225                        	.member	DIPM,3,16,17,1
  1226                        	.member	InOrderData,4,16,17,1
  1227                        	.member	HardwareFeatureControl,5,16,17,1
  1228                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1229                        	.member	DeviceAutoPS,7,16,17,1
  1230                        	.member	DEVSLP,8,16,17,1
  1231                        	.member	HybridInformation,9,16,17,1
  1232                        	.member	Reserved1,10,16,17,6
  1233                        	.eos
  1234                        	.stag	fake106_,48,106
  1235                        	.member	SmartCommands,0,16,17,1
  1236                        	.member	SecurityMode,1,16,17,1
  1237                        	.member	RemovableMediaFeature,2,16,17,1
  1238                        	.member	PowerManagement,3,16,17,1
  1239                        	.member	Reserved1,4,16,17,1
  1240                        	.member	WriteCache,5,16,17,1
  1241                        	.member	LookAhead,6,16,17,1
  1242                        	.member	ReleaseInterrupt,7,16,17,1
  1243                        	.member	ServiceInterrupt,8,16,17,1
  1244                        	.member	DeviceReset,9,16,17,1
  1245                        	.member	HostProtectedArea,10,16,17,1
  1246                        	.member	Obsolete1,11,16,17,1
  1247                        	.member	WriteBuffer,12,16,17,1
  1248                        	.member	ReadBuffer,13,16,17,1
  1249                        	.member	Nop,14,16,17,1
  1250                        	.member	Obsolete2,15,16,17,1
  1251                        	.member	DownloadMicrocode,16,16,17,1
  1252                        	.member	DmaQueued,17,16,17,1
  1253                        	.member	Cfa,18,16,17,1
  1254                        	.member	AdvancedPm,19,16,17,1
  1255                        	.member	Msn,20,16,17,1
  1256                        	.member	PowerUpInStandby,21,16,17,1
  1257                        	.member	ManualPowerUp,22,16,17,1
  1258                        	.member	Reserved2,23,16,17,1
  1259                        	.member	SetMax,24,16,17,1
  1260                        	.member	Acoustics,25,16,17,1
  1261                        	.member	BigLba,26,16,17,1
  1262                        	.member	DeviceConfigOverlay,27,16,17,1
  1263                        	.member	FlushCache,28,16,17,1
  1264                        	.member	FlushCacheExt,29,16,17,1
  1265                        	.member	WordValid83,30,16,17,2
  1266                        	.member	SmartErrorLog,32,16,17,1
  Sat Jul 10 2021  1:15                                                Page 25


  1267                        	.member	SmartSelfTest,33,16,17,1
  1268                        	.member	MediaSerialNumber,34,16,17,1
  1269                        	.member	MediaCardPassThrough,35,16,17,1
  1270                        	.member	StreamingFeature,36,16,17,1
  1271                        	.member	GpLogging,37,16,17,1
  1272                        	.member	WriteFua,38,16,17,1
  1273                        	.member	WriteQueuedFua,39,16,17,1
  1274                        	.member	WWN64Bit,40,16,17,1
  1275                        	.member	URGReadStream,41,16,17,1
  1276                        	.member	URGWriteStream,42,16,17,1
  1277                        	.member	ReservedForTechReport,43,16,17,2
  1278                        	.member	IdleWithUnloadFeature,45,16,17,1
  1279                        	.member	WordValid,46,16,17,2
  1280                        	.eos
  1281                        	.stag	fake107_,48,107
  1282                        	.member	SmartCommands,0,16,17,1
  1283                        	.member	SecurityMode,1,16,17,1
  1284                        	.member	RemovableMediaFeature,2,16,17,1
  1285                        	.member	PowerManagement,3,16,17,1
  1286                        	.member	Reserved1,4,16,17,1
  1287                        	.member	WriteCache,5,16,17,1
  1288                        	.member	LookAhead,6,16,17,1
  1289                        	.member	ReleaseInterrupt,7,16,17,1
  1290                        	.member	ServiceInterrupt,8,16,17,1
  1291                        	.member	DeviceReset,9,16,17,1
  1292                        	.member	HostProtectedArea,10,16,17,1
  1293                        	.member	Obsolete1,11,16,17,1
  1294                        	.member	WriteBuffer,12,16,17,1
  1295                        	.member	ReadBuffer,13,16,17,1
  1296                        	.member	Nop,14,16,17,1
  1297                        	.member	Obsolete2,15,16,17,1
  1298                        	.member	DownloadMicrocode,16,16,17,1
  1299                        	.member	DmaQueued,17,16,17,1
  1300                        	.member	Cfa,18,16,17,1
  1301                        	.member	AdvancedPm,19,16,17,1
  1302                        	.member	Msn,20,16,17,1
  1303                        	.member	PowerUpInStandby,21,16,17,1
  1304                        	.member	ManualPowerUp,22,16,17,1
  1305                        	.member	Reserved2,23,16,17,1
  1306                        	.member	SetMax,24,16,17,1
  1307                        	.member	Acoustics,25,16,17,1
  1308                        	.member	BigLba,26,16,17,1
  1309                        	.member	DeviceConfigOverlay,27,16,17,1
  1310                        	.member	FlushCache,28,16,17,1
  1311                        	.member	FlushCacheExt,29,16,17,1
  1312                        	.member	Resrved3,30,16,17,1
  1313                        	.member	Words119_120Valid,31,16,17,1
  1314                        	.member	SmartErrorLog,32,16,17,1
  1315                        	.member	SmartSelfTest,33,16,17,1
  1316                        	.member	MediaSerialNumber,34,16,17,1
  1317                        	.member	MediaCardPassThrough,35,16,17,1
  1318                        	.member	StreamingFeature,36,16,17,1
  1319                        	.member	GpLogging,37,16,17,1
  1320                        	.member	WriteFua,38,16,17,1
  1321                        	.member	WriteQueuedFua,39,16,17,1
  1322                        	.member	WWN64Bit,40,16,17,1
  1323                        	.member	URGReadStream,41,16,17,1
  1324                        	.member	URGWriteStream,42,16,17,1
  Sat Jul 10 2021  1:15                                                Page 26


  1325                        	.member	ReservedForTechReport,43,16,17,2
  1326                        	.member	IdleWithUnloadFeature,45,16,17,1
  1327                        	.member	Reserved4,46,16,17,2
  1328                        	.eos
  1329                        	.stag	fake108_,16,108
  1330                        	.member	TimeRequired,0,16,17,15
  1331                        	.member	ExtendedTimeReported,15,16,17,1
  1332                        	.eos
  1333                        	.stag	fake109_,16,109
  1334                        	.member	TimeRequired,0,16,17,15
  1335                        	.member	ExtendedTimeReported,15,16,17,1
  1336                        	.eos
  1337                        	.stag	fake110_,16,110
  1338                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1339                        	.member	Reserved0,4,16,17,8
  1340                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1341                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1342                        	.member	Reserved1,14,16,17,2
  1343                        	.eos
  1344                        	.stag	fake111_,16,111
  1345                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1346                        	.member	WriteReadVerify,1,16,17,1
  1347                        	.member	WriteUncorrectableExt,2,16,17,1
  1348                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1349                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1350                        	.member	FreefallControl,5,16,17,1
  1351                        	.member	SenseDataReporting,6,16,17,1
  1352                        	.member	ExtendedPowerConditions,7,16,17,1
  1353                        	.member	Reserved0,8,16,17,6
  1354                        	.member	WordValid,14,16,17,2
  1355                        	.eos
  1356                        	.stag	fake112_,16,112
  1357                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1358                        	.member	WriteReadVerify,1,16,17,1
  1359                        	.member	WriteUncorrectableExt,2,16,17,1
  1360                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1361                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1362                        	.member	FreefallControl,5,16,17,1
  1363                        	.member	SenseDataReporting,6,16,17,1
  1364                        	.member	ExtendedPowerConditions,7,16,17,1
  1365                        	.member	Reserved0,8,16,17,6
  1366                        	.member	Reserved1,14,16,17,2
  1367                        	.eos
  1368                        	.stag	fake113_,16,113
  1369                        	.member	SecuritySupported,0,16,17,1
  1370                        	.member	SecurityEnabled,1,16,17,1
  1371                        	.member	SecurityLocked,2,16,17,1
  1372                        	.member	SecurityFrozen,3,16,17,1
  1373                        	.member	SecurityCountExpired,4,16,17,1
  1374                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1375                        	.member	Reserved0,6,16,17,2
  1376                        	.member	SecurityLevel,8,16,17,1
  1377                        	.member	Reserved1,9,16,17,7
  1378                        	.eos
  1379                        	.stag	fake114_,16,114
  Sat Jul 10 2021  1:15                                                Page 27


  1380                        	.member	MaximumCurrentInMA,0,16,17,12
  1381                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1382                        	.member	CfaPowerMode1Required,13,16,17,1
  1383                        	.member	Reserved0,14,16,17,1
  1384                        	.member	Word160Supported,15,16,17,1
  1385                        	.eos
  1386                        	.stag	fake115_,16,115
  1387                        	.member	SupportsTrim,0,16,17,1
  1388                        	.member	Reserved0,1,16,17,15
  1389                        	.eos
  1390                        	.stag	fake116_,16,116
  1391                        	.member	Supported,0,16,17,1
  1392                        	.member	Reserved0,1,16,17,1
  1393                        	.member	WriteSameSuported,2,16,17,1
  1394                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1395                        	.member	FeatureControlSuported,4,16,17,1
  1396                        	.member	DataTablesSuported,5,16,17,1
  1397                        	.member	Reserved1,6,16,17,6
  1398                        	.member	VendorSpecific,12,16,17,4
  1399                        	.eos
  1400                        	.stag	fake117_,16,117
  1401                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1402                        	.member	Word209Supported,14,16,17,1
  1403                        	.member	Reserved0,15,16,17,1
  1404                        	.eos
  1405                        	.stag	fake118_,16,118
  1406                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1407                        	.member	Reserved0,1,16,17,3
  1408                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  1409                        	.member	Reserved1,5,16,17,3
  1410                        	.member	NVCachePowerModeVersion,8,16,17,4
  1411                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1412                        	.eos
  1413                        	.stag	fake119_,16,119
  1414                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1415                        	.member	Reserved,8,14,8,8
  1416                        	.eos
  1417                        	.stag	fake120_,16,120
  1418                        	.member	MajorVersion,0,16,17,12
  1419                        	.member	TransportType,12,16,17,4
  1420                        	.eos
  1421                        	.stag	_IDENTIFY_DEVICE_DATA,4096,121
  1422                        	.member	GeneralConfiguration,0,10,8,16,99
  1423                        	.member	NumCylinders,16,16,8,16
  1424                        	.member	SpecificConfiguration,32,16,8,16
  1425                        	.member	NumHeads,48,16,8,16
  1426                        	.member	Retired1Bytes,64,110,8,0,4
  1427                        	.member	NumSectorsPerTrack,96,16,8,16
  1428                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1429                        	.member	SerialNumber,160,110,8,0,20
  1430                        	.member	Retired2,320,112,8,0,2
  1431                        	.member	Obsolete1,352,16,8,16
  1432                        	.member	FirmwareRevision,368,110,8,0,8
  1433                        	.member	ModelNumber,432,110,8,0,40
  1434                        	.member	MaximumBlockTransfer,752,14,8,8
  1435                        	.member	VendorUnique2,760,14,8,8
  Sat Jul 10 2021  1:15                                                Page 28


  1436                        	.member	TrustedComputing,768,10,8,16,100
  1437                        	.member	Capabilities,784,10,8,32,101
  1438                        	.member	ObsoleteWords51,816,112,8,0,2
  1439                        	.member	TranslationFieldsValid,848,16,17,3
  1440                        	.member	Reserved3,851,16,17,5
  1441                        	.member	FreeFallControlSensitivity,856,16,17,8
  1442                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1443                        	.member	NumberOfCurrentHeads,880,16,8,16
  1444                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1445                        	.member	CurrentSectorCapacity,912,18,8,32
  1446                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1447                        	.member	MultiSectorSettingValid,952,14,17,1
  1448                        	.member	ReservedByte59,953,14,17,3
  1449                        	.member	SanitizeFeatureSupported,956,14,17,1
  1450                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1451                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1452                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1453                        	.member	UserAddressableSectors,960,18,8,32
  1454                        	.member	ObsoleteWord62,992,16,8,16
  1455                        	.member	MultiWordDMASupport,1008,16,17,8
  1456                        	.member	MultiWordDMAActive,1016,16,17,8
  1457                        	.member	AdvancedPIOModes,1024,16,17,8
  1458                        	.member	ReservedByte64,1032,16,17,8
  1459                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1460                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1461                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1462                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1463                        	.member	AdditionalSupported,1104,10,8,16,102
  1464                        	.member	ReservedWords70,1120,112,8,0,5
  1465                        	.member	QueueDepth,1200,16,17,5
  1466                        	.member	ReservedWord75,1205,16,17,11
  1467                        	.member	SerialAtaCapabilities,1216,10,8,32,103
  1468                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    104
  1469                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,10
                    5
  1470                        	.member	MajorRevision,1280,16,8,16
  1471                        	.member	MinorRevision,1296,16,8,16
  1472                        	.member	CommandSetSupport,1312,10,8,48,106
  1473                        	.member	CommandSetActive,1360,10,8,48,107
  1474                        	.member	UltraDMASupport,1408,16,17,8
  1475                        	.member	UltraDMAActive,1416,16,17,8
  1476                        	.member	NormalSecurityEraseUnit,1424,10,8,16,108
  1477                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
                    09
  1478                        	.member	CurrentAPMLevel,1456,16,17,8
  1479                        	.member	ReservedWord91,1464,16,17,8
  1480                        	.member	MasterPasswordID,1472,16,8,16
  1481                        	.member	HardwareResetResult,1488,16,8,16
  1482                        	.member	CurrentAcousticValue,1504,16,17,8
  1483                        	.member	RecommendedAcousticValue,1512,16,17,8
  1484                        	.member	StreamMinRequestSize,1520,16,8,16
  1485                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1486                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1487                        	.member	StreamingPerfGranularity,1568,18,8,32
  Sat Jul 10 2021  1:15                                                Page 29


  1488                        	.member	Max48BitLBA,1600,114,8,0,2
  1489                        	.member	StreamingTransferTime,1664,16,8,16
  1490                        	.member	DsmCap,1680,16,8,16
  1491                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    10
  1492                        	.member	InterSeekDelay,1712,16,8,16
  1493                        	.member	WorldWideName,1728,112,8,0,4
  1494                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1495                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1496                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1497                        	.member	CommandSetSupportExt,1904,10,8,16,111
  1498                        	.member	CommandSetActiveExt,1920,10,8,16,112
  1499                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1500                        	.member	MsnSupport,2032,16,17,2
  1501                        	.member	ReservedWord127,2034,16,17,14
  1502                        	.member	SecurityStatus,2048,10,8,16,113
  1503                        	.member	ReservedWord129,2064,112,8,0,31
  1504                        	.member	CfaPowerMode1,2560,10,8,16,114
  1505                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1506                        	.member	NominalFormFactor,2688,16,17,4
  1507                        	.member	ReservedWord168,2692,16,17,12
  1508                        	.member	DataSetManagementFeature,2704,10,8,16,11
                    5
  1509                        	.member	AdditionalProductID,2720,112,8,0,4
  1510                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1511                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1512                        	.member	SCTCommandTransport,3296,10,8,16,116
  1513                        	.member	ReservedWord207,3312,112,8,0,2
  1514                        	.member	BlockAlignment,3344,10,8,16,117
  1515                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1516                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1517                        	.member	NVCacheCapabilities,3424,10,8,16,118
  1518                        	.member	NVCacheSizeLSW,3440,16,8,16
  1519                        	.member	NVCacheSizeMSW,3456,16,8,16
  1520                        	.member	NominalMediaRotationRate,3472,16,8,16
  1521                        	.member	ReservedWord218,3488,16,8,16
  1522                        	.member	NVCacheOptions,3504,10,8,16,119
  1523                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1524                        	.member	ReservedWord220,3528,16,17,8
  1525                        	.member	ReservedWord221,3536,16,8,16
  1526                        	.member	TransportMajorVersion,3552,10,8,16,120
  1527                        	.member	TransportMinorVersion,3568,16,8,16
  1528                        	.member	ReservedWord224,3584,112,8,0,6
  1529                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1530                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1531                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1532                        	.member	ReservedWord236,3776,112,8,0,19
  1533                        	.member	Signature,4080,16,17,8
  1534                        	.member	CheckSum,4088,16,17,8
  Sat Jul 10 2021  1:15                                                Page 30


  1535                        	.eos
  1536                        	.stag	_FXDosDevice,5744,122
  1537                        	.member	type,0,14,8,8
  1538                        	.member	initialized,8,14,8,8
  1539                        	.member	devdata,16,129,8,32
  1540                        	.member	devstatus,48,14,8,8
  1541                        	.member	bootSector,56,10,8,928,92
  1542                        	.member	partitionTable,984,10,8,128,93
  1543                        	.member	fileAllocationTable,1112,110,8,0,512
  1544                        	.member	bsOffset,5208,18,8,32
  1545                        	.member	rootDirSectors,5240,18,8,32
  1546                        	.member	root_entry_count,5272,5,8,16
  1547                        	.member	rootEntriesPerPage,5288,5,8,16
  1548                        	.member	sectors_per_cluster,5304,5,8,16
  1549                        	.member	firstDataSector,5320,18,8,32
  1550                        	.member	fatTableOffset,5352,18,8,32
  1551                        	.member	volume_name,5384,110,8,0,12
  1552                        	.member	root_volume_name,5480,110,8,0,12
  1553                        	.member	errorCode,5576,14,8,8
  1554                        	.member	pfInit,5584,641,8,32
  1555                        	.member	pfReset,5616,641,8,32
  1556                        	.member	pfUninit,5648,641,8,32
  1557                        	.member	pfReader,5680,654,8,32
  1558                        	.member	pfWriter,5712,654,8,32
  1559                        	.eos
  1560                        	.utag	item,32,123
  1561                        	.member	dir,0,138,11,32,75
  1562                        	.member	file,0,138,11,32,74
  1563                        	.member	fileInfo,0,138,11,32,76
  1564                        	.eos
  1565                        	.stag	_dos_handle,80,124
  1566                        	.member	fs,0,138,8,32,72
  1567                        	.member	fr,32,5,8,16
  1568                        	.member	path,48,142,8,32
  1569                        	.eos
  1570                        	.line	800
  1571                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers/DRIVER.h",6
  1572                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
  1573                        	.line	105
  1574                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers/DRIVER.h",7
  1575                        	.line	48
  1576                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirqV3.c",18
  1577                        ;
  1578                        ;//static int  		 _irq_keyboardBuffer[21]
                     = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  1579                        ;//static char 		 _irq_keyboardBufferInde
                    x = 0;
  1580                        ;//static unsigned char _irq_currentKeyPress = 0;
  1581                        ;int			 _irq_keyboardTimeout = 
                    0;
  1582                        	data
  1583                        	xdef	~~_irq_keyboardTimeout
  1584                        ~~_irq_keyboardTimeout:
  1585 00:0000: 00 00        	dw	$0
  Sat Jul 10 2021  1:15                                                Page 31


  1586 00:0002:              	ends
  1587                        ;//static unsigned char _irq_statusReg 	  = 0x00
                    ;
  1588                        ;
  1589                        ;
  1590                        ;
  1591                        ;//static CHAR major[2] = {0,0};
  1592                        ;//static CHAR minor[2] = {0,0};
  1593                        ;static PFX_DEVICE_DRIVER _driver_Keyboard = NULL;
  1594                        	data
  1595                        ~~_driver_Keyboard:
  1596 00:0002: 00 00 00 00  	dl	$0
  1597 00:0006:              	ends
  1598                        ;
  1599                        ;
  1600                        ;
  1601                        ;static KEYSTATE _irq_key_state_machine = {0,0,0,0
                    ,0,0,0,0,0,0};
  1602                        	data
  1603                        ~~_irq_key_state_machine:
  1604 00:0006: 00 00 00 00  	db	$0,$0,$0,$0,$0,$0,$0
       00:000A: 00 00 00 
  1605 00:000D: 00 00        	dw	$0
  1606 00:000F: 00 00 00 00  	dl	$0
  1607 00:0013: 00           	db	$0
  1608 00:0014:              	ends
  1609                        ;
  1610                        ;BYTE mouse_data_ready = 0;
  1611                        	data
  1612                        	xdef	~~mouse_data_ready
  1613                        ~~mouse_data_ready:
  1614 00:0014: 00           	db	$0
  1615 00:0015:              	ends
  1616                        ;BYTE mouse_data[3] = {0xFF,0xFF,0xFF};
  1617                        	data
  1618                        	xdef	~~mouse_data
  1619                        ~~mouse_data:
  1620 00:0015: FF FF FF     	db	$FF,$FF,$FF
  1621 00:0018:              	ends
  1622                        ;BYTE mouse_cycle=0;     //unsigned char
  1623                        	data
  1624                        	xdef	~~mouse_cycle
  1625                        ~~mouse_cycle:
  1626 00:0018: 00           	db	$0
  1627 00:0019:              	ends
  1628                        ;BOOL mouse_discard = FALSE;
  1629                        	data
  1630                        	xdef	~~mouse_discard
  1631                        ~~mouse_discard:
  1632 00:0019: 00           	db	$0
  1633 00:001A:              	ends
  1634                        ;ULONG mouse_irq = 0L;
  1635                        	data
  1636                        	xdef	~~mouse_irq
  1637                        ~~mouse_irq:
  1638 00:001A: 00 00 00 00  	dl	$0
  1639 00:001E:              	ends
  1640                        ;
  Sat Jul 10 2021  1:15                                                Page 32


  1641                        ;PIPCPORT debugport =  NULL;
  1642                        	data
  1643                        	xdef	~~debugport
  1644                        ~~debugport:
  1645 00:001E: 00 00 00 00  	dl	$0
  1646 00:0022:              	ends
  1647                        ;static PIPCPORT debugport2 =  NULL;
  1648                        	data
  1649                        ~~debugport2:
  1650 00:0022: 00 00 00 00  	dl	$0
  1651 00:0026:              	ends
  1652                        ;PIPCPORT kbport =  NULL;
  1653                        	data
  1654                        	xdef	~~kbport
  1655                        ~~kbport:
  1656 00:0026: 00 00 00 00  	dl	$0
  1657 00:002A:              	ends
  1658                        ;PIPCPORT mouseport =  NULL;
  1659                        	data
  1660                        	xdef	~~mouseport
  1661                        ~~mouseport:
  1662 00:002A: 00 00 00 00  	dl	$0
  1663 00:002E:              	ends
  1664                        ;
  1665                        ;//static unsigned char  floppyBuffer[512];
  1666                        ;//extern UINT  floppybufferIndex;
  1667                        ;//extern UCHAR floppybuffer[512];
  1668                        ;
  1669                        ;
  1670                        ;static LONG 		 _irq_ktick = 0;
  1671                        	data
  1672                        ~~_irq_ktick:
  1673 00:002E: 00 00 00 00  	dl	$0
  1674 00:0032:              	ends
  1675                        ;//static UCHAR		 _k_last_scancode = 0;
  1676                        ;static ULONG		 _k_default_arg = 0;
  1677                        	data
  1678                        ~~_k_default_arg:
  1679 00:0032: 00 00 00 00  	dl	$0
  1680 00:0036:              	ends
  1681                        ;
  1682                        ;//static int  scirq0 = 0;
  1683                        ;//static char irqspinner[] = {'|','/','-','\\'};
  1684                        ;
  1685                        ;char boxtop[]    = {0xD6, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xB7, 0x00};
  1686                        	data
  1687                        	xdef	~~boxtop
  1688                        ~~boxtop:
  1689 00:0036: D6 C4 C4 C4  	db	$D6,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:003A: C4 C4 C4 C4 
       00:003E: C4 C4 
  Sat Jul 10 2021  1:15                                                Page 33


  1690 00:0040: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0044: C4 C4 C4 C4 
       00:0048: C4 C4 
  1691 00:004A: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:004E: C4 C4 C4 C4 
       00:0052: C4 C4 
  1692 00:0054: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0058: C4 C4 C4 C4 
       00:005C: C4 C4 
  1693 00:005E: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0062: C4 C4 C4 C4 
       00:0066: C4 C4 
  1694 00:0068: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:006C: C4 C4 C4 C4 
       00:0070: C4 C4 
  1695 00:0072: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$B7
       00:0076: C4 C4 C4 C4 
       00:007A: C4 B7 
  1696 00:007C: 00           	db	$0
  1697 00:007D:              	ends
  1698                        ;char boxbottom[] = {0xD3, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xBD, 0x00};
  1699                        	data
  1700                        	xdef	~~boxbottom
  1701                        ~~boxbottom:
  1702 00:007D: D3 C4 C4 C4  	db	$D3,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0081: C4 C4 C4 C4 
       00:0085: C4 C4 
  1703 00:0087: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:008B: C4 C4 C4 C4 
       00:008F: C4 C4 
  1704 00:0091: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0095: C4 C4 C4 C4 
       00:0099: C4 C4 
  1705 00:009B: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:009F: C4 C4 C4 C4 
       00:00A3: C4 C4 
  1706 00:00A5: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:00A9: C4 C4 C4 C4 
       00:00AD: C4 C4 
  1707 00:00AF: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:00B3: C4 C4 C4 C4 
       00:00B7: C4 C4 
  1708 00:00B9: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$BD
       00:00BD: C4 C4 C4 C4 
       00:00C1: C4 BD 
  1709 00:00C3: 00           	db	$0
  1710 00:00C4:              	ends
  1711                        ;char boxside[]    = {0xBA, 0x00};
  1712                        	data
  1713                        	xdef	~~boxside
  1714                        ~~boxside:
  Sat Jul 10 2021  1:15                                                Page 34


  1715 00:00C4: BA 00        	db	$BA,$0
  1716 00:00C6:              	ends
  1717                        ;
  1718                        ;//#define KEYBOARD_TIMEOUT (5)
  1719                        ;#define KEYBOARD_TIMEOUT (50)
  1720                        ;
  1721                        ;#define KTICK_MAX		 (1)
  1722                        ;
  1723                        ;static BOOL _k_extendedKeyMode 	= FALSE;
  1724                        	data
  1725                        ~~_k_extendedKeyMode:
  1726 00:00C6: 00           	db	$0
  1727 00:00C7:              	ends
  1728                        ;static BOOL _k_shiftKeyMode 	= FALSE;
  1729                        	data
  1730                        ~~_k_shiftKeyMode:
  1731 00:00C7: 00           	db	$0
  1732 00:00C8:              	ends
  1733                        ;
  1734                        ;extern BOOL irq_signaled;
  1735                        ;
  1736                        ;extern ULONG _k_exec_context;
  1737                        ;extern ULONG _k_exec_error;
  1738                        ;extern UCHAR _k_exec_message[64];
  1739                        ;
  1740                        ;//static ULONG _pseudo_timer = -1;
  1741                        ;ULONG _pseudo_timer = -1;
  1742                        	data
  1743                        	xdef	~~_pseudo_timer
  1744                        ~~_pseudo_timer:
  1745 00:00C8: FF FF FF FF  	dl	$FFFFFFFF
  1746 00:00CC:              	ends
  1747                        ;ULONG _system_timer = 0;
  1748                        	data
  1749                        	xdef	~~_system_timer
  1750                        ~~_system_timer:
  1751 00:00CC: 00 00 00 00  	dl	$0
  1752 00:00D0:              	ends
  1753                        ;
  1754                        ;#define inportb60(a)	(KBD_INPT_BUF[0])
  1755                        ;#define inportb64(a)	(STATUS_PORT[0])
  1756                        ;#define outportb60(b)	(KBD_OUT_BUF[0] = b)
  1757                        ;#define outportb64(b)	(KBD_CMD_BUF[0] = b)
  1758                        ;
  1759                        ;#define SCALE_X (100)
  1760                        ;#define SCALE_Y (100)
  1761                        ;
  1762                        ;void k_dispatch_reg0(PIRQDATA pIRQ);
  1763                        ;void k_dispatch_reg1(PIRQDATA pIRQ);
  1764                        ;void k_dispatch_reg2(PIRQDATA pIRQ);
  1765                        ;void k_dispatch_reg3(PIRQDATA pIRQ);
  1766                        ;
  1767                        ;void keyboard_handler(void);
  1768                        ;
  1769                        ;void mouse_handler(VOID); //struct regs *a_r (not
                     used but just there)
  1770                        ;void mouse_wait(BYTE a_type); //unsigned char
  1771                        ;void mouse_write(BYTE a_write); //unsigned char
  Sat Jul 10 2021  1:15                                                Page 35


  1772                        ;BYTE mouse_read(VOID);
  1773                        ;void mouse_install(VOID);
  1774                        ;
  1775                        ;void kbd_reset(VOID)
  1776                        ;{
  1777                        	.line	102
  1778                        	.line	103
  1779                        	code
  1780                        	xdef	~~kbd_reset
  1781                        	func
  1782                        	.function	103
  1783                        ~~kbd_reset:
  1784                        	longa	on
  1785                        	longi	on
  1786 00:0000: 3B           	tsc
  1787 00:0001: 38           	sec
  1788 00:0002: E9 04 00     	sbc	#L2
  1789 00:0005: 1B           	tcs
  1790 00:0006: 0B           	phd
  1791 00:0007: 5B           	tcd
  1792                        	.block	103
  1793                        ;	PMARSHALDATA pm = NULL;
  1794                        ;
  1795                        ;	pm = k_mem_allocate_heap(sizeof(MARSHALDATA));
  1796             00000000   pm_1	set	0
  1797                        	.sym	pm,0,139,1,32,63
  1798 00:0008: 64 01        	stz	<L3+pm_1
  1799 00:000A: 64 03        	stz	<L3+pm_1+2
  1800                        	.line	106
  1801 00:000C: F4 04 00     	pea	#<$4
  1802 00:000F: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  1803 00:0013: 85 01        	sta	<L3+pm_1
  1804 00:0015: 86 03        	stx	<L3+pm_1+2
  1805                        ;	pm->verbValue[0] = 0xFF;
  1806                        	.line	107
  1807 00:0017: E2 20        	sep	#$20
  1808                        	longa	off
  1809 00:0019: A9 FF        	lda	#$ff
  1810 00:001B: 87 01        	sta	[<L3+pm_1]
  1811 00:001D: C2 20        	rep	#$20
  1812                        	longa	on
  1813                        ;	pm->verbValue[1] = 0xFF;
  1814                        	.line	108
  1815 00:001F: E2 20        	sep	#$20
  1816                        	longa	off
  1817 00:0021: A9 FF        	lda	#$ff
  1818 00:0023: A0 01 00     	ldy	#$1
  1819 00:0026: 97 01        	sta	[<L3+pm_1],Y
  1820 00:0028: C2 20        	rep	#$20
  1821                        	longa	on
  1822                        ;	k_write_ipc_port(kbport,pm,0);
  1823                        	.line	109
  1824 00:002A: F4 00 00     	pea	#<$0
  1825 00:002D: D4 03        	pei	<L3+pm_1+2
  1826 00:002F: D4 01        	pei	<L3+pm_1
  1827 00:0031: AD xx xx     	lda	|~~kbport+2
  1828 00:0034: 48           	pha
  1829 00:0035: AD xx xx     	lda	|~~kbport
  Sat Jul 10 2021  1:15                                                Page 36


  1830 00:0038: 48           	pha
  1831 00:0039: 22 xx xx xx  	jsl	~~k_write_ipc_port
  1832                        ;}
  1833                        	.line	110
  1834                        L5:
  1835 00:003D: 2B           	pld
  1836 00:003E: 3B           	tsc
  1837 00:003F: 18           	clc
  1838 00:0040: 69 04 00     	adc	#L2
  1839 00:0043: 1B           	tcs
  1840 00:0044: 6B           	rtl
  1841                        	.endblock	110
  1842             00000004   L2	equ	4
  1843             00000001   L3	equ	1
  1844                        	ends
  1845                        	efunc
  1846                        	.endfunc	110,1,4
  1847                        	.line	110
  1848                        ;
  1849                        ;void k_mouse_enable(VOID)
  1850                        ;{
  1851                        	.line	112
  1852                        	.line	113
  1853                        	code
  1854                        	xdef	~~k_mouse_enable
  1855                        	func
  1856                        	.function	113
  1857                        ~~k_mouse_enable:
  1858                        	longa	on
  1859                        	longi	on
  1860 00:0045: 3B           	tsc
  1861 00:0046: 38           	sec
  1862 00:0047: E9 04 00     	sbc	#L6
  1863 00:004A: 1B           	tcs
  1864 00:004B: 0B           	phd
  1865 00:004C: 5B           	tcd
  1866                        	.block	113
  1867                        ;	PMARSHALDATA pm = NULL;
  1868                        ;
  1869                        ;	pm = k_mem_allocate_heap(sizeof(MARSHALDATA));
  1870             00000000   pm_1	set	0
  1871                        	.sym	pm,0,139,1,32,63
  1872 00:004D: 64 01        	stz	<L7+pm_1
  1873 00:004F: 64 03        	stz	<L7+pm_1+2
  1874                        	.line	116
  1875 00:0051: F4 04 00     	pea	#<$4
  1876 00:0054: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  1877 00:0058: 85 01        	sta	<L7+pm_1
  1878 00:005A: 86 03        	stx	<L7+pm_1+2
  1879                        ;	pm->byteValue = 0xF4;
  1880                        	.line	117
  1881 00:005C: E2 20        	sep	#$20
  1882                        	longa	off
  1883 00:005E: A9 F4        	lda	#$f4
  1884 00:0060: 87 01        	sta	[<L7+pm_1]
  1885 00:0062: C2 20        	rep	#$20
  1886                        	longa	on
  1887                        ;	k_write_ipc_port(mouseport,pm,0);
  Sat Jul 10 2021  1:15                                                Page 37


  1888                        	.line	118
  1889 00:0064: F4 00 00     	pea	#<$0
  1890 00:0067: D4 03        	pei	<L7+pm_1+2
  1891 00:0069: D4 01        	pei	<L7+pm_1
  1892 00:006B: AD xx xx     	lda	|~~mouseport+2
  1893 00:006E: 48           	pha
  1894 00:006F: AD xx xx     	lda	|~~mouseport
  1895 00:0072: 48           	pha
  1896 00:0073: 22 xx xx xx  	jsl	~~k_write_ipc_port
  1897                        ;}
  1898                        	.line	119
  1899                        L9:
  1900 00:0077: 2B           	pld
  1901 00:0078: 3B           	tsc
  1902 00:0079: 18           	clc
  1903 00:007A: 69 04 00     	adc	#L6
  1904 00:007D: 1B           	tcs
  1905 00:007E: 6B           	rtl
  1906                        	.endblock	119
  1907             00000004   L6	equ	4
  1908             00000001   L7	equ	1
  1909                        	ends
  1910                        	efunc
  1911                        	.endfunc	119,1,4
  1912                        	.line	119
  1913                        ;
  1914                        ;void k_mouse_disable(VOID)
  1915                        ;{
  1916                        	.line	121
  1917                        	.line	122
  1918                        	code
  1919                        	xdef	~~k_mouse_disable
  1920                        	func
  1921                        	.function	122
  1922                        ~~k_mouse_disable:
  1923                        	longa	on
  1924                        	longi	on
  1925 00:007F: 3B           	tsc
  1926 00:0080: 38           	sec
  1927 00:0081: E9 04 00     	sbc	#L10
  1928 00:0084: 1B           	tcs
  1929 00:0085: 0B           	phd
  1930 00:0086: 5B           	tcd
  1931                        	.block	122
  1932                        ;	PMARSHALDATA pm = NULL;
  1933                        ;
  1934                        ;	pm = k_mem_allocate_heap(sizeof(MARSHALDATA));
  1935             00000000   pm_1	set	0
  1936                        	.sym	pm,0,139,1,32,63
  1937 00:0087: 64 01        	stz	<L11+pm_1
  1938 00:0089: 64 03        	stz	<L11+pm_1+2
  1939                        	.line	125
  1940 00:008B: F4 04 00     	pea	#<$4
  1941 00:008E: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  1942 00:0092: 85 01        	sta	<L11+pm_1
  1943 00:0094: 86 03        	stx	<L11+pm_1+2
  1944                        ;	pm->byteValue = 0xF5;
  1945                        	.line	126
  Sat Jul 10 2021  1:15                                                Page 38


  1946 00:0096: E2 20        	sep	#$20
  1947                        	longa	off
  1948 00:0098: A9 F5        	lda	#$f5
  1949 00:009A: 87 01        	sta	[<L11+pm_1]
  1950 00:009C: C2 20        	rep	#$20
  1951                        	longa	on
  1952                        ;	k_write_ipc_port(mouseport,pm,0);
  1953                        	.line	127
  1954 00:009E: F4 00 00     	pea	#<$0
  1955 00:00A1: D4 03        	pei	<L11+pm_1+2
  1956 00:00A3: D4 01        	pei	<L11+pm_1
  1957 00:00A5: AD xx xx     	lda	|~~mouseport+2
  1958 00:00A8: 48           	pha
  1959 00:00A9: AD xx xx     	lda	|~~mouseport
  1960 00:00AC: 48           	pha
  1961 00:00AD: 22 xx xx xx  	jsl	~~k_write_ipc_port
  1962                        ;}
  1963                        	.line	128
  1964                        L13:
  1965 00:00B1: 2B           	pld
  1966 00:00B2: 3B           	tsc
  1967 00:00B3: 18           	clc
  1968 00:00B4: 69 04 00     	adc	#L10
  1969 00:00B7: 1B           	tcs
  1970 00:00B8: 6B           	rtl
  1971                        	.endblock	128
  1972             00000004   L10	equ	4
  1973             00000001   L11	equ	1
  1974                        	ends
  1975                        	efunc
  1976                        	.endfunc	128,1,4
  1977                        	.line	128
  1978                        ;
  1979                        ;
  1980                        ;void mouse_handler_0(void)
  1981                        ;{
  1982                        	.line	131
  1983                        	.line	132
  1984                        	code
  1985                        	xdef	~~mouse_handler_0
  1986                        	func
  1987                        	.function	132
  1988                        ~~mouse_handler_0:
  1989                        	longa	on
  1990                        	longi	on
  1991 00:00B9: 3B           	tsc
  1992 00:00BA: 38           	sec
  1993 00:00BB: E9 0B 00     	sbc	#L14
  1994 00:00BE: 1B           	tcs
  1995 00:00BF: 0B           	phd
  1996 00:00C0: 5B           	tcd
  1997                        	.block	132
  1998                        ;	BYTE index  = 0;
  1999                        ;	BYTE data   = 0;
  2000                        ;	BYTE cycle  = 0;
  2001                        ;	BYTE retry  = 0;
  2002                        ;	BYTE buffer[3];
  2003                        ;
  Sat Jul 10 2021  1:15                                                Page 39


  2004                        ;	mouse_irq++;
  2005             00000000   index_1	set	0
  2006             00000001   data_1	set	1
  2007             00000002   cycle_1	set	2
  2008             00000003   retry_1	set	3
  2009             00000004   buffer_1	set	4
  2010                        	.sym	index,0,14,1,8
  2011                        	.sym	data,1,14,1,8
  2012                        	.sym	cycle,2,14,1,8
  2013                        	.sym	retry,3,14,1,8
  2014                        	.sym	buffer,4,110,1,0,3
  2015 00:00C1: E2 20        	sep	#$20
  2016                        	longa	off
  2017 00:00C3: 64 05        	stz	<L15+index_1
  2018 00:00C5: C2 20        	rep	#$20
  2019                        	longa	on
  2020 00:00C7: E2 20        	sep	#$20
  2021                        	longa	off
  2022 00:00C9: 64 06        	stz	<L15+data_1
  2023 00:00CB: C2 20        	rep	#$20
  2024                        	longa	on
  2025 00:00CD: E2 20        	sep	#$20
  2026                        	longa	off
  2027 00:00CF: 64 07        	stz	<L15+cycle_1
  2028 00:00D1: C2 20        	rep	#$20
  2029                        	longa	on
  2030 00:00D3: E2 20        	sep	#$20
  2031                        	longa	off
  2032 00:00D5: 64 08        	stz	<L15+retry_1
  2033 00:00D7: C2 20        	rep	#$20
  2034                        	longa	on
  2035                        	.line	139
  2036 00:00D9: EE xx xx     	inc	|~~mouse_irq
  2037 00:00DC: D0 03        	bne	L17
  2038 00:00DE: EE xx xx     	inc	|~~mouse_irq+2
  2039                        L17:
  2040                        ;
  2041                        ;	while((STATUS_PORT[0] & 0x01) == 1)
  2042                        	.line	141
  2043                        L10001:
  2044 00:00E1: AF 07 18 AF  	lda	>11474951
  2045 00:00E5: 29 01 00     	and	#<$1
  2046 00:00E8: 85 01        	sta	<R0
  2047 00:00EA: A5 01        	lda	<R0
  2048 00:00EC: C9 01 00     	cmp	#<$1
  2049 00:00EF: F0 03        	beq	L18
  2050 00:00F1: 82 B1 01     	brl	L10002
  2051                        L18:
  2052                        ;	{
  2053                        	.line	142
  2054                        ;		_irq_keyboardTimeout = 0;
  2055                        	.line	143
  2056 00:00F4: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  2057                        ;
  2058                        ;		index = MOUSE_PTR[0];
  2059                        	.line	145
  2060 00:00F7: E2 20        	sep	#$20
  2061                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 40


  2062 00:00F9: AF E0 00 00  	lda	>224	; volatile
  2063 00:00FD: 85 05        	sta	<L15+index_1
  2064 00:00FF: C2 20        	rep	#$20
  2065                        	longa	on
  2066                        ;
  2067                        ;		//k_debug_long("mouse_handler_0:irq:",mo
                    use_irq);
  2068                        ;		//k_debug_integer("mouse_handler_0:MOUSE
                    _PTR:",index);
  2069                        ;
  2070                        ;		asm NOP;
  2071                        	.line	150
  2072                        	asmstart
  2073 00:0101: EA           	NOP
  2074                        	asmend
  2075                        ;		asm NOP;
  2076                        	.line	151
  2077                        	asmstart
  2078 00:0102: EA           	NOP
  2079                        	asmend
  2080                        ;		asm NOP;
  2081                        	.line	152
  2082                        	asmstart
  2083 00:0103: EA           	NOP
  2084                        	asmend
  2085                        ;		asm NOP;
  2086                        	.line	153
  2087                        	asmstart
  2088 00:0104: EA           	NOP
  2089                        	asmend
  2090                        ;		asm NOP;
  2091                        	.line	154
  2092                        	asmstart
  2093 00:0105: EA           	NOP
  2094                        	asmend
  2095                        ;		asm NOP;
  2096                        	.line	155
  2097                        	asmstart
  2098 00:0106: EA           	NOP
  2099                        	asmend
  2100                        ;		asm NOP;
  2101                        	.line	156
  2102                        	asmstart
  2103 00:0107: EA           	NOP
  2104                        	asmend
  2105                        ;		asm NOP;
  2106                        	.line	157
  2107                        	asmstart
  2108 00:0108: EA           	NOP
  2109                        	asmend
  2110                        ;		asm NOP;
  2111                        	.line	158
  2112                        	asmstart
  2113 00:0109: EA           	NOP
  2114                        	asmend
  2115                        ;		asm NOP;
  2116                        	.line	159
  2117                        	asmstart
  Sat Jul 10 2021  1:15                                                Page 41


  2118 00:010A: EA           	NOP
  2119                        	asmend
  2120                        ;		asm NOP;
  2121                        	.line	160
  2122                        	asmstart
  2123 00:010B: EA           	NOP
  2124                        	asmend
  2125                        ;		asm NOP;
  2126                        	.line	161
  2127                        	asmstart
  2128 00:010C: EA           	NOP
  2129                        	asmend
  2130                        ;
  2131                        ;		data =  KBD_OUT_BUF[0];
  2132                        	.line	163
  2133 00:010D: E2 20        	sep	#$20
  2134                        	longa	off
  2135 00:010F: AF 03 18 AF  	lda	>11474947
  2136 00:0113: 85 06        	sta	<L15+data_1
  2137 00:0115: C2 20        	rep	#$20
  2138                        	longa	on
  2139                        ;
  2140                        ;		if((index > 0) && (data > 25) )
  2141                        	.line	165
  2142                        ;		{
  2143 00:0117: E2 20        	sep	#$20
  2144                        	longa	off
  2145 00:0119: A9 00        	lda	#$0
  2146 00:011B: C5 05        	cmp	<L15+index_1
  2147 00:011D: C2 20        	rep	#$20
  2148                        	longa	on
  2149 00:011F: 90 03        	bcc	L19
  2150 00:0121: 82 3F 00     	brl	L10003
  2151                        L19:
  2152 00:0124: E2 20        	sep	#$20
  2153                        	longa	off
  2154 00:0126: A9 19        	lda	#$19
  2155 00:0128: C5 06        	cmp	<L15+data_1
  2156 00:012A: C2 20        	rep	#$20
  2157                        	longa	on
  2158 00:012C: 90 03        	bcc	L20
  2159 00:012E: 82 32 00     	brl	L10003
  2160                        L20:
  2161                        	.line	166
  2162                        ;			if((mouse_data[0] & 0x20) || (mo
                    use_data[0] & 0x10))
  2163                        	.line	167
  2164                        ;				data = -20;
  2165 00:0131: E2 20        	sep	#$20
  2166                        	longa	off
  2167 00:0133: AD xx xx     	lda	|~~mouse_data
  2168 00:0136: 29 20        	and	#<$20
  2169 00:0138: C2 20        	rep	#$20
  2170                        	longa	on
  2171 00:013A: F0 03        	beq	L22
  2172 00:013C: 82 0E 00     	brl	L21
  2173                        L22:
  2174 00:013F: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 42


  2175                        	longa	off
  2176 00:0141: AD xx xx     	lda	|~~mouse_data
  2177 00:0144: 29 10        	and	#<$10
  2178 00:0146: C2 20        	rep	#$20
  2179                        	longa	on
  2180 00:0148: D0 03        	bne	L23
  2181 00:014A: 82 0B 00     	brl	L10004
  2182                        L23:
  2183                        L21:
  2184                        	.line	168
  2185 00:014D: E2 20        	sep	#$20
  2186                        	longa	off
  2187 00:014F: A9 EC        	lda	#$ec
  2188 00:0151: 85 06        	sta	<L15+data_1
  2189 00:0153: C2 20        	rep	#$20
  2190                        	longa	on
  2191                        ;			else
  2192 00:0155: 82 08 00     	brl	L10005
  2193                        L10004:
  2194                        ;				data = 20;
  2195                        	.line	170
  2196 00:0158: E2 20        	sep	#$20
  2197                        	longa	off
  2198 00:015A: A9 14        	lda	#$14
  2199 00:015C: 85 06        	sta	<L15+data_1
  2200 00:015E: C2 20        	rep	#$20
  2201                        	longa	on
  2202                        L10005:
  2203                        ;		}
  2204                        	.line	171
  2205                        ;		else
  2206 00:0160: 82 19 00     	brl	L10006
  2207                        L10003:
  2208                        ;		{
  2209                        	.line	173
  2210                        ;			if((data & 0x07) == 0x07)
  2211                        	.line	174
  2212                        ;				data = data & 0x8F;
  2213 00:0163: A5 06        	lda	<L15+data_1
  2214 00:0165: 29 07 00     	and	#<$7
  2215 00:0168: 85 01        	sta	<R0
  2216 00:016A: A5 01        	lda	<R0
  2217 00:016C: C9 07 00     	cmp	#<$7
  2218 00:016F: F0 03        	beq	L24
  2219 00:0171: 82 08 00     	brl	L10007
  2220                        L24:
  2221                        	.line	175
  2222 00:0174: E2 20        	sep	#$20
  2223                        	longa	off
  2224 00:0176: A9 70        	lda	#$70
  2225 00:0178: 14 06        	trb	<L15+data_1
  2226 00:017A: C2 20        	rep	#$20
  2227                        	longa	on
  2228                        ;		}
  2229                        L10007:
  2230                        	.line	176
  2231                        L10006:
  2232                        ;
  Sat Jul 10 2021  1:15                                                Page 43


  2233                        ;		mouse_data[index] = data;
  2234                        	.line	178
  2235 00:017C: A5 05        	lda	<L15+index_1
  2236 00:017E: 29 FF 00     	and	#$ff
  2237 00:0181: 85 01        	sta	<R0
  2238 00:0183: E2 20        	sep	#$20
  2239                        	longa	off
  2240 00:0185: A5 06        	lda	<L15+data_1
  2241 00:0187: A6 01        	ldx	<R0
  2242 00:0189: 9D xx xx     	sta	|~~mouse_data,X
  2243 00:018C: C2 20        	rep	#$20
  2244                        	longa	on
  2245                        ;
  2246                        ;		index++;
  2247                        	.line	180
  2248 00:018E: E2 20        	sep	#$20
  2249                        	longa	off
  2250 00:0190: E6 05        	inc	<L15+index_1
  2251 00:0192: C2 20        	rep	#$20
  2252                        	longa	on
  2253                        ;
  2254                        ;		if(index == 3)
  2255                        	.line	182
  2256                        ;		{
  2257 00:0194: E2 20        	sep	#$20
  2258                        	longa	off
  2259 00:0196: A5 05        	lda	<L15+index_1
  2260 00:0198: C9 03        	cmp	#<$3
  2261 00:019A: C2 20        	rep	#$20
  2262                        	longa	on
  2263 00:019C: F0 03        	beq	L25
  2264 00:019E: 82 F7 00     	brl	L10008
  2265                        L25:
  2266                        	.line	183
  2267                        ;			if(mouse_data[0]!=0 && (mouse_da
                    ta[0] == mouse_data[1]) && (mouse_data[1] == mouse_data[2]))
  2268                        	.line	184
  2269                        ;			{
  2270 00:01A1: AD xx xx     	lda	|~~mouse_data
  2271 00:01A4: 29 FF 00     	and	#$ff
  2272 00:01A7: D0 03        	bne	L26
  2273 00:01A9: 82 3F 00     	brl	L10009
  2274                        L26:
  2275 00:01AC: E2 20        	sep	#$20
  2276                        	longa	off
  2277 00:01AE: AD xx xx     	lda	|~~mouse_data
  2278 00:01B1: CD xx xx     	cmp	|~~mouse_data+1
  2279 00:01B4: C2 20        	rep	#$20
  2280                        	longa	on
  2281 00:01B6: F0 03        	beq	L27
  2282 00:01B8: 82 30 00     	brl	L10009
  2283                        L27:
  2284 00:01BB: E2 20        	sep	#$20
  2285                        	longa	off
  2286 00:01BD: AD xx xx     	lda	|~~mouse_data+1
  2287 00:01C0: CD xx xx     	cmp	|~~mouse_data+2
  2288 00:01C3: C2 20        	rep	#$20
  2289                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 44


  2290 00:01C5: F0 03        	beq	L28
  2291 00:01C7: 82 21 00     	brl	L10009
  2292                        L28:
  2293                        	.line	185
  2294                        ;				MOUSE_PTR_BYTE0[0] = 8;
  2295                        	.line	186
  2296 00:01CA: E2 20        	sep	#$20
  2297                        	longa	off
  2298 00:01CC: A9 08        	lda	#$8
  2299 00:01CE: 8F 06 07 AF  	sta	>11470598	; volatile
  2300 00:01D2: C2 20        	rep	#$20
  2301                        	longa	on
  2302                        ;				MOUSE_PTR_BYTE1[0] = 0;
  2303                        	.line	187
  2304 00:01D4: E2 20        	sep	#$20
  2305                        	longa	off
  2306 00:01D6: A9 00        	lda	#$0
  2307 00:01D8: 8F 07 07 AF  	sta	>11470599	; volatile
  2308 00:01DC: C2 20        	rep	#$20
  2309                        	longa	on
  2310                        ;				MOUSE_PTR_BYTE2[0] = 0;
  2311                        	.line	188
  2312 00:01DE: E2 20        	sep	#$20
  2313                        	longa	off
  2314 00:01E0: A9 00        	lda	#$0
  2315 00:01E2: 8F 08 07 AF  	sta	>11470600	; volatile
  2316 00:01E6: C2 20        	rep	#$20
  2317                        	longa	on
  2318                        ;			}
  2319                        	.line	189
  2320                        ;			else
  2321 00:01E8: 82 7D 00     	brl	L10010
  2322                        L10009:
  2323                        ;			{
  2324                        	.line	191
  2325                        ;				FXOS_MOUSE_BYTE_T  = mou
                    se_data[0];
  2326                        	.line	192
  2327 00:01EB: E2 20        	sep	#$20
  2328                        	longa	off
  2329 00:01ED: AD xx xx     	lda	|~~mouse_data
  2330 00:01F0: 8F 03 15 00  	sta	>5379
  2331 00:01F4: C2 20        	rep	#$20
  2332                        	longa	on
  2333                        ;				MOUSE_PTR_BYTE0[0] = mou
                    se_data[0];
  2334                        	.line	193
  2335 00:01F6: E2 20        	sep	#$20
  2336                        	longa	off
  2337 00:01F8: AD xx xx     	lda	|~~mouse_data
  2338 00:01FB: 8F 06 07 AF  	sta	>11470598	; volatile
  2339 00:01FF: C2 20        	rep	#$20
  2340                        	longa	on
  2341                        ;				MOUSE_PTR_BYTE1[0] = mou
                    se_data[1];
  2342                        	.line	194
  2343 00:0201: E2 20        	sep	#$20
  2344                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 45


  2345 00:0203: AD xx xx     	lda	|~~mouse_data+1
  2346 00:0206: 8F 07 07 AF  	sta	>11470599	; volatile
  2347 00:020A: C2 20        	rep	#$20
  2348                        	longa	on
  2349                        ;				MOUSE_PTR_BYTE2[0] = mou
                    se_data[2];
  2350                        	.line	195
  2351 00:020C: E2 20        	sep	#$20
  2352                        	longa	off
  2353 00:020E: AD xx xx     	lda	|~~mouse_data+2
  2354 00:0211: 8F 08 07 AF  	sta	>11470600	; volatile
  2355 00:0215: C2 20        	rep	#$20
  2356                        	longa	on
  2357                        ;
  2358                        ;				FXOS_MOUSE_BYTE_T   = MO
                    USE_PTR_BYTE0[0];
  2359                        	.line	197
  2360 00:0217: E2 20        	sep	#$20
  2361                        	longa	off
  2362 00:0219: AF 06 07 AF  	lda	>11470598	; volatile
  2363 00:021D: 8F 03 15 00  	sta	>5379
  2364 00:0221: C2 20        	rep	#$20
  2365                        	longa	on
  2366                        ;				FXOS_MOUSE_BYTE_X_L = MO
                    USE_PTR_X_POS_L[0];
  2367                        	.line	198
  2368 00:0223: E2 20        	sep	#$20
  2369                        	longa	off
  2370 00:0225: AF 02 07 AF  	lda	>11470594	; volatile
  2371 00:0229: 8F 04 15 00  	sta	>5380
  2372 00:022D: C2 20        	rep	#$20
  2373                        	longa	on
  2374                        ;				FXOS_MOUSE_BYTE_X_H = MO
                    USE_PTR_X_POS_H[0];
  2375                        	.line	199
  2376 00:022F: E2 20        	sep	#$20
  2377                        	longa	off
  2378 00:0231: AF 03 07 AF  	lda	>11470595	; volatile
  2379 00:0235: 8F 05 15 00  	sta	>5381
  2380 00:0239: C2 20        	rep	#$20
  2381                        	longa	on
  2382                        ;				FXOS_MOUSE_BYTE_Y_L = MO
                    USE_PTR_Y_POS_L[0];
  2383                        	.line	200
  2384 00:023B: E2 20        	sep	#$20
  2385                        	longa	off
  2386 00:023D: AF 04 07 AF  	lda	>11470596	; volatile
  2387 00:0241: 8F 06 15 00  	sta	>5382
  2388 00:0245: C2 20        	rep	#$20
  2389                        	longa	on
  2390                        ;				FXOS_MOUSE_BYTE_Y_H = MO
                    USE_PTR_Y_POS_H[0];
  2391                        	.line	201
  2392 00:0247: E2 20        	sep	#$20
  2393                        	longa	off
  2394 00:0249: AF 05 07 AF  	lda	>11470597	; volatile
  2395 00:024D: 8F 07 15 00  	sta	>5383
  2396 00:0251: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 46


  2397                        	longa	on
  2398                        ;
  2399                        ;				k_irq_device_event(IRQE_
                    MOUSE,_pseudo_timer,&FXOS_MOUSE_BYTE_T);
  2400                        	.line	203
  2401 00:0253: F4 00 00     	pea	#^$1503
  2402 00:0256: F4 03 15     	pea	#<$1503
  2403 00:0259: AD xx xx     	lda	|~~_pseudo_timer+2
  2404 00:025C: 48           	pha
  2405 00:025D: AD xx xx     	lda	|~~_pseudo_timer
  2406 00:0260: 48           	pha
  2407 00:0261: F4 02 00     	pea	#<$2
  2408 00:0264: 22 xx xx xx  	jsl	~~k_irq_device_event
  2409                        ;			}
  2410                        	.line	204
  2411                        L10010:
  2412                        ;			k_debug_hex("mouse_handler_0:",m
                    ouse_data[0]);
  2413                        	.line	205
  2414 00:0268: AD xx xx     	lda	|~~mouse_data
  2415 00:026B: 48           	pha
  2416 00:026C: F4 xx xx     	pea	#^L1
  2417 00:026F: F4 xx xx     	pea	#<L1
  2418 00:0272: 22 xx xx xx  	jsl	~~k_debug_hex
  2419                        ;			k_debug_hex("mouse_handler_1:",m
                    ouse_data[1]);
  2420                        	.line	206
  2421 00:0276: AD xx xx     	lda	|~~mouse_data+1
  2422 00:0279: 48           	pha
  2423 00:027A: F4 xx xx     	pea	#^L1+17
  2424 00:027D: F4 xx xx     	pea	#<L1+17
  2425 00:0280: 22 xx xx xx  	jsl	~~k_debug_hex
  2426                        ;			k_debug_hex("mouse_handler_2:",m
                    ouse_data[2]);
  2427                        	.line	207
  2428 00:0284: AD xx xx     	lda	|~~mouse_data+2
  2429 00:0287: 48           	pha
  2430 00:0288: F4 xx xx     	pea	#^L1+34
  2431 00:028B: F4 xx xx     	pea	#<L1+34
  2432 00:028E: 22 xx xx xx  	jsl	~~k_debug_hex
  2433                        ;
  2434                        ;
  2435                        ;
  2436                        ;			index = 0;
  2437                        	.line	211
  2438 00:0292: E2 20        	sep	#$20
  2439                        	longa	off
  2440 00:0294: 64 05        	stz	<L15+index_1
  2441 00:0296: C2 20        	rep	#$20
  2442                        	longa	on
  2443                        ;		}
  2444                        	.line	212
  2445                        ;
  2446                        ;		MOUSE_PTR[0] = index;
  2447                        L10008:
  2448                        	.line	214
  2449 00:0298: E2 20        	sep	#$20
  2450                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 47


  2451 00:029A: A5 05        	lda	<L15+index_1
  2452 00:029C: 8F E0 00 00  	sta	>224	; volatile
  2453 00:02A0: C2 20        	rep	#$20
  2454                        	longa	on
  2455                        ;	}
  2456                        	.line	215
  2457 00:02A2: 82 3C FE     	brl	L10001
  2458                        L10002:
  2459                        ;	//k_write_ipc_port(debugport2,k_fxstring_append_
                    long(k_fxstring_new(" ====================== mouse_handler_0
                    :cycle:",64),cycle),0);
  2460                        ;	//k_debug_integer(" ===== mouse_handler_0:cycle:
                    ",cycle);
  2461                        ;}
  2462                        	.line	218
  2463                        L29:
  2464 00:02A5: 2B           	pld
  2465 00:02A6: 3B           	tsc
  2466 00:02A7: 18           	clc
  2467 00:02A8: 69 0B 00     	adc	#L14
  2468 00:02AB: 1B           	tcs
  2469 00:02AC: 6B           	rtl
  2470                        	.endblock	218
  2471             0000000B   L14	equ	11
  2472             00000005   L15	equ	5
  2473                        	ends
  2474                        	efunc
  2475                        	.endfunc	218,5,11
  2476                        	.line	218
  2477                        	data
  2478                        L1:
  2479 00:00D0: 6D 6F 75 73  	db	$6D,$6F,$75,$73,$65,$5F,$68,$61,$6E,$64,
                    $6C,$65,$72,$5F,$30
       00:00D4: 65 5F 68 61 
       00:00D8: 6E 64 6C 65 
       00:00DC: 72 5F 30 
  2480 00:00DF: 3A 00 6D 6F  	db	$3A,$00,$6D,$6F,$75,$73,$65,$5F,$68,$61,
                    $6E,$64,$6C,$65,$72
       00:00E3: 75 73 65 5F 
       00:00E7: 68 61 6E 64 
       00:00EB: 6C 65 72 
  2481 00:00EE: 5F 31 3A 00  	db	$5F,$31,$3A,$00,$6D,$6F,$75,$73,$65,$5F,
                    $68,$61,$6E,$64,$6C
       00:00F2: 6D 6F 75 73 
       00:00F6: 65 5F 68 61 
       00:00FA: 6E 64 6C 
  2482 00:00FD: 65 72 5F 32  	db	$65,$72,$5F,$32,$3A,$00
       00:0101: 3A 00 
  2483 00:0103:              	ends
  2484                        ;
  2485                        ;
  2486                        ;/*
  2487                        ; *
  2488                        ; *
  2489                        ; *
  2490                        ;void mouse_handler_0(void)
  2491                        ;{
  2492                        ;	int i = 0;
  Sat Jul 10 2021  1:15                                                Page 48


  2493                        ;	unsigned char spc = 0;
  2494                        ;	unsigned char mptr = 0;
  2495                        ;	unsigned char kbd = 0;
  2496                        ;	unsigned char tmp = 0;
  2497                        ;	//int cx,cy;
  2498                        ;
  2499                        ;	while(((STATUS_PORT[0] & 0x01) == 0x01) && spc <
                     4)
  2500                        ;	//while((STATUS_PORT[0] & 0x01))
  2501                        ;	{
  2502                        ;		mptr = MOUSE_PTR[0];
  2503                        ;		kbd  = KBD_INPT_BUF[0];
  2504                        ;
  2505                        ;		MOUSE_PTR_BYTE0[mptr]   = kbd;
  2506                        ;		FXOS_MOUSE_BYTE[mptr]   = kbd;
  2507                        ;
  2508                        ;		mptr++;
  2509                        ;		spc++;
  2510                        ;
  2511                        ;		if(mptr >  2)
  2512                        ;		{
  2513                        ;			MOUSE_PTR[0] = 0;
  2514                        ;
  2515                        ;			FXOS_MOUSE_BYTE_T   = MOUSE_PTR_
                    BYTE0[0];
  2516                        ;			FXOS_MOUSE_BYTE_X_L = MOUSE_PTR_
                    X_POS_L[0];
  2517                        ;			FXOS_MOUSE_BYTE_X_H = MOUSE_PTR_
                    X_POS_H[0];
  2518                        ;			FXOS_MOUSE_BYTE_Y_L = MOUSE_PTR_
                    Y_POS_L[0];
  2519                        ;			FXOS_MOUSE_BYTE_Y_H = MOUSE_PTR_
                    Y_POS_H[0];
  2520                        ;
  2521                        ;			//k_irq_device_event(IRQE_MOUSE,
                    _pseudo_timer,&FXOS_MOUSE_BYTE_T);
  2522                        ;			k_irq_device_event(IRQE_MOUSE,_p
                    seudo_timer,&FXOS_MOUSE_BYTE_T);
  2523                        ;
  2524                        ;			spc  = 0;
  2525                        ;			mptr = 0;
  2526                        ;		}
  2527                        ;		else
  2528                        ;		{
  2529                        ;			MOUSE_PTR[0] = mptr;
  2530                        ;		}
  2531                        ;
  2532                        ;		spc++;
  2533                        ;	}
  2534                        ;
  2535                        ;}
  2536                        ;*/
  2537                        ;
  2538                        ;void mouse_handler_1(void)
  2539                        ;{
  2540                        	.line	273
  2541                        	.line	274
  2542                        	code
  Sat Jul 10 2021  1:15                                                Page 49


  2543                        	xdef	~~mouse_handler_1
  2544                        	func
  2545                        	.function	274
  2546                        ~~mouse_handler_1:
  2547                        	longa	on
  2548                        	longi	on
  2549 00:02AD: 3B           	tsc
  2550 00:02AE: 38           	sec
  2551 00:02AF: E9 09 00     	sbc	#L31
  2552 00:02B2: 1B           	tcs
  2553 00:02B3: 0B           	phd
  2554 00:02B4: 5B           	tcd
  2555                        	.block	274
  2556                        ;	unsigned char mptr = 0;
  2557                        ;
  2558                        ;	//while((STATUS_PORT[0] & 0x01)!=0)
  2559                        ;	if(TRUE)
  2560             00000000   mptr_1	set	0
  2561                        	.sym	mptr,0,14,1,8
  2562 00:02B5: E2 20        	sep	#$20
  2563                        	longa	off
  2564 00:02B7: 64 09        	stz	<L32+mptr_1
  2565 00:02B9: C2 20        	rep	#$20
  2566                        	longa	on
  2567                        	.line	278
  2568                        ;	{
  2569                        	.line	279
  2570                        ;		mptr = MOUSE_PTR[0];
  2571                        	.line	280
  2572 00:02BB: E2 20        	sep	#$20
  2573                        	longa	off
  2574 00:02BD: AF E0 00 00  	lda	>224	; volatile
  2575 00:02C1: 85 09        	sta	<L32+mptr_1
  2576 00:02C3: C2 20        	rep	#$20
  2577                        	longa	on
  2578                        ;
  2579                        ;		MOUSE_PTR_BYTE0[mptr] = mouse_read();//(
                    KBD_OUT_BUF[0]);
  2580                        	.line	282
  2581 00:02C5: A5 09        	lda	<L32+mptr_1
  2582 00:02C7: 29 FF 00     	and	#$ff
  2583 00:02CA: 85 01        	sta	<R0
  2584 00:02CC: A9 06 07     	lda	#$706
  2585 00:02CF: 85 05        	sta	<R1
  2586 00:02D1: A9 AF 00     	lda	#$af
  2587 00:02D4: 85 07        	sta	<R1+2
  2588 00:02D6: 22 xx xx xx  	jsl	~~mouse_read
  2589 00:02DA: E2 20        	sep	#$20
  2590                        	longa	off
  2591 00:02DC: A4 01        	ldy	<R0
  2592 00:02DE: 97 05        	sta	[<R1],Y
  2593 00:02E0: C2 20        	rep	#$20
  2594                        	longa	on
  2595                        ;
  2596                        ;		if(mptr >=  2)
  2597                        	.line	284
  2598                        ;		{
  2599 00:02E2: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 50


  2600                        	longa	off
  2601 00:02E4: A5 09        	lda	<L32+mptr_1
  2602 00:02E6: C9 02        	cmp	#<$2
  2603 00:02E8: C2 20        	rep	#$20
  2604                        	longa	on
  2605 00:02EA: B0 03        	bcs	L34
  2606 00:02EC: 82 5E 00     	brl	L10012
  2607                        L34:
  2608                        	.line	285
  2609                        ;			MOUSE_PTR[0] = 0;
  2610                        	.line	286
  2611 00:02EF: E2 20        	sep	#$20
  2612                        	longa	off
  2613 00:02F1: A9 00        	lda	#$0
  2614 00:02F3: 8F E0 00 00  	sta	>224	; volatile
  2615 00:02F7: C2 20        	rep	#$20
  2616                        	longa	on
  2617                        ;
  2618                        ;
  2619                        ;			FXOS_MOUSE_BYTE_T   = MOUSE_PTR_
                    BYTE0[0];
  2620                        	.line	289
  2621 00:02F9: E2 20        	sep	#$20
  2622                        	longa	off
  2623 00:02FB: AF 06 07 AF  	lda	>11470598	; volatile
  2624 00:02FF: 8F 03 15 00  	sta	>5379
  2625 00:0303: C2 20        	rep	#$20
  2626                        	longa	on
  2627                        ;			FXOS_MOUSE_BYTE_X_L = MOUSE_PTR_
                    X_POS_L[0];
  2628                        	.line	290
  2629 00:0305: E2 20        	sep	#$20
  2630                        	longa	off
  2631 00:0307: AF 02 07 AF  	lda	>11470594	; volatile
  2632 00:030B: 8F 04 15 00  	sta	>5380
  2633 00:030F: C2 20        	rep	#$20
  2634                        	longa	on
  2635                        ;			FXOS_MOUSE_BYTE_X_H = MOUSE_PTR_
                    X_POS_H[0];
  2636                        	.line	291
  2637 00:0311: E2 20        	sep	#$20
  2638                        	longa	off
  2639 00:0313: AF 03 07 AF  	lda	>11470595	; volatile
  2640 00:0317: 8F 05 15 00  	sta	>5381
  2641 00:031B: C2 20        	rep	#$20
  2642                        	longa	on
  2643                        ;			FXOS_MOUSE_BYTE_Y_L = MOUSE_PTR_
                    Y_POS_L[0];
  2644                        	.line	292
  2645 00:031D: E2 20        	sep	#$20
  2646                        	longa	off
  2647 00:031F: AF 04 07 AF  	lda	>11470596	; volatile
  2648 00:0323: 8F 06 15 00  	sta	>5382
  2649 00:0327: C2 20        	rep	#$20
  2650                        	longa	on
  2651                        ;			FXOS_MOUSE_BYTE_Y_H = MOUSE_PTR_
                    Y_POS_H[0];
  2652                        	.line	293
  Sat Jul 10 2021  1:15                                                Page 51


  2653 00:0329: E2 20        	sep	#$20
  2654                        	longa	off
  2655 00:032B: AF 05 07 AF  	lda	>11470597	; volatile
  2656 00:032F: 8F 07 15 00  	sta	>5383
  2657 00:0333: C2 20        	rep	#$20
  2658                        	longa	on
  2659                        ;
  2660                        ;			k_irq_device_event(IRQE_MOUSE,_p
                    seudo_timer,&FXOS_MOUSE_BYTE_T);
  2661                        	.line	295
  2662 00:0335: F4 00 00     	pea	#^$1503
  2663 00:0338: F4 03 15     	pea	#<$1503
  2664 00:033B: AD xx xx     	lda	|~~_pseudo_timer+2
  2665 00:033E: 48           	pha
  2666 00:033F: AD xx xx     	lda	|~~_pseudo_timer
  2667 00:0342: 48           	pha
  2668 00:0343: F4 02 00     	pea	#<$2
  2669 00:0346: 22 xx xx xx  	jsl	~~k_irq_device_event
  2670                        ;		}
  2671                        	.line	296
  2672                        ;		else
  2673 00:034A: 82 10 00     	brl	L10013
  2674                        L10012:
  2675                        ;		{
  2676                        	.line	298
  2677                        ;			MOUSE_PTR[0] = ++mptr;
  2678                        	.line	299
  2679 00:034D: E2 20        	sep	#$20
  2680                        	longa	off
  2681 00:034F: E6 09        	inc	<L32+mptr_1
  2682 00:0351: C2 20        	rep	#$20
  2683                        	longa	on
  2684 00:0353: E2 20        	sep	#$20
  2685                        	longa	off
  2686 00:0355: A5 09        	lda	<L32+mptr_1
  2687 00:0357: 8F E0 00 00  	sta	>224	; volatile
  2688 00:035B: C2 20        	rep	#$20
  2689                        	longa	on
  2690                        ;		}
  2691                        	.line	300
  2692                        L10013:
  2693                        ;	}
  2694                        	.line	301
  2695                        ;}
  2696                        L10011:
  2697                        	.line	302
  2698                        L35:
  2699 00:035D: 2B           	pld
  2700 00:035E: 3B           	tsc
  2701 00:035F: 18           	clc
  2702 00:0360: 69 09 00     	adc	#L31
  2703 00:0363: 1B           	tcs
  2704 00:0364: 6B           	rtl
  2705                        	.endblock	302
  2706             00000009   L31	equ	9
  2707             00000009   L32	equ	9
  2708                        	ends
  2709                        	efunc
  Sat Jul 10 2021  1:15                                                Page 52


  2710                        	.endfunc	302,9,9
  2711                        	.line	302
  2712                        ;
  2713                        ;void mouse_handler_2(void)
  2714                        ;{
  2715                        	.line	304
  2716                        	.line	305
  2717                        	code
  2718                        	xdef	~~mouse_handler_2
  2719                        	func
  2720                        	.function	305
  2721                        ~~mouse_handler_2:
  2722                        	longa	on
  2723                        	longi	on
  2724 00:0365: 3B           	tsc
  2725 00:0366: 38           	sec
  2726 00:0367: E9 09 00     	sbc	#L36
  2727 00:036A: 1B           	tcs
  2728 00:036B: 0B           	phd
  2729 00:036C: 5B           	tcd
  2730                        	.block	305
  2731                        ;	unsigned char index = 0;
  2732                        ;	//unsigned char kbd = 0;
  2733                        ;	//unsigned char tmp = 0;
  2734                        ;
  2735                        ;	//PFXZEROPAGE pzero = ((PFXZEROPAGE)ZEROPAGE);
  2736                        ;
  2737                        ;	//mouse_irq++;
  2738                        ;
  2739                        ;	while((STATUS_PORT[0] & 0x01) == 1)
  2740             00000000   index_1	set	0
  2741                        	.sym	index,0,14,1,8
  2742 00:036D: E2 20        	sep	#$20
  2743                        	longa	off
  2744 00:036F: 64 09        	stz	<L37+index_1
  2745 00:0371: C2 20        	rep	#$20
  2746                        	longa	on
  2747                        	.line	314
  2748                        L10014:
  2749 00:0373: AF 07 18 AF  	lda	>11474951
  2750 00:0377: 29 01 00     	and	#<$1
  2751 00:037A: 85 01        	sta	<R0
  2752 00:037C: A5 01        	lda	<R0
  2753 00:037E: C9 01 00     	cmp	#<$1
  2754 00:0381: F0 03        	beq	L39
  2755 00:0383: 82 B0 00     	brl	L10015
  2756                        L39:
  2757                        ;	{
  2758                        	.line	315
  2759                        ;		index = MOUSE_PTR[0];
  2760                        	.line	316
  2761 00:0386: E2 20        	sep	#$20
  2762                        	longa	off
  2763 00:0388: AF E0 00 00  	lda	>224	; volatile
  2764 00:038C: 85 09        	sta	<L37+index_1
  2765 00:038E: C2 20        	rep	#$20
  2766                        	longa	on
  2767                        ;
  Sat Jul 10 2021  1:15                                                Page 53


  2768                        ;
  2769                        ;		asm NOP;
  2770                        	.line	319
  2771                        	asmstart
  2772 00:0390: EA           	NOP
  2773                        	asmend
  2774                        ;		asm NOP;
  2775                        	.line	320
  2776                        	asmstart
  2777 00:0391: EA           	NOP
  2778                        	asmend
  2779                        ;		asm NOP;
  2780                        	.line	321
  2781                        	asmstart
  2782 00:0392: EA           	NOP
  2783                        	asmend
  2784                        ;		asm NOP;
  2785                        	.line	322
  2786                        	asmstart
  2787 00:0393: EA           	NOP
  2788                        	asmend
  2789                        ;		asm NOP;
  2790                        	.line	323
  2791                        	asmstart
  2792 00:0394: EA           	NOP
  2793                        	asmend
  2794                        ;		asm NOP;
  2795                        	.line	324
  2796                        	asmstart
  2797 00:0395: EA           	NOP
  2798                        	asmend
  2799                        ;		asm NOP;
  2800                        	.line	325
  2801                        	asmstart
  2802 00:0396: EA           	NOP
  2803                        	asmend
  2804                        ;
  2805                        ;		MOUSE_PTR_BYTE0[index] =  KBD_INPT_BUF[0
                    ];
  2806                        	.line	327
  2807 00:0397: A5 09        	lda	<L37+index_1
  2808 00:0399: 29 FF 00     	and	#$ff
  2809 00:039C: 85 01        	sta	<R0
  2810 00:039E: A9 06 07     	lda	#$706
  2811 00:03A1: 85 05        	sta	<R1
  2812 00:03A3: A9 AF 00     	lda	#$af
  2813 00:03A6: 85 07        	sta	<R1+2
  2814 00:03A8: E2 20        	sep	#$20
  2815                        	longa	off
  2816 00:03AA: AF 03 18 AF  	lda	>11474947
  2817 00:03AE: A4 01        	ldy	<R0
  2818 00:03B0: 97 05        	sta	[<R1],Y
  2819 00:03B2: C2 20        	rep	#$20
  2820                        	longa	on
  2821                        ;
  2822                        ;		MOUSE_PTR[0] = index + 1;
  2823                        	.line	329
  2824 00:03B4: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 54


  2825                        	longa	off
  2826 00:03B6: A5 09        	lda	<L37+index_1
  2827 00:03B8: 1A           	ina
  2828 00:03B9: 8F E0 00 00  	sta	>224	; volatile
  2829 00:03BD: C2 20        	rep	#$20
  2830                        	longa	on
  2831                        ;
  2832                        ;		if(MOUSE_PTR[0] > 2)
  2833                        	.line	331
  2834                        ;		{
  2835 00:03BF: E2 20        	sep	#$20
  2836                        	longa	off
  2837 00:03C1: A9 02        	lda	#$2
  2838 00:03C3: CF E0 00 00  	cmp	>224	; volatile
  2839 00:03C7: C2 20        	rep	#$20
  2840                        	longa	on
  2841 00:03C9: 90 03        	bcc	L40
  2842 00:03CB: 82 5B 00     	brl	L10016
  2843                        L40:
  2844                        	.line	332
  2845                        ;			MOUSE_PTR[0] = 0;
  2846                        	.line	333
  2847 00:03CE: E2 20        	sep	#$20
  2848                        	longa	off
  2849 00:03D0: A9 00        	lda	#$0
  2850 00:03D2: 8F E0 00 00  	sta	>224	; volatile
  2851 00:03D6: C2 20        	rep	#$20
  2852                        	longa	on
  2853                        ;
  2854                        ;			FXOS_MOUSE_BYTE_T   = MOUSE_PTR_
                    BYTE0[0];
  2855                        	.line	335
  2856 00:03D8: E2 20        	sep	#$20
  2857                        	longa	off
  2858 00:03DA: AF 06 07 AF  	lda	>11470598	; volatile
  2859 00:03DE: 8F 03 15 00  	sta	>5379
  2860 00:03E2: C2 20        	rep	#$20
  2861                        	longa	on
  2862                        ;			FXOS_MOUSE_BYTE_X_L = MOUSE_PTR_
                    X_POS_L[0];
  2863                        	.line	336
  2864 00:03E4: E2 20        	sep	#$20
  2865                        	longa	off
  2866 00:03E6: AF 02 07 AF  	lda	>11470594	; volatile
  2867 00:03EA: 8F 04 15 00  	sta	>5380
  2868 00:03EE: C2 20        	rep	#$20
  2869                        	longa	on
  2870                        ;			FXOS_MOUSE_BYTE_X_H = MOUSE_PTR_
                    X_POS_H[0];
  2871                        	.line	337
  2872 00:03F0: E2 20        	sep	#$20
  2873                        	longa	off
  2874 00:03F2: AF 03 07 AF  	lda	>11470595	; volatile
  2875 00:03F6: 8F 05 15 00  	sta	>5381
  2876 00:03FA: C2 20        	rep	#$20
  2877                        	longa	on
  2878                        ;			FXOS_MOUSE_BYTE_Y_L = MOUSE_PTR_
                    Y_POS_L[0];
  Sat Jul 10 2021  1:15                                                Page 55


  2879                        	.line	338
  2880 00:03FC: E2 20        	sep	#$20
  2881                        	longa	off
  2882 00:03FE: AF 04 07 AF  	lda	>11470596	; volatile
  2883 00:0402: 8F 06 15 00  	sta	>5382
  2884 00:0406: C2 20        	rep	#$20
  2885                        	longa	on
  2886                        ;			FXOS_MOUSE_BYTE_Y_H = MOUSE_PTR_
                    Y_POS_H[0];
  2887                        	.line	339
  2888 00:0408: E2 20        	sep	#$20
  2889                        	longa	off
  2890 00:040A: AF 05 07 AF  	lda	>11470597	; volatile
  2891 00:040E: 8F 07 15 00  	sta	>5383
  2892 00:0412: C2 20        	rep	#$20
  2893                        	longa	on
  2894                        ;
  2895                        ;			k_irq_device_event(IRQE_MOUSE,_p
                    seudo_timer,&FXOS_MOUSE_BYTE_T);
  2896                        	.line	341
  2897 00:0414: F4 00 00     	pea	#^$1503
  2898 00:0417: F4 03 15     	pea	#<$1503
  2899 00:041A: AD xx xx     	lda	|~~_pseudo_timer+2
  2900 00:041D: 48           	pha
  2901 00:041E: AD xx xx     	lda	|~~_pseudo_timer
  2902 00:0421: 48           	pha
  2903 00:0422: F4 02 00     	pea	#<$2
  2904 00:0425: 22 xx xx xx  	jsl	~~k_irq_device_event
  2905                        ;		}
  2906                        	.line	342
  2907                        ;
  2908                        ;		asm NOP;
  2909                        L10016:
  2910                        	.line	344
  2911                        	asmstart
  2912 00:0429: EA           	NOP
  2913                        	asmend
  2914                        ;		asm NOP;
  2915                        	.line	345
  2916                        	asmstart
  2917 00:042A: EA           	NOP
  2918                        	asmend
  2919                        ;		asm NOP;
  2920                        	.line	346
  2921                        	asmstart
  2922 00:042B: EA           	NOP
  2923                        	asmend
  2924                        ;		asm NOP;
  2925                        	.line	347
  2926                        	asmstart
  2927 00:042C: EA           	NOP
  2928                        	asmend
  2929                        ;		asm NOP;
  2930                        	.line	348
  2931                        	asmstart
  2932 00:042D: EA           	NOP
  2933                        	asmend
  2934                        ;		asm NOP;
  Sat Jul 10 2021  1:15                                                Page 56


  2935                        	.line	349
  2936                        	asmstart
  2937 00:042E: EA           	NOP
  2938                        	asmend
  2939                        ;		asm NOP;
  2940                        	.line	350
  2941                        	asmstart
  2942 00:042F: EA           	NOP
  2943                        	asmend
  2944                        ;
  2945                        ;		_irq_keyboardTimeout = 0;
  2946                        	.line	352
  2947 00:0430: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  2948                        ;	}
  2949                        	.line	353
  2950 00:0433: 82 3D FF     	brl	L10014
  2951                        L10015:
  2952                        ;
  2953                        ;}
  2954                        	.line	355
  2955                        L41:
  2956 00:0436: 2B           	pld
  2957 00:0437: 3B           	tsc
  2958 00:0438: 18           	clc
  2959 00:0439: 69 09 00     	adc	#L36
  2960 00:043C: 1B           	tcs
  2961 00:043D: 6B           	rtl
  2962                        	.endblock	355
  2963             00000009   L36	equ	9
  2964             00000009   L37	equ	9
  2965                        	ends
  2966                        	efunc
  2967                        	.endfunc	355,9,9
  2968                        	.line	355
  2969                        ;
  2970                        ;
  2971                        ;
  2972                        ;void BRKHandler(void)
  2973                        ;{
  2974                        	.line	359
  2975                        	.line	360
  2976                        	code
  2977                        	xdef	~~BRKHandler
  2978                        	func
  2979                        	.function	360
  2980                        ~~BRKHandler:
  2981                        	longa	on
  2982                        	longi	on
  2983 00:043E: 3B           	tsc
  2984 00:043F: 38           	sec
  2985 00:0440: E9 49 00     	sbc	#L42
  2986 00:0443: 1B           	tcs
  2987 00:0444: 0B           	phd
  2988 00:0445: 5B           	tcd
  2989                        	.block	360
  2990                        ;	CHAR _brk_Buffer[64];
  2991                        ;	UCHAR flames = 0;
  2992                        ;	int pos  = 1;
  Sat Jul 10 2021  1:15                                                Page 57


  2993                        ;	int line = 20;
  2994                        ;
  2995                        ;	k_debug_string("BRK Exception...\r\n");
  2996             00000000   _brk_Buffer_1	set	0
  2997             00000040   flames_1	set	64
  2998             00000041   pos_1	set	65
  2999             00000043   line_1	set	67
  3000                        	.sym	_brk_Buffer,0,110,1,0,64
  3001                        	.sym	flames,64,14,1,8
  3002                        	.sym	pos,65,5,1,16
  3003                        	.sym	line,67,5,1,16
  3004 00:0446: E2 20        	sep	#$20
  3005                        	longa	off
  3006 00:0448: 64 45        	stz	<L43+flames_1
  3007 00:044A: C2 20        	rep	#$20
  3008                        	longa	on
  3009 00:044C: A9 01 00     	lda	#$1
  3010 00:044F: 85 46        	sta	<L43+pos_1
  3011 00:0451: A9 14 00     	lda	#$14
  3012 00:0454: 85 48        	sta	<L43+line_1
  3013                        	.line	366
  3014 00:0456: F4 xx xx     	pea	#^L30
  3015 00:0459: F4 xx xx     	pea	#<L30
  3016 00:045C: 22 xx xx xx  	jsl	~~k_debug_string
  3017                        ;
  3018                        ;	asm SEI;
  3019                        	.line	368
  3020                        	asmstart
  3021 00:0460: 78           	SEI
  3022                        	asmend
  3023                        ;	//k_put_char(9,irqCOPPos - 1,irqspinner[scbrk++]
                    ,15,0);
  3024                        ;	//if(scbrk>3) scbrk = 0;
  3025                        ;	////asm sei;
  3026                        ;	k_enable_text_mode();
  3027                        	.line	372
  3028 00:0461: 22 xx xx xx  	jsl	~~k_enable_text_mode
  3029                        ;	k_enable_text_cursor(1);
  3030                        	.line	373
  3031 00:0465: F4 01 00     	pea	#<$1
  3032 00:0468: 22 xx xx xx  	jsl	~~k_enable_text_cursor
  3033                        ;	//k_disable_text_cursor();
  3034                        ;	k_enable_border();
  3035                        	.line	375
  3036 00:046C: 22 xx xx xx  	jsl	~~k_enable_border
  3037                        ;	//k_clear_screen(0);
  3038                        ;	k_set_border_color(255,0,0);
  3039                        	.line	377
  3040 00:0470: F4 00 00     	pea	#<$0
  3041 00:0473: F4 00 00     	pea	#<$0
  3042 00:0476: F4 FF 00     	pea	#<$ff
  3043 00:0479: 22 xx xx xx  	jsl	~~k_set_border_color
  3044                        ;	pos = 1;
  3045                        	.line	378
  3046 00:047D: A9 01 00     	lda	#$1
  3047 00:0480: 85 46        	sta	<L43+pos_1
  3048                        ;	pos = k_put_string(pos,line,boxtop,15,0);
  3049                        	.line	379
  Sat Jul 10 2021  1:15                                                Page 58


  3050 00:0482: F4 00 00     	pea	#<$0
  3051 00:0485: F4 0F 00     	pea	#<$f
  3052 00:0488: A9 xx xx     	lda	#<~~boxtop
  3053 00:048B: 85 01        	sta	<R0
  3054                        	xref	_BEG_DATA
  3055 00:048D: A9 xx xx     	lda	#_BEG_DATA>>16
  3056 00:0490: 85 03        	sta	<R0+2
  3057 00:0492: D4 03        	pei	<R0+2
  3058 00:0494: D4 01        	pei	<R0
  3059 00:0496: D4 48        	pei	<L43+line_1
  3060 00:0498: D4 46        	pei	<L43+pos_1
  3061 00:049A: 22 xx xx xx  	jsl	~~k_put_string
  3062 00:049E: 85 46        	sta	<L43+pos_1
  3063                        ;	line++;
  3064                        	.line	380
  3065 00:04A0: E6 48        	inc	<L43+line_1
  3066                        ;	pos = 1;
  3067                        	.line	381
  3068 00:04A2: A9 01 00     	lda	#$1
  3069 00:04A5: 85 46        	sta	<L43+pos_1
  3070                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3071                        	.line	382
  3072 00:04A7: F4 00 00     	pea	#<$0
  3073 00:04AA: F4 0F 00     	pea	#<$f
  3074 00:04AD: A9 xx xx     	lda	#<~~boxside
  3075 00:04B0: 85 01        	sta	<R0
  3076                        	xref	_BEG_DATA
  3077 00:04B2: A9 xx xx     	lda	#_BEG_DATA>>16
  3078 00:04B5: 85 03        	sta	<R0+2
  3079 00:04B7: D4 03        	pei	<R0+2
  3080 00:04B9: D4 01        	pei	<R0
  3081 00:04BB: D4 48        	pei	<L43+line_1
  3082 00:04BD: D4 46        	pei	<L43+pos_1
  3083 00:04BF: 22 xx xx xx  	jsl	~~k_put_string
  3084 00:04C3: 85 46        	sta	<L43+pos_1
  3085                        ;	pos = 70;
  3086                        	.line	383
  3087 00:04C5: A9 46 00     	lda	#$46
  3088 00:04C8: 85 46        	sta	<L43+pos_1
  3089                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3090                        	.line	384
  3091 00:04CA: F4 00 00     	pea	#<$0
  3092 00:04CD: F4 0F 00     	pea	#<$f
  3093 00:04D0: A9 xx xx     	lda	#<~~boxside
  3094 00:04D3: 85 01        	sta	<R0
  3095                        	xref	_BEG_DATA
  3096 00:04D5: A9 xx xx     	lda	#_BEG_DATA>>16
  3097 00:04D8: 85 03        	sta	<R0+2
  3098 00:04DA: D4 03        	pei	<R0+2
  3099 00:04DC: D4 01        	pei	<R0
  3100 00:04DE: D4 48        	pei	<L43+line_1
  3101 00:04E0: D4 46        	pei	<L43+pos_1
  3102 00:04E2: 22 xx xx xx  	jsl	~~k_put_string
  3103 00:04E6: 85 46        	sta	<L43+pos_1
  3104                        ;	line++;
  3105                        	.line	385
  3106 00:04E8: E6 48        	inc	<L43+line_1
  3107                        ;	pos = 1;
  Sat Jul 10 2021  1:15                                                Page 59


  3108                        	.line	386
  3109 00:04EA: A9 01 00     	lda	#$1
  3110 00:04ED: 85 46        	sta	<L43+pos_1
  3111                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3112                        	.line	387
  3113 00:04EF: F4 00 00     	pea	#<$0
  3114 00:04F2: F4 0F 00     	pea	#<$f
  3115 00:04F5: A9 xx xx     	lda	#<~~boxside
  3116 00:04F8: 85 01        	sta	<R0
  3117                        	xref	_BEG_DATA
  3118 00:04FA: A9 xx xx     	lda	#_BEG_DATA>>16
  3119 00:04FD: 85 03        	sta	<R0+2
  3120 00:04FF: D4 03        	pei	<R0+2
  3121 00:0501: D4 01        	pei	<R0
  3122 00:0503: D4 48        	pei	<L43+line_1
  3123 00:0505: D4 46        	pei	<L43+pos_1
  3124 00:0507: 22 xx xx xx  	jsl	~~k_put_string
  3125 00:050B: 85 46        	sta	<L43+pos_1
  3126                        ;	pos = k_put_string(pos,line,CONST_EXCEPTION_TITL
                    E,15,0);
  3127                        	.line	388
  3128 00:050D: F4 00 00     	pea	#<$0
  3129 00:0510: F4 0F 00     	pea	#<$f
  3130 00:0513: F4 xx xx     	pea	#^L30+19
  3131 00:0516: F4 xx xx     	pea	#<L30+19
  3132 00:0519: D4 48        	pei	<L43+line_1
  3133 00:051B: D4 46        	pei	<L43+pos_1
  3134 00:051D: 22 xx xx xx  	jsl	~~k_put_string
  3135 00:0521: 85 46        	sta	<L43+pos_1
  3136                        ;	//pos = k_put_string(pos,line,k_longtodec(_k_exe
                    c_context,_brk_Buffer),15,0);
  3137                        ;	pos = k_put_string(pos,line,k_longtodec(_k_exec_
                    context,_brk_Buffer),15,0);
  3138                        	.line	390
  3139 00:0523: F4 00 00     	pea	#<$0
  3140 00:0526: F4 0F 00     	pea	#<$f
  3141 00:0529: F4 00 00     	pea	#0
  3142 00:052C: 18           	clc
  3143 00:052D: 7B           	tdc
  3144 00:052E: 69 05 00     	adc	#<L43+_brk_Buffer_1
  3145 00:0531: 48           	pha
  3146 00:0532: AD xx xx     	lda	|~~_k_exec_context+2
  3147 00:0535: 48           	pha
  3148 00:0536: AD xx xx     	lda	|~~_k_exec_context
  3149 00:0539: 48           	pha
  3150 00:053A: 22 xx xx xx  	jsl	~~k_longtodec
  3151 00:053E: 85 01        	sta	<R0
  3152 00:0540: 86 03        	stx	<R0+2
  3153 00:0542: DA           	phx
  3154 00:0543: 48           	pha
  3155 00:0544: D4 48        	pei	<L43+line_1
  3156 00:0546: D4 46        	pei	<L43+pos_1
  3157 00:0548: 22 xx xx xx  	jsl	~~k_put_string
  3158 00:054C: 85 46        	sta	<L43+pos_1
  3159                        ;	//pos = k_put_string(pos,line,k_longtodec(_k_exe
                    c_context,_brk_Buffer),15,0);
  3160                        ;	//pos++;
  3161                        ;	//pos = k_put_string(pos,line,k_longtodec(   ,_b
  Sat Jul 10 2021  1:15                                                Page 60


                    rk_Buffer),15,0);
  3162                        ;
  3163                        ;	pos = k_put_string(pos,line,":",15,0);
  3164                        	.line	395
  3165 00:054E: F4 00 00     	pea	#<$0
  3166 00:0551: F4 0F 00     	pea	#<$f
  3167 00:0554: F4 xx xx     	pea	#^L30+34
  3168 00:0557: F4 xx xx     	pea	#<L30+34
  3169 00:055A: D4 48        	pei	<L43+line_1
  3170 00:055C: D4 46        	pei	<L43+pos_1
  3171 00:055E: 22 xx xx xx  	jsl	~~k_put_string
  3172 00:0562: 85 46        	sta	<L43+pos_1
  3173                        ;	pos = k_put_string(pos,line,k_longtodec(_k_exec_
                    error,_brk_Buffer),15,0);
  3174                        	.line	396
  3175 00:0564: F4 00 00     	pea	#<$0
  3176 00:0567: F4 0F 00     	pea	#<$f
  3177 00:056A: F4 00 00     	pea	#0
  3178 00:056D: 18           	clc
  3179 00:056E: 7B           	tdc
  3180 00:056F: 69 05 00     	adc	#<L43+_brk_Buffer_1
  3181 00:0572: 48           	pha
  3182 00:0573: AD xx xx     	lda	|~~_k_exec_error+2
  3183 00:0576: 48           	pha
  3184 00:0577: AD xx xx     	lda	|~~_k_exec_error
  3185 00:057A: 48           	pha
  3186 00:057B: 22 xx xx xx  	jsl	~~k_longtodec
  3187 00:057F: 85 01        	sta	<R0
  3188 00:0581: 86 03        	stx	<R0+2
  3189 00:0583: DA           	phx
  3190 00:0584: 48           	pha
  3191 00:0585: D4 48        	pei	<L43+line_1
  3192 00:0587: D4 46        	pei	<L43+pos_1
  3193 00:0589: 22 xx xx xx  	jsl	~~k_put_string
  3194 00:058D: 85 46        	sta	<L43+pos_1
  3195                        ;	pos = 70;
  3196                        	.line	397
  3197 00:058F: A9 46 00     	lda	#$46
  3198 00:0592: 85 46        	sta	<L43+pos_1
  3199                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3200                        	.line	398
  3201 00:0594: F4 00 00     	pea	#<$0
  3202 00:0597: F4 0F 00     	pea	#<$f
  3203 00:059A: A9 xx xx     	lda	#<~~boxside
  3204 00:059D: 85 01        	sta	<R0
  3205                        	xref	_BEG_DATA
  3206 00:059F: A9 xx xx     	lda	#_BEG_DATA>>16
  3207 00:05A2: 85 03        	sta	<R0+2
  3208 00:05A4: D4 03        	pei	<R0+2
  3209 00:05A6: D4 01        	pei	<R0
  3210 00:05A8: D4 48        	pei	<L43+line_1
  3211 00:05AA: D4 46        	pei	<L43+pos_1
  3212 00:05AC: 22 xx xx xx  	jsl	~~k_put_string
  3213 00:05B0: 85 46        	sta	<L43+pos_1
  3214                        ;	line++;
  3215                        	.line	399
  3216 00:05B2: E6 48        	inc	<L43+line_1
  3217                        ;	pos = 1;
  Sat Jul 10 2021  1:15                                                Page 61


  3218                        	.line	400
  3219 00:05B4: A9 01 00     	lda	#$1
  3220 00:05B7: 85 46        	sta	<L43+pos_1
  3221                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3222                        	.line	401
  3223 00:05B9: F4 00 00     	pea	#<$0
  3224 00:05BC: F4 0F 00     	pea	#<$f
  3225 00:05BF: A9 xx xx     	lda	#<~~boxside
  3226 00:05C2: 85 01        	sta	<R0
  3227                        	xref	_BEG_DATA
  3228 00:05C4: A9 xx xx     	lda	#_BEG_DATA>>16
  3229 00:05C7: 85 03        	sta	<R0+2
  3230 00:05C9: D4 03        	pei	<R0+2
  3231 00:05CB: D4 01        	pei	<R0
  3232 00:05CD: D4 48        	pei	<L43+line_1
  3233 00:05CF: D4 46        	pei	<L43+pos_1
  3234 00:05D1: 22 xx xx xx  	jsl	~~k_put_string
  3235 00:05D5: 85 46        	sta	<L43+pos_1
  3236                        ;	pos = k_put_string(pos,line,"",15,0);
  3237                        	.line	402
  3238 00:05D7: F4 00 00     	pea	#<$0
  3239 00:05DA: F4 0F 00     	pea	#<$f
  3240 00:05DD: F4 xx xx     	pea	#^L30+36
  3241 00:05E0: F4 xx xx     	pea	#<L30+36
  3242 00:05E3: D4 48        	pei	<L43+line_1
  3243 00:05E5: D4 46        	pei	<L43+pos_1
  3244 00:05E7: 22 xx xx xx  	jsl	~~k_put_string
  3245 00:05EB: 85 46        	sta	<L43+pos_1
  3246                        ;	pos = 70;
  3247                        	.line	403
  3248 00:05ED: A9 46 00     	lda	#$46
  3249 00:05F0: 85 46        	sta	<L43+pos_1
  3250                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3251                        	.line	404
  3252 00:05F2: F4 00 00     	pea	#<$0
  3253 00:05F5: F4 0F 00     	pea	#<$f
  3254 00:05F8: A9 xx xx     	lda	#<~~boxside
  3255 00:05FB: 85 01        	sta	<R0
  3256                        	xref	_BEG_DATA
  3257 00:05FD: A9 xx xx     	lda	#_BEG_DATA>>16
  3258 00:0600: 85 03        	sta	<R0+2
  3259 00:0602: D4 03        	pei	<R0+2
  3260 00:0604: D4 01        	pei	<R0
  3261 00:0606: D4 48        	pei	<L43+line_1
  3262 00:0608: D4 46        	pei	<L43+pos_1
  3263 00:060A: 22 xx xx xx  	jsl	~~k_put_string
  3264 00:060E: 85 46        	sta	<L43+pos_1
  3265                        ;	line++;
  3266                        	.line	405
  3267 00:0610: E6 48        	inc	<L43+line_1
  3268                        ;	pos = 1;
  3269                        	.line	406
  3270 00:0612: A9 01 00     	lda	#$1
  3271 00:0615: 85 46        	sta	<L43+pos_1
  3272                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3273                        	.line	407
  3274 00:0617: F4 00 00     	pea	#<$0
  3275 00:061A: F4 0F 00     	pea	#<$f
  Sat Jul 10 2021  1:15                                                Page 62


  3276 00:061D: A9 xx xx     	lda	#<~~boxside
  3277 00:0620: 85 01        	sta	<R0
  3278                        	xref	_BEG_DATA
  3279 00:0622: A9 xx xx     	lda	#_BEG_DATA>>16
  3280 00:0625: 85 03        	sta	<R0+2
  3281 00:0627: D4 03        	pei	<R0+2
  3282 00:0629: D4 01        	pei	<R0
  3283 00:062B: D4 48        	pei	<L43+line_1
  3284 00:062D: D4 46        	pei	<L43+pos_1
  3285 00:062F: 22 xx xx xx  	jsl	~~k_put_string
  3286 00:0633: 85 46        	sta	<L43+pos_1
  3287                        ;	pos = k_put_string(pos,line,_k_exec_message,15,0
                    );
  3288                        	.line	408
  3289 00:0635: F4 00 00     	pea	#<$0
  3290 00:0638: F4 0F 00     	pea	#<$f
  3291 00:063B: A9 xx xx     	lda	#<~~_k_exec_message
  3292 00:063E: 85 01        	sta	<R0
  3293                        	xref	_BEG_DATA
  3294 00:0640: A9 xx xx     	lda	#_BEG_DATA>>16
  3295 00:0643: 85 03        	sta	<R0+2
  3296 00:0645: D4 03        	pei	<R0+2
  3297 00:0647: D4 01        	pei	<R0
  3298 00:0649: D4 48        	pei	<L43+line_1
  3299 00:064B: D4 46        	pei	<L43+pos_1
  3300 00:064D: 22 xx xx xx  	jsl	~~k_put_string
  3301 00:0651: 85 46        	sta	<L43+pos_1
  3302                        ;	pos = 70;
  3303                        	.line	409
  3304 00:0653: A9 46 00     	lda	#$46
  3305 00:0656: 85 46        	sta	<L43+pos_1
  3306                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3307                        	.line	410
  3308 00:0658: F4 00 00     	pea	#<$0
  3309 00:065B: F4 0F 00     	pea	#<$f
  3310 00:065E: A9 xx xx     	lda	#<~~boxside
  3311 00:0661: 85 01        	sta	<R0
  3312                        	xref	_BEG_DATA
  3313 00:0663: A9 xx xx     	lda	#_BEG_DATA>>16
  3314 00:0666: 85 03        	sta	<R0+2
  3315 00:0668: D4 03        	pei	<R0+2
  3316 00:066A: D4 01        	pei	<R0
  3317 00:066C: D4 48        	pei	<L43+line_1
  3318 00:066E: D4 46        	pei	<L43+pos_1
  3319 00:0670: 22 xx xx xx  	jsl	~~k_put_string
  3320 00:0674: 85 46        	sta	<L43+pos_1
  3321                        ;	line++;
  3322                        	.line	411
  3323 00:0676: E6 48        	inc	<L43+line_1
  3324                        ;	pos = 1;
  3325                        	.line	412
  3326 00:0678: A9 01 00     	lda	#$1
  3327 00:067B: 85 46        	sta	<L43+pos_1
  3328                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3329                        	.line	413
  3330 00:067D: F4 00 00     	pea	#<$0
  3331 00:0680: F4 0F 00     	pea	#<$f
  3332 00:0683: A9 xx xx     	lda	#<~~boxside
  Sat Jul 10 2021  1:15                                                Page 63


  3333 00:0686: 85 01        	sta	<R0
  3334                        	xref	_BEG_DATA
  3335 00:0688: A9 xx xx     	lda	#_BEG_DATA>>16
  3336 00:068B: 85 03        	sta	<R0+2
  3337 00:068D: D4 03        	pei	<R0+2
  3338 00:068F: D4 01        	pei	<R0
  3339 00:0691: D4 48        	pei	<L43+line_1
  3340 00:0693: D4 46        	pei	<L43+pos_1
  3341 00:0695: 22 xx xx xx  	jsl	~~k_put_string
  3342 00:0699: 85 46        	sta	<L43+pos_1
  3343                        ;	pos = 70;
  3344                        	.line	414
  3345 00:069B: A9 46 00     	lda	#$46
  3346 00:069E: 85 46        	sta	<L43+pos_1
  3347                        ;	pos = k_put_string(pos,line,boxside,15,0);
  3348                        	.line	415
  3349 00:06A0: F4 00 00     	pea	#<$0
  3350 00:06A3: F4 0F 00     	pea	#<$f
  3351 00:06A6: A9 xx xx     	lda	#<~~boxside
  3352 00:06A9: 85 01        	sta	<R0
  3353                        	xref	_BEG_DATA
  3354 00:06AB: A9 xx xx     	lda	#_BEG_DATA>>16
  3355 00:06AE: 85 03        	sta	<R0+2
  3356 00:06B0: D4 03        	pei	<R0+2
  3357 00:06B2: D4 01        	pei	<R0
  3358 00:06B4: D4 48        	pei	<L43+line_1
  3359 00:06B6: D4 46        	pei	<L43+pos_1
  3360 00:06B8: 22 xx xx xx  	jsl	~~k_put_string
  3361 00:06BC: 85 46        	sta	<L43+pos_1
  3362                        ;	line++;
  3363                        	.line	416
  3364 00:06BE: E6 48        	inc	<L43+line_1
  3365                        ;	pos = 1;
  3366                        	.line	417
  3367 00:06C0: A9 01 00     	lda	#$1
  3368 00:06C3: 85 46        	sta	<L43+pos_1
  3369                        ;	pos = k_put_string(pos,line,boxbottom,15,0);
  3370                        	.line	418
  3371 00:06C5: F4 00 00     	pea	#<$0
  3372 00:06C8: F4 0F 00     	pea	#<$f
  3373 00:06CB: A9 xx xx     	lda	#<~~boxbottom
  3374 00:06CE: 85 01        	sta	<R0
  3375                        	xref	_BEG_DATA
  3376 00:06D0: A9 xx xx     	lda	#_BEG_DATA>>16
  3377 00:06D3: 85 03        	sta	<R0+2
  3378 00:06D5: D4 03        	pei	<R0+2
  3379 00:06D7: D4 01        	pei	<R0
  3380 00:06D9: D4 48        	pei	<L43+line_1
  3381 00:06DB: D4 46        	pei	<L43+pos_1
  3382 00:06DD: 22 xx xx xx  	jsl	~~k_put_string
  3383 00:06E1: 85 46        	sta	<L43+pos_1
  3384                        ;
  3385                        ;
  3386                        ;	k_set_border(25,25,0,0,0);
  3387                        	.line	421
  3388 00:06E3: F4 00 00     	pea	#<$0
  3389 00:06E6: F4 00 00     	pea	#<$0
  3390 00:06E9: F4 00 00     	pea	#<$0
  Sat Jul 10 2021  1:15                                                Page 64


  3391 00:06EC: F4 19 00     	pea	#<$19
  3392 00:06EF: F4 19 00     	pea	#<$19
  3393 00:06F2: 22 xx xx xx  	jsl	~~k_set_border
  3394                        ;	while(TRUE)
  3395                        	.line	422
  3396                        L10017:
  3397                        ;	{
  3398                        	.line	423
  3399                        ;		for(flames=255;flames>64;flames--)
  3400                        	.line	424
  3401 00:06F6: E2 20        	sep	#$20
  3402                        	longa	off
  3403 00:06F8: A9 FF        	lda	#$ff
  3404 00:06FA: 85 45        	sta	<L43+flames_1
  3405 00:06FC: C2 20        	rep	#$20
  3406                        	longa	on
  3407 00:06FE: 82 19 00     	brl	L10022
  3408                        L10021:
  3409                        ;		{
  3410                        	.line	425
  3411                        ;			k_set_border_color(flames,0,0);
  3412                        	.line	426
  3413 00:0701: F4 00 00     	pea	#<$0
  3414 00:0704: F4 00 00     	pea	#<$0
  3415 00:0707: D4 45        	pei	<L43+flames_1
  3416 00:0709: 22 xx xx xx  	jsl	~~k_set_border_color
  3417                        ;			//k_set_border(10,10,flames,0,0)
                    ;
  3418                        ;			k_delay(25);
  3419                        	.line	428
  3420 00:070D: F4 19 00     	pea	#<$19
  3421 00:0710: 22 xx xx xx  	jsl	~~k_delay
  3422                        ;		}
  3423                        	.line	429
  3424                        L10019:
  3425 00:0714: E2 20        	sep	#$20
  3426                        	longa	off
  3427 00:0716: C6 45        	dec	<L43+flames_1
  3428 00:0718: C2 20        	rep	#$20
  3429                        	longa	on
  3430                        L10022:
  3431 00:071A: E2 20        	sep	#$20
  3432                        	longa	off
  3433 00:071C: A9 40        	lda	#$40
  3434 00:071E: C5 45        	cmp	<L43+flames_1
  3435 00:0720: C2 20        	rep	#$20
  3436                        	longa	on
  3437 00:0722: B0 03        	bcs	L45
  3438 00:0724: 82 DA FF     	brl	L10021
  3439                        L45:
  3440                        L10020:
  3441                        ;		for(flames=64;flames<255;flames++)
  3442                        	.line	430
  3443 00:0727: E2 20        	sep	#$20
  3444                        	longa	off
  3445 00:0729: A9 40        	lda	#$40
  3446 00:072B: 85 45        	sta	<L43+flames_1
  3447 00:072D: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 65


  3448                        	longa	on
  3449 00:072F: 82 19 00     	brl	L10026
  3450                        L10025:
  3451                        ;		{
  3452                        	.line	431
  3453                        ;			k_set_border_color(flames,0,0);
  3454                        	.line	432
  3455 00:0732: F4 00 00     	pea	#<$0
  3456 00:0735: F4 00 00     	pea	#<$0
  3457 00:0738: D4 45        	pei	<L43+flames_1
  3458 00:073A: 22 xx xx xx  	jsl	~~k_set_border_color
  3459                        ;			//k_set_border(10,10,flames,0,0)
                    ;
  3460                        ;			k_delay(25);
  3461                        	.line	434
  3462 00:073E: F4 19 00     	pea	#<$19
  3463 00:0741: 22 xx xx xx  	jsl	~~k_delay
  3464                        ;		}
  3465                        	.line	435
  3466                        L10023:
  3467 00:0745: E2 20        	sep	#$20
  3468                        	longa	off
  3469 00:0747: E6 45        	inc	<L43+flames_1
  3470 00:0749: C2 20        	rep	#$20
  3471                        	longa	on
  3472                        L10026:
  3473 00:074B: E2 20        	sep	#$20
  3474                        	longa	off
  3475 00:074D: A5 45        	lda	<L43+flames_1
  3476 00:074F: C9 FF        	cmp	#<$ff
  3477 00:0751: C2 20        	rep	#$20
  3478                        	longa	on
  3479 00:0753: B0 03        	bcs	L46
  3480 00:0755: 82 DA FF     	brl	L10025
  3481                        L46:
  3482                        L10024:
  3483                        ;	}
  3484                        	.line	436
  3485 00:0758: 82 9B FF     	brl	L10017
  3486                        ;
  3487                        ;}
  3488                        	.line	438
  3489                        	.endblock	438
  3490             00000049   L42	equ	73
  3491             00000005   L43	equ	5
  3492                        	ends
  3493                        	efunc
  3494                        	.endfunc	438,5,73
  3495                        	.line	438
  3496                        	data
  3497                        L30:
  3498 00:0103: 42 52 4B 20  	db	$42,$52,$4B,$20,$45,$78,$63,$65,$70,$74,
                    $69,$6F,$6E,$2E,$2E
       00:0107: 45 78 63 65 
       00:010B: 70 74 69 6F 
       00:010F: 6E 2E 2E 
  3499 00:0112: 2E 0D 0A 00  	db	$2E,$0D,$0A,$00,$46,$6F,$65,$6E,$69,$78,
                    $20,$41,$73,$68,$65
  Sat Jul 10 2021  1:15                                                Page 66


       00:0116: 46 6F 65 6E 
       00:011A: 69 78 20 41 
       00:011E: 73 68 65 
  3500 00:0121: 73 3A 20 00  	db	$73,$3A,$20,$00,$3A,$00,$00
       00:0125: 3A 00 00 
  3501 00:0128:              	ends
  3502                        ;
  3503                        ;void COPHandler(void)
  3504                        ;{
  3505                        	.line	440
  3506                        	.line	441
  3507                        	code
  3508                        	xdef	~~COPHandler
  3509                        	func
  3510                        	.function	441
  3511                        ~~COPHandler:
  3512                        	longa	on
  3513                        	longi	on
  3514 00:075B: 3B           	tsc
  3515 00:075C: 38           	sec
  3516 00:075D: E9 04 00     	sbc	#L48
  3517 00:0760: 1B           	tcs
  3518 00:0761: 0B           	phd
  3519 00:0762: 5B           	tcd
  3520                        	.block	441
  3521                        ;	KERNELTRAPCALL fktCall = NULL;
  3522                        ;	/*
  3523                        ;	//k_put_char(9,irqCOPPos,irqspinner[sccop++],15,
                    0);
  3524                        ;	//if(sccop>3) sccop = 0;
  3525                        ;	////asm sei;
  3526                        ;	PFXZEROPAGE zp = k_getZeroPage();
  3527                        ;
  3528                        ;	k_debug_integer("COPHandler:Id:",zp->kernelFunct
                    ionCallId);
  3529                        ;
  3530                        ;	fktCall = k_getKernelTrapTable()[zp->kernelFunct
                    ionCallId];
  3531                        ;	if(fktCall)
  3532                        ;	{
  3533                        ;		k_debug_pointer("COPHandler:BEFORE fktCa
                    ll:",fktCall);
  3534                        ;
  3535                        ;		fktCall();
  3536                        ;
  3537                        ;		k_debug_pointer("COPHandler:AFTER fktCal
                    l:",fktCall);
  3538                        ;	}
  3539                        ;	else
  3540                        ;	{
  3541                        ;		asm brk;
  3542                        ;	}
  3543                        ;	*/
  3544                        ;}
  3545             00000000   fktCall_1	set	0
  3546                        	.sym	fktCall,0,641,1,32
  3547 00:0763: 64 01        	stz	<L49+fktCall_1
  3548 00:0765: 64 03        	stz	<L49+fktCall_1+2
  Sat Jul 10 2021  1:15                                                Page 67


  3549                        	.line	465
  3550                        L51:
  3551 00:0767: 2B           	pld
  3552 00:0768: 3B           	tsc
  3553 00:0769: 18           	clc
  3554 00:076A: 69 04 00     	adc	#L48
  3555 00:076D: 1B           	tcs
  3556 00:076E: 6B           	rtl
  3557                        	.endblock	465
  3558             00000004   L48	equ	4
  3559             00000001   L49	equ	1
  3560                        	ends
  3561                        	efunc
  3562                        	.endfunc	465,1,4
  3563                        	.line	465
  3564                        ;
  3565                        ;void IRQHandler(void)
  3566                        ;{
  3567                        	.line	467
  3568                        	.line	468
  3569                        	code
  3570                        	xdef	~~IRQHandler
  3571                        	func
  3572                        	.function	468
  3573                        ~~IRQHandler:
  3574                        	longa	on
  3575                        	longi	on
  3576 00:076F: 3B           	tsc
  3577 00:0770: 38           	sec
  3578 00:0771: E9 06 00     	sbc	#L52
  3579 00:0774: 1B           	tcs
  3580 00:0775: 0B           	phd
  3581 00:0776: 5B           	tcd
  3582                        	.block	468
  3583                        ;	IRQDATA data;
  3584                        ;		
  3585                        ;	if(INT_PENDING_REG0[0]!=0)
  3586             00000000   data_1	set	0
  3587                        	.sym	data,0,10,1,48,9
  3588                        	.line	471
  3589                        ;	{
  3590 00:0777: AF 40 01 00  	lda	>320
  3591 00:077B: 29 FF 00     	and	#$ff
  3592 00:077E: D0 03        	bne	L55
  3593 00:0780: 82 0D 00     	brl	L10027
  3594                        L55:
  3595                        	.line	472
  3596                        ;		//k_write_ipc_port(debugport2,k_fxstring
                    _new("INT_PENDING_REG0\r\n",64),0);
  3597                        ;		k_dispatch_reg0(&data);
  3598                        	.line	474
  3599 00:0783: F4 00 00     	pea	#0
  3600 00:0786: 18           	clc
  3601 00:0787: 7B           	tdc
  3602 00:0788: 69 01 00     	adc	#<L53+data_1
  3603 00:078B: 48           	pha
  3604 00:078C: 22 xx xx xx  	jsl	~~k_dispatch_reg0
  3605                        ;	}
  Sat Jul 10 2021  1:15                                                Page 68


  3606                        	.line	475
  3607                        ;	
  3608                        ;	if(INT_PENDING_REG1[0]!=0)
  3609                        L10027:
  3610                        	.line	477
  3611                        ;	{
  3612 00:0790: AF 41 01 00  	lda	>321
  3613 00:0794: 29 FF 00     	and	#$ff
  3614 00:0797: D0 03        	bne	L56
  3615 00:0799: 82 0D 00     	brl	L10028
  3616                        L56:
  3617                        	.line	478
  3618                        ;		//k_write_ipc_port(debugport2,k_fxstring
                    _new("INT_PENDING_REG1\r\n",64),0);
  3619                        ;		k_dispatch_reg1(&data);	
  3620                        	.line	480
  3621 00:079C: F4 00 00     	pea	#0
  3622 00:079F: 18           	clc
  3623 00:07A0: 7B           	tdc
  3624 00:07A1: 69 01 00     	adc	#<L53+data_1
  3625 00:07A4: 48           	pha
  3626 00:07A5: 22 xx xx xx  	jsl	~~k_dispatch_reg1
  3627                        ;	}
  3628                        	.line	481
  3629                        ;	
  3630                        ;	if(INT_PENDING_REG2[0]!=0)
  3631                        L10028:
  3632                        	.line	483
  3633                        ;	{
  3634 00:07A9: AF 42 01 00  	lda	>322
  3635 00:07AD: 29 FF 00     	and	#$ff
  3636 00:07B0: D0 03        	bne	L57
  3637 00:07B2: 82 0D 00     	brl	L10029
  3638                        L57:
  3639                        	.line	484
  3640                        ;		k_dispatch_reg2(&data);
  3641                        	.line	485
  3642 00:07B5: F4 00 00     	pea	#0
  3643 00:07B8: 18           	clc
  3644 00:07B9: 7B           	tdc
  3645 00:07BA: 69 01 00     	adc	#<L53+data_1
  3646 00:07BD: 48           	pha
  3647 00:07BE: 22 xx xx xx  	jsl	~~k_dispatch_reg2
  3648                        ;	}
  3649                        	.line	486
  3650                        ;
  3651                        ;	if(INT_PENDING_REG3[0]!=0)
  3652                        L10029:
  3653                        	.line	488
  3654                        ;	{
  3655 00:07C2: AF 43 01 00  	lda	>323
  3656 00:07C6: 29 FF 00     	and	#$ff
  3657 00:07C9: D0 03        	bne	L58
  3658 00:07CB: 82 0D 00     	brl	L10030
  3659                        L58:
  3660                        	.line	489
  3661                        ;		k_dispatch_reg3(&data);
  3662                        	.line	490
  Sat Jul 10 2021  1:15                                                Page 69


  3663 00:07CE: F4 00 00     	pea	#0
  3664 00:07D1: 18           	clc
  3665 00:07D2: 7B           	tdc
  3666 00:07D3: 69 01 00     	adc	#<L53+data_1
  3667 00:07D6: 48           	pha
  3668 00:07D7: 22 xx xx xx  	jsl	~~k_dispatch_reg3
  3669                        ;	}
  3670                        	.line	491
  3671                        ;
  3672                        ;	return;
  3673                        L10030:
  3674                        	.line	493
  3675                        L59:
  3676 00:07DB: 2B           	pld
  3677 00:07DC: 3B           	tsc
  3678 00:07DD: 18           	clc
  3679 00:07DE: 69 06 00     	adc	#L52
  3680 00:07E1: 1B           	tcs
  3681 00:07E2: 6B           	rtl
  3682                        ;}
  3683                        	.line	494
  3684                        	.endblock	494
  3685             00000006   L52	equ	6
  3686             00000001   L53	equ	1
  3687                        	ends
  3688                        	efunc
  3689                        	.endfunc	494,1,6
  3690                        	.line	494
  3691                        ;
  3692                        ;void k_dispatch_reg0(PIRQDATA pIRQx)
  3693                        ;{
  3694                        	.line	496
  3695                        	.line	497
  3696                        	code
  3697                        	xdef	~~k_dispatch_reg0
  3698                        	func
  3699                        	.function	497
  3700                        ~~k_dispatch_reg0:
  3701                        	longa	on
  3702                        	longi	on
  3703 00:07E3: 3B           	tsc
  3704 00:07E4: 38           	sec
  3705 00:07E5: E9 19 00     	sbc	#L60
  3706 00:07E8: 1B           	tcs
  3707 00:07E9: 0B           	phd
  3708 00:07EA: 5B           	tcd
  3709             00000004   pIRQx_0	set	4
  3710                        	.block	497
  3711                        ;	int i = 0;
  3712                        ;	char spc = 0;
  3713                        ;	unsigned char mptr = 0;
  3714                        ;	unsigned char kbd = 0;
  3715                        ;	char irq0buffer[8];
  3716                        ;
  3717                        ;	PFXZEROPAGE pzero = ((PFXZEROPAGE)ZEROPAGE);
  3718                        ;	//int line = pIRQ->line;
  3719                        ;	
  3720                        ;	//char FAR *keyCode = pIRQ->keycode;
  Sat Jul 10 2021  1:15                                                Page 70


  3721                        ;
  3722                        ;	//k_put_char(1,40,'A',15,0);
  3723                        ;	
  3724                        ;	//k_put_char(1,1,irqspinner[scirq0++],15,0);
  3725                        ;	//if(scirq0>3)scirq0 = 0;
  3726                        ;	
  3727                        ;	
  3728                        ;	if(INT_PENDING_REG0[0] & FNX0_INT00_SOF)
  3729             00000000   i_1	set	0
  3730             00000002   spc_1	set	2
  3731             00000003   mptr_1	set	3
  3732             00000004   kbd_1	set	4
  3733             00000005   irq0buffer_1	set	5
  3734             0000000D   pzero_1	set	13
  3735                        	.sym	i,0,5,1,16
  3736                        	.sym	spc,2,14,1,8
  3737                        	.sym	mptr,3,14,1,8
  3738                        	.sym	kbd,4,14,1,8
  3739                        	.sym	irq0buffer,5,110,1,0,8
  3740                        	.sym	pzero,13,138,1,32,79
  3741                        	.sym	pIRQx,4,138,6,32,9
  3742 00:07EB: 64 09        	stz	<L61+i_1
  3743 00:07ED: E2 20        	sep	#$20
  3744                        	longa	off
  3745 00:07EF: 64 0B        	stz	<L61+spc_1
  3746 00:07F1: C2 20        	rep	#$20
  3747                        	longa	on
  3748 00:07F3: E2 20        	sep	#$20
  3749                        	longa	off
  3750 00:07F5: 64 0C        	stz	<L61+mptr_1
  3751 00:07F7: C2 20        	rep	#$20
  3752                        	longa	on
  3753 00:07F9: E2 20        	sep	#$20
  3754                        	longa	off
  3755 00:07FB: 64 0D        	stz	<L61+kbd_1
  3756 00:07FD: C2 20        	rep	#$20
  3757                        	longa	on
  3758 00:07FF: A9 00 15     	lda	#$1500
  3759 00:0802: 85 16        	sta	<L61+pzero_1
  3760 00:0804: A9 00 00     	lda	#$0
  3761 00:0807: 85 18        	sta	<L61+pzero_1+2
  3762                        	.line	515
  3763                        ;	{
  3764 00:0809: E2 20        	sep	#$20
  3765                        	longa	off
  3766 00:080B: AF 40 01 00  	lda	>320
  3767 00:080F: 29 01        	and	#<$1
  3768 00:0811: C2 20        	rep	#$20
  3769                        	longa	on
  3770 00:0813: D0 03        	bne	L63
  3771 00:0815: 82 0E 00     	brl	L10031
  3772                        L63:
  3773                        	.line	516
  3774                        ;		//k_put_char(10,line,irqspinner[scirq00+
                    +],15,0);
  3775                        ;		//if(scirq00>3) scirq00 = 0;
  3776                        ;
  3777                        ;		INT_PENDING_REG0[0] &=  FNX0_INT00_SOF;
  Sat Jul 10 2021  1:15                                                Page 71


  3778                        	.line	520
  3779 00:0818: E2 20        	sep	#$20
  3780                        	longa	off
  3781 00:081A: AF 40 01 00  	lda	>320
  3782 00:081E: 29 01        	and	#<$1
  3783 00:0820: 8F 40 01 00  	sta	>320
  3784 00:0824: C2 20        	rep	#$20
  3785                        	longa	on
  3786                        ;	}
  3787                        	.line	521
  3788                        ;	
  3789                        ;	if(INT_PENDING_REG0[0] & FNX0_INT01_SOL)
  3790                        L10031:
  3791                        	.line	523
  3792                        ;	{
  3793 00:0826: E2 20        	sep	#$20
  3794                        	longa	off
  3795 00:0828: AF 40 01 00  	lda	>320
  3796 00:082C: 29 02        	and	#<$2
  3797 00:082E: C2 20        	rep	#$20
  3798                        	longa	on
  3799 00:0830: D0 03        	bne	L64
  3800 00:0832: 82 42 00     	brl	L10032
  3801                        L64:
  3802                        	.line	524
  3803                        ;		//k_put_char(11,line,irqspinner[scirq01+
                    +],15,0);
  3804                        ;		//if(scirq01>3) scirq01 = 0;
  3805                        ;		//_system_timer++;
  3806                        ;		
  3807                        ;		if(_irq_ktick > 0)
  3808                        	.line	529
  3809                        ;			_irq_ktick--;
  3810 00:0835: 38           	sec
  3811 00:0836: A9 00 00     	lda	#$0
  3812 00:0839: ED xx xx     	sbc	|~~_irq_ktick
  3813 00:083C: A9 00 00     	lda	#$0
  3814 00:083F: ED xx xx     	sbc	|~~_irq_ktick+2
  3815 00:0842: 70 03        	bvs	L65
  3816 00:0844: 49 00 80     	eor	#$8000
  3817                        L65:
  3818 00:0847: 10 03        	bpl	L66
  3819 00:0849: 82 0B 00     	brl	L10033
  3820                        L66:
  3821                        	.line	530
  3822 00:084C: AD xx xx     	lda	|~~_irq_ktick
  3823 00:084F: D0 03        	bne	L67
  3824 00:0851: CE xx xx     	dec	|~~_irq_ktick+2
  3825                        L67:
  3826 00:0854: CE xx xx     	dec	|~~_irq_ktick
  3827                        ;
  3828                        ;		//k_tickManagement(&_irq_ktick);
  3829                        ;		k_signal_sol_event(&_irq_ktick);
  3830                        L10033:
  3831                        	.line	533
  3832 00:0857: A9 xx xx     	lda	#<~~_irq_ktick
  3833 00:085A: 85 01        	sta	<R0
  3834                        	xref	_BEG_DATA
  Sat Jul 10 2021  1:15                                                Page 72


  3835 00:085C: A9 xx xx     	lda	#_BEG_DATA>>16
  3836 00:085F: 85 03        	sta	<R0+2
  3837 00:0861: D4 03        	pei	<R0+2
  3838 00:0863: D4 01        	pei	<R0
  3839 00:0865: 22 xx xx xx  	jsl	~~k_signal_sol_event
  3840                        ;		
  3841                        ;
  3842                        ;		INT_PENDING_REG0[0] &= FNX0_INT01_SOL;
  3843                        	.line	536
  3844 00:0869: E2 20        	sep	#$20
  3845                        	longa	off
  3846 00:086B: AF 40 01 00  	lda	>320
  3847 00:086F: 29 02        	and	#<$2
  3848 00:0871: 8F 40 01 00  	sta	>320
  3849 00:0875: C2 20        	rep	#$20
  3850                        	longa	on
  3851                        ;	}
  3852                        	.line	537
  3853                        ;	if(INT_PENDING_REG0[0] & FNX0_INT02_TMR0)
  3854                        L10032:
  3855                        	.line	538
  3856                        ;	{
  3857 00:0877: E2 20        	sep	#$20
  3858                        	longa	off
  3859 00:0879: AF 40 01 00  	lda	>320
  3860 00:087D: 29 04        	and	#<$4
  3861 00:087F: C2 20        	rep	#$20
  3862                        	longa	on
  3863 00:0881: D0 03        	bne	L68
  3864 00:0883: 82 AF 00     	brl	L10034
  3865                        L68:
  3866                        	.line	539
  3867                        ;		k_irq_device_event(IRQE_SOL_TIMER,_pseud
                    o_timer,&_irq_ktick);
  3868                        	.line	540
  3869 00:0886: A9 xx xx     	lda	#<~~_irq_ktick
  3870 00:0889: 85 01        	sta	<R0
  3871                        	xref	_BEG_DATA
  3872 00:088B: A9 xx xx     	lda	#_BEG_DATA>>16
  3873 00:088E: 85 03        	sta	<R0+2
  3874 00:0890: D4 03        	pei	<R0+2
  3875 00:0892: D4 01        	pei	<R0
  3876 00:0894: AD xx xx     	lda	|~~_pseudo_timer+2
  3877 00:0897: 48           	pha
  3878 00:0898: AD xx xx     	lda	|~~_pseudo_timer
  3879 00:089B: 48           	pha
  3880 00:089C: F4 05 00     	pea	#<$5
  3881 00:089F: 22 xx xx xx  	jsl	~~k_irq_device_event
  3882                        ;
  3883                        ;		_pseudo_timer++;
  3884                        	.line	542
  3885 00:08A3: EE xx xx     	inc	|~~_pseudo_timer
  3886 00:08A6: D0 03        	bne	L69
  3887 00:08A8: EE xx xx     	inc	|~~_pseudo_timer+2
  3888                        L69:
  3889                        ;
  3890                        ;		_irq_keyboardTimeout++;
  3891                        	.line	544
  Sat Jul 10 2021  1:15                                                Page 73


  3892 00:08AB: EE xx xx     	inc	|~~_irq_keyboardTimeout
  3893                        ;
  3894                        ;		if((_irq_keyboardTimeout > KEYBOARD_TIME
                    OUT) && (STATUS_PORT[0] & 0x01) )
  3895                        	.line	546
  3896                        ;		{
  3897 00:08AE: 38           	sec
  3898 00:08AF: A9 32 00     	lda	#$32
  3899 00:08B2: ED xx xx     	sbc	|~~_irq_keyboardTimeout
  3900 00:08B5: 70 03        	bvs	L70
  3901 00:08B7: 49 00 80     	eor	#$8000
  3902                        L70:
  3903 00:08BA: 10 03        	bpl	L71
  3904 00:08BC: 82 54 00     	brl	L10035
  3905                        L71:
  3906 00:08BF: E2 20        	sep	#$20
  3907                        	longa	off
  3908 00:08C1: AF 07 18 AF  	lda	>11474951
  3909 00:08C5: 29 01        	and	#<$1
  3910 00:08C7: C2 20        	rep	#$20
  3911                        	longa	on
  3912 00:08C9: D0 03        	bne	L72
  3913 00:08CB: 82 45 00     	brl	L10035
  3914                        L72:
  3915                        	.line	547
  3916                        ;			k_irq_device_event(IRQE_CTLR_RES
                    ET,MOUSE_PTR[0],&_irq_ktick);
  3917                        	.line	548
  3918 00:08CE: A9 xx xx     	lda	#<~~_irq_ktick
  3919 00:08D1: 85 01        	sta	<R0
  3920                        	xref	_BEG_DATA
  3921 00:08D3: A9 xx xx     	lda	#_BEG_DATA>>16
  3922 00:08D6: 85 03        	sta	<R0+2
  3923 00:08D8: D4 03        	pei	<R0+2
  3924 00:08DA: D4 01        	pei	<R0
  3925 00:08DC: E2 20        	sep	#$20
  3926                        	longa	off
  3927 00:08DE: AF E0 00 00  	lda	>224	; volatile
  3928 00:08E2: C2 20        	rep	#$20
  3929                        	longa	on
  3930 00:08E4: 29 FF 00     	and	#$ff
  3931 00:08E7: 85 05        	sta	<R1
  3932 00:08E9: 64 07        	stz	<R1+2
  3933 00:08EB: D4 07        	pei	<R1+2
  3934 00:08ED: D4 05        	pei	<R1
  3935 00:08EF: F4 09 00     	pea	#<$9
  3936 00:08F2: 22 xx xx xx  	jsl	~~k_irq_device_event
  3937                        ;
  3938                        ;			/*
  3939                        ;			MOUSE_PTR[0] = 0;
  3940                        ;			MOUSE_PTR_BYTE0[0] = 0;
  3941                        ;			MOUSE_PTR_BYTE1[0] = 0;
  3942                        ;			MOUSE_PTR_BYTE2[0] = 0;
  3943                        ;			*/
  3944                        ;
  3945                        ;
  3946                        ;			/*
  3947                        ;			i = 0;
  Sat Jul 10 2021  1:15                                                Page 74


  3948                        ;			while((STATUS_PORT[0] & 0x01) ==
                     1)
  3949                        ;			{
  3950                        ;				spc = KBD_OUT_BUF[0];
  3951                        ;				i++;
  3952                        ;				if(i > 50)
  3953                        ;					break;
  3954                        ;			}
  3955                        ;			*/
  3956                        ;
  3957                        ;			k_init_keyboard();
  3958                        	.line	569
  3959 00:08F6: 22 xx xx xx  	jsl	~~k_init_keyboard
  3960                        ;			if(STATUS_PORT[0] & 0x01)
  3961                        	.line	570
  3962                        ;			{
  3963 00:08FA: E2 20        	sep	#$20
  3964                        	longa	off
  3965 00:08FC: AF 07 18 AF  	lda	>11474951
  3966 00:0900: 29 01        	and	#<$1
  3967 00:0902: C2 20        	rep	#$20
  3968                        	longa	on
  3969 00:0904: D0 03        	bne	L73
  3970 00:0906: 82 04 00     	brl	L10036
  3971                        L73:
  3972                        	.line	571
  3973                        ;				mouse_read();
  3974                        	.line	572
  3975 00:0909: 22 xx xx xx  	jsl	~~mouse_read
  3976                        ;				//k_init_keyboard();
  3977                        ;			}
  3978                        	.line	574
  3979                        ;
  3980                        ;
  3981                        ;			_irq_keyboardTimeout = 0;
  3982                        L10036:
  3983                        	.line	577
  3984 00:090D: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  3985                        ;
  3986                        ;		}
  3987                        	.line	579
  3988                        ;		else if(_irq_keyboardTimeout > KEYBOARD_
                    TIMEOUT)
  3989 00:0910: 82 14 00     	brl	L10037
  3990                        L10035:
  3991                        	.line	580
  3992                        ;		{
  3993 00:0913: 38           	sec
  3994 00:0914: A9 32 00     	lda	#$32
  3995 00:0917: ED xx xx     	sbc	|~~_irq_keyboardTimeout
  3996 00:091A: 70 03        	bvs	L74
  3997 00:091C: 49 00 80     	eor	#$8000
  3998                        L74:
  3999 00:091F: 10 03        	bpl	L75
  4000 00:0921: 82 03 00     	brl	L10038
  4001                        L75:
  4002                        	.line	581
  4003                        ;			_irq_keyboardTimeout = 0;
  Sat Jul 10 2021  1:15                                                Page 75


  4004                        	.line	582
  4005 00:0924: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  4006                        ;		}
  4007                        	.line	583
  4008                        ;		
  4009                        ;		//k_irq_device_event(IRQE_SOL_TIMER,_pse
                    udo_timer,&_irq_ktick);
  4010                        ;
  4011                        ;		INT_PENDING_REG0[0] &=  FNX0_INT02_TMR0;
  4012                        L10038:
  4013                        L10037:
  4014                        	.line	587
  4015 00:0927: E2 20        	sep	#$20
  4016                        	longa	off
  4017 00:0929: AF 40 01 00  	lda	>320
  4018 00:092D: 29 04        	and	#<$4
  4019 00:092F: 8F 40 01 00  	sta	>320
  4020 00:0933: C2 20        	rep	#$20
  4021                        	longa	on
  4022                        ;	}
  4023                        	.line	588
  4024                        ;	if(INT_PENDING_REG0[0] & FNX0_INT03_TMR1)
  4025                        L10034:
  4026                        	.line	589
  4027                        ;	{
  4028 00:0935: E2 20        	sep	#$20
  4029                        	longa	off
  4030 00:0937: AF 40 01 00  	lda	>320
  4031 00:093B: 29 08        	and	#<$8
  4032 00:093D: C2 20        	rep	#$20
  4033                        	longa	on
  4034 00:093F: D0 03        	bne	L76
  4035 00:0941: 82 0E 00     	brl	L10039
  4036                        L76:
  4037                        	.line	590
  4038                        ;		//k_put_char(13,line,irqspinner[scirq03+
                    +],15,0);
  4039                        ;		//if(scirq03>3) scirq03 = 0;
  4040                        ;
  4041                        ;		/*
  4042                        ;		_irq_keyboardTimeout++;
  4043                        ;		if(_irq_keyboardTimeout > 120)
  4044                        ;		{
  4045                        ;			_irq_keyboardTimeout = 0;
  4046                        ;			k_init_keyboard();
  4047                        ;		}
  4048                        ;
  4049                        ;		k_put_string(0,26,k_inttodec(_irq_keyboa
                    rdTimeout,irq0buffer),15,0);
  4050                        ;		*/
  4051                        ;		INT_PENDING_REG0[0] &=  FNX0_INT03_TMR1;
  4052                        	.line	604
  4053 00:0944: E2 20        	sep	#$20
  4054                        	longa	off
  4055 00:0946: AF 40 01 00  	lda	>320
  4056 00:094A: 29 08        	and	#<$8
  4057 00:094C: 8F 40 01 00  	sta	>320
  4058 00:0950: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 76


  4059                        	longa	on
  4060                        ;	}
  4061                        	.line	605
  4062                        ;	if(INT_PENDING_REG0[0] & FNX0_INT04_TMR2)
  4063                        L10039:
  4064                        	.line	606
  4065                        ;	{
  4066 00:0952: E2 20        	sep	#$20
  4067                        	longa	off
  4068 00:0954: AF 40 01 00  	lda	>320
  4069 00:0958: 29 10        	and	#<$10
  4070 00:095A: C2 20        	rep	#$20
  4071                        	longa	on
  4072 00:095C: D0 03        	bne	L77
  4073 00:095E: 82 0E 00     	brl	L10040
  4074                        L77:
  4075                        	.line	607
  4076                        ;		//k_put_char(14,line,irqspinner[scirq04+
                    +],15,0);
  4077                        ;		//if(scirq04>3) scirq04 = 0;
  4078                        ;
  4079                        ;
  4080                        ;		//k_put_char(5,0,'X',15,0);
  4081                        ;		//k_put_char(5,0,'4',15,0);
  4082                        ;		INT_PENDING_REG0[0] &=  FNX0_INT04_TMR2;
  4083                        	.line	614
  4084 00:0961: E2 20        	sep	#$20
  4085                        	longa	off
  4086 00:0963: AF 40 01 00  	lda	>320
  4087 00:0967: 29 10        	and	#<$10
  4088 00:0969: 8F 40 01 00  	sta	>320
  4089 00:096D: C2 20        	rep	#$20
  4090                        	longa	on
  4091                        ;	}
  4092                        	.line	615
  4093                        ;	if(INT_PENDING_REG0[0] & FNX0_INT05_RTC)
  4094                        L10040:
  4095                        	.line	616
  4096                        ;	{
  4097 00:096F: E2 20        	sep	#$20
  4098                        	longa	off
  4099 00:0971: AF 40 01 00  	lda	>320
  4100 00:0975: 29 20        	and	#<$20
  4101 00:0977: C2 20        	rep	#$20
  4102                        	longa	on
  4103 00:0979: D0 03        	bne	L78
  4104 00:097B: 82 2B 00     	brl	L10041
  4105                        L78:
  4106                        	.line	617
  4107                        ;		//k_put_char(15,line,irqspinner[scirq05+
                    +],15,0);
  4108                        ;		//if(scirq05>3) scirq05 = 0;
  4109                        ;
  4110                        ;		k_irq_device_event(IRQE_RTC,_pseudo_time
                    r,&_k_default_arg);
  4111                        	.line	621
  4112 00:097E: A9 xx xx     	lda	#<~~_k_default_arg
  4113 00:0981: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 77


  4114                        	xref	_BEG_DATA
  4115 00:0983: A9 xx xx     	lda	#_BEG_DATA>>16
  4116 00:0986: 85 03        	sta	<R0+2
  4117 00:0988: D4 03        	pei	<R0+2
  4118 00:098A: D4 01        	pei	<R0
  4119 00:098C: AD xx xx     	lda	|~~_pseudo_timer+2
  4120 00:098F: 48           	pha
  4121 00:0990: AD xx xx     	lda	|~~_pseudo_timer
  4122 00:0993: 48           	pha
  4123 00:0994: F4 0B 00     	pea	#<$b
  4124 00:0997: 22 xx xx xx  	jsl	~~k_irq_device_event
  4125                        ;		//k_put_char(6,0,'X',15,0);
  4126                        ;		//k_put_char(6,0,'5',15,0);
  4127                        ;		INT_PENDING_REG0[0]&=FNX0_INT05_RTC;
  4128                        	.line	624
  4129 00:099B: E2 20        	sep	#$20
  4130                        	longa	off
  4131 00:099D: AF 40 01 00  	lda	>320
  4132 00:09A1: 29 20        	and	#<$20
  4133 00:09A3: 8F 40 01 00  	sta	>320
  4134 00:09A7: C2 20        	rep	#$20
  4135                        	longa	on
  4136                        ;	}
  4137                        	.line	625
  4138                        ;	if(INT_PENDING_REG0[0] & FNX0_INT06_FDC)
  4139                        L10041:
  4140                        	.line	626
  4141                        ;	{
  4142 00:09A9: E2 20        	sep	#$20
  4143                        	longa	off
  4144 00:09AB: AF 40 01 00  	lda	>320
  4145 00:09AF: 29 40        	and	#<$40
  4146 00:09B1: C2 20        	rep	#$20
  4147                        	longa	on
  4148 00:09B3: D0 03        	bne	L79
  4149 00:09B5: 82 0E 00     	brl	L10042
  4150                        L79:
  4151                        	.line	627
  4152                        ;		//k_put_char(16,line,irqspinner[scirq06+
                    +],15,0);
  4153                        ;		//if(scirq06>3) scirq06 = 0;
  4154                        ;
  4155                        ;		/*
  4156                        ;		floppybuffer[floppybufferIndex] = (((LPC
                    HAR)0xaf13f5)[0]);
  4157                        ;		if(floppybufferIndex > 511)
  4158                        ;			floppybufferIndex = 0;
  4159                        ;
  4160                        ;		floppybufferIndex++;
  4161                        ;		*/
  4162                        ;		/*
  4163                        ;		for (i = 0; i < 512; i++)
  4164                        ;		{
  4165                        ;			floppybuffer[i] =  (((LPCHAR)0xA
                    F13f5)[0]);
  4166                        ;		}
  4167                        ;		 */
  4168                        ;
  Sat Jul 10 2021  1:15                                                Page 78


  4169                        ;		//k_irq_device_event(IRQE_FLOPPY,_pseudo
                    _timer,floppybuffer);
  4170                        ;
  4171                        ;
  4172                        ;		//irq_signaled = _FloppyDiskIRQ = TRUE;
  4173                        ;		//floppy_isr();
  4174                        ;
  4175                        ;		// REENABLE FOR FLOPPY
  4176                        ;		//irq_signaled =  TRUE;
  4177                        ;
  4178                        ;		//k_irq_device_event(IRQE_FLOPPY,_pseudo
                    _timer,floppyBuffer);
  4179                        ;
  4180                        ;		//k_put_char(7,0,'#',15,0);
  4181                        ;		//k_put_char(7,0,'6',15,0);
  4182                        ;		INT_PENDING_REG0[0]&=FNX0_INT06_FDC;
  4183                        	.line	658
  4184 00:09B8: E2 20        	sep	#$20
  4185                        	longa	off
  4186 00:09BA: AF 40 01 00  	lda	>320
  4187 00:09BE: 29 40        	and	#<$40
  4188 00:09C0: 8F 40 01 00  	sta	>320
  4189 00:09C4: C2 20        	rep	#$20
  4190                        	longa	on
  4191                        ;	}
  4192                        	.line	659
  4193                        ;	if(INT_PENDING_REG0[0] & FNX0_INT07_MOUSE)
  4194                        L10042:
  4195                        	.line	660
  4196                        ;	{
  4197 00:09C6: E2 20        	sep	#$20
  4198                        	longa	off
  4199 00:09C8: AF 40 01 00  	lda	>320
  4200 00:09CC: 29 80        	and	#<$80
  4201 00:09CE: C2 20        	rep	#$20
  4202                        	longa	on
  4203 00:09D0: D0 03        	bne	L80
  4204 00:09D2: 82 15 00     	brl	L10043
  4205                        L80:
  4206                        	.line	661
  4207                        ;		_irq_keyboardTimeout = 0;
  4208                        	.line	662
  4209 00:09D5: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  4210                        ;
  4211                        ;		mouse_handler_0();
  4212                        	.line	664
  4213 00:09D8: 22 xx xx xx  	jsl	~~mouse_handler_0
  4214                        ;		//mouse_handler_1();
  4215                        ;		//mouse_handler_2();
  4216                        ;
  4217                        ;		INT_PENDING_REG0[0] &= FNX0_INT07_MOUSE;
  4218                        	.line	668
  4219 00:09DC: E2 20        	sep	#$20
  4220                        	longa	off
  4221 00:09DE: AF 40 01 00  	lda	>320
  4222 00:09E2: 29 80        	and	#<$80
  4223 00:09E4: 8F 40 01 00  	sta	>320
  4224 00:09E8: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 79


  4225                        	longa	on
  4226                        ;	}
  4227                        	.line	669
  4228                        ;	//*INT_PENDING_REG0 = *INT_PENDING_REG0;
  4229                        ;	INT_PENDING_REG0[0] = 0xFF;
  4230                        L10043:
  4231                        	.line	671
  4232 00:09EA: E2 20        	sep	#$20
  4233                        	longa	off
  4234 00:09EC: A9 FF        	lda	#$ff
  4235 00:09EE: 8F 40 01 00  	sta	>320
  4236 00:09F2: C2 20        	rep	#$20
  4237                        	longa	on
  4238                        ;	INT_PENDING_REG0[0] = 0x00;
  4239                        	.line	672
  4240 00:09F4: E2 20        	sep	#$20
  4241                        	longa	off
  4242 00:09F6: A9 00        	lda	#$0
  4243 00:09F8: 8F 40 01 00  	sta	>320
  4244 00:09FC: C2 20        	rep	#$20
  4245                        	longa	on
  4246                        ;}
  4247                        	.line	673
  4248                        L81:
  4249 00:09FE: A5 1B        	lda	<L60+2
  4250 00:0A00: 85 1F        	sta	<L60+2+4
  4251 00:0A02: A5 1A        	lda	<L60+1
  4252 00:0A04: 85 1E        	sta	<L60+1+4
  4253 00:0A06: 2B           	pld
  4254 00:0A07: 3B           	tsc
  4255 00:0A08: 18           	clc
  4256 00:0A09: 69 1D 00     	adc	#L60+4
  4257 00:0A0C: 1B           	tcs
  4258 00:0A0D: 6B           	rtl
  4259                        	.endblock	673
  4260             00000019   L60	equ	25
  4261             00000009   L61	equ	9
  4262                        	ends
  4263                        	efunc
  4264                        	.endfunc	673,9,25
  4265                        	.line	673
  4266                        ;
  4267                        ;void k_dispatch_reg1(PIRQDATA pIRQx)
  4268                        ;{
  4269                        	.line	675
  4270                        	.line	676
  4271                        	code
  4272                        	xdef	~~k_dispatch_reg1
  4273                        	func
  4274                        	.function	676
  4275                        ~~k_dispatch_reg1:
  4276                        	longa	on
  4277                        	longi	on
  4278 00:0A0E: 3B           	tsc
  4279 00:0A0F: 38           	sec
  4280 00:0A10: E9 05 00     	sbc	#L82
  4281 00:0A13: 1B           	tcs
  4282 00:0A14: 0B           	phd
  Sat Jul 10 2021  1:15                                                Page 80


  4283 00:0A15: 5B           	tcd
  4284             00000004   pIRQx_0	set	4
  4285                        	.block	676
  4286                        ;	unsigned char data = 0;
  4287                        ;	/*
  4288                        ;	char none = 0;
  4289                        ;	int dp = 20;
  4290                        ;	BYTE raw = 0;
  4291                        ;	*/
  4292                        ;	
  4293                        ;	if(INT_PENDING_REG1[0] & FNX1_INT00_KBD)
  4294             00000000   data_1	set	0
  4295                        	.sym	data,0,14,1,8
  4296                        	.sym	pIRQx,4,138,6,32,9
  4297 00:0A16: E2 20        	sep	#$20
  4298                        	longa	off
  4299 00:0A18: 64 05        	stz	<L83+data_1
  4300 00:0A1A: C2 20        	rep	#$20
  4301                        	longa	on
  4302                        	.line	684
  4303                        ;	{
  4304 00:0A1C: E2 20        	sep	#$20
  4305                        	longa	off
  4306 00:0A1E: AF 41 01 00  	lda	>321
  4307 00:0A22: 29 01        	and	#<$1
  4308 00:0A24: C2 20        	rep	#$20
  4309                        	longa	on
  4310 00:0A26: D0 03        	bne	L85
  4311 00:0A28: 82 2A 00     	brl	L10044
  4312                        L85:
  4313                        	.line	685
  4314                        ;		if(_driver_Keyboard == NULL)
  4315                        	.line	686
  4316                        ;			_driver_Keyboard = k_get_device_
                    driver(DRIVER_TYPE_KEYBOARD);
  4317 00:0A2B: AD xx xx     	lda	|~~_driver_Keyboard
  4318 00:0A2E: 0D xx xx     	ora	|~~_driver_Keyboard+2
  4319 00:0A31: F0 03        	beq	L86
  4320 00:0A33: 82 0D 00     	brl	L10045
  4321                        L86:
  4322                        	.line	687
  4323 00:0A36: F4 05 00     	pea	#<$5
  4324 00:0A39: 22 xx xx xx  	jsl	~~k_get_device_driver
  4325 00:0A3D: 8D xx xx     	sta	|~~_driver_Keyboard
  4326 00:0A40: 8E xx xx     	stx	|~~_driver_Keyboard+2
  4327                        ;
  4328                        ;		//FX_DRV_IRQ(_driver_Keyboard);
  4329                        ;
  4330                        ;		keyboard_handler();
  4331                        L10045:
  4332                        	.line	691
  4333 00:0A43: 22 xx xx xx  	jsl	~~keyboard_handler
  4334                        ;		/*
  4335                        ;		raw = mouse_read();//KBD_INPT_BUF[0];
  4336                        ;		k_irq_device_event(IRQE_KEYBOARD_RAW,_ps
                    eudo_timer,(LPVOID)raw);
  4337                        ;
  4338                        ;
  Sat Jul 10 2021  1:15                                                Page 81


  4339                        ;		_irq_keyboardTimeout = 0;
  4340                        ;		if(_irq_ktick < 1)
  4341                        ;		{
  4342                        ;			_irq_ktick = KTICK_MAX;
  4343                        ;
  4344                        ;
  4345                        ;			_irq_currentKeyPress = raw;// mo
                    use_read();//KBD_INPT_BUF[0];
  4346                        ;			_k_last_scancode = _irq_currentK
                    eyPress;
  4347                        ;
  4348                        ;			FXOS_KEY_BYTE_0 =  0;
  4349                        ;			FXOS_KEY_BYTE_1 =  _irq_keyboard
                    BufferIndex;
  4350                        ;			FXOS_KEY_BYTE_2 =  _irq_currentK
                    eyPress;
  4351                        ;
  4352                        ;			_irq_keyboardBuffer[_irq_keyboar
                    dBufferIndex] = _irq_currentKeyPress;
  4353                        ;
  4354                        ;			if(_irq_currentKeyPress == 0xE0)
  4355                        ;				_k_extendedKeyMode = TRU
                    E;
  4356                        ;			else
  4357                        ;				k_irq_device_event(IRQE_
                    KEYBOARD,_pseudo_timer,&_irq_keyboardBuffer[_irq_keyboardBuf
                    ferIndex]);
  4358                        ;
  4359                        ;			_irq_keyboardBufferIndex++;
  4360                        ;			if(_irq_keyboardBufferIndex > 19
                    )
  4361                        ;				_irq_keyboardBufferIndex
                     = 0;
  4362                        ;
  4363                        ;			//k_put_char(11,42,_irq_currentK
                    eyPress,15,0);
  4364                        ;
  4365                        ;			if(_irq_currentKeyPress == 0xE0)
  4366                        ;				_k_extendedKeyMode = TRU
                    E;
  4367                        ;
  4368                        ;		}
  4369                        ;		else if(_k_extendedKeyMode == TRUE)
  4370                        ;		{
  4371                        ;			_k_extendedKeyMode = FALSE;
  4372                        ;
  4373                        ;			_irq_currentKeyPress = raw;// mo
                    use_read();//KBD_INPT_BUF[0];
  4374                        ;			_k_last_scancode = _irq_currentK
                    eyPress;
  4375                        ;
  4376                        ;			FXOS_KEY_BYTE_0 =  0;
  4377                        ;			FXOS_KEY_BYTE_1 =  _irq_keyboard
                    BufferIndex;
  4378                        ;			FXOS_KEY_BYTE_2 =  _irq_currentK
                    eyPress;
  4379                        ;
  4380                        ;			_irq_keyboardBuffer[_irq_keyboar
  Sat Jul 10 2021  1:15                                                Page 82


                    dBufferIndex] = (_irq_currentKeyPress | 0xE000);
  4381                        ;
  4382                        ;			k_irq_device_event(IRQE_KEYBOARD
                    ,_pseudo_timer,&_irq_keyboardBuffer[_irq_keyboardBufferIndex
                    ]);
  4383                        ;
  4384                        ;			_irq_keyboardBufferIndex++;
  4385                        ;			if(_irq_keyboardBufferIndex > 19
                    )
  4386                        ;				_irq_keyboardBufferIndex
                     = 0;
  4387                        ;
  4388                        ;			//k_put_char(11,42,_irq_currentK
                    eyPress,15,0);
  4389                        ;
  4390                        ;		}
  4391                        ;		else
  4392                        ;		{
  4393                        ;			//k_put_char(2,40,'D',15,0);
  4394                        ;			//if(_k_last_scancode != _irq_cu
                    rrentKeyPress)
  4395                        ;				_irq_currentKeyPress = 0
                    ;
  4396                        ;
  4397                        ;			none = raw;//mouse_read();//KBD_
                    INPT_BUF[0];
  4398                        ;		}
  4399                        ;	
  4400                        ;		_irq_statusReg&=CHK_KEYMOUSE_CTL;
  4401                        ;		*/
  4402                        ;		
  4403                        ;		INT_PENDING_REG1[0] &= FNX1_INT00_KBD;
  4404                        	.line	761
  4405 00:0A47: E2 20        	sep	#$20
  4406                        	longa	off
  4407 00:0A49: AF 41 01 00  	lda	>321
  4408 00:0A4D: 29 01        	and	#<$1
  4409 00:0A4F: 8F 41 01 00  	sta	>321
  4410 00:0A53: C2 20        	rep	#$20
  4411                        	longa	on
  4412                        ;	}
  4413                        	.line	762
  4414                        ;	
  4415                        ;	if(INT_PENDING_REG1[0] & FNX1_INT01_SC0)
  4416                        L10044:
  4417                        	.line	764
  4418                        ;	{
  4419 00:0A55: E2 20        	sep	#$20
  4420                        	longa	off
  4421 00:0A57: AF 41 01 00  	lda	>321
  4422 00:0A5B: 29 02        	and	#<$2
  4423 00:0A5D: C2 20        	rep	#$20
  4424                        	longa	on
  4425 00:0A5F: D0 03        	bne	L87
  4426 00:0A61: 82 0E 00     	brl	L10046
  4427                        L87:
  4428                        	.line	765
  4429                        ;		//k_put_char(11,line,irqspinner[scirq11+
  Sat Jul 10 2021  1:15                                                Page 83


                    +],15,0);
  4430                        ;		//if(scirq11>3)scirq11 = 0;
  4431                        ;
  4432                        ;		//k_put_char(2,1,' ',15,0);
  4433                        ;		//k_put_char(2,1,'1',15,0);
  4434                        ;		INT_PENDING_REG1[0]&=FNX1_INT01_SC0;
  4435                        	.line	771
  4436 00:0A64: E2 20        	sep	#$20
  4437                        	longa	off
  4438 00:0A66: AF 41 01 00  	lda	>321
  4439 00:0A6A: 29 02        	and	#<$2
  4440 00:0A6C: 8F 41 01 00  	sta	>321
  4441 00:0A70: C2 20        	rep	#$20
  4442                        	longa	on
  4443                        ;	}
  4444                        	.line	772
  4445                        ;	if(INT_PENDING_REG1[0] & FNX1_INT02_SC1)
  4446                        L10046:
  4447                        	.line	773
  4448                        ;	{
  4449 00:0A72: E2 20        	sep	#$20
  4450                        	longa	off
  4451 00:0A74: AF 41 01 00  	lda	>321
  4452 00:0A78: 29 04        	and	#<$4
  4453 00:0A7A: C2 20        	rep	#$20
  4454                        	longa	on
  4455 00:0A7C: D0 03        	bne	L88
  4456 00:0A7E: 82 0E 00     	brl	L10047
  4457                        L88:
  4458                        	.line	774
  4459                        ;		//k_put_char(12,line,irqspinner[scirq12+
                    +],15,0);
  4460                        ;		//if(scirq12>3)scirq12 = 0;
  4461                        ;		
  4462                        ;		//k_put_char(3,1,' ',15,0);
  4463                        ;		//k_put_char(3,1,'2',15,0);
  4464                        ;		INT_PENDING_REG1[0]&=FNX1_INT02_SC1;
  4465                        	.line	780
  4466 00:0A81: E2 20        	sep	#$20
  4467                        	longa	off
  4468 00:0A83: AF 41 01 00  	lda	>321
  4469 00:0A87: 29 04        	and	#<$4
  4470 00:0A89: 8F 41 01 00  	sta	>321
  4471 00:0A8D: C2 20        	rep	#$20
  4472                        	longa	on
  4473                        ;	}
  4474                        	.line	781
  4475                        ;	if(INT_PENDING_REG1[0] & FNX1_INT03_COM2)
  4476                        L10047:
  4477                        	.line	782
  4478                        ;	{
  4479 00:0A8F: E2 20        	sep	#$20
  4480                        	longa	off
  4481 00:0A91: AF 41 01 00  	lda	>321
  4482 00:0A95: 29 08        	and	#<$8
  4483 00:0A97: C2 20        	rep	#$20
  4484                        	longa	on
  4485 00:0A99: D0 03        	bne	L89
  Sat Jul 10 2021  1:15                                                Page 84


  4486 00:0A9B: 82 34 00     	brl	L10048
  4487                        L89:
  4488                        	.line	783
  4489                        ;		//k_put_char(13,line,irqspinner[scirq13+
                    +],15,0);
  4490                        ;		//if(scirq13>3)scirq13 = 0;
  4491                        ;		
  4492                        ;		//k_print_uart_status_com2(31);
  4493                        ;		data = UART2_BASE[0];
  4494                        	.line	788
  4495 00:0A9E: E2 20        	sep	#$20
  4496                        	longa	off
  4497 00:0AA0: AF F8 18 AF  	lda	>11475192
  4498 00:0AA4: 85 05        	sta	<L83+data_1
  4499 00:0AA6: C2 20        	rep	#$20
  4500                        	longa	on
  4501                        ;		//k_irq_device_event(IRQE_COM2,_pseudo_t
                    imer,&data);
  4502                        ;		//k_put_char(dp++,31,data,15,0);
  4503                        ;		//k_put_char(31,1,'*' ,15,0);
  4504                        ;		while(UART2_BASE[UART_LSR] & 0x01)
  4505                        	.line	792
  4506                        L10049:
  4507 00:0AA8: E2 20        	sep	#$20
  4508                        	longa	off
  4509 00:0AAA: AF FD 18 AF  	lda	>11475197
  4510 00:0AAE: 29 01        	and	#<$1
  4511 00:0AB0: C2 20        	rep	#$20
  4512                        	longa	on
  4513 00:0AB2: D0 03        	bne	L90
  4514 00:0AB4: 82 0D 00     	brl	L10050
  4515                        L90:
  4516                        ;		{
  4517                        	.line	793
  4518                        ;			data = UART2_BASE[0];
  4519                        	.line	794
  4520 00:0AB7: E2 20        	sep	#$20
  4521                        	longa	off
  4522 00:0AB9: AF F8 18 AF  	lda	>11475192
  4523 00:0ABD: 85 05        	sta	<L83+data_1
  4524 00:0ABF: C2 20        	rep	#$20
  4525                        	longa	on
  4526                        ;			//k_put_char(dp++,31,data,15,0);
  4527                        ;		}
  4528                        	.line	796
  4529 00:0AC1: 82 E4 FF     	brl	L10049
  4530                        L10050:
  4531                        ;		//k_print_uart_status_com2(32);
  4532                        ;		//k_put_char(30,1,'M' ,15,0);
  4533                        ;		
  4534                        ;		//k_put_char(20,31,data+64,15,0);
  4535                        ;		//k_put_char(4,1,' ',15,0);
  4536                        ;		//k_put_char(4,1,'3',15,0);
  4537                        ;		INT_PENDING_REG1[0]&=FNX1_INT03_COM2;
  4538                        	.line	803
  4539 00:0AC4: E2 20        	sep	#$20
  4540                        	longa	off
  4541 00:0AC6: AF 41 01 00  	lda	>321
  Sat Jul 10 2021  1:15                                                Page 85


  4542 00:0ACA: 29 08        	and	#<$8
  4543 00:0ACC: 8F 41 01 00  	sta	>321
  4544 00:0AD0: C2 20        	rep	#$20
  4545                        	longa	on
  4546                        ;	}
  4547                        	.line	804
  4548                        ;	if(INT_PENDING_REG1[0] & FNX1_INT04_COM1)
  4549                        L10048:
  4550                        	.line	805
  4551                        ;	{
  4552 00:0AD2: E2 20        	sep	#$20
  4553                        	longa	off
  4554 00:0AD4: AF 41 01 00  	lda	>321
  4555 00:0AD8: 29 10        	and	#<$10
  4556 00:0ADA: C2 20        	rep	#$20
  4557                        	longa	on
  4558 00:0ADC: D0 03        	bne	L91
  4559 00:0ADE: 82 4C 00     	brl	L10051
  4560                        L91:
  4561                        	.line	806
  4562                        ;
  4563                        ;		//k_put_char(14,line,irqspinner[scirq14+
                    +],15,0);
  4564                        ;		//if(scirq14>3)scirq14 = 0;
  4565                        ;		
  4566                        ;		//k_print_uart_status_com1(29);
  4567                        ;		data = UART1_BASE[0];
  4568                        	.line	812
  4569 00:0AE1: E2 20        	sep	#$20
  4570                        	longa	off
  4571 00:0AE3: AF F8 18 AF  	lda	>11475192
  4572 00:0AE7: 85 05        	sta	<L83+data_1
  4573 00:0AE9: C2 20        	rep	#$20
  4574                        	longa	on
  4575                        ;		k_irq_device_event(IRQE_COM1,_pseudo_tim
                    er,&data);
  4576                        	.line	813
  4577 00:0AEB: F4 00 00     	pea	#0
  4578 00:0AEE: 18           	clc
  4579 00:0AEF: 7B           	tdc
  4580 00:0AF0: 69 05 00     	adc	#<L83+data_1
  4581 00:0AF3: 48           	pha
  4582 00:0AF4: AD xx xx     	lda	|~~_pseudo_timer+2
  4583 00:0AF7: 48           	pha
  4584 00:0AF8: AD xx xx     	lda	|~~_pseudo_timer
  4585 00:0AFB: 48           	pha
  4586 00:0AFC: F4 03 00     	pea	#<$3
  4587 00:0AFF: 22 xx xx xx  	jsl	~~k_irq_device_event
  4588                        ;		//k_put_char(30,1,'*' ,15,0);
  4589                        ;		//if(data)
  4590                        ;		//	k_put_char(30,2,data,15,0);
  4591                        ;		//k_put_char(31,1,'N' ,15,0);
  4592                        ;		//k_put_char(dp++,31,data+64,15,0);
  4593                        ;		while(UART1_BASE[UART_LSR] & 0x01)
  4594                        	.line	819
  4595                        L10052:
  4596 00:0B03: E2 20        	sep	#$20
  4597                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 86


  4598 00:0B05: AF FD 18 AF  	lda	>11475197
  4599 00:0B09: 29 01        	and	#<$1
  4600 00:0B0B: C2 20        	rep	#$20
  4601                        	longa	on
  4602 00:0B0D: D0 03        	bne	L92
  4603 00:0B0F: 82 0D 00     	brl	L10053
  4604                        L92:
  4605                        ;		{
  4606                        	.line	820
  4607                        ;			data = UART1_BASE[0];
  4608                        	.line	821
  4609 00:0B12: E2 20        	sep	#$20
  4610                        	longa	off
  4611 00:0B14: AF F8 18 AF  	lda	>11475192
  4612 00:0B18: 85 05        	sta	<L83+data_1
  4613 00:0B1A: C2 20        	rep	#$20
  4614                        	longa	on
  4615                        ;		}
  4616                        	.line	822
  4617 00:0B1C: 82 E4 FF     	brl	L10052
  4618                        L10053:
  4619                        ;		//k_print_uart_status_com1(30);
  4620                        ;		//k_put_char(31,1,'*' ,15,0);
  4621                        ;		//k_put_char(30,3,'*' ,15,0);
  4622                        ;		
  4623                        ;		//k_put_char(5,1,' ',15,0);
  4624                        ;		//k_put_char(5,1,'4',15,0);
  4625                        ;		INT_PENDING_REG1[0]&=FNX1_INT04_COM1;
  4626                        	.line	829
  4627 00:0B1F: E2 20        	sep	#$20
  4628                        	longa	off
  4629 00:0B21: AF 41 01 00  	lda	>321
  4630 00:0B25: 29 10        	and	#<$10
  4631 00:0B27: 8F 41 01 00  	sta	>321
  4632 00:0B2B: C2 20        	rep	#$20
  4633                        	longa	on
  4634                        ;	}
  4635                        	.line	830
  4636                        ;	if(INT_PENDING_REG1[0] & FNX1_INT05_MPU401)
  4637                        L10051:
  4638                        	.line	831
  4639                        ;	{
  4640 00:0B2D: E2 20        	sep	#$20
  4641                        	longa	off
  4642 00:0B2F: AF 41 01 00  	lda	>321
  4643 00:0B33: 29 20        	and	#<$20
  4644 00:0B35: C2 20        	rep	#$20
  4645                        	longa	on
  4646 00:0B37: D0 03        	bne	L93
  4647 00:0B39: 82 0E 00     	brl	L10054
  4648                        L93:
  4649                        	.line	832
  4650                        ;		//k_put_char(15,line,irqspinner[scirq15+
                    +],15,0);
  4651                        ;		//if(scirq15>3)scirq15 = 0;
  4652                        ;
  4653                        ;
  4654                        ;		//k_put_char(6,1,' ',15,0);
  Sat Jul 10 2021  1:15                                                Page 87


  4655                        ;		//k_put_char(6,1,'5',15,0);
  4656                        ;		INT_PENDING_REG1[0]&=FNX1_INT05_MPU401;
  4657                        	.line	839
  4658 00:0B3C: E2 20        	sep	#$20
  4659                        	longa	off
  4660 00:0B3E: AF 41 01 00  	lda	>321
  4661 00:0B42: 29 20        	and	#<$20
  4662 00:0B44: 8F 41 01 00  	sta	>321
  4663 00:0B48: C2 20        	rep	#$20
  4664                        	longa	on
  4665                        ;	}
  4666                        	.line	840
  4667                        ;	if(INT_PENDING_REG1[0] & FNX1_INT06_LPT)
  4668                        L10054:
  4669                        	.line	841
  4670                        ;	{
  4671 00:0B4A: E2 20        	sep	#$20
  4672                        	longa	off
  4673 00:0B4C: AF 41 01 00  	lda	>321
  4674 00:0B50: 29 40        	and	#<$40
  4675 00:0B52: C2 20        	rep	#$20
  4676                        	longa	on
  4677 00:0B54: D0 03        	bne	L94
  4678 00:0B56: 82 0E 00     	brl	L10055
  4679                        L94:
  4680                        	.line	842
  4681                        ;		//k_put_char(16,line,irqspinner[scirq16+
                    +],15,0);
  4682                        ;		//if(scirq16>3)scirq16 = 0;
  4683                        ;
  4684                        ;		//k_put_char(6,1,' ',15,0);
  4685                        ;		//k_put_char(6,1,'6',15,0);
  4686                        ;		INT_PENDING_REG1[0]&=FNX1_INT06_LPT;
  4687                        	.line	848
  4688 00:0B59: E2 20        	sep	#$20
  4689                        	longa	off
  4690 00:0B5B: AF 41 01 00  	lda	>321
  4691 00:0B5F: 29 40        	and	#<$40
  4692 00:0B61: 8F 41 01 00  	sta	>321
  4693 00:0B65: C2 20        	rep	#$20
  4694                        	longa	on
  4695                        ;	}
  4696                        	.line	849
  4697                        ;	if(INT_PENDING_REG1[0] & FNX1_INT07_SDCARD)
  4698                        L10055:
  4699                        	.line	850
  4700                        ;	{
  4701 00:0B67: E2 20        	sep	#$20
  4702                        	longa	off
  4703 00:0B69: AF 41 01 00  	lda	>321
  4704 00:0B6D: 29 80        	and	#<$80
  4705 00:0B6F: C2 20        	rep	#$20
  4706                        	longa	on
  4707 00:0B71: D0 03        	bne	L95
  4708 00:0B73: 82 2B 00     	brl	L10056
  4709                        L95:
  4710                        	.line	851
  4711                        ;		//k_put_char(17,line,irqspinner[scirq17+
  Sat Jul 10 2021  1:15                                                Page 88


                    +],15,0);
  4712                        ;		//if(scirq17>3)scirq17 = 0;
  4713                        ;
  4714                        ;		k_irq_device_event(IRQE_SDCARD,_pseudo_t
                    imer,&_k_default_arg);
  4715                        	.line	855
  4716 00:0B76: A9 xx xx     	lda	#<~~_k_default_arg
  4717 00:0B79: 85 01        	sta	<R0
  4718                        	xref	_BEG_DATA
  4719 00:0B7B: A9 xx xx     	lda	#_BEG_DATA>>16
  4720 00:0B7E: 85 03        	sta	<R0+2
  4721 00:0B80: D4 03        	pei	<R0+2
  4722 00:0B82: D4 01        	pei	<R0
  4723 00:0B84: AD xx xx     	lda	|~~_pseudo_timer+2
  4724 00:0B87: 48           	pha
  4725 00:0B88: AD xx xx     	lda	|~~_pseudo_timer
  4726 00:0B8B: 48           	pha
  4727 00:0B8C: F4 07 00     	pea	#<$7
  4728 00:0B8F: 22 xx xx xx  	jsl	~~k_irq_device_event
  4729                        ;
  4730                        ;		//k_put_char(7,1,' ',15,0);
  4731                        ;		//k_put_char(7,1,'7',15,0);
  4732                        ;		INT_PENDING_REG1[0]&=FNX1_INT07_SDCARD;
  4733                        	.line	859
  4734 00:0B93: E2 20        	sep	#$20
  4735                        	longa	off
  4736 00:0B95: AF 41 01 00  	lda	>321
  4737 00:0B99: 29 80        	and	#<$80
  4738 00:0B9B: 8F 41 01 00  	sta	>321
  4739 00:0B9F: C2 20        	rep	#$20
  4740                        	longa	on
  4741                        ;	}
  4742                        	.line	860
  4743                        ;	//*INT_PENDING_REG1=*INT_PENDING_REG1;
  4744                        ;	INT_PENDING_REG1[0]=0xFF;
  4745                        L10056:
  4746                        	.line	862
  4747 00:0BA1: E2 20        	sep	#$20
  4748                        	longa	off
  4749 00:0BA3: A9 FF        	lda	#$ff
  4750 00:0BA5: 8F 41 01 00  	sta	>321
  4751 00:0BA9: C2 20        	rep	#$20
  4752                        	longa	on
  4753                        ;	INT_PENDING_REG1[0]=0x00;
  4754                        	.line	863
  4755 00:0BAB: E2 20        	sep	#$20
  4756                        	longa	off
  4757 00:0BAD: A9 00        	lda	#$0
  4758 00:0BAF: 8F 41 01 00  	sta	>321
  4759 00:0BB3: C2 20        	rep	#$20
  4760                        	longa	on
  4761                        ;	
  4762                        ;	//k_put_char(2,40,'Z',15,0);
  4763                        ;}
  4764                        	.line	866
  4765                        L96:
  4766 00:0BB5: A5 07        	lda	<L82+2
  4767 00:0BB7: 85 0B        	sta	<L82+2+4
  Sat Jul 10 2021  1:15                                                Page 89


  4768 00:0BB9: A5 06        	lda	<L82+1
  4769 00:0BBB: 85 0A        	sta	<L82+1+4
  4770 00:0BBD: 2B           	pld
  4771 00:0BBE: 3B           	tsc
  4772 00:0BBF: 18           	clc
  4773 00:0BC0: 69 09 00     	adc	#L82+4
  4774 00:0BC3: 1B           	tcs
  4775 00:0BC4: 6B           	rtl
  4776                        	.endblock	866
  4777             00000005   L82	equ	5
  4778             00000005   L83	equ	5
  4779                        	ends
  4780                        	efunc
  4781                        	.endfunc	866,5,5
  4782                        	.line	866
  4783                        ;
  4784                        ;void k_dispatch_reg2(PIRQDATA pIRQx)
  4785                        ;{
  4786                        	.line	868
  4787                        	.line	869
  4788                        	code
  4789                        	xdef	~~k_dispatch_reg2
  4790                        	func
  4791                        	.function	869
  4792                        ~~k_dispatch_reg2:
  4793                        	longa	on
  4794                        	longi	on
  4795 00:0BC5: 3B           	tsc
  4796 00:0BC6: 38           	sec
  4797 00:0BC7: E9 04 00     	sbc	#L97
  4798 00:0BCA: 1B           	tcs
  4799 00:0BCB: 0B           	phd
  4800 00:0BCC: 5B           	tcd
  4801             00000004   pIRQx_0	set	4
  4802                        	.block	869
  4803                        ;	//int line = pIRQ->line;
  4804                        ;	
  4805                        ;	//char FAR *keyCode = pIRQ->keycode;
  4806                        ;	
  4807                        ;	//line++;
  4808                        ;	
  4809                        ;	//k_put_char(9,line,irqspinner[scirq2++],15,0);
  4810                        ;	//if(scirq2>3) scirq2 = 0;
  4811                        ;
  4812                        ;	//k_put_char(3,40,'A',15,0);
  4813                        ;
  4814                        ;	if(INT_PENDING_REG2[0] & FNX2_INT00_OPL2R)
  4815                        	.sym	pIRQx,4,138,6,32,9
  4816                        	.line	881
  4817                        ;	{
  4818 00:0BCD: E2 20        	sep	#$20
  4819                        	longa	off
  4820 00:0BCF: AF 42 01 00  	lda	>322
  4821 00:0BD3: 29 01        	and	#<$1
  4822 00:0BD5: C2 20        	rep	#$20
  4823                        	longa	on
  4824 00:0BD7: D0 03        	bne	L100
  4825 00:0BD9: 82 2B 00     	brl	L10057
  Sat Jul 10 2021  1:15                                                Page 90


  4826                        L100:
  4827                        	.line	882
  4828                        ;		//k_put_char(10,line,irqspinner[scirq20+
                    +],15,0);
  4829                        ;		//if(scirq20>3) scirq20 = 0;
  4830                        ;		//k_put_char(2,2,' ',15,0);
  4831                        ;		//k_put_char(2,2,'0',15,0);
  4832                        ;		k_irq_device_event(IRQE_OPL2R,_pseudo_ti
                    mer,&_k_default_arg);
  4833                        	.line	887
  4834 00:0BDC: A9 xx xx     	lda	#<~~_k_default_arg
  4835 00:0BDF: 85 01        	sta	<R0
  4836                        	xref	_BEG_DATA
  4837 00:0BE1: A9 xx xx     	lda	#_BEG_DATA>>16
  4838 00:0BE4: 85 03        	sta	<R0+2
  4839 00:0BE6: D4 03        	pei	<R0+2
  4840 00:0BE8: D4 01        	pei	<R0
  4841 00:0BEA: AD xx xx     	lda	|~~_pseudo_timer+2
  4842 00:0BED: 48           	pha
  4843 00:0BEE: AD xx xx     	lda	|~~_pseudo_timer
  4844 00:0BF1: 48           	pha
  4845 00:0BF2: F4 0C 00     	pea	#<$c
  4846 00:0BF5: 22 xx xx xx  	jsl	~~k_irq_device_event
  4847                        ;
  4848                        ;		INT_PENDING_REG2[0]&=FNX2_INT00_OPL2R;
  4849                        	.line	889
  4850 00:0BF9: E2 20        	sep	#$20
  4851                        	longa	off
  4852 00:0BFB: AF 42 01 00  	lda	>322
  4853 00:0BFF: 29 01        	and	#<$1
  4854 00:0C01: 8F 42 01 00  	sta	>322
  4855 00:0C05: C2 20        	rep	#$20
  4856                        	longa	on
  4857                        ;	}
  4858                        	.line	890
  4859                        ;	if(INT_PENDING_REG2[0] & FNX2_INT01_OPL2L)
  4860                        L10057:
  4861                        	.line	891
  4862                        ;	{
  4863 00:0C07: E2 20        	sep	#$20
  4864                        	longa	off
  4865 00:0C09: AF 42 01 00  	lda	>322
  4866 00:0C0D: 29 02        	and	#<$2
  4867 00:0C0F: C2 20        	rep	#$20
  4868                        	longa	on
  4869 00:0C11: D0 03        	bne	L101
  4870 00:0C13: 82 2B 00     	brl	L10058
  4871                        L101:
  4872                        	.line	892
  4873                        ;		//k_put_char(11,line,irqspinner[scirq21+
                    +],15,0);
  4874                        ;		//if(scirq21>3) scirq21 = 0;
  4875                        ;		//k_put_char(3,2,' ',15,0);
  4876                        ;		//k_put_char(3,2,'1',15,0);
  4877                        ;		k_irq_device_event(IRQE_OPL2L,_pseudo_ti
                    mer,&_k_default_arg);
  4878                        	.line	897
  4879 00:0C16: A9 xx xx     	lda	#<~~_k_default_arg
  Sat Jul 10 2021  1:15                                                Page 91


  4880 00:0C19: 85 01        	sta	<R0
  4881                        	xref	_BEG_DATA
  4882 00:0C1B: A9 xx xx     	lda	#_BEG_DATA>>16
  4883 00:0C1E: 85 03        	sta	<R0+2
  4884 00:0C20: D4 03        	pei	<R0+2
  4885 00:0C22: D4 01        	pei	<R0
  4886 00:0C24: AD xx xx     	lda	|~~_pseudo_timer+2
  4887 00:0C27: 48           	pha
  4888 00:0C28: AD xx xx     	lda	|~~_pseudo_timer
  4889 00:0C2B: 48           	pha
  4890 00:0C2C: F4 0D 00     	pea	#<$d
  4891 00:0C2F: 22 xx xx xx  	jsl	~~k_irq_device_event
  4892                        ;		INT_PENDING_REG2[0]&=FNX2_INT01_OPL2L;
  4893                        	.line	898
  4894 00:0C33: E2 20        	sep	#$20
  4895                        	longa	off
  4896 00:0C35: AF 42 01 00  	lda	>322
  4897 00:0C39: 29 02        	and	#<$2
  4898 00:0C3B: 8F 42 01 00  	sta	>322
  4899 00:0C3F: C2 20        	rep	#$20
  4900                        	longa	on
  4901                        ;	}
  4902                        	.line	899
  4903                        ;	if(INT_PENDING_REG2[0] & FNX2_INT02_BTX_INT)
  4904                        L10058:
  4905                        	.line	900
  4906                        ;	{
  4907 00:0C41: E2 20        	sep	#$20
  4908                        	longa	off
  4909 00:0C43: AF 42 01 00  	lda	>322
  4910 00:0C47: 29 04        	and	#<$4
  4911 00:0C49: C2 20        	rep	#$20
  4912                        	longa	on
  4913 00:0C4B: D0 03        	bne	L102
  4914 00:0C4D: 82 0E 00     	brl	L10059
  4915                        L102:
  4916                        	.line	901
  4917                        ;		//k_put_char(12,line,irqspinner[scirq22+
                    +],15,0);
  4918                        ;		//if(scirq22>3) scirq22 = 0;
  4919                        ;		//k_put_char(4,2,' ',15,0);
  4920                        ;		//k_put_char(4,2,'2',15,0);
  4921                        ;		INT_PENDING_REG2[0]&=FNX2_INT02_BTX_INT;
  4922                        	.line	906
  4923 00:0C50: E2 20        	sep	#$20
  4924                        	longa	off
  4925 00:0C52: AF 42 01 00  	lda	>322
  4926 00:0C56: 29 04        	and	#<$4
  4927 00:0C58: 8F 42 01 00  	sta	>322
  4928 00:0C5C: C2 20        	rep	#$20
  4929                        	longa	on
  4930                        ;	}
  4931                        	.line	907
  4932                        ;	if(INT_PENDING_REG2[0] & FNX2_INT03_SDMA)
  4933                        L10059:
  4934                        	.line	908
  4935                        ;	{
  4936 00:0C5E: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 92


  4937                        	longa	off
  4938 00:0C60: AF 42 01 00  	lda	>322
  4939 00:0C64: 29 08        	and	#<$8
  4940 00:0C66: C2 20        	rep	#$20
  4941                        	longa	on
  4942 00:0C68: D0 03        	bne	L103
  4943 00:0C6A: 82 2B 00     	brl	L10060
  4944                        L103:
  4945                        	.line	909
  4946                        ;		//k_put_char(13,line,irqspinner[scirq23+
                    +],15,0);
  4947                        ;		//if(scirq23>3) scirq23 = 0;
  4948                        ;		//k_put_char(5,2,' ',15,0);
  4949                        ;		//k_put_char(5,2,'3',15,0);
  4950                        ;		k_irq_device_event(IRQE_SDMA,_pseudo_tim
                    er,&_k_default_arg);
  4951                        	.line	914
  4952 00:0C6D: A9 xx xx     	lda	#<~~_k_default_arg
  4953 00:0C70: 85 01        	sta	<R0
  4954                        	xref	_BEG_DATA
  4955 00:0C72: A9 xx xx     	lda	#_BEG_DATA>>16
  4956 00:0C75: 85 03        	sta	<R0+2
  4957 00:0C77: D4 03        	pei	<R0+2
  4958 00:0C79: D4 01        	pei	<R0
  4959 00:0C7B: AD xx xx     	lda	|~~_pseudo_timer+2
  4960 00:0C7E: 48           	pha
  4961 00:0C7F: AD xx xx     	lda	|~~_pseudo_timer
  4962 00:0C82: 48           	pha
  4963 00:0C83: F4 0F 00     	pea	#<$f
  4964 00:0C86: 22 xx xx xx  	jsl	~~k_irq_device_event
  4965                        ;		INT_PENDING_REG2[0]&=FNX2_INT03_SDMA;
  4966                        	.line	915
  4967 00:0C8A: E2 20        	sep	#$20
  4968                        	longa	off
  4969 00:0C8C: AF 42 01 00  	lda	>322
  4970 00:0C90: 29 08        	and	#<$8
  4971 00:0C92: 8F 42 01 00  	sta	>322
  4972 00:0C96: C2 20        	rep	#$20
  4973                        	longa	on
  4974                        ;	}
  4975                        	.line	916
  4976                        ;	if(INT_PENDING_REG2[0] & FNX2_INT04_VDMA)
  4977                        L10060:
  4978                        	.line	917
  4979                        ;	{
  4980 00:0C98: E2 20        	sep	#$20
  4981                        	longa	off
  4982 00:0C9A: AF 42 01 00  	lda	>322
  4983 00:0C9E: 29 10        	and	#<$10
  4984 00:0CA0: C2 20        	rep	#$20
  4985                        	longa	on
  4986 00:0CA2: D0 03        	bne	L104
  4987 00:0CA4: 82 2B 00     	brl	L10061
  4988                        L104:
  4989                        	.line	918
  4990                        ;		//k_put_char(14,line,irqspinner[scirq24+
                    +],15,0);
  4991                        ;		//if(scirq24>3) scirq24 = 0;
  Sat Jul 10 2021  1:15                                                Page 93


  4992                        ;		//k_put_char(6,2,' ',15,0);
  4993                        ;		//k_put_char(6,2,'4',15,0);
  4994                        ;		k_irq_device_event(IRQE_VDMA,_pseudo_tim
                    er,&_k_default_arg);
  4995                        	.line	923
  4996 00:0CA7: A9 xx xx     	lda	#<~~_k_default_arg
  4997 00:0CAA: 85 01        	sta	<R0
  4998                        	xref	_BEG_DATA
  4999 00:0CAC: A9 xx xx     	lda	#_BEG_DATA>>16
  5000 00:0CAF: 85 03        	sta	<R0+2
  5001 00:0CB1: D4 03        	pei	<R0+2
  5002 00:0CB3: D4 01        	pei	<R0
  5003 00:0CB5: AD xx xx     	lda	|~~_pseudo_timer+2
  5004 00:0CB8: 48           	pha
  5005 00:0CB9: AD xx xx     	lda	|~~_pseudo_timer
  5006 00:0CBC: 48           	pha
  5007 00:0CBD: F4 0E 00     	pea	#<$e
  5008 00:0CC0: 22 xx xx xx  	jsl	~~k_irq_device_event
  5009                        ;		INT_PENDING_REG2[0]&=FNX2_INT04_VDMA;
  5010                        	.line	924
  5011 00:0CC4: E2 20        	sep	#$20
  5012                        	longa	off
  5013 00:0CC6: AF 42 01 00  	lda	>322
  5014 00:0CCA: 29 10        	and	#<$10
  5015 00:0CCC: 8F 42 01 00  	sta	>322
  5016 00:0CD0: C2 20        	rep	#$20
  5017                        	longa	on
  5018                        ;	}
  5019                        	.line	925
  5020                        ;	if(INT_PENDING_REG2[0] & FNX1_INT06_LPT)
  5021                        L10061:
  5022                        	.line	926
  5023                        ;	{
  5024 00:0CD2: E2 20        	sep	#$20
  5025                        	longa	off
  5026 00:0CD4: AF 42 01 00  	lda	>322
  5027 00:0CD8: 29 40        	and	#<$40
  5028 00:0CDA: C2 20        	rep	#$20
  5029                        	longa	on
  5030 00:0CDC: D0 03        	bne	L105
  5031 00:0CDE: 82 2B 00     	brl	L10062
  5032                        L105:
  5033                        	.line	927
  5034                        ;		//k_put_char(16,line,irqspinner[scirq26+
                    +],15,0);
  5035                        ;		//if(scirq26>3) scirq26 = 0;
  5036                        ;		//k_put_char(7,2,' ',15,0);
  5037                        ;		//k_put_char(7,2,'6',15,0);
  5038                        ;		k_irq_device_event(IRQE_LPT_PORT0,_pseud
                    o_timer,&_k_default_arg);
  5039                        	.line	932
  5040 00:0CE1: A9 xx xx     	lda	#<~~_k_default_arg
  5041 00:0CE4: 85 01        	sta	<R0
  5042                        	xref	_BEG_DATA
  5043 00:0CE6: A9 xx xx     	lda	#_BEG_DATA>>16
  5044 00:0CE9: 85 03        	sta	<R0+2
  5045 00:0CEB: D4 03        	pei	<R0+2
  5046 00:0CED: D4 01        	pei	<R0
  Sat Jul 10 2021  1:15                                                Page 94


  5047 00:0CEF: AD xx xx     	lda	|~~_pseudo_timer+2
  5048 00:0CF2: 48           	pha
  5049 00:0CF3: AD xx xx     	lda	|~~_pseudo_timer
  5050 00:0CF6: 48           	pha
  5051 00:0CF7: F4 0A 00     	pea	#<$a
  5052 00:0CFA: 22 xx xx xx  	jsl	~~k_irq_device_event
  5053                        ;
  5054                        ;		INT_PENDING_REG2[0]&=FNX1_INT06_LPT;
  5055                        	.line	934
  5056 00:0CFE: E2 20        	sep	#$20
  5057                        	longa	off
  5058 00:0D00: AF 42 01 00  	lda	>322
  5059 00:0D04: 29 40        	and	#<$40
  5060 00:0D06: 8F 42 01 00  	sta	>322
  5061 00:0D0A: C2 20        	rep	#$20
  5062                        	longa	on
  5063                        ;	}
  5064                        	.line	935
  5065                        ;	if(INT_PENDING_REG2[0] & FNX2_INT07_SDCARD)
  5066                        L10062:
  5067                        	.line	936
  5068                        ;	{
  5069 00:0D0C: E2 20        	sep	#$20
  5070                        	longa	off
  5071 00:0D0E: AF 42 01 00  	lda	>322
  5072 00:0D12: 29 80        	and	#<$80
  5073 00:0D14: C2 20        	rep	#$20
  5074                        	longa	on
  5075 00:0D16: D0 03        	bne	L106
  5076 00:0D18: 82 2B 00     	brl	L10063
  5077                        L106:
  5078                        	.line	937
  5079                        ;		//k_put_char(16,line,irqspinner[scirq26+
                    +],15,0);
  5080                        ;		//if(scirq26>3) scirq26 = 0;
  5081                        ;		//k_put_char(7,2,' ',15,0);
  5082                        ;		//k_put_char(7,2,'6',15,0);
  5083                        ;		k_irq_device_event(IRQE_SDCARD_INS,_pseu
                    do_timer,&_k_default_arg);
  5084                        	.line	942
  5085 00:0D1B: A9 xx xx     	lda	#<~~_k_default_arg
  5086 00:0D1E: 85 01        	sta	<R0
  5087                        	xref	_BEG_DATA
  5088 00:0D20: A9 xx xx     	lda	#_BEG_DATA>>16
  5089 00:0D23: 85 03        	sta	<R0+2
  5090 00:0D25: D4 03        	pei	<R0+2
  5091 00:0D27: D4 01        	pei	<R0
  5092 00:0D29: AD xx xx     	lda	|~~_pseudo_timer+2
  5093 00:0D2C: 48           	pha
  5094 00:0D2D: AD xx xx     	lda	|~~_pseudo_timer
  5095 00:0D30: 48           	pha
  5096 00:0D31: F4 08 00     	pea	#<$8
  5097 00:0D34: 22 xx xx xx  	jsl	~~k_irq_device_event
  5098                        ;
  5099                        ;		INT_PENDING_REG2[0]&=FNX2_INT07_SDCARD;
  5100                        	.line	944
  5101 00:0D38: E2 20        	sep	#$20
  5102                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 95


  5103 00:0D3A: AF 42 01 00  	lda	>322
  5104 00:0D3E: 29 80        	and	#<$80
  5105 00:0D40: 8F 42 01 00  	sta	>322
  5106 00:0D44: C2 20        	rep	#$20
  5107                        	longa	on
  5108                        ;	}
  5109                        	.line	945
  5110                        ;
  5111                        ;	/*
  5112                        ;	if(INT_PENDING_REG2[0] & FNX2_INT07_SDCARD_INS)
  5113                        ;		{
  5114                        ;			//k_put_char(16,line,irqspinner[
                    scirq26++],15,0);
  5115                        ;			//if(scirq26>3) scirq26 = 0;
  5116                        ;			//k_put_char(7,2,' ',15,0);
  5117                        ;			//k_put_char(7,2,'6',15,0);
  5118                        ;			INT_PENDING_REG2[0]&=FNX2_INT07_
                    SDCARD_INS;
  5119                        ;		}
  5120                        ;	*/
  5121                        ;	/*
  5122                        ;	if(INT_PENDING_REG2[0] & FNX2_INT07_SDCARD)
  5123                        ;	{
  5124                        ;		//k_put_char(17,line,irqspinner[scirq17+
                    +],15,0);
  5125                        ;		//if(scirq17>3)scirq17 = 0;
  5126                        ;
  5127                        ;		k_irq_device_event(IRQE_SDCARD_INS,_pseu
                    do_timer,NULL);
  5128                        ;
  5129                        ;		//k_put_char(7,1,' ',15,0);
  5130                        ;		//k_put_char(7,1,'7',15,0);
  5131                        ;		INT_PENDING_REG2[0]&=FNX2_INT07_SDCARD;
  5132                        ;	}
  5133                        ;	*/
  5134                        ;	INT_PENDING_REG2[0]=0xFF;
  5135                        L10063:
  5136                        	.line	970
  5137 00:0D46: E2 20        	sep	#$20
  5138                        	longa	off
  5139 00:0D48: A9 FF        	lda	#$ff
  5140 00:0D4A: 8F 42 01 00  	sta	>322
  5141 00:0D4E: C2 20        	rep	#$20
  5142                        	longa	on
  5143                        ;	INT_PENDING_REG2[0]=0x00;
  5144                        	.line	971
  5145 00:0D50: E2 20        	sep	#$20
  5146                        	longa	off
  5147 00:0D52: A9 00        	lda	#$0
  5148 00:0D54: 8F 42 01 00  	sta	>322
  5149 00:0D58: C2 20        	rep	#$20
  5150                        	longa	on
  5151                        ;
  5152                        ;	//k_put_char(3,40,'Z',15,0);
  5153                        ;}
  5154                        	.line	974
  5155                        L107:
  5156 00:0D5A: A5 06        	lda	<L97+2
  Sat Jul 10 2021  1:15                                                Page 96


  5157 00:0D5C: 85 0A        	sta	<L97+2+4
  5158 00:0D5E: A5 05        	lda	<L97+1
  5159 00:0D60: 85 09        	sta	<L97+1+4
  5160 00:0D62: 2B           	pld
  5161 00:0D63: 3B           	tsc
  5162 00:0D64: 18           	clc
  5163 00:0D65: 69 08 00     	adc	#L97+4
  5164 00:0D68: 1B           	tcs
  5165 00:0D69: 6B           	rtl
  5166                        	.endblock	974
  5167             00000004   L97	equ	4
  5168             00000005   L98	equ	5
  5169                        	ends
  5170                        	efunc
  5171                        	.endfunc	974,5,4
  5172                        	.line	974
  5173                        ;
  5174                        ;void k_dispatch_reg3(PIRQDATA pIRQx)
  5175                        ;{
  5176                        	.line	976
  5177                        	.line	977
  5178                        	code
  5179                        	xdef	~~k_dispatch_reg3
  5180                        	func
  5181                        	.function	977
  5182                        ~~k_dispatch_reg3:
  5183                        	longa	on
  5184                        	longi	on
  5185 00:0D6A: 3B           	tsc
  5186 00:0D6B: 38           	sec
  5187 00:0D6C: E9 04 00     	sbc	#L108
  5188 00:0D6F: 1B           	tcs
  5189 00:0D70: 0B           	phd
  5190 00:0D71: 5B           	tcd
  5191             00000004   pIRQx_0	set	4
  5192                        	.block	977
  5193                        ;
  5194                        ;	if(INT_PENDING_REG3[0] & FNX3_INT02_IDE)
  5195                        	.sym	pIRQx,4,138,6,32,9
  5196                        	.line	979
  5197                        ;	{
  5198 00:0D72: E2 20        	sep	#$20
  5199                        	longa	off
  5200 00:0D74: AF 43 01 00  	lda	>323
  5201 00:0D78: 29 04        	and	#<$4
  5202 00:0D7A: C2 20        	rep	#$20
  5203                        	longa	on
  5204 00:0D7C: D0 03        	bne	L111
  5205 00:0D7E: 82 2B 00     	brl	L10064
  5206                        L111:
  5207                        	.line	980
  5208                        ;		k_irq_device_event(IRQE_HDDRIVE,_pseudo_
                    timer,&_k_default_arg);
  5209                        	.line	981
  5210 00:0D81: A9 xx xx     	lda	#<~~_k_default_arg
  5211 00:0D84: 85 01        	sta	<R0
  5212                        	xref	_BEG_DATA
  5213 00:0D86: A9 xx xx     	lda	#_BEG_DATA>>16
  Sat Jul 10 2021  1:15                                                Page 97


  5214 00:0D89: 85 03        	sta	<R0+2
  5215 00:0D8B: D4 03        	pei	<R0+2
  5216 00:0D8D: D4 01        	pei	<R0
  5217 00:0D8F: AD xx xx     	lda	|~~_pseudo_timer+2
  5218 00:0D92: 48           	pha
  5219 00:0D93: AD xx xx     	lda	|~~_pseudo_timer
  5220 00:0D96: 48           	pha
  5221 00:0D97: F4 10 00     	pea	#<$10
  5222 00:0D9A: 22 xx xx xx  	jsl	~~k_irq_device_event
  5223                        ;
  5224                        ;		INT_PENDING_REG2[0]&=FNX2_INT07_SDCARD;
  5225                        	.line	983
  5226 00:0D9E: E2 20        	sep	#$20
  5227                        	longa	off
  5228 00:0DA0: AF 42 01 00  	lda	>322
  5229 00:0DA4: 29 80        	and	#<$80
  5230 00:0DA6: 8F 42 01 00  	sta	>322
  5231 00:0DAA: C2 20        	rep	#$20
  5232                        	longa	on
  5233                        ;	}
  5234                        	.line	984
  5235                        ;	INT_PENDING_REG3[0]=0xFF;
  5236                        L10064:
  5237                        	.line	985
  5238 00:0DAC: E2 20        	sep	#$20
  5239                        	longa	off
  5240 00:0DAE: A9 FF        	lda	#$ff
  5241 00:0DB0: 8F 43 01 00  	sta	>323
  5242 00:0DB4: C2 20        	rep	#$20
  5243                        	longa	on
  5244                        ;	INT_PENDING_REG3[0]=0x00;
  5245                        	.line	986
  5246 00:0DB6: E2 20        	sep	#$20
  5247                        	longa	off
  5248 00:0DB8: A9 00        	lda	#$0
  5249 00:0DBA: 8F 43 01 00  	sta	>323
  5250 00:0DBE: C2 20        	rep	#$20
  5251                        	longa	on
  5252                        ;}
  5253                        	.line	987
  5254                        L112:
  5255 00:0DC0: A5 06        	lda	<L108+2
  5256 00:0DC2: 85 0A        	sta	<L108+2+4
  5257 00:0DC4: A5 05        	lda	<L108+1
  5258 00:0DC6: 85 09        	sta	<L108+1+4
  5259 00:0DC8: 2B           	pld
  5260 00:0DC9: 3B           	tsc
  5261 00:0DCA: 18           	clc
  5262 00:0DCB: 69 08 00     	adc	#L108+4
  5263 00:0DCE: 1B           	tcs
  5264 00:0DCF: 6B           	rtl
  5265                        	.endblock	987
  5266             00000004   L108	equ	4
  5267             00000005   L109	equ	5
  5268                        	ends
  5269                        	efunc
  5270                        	.endfunc	987,5,4
  5271                        	.line	987
  Sat Jul 10 2021  1:15                                                Page 98


  5272                        ;
  5273                        ;
  5274                        ;/*
  5275                        ;#define	STATUS_PORT	 	 		
                    	 ((LPSTR)0xAF1807)
  5276                        ;#define	KBD_STATUS       			
                     ((LPSTR)0xAF1807)
  5277                        ;#define	KBD_CMD_BUF	 	 		
                    	 ((LPSTR)0xAF1807)
  5278                        ;#define	KBD_OUT_BUF 	 			
                     ((LPSTR)0xAF1803)
  5279                        ;#define	KBD_INPT_BUF	 			
                     ((LPSTR)0xAF1803)
  5280                        ;#define	KBD_DATA_BUF	 			
                     ((LPSTR)0xAF1803)
  5281                        ;#define	PORT_A		     			
                     ((LPSTR)0xAF180A)
  5282                        ;#define	PORT_B			 		
                    	 ((LPSTR)0xAF180B)
  5283                        ; */
  5284                        ;
  5285                        ;
  5286                        ;
  5287                        ;//Mouse functions
  5288                        ;void mouse_handler(VOID) //struct regs *a_r (not 
                    used but just there)
  5289                        ;{
  5290                        	.line	1004
  5291                        	.line	1005
  5292                        	code
  5293                        	xdef	~~mouse_handler
  5294                        	func
  5295                        	.function	1005
  5296                        ~~mouse_handler:
  5297                        	longa	on
  5298                        	longi	on
  5299 00:0DD0: 3B           	tsc
  5300 00:0DD1: 38           	sec
  5301 00:0DD2: E9 10 00     	sbc	#L113
  5302 00:0DD5: 1B           	tcs
  5303 00:0DD6: 0B           	phd
  5304 00:0DD7: 5B           	tcd
  5305                        	.block	1005
  5306                        ;	UINT x, y;
  5307                        ;
  5308                        ;	PFXZEROPAGE pzero = ((PFXZEROPAGE)ZEROPAGE);
  5309                        ;
  5310                        ;	mouse_cycle = MOUSE_PTR[0];
  5311             00000000   x_1	set	0
  5312             00000002   y_1	set	2
  5313             00000004   pzero_1	set	4
  5314                        	.sym	x,0,16,1,16
  5315                        	.sym	y,2,16,1,16
  5316                        	.sym	pzero,4,138,1,32,79
  5317 00:0DD8: A9 00 15     	lda	#$1500
  5318 00:0DDB: 85 0D        	sta	<L114+pzero_1
  5319 00:0DDD: A9 00 00     	lda	#$0
  5320 00:0DE0: 85 0F        	sta	<L114+pzero_1+2
  Sat Jul 10 2021  1:15                                                Page 99


  5321                        	.line	1010
  5322 00:0DE2: E2 20        	sep	#$20
  5323                        	longa	off
  5324 00:0DE4: AF E0 00 00  	lda	>224	; volatile
  5325 00:0DE8: 8D xx xx     	sta	|~~mouse_cycle
  5326 00:0DEB: C2 20        	rep	#$20
  5327                        	longa	on
  5328                        ;
  5329                        ;	switch (mouse_cycle)
  5330                        	.line	1012
  5331 00:0DED: AD xx xx     	lda	|~~mouse_cycle
  5332 00:0DF0: 29 FF 00     	and	#$ff
  5333 00:0DF3: 82 31 01     	brl	L10065
  5334                        ;	{
  5335                        	.line	1013
  5336                        ;	case 0:
  5337                        	.line	1014
  5338                        L10067:
  5339                        ;		MOUSE_PTR_BYTE0[0] = inportb60(0x60);
  5340                        	.line	1015
  5341 00:0DF6: E2 20        	sep	#$20
  5342                        	longa	off
  5343 00:0DF8: AF 03 18 AF  	lda	>11474947
  5344 00:0DFC: 8F 06 07 AF  	sta	>11470598	; volatile
  5345 00:0E00: C2 20        	rep	#$20
  5346                        	longa	on
  5347                        ;		mouse_cycle++;
  5348                        	.line	1016
  5349 00:0E02: E2 20        	sep	#$20
  5350                        	longa	off
  5351 00:0E04: EE xx xx     	inc	|~~mouse_cycle
  5352 00:0E07: C2 20        	rep	#$20
  5353                        	longa	on
  5354                        ;		break;
  5355                        	.line	1017
  5356 00:0E09: 82 2F 01     	brl	L10066
  5357                        ;	case 1:
  5358                        	.line	1018
  5359                        L10068:
  5360                        ;		MOUSE_PTR_BYTE0[1] = inportb60(0x60);
  5361                        	.line	1019
  5362 00:0E0C: E2 20        	sep	#$20
  5363                        	longa	off
  5364 00:0E0E: AF 03 18 AF  	lda	>11474947
  5365 00:0E12: 8F 07 07 AF  	sta	>11470599	; volatile
  5366 00:0E16: C2 20        	rep	#$20
  5367                        	longa	on
  5368                        ;		mouse_cycle++;
  5369                        	.line	1020
  5370 00:0E18: E2 20        	sep	#$20
  5371                        	longa	off
  5372 00:0E1A: EE xx xx     	inc	|~~mouse_cycle
  5373 00:0E1D: C2 20        	rep	#$20
  5374                        	longa	on
  5375                        ;		break;
  5376                        	.line	1021
  5377 00:0E1F: 82 19 01     	brl	L10066
  5378                        ;	case 2:
  Sat Jul 10 2021  1:15                                                Page 100


  5379                        	.line	1022
  5380                        L10069:
  5381                        ;		MOUSE_PTR_BYTE0[2] = inportb60(0x60);
  5382                        	.line	1023
  5383 00:0E22: E2 20        	sep	#$20
  5384                        	longa	off
  5385 00:0E24: AF 03 18 AF  	lda	>11474947
  5386 00:0E28: 8F 08 07 AF  	sta	>11470600	; volatile
  5387 00:0E2C: C2 20        	rep	#$20
  5388                        	longa	on
  5389                        ;		MOUSE_PTR[0] = mouse_cycle;
  5390                        	.line	1024
  5391 00:0E2E: E2 20        	sep	#$20
  5392                        	longa	off
  5393 00:0E30: AD xx xx     	lda	|~~mouse_cycle
  5394 00:0E33: 8F E0 00 00  	sta	>224	; volatile
  5395 00:0E37: C2 20        	rep	#$20
  5396                        	longa	on
  5397                        ;		//mouse_x=mouse_byte[1];
  5398                        ;		//mouse_y=mouse_byte[2];
  5399                        ;
  5400                        ;		x = MAKEWORD(MOUSE_PTR_X_POS_L[0], MOUSE
                    _PTR_X_POS_H[0]);
  5401                        	.line	1028
  5402 00:0E39: E2 20        	sep	#$20
  5403                        	longa	off
  5404 00:0E3B: AF 03 07 AF  	lda	>11470595	; volatile
  5405 00:0E3F: C2 20        	rep	#$20
  5406                        	longa	on
  5407 00:0E41: 29 FF 00     	and	#$ff
  5408 00:0E44: 85 05        	sta	<R1
  5409 00:0E46: A5 05        	lda	<R1
  5410 00:0E48: EB           	xba
  5411 00:0E49: 29 00 FF     	and	#$ff00
  5412 00:0E4C: 85 01        	sta	<R0
  5413 00:0E4E: E2 20        	sep	#$20
  5414                        	longa	off
  5415 00:0E50: AF 02 07 AF  	lda	>11470594	; volatile
  5416 00:0E54: C2 20        	rep	#$20
  5417                        	longa	on
  5418 00:0E56: 29 FF 00     	and	#$ff
  5419 00:0E59: 85 05        	sta	<R1
  5420 00:0E5B: A5 05        	lda	<R1
  5421 00:0E5D: 05 01        	ora	<R0
  5422 00:0E5F: 85 09        	sta	<L114+x_1
  5423                        ;		y = MAKEWORD(MOUSE_PTR_Y_POS_L[0], MOUSE
                    _PTR_Y_POS_H[0]);
  5424                        	.line	1029
  5425 00:0E61: E2 20        	sep	#$20
  5426                        	longa	off
  5427 00:0E63: AF 05 07 AF  	lda	>11470597	; volatile
  5428 00:0E67: C2 20        	rep	#$20
  5429                        	longa	on
  5430 00:0E69: 29 FF 00     	and	#$ff
  5431 00:0E6C: 85 05        	sta	<R1
  5432 00:0E6E: A5 05        	lda	<R1
  5433 00:0E70: EB           	xba
  5434 00:0E71: 29 00 FF     	and	#$ff00
  Sat Jul 10 2021  1:15                                                Page 101


  5435 00:0E74: 85 01        	sta	<R0
  5436 00:0E76: E2 20        	sep	#$20
  5437                        	longa	off
  5438 00:0E78: AF 04 07 AF  	lda	>11470596	; volatile
  5439 00:0E7C: C2 20        	rep	#$20
  5440                        	longa	on
  5441 00:0E7E: 29 FF 00     	and	#$ff
  5442 00:0E81: 85 05        	sta	<R1
  5443 00:0E83: A5 05        	lda	<R1
  5444 00:0E85: 05 01        	ora	<R0
  5445 00:0E87: 85 0B        	sta	<L114+y_1
  5446                        ;
  5447                        ;		mouse_cycle = 0;
  5448                        	.line	1031
  5449 00:0E89: E2 20        	sep	#$20
  5450                        	longa	off
  5451 00:0E8B: 9C xx xx     	stz	|~~mouse_cycle
  5452 00:0E8E: C2 20        	rep	#$20
  5453                        	longa	on
  5454                        ;		/*
  5455                        ;		if((mouse_x == -1) && (mouse_y = -1))
  5456                        ;		{
  5457                        ;			mouse_x = x;
  5458                        ;			mouse_y = y;
  5459                        ;		}
  5460                        ;
  5461                        ;		if (x < (x+SCALE_X) && x > (x - SCALE_X)
                    )
  5462                        ;		{
  5463                        ;			if (y < (y+SCALE_Y) && y > (y - 
                    SCALE_Y))
  5464                        ;			{
  5465                        ;				FXOS_MOUSE_BYTE_T = MOUS
                    E_PTR_BYTE0[0];
  5466                        ;				FXOS_MOUSE_BYTE_X_L = MO
                    USE_POS_X_LO[0] = MOUSE_PTR_X_POS_L[0];
  5467                        ;				FXOS_MOUSE_BYTE_X_H = MO
                    USE_POS_X_HI[0] = MOUSE_PTR_X_POS_H[0];
  5468                        ;				FXOS_MOUSE_BYTE_Y_L = MO
                    USE_POS_Y_LO[0] = MOUSE_PTR_Y_POS_L[0];
  5469                        ;				FXOS_MOUSE_BYTE_Y_H = MO
                    USE_POS_Y_HI[0] = MOUSE_PTR_Y_POS_H[0];
  5470                        ;			}
  5471                        ;		}
  5472                        ;		*/
  5473                        ;		FXOS_MOUSE_BYTE_T = MOUSE_PTR_BYTE0[0];
  5474                        	.line	1051
  5475 00:0E90: E2 20        	sep	#$20
  5476                        	longa	off
  5477 00:0E92: AF 06 07 AF  	lda	>11470598	; volatile
  5478 00:0E96: 8F 03 15 00  	sta	>5379
  5479 00:0E9A: C2 20        	rep	#$20
  5480                        	longa	on
  5481                        ;		FXOS_MOUSE_BYTE_X_L = MOUSE_POS_X_LO[0] 
                    = MOUSE_PTR_X_POS_L[0];
  5482                        	.line	1052
  5483 00:0E9C: E2 20        	sep	#$20
  5484                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 102


  5485 00:0E9E: AF 02 07 AF  	lda	>11470594	; volatile
  5486 00:0EA2: 8F E1 00 00  	sta	>225	; volatile
  5487 00:0EA6: C2 20        	rep	#$20
  5488                        	longa	on
  5489 00:0EA8: E2 20        	sep	#$20
  5490                        	longa	off
  5491 00:0EAA: AF 02 07 AF  	lda	>11470594	; volatile
  5492 00:0EAE: 8F 04 15 00  	sta	>5380
  5493 00:0EB2: C2 20        	rep	#$20
  5494                        	longa	on
  5495                        ;		FXOS_MOUSE_BYTE_X_H = MOUSE_POS_X_HI[0] 
                    = MOUSE_PTR_X_POS_H[0];
  5496                        	.line	1053
  5497 00:0EB4: E2 20        	sep	#$20
  5498                        	longa	off
  5499 00:0EB6: AF 03 07 AF  	lda	>11470595	; volatile
  5500 00:0EBA: 8F E2 00 00  	sta	>226	; volatile
  5501 00:0EBE: C2 20        	rep	#$20
  5502                        	longa	on
  5503 00:0EC0: E2 20        	sep	#$20
  5504                        	longa	off
  5505 00:0EC2: AF 03 07 AF  	lda	>11470595	; volatile
  5506 00:0EC6: 8F 05 15 00  	sta	>5381
  5507 00:0ECA: C2 20        	rep	#$20
  5508                        	longa	on
  5509                        ;		FXOS_MOUSE_BYTE_Y_L = MOUSE_POS_Y_LO[0] 
                    = MOUSE_PTR_Y_POS_L[0];
  5510                        	.line	1054
  5511 00:0ECC: E2 20        	sep	#$20
  5512                        	longa	off
  5513 00:0ECE: AF 04 07 AF  	lda	>11470596	; volatile
  5514 00:0ED2: 8F E3 00 00  	sta	>227	; volatile
  5515 00:0ED6: C2 20        	rep	#$20
  5516                        	longa	on
  5517 00:0ED8: E2 20        	sep	#$20
  5518                        	longa	off
  5519 00:0EDA: AF 04 07 AF  	lda	>11470596	; volatile
  5520 00:0EDE: 8F 06 15 00  	sta	>5382
  5521 00:0EE2: C2 20        	rep	#$20
  5522                        	longa	on
  5523                        ;		FXOS_MOUSE_BYTE_Y_H = MOUSE_POS_Y_HI[0] 
                    = MOUSE_PTR_Y_POS_H[0];
  5524                        	.line	1055
  5525 00:0EE4: E2 20        	sep	#$20
  5526                        	longa	off
  5527 00:0EE6: AF 05 07 AF  	lda	>11470597	; volatile
  5528 00:0EEA: 8F E4 00 00  	sta	>228	; volatile
  5529 00:0EEE: C2 20        	rep	#$20
  5530                        	longa	on
  5531 00:0EF0: E2 20        	sep	#$20
  5532                        	longa	off
  5533 00:0EF2: AF 05 07 AF  	lda	>11470597	; volatile
  5534 00:0EF6: 8F 07 15 00  	sta	>5383
  5535 00:0EFA: C2 20        	rep	#$20
  5536                        	longa	on
  5537                        ;
  5538                        ;
  5539                        ;		//MOUSE_PTR_BYTE0[0] = 0;
  Sat Jul 10 2021  1:15                                                Page 103


  5540                        ;		//MOUSE_PTR_BYTE0[1] = 0;
  5541                        ;		//MOUSE_PTR_BYTE0[2] = 0;
  5542                        ;		//MOUSE_PTR[0] = 0;
  5543                        ;
  5544                        ;		pzero->fxos_mouse_dbg_1 = x;
  5545                        	.line	1063
  5546 00:0EFC: A5 09        	lda	<L114+x_1
  5547 00:0EFE: 85 01        	sta	<R0
  5548 00:0F00: 64 03        	stz	<R0+2
  5549 00:0F02: A5 01        	lda	<R0
  5550 00:0F04: A0 0E 00     	ldy	#$e
  5551 00:0F07: 97 0D        	sta	[<L114+pzero_1],Y
  5552 00:0F09: A5 03        	lda	<R0+2
  5553 00:0F0B: A0 10 00     	ldy	#$10
  5554 00:0F0E: 97 0D        	sta	[<L114+pzero_1],Y
  5555                        ;		pzero->fxos_mouse_dbg_1 = y;
  5556                        	.line	1064
  5557 00:0F10: A5 0B        	lda	<L114+y_1
  5558 00:0F12: 85 01        	sta	<R0
  5559 00:0F14: 64 03        	stz	<R0+2
  5560 00:0F16: A5 01        	lda	<R0
  5561 00:0F18: A0 0E 00     	ldy	#$e
  5562 00:0F1B: 97 0D        	sta	[<L114+pzero_1],Y
  5563 00:0F1D: A5 03        	lda	<R0+2
  5564 00:0F1F: A0 10 00     	ldy	#$10
  5565 00:0F22: 97 0D        	sta	[<L114+pzero_1],Y
  5566                        ;
  5567                        ;		break;
  5568                        	.line	1066
  5569 00:0F24: 82 14 00     	brl	L10066
  5570                        ;	}
  5571                        	.line	1067
  5572                        L10065:
  5573                        	xref	~~~swt
  5574 00:0F27: 22 xx xx xx  	jsl	~~~swt
  5575 00:0F2B: 03 00        	dw	3
  5576 00:0F2D: 00 00        	dw	0
  5577 00:0F2F: xx xx        	dw	L10067-1
  5578 00:0F31: 01 00        	dw	1
  5579 00:0F33: xx xx        	dw	L10068-1
  5580 00:0F35: 02 00        	dw	2
  5581 00:0F37: xx xx        	dw	L10069-1
  5582 00:0F39: xx xx        	dw	L10066-1
  5583                        L10066:
  5584                        ;
  5585                        ;
  5586                        ;	MOUSE_PTR[0] = mouse_cycle;
  5587                        	.line	1070
  5588 00:0F3B: E2 20        	sep	#$20
  5589                        	longa	off
  5590 00:0F3D: AD xx xx     	lda	|~~mouse_cycle
  5591 00:0F40: 8F E0 00 00  	sta	>224	; volatile
  5592 00:0F44: C2 20        	rep	#$20
  5593                        	longa	on
  5594                        ;
  5595                        ;}
  5596                        	.line	1072
  5597                        L116:
  Sat Jul 10 2021  1:15                                                Page 104


  5598 00:0F46: 2B           	pld
  5599 00:0F47: 3B           	tsc
  5600 00:0F48: 18           	clc
  5601 00:0F49: 69 10 00     	adc	#L113
  5602 00:0F4C: 1B           	tcs
  5603 00:0F4D: 6B           	rtl
  5604                        	.endblock	1072
  5605             00000010   L113	equ	16
  5606             00000009   L114	equ	9
  5607                        	ends
  5608                        	efunc
  5609                        	.endfunc	1072,9,16
  5610                        	.line	1072
  5611                        ;
  5612                        ;void mouse_wait(BYTE a_type) //unsigned char
  5613                        ;{
  5614                        	.line	1074
  5615                        	.line	1075
  5616                        	code
  5617                        	xdef	~~mouse_wait
  5618                        	func
  5619                        	.function	1075
  5620                        ~~mouse_wait:
  5621                        	longa	on
  5622                        	longi	on
  5623 00:0F4E: 3B           	tsc
  5624 00:0F4F: 38           	sec
  5625 00:0F50: E9 08 00     	sbc	#L117
  5626 00:0F53: 1B           	tcs
  5627 00:0F54: 0B           	phd
  5628 00:0F55: 5B           	tcd
  5629             00000004   a_type_0	set	4
  5630                        	.block	1075
  5631                        ;  DWORD _time_out=100; //unsigned int
  5632                        ;  if(a_type==0)
  5633             00000000   _time_out_1	set	0
  5634                        	.sym	_time_out,0,18,1,32
  5635                        	.sym	a_type,4,14,6,8
  5636 00:0F56: A9 64 00     	lda	#$64
  5637 00:0F59: 85 05        	sta	<L118+_time_out_1
  5638 00:0F5B: A9 00 00     	lda	#$0
  5639 00:0F5E: 85 07        	sta	<L118+_time_out_1+2
  5640                        	.line	1077
  5641                        ;  {
  5642 00:0F60: A5 0C        	lda	<L117+a_type_0
  5643 00:0F62: 29 FF 00     	and	#$ff
  5644 00:0F65: F0 03        	beq	L120
  5645 00:0F67: 82 42 00     	brl	L10070
  5646                        L120:
  5647                        	.line	1078
  5648                        ;    while(_time_out--) //Data
  5649                        	.line	1079
  5650                        L10071:
  5651 00:0F6A: A5 05        	lda	<L118+_time_out_1
  5652 00:0F6C: 85 01        	sta	<R0
  5653 00:0F6E: A5 07        	lda	<L118+_time_out_1+2
  5654 00:0F70: 85 03        	sta	<R0+2
  5655 00:0F72: A5 05        	lda	<L118+_time_out_1
  Sat Jul 10 2021  1:15                                                Page 105


  5656 00:0F74: D0 02        	bne	L121
  5657 00:0F76: C6 07        	dec	<L118+_time_out_1+2
  5658                        L121:
  5659 00:0F78: C6 05        	dec	<L118+_time_out_1
  5660 00:0F7A: A5 01        	lda	<R0
  5661 00:0F7C: 05 03        	ora	<R0+2
  5662 00:0F7E: D0 03        	bne	L122
  5663 00:0F80: 82 26 00     	brl	L10072
  5664                        L122:
  5665                        ;    {
  5666                        	.line	1080
  5667                        ;      if((inportb64(0x64) & 1)==1)
  5668                        	.line	1081
  5669                        ;      {
  5670 00:0F83: AF 07 18 AF  	lda	>11474951
  5671 00:0F87: 29 01 00     	and	#<$1
  5672 00:0F8A: 85 01        	sta	<R0
  5673 00:0F8C: A5 01        	lda	<R0
  5674 00:0F8E: C9 01 00     	cmp	#<$1
  5675 00:0F91: F0 03        	beq	L123
  5676 00:0F93: 82 10 00     	brl	L10073
  5677                        L123:
  5678                        	.line	1082
  5679                        ;        return;
  5680                        	.line	1083
  5681                        L124:
  5682 00:0F96: A5 0A        	lda	<L117+2
  5683 00:0F98: 85 0C        	sta	<L117+2+2
  5684 00:0F9A: A5 09        	lda	<L117+1
  5685 00:0F9C: 85 0B        	sta	<L117+1+2
  5686 00:0F9E: 2B           	pld
  5687 00:0F9F: 3B           	tsc
  5688 00:0FA0: 18           	clc
  5689 00:0FA1: 69 0A 00     	adc	#L117+2
  5690 00:0FA4: 1B           	tcs
  5691 00:0FA5: 6B           	rtl
  5692                        ;      }
  5693                        	.line	1084
  5694                        ;    }
  5695                        L10073:
  5696                        	.line	1085
  5697 00:0FA6: 82 C1 FF     	brl	L10071
  5698                        L10072:
  5699                        ;    return;
  5700                        	.line	1086
  5701 00:0FA9: 82 EA FF     	brl	L124
  5702                        ;  }
  5703                        	.line	1087
  5704                        ;  else
  5705                        L10070:
  5706                        ;  {
  5707                        	.line	1089
  5708                        ;    while(_time_out--) //Signal
  5709                        	.line	1090
  5710                        L10074:
  5711 00:0FAC: A5 05        	lda	<L118+_time_out_1
  5712 00:0FAE: 85 01        	sta	<R0
  5713 00:0FB0: A5 07        	lda	<L118+_time_out_1+2
  Sat Jul 10 2021  1:15                                                Page 106


  5714 00:0FB2: 85 03        	sta	<R0+2
  5715 00:0FB4: A5 05        	lda	<L118+_time_out_1
  5716 00:0FB6: D0 02        	bne	L125
  5717 00:0FB8: C6 07        	dec	<L118+_time_out_1+2
  5718                        L125:
  5719 00:0FBA: C6 05        	dec	<L118+_time_out_1
  5720 00:0FBC: A5 01        	lda	<R0
  5721 00:0FBE: 05 03        	ora	<R0+2
  5722 00:0FC0: D0 03        	bne	L126
  5723 00:0FC2: 82 15 00     	brl	L10075
  5724                        L126:
  5725                        ;    {
  5726                        	.line	1091
  5727                        ;      if((inportb64(0x64) & 2)==0)
  5728                        	.line	1092
  5729                        ;      {
  5730 00:0FC5: E2 20        	sep	#$20
  5731                        	longa	off
  5732 00:0FC7: AF 07 18 AF  	lda	>11474951
  5733 00:0FCB: 29 02        	and	#<$2
  5734 00:0FCD: C2 20        	rep	#$20
  5735                        	longa	on
  5736 00:0FCF: F0 03        	beq	L127
  5737 00:0FD1: 82 03 00     	brl	L10076
  5738                        L127:
  5739                        	.line	1093
  5740                        ;        return;
  5741                        	.line	1094
  5742 00:0FD4: 82 BF FF     	brl	L124
  5743                        ;      }
  5744                        	.line	1095
  5745                        ;    }
  5746                        L10076:
  5747                        	.line	1096
  5748 00:0FD7: 82 D2 FF     	brl	L10074
  5749                        L10075:
  5750                        ;    return;
  5751                        	.line	1097
  5752 00:0FDA: 82 B9 FF     	brl	L124
  5753                        ;  }
  5754                        	.line	1098
  5755                        ;}
  5756                        	.line	1099
  5757                        	.endblock	1099
  5758             00000008   L117	equ	8
  5759             00000005   L118	equ	5
  5760                        	ends
  5761                        	efunc
  5762                        	.endfunc	1099,5,8
  5763                        	.line	1099
  5764                        ;
  5765                        ;void mouse_write(BYTE a_write) //unsigned char
  5766                        ;{
  5767                        	.line	1101
  5768                        	.line	1102
  5769                        	code
  5770                        	xdef	~~mouse_write
  5771                        	func
  Sat Jul 10 2021  1:15                                                Page 107


  5772                        	.function	1102
  5773                        ~~mouse_write:
  5774                        	longa	on
  5775                        	longi	on
  5776 00:0FDD: 3B           	tsc
  5777 00:0FDE: 38           	sec
  5778 00:0FDF: E9 00 00     	sbc	#L128
  5779 00:0FE2: 1B           	tcs
  5780 00:0FE3: 0B           	phd
  5781 00:0FE4: 5B           	tcd
  5782             00000004   a_write_0	set	4
  5783                        	.block	1102
  5784                        ;  //Wait to be able to send a command
  5785                        ;  mouse_wait(1);
  5786                        	.sym	a_write,4,14,6,8
  5787                        	.line	1104
  5788 00:0FE5: F4 01 00     	pea	#<$1
  5789 00:0FE8: 22 xx xx xx  	jsl	~~mouse_wait
  5790                        ;  //Tell the mouse we are sending a command
  5791                        ;  outportb64(0xD4);
  5792                        	.line	1106
  5793 00:0FEC: E2 20        	sep	#$20
  5794                        	longa	off
  5795 00:0FEE: A9 D4        	lda	#$d4
  5796 00:0FF0: 8F 07 18 AF  	sta	>11474951
  5797 00:0FF4: C2 20        	rep	#$20
  5798                        	longa	on
  5799                        ;  //Wait for the final part
  5800                        ;  mouse_wait(1);
  5801                        	.line	1108
  5802 00:0FF6: F4 01 00     	pea	#<$1
  5803 00:0FF9: 22 xx xx xx  	jsl	~~mouse_wait
  5804                        ;  //Finally write
  5805                        ;  outportb60(a_write);
  5806                        	.line	1110
  5807 00:0FFD: E2 20        	sep	#$20
  5808                        	longa	off
  5809 00:0FFF: A5 04        	lda	<L128+a_write_0
  5810 00:1001: 8F 03 18 AF  	sta	>11474947
  5811 00:1005: C2 20        	rep	#$20
  5812                        	longa	on
  5813                        ;}
  5814                        	.line	1111
  5815                        L131:
  5816 00:1007: A5 02        	lda	<L128+2
  5817 00:1009: 85 04        	sta	<L128+2+2
  5818 00:100B: A5 01        	lda	<L128+1
  5819 00:100D: 85 03        	sta	<L128+1+2
  5820 00:100F: 2B           	pld
  5821 00:1010: 3B           	tsc
  5822 00:1011: 18           	clc
  5823 00:1012: 69 02 00     	adc	#L128+2
  5824 00:1015: 1B           	tcs
  5825 00:1016: 6B           	rtl
  5826                        	.endblock	1111
  5827             00000000   L128	equ	0
  5828             00000001   L129	equ	1
  5829                        	ends
  Sat Jul 10 2021  1:15                                                Page 108


  5830                        	efunc
  5831                        	.endfunc	1111,1,0
  5832                        	.line	1111
  5833                        ;
  5834                        ;BYTE mouse_read(VOID)
  5835                        ;{
  5836                        	.line	1113
  5837                        	.line	1114
  5838                        	code
  5839                        	xdef	~~mouse_read
  5840                        	func
  5841                        	.function	1114
  5842                        ~~mouse_read:
  5843                        	longa	on
  5844                        	longi	on
  5845 00:1017: 3B           	tsc
  5846 00:1018: 38           	sec
  5847 00:1019: E9 00 00     	sbc	#L132
  5848 00:101C: 1B           	tcs
  5849 00:101D: 0B           	phd
  5850 00:101E: 5B           	tcd
  5851                        	.block	1114
  5852                        ;  //Get's response from mouse
  5853                        ;  mouse_wait(0);
  5854                        	.line	1116
  5855 00:101F: F4 00 00     	pea	#<$0
  5856 00:1022: 22 xx xx xx  	jsl	~~mouse_wait
  5857                        ;  return inportb60(0x60);
  5858                        	.line	1117
  5859 00:1026: AF 03 18 AF  	lda	>11474947
  5860 00:102A: 29 FF 00     	and	#$ff
  5861                        L135:
  5862 00:102D: A8           	tay
  5863 00:102E: 2B           	pld
  5864 00:102F: 3B           	tsc
  5865 00:1030: 18           	clc
  5866 00:1031: 69 00 00     	adc	#L132
  5867 00:1034: 1B           	tcs
  5868 00:1035: 98           	tya
  5869 00:1036: 6B           	rtl
  5870                        ;}
  5871                        	.line	1118
  5872                        	.endblock	1118
  5873             00000000   L132	equ	0
  5874             00000001   L133	equ	1
  5875                        	ends
  5876                        	efunc
  5877                        	.endfunc	1118,1,0
  5878                        	.line	1118
  5879                        ;
  5880                        ;void mouse_install(VOID)
  5881                        ;{
  5882                        	.line	1120
  5883                        	.line	1121
  5884                        	code
  5885                        	xdef	~~mouse_install
  5886                        	func
  5887                        	.function	1121
  Sat Jul 10 2021  1:15                                                Page 109


  5888                        ~~mouse_install:
  5889                        	longa	on
  5890                        	longi	on
  5891 00:1037: 3B           	tsc
  5892 00:1038: 38           	sec
  5893 00:1039: E9 01 00     	sbc	#L136
  5894 00:103C: 1B           	tcs
  5895 00:103D: 0B           	phd
  5896 00:103E: 5B           	tcd
  5897                        	.block	1121
  5898                        ;	BYTE _status;  //unsigned char
  5899                        ;
  5900                        ;  MOUSE_PTR[0] = 0;
  5901             00000000   _status_1	set	0
  5902                        	.sym	_status,0,14,1,8
  5903                        	.line	1124
  5904 00:103F: E2 20        	sep	#$20
  5905                        	longa	off
  5906 00:1041: A9 00        	lda	#$0
  5907 00:1043: 8F E0 00 00  	sta	>224	; volatile
  5908 00:1047: C2 20        	rep	#$20
  5909                        	longa	on
  5910                        ;
  5911                        ;  //Enable the auxiliary mouse device
  5912                        ;  mouse_wait(1);
  5913                        	.line	1127
  5914 00:1049: F4 01 00     	pea	#<$1
  5915 00:104C: 22 xx xx xx  	jsl	~~mouse_wait
  5916                        ;  outportb64(0xA8);
  5917                        	.line	1128
  5918 00:1050: E2 20        	sep	#$20
  5919                        	longa	off
  5920 00:1052: A9 A8        	lda	#$a8
  5921 00:1054: 8F 07 18 AF  	sta	>11474951
  5922 00:1058: C2 20        	rep	#$20
  5923                        	longa	on
  5924                        ;
  5925                        ;  mouse_wait(1);
  5926                        	.line	1130
  5927 00:105A: F4 01 00     	pea	#<$1
  5928 00:105D: 22 xx xx xx  	jsl	~~mouse_wait
  5929                        ;  outportb64(0xFF);
  5930                        	.line	1131
  5931 00:1061: E2 20        	sep	#$20
  5932                        	longa	off
  5933 00:1063: A9 FF        	lda	#$ff
  5934 00:1065: 8F 07 18 AF  	sta	>11474951
  5935 00:1069: C2 20        	rep	#$20
  5936                        	longa	on
  5937                        ;
  5938                        ;  _status = inportb(0x60);
  5939                        	.line	1133
  5940 00:106B: E2 20        	sep	#$20
  5941                        	longa	off
  5942 00:106D: AF 60 00 00  	lda	>96
  5943 00:1071: 85 01        	sta	<L137+_status_1
  5944 00:1073: C2 20        	rep	#$20
  5945                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 110


  5946                        ;
  5947                        ;  //Enable the interrupts
  5948                        ;  mouse_wait(1);
  5949                        	.line	1136
  5950 00:1075: F4 01 00     	pea	#<$1
  5951 00:1078: 22 xx xx xx  	jsl	~~mouse_wait
  5952                        ;  outportb64(0x20);
  5953                        	.line	1137
  5954 00:107C: E2 20        	sep	#$20
  5955                        	longa	off
  5956 00:107E: A9 20        	lda	#$20
  5957 00:1080: 8F 07 18 AF  	sta	>11474951
  5958 00:1084: C2 20        	rep	#$20
  5959                        	longa	on
  5960                        ;  mouse_wait(0);
  5961                        	.line	1138
  5962 00:1086: F4 00 00     	pea	#<$0
  5963 00:1089: 22 xx xx xx  	jsl	~~mouse_wait
  5964                        ;  _status=(inportb(0x60) | 2);
  5965                        	.line	1139
  5966 00:108D: E2 20        	sep	#$20
  5967                        	longa	off
  5968 00:108F: AF 60 00 00  	lda	>96
  5969 00:1093: 09 02        	ora	#<$2
  5970 00:1095: 85 01        	sta	<L137+_status_1
  5971 00:1097: C2 20        	rep	#$20
  5972                        	longa	on
  5973                        ;  mouse_wait(1);
  5974                        	.line	1140
  5975 00:1099: F4 01 00     	pea	#<$1
  5976 00:109C: 22 xx xx xx  	jsl	~~mouse_wait
  5977                        ;  outportb64(0x60);
  5978                        	.line	1141
  5979 00:10A0: E2 20        	sep	#$20
  5980                        	longa	off
  5981 00:10A2: A9 60        	lda	#$60
  5982 00:10A4: 8F 07 18 AF  	sta	>11474951
  5983 00:10A8: C2 20        	rep	#$20
  5984                        	longa	on
  5985                        ;  mouse_wait(1);
  5986                        	.line	1142
  5987 00:10AA: F4 01 00     	pea	#<$1
  5988 00:10AD: 22 xx xx xx  	jsl	~~mouse_wait
  5989                        ;  outportb60(_status);
  5990                        	.line	1143
  5991 00:10B1: E2 20        	sep	#$20
  5992                        	longa	off
  5993 00:10B3: A5 01        	lda	<L137+_status_1
  5994 00:10B5: 8F 03 18 AF  	sta	>11474947
  5995 00:10B9: C2 20        	rep	#$20
  5996                        	longa	on
  5997                        ;
  5998                        ;  //Tell the mouse to use default settings
  5999                        ;  mouse_write(0xF6);
  6000                        	.line	1146
  6001 00:10BB: F4 F6 00     	pea	#<$f6
  6002 00:10BE: 22 xx xx xx  	jsl	~~mouse_write
  6003                        ;  mouse_read();  //Acknowledge
  Sat Jul 10 2021  1:15                                                Page 111


  6004                        	.line	1147
  6005 00:10C2: 22 xx xx xx  	jsl	~~mouse_read
  6006                        ;
  6007                        ;  //Enable the mouse
  6008                        ;  mouse_write(0xF4);
  6009                        	.line	1150
  6010 00:10C6: F4 F4 00     	pea	#<$f4
  6011 00:10C9: 22 xx xx xx  	jsl	~~mouse_write
  6012                        ;  mouse_read();  //Acknowledge
  6013                        	.line	1151
  6014 00:10CD: 22 xx xx xx  	jsl	~~mouse_read
  6015                        ;
  6016                        ;  //Setup the mouse handler
  6017                        ;  //irq_install_handler(12, mouse_handler);
  6018                        ;}
  6019                        	.line	1155
  6020                        L139:
  6021 00:10D1: 2B           	pld
  6022 00:10D2: 3B           	tsc
  6023 00:10D3: 18           	clc
  6024 00:10D4: 69 01 00     	adc	#L136
  6025 00:10D7: 1B           	tcs
  6026 00:10D8: 6B           	rtl
  6027                        	.endblock	1155
  6028             00000001   L136	equ	1
  6029             00000001   L137	equ	1
  6030                        	ends
  6031                        	efunc
  6032                        	.endfunc	1155,1,1
  6033                        	.line	1155
  6034                        ;
  6035                        ;
  6036                        ;void mouse_driver_init(void)
  6037                        ;{
  6038                        	.line	1158
  6039                        	.line	1159
  6040                        	code
  6041                        	xdef	~~mouse_driver_init
  6042                        	func
  6043                        	.function	1159
  6044                        ~~mouse_driver_init:
  6045                        	longa	on
  6046                        	longi	on
  6047 00:10D9: 3B           	tsc
  6048 00:10DA: 38           	sec
  6049 00:10DB: E9 00 00     	sbc	#L140
  6050 00:10DE: 1B           	tcs
  6051 00:10DF: 0B           	phd
  6052 00:10E0: 5B           	tcd
  6053                        	.block	1159
  6054                        ;
  6055                        ;}
  6056                        	.line	1161
  6057                        L143:
  6058 00:10E1: 2B           	pld
  6059 00:10E2: 3B           	tsc
  6060 00:10E3: 18           	clc
  6061 00:10E4: 69 00 00     	adc	#L140
  Sat Jul 10 2021  1:15                                                Page 112


  6062 00:10E7: 1B           	tcs
  6063 00:10E8: 6B           	rtl
  6064                        	.endblock	1161
  6065             00000000   L140	equ	0
  6066             00000001   L141	equ	1
  6067                        	ends
  6068                        	efunc
  6069                        	.endfunc	1161,1,0
  6070                        	.line	1161
  6071                        ;
  6072                        ;/*
  6073                        ;BOOL kbd_ack(void)
  6074                        ;{
  6075                        ;	BYTE retCode = 0;
  6076                        ;
  6077                        ;	while(!(KBD_OUT_BUF[0]==0xfa));
  6078                        ;
  6079                        ;	retCode = KBD_OUT_BUF[0];
  6080                        ;	while(retCode!=0xFA)
  6081                        ;	{
  6082                        ;		if(retCode == 0xFE)
  6083                        ;		{
  6084                        ;			return FALSE;
  6085                        ;		}
  6086                        ;		retCode = KBD_OUT_BUF[0];
  6087                        ;	}
  6088                        ;
  6089                        ;	return TRUE;
  6090                        ;}
  6091                        ;
  6092                        ;void kbd_led_handling(UCHAR ledstatus)
  6093                        ;{
  6094                        ;	int retry = 3;
  6095                        ;
  6096                        ;	//k_write_ipc_port(debugport,k_fxstring_new("K_L
                    _HIN",16),0);
  6097                        ;	do
  6098                        ;	{
  6099                        ;		KBD_OUT_BUF[0] = 0xED;
  6100                        ;		retry--;
  6101                        ;		if(retry < 1)
  6102                        ;		{
  6103                        ;
  6104                        ;			break;
  6105                        ;		}
  6106                        ;	}while(!kbd_ack());
  6107                        ;
  6108                        ;	KBD_OUT_BUF[0] = ledstatus;
  6109                        ;
  6110                        ;	//k_write_ipc_port(debugport,k_fxstring_new("K_L
                    _HOUT",16),0);
  6111                        ;	//kbd_ack();
  6112                        ;}
  6113                        ;*/
  6114                        ;
  6115                        ;void kbd_set_led(UCHAR ledstatus)
  6116                        ;{
  6117                        	.line	1206
  Sat Jul 10 2021  1:15                                                Page 113


  6118                        	.line	1207
  6119                        	code
  6120                        	xdef	~~kbd_set_led
  6121                        	func
  6122                        	.function	1207
  6123                        ~~kbd_set_led:
  6124                        	longa	on
  6125                        	longi	on
  6126 00:10E9: 3B           	tsc
  6127 00:10EA: 38           	sec
  6128 00:10EB: E9 04 00     	sbc	#L144
  6129 00:10EE: 1B           	tcs
  6130 00:10EF: 0B           	phd
  6131 00:10F0: 5B           	tcd
  6132             00000004   ledstatus_0	set	4
  6133                        	.block	1207
  6134                        ;	PMARSHALDATA pm = NULL;
  6135                        ;
  6136                        ;	pm = k_mem_allocate_heap(sizeof(MARSHALDATA));
  6137             00000000   pm_1	set	0
  6138                        	.sym	pm,0,139,1,32,63
  6139                        	.sym	ledstatus,4,14,6,8
  6140 00:10F1: 64 01        	stz	<L145+pm_1
  6141 00:10F3: 64 03        	stz	<L145+pm_1+2
  6142                        	.line	1210
  6143 00:10F5: F4 04 00     	pea	#<$4
  6144 00:10F8: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  6145 00:10FC: 85 01        	sta	<L145+pm_1
  6146 00:10FE: 86 03        	stx	<L145+pm_1+2
  6147                        ;	pm->verbValue[0] = 0xED;
  6148                        	.line	1211
  6149 00:1100: E2 20        	sep	#$20
  6150                        	longa	off
  6151 00:1102: A9 ED        	lda	#$ed
  6152 00:1104: 87 01        	sta	[<L145+pm_1]
  6153 00:1106: C2 20        	rep	#$20
  6154                        	longa	on
  6155                        ;	pm->verbValue[1] = ledstatus;
  6156                        	.line	1212
  6157 00:1108: E2 20        	sep	#$20
  6158                        	longa	off
  6159 00:110A: A5 08        	lda	<L144+ledstatus_0
  6160 00:110C: A0 01 00     	ldy	#$1
  6161 00:110F: 97 01        	sta	[<L145+pm_1],Y
  6162 00:1111: C2 20        	rep	#$20
  6163                        	longa	on
  6164                        ;	k_write_ipc_port(kbport,pm,0);
  6165                        	.line	1213
  6166 00:1113: F4 00 00     	pea	#<$0
  6167 00:1116: D4 03        	pei	<L145+pm_1+2
  6168 00:1118: D4 01        	pei	<L145+pm_1
  6169 00:111A: AD xx xx     	lda	|~~kbport+2
  6170 00:111D: 48           	pha
  6171 00:111E: AD xx xx     	lda	|~~kbport
  6172 00:1121: 48           	pha
  6173 00:1122: 22 xx xx xx  	jsl	~~k_write_ipc_port
  6174                        ;}
  6175                        	.line	1214
  Sat Jul 10 2021  1:15                                                Page 114


  6176                        L147:
  6177 00:1126: A5 06        	lda	<L144+2
  6178 00:1128: 85 08        	sta	<L144+2+2
  6179 00:112A: A5 05        	lda	<L144+1
  6180 00:112C: 85 07        	sta	<L144+1+2
  6181 00:112E: 2B           	pld
  6182 00:112F: 3B           	tsc
  6183 00:1130: 18           	clc
  6184 00:1131: 69 06 00     	adc	#L144+2
  6185 00:1134: 1B           	tcs
  6186 00:1135: 6B           	rtl
  6187                        	.endblock	1214
  6188             00000004   L144	equ	4
  6189             00000001   L145	equ	1
  6190                        	ends
  6191                        	efunc
  6192                        	.endfunc	1214,1,4
  6193                        	.line	1214
  6194                        ;
  6195                        ;void kbd_set_scanpage(UCHAR codepage)
  6196                        ;{
  6197                        	.line	1216
  6198                        	.line	1217
  6199                        	code
  6200                        	xdef	~~kbd_set_scanpage
  6201                        	func
  6202                        	.function	1217
  6203                        ~~kbd_set_scanpage:
  6204                        	longa	on
  6205                        	longi	on
  6206 00:1136: 3B           	tsc
  6207 00:1137: 38           	sec
  6208 00:1138: E9 04 00     	sbc	#L148
  6209 00:113B: 1B           	tcs
  6210 00:113C: 0B           	phd
  6211 00:113D: 5B           	tcd
  6212             00000004   codepage_0	set	4
  6213                        	.block	1217
  6214                        ;	PMARSHALDATA pm = NULL;
  6215                        ;
  6216                        ;	pm = k_mem_allocate_heap(sizeof(MARSHALDATA));
  6217             00000000   pm_1	set	0
  6218                        	.sym	pm,0,139,1,32,63
  6219                        	.sym	codepage,4,14,6,8
  6220 00:113E: 64 01        	stz	<L149+pm_1
  6221 00:1140: 64 03        	stz	<L149+pm_1+2
  6222                        	.line	1220
  6223 00:1142: F4 04 00     	pea	#<$4
  6224 00:1145: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  6225 00:1149: 85 01        	sta	<L149+pm_1
  6226 00:114B: 86 03        	stx	<L149+pm_1+2
  6227                        ;	pm->verbValue[0] = 0xF0;
  6228                        	.line	1221
  6229 00:114D: E2 20        	sep	#$20
  6230                        	longa	off
  6231 00:114F: A9 F0        	lda	#$f0
  6232 00:1151: 87 01        	sta	[<L149+pm_1]
  6233 00:1153: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 115


  6234                        	longa	on
  6235                        ;	pm->verbValue[1] = codepage;
  6236                        	.line	1222
  6237 00:1155: E2 20        	sep	#$20
  6238                        	longa	off
  6239 00:1157: A5 08        	lda	<L148+codepage_0
  6240 00:1159: A0 01 00     	ldy	#$1
  6241 00:115C: 97 01        	sta	[<L149+pm_1],Y
  6242 00:115E: C2 20        	rep	#$20
  6243                        	longa	on
  6244                        ;	k_write_ipc_port(kbport,pm,0);
  6245                        	.line	1223
  6246 00:1160: F4 00 00     	pea	#<$0
  6247 00:1163: D4 03        	pei	<L149+pm_1+2
  6248 00:1165: D4 01        	pei	<L149+pm_1
  6249 00:1167: AD xx xx     	lda	|~~kbport+2
  6250 00:116A: 48           	pha
  6251 00:116B: AD xx xx     	lda	|~~kbport
  6252 00:116E: 48           	pha
  6253 00:116F: 22 xx xx xx  	jsl	~~k_write_ipc_port
  6254                        ;}
  6255                        	.line	1224
  6256                        L151:
  6257 00:1173: A5 06        	lda	<L148+2
  6258 00:1175: 85 08        	sta	<L148+2+2
  6259 00:1177: A5 05        	lda	<L148+1
  6260 00:1179: 85 07        	sta	<L148+1+2
  6261 00:117B: 2B           	pld
  6262 00:117C: 3B           	tsc
  6263 00:117D: 18           	clc
  6264 00:117E: 69 06 00     	adc	#L148+2
  6265 00:1181: 1B           	tcs
  6266 00:1182: 6B           	rtl
  6267                        	.endblock	1224
  6268             00000004   L148	equ	4
  6269             00000001   L149	equ	1
  6270                        	ends
  6271                        	efunc
  6272                        	.endfunc	1224,1,4
  6273                        	.line	1224
  6274                        ;
  6275                        ;
  6276                        ;
  6277                        ;void keyboard_handler()
  6278                        ;{
  6279                        	.line	1228
  6280                        	.line	1229
  6281                        	code
  6282                        	xdef	~~keyboard_handler
  6283                        	func
  6284                        	.function	1229
  6285                        ~~keyboard_handler:
  6286                        	longa	on
  6287                        	longi	on
  6288 00:1183: 3B           	tsc
  6289 00:1184: 38           	sec
  6290 00:1185: E9 17 00     	sbc	#L152
  6291 00:1188: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 116


  6292 00:1189: 0B           	phd
  6293 00:118A: 5B           	tcd
  6294                        	.block	1229
  6295                        ;	PMARSHALDATA pm = NULL;
  6296                        ;
  6297                        ;	PFXSTRING fxs = NULL;
  6298                        ;	int i = 0;
  6299                        ;	char none = 0;
  6300                        ;	unsigned char data = 0;
  6301                        ;	int dp = 20;
  6302                        ;	BYTE raw = 0;
  6303                        ;
  6304                        ;	if(debugport == NULL)
  6305             00000000   pm_1	set	0
  6306             00000004   fxs_1	set	4
  6307             00000008   i_1	set	8
  6308             0000000A   none_1	set	10
  6309             0000000B   data_1	set	11
  6310             0000000C   dp_1	set	12
  6311             0000000E   raw_1	set	14
  6312                        	.sym	pm,0,139,1,32,63
  6313                        	.sym	fxs,4,138,1,32,50
  6314                        	.sym	i,8,5,1,16
  6315                        	.sym	none,10,14,1,8
  6316                        	.sym	data,11,14,1,8
  6317                        	.sym	dp,12,5,1,16
  6318                        	.sym	raw,14,14,1,8
  6319 00:118B: 64 09        	stz	<L153+pm_1
  6320 00:118D: 64 0B        	stz	<L153+pm_1+2
  6321 00:118F: 64 0D        	stz	<L153+fxs_1
  6322 00:1191: 64 0F        	stz	<L153+fxs_1+2
  6323 00:1193: 64 11        	stz	<L153+i_1
  6324 00:1195: E2 20        	sep	#$20
  6325                        	longa	off
  6326 00:1197: 64 13        	stz	<L153+none_1
  6327 00:1199: C2 20        	rep	#$20
  6328                        	longa	on
  6329 00:119B: E2 20        	sep	#$20
  6330                        	longa	off
  6331 00:119D: 64 14        	stz	<L153+data_1
  6332 00:119F: C2 20        	rep	#$20
  6333                        	longa	on
  6334 00:11A1: A9 14 00     	lda	#$14
  6335 00:11A4: 85 15        	sta	<L153+dp_1
  6336 00:11A6: E2 20        	sep	#$20
  6337                        	longa	off
  6338 00:11A8: 64 17        	stz	<L153+raw_1
  6339 00:11AA: C2 20        	rep	#$20
  6340                        	longa	on
  6341                        	.line	1239
  6342                        ;		debugport =  k_get_ipc_port("@debug");
  6343 00:11AC: AD xx xx     	lda	|~~debugport
  6344 00:11AF: 0D xx xx     	ora	|~~debugport+2
  6345 00:11B2: F0 03        	beq	L155
  6346 00:11B4: 82 10 00     	brl	L10077
  6347                        L155:
  6348                        	.line	1240
  6349 00:11B7: F4 xx xx     	pea	#^L47
  Sat Jul 10 2021  1:15                                                Page 117


  6350 00:11BA: F4 xx xx     	pea	#<L47
  6351 00:11BD: 22 xx xx xx  	jsl	~~k_get_ipc_port
  6352 00:11C1: 8D xx xx     	sta	|~~debugport
  6353 00:11C4: 8E xx xx     	stx	|~~debugport+2
  6354                        ;	if(kbport == NULL)
  6355                        L10077:
  6356                        	.line	1241
  6357                        ;		kbport =  k_get_ipc_port("@keyboard");
  6358 00:11C7: AD xx xx     	lda	|~~kbport
  6359 00:11CA: 0D xx xx     	ora	|~~kbport+2
  6360 00:11CD: F0 03        	beq	L156
  6361 00:11CF: 82 10 00     	brl	L10078
  6362                        L156:
  6363                        	.line	1242
  6364 00:11D2: F4 xx xx     	pea	#^L47+7
  6365 00:11D5: F4 xx xx     	pea	#<L47+7
  6366 00:11D8: 22 xx xx xx  	jsl	~~k_get_ipc_port
  6367 00:11DC: 8D xx xx     	sta	|~~kbport
  6368 00:11DF: 8E xx xx     	stx	|~~kbport+2
  6369                        ;
  6370                        ;	_irq_keyboardTimeout = 0;
  6371                        L10078:
  6372                        	.line	1244
  6373 00:11E2: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  6374                        ;
  6375                        ;	_irq_key_state_machine.scanTime+=1;
  6376                        	.line	1246
  6377 00:11E5: EE xx xx     	inc	|~~_irq_key_state_machine+9
  6378 00:11E8: D0 03        	bne	L157
  6379 00:11EA: EE xx xx     	inc	|~~_irq_key_state_machine+9+2
  6380                        L157:
  6381                        ;
  6382                        ;	//k_write_ipc_port(debugport,k_fxstring_new("H_I
                    N",16),0);
  6383                        ;
  6384                        ;	if(_irq_key_state_machine.scanTime == 0)
  6385                        	.line	1250
  6386                        ;	{
  6387 00:11ED: AD xx xx     	lda	|~~_irq_key_state_machine+9
  6388 00:11F0: 0D xx xx     	ora	|~~_irq_key_state_machine+9+2
  6389 00:11F3: F0 03        	beq	L158
  6390 00:11F5: 82 07 00     	brl	L10079
  6391                        L158:
  6392                        	.line	1251
  6393                        ;		kbd_set_scanpage(0x01);
  6394                        	.line	1252
  6395 00:11F8: F4 01 00     	pea	#<$1
  6396 00:11FB: 22 xx xx xx  	jsl	~~kbd_set_scanpage
  6397                        ;	}
  6398                        	.line	1253
  6399                        ;
  6400                        ;
  6401                        ;	raw = mouse_read();//KBD_INPT_BUF[0];
  6402                        L10079:
  6403                        	.line	1256
  6404 00:11FF: 22 xx xx xx  	jsl	~~mouse_read
  6405 00:1203: E2 20        	sep	#$20
  6406                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 118


  6407 00:1205: 85 17        	sta	<L153+raw_1
  6408 00:1207: C2 20        	rep	#$20
  6409                        	longa	on
  6410                        ;
  6411                        ;	//k_write_ipc_port(debugport,k_fxstring_append_h
                    ex(k_fxstring_new("RAW:",16),raw),0);
  6412                        ;
  6413                        ;	if(raw == 0xFA)
  6414                        	.line	1260
  6415                        ;	{
  6416 00:1209: E2 20        	sep	#$20
  6417                        	longa	off
  6418 00:120B: A5 17        	lda	<L153+raw_1
  6419 00:120D: C9 FA        	cmp	#<$fa
  6420 00:120F: C2 20        	rep	#$20
  6421                        	longa	on
  6422 00:1211: F0 03        	beq	L159
  6423 00:1213: 82 2A 00     	brl	L10080
  6424                        L159:
  6425                        	.line	1261
  6426                        ;		k_write_ipc_port(debugport,k_fxstring_ne
                    w("EAT 0xFA",16),0);
  6427                        	.line	1262
  6428 00:1216: F4 00 00     	pea	#<$0
  6429 00:1219: F4 10 00     	pea	#<$10
  6430 00:121C: F4 xx xx     	pea	#^L47+17
  6431 00:121F: F4 xx xx     	pea	#<L47+17
  6432 00:1222: 22 xx xx xx  	jsl	~~k_fxstring_new
  6433 00:1226: 85 01        	sta	<R0
  6434 00:1228: 86 03        	stx	<R0+2
  6435 00:122A: DA           	phx
  6436 00:122B: 48           	pha
  6437 00:122C: AD xx xx     	lda	|~~debugport+2
  6438 00:122F: 48           	pha
  6439 00:1230: AD xx xx     	lda	|~~debugport
  6440 00:1233: 48           	pha
  6441 00:1234: 22 xx xx xx  	jsl	~~k_write_ipc_port
  6442                        ;		return;
  6443                        	.line	1263
  6444                        L160:
  6445 00:1238: 2B           	pld
  6446 00:1239: 3B           	tsc
  6447 00:123A: 18           	clc
  6448 00:123B: 69 17 00     	adc	#L152
  6449 00:123E: 1B           	tcs
  6450 00:123F: 6B           	rtl
  6451                        ;	}
  6452                        	.line	1264
  6453                        ;
  6454                        ;	if((raw!=0xE0) && (_irq_key_state_machine.scanCo
                    de == raw)  && ( _irq_key_state_machine.scanTime < (_pseudo_
                    timer + 5) ))
  6455                        L10080:
  6456                        	.line	1266
  6457                        ;	{
  6458 00:1240: E2 20        	sep	#$20
  6459                        	longa	off
  6460 00:1242: A5 17        	lda	<L153+raw_1
  Sat Jul 10 2021  1:15                                                Page 119


  6461 00:1244: C9 E0        	cmp	#<$e0
  6462 00:1246: C2 20        	rep	#$20
  6463                        	longa	on
  6464 00:1248: D0 03        	bne	L161
  6465 00:124A: 82 53 00     	brl	L10081
  6466                        L161:
  6467 00:124D: E2 20        	sep	#$20
  6468                        	longa	off
  6469 00:124F: AD xx xx     	lda	|~~_irq_key_state_machine
  6470 00:1252: C5 17        	cmp	<L153+raw_1
  6471 00:1254: C2 20        	rep	#$20
  6472                        	longa	on
  6473 00:1256: F0 03        	beq	L162
  6474 00:1258: 82 45 00     	brl	L10081
  6475                        L162:
  6476 00:125B: 18           	clc
  6477 00:125C: A9 05 00     	lda	#$5
  6478 00:125F: 6D xx xx     	adc	|~~_pseudo_timer
  6479 00:1262: 85 01        	sta	<R0
  6480 00:1264: A9 00 00     	lda	#$0
  6481 00:1267: 6D xx xx     	adc	|~~_pseudo_timer+2
  6482 00:126A: 85 03        	sta	<R0+2
  6483 00:126C: AD xx xx     	lda	|~~_irq_key_state_machine+9
  6484 00:126F: C5 01        	cmp	<R0
  6485 00:1271: AD xx xx     	lda	|~~_irq_key_state_machine+9+2
  6486 00:1274: E5 03        	sbc	<R0+2
  6487 00:1276: 90 03        	bcc	L163
  6488 00:1278: 82 25 00     	brl	L10081
  6489                        L163:
  6490                        	.line	1267
  6491                        ;		k_write_ipc_port(debugport,k_fxstring_ne
                    w("skip",16),0);
  6492                        	.line	1268
  6493 00:127B: F4 00 00     	pea	#<$0
  6494 00:127E: F4 10 00     	pea	#<$10
  6495 00:1281: F4 xx xx     	pea	#^L47+26
  6496 00:1284: F4 xx xx     	pea	#<L47+26
  6497 00:1287: 22 xx xx xx  	jsl	~~k_fxstring_new
  6498 00:128B: 85 01        	sta	<R0
  6499 00:128D: 86 03        	stx	<R0+2
  6500 00:128F: DA           	phx
  6501 00:1290: 48           	pha
  6502 00:1291: AD xx xx     	lda	|~~debugport+2
  6503 00:1294: 48           	pha
  6504 00:1295: AD xx xx     	lda	|~~debugport
  6505 00:1298: 48           	pha
  6506 00:1299: 22 xx xx xx  	jsl	~~k_write_ipc_port
  6507                        ;		return;
  6508                        	.line	1269
  6509 00:129D: 82 98 FF     	brl	L160
  6510                        ;	}
  6511                        	.line	1270
  6512                        ;
  6513                        ;	if(raw > 0xE1 && raw < 0xF0)
  6514                        L10081:
  6515                        	.line	1272
  6516                        ;	{
  6517 00:12A0: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 120


  6518                        	longa	off
  6519 00:12A2: A9 E1        	lda	#$e1
  6520 00:12A4: C5 17        	cmp	<L153+raw_1
  6521 00:12A6: C2 20        	rep	#$20
  6522                        	longa	on
  6523 00:12A8: 90 03        	bcc	L164
  6524 00:12AA: 82 40 00     	brl	L10082
  6525                        L164:
  6526 00:12AD: E2 20        	sep	#$20
  6527                        	longa	off
  6528 00:12AF: A5 17        	lda	<L153+raw_1
  6529 00:12B1: C9 F0        	cmp	#<$f0
  6530 00:12B3: C2 20        	rep	#$20
  6531                        	longa	on
  6532 00:12B5: 90 03        	bcc	L165
  6533 00:12B7: 82 33 00     	brl	L10082
  6534                        L165:
  6535                        	.line	1273
  6536                        ;		fxs = k_fxstring_new("EAT ",16);
  6537                        	.line	1274
  6538 00:12BA: F4 10 00     	pea	#<$10
  6539 00:12BD: F4 xx xx     	pea	#^L47+31
  6540 00:12C0: F4 xx xx     	pea	#<L47+31
  6541 00:12C3: 22 xx xx xx  	jsl	~~k_fxstring_new
  6542 00:12C7: 85 0D        	sta	<L153+fxs_1
  6543 00:12C9: 86 0F        	stx	<L153+fxs_1+2
  6544                        ;
  6545                        ;		k_write_ipc_port(debugport,k_fxstring_ap
                    pend_hex(fxs,raw),0);
  6546                        	.line	1276
  6547 00:12CB: F4 00 00     	pea	#<$0
  6548 00:12CE: D4 17        	pei	<L153+raw_1
  6549 00:12D0: D4 0F        	pei	<L153+fxs_1+2
  6550 00:12D2: D4 0D        	pei	<L153+fxs_1
  6551 00:12D4: 22 xx xx xx  	jsl	~~k_fxstring_append_hex
  6552 00:12D8: 85 01        	sta	<R0
  6553 00:12DA: 86 03        	stx	<R0+2
  6554 00:12DC: DA           	phx
  6555 00:12DD: 48           	pha
  6556 00:12DE: AD xx xx     	lda	|~~debugport+2
  6557 00:12E1: 48           	pha
  6558 00:12E2: AD xx xx     	lda	|~~debugport
  6559 00:12E5: 48           	pha
  6560 00:12E6: 22 xx xx xx  	jsl	~~k_write_ipc_port
  6561                        ;		return;
  6562                        	.line	1277
  6563 00:12EA: 82 4B FF     	brl	L160
  6564                        ;	}
  6565                        	.line	1278
  6566                        ;
  6567                        ;	/*
  6568                        ;	if((_irq_key_state_machine.isExtended == TRUE) &
                    & (raw == 0xE0))
  6569                        ;	{
  6570                        ;		//k_write_ipc_port(debugport,k_fxstring_
                    new("EXTRA 0xE0",16),0);
  6571                        ;		k_write_ipc_port(debugport,k_fxstring_ap
                    pend_hex(k_fxstring_new("XE0:",16),mouse_read()),0);
  Sat Jul 10 2021  1:15                                                Page 121


  6572                        ;		return;
  6573                        ;	}
  6574                        ;	*/
  6575                        ;
  6576                        ;	_irq_key_state_machine.scanCode = raw;
  6577                        L10082:
  6578                        	.line	1289
  6579 00:12ED: E2 20        	sep	#$20
  6580                        	longa	off
  6581 00:12EF: A5 17        	lda	<L153+raw_1
  6582 00:12F1: 8D xx xx     	sta	|~~_irq_key_state_machine
  6583 00:12F4: C2 20        	rep	#$20
  6584                        	longa	on
  6585                        ;
  6586                        ;	switch(_irq_key_state_machine.scanCode)
  6587                        	.line	1291
  6588 00:12F6: AD xx xx     	lda	|~~_irq_key_state_machine
  6589 00:12F9: 29 FF 00     	and	#$ff
  6590 00:12FC: 82 2B 01     	brl	L10083
  6591                        ;	{
  6592                        	.line	1292
  6593                        ;	case 0x36:
  6594                        	.line	1293
  6595                        L10085:
  6596                        ;	case 0x2A:
  6597                        	.line	1294
  6598                        L10086:
  6599                        ;		_irq_key_state_machine.isShifted = TRUE;
  6600                        	.line	1295
  6601 00:12FF: E2 20        	sep	#$20
  6602                        	longa	off
  6603 00:1301: A9 01        	lda	#$1
  6604 00:1303: 8D xx xx     	sta	|~~_irq_key_state_machine+1
  6605 00:1306: C2 20        	rep	#$20
  6606                        	longa	on
  6607                        ;		break;
  6608                        	.line	1296
  6609 00:1308: 82 57 01     	brl	L10084
  6610                        ;	case 0xB6:
  6611                        	.line	1297
  6612                        L10087:
  6613                        ;	case 0xAA:
  6614                        	.line	1298
  6615                        L10088:
  6616                        ;		_irq_key_state_machine.isShifted = FALSE
                    ;
  6617                        	.line	1299
  6618 00:130B: E2 20        	sep	#$20
  6619                        	longa	off
  6620 00:130D: 9C xx xx     	stz	|~~_irq_key_state_machine+1
  6621 00:1310: C2 20        	rep	#$20
  6622                        	longa	on
  6623                        ;		break;
  6624                        	.line	1300
  6625 00:1312: 82 4D 01     	brl	L10084
  6626                        ;	case 0x38:
  6627                        	.line	1301
  6628                        L10089:
  Sat Jul 10 2021  1:15                                                Page 122


  6629                        ;		_irq_key_state_machine.isAlt = TRUE;
  6630                        	.line	1302
  6631 00:1315: E2 20        	sep	#$20
  6632                        	longa	off
  6633 00:1317: A9 01        	lda	#$1
  6634 00:1319: 8D xx xx     	sta	|~~_irq_key_state_machine+2
  6635 00:131C: C2 20        	rep	#$20
  6636                        	longa	on
  6637                        ;		break;
  6638                        	.line	1303
  6639 00:131E: 82 41 01     	brl	L10084
  6640                        ;	case 0xB8:
  6641                        	.line	1304
  6642                        L10090:
  6643                        ;		_irq_key_state_machine.isAlt = FALSE;
  6644                        	.line	1305
  6645 00:1321: E2 20        	sep	#$20
  6646                        	longa	off
  6647 00:1323: 9C xx xx     	stz	|~~_irq_key_state_machine+2
  6648 00:1326: C2 20        	rep	#$20
  6649                        	longa	on
  6650                        ;		break;
  6651                        	.line	1306
  6652 00:1328: 82 37 01     	brl	L10084
  6653                        ;	case 0xE0:
  6654                        	.line	1307
  6655                        L10091:
  6656                        ;	case 0xE1:
  6657                        	.line	1308
  6658                        L10092:
  6659                        ;		_irq_key_state_machine.isExtended = TRUE
                    ;
  6660                        	.line	1309
  6661 00:132B: E2 20        	sep	#$20
  6662                        	longa	off
  6663 00:132D: A9 01        	lda	#$1
  6664 00:132F: 8D xx xx     	sta	|~~_irq_key_state_machine+3
  6665 00:1332: C2 20        	rep	#$20
  6666                        	longa	on
  6667                        ;
  6668                        ;		//k_write_ipc_port(debugport,k_fxstring_
                    new("isExtended1",16),0);
  6669                        ;
  6670                        ;		_irq_key_state_machine.scanCode = mouse_
                    read();
  6671                        	.line	1313
  6672 00:1334: 22 xx xx xx  	jsl	~~mouse_read
  6673 00:1338: E2 20        	sep	#$20
  6674                        	longa	off
  6675 00:133A: 8D xx xx     	sta	|~~_irq_key_state_machine
  6676 00:133D: C2 20        	rep	#$20
  6677                        	longa	on
  6678                        ;		while(_irq_key_state_machine.scanCode>=0
                    xE0)
  6679                        	.line	1314
  6680                        L10093:
  6681 00:133F: E2 20        	sep	#$20
  6682                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 123


  6683 00:1341: AD xx xx     	lda	|~~_irq_key_state_machine
  6684 00:1344: C9 E0        	cmp	#<$e0
  6685 00:1346: C2 20        	rep	#$20
  6686                        	longa	on
  6687 00:1348: B0 03        	bcs	L166
  6688 00:134A: 82 0E 00     	brl	L10094
  6689                        L166:
  6690                        ;		{
  6691                        	.line	1315
  6692                        ;			//k_write_ipc_port(debugport,k_f
                    xstring_append_hex(k_fxstring_new("GE0:",16),_irq_key_state_
                    machine.scanCode),0);
  6693                        ;			_irq_key_state_machine.scanCode 
                    = mouse_read();
  6694                        	.line	1317
  6695 00:134D: 22 xx xx xx  	jsl	~~mouse_read
  6696 00:1351: E2 20        	sep	#$20
  6697                        	longa	off
  6698 00:1353: 8D xx xx     	sta	|~~_irq_key_state_machine
  6699 00:1356: C2 20        	rep	#$20
  6700                        	longa	on
  6701                        ;		}
  6702                        	.line	1318
  6703 00:1358: 82 E4 FF     	brl	L10093
  6704                        L10094:
  6705                        ;		//k_write_ipc_port(debugport,k_fxstring_
                    append_hex(k_fxstring_new("G1E0:",16),_irq_key_state_machine
                    .scanCode),0);
  6706                        ;
  6707                        ;
  6708                        ;
  6709                        ;		/*
  6710                        ;		fxs = k_fxstring_new("@0xE0:",16);
  6711                        ;		k_write_ipc_port(debugport,k_fxstring_ap
                    pend_hex(fxs,mouse_read()),0);
  6712                        ;
  6713                        ;		while(STATUS_PORT[0] & 0x01)
  6714                        ;		{
  6715                        ;
  6716                        ;			fxs = k_fxstring_new("*0xE0:",16
                    );
  6717                        ;
  6718                        ;			k_write_ipc_port(debugport,k_fxs
                    tring_append_hex(fxs,raw),0);
  6719                        ;
  6720                        ;			_irq_key_state_machine.scanCode 
                    = mouse_read();
  6721                        ;			if(_irq_key_state_machine.scanCo
                    de!=0xE0)
  6722                        ;				break;
  6723                        ;		}
  6724                        ;
  6725                        ;
  6726                        ;		//k_write_ipc_port(debugport,k_fxstring_
                    new("isExtended2",16),0);
  6727                        ;		return;
  6728                        ;		*/
  6729                        ;		break;
  Sat Jul 10 2021  1:15                                                Page 124


  6730                        	.line	1343
  6731 00:135B: 82 04 01     	brl	L10084
  6732                        ;	case 0x3A:
  6733                        	.line	1344
  6734                        L10095:
  6735                        ;		_irq_key_state_machine.isCapsLock = !_ir
                    q_key_state_machine.isCapsLock;
  6736                        	.line	1345
  6737 00:135E: 64 01        	stz	<R0
  6738 00:1360: AD xx xx     	lda	|~~_irq_key_state_machine+4
  6739 00:1363: 29 FF 00     	and	#$ff
  6740 00:1366: F0 03        	beq	L168
  6741 00:1368: 82 02 00     	brl	L167
  6742                        L168:
  6743 00:136B: E6 01        	inc	<R0
  6744                        L167:
  6745 00:136D: E2 20        	sep	#$20
  6746                        	longa	off
  6747 00:136F: A5 01        	lda	<R0
  6748 00:1371: 8D xx xx     	sta	|~~_irq_key_state_machine+4
  6749 00:1374: C2 20        	rep	#$20
  6750                        	longa	on
  6751                        ;
  6752                        ;		if(_irq_key_state_machine.isCapsLock)
  6753                        	.line	1347
  6754                        ;			_irq_key_state_machine.ledStatus
                    |=0x04;
  6755 00:1376: AD xx xx     	lda	|~~_irq_key_state_machine+4
  6756 00:1379: 29 FF 00     	and	#$ff
  6757 00:137C: D0 03        	bne	L169
  6758 00:137E: 82 0C 00     	brl	L10096
  6759                        L169:
  6760                        	.line	1348
  6761 00:1381: E2 20        	sep	#$20
  6762                        	longa	off
  6763 00:1383: A9 04        	lda	#$4
  6764 00:1385: 0C xx xx     	tsb	|~~_irq_key_state_machine+13
  6765 00:1388: C2 20        	rep	#$20
  6766                        	longa	on
  6767                        ;		else
  6768 00:138A: 82 09 00     	brl	L10097
  6769                        L10096:
  6770                        ;			_irq_key_state_machine.ledStatus
                    &=(~0x04);
  6771                        	.line	1350
  6772 00:138D: E2 20        	sep	#$20
  6773                        	longa	off
  6774 00:138F: A9 04        	lda	#$4
  6775 00:1391: 1C xx xx     	trb	|~~_irq_key_state_machine+13
  6776 00:1394: C2 20        	rep	#$20
  6777                        	longa	on
  6778                        L10097:
  6779                        ;
  6780                        ;		kbd_set_led(_irq_key_state_machine.ledSt
                    atus);
  6781                        	.line	1352
  6782 00:1396: AD xx xx     	lda	|~~_irq_key_state_machine+13
  6783 00:1399: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 125


  6784 00:139A: 22 xx xx xx  	jsl	~~kbd_set_led
  6785                        ;
  6786                        ;		break;
  6787                        	.line	1354
  6788 00:139E: 82 C1 00     	brl	L10084
  6789                        ;	case 0xBA:
  6790                        	.line	1355
  6791                        L10098:
  6792                        ;		//_irq_key_state_machine.isCapsLock = FA
                    LSE;
  6793                        ;		break;
  6794                        	.line	1357
  6795 00:13A1: 82 BE 00     	brl	L10084
  6796                        ;	case 0x45:
  6797                        	.line	1358
  6798                        L10099:
  6799                        ;		_irq_key_state_machine.isNumLock = !_irq
                    _key_state_machine.isNumLock;
  6800                        	.line	1359
  6801 00:13A4: 64 01        	stz	<R0
  6802 00:13A6: AD xx xx     	lda	|~~_irq_key_state_machine+5
  6803 00:13A9: 29 FF 00     	and	#$ff
  6804 00:13AC: F0 03        	beq	L171
  6805 00:13AE: 82 02 00     	brl	L170
  6806                        L171:
  6807 00:13B1: E6 01        	inc	<R0
  6808                        L170:
  6809 00:13B3: E2 20        	sep	#$20
  6810                        	longa	off
  6811 00:13B5: A5 01        	lda	<R0
  6812 00:13B7: 8D xx xx     	sta	|~~_irq_key_state_machine+5
  6813 00:13BA: C2 20        	rep	#$20
  6814                        	longa	on
  6815                        ;		if(_irq_key_state_machine.isNumLock)
  6816                        	.line	1360
  6817                        ;			_irq_key_state_machine.ledStatus
                    |=0x02;
  6818 00:13BC: AD xx xx     	lda	|~~_irq_key_state_machine+5
  6819 00:13BF: 29 FF 00     	and	#$ff
  6820 00:13C2: D0 03        	bne	L172
  6821 00:13C4: 82 0C 00     	brl	L10100
  6822                        L172:
  6823                        	.line	1361
  6824 00:13C7: E2 20        	sep	#$20
  6825                        	longa	off
  6826 00:13C9: A9 02        	lda	#$2
  6827 00:13CB: 0C xx xx     	tsb	|~~_irq_key_state_machine+13
  6828 00:13CE: C2 20        	rep	#$20
  6829                        	longa	on
  6830                        ;		else
  6831 00:13D0: 82 09 00     	brl	L10101
  6832                        L10100:
  6833                        ;			_irq_key_state_machine.ledStatus
                    &=(~0x02);
  6834                        	.line	1363
  6835 00:13D3: E2 20        	sep	#$20
  6836                        	longa	off
  6837 00:13D5: A9 02        	lda	#$2
  Sat Jul 10 2021  1:15                                                Page 126


  6838 00:13D7: 1C xx xx     	trb	|~~_irq_key_state_machine+13
  6839 00:13DA: C2 20        	rep	#$20
  6840                        	longa	on
  6841                        L10101:
  6842                        ;
  6843                        ;		kbd_set_led(_irq_key_state_machine.ledSt
                    atus);
  6844                        	.line	1365
  6845 00:13DC: AD xx xx     	lda	|~~_irq_key_state_machine+13
  6846 00:13DF: 48           	pha
  6847 00:13E0: 22 xx xx xx  	jsl	~~kbd_set_led
  6848                        ;
  6849                        ;		break;
  6850                        	.line	1367
  6851 00:13E4: 82 7B 00     	brl	L10084
  6852                        ;	case 0x46:
  6853                        	.line	1368
  6854                        L10102:
  6855                        ;		_irq_key_state_machine.isScrollLock = !_
                    irq_key_state_machine.isScrollLock;
  6856                        	.line	1369
  6857 00:13E7: 64 01        	stz	<R0
  6858 00:13E9: AD xx xx     	lda	|~~_irq_key_state_machine+6
  6859 00:13EC: 29 FF 00     	and	#$ff
  6860 00:13EF: F0 03        	beq	L174
  6861 00:13F1: 82 02 00     	brl	L173
  6862                        L174:
  6863 00:13F4: E6 01        	inc	<R0
  6864                        L173:
  6865 00:13F6: E2 20        	sep	#$20
  6866                        	longa	off
  6867 00:13F8: A5 01        	lda	<R0
  6868 00:13FA: 8D xx xx     	sta	|~~_irq_key_state_machine+6
  6869 00:13FD: C2 20        	rep	#$20
  6870                        	longa	on
  6871                        ;		if(_irq_key_state_machine.isScrollLock)
  6872                        	.line	1370
  6873                        ;			_irq_key_state_machine.ledStatus
                    |=0x01;
  6874 00:13FF: AD xx xx     	lda	|~~_irq_key_state_machine+6
  6875 00:1402: 29 FF 00     	and	#$ff
  6876 00:1405: D0 03        	bne	L175
  6877 00:1407: 82 0C 00     	brl	L10103
  6878                        L175:
  6879                        	.line	1371
  6880 00:140A: E2 20        	sep	#$20
  6881                        	longa	off
  6882 00:140C: A9 01        	lda	#$1
  6883 00:140E: 0C xx xx     	tsb	|~~_irq_key_state_machine+13
  6884 00:1411: C2 20        	rep	#$20
  6885                        	longa	on
  6886                        ;		else
  6887 00:1413: 82 09 00     	brl	L10104
  6888                        L10103:
  6889                        ;			_irq_key_state_machine.ledStatus
                    &=(~0x01);
  6890                        	.line	1373
  6891 00:1416: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 127


  6892                        	longa	off
  6893 00:1418: A9 01        	lda	#$1
  6894 00:141A: 1C xx xx     	trb	|~~_irq_key_state_machine+13
  6895 00:141D: C2 20        	rep	#$20
  6896                        	longa	on
  6897                        L10104:
  6898                        ;
  6899                        ;		kbd_set_led(_irq_key_state_machine.ledSt
                    atus);
  6900                        	.line	1375
  6901 00:141F: AD xx xx     	lda	|~~_irq_key_state_machine+13
  6902 00:1422: 48           	pha
  6903 00:1423: 22 xx xx xx  	jsl	~~kbd_set_led
  6904                        ;
  6905                        ;		break;
  6906                        	.line	1377
  6907 00:1427: 82 38 00     	brl	L10084
  6908                        ;	}
  6909                        	.line	1378
  6910                        L10083:
  6911                        	xref	~~~swt
  6912 00:142A: 22 xx xx xx  	jsl	~~~swt
  6913 00:142E: 0C 00        	dw	12
  6914 00:1430: 2A 00        	dw	42
  6915 00:1432: xx xx        	dw	L10086-1
  6916 00:1434: 36 00        	dw	54
  6917 00:1436: xx xx        	dw	L10085-1
  6918 00:1438: 38 00        	dw	56
  6919 00:143A: xx xx        	dw	L10089-1
  6920 00:143C: 3A 00        	dw	58
  6921 00:143E: xx xx        	dw	L10095-1
  6922 00:1440: 45 00        	dw	69
  6923 00:1442: xx xx        	dw	L10099-1
  6924 00:1444: 46 00        	dw	70
  6925 00:1446: xx xx        	dw	L10102-1
  6926 00:1448: AA 00        	dw	170
  6927 00:144A: xx xx        	dw	L10088-1
  6928 00:144C: B6 00        	dw	182
  6929 00:144E: xx xx        	dw	L10087-1
  6930 00:1450: B8 00        	dw	184
  6931 00:1452: xx xx        	dw	L10090-1
  6932 00:1454: BA 00        	dw	186
  6933 00:1456: xx xx        	dw	L10098-1
  6934 00:1458: E0 00        	dw	224
  6935 00:145A: xx xx        	dw	L10091-1
  6936 00:145C: E1 00        	dw	225
  6937 00:145E: xx xx        	dw	L10092-1
  6938 00:1460: xx xx        	dw	L10084-1
  6939                        L10084:
  6940                        ;
  6941                        ;
  6942                        ;
  6943                        ;	_irq_key_state_machine.scanTime = _pseudo_timer;
  6944                        	.line	1382
  6945 00:1462: AD xx xx     	lda	|~~_pseudo_timer
  6946 00:1465: 8D xx xx     	sta	|~~_irq_key_state_machine+9
  6947 00:1468: AD xx xx     	lda	|~~_pseudo_timer+2
  6948 00:146B: 8D xx xx     	sta	|~~_irq_key_state_machine+9+2
  Sat Jul 10 2021  1:15                                                Page 128


  6949                        ;	_irq_key_state_machine.keyChar = k_getKeyboardCh
                    ar(_irq_key_state_machine.scanCode,
  6950                        	.line	1383
  6951                        ;							
                    						   _irq_key_stat
                    e_machine.isExtended,
  6952                        ;							
                    						   _irq_key_stat
                    e_machine.isShifted^ _irq_key_state_machine.isCapsLock,
  6953                        ;							
                    						   _irq_key_stat
                    e_machine.isAlt);
  6954 00:146E: AD xx xx     	lda	|~~_irq_key_state_machine+2
  6955 00:1471: 29 FF 00     	and	#$ff
  6956 00:1474: 48           	pha
  6957 00:1475: AD xx xx     	lda	|~~_irq_key_state_machine+1
  6958 00:1478: 29 FF 00     	and	#$ff
  6959 00:147B: 85 01        	sta	<R0
  6960 00:147D: AD xx xx     	lda	|~~_irq_key_state_machine+4
  6961 00:1480: 29 FF 00     	and	#$ff
  6962 00:1483: 85 05        	sta	<R1
  6963 00:1485: A5 05        	lda	<R1
  6964 00:1487: 45 01        	eor	<R0
  6965 00:1489: 48           	pha
  6966 00:148A: AD xx xx     	lda	|~~_irq_key_state_machine+3
  6967 00:148D: 29 FF 00     	and	#$ff
  6968 00:1490: 48           	pha
  6969 00:1491: AD xx xx     	lda	|~~_irq_key_state_machine
  6970 00:1494: 48           	pha
  6971 00:1495: 22 xx xx xx  	jsl	~~k_getKeyboardChar
  6972 00:1499: 8D xx xx     	sta	|~~_irq_key_state_machine+7
  6973                        ;
  6974                        ;
  6975                        ;	//reset extended after char
  6976                        ;
  6977                        ;	if(_irq_key_state_machine.keyChar == -1)
  6978                        	.line	1391
  6979                        ;	{
  6980 00:149C: AD xx xx     	lda	|~~_irq_key_state_machine+7
  6981 00:149F: C9 FF FF     	cmp	#<$ffffffff
  6982 00:14A2: F0 03        	beq	L176
  6983 00:14A4: 82 25 00     	brl	L10105
  6984                        L176:
  6985                        	.line	1392
  6986                        ;		_irq_key_state_machine.keyChar = 0;
  6987                        	.line	1393
  6988 00:14A7: 9C xx xx     	stz	|~~_irq_key_state_machine+7
  6989                        ;		k_write_ipc_port(debugport,k_fxstring_ne
                    w("OVERFLOW",16),0);
  6990                        	.line	1394
  6991 00:14AA: F4 00 00     	pea	#<$0
  6992 00:14AD: F4 10 00     	pea	#<$10
  6993 00:14B0: F4 xx xx     	pea	#^L47+36
  6994 00:14B3: F4 xx xx     	pea	#<L47+36
  6995 00:14B6: 22 xx xx xx  	jsl	~~k_fxstring_new
  6996 00:14BA: 85 01        	sta	<R0
  6997 00:14BC: 86 03        	stx	<R0+2
  6998 00:14BE: DA           	phx
  Sat Jul 10 2021  1:15                                                Page 129


  6999 00:14BF: 48           	pha
  7000 00:14C0: AD xx xx     	lda	|~~debugport+2
  7001 00:14C3: 48           	pha
  7002 00:14C4: AD xx xx     	lda	|~~debugport
  7003 00:14C7: 48           	pha
  7004 00:14C8: 22 xx xx xx  	jsl	~~k_write_ipc_port
  7005                        ;	}
  7006                        	.line	1395
  7007                        ;
  7008                        ;	//k_write_ipc_port(debugport,k_fxstring_append_h
                    ex(k_fxstring_new("IRQE_KEYBOARD_RAW:",32),_irq_key_state_ma
                    chine.scanCode),0);
  7009                        ;	k_irq_device_event(IRQE_KEYBOARD_RAW,_pseudo_tim
                    er,&_irq_key_state_machine);
  7010                        L10105:
  7011                        	.line	1398
  7012 00:14CC: A9 xx xx     	lda	#<~~_irq_key_state_machine
  7013 00:14CF: 85 01        	sta	<R0
  7014                        	xref	_BEG_DATA
  7015 00:14D1: A9 xx xx     	lda	#_BEG_DATA>>16
  7016 00:14D4: 85 03        	sta	<R0+2
  7017 00:14D6: D4 03        	pei	<R0+2
  7018 00:14D8: D4 01        	pei	<R0
  7019 00:14DA: AD xx xx     	lda	|~~_pseudo_timer+2
  7020 00:14DD: 48           	pha
  7021 00:14DE: AD xx xx     	lda	|~~_pseudo_timer
  7022 00:14E1: 48           	pha
  7023 00:14E2: F4 11 00     	pea	#<$11
  7024 00:14E5: 22 xx xx xx  	jsl	~~k_irq_device_event
  7025                        ;
  7026                        ;
  7027                        ;	//if(_irq_key_state_machine.scanCode == 0x01)
  7028                        ;	//	k_write_ipc_port(debugport,k_fxstring_ne
                    w("ESCAPE",16),0);
  7029                        ;
  7030                        ;	if(raw != 0xE0)
  7031                        	.line	1404
  7032                        ;		_irq_key_state_machine.isExtended = FALS
                    E;
  7033 00:14E9: E2 20        	sep	#$20
  7034                        	longa	off
  7035 00:14EB: A5 17        	lda	<L153+raw_1
  7036 00:14ED: C9 E0        	cmp	#<$e0
  7037 00:14EF: C2 20        	rep	#$20
  7038                        	longa	on
  7039 00:14F1: D0 03        	bne	L177
  7040 00:14F3: 82 07 00     	brl	L10106
  7041                        L177:
  7042                        	.line	1405
  7043 00:14F6: E2 20        	sep	#$20
  7044                        	longa	off
  7045 00:14F8: 9C xx xx     	stz	|~~_irq_key_state_machine+3
  7046 00:14FB: C2 20        	rep	#$20
  7047                        	longa	on
  7048                        ;
  7049                        ;
  7050                        ;
  7051                        ;
  Sat Jul 10 2021  1:15                                                Page 130


  7052                        ;	return;
  7053                        L10106:
  7054                        	.line	1410
  7055 00:14FD: 82 38 FD     	brl	L160
  7056                        ;
  7057                        ;
  7058                        ;
  7059                        ;}
  7060                        	.line	1414
  7061                        	.endblock	1414
  7062             00000017   L152	equ	23
  7063             00000009   L153	equ	9
  7064                        	ends
  7065                        	efunc
  7066                        	.endfunc	1414,9,23
  7067                        	.line	1414
  7068                        	data
  7069                        L47:
  7070 00:0128: 40 64 65 62  	db	$40,$64,$65,$62,$75,$67,$00,$40,$6B,$65,
                    $79,$62,$6F,$61,$72
       00:012C: 75 67 00 40 
       00:0130: 6B 65 79 62 
       00:0134: 6F 61 72 
  7071 00:0137: 64 00 45 41  	db	$64,$00,$45,$41,$54,$20,$30,$78,$46,$41,
                    $00,$73,$6B,$69,$70
       00:013B: 54 20 30 78 
       00:013F: 46 41 00 73 
       00:0143: 6B 69 70 
  7072 00:0146: 00 45 41 54  	db	$00,$45,$41,$54,$20,$00,$4F,$56,$45,$52,
                    $46,$4C,$4F,$57,$00
       00:014A: 20 00 4F 56 
       00:014E: 45 52 46 4C 
       00:0152: 4F 57 00 
  7073 00:0155:              	ends
  7074                        ;
  7075                        	.line	1414
  7076                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirqV3.c",1228
  7077                        	xref	~~k_get_device_driver
  7078                        	xref	~~k_debug_hex
  7079                        	xref	~~k_debug_string
  7080                        	xref	~~k_delay
  7081                        	xref	~~k_init_keyboard
  7082                        	xref	~~k_put_string
  7083                        	xref	~~k_enable_text_cursor
  7084                        	xref	~~k_set_border
  7085                        	xref	~~k_set_border_color
  7086                        	xref	~~k_enable_border
  7087                        	xref	~~k_irq_device_event
  7088                        	xref	~~k_signal_sol_event
  7089                        	xref	~~k_getKeyboardChar
  7090                        	xref	~~k_enable_text_mode
  7091                        	xref	~~k_write_ipc_port
  7092                        	xref	~~k_get_ipc_port
  7093                        	xref	~~k_mem_allocate_heap
  7094                        	xref	~~k_longtodec
  7095                        	xref	~~k_fxstring_append_hex
  7096                        	xref	~~k_fxstring_new
  Sat Jul 10 2021  1:15                                                Page 131


  7097                        	xref	~~_k_exec_message
  7098                        	xref	~~_k_exec_error
  7099                        	xref	~~_k_exec_context
  7100                        	.sym	~~kbd_set_scanpage,~~kbd_set_scanpage,65
                    ,2,0
  7101                        	.sym	~~kbd_set_led,~~kbd_set_led,65,2,0
  7102                        	.sym	~~mouse_driver_init,~~mouse_driver_init,
                    65,2,0
  7103                        	.sym	~~IRQHandler,~~IRQHandler,65,2,0
  7104                        	.sym	~~COPHandler,~~COPHandler,65,2,0
  7105                        	.sym	~~BRKHandler,~~BRKHandler,65,2,0
  7106                        	.sym	~~mouse_handler_2,~~mouse_handler_2,65,2
                    ,0
  7107                        	.sym	~~mouse_handler_1,~~mouse_handler_1,65,2
                    ,0
  7108                        	.sym	~~mouse_handler_0,~~mouse_handler_0,65,2
                    ,0
  7109                        	.sym	~~k_mouse_disable,~~k_mouse_disable,65,2
                    ,0
  7110                        	.sym	~~k_mouse_enable,~~k_mouse_enable,65,2,0
  7111                        	.sym	~~kbd_reset,~~kbd_reset,65,2,0
  7112                        	.sym	~~mouse_install,~~mouse_install,65,2,0
  7113                        	.sym	~~mouse_read,~~mouse_read,78,2,0
  7114                        	.sym	~~mouse_write,~~mouse_write,65,2,0
  7115                        	.sym	~~mouse_wait,~~mouse_wait,65,2,0
  7116                        	.sym	~~mouse_handler,~~mouse_handler,65,2,0
  7117                        	.sym	~~keyboard_handler,~~keyboard_handler,65
                    ,2,0
  7118                        	.sym	~~k_dispatch_reg3,~~k_dispatch_reg3,65,2
                    ,0
  7119                        	.sym	~~k_dispatch_reg2,~~k_dispatch_reg2,65,2
                    ,0
  7120                        	.sym	~~k_dispatch_reg1,~~k_dispatch_reg1,65,2
                    ,0
  7121                        	.sym	~~k_dispatch_reg0,~~k_dispatch_reg0,65,2
                    ,0
  7122                        	.sym	~~_system_timer,~~_system_timer,18,2,32
  7123                        	.sym	~~_pseudo_timer,~~_pseudo_timer,18,2,32
  7124                        	.sym	~~_k_exec_message,~~_k_exec_message,110,
                    18,0,64
  7125                        	.sym	~~_k_exec_error,~~_k_exec_error,18,18,32
  7126                        	.sym	~~_k_exec_context,~~_k_exec_context,18,1
                    8,32
  7127                        	.sym	~~_k_shiftKeyMode,~~_k_shiftKeyMode,14,3
                    ,8
  7128                        	.sym	~~_k_extendedKeyMode,~~_k_extendedKeyMod
                    e,14,3,8
  7129                        	.sym	~~boxside,~~boxside,110,2,0,2
  7130                        	.sym	~~boxbottom,~~boxbottom,110,2,0,71
  7131                        	.sym	~~boxtop,~~boxtop,110,2,0,71
  7132                        	.sym	~~_k_default_arg,~~_k_default_arg,18,3,3
                    2
  7133                        	.sym	~~_irq_ktick,~~_irq_ktick,7,3,32
  7134                        	.sym	~~mouseport,~~mouseport,138,2,32,54
  7135                        	.sym	~~kbport,~~kbport,138,2,32,54
  7136                        	.sym	~~debugport2,~~debugport2,138,3,32,54
  7137                        	.sym	~~debugport,~~debugport,138,2,32,54
  7138                        	.sym	~~mouse_irq,~~mouse_irq,18,2,32
  Sat Jul 10 2021  1:15                                                Page 132


  7139                        	.sym	~~mouse_discard,~~mouse_discard,14,2,8
  7140                        	.sym	~~mouse_cycle,~~mouse_cycle,14,2,8
  7141                        	.sym	~~mouse_data,~~mouse_data,110,2,0,3
  7142                        	.sym	~~mouse_data_ready,~~mouse_data_ready,14
                    ,2,8
  7143                        	.sym	~~_irq_key_state_machine,~~_irq_key_stat
                    e_machine,10,3,112,19
  7144                        	.sym	~~_driver_Keyboard,~~_driver_Keyboard,13
                    8,3,32,83
  7145                        	.sym	~~_irq_keyboardTimeout,~~_irq_keyboardTi
                    meout,5,2,16
  7146                        	.sym	~~k_get_device_driver,~~k_get_device_dri
                    ver,1098,18,32,83
  7147                        	.sym	PDOSHANDLE,0,138,14,32,124
  7148                        	.sym	DOSHANDLE,0,10,14,80,124
  7149                        	.sym	PFXDOSDEVICE,0,138,14,32,122
  7150                        	.sym	FXDOSDEVICE,0,10,14,5744,122
  7151                        	.sym	DOSINITDEVICE,0,641,14,32
  7152                        	.sym	DOSSECTORWRITER,0,654,14,32
  7153                        	.sym	DOSSECTORREADER,0,654,14,32
  7154                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,121
  7155                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,121
  7156                        	.sym	PIDSECTOR,0,138,14,32,98
  7157                        	.sym	IDSECTOR,0,10,14,2048,98
  7158                        	.sym	PLFN,0,138,14,32,97
  7159                        	.sym	LFN,0,10,14,256,97
  7160                        	.sym	PFAT16ENTRYLONG,0,138,14,32,96
  7161                        	.sym	FAT16ENTRYLONG,0,10,14,288,96
  7162                        	.sym	PFAT16ENTRY,0,138,14,32,95
  7163                        	.sym	FAT16ENTRY,0,10,14,256,95
  7164                        	.sym	Fat16BootSector,0,10,14,4096,94
  7165                        	.sym	PPARTITIONTABLE,0,138,14,32,93
  7166                        	.sym	PARTITIONTABLE,0,10,14,128,93
  7167                        	.sym	PFATBOOTSECTOR,0,138,14,32,92
  7168                        	.sym	FATBOOTSECTOR,0,10,14,928,92
  7169                        	.sym	fat_BS_t,0,10,14,688,91
  7170                        	.sym	fat_extBS_16_t,0,10,14,192,90
  7171                        	.sym	PFAT32EXT,0,138,14,32,89
  7172                        	.sym	fat_extBS_32_t,0,10,14,416,89
  7173                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,88
  7174                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,88
  7175                        	.sym	PFILEINFO,0,138,14,32,87
  7176                        	.sym	FILEINFO,0,10,14,136,87
  7177                        	.sym	PDISKINFO,0,138,14,32,86
  7178                        	.sym	DISKINFO,0,10,14,416,86
  7179                        	.sym	PDIRENTRY,0,138,14,32,85
  7180                        	.sym	DIRENTRY,0,10,14,256,85
  7181                        	.sym	DRESULT,0,5,14,16
  7182                        	.sym	DSTATUS,0,14,14,8
  7183                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  7184                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  7185                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  7186                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  7187                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  7188                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
  7189                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,84
  7190                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,84
  7191                        	.sym	GETDRIVERDEF,0,8842,14,32,83
  Sat Jul 10 2021  1:15                                                Page 133


  7192                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,83
  7193                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,83
  7194                        	.sym	~~k_debug_hex,~~k_debug_hex,65,18,0
  7195                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  7196                        	.sym	~~k_delay,~~k_delay,65,18,0
  7197                        	.sym	PSEGMENTHEADER,0,138,14,32,82
  7198                        	.sym	SEGMENTHEADER,0,10,14,160,82
  7199                        	.sym	~~k_init_keyboard,~~k_init_keyboard,65,1
                    8,0
  7200                        	.sym	PDEBUGBYTEBITS,0,138,14,32,81
  7201                        	.sym	DEBUGBYTEBITS,0,10,14,8,81
  7202                        	.sym	PFXENVIRONMENT,0,138,14,32,80
  7203                        	.sym	FXENVIRONMENT,0,10,14,96,80
  7204                        	.sym	PFXZEROPAGE,0,138,14,32,79
  7205                        	.sym	FXZEROPAGE,0,10,14,824,79
  7206                        	.sym	KERNELTRAPCALL,0,641,14,32
  7207                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,78
  7208                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,78
  7209                        	.sym	FRESULT,0,5,14,16
  7210                        	.sym	MKFS_PARM,0,10,14,80,77
  7211                        	.sym	FILINFO,0,10,14,2224,76
  7212                        	.sym	DIR,0,10,14,416,75
  7213                        	.sym	FIL,0,10,14,4400,74
  7214                        	.sym	FFOBJID,0,10,14,128,73
  7215                        	.sym	FATFS,0,10,14,4504,72
  7216                        	.sym	LBA_t,0,18,14,32
  7217                        	.sym	FSIZE_t,0,18,14,32
  7218                        	.sym	TCHAR,0,14,14,8
  7219                        	.sym	~~k_put_string,~~k_put_string,69,18,0
  7220                        	.sym	~~k_enable_text_cursor,~~k_enable_text_c
                    ursor,65,18,0
  7221                        	.sym	~~k_set_border,~~k_set_border,65,18,0
  7222                        	.sym	~~k_set_border_color,~~k_set_border_colo
                    r,65,18,0
  7223                        	.sym	~~k_enable_border,~~k_enable_border,65,1
                    8,0
  7224                        	.sym	PCOMMANDARGS,0,138,14,32,71
  7225                        	.sym	COMMANDARGS,0,10,14,64,71
  7226                        	.sym	PTOKENIZESTATE,0,133,14,32
  7227                        	.sym	TOKENIZESTATE,0,5,14,16
  7228                        	.sym	PTOKEN,0,138,14,32,70
  7229                        	.sym	TOKEN,0,10,14,64,70
  7230                        	.sym	PTOKENTYPE,0,133,14,32
  7231                        	.sym	TOKENTYPE,0,5,14,16
  7232                        	.sym	FXCommandHandler,0,656,14,32
  7233                        	.sym	PCONSOLECTX,0,138,14,32,69
  7234                        	.sym	CONSOLECTX,0,10,14,1144,69
  7235                        	.sym	PSPINNERCTX,0,138,14,32,68
  7236                        	.sym	SPINNERCTX,0,10,14,48,68
  7237                        	.sym	HCLIP,0,138,14,32,67
  7238                        	.sym	PCLIPBOARD_DATA,0,138,14,32,67
  7239                        	.sym	CLIPBOARD_DATA,0,10,14,168,67
  7240                        	.sym	~~k_irq_device_event,~~k_irq_device_even
                    t,65,18,0
  7241                        	.sym	~~k_signal_sol_event,~~k_signal_sol_even
                    t,65,18,0
  7242                        	.sym	~~k_getKeyboardChar,~~k_getKeyboardChar,
  Sat Jul 10 2021  1:15                                                Page 134


                    80,18,0
  7243                        	.sym	PEVENTMANAGER,0,138,14,32,66
  7244                        	.sym	EVENTMANAGER,0,10,14,192,66
  7245                        	.sym	EV_RUN,0,656,14,32
  7246                        	.sym	EV_QUERY_METRIC,0,656,14,32
  7247                        	.sym	EV_CONFIGURE,0,656,14,32
  7248                        	.sym	EV_UNINIT,0,641,14,32
  7249                        	.sym	EV_INIT,0,8833,14,32
  7250                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,65
  7251                        	.sym	MOUSE_MSG_STATE,0,10,14,184,65
  7252                        	.sym	PFXEVENTPROCESS,0,138,14,32,64
  7253                        	.sym	FXEVENTPROCESS,0,10,14,64,64
  7254                        	.sym	PMARSHALDATA,0,139,14,32,63
  7255                        	.sym	MARSHALDATA,0,11,14,32,63
  7256                        	.sym	FXIDLEPROCESS,0,641,14,32
  7257                        	.sym	FXEventProc,0,641,14,32
  7258                        	.sym	PMOUSEMSGDATA,0,138,14,32,62
  7259                        	.sym	MOUSEMSGDATA,0,10,14,64,62
  7260                        	.sym	MSGIRQ,0,5,14,16
  7261                        	.sym	MAINLOOPARGS,0,10,14,16,61
  7262                        	.sym	PEACHCHILD_MSG,0,138,14,32,60
  7263                        	.sym	EACHCHILD_MSG,0,10,14,64,60
  7264                        	.sym	PMSGBOX_DATA,0,138,14,32,59
  7265                        	.sym	MSGBOX_DATA,0,10,14,96,59
  7266                        	.sym	PDESKTOP_DATA,0,138,14,32,58
  7267                        	.sym	DESKTOP_DATA,0,10,14,64,58
  7268                        	.sym	PWINDOWMANAGER,0,138,14,32,57
  7269                        	.sym	WINDOWMANAGER,0,10,14,160,57
  7270                        	.sym	WM_DOPROCS,0,641,14,32
  7271                        	.sym	WM_QUERY_METRIC,0,656,14,32
  7272                        	.sym	WM_CONFIGURE,0,656,14,32
  7273                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  7274                        	.sym	WM_EVENTS,0,641,14,32
  7275                        	.sym	~~k_enable_text_mode,~~k_enable_text_mod
                    e,65,18,0
  7276                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,56
  7277                        	.sym	CUR_PALETTE_MAP,0,10,14,400,56
  7278                        	.sym	PCLICKDETECTED,0,138,14,32,55
  7279                        	.sym	CLICKDETECTED,0,10,14,64,55
  7280                        	.sym	OBJECTCLICKED,0,641,14,32
  7281                        	.sym	~~k_write_ipc_port,~~k_write_ipc_port,80
                    ,18,0
  7282                        	.sym	~~k_get_ipc_port,~~k_get_ipc_port,1098,1
                    8,32,54
  7283                        	.sym	PIPCPORT,0,138,14,32,54
  7284                        	.sym	IPCPORT,0,10,14,144,54
  7285                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
  7286                        	.sym	MemoryCallback,0,641,14,32
  7287                        	.sym	PFXMEMORYMAP,0,138,14,32,53
  7288                        	.sym	FXMEMORYMAP,0,10,14,2072,53
  7289                        	.sym	UMM_HEAP_INFO,0,10,14,256,52
  7290                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  7291                        	.sym	FOREACHNODE,0,641,14,32
  7292                        	.sym	PEXECUTIVE,0,138,14,32,51
  7293                        	.sym	EXECUTIVE,0,10,14,128,51
  7294                        	.sym	EX_QUERY_METRIC,0,656,14,32
  7295                        	.sym	EX_CONFIGURE,0,656,14,32
  Sat Jul 10 2021  1:15                                                Page 135


  7296                        	.sym	EX_UNINIT,0,641,14,32
  7297                        	.sym	EX_INIT,0,8833,14,32
  7298                        	.sym	~~k_longtodec,~~k_longtodec,1102,18,32
  7299                        	.sym	~~k_fxstring_append_hex,~~k_fxstring_app
                    end_hex,1098,18,32,50
  7300                        	.sym	~~k_fxstring_new,~~k_fxstring_new,1098,1
                    8,32,50
  7301                        	.sym	PFXSTRING,0,138,14,32,50
  7302                        	.sym	FXSTRING,0,10,14,64,50
  7303                        	.sym	Boolean_T,0,5,14,16
  7304                        	.sym	ldiv_t,0,10,14,64,48
  7305                        	.sym	div_t,0,10,14,32,47
  7306                        	.sym	wctype_t,0,16,14,16
  7307                        	.sym	wint_t,0,16,14,16
  7308                        	.sym	wchar_t,0,14,14,8
  7309                        	.sym	ptrdiff_t,0,7,14,32
  7310                        	.sym	size_t,0,16,14,16
  7311                        	.sym	PFXRFHEADER_FONT,0,138,14,32,46
  7312                        	.sym	FXRFHEADER_FONT,0,10,14,144,46
  7313                        	.sym	PFXRFHEADER,0,138,14,32,45
  7314                        	.sym	FXRFHEADER,0,10,14,72,45
  7315                        	.sym	PFXCOMBUFFER,0,138,14,32,44
  7316                        	.sym	FXCOMBUFFER,0,10,14,2080,44
  7317                        	.sym	PSUBMENULIST,0,138,14,32,43
  7318                        	.sym	SUBMENULIST,0,10,14,40,43
  7319                        	.sym	HSUBMENU,0,7,14,32
  7320                        	.sym	PSUBMENU,0,138,14,32,42
  7321                        	.sym	SUBMENU,0,10,14,64,42
  7322                        	.sym	MenuAction,0,641,14,32
  7323                        	.sym	PMENUANCHOR,0,138,14,32,41
  7324                        	.sym	MENUANCHOR,0,10,14,272,41
  7325                        	.sym	PMSGBOX,0,138,14,32,40
  7326                        	.sym	MSGBOX,0,10,14,144,40
  7327                        	.sym	PTEXTBOX,0,138,14,32,39
  7328                        	.sym	TEXTBOX,0,10,14,144,39
  7329                        	.sym	PLISTBOX,0,138,14,32,38
  7330                        	.sym	LISTBOX,0,10,14,240,38
  7331                        	.sym	PSCROLLBAR,0,138,14,32,37
  7332                        	.sym	SCROLLBAR,0,10,14,240,37
  7333                        	.sym	PBUTTON,0,138,14,32,36
  7334                        	.sym	BUTTON,0,10,14,96,36
  7335                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,35
  7336                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,35
  7337                        	.sym	PMENUTAG,0,138,14,32,34
  7338                        	.sym	MENUTAG,0,10,14,160,34
  7339                        	.sym	PMENU,0,138,14,32,33
  7340                        	.sym	MENU,0,10,14,280,33
  7341                        	.sym	HMENURESOURCE,0,129,14,32
  7342                        	.sym	FONTMETRIC,0,10,14,32,32
  7343                        	.sym	TITLE,0,142,14,32
  7344                        	.sym	PHANDLE,0,1153,14,32
  7345                        	.sym	HANDLE,0,129,14,32
  7346                        	.sym	PWINDOWEX,0,138,14,32,31
  7347                        	.sym	WINDOWEX,0,10,14,3880,31
  7348                        	.sym	PWINDOW,0,138,14,32,30
  7349                        	.sym	WINDOW,0,10,14,3904,30
  7350                        	.sym	PDRAGDATA,0,138,14,32,29
  7351                        	.sym	DRAGDATA,0,10,14,216,29
  Sat Jul 10 2021  1:15                                                Page 136


  7352                        	.sym	PNCCLICKABLE,0,138,14,32,28
  7353                        	.sym	NCCLICKABLE,0,10,14,136,28
  7354                        	.sym	HCLICKABLE,0,7,14,32
  7355                        	.sym	PCLICKABLE,0,138,14,32,27
  7356                        	.sym	CLICKABLE,0,10,14,152,27
  7357                        	.sym	PWNDCLASS,0,138,14,32,26
  7358                        	.sym	WNDCLASS,0,10,14,272,26
  7359                        	.sym	HBRUSH,0,129,14,32
  7360                        	.sym	HCURSOR,0,129,14,32
  7361                        	.sym	HICON,0,129,14,32
  7362                        	.sym	HINSTANCE,0,129,14,32
  7363                        	.sym	FXWndProc,0,654,14,32
  7364                        	.sym	PDRECT,0,138,14,32,25
  7365                        	.sym	DRECT,0,10,14,112,25
  7366                        	.sym	PRECTP,0,138,14,32,24
  7367                        	.sym	RECTP,0,10,14,96,24
  7368                        	.sym	PRECT,0,138,14,32,23
  7369                        	.sym	RECT,0,10,14,112,23
  7370                        	.sym	PPOINT,0,138,14,32,22
  7371                        	.sym	POINT,0,10,14,32,22
  7372                        	.sym	PFXPROPERTY,0,138,14,32,20
  7373                        	.sym	FXPROPERTY,0,10,14,384,20
  7374                        	.sym	PKEYSTATE,0,138,14,32,19
  7375                        	.sym	KEYSTATE,0,10,14,112,19
  7376                        	.sym	SCANCODE,0,14,14,8
  7377                        	.sym	KEYCODE,0,16,14,16
  7378                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
  7379                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
  7380                        	.sym	PFXPROCESS,0,138,14,32,17
  7381                        	.sym	FXPROCESS,0,10,14,800,17
  7382                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
  7383                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
  7384                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
  7385                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
  7386                        	.sym	FXProcessProc,0,641,14,32
  7387                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
  7388                        	.sym	FXCMDMESSAGE,0,10,14,304,14
  7389                        	.sym	PFXOSMESSAGE,0,138,14,32,13
  7390                        	.sym	FXOSMESSAGE,0,10,14,304,13
  7391                        	.sym	PINT_REGS,0,138,14,32,12
  7392                        	.sym	INT_REGS,0,10,14,104,12
  7393                        	.sym	TASK_STACK,0,10,14,32,11
  7394                        	.sym	TASK,0,10,14,48,10
  7395                        	.sym	PIRQDATA,0,138,14,32,9
  7396                        	.sym	IRQDATA,0,10,14,48,9
  7397                        	.sym	HMENU,0,129,14,32
  7398                        	.sym	HWND,0,129,14,32
  7399                        	.sym	MSGDATA,0,14,14,8
  7400                        	.sym	MSGDEST,0,18,14,32
  7401                        	.sym	MSGSRC,0,18,14,32
  7402                        	.sym	MSGTYPE,0,16,14,16
  7403                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
  7404                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
  7405                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
  7406                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
  7407                        	.sym	FILE_PATH_LIST,0,138,14,32,3
  7408                        	.sym	PROCEDURE_LIST,0,138,14,32,3
  7409                        	.sym	FILE_HANDLE,0,138,14,32,8
  Sat Jul 10 2021  1:15                                                Page 137


  7410                        	.sym	FILE_BLOCK,0,10,14,552,8
  7411                        	.sym	SEMAPHORE,0,10,14,16,7
  7412                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
  7413                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
  7414                        	.sym	KRESULT,0,18,14,32
  7415                        	.sym	PKERNEL_ERROR,0,138,14,32,5
  7416                        	.sym	KERNEL_ERROR,0,10,14,32,5
  7417                        	.sym	PROCESS_STATUS,0,16,14,16
  7418                        	.sym	FILE_PATH_NAME,0,142,14,32
  7419                        	.sym	PROCESS_RESOURCE,0,129,14,32
  7420                        	.sym	PROCESS_TLS,0,129,14,32
  7421                        	.sym	PROCESS_CTX,0,129,14,32
  7422                        	.sym	USERID,0,16,14,16
  7423                        	.sym	PROCESS_ID,0,18,14,32
  7424                        	.sym	PROCESS_BANK,0,14,14,8
  7425                        	.sym	PFXQUEUE,0,138,14,32,4
  7426                        	.sym	FXQUEUE,0,10,14,80,4
  7427                        	.sym	PFXNODELIST,0,138,14,32,3
  7428                        	.sym	FXNODELIST,0,10,14,96,3
  7429                        	.sym	NodeListDeallocator,0,641,14,32
  7430                        	.sym	PFXNODE,0,138,14,32,2
  7431                        	.sym	FXNODE,0,10,14,384,2
  7432                        	.sym	PBYTEBITS,0,138,14,32,1
  7433                        	.sym	BYTEBITS,0,10,14,8,1
  7434                        	.sym	HRESULT,0,18,14,32
  7435                        	.sym	LPWCHAR,0,144,14,32
  7436                        	.sym	WCHAR,0,16,14,16
  7437                        	.sym	HCOLOR,0,129,14,32
  7438                        	.sym	HFONT,0,129,14,32
  7439                        	.sym	HDC,0,129,14,32
  7440                        	.sym	HPOINTER,0,129,14,32
  7441                        	.sym	uint32_t,0,18,14,32
  7442                        	.sym	uint8_t,0,14,14,8
  7443                        	.sym	LPBOOL,0,142,14,32
  7444                        	.sym	BOOL,0,14,14,8
  7445                        	.sym	DWORD,0,18,14,32
  7446                        	.sym	ULONG,0,18,14,32
  7447                        	.sym	LPLONG,0,135,14,32
  7448                        	.sym	LONG,0,7,14,32
  7449                        	.sym	PUINT,0,144,14,32
  7450                        	.sym	USHORT,0,16,14,16
  7451                        	.sym	UINT,0,16,14,16
  7452                        	.sym	INT,0,5,14,16
  7453                        	.sym	WORD,0,5,14,16
  7454                        	.sym	PBYTE,0,142,14,32
  7455                        	.sym	BYTE,0,14,14,8
  7456                        	.sym	IOPORT,0,142,14,32
  7457                        	.sym	PUCHAR,0,142,14,32
  7458                        	.sym	UCHAR,0,14,14,8
  7459                        	.sym	LPWCSTR,0,142,14,32
  7460                        	.sym	LPCSTR,0,142,14,32
  7461                        	.sym	LPSTR,0,142,14,32
  7462                        	.sym	LPCHAR,0,142,14,32
  7463                        	.sym	CHAR,0,14,14,8
  7464                        	.sym	LPVOID,0,129,14,32
  7465                        	.sym	VOID,0,1,14,32
  7466                        	end

  Sat Jul 10 2021  1:15                                                Page 138



      Lines assembled: 7466
      Errors: 0
