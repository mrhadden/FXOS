  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.c",0
     7                        ;#include "fxos.h"
     8                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
     9                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    10                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    11                        	.line	88
    12                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    13                        	.stag	fake1_,32,1
    14                        	.member	quot,0,5,8,16
    15                        	.member	rem,16,5,8,16
    16                        	.eos
    17                        	.stag	fake2_,64,2
    18                        	.member	quot,0,7,8,32
    19                        	.member	rem,32,7,8,32
    20                        	.eos
    21                        	.stag	int_sqrt,32,3
    22                        	.member	sqrt,0,16,8,16
    23                        	.member	frac,16,16,8,16
    24                        	.eos
    25                        	.line	205
    26                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
    27                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    28                        	.line	134
    29                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
    30                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    31                        	.line	103
    32                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
    33                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    34                        	.stag	_fx_bytebits,8,4
    35                        	.member	b7,0,14,17,1
    36                        	.member	b6,1,14,17,1
    37                        	.member	b5,2,14,17,1
    38                        	.member	b4,3,14,17,1
    39                        	.member	b3,4,14,17,1
    40                        	.member	b2,5,14,17,1
    41                        	.member	b1,6,14,17,1
  Sat Jul 10 2021  1:15                                                Page 2


    42                        	.member	b0,7,14,17,1
    43                        	.eos
    44                        	.stag	_fx_node,384,5
    45                        	.member	type,0,14,8,8
    46                        	.member	Reserved0,8,14,8,8
    47                        	.member	data,16,129,8,32
    48                        	.member	last,48,138,8,32,5
    49                        	.member	next,80,138,8,32,5
    50                        	.member	name,112,110,8,0,32
    51                        	.member	Reserved1,368,16,8,16
    52                        	.eos
    53                        	.stag	_fx_nodelist,96,6
    54                        	.member	listhead,0,138,8,32,5
    55                        	.member	listData,32,129,8,32
    56                        	.member	deallocator,64,641,8,32
    57                        	.eos
    58                        	.stag	_fx_queue,80,7
    59                        	.member	count,0,5,8,16
    60                        	.member	front,16,138,8,32,5
    61                        	.member	rear,48,138,8,32,5
    62                        	.eos
    63                        	.stag	fake8_,32,8
    64                        	.member	subsystem,0,14,8,8
    65                        	.member	level,8,14,8,8
    66                        	.member	error,16,16,8,16
    67                        	.eos
    68                        	.stag	_fx_process_signal,16,9
    69                        	.member	cbSize,0,16,8,16
    70                        	.eos
    71                        	.stag	_fx_semaphore,16,10
    72                        	.member	reserved,0,5,8,16
    73                        	.eos
    74                        	.stag	_fx_fileBlock,552,11
    75                        	.member	openCount,0,16,8,16
    76                        	.member	lockCount,16,16,8,16
    77                        	.member	dirty,32,14,8,8
    78                        	.member	fileBuffer,40,110,8,0,64
    79                        	.eos
    80                        	.stag	_fx_irq_data,48,12
    81                        	.member	line,0,5,8,16
    82                        	.member	keycode,16,142,8,32
    83                        	.eos
    84                        	.stag	_task,48,13
    85                        	.member	SPL,0,14,8,8
    86                        	.member	SPH,8,14,8,8
    87                        	.member	pstack,16,142,8,32
    88                        	.eos
    89                        	.stag	_task_stack,32,14
    90                        	.member	SS,0,142,8,32
    91                        	.eos
    92                        	.stag	int_regs,104,15
    93                        	.member	PB,0,14,8,8
    94                        	.member	PH,8,14,8,8
    95                        	.member	PL,16,14,8,8
    96                        	.member	PP,24,14,8,8
    97                        	.member	DB,32,14,8,8
    98                        	.member	DH,40,14,8,8
    99                        	.member	DL,48,14,8,8
  Sat Jul 10 2021  1:15                                                Page 3


   100                        	.member	AH,56,14,8,8
   101                        	.member	AL,64,14,8,8
   102                        	.member	XH,72,14,8,8
   103                        	.member	XL,80,14,8,8
   104                        	.member	YH,88,14,8,8
   105                        	.member	YL,96,14,8,8
   106                        	.eos
   107                        	.stag	_fx_eventMessage,304,16
   108                        	.member	src,0,18,8,32
   109                        	.member	dest,32,18,8,32
   110                        	.member	type,64,16,8,16
   111                        	.member	hwnd,80,129,8,32
   112                        	.member	pheap,112,129,8,32
   113                        	.member	msgTime,144,18,8,32
   114                        	.member	data,176,110,8,0,16
   115                        	.eos
   116                        	.stag	_fx_cmdMessage,304,17
   117                        	.member	src,0,18,8,32
   118                        	.member	dest,32,18,8,32
   119                        	.member	type,64,16,8,16
   120                        	.member	hwnd,80,129,8,32
   121                        	.member	pheap,112,129,8,32
   122                        	.member	msgTime,144,18,8,32
   123                        	.member	cmdCId,176,16,8,16
   124                        	.member	cmdMId,192,16,8,16
   125                        	.member	parameter1,208,18,8,32
   126                        	.member	parameter2,240,18,8,32
   127                        	.member	parameter3,272,18,8,32
   128                        	.eos
   129                        	.stag	_fx_console_ctl,448,18
   130                        	.member	maxCols,0,5,8,16
   131                        	.member	maxRows,16,5,8,16
   132                        	.member	curX,32,5,8,16
   133                        	.member	curY,48,5,8,16
   134                        	.member	fgColor,64,5,8,16
   135                        	.member	bgColor,80,5,8,16
   136                        	.member	mode,96,14,8,8
   137                        	.member	kbBuffer,104,101,8,0,16
   138                        	.member	screenBuffer,360,142,8,32
   139                        	.member	desktopMode,392,14,8,8
   140                        	.member	lastMouseButton,400,5,8,16
   141                        	.member	lastMouseX,416,5,8,16
   142                        	.member	lastMouseY,432,5,8,16
   143                        	.eos
   144                        	.stag	_fx_desktop_ctl,392,19
   145                        	.member	desktopMode,0,14,8,8
   146                        	.member	cursorCtl,8,5,8,16
   147                        	.member	cursorState,24,5,8,16
   148                        	.member	backgroundColor,40,5,8,16
   149                        	.member	foregroundColor,56,5,8,16
   150                        	.member	menuMode,72,5,8,16
   151                        	.member	lastMouseButton,88,5,8,16
   152                        	.member	lastMouseX,104,5,8,16
   153                        	.member	lastMouseY,120,5,8,16
   154                        	.member	currentDiskName,136,142,8,32
   155                        	.member	diskNodes,168,129,8,32
   156                        	.member	titleNodes,200,129,8,32
   157                        	.member	menuNodes,232,129,8,32
  Sat Jul 10 2021  1:15                                                Page 4


   158                        	.member	iconNodes,264,129,8,32
   159                        	.member	windowNodes,296,129,8,32
   160                        	.member	fontNodes,328,129,8,32
   161                        	.member	wndProc,360,138,8,32,6
   162                        	.eos
   163                        	.stag	_fx_process,800,20
   164                        	.member	cbSize,0,5,8,16
   165                        	.member	procId,16,18,8,32
   166                        	.member	parentId,48,18,8,32
   167                        	.member	ctx,80,129,8,32
   168                        	.member	userId,112,16,8,16
   169                        	.member	status,128,16,8,16
   170                        	.member	foregroundActive,144,14,8,8
   171                        	.member	tls,152,1121,8,32,8
   172                        	.member	commandLine,408,142,8,32
   173                        	.member	semaphores,440,138,8,32,6
   174                        	.member	fileHandles,472,138,8,32,6
   175                        	.member	pathList,504,138,8,32,6
   176                        	.member	resources,536,138,8,32,6
   177                        	.member	timerAware,568,14,8,8
   178                        	.member	timerTicks,576,112,8,0,2
   179                        	.member	timerTickCount,608,112,8,0,2
   180                        	.member	kernelError,640,10,8,32,8
   181                        	.member	consoleCtl,672,138,8,32,18
   182                        	.member	desktopCtl,704,138,8,32,19
   183                        	.member	execProc,736,641,8,32
   184                        	.member	startupArgs,768,129,8,32
   185                        	.eos
   186                        	.stag	_fxProcessMessage,112,21
   187                        	.member	src,0,18,8,32
   188                        	.member	dest,32,18,8,32
   189                        	.member	type,64,16,8,16
   190                        	.member	processInfo,80,138,8,32,20
   191                        	.eos
   192                        	.stag	_k_key_state,112,22
   193                        	.member	scanCode,0,14,8,8
   194                        	.member	isShifted,8,14,8,8
   195                        	.member	isAlt,16,14,8,8
   196                        	.member	isExtended,24,14,8,8
   197                        	.member	isCapsLock,32,14,8,8
   198                        	.member	isNumLock,40,14,8,8
   199                        	.member	isScrollLock,48,14,8,8
   200                        	.member	keyChar,56,16,8,16
   201                        	.member	scanTime,72,18,8,32
   202                        	.member	ledStatus,104,14,8,8
   203                        	.eos
   204                        	.stag	_fx_property,384,23
   205                        	.member	name,0,110,8,0,16
   206                        	.member	value,128,110,8,0,32
   207                        	.eos
   208                        	.utag	_24bitPointer,32,24
   209                        	.member	address,0,142,11,32
   210                        	.member	bytes,0,110,11,0,4
   211                        	.eos
   212                        	.stag	_PointStruct,32,25
   213                        	.member	x,0,5,8,16
   214                        	.member	y,16,5,8,16
   215                        	.eos
  Sat Jul 10 2021  1:15                                                Page 5


   216                        	.stag	_RectStruct,112,26
   217                        	.member	x,0,5,8,16
   218                        	.member	y,16,5,8,16
   219                        	.member	z,32,18,8,32
   220                        	.member	width,64,5,8,16
   221                        	.member	height,80,5,8,16
   222                        	.member	attr,96,5,8,16
   223                        	.eos
   224                        	.stag	fake27_,96,27
   225                        	.member	name,0,142,8,32
   226                        	.member	topLeft,32,10,8,32,25
   227                        	.member	bottomRight,64,10,8,32,25
   228                        	.eos
   229                        	.stag	fake28_,112,28
   230                        	.member	x,0,5,8,16
   231                        	.member	y,16,5,8,16
   232                        	.member	z,32,5,8,16
   233                        	.member	width,48,5,8,16
   234                        	.member	height,64,5,8,16
   235                        	.member	data,80,18,8,32
   236                        	.eos
   237                        	.stag	_k_WindowClass,272,29
   238                        	.member	cbSize,0,16,8,16
   239                        	.member	style,16,16,8,16
   240                        	.member	styleEx,32,16,8,16
   241                        	.member	pWndProc,48,654,8,32
   242                        	.member	hInstance,80,129,8,32
   243                        	.member	hIcon,112,129,8,32
   244                        	.member	hCursor,144,129,8,32
   245                        	.member	hbrBackground,176,129,8,32
   246                        	.member	lpszMenuName,208,142,8,32
   247                        	.member	lpszClassName,240,142,8,32
   248                        	.eos
   249                        	.stag	_ClickableRect,152,30
   250                        	.member	area,0,10,8,112,26
   251                        	.member	z,112,18,8,32
   252                        	.member	enabled,144,14,8,8
   253                        	.eos
   254                        	.stag	_NCClickableRect,136,31
   255                        	.member	area,0,10,8,112,26
   256                        	.member	msgType,112,16,8,16
   257                        	.member	enabled,128,14,8,8
   258                        	.eos
   259                        	.stag	_DragData,216,32
   260                        	.member	area,0,10,8,112,26
   261                        	.member	xoffset,112,5,8,16
   262                        	.member	yoffset,128,5,8,16
   263                        	.member	msgType,144,16,8,16
   264                        	.member	ncAction,160,16,8,16
   265                        	.member	isDrag,176,14,8,8
   266                        	.member	isResize,184,14,8,8
   267                        	.member	canDrag,192,14,8,8
   268                        	.member	canDrop,200,14,8,8
   269                        	.member	didDrag,208,14,8,8
   270                        	.eos
   271                        	.stag	_k_WindowStruct,3904,33
   272                        	.member	cbSize,0,16,8,16
   273                        	.member	style,16,18,8,32
  Sat Jul 10 2021  1:15                                                Page 6


   274                        	.member	styleEx,48,18,8,32
   275                        	.member	win_id,80,5,8,16
   276                        	.member	win_x,96,5,8,16
   277                        	.member	win_y,112,5,8,16
   278                        	.member	win_width,128,5,8,16
   279                        	.member	win_height,144,5,8,16
   280                        	.member	win_xoffset,160,5,8,16
   281                        	.member	win_yoffset,176,5,8,16
   282                        	.member	win_cxoffset,192,5,8,16
   283                        	.member	win_cyoffset,208,5,8,16
   284                        	.member	wndRect,224,10,8,112,26
   285                        	.member	clientRect,336,10,8,112,26
   286                        	.member	nonclientGadgets,448,106,8,0,31,16
   287                        	.member	clickable,2624,129,8,32
   288                        	.member	win_title,2656,110,8,0,32
   289                        	.member	Reserved0,2912,16,8,16
   290                        	.member	win_class,2928,110,8,0,16
   291                        	.member	win_class_name,3056,110,8,0,32
   292                        	.member	nBitmapLayer,3312,16,8,16
   293                        	.member	bgRegion,3328,129,8,32
   294                        	.member	procid,3360,18,8,32
   295                        	.member	pWndClass,3392,138,8,32,29
   296                        	.member	pParentWindow,3424,129,8,32
   297                        	.member	hMenu,3456,129,8,32
   298                        	.member	hPointer,3488,129,8,32
   299                        	.member	hBackground,3520,129,8,32
   300                        	.member	pChildWindows,3552,138,8,32,6
   301                        	.member	pChildHitList,3584,138,8,32,6
   302                        	.member	isVisible,3616,14,8,8
   303                        	.member	windowData,3624,129,8,32
   304                        	.member	clientData,3656,1121,8,32,6
   305                        	.member	isClosed,3848,14,8,8
   306                        	.member	isClosing,3856,14,8,8
   307                        	.member	isDesktop,3864,14,8,8
   308                        	.member	clickableNode,3872,138,8,32,5
   309                        	.eos
   310                        	.stag	_k_WindowStructEx,3880,34
   311                        	.member	cbSize,0,16,8,16
   312                        	.member	style,16,18,8,32
   313                        	.member	styleEx,48,18,8,32
   314                        	.member	win_id,80,5,8,16
   315                        	.member	win_x,96,5,8,16
   316                        	.member	win_y,112,5,8,16
   317                        	.member	win_width,128,5,8,16
   318                        	.member	win_height,144,5,8,16
   319                        	.member	win_xoffset,160,5,8,16
   320                        	.member	win_yoffset,176,5,8,16
   321                        	.member	win_cxoffset,192,5,8,16
   322                        	.member	win_cyoffset,208,5,8,16
   323                        	.member	wndRect,224,10,8,112,26
   324                        	.member	clientRect,336,10,8,112,26
   325                        	.member	nonclientGadgets,448,106,8,0,31,16
   326                        	.member	clickable,2624,129,8,32
   327                        	.member	win_title,2656,110,8,0,32
   328                        	.member	Reserved0,2912,16,8,16
   329                        	.member	win_class,2928,110,8,0,16
   330                        	.member	nBitmapLayer,3056,16,8,16
   331                        	.member	procid,3072,18,8,32
  Sat Jul 10 2021  1:15                                                Page 7


   332                        	.member	pWndClass,3104,138,8,32,29
   333                        	.member	pParentWindow,3136,129,8,32
   334                        	.member	hMenu,3168,129,8,32
   335                        	.member	hPointer,3200,129,8,32
   336                        	.member	hBackground,3232,129,8,32
   337                        	.member	pChildWindows,3264,138,8,32,6
   338                        	.member	pChildHitList,3296,138,8,32,6
   339                        	.member	isVisible,3328,14,8,8
   340                        	.member	windowData,3336,129,8,32
   341                        	.member	clientData,3368,1121,8,32,4
   342                        	.member	isClosed,3496,14,8,8
   343                        	.member	hWnd,3504,129,8,32
   344                        	.member	localRect,3536,10,8,112,26
   345                        	.member	globalRect,3648,10,8,112,26
   346                        	.member	clientOffsetRect,3760,10,8,112,26
   347                        	.member	isDesktop,3872,14,8,8
   348                        	.eos
   349                        	.stag	_FontMetric,32,35
   350                        	.member	width,0,5,8,16
   351                        	.member	height,16,5,8,16
   352                        	.eos
   353                        	.stag	_MenuStruct,280,36
   354                        	.member	cx,0,5,8,16
   355                        	.member	cy,16,5,8,16
   356                        	.member	width,32,5,8,16
   357                        	.member	height,48,5,8,16
   358                        	.member	fcolor,64,14,8,8
   359                        	.member	bcolor,72,14,8,8
   360                        	.member	chromeLeft,80,14,8,8
   361                        	.member	chromeRight1,88,14,8,8
   362                        	.member	chromeRight2,96,14,8,8
   363                        	.member	hFont,104,129,8,32
   364                        	.member	itemId,136,16,8,16
   365                        	.member	pCaption,152,142,8,32
   366                        	.member	subMenus,184,138,8,32,6
   367                        	.member	pBackground,216,129,8,32
   368                        	.member	hWndOwner,248,129,8,32
   369                        	.eos
   370                        	.stag	fake37_,160,37
   371                        	.member	menuId,0,16,8,16
   372                        	.member	caption,16,142,8,32
   373                        	.member	rect,48,10,8,112,26
   374                        	.eos
   375                        	.stag	fake38_,5152,38
   376                        	.member	pParent,0,138,8,32,33
   377                        	.member	rect,32,10,8,112,26
   378                        	.member	captions,144,1134,8,32,24
   379                        	.member	chrome,912,110,8,0,24
   380                        	.member	ids,1104,112,8,0,24
   381                        	.member	clickable,1488,106,8,0,30,24
   382                        	.member	selected,5136,16,8,16
   383                        	.eos
   384                        	.stag	_fx_button_t,96,39
   385                        	.member	pCaption,0,142,8,32
   386                        	.member	cCaption,32,16,8,16
   387                        	.member	data,48,129,8,32
   388                        	.member	captionPixelWidth,80,16,8,16
   389                        	.eos
  Sat Jul 10 2021  1:15                                                Page 8


   390                        	.stag	_fx_scrollbar_t,240,40
   391                        	.member	min,0,16,8,16
   392                        	.member	max,16,16,8,16
   393                        	.member	increment,32,16,8,16
   394                        	.member	stopsize,48,16,8,16
   395                        	.member	location,64,5,8,16
   396                        	.member	state,80,5,8,16
   397                        	.member	rectThumb,96,10,8,112,26
   398                        	.member	data,208,129,8,32
   399                        	.eos
   400                        	.stag	_fx_listbox_t,240,41
   401                        	.member	pos,0,5,8,16
   402                        	.member	selected,16,16,8,16
   403                        	.member	offsetX,32,5,8,16
   404                        	.member	offsetY,48,5,8,16
   405                        	.member	inc,64,5,8,16
   406                        	.member	direction,80,5,8,16
   407                        	.member	top,96,5,8,16
   408                        	.member	bottom,112,5,8,16
   409                        	.member	indexTop,128,5,8,16
   410                        	.member	indexBottom,144,5,8,16
   411                        	.member	maxItems,160,16,8,16
   412                        	.member	fontSet,176,142,8,32
   413                        	.member	data,208,129,8,32
   414                        	.eos
   415                        	.stag	_fx_textbox_t,144,42
   416                        	.member	pos,0,5,8,16
   417                        	.member	selected,16,16,8,16
   418                        	.member	offsetX,32,5,8,16
   419                        	.member	offsetY,48,5,8,16
   420                        	.member	isShifted,64,14,8,8
   421                        	.member	cursorState,72,14,8,8
   422                        	.member	fontSet,80,142,8,32
   423                        	.member	data,112,129,8,32
   424                        	.eos
   425                        	.stag	_fx_msgbox_t,144,43
   426                        	.member	pos,0,5,8,16
   427                        	.member	selected,16,16,8,16
   428                        	.member	offsetX,32,5,8,16
   429                        	.member	offsetY,48,5,8,16
   430                        	.member	isShifted,64,14,8,8
   431                        	.member	cursorState,72,14,8,8
   432                        	.member	fontSet,80,142,8,32
   433                        	.member	data,112,129,8,32
   434                        	.eos
   435                        	.stag	_fx_menuAnchor_t,272,44
   436                        	.member	pCaption,0,142,8,32
   437                        	.member	renderLayoutX,32,16,8,16
   438                        	.member	renderLayoutY,48,16,8,16
   439                        	.member	captionPixelWidth,64,16,8,16
   440                        	.member	data,80,129,8,32
   441                        	.member	droppedWindow,112,138,8,32,33
   442                        	.member	bytes,144,110,8,0,16
   443                        	.eos
   444                        	.stag	_SubMenuStruct,64,45
   445                        	.member	caption,0,142,8,32
   446                        	.member	action,32,641,8,32
   447                        	.eos
  Sat Jul 10 2021  1:15                                                Page 9


   448                        	.stag	_SubMenuListStruct,40,46
   449                        	.member	cMenus,0,14,8,8
   450                        	.member	psubmenus,8,9354,8,32,45
   451                        	.eos
   452                        	.stag	_fx_ComBuffer,2080,47
   453                        	.member	cbSize,0,16,8,16
   454                        	.member	cbBuffer,16,16,8,16
   455                        	.member	buffer,32,110,8,0,256
   456                        	.eos
   457                        	.stag	_fx_resource_header,72,48
   458                        	.member	magic,0,110,8,0,4
   459                        	.member	major,32,14,8,8
   460                        	.member	minor,40,14,8,8
   461                        	.member	type,48,14,8,8
   462                        	.member	reserved,56,14,8,8
   463                        	.member	resheaderSize,64,14,8,8
   464                        	.eos
   465                        	.stag	_fx_resource_header_font,144,49
   466                        	.member	title,0,110,8,0,16
   467                        	.member	height,128,14,8,8
   468                        	.member	width,136,14,8,8
   469                        	.eos
   470                        	.line	1010
   471                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   472                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   473                        	.line	89
   474                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   475                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   476                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   477                        	.line	1010
   478                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",5
   479                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   480                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   481                        	.line	1010
   482                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   483                        	.line	72
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   485                        	.line	1960
   486                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   489                        	.line	30
   490                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 10


                    space\FXOSv1\src\fxnode.h",0
   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   493                        	.line	1010
   494                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   495                        	.line	114
   496                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   497                        	.stag	_fx_api_call_table,8192,50
   498                        	.member	call_table,0,1121,8,32,256
   499                        	.eos
   500                        	.stag	_fx_zero_page,824,51
   501                        	.member	fxos_mouse_byte_0,0,14,8,8
   502                        	.member	fxos_mouse_byte_1,8,14,8,8
   503                        	.member	fxos_mouse_byte_2,16,14,8,8
   504                        	.member	fxos_mouse_byte_t,24,14,8,8
   505                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   506                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   507                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   508                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   509                        	.member	fxos_key_byte_0,64,14,8,8
   510                        	.member	fxos_key_byte_1,72,14,8,8
   511                        	.member	fxos_key_byte_2,80,14,8,8
   512                        	.member	fxos_mouse_ctl,88,14,8,8
   513                        	.member	fxos_mouse_index,96,14,8,8
   514                        	.member	fxos_mouse_status,104,14,8,8
   515                        	.member	fxos_mouse_dbg_1,112,18,8,32
   516                        	.member	fxos_mouse_dbg_2,144,18,8,32
   517                        	.member	fxos_mouse_dbg_3,176,18,8,32
   518                        	.member	fxos_vicky_byte_0,208,14,8,8
   519                        	.member	fxos_vicky_byte_1,216,14,8,8
   520                        	.member	fxos_vicky_byte_2,224,14,8,8
   521                        	.member	VersionMajor,232,16,8,16
   522                        	.member	VersionMinor,248,16,8,16
   523                        	.member	VersionRelease,264,16,8,16
   524                        	.member	topMemory,280,18,8,32
   525                        	.member	bottomMemory,312,18,8,32
   526                        	.member	availableMemory,344,18,8,32
   527                        	.member	availableMemoryK,376,18,8,32
   528                        	.member	availableHeapMemory,408,18,8,32
   529                        	.member	availableHeapMemoryK,440,18,8,32
   530                        	.member	fxos_console_row,472,16,8,16
   531                        	.member	fxos_console_col,488,16,8,16
   532                        	.member	executive,504,129,8,32
   533                        	.member	eventmanager,536,129,8,32
   534                        	.member	devicemanager,568,129,8,32
   535                        	.member	windowmanager,600,129,8,32
   536                        	.member	fxos_kernel_api,632,138,8,32,50
   537                        	.member	fxos_dos_api,664,138,8,32,50
   538                        	.member	fxos_gfx_api,696,138,8,32,50
   539                        	.member	fxos_gui_api,728,138,8,32,50
   540                        	.member	fxos_con_api,760,138,8,32,50
   541                        	.member	fxos_reserved_2_api,792,138,8,32,50
   542                        	.eos
   543                        	.stag	_fx_environment,96,52
   544                        	.member	variables,0,142,8,32
   545                        	.member	reserved1,32,5,8,16
  Sat Jul 10 2021  1:15                                                Page 11


   546                        	.member	reserved2,48,5,8,16
   547                        	.member	reserved3,64,5,8,16
   548                        	.member	reserved4,80,5,8,16
   549                        	.eos
   550                        	.stag	_debug_byte_bits,8,53
   551                        	.member	bit7,0,14,17,1
   552                        	.member	bit6,1,14,17,1
   553                        	.member	bit5,2,14,17,1
   554                        	.member	bit4,3,14,17,1
   555                        	.member	bit3,4,14,17,1
   556                        	.member	bit2,5,14,17,1
   557                        	.member	bit1,6,14,17,1
   558                        	.member	bit0,7,14,17,1
   559                        	.eos
   560                        	.stag	_k_segmentheader,160,54
   561                        	.member	version_major,0,14,8,8
   562                        	.member	version_minor,8,14,8,8
   563                        	.member	length,16,5,8,16
   564                        	.member	segment_start_addr,32,7,8,32
   565                        	.member	segment_end_addr,64,7,8,32
   566                        	.member	segment_size,96,7,8,32
   567                        	.member	main_entry_addr,128,7,8,32
   568                        	.eos
   569                        	.stag	_fx_device_driver,776,55
   570                        	.member	name,0,110,8,0,32
   571                        	.member	version,256,110,8,0,16
   572                        	.member	hmajor,384,110,8,0,8
   573                        	.member	hminor,448,110,8,0,8
   574                        	.member	type,512,14,8,8
   575                        	.member	designation,520,110,8,0,6
   576                        	.member	reserved_1,568,16,8,16
   577                        	.member	f_driver_irq,584,129,8,32
   578                        	.member	driver_context,616,129,8,32
   579                        	.member	f_driver_load,648,129,8,32
   580                        	.member	f_driver_read,680,129,8,32
   581                        	.member	f_driver_write,712,129,8,32
   582                        	.member	f_driver_unload,744,129,8,32
   583                        	.eos
   584                        	.stag	_fx_block_device_driver,808,56
   585                        	.member	name,0,110,8,0,32
   586                        	.member	version,256,110,8,0,16
   587                        	.member	hmajor,384,110,8,0,8
   588                        	.member	hminor,448,110,8,0,8
   589                        	.member	type,512,14,8,8
   590                        	.member	designation,520,110,8,0,6
   591                        	.member	reserved_1,568,16,8,16
   592                        	.member	f_driver_irq,584,129,8,32
   593                        	.member	driver_context,616,129,8,32
   594                        	.member	f_driver_load,648,129,8,32
   595                        	.member	f_driver_read,680,129,8,32
   596                        	.member	f_driver_write,712,129,8,32
   597                        	.member	f_driver_unload,744,129,8,32
   598                        	.member	f_driver_command,776,129,8,32
   599                        	.eos
   600                        	.line	400
   601                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   602                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 12


                    space\FXOSv1\src\fxconsole.h",0
   603                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   604                        	.line	134
   605                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   606                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   607                        	.line	205
   608                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   609                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   610                        	.line	1010
   611                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   612                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   613                        	.line	1960
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
   615                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   616                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   617                        	.line	205
   618                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   619                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   620                        	.line	134
   621                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   622                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   623                        	.line	1010
   624                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   625                        	.stag	_fx_string,64,57
   626                        	.member	size,0,16,8,16
   627                        	.member	pos,16,5,8,16
   628                        	.member	buffer,32,142,8,32
   629                        	.eos
   630                        	.line	139
   631                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   632                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   633                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   634                        	.line	30
   635                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   636                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   637                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   638                        	.line	1010
  Sat Jul 10 2021  1:15                                                Page 13


   639                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   640                        	.stag	_fxos_executive_vtable,128,58
   641                        	.member	Init,0,8833,8,32
   642                        	.member	Configure,32,656,8,32
   643                        	.member	Query,64,656,8,32
   644                        	.member	Uninit,96,641,8,32
   645                        	.eos
   646                        	.line	86
   647                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   649                        	.line	114
   650                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   652                        	.line	208
   653                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   654                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   655                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   656                        	.line	30
   657                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   658                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   660                        	.line	30
   661                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   662                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   664                        	.line	35
   665                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   666                        	.stag	UMM_HEAP_INFO_t,256,59
   667                        	.member	totalEntries,0,18,8,32
   668                        	.member	usedEntries,32,18,8,32
   669                        	.member	freeEntries,64,18,8,32
   670                        	.member	totalBlocks,96,18,8,32
   671                        	.member	usedBlocks,128,18,8,32
   672                        	.member	freeBlocks,160,18,8,32
   673                        	.member	maxFreeContiguousBlocks,192,18,8,32
   674                        	.member	blockSize,224,18,8,32
   675                        	.eos
   676                        	.line	199
   677                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   678                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   679                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 14


                    space\FXOSv1\src\fxtypes.h",0
   680                        	.line	1010
   681                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   682                        	.line	24
   683                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   684                        	.stag	_fx_memory_map,2072,60
   685                        	.member	availableMemory,0,18,8,32
   686                        	.member	valid_segments,32,110,8,0,255
   687                        	.eos
   688                        	.stag	_fx_ipc_port,144,61
   689                        	.member	id,0,18,8,32
   690                        	.member	type,32,14,8,8
   691                        	.member	name,40,138,8,32,57
   692                        	.member	time,72,18,8,32
   693                        	.member	queue,104,138,8,32,7
   694                        	.member	reserved_1,136,14,8,8
   695                        	.eos
   696                        	.line	105
   697                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   698                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   699                        	.line	564
   700                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   701                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   702                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   703                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   704                        	.line	1010
   705                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   706                        	.line	74
   707                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   708                        	.stag	_click_detected,64,62
   709                        	.member	window,0,138,8,32,33
   710                        	.member	handler,32,641,8,32
   711                        	.eos
   712                        	.stag	_current_palette_map,400,63
   713                        	.member	CUR_DESKTOP,0,5,8,16
   714                        	.member	CUR_BACKGROUND,16,5,8,16
   715                        	.member	CUR_FONT,32,5,8,16
   716                        	.member	CUR_SELECTED_FONT,48,5,8,16
   717                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   718                        	.member	CUR_WINDOWFRAME,80,5,8,16
   719                        	.member	CUR_WINDOWBORDER,96,5,8,16
   720                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   721                        	.member	CUR_MENU,128,5,8,16
   722                        	.member	CUR_GADGET,144,5,8,16
   723                        	.member	CUR_COLOR,160,101,8,0,15
   724                        	.eos
   725                        	.line	359
   726                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 15


                    space\FXOSv1\src\fxwindowmanager.h",8
   727                        	.stag	_fxos_winman_vtable,160,64
   728                        	.member	Events,0,641,8,32
   729                        	.member	ConfigureWindowManager,32,656,8,32
   730                        	.member	ProcessWindowEvent,64,8833,8,32
   731                        	.member	QueryWindowManager,96,656,8,32
   732                        	.member	DoWndProcs,128,641,8,32
   733                        	.eos
   734                        	.stag	fake65_,64,65
   735                        	.member	type,0,16,8,16
   736                        	.member	size,16,16,8,16
   737                        	.member	desktopAction,32,129,8,32
   738                        	.eos
   739                        	.stag	fake66_,96,66
   740                        	.member	type,0,16,8,16
   741                        	.member	caption,16,138,8,32,57
   742                        	.member	buttonType,48,16,8,16
   743                        	.member	x,64,5,8,16
   744                        	.member	y,80,5,8,16
   745                        	.eos
   746                        	.stag	_childMessage_t,64,67
   747                        	.member	msgType,0,16,8,16
   748                        	.member	msgData,16,129,8,32
   749                        	.member	dataSize,48,16,8,16
   750                        	.eos
   751                        	.line	581
   752                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   753                        	.stag	_fx_main_loopvars,16,68
   754                        	.member	dummy,0,5,8,16
   755                        	.eos
   756                        	.stag	_fxMouseMessageData,64,69
   757                        	.member	button1,0,14,8,8
   758                        	.member	button2,8,14,8,8
   759                        	.member	button3,16,14,8,8
   760                        	.member	button4,24,14,8,8
   761                        	.member	x,32,16,8,16
   762                        	.member	y,48,16,8,16
   763                        	.eos
   764                        	.utag	marshalled_data,32,70
   765                        	.member	byteValue,0,14,11,8
   766                        	.member	verbValue,0,110,11,0,2
   767                        	.member	intValue,0,16,11,16
   768                        	.member	longValue,0,18,11,32
   769                        	.member	pointerValue,0,129,11,32
   770                        	.eos
   771                        	.stag	_fx_eventProcess,64,71
   772                        	.member	process,0,138,8,32,20
   773                        	.member	eventProc,32,641,8,32
   774                        	.eos
   775                        	.stag	_mouse_msg_state,184,72
   776                        	.member	lastEvent,0,18,8,32
   777                        	.member	buttonLeftDown,32,14,8,8
   778                        	.member	lastLeftDown,40,18,8,32
   779                        	.member	buttonRightDown,72,14,8,8
   780                        	.member	lastRightDown,80,18,8,32
   781                        	.member	buttonMiddleDown,112,14,8,8
   782                        	.member	lastMiddleDown,120,18,8,32
  Sat Jul 10 2021  1:15                                                Page 16


   783                        	.member	lastX,152,16,8,16
   784                        	.member	lastY,168,16,8,16
   785                        	.eos
   786                        	.stag	_fxos_eventmanager_vtable,192,73
   787                        	.member	EventQueue,0,138,8,32,7
   788                        	.member	Init,32,8833,8,32
   789                        	.member	Run,64,656,8,32
   790                        	.member	Configure,96,656,8,32
   791                        	.member	Query,128,656,8,32
   792                        	.member	Uninit,160,641,8,32
   793                        	.eos
   794                        	.stag	_k_clipboard_data,168,74
   795                        	.member	type,0,14,8,8
   796                        	.member	readable,8,110,8,0,16
   797                        	.member	data,136,129,8,32
   798                        	.eos
   799                        	.line	564
   800                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   801                        	.stag	_fx_spinner_ctx,48,75
   802                        	.member	index,0,5,8,16
   803                        	.member	spinner,16,142,8,32
   804                        	.eos
   805                        	.stag	_fx_console_ctx,1144,76
   806                        	.member	lineBufferIndex,0,5,8,16
   807                        	.member	lineBuffer,16,110,8,0,128
   808                        	.member	isShifted,1040,14,8,8
   809                        	.member	userData,1048,129,8,32
   810                        	.member	screenBuffer,1080,129,8,32
   811                        	.member	Reserved1,1112,129,8,32
   812                        	.eos
   813                        	.stag	_token,64,77
   814                        	.member	type,0,5,8,16
   815                        	.member	depth,16,16,8,16
   816                        	.member	text,32,142,8,32
   817                        	.eos
   818                        	.stag	_command_args,64,78
   819                        	.member	proc,0,656,8,32
   820                        	.member	tokens,32,138,8,32,5
   821                        	.eos
   822                        	.line	208
   823                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   824                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   825                        	.line	139
   826                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",24
   827                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   828                        	.line	114
   829                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   830                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   831                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
   832                        	.line	298
  Sat Jul 10 2021  1:15                                                Page 17


   833                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   834                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   835                        	.line	1010
   836                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   837                        	.stag	fake79_,4504,79
   838                        	.member	fs_type,0,14,8,8
   839                        	.member	pdrv,8,14,8,8
   840                        	.member	n_fats,16,14,8,8
   841                        	.member	wflag,24,14,8,8
   842                        	.member	fsi_flag,32,14,8,8
   843                        	.member	id,40,5,8,16
   844                        	.member	n_rootdir,56,5,8,16
   845                        	.member	csize,72,5,8,16
   846                        	.member	lfnbuf,88,144,8,32
   847                        	.member	last_clst,120,18,8,32
   848                        	.member	free_clst,152,18,8,32
   849                        	.member	n_fatent,184,18,8,32
   850                        	.member	fsize,216,18,8,32
   851                        	.member	volbase,248,18,8,32
   852                        	.member	fatbase,280,18,8,32
   853                        	.member	dirbase,312,18,8,32
   854                        	.member	database,344,18,8,32
   855                        	.member	winsect,376,18,8,32
   856                        	.member	win,408,110,8,0,512
   857                        	.eos
   858                        	.stag	fake80_,128,80
   859                        	.member	fs,0,138,8,32,79
   860                        	.member	id,32,5,8,16
   861                        	.member	attr,48,14,8,8
   862                        	.member	stat,56,14,8,8
   863                        	.member	sclust,64,18,8,32
   864                        	.member	objsize,96,18,8,32
   865                        	.eos
   866                        	.stag	fake81_,4400,81
   867                        	.member	obj,0,10,8,128,80
   868                        	.member	flag,128,14,8,8
   869                        	.member	err,136,14,8,8
   870                        	.member	fptr,144,18,8,32
   871                        	.member	clust,176,18,8,32
   872                        	.member	sect,208,18,8,32
   873                        	.member	dir_sect,240,18,8,32
   874                        	.member	dir_ptr,272,142,8,32
   875                        	.member	buf,304,110,8,0,512
   876                        	.eos
   877                        	.stag	fake82_,416,82
   878                        	.member	obj,0,10,8,128,80
   879                        	.member	dptr,128,18,8,32
   880                        	.member	clust,160,18,8,32
   881                        	.member	sect,192,18,8,32
   882                        	.member	dir,224,142,8,32
   883                        	.member	fn,256,110,8,0,12
   884                        	.member	blk_ofs,352,18,8,32
   885                        	.member	pat,384,142,8,32
   886                        	.eos
   887                        	.stag	fake83_,2224,83
  Sat Jul 10 2021  1:15                                                Page 18


   888                        	.member	fsize,0,18,8,32
   889                        	.member	fdate,32,5,8,16
   890                        	.member	ftime,48,5,8,16
   891                        	.member	fattrib,64,14,8,8
   892                        	.member	altname,72,110,8,0,13
   893                        	.member	fname,176,110,8,0,256
   894                        	.eos
   895                        	.stag	fake84_,80,84
   896                        	.member	fmt,0,14,8,8
   897                        	.member	n_fat,8,14,8,8
   898                        	.member	align,16,16,8,16
   899                        	.member	n_root,32,16,8,16
   900                        	.member	au_size,48,18,8,32
   901                        	.eos
   902                        	.line	429
   903                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",26
   904                        	.line	30
   905                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.c",1
   906                        ;#include "fxdos.h"
   907                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",0
   908                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   909                        	.line	1010
   910                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",5
   911                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   912                        	.line	429
   913                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",6
   914                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\diskio.h",0
   915                        	.line	85
   916                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",7
   917                        	.stag	_fx_sd_direntry,256,85
   918                        	.member	filename,0,110,8,0,11
   919                        	.member	type,88,14,8,8
   920                        	.member	attrs,96,110,8,0,20
   921                        	.eos
   922                        	.stag	_fx_info,416,86
   923                        	.member	stgName,0,110,8,0,32
   924                        	.member	Reserved1,256,14,8,8
   925                        	.member	stgType,264,16,8,16
   926                        	.member	Reserved2,280,14,8,8
   927                        	.member	stgReserved,288,110,8,0,16
   928                        	.eos
   929                        	.stag	_fx_fileinfo,136,87
   930                        	.member	type,0,14,8,8
   931                        	.member	pFilename,8,142,8,32
   932                        	.member	lSize,40,18,8,32
   933                        	.member	lcreateDate,72,18,8,32
   934                        	.member	lchangeDate,104,18,8,32
   935                        	.eos
   936                        	.stag	_FX_FAT_DIR_INFO,256,88
  Sat Jul 10 2021  1:15                                                Page 19


   937                        	.member	DIR_Name,0,110,8,0,11
   938                        	.member	DIR_Attr,88,14,8,8
   939                        	.member	DIR_NTRes,96,14,8,8
   940                        	.member	DIR_CrtTimeTenth,104,14,8,8
   941                        	.member	DIR_CrtTime,112,16,8,16
   942                        	.member	DIR_CrtDate,128,16,8,16
   943                        	.member	DIR_LstAccDate,144,16,8,16
   944                        	.member	DIR_FstClusHI,160,16,8,16
   945                        	.member	DIR_WrtTime,176,16,8,16
   946                        	.member	DIR_WrtDate,192,16,8,16
   947                        	.member	DIR_FstClusLO,208,16,8,16
   948                        	.member	DIR_FileSize,224,18,8,32
   949                        	.eos
   950                        	.stag	fat_extBS_32,416,89
   951                        	.member	table_size_32,0,18,8,32
   952                        	.member	extended_flags,32,16,8,16
   953                        	.member	fat_version,48,16,8,16
   954                        	.member	root_cluster,64,18,8,32
   955                        	.member	fat_info,96,16,8,16
   956                        	.member	backup_BS_sector,112,16,8,16
   957                        	.member	reserved_0,128,110,8,0,12
   958                        	.member	drive_number,224,14,8,8
   959                        	.member	reserved_1,232,14,8,8
   960                        	.member	boot_signature,240,14,8,8
   961                        	.member	volume_id,248,16,8,16
   962                        	.member	volume_label,264,110,8,0,11
   963                        	.member	fat_type_label,352,110,8,0,8
   964                        	.eos
   965                        	.stag	fat_extBS_16,192,90
   966                        	.member	bios_drive_num,0,14,8,8
   967                        	.member	reserved1,8,14,8,8
   968                        	.member	boot_signature,16,14,8,8
   969                        	.member	volume_id,24,16,8,16
   970                        	.member	volume_label,40,110,8,0,11
   971                        	.member	fat_type_label,128,110,8,0,8
   972                        	.eos
   973                        	.stag	fat_BS,688,91
   974                        	.member	bootjmp,0,110,8,0,3
   975                        	.member	oem_name,24,110,8,0,8
   976                        	.member	bytes_per_sector,88,16,8,16
   977                        	.member	sectors_per_cluster,104,14,8,8
   978                        	.member	reserved_sector_count,112,16,8,16
   979                        	.member	table_count,128,14,8,8
   980                        	.member	root_entry_count,136,16,8,16
   981                        	.member	total_sectors_16,152,16,8,16
   982                        	.member	media_type,168,14,8,8
   983                        	.member	table_size_16,176,16,8,16
   984                        	.member	sectors_per_track,192,16,8,16
   985                        	.member	head_side_count,208,16,8,16
   986                        	.member	hidden_sector_count,224,16,8,16
   987                        	.member	total_sectors_32,240,16,8,16
   988                        	.member	extended_section,256,110,8,0,54
   989                        	.eos
   990                        	.stag	__FATBootSector,928,92
   991                        	.member	bootjmp,0,110,8,0,3
   992                        	.member	oem_name,24,110,8,0,8
   993                        	.member	bytes_per_sector,88,16,8,16
   994                        	.member	sectors_per_cluster,104,14,8,8
  Sat Jul 10 2021  1:15                                                Page 20


   995                        	.member	reserved_sector_count,112,16,8,16
   996                        	.member	fat_table_count,128,14,8,8
   997                        	.member	root_entry_count,136,16,8,16
   998                        	.member	total_sectors_16,152,16,8,16
   999                        	.member	media_type,168,14,8,8
  1000                        	.member	sectors_per_fat,176,16,8,16
  1001                        	.member	sectors_per_track,192,16,8,16
  1002                        	.member	head_side_count,208,16,8,16
  1003                        	.member	hidden_sector_count,224,18,8,32
  1004                        	.member	total_sectors_32,256,18,8,32
  1005                        	.member	drive_number,288,14,8,8
  1006                        	.member	reserved1,296,14,8,8
  1007                        	.member	boot_sig,304,14,8,8
  1008                        	.member	vol_id,312,18,8,32
  1009                        	.member	vol_name,344,110,8,0,11
  1010                        	.member	file_system_type,432,110,8,0,8
  1011                        	.member	extended_section,496,110,8,0,54
  1012                        	.eos
  1013                        	.stag	__PARTITIONTABLE,128,93
  1014                        	.member	first_byte,0,14,8,8
  1015                        	.member	start_chs,8,110,8,0,3
  1016                        	.member	partition_type,32,14,8,8
  1017                        	.member	end_chs,40,110,8,0,3
  1018                        	.member	start_sector,64,18,8,32
  1019                        	.member	length_sectors,96,18,8,32
  1020                        	.eos
  1021                        	.stag	fake94_,4096,94
  1022                        	.member	jmp,0,110,8,0,3
  1023                        	.member	oem,24,110,8,0,8
  1024                        	.member	sector_size,88,15,8,16
  1025                        	.member	sectors_per_cluster,104,14,8,8
  1026                        	.member	reserved_sectors,112,15,8,16
  1027                        	.member	number_ok_dos_fats,128,14,8,8
  1028                        	.member	root_dir_entries,136,15,8,16
  1029                        	.member	total_sectors_short,152,15,8,16
  1030                        	.member	media_descriptor,168,14,8,8
  1031                        	.member	fat_size_sectors,176,15,8,16
  1032                        	.member	sectors_per_track,192,15,8,16
  1033                        	.member	number_ok_dos_heads,208,15,8,16
  1034                        	.member	hidden_sectors,224,18,8,32
  1035                        	.member	total_sectors_long,256,18,8,32
  1036                        	.member	drive_number,288,14,8,8
  1037                        	.member	current_head,296,14,8,8
  1038                        	.member	boot_signature,304,14,8,8
  1039                        	.member	volume_id,312,18,8,32
  1040                        	.member	volume_label,344,110,8,0,11
  1041                        	.member	fs_type,432,110,8,0,8
  1042                        	.member	boot_code,496,110,8,0,448
  1043                        	.member	boot_sector_signature,4080,15,8,16
  1044                        	.eos
  1045                        	.stag	__FAT16ENTRY,256,95
  1046                        	.member	filename,0,110,8,0,8
  1047                        	.member	ext,64,110,8,0,3
  1048                        	.member	attributes,88,14,8,8
  1049                        	.member	reserved,96,110,8,0,10
  1050                        	.member	modify_time,176,16,8,16
  1051                        	.member	modify_date,192,16,8,16
  1052                        	.member	starting_cluster,208,16,8,16
  Sat Jul 10 2021  1:15                                                Page 21


  1053                        	.member	file_size,224,18,8,32
  1054                        	.eos
  1055                        	.stag	__FAT16ENTRYLONG,288,96
  1056                        	.member	filename,0,110,8,0,8
  1057                        	.member	ext,64,110,8,0,3
  1058                        	.member	attributes,88,14,8,8
  1059                        	.member	reserved,96,110,8,0,10
  1060                        	.member	modify_time,176,16,8,16
  1061                        	.member	modify_date,192,16,8,16
  1062                        	.member	starting_cluster,208,16,8,16
  1063                        	.member	file_size,224,18,8,32
  1064                        	.member	plongfileName,256,142,8,32
  1065                        	.eos
  1066                        	.stag	_LongFileName,256,97
  1067                        	.member	sequenceNo,0,14,8,8
  1068                        	.member	fileName_Part1,8,110,8,0,10
  1069                        	.member	fileattribute,88,14,8,8
  1070                        	.member	type,96,14,8,8
  1071                        	.member	checksum,104,14,8,8
  1072                        	.member	fileName_Part2,112,110,8,0,12
  1073                        	.member	fstclusLO,208,5,8,16
  1074                        	.member	fileName_Part3,224,110,8,0,4
  1075                        	.eos
  1076                        	.stag	_IDSECTOR,2048,98
  1077                        	.member	wGenConfig,0,16,8,16
  1078                        	.member	wNumCyls,16,16,8,16
  1079                        	.member	wReserved,32,16,8,16
  1080                        	.member	wNumHeads,48,16,8,16
  1081                        	.member	wBytesPerTrack,64,16,8,16
  1082                        	.member	wBytesPerSector,80,16,8,16
  1083                        	.member	wSectorsPerTrack,96,16,8,16
  1084                        	.member	wVendorUnique,112,112,8,0,3
  1085                        	.member	sSerialNumber,160,110,8,0,20
  1086                        	.member	wBufferType,320,16,8,16
  1087                        	.member	wBufferSize,336,16,8,16
  1088                        	.member	wECCSize,352,16,8,16
  1089                        	.member	sFirmwareRev,368,110,8,0,8
  1090                        	.member	sModelNumber,432,110,8,0,40
  1091                        	.member	wMoreVendorUnique,752,16,8,16
  1092                        	.member	wDoubleWordIO,768,16,8,16
  1093                        	.member	wCapabilities,784,16,8,16
  1094                        	.member	wReserved1,800,16,8,16
  1095                        	.member	wPIOTiming,816,16,8,16
  1096                        	.member	wDMATiming,832,16,8,16
  1097                        	.member	wBS,848,16,8,16
  1098                        	.member	wNumCurrentCyls,864,16,8,16
  1099                        	.member	wNumCurrentHeads,880,16,8,16
  1100                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1101                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1102                        	.member	wMultSectorStuff,944,16,8,16
  1103                        	.member	ulTotalAddressableSectors,960,18,8,32
  1104                        	.member	wSingleWordDMA,992,16,8,16
  1105                        	.member	wMultiWordDMA,1008,16,8,16
  1106                        	.member	bReserved,1024,110,8,0,128
  1107                        	.eos
  1108                        	.stag	fake99_,16,99
  1109                        	.member	Reserved1,0,16,17,1
  1110                        	.member	Retired3,1,16,17,1
  Sat Jul 10 2021  1:15                                                Page 22


  1111                        	.member	ResponseIncomplete,2,16,17,1
  1112                        	.member	Retired2,3,16,17,3
  1113                        	.member	FixedDevice,6,16,17,1
  1114                        	.member	RemovableMedia,7,16,17,1
  1115                        	.member	Retired1,8,16,17,7
  1116                        	.member	DeviceType,15,16,17,1
  1117                        	.eos
  1118                        	.stag	fake100_,16,100
  1119                        	.member	FeatureSupported,0,16,17,1
  1120                        	.member	Reserved,1,16,17,15
  1121                        	.eos
  1122                        	.stag	fake101_,32,101
  1123                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1124                        	.member	ReservedByte49,2,14,17,6
  1125                        	.member	DmaSupported,8,14,17,1
  1126                        	.member	LbaSupported,9,14,17,1
  1127                        	.member	IordyDisable,10,14,17,1
  1128                        	.member	IordySupported,11,14,17,1
  1129                        	.member	Reserved1,12,14,17,1
  1130                        	.member	StandybyTimerSupport,13,14,17,1
  1131                        	.member	Reserved2,14,14,17,2
  1132                        	.member	ReservedWord50,16,16,8,16
  1133                        	.eos
  1134                        	.stag	fake102_,16,102
  1135                        	.member	ZonedCapabilities,0,16,17,2
  1136                        	.member	NonVolatileWriteCache,2,16,17,1
  1137                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1138                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1139                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1140                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1141                        	.member	IEEE1667,7,16,17,1
  1142                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1143                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1144                        	.member	WriteBufferDmaSupported,10,16,17,1
  1145                        	.member	ReadBufferDmaSupported,11,16,17,1
  1146                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  1147                        	.member	LPSAERCSupported,13,16,17,1
  1148                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1149                        	.member	CFastSpecSupported,15,16,17,1
  1150                        	.eos
  1151                        	.stag	fake103_,32,103
  1152                        	.member	Reserved0,0,16,17,1
  1153                        	.member	SataGen1,1,16,17,1
  1154                        	.member	SataGen2,2,16,17,1
  1155                        	.member	SataGen3,3,16,17,1
  1156                        	.member	Reserved1,4,16,17,4
  1157                        	.member	NCQ,8,16,17,1
  1158                        	.member	HIPM,9,16,17,1
  1159                        	.member	PhyEvents,10,16,17,1
  1160                        	.member	NcqUnload,11,16,17,1
  1161                        	.member	NcqPriority,12,16,17,1
  1162                        	.member	HostAutoPS,13,16,17,1
  1163                        	.member	DeviceAutoPS,14,16,17,1
  Sat Jul 10 2021  1:15                                                Page 23


  1164                        	.member	ReadLogDMA,15,16,17,1
  1165                        	.member	Reserved2,16,16,17,1
  1166                        	.member	CurrentSpeed,17,16,17,3
  1167                        	.member	NcqStreaming,20,16,17,1
  1168                        	.member	NcqQueueMgmt,21,16,17,1
  1169                        	.member	NcqReceiveSend,22,16,17,1
  1170                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1171                        	.member	Reserved3,24,16,17,8
  1172                        	.eos
  1173                        	.stag	fake104_,16,104
  1174                        	.member	Reserved0,0,16,17,1
  1175                        	.member	NonZeroOffsets,1,16,17,1
  1176                        	.member	DmaSetupAutoActivate,2,16,17,1
  1177                        	.member	DIPM,3,16,17,1
  1178                        	.member	InOrderData,4,16,17,1
  1179                        	.member	HardwareFeatureControl,5,16,17,1
  1180                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1181                        	.member	NCQAutosense,7,16,17,1
  1182                        	.member	DEVSLP,8,16,17,1
  1183                        	.member	HybridInformation,9,16,17,1
  1184                        	.member	Reserved1,10,16,17,6
  1185                        	.eos
  1186                        	.stag	fake105_,16,105
  1187                        	.member	Reserved0,0,16,17,1
  1188                        	.member	NonZeroOffsets,1,16,17,1
  1189                        	.member	DmaSetupAutoActivate,2,16,17,1
  1190                        	.member	DIPM,3,16,17,1
  1191                        	.member	InOrderData,4,16,17,1
  1192                        	.member	HardwareFeatureControl,5,16,17,1
  1193                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1194                        	.member	DeviceAutoPS,7,16,17,1
  1195                        	.member	DEVSLP,8,16,17,1
  1196                        	.member	HybridInformation,9,16,17,1
  1197                        	.member	Reserved1,10,16,17,6
  1198                        	.eos
  1199                        	.stag	fake106_,48,106
  1200                        	.member	SmartCommands,0,16,17,1
  1201                        	.member	SecurityMode,1,16,17,1
  1202                        	.member	RemovableMediaFeature,2,16,17,1
  1203                        	.member	PowerManagement,3,16,17,1
  1204                        	.member	Reserved1,4,16,17,1
  1205                        	.member	WriteCache,5,16,17,1
  1206                        	.member	LookAhead,6,16,17,1
  1207                        	.member	ReleaseInterrupt,7,16,17,1
  1208                        	.member	ServiceInterrupt,8,16,17,1
  1209                        	.member	DeviceReset,9,16,17,1
  1210                        	.member	HostProtectedArea,10,16,17,1
  1211                        	.member	Obsolete1,11,16,17,1
  1212                        	.member	WriteBuffer,12,16,17,1
  1213                        	.member	ReadBuffer,13,16,17,1
  1214                        	.member	Nop,14,16,17,1
  1215                        	.member	Obsolete2,15,16,17,1
  1216                        	.member	DownloadMicrocode,16,16,17,1
  1217                        	.member	DmaQueued,17,16,17,1
  1218                        	.member	Cfa,18,16,17,1
  1219                        	.member	AdvancedPm,19,16,17,1
  1220                        	.member	Msn,20,16,17,1
  1221                        	.member	PowerUpInStandby,21,16,17,1
  Sat Jul 10 2021  1:15                                                Page 24


  1222                        	.member	ManualPowerUp,22,16,17,1
  1223                        	.member	Reserved2,23,16,17,1
  1224                        	.member	SetMax,24,16,17,1
  1225                        	.member	Acoustics,25,16,17,1
  1226                        	.member	BigLba,26,16,17,1
  1227                        	.member	DeviceConfigOverlay,27,16,17,1
  1228                        	.member	FlushCache,28,16,17,1
  1229                        	.member	FlushCacheExt,29,16,17,1
  1230                        	.member	WordValid83,30,16,17,2
  1231                        	.member	SmartErrorLog,32,16,17,1
  1232                        	.member	SmartSelfTest,33,16,17,1
  1233                        	.member	MediaSerialNumber,34,16,17,1
  1234                        	.member	MediaCardPassThrough,35,16,17,1
  1235                        	.member	StreamingFeature,36,16,17,1
  1236                        	.member	GpLogging,37,16,17,1
  1237                        	.member	WriteFua,38,16,17,1
  1238                        	.member	WriteQueuedFua,39,16,17,1
  1239                        	.member	WWN64Bit,40,16,17,1
  1240                        	.member	URGReadStream,41,16,17,1
  1241                        	.member	URGWriteStream,42,16,17,1
  1242                        	.member	ReservedForTechReport,43,16,17,2
  1243                        	.member	IdleWithUnloadFeature,45,16,17,1
  1244                        	.member	WordValid,46,16,17,2
  1245                        	.eos
  1246                        	.stag	fake107_,48,107
  1247                        	.member	SmartCommands,0,16,17,1
  1248                        	.member	SecurityMode,1,16,17,1
  1249                        	.member	RemovableMediaFeature,2,16,17,1
  1250                        	.member	PowerManagement,3,16,17,1
  1251                        	.member	Reserved1,4,16,17,1
  1252                        	.member	WriteCache,5,16,17,1
  1253                        	.member	LookAhead,6,16,17,1
  1254                        	.member	ReleaseInterrupt,7,16,17,1
  1255                        	.member	ServiceInterrupt,8,16,17,1
  1256                        	.member	DeviceReset,9,16,17,1
  1257                        	.member	HostProtectedArea,10,16,17,1
  1258                        	.member	Obsolete1,11,16,17,1
  1259                        	.member	WriteBuffer,12,16,17,1
  1260                        	.member	ReadBuffer,13,16,17,1
  1261                        	.member	Nop,14,16,17,1
  1262                        	.member	Obsolete2,15,16,17,1
  1263                        	.member	DownloadMicrocode,16,16,17,1
  1264                        	.member	DmaQueued,17,16,17,1
  1265                        	.member	Cfa,18,16,17,1
  1266                        	.member	AdvancedPm,19,16,17,1
  1267                        	.member	Msn,20,16,17,1
  1268                        	.member	PowerUpInStandby,21,16,17,1
  1269                        	.member	ManualPowerUp,22,16,17,1
  1270                        	.member	Reserved2,23,16,17,1
  1271                        	.member	SetMax,24,16,17,1
  1272                        	.member	Acoustics,25,16,17,1
  1273                        	.member	BigLba,26,16,17,1
  1274                        	.member	DeviceConfigOverlay,27,16,17,1
  1275                        	.member	FlushCache,28,16,17,1
  1276                        	.member	FlushCacheExt,29,16,17,1
  1277                        	.member	Resrved3,30,16,17,1
  1278                        	.member	Words119_120Valid,31,16,17,1
  1279                        	.member	SmartErrorLog,32,16,17,1
  Sat Jul 10 2021  1:15                                                Page 25


  1280                        	.member	SmartSelfTest,33,16,17,1
  1281                        	.member	MediaSerialNumber,34,16,17,1
  1282                        	.member	MediaCardPassThrough,35,16,17,1
  1283                        	.member	StreamingFeature,36,16,17,1
  1284                        	.member	GpLogging,37,16,17,1
  1285                        	.member	WriteFua,38,16,17,1
  1286                        	.member	WriteQueuedFua,39,16,17,1
  1287                        	.member	WWN64Bit,40,16,17,1
  1288                        	.member	URGReadStream,41,16,17,1
  1289                        	.member	URGWriteStream,42,16,17,1
  1290                        	.member	ReservedForTechReport,43,16,17,2
  1291                        	.member	IdleWithUnloadFeature,45,16,17,1
  1292                        	.member	Reserved4,46,16,17,2
  1293                        	.eos
  1294                        	.stag	fake108_,16,108
  1295                        	.member	TimeRequired,0,16,17,15
  1296                        	.member	ExtendedTimeReported,15,16,17,1
  1297                        	.eos
  1298                        	.stag	fake109_,16,109
  1299                        	.member	TimeRequired,0,16,17,15
  1300                        	.member	ExtendedTimeReported,15,16,17,1
  1301                        	.eos
  1302                        	.stag	fake110_,16,110
  1303                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1304                        	.member	Reserved0,4,16,17,8
  1305                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1306                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1307                        	.member	Reserved1,14,16,17,2
  1308                        	.eos
  1309                        	.stag	fake111_,16,111
  1310                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1311                        	.member	WriteReadVerify,1,16,17,1
  1312                        	.member	WriteUncorrectableExt,2,16,17,1
  1313                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1314                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1315                        	.member	FreefallControl,5,16,17,1
  1316                        	.member	SenseDataReporting,6,16,17,1
  1317                        	.member	ExtendedPowerConditions,7,16,17,1
  1318                        	.member	Reserved0,8,16,17,6
  1319                        	.member	WordValid,14,16,17,2
  1320                        	.eos
  1321                        	.stag	fake112_,16,112
  1322                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1323                        	.member	WriteReadVerify,1,16,17,1
  1324                        	.member	WriteUncorrectableExt,2,16,17,1
  1325                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1326                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1327                        	.member	FreefallControl,5,16,17,1
  1328                        	.member	SenseDataReporting,6,16,17,1
  1329                        	.member	ExtendedPowerConditions,7,16,17,1
  1330                        	.member	Reserved0,8,16,17,6
  1331                        	.member	Reserved1,14,16,17,2
  1332                        	.eos
  1333                        	.stag	fake113_,16,113
  1334                        	.member	SecuritySupported,0,16,17,1
  Sat Jul 10 2021  1:15                                                Page 26


  1335                        	.member	SecurityEnabled,1,16,17,1
  1336                        	.member	SecurityLocked,2,16,17,1
  1337                        	.member	SecurityFrozen,3,16,17,1
  1338                        	.member	SecurityCountExpired,4,16,17,1
  1339                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1340                        	.member	Reserved0,6,16,17,2
  1341                        	.member	SecurityLevel,8,16,17,1
  1342                        	.member	Reserved1,9,16,17,7
  1343                        	.eos
  1344                        	.stag	fake114_,16,114
  1345                        	.member	MaximumCurrentInMA,0,16,17,12
  1346                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1347                        	.member	CfaPowerMode1Required,13,16,17,1
  1348                        	.member	Reserved0,14,16,17,1
  1349                        	.member	Word160Supported,15,16,17,1
  1350                        	.eos
  1351                        	.stag	fake115_,16,115
  1352                        	.member	SupportsTrim,0,16,17,1
  1353                        	.member	Reserved0,1,16,17,15
  1354                        	.eos
  1355                        	.stag	fake116_,16,116
  1356                        	.member	Supported,0,16,17,1
  1357                        	.member	Reserved0,1,16,17,1
  1358                        	.member	WriteSameSuported,2,16,17,1
  1359                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1360                        	.member	FeatureControlSuported,4,16,17,1
  1361                        	.member	DataTablesSuported,5,16,17,1
  1362                        	.member	Reserved1,6,16,17,6
  1363                        	.member	VendorSpecific,12,16,17,4
  1364                        	.eos
  1365                        	.stag	fake117_,16,117
  1366                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1367                        	.member	Word209Supported,14,16,17,1
  1368                        	.member	Reserved0,15,16,17,1
  1369                        	.eos
  1370                        	.stag	fake118_,16,118
  1371                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1372                        	.member	Reserved0,1,16,17,3
  1373                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  1374                        	.member	Reserved1,5,16,17,3
  1375                        	.member	NVCachePowerModeVersion,8,16,17,4
  1376                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1377                        	.eos
  1378                        	.stag	fake119_,16,119
  1379                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1380                        	.member	Reserved,8,14,8,8
  1381                        	.eos
  1382                        	.stag	fake120_,16,120
  1383                        	.member	MajorVersion,0,16,17,12
  1384                        	.member	TransportType,12,16,17,4
  1385                        	.eos
  1386                        	.stag	_IDENTIFY_DEVICE_DATA,4096,121
  1387                        	.member	GeneralConfiguration,0,10,8,16,99
  1388                        	.member	NumCylinders,16,16,8,16
  1389                        	.member	SpecificConfiguration,32,16,8,16
  1390                        	.member	NumHeads,48,16,8,16
  Sat Jul 10 2021  1:15                                                Page 27


  1391                        	.member	Retired1Bytes,64,110,8,0,4
  1392                        	.member	NumSectorsPerTrack,96,16,8,16
  1393                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1394                        	.member	SerialNumber,160,110,8,0,20
  1395                        	.member	Retired2,320,112,8,0,2
  1396                        	.member	Obsolete1,352,16,8,16
  1397                        	.member	FirmwareRevision,368,110,8,0,8
  1398                        	.member	ModelNumber,432,110,8,0,40
  1399                        	.member	MaximumBlockTransfer,752,14,8,8
  1400                        	.member	VendorUnique2,760,14,8,8
  1401                        	.member	TrustedComputing,768,10,8,16,100
  1402                        	.member	Capabilities,784,10,8,32,101
  1403                        	.member	ObsoleteWords51,816,112,8,0,2
  1404                        	.member	TranslationFieldsValid,848,16,17,3
  1405                        	.member	Reserved3,851,16,17,5
  1406                        	.member	FreeFallControlSensitivity,856,16,17,8
  1407                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1408                        	.member	NumberOfCurrentHeads,880,16,8,16
  1409                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1410                        	.member	CurrentSectorCapacity,912,18,8,32
  1411                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1412                        	.member	MultiSectorSettingValid,952,14,17,1
  1413                        	.member	ReservedByte59,953,14,17,3
  1414                        	.member	SanitizeFeatureSupported,956,14,17,1
  1415                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1416                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1417                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1418                        	.member	UserAddressableSectors,960,18,8,32
  1419                        	.member	ObsoleteWord62,992,16,8,16
  1420                        	.member	MultiWordDMASupport,1008,16,17,8
  1421                        	.member	MultiWordDMAActive,1016,16,17,8
  1422                        	.member	AdvancedPIOModes,1024,16,17,8
  1423                        	.member	ReservedByte64,1032,16,17,8
  1424                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1425                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1426                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1427                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1428                        	.member	AdditionalSupported,1104,10,8,16,102
  1429                        	.member	ReservedWords70,1120,112,8,0,5
  1430                        	.member	QueueDepth,1200,16,17,5
  1431                        	.member	ReservedWord75,1205,16,17,11
  1432                        	.member	SerialAtaCapabilities,1216,10,8,32,103
  1433                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    104
  1434                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,10
                    5
  1435                        	.member	MajorRevision,1280,16,8,16
  1436                        	.member	MinorRevision,1296,16,8,16
  1437                        	.member	CommandSetSupport,1312,10,8,48,106
  1438                        	.member	CommandSetActive,1360,10,8,48,107
  1439                        	.member	UltraDMASupport,1408,16,17,8
  1440                        	.member	UltraDMAActive,1416,16,17,8
  1441                        	.member	NormalSecurityEraseUnit,1424,10,8,16,108
  1442                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
                    09
  1443                        	.member	CurrentAPMLevel,1456,16,17,8
  Sat Jul 10 2021  1:15                                                Page 28


  1444                        	.member	ReservedWord91,1464,16,17,8
  1445                        	.member	MasterPasswordID,1472,16,8,16
  1446                        	.member	HardwareResetResult,1488,16,8,16
  1447                        	.member	CurrentAcousticValue,1504,16,17,8
  1448                        	.member	RecommendedAcousticValue,1512,16,17,8
  1449                        	.member	StreamMinRequestSize,1520,16,8,16
  1450                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1451                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1452                        	.member	StreamingPerfGranularity,1568,18,8,32
  1453                        	.member	Max48BitLBA,1600,114,8,0,2
  1454                        	.member	StreamingTransferTime,1664,16,8,16
  1455                        	.member	DsmCap,1680,16,8,16
  1456                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    10
  1457                        	.member	InterSeekDelay,1712,16,8,16
  1458                        	.member	WorldWideName,1728,112,8,0,4
  1459                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1460                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1461                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1462                        	.member	CommandSetSupportExt,1904,10,8,16,111
  1463                        	.member	CommandSetActiveExt,1920,10,8,16,112
  1464                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1465                        	.member	MsnSupport,2032,16,17,2
  1466                        	.member	ReservedWord127,2034,16,17,14
  1467                        	.member	SecurityStatus,2048,10,8,16,113
  1468                        	.member	ReservedWord129,2064,112,8,0,31
  1469                        	.member	CfaPowerMode1,2560,10,8,16,114
  1470                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1471                        	.member	NominalFormFactor,2688,16,17,4
  1472                        	.member	ReservedWord168,2692,16,17,12
  1473                        	.member	DataSetManagementFeature,2704,10,8,16,11
                    5
  1474                        	.member	AdditionalProductID,2720,112,8,0,4
  1475                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1476                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1477                        	.member	SCTCommandTransport,3296,10,8,16,116
  1478                        	.member	ReservedWord207,3312,112,8,0,2
  1479                        	.member	BlockAlignment,3344,10,8,16,117
  1480                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1481                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1482                        	.member	NVCacheCapabilities,3424,10,8,16,118
  1483                        	.member	NVCacheSizeLSW,3440,16,8,16
  1484                        	.member	NVCacheSizeMSW,3456,16,8,16
  1485                        	.member	NominalMediaRotationRate,3472,16,8,16
  1486                        	.member	ReservedWord218,3488,16,8,16
  1487                        	.member	NVCacheOptions,3504,10,8,16,119
  1488                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1489                        	.member	ReservedWord220,3528,16,17,8
  1490                        	.member	ReservedWord221,3536,16,8,16
  1491                        	.member	TransportMajorVersion,3552,10,8,16,120
  1492                        	.member	TransportMinorVersion,3568,16,8,16
  Sat Jul 10 2021  1:15                                                Page 29


  1493                        	.member	ReservedWord224,3584,112,8,0,6
  1494                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1495                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1496                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1497                        	.member	ReservedWord236,3776,112,8,0,19
  1498                        	.member	Signature,4080,16,17,8
  1499                        	.member	CheckSum,4088,16,17,8
  1500                        	.eos
  1501                        	.stag	_FXDosDevice,5744,122
  1502                        	.member	type,0,14,8,8
  1503                        	.member	initialized,8,14,8,8
  1504                        	.member	devdata,16,129,8,32
  1505                        	.member	devstatus,48,14,8,8
  1506                        	.member	bootSector,56,10,8,928,92
  1507                        	.member	partitionTable,984,10,8,128,93
  1508                        	.member	fileAllocationTable,1112,110,8,0,512
  1509                        	.member	bsOffset,5208,18,8,32
  1510                        	.member	rootDirSectors,5240,18,8,32
  1511                        	.member	root_entry_count,5272,5,8,16
  1512                        	.member	rootEntriesPerPage,5288,5,8,16
  1513                        	.member	sectors_per_cluster,5304,5,8,16
  1514                        	.member	firstDataSector,5320,18,8,32
  1515                        	.member	fatTableOffset,5352,18,8,32
  1516                        	.member	volume_name,5384,110,8,0,12
  1517                        	.member	root_volume_name,5480,110,8,0,12
  1518                        	.member	errorCode,5576,14,8,8
  1519                        	.member	pfInit,5584,641,8,32
  1520                        	.member	pfReset,5616,641,8,32
  1521                        	.member	pfUninit,5648,641,8,32
  1522                        	.member	pfReader,5680,654,8,32
  1523                        	.member	pfWriter,5712,654,8,32
  1524                        	.eos
  1525                        	.utag	item,32,123
  1526                        	.member	dir,0,138,11,32,82
  1527                        	.member	file,0,138,11,32,81
  1528                        	.member	fileInfo,0,138,11,32,83
  1529                        	.eos
  1530                        	.stag	_dos_handle,80,124
  1531                        	.member	fs,0,138,8,32,79
  1532                        	.member	fr,32,5,8,16
  1533                        	.member	path,48,142,8,32
  1534                        	.eos
  1535                        	.line	800
  1536                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.c",2
  1537                        ;#include "fxmemorymanager.h"
  1538                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
  1539                        	.line	105
  1540                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.c",3
  1541                        ;
  1542                        ;
  1543                        ;#pragma section CODE=FXDOS,offset $08:92F5
  1544                        FXDOS	section	offset $08:92F5
  Sat Jul 10 2021  1:15                                                Page 30


  1545 08:92F5:              	ends
  1546                        ;
  1547                        ;#define DRIVER_SIZE  (0x05F0)
  1548                        ;#define DRIVER_MAX   (25)
  1549                        ;#define DRIVER_BASE  (0x040000)
  1550                        ;
  1551                        ;//static UCHAR sectorBuffer[512];
  1552                        ;static LPSTR sectorBuffer = NULL;
  1553                        	data
  1554                        ~~sectorBuffer:
  1555 00:0000: 00 00 00 00  	dl	$0
  1556 00:0004:              	ends
  1557                        ;//static CHAR	 longnamecount;
  1558                        ;//static UCHAR longnameBuffer[255];
  1559                        ;
  1560                        ;FXDOSDEVICE fxdosDevice;
  1561                        ;//
  1562                        ;// list of device drivers
  1563                        ;//
  1564                        ;static PFXNODELIST _k_dos_devicedrivers	    = NU
                    LL;
  1565                        	data
  1566                        ~~_k_dos_devicedrivers:
  1567 00:0004: 00 00 00 00  	dl	$0
  1568 00:0008:              	ends
  1569                        ;//
  1570                        ;// list of drives
  1571                        ;//
  1572                        ;static PFXNODELIST _k_dos_deviceinstance	= NULL;
  1573                        	data
  1574                        ~~_k_dos_deviceinstance:
  1575 00:0008: 00 00 00 00  	dl	$0
  1576 00:000C:              	ends
  1577                        ;
  1578                        ;//extern FX_DEVICE_DRIVER DRIVER_B2Console;
  1579                        ;//extern FX_DEVICE_DRIVER DRIVER_B2SDCard;
  1580                        ;//extern FX_DEVICE_DRIVER DRIVER_FMXConsole;
  1581                        ;//extern FX_DEVICE_DRIVER DRIVER_FMXSDCard;
  1582                        ;
  1583                        ;
  1584                        ;extern PFX_DEVICE_DRIVER DEVICE_COM;
  1585                        ;extern PFX_DEVICE_DRIVER DEVICE_HD;
  1586                        ;extern PFX_DEVICE_DRIVER DEVICE_SD;
  1587                        ;extern PFX_DEVICE_DRIVER DEVICE_CON;
  1588                        ;
  1589                        ;LPCSTR k_dos_load_drivers(void)
  1590                        ;{
  1591                        	.line	38
  1592                        	.line	39
  1593                        	FXDOS
  1594                        	xdef	~~k_dos_load_drivers
  1595                        	func
  1596                        	.function	39
  1597                        ~~k_dos_load_drivers:
  1598                        	longa	on
  1599                        	longi	on
  1600 08:92F5: 3B           	tsc
  1601 08:92F6: 38           	sec
  Sat Jul 10 2021  1:15                                                Page 31


  1602 08:92F7: E9 38 00     	sbc	#L2
  1603 08:92FA: 1B           	tcs
  1604 08:92FB: 0B           	phd
  1605 08:92FC: 5B           	tcd
  1606                        	.block	39
  1607                        ;	CHAR major[16];
  1608                        ;	CHAR minor[16];
  1609                        ;
  1610                        ;	LPSTR log = NULL;
  1611                        ;
  1612                        ;	ULONG driver_idx = 0;
  1613                        ;	PFX_DEVICE_DRIVER driver = NULL;
  1614                        ;
  1615                        ;	GETDRIVERDEF _k_get_driver_def = NULL;
  1616                        ;
  1617                        ;	log = (LPSTR)k_mem_allocate_heap(1024);
  1618             00000000   major_1	set	0
  1619             00000010   minor_1	set	16
  1620             00000020   log_1	set	32
  1621             00000024   driver_idx_1	set	36
  1622             00000028   driver_1	set	40
  1623             0000002C   _k_get_driver_def_1	set	44
  1624                        	.sym	major,0,110,1,0,16
  1625                        	.sym	minor,16,110,1,0,16
  1626                        	.sym	log,32,142,1,32
  1627                        	.sym	driver_idx,36,18,1,32
  1628                        	.sym	driver,40,138,1,32,55
  1629                        	.sym	_k_get_driver_def,44,8842,1,32,55
  1630 08:92FD: 64 29        	stz	<L3+log_1
  1631 08:92FF: 64 2B        	stz	<L3+log_1+2
  1632 08:9301: 64 2D        	stz	<L3+driver_idx_1
  1633 08:9303: 64 2F        	stz	<L3+driver_idx_1+2
  1634 08:9305: 64 31        	stz	<L3+driver_1
  1635 08:9307: 64 33        	stz	<L3+driver_1+2
  1636 08:9309: 64 35        	stz	<L3+_k_get_driver_def_1
  1637 08:930B: 64 37        	stz	<L3+_k_get_driver_def_1+2
  1638                        	.line	50
  1639 08:930D: F4 00 04     	pea	#<$400
  1640 08:9310: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  1641 08:9314: 85 29        	sta	<L3+log_1
  1642 08:9316: 86 2B        	stx	<L3+log_1+2
  1643                        ;	sectorBuffer = (LPSTR)k_mem_allocate_heap(512);
  1644                        	.line	51
  1645 08:9318: F4 00 02     	pea	#<$200
  1646 08:931B: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  1647 08:931F: 8D xx xx     	sta	|~~sectorBuffer
  1648 08:9322: 8E xx xx     	stx	|~~sectorBuffer+2
  1649                        ;
  1650                        ;	k_get_c256_major_version(major);
  1651                        	.line	53
  1652 08:9325: F4 00 00     	pea	#0
  1653 08:9328: 18           	clc
  1654 08:9329: 7B           	tdc
  1655 08:932A: 69 09 00     	adc	#<L3+major_1
  1656 08:932D: 48           	pha
  1657 08:932E: 22 xx xx xx  	jsl	~~k_get_c256_major_version
  1658                        ;	k_get_c256_minor_version(minor);
  1659                        	.line	54
  Sat Jul 10 2021  1:15                                                Page 32


  1660 08:9332: F4 00 00     	pea	#0
  1661 08:9335: 18           	clc
  1662 08:9336: 7B           	tdc
  1663 08:9337: 69 19 00     	adc	#<L3+minor_1
  1664 08:933A: 48           	pha
  1665 08:933B: 22 xx xx xx  	jsl	~~k_get_c256_minor_version
  1666                        ;
  1667                        ;	//k_debug_strings("System Major:",major);
  1668                        ;	//k_debug_strings("System Minor:",minor);
  1669                        ;
  1670                        ;	_k_dos_devicedrivers 	= k_nodelist_allocate_li
                    st("_k_dos_devicedrivers" ,NULL);
  1671                        	.line	59
  1672 08:933F: F4 00 00     	pea	#^$0
  1673 08:9342: F4 00 00     	pea	#<$0
  1674 08:9345: F4 xx xx     	pea	#^L1
  1675 08:9348: F4 xx xx     	pea	#<L1
  1676 08:934B: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  1677 08:934F: 8D xx xx     	sta	|~~_k_dos_devicedrivers
  1678 08:9352: 8E xx xx     	stx	|~~_k_dos_devicedrivers+2
  1679                        ;	_k_dos_deviceinstance   = k_nodelist_allocate_li
                    st("_k_dos_deviceinstance" ,NULL);
  1680                        	.line	60
  1681 08:9355: F4 00 00     	pea	#^$0
  1682 08:9358: F4 00 00     	pea	#<$0
  1683 08:935B: F4 xx xx     	pea	#^L1+21
  1684 08:935E: F4 xx xx     	pea	#<L1+21
  1685 08:9361: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  1686 08:9365: 8D xx xx     	sta	|~~_k_dos_deviceinstance
  1687 08:9368: 8E xx xx     	stx	|~~_k_dos_deviceinstance+2
  1688                        ;
  1689                        ;	//k_debug_string("Scanning for Drivers...\r\n");
  1690                        ;
  1691                        ;	strcpy(log,"");
  1692                        	.line	64
  1693 08:936B: F4 xx xx     	pea	#^L1+43
  1694 08:936E: F4 xx xx     	pea	#<L1+43
  1695 08:9371: D4 2B        	pei	<L3+log_1+2
  1696 08:9373: D4 29        	pei	<L3+log_1
  1697 08:9375: 22 xx xx xx  	jsl	~~strcpy
  1698                        ;	strcat(log,"Scanning for Drivers...\r\n");
  1699                        	.line	65
  1700 08:9379: F4 xx xx     	pea	#^L1+44
  1701 08:937C: F4 xx xx     	pea	#<L1+44
  1702 08:937F: D4 2B        	pei	<L3+log_1+2
  1703 08:9381: D4 29        	pei	<L3+log_1
  1704 08:9383: 22 xx xx xx  	jsl	~~strcat
  1705                        ;	for(driver_idx = 0;driver_idx<DRIVER_MAX;driver_
                    idx++)
  1706                        	.line	66
  1707 08:9387: 64 2D        	stz	<L3+driver_idx_1
  1708 08:9389: 64 2F        	stz	<L3+driver_idx_1+2
  1709                        L10003:
  1710                        ;	{
  1711                        	.line	67
  1712                        ;		_k_get_driver_def = ((GETDRIVERDEF)((LPV
                    OID)((ULONG)DRIVER_BASE + (driver_idx * (ULONG)DRIVER_SIZE))
                    ));
  Sat Jul 10 2021  1:15                                                Page 33


  1713                        	.line	68
  1714 08:938B: F4 00 00     	pea	#^$5f0
  1715 08:938E: F4 F0 05     	pea	#<$5f0
  1716 08:9391: D4 2F        	pei	<L3+driver_idx_1+2
  1717 08:9393: D4 2D        	pei	<L3+driver_idx_1
  1718                        	xref	~~~lmul
  1719 08:9395: 22 xx xx xx  	jsl	~~~lmul
  1720 08:9399: 85 01        	sta	<R0
  1721 08:939B: 86 03        	stx	<R0+2
  1722 08:939D: 18           	clc
  1723 08:939E: A9 00 00     	lda	#$0
  1724 08:93A1: 65 01        	adc	<R0
  1725 08:93A3: 85 05        	sta	<R1
  1726 08:93A5: A9 04 00     	lda	#$4
  1727 08:93A8: 65 03        	adc	<R0+2
  1728 08:93AA: 85 07        	sta	<R1+2
  1729 08:93AC: A5 05        	lda	<R1
  1730 08:93AE: 85 35        	sta	<L3+_k_get_driver_def_1
  1731 08:93B0: A5 07        	lda	<R1+2
  1732 08:93B2: 85 37        	sta	<L3+_k_get_driver_def_1+2
  1733                        ;
  1734                        ;		//k_debug_integer("Scan slot:",(UINT)dri
                    ver_idx);
  1735                        ;		//k_debug_pointer("k_dos_load_drivers::s
                    canning @",_k_get_driver_def);
  1736                        ;		//k_debug_byte_array("k_dos_load_drivers
                    ::scan detected value:",((PBYTE)_k_get_driver_def),8);
  1737                        ;		//k_debug_long("k_dos_load_drivers::scan
                     detected long:",*((LONG*)_k_get_driver_def));
  1738                        ;		if(*((LONG*)_k_get_driver_def) == 0x4E93
                    83B)
  1739                        	.line	74
  1740                        ;		{
  1741 08:93B4: A7 35        	lda	[<L3+_k_get_driver_def_1]
  1742 08:93B6: C9 3B 38     	cmp	#<$4e9383b
  1743 08:93B9: D0 08        	bne	L5
  1744 08:93BB: A0 02 00     	ldy	#$2
  1745 08:93BE: B7 35        	lda	[<L3+_k_get_driver_def_1],Y
  1746 08:93C0: C9 E9 04     	cmp	#^$4e9383b
  1747                        L5:
  1748 08:93C3: F0 03        	beq	L6
  1749 08:93C5: 82 32 01     	brl	L10004
  1750                        L6:
  1751                        	.line	75
  1752                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver located@",_k_get_driver_def);
  1753                        ;			//k_debug_string("Driver Detecte
                    d:\r\n");
  1754                        ;			strcat(log,"Driver Detected:\r\n
                    ");
  1755                        	.line	78
  1756 08:93C8: F4 xx xx     	pea	#^L1+70
  1757 08:93CB: F4 xx xx     	pea	#<L1+70
  1758 08:93CE: D4 2B        	pei	<L3+log_1+2
  1759 08:93D0: D4 29        	pei	<L3+log_1
  1760 08:93D2: 22 xx xx xx  	jsl	~~strcat
  1761                        ;			driver = _k_get_driver_def(major
                    ,minor);
  Sat Jul 10 2021  1:15                                                Page 34


  1762                        	.line	79
  1763 08:93D6: F4 00 00     	pea	#0
  1764 08:93D9: 18           	clc
  1765 08:93DA: 7B           	tdc
  1766 08:93DB: 69 19 00     	adc	#<L3+minor_1
  1767 08:93DE: 48           	pha
  1768 08:93DF: F4 00 00     	pea	#0
  1769 08:93E2: 18           	clc
  1770 08:93E3: 7B           	tdc
  1771 08:93E4: 69 09 00     	adc	#<L3+major_1
  1772 08:93E7: 48           	pha
  1773 08:93E8: A6 37        	ldx	<L3+_k_get_driver_def_1+2
  1774 08:93EA: A5 35        	lda	<L3+_k_get_driver_def_1
  1775                        	xref	~~~lcal
  1776 08:93EC: 22 xx xx xx  	jsl	~~~lcal
  1777 08:93F0: 85 31        	sta	<L3+driver_1
  1778 08:93F2: 86 33        	stx	<L3+driver_1+2
  1779                        ;			if(driver)
  1780                        	.line	80
  1781                        ;			{
  1782 08:93F4: A5 31        	lda	<L3+driver_1
  1783 08:93F6: 05 33        	ora	<L3+driver_1+2
  1784 08:93F8: D0 03        	bne	L7
  1785 08:93FA: 82 FA 00     	brl	L10005
  1786                        L7:
  1787                        	.line	81
  1788                        ;				strcat(log,"  Name:");
  1789                        	.line	82
  1790 08:93FD: F4 xx xx     	pea	#^L1+89
  1791 08:9400: F4 xx xx     	pea	#<L1+89
  1792 08:9403: D4 2B        	pei	<L3+log_1+2
  1793 08:9405: D4 29        	pei	<L3+log_1
  1794 08:9407: 22 xx xx xx  	jsl	~~strcat
  1795                        ;				strcat(log,driver->name)
                    ;
  1796                        	.line	83
  1797 08:940B: D4 33        	pei	<L3+driver_1+2
  1798 08:940D: D4 31        	pei	<L3+driver_1
  1799 08:940F: D4 2B        	pei	<L3+log_1+2
  1800 08:9411: D4 29        	pei	<L3+log_1
  1801 08:9413: 22 xx xx xx  	jsl	~~strcat
  1802                        ;				strcat(log," : ");
  1803                        	.line	84
  1804 08:9417: F4 xx xx     	pea	#^L1+97
  1805 08:941A: F4 xx xx     	pea	#<L1+97
  1806 08:941D: D4 2B        	pei	<L3+log_1+2
  1807 08:941F: D4 29        	pei	<L3+log_1
  1808 08:9421: 22 xx xx xx  	jsl	~~strcat
  1809                        ;
  1810                        ;				//k_debug_strings("  Nam
                    e:",driver->name);
  1811                        ;				//k_debug_strings("    M
                    ajor:",driver->hmajor);
  1812                        ;				//k_debug_strings("    M
                    inor:",driver->hminor);
  1813                        ;
  1814                        ;				if((strcmp(driver->hmajo
                    r,major) == 0) && (strcmp(driver->hminor,minor) == 0))
  Sat Jul 10 2021  1:15                                                Page 35


  1815                        	.line	90
  1816                        ;				{
  1817 08:9425: F4 00 00     	pea	#0
  1818 08:9428: 18           	clc
  1819 08:9429: 7B           	tdc
  1820 08:942A: 69 09 00     	adc	#<L3+major_1
  1821 08:942D: 48           	pha
  1822 08:942E: 18           	clc
  1823 08:942F: A9 30 00     	lda	#$30
  1824 08:9432: 65 31        	adc	<L3+driver_1
  1825 08:9434: 85 01        	sta	<R0
  1826 08:9436: A9 00 00     	lda	#$0
  1827 08:9439: 65 33        	adc	<L3+driver_1+2
  1828 08:943B: 85 03        	sta	<R0+2
  1829 08:943D: D4 03        	pei	<R0+2
  1830 08:943F: D4 01        	pei	<R0
  1831 08:9441: 22 xx xx xx  	jsl	~~strcmp
  1832 08:9445: AA           	tax
  1833 08:9446: F0 03        	beq	L8
  1834 08:9448: 82 90 00     	brl	L10006
  1835                        L8:
  1836 08:944B: F4 00 00     	pea	#0
  1837 08:944E: 18           	clc
  1838 08:944F: 7B           	tdc
  1839 08:9450: 69 19 00     	adc	#<L3+minor_1
  1840 08:9453: 48           	pha
  1841 08:9454: 18           	clc
  1842 08:9455: A9 38 00     	lda	#$38
  1843 08:9458: 65 31        	adc	<L3+driver_1
  1844 08:945A: 85 05        	sta	<R1
  1845 08:945C: A9 00 00     	lda	#$0
  1846 08:945F: 65 33        	adc	<L3+driver_1+2
  1847 08:9461: 85 07        	sta	<R1+2
  1848 08:9463: D4 07        	pei	<R1+2
  1849 08:9465: D4 05        	pei	<R1
  1850 08:9467: 22 xx xx xx  	jsl	~~strcmp
  1851 08:946B: AA           	tax
  1852 08:946C: F0 03        	beq	L9
  1853 08:946E: 82 6A 00     	brl	L10006
  1854                        L9:
  1855                        	.line	91
  1856                        ;					if(driver->type 
                    != DRIVER_TYPE_UNIMPL)
  1857                        	.line	92
  1858                        ;					{
  1859 08:9471: E2 20        	sep	#$20
  1860                        	longa	off
  1861 08:9473: A0 40 00     	ldy	#$40
  1862 08:9476: B7 31        	lda	[<L3+driver_1],Y
  1863 08:9478: C9 FF        	cmp	#<$ff
  1864 08:947A: C2 20        	rep	#$20
  1865                        	longa	on
  1866 08:947C: D0 03        	bne	L10
  1867 08:947E: 82 49 00     	brl	L10007
  1868                        L10:
  1869                        	.line	93
  1870                        ;						k_nodeli
                    st_addtolist(_k_dos_devicedrivers,driver->type,driver->name,
  Sat Jul 10 2021  1:15                                                Page 36


                    driver);
  1871                        	.line	94
  1872 08:9481: D4 33        	pei	<L3+driver_1+2
  1873 08:9483: D4 31        	pei	<L3+driver_1
  1874 08:9485: D4 33        	pei	<L3+driver_1+2
  1875 08:9487: D4 31        	pei	<L3+driver_1
  1876 08:9489: A0 40 00     	ldy	#$40
  1877 08:948C: B7 31        	lda	[<L3+driver_1],Y
  1878 08:948E: 48           	pha
  1879 08:948F: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  1880 08:9492: 48           	pha
  1881 08:9493: AD xx xx     	lda	|~~_k_dos_devicedrivers
  1882 08:9496: 48           	pha
  1883 08:9497: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  1884                        ;						//k_debu
                    g_string("    Hardware Compatible: YES\r\n");
  1885                        ;						if(drive
                    r->f_driver_load)
  1886                        	.line	96
  1887                        ;							
                    ((DEVICEDRIVER_LOAD)driver->f_driver_load)();
  1888 08:949B: A0 51 00     	ldy	#$51
  1889 08:949E: B7 31        	lda	[<L3+driver_1],Y
  1890 08:94A0: A0 53 00     	ldy	#$53
  1891 08:94A3: 17 31        	ora	[<L3+driver_1],Y
  1892 08:94A5: D0 03        	bne	L11
  1893 08:94A7: 82 0F 00     	brl	L10008
  1894                        L11:
  1895                        	.line	97
  1896 08:94AA: A0 53 00     	ldy	#$53
  1897 08:94AD: B7 31        	lda	[<L3+driver_1],Y
  1898 08:94AF: AA           	tax
  1899 08:94B0: A0 51 00     	ldy	#$51
  1900 08:94B3: B7 31        	lda	[<L3+driver_1],Y
  1901                        	xref	~~~lcal
  1902 08:94B5: 22 xx xx xx  	jsl	~~~lcal
  1903                        ;
  1904                        ;						strcat(l
                    og,"LOADED");
  1905                        L10008:
  1906                        	.line	99
  1907 08:94B9: F4 xx xx     	pea	#^L1+101
  1908 08:94BC: F4 xx xx     	pea	#<L1+101
  1909 08:94BF: D4 2B        	pei	<L3+log_1+2
  1910 08:94C1: D4 29        	pei	<L3+log_1
  1911 08:94C3: 22 xx xx xx  	jsl	~~strcat
  1912                        ;					}
  1913                        	.line	100
  1914                        ;					else
  1915 08:94C7: 82 0E 00     	brl	L10009
  1916                        L10007:
  1917                        ;					{
  1918                        	.line	102
  1919                        ;						strcat(l
                    og,"UNIMPLEMENTED");
  1920                        	.line	103
  1921 08:94CA: F4 xx xx     	pea	#^L1+108
  1922 08:94CD: F4 xx xx     	pea	#<L1+108
  Sat Jul 10 2021  1:15                                                Page 37


  1923 08:94D0: D4 2B        	pei	<L3+log_1+2
  1924 08:94D2: D4 29        	pei	<L3+log_1
  1925 08:94D4: 22 xx xx xx  	jsl	~~strcat
  1926                        ;					}
  1927                        	.line	104
  1928                        L10009:
  1929                        ;				}
  1930                        	.line	105
  1931                        ;				else
  1932 08:94D8: 82 0E 00     	brl	L10010
  1933                        L10006:
  1934                        ;				{
  1935                        	.line	107
  1936                        ;					//k_debug_string
                    ("    Hardware Compatible: NO\r\n");
  1937                        ;					strcat(log,"INCO
                    MPATIBLE");
  1938                        	.line	109
  1939 08:94DB: F4 xx xx     	pea	#^L1+122
  1940 08:94DE: F4 xx xx     	pea	#<L1+122
  1941 08:94E1: D4 2B        	pei	<L3+log_1+2
  1942 08:94E3: D4 29        	pei	<L3+log_1
  1943 08:94E5: 22 xx xx xx  	jsl	~~strcat
  1944                        ;				}
  1945                        	.line	110
  1946                        L10010:
  1947                        ;
  1948                        ;				strcat(log,"\r\n");
  1949                        	.line	112
  1950 08:94E9: F4 xx xx     	pea	#^L1+135
  1951 08:94EC: F4 xx xx     	pea	#<L1+135
  1952 08:94EF: D4 2B        	pei	<L3+log_1+2
  1953 08:94F1: D4 29        	pei	<L3+log_1
  1954 08:94F3: 22 xx xx xx  	jsl	~~strcat
  1955                        ;			}
  1956                        	.line	113
  1957                        ;		}
  1958                        L10005:
  1959                        	.line	114
  1960                        ;		else
  1961 08:94F7: 82 00 00     	brl	L10011
  1962                        L10004:
  1963                        ;		{
  1964                        	.line	116
  1965                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver not detected@",_k_get_driver_def);
  1966                        ;		}
  1967                        	.line	118
  1968                        L10011:
  1969                        ;	}
  1970                        	.line	119
  1971                        L10001:
  1972 08:94FA: E6 2D        	inc	<L3+driver_idx_1
  1973 08:94FC: D0 02        	bne	L12
  1974 08:94FE: E6 2F        	inc	<L3+driver_idx_1+2
  1975                        L12:
  1976 08:9500: A5 2D        	lda	<L3+driver_idx_1
  1977 08:9502: C9 19 00     	cmp	#<$19
  Sat Jul 10 2021  1:15                                                Page 38


  1978 08:9505: A5 2F        	lda	<L3+driver_idx_1+2
  1979 08:9507: E9 00 00     	sbc	#^$19
  1980 08:950A: B0 03        	bcs	L13
  1981 08:950C: 82 7C FE     	brl	L10003
  1982                        L13:
  1983                        L10002:
  1984                        ;
  1985                        ;
  1986                        ;	return (LPCSTR)log;
  1987                        	.line	122
  1988 08:950F: A6 2B        	ldx	<L3+log_1+2
  1989 08:9511: A5 29        	lda	<L3+log_1
  1990                        L14:
  1991 08:9513: A8           	tay
  1992 08:9514: 2B           	pld
  1993 08:9515: 3B           	tsc
  1994 08:9516: 18           	clc
  1995 08:9517: 69 38 00     	adc	#L2
  1996 08:951A: 1B           	tcs
  1997 08:951B: 98           	tya
  1998 08:951C: 6B           	rtl
  1999                        ;}
  2000                        	.line	123
  2001                        	.endblock	123
  2002             00000038   L2	equ	56
  2003             00000009   L3	equ	9
  2004 08:951D:              	ends
  2005                        	efunc
  2006                        	.endfunc	123,9,56
  2007                        	.line	123
  2008                        	data
  2009                        L1:
  2010 00:000C: 5F 6B 5F 64  	db	$5F,$6B,$5F,$64,$6F,$73,$5F,$64,$65,$76,
                    $69,$63,$65,$64,$72
       00:0010: 6F 73 5F 64 
       00:0014: 65 76 69 63 
       00:0018: 65 64 72 
  2011 00:001B: 69 76 65 72  	db	$69,$76,$65,$72,$73,$00,$5F,$6B,$5F,$64,
                    $6F,$73,$5F,$64,$65
       00:001F: 73 00 5F 6B 
       00:0023: 5F 64 6F 73 
       00:0027: 5F 64 65 
  2012 00:002A: 76 69 63 65  	db	$76,$69,$63,$65,$69,$6E,$73,$74,$61,$6E,
                    $63,$65,$00,$00,$53
       00:002E: 69 6E 73 74 
       00:0032: 61 6E 63 65 
       00:0036: 00 00 53 
  2013 00:0039: 63 61 6E 6E  	db	$63,$61,$6E,$6E,$69,$6E,$67,$20,$66,$6F,
                    $72,$20,$44,$72,$69
       00:003D: 69 6E 67 20 
       00:0041: 66 6F 72 20 
       00:0045: 44 72 69 
  2014 00:0048: 76 65 72 73  	db	$76,$65,$72,$73,$2E,$2E,$2E,$0D,$0A,$00,
                    $44,$72,$69,$76,$65
       00:004C: 2E 2E 2E 0D 
       00:0050: 0A 00 44 72 
       00:0054: 69 76 65 
  2015 00:0057: 72 20 44 65  	db	$72,$20,$44,$65,$74,$65,$63,$74,$65,$64,
  Sat Jul 10 2021  1:15                                                Page 39


                    $3A,$0D,$0A,$00,$20
       00:005B: 74 65 63 74 
       00:005F: 65 64 3A 0D 
       00:0063: 0A 00 20 
  2016 00:0066: 20 4E 61 6D  	db	$20,$4E,$61,$6D,$65,$3A,$00,$20,$3A,$20,
                    $00,$4C,$4F,$41,$44
       00:006A: 65 3A 00 20 
       00:006E: 3A 20 00 4C 
       00:0072: 4F 41 44 
  2017 00:0075: 45 44 00 55  	db	$45,$44,$00,$55,$4E,$49,$4D,$50,$4C,$45,
                    $4D,$45,$4E,$54,$45
       00:0079: 4E 49 4D 50 
       00:007D: 4C 45 4D 45 
       00:0081: 4E 54 45 
  2018 00:0084: 44 00 49 4E  	db	$44,$00,$49,$4E,$43,$4F,$4D,$50,$41,$54,
                    $49,$42,$4C,$45,$00
       00:0088: 43 4F 4D 50 
       00:008C: 41 54 49 42 
       00:0090: 4C 45 00 
  2019 00:0093: 0D 0A 00     	db	$0D,$0A,$00
  2020 00:0096:              	ends
  2021                        ;/*
  2022                        ;void k_dos_load_drivers_old(void)
  2023                        ;{
  2024                        ;	PFX_DEVICE_DRIVER driver = NULL;
  2025                        ;
  2026                        ;	CHAR major[16];
  2027                        ;	CHAR minor[16];
  2028                        ;
  2029                        ;	sectorBuffer = (LPSTR)k_mem_allocate_heap(512);
  2030                        ;
  2031                        ;	driver = NULL;
  2032                        ;
  2033                        ;	k_get_c256_major_version(major);
  2034                        ;	k_get_c256_minor_version(minor);
  2035                        ;
  2036                        ;	k_debug_strings("System Major:",major);
  2037                        ;	k_debug_strings("System Minor:",minor);
  2038                        ;
  2039                        ;
  2040                        ;	_k_dos_devicedrivers 	= k_nodelist_allocate_li
                    st("_k_dos_devicedrivers" ,NULL);
  2041                        ;	_k_dos_deviceinstance   = k_nodelist_allocate_li
                    st("_k_dos_deviceinstance" ,NULL);
  2042                        ;
  2043                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_CON;
  2044                        ;	//k_debug_byte_array("DEVICE_CON:\r\n",(PBYTE)dr
                    iver,sizeof(FX_DEVICE_DRIVER));
  2045                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  2046                        ;
  2047                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
                    e:",driver->name);
  2048                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  2049                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  2050                        ;	k_debug_strings("k_dos_load_drivers::driver->min
  Sat Jul 10 2021  1:15                                                Page 40


                    or:",driver->hminor);
  2051                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  2052                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  2053                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  2054                        ;
  2055                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  2056                        ;	{
  2057                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  2058                        ;		if(driver->f_driver_load)
  2059                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  2060                        ;	}
  2061                        ;
  2062                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_SD;
  2063                        ;	//k_debug_byte_array("DEVICE_SD:\r\n",(PBYTE)dri
                    ver,sizeof(FX_DEVICE_DRIVER));
  2064                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  2065                        ;
  2066                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
                    e:",driver->name);
  2067                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  2068                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  2069                        ;	k_debug_strings("k_dos_load_drivers::driver->min
                    or:",driver->hminor);
  2070                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  2071                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  2072                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  2073                        ;
  2074                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  2075                        ;	{
  2076                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  2077                        ;
  2078                        ;		driver->driver_context = k_mem_allocate_
                    heap(sizeof(FATFS));
  2079                        ;
  2080                        ;		if(driver->f_driver_load)
  2081                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  2082                        ;	}
  2083                        ;
  2084                        ;
  2085                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_HD;
  2086                        ;	//k_debug_byte_array("DEVICE_HD:\r\n",(PBYTE)dri
                    ver,sizeof(FX_DEVICE_DRIVER));
  2087                        ;
  Sat Jul 10 2021  1:15                                                Page 41


  2088                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  2089                        ;
  2090                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
                    e:",driver->name);
  2091                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  2092                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  2093                        ;	k_debug_strings("k_dos_load_drivers::driver->min
                    or:",driver->hminor);
  2094                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  2095                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  2096                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  2097                        ;
  2098                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  2099                        ;	{
  2100                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  2101                        ;
  2102                        ;		driver->driver_context = k_mem_allocate_
                    heap(sizeof(FATFS));
  2103                        ;
  2104                        ;		if(driver->f_driver_load)
  2105                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  2106                        ;	}
  2107                        ;}
  2108                        ;
  2109                        ;*/
  2110                        ;
  2111                        ;
  2112                        ;
  2113                        ;PFX_DEVICE_DRIVER k_get_device_driver(UINT type)
  2114                        ;{
  2115                        	.line	216
  2116                        	.line	217
  2117                        	FXDOS
  2118                        	xdef	~~k_get_device_driver
  2119                        	func
  2120                        	.function	217
  2121                        ~~k_get_device_driver:
  2122                        	longa	on
  2123                        	longi	on
  2124 08:951D: 3B           	tsc
  2125 08:951E: 38           	sec
  2126 08:951F: E9 08 00     	sbc	#L16
  2127 08:9522: 1B           	tcs
  2128 08:9523: 0B           	phd
  2129 08:9524: 5B           	tcd
  2130             00000004   type_0	set	4
  2131                        	.block	217
  2132                        ;	PFXNODE deviceNode = NULL;
  2133                        ;	PFX_DEVICE_DRIVER device = NULL;
  Sat Jul 10 2021  1:15                                                Page 42


  2134                        ;
  2135                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    cedrivers,type);
  2136             00000000   deviceNode_1	set	0
  2137             00000004   device_1	set	4
  2138                        	.sym	deviceNode,0,138,1,32,5
  2139                        	.sym	device,4,138,1,32,55
  2140                        	.sym	type,4,16,6,16
  2141 08:9525: 64 01        	stz	<L17+deviceNode_1
  2142 08:9527: 64 03        	stz	<L17+deviceNode_1+2
  2143 08:9529: 64 05        	stz	<L17+device_1
  2144 08:952B: 64 07        	stz	<L17+device_1+2
  2145                        	.line	221
  2146 08:952D: D4 0C        	pei	<L16+type_0
  2147 08:952F: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  2148 08:9532: 48           	pha
  2149 08:9533: AD xx xx     	lda	|~~_k_dos_devicedrivers
  2150 08:9536: 48           	pha
  2151 08:9537: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  2152 08:953B: 85 01        	sta	<L17+deviceNode_1
  2153 08:953D: 86 03        	stx	<L17+deviceNode_1+2
  2154                        ;	if(deviceNode)
  2155                        	.line	222
  2156                        ;	{
  2157 08:953F: A5 01        	lda	<L17+deviceNode_1
  2158 08:9541: 05 03        	ora	<L17+deviceNode_1+2
  2159 08:9543: D0 03        	bne	L19
  2160 08:9545: 82 0E 00     	brl	L10012
  2161                        L19:
  2162                        	.line	223
  2163                        ;		device = ((PFX_DEVICE_DRIVER)(deviceNode
                    ->data));
  2164                        	.line	224
  2165 08:9548: A0 02 00     	ldy	#$2
  2166 08:954B: B7 01        	lda	[<L17+deviceNode_1],Y
  2167 08:954D: 85 05        	sta	<L17+device_1
  2168 08:954F: A0 04 00     	ldy	#$4
  2169 08:9552: B7 01        	lda	[<L17+deviceNode_1],Y
  2170 08:9554: 85 07        	sta	<L17+device_1+2
  2171                        ;	}
  2172                        	.line	225
  2173                        ;
  2174                        ;	return device;
  2175                        L10012:
  2176                        	.line	227
  2177 08:9556: A6 07        	ldx	<L17+device_1+2
  2178 08:9558: A5 05        	lda	<L17+device_1
  2179                        L20:
  2180 08:955A: A8           	tay
  2181 08:955B: A5 0A        	lda	<L16+2
  2182 08:955D: 85 0C        	sta	<L16+2+2
  2183 08:955F: A5 09        	lda	<L16+1
  2184 08:9561: 85 0B        	sta	<L16+1+2
  2185 08:9563: 2B           	pld
  2186 08:9564: 3B           	tsc
  2187 08:9565: 18           	clc
  2188 08:9566: 69 0A 00     	adc	#L16+2
  2189 08:9569: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 43


  2190 08:956A: 98           	tya
  2191 08:956B: 6B           	rtl
  2192                        ;}
  2193                        	.line	228
  2194                        	.endblock	228
  2195             00000008   L16	equ	8
  2196             00000001   L17	equ	1
  2197 08:956C:              	ends
  2198                        	efunc
  2199                        	.endfunc	228,1,8
  2200                        	.line	228
  2201                        ;
  2202                        ;PFXDOSDEVICE k_get_dos_device(UINT type)
  2203                        ;{
  2204                        	.line	230
  2205                        	.line	231
  2206                        	FXDOS
  2207                        	xdef	~~k_get_dos_device
  2208                        	func
  2209                        	.function	231
  2210                        ~~k_get_dos_device:
  2211                        	longa	on
  2212                        	longi	on
  2213 08:956C: 3B           	tsc
  2214 08:956D: 38           	sec
  2215 08:956E: E9 08 00     	sbc	#L21
  2216 08:9571: 1B           	tcs
  2217 08:9572: 0B           	phd
  2218 08:9573: 5B           	tcd
  2219             00000004   type_0	set	4
  2220                        	.block	231
  2221                        ;	PFXNODE deviceNode = NULL;
  2222                        ;	PFXDOSDEVICE device = NULL;
  2223                        ;
  2224                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    ceinstance,type);
  2225             00000000   deviceNode_1	set	0
  2226             00000004   device_1	set	4
  2227                        	.sym	deviceNode,0,138,1,32,5
  2228                        	.sym	device,4,138,1,32,122
  2229                        	.sym	type,4,16,6,16
  2230 08:9574: 64 01        	stz	<L22+deviceNode_1
  2231 08:9576: 64 03        	stz	<L22+deviceNode_1+2
  2232 08:9578: 64 05        	stz	<L22+device_1
  2233 08:957A: 64 07        	stz	<L22+device_1+2
  2234                        	.line	235
  2235 08:957C: D4 0C        	pei	<L21+type_0
  2236 08:957E: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  2237 08:9581: 48           	pha
  2238 08:9582: AD xx xx     	lda	|~~_k_dos_deviceinstance
  2239 08:9585: 48           	pha
  2240 08:9586: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  2241 08:958A: 85 01        	sta	<L22+deviceNode_1
  2242 08:958C: 86 03        	stx	<L22+deviceNode_1+2
  2243                        ;	if(deviceNode)
  2244                        	.line	236
  2245                        ;	{
  2246 08:958E: A5 01        	lda	<L22+deviceNode_1
  Sat Jul 10 2021  1:15                                                Page 44


  2247 08:9590: 05 03        	ora	<L22+deviceNode_1+2
  2248 08:9592: D0 03        	bne	L24
  2249 08:9594: 82 0E 00     	brl	L10013
  2250                        L24:
  2251                        	.line	237
  2252                        ;		device = ((PFXDOSDEVICE)(deviceNode->dat
                    a));
  2253                        	.line	238
  2254 08:9597: A0 02 00     	ldy	#$2
  2255 08:959A: B7 01        	lda	[<L22+deviceNode_1],Y
  2256 08:959C: 85 05        	sta	<L22+device_1
  2257 08:959E: A0 04 00     	ldy	#$4
  2258 08:95A1: B7 01        	lda	[<L22+deviceNode_1],Y
  2259 08:95A3: 85 07        	sta	<L22+device_1+2
  2260                        ;	}
  2261                        	.line	239
  2262                        ;
  2263                        ;	return device;
  2264                        L10013:
  2265                        	.line	241
  2266 08:95A5: A6 07        	ldx	<L22+device_1+2
  2267 08:95A7: A5 05        	lda	<L22+device_1
  2268                        L25:
  2269 08:95A9: A8           	tay
  2270 08:95AA: A5 0A        	lda	<L21+2
  2271 08:95AC: 85 0C        	sta	<L21+2+2
  2272 08:95AE: A5 09        	lda	<L21+1
  2273 08:95B0: 85 0B        	sta	<L21+1+2
  2274 08:95B2: 2B           	pld
  2275 08:95B3: 3B           	tsc
  2276 08:95B4: 18           	clc
  2277 08:95B5: 69 0A 00     	adc	#L21+2
  2278 08:95B8: 1B           	tcs
  2279 08:95B9: 98           	tya
  2280 08:95BA: 6B           	rtl
  2281                        ;}
  2282                        	.line	242
  2283                        	.endblock	242
  2284             00000008   L21	equ	8
  2285             00000001   L22	equ	1
  2286 08:95BB:              	ends
  2287                        	efunc
  2288                        	.endfunc	242,1,8
  2289                        	.line	242
  2290                        ;
  2291                        ;BOOL k_close_dos_device(UINT type)
  2292                        ;{
  2293                        	.line	244
  2294                        	.line	245
  2295                        	FXDOS
  2296                        	xdef	~~k_close_dos_device
  2297                        	func
  2298                        	.function	245
  2299                        ~~k_close_dos_device:
  2300                        	longa	on
  2301                        	longi	on
  2302 08:95BB: 3B           	tsc
  2303 08:95BC: 38           	sec
  Sat Jul 10 2021  1:15                                                Page 45


  2304 08:95BD: E9 09 00     	sbc	#L26
  2305 08:95C0: 1B           	tcs
  2306 08:95C1: 0B           	phd
  2307 08:95C2: 5B           	tcd
  2308             00000004   type_0	set	4
  2309                        	.block	245
  2310                        ;	BOOL bRet = FALSE;
  2311                        ;	PFXNODE deviceNode = NULL;
  2312                        ;	PFXDOSDEVICE device = NULL;
  2313                        ;
  2314                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    ceinstance,type);
  2315             00000000   bRet_1	set	0
  2316             00000001   deviceNode_1	set	1
  2317             00000005   device_1	set	5
  2318                        	.sym	bRet,0,14,1,8
  2319                        	.sym	deviceNode,1,138,1,32,5
  2320                        	.sym	device,5,138,1,32,122
  2321                        	.sym	type,4,16,6,16
  2322 08:95C3: E2 20        	sep	#$20
  2323                        	longa	off
  2324 08:95C5: 64 01        	stz	<L27+bRet_1
  2325 08:95C7: C2 20        	rep	#$20
  2326                        	longa	on
  2327 08:95C9: 64 02        	stz	<L27+deviceNode_1
  2328 08:95CB: 64 04        	stz	<L27+deviceNode_1+2
  2329 08:95CD: 64 06        	stz	<L27+device_1
  2330 08:95CF: 64 08        	stz	<L27+device_1+2
  2331                        	.line	250
  2332 08:95D1: D4 0D        	pei	<L26+type_0
  2333 08:95D3: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  2334 08:95D6: 48           	pha
  2335 08:95D7: AD xx xx     	lda	|~~_k_dos_deviceinstance
  2336 08:95DA: 48           	pha
  2337 08:95DB: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  2338 08:95DF: 85 02        	sta	<L27+deviceNode_1
  2339 08:95E1: 86 04        	stx	<L27+deviceNode_1+2
  2340                        ;	if(deviceNode)
  2341                        	.line	251
  2342                        ;	{
  2343 08:95E3: A5 02        	lda	<L27+deviceNode_1
  2344 08:95E5: 05 04        	ora	<L27+deviceNode_1+2
  2345 08:95E7: D0 03        	bne	L29
  2346 08:95E9: 82 2F 00     	brl	L10014
  2347                        L29:
  2348                        	.line	252
  2349                        ;		device = ((PFXDOSDEVICE)(deviceNode->dat
                    a));
  2350                        	.line	253
  2351 08:95EC: A0 02 00     	ldy	#$2
  2352 08:95EF: B7 02        	lda	[<L27+deviceNode_1],Y
  2353 08:95F1: 85 06        	sta	<L27+device_1
  2354 08:95F3: A0 04 00     	ldy	#$4
  2355 08:95F6: B7 02        	lda	[<L27+deviceNode_1],Y
  2356 08:95F8: 85 08        	sta	<L27+device_1+2
  2357                        ;		if(device)
  2358                        	.line	254
  2359                        ;		{
  Sat Jul 10 2021  1:15                                                Page 46


  2360 08:95FA: A5 06        	lda	<L27+device_1
  2361 08:95FC: 05 08        	ora	<L27+device_1+2
  2362 08:95FE: D0 03        	bne	L30
  2363 08:9600: 82 18 00     	brl	L10015
  2364                        L30:
  2365                        	.line	255
  2366                        ;			k_nodelist_removefromlist(_k_dos
                    _deviceinstance,deviceNode);
  2367                        	.line	256
  2368 08:9603: D4 04        	pei	<L27+deviceNode_1+2
  2369 08:9605: D4 02        	pei	<L27+deviceNode_1
  2370 08:9607: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  2371 08:960A: 48           	pha
  2372 08:960B: AD xx xx     	lda	|~~_k_dos_deviceinstance
  2373 08:960E: 48           	pha
  2374 08:960F: 22 xx xx xx  	jsl	~~k_nodelist_removefromlist
  2375                        ;			bRet = TRUE;
  2376                        	.line	257
  2377 08:9613: E2 20        	sep	#$20
  2378                        	longa	off
  2379 08:9615: A9 01        	lda	#$1
  2380 08:9617: 85 01        	sta	<L27+bRet_1
  2381 08:9619: C2 20        	rep	#$20
  2382                        	longa	on
  2383                        ;		}
  2384                        	.line	258
  2385                        ;	}
  2386                        L10015:
  2387                        	.line	259
  2388                        ;
  2389                        ;    return bRet;
  2390                        L10014:
  2391                        	.line	261
  2392 08:961B: A5 01        	lda	<L27+bRet_1
  2393 08:961D: 29 FF 00     	and	#$ff
  2394                        L31:
  2395 08:9620: A8           	tay
  2396 08:9621: A5 0B        	lda	<L26+2
  2397 08:9623: 85 0D        	sta	<L26+2+2
  2398 08:9625: A5 0A        	lda	<L26+1
  2399 08:9627: 85 0C        	sta	<L26+1+2
  2400 08:9629: 2B           	pld
  2401 08:962A: 3B           	tsc
  2402 08:962B: 18           	clc
  2403 08:962C: 69 0B 00     	adc	#L26+2
  2404 08:962F: 1B           	tcs
  2405 08:9630: 98           	tya
  2406 08:9631: 6B           	rtl
  2407                        ;}
  2408                        	.line	262
  2409                        	.endblock	262
  2410             00000009   L26	equ	9
  2411             00000001   L27	equ	1
  2412 08:9632:              	ends
  2413                        	efunc
  2414                        	.endfunc	262,1,9
  2415                        	.line	262
  2416                        ;
  Sat Jul 10 2021  1:15                                                Page 47


  2417                        ;PFXDOSDEVICE k_create_dos_device(UINT type)
  2418                        ;{
  2419                        	.line	264
  2420                        	.line	265
  2421                        	FXDOS
  2422                        	xdef	~~k_create_dos_device
  2423                        	func
  2424                        	.function	265
  2425                        ~~k_create_dos_device:
  2426                        	longa	on
  2427                        	longi	on
  2428 08:9632: 3B           	tsc
  2429 08:9633: 38           	sec
  2430 08:9634: E9 28 00     	sbc	#L32
  2431 08:9637: 1B           	tcs
  2432 08:9638: 0B           	phd
  2433 08:9639: 5B           	tcd
  2434             00000004   type_0	set	4
  2435                        	.block	265
  2436                        ;	INT x = 0;
  2437                        ;
  2438                        ;	BYTE	errorCode;
  2439                        ;	CHAR	byte;
  2440                        ;
  2441                        ;	BYTE	s;
  2442                        ;
  2443                        ;	BOOL isFAT12 = FALSE;
  2444                        ;
  2445                        ;	PFATBOOTSECTOR  pBoot = NULL;
  2446                        ;	PPARTITIONTABLE pPartTable 		= NULL;
  2447                        ;	PFXDOSDEVICE 	pfxdosDevice 	= NULL;
  2448                        ;	PFAT32EXT		pfat32 			
                    = NULL;
  2449                        ;	PFX_BLOCK_DEVICE_DRIVER pdriver = NULL;
  2450                        ;	PFXNODE deviceNode = NULL;
  2451                        ;	ULONG lba = 0L;
  2452                        ;
  2453                        ;	INT partitionId = 0x00;
  2454                        ;
  2455                        ;    k_debug_integer("k_create_dos_device:",type);
  2456             00000000   x_1	set	0
  2457             00000002   errorCode_1	set	2
  2458             00000003   byte_1	set	3
  2459             00000004   s_1	set	4
  2460             00000005   isFAT12_1	set	5
  2461             00000006   pBoot_1	set	6
  2462             0000000A   pPartTable_1	set	10
  2463             0000000E   pfxdosDevice_1	set	14
  2464             00000012   pfat32_1	set	18
  2465             00000016   pdriver_1	set	22
  2466             0000001A   deviceNode_1	set	26
  2467             0000001E   lba_1	set	30
  2468             00000022   partitionId_1	set	34
  2469                        	.sym	x,0,5,1,16
  2470                        	.sym	errorCode,2,14,1,8
  2471                        	.sym	byte,3,14,1,8
  2472                        	.sym	s,4,14,1,8
  2473                        	.sym	isFAT12,5,14,1,8
  Sat Jul 10 2021  1:15                                                Page 48


  2474                        	.sym	pBoot,6,138,1,32,92
  2475                        	.sym	pPartTable,10,138,1,32,93
  2476                        	.sym	pfxdosDevice,14,138,1,32,122
  2477                        	.sym	pfat32,18,138,1,32,89
  2478                        	.sym	pdriver,22,138,1,32,56
  2479                        	.sym	deviceNode,26,138,1,32,5
  2480                        	.sym	lba,30,18,1,32
  2481                        	.sym	partitionId,34,5,1,16
  2482                        	.sym	type,4,16,6,16
  2483 08:963A: 64 05        	stz	<L33+x_1
  2484 08:963C: E2 20        	sep	#$20
  2485                        	longa	off
  2486 08:963E: 64 0A        	stz	<L33+isFAT12_1
  2487 08:9640: C2 20        	rep	#$20
  2488                        	longa	on
  2489 08:9642: 64 0B        	stz	<L33+pBoot_1
  2490 08:9644: 64 0D        	stz	<L33+pBoot_1+2
  2491 08:9646: 64 0F        	stz	<L33+pPartTable_1
  2492 08:9648: 64 11        	stz	<L33+pPartTable_1+2
  2493 08:964A: 64 13        	stz	<L33+pfxdosDevice_1
  2494 08:964C: 64 15        	stz	<L33+pfxdosDevice_1+2
  2495 08:964E: 64 17        	stz	<L33+pfat32_1
  2496 08:9650: 64 19        	stz	<L33+pfat32_1+2
  2497 08:9652: 64 1B        	stz	<L33+pdriver_1
  2498 08:9654: 64 1D        	stz	<L33+pdriver_1+2
  2499 08:9656: 64 1F        	stz	<L33+deviceNode_1
  2500 08:9658: 64 21        	stz	<L33+deviceNode_1+2
  2501 08:965A: 64 23        	stz	<L33+lba_1
  2502 08:965C: 64 25        	stz	<L33+lba_1+2
  2503 08:965E: 64 27        	stz	<L33+partitionId_1
  2504                        	.line	285
  2505 08:9660: D4 2C        	pei	<L32+type_0
  2506 08:9662: F4 xx xx     	pea	#^L15
  2507 08:9665: F4 xx xx     	pea	#<L15
  2508 08:9668: 22 xx xx xx  	jsl	~~k_debug_integer
  2509                        ;
  2510                        ;
  2511                        ;    pfxdosDevice = k_get_dos_device(type);
  2512                        	.line	288
  2513 08:966C: D4 2C        	pei	<L32+type_0
  2514 08:966E: 22 6C 95 08  	jsl	~~k_get_dos_device
  2515 08:9672: 85 13        	sta	<L33+pfxdosDevice_1
  2516 08:9674: 86 15        	stx	<L33+pfxdosDevice_1+2
  2517                        ;    if(pfxdosDevice)
  2518                        	.line	289
  2519                        ;    {
  2520 08:9676: A5 13        	lda	<L33+pfxdosDevice_1
  2521 08:9678: 05 15        	ora	<L33+pfxdosDevice_1+2
  2522 08:967A: D0 03        	bne	L35
  2523 08:967C: 82 22 00     	brl	L10016
  2524                        L35:
  2525                        	.line	290
  2526                        ;    	k_debug_integer("k_create_dos_device:FOU
                    ND EXISTING:",type);
  2527                        	.line	291
  2528 08:967F: D4 2C        	pei	<L32+type_0
  2529 08:9681: F4 xx xx     	pea	#^L15+21
  2530 08:9684: F4 xx xx     	pea	#<L15+21
  Sat Jul 10 2021  1:15                                                Page 49


  2531 08:9687: 22 xx xx xx  	jsl	~~k_debug_integer
  2532                        ;    	return pfxdosDevice;
  2533                        	.line	292
  2534 08:968B: A6 15        	ldx	<L33+pfxdosDevice_1+2
  2535 08:968D: A5 13        	lda	<L33+pfxdosDevice_1
  2536                        L36:
  2537 08:968F: A8           	tay
  2538 08:9690: A5 2A        	lda	<L32+2
  2539 08:9692: 85 2C        	sta	<L32+2+2
  2540 08:9694: A5 29        	lda	<L32+1
  2541 08:9696: 85 2B        	sta	<L32+1+2
  2542 08:9698: 2B           	pld
  2543 08:9699: 3B           	tsc
  2544 08:969A: 18           	clc
  2545 08:969B: 69 2A 00     	adc	#L32+2
  2546 08:969E: 1B           	tcs
  2547 08:969F: 98           	tya
  2548 08:96A0: 6B           	rtl
  2549                        ;    }
  2550                        	.line	293
  2551                        ;
  2552                        ;    pfxdosDevice = k_mem_allocate_heap(sizeof(FXD
                    OSDEVICE));
  2553                        L10016:
  2554                        	.line	295
  2555 08:96A1: F4 CE 02     	pea	#<$2ce
  2556 08:96A4: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2557 08:96A8: 85 13        	sta	<L33+pfxdosDevice_1
  2558 08:96AA: 86 15        	stx	<L33+pfxdosDevice_1+2
  2559                        ;    if(pfxdosDevice)
  2560                        	.line	296
  2561                        ;    {
  2562 08:96AC: A5 13        	lda	<L33+pfxdosDevice_1
  2563 08:96AE: 05 15        	ora	<L33+pfxdosDevice_1+2
  2564 08:96B0: D0 03        	bne	L37
  2565 08:96B2: 82 4F 02     	brl	L10017
  2566                        L37:
  2567                        	.line	297
  2568                        ;    	memset(pfxdosDevice,0,sizeof(FXDOSDEVICE
                    ));
  2569                        	.line	298
  2570 08:96B5: F4 CE 02     	pea	#<$2ce
  2571 08:96B8: F4 00 00     	pea	#<$0
  2572 08:96BB: D4 15        	pei	<L33+pfxdosDevice_1+2
  2573 08:96BD: D4 13        	pei	<L33+pfxdosDevice_1
  2574 08:96BF: 22 xx xx xx  	jsl	~~memset
  2575                        ;
  2576                        ;    	switch(type)
  2577                        	.line	300
  2578 08:96C3: A5 2C        	lda	<L32+type_0
  2579 08:96C5: 82 D1 01     	brl	L10018
  2580                        ;		{
  2581                        	.line	301
  2582                        ;    	case FXDOS_SDC:
  2583                        	.line	302
  2584                        L10020:
  2585                        ;
  2586                        ;    		deviceNode = k_nodelist_searchBy
  Sat Jul 10 2021  1:15                                                Page 50


                    Type(_k_dos_devicedrivers,DRIVER_TYPE_SDCARD);
  2587                        	.line	304
  2588 08:96C8: F4 06 00     	pea	#<$6
  2589 08:96CB: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  2590 08:96CE: 48           	pha
  2591 08:96CF: AD xx xx     	lda	|~~_k_dos_devicedrivers
  2592 08:96D2: 48           	pha
  2593 08:96D3: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  2594 08:96D7: 85 1F        	sta	<L33+deviceNode_1
  2595 08:96D9: 86 21        	stx	<L33+deviceNode_1+2
  2596                        ;    		if(deviceNode)
  2597                        	.line	305
  2598                        ;    		{
  2599 08:96DB: A5 1F        	lda	<L33+deviceNode_1
  2600 08:96DD: 05 21        	ora	<L33+deviceNode_1+2
  2601 08:96DF: D0 03        	bne	L38
  2602 08:96E1: 82 C6 00     	brl	L10021
  2603                        L38:
  2604                        	.line	306
  2605                        ;    			 k_debug_pointer("k_crea
                    te_dos_device:found:deviceNode:",deviceNode);
  2606                        	.line	307
  2607 08:96E4: D4 21        	pei	<L33+deviceNode_1+2
  2608 08:96E6: D4 1F        	pei	<L33+deviceNode_1
  2609 08:96E8: F4 xx xx     	pea	#^L15+57
  2610 08:96EB: F4 xx xx     	pea	#<L15+57
  2611 08:96EE: 22 xx xx xx  	jsl	~~k_debug_pointer
  2612                        ;
  2613                        ;    			pdriver = ((PFX_BLOCK_DE
                    VICE_DRIVER)(deviceNode->data));
  2614                        	.line	309
  2615 08:96F2: A0 02 00     	ldy	#$2
  2616 08:96F5: B7 1F        	lda	[<L33+deviceNode_1],Y
  2617 08:96F7: 85 1B        	sta	<L33+pdriver_1
  2618 08:96F9: A0 04 00     	ldy	#$4
  2619 08:96FC: B7 1F        	lda	[<L33+deviceNode_1],Y
  2620 08:96FE: 85 1D        	sta	<L33+pdriver_1+2
  2621                        ;    			if(pdriver)
  2622                        	.line	310
  2623                        ;    			{
  2624 08:9700: A5 1B        	lda	<L33+pdriver_1
  2625 08:9702: 05 1D        	ora	<L33+pdriver_1+2
  2626 08:9704: D0 03        	bne	L39
  2627 08:9706: 82 A1 00     	brl	L10022
  2628                        L39:
  2629                        	.line	311
  2630                        ;    				k_debug_pointer(
                    "k_create_dos_device:found:pdriver:",pdriver);
  2631                        	.line	312
  2632 08:9709: D4 1D        	pei	<L33+pdriver_1+2
  2633 08:970B: D4 1B        	pei	<L33+pdriver_1
  2634 08:970D: F4 xx xx     	pea	#^L15+95
  2635 08:9710: F4 xx xx     	pea	#<L15+95
  2636 08:9713: 22 xx xx xx  	jsl	~~k_debug_pointer
  2637                        ;
  2638                        ;    				if(pdriver->f_dr
                    iver_load)
  2639                        	.line	314
  Sat Jul 10 2021  1:15                                                Page 51


  2640                        ;    				{
  2641 08:9717: A0 51 00     	ldy	#$51
  2642 08:971A: B7 1B        	lda	[<L33+pdriver_1],Y
  2643 08:971C: A0 53 00     	ldy	#$53
  2644 08:971F: 17 1B        	ora	[<L33+pdriver_1],Y
  2645 08:9721: D0 03        	bne	L40
  2646 08:9723: 82 84 00     	brl	L10023
  2647                        L40:
  2648                        	.line	315
  2649                        ;    					pfxdosDe
                    vice->devdata = pdriver->driver_context;
  2650                        	.line	316
  2651 08:9726: A0 4D 00     	ldy	#$4d
  2652 08:9729: B7 1B        	lda	[<L33+pdriver_1],Y
  2653 08:972B: A0 02 00     	ldy	#$2
  2654 08:972E: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2655 08:9730: A0 4F 00     	ldy	#$4f
  2656 08:9733: B7 1B        	lda	[<L33+pdriver_1],Y
  2657 08:9735: A0 04 00     	ldy	#$4
  2658 08:9738: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2659                        ;
  2660                        ;    					pfxdosDe
                    vice->initialized = ((DEVICEDRIVER_LOAD)pdriver->f_driver_lo
                    ad)();
  2661                        	.line	318
  2662 08:973A: A0 53 00     	ldy	#$53
  2663 08:973D: B7 1B        	lda	[<L33+pdriver_1],Y
  2664 08:973F: AA           	tax
  2665 08:9740: A0 51 00     	ldy	#$51
  2666 08:9743: B7 1B        	lda	[<L33+pdriver_1],Y
  2667                        	xref	~~~lcal
  2668 08:9745: 22 xx xx xx  	jsl	~~~lcal
  2669 08:9749: E2 20        	sep	#$20
  2670                        	longa	off
  2671 08:974B: A0 01 00     	ldy	#$1
  2672 08:974E: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2673 08:9750: C2 20        	rep	#$20
  2674                        	longa	on
  2675                        ;    					if(pfxdo
                    sDevice->initialized)
  2676                        	.line	319
  2677                        ;    					{
  2678 08:9752: A0 01 00     	ldy	#$1
  2679 08:9755: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2680 08:9757: 29 FF 00     	and	#$ff
  2681 08:975A: D0 03        	bne	L41
  2682 08:975C: 82 38 00     	brl	L10024
  2683                        L41:
  2684                        	.line	320
  2685                        ;							
                    pfxdosDevice->pfInit   = NULL;
  2686                        	.line	321
  2687 08:975F: A9 00 00     	lda	#$0
  2688 08:9762: A0 BA 02     	ldy	#$2ba
  2689 08:9765: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2690 08:9767: A9 00 00     	lda	#$0
  2691 08:976A: A0 BC 02     	ldy	#$2bc
  2692 08:976D: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  Sat Jul 10 2021  1:15                                                Page 52


  2693                        ;							
                    pfxdosDevice->pfReader = (DOSSECTORREADER)pdriver->f_driver_
                    read;
  2694                        	.line	322
  2695 08:976F: A0 55 00     	ldy	#$55
  2696 08:9772: B7 1B        	lda	[<L33+pdriver_1],Y
  2697 08:9774: A0 C6 02     	ldy	#$2c6
  2698 08:9777: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2699 08:9779: A0 57 00     	ldy	#$57
  2700 08:977C: B7 1B        	lda	[<L33+pdriver_1],Y
  2701 08:977E: A0 C8 02     	ldy	#$2c8
  2702 08:9781: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2703                        ;							
                    pfxdosDevice->pfWriter = (DOSSECTORWRITER)pdriver->f_driver_
                    write;
  2704                        	.line	323
  2705 08:9783: A0 59 00     	ldy	#$59
  2706 08:9786: B7 1B        	lda	[<L33+pdriver_1],Y
  2707 08:9788: A0 CA 02     	ldy	#$2ca
  2708 08:978B: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2709 08:978D: A0 5B 00     	ldy	#$5b
  2710 08:9790: B7 1B        	lda	[<L33+pdriver_1],Y
  2711 08:9792: A0 CC 02     	ldy	#$2cc
  2712 08:9795: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2713                        ;    					}
  2714                        	.line	324
  2715                        ;
  2716                        ;    					k_debug_
                    integer("k_create_dos_device:found:pfxdosDevice->initialized
                    :",pfxdosDevice->initialized);
  2717                        L10024:
  2718                        	.line	326
  2719 08:9797: A0 01 00     	ldy	#$1
  2720 08:979A: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2721 08:979C: 29 FF 00     	and	#$ff
  2722 08:979F: 48           	pha
  2723 08:97A0: F4 xx xx     	pea	#^L15+130
  2724 08:97A3: F4 xx xx     	pea	#<L15+130
  2725 08:97A6: 22 xx xx xx  	jsl	~~k_debug_integer
  2726                        ;    				}
  2727                        	.line	327
  2728                        ;    				//pfxdosDevice->
                    pfInit(NULL);
  2729                        ;    			}
  2730                        L10023:
  2731                        	.line	329
  2732                        ;
  2733                        ;    		}
  2734                        L10022:
  2735                        	.line	331
  2736                        ;    		//pfxdosDevice->pfInit   = (DOSI
                    NITDEVICE)k_sd_dos_init;
  2737                        ;    		//pfxdosDevice->pfReader = (DOSS
                    ECTORREADER)k_read_sd_sector;
  2738                        ;    		break;
  2739                        L10021:
  2740                        	.line	334
  2741 08:97AA: 82 00 01     	brl	L10019
  Sat Jul 10 2021  1:15                                                Page 53


  2742                        ;
  2743                        ;    	case FXDOS_HDD:
  2744                        	.line	336
  2745                        L10025:
  2746                        ;    		deviceNode = k_nodelist_searchBy
                    Type(_k_dos_devicedrivers,DRIVER_TYPE_IDE);
  2747                        	.line	337
  2748 08:97AD: F4 08 00     	pea	#<$8
  2749 08:97B0: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  2750 08:97B3: 48           	pha
  2751 08:97B4: AD xx xx     	lda	|~~_k_dos_devicedrivers
  2752 08:97B7: 48           	pha
  2753 08:97B8: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  2754 08:97BC: 85 1F        	sta	<L33+deviceNode_1
  2755 08:97BE: 86 21        	stx	<L33+deviceNode_1+2
  2756                        ;    		if(deviceNode)
  2757                        	.line	338
  2758                        ;    		{
  2759 08:97C0: A5 1F        	lda	<L33+deviceNode_1
  2760 08:97C2: 05 21        	ora	<L33+deviceNode_1+2
  2761 08:97C4: D0 03        	bne	L42
  2762 08:97C6: 82 C6 00     	brl	L10026
  2763                        L42:
  2764                        	.line	339
  2765                        ;    			 k_debug_pointer("k_crea
                    te_dos_device:found:deviceNode:",deviceNode);
  2766                        	.line	340
  2767 08:97C9: D4 21        	pei	<L33+deviceNode_1+2
  2768 08:97CB: D4 1F        	pei	<L33+deviceNode_1
  2769 08:97CD: F4 xx xx     	pea	#^L15+183
  2770 08:97D0: F4 xx xx     	pea	#<L15+183
  2771 08:97D3: 22 xx xx xx  	jsl	~~k_debug_pointer
  2772                        ;
  2773                        ;    			pdriver = ((PFX_BLOCK_DE
                    VICE_DRIVER)(deviceNode->data));
  2774                        	.line	342
  2775 08:97D7: A0 02 00     	ldy	#$2
  2776 08:97DA: B7 1F        	lda	[<L33+deviceNode_1],Y
  2777 08:97DC: 85 1B        	sta	<L33+pdriver_1
  2778 08:97DE: A0 04 00     	ldy	#$4
  2779 08:97E1: B7 1F        	lda	[<L33+deviceNode_1],Y
  2780 08:97E3: 85 1D        	sta	<L33+pdriver_1+2
  2781                        ;    			if(pdriver)
  2782                        	.line	343
  2783                        ;    			{
  2784 08:97E5: A5 1B        	lda	<L33+pdriver_1
  2785 08:97E7: 05 1D        	ora	<L33+pdriver_1+2
  2786 08:97E9: D0 03        	bne	L43
  2787 08:97EB: 82 A1 00     	brl	L10027
  2788                        L43:
  2789                        	.line	344
  2790                        ;    				k_debug_pointer(
                    "k_create_dos_device:found:pdriver:",pdriver);
  2791                        	.line	345
  2792 08:97EE: D4 1D        	pei	<L33+pdriver_1+2
  2793 08:97F0: D4 1B        	pei	<L33+pdriver_1
  2794 08:97F2: F4 xx xx     	pea	#^L15+221
  2795 08:97F5: F4 xx xx     	pea	#<L15+221
  Sat Jul 10 2021  1:15                                                Page 54


  2796 08:97F8: 22 xx xx xx  	jsl	~~k_debug_pointer
  2797                        ;
  2798                        ;    				if(pdriver->f_dr
                    iver_load)
  2799                        	.line	347
  2800                        ;    				{
  2801 08:97FC: A0 51 00     	ldy	#$51
  2802 08:97FF: B7 1B        	lda	[<L33+pdriver_1],Y
  2803 08:9801: A0 53 00     	ldy	#$53
  2804 08:9804: 17 1B        	ora	[<L33+pdriver_1],Y
  2805 08:9806: D0 03        	bne	L44
  2806 08:9808: 82 84 00     	brl	L10028
  2807                        L44:
  2808                        	.line	348
  2809                        ;    					pfxdosDe
                    vice->devdata = pdriver->driver_context;
  2810                        	.line	349
  2811 08:980B: A0 4D 00     	ldy	#$4d
  2812 08:980E: B7 1B        	lda	[<L33+pdriver_1],Y
  2813 08:9810: A0 02 00     	ldy	#$2
  2814 08:9813: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2815 08:9815: A0 4F 00     	ldy	#$4f
  2816 08:9818: B7 1B        	lda	[<L33+pdriver_1],Y
  2817 08:981A: A0 04 00     	ldy	#$4
  2818 08:981D: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2819                        ;
  2820                        ;    					pfxdosDe
                    vice->initialized = ((DEVICEDRIVER_LOAD)pdriver->f_driver_lo
                    ad)();
  2821                        	.line	351
  2822 08:981F: A0 53 00     	ldy	#$53
  2823 08:9822: B7 1B        	lda	[<L33+pdriver_1],Y
  2824 08:9824: AA           	tax
  2825 08:9825: A0 51 00     	ldy	#$51
  2826 08:9828: B7 1B        	lda	[<L33+pdriver_1],Y
  2827                        	xref	~~~lcal
  2828 08:982A: 22 xx xx xx  	jsl	~~~lcal
  2829 08:982E: E2 20        	sep	#$20
  2830                        	longa	off
  2831 08:9830: A0 01 00     	ldy	#$1
  2832 08:9833: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2833 08:9835: C2 20        	rep	#$20
  2834                        	longa	on
  2835                        ;    					if(pfxdo
                    sDevice->initialized)
  2836                        	.line	352
  2837                        ;    					{
  2838 08:9837: A0 01 00     	ldy	#$1
  2839 08:983A: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2840 08:983C: 29 FF 00     	and	#$ff
  2841 08:983F: D0 03        	bne	L45
  2842 08:9841: 82 38 00     	brl	L10029
  2843                        L45:
  2844                        	.line	353
  2845                        ;							
                    pfxdosDevice->pfInit   = NULL;
  2846                        	.line	354
  2847 08:9844: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 55


  2848 08:9847: A0 BA 02     	ldy	#$2ba
  2849 08:984A: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2850 08:984C: A9 00 00     	lda	#$0
  2851 08:984F: A0 BC 02     	ldy	#$2bc
  2852 08:9852: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2853                        ;							
                    pfxdosDevice->pfReader = (DOSSECTORREADER)pdriver->f_driver_
                    read;
  2854                        	.line	355
  2855 08:9854: A0 55 00     	ldy	#$55
  2856 08:9857: B7 1B        	lda	[<L33+pdriver_1],Y
  2857 08:9859: A0 C6 02     	ldy	#$2c6
  2858 08:985C: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2859 08:985E: A0 57 00     	ldy	#$57
  2860 08:9861: B7 1B        	lda	[<L33+pdriver_1],Y
  2861 08:9863: A0 C8 02     	ldy	#$2c8
  2862 08:9866: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2863                        ;							
                    pfxdosDevice->pfWriter = (DOSSECTORWRITER)pdriver->f_driver_
                    write;
  2864                        	.line	356
  2865 08:9868: A0 59 00     	ldy	#$59
  2866 08:986B: B7 1B        	lda	[<L33+pdriver_1],Y
  2867 08:986D: A0 CA 02     	ldy	#$2ca
  2868 08:9870: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2869 08:9872: A0 5B 00     	ldy	#$5b
  2870 08:9875: B7 1B        	lda	[<L33+pdriver_1],Y
  2871 08:9877: A0 CC 02     	ldy	#$2cc
  2872 08:987A: 97 13        	sta	[<L33+pfxdosDevice_1],Y
  2873                        ;    					}
  2874                        	.line	357
  2875                        ;
  2876                        ;    					k_debug_
                    integer("k_create_dos_device:found:pfxdosDevice->initialized
                    :",pfxdosDevice->initialized);
  2877                        L10029:
  2878                        	.line	359
  2879 08:987C: A0 01 00     	ldy	#$1
  2880 08:987F: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2881 08:9881: 29 FF 00     	and	#$ff
  2882 08:9884: 48           	pha
  2883 08:9885: F4 xx xx     	pea	#^L15+256
  2884 08:9888: F4 xx xx     	pea	#<L15+256
  2885 08:988B: 22 xx xx xx  	jsl	~~k_debug_integer
  2886                        ;    				}
  2887                        	.line	360
  2888                        ;    				//pfxdosDevice->
                    pfInit(NULL);
  2889                        ;    			}
  2890                        L10028:
  2891                        	.line	362
  2892                        ;
  2893                        ;    		}
  2894                        L10027:
  2895                        	.line	364
  2896                        ;
  2897                        ;    		break;
  2898                        L10026:
  Sat Jul 10 2021  1:15                                                Page 56


  2899                        	.line	366
  2900 08:988F: 82 1B 00     	brl	L10019
  2901                        ;
  2902                        ;    	case FXDOS_FDD:
  2903                        	.line	368
  2904                        L10030:
  2905                        ;
  2906                        ;    		//pfxdosDevice->pfInit   = (DOSI
                    NITDEVICE)floppy_init;//k_fd_dos_init;
  2907                        ;    		//pfxdosDevice->pfReader = (DOSS
                    ECTORREADER)k_read_fd_sector;
  2908                        ;    		lba = 0L;
  2909                        	.line	372
  2910 08:9892: 64 23        	stz	<L33+lba_1
  2911 08:9894: 64 25        	stz	<L33+lba_1+2
  2912                        ;
  2913                        ;    		break;
  2914                        	.line	374
  2915 08:9896: 82 14 00     	brl	L10019
  2916                        ;
  2917                        ;		}
  2918                        	.line	376
  2919                        L10018:
  2920                        	xref	~~~swt
  2921 08:9899: 22 xx xx xx  	jsl	~~~swt
  2922 08:989D: 03 00        	dw	3
  2923 08:989F: 05 00        	dw	5
  2924 08:98A1: C7 96        	dw	L10020-1
  2925 08:98A3: 06 00        	dw	6
  2926 08:98A5: AC 97        	dw	L10025-1
  2927 08:98A7: 07 00        	dw	7
  2928 08:98A9: 91 98        	dw	L10030-1
  2929 08:98AB: AC 98        	dw	L10019-1
  2930                        L10019:
  2931                        ;
  2932                        ;    	k_debug_integer("k_create_dos_device siz
                    e:",sizeof(FXDOSDEVICE));
  2933                        	.line	378
  2934 08:98AD: F4 CE 02     	pea	#<$2ce
  2935 08:98B0: F4 xx xx     	pea	#^L15+309
  2936 08:98B3: F4 xx xx     	pea	#<L15+309
  2937 08:98B6: 22 xx xx xx  	jsl	~~k_debug_integer
  2938                        ;
  2939                        ;    	if(!pfxdosDevice->initialized && pfxdosD
                    evice->pfInit)
  2940                        	.line	380
  2941                        ;    		pfxdosDevice->pfInit();
  2942 08:98BA: A0 01 00     	ldy	#$1
  2943 08:98BD: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2944 08:98BF: 29 FF 00     	and	#$ff
  2945 08:98C2: F0 03        	beq	L46
  2946 08:98C4: 82 1E 00     	brl	L10031
  2947                        L46:
  2948 08:98C7: A0 BA 02     	ldy	#$2ba
  2949 08:98CA: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2950 08:98CC: A0 BC 02     	ldy	#$2bc
  2951 08:98CF: 17 13        	ora	[<L33+pfxdosDevice_1],Y
  2952 08:98D1: D0 03        	bne	L47
  Sat Jul 10 2021  1:15                                                Page 57


  2953 08:98D3: 82 0F 00     	brl	L10031
  2954                        L47:
  2955                        	.line	381
  2956 08:98D6: A0 BC 02     	ldy	#$2bc
  2957 08:98D9: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2958 08:98DB: AA           	tax
  2959 08:98DC: A0 BA 02     	ldy	#$2ba
  2960 08:98DF: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2961                        	xref	~~~lcal
  2962 08:98E1: 22 xx xx xx  	jsl	~~~lcal
  2963                        ;
  2964                        ;
  2965                        ;    	if(!pfxdosDevice->initialized)
  2966                        L10031:
  2967                        	.line	384
  2968                        ;    	{
  2969 08:98E5: A0 01 00     	ldy	#$1
  2970 08:98E8: B7 13        	lda	[<L33+pfxdosDevice_1],Y
  2971 08:98EA: 29 FF 00     	and	#$ff
  2972 08:98ED: F0 03        	beq	L48
  2973 08:98EF: 82 12 00     	brl	L10032
  2974                        L48:
  2975                        	.line	385
  2976                        ;    		k_mem_deallocate_heap(pfxdosDevi
                    ce);
  2977                        	.line	386
  2978 08:98F2: D4 15        	pei	<L33+pfxdosDevice_1+2
  2979 08:98F4: D4 13        	pei	<L33+pfxdosDevice_1
  2980 08:98F6: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  2981                        ;    		return NULL;
  2982                        	.line	387
  2983 08:98FA: A9 00 00     	lda	#$0
  2984 08:98FD: AA           	tax
  2985 08:98FE: A9 00 00     	lda	#$0
  2986 08:9901: 82 8B FD     	brl	L36
  2987                        ;    	}
  2988                        	.line	388
  2989                        ;
  2990                        ;		//_MSTR_CTRL[0] |= GABE_CTRL_SDC_LED;
  2991                        ;
  2992                        ;    	/*
  2993                        ;		errorCode = pfxdosDevice->pfReader(lba,s
                    ectorBuffer);
  2994                        ;		k_debug_byte_array("pfxdosDevice->pfRead
                    er:\r\n",sectorBuffer,512);
  2995                        ;
  2996                        ;		pBoot =  (PFATBOOTSECTOR)sectorBuffer;;
  2997                        ;
  2998                        ;		k_debug_integer("pBoot->sectors_per_clus
                    ter:",pBoot->sectors_per_cluster);
  2999                        ;		k_debug_integer("pBoot->root_entry_count
                    :",pBoot->root_entry_count);
  3000                        ;		k_debug_integer("pBoot->total_sectors_16
                    :",pBoot->total_sectors_16);
  3001                        ;		k_debug_integer("pBoot->sectors_per_fat:
                    ",pBoot->sectors_per_fat);
  3002                        ;		k_debug_integer("pBoot->sectors_per_trac
                    k:",pBoot->sectors_per_track);
  Sat Jul 10 2021  1:15                                                Page 58


  3003                        ;		k_debug_nstrings("pBoot->vol_name:",pBoo
                    t->vol_name,11);
  3004                        ;		k_debug_integer("pBoot->bytes_per_sector
                    :",pBoot->bytes_per_sector);
  3005                        ;		k_debug_hex("pBoot->fat_table_count:",pB
                    oot->fat_table_count);
  3006                        ;		k_debug_integer("pBoot->bytes_per_sector
                    :",pBoot->hidden_sector_count);
  3007                        ;
  3008                        ;
  3009                        ;		if(pBoot->total_sectors_16 == 2880)
  3010                        ;			isFAT12 = TRUE;
  3011                        ;		*/
  3012                        ;		/*
  3013                        ;		if(!isFAT12)
  3014                        ;		{
  3015                        ;			pfat32 =  (PFAT32EXT)(&sectorBuf
                    fer[36]);
  3016                        ;
  3017                        ;			k_debug_long("pfat32->table_size
                    _32:",pfat32->table_size_32);
  3018                        ;			k_debug_nstrings("pfat32->volume
                    _label:",pfat32->volume_label,11);
  3019                        ;
  3020                        ;			for(x=0;x<4;x++)
  3021                        ;			{
  3022                        ;				k_debug_integer("*** par
                    tition table:",x);
  3023                        ;
  3024                        ;				pPartTable = (PPARTITION
                    TABLE)&sectorBuffer[FAT_PARTITION_TABLE_1 + (0x10 * x)];
  3025                        ;
  3026                        ;				if(pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS30 ||
  3027                        ;				   pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS33 ||
  3028                        ;				   pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS70)
  3029                        ;				{
  3030                        ;					k_debug_hex("FAT
                    16 filesystem found from partition:", pPartTable->partition_
                    type);
  3031                        ;					partitionId = x;
  3032                        ;					break;
  3033                        ;				}
  3034                        ;				else
  3035                        ;				{
  3036                        ;					k_debug_hex("***
                     pPartTable->partition_type:",pPartTable->partition_type);
  3037                        ;				}
  3038                        ;			}
  3039                        ;
  3040                        ;
  3041                        ;			memcpy(&pfxdosDevice->partitionT
                    able,&sectorBuffer[FAT_PARTITION_TABLE_1 + (0x10 * partition
                    Id)],sizeof(PARTITIONTABLE));
  3042                        ;			k_debug_hex ("***fxdosDevice fir
                    st_byte:",pfxdosDevice->partitionTable.first_byte);
  Sat Jul 10 2021  1:15                                                Page 59


  3043                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs0:",pfxdosDevice->partitionTable.start_chs[0]);
  3044                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs1:",pfxdosDevice->partitionTable.start_chs[1]);
  3045                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs2:",pfxdosDevice->partitionTable.start_chs[2]);
  3046                        ;			k_debug_hex ("***fxdosDevice par
                    tition_type:",(INT)pfxdosDevice->partitionTable.partition_ty
                    pe);
  3047                        ;			k_debug_hex ("***fxdosDevice end
                    _chs0:",pfxdosDevice->partitionTable.end_chs[0]);
  3048                        ;			k_debug_hex ("***fxdosDevice end
                    _chs1:",pfxdosDevice->partitionTable.end_chs[1]);
  3049                        ;			k_debug_hex ("***fxdosDevice end
                    _chs2:",pfxdosDevice->partitionTable.end_chs[2]);
  3050                        ;			k_debug_long("***fxdosDevice sta
                    rt_sector:",pfxdosDevice->partitionTable.start_sector);
  3051                        ;			k_debug_long("***fxdosDevice len
                    gth_sectors:",pfxdosDevice->partitionTable.length_sectors);
  3052                        ;		}
  3053                        ;		else
  3054                        ;		{
  3055                        ;			memset(&pfxdosDevice->partitionT
                    able,0,sizeof(PARTITIONTABLE));
  3056                        ;			pPartTable->start_sector = 0;
  3057                        ;		}
  3058                        ;		*/
  3059                        ;
  3060                        ;    	/*
  3061                        ;		pfxdosDevice->bsOffset = (pPartTable->st
                    art_sector * FAT_PAGE_SIZE);
  3062                        ;
  3063                        ;		pfxdosDevice->errorCode = pfxdosDevice->
                    pfReader(pfxdosDevice->bsOffset,sectorBuffer);
  3064                        ;		if(!pfxdosDevice->errorCode)
  3065                        ;		{
  3066                        ;			memcpy(&pfxdosDevice->bootSector
                    ,sectorBuffer,sizeof(FATBOOTSECTOR));
  3067                        ;
  3068                        ;			k_debug_integer("***fxdosDevice 
                    bytes_per_sector:",(INT)pfxdosDevice->bootSector.bytes_per_s
                    ector);
  3069                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_cluster:",(INT)pfxdosDevice->bootSector.sectors_
                    per_cluster);
  3070                        ;			k_debug_integer("***fxdosDevice 
                    reserved_sector_count:",(INT)pfxdosDevice->bootSector.reserv
                    ed_sector_count);
  3071                        ;			k_debug_integer("***fxdosDevice 
                    table_count:",(INT)pfxdosDevice->bootSector.fat_table_count)
                    ;
  3072                        ;			k_debug_integer("***fxdosDevice 
                    root_entry_count:",(INT)pfxdosDevice->bootSector.root_entry_
                    count);
  3073                        ;			k_debug_integer("***fxdosDevice 
                    total_sectors_16:",(INT)pfxdosDevice->bootSector.total_secto
                    rs_16);
  3074                        ;			k_debug_integer("***fxdosDevice 
  Sat Jul 10 2021  1:15                                                Page 60


                    media_type:",(INT)pfxdosDevice->bootSector.media_type);
  3075                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_fat:",(INT)pfxdosDevice->bootSector.sectors_per_
                    fat);
  3076                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_track:",(INT)pfxdosDevice->bootSector.sectors_pe
                    r_track);
  3077                        ;			k_debug_integer("***fxdosDevice 
                    head_side_count:",(INT)pfxdosDevice->bootSector.head_side_co
                    unt);
  3078                        ;			k_debug_integer("***fxdosDevice 
                    hidden_sector_count:",(INT)pfxdosDevice->bootSector.hidden_s
                    ector_count);
  3079                        ;			k_debug_integer("***fxdosDevice 
                    total_sectors_32:",(INT)pfxdosDevice->bootSector.total_secto
                    rs_32);
  3080                        ;
  3081                        ;			strncpy(pfxdosDevice->volume_nam
                    e,pfxdosDevice->bootSector.vol_name,11);
  3082                        ;			//pfxdosDevice->volume_name[11] 
                    = 0;
  3083                        ;			k_debug_nstrings("***fxdosDevice
                     Volume Name:",pfxdosDevice->volume_name,11);
  3084                        ;
  3085                        ;			pfxdosDevice->root_entry_count =
                     pfxdosDevice->bootSector.root_entry_count;
  3086                        ;
  3087                        ;			pfxdosDevice->fatTableOffset = p
                    fxdosDevice->bsOffset + (pfxdosDevice->bootSector.bytes_per_
                    sector * pfxdosDevice->bootSector.reserved_sector_count);
  3088                        ;			pfxdosDevice->rootDirSectors = p
                    fxdosDevice->bsOffset + (((ULONG)pfxdosDevice->bootSector.re
                    served_sector_count + ((ULONG)pfxdosDevice->bootSector.secto
                    rs_per_fat * (ULONG)pfxdosDevice->bootSector.fat_table_count
                    )) * (ULONG)pfxdosDevice->bootSector.bytes_per_sector);
  3089                        ;			pfxdosDevice->sectors_per_cluste
                    r = (INT)pfxdosDevice->bootSector.sectors_per_cluster;
  3090                        ;
  3091                        ;			k_debug_long("***fxdosDevice fat
                    Table:",pfxdosDevice->fatTableOffset);
  3092                        ;
  3093                        ;
  3094                        ;
  3095                        ;			if(pfxdosDevice->pfReader(pfxdos
                    Device->fatTableOffset,sectorBuffer) == 0)
  3096                        ;			{
  3097                        ;				memcpy(&pfxdosDevice->fi
                    leAllocationTable,sectorBuffer,FAT_PAGE_SIZE);
  3098                        ;			}
  3099                        ;
  3100                        ;			k_debug_long("***fxdosDevice roo
                    t offset:",pfxdosDevice->rootDirSectors);
  3101                        ;			k_debug_long("***fxdosDevice roo
                    t sizeof(FAT16ENTRY):",sizeof(FAT16ENTRY));
  3102                        ;			k_debug_long("***fxdosDevice roo
                    t root_entry_count:",pfxdosDevice->root_entry_count);
  3103                        ;			k_debug_long("***fxdosDevice roo
                    t root_entry_count/sizeof(FAT16ENTRY):",pfxdosDevice->root_e
  Sat Jul 10 2021  1:15                                                Page 61


                    ntry_count/sizeof(FAT16ENTRY));
  3104                        ;
  3105                        ;
  3106                        ;			pfxdosDevice->rootEntriesPerPage
                     = pfxdosDevice->root_entry_count/sizeof(FAT16ENTRY);
  3107                        ;
  3108                        ;			pfxdosDevice->firstDataSector = 
                    pfxdosDevice->bootSector.reserved_sector_count + (pfxdosDevi
                    ce->bootSector.fat_table_count * 512) + pfxdosDevice->rootDi
                    rSectors + ( pfxdosDevice->root_entry_count * sizeof(FAT16EN
                    TRY));
  3109                        ;			k_debug_long("***fxdosDevice roo
                    t firstDataSector:",pfxdosDevice->firstDataSector);
  3110                        ;		}
  3111                        ;		*/
  3112                        ;    }
  3113                        L10032:
  3114                        	.line	512
  3115                        ;
  3116                        ;    k_debug_nstrings("***fxdosDevice ADD DEVICE:"
                    ,pdriver->designation,3);
  3117                        L10017:
  3118                        	.line	514
  3119 08:9904: F4 03 00     	pea	#<$3
  3120 08:9907: 18           	clc
  3121 08:9908: A9 41 00     	lda	#$41
  3122 08:990B: 65 1B        	adc	<L33+pdriver_1
  3123 08:990D: 85 01        	sta	<R0
  3124 08:990F: A9 00 00     	lda	#$0
  3125 08:9912: 65 1D        	adc	<L33+pdriver_1+2
  3126 08:9914: 85 03        	sta	<R0+2
  3127 08:9916: D4 03        	pei	<R0+2
  3128 08:9918: D4 01        	pei	<R0
  3129 08:991A: F4 xx xx     	pea	#^L15+335
  3130 08:991D: F4 xx xx     	pea	#<L15+335
  3131 08:9920: 22 xx xx xx  	jsl	~~k_debug_nstrings
  3132                        ;    k_nodelist_addtolist(_k_dos_deviceinstance,ty
                    pe,pdriver->designation,pfxdosDevice);
  3133                        	.line	515
  3134 08:9924: D4 15        	pei	<L33+pfxdosDevice_1+2
  3135 08:9926: D4 13        	pei	<L33+pfxdosDevice_1
  3136 08:9928: 18           	clc
  3137 08:9929: A9 41 00     	lda	#$41
  3138 08:992C: 65 1B        	adc	<L33+pdriver_1
  3139 08:992E: 85 01        	sta	<R0
  3140 08:9930: A9 00 00     	lda	#$0
  3141 08:9933: 65 1D        	adc	<L33+pdriver_1+2
  3142 08:9935: 85 03        	sta	<R0+2
  3143 08:9937: D4 03        	pei	<R0+2
  3144 08:9939: D4 01        	pei	<R0
  3145 08:993B: D4 2C        	pei	<L32+type_0
  3146 08:993D: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  3147 08:9940: 48           	pha
  3148 08:9941: AD xx xx     	lda	|~~_k_dos_deviceinstance
  3149 08:9944: 48           	pha
  3150 08:9945: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  3151                        ;
  3152                        ;    //GABE_MSTR_CTRL[0] = GABE_MSTR_CTRL[0] & (~G
  Sat Jul 10 2021  1:15                                                Page 62


                    ABE_CTRL_SDC_LED);
  3153                        ;
  3154                        ;	return pfxdosDevice;
  3155                        	.line	519
  3156 08:9949: A6 15        	ldx	<L33+pfxdosDevice_1+2
  3157 08:994B: A5 13        	lda	<L33+pfxdosDevice_1
  3158 08:994D: 82 3F FD     	brl	L36
  3159                        ;}
  3160                        	.line	520
  3161                        	.endblock	520
  3162             00000028   L32	equ	40
  3163             00000005   L33	equ	5
  3164 08:9950:              	ends
  3165                        	efunc
  3166                        	.endfunc	520,5,40
  3167                        	.line	520
  3168                        	data
  3169                        L15:
  3170 00:0096: 6B 5F 63 72  	db	$6B,$5F,$63,$72,$65,$61,$74,$65,$5F,$64,
                    $6F,$73,$5F,$64,$65
       00:009A: 65 61 74 65 
       00:009E: 5F 64 6F 73 
       00:00A2: 5F 64 65 
  3171 00:00A5: 76 69 63 65  	db	$76,$69,$63,$65,$3A,$00,$6B,$5F,$63,$72,
                    $65,$61,$74,$65,$5F
       00:00A9: 3A 00 6B 5F 
       00:00AD: 63 72 65 61 
       00:00B1: 74 65 5F 
  3172 00:00B4: 64 6F 73 5F  	db	$64,$6F,$73,$5F,$64,$65,$76,$69,$63,$65,
                    $3A,$46,$4F,$55,$4E
       00:00B8: 64 65 76 69 
       00:00BC: 63 65 3A 46 
       00:00C0: 4F 55 4E 
  3173 00:00C3: 44 20 45 58  	db	$44,$20,$45,$58,$49,$53,$54,$49,$4E,$47,
                    $3A,$00,$6B,$5F,$63
       00:00C7: 49 53 54 49 
       00:00CB: 4E 47 3A 00 
       00:00CF: 6B 5F 63 
  3174 00:00D2: 72 65 61 74  	db	$72,$65,$61,$74,$65,$5F,$64,$6F,$73,$5F,
                    $64,$65,$76,$69,$63
       00:00D6: 65 5F 64 6F 
       00:00DA: 73 5F 64 65 
       00:00DE: 76 69 63 
  3175 00:00E1: 65 3A 66 6F  	db	$65,$3A,$66,$6F,$75,$6E,$64,$3A,$64,$65,
                    $76,$69,$63,$65,$4E
       00:00E5: 75 6E 64 3A 
       00:00E9: 64 65 76 69 
       00:00ED: 63 65 4E 
  3176 00:00F0: 6F 64 65 3A  	db	$6F,$64,$65,$3A,$00,$6B,$5F,$63,$72,$65,
                    $61,$74,$65,$5F,$64
       00:00F4: 00 6B 5F 63 
       00:00F8: 72 65 61 74 
       00:00FC: 65 5F 64 
  3177 00:00FF: 6F 73 5F 64  	db	$6F,$73,$5F,$64,$65,$76,$69,$63,$65,$3A,
                    $66,$6F,$75,$6E,$64
       00:0103: 65 76 69 63 
       00:0107: 65 3A 66 6F 
       00:010B: 75 6E 64 
  Sat Jul 10 2021  1:15                                                Page 63


  3178 00:010E: 3A 70 64 72  	db	$3A,$70,$64,$72,$69,$76,$65,$72,$3A,$00,
                    $6B,$5F,$63,$72,$65
       00:0112: 69 76 65 72 
       00:0116: 3A 00 6B 5F 
       00:011A: 63 72 65 
  3179 00:011D: 61 74 65 5F  	db	$61,$74,$65,$5F,$64,$6F,$73,$5F,$64,$65,
                    $76,$69,$63,$65,$3A
       00:0121: 64 6F 73 5F 
       00:0125: 64 65 76 69 
       00:0129: 63 65 3A 
  3180 00:012C: 66 6F 75 6E  	db	$66,$6F,$75,$6E,$64,$3A,$70,$66,$78,$64,
                    $6F,$73,$44,$65,$76
       00:0130: 64 3A 70 66 
       00:0134: 78 64 6F 73 
       00:0138: 44 65 76 
  3181 00:013B: 69 63 65 2D  	db	$69,$63,$65,$2D,$3E,$69,$6E,$69,$74,$69,
                    $61,$6C,$69,$7A,$65
       00:013F: 3E 69 6E 69 
       00:0143: 74 69 61 6C 
       00:0147: 69 7A 65 
  3182 00:014A: 64 3A 00 6B  	db	$64,$3A,$00,$6B,$5F,$63,$72,$65,$61,$74,
                    $65,$5F,$64,$6F,$73
       00:014E: 5F 63 72 65 
       00:0152: 61 74 65 5F 
       00:0156: 64 6F 73 
  3183 00:0159: 5F 64 65 76  	db	$5F,$64,$65,$76,$69,$63,$65,$3A,$66,$6F,
                    $75,$6E,$64,$3A,$64
       00:015D: 69 63 65 3A 
       00:0161: 66 6F 75 6E 
       00:0165: 64 3A 64 
  3184 00:0168: 65 76 69 63  	db	$65,$76,$69,$63,$65,$4E,$6F,$64,$65,$3A,
                    $00,$6B,$5F,$63,$72
       00:016C: 65 4E 6F 64 
       00:0170: 65 3A 00 6B 
       00:0174: 5F 63 72 
  3185 00:0177: 65 61 74 65  	db	$65,$61,$74,$65,$5F,$64,$6F,$73,$5F,$64,
                    $65,$76,$69,$63,$65
       00:017B: 5F 64 6F 73 
       00:017F: 5F 64 65 76 
       00:0183: 69 63 65 
  3186 00:0186: 3A 66 6F 75  	db	$3A,$66,$6F,$75,$6E,$64,$3A,$70,$64,$72,
                    $69,$76,$65,$72,$3A
       00:018A: 6E 64 3A 70 
       00:018E: 64 72 69 76 
       00:0192: 65 72 3A 
  3187 00:0195: 00 6B 5F 63  	db	$00,$6B,$5F,$63,$72,$65,$61,$74,$65,$5F,
                    $64,$6F,$73,$5F,$64
       00:0199: 72 65 61 74 
       00:019D: 65 5F 64 6F 
       00:01A1: 73 5F 64 
  3188 00:01A4: 65 76 69 63  	db	$65,$76,$69,$63,$65,$3A,$66,$6F,$75,$6E,
                    $64,$3A,$70,$66,$78
       00:01A8: 65 3A 66 6F 
       00:01AC: 75 6E 64 3A 
       00:01B0: 70 66 78 
  3189 00:01B3: 64 6F 73 44  	db	$64,$6F,$73,$44,$65,$76,$69,$63,$65,$2D,
                    $3E,$69,$6E,$69,$74
       00:01B7: 65 76 69 63 
  Sat Jul 10 2021  1:15                                                Page 64


       00:01BB: 65 2D 3E 69 
       00:01BF: 6E 69 74 
  3190 00:01C2: 69 61 6C 69  	db	$69,$61,$6C,$69,$7A,$65,$64,$3A,$00,$6B,
                    $5F,$63,$72,$65,$61
       00:01C6: 7A 65 64 3A 
       00:01CA: 00 6B 5F 63 
       00:01CE: 72 65 61 
  3191 00:01D1: 74 65 5F 64  	db	$74,$65,$5F,$64,$6F,$73,$5F,$64,$65,$76,
                    $69,$63,$65,$20,$73
       00:01D5: 6F 73 5F 64 
       00:01D9: 65 76 69 63 
       00:01DD: 65 20 73 
  3192 00:01E0: 69 7A 65 3A  	db	$69,$7A,$65,$3A,$00,$2A,$2A,$2A,$66,$78,
                    $64,$6F,$73,$44,$65
       00:01E4: 00 2A 2A 2A 
       00:01E8: 66 78 64 6F 
       00:01EC: 73 44 65 
  3193 00:01EF: 76 69 63 65  	db	$76,$69,$63,$65,$20,$41,$44,$44,$20,$44,
                    $45,$56,$49,$43,$45
       00:01F3: 20 41 44 44 
       00:01F7: 20 44 45 56 
       00:01FB: 49 43 45 
  3194 00:01FE: 3A 00        	db	$3A,$00
  3195 00:0200:              	ends
  3196                        ;
  3197                        ;PFXNODELIST k_read_dos_directory(PFXDOSDEVICE pfx
                    dosDevice)
  3198                        ;{
  3199                        	.line	522
  3200                        	.line	523
  3201                        	FXDOS
  3202                        	xdef	~~k_read_dos_directory
  3203                        	func
  3204                        	.function	523
  3205                        ~~k_read_dos_directory:
  3206                        	longa	on
  3207                        	longi	on
  3208 08:9950: 3B           	tsc
  3209 08:9951: 38           	sec
  3210 08:9952: E9 00 00     	sbc	#L50
  3211 08:9955: 1B           	tcs
  3212 08:9956: 0B           	phd
  3213 08:9957: 5B           	tcd
  3214             00000004   pfxdosDevice_0	set	4
  3215                        	.block	523
  3216                        ;	return NULL;
  3217                        	.sym	pfxdosDevice,4,138,6,32,122
  3218                        	.line	524
  3219 08:9958: A9 00 00     	lda	#$0
  3220 08:995B: AA           	tax
  3221 08:995C: A9 00 00     	lda	#$0
  3222                        L53:
  3223 08:995F: A8           	tay
  3224 08:9960: A5 02        	lda	<L50+2
  3225 08:9962: 85 06        	sta	<L50+2+4
  3226 08:9964: A5 01        	lda	<L50+1
  3227 08:9966: 85 05        	sta	<L50+1+4
  3228 08:9968: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 65


  3229 08:9969: 3B           	tsc
  3230 08:996A: 18           	clc
  3231 08:996B: 69 04 00     	adc	#L50+4
  3232 08:996E: 1B           	tcs
  3233 08:996F: 98           	tya
  3234 08:9970: 6B           	rtl
  3235                        ;}
  3236                        	.line	525
  3237                        	.endblock	525
  3238             00000000   L50	equ	0
  3239             00000001   L51	equ	1
  3240 08:9971:              	ends
  3241                        	efunc
  3242                        	.endfunc	525,1,0
  3243                        	.line	525
  3244                        ;/*
  3245                        ;LPCHAR _k_dos_alloc_filename(LPCHAR filename11)
  3246                        ;{
  3247                        ;	UINT index = 0;
  3248                        ;	//UINT p = 0;
  3249                        ;	//UINT dot = 0;
  3250                        ;	LPCHAR lpName = NULL;
  3251                        ;	CHAR ftmp[4] = {0,0,0,0};
  3252                        ;
  3253                        ;	//k_debug_string("_k_dos_alloc_filename:enter\r\
                    n");
  3254                        ;
  3255                        ;	lpName = (LPCHAR)k_mem_allocate_heap(16);
  3256                        ;	if(lpName!=NULL)
  3257                        ;	{
  3258                        ;		//k_debug_string("_k_dos_alloc_filename:
                    copy\r\n");
  3259                        ;		//memset(lpName,0,16);
  3260                        ;		//memcpy(lpName,filename11,8);
  3261                        ;		for(index=0;index<16;index++)
  3262                        ;					lpName[index] = 
                    0;
  3263                        ;
  3264                        ;		for(index=0;index<8;index++)
  3265                        ;			lpName[index] = filename11[index
                    ];
  3266                        ;
  3267                        ;
  3268                        ;		lpName = k_string_rtrim(lpName);
  3269                        ;		if(filename11[8]!=' ')
  3270                        ;		{
  3271                        ;			strcat(lpName,".");
  3272                        ;
  3273                        ;			for(index=0;index<3;index++)
  3274                        ;				ftmp[index] = filename11
                    [index + 8];
  3275                        ;
  3276                        ;			strcat(lpName,ftmp);
  3277                        ;		}
  3278                        ;
  3279                        ;		//k_debug_string("_k_ds_alloc_filename:"
                    );
  3280                        ;		//k_debug_string(lpName);
  Sat Jul 10 2021  1:15                                                Page 66


  3281                        ;		//k_debug_string("\r\n");
  3282                        ;	}
  3283                        ;
  3284                        ;	return lpName;
  3285                        ;}
  3286                        ;
  3287                        ;
  3288                        ;
  3289                        ;VOID  k_dos_dealloc_filelist(PFXNODE plist)
  3290                        ;{
  3291                        ;	PFXNODE p   = plist;
  3292                        ;	PFXNODE tmp = NULL;
  3293                        ;
  3294                        ;	while(p)
  3295                        ;	{
  3296                        ;		tmp = p->next;
  3297                        ;
  3298                        ;		k_mem_deallocate_heap(((PFILEINFO)p->dat
                    a)->pFilename);
  3299                        ;		k_mem_deallocate_heap(p->data);
  3300                        ;		k_mem_deallocate_heap(p);
  3301                        ;
  3302                        ;		p = tmp;
  3303                        ;	}
  3304                        ;}
  3305                        ;
  3306                        ;PFILEINFO _k_dos_alloc_fileinfo(FX_FAT_DIR_INFO F
                    AR *direntry)
  3307                        ;{
  3308                        ;	PFILEINFO pfi = NULL;
  3309                        ;
  3310                        ;	//k_debug_string("_k_dos_alloc_fileinfo:enter\r\
                    n");
  3311                        ;
  3312                        ;	pfi = k_mem_allocate_heap(sizeof(FILEINFO));
  3313                        ;	if(pfi!=NULL)
  3314                        ;	{
  3315                        ;		pfi->type  		 = direntry->DIR
                    _Attr;
  3316                        ;		pfi->lSize 		 = direntry->DIR
                    _FileSize;
  3317                        ;		pfi->lchangeDate = direntry->DIR_LstAccD
                    ate;
  3318                        ;		pfi->lcreateDate = direntry->DIR_CrtDate
                    ;
  3319                        ;		pfi->pFilename   = _k_dos_alloc_filename
                    (direntry->DIR_Name);
  3320                        ;	}
  3321                        ;
  3322                        ;	return pfi;
  3323                        ;}
  3324                        ;
  3325                        ;
  3326                        ;BOOL k_dos_foreach_file(LPVOID ctx,LPVOID pdata)
  3327                        ;{
  3328                        ;	BOOL bBreak = FALSE;
  3329                        ;
  3330                        ;	PFAT16ENTRYLONG entry = (PFAT16ENTRYLONG)pdata;
  Sat Jul 10 2021  1:15                                                Page 67


  3331                        ;	if(pdata)
  3332                        ;	{
  3333                        ;		if(entry->plongfileName && ctx)
  3334                        ;		{
  3335                        ;			//k_debug_strings("k_dos_foreach
                    _file:",entry->plongfileName);
  3336                        ;			//k_debug_strings("k_dos_foreach
                    _file compare:",(LPSTR)ctx);
  3337                        ;
  3338                        ;			bBreak = (strcmp(ctx,entry->plon
                    gfileName) == 0);
  3339                        ;
  3340                        ;			//k_debug_integer("k_dos_foreach
                    _file compare:",bBreak);
  3341                        ;		}
  3342                        ;	}
  3343                        ;
  3344                        ;	return bBreak;
  3345                        ;}
  3346                        ;
  3347                        ;LPSTR k_dos_alloc_short_name(PFAT16ENTRYLONG entr
                    y)
  3348                        ;{
  3349                        ;	int i = 0;
  3350                        ;	// 01234567.901N
  3351                        ;	entry->plongfileName = k_mem_allocate_heap(14);
  3352                        ;	memset(entry->plongfileName,0,14);
  3353                        ;
  3354                        ;
  3355                        ;	memcpy(entry->plongfileName,entry->filename,8);
  3356                        ;	for(i=0;i<8;i++)
  3357                        ;	{
  3358                        ;		if(entry->plongfileName[i] == ' ')
  3359                        ;			break;
  3360                        ;	}
  3361                        ;	//k_debug_strings("k_dos_alloc_short_name:filena
                    me:",entry->plongfileName);
  3362                        ;	//k_debug_integer("k_dos_alloc_short_name:i:",i)
                    ;
  3363                        ;
  3364                        ;	if(entry->ext[0]!=' ')
  3365                        ;	{
  3366                        ;		entry->plongfileName[i] = '.';
  3367                        ;		memcpy(&(entry->plongfileName[i+1]),entr
                    y->ext,3);
  3368                        ;		for(i=0;i<14;i++)
  3369                        ;		{
  3370                        ;			if(entry->plongfileName[i] == ' 
                    ')
  3371                        ;				entry->plongfileName[i] 
                    = 0;
  3372                        ;		}
  3373                        ;	}
  3374                        ;	//entry->plongfileName[8] = '.';
  3375                        ;	//entry->plongfileName[12] = 0;
  3376                        ;
  3377                        ;	//k_debug_strings("k_dos_alloc_short_name:",entr
                    y->plongfileName);
  Sat Jul 10 2021  1:15                                                Page 68


  3378                        ;
  3379                        ;	return entry->plongfileName;
  3380                        ;}
  3381                        ;
  3382                        ;ULONG k_dos_get_name(PFAT16ENTRYLONG entry,LPCHAR
                     pbuffer)
  3383                        ;{
  3384                        ;	ULONG fileOffset = 0L;
  3385                        ;
  3386                        ;	ULONG RootDirSectors;
  3387                        ;	ULONG Cluster2SectorNumber;
  3388                        ;	ULONG ClusterSectorNumber;
  3389                        ;	ULONG ClusterByteNumber = 0;
  3390                        ;
  3391                        ;
  3392                        ;	LFN* plfn = NULL;
  3393                        ;
  3394                        ;	CHAR mbsBuffer[15];
  3395                        ;
  3396                        ;
  3397                        ;	if(!pbuffer)
  3398                        ;		pbuffer = mbsBuffer;
  3399                        ;
  3400                        ;    switch(entry->filename[0])
  3401                        ;	{
  3402                        ;    case 0x00:
  3403                        ;    	//k_debug_string("Unused\r\n");
  3404                        ;        return 0; // unused entry
  3405                        ;    case 0xE5:
  3406                        ;
  3407                        ;        return 0;
  3408                        ;    case 0x05:
  3409                        ;    	//k_debug_string("File 0x05:");
  3410                        ;    	//k_debug_nstring(entry->filename+1,7);
  3411                        ;    	//k_debug_nstring(entry->ext,3);
  3412                        ;    	//k_debug_string("\r\n");
  3413                        ;        //printf("File starting with 0xE5: [%c%.7
                    s.%.3s]\n", 0xE5, entry->filename+1, entry->ext);
  3414                        ;        break;
  3415                        ;    case 0x2E:
  3416                        ;    	//k_debug_string("DIR:");
  3417                        ;    	//k_debug_nstring(entry->filename+1,8);
  3418                        ;    	//k_debug_nstring(entry->ext,3);
  3419                        ;    	//k_debug_string("\r\n");
  3420                        ;        //printf("Directory: [%.8s.%.3s]\n", entr
                    y->filename, entry->ext);
  3421                        ;    	k_dos_alloc_short_name(entry);
  3422                        ;        break;
  3423                        ;    default:
  3424                        ;    	if(entry->attributes == 0x10)
  3425                        ;    	{
  3426                        ;			k_debug_string("DIRECTORY:");
  3427                        ;			k_debug_nstring(entry->filename,
                    8);
  3428                        ;			k_debug_nstring(entry->ext,3);
  3429                        ;			k_debug_string("\r\n");
  3430                        ;
  3431                        ;			k_dos_alloc_short_name(entry);
  Sat Jul 10 2021  1:15                                                Page 69


  3432                        ;
  3433                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  3434                        ;
  3435                        ;    	}
  3436                        ;    	else if(entry->attributes == 0x08)
  3437                        ;		{
  3438                        ;			k_debug_string("VOLUME NAME:");
  3439                        ;			k_debug_nstring(entry->filename,
                    8);
  3440                        ;			k_debug_nstring(entry->ext,3);
  3441                        ;			k_debug_string("\r\n");
  3442                        ;
  3443                        ;			k_dos_alloc_short_name(entry);
  3444                        ;
  3445                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  3446                        ;
  3447                        ;		}
  3448                        ;    	else if(entry->attributes == 0x0F)
  3449                        ;		{
  3450                        ;			k_debug_string("LONG NAME:");
  3451                        ;			//k_debug_nstring(entry->filenam
                    e,8);
  3452                        ;			//k_debug_nstring(entry->ext,3);
  3453                        ;
  3454                        ;			plfn = (LFN*)entry;
  3455                        ;
  3456                        ;			//k_debug_byte_array("LONG BYTES
                    :",(BYTE FAR *)plfn,32);
  3457                        ;
  3458                        ;
  3459                        ;			if(plfn->sequenceNo & 0x40)
  3460                        ;			{
  3461                        ;				entry->plongfileName = (
                    LPVOID)0xffffffff;
  3462                        ;				longnamecount = (plfn->s
                    equenceNo - 0x41);
  3463                        ;				//k_debug_integer("longn
                    amecount:",longnamecount);
  3464                        ;				k_debug_string("SEQ:0x40
                    ");
  3465                        ;
  3466                        ;				memset(longnameBuffer,0,
                    255);
  3467                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13]     ,k_wcstombs(plfn->fileName_Part1,mbsB
                    uffer,5),5);
  3468                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 5] ,k_wcstombs(plfn->fileName_Part2,mbsB
                    uffer,6),6);
  3469                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 11],k_wcstombs(plfn->fileName_Part3,mbsB
                    uffer,2),2);
  3470                        ;			}
  3471                        ;			else
  3472                        ;			{
  3473                        ;				longnamecount = plfn->se
  Sat Jul 10 2021  1:15                                                Page 70


                    quenceNo - 1 ;
  3474                        ;				//k_debug_integer("longn
                    amecount:",longnamecount);
  3475                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13]     ,k_wcstombs(plfn->fileName_Part1,mbsB
                    uffer,5),5);
  3476                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 5] ,k_wcstombs(plfn->fileName_Part2,mbsB
                    uffer,6),6);
  3477                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 11],k_wcstombs(plfn->fileName_Part3,mbsB
                    uffer,2),2);
  3478                        ;
  3479                        ;				if(plfn->sequenceNo == 1
                    )
  3480                        ;				{
  3481                        ;					//k_debug_string
                    ("Unicodename:");
  3482                        ;
  3483                        ;					entry->plongfile
                    Name = k_mem_allocate_heap(strlen(longnameBuffer) + 1);
  3484                        ;					strcpy(entry->pl
                    ongfileName,(LPCSTR)longnameBuffer);
  3485                        ;
  3486                        ;					k_debug_string(e
                    ntry->plongfileName);
  3487                        ;				}
  3488                        ;			}
  3489                        ;
  3490                        ;			k_debug_string("\r\n");
  3491                        ;		}
  3492                        ;    	else
  3493                        ;    	{
  3494                        ;    		if(k_user_IsOSDebug())
  3495                        ;    		{
  3496                        ;				k_debug_string("SHORT NA
                    ME:");
  3497                        ;				k_debug_nstring(entry->f
                    ilename,8);
  3498                        ;				k_debug_nstring(entry->e
                    xt,3);
  3499                        ;				k_debug_long(" SIZE:",en
                    try->file_size);
  3500                        ;    		}
  3501                        ;			//k_debug_hex("\tAttributes:",en
                    try->attributes);
  3502                        ;			//k_debug_integer("\tStart Clust
                    er:",entry->starting_cluster);
  3503                        ;			k_dos_alloc_short_name(entry);
  3504                        ;
  3505                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  3506                        ;
  3507                        ;			ClusterByteNumber = getClusterLo
                    cationByIndex(entry->starting_cluster);
  3508                        ;    	}
  3509                        ;    }
  3510                        ;
  Sat Jul 10 2021  1:15                                                Page 71


  3511                        ;    return ClusterByteNumber;
  3512                        ;}
  3513                        ;
  3514                        ;void k_dos_deallocate_long_entry(LPCSTR name,LPVO
                    ID pdata)
  3515                        ;{
  3516                        ;	PFAT16ENTRYLONG entry = (PFAT16ENTRYLONG)pdata;
  3517                        ;
  3518                        ;	//k_debug_strings("k_dos_deallocate_long_entry n
                    ame:",(LPSTR)name);
  3519                        ;
  3520                        ;	if(entry)
  3521                        ;	{
  3522                        ;		//k_debug_pointer("k_dos_deallocate_long
                    _entry ptr:",(LPSTR)entry->plongfileName);
  3523                        ;		if(entry->plongfileName)
  3524                        ;			k_mem_deallocate_heap(entry->plo
                    ngfileName);
  3525                        ;
  3526                        ;		k_mem_deallocate_heap(entry);
  3527                        ;	}
  3528                        ;
  3529                        ;	//k_debug_string("k_dos_deallocate_long_exit\r\n
                    ");
  3530                        ;}
  3531                        ;
  3532                        ;UINT k_dos_read_file(PFXDOSDEVICE pfxdosDevice,LP
                    CSTR fileName)
  3533                        ;{
  3534                        ;	UINT fileSize = 0;
  3535                        ;	ULONG next = 0;
  3536                        ;	UINT pageSize = 0;
  3537                        ;	PFXNODELIST fileList = NULL;
  3538                        ;	PFXNODE file = NULL;
  3539                        ;	PBYTE buffer = NULL;
  3540                        ;
  3541                        ;	PFAT16ENTRYLONG pentry = NULL;
  3542                        ;
  3543                        ;
  3544                        ;	fileList = k_read_dos_directory(pfxdosDevice);
  3545                        ;	if(fileList)
  3546                        ;	{
  3547                        ;
  3548                        ;		file = k_nodelist_foreach_until_listdata
                    (fileList,(LPVOID)fileName,k_dos_foreach_file);
  3549                        ;		if(file)
  3550                        ;		{
  3551                        ;			pentry = ((PFAT16ENTRYLONG)file-
                    >data);
  3552                        ;
  3553                        ;			k_debug_strings("k_dos_read_file
                     MATCH:file:",pentry->plongfileName);
  3554                        ;			fileSize = pentry->file_size;
  3555                        ;
  3556                        ;			pageSize = 512 * (fileSize/512 +
                     1);
  3557                        ;			buffer = k_mem_allocate_heap(pag
                    eSize);
  Sat Jul 10 2021  1:15                                                Page 72


  3558                        ;
  3559                        ;			k_debug_integer("pentry->startin
                    g_cluster:",pentry->starting_cluster);
  3560                        ;
  3561                        ;			next = pfxdosDevice->fileAllocat
                    ionTable[pentry->starting_cluster];
  3562                        ;
  3563                        ;			k_debug_integer("pentry->next:",
                    next);
  3564                        ;			//k_debug_integer("pfxdosDevice-
                    >fileAllocationTable[next]:",pfxdosDevice->fileAllocationTab
                    le[next]);
  3565                        ;
  3566                        ;			while(next!=65528L && next!=0L &
                    & next!=65535L)
  3567                        ;			{
  3568                        ;
  3569                        ;				k_debug_integer("k_dos_r
                    ead_file:next1:",next);
  3570                        ;
  3571                        ;				if(next!=65528L && next!
                    =0L && next!=65535L)
  3572                        ;				{
  3573                        ;					k_debug_integer(
                    "k_dos_read_file:pageSize:",pageSize);
  3574                        ;
  3575                        ;
  3576                        ;					//readClusterToM
                    emory(getClusterLocationByIndex(next) + pfxdosDevice->bsOffs
                    et,pfxdosDevice->sectors_per_cluster,buffer,pentry->file_siz
                    e);
  3577                        ;					//readSDSector(o
                    ffset + (pfxdosDevice->sectors_per_cluster * 1) + read,buffe
                    r);
  3578                        ;
  3579                        ;					//k_debug_long("
                    k_dos_read_file:getClusterLocationByIndex:0x210000:",0x21000
                    0);
  3580                        ;
  3581                        ;
  3582                        ;					k_debug_long("k_
                    dos_read_file:getDeviceClusterLocationByIndex1:",getDeviceCl
                    usterLocationByIndex(pfxdosDevice,next));
  3583                        ;					k_debug_long("k_
                    dos_read_file:getDeviceClusterLocationByIndex2:",getDeviceCl
                    usterLocationByIndex(pfxdosDevice,next) + pfxdosDevice->bsOf
                    fset);
  3584                        ;
  3585                        ;					//k_debug_long("
                    k_dos_read_file:getClusterLocationByIndex3:",getClusterLocat
                    ionByIndex(next) + pfxdosDevice->bsOffset);
  3586                        ;
  3587                        ;
  3588                        ;					//pfxdosDevice->
                    pfReader((getClusterLocationByIndex(next)+ pfxdosDevice->bsO
                    ffset) * 512,buffer);
  3589                        ;					//pfxdosDevice->
                    pfReader(getDeviceClusterLocationByIndex(pfxdosDevice,next) 
  Sat Jul 10 2021  1:15                                                Page 73


                    / 512 ,buffer);
  3590                        ;
  3591                        ;					pfxdosDevice->pf
                    Reader(pfxdosDevice->firstDataSector + (next + pfxdosDevice-
                    >sectors_per_cluster) ,buffer);
  3592                        ;
  3593                        ;
  3594                        ;					k_debug_byte_arr
                    ay("k_dos_read_file:buffer:\r\n",buffer,512);
  3595                        ;
  3596                        ;					next = pfxdosDev
                    ice->fileAllocationTable[next];
  3597                        ;
  3598                        ;					k_debug_integer(
                    "k_dos_read_file:next2:",next);
  3599                        ;					k_debug_long("k_
                    dos_read_file:next512:",next * 512);
  3600                        ;				}
  3601                        ;			}
  3602                        ;
  3603                        ;			k_mem_deallocate_heap(buffer);
  3604                        ;		}
  3605                        ;
  3606                        ;		k_nodelist_deallocate_list(fileList);
  3607                        ;	}
  3608                        ;
  3609                        ;
  3610                        ;	k_debug_integer("k_dos_read_file exit:fileSize:"
                    ,fileSize);
  3611                        ;
  3612                        ;	return fileSize;
  3613                        ;}
  3614                        ;
  3615                        ;PFXNODELIST k_read_dos_directory(PFXDOSDEVICE pfx
                    dosDevice)
  3616                        ;{
  3617                        ;	ULONG x = 0;
  3618                        ;	ULONG i = 0;
  3619                        ;	ULONG check = 0L;
  3620                        ;	ULONG fileOffset;
  3621                        ;	//PFAT16ENTRY     pentry     = NULL;
  3622                        ;	PFAT16ENTRYLONG  pentrylong = NULL;
  3623                        ;
  3624                        ;	PFXNODELIST plist   = NULL;
  3625                        ;
  3626                        ;	unsigned long rootDirSectors = pfxdosDevice->roo
                    tDirSectors;
  3627                        ;
  3628                        ;	k_debug_nstrings("k_read_dos_directory volume:",
                    pfxdosDevice->root_volume_name,11);
  3629                        ;
  3630                        ;	if(pfxdosDevice->initialized)
  3631                        ;	{
  3632                        ;		plist = k_nodelist_allocate_list("curren
                    tDirectory",k_dos_deallocate_long_entry);
  3633                        ;		if(plist)
  3634                        ;		{
  3635                        ;			for(i=0; i<pfxdosDevice->rootEnt
  Sat Jul 10 2021  1:15                                                Page 74


                    riesPerPage; i++)
  3636                        ;			{
  3637                        ;				if(pfxdosDevice->pfReade
                    r(rootDirSectors,sectorBuffer) == 0)
  3638                        ;				{
  3639                        ;					for(x=0; x<pfxdo
                    sDevice->rootEntriesPerPage; x++)
  3640                        ;					{
  3641                        ;						pentrylo
                    ng = (PFAT16ENTRYLONG)k_mem_allocate_heap(sizeof(FAT16ENTRYL
                    ONG));
  3642                        ;						if(pentr
                    ylong)
  3643                        ;						{
  3644                        ;							
                    memset(pentrylong,0,sizeof(FAT16ENTRYLONG));
  3645                        ;							
                    memcpy(pentrylong,(PFAT16ENTRY)&sectorBuffer[x * sizeof(FAT1
                    6ENTRY)],sizeof(FAT16ENTRY));
  3646                        ;							
                    pentrylong->plongfileName = NULL;
  3647                        ;
  3648                        ;							
                    check = k_dos_get_name(pentrylong,NULL);
  3649                        ;
  3650                        ;							
                    if(check > 0 && k_user_IsOSDebug())
  3651                        ;							
                    {
  3652                        ;							
                    	k_debug_long("k_dos_get_name check:",check);
  3653                        ;							
                    	//fileOffset = ((pentrylong->starting_cluster - 2) * 16)
                     + (8 + (2 * 240)  + ( ((512 * 32) + (512 - 1)) / 512 ));
  3654                        ;							
                    	//k_debug_long("fileOffset:",fileOffset);
  3655                        ;							
                    }
  3656                        ;							
                    //print_file_info((PFAT16ENTRY)pentrylong);
  3657                        ;
  3658                        ;							
                    if(pentrylong->plongfileName && pentrylong->plongfileName!=(
                    LPSTR)0xffffffff)
  3659                        ;							
                    {
  3660                        ;							
                    	k_nodelist_addtolist(plist,PFXNODE_FILE_PATH_TYPE,pentry
                    long->plongfileName,pentrylong);
  3661                        ;							
                    	//k_debug_strings("k_read_dos_directory dealloc pentrylo
                    ng1:",pentrylong);
  3662                        ;							
                    	//k_debug_pointer("k_read_dos_directory dealloc pentrylo
                    ng1:",pentrylong);
  3663                        ;							
                    	//k_mem_deallocate_heap(pentrylong->plongfileName);
  3664                        ;							
  Sat Jul 10 2021  1:15                                                Page 75


                    	//pentrylong->plongfileName = NULL;
  3665                        ;							
                    	//k_mem_deallocate_heap(pentrylong);
  3666                        ;							
                    }
  3667                        ;							
                    else
  3668                        ;							
                    {
  3669                        ;							
                    	//k_debug_pointer("k_read_dos_directory dealloc pentrylo
                    ng2:",pentrylong);
  3670                        ;							
                    	k_mem_deallocate_heap(pentrylong);
  3671                        ;							
                    }
  3672                        ;						}
  3673                        ;					}
  3674                        ;				}
  3675                        ;				rootDirSectors+=512;
  3676                        ;			}
  3677                        ;		}
  3678                        ;	}
  3679                        ;
  3680                        ;
  3681                        ;
  3682                        ;	return plist;
  3683                        ;}
  3684                        ;
  3685                        ;ULONG getDeviceClusterLocationByIndex(PFXDOSDEVIC
                    E pfxdosDevice,ULONG starting_cluster)
  3686                        ;{
  3687                        ;	ULONG rootDirSectors = 0L;
  3688                        ;	ULONG cluster2SectorNumber = 0L;
  3689                        ;	ULONG clusterSectorNumber = 0L;
  3690                        ;	ULONG clusterByteNumber = 0L;
  3691                        ;
  3692                        ;	ULONG firstDataSector = 0L;
  3693                        ;
  3694                        ;
  3695                        ;
  3696                        ;
  3697                        ;
  3698                        ;	firstDataSector = pfxdosDevice->bootSector.reser
                    ved_sector_count + (pfxdosDevice->bootSector.fat_table_count
                     * 512) + pfxdosDevice->rootDirSectors;
  3699                        ;
  3700                        ;	k_debug_long("firstDataSector:",firstDataSector)
                    ;
  3701                        ;
  3702                        ;	clusterSectorNumber = ((starting_cluster - 2) * 
                    pfxdosDevice->sectors_per_cluster) + firstDataSector;
  3703                        ;
  3704                        ;	k_debug_long("Cluster Offset Calculated:",cluste
                    rSectorNumber);
  3705                        ;
  3706                        ;	k_debug_long("FAT Entry:",((UINT*)(&pfxdosDevice
                    ->fileAllocationTable))[starting_cluster]);
  Sat Jul 10 2021  1:15                                                Page 76


  3707                        ;
  3708                        ;	rootDirSectors = (pfxdosDevice->bootSector.reser
                    ved_sector_count * pfxdosDevice->root_entry_count)  / pfxdos
                    Device->bootSector.bytes_per_sector;
  3709                        ;
  3710                        ;
  3711                        ;	cluster2SectorNumber =  8 + (2 * 240) + rootDirS
                    ectors;
  3712                        ;	clusterSectorNumber =  ((starting_cluster - 2) *
                     16) + cluster2SectorNumber;
  3713                        ;	k_debug_long("clusterSectorNumber:",clusterSecto
                    rNumber);
  3714                        ;
  3715                        ;	clusterByteNumber = clusterSectorNumber * 512;
  3716                        ;
  3717                        ;	return clusterByteNumber;
  3718                        ;}
  3719                        ;
  3720                        ;
  3721                        ;ULONG getClusterLocationByIndex(ULONG starting_cl
                    uster)
  3722                        ;{
  3723                        ;	ULONG rootDirSectors;
  3724                        ;	ULONG cluster2SectorNumber;
  3725                        ;	ULONG clusterSectorNumber;
  3726                        ;	ULONG clusterByteNumber = 0;
  3727                        ;
  3728                        ;	rootDirSectors = (32 * 512)  / 512;
  3729                        ;
  3730                        ;	cluster2SectorNumber = 8 + (2 * 240) + rootDirSe
                    ctors;
  3731                        ;	clusterSectorNumber =  ((starting_cluster - 2) *
                     16) + cluster2SectorNumber;
  3732                        ;	clusterByteNumber = clusterSectorNumber * 512;
  3733                        ;
  3734                        ;	return clusterByteNumber;
  3735                        ;}
  3736                        ;
  3737                        ;
  3738                        ;VOID k_GetDirectory(VOID)
  3739                        ;{
  3740                        ;	PFXZEROPAGE zp = k_getZeroPage();
  3741                        ;
  3742                        ;
  3743                        ;}
  3744                        ;*/
  3745                        ;
  3746                        ;VOID k_dos_deallocate_fileinfo(LPCSTR name,LPVOID
                     pdata)
  3747                        ;{
  3748                        	.line	1028
  3749                        	.line	1029
  3750                        	FXDOS
  3751                        	xdef	~~k_dos_deallocate_fileinfo
  3752                        	func
  3753                        	.function	1029
  3754                        ~~k_dos_deallocate_fileinfo:
  3755                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 77


  3756                        	longi	on
  3757 08:9971: 3B           	tsc
  3758 08:9972: 38           	sec
  3759 08:9973: E9 00 00     	sbc	#L54
  3760 08:9976: 1B           	tcs
  3761 08:9977: 0B           	phd
  3762 08:9978: 5B           	tcd
  3763             00000004   name_0	set	4
  3764             00000008   pdata_0	set	8
  3765                        	.block	1029
  3766                        ;
  3767                        ;}
  3768                        	.sym	name,4,142,6,32
  3769                        	.sym	pdata,8,129,6,32
  3770                        	.line	1031
  3771                        L57:
  3772 08:9979: A5 02        	lda	<L54+2
  3773 08:997B: 85 0A        	sta	<L54+2+8
  3774 08:997D: A5 01        	lda	<L54+1
  3775 08:997F: 85 09        	sta	<L54+1+8
  3776 08:9981: 2B           	pld
  3777 08:9982: 3B           	tsc
  3778 08:9983: 18           	clc
  3779 08:9984: 69 08 00     	adc	#L54+8
  3780 08:9987: 1B           	tcs
  3781 08:9988: 6B           	rtl
  3782                        	.endblock	1031
  3783             00000000   L54	equ	0
  3784             00000001   L55	equ	1
  3785 08:9989:              	ends
  3786                        	efunc
  3787                        	.endfunc	1031,1,0
  3788                        	.line	1031
  3789                        ;
  3790                        ;PFXNODELIST k_dos_findfiles_to_nodes(LPCSTR path)
  3791                        ;{
  3792                        	.line	1033
  3793                        	.line	1034
  3794                        	FXDOS
  3795                        	xdef	~~k_dos_findfiles_to_nodes
  3796                        	func
  3797                        	.function	1034
  3798                        ~~k_dos_findfiles_to_nodes:
  3799                        	longa	on
  3800                        	longi	on
  3801 08:9989: 3B           	tsc
  3802 08:998A: 38           	sec
  3803 08:998B: E9 1E 00     	sbc	#L58
  3804 08:998E: 1B           	tcs
  3805 08:998F: 0B           	phd
  3806 08:9990: 5B           	tcd
  3807             00000004   path_0	set	4
  3808                        	.block	1034
  3809                        ;	DIR *dir;
  3810                        ;	FATFS *fs = NULL;
  3811                        ;	FIL *f = NULL;
  3812                        ;	FILINFO *fileInfo;
  3813                        ;	FRESULT fr = 0;
  Sat Jul 10 2021  1:15                                                Page 78


  3814                        ;
  3815                        ;	LPCSTR drive = NULL;
  3816                        ;
  3817                        ;	PFXNODELIST pcurrentDirectory = NULL;
  3818                        ;
  3819                        ;
  3820                        ;	drive = k_string_copy_to_delimiter(path,':');
  3821             00000000   dir_1	set	0
  3822             00000004   fs_1	set	4
  3823             00000008   f_1	set	8
  3824             0000000C   fileInfo_1	set	12
  3825             00000010   fr_1	set	16
  3826             00000012   drive_1	set	18
  3827             00000016   pcurrentDirectory_1	set	22
  3828                        	.sym	dir,0,138,1,32,82
  3829                        	.sym	fs,4,138,1,32,79
  3830                        	.sym	f,8,138,1,32,81
  3831                        	.sym	fileInfo,12,138,1,32,83
  3832                        	.sym	fr,16,5,1,16
  3833                        	.sym	drive,18,142,1,32
  3834                        	.sym	pcurrentDirectory,22,138,1,32,6
  3835                        	.sym	path,4,142,6,32
  3836 08:9991: 64 09        	stz	<L59+fs_1
  3837 08:9993: 64 0B        	stz	<L59+fs_1+2
  3838 08:9995: 64 0D        	stz	<L59+f_1
  3839 08:9997: 64 0F        	stz	<L59+f_1+2
  3840 08:9999: 64 15        	stz	<L59+fr_1
  3841 08:999B: 64 17        	stz	<L59+drive_1
  3842 08:999D: 64 19        	stz	<L59+drive_1+2
  3843 08:999F: 64 1B        	stz	<L59+pcurrentDirectory_1
  3844 08:99A1: 64 1D        	stz	<L59+pcurrentDirectory_1+2
  3845                        	.line	1046
  3846 08:99A3: F4 3A 00     	pea	#<$3a
  3847 08:99A6: D4 24        	pei	<L58+path_0+2
  3848 08:99A8: D4 22        	pei	<L58+path_0
  3849 08:99AA: 22 xx xx xx  	jsl	~~k_string_copy_to_delimiter
  3850 08:99AE: 85 17        	sta	<L59+drive_1
  3851 08:99B0: 86 19        	stx	<L59+drive_1+2
  3852                        ;
  3853                        ;	pcurrentDirectory = k_nodelist_allocate_list("cu
                    rrentDirectory",k_dos_deallocate_fileinfo);
  3854                        	.line	1048
  3855 08:99B2: F4 08 00     	pea	#^~~k_dos_deallocate_fileinfo
  3856 08:99B5: F4 71 99     	pea	#<~~k_dos_deallocate_fileinfo
  3857 08:99B8: F4 xx xx     	pea	#^L49
  3858 08:99BB: F4 xx xx     	pea	#<L49
  3859 08:99BE: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  3860 08:99C2: 85 1B        	sta	<L59+pcurrentDirectory_1
  3861 08:99C4: 86 1D        	stx	<L59+pcurrentDirectory_1+2
  3862                        ;	if(pcurrentDirectory)
  3863                        	.line	1049
  3864                        ;	{
  3865 08:99C6: A5 1B        	lda	<L59+pcurrentDirectory_1
  3866 08:99C8: 05 1D        	ora	<L59+pcurrentDirectory_1+2
  3867 08:99CA: D0 03        	bne	L61
  3868 08:99CC: 82 29 01     	brl	L10033
  3869                        L61:
  3870                        	.line	1050
  Sat Jul 10 2021  1:15                                                Page 79


  3871                        ;		dir = k_mem_allocate_heap(sizeof(DIR));
  3872                        	.line	1051
  3873 08:99CF: F4 34 00     	pea	#<$34
  3874 08:99D2: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  3875 08:99D6: 85 05        	sta	<L59+dir_1
  3876 08:99D8: 86 07        	stx	<L59+dir_1+2
  3877                        ;		fs = k_mem_allocate_heap(sizeof(FATFS));
  3878                        	.line	1052
  3879 08:99DA: F4 33 02     	pea	#<$233
  3880 08:99DD: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  3881 08:99E1: 85 09        	sta	<L59+fs_1
  3882 08:99E3: 86 0B        	stx	<L59+fs_1+2
  3883                        ;
  3884                        ;
  3885                        ;		f_mount(fs, drive,1);
  3886                        	.line	1055
  3887 08:99E5: F4 01 00     	pea	#<$1
  3888 08:99E8: D4 19        	pei	<L59+drive_1+2
  3889 08:99EA: D4 17        	pei	<L59+drive_1
  3890 08:99EC: D4 0B        	pei	<L59+fs_1+2
  3891 08:99EE: D4 09        	pei	<L59+fs_1
  3892 08:99F0: 22 xx xx xx  	jsl	~~f_mount
  3893                        ;
  3894                        ;		fr = f_opendir (dir,path);
  3895                        	.line	1057
  3896 08:99F4: D4 24        	pei	<L58+path_0+2
  3897 08:99F6: D4 22        	pei	<L58+path_0
  3898 08:99F8: D4 07        	pei	<L59+dir_1+2
  3899 08:99FA: D4 05        	pei	<L59+dir_1
  3900 08:99FC: 22 xx xx xx  	jsl	~~f_opendir
  3901 08:9A00: 85 15        	sta	<L59+fr_1
  3902                        ;		if(fr == FR_OK)
  3903                        	.line	1058
  3904                        ;		{
  3905 08:9A02: A5 15        	lda	<L59+fr_1
  3906 08:9A04: F0 03        	beq	L62
  3907 08:9A06: 82 DF 00     	brl	L10034
  3908                        L62:
  3909                        	.line	1059
  3910                        ;			fileInfo = k_mem_allocate_heap(s
                    izeof(FILINFO));
  3911                        	.line	1060
  3912 08:9A09: F4 16 01     	pea	#<$116
  3913 08:9A0C: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  3914 08:9A10: 85 11        	sta	<L59+fileInfo_1
  3915 08:9A12: 86 13        	stx	<L59+fileInfo_1+2
  3916                        ;			if(fileInfo)
  3917                        	.line	1061
  3918                        ;			{
  3919 08:9A14: A5 11        	lda	<L59+fileInfo_1
  3920 08:9A16: 05 13        	ora	<L59+fileInfo_1+2
  3921 08:9A18: D0 03        	bne	L63
  3922 08:9A1A: 82 C3 00     	brl	L10035
  3923                        L63:
  3924                        	.line	1062
  3925                        ;				fr = f_findfirst(dir,fil
                    eInfo,path, "*");
  3926                        	.line	1063
  Sat Jul 10 2021  1:15                                                Page 80


  3927 08:9A1D: F4 xx xx     	pea	#^L49+17
  3928 08:9A20: F4 xx xx     	pea	#<L49+17
  3929 08:9A23: D4 24        	pei	<L58+path_0+2
  3930 08:9A25: D4 22        	pei	<L58+path_0
  3931 08:9A27: D4 13        	pei	<L59+fileInfo_1+2
  3932 08:9A29: D4 11        	pei	<L59+fileInfo_1
  3933 08:9A2B: D4 07        	pei	<L59+dir_1+2
  3934 08:9A2D: D4 05        	pei	<L59+dir_1
  3935 08:9A2F: 22 xx xx xx  	jsl	~~f_findfirst
  3936 08:9A33: 85 15        	sta	<L59+fr_1
  3937                        ;				if(fr == FR_OK)
  3938                        	.line	1064
  3939                        ;				{
  3940 08:9A35: A5 15        	lda	<L59+fr_1
  3941 08:9A37: F0 03        	beq	L64
  3942 08:9A39: 82 A4 00     	brl	L10036
  3943                        L64:
  3944                        	.line	1065
  3945                        ;					k_nodelist_addto
                    list(pcurrentDirectory,PFXNODE_FILE_PATH_TYPE,(LPCSTR)fileIn
                    fo->fname,fileInfo);
  3946                        	.line	1066
  3947 08:9A3C: D4 13        	pei	<L59+fileInfo_1+2
  3948 08:9A3E: D4 11        	pei	<L59+fileInfo_1
  3949 08:9A40: 18           	clc
  3950 08:9A41: A9 16 00     	lda	#$16
  3951 08:9A44: 65 11        	adc	<L59+fileInfo_1
  3952 08:9A46: 85 01        	sta	<R0
  3953 08:9A48: A9 00 00     	lda	#$0
  3954 08:9A4B: 65 13        	adc	<L59+fileInfo_1+2
  3955 08:9A4D: 85 03        	sta	<R0+2
  3956 08:9A4F: D4 03        	pei	<R0+2
  3957 08:9A51: D4 01        	pei	<R0
  3958 08:9A53: F4 A1 00     	pea	#<$a1
  3959 08:9A56: D4 1D        	pei	<L59+pcurrentDirectory_1+2
  3960 08:9A58: D4 1B        	pei	<L59+pcurrentDirectory_1
  3961 08:9A5A: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  3962                        ;					do
  3963                        	.line	1067
  3964                        L10039:
  3965                        ;					{
  3966                        	.line	1068
  3967                        ;						fileInfo
                     = k_mem_allocate_heap(sizeof(FILINFO));
  3968                        	.line	1069
  3969 08:9A5E: F4 16 01     	pea	#<$116
  3970 08:9A61: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  3971 08:9A65: 85 11        	sta	<L59+fileInfo_1
  3972 08:9A67: 86 13        	stx	<L59+fileInfo_1+2
  3973                        ;						if(fileI
                    nfo!=NULL)
  3974                        	.line	1070
  3975                        ;						{
  3976 08:9A69: A5 11        	lda	<L59+fileInfo_1
  3977 08:9A6B: 05 13        	ora	<L59+fileInfo_1+2
  3978 08:9A6D: D0 03        	bne	L65
  3979 08:9A6F: 82 5A 00     	brl	L10040
  3980                        L65:
  Sat Jul 10 2021  1:15                                                Page 81


  3981                        	.line	1071
  3982                        ;							
                    fr = f_findnext(dir,fileInfo);
  3983                        	.line	1072
  3984 08:9A72: D4 13        	pei	<L59+fileInfo_1+2
  3985 08:9A74: D4 11        	pei	<L59+fileInfo_1
  3986 08:9A76: D4 07        	pei	<L59+dir_1+2
  3987 08:9A78: D4 05        	pei	<L59+dir_1
  3988 08:9A7A: 22 xx xx xx  	jsl	~~f_findnext
  3989 08:9A7E: 85 15        	sta	<L59+fr_1
  3990                        ;							
                    if(fr != FR_OK)
  3991                        	.line	1073
  3992                        ;							
                    {
  3993 08:9A80: A5 15        	lda	<L59+fr_1
  3994 08:9A82: D0 03        	bne	L66
  3995 08:9A84: 82 0B 00     	brl	L10041
  3996                        L66:
  3997                        	.line	1074
  3998                        ;							
                    	k_mem_deallocate_heap(fileInfo);
  3999                        	.line	1075
  4000 08:9A87: D4 13        	pei	<L59+fileInfo_1+2
  4001 08:9A89: D4 11        	pei	<L59+fileInfo_1
  4002 08:9A8B: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  4003                        ;							
                    }
  4004                        	.line	1076
  4005                        ;							
                    else
  4006 08:9A8F: 82 3A 00     	brl	L10042
  4007                        L10041:
  4008                        ;							
                    {
  4009                        	.line	1078
  4010                        ;							
                    	if(fileInfo->fname[0]!=0)
  4011                        	.line	1079
  4012                        ;							
                    		k_nodelist_addtolist(pcurrentDirectory,PFXNODE_F
                    ILE_PATH_TYPE,(LPCSTR)fileInfo->fname,fileInfo);
  4013 08:9A92: A0 16 00     	ldy	#$16
  4014 08:9A95: B7 11        	lda	[<L59+fileInfo_1],Y
  4015 08:9A97: 29 FF 00     	and	#$ff
  4016 08:9A9A: D0 03        	bne	L67
  4017 08:9A9C: 82 25 00     	brl	L10043
  4018                        L67:
  4019                        	.line	1080
  4020 08:9A9F: D4 13        	pei	<L59+fileInfo_1+2
  4021 08:9AA1: D4 11        	pei	<L59+fileInfo_1
  4022 08:9AA3: 18           	clc
  4023 08:9AA4: A9 16 00     	lda	#$16
  4024 08:9AA7: 65 11        	adc	<L59+fileInfo_1
  4025 08:9AA9: 85 01        	sta	<R0
  4026 08:9AAB: A9 00 00     	lda	#$0
  4027 08:9AAE: 65 13        	adc	<L59+fileInfo_1+2
  4028 08:9AB0: 85 03        	sta	<R0+2
  Sat Jul 10 2021  1:15                                                Page 82


  4029 08:9AB2: D4 03        	pei	<R0+2
  4030 08:9AB4: D4 01        	pei	<R0
  4031 08:9AB6: F4 A1 00     	pea	#<$a1
  4032 08:9AB9: D4 1D        	pei	<L59+pcurrentDirectory_1+2
  4033 08:9ABB: D4 1B        	pei	<L59+pcurrentDirectory_1
  4034 08:9ABD: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  4035                        ;							
                    	else
  4036 08:9AC1: 82 08 00     	brl	L10044
  4037                        L10043:
  4038                        ;							
                    		k_mem_deallocate_heap(fileInfo);
  4039                        	.line	1082
  4040 08:9AC4: D4 13        	pei	<L59+fileInfo_1+2
  4041 08:9AC6: D4 11        	pei	<L59+fileInfo_1
  4042 08:9AC8: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  4043                        L10044:
  4044                        ;							
                    }
  4045                        	.line	1083
  4046                        L10042:
  4047                        ;						}
  4048                        	.line	1084
  4049                        ;					}
  4050                        L10040:
  4051                        	.line	1085
  4052                        ;					while((fr == FR_
                    OK) && (fileInfo->fname[0]));
  4053                        L10037:
  4054 08:9ACC: A5 15        	lda	<L59+fr_1
  4055 08:9ACE: F0 03        	beq	L69
  4056 08:9AD0: 82 0D 00     	brl	L68
  4057                        L69:
  4058 08:9AD3: A0 16 00     	ldy	#$16
  4059 08:9AD6: B7 11        	lda	[<L59+fileInfo_1],Y
  4060 08:9AD8: 29 FF 00     	and	#$ff
  4061 08:9ADB: F0 03        	beq	L70
  4062 08:9ADD: 82 7E FF     	brl	L10039
  4063                        L70:
  4064                        L68:
  4065                        L10038:
  4066                        ;				}
  4067                        	.line	1087
  4068                        ;			}
  4069                        L10036:
  4070                        	.line	1088
  4071                        ;			f_closedir(dir);
  4072                        L10035:
  4073                        	.line	1089
  4074 08:9AE0: D4 07        	pei	<L59+dir_1+2
  4075 08:9AE2: D4 05        	pei	<L59+dir_1
  4076 08:9AE4: 22 xx xx xx  	jsl	~~f_closedir
  4077                        ;		}
  4078                        	.line	1090
  4079                        ;
  4080                        ;
  4081                        ;		k_mem_deallocate_heap(fs);
  4082                        L10034:
  Sat Jul 10 2021  1:15                                                Page 83


  4083                        	.line	1093
  4084 08:9AE8: D4 0B        	pei	<L59+fs_1+2
  4085 08:9AEA: D4 09        	pei	<L59+fs_1
  4086 08:9AEC: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  4087                        ;		k_mem_deallocate_heap(dir);
  4088                        	.line	1094
  4089 08:9AF0: D4 07        	pei	<L59+dir_1+2
  4090 08:9AF2: D4 05        	pei	<L59+dir_1
  4091 08:9AF4: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  4092                        ;
  4093                        ;	}
  4094                        	.line	1096
  4095                        ;
  4096                        ;	return pcurrentDirectory;
  4097                        L10033:
  4098                        	.line	1098
  4099 08:9AF8: A6 1D        	ldx	<L59+pcurrentDirectory_1+2
  4100 08:9AFA: A5 1B        	lda	<L59+pcurrentDirectory_1
  4101                        L71:
  4102 08:9AFC: A8           	tay
  4103 08:9AFD: A5 20        	lda	<L58+2
  4104 08:9AFF: 85 24        	sta	<L58+2+4
  4105 08:9B01: A5 1F        	lda	<L58+1
  4106 08:9B03: 85 23        	sta	<L58+1+4
  4107 08:9B05: 2B           	pld
  4108 08:9B06: 3B           	tsc
  4109 08:9B07: 18           	clc
  4110 08:9B08: 69 22 00     	adc	#L58+4
  4111 08:9B0B: 1B           	tcs
  4112 08:9B0C: 98           	tya
  4113 08:9B0D: 6B           	rtl
  4114                        ;}
  4115                        	.line	1099
  4116                        	.endblock	1099
  4117             0000001E   L58	equ	30
  4118             00000005   L59	equ	5
  4119 08:9B0E:              	ends
  4120                        	efunc
  4121                        	.endfunc	1099,5,30
  4122                        	.line	1099
  4123                        	data
  4124                        L49:
  4125 00:0200: 63 75 72 72  	db	$63,$75,$72,$72,$65,$6E,$74,$44,$69,$72,
                    $65,$63,$74,$6F,$72
       00:0204: 65 6E 74 44 
       00:0208: 69 72 65 63 
       00:020C: 74 6F 72 
  4126 00:020F: 79 00 2A 00  	db	$79,$00,$2A,$00
  4127 00:0213:              	ends
  4128                        ;
  4129                        ;
  4130                        ;HRESULT k_dos_open (FIL* fp, const TCHAR* path, B
                    YTE mode){return 0;}
  4131                        	.line	1102
  4132                        	.line	1102
  4133                        	FXDOS
  4134                        	xdef	~~k_dos_open
  4135                        	func
  Sat Jul 10 2021  1:15                                                Page 84


  4136                        	.function	1102
  4137                        ~~k_dos_open:
  4138                        	longa	on
  4139                        	longi	on
  4140 08:9B0E: 3B           	tsc
  4141 08:9B0F: 38           	sec
  4142 08:9B10: E9 00 00     	sbc	#L73
  4143 08:9B13: 1B           	tcs
  4144 08:9B14: 0B           	phd
  4145 08:9B15: 5B           	tcd
  4146             00000004   fp_0	set	4
  4147             00000008   path_0	set	8
  4148             0000000C   mode_0	set	12
  4149                        	.block	1102
  4150                        	.sym	fp,4,138,6,32,81
  4151                        	.sym	path,8,142,6,32
  4152                        	.sym	mode,12,14,6,8
  4153                        	.line	1102
  4154 08:9B16: A9 00 00     	lda	#$0
  4155 08:9B19: AA           	tax
  4156 08:9B1A: A9 00 00     	lda	#$0
  4157                        L76:
  4158 08:9B1D: A8           	tay
  4159 08:9B1E: A5 02        	lda	<L73+2
  4160 08:9B20: 85 0C        	sta	<L73+2+10
  4161 08:9B22: A5 01        	lda	<L73+1
  4162 08:9B24: 85 0B        	sta	<L73+1+10
  4163 08:9B26: 2B           	pld
  4164 08:9B27: 3B           	tsc
  4165 08:9B28: 18           	clc
  4166 08:9B29: 69 0A 00     	adc	#L73+10
  4167 08:9B2C: 1B           	tcs
  4168 08:9B2D: 98           	tya
  4169 08:9B2E: 6B           	rtl
  4170                        	.line	1102
  4171                        	.endblock	1102
  4172             00000000   L73	equ	0
  4173             00000001   L74	equ	1
  4174 08:9B2F:              	ends
  4175                        	efunc
  4176                        	.endfunc	1102,1,0
  4177                        	.line	1102
  4178                        ;HRESULT k_dos_close (FIL* fp){return 0;}
  4179                        	.line	1103
  4180                        	.line	1103
  4181                        	FXDOS
  4182                        	xdef	~~k_dos_close
  4183                        	func
  4184                        	.function	1103
  4185                        ~~k_dos_close:
  4186                        	longa	on
  4187                        	longi	on
  4188 08:9B2F: 3B           	tsc
  4189 08:9B30: 38           	sec
  4190 08:9B31: E9 00 00     	sbc	#L77
  4191 08:9B34: 1B           	tcs
  4192 08:9B35: 0B           	phd
  4193 08:9B36: 5B           	tcd
  Sat Jul 10 2021  1:15                                                Page 85


  4194             00000004   fp_0	set	4
  4195                        	.block	1103
  4196                        	.sym	fp,4,138,6,32,81
  4197                        	.line	1103
  4198 08:9B37: A9 00 00     	lda	#$0
  4199 08:9B3A: AA           	tax
  4200 08:9B3B: A9 00 00     	lda	#$0
  4201                        L80:
  4202 08:9B3E: A8           	tay
  4203 08:9B3F: A5 02        	lda	<L77+2
  4204 08:9B41: 85 06        	sta	<L77+2+4
  4205 08:9B43: A5 01        	lda	<L77+1
  4206 08:9B45: 85 05        	sta	<L77+1+4
  4207 08:9B47: 2B           	pld
  4208 08:9B48: 3B           	tsc
  4209 08:9B49: 18           	clc
  4210 08:9B4A: 69 04 00     	adc	#L77+4
  4211 08:9B4D: 1B           	tcs
  4212 08:9B4E: 98           	tya
  4213 08:9B4F: 6B           	rtl
  4214                        	.line	1103
  4215                        	.endblock	1103
  4216             00000000   L77	equ	0
  4217             00000001   L78	equ	1
  4218 08:9B50:              	ends
  4219                        	efunc
  4220                        	.endfunc	1103,1,0
  4221                        	.line	1103
  4222                        ;HRESULT k_dos_read (FIL* fp, void* buff, UINT btr
                    , UINT* br){return 0;}
  4223                        	.line	1104
  4224                        	.line	1104
  4225                        	FXDOS
  4226                        	xdef	~~k_dos_read
  4227                        	func
  4228                        	.function	1104
  4229                        ~~k_dos_read:
  4230                        	longa	on
  4231                        	longi	on
  4232 08:9B50: 3B           	tsc
  4233 08:9B51: 38           	sec
  4234 08:9B52: E9 00 00     	sbc	#L81
  4235 08:9B55: 1B           	tcs
  4236 08:9B56: 0B           	phd
  4237 08:9B57: 5B           	tcd
  4238             00000004   fp_0	set	4
  4239             00000008   buff_0	set	8
  4240             0000000C   btr_0	set	12
  4241             0000000E   br_0	set	14
  4242                        	.block	1104
  4243                        	.sym	fp,4,138,6,32,81
  4244                        	.sym	buff,8,129,6,32
  4245                        	.sym	btr,12,16,6,16
  4246                        	.sym	br,14,144,6,32
  4247                        	.line	1104
  4248 08:9B58: A9 00 00     	lda	#$0
  4249 08:9B5B: AA           	tax
  4250 08:9B5C: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 86


  4251                        L84:
  4252 08:9B5F: A8           	tay
  4253 08:9B60: A5 02        	lda	<L81+2
  4254 08:9B62: 85 10        	sta	<L81+2+14
  4255 08:9B64: A5 01        	lda	<L81+1
  4256 08:9B66: 85 0F        	sta	<L81+1+14
  4257 08:9B68: 2B           	pld
  4258 08:9B69: 3B           	tsc
  4259 08:9B6A: 18           	clc
  4260 08:9B6B: 69 0E 00     	adc	#L81+14
  4261 08:9B6E: 1B           	tcs
  4262 08:9B6F: 98           	tya
  4263 08:9B70: 6B           	rtl
  4264                        	.line	1104
  4265                        	.endblock	1104
  4266             00000000   L81	equ	0
  4267             00000001   L82	equ	1
  4268 08:9B71:              	ends
  4269                        	efunc
  4270                        	.endfunc	1104,1,0
  4271                        	.line	1104
  4272                        ;HRESULT k_dos_write (FIL* fp, const void* buff, U
                    INT btw, UINT* bw){return 0;}
  4273                        	.line	1105
  4274                        	.line	1105
  4275                        	FXDOS
  4276                        	xdef	~~k_dos_write
  4277                        	func
  4278                        	.function	1105
  4279                        ~~k_dos_write:
  4280                        	longa	on
  4281                        	longi	on
  4282 08:9B71: 3B           	tsc
  4283 08:9B72: 38           	sec
  4284 08:9B73: E9 00 00     	sbc	#L85
  4285 08:9B76: 1B           	tcs
  4286 08:9B77: 0B           	phd
  4287 08:9B78: 5B           	tcd
  4288             00000004   fp_0	set	4
  4289             00000008   buff_0	set	8
  4290             0000000C   btw_0	set	12
  4291             0000000E   bw_0	set	14
  4292                        	.block	1105
  4293                        	.sym	fp,4,138,6,32,81
  4294                        	.sym	buff,8,129,6,32
  4295                        	.sym	btw,12,16,6,16
  4296                        	.sym	bw,14,144,6,32
  4297                        	.line	1105
  4298 08:9B79: A9 00 00     	lda	#$0
  4299 08:9B7C: AA           	tax
  4300 08:9B7D: A9 00 00     	lda	#$0
  4301                        L88:
  4302 08:9B80: A8           	tay
  4303 08:9B81: A5 02        	lda	<L85+2
  4304 08:9B83: 85 10        	sta	<L85+2+14
  4305 08:9B85: A5 01        	lda	<L85+1
  4306 08:9B87: 85 0F        	sta	<L85+1+14
  4307 08:9B89: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 87


  4308 08:9B8A: 3B           	tsc
  4309 08:9B8B: 18           	clc
  4310 08:9B8C: 69 0E 00     	adc	#L85+14
  4311 08:9B8F: 1B           	tcs
  4312 08:9B90: 98           	tya
  4313 08:9B91: 6B           	rtl
  4314                        	.line	1105
  4315                        	.endblock	1105
  4316             00000000   L85	equ	0
  4317             00000001   L86	equ	1
  4318 08:9B92:              	ends
  4319                        	efunc
  4320                        	.endfunc	1105,1,0
  4321                        	.line	1105
  4322                        ;HRESULT k_dos_lseek (FIL* fp, FSIZE_t ofs){return
                     0;}
  4323                        	.line	1106
  4324                        	.line	1106
  4325                        	FXDOS
  4326                        	xdef	~~k_dos_lseek
  4327                        	func
  4328                        	.function	1106
  4329                        ~~k_dos_lseek:
  4330                        	longa	on
  4331                        	longi	on
  4332 08:9B92: 3B           	tsc
  4333 08:9B93: 38           	sec
  4334 08:9B94: E9 00 00     	sbc	#L89
  4335 08:9B97: 1B           	tcs
  4336 08:9B98: 0B           	phd
  4337 08:9B99: 5B           	tcd
  4338             00000004   fp_0	set	4
  4339             00000008   ofs_0	set	8
  4340                        	.block	1106
  4341                        	.sym	fp,4,138,6,32,81
  4342                        	.sym	ofs,8,18,6,32
  4343                        	.line	1106
  4344 08:9B9A: A9 00 00     	lda	#$0
  4345 08:9B9D: AA           	tax
  4346 08:9B9E: A9 00 00     	lda	#$0
  4347                        L92:
  4348 08:9BA1: A8           	tay
  4349 08:9BA2: A5 02        	lda	<L89+2
  4350 08:9BA4: 85 0A        	sta	<L89+2+8
  4351 08:9BA6: A5 01        	lda	<L89+1
  4352 08:9BA8: 85 09        	sta	<L89+1+8
  4353 08:9BAA: 2B           	pld
  4354 08:9BAB: 3B           	tsc
  4355 08:9BAC: 18           	clc
  4356 08:9BAD: 69 08 00     	adc	#L89+8
  4357 08:9BB0: 1B           	tcs
  4358 08:9BB1: 98           	tya
  4359 08:9BB2: 6B           	rtl
  4360                        	.line	1106
  4361                        	.endblock	1106
  4362             00000000   L89	equ	0
  4363             00000001   L90	equ	1
  4364 08:9BB3:              	ends
  Sat Jul 10 2021  1:15                                                Page 88


  4365                        	efunc
  4366                        	.endfunc	1106,1,0
  4367                        	.line	1106
  4368                        ;HRESULT k_dos_truncate (FIL* fp){return 0;}	
                    								
                    	/* Truncate the file */
  4369                        	.line	1107
  4370                        	.line	1107
  4371                        	FXDOS
  4372                        	xdef	~~k_dos_truncate
  4373                        	func
  4374                        	.function	1107
  4375                        ~~k_dos_truncate:
  4376                        	longa	on
  4377                        	longi	on
  4378 08:9BB3: 3B           	tsc
  4379 08:9BB4: 38           	sec
  4380 08:9BB5: E9 00 00     	sbc	#L93
  4381 08:9BB8: 1B           	tcs
  4382 08:9BB9: 0B           	phd
  4383 08:9BBA: 5B           	tcd
  4384             00000004   fp_0	set	4
  4385                        	.block	1107
  4386                        	.sym	fp,4,138,6,32,81
  4387                        	.line	1107
  4388 08:9BBB: A9 00 00     	lda	#$0
  4389 08:9BBE: AA           	tax
  4390 08:9BBF: A9 00 00     	lda	#$0
  4391                        L96:
  4392 08:9BC2: A8           	tay
  4393 08:9BC3: A5 02        	lda	<L93+2
  4394 08:9BC5: 85 06        	sta	<L93+2+4
  4395 08:9BC7: A5 01        	lda	<L93+1
  4396 08:9BC9: 85 05        	sta	<L93+1+4
  4397 08:9BCB: 2B           	pld
  4398 08:9BCC: 3B           	tsc
  4399 08:9BCD: 18           	clc
  4400 08:9BCE: 69 04 00     	adc	#L93+4
  4401 08:9BD1: 1B           	tcs
  4402 08:9BD2: 98           	tya
  4403 08:9BD3: 6B           	rtl
  4404                        	.line	1107
  4405                        	.endblock	1107
  4406             00000000   L93	equ	0
  4407             00000001   L94	equ	1
  4408 08:9BD4:              	ends
  4409                        	efunc
  4410                        	.endfunc	1107,1,0
  4411                        	.line	1107
  4412                        ;HRESULT k_dos_sync (FIL* fp){return 0;}		
                    								
                    	/* Flush cached data of the writing file */
  4413                        	.line	1108
  4414                        	.line	1108
  4415                        	FXDOS
  4416                        	xdef	~~k_dos_sync
  4417                        	func
  4418                        	.function	1108
  Sat Jul 10 2021  1:15                                                Page 89


  4419                        ~~k_dos_sync:
  4420                        	longa	on
  4421                        	longi	on
  4422 08:9BD4: 3B           	tsc
  4423 08:9BD5: 38           	sec
  4424 08:9BD6: E9 00 00     	sbc	#L97
  4425 08:9BD9: 1B           	tcs
  4426 08:9BDA: 0B           	phd
  4427 08:9BDB: 5B           	tcd
  4428             00000004   fp_0	set	4
  4429                        	.block	1108
  4430                        	.sym	fp,4,138,6,32,81
  4431                        	.line	1108
  4432 08:9BDC: A9 00 00     	lda	#$0
  4433 08:9BDF: AA           	tax
  4434 08:9BE0: A9 00 00     	lda	#$0
  4435                        L100:
  4436 08:9BE3: A8           	tay
  4437 08:9BE4: A5 02        	lda	<L97+2
  4438 08:9BE6: 85 06        	sta	<L97+2+4
  4439 08:9BE8: A5 01        	lda	<L97+1
  4440 08:9BEA: 85 05        	sta	<L97+1+4
  4441 08:9BEC: 2B           	pld
  4442 08:9BED: 3B           	tsc
  4443 08:9BEE: 18           	clc
  4444 08:9BEF: 69 04 00     	adc	#L97+4
  4445 08:9BF2: 1B           	tcs
  4446 08:9BF3: 98           	tya
  4447 08:9BF4: 6B           	rtl
  4448                        	.line	1108
  4449                        	.endblock	1108
  4450             00000000   L97	equ	0
  4451             00000001   L98	equ	1
  4452 08:9BF5:              	ends
  4453                        	efunc
  4454                        	.endfunc	1108,1,0
  4455                        	.line	1108
  4456                        ;HRESULT k_dos_opendir (DIR* dp, const TCHAR* path
                    ){return 0;}						
                    /* Open a directory */
  4457                        	.line	1109
  4458                        	.line	1109
  4459                        	FXDOS
  4460                        	xdef	~~k_dos_opendir
  4461                        	func
  4462                        	.function	1109
  4463                        ~~k_dos_opendir:
  4464                        	longa	on
  4465                        	longi	on
  4466 08:9BF5: 3B           	tsc
  4467 08:9BF6: 38           	sec
  4468 08:9BF7: E9 00 00     	sbc	#L101
  4469 08:9BFA: 1B           	tcs
  4470 08:9BFB: 0B           	phd
  4471 08:9BFC: 5B           	tcd
  4472             00000004   dp_0	set	4
  4473             00000008   path_0	set	8
  4474                        	.block	1109
  Sat Jul 10 2021  1:15                                                Page 90


  4475                        	.sym	dp,4,138,6,32,82
  4476                        	.sym	path,8,142,6,32
  4477                        	.line	1109
  4478 08:9BFD: A9 00 00     	lda	#$0
  4479 08:9C00: AA           	tax
  4480 08:9C01: A9 00 00     	lda	#$0
  4481                        L104:
  4482 08:9C04: A8           	tay
  4483 08:9C05: A5 02        	lda	<L101+2
  4484 08:9C07: 85 0A        	sta	<L101+2+8
  4485 08:9C09: A5 01        	lda	<L101+1
  4486 08:9C0B: 85 09        	sta	<L101+1+8
  4487 08:9C0D: 2B           	pld
  4488 08:9C0E: 3B           	tsc
  4489 08:9C0F: 18           	clc
  4490 08:9C10: 69 08 00     	adc	#L101+8
  4491 08:9C13: 1B           	tcs
  4492 08:9C14: 98           	tya
  4493 08:9C15: 6B           	rtl
  4494                        	.line	1109
  4495                        	.endblock	1109
  4496             00000000   L101	equ	0
  4497             00000001   L102	equ	1
  4498 08:9C16:              	ends
  4499                        	efunc
  4500                        	.endfunc	1109,1,0
  4501                        	.line	1109
  4502                        ;HRESULT k_dos_closedir (DIR* dp){return 0;}	
                    								
                    	/* Close an open directory */
  4503                        	.line	1110
  4504                        	.line	1110
  4505                        	FXDOS
  4506                        	xdef	~~k_dos_closedir
  4507                        	func
  4508                        	.function	1110
  4509                        ~~k_dos_closedir:
  4510                        	longa	on
  4511                        	longi	on
  4512 08:9C16: 3B           	tsc
  4513 08:9C17: 38           	sec
  4514 08:9C18: E9 00 00     	sbc	#L105
  4515 08:9C1B: 1B           	tcs
  4516 08:9C1C: 0B           	phd
  4517 08:9C1D: 5B           	tcd
  4518             00000004   dp_0	set	4
  4519                        	.block	1110
  4520                        	.sym	dp,4,138,6,32,82
  4521                        	.line	1110
  4522 08:9C1E: A9 00 00     	lda	#$0
  4523 08:9C21: AA           	tax
  4524 08:9C22: A9 00 00     	lda	#$0
  4525                        L108:
  4526 08:9C25: A8           	tay
  4527 08:9C26: A5 02        	lda	<L105+2
  4528 08:9C28: 85 06        	sta	<L105+2+4
  4529 08:9C2A: A5 01        	lda	<L105+1
  4530 08:9C2C: 85 05        	sta	<L105+1+4
  Sat Jul 10 2021  1:15                                                Page 91


  4531 08:9C2E: 2B           	pld
  4532 08:9C2F: 3B           	tsc
  4533 08:9C30: 18           	clc
  4534 08:9C31: 69 04 00     	adc	#L105+4
  4535 08:9C34: 1B           	tcs
  4536 08:9C35: 98           	tya
  4537 08:9C36: 6B           	rtl
  4538                        	.line	1110
  4539                        	.endblock	1110
  4540             00000000   L105	equ	0
  4541             00000001   L106	equ	1
  4542 08:9C37:              	ends
  4543                        	efunc
  4544                        	.endfunc	1110,1,0
  4545                        	.line	1110
  4546                        ;HRESULT k_dos_readdir (DIR* dp, FILINFO* fno){ret
                    urn 0;}							
                    /* Read a directory item */
  4547                        	.line	1111
  4548                        	.line	1111
  4549                        	FXDOS
  4550                        	xdef	~~k_dos_readdir
  4551                        	func
  4552                        	.function	1111
  4553                        ~~k_dos_readdir:
  4554                        	longa	on
  4555                        	longi	on
  4556 08:9C37: 3B           	tsc
  4557 08:9C38: 38           	sec
  4558 08:9C39: E9 00 00     	sbc	#L109
  4559 08:9C3C: 1B           	tcs
  4560 08:9C3D: 0B           	phd
  4561 08:9C3E: 5B           	tcd
  4562             00000004   dp_0	set	4
  4563             00000008   fno_0	set	8
  4564                        	.block	1111
  4565                        	.sym	dp,4,138,6,32,82
  4566                        	.sym	fno,8,138,6,32,83
  4567                        	.line	1111
  4568 08:9C3F: A9 00 00     	lda	#$0
  4569 08:9C42: AA           	tax
  4570 08:9C43: A9 00 00     	lda	#$0
  4571                        L112:
  4572 08:9C46: A8           	tay
  4573 08:9C47: A5 02        	lda	<L109+2
  4574 08:9C49: 85 0A        	sta	<L109+2+8
  4575 08:9C4B: A5 01        	lda	<L109+1
  4576 08:9C4D: 85 09        	sta	<L109+1+8
  4577 08:9C4F: 2B           	pld
  4578 08:9C50: 3B           	tsc
  4579 08:9C51: 18           	clc
  4580 08:9C52: 69 08 00     	adc	#L109+8
  4581 08:9C55: 1B           	tcs
  4582 08:9C56: 98           	tya
  4583 08:9C57: 6B           	rtl
  4584                        	.line	1111
  4585                        	.endblock	1111
  4586             00000000   L109	equ	0
  Sat Jul 10 2021  1:15                                                Page 92


  4587             00000001   L110	equ	1
  4588 08:9C58:              	ends
  4589                        	efunc
  4590                        	.endfunc	1111,1,0
  4591                        	.line	1111
  4592                        ;HRESULT k_dos_findfirst (DIR* dp, FILINFO* fno, c
                    onst TCHAR* path, const TCHAR* pattern){return 0;}	/* Find 
                    first file */
  4593                        	.line	1112
  4594                        	.line	1112
  4595                        	FXDOS
  4596                        	xdef	~~k_dos_findfirst
  4597                        	func
  4598                        	.function	1112
  4599                        ~~k_dos_findfirst:
  4600                        	longa	on
  4601                        	longi	on
  4602 08:9C58: 3B           	tsc
  4603 08:9C59: 38           	sec
  4604 08:9C5A: E9 00 00     	sbc	#L113
  4605 08:9C5D: 1B           	tcs
  4606 08:9C5E: 0B           	phd
  4607 08:9C5F: 5B           	tcd
  4608             00000004   dp_0	set	4
  4609             00000008   fno_0	set	8
  4610             0000000C   path_0	set	12
  4611             00000010   pattern_0	set	16
  4612                        	.block	1112
  4613                        	.sym	dp,4,138,6,32,82
  4614                        	.sym	fno,8,138,6,32,83
  4615                        	.sym	path,12,142,6,32
  4616                        	.sym	pattern,16,142,6,32
  4617                        	.line	1112
  4618 08:9C60: A9 00 00     	lda	#$0
  4619 08:9C63: AA           	tax
  4620 08:9C64: A9 00 00     	lda	#$0
  4621                        L116:
  4622 08:9C67: A8           	tay
  4623 08:9C68: A5 02        	lda	<L113+2
  4624 08:9C6A: 85 12        	sta	<L113+2+16
  4625 08:9C6C: A5 01        	lda	<L113+1
  4626 08:9C6E: 85 11        	sta	<L113+1+16
  4627 08:9C70: 2B           	pld
  4628 08:9C71: 3B           	tsc
  4629 08:9C72: 18           	clc
  4630 08:9C73: 69 10 00     	adc	#L113+16
  4631 08:9C76: 1B           	tcs
  4632 08:9C77: 98           	tya
  4633 08:9C78: 6B           	rtl
  4634                        	.line	1112
  4635                        	.endblock	1112
  4636             00000000   L113	equ	0
  4637             00000001   L114	equ	1
  4638 08:9C79:              	ends
  4639                        	efunc
  4640                        	.endfunc	1112,1,0
  4641                        	.line	1112
  4642                        ;HRESULT k_dos_findnext (DIR* dp, FILINFO* fno){re
  Sat Jul 10 2021  1:15                                                Page 93


                    turn 0;}	/* Find next file */
  4643                        	.line	1113
  4644                        	.line	1113
  4645                        	FXDOS
  4646                        	xdef	~~k_dos_findnext
  4647                        	func
  4648                        	.function	1113
  4649                        ~~k_dos_findnext:
  4650                        	longa	on
  4651                        	longi	on
  4652 08:9C79: 3B           	tsc
  4653 08:9C7A: 38           	sec
  4654 08:9C7B: E9 00 00     	sbc	#L117
  4655 08:9C7E: 1B           	tcs
  4656 08:9C7F: 0B           	phd
  4657 08:9C80: 5B           	tcd
  4658             00000004   dp_0	set	4
  4659             00000008   fno_0	set	8
  4660                        	.block	1113
  4661                        	.sym	dp,4,138,6,32,82
  4662                        	.sym	fno,8,138,6,32,83
  4663                        	.line	1113
  4664 08:9C81: A9 00 00     	lda	#$0
  4665 08:9C84: AA           	tax
  4666 08:9C85: A9 00 00     	lda	#$0
  4667                        L120:
  4668 08:9C88: A8           	tay
  4669 08:9C89: A5 02        	lda	<L117+2
  4670 08:9C8B: 85 0A        	sta	<L117+2+8
  4671 08:9C8D: A5 01        	lda	<L117+1
  4672 08:9C8F: 85 09        	sta	<L117+1+8
  4673 08:9C91: 2B           	pld
  4674 08:9C92: 3B           	tsc
  4675 08:9C93: 18           	clc
  4676 08:9C94: 69 08 00     	adc	#L117+8
  4677 08:9C97: 1B           	tcs
  4678 08:9C98: 98           	tya
  4679 08:9C99: 6B           	rtl
  4680                        	.line	1113
  4681                        	.endblock	1113
  4682             00000000   L117	equ	0
  4683             00000001   L118	equ	1
  4684 08:9C9A:              	ends
  4685                        	efunc
  4686                        	.endfunc	1113,1,0
  4687                        	.line	1113
  4688                        ;HRESULT k_dos_mkdir (const TCHAR* path){return 0;
                    }								
                    /* Create a sub directory */
  4689                        	.line	1114
  4690                        	.line	1114
  4691                        	FXDOS
  4692                        	xdef	~~k_dos_mkdir
  4693                        	func
  4694                        	.function	1114
  4695                        ~~k_dos_mkdir:
  4696                        	longa	on
  4697                        	longi	on
  Sat Jul 10 2021  1:15                                                Page 94


  4698 08:9C9A: 3B           	tsc
  4699 08:9C9B: 38           	sec
  4700 08:9C9C: E9 00 00     	sbc	#L121
  4701 08:9C9F: 1B           	tcs
  4702 08:9CA0: 0B           	phd
  4703 08:9CA1: 5B           	tcd
  4704             00000004   path_0	set	4
  4705                        	.block	1114
  4706                        	.sym	path,4,142,6,32
  4707                        	.line	1114
  4708 08:9CA2: A9 00 00     	lda	#$0
  4709 08:9CA5: AA           	tax
  4710 08:9CA6: A9 00 00     	lda	#$0
  4711                        L124:
  4712 08:9CA9: A8           	tay
  4713 08:9CAA: A5 02        	lda	<L121+2
  4714 08:9CAC: 85 06        	sta	<L121+2+4
  4715 08:9CAE: A5 01        	lda	<L121+1
  4716 08:9CB0: 85 05        	sta	<L121+1+4
  4717 08:9CB2: 2B           	pld
  4718 08:9CB3: 3B           	tsc
  4719 08:9CB4: 18           	clc
  4720 08:9CB5: 69 04 00     	adc	#L121+4
  4721 08:9CB8: 1B           	tcs
  4722 08:9CB9: 98           	tya
  4723 08:9CBA: 6B           	rtl
  4724                        	.line	1114
  4725                        	.endblock	1114
  4726             00000000   L121	equ	0
  4727             00000001   L122	equ	1
  4728 08:9CBB:              	ends
  4729                        	efunc
  4730                        	.endfunc	1114,1,0
  4731                        	.line	1114
  4732                        ;HRESULT k_dos_unlink (const TCHAR* path){return 0
                    ;}								
                    /* Delete an existing file or directory */
  4733                        	.line	1115
  4734                        	.line	1115
  4735                        	FXDOS
  4736                        	xdef	~~k_dos_unlink
  4737                        	func
  4738                        	.function	1115
  4739                        ~~k_dos_unlink:
  4740                        	longa	on
  4741                        	longi	on
  4742 08:9CBB: 3B           	tsc
  4743 08:9CBC: 38           	sec
  4744 08:9CBD: E9 00 00     	sbc	#L125
  4745 08:9CC0: 1B           	tcs
  4746 08:9CC1: 0B           	phd
  4747 08:9CC2: 5B           	tcd
  4748             00000004   path_0	set	4
  4749                        	.block	1115
  4750                        	.sym	path,4,142,6,32
  4751                        	.line	1115
  4752 08:9CC3: A9 00 00     	lda	#$0
  4753 08:9CC6: AA           	tax
  Sat Jul 10 2021  1:15                                                Page 95


  4754 08:9CC7: A9 00 00     	lda	#$0
  4755                        L128:
  4756 08:9CCA: A8           	tay
  4757 08:9CCB: A5 02        	lda	<L125+2
  4758 08:9CCD: 85 06        	sta	<L125+2+4
  4759 08:9CCF: A5 01        	lda	<L125+1
  4760 08:9CD1: 85 05        	sta	<L125+1+4
  4761 08:9CD3: 2B           	pld
  4762 08:9CD4: 3B           	tsc
  4763 08:9CD5: 18           	clc
  4764 08:9CD6: 69 04 00     	adc	#L125+4
  4765 08:9CD9: 1B           	tcs
  4766 08:9CDA: 98           	tya
  4767 08:9CDB: 6B           	rtl
  4768                        	.line	1115
  4769                        	.endblock	1115
  4770             00000000   L125	equ	0
  4771             00000001   L126	equ	1
  4772 08:9CDC:              	ends
  4773                        	efunc
  4774                        	.endfunc	1115,1,0
  4775                        	.line	1115
  4776                        ;HRESULT k_dos_rename (const TCHAR* path_old, cons
                    t TCHAR* path_new){return 0;}	/* Rename/Move a file or
                     directory */
  4777                        	.line	1116
  4778                        	.line	1116
  4779                        	FXDOS
  4780                        	xdef	~~k_dos_rename
  4781                        	func
  4782                        	.function	1116
  4783                        ~~k_dos_rename:
  4784                        	longa	on
  4785                        	longi	on
  4786 08:9CDC: 3B           	tsc
  4787 08:9CDD: 38           	sec
  4788 08:9CDE: E9 00 00     	sbc	#L129
  4789 08:9CE1: 1B           	tcs
  4790 08:9CE2: 0B           	phd
  4791 08:9CE3: 5B           	tcd
  4792             00000004   path_old_0	set	4
  4793             00000008   path_new_0	set	8
  4794                        	.block	1116
  4795                        	.sym	path_old,4,142,6,32
  4796                        	.sym	path_new,8,142,6,32
  4797                        	.line	1116
  4798 08:9CE4: A9 00 00     	lda	#$0
  4799 08:9CE7: AA           	tax
  4800 08:9CE8: A9 00 00     	lda	#$0
  4801                        L132:
  4802 08:9CEB: A8           	tay
  4803 08:9CEC: A5 02        	lda	<L129+2
  4804 08:9CEE: 85 0A        	sta	<L129+2+8
  4805 08:9CF0: A5 01        	lda	<L129+1
  4806 08:9CF2: 85 09        	sta	<L129+1+8
  4807 08:9CF4: 2B           	pld
  4808 08:9CF5: 3B           	tsc
  4809 08:9CF6: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 96


  4810 08:9CF7: 69 08 00     	adc	#L129+8
  4811 08:9CFA: 1B           	tcs
  4812 08:9CFB: 98           	tya
  4813 08:9CFC: 6B           	rtl
  4814                        	.line	1116
  4815                        	.endblock	1116
  4816             00000000   L129	equ	0
  4817             00000001   L130	equ	1
  4818 08:9CFD:              	ends
  4819                        	efunc
  4820                        	.endfunc	1116,1,0
  4821                        	.line	1116
  4822                        ;HRESULT k_dos_stat (const TCHAR* path, FILINFO* f
                    no){return 0;}					/* Get f
                    ile status */
  4823                        	.line	1117
  4824                        	.line	1117
  4825                        	FXDOS
  4826                        	xdef	~~k_dos_stat
  4827                        	func
  4828                        	.function	1117
  4829                        ~~k_dos_stat:
  4830                        	longa	on
  4831                        	longi	on
  4832 08:9CFD: 3B           	tsc
  4833 08:9CFE: 38           	sec
  4834 08:9CFF: E9 00 00     	sbc	#L133
  4835 08:9D02: 1B           	tcs
  4836 08:9D03: 0B           	phd
  4837 08:9D04: 5B           	tcd
  4838             00000004   path_0	set	4
  4839             00000008   fno_0	set	8
  4840                        	.block	1117
  4841                        	.sym	path,4,142,6,32
  4842                        	.sym	fno,8,138,6,32,83
  4843                        	.line	1117
  4844 08:9D05: A9 00 00     	lda	#$0
  4845 08:9D08: AA           	tax
  4846 08:9D09: A9 00 00     	lda	#$0
  4847                        L136:
  4848 08:9D0C: A8           	tay
  4849 08:9D0D: A5 02        	lda	<L133+2
  4850 08:9D0F: 85 0A        	sta	<L133+2+8
  4851 08:9D11: A5 01        	lda	<L133+1
  4852 08:9D13: 85 09        	sta	<L133+1+8
  4853 08:9D15: 2B           	pld
  4854 08:9D16: 3B           	tsc
  4855 08:9D17: 18           	clc
  4856 08:9D18: 69 08 00     	adc	#L133+8
  4857 08:9D1B: 1B           	tcs
  4858 08:9D1C: 98           	tya
  4859 08:9D1D: 6B           	rtl
  4860                        	.line	1117
  4861                        	.endblock	1117
  4862             00000000   L133	equ	0
  4863             00000001   L134	equ	1
  4864 08:9D1E:              	ends
  4865                        	efunc
  Sat Jul 10 2021  1:15                                                Page 97


  4866                        	.endfunc	1117,1,0
  4867                        	.line	1117
  4868                        ;HRESULT k_dos_chmod (const TCHAR* path, BYTE attr
                    , BYTE mask){return 0;}			/* Change attrib
                    ute of a file/dir */
  4869                        	.line	1118
  4870                        	.line	1118
  4871                        	FXDOS
  4872                        	xdef	~~k_dos_chmod
  4873                        	func
  4874                        	.function	1118
  4875                        ~~k_dos_chmod:
  4876                        	longa	on
  4877                        	longi	on
  4878 08:9D1E: 3B           	tsc
  4879 08:9D1F: 38           	sec
  4880 08:9D20: E9 00 00     	sbc	#L137
  4881 08:9D23: 1B           	tcs
  4882 08:9D24: 0B           	phd
  4883 08:9D25: 5B           	tcd
  4884             00000004   path_0	set	4
  4885             00000008   attr_0	set	8
  4886             0000000A   mask_0	set	10
  4887                        	.block	1118
  4888                        	.sym	path,4,142,6,32
  4889                        	.sym	attr,8,14,6,8
  4890                        	.sym	mask,10,14,6,8
  4891                        	.line	1118
  4892 08:9D26: A9 00 00     	lda	#$0
  4893 08:9D29: AA           	tax
  4894 08:9D2A: A9 00 00     	lda	#$0
  4895                        L140:
  4896 08:9D2D: A8           	tay
  4897 08:9D2E: A5 02        	lda	<L137+2
  4898 08:9D30: 85 0A        	sta	<L137+2+8
  4899 08:9D32: A5 01        	lda	<L137+1
  4900 08:9D34: 85 09        	sta	<L137+1+8
  4901 08:9D36: 2B           	pld
  4902 08:9D37: 3B           	tsc
  4903 08:9D38: 18           	clc
  4904 08:9D39: 69 08 00     	adc	#L137+8
  4905 08:9D3C: 1B           	tcs
  4906 08:9D3D: 98           	tya
  4907 08:9D3E: 6B           	rtl
  4908                        	.line	1118
  4909                        	.endblock	1118
  4910             00000000   L137	equ	0
  4911             00000001   L138	equ	1
  4912 08:9D3F:              	ends
  4913                        	efunc
  4914                        	.endfunc	1118,1,0
  4915                        	.line	1118
  4916                        ;HRESULT k_dos_utime (const TCHAR* path, const FIL
                    INFO* fno){return 0;}			/* Change timest
                    amp of a file/dir */
  4917                        	.line	1119
  4918                        	.line	1119
  4919                        	FXDOS
  Sat Jul 10 2021  1:15                                                Page 98


  4920                        	xdef	~~k_dos_utime
  4921                        	func
  4922                        	.function	1119
  4923                        ~~k_dos_utime:
  4924                        	longa	on
  4925                        	longi	on
  4926 08:9D3F: 3B           	tsc
  4927 08:9D40: 38           	sec
  4928 08:9D41: E9 00 00     	sbc	#L141
  4929 08:9D44: 1B           	tcs
  4930 08:9D45: 0B           	phd
  4931 08:9D46: 5B           	tcd
  4932             00000004   path_0	set	4
  4933             00000008   fno_0	set	8
  4934                        	.block	1119
  4935                        	.sym	path,4,142,6,32
  4936                        	.sym	fno,8,138,6,32,83
  4937                        	.line	1119
  4938 08:9D47: A9 00 00     	lda	#$0
  4939 08:9D4A: AA           	tax
  4940 08:9D4B: A9 00 00     	lda	#$0
  4941                        L144:
  4942 08:9D4E: A8           	tay
  4943 08:9D4F: A5 02        	lda	<L141+2
  4944 08:9D51: 85 0A        	sta	<L141+2+8
  4945 08:9D53: A5 01        	lda	<L141+1
  4946 08:9D55: 85 09        	sta	<L141+1+8
  4947 08:9D57: 2B           	pld
  4948 08:9D58: 3B           	tsc
  4949 08:9D59: 18           	clc
  4950 08:9D5A: 69 08 00     	adc	#L141+8
  4951 08:9D5D: 1B           	tcs
  4952 08:9D5E: 98           	tya
  4953 08:9D5F: 6B           	rtl
  4954                        	.line	1119
  4955                        	.endblock	1119
  4956             00000000   L141	equ	0
  4957             00000001   L142	equ	1
  4958 08:9D60:              	ends
  4959                        	efunc
  4960                        	.endfunc	1119,1,0
  4961                        	.line	1119
  4962                        ;HRESULT k_dos_chdir (const TCHAR* path){return 0;
                    }								
                    /* Change current directory */
  4963                        	.line	1120
  4964                        	.line	1120
  4965                        	FXDOS
  4966                        	xdef	~~k_dos_chdir
  4967                        	func
  4968                        	.function	1120
  4969                        ~~k_dos_chdir:
  4970                        	longa	on
  4971                        	longi	on
  4972 08:9D60: 3B           	tsc
  4973 08:9D61: 38           	sec
  4974 08:9D62: E9 00 00     	sbc	#L145
  4975 08:9D65: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 99


  4976 08:9D66: 0B           	phd
  4977 08:9D67: 5B           	tcd
  4978             00000004   path_0	set	4
  4979                        	.block	1120
  4980                        	.sym	path,4,142,6,32
  4981                        	.line	1120
  4982 08:9D68: A9 00 00     	lda	#$0
  4983 08:9D6B: AA           	tax
  4984 08:9D6C: A9 00 00     	lda	#$0
  4985                        L148:
  4986 08:9D6F: A8           	tay
  4987 08:9D70: A5 02        	lda	<L145+2
  4988 08:9D72: 85 06        	sta	<L145+2+4
  4989 08:9D74: A5 01        	lda	<L145+1
  4990 08:9D76: 85 05        	sta	<L145+1+4
  4991 08:9D78: 2B           	pld
  4992 08:9D79: 3B           	tsc
  4993 08:9D7A: 18           	clc
  4994 08:9D7B: 69 04 00     	adc	#L145+4
  4995 08:9D7E: 1B           	tcs
  4996 08:9D7F: 98           	tya
  4997 08:9D80: 6B           	rtl
  4998                        	.line	1120
  4999                        	.endblock	1120
  5000             00000000   L145	equ	0
  5001             00000001   L146	equ	1
  5002 08:9D81:              	ends
  5003                        	efunc
  5004                        	.endfunc	1120,1,0
  5005                        	.line	1120
  5006                        ;HRESULT k_dos_chdrive (const TCHAR* path){return 
                    0;}								
                    /* Change current drive */
  5007                        	.line	1121
  5008                        	.line	1121
  5009                        	FXDOS
  5010                        	xdef	~~k_dos_chdrive
  5011                        	func
  5012                        	.function	1121
  5013                        ~~k_dos_chdrive:
  5014                        	longa	on
  5015                        	longi	on
  5016 08:9D81: 3B           	tsc
  5017 08:9D82: 38           	sec
  5018 08:9D83: E9 00 00     	sbc	#L149
  5019 08:9D86: 1B           	tcs
  5020 08:9D87: 0B           	phd
  5021 08:9D88: 5B           	tcd
  5022             00000004   path_0	set	4
  5023                        	.block	1121
  5024                        	.sym	path,4,142,6,32
  5025                        	.line	1121
  5026 08:9D89: A9 00 00     	lda	#$0
  5027 08:9D8C: AA           	tax
  5028 08:9D8D: A9 00 00     	lda	#$0
  5029                        L152:
  5030 08:9D90: A8           	tay
  5031 08:9D91: A5 02        	lda	<L149+2
  Sat Jul 10 2021  1:15                                                Page 100


  5032 08:9D93: 85 06        	sta	<L149+2+4
  5033 08:9D95: A5 01        	lda	<L149+1
  5034 08:9D97: 85 05        	sta	<L149+1+4
  5035 08:9D99: 2B           	pld
  5036 08:9D9A: 3B           	tsc
  5037 08:9D9B: 18           	clc
  5038 08:9D9C: 69 04 00     	adc	#L149+4
  5039 08:9D9F: 1B           	tcs
  5040 08:9DA0: 98           	tya
  5041 08:9DA1: 6B           	rtl
  5042                        	.line	1121
  5043                        	.endblock	1121
  5044             00000000   L149	equ	0
  5045             00000001   L150	equ	1
  5046 08:9DA2:              	ends
  5047                        	efunc
  5048                        	.endfunc	1121,1,0
  5049                        	.line	1121
  5050                        ;HRESULT k_dos_getcwd (TCHAR* buff, UINT len){retu
                    rn 0;}							
                    /* Get current directory */
  5051                        	.line	1122
  5052                        	.line	1122
  5053                        	FXDOS
  5054                        	xdef	~~k_dos_getcwd
  5055                        	func
  5056                        	.function	1122
  5057                        ~~k_dos_getcwd:
  5058                        	longa	on
  5059                        	longi	on
  5060 08:9DA2: 3B           	tsc
  5061 08:9DA3: 38           	sec
  5062 08:9DA4: E9 00 00     	sbc	#L153
  5063 08:9DA7: 1B           	tcs
  5064 08:9DA8: 0B           	phd
  5065 08:9DA9: 5B           	tcd
  5066             00000004   buff_0	set	4
  5067             00000008   len_0	set	8
  5068                        	.block	1122
  5069                        	.sym	buff,4,142,6,32
  5070                        	.sym	len,8,16,6,16
  5071                        	.line	1122
  5072 08:9DAA: A9 00 00     	lda	#$0
  5073 08:9DAD: AA           	tax
  5074 08:9DAE: A9 00 00     	lda	#$0
  5075                        L156:
  5076 08:9DB1: A8           	tay
  5077 08:9DB2: A5 02        	lda	<L153+2
  5078 08:9DB4: 85 08        	sta	<L153+2+6
  5079 08:9DB6: A5 01        	lda	<L153+1
  5080 08:9DB8: 85 07        	sta	<L153+1+6
  5081 08:9DBA: 2B           	pld
  5082 08:9DBB: 3B           	tsc
  5083 08:9DBC: 18           	clc
  5084 08:9DBD: 69 06 00     	adc	#L153+6
  5085 08:9DC0: 1B           	tcs
  5086 08:9DC1: 98           	tya
  5087 08:9DC2: 6B           	rtl
  Sat Jul 10 2021  1:15                                                Page 101


  5088                        	.line	1122
  5089                        	.endblock	1122
  5090             00000000   L153	equ	0
  5091             00000001   L154	equ	1
  5092 08:9DC3:              	ends
  5093                        	efunc
  5094                        	.endfunc	1122,1,0
  5095                        	.line	1122
  5096                        ;HRESULT k_dos_getfree (const TCHAR* path, DWORD* 
                    nclst, FATFS** fatfs){return 0;}	/* Get number of free cl
                    usters on the drive */
  5097                        	.line	1123
  5098                        	.line	1123
  5099                        	FXDOS
  5100                        	xdef	~~k_dos_getfree
  5101                        	func
  5102                        	.function	1123
  5103                        ~~k_dos_getfree:
  5104                        	longa	on
  5105                        	longi	on
  5106 08:9DC3: 3B           	tsc
  5107 08:9DC4: 38           	sec
  5108 08:9DC5: E9 00 00     	sbc	#L157
  5109 08:9DC8: 1B           	tcs
  5110 08:9DC9: 0B           	phd
  5111 08:9DCA: 5B           	tcd
  5112             00000004   path_0	set	4
  5113             00000008   nclst_0	set	8
  5114             0000000C   fatfs_0	set	12
  5115                        	.block	1123
  5116                        	.sym	path,4,142,6,32
  5117                        	.sym	nclst,8,146,6,32
  5118                        	.sym	fatfs,12,1162,6,32,79
  5119                        	.line	1123
  5120 08:9DCB: A9 00 00     	lda	#$0
  5121 08:9DCE: AA           	tax
  5122 08:9DCF: A9 00 00     	lda	#$0
  5123                        L160:
  5124 08:9DD2: A8           	tay
  5125 08:9DD3: A5 02        	lda	<L157+2
  5126 08:9DD5: 85 0E        	sta	<L157+2+12
  5127 08:9DD7: A5 01        	lda	<L157+1
  5128 08:9DD9: 85 0D        	sta	<L157+1+12
  5129 08:9DDB: 2B           	pld
  5130 08:9DDC: 3B           	tsc
  5131 08:9DDD: 18           	clc
  5132 08:9DDE: 69 0C 00     	adc	#L157+12
  5133 08:9DE1: 1B           	tcs
  5134 08:9DE2: 98           	tya
  5135 08:9DE3: 6B           	rtl
  5136                        	.line	1123
  5137                        	.endblock	1123
  5138             00000000   L157	equ	0
  5139             00000001   L158	equ	1
  5140 08:9DE4:              	ends
  5141                        	efunc
  5142                        	.endfunc	1123,1,0
  5143                        	.line	1123
  Sat Jul 10 2021  1:15                                                Page 102


  5144                        ;HRESULT k_dos_getlabel (const TCHAR* path, TCHAR*
                     label, DWORD* vsn){return 0;}	/* Get volume label */
  5145                        	.line	1124
  5146                        	.line	1124
  5147                        	FXDOS
  5148                        	xdef	~~k_dos_getlabel
  5149                        	func
  5150                        	.function	1124
  5151                        ~~k_dos_getlabel:
  5152                        	longa	on
  5153                        	longi	on
  5154 08:9DE4: 3B           	tsc
  5155 08:9DE5: 38           	sec
  5156 08:9DE6: E9 00 00     	sbc	#L161
  5157 08:9DE9: 1B           	tcs
  5158 08:9DEA: 0B           	phd
  5159 08:9DEB: 5B           	tcd
  5160             00000004   path_0	set	4
  5161             00000008   label_0	set	8
  5162             0000000C   vsn_0	set	12
  5163                        	.block	1124
  5164                        	.sym	path,4,142,6,32
  5165                        	.sym	label,8,142,6,32
  5166                        	.sym	vsn,12,146,6,32
  5167                        	.line	1124
  5168 08:9DEC: A9 00 00     	lda	#$0
  5169 08:9DEF: AA           	tax
  5170 08:9DF0: A9 00 00     	lda	#$0
  5171                        L164:
  5172 08:9DF3: A8           	tay
  5173 08:9DF4: A5 02        	lda	<L161+2
  5174 08:9DF6: 85 0E        	sta	<L161+2+12
  5175 08:9DF8: A5 01        	lda	<L161+1
  5176 08:9DFA: 85 0D        	sta	<L161+1+12
  5177 08:9DFC: 2B           	pld
  5178 08:9DFD: 3B           	tsc
  5179 08:9DFE: 18           	clc
  5180 08:9DFF: 69 0C 00     	adc	#L161+12
  5181 08:9E02: 1B           	tcs
  5182 08:9E03: 98           	tya
  5183 08:9E04: 6B           	rtl
  5184                        	.line	1124
  5185                        	.endblock	1124
  5186             00000000   L161	equ	0
  5187             00000001   L162	equ	1
  5188 08:9E05:              	ends
  5189                        	efunc
  5190                        	.endfunc	1124,1,0
  5191                        	.line	1124
  5192                        ;HRESULT k_dos_setlabel (const TCHAR* label){retur
                    n 0;}							
                    /* Set volume label */
  5193                        	.line	1125
  5194                        	.line	1125
  5195                        	FXDOS
  5196                        	xdef	~~k_dos_setlabel
  5197                        	func
  5198                        	.function	1125
  Sat Jul 10 2021  1:15                                                Page 103


  5199                        ~~k_dos_setlabel:
  5200                        	longa	on
  5201                        	longi	on
  5202 08:9E05: 3B           	tsc
  5203 08:9E06: 38           	sec
  5204 08:9E07: E9 00 00     	sbc	#L165
  5205 08:9E0A: 1B           	tcs
  5206 08:9E0B: 0B           	phd
  5207 08:9E0C: 5B           	tcd
  5208             00000004   label_0	set	4
  5209                        	.block	1125
  5210                        	.sym	label,4,142,6,32
  5211                        	.line	1125
  5212 08:9E0D: A9 00 00     	lda	#$0
  5213 08:9E10: AA           	tax
  5214 08:9E11: A9 00 00     	lda	#$0
  5215                        L168:
  5216 08:9E14: A8           	tay
  5217 08:9E15: A5 02        	lda	<L165+2
  5218 08:9E17: 85 06        	sta	<L165+2+4
  5219 08:9E19: A5 01        	lda	<L165+1
  5220 08:9E1B: 85 05        	sta	<L165+1+4
  5221 08:9E1D: 2B           	pld
  5222 08:9E1E: 3B           	tsc
  5223 08:9E1F: 18           	clc
  5224 08:9E20: 69 04 00     	adc	#L165+4
  5225 08:9E23: 1B           	tcs
  5226 08:9E24: 98           	tya
  5227 08:9E25: 6B           	rtl
  5228                        	.line	1125
  5229                        	.endblock	1125
  5230             00000000   L165	equ	0
  5231             00000001   L166	equ	1
  5232 08:9E26:              	ends
  5233                        	efunc
  5234                        	.endfunc	1125,1,0
  5235                        	.line	1125
  5236                        ;HRESULT k_dos_forward (FIL* fp, UINT(*func)(const
                     BYTE*,UINT), UINT btf, UINT* bf){return 0;}	/* Forwa
                    rd data to the stream */
  5237                        	.line	1126
  5238                        	.line	1126
  5239                        	FXDOS
  5240                        	xdef	~~k_dos_forward
  5241                        	func
  5242                        	.function	1126
  5243                        ~~k_dos_forward:
  5244                        	longa	on
  5245                        	longi	on
  5246 08:9E26: 3B           	tsc
  5247 08:9E27: 38           	sec
  5248 08:9E28: E9 00 00     	sbc	#L169
  5249 08:9E2B: 1B           	tcs
  5250 08:9E2C: 0B           	phd
  5251 08:9E2D: 5B           	tcd
  5252             00000004   fp_0	set	4
  5253             00000008   func_0	set	8
  5254             0000000C   btf_0	set	12
  Sat Jul 10 2021  1:15                                                Page 104


  5255             0000000E   bf_0	set	14
  5256                        	.block	1126
  5257                        	.sym	fp,4,138,6,32,81
  5258                        	.sym	func,8,656,6,32
  5259                        	.sym	btf,12,16,6,16
  5260                        	.sym	bf,14,144,6,32
  5261                        	.line	1126
  5262 08:9E2E: A9 00 00     	lda	#$0
  5263 08:9E31: AA           	tax
  5264 08:9E32: A9 00 00     	lda	#$0
  5265                        L172:
  5266 08:9E35: A8           	tay
  5267 08:9E36: A5 02        	lda	<L169+2
  5268 08:9E38: 85 10        	sta	<L169+2+14
  5269 08:9E3A: A5 01        	lda	<L169+1
  5270 08:9E3C: 85 0F        	sta	<L169+1+14
  5271 08:9E3E: 2B           	pld
  5272 08:9E3F: 3B           	tsc
  5273 08:9E40: 18           	clc
  5274 08:9E41: 69 0E 00     	adc	#L169+14
  5275 08:9E44: 1B           	tcs
  5276 08:9E45: 98           	tya
  5277 08:9E46: 6B           	rtl
  5278                        	.line	1126
  5279                        	.endblock	1126
  5280             00000000   L169	equ	0
  5281             00000001   L170	equ	1
  5282 08:9E47:              	ends
  5283                        	efunc
  5284                        	.endfunc	1126,1,0
  5285                        	.line	1126
  5286                        ;HRESULT k_dos_expand (FIL* fp, FSIZE_t fsz, BYTE 
                    opt){return 0;}					/* Alloc
                    ate a contiguous block to the file */
  5287                        	.line	1127
  5288                        	.line	1127
  5289                        	FXDOS
  5290                        	xdef	~~k_dos_expand
  5291                        	func
  5292                        	.function	1127
  5293                        ~~k_dos_expand:
  5294                        	longa	on
  5295                        	longi	on
  5296 08:9E47: 3B           	tsc
  5297 08:9E48: 38           	sec
  5298 08:9E49: E9 00 00     	sbc	#L173
  5299 08:9E4C: 1B           	tcs
  5300 08:9E4D: 0B           	phd
  5301 08:9E4E: 5B           	tcd
  5302             00000004   fp_0	set	4
  5303             00000008   fsz_0	set	8
  5304             0000000C   opt_0	set	12
  5305                        	.block	1127
  5306                        	.sym	fp,4,138,6,32,81
  5307                        	.sym	fsz,8,18,6,32
  5308                        	.sym	opt,12,14,6,8
  5309                        	.line	1127
  5310 08:9E4F: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 105


  5311 08:9E52: AA           	tax
  5312 08:9E53: A9 00 00     	lda	#$0
  5313                        L176:
  5314 08:9E56: A8           	tay
  5315 08:9E57: A5 02        	lda	<L173+2
  5316 08:9E59: 85 0C        	sta	<L173+2+10
  5317 08:9E5B: A5 01        	lda	<L173+1
  5318 08:9E5D: 85 0B        	sta	<L173+1+10
  5319 08:9E5F: 2B           	pld
  5320 08:9E60: 3B           	tsc
  5321 08:9E61: 18           	clc
  5322 08:9E62: 69 0A 00     	adc	#L173+10
  5323 08:9E65: 1B           	tcs
  5324 08:9E66: 98           	tya
  5325 08:9E67: 6B           	rtl
  5326                        	.line	1127
  5327                        	.endblock	1127
  5328             00000000   L173	equ	0
  5329             00000001   L174	equ	1
  5330 08:9E68:              	ends
  5331                        	efunc
  5332                        	.endfunc	1127,1,0
  5333                        	.line	1127
  5334                        ;HRESULT k_dos_mount (FATFS* fs, const TCHAR* path
                    , BYTE opt){return 0;}			/* Mount/Unmount
                     a logical drive */
  5335                        	.line	1128
  5336                        	.line	1128
  5337                        	FXDOS
  5338                        	xdef	~~k_dos_mount
  5339                        	func
  5340                        	.function	1128
  5341                        ~~k_dos_mount:
  5342                        	longa	on
  5343                        	longi	on
  5344 08:9E68: 3B           	tsc
  5345 08:9E69: 38           	sec
  5346 08:9E6A: E9 00 00     	sbc	#L177
  5347 08:9E6D: 1B           	tcs
  5348 08:9E6E: 0B           	phd
  5349 08:9E6F: 5B           	tcd
  5350             00000004   fs_0	set	4
  5351             00000008   path_0	set	8
  5352             0000000C   opt_0	set	12
  5353                        	.block	1128
  5354                        	.sym	fs,4,138,6,32,79
  5355                        	.sym	path,8,142,6,32
  5356                        	.sym	opt,12,14,6,8
  5357                        	.line	1128
  5358 08:9E70: A9 00 00     	lda	#$0
  5359 08:9E73: AA           	tax
  5360 08:9E74: A9 00 00     	lda	#$0
  5361                        L180:
  5362 08:9E77: A8           	tay
  5363 08:9E78: A5 02        	lda	<L177+2
  5364 08:9E7A: 85 0C        	sta	<L177+2+10
  5365 08:9E7C: A5 01        	lda	<L177+1
  5366 08:9E7E: 85 0B        	sta	<L177+1+10
  Sat Jul 10 2021  1:15                                                Page 106


  5367 08:9E80: 2B           	pld
  5368 08:9E81: 3B           	tsc
  5369 08:9E82: 18           	clc
  5370 08:9E83: 69 0A 00     	adc	#L177+10
  5371 08:9E86: 1B           	tcs
  5372 08:9E87: 98           	tya
  5373 08:9E88: 6B           	rtl
  5374                        	.line	1128
  5375                        	.endblock	1128
  5376             00000000   L177	equ	0
  5377             00000001   L178	equ	1
  5378 08:9E89:              	ends
  5379                        	efunc
  5380                        	.endfunc	1128,1,0
  5381                        	.line	1128
  5382                        ;HRESULT k_dos_mkfs (const TCHAR* path, const MKFS
                    _PARM* opt, void* work, UINT len){return 0;}	/* Creat
                    e a FAT volume */
  5383                        	.line	1129
  5384                        	.line	1129
  5385                        	FXDOS
  5386                        	xdef	~~k_dos_mkfs
  5387                        	func
  5388                        	.function	1129
  5389                        ~~k_dos_mkfs:
  5390                        	longa	on
  5391                        	longi	on
  5392 08:9E89: 3B           	tsc
  5393 08:9E8A: 38           	sec
  5394 08:9E8B: E9 00 00     	sbc	#L181
  5395 08:9E8E: 1B           	tcs
  5396 08:9E8F: 0B           	phd
  5397 08:9E90: 5B           	tcd
  5398             00000004   path_0	set	4
  5399             00000008   opt_0	set	8
  5400             0000000C   work_0	set	12
  5401             00000010   len_0	set	16
  5402                        	.block	1129
  5403                        	.sym	path,4,142,6,32
  5404                        	.sym	opt,8,138,6,32,84
  5405                        	.sym	work,12,129,6,32
  5406                        	.sym	len,16,16,6,16
  5407                        	.line	1129
  5408 08:9E91: A9 00 00     	lda	#$0
  5409 08:9E94: AA           	tax
  5410 08:9E95: A9 00 00     	lda	#$0
  5411                        L184:
  5412 08:9E98: A8           	tay
  5413 08:9E99: A5 02        	lda	<L181+2
  5414 08:9E9B: 85 10        	sta	<L181+2+14
  5415 08:9E9D: A5 01        	lda	<L181+1
  5416 08:9E9F: 85 0F        	sta	<L181+1+14
  5417 08:9EA1: 2B           	pld
  5418 08:9EA2: 3B           	tsc
  5419 08:9EA3: 18           	clc
  5420 08:9EA4: 69 0E 00     	adc	#L181+14
  5421 08:9EA7: 1B           	tcs
  5422 08:9EA8: 98           	tya
  Sat Jul 10 2021  1:15                                                Page 107


  5423 08:9EA9: 6B           	rtl
  5424                        	.line	1129
  5425                        	.endblock	1129
  5426             00000000   L181	equ	0
  5427             00000001   L182	equ	1
  5428 08:9EAA:              	ends
  5429                        	efunc
  5430                        	.endfunc	1129,1,0
  5431                        	.line	1129
  5432                        ;HRESULT k_dos_fdisk (BYTE pdrv, const LBA_t ptbl[
                    ], void* work){return 0;}		/* Divide a physical dri
                    ve into some partitions */
  5433                        	.line	1130
  5434                        	.line	1130
  5435                        	FXDOS
  5436                        	xdef	~~k_dos_fdisk
  5437                        	func
  5438                        	.function	1130
  5439                        ~~k_dos_fdisk:
  5440                        	longa	on
  5441                        	longi	on
  5442 08:9EAA: 3B           	tsc
  5443 08:9EAB: 38           	sec
  5444 08:9EAC: E9 00 00     	sbc	#L185
  5445 08:9EAF: 1B           	tcs
  5446 08:9EB0: 0B           	phd
  5447 08:9EB1: 5B           	tcd
  5448             00000004   pdrv_0	set	4
  5449             00000006   ptbl_0	set	6
  5450             0000000A   work_0	set	10
  5451                        	.block	1130
  5452                        	.sym	pdrv,4,14,6,8
  5453                        	.sym	ptbl,6,146,6,32
  5454                        	.sym	work,10,129,6,32
  5455                        	.line	1130
  5456 08:9EB2: A9 00 00     	lda	#$0
  5457 08:9EB5: AA           	tax
  5458 08:9EB6: A9 00 00     	lda	#$0
  5459                        L188:
  5460 08:9EB9: A8           	tay
  5461 08:9EBA: A5 02        	lda	<L185+2
  5462 08:9EBC: 85 0C        	sta	<L185+2+10
  5463 08:9EBE: A5 01        	lda	<L185+1
  5464 08:9EC0: 85 0B        	sta	<L185+1+10
  5465 08:9EC2: 2B           	pld
  5466 08:9EC3: 3B           	tsc
  5467 08:9EC4: 18           	clc
  5468 08:9EC5: 69 0A 00     	adc	#L185+10
  5469 08:9EC8: 1B           	tcs
  5470 08:9EC9: 98           	tya
  5471 08:9ECA: 6B           	rtl
  5472                        	.line	1130
  5473                        	.endblock	1130
  5474             00000000   L185	equ	0
  5475             00000001   L186	equ	1
  5476 08:9ECB:              	ends
  5477                        	efunc
  5478                        	.endfunc	1130,1,0
  Sat Jul 10 2021  1:15                                                Page 108


  5479                        	.line	1130
  5480                        ;HRESULT k_dos_setcp (WORD cp){return 0;}
  5481                        	.line	1131
  5482                        	.line	1131
  5483                        	FXDOS
  5484                        	xdef	~~k_dos_setcp
  5485                        	func
  5486                        	.function	1131
  5487                        ~~k_dos_setcp:
  5488                        	longa	on
  5489                        	longi	on
  5490 08:9ECB: 3B           	tsc
  5491 08:9ECC: 38           	sec
  5492 08:9ECD: E9 00 00     	sbc	#L189
  5493 08:9ED0: 1B           	tcs
  5494 08:9ED1: 0B           	phd
  5495 08:9ED2: 5B           	tcd
  5496             00000004   cp_0	set	4
  5497                        	.block	1131
  5498                        	.sym	cp,4,5,6,16
  5499                        	.line	1131
  5500 08:9ED3: A9 00 00     	lda	#$0
  5501 08:9ED6: AA           	tax
  5502 08:9ED7: A9 00 00     	lda	#$0
  5503                        L192:
  5504 08:9EDA: A8           	tay
  5505 08:9EDB: A5 02        	lda	<L189+2
  5506 08:9EDD: 85 04        	sta	<L189+2+2
  5507 08:9EDF: A5 01        	lda	<L189+1
  5508 08:9EE1: 85 03        	sta	<L189+1+2
  5509 08:9EE3: 2B           	pld
  5510 08:9EE4: 3B           	tsc
  5511 08:9EE5: 18           	clc
  5512 08:9EE6: 69 02 00     	adc	#L189+2
  5513 08:9EE9: 1B           	tcs
  5514 08:9EEA: 98           	tya
  5515 08:9EEB: 6B           	rtl
  5516                        	.line	1131
  5517                        	.endblock	1131
  5518             00000000   L189	equ	0
  5519             00000001   L190	equ	1
  5520 08:9EEC:              	ends
  5521                        	efunc
  5522                        	.endfunc	1131,1,0
  5523                        	.line	1131
  5524                        ;
  5525                        ;
  5526                        ;
  5527                        ;
  5528                        	.line	1134
  5529                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.c",1131
  5530                        	xref	~~f_mount
  5531                        	xref	~~f_findnext
  5532                        	xref	~~f_findfirst
  5533                        	xref	~~f_closedir
  5534                        	xref	~~f_opendir
  5535                        	xref	~~k_mem_deallocate_heap
  Sat Jul 10 2021  1:15                                                Page 109


  5536                        	xref	~~k_mem_allocate_heap
  5537                        	xref	~~k_string_copy_to_delimiter
  5538                        	xref	~~k_get_c256_minor_version
  5539                        	xref	~~k_get_c256_major_version
  5540                        	xref	~~k_debug_nstrings
  5541                        	xref	~~k_debug_integer
  5542                        	xref	~~k_debug_pointer
  5543                        	xref	~~k_nodelist_removefromlist
  5544                        	xref	~~k_nodelist_searchByType
  5545                        	xref	~~k_nodelist_addtolist
  5546                        	xref	~~k_nodelist_allocate_list
  5547                        	xref	~~strcpy
  5548                        	xref	~~strcmp
  5549                        	xref	~~strcat
  5550                        	xref	~~memset
  5551                        	udata
  5552                        	xdef	~~fxdosDevice
  5553                        ~~fxdosDevice
  5554 00:0000:              	ds	718
  5555 00:02CE:              	ends
  5556                        	.sym	~~k_dos_deallocate_fileinfo,~~k_dos_deal
                    locate_fileinfo,65,2,0
  5557                        	.sym	~~k_get_dos_device,~~k_get_dos_device,10
                    98,2,32,122
  5558                        	.sym	~~_k_dos_deviceinstance,~~_k_dos_devicei
                    nstance,138,3,32,6
  5559                        	.sym	~~_k_dos_devicedrivers,~~_k_dos_devicedr
                    ivers,138,3,32,6
  5560                        	.sym	~~fxdosDevice,~~fxdosDevice,10,2,5744,12
                    2
  5561                        	.sym	~~sectorBuffer,~~sectorBuffer,142,3,32
  5562                        	.sym	~~k_dos_setcp,~~k_dos_setcp,82,2,0
  5563                        	.sym	~~k_dos_fdisk,~~k_dos_fdisk,82,2,0
  5564                        	.sym	~~k_dos_mkfs,~~k_dos_mkfs,82,2,0
  5565                        	.sym	~~k_dos_mount,~~k_dos_mount,82,2,0
  5566                        	.sym	~~k_dos_expand,~~k_dos_expand,82,2,0
  5567                        	.sym	~~k_dos_forward,~~k_dos_forward,82,2,0
  5568                        	.sym	~~k_dos_setlabel,~~k_dos_setlabel,82,2,0
  5569                        	.sym	~~k_dos_getlabel,~~k_dos_getlabel,82,2,0
  5570                        	.sym	~~k_dos_getfree,~~k_dos_getfree,82,2,0
  5571                        	.sym	~~k_dos_getcwd,~~k_dos_getcwd,82,2,0
  5572                        	.sym	~~k_dos_chdrive,~~k_dos_chdrive,82,2,0
  5573                        	.sym	~~k_dos_chdir,~~k_dos_chdir,82,2,0
  5574                        	.sym	~~k_dos_utime,~~k_dos_utime,82,2,0
  5575                        	.sym	~~k_dos_chmod,~~k_dos_chmod,82,2,0
  5576                        	.sym	~~k_dos_stat,~~k_dos_stat,82,2,0
  5577                        	.sym	~~k_dos_rename,~~k_dos_rename,82,2,0
  5578                        	.sym	~~k_dos_unlink,~~k_dos_unlink,82,2,0
  5579                        	.sym	~~k_dos_mkdir,~~k_dos_mkdir,82,2,0
  5580                        	.sym	~~k_dos_findnext,~~k_dos_findnext,82,2,0
  5581                        	.sym	~~k_dos_findfirst,~~k_dos_findfirst,82,2
                    ,0
  5582                        	.sym	~~k_dos_readdir,~~k_dos_readdir,82,2,0
  5583                        	.sym	~~k_dos_closedir,~~k_dos_closedir,82,2,0
  5584                        	.sym	~~k_dos_opendir,~~k_dos_opendir,82,2,0
  5585                        	.sym	~~k_dos_sync,~~k_dos_sync,82,2,0
  5586                        	.sym	~~k_dos_truncate,~~k_dos_truncate,82,2,0
  5587                        	.sym	~~k_dos_lseek,~~k_dos_lseek,82,2,0
  Sat Jul 10 2021  1:15                                                Page 110


  5588                        	.sym	~~k_dos_write,~~k_dos_write,82,2,0
  5589                        	.sym	~~k_dos_read,~~k_dos_read,82,2,0
  5590                        	.sym	~~k_dos_close,~~k_dos_close,82,2,0
  5591                        	.sym	~~k_dos_open,~~k_dos_open,82,2,0
  5592                        	.sym	~~k_dos_findfiles_to_nodes,~~k_dos_findf
                    iles_to_nodes,1098,2,32,6
  5593                        	.sym	~~k_get_device_driver,~~k_get_device_dri
                    ver,1098,2,32,55
  5594                        	.sym	~~k_dos_load_drivers,~~k_dos_load_driver
                    s,1102,2,32
  5595                        	.sym	~~k_read_dos_directory,~~k_read_dos_dire
                    ctory,1098,2,32,6
  5596                        	.sym	~~k_close_dos_device,~~k_close_dos_devic
                    e,78,2,0
  5597                        	.sym	~~k_create_dos_device,~~k_create_dos_dev
                    ice,1098,2,32,122
  5598                        	.sym	PDOSHANDLE,0,138,14,32,124
  5599                        	.sym	DOSHANDLE,0,10,14,80,124
  5600                        	.sym	PFXDOSDEVICE,0,138,14,32,122
  5601                        	.sym	FXDOSDEVICE,0,10,14,5744,122
  5602                        	.sym	DOSINITDEVICE,0,641,14,32
  5603                        	.sym	DOSSECTORWRITER,0,654,14,32
  5604                        	.sym	DOSSECTORREADER,0,654,14,32
  5605                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,121
  5606                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,121
  5607                        	.sym	PIDSECTOR,0,138,14,32,98
  5608                        	.sym	IDSECTOR,0,10,14,2048,98
  5609                        	.sym	PLFN,0,138,14,32,97
  5610                        	.sym	LFN,0,10,14,256,97
  5611                        	.sym	PFAT16ENTRYLONG,0,138,14,32,96
  5612                        	.sym	FAT16ENTRYLONG,0,10,14,288,96
  5613                        	.sym	PFAT16ENTRY,0,138,14,32,95
  5614                        	.sym	FAT16ENTRY,0,10,14,256,95
  5615                        	.sym	Fat16BootSector,0,10,14,4096,94
  5616                        	.sym	PPARTITIONTABLE,0,138,14,32,93
  5617                        	.sym	PARTITIONTABLE,0,10,14,128,93
  5618                        	.sym	PFATBOOTSECTOR,0,138,14,32,92
  5619                        	.sym	FATBOOTSECTOR,0,10,14,928,92
  5620                        	.sym	fat_BS_t,0,10,14,688,91
  5621                        	.sym	fat_extBS_16_t,0,10,14,192,90
  5622                        	.sym	PFAT32EXT,0,138,14,32,89
  5623                        	.sym	fat_extBS_32_t,0,10,14,416,89
  5624                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,88
  5625                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,88
  5626                        	.sym	PFILEINFO,0,138,14,32,87
  5627                        	.sym	FILEINFO,0,10,14,136,87
  5628                        	.sym	PDISKINFO,0,138,14,32,86
  5629                        	.sym	DISKINFO,0,10,14,416,86
  5630                        	.sym	PDIRENTRY,0,138,14,32,85
  5631                        	.sym	DIRENTRY,0,10,14,256,85
  5632                        	.sym	DRESULT,0,5,14,16
  5633                        	.sym	DSTATUS,0,14,14,8
  5634                        	.sym	~~f_mount,~~f_mount,69,18,0
  5635                        	.sym	~~f_findnext,~~f_findnext,69,18,0
  5636                        	.sym	~~f_findfirst,~~f_findfirst,69,18,0
  5637                        	.sym	~~f_closedir,~~f_closedir,69,18,0
  5638                        	.sym	~~f_opendir,~~f_opendir,69,18,0
  5639                        	.sym	FRESULT,0,5,14,16
  Sat Jul 10 2021  1:15                                                Page 111


  5640                        	.sym	MKFS_PARM,0,10,14,80,84
  5641                        	.sym	FILINFO,0,10,14,2224,83
  5642                        	.sym	DIR,0,10,14,416,82
  5643                        	.sym	FIL,0,10,14,4400,81
  5644                        	.sym	FFOBJID,0,10,14,128,80
  5645                        	.sym	FATFS,0,10,14,4504,79
  5646                        	.sym	LBA_t,0,18,14,32
  5647                        	.sym	FSIZE_t,0,18,14,32
  5648                        	.sym	TCHAR,0,14,14,8
  5649                        	.sym	PCOMMANDARGS,0,138,14,32,78
  5650                        	.sym	COMMANDARGS,0,10,14,64,78
  5651                        	.sym	PTOKENIZESTATE,0,133,14,32
  5652                        	.sym	TOKENIZESTATE,0,5,14,16
  5653                        	.sym	PTOKEN,0,138,14,32,77
  5654                        	.sym	TOKEN,0,10,14,64,77
  5655                        	.sym	PTOKENTYPE,0,133,14,32
  5656                        	.sym	TOKENTYPE,0,5,14,16
  5657                        	.sym	FXCommandHandler,0,656,14,32
  5658                        	.sym	PCONSOLECTX,0,138,14,32,76
  5659                        	.sym	CONSOLECTX,0,10,14,1144,76
  5660                        	.sym	PSPINNERCTX,0,138,14,32,75
  5661                        	.sym	SPINNERCTX,0,10,14,48,75
  5662                        	.sym	HCLIP,0,138,14,32,74
  5663                        	.sym	PCLIPBOARD_DATA,0,138,14,32,74
  5664                        	.sym	CLIPBOARD_DATA,0,10,14,168,74
  5665                        	.sym	PEVENTMANAGER,0,138,14,32,73
  5666                        	.sym	EVENTMANAGER,0,10,14,192,73
  5667                        	.sym	EV_RUN,0,656,14,32
  5668                        	.sym	EV_QUERY_METRIC,0,656,14,32
  5669                        	.sym	EV_CONFIGURE,0,656,14,32
  5670                        	.sym	EV_UNINIT,0,641,14,32
  5671                        	.sym	EV_INIT,0,8833,14,32
  5672                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,72
  5673                        	.sym	MOUSE_MSG_STATE,0,10,14,184,72
  5674                        	.sym	PFXEVENTPROCESS,0,138,14,32,71
  5675                        	.sym	FXEVENTPROCESS,0,10,14,64,71
  5676                        	.sym	PMARSHALDATA,0,139,14,32,70
  5677                        	.sym	MARSHALDATA,0,11,14,32,70
  5678                        	.sym	FXIDLEPROCESS,0,641,14,32
  5679                        	.sym	FXEventProc,0,641,14,32
  5680                        	.sym	PMOUSEMSGDATA,0,138,14,32,69
  5681                        	.sym	MOUSEMSGDATA,0,10,14,64,69
  5682                        	.sym	MSGIRQ,0,5,14,16
  5683                        	.sym	MAINLOOPARGS,0,10,14,16,68
  5684                        	.sym	PEACHCHILD_MSG,0,138,14,32,67
  5685                        	.sym	EACHCHILD_MSG,0,10,14,64,67
  5686                        	.sym	PMSGBOX_DATA,0,138,14,32,66
  5687                        	.sym	MSGBOX_DATA,0,10,14,96,66
  5688                        	.sym	PDESKTOP_DATA,0,138,14,32,65
  5689                        	.sym	DESKTOP_DATA,0,10,14,64,65
  5690                        	.sym	PWINDOWMANAGER,0,138,14,32,64
  5691                        	.sym	WINDOWMANAGER,0,10,14,160,64
  5692                        	.sym	WM_DOPROCS,0,641,14,32
  5693                        	.sym	WM_QUERY_METRIC,0,656,14,32
  5694                        	.sym	WM_CONFIGURE,0,656,14,32
  5695                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  5696                        	.sym	WM_EVENTS,0,641,14,32
  5697                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,63
  Sat Jul 10 2021  1:15                                                Page 112


  5698                        	.sym	CUR_PALETTE_MAP,0,10,14,400,63
  5699                        	.sym	PCLICKDETECTED,0,138,14,32,62
  5700                        	.sym	CLICKDETECTED,0,10,14,64,62
  5701                        	.sym	OBJECTCLICKED,0,641,14,32
  5702                        	.sym	PIPCPORT,0,138,14,32,61
  5703                        	.sym	IPCPORT,0,10,14,144,61
  5704                        	.sym	~~k_mem_deallocate_heap,~~k_mem_dealloca
                    te_heap,65,18,0
  5705                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
  5706                        	.sym	MemoryCallback,0,641,14,32
  5707                        	.sym	PFXMEMORYMAP,0,138,14,32,60
  5708                        	.sym	FXMEMORYMAP,0,10,14,2072,60
  5709                        	.sym	UMM_HEAP_INFO,0,10,14,256,59
  5710                        	.sym	PEXECUTIVE,0,138,14,32,58
  5711                        	.sym	EXECUTIVE,0,10,14,128,58
  5712                        	.sym	EX_QUERY_METRIC,0,656,14,32
  5713                        	.sym	EX_CONFIGURE,0,656,14,32
  5714                        	.sym	EX_UNINIT,0,641,14,32
  5715                        	.sym	EX_INIT,0,8833,14,32
  5716                        	.sym	~~k_string_copy_to_delimiter,~~k_string_
                    copy_to_delimiter,1102,18,32
  5717                        	.sym	PFXSTRING,0,138,14,32,57
  5718                        	.sym	FXSTRING,0,10,14,64,57
  5719                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  5720                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  5721                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  5722                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  5723                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  5724                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
  5725                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,56
  5726                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,56
  5727                        	.sym	GETDRIVERDEF,0,8842,14,32,55
  5728                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,55
  5729                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,55
  5730                        	.sym	~~k_get_c256_minor_version,~~k_get_c256_
                    minor_version,65,18,0
  5731                        	.sym	~~k_get_c256_major_version,~~k_get_c256_
                    major_version,65,18,0
  5732                        	.sym	~~k_debug_nstrings,~~k_debug_nstrings,65
                    ,18,0
  5733                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  5734                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
  5735                        	.sym	PSEGMENTHEADER,0,138,14,32,54
  5736                        	.sym	SEGMENTHEADER,0,10,14,160,54
  5737                        	.sym	PDEBUGBYTEBITS,0,138,14,32,53
  5738                        	.sym	DEBUGBYTEBITS,0,10,14,8,53
  5739                        	.sym	PFXENVIRONMENT,0,138,14,32,52
  5740                        	.sym	FXENVIRONMENT,0,10,14,96,52
  5741                        	.sym	PFXZEROPAGE,0,138,14,32,51
  5742                        	.sym	FXZEROPAGE,0,10,14,824,51
  5743                        	.sym	KERNELTRAPCALL,0,641,14,32
  5744                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,50
  5745                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,50
  5746                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  5747                        	.sym	FOREACHNODE,0,641,14,32
  Sat Jul 10 2021  1:15                                                Page 113


  5748                        	.sym	~~k_nodelist_removefromlist,~~k_nodelist
                    _removefromlist,1098,18,32,5
  5749                        	.sym	~~k_nodelist_searchByType,~~k_nodelist_s
                    earchByType,1098,18,32,5
  5750                        	.sym	~~k_nodelist_addtolist,~~k_nodelist_addt
                    olist,1098,18,32,5
  5751                        	.sym	~~k_nodelist_allocate_list,~~k_nodelist_
                    allocate_list,1098,18,32,6
  5752                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
  5753                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
  5754                        	.sym	PFXRFHEADER,0,138,14,32,48
  5755                        	.sym	FXRFHEADER,0,10,14,72,48
  5756                        	.sym	PFXCOMBUFFER,0,138,14,32,47
  5757                        	.sym	FXCOMBUFFER,0,10,14,2080,47
  5758                        	.sym	PSUBMENULIST,0,138,14,32,46
  5759                        	.sym	SUBMENULIST,0,10,14,40,46
  5760                        	.sym	HSUBMENU,0,7,14,32
  5761                        	.sym	PSUBMENU,0,138,14,32,45
  5762                        	.sym	SUBMENU,0,10,14,64,45
  5763                        	.sym	MenuAction,0,641,14,32
  5764                        	.sym	PMENUANCHOR,0,138,14,32,44
  5765                        	.sym	MENUANCHOR,0,10,14,272,44
  5766                        	.sym	PMSGBOX,0,138,14,32,43
  5767                        	.sym	MSGBOX,0,10,14,144,43
  5768                        	.sym	PTEXTBOX,0,138,14,32,42
  5769                        	.sym	TEXTBOX,0,10,14,144,42
  5770                        	.sym	PLISTBOX,0,138,14,32,41
  5771                        	.sym	LISTBOX,0,10,14,240,41
  5772                        	.sym	PSCROLLBAR,0,138,14,32,40
  5773                        	.sym	SCROLLBAR,0,10,14,240,40
  5774                        	.sym	PBUTTON,0,138,14,32,39
  5775                        	.sym	BUTTON,0,10,14,96,39
  5776                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
  5777                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
  5778                        	.sym	PMENUTAG,0,138,14,32,37
  5779                        	.sym	MENUTAG,0,10,14,160,37
  5780                        	.sym	PMENU,0,138,14,32,36
  5781                        	.sym	MENU,0,10,14,280,36
  5782                        	.sym	HMENURESOURCE,0,129,14,32
  5783                        	.sym	FONTMETRIC,0,10,14,32,35
  5784                        	.sym	TITLE,0,142,14,32
  5785                        	.sym	PHANDLE,0,1153,14,32
  5786                        	.sym	HANDLE,0,129,14,32
  5787                        	.sym	PWINDOWEX,0,138,14,32,34
  5788                        	.sym	WINDOWEX,0,10,14,3880,34
  5789                        	.sym	PWINDOW,0,138,14,32,33
  5790                        	.sym	WINDOW,0,10,14,3904,33
  5791                        	.sym	PDRAGDATA,0,138,14,32,32
  5792                        	.sym	DRAGDATA,0,10,14,216,32
  5793                        	.sym	PNCCLICKABLE,0,138,14,32,31
  5794                        	.sym	NCCLICKABLE,0,10,14,136,31
  5795                        	.sym	HCLICKABLE,0,7,14,32
  5796                        	.sym	PCLICKABLE,0,138,14,32,30
  5797                        	.sym	CLICKABLE,0,10,14,152,30
  5798                        	.sym	PWNDCLASS,0,138,14,32,29
  5799                        	.sym	WNDCLASS,0,10,14,272,29
  5800                        	.sym	HBRUSH,0,129,14,32
  5801                        	.sym	HCURSOR,0,129,14,32
  Sat Jul 10 2021  1:15                                                Page 114


  5802                        	.sym	HICON,0,129,14,32
  5803                        	.sym	HINSTANCE,0,129,14,32
  5804                        	.sym	FXWndProc,0,654,14,32
  5805                        	.sym	PDRECT,0,138,14,32,28
  5806                        	.sym	DRECT,0,10,14,112,28
  5807                        	.sym	PRECTP,0,138,14,32,27
  5808                        	.sym	RECTP,0,10,14,96,27
  5809                        	.sym	PRECT,0,138,14,32,26
  5810                        	.sym	RECT,0,10,14,112,26
  5811                        	.sym	PPOINT,0,138,14,32,25
  5812                        	.sym	POINT,0,10,14,32,25
  5813                        	.sym	PFXPROPERTY,0,138,14,32,23
  5814                        	.sym	FXPROPERTY,0,10,14,384,23
  5815                        	.sym	PKEYSTATE,0,138,14,32,22
  5816                        	.sym	KEYSTATE,0,10,14,112,22
  5817                        	.sym	SCANCODE,0,14,14,8
  5818                        	.sym	KEYCODE,0,16,14,16
  5819                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
  5820                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
  5821                        	.sym	PFXPROCESS,0,138,14,32,20
  5822                        	.sym	FXPROCESS,0,10,14,800,20
  5823                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
  5824                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
  5825                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
  5826                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
  5827                        	.sym	FXProcessProc,0,641,14,32
  5828                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
  5829                        	.sym	FXCMDMESSAGE,0,10,14,304,17
  5830                        	.sym	PFXOSMESSAGE,0,138,14,32,16
  5831                        	.sym	FXOSMESSAGE,0,10,14,304,16
  5832                        	.sym	PINT_REGS,0,138,14,32,15
  5833                        	.sym	INT_REGS,0,10,14,104,15
  5834                        	.sym	TASK_STACK,0,10,14,32,14
  5835                        	.sym	TASK,0,10,14,48,13
  5836                        	.sym	PIRQDATA,0,138,14,32,12
  5837                        	.sym	IRQDATA,0,10,14,48,12
  5838                        	.sym	HMENU,0,129,14,32
  5839                        	.sym	HWND,0,129,14,32
  5840                        	.sym	MSGDATA,0,14,14,8
  5841                        	.sym	MSGDEST,0,18,14,32
  5842                        	.sym	MSGSRC,0,18,14,32
  5843                        	.sym	MSGTYPE,0,16,14,16
  5844                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
  5845                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
  5846                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
  5847                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
  5848                        	.sym	FILE_PATH_LIST,0,138,14,32,6
  5849                        	.sym	PROCEDURE_LIST,0,138,14,32,6
  5850                        	.sym	FILE_HANDLE,0,138,14,32,11
  5851                        	.sym	FILE_BLOCK,0,10,14,552,11
  5852                        	.sym	SEMAPHORE,0,10,14,16,10
  5853                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
  5854                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
  5855                        	.sym	KRESULT,0,18,14,32
  5856                        	.sym	PKERNEL_ERROR,0,138,14,32,8
  5857                        	.sym	KERNEL_ERROR,0,10,14,32,8
  5858                        	.sym	PROCESS_STATUS,0,16,14,16
  5859                        	.sym	FILE_PATH_NAME,0,142,14,32
  Sat Jul 10 2021  1:15                                                Page 115


  5860                        	.sym	PROCESS_RESOURCE,0,129,14,32
  5861                        	.sym	PROCESS_TLS,0,129,14,32
  5862                        	.sym	PROCESS_CTX,0,129,14,32
  5863                        	.sym	USERID,0,16,14,16
  5864                        	.sym	PROCESS_ID,0,18,14,32
  5865                        	.sym	PROCESS_BANK,0,14,14,8
  5866                        	.sym	PFXQUEUE,0,138,14,32,7
  5867                        	.sym	FXQUEUE,0,10,14,80,7
  5868                        	.sym	PFXNODELIST,0,138,14,32,6
  5869                        	.sym	FXNODELIST,0,10,14,96,6
  5870                        	.sym	NodeListDeallocator,0,641,14,32
  5871                        	.sym	PFXNODE,0,138,14,32,5
  5872                        	.sym	FXNODE,0,10,14,384,5
  5873                        	.sym	PBYTEBITS,0,138,14,32,4
  5874                        	.sym	BYTEBITS,0,10,14,8,4
  5875                        	.sym	HRESULT,0,18,14,32
  5876                        	.sym	LPWCHAR,0,144,14,32
  5877                        	.sym	WCHAR,0,16,14,16
  5878                        	.sym	HCOLOR,0,129,14,32
  5879                        	.sym	HFONT,0,129,14,32
  5880                        	.sym	HDC,0,129,14,32
  5881                        	.sym	HPOINTER,0,129,14,32
  5882                        	.sym	uint32_t,0,18,14,32
  5883                        	.sym	uint8_t,0,14,14,8
  5884                        	.sym	LPBOOL,0,142,14,32
  5885                        	.sym	BOOL,0,14,14,8
  5886                        	.sym	DWORD,0,18,14,32
  5887                        	.sym	ULONG,0,18,14,32
  5888                        	.sym	LPLONG,0,135,14,32
  5889                        	.sym	LONG,0,7,14,32
  5890                        	.sym	PUINT,0,144,14,32
  5891                        	.sym	USHORT,0,16,14,16
  5892                        	.sym	UINT,0,16,14,16
  5893                        	.sym	INT,0,5,14,16
  5894                        	.sym	WORD,0,5,14,16
  5895                        	.sym	PBYTE,0,142,14,32
  5896                        	.sym	BYTE,0,14,14,8
  5897                        	.sym	IOPORT,0,142,14,32
  5898                        	.sym	PUCHAR,0,142,14,32
  5899                        	.sym	UCHAR,0,14,14,8
  5900                        	.sym	LPWCSTR,0,142,14,32
  5901                        	.sym	LPCSTR,0,142,14,32
  5902                        	.sym	LPSTR,0,142,14,32
  5903                        	.sym	LPCHAR,0,142,14,32
  5904                        	.sym	CHAR,0,14,14,8
  5905                        	.sym	LPVOID,0,129,14,32
  5906                        	.sym	VOID,0,1,14,32
  5907                        	.sym	~~strcpy,~~strcpy,1102,18,32
  5908                        	.sym	~~strcmp,~~strcmp,69,18,0
  5909                        	.sym	~~strcat,~~strcat,1102,18,32
  5910                        	.sym	~~memset,~~memset,1089,18,32
  5911                        	.sym	Boolean_T,0,5,14,16
  5912                        	.sym	ldiv_t,0,10,14,64,2
  5913                        	.sym	div_t,0,10,14,32,1
  5914                        	.sym	wctype_t,0,16,14,16
  5915                        	.sym	wint_t,0,16,14,16
  5916                        	.sym	wchar_t,0,14,14,8
  5917                        	.sym	ptrdiff_t,0,7,14,32
  Sat Jul 10 2021  1:15                                                Page 116


  5918                        	.sym	size_t,0,16,14,16
  5919                        	end


      Lines assembled: 5919
      Errors: 0
