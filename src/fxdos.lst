  Mon Aug  9 2021 16:52                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",0
     7                        ;#include "fxos.h"
     8                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
     9                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    10                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    11                        	.line	88
    12                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    13                        	.stag	fake1_,32,1
    14                        	.member	quot,0,5,8,16
    15                        	.member	rem,16,5,8,16
    16                        	.eos
    17                        	.stag	fake2_,64,2
    18                        	.member	quot,0,7,8,32
    19                        	.member	rem,32,7,8,32
    20                        	.eos
    21                        	.stag	int_sqrt,32,3
    22                        	.member	sqrt,0,16,8,16
    23                        	.member	frac,16,16,8,16
    24                        	.eos
    25                        	.line	205
    26                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",4
    27                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    28                        	.line	134
    29                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",5
    30                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    31                        	.line	103
    32                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",6
    33                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
    34                        	.stag	_fx_bytebits,8,4
    35                        	.member	b7,0,14,17,1
    36                        	.member	b6,1,14,17,1
    37                        	.member	b5,2,14,17,1
    38                        	.member	b4,3,14,17,1
    39                        	.member	b3,4,14,17,1
    40                        	.member	b2,5,14,17,1
    41                        	.member	b1,6,14,17,1
  Mon Aug  9 2021 16:52                                                Page 2


    42                        	.member	b0,7,14,17,1
    43                        	.eos
    44                        	.stag	_fx_node,384,5
    45                        	.member	type,0,14,8,8
    46                        	.member	Reserved0,8,14,8,8
    47                        	.member	data,16,129,8,32
    48                        	.member	last,48,138,8,32,5
    49                        	.member	next,80,138,8,32,5
    50                        	.member	name,112,110,8,0,32
    51                        	.member	Reserved1,368,16,8,16
    52                        	.eos
    53                        	.stag	_fx_nodelist,96,6
    54                        	.member	listhead,0,138,8,32,5
    55                        	.member	listData,32,129,8,32
    56                        	.member	deallocator,64,641,8,32
    57                        	.eos
    58                        	.stag	_fx_queue,80,7
    59                        	.member	count,0,5,8,16
    60                        	.member	front,16,138,8,32,5
    61                        	.member	rear,48,138,8,32,5
    62                        	.eos
    63                        	.stag	fake8_,32,8
    64                        	.member	subsystem,0,14,8,8
    65                        	.member	level,8,14,8,8
    66                        	.member	error,16,16,8,16
    67                        	.eos
    68                        	.stag	_fx_process_signal,16,9
    69                        	.member	cbSize,0,16,8,16
    70                        	.eos
    71                        	.stag	_fx_semaphore,16,10
    72                        	.member	reserved,0,5,8,16
    73                        	.eos
    74                        	.stag	_fx_fileBlock,552,11
    75                        	.member	openCount,0,16,8,16
    76                        	.member	lockCount,16,16,8,16
    77                        	.member	dirty,32,14,8,8
    78                        	.member	fileBuffer,40,110,8,0,64
    79                        	.eos
    80                        	.stag	_fx_irq_data,48,12
    81                        	.member	line,0,5,8,16
    82                        	.member	keycode,16,142,8,32
    83                        	.eos
    84                        	.stag	_task,48,13
    85                        	.member	SPL,0,14,8,8
    86                        	.member	SPH,8,14,8,8
    87                        	.member	pstack,16,142,8,32
    88                        	.eos
    89                        	.stag	_task_stack,32,14
    90                        	.member	SS,0,142,8,32
    91                        	.eos
    92                        	.stag	int_regs,104,15
    93                        	.member	PB,0,14,8,8
    94                        	.member	PH,8,14,8,8
    95                        	.member	PL,16,14,8,8
    96                        	.member	PP,24,14,8,8
    97                        	.member	DB,32,14,8,8
    98                        	.member	DH,40,14,8,8
    99                        	.member	DL,48,14,8,8
  Mon Aug  9 2021 16:52                                                Page 3


   100                        	.member	AH,56,14,8,8
   101                        	.member	AL,64,14,8,8
   102                        	.member	XH,72,14,8,8
   103                        	.member	XL,80,14,8,8
   104                        	.member	YH,88,14,8,8
   105                        	.member	YL,96,14,8,8
   106                        	.eos
   107                        	.stag	_fx_eventMessage,312,16
   108                        	.member	src,0,18,8,32
   109                        	.member	dest,32,18,8,32
   110                        	.member	type,64,16,8,16
   111                        	.member	hwnd,80,129,8,32
   112                        	.member	pheap,112,129,8,32
   113                        	.member	msgTime,144,18,8,32
   114                        	.member	data,176,110,8,0,16
   115                        	.member	attr,304,14,8,8
   116                        	.eos
   117                        	.stag	_fx_cmdMessage,312,17
   118                        	.member	src,0,18,8,32
   119                        	.member	dest,32,18,8,32
   120                        	.member	type,64,16,8,16
   121                        	.member	hwnd,80,129,8,32
   122                        	.member	pheap,112,129,8,32
   123                        	.member	msgTime,144,18,8,32
   124                        	.member	cmdCId,176,16,8,16
   125                        	.member	cmdMId,192,16,8,16
   126                        	.member	parameter1,208,18,8,32
   127                        	.member	parameter2,240,18,8,32
   128                        	.member	parameter3,272,18,8,32
   129                        	.member	attr,304,14,8,8
   130                        	.eos
   131                        	.stag	_fx_console_ctl,448,18
   132                        	.member	maxCols,0,5,8,16
   133                        	.member	maxRows,16,5,8,16
   134                        	.member	curX,32,5,8,16
   135                        	.member	curY,48,5,8,16
   136                        	.member	fgColor,64,5,8,16
   137                        	.member	bgColor,80,5,8,16
   138                        	.member	mode,96,14,8,8
   139                        	.member	kbBuffer,104,101,8,0,16
   140                        	.member	screenBuffer,360,142,8,32
   141                        	.member	desktopMode,392,14,8,8
   142                        	.member	lastMouseButton,400,5,8,16
   143                        	.member	lastMouseX,416,5,8,16
   144                        	.member	lastMouseY,432,5,8,16
   145                        	.eos
   146                        	.stag	_fx_desktop_ctl,392,19
   147                        	.member	desktopMode,0,14,8,8
   148                        	.member	cursorCtl,8,5,8,16
   149                        	.member	cursorState,24,5,8,16
   150                        	.member	backgroundColor,40,5,8,16
   151                        	.member	foregroundColor,56,5,8,16
   152                        	.member	menuMode,72,5,8,16
   153                        	.member	lastMouseButton,88,5,8,16
   154                        	.member	lastMouseX,104,5,8,16
   155                        	.member	lastMouseY,120,5,8,16
   156                        	.member	currentDiskName,136,142,8,32
   157                        	.member	diskNodes,168,129,8,32
  Mon Aug  9 2021 16:52                                                Page 4


   158                        	.member	titleNodes,200,129,8,32
   159                        	.member	menuNodes,232,129,8,32
   160                        	.member	iconNodes,264,129,8,32
   161                        	.member	windowNodes,296,129,8,32
   162                        	.member	fontNodes,328,129,8,32
   163                        	.member	wndProc,360,138,8,32,6
   164                        	.eos
   165                        	.stag	_fx_process,800,20
   166                        	.member	cbSize,0,5,8,16
   167                        	.member	procId,16,18,8,32
   168                        	.member	parentId,48,18,8,32
   169                        	.member	ctx,80,129,8,32
   170                        	.member	userId,112,16,8,16
   171                        	.member	status,128,16,8,16
   172                        	.member	foregroundActive,144,14,8,8
   173                        	.member	tls,152,1121,8,32,8
   174                        	.member	commandLine,408,142,8,32
   175                        	.member	semaphores,440,138,8,32,6
   176                        	.member	fileHandles,472,138,8,32,6
   177                        	.member	pathList,504,138,8,32,6
   178                        	.member	resources,536,138,8,32,6
   179                        	.member	timerAware,568,14,8,8
   180                        	.member	timerTicks,576,112,8,0,2
   181                        	.member	timerTickCount,608,112,8,0,2
   182                        	.member	kernelError,640,10,8,32,8
   183                        	.member	consoleCtl,672,138,8,32,18
   184                        	.member	desktopCtl,704,138,8,32,19
   185                        	.member	execProc,736,641,8,32
   186                        	.member	startupArgs,768,129,8,32
   187                        	.eos
   188                        	.stag	_fxProcessMessage,112,21
   189                        	.member	src,0,18,8,32
   190                        	.member	dest,32,18,8,32
   191                        	.member	type,64,16,8,16
   192                        	.member	processInfo,80,138,8,32,20
   193                        	.eos
   194                        	.stag	_k_key_state,112,22
   195                        	.member	scanCode,0,14,8,8
   196                        	.member	isShifted,8,14,8,8
   197                        	.member	isAlt,16,14,8,8
   198                        	.member	isExtended,24,14,8,8
   199                        	.member	isCapsLock,32,14,8,8
   200                        	.member	isNumLock,40,14,8,8
   201                        	.member	isScrollLock,48,14,8,8
   202                        	.member	keyChar,56,16,8,16
   203                        	.member	scanTime,72,18,8,32
   204                        	.member	ledStatus,104,14,8,8
   205                        	.eos
   206                        	.stag	_fx_property,384,23
   207                        	.member	name,0,110,8,0,16
   208                        	.member	value,128,110,8,0,32
   209                        	.eos
   210                        	.utag	_24bitPointer,32,24
   211                        	.member	address,0,142,11,32
   212                        	.member	bytes,0,110,11,0,4
   213                        	.eos
   214                        	.stag	_PointStruct,32,25
   215                        	.member	x,0,5,8,16
  Mon Aug  9 2021 16:52                                                Page 5


   216                        	.member	y,16,5,8,16
   217                        	.eos
   218                        	.stag	_RectStruct,112,26
   219                        	.member	x,0,5,8,16
   220                        	.member	y,16,5,8,16
   221                        	.member	z,32,18,8,32
   222                        	.member	width,64,5,8,16
   223                        	.member	height,80,5,8,16
   224                        	.member	attr,96,5,8,16
   225                        	.eos
   226                        	.stag	fake27_,96,27
   227                        	.member	name,0,142,8,32
   228                        	.member	topLeft,32,10,8,32,25
   229                        	.member	bottomRight,64,10,8,32,25
   230                        	.eos
   231                        	.stag	fake28_,112,28
   232                        	.member	x,0,5,8,16
   233                        	.member	y,16,5,8,16
   234                        	.member	z,32,5,8,16
   235                        	.member	width,48,5,8,16
   236                        	.member	height,64,5,8,16
   237                        	.member	data,80,18,8,32
   238                        	.eos
   239                        	.stag	_k_WindowClass,272,29
   240                        	.member	cbSize,0,16,8,16
   241                        	.member	style,16,16,8,16
   242                        	.member	styleEx,32,16,8,16
   243                        	.member	pWndProc,48,654,8,32
   244                        	.member	hInstance,80,129,8,32
   245                        	.member	hIcon,112,129,8,32
   246                        	.member	hCursor,144,129,8,32
   247                        	.member	hbrBackground,176,129,8,32
   248                        	.member	lpszMenuName,208,142,8,32
   249                        	.member	lpszClassName,240,142,8,32
   250                        	.eos
   251                        	.stag	_ClickableRect,152,30
   252                        	.member	area,0,10,8,112,26
   253                        	.member	z,112,18,8,32
   254                        	.member	enabled,144,14,8,8
   255                        	.eos
   256                        	.stag	_NCClickableRect,136,31
   257                        	.member	area,0,10,8,112,26
   258                        	.member	msgType,112,16,8,16
   259                        	.member	enabled,128,14,8,8
   260                        	.eos
   261                        	.stag	_DragData,216,32
   262                        	.member	area,0,10,8,112,26
   263                        	.member	xoffset,112,5,8,16
   264                        	.member	yoffset,128,5,8,16
   265                        	.member	msgType,144,16,8,16
   266                        	.member	ncAction,160,16,8,16
   267                        	.member	isDrag,176,14,8,8
   268                        	.member	isResize,184,14,8,8
   269                        	.member	canDrag,192,14,8,8
   270                        	.member	canDrop,200,14,8,8
   271                        	.member	didDrag,208,14,8,8
   272                        	.eos
   273                        	.stag	_k_WindowStruct,3904,33
  Mon Aug  9 2021 16:52                                                Page 6


   274                        	.member	cbSize,0,16,8,16
   275                        	.member	style,16,18,8,32
   276                        	.member	styleEx,48,18,8,32
   277                        	.member	win_id,80,5,8,16
   278                        	.member	win_x,96,5,8,16
   279                        	.member	win_y,112,5,8,16
   280                        	.member	win_width,128,5,8,16
   281                        	.member	win_height,144,5,8,16
   282                        	.member	win_xoffset,160,5,8,16
   283                        	.member	win_yoffset,176,5,8,16
   284                        	.member	win_cxoffset,192,5,8,16
   285                        	.member	win_cyoffset,208,5,8,16
   286                        	.member	wndRect,224,10,8,112,26
   287                        	.member	clientRect,336,10,8,112,26
   288                        	.member	nonclientGadgets,448,106,8,0,31,16
   289                        	.member	clickable,2624,129,8,32
   290                        	.member	win_title,2656,110,8,0,32
   291                        	.member	Reserved0,2912,16,8,16
   292                        	.member	win_class,2928,110,8,0,16
   293                        	.member	win_class_name,3056,110,8,0,32
   294                        	.member	nBitmapLayer,3312,16,8,16
   295                        	.member	bgRegion,3328,129,8,32
   296                        	.member	procid,3360,18,8,32
   297                        	.member	pWndClass,3392,138,8,32,29
   298                        	.member	pParentWindow,3424,129,8,32
   299                        	.member	hMenu,3456,129,8,32
   300                        	.member	hPointer,3488,129,8,32
   301                        	.member	hBackground,3520,129,8,32
   302                        	.member	pChildWindows,3552,138,8,32,6
   303                        	.member	pChildHitList,3584,138,8,32,6
   304                        	.member	isVisible,3616,14,8,8
   305                        	.member	windowData,3624,129,8,32
   306                        	.member	clientData,3656,1121,8,32,6
   307                        	.member	isClosed,3848,14,8,8
   308                        	.member	isClosing,3856,14,8,8
   309                        	.member	isDesktop,3864,14,8,8
   310                        	.member	clickableNode,3872,138,8,32,5
   311                        	.eos
   312                        	.stag	_k_WindowStructEx,3880,34
   313                        	.member	cbSize,0,16,8,16
   314                        	.member	style,16,18,8,32
   315                        	.member	styleEx,48,18,8,32
   316                        	.member	win_id,80,5,8,16
   317                        	.member	win_x,96,5,8,16
   318                        	.member	win_y,112,5,8,16
   319                        	.member	win_width,128,5,8,16
   320                        	.member	win_height,144,5,8,16
   321                        	.member	win_xoffset,160,5,8,16
   322                        	.member	win_yoffset,176,5,8,16
   323                        	.member	win_cxoffset,192,5,8,16
   324                        	.member	win_cyoffset,208,5,8,16
   325                        	.member	wndRect,224,10,8,112,26
   326                        	.member	clientRect,336,10,8,112,26
   327                        	.member	nonclientGadgets,448,106,8,0,31,16
   328                        	.member	clickable,2624,129,8,32
   329                        	.member	win_title,2656,110,8,0,32
   330                        	.member	Reserved0,2912,16,8,16
   331                        	.member	win_class,2928,110,8,0,16
  Mon Aug  9 2021 16:52                                                Page 7


   332                        	.member	nBitmapLayer,3056,16,8,16
   333                        	.member	procid,3072,18,8,32
   334                        	.member	pWndClass,3104,138,8,32,29
   335                        	.member	pParentWindow,3136,129,8,32
   336                        	.member	hMenu,3168,129,8,32
   337                        	.member	hPointer,3200,129,8,32
   338                        	.member	hBackground,3232,129,8,32
   339                        	.member	pChildWindows,3264,138,8,32,6
   340                        	.member	pChildHitList,3296,138,8,32,6
   341                        	.member	isVisible,3328,14,8,8
   342                        	.member	windowData,3336,129,8,32
   343                        	.member	clientData,3368,1121,8,32,4
   344                        	.member	isClosed,3496,14,8,8
   345                        	.member	hWnd,3504,129,8,32
   346                        	.member	localRect,3536,10,8,112,26
   347                        	.member	globalRect,3648,10,8,112,26
   348                        	.member	clientOffsetRect,3760,10,8,112,26
   349                        	.member	isDesktop,3872,14,8,8
   350                        	.eos
   351                        	.stag	_FontMetric,32,35
   352                        	.member	width,0,5,8,16
   353                        	.member	height,16,5,8,16
   354                        	.eos
   355                        	.stag	_MenuStruct,280,36
   356                        	.member	cx,0,5,8,16
   357                        	.member	cy,16,5,8,16
   358                        	.member	width,32,5,8,16
   359                        	.member	height,48,5,8,16
   360                        	.member	fcolor,64,14,8,8
   361                        	.member	bcolor,72,14,8,8
   362                        	.member	chromeLeft,80,14,8,8
   363                        	.member	chromeRight1,88,14,8,8
   364                        	.member	chromeRight2,96,14,8,8
   365                        	.member	hFont,104,129,8,32
   366                        	.member	itemId,136,16,8,16
   367                        	.member	pCaption,152,142,8,32
   368                        	.member	subMenus,184,138,8,32,6
   369                        	.member	pBackground,216,129,8,32
   370                        	.member	hWndOwner,248,129,8,32
   371                        	.eos
   372                        	.stag	fake37_,160,37
   373                        	.member	menuId,0,16,8,16
   374                        	.member	caption,16,142,8,32
   375                        	.member	rect,48,10,8,112,26
   376                        	.eos
   377                        	.stag	fake38_,5152,38
   378                        	.member	pParent,0,138,8,32,33
   379                        	.member	rect,32,10,8,112,26
   380                        	.member	captions,144,1134,8,32,24
   381                        	.member	chrome,912,110,8,0,24
   382                        	.member	ids,1104,112,8,0,24
   383                        	.member	clickable,1488,106,8,0,30,24
   384                        	.member	selected,5136,16,8,16
   385                        	.eos
   386                        	.stag	_fx_button_t,96,39
   387                        	.member	pCaption,0,142,8,32
   388                        	.member	cCaption,32,16,8,16
   389                        	.member	data,48,129,8,32
  Mon Aug  9 2021 16:52                                                Page 8


   390                        	.member	captionPixelWidth,80,16,8,16
   391                        	.eos
   392                        	.stag	_fx_scrollbar_t,240,40
   393                        	.member	min,0,16,8,16
   394                        	.member	max,16,16,8,16
   395                        	.member	increment,32,16,8,16
   396                        	.member	stopsize,48,16,8,16
   397                        	.member	location,64,5,8,16
   398                        	.member	state,80,5,8,16
   399                        	.member	rectThumb,96,10,8,112,26
   400                        	.member	data,208,129,8,32
   401                        	.eos
   402                        	.stag	_fx_listbox_t,240,41
   403                        	.member	pos,0,5,8,16
   404                        	.member	selected,16,16,8,16
   405                        	.member	offsetX,32,5,8,16
   406                        	.member	offsetY,48,5,8,16
   407                        	.member	inc,64,5,8,16
   408                        	.member	direction,80,5,8,16
   409                        	.member	top,96,5,8,16
   410                        	.member	bottom,112,5,8,16
   411                        	.member	indexTop,128,5,8,16
   412                        	.member	indexBottom,144,5,8,16
   413                        	.member	maxItems,160,16,8,16
   414                        	.member	fontSet,176,142,8,32
   415                        	.member	data,208,129,8,32
   416                        	.eos
   417                        	.stag	_fx_textbox_t,144,42
   418                        	.member	pos,0,5,8,16
   419                        	.member	selected,16,16,8,16
   420                        	.member	offsetX,32,5,8,16
   421                        	.member	offsetY,48,5,8,16
   422                        	.member	isShifted,64,14,8,8
   423                        	.member	cursorState,72,14,8,8
   424                        	.member	fontSet,80,142,8,32
   425                        	.member	data,112,129,8,32
   426                        	.eos
   427                        	.stag	_fx_msgbox_t,144,43
   428                        	.member	pos,0,5,8,16
   429                        	.member	selected,16,16,8,16
   430                        	.member	offsetX,32,5,8,16
   431                        	.member	offsetY,48,5,8,16
   432                        	.member	isShifted,64,14,8,8
   433                        	.member	cursorState,72,14,8,8
   434                        	.member	fontSet,80,142,8,32
   435                        	.member	data,112,129,8,32
   436                        	.eos
   437                        	.stag	_fx_menuAnchor_t,272,44
   438                        	.member	pCaption,0,142,8,32
   439                        	.member	renderLayoutX,32,16,8,16
   440                        	.member	renderLayoutY,48,16,8,16
   441                        	.member	captionPixelWidth,64,16,8,16
   442                        	.member	data,80,129,8,32
   443                        	.member	droppedWindow,112,138,8,32,33
   444                        	.member	bytes,144,110,8,0,16
   445                        	.eos
   446                        	.stag	_SubMenuStruct,64,45
   447                        	.member	caption,0,142,8,32
  Mon Aug  9 2021 16:52                                                Page 9


   448                        	.member	action,32,641,8,32
   449                        	.eos
   450                        	.stag	_SubMenuListStruct,40,46
   451                        	.member	cMenus,0,14,8,8
   452                        	.member	psubmenus,8,9354,8,32,45
   453                        	.eos
   454                        	.stag	_fx_ComBuffer,2080,47
   455                        	.member	cbSize,0,16,8,16
   456                        	.member	cbBuffer,16,16,8,16
   457                        	.member	buffer,32,110,8,0,256
   458                        	.eos
   459                        	.stag	_fx_resource_header,72,48
   460                        	.member	magic,0,110,8,0,4
   461                        	.member	major,32,14,8,8
   462                        	.member	minor,40,14,8,8
   463                        	.member	type,48,14,8,8
   464                        	.member	reserved,56,14,8,8
   465                        	.member	resheaderSize,64,14,8,8
   466                        	.eos
   467                        	.stag	_fx_resource_header_font,144,49
   468                        	.member	title,0,110,8,0,16
   469                        	.member	height,128,14,8,8
   470                        	.member	width,136,14,8,8
   471                        	.eos
   472                        	.stag	_fx_resource_string,32,50
   473                        	.member	locale,0,110,8,0,2
   474                        	.member	entries,16,16,8,16
   475                        	.eos
   476                        	.stag	_fx_resource_string_entry,40,51
   477                        	.member	index,0,16,8,16
   478                        	.member	length,16,16,8,16
   479                        	.member	data,32,14,8,8
   480                        	.eos
   481                        	.line	1064
   482                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",8
   483                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstringtable.h",0
   484                        	.line	90
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",9
   486                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   488                        	.line	1064
   489                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",5
   490                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",0
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   492                        	.line	1064
   493                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",11
   494                        	.line	72
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",6
  Mon Aug  9 2021 16:52                                                Page 10


   496                        	.line	1960
   497                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",16
   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   499                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   500                        	.line	30
   501                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",5
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   504                        	.line	1064
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",11
   506                        	.line	118
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",6
   508                        	.stag	_fx_api_call_table,8192,52
   509                        	.member	call_table,0,1121,8,32,256
   510                        	.eos
   511                        	.stag	_fx_zero_page_irq_data,32,53
   512                        	.member	data,0,110,8,0,4
   513                        	.eos
   514                        	.stag	_fx_zero_page,720,54
   515                        	.member	fxos_mouse_byte_0,0,14,8,8
   516                        	.member	fxos_mouse_byte_1,8,14,8,8
   517                        	.member	fxos_mouse_byte_2,16,14,8,8
   518                        	.member	fxos_mouse_byte_t,24,14,8,8
   519                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   520                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   521                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   522                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   523                        	.member	fxos_key_byte_0,64,14,8,8
   524                        	.member	fxos_key_byte_1,72,14,8,8
   525                        	.member	fxos_key_byte_2,80,14,8,8
   526                        	.member	fxos_mouse_ctl,88,14,8,8
   527                        	.member	fxos_mouse_index,96,14,8,8
   528                        	.member	fxos_mouse_status,104,14,8,8
   529                        	.member	Endianness,112,16,8,16
   530                        	.member	VersionMajor,128,16,8,16
   531                        	.member	VersionMinor,144,16,8,16
   532                        	.member	VersionRelease,160,16,8,16
   533                        	.member	topMemory,176,18,8,32
   534                        	.member	bottomMemory,208,18,8,32
   535                        	.member	availableMemory,240,18,8,32
   536                        	.member	availableMemoryK,272,18,8,32
   537                        	.member	availableHeapMemory,304,18,8,32
   538                        	.member	availableHeapMemoryK,336,18,8,32
   539                        	.member	fxos_console_row,368,16,8,16
   540                        	.member	fxos_console_col,384,16,8,16
   541                        	.member	executive,400,129,8,32
   542                        	.member	eventmanager,432,129,8,32
   543                        	.member	devicemanager,464,129,8,32
   544                        	.member	windowmanager,496,129,8,32
   545                        	.member	fxos_kernel_api,528,138,8,32,52
  Mon Aug  9 2021 16:52                                                Page 11


   546                        	.member	fxos_dos_api,560,138,8,32,52
   547                        	.member	fxos_gfx_api,592,138,8,32,52
   548                        	.member	fxos_gui_api,624,138,8,32,52
   549                        	.member	fxos_con_api,656,138,8,32,52
   550                        	.member	fxos_reserved_2_api,688,138,8,32,52
   551                        	.eos
   552                        	.stag	_fx_environment,96,55
   553                        	.member	variables,0,142,8,32
   554                        	.member	reserved1,32,5,8,16
   555                        	.member	reserved2,48,5,8,16
   556                        	.member	reserved3,64,5,8,16
   557                        	.member	reserved4,80,5,8,16
   558                        	.eos
   559                        	.stag	_debug_byte_bits,8,56
   560                        	.member	bit7,0,14,17,1
   561                        	.member	bit6,1,14,17,1
   562                        	.member	bit5,2,14,17,1
   563                        	.member	bit4,3,14,17,1
   564                        	.member	bit3,4,14,17,1
   565                        	.member	bit2,5,14,17,1
   566                        	.member	bit1,6,14,17,1
   567                        	.member	bit0,7,14,17,1
   568                        	.eos
   569                        	.stag	_k_segmentheader,160,57
   570                        	.member	version_major,0,14,8,8
   571                        	.member	version_minor,8,14,8,8
   572                        	.member	length,16,5,8,16
   573                        	.member	segment_start_addr,32,7,8,32
   574                        	.member	segment_end_addr,64,7,8,32
   575                        	.member	segment_size,96,7,8,32
   576                        	.member	main_entry_addr,128,7,8,32
   577                        	.eos
   578                        	.stag	_fx_device_driver,776,58
   579                        	.member	name,0,110,8,0,32
   580                        	.member	version,256,110,8,0,16
   581                        	.member	hmajor,384,110,8,0,8
   582                        	.member	hminor,448,110,8,0,8
   583                        	.member	type,512,14,8,8
   584                        	.member	designation,520,110,8,0,6
   585                        	.member	irq_ctl,568,16,8,16
   586                        	.member	f_driver_irq,584,129,8,32
   587                        	.member	driver_context,616,129,8,32
   588                        	.member	f_driver_load,648,129,8,32
   589                        	.member	f_driver_read,680,129,8,32
   590                        	.member	f_driver_write,712,129,8,32
   591                        	.member	f_driver_unload,744,129,8,32
   592                        	.eos
   593                        	.stag	_fx_block_device_driver,808,59
   594                        	.member	name,0,110,8,0,32
   595                        	.member	version,256,110,8,0,16
   596                        	.member	hmajor,384,110,8,0,8
   597                        	.member	hminor,448,110,8,0,8
   598                        	.member	type,512,14,8,8
   599                        	.member	designation,520,110,8,0,6
   600                        	.member	irq_ctl,568,16,8,16
   601                        	.member	f_driver_irq,584,129,8,32
   602                        	.member	driver_context,616,129,8,32
   603                        	.member	f_driver_load,648,129,8,32
  Mon Aug  9 2021 16:52                                                Page 12


   604                        	.member	f_driver_read,680,129,8,32
   605                        	.member	f_driver_write,712,129,8,32
   606                        	.member	f_driver_unload,744,129,8,32
   607                        	.member	f_driver_command,776,129,8,32
   608                        	.eos
   609                        	.stag	_k_irq_chain,128,60
   610                        	.member	handlers,0,5217,8,32,4
   611                        	.eos
   612                        	.line	490
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",22
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   615                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   616                        	.line	134
   617                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",5
   618                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   619                        	.line	205
   620                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",6
   621                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   622                        	.line	1064
   623                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",7
   624                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   625                        	.line	1960
   626                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",12
   627                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   628                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   629                        	.line	205
   630                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",5
   631                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   632                        	.line	134
   633                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",6
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   635                        	.line	1064
   636                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",7
   637                        	.stag	_fx_string,64,61
   638                        	.member	size,0,16,8,16
   639                        	.member	pos,16,5,8,16
   640                        	.member	buffer,32,142,8,32
   641                        	.eos
   642                        	.line	141
   643                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",17
  Mon Aug  9 2021 16:52                                                Page 13


   644                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   645                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   646                        	.line	30
   647                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",5
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   650                        	.line	1064
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",5
   652                        	.stag	_fxos_executive_vtable,128,62
   653                        	.member	Init,0,8833,8,32
   654                        	.member	Configure,32,656,8,32
   655                        	.member	Query,64,656,8,32
   656                        	.member	Uninit,96,641,8,32
   657                        	.eos
   658                        	.line	86
   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",6
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   661                        	.line	118
   662                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",7
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   664                        	.line	208
   665                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",8
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
   667                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   668                        	.line	30
   669                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",5
   670                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
   671                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   672                        	.line	30
   673                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",5
   674                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   675                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_build_parameters.h",0
   676                        	.line	35
   677                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",8
   678                        	.stag	UMM_HEAP_INFO_t,256,63
   679                        	.member	totalEntries,0,18,8,32
   680                        	.member	usedEntries,32,18,8,32
   681                        	.member	freeEntries,64,18,8,32
  Mon Aug  9 2021 16:52                                                Page 14


   682                        	.member	totalBlocks,96,18,8,32
   683                        	.member	usedBlocks,128,18,8,32
   684                        	.member	freeBlocks,160,18,8,32
   685                        	.member	maxFreeContiguousBlocks,192,18,8,32
   686                        	.member	blockSize,224,18,8,32
   687                        	.eos
   688                        	.line	199
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",6
   690                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
   691                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   692                        	.line	1064
   693                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",11
   694                        	.line	24
   695                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",7
   696                        	.stag	_fx_memory_map,2072,64
   697                        	.member	availableMemory,0,18,8,32
   698                        	.member	valid_segments,32,110,8,0,255
   699                        	.eos
   700                        	.stag	_fx_ipc_port,144,65
   701                        	.member	id,0,18,8,32
   702                        	.member	type,32,14,8,8
   703                        	.member	name,40,138,8,32,61
   704                        	.member	time,72,18,8,32
   705                        	.member	queue,104,138,8,32,7
   706                        	.member	reserved_1,136,14,8,8
   707                        	.eos
   708                        	.stag	_k_mem_alloc_header,80,66
   709                        	.member	user,0,14,8,8
   710                        	.member	attr,8,14,8,8
   711                        	.member	size,16,18,8,32
   712                        	.member	virtual,48,129,8,32
   713                        	.eos
   714                        	.line	129
   715                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",6
   716                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   717                        	.line	568
   718                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",7
   719                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
   720                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",0
   721                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   722                        	.line	1064
   723                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",6
   724                        	.line	74
   725                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",5
   726                        	.stag	_click_detected,64,67
  Mon Aug  9 2021 16:52                                                Page 15


   727                        	.member	window,0,138,8,32,33
   728                        	.member	handler,32,641,8,32
   729                        	.eos
   730                        	.stag	_current_palette_map,400,68
   731                        	.member	CUR_DESKTOP,0,5,8,16
   732                        	.member	CUR_BACKGROUND,16,5,8,16
   733                        	.member	CUR_FONT,32,5,8,16
   734                        	.member	CUR_SELECTED_FONT,48,5,8,16
   735                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   736                        	.member	CUR_WINDOWFRAME,80,5,8,16
   737                        	.member	CUR_WINDOWBORDER,96,5,8,16
   738                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   739                        	.member	CUR_MENU,128,5,8,16
   740                        	.member	CUR_GADGET,144,5,8,16
   741                        	.member	CUR_COLOR,160,101,8,0,15
   742                        	.eos
   743                        	.line	359
   744                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",8
   745                        	.stag	_fxos_winman_vtable,160,69
   746                        	.member	Events,0,641,8,32
   747                        	.member	ConfigureWindowManager,32,656,8,32
   748                        	.member	ProcessWindowEvent,64,8833,8,32
   749                        	.member	QueryWindowManager,96,656,8,32
   750                        	.member	DoWndProcs,128,641,8,32
   751                        	.eos
   752                        	.stag	fake70_,64,70
   753                        	.member	type,0,16,8,16
   754                        	.member	size,16,16,8,16
   755                        	.member	desktopAction,32,129,8,32
   756                        	.eos
   757                        	.stag	fake71_,96,71
   758                        	.member	type,0,16,8,16
   759                        	.member	caption,16,138,8,32,61
   760                        	.member	buttonType,48,16,8,16
   761                        	.member	x,64,5,8,16
   762                        	.member	y,80,5,8,16
   763                        	.eos
   764                        	.stag	_childMessage_t,64,72
   765                        	.member	msgType,0,16,8,16
   766                        	.member	msgData,16,129,8,32
   767                        	.member	dataSize,48,16,8,16
   768                        	.eos
   769                        	.line	594
   770                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",9
   771                        	.stag	_fx_main_loopvars,16,73
   772                        	.member	dummy,0,5,8,16
   773                        	.eos
   774                        	.stag	_fxMouseMessageData,64,74
   775                        	.member	button1,0,14,8,8
   776                        	.member	button2,8,14,8,8
   777                        	.member	button3,16,14,8,8
   778                        	.member	button4,24,14,8,8
   779                        	.member	x,32,16,8,16
   780                        	.member	y,48,16,8,16
   781                        	.eos
   782                        	.utag	marshalled_data,32,75
  Mon Aug  9 2021 16:52                                                Page 16


   783                        	.member	byteValue,0,14,11,8
   784                        	.member	verbValue,0,110,11,0,2
   785                        	.member	intValue,0,16,11,16
   786                        	.member	longValue,0,18,11,32
   787                        	.member	pointerValue,0,129,11,32
   788                        	.eos
   789                        	.stag	_fx_eventProcess,64,76
   790                        	.member	process,0,138,8,32,20
   791                        	.member	eventProc,32,641,8,32
   792                        	.eos
   793                        	.stag	_mouse_msg_state,184,77
   794                        	.member	lastEvent,0,18,8,32
   795                        	.member	buttonLeftDown,32,14,8,8
   796                        	.member	lastLeftDown,40,18,8,32
   797                        	.member	buttonRightDown,72,14,8,8
   798                        	.member	lastRightDown,80,18,8,32
   799                        	.member	buttonMiddleDown,112,14,8,8
   800                        	.member	lastMiddleDown,120,18,8,32
   801                        	.member	lastX,152,16,8,16
   802                        	.member	lastY,168,16,8,16
   803                        	.eos
   804                        	.stag	_fxos_eventmanager_vtable,192,78
   805                        	.member	EventQueue,0,138,8,32,7
   806                        	.member	Init,32,8833,8,32
   807                        	.member	Run,64,656,8,32
   808                        	.member	Configure,96,656,8,32
   809                        	.member	Query,128,656,8,32
   810                        	.member	Uninit,160,641,8,32
   811                        	.eos
   812                        	.stag	_k_clipboard_data,168,79
   813                        	.member	type,0,14,8,8
   814                        	.member	readable,8,110,8,0,16
   815                        	.member	data,136,129,8,32
   816                        	.eos
   817                        	.line	568
   818                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",18
   819                        	.stag	_fx_spinner_ctx,48,80
   820                        	.member	index,0,5,8,16
   821                        	.member	spinner,16,142,8,32
   822                        	.eos
   823                        	.stag	_fx_console_ctx,1144,81
   824                        	.member	lineBufferIndex,0,5,8,16
   825                        	.member	lineBuffer,16,110,8,0,128
   826                        	.member	isShifted,1040,14,8,8
   827                        	.member	userData,1048,129,8,32
   828                        	.member	screenBuffer,1080,129,8,32
   829                        	.member	Reserved1,1112,129,8,32
   830                        	.eos
   831                        	.stag	_token,64,82
   832                        	.member	type,0,5,8,16
   833                        	.member	depth,16,16,8,16
   834                        	.member	text,32,142,8,32
   835                        	.eos
   836                        	.stag	_command_args,64,83
   837                        	.member	proc,0,656,8,32
   838                        	.member	tokens,32,138,8,32,5
   839                        	.eos
  Mon Aug  9 2021 16:52                                                Page 17


   840                        	.line	208
   841                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",23
   842                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   843                        	.line	141
   844                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",24
   845                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   846                        	.line	118
   847                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",25
   848                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   849                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ffconf.h",0
   850                        	.line	298
   851                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",29
   852                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   853                        	.line	1064
   854                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",30
   855                        	.stag	fake84_,4504,84
   856                        	.member	fs_type,0,14,8,8
   857                        	.member	pdrv,8,14,8,8
   858                        	.member	n_fats,16,14,8,8
   859                        	.member	wflag,24,14,8,8
   860                        	.member	fsi_flag,32,14,8,8
   861                        	.member	id,40,5,8,16
   862                        	.member	n_rootdir,56,5,8,16
   863                        	.member	csize,72,5,8,16
   864                        	.member	lfnbuf,88,144,8,32
   865                        	.member	last_clst,120,18,8,32
   866                        	.member	free_clst,152,18,8,32
   867                        	.member	n_fatent,184,18,8,32
   868                        	.member	fsize,216,18,8,32
   869                        	.member	volbase,248,18,8,32
   870                        	.member	fatbase,280,18,8,32
   871                        	.member	dirbase,312,18,8,32
   872                        	.member	database,344,18,8,32
   873                        	.member	winsect,376,18,8,32
   874                        	.member	win,408,110,8,0,512
   875                        	.eos
   876                        	.stag	fake85_,128,85
   877                        	.member	fs,0,138,8,32,84
   878                        	.member	id,32,5,8,16
   879                        	.member	attr,48,14,8,8
   880                        	.member	stat,56,14,8,8
   881                        	.member	sclust,64,18,8,32
   882                        	.member	objsize,96,18,8,32
   883                        	.eos
   884                        	.stag	fake86_,4400,86
   885                        	.member	obj,0,10,8,128,85
   886                        	.member	flag,128,14,8,8
   887                        	.member	err,136,14,8,8
  Mon Aug  9 2021 16:52                                                Page 18


   888                        	.member	fptr,144,18,8,32
   889                        	.member	clust,176,18,8,32
   890                        	.member	sect,208,18,8,32
   891                        	.member	dir_sect,240,18,8,32
   892                        	.member	dir_ptr,272,142,8,32
   893                        	.member	buf,304,110,8,0,512
   894                        	.eos
   895                        	.stag	fake87_,416,87
   896                        	.member	obj,0,10,8,128,85
   897                        	.member	dptr,128,18,8,32
   898                        	.member	clust,160,18,8,32
   899                        	.member	sect,192,18,8,32
   900                        	.member	dir,224,142,8,32
   901                        	.member	fn,256,110,8,0,12
   902                        	.member	blk_ofs,352,18,8,32
   903                        	.member	pat,384,142,8,32
   904                        	.eos
   905                        	.stag	fake88_,2224,88
   906                        	.member	fsize,0,18,8,32
   907                        	.member	fdate,32,5,8,16
   908                        	.member	ftime,48,5,8,16
   909                        	.member	fattrib,64,14,8,8
   910                        	.member	altname,72,110,8,0,13
   911                        	.member	fname,176,110,8,0,256
   912                        	.eos
   913                        	.stag	fake89_,80,89
   914                        	.member	fmt,0,14,8,8
   915                        	.member	n_fat,8,14,8,8
   916                        	.member	align,16,16,8,16
   917                        	.member	n_root,32,16,8,16
   918                        	.member	au_size,48,18,8,32
   919                        	.eos
   920                        	.line	429
   921                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",26
   922                        	.line	30
   923                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",1
   924                        ;#include "fxdos.h"
   925                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",0
   926                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   927                        	.line	1064
   928                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",5
   929                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   930                        	.line	429
   931                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",6
   932                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\diskio.h",0
   933                        	.line	85
   934                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",7
   935                        	.stag	_fx_sd_direntry,256,90
   936                        	.member	filename,0,110,8,0,11
  Mon Aug  9 2021 16:52                                                Page 19


   937                        	.member	type,88,14,8,8
   938                        	.member	attrs,96,110,8,0,20
   939                        	.eos
   940                        	.stag	_fx_info,416,91
   941                        	.member	stgName,0,110,8,0,32
   942                        	.member	Reserved1,256,14,8,8
   943                        	.member	stgType,264,16,8,16
   944                        	.member	Reserved2,280,14,8,8
   945                        	.member	stgReserved,288,110,8,0,16
   946                        	.eos
   947                        	.stag	_fx_fileinfo,136,92
   948                        	.member	type,0,14,8,8
   949                        	.member	pFilename,8,142,8,32
   950                        	.member	lSize,40,18,8,32
   951                        	.member	lcreateDate,72,18,8,32
   952                        	.member	lchangeDate,104,18,8,32
   953                        	.eos
   954                        	.stag	_FX_FAT_DIR_INFO,256,93
   955                        	.member	DIR_Name,0,110,8,0,11
   956                        	.member	DIR_Attr,88,14,8,8
   957                        	.member	DIR_NTRes,96,14,8,8
   958                        	.member	DIR_CrtTimeTenth,104,14,8,8
   959                        	.member	DIR_CrtTime,112,16,8,16
   960                        	.member	DIR_CrtDate,128,16,8,16
   961                        	.member	DIR_LstAccDate,144,16,8,16
   962                        	.member	DIR_FstClusHI,160,16,8,16
   963                        	.member	DIR_WrtTime,176,16,8,16
   964                        	.member	DIR_WrtDate,192,16,8,16
   965                        	.member	DIR_FstClusLO,208,16,8,16
   966                        	.member	DIR_FileSize,224,18,8,32
   967                        	.eos
   968                        	.stag	fat_extBS_32,416,94
   969                        	.member	table_size_32,0,18,8,32
   970                        	.member	extended_flags,32,16,8,16
   971                        	.member	fat_version,48,16,8,16
   972                        	.member	root_cluster,64,18,8,32
   973                        	.member	fat_info,96,16,8,16
   974                        	.member	backup_BS_sector,112,16,8,16
   975                        	.member	reserved_0,128,110,8,0,12
   976                        	.member	drive_number,224,14,8,8
   977                        	.member	reserved_1,232,14,8,8
   978                        	.member	boot_signature,240,14,8,8
   979                        	.member	volume_id,248,16,8,16
   980                        	.member	volume_label,264,110,8,0,11
   981                        	.member	fat_type_label,352,110,8,0,8
   982                        	.eos
   983                        	.stag	fat_extBS_16,192,95
   984                        	.member	bios_drive_num,0,14,8,8
   985                        	.member	reserved1,8,14,8,8
   986                        	.member	boot_signature,16,14,8,8
   987                        	.member	volume_id,24,16,8,16
   988                        	.member	volume_label,40,110,8,0,11
   989                        	.member	fat_type_label,128,110,8,0,8
   990                        	.eos
   991                        	.stag	fat_BS,688,96
   992                        	.member	bootjmp,0,110,8,0,3
   993                        	.member	oem_name,24,110,8,0,8
   994                        	.member	bytes_per_sector,88,16,8,16
  Mon Aug  9 2021 16:52                                                Page 20


   995                        	.member	sectors_per_cluster,104,14,8,8
   996                        	.member	reserved_sector_count,112,16,8,16
   997                        	.member	table_count,128,14,8,8
   998                        	.member	root_entry_count,136,16,8,16
   999                        	.member	total_sectors_16,152,16,8,16
  1000                        	.member	media_type,168,14,8,8
  1001                        	.member	table_size_16,176,16,8,16
  1002                        	.member	sectors_per_track,192,16,8,16
  1003                        	.member	head_side_count,208,16,8,16
  1004                        	.member	hidden_sector_count,224,16,8,16
  1005                        	.member	total_sectors_32,240,16,8,16
  1006                        	.member	extended_section,256,110,8,0,54
  1007                        	.eos
  1008                        	.stag	__FATBootSector,928,97
  1009                        	.member	bootjmp,0,110,8,0,3
  1010                        	.member	oem_name,24,110,8,0,8
  1011                        	.member	bytes_per_sector,88,16,8,16
  1012                        	.member	sectors_per_cluster,104,14,8,8
  1013                        	.member	reserved_sector_count,112,16,8,16
  1014                        	.member	fat_table_count,128,14,8,8
  1015                        	.member	root_entry_count,136,16,8,16
  1016                        	.member	total_sectors_16,152,16,8,16
  1017                        	.member	media_type,168,14,8,8
  1018                        	.member	sectors_per_fat,176,16,8,16
  1019                        	.member	sectors_per_track,192,16,8,16
  1020                        	.member	head_side_count,208,16,8,16
  1021                        	.member	hidden_sector_count,224,18,8,32
  1022                        	.member	total_sectors_32,256,18,8,32
  1023                        	.member	drive_number,288,14,8,8
  1024                        	.member	reserved1,296,14,8,8
  1025                        	.member	boot_sig,304,14,8,8
  1026                        	.member	vol_id,312,18,8,32
  1027                        	.member	vol_name,344,110,8,0,11
  1028                        	.member	file_system_type,432,110,8,0,8
  1029                        	.member	extended_section,496,110,8,0,54
  1030                        	.eos
  1031                        	.stag	__PARTITIONTABLE,128,98
  1032                        	.member	first_byte,0,14,8,8
  1033                        	.member	start_chs,8,110,8,0,3
  1034                        	.member	partition_type,32,14,8,8
  1035                        	.member	end_chs,40,110,8,0,3
  1036                        	.member	start_sector,64,18,8,32
  1037                        	.member	length_sectors,96,18,8,32
  1038                        	.eos
  1039                        	.stag	fake99_,4096,99
  1040                        	.member	jmp,0,110,8,0,3
  1041                        	.member	oem,24,110,8,0,8
  1042                        	.member	sector_size,88,15,8,16
  1043                        	.member	sectors_per_cluster,104,14,8,8
  1044                        	.member	reserved_sectors,112,15,8,16
  1045                        	.member	number_ok_dos_fats,128,14,8,8
  1046                        	.member	root_dir_entries,136,15,8,16
  1047                        	.member	total_sectors_short,152,15,8,16
  1048                        	.member	media_descriptor,168,14,8,8
  1049                        	.member	fat_size_sectors,176,15,8,16
  1050                        	.member	sectors_per_track,192,15,8,16
  1051                        	.member	number_ok_dos_heads,208,15,8,16
  1052                        	.member	hidden_sectors,224,18,8,32
  Mon Aug  9 2021 16:52                                                Page 21


  1053                        	.member	total_sectors_long,256,18,8,32
  1054                        	.member	drive_number,288,14,8,8
  1055                        	.member	current_head,296,14,8,8
  1056                        	.member	boot_signature,304,14,8,8
  1057                        	.member	volume_id,312,18,8,32
  1058                        	.member	volume_label,344,110,8,0,11
  1059                        	.member	fs_type,432,110,8,0,8
  1060                        	.member	boot_code,496,110,8,0,448
  1061                        	.member	boot_sector_signature,4080,15,8,16
  1062                        	.eos
  1063                        	.stag	__FAT16ENTRY,256,100
  1064                        	.member	filename,0,110,8,0,8
  1065                        	.member	ext,64,110,8,0,3
  1066                        	.member	attributes,88,14,8,8
  1067                        	.member	reserved,96,110,8,0,10
  1068                        	.member	modify_time,176,16,8,16
  1069                        	.member	modify_date,192,16,8,16
  1070                        	.member	starting_cluster,208,16,8,16
  1071                        	.member	file_size,224,18,8,32
  1072                        	.eos
  1073                        	.stag	__FAT16ENTRYLONG,288,101
  1074                        	.member	filename,0,110,8,0,8
  1075                        	.member	ext,64,110,8,0,3
  1076                        	.member	attributes,88,14,8,8
  1077                        	.member	reserved,96,110,8,0,10
  1078                        	.member	modify_time,176,16,8,16
  1079                        	.member	modify_date,192,16,8,16
  1080                        	.member	starting_cluster,208,16,8,16
  1081                        	.member	file_size,224,18,8,32
  1082                        	.member	plongfileName,256,142,8,32
  1083                        	.eos
  1084                        	.stag	_LongFileName,256,102
  1085                        	.member	sequenceNo,0,14,8,8
  1086                        	.member	fileName_Part1,8,110,8,0,10
  1087                        	.member	fileattribute,88,14,8,8
  1088                        	.member	type,96,14,8,8
  1089                        	.member	checksum,104,14,8,8
  1090                        	.member	fileName_Part2,112,110,8,0,12
  1091                        	.member	fstclusLO,208,5,8,16
  1092                        	.member	fileName_Part3,224,110,8,0,4
  1093                        	.eos
  1094                        	.stag	_IDSECTOR,2048,103
  1095                        	.member	wGenConfig,0,16,8,16
  1096                        	.member	wNumCyls,16,16,8,16
  1097                        	.member	wReserved,32,16,8,16
  1098                        	.member	wNumHeads,48,16,8,16
  1099                        	.member	wBytesPerTrack,64,16,8,16
  1100                        	.member	wBytesPerSector,80,16,8,16
  1101                        	.member	wSectorsPerTrack,96,16,8,16
  1102                        	.member	wVendorUnique,112,112,8,0,3
  1103                        	.member	sSerialNumber,160,110,8,0,20
  1104                        	.member	wBufferType,320,16,8,16
  1105                        	.member	wBufferSize,336,16,8,16
  1106                        	.member	wECCSize,352,16,8,16
  1107                        	.member	sFirmwareRev,368,110,8,0,8
  1108                        	.member	sModelNumber,432,110,8,0,40
  1109                        	.member	wMoreVendorUnique,752,16,8,16
  1110                        	.member	wDoubleWordIO,768,16,8,16
  Mon Aug  9 2021 16:52                                                Page 22


  1111                        	.member	wCapabilities,784,16,8,16
  1112                        	.member	wReserved1,800,16,8,16
  1113                        	.member	wPIOTiming,816,16,8,16
  1114                        	.member	wDMATiming,832,16,8,16
  1115                        	.member	wBS,848,16,8,16
  1116                        	.member	wNumCurrentCyls,864,16,8,16
  1117                        	.member	wNumCurrentHeads,880,16,8,16
  1118                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1119                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1120                        	.member	wMultSectorStuff,944,16,8,16
  1121                        	.member	ulTotalAddressableSectors,960,18,8,32
  1122                        	.member	wSingleWordDMA,992,16,8,16
  1123                        	.member	wMultiWordDMA,1008,16,8,16
  1124                        	.member	bReserved,1024,110,8,0,128
  1125                        	.eos
  1126                        	.stag	fake104_,16,104
  1127                        	.member	Reserved1,0,16,17,1
  1128                        	.member	Retired3,1,16,17,1
  1129                        	.member	ResponseIncomplete,2,16,17,1
  1130                        	.member	Retired2,3,16,17,3
  1131                        	.member	FixedDevice,6,16,17,1
  1132                        	.member	RemovableMedia,7,16,17,1
  1133                        	.member	Retired1,8,16,17,7
  1134                        	.member	DeviceType,15,16,17,1
  1135                        	.eos
  1136                        	.stag	fake105_,16,105
  1137                        	.member	FeatureSupported,0,16,17,1
  1138                        	.member	Reserved,1,16,17,15
  1139                        	.eos
  1140                        	.stag	fake106_,32,106
  1141                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1142                        	.member	ReservedByte49,2,14,17,6
  1143                        	.member	DmaSupported,8,14,17,1
  1144                        	.member	LbaSupported,9,14,17,1
  1145                        	.member	IordyDisable,10,14,17,1
  1146                        	.member	IordySupported,11,14,17,1
  1147                        	.member	Reserved1,12,14,17,1
  1148                        	.member	StandybyTimerSupport,13,14,17,1
  1149                        	.member	Reserved2,14,14,17,2
  1150                        	.member	ReservedWord50,16,16,8,16
  1151                        	.eos
  1152                        	.stag	fake107_,16,107
  1153                        	.member	ZonedCapabilities,0,16,17,2
  1154                        	.member	NonVolatileWriteCache,2,16,17,1
  1155                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1156                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1157                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1158                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1159                        	.member	IEEE1667,7,16,17,1
  1160                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1161                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1162                        	.member	WriteBufferDmaSupported,10,16,17,1
  1163                        	.member	ReadBufferDmaSupported,11,16,17,1
  1164                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  Mon Aug  9 2021 16:52                                                Page 23


  1165                        	.member	LPSAERCSupported,13,16,17,1
  1166                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1167                        	.member	CFastSpecSupported,15,16,17,1
  1168                        	.eos
  1169                        	.stag	fake108_,32,108
  1170                        	.member	Reserved0,0,16,17,1
  1171                        	.member	SataGen1,1,16,17,1
  1172                        	.member	SataGen2,2,16,17,1
  1173                        	.member	SataGen3,3,16,17,1
  1174                        	.member	Reserved1,4,16,17,4
  1175                        	.member	NCQ,8,16,17,1
  1176                        	.member	HIPM,9,16,17,1
  1177                        	.member	PhyEvents,10,16,17,1
  1178                        	.member	NcqUnload,11,16,17,1
  1179                        	.member	NcqPriority,12,16,17,1
  1180                        	.member	HostAutoPS,13,16,17,1
  1181                        	.member	DeviceAutoPS,14,16,17,1
  1182                        	.member	ReadLogDMA,15,16,17,1
  1183                        	.member	Reserved2,16,16,17,1
  1184                        	.member	CurrentSpeed,17,16,17,3
  1185                        	.member	NcqStreaming,20,16,17,1
  1186                        	.member	NcqQueueMgmt,21,16,17,1
  1187                        	.member	NcqReceiveSend,22,16,17,1
  1188                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1189                        	.member	Reserved3,24,16,17,8
  1190                        	.eos
  1191                        	.stag	fake109_,16,109
  1192                        	.member	Reserved0,0,16,17,1
  1193                        	.member	NonZeroOffsets,1,16,17,1
  1194                        	.member	DmaSetupAutoActivate,2,16,17,1
  1195                        	.member	DIPM,3,16,17,1
  1196                        	.member	InOrderData,4,16,17,1
  1197                        	.member	HardwareFeatureControl,5,16,17,1
  1198                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1199                        	.member	NCQAutosense,7,16,17,1
  1200                        	.member	DEVSLP,8,16,17,1
  1201                        	.member	HybridInformation,9,16,17,1
  1202                        	.member	Reserved1,10,16,17,6
  1203                        	.eos
  1204                        	.stag	fake110_,16,110
  1205                        	.member	Reserved0,0,16,17,1
  1206                        	.member	NonZeroOffsets,1,16,17,1
  1207                        	.member	DmaSetupAutoActivate,2,16,17,1
  1208                        	.member	DIPM,3,16,17,1
  1209                        	.member	InOrderData,4,16,17,1
  1210                        	.member	HardwareFeatureControl,5,16,17,1
  1211                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1212                        	.member	DeviceAutoPS,7,16,17,1
  1213                        	.member	DEVSLP,8,16,17,1
  1214                        	.member	HybridInformation,9,16,17,1
  1215                        	.member	Reserved1,10,16,17,6
  1216                        	.eos
  1217                        	.stag	fake111_,48,111
  1218                        	.member	SmartCommands,0,16,17,1
  1219                        	.member	SecurityMode,1,16,17,1
  1220                        	.member	RemovableMediaFeature,2,16,17,1
  1221                        	.member	PowerManagement,3,16,17,1
  Mon Aug  9 2021 16:52                                                Page 24


  1222                        	.member	Reserved1,4,16,17,1
  1223                        	.member	WriteCache,5,16,17,1
  1224                        	.member	LookAhead,6,16,17,1
  1225                        	.member	ReleaseInterrupt,7,16,17,1
  1226                        	.member	ServiceInterrupt,8,16,17,1
  1227                        	.member	DeviceReset,9,16,17,1
  1228                        	.member	HostProtectedArea,10,16,17,1
  1229                        	.member	Obsolete1,11,16,17,1
  1230                        	.member	WriteBuffer,12,16,17,1
  1231                        	.member	ReadBuffer,13,16,17,1
  1232                        	.member	Nop,14,16,17,1
  1233                        	.member	Obsolete2,15,16,17,1
  1234                        	.member	DownloadMicrocode,16,16,17,1
  1235                        	.member	DmaQueued,17,16,17,1
  1236                        	.member	Cfa,18,16,17,1
  1237                        	.member	AdvancedPm,19,16,17,1
  1238                        	.member	Msn,20,16,17,1
  1239                        	.member	PowerUpInStandby,21,16,17,1
  1240                        	.member	ManualPowerUp,22,16,17,1
  1241                        	.member	Reserved2,23,16,17,1
  1242                        	.member	SetMax,24,16,17,1
  1243                        	.member	Acoustics,25,16,17,1
  1244                        	.member	BigLba,26,16,17,1
  1245                        	.member	DeviceConfigOverlay,27,16,17,1
  1246                        	.member	FlushCache,28,16,17,1
  1247                        	.member	FlushCacheExt,29,16,17,1
  1248                        	.member	WordValid83,30,16,17,2
  1249                        	.member	SmartErrorLog,32,16,17,1
  1250                        	.member	SmartSelfTest,33,16,17,1
  1251                        	.member	MediaSerialNumber,34,16,17,1
  1252                        	.member	MediaCardPassThrough,35,16,17,1
  1253                        	.member	StreamingFeature,36,16,17,1
  1254                        	.member	GpLogging,37,16,17,1
  1255                        	.member	WriteFua,38,16,17,1
  1256                        	.member	WriteQueuedFua,39,16,17,1
  1257                        	.member	WWN64Bit,40,16,17,1
  1258                        	.member	URGReadStream,41,16,17,1
  1259                        	.member	URGWriteStream,42,16,17,1
  1260                        	.member	ReservedForTechReport,43,16,17,2
  1261                        	.member	IdleWithUnloadFeature,45,16,17,1
  1262                        	.member	WordValid,46,16,17,2
  1263                        	.eos
  1264                        	.stag	fake112_,48,112
  1265                        	.member	SmartCommands,0,16,17,1
  1266                        	.member	SecurityMode,1,16,17,1
  1267                        	.member	RemovableMediaFeature,2,16,17,1
  1268                        	.member	PowerManagement,3,16,17,1
  1269                        	.member	Reserved1,4,16,17,1
  1270                        	.member	WriteCache,5,16,17,1
  1271                        	.member	LookAhead,6,16,17,1
  1272                        	.member	ReleaseInterrupt,7,16,17,1
  1273                        	.member	ServiceInterrupt,8,16,17,1
  1274                        	.member	DeviceReset,9,16,17,1
  1275                        	.member	HostProtectedArea,10,16,17,1
  1276                        	.member	Obsolete1,11,16,17,1
  1277                        	.member	WriteBuffer,12,16,17,1
  1278                        	.member	ReadBuffer,13,16,17,1
  1279                        	.member	Nop,14,16,17,1
  Mon Aug  9 2021 16:52                                                Page 25


  1280                        	.member	Obsolete2,15,16,17,1
  1281                        	.member	DownloadMicrocode,16,16,17,1
  1282                        	.member	DmaQueued,17,16,17,1
  1283                        	.member	Cfa,18,16,17,1
  1284                        	.member	AdvancedPm,19,16,17,1
  1285                        	.member	Msn,20,16,17,1
  1286                        	.member	PowerUpInStandby,21,16,17,1
  1287                        	.member	ManualPowerUp,22,16,17,1
  1288                        	.member	Reserved2,23,16,17,1
  1289                        	.member	SetMax,24,16,17,1
  1290                        	.member	Acoustics,25,16,17,1
  1291                        	.member	BigLba,26,16,17,1
  1292                        	.member	DeviceConfigOverlay,27,16,17,1
  1293                        	.member	FlushCache,28,16,17,1
  1294                        	.member	FlushCacheExt,29,16,17,1
  1295                        	.member	Resrved3,30,16,17,1
  1296                        	.member	Words119_120Valid,31,16,17,1
  1297                        	.member	SmartErrorLog,32,16,17,1
  1298                        	.member	SmartSelfTest,33,16,17,1
  1299                        	.member	MediaSerialNumber,34,16,17,1
  1300                        	.member	MediaCardPassThrough,35,16,17,1
  1301                        	.member	StreamingFeature,36,16,17,1
  1302                        	.member	GpLogging,37,16,17,1
  1303                        	.member	WriteFua,38,16,17,1
  1304                        	.member	WriteQueuedFua,39,16,17,1
  1305                        	.member	WWN64Bit,40,16,17,1
  1306                        	.member	URGReadStream,41,16,17,1
  1307                        	.member	URGWriteStream,42,16,17,1
  1308                        	.member	ReservedForTechReport,43,16,17,2
  1309                        	.member	IdleWithUnloadFeature,45,16,17,1
  1310                        	.member	Reserved4,46,16,17,2
  1311                        	.eos
  1312                        	.stag	fake113_,16,113
  1313                        	.member	TimeRequired,0,16,17,15
  1314                        	.member	ExtendedTimeReported,15,16,17,1
  1315                        	.eos
  1316                        	.stag	fake114_,16,114
  1317                        	.member	TimeRequired,0,16,17,15
  1318                        	.member	ExtendedTimeReported,15,16,17,1
  1319                        	.eos
  1320                        	.stag	fake115_,16,115
  1321                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1322                        	.member	Reserved0,4,16,17,8
  1323                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1324                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1325                        	.member	Reserved1,14,16,17,2
  1326                        	.eos
  1327                        	.stag	fake116_,16,116
  1328                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1329                        	.member	WriteReadVerify,1,16,17,1
  1330                        	.member	WriteUncorrectableExt,2,16,17,1
  1331                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1332                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1333                        	.member	FreefallControl,5,16,17,1
  1334                        	.member	SenseDataReporting,6,16,17,1
  Mon Aug  9 2021 16:52                                                Page 26


  1335                        	.member	ExtendedPowerConditions,7,16,17,1
  1336                        	.member	Reserved0,8,16,17,6
  1337                        	.member	WordValid,14,16,17,2
  1338                        	.eos
  1339                        	.stag	fake117_,16,117
  1340                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1341                        	.member	WriteReadVerify,1,16,17,1
  1342                        	.member	WriteUncorrectableExt,2,16,17,1
  1343                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1344                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1345                        	.member	FreefallControl,5,16,17,1
  1346                        	.member	SenseDataReporting,6,16,17,1
  1347                        	.member	ExtendedPowerConditions,7,16,17,1
  1348                        	.member	Reserved0,8,16,17,6
  1349                        	.member	Reserved1,14,16,17,2
  1350                        	.eos
  1351                        	.stag	fake118_,16,118
  1352                        	.member	SecuritySupported,0,16,17,1
  1353                        	.member	SecurityEnabled,1,16,17,1
  1354                        	.member	SecurityLocked,2,16,17,1
  1355                        	.member	SecurityFrozen,3,16,17,1
  1356                        	.member	SecurityCountExpired,4,16,17,1
  1357                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1358                        	.member	Reserved0,6,16,17,2
  1359                        	.member	SecurityLevel,8,16,17,1
  1360                        	.member	Reserved1,9,16,17,7
  1361                        	.eos
  1362                        	.stag	fake119_,16,119
  1363                        	.member	MaximumCurrentInMA,0,16,17,12
  1364                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1365                        	.member	CfaPowerMode1Required,13,16,17,1
  1366                        	.member	Reserved0,14,16,17,1
  1367                        	.member	Word160Supported,15,16,17,1
  1368                        	.eos
  1369                        	.stag	fake120_,16,120
  1370                        	.member	SupportsTrim,0,16,17,1
  1371                        	.member	Reserved0,1,16,17,15
  1372                        	.eos
  1373                        	.stag	fake121_,16,121
  1374                        	.member	Supported,0,16,17,1
  1375                        	.member	Reserved0,1,16,17,1
  1376                        	.member	WriteSameSuported,2,16,17,1
  1377                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1378                        	.member	FeatureControlSuported,4,16,17,1
  1379                        	.member	DataTablesSuported,5,16,17,1
  1380                        	.member	Reserved1,6,16,17,6
  1381                        	.member	VendorSpecific,12,16,17,4
  1382                        	.eos
  1383                        	.stag	fake122_,16,122
  1384                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1385                        	.member	Word209Supported,14,16,17,1
  1386                        	.member	Reserved0,15,16,17,1
  1387                        	.eos
  1388                        	.stag	fake123_,16,123
  1389                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1390                        	.member	Reserved0,1,16,17,3
  1391                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  Mon Aug  9 2021 16:52                                                Page 27


  1392                        	.member	Reserved1,5,16,17,3
  1393                        	.member	NVCachePowerModeVersion,8,16,17,4
  1394                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1395                        	.eos
  1396                        	.stag	fake124_,16,124
  1397                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1398                        	.member	Reserved,8,14,8,8
  1399                        	.eos
  1400                        	.stag	fake125_,16,125
  1401                        	.member	MajorVersion,0,16,17,12
  1402                        	.member	TransportType,12,16,17,4
  1403                        	.eos
  1404                        	.stag	_IDENTIFY_DEVICE_DATA,4096,126
  1405                        	.member	GeneralConfiguration,0,10,8,16,104
  1406                        	.member	NumCylinders,16,16,8,16
  1407                        	.member	SpecificConfiguration,32,16,8,16
  1408                        	.member	NumHeads,48,16,8,16
  1409                        	.member	Retired1Bytes,64,110,8,0,4
  1410                        	.member	NumSectorsPerTrack,96,16,8,16
  1411                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1412                        	.member	SerialNumber,160,110,8,0,20
  1413                        	.member	Retired2,320,112,8,0,2
  1414                        	.member	Obsolete1,352,16,8,16
  1415                        	.member	FirmwareRevision,368,110,8,0,8
  1416                        	.member	ModelNumber,432,110,8,0,40
  1417                        	.member	MaximumBlockTransfer,752,14,8,8
  1418                        	.member	VendorUnique2,760,14,8,8
  1419                        	.member	TrustedComputing,768,10,8,16,105
  1420                        	.member	Capabilities,784,10,8,32,106
  1421                        	.member	ObsoleteWords51,816,112,8,0,2
  1422                        	.member	TranslationFieldsValid,848,16,17,3
  1423                        	.member	Reserved3,851,16,17,5
  1424                        	.member	FreeFallControlSensitivity,856,16,17,8
  1425                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1426                        	.member	NumberOfCurrentHeads,880,16,8,16
  1427                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1428                        	.member	CurrentSectorCapacity,912,18,8,32
  1429                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1430                        	.member	MultiSectorSettingValid,952,14,17,1
  1431                        	.member	ReservedByte59,953,14,17,3
  1432                        	.member	SanitizeFeatureSupported,956,14,17,1
  1433                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1434                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1435                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1436                        	.member	UserAddressableSectors,960,18,8,32
  1437                        	.member	ObsoleteWord62,992,16,8,16
  1438                        	.member	MultiWordDMASupport,1008,16,17,8
  1439                        	.member	MultiWordDMAActive,1016,16,17,8
  1440                        	.member	AdvancedPIOModes,1024,16,17,8
  1441                        	.member	ReservedByte64,1032,16,17,8
  1442                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1443                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1444                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1445                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1446                        	.member	AdditionalSupported,1104,10,8,16,107
  Mon Aug  9 2021 16:52                                                Page 28


  1447                        	.member	ReservedWords70,1120,112,8,0,5
  1448                        	.member	QueueDepth,1200,16,17,5
  1449                        	.member	ReservedWord75,1205,16,17,11
  1450                        	.member	SerialAtaCapabilities,1216,10,8,32,108
  1451                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    109
  1452                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,11
                    0
  1453                        	.member	MajorRevision,1280,16,8,16
  1454                        	.member	MinorRevision,1296,16,8,16
  1455                        	.member	CommandSetSupport,1312,10,8,48,111
  1456                        	.member	CommandSetActive,1360,10,8,48,112
  1457                        	.member	UltraDMASupport,1408,16,17,8
  1458                        	.member	UltraDMAActive,1416,16,17,8
  1459                        	.member	NormalSecurityEraseUnit,1424,10,8,16,113
  1460                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
                    14
  1461                        	.member	CurrentAPMLevel,1456,16,17,8
  1462                        	.member	ReservedWord91,1464,16,17,8
  1463                        	.member	MasterPasswordID,1472,16,8,16
  1464                        	.member	HardwareResetResult,1488,16,8,16
  1465                        	.member	CurrentAcousticValue,1504,16,17,8
  1466                        	.member	RecommendedAcousticValue,1512,16,17,8
  1467                        	.member	StreamMinRequestSize,1520,16,8,16
  1468                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1469                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1470                        	.member	StreamingPerfGranularity,1568,18,8,32
  1471                        	.member	Max48BitLBA,1600,114,8,0,2
  1472                        	.member	StreamingTransferTime,1664,16,8,16
  1473                        	.member	DsmCap,1680,16,8,16
  1474                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    15
  1475                        	.member	InterSeekDelay,1712,16,8,16
  1476                        	.member	WorldWideName,1728,112,8,0,4
  1477                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1478                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1479                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1480                        	.member	CommandSetSupportExt,1904,10,8,16,116
  1481                        	.member	CommandSetActiveExt,1920,10,8,16,117
  1482                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1483                        	.member	MsnSupport,2032,16,17,2
  1484                        	.member	ReservedWord127,2034,16,17,14
  1485                        	.member	SecurityStatus,2048,10,8,16,118
  1486                        	.member	ReservedWord129,2064,112,8,0,31
  1487                        	.member	CfaPowerMode1,2560,10,8,16,119
  1488                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1489                        	.member	NominalFormFactor,2688,16,17,4
  1490                        	.member	ReservedWord168,2692,16,17,12
  1491                        	.member	DataSetManagementFeature,2704,10,8,16,12
                    0
  1492                        	.member	AdditionalProductID,2720,112,8,0,4
  1493                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1494                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1495                        	.member	SCTCommandTransport,3296,10,8,16,121
  Mon Aug  9 2021 16:52                                                Page 29


  1496                        	.member	ReservedWord207,3312,112,8,0,2
  1497                        	.member	BlockAlignment,3344,10,8,16,122
  1498                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1499                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1500                        	.member	NVCacheCapabilities,3424,10,8,16,123
  1501                        	.member	NVCacheSizeLSW,3440,16,8,16
  1502                        	.member	NVCacheSizeMSW,3456,16,8,16
  1503                        	.member	NominalMediaRotationRate,3472,16,8,16
  1504                        	.member	ReservedWord218,3488,16,8,16
  1505                        	.member	NVCacheOptions,3504,10,8,16,124
  1506                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1507                        	.member	ReservedWord220,3528,16,17,8
  1508                        	.member	ReservedWord221,3536,16,8,16
  1509                        	.member	TransportMajorVersion,3552,10,8,16,125
  1510                        	.member	TransportMinorVersion,3568,16,8,16
  1511                        	.member	ReservedWord224,3584,112,8,0,6
  1512                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1513                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1514                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1515                        	.member	ReservedWord236,3776,112,8,0,19
  1516                        	.member	Signature,4080,16,17,8
  1517                        	.member	CheckSum,4088,16,17,8
  1518                        	.eos
  1519                        	.stag	_FXDosDevice,5744,127
  1520                        	.member	type,0,14,8,8
  1521                        	.member	initialized,8,14,8,8
  1522                        	.member	devdata,16,129,8,32
  1523                        	.member	devstatus,48,14,8,8
  1524                        	.member	bootSector,56,10,8,928,97
  1525                        	.member	partitionTable,984,10,8,128,98
  1526                        	.member	fileAllocationTable,1112,110,8,0,512
  1527                        	.member	bsOffset,5208,18,8,32
  1528                        	.member	rootDirSectors,5240,18,8,32
  1529                        	.member	root_entry_count,5272,5,8,16
  1530                        	.member	rootEntriesPerPage,5288,5,8,16
  1531                        	.member	sectors_per_cluster,5304,5,8,16
  1532                        	.member	firstDataSector,5320,18,8,32
  1533                        	.member	fatTableOffset,5352,18,8,32
  1534                        	.member	volume_name,5384,110,8,0,12
  1535                        	.member	root_volume_name,5480,110,8,0,12
  1536                        	.member	errorCode,5576,14,8,8
  1537                        	.member	pfInit,5584,641,8,32
  1538                        	.member	pfReset,5616,641,8,32
  1539                        	.member	pfUninit,5648,641,8,32
  1540                        	.member	pfReader,5680,654,8,32
  1541                        	.member	pfWriter,5712,654,8,32
  1542                        	.eos
  1543                        	.utag	item,32,128
  1544                        	.member	dir,0,138,11,32,87
  1545                        	.member	file,0,138,11,32,86
  1546                        	.member	fileInfo,0,138,11,32,88
  1547                        	.eos
  Mon Aug  9 2021 16:52                                                Page 30


  1548                        	.stag	_dos_handle,80,129
  1549                        	.member	fs,0,138,8,32,84
  1550                        	.member	fr,32,5,8,16
  1551                        	.member	path,48,142,8,32
  1552                        	.eos
  1553                        	.stag	fx_file,112,130
  1554                        	.member	fs,0,138,8,32,84
  1555                        	.member	fileInfo,32,138,8,32,88
  1556                        	.member	f,64,138,8,32,86
  1557                        	.member	fr,96,5,8,16
  1558                        	.eos
  1559                        	.line	812
  1560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",2
  1561                        ;#include "fxmemorymanager.h"
  1562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
  1563                        	.line	129
  1564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",3
  1565                        ;#include "drivers/DRIVER.h"
  1566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/DRIVER.h",0
  1567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
  1568                        	.line	30
  1569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/DRIVER.h",5
  1570                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
  1571                        	.line	129
  1572                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/DRIVER.h",6
  1573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
  1574                        	.line	1960
  1575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/DRIVER.h",104
  1576                        	.line	113
  1577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",4
  1578                        ;
  1579                        ;#pragma section CODE=FXDOS,offset $08:92F5
  1580                        FXDOS	section	offset $08:92F5
  1581 08:92F5:              	ends
  1582                        ;
  1583                        ;#define DRIVER_SIZE  (0x05F0)
  1584                        ;#define DRIVER_MAX   (25)
  1585                        ;#define DRIVER_BASE  (0x040000)
  1586                        ;
  1587                        ;//static UCHAR sectorBuffer[512];
  1588                        ;static LPSTR sectorBuffer = NULL;
  1589                        	data
  1590                        ~~sectorBuffer:
  1591 00:0000: 00 00 00 00  	dl	$0
  1592 00:0004:              	ends
  1593                        ;//static CHAR	 longnamecount;
  1594                        ;//static UCHAR longnameBuffer[255];
  Mon Aug  9 2021 16:52                                                Page 31


  1595                        ;
  1596                        ;FXDOSDEVICE fxdosDevice;
  1597                        ;//
  1598                        ;// list of device drivers
  1599                        ;//
  1600                        ;static PFXNODELIST _k_dos_devicedrivers	    = NU
                    LL;
  1601                        	data
  1602                        ~~_k_dos_devicedrivers:
  1603 00:0004: 00 00 00 00  	dl	$0
  1604 00:0008:              	ends
  1605                        ;//
  1606                        ;// list of drives
  1607                        ;//
  1608                        ;static PFXNODELIST _k_dos_deviceinstance	= NULL;
  1609                        	data
  1610                        ~~_k_dos_deviceinstance:
  1611 00:0008: 00 00 00 00  	dl	$0
  1612 00:000C:              	ends
  1613                        ;
  1614                        ;//#define MAX_IRQ_BLOCKS          4
  1615                        ;//#define MAX_IRQ_INTERRUPTS      8
  1616                        ;
  1617                        ;/*
  1618                        ;DEVICEDRIVER_IRQ g_irq_handlers[][8]  = {   {0x00
                    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//REG0
  1619                        ;							
                    				{0x00,0x00,0x00,0x00,0x00,0x00,0
                    x00,0x00},//REG1
  1620                        ;							
                    				{0x00,0x00,0x00,0x00,0x00,0x00,0
                    x00,0x00},//REG2
  1621                        ;							
                    				{0x00,0x00,0x00,0x00,0x00,0x00,0
                    x00,0x00} //REG3
  1622                        ;							
                     	 	 	 };
  1623                        ;*/
  1624                        ;
  1625                        ;
  1626                        ;extern IRQCHAIN g_irq_handlers[4][8];
  1627                        ;
  1628                        ;//extern FX_DEVICE_DRIVER DRIVER_B2Console;
  1629                        ;//extern FX_DEVICE_DRIVER DRIVER_B2SDCard;
  1630                        ;//extern FX_DEVICE_DRIVER DRIVER_FMXConsole;
  1631                        ;//extern FX_DEVICE_DRIVER DRIVER_FMXSDCard;
  1632                        ;
  1633                        ;
  1634                        ;//extern PFX_DEVICE_DRIVER DEVICE_COM;
  1635                        ;//extern PFX_DEVICE_DRIVER DEVICE_HD;
  1636                        ;//extern PFX_DEVICE_DRIVER DEVICE_SD;
  1637                        ;//extern PFX_DEVICE_DRIVER DEVICE_CON;
  1638                        ;
  1639                        ;LPVOID k_dos_ext_load_driver(LPCSTR driverPath)
  1640                        ;{
  1641                        	.line	52
  1642                        	.line	53
  1643                        	FXDOS
  Mon Aug  9 2021 16:52                                                Page 32


  1644                        	xdef	~~k_dos_ext_load_driver
  1645                        	func
  1646                        	.function	53
  1647                        ~~k_dos_ext_load_driver:
  1648                        	longa	on
  1649                        	longi	on
  1650 08:92F5: 3B           	tsc
  1651 08:92F6: 38           	sec
  1652 08:92F7: E9 16 00     	sbc	#L2
  1653 08:92FA: 1B           	tcs
  1654 08:92FB: 0B           	phd
  1655 08:92FC: 5B           	tcd
  1656             00000004   driverPath_0	set	4
  1657                        	.block	53
  1658                        ;	UINT dsize = 0;
  1659                        ;	HANDLE hdriver = NULL;
  1660                        ;	PFX_DEVICE_DRIVER pstrHead = NULL;
  1661                        ;	ULONG idx = 0L;
  1662                        ;	LPVOID driver = NULL;
  1663                        ;
  1664                        ;	hdriver = k_user_LoadResource(driverPath);
  1665             00000000   dsize_1	set	0
  1666             00000002   hdriver_1	set	2
  1667             00000006   pstrHead_1	set	6
  1668             0000000A   idx_1	set	10
  1669             0000000E   driver_1	set	14
  1670                        	.sym	dsize,0,16,1,16
  1671                        	.sym	hdriver,2,129,1,32
  1672                        	.sym	pstrHead,6,138,1,32,58
  1673                        	.sym	idx,10,18,1,32
  1674                        	.sym	driver,14,129,1,32
  1675                        	.sym	driverPath,4,142,6,32
  1676 08:92FD: 64 05        	stz	<L3+dsize_1
  1677 08:92FF: 64 07        	stz	<L3+hdriver_1
  1678 08:9301: 64 09        	stz	<L3+hdriver_1+2
  1679 08:9303: 64 0B        	stz	<L3+pstrHead_1
  1680 08:9305: 64 0D        	stz	<L3+pstrHead_1+2
  1681 08:9307: 64 0F        	stz	<L3+idx_1
  1682 08:9309: 64 11        	stz	<L3+idx_1+2
  1683 08:930B: 64 13        	stz	<L3+driver_1
  1684 08:930D: 64 15        	stz	<L3+driver_1+2
  1685                        	.line	60
  1686 08:930F: D4 1C        	pei	<L2+driverPath_0+2
  1687 08:9311: D4 1A        	pei	<L2+driverPath_0
  1688 08:9313: 22 xx xx xx  	jsl	~~k_user_LoadResource
  1689 08:9317: 85 07        	sta	<L3+hdriver_1
  1690 08:9319: 86 09        	stx	<L3+hdriver_1+2
  1691                        ;	if(hdriver!=NULL)
  1692                        	.line	61
  1693                        ;	{
  1694 08:931B: A5 07        	lda	<L3+hdriver_1
  1695 08:931D: 05 09        	ora	<L3+hdriver_1+2
  1696 08:931F: D0 03        	bne	L5
  1697 08:9321: 82 9B 00     	brl	L10001
  1698                        L5:
  1699                        	.line	62
  1700                        ;		pstrHead =  (PFX_DEVICE_DRIVER)(&((LPSTR
                    )hdriver)[sizeof(FXRFHEADER)]);
  Mon Aug  9 2021 16:52                                                Page 33


  1701                        	.line	63
  1702 08:9324: 18           	clc
  1703 08:9325: A9 09 00     	lda	#$9
  1704 08:9328: 65 07        	adc	<L3+hdriver_1
  1705 08:932A: 85 0B        	sta	<L3+pstrHead_1
  1706 08:932C: A9 00 00     	lda	#$0
  1707 08:932F: 65 09        	adc	<L3+hdriver_1+2
  1708 08:9331: 85 0D        	sta	<L3+pstrHead_1+2
  1709                        ;
  1710                        ;		idx = (((ULONG)pstrHead->driver_context)
                     - ((ULONG)FX_DRV_IRQ_SLOT_0))/((ULONG)FX_DRV_SIZE);
  1711                        	.line	65
  1712 08:9333: 18           	clc
  1713 08:9334: A9 00 00     	lda	#$0
  1714 08:9337: A0 4D 00     	ldy	#$4d
  1715 08:933A: 77 0B        	adc	[<L3+pstrHead_1],Y
  1716 08:933C: 85 01        	sta	<R0
  1717 08:933E: A9 FC FF     	lda	#$fffc
  1718 08:9341: A0 4F 00     	ldy	#$4f
  1719 08:9344: 77 0B        	adc	[<L3+pstrHead_1],Y
  1720 08:9346: 85 03        	sta	<R0+2
  1721 08:9348: F4 00 00     	pea	#^$5f0
  1722 08:934B: F4 F0 05     	pea	#<$5f0
  1723 08:934E: D4 03        	pei	<R0+2
  1724 08:9350: D4 01        	pei	<R0
  1725                        	xref	~~~ludv
  1726 08:9352: 22 xx xx xx  	jsl	~~~ludv
  1727 08:9356: 85 0F        	sta	<L3+idx_1
  1728 08:9358: 86 11        	stx	<L3+idx_1+2
  1729                        ;		dsize = *((ULONG*)((PFXRFHEADER)hdriver)
                    ->magic) - sizeof(FXRFHEADER) - sizeof(FX_DEVICE_DRIVER);
  1730                        	.line	66
  1731 08:935A: 18           	clc
  1732 08:935B: A9 96 FF     	lda	#$ff96
  1733 08:935E: 67 07        	adc	[<L3+hdriver_1]
  1734 08:9360: 85 01        	sta	<R0
  1735 08:9362: A9 FF FF     	lda	#$ffff
  1736 08:9365: A0 02 00     	ldy	#$2
  1737 08:9368: 77 07        	adc	[<L3+hdriver_1],Y
  1738 08:936A: 85 03        	sta	<R0+2
  1739 08:936C: A5 01        	lda	<R0
  1740 08:936E: 85 05        	sta	<L3+dsize_1
  1741                        ;
  1742                        ;		/*
  1743                        ;		k_debug_nstrings("DRIVER NAME:",pstrHead
                    ->name,32);
  1744                        ;		k_debug_pointer ("DRIVER ADDR:",pstrHead
                    ->driver_context);
  1745                        ;		k_debug_long    ("DRIVER RES SIZE:", *((
                    ULONG*)((PFXRFHEADER)hdriver)->magic) );
  1746                        ;		k_debug_long    ("DRIVER SIZE:", dsize )
                    ;
  1747                        ;		k_debug_long    ("DRIVER IDX:", idx );
  1748                        ;		*/
  1749                        ;
  1750                        ;		memset(pstrHead->driver_context,0,FX_DRV
                    _SIZE);
  1751                        	.line	76
  Mon Aug  9 2021 16:52                                                Page 34


  1752 08:9370: F4 F0 05     	pea	#<$5f0
  1753 08:9373: F4 00 00     	pea	#<$0
  1754 08:9376: A0 4F 00     	ldy	#$4f
  1755 08:9379: B7 0B        	lda	[<L3+pstrHead_1],Y
  1756 08:937B: 48           	pha
  1757 08:937C: A0 4D 00     	ldy	#$4d
  1758 08:937F: B7 0B        	lda	[<L3+pstrHead_1],Y
  1759 08:9381: 48           	pha
  1760 08:9382: 22 xx xx xx  	jsl	~~memset
  1761                        ;		memcpy(pstrHead->driver_context,(LPVOID)
                    (&((LPSTR)hdriver)[sizeof(FXRFHEADER) + sizeof(FX_DEVICE_DRI
                    VER)]),dsize);
  1762                        	.line	77
  1763 08:9386: D4 05        	pei	<L3+dsize_1
  1764 08:9388: 18           	clc
  1765 08:9389: A9 6A 00     	lda	#$6a
  1766 08:938C: 65 07        	adc	<L3+hdriver_1
  1767 08:938E: 85 01        	sta	<R0
  1768 08:9390: A9 00 00     	lda	#$0
  1769 08:9393: 65 09        	adc	<L3+hdriver_1+2
  1770 08:9395: 85 03        	sta	<R0+2
  1771 08:9397: D4 03        	pei	<R0+2
  1772 08:9399: D4 01        	pei	<R0
  1773 08:939B: A0 4F 00     	ldy	#$4f
  1774 08:939E: B7 0B        	lda	[<L3+pstrHead_1],Y
  1775 08:93A0: 48           	pha
  1776 08:93A1: A0 4D 00     	ldy	#$4d
  1777 08:93A4: B7 0B        	lda	[<L3+pstrHead_1],Y
  1778 08:93A6: 48           	pha
  1779 08:93A7: 22 xx xx xx  	jsl	~~memcpy
  1780                        ;
  1781                        ;		free(hdriver);
  1782                        	.line	79
  1783 08:93AB: D4 09        	pei	<L3+hdriver_1+2
  1784 08:93AD: D4 07        	pei	<L3+hdriver_1
  1785 08:93AF: 22 xx xx xx  	jsl	~~free
  1786                        ;
  1787                        ;		driver = k_dos_load_driver(idx);
  1788                        	.line	81
  1789 08:93B3: D4 11        	pei	<L3+idx_1+2
  1790 08:93B5: D4 0F        	pei	<L3+idx_1
  1791 08:93B7: 22 D5 93 08  	jsl	~~k_dos_load_driver
  1792 08:93BB: 85 13        	sta	<L3+driver_1
  1793 08:93BD: 86 15        	stx	<L3+driver_1+2
  1794                        ;	}
  1795                        	.line	82
  1796                        ;
  1797                        ;	return driver;
  1798                        L10001:
  1799                        	.line	84
  1800 08:93BF: A6 15        	ldx	<L3+driver_1+2
  1801 08:93C1: A5 13        	lda	<L3+driver_1
  1802                        L6:
  1803 08:93C3: A8           	tay
  1804 08:93C4: A5 18        	lda	<L2+2
  1805 08:93C6: 85 1C        	sta	<L2+2+4
  1806 08:93C8: A5 17        	lda	<L2+1
  1807 08:93CA: 85 1B        	sta	<L2+1+4
  Mon Aug  9 2021 16:52                                                Page 35


  1808 08:93CC: 2B           	pld
  1809 08:93CD: 3B           	tsc
  1810 08:93CE: 18           	clc
  1811 08:93CF: 69 1A 00     	adc	#L2+4
  1812 08:93D2: 1B           	tcs
  1813 08:93D3: 98           	tya
  1814 08:93D4: 6B           	rtl
  1815                        ;}
  1816                        	.line	85
  1817                        	.endblock	85
  1818             00000016   L2	equ	22
  1819             00000005   L3	equ	5
  1820 08:93D5:              	ends
  1821                        	efunc
  1822                        	.endfunc	85,5,22
  1823                        	.line	85
  1824                        ;
  1825                        ;LPVOID k_dos_load_driver(ULONG driver_idx)
  1826                        ;{
  1827                        	.line	87
  1828                        	.line	88
  1829                        	FXDOS
  1830                        	xdef	~~k_dos_load_driver
  1831                        	func
  1832                        	.function	88
  1833                        ~~k_dos_load_driver:
  1834                        	longa	on
  1835                        	longi	on
  1836 08:93D5: 3B           	tsc
  1837 08:93D6: 38           	sec
  1838 08:93D7: E9 48 00     	sbc	#L7
  1839 08:93DA: 1B           	tcs
  1840 08:93DB: 0B           	phd
  1841 08:93DC: 5B           	tcd
  1842             00000004   driver_idx_0	set	4
  1843                        	.block	88
  1844                        ;	CHAR major[16];
  1845                        ;	CHAR minor[16];
  1846                        ;	CHAR k16buffer[16];
  1847                        ;
  1848                        ;	LPSTR log = NULL;
  1849                        ;
  1850                        ;	PFX_DEVICE_DRIVER driver = NULL;
  1851                        ;
  1852                        ;	GETDRIVERDEF _k_get_driver_def = NULL;
  1853                        ;
  1854                        ;	sectorBuffer = (LPSTR)k_mem_allocate_heap(512);
  1855             00000000   major_1	set	0
  1856             00000010   minor_1	set	16
  1857             00000020   k16buffer_1	set	32
  1858             00000030   log_1	set	48
  1859             00000034   driver_1	set	52
  1860             00000038   _k_get_driver_def_1	set	56
  1861                        	.sym	major,0,110,1,0,16
  1862                        	.sym	minor,16,110,1,0,16
  1863                        	.sym	k16buffer,32,110,1,0,16
  1864                        	.sym	log,48,142,1,32
  1865                        	.sym	driver,52,138,1,32,58
  Mon Aug  9 2021 16:52                                                Page 36


  1866                        	.sym	_k_get_driver_def,56,8842,1,32,58
  1867                        	.sym	driver_idx,4,18,6,32
  1868 08:93DD: 64 3D        	stz	<L8+log_1
  1869 08:93DF: 64 3F        	stz	<L8+log_1+2
  1870 08:93E1: 64 41        	stz	<L8+driver_1
  1871 08:93E3: 64 43        	stz	<L8+driver_1+2
  1872 08:93E5: 64 45        	stz	<L8+_k_get_driver_def_1
  1873 08:93E7: 64 47        	stz	<L8+_k_get_driver_def_1+2
  1874                        	.line	99
  1875 08:93E9: F4 00 00     	pea	#^$200
  1876 08:93EC: F4 00 02     	pea	#<$200
  1877 08:93EF: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  1878 08:93F3: 8D xx xx     	sta	|~~sectorBuffer
  1879 08:93F6: 8E xx xx     	stx	|~~sectorBuffer+2
  1880                        ;
  1881                        ;	k_get_c256_major_version(major);
  1882                        	.line	101
  1883 08:93F9: F4 00 00     	pea	#0
  1884 08:93FC: 18           	clc
  1885 08:93FD: 7B           	tdc
  1886 08:93FE: 69 0D 00     	adc	#<L8+major_1
  1887 08:9401: 48           	pha
  1888 08:9402: 22 xx xx xx  	jsl	~~k_get_c256_major_version
  1889                        ;	k_get_c256_minor_version(minor);
  1890                        	.line	102
  1891 08:9406: F4 00 00     	pea	#0
  1892 08:9409: 18           	clc
  1893 08:940A: 7B           	tdc
  1894 08:940B: 69 1D 00     	adc	#<L8+minor_1
  1895 08:940E: 48           	pha
  1896 08:940F: 22 xx xx xx  	jsl	~~k_get_c256_minor_version
  1897                        ;
  1898                        ;	_k_get_driver_def = ((GETDRIVERDEF)((LPVOID)((UL
                    ONG)DRIVER_BASE + (driver_idx * (ULONG)DRIVER_SIZE))));
  1899                        	.line	104
  1900 08:9413: F4 00 00     	pea	#^$5f0
  1901 08:9416: F4 F0 05     	pea	#<$5f0
  1902 08:9419: D4 4E        	pei	<L7+driver_idx_0+2
  1903 08:941B: D4 4C        	pei	<L7+driver_idx_0
  1904                        	xref	~~~lmul
  1905 08:941D: 22 xx xx xx  	jsl	~~~lmul
  1906 08:9421: 85 01        	sta	<R0
  1907 08:9423: 86 03        	stx	<R0+2
  1908 08:9425: 18           	clc
  1909 08:9426: A9 00 00     	lda	#$0
  1910 08:9429: 65 01        	adc	<R0
  1911 08:942B: 85 05        	sta	<R1
  1912 08:942D: A9 04 00     	lda	#$4
  1913 08:9430: 65 03        	adc	<R0+2
  1914 08:9432: 85 07        	sta	<R1+2
  1915 08:9434: A5 05        	lda	<R1
  1916 08:9436: 85 45        	sta	<L8+_k_get_driver_def_1
  1917 08:9438: A5 07        	lda	<R1+2
  1918 08:943A: 85 47        	sta	<L8+_k_get_driver_def_1+2
  1919                        ;
  1920                        ;	//k_debug_integer("Scan slot:",(UINT)driver_idx)
                    ;
  1921                        ;	//k_debug_pointer("k_dos_load_drivers::scanning 
  Mon Aug  9 2021 16:52                                                Page 37


                    @",_k_get_driver_def);
  1922                        ;
  1923                        ;
  1924                        ;	if(*((LONG*)_k_get_driver_def) == 0x4E9383B) // 
                    sig bytes of driver
  1925                        	.line	110
  1926                        ;	{
  1927 08:943C: A7 45        	lda	[<L8+_k_get_driver_def_1]
  1928 08:943E: C9 3B 38     	cmp	#<$4e9383b
  1929 08:9441: D0 08        	bne	L10
  1930 08:9443: A0 02 00     	ldy	#$2
  1931 08:9446: B7 45        	lda	[<L8+_k_get_driver_def_1],Y
  1932 08:9448: C9 E9 04     	cmp	#^$4e9383b
  1933                        L10:
  1934 08:944B: F0 03        	beq	L11
  1935 08:944D: 82 B6 01     	brl	L10002
  1936                        L11:
  1937                        	.line	111
  1938                        ;		//k_debug_pointer("k_dos_load_drivers::d
                    river located@",_k_get_driver_def);
  1939                        ;		//k_debug_string("Driver Detected:\r\n")
                    ;
  1940                        ;		driver = _k_get_driver_def(major,minor);
  1941                        	.line	114
  1942 08:9450: F4 00 00     	pea	#0
  1943 08:9453: 18           	clc
  1944 08:9454: 7B           	tdc
  1945 08:9455: 69 1D 00     	adc	#<L8+minor_1
  1946 08:9458: 48           	pha
  1947 08:9459: F4 00 00     	pea	#0
  1948 08:945C: 18           	clc
  1949 08:945D: 7B           	tdc
  1950 08:945E: 69 0D 00     	adc	#<L8+major_1
  1951 08:9461: 48           	pha
  1952 08:9462: A6 47        	ldx	<L8+_k_get_driver_def_1+2
  1953 08:9464: A5 45        	lda	<L8+_k_get_driver_def_1
  1954                        	xref	~~~lcal
  1955 08:9466: 22 xx xx xx  	jsl	~~~lcal
  1956 08:946A: 85 41        	sta	<L8+driver_1
  1957 08:946C: 86 43        	stx	<L8+driver_1+2
  1958                        ;		if(driver)
  1959                        	.line	115
  1960                        ;		{
  1961 08:946E: A5 41        	lda	<L8+driver_1
  1962 08:9470: 05 43        	ora	<L8+driver_1+2
  1963 08:9472: D0 03        	bne	L12
  1964 08:9474: 82 8C 01     	brl	L10003
  1965                        L12:
  1966                        	.line	116
  1967                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver data pre@",driver);
  1968                        ;
  1969                        ;			if( ((ULONG)driver) < 0x010000L 
                    ) // handle short addressing for linear segment driver
  1970                        	.line	119
  1971                        ;				driver = (PFX_DEVICE_DRI
                    VER)(((ULONG)driver) + (((ULONG)_k_get_driver_def) & 0xFF000
                    0L));
  Mon Aug  9 2021 16:52                                                Page 38


  1972 08:9477: A5 41        	lda	<L8+driver_1
  1973 08:9479: C9 00 00     	cmp	#<$10000
  1974 08:947C: A5 43        	lda	<L8+driver_1+2
  1975 08:947E: E9 01 00     	sbc	#^$10000
  1976 08:9481: 90 03        	bcc	L13
  1977 08:9483: 82 1E 00     	brl	L10004
  1978                        L13:
  1979                        	.line	120
  1980 08:9486: 64 01        	stz	<R0
  1981 08:9488: A5 47        	lda	<L8+_k_get_driver_def_1+2
  1982 08:948A: 29 FF 00     	and	#^$ff0000
  1983 08:948D: 85 03        	sta	<R0+2
  1984 08:948F: 18           	clc
  1985 08:9490: A5 41        	lda	<L8+driver_1
  1986 08:9492: 65 01        	adc	<R0
  1987 08:9494: 85 05        	sta	<R1
  1988 08:9496: A5 43        	lda	<L8+driver_1+2
  1989 08:9498: 65 03        	adc	<R0+2
  1990 08:949A: 85 07        	sta	<R1+2
  1991 08:949C: A5 05        	lda	<R1
  1992 08:949E: 85 41        	sta	<L8+driver_1
  1993 08:94A0: A5 07        	lda	<R1+2
  1994 08:94A2: 85 43        	sta	<L8+driver_1+2
  1995                        ;
  1996                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver data post@",driver);
  1997                        ;
  1998                        ;			//k_debug_strings("  Name:",driv
                    er->name);
  1999                        ;			//k_debug_strings("    Major:",d
                    river->hmajor);
  2000                        ;			//k_debug_strings("    Minor:",d
                    river->hminor);
  2001                        ;
  2002                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::f_driver_load:",driver->f_driver_load);
  2003                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::f_driver_irq:",driver->f_driver_irq);
  2004                        ;
  2005                        ;
  2006                        ;			if((strcmp(driver->hmajor,major)
                     == 0) && (strcmp(driver->hminor,minor) == 0))
  2007                        L10004:
  2008                        	.line	132
  2009                        ;			{
  2010 08:94A4: F4 00 00     	pea	#0
  2011 08:94A7: 18           	clc
  2012 08:94A8: 7B           	tdc
  2013 08:94A9: 69 0D 00     	adc	#<L8+major_1
  2014 08:94AC: 48           	pha
  2015 08:94AD: 18           	clc
  2016 08:94AE: A9 30 00     	lda	#$30
  2017 08:94B1: 65 41        	adc	<L8+driver_1
  2018 08:94B3: 85 01        	sta	<R0
  2019 08:94B5: A9 00 00     	lda	#$0
  2020 08:94B8: 65 43        	adc	<L8+driver_1+2
  2021 08:94BA: 85 03        	sta	<R0+2
  2022 08:94BC: D4 03        	pei	<R0+2
  Mon Aug  9 2021 16:52                                                Page 39


  2023 08:94BE: D4 01        	pei	<R0
  2024 08:94C0: 22 xx xx xx  	jsl	~~strcmp
  2025 08:94C4: AA           	tax
  2026 08:94C5: F0 03        	beq	L14
  2027 08:94C7: 82 39 01     	brl	L10005
  2028                        L14:
  2029 08:94CA: F4 00 00     	pea	#0
  2030 08:94CD: 18           	clc
  2031 08:94CE: 7B           	tdc
  2032 08:94CF: 69 1D 00     	adc	#<L8+minor_1
  2033 08:94D2: 48           	pha
  2034 08:94D3: 18           	clc
  2035 08:94D4: A9 38 00     	lda	#$38
  2036 08:94D7: 65 41        	adc	<L8+driver_1
  2037 08:94D9: 85 05        	sta	<R1
  2038 08:94DB: A9 00 00     	lda	#$0
  2039 08:94DE: 65 43        	adc	<L8+driver_1+2
  2040 08:94E0: 85 07        	sta	<R1+2
  2041 08:94E2: D4 07        	pei	<R1+2
  2042 08:94E4: D4 05        	pei	<R1
  2043 08:94E6: 22 xx xx xx  	jsl	~~strcmp
  2044 08:94EA: AA           	tax
  2045 08:94EB: F0 03        	beq	L15
  2046 08:94ED: 82 13 01     	brl	L10005
  2047                        L15:
  2048                        	.line	133
  2049                        ;				if(driver->type != DRIVE
                    R_TYPE_UNIMPL)
  2050                        	.line	134
  2051                        ;				{
  2052 08:94F0: E2 20        	sep	#$20
  2053                        	longa	off
  2054 08:94F2: A0 40 00     	ldy	#$40
  2055 08:94F5: B7 41        	lda	[<L8+driver_1],Y
  2056 08:94F7: C9 FF        	cmp	#<$ff
  2057 08:94F9: C2 20        	rep	#$20
  2058                        	longa	on
  2059 08:94FB: D0 03        	bne	L16
  2060 08:94FD: 82 00 01     	brl	L10006
  2061                        L16:
  2062                        	.line	135
  2063                        ;					k_nodelist_addto
                    list(_k_dos_devicedrivers,driver->type,driver->name,driver);
  2064                        	.line	136
  2065 08:9500: D4 43        	pei	<L8+driver_1+2
  2066 08:9502: D4 41        	pei	<L8+driver_1
  2067 08:9504: D4 43        	pei	<L8+driver_1+2
  2068 08:9506: D4 41        	pei	<L8+driver_1
  2069 08:9508: A0 40 00     	ldy	#$40
  2070 08:950B: B7 41        	lda	[<L8+driver_1],Y
  2071 08:950D: 48           	pha
  2072 08:950E: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  2073 08:9511: 48           	pha
  2074 08:9512: AD xx xx     	lda	|~~_k_dos_devicedrivers
  2075 08:9515: 48           	pha
  2076 08:9516: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  2077                        ;					//k_debug_string
                    ("    Hardware Compatible: YES\r\n");
  Mon Aug  9 2021 16:52                                                Page 40


  2078                        ;					if(driver->f_dri
                    ver_load)
  2079                        	.line	138
  2080                        ;						((DEVICE
                    DRIVER_LOAD)driver->f_driver_load)();
  2081 08:951A: A0 51 00     	ldy	#$51
  2082 08:951D: B7 41        	lda	[<L8+driver_1],Y
  2083 08:951F: A0 53 00     	ldy	#$53
  2084 08:9522: 17 41        	ora	[<L8+driver_1],Y
  2085 08:9524: D0 03        	bne	L17
  2086 08:9526: 82 0F 00     	brl	L10007
  2087                        L17:
  2088                        	.line	139
  2089 08:9529: A0 53 00     	ldy	#$53
  2090 08:952C: B7 41        	lda	[<L8+driver_1],Y
  2091 08:952E: AA           	tax
  2092 08:952F: A0 51 00     	ldy	#$51
  2093 08:9532: B7 41        	lda	[<L8+driver_1],Y
  2094                        	xref	~~~lcal
  2095 08:9534: 22 xx xx xx  	jsl	~~~lcal
  2096                        ;
  2097                        ;					if(driver->f_dri
                    ver_irq!=NULL) // temp hook up the mouse
  2098                        L10007:
  2099                        	.line	141
  2100                        ;					{
  2101 08:9538: A0 49 00     	ldy	#$49
  2102 08:953B: B7 41        	lda	[<L8+driver_1],Y
  2103 08:953D: A0 4B 00     	ldy	#$4b
  2104 08:9540: 17 41        	ora	[<L8+driver_1],Y
  2105 08:9542: D0 03        	bne	L18
  2106 08:9544: 82 B6 00     	brl	L10008
  2107                        L18:
  2108                        	.line	142
  2109                        ;						//k_debu
                    g_string("    Hardware Compatible as IRQ\r\n");
  2110                        ;						if(IRQRE
                    G(driver->irq_ctl)!=0xFF)
  2111                        	.line	144
  2112                        ;						{
  2113 08:9547: A0 47 00     	ldy	#$47
  2114 08:954A: B7 41        	lda	[<L8+driver_1],Y
  2115 08:954C: EB           	xba
  2116 08:954D: 29 FF 00     	and	#$00ff
  2117 08:9550: 29 FF 00     	and	#<$ff
  2118 08:9553: 85 01        	sta	<R0
  2119 08:9555: A5 01        	lda	<R0
  2120 08:9557: C9 FF 00     	cmp	#<$ff
  2121 08:955A: D0 03        	bne	L19
  2122 08:955C: 82 9E 00     	brl	L10009
  2123                        L19:
  2124                        	.line	145
  2125                        ;							
                    k_lock_irq();
  2126                        	.line	146
  2127 08:955F: 22 xx xx xx  	jsl	~~k_lock_irq
  2128                        ;							
                    if(g_irq_handlers[IRQREG(driver->irq_ctl)][IRQNUM(driver->ir
  Mon Aug  9 2021 16:52                                                Page 41


                    q_ctl)].handlers[0]!=NULL)
  2129                        	.line	147
  2130                        ;							
                    {
  2131 08:9563: A0 47 00     	ldy	#$47
  2132 08:9566: B7 41        	lda	[<L8+driver_1],Y
  2133 08:9568: 29 FF 00     	and	#<$ff
  2134 08:956B: 85 05        	sta	<R1
  2135 08:956D: A5 05        	lda	<R1
  2136 08:956F: 0A           	asl	A
  2137 08:9570: 0A           	asl	A
  2138 08:9571: 0A           	asl	A
  2139 08:9572: 0A           	asl	A
  2140 08:9573: 85 01        	sta	<R0
  2141 08:9575: A0 47 00     	ldy	#$47
  2142 08:9578: B7 41        	lda	[<L8+driver_1],Y
  2143 08:957A: EB           	xba
  2144 08:957B: 29 FF 00     	and	#$00ff
  2145 08:957E: 29 FF 00     	and	#<$ff
  2146 08:9581: A2 07 00     	ldx	#<$7
  2147                        	xref	~~~asl
  2148 08:9584: 22 xx xx xx  	jsl	~~~asl
  2149 08:9588: 85 05        	sta	<R1
  2150 08:958A: 18           	clc
  2151 08:958B: A5 05        	lda	<R1
  2152 08:958D: 65 01        	adc	<R0
  2153 08:958F: 85 09        	sta	<R2
  2154 08:9591: 18           	clc
  2155 08:9592: A9 xx xx     	lda	#<~~g_irq_handlers
  2156 08:9595: 65 09        	adc	<R2
  2157 08:9597: 85 01        	sta	<R0
  2158 08:9599: B2 01        	lda	(<R0)
  2159 08:959B: A0 02 00     	ldy	#$2
  2160 08:959E: 11 01        	ora	(<R0),Y
  2161 08:95A0: D0 03        	bne	L20
  2162 08:95A2: 82 4A 00     	brl	L10010
  2163                        L20:
  2164                        	.line	148
  2165                        ;							
                    	g_irq_handlers[IRQREG(driver->irq_ctl)][IRQNUM(driver->i
                    rq_ctl)].handlers[0] = (DEVICEDRIVER_IRQ)driver->f_driver_ir
                    q;
  2166                        	.line	149
  2167 08:95A5: A0 47 00     	ldy	#$47
  2168 08:95A8: B7 41        	lda	[<L8+driver_1],Y
  2169 08:95AA: 29 FF 00     	and	#<$ff
  2170 08:95AD: 85 05        	sta	<R1
  2171 08:95AF: A5 05        	lda	<R1
  2172 08:95B1: 0A           	asl	A
  2173 08:95B2: 0A           	asl	A
  2174 08:95B3: 0A           	asl	A
  2175 08:95B4: 0A           	asl	A
  2176 08:95B5: 85 01        	sta	<R0
  2177 08:95B7: A0 47 00     	ldy	#$47
  2178 08:95BA: B7 41        	lda	[<L8+driver_1],Y
  2179 08:95BC: EB           	xba
  2180 08:95BD: 29 FF 00     	and	#$00ff
  2181 08:95C0: 29 FF 00     	and	#<$ff
  Mon Aug  9 2021 16:52                                                Page 42


  2182 08:95C3: A2 07 00     	ldx	#<$7
  2183                        	xref	~~~asl
  2184 08:95C6: 22 xx xx xx  	jsl	~~~asl
  2185 08:95CA: 85 05        	sta	<R1
  2186 08:95CC: 18           	clc
  2187 08:95CD: A5 05        	lda	<R1
  2188 08:95CF: 65 01        	adc	<R0
  2189 08:95D1: 85 09        	sta	<R2
  2190 08:95D3: 18           	clc
  2191 08:95D4: A9 xx xx     	lda	#<~~g_irq_handlers
  2192 08:95D7: 65 09        	adc	<R2
  2193 08:95D9: 85 01        	sta	<R0
  2194 08:95DB: A0 49 00     	ldy	#$49
  2195 08:95DE: B7 41        	lda	[<L8+driver_1],Y
  2196 08:95E0: 92 01        	sta	(<R0)
  2197 08:95E2: A0 4B 00     	ldy	#$4b
  2198 08:95E5: B7 41        	lda	[<L8+driver_1],Y
  2199 08:95E7: A0 02 00     	ldy	#$2
  2200 08:95EA: 91 01        	sta	(<R0),Y
  2201                        ;							
                    }
  2202                        	.line	150
  2203                        ;							
                    else
  2204 08:95EC: 82 0A 00     	brl	L10011
  2205                        L10010:
  2206                        ;							
                    {
  2207                        	.line	152
  2208                        ;							
                    	k_debug_string("    IRQ CONFLICT DETECTED\r\n");
  2209                        	.line	153
  2210 08:95EF: F4 xx xx     	pea	#^L1
  2211 08:95F2: F4 xx xx     	pea	#<L1
  2212 08:95F5: 22 xx xx xx  	jsl	~~k_debug_string
  2213                        ;							
                    }
  2214                        	.line	154
  2215                        L10011:
  2216                        ;							
                    k_unlock_irq();
  2217                        	.line	155
  2218 08:95F9: 22 xx xx xx  	jsl	~~k_unlock_irq
  2219                        ;						}
  2220                        	.line	156
  2221                        ;					}
  2222                        L10009:
  2223                        	.line	157
  2224                        ;				}
  2225                        L10008:
  2226                        	.line	158
  2227                        ;				else
  2228 08:95FD: 82 00 00     	brl	L10012
  2229                        L10006:
  2230                        ;				{
  2231                        	.line	160
  2232                        ;					//k_debug_string
                    ("    UNIMPLEMENTED\r\n");
  Mon Aug  9 2021 16:52                                                Page 43


  2233                        ;				}
  2234                        	.line	162
  2235                        L10012:
  2236                        ;			}
  2237                        	.line	163
  2238                        ;			else
  2239 08:9600: 82 00 00     	brl	L10013
  2240                        L10005:
  2241                        ;			{
  2242                        	.line	165
  2243                        ;				//k_debug_string("    Ha
                    rdware Compatible: NO\r\n");
  2244                        ;			}
  2245                        	.line	167
  2246                        L10013:
  2247                        ;
  2248                        ;			//k_debug_string("\r\n");
  2249                        ;		}
  2250                        	.line	170
  2251                        ;	}
  2252                        L10003:
  2253                        	.line	171
  2254                        ;	else
  2255 08:9603: 82 00 00     	brl	L10014
  2256                        L10002:
  2257                        ;	{
  2258                        	.line	173
  2259                        ;		//k_debug_pointer("k_dos_load_drivers::d
                    river not detected@",_k_get_driver_def);
  2260                        ;	}
  2261                        	.line	175
  2262                        L10014:
  2263                        ;
  2264                        ;	return _k_get_driver_def;
  2265                        	.line	177
  2266 08:9606: A6 47        	ldx	<L8+_k_get_driver_def_1+2
  2267 08:9608: A5 45        	lda	<L8+_k_get_driver_def_1
  2268                        L21:
  2269 08:960A: A8           	tay
  2270 08:960B: A5 4A        	lda	<L7+2
  2271 08:960D: 85 4E        	sta	<L7+2+4
  2272 08:960F: A5 49        	lda	<L7+1
  2273 08:9611: 85 4D        	sta	<L7+1+4
  2274 08:9613: 2B           	pld
  2275 08:9614: 3B           	tsc
  2276 08:9615: 18           	clc
  2277 08:9616: 69 4C 00     	adc	#L7+4
  2278 08:9619: 1B           	tcs
  2279 08:961A: 98           	tya
  2280 08:961B: 6B           	rtl
  2281                        ;}
  2282                        	.line	178
  2283                        	.endblock	178
  2284             00000048   L7	equ	72
  2285             0000000D   L8	equ	13
  2286 08:961C:              	ends
  2287                        	efunc
  2288                        	.endfunc	178,13,72
  Mon Aug  9 2021 16:52                                                Page 44


  2289                        	.line	178
  2290                        	data
  2291                        L1:
  2292 00:000C: 20 20 20 20  	db	$20,$20,$20,$20,$49,$52,$51,$20,$43,$4F,
                    $4E,$46,$4C,$49,$43
       00:0010: 49 52 51 20 
       00:0014: 43 4F 4E 46 
       00:0018: 4C 49 43 
  2293 00:001B: 54 20 44 45  	db	$54,$20,$44,$45,$54,$45,$43,$54,$45,$44,
                    $0D,$0A,$00
       00:001F: 54 45 43 54 
       00:0023: 45 44 0D 0A 
       00:0027: 00 
  2294 00:0028:              	ends
  2295                        ;
  2296                        ;LPCSTR k_dos_load_drivers(void)
  2297                        ;{
  2298                        	.line	180
  2299                        	.line	181
  2300                        	FXDOS
  2301                        	xdef	~~k_dos_load_drivers
  2302                        	func
  2303                        	.function	181
  2304                        ~~k_dos_load_drivers:
  2305                        	longa	on
  2306                        	longi	on
  2307 08:961C: 3B           	tsc
  2308 08:961D: 38           	sec
  2309 08:961E: E9 4C 00     	sbc	#L23
  2310 08:9621: 1B           	tcs
  2311 08:9622: 0B           	phd
  2312 08:9623: 5B           	tcd
  2313                        	.block	181
  2314                        ;	CHAR major[16];
  2315                        ;	CHAR minor[16];
  2316                        ;	CHAR k16buffer[16];
  2317                        ;
  2318                        ;	LPSTR log = NULL;
  2319                        ;
  2320                        ;	ULONG driver_idx = 0;
  2321                        ;	PFX_DEVICE_DRIVER driver = NULL;
  2322                        ;
  2323                        ;	GETDRIVERDEF _k_get_driver_def = NULL;
  2324                        ;
  2325                        ;	log = (LPSTR)k_mem_allocate_heap(4096);
  2326             00000000   major_1	set	0
  2327             00000010   minor_1	set	16
  2328             00000020   k16buffer_1	set	32
  2329             00000030   log_1	set	48
  2330             00000034   driver_idx_1	set	52
  2331             00000038   driver_1	set	56
  2332             0000003C   _k_get_driver_def_1	set	60
  2333                        	.sym	major,0,110,1,0,16
  2334                        	.sym	minor,16,110,1,0,16
  2335                        	.sym	k16buffer,32,110,1,0,16
  2336                        	.sym	log,48,142,1,32
  2337                        	.sym	driver_idx,52,18,1,32
  2338                        	.sym	driver,56,138,1,32,58
  Mon Aug  9 2021 16:52                                                Page 45


  2339                        	.sym	_k_get_driver_def,60,8842,1,32,58
  2340 08:9624: 64 3D        	stz	<L24+log_1
  2341 08:9626: 64 3F        	stz	<L24+log_1+2
  2342 08:9628: 64 41        	stz	<L24+driver_idx_1
  2343 08:962A: 64 43        	stz	<L24+driver_idx_1+2
  2344 08:962C: 64 45        	stz	<L24+driver_1
  2345 08:962E: 64 47        	stz	<L24+driver_1+2
  2346 08:9630: 64 49        	stz	<L24+_k_get_driver_def_1
  2347 08:9632: 64 4B        	stz	<L24+_k_get_driver_def_1+2
  2348                        	.line	193
  2349 08:9634: F4 00 00     	pea	#^$1000
  2350 08:9637: F4 00 10     	pea	#<$1000
  2351 08:963A: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2352 08:963E: 85 3D        	sta	<L24+log_1
  2353 08:9640: 86 3F        	stx	<L24+log_1+2
  2354                        ;	sectorBuffer = (LPSTR)k_mem_allocate_heap(512);
  2355                        	.line	194
  2356 08:9642: F4 00 00     	pea	#^$200
  2357 08:9645: F4 00 02     	pea	#<$200
  2358 08:9648: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2359 08:964C: 8D xx xx     	sta	|~~sectorBuffer
  2360 08:964F: 8E xx xx     	stx	|~~sectorBuffer+2
  2361                        ;
  2362                        ;	k_get_c256_major_version(major);
  2363                        	.line	196
  2364 08:9652: F4 00 00     	pea	#0
  2365 08:9655: 18           	clc
  2366 08:9656: 7B           	tdc
  2367 08:9657: 69 0D 00     	adc	#<L24+major_1
  2368 08:965A: 48           	pha
  2369 08:965B: 22 xx xx xx  	jsl	~~k_get_c256_major_version
  2370                        ;	k_get_c256_minor_version(minor);
  2371                        	.line	197
  2372 08:965F: F4 00 00     	pea	#0
  2373 08:9662: 18           	clc
  2374 08:9663: 7B           	tdc
  2375 08:9664: 69 1D 00     	adc	#<L24+minor_1
  2376 08:9667: 48           	pha
  2377 08:9668: 22 xx xx xx  	jsl	~~k_get_c256_minor_version
  2378                        ;
  2379                        ;	//k_debug_strings("System Major:",major);
  2380                        ;	//k_debug_strings("System Minor:",minor);
  2381                        ;
  2382                        ;
  2383                        ;	memset(g_irq_handlers,0,sizeof(g_irq_handlers[0]
                    [0]));
  2384                        	.line	203
  2385 08:966C: F4 10 00     	pea	#<$10
  2386 08:966F: F4 00 00     	pea	#<$0
  2387 08:9672: A9 xx xx     	lda	#<~~g_irq_handlers
  2388 08:9675: 85 01        	sta	<R0
  2389                        	xref	_BEG_DATA
  2390 08:9677: A9 xx xx     	lda	#_BEG_DATA>>16
  2391 08:967A: 85 03        	sta	<R0+2
  2392 08:967C: D4 03        	pei	<R0+2
  2393 08:967E: D4 01        	pei	<R0
  2394 08:9680: 22 xx xx xx  	jsl	~~memset
  2395                        ;
  Mon Aug  9 2021 16:52                                                Page 46


  2396                        ;	_k_dos_devicedrivers 	= k_nodelist_allocate_li
                    st("_k_dos_devicedrivers" ,NULL);
  2397                        	.line	205
  2398 08:9684: F4 00 00     	pea	#^$0
  2399 08:9687: F4 00 00     	pea	#<$0
  2400 08:968A: F4 xx xx     	pea	#^L22
  2401 08:968D: F4 xx xx     	pea	#<L22
  2402 08:9690: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  2403 08:9694: 8D xx xx     	sta	|~~_k_dos_devicedrivers
  2404 08:9697: 8E xx xx     	stx	|~~_k_dos_devicedrivers+2
  2405                        ;	_k_dos_deviceinstance   = k_nodelist_allocate_li
                    st("_k_dos_deviceinstance" ,NULL);
  2406                        	.line	206
  2407 08:969A: F4 00 00     	pea	#^$0
  2408 08:969D: F4 00 00     	pea	#<$0
  2409 08:96A0: F4 xx xx     	pea	#^L22+21
  2410 08:96A3: F4 xx xx     	pea	#<L22+21
  2411 08:96A6: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  2412 08:96AA: 8D xx xx     	sta	|~~_k_dos_deviceinstance
  2413 08:96AD: 8E xx xx     	stx	|~~_k_dos_deviceinstance+2
  2414                        ;
  2415                        ;	//k_debug_string("Scanning for Drivers...\r\n");
  2416                        ;
  2417                        ;	strcpy(log,"");
  2418                        	.line	210
  2419 08:96B0: F4 xx xx     	pea	#^L22+43
  2420 08:96B3: F4 xx xx     	pea	#<L22+43
  2421 08:96B6: D4 3F        	pei	<L24+log_1+2
  2422 08:96B8: D4 3D        	pei	<L24+log_1
  2423 08:96BA: 22 xx xx xx  	jsl	~~strcpy
  2424                        ;	strcat(log,"Scanning for Drivers...\r\n");
  2425                        	.line	211
  2426 08:96BE: F4 xx xx     	pea	#^L22+44
  2427 08:96C1: F4 xx xx     	pea	#<L22+44
  2428 08:96C4: D4 3F        	pei	<L24+log_1+2
  2429 08:96C6: D4 3D        	pei	<L24+log_1
  2430 08:96C8: 22 xx xx xx  	jsl	~~strcat
  2431                        ;	for(driver_idx = 0;driver_idx<25;driver_idx++)
  2432                        	.line	212
  2433 08:96CC: 64 41        	stz	<L24+driver_idx_1
  2434 08:96CE: 64 43        	stz	<L24+driver_idx_1+2
  2435                        L10017:
  2436                        ;	{
  2437                        	.line	213
  2438                        ;		_k_get_driver_def = ((GETDRIVERDEF)((LPV
                    OID)((ULONG)DRIVER_BASE + (driver_idx * (ULONG)DRIVER_SIZE))
                    ));
  2439                        	.line	214
  2440 08:96D0: F4 00 00     	pea	#^$5f0
  2441 08:96D3: F4 F0 05     	pea	#<$5f0
  2442 08:96D6: D4 43        	pei	<L24+driver_idx_1+2
  2443 08:96D8: D4 41        	pei	<L24+driver_idx_1
  2444                        	xref	~~~lmul
  2445 08:96DA: 22 xx xx xx  	jsl	~~~lmul
  2446 08:96DE: 85 01        	sta	<R0
  2447 08:96E0: 86 03        	stx	<R0+2
  2448 08:96E2: 18           	clc
  2449 08:96E3: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 47


  2450 08:96E6: 65 01        	adc	<R0
  2451 08:96E8: 85 05        	sta	<R1
  2452 08:96EA: A9 04 00     	lda	#$4
  2453 08:96ED: 65 03        	adc	<R0+2
  2454 08:96EF: 85 07        	sta	<R1+2
  2455 08:96F1: A5 05        	lda	<R1
  2456 08:96F3: 85 49        	sta	<L24+_k_get_driver_def_1
  2457 08:96F5: A5 07        	lda	<R1+2
  2458 08:96F7: 85 4B        	sta	<L24+_k_get_driver_def_1+2
  2459                        ;
  2460                        ;
  2461                        ;		//k_debug_integer("Scan slot:",(UINT)dri
                    ver_idx);
  2462                        ;		//k_debug_pointer("k_dos_load_drivers::s
                    canning @",_k_get_driver_def);
  2463                        ;		//k_debug_byte_array("k_dos_load_drivers
                    ::scan detected value:",((PBYTE)_k_get_driver_def),8);
  2464                        ;		//k_debug_long("k_dos_load_drivers::scan
                     detected long:",*((LONG*)_k_get_driver_def));
  2465                        ;		if(*((ULONG*)_k_get_driver_def) == 0x4E9
                    383B) // sig bytes of driver
  2466                        	.line	221
  2467                        ;		{
  2468 08:96F9: A7 49        	lda	[<L24+_k_get_driver_def_1]
  2469 08:96FB: C9 3B 38     	cmp	#<$4e9383b
  2470 08:96FE: D0 08        	bne	L26
  2471 08:9700: A0 02 00     	ldy	#$2
  2472 08:9703: B7 49        	lda	[<L24+_k_get_driver_def_1],Y
  2473 08:9705: C9 E9 04     	cmp	#^$4e9383b
  2474                        L26:
  2475 08:9708: F0 03        	beq	L27
  2476 08:970A: 82 89 03     	brl	L10018
  2477                        L27:
  2478                        	.line	222
  2479                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver located@",_k_get_driver_def);
  2480                        ;			//k_debug_string("Driver Detecte
                    d:\r\n");
  2481                        ;			strcat(log,"Driver Detected ");
  2482                        	.line	225
  2483 08:970D: F4 xx xx     	pea	#^L22+70
  2484 08:9710: F4 xx xx     	pea	#<L22+70
  2485 08:9713: D4 3F        	pei	<L24+log_1+2
  2486 08:9715: D4 3D        	pei	<L24+log_1
  2487 08:9717: 22 xx xx xx  	jsl	~~strcat
  2488                        ;			strcat(log," @0x");
  2489                        	.line	226
  2490 08:971B: F4 xx xx     	pea	#^L22+87
  2491 08:971E: F4 xx xx     	pea	#<L22+87
  2492 08:9721: D4 3F        	pei	<L24+log_1+2
  2493 08:9723: D4 3D        	pei	<L24+log_1
  2494 08:9725: 22 xx xx xx  	jsl	~~strcat
  2495                        ;
  2496                        ;			strcat(log,k_bytetohex(H24BYTE(_
                    k_get_driver_def),k16buffer));
  2497                        	.line	228
  2498 08:9729: F4 00 00     	pea	#0
  2499 08:972C: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 48


  2500 08:972D: 7B           	tdc
  2501 08:972E: 69 2D 00     	adc	#<L24+k16buffer_1
  2502 08:9731: 48           	pha
  2503 08:9732: D4 4B        	pei	<L24+_k_get_driver_def_1+2
  2504 08:9734: D4 49        	pei	<L24+_k_get_driver_def_1
  2505 08:9736: A9 10 00     	lda	#$10
  2506                        	xref	~~~llsr
  2507 08:9739: 22 xx xx xx  	jsl	~~~llsr
  2508 08:973D: 85 01        	sta	<R0
  2509 08:973F: 86 03        	stx	<R0+2
  2510 08:9741: A5 01        	lda	<R0
  2511 08:9743: 29 FF 00     	and	#<$ff
  2512 08:9746: 85 05        	sta	<R1
  2513 08:9748: 64 07        	stz	<R1+2
  2514 08:974A: D4 05        	pei	<R1
  2515 08:974C: 22 xx xx xx  	jsl	~~k_bytetohex
  2516 08:9750: 85 01        	sta	<R0
  2517 08:9752: 86 03        	stx	<R0+2
  2518 08:9754: DA           	phx
  2519 08:9755: 48           	pha
  2520 08:9756: D4 3F        	pei	<L24+log_1+2
  2521 08:9758: D4 3D        	pei	<L24+log_1
  2522 08:975A: 22 xx xx xx  	jsl	~~strcat
  2523                        ;			strcat(log,k_bytetohex(M24BYTE(_
                    k_get_driver_def),k16buffer));
  2524                        	.line	229
  2525 08:975E: F4 00 00     	pea	#0
  2526 08:9761: 18           	clc
  2527 08:9762: 7B           	tdc
  2528 08:9763: 69 2D 00     	adc	#<L24+k16buffer_1
  2529 08:9766: 48           	pha
  2530 08:9767: D4 4B        	pei	<L24+_k_get_driver_def_1+2
  2531 08:9769: D4 49        	pei	<L24+_k_get_driver_def_1
  2532 08:976B: A9 08 00     	lda	#$8
  2533                        	xref	~~~llsr
  2534 08:976E: 22 xx xx xx  	jsl	~~~llsr
  2535 08:9772: 85 01        	sta	<R0
  2536 08:9774: 86 03        	stx	<R0+2
  2537 08:9776: A5 01        	lda	<R0
  2538 08:9778: 29 FF 00     	and	#<$ff
  2539 08:977B: 85 05        	sta	<R1
  2540 08:977D: 64 07        	stz	<R1+2
  2541 08:977F: D4 05        	pei	<R1
  2542 08:9781: 22 xx xx xx  	jsl	~~k_bytetohex
  2543 08:9785: 85 01        	sta	<R0
  2544 08:9787: 86 03        	stx	<R0+2
  2545 08:9789: DA           	phx
  2546 08:978A: 48           	pha
  2547 08:978B: D4 3F        	pei	<L24+log_1+2
  2548 08:978D: D4 3D        	pei	<L24+log_1
  2549 08:978F: 22 xx xx xx  	jsl	~~strcat
  2550                        ;			strcat(log,k_bytetohex(L24BYTE(_
                    k_get_driver_def),k16buffer));
  2551                        	.line	230
  2552 08:9793: F4 00 00     	pea	#0
  2553 08:9796: 18           	clc
  2554 08:9797: 7B           	tdc
  2555 08:9798: 69 2D 00     	adc	#<L24+k16buffer_1
  Mon Aug  9 2021 16:52                                                Page 49


  2556 08:979B: 48           	pha
  2557 08:979C: D4 49        	pei	<L24+_k_get_driver_def_1
  2558 08:979E: 22 xx xx xx  	jsl	~~k_bytetohex
  2559 08:97A2: 85 01        	sta	<R0
  2560 08:97A4: 86 03        	stx	<R0+2
  2561 08:97A6: DA           	phx
  2562 08:97A7: 48           	pha
  2563 08:97A8: D4 3F        	pei	<L24+log_1+2
  2564 08:97AA: D4 3D        	pei	<L24+log_1
  2565 08:97AC: 22 xx xx xx  	jsl	~~strcat
  2566                        ;			strcat(log,":\r\n");
  2567                        	.line	231
  2568 08:97B0: F4 xx xx     	pea	#^L22+92
  2569 08:97B3: F4 xx xx     	pea	#<L22+92
  2570 08:97B6: D4 3F        	pei	<L24+log_1+2
  2571 08:97B8: D4 3D        	pei	<L24+log_1
  2572 08:97BA: 22 xx xx xx  	jsl	~~strcat
  2573                        ;
  2574                        ;			driver = _k_get_driver_def(major
                    ,minor);
  2575                        	.line	233
  2576 08:97BE: F4 00 00     	pea	#0
  2577 08:97C1: 18           	clc
  2578 08:97C2: 7B           	tdc
  2579 08:97C3: 69 1D 00     	adc	#<L24+minor_1
  2580 08:97C6: 48           	pha
  2581 08:97C7: F4 00 00     	pea	#0
  2582 08:97CA: 18           	clc
  2583 08:97CB: 7B           	tdc
  2584 08:97CC: 69 0D 00     	adc	#<L24+major_1
  2585 08:97CF: 48           	pha
  2586 08:97D0: A6 4B        	ldx	<L24+_k_get_driver_def_1+2
  2587 08:97D2: A5 49        	lda	<L24+_k_get_driver_def_1
  2588                        	xref	~~~lcal
  2589 08:97D4: 22 xx xx xx  	jsl	~~~lcal
  2590 08:97D8: 85 45        	sta	<L24+driver_1
  2591 08:97DA: 86 47        	stx	<L24+driver_1+2
  2592                        ;			if(driver)
  2593                        	.line	234
  2594                        ;			{
  2595 08:97DC: A5 45        	lda	<L24+driver_1
  2596 08:97DE: 05 47        	ora	<L24+driver_1+2
  2597 08:97E0: D0 03        	bne	L28
  2598 08:97E2: 82 AE 02     	brl	L10019
  2599                        L28:
  2600                        	.line	235
  2601                        ;				/*
  2602                        ;				strcat(log,"Driver PRE "
                    );
  2603                        ;							
                    strcat(log," @0x");
  2604                        ;				strcat(log,k_bytetohex(H
                    24BYTE(driver),k16buffer));
  2605                        ;				strcat(log,k_bytetohex(M
                    24BYTE(driver),k16buffer));
  2606                        ;				strcat(log,k_bytetohex(L
                    24BYTE(driver),k16buffer));
  2607                        ;				strcat(log,":\r\n");
  Mon Aug  9 2021 16:52                                                Page 50


  2608                        ;				*/
  2609                        ;
  2610                        ;
  2611                        ;				if( ((ULONG)driver) < 0x
                    010000L ) // handle short addressing for linear segment driv
                    er
  2612                        	.line	246
  2613                        ;					driver = (PFX_DE
                    VICE_DRIVER)(((ULONG)driver) + (((ULONG)_k_get_driver_def) &
                     0xFF0000L));
  2614 08:97E5: A5 45        	lda	<L24+driver_1
  2615 08:97E7: C9 00 00     	cmp	#<$10000
  2616 08:97EA: A5 47        	lda	<L24+driver_1+2
  2617 08:97EC: E9 01 00     	sbc	#^$10000
  2618 08:97EF: 90 03        	bcc	L29
  2619 08:97F1: 82 1E 00     	brl	L10020
  2620                        L29:
  2621                        	.line	247
  2622 08:97F4: 64 01        	stz	<R0
  2623 08:97F6: A5 4B        	lda	<L24+_k_get_driver_def_1+2
  2624 08:97F8: 29 FF 00     	and	#^$ff0000
  2625 08:97FB: 85 03        	sta	<R0+2
  2626 08:97FD: 18           	clc
  2627 08:97FE: A5 45        	lda	<L24+driver_1
  2628 08:9800: 65 01        	adc	<R0
  2629 08:9802: 85 05        	sta	<R1
  2630 08:9804: A5 47        	lda	<L24+driver_1+2
  2631 08:9806: 65 03        	adc	<R0+2
  2632 08:9808: 85 07        	sta	<R1+2
  2633 08:980A: A5 05        	lda	<R1
  2634 08:980C: 85 45        	sta	<L24+driver_1
  2635 08:980E: A5 07        	lda	<R1+2
  2636 08:9810: 85 47        	sta	<L24+driver_1+2
  2637                        ;
  2638                        ;
  2639                        ;				strcat(log,"Driver Defin
                    ition ");
  2640                        L10020:
  2641                        	.line	250
  2642 08:9812: F4 xx xx     	pea	#^L22+96
  2643 08:9815: F4 xx xx     	pea	#<L22+96
  2644 08:9818: D4 3F        	pei	<L24+log_1+2
  2645 08:981A: D4 3D        	pei	<L24+log_1
  2646 08:981C: 22 xx xx xx  	jsl	~~strcat
  2647                        ;							
                    strcat(log," @0x");
  2648                        	.line	251
  2649 08:9820: F4 xx xx     	pea	#^L22+115
  2650 08:9823: F4 xx xx     	pea	#<L22+115
  2651 08:9826: D4 3F        	pei	<L24+log_1+2
  2652 08:9828: D4 3D        	pei	<L24+log_1
  2653 08:982A: 22 xx xx xx  	jsl	~~strcat
  2654                        ;				strcat(log,k_bytetohex(H
                    24BYTE(driver),k16buffer));
  2655                        	.line	252
  2656 08:982E: F4 00 00     	pea	#0
  2657 08:9831: 18           	clc
  2658 08:9832: 7B           	tdc
  Mon Aug  9 2021 16:52                                                Page 51


  2659 08:9833: 69 2D 00     	adc	#<L24+k16buffer_1
  2660 08:9836: 48           	pha
  2661 08:9837: D4 47        	pei	<L24+driver_1+2
  2662 08:9839: D4 45        	pei	<L24+driver_1
  2663 08:983B: A9 10 00     	lda	#$10
  2664                        	xref	~~~llsr
  2665 08:983E: 22 xx xx xx  	jsl	~~~llsr
  2666 08:9842: 85 01        	sta	<R0
  2667 08:9844: 86 03        	stx	<R0+2
  2668 08:9846: A5 01        	lda	<R0
  2669 08:9848: 29 FF 00     	and	#<$ff
  2670 08:984B: 85 05        	sta	<R1
  2671 08:984D: 64 07        	stz	<R1+2
  2672 08:984F: D4 05        	pei	<R1
  2673 08:9851: 22 xx xx xx  	jsl	~~k_bytetohex
  2674 08:9855: 85 01        	sta	<R0
  2675 08:9857: 86 03        	stx	<R0+2
  2676 08:9859: DA           	phx
  2677 08:985A: 48           	pha
  2678 08:985B: D4 3F        	pei	<L24+log_1+2
  2679 08:985D: D4 3D        	pei	<L24+log_1
  2680 08:985F: 22 xx xx xx  	jsl	~~strcat
  2681                        ;				strcat(log,k_bytetohex(M
                    24BYTE(driver),k16buffer));
  2682                        	.line	253
  2683 08:9863: F4 00 00     	pea	#0
  2684 08:9866: 18           	clc
  2685 08:9867: 7B           	tdc
  2686 08:9868: 69 2D 00     	adc	#<L24+k16buffer_1
  2687 08:986B: 48           	pha
  2688 08:986C: D4 47        	pei	<L24+driver_1+2
  2689 08:986E: D4 45        	pei	<L24+driver_1
  2690 08:9870: A9 08 00     	lda	#$8
  2691                        	xref	~~~llsr
  2692 08:9873: 22 xx xx xx  	jsl	~~~llsr
  2693 08:9877: 85 01        	sta	<R0
  2694 08:9879: 86 03        	stx	<R0+2
  2695 08:987B: A5 01        	lda	<R0
  2696 08:987D: 29 FF 00     	and	#<$ff
  2697 08:9880: 85 05        	sta	<R1
  2698 08:9882: 64 07        	stz	<R1+2
  2699 08:9884: D4 05        	pei	<R1
  2700 08:9886: 22 xx xx xx  	jsl	~~k_bytetohex
  2701 08:988A: 85 01        	sta	<R0
  2702 08:988C: 86 03        	stx	<R0+2
  2703 08:988E: DA           	phx
  2704 08:988F: 48           	pha
  2705 08:9890: D4 3F        	pei	<L24+log_1+2
  2706 08:9892: D4 3D        	pei	<L24+log_1
  2707 08:9894: 22 xx xx xx  	jsl	~~strcat
  2708                        ;				strcat(log,k_bytetohex(L
                    24BYTE(driver),k16buffer));
  2709                        	.line	254
  2710 08:9898: F4 00 00     	pea	#0
  2711 08:989B: 18           	clc
  2712 08:989C: 7B           	tdc
  2713 08:989D: 69 2D 00     	adc	#<L24+k16buffer_1
  2714 08:98A0: 48           	pha
  Mon Aug  9 2021 16:52                                                Page 52


  2715 08:98A1: D4 45        	pei	<L24+driver_1
  2716 08:98A3: 22 xx xx xx  	jsl	~~k_bytetohex
  2717 08:98A7: 85 01        	sta	<R0
  2718 08:98A9: 86 03        	stx	<R0+2
  2719 08:98AB: DA           	phx
  2720 08:98AC: 48           	pha
  2721 08:98AD: D4 3F        	pei	<L24+log_1+2
  2722 08:98AF: D4 3D        	pei	<L24+log_1
  2723 08:98B1: 22 xx xx xx  	jsl	~~strcat
  2724                        ;				strcat(log,":\r\n");
  2725                        	.line	255
  2726 08:98B5: F4 xx xx     	pea	#^L22+120
  2727 08:98B8: F4 xx xx     	pea	#<L22+120
  2728 08:98BB: D4 3F        	pei	<L24+log_1+2
  2729 08:98BD: D4 3D        	pei	<L24+log_1
  2730 08:98BF: 22 xx xx xx  	jsl	~~strcat
  2731                        ;
  2732                        ;
  2733                        ;				strcat(log,"  Name:");
  2734                        	.line	258
  2735 08:98C3: F4 xx xx     	pea	#^L22+124
  2736 08:98C6: F4 xx xx     	pea	#<L22+124
  2737 08:98C9: D4 3F        	pei	<L24+log_1+2
  2738 08:98CB: D4 3D        	pei	<L24+log_1
  2739 08:98CD: 22 xx xx xx  	jsl	~~strcat
  2740                        ;				strcat(log,driver->name)
                    ;
  2741                        	.line	259
  2742 08:98D1: D4 47        	pei	<L24+driver_1+2
  2743 08:98D3: D4 45        	pei	<L24+driver_1
  2744 08:98D5: D4 3F        	pei	<L24+log_1+2
  2745 08:98D7: D4 3D        	pei	<L24+log_1
  2746 08:98D9: 22 xx xx xx  	jsl	~~strcat
  2747                        ;				strcat(log," : ");
  2748                        	.line	260
  2749 08:98DD: F4 xx xx     	pea	#^L22+132
  2750 08:98E0: F4 xx xx     	pea	#<L22+132
  2751 08:98E3: D4 3F        	pei	<L24+log_1+2
  2752 08:98E5: D4 3D        	pei	<L24+log_1
  2753 08:98E7: 22 xx xx xx  	jsl	~~strcat
  2754                        ;
  2755                        ;				//k_debug_strings("  Nam
                    e:",driver->name);
  2756                        ;				//k_debug_strings("    M
                    ajor:",driver->hmajor);
  2757                        ;				//k_debug_strings("    M
                    inor:",driver->hminor);
  2758                        ;
  2759                        ;				if((strcmp(driver->hmajo
                    r,major) == 0) && (strcmp(driver->hminor,minor) == 0))
  2760                        	.line	266
  2761                        ;				{
  2762 08:98EB: F4 00 00     	pea	#0
  2763 08:98EE: 18           	clc
  2764 08:98EF: 7B           	tdc
  2765 08:98F0: 69 0D 00     	adc	#<L24+major_1
  2766 08:98F3: 48           	pha
  2767 08:98F4: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 53


  2768 08:98F5: A9 30 00     	lda	#$30
  2769 08:98F8: 65 45        	adc	<L24+driver_1
  2770 08:98FA: 85 01        	sta	<R0
  2771 08:98FC: A9 00 00     	lda	#$0
  2772 08:98FF: 65 47        	adc	<L24+driver_1+2
  2773 08:9901: 85 03        	sta	<R0+2
  2774 08:9903: D4 03        	pei	<R0+2
  2775 08:9905: D4 01        	pei	<R0
  2776 08:9907: 22 xx xx xx  	jsl	~~strcmp
  2777 08:990B: AA           	tax
  2778 08:990C: F0 03        	beq	L30
  2779 08:990E: 82 66 01     	brl	L10021
  2780                        L30:
  2781 08:9911: F4 00 00     	pea	#0
  2782 08:9914: 18           	clc
  2783 08:9915: 7B           	tdc
  2784 08:9916: 69 1D 00     	adc	#<L24+minor_1
  2785 08:9919: 48           	pha
  2786 08:991A: 18           	clc
  2787 08:991B: A9 38 00     	lda	#$38
  2788 08:991E: 65 45        	adc	<L24+driver_1
  2789 08:9920: 85 05        	sta	<R1
  2790 08:9922: A9 00 00     	lda	#$0
  2791 08:9925: 65 47        	adc	<L24+driver_1+2
  2792 08:9927: 85 07        	sta	<R1+2
  2793 08:9929: D4 07        	pei	<R1+2
  2794 08:992B: D4 05        	pei	<R1
  2795 08:992D: 22 xx xx xx  	jsl	~~strcmp
  2796 08:9931: AA           	tax
  2797 08:9932: F0 03        	beq	L31
  2798 08:9934: 82 40 01     	brl	L10021
  2799                        L31:
  2800                        	.line	267
  2801                        ;					if(driver->type 
                    != DRIVER_TYPE_UNIMPL)
  2802                        	.line	268
  2803                        ;					{
  2804 08:9937: E2 20        	sep	#$20
  2805                        	longa	off
  2806 08:9939: A0 40 00     	ldy	#$40
  2807 08:993C: B7 45        	lda	[<L24+driver_1],Y
  2808 08:993E: C9 FF        	cmp	#<$ff
  2809 08:9940: C2 20        	rep	#$20
  2810                        	longa	on
  2811 08:9942: D0 03        	bne	L32
  2812 08:9944: 82 1F 01     	brl	L10022
  2813                        L32:
  2814                        	.line	269
  2815                        ;						k_nodeli
                    st_addtolist(_k_dos_devicedrivers,driver->type,driver->name,
                    driver);
  2816                        	.line	270
  2817 08:9947: D4 47        	pei	<L24+driver_1+2
  2818 08:9949: D4 45        	pei	<L24+driver_1
  2819 08:994B: D4 47        	pei	<L24+driver_1+2
  2820 08:994D: D4 45        	pei	<L24+driver_1
  2821 08:994F: A0 40 00     	ldy	#$40
  2822 08:9952: B7 45        	lda	[<L24+driver_1],Y
  Mon Aug  9 2021 16:52                                                Page 54


  2823 08:9954: 48           	pha
  2824 08:9955: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  2825 08:9958: 48           	pha
  2826 08:9959: AD xx xx     	lda	|~~_k_dos_devicedrivers
  2827 08:995C: 48           	pha
  2828 08:995D: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  2829                        ;						//k_debu
                    g_string("    Hardware Compatible: YES\r\n");
  2830                        ;						if(drive
                    r->f_driver_load)
  2831                        	.line	272
  2832                        ;							
                    ((DEVICEDRIVER_LOAD)driver->f_driver_load)();
  2833 08:9961: A0 51 00     	ldy	#$51
  2834 08:9964: B7 45        	lda	[<L24+driver_1],Y
  2835 08:9966: A0 53 00     	ldy	#$53
  2836 08:9969: 17 45        	ora	[<L24+driver_1],Y
  2837 08:996B: D0 03        	bne	L33
  2838 08:996D: 82 0F 00     	brl	L10023
  2839                        L33:
  2840                        	.line	273
  2841 08:9970: A0 53 00     	ldy	#$53
  2842 08:9973: B7 45        	lda	[<L24+driver_1],Y
  2843 08:9975: AA           	tax
  2844 08:9976: A0 51 00     	ldy	#$51
  2845 08:9979: B7 45        	lda	[<L24+driver_1],Y
  2846                        	xref	~~~lcal
  2847 08:997B: 22 xx xx xx  	jsl	~~~lcal
  2848                        ;
  2849                        ;
  2850                        ;						strcat(l
                    og,"LOADED");
  2851                        L10023:
  2852                        	.line	276
  2853 08:997F: F4 xx xx     	pea	#^L22+136
  2854 08:9982: F4 xx xx     	pea	#<L22+136
  2855 08:9985: D4 3F        	pei	<L24+log_1+2
  2856 08:9987: D4 3D        	pei	<L24+log_1
  2857 08:9989: 22 xx xx xx  	jsl	~~strcat
  2858                        ;
  2859                        ;						if(drive
                    r->f_driver_irq!=NULL) // temp hook up the mouse
  2860                        	.line	278
  2861                        ;						{
  2862 08:998D: A0 49 00     	ldy	#$49
  2863 08:9990: B7 45        	lda	[<L24+driver_1],Y
  2864 08:9992: A0 4B 00     	ldy	#$4b
  2865 08:9995: 17 45        	ora	[<L24+driver_1],Y
  2866 08:9997: D0 03        	bne	L34
  2867 08:9999: 82 C7 00     	brl	L10024
  2868                        L34:
  2869                        	.line	279
  2870                        ;							
                    strcat(log,"\r\n USING IRQ: ");
  2871                        	.line	280
  2872 08:999C: F4 xx xx     	pea	#^L22+143
  2873 08:999F: F4 xx xx     	pea	#<L22+143
  2874 08:99A2: D4 3F        	pei	<L24+log_1+2
  Mon Aug  9 2021 16:52                                                Page 55


  2875 08:99A4: D4 3D        	pei	<L24+log_1
  2876 08:99A6: 22 xx xx xx  	jsl	~~strcat
  2877                        ;							
                    strcat(log,k_bytetohex(IRQREG(driver->irq_ctl),k16buffer));
  2878                        	.line	281
  2879 08:99AA: F4 00 00     	pea	#0
  2880 08:99AD: 18           	clc
  2881 08:99AE: 7B           	tdc
  2882 08:99AF: 69 2D 00     	adc	#<L24+k16buffer_1
  2883 08:99B2: 48           	pha
  2884 08:99B3: A0 47 00     	ldy	#$47
  2885 08:99B6: B7 45        	lda	[<L24+driver_1],Y
  2886 08:99B8: EB           	xba
  2887 08:99B9: 29 FF 00     	and	#$00ff
  2888 08:99BC: 29 FF 00     	and	#<$ff
  2889 08:99BF: 48           	pha
  2890 08:99C0: 22 xx xx xx  	jsl	~~k_bytetohex
  2891 08:99C4: 85 01        	sta	<R0
  2892 08:99C6: 86 03        	stx	<R0+2
  2893 08:99C8: DA           	phx
  2894 08:99C9: 48           	pha
  2895 08:99CA: D4 3F        	pei	<L24+log_1+2
  2896 08:99CC: D4 3D        	pei	<L24+log_1
  2897 08:99CE: 22 xx xx xx  	jsl	~~strcat
  2898                        ;							
                    strcat(log,",");
  2899                        	.line	282
  2900 08:99D2: F4 xx xx     	pea	#^L22+158
  2901 08:99D5: F4 xx xx     	pea	#<L22+158
  2902 08:99D8: D4 3F        	pei	<L24+log_1+2
  2903 08:99DA: D4 3D        	pei	<L24+log_1
  2904 08:99DC: 22 xx xx xx  	jsl	~~strcat
  2905                        ;							
                    strcat(log,k_bytetohex(IRQNUM(driver->irq_ctl),k16buffer));
  2906                        	.line	283
  2907 08:99E0: F4 00 00     	pea	#0
  2908 08:99E3: 18           	clc
  2909 08:99E4: 7B           	tdc
  2910 08:99E5: 69 2D 00     	adc	#<L24+k16buffer_1
  2911 08:99E8: 48           	pha
  2912 08:99E9: A0 47 00     	ldy	#$47
  2913 08:99EC: B7 45        	lda	[<L24+driver_1],Y
  2914 08:99EE: 29 FF 00     	and	#<$ff
  2915 08:99F1: 48           	pha
  2916 08:99F2: 22 xx xx xx  	jsl	~~k_bytetohex
  2917 08:99F6: 85 01        	sta	<R0
  2918 08:99F8: 86 03        	stx	<R0+2
  2919 08:99FA: DA           	phx
  2920 08:99FB: 48           	pha
  2921 08:99FC: D4 3F        	pei	<L24+log_1+2
  2922 08:99FE: D4 3D        	pei	<L24+log_1
  2923 08:9A00: 22 xx xx xx  	jsl	~~strcat
  2924                        ;							
                    if(IRQREG(driver->irq_ctl)!=0xFF)
  2925                        	.line	284
  2926                        ;							
                    {
  2927 08:9A04: A0 47 00     	ldy	#$47
  Mon Aug  9 2021 16:52                                                Page 56


  2928 08:9A07: B7 45        	lda	[<L24+driver_1],Y
  2929 08:9A09: EB           	xba
  2930 08:9A0A: 29 FF 00     	and	#$00ff
  2931 08:9A0D: 29 FF 00     	and	#<$ff
  2932 08:9A10: 85 01        	sta	<R0
  2933 08:9A12: A5 01        	lda	<R0
  2934 08:9A14: C9 FF 00     	cmp	#<$ff
  2935 08:9A17: D0 03        	bne	L35
  2936 08:9A19: 82 47 00     	brl	L10025
  2937                        L35:
  2938                        	.line	285
  2939                        ;							
                    	//g_irq_handlers[IRQREG(driver->irq_ctl)][IRQNUM(driver-
                    >irq_ctl)] = (DEVICEDRIVER_IRQ)driver->f_driver_irq;
  2940                        ;
  2941                        ;							
                    	g_irq_handlers[IRQREG(driver->irq_ctl)][IRQNUM(driver->i
                    rq_ctl)].handlers[0] = (DEVICEDRIVER_IRQ)driver->f_driver_ir
                    q;
  2942                        	.line	288
  2943 08:9A1C: A0 47 00     	ldy	#$47
  2944 08:9A1F: B7 45        	lda	[<L24+driver_1],Y
  2945 08:9A21: 29 FF 00     	and	#<$ff
  2946 08:9A24: 85 05        	sta	<R1
  2947 08:9A26: A5 05        	lda	<R1
  2948 08:9A28: 0A           	asl	A
  2949 08:9A29: 0A           	asl	A
  2950 08:9A2A: 0A           	asl	A
  2951 08:9A2B: 0A           	asl	A
  2952 08:9A2C: 85 01        	sta	<R0
  2953 08:9A2E: A0 47 00     	ldy	#$47
  2954 08:9A31: B7 45        	lda	[<L24+driver_1],Y
  2955 08:9A33: EB           	xba
  2956 08:9A34: 29 FF 00     	and	#$00ff
  2957 08:9A37: 29 FF 00     	and	#<$ff
  2958 08:9A3A: A2 07 00     	ldx	#<$7
  2959                        	xref	~~~asl
  2960 08:9A3D: 22 xx xx xx  	jsl	~~~asl
  2961 08:9A41: 85 05        	sta	<R1
  2962 08:9A43: 18           	clc
  2963 08:9A44: A5 05        	lda	<R1
  2964 08:9A46: 65 01        	adc	<R0
  2965 08:9A48: 85 09        	sta	<R2
  2966 08:9A4A: 18           	clc
  2967 08:9A4B: A9 xx xx     	lda	#<~~g_irq_handlers
  2968 08:9A4E: 65 09        	adc	<R2
  2969 08:9A50: 85 01        	sta	<R0
  2970 08:9A52: A0 49 00     	ldy	#$49
  2971 08:9A55: B7 45        	lda	[<L24+driver_1],Y
  2972 08:9A57: 92 01        	sta	(<R0)
  2973 08:9A59: A0 4B 00     	ldy	#$4b
  2974 08:9A5C: B7 45        	lda	[<L24+driver_1],Y
  2975 08:9A5E: A0 02 00     	ldy	#$2
  2976 08:9A61: 91 01        	sta	(<R0),Y
  2977                        ;							
                    }
  2978                        	.line	289
  2979                        ;						}
  Mon Aug  9 2021 16:52                                                Page 57


  2980                        L10025:
  2981                        	.line	290
  2982                        ;
  2983                        ;
  2984                        ;					}
  2985                        L10024:
  2986                        	.line	293
  2987                        ;					else
  2988 08:9A63: 82 0E 00     	brl	L10026
  2989                        L10022:
  2990                        ;					{
  2991                        	.line	295
  2992                        ;						strcat(l
                    og,"UNIMPLEMENTED");
  2993                        	.line	296
  2994 08:9A66: F4 xx xx     	pea	#^L22+160
  2995 08:9A69: F4 xx xx     	pea	#<L22+160
  2996 08:9A6C: D4 3F        	pei	<L24+log_1+2
  2997 08:9A6E: D4 3D        	pei	<L24+log_1
  2998 08:9A70: 22 xx xx xx  	jsl	~~strcat
  2999                        ;					}
  3000                        	.line	297
  3001                        L10026:
  3002                        ;				}
  3003                        	.line	298
  3004                        ;				else
  3005 08:9A74: 82 0E 00     	brl	L10027
  3006                        L10021:
  3007                        ;				{
  3008                        	.line	300
  3009                        ;					//k_debug_string
                    ("    Hardware Compatible: NO\r\n");
  3010                        ;					strcat(log,"INCO
                    MPATIBLE");
  3011                        	.line	302
  3012 08:9A77: F4 xx xx     	pea	#^L22+174
  3013 08:9A7A: F4 xx xx     	pea	#<L22+174
  3014 08:9A7D: D4 3F        	pei	<L24+log_1+2
  3015 08:9A7F: D4 3D        	pei	<L24+log_1
  3016 08:9A81: 22 xx xx xx  	jsl	~~strcat
  3017                        ;				}
  3018                        	.line	303
  3019                        L10027:
  3020                        ;
  3021                        ;				strcat(log,"\r\n");
  3022                        	.line	305
  3023 08:9A85: F4 xx xx     	pea	#^L22+187
  3024 08:9A88: F4 xx xx     	pea	#<L22+187
  3025 08:9A8B: D4 3F        	pei	<L24+log_1+2
  3026 08:9A8D: D4 3D        	pei	<L24+log_1
  3027 08:9A8F: 22 xx xx xx  	jsl	~~strcat
  3028                        ;			}
  3029                        	.line	306
  3030                        ;		}
  3031                        L10019:
  3032                        	.line	307
  3033                        ;		else
  3034 08:9A93: 82 00 00     	brl	L10028
  Mon Aug  9 2021 16:52                                                Page 58


  3035                        L10018:
  3036                        ;		{
  3037                        	.line	309
  3038                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver not detected@",_k_get_driver_def);
  3039                        ;		}
  3040                        	.line	311
  3041                        L10028:
  3042                        ;	}
  3043                        	.line	312
  3044                        L10015:
  3045 08:9A96: E6 41        	inc	<L24+driver_idx_1
  3046 08:9A98: D0 02        	bne	L36
  3047 08:9A9A: E6 43        	inc	<L24+driver_idx_1+2
  3048                        L36:
  3049 08:9A9C: A5 41        	lda	<L24+driver_idx_1
  3050 08:9A9E: C9 19 00     	cmp	#<$19
  3051 08:9AA1: A5 43        	lda	<L24+driver_idx_1+2
  3052 08:9AA3: E9 00 00     	sbc	#^$19
  3053 08:9AA6: B0 03        	bcs	L37
  3054 08:9AA8: 82 25 FC     	brl	L10017
  3055                        L37:
  3056                        L10016:
  3057                        ;
  3058                        ;
  3059                        ;	return (LPCSTR)log;
  3060                        	.line	315
  3061 08:9AAB: A6 3F        	ldx	<L24+log_1+2
  3062 08:9AAD: A5 3D        	lda	<L24+log_1
  3063                        L38:
  3064 08:9AAF: A8           	tay
  3065 08:9AB0: 2B           	pld
  3066 08:9AB1: 3B           	tsc
  3067 08:9AB2: 18           	clc
  3068 08:9AB3: 69 4C 00     	adc	#L23
  3069 08:9AB6: 1B           	tcs
  3070 08:9AB7: 98           	tya
  3071 08:9AB8: 6B           	rtl
  3072                        ;}
  3073                        	.line	316
  3074                        	.endblock	316
  3075             0000004C   L23	equ	76
  3076             0000000D   L24	equ	13
  3077 08:9AB9:              	ends
  3078                        	efunc
  3079                        	.endfunc	316,13,76
  3080                        	.line	316
  3081                        	data
  3082                        L22:
  3083 00:0028: 5F 6B 5F 64  	db	$5F,$6B,$5F,$64,$6F,$73,$5F,$64,$65,$76,
                    $69,$63,$65,$64,$72
       00:002C: 6F 73 5F 64 
       00:0030: 65 76 69 63 
       00:0034: 65 64 72 
  3084 00:0037: 69 76 65 72  	db	$69,$76,$65,$72,$73,$00,$5F,$6B,$5F,$64,
                    $6F,$73,$5F,$64,$65
       00:003B: 73 00 5F 6B 
       00:003F: 5F 64 6F 73 
  Mon Aug  9 2021 16:52                                                Page 59


       00:0043: 5F 64 65 
  3085 00:0046: 76 69 63 65  	db	$76,$69,$63,$65,$69,$6E,$73,$74,$61,$6E,
                    $63,$65,$00,$00,$53
       00:004A: 69 6E 73 74 
       00:004E: 61 6E 63 65 
       00:0052: 00 00 53 
  3086 00:0055: 63 61 6E 6E  	db	$63,$61,$6E,$6E,$69,$6E,$67,$20,$66,$6F,
                    $72,$20,$44,$72,$69
       00:0059: 69 6E 67 20 
       00:005D: 66 6F 72 20 
       00:0061: 44 72 69 
  3087 00:0064: 76 65 72 73  	db	$76,$65,$72,$73,$2E,$2E,$2E,$0D,$0A,$00,
                    $44,$72,$69,$76,$65
       00:0068: 2E 2E 2E 0D 
       00:006C: 0A 00 44 72 
       00:0070: 69 76 65 
  3088 00:0073: 72 20 44 65  	db	$72,$20,$44,$65,$74,$65,$63,$74,$65,$64,
                    $20,$00,$20,$40,$30
       00:0077: 74 65 63 74 
       00:007B: 65 64 20 00 
       00:007F: 20 40 30 
  3089 00:0082: 78 00 3A 0D  	db	$78,$00,$3A,$0D,$0A,$00,$44,$72,$69,$76,
                    $65,$72,$20,$44,$65
       00:0086: 0A 00 44 72 
       00:008A: 69 76 65 72 
       00:008E: 20 44 65 
  3090 00:0091: 66 69 6E 69  	db	$66,$69,$6E,$69,$74,$69,$6F,$6E,$20,$00,
                    $20,$40,$30,$78,$00
       00:0095: 74 69 6F 6E 
       00:0099: 20 00 20 40 
       00:009D: 30 78 00 
  3091 00:00A0: 3A 0D 0A 00  	db	$3A,$0D,$0A,$00,$20,$20,$4E,$61,$6D,$65,
                    $3A,$00,$20,$3A,$20
       00:00A4: 20 20 4E 61 
       00:00A8: 6D 65 3A 00 
       00:00AC: 20 3A 20 
  3092 00:00AF: 00 4C 4F 41  	db	$00,$4C,$4F,$41,$44,$45,$44,$00,$0D,$0A,
                    $20,$55,$53,$49,$4E
       00:00B3: 44 45 44 00 
       00:00B7: 0D 0A 20 55 
       00:00BB: 53 49 4E 
  3093 00:00BE: 47 20 49 52  	db	$47,$20,$49,$52,$51,$3A,$20,$00,$2C,$00,
                    $55,$4E,$49,$4D,$50
       00:00C2: 51 3A 20 00 
       00:00C6: 2C 00 55 4E 
       00:00CA: 49 4D 50 
  3094 00:00CD: 4C 45 4D 45  	db	$4C,$45,$4D,$45,$4E,$54,$45,$44,$00,$49,
                    $4E,$43,$4F,$4D,$50
       00:00D1: 4E 54 45 44 
       00:00D5: 00 49 4E 43 
       00:00D9: 4F 4D 50 
  3095 00:00DC: 41 54 49 42  	db	$41,$54,$49,$42,$4C,$45,$00,$0D,$0A,$00
       00:00E0: 4C 45 00 0D 
       00:00E4: 0A 00 
  3096 00:00E6:              	ends
  3097                        ;/*
  3098                        ;void k_dos_load_drivers_old(void)
  3099                        ;{
  Mon Aug  9 2021 16:52                                                Page 60


  3100                        ;	PFX_DEVICE_DRIVER driver = NULL;
  3101                        ;
  3102                        ;	CHAR major[16];
  3103                        ;	CHAR minor[16];
  3104                        ;
  3105                        ;	sectorBuffer = (LPSTR)k_mem_allocate_heap(512);
  3106                        ;
  3107                        ;	driver = NULL;
  3108                        ;
  3109                        ;	k_get_c256_major_version(major);
  3110                        ;	k_get_c256_minor_version(minor);
  3111                        ;
  3112                        ;	k_debug_strings("System Major:",major);
  3113                        ;	k_debug_strings("System Minor:",minor);
  3114                        ;
  3115                        ;
  3116                        ;	_k_dos_devicedrivers 	= k_nodelist_allocate_li
                    st("_k_dos_devicedrivers" ,NULL);
  3117                        ;	_k_dos_deviceinstance   = k_nodelist_allocate_li
                    st("_k_dos_deviceinstance" ,NULL);
  3118                        ;
  3119                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_CON;
  3120                        ;	//k_debug_byte_array("DEVICE_CON:\r\n",(PBYTE)dr
                    iver,sizeof(FX_DEVICE_DRIVER));
  3121                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  3122                        ;
  3123                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
                    e:",driver->name);
  3124                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  3125                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  3126                        ;	k_debug_strings("k_dos_load_drivers::driver->min
                    or:",driver->hminor);
  3127                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  3128                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  3129                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  3130                        ;
  3131                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  3132                        ;	{
  3133                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  3134                        ;		if(driver->f_driver_load)
  3135                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  3136                        ;	}
  3137                        ;
  3138                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_SD;
  3139                        ;	//k_debug_byte_array("DEVICE_SD:\r\n",(PBYTE)dri
                    ver,sizeof(FX_DEVICE_DRIVER));
  3140                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  3141                        ;
  Mon Aug  9 2021 16:52                                                Page 61


  3142                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
                    e:",driver->name);
  3143                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  3144                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  3145                        ;	k_debug_strings("k_dos_load_drivers::driver->min
                    or:",driver->hminor);
  3146                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  3147                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  3148                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  3149                        ;
  3150                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  3151                        ;	{
  3152                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  3153                        ;
  3154                        ;		driver->driver_context = k_mem_allocate_
                    heap(sizeof(FATFS));
  3155                        ;
  3156                        ;		if(driver->f_driver_load)
  3157                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  3158                        ;	}
  3159                        ;
  3160                        ;
  3161                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_HD;
  3162                        ;	//k_debug_byte_array("DEVICE_HD:\r\n",(PBYTE)dri
                    ver,sizeof(FX_DEVICE_DRIVER));
  3163                        ;
  3164                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  3165                        ;
  3166                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
                    e:",driver->name);
  3167                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  3168                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  3169                        ;	k_debug_strings("k_dos_load_drivers::driver->min
                    or:",driver->hminor);
  3170                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  3171                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  3172                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  3173                        ;
  3174                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  3175                        ;	{
  3176                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  3177                        ;
  Mon Aug  9 2021 16:52                                                Page 62


  3178                        ;		driver->driver_context = k_mem_allocate_
                    heap(sizeof(FATFS));
  3179                        ;
  3180                        ;		if(driver->f_driver_load)
  3181                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  3182                        ;	}
  3183                        ;}
  3184                        ;
  3185                        ;*/
  3186                        ;
  3187                        ;
  3188                        ;
  3189                        ;PFX_DEVICE_DRIVER k_get_device_driver(UINT type)
  3190                        ;{
  3191                        	.line	409
  3192                        	.line	410
  3193                        	FXDOS
  3194                        	xdef	~~k_get_device_driver
  3195                        	func
  3196                        	.function	410
  3197                        ~~k_get_device_driver:
  3198                        	longa	on
  3199                        	longi	on
  3200 08:9AB9: 3B           	tsc
  3201 08:9ABA: 38           	sec
  3202 08:9ABB: E9 08 00     	sbc	#L40
  3203 08:9ABE: 1B           	tcs
  3204 08:9ABF: 0B           	phd
  3205 08:9AC0: 5B           	tcd
  3206             00000004   type_0	set	4
  3207                        	.block	410
  3208                        ;	PFXNODE deviceNode = NULL;
  3209                        ;	PFX_DEVICE_DRIVER device = NULL;
  3210                        ;
  3211                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    cedrivers,type);
  3212             00000000   deviceNode_1	set	0
  3213             00000004   device_1	set	4
  3214                        	.sym	deviceNode,0,138,1,32,5
  3215                        	.sym	device,4,138,1,32,58
  3216                        	.sym	type,4,16,6,16
  3217 08:9AC1: 64 01        	stz	<L41+deviceNode_1
  3218 08:9AC3: 64 03        	stz	<L41+deviceNode_1+2
  3219 08:9AC5: 64 05        	stz	<L41+device_1
  3220 08:9AC7: 64 07        	stz	<L41+device_1+2
  3221                        	.line	414
  3222 08:9AC9: D4 0C        	pei	<L40+type_0
  3223 08:9ACB: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  3224 08:9ACE: 48           	pha
  3225 08:9ACF: AD xx xx     	lda	|~~_k_dos_devicedrivers
  3226 08:9AD2: 48           	pha
  3227 08:9AD3: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3228 08:9AD7: 85 01        	sta	<L41+deviceNode_1
  3229 08:9AD9: 86 03        	stx	<L41+deviceNode_1+2
  3230                        ;	if(deviceNode)
  3231                        	.line	415
  3232                        ;	{
  Mon Aug  9 2021 16:52                                                Page 63


  3233 08:9ADB: A5 01        	lda	<L41+deviceNode_1
  3234 08:9ADD: 05 03        	ora	<L41+deviceNode_1+2
  3235 08:9ADF: D0 03        	bne	L43
  3236 08:9AE1: 82 0E 00     	brl	L10029
  3237                        L43:
  3238                        	.line	416
  3239                        ;		device = ((PFX_DEVICE_DRIVER)(deviceNode
                    ->data));
  3240                        	.line	417
  3241 08:9AE4: A0 02 00     	ldy	#$2
  3242 08:9AE7: B7 01        	lda	[<L41+deviceNode_1],Y
  3243 08:9AE9: 85 05        	sta	<L41+device_1
  3244 08:9AEB: A0 04 00     	ldy	#$4
  3245 08:9AEE: B7 01        	lda	[<L41+deviceNode_1],Y
  3246 08:9AF0: 85 07        	sta	<L41+device_1+2
  3247                        ;	}
  3248                        	.line	418
  3249                        ;
  3250                        ;	return device;
  3251                        L10029:
  3252                        	.line	420
  3253 08:9AF2: A6 07        	ldx	<L41+device_1+2
  3254 08:9AF4: A5 05        	lda	<L41+device_1
  3255                        L44:
  3256 08:9AF6: A8           	tay
  3257 08:9AF7: A5 0A        	lda	<L40+2
  3258 08:9AF9: 85 0C        	sta	<L40+2+2
  3259 08:9AFB: A5 09        	lda	<L40+1
  3260 08:9AFD: 85 0B        	sta	<L40+1+2
  3261 08:9AFF: 2B           	pld
  3262 08:9B00: 3B           	tsc
  3263 08:9B01: 18           	clc
  3264 08:9B02: 69 0A 00     	adc	#L40+2
  3265 08:9B05: 1B           	tcs
  3266 08:9B06: 98           	tya
  3267 08:9B07: 6B           	rtl
  3268                        ;}
  3269                        	.line	421
  3270                        	.endblock	421
  3271             00000008   L40	equ	8
  3272             00000001   L41	equ	1
  3273 08:9B08:              	ends
  3274                        	efunc
  3275                        	.endfunc	421,1,8
  3276                        	.line	421
  3277                        ;
  3278                        ;PFXDOSDEVICE k_get_dos_device(UINT type)
  3279                        ;{
  3280                        	.line	423
  3281                        	.line	424
  3282                        	FXDOS
  3283                        	xdef	~~k_get_dos_device
  3284                        	func
  3285                        	.function	424
  3286                        ~~k_get_dos_device:
  3287                        	longa	on
  3288                        	longi	on
  3289 08:9B08: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 64


  3290 08:9B09: 38           	sec
  3291 08:9B0A: E9 08 00     	sbc	#L45
  3292 08:9B0D: 1B           	tcs
  3293 08:9B0E: 0B           	phd
  3294 08:9B0F: 5B           	tcd
  3295             00000004   type_0	set	4
  3296                        	.block	424
  3297                        ;	PFXNODE deviceNode = NULL;
  3298                        ;	PFXDOSDEVICE device = NULL;
  3299                        ;
  3300                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    ceinstance,type);
  3301             00000000   deviceNode_1	set	0
  3302             00000004   device_1	set	4
  3303                        	.sym	deviceNode,0,138,1,32,5
  3304                        	.sym	device,4,138,1,32,127
  3305                        	.sym	type,4,16,6,16
  3306 08:9B10: 64 01        	stz	<L46+deviceNode_1
  3307 08:9B12: 64 03        	stz	<L46+deviceNode_1+2
  3308 08:9B14: 64 05        	stz	<L46+device_1
  3309 08:9B16: 64 07        	stz	<L46+device_1+2
  3310                        	.line	428
  3311 08:9B18: D4 0C        	pei	<L45+type_0
  3312 08:9B1A: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  3313 08:9B1D: 48           	pha
  3314 08:9B1E: AD xx xx     	lda	|~~_k_dos_deviceinstance
  3315 08:9B21: 48           	pha
  3316 08:9B22: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3317 08:9B26: 85 01        	sta	<L46+deviceNode_1
  3318 08:9B28: 86 03        	stx	<L46+deviceNode_1+2
  3319                        ;	if(deviceNode)
  3320                        	.line	429
  3321                        ;	{
  3322 08:9B2A: A5 01        	lda	<L46+deviceNode_1
  3323 08:9B2C: 05 03        	ora	<L46+deviceNode_1+2
  3324 08:9B2E: D0 03        	bne	L48
  3325 08:9B30: 82 0E 00     	brl	L10030
  3326                        L48:
  3327                        	.line	430
  3328                        ;		device = ((PFXDOSDEVICE)(deviceNode->dat
                    a));
  3329                        	.line	431
  3330 08:9B33: A0 02 00     	ldy	#$2
  3331 08:9B36: B7 01        	lda	[<L46+deviceNode_1],Y
  3332 08:9B38: 85 05        	sta	<L46+device_1
  3333 08:9B3A: A0 04 00     	ldy	#$4
  3334 08:9B3D: B7 01        	lda	[<L46+deviceNode_1],Y
  3335 08:9B3F: 85 07        	sta	<L46+device_1+2
  3336                        ;	}
  3337                        	.line	432
  3338                        ;
  3339                        ;	return device;
  3340                        L10030:
  3341                        	.line	434
  3342 08:9B41: A6 07        	ldx	<L46+device_1+2
  3343 08:9B43: A5 05        	lda	<L46+device_1
  3344                        L49:
  3345 08:9B45: A8           	tay
  Mon Aug  9 2021 16:52                                                Page 65


  3346 08:9B46: A5 0A        	lda	<L45+2
  3347 08:9B48: 85 0C        	sta	<L45+2+2
  3348 08:9B4A: A5 09        	lda	<L45+1
  3349 08:9B4C: 85 0B        	sta	<L45+1+2
  3350 08:9B4E: 2B           	pld
  3351 08:9B4F: 3B           	tsc
  3352 08:9B50: 18           	clc
  3353 08:9B51: 69 0A 00     	adc	#L45+2
  3354 08:9B54: 1B           	tcs
  3355 08:9B55: 98           	tya
  3356 08:9B56: 6B           	rtl
  3357                        ;}
  3358                        	.line	435
  3359                        	.endblock	435
  3360             00000008   L45	equ	8
  3361             00000001   L46	equ	1
  3362 08:9B57:              	ends
  3363                        	efunc
  3364                        	.endfunc	435,1,8
  3365                        	.line	435
  3366                        ;
  3367                        ;BOOL k_close_dos_device(UINT type)
  3368                        ;{
  3369                        	.line	437
  3370                        	.line	438
  3371                        	FXDOS
  3372                        	xdef	~~k_close_dos_device
  3373                        	func
  3374                        	.function	438
  3375                        ~~k_close_dos_device:
  3376                        	longa	on
  3377                        	longi	on
  3378 08:9B57: 3B           	tsc
  3379 08:9B58: 38           	sec
  3380 08:9B59: E9 09 00     	sbc	#L50
  3381 08:9B5C: 1B           	tcs
  3382 08:9B5D: 0B           	phd
  3383 08:9B5E: 5B           	tcd
  3384             00000004   type_0	set	4
  3385                        	.block	438
  3386                        ;	BOOL bRet = FALSE;
  3387                        ;	PFXNODE deviceNode = NULL;
  3388                        ;	PFXDOSDEVICE device = NULL;
  3389                        ;
  3390                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    ceinstance,type);
  3391             00000000   bRet_1	set	0
  3392             00000001   deviceNode_1	set	1
  3393             00000005   device_1	set	5
  3394                        	.sym	bRet,0,14,1,8
  3395                        	.sym	deviceNode,1,138,1,32,5
  3396                        	.sym	device,5,138,1,32,127
  3397                        	.sym	type,4,16,6,16
  3398 08:9B5F: E2 20        	sep	#$20
  3399                        	longa	off
  3400 08:9B61: 64 01        	stz	<L51+bRet_1
  3401 08:9B63: C2 20        	rep	#$20
  3402                        	longa	on
  Mon Aug  9 2021 16:52                                                Page 66


  3403 08:9B65: 64 02        	stz	<L51+deviceNode_1
  3404 08:9B67: 64 04        	stz	<L51+deviceNode_1+2
  3405 08:9B69: 64 06        	stz	<L51+device_1
  3406 08:9B6B: 64 08        	stz	<L51+device_1+2
  3407                        	.line	443
  3408 08:9B6D: D4 0D        	pei	<L50+type_0
  3409 08:9B6F: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  3410 08:9B72: 48           	pha
  3411 08:9B73: AD xx xx     	lda	|~~_k_dos_deviceinstance
  3412 08:9B76: 48           	pha
  3413 08:9B77: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3414 08:9B7B: 85 02        	sta	<L51+deviceNode_1
  3415 08:9B7D: 86 04        	stx	<L51+deviceNode_1+2
  3416                        ;	if(deviceNode)
  3417                        	.line	444
  3418                        ;	{
  3419 08:9B7F: A5 02        	lda	<L51+deviceNode_1
  3420 08:9B81: 05 04        	ora	<L51+deviceNode_1+2
  3421 08:9B83: D0 03        	bne	L53
  3422 08:9B85: 82 2F 00     	brl	L10031
  3423                        L53:
  3424                        	.line	445
  3425                        ;		device = ((PFXDOSDEVICE)(deviceNode->dat
                    a));
  3426                        	.line	446
  3427 08:9B88: A0 02 00     	ldy	#$2
  3428 08:9B8B: B7 02        	lda	[<L51+deviceNode_1],Y
  3429 08:9B8D: 85 06        	sta	<L51+device_1
  3430 08:9B8F: A0 04 00     	ldy	#$4
  3431 08:9B92: B7 02        	lda	[<L51+deviceNode_1],Y
  3432 08:9B94: 85 08        	sta	<L51+device_1+2
  3433                        ;		if(device)
  3434                        	.line	447
  3435                        ;		{
  3436 08:9B96: A5 06        	lda	<L51+device_1
  3437 08:9B98: 05 08        	ora	<L51+device_1+2
  3438 08:9B9A: D0 03        	bne	L54
  3439 08:9B9C: 82 18 00     	brl	L10032
  3440                        L54:
  3441                        	.line	448
  3442                        ;			k_nodelist_removefromlist(_k_dos
                    _deviceinstance,deviceNode);
  3443                        	.line	449
  3444 08:9B9F: D4 04        	pei	<L51+deviceNode_1+2
  3445 08:9BA1: D4 02        	pei	<L51+deviceNode_1
  3446 08:9BA3: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  3447 08:9BA6: 48           	pha
  3448 08:9BA7: AD xx xx     	lda	|~~_k_dos_deviceinstance
  3449 08:9BAA: 48           	pha
  3450 08:9BAB: 22 xx xx xx  	jsl	~~k_nodelist_removefromlist
  3451                        ;			bRet = TRUE;
  3452                        	.line	450
  3453 08:9BAF: E2 20        	sep	#$20
  3454                        	longa	off
  3455 08:9BB1: A9 01        	lda	#$1
  3456 08:9BB3: 85 01        	sta	<L51+bRet_1
  3457 08:9BB5: C2 20        	rep	#$20
  3458                        	longa	on
  Mon Aug  9 2021 16:52                                                Page 67


  3459                        ;		}
  3460                        	.line	451
  3461                        ;	}
  3462                        L10032:
  3463                        	.line	452
  3464                        ;
  3465                        ;    return bRet;
  3466                        L10031:
  3467                        	.line	454
  3468 08:9BB7: A5 01        	lda	<L51+bRet_1
  3469 08:9BB9: 29 FF 00     	and	#$ff
  3470                        L55:
  3471 08:9BBC: A8           	tay
  3472 08:9BBD: A5 0B        	lda	<L50+2
  3473 08:9BBF: 85 0D        	sta	<L50+2+2
  3474 08:9BC1: A5 0A        	lda	<L50+1
  3475 08:9BC3: 85 0C        	sta	<L50+1+2
  3476 08:9BC5: 2B           	pld
  3477 08:9BC6: 3B           	tsc
  3478 08:9BC7: 18           	clc
  3479 08:9BC8: 69 0B 00     	adc	#L50+2
  3480 08:9BCB: 1B           	tcs
  3481 08:9BCC: 98           	tya
  3482 08:9BCD: 6B           	rtl
  3483                        ;}
  3484                        	.line	455
  3485                        	.endblock	455
  3486             00000009   L50	equ	9
  3487             00000001   L51	equ	1
  3488 08:9BCE:              	ends
  3489                        	efunc
  3490                        	.endfunc	455,1,9
  3491                        	.line	455
  3492                        ;
  3493                        ;PFXDOSDEVICE k_create_dos_device(UINT type)
  3494                        ;{
  3495                        	.line	457
  3496                        	.line	458
  3497                        	FXDOS
  3498                        	xdef	~~k_create_dos_device
  3499                        	func
  3500                        	.function	458
  3501                        ~~k_create_dos_device:
  3502                        	longa	on
  3503                        	longi	on
  3504 08:9BCE: 3B           	tsc
  3505 08:9BCF: 38           	sec
  3506 08:9BD0: E9 28 00     	sbc	#L56
  3507 08:9BD3: 1B           	tcs
  3508 08:9BD4: 0B           	phd
  3509 08:9BD5: 5B           	tcd
  3510             00000004   type_0	set	4
  3511                        	.block	458
  3512                        ;	INT x = 0;
  3513                        ;
  3514                        ;	BYTE	errorCode;
  3515                        ;	CHAR	byte;
  3516                        ;
  Mon Aug  9 2021 16:52                                                Page 68


  3517                        ;	BYTE	s;
  3518                        ;
  3519                        ;	BOOL isFAT12 = FALSE;
  3520                        ;
  3521                        ;	PFATBOOTSECTOR  pBoot = NULL;
  3522                        ;	PPARTITIONTABLE pPartTable 		= NULL;
  3523                        ;	PFXDOSDEVICE 	pfxdosDevice 	= NULL;
  3524                        ;	PFAT32EXT		pfat32 			
                    = NULL;
  3525                        ;	PFX_BLOCK_DEVICE_DRIVER pdriver = NULL;
  3526                        ;	PFXNODE deviceNode = NULL;
  3527                        ;	ULONG lba = 0L;
  3528                        ;
  3529                        ;	INT partitionId = 0x00;
  3530                        ;
  3531                        ;    k_debug_integer("k_create_dos_device:",type);
  3532             00000000   x_1	set	0
  3533             00000002   errorCode_1	set	2
  3534             00000003   byte_1	set	3
  3535             00000004   s_1	set	4
  3536             00000005   isFAT12_1	set	5
  3537             00000006   pBoot_1	set	6
  3538             0000000A   pPartTable_1	set	10
  3539             0000000E   pfxdosDevice_1	set	14
  3540             00000012   pfat32_1	set	18
  3541             00000016   pdriver_1	set	22
  3542             0000001A   deviceNode_1	set	26
  3543             0000001E   lba_1	set	30
  3544             00000022   partitionId_1	set	34
  3545                        	.sym	x,0,5,1,16
  3546                        	.sym	errorCode,2,14,1,8
  3547                        	.sym	byte,3,14,1,8
  3548                        	.sym	s,4,14,1,8
  3549                        	.sym	isFAT12,5,14,1,8
  3550                        	.sym	pBoot,6,138,1,32,97
  3551                        	.sym	pPartTable,10,138,1,32,98
  3552                        	.sym	pfxdosDevice,14,138,1,32,127
  3553                        	.sym	pfat32,18,138,1,32,94
  3554                        	.sym	pdriver,22,138,1,32,59
  3555                        	.sym	deviceNode,26,138,1,32,5
  3556                        	.sym	lba,30,18,1,32
  3557                        	.sym	partitionId,34,5,1,16
  3558                        	.sym	type,4,16,6,16
  3559 08:9BD6: 64 05        	stz	<L57+x_1
  3560 08:9BD8: E2 20        	sep	#$20
  3561                        	longa	off
  3562 08:9BDA: 64 0A        	stz	<L57+isFAT12_1
  3563 08:9BDC: C2 20        	rep	#$20
  3564                        	longa	on
  3565 08:9BDE: 64 0B        	stz	<L57+pBoot_1
  3566 08:9BE0: 64 0D        	stz	<L57+pBoot_1+2
  3567 08:9BE2: 64 0F        	stz	<L57+pPartTable_1
  3568 08:9BE4: 64 11        	stz	<L57+pPartTable_1+2
  3569 08:9BE6: 64 13        	stz	<L57+pfxdosDevice_1
  3570 08:9BE8: 64 15        	stz	<L57+pfxdosDevice_1+2
  3571 08:9BEA: 64 17        	stz	<L57+pfat32_1
  3572 08:9BEC: 64 19        	stz	<L57+pfat32_1+2
  3573 08:9BEE: 64 1B        	stz	<L57+pdriver_1
  Mon Aug  9 2021 16:52                                                Page 69


  3574 08:9BF0: 64 1D        	stz	<L57+pdriver_1+2
  3575 08:9BF2: 64 1F        	stz	<L57+deviceNode_1
  3576 08:9BF4: 64 21        	stz	<L57+deviceNode_1+2
  3577 08:9BF6: 64 23        	stz	<L57+lba_1
  3578 08:9BF8: 64 25        	stz	<L57+lba_1+2
  3579 08:9BFA: 64 27        	stz	<L57+partitionId_1
  3580                        	.line	478
  3581 08:9BFC: D4 2C        	pei	<L56+type_0
  3582 08:9BFE: F4 xx xx     	pea	#^L39
  3583 08:9C01: F4 xx xx     	pea	#<L39
  3584 08:9C04: 22 xx xx xx  	jsl	~~k_debug_integer
  3585                        ;
  3586                        ;
  3587                        ;    pfxdosDevice = k_get_dos_device(type);
  3588                        	.line	481
  3589 08:9C08: D4 2C        	pei	<L56+type_0
  3590 08:9C0A: 22 08 9B 08  	jsl	~~k_get_dos_device
  3591 08:9C0E: 85 13        	sta	<L57+pfxdosDevice_1
  3592 08:9C10: 86 15        	stx	<L57+pfxdosDevice_1+2
  3593                        ;    if(pfxdosDevice)
  3594                        	.line	482
  3595                        ;    {
  3596 08:9C12: A5 13        	lda	<L57+pfxdosDevice_1
  3597 08:9C14: 05 15        	ora	<L57+pfxdosDevice_1+2
  3598 08:9C16: D0 03        	bne	L59
  3599 08:9C18: 82 22 00     	brl	L10033
  3600                        L59:
  3601                        	.line	483
  3602                        ;    	k_debug_integer("k_create_dos_device:FOU
                    ND EXISTING:",type);
  3603                        	.line	484
  3604 08:9C1B: D4 2C        	pei	<L56+type_0
  3605 08:9C1D: F4 xx xx     	pea	#^L39+21
  3606 08:9C20: F4 xx xx     	pea	#<L39+21
  3607 08:9C23: 22 xx xx xx  	jsl	~~k_debug_integer
  3608                        ;    	return pfxdosDevice;
  3609                        	.line	485
  3610 08:9C27: A6 15        	ldx	<L57+pfxdosDevice_1+2
  3611 08:9C29: A5 13        	lda	<L57+pfxdosDevice_1
  3612                        L60:
  3613 08:9C2B: A8           	tay
  3614 08:9C2C: A5 2A        	lda	<L56+2
  3615 08:9C2E: 85 2C        	sta	<L56+2+2
  3616 08:9C30: A5 29        	lda	<L56+1
  3617 08:9C32: 85 2B        	sta	<L56+1+2
  3618 08:9C34: 2B           	pld
  3619 08:9C35: 3B           	tsc
  3620 08:9C36: 18           	clc
  3621 08:9C37: 69 2A 00     	adc	#L56+2
  3622 08:9C3A: 1B           	tcs
  3623 08:9C3B: 98           	tya
  3624 08:9C3C: 6B           	rtl
  3625                        ;    }
  3626                        	.line	486
  3627                        ;
  3628                        ;    pfxdosDevice = k_mem_allocate_heap(sizeof(FXD
                    OSDEVICE));
  3629                        L10033:
  Mon Aug  9 2021 16:52                                                Page 70


  3630                        	.line	488
  3631 08:9C3D: F4 00 00     	pea	#^$2ce
  3632 08:9C40: F4 CE 02     	pea	#<$2ce
  3633 08:9C43: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  3634 08:9C47: 85 13        	sta	<L57+pfxdosDevice_1
  3635 08:9C49: 86 15        	stx	<L57+pfxdosDevice_1+2
  3636                        ;    if(pfxdosDevice)
  3637                        	.line	489
  3638                        ;    {
  3639 08:9C4B: A5 13        	lda	<L57+pfxdosDevice_1
  3640 08:9C4D: 05 15        	ora	<L57+pfxdosDevice_1+2
  3641 08:9C4F: D0 03        	bne	L61
  3642 08:9C51: 82 4F 02     	brl	L10034
  3643                        L61:
  3644                        	.line	490
  3645                        ;    	memset(pfxdosDevice,0,sizeof(FXDOSDEVICE
                    ));
  3646                        	.line	491
  3647 08:9C54: F4 CE 02     	pea	#<$2ce
  3648 08:9C57: F4 00 00     	pea	#<$0
  3649 08:9C5A: D4 15        	pei	<L57+pfxdosDevice_1+2
  3650 08:9C5C: D4 13        	pei	<L57+pfxdosDevice_1
  3651 08:9C5E: 22 xx xx xx  	jsl	~~memset
  3652                        ;
  3653                        ;    	switch(type)
  3654                        	.line	493
  3655 08:9C62: A5 2C        	lda	<L56+type_0
  3656 08:9C64: 82 D1 01     	brl	L10035
  3657                        ;		{
  3658                        	.line	494
  3659                        ;    	case FXDOS_SDC:
  3660                        	.line	495
  3661                        L10037:
  3662                        ;
  3663                        ;    		deviceNode = k_nodelist_searchBy
                    Type(_k_dos_devicedrivers,DRIVER_TYPE_SDCARD);
  3664                        	.line	497
  3665 08:9C67: F4 06 00     	pea	#<$6
  3666 08:9C6A: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  3667 08:9C6D: 48           	pha
  3668 08:9C6E: AD xx xx     	lda	|~~_k_dos_devicedrivers
  3669 08:9C71: 48           	pha
  3670 08:9C72: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3671 08:9C76: 85 1F        	sta	<L57+deviceNode_1
  3672 08:9C78: 86 21        	stx	<L57+deviceNode_1+2
  3673                        ;    		if(deviceNode)
  3674                        	.line	498
  3675                        ;    		{
  3676 08:9C7A: A5 1F        	lda	<L57+deviceNode_1
  3677 08:9C7C: 05 21        	ora	<L57+deviceNode_1+2
  3678 08:9C7E: D0 03        	bne	L62
  3679 08:9C80: 82 C6 00     	brl	L10038
  3680                        L62:
  3681                        	.line	499
  3682                        ;    			 k_debug_pointer("k_crea
                    te_dos_device:found:deviceNode:",deviceNode);
  3683                        	.line	500
  3684 08:9C83: D4 21        	pei	<L57+deviceNode_1+2
  Mon Aug  9 2021 16:52                                                Page 71


  3685 08:9C85: D4 1F        	pei	<L57+deviceNode_1
  3686 08:9C87: F4 xx xx     	pea	#^L39+57
  3687 08:9C8A: F4 xx xx     	pea	#<L39+57
  3688 08:9C8D: 22 xx xx xx  	jsl	~~k_debug_pointer
  3689                        ;
  3690                        ;    			pdriver = ((PFX_BLOCK_DE
                    VICE_DRIVER)(deviceNode->data));
  3691                        	.line	502
  3692 08:9C91: A0 02 00     	ldy	#$2
  3693 08:9C94: B7 1F        	lda	[<L57+deviceNode_1],Y
  3694 08:9C96: 85 1B        	sta	<L57+pdriver_1
  3695 08:9C98: A0 04 00     	ldy	#$4
  3696 08:9C9B: B7 1F        	lda	[<L57+deviceNode_1],Y
  3697 08:9C9D: 85 1D        	sta	<L57+pdriver_1+2
  3698                        ;    			if(pdriver)
  3699                        	.line	503
  3700                        ;    			{
  3701 08:9C9F: A5 1B        	lda	<L57+pdriver_1
  3702 08:9CA1: 05 1D        	ora	<L57+pdriver_1+2
  3703 08:9CA3: D0 03        	bne	L63
  3704 08:9CA5: 82 A1 00     	brl	L10039
  3705                        L63:
  3706                        	.line	504
  3707                        ;    				k_debug_pointer(
                    "k_create_dos_device:found:pdriver:",pdriver);
  3708                        	.line	505
  3709 08:9CA8: D4 1D        	pei	<L57+pdriver_1+2
  3710 08:9CAA: D4 1B        	pei	<L57+pdriver_1
  3711 08:9CAC: F4 xx xx     	pea	#^L39+95
  3712 08:9CAF: F4 xx xx     	pea	#<L39+95
  3713 08:9CB2: 22 xx xx xx  	jsl	~~k_debug_pointer
  3714                        ;
  3715                        ;    				if(pdriver->f_dr
                    iver_load)
  3716                        	.line	507
  3717                        ;    				{
  3718 08:9CB6: A0 51 00     	ldy	#$51
  3719 08:9CB9: B7 1B        	lda	[<L57+pdriver_1],Y
  3720 08:9CBB: A0 53 00     	ldy	#$53
  3721 08:9CBE: 17 1B        	ora	[<L57+pdriver_1],Y
  3722 08:9CC0: D0 03        	bne	L64
  3723 08:9CC2: 82 84 00     	brl	L10040
  3724                        L64:
  3725                        	.line	508
  3726                        ;    					pfxdosDe
                    vice->devdata = pdriver->driver_context;
  3727                        	.line	509
  3728 08:9CC5: A0 4D 00     	ldy	#$4d
  3729 08:9CC8: B7 1B        	lda	[<L57+pdriver_1],Y
  3730 08:9CCA: A0 02 00     	ldy	#$2
  3731 08:9CCD: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3732 08:9CCF: A0 4F 00     	ldy	#$4f
  3733 08:9CD2: B7 1B        	lda	[<L57+pdriver_1],Y
  3734 08:9CD4: A0 04 00     	ldy	#$4
  3735 08:9CD7: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3736                        ;
  3737                        ;    					pfxdosDe
                    vice->initialized = ((DEVICEDRIVER_LOAD)pdriver->f_driver_lo
  Mon Aug  9 2021 16:52                                                Page 72


                    ad)();
  3738                        	.line	511
  3739 08:9CD9: A0 53 00     	ldy	#$53
  3740 08:9CDC: B7 1B        	lda	[<L57+pdriver_1],Y
  3741 08:9CDE: AA           	tax
  3742 08:9CDF: A0 51 00     	ldy	#$51
  3743 08:9CE2: B7 1B        	lda	[<L57+pdriver_1],Y
  3744                        	xref	~~~lcal
  3745 08:9CE4: 22 xx xx xx  	jsl	~~~lcal
  3746 08:9CE8: E2 20        	sep	#$20
  3747                        	longa	off
  3748 08:9CEA: A0 01 00     	ldy	#$1
  3749 08:9CED: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3750 08:9CEF: C2 20        	rep	#$20
  3751                        	longa	on
  3752                        ;    					if(pfxdo
                    sDevice->initialized)
  3753                        	.line	512
  3754                        ;    					{
  3755 08:9CF1: A0 01 00     	ldy	#$1
  3756 08:9CF4: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  3757 08:9CF6: 29 FF 00     	and	#$ff
  3758 08:9CF9: D0 03        	bne	L65
  3759 08:9CFB: 82 38 00     	brl	L10041
  3760                        L65:
  3761                        	.line	513
  3762                        ;							
                    pfxdosDevice->pfInit   = NULL;
  3763                        	.line	514
  3764 08:9CFE: A9 00 00     	lda	#$0
  3765 08:9D01: A0 BA 02     	ldy	#$2ba
  3766 08:9D04: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3767 08:9D06: A9 00 00     	lda	#$0
  3768 08:9D09: A0 BC 02     	ldy	#$2bc
  3769 08:9D0C: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3770                        ;							
                    pfxdosDevice->pfReader = (DOSSECTORREADER)pdriver->f_driver_
                    read;
  3771                        	.line	515
  3772 08:9D0E: A0 55 00     	ldy	#$55
  3773 08:9D11: B7 1B        	lda	[<L57+pdriver_1],Y
  3774 08:9D13: A0 C6 02     	ldy	#$2c6
  3775 08:9D16: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3776 08:9D18: A0 57 00     	ldy	#$57
  3777 08:9D1B: B7 1B        	lda	[<L57+pdriver_1],Y
  3778 08:9D1D: A0 C8 02     	ldy	#$2c8
  3779 08:9D20: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3780                        ;							
                    pfxdosDevice->pfWriter = (DOSSECTORWRITER)pdriver->f_driver_
                    write;
  3781                        	.line	516
  3782 08:9D22: A0 59 00     	ldy	#$59
  3783 08:9D25: B7 1B        	lda	[<L57+pdriver_1],Y
  3784 08:9D27: A0 CA 02     	ldy	#$2ca
  3785 08:9D2A: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3786 08:9D2C: A0 5B 00     	ldy	#$5b
  3787 08:9D2F: B7 1B        	lda	[<L57+pdriver_1],Y
  3788 08:9D31: A0 CC 02     	ldy	#$2cc
  Mon Aug  9 2021 16:52                                                Page 73


  3789 08:9D34: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3790                        ;    					}
  3791                        	.line	517
  3792                        ;
  3793                        ;    					k_debug_
                    integer("k_create_dos_device:found:pfxdosDevice->initialized
                    :",pfxdosDevice->initialized);
  3794                        L10041:
  3795                        	.line	519
  3796 08:9D36: A0 01 00     	ldy	#$1
  3797 08:9D39: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  3798 08:9D3B: 29 FF 00     	and	#$ff
  3799 08:9D3E: 48           	pha
  3800 08:9D3F: F4 xx xx     	pea	#^L39+130
  3801 08:9D42: F4 xx xx     	pea	#<L39+130
  3802 08:9D45: 22 xx xx xx  	jsl	~~k_debug_integer
  3803                        ;    				}
  3804                        	.line	520
  3805                        ;    				//pfxdosDevice->
                    pfInit(NULL);
  3806                        ;    			}
  3807                        L10040:
  3808                        	.line	522
  3809                        ;
  3810                        ;    		}
  3811                        L10039:
  3812                        	.line	524
  3813                        ;    		//pfxdosDevice->pfInit   = (DOSI
                    NITDEVICE)k_sd_dos_init;
  3814                        ;    		//pfxdosDevice->pfReader = (DOSS
                    ECTORREADER)k_read_sd_sector;
  3815                        ;    		break;
  3816                        L10038:
  3817                        	.line	527
  3818 08:9D49: 82 00 01     	brl	L10036
  3819                        ;
  3820                        ;    	case FXDOS_HDD:
  3821                        	.line	529
  3822                        L10042:
  3823                        ;    		deviceNode = k_nodelist_searchBy
                    Type(_k_dos_devicedrivers,DRIVER_TYPE_IDE);
  3824                        	.line	530
  3825 08:9D4C: F4 08 00     	pea	#<$8
  3826 08:9D4F: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  3827 08:9D52: 48           	pha
  3828 08:9D53: AD xx xx     	lda	|~~_k_dos_devicedrivers
  3829 08:9D56: 48           	pha
  3830 08:9D57: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3831 08:9D5B: 85 1F        	sta	<L57+deviceNode_1
  3832 08:9D5D: 86 21        	stx	<L57+deviceNode_1+2
  3833                        ;    		if(deviceNode)
  3834                        	.line	531
  3835                        ;    		{
  3836 08:9D5F: A5 1F        	lda	<L57+deviceNode_1
  3837 08:9D61: 05 21        	ora	<L57+deviceNode_1+2
  3838 08:9D63: D0 03        	bne	L66
  3839 08:9D65: 82 C6 00     	brl	L10043
  3840                        L66:
  Mon Aug  9 2021 16:52                                                Page 74


  3841                        	.line	532
  3842                        ;    			 k_debug_pointer("k_crea
                    te_dos_device:found:deviceNode:",deviceNode);
  3843                        	.line	533
  3844 08:9D68: D4 21        	pei	<L57+deviceNode_1+2
  3845 08:9D6A: D4 1F        	pei	<L57+deviceNode_1
  3846 08:9D6C: F4 xx xx     	pea	#^L39+183
  3847 08:9D6F: F4 xx xx     	pea	#<L39+183
  3848 08:9D72: 22 xx xx xx  	jsl	~~k_debug_pointer
  3849                        ;
  3850                        ;    			pdriver = ((PFX_BLOCK_DE
                    VICE_DRIVER)(deviceNode->data));
  3851                        	.line	535
  3852 08:9D76: A0 02 00     	ldy	#$2
  3853 08:9D79: B7 1F        	lda	[<L57+deviceNode_1],Y
  3854 08:9D7B: 85 1B        	sta	<L57+pdriver_1
  3855 08:9D7D: A0 04 00     	ldy	#$4
  3856 08:9D80: B7 1F        	lda	[<L57+deviceNode_1],Y
  3857 08:9D82: 85 1D        	sta	<L57+pdriver_1+2
  3858                        ;    			if(pdriver)
  3859                        	.line	536
  3860                        ;    			{
  3861 08:9D84: A5 1B        	lda	<L57+pdriver_1
  3862 08:9D86: 05 1D        	ora	<L57+pdriver_1+2
  3863 08:9D88: D0 03        	bne	L67
  3864 08:9D8A: 82 A1 00     	brl	L10044
  3865                        L67:
  3866                        	.line	537
  3867                        ;    				k_debug_pointer(
                    "k_create_dos_device:found:pdriver:",pdriver);
  3868                        	.line	538
  3869 08:9D8D: D4 1D        	pei	<L57+pdriver_1+2
  3870 08:9D8F: D4 1B        	pei	<L57+pdriver_1
  3871 08:9D91: F4 xx xx     	pea	#^L39+221
  3872 08:9D94: F4 xx xx     	pea	#<L39+221
  3873 08:9D97: 22 xx xx xx  	jsl	~~k_debug_pointer
  3874                        ;
  3875                        ;    				if(pdriver->f_dr
                    iver_load)
  3876                        	.line	540
  3877                        ;    				{
  3878 08:9D9B: A0 51 00     	ldy	#$51
  3879 08:9D9E: B7 1B        	lda	[<L57+pdriver_1],Y
  3880 08:9DA0: A0 53 00     	ldy	#$53
  3881 08:9DA3: 17 1B        	ora	[<L57+pdriver_1],Y
  3882 08:9DA5: D0 03        	bne	L68
  3883 08:9DA7: 82 84 00     	brl	L10045
  3884                        L68:
  3885                        	.line	541
  3886                        ;    					pfxdosDe
                    vice->devdata = pdriver->driver_context;
  3887                        	.line	542
  3888 08:9DAA: A0 4D 00     	ldy	#$4d
  3889 08:9DAD: B7 1B        	lda	[<L57+pdriver_1],Y
  3890 08:9DAF: A0 02 00     	ldy	#$2
  3891 08:9DB2: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3892 08:9DB4: A0 4F 00     	ldy	#$4f
  3893 08:9DB7: B7 1B        	lda	[<L57+pdriver_1],Y
  Mon Aug  9 2021 16:52                                                Page 75


  3894 08:9DB9: A0 04 00     	ldy	#$4
  3895 08:9DBC: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3896                        ;
  3897                        ;    					pfxdosDe
                    vice->initialized = ((DEVICEDRIVER_LOAD)pdriver->f_driver_lo
                    ad)();
  3898                        	.line	544
  3899 08:9DBE: A0 53 00     	ldy	#$53
  3900 08:9DC1: B7 1B        	lda	[<L57+pdriver_1],Y
  3901 08:9DC3: AA           	tax
  3902 08:9DC4: A0 51 00     	ldy	#$51
  3903 08:9DC7: B7 1B        	lda	[<L57+pdriver_1],Y
  3904                        	xref	~~~lcal
  3905 08:9DC9: 22 xx xx xx  	jsl	~~~lcal
  3906 08:9DCD: E2 20        	sep	#$20
  3907                        	longa	off
  3908 08:9DCF: A0 01 00     	ldy	#$1
  3909 08:9DD2: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3910 08:9DD4: C2 20        	rep	#$20
  3911                        	longa	on
  3912                        ;    					if(pfxdo
                    sDevice->initialized)
  3913                        	.line	545
  3914                        ;    					{
  3915 08:9DD6: A0 01 00     	ldy	#$1
  3916 08:9DD9: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  3917 08:9DDB: 29 FF 00     	and	#$ff
  3918 08:9DDE: D0 03        	bne	L69
  3919 08:9DE0: 82 38 00     	brl	L10046
  3920                        L69:
  3921                        	.line	546
  3922                        ;							
                    pfxdosDevice->pfInit   = NULL;
  3923                        	.line	547
  3924 08:9DE3: A9 00 00     	lda	#$0
  3925 08:9DE6: A0 BA 02     	ldy	#$2ba
  3926 08:9DE9: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3927 08:9DEB: A9 00 00     	lda	#$0
  3928 08:9DEE: A0 BC 02     	ldy	#$2bc
  3929 08:9DF1: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3930                        ;							
                    pfxdosDevice->pfReader = (DOSSECTORREADER)pdriver->f_driver_
                    read;
  3931                        	.line	548
  3932 08:9DF3: A0 55 00     	ldy	#$55
  3933 08:9DF6: B7 1B        	lda	[<L57+pdriver_1],Y
  3934 08:9DF8: A0 C6 02     	ldy	#$2c6
  3935 08:9DFB: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3936 08:9DFD: A0 57 00     	ldy	#$57
  3937 08:9E00: B7 1B        	lda	[<L57+pdriver_1],Y
  3938 08:9E02: A0 C8 02     	ldy	#$2c8
  3939 08:9E05: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3940                        ;							
                    pfxdosDevice->pfWriter = (DOSSECTORWRITER)pdriver->f_driver_
                    write;
  3941                        	.line	549
  3942 08:9E07: A0 59 00     	ldy	#$59
  3943 08:9E0A: B7 1B        	lda	[<L57+pdriver_1],Y
  Mon Aug  9 2021 16:52                                                Page 76


  3944 08:9E0C: A0 CA 02     	ldy	#$2ca
  3945 08:9E0F: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3946 08:9E11: A0 5B 00     	ldy	#$5b
  3947 08:9E14: B7 1B        	lda	[<L57+pdriver_1],Y
  3948 08:9E16: A0 CC 02     	ldy	#$2cc
  3949 08:9E19: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3950                        ;    					}
  3951                        	.line	550
  3952                        ;
  3953                        ;    					k_debug_
                    integer("k_create_dos_device:found:pfxdosDevice->initialized
                    :",pfxdosDevice->initialized);
  3954                        L10046:
  3955                        	.line	552
  3956 08:9E1B: A0 01 00     	ldy	#$1
  3957 08:9E1E: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  3958 08:9E20: 29 FF 00     	and	#$ff
  3959 08:9E23: 48           	pha
  3960 08:9E24: F4 xx xx     	pea	#^L39+256
  3961 08:9E27: F4 xx xx     	pea	#<L39+256
  3962 08:9E2A: 22 xx xx xx  	jsl	~~k_debug_integer
  3963                        ;    				}
  3964                        	.line	553
  3965                        ;    				//pfxdosDevice->
                    pfInit(NULL);
  3966                        ;    			}
  3967                        L10045:
  3968                        	.line	555
  3969                        ;
  3970                        ;    		}
  3971                        L10044:
  3972                        	.line	557
  3973                        ;
  3974                        ;    		break;
  3975                        L10043:
  3976                        	.line	559
  3977 08:9E2E: 82 1B 00     	brl	L10036
  3978                        ;
  3979                        ;    	case FXDOS_FDD:
  3980                        	.line	561
  3981                        L10047:
  3982                        ;
  3983                        ;    		//pfxdosDevice->pfInit   = (DOSI
                    NITDEVICE)floppy_init;//k_fd_dos_init;
  3984                        ;    		//pfxdosDevice->pfReader = (DOSS
                    ECTORREADER)k_read_fd_sector;
  3985                        ;    		lba = 0L;
  3986                        	.line	565
  3987 08:9E31: 64 23        	stz	<L57+lba_1
  3988 08:9E33: 64 25        	stz	<L57+lba_1+2
  3989                        ;
  3990                        ;    		break;
  3991                        	.line	567
  3992 08:9E35: 82 14 00     	brl	L10036
  3993                        ;
  3994                        ;		}
  3995                        	.line	569
  3996                        L10035:
  Mon Aug  9 2021 16:52                                                Page 77


  3997                        	xref	~~~swt
  3998 08:9E38: 22 xx xx xx  	jsl	~~~swt
  3999 08:9E3C: 03 00        	dw	3
  4000 08:9E3E: 05 00        	dw	5
  4001 08:9E40: 66 9C        	dw	L10037-1
  4002 08:9E42: 06 00        	dw	6
  4003 08:9E44: 4B 9D        	dw	L10042-1
  4004 08:9E46: 07 00        	dw	7
  4005 08:9E48: 30 9E        	dw	L10047-1
  4006 08:9E4A: 4B 9E        	dw	L10036-1
  4007                        L10036:
  4008                        ;
  4009                        ;    	k_debug_integer("k_create_dos_device siz
                    e:",sizeof(FXDOSDEVICE));
  4010                        	.line	571
  4011 08:9E4C: F4 CE 02     	pea	#<$2ce
  4012 08:9E4F: F4 xx xx     	pea	#^L39+309
  4013 08:9E52: F4 xx xx     	pea	#<L39+309
  4014 08:9E55: 22 xx xx xx  	jsl	~~k_debug_integer
  4015                        ;
  4016                        ;    	if(!pfxdosDevice->initialized && pfxdosD
                    evice->pfInit)
  4017                        	.line	573
  4018                        ;    		pfxdosDevice->pfInit();
  4019 08:9E59: A0 01 00     	ldy	#$1
  4020 08:9E5C: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4021 08:9E5E: 29 FF 00     	and	#$ff
  4022 08:9E61: F0 03        	beq	L70
  4023 08:9E63: 82 1E 00     	brl	L10048
  4024                        L70:
  4025 08:9E66: A0 BA 02     	ldy	#$2ba
  4026 08:9E69: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4027 08:9E6B: A0 BC 02     	ldy	#$2bc
  4028 08:9E6E: 17 13        	ora	[<L57+pfxdosDevice_1],Y
  4029 08:9E70: D0 03        	bne	L71
  4030 08:9E72: 82 0F 00     	brl	L10048
  4031                        L71:
  4032                        	.line	574
  4033 08:9E75: A0 BC 02     	ldy	#$2bc
  4034 08:9E78: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4035 08:9E7A: AA           	tax
  4036 08:9E7B: A0 BA 02     	ldy	#$2ba
  4037 08:9E7E: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4038                        	xref	~~~lcal
  4039 08:9E80: 22 xx xx xx  	jsl	~~~lcal
  4040                        ;
  4041                        ;
  4042                        ;    	if(!pfxdosDevice->initialized)
  4043                        L10048:
  4044                        	.line	577
  4045                        ;    	{
  4046 08:9E84: A0 01 00     	ldy	#$1
  4047 08:9E87: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4048 08:9E89: 29 FF 00     	and	#$ff
  4049 08:9E8C: F0 03        	beq	L72
  4050 08:9E8E: 82 12 00     	brl	L10049
  4051                        L72:
  4052                        	.line	578
  Mon Aug  9 2021 16:52                                                Page 78


  4053                        ;    		k_mem_deallocate_heap(pfxdosDevi
                    ce);
  4054                        	.line	579
  4055 08:9E91: D4 15        	pei	<L57+pfxdosDevice_1+2
  4056 08:9E93: D4 13        	pei	<L57+pfxdosDevice_1
  4057 08:9E95: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  4058                        ;    		return NULL;
  4059                        	.line	580
  4060 08:9E99: A9 00 00     	lda	#$0
  4061 08:9E9C: AA           	tax
  4062 08:9E9D: A9 00 00     	lda	#$0
  4063 08:9EA0: 82 88 FD     	brl	L60
  4064                        ;    	}
  4065                        	.line	581
  4066                        ;
  4067                        ;		//_MSTR_CTRL[0] |= GABE_CTRL_SDC_LED;
  4068                        ;
  4069                        ;    	/*
  4070                        ;		errorCode = pfxdosDevice->pfReader(lba,s
                    ectorBuffer);
  4071                        ;		k_debug_byte_array("pfxdosDevice->pfRead
                    er:\r\n",sectorBuffer,512);
  4072                        ;
  4073                        ;		pBoot =  (PFATBOOTSECTOR)sectorBuffer;;
  4074                        ;
  4075                        ;		k_debug_integer("pBoot->sectors_per_clus
                    ter:",pBoot->sectors_per_cluster);
  4076                        ;		k_debug_integer("pBoot->root_entry_count
                    :",pBoot->root_entry_count);
  4077                        ;		k_debug_integer("pBoot->total_sectors_16
                    :",pBoot->total_sectors_16);
  4078                        ;		k_debug_integer("pBoot->sectors_per_fat:
                    ",pBoot->sectors_per_fat);
  4079                        ;		k_debug_integer("pBoot->sectors_per_trac
                    k:",pBoot->sectors_per_track);
  4080                        ;		k_debug_nstrings("pBoot->vol_name:",pBoo
                    t->vol_name,11);
  4081                        ;		k_debug_integer("pBoot->bytes_per_sector
                    :",pBoot->bytes_per_sector);
  4082                        ;		k_debug_hex("pBoot->fat_table_count:",pB
                    oot->fat_table_count);
  4083                        ;		k_debug_integer("pBoot->bytes_per_sector
                    :",pBoot->hidden_sector_count);
  4084                        ;
  4085                        ;
  4086                        ;		if(pBoot->total_sectors_16 == 2880)
  4087                        ;			isFAT12 = TRUE;
  4088                        ;		*/
  4089                        ;		/*
  4090                        ;		if(!isFAT12)
  4091                        ;		{
  4092                        ;			pfat32 =  (PFAT32EXT)(&sectorBuf
                    fer[36]);
  4093                        ;
  4094                        ;			k_debug_long("pfat32->table_size
                    _32:",pfat32->table_size_32);
  4095                        ;			k_debug_nstrings("pfat32->volume
                    _label:",pfat32->volume_label,11);
  Mon Aug  9 2021 16:52                                                Page 79


  4096                        ;
  4097                        ;			for(x=0;x<4;x++)
  4098                        ;			{
  4099                        ;				k_debug_integer("*** par
                    tition table:",x);
  4100                        ;
  4101                        ;				pPartTable = (PPARTITION
                    TABLE)&sectorBuffer[FAT_PARTITION_TABLE_1 + (0x10 * x)];
  4102                        ;
  4103                        ;				if(pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS30 ||
  4104                        ;				   pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS33 ||
  4105                        ;				   pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS70)
  4106                        ;				{
  4107                        ;					k_debug_hex("FAT
                    16 filesystem found from partition:", pPartTable->partition_
                    type);
  4108                        ;					partitionId = x;
  4109                        ;					break;
  4110                        ;				}
  4111                        ;				else
  4112                        ;				{
  4113                        ;					k_debug_hex("***
                     pPartTable->partition_type:",pPartTable->partition_type);
  4114                        ;				}
  4115                        ;			}
  4116                        ;
  4117                        ;
  4118                        ;			memcpy(&pfxdosDevice->partitionT
                    able,&sectorBuffer[FAT_PARTITION_TABLE_1 + (0x10 * partition
                    Id)],sizeof(PARTITIONTABLE));
  4119                        ;			k_debug_hex ("***fxdosDevice fir
                    st_byte:",pfxdosDevice->partitionTable.first_byte);
  4120                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs0:",pfxdosDevice->partitionTable.start_chs[0]);
  4121                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs1:",pfxdosDevice->partitionTable.start_chs[1]);
  4122                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs2:",pfxdosDevice->partitionTable.start_chs[2]);
  4123                        ;			k_debug_hex ("***fxdosDevice par
                    tition_type:",(INT)pfxdosDevice->partitionTable.partition_ty
                    pe);
  4124                        ;			k_debug_hex ("***fxdosDevice end
                    _chs0:",pfxdosDevice->partitionTable.end_chs[0]);
  4125                        ;			k_debug_hex ("***fxdosDevice end
                    _chs1:",pfxdosDevice->partitionTable.end_chs[1]);
  4126                        ;			k_debug_hex ("***fxdosDevice end
                    _chs2:",pfxdosDevice->partitionTable.end_chs[2]);
  4127                        ;			k_debug_long("***fxdosDevice sta
                    rt_sector:",pfxdosDevice->partitionTable.start_sector);
  4128                        ;			k_debug_long("***fxdosDevice len
                    gth_sectors:",pfxdosDevice->partitionTable.length_sectors);
  4129                        ;		}
  4130                        ;		else
  4131                        ;		{
  4132                        ;			memset(&pfxdosDevice->partitionT
  Mon Aug  9 2021 16:52                                                Page 80


                    able,0,sizeof(PARTITIONTABLE));
  4133                        ;			pPartTable->start_sector = 0;
  4134                        ;		}
  4135                        ;		*/
  4136                        ;
  4137                        ;    	/*
  4138                        ;		pfxdosDevice->bsOffset = (pPartTable->st
                    art_sector * FAT_PAGE_SIZE);
  4139                        ;
  4140                        ;		pfxdosDevice->errorCode = pfxdosDevice->
                    pfReader(pfxdosDevice->bsOffset,sectorBuffer);
  4141                        ;		if(!pfxdosDevice->errorCode)
  4142                        ;		{
  4143                        ;			memcpy(&pfxdosDevice->bootSector
                    ,sectorBuffer,sizeof(FATBOOTSECTOR));
  4144                        ;
  4145                        ;			k_debug_integer("***fxdosDevice 
                    bytes_per_sector:",(INT)pfxdosDevice->bootSector.bytes_per_s
                    ector);
  4146                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_cluster:",(INT)pfxdosDevice->bootSector.sectors_
                    per_cluster);
  4147                        ;			k_debug_integer("***fxdosDevice 
                    reserved_sector_count:",(INT)pfxdosDevice->bootSector.reserv
                    ed_sector_count);
  4148                        ;			k_debug_integer("***fxdosDevice 
                    table_count:",(INT)pfxdosDevice->bootSector.fat_table_count)
                    ;
  4149                        ;			k_debug_integer("***fxdosDevice 
                    root_entry_count:",(INT)pfxdosDevice->bootSector.root_entry_
                    count);
  4150                        ;			k_debug_integer("***fxdosDevice 
                    total_sectors_16:",(INT)pfxdosDevice->bootSector.total_secto
                    rs_16);
  4151                        ;			k_debug_integer("***fxdosDevice 
                    media_type:",(INT)pfxdosDevice->bootSector.media_type);
  4152                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_fat:",(INT)pfxdosDevice->bootSector.sectors_per_
                    fat);
  4153                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_track:",(INT)pfxdosDevice->bootSector.sectors_pe
                    r_track);
  4154                        ;			k_debug_integer("***fxdosDevice 
                    head_side_count:",(INT)pfxdosDevice->bootSector.head_side_co
                    unt);
  4155                        ;			k_debug_integer("***fxdosDevice 
                    hidden_sector_count:",(INT)pfxdosDevice->bootSector.hidden_s
                    ector_count);
  4156                        ;			k_debug_integer("***fxdosDevice 
                    total_sectors_32:",(INT)pfxdosDevice->bootSector.total_secto
                    rs_32);
  4157                        ;
  4158                        ;			strncpy(pfxdosDevice->volume_nam
                    e,pfxdosDevice->bootSector.vol_name,11);
  4159                        ;			//pfxdosDevice->volume_name[11] 
                    = 0;
  4160                        ;			k_debug_nstrings("***fxdosDevice
                     Volume Name:",pfxdosDevice->volume_name,11);
  Mon Aug  9 2021 16:52                                                Page 81


  4161                        ;
  4162                        ;			pfxdosDevice->root_entry_count =
                     pfxdosDevice->bootSector.root_entry_count;
  4163                        ;
  4164                        ;			pfxdosDevice->fatTableOffset = p
                    fxdosDevice->bsOffset + (pfxdosDevice->bootSector.bytes_per_
                    sector * pfxdosDevice->bootSector.reserved_sector_count);
  4165                        ;			pfxdosDevice->rootDirSectors = p
                    fxdosDevice->bsOffset + (((ULONG)pfxdosDevice->bootSector.re
                    served_sector_count + ((ULONG)pfxdosDevice->bootSector.secto
                    rs_per_fat * (ULONG)pfxdosDevice->bootSector.fat_table_count
                    )) * (ULONG)pfxdosDevice->bootSector.bytes_per_sector);
  4166                        ;			pfxdosDevice->sectors_per_cluste
                    r = (INT)pfxdosDevice->bootSector.sectors_per_cluster;
  4167                        ;
  4168                        ;			k_debug_long("***fxdosDevice fat
                    Table:",pfxdosDevice->fatTableOffset);
  4169                        ;
  4170                        ;
  4171                        ;
  4172                        ;			if(pfxdosDevice->pfReader(pfxdos
                    Device->fatTableOffset,sectorBuffer) == 0)
  4173                        ;			{
  4174                        ;				memcpy(&pfxdosDevice->fi
                    leAllocationTable,sectorBuffer,FAT_PAGE_SIZE);
  4175                        ;			}
  4176                        ;
  4177                        ;			k_debug_long("***fxdosDevice roo
                    t offset:",pfxdosDevice->rootDirSectors);
  4178                        ;			k_debug_long("***fxdosDevice roo
                    t sizeof(FAT16ENTRY):",sizeof(FAT16ENTRY));
  4179                        ;			k_debug_long("***fxdosDevice roo
                    t root_entry_count:",pfxdosDevice->root_entry_count);
  4180                        ;			k_debug_long("***fxdosDevice roo
                    t root_entry_count/sizeof(FAT16ENTRY):",pfxdosDevice->root_e
                    ntry_count/sizeof(FAT16ENTRY));
  4181                        ;
  4182                        ;
  4183                        ;			pfxdosDevice->rootEntriesPerPage
                     = pfxdosDevice->root_entry_count/sizeof(FAT16ENTRY);
  4184                        ;
  4185                        ;			pfxdosDevice->firstDataSector = 
                    pfxdosDevice->bootSector.reserved_sector_count + (pfxdosDevi
                    ce->bootSector.fat_table_count * 512) + pfxdosDevice->rootDi
                    rSectors + ( pfxdosDevice->root_entry_count * sizeof(FAT16EN
                    TRY));
  4186                        ;			k_debug_long("***fxdosDevice roo
                    t firstDataSector:",pfxdosDevice->firstDataSector);
  4187                        ;		}
  4188                        ;		*/
  4189                        ;    }
  4190                        L10049:
  4191                        	.line	705
  4192                        ;
  4193                        ;    k_debug_nstrings("***fxdosDevice ADD DEVICE:"
                    ,pdriver->designation,3);
  4194                        L10034:
  4195                        	.line	707
  Mon Aug  9 2021 16:52                                                Page 82


  4196 08:9EA3: F4 03 00     	pea	#<$3
  4197 08:9EA6: 18           	clc
  4198 08:9EA7: A9 41 00     	lda	#$41
  4199 08:9EAA: 65 1B        	adc	<L57+pdriver_1
  4200 08:9EAC: 85 01        	sta	<R0
  4201 08:9EAE: A9 00 00     	lda	#$0
  4202 08:9EB1: 65 1D        	adc	<L57+pdriver_1+2
  4203 08:9EB3: 85 03        	sta	<R0+2
  4204 08:9EB5: D4 03        	pei	<R0+2
  4205 08:9EB7: D4 01        	pei	<R0
  4206 08:9EB9: F4 xx xx     	pea	#^L39+335
  4207 08:9EBC: F4 xx xx     	pea	#<L39+335
  4208 08:9EBF: 22 xx xx xx  	jsl	~~k_debug_nstrings
  4209                        ;    k_nodelist_addtolist(_k_dos_deviceinstance,ty
                    pe,pdriver->designation,pfxdosDevice);
  4210                        	.line	708
  4211 08:9EC3: D4 15        	pei	<L57+pfxdosDevice_1+2
  4212 08:9EC5: D4 13        	pei	<L57+pfxdosDevice_1
  4213 08:9EC7: 18           	clc
  4214 08:9EC8: A9 41 00     	lda	#$41
  4215 08:9ECB: 65 1B        	adc	<L57+pdriver_1
  4216 08:9ECD: 85 01        	sta	<R0
  4217 08:9ECF: A9 00 00     	lda	#$0
  4218 08:9ED2: 65 1D        	adc	<L57+pdriver_1+2
  4219 08:9ED4: 85 03        	sta	<R0+2
  4220 08:9ED6: D4 03        	pei	<R0+2
  4221 08:9ED8: D4 01        	pei	<R0
  4222 08:9EDA: D4 2C        	pei	<L56+type_0
  4223 08:9EDC: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  4224 08:9EDF: 48           	pha
  4225 08:9EE0: AD xx xx     	lda	|~~_k_dos_deviceinstance
  4226 08:9EE3: 48           	pha
  4227 08:9EE4: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  4228                        ;
  4229                        ;    //GABE_MSTR_CTRL[0] = GABE_MSTR_CTRL[0] & (~G
                    ABE_CTRL_SDC_LED);
  4230                        ;
  4231                        ;	return pfxdosDevice;
  4232                        	.line	712
  4233 08:9EE8: A6 15        	ldx	<L57+pfxdosDevice_1+2
  4234 08:9EEA: A5 13        	lda	<L57+pfxdosDevice_1
  4235 08:9EEC: 82 3C FD     	brl	L60
  4236                        ;}
  4237                        	.line	713
  4238                        	.endblock	713
  4239             00000028   L56	equ	40
  4240             00000005   L57	equ	5
  4241 08:9EEF:              	ends
  4242                        	efunc
  4243                        	.endfunc	713,5,40
  4244                        	.line	713
  4245                        	data
  4246                        L39:
  4247 00:00E6: 6B 5F 63 72  	db	$6B,$5F,$63,$72,$65,$61,$74,$65,$5F,$64,
                    $6F,$73,$5F,$64,$65
       00:00EA: 65 61 74 65 
       00:00EE: 5F 64 6F 73 
       00:00F2: 5F 64 65 
  Mon Aug  9 2021 16:52                                                Page 83


  4248 00:00F5: 76 69 63 65  	db	$76,$69,$63,$65,$3A,$00,$6B,$5F,$63,$72,
                    $65,$61,$74,$65,$5F
       00:00F9: 3A 00 6B 5F 
       00:00FD: 63 72 65 61 
       00:0101: 74 65 5F 
  4249 00:0104: 64 6F 73 5F  	db	$64,$6F,$73,$5F,$64,$65,$76,$69,$63,$65,
                    $3A,$46,$4F,$55,$4E
       00:0108: 64 65 76 69 
       00:010C: 63 65 3A 46 
       00:0110: 4F 55 4E 
  4250 00:0113: 44 20 45 58  	db	$44,$20,$45,$58,$49,$53,$54,$49,$4E,$47,
                    $3A,$00,$6B,$5F,$63
       00:0117: 49 53 54 49 
       00:011B: 4E 47 3A 00 
       00:011F: 6B 5F 63 
  4251 00:0122: 72 65 61 74  	db	$72,$65,$61,$74,$65,$5F,$64,$6F,$73,$5F,
                    $64,$65,$76,$69,$63
       00:0126: 65 5F 64 6F 
       00:012A: 73 5F 64 65 
       00:012E: 76 69 63 
  4252 00:0131: 65 3A 66 6F  	db	$65,$3A,$66,$6F,$75,$6E,$64,$3A,$64,$65,
                    $76,$69,$63,$65,$4E
       00:0135: 75 6E 64 3A 
       00:0139: 64 65 76 69 
       00:013D: 63 65 4E 
  4253 00:0140: 6F 64 65 3A  	db	$6F,$64,$65,$3A,$00,$6B,$5F,$63,$72,$65,
                    $61,$74,$65,$5F,$64
       00:0144: 00 6B 5F 63 
       00:0148: 72 65 61 74 
       00:014C: 65 5F 64 
  4254 00:014F: 6F 73 5F 64  	db	$6F,$73,$5F,$64,$65,$76,$69,$63,$65,$3A,
                    $66,$6F,$75,$6E,$64
       00:0153: 65 76 69 63 
       00:0157: 65 3A 66 6F 
       00:015B: 75 6E 64 
  4255 00:015E: 3A 70 64 72  	db	$3A,$70,$64,$72,$69,$76,$65,$72,$3A,$00,
                    $6B,$5F,$63,$72,$65
       00:0162: 69 76 65 72 
       00:0166: 3A 00 6B 5F 
       00:016A: 63 72 65 
  4256 00:016D: 61 74 65 5F  	db	$61,$74,$65,$5F,$64,$6F,$73,$5F,$64,$65,
                    $76,$69,$63,$65,$3A
       00:0171: 64 6F 73 5F 
       00:0175: 64 65 76 69 
       00:0179: 63 65 3A 
  4257 00:017C: 66 6F 75 6E  	db	$66,$6F,$75,$6E,$64,$3A,$70,$66,$78,$64,
                    $6F,$73,$44,$65,$76
       00:0180: 64 3A 70 66 
       00:0184: 78 64 6F 73 
       00:0188: 44 65 76 
  4258 00:018B: 69 63 65 2D  	db	$69,$63,$65,$2D,$3E,$69,$6E,$69,$74,$69,
                    $61,$6C,$69,$7A,$65
       00:018F: 3E 69 6E 69 
       00:0193: 74 69 61 6C 
       00:0197: 69 7A 65 
  4259 00:019A: 64 3A 00 6B  	db	$64,$3A,$00,$6B,$5F,$63,$72,$65,$61,$74,
                    $65,$5F,$64,$6F,$73
       00:019E: 5F 63 72 65 
  Mon Aug  9 2021 16:52                                                Page 84


       00:01A2: 61 74 65 5F 
       00:01A6: 64 6F 73 
  4260 00:01A9: 5F 64 65 76  	db	$5F,$64,$65,$76,$69,$63,$65,$3A,$66,$6F,
                    $75,$6E,$64,$3A,$64
       00:01AD: 69 63 65 3A 
       00:01B1: 66 6F 75 6E 
       00:01B5: 64 3A 64 
  4261 00:01B8: 65 76 69 63  	db	$65,$76,$69,$63,$65,$4E,$6F,$64,$65,$3A,
                    $00,$6B,$5F,$63,$72
       00:01BC: 65 4E 6F 64 
       00:01C0: 65 3A 00 6B 
       00:01C4: 5F 63 72 
  4262 00:01C7: 65 61 74 65  	db	$65,$61,$74,$65,$5F,$64,$6F,$73,$5F,$64,
                    $65,$76,$69,$63,$65
       00:01CB: 5F 64 6F 73 
       00:01CF: 5F 64 65 76 
       00:01D3: 69 63 65 
  4263 00:01D6: 3A 66 6F 75  	db	$3A,$66,$6F,$75,$6E,$64,$3A,$70,$64,$72,
                    $69,$76,$65,$72,$3A
       00:01DA: 6E 64 3A 70 
       00:01DE: 64 72 69 76 
       00:01E2: 65 72 3A 
  4264 00:01E5: 00 6B 5F 63  	db	$00,$6B,$5F,$63,$72,$65,$61,$74,$65,$5F,
                    $64,$6F,$73,$5F,$64
       00:01E9: 72 65 61 74 
       00:01ED: 65 5F 64 6F 
       00:01F1: 73 5F 64 
  4265 00:01F4: 65 76 69 63  	db	$65,$76,$69,$63,$65,$3A,$66,$6F,$75,$6E,
                    $64,$3A,$70,$66,$78
       00:01F8: 65 3A 66 6F 
       00:01FC: 75 6E 64 3A 
       00:0200: 70 66 78 
  4266 00:0203: 64 6F 73 44  	db	$64,$6F,$73,$44,$65,$76,$69,$63,$65,$2D,
                    $3E,$69,$6E,$69,$74
       00:0207: 65 76 69 63 
       00:020B: 65 2D 3E 69 
       00:020F: 6E 69 74 
  4267 00:0212: 69 61 6C 69  	db	$69,$61,$6C,$69,$7A,$65,$64,$3A,$00,$6B,
                    $5F,$63,$72,$65,$61
       00:0216: 7A 65 64 3A 
       00:021A: 00 6B 5F 63 
       00:021E: 72 65 61 
  4268 00:0221: 74 65 5F 64  	db	$74,$65,$5F,$64,$6F,$73,$5F,$64,$65,$76,
                    $69,$63,$65,$20,$73
       00:0225: 6F 73 5F 64 
       00:0229: 65 76 69 63 
       00:022D: 65 20 73 
  4269 00:0230: 69 7A 65 3A  	db	$69,$7A,$65,$3A,$00,$2A,$2A,$2A,$66,$78,
                    $64,$6F,$73,$44,$65
       00:0234: 00 2A 2A 2A 
       00:0238: 66 78 64 6F 
       00:023C: 73 44 65 
  4270 00:023F: 76 69 63 65  	db	$76,$69,$63,$65,$20,$41,$44,$44,$20,$44,
                    $45,$56,$49,$43,$45
       00:0243: 20 41 44 44 
       00:0247: 20 44 45 56 
       00:024B: 49 43 45 
  4271 00:024E: 3A 00        	db	$3A,$00
  Mon Aug  9 2021 16:52                                                Page 85


  4272 00:0250:              	ends
  4273                        ;
  4274                        ;PFXNODELIST k_read_dos_directory(PFXDOSDEVICE pfx
                    dosDevice)
  4275                        ;{
  4276                        	.line	715
  4277                        	.line	716
  4278                        	FXDOS
  4279                        	xdef	~~k_read_dos_directory
  4280                        	func
  4281                        	.function	716
  4282                        ~~k_read_dos_directory:
  4283                        	longa	on
  4284                        	longi	on
  4285 08:9EEF: 3B           	tsc
  4286 08:9EF0: 38           	sec
  4287 08:9EF1: E9 00 00     	sbc	#L74
  4288 08:9EF4: 1B           	tcs
  4289 08:9EF5: 0B           	phd
  4290 08:9EF6: 5B           	tcd
  4291             00000004   pfxdosDevice_0	set	4
  4292                        	.block	716
  4293                        ;	return NULL;
  4294                        	.sym	pfxdosDevice,4,138,6,32,127
  4295                        	.line	717
  4296 08:9EF7: A9 00 00     	lda	#$0
  4297 08:9EFA: AA           	tax
  4298 08:9EFB: A9 00 00     	lda	#$0
  4299                        L77:
  4300 08:9EFE: A8           	tay
  4301 08:9EFF: A5 02        	lda	<L74+2
  4302 08:9F01: 85 06        	sta	<L74+2+4
  4303 08:9F03: A5 01        	lda	<L74+1
  4304 08:9F05: 85 05        	sta	<L74+1+4
  4305 08:9F07: 2B           	pld
  4306 08:9F08: 3B           	tsc
  4307 08:9F09: 18           	clc
  4308 08:9F0A: 69 04 00     	adc	#L74+4
  4309 08:9F0D: 1B           	tcs
  4310 08:9F0E: 98           	tya
  4311 08:9F0F: 6B           	rtl
  4312                        ;}
  4313                        	.line	718
  4314                        	.endblock	718
  4315             00000000   L74	equ	0
  4316             00000001   L75	equ	1
  4317 08:9F10:              	ends
  4318                        	efunc
  4319                        	.endfunc	718,1,0
  4320                        	.line	718
  4321                        ;/*
  4322                        ;LPCHAR _k_dos_alloc_filename(LPCHAR filename11)
  4323                        ;{
  4324                        ;	UINT index = 0;
  4325                        ;	//UINT p = 0;
  4326                        ;	//UINT dot = 0;
  4327                        ;	LPCHAR lpName = NULL;
  4328                        ;	CHAR ftmp[4] = {0,0,0,0};
  Mon Aug  9 2021 16:52                                                Page 86


  4329                        ;
  4330                        ;	//k_debug_string("_k_dos_alloc_filename:enter\r\
                    n");
  4331                        ;
  4332                        ;	lpName = (LPCHAR)k_mem_allocate_heap(16);
  4333                        ;	if(lpName!=NULL)
  4334                        ;	{
  4335                        ;		//k_debug_string("_k_dos_alloc_filename:
                    copy\r\n");
  4336                        ;		//memset(lpName,0,16);
  4337                        ;		//memcpy(lpName,filename11,8);
  4338                        ;		for(index=0;index<16;index++)
  4339                        ;					lpName[index] = 
                    0;
  4340                        ;
  4341                        ;		for(index=0;index<8;index++)
  4342                        ;			lpName[index] = filename11[index
                    ];
  4343                        ;
  4344                        ;
  4345                        ;		lpName = k_string_rtrim(lpName);
  4346                        ;		if(filename11[8]!=' ')
  4347                        ;		{
  4348                        ;			strcat(lpName,".");
  4349                        ;
  4350                        ;			for(index=0;index<3;index++)
  4351                        ;				ftmp[index] = filename11
                    [index + 8];
  4352                        ;
  4353                        ;			strcat(lpName,ftmp);
  4354                        ;		}
  4355                        ;
  4356                        ;		//k_debug_string("_k_ds_alloc_filename:"
                    );
  4357                        ;		//k_debug_string(lpName);
  4358                        ;		//k_debug_string("\r\n");
  4359                        ;	}
  4360                        ;
  4361                        ;	return lpName;
  4362                        ;}
  4363                        ;
  4364                        ;
  4365                        ;
  4366                        ;VOID  k_dos_dealloc_filelist(PFXNODE plist)
  4367                        ;{
  4368                        ;	PFXNODE p   = plist;
  4369                        ;	PFXNODE tmp = NULL;
  4370                        ;
  4371                        ;	while(p)
  4372                        ;	{
  4373                        ;		tmp = p->next;
  4374                        ;
  4375                        ;		k_mem_deallocate_heap(((PFILEINFO)p->dat
                    a)->pFilename);
  4376                        ;		k_mem_deallocate_heap(p->data);
  4377                        ;		k_mem_deallocate_heap(p);
  4378                        ;
  4379                        ;		p = tmp;
  Mon Aug  9 2021 16:52                                                Page 87


  4380                        ;	}
  4381                        ;}
  4382                        ;
  4383                        ;PFILEINFO _k_dos_alloc_fileinfo(FX_FAT_DIR_INFO F
                    AR *direntry)
  4384                        ;{
  4385                        ;	PFILEINFO pfi = NULL;
  4386                        ;
  4387                        ;	//k_debug_string("_k_dos_alloc_fileinfo:enter\r\
                    n");
  4388                        ;
  4389                        ;	pfi = k_mem_allocate_heap(sizeof(FILEINFO));
  4390                        ;	if(pfi!=NULL)
  4391                        ;	{
  4392                        ;		pfi->type  		 = direntry->DIR
                    _Attr;
  4393                        ;		pfi->lSize 		 = direntry->DIR
                    _FileSize;
  4394                        ;		pfi->lchangeDate = direntry->DIR_LstAccD
                    ate;
  4395                        ;		pfi->lcreateDate = direntry->DIR_CrtDate
                    ;
  4396                        ;		pfi->pFilename   = _k_dos_alloc_filename
                    (direntry->DIR_Name);
  4397                        ;	}
  4398                        ;
  4399                        ;	return pfi;
  4400                        ;}
  4401                        ;
  4402                        ;
  4403                        ;BOOL k_dos_foreach_file(LPVOID ctx,LPVOID pdata)
  4404                        ;{
  4405                        ;	BOOL bBreak = FALSE;
  4406                        ;
  4407                        ;	PFAT16ENTRYLONG entry = (PFAT16ENTRYLONG)pdata;
  4408                        ;	if(pdata)
  4409                        ;	{
  4410                        ;		if(entry->plongfileName && ctx)
  4411                        ;		{
  4412                        ;			//k_debug_strings("k_dos_foreach
                    _file:",entry->plongfileName);
  4413                        ;			//k_debug_strings("k_dos_foreach
                    _file compare:",(LPSTR)ctx);
  4414                        ;
  4415                        ;			bBreak = (strcmp(ctx,entry->plon
                    gfileName) == 0);
  4416                        ;
  4417                        ;			//k_debug_integer("k_dos_foreach
                    _file compare:",bBreak);
  4418                        ;		}
  4419                        ;	}
  4420                        ;
  4421                        ;	return bBreak;
  4422                        ;}
  4423                        ;
  4424                        ;LPSTR k_dos_alloc_short_name(PFAT16ENTRYLONG entr
                    y)
  4425                        ;{
  Mon Aug  9 2021 16:52                                                Page 88


  4426                        ;	int i = 0;
  4427                        ;	// 01234567.901N
  4428                        ;	entry->plongfileName = k_mem_allocate_heap(14);
  4429                        ;	memset(entry->plongfileName,0,14);
  4430                        ;
  4431                        ;
  4432                        ;	memcpy(entry->plongfileName,entry->filename,8);
  4433                        ;	for(i=0;i<8;i++)
  4434                        ;	{
  4435                        ;		if(entry->plongfileName[i] == ' ')
  4436                        ;			break;
  4437                        ;	}
  4438                        ;	//k_debug_strings("k_dos_alloc_short_name:filena
                    me:",entry->plongfileName);
  4439                        ;	//k_debug_integer("k_dos_alloc_short_name:i:",i)
                    ;
  4440                        ;
  4441                        ;	if(entry->ext[0]!=' ')
  4442                        ;	{
  4443                        ;		entry->plongfileName[i] = '.';
  4444                        ;		memcpy(&(entry->plongfileName[i+1]),entr
                    y->ext,3);
  4445                        ;		for(i=0;i<14;i++)
  4446                        ;		{
  4447                        ;			if(entry->plongfileName[i] == ' 
                    ')
  4448                        ;				entry->plongfileName[i] 
                    = 0;
  4449                        ;		}
  4450                        ;	}
  4451                        ;	//entry->plongfileName[8] = '.';
  4452                        ;	//entry->plongfileName[12] = 0;
  4453                        ;
  4454                        ;	//k_debug_strings("k_dos_alloc_short_name:",entr
                    y->plongfileName);
  4455                        ;
  4456                        ;	return entry->plongfileName;
  4457                        ;}
  4458                        ;
  4459                        ;ULONG k_dos_get_name(PFAT16ENTRYLONG entry,LPCHAR
                     pbuffer)
  4460                        ;{
  4461                        ;	ULONG fileOffset = 0L;
  4462                        ;
  4463                        ;	ULONG RootDirSectors;
  4464                        ;	ULONG Cluster2SectorNumber;
  4465                        ;	ULONG ClusterSectorNumber;
  4466                        ;	ULONG ClusterByteNumber = 0;
  4467                        ;
  4468                        ;
  4469                        ;	LFN* plfn = NULL;
  4470                        ;
  4471                        ;	CHAR mbsBuffer[15];
  4472                        ;
  4473                        ;
  4474                        ;	if(!pbuffer)
  4475                        ;		pbuffer = mbsBuffer;
  4476                        ;
  Mon Aug  9 2021 16:52                                                Page 89


  4477                        ;    switch(entry->filename[0])
  4478                        ;	{
  4479                        ;    case 0x00:
  4480                        ;    	//k_debug_string("Unused\r\n");
  4481                        ;        return 0; // unused entry
  4482                        ;    case 0xE5:
  4483                        ;
  4484                        ;        return 0;
  4485                        ;    case 0x05:
  4486                        ;    	//k_debug_string("File 0x05:");
  4487                        ;    	//k_debug_nstring(entry->filename+1,7);
  4488                        ;    	//k_debug_nstring(entry->ext,3);
  4489                        ;    	//k_debug_string("\r\n");
  4490                        ;        //printf("File starting with 0xE5: [%c%.7
                    s.%.3s]\n", 0xE5, entry->filename+1, entry->ext);
  4491                        ;        break;
  4492                        ;    case 0x2E:
  4493                        ;    	//k_debug_string("DIR:");
  4494                        ;    	//k_debug_nstring(entry->filename+1,8);
  4495                        ;    	//k_debug_nstring(entry->ext,3);
  4496                        ;    	//k_debug_string("\r\n");
  4497                        ;        //printf("Directory: [%.8s.%.3s]\n", entr
                    y->filename, entry->ext);
  4498                        ;    	k_dos_alloc_short_name(entry);
  4499                        ;        break;
  4500                        ;    default:
  4501                        ;    	if(entry->attributes == 0x10)
  4502                        ;    	{
  4503                        ;			k_debug_string("DIRECTORY:");
  4504                        ;			k_debug_nstring(entry->filename,
                    8);
  4505                        ;			k_debug_nstring(entry->ext,3);
  4506                        ;			k_debug_string("\r\n");
  4507                        ;
  4508                        ;			k_dos_alloc_short_name(entry);
  4509                        ;
  4510                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  4511                        ;
  4512                        ;    	}
  4513                        ;    	else if(entry->attributes == 0x08)
  4514                        ;		{
  4515                        ;			k_debug_string("VOLUME NAME:");
  4516                        ;			k_debug_nstring(entry->filename,
                    8);
  4517                        ;			k_debug_nstring(entry->ext,3);
  4518                        ;			k_debug_string("\r\n");
  4519                        ;
  4520                        ;			k_dos_alloc_short_name(entry);
  4521                        ;
  4522                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  4523                        ;
  4524                        ;		}
  4525                        ;    	else if(entry->attributes == 0x0F)
  4526                        ;		{
  4527                        ;			k_debug_string("LONG NAME:");
  4528                        ;			//k_debug_nstring(entry->filenam
  Mon Aug  9 2021 16:52                                                Page 90


                    e,8);
  4529                        ;			//k_debug_nstring(entry->ext,3);
  4530                        ;
  4531                        ;			plfn = (LFN*)entry;
  4532                        ;
  4533                        ;			//k_debug_byte_array("LONG BYTES
                    :",(BYTE FAR *)plfn,32);
  4534                        ;
  4535                        ;
  4536                        ;			if(plfn->sequenceNo & 0x40)
  4537                        ;			{
  4538                        ;				entry->plongfileName = (
                    LPVOID)0xffffffff;
  4539                        ;				longnamecount = (plfn->s
                    equenceNo - 0x41);
  4540                        ;				//k_debug_integer("longn
                    amecount:",longnamecount);
  4541                        ;				k_debug_string("SEQ:0x40
                    ");
  4542                        ;
  4543                        ;				memset(longnameBuffer,0,
                    255);
  4544                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13]     ,k_wcstombs(plfn->fileName_Part1,mbsB
                    uffer,5),5);
  4545                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 5] ,k_wcstombs(plfn->fileName_Part2,mbsB
                    uffer,6),6);
  4546                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 11],k_wcstombs(plfn->fileName_Part3,mbsB
                    uffer,2),2);
  4547                        ;			}
  4548                        ;			else
  4549                        ;			{
  4550                        ;				longnamecount = plfn->se
                    quenceNo - 1 ;
  4551                        ;				//k_debug_integer("longn
                    amecount:",longnamecount);
  4552                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13]     ,k_wcstombs(plfn->fileName_Part1,mbsB
                    uffer,5),5);
  4553                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 5] ,k_wcstombs(plfn->fileName_Part2,mbsB
                    uffer,6),6);
  4554                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 11],k_wcstombs(plfn->fileName_Part3,mbsB
                    uffer,2),2);
  4555                        ;
  4556                        ;				if(plfn->sequenceNo == 1
                    )
  4557                        ;				{
  4558                        ;					//k_debug_string
                    ("Unicodename:");
  4559                        ;
  4560                        ;					entry->plongfile
                    Name = k_mem_allocate_heap(strlen(longnameBuffer) + 1);
  4561                        ;					strcpy(entry->pl
                    ongfileName,(LPCSTR)longnameBuffer);
  Mon Aug  9 2021 16:52                                                Page 91


  4562                        ;
  4563                        ;					k_debug_string(e
                    ntry->plongfileName);
  4564                        ;				}
  4565                        ;			}
  4566                        ;
  4567                        ;			k_debug_string("\r\n");
  4568                        ;		}
  4569                        ;    	else
  4570                        ;    	{
  4571                        ;    		if(k_user_IsOSDebug())
  4572                        ;    		{
  4573                        ;				k_debug_string("SHORT NA
                    ME:");
  4574                        ;				k_debug_nstring(entry->f
                    ilename,8);
  4575                        ;				k_debug_nstring(entry->e
                    xt,3);
  4576                        ;				k_debug_long(" SIZE:",en
                    try->file_size);
  4577                        ;    		}
  4578                        ;			//k_debug_hex("\tAttributes:",en
                    try->attributes);
  4579                        ;			//k_debug_integer("\tStart Clust
                    er:",entry->starting_cluster);
  4580                        ;			k_dos_alloc_short_name(entry);
  4581                        ;
  4582                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  4583                        ;
  4584                        ;			ClusterByteNumber = getClusterLo
                    cationByIndex(entry->starting_cluster);
  4585                        ;    	}
  4586                        ;    }
  4587                        ;
  4588                        ;    return ClusterByteNumber;
  4589                        ;}
  4590                        ;
  4591                        ;void k_dos_deallocate_long_entry(LPCSTR name,LPVO
                    ID pdata)
  4592                        ;{
  4593                        ;	PFAT16ENTRYLONG entry = (PFAT16ENTRYLONG)pdata;
  4594                        ;
  4595                        ;	//k_debug_strings("k_dos_deallocate_long_entry n
                    ame:",(LPSTR)name);
  4596                        ;
  4597                        ;	if(entry)
  4598                        ;	{
  4599                        ;		//k_debug_pointer("k_dos_deallocate_long
                    _entry ptr:",(LPSTR)entry->plongfileName);
  4600                        ;		if(entry->plongfileName)
  4601                        ;			k_mem_deallocate_heap(entry->plo
                    ngfileName);
  4602                        ;
  4603                        ;		k_mem_deallocate_heap(entry);
  4604                        ;	}
  4605                        ;
  4606                        ;	//k_debug_string("k_dos_deallocate_long_exit\r\n
  Mon Aug  9 2021 16:52                                                Page 92


                    ");
  4607                        ;}
  4608                        ;
  4609                        ;UINT k_dos_read_file(PFXDOSDEVICE pfxdosDevice,LP
                    CSTR fileName)
  4610                        ;{
  4611                        ;	UINT fileSize = 0;
  4612                        ;	ULONG next = 0;
  4613                        ;	UINT pageSize = 0;
  4614                        ;	PFXNODELIST fileList = NULL;
  4615                        ;	PFXNODE file = NULL;
  4616                        ;	PBYTE buffer = NULL;
  4617                        ;
  4618                        ;	PFAT16ENTRYLONG pentry = NULL;
  4619                        ;
  4620                        ;
  4621                        ;	fileList = k_read_dos_directory(pfxdosDevice);
  4622                        ;	if(fileList)
  4623                        ;	{
  4624                        ;
  4625                        ;		file = k_nodelist_foreach_until_listdata
                    (fileList,(LPVOID)fileName,k_dos_foreach_file);
  4626                        ;		if(file)
  4627                        ;		{
  4628                        ;			pentry = ((PFAT16ENTRYLONG)file-
                    >data);
  4629                        ;
  4630                        ;			k_debug_strings("k_dos_read_file
                     MATCH:file:",pentry->plongfileName);
  4631                        ;			fileSize = pentry->file_size;
  4632                        ;
  4633                        ;			pageSize = 512 * (fileSize/512 +
                     1);
  4634                        ;			buffer = k_mem_allocate_heap(pag
                    eSize);
  4635                        ;
  4636                        ;			k_debug_integer("pentry->startin
                    g_cluster:",pentry->starting_cluster);
  4637                        ;
  4638                        ;			next = pfxdosDevice->fileAllocat
                    ionTable[pentry->starting_cluster];
  4639                        ;
  4640                        ;			k_debug_integer("pentry->next:",
                    next);
  4641                        ;			//k_debug_integer("pfxdosDevice-
                    >fileAllocationTable[next]:",pfxdosDevice->fileAllocationTab
                    le[next]);
  4642                        ;
  4643                        ;			while(next!=65528L && next!=0L &
                    & next!=65535L)
  4644                        ;			{
  4645                        ;
  4646                        ;				k_debug_integer("k_dos_r
                    ead_file:next1:",next);
  4647                        ;
  4648                        ;				if(next!=65528L && next!
                    =0L && next!=65535L)
  4649                        ;				{
  Mon Aug  9 2021 16:52                                                Page 93


  4650                        ;					k_debug_integer(
                    "k_dos_read_file:pageSize:",pageSize);
  4651                        ;
  4652                        ;
  4653                        ;					//readClusterToM
                    emory(getClusterLocationByIndex(next) + pfxdosDevice->bsOffs
                    et,pfxdosDevice->sectors_per_cluster,buffer,pentry->file_siz
                    e);
  4654                        ;					//readSDSector(o
                    ffset + (pfxdosDevice->sectors_per_cluster * 1) + read,buffe
                    r);
  4655                        ;
  4656                        ;					//k_debug_long("
                    k_dos_read_file:getClusterLocationByIndex:0x210000:",0x21000
                    0);
  4657                        ;
  4658                        ;
  4659                        ;					k_debug_long("k_
                    dos_read_file:getDeviceClusterLocationByIndex1:",getDeviceCl
                    usterLocationByIndex(pfxdosDevice,next));
  4660                        ;					k_debug_long("k_
                    dos_read_file:getDeviceClusterLocationByIndex2:",getDeviceCl
                    usterLocationByIndex(pfxdosDevice,next) + pfxdosDevice->bsOf
                    fset);
  4661                        ;
  4662                        ;					//k_debug_long("
                    k_dos_read_file:getClusterLocationByIndex3:",getClusterLocat
                    ionByIndex(next) + pfxdosDevice->bsOffset);
  4663                        ;
  4664                        ;
  4665                        ;					//pfxdosDevice->
                    pfReader((getClusterLocationByIndex(next)+ pfxdosDevice->bsO
                    ffset) * 512,buffer);
  4666                        ;					//pfxdosDevice->
                    pfReader(getDeviceClusterLocationByIndex(pfxdosDevice,next) 
                    / 512 ,buffer);
  4667                        ;
  4668                        ;					pfxdosDevice->pf
                    Reader(pfxdosDevice->firstDataSector + (next + pfxdosDevice-
                    >sectors_per_cluster) ,buffer);
  4669                        ;
  4670                        ;
  4671                        ;					k_debug_byte_arr
                    ay("k_dos_read_file:buffer:\r\n",buffer,512);
  4672                        ;
  4673                        ;					next = pfxdosDev
                    ice->fileAllocationTable[next];
  4674                        ;
  4675                        ;					k_debug_integer(
                    "k_dos_read_file:next2:",next);
  4676                        ;					k_debug_long("k_
                    dos_read_file:next512:",next * 512);
  4677                        ;				}
  4678                        ;			}
  4679                        ;
  4680                        ;			k_mem_deallocate_heap(buffer);
  4681                        ;		}
  4682                        ;
  Mon Aug  9 2021 16:52                                                Page 94


  4683                        ;		k_nodelist_deallocate_list(fileList);
  4684                        ;	}
  4685                        ;
  4686                        ;
  4687                        ;	k_debug_integer("k_dos_read_file exit:fileSize:"
                    ,fileSize);
  4688                        ;
  4689                        ;	return fileSize;
  4690                        ;}
  4691                        ;
  4692                        ;PFXNODELIST k_read_dos_directory(PFXDOSDEVICE pfx
                    dosDevice)
  4693                        ;{
  4694                        ;	ULONG x = 0;
  4695                        ;	ULONG i = 0;
  4696                        ;	ULONG check = 0L;
  4697                        ;	ULONG fileOffset;
  4698                        ;	//PFAT16ENTRY     pentry     = NULL;
  4699                        ;	PFAT16ENTRYLONG  pentrylong = NULL;
  4700                        ;
  4701                        ;	PFXNODELIST plist   = NULL;
  4702                        ;
  4703                        ;	unsigned long rootDirSectors = pfxdosDevice->roo
                    tDirSectors;
  4704                        ;
  4705                        ;	k_debug_nstrings("k_read_dos_directory volume:",
                    pfxdosDevice->root_volume_name,11);
  4706                        ;
  4707                        ;	if(pfxdosDevice->initialized)
  4708                        ;	{
  4709                        ;		plist = k_nodelist_allocate_list("curren
                    tDirectory",k_dos_deallocate_long_entry);
  4710                        ;		if(plist)
  4711                        ;		{
  4712                        ;			for(i=0; i<pfxdosDevice->rootEnt
                    riesPerPage; i++)
  4713                        ;			{
  4714                        ;				if(pfxdosDevice->pfReade
                    r(rootDirSectors,sectorBuffer) == 0)
  4715                        ;				{
  4716                        ;					for(x=0; x<pfxdo
                    sDevice->rootEntriesPerPage; x++)
  4717                        ;					{
  4718                        ;						pentrylo
                    ng = (PFAT16ENTRYLONG)k_mem_allocate_heap(sizeof(FAT16ENTRYL
                    ONG));
  4719                        ;						if(pentr
                    ylong)
  4720                        ;						{
  4721                        ;							
                    memset(pentrylong,0,sizeof(FAT16ENTRYLONG));
  4722                        ;							
                    memcpy(pentrylong,(PFAT16ENTRY)&sectorBuffer[x * sizeof(FAT1
                    6ENTRY)],sizeof(FAT16ENTRY));
  4723                        ;							
                    pentrylong->plongfileName = NULL;
  4724                        ;
  4725                        ;							
  Mon Aug  9 2021 16:52                                                Page 95


                    check = k_dos_get_name(pentrylong,NULL);
  4726                        ;
  4727                        ;							
                    if(check > 0 && k_user_IsOSDebug())
  4728                        ;							
                    {
  4729                        ;							
                    	k_debug_long("k_dos_get_name check:",check);
  4730                        ;							
                    	//fileOffset = ((pentrylong->starting_cluster - 2) * 16)
                     + (8 + (2 * 240)  + ( ((512 * 32) + (512 - 1)) / 512 ));
  4731                        ;							
                    	//k_debug_long("fileOffset:",fileOffset);
  4732                        ;							
                    }
  4733                        ;							
                    //print_file_info((PFAT16ENTRY)pentrylong);
  4734                        ;
  4735                        ;							
                    if(pentrylong->plongfileName && pentrylong->plongfileName!=(
                    LPSTR)0xffffffff)
  4736                        ;							
                    {
  4737                        ;							
                    	k_nodelist_addtolist(plist,PFXNODE_FILE_PATH_TYPE,pentry
                    long->plongfileName,pentrylong);
  4738                        ;							
                    	//k_debug_strings("k_read_dos_directory dealloc pentrylo
                    ng1:",pentrylong);
  4739                        ;							
                    	//k_debug_pointer("k_read_dos_directory dealloc pentrylo
                    ng1:",pentrylong);
  4740                        ;							
                    	//k_mem_deallocate_heap(pentrylong->plongfileName);
  4741                        ;							
                    	//pentrylong->plongfileName = NULL;
  4742                        ;							
                    	//k_mem_deallocate_heap(pentrylong);
  4743                        ;							
                    }
  4744                        ;							
                    else
  4745                        ;							
                    {
  4746                        ;							
                    	//k_debug_pointer("k_read_dos_directory dealloc pentrylo
                    ng2:",pentrylong);
  4747                        ;							
                    	k_mem_deallocate_heap(pentrylong);
  4748                        ;							
                    }
  4749                        ;						}
  4750                        ;					}
  4751                        ;				}
  4752                        ;				rootDirSectors+=512;
  4753                        ;			}
  4754                        ;		}
  4755                        ;	}
  Mon Aug  9 2021 16:52                                                Page 96


  4756                        ;
  4757                        ;
  4758                        ;
  4759                        ;	return plist;
  4760                        ;}
  4761                        ;
  4762                        ;ULONG getDeviceClusterLocationByIndex(PFXDOSDEVIC
                    E pfxdosDevice,ULONG starting_cluster)
  4763                        ;{
  4764                        ;	ULONG rootDirSectors = 0L;
  4765                        ;	ULONG cluster2SectorNumber = 0L;
  4766                        ;	ULONG clusterSectorNumber = 0L;
  4767                        ;	ULONG clusterByteNumber = 0L;
  4768                        ;
  4769                        ;	ULONG firstDataSector = 0L;
  4770                        ;
  4771                        ;
  4772                        ;
  4773                        ;
  4774                        ;
  4775                        ;	firstDataSector = pfxdosDevice->bootSector.reser
                    ved_sector_count + (pfxdosDevice->bootSector.fat_table_count
                     * 512) + pfxdosDevice->rootDirSectors;
  4776                        ;
  4777                        ;	k_debug_long("firstDataSector:",firstDataSector)
                    ;
  4778                        ;
  4779                        ;	clusterSectorNumber = ((starting_cluster - 2) * 
                    pfxdosDevice->sectors_per_cluster) + firstDataSector;
  4780                        ;
  4781                        ;	k_debug_long("Cluster Offset Calculated:",cluste
                    rSectorNumber);
  4782                        ;
  4783                        ;	k_debug_long("FAT Entry:",((UINT*)(&pfxdosDevice
                    ->fileAllocationTable))[starting_cluster]);
  4784                        ;
  4785                        ;	rootDirSectors = (pfxdosDevice->bootSector.reser
                    ved_sector_count * pfxdosDevice->root_entry_count)  / pfxdos
                    Device->bootSector.bytes_per_sector;
  4786                        ;
  4787                        ;
  4788                        ;	cluster2SectorNumber =  8 + (2 * 240) + rootDirS
                    ectors;
  4789                        ;	clusterSectorNumber =  ((starting_cluster - 2) *
                     16) + cluster2SectorNumber;
  4790                        ;	k_debug_long("clusterSectorNumber:",clusterSecto
                    rNumber);
  4791                        ;
  4792                        ;	clusterByteNumber = clusterSectorNumber * 512;
  4793                        ;
  4794                        ;	return clusterByteNumber;
  4795                        ;}
  4796                        ;
  4797                        ;
  4798                        ;ULONG getClusterLocationByIndex(ULONG starting_cl
                    uster)
  4799                        ;{
  4800                        ;	ULONG rootDirSectors;
  Mon Aug  9 2021 16:52                                                Page 97


  4801                        ;	ULONG cluster2SectorNumber;
  4802                        ;	ULONG clusterSectorNumber;
  4803                        ;	ULONG clusterByteNumber = 0;
  4804                        ;
  4805                        ;	rootDirSectors = (32 * 512)  / 512;
  4806                        ;
  4807                        ;	cluster2SectorNumber = 8 + (2 * 240) + rootDirSe
                    ctors;
  4808                        ;	clusterSectorNumber =  ((starting_cluster - 2) *
                     16) + cluster2SectorNumber;
  4809                        ;	clusterByteNumber = clusterSectorNumber * 512;
  4810                        ;
  4811                        ;	return clusterByteNumber;
  4812                        ;}
  4813                        ;
  4814                        ;
  4815                        ;VOID k_GetDirectory(VOID)
  4816                        ;{
  4817                        ;	PFXZEROPAGE zp = k_getZeroPage();
  4818                        ;
  4819                        ;
  4820                        ;}
  4821                        ;*/
  4822                        ;
  4823                        ;VOID k_dos_deallocate_fileinfo(LPCSTR name,LPVOID
                     pdata)
  4824                        ;{
  4825                        	.line	1221
  4826                        	.line	1222
  4827                        	FXDOS
  4828                        	xdef	~~k_dos_deallocate_fileinfo
  4829                        	func
  4830                        	.function	1222
  4831                        ~~k_dos_deallocate_fileinfo:
  4832                        	longa	on
  4833                        	longi	on
  4834 08:9F10: 3B           	tsc
  4835 08:9F11: 38           	sec
  4836 08:9F12: E9 00 00     	sbc	#L78
  4837 08:9F15: 1B           	tcs
  4838 08:9F16: 0B           	phd
  4839 08:9F17: 5B           	tcd
  4840             00000004   name_0	set	4
  4841             00000008   pdata_0	set	8
  4842                        	.block	1222
  4843                        ;
  4844                        ;}
  4845                        	.sym	name,4,142,6,32
  4846                        	.sym	pdata,8,129,6,32
  4847                        	.line	1224
  4848                        L81:
  4849 08:9F18: A5 02        	lda	<L78+2
  4850 08:9F1A: 85 0A        	sta	<L78+2+8
  4851 08:9F1C: A5 01        	lda	<L78+1
  4852 08:9F1E: 85 09        	sta	<L78+1+8
  4853 08:9F20: 2B           	pld
  4854 08:9F21: 3B           	tsc
  4855 08:9F22: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 98


  4856 08:9F23: 69 08 00     	adc	#L78+8
  4857 08:9F26: 1B           	tcs
  4858 08:9F27: 6B           	rtl
  4859                        	.endblock	1224
  4860             00000000   L78	equ	0
  4861             00000001   L79	equ	1
  4862 08:9F28:              	ends
  4863                        	efunc
  4864                        	.endfunc	1224,1,0
  4865                        	.line	1224
  4866                        ;
  4867                        ;PFXNODELIST k_dos_findfiles_to_nodes(LPCSTR path)
  4868                        ;{
  4869                        	.line	1226
  4870                        	.line	1227
  4871                        	FXDOS
  4872                        	xdef	~~k_dos_findfiles_to_nodes
  4873                        	func
  4874                        	.function	1227
  4875                        ~~k_dos_findfiles_to_nodes:
  4876                        	longa	on
  4877                        	longi	on
  4878 08:9F28: 3B           	tsc
  4879 08:9F29: 38           	sec
  4880 08:9F2A: E9 1E 00     	sbc	#L82
  4881 08:9F2D: 1B           	tcs
  4882 08:9F2E: 0B           	phd
  4883 08:9F2F: 5B           	tcd
  4884             00000004   path_0	set	4
  4885                        	.block	1227
  4886                        ;	DIR *dir;
  4887                        ;	FATFS *fs = NULL;
  4888                        ;	FIL *f = NULL;
  4889                        ;	FILINFO *fileInfo;
  4890                        ;	FRESULT fr = 0;
  4891                        ;
  4892                        ;	LPCSTR drive = NULL;
  4893                        ;
  4894                        ;	PFXNODELIST pcurrentDirectory = NULL;
  4895                        ;
  4896                        ;
  4897                        ;	drive = k_string_copy_to_delimiter(path,':');
  4898             00000000   dir_1	set	0
  4899             00000004   fs_1	set	4
  4900             00000008   f_1	set	8
  4901             0000000C   fileInfo_1	set	12
  4902             00000010   fr_1	set	16
  4903             00000012   drive_1	set	18
  4904             00000016   pcurrentDirectory_1	set	22
  4905                        	.sym	dir,0,138,1,32,87
  4906                        	.sym	fs,4,138,1,32,84
  4907                        	.sym	f,8,138,1,32,86
  4908                        	.sym	fileInfo,12,138,1,32,88
  4909                        	.sym	fr,16,5,1,16
  4910                        	.sym	drive,18,142,1,32
  4911                        	.sym	pcurrentDirectory,22,138,1,32,6
  4912                        	.sym	path,4,142,6,32
  4913 08:9F30: 64 09        	stz	<L83+fs_1
  Mon Aug  9 2021 16:52                                                Page 99


  4914 08:9F32: 64 0B        	stz	<L83+fs_1+2
  4915 08:9F34: 64 0D        	stz	<L83+f_1
  4916 08:9F36: 64 0F        	stz	<L83+f_1+2
  4917 08:9F38: 64 15        	stz	<L83+fr_1
  4918 08:9F3A: 64 17        	stz	<L83+drive_1
  4919 08:9F3C: 64 19        	stz	<L83+drive_1+2
  4920 08:9F3E: 64 1B        	stz	<L83+pcurrentDirectory_1
  4921 08:9F40: 64 1D        	stz	<L83+pcurrentDirectory_1+2
  4922                        	.line	1239
  4923 08:9F42: F4 3A 00     	pea	#<$3a
  4924 08:9F45: D4 24        	pei	<L82+path_0+2
  4925 08:9F47: D4 22        	pei	<L82+path_0
  4926 08:9F49: 22 xx xx xx  	jsl	~~k_string_copy_to_delimiter
  4927 08:9F4D: 85 17        	sta	<L83+drive_1
  4928 08:9F4F: 86 19        	stx	<L83+drive_1+2
  4929                        ;
  4930                        ;	pcurrentDirectory = k_nodelist_allocate_list("cu
                    rrentDirectory",k_dos_deallocate_fileinfo);
  4931                        	.line	1241
  4932 08:9F51: F4 08 00     	pea	#^~~k_dos_deallocate_fileinfo
  4933 08:9F54: F4 10 9F     	pea	#<~~k_dos_deallocate_fileinfo
  4934 08:9F57: F4 xx xx     	pea	#^L73
  4935 08:9F5A: F4 xx xx     	pea	#<L73
  4936 08:9F5D: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  4937 08:9F61: 85 1B        	sta	<L83+pcurrentDirectory_1
  4938 08:9F63: 86 1D        	stx	<L83+pcurrentDirectory_1+2
  4939                        ;	if(pcurrentDirectory)
  4940                        	.line	1242
  4941                        ;	{
  4942 08:9F65: A5 1B        	lda	<L83+pcurrentDirectory_1
  4943 08:9F67: 05 1D        	ora	<L83+pcurrentDirectory_1+2
  4944 08:9F69: D0 03        	bne	L85
  4945 08:9F6B: 82 46 01     	brl	L10050
  4946                        L85:
  4947                        	.line	1243
  4948                        ;		dir = k_mem_allocate_heap(sizeof(DIR));
  4949                        	.line	1244
  4950 08:9F6E: F4 00 00     	pea	#^$34
  4951 08:9F71: F4 34 00     	pea	#<$34
  4952 08:9F74: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  4953 08:9F78: 85 05        	sta	<L83+dir_1
  4954 08:9F7A: 86 07        	stx	<L83+dir_1+2
  4955                        ;		fs = k_mem_allocate_heap(sizeof(FATFS));
  4956                        	.line	1245
  4957 08:9F7C: F4 00 00     	pea	#^$233
  4958 08:9F7F: F4 33 02     	pea	#<$233
  4959 08:9F82: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  4960 08:9F86: 85 09        	sta	<L83+fs_1
  4961 08:9F88: 86 0B        	stx	<L83+fs_1+2
  4962                        ;
  4963                        ;		f_mount(NULL, drive,1); // unmount for s
                    afety
  4964                        	.line	1247
  4965 08:9F8A: F4 01 00     	pea	#<$1
  4966 08:9F8D: D4 19        	pei	<L83+drive_1+2
  4967 08:9F8F: D4 17        	pei	<L83+drive_1
  4968 08:9F91: F4 00 00     	pea	#^$0
  4969 08:9F94: F4 00 00     	pea	#<$0
  Mon Aug  9 2021 16:52                                                Page 100


  4970 08:9F97: 22 xx xx xx  	jsl	~~f_mount
  4971                        ;		f_mount(fs, drive,1);
  4972                        	.line	1248
  4973 08:9F9B: F4 01 00     	pea	#<$1
  4974 08:9F9E: D4 19        	pei	<L83+drive_1+2
  4975 08:9FA0: D4 17        	pei	<L83+drive_1
  4976 08:9FA2: D4 0B        	pei	<L83+fs_1+2
  4977 08:9FA4: D4 09        	pei	<L83+fs_1
  4978 08:9FA6: 22 xx xx xx  	jsl	~~f_mount
  4979                        ;
  4980                        ;		fr = f_opendir (dir,path);
  4981                        	.line	1250
  4982 08:9FAA: D4 24        	pei	<L82+path_0+2
  4983 08:9FAC: D4 22        	pei	<L82+path_0
  4984 08:9FAE: D4 07        	pei	<L83+dir_1+2
  4985 08:9FB0: D4 05        	pei	<L83+dir_1
  4986 08:9FB2: 22 xx xx xx  	jsl	~~f_opendir
  4987 08:9FB6: 85 15        	sta	<L83+fr_1
  4988                        ;		if(fr == FR_OK)
  4989                        	.line	1251
  4990                        ;		{
  4991 08:9FB8: A5 15        	lda	<L83+fr_1
  4992 08:9FBA: F0 03        	beq	L86
  4993 08:9FBC: 82 E5 00     	brl	L10051
  4994                        L86:
  4995                        	.line	1252
  4996                        ;			fileInfo = k_mem_allocate_heap(s
                    izeof(FILINFO));
  4997                        	.line	1253
  4998 08:9FBF: F4 00 00     	pea	#^$116
  4999 08:9FC2: F4 16 01     	pea	#<$116
  5000 08:9FC5: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5001 08:9FC9: 85 11        	sta	<L83+fileInfo_1
  5002 08:9FCB: 86 13        	stx	<L83+fileInfo_1+2
  5003                        ;			if(fileInfo)
  5004                        	.line	1254
  5005                        ;			{
  5006 08:9FCD: A5 11        	lda	<L83+fileInfo_1
  5007 08:9FCF: 05 13        	ora	<L83+fileInfo_1+2
  5008 08:9FD1: D0 03        	bne	L87
  5009 08:9FD3: 82 C6 00     	brl	L10052
  5010                        L87:
  5011                        	.line	1255
  5012                        ;				fr = f_findfirst(dir,fil
                    eInfo,path, "*");
  5013                        	.line	1256
  5014 08:9FD6: F4 xx xx     	pea	#^L73+17
  5015 08:9FD9: F4 xx xx     	pea	#<L73+17
  5016 08:9FDC: D4 24        	pei	<L82+path_0+2
  5017 08:9FDE: D4 22        	pei	<L82+path_0
  5018 08:9FE0: D4 13        	pei	<L83+fileInfo_1+2
  5019 08:9FE2: D4 11        	pei	<L83+fileInfo_1
  5020 08:9FE4: D4 07        	pei	<L83+dir_1+2
  5021 08:9FE6: D4 05        	pei	<L83+dir_1
  5022 08:9FE8: 22 xx xx xx  	jsl	~~f_findfirst
  5023 08:9FEC: 85 15        	sta	<L83+fr_1
  5024                        ;				if(fr == FR_OK)
  5025                        	.line	1257
  Mon Aug  9 2021 16:52                                                Page 101


  5026                        ;				{
  5027 08:9FEE: A5 15        	lda	<L83+fr_1
  5028 08:9FF0: F0 03        	beq	L88
  5029 08:9FF2: 82 A7 00     	brl	L10053
  5030                        L88:
  5031                        	.line	1258
  5032                        ;					k_nodelist_addto
                    list(pcurrentDirectory,PFXNODE_FILE_PATH_TYPE,(LPCSTR)fileIn
                    fo->fname,fileInfo);
  5033                        	.line	1259
  5034 08:9FF5: D4 13        	pei	<L83+fileInfo_1+2
  5035 08:9FF7: D4 11        	pei	<L83+fileInfo_1
  5036 08:9FF9: 18           	clc
  5037 08:9FFA: A9 16 00     	lda	#$16
  5038 08:9FFD: 65 11        	adc	<L83+fileInfo_1
  5039 08:9FFF: 85 01        	sta	<R0
  5040 08:A001: A9 00 00     	lda	#$0
  5041 08:A004: 65 13        	adc	<L83+fileInfo_1+2
  5042 08:A006: 85 03        	sta	<R0+2
  5043 08:A008: D4 03        	pei	<R0+2
  5044 08:A00A: D4 01        	pei	<R0
  5045 08:A00C: F4 A1 00     	pea	#<$a1
  5046 08:A00F: D4 1D        	pei	<L83+pcurrentDirectory_1+2
  5047 08:A011: D4 1B        	pei	<L83+pcurrentDirectory_1
  5048 08:A013: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  5049                        ;					do
  5050                        	.line	1260
  5051                        L10056:
  5052                        ;					{
  5053                        	.line	1261
  5054                        ;						fileInfo
                     = k_mem_allocate_heap(sizeof(FILINFO));
  5055                        	.line	1262
  5056 08:A017: F4 00 00     	pea	#^$116
  5057 08:A01A: F4 16 01     	pea	#<$116
  5058 08:A01D: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5059 08:A021: 85 11        	sta	<L83+fileInfo_1
  5060 08:A023: 86 13        	stx	<L83+fileInfo_1+2
  5061                        ;						if(fileI
                    nfo!=NULL)
  5062                        	.line	1263
  5063                        ;						{
  5064 08:A025: A5 11        	lda	<L83+fileInfo_1
  5065 08:A027: 05 13        	ora	<L83+fileInfo_1+2
  5066 08:A029: D0 03        	bne	L89
  5067 08:A02B: 82 5A 00     	brl	L10057
  5068                        L89:
  5069                        	.line	1264
  5070                        ;							
                    fr = f_findnext(dir,fileInfo);
  5071                        	.line	1265
  5072 08:A02E: D4 13        	pei	<L83+fileInfo_1+2
  5073 08:A030: D4 11        	pei	<L83+fileInfo_1
  5074 08:A032: D4 07        	pei	<L83+dir_1+2
  5075 08:A034: D4 05        	pei	<L83+dir_1
  5076 08:A036: 22 xx xx xx  	jsl	~~f_findnext
  5077 08:A03A: 85 15        	sta	<L83+fr_1
  5078                        ;							
  Mon Aug  9 2021 16:52                                                Page 102


                    if(fr != FR_OK)
  5079                        	.line	1266
  5080                        ;							
                    {
  5081 08:A03C: A5 15        	lda	<L83+fr_1
  5082 08:A03E: D0 03        	bne	L90
  5083 08:A040: 82 0B 00     	brl	L10058
  5084                        L90:
  5085                        	.line	1267
  5086                        ;							
                    	k_mem_deallocate_heap(fileInfo);
  5087                        	.line	1268
  5088 08:A043: D4 13        	pei	<L83+fileInfo_1+2
  5089 08:A045: D4 11        	pei	<L83+fileInfo_1
  5090 08:A047: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5091                        ;							
                    }
  5092                        	.line	1269
  5093                        ;							
                    else
  5094 08:A04B: 82 3A 00     	brl	L10059
  5095                        L10058:
  5096                        ;							
                    {
  5097                        	.line	1271
  5098                        ;							
                    	if(fileInfo->fname[0]!=0)
  5099                        	.line	1272
  5100                        ;							
                    		k_nodelist_addtolist(pcurrentDirectory,PFXNODE_F
                    ILE_PATH_TYPE,(LPCSTR)fileInfo->fname,fileInfo);
  5101 08:A04E: A0 16 00     	ldy	#$16
  5102 08:A051: B7 11        	lda	[<L83+fileInfo_1],Y
  5103 08:A053: 29 FF 00     	and	#$ff
  5104 08:A056: D0 03        	bne	L91
  5105 08:A058: 82 25 00     	brl	L10060
  5106                        L91:
  5107                        	.line	1273
  5108 08:A05B: D4 13        	pei	<L83+fileInfo_1+2
  5109 08:A05D: D4 11        	pei	<L83+fileInfo_1
  5110 08:A05F: 18           	clc
  5111 08:A060: A9 16 00     	lda	#$16
  5112 08:A063: 65 11        	adc	<L83+fileInfo_1
  5113 08:A065: 85 01        	sta	<R0
  5114 08:A067: A9 00 00     	lda	#$0
  5115 08:A06A: 65 13        	adc	<L83+fileInfo_1+2
  5116 08:A06C: 85 03        	sta	<R0+2
  5117 08:A06E: D4 03        	pei	<R0+2
  5118 08:A070: D4 01        	pei	<R0
  5119 08:A072: F4 A1 00     	pea	#<$a1
  5120 08:A075: D4 1D        	pei	<L83+pcurrentDirectory_1+2
  5121 08:A077: D4 1B        	pei	<L83+pcurrentDirectory_1
  5122 08:A079: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  5123                        ;							
                    	else
  5124 08:A07D: 82 08 00     	brl	L10061
  5125                        L10060:
  5126                        ;							
  Mon Aug  9 2021 16:52                                                Page 103


                    		k_mem_deallocate_heap(fileInfo);
  5127                        	.line	1275
  5128 08:A080: D4 13        	pei	<L83+fileInfo_1+2
  5129 08:A082: D4 11        	pei	<L83+fileInfo_1
  5130 08:A084: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5131                        L10061:
  5132                        ;							
                    }
  5133                        	.line	1276
  5134                        L10059:
  5135                        ;						}
  5136                        	.line	1277
  5137                        ;					}
  5138                        L10057:
  5139                        	.line	1278
  5140                        ;					while((fr == FR_
                    OK) && (fileInfo->fname[0]));
  5141                        L10054:
  5142 08:A088: A5 15        	lda	<L83+fr_1
  5143 08:A08A: F0 03        	beq	L93
  5144 08:A08C: 82 0D 00     	brl	L92
  5145                        L93:
  5146 08:A08F: A0 16 00     	ldy	#$16
  5147 08:A092: B7 11        	lda	[<L83+fileInfo_1],Y
  5148 08:A094: 29 FF 00     	and	#$ff
  5149 08:A097: F0 03        	beq	L94
  5150 08:A099: 82 7B FF     	brl	L10056
  5151                        L94:
  5152                        L92:
  5153                        L10055:
  5154                        ;				}
  5155                        	.line	1280
  5156                        ;			}
  5157                        L10053:
  5158                        	.line	1281
  5159                        ;			f_closedir(dir);
  5160                        L10052:
  5161                        	.line	1282
  5162 08:A09C: D4 07        	pei	<L83+dir_1+2
  5163 08:A09E: D4 05        	pei	<L83+dir_1
  5164 08:A0A0: 22 xx xx xx  	jsl	~~f_closedir
  5165                        ;		}
  5166                        	.line	1283
  5167                        ;
  5168                        ;
  5169                        ;		k_mem_deallocate_heap(fs);
  5170                        L10051:
  5171                        	.line	1286
  5172 08:A0A4: D4 0B        	pei	<L83+fs_1+2
  5173 08:A0A6: D4 09        	pei	<L83+fs_1
  5174 08:A0A8: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5175                        ;		k_mem_deallocate_heap(dir);
  5176                        	.line	1287
  5177 08:A0AC: D4 07        	pei	<L83+dir_1+2
  5178 08:A0AE: D4 05        	pei	<L83+dir_1
  5179 08:A0B0: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5180                        ;
  5181                        ;	}
  Mon Aug  9 2021 16:52                                                Page 104


  5182                        	.line	1289
  5183                        ;
  5184                        ;	return pcurrentDirectory;
  5185                        L10050:
  5186                        	.line	1291
  5187 08:A0B4: A6 1D        	ldx	<L83+pcurrentDirectory_1+2
  5188 08:A0B6: A5 1B        	lda	<L83+pcurrentDirectory_1
  5189                        L95:
  5190 08:A0B8: A8           	tay
  5191 08:A0B9: A5 20        	lda	<L82+2
  5192 08:A0BB: 85 24        	sta	<L82+2+4
  5193 08:A0BD: A5 1F        	lda	<L82+1
  5194 08:A0BF: 85 23        	sta	<L82+1+4
  5195 08:A0C1: 2B           	pld
  5196 08:A0C2: 3B           	tsc
  5197 08:A0C3: 18           	clc
  5198 08:A0C4: 69 22 00     	adc	#L82+4
  5199 08:A0C7: 1B           	tcs
  5200 08:A0C8: 98           	tya
  5201 08:A0C9: 6B           	rtl
  5202                        ;}
  5203                        	.line	1292
  5204                        	.endblock	1292
  5205             0000001E   L82	equ	30
  5206             00000005   L83	equ	5
  5207 08:A0CA:              	ends
  5208                        	efunc
  5209                        	.endfunc	1292,5,30
  5210                        	.line	1292
  5211                        	data
  5212                        L73:
  5213 00:0250: 63 75 72 72  	db	$63,$75,$72,$72,$65,$6E,$74,$44,$69,$72,
                    $65,$63,$74,$6F,$72
       00:0254: 65 6E 74 44 
       00:0258: 69 72 65 63 
       00:025C: 74 6F 72 
  5214 00:025F: 79 00 2A 00  	db	$79,$00,$2A,$00
  5215 00:0263:              	ends
  5216                        ;
  5217                        ;
  5218                        ;FILE k_dos_open(const TCHAR* path, BYTE mode)
  5219                        ;{
  5220                        	.line	1295
  5221                        	.line	1296
  5222                        	FXDOS
  5223                        	xdef	~~k_dos_open
  5224                        	func
  5225                        	.function	1296
  5226                        ~~k_dos_open:
  5227                        	longa	on
  5228                        	longi	on
  5229 08:A0CA: 3B           	tsc
  5230 08:A0CB: 38           	sec
  5231 08:A0CC: E9 0C 00     	sbc	#L97
  5232 08:A0CF: 1B           	tcs
  5233 08:A0D0: 0B           	phd
  5234 08:A0D1: 5B           	tcd
  5235             00000004   path_0	set	4
  Mon Aug  9 2021 16:52                                                Page 105


  5236             00000008   mode_0	set	8
  5237                        	.block	1296
  5238                        ;	LPCSTR drive = NULL;
  5239                        ;
  5240                        ;	FILE file = NULL;
  5241                        ;
  5242                        ;	file = k_mem_allocate_heap(sizeof(FILE_POINTER))
                    ;
  5243             00000000   drive_1	set	0
  5244             00000004   file_1	set	4
  5245                        	.sym	drive,0,142,1,32
  5246                        	.sym	file,4,138,1,32,130
  5247                        	.sym	path,4,142,6,32
  5248                        	.sym	mode,8,14,6,8
  5249 08:A0D2: 64 05        	stz	<L98+drive_1
  5250 08:A0D4: 64 07        	stz	<L98+drive_1+2
  5251 08:A0D6: 64 09        	stz	<L98+file_1
  5252 08:A0D8: 64 0B        	stz	<L98+file_1+2
  5253                        	.line	1301
  5254 08:A0DA: F4 00 00     	pea	#^$e
  5255 08:A0DD: F4 0E 00     	pea	#<$e
  5256 08:A0E0: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5257 08:A0E4: 85 09        	sta	<L98+file_1
  5258 08:A0E6: 86 0B        	stx	<L98+file_1+2
  5259                        ;
  5260                        ;	if(file)
  5261                        	.line	1303
  5262                        ;	{
  5263 08:A0E8: A5 09        	lda	<L98+file_1
  5264 08:A0EA: 05 0B        	ora	<L98+file_1+2
  5265 08:A0EC: D0 03        	bne	L100
  5266 08:A0EE: 82 B4 00     	brl	L10062
  5267                        L100:
  5268                        	.line	1304
  5269                        ;		drive = k_string_copy_to_delimiter(path,
                    ':');
  5270                        	.line	1305
  5271 08:A0F1: F4 3A 00     	pea	#<$3a
  5272 08:A0F4: D4 12        	pei	<L97+path_0+2
  5273 08:A0F6: D4 10        	pei	<L97+path_0
  5274 08:A0F8: 22 xx xx xx  	jsl	~~k_string_copy_to_delimiter
  5275 08:A0FC: 85 05        	sta	<L98+drive_1
  5276 08:A0FE: 86 07        	stx	<L98+drive_1+2
  5277                        ;		if(drive)
  5278                        	.line	1306
  5279                        ;		{
  5280 08:A100: A5 05        	lda	<L98+drive_1
  5281 08:A102: 05 07        	ora	<L98+drive_1+2
  5282 08:A104: D0 03        	bne	L101
  5283 08:A106: 82 9C 00     	brl	L10063
  5284                        L101:
  5285                        	.line	1307
  5286                        ;			file->fs  = k_mem_allocate_heap(
                    sizeof(FATFS));
  5287                        	.line	1308
  5288 08:A109: F4 00 00     	pea	#^$233
  5289 08:A10C: F4 33 02     	pea	#<$233
  5290 08:A10F: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  Mon Aug  9 2021 16:52                                                Page 106


  5291 08:A113: 85 01        	sta	<R0
  5292 08:A115: 86 03        	stx	<R0+2
  5293 08:A117: A5 01        	lda	<R0
  5294 08:A119: 87 09        	sta	[<L98+file_1]
  5295 08:A11B: A5 03        	lda	<R0+2
  5296 08:A11D: A0 02 00     	ldy	#$2
  5297 08:A120: 97 09        	sta	[<L98+file_1],Y
  5298                        ;			file->f   = k_mem_allocate_heap(
                    sizeof(FIL));
  5299                        	.line	1309
  5300 08:A122: F4 00 00     	pea	#^$226
  5301 08:A125: F4 26 02     	pea	#<$226
  5302 08:A128: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5303 08:A12C: 85 01        	sta	<R0
  5304 08:A12E: 86 03        	stx	<R0+2
  5305 08:A130: A5 01        	lda	<R0
  5306 08:A132: A0 08 00     	ldy	#$8
  5307 08:A135: 97 09        	sta	[<L98+file_1],Y
  5308 08:A137: A5 03        	lda	<R0+2
  5309 08:A139: A0 0A 00     	ldy	#$a
  5310 08:A13C: 97 09        	sta	[<L98+file_1],Y
  5311                        ;			file->fileInfo = NULL;
  5312                        	.line	1310
  5313 08:A13E: A9 00 00     	lda	#$0
  5314 08:A141: A0 04 00     	ldy	#$4
  5315 08:A144: 97 09        	sta	[<L98+file_1],Y
  5316 08:A146: A9 00 00     	lda	#$0
  5317 08:A149: A0 06 00     	ldy	#$6
  5318 08:A14C: 97 09        	sta	[<L98+file_1],Y
  5319                        ;
  5320                        ;
  5321                        ;			f_mount(NULL, drive,1); // unmou
                    nt for safety
  5322                        	.line	1313
  5323 08:A14E: F4 01 00     	pea	#<$1
  5324 08:A151: D4 07        	pei	<L98+drive_1+2
  5325 08:A153: D4 05        	pei	<L98+drive_1
  5326 08:A155: F4 00 00     	pea	#^$0
  5327 08:A158: F4 00 00     	pea	#<$0
  5328 08:A15B: 22 xx xx xx  	jsl	~~f_mount
  5329                        ;			file->fr = f_mount(file->fs , dr
                    ive,1);
  5330                        	.line	1314
  5331 08:A15F: F4 01 00     	pea	#<$1
  5332 08:A162: D4 07        	pei	<L98+drive_1+2
  5333 08:A164: D4 05        	pei	<L98+drive_1
  5334 08:A166: A0 02 00     	ldy	#$2
  5335 08:A169: B7 09        	lda	[<L98+file_1],Y
  5336 08:A16B: 48           	pha
  5337 08:A16C: A7 09        	lda	[<L98+file_1]
  5338 08:A16E: 48           	pha
  5339 08:A16F: 22 xx xx xx  	jsl	~~f_mount
  5340 08:A173: A0 0C 00     	ldy	#$c
  5341 08:A176: 97 09        	sta	[<L98+file_1],Y
  5342                        ;			if(file->fr == FR_OK)
  5343                        	.line	1315
  5344                        ;			{
  5345 08:A178: A0 0C 00     	ldy	#$c
  Mon Aug  9 2021 16:52                                                Page 107


  5346 08:A17B: B7 09        	lda	[<L98+file_1],Y
  5347 08:A17D: F0 03        	beq	L102
  5348 08:A17F: 82 1B 00     	brl	L10064
  5349                        L102:
  5350                        	.line	1316
  5351                        ;				file->fr = f_open(file->
                    f,path,mode);
  5352                        	.line	1317
  5353 08:A182: D4 14        	pei	<L97+mode_0
  5354 08:A184: D4 12        	pei	<L97+path_0+2
  5355 08:A186: D4 10        	pei	<L97+path_0
  5356 08:A188: A0 0A 00     	ldy	#$a
  5357 08:A18B: B7 09        	lda	[<L98+file_1],Y
  5358 08:A18D: 48           	pha
  5359 08:A18E: A0 08 00     	ldy	#$8
  5360 08:A191: B7 09        	lda	[<L98+file_1],Y
  5361 08:A193: 48           	pha
  5362 08:A194: 22 xx xx xx  	jsl	~~f_open
  5363 08:A198: A0 0C 00     	ldy	#$c
  5364 08:A19B: 97 09        	sta	[<L98+file_1],Y
  5365                        ;			}
  5366                        	.line	1318
  5367                        ;
  5368                        ;			k_mem_deallocate_heap((LPVOID)dr
                    ive);
  5369                        L10064:
  5370                        	.line	1320
  5371 08:A19D: D4 07        	pei	<L98+drive_1+2
  5372 08:A19F: D4 05        	pei	<L98+drive_1
  5373 08:A1A1: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5374                        ;		}
  5375                        	.line	1321
  5376                        ;	}
  5377                        L10063:
  5378                        	.line	1322
  5379                        ;
  5380                        ;	return file;
  5381                        L10062:
  5382                        	.line	1324
  5383 08:A1A5: A6 0B        	ldx	<L98+file_1+2
  5384 08:A1A7: A5 09        	lda	<L98+file_1
  5385                        L103:
  5386 08:A1A9: A8           	tay
  5387 08:A1AA: A5 0E        	lda	<L97+2
  5388 08:A1AC: 85 14        	sta	<L97+2+6
  5389 08:A1AE: A5 0D        	lda	<L97+1
  5390 08:A1B0: 85 13        	sta	<L97+1+6
  5391 08:A1B2: 2B           	pld
  5392 08:A1B3: 3B           	tsc
  5393 08:A1B4: 18           	clc
  5394 08:A1B5: 69 12 00     	adc	#L97+6
  5395 08:A1B8: 1B           	tcs
  5396 08:A1B9: 98           	tya
  5397 08:A1BA: 6B           	rtl
  5398                        ;}
  5399                        	.line	1325
  5400                        	.endblock	1325
  5401             0000000C   L97	equ	12
  Mon Aug  9 2021 16:52                                                Page 108


  5402             00000005   L98	equ	5
  5403 08:A1BB:              	ends
  5404                        	efunc
  5405                        	.endfunc	1325,5,12
  5406                        	.line	1325
  5407                        ;
  5408                        ;HRESULT k_dos_close (FILE file)
  5409                        ;{
  5410                        	.line	1327
  5411                        	.line	1328
  5412                        	FXDOS
  5413                        	xdef	~~k_dos_close
  5414                        	func
  5415                        	.function	1328
  5416                        ~~k_dos_close:
  5417                        	longa	on
  5418                        	longi	on
  5419 08:A1BB: 3B           	tsc
  5420 08:A1BC: 38           	sec
  5421 08:A1BD: E9 00 00     	sbc	#L104
  5422 08:A1C0: 1B           	tcs
  5423 08:A1C1: 0B           	phd
  5424 08:A1C2: 5B           	tcd
  5425             00000004   file_0	set	4
  5426                        	.block	1328
  5427                        ;	if(file!=NULL)
  5428                        	.sym	file,4,138,6,32,130
  5429                        	.line	1329
  5430                        ;	{
  5431 08:A1C3: A5 04        	lda	<L104+file_0
  5432 08:A1C5: 05 06        	ora	<L104+file_0+2
  5433 08:A1C7: D0 03        	bne	L107
  5434 08:A1C9: 82 6F 00     	brl	L10065
  5435                        L107:
  5436                        	.line	1330
  5437                        ;		if(file->f)
  5438                        	.line	1331
  5439                        ;		{
  5440 08:A1CC: A0 08 00     	ldy	#$8
  5441 08:A1CF: B7 04        	lda	[<L104+file_0],Y
  5442 08:A1D1: A0 0A 00     	ldy	#$a
  5443 08:A1D4: 17 04        	ora	[<L104+file_0],Y
  5444 08:A1D6: D0 03        	bne	L108
  5445 08:A1D8: 82 20 00     	brl	L10066
  5446                        L108:
  5447                        	.line	1332
  5448                        ;			f_close(file->f);
  5449                        	.line	1333
  5450 08:A1DB: A0 0A 00     	ldy	#$a
  5451 08:A1DE: B7 04        	lda	[<L104+file_0],Y
  5452 08:A1E0: 48           	pha
  5453 08:A1E1: A0 08 00     	ldy	#$8
  5454 08:A1E4: B7 04        	lda	[<L104+file_0],Y
  5455 08:A1E6: 48           	pha
  5456 08:A1E7: 22 xx xx xx  	jsl	~~f_close
  5457                        ;			k_mem_deallocate_heap(file->f);
  5458                        	.line	1334
  5459 08:A1EB: A0 0A 00     	ldy	#$a
  Mon Aug  9 2021 16:52                                                Page 109


  5460 08:A1EE: B7 04        	lda	[<L104+file_0],Y
  5461 08:A1F0: 48           	pha
  5462 08:A1F1: A0 08 00     	ldy	#$8
  5463 08:A1F4: B7 04        	lda	[<L104+file_0],Y
  5464 08:A1F6: 48           	pha
  5465 08:A1F7: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5466                        ;		}
  5467                        	.line	1335
  5468                        ;
  5469                        ;		if(file->fileInfo)
  5470                        L10066:
  5471                        	.line	1337
  5472                        ;			k_mem_deallocate_heap(file->file
                    Info);
  5473 08:A1FB: A0 04 00     	ldy	#$4
  5474 08:A1FE: B7 04        	lda	[<L104+file_0],Y
  5475 08:A200: A0 06 00     	ldy	#$6
  5476 08:A203: 17 04        	ora	[<L104+file_0],Y
  5477 08:A205: D0 03        	bne	L109
  5478 08:A207: 82 10 00     	brl	L10067
  5479                        L109:
  5480                        	.line	1338
  5481 08:A20A: A0 06 00     	ldy	#$6
  5482 08:A20D: B7 04        	lda	[<L104+file_0],Y
  5483 08:A20F: 48           	pha
  5484 08:A210: A0 04 00     	ldy	#$4
  5485 08:A213: B7 04        	lda	[<L104+file_0],Y
  5486 08:A215: 48           	pha
  5487 08:A216: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5488                        ;
  5489                        ;		if(file->fs)
  5490                        L10067:
  5491                        	.line	1340
  5492                        ;			k_mem_deallocate_heap(file->fs);
  5493 08:A21A: A7 04        	lda	[<L104+file_0]
  5494 08:A21C: A0 02 00     	ldy	#$2
  5495 08:A21F: 17 04        	ora	[<L104+file_0],Y
  5496 08:A221: D0 03        	bne	L110
  5497 08:A223: 82 0D 00     	brl	L10068
  5498                        L110:
  5499                        	.line	1341
  5500 08:A226: A0 02 00     	ldy	#$2
  5501 08:A229: B7 04        	lda	[<L104+file_0],Y
  5502 08:A22B: 48           	pha
  5503 08:A22C: A7 04        	lda	[<L104+file_0]
  5504 08:A22E: 48           	pha
  5505 08:A22F: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5506                        ;
  5507                        ;		k_mem_deallocate_heap(file);
  5508                        L10068:
  5509                        	.line	1343
  5510 08:A233: D4 06        	pei	<L104+file_0+2
  5511 08:A235: D4 04        	pei	<L104+file_0
  5512 08:A237: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5513                        ;	}
  5514                        	.line	1344
  5515                        ;	return 0;
  5516                        L10065:
  Mon Aug  9 2021 16:52                                                Page 110


  5517                        	.line	1345
  5518 08:A23B: A9 00 00     	lda	#$0
  5519 08:A23E: AA           	tax
  5520 08:A23F: A9 00 00     	lda	#$0
  5521                        L111:
  5522 08:A242: A8           	tay
  5523 08:A243: A5 02        	lda	<L104+2
  5524 08:A245: 85 06        	sta	<L104+2+4
  5525 08:A247: A5 01        	lda	<L104+1
  5526 08:A249: 85 05        	sta	<L104+1+4
  5527 08:A24B: 2B           	pld
  5528 08:A24C: 3B           	tsc
  5529 08:A24D: 18           	clc
  5530 08:A24E: 69 04 00     	adc	#L104+4
  5531 08:A251: 1B           	tcs
  5532 08:A252: 98           	tya
  5533 08:A253: 6B           	rtl
  5534                        ;}
  5535                        	.line	1346
  5536                        	.endblock	1346
  5537             00000000   L104	equ	0
  5538             00000001   L105	equ	1
  5539 08:A254:              	ends
  5540                        	efunc
  5541                        	.endfunc	1346,1,0
  5542                        	.line	1346
  5543                        ;
  5544                        ;HRESULT k_dos_read (FIL* fp, void* buff, UINT btr
                    , UINT* br){return 0;}
  5545                        	.line	1348
  5546                        	.line	1348
  5547                        	FXDOS
  5548                        	xdef	~~k_dos_read
  5549                        	func
  5550                        	.function	1348
  5551                        ~~k_dos_read:
  5552                        	longa	on
  5553                        	longi	on
  5554 08:A254: 3B           	tsc
  5555 08:A255: 38           	sec
  5556 08:A256: E9 00 00     	sbc	#L112
  5557 08:A259: 1B           	tcs
  5558 08:A25A: 0B           	phd
  5559 08:A25B: 5B           	tcd
  5560             00000004   fp_0	set	4
  5561             00000008   buff_0	set	8
  5562             0000000C   btr_0	set	12
  5563             0000000E   br_0	set	14
  5564                        	.block	1348
  5565                        	.sym	fp,4,138,6,32,86
  5566                        	.sym	buff,8,129,6,32
  5567                        	.sym	btr,12,16,6,16
  5568                        	.sym	br,14,144,6,32
  5569                        	.line	1348
  5570 08:A25C: A9 00 00     	lda	#$0
  5571 08:A25F: AA           	tax
  5572 08:A260: A9 00 00     	lda	#$0
  5573                        L115:
  Mon Aug  9 2021 16:52                                                Page 111


  5574 08:A263: A8           	tay
  5575 08:A264: A5 02        	lda	<L112+2
  5576 08:A266: 85 10        	sta	<L112+2+14
  5577 08:A268: A5 01        	lda	<L112+1
  5578 08:A26A: 85 0F        	sta	<L112+1+14
  5579 08:A26C: 2B           	pld
  5580 08:A26D: 3B           	tsc
  5581 08:A26E: 18           	clc
  5582 08:A26F: 69 0E 00     	adc	#L112+14
  5583 08:A272: 1B           	tcs
  5584 08:A273: 98           	tya
  5585 08:A274: 6B           	rtl
  5586                        	.line	1348
  5587                        	.endblock	1348
  5588             00000000   L112	equ	0
  5589             00000001   L113	equ	1
  5590 08:A275:              	ends
  5591                        	efunc
  5592                        	.endfunc	1348,1,0
  5593                        	.line	1348
  5594                        ;HRESULT k_dos_write (FIL* fp, const void* buff, U
                    INT btw, UINT* bw){return 0;}
  5595                        	.line	1349
  5596                        	.line	1349
  5597                        	FXDOS
  5598                        	xdef	~~k_dos_write
  5599                        	func
  5600                        	.function	1349
  5601                        ~~k_dos_write:
  5602                        	longa	on
  5603                        	longi	on
  5604 08:A275: 3B           	tsc
  5605 08:A276: 38           	sec
  5606 08:A277: E9 00 00     	sbc	#L116
  5607 08:A27A: 1B           	tcs
  5608 08:A27B: 0B           	phd
  5609 08:A27C: 5B           	tcd
  5610             00000004   fp_0	set	4
  5611             00000008   buff_0	set	8
  5612             0000000C   btw_0	set	12
  5613             0000000E   bw_0	set	14
  5614                        	.block	1349
  5615                        	.sym	fp,4,138,6,32,86
  5616                        	.sym	buff,8,129,6,32
  5617                        	.sym	btw,12,16,6,16
  5618                        	.sym	bw,14,144,6,32
  5619                        	.line	1349
  5620 08:A27D: A9 00 00     	lda	#$0
  5621 08:A280: AA           	tax
  5622 08:A281: A9 00 00     	lda	#$0
  5623                        L119:
  5624 08:A284: A8           	tay
  5625 08:A285: A5 02        	lda	<L116+2
  5626 08:A287: 85 10        	sta	<L116+2+14
  5627 08:A289: A5 01        	lda	<L116+1
  5628 08:A28B: 85 0F        	sta	<L116+1+14
  5629 08:A28D: 2B           	pld
  5630 08:A28E: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 112


  5631 08:A28F: 18           	clc
  5632 08:A290: 69 0E 00     	adc	#L116+14
  5633 08:A293: 1B           	tcs
  5634 08:A294: 98           	tya
  5635 08:A295: 6B           	rtl
  5636                        	.line	1349
  5637                        	.endblock	1349
  5638             00000000   L116	equ	0
  5639             00000001   L117	equ	1
  5640 08:A296:              	ends
  5641                        	efunc
  5642                        	.endfunc	1349,1,0
  5643                        	.line	1349
  5644                        ;HRESULT k_dos_lseek (FIL* fp, FSIZE_t ofs){return
                     0;}
  5645                        	.line	1350
  5646                        	.line	1350
  5647                        	FXDOS
  5648                        	xdef	~~k_dos_lseek
  5649                        	func
  5650                        	.function	1350
  5651                        ~~k_dos_lseek:
  5652                        	longa	on
  5653                        	longi	on
  5654 08:A296: 3B           	tsc
  5655 08:A297: 38           	sec
  5656 08:A298: E9 00 00     	sbc	#L120
  5657 08:A29B: 1B           	tcs
  5658 08:A29C: 0B           	phd
  5659 08:A29D: 5B           	tcd
  5660             00000004   fp_0	set	4
  5661             00000008   ofs_0	set	8
  5662                        	.block	1350
  5663                        	.sym	fp,4,138,6,32,86
  5664                        	.sym	ofs,8,18,6,32
  5665                        	.line	1350
  5666 08:A29E: A9 00 00     	lda	#$0
  5667 08:A2A1: AA           	tax
  5668 08:A2A2: A9 00 00     	lda	#$0
  5669                        L123:
  5670 08:A2A5: A8           	tay
  5671 08:A2A6: A5 02        	lda	<L120+2
  5672 08:A2A8: 85 0A        	sta	<L120+2+8
  5673 08:A2AA: A5 01        	lda	<L120+1
  5674 08:A2AC: 85 09        	sta	<L120+1+8
  5675 08:A2AE: 2B           	pld
  5676 08:A2AF: 3B           	tsc
  5677 08:A2B0: 18           	clc
  5678 08:A2B1: 69 08 00     	adc	#L120+8
  5679 08:A2B4: 1B           	tcs
  5680 08:A2B5: 98           	tya
  5681 08:A2B6: 6B           	rtl
  5682                        	.line	1350
  5683                        	.endblock	1350
  5684             00000000   L120	equ	0
  5685             00000001   L121	equ	1
  5686 08:A2B7:              	ends
  5687                        	efunc
  Mon Aug  9 2021 16:52                                                Page 113


  5688                        	.endfunc	1350,1,0
  5689                        	.line	1350
  5690                        ;HRESULT k_dos_truncate (FIL* fp){return 0;}	
                    								
                    	/* Truncate the file */
  5691                        	.line	1351
  5692                        	.line	1351
  5693                        	FXDOS
  5694                        	xdef	~~k_dos_truncate
  5695                        	func
  5696                        	.function	1351
  5697                        ~~k_dos_truncate:
  5698                        	longa	on
  5699                        	longi	on
  5700 08:A2B7: 3B           	tsc
  5701 08:A2B8: 38           	sec
  5702 08:A2B9: E9 00 00     	sbc	#L124
  5703 08:A2BC: 1B           	tcs
  5704 08:A2BD: 0B           	phd
  5705 08:A2BE: 5B           	tcd
  5706             00000004   fp_0	set	4
  5707                        	.block	1351
  5708                        	.sym	fp,4,138,6,32,86
  5709                        	.line	1351
  5710 08:A2BF: A9 00 00     	lda	#$0
  5711 08:A2C2: AA           	tax
  5712 08:A2C3: A9 00 00     	lda	#$0
  5713                        L127:
  5714 08:A2C6: A8           	tay
  5715 08:A2C7: A5 02        	lda	<L124+2
  5716 08:A2C9: 85 06        	sta	<L124+2+4
  5717 08:A2CB: A5 01        	lda	<L124+1
  5718 08:A2CD: 85 05        	sta	<L124+1+4
  5719 08:A2CF: 2B           	pld
  5720 08:A2D0: 3B           	tsc
  5721 08:A2D1: 18           	clc
  5722 08:A2D2: 69 04 00     	adc	#L124+4
  5723 08:A2D5: 1B           	tcs
  5724 08:A2D6: 98           	tya
  5725 08:A2D7: 6B           	rtl
  5726                        	.line	1351
  5727                        	.endblock	1351
  5728             00000000   L124	equ	0
  5729             00000001   L125	equ	1
  5730 08:A2D8:              	ends
  5731                        	efunc
  5732                        	.endfunc	1351,1,0
  5733                        	.line	1351
  5734                        ;HRESULT k_dos_sync (FIL* fp){return 0;}		
                    								
                    	/* Flush cached data of the writing file */
  5735                        	.line	1352
  5736                        	.line	1352
  5737                        	FXDOS
  5738                        	xdef	~~k_dos_sync
  5739                        	func
  5740                        	.function	1352
  5741                        ~~k_dos_sync:
  Mon Aug  9 2021 16:52                                                Page 114


  5742                        	longa	on
  5743                        	longi	on
  5744 08:A2D8: 3B           	tsc
  5745 08:A2D9: 38           	sec
  5746 08:A2DA: E9 00 00     	sbc	#L128
  5747 08:A2DD: 1B           	tcs
  5748 08:A2DE: 0B           	phd
  5749 08:A2DF: 5B           	tcd
  5750             00000004   fp_0	set	4
  5751                        	.block	1352
  5752                        	.sym	fp,4,138,6,32,86
  5753                        	.line	1352
  5754 08:A2E0: A9 00 00     	lda	#$0
  5755 08:A2E3: AA           	tax
  5756 08:A2E4: A9 00 00     	lda	#$0
  5757                        L131:
  5758 08:A2E7: A8           	tay
  5759 08:A2E8: A5 02        	lda	<L128+2
  5760 08:A2EA: 85 06        	sta	<L128+2+4
  5761 08:A2EC: A5 01        	lda	<L128+1
  5762 08:A2EE: 85 05        	sta	<L128+1+4
  5763 08:A2F0: 2B           	pld
  5764 08:A2F1: 3B           	tsc
  5765 08:A2F2: 18           	clc
  5766 08:A2F3: 69 04 00     	adc	#L128+4
  5767 08:A2F6: 1B           	tcs
  5768 08:A2F7: 98           	tya
  5769 08:A2F8: 6B           	rtl
  5770                        	.line	1352
  5771                        	.endblock	1352
  5772             00000000   L128	equ	0
  5773             00000001   L129	equ	1
  5774 08:A2F9:              	ends
  5775                        	efunc
  5776                        	.endfunc	1352,1,0
  5777                        	.line	1352
  5778                        ;HRESULT k_dos_opendir (DIR* dp, const TCHAR* path
                    ){return 0;}						
                    /* Open a directory */
  5779                        	.line	1353
  5780                        	.line	1353
  5781                        	FXDOS
  5782                        	xdef	~~k_dos_opendir
  5783                        	func
  5784                        	.function	1353
  5785                        ~~k_dos_opendir:
  5786                        	longa	on
  5787                        	longi	on
  5788 08:A2F9: 3B           	tsc
  5789 08:A2FA: 38           	sec
  5790 08:A2FB: E9 00 00     	sbc	#L132
  5791 08:A2FE: 1B           	tcs
  5792 08:A2FF: 0B           	phd
  5793 08:A300: 5B           	tcd
  5794             00000004   dp_0	set	4
  5795             00000008   path_0	set	8
  5796                        	.block	1353
  5797                        	.sym	dp,4,138,6,32,87
  Mon Aug  9 2021 16:52                                                Page 115


  5798                        	.sym	path,8,142,6,32
  5799                        	.line	1353
  5800 08:A301: A9 00 00     	lda	#$0
  5801 08:A304: AA           	tax
  5802 08:A305: A9 00 00     	lda	#$0
  5803                        L135:
  5804 08:A308: A8           	tay
  5805 08:A309: A5 02        	lda	<L132+2
  5806 08:A30B: 85 0A        	sta	<L132+2+8
  5807 08:A30D: A5 01        	lda	<L132+1
  5808 08:A30F: 85 09        	sta	<L132+1+8
  5809 08:A311: 2B           	pld
  5810 08:A312: 3B           	tsc
  5811 08:A313: 18           	clc
  5812 08:A314: 69 08 00     	adc	#L132+8
  5813 08:A317: 1B           	tcs
  5814 08:A318: 98           	tya
  5815 08:A319: 6B           	rtl
  5816                        	.line	1353
  5817                        	.endblock	1353
  5818             00000000   L132	equ	0
  5819             00000001   L133	equ	1
  5820 08:A31A:              	ends
  5821                        	efunc
  5822                        	.endfunc	1353,1,0
  5823                        	.line	1353
  5824                        ;HRESULT k_dos_closedir (DIR* dp){return 0;}	
                    								
                    	/* Close an open directory */
  5825                        	.line	1354
  5826                        	.line	1354
  5827                        	FXDOS
  5828                        	xdef	~~k_dos_closedir
  5829                        	func
  5830                        	.function	1354
  5831                        ~~k_dos_closedir:
  5832                        	longa	on
  5833                        	longi	on
  5834 08:A31A: 3B           	tsc
  5835 08:A31B: 38           	sec
  5836 08:A31C: E9 00 00     	sbc	#L136
  5837 08:A31F: 1B           	tcs
  5838 08:A320: 0B           	phd
  5839 08:A321: 5B           	tcd
  5840             00000004   dp_0	set	4
  5841                        	.block	1354
  5842                        	.sym	dp,4,138,6,32,87
  5843                        	.line	1354
  5844 08:A322: A9 00 00     	lda	#$0
  5845 08:A325: AA           	tax
  5846 08:A326: A9 00 00     	lda	#$0
  5847                        L139:
  5848 08:A329: A8           	tay
  5849 08:A32A: A5 02        	lda	<L136+2
  5850 08:A32C: 85 06        	sta	<L136+2+4
  5851 08:A32E: A5 01        	lda	<L136+1
  5852 08:A330: 85 05        	sta	<L136+1+4
  5853 08:A332: 2B           	pld
  Mon Aug  9 2021 16:52                                                Page 116


  5854 08:A333: 3B           	tsc
  5855 08:A334: 18           	clc
  5856 08:A335: 69 04 00     	adc	#L136+4
  5857 08:A338: 1B           	tcs
  5858 08:A339: 98           	tya
  5859 08:A33A: 6B           	rtl
  5860                        	.line	1354
  5861                        	.endblock	1354
  5862             00000000   L136	equ	0
  5863             00000001   L137	equ	1
  5864 08:A33B:              	ends
  5865                        	efunc
  5866                        	.endfunc	1354,1,0
  5867                        	.line	1354
  5868                        ;HRESULT k_dos_readdir (DIR* dp, FILINFO* fno){ret
                    urn 0;}							
                    /* Read a directory item */
  5869                        	.line	1355
  5870                        	.line	1355
  5871                        	FXDOS
  5872                        	xdef	~~k_dos_readdir
  5873                        	func
  5874                        	.function	1355
  5875                        ~~k_dos_readdir:
  5876                        	longa	on
  5877                        	longi	on
  5878 08:A33B: 3B           	tsc
  5879 08:A33C: 38           	sec
  5880 08:A33D: E9 00 00     	sbc	#L140
  5881 08:A340: 1B           	tcs
  5882 08:A341: 0B           	phd
  5883 08:A342: 5B           	tcd
  5884             00000004   dp_0	set	4
  5885             00000008   fno_0	set	8
  5886                        	.block	1355
  5887                        	.sym	dp,4,138,6,32,87
  5888                        	.sym	fno,8,138,6,32,88
  5889                        	.line	1355
  5890 08:A343: A9 00 00     	lda	#$0
  5891 08:A346: AA           	tax
  5892 08:A347: A9 00 00     	lda	#$0
  5893                        L143:
  5894 08:A34A: A8           	tay
  5895 08:A34B: A5 02        	lda	<L140+2
  5896 08:A34D: 85 0A        	sta	<L140+2+8
  5897 08:A34F: A5 01        	lda	<L140+1
  5898 08:A351: 85 09        	sta	<L140+1+8
  5899 08:A353: 2B           	pld
  5900 08:A354: 3B           	tsc
  5901 08:A355: 18           	clc
  5902 08:A356: 69 08 00     	adc	#L140+8
  5903 08:A359: 1B           	tcs
  5904 08:A35A: 98           	tya
  5905 08:A35B: 6B           	rtl
  5906                        	.line	1355
  5907                        	.endblock	1355
  5908             00000000   L140	equ	0
  5909             00000001   L141	equ	1
  Mon Aug  9 2021 16:52                                                Page 117


  5910 08:A35C:              	ends
  5911                        	efunc
  5912                        	.endfunc	1355,1,0
  5913                        	.line	1355
  5914                        ;HRESULT k_dos_findfirst (DIR* dp, FILINFO* fno, c
                    onst TCHAR* path, const TCHAR* pattern){return 0;}	/* Find 
                    first file */
  5915                        	.line	1356
  5916                        	.line	1356
  5917                        	FXDOS
  5918                        	xdef	~~k_dos_findfirst
  5919                        	func
  5920                        	.function	1356
  5921                        ~~k_dos_findfirst:
  5922                        	longa	on
  5923                        	longi	on
  5924 08:A35C: 3B           	tsc
  5925 08:A35D: 38           	sec
  5926 08:A35E: E9 00 00     	sbc	#L144
  5927 08:A361: 1B           	tcs
  5928 08:A362: 0B           	phd
  5929 08:A363: 5B           	tcd
  5930             00000004   dp_0	set	4
  5931             00000008   fno_0	set	8
  5932             0000000C   path_0	set	12
  5933             00000010   pattern_0	set	16
  5934                        	.block	1356
  5935                        	.sym	dp,4,138,6,32,87
  5936                        	.sym	fno,8,138,6,32,88
  5937                        	.sym	path,12,142,6,32
  5938                        	.sym	pattern,16,142,6,32
  5939                        	.line	1356
  5940 08:A364: A9 00 00     	lda	#$0
  5941 08:A367: AA           	tax
  5942 08:A368: A9 00 00     	lda	#$0
  5943                        L147:
  5944 08:A36B: A8           	tay
  5945 08:A36C: A5 02        	lda	<L144+2
  5946 08:A36E: 85 12        	sta	<L144+2+16
  5947 08:A370: A5 01        	lda	<L144+1
  5948 08:A372: 85 11        	sta	<L144+1+16
  5949 08:A374: 2B           	pld
  5950 08:A375: 3B           	tsc
  5951 08:A376: 18           	clc
  5952 08:A377: 69 10 00     	adc	#L144+16
  5953 08:A37A: 1B           	tcs
  5954 08:A37B: 98           	tya
  5955 08:A37C: 6B           	rtl
  5956                        	.line	1356
  5957                        	.endblock	1356
  5958             00000000   L144	equ	0
  5959             00000001   L145	equ	1
  5960 08:A37D:              	ends
  5961                        	efunc
  5962                        	.endfunc	1356,1,0
  5963                        	.line	1356
  5964                        ;HRESULT k_dos_findnext (DIR* dp, FILINFO* fno){re
                    turn 0;}	/* Find next file */
  Mon Aug  9 2021 16:52                                                Page 118


  5965                        	.line	1357
  5966                        	.line	1357
  5967                        	FXDOS
  5968                        	xdef	~~k_dos_findnext
  5969                        	func
  5970                        	.function	1357
  5971                        ~~k_dos_findnext:
  5972                        	longa	on
  5973                        	longi	on
  5974 08:A37D: 3B           	tsc
  5975 08:A37E: 38           	sec
  5976 08:A37F: E9 00 00     	sbc	#L148
  5977 08:A382: 1B           	tcs
  5978 08:A383: 0B           	phd
  5979 08:A384: 5B           	tcd
  5980             00000004   dp_0	set	4
  5981             00000008   fno_0	set	8
  5982                        	.block	1357
  5983                        	.sym	dp,4,138,6,32,87
  5984                        	.sym	fno,8,138,6,32,88
  5985                        	.line	1357
  5986 08:A385: A9 00 00     	lda	#$0
  5987 08:A388: AA           	tax
  5988 08:A389: A9 00 00     	lda	#$0
  5989                        L151:
  5990 08:A38C: A8           	tay
  5991 08:A38D: A5 02        	lda	<L148+2
  5992 08:A38F: 85 0A        	sta	<L148+2+8
  5993 08:A391: A5 01        	lda	<L148+1
  5994 08:A393: 85 09        	sta	<L148+1+8
  5995 08:A395: 2B           	pld
  5996 08:A396: 3B           	tsc
  5997 08:A397: 18           	clc
  5998 08:A398: 69 08 00     	adc	#L148+8
  5999 08:A39B: 1B           	tcs
  6000 08:A39C: 98           	tya
  6001 08:A39D: 6B           	rtl
  6002                        	.line	1357
  6003                        	.endblock	1357
  6004             00000000   L148	equ	0
  6005             00000001   L149	equ	1
  6006 08:A39E:              	ends
  6007                        	efunc
  6008                        	.endfunc	1357,1,0
  6009                        	.line	1357
  6010                        ;HRESULT k_dos_mkdir (const TCHAR* path){return 0;
                    }								
                    /* Create a sub directory */
  6011                        	.line	1358
  6012                        	.line	1358
  6013                        	FXDOS
  6014                        	xdef	~~k_dos_mkdir
  6015                        	func
  6016                        	.function	1358
  6017                        ~~k_dos_mkdir:
  6018                        	longa	on
  6019                        	longi	on
  6020 08:A39E: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 119


  6021 08:A39F: 38           	sec
  6022 08:A3A0: E9 00 00     	sbc	#L152
  6023 08:A3A3: 1B           	tcs
  6024 08:A3A4: 0B           	phd
  6025 08:A3A5: 5B           	tcd
  6026             00000004   path_0	set	4
  6027                        	.block	1358
  6028                        	.sym	path,4,142,6,32
  6029                        	.line	1358
  6030 08:A3A6: A9 00 00     	lda	#$0
  6031 08:A3A9: AA           	tax
  6032 08:A3AA: A9 00 00     	lda	#$0
  6033                        L155:
  6034 08:A3AD: A8           	tay
  6035 08:A3AE: A5 02        	lda	<L152+2
  6036 08:A3B0: 85 06        	sta	<L152+2+4
  6037 08:A3B2: A5 01        	lda	<L152+1
  6038 08:A3B4: 85 05        	sta	<L152+1+4
  6039 08:A3B6: 2B           	pld
  6040 08:A3B7: 3B           	tsc
  6041 08:A3B8: 18           	clc
  6042 08:A3B9: 69 04 00     	adc	#L152+4
  6043 08:A3BC: 1B           	tcs
  6044 08:A3BD: 98           	tya
  6045 08:A3BE: 6B           	rtl
  6046                        	.line	1358
  6047                        	.endblock	1358
  6048             00000000   L152	equ	0
  6049             00000001   L153	equ	1
  6050 08:A3BF:              	ends
  6051                        	efunc
  6052                        	.endfunc	1358,1,0
  6053                        	.line	1358
  6054                        ;HRESULT k_dos_unlink (const TCHAR* path){return 0
                    ;}								
                    /* Delete an existing file or directory */
  6055                        	.line	1359
  6056                        	.line	1359
  6057                        	FXDOS
  6058                        	xdef	~~k_dos_unlink
  6059                        	func
  6060                        	.function	1359
  6061                        ~~k_dos_unlink:
  6062                        	longa	on
  6063                        	longi	on
  6064 08:A3BF: 3B           	tsc
  6065 08:A3C0: 38           	sec
  6066 08:A3C1: E9 00 00     	sbc	#L156
  6067 08:A3C4: 1B           	tcs
  6068 08:A3C5: 0B           	phd
  6069 08:A3C6: 5B           	tcd
  6070             00000004   path_0	set	4
  6071                        	.block	1359
  6072                        	.sym	path,4,142,6,32
  6073                        	.line	1359
  6074 08:A3C7: A9 00 00     	lda	#$0
  6075 08:A3CA: AA           	tax
  6076 08:A3CB: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 120


  6077                        L159:
  6078 08:A3CE: A8           	tay
  6079 08:A3CF: A5 02        	lda	<L156+2
  6080 08:A3D1: 85 06        	sta	<L156+2+4
  6081 08:A3D3: A5 01        	lda	<L156+1
  6082 08:A3D5: 85 05        	sta	<L156+1+4
  6083 08:A3D7: 2B           	pld
  6084 08:A3D8: 3B           	tsc
  6085 08:A3D9: 18           	clc
  6086 08:A3DA: 69 04 00     	adc	#L156+4
  6087 08:A3DD: 1B           	tcs
  6088 08:A3DE: 98           	tya
  6089 08:A3DF: 6B           	rtl
  6090                        	.line	1359
  6091                        	.endblock	1359
  6092             00000000   L156	equ	0
  6093             00000001   L157	equ	1
  6094 08:A3E0:              	ends
  6095                        	efunc
  6096                        	.endfunc	1359,1,0
  6097                        	.line	1359
  6098                        ;HRESULT k_dos_rename (const TCHAR* path_old, cons
                    t TCHAR* path_new){return 0;}	/* Rename/Move a file or
                     directory */
  6099                        	.line	1360
  6100                        	.line	1360
  6101                        	FXDOS
  6102                        	xdef	~~k_dos_rename
  6103                        	func
  6104                        	.function	1360
  6105                        ~~k_dos_rename:
  6106                        	longa	on
  6107                        	longi	on
  6108 08:A3E0: 3B           	tsc
  6109 08:A3E1: 38           	sec
  6110 08:A3E2: E9 00 00     	sbc	#L160
  6111 08:A3E5: 1B           	tcs
  6112 08:A3E6: 0B           	phd
  6113 08:A3E7: 5B           	tcd
  6114             00000004   path_old_0	set	4
  6115             00000008   path_new_0	set	8
  6116                        	.block	1360
  6117                        	.sym	path_old,4,142,6,32
  6118                        	.sym	path_new,8,142,6,32
  6119                        	.line	1360
  6120 08:A3E8: A9 00 00     	lda	#$0
  6121 08:A3EB: AA           	tax
  6122 08:A3EC: A9 00 00     	lda	#$0
  6123                        L163:
  6124 08:A3EF: A8           	tay
  6125 08:A3F0: A5 02        	lda	<L160+2
  6126 08:A3F2: 85 0A        	sta	<L160+2+8
  6127 08:A3F4: A5 01        	lda	<L160+1
  6128 08:A3F6: 85 09        	sta	<L160+1+8
  6129 08:A3F8: 2B           	pld
  6130 08:A3F9: 3B           	tsc
  6131 08:A3FA: 18           	clc
  6132 08:A3FB: 69 08 00     	adc	#L160+8
  Mon Aug  9 2021 16:52                                                Page 121


  6133 08:A3FE: 1B           	tcs
  6134 08:A3FF: 98           	tya
  6135 08:A400: 6B           	rtl
  6136                        	.line	1360
  6137                        	.endblock	1360
  6138             00000000   L160	equ	0
  6139             00000001   L161	equ	1
  6140 08:A401:              	ends
  6141                        	efunc
  6142                        	.endfunc	1360,1,0
  6143                        	.line	1360
  6144                        ;HRESULT k_dos_stat (const TCHAR* path, FILINFO* f
                    no){return 0;}					/* Get f
                    ile status */
  6145                        	.line	1361
  6146                        	.line	1361
  6147                        	FXDOS
  6148                        	xdef	~~k_dos_stat
  6149                        	func
  6150                        	.function	1361
  6151                        ~~k_dos_stat:
  6152                        	longa	on
  6153                        	longi	on
  6154 08:A401: 3B           	tsc
  6155 08:A402: 38           	sec
  6156 08:A403: E9 00 00     	sbc	#L164
  6157 08:A406: 1B           	tcs
  6158 08:A407: 0B           	phd
  6159 08:A408: 5B           	tcd
  6160             00000004   path_0	set	4
  6161             00000008   fno_0	set	8
  6162                        	.block	1361
  6163                        	.sym	path,4,142,6,32
  6164                        	.sym	fno,8,138,6,32,88
  6165                        	.line	1361
  6166 08:A409: A9 00 00     	lda	#$0
  6167 08:A40C: AA           	tax
  6168 08:A40D: A9 00 00     	lda	#$0
  6169                        L167:
  6170 08:A410: A8           	tay
  6171 08:A411: A5 02        	lda	<L164+2
  6172 08:A413: 85 0A        	sta	<L164+2+8
  6173 08:A415: A5 01        	lda	<L164+1
  6174 08:A417: 85 09        	sta	<L164+1+8
  6175 08:A419: 2B           	pld
  6176 08:A41A: 3B           	tsc
  6177 08:A41B: 18           	clc
  6178 08:A41C: 69 08 00     	adc	#L164+8
  6179 08:A41F: 1B           	tcs
  6180 08:A420: 98           	tya
  6181 08:A421: 6B           	rtl
  6182                        	.line	1361
  6183                        	.endblock	1361
  6184             00000000   L164	equ	0
  6185             00000001   L165	equ	1
  6186 08:A422:              	ends
  6187                        	efunc
  6188                        	.endfunc	1361,1,0
  Mon Aug  9 2021 16:52                                                Page 122


  6189                        	.line	1361
  6190                        ;HRESULT k_dos_chmod (const TCHAR* path, BYTE attr
                    , BYTE mask){return 0;}			/* Change attrib
                    ute of a file/dir */
  6191                        	.line	1362
  6192                        	.line	1362
  6193                        	FXDOS
  6194                        	xdef	~~k_dos_chmod
  6195                        	func
  6196                        	.function	1362
  6197                        ~~k_dos_chmod:
  6198                        	longa	on
  6199                        	longi	on
  6200 08:A422: 3B           	tsc
  6201 08:A423: 38           	sec
  6202 08:A424: E9 00 00     	sbc	#L168
  6203 08:A427: 1B           	tcs
  6204 08:A428: 0B           	phd
  6205 08:A429: 5B           	tcd
  6206             00000004   path_0	set	4
  6207             00000008   attr_0	set	8
  6208             0000000A   mask_0	set	10
  6209                        	.block	1362
  6210                        	.sym	path,4,142,6,32
  6211                        	.sym	attr,8,14,6,8
  6212                        	.sym	mask,10,14,6,8
  6213                        	.line	1362
  6214 08:A42A: A9 00 00     	lda	#$0
  6215 08:A42D: AA           	tax
  6216 08:A42E: A9 00 00     	lda	#$0
  6217                        L171:
  6218 08:A431: A8           	tay
  6219 08:A432: A5 02        	lda	<L168+2
  6220 08:A434: 85 0A        	sta	<L168+2+8
  6221 08:A436: A5 01        	lda	<L168+1
  6222 08:A438: 85 09        	sta	<L168+1+8
  6223 08:A43A: 2B           	pld
  6224 08:A43B: 3B           	tsc
  6225 08:A43C: 18           	clc
  6226 08:A43D: 69 08 00     	adc	#L168+8
  6227 08:A440: 1B           	tcs
  6228 08:A441: 98           	tya
  6229 08:A442: 6B           	rtl
  6230                        	.line	1362
  6231                        	.endblock	1362
  6232             00000000   L168	equ	0
  6233             00000001   L169	equ	1
  6234 08:A443:              	ends
  6235                        	efunc
  6236                        	.endfunc	1362,1,0
  6237                        	.line	1362
  6238                        ;HRESULT k_dos_utime (const TCHAR* path, const FIL
                    INFO* fno){return 0;}			/* Change timest
                    amp of a file/dir */
  6239                        	.line	1363
  6240                        	.line	1363
  6241                        	FXDOS
  6242                        	xdef	~~k_dos_utime
  Mon Aug  9 2021 16:52                                                Page 123


  6243                        	func
  6244                        	.function	1363
  6245                        ~~k_dos_utime:
  6246                        	longa	on
  6247                        	longi	on
  6248 08:A443: 3B           	tsc
  6249 08:A444: 38           	sec
  6250 08:A445: E9 00 00     	sbc	#L172
  6251 08:A448: 1B           	tcs
  6252 08:A449: 0B           	phd
  6253 08:A44A: 5B           	tcd
  6254             00000004   path_0	set	4
  6255             00000008   fno_0	set	8
  6256                        	.block	1363
  6257                        	.sym	path,4,142,6,32
  6258                        	.sym	fno,8,138,6,32,88
  6259                        	.line	1363
  6260 08:A44B: A9 00 00     	lda	#$0
  6261 08:A44E: AA           	tax
  6262 08:A44F: A9 00 00     	lda	#$0
  6263                        L175:
  6264 08:A452: A8           	tay
  6265 08:A453: A5 02        	lda	<L172+2
  6266 08:A455: 85 0A        	sta	<L172+2+8
  6267 08:A457: A5 01        	lda	<L172+1
  6268 08:A459: 85 09        	sta	<L172+1+8
  6269 08:A45B: 2B           	pld
  6270 08:A45C: 3B           	tsc
  6271 08:A45D: 18           	clc
  6272 08:A45E: 69 08 00     	adc	#L172+8
  6273 08:A461: 1B           	tcs
  6274 08:A462: 98           	tya
  6275 08:A463: 6B           	rtl
  6276                        	.line	1363
  6277                        	.endblock	1363
  6278             00000000   L172	equ	0
  6279             00000001   L173	equ	1
  6280 08:A464:              	ends
  6281                        	efunc
  6282                        	.endfunc	1363,1,0
  6283                        	.line	1363
  6284                        ;HRESULT k_dos_chdir (const TCHAR* path){return 0;
                    }								
                    /* Change current directory */
  6285                        	.line	1364
  6286                        	.line	1364
  6287                        	FXDOS
  6288                        	xdef	~~k_dos_chdir
  6289                        	func
  6290                        	.function	1364
  6291                        ~~k_dos_chdir:
  6292                        	longa	on
  6293                        	longi	on
  6294 08:A464: 3B           	tsc
  6295 08:A465: 38           	sec
  6296 08:A466: E9 00 00     	sbc	#L176
  6297 08:A469: 1B           	tcs
  6298 08:A46A: 0B           	phd
  Mon Aug  9 2021 16:52                                                Page 124


  6299 08:A46B: 5B           	tcd
  6300             00000004   path_0	set	4
  6301                        	.block	1364
  6302                        	.sym	path,4,142,6,32
  6303                        	.line	1364
  6304 08:A46C: A9 00 00     	lda	#$0
  6305 08:A46F: AA           	tax
  6306 08:A470: A9 00 00     	lda	#$0
  6307                        L179:
  6308 08:A473: A8           	tay
  6309 08:A474: A5 02        	lda	<L176+2
  6310 08:A476: 85 06        	sta	<L176+2+4
  6311 08:A478: A5 01        	lda	<L176+1
  6312 08:A47A: 85 05        	sta	<L176+1+4
  6313 08:A47C: 2B           	pld
  6314 08:A47D: 3B           	tsc
  6315 08:A47E: 18           	clc
  6316 08:A47F: 69 04 00     	adc	#L176+4
  6317 08:A482: 1B           	tcs
  6318 08:A483: 98           	tya
  6319 08:A484: 6B           	rtl
  6320                        	.line	1364
  6321                        	.endblock	1364
  6322             00000000   L176	equ	0
  6323             00000001   L177	equ	1
  6324 08:A485:              	ends
  6325                        	efunc
  6326                        	.endfunc	1364,1,0
  6327                        	.line	1364
  6328                        ;HRESULT k_dos_chdrive (const TCHAR* path){return 
                    0;}								
                    /* Change current drive */
  6329                        	.line	1365
  6330                        	.line	1365
  6331                        	FXDOS
  6332                        	xdef	~~k_dos_chdrive
  6333                        	func
  6334                        	.function	1365
  6335                        ~~k_dos_chdrive:
  6336                        	longa	on
  6337                        	longi	on
  6338 08:A485: 3B           	tsc
  6339 08:A486: 38           	sec
  6340 08:A487: E9 00 00     	sbc	#L180
  6341 08:A48A: 1B           	tcs
  6342 08:A48B: 0B           	phd
  6343 08:A48C: 5B           	tcd
  6344             00000004   path_0	set	4
  6345                        	.block	1365
  6346                        	.sym	path,4,142,6,32
  6347                        	.line	1365
  6348 08:A48D: A9 00 00     	lda	#$0
  6349 08:A490: AA           	tax
  6350 08:A491: A9 00 00     	lda	#$0
  6351                        L183:
  6352 08:A494: A8           	tay
  6353 08:A495: A5 02        	lda	<L180+2
  6354 08:A497: 85 06        	sta	<L180+2+4
  Mon Aug  9 2021 16:52                                                Page 125


  6355 08:A499: A5 01        	lda	<L180+1
  6356 08:A49B: 85 05        	sta	<L180+1+4
  6357 08:A49D: 2B           	pld
  6358 08:A49E: 3B           	tsc
  6359 08:A49F: 18           	clc
  6360 08:A4A0: 69 04 00     	adc	#L180+4
  6361 08:A4A3: 1B           	tcs
  6362 08:A4A4: 98           	tya
  6363 08:A4A5: 6B           	rtl
  6364                        	.line	1365
  6365                        	.endblock	1365
  6366             00000000   L180	equ	0
  6367             00000001   L181	equ	1
  6368 08:A4A6:              	ends
  6369                        	efunc
  6370                        	.endfunc	1365,1,0
  6371                        	.line	1365
  6372                        ;HRESULT k_dos_getcwd (TCHAR* buff, UINT len){retu
                    rn 0;}							
                    /* Get current directory */
  6373                        	.line	1366
  6374                        	.line	1366
  6375                        	FXDOS
  6376                        	xdef	~~k_dos_getcwd
  6377                        	func
  6378                        	.function	1366
  6379                        ~~k_dos_getcwd:
  6380                        	longa	on
  6381                        	longi	on
  6382 08:A4A6: 3B           	tsc
  6383 08:A4A7: 38           	sec
  6384 08:A4A8: E9 00 00     	sbc	#L184
  6385 08:A4AB: 1B           	tcs
  6386 08:A4AC: 0B           	phd
  6387 08:A4AD: 5B           	tcd
  6388             00000004   buff_0	set	4
  6389             00000008   len_0	set	8
  6390                        	.block	1366
  6391                        	.sym	buff,4,142,6,32
  6392                        	.sym	len,8,16,6,16
  6393                        	.line	1366
  6394 08:A4AE: A9 00 00     	lda	#$0
  6395 08:A4B1: AA           	tax
  6396 08:A4B2: A9 00 00     	lda	#$0
  6397                        L187:
  6398 08:A4B5: A8           	tay
  6399 08:A4B6: A5 02        	lda	<L184+2
  6400 08:A4B8: 85 08        	sta	<L184+2+6
  6401 08:A4BA: A5 01        	lda	<L184+1
  6402 08:A4BC: 85 07        	sta	<L184+1+6
  6403 08:A4BE: 2B           	pld
  6404 08:A4BF: 3B           	tsc
  6405 08:A4C0: 18           	clc
  6406 08:A4C1: 69 06 00     	adc	#L184+6
  6407 08:A4C4: 1B           	tcs
  6408 08:A4C5: 98           	tya
  6409 08:A4C6: 6B           	rtl
  6410                        	.line	1366
  Mon Aug  9 2021 16:52                                                Page 126


  6411                        	.endblock	1366
  6412             00000000   L184	equ	0
  6413             00000001   L185	equ	1
  6414 08:A4C7:              	ends
  6415                        	efunc
  6416                        	.endfunc	1366,1,0
  6417                        	.line	1366
  6418                        ;HRESULT k_dos_getfree (const TCHAR* path, DWORD* 
                    nclst, FATFS** fatfs){return 0;}	/* Get number of free cl
                    usters on the drive */
  6419                        	.line	1367
  6420                        	.line	1367
  6421                        	FXDOS
  6422                        	xdef	~~k_dos_getfree
  6423                        	func
  6424                        	.function	1367
  6425                        ~~k_dos_getfree:
  6426                        	longa	on
  6427                        	longi	on
  6428 08:A4C7: 3B           	tsc
  6429 08:A4C8: 38           	sec
  6430 08:A4C9: E9 00 00     	sbc	#L188
  6431 08:A4CC: 1B           	tcs
  6432 08:A4CD: 0B           	phd
  6433 08:A4CE: 5B           	tcd
  6434             00000004   path_0	set	4
  6435             00000008   nclst_0	set	8
  6436             0000000C   fatfs_0	set	12
  6437                        	.block	1367
  6438                        	.sym	path,4,142,6,32
  6439                        	.sym	nclst,8,146,6,32
  6440                        	.sym	fatfs,12,1162,6,32,84
  6441                        	.line	1367
  6442 08:A4CF: A9 00 00     	lda	#$0
  6443 08:A4D2: AA           	tax
  6444 08:A4D3: A9 00 00     	lda	#$0
  6445                        L191:
  6446 08:A4D6: A8           	tay
  6447 08:A4D7: A5 02        	lda	<L188+2
  6448 08:A4D9: 85 0E        	sta	<L188+2+12
  6449 08:A4DB: A5 01        	lda	<L188+1
  6450 08:A4DD: 85 0D        	sta	<L188+1+12
  6451 08:A4DF: 2B           	pld
  6452 08:A4E0: 3B           	tsc
  6453 08:A4E1: 18           	clc
  6454 08:A4E2: 69 0C 00     	adc	#L188+12
  6455 08:A4E5: 1B           	tcs
  6456 08:A4E6: 98           	tya
  6457 08:A4E7: 6B           	rtl
  6458                        	.line	1367
  6459                        	.endblock	1367
  6460             00000000   L188	equ	0
  6461             00000001   L189	equ	1
  6462 08:A4E8:              	ends
  6463                        	efunc
  6464                        	.endfunc	1367,1,0
  6465                        	.line	1367
  6466                        ;HRESULT k_dos_getlabel (const TCHAR* path, TCHAR*
  Mon Aug  9 2021 16:52                                                Page 127


                     label, DWORD* vsn){return 0;}	/* Get volume label */
  6467                        	.line	1368
  6468                        	.line	1368
  6469                        	FXDOS
  6470                        	xdef	~~k_dos_getlabel
  6471                        	func
  6472                        	.function	1368
  6473                        ~~k_dos_getlabel:
  6474                        	longa	on
  6475                        	longi	on
  6476 08:A4E8: 3B           	tsc
  6477 08:A4E9: 38           	sec
  6478 08:A4EA: E9 00 00     	sbc	#L192
  6479 08:A4ED: 1B           	tcs
  6480 08:A4EE: 0B           	phd
  6481 08:A4EF: 5B           	tcd
  6482             00000004   path_0	set	4
  6483             00000008   label_0	set	8
  6484             0000000C   vsn_0	set	12
  6485                        	.block	1368
  6486                        	.sym	path,4,142,6,32
  6487                        	.sym	label,8,142,6,32
  6488                        	.sym	vsn,12,146,6,32
  6489                        	.line	1368
  6490 08:A4F0: A9 00 00     	lda	#$0
  6491 08:A4F3: AA           	tax
  6492 08:A4F4: A9 00 00     	lda	#$0
  6493                        L195:
  6494 08:A4F7: A8           	tay
  6495 08:A4F8: A5 02        	lda	<L192+2
  6496 08:A4FA: 85 0E        	sta	<L192+2+12
  6497 08:A4FC: A5 01        	lda	<L192+1
  6498 08:A4FE: 85 0D        	sta	<L192+1+12
  6499 08:A500: 2B           	pld
  6500 08:A501: 3B           	tsc
  6501 08:A502: 18           	clc
  6502 08:A503: 69 0C 00     	adc	#L192+12
  6503 08:A506: 1B           	tcs
  6504 08:A507: 98           	tya
  6505 08:A508: 6B           	rtl
  6506                        	.line	1368
  6507                        	.endblock	1368
  6508             00000000   L192	equ	0
  6509             00000001   L193	equ	1
  6510 08:A509:              	ends
  6511                        	efunc
  6512                        	.endfunc	1368,1,0
  6513                        	.line	1368
  6514                        ;HRESULT k_dos_setlabel (const TCHAR* label){retur
                    n 0;}							
                    /* Set volume label */
  6515                        	.line	1369
  6516                        	.line	1369
  6517                        	FXDOS
  6518                        	xdef	~~k_dos_setlabel
  6519                        	func
  6520                        	.function	1369
  6521                        ~~k_dos_setlabel:
  Mon Aug  9 2021 16:52                                                Page 128


  6522                        	longa	on
  6523                        	longi	on
  6524 08:A509: 3B           	tsc
  6525 08:A50A: 38           	sec
  6526 08:A50B: E9 00 00     	sbc	#L196
  6527 08:A50E: 1B           	tcs
  6528 08:A50F: 0B           	phd
  6529 08:A510: 5B           	tcd
  6530             00000004   label_0	set	4
  6531                        	.block	1369
  6532                        	.sym	label,4,142,6,32
  6533                        	.line	1369
  6534 08:A511: A9 00 00     	lda	#$0
  6535 08:A514: AA           	tax
  6536 08:A515: A9 00 00     	lda	#$0
  6537                        L199:
  6538 08:A518: A8           	tay
  6539 08:A519: A5 02        	lda	<L196+2
  6540 08:A51B: 85 06        	sta	<L196+2+4
  6541 08:A51D: A5 01        	lda	<L196+1
  6542 08:A51F: 85 05        	sta	<L196+1+4
  6543 08:A521: 2B           	pld
  6544 08:A522: 3B           	tsc
  6545 08:A523: 18           	clc
  6546 08:A524: 69 04 00     	adc	#L196+4
  6547 08:A527: 1B           	tcs
  6548 08:A528: 98           	tya
  6549 08:A529: 6B           	rtl
  6550                        	.line	1369
  6551                        	.endblock	1369
  6552             00000000   L196	equ	0
  6553             00000001   L197	equ	1
  6554 08:A52A:              	ends
  6555                        	efunc
  6556                        	.endfunc	1369,1,0
  6557                        	.line	1369
  6558                        ;HRESULT k_dos_forward (FIL* fp, UINT(*func)(const
                     BYTE*,UINT), UINT btf, UINT* bf){return 0;}	/* Forwa
                    rd data to the stream */
  6559                        	.line	1370
  6560                        	.line	1370
  6561                        	FXDOS
  6562                        	xdef	~~k_dos_forward
  6563                        	func
  6564                        	.function	1370
  6565                        ~~k_dos_forward:
  6566                        	longa	on
  6567                        	longi	on
  6568 08:A52A: 3B           	tsc
  6569 08:A52B: 38           	sec
  6570 08:A52C: E9 00 00     	sbc	#L200
  6571 08:A52F: 1B           	tcs
  6572 08:A530: 0B           	phd
  6573 08:A531: 5B           	tcd
  6574             00000004   fp_0	set	4
  6575             00000008   func_0	set	8
  6576             0000000C   btf_0	set	12
  6577             0000000E   bf_0	set	14
  Mon Aug  9 2021 16:52                                                Page 129


  6578                        	.block	1370
  6579                        	.sym	fp,4,138,6,32,86
  6580                        	.sym	func,8,656,6,32
  6581                        	.sym	btf,12,16,6,16
  6582                        	.sym	bf,14,144,6,32
  6583                        	.line	1370
  6584 08:A532: A9 00 00     	lda	#$0
  6585 08:A535: AA           	tax
  6586 08:A536: A9 00 00     	lda	#$0
  6587                        L203:
  6588 08:A539: A8           	tay
  6589 08:A53A: A5 02        	lda	<L200+2
  6590 08:A53C: 85 10        	sta	<L200+2+14
  6591 08:A53E: A5 01        	lda	<L200+1
  6592 08:A540: 85 0F        	sta	<L200+1+14
  6593 08:A542: 2B           	pld
  6594 08:A543: 3B           	tsc
  6595 08:A544: 18           	clc
  6596 08:A545: 69 0E 00     	adc	#L200+14
  6597 08:A548: 1B           	tcs
  6598 08:A549: 98           	tya
  6599 08:A54A: 6B           	rtl
  6600                        	.line	1370
  6601                        	.endblock	1370
  6602             00000000   L200	equ	0
  6603             00000001   L201	equ	1
  6604 08:A54B:              	ends
  6605                        	efunc
  6606                        	.endfunc	1370,1,0
  6607                        	.line	1370
  6608                        ;HRESULT k_dos_expand (FIL* fp, FSIZE_t fsz, BYTE 
                    opt){return 0;}					/* Alloc
                    ate a contiguous block to the file */
  6609                        	.line	1371
  6610                        	.line	1371
  6611                        	FXDOS
  6612                        	xdef	~~k_dos_expand
  6613                        	func
  6614                        	.function	1371
  6615                        ~~k_dos_expand:
  6616                        	longa	on
  6617                        	longi	on
  6618 08:A54B: 3B           	tsc
  6619 08:A54C: 38           	sec
  6620 08:A54D: E9 00 00     	sbc	#L204
  6621 08:A550: 1B           	tcs
  6622 08:A551: 0B           	phd
  6623 08:A552: 5B           	tcd
  6624             00000004   fp_0	set	4
  6625             00000008   fsz_0	set	8
  6626             0000000C   opt_0	set	12
  6627                        	.block	1371
  6628                        	.sym	fp,4,138,6,32,86
  6629                        	.sym	fsz,8,18,6,32
  6630                        	.sym	opt,12,14,6,8
  6631                        	.line	1371
  6632 08:A553: A9 00 00     	lda	#$0
  6633 08:A556: AA           	tax
  Mon Aug  9 2021 16:52                                                Page 130


  6634 08:A557: A9 00 00     	lda	#$0
  6635                        L207:
  6636 08:A55A: A8           	tay
  6637 08:A55B: A5 02        	lda	<L204+2
  6638 08:A55D: 85 0C        	sta	<L204+2+10
  6639 08:A55F: A5 01        	lda	<L204+1
  6640 08:A561: 85 0B        	sta	<L204+1+10
  6641 08:A563: 2B           	pld
  6642 08:A564: 3B           	tsc
  6643 08:A565: 18           	clc
  6644 08:A566: 69 0A 00     	adc	#L204+10
  6645 08:A569: 1B           	tcs
  6646 08:A56A: 98           	tya
  6647 08:A56B: 6B           	rtl
  6648                        	.line	1371
  6649                        	.endblock	1371
  6650             00000000   L204	equ	0
  6651             00000001   L205	equ	1
  6652 08:A56C:              	ends
  6653                        	efunc
  6654                        	.endfunc	1371,1,0
  6655                        	.line	1371
  6656                        ;HRESULT k_dos_mount (FATFS* fs, const TCHAR* path
                    , BYTE opt){return 0;}			/* Mount/Unmount
                     a logical drive */
  6657                        	.line	1372
  6658                        	.line	1372
  6659                        	FXDOS
  6660                        	xdef	~~k_dos_mount
  6661                        	func
  6662                        	.function	1372
  6663                        ~~k_dos_mount:
  6664                        	longa	on
  6665                        	longi	on
  6666 08:A56C: 3B           	tsc
  6667 08:A56D: 38           	sec
  6668 08:A56E: E9 00 00     	sbc	#L208
  6669 08:A571: 1B           	tcs
  6670 08:A572: 0B           	phd
  6671 08:A573: 5B           	tcd
  6672             00000004   fs_0	set	4
  6673             00000008   path_0	set	8
  6674             0000000C   opt_0	set	12
  6675                        	.block	1372
  6676                        	.sym	fs,4,138,6,32,84
  6677                        	.sym	path,8,142,6,32
  6678                        	.sym	opt,12,14,6,8
  6679                        	.line	1372
  6680 08:A574: A9 00 00     	lda	#$0
  6681 08:A577: AA           	tax
  6682 08:A578: A9 00 00     	lda	#$0
  6683                        L211:
  6684 08:A57B: A8           	tay
  6685 08:A57C: A5 02        	lda	<L208+2
  6686 08:A57E: 85 0C        	sta	<L208+2+10
  6687 08:A580: A5 01        	lda	<L208+1
  6688 08:A582: 85 0B        	sta	<L208+1+10
  6689 08:A584: 2B           	pld
  Mon Aug  9 2021 16:52                                                Page 131


  6690 08:A585: 3B           	tsc
  6691 08:A586: 18           	clc
  6692 08:A587: 69 0A 00     	adc	#L208+10
  6693 08:A58A: 1B           	tcs
  6694 08:A58B: 98           	tya
  6695 08:A58C: 6B           	rtl
  6696                        	.line	1372
  6697                        	.endblock	1372
  6698             00000000   L208	equ	0
  6699             00000001   L209	equ	1
  6700 08:A58D:              	ends
  6701                        	efunc
  6702                        	.endfunc	1372,1,0
  6703                        	.line	1372
  6704                        ;HRESULT k_dos_mkfs (const TCHAR* path, const MKFS
                    _PARM* opt, void* work, UINT len){return 0;}	/* Creat
                    e a FAT volume */
  6705                        	.line	1373
  6706                        	.line	1373
  6707                        	FXDOS
  6708                        	xdef	~~k_dos_mkfs
  6709                        	func
  6710                        	.function	1373
  6711                        ~~k_dos_mkfs:
  6712                        	longa	on
  6713                        	longi	on
  6714 08:A58D: 3B           	tsc
  6715 08:A58E: 38           	sec
  6716 08:A58F: E9 00 00     	sbc	#L212
  6717 08:A592: 1B           	tcs
  6718 08:A593: 0B           	phd
  6719 08:A594: 5B           	tcd
  6720             00000004   path_0	set	4
  6721             00000008   opt_0	set	8
  6722             0000000C   work_0	set	12
  6723             00000010   len_0	set	16
  6724                        	.block	1373
  6725                        	.sym	path,4,142,6,32
  6726                        	.sym	opt,8,138,6,32,89
  6727                        	.sym	work,12,129,6,32
  6728                        	.sym	len,16,16,6,16
  6729                        	.line	1373
  6730 08:A595: A9 00 00     	lda	#$0
  6731 08:A598: AA           	tax
  6732 08:A599: A9 00 00     	lda	#$0
  6733                        L215:
  6734 08:A59C: A8           	tay
  6735 08:A59D: A5 02        	lda	<L212+2
  6736 08:A59F: 85 10        	sta	<L212+2+14
  6737 08:A5A1: A5 01        	lda	<L212+1
  6738 08:A5A3: 85 0F        	sta	<L212+1+14
  6739 08:A5A5: 2B           	pld
  6740 08:A5A6: 3B           	tsc
  6741 08:A5A7: 18           	clc
  6742 08:A5A8: 69 0E 00     	adc	#L212+14
  6743 08:A5AB: 1B           	tcs
  6744 08:A5AC: 98           	tya
  6745 08:A5AD: 6B           	rtl
  Mon Aug  9 2021 16:52                                                Page 132


  6746                        	.line	1373
  6747                        	.endblock	1373
  6748             00000000   L212	equ	0
  6749             00000001   L213	equ	1
  6750 08:A5AE:              	ends
  6751                        	efunc
  6752                        	.endfunc	1373,1,0
  6753                        	.line	1373
  6754                        ;HRESULT k_dos_fdisk (BYTE pdrv, const LBA_t ptbl[
                    ], void* work){return 0;}		/* Divide a physical dri
                    ve into some partitions */
  6755                        	.line	1374
  6756                        	.line	1374
  6757                        	FXDOS
  6758                        	xdef	~~k_dos_fdisk
  6759                        	func
  6760                        	.function	1374
  6761                        ~~k_dos_fdisk:
  6762                        	longa	on
  6763                        	longi	on
  6764 08:A5AE: 3B           	tsc
  6765 08:A5AF: 38           	sec
  6766 08:A5B0: E9 00 00     	sbc	#L216
  6767 08:A5B3: 1B           	tcs
  6768 08:A5B4: 0B           	phd
  6769 08:A5B5: 5B           	tcd
  6770             00000004   pdrv_0	set	4
  6771             00000006   ptbl_0	set	6
  6772             0000000A   work_0	set	10
  6773                        	.block	1374
  6774                        	.sym	pdrv,4,14,6,8
  6775                        	.sym	ptbl,6,146,6,32
  6776                        	.sym	work,10,129,6,32
  6777                        	.line	1374
  6778 08:A5B6: A9 00 00     	lda	#$0
  6779 08:A5B9: AA           	tax
  6780 08:A5BA: A9 00 00     	lda	#$0
  6781                        L219:
  6782 08:A5BD: A8           	tay
  6783 08:A5BE: A5 02        	lda	<L216+2
  6784 08:A5C0: 85 0C        	sta	<L216+2+10
  6785 08:A5C2: A5 01        	lda	<L216+1
  6786 08:A5C4: 85 0B        	sta	<L216+1+10
  6787 08:A5C6: 2B           	pld
  6788 08:A5C7: 3B           	tsc
  6789 08:A5C8: 18           	clc
  6790 08:A5C9: 69 0A 00     	adc	#L216+10
  6791 08:A5CC: 1B           	tcs
  6792 08:A5CD: 98           	tya
  6793 08:A5CE: 6B           	rtl
  6794                        	.line	1374
  6795                        	.endblock	1374
  6796             00000000   L216	equ	0
  6797             00000001   L217	equ	1
  6798 08:A5CF:              	ends
  6799                        	efunc
  6800                        	.endfunc	1374,1,0
  6801                        	.line	1374
  Mon Aug  9 2021 16:52                                                Page 133


  6802                        ;HRESULT k_dos_setcp (WORD cp){return 0;}
  6803                        	.line	1375
  6804                        	.line	1375
  6805                        	FXDOS
  6806                        	xdef	~~k_dos_setcp
  6807                        	func
  6808                        	.function	1375
  6809                        ~~k_dos_setcp:
  6810                        	longa	on
  6811                        	longi	on
  6812 08:A5CF: 3B           	tsc
  6813 08:A5D0: 38           	sec
  6814 08:A5D1: E9 00 00     	sbc	#L220
  6815 08:A5D4: 1B           	tcs
  6816 08:A5D5: 0B           	phd
  6817 08:A5D6: 5B           	tcd
  6818             00000004   cp_0	set	4
  6819                        	.block	1375
  6820                        	.sym	cp,4,5,6,16
  6821                        	.line	1375
  6822 08:A5D7: A9 00 00     	lda	#$0
  6823 08:A5DA: AA           	tax
  6824 08:A5DB: A9 00 00     	lda	#$0
  6825                        L223:
  6826 08:A5DE: A8           	tay
  6827 08:A5DF: A5 02        	lda	<L220+2
  6828 08:A5E1: 85 04        	sta	<L220+2+2
  6829 08:A5E3: A5 01        	lda	<L220+1
  6830 08:A5E5: 85 03        	sta	<L220+1+2
  6831 08:A5E7: 2B           	pld
  6832 08:A5E8: 3B           	tsc
  6833 08:A5E9: 18           	clc
  6834 08:A5EA: 69 02 00     	adc	#L220+2
  6835 08:A5ED: 1B           	tcs
  6836 08:A5EE: 98           	tya
  6837 08:A5EF: 6B           	rtl
  6838                        	.line	1375
  6839                        	.endblock	1375
  6840             00000000   L220	equ	0
  6841             00000001   L221	equ	1
  6842 08:A5F0:              	ends
  6843                        	efunc
  6844                        	.endfunc	1375,1,0
  6845                        	.line	1375
  6846                        ;
  6847                        ;
  6848                        ;
  6849                        ;
  6850                        	.line	1378
  6851                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",1375
  6852                        	xref	~~f_mount
  6853                        	xref	~~f_findnext
  6854                        	xref	~~f_findfirst
  6855                        	xref	~~f_closedir
  6856                        	xref	~~f_opendir
  6857                        	xref	~~f_close
  6858                        	xref	~~f_open
  Mon Aug  9 2021 16:52                                                Page 134


  6859                        	xref	~~k_user_LoadResource
  6860                        	xref	~~k_mem_deallocate_heap
  6861                        	xref	~~k_mem_allocate_heap
  6862                        	xref	~~k_string_copy_to_delimiter
  6863                        	xref	~~k_bytetohex
  6864                        	xref	~~k_get_c256_minor_version
  6865                        	xref	~~k_get_c256_major_version
  6866                        	xref	~~k_debug_nstrings
  6867                        	xref	~~k_debug_integer
  6868                        	xref	~~k_debug_pointer
  6869                        	xref	~~k_debug_string
  6870                        	xref	~~k_unlock_irq
  6871                        	xref	~~k_lock_irq
  6872                        	xref	~~k_nodelist_removefromlist
  6873                        	xref	~~k_nodelist_searchByType
  6874                        	xref	~~k_nodelist_addtolist
  6875                        	xref	~~k_nodelist_allocate_list
  6876                        	xref	~~strcpy
  6877                        	xref	~~strcmp
  6878                        	xref	~~strcat
  6879                        	xref	~~memset
  6880                        	xref	~~memcpy
  6881                        	xref	~~free
  6882                        	xref	~~g_irq_handlers
  6883                        	udata
  6884                        	xdef	~~fxdosDevice
  6885                        ~~fxdosDevice
  6886 00:0000:              	ds	718
  6887 00:02CE:              	ends
  6888                        	.sym	~~k_dos_deallocate_fileinfo,~~k_dos_deal
                    locate_fileinfo,65,2,0
  6889                        	.sym	~~g_irq_handlers,~~g_irq_handlers,874,18
                    ,0,60,4,8
  6890                        	.sym	~~_k_dos_deviceinstance,~~_k_dos_devicei
                    nstance,138,3,32,6
  6891                        	.sym	~~_k_dos_devicedrivers,~~_k_dos_devicedr
                    ivers,138,3,32,6
  6892                        	.sym	~~fxdosDevice,~~fxdosDevice,10,2,5744,12
                    7
  6893                        	.sym	~~sectorBuffer,~~sectorBuffer,142,3,32
  6894                        	.sym	~~k_dos_setcp,~~k_dos_setcp,82,2,0
  6895                        	.sym	~~k_dos_fdisk,~~k_dos_fdisk,82,2,0
  6896                        	.sym	~~k_dos_mkfs,~~k_dos_mkfs,82,2,0
  6897                        	.sym	~~k_dos_mount,~~k_dos_mount,82,2,0
  6898                        	.sym	~~k_dos_expand,~~k_dos_expand,82,2,0
  6899                        	.sym	~~k_dos_forward,~~k_dos_forward,82,2,0
  6900                        	.sym	~~k_dos_setlabel,~~k_dos_setlabel,82,2,0
  6901                        	.sym	~~k_dos_getlabel,~~k_dos_getlabel,82,2,0
  6902                        	.sym	~~k_dos_getfree,~~k_dos_getfree,82,2,0
  6903                        	.sym	~~k_dos_getcwd,~~k_dos_getcwd,82,2,0
  6904                        	.sym	~~k_dos_chdrive,~~k_dos_chdrive,82,2,0
  6905                        	.sym	~~k_dos_chdir,~~k_dos_chdir,82,2,0
  6906                        	.sym	~~k_dos_utime,~~k_dos_utime,82,2,0
  6907                        	.sym	~~k_dos_chmod,~~k_dos_chmod,82,2,0
  6908                        	.sym	~~k_dos_stat,~~k_dos_stat,82,2,0
  6909                        	.sym	~~k_dos_rename,~~k_dos_rename,82,2,0
  6910                        	.sym	~~k_dos_unlink,~~k_dos_unlink,82,2,0
  6911                        	.sym	~~k_dos_mkdir,~~k_dos_mkdir,82,2,0
  Mon Aug  9 2021 16:52                                                Page 135


  6912                        	.sym	~~k_dos_findnext,~~k_dos_findnext,82,2,0
  6913                        	.sym	~~k_dos_findfirst,~~k_dos_findfirst,82,2
                    ,0
  6914                        	.sym	~~k_dos_readdir,~~k_dos_readdir,82,2,0
  6915                        	.sym	~~k_dos_closedir,~~k_dos_closedir,82,2,0
  6916                        	.sym	~~k_dos_opendir,~~k_dos_opendir,82,2,0
  6917                        	.sym	~~k_dos_sync,~~k_dos_sync,82,2,0
  6918                        	.sym	~~k_dos_truncate,~~k_dos_truncate,82,2,0
  6919                        	.sym	~~k_dos_lseek,~~k_dos_lseek,82,2,0
  6920                        	.sym	~~k_dos_write,~~k_dos_write,82,2,0
  6921                        	.sym	~~k_dos_read,~~k_dos_read,82,2,0
  6922                        	.sym	~~k_dos_close,~~k_dos_close,82,2,0
  6923                        	.sym	~~k_dos_open,~~k_dos_open,1098,2,32,130
  6924                        	.sym	~~k_dos_findfiles_to_nodes,~~k_dos_findf
                    iles_to_nodes,1098,2,32,6
  6925                        	.sym	~~k_get_dos_device,~~k_get_dos_device,10
                    98,2,32,127
  6926                        	.sym	~~k_get_device_driver,~~k_get_device_dri
                    ver,1098,2,32,58
  6927                        	.sym	FILE,0,138,14,32,130
  6928                        	.sym	FILE_POINTER,0,10,14,112,130
  6929                        	.sym	~~k_dos_load_drivers,~~k_dos_load_driver
                    s,1102,2,32
  6930                        	.sym	~~k_dos_load_driver,~~k_dos_load_driver,
                    1089,2,32
  6931                        	.sym	~~k_dos_ext_load_driver,~~k_dos_ext_load
                    _driver,1089,2,32
  6932                        	.sym	~~k_read_dos_directory,~~k_read_dos_dire
                    ctory,1098,2,32,6
  6933                        	.sym	~~k_close_dos_device,~~k_close_dos_devic
                    e,78,2,0
  6934                        	.sym	~~k_create_dos_device,~~k_create_dos_dev
                    ice,1098,2,32,127
  6935                        	.sym	PDOSHANDLE,0,138,14,32,129
  6936                        	.sym	DOSHANDLE,0,10,14,80,129
  6937                        	.sym	PFXDOSDEVICE,0,138,14,32,127
  6938                        	.sym	FXDOSDEVICE,0,10,14,5744,127
  6939                        	.sym	DOSINITDEVICE,0,641,14,32
  6940                        	.sym	DOSSECTORWRITER,0,654,14,32
  6941                        	.sym	DOSSECTORREADER,0,654,14,32
  6942                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,126
  6943                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,126
  6944                        	.sym	PIDSECTOR,0,138,14,32,103
  6945                        	.sym	IDSECTOR,0,10,14,2048,103
  6946                        	.sym	PLFN,0,138,14,32,102
  6947                        	.sym	LFN,0,10,14,256,102
  6948                        	.sym	PFAT16ENTRYLONG,0,138,14,32,101
  6949                        	.sym	FAT16ENTRYLONG,0,10,14,288,101
  6950                        	.sym	PFAT16ENTRY,0,138,14,32,100
  6951                        	.sym	FAT16ENTRY,0,10,14,256,100
  6952                        	.sym	Fat16BootSector,0,10,14,4096,99
  6953                        	.sym	PPARTITIONTABLE,0,138,14,32,98
  6954                        	.sym	PARTITIONTABLE,0,10,14,128,98
  6955                        	.sym	PFATBOOTSECTOR,0,138,14,32,97
  6956                        	.sym	FATBOOTSECTOR,0,10,14,928,97
  6957                        	.sym	fat_BS_t,0,10,14,688,96
  6958                        	.sym	fat_extBS_16_t,0,10,14,192,95
  6959                        	.sym	PFAT32EXT,0,138,14,32,94
  Mon Aug  9 2021 16:52                                                Page 136


  6960                        	.sym	fat_extBS_32_t,0,10,14,416,94
  6961                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,93
  6962                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,93
  6963                        	.sym	PFILEINFO,0,138,14,32,92
  6964                        	.sym	FILEINFO,0,10,14,136,92
  6965                        	.sym	PDISKINFO,0,138,14,32,91
  6966                        	.sym	DISKINFO,0,10,14,416,91
  6967                        	.sym	PDIRENTRY,0,138,14,32,90
  6968                        	.sym	DIRENTRY,0,10,14,256,90
  6969                        	.sym	DRESULT,0,5,14,16
  6970                        	.sym	DSTATUS,0,14,14,8
  6971                        	.sym	~~f_mount,~~f_mount,69,18,0
  6972                        	.sym	~~f_findnext,~~f_findnext,69,18,0
  6973                        	.sym	~~f_findfirst,~~f_findfirst,69,18,0
  6974                        	.sym	~~f_closedir,~~f_closedir,69,18,0
  6975                        	.sym	~~f_opendir,~~f_opendir,69,18,0
  6976                        	.sym	~~f_close,~~f_close,69,18,0
  6977                        	.sym	~~f_open,~~f_open,69,18,0
  6978                        	.sym	FRESULT,0,5,14,16
  6979                        	.sym	MKFS_PARM,0,10,14,80,89
  6980                        	.sym	FILINFO,0,10,14,2224,88
  6981                        	.sym	DIR,0,10,14,416,87
  6982                        	.sym	FIL,0,10,14,4400,86
  6983                        	.sym	FFOBJID,0,10,14,128,85
  6984                        	.sym	FATFS,0,10,14,4504,84
  6985                        	.sym	LBA_t,0,18,14,32
  6986                        	.sym	FSIZE_t,0,18,14,32
  6987                        	.sym	TCHAR,0,14,14,8
  6988                        	.sym	PCOMMANDARGS,0,138,14,32,83
  6989                        	.sym	COMMANDARGS,0,10,14,64,83
  6990                        	.sym	PTOKENIZESTATE,0,133,14,32
  6991                        	.sym	TOKENIZESTATE,0,5,14,16
  6992                        	.sym	PTOKEN,0,138,14,32,82
  6993                        	.sym	TOKEN,0,10,14,64,82
  6994                        	.sym	PTOKENTYPE,0,133,14,32
  6995                        	.sym	TOKENTYPE,0,5,14,16
  6996                        	.sym	FXCommandHandler,0,656,14,32
  6997                        	.sym	PCONSOLECTX,0,138,14,32,81
  6998                        	.sym	CONSOLECTX,0,10,14,1144,81
  6999                        	.sym	PSPINNERCTX,0,138,14,32,80
  7000                        	.sym	SPINNERCTX,0,10,14,48,80
  7001                        	.sym	HCLIP,0,138,14,32,79
  7002                        	.sym	PCLIPBOARD_DATA,0,138,14,32,79
  7003                        	.sym	CLIPBOARD_DATA,0,10,14,168,79
  7004                        	.sym	PEVENTMANAGER,0,138,14,32,78
  7005                        	.sym	EVENTMANAGER,0,10,14,192,78
  7006                        	.sym	EV_RUN,0,656,14,32
  7007                        	.sym	EV_QUERY_METRIC,0,656,14,32
  7008                        	.sym	EV_CONFIGURE,0,656,14,32
  7009                        	.sym	EV_UNINIT,0,641,14,32
  7010                        	.sym	EV_INIT,0,8833,14,32
  7011                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,77
  7012                        	.sym	MOUSE_MSG_STATE,0,10,14,184,77
  7013                        	.sym	PFXEVENTPROCESS,0,138,14,32,76
  7014                        	.sym	FXEVENTPROCESS,0,10,14,64,76
  7015                        	.sym	FXASYNCPROCESS,0,641,14,32
  7016                        	.sym	PMARSHALDATA,0,139,14,32,75
  7017                        	.sym	MARSHALDATA,0,11,14,32,75
  Mon Aug  9 2021 16:52                                                Page 137


  7018                        	.sym	FXIDLEPROCESS,0,641,14,32
  7019                        	.sym	FXEventProc,0,641,14,32
  7020                        	.sym	PMOUSEMSGDATA,0,138,14,32,74
  7021                        	.sym	MOUSEMSGDATA,0,10,14,64,74
  7022                        	.sym	MSGIRQ,0,5,14,16
  7023                        	.sym	MAINLOOPARGS,0,10,14,16,73
  7024                        	.sym	PEACHCHILD_MSG,0,138,14,32,72
  7025                        	.sym	EACHCHILD_MSG,0,10,14,64,72
  7026                        	.sym	PMSGBOX_DATA,0,138,14,32,71
  7027                        	.sym	MSGBOX_DATA,0,10,14,96,71
  7028                        	.sym	PDESKTOP_DATA,0,138,14,32,70
  7029                        	.sym	DESKTOP_DATA,0,10,14,64,70
  7030                        	.sym	~~k_user_LoadResource,~~k_user_LoadResou
                    rce,1089,18,32
  7031                        	.sym	PWINDOWMANAGER,0,138,14,32,69
  7032                        	.sym	WINDOWMANAGER,0,10,14,160,69
  7033                        	.sym	WM_DOPROCS,0,641,14,32
  7034                        	.sym	WM_QUERY_METRIC,0,656,14,32
  7035                        	.sym	WM_CONFIGURE,0,656,14,32
  7036                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  7037                        	.sym	WM_EVENTS,0,641,14,32
  7038                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,68
  7039                        	.sym	CUR_PALETTE_MAP,0,10,14,400,68
  7040                        	.sym	PCLICKDETECTED,0,138,14,32,67
  7041                        	.sym	CLICKDETECTED,0,10,14,64,67
  7042                        	.sym	OBJECTCLICKED,0,641,14,32
  7043                        	.sym	PALLOCATIONHEADER,0,138,14,32,66
  7044                        	.sym	ALLOCATIONHEADER,0,10,14,80,66
  7045                        	.sym	PIPCPORT,0,138,14,32,65
  7046                        	.sym	IPCPORT,0,10,14,144,65
  7047                        	.sym	~~k_mem_deallocate_heap,~~k_mem_dealloca
                    te_heap,65,18,0
  7048                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
  7049                        	.sym	MemoryCallback,0,641,14,32
  7050                        	.sym	PFXMEMORYMAP,0,138,14,32,64
  7051                        	.sym	FXMEMORYMAP,0,10,14,2072,64
  7052                        	.sym	UMM_HEAP_INFO,0,10,14,256,63
  7053                        	.sym	PEXECUTIVE,0,138,14,32,62
  7054                        	.sym	EXECUTIVE,0,10,14,128,62
  7055                        	.sym	EX_QUERY_METRIC,0,656,14,32
  7056                        	.sym	EX_CONFIGURE,0,656,14,32
  7057                        	.sym	EX_UNINIT,0,641,14,32
  7058                        	.sym	EX_INIT,0,8833,14,32
  7059                        	.sym	~~k_string_copy_to_delimiter,~~k_string_
                    copy_to_delimiter,1102,18,32
  7060                        	.sym	~~k_bytetohex,~~k_bytetohex,1102,18,32
  7061                        	.sym	PFXSTRING,0,138,14,32,61
  7062                        	.sym	FXSTRING,0,10,14,64,61
  7063                        	.sym	PIRQCHAIN,0,138,14,32,60
  7064                        	.sym	IRQCHAIN,0,10,14,128,60
  7065                        	.sym	DEVICEDRIVER_COMMAND,0,654,14,32
  7066                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  7067                        	.sym	DEVICEDRIVER_WRITE,0,654,14,32
  7068                        	.sym	DEVICEDRIVER_READ,0,654,14,32
  7069                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  7070                        	.sym	DEVICEDRIVER_IRQ,0,641,14,32
  7071                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,59
  Mon Aug  9 2021 16:52                                                Page 138


  7072                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,59
  7073                        	.sym	GETDRIVERDEF,0,8842,14,32,58
  7074                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,58
  7075                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,58
  7076                        	.sym	~~k_get_c256_minor_version,~~k_get_c256_
                    minor_version,65,18,0
  7077                        	.sym	~~k_get_c256_major_version,~~k_get_c256_
                    major_version,65,18,0
  7078                        	.sym	~~k_debug_nstrings,~~k_debug_nstrings,65
                    ,18,0
  7079                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  7080                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
  7081                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  7082                        	.sym	~~k_unlock_irq,~~k_unlock_irq,80,18,0
  7083                        	.sym	~~k_lock_irq,~~k_lock_irq,80,18,0
  7084                        	.sym	PSEGMENTHEADER,0,138,14,32,57
  7085                        	.sym	SEGMENTHEADER,0,10,14,160,57
  7086                        	.sym	PDEBUGBYTEBITS,0,138,14,32,56
  7087                        	.sym	DEBUGBYTEBITS,0,10,14,8,56
  7088                        	.sym	PFXENVIRONMENT,0,138,14,32,55
  7089                        	.sym	FXENVIRONMENT,0,10,14,96,55
  7090                        	.sym	PFXZEROPAGE,0,138,14,32,54
  7091                        	.sym	FXZEROPAGE,0,10,14,720,54
  7092                        	.sym	IRQBUFFER,0,10,14,32,53
  7093                        	.sym	KERNELTRAPCALL,0,641,14,32
  7094                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,52
  7095                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,52
  7096                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  7097                        	.sym	FOREACHNODE,0,641,14,32
  7098                        	.sym	~~k_nodelist_removefromlist,~~k_nodelist
                    _removefromlist,1098,18,32,5
  7099                        	.sym	~~k_nodelist_searchByType,~~k_nodelist_s
                    earchByType,1098,18,32,5
  7100                        	.sym	~~k_nodelist_addtolist,~~k_nodelist_addt
                    olist,1098,18,32,5
  7101                        	.sym	~~k_nodelist_allocate_list,~~k_nodelist_
                    allocate_list,1098,18,32,6
  7102                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,51
  7103                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,51
  7104                        	.sym	PFXRFHEADER_STRING,0,138,14,32,50
  7105                        	.sym	FXRFHEADER_STRING,0,10,14,32,50
  7106                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
  7107                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
  7108                        	.sym	PFXRFHEADER,0,138,14,32,48
  7109                        	.sym	FXRFHEADER,0,10,14,72,48
  7110                        	.sym	PFXCOMBUFFER,0,138,14,32,47
  7111                        	.sym	FXCOMBUFFER,0,10,14,2080,47
  7112                        	.sym	PSUBMENULIST,0,138,14,32,46
  7113                        	.sym	SUBMENULIST,0,10,14,40,46
  7114                        	.sym	HSUBMENU,0,7,14,32
  7115                        	.sym	PSUBMENU,0,138,14,32,45
  7116                        	.sym	SUBMENU,0,10,14,64,45
  7117                        	.sym	MenuAction,0,641,14,32
  7118                        	.sym	PMENUANCHOR,0,138,14,32,44
  7119                        	.sym	MENUANCHOR,0,10,14,272,44
  Mon Aug  9 2021 16:52                                                Page 139


  7120                        	.sym	PMSGBOX,0,138,14,32,43
  7121                        	.sym	MSGBOX,0,10,14,144,43
  7122                        	.sym	PTEXTBOX,0,138,14,32,42
  7123                        	.sym	TEXTBOX,0,10,14,144,42
  7124                        	.sym	PLISTBOX,0,138,14,32,41
  7125                        	.sym	LISTBOX,0,10,14,240,41
  7126                        	.sym	PSCROLLBAR,0,138,14,32,40
  7127                        	.sym	SCROLLBAR,0,10,14,240,40
  7128                        	.sym	PBUTTON,0,138,14,32,39
  7129                        	.sym	BUTTON,0,10,14,96,39
  7130                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
  7131                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
  7132                        	.sym	PMENUTAG,0,138,14,32,37
  7133                        	.sym	MENUTAG,0,10,14,160,37
  7134                        	.sym	PMENU,0,138,14,32,36
  7135                        	.sym	MENU,0,10,14,280,36
  7136                        	.sym	HMENURESOURCE,0,129,14,32
  7137                        	.sym	FONTMETRIC,0,10,14,32,35
  7138                        	.sym	TITLE,0,142,14,32
  7139                        	.sym	PHANDLE,0,1153,14,32
  7140                        	.sym	HANDLE,0,129,14,32
  7141                        	.sym	PWINDOWEX,0,138,14,32,34
  7142                        	.sym	WINDOWEX,0,10,14,3880,34
  7143                        	.sym	PWINDOW,0,138,14,32,33
  7144                        	.sym	WINDOW,0,10,14,3904,33
  7145                        	.sym	PDRAGDATA,0,138,14,32,32
  7146                        	.sym	DRAGDATA,0,10,14,216,32
  7147                        	.sym	PNCCLICKABLE,0,138,14,32,31
  7148                        	.sym	NCCLICKABLE,0,10,14,136,31
  7149                        	.sym	HCLICKABLE,0,7,14,32
  7150                        	.sym	PCLICKABLE,0,138,14,32,30
  7151                        	.sym	CLICKABLE,0,10,14,152,30
  7152                        	.sym	PWNDCLASS,0,138,14,32,29
  7153                        	.sym	WNDCLASS,0,10,14,272,29
  7154                        	.sym	HBRUSH,0,129,14,32
  7155                        	.sym	HCURSOR,0,129,14,32
  7156                        	.sym	HICON,0,129,14,32
  7157                        	.sym	HINSTANCE,0,129,14,32
  7158                        	.sym	FXWndProc,0,654,14,32
  7159                        	.sym	PDRECT,0,138,14,32,28
  7160                        	.sym	DRECT,0,10,14,112,28
  7161                        	.sym	PRECTP,0,138,14,32,27
  7162                        	.sym	RECTP,0,10,14,96,27
  7163                        	.sym	PRECT,0,138,14,32,26
  7164                        	.sym	RECT,0,10,14,112,26
  7165                        	.sym	PPOINT,0,138,14,32,25
  7166                        	.sym	POINT,0,10,14,32,25
  7167                        	.sym	PFXPROPERTY,0,138,14,32,23
  7168                        	.sym	FXPROPERTY,0,10,14,384,23
  7169                        	.sym	PKEYSTATE,0,138,14,32,22
  7170                        	.sym	KEYSTATE,0,10,14,112,22
  7171                        	.sym	SCANCODE,0,14,14,8
  7172                        	.sym	KEYCODE,0,16,14,16
  7173                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
  7174                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
  7175                        	.sym	PFXPROCESS,0,138,14,32,20
  7176                        	.sym	FXPROCESS,0,10,14,800,20
  7177                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
  Mon Aug  9 2021 16:52                                                Page 140


  7178                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
  7179                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
  7180                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
  7181                        	.sym	FXProcessProc,0,641,14,32
  7182                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
  7183                        	.sym	FXCMDMESSAGE,0,10,14,312,17
  7184                        	.sym	PFXOSMESSAGE,0,138,14,32,16
  7185                        	.sym	FXOSMESSAGE,0,10,14,312,16
  7186                        	.sym	PINT_REGS,0,138,14,32,15
  7187                        	.sym	INT_REGS,0,10,14,104,15
  7188                        	.sym	TASK_STACK,0,10,14,32,14
  7189                        	.sym	TASK,0,10,14,48,13
  7190                        	.sym	PIRQDATA,0,138,14,32,12
  7191                        	.sym	IRQDATA,0,10,14,48,12
  7192                        	.sym	HMENU,0,129,14,32
  7193                        	.sym	HWND,0,129,14,32
  7194                        	.sym	MSGDATA,0,14,14,8
  7195                        	.sym	MSGDEST,0,18,14,32
  7196                        	.sym	MSGSRC,0,18,14,32
  7197                        	.sym	MSGTYPE,0,16,14,16
  7198                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
  7199                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
  7200                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
  7201                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
  7202                        	.sym	FILE_PATH_LIST,0,138,14,32,6
  7203                        	.sym	PROCEDURE_LIST,0,138,14,32,6
  7204                        	.sym	FILE_HANDLE,0,138,14,32,11
  7205                        	.sym	FILE_BLOCK,0,10,14,552,11
  7206                        	.sym	SEMAPHORE,0,10,14,16,10
  7207                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
  7208                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
  7209                        	.sym	KRESULT,0,18,14,32
  7210                        	.sym	PKERNEL_ERROR,0,138,14,32,8
  7211                        	.sym	KERNEL_ERROR,0,10,14,32,8
  7212                        	.sym	PROCESS_STATUS,0,16,14,16
  7213                        	.sym	FILE_PATH_NAME,0,142,14,32
  7214                        	.sym	PROCESS_RESOURCE,0,129,14,32
  7215                        	.sym	PROCESS_TLS,0,129,14,32
  7216                        	.sym	PROCESS_CTX,0,129,14,32
  7217                        	.sym	USERID,0,16,14,16
  7218                        	.sym	PROCESS_ID,0,18,14,32
  7219                        	.sym	PROCESS_BANK,0,14,14,8
  7220                        	.sym	PFXQUEUE,0,138,14,32,7
  7221                        	.sym	FXQUEUE,0,10,14,80,7
  7222                        	.sym	PFXNODELIST,0,138,14,32,6
  7223                        	.sym	FXNODELIST,0,10,14,96,6
  7224                        	.sym	NodeListDeallocator,0,641,14,32
  7225                        	.sym	PFXNODE,0,138,14,32,5
  7226                        	.sym	FXNODE,0,10,14,384,5
  7227                        	.sym	PBYTEBITS,0,138,14,32,4
  7228                        	.sym	BYTEBITS,0,10,14,8,4
  7229                        	.sym	HRESULT,0,18,14,32
  7230                        	.sym	LPWCHAR,0,144,14,32
  7231                        	.sym	WCHAR,0,16,14,16
  7232                        	.sym	HSTRINGTABLE,0,129,14,32
  7233                        	.sym	HCOLOR,0,129,14,32
  7234                        	.sym	HFONT,0,129,14,32
  7235                        	.sym	HDC,0,129,14,32
  Mon Aug  9 2021 16:52                                                Page 141


  7236                        	.sym	HPOINTER,0,129,14,32
  7237                        	.sym	uint32_t,0,18,14,32
  7238                        	.sym	uint8_t,0,14,14,8
  7239                        	.sym	LPBOOL,0,142,14,32
  7240                        	.sym	BOOL,0,14,14,8
  7241                        	.sym	DWORD,0,18,14,32
  7242                        	.sym	ULONG,0,18,14,32
  7243                        	.sym	LPLONG,0,135,14,32
  7244                        	.sym	LONG,0,7,14,32
  7245                        	.sym	PUINT,0,144,14,32
  7246                        	.sym	USHORT,0,16,14,16
  7247                        	.sym	UINT,0,16,14,16
  7248                        	.sym	INT,0,5,14,16
  7249                        	.sym	WORD,0,5,14,16
  7250                        	.sym	PBYTE,0,142,14,32
  7251                        	.sym	BYTE,0,14,14,8
  7252                        	.sym	IOPORT,0,142,14,32
  7253                        	.sym	PUCHAR,0,142,14,32
  7254                        	.sym	UCHAR,0,14,14,8
  7255                        	.sym	LPWCSTR,0,142,14,32
  7256                        	.sym	LPCSTR,0,142,14,32
  7257                        	.sym	LPSTR,0,142,14,32
  7258                        	.sym	LPCHAR,0,142,14,32
  7259                        	.sym	CHAR,0,14,14,8
  7260                        	.sym	PUINT_32,0,146,14,32
  7261                        	.sym	UINT_32,0,18,14,32
  7262                        	.sym	PUINT_16,0,144,14,32
  7263                        	.sym	UINT_16,0,16,14,16
  7264                        	.sym	PUINT_8,0,142,14,32
  7265                        	.sym	UINT_8,0,14,14,8
  7266                        	.sym	LPVOID,0,129,14,32
  7267                        	.sym	VOID,0,1,14,32
  7268                        	.sym	~~strcpy,~~strcpy,1102,18,32
  7269                        	.sym	~~strcmp,~~strcmp,69,18,0
  7270                        	.sym	~~strcat,~~strcat,1102,18,32
  7271                        	.sym	~~memset,~~memset,1089,18,32
  7272                        	.sym	~~memcpy,~~memcpy,1089,18,32
  7273                        	.sym	Boolean_T,0,5,14,16
  7274                        	.sym	~~free,~~free,65,18,0
  7275                        	.sym	ldiv_t,0,10,14,64,2
  7276                        	.sym	div_t,0,10,14,32,1
  7277                        	.sym	wctype_t,0,16,14,16
  7278                        	.sym	wint_t,0,16,14,16
  7279                        	.sym	wchar_t,0,14,14,8
  7280                        	.sym	ptrdiff_t,0,7,14,32
  7281                        	.sym	size_t,0,16,14,16
  7282                        	end


      Lines assembled: 7282
      Errors: 0
