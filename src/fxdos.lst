  Mon Sep 27 2021  9:39                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 1.00- Aug 10 2021    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",0
     7                        ;#include "fxos.h"
     8                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
     9                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    10                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    11                        	.line	88
    12                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    13                        	.stag	fake1_,32,1
    14                        	.member	quot,0,5,8,16
    15                        	.member	rem,16,5,8,16
    16                        	.eos
    17                        	.stag	fake2_,64,2
    18                        	.member	quot,0,7,8,32
    19                        	.member	rem,32,7,8,32
    20                        	.eos
    21                        	.stag	int_sqrt,32,3
    22                        	.member	sqrt,0,16,8,16
    23                        	.member	frac,16,16,8,16
    24                        	.eos
    25                        	.line	205
    26                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",4
    27                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    28                        	.line	134
    29                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",5
    30                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    31                        	.line	103
    32                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",6
    33                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
    34                        	.stag	_fx_bytebits,8,4
    35                        	.member	b7,0,14,17,1
    36                        	.member	b6,1,14,17,1
    37                        	.member	b5,2,14,17,1
    38                        	.member	b4,3,14,17,1
    39                        	.member	b3,4,14,17,1
    40                        	.member	b2,5,14,17,1
    41                        	.member	b1,6,14,17,1
  Mon Sep 27 2021  9:39                                                Page 2


    42                        	.member	b0,7,14,17,1
    43                        	.eos
    44                        	.stag	_fx_node,384,5
    45                        	.member	type,0,14,8,8
    46                        	.member	Reserved0,8,14,8,8
    47                        	.member	data,16,129,8,32
    48                        	.member	last,48,138,8,32,5
    49                        	.member	next,80,138,8,32,5
    50                        	.member	name,112,110,8,0,32
    51                        	.member	Reserved1,368,16,8,16
    52                        	.eos
    53                        	.stag	_fx_nodelist,96,6
    54                        	.member	listhead,0,138,8,32,5
    55                        	.member	listData,32,129,8,32
    56                        	.member	deallocator,64,641,8,32
    57                        	.eos
    58                        	.stag	_fx_queue,80,7
    59                        	.member	count,0,5,8,16
    60                        	.member	front,16,138,8,32,5
    61                        	.member	rear,48,138,8,32,5
    62                        	.eos
    63                        	.stag	fake8_,32,8
    64                        	.member	subsystem,0,14,8,8
    65                        	.member	level,8,14,8,8
    66                        	.member	error,16,16,8,16
    67                        	.eos
    68                        	.stag	_fx_process_signal,16,9
    69                        	.member	cbSize,0,16,8,16
    70                        	.eos
    71                        	.stag	_fx_semaphore,16,10
    72                        	.member	reserved,0,5,8,16
    73                        	.eos
    74                        	.stag	_fx_fileBlock,552,11
    75                        	.member	openCount,0,16,8,16
    76                        	.member	lockCount,16,16,8,16
    77                        	.member	dirty,32,14,8,8
    78                        	.member	fileBuffer,40,110,8,0,64
    79                        	.eos
    80                        	.stag	_fx_irq_data,48,12
    81                        	.member	line,0,5,8,16
    82                        	.member	keycode,16,142,8,32
    83                        	.eos
    84                        	.stag	_task,48,13
    85                        	.member	SPL,0,14,8,8
    86                        	.member	SPH,8,14,8,8
    87                        	.member	pstack,16,142,8,32
    88                        	.eos
    89                        	.stag	_task_stack,32,14
    90                        	.member	SS,0,142,8,32
    91                        	.eos
    92                        	.stag	int_regs,104,15
    93                        	.member	PB,0,14,8,8
    94                        	.member	PH,8,14,8,8
    95                        	.member	PL,16,14,8,8
    96                        	.member	PP,24,14,8,8
    97                        	.member	DB,32,14,8,8
    98                        	.member	DH,40,14,8,8
    99                        	.member	DL,48,14,8,8
  Mon Sep 27 2021  9:39                                                Page 3


   100                        	.member	AH,56,14,8,8
   101                        	.member	AL,64,14,8,8
   102                        	.member	XH,72,14,8,8
   103                        	.member	XL,80,14,8,8
   104                        	.member	YH,88,14,8,8
   105                        	.member	YL,96,14,8,8
   106                        	.eos
   107                        	.stag	_fx_eventMessage,312,16
   108                        	.member	src,0,18,8,32
   109                        	.member	dest,32,18,8,32
   110                        	.member	type,64,16,8,16
   111                        	.member	hwnd,80,129,8,32
   112                        	.member	pheap,112,129,8,32
   113                        	.member	msgTime,144,18,8,32
   114                        	.member	data,176,110,8,0,16
   115                        	.member	attr,304,14,8,8
   116                        	.eos
   117                        	.stag	_fx_cmdMessage,312,17
   118                        	.member	src,0,18,8,32
   119                        	.member	dest,32,18,8,32
   120                        	.member	type,64,16,8,16
   121                        	.member	hwnd,80,129,8,32
   122                        	.member	pheap,112,129,8,32
   123                        	.member	msgTime,144,18,8,32
   124                        	.member	cmdCId,176,16,8,16
   125                        	.member	cmdMId,192,16,8,16
   126                        	.member	parameter1,208,18,8,32
   127                        	.member	parameter2,240,18,8,32
   128                        	.member	parameter3,272,18,8,32
   129                        	.member	attr,304,14,8,8
   130                        	.eos
   131                        	.stag	_fx_console_ctl,448,18
   132                        	.member	maxCols,0,5,8,16
   133                        	.member	maxRows,16,5,8,16
   134                        	.member	curX,32,5,8,16
   135                        	.member	curY,48,5,8,16
   136                        	.member	fgColor,64,5,8,16
   137                        	.member	bgColor,80,5,8,16
   138                        	.member	mode,96,14,8,8
   139                        	.member	kbBuffer,104,101,8,0,16
   140                        	.member	screenBuffer,360,142,8,32
   141                        	.member	desktopMode,392,14,8,8
   142                        	.member	lastMouseButton,400,5,8,16
   143                        	.member	lastMouseX,416,5,8,16
   144                        	.member	lastMouseY,432,5,8,16
   145                        	.eos
   146                        	.stag	_fx_desktop_ctl,392,19
   147                        	.member	desktopMode,0,14,8,8
   148                        	.member	cursorCtl,8,5,8,16
   149                        	.member	cursorState,24,5,8,16
   150                        	.member	backgroundColor,40,5,8,16
   151                        	.member	foregroundColor,56,5,8,16
   152                        	.member	menuMode,72,5,8,16
   153                        	.member	lastMouseButton,88,5,8,16
   154                        	.member	lastMouseX,104,5,8,16
   155                        	.member	lastMouseY,120,5,8,16
   156                        	.member	currentDiskName,136,142,8,32
   157                        	.member	diskNodes,168,129,8,32
  Mon Sep 27 2021  9:39                                                Page 4


   158                        	.member	titleNodes,200,129,8,32
   159                        	.member	menuNodes,232,129,8,32
   160                        	.member	iconNodes,264,129,8,32
   161                        	.member	windowNodes,296,129,8,32
   162                        	.member	fontNodes,328,129,8,32
   163                        	.member	wndProc,360,138,8,32,6
   164                        	.eos
   165                        	.stag	_fx_process,800,20
   166                        	.member	cbSize,0,5,8,16
   167                        	.member	procId,16,18,8,32
   168                        	.member	parentId,48,18,8,32
   169                        	.member	ctx,80,129,8,32
   170                        	.member	userId,112,16,8,16
   171                        	.member	status,128,16,8,16
   172                        	.member	foregroundActive,144,14,8,8
   173                        	.member	tls,152,1121,8,32,8
   174                        	.member	commandLine,408,142,8,32
   175                        	.member	semaphores,440,138,8,32,6
   176                        	.member	fileHandles,472,138,8,32,6
   177                        	.member	pathList,504,138,8,32,6
   178                        	.member	resources,536,138,8,32,6
   179                        	.member	timerAware,568,14,8,8
   180                        	.member	timerTicks,576,112,8,0,2
   181                        	.member	timerTickCount,608,112,8,0,2
   182                        	.member	kernelError,640,10,8,32,8
   183                        	.member	consoleCtl,672,138,8,32,18
   184                        	.member	desktopCtl,704,138,8,32,19
   185                        	.member	execProc,736,641,8,32
   186                        	.member	startupArgs,768,129,8,32
   187                        	.eos
   188                        	.stag	_fxProcessMessage,112,21
   189                        	.member	src,0,18,8,32
   190                        	.member	dest,32,18,8,32
   191                        	.member	type,64,16,8,16
   192                        	.member	processInfo,80,138,8,32,20
   193                        	.eos
   194                        	.stag	_k_key_state,112,22
   195                        	.member	scanCode,0,14,8,8
   196                        	.member	isShifted,8,14,8,8
   197                        	.member	isAlt,16,14,8,8
   198                        	.member	isExtended,24,14,8,8
   199                        	.member	isCapsLock,32,14,8,8
   200                        	.member	isNumLock,40,14,8,8
   201                        	.member	isScrollLock,48,14,8,8
   202                        	.member	keyChar,56,16,8,16
   203                        	.member	scanTime,72,18,8,32
   204                        	.member	ledStatus,104,14,8,8
   205                        	.eos
   206                        	.stag	_fx_property,384,23
   207                        	.member	name,0,110,8,0,16
   208                        	.member	value,128,110,8,0,32
   209                        	.eos
   210                        	.utag	_24bitPointer,32,24
   211                        	.member	address,0,142,11,32
   212                        	.member	bytes,0,110,11,0,4
   213                        	.eos
   214                        	.stag	_PointStruct,32,25
   215                        	.member	x,0,5,8,16
  Mon Sep 27 2021  9:39                                                Page 5


   216                        	.member	y,16,5,8,16
   217                        	.eos
   218                        	.stag	_RectStruct,112,26
   219                        	.member	x,0,5,8,16
   220                        	.member	y,16,5,8,16
   221                        	.member	z,32,18,8,32
   222                        	.member	width,64,5,8,16
   223                        	.member	height,80,5,8,16
   224                        	.member	attr,96,5,8,16
   225                        	.eos
   226                        	.stag	fake27_,96,27
   227                        	.member	name,0,142,8,32
   228                        	.member	topLeft,32,10,8,32,25
   229                        	.member	bottomRight,64,10,8,32,25
   230                        	.eos
   231                        	.stag	fake28_,112,28
   232                        	.member	x,0,5,8,16
   233                        	.member	y,16,5,8,16
   234                        	.member	z,32,5,8,16
   235                        	.member	width,48,5,8,16
   236                        	.member	height,64,5,8,16
   237                        	.member	data,80,18,8,32
   238                        	.eos
   239                        	.stag	_k_WindowClass,272,29
   240                        	.member	cbSize,0,16,8,16
   241                        	.member	style,16,16,8,16
   242                        	.member	styleEx,32,16,8,16
   243                        	.member	pWndProc,48,654,8,32
   244                        	.member	hInstance,80,129,8,32
   245                        	.member	hIcon,112,129,8,32
   246                        	.member	hCursor,144,129,8,32
   247                        	.member	hbrBackground,176,129,8,32
   248                        	.member	lpszMenuName,208,142,8,32
   249                        	.member	lpszClassName,240,142,8,32
   250                        	.eos
   251                        	.stag	_ClickableRect,152,30
   252                        	.member	area,0,10,8,112,26
   253                        	.member	z,112,18,8,32
   254                        	.member	enabled,144,14,8,8
   255                        	.eos
   256                        	.stag	_NCClickableRect,136,31
   257                        	.member	area,0,10,8,112,26
   258                        	.member	msgType,112,16,8,16
   259                        	.member	enabled,128,14,8,8
   260                        	.eos
   261                        	.stag	_DragData,216,32
   262                        	.member	area,0,10,8,112,26
   263                        	.member	xoffset,112,5,8,16
   264                        	.member	yoffset,128,5,8,16
   265                        	.member	msgType,144,16,8,16
   266                        	.member	ncAction,160,16,8,16
   267                        	.member	isDrag,176,14,8,8
   268                        	.member	isResize,184,14,8,8
   269                        	.member	canDrag,192,14,8,8
   270                        	.member	canDrop,200,14,8,8
   271                        	.member	didDrag,208,14,8,8
   272                        	.eos
   273                        	.stag	_k_WindowStruct,3904,33
  Mon Sep 27 2021  9:39                                                Page 6


   274                        	.member	cbSize,0,16,8,16
   275                        	.member	style,16,18,8,32
   276                        	.member	styleEx,48,18,8,32
   277                        	.member	win_id,80,5,8,16
   278                        	.member	win_x,96,5,8,16
   279                        	.member	win_y,112,5,8,16
   280                        	.member	win_width,128,5,8,16
   281                        	.member	win_height,144,5,8,16
   282                        	.member	win_xoffset,160,5,8,16
   283                        	.member	win_yoffset,176,5,8,16
   284                        	.member	win_cxoffset,192,5,8,16
   285                        	.member	win_cyoffset,208,5,8,16
   286                        	.member	wndRect,224,10,8,112,26
   287                        	.member	clientRect,336,10,8,112,26
   288                        	.member	nonclientGadgets,448,106,8,0,31,16
   289                        	.member	clickable,2624,129,8,32
   290                        	.member	win_title,2656,110,8,0,32
   291                        	.member	Reserved0,2912,16,8,16
   292                        	.member	win_class,2928,110,8,0,16
   293                        	.member	win_class_name,3056,110,8,0,32
   294                        	.member	nBitmapLayer,3312,16,8,16
   295                        	.member	bgRegion,3328,129,8,32
   296                        	.member	procid,3360,18,8,32
   297                        	.member	pWndClass,3392,138,8,32,29
   298                        	.member	pParentWindow,3424,129,8,32
   299                        	.member	hMenu,3456,129,8,32
   300                        	.member	hPointer,3488,129,8,32
   301                        	.member	hBackground,3520,129,8,32
   302                        	.member	pChildWindows,3552,138,8,32,6
   303                        	.member	pChildHitList,3584,138,8,32,6
   304                        	.member	isVisible,3616,14,8,8
   305                        	.member	windowData,3624,129,8,32
   306                        	.member	clientData,3656,1121,8,32,6
   307                        	.member	isClosed,3848,14,8,8
   308                        	.member	isClosing,3856,14,8,8
   309                        	.member	isDesktop,3864,14,8,8
   310                        	.member	clickableNode,3872,138,8,32,5
   311                        	.eos
   312                        	.stag	_k_WindowStructEx,3880,34
   313                        	.member	cbSize,0,16,8,16
   314                        	.member	style,16,18,8,32
   315                        	.member	styleEx,48,18,8,32
   316                        	.member	win_id,80,5,8,16
   317                        	.member	win_x,96,5,8,16
   318                        	.member	win_y,112,5,8,16
   319                        	.member	win_width,128,5,8,16
   320                        	.member	win_height,144,5,8,16
   321                        	.member	win_xoffset,160,5,8,16
   322                        	.member	win_yoffset,176,5,8,16
   323                        	.member	win_cxoffset,192,5,8,16
   324                        	.member	win_cyoffset,208,5,8,16
   325                        	.member	wndRect,224,10,8,112,26
   326                        	.member	clientRect,336,10,8,112,26
   327                        	.member	nonclientGadgets,448,106,8,0,31,16
   328                        	.member	clickable,2624,129,8,32
   329                        	.member	win_title,2656,110,8,0,32
   330                        	.member	Reserved0,2912,16,8,16
   331                        	.member	win_class,2928,110,8,0,16
  Mon Sep 27 2021  9:39                                                Page 7


   332                        	.member	nBitmapLayer,3056,16,8,16
   333                        	.member	procid,3072,18,8,32
   334                        	.member	pWndClass,3104,138,8,32,29
   335                        	.member	pParentWindow,3136,129,8,32
   336                        	.member	hMenu,3168,129,8,32
   337                        	.member	hPointer,3200,129,8,32
   338                        	.member	hBackground,3232,129,8,32
   339                        	.member	pChildWindows,3264,138,8,32,6
   340                        	.member	pChildHitList,3296,138,8,32,6
   341                        	.member	isVisible,3328,14,8,8
   342                        	.member	windowData,3336,129,8,32
   343                        	.member	clientData,3368,1121,8,32,4
   344                        	.member	isClosed,3496,14,8,8
   345                        	.member	hWnd,3504,129,8,32
   346                        	.member	localRect,3536,10,8,112,26
   347                        	.member	globalRect,3648,10,8,112,26
   348                        	.member	clientOffsetRect,3760,10,8,112,26
   349                        	.member	isDesktop,3872,14,8,8
   350                        	.eos
   351                        	.stag	_FontMetric,32,35
   352                        	.member	width,0,5,8,16
   353                        	.member	height,16,5,8,16
   354                        	.eos
   355                        	.stag	_MenuStruct,280,36
   356                        	.member	cx,0,5,8,16
   357                        	.member	cy,16,5,8,16
   358                        	.member	width,32,5,8,16
   359                        	.member	height,48,5,8,16
   360                        	.member	fcolor,64,14,8,8
   361                        	.member	bcolor,72,14,8,8
   362                        	.member	chromeLeft,80,14,8,8
   363                        	.member	chromeRight1,88,14,8,8
   364                        	.member	chromeRight2,96,14,8,8
   365                        	.member	hFont,104,129,8,32
   366                        	.member	itemId,136,16,8,16
   367                        	.member	pCaption,152,142,8,32
   368                        	.member	subMenus,184,138,8,32,6
   369                        	.member	pBackground,216,129,8,32
   370                        	.member	hWndOwner,248,129,8,32
   371                        	.eos
   372                        	.stag	fake37_,160,37
   373                        	.member	menuId,0,16,8,16
   374                        	.member	caption,16,142,8,32
   375                        	.member	rect,48,10,8,112,26
   376                        	.eos
   377                        	.stag	fake38_,5152,38
   378                        	.member	pParent,0,138,8,32,33
   379                        	.member	rect,32,10,8,112,26
   380                        	.member	captions,144,1134,8,32,24
   381                        	.member	chrome,912,110,8,0,24
   382                        	.member	ids,1104,112,8,0,24
   383                        	.member	clickable,1488,106,8,0,30,24
   384                        	.member	selected,5136,16,8,16
   385                        	.eos
   386                        	.stag	_fx_button_t,96,39
   387                        	.member	pCaption,0,142,8,32
   388                        	.member	cCaption,32,16,8,16
   389                        	.member	data,48,129,8,32
  Mon Sep 27 2021  9:39                                                Page 8


   390                        	.member	captionPixelWidth,80,16,8,16
   391                        	.eos
   392                        	.stag	_fx_scrollbar_t,240,40
   393                        	.member	min,0,16,8,16
   394                        	.member	max,16,16,8,16
   395                        	.member	increment,32,16,8,16
   396                        	.member	stopsize,48,16,8,16
   397                        	.member	location,64,5,8,16
   398                        	.member	state,80,5,8,16
   399                        	.member	rectThumb,96,10,8,112,26
   400                        	.member	data,208,129,8,32
   401                        	.eos
   402                        	.stag	_fx_listbox_t,240,41
   403                        	.member	pos,0,5,8,16
   404                        	.member	selected,16,16,8,16
   405                        	.member	offsetX,32,5,8,16
   406                        	.member	offsetY,48,5,8,16
   407                        	.member	inc,64,5,8,16
   408                        	.member	direction,80,5,8,16
   409                        	.member	top,96,5,8,16
   410                        	.member	bottom,112,5,8,16
   411                        	.member	indexTop,128,5,8,16
   412                        	.member	indexBottom,144,5,8,16
   413                        	.member	maxItems,160,16,8,16
   414                        	.member	fontSet,176,142,8,32
   415                        	.member	data,208,129,8,32
   416                        	.eos
   417                        	.stag	_fx_textbox_t,144,42
   418                        	.member	pos,0,5,8,16
   419                        	.member	selected,16,16,8,16
   420                        	.member	offsetX,32,5,8,16
   421                        	.member	offsetY,48,5,8,16
   422                        	.member	isShifted,64,14,8,8
   423                        	.member	cursorState,72,14,8,8
   424                        	.member	fontSet,80,142,8,32
   425                        	.member	data,112,129,8,32
   426                        	.eos
   427                        	.stag	_fx_msgbox_t,144,43
   428                        	.member	pos,0,5,8,16
   429                        	.member	selected,16,16,8,16
   430                        	.member	offsetX,32,5,8,16
   431                        	.member	offsetY,48,5,8,16
   432                        	.member	isShifted,64,14,8,8
   433                        	.member	cursorState,72,14,8,8
   434                        	.member	fontSet,80,142,8,32
   435                        	.member	data,112,129,8,32
   436                        	.eos
   437                        	.stag	_fx_menuAnchor_t,272,44
   438                        	.member	pCaption,0,142,8,32
   439                        	.member	renderLayoutX,32,16,8,16
   440                        	.member	renderLayoutY,48,16,8,16
   441                        	.member	captionPixelWidth,64,16,8,16
   442                        	.member	data,80,129,8,32
   443                        	.member	droppedWindow,112,138,8,32,33
   444                        	.member	bytes,144,110,8,0,16
   445                        	.eos
   446                        	.stag	_SubMenuStruct,64,45
   447                        	.member	caption,0,142,8,32
  Mon Sep 27 2021  9:39                                                Page 9


   448                        	.member	action,32,641,8,32
   449                        	.eos
   450                        	.stag	_SubMenuListStruct,40,46
   451                        	.member	cMenus,0,14,8,8
   452                        	.member	psubmenus,8,9354,8,32,45
   453                        	.eos
   454                        	.stag	_fx_ComBuffer,2080,47
   455                        	.member	cbSize,0,16,8,16
   456                        	.member	cbBuffer,16,16,8,16
   457                        	.member	buffer,32,110,8,0,256
   458                        	.eos
   459                        	.stag	_fx_resource_header,72,48
   460                        	.member	magic,0,110,8,0,4
   461                        	.member	major,32,14,8,8
   462                        	.member	minor,40,14,8,8
   463                        	.member	type,48,14,8,8
   464                        	.member	reserved,56,14,8,8
   465                        	.member	resheaderSize,64,14,8,8
   466                        	.eos
   467                        	.stag	_fx_resource_header_font,144,49
   468                        	.member	title,0,110,8,0,16
   469                        	.member	height,128,14,8,8
   470                        	.member	width,136,14,8,8
   471                        	.eos
   472                        	.stag	_fx_resource_string,32,50
   473                        	.member	locale,0,110,8,0,2
   474                        	.member	entries,16,16,8,16
   475                        	.eos
   476                        	.stag	_fx_resource_string_entry,40,51
   477                        	.member	index,0,16,8,16
   478                        	.member	length,16,16,8,16
   479                        	.member	data,32,14,8,8
   480                        	.eos
   481                        	.line	1064
   482                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",8
   483                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstringtable.h",0
   484                        	.line	90
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",9
   486                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   488                        	.line	1064
   489                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",5
   490                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",0
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   492                        	.line	1064
   493                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",11
   494                        	.line	72
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",6
  Mon Sep 27 2021  9:39                                                Page 10


   496                        	.line	1963
   497                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",16
   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   499                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   500                        	.line	30
   501                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",5
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   504                        	.line	1064
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",11
   506                        	.line	118
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",6
   508                        	.stag	_fx_api_call_table,8192,52
   509                        	.member	call_table,0,1121,8,32,256
   510                        	.eos
   511                        	.stag	_fx_zero_page_irq_data,32,53
   512                        	.member	data,0,110,8,0,4
   513                        	.eos
   514                        	.stag	_fx_zero_page,720,54
   515                        	.member	fxos_mouse_byte_0,0,14,8,8
   516                        	.member	fxos_mouse_byte_1,8,14,8,8
   517                        	.member	fxos_mouse_byte_2,16,14,8,8
   518                        	.member	fxos_mouse_byte_t,24,14,8,8
   519                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   520                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   521                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   522                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   523                        	.member	fxos_key_byte_0,64,14,8,8
   524                        	.member	fxos_key_byte_1,72,14,8,8
   525                        	.member	fxos_key_byte_2,80,14,8,8
   526                        	.member	fxos_mouse_ctl,88,14,8,8
   527                        	.member	fxos_mouse_index,96,14,8,8
   528                        	.member	fxos_mouse_status,104,14,8,8
   529                        	.member	Endianness,112,16,8,16
   530                        	.member	VersionMajor,128,16,8,16
   531                        	.member	VersionMinor,144,16,8,16
   532                        	.member	VersionRelease,160,16,8,16
   533                        	.member	topMemory,176,18,8,32
   534                        	.member	bottomMemory,208,18,8,32
   535                        	.member	availableMemory,240,18,8,32
   536                        	.member	availableMemoryK,272,18,8,32
   537                        	.member	availableHeapMemory,304,18,8,32
   538                        	.member	availableHeapMemoryK,336,18,8,32
   539                        	.member	fxos_console_row,368,16,8,16
   540                        	.member	fxos_console_col,384,16,8,16
   541                        	.member	executive,400,129,8,32
   542                        	.member	eventmanager,432,129,8,32
   543                        	.member	devicemanager,464,129,8,32
   544                        	.member	windowmanager,496,129,8,32
   545                        	.member	fxos_kernel_api,528,138,8,32,52
  Mon Sep 27 2021  9:39                                                Page 11


   546                        	.member	fxos_dos_api,560,138,8,32,52
   547                        	.member	fxos_gfx_api,592,138,8,32,52
   548                        	.member	fxos_gui_api,624,138,8,32,52
   549                        	.member	fxos_con_api,656,138,8,32,52
   550                        	.member	fxos_reserved_2_api,688,138,8,32,52
   551                        	.eos
   552                        	.stag	_fx_environment,96,55
   553                        	.member	variables,0,142,8,32
   554                        	.member	reserved1,32,5,8,16
   555                        	.member	reserved2,48,5,8,16
   556                        	.member	reserved3,64,5,8,16
   557                        	.member	reserved4,80,5,8,16
   558                        	.eos
   559                        	.stag	_debug_byte_bits,8,56
   560                        	.member	bit7,0,14,17,1
   561                        	.member	bit6,1,14,17,1
   562                        	.member	bit5,2,14,17,1
   563                        	.member	bit4,3,14,17,1
   564                        	.member	bit3,4,14,17,1
   565                        	.member	bit2,5,14,17,1
   566                        	.member	bit1,6,14,17,1
   567                        	.member	bit0,7,14,17,1
   568                        	.eos
   569                        	.stag	_k_segmentheader,160,57
   570                        	.member	version_major,0,14,8,8
   571                        	.member	version_minor,8,14,8,8
   572                        	.member	length,16,5,8,16
   573                        	.member	segment_start_addr,32,7,8,32
   574                        	.member	segment_end_addr,64,7,8,32
   575                        	.member	segment_size,96,7,8,32
   576                        	.member	main_entry_addr,128,7,8,32
   577                        	.eos
   578                        	.stag	_fx_device_driver,776,58
   579                        	.member	name,0,110,8,0,32
   580                        	.member	version,256,110,8,0,16
   581                        	.member	hmajor,384,110,8,0,8
   582                        	.member	hminor,448,110,8,0,8
   583                        	.member	type,512,14,8,8
   584                        	.member	designation,520,110,8,0,6
   585                        	.member	irq_ctl,568,16,8,16
   586                        	.member	f_driver_irq,584,129,8,32
   587                        	.member	driver_context,616,129,8,32
   588                        	.member	f_driver_load,648,129,8,32
   589                        	.member	f_driver_read,680,129,8,32
   590                        	.member	f_driver_write,712,129,8,32
   591                        	.member	f_driver_unload,744,129,8,32
   592                        	.eos
   593                        	.stag	_fx_block_device_driver,808,59
   594                        	.member	name,0,110,8,0,32
   595                        	.member	version,256,110,8,0,16
   596                        	.member	hmajor,384,110,8,0,8
   597                        	.member	hminor,448,110,8,0,8
   598                        	.member	type,512,14,8,8
   599                        	.member	designation,520,110,8,0,6
   600                        	.member	irq_ctl,568,16,8,16
   601                        	.member	f_driver_irq,584,129,8,32
   602                        	.member	driver_context,616,129,8,32
   603                        	.member	f_driver_load,648,129,8,32
  Mon Sep 27 2021  9:39                                                Page 12


   604                        	.member	f_driver_read,680,129,8,32
   605                        	.member	f_driver_write,712,129,8,32
   606                        	.member	f_driver_unload,744,129,8,32
   607                        	.member	f_driver_command,776,129,8,32
   608                        	.eos
   609                        	.stag	_k_irq_chain,128,60
   610                        	.member	handlers,0,5217,8,32,4
   611                        	.eos
   612                        	.line	475
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",22
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   615                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   616                        	.line	134
   617                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",5
   618                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   619                        	.line	205
   620                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",6
   621                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   622                        	.line	1064
   623                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",7
   624                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   625                        	.line	1963
   626                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",12
   627                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   628                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   629                        	.line	205
   630                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",5
   631                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   632                        	.line	134
   633                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",6
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   635                        	.line	1064
   636                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",7
   637                        	.stag	_fx_string,64,61
   638                        	.member	size,0,16,8,16
   639                        	.member	pos,16,5,8,16
   640                        	.member	buffer,32,142,8,32
   641                        	.eos
   642                        	.line	141
   643                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",17
  Mon Sep 27 2021  9:39                                                Page 13


   644                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   645                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   646                        	.line	30
   647                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",5
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   650                        	.line	1064
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",5
   652                        	.stag	_fxos_executive_vtable,128,62
   653                        	.member	Init,0,8833,8,32
   654                        	.member	Configure,32,656,8,32
   655                        	.member	Query,64,656,8,32
   656                        	.member	Uninit,96,641,8,32
   657                        	.eos
   658                        	.line	86
   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",6
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   661                        	.line	118
   662                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",7
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   664                        	.line	208
   665                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",8
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
   667                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   668                        	.line	30
   669                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",5
   670                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
   671                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   672                        	.line	30
   673                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",5
   674                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   675                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_build_parameters.h",0
   676                        	.line	35
   677                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",8
   678                        	.stag	UMM_HEAP_INFO_t,256,63
   679                        	.member	totalEntries,0,18,8,32
   680                        	.member	usedEntries,32,18,8,32
   681                        	.member	freeEntries,64,18,8,32
  Mon Sep 27 2021  9:39                                                Page 14


   682                        	.member	totalBlocks,96,18,8,32
   683                        	.member	usedBlocks,128,18,8,32
   684                        	.member	freeBlocks,160,18,8,32
   685                        	.member	maxFreeContiguousBlocks,192,18,8,32
   686                        	.member	blockSize,224,18,8,32
   687                        	.eos
   688                        	.line	199
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",6
   690                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
   691                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   692                        	.line	1064
   693                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",11
   694                        	.line	24
   695                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",7
   696                        	.stag	_fx_memory_map,2072,64
   697                        	.member	availableMemory,0,18,8,32
   698                        	.member	valid_segments,32,110,8,0,255
   699                        	.eos
   700                        	.stag	_fx_ipc_port,144,65
   701                        	.member	id,0,18,8,32
   702                        	.member	type,32,14,8,8
   703                        	.member	name,40,138,8,32,61
   704                        	.member	time,72,18,8,32
   705                        	.member	queue,104,138,8,32,7
   706                        	.member	reserved_1,136,14,8,8
   707                        	.eos
   708                        	.stag	_k_mem_alloc_header,80,66
   709                        	.member	user,0,14,8,8
   710                        	.member	attr,8,14,8,8
   711                        	.member	size,16,18,8,32
   712                        	.member	virtual,48,129,8,32
   713                        	.eos
   714                        	.line	129
   715                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",6
   716                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   717                        	.line	572
   718                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",7
   719                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
   720                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",0
   721                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   722                        	.line	1064
   723                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",6
   724                        	.line	74
   725                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",5
   726                        	.stag	_click_detected,64,67
  Mon Sep 27 2021  9:39                                                Page 15


   727                        	.member	window,0,138,8,32,33
   728                        	.member	handler,32,641,8,32
   729                        	.eos
   730                        	.stag	_current_palette_map,400,68
   731                        	.member	CUR_DESKTOP,0,5,8,16
   732                        	.member	CUR_BACKGROUND,16,5,8,16
   733                        	.member	CUR_FONT,32,5,8,16
   734                        	.member	CUR_SELECTED_FONT,48,5,8,16
   735                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   736                        	.member	CUR_WINDOWFRAME,80,5,8,16
   737                        	.member	CUR_WINDOWBORDER,96,5,8,16
   738                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   739                        	.member	CUR_MENU,128,5,8,16
   740                        	.member	CUR_GADGET,144,5,8,16
   741                        	.member	CUR_COLOR,160,101,8,0,15
   742                        	.eos
   743                        	.line	370
   744                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",8
   745                        	.stag	_fxos_winman_vtable,160,69
   746                        	.member	Events,0,641,8,32
   747                        	.member	ConfigureWindowManager,32,656,8,32
   748                        	.member	ProcessWindowEvent,64,8833,8,32
   749                        	.member	QueryWindowManager,96,656,8,32
   750                        	.member	DoWndProcs,128,641,8,32
   751                        	.eos
   752                        	.stag	fake70_,64,70
   753                        	.member	type,0,16,8,16
   754                        	.member	size,16,16,8,16
   755                        	.member	desktopAction,32,129,8,32
   756                        	.eos
   757                        	.stag	fake71_,96,71
   758                        	.member	type,0,16,8,16
   759                        	.member	caption,16,138,8,32,61
   760                        	.member	buttonType,48,16,8,16
   761                        	.member	x,64,5,8,16
   762                        	.member	y,80,5,8,16
   763                        	.eos
   764                        	.stag	_childMessage_t,64,72
   765                        	.member	msgType,0,16,8,16
   766                        	.member	msgData,16,129,8,32
   767                        	.member	dataSize,48,16,8,16
   768                        	.eos
   769                        	.line	594
   770                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",9
   771                        	.stag	_fx_main_loopvars,16,73
   772                        	.member	dummy,0,5,8,16
   773                        	.eos
   774                        	.stag	_fxMouseMessageData,64,74
   775                        	.member	button1,0,14,8,8
   776                        	.member	button2,8,14,8,8
   777                        	.member	button3,16,14,8,8
   778                        	.member	button4,24,14,8,8
   779                        	.member	x,32,16,8,16
   780                        	.member	y,48,16,8,16
   781                        	.eos
   782                        	.utag	marshalled_data,32,75
  Mon Sep 27 2021  9:39                                                Page 16


   783                        	.member	byteValue,0,14,11,8
   784                        	.member	verbValue,0,110,11,0,2
   785                        	.member	intValue,0,16,11,16
   786                        	.member	longValue,0,18,11,32
   787                        	.member	pointerValue,0,129,11,32
   788                        	.eos
   789                        	.stag	_fx_eventProcess,64,76
   790                        	.member	process,0,138,8,32,20
   791                        	.member	eventProc,32,641,8,32
   792                        	.eos
   793                        	.stag	_mouse_msg_state,184,77
   794                        	.member	lastEvent,0,18,8,32
   795                        	.member	buttonLeftDown,32,14,8,8
   796                        	.member	lastLeftDown,40,18,8,32
   797                        	.member	buttonRightDown,72,14,8,8
   798                        	.member	lastRightDown,80,18,8,32
   799                        	.member	buttonMiddleDown,112,14,8,8
   800                        	.member	lastMiddleDown,120,18,8,32
   801                        	.member	lastX,152,16,8,16
   802                        	.member	lastY,168,16,8,16
   803                        	.eos
   804                        	.stag	_fxos_eventmanager_vtable,192,78
   805                        	.member	EventQueue,0,138,8,32,7
   806                        	.member	Init,32,8833,8,32
   807                        	.member	Run,64,656,8,32
   808                        	.member	Configure,96,656,8,32
   809                        	.member	Query,128,656,8,32
   810                        	.member	Uninit,160,641,8,32
   811                        	.eos
   812                        	.stag	_k_clipboard_data,168,79
   813                        	.member	type,0,14,8,8
   814                        	.member	readable,8,110,8,0,16
   815                        	.member	data,136,129,8,32
   816                        	.eos
   817                        	.line	572
   818                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",18
   819                        	.stag	_fx_spinner_ctx,48,80
   820                        	.member	index,0,5,8,16
   821                        	.member	spinner,16,142,8,32
   822                        	.eos
   823                        	.stag	_fx_console_ctx,1144,81
   824                        	.member	lineBufferIndex,0,5,8,16
   825                        	.member	lineBuffer,16,110,8,0,128
   826                        	.member	isShifted,1040,14,8,8
   827                        	.member	userData,1048,129,8,32
   828                        	.member	screenBuffer,1080,129,8,32
   829                        	.member	Reserved1,1112,129,8,32
   830                        	.eos
   831                        	.stag	_token,64,82
   832                        	.member	type,0,5,8,16
   833                        	.member	depth,16,16,8,16
   834                        	.member	text,32,142,8,32
   835                        	.eos
   836                        	.stag	_command_args,64,83
   837                        	.member	proc,0,656,8,32
   838                        	.member	tokens,32,138,8,32,5
   839                        	.eos
  Mon Sep 27 2021  9:39                                                Page 17


   840                        	.line	208
   841                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",23
   842                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   843                        	.line	141
   844                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",24
   845                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   846                        	.line	118
   847                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",25
   848                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   849                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ffconf.h",0
   850                        	.line	298
   851                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",29
   852                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   853                        	.line	1064
   854                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",30
   855                        	.stag	fake84_,4504,84
   856                        	.member	fs_type,0,14,8,8
   857                        	.member	pdrv,8,14,8,8
   858                        	.member	n_fats,16,14,8,8
   859                        	.member	wflag,24,14,8,8
   860                        	.member	fsi_flag,32,14,8,8
   861                        	.member	id,40,5,8,16
   862                        	.member	n_rootdir,56,5,8,16
   863                        	.member	csize,72,5,8,16
   864                        	.member	lfnbuf,88,144,8,32
   865                        	.member	last_clst,120,18,8,32
   866                        	.member	free_clst,152,18,8,32
   867                        	.member	n_fatent,184,18,8,32
   868                        	.member	fsize,216,18,8,32
   869                        	.member	volbase,248,18,8,32
   870                        	.member	fatbase,280,18,8,32
   871                        	.member	dirbase,312,18,8,32
   872                        	.member	database,344,18,8,32
   873                        	.member	winsect,376,18,8,32
   874                        	.member	win,408,110,8,0,512
   875                        	.eos
   876                        	.stag	fake85_,128,85
   877                        	.member	fs,0,138,8,32,84
   878                        	.member	id,32,5,8,16
   879                        	.member	attr,48,14,8,8
   880                        	.member	stat,56,14,8,8
   881                        	.member	sclust,64,18,8,32
   882                        	.member	objsize,96,18,8,32
   883                        	.eos
   884                        	.stag	fake86_,4400,86
   885                        	.member	obj,0,10,8,128,85
   886                        	.member	flag,128,14,8,8
   887                        	.member	err,136,14,8,8
  Mon Sep 27 2021  9:39                                                Page 18


   888                        	.member	fptr,144,18,8,32
   889                        	.member	clust,176,18,8,32
   890                        	.member	sect,208,18,8,32
   891                        	.member	dir_sect,240,18,8,32
   892                        	.member	dir_ptr,272,142,8,32
   893                        	.member	buf,304,110,8,0,512
   894                        	.eos
   895                        	.stag	fake87_,416,87
   896                        	.member	obj,0,10,8,128,85
   897                        	.member	dptr,128,18,8,32
   898                        	.member	clust,160,18,8,32
   899                        	.member	sect,192,18,8,32
   900                        	.member	dir,224,142,8,32
   901                        	.member	fn,256,110,8,0,12
   902                        	.member	blk_ofs,352,18,8,32
   903                        	.member	pat,384,142,8,32
   904                        	.eos
   905                        	.stag	fake88_,2224,88
   906                        	.member	fsize,0,18,8,32
   907                        	.member	fdate,32,5,8,16
   908                        	.member	ftime,48,5,8,16
   909                        	.member	fattrib,64,14,8,8
   910                        	.member	altname,72,110,8,0,13
   911                        	.member	fname,176,110,8,0,256
   912                        	.eos
   913                        	.stag	fake89_,80,89
   914                        	.member	fmt,0,14,8,8
   915                        	.member	n_fat,8,14,8,8
   916                        	.member	align,16,16,8,16
   917                        	.member	n_root,32,16,8,16
   918                        	.member	au_size,48,18,8,32
   919                        	.eos
   920                        	.line	429
   921                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",26
   922                        	.line	30
   923                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",1
   924                        ;#include "fxdos.h"
   925                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",0
   926                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   927                        	.line	1064
   928                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",5
   929                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   930                        	.line	429
   931                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",6
   932                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\diskio.h",0
   933                        	.line	85
   934                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",7
   935                        	.stag	_fx_sd_direntry,256,90
   936                        	.member	filename,0,110,8,0,11
  Mon Sep 27 2021  9:39                                                Page 19


   937                        	.member	type,88,14,8,8
   938                        	.member	attrs,96,110,8,0,20
   939                        	.eos
   940                        	.stag	_fx_info,416,91
   941                        	.member	stgName,0,110,8,0,32
   942                        	.member	Reserved1,256,14,8,8
   943                        	.member	stgType,264,16,8,16
   944                        	.member	Reserved2,280,14,8,8
   945                        	.member	stgReserved,288,110,8,0,16
   946                        	.eos
   947                        	.stag	_fx_fileinfo,136,92
   948                        	.member	type,0,14,8,8
   949                        	.member	pFilename,8,142,8,32
   950                        	.member	lSize,40,18,8,32
   951                        	.member	lcreateDate,72,18,8,32
   952                        	.member	lchangeDate,104,18,8,32
   953                        	.eos
   954                        	.stag	_FX_FAT_DIR_INFO,256,93
   955                        	.member	DIR_Name,0,110,8,0,11
   956                        	.member	DIR_Attr,88,14,8,8
   957                        	.member	DIR_NTRes,96,14,8,8
   958                        	.member	DIR_CrtTimeTenth,104,14,8,8
   959                        	.member	DIR_CrtTime,112,16,8,16
   960                        	.member	DIR_CrtDate,128,16,8,16
   961                        	.member	DIR_LstAccDate,144,16,8,16
   962                        	.member	DIR_FstClusHI,160,16,8,16
   963                        	.member	DIR_WrtTime,176,16,8,16
   964                        	.member	DIR_WrtDate,192,16,8,16
   965                        	.member	DIR_FstClusLO,208,16,8,16
   966                        	.member	DIR_FileSize,224,18,8,32
   967                        	.eos
   968                        	.stag	fat_extBS_32,416,94
   969                        	.member	table_size_32,0,18,8,32
   970                        	.member	extended_flags,32,16,8,16
   971                        	.member	fat_version,48,16,8,16
   972                        	.member	root_cluster,64,18,8,32
   973                        	.member	fat_info,96,16,8,16
   974                        	.member	backup_BS_sector,112,16,8,16
   975                        	.member	reserved_0,128,110,8,0,12
   976                        	.member	drive_number,224,14,8,8
   977                        	.member	reserved_1,232,14,8,8
   978                        	.member	boot_signature,240,14,8,8
   979                        	.member	volume_id,248,16,8,16
   980                        	.member	volume_label,264,110,8,0,11
   981                        	.member	fat_type_label,352,110,8,0,8
   982                        	.eos
   983                        	.stag	fat_extBS_16,192,95
   984                        	.member	bios_drive_num,0,14,8,8
   985                        	.member	reserved1,8,14,8,8
   986                        	.member	boot_signature,16,14,8,8
   987                        	.member	volume_id,24,16,8,16
   988                        	.member	volume_label,40,110,8,0,11
   989                        	.member	fat_type_label,128,110,8,0,8
   990                        	.eos
   991                        	.stag	fat_BS,688,96
   992                        	.member	bootjmp,0,110,8,0,3
   993                        	.member	oem_name,24,110,8,0,8
   994                        	.member	bytes_per_sector,88,16,8,16
  Mon Sep 27 2021  9:39                                                Page 20


   995                        	.member	sectors_per_cluster,104,14,8,8
   996                        	.member	reserved_sector_count,112,16,8,16
   997                        	.member	table_count,128,14,8,8
   998                        	.member	root_entry_count,136,16,8,16
   999                        	.member	total_sectors_16,152,16,8,16
  1000                        	.member	media_type,168,14,8,8
  1001                        	.member	table_size_16,176,16,8,16
  1002                        	.member	sectors_per_track,192,16,8,16
  1003                        	.member	head_side_count,208,16,8,16
  1004                        	.member	hidden_sector_count,224,16,8,16
  1005                        	.member	total_sectors_32,240,16,8,16
  1006                        	.member	extended_section,256,110,8,0,54
  1007                        	.eos
  1008                        	.stag	__FATBootSector,928,97
  1009                        	.member	bootjmp,0,110,8,0,3
  1010                        	.member	oem_name,24,110,8,0,8
  1011                        	.member	bytes_per_sector,88,16,8,16
  1012                        	.member	sectors_per_cluster,104,14,8,8
  1013                        	.member	reserved_sector_count,112,16,8,16
  1014                        	.member	fat_table_count,128,14,8,8
  1015                        	.member	root_entry_count,136,16,8,16
  1016                        	.member	total_sectors_16,152,16,8,16
  1017                        	.member	media_type,168,14,8,8
  1018                        	.member	sectors_per_fat,176,16,8,16
  1019                        	.member	sectors_per_track,192,16,8,16
  1020                        	.member	head_side_count,208,16,8,16
  1021                        	.member	hidden_sector_count,224,18,8,32
  1022                        	.member	total_sectors_32,256,18,8,32
  1023                        	.member	drive_number,288,14,8,8
  1024                        	.member	reserved1,296,14,8,8
  1025                        	.member	boot_sig,304,14,8,8
  1026                        	.member	vol_id,312,18,8,32
  1027                        	.member	vol_name,344,110,8,0,11
  1028                        	.member	file_system_type,432,110,8,0,8
  1029                        	.member	extended_section,496,110,8,0,54
  1030                        	.eos
  1031                        	.stag	__PARTITIONTABLE,128,98
  1032                        	.member	first_byte,0,14,8,8
  1033                        	.member	start_chs,8,110,8,0,3
  1034                        	.member	partition_type,32,14,8,8
  1035                        	.member	end_chs,40,110,8,0,3
  1036                        	.member	start_sector,64,18,8,32
  1037                        	.member	length_sectors,96,18,8,32
  1038                        	.eos
  1039                        	.stag	fake99_,4096,99
  1040                        	.member	jmp,0,110,8,0,3
  1041                        	.member	oem,24,110,8,0,8
  1042                        	.member	sector_size,88,15,8,16
  1043                        	.member	sectors_per_cluster,104,14,8,8
  1044                        	.member	reserved_sectors,112,15,8,16
  1045                        	.member	number_ok_dos_fats,128,14,8,8
  1046                        	.member	root_dir_entries,136,15,8,16
  1047                        	.member	total_sectors_short,152,15,8,16
  1048                        	.member	media_descriptor,168,14,8,8
  1049                        	.member	fat_size_sectors,176,15,8,16
  1050                        	.member	sectors_per_track,192,15,8,16
  1051                        	.member	number_ok_dos_heads,208,15,8,16
  1052                        	.member	hidden_sectors,224,18,8,32
  Mon Sep 27 2021  9:39                                                Page 21


  1053                        	.member	total_sectors_long,256,18,8,32
  1054                        	.member	drive_number,288,14,8,8
  1055                        	.member	current_head,296,14,8,8
  1056                        	.member	boot_signature,304,14,8,8
  1057                        	.member	volume_id,312,18,8,32
  1058                        	.member	volume_label,344,110,8,0,11
  1059                        	.member	fs_type,432,110,8,0,8
  1060                        	.member	boot_code,496,110,8,0,448
  1061                        	.member	boot_sector_signature,4080,15,8,16
  1062                        	.eos
  1063                        	.stag	__FAT16ENTRY,256,100
  1064                        	.member	filename,0,110,8,0,8
  1065                        	.member	ext,64,110,8,0,3
  1066                        	.member	attributes,88,14,8,8
  1067                        	.member	reserved,96,110,8,0,10
  1068                        	.member	modify_time,176,16,8,16
  1069                        	.member	modify_date,192,16,8,16
  1070                        	.member	starting_cluster,208,16,8,16
  1071                        	.member	file_size,224,18,8,32
  1072                        	.eos
  1073                        	.stag	__FAT16ENTRYLONG,288,101
  1074                        	.member	filename,0,110,8,0,8
  1075                        	.member	ext,64,110,8,0,3
  1076                        	.member	attributes,88,14,8,8
  1077                        	.member	reserved,96,110,8,0,10
  1078                        	.member	modify_time,176,16,8,16
  1079                        	.member	modify_date,192,16,8,16
  1080                        	.member	starting_cluster,208,16,8,16
  1081                        	.member	file_size,224,18,8,32
  1082                        	.member	plongfileName,256,142,8,32
  1083                        	.eos
  1084                        	.stag	_LongFileName,256,102
  1085                        	.member	sequenceNo,0,14,8,8
  1086                        	.member	fileName_Part1,8,110,8,0,10
  1087                        	.member	fileattribute,88,14,8,8
  1088                        	.member	type,96,14,8,8
  1089                        	.member	checksum,104,14,8,8
  1090                        	.member	fileName_Part2,112,110,8,0,12
  1091                        	.member	fstclusLO,208,5,8,16
  1092                        	.member	fileName_Part3,224,110,8,0,4
  1093                        	.eos
  1094                        	.stag	_IDSECTOR,2048,103
  1095                        	.member	wGenConfig,0,16,8,16
  1096                        	.member	wNumCyls,16,16,8,16
  1097                        	.member	wReserved,32,16,8,16
  1098                        	.member	wNumHeads,48,16,8,16
  1099                        	.member	wBytesPerTrack,64,16,8,16
  1100                        	.member	wBytesPerSector,80,16,8,16
  1101                        	.member	wSectorsPerTrack,96,16,8,16
  1102                        	.member	wVendorUnique,112,112,8,0,3
  1103                        	.member	sSerialNumber,160,110,8,0,20
  1104                        	.member	wBufferType,320,16,8,16
  1105                        	.member	wBufferSize,336,16,8,16
  1106                        	.member	wECCSize,352,16,8,16
  1107                        	.member	sFirmwareRev,368,110,8,0,8
  1108                        	.member	sModelNumber,432,110,8,0,40
  1109                        	.member	wMoreVendorUnique,752,16,8,16
  1110                        	.member	wDoubleWordIO,768,16,8,16
  Mon Sep 27 2021  9:39                                                Page 22


  1111                        	.member	wCapabilities,784,16,8,16
  1112                        	.member	wReserved1,800,16,8,16
  1113                        	.member	wPIOTiming,816,16,8,16
  1114                        	.member	wDMATiming,832,16,8,16
  1115                        	.member	wBS,848,16,8,16
  1116                        	.member	wNumCurrentCyls,864,16,8,16
  1117                        	.member	wNumCurrentHeads,880,16,8,16
  1118                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1119                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1120                        	.member	wMultSectorStuff,944,16,8,16
  1121                        	.member	ulTotalAddressableSectors,960,18,8,32
  1122                        	.member	wSingleWordDMA,992,16,8,16
  1123                        	.member	wMultiWordDMA,1008,16,8,16
  1124                        	.member	bReserved,1024,110,8,0,128
  1125                        	.eos
  1126                        	.stag	fake104_,16,104
  1127                        	.member	Reserved1,0,16,17,1
  1128                        	.member	Retired3,1,16,17,1
  1129                        	.member	ResponseIncomplete,2,16,17,1
  1130                        	.member	Retired2,3,16,17,3
  1131                        	.member	FixedDevice,6,16,17,1
  1132                        	.member	RemovableMedia,7,16,17,1
  1133                        	.member	Retired1,8,16,17,7
  1134                        	.member	DeviceType,15,16,17,1
  1135                        	.eos
  1136                        	.stag	fake105_,16,105
  1137                        	.member	FeatureSupported,0,16,17,1
  1138                        	.member	Reserved,1,16,17,15
  1139                        	.eos
  1140                        	.stag	fake106_,32,106
  1141                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1142                        	.member	ReservedByte49,2,14,17,6
  1143                        	.member	DmaSupported,8,14,17,1
  1144                        	.member	LbaSupported,9,14,17,1
  1145                        	.member	IordyDisable,10,14,17,1
  1146                        	.member	IordySupported,11,14,17,1
  1147                        	.member	Reserved1,12,14,17,1
  1148                        	.member	StandybyTimerSupport,13,14,17,1
  1149                        	.member	Reserved2,14,14,17,2
  1150                        	.member	ReservedWord50,16,16,8,16
  1151                        	.eos
  1152                        	.stag	fake107_,16,107
  1153                        	.member	ZonedCapabilities,0,16,17,2
  1154                        	.member	NonVolatileWriteCache,2,16,17,1
  1155                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1156                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1157                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1158                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1159                        	.member	IEEE1667,7,16,17,1
  1160                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1161                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1162                        	.member	WriteBufferDmaSupported,10,16,17,1
  1163                        	.member	ReadBufferDmaSupported,11,16,17,1
  1164                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  Mon Sep 27 2021  9:39                                                Page 23


  1165                        	.member	LPSAERCSupported,13,16,17,1
  1166                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1167                        	.member	CFastSpecSupported,15,16,17,1
  1168                        	.eos
  1169                        	.stag	fake108_,32,108
  1170                        	.member	Reserved0,0,16,17,1
  1171                        	.member	SataGen1,1,16,17,1
  1172                        	.member	SataGen2,2,16,17,1
  1173                        	.member	SataGen3,3,16,17,1
  1174                        	.member	Reserved1,4,16,17,4
  1175                        	.member	NCQ,8,16,17,1
  1176                        	.member	HIPM,9,16,17,1
  1177                        	.member	PhyEvents,10,16,17,1
  1178                        	.member	NcqUnload,11,16,17,1
  1179                        	.member	NcqPriority,12,16,17,1
  1180                        	.member	HostAutoPS,13,16,17,1
  1181                        	.member	DeviceAutoPS,14,16,17,1
  1182                        	.member	ReadLogDMA,15,16,17,1
  1183                        	.member	Reserved2,16,16,17,1
  1184                        	.member	CurrentSpeed,17,16,17,3
  1185                        	.member	NcqStreaming,20,16,17,1
  1186                        	.member	NcqQueueMgmt,21,16,17,1
  1187                        	.member	NcqReceiveSend,22,16,17,1
  1188                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1189                        	.member	Reserved3,24,16,17,8
  1190                        	.eos
  1191                        	.stag	fake109_,16,109
  1192                        	.member	Reserved0,0,16,17,1
  1193                        	.member	NonZeroOffsets,1,16,17,1
  1194                        	.member	DmaSetupAutoActivate,2,16,17,1
  1195                        	.member	DIPM,3,16,17,1
  1196                        	.member	InOrderData,4,16,17,1
  1197                        	.member	HardwareFeatureControl,5,16,17,1
  1198                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1199                        	.member	NCQAutosense,7,16,17,1
  1200                        	.member	DEVSLP,8,16,17,1
  1201                        	.member	HybridInformation,9,16,17,1
  1202                        	.member	Reserved1,10,16,17,6
  1203                        	.eos
  1204                        	.stag	fake110_,16,110
  1205                        	.member	Reserved0,0,16,17,1
  1206                        	.member	NonZeroOffsets,1,16,17,1
  1207                        	.member	DmaSetupAutoActivate,2,16,17,1
  1208                        	.member	DIPM,3,16,17,1
  1209                        	.member	InOrderData,4,16,17,1
  1210                        	.member	HardwareFeatureControl,5,16,17,1
  1211                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1212                        	.member	DeviceAutoPS,7,16,17,1
  1213                        	.member	DEVSLP,8,16,17,1
  1214                        	.member	HybridInformation,9,16,17,1
  1215                        	.member	Reserved1,10,16,17,6
  1216                        	.eos
  1217                        	.stag	fake111_,48,111
  1218                        	.member	SmartCommands,0,16,17,1
  1219                        	.member	SecurityMode,1,16,17,1
  1220                        	.member	RemovableMediaFeature,2,16,17,1
  1221                        	.member	PowerManagement,3,16,17,1
  Mon Sep 27 2021  9:39                                                Page 24


  1222                        	.member	Reserved1,4,16,17,1
  1223                        	.member	WriteCache,5,16,17,1
  1224                        	.member	LookAhead,6,16,17,1
  1225                        	.member	ReleaseInterrupt,7,16,17,1
  1226                        	.member	ServiceInterrupt,8,16,17,1
  1227                        	.member	DeviceReset,9,16,17,1
  1228                        	.member	HostProtectedArea,10,16,17,1
  1229                        	.member	Obsolete1,11,16,17,1
  1230                        	.member	WriteBuffer,12,16,17,1
  1231                        	.member	ReadBuffer,13,16,17,1
  1232                        	.member	Nop,14,16,17,1
  1233                        	.member	Obsolete2,15,16,17,1
  1234                        	.member	DownloadMicrocode,16,16,17,1
  1235                        	.member	DmaQueued,17,16,17,1
  1236                        	.member	Cfa,18,16,17,1
  1237                        	.member	AdvancedPm,19,16,17,1
  1238                        	.member	Msn,20,16,17,1
  1239                        	.member	PowerUpInStandby,21,16,17,1
  1240                        	.member	ManualPowerUp,22,16,17,1
  1241                        	.member	Reserved2,23,16,17,1
  1242                        	.member	SetMax,24,16,17,1
  1243                        	.member	Acoustics,25,16,17,1
  1244                        	.member	BigLba,26,16,17,1
  1245                        	.member	DeviceConfigOverlay,27,16,17,1
  1246                        	.member	FlushCache,28,16,17,1
  1247                        	.member	FlushCacheExt,29,16,17,1
  1248                        	.member	WordValid83,30,16,17,2
  1249                        	.member	SmartErrorLog,32,16,17,1
  1250                        	.member	SmartSelfTest,33,16,17,1
  1251                        	.member	MediaSerialNumber,34,16,17,1
  1252                        	.member	MediaCardPassThrough,35,16,17,1
  1253                        	.member	StreamingFeature,36,16,17,1
  1254                        	.member	GpLogging,37,16,17,1
  1255                        	.member	WriteFua,38,16,17,1
  1256                        	.member	WriteQueuedFua,39,16,17,1
  1257                        	.member	WWN64Bit,40,16,17,1
  1258                        	.member	URGReadStream,41,16,17,1
  1259                        	.member	URGWriteStream,42,16,17,1
  1260                        	.member	ReservedForTechReport,43,16,17,2
  1261                        	.member	IdleWithUnloadFeature,45,16,17,1
  1262                        	.member	WordValid,46,16,17,2
  1263                        	.eos
  1264                        	.stag	fake112_,48,112
  1265                        	.member	SmartCommands,0,16,17,1
  1266                        	.member	SecurityMode,1,16,17,1
  1267                        	.member	RemovableMediaFeature,2,16,17,1
  1268                        	.member	PowerManagement,3,16,17,1
  1269                        	.member	Reserved1,4,16,17,1
  1270                        	.member	WriteCache,5,16,17,1
  1271                        	.member	LookAhead,6,16,17,1
  1272                        	.member	ReleaseInterrupt,7,16,17,1
  1273                        	.member	ServiceInterrupt,8,16,17,1
  1274                        	.member	DeviceReset,9,16,17,1
  1275                        	.member	HostProtectedArea,10,16,17,1
  1276                        	.member	Obsolete1,11,16,17,1
  1277                        	.member	WriteBuffer,12,16,17,1
  1278                        	.member	ReadBuffer,13,16,17,1
  1279                        	.member	Nop,14,16,17,1
  Mon Sep 27 2021  9:39                                                Page 25


  1280                        	.member	Obsolete2,15,16,17,1
  1281                        	.member	DownloadMicrocode,16,16,17,1
  1282                        	.member	DmaQueued,17,16,17,1
  1283                        	.member	Cfa,18,16,17,1
  1284                        	.member	AdvancedPm,19,16,17,1
  1285                        	.member	Msn,20,16,17,1
  1286                        	.member	PowerUpInStandby,21,16,17,1
  1287                        	.member	ManualPowerUp,22,16,17,1
  1288                        	.member	Reserved2,23,16,17,1
  1289                        	.member	SetMax,24,16,17,1
  1290                        	.member	Acoustics,25,16,17,1
  1291                        	.member	BigLba,26,16,17,1
  1292                        	.member	DeviceConfigOverlay,27,16,17,1
  1293                        	.member	FlushCache,28,16,17,1
  1294                        	.member	FlushCacheExt,29,16,17,1
  1295                        	.member	Resrved3,30,16,17,1
  1296                        	.member	Words119_120Valid,31,16,17,1
  1297                        	.member	SmartErrorLog,32,16,17,1
  1298                        	.member	SmartSelfTest,33,16,17,1
  1299                        	.member	MediaSerialNumber,34,16,17,1
  1300                        	.member	MediaCardPassThrough,35,16,17,1
  1301                        	.member	StreamingFeature,36,16,17,1
  1302                        	.member	GpLogging,37,16,17,1
  1303                        	.member	WriteFua,38,16,17,1
  1304                        	.member	WriteQueuedFua,39,16,17,1
  1305                        	.member	WWN64Bit,40,16,17,1
  1306                        	.member	URGReadStream,41,16,17,1
  1307                        	.member	URGWriteStream,42,16,17,1
  1308                        	.member	ReservedForTechReport,43,16,17,2
  1309                        	.member	IdleWithUnloadFeature,45,16,17,1
  1310                        	.member	Reserved4,46,16,17,2
  1311                        	.eos
  1312                        	.stag	fake113_,16,113
  1313                        	.member	TimeRequired,0,16,17,15
  1314                        	.member	ExtendedTimeReported,15,16,17,1
  1315                        	.eos
  1316                        	.stag	fake114_,16,114
  1317                        	.member	TimeRequired,0,16,17,15
  1318                        	.member	ExtendedTimeReported,15,16,17,1
  1319                        	.eos
  1320                        	.stag	fake115_,16,115
  1321                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1322                        	.member	Reserved0,4,16,17,8
  1323                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1324                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1325                        	.member	Reserved1,14,16,17,2
  1326                        	.eos
  1327                        	.stag	fake116_,16,116
  1328                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1329                        	.member	WriteReadVerify,1,16,17,1
  1330                        	.member	WriteUncorrectableExt,2,16,17,1
  1331                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1332                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1333                        	.member	FreefallControl,5,16,17,1
  1334                        	.member	SenseDataReporting,6,16,17,1
  Mon Sep 27 2021  9:39                                                Page 26


  1335                        	.member	ExtendedPowerConditions,7,16,17,1
  1336                        	.member	Reserved0,8,16,17,6
  1337                        	.member	WordValid,14,16,17,2
  1338                        	.eos
  1339                        	.stag	fake117_,16,117
  1340                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1341                        	.member	WriteReadVerify,1,16,17,1
  1342                        	.member	WriteUncorrectableExt,2,16,17,1
  1343                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1344                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1345                        	.member	FreefallControl,5,16,17,1
  1346                        	.member	SenseDataReporting,6,16,17,1
  1347                        	.member	ExtendedPowerConditions,7,16,17,1
  1348                        	.member	Reserved0,8,16,17,6
  1349                        	.member	Reserved1,14,16,17,2
  1350                        	.eos
  1351                        	.stag	fake118_,16,118
  1352                        	.member	SecuritySupported,0,16,17,1
  1353                        	.member	SecurityEnabled,1,16,17,1
  1354                        	.member	SecurityLocked,2,16,17,1
  1355                        	.member	SecurityFrozen,3,16,17,1
  1356                        	.member	SecurityCountExpired,4,16,17,1
  1357                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1358                        	.member	Reserved0,6,16,17,2
  1359                        	.member	SecurityLevel,8,16,17,1
  1360                        	.member	Reserved1,9,16,17,7
  1361                        	.eos
  1362                        	.stag	fake119_,16,119
  1363                        	.member	MaximumCurrentInMA,0,16,17,12
  1364                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1365                        	.member	CfaPowerMode1Required,13,16,17,1
  1366                        	.member	Reserved0,14,16,17,1
  1367                        	.member	Word160Supported,15,16,17,1
  1368                        	.eos
  1369                        	.stag	fake120_,16,120
  1370                        	.member	SupportsTrim,0,16,17,1
  1371                        	.member	Reserved0,1,16,17,15
  1372                        	.eos
  1373                        	.stag	fake121_,16,121
  1374                        	.member	Supported,0,16,17,1
  1375                        	.member	Reserved0,1,16,17,1
  1376                        	.member	WriteSameSuported,2,16,17,1
  1377                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1378                        	.member	FeatureControlSuported,4,16,17,1
  1379                        	.member	DataTablesSuported,5,16,17,1
  1380                        	.member	Reserved1,6,16,17,6
  1381                        	.member	VendorSpecific,12,16,17,4
  1382                        	.eos
  1383                        	.stag	fake122_,16,122
  1384                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1385                        	.member	Word209Supported,14,16,17,1
  1386                        	.member	Reserved0,15,16,17,1
  1387                        	.eos
  1388                        	.stag	fake123_,16,123
  1389                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1390                        	.member	Reserved0,1,16,17,3
  1391                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  Mon Sep 27 2021  9:39                                                Page 27


  1392                        	.member	Reserved1,5,16,17,3
  1393                        	.member	NVCachePowerModeVersion,8,16,17,4
  1394                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1395                        	.eos
  1396                        	.stag	fake124_,16,124
  1397                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1398                        	.member	Reserved,8,14,8,8
  1399                        	.eos
  1400                        	.stag	fake125_,16,125
  1401                        	.member	MajorVersion,0,16,17,12
  1402                        	.member	TransportType,12,16,17,4
  1403                        	.eos
  1404                        	.stag	_IDENTIFY_DEVICE_DATA,4096,126
  1405                        	.member	GeneralConfiguration,0,10,8,16,104
  1406                        	.member	NumCylinders,16,16,8,16
  1407                        	.member	SpecificConfiguration,32,16,8,16
  1408                        	.member	NumHeads,48,16,8,16
  1409                        	.member	Retired1Bytes,64,110,8,0,4
  1410                        	.member	NumSectorsPerTrack,96,16,8,16
  1411                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1412                        	.member	SerialNumber,160,110,8,0,20
  1413                        	.member	Retired2,320,112,8,0,2
  1414                        	.member	Obsolete1,352,16,8,16
  1415                        	.member	FirmwareRevision,368,110,8,0,8
  1416                        	.member	ModelNumber,432,110,8,0,40
  1417                        	.member	MaximumBlockTransfer,752,14,8,8
  1418                        	.member	VendorUnique2,760,14,8,8
  1419                        	.member	TrustedComputing,768,10,8,16,105
  1420                        	.member	Capabilities,784,10,8,32,106
  1421                        	.member	ObsoleteWords51,816,112,8,0,2
  1422                        	.member	TranslationFieldsValid,848,16,17,3
  1423                        	.member	Reserved3,851,16,17,5
  1424                        	.member	FreeFallControlSensitivity,856,16,17,8
  1425                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1426                        	.member	NumberOfCurrentHeads,880,16,8,16
  1427                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1428                        	.member	CurrentSectorCapacity,912,18,8,32
  1429                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1430                        	.member	MultiSectorSettingValid,952,14,17,1
  1431                        	.member	ReservedByte59,953,14,17,3
  1432                        	.member	SanitizeFeatureSupported,956,14,17,1
  1433                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1434                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1435                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1436                        	.member	UserAddressableSectors,960,18,8,32
  1437                        	.member	ObsoleteWord62,992,16,8,16
  1438                        	.member	MultiWordDMASupport,1008,16,17,8
  1439                        	.member	MultiWordDMAActive,1016,16,17,8
  1440                        	.member	AdvancedPIOModes,1024,16,17,8
  1441                        	.member	ReservedByte64,1032,16,17,8
  1442                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1443                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1444                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1445                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1446                        	.member	AdditionalSupported,1104,10,8,16,107
  Mon Sep 27 2021  9:39                                                Page 28


  1447                        	.member	ReservedWords70,1120,112,8,0,5
  1448                        	.member	QueueDepth,1200,16,17,5
  1449                        	.member	ReservedWord75,1205,16,17,11
  1450                        	.member	SerialAtaCapabilities,1216,10,8,32,108
  1451                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    109
  1452                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,11
                    0
  1453                        	.member	MajorRevision,1280,16,8,16
  1454                        	.member	MinorRevision,1296,16,8,16
  1455                        	.member	CommandSetSupport,1312,10,8,48,111
  1456                        	.member	CommandSetActive,1360,10,8,48,112
  1457                        	.member	UltraDMASupport,1408,16,17,8
  1458                        	.member	UltraDMAActive,1416,16,17,8
  1459                        	.member	NormalSecurityEraseUnit,1424,10,8,16,113
  1460                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
                    14
  1461                        	.member	CurrentAPMLevel,1456,16,17,8
  1462                        	.member	ReservedWord91,1464,16,17,8
  1463                        	.member	MasterPasswordID,1472,16,8,16
  1464                        	.member	HardwareResetResult,1488,16,8,16
  1465                        	.member	CurrentAcousticValue,1504,16,17,8
  1466                        	.member	RecommendedAcousticValue,1512,16,17,8
  1467                        	.member	StreamMinRequestSize,1520,16,8,16
  1468                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1469                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1470                        	.member	StreamingPerfGranularity,1568,18,8,32
  1471                        	.member	Max48BitLBA,1600,114,8,0,2
  1472                        	.member	StreamingTransferTime,1664,16,8,16
  1473                        	.member	DsmCap,1680,16,8,16
  1474                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    15
  1475                        	.member	InterSeekDelay,1712,16,8,16
  1476                        	.member	WorldWideName,1728,112,8,0,4
  1477                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1478                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1479                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1480                        	.member	CommandSetSupportExt,1904,10,8,16,116
  1481                        	.member	CommandSetActiveExt,1920,10,8,16,117
  1482                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1483                        	.member	MsnSupport,2032,16,17,2
  1484                        	.member	ReservedWord127,2034,16,17,14
  1485                        	.member	SecurityStatus,2048,10,8,16,118
  1486                        	.member	ReservedWord129,2064,112,8,0,31
  1487                        	.member	CfaPowerMode1,2560,10,8,16,119
  1488                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1489                        	.member	NominalFormFactor,2688,16,17,4
  1490                        	.member	ReservedWord168,2692,16,17,12
  1491                        	.member	DataSetManagementFeature,2704,10,8,16,12
                    0
  1492                        	.member	AdditionalProductID,2720,112,8,0,4
  1493                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1494                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1495                        	.member	SCTCommandTransport,3296,10,8,16,121
  Mon Sep 27 2021  9:39                                                Page 29


  1496                        	.member	ReservedWord207,3312,112,8,0,2
  1497                        	.member	BlockAlignment,3344,10,8,16,122
  1498                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1499                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1500                        	.member	NVCacheCapabilities,3424,10,8,16,123
  1501                        	.member	NVCacheSizeLSW,3440,16,8,16
  1502                        	.member	NVCacheSizeMSW,3456,16,8,16
  1503                        	.member	NominalMediaRotationRate,3472,16,8,16
  1504                        	.member	ReservedWord218,3488,16,8,16
  1505                        	.member	NVCacheOptions,3504,10,8,16,124
  1506                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1507                        	.member	ReservedWord220,3528,16,17,8
  1508                        	.member	ReservedWord221,3536,16,8,16
  1509                        	.member	TransportMajorVersion,3552,10,8,16,125
  1510                        	.member	TransportMinorVersion,3568,16,8,16
  1511                        	.member	ReservedWord224,3584,112,8,0,6
  1512                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1513                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1514                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1515                        	.member	ReservedWord236,3776,112,8,0,19
  1516                        	.member	Signature,4080,16,17,8
  1517                        	.member	CheckSum,4088,16,17,8
  1518                        	.eos
  1519                        	.stag	_FXDosDevice,5744,127
  1520                        	.member	type,0,14,8,8
  1521                        	.member	initialized,8,14,8,8
  1522                        	.member	devdata,16,129,8,32
  1523                        	.member	devstatus,48,14,8,8
  1524                        	.member	bootSector,56,10,8,928,97
  1525                        	.member	partitionTable,984,10,8,128,98
  1526                        	.member	fileAllocationTable,1112,110,8,0,512
  1527                        	.member	bsOffset,5208,18,8,32
  1528                        	.member	rootDirSectors,5240,18,8,32
  1529                        	.member	root_entry_count,5272,5,8,16
  1530                        	.member	rootEntriesPerPage,5288,5,8,16
  1531                        	.member	sectors_per_cluster,5304,5,8,16
  1532                        	.member	firstDataSector,5320,18,8,32
  1533                        	.member	fatTableOffset,5352,18,8,32
  1534                        	.member	volume_name,5384,110,8,0,12
  1535                        	.member	root_volume_name,5480,110,8,0,12
  1536                        	.member	errorCode,5576,14,8,8
  1537                        	.member	pfInit,5584,641,8,32
  1538                        	.member	pfReset,5616,641,8,32
  1539                        	.member	pfUninit,5648,641,8,32
  1540                        	.member	pfReader,5680,654,8,32
  1541                        	.member	pfWriter,5712,654,8,32
  1542                        	.eos
  1543                        	.utag	item,32,128
  1544                        	.member	dir,0,138,11,32,87
  1545                        	.member	file,0,138,11,32,86
  1546                        	.member	fileInfo,0,138,11,32,88
  1547                        	.eos
  Mon Sep 27 2021  9:39                                                Page 30


  1548                        	.stag	_dos_handle,80,129
  1549                        	.member	fs,0,138,8,32,84
  1550                        	.member	fr,32,5,8,16
  1551                        	.member	path,48,142,8,32
  1552                        	.eos
  1553                        	.stag	fx_file,112,130
  1554                        	.member	fs,0,138,8,32,84
  1555                        	.member	fileInfo,32,138,8,32,88
  1556                        	.member	f,64,138,8,32,86
  1557                        	.member	fr,96,5,8,16
  1558                        	.eos
  1559                        	.line	812
  1560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",2
  1561                        ;#include "fxmemorymanager.h"
  1562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
  1563                        	.line	129
  1564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",3
  1565                        ;#include "drivers/DRIVER.h"
  1566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/DRIVER.h",0
  1567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
  1568                        	.line	30
  1569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/DRIVER.h",5
  1570                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
  1571                        	.line	129
  1572                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/DRIVER.h",6
  1573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
  1574                        	.line	1963
  1575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/DRIVER.h",106
  1576                        	.line	115
  1577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",4
  1578                        ;
  1579                        ;#pragma section CODE=FXDOS,offset $08:92F5
  1580                        FXDOS	section	offset $08:92F5
  1581 08:92F5:              	ends
  1582                        ;
  1583                        ;#define DRIVER_SIZE  (0x05F0)
  1584                        ;#define DRIVER_MAX   (25)
  1585                        ;#define DRIVER_BASE  (0x040000)
  1586                        ;
  1587                        ;//static UCHAR sectorBuffer[512];
  1588                        ;static LPSTR sectorBuffer = NULL;
  1589                        	data
  1590                        ~~sectorBuffer:
  1591 00:0000: 00 00 00 00  	dl	$0
  1592 00:0004:              	ends
  1593                        ;//static CHAR	 longnamecount;
  1594                        ;//static UCHAR longnameBuffer[255];
  Mon Sep 27 2021  9:39                                                Page 31


  1595                        ;
  1596                        ;FXDOSDEVICE fxdosDevice;
  1597                        ;//
  1598                        ;// list of device drivers
  1599                        ;//
  1600                        ;static PFXNODELIST _k_dos_devicedrivers	    = NU
                    LL;
  1601                        	data
  1602                        ~~_k_dos_devicedrivers:
  1603 00:0004: 00 00 00 00  	dl	$0
  1604 00:0008:              	ends
  1605                        ;//
  1606                        ;// list of drives
  1607                        ;//
  1608                        ;static PFXNODELIST _k_dos_deviceinstance	= NULL;
  1609                        	data
  1610                        ~~_k_dos_deviceinstance:
  1611 00:0008: 00 00 00 00  	dl	$0
  1612 00:000C:              	ends
  1613                        ;
  1614                        ;//#define MAX_IRQ_BLOCKS          4
  1615                        ;//#define MAX_IRQ_INTERRUPTS      8
  1616                        ;
  1617                        ;/*
  1618                        ;DEVICEDRIVER_IRQ g_irq_handlers[][8]  = {   {0x00
                    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//REG0
  1619                        ;							
                    				{0x00,0x00,0x00,0x00,0x00,0x00,0
                    x00,0x00},//REG1
  1620                        ;							
                    				{0x00,0x00,0x00,0x00,0x00,0x00,0
                    x00,0x00},//REG2
  1621                        ;							
                    				{0x00,0x00,0x00,0x00,0x00,0x00,0
                    x00,0x00} //REG3
  1622                        ;							
                     	 	 	 };
  1623                        ;*/
  1624                        ;
  1625                        ;
  1626                        ;extern IRQCHAIN g_irq_handlers[4][8];
  1627                        ;
  1628                        ;//extern FX_DEVICE_DRIVER DRIVER_B2Console;
  1629                        ;//extern FX_DEVICE_DRIVER DRIVER_B2SDCard;
  1630                        ;//extern FX_DEVICE_DRIVER DRIVER_FMXConsole;
  1631                        ;//extern FX_DEVICE_DRIVER DRIVER_FMXSDCard;
  1632                        ;
  1633                        ;
  1634                        ;//extern PFX_DEVICE_DRIVER DEVICE_COM;
  1635                        ;//extern PFX_DEVICE_DRIVER DEVICE_HD;
  1636                        ;//extern PFX_DEVICE_DRIVER DEVICE_SD;
  1637                        ;//extern PFX_DEVICE_DRIVER DEVICE_CON;
  1638                        ;
  1639                        ;LPVOID k_dos_ext_load_driver(LPCSTR driverPath)
  1640                        ;{
  1641                        	.line	52
  1642                        	.line	53
  1643                        	FXDOS
  Mon Sep 27 2021  9:39                                                Page 32


  1644                        	xdef	~~k_dos_ext_load_driver
  1645                        	func
  1646                        	.function	53
  1647                        ~~k_dos_ext_load_driver:
  1648                        	longa	on
  1649                        	longi	on
  1650 08:92F5: 3B           	tsc
  1651 08:92F6: 38           	sec
  1652 08:92F7: E9 16 00     	sbc	#L2
  1653 08:92FA: 1B           	tcs
  1654 08:92FB: 0B           	phd
  1655 08:92FC: 5B           	tcd
  1656             00000004   driverPath_0	set	4
  1657                        	.block	53
  1658                        ;	UINT dsize = 0;
  1659                        ;	HANDLE hdriver = NULL;
  1660                        ;	PFX_DEVICE_DRIVER pstrHead = NULL;
  1661                        ;	ULONG idx = 0L;
  1662                        ;	LPVOID driver = NULL;
  1663                        ;
  1664                        ;	hdriver = k_user_LoadResource(driverPath);
  1665             00000000   dsize_1	set	0
  1666             00000002   hdriver_1	set	2
  1667             00000006   pstrHead_1	set	6
  1668             0000000A   idx_1	set	10
  1669             0000000E   driver_1	set	14
  1670                        	.sym	dsize,0,16,1,16
  1671                        	.sym	hdriver,2,129,1,32
  1672                        	.sym	pstrHead,6,138,1,32,58
  1673                        	.sym	idx,10,18,1,32
  1674                        	.sym	driver,14,129,1,32
  1675                        	.sym	driverPath,4,142,6,32
  1676 08:92FD: 64 05        	stz	<L3+dsize_1
  1677 08:92FF: 64 07        	stz	<L3+hdriver_1
  1678 08:9301: 64 09        	stz	<L3+hdriver_1+2
  1679 08:9303: 64 0B        	stz	<L3+pstrHead_1
  1680 08:9305: 64 0D        	stz	<L3+pstrHead_1+2
  1681 08:9307: 64 0F        	stz	<L3+idx_1
  1682 08:9309: 64 11        	stz	<L3+idx_1+2
  1683 08:930B: 64 13        	stz	<L3+driver_1
  1684 08:930D: 64 15        	stz	<L3+driver_1+2
  1685                        	.line	60
  1686 08:930F: D4 1C        	pei	<L2+driverPath_0+2
  1687 08:9311: D4 1A        	pei	<L2+driverPath_0
  1688 08:9313: 22 xx xx xx  	jsl	~~k_user_LoadResource
  1689 08:9317: 85 07        	sta	<L3+hdriver_1
  1690 08:9319: 86 09        	stx	<L3+hdriver_1+2
  1691                        ;	if(hdriver!=NULL)
  1692                        	.line	61
  1693                        ;	{
  1694 08:931B: A5 07        	lda	<L3+hdriver_1
  1695 08:931D: 05 09        	ora	<L3+hdriver_1+2
  1696 08:931F: D0 03        	bne	L5
  1697 08:9321: 82 9B 00     	brl	L10001
  1698                        L5:
  1699                        	.line	62
  1700                        ;		pstrHead =  (PFX_DEVICE_DRIVER)(&((LPSTR
                    )hdriver)[sizeof(FXRFHEADER)]);
  Mon Sep 27 2021  9:39                                                Page 33


  1701                        	.line	63
  1702 08:9324: 18           	clc
  1703 08:9325: A9 09 00     	lda	#$9
  1704 08:9328: 65 07        	adc	<L3+hdriver_1
  1705 08:932A: 85 0B        	sta	<L3+pstrHead_1
  1706 08:932C: A9 00 00     	lda	#$0
  1707 08:932F: 65 09        	adc	<L3+hdriver_1+2
  1708 08:9331: 85 0D        	sta	<L3+pstrHead_1+2
  1709                        ;
  1710                        ;		idx = (((ULONG)pstrHead->driver_context)
                     - ((ULONG)FX_DRV_IRQ_SLOT_0))/((ULONG)FX_DRV_SIZE);
  1711                        	.line	65
  1712 08:9333: 18           	clc
  1713 08:9334: A9 00 00     	lda	#$0
  1714 08:9337: A0 4D 00     	ldy	#$4d
  1715 08:933A: 77 0B        	adc	[<L3+pstrHead_1],Y
  1716 08:933C: 85 01        	sta	<R0
  1717 08:933E: A9 FC FF     	lda	#$fffc
  1718 08:9341: A0 4F 00     	ldy	#$4f
  1719 08:9344: 77 0B        	adc	[<L3+pstrHead_1],Y
  1720 08:9346: 85 03        	sta	<R0+2
  1721 08:9348: F4 00 00     	pea	#^$5f0
  1722 08:934B: F4 F0 05     	pea	#<$5f0
  1723 08:934E: D4 03        	pei	<R0+2
  1724 08:9350: D4 01        	pei	<R0
  1725                        	xref	~~~ludv
  1726 08:9352: 22 xx xx xx  	jsl	~~~ludv
  1727 08:9356: 85 0F        	sta	<L3+idx_1
  1728 08:9358: 86 11        	stx	<L3+idx_1+2
  1729                        ;		dsize = *((ULONG*)((PFXRFHEADER)hdriver)
                    ->magic) - sizeof(FXRFHEADER) - sizeof(FX_DEVICE_DRIVER);
  1730                        	.line	66
  1731 08:935A: 18           	clc
  1732 08:935B: A9 96 FF     	lda	#$ff96
  1733 08:935E: 67 07        	adc	[<L3+hdriver_1]
  1734 08:9360: 85 01        	sta	<R0
  1735 08:9362: A9 FF FF     	lda	#$ffff
  1736 08:9365: A0 02 00     	ldy	#$2
  1737 08:9368: 77 07        	adc	[<L3+hdriver_1],Y
  1738 08:936A: 85 03        	sta	<R0+2
  1739 08:936C: A5 01        	lda	<R0
  1740 08:936E: 85 05        	sta	<L3+dsize_1
  1741                        ;
  1742                        ;		/*
  1743                        ;		k_debug_nstrings("DRIVER NAME:",pstrHead
                    ->name,32);
  1744                        ;		k_debug_pointer ("DRIVER ADDR:",pstrHead
                    ->driver_context);
  1745                        ;		k_debug_long    ("DRIVER RES SIZE:", *((
                    ULONG*)((PFXRFHEADER)hdriver)->magic) );
  1746                        ;		k_debug_long    ("DRIVER SIZE:", dsize )
                    ;
  1747                        ;		k_debug_long    ("DRIVER IDX:", idx );
  1748                        ;		*/
  1749                        ;
  1750                        ;		memset(pstrHead->driver_context,0,FX_DRV
                    _SIZE);
  1751                        	.line	76
  Mon Sep 27 2021  9:39                                                Page 34


  1752 08:9370: F4 F0 05     	pea	#<$5f0
  1753 08:9373: F4 00 00     	pea	#<$0
  1754 08:9376: A0 4F 00     	ldy	#$4f
  1755 08:9379: B7 0B        	lda	[<L3+pstrHead_1],Y
  1756 08:937B: 48           	pha
  1757 08:937C: A0 4D 00     	ldy	#$4d
  1758 08:937F: B7 0B        	lda	[<L3+pstrHead_1],Y
  1759 08:9381: 48           	pha
  1760 08:9382: 22 xx xx xx  	jsl	~~memset
  1761                        ;		memcpy(pstrHead->driver_context,(LPVOID)
                    (&((LPSTR)hdriver)[sizeof(FXRFHEADER) + sizeof(FX_DEVICE_DRI
                    VER)]),dsize);
  1762                        	.line	77
  1763 08:9386: D4 05        	pei	<L3+dsize_1
  1764 08:9388: 18           	clc
  1765 08:9389: A9 6A 00     	lda	#$6a
  1766 08:938C: 65 07        	adc	<L3+hdriver_1
  1767 08:938E: 85 01        	sta	<R0
  1768 08:9390: A9 00 00     	lda	#$0
  1769 08:9393: 65 09        	adc	<L3+hdriver_1+2
  1770 08:9395: 85 03        	sta	<R0+2
  1771 08:9397: D4 03        	pei	<R0+2
  1772 08:9399: D4 01        	pei	<R0
  1773 08:939B: A0 4F 00     	ldy	#$4f
  1774 08:939E: B7 0B        	lda	[<L3+pstrHead_1],Y
  1775 08:93A0: 48           	pha
  1776 08:93A1: A0 4D 00     	ldy	#$4d
  1777 08:93A4: B7 0B        	lda	[<L3+pstrHead_1],Y
  1778 08:93A6: 48           	pha
  1779 08:93A7: 22 xx xx xx  	jsl	~~memcpy
  1780                        ;
  1781                        ;		free(hdriver);
  1782                        	.line	79
  1783 08:93AB: D4 09        	pei	<L3+hdriver_1+2
  1784 08:93AD: D4 07        	pei	<L3+hdriver_1
  1785 08:93AF: 22 xx xx xx  	jsl	~~free
  1786                        ;
  1787                        ;		driver = k_dos_load_driver(idx);
  1788                        	.line	81
  1789 08:93B3: D4 11        	pei	<L3+idx_1+2
  1790 08:93B5: D4 0F        	pei	<L3+idx_1
  1791 08:93B7: 22 D5 93 08  	jsl	~~k_dos_load_driver
  1792 08:93BB: 85 13        	sta	<L3+driver_1
  1793 08:93BD: 86 15        	stx	<L3+driver_1+2
  1794                        ;	}
  1795                        	.line	82
  1796                        ;
  1797                        ;	return driver;
  1798                        L10001:
  1799                        	.line	84
  1800 08:93BF: A6 15        	ldx	<L3+driver_1+2
  1801 08:93C1: A5 13        	lda	<L3+driver_1
  1802                        L6:
  1803 08:93C3: A8           	tay
  1804 08:93C4: A5 18        	lda	<L2+2
  1805 08:93C6: 85 1C        	sta	<L2+2+4
  1806 08:93C8: A5 17        	lda	<L2+1
  1807 08:93CA: 85 1B        	sta	<L2+1+4
  Mon Sep 27 2021  9:39                                                Page 35


  1808 08:93CC: 2B           	pld
  1809 08:93CD: 3B           	tsc
  1810 08:93CE: 18           	clc
  1811 08:93CF: 69 1A 00     	adc	#L2+4
  1812 08:93D2: 1B           	tcs
  1813 08:93D3: 98           	tya
  1814 08:93D4: 6B           	rtl
  1815                        ;}
  1816                        	.line	85
  1817                        	.endblock	85
  1818             00000016   L2	equ	22
  1819             00000005   L3	equ	5
  1820 08:93D5:              	ends
  1821                        	efunc
  1822                        	.endfunc	85,5,22
  1823                        	.line	85
  1824                        ;
  1825                        ;LPVOID k_dos_load_driver(ULONG driver_idx)
  1826                        ;{
  1827                        	.line	87
  1828                        	.line	88
  1829                        	FXDOS
  1830                        	xdef	~~k_dos_load_driver
  1831                        	func
  1832                        	.function	88
  1833                        ~~k_dos_load_driver:
  1834                        	longa	on
  1835                        	longi	on
  1836 08:93D5: 3B           	tsc
  1837 08:93D6: 38           	sec
  1838 08:93D7: E9 48 00     	sbc	#L7
  1839 08:93DA: 1B           	tcs
  1840 08:93DB: 0B           	phd
  1841 08:93DC: 5B           	tcd
  1842             00000004   driver_idx_0	set	4
  1843                        	.block	88
  1844                        ;	CHAR major[16];
  1845                        ;	CHAR minor[16];
  1846                        ;	CHAR k16buffer[16];
  1847                        ;
  1848                        ;	LPSTR log = NULL;
  1849                        ;
  1850                        ;	PFX_DEVICE_DRIVER driver = NULL;
  1851                        ;
  1852                        ;	GETDRIVERDEF _k_get_driver_def = NULL;
  1853                        ;
  1854                        ;	sectorBuffer = (LPSTR)k_mem_allocate_heap(512);
  1855             00000000   major_1	set	0
  1856             00000010   minor_1	set	16
  1857             00000020   k16buffer_1	set	32
  1858             00000030   log_1	set	48
  1859             00000034   driver_1	set	52
  1860             00000038   _k_get_driver_def_1	set	56
  1861                        	.sym	major,0,110,1,0,16
  1862                        	.sym	minor,16,110,1,0,16
  1863                        	.sym	k16buffer,32,110,1,0,16
  1864                        	.sym	log,48,142,1,32
  1865                        	.sym	driver,52,138,1,32,58
  Mon Sep 27 2021  9:39                                                Page 36


  1866                        	.sym	_k_get_driver_def,56,8842,1,32,58
  1867                        	.sym	driver_idx,4,18,6,32
  1868 08:93DD: 64 3D        	stz	<L8+log_1
  1869 08:93DF: 64 3F        	stz	<L8+log_1+2
  1870 08:93E1: 64 41        	stz	<L8+driver_1
  1871 08:93E3: 64 43        	stz	<L8+driver_1+2
  1872 08:93E5: 64 45        	stz	<L8+_k_get_driver_def_1
  1873 08:93E7: 64 47        	stz	<L8+_k_get_driver_def_1+2
  1874                        	.line	99
  1875 08:93E9: F4 00 00     	pea	#^$200
  1876 08:93EC: F4 00 02     	pea	#<$200
  1877 08:93EF: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  1878 08:93F3: 8D xx xx     	sta	|~~sectorBuffer
  1879 08:93F6: 8E xx xx     	stx	|~~sectorBuffer+2
  1880                        ;
  1881                        ;	k_get_c256_major_version(major);
  1882                        	.line	101
  1883 08:93F9: F4 00 00     	pea	#0
  1884 08:93FC: 18           	clc
  1885 08:93FD: 7B           	tdc
  1886 08:93FE: 69 0D 00     	adc	#<L8+major_1
  1887 08:9401: 48           	pha
  1888 08:9402: 22 xx xx xx  	jsl	~~k_get_c256_major_version
  1889                        ;	k_get_c256_minor_version(minor);
  1890                        	.line	102
  1891 08:9406: F4 00 00     	pea	#0
  1892 08:9409: 18           	clc
  1893 08:940A: 7B           	tdc
  1894 08:940B: 69 1D 00     	adc	#<L8+minor_1
  1895 08:940E: 48           	pha
  1896 08:940F: 22 xx xx xx  	jsl	~~k_get_c256_minor_version
  1897                        ;
  1898                        ;	_k_get_driver_def = ((GETDRIVERDEF)((LPVOID)((UL
                    ONG)DRIVER_BASE + (driver_idx * (ULONG)DRIVER_SIZE))));
  1899                        	.line	104
  1900 08:9413: F4 00 00     	pea	#^$5f0
  1901 08:9416: F4 F0 05     	pea	#<$5f0
  1902 08:9419: D4 4E        	pei	<L7+driver_idx_0+2
  1903 08:941B: D4 4C        	pei	<L7+driver_idx_0
  1904                        	xref	~~~lmul
  1905 08:941D: 22 xx xx xx  	jsl	~~~lmul
  1906 08:9421: 85 01        	sta	<R0
  1907 08:9423: 86 03        	stx	<R0+2
  1908 08:9425: 18           	clc
  1909 08:9426: A9 00 00     	lda	#$0
  1910 08:9429: 65 01        	adc	<R0
  1911 08:942B: 85 05        	sta	<R1
  1912 08:942D: A9 04 00     	lda	#$4
  1913 08:9430: 65 03        	adc	<R0+2
  1914 08:9432: 85 07        	sta	<R1+2
  1915 08:9434: A5 05        	lda	<R1
  1916 08:9436: 85 45        	sta	<L8+_k_get_driver_def_1
  1917 08:9438: A5 07        	lda	<R1+2
  1918 08:943A: 85 47        	sta	<L8+_k_get_driver_def_1+2
  1919                        ;
  1920                        ;	//k_debug_integer("Scan slot:",(UINT)driver_idx)
                    ;
  1921                        ;	//k_debug_pointer("k_dos_load_drivers::scanning 
  Mon Sep 27 2021  9:39                                                Page 37


                    @",_k_get_driver_def);
  1922                        ;
  1923                        ;	if(*((LONG*)_k_get_driver_def) == 0x4E9383B) // 
                    sig bytes of driver
  1924                        	.line	109
  1925                        ;	{
  1926 08:943C: A7 45        	lda	[<L8+_k_get_driver_def_1]
  1927 08:943E: C9 3B 38     	cmp	#<$4e9383b
  1928 08:9441: D0 08        	bne	L10
  1929 08:9443: A0 02 00     	ldy	#$2
  1930 08:9446: B7 45        	lda	[<L8+_k_get_driver_def_1],Y
  1931 08:9448: C9 E9 04     	cmp	#^$4e9383b
  1932                        L10:
  1933 08:944B: F0 03        	beq	L11
  1934 08:944D: 82 B6 01     	brl	L10002
  1935                        L11:
  1936                        	.line	110
  1937                        ;		//k_debug_pointer("k_dos_load_drivers::d
                    river located@",_k_get_driver_def);
  1938                        ;		//k_debug_string("Driver Detected:\r\n")
                    ;
  1939                        ;		driver = _k_get_driver_def(major,minor);
  1940                        	.line	113
  1941 08:9450: F4 00 00     	pea	#0
  1942 08:9453: 18           	clc
  1943 08:9454: 7B           	tdc
  1944 08:9455: 69 1D 00     	adc	#<L8+minor_1
  1945 08:9458: 48           	pha
  1946 08:9459: F4 00 00     	pea	#0
  1947 08:945C: 18           	clc
  1948 08:945D: 7B           	tdc
  1949 08:945E: 69 0D 00     	adc	#<L8+major_1
  1950 08:9461: 48           	pha
  1951 08:9462: A6 47        	ldx	<L8+_k_get_driver_def_1+2
  1952 08:9464: A5 45        	lda	<L8+_k_get_driver_def_1
  1953                        	xref	~~~lcal
  1954 08:9466: 22 xx xx xx  	jsl	~~~lcal
  1955 08:946A: 85 41        	sta	<L8+driver_1
  1956 08:946C: 86 43        	stx	<L8+driver_1+2
  1957                        ;		if(driver)
  1958                        	.line	114
  1959                        ;		{
  1960 08:946E: A5 41        	lda	<L8+driver_1
  1961 08:9470: 05 43        	ora	<L8+driver_1+2
  1962 08:9472: D0 03        	bne	L12
  1963 08:9474: 82 8C 01     	brl	L10003
  1964                        L12:
  1965                        	.line	115
  1966                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver data pre@",driver);
  1967                        ;
  1968                        ;			if( ((ULONG)driver) < 0x010000L 
                    ) // handle short addressing for linear segment driver
  1969                        	.line	118
  1970                        ;				driver = (PFX_DEVICE_DRI
                    VER)(((ULONG)driver) + (((ULONG)_k_get_driver_def) & 0xFF000
                    0L));
  1971 08:9477: A5 41        	lda	<L8+driver_1
  Mon Sep 27 2021  9:39                                                Page 38


  1972 08:9479: C9 00 00     	cmp	#<$10000
  1973 08:947C: A5 43        	lda	<L8+driver_1+2
  1974 08:947E: E9 01 00     	sbc	#^$10000
  1975 08:9481: 90 03        	bcc	L13
  1976 08:9483: 82 1E 00     	brl	L10004
  1977                        L13:
  1978                        	.line	119
  1979 08:9486: 64 01        	stz	<R0
  1980 08:9488: A5 47        	lda	<L8+_k_get_driver_def_1+2
  1981 08:948A: 29 FF 00     	and	#^$ff0000
  1982 08:948D: 85 03        	sta	<R0+2
  1983 08:948F: 18           	clc
  1984 08:9490: A5 41        	lda	<L8+driver_1
  1985 08:9492: 65 01        	adc	<R0
  1986 08:9494: 85 05        	sta	<R1
  1987 08:9496: A5 43        	lda	<L8+driver_1+2
  1988 08:9498: 65 03        	adc	<R0+2
  1989 08:949A: 85 07        	sta	<R1+2
  1990 08:949C: A5 05        	lda	<R1
  1991 08:949E: 85 41        	sta	<L8+driver_1
  1992 08:94A0: A5 07        	lda	<R1+2
  1993 08:94A2: 85 43        	sta	<L8+driver_1+2
  1994                        ;
  1995                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver data post@",driver);
  1996                        ;
  1997                        ;			//k_debug_strings("  Name:",driv
                    er->name);
  1998                        ;			//k_debug_strings("    Major:",d
                    river->hmajor);
  1999                        ;			//k_debug_strings("    Minor:",d
                    river->hminor);
  2000                        ;
  2001                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::f_driver_load:",driver->f_driver_load);
  2002                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::f_driver_irq:",driver->f_driver_irq);
  2003                        ;
  2004                        ;
  2005                        ;			if((strcmp(driver->hmajor,major)
                     == 0) && (strcmp(driver->hminor,minor) == 0))
  2006                        L10004:
  2007                        	.line	131
  2008                        ;			{
  2009 08:94A4: F4 00 00     	pea	#0
  2010 08:94A7: 18           	clc
  2011 08:94A8: 7B           	tdc
  2012 08:94A9: 69 0D 00     	adc	#<L8+major_1
  2013 08:94AC: 48           	pha
  2014 08:94AD: 18           	clc
  2015 08:94AE: A9 30 00     	lda	#$30
  2016 08:94B1: 65 41        	adc	<L8+driver_1
  2017 08:94B3: 85 01        	sta	<R0
  2018 08:94B5: A9 00 00     	lda	#$0
  2019 08:94B8: 65 43        	adc	<L8+driver_1+2
  2020 08:94BA: 85 03        	sta	<R0+2
  2021 08:94BC: D4 03        	pei	<R0+2
  2022 08:94BE: D4 01        	pei	<R0
  Mon Sep 27 2021  9:39                                                Page 39


  2023 08:94C0: 22 xx xx xx  	jsl	~~strcmp
  2024 08:94C4: AA           	tax
  2025 08:94C5: F0 03        	beq	L14
  2026 08:94C7: 82 39 01     	brl	L10005
  2027                        L14:
  2028 08:94CA: F4 00 00     	pea	#0
  2029 08:94CD: 18           	clc
  2030 08:94CE: 7B           	tdc
  2031 08:94CF: 69 1D 00     	adc	#<L8+minor_1
  2032 08:94D2: 48           	pha
  2033 08:94D3: 18           	clc
  2034 08:94D4: A9 38 00     	lda	#$38
  2035 08:94D7: 65 41        	adc	<L8+driver_1
  2036 08:94D9: 85 05        	sta	<R1
  2037 08:94DB: A9 00 00     	lda	#$0
  2038 08:94DE: 65 43        	adc	<L8+driver_1+2
  2039 08:94E0: 85 07        	sta	<R1+2
  2040 08:94E2: D4 07        	pei	<R1+2
  2041 08:94E4: D4 05        	pei	<R1
  2042 08:94E6: 22 xx xx xx  	jsl	~~strcmp
  2043 08:94EA: AA           	tax
  2044 08:94EB: F0 03        	beq	L15
  2045 08:94ED: 82 13 01     	brl	L10005
  2046                        L15:
  2047                        	.line	132
  2048                        ;				if(driver->type != DRIVE
                    R_TYPE_UNIMPL)
  2049                        	.line	133
  2050                        ;				{
  2051 08:94F0: E2 20        	sep	#$20
  2052                        	longa	off
  2053 08:94F2: A0 40 00     	ldy	#$40
  2054 08:94F5: B7 41        	lda	[<L8+driver_1],Y
  2055 08:94F7: C9 FF        	cmp	#<$ff
  2056 08:94F9: C2 20        	rep	#$20
  2057                        	longa	on
  2058 08:94FB: D0 03        	bne	L16
  2059 08:94FD: 82 00 01     	brl	L10006
  2060                        L16:
  2061                        	.line	134
  2062                        ;					k_nodelist_addto
                    list(_k_dos_devicedrivers,driver->type,driver->name,driver);
  2063                        	.line	135
  2064 08:9500: D4 43        	pei	<L8+driver_1+2
  2065 08:9502: D4 41        	pei	<L8+driver_1
  2066 08:9504: D4 43        	pei	<L8+driver_1+2
  2067 08:9506: D4 41        	pei	<L8+driver_1
  2068 08:9508: A0 40 00     	ldy	#$40
  2069 08:950B: B7 41        	lda	[<L8+driver_1],Y
  2070 08:950D: 48           	pha
  2071 08:950E: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  2072 08:9511: 48           	pha
  2073 08:9512: AD xx xx     	lda	|~~_k_dos_devicedrivers
  2074 08:9515: 48           	pha
  2075 08:9516: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  2076                        ;					//k_debug_string
                    ("    Hardware Compatible: YES\r\n");
  2077                        ;					if(driver->f_dri
  Mon Sep 27 2021  9:39                                                Page 40


                    ver_load)
  2078                        	.line	137
  2079                        ;						((DEVICE
                    DRIVER_LOAD)driver->f_driver_load)();
  2080 08:951A: A0 51 00     	ldy	#$51
  2081 08:951D: B7 41        	lda	[<L8+driver_1],Y
  2082 08:951F: A0 53 00     	ldy	#$53
  2083 08:9522: 17 41        	ora	[<L8+driver_1],Y
  2084 08:9524: D0 03        	bne	L17
  2085 08:9526: 82 0F 00     	brl	L10007
  2086                        L17:
  2087                        	.line	138
  2088 08:9529: A0 53 00     	ldy	#$53
  2089 08:952C: B7 41        	lda	[<L8+driver_1],Y
  2090 08:952E: AA           	tax
  2091 08:952F: A0 51 00     	ldy	#$51
  2092 08:9532: B7 41        	lda	[<L8+driver_1],Y
  2093                        	xref	~~~lcal
  2094 08:9534: 22 xx xx xx  	jsl	~~~lcal
  2095                        ;
  2096                        ;					if(driver->f_dri
                    ver_irq!=NULL) // temp hook up the mouse
  2097                        L10007:
  2098                        	.line	140
  2099                        ;					{
  2100 08:9538: A0 49 00     	ldy	#$49
  2101 08:953B: B7 41        	lda	[<L8+driver_1],Y
  2102 08:953D: A0 4B 00     	ldy	#$4b
  2103 08:9540: 17 41        	ora	[<L8+driver_1],Y
  2104 08:9542: D0 03        	bne	L18
  2105 08:9544: 82 B6 00     	brl	L10008
  2106                        L18:
  2107                        	.line	141
  2108                        ;						//k_debu
                    g_string("    Hardware Compatible as IRQ\r\n");
  2109                        ;						if(IRQRE
                    G(driver->irq_ctl)!=0xFF)
  2110                        	.line	143
  2111                        ;						{
  2112 08:9547: A0 47 00     	ldy	#$47
  2113 08:954A: B7 41        	lda	[<L8+driver_1],Y
  2114 08:954C: EB           	xba
  2115 08:954D: 29 FF 00     	and	#$00ff
  2116 08:9550: 29 FF 00     	and	#<$ff
  2117 08:9553: 85 01        	sta	<R0
  2118 08:9555: A5 01        	lda	<R0
  2119 08:9557: C9 FF 00     	cmp	#<$ff
  2120 08:955A: D0 03        	bne	L19
  2121 08:955C: 82 9E 00     	brl	L10009
  2122                        L19:
  2123                        	.line	144
  2124                        ;							
                    k_lock_irq();
  2125                        	.line	145
  2126 08:955F: 22 xx xx xx  	jsl	~~k_lock_irq
  2127                        ;							
                    if(g_irq_handlers[IRQREG(driver->irq_ctl)][IRQNUM(driver->ir
                    q_ctl)].handlers[0]!=NULL)
  Mon Sep 27 2021  9:39                                                Page 41


  2128                        	.line	146
  2129                        ;							
                    {
  2130 08:9563: A0 47 00     	ldy	#$47
  2131 08:9566: B7 41        	lda	[<L8+driver_1],Y
  2132 08:9568: 29 FF 00     	and	#<$ff
  2133 08:956B: 85 05        	sta	<R1
  2134 08:956D: A5 05        	lda	<R1
  2135 08:956F: 0A           	asl	A
  2136 08:9570: 0A           	asl	A
  2137 08:9571: 0A           	asl	A
  2138 08:9572: 0A           	asl	A
  2139 08:9573: 85 01        	sta	<R0
  2140 08:9575: A0 47 00     	ldy	#$47
  2141 08:9578: B7 41        	lda	[<L8+driver_1],Y
  2142 08:957A: EB           	xba
  2143 08:957B: 29 FF 00     	and	#$00ff
  2144 08:957E: 29 FF 00     	and	#<$ff
  2145 08:9581: A2 07 00     	ldx	#<$7
  2146                        	xref	~~~asl
  2147 08:9584: 22 xx xx xx  	jsl	~~~asl
  2148 08:9588: 85 05        	sta	<R1
  2149 08:958A: 18           	clc
  2150 08:958B: A5 05        	lda	<R1
  2151 08:958D: 65 01        	adc	<R0
  2152 08:958F: 85 09        	sta	<R2
  2153 08:9591: 18           	clc
  2154 08:9592: A9 xx xx     	lda	#<~~g_irq_handlers
  2155 08:9595: 65 09        	adc	<R2
  2156 08:9597: 85 01        	sta	<R0
  2157 08:9599: B2 01        	lda	(<R0)
  2158 08:959B: A0 02 00     	ldy	#$2
  2159 08:959E: 11 01        	ora	(<R0),Y
  2160 08:95A0: D0 03        	bne	L20
  2161 08:95A2: 82 4A 00     	brl	L10010
  2162                        L20:
  2163                        	.line	147
  2164                        ;							
                    	g_irq_handlers[IRQREG(driver->irq_ctl)][IRQNUM(driver->i
                    rq_ctl)].handlers[0] = (DEVICEDRIVER_IRQ)driver->f_driver_ir
                    q;
  2165                        	.line	148
  2166 08:95A5: A0 47 00     	ldy	#$47
  2167 08:95A8: B7 41        	lda	[<L8+driver_1],Y
  2168 08:95AA: 29 FF 00     	and	#<$ff
  2169 08:95AD: 85 05        	sta	<R1
  2170 08:95AF: A5 05        	lda	<R1
  2171 08:95B1: 0A           	asl	A
  2172 08:95B2: 0A           	asl	A
  2173 08:95B3: 0A           	asl	A
  2174 08:95B4: 0A           	asl	A
  2175 08:95B5: 85 01        	sta	<R0
  2176 08:95B7: A0 47 00     	ldy	#$47
  2177 08:95BA: B7 41        	lda	[<L8+driver_1],Y
  2178 08:95BC: EB           	xba
  2179 08:95BD: 29 FF 00     	and	#$00ff
  2180 08:95C0: 29 FF 00     	and	#<$ff
  2181 08:95C3: A2 07 00     	ldx	#<$7
  Mon Sep 27 2021  9:39                                                Page 42


  2182                        	xref	~~~asl
  2183 08:95C6: 22 xx xx xx  	jsl	~~~asl
  2184 08:95CA: 85 05        	sta	<R1
  2185 08:95CC: 18           	clc
  2186 08:95CD: A5 05        	lda	<R1
  2187 08:95CF: 65 01        	adc	<R0
  2188 08:95D1: 85 09        	sta	<R2
  2189 08:95D3: 18           	clc
  2190 08:95D4: A9 xx xx     	lda	#<~~g_irq_handlers
  2191 08:95D7: 65 09        	adc	<R2
  2192 08:95D9: 85 01        	sta	<R0
  2193 08:95DB: A0 49 00     	ldy	#$49
  2194 08:95DE: B7 41        	lda	[<L8+driver_1],Y
  2195 08:95E0: 92 01        	sta	(<R0)
  2196 08:95E2: A0 4B 00     	ldy	#$4b
  2197 08:95E5: B7 41        	lda	[<L8+driver_1],Y
  2198 08:95E7: A0 02 00     	ldy	#$2
  2199 08:95EA: 91 01        	sta	(<R0),Y
  2200                        ;							
                    }
  2201                        	.line	149
  2202                        ;							
                    else
  2203 08:95EC: 82 0A 00     	brl	L10011
  2204                        L10010:
  2205                        ;							
                    {
  2206                        	.line	151
  2207                        ;							
                    	k_debug_string("    IRQ CONFLICT DETECTED\r\n");
  2208                        	.line	152
  2209 08:95EF: F4 xx xx     	pea	#^L1
  2210 08:95F2: F4 xx xx     	pea	#<L1
  2211 08:95F5: 22 xx xx xx  	jsl	~~k_debug_string
  2212                        ;							
                    }
  2213                        	.line	153
  2214                        L10011:
  2215                        ;							
                    k_unlock_irq();
  2216                        	.line	154
  2217 08:95F9: 22 xx xx xx  	jsl	~~k_unlock_irq
  2218                        ;						}
  2219                        	.line	155
  2220                        ;					}
  2221                        L10009:
  2222                        	.line	156
  2223                        ;				}
  2224                        L10008:
  2225                        	.line	157
  2226                        ;				else
  2227 08:95FD: 82 00 00     	brl	L10012
  2228                        L10006:
  2229                        ;				{
  2230                        	.line	159
  2231                        ;					//k_debug_string
                    ("    UNIMPLEMENTED\r\n");
  2232                        ;				}
  Mon Sep 27 2021  9:39                                                Page 43


  2233                        	.line	161
  2234                        L10012:
  2235                        ;			}
  2236                        	.line	162
  2237                        ;			else
  2238 08:9600: 82 00 00     	brl	L10013
  2239                        L10005:
  2240                        ;			{
  2241                        	.line	164
  2242                        ;				//k_debug_string("    Ha
                    rdware Compatible: NO\r\n");
  2243                        ;			}
  2244                        	.line	166
  2245                        L10013:
  2246                        ;
  2247                        ;			//k_debug_string("\r\n");
  2248                        ;		}
  2249                        	.line	169
  2250                        ;	}
  2251                        L10003:
  2252                        	.line	170
  2253                        ;	else
  2254 08:9603: 82 00 00     	brl	L10014
  2255                        L10002:
  2256                        ;	{
  2257                        	.line	172
  2258                        ;		//k_debug_pointer("k_dos_load_drivers::d
                    river not detected@",_k_get_driver_def);
  2259                        ;	}
  2260                        	.line	174
  2261                        L10014:
  2262                        ;
  2263                        ;	return _k_get_driver_def;
  2264                        	.line	176
  2265 08:9606: A6 47        	ldx	<L8+_k_get_driver_def_1+2
  2266 08:9608: A5 45        	lda	<L8+_k_get_driver_def_1
  2267                        L21:
  2268 08:960A: A8           	tay
  2269 08:960B: A5 4A        	lda	<L7+2
  2270 08:960D: 85 4E        	sta	<L7+2+4
  2271 08:960F: A5 49        	lda	<L7+1
  2272 08:9611: 85 4D        	sta	<L7+1+4
  2273 08:9613: 2B           	pld
  2274 08:9614: 3B           	tsc
  2275 08:9615: 18           	clc
  2276 08:9616: 69 4C 00     	adc	#L7+4
  2277 08:9619: 1B           	tcs
  2278 08:961A: 98           	tya
  2279 08:961B: 6B           	rtl
  2280                        ;}
  2281                        	.line	177
  2282                        	.endblock	177
  2283             00000048   L7	equ	72
  2284             0000000D   L8	equ	13
  2285 08:961C:              	ends
  2286                        	efunc
  2287                        	.endfunc	177,13,72
  2288                        	.line	177
  Mon Sep 27 2021  9:39                                                Page 44


  2289                        	data
  2290                        L1:
  2291 00:000C: 20 20 20 20  	db	$20,$20,$20,$20,$49,$52,$51,$20,$43,$4F,
                    $4E,$46,$4C,$49,$43
       00:0010: 49 52 51 20 
       00:0014: 43 4F 4E 46 
       00:0018: 4C 49 43 
  2292 00:001B: 54 20 44 45  	db	$54,$20,$44,$45,$54,$45,$43,$54,$45,$44,
                    $0D,$0A,$00
       00:001F: 54 45 43 54 
       00:0023: 45 44 0D 0A 
       00:0027: 00 
  2293 00:0028:              	ends
  2294                        ;
  2295                        ;LPCSTR k_dos_load_drivers(void)
  2296                        ;{
  2297                        	.line	179
  2298                        	.line	180
  2299                        	FXDOS
  2300                        	xdef	~~k_dos_load_drivers
  2301                        	func
  2302                        	.function	180
  2303                        ~~k_dos_load_drivers:
  2304                        	longa	on
  2305                        	longi	on
  2306 08:961C: 3B           	tsc
  2307 08:961D: 38           	sec
  2308 08:961E: E9 4C 00     	sbc	#L23
  2309 08:9621: 1B           	tcs
  2310 08:9622: 0B           	phd
  2311 08:9623: 5B           	tcd
  2312                        	.block	180
  2313                        ;	CHAR major[16];
  2314                        ;	CHAR minor[16];
  2315                        ;	CHAR k16buffer[16];
  2316                        ;
  2317                        ;	LPSTR log = NULL;
  2318                        ;
  2319                        ;	ULONG driver_idx = 0;
  2320                        ;	PFX_DEVICE_DRIVER driver = NULL;
  2321                        ;
  2322                        ;	GETDRIVERDEF _k_get_driver_def = NULL;
  2323                        ;
  2324                        ;	log = (LPSTR)k_mem_allocate_heap(4096);
  2325             00000000   major_1	set	0
  2326             00000010   minor_1	set	16
  2327             00000020   k16buffer_1	set	32
  2328             00000030   log_1	set	48
  2329             00000034   driver_idx_1	set	52
  2330             00000038   driver_1	set	56
  2331             0000003C   _k_get_driver_def_1	set	60
  2332                        	.sym	major,0,110,1,0,16
  2333                        	.sym	minor,16,110,1,0,16
  2334                        	.sym	k16buffer,32,110,1,0,16
  2335                        	.sym	log,48,142,1,32
  2336                        	.sym	driver_idx,52,18,1,32
  2337                        	.sym	driver,56,138,1,32,58
  2338                        	.sym	_k_get_driver_def,60,8842,1,32,58
  Mon Sep 27 2021  9:39                                                Page 45


  2339 08:9624: 64 3D        	stz	<L24+log_1
  2340 08:9626: 64 3F        	stz	<L24+log_1+2
  2341 08:9628: 64 41        	stz	<L24+driver_idx_1
  2342 08:962A: 64 43        	stz	<L24+driver_idx_1+2
  2343 08:962C: 64 45        	stz	<L24+driver_1
  2344 08:962E: 64 47        	stz	<L24+driver_1+2
  2345 08:9630: 64 49        	stz	<L24+_k_get_driver_def_1
  2346 08:9632: 64 4B        	stz	<L24+_k_get_driver_def_1+2
  2347                        	.line	192
  2348 08:9634: F4 00 00     	pea	#^$1000
  2349 08:9637: F4 00 10     	pea	#<$1000
  2350 08:963A: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2351 08:963E: 85 3D        	sta	<L24+log_1
  2352 08:9640: 86 3F        	stx	<L24+log_1+2
  2353                        ;	sectorBuffer = (LPSTR)k_mem_allocate_heap(512);
  2354                        	.line	193
  2355 08:9642: F4 00 00     	pea	#^$200
  2356 08:9645: F4 00 02     	pea	#<$200
  2357 08:9648: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2358 08:964C: 8D xx xx     	sta	|~~sectorBuffer
  2359 08:964F: 8E xx xx     	stx	|~~sectorBuffer+2
  2360                        ;
  2361                        ;	k_get_c256_major_version(major);
  2362                        	.line	195
  2363 08:9652: F4 00 00     	pea	#0
  2364 08:9655: 18           	clc
  2365 08:9656: 7B           	tdc
  2366 08:9657: 69 0D 00     	adc	#<L24+major_1
  2367 08:965A: 48           	pha
  2368 08:965B: 22 xx xx xx  	jsl	~~k_get_c256_major_version
  2369                        ;	k_get_c256_minor_version(minor);
  2370                        	.line	196
  2371 08:965F: F4 00 00     	pea	#0
  2372 08:9662: 18           	clc
  2373 08:9663: 7B           	tdc
  2374 08:9664: 69 1D 00     	adc	#<L24+minor_1
  2375 08:9667: 48           	pha
  2376 08:9668: 22 xx xx xx  	jsl	~~k_get_c256_minor_version
  2377                        ;
  2378                        ;	//k_debug_strings("System Major:",major);
  2379                        ;	//k_debug_strings("System Minor:",minor);
  2380                        ;
  2381                        ;
  2382                        ;	memset(g_irq_handlers,0,sizeof(g_irq_handlers[0]
                    [0]));
  2383                        	.line	202
  2384 08:966C: F4 10 00     	pea	#<$10
  2385 08:966F: F4 00 00     	pea	#<$0
  2386 08:9672: A9 xx xx     	lda	#<~~g_irq_handlers
  2387 08:9675: 85 01        	sta	<R0
  2388                        	xref	_BEG_DATA
  2389 08:9677: A9 xx xx     	lda	#_BEG_DATA>>16
  2390 08:967A: 85 03        	sta	<R0+2
  2391 08:967C: D4 03        	pei	<R0+2
  2392 08:967E: D4 01        	pei	<R0
  2393 08:9680: 22 xx xx xx  	jsl	~~memset
  2394                        ;
  2395                        ;	_k_dos_devicedrivers 	= k_nodelist_allocate_li
  Mon Sep 27 2021  9:39                                                Page 46


                    st("_k_dos_devicedrivers" ,NULL);
  2396                        	.line	204
  2397 08:9684: F4 00 00     	pea	#^$0
  2398 08:9687: F4 00 00     	pea	#<$0
  2399 08:968A: F4 xx xx     	pea	#^L22
  2400 08:968D: F4 xx xx     	pea	#<L22
  2401 08:9690: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  2402 08:9694: 8D xx xx     	sta	|~~_k_dos_devicedrivers
  2403 08:9697: 8E xx xx     	stx	|~~_k_dos_devicedrivers+2
  2404                        ;	_k_dos_deviceinstance   = k_nodelist_allocate_li
                    st("_k_dos_deviceinstance" ,NULL);
  2405                        	.line	205
  2406 08:969A: F4 00 00     	pea	#^$0
  2407 08:969D: F4 00 00     	pea	#<$0
  2408 08:96A0: F4 xx xx     	pea	#^L22+21
  2409 08:96A3: F4 xx xx     	pea	#<L22+21
  2410 08:96A6: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  2411 08:96AA: 8D xx xx     	sta	|~~_k_dos_deviceinstance
  2412 08:96AD: 8E xx xx     	stx	|~~_k_dos_deviceinstance+2
  2413                        ;
  2414                        ;	//k_debug_string("Scanning for Drivers...\r\n");
  2415                        ;
  2416                        ;	strcpy(log,"");
  2417                        	.line	209
  2418 08:96B0: F4 xx xx     	pea	#^L22+43
  2419 08:96B3: F4 xx xx     	pea	#<L22+43
  2420 08:96B6: D4 3F        	pei	<L24+log_1+2
  2421 08:96B8: D4 3D        	pei	<L24+log_1
  2422 08:96BA: 22 xx xx xx  	jsl	~~strcpy
  2423                        ;	strcat(log,"Scanning for Drivers...\r\n");
  2424                        	.line	210
  2425 08:96BE: F4 xx xx     	pea	#^L22+44
  2426 08:96C1: F4 xx xx     	pea	#<L22+44
  2427 08:96C4: D4 3F        	pei	<L24+log_1+2
  2428 08:96C6: D4 3D        	pei	<L24+log_1
  2429 08:96C8: 22 xx xx xx  	jsl	~~strcat
  2430                        ;	for(driver_idx = 0;driver_idx<30;driver_idx++)
  2431                        	.line	211
  2432 08:96CC: 64 41        	stz	<L24+driver_idx_1
  2433 08:96CE: 64 43        	stz	<L24+driver_idx_1+2
  2434                        L10017:
  2435                        ;	{
  2436                        	.line	212
  2437                        ;		_k_get_driver_def = ((GETDRIVERDEF)((LPV
                    OID)((ULONG)DRIVER_BASE + (driver_idx * (ULONG)DRIVER_SIZE))
                    ));
  2438                        	.line	213
  2439 08:96D0: F4 00 00     	pea	#^$5f0
  2440 08:96D3: F4 F0 05     	pea	#<$5f0
  2441 08:96D6: D4 43        	pei	<L24+driver_idx_1+2
  2442 08:96D8: D4 41        	pei	<L24+driver_idx_1
  2443                        	xref	~~~lmul
  2444 08:96DA: 22 xx xx xx  	jsl	~~~lmul
  2445 08:96DE: 85 01        	sta	<R0
  2446 08:96E0: 86 03        	stx	<R0+2
  2447 08:96E2: 18           	clc
  2448 08:96E3: A9 00 00     	lda	#$0
  2449 08:96E6: 65 01        	adc	<R0
  Mon Sep 27 2021  9:39                                                Page 47


  2450 08:96E8: 85 05        	sta	<R1
  2451 08:96EA: A9 04 00     	lda	#$4
  2452 08:96ED: 65 03        	adc	<R0+2
  2453 08:96EF: 85 07        	sta	<R1+2
  2454 08:96F1: A5 05        	lda	<R1
  2455 08:96F3: 85 49        	sta	<L24+_k_get_driver_def_1
  2456 08:96F5: A5 07        	lda	<R1+2
  2457 08:96F7: 85 4B        	sta	<L24+_k_get_driver_def_1+2
  2458                        ;
  2459                        ;
  2460                        ;		//k_debug_integer("Scan slot:",(UINT)dri
                    ver_idx);
  2461                        ;		//k_debug_pointer("k_dos_load_drivers::s
                    canning @",_k_get_driver_def);
  2462                        ;		//k_debug_byte_array("k_dos_load_drivers
                    ::scan detected value:",((PBYTE)_k_get_driver_def),8);
  2463                        ;		//k_debug_long("k_dos_load_drivers::scan
                     detected long:",*((LONG*)_k_get_driver_def));
  2464                        ;		if(*((ULONG*)_k_get_driver_def) == 0x4E9
                    383B) // sig bytes of driver
  2465                        	.line	220
  2466                        ;		{
  2467 08:96F9: A7 49        	lda	[<L24+_k_get_driver_def_1]
  2468 08:96FB: C9 3B 38     	cmp	#<$4e9383b
  2469 08:96FE: D0 08        	bne	L26
  2470 08:9700: A0 02 00     	ldy	#$2
  2471 08:9703: B7 49        	lda	[<L24+_k_get_driver_def_1],Y
  2472 08:9705: C9 E9 04     	cmp	#^$4e9383b
  2473                        L26:
  2474 08:9708: F0 03        	beq	L27
  2475 08:970A: 82 89 03     	brl	L10018
  2476                        L27:
  2477                        	.line	221
  2478                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver located@",_k_get_driver_def);
  2479                        ;			//k_debug_string("Driver Detecte
                    d:\r\n");
  2480                        ;			strcat(log,"Driver Detected ");
  2481                        	.line	224
  2482 08:970D: F4 xx xx     	pea	#^L22+70
  2483 08:9710: F4 xx xx     	pea	#<L22+70
  2484 08:9713: D4 3F        	pei	<L24+log_1+2
  2485 08:9715: D4 3D        	pei	<L24+log_1
  2486 08:9717: 22 xx xx xx  	jsl	~~strcat
  2487                        ;			strcat(log," @0x");
  2488                        	.line	225
  2489 08:971B: F4 xx xx     	pea	#^L22+87
  2490 08:971E: F4 xx xx     	pea	#<L22+87
  2491 08:9721: D4 3F        	pei	<L24+log_1+2
  2492 08:9723: D4 3D        	pei	<L24+log_1
  2493 08:9725: 22 xx xx xx  	jsl	~~strcat
  2494                        ;
  2495                        ;			strcat(log,k_bytetohex(H24BYTE(_
                    k_get_driver_def),k16buffer));
  2496                        	.line	227
  2497 08:9729: F4 00 00     	pea	#0
  2498 08:972C: 18           	clc
  2499 08:972D: 7B           	tdc
  Mon Sep 27 2021  9:39                                                Page 48


  2500 08:972E: 69 2D 00     	adc	#<L24+k16buffer_1
  2501 08:9731: 48           	pha
  2502 08:9732: D4 4B        	pei	<L24+_k_get_driver_def_1+2
  2503 08:9734: D4 49        	pei	<L24+_k_get_driver_def_1
  2504 08:9736: A9 10 00     	lda	#$10
  2505                        	xref	~~~llsr
  2506 08:9739: 22 xx xx xx  	jsl	~~~llsr
  2507 08:973D: 85 01        	sta	<R0
  2508 08:973F: 86 03        	stx	<R0+2
  2509 08:9741: A5 01        	lda	<R0
  2510 08:9743: 29 FF 00     	and	#<$ff
  2511 08:9746: 85 05        	sta	<R1
  2512 08:9748: 64 07        	stz	<R1+2
  2513 08:974A: D4 05        	pei	<R1
  2514 08:974C: 22 xx xx xx  	jsl	~~k_bytetohex
  2515 08:9750: 85 01        	sta	<R0
  2516 08:9752: 86 03        	stx	<R0+2
  2517 08:9754: DA           	phx
  2518 08:9755: 48           	pha
  2519 08:9756: D4 3F        	pei	<L24+log_1+2
  2520 08:9758: D4 3D        	pei	<L24+log_1
  2521 08:975A: 22 xx xx xx  	jsl	~~strcat
  2522                        ;			strcat(log,k_bytetohex(M24BYTE(_
                    k_get_driver_def),k16buffer));
  2523                        	.line	228
  2524 08:975E: F4 00 00     	pea	#0
  2525 08:9761: 18           	clc
  2526 08:9762: 7B           	tdc
  2527 08:9763: 69 2D 00     	adc	#<L24+k16buffer_1
  2528 08:9766: 48           	pha
  2529 08:9767: D4 4B        	pei	<L24+_k_get_driver_def_1+2
  2530 08:9769: D4 49        	pei	<L24+_k_get_driver_def_1
  2531 08:976B: A9 08 00     	lda	#$8
  2532                        	xref	~~~llsr
  2533 08:976E: 22 xx xx xx  	jsl	~~~llsr
  2534 08:9772: 85 01        	sta	<R0
  2535 08:9774: 86 03        	stx	<R0+2
  2536 08:9776: A5 01        	lda	<R0
  2537 08:9778: 29 FF 00     	and	#<$ff
  2538 08:977B: 85 05        	sta	<R1
  2539 08:977D: 64 07        	stz	<R1+2
  2540 08:977F: D4 05        	pei	<R1
  2541 08:9781: 22 xx xx xx  	jsl	~~k_bytetohex
  2542 08:9785: 85 01        	sta	<R0
  2543 08:9787: 86 03        	stx	<R0+2
  2544 08:9789: DA           	phx
  2545 08:978A: 48           	pha
  2546 08:978B: D4 3F        	pei	<L24+log_1+2
  2547 08:978D: D4 3D        	pei	<L24+log_1
  2548 08:978F: 22 xx xx xx  	jsl	~~strcat
  2549                        ;			strcat(log,k_bytetohex(L24BYTE(_
                    k_get_driver_def),k16buffer));
  2550                        	.line	229
  2551 08:9793: F4 00 00     	pea	#0
  2552 08:9796: 18           	clc
  2553 08:9797: 7B           	tdc
  2554 08:9798: 69 2D 00     	adc	#<L24+k16buffer_1
  2555 08:979B: 48           	pha
  Mon Sep 27 2021  9:39                                                Page 49


  2556 08:979C: D4 49        	pei	<L24+_k_get_driver_def_1
  2557 08:979E: 22 xx xx xx  	jsl	~~k_bytetohex
  2558 08:97A2: 85 01        	sta	<R0
  2559 08:97A4: 86 03        	stx	<R0+2
  2560 08:97A6: DA           	phx
  2561 08:97A7: 48           	pha
  2562 08:97A8: D4 3F        	pei	<L24+log_1+2
  2563 08:97AA: D4 3D        	pei	<L24+log_1
  2564 08:97AC: 22 xx xx xx  	jsl	~~strcat
  2565                        ;			strcat(log,":\r\n");
  2566                        	.line	230
  2567 08:97B0: F4 xx xx     	pea	#^L22+92
  2568 08:97B3: F4 xx xx     	pea	#<L22+92
  2569 08:97B6: D4 3F        	pei	<L24+log_1+2
  2570 08:97B8: D4 3D        	pei	<L24+log_1
  2571 08:97BA: 22 xx xx xx  	jsl	~~strcat
  2572                        ;
  2573                        ;			driver = _k_get_driver_def(major
                    ,minor);
  2574                        	.line	232
  2575 08:97BE: F4 00 00     	pea	#0
  2576 08:97C1: 18           	clc
  2577 08:97C2: 7B           	tdc
  2578 08:97C3: 69 1D 00     	adc	#<L24+minor_1
  2579 08:97C6: 48           	pha
  2580 08:97C7: F4 00 00     	pea	#0
  2581 08:97CA: 18           	clc
  2582 08:97CB: 7B           	tdc
  2583 08:97CC: 69 0D 00     	adc	#<L24+major_1
  2584 08:97CF: 48           	pha
  2585 08:97D0: A6 4B        	ldx	<L24+_k_get_driver_def_1+2
  2586 08:97D2: A5 49        	lda	<L24+_k_get_driver_def_1
  2587                        	xref	~~~lcal
  2588 08:97D4: 22 xx xx xx  	jsl	~~~lcal
  2589 08:97D8: 85 45        	sta	<L24+driver_1
  2590 08:97DA: 86 47        	stx	<L24+driver_1+2
  2591                        ;			if(driver)
  2592                        	.line	233
  2593                        ;			{
  2594 08:97DC: A5 45        	lda	<L24+driver_1
  2595 08:97DE: 05 47        	ora	<L24+driver_1+2
  2596 08:97E0: D0 03        	bne	L28
  2597 08:97E2: 82 AE 02     	brl	L10019
  2598                        L28:
  2599                        	.line	234
  2600                        ;				/*
  2601                        ;				strcat(log,"Driver PRE "
                    );
  2602                        ;							
                    strcat(log," @0x");
  2603                        ;				strcat(log,k_bytetohex(H
                    24BYTE(driver),k16buffer));
  2604                        ;				strcat(log,k_bytetohex(M
                    24BYTE(driver),k16buffer));
  2605                        ;				strcat(log,k_bytetohex(L
                    24BYTE(driver),k16buffer));
  2606                        ;				strcat(log,":\r\n");
  2607                        ;				*/
  Mon Sep 27 2021  9:39                                                Page 50


  2608                        ;
  2609                        ;
  2610                        ;				if( ((ULONG)driver) < 0x
                    010000L ) // handle short addressing for linear segment driv
                    er
  2611                        	.line	245
  2612                        ;					driver = (PFX_DE
                    VICE_DRIVER)(((ULONG)driver) + (((ULONG)_k_get_driver_def) &
                     0xFF0000L));
  2613 08:97E5: A5 45        	lda	<L24+driver_1
  2614 08:97E7: C9 00 00     	cmp	#<$10000
  2615 08:97EA: A5 47        	lda	<L24+driver_1+2
  2616 08:97EC: E9 01 00     	sbc	#^$10000
  2617 08:97EF: 90 03        	bcc	L29
  2618 08:97F1: 82 1E 00     	brl	L10020
  2619                        L29:
  2620                        	.line	246
  2621 08:97F4: 64 01        	stz	<R0
  2622 08:97F6: A5 4B        	lda	<L24+_k_get_driver_def_1+2
  2623 08:97F8: 29 FF 00     	and	#^$ff0000
  2624 08:97FB: 85 03        	sta	<R0+2
  2625 08:97FD: 18           	clc
  2626 08:97FE: A5 45        	lda	<L24+driver_1
  2627 08:9800: 65 01        	adc	<R0
  2628 08:9802: 85 05        	sta	<R1
  2629 08:9804: A5 47        	lda	<L24+driver_1+2
  2630 08:9806: 65 03        	adc	<R0+2
  2631 08:9808: 85 07        	sta	<R1+2
  2632 08:980A: A5 05        	lda	<R1
  2633 08:980C: 85 45        	sta	<L24+driver_1
  2634 08:980E: A5 07        	lda	<R1+2
  2635 08:9810: 85 47        	sta	<L24+driver_1+2
  2636                        ;
  2637                        ;
  2638                        ;				strcat(log,"Driver Defin
                    ition ");
  2639                        L10020:
  2640                        	.line	249
  2641 08:9812: F4 xx xx     	pea	#^L22+96
  2642 08:9815: F4 xx xx     	pea	#<L22+96
  2643 08:9818: D4 3F        	pei	<L24+log_1+2
  2644 08:981A: D4 3D        	pei	<L24+log_1
  2645 08:981C: 22 xx xx xx  	jsl	~~strcat
  2646                        ;							
                    strcat(log," @0x");
  2647                        	.line	250
  2648 08:9820: F4 xx xx     	pea	#^L22+115
  2649 08:9823: F4 xx xx     	pea	#<L22+115
  2650 08:9826: D4 3F        	pei	<L24+log_1+2
  2651 08:9828: D4 3D        	pei	<L24+log_1
  2652 08:982A: 22 xx xx xx  	jsl	~~strcat
  2653                        ;				strcat(log,k_bytetohex(H
                    24BYTE(driver),k16buffer));
  2654                        	.line	251
  2655 08:982E: F4 00 00     	pea	#0
  2656 08:9831: 18           	clc
  2657 08:9832: 7B           	tdc
  2658 08:9833: 69 2D 00     	adc	#<L24+k16buffer_1
  Mon Sep 27 2021  9:39                                                Page 51


  2659 08:9836: 48           	pha
  2660 08:9837: D4 47        	pei	<L24+driver_1+2
  2661 08:9839: D4 45        	pei	<L24+driver_1
  2662 08:983B: A9 10 00     	lda	#$10
  2663                        	xref	~~~llsr
  2664 08:983E: 22 xx xx xx  	jsl	~~~llsr
  2665 08:9842: 85 01        	sta	<R0
  2666 08:9844: 86 03        	stx	<R0+2
  2667 08:9846: A5 01        	lda	<R0
  2668 08:9848: 29 FF 00     	and	#<$ff
  2669 08:984B: 85 05        	sta	<R1
  2670 08:984D: 64 07        	stz	<R1+2
  2671 08:984F: D4 05        	pei	<R1
  2672 08:9851: 22 xx xx xx  	jsl	~~k_bytetohex
  2673 08:9855: 85 01        	sta	<R0
  2674 08:9857: 86 03        	stx	<R0+2
  2675 08:9859: DA           	phx
  2676 08:985A: 48           	pha
  2677 08:985B: D4 3F        	pei	<L24+log_1+2
  2678 08:985D: D4 3D        	pei	<L24+log_1
  2679 08:985F: 22 xx xx xx  	jsl	~~strcat
  2680                        ;				strcat(log,k_bytetohex(M
                    24BYTE(driver),k16buffer));
  2681                        	.line	252
  2682 08:9863: F4 00 00     	pea	#0
  2683 08:9866: 18           	clc
  2684 08:9867: 7B           	tdc
  2685 08:9868: 69 2D 00     	adc	#<L24+k16buffer_1
  2686 08:986B: 48           	pha
  2687 08:986C: D4 47        	pei	<L24+driver_1+2
  2688 08:986E: D4 45        	pei	<L24+driver_1
  2689 08:9870: A9 08 00     	lda	#$8
  2690                        	xref	~~~llsr
  2691 08:9873: 22 xx xx xx  	jsl	~~~llsr
  2692 08:9877: 85 01        	sta	<R0
  2693 08:9879: 86 03        	stx	<R0+2
  2694 08:987B: A5 01        	lda	<R0
  2695 08:987D: 29 FF 00     	and	#<$ff
  2696 08:9880: 85 05        	sta	<R1
  2697 08:9882: 64 07        	stz	<R1+2
  2698 08:9884: D4 05        	pei	<R1
  2699 08:9886: 22 xx xx xx  	jsl	~~k_bytetohex
  2700 08:988A: 85 01        	sta	<R0
  2701 08:988C: 86 03        	stx	<R0+2
  2702 08:988E: DA           	phx
  2703 08:988F: 48           	pha
  2704 08:9890: D4 3F        	pei	<L24+log_1+2
  2705 08:9892: D4 3D        	pei	<L24+log_1
  2706 08:9894: 22 xx xx xx  	jsl	~~strcat
  2707                        ;				strcat(log,k_bytetohex(L
                    24BYTE(driver),k16buffer));
  2708                        	.line	253
  2709 08:9898: F4 00 00     	pea	#0
  2710 08:989B: 18           	clc
  2711 08:989C: 7B           	tdc
  2712 08:989D: 69 2D 00     	adc	#<L24+k16buffer_1
  2713 08:98A0: 48           	pha
  2714 08:98A1: D4 45        	pei	<L24+driver_1
  Mon Sep 27 2021  9:39                                                Page 52


  2715 08:98A3: 22 xx xx xx  	jsl	~~k_bytetohex
  2716 08:98A7: 85 01        	sta	<R0
  2717 08:98A9: 86 03        	stx	<R0+2
  2718 08:98AB: DA           	phx
  2719 08:98AC: 48           	pha
  2720 08:98AD: D4 3F        	pei	<L24+log_1+2
  2721 08:98AF: D4 3D        	pei	<L24+log_1
  2722 08:98B1: 22 xx xx xx  	jsl	~~strcat
  2723                        ;				strcat(log,":\r\n");
  2724                        	.line	254
  2725 08:98B5: F4 xx xx     	pea	#^L22+120
  2726 08:98B8: F4 xx xx     	pea	#<L22+120
  2727 08:98BB: D4 3F        	pei	<L24+log_1+2
  2728 08:98BD: D4 3D        	pei	<L24+log_1
  2729 08:98BF: 22 xx xx xx  	jsl	~~strcat
  2730                        ;
  2731                        ;
  2732                        ;				strcat(log,"  Name:");
  2733                        	.line	257
  2734 08:98C3: F4 xx xx     	pea	#^L22+124
  2735 08:98C6: F4 xx xx     	pea	#<L22+124
  2736 08:98C9: D4 3F        	pei	<L24+log_1+2
  2737 08:98CB: D4 3D        	pei	<L24+log_1
  2738 08:98CD: 22 xx xx xx  	jsl	~~strcat
  2739                        ;				strcat(log,driver->name)
                    ;
  2740                        	.line	258
  2741 08:98D1: D4 47        	pei	<L24+driver_1+2
  2742 08:98D3: D4 45        	pei	<L24+driver_1
  2743 08:98D5: D4 3F        	pei	<L24+log_1+2
  2744 08:98D7: D4 3D        	pei	<L24+log_1
  2745 08:98D9: 22 xx xx xx  	jsl	~~strcat
  2746                        ;				strcat(log," : ");
  2747                        	.line	259
  2748 08:98DD: F4 xx xx     	pea	#^L22+132
  2749 08:98E0: F4 xx xx     	pea	#<L22+132
  2750 08:98E3: D4 3F        	pei	<L24+log_1+2
  2751 08:98E5: D4 3D        	pei	<L24+log_1
  2752 08:98E7: 22 xx xx xx  	jsl	~~strcat
  2753                        ;
  2754                        ;				//k_debug_strings("  Nam
                    e:",driver->name);
  2755                        ;				//k_debug_strings("    M
                    ajor:",driver->hmajor);
  2756                        ;				//k_debug_strings("    M
                    inor:",driver->hminor);
  2757                        ;
  2758                        ;				if((strcmp(driver->hmajo
                    r,major) == 0) && (strcmp(driver->hminor,minor) == 0))
  2759                        	.line	265
  2760                        ;				{
  2761 08:98EB: F4 00 00     	pea	#0
  2762 08:98EE: 18           	clc
  2763 08:98EF: 7B           	tdc
  2764 08:98F0: 69 0D 00     	adc	#<L24+major_1
  2765 08:98F3: 48           	pha
  2766 08:98F4: 18           	clc
  2767 08:98F5: A9 30 00     	lda	#$30
  Mon Sep 27 2021  9:39                                                Page 53


  2768 08:98F8: 65 45        	adc	<L24+driver_1
  2769 08:98FA: 85 01        	sta	<R0
  2770 08:98FC: A9 00 00     	lda	#$0
  2771 08:98FF: 65 47        	adc	<L24+driver_1+2
  2772 08:9901: 85 03        	sta	<R0+2
  2773 08:9903: D4 03        	pei	<R0+2
  2774 08:9905: D4 01        	pei	<R0
  2775 08:9907: 22 xx xx xx  	jsl	~~strcmp
  2776 08:990B: AA           	tax
  2777 08:990C: F0 03        	beq	L30
  2778 08:990E: 82 66 01     	brl	L10021
  2779                        L30:
  2780 08:9911: F4 00 00     	pea	#0
  2781 08:9914: 18           	clc
  2782 08:9915: 7B           	tdc
  2783 08:9916: 69 1D 00     	adc	#<L24+minor_1
  2784 08:9919: 48           	pha
  2785 08:991A: 18           	clc
  2786 08:991B: A9 38 00     	lda	#$38
  2787 08:991E: 65 45        	adc	<L24+driver_1
  2788 08:9920: 85 05        	sta	<R1
  2789 08:9922: A9 00 00     	lda	#$0
  2790 08:9925: 65 47        	adc	<L24+driver_1+2
  2791 08:9927: 85 07        	sta	<R1+2
  2792 08:9929: D4 07        	pei	<R1+2
  2793 08:992B: D4 05        	pei	<R1
  2794 08:992D: 22 xx xx xx  	jsl	~~strcmp
  2795 08:9931: AA           	tax
  2796 08:9932: F0 03        	beq	L31
  2797 08:9934: 82 40 01     	brl	L10021
  2798                        L31:
  2799                        	.line	266
  2800                        ;					if(driver->type 
                    != DRIVER_TYPE_UNIMPL)
  2801                        	.line	267
  2802                        ;					{
  2803 08:9937: E2 20        	sep	#$20
  2804                        	longa	off
  2805 08:9939: A0 40 00     	ldy	#$40
  2806 08:993C: B7 45        	lda	[<L24+driver_1],Y
  2807 08:993E: C9 FF        	cmp	#<$ff
  2808 08:9940: C2 20        	rep	#$20
  2809                        	longa	on
  2810 08:9942: D0 03        	bne	L32
  2811 08:9944: 82 1F 01     	brl	L10022
  2812                        L32:
  2813                        	.line	268
  2814                        ;						k_nodeli
                    st_addtolist(_k_dos_devicedrivers,driver->type,driver->name,
                    driver);
  2815                        	.line	269
  2816 08:9947: D4 47        	pei	<L24+driver_1+2
  2817 08:9949: D4 45        	pei	<L24+driver_1
  2818 08:994B: D4 47        	pei	<L24+driver_1+2
  2819 08:994D: D4 45        	pei	<L24+driver_1
  2820 08:994F: A0 40 00     	ldy	#$40
  2821 08:9952: B7 45        	lda	[<L24+driver_1],Y
  2822 08:9954: 48           	pha
  Mon Sep 27 2021  9:39                                                Page 54


  2823 08:9955: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  2824 08:9958: 48           	pha
  2825 08:9959: AD xx xx     	lda	|~~_k_dos_devicedrivers
  2826 08:995C: 48           	pha
  2827 08:995D: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  2828                        ;						//k_debu
                    g_string("    Hardware Compatible: YES\r\n");
  2829                        ;						if(drive
                    r->f_driver_load)
  2830                        	.line	271
  2831                        ;							
                    ((DEVICEDRIVER_LOAD)driver->f_driver_load)();
  2832 08:9961: A0 51 00     	ldy	#$51
  2833 08:9964: B7 45        	lda	[<L24+driver_1],Y
  2834 08:9966: A0 53 00     	ldy	#$53
  2835 08:9969: 17 45        	ora	[<L24+driver_1],Y
  2836 08:996B: D0 03        	bne	L33
  2837 08:996D: 82 0F 00     	brl	L10023
  2838                        L33:
  2839                        	.line	272
  2840 08:9970: A0 53 00     	ldy	#$53
  2841 08:9973: B7 45        	lda	[<L24+driver_1],Y
  2842 08:9975: AA           	tax
  2843 08:9976: A0 51 00     	ldy	#$51
  2844 08:9979: B7 45        	lda	[<L24+driver_1],Y
  2845                        	xref	~~~lcal
  2846 08:997B: 22 xx xx xx  	jsl	~~~lcal
  2847                        ;
  2848                        ;
  2849                        ;						strcat(l
                    og,"LOADED");
  2850                        L10023:
  2851                        	.line	275
  2852 08:997F: F4 xx xx     	pea	#^L22+136
  2853 08:9982: F4 xx xx     	pea	#<L22+136
  2854 08:9985: D4 3F        	pei	<L24+log_1+2
  2855 08:9987: D4 3D        	pei	<L24+log_1
  2856 08:9989: 22 xx xx xx  	jsl	~~strcat
  2857                        ;
  2858                        ;						if(drive
                    r->f_driver_irq!=NULL) // temp hook up the mouse
  2859                        	.line	277
  2860                        ;						{
  2861 08:998D: A0 49 00     	ldy	#$49
  2862 08:9990: B7 45        	lda	[<L24+driver_1],Y
  2863 08:9992: A0 4B 00     	ldy	#$4b
  2864 08:9995: 17 45        	ora	[<L24+driver_1],Y
  2865 08:9997: D0 03        	bne	L34
  2866 08:9999: 82 C7 00     	brl	L10024
  2867                        L34:
  2868                        	.line	278
  2869                        ;							
                    strcat(log,"\r\n USING IRQ: ");
  2870                        	.line	279
  2871 08:999C: F4 xx xx     	pea	#^L22+143
  2872 08:999F: F4 xx xx     	pea	#<L22+143
  2873 08:99A2: D4 3F        	pei	<L24+log_1+2
  2874 08:99A4: D4 3D        	pei	<L24+log_1
  Mon Sep 27 2021  9:39                                                Page 55


  2875 08:99A6: 22 xx xx xx  	jsl	~~strcat
  2876                        ;							
                    strcat(log,k_bytetohex(IRQREG(driver->irq_ctl),k16buffer));
  2877                        	.line	280
  2878 08:99AA: F4 00 00     	pea	#0
  2879 08:99AD: 18           	clc
  2880 08:99AE: 7B           	tdc
  2881 08:99AF: 69 2D 00     	adc	#<L24+k16buffer_1
  2882 08:99B2: 48           	pha
  2883 08:99B3: A0 47 00     	ldy	#$47
  2884 08:99B6: B7 45        	lda	[<L24+driver_1],Y
  2885 08:99B8: EB           	xba
  2886 08:99B9: 29 FF 00     	and	#$00ff
  2887 08:99BC: 29 FF 00     	and	#<$ff
  2888 08:99BF: 48           	pha
  2889 08:99C0: 22 xx xx xx  	jsl	~~k_bytetohex
  2890 08:99C4: 85 01        	sta	<R0
  2891 08:99C6: 86 03        	stx	<R0+2
  2892 08:99C8: DA           	phx
  2893 08:99C9: 48           	pha
  2894 08:99CA: D4 3F        	pei	<L24+log_1+2
  2895 08:99CC: D4 3D        	pei	<L24+log_1
  2896 08:99CE: 22 xx xx xx  	jsl	~~strcat
  2897                        ;							
                    strcat(log,",");
  2898                        	.line	281
  2899 08:99D2: F4 xx xx     	pea	#^L22+158
  2900 08:99D5: F4 xx xx     	pea	#<L22+158
  2901 08:99D8: D4 3F        	pei	<L24+log_1+2
  2902 08:99DA: D4 3D        	pei	<L24+log_1
  2903 08:99DC: 22 xx xx xx  	jsl	~~strcat
  2904                        ;							
                    strcat(log,k_bytetohex(IRQNUM(driver->irq_ctl),k16buffer));
  2905                        	.line	282
  2906 08:99E0: F4 00 00     	pea	#0
  2907 08:99E3: 18           	clc
  2908 08:99E4: 7B           	tdc
  2909 08:99E5: 69 2D 00     	adc	#<L24+k16buffer_1
  2910 08:99E8: 48           	pha
  2911 08:99E9: A0 47 00     	ldy	#$47
  2912 08:99EC: B7 45        	lda	[<L24+driver_1],Y
  2913 08:99EE: 29 FF 00     	and	#<$ff
  2914 08:99F1: 48           	pha
  2915 08:99F2: 22 xx xx xx  	jsl	~~k_bytetohex
  2916 08:99F6: 85 01        	sta	<R0
  2917 08:99F8: 86 03        	stx	<R0+2
  2918 08:99FA: DA           	phx
  2919 08:99FB: 48           	pha
  2920 08:99FC: D4 3F        	pei	<L24+log_1+2
  2921 08:99FE: D4 3D        	pei	<L24+log_1
  2922 08:9A00: 22 xx xx xx  	jsl	~~strcat
  2923                        ;							
                    if(IRQREG(driver->irq_ctl)!=0xFF)
  2924                        	.line	283
  2925                        ;							
                    {
  2926 08:9A04: A0 47 00     	ldy	#$47
  2927 08:9A07: B7 45        	lda	[<L24+driver_1],Y
  Mon Sep 27 2021  9:39                                                Page 56


  2928 08:9A09: EB           	xba
  2929 08:9A0A: 29 FF 00     	and	#$00ff
  2930 08:9A0D: 29 FF 00     	and	#<$ff
  2931 08:9A10: 85 01        	sta	<R0
  2932 08:9A12: A5 01        	lda	<R0
  2933 08:9A14: C9 FF 00     	cmp	#<$ff
  2934 08:9A17: D0 03        	bne	L35
  2935 08:9A19: 82 47 00     	brl	L10025
  2936                        L35:
  2937                        	.line	284
  2938                        ;							
                    	//g_irq_handlers[IRQREG(driver->irq_ctl)][IRQNUM(driver-
                    >irq_ctl)] = (DEVICEDRIVER_IRQ)driver->f_driver_irq;
  2939                        ;
  2940                        ;							
                    	g_irq_handlers[IRQREG(driver->irq_ctl)][IRQNUM(driver->i
                    rq_ctl)].handlers[0] = (DEVICEDRIVER_IRQ)driver->f_driver_ir
                    q;
  2941                        	.line	287
  2942 08:9A1C: A0 47 00     	ldy	#$47
  2943 08:9A1F: B7 45        	lda	[<L24+driver_1],Y
  2944 08:9A21: 29 FF 00     	and	#<$ff
  2945 08:9A24: 85 05        	sta	<R1
  2946 08:9A26: A5 05        	lda	<R1
  2947 08:9A28: 0A           	asl	A
  2948 08:9A29: 0A           	asl	A
  2949 08:9A2A: 0A           	asl	A
  2950 08:9A2B: 0A           	asl	A
  2951 08:9A2C: 85 01        	sta	<R0
  2952 08:9A2E: A0 47 00     	ldy	#$47
  2953 08:9A31: B7 45        	lda	[<L24+driver_1],Y
  2954 08:9A33: EB           	xba
  2955 08:9A34: 29 FF 00     	and	#$00ff
  2956 08:9A37: 29 FF 00     	and	#<$ff
  2957 08:9A3A: A2 07 00     	ldx	#<$7
  2958                        	xref	~~~asl
  2959 08:9A3D: 22 xx xx xx  	jsl	~~~asl
  2960 08:9A41: 85 05        	sta	<R1
  2961 08:9A43: 18           	clc
  2962 08:9A44: A5 05        	lda	<R1
  2963 08:9A46: 65 01        	adc	<R0
  2964 08:9A48: 85 09        	sta	<R2
  2965 08:9A4A: 18           	clc
  2966 08:9A4B: A9 xx xx     	lda	#<~~g_irq_handlers
  2967 08:9A4E: 65 09        	adc	<R2
  2968 08:9A50: 85 01        	sta	<R0
  2969 08:9A52: A0 49 00     	ldy	#$49
  2970 08:9A55: B7 45        	lda	[<L24+driver_1],Y
  2971 08:9A57: 92 01        	sta	(<R0)
  2972 08:9A59: A0 4B 00     	ldy	#$4b
  2973 08:9A5C: B7 45        	lda	[<L24+driver_1],Y
  2974 08:9A5E: A0 02 00     	ldy	#$2
  2975 08:9A61: 91 01        	sta	(<R0),Y
  2976                        ;							
                    }
  2977                        	.line	288
  2978                        ;						}
  2979                        L10025:
  Mon Sep 27 2021  9:39                                                Page 57


  2980                        	.line	289
  2981                        ;
  2982                        ;
  2983                        ;					}
  2984                        L10024:
  2985                        	.line	292
  2986                        ;					else
  2987 08:9A63: 82 0E 00     	brl	L10026
  2988                        L10022:
  2989                        ;					{
  2990                        	.line	294
  2991                        ;						strcat(l
                    og,"UNIMPLEMENTED");
  2992                        	.line	295
  2993 08:9A66: F4 xx xx     	pea	#^L22+160
  2994 08:9A69: F4 xx xx     	pea	#<L22+160
  2995 08:9A6C: D4 3F        	pei	<L24+log_1+2
  2996 08:9A6E: D4 3D        	pei	<L24+log_1
  2997 08:9A70: 22 xx xx xx  	jsl	~~strcat
  2998                        ;					}
  2999                        	.line	296
  3000                        L10026:
  3001                        ;				}
  3002                        	.line	297
  3003                        ;				else
  3004 08:9A74: 82 0E 00     	brl	L10027
  3005                        L10021:
  3006                        ;				{
  3007                        	.line	299
  3008                        ;					//k_debug_string
                    ("    Hardware Compatible: NO\r\n");
  3009                        ;					strcat(log,"INCO
                    MPATIBLE");
  3010                        	.line	301
  3011 08:9A77: F4 xx xx     	pea	#^L22+174
  3012 08:9A7A: F4 xx xx     	pea	#<L22+174
  3013 08:9A7D: D4 3F        	pei	<L24+log_1+2
  3014 08:9A7F: D4 3D        	pei	<L24+log_1
  3015 08:9A81: 22 xx xx xx  	jsl	~~strcat
  3016                        ;				}
  3017                        	.line	302
  3018                        L10027:
  3019                        ;
  3020                        ;				strcat(log,"\r\n");
  3021                        	.line	304
  3022 08:9A85: F4 xx xx     	pea	#^L22+187
  3023 08:9A88: F4 xx xx     	pea	#<L22+187
  3024 08:9A8B: D4 3F        	pei	<L24+log_1+2
  3025 08:9A8D: D4 3D        	pei	<L24+log_1
  3026 08:9A8F: 22 xx xx xx  	jsl	~~strcat
  3027                        ;			}
  3028                        	.line	305
  3029                        ;		}
  3030                        L10019:
  3031                        	.line	306
  3032                        ;		else
  3033 08:9A93: 82 00 00     	brl	L10028
  3034                        L10018:
  Mon Sep 27 2021  9:39                                                Page 58


  3035                        ;		{
  3036                        	.line	308
  3037                        ;			//k_debug_pointer("k_dos_load_dr
                    ivers::driver not detected@",_k_get_driver_def);
  3038                        ;		}
  3039                        	.line	310
  3040                        L10028:
  3041                        ;	}
  3042                        	.line	311
  3043                        L10015:
  3044 08:9A96: E6 41        	inc	<L24+driver_idx_1
  3045 08:9A98: D0 02        	bne	L36
  3046 08:9A9A: E6 43        	inc	<L24+driver_idx_1+2
  3047                        L36:
  3048 08:9A9C: A5 41        	lda	<L24+driver_idx_1
  3049 08:9A9E: C9 1E 00     	cmp	#<$1e
  3050 08:9AA1: A5 43        	lda	<L24+driver_idx_1+2
  3051 08:9AA3: E9 00 00     	sbc	#^$1e
  3052 08:9AA6: B0 03        	bcs	L37
  3053 08:9AA8: 82 25 FC     	brl	L10017
  3054                        L37:
  3055                        L10016:
  3056                        ;
  3057                        ;
  3058                        ;	return (LPCSTR)log;
  3059                        	.line	314
  3060 08:9AAB: A6 3F        	ldx	<L24+log_1+2
  3061 08:9AAD: A5 3D        	lda	<L24+log_1
  3062                        L38:
  3063 08:9AAF: A8           	tay
  3064 08:9AB0: 2B           	pld
  3065 08:9AB1: 3B           	tsc
  3066 08:9AB2: 18           	clc
  3067 08:9AB3: 69 4C 00     	adc	#L23
  3068 08:9AB6: 1B           	tcs
  3069 08:9AB7: 98           	tya
  3070 08:9AB8: 6B           	rtl
  3071                        ;}
  3072                        	.line	315
  3073                        	.endblock	315
  3074             0000004C   L23	equ	76
  3075             0000000D   L24	equ	13
  3076 08:9AB9:              	ends
  3077                        	efunc
  3078                        	.endfunc	315,13,76
  3079                        	.line	315
  3080                        	data
  3081                        L22:
  3082 00:0028: 5F 6B 5F 64  	db	$5F,$6B,$5F,$64,$6F,$73,$5F,$64,$65,$76,
                    $69,$63,$65,$64,$72
       00:002C: 6F 73 5F 64 
       00:0030: 65 76 69 63 
       00:0034: 65 64 72 
  3083 00:0037: 69 76 65 72  	db	$69,$76,$65,$72,$73,$00,$5F,$6B,$5F,$64,
                    $6F,$73,$5F,$64,$65
       00:003B: 73 00 5F 6B 
       00:003F: 5F 64 6F 73 
       00:0043: 5F 64 65 
  Mon Sep 27 2021  9:39                                                Page 59


  3084 00:0046: 76 69 63 65  	db	$76,$69,$63,$65,$69,$6E,$73,$74,$61,$6E,
                    $63,$65,$00,$00,$53
       00:004A: 69 6E 73 74 
       00:004E: 61 6E 63 65 
       00:0052: 00 00 53 
  3085 00:0055: 63 61 6E 6E  	db	$63,$61,$6E,$6E,$69,$6E,$67,$20,$66,$6F,
                    $72,$20,$44,$72,$69
       00:0059: 69 6E 67 20 
       00:005D: 66 6F 72 20 
       00:0061: 44 72 69 
  3086 00:0064: 76 65 72 73  	db	$76,$65,$72,$73,$2E,$2E,$2E,$0D,$0A,$00,
                    $44,$72,$69,$76,$65
       00:0068: 2E 2E 2E 0D 
       00:006C: 0A 00 44 72 
       00:0070: 69 76 65 
  3087 00:0073: 72 20 44 65  	db	$72,$20,$44,$65,$74,$65,$63,$74,$65,$64,
                    $20,$00,$20,$40,$30
       00:0077: 74 65 63 74 
       00:007B: 65 64 20 00 
       00:007F: 20 40 30 
  3088 00:0082: 78 00 3A 0D  	db	$78,$00,$3A,$0D,$0A,$00,$44,$72,$69,$76,
                    $65,$72,$20,$44,$65
       00:0086: 0A 00 44 72 
       00:008A: 69 76 65 72 
       00:008E: 20 44 65 
  3089 00:0091: 66 69 6E 69  	db	$66,$69,$6E,$69,$74,$69,$6F,$6E,$20,$00,
                    $20,$40,$30,$78,$00
       00:0095: 74 69 6F 6E 
       00:0099: 20 00 20 40 
       00:009D: 30 78 00 
  3090 00:00A0: 3A 0D 0A 00  	db	$3A,$0D,$0A,$00,$20,$20,$4E,$61,$6D,$65,
                    $3A,$00,$20,$3A,$20
       00:00A4: 20 20 4E 61 
       00:00A8: 6D 65 3A 00 
       00:00AC: 20 3A 20 
  3091 00:00AF: 00 4C 4F 41  	db	$00,$4C,$4F,$41,$44,$45,$44,$00,$0D,$0A,
                    $20,$55,$53,$49,$4E
       00:00B3: 44 45 44 00 
       00:00B7: 0D 0A 20 55 
       00:00BB: 53 49 4E 
  3092 00:00BE: 47 20 49 52  	db	$47,$20,$49,$52,$51,$3A,$20,$00,$2C,$00,
                    $55,$4E,$49,$4D,$50
       00:00C2: 51 3A 20 00 
       00:00C6: 2C 00 55 4E 
       00:00CA: 49 4D 50 
  3093 00:00CD: 4C 45 4D 45  	db	$4C,$45,$4D,$45,$4E,$54,$45,$44,$00,$49,
                    $4E,$43,$4F,$4D,$50
       00:00D1: 4E 54 45 44 
       00:00D5: 00 49 4E 43 
       00:00D9: 4F 4D 50 
  3094 00:00DC: 41 54 49 42  	db	$41,$54,$49,$42,$4C,$45,$00,$0D,$0A,$00
       00:00E0: 4C 45 00 0D 
       00:00E4: 0A 00 
  3095 00:00E6:              	ends
  3096                        ;/*
  3097                        ;void k_dos_load_drivers_old(void)
  3098                        ;{
  3099                        ;	PFX_DEVICE_DRIVER driver = NULL;
  Mon Sep 27 2021  9:39                                                Page 60


  3100                        ;
  3101                        ;	CHAR major[16];
  3102                        ;	CHAR minor[16];
  3103                        ;
  3104                        ;	sectorBuffer = (LPSTR)k_mem_allocate_heap(512);
  3105                        ;
  3106                        ;	driver = NULL;
  3107                        ;
  3108                        ;	k_get_c256_major_version(major);
  3109                        ;	k_get_c256_minor_version(minor);
  3110                        ;
  3111                        ;	k_debug_strings("System Major:",major);
  3112                        ;	k_debug_strings("System Minor:",minor);
  3113                        ;
  3114                        ;
  3115                        ;	_k_dos_devicedrivers 	= k_nodelist_allocate_li
                    st("_k_dos_devicedrivers" ,NULL);
  3116                        ;	_k_dos_deviceinstance   = k_nodelist_allocate_li
                    st("_k_dos_deviceinstance" ,NULL);
  3117                        ;
  3118                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_CON;
  3119                        ;	//k_debug_byte_array("DEVICE_CON:\r\n",(PBYTE)dr
                    iver,sizeof(FX_DEVICE_DRIVER));
  3120                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  3121                        ;
  3122                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
                    e:",driver->name);
  3123                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  3124                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  3125                        ;	k_debug_strings("k_dos_load_drivers::driver->min
                    or:",driver->hminor);
  3126                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  3127                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  3128                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  3129                        ;
  3130                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  3131                        ;	{
  3132                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  3133                        ;		if(driver->f_driver_load)
  3134                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  3135                        ;	}
  3136                        ;
  3137                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_SD;
  3138                        ;	//k_debug_byte_array("DEVICE_SD:\r\n",(PBYTE)dri
                    ver,sizeof(FX_DEVICE_DRIVER));
  3139                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  3140                        ;
  3141                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
  Mon Sep 27 2021  9:39                                                Page 61


                    e:",driver->name);
  3142                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  3143                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  3144                        ;	k_debug_strings("k_dos_load_drivers::driver->min
                    or:",driver->hminor);
  3145                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  3146                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  3147                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  3148                        ;
  3149                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  3150                        ;	{
  3151                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  3152                        ;
  3153                        ;		driver->driver_context = k_mem_allocate_
                    heap(sizeof(FATFS));
  3154                        ;
  3155                        ;		if(driver->f_driver_load)
  3156                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  3157                        ;	}
  3158                        ;
  3159                        ;
  3160                        ;	driver = (PFX_DEVICE_DRIVER)DEVICE_HD;
  3161                        ;	//k_debug_byte_array("DEVICE_HD:\r\n",(PBYTE)dri
                    ver,sizeof(FX_DEVICE_DRIVER));
  3162                        ;
  3163                        ;	k_nodelist_addtolist(_k_dos_devicedrivers,driver
                    ->type,driver->name,driver);
  3164                        ;
  3165                        ;	k_debug_strings("k_dos_load_drivers::driver->nam
                    e:",driver->name);
  3166                        ;	k_debug_strings("k_dos_load_drivers::driver->ver
                    sion:",driver->version);
  3167                        ;	k_debug_strings("k_dos_load_drivers::driver->maj
                    or:",driver->hmajor);
  3168                        ;	k_debug_strings("k_dos_load_drivers::driver->min
                    or:",driver->hminor);
  3169                        ;	k_debug_integer("k_dos_load_drivers::driver->typ
                    e:",driver->type);
  3170                        ;	k_debug_strings("k_dos_load_drivers::driver->des
                    ignation:",driver->designation);
  3171                        ;	k_debug_pointer("k_dos_load_drivers::driver->f_d
                    river_load:",driver->f_driver_load);
  3172                        ;
  3173                        ;	if((strcmp(driver->hmajor,major) == 0) && (strcm
                    p(driver->hminor,minor) == 0))
  3174                        ;	{
  3175                        ;		k_debug_strings("k_dos_load_drivers[HARW
                    ARE MATCH]:",driver->name);
  3176                        ;
  3177                        ;		driver->driver_context = k_mem_allocate_
  Mon Sep 27 2021  9:39                                                Page 62


                    heap(sizeof(FATFS));
  3178                        ;
  3179                        ;		if(driver->f_driver_load)
  3180                        ;			((DEVICEDRIVER_LOAD)driver->f_dr
                    iver_load)();
  3181                        ;	}
  3182                        ;}
  3183                        ;
  3184                        ;*/
  3185                        ;
  3186                        ;
  3187                        ;
  3188                        ;PFX_DEVICE_DRIVER k_get_device_driver(UINT type)
  3189                        ;{
  3190                        	.line	408
  3191                        	.line	409
  3192                        	FXDOS
  3193                        	xdef	~~k_get_device_driver
  3194                        	func
  3195                        	.function	409
  3196                        ~~k_get_device_driver:
  3197                        	longa	on
  3198                        	longi	on
  3199 08:9AB9: 3B           	tsc
  3200 08:9ABA: 38           	sec
  3201 08:9ABB: E9 08 00     	sbc	#L40
  3202 08:9ABE: 1B           	tcs
  3203 08:9ABF: 0B           	phd
  3204 08:9AC0: 5B           	tcd
  3205             00000004   type_0	set	4
  3206                        	.block	409
  3207                        ;	PFXNODE deviceNode = NULL;
  3208                        ;	PFX_DEVICE_DRIVER device = NULL;
  3209                        ;
  3210                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    cedrivers,type);
  3211             00000000   deviceNode_1	set	0
  3212             00000004   device_1	set	4
  3213                        	.sym	deviceNode,0,138,1,32,5
  3214                        	.sym	device,4,138,1,32,58
  3215                        	.sym	type,4,16,6,16
  3216 08:9AC1: 64 01        	stz	<L41+deviceNode_1
  3217 08:9AC3: 64 03        	stz	<L41+deviceNode_1+2
  3218 08:9AC5: 64 05        	stz	<L41+device_1
  3219 08:9AC7: 64 07        	stz	<L41+device_1+2
  3220                        	.line	413
  3221 08:9AC9: D4 0C        	pei	<L40+type_0
  3222 08:9ACB: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  3223 08:9ACE: 48           	pha
  3224 08:9ACF: AD xx xx     	lda	|~~_k_dos_devicedrivers
  3225 08:9AD2: 48           	pha
  3226 08:9AD3: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3227 08:9AD7: 85 01        	sta	<L41+deviceNode_1
  3228 08:9AD9: 86 03        	stx	<L41+deviceNode_1+2
  3229                        ;	if(deviceNode)
  3230                        	.line	414
  3231                        ;	{
  3232 08:9ADB: A5 01        	lda	<L41+deviceNode_1
  Mon Sep 27 2021  9:39                                                Page 63


  3233 08:9ADD: 05 03        	ora	<L41+deviceNode_1+2
  3234 08:9ADF: D0 03        	bne	L43
  3235 08:9AE1: 82 0E 00     	brl	L10029
  3236                        L43:
  3237                        	.line	415
  3238                        ;		device = ((PFX_DEVICE_DRIVER)(deviceNode
                    ->data));
  3239                        	.line	416
  3240 08:9AE4: A0 02 00     	ldy	#$2
  3241 08:9AE7: B7 01        	lda	[<L41+deviceNode_1],Y
  3242 08:9AE9: 85 05        	sta	<L41+device_1
  3243 08:9AEB: A0 04 00     	ldy	#$4
  3244 08:9AEE: B7 01        	lda	[<L41+deviceNode_1],Y
  3245 08:9AF0: 85 07        	sta	<L41+device_1+2
  3246                        ;	}
  3247                        	.line	417
  3248                        ;
  3249                        ;	return device;
  3250                        L10029:
  3251                        	.line	419
  3252 08:9AF2: A6 07        	ldx	<L41+device_1+2
  3253 08:9AF4: A5 05        	lda	<L41+device_1
  3254                        L44:
  3255 08:9AF6: A8           	tay
  3256 08:9AF7: A5 0A        	lda	<L40+2
  3257 08:9AF9: 85 0C        	sta	<L40+2+2
  3258 08:9AFB: A5 09        	lda	<L40+1
  3259 08:9AFD: 85 0B        	sta	<L40+1+2
  3260 08:9AFF: 2B           	pld
  3261 08:9B00: 3B           	tsc
  3262 08:9B01: 18           	clc
  3263 08:9B02: 69 0A 00     	adc	#L40+2
  3264 08:9B05: 1B           	tcs
  3265 08:9B06: 98           	tya
  3266 08:9B07: 6B           	rtl
  3267                        ;}
  3268                        	.line	420
  3269                        	.endblock	420
  3270             00000008   L40	equ	8
  3271             00000001   L41	equ	1
  3272 08:9B08:              	ends
  3273                        	efunc
  3274                        	.endfunc	420,1,8
  3275                        	.line	420
  3276                        ;
  3277                        ;PFXDOSDEVICE k_get_dos_device(UINT type)
  3278                        ;{
  3279                        	.line	422
  3280                        	.line	423
  3281                        	FXDOS
  3282                        	xdef	~~k_get_dos_device
  3283                        	func
  3284                        	.function	423
  3285                        ~~k_get_dos_device:
  3286                        	longa	on
  3287                        	longi	on
  3288 08:9B08: 3B           	tsc
  3289 08:9B09: 38           	sec
  Mon Sep 27 2021  9:39                                                Page 64


  3290 08:9B0A: E9 08 00     	sbc	#L45
  3291 08:9B0D: 1B           	tcs
  3292 08:9B0E: 0B           	phd
  3293 08:9B0F: 5B           	tcd
  3294             00000004   type_0	set	4
  3295                        	.block	423
  3296                        ;	PFXNODE deviceNode = NULL;
  3297                        ;	PFXDOSDEVICE device = NULL;
  3298                        ;
  3299                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    ceinstance,type);
  3300             00000000   deviceNode_1	set	0
  3301             00000004   device_1	set	4
  3302                        	.sym	deviceNode,0,138,1,32,5
  3303                        	.sym	device,4,138,1,32,127
  3304                        	.sym	type,4,16,6,16
  3305 08:9B10: 64 01        	stz	<L46+deviceNode_1
  3306 08:9B12: 64 03        	stz	<L46+deviceNode_1+2
  3307 08:9B14: 64 05        	stz	<L46+device_1
  3308 08:9B16: 64 07        	stz	<L46+device_1+2
  3309                        	.line	427
  3310 08:9B18: D4 0C        	pei	<L45+type_0
  3311 08:9B1A: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  3312 08:9B1D: 48           	pha
  3313 08:9B1E: AD xx xx     	lda	|~~_k_dos_deviceinstance
  3314 08:9B21: 48           	pha
  3315 08:9B22: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3316 08:9B26: 85 01        	sta	<L46+deviceNode_1
  3317 08:9B28: 86 03        	stx	<L46+deviceNode_1+2
  3318                        ;	if(deviceNode)
  3319                        	.line	428
  3320                        ;	{
  3321 08:9B2A: A5 01        	lda	<L46+deviceNode_1
  3322 08:9B2C: 05 03        	ora	<L46+deviceNode_1+2
  3323 08:9B2E: D0 03        	bne	L48
  3324 08:9B30: 82 0E 00     	brl	L10030
  3325                        L48:
  3326                        	.line	429
  3327                        ;		device = ((PFXDOSDEVICE)(deviceNode->dat
                    a));
  3328                        	.line	430
  3329 08:9B33: A0 02 00     	ldy	#$2
  3330 08:9B36: B7 01        	lda	[<L46+deviceNode_1],Y
  3331 08:9B38: 85 05        	sta	<L46+device_1
  3332 08:9B3A: A0 04 00     	ldy	#$4
  3333 08:9B3D: B7 01        	lda	[<L46+deviceNode_1],Y
  3334 08:9B3F: 85 07        	sta	<L46+device_1+2
  3335                        ;	}
  3336                        	.line	431
  3337                        ;
  3338                        ;	return device;
  3339                        L10030:
  3340                        	.line	433
  3341 08:9B41: A6 07        	ldx	<L46+device_1+2
  3342 08:9B43: A5 05        	lda	<L46+device_1
  3343                        L49:
  3344 08:9B45: A8           	tay
  3345 08:9B46: A5 0A        	lda	<L45+2
  Mon Sep 27 2021  9:39                                                Page 65


  3346 08:9B48: 85 0C        	sta	<L45+2+2
  3347 08:9B4A: A5 09        	lda	<L45+1
  3348 08:9B4C: 85 0B        	sta	<L45+1+2
  3349 08:9B4E: 2B           	pld
  3350 08:9B4F: 3B           	tsc
  3351 08:9B50: 18           	clc
  3352 08:9B51: 69 0A 00     	adc	#L45+2
  3353 08:9B54: 1B           	tcs
  3354 08:9B55: 98           	tya
  3355 08:9B56: 6B           	rtl
  3356                        ;}
  3357                        	.line	434
  3358                        	.endblock	434
  3359             00000008   L45	equ	8
  3360             00000001   L46	equ	1
  3361 08:9B57:              	ends
  3362                        	efunc
  3363                        	.endfunc	434,1,8
  3364                        	.line	434
  3365                        ;
  3366                        ;BOOL k_close_dos_device(UINT type)
  3367                        ;{
  3368                        	.line	436
  3369                        	.line	437
  3370                        	FXDOS
  3371                        	xdef	~~k_close_dos_device
  3372                        	func
  3373                        	.function	437
  3374                        ~~k_close_dos_device:
  3375                        	longa	on
  3376                        	longi	on
  3377 08:9B57: 3B           	tsc
  3378 08:9B58: 38           	sec
  3379 08:9B59: E9 09 00     	sbc	#L50
  3380 08:9B5C: 1B           	tcs
  3381 08:9B5D: 0B           	phd
  3382 08:9B5E: 5B           	tcd
  3383             00000004   type_0	set	4
  3384                        	.block	437
  3385                        ;	BOOL bRet = FALSE;
  3386                        ;	PFXNODE deviceNode = NULL;
  3387                        ;	PFXDOSDEVICE device = NULL;
  3388                        ;
  3389                        ;	deviceNode = k_nodelist_searchByType(_k_dos_devi
                    ceinstance,type);
  3390             00000000   bRet_1	set	0
  3391             00000001   deviceNode_1	set	1
  3392             00000005   device_1	set	5
  3393                        	.sym	bRet,0,14,1,8
  3394                        	.sym	deviceNode,1,138,1,32,5
  3395                        	.sym	device,5,138,1,32,127
  3396                        	.sym	type,4,16,6,16
  3397 08:9B5F: E2 20        	sep	#$20
  3398                        	longa	off
  3399 08:9B61: 64 01        	stz	<L51+bRet_1
  3400 08:9B63: C2 20        	rep	#$20
  3401                        	longa	on
  3402 08:9B65: 64 02        	stz	<L51+deviceNode_1
  Mon Sep 27 2021  9:39                                                Page 66


  3403 08:9B67: 64 04        	stz	<L51+deviceNode_1+2
  3404 08:9B69: 64 06        	stz	<L51+device_1
  3405 08:9B6B: 64 08        	stz	<L51+device_1+2
  3406                        	.line	442
  3407 08:9B6D: D4 0D        	pei	<L50+type_0
  3408 08:9B6F: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  3409 08:9B72: 48           	pha
  3410 08:9B73: AD xx xx     	lda	|~~_k_dos_deviceinstance
  3411 08:9B76: 48           	pha
  3412 08:9B77: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3413 08:9B7B: 85 02        	sta	<L51+deviceNode_1
  3414 08:9B7D: 86 04        	stx	<L51+deviceNode_1+2
  3415                        ;	if(deviceNode)
  3416                        	.line	443
  3417                        ;	{
  3418 08:9B7F: A5 02        	lda	<L51+deviceNode_1
  3419 08:9B81: 05 04        	ora	<L51+deviceNode_1+2
  3420 08:9B83: D0 03        	bne	L53
  3421 08:9B85: 82 2F 00     	brl	L10031
  3422                        L53:
  3423                        	.line	444
  3424                        ;		device = ((PFXDOSDEVICE)(deviceNode->dat
                    a));
  3425                        	.line	445
  3426 08:9B88: A0 02 00     	ldy	#$2
  3427 08:9B8B: B7 02        	lda	[<L51+deviceNode_1],Y
  3428 08:9B8D: 85 06        	sta	<L51+device_1
  3429 08:9B8F: A0 04 00     	ldy	#$4
  3430 08:9B92: B7 02        	lda	[<L51+deviceNode_1],Y
  3431 08:9B94: 85 08        	sta	<L51+device_1+2
  3432                        ;		if(device)
  3433                        	.line	446
  3434                        ;		{
  3435 08:9B96: A5 06        	lda	<L51+device_1
  3436 08:9B98: 05 08        	ora	<L51+device_1+2
  3437 08:9B9A: D0 03        	bne	L54
  3438 08:9B9C: 82 18 00     	brl	L10032
  3439                        L54:
  3440                        	.line	447
  3441                        ;			k_nodelist_removefromlist(_k_dos
                    _deviceinstance,deviceNode);
  3442                        	.line	448
  3443 08:9B9F: D4 04        	pei	<L51+deviceNode_1+2
  3444 08:9BA1: D4 02        	pei	<L51+deviceNode_1
  3445 08:9BA3: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  3446 08:9BA6: 48           	pha
  3447 08:9BA7: AD xx xx     	lda	|~~_k_dos_deviceinstance
  3448 08:9BAA: 48           	pha
  3449 08:9BAB: 22 xx xx xx  	jsl	~~k_nodelist_removefromlist
  3450                        ;			bRet = TRUE;
  3451                        	.line	449
  3452 08:9BAF: E2 20        	sep	#$20
  3453                        	longa	off
  3454 08:9BB1: A9 01        	lda	#$1
  3455 08:9BB3: 85 01        	sta	<L51+bRet_1
  3456 08:9BB5: C2 20        	rep	#$20
  3457                        	longa	on
  3458                        ;		}
  Mon Sep 27 2021  9:39                                                Page 67


  3459                        	.line	450
  3460                        ;	}
  3461                        L10032:
  3462                        	.line	451
  3463                        ;
  3464                        ;    return bRet;
  3465                        L10031:
  3466                        	.line	453
  3467 08:9BB7: A5 01        	lda	<L51+bRet_1
  3468 08:9BB9: 29 FF 00     	and	#$ff
  3469                        L55:
  3470 08:9BBC: A8           	tay
  3471 08:9BBD: A5 0B        	lda	<L50+2
  3472 08:9BBF: 85 0D        	sta	<L50+2+2
  3473 08:9BC1: A5 0A        	lda	<L50+1
  3474 08:9BC3: 85 0C        	sta	<L50+1+2
  3475 08:9BC5: 2B           	pld
  3476 08:9BC6: 3B           	tsc
  3477 08:9BC7: 18           	clc
  3478 08:9BC8: 69 0B 00     	adc	#L50+2
  3479 08:9BCB: 1B           	tcs
  3480 08:9BCC: 98           	tya
  3481 08:9BCD: 6B           	rtl
  3482                        ;}
  3483                        	.line	454
  3484                        	.endblock	454
  3485             00000009   L50	equ	9
  3486             00000001   L51	equ	1
  3487 08:9BCE:              	ends
  3488                        	efunc
  3489                        	.endfunc	454,1,9
  3490                        	.line	454
  3491                        ;
  3492                        ;PFXDOSDEVICE k_create_dos_device(UINT type)
  3493                        ;{
  3494                        	.line	456
  3495                        	.line	457
  3496                        	FXDOS
  3497                        	xdef	~~k_create_dos_device
  3498                        	func
  3499                        	.function	457
  3500                        ~~k_create_dos_device:
  3501                        	longa	on
  3502                        	longi	on
  3503 08:9BCE: 3B           	tsc
  3504 08:9BCF: 38           	sec
  3505 08:9BD0: E9 28 00     	sbc	#L56
  3506 08:9BD3: 1B           	tcs
  3507 08:9BD4: 0B           	phd
  3508 08:9BD5: 5B           	tcd
  3509             00000004   type_0	set	4
  3510                        	.block	457
  3511                        ;	INT x = 0;
  3512                        ;
  3513                        ;	BYTE	errorCode;
  3514                        ;	CHAR	byte;
  3515                        ;
  3516                        ;	BYTE	s;
  Mon Sep 27 2021  9:39                                                Page 68


  3517                        ;
  3518                        ;	BOOL isFAT12 = FALSE;
  3519                        ;
  3520                        ;	PFATBOOTSECTOR  pBoot = NULL;
  3521                        ;	PPARTITIONTABLE pPartTable 		= NULL;
  3522                        ;	PFXDOSDEVICE 	pfxdosDevice 	= NULL;
  3523                        ;	PFAT32EXT		pfat32 			
                    = NULL;
  3524                        ;	PFX_BLOCK_DEVICE_DRIVER pdriver = NULL;
  3525                        ;	PFXNODE deviceNode = NULL;
  3526                        ;	ULONG lba = 0L;
  3527                        ;
  3528                        ;	INT partitionId = 0x00;
  3529                        ;
  3530                        ;    k_debug_integer("k_create_dos_device:",type);
  3531             00000000   x_1	set	0
  3532             00000002   errorCode_1	set	2
  3533             00000003   byte_1	set	3
  3534             00000004   s_1	set	4
  3535             00000005   isFAT12_1	set	5
  3536             00000006   pBoot_1	set	6
  3537             0000000A   pPartTable_1	set	10
  3538             0000000E   pfxdosDevice_1	set	14
  3539             00000012   pfat32_1	set	18
  3540             00000016   pdriver_1	set	22
  3541             0000001A   deviceNode_1	set	26
  3542             0000001E   lba_1	set	30
  3543             00000022   partitionId_1	set	34
  3544                        	.sym	x,0,5,1,16
  3545                        	.sym	errorCode,2,14,1,8
  3546                        	.sym	byte,3,14,1,8
  3547                        	.sym	s,4,14,1,8
  3548                        	.sym	isFAT12,5,14,1,8
  3549                        	.sym	pBoot,6,138,1,32,97
  3550                        	.sym	pPartTable,10,138,1,32,98
  3551                        	.sym	pfxdosDevice,14,138,1,32,127
  3552                        	.sym	pfat32,18,138,1,32,94
  3553                        	.sym	pdriver,22,138,1,32,59
  3554                        	.sym	deviceNode,26,138,1,32,5
  3555                        	.sym	lba,30,18,1,32
  3556                        	.sym	partitionId,34,5,1,16
  3557                        	.sym	type,4,16,6,16
  3558 08:9BD6: 64 05        	stz	<L57+x_1
  3559 08:9BD8: E2 20        	sep	#$20
  3560                        	longa	off
  3561 08:9BDA: 64 0A        	stz	<L57+isFAT12_1
  3562 08:9BDC: C2 20        	rep	#$20
  3563                        	longa	on
  3564 08:9BDE: 64 0B        	stz	<L57+pBoot_1
  3565 08:9BE0: 64 0D        	stz	<L57+pBoot_1+2
  3566 08:9BE2: 64 0F        	stz	<L57+pPartTable_1
  3567 08:9BE4: 64 11        	stz	<L57+pPartTable_1+2
  3568 08:9BE6: 64 13        	stz	<L57+pfxdosDevice_1
  3569 08:9BE8: 64 15        	stz	<L57+pfxdosDevice_1+2
  3570 08:9BEA: 64 17        	stz	<L57+pfat32_1
  3571 08:9BEC: 64 19        	stz	<L57+pfat32_1+2
  3572 08:9BEE: 64 1B        	stz	<L57+pdriver_1
  3573 08:9BF0: 64 1D        	stz	<L57+pdriver_1+2
  Mon Sep 27 2021  9:39                                                Page 69


  3574 08:9BF2: 64 1F        	stz	<L57+deviceNode_1
  3575 08:9BF4: 64 21        	stz	<L57+deviceNode_1+2
  3576 08:9BF6: 64 23        	stz	<L57+lba_1
  3577 08:9BF8: 64 25        	stz	<L57+lba_1+2
  3578 08:9BFA: 64 27        	stz	<L57+partitionId_1
  3579                        	.line	477
  3580 08:9BFC: D4 2C        	pei	<L56+type_0
  3581 08:9BFE: F4 xx xx     	pea	#^L39
  3582 08:9C01: F4 xx xx     	pea	#<L39
  3583 08:9C04: 22 xx xx xx  	jsl	~~k_debug_integer
  3584                        ;
  3585                        ;
  3586                        ;    pfxdosDevice = k_get_dos_device(type);
  3587                        	.line	480
  3588 08:9C08: D4 2C        	pei	<L56+type_0
  3589 08:9C0A: 22 08 9B 08  	jsl	~~k_get_dos_device
  3590 08:9C0E: 85 13        	sta	<L57+pfxdosDevice_1
  3591 08:9C10: 86 15        	stx	<L57+pfxdosDevice_1+2
  3592                        ;    if(pfxdosDevice)
  3593                        	.line	481
  3594                        ;    {
  3595 08:9C12: A5 13        	lda	<L57+pfxdosDevice_1
  3596 08:9C14: 05 15        	ora	<L57+pfxdosDevice_1+2
  3597 08:9C16: D0 03        	bne	L59
  3598 08:9C18: 82 22 00     	brl	L10033
  3599                        L59:
  3600                        	.line	482
  3601                        ;    	k_debug_integer("k_create_dos_device:FOU
                    ND EXISTING:",type);
  3602                        	.line	483
  3603 08:9C1B: D4 2C        	pei	<L56+type_0
  3604 08:9C1D: F4 xx xx     	pea	#^L39+21
  3605 08:9C20: F4 xx xx     	pea	#<L39+21
  3606 08:9C23: 22 xx xx xx  	jsl	~~k_debug_integer
  3607                        ;    	return pfxdosDevice;
  3608                        	.line	484
  3609 08:9C27: A6 15        	ldx	<L57+pfxdosDevice_1+2
  3610 08:9C29: A5 13        	lda	<L57+pfxdosDevice_1
  3611                        L60:
  3612 08:9C2B: A8           	tay
  3613 08:9C2C: A5 2A        	lda	<L56+2
  3614 08:9C2E: 85 2C        	sta	<L56+2+2
  3615 08:9C30: A5 29        	lda	<L56+1
  3616 08:9C32: 85 2B        	sta	<L56+1+2
  3617 08:9C34: 2B           	pld
  3618 08:9C35: 3B           	tsc
  3619 08:9C36: 18           	clc
  3620 08:9C37: 69 2A 00     	adc	#L56+2
  3621 08:9C3A: 1B           	tcs
  3622 08:9C3B: 98           	tya
  3623 08:9C3C: 6B           	rtl
  3624                        ;    }
  3625                        	.line	485
  3626                        ;
  3627                        ;    pfxdosDevice = k_mem_allocate_heap(sizeof(FXD
                    OSDEVICE));
  3628                        L10033:
  3629                        	.line	487
  Mon Sep 27 2021  9:39                                                Page 70


  3630 08:9C3D: F4 00 00     	pea	#^$2ce
  3631 08:9C40: F4 CE 02     	pea	#<$2ce
  3632 08:9C43: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  3633 08:9C47: 85 13        	sta	<L57+pfxdosDevice_1
  3634 08:9C49: 86 15        	stx	<L57+pfxdosDevice_1+2
  3635                        ;    if(pfxdosDevice)
  3636                        	.line	488
  3637                        ;    {
  3638 08:9C4B: A5 13        	lda	<L57+pfxdosDevice_1
  3639 08:9C4D: 05 15        	ora	<L57+pfxdosDevice_1+2
  3640 08:9C4F: D0 03        	bne	L61
  3641 08:9C51: 82 4F 02     	brl	L10034
  3642                        L61:
  3643                        	.line	489
  3644                        ;    	memset(pfxdosDevice,0,sizeof(FXDOSDEVICE
                    ));
  3645                        	.line	490
  3646 08:9C54: F4 CE 02     	pea	#<$2ce
  3647 08:9C57: F4 00 00     	pea	#<$0
  3648 08:9C5A: D4 15        	pei	<L57+pfxdosDevice_1+2
  3649 08:9C5C: D4 13        	pei	<L57+pfxdosDevice_1
  3650 08:9C5E: 22 xx xx xx  	jsl	~~memset
  3651                        ;
  3652                        ;    	switch(type)
  3653                        	.line	492
  3654 08:9C62: A5 2C        	lda	<L56+type_0
  3655 08:9C64: 82 D1 01     	brl	L10035
  3656                        ;		{
  3657                        	.line	493
  3658                        ;    	case FXDOS_SDC:
  3659                        	.line	494
  3660                        L10037:
  3661                        ;
  3662                        ;    		deviceNode = k_nodelist_searchBy
                    Type(_k_dos_devicedrivers,DRIVER_TYPE_SDCARD);
  3663                        	.line	496
  3664 08:9C67: F4 06 00     	pea	#<$6
  3665 08:9C6A: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  3666 08:9C6D: 48           	pha
  3667 08:9C6E: AD xx xx     	lda	|~~_k_dos_devicedrivers
  3668 08:9C71: 48           	pha
  3669 08:9C72: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3670 08:9C76: 85 1F        	sta	<L57+deviceNode_1
  3671 08:9C78: 86 21        	stx	<L57+deviceNode_1+2
  3672                        ;    		if(deviceNode)
  3673                        	.line	497
  3674                        ;    		{
  3675 08:9C7A: A5 1F        	lda	<L57+deviceNode_1
  3676 08:9C7C: 05 21        	ora	<L57+deviceNode_1+2
  3677 08:9C7E: D0 03        	bne	L62
  3678 08:9C80: 82 C6 00     	brl	L10038
  3679                        L62:
  3680                        	.line	498
  3681                        ;    			 k_debug_pointer("k_crea
                    te_dos_device:found:deviceNode:",deviceNode);
  3682                        	.line	499
  3683 08:9C83: D4 21        	pei	<L57+deviceNode_1+2
  3684 08:9C85: D4 1F        	pei	<L57+deviceNode_1
  Mon Sep 27 2021  9:39                                                Page 71


  3685 08:9C87: F4 xx xx     	pea	#^L39+57
  3686 08:9C8A: F4 xx xx     	pea	#<L39+57
  3687 08:9C8D: 22 xx xx xx  	jsl	~~k_debug_pointer
  3688                        ;
  3689                        ;    			pdriver = ((PFX_BLOCK_DE
                    VICE_DRIVER)(deviceNode->data));
  3690                        	.line	501
  3691 08:9C91: A0 02 00     	ldy	#$2
  3692 08:9C94: B7 1F        	lda	[<L57+deviceNode_1],Y
  3693 08:9C96: 85 1B        	sta	<L57+pdriver_1
  3694 08:9C98: A0 04 00     	ldy	#$4
  3695 08:9C9B: B7 1F        	lda	[<L57+deviceNode_1],Y
  3696 08:9C9D: 85 1D        	sta	<L57+pdriver_1+2
  3697                        ;    			if(pdriver)
  3698                        	.line	502
  3699                        ;    			{
  3700 08:9C9F: A5 1B        	lda	<L57+pdriver_1
  3701 08:9CA1: 05 1D        	ora	<L57+pdriver_1+2
  3702 08:9CA3: D0 03        	bne	L63
  3703 08:9CA5: 82 A1 00     	brl	L10039
  3704                        L63:
  3705                        	.line	503
  3706                        ;    				k_debug_pointer(
                    "k_create_dos_device:found:pdriver:",pdriver);
  3707                        	.line	504
  3708 08:9CA8: D4 1D        	pei	<L57+pdriver_1+2
  3709 08:9CAA: D4 1B        	pei	<L57+pdriver_1
  3710 08:9CAC: F4 xx xx     	pea	#^L39+95
  3711 08:9CAF: F4 xx xx     	pea	#<L39+95
  3712 08:9CB2: 22 xx xx xx  	jsl	~~k_debug_pointer
  3713                        ;
  3714                        ;    				if(pdriver->f_dr
                    iver_load)
  3715                        	.line	506
  3716                        ;    				{
  3717 08:9CB6: A0 51 00     	ldy	#$51
  3718 08:9CB9: B7 1B        	lda	[<L57+pdriver_1],Y
  3719 08:9CBB: A0 53 00     	ldy	#$53
  3720 08:9CBE: 17 1B        	ora	[<L57+pdriver_1],Y
  3721 08:9CC0: D0 03        	bne	L64
  3722 08:9CC2: 82 84 00     	brl	L10040
  3723                        L64:
  3724                        	.line	507
  3725                        ;    					pfxdosDe
                    vice->devdata = pdriver->driver_context;
  3726                        	.line	508
  3727 08:9CC5: A0 4D 00     	ldy	#$4d
  3728 08:9CC8: B7 1B        	lda	[<L57+pdriver_1],Y
  3729 08:9CCA: A0 02 00     	ldy	#$2
  3730 08:9CCD: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3731 08:9CCF: A0 4F 00     	ldy	#$4f
  3732 08:9CD2: B7 1B        	lda	[<L57+pdriver_1],Y
  3733 08:9CD4: A0 04 00     	ldy	#$4
  3734 08:9CD7: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3735                        ;
  3736                        ;    					pfxdosDe
                    vice->initialized = ((DEVICEDRIVER_LOAD)pdriver->f_driver_lo
                    ad)();
  Mon Sep 27 2021  9:39                                                Page 72


  3737                        	.line	510
  3738 08:9CD9: A0 53 00     	ldy	#$53
  3739 08:9CDC: B7 1B        	lda	[<L57+pdriver_1],Y
  3740 08:9CDE: AA           	tax
  3741 08:9CDF: A0 51 00     	ldy	#$51
  3742 08:9CE2: B7 1B        	lda	[<L57+pdriver_1],Y
  3743                        	xref	~~~lcal
  3744 08:9CE4: 22 xx xx xx  	jsl	~~~lcal
  3745 08:9CE8: E2 20        	sep	#$20
  3746                        	longa	off
  3747 08:9CEA: A0 01 00     	ldy	#$1
  3748 08:9CED: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3749 08:9CEF: C2 20        	rep	#$20
  3750                        	longa	on
  3751                        ;    					if(pfxdo
                    sDevice->initialized)
  3752                        	.line	511
  3753                        ;    					{
  3754 08:9CF1: A0 01 00     	ldy	#$1
  3755 08:9CF4: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  3756 08:9CF6: 29 FF 00     	and	#$ff
  3757 08:9CF9: D0 03        	bne	L65
  3758 08:9CFB: 82 38 00     	brl	L10041
  3759                        L65:
  3760                        	.line	512
  3761                        ;							
                    pfxdosDevice->pfInit   = NULL;
  3762                        	.line	513
  3763 08:9CFE: A9 00 00     	lda	#$0
  3764 08:9D01: A0 BA 02     	ldy	#$2ba
  3765 08:9D04: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3766 08:9D06: A9 00 00     	lda	#$0
  3767 08:9D09: A0 BC 02     	ldy	#$2bc
  3768 08:9D0C: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3769                        ;							
                    pfxdosDevice->pfReader = (DOSSECTORREADER)pdriver->f_driver_
                    read;
  3770                        	.line	514
  3771 08:9D0E: A0 55 00     	ldy	#$55
  3772 08:9D11: B7 1B        	lda	[<L57+pdriver_1],Y
  3773 08:9D13: A0 C6 02     	ldy	#$2c6
  3774 08:9D16: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3775 08:9D18: A0 57 00     	ldy	#$57
  3776 08:9D1B: B7 1B        	lda	[<L57+pdriver_1],Y
  3777 08:9D1D: A0 C8 02     	ldy	#$2c8
  3778 08:9D20: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3779                        ;							
                    pfxdosDevice->pfWriter = (DOSSECTORWRITER)pdriver->f_driver_
                    write;
  3780                        	.line	515
  3781 08:9D22: A0 59 00     	ldy	#$59
  3782 08:9D25: B7 1B        	lda	[<L57+pdriver_1],Y
  3783 08:9D27: A0 CA 02     	ldy	#$2ca
  3784 08:9D2A: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3785 08:9D2C: A0 5B 00     	ldy	#$5b
  3786 08:9D2F: B7 1B        	lda	[<L57+pdriver_1],Y
  3787 08:9D31: A0 CC 02     	ldy	#$2cc
  3788 08:9D34: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  Mon Sep 27 2021  9:39                                                Page 73


  3789                        ;    					}
  3790                        	.line	516
  3791                        ;
  3792                        ;    					k_debug_
                    integer("k_create_dos_device:found:pfxdosDevice->initialized
                    :",pfxdosDevice->initialized);
  3793                        L10041:
  3794                        	.line	518
  3795 08:9D36: A0 01 00     	ldy	#$1
  3796 08:9D39: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  3797 08:9D3B: 29 FF 00     	and	#$ff
  3798 08:9D3E: 48           	pha
  3799 08:9D3F: F4 xx xx     	pea	#^L39+130
  3800 08:9D42: F4 xx xx     	pea	#<L39+130
  3801 08:9D45: 22 xx xx xx  	jsl	~~k_debug_integer
  3802                        ;    				}
  3803                        	.line	519
  3804                        ;    				//pfxdosDevice->
                    pfInit(NULL);
  3805                        ;    			}
  3806                        L10040:
  3807                        	.line	521
  3808                        ;
  3809                        ;    		}
  3810                        L10039:
  3811                        	.line	523
  3812                        ;    		//pfxdosDevice->pfInit   = (DOSI
                    NITDEVICE)k_sd_dos_init;
  3813                        ;    		//pfxdosDevice->pfReader = (DOSS
                    ECTORREADER)k_read_sd_sector;
  3814                        ;    		break;
  3815                        L10038:
  3816                        	.line	526
  3817 08:9D49: 82 00 01     	brl	L10036
  3818                        ;
  3819                        ;    	case FXDOS_HDD:
  3820                        	.line	528
  3821                        L10042:
  3822                        ;    		deviceNode = k_nodelist_searchBy
                    Type(_k_dos_devicedrivers,DRIVER_TYPE_IDE);
  3823                        	.line	529
  3824 08:9D4C: F4 08 00     	pea	#<$8
  3825 08:9D4F: AD xx xx     	lda	|~~_k_dos_devicedrivers+2
  3826 08:9D52: 48           	pha
  3827 08:9D53: AD xx xx     	lda	|~~_k_dos_devicedrivers
  3828 08:9D56: 48           	pha
  3829 08:9D57: 22 xx xx xx  	jsl	~~k_nodelist_searchByType
  3830 08:9D5B: 85 1F        	sta	<L57+deviceNode_1
  3831 08:9D5D: 86 21        	stx	<L57+deviceNode_1+2
  3832                        ;    		if(deviceNode)
  3833                        	.line	530
  3834                        ;    		{
  3835 08:9D5F: A5 1F        	lda	<L57+deviceNode_1
  3836 08:9D61: 05 21        	ora	<L57+deviceNode_1+2
  3837 08:9D63: D0 03        	bne	L66
  3838 08:9D65: 82 C6 00     	brl	L10043
  3839                        L66:
  3840                        	.line	531
  Mon Sep 27 2021  9:39                                                Page 74


  3841                        ;    			 k_debug_pointer("k_crea
                    te_dos_device:found:deviceNode:",deviceNode);
  3842                        	.line	532
  3843 08:9D68: D4 21        	pei	<L57+deviceNode_1+2
  3844 08:9D6A: D4 1F        	pei	<L57+deviceNode_1
  3845 08:9D6C: F4 xx xx     	pea	#^L39+183
  3846 08:9D6F: F4 xx xx     	pea	#<L39+183
  3847 08:9D72: 22 xx xx xx  	jsl	~~k_debug_pointer
  3848                        ;
  3849                        ;    			pdriver = ((PFX_BLOCK_DE
                    VICE_DRIVER)(deviceNode->data));
  3850                        	.line	534
  3851 08:9D76: A0 02 00     	ldy	#$2
  3852 08:9D79: B7 1F        	lda	[<L57+deviceNode_1],Y
  3853 08:9D7B: 85 1B        	sta	<L57+pdriver_1
  3854 08:9D7D: A0 04 00     	ldy	#$4
  3855 08:9D80: B7 1F        	lda	[<L57+deviceNode_1],Y
  3856 08:9D82: 85 1D        	sta	<L57+pdriver_1+2
  3857                        ;    			if(pdriver)
  3858                        	.line	535
  3859                        ;    			{
  3860 08:9D84: A5 1B        	lda	<L57+pdriver_1
  3861 08:9D86: 05 1D        	ora	<L57+pdriver_1+2
  3862 08:9D88: D0 03        	bne	L67
  3863 08:9D8A: 82 A1 00     	brl	L10044
  3864                        L67:
  3865                        	.line	536
  3866                        ;    				k_debug_pointer(
                    "k_create_dos_device:found:pdriver:",pdriver);
  3867                        	.line	537
  3868 08:9D8D: D4 1D        	pei	<L57+pdriver_1+2
  3869 08:9D8F: D4 1B        	pei	<L57+pdriver_1
  3870 08:9D91: F4 xx xx     	pea	#^L39+221
  3871 08:9D94: F4 xx xx     	pea	#<L39+221
  3872 08:9D97: 22 xx xx xx  	jsl	~~k_debug_pointer
  3873                        ;
  3874                        ;    				if(pdriver->f_dr
                    iver_load)
  3875                        	.line	539
  3876                        ;    				{
  3877 08:9D9B: A0 51 00     	ldy	#$51
  3878 08:9D9E: B7 1B        	lda	[<L57+pdriver_1],Y
  3879 08:9DA0: A0 53 00     	ldy	#$53
  3880 08:9DA3: 17 1B        	ora	[<L57+pdriver_1],Y
  3881 08:9DA5: D0 03        	bne	L68
  3882 08:9DA7: 82 84 00     	brl	L10045
  3883                        L68:
  3884                        	.line	540
  3885                        ;    					pfxdosDe
                    vice->devdata = pdriver->driver_context;
  3886                        	.line	541
  3887 08:9DAA: A0 4D 00     	ldy	#$4d
  3888 08:9DAD: B7 1B        	lda	[<L57+pdriver_1],Y
  3889 08:9DAF: A0 02 00     	ldy	#$2
  3890 08:9DB2: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3891 08:9DB4: A0 4F 00     	ldy	#$4f
  3892 08:9DB7: B7 1B        	lda	[<L57+pdriver_1],Y
  3893 08:9DB9: A0 04 00     	ldy	#$4
  Mon Sep 27 2021  9:39                                                Page 75


  3894 08:9DBC: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3895                        ;
  3896                        ;    					pfxdosDe
                    vice->initialized = ((DEVICEDRIVER_LOAD)pdriver->f_driver_lo
                    ad)();
  3897                        	.line	543
  3898 08:9DBE: A0 53 00     	ldy	#$53
  3899 08:9DC1: B7 1B        	lda	[<L57+pdriver_1],Y
  3900 08:9DC3: AA           	tax
  3901 08:9DC4: A0 51 00     	ldy	#$51
  3902 08:9DC7: B7 1B        	lda	[<L57+pdriver_1],Y
  3903                        	xref	~~~lcal
  3904 08:9DC9: 22 xx xx xx  	jsl	~~~lcal
  3905 08:9DCD: E2 20        	sep	#$20
  3906                        	longa	off
  3907 08:9DCF: A0 01 00     	ldy	#$1
  3908 08:9DD2: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3909 08:9DD4: C2 20        	rep	#$20
  3910                        	longa	on
  3911                        ;    					if(pfxdo
                    sDevice->initialized)
  3912                        	.line	544
  3913                        ;    					{
  3914 08:9DD6: A0 01 00     	ldy	#$1
  3915 08:9DD9: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  3916 08:9DDB: 29 FF 00     	and	#$ff
  3917 08:9DDE: D0 03        	bne	L69
  3918 08:9DE0: 82 38 00     	brl	L10046
  3919                        L69:
  3920                        	.line	545
  3921                        ;							
                    pfxdosDevice->pfInit   = NULL;
  3922                        	.line	546
  3923 08:9DE3: A9 00 00     	lda	#$0
  3924 08:9DE6: A0 BA 02     	ldy	#$2ba
  3925 08:9DE9: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3926 08:9DEB: A9 00 00     	lda	#$0
  3927 08:9DEE: A0 BC 02     	ldy	#$2bc
  3928 08:9DF1: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3929                        ;							
                    pfxdosDevice->pfReader = (DOSSECTORREADER)pdriver->f_driver_
                    read;
  3930                        	.line	547
  3931 08:9DF3: A0 55 00     	ldy	#$55
  3932 08:9DF6: B7 1B        	lda	[<L57+pdriver_1],Y
  3933 08:9DF8: A0 C6 02     	ldy	#$2c6
  3934 08:9DFB: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3935 08:9DFD: A0 57 00     	ldy	#$57
  3936 08:9E00: B7 1B        	lda	[<L57+pdriver_1],Y
  3937 08:9E02: A0 C8 02     	ldy	#$2c8
  3938 08:9E05: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3939                        ;							
                    pfxdosDevice->pfWriter = (DOSSECTORWRITER)pdriver->f_driver_
                    write;
  3940                        	.line	548
  3941 08:9E07: A0 59 00     	ldy	#$59
  3942 08:9E0A: B7 1B        	lda	[<L57+pdriver_1],Y
  3943 08:9E0C: A0 CA 02     	ldy	#$2ca
  Mon Sep 27 2021  9:39                                                Page 76


  3944 08:9E0F: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3945 08:9E11: A0 5B 00     	ldy	#$5b
  3946 08:9E14: B7 1B        	lda	[<L57+pdriver_1],Y
  3947 08:9E16: A0 CC 02     	ldy	#$2cc
  3948 08:9E19: 97 13        	sta	[<L57+pfxdosDevice_1],Y
  3949                        ;    					}
  3950                        	.line	549
  3951                        ;
  3952                        ;    					k_debug_
                    integer("k_create_dos_device:found:pfxdosDevice->initialized
                    :",pfxdosDevice->initialized);
  3953                        L10046:
  3954                        	.line	551
  3955 08:9E1B: A0 01 00     	ldy	#$1
  3956 08:9E1E: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  3957 08:9E20: 29 FF 00     	and	#$ff
  3958 08:9E23: 48           	pha
  3959 08:9E24: F4 xx xx     	pea	#^L39+256
  3960 08:9E27: F4 xx xx     	pea	#<L39+256
  3961 08:9E2A: 22 xx xx xx  	jsl	~~k_debug_integer
  3962                        ;    				}
  3963                        	.line	552
  3964                        ;    				//pfxdosDevice->
                    pfInit(NULL);
  3965                        ;    			}
  3966                        L10045:
  3967                        	.line	554
  3968                        ;
  3969                        ;    		}
  3970                        L10044:
  3971                        	.line	556
  3972                        ;
  3973                        ;    		break;
  3974                        L10043:
  3975                        	.line	558
  3976 08:9E2E: 82 1B 00     	brl	L10036
  3977                        ;
  3978                        ;    	case FXDOS_FDD:
  3979                        	.line	560
  3980                        L10047:
  3981                        ;
  3982                        ;    		//pfxdosDevice->pfInit   = (DOSI
                    NITDEVICE)floppy_init;//k_fd_dos_init;
  3983                        ;    		//pfxdosDevice->pfReader = (DOSS
                    ECTORREADER)k_read_fd_sector;
  3984                        ;    		lba = 0L;
  3985                        	.line	564
  3986 08:9E31: 64 23        	stz	<L57+lba_1
  3987 08:9E33: 64 25        	stz	<L57+lba_1+2
  3988                        ;
  3989                        ;    		break;
  3990                        	.line	566
  3991 08:9E35: 82 14 00     	brl	L10036
  3992                        ;
  3993                        ;		}
  3994                        	.line	568
  3995                        L10035:
  3996                        	xref	~~~swt
  Mon Sep 27 2021  9:39                                                Page 77


  3997 08:9E38: 22 xx xx xx  	jsl	~~~swt
  3998 08:9E3C: 03 00        	dw	3
  3999 08:9E3E: 05 00        	dw	5
  4000 08:9E40: 66 9C        	dw	L10037-1
  4001 08:9E42: 06 00        	dw	6
  4002 08:9E44: 4B 9D        	dw	L10042-1
  4003 08:9E46: 07 00        	dw	7
  4004 08:9E48: 30 9E        	dw	L10047-1
  4005 08:9E4A: 4B 9E        	dw	L10036-1
  4006                        L10036:
  4007                        ;
  4008                        ;    	k_debug_integer("k_create_dos_device siz
                    e:",sizeof(FXDOSDEVICE));
  4009                        	.line	570
  4010 08:9E4C: F4 CE 02     	pea	#<$2ce
  4011 08:9E4F: F4 xx xx     	pea	#^L39+309
  4012 08:9E52: F4 xx xx     	pea	#<L39+309
  4013 08:9E55: 22 xx xx xx  	jsl	~~k_debug_integer
  4014                        ;
  4015                        ;    	if(!pfxdosDevice->initialized && pfxdosD
                    evice->pfInit)
  4016                        	.line	572
  4017                        ;    		pfxdosDevice->pfInit();
  4018 08:9E59: A0 01 00     	ldy	#$1
  4019 08:9E5C: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4020 08:9E5E: 29 FF 00     	and	#$ff
  4021 08:9E61: F0 03        	beq	L70
  4022 08:9E63: 82 1E 00     	brl	L10048
  4023                        L70:
  4024 08:9E66: A0 BA 02     	ldy	#$2ba
  4025 08:9E69: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4026 08:9E6B: A0 BC 02     	ldy	#$2bc
  4027 08:9E6E: 17 13        	ora	[<L57+pfxdosDevice_1],Y
  4028 08:9E70: D0 03        	bne	L71
  4029 08:9E72: 82 0F 00     	brl	L10048
  4030                        L71:
  4031                        	.line	573
  4032 08:9E75: A0 BC 02     	ldy	#$2bc
  4033 08:9E78: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4034 08:9E7A: AA           	tax
  4035 08:9E7B: A0 BA 02     	ldy	#$2ba
  4036 08:9E7E: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4037                        	xref	~~~lcal
  4038 08:9E80: 22 xx xx xx  	jsl	~~~lcal
  4039                        ;
  4040                        ;
  4041                        ;    	if(!pfxdosDevice->initialized)
  4042                        L10048:
  4043                        	.line	576
  4044                        ;    	{
  4045 08:9E84: A0 01 00     	ldy	#$1
  4046 08:9E87: B7 13        	lda	[<L57+pfxdosDevice_1],Y
  4047 08:9E89: 29 FF 00     	and	#$ff
  4048 08:9E8C: F0 03        	beq	L72
  4049 08:9E8E: 82 12 00     	brl	L10049
  4050                        L72:
  4051                        	.line	577
  4052                        ;    		k_mem_deallocate_heap(pfxdosDevi
  Mon Sep 27 2021  9:39                                                Page 78


                    ce);
  4053                        	.line	578
  4054 08:9E91: D4 15        	pei	<L57+pfxdosDevice_1+2
  4055 08:9E93: D4 13        	pei	<L57+pfxdosDevice_1
  4056 08:9E95: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  4057                        ;    		return NULL;
  4058                        	.line	579
  4059 08:9E99: A9 00 00     	lda	#$0
  4060 08:9E9C: AA           	tax
  4061 08:9E9D: A9 00 00     	lda	#$0
  4062 08:9EA0: 82 88 FD     	brl	L60
  4063                        ;    	}
  4064                        	.line	580
  4065                        ;
  4066                        ;		//_MSTR_CTRL[0] |= GABE_CTRL_SDC_LED;
  4067                        ;
  4068                        ;    	/*
  4069                        ;		errorCode = pfxdosDevice->pfReader(lba,s
                    ectorBuffer);
  4070                        ;		k_debug_byte_array("pfxdosDevice->pfRead
                    er:\r\n",sectorBuffer,512);
  4071                        ;
  4072                        ;		pBoot =  (PFATBOOTSECTOR)sectorBuffer;;
  4073                        ;
  4074                        ;		k_debug_integer("pBoot->sectors_per_clus
                    ter:",pBoot->sectors_per_cluster);
  4075                        ;		k_debug_integer("pBoot->root_entry_count
                    :",pBoot->root_entry_count);
  4076                        ;		k_debug_integer("pBoot->total_sectors_16
                    :",pBoot->total_sectors_16);
  4077                        ;		k_debug_integer("pBoot->sectors_per_fat:
                    ",pBoot->sectors_per_fat);
  4078                        ;		k_debug_integer("pBoot->sectors_per_trac
                    k:",pBoot->sectors_per_track);
  4079                        ;		k_debug_nstrings("pBoot->vol_name:",pBoo
                    t->vol_name,11);
  4080                        ;		k_debug_integer("pBoot->bytes_per_sector
                    :",pBoot->bytes_per_sector);
  4081                        ;		k_debug_hex("pBoot->fat_table_count:",pB
                    oot->fat_table_count);
  4082                        ;		k_debug_integer("pBoot->bytes_per_sector
                    :",pBoot->hidden_sector_count);
  4083                        ;
  4084                        ;
  4085                        ;		if(pBoot->total_sectors_16 == 2880)
  4086                        ;			isFAT12 = TRUE;
  4087                        ;		*/
  4088                        ;		/*
  4089                        ;		if(!isFAT12)
  4090                        ;		{
  4091                        ;			pfat32 =  (PFAT32EXT)(&sectorBuf
                    fer[36]);
  4092                        ;
  4093                        ;			k_debug_long("pfat32->table_size
                    _32:",pfat32->table_size_32);
  4094                        ;			k_debug_nstrings("pfat32->volume
                    _label:",pfat32->volume_label,11);
  4095                        ;
  Mon Sep 27 2021  9:39                                                Page 79


  4096                        ;			for(x=0;x<4;x++)
  4097                        ;			{
  4098                        ;				k_debug_integer("*** par
                    tition table:",x);
  4099                        ;
  4100                        ;				pPartTable = (PPARTITION
                    TABLE)&sectorBuffer[FAT_PARTITION_TABLE_1 + (0x10 * x)];
  4101                        ;
  4102                        ;				if(pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS30 ||
  4103                        ;				   pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS33 ||
  4104                        ;				   pPartTable->partition
                    _type == FAT_PARTITION_TYPE_DOS70)
  4105                        ;				{
  4106                        ;					k_debug_hex("FAT
                    16 filesystem found from partition:", pPartTable->partition_
                    type);
  4107                        ;					partitionId = x;
  4108                        ;					break;
  4109                        ;				}
  4110                        ;				else
  4111                        ;				{
  4112                        ;					k_debug_hex("***
                     pPartTable->partition_type:",pPartTable->partition_type);
  4113                        ;				}
  4114                        ;			}
  4115                        ;
  4116                        ;
  4117                        ;			memcpy(&pfxdosDevice->partitionT
                    able,&sectorBuffer[FAT_PARTITION_TABLE_1 + (0x10 * partition
                    Id)],sizeof(PARTITIONTABLE));
  4118                        ;			k_debug_hex ("***fxdosDevice fir
                    st_byte:",pfxdosDevice->partitionTable.first_byte);
  4119                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs0:",pfxdosDevice->partitionTable.start_chs[0]);
  4120                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs1:",pfxdosDevice->partitionTable.start_chs[1]);
  4121                        ;			k_debug_hex ("***fxdosDevice sta
                    rt_chs2:",pfxdosDevice->partitionTable.start_chs[2]);
  4122                        ;			k_debug_hex ("***fxdosDevice par
                    tition_type:",(INT)pfxdosDevice->partitionTable.partition_ty
                    pe);
  4123                        ;			k_debug_hex ("***fxdosDevice end
                    _chs0:",pfxdosDevice->partitionTable.end_chs[0]);
  4124                        ;			k_debug_hex ("***fxdosDevice end
                    _chs1:",pfxdosDevice->partitionTable.end_chs[1]);
  4125                        ;			k_debug_hex ("***fxdosDevice end
                    _chs2:",pfxdosDevice->partitionTable.end_chs[2]);
  4126                        ;			k_debug_long("***fxdosDevice sta
                    rt_sector:",pfxdosDevice->partitionTable.start_sector);
  4127                        ;			k_debug_long("***fxdosDevice len
                    gth_sectors:",pfxdosDevice->partitionTable.length_sectors);
  4128                        ;		}
  4129                        ;		else
  4130                        ;		{
  4131                        ;			memset(&pfxdosDevice->partitionT
                    able,0,sizeof(PARTITIONTABLE));
  Mon Sep 27 2021  9:39                                                Page 80


  4132                        ;			pPartTable->start_sector = 0;
  4133                        ;		}
  4134                        ;		*/
  4135                        ;
  4136                        ;    	/*
  4137                        ;		pfxdosDevice->bsOffset = (pPartTable->st
                    art_sector * FAT_PAGE_SIZE);
  4138                        ;
  4139                        ;		pfxdosDevice->errorCode = pfxdosDevice->
                    pfReader(pfxdosDevice->bsOffset,sectorBuffer);
  4140                        ;		if(!pfxdosDevice->errorCode)
  4141                        ;		{
  4142                        ;			memcpy(&pfxdosDevice->bootSector
                    ,sectorBuffer,sizeof(FATBOOTSECTOR));
  4143                        ;
  4144                        ;			k_debug_integer("***fxdosDevice 
                    bytes_per_sector:",(INT)pfxdosDevice->bootSector.bytes_per_s
                    ector);
  4145                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_cluster:",(INT)pfxdosDevice->bootSector.sectors_
                    per_cluster);
  4146                        ;			k_debug_integer("***fxdosDevice 
                    reserved_sector_count:",(INT)pfxdosDevice->bootSector.reserv
                    ed_sector_count);
  4147                        ;			k_debug_integer("***fxdosDevice 
                    table_count:",(INT)pfxdosDevice->bootSector.fat_table_count)
                    ;
  4148                        ;			k_debug_integer("***fxdosDevice 
                    root_entry_count:",(INT)pfxdosDevice->bootSector.root_entry_
                    count);
  4149                        ;			k_debug_integer("***fxdosDevice 
                    total_sectors_16:",(INT)pfxdosDevice->bootSector.total_secto
                    rs_16);
  4150                        ;			k_debug_integer("***fxdosDevice 
                    media_type:",(INT)pfxdosDevice->bootSector.media_type);
  4151                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_fat:",(INT)pfxdosDevice->bootSector.sectors_per_
                    fat);
  4152                        ;			k_debug_integer("***fxdosDevice 
                    sectors_per_track:",(INT)pfxdosDevice->bootSector.sectors_pe
                    r_track);
  4153                        ;			k_debug_integer("***fxdosDevice 
                    head_side_count:",(INT)pfxdosDevice->bootSector.head_side_co
                    unt);
  4154                        ;			k_debug_integer("***fxdosDevice 
                    hidden_sector_count:",(INT)pfxdosDevice->bootSector.hidden_s
                    ector_count);
  4155                        ;			k_debug_integer("***fxdosDevice 
                    total_sectors_32:",(INT)pfxdosDevice->bootSector.total_secto
                    rs_32);
  4156                        ;
  4157                        ;			strncpy(pfxdosDevice->volume_nam
                    e,pfxdosDevice->bootSector.vol_name,11);
  4158                        ;			//pfxdosDevice->volume_name[11] 
                    = 0;
  4159                        ;			k_debug_nstrings("***fxdosDevice
                     Volume Name:",pfxdosDevice->volume_name,11);
  4160                        ;
  Mon Sep 27 2021  9:39                                                Page 81


  4161                        ;			pfxdosDevice->root_entry_count =
                     pfxdosDevice->bootSector.root_entry_count;
  4162                        ;
  4163                        ;			pfxdosDevice->fatTableOffset = p
                    fxdosDevice->bsOffset + (pfxdosDevice->bootSector.bytes_per_
                    sector * pfxdosDevice->bootSector.reserved_sector_count);
  4164                        ;			pfxdosDevice->rootDirSectors = p
                    fxdosDevice->bsOffset + (((ULONG)pfxdosDevice->bootSector.re
                    served_sector_count + ((ULONG)pfxdosDevice->bootSector.secto
                    rs_per_fat * (ULONG)pfxdosDevice->bootSector.fat_table_count
                    )) * (ULONG)pfxdosDevice->bootSector.bytes_per_sector);
  4165                        ;			pfxdosDevice->sectors_per_cluste
                    r = (INT)pfxdosDevice->bootSector.sectors_per_cluster;
  4166                        ;
  4167                        ;			k_debug_long("***fxdosDevice fat
                    Table:",pfxdosDevice->fatTableOffset);
  4168                        ;
  4169                        ;
  4170                        ;
  4171                        ;			if(pfxdosDevice->pfReader(pfxdos
                    Device->fatTableOffset,sectorBuffer) == 0)
  4172                        ;			{
  4173                        ;				memcpy(&pfxdosDevice->fi
                    leAllocationTable,sectorBuffer,FAT_PAGE_SIZE);
  4174                        ;			}
  4175                        ;
  4176                        ;			k_debug_long("***fxdosDevice roo
                    t offset:",pfxdosDevice->rootDirSectors);
  4177                        ;			k_debug_long("***fxdosDevice roo
                    t sizeof(FAT16ENTRY):",sizeof(FAT16ENTRY));
  4178                        ;			k_debug_long("***fxdosDevice roo
                    t root_entry_count:",pfxdosDevice->root_entry_count);
  4179                        ;			k_debug_long("***fxdosDevice roo
                    t root_entry_count/sizeof(FAT16ENTRY):",pfxdosDevice->root_e
                    ntry_count/sizeof(FAT16ENTRY));
  4180                        ;
  4181                        ;
  4182                        ;			pfxdosDevice->rootEntriesPerPage
                     = pfxdosDevice->root_entry_count/sizeof(FAT16ENTRY);
  4183                        ;
  4184                        ;			pfxdosDevice->firstDataSector = 
                    pfxdosDevice->bootSector.reserved_sector_count + (pfxdosDevi
                    ce->bootSector.fat_table_count * 512) + pfxdosDevice->rootDi
                    rSectors + ( pfxdosDevice->root_entry_count * sizeof(FAT16EN
                    TRY));
  4185                        ;			k_debug_long("***fxdosDevice roo
                    t firstDataSector:",pfxdosDevice->firstDataSector);
  4186                        ;		}
  4187                        ;		*/
  4188                        ;    }
  4189                        L10049:
  4190                        	.line	704
  4191                        ;
  4192                        ;    k_debug_nstrings("***fxdosDevice ADD DEVICE:"
                    ,pdriver->designation,3);
  4193                        L10034:
  4194                        	.line	706
  4195 08:9EA3: F4 03 00     	pea	#<$3
  Mon Sep 27 2021  9:39                                                Page 82


  4196 08:9EA6: 18           	clc
  4197 08:9EA7: A9 41 00     	lda	#$41
  4198 08:9EAA: 65 1B        	adc	<L57+pdriver_1
  4199 08:9EAC: 85 01        	sta	<R0
  4200 08:9EAE: A9 00 00     	lda	#$0
  4201 08:9EB1: 65 1D        	adc	<L57+pdriver_1+2
  4202 08:9EB3: 85 03        	sta	<R0+2
  4203 08:9EB5: D4 03        	pei	<R0+2
  4204 08:9EB7: D4 01        	pei	<R0
  4205 08:9EB9: F4 xx xx     	pea	#^L39+335
  4206 08:9EBC: F4 xx xx     	pea	#<L39+335
  4207 08:9EBF: 22 xx xx xx  	jsl	~~k_debug_nstrings
  4208                        ;    k_nodelist_addtolist(_k_dos_deviceinstance,ty
                    pe,pdriver->designation,pfxdosDevice);
  4209                        	.line	707
  4210 08:9EC3: D4 15        	pei	<L57+pfxdosDevice_1+2
  4211 08:9EC5: D4 13        	pei	<L57+pfxdosDevice_1
  4212 08:9EC7: 18           	clc
  4213 08:9EC8: A9 41 00     	lda	#$41
  4214 08:9ECB: 65 1B        	adc	<L57+pdriver_1
  4215 08:9ECD: 85 01        	sta	<R0
  4216 08:9ECF: A9 00 00     	lda	#$0
  4217 08:9ED2: 65 1D        	adc	<L57+pdriver_1+2
  4218 08:9ED4: 85 03        	sta	<R0+2
  4219 08:9ED6: D4 03        	pei	<R0+2
  4220 08:9ED8: D4 01        	pei	<R0
  4221 08:9EDA: D4 2C        	pei	<L56+type_0
  4222 08:9EDC: AD xx xx     	lda	|~~_k_dos_deviceinstance+2
  4223 08:9EDF: 48           	pha
  4224 08:9EE0: AD xx xx     	lda	|~~_k_dos_deviceinstance
  4225 08:9EE3: 48           	pha
  4226 08:9EE4: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  4227                        ;
  4228                        ;    //GABE_MSTR_CTRL[0] = GABE_MSTR_CTRL[0] & (~G
                    ABE_CTRL_SDC_LED);
  4229                        ;
  4230                        ;	return pfxdosDevice;
  4231                        	.line	711
  4232 08:9EE8: A6 15        	ldx	<L57+pfxdosDevice_1+2
  4233 08:9EEA: A5 13        	lda	<L57+pfxdosDevice_1
  4234 08:9EEC: 82 3C FD     	brl	L60
  4235                        ;}
  4236                        	.line	712
  4237                        	.endblock	712
  4238             00000028   L56	equ	40
  4239             00000005   L57	equ	5
  4240 08:9EEF:              	ends
  4241                        	efunc
  4242                        	.endfunc	712,5,40
  4243                        	.line	712
  4244                        	data
  4245                        L39:
  4246 00:00E6: 6B 5F 63 72  	db	$6B,$5F,$63,$72,$65,$61,$74,$65,$5F,$64,
                    $6F,$73,$5F,$64,$65
       00:00EA: 65 61 74 65 
       00:00EE: 5F 64 6F 73 
       00:00F2: 5F 64 65 
  4247 00:00F5: 76 69 63 65  	db	$76,$69,$63,$65,$3A,$00,$6B,$5F,$63,$72,
  Mon Sep 27 2021  9:39                                                Page 83


                    $65,$61,$74,$65,$5F
       00:00F9: 3A 00 6B 5F 
       00:00FD: 63 72 65 61 
       00:0101: 74 65 5F 
  4248 00:0104: 64 6F 73 5F  	db	$64,$6F,$73,$5F,$64,$65,$76,$69,$63,$65,
                    $3A,$46,$4F,$55,$4E
       00:0108: 64 65 76 69 
       00:010C: 63 65 3A 46 
       00:0110: 4F 55 4E 
  4249 00:0113: 44 20 45 58  	db	$44,$20,$45,$58,$49,$53,$54,$49,$4E,$47,
                    $3A,$00,$6B,$5F,$63
       00:0117: 49 53 54 49 
       00:011B: 4E 47 3A 00 
       00:011F: 6B 5F 63 
  4250 00:0122: 72 65 61 74  	db	$72,$65,$61,$74,$65,$5F,$64,$6F,$73,$5F,
                    $64,$65,$76,$69,$63
       00:0126: 65 5F 64 6F 
       00:012A: 73 5F 64 65 
       00:012E: 76 69 63 
  4251 00:0131: 65 3A 66 6F  	db	$65,$3A,$66,$6F,$75,$6E,$64,$3A,$64,$65,
                    $76,$69,$63,$65,$4E
       00:0135: 75 6E 64 3A 
       00:0139: 64 65 76 69 
       00:013D: 63 65 4E 
  4252 00:0140: 6F 64 65 3A  	db	$6F,$64,$65,$3A,$00,$6B,$5F,$63,$72,$65,
                    $61,$74,$65,$5F,$64
       00:0144: 00 6B 5F 63 
       00:0148: 72 65 61 74 
       00:014C: 65 5F 64 
  4253 00:014F: 6F 73 5F 64  	db	$6F,$73,$5F,$64,$65,$76,$69,$63,$65,$3A,
                    $66,$6F,$75,$6E,$64
       00:0153: 65 76 69 63 
       00:0157: 65 3A 66 6F 
       00:015B: 75 6E 64 
  4254 00:015E: 3A 70 64 72  	db	$3A,$70,$64,$72,$69,$76,$65,$72,$3A,$00,
                    $6B,$5F,$63,$72,$65
       00:0162: 69 76 65 72 
       00:0166: 3A 00 6B 5F 
       00:016A: 63 72 65 
  4255 00:016D: 61 74 65 5F  	db	$61,$74,$65,$5F,$64,$6F,$73,$5F,$64,$65,
                    $76,$69,$63,$65,$3A
       00:0171: 64 6F 73 5F 
       00:0175: 64 65 76 69 
       00:0179: 63 65 3A 
  4256 00:017C: 66 6F 75 6E  	db	$66,$6F,$75,$6E,$64,$3A,$70,$66,$78,$64,
                    $6F,$73,$44,$65,$76
       00:0180: 64 3A 70 66 
       00:0184: 78 64 6F 73 
       00:0188: 44 65 76 
  4257 00:018B: 69 63 65 2D  	db	$69,$63,$65,$2D,$3E,$69,$6E,$69,$74,$69,
                    $61,$6C,$69,$7A,$65
       00:018F: 3E 69 6E 69 
       00:0193: 74 69 61 6C 
       00:0197: 69 7A 65 
  4258 00:019A: 64 3A 00 6B  	db	$64,$3A,$00,$6B,$5F,$63,$72,$65,$61,$74,
                    $65,$5F,$64,$6F,$73
       00:019E: 5F 63 72 65 
       00:01A2: 61 74 65 5F 
  Mon Sep 27 2021  9:39                                                Page 84


       00:01A6: 64 6F 73 
  4259 00:01A9: 5F 64 65 76  	db	$5F,$64,$65,$76,$69,$63,$65,$3A,$66,$6F,
                    $75,$6E,$64,$3A,$64
       00:01AD: 69 63 65 3A 
       00:01B1: 66 6F 75 6E 
       00:01B5: 64 3A 64 
  4260 00:01B8: 65 76 69 63  	db	$65,$76,$69,$63,$65,$4E,$6F,$64,$65,$3A,
                    $00,$6B,$5F,$63,$72
       00:01BC: 65 4E 6F 64 
       00:01C0: 65 3A 00 6B 
       00:01C4: 5F 63 72 
  4261 00:01C7: 65 61 74 65  	db	$65,$61,$74,$65,$5F,$64,$6F,$73,$5F,$64,
                    $65,$76,$69,$63,$65
       00:01CB: 5F 64 6F 73 
       00:01CF: 5F 64 65 76 
       00:01D3: 69 63 65 
  4262 00:01D6: 3A 66 6F 75  	db	$3A,$66,$6F,$75,$6E,$64,$3A,$70,$64,$72,
                    $69,$76,$65,$72,$3A
       00:01DA: 6E 64 3A 70 
       00:01DE: 64 72 69 76 
       00:01E2: 65 72 3A 
  4263 00:01E5: 00 6B 5F 63  	db	$00,$6B,$5F,$63,$72,$65,$61,$74,$65,$5F,
                    $64,$6F,$73,$5F,$64
       00:01E9: 72 65 61 74 
       00:01ED: 65 5F 64 6F 
       00:01F1: 73 5F 64 
  4264 00:01F4: 65 76 69 63  	db	$65,$76,$69,$63,$65,$3A,$66,$6F,$75,$6E,
                    $64,$3A,$70,$66,$78
       00:01F8: 65 3A 66 6F 
       00:01FC: 75 6E 64 3A 
       00:0200: 70 66 78 
  4265 00:0203: 64 6F 73 44  	db	$64,$6F,$73,$44,$65,$76,$69,$63,$65,$2D,
                    $3E,$69,$6E,$69,$74
       00:0207: 65 76 69 63 
       00:020B: 65 2D 3E 69 
       00:020F: 6E 69 74 
  4266 00:0212: 69 61 6C 69  	db	$69,$61,$6C,$69,$7A,$65,$64,$3A,$00,$6B,
                    $5F,$63,$72,$65,$61
       00:0216: 7A 65 64 3A 
       00:021A: 00 6B 5F 63 
       00:021E: 72 65 61 
  4267 00:0221: 74 65 5F 64  	db	$74,$65,$5F,$64,$6F,$73,$5F,$64,$65,$76,
                    $69,$63,$65,$20,$73
       00:0225: 6F 73 5F 64 
       00:0229: 65 76 69 63 
       00:022D: 65 20 73 
  4268 00:0230: 69 7A 65 3A  	db	$69,$7A,$65,$3A,$00,$2A,$2A,$2A,$66,$78,
                    $64,$6F,$73,$44,$65
       00:0234: 00 2A 2A 2A 
       00:0238: 66 78 64 6F 
       00:023C: 73 44 65 
  4269 00:023F: 76 69 63 65  	db	$76,$69,$63,$65,$20,$41,$44,$44,$20,$44,
                    $45,$56,$49,$43,$45
       00:0243: 20 41 44 44 
       00:0247: 20 44 45 56 
       00:024B: 49 43 45 
  4270 00:024E: 3A 00        	db	$3A,$00
  4271 00:0250:              	ends
  Mon Sep 27 2021  9:39                                                Page 85


  4272                        ;
  4273                        ;PFXNODELIST k_read_dos_directory(PFXDOSDEVICE pfx
                    dosDevice)
  4274                        ;{
  4275                        	.line	714
  4276                        	.line	715
  4277                        	FXDOS
  4278                        	xdef	~~k_read_dos_directory
  4279                        	func
  4280                        	.function	715
  4281                        ~~k_read_dos_directory:
  4282                        	longa	on
  4283                        	longi	on
  4284 08:9EEF: 3B           	tsc
  4285 08:9EF0: 38           	sec
  4286 08:9EF1: E9 00 00     	sbc	#L74
  4287 08:9EF4: 1B           	tcs
  4288 08:9EF5: 0B           	phd
  4289 08:9EF6: 5B           	tcd
  4290             00000004   pfxdosDevice_0	set	4
  4291                        	.block	715
  4292                        ;	return NULL;
  4293                        	.sym	pfxdosDevice,4,138,6,32,127
  4294                        	.line	716
  4295 08:9EF7: A9 00 00     	lda	#$0
  4296 08:9EFA: AA           	tax
  4297 08:9EFB: A9 00 00     	lda	#$0
  4298                        L77:
  4299 08:9EFE: A8           	tay
  4300 08:9EFF: A5 02        	lda	<L74+2
  4301 08:9F01: 85 06        	sta	<L74+2+4
  4302 08:9F03: A5 01        	lda	<L74+1
  4303 08:9F05: 85 05        	sta	<L74+1+4
  4304 08:9F07: 2B           	pld
  4305 08:9F08: 3B           	tsc
  4306 08:9F09: 18           	clc
  4307 08:9F0A: 69 04 00     	adc	#L74+4
  4308 08:9F0D: 1B           	tcs
  4309 08:9F0E: 98           	tya
  4310 08:9F0F: 6B           	rtl
  4311                        ;}
  4312                        	.line	717
  4313                        	.endblock	717
  4314             00000000   L74	equ	0
  4315             00000001   L75	equ	1
  4316 08:9F10:              	ends
  4317                        	efunc
  4318                        	.endfunc	717,1,0
  4319                        	.line	717
  4320                        ;/*
  4321                        ;LPCHAR _k_dos_alloc_filename(LPCHAR filename11)
  4322                        ;{
  4323                        ;	UINT index = 0;
  4324                        ;	//UINT p = 0;
  4325                        ;	//UINT dot = 0;
  4326                        ;	LPCHAR lpName = NULL;
  4327                        ;	CHAR ftmp[4] = {0,0,0,0};
  4328                        ;
  Mon Sep 27 2021  9:39                                                Page 86


  4329                        ;	//k_debug_string("_k_dos_alloc_filename:enter\r\
                    n");
  4330                        ;
  4331                        ;	lpName = (LPCHAR)k_mem_allocate_heap(16);
  4332                        ;	if(lpName!=NULL)
  4333                        ;	{
  4334                        ;		//k_debug_string("_k_dos_alloc_filename:
                    copy\r\n");
  4335                        ;		//memset(lpName,0,16);
  4336                        ;		//memcpy(lpName,filename11,8);
  4337                        ;		for(index=0;index<16;index++)
  4338                        ;					lpName[index] = 
                    0;
  4339                        ;
  4340                        ;		for(index=0;index<8;index++)
  4341                        ;			lpName[index] = filename11[index
                    ];
  4342                        ;
  4343                        ;
  4344                        ;		lpName = k_string_rtrim(lpName);
  4345                        ;		if(filename11[8]!=' ')
  4346                        ;		{
  4347                        ;			strcat(lpName,".");
  4348                        ;
  4349                        ;			for(index=0;index<3;index++)
  4350                        ;				ftmp[index] = filename11
                    [index + 8];
  4351                        ;
  4352                        ;			strcat(lpName,ftmp);
  4353                        ;		}
  4354                        ;
  4355                        ;		//k_debug_string("_k_ds_alloc_filename:"
                    );
  4356                        ;		//k_debug_string(lpName);
  4357                        ;		//k_debug_string("\r\n");
  4358                        ;	}
  4359                        ;
  4360                        ;	return lpName;
  4361                        ;}
  4362                        ;
  4363                        ;
  4364                        ;
  4365                        ;VOID  k_dos_dealloc_filelist(PFXNODE plist)
  4366                        ;{
  4367                        ;	PFXNODE p   = plist;
  4368                        ;	PFXNODE tmp = NULL;
  4369                        ;
  4370                        ;	while(p)
  4371                        ;	{
  4372                        ;		tmp = p->next;
  4373                        ;
  4374                        ;		k_mem_deallocate_heap(((PFILEINFO)p->dat
                    a)->pFilename);
  4375                        ;		k_mem_deallocate_heap(p->data);
  4376                        ;		k_mem_deallocate_heap(p);
  4377                        ;
  4378                        ;		p = tmp;
  4379                        ;	}
  Mon Sep 27 2021  9:39                                                Page 87


  4380                        ;}
  4381                        ;
  4382                        ;PFILEINFO _k_dos_alloc_fileinfo(FX_FAT_DIR_INFO F
                    AR *direntry)
  4383                        ;{
  4384                        ;	PFILEINFO pfi = NULL;
  4385                        ;
  4386                        ;	//k_debug_string("_k_dos_alloc_fileinfo:enter\r\
                    n");
  4387                        ;
  4388                        ;	pfi = k_mem_allocate_heap(sizeof(FILEINFO));
  4389                        ;	if(pfi!=NULL)
  4390                        ;	{
  4391                        ;		pfi->type  		 = direntry->DIR
                    _Attr;
  4392                        ;		pfi->lSize 		 = direntry->DIR
                    _FileSize;
  4393                        ;		pfi->lchangeDate = direntry->DIR_LstAccD
                    ate;
  4394                        ;		pfi->lcreateDate = direntry->DIR_CrtDate
                    ;
  4395                        ;		pfi->pFilename   = _k_dos_alloc_filename
                    (direntry->DIR_Name);
  4396                        ;	}
  4397                        ;
  4398                        ;	return pfi;
  4399                        ;}
  4400                        ;
  4401                        ;
  4402                        ;BOOL k_dos_foreach_file(LPVOID ctx,LPVOID pdata)
  4403                        ;{
  4404                        ;	BOOL bBreak = FALSE;
  4405                        ;
  4406                        ;	PFAT16ENTRYLONG entry = (PFAT16ENTRYLONG)pdata;
  4407                        ;	if(pdata)
  4408                        ;	{
  4409                        ;		if(entry->plongfileName && ctx)
  4410                        ;		{
  4411                        ;			//k_debug_strings("k_dos_foreach
                    _file:",entry->plongfileName);
  4412                        ;			//k_debug_strings("k_dos_foreach
                    _file compare:",(LPSTR)ctx);
  4413                        ;
  4414                        ;			bBreak = (strcmp(ctx,entry->plon
                    gfileName) == 0);
  4415                        ;
  4416                        ;			//k_debug_integer("k_dos_foreach
                    _file compare:",bBreak);
  4417                        ;		}
  4418                        ;	}
  4419                        ;
  4420                        ;	return bBreak;
  4421                        ;}
  4422                        ;
  4423                        ;LPSTR k_dos_alloc_short_name(PFAT16ENTRYLONG entr
                    y)
  4424                        ;{
  4425                        ;	int i = 0;
  Mon Sep 27 2021  9:39                                                Page 88


  4426                        ;	// 01234567.901N
  4427                        ;	entry->plongfileName = k_mem_allocate_heap(14);
  4428                        ;	memset(entry->plongfileName,0,14);
  4429                        ;
  4430                        ;
  4431                        ;	memcpy(entry->plongfileName,entry->filename,8);
  4432                        ;	for(i=0;i<8;i++)
  4433                        ;	{
  4434                        ;		if(entry->plongfileName[i] == ' ')
  4435                        ;			break;
  4436                        ;	}
  4437                        ;	//k_debug_strings("k_dos_alloc_short_name:filena
                    me:",entry->plongfileName);
  4438                        ;	//k_debug_integer("k_dos_alloc_short_name:i:",i)
                    ;
  4439                        ;
  4440                        ;	if(entry->ext[0]!=' ')
  4441                        ;	{
  4442                        ;		entry->plongfileName[i] = '.';
  4443                        ;		memcpy(&(entry->plongfileName[i+1]),entr
                    y->ext,3);
  4444                        ;		for(i=0;i<14;i++)
  4445                        ;		{
  4446                        ;			if(entry->plongfileName[i] == ' 
                    ')
  4447                        ;				entry->plongfileName[i] 
                    = 0;
  4448                        ;		}
  4449                        ;	}
  4450                        ;	//entry->plongfileName[8] = '.';
  4451                        ;	//entry->plongfileName[12] = 0;
  4452                        ;
  4453                        ;	//k_debug_strings("k_dos_alloc_short_name:",entr
                    y->plongfileName);
  4454                        ;
  4455                        ;	return entry->plongfileName;
  4456                        ;}
  4457                        ;
  4458                        ;ULONG k_dos_get_name(PFAT16ENTRYLONG entry,LPCHAR
                     pbuffer)
  4459                        ;{
  4460                        ;	ULONG fileOffset = 0L;
  4461                        ;
  4462                        ;	ULONG RootDirSectors;
  4463                        ;	ULONG Cluster2SectorNumber;
  4464                        ;	ULONG ClusterSectorNumber;
  4465                        ;	ULONG ClusterByteNumber = 0;
  4466                        ;
  4467                        ;
  4468                        ;	LFN* plfn = NULL;
  4469                        ;
  4470                        ;	CHAR mbsBuffer[15];
  4471                        ;
  4472                        ;
  4473                        ;	if(!pbuffer)
  4474                        ;		pbuffer = mbsBuffer;
  4475                        ;
  4476                        ;    switch(entry->filename[0])
  Mon Sep 27 2021  9:39                                                Page 89


  4477                        ;	{
  4478                        ;    case 0x00:
  4479                        ;    	//k_debug_string("Unused\r\n");
  4480                        ;        return 0; // unused entry
  4481                        ;    case 0xE5:
  4482                        ;
  4483                        ;        return 0;
  4484                        ;    case 0x05:
  4485                        ;    	//k_debug_string("File 0x05:");
  4486                        ;    	//k_debug_nstring(entry->filename+1,7);
  4487                        ;    	//k_debug_nstring(entry->ext,3);
  4488                        ;    	//k_debug_string("\r\n");
  4489                        ;        //printf("File starting with 0xE5: [%c%.7
                    s.%.3s]\n", 0xE5, entry->filename+1, entry->ext);
  4490                        ;        break;
  4491                        ;    case 0x2E:
  4492                        ;    	//k_debug_string("DIR:");
  4493                        ;    	//k_debug_nstring(entry->filename+1,8);
  4494                        ;    	//k_debug_nstring(entry->ext,3);
  4495                        ;    	//k_debug_string("\r\n");
  4496                        ;        //printf("Directory: [%.8s.%.3s]\n", entr
                    y->filename, entry->ext);
  4497                        ;    	k_dos_alloc_short_name(entry);
  4498                        ;        break;
  4499                        ;    default:
  4500                        ;    	if(entry->attributes == 0x10)
  4501                        ;    	{
  4502                        ;			k_debug_string("DIRECTORY:");
  4503                        ;			k_debug_nstring(entry->filename,
                    8);
  4504                        ;			k_debug_nstring(entry->ext,3);
  4505                        ;			k_debug_string("\r\n");
  4506                        ;
  4507                        ;			k_dos_alloc_short_name(entry);
  4508                        ;
  4509                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  4510                        ;
  4511                        ;    	}
  4512                        ;    	else if(entry->attributes == 0x08)
  4513                        ;		{
  4514                        ;			k_debug_string("VOLUME NAME:");
  4515                        ;			k_debug_nstring(entry->filename,
                    8);
  4516                        ;			k_debug_nstring(entry->ext,3);
  4517                        ;			k_debug_string("\r\n");
  4518                        ;
  4519                        ;			k_dos_alloc_short_name(entry);
  4520                        ;
  4521                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  4522                        ;
  4523                        ;		}
  4524                        ;    	else if(entry->attributes == 0x0F)
  4525                        ;		{
  4526                        ;			k_debug_string("LONG NAME:");
  4527                        ;			//k_debug_nstring(entry->filenam
                    e,8);
  Mon Sep 27 2021  9:39                                                Page 90


  4528                        ;			//k_debug_nstring(entry->ext,3);
  4529                        ;
  4530                        ;			plfn = (LFN*)entry;
  4531                        ;
  4532                        ;			//k_debug_byte_array("LONG BYTES
                    :",(BYTE FAR *)plfn,32);
  4533                        ;
  4534                        ;
  4535                        ;			if(plfn->sequenceNo & 0x40)
  4536                        ;			{
  4537                        ;				entry->plongfileName = (
                    LPVOID)0xffffffff;
  4538                        ;				longnamecount = (plfn->s
                    equenceNo - 0x41);
  4539                        ;				//k_debug_integer("longn
                    amecount:",longnamecount);
  4540                        ;				k_debug_string("SEQ:0x40
                    ");
  4541                        ;
  4542                        ;				memset(longnameBuffer,0,
                    255);
  4543                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13]     ,k_wcstombs(plfn->fileName_Part1,mbsB
                    uffer,5),5);
  4544                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 5] ,k_wcstombs(plfn->fileName_Part2,mbsB
                    uffer,6),6);
  4545                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 11],k_wcstombs(plfn->fileName_Part3,mbsB
                    uffer,2),2);
  4546                        ;			}
  4547                        ;			else
  4548                        ;			{
  4549                        ;				longnamecount = plfn->se
                    quenceNo - 1 ;
  4550                        ;				//k_debug_integer("longn
                    amecount:",longnamecount);
  4551                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13]     ,k_wcstombs(plfn->fileName_Part1,mbsB
                    uffer,5),5);
  4552                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 5] ,k_wcstombs(plfn->fileName_Part2,mbsB
                    uffer,6),6);
  4553                        ;				memcpy(&longnameBuffer[l
                    ongnamecount * 13 + 11],k_wcstombs(plfn->fileName_Part3,mbsB
                    uffer,2),2);
  4554                        ;
  4555                        ;				if(plfn->sequenceNo == 1
                    )
  4556                        ;				{
  4557                        ;					//k_debug_string
                    ("Unicodename:");
  4558                        ;
  4559                        ;					entry->plongfile
                    Name = k_mem_allocate_heap(strlen(longnameBuffer) + 1);
  4560                        ;					strcpy(entry->pl
                    ongfileName,(LPCSTR)longnameBuffer);
  4561                        ;
  Mon Sep 27 2021  9:39                                                Page 91


  4562                        ;					k_debug_string(e
                    ntry->plongfileName);
  4563                        ;				}
  4564                        ;			}
  4565                        ;
  4566                        ;			k_debug_string("\r\n");
  4567                        ;		}
  4568                        ;    	else
  4569                        ;    	{
  4570                        ;    		if(k_user_IsOSDebug())
  4571                        ;    		{
  4572                        ;				k_debug_string("SHORT NA
                    ME:");
  4573                        ;				k_debug_nstring(entry->f
                    ilename,8);
  4574                        ;				k_debug_nstring(entry->e
                    xt,3);
  4575                        ;				k_debug_long(" SIZE:",en
                    try->file_size);
  4576                        ;    		}
  4577                        ;			//k_debug_hex("\tAttributes:",en
                    try->attributes);
  4578                        ;			//k_debug_integer("\tStart Clust
                    er:",entry->starting_cluster);
  4579                        ;			k_dos_alloc_short_name(entry);
  4580                        ;
  4581                        ;			//k_debug_strings("plongfileName
                    :",entry->plongfileName);
  4582                        ;
  4583                        ;			ClusterByteNumber = getClusterLo
                    cationByIndex(entry->starting_cluster);
  4584                        ;    	}
  4585                        ;    }
  4586                        ;
  4587                        ;    return ClusterByteNumber;
  4588                        ;}
  4589                        ;
  4590                        ;void k_dos_deallocate_long_entry(LPCSTR name,LPVO
                    ID pdata)
  4591                        ;{
  4592                        ;	PFAT16ENTRYLONG entry = (PFAT16ENTRYLONG)pdata;
  4593                        ;
  4594                        ;	//k_debug_strings("k_dos_deallocate_long_entry n
                    ame:",(LPSTR)name);
  4595                        ;
  4596                        ;	if(entry)
  4597                        ;	{
  4598                        ;		//k_debug_pointer("k_dos_deallocate_long
                    _entry ptr:",(LPSTR)entry->plongfileName);
  4599                        ;		if(entry->plongfileName)
  4600                        ;			k_mem_deallocate_heap(entry->plo
                    ngfileName);
  4601                        ;
  4602                        ;		k_mem_deallocate_heap(entry);
  4603                        ;	}
  4604                        ;
  4605                        ;	//k_debug_string("k_dos_deallocate_long_exit\r\n
                    ");
  Mon Sep 27 2021  9:39                                                Page 92


  4606                        ;}
  4607                        ;
  4608                        ;UINT k_dos_read_file(PFXDOSDEVICE pfxdosDevice,LP
                    CSTR fileName)
  4609                        ;{
  4610                        ;	UINT fileSize = 0;
  4611                        ;	ULONG next = 0;
  4612                        ;	UINT pageSize = 0;
  4613                        ;	PFXNODELIST fileList = NULL;
  4614                        ;	PFXNODE file = NULL;
  4615                        ;	PBYTE buffer = NULL;
  4616                        ;
  4617                        ;	PFAT16ENTRYLONG pentry = NULL;
  4618                        ;
  4619                        ;
  4620                        ;	fileList = k_read_dos_directory(pfxdosDevice);
  4621                        ;	if(fileList)
  4622                        ;	{
  4623                        ;
  4624                        ;		file = k_nodelist_foreach_until_listdata
                    (fileList,(LPVOID)fileName,k_dos_foreach_file);
  4625                        ;		if(file)
  4626                        ;		{
  4627                        ;			pentry = ((PFAT16ENTRYLONG)file-
                    >data);
  4628                        ;
  4629                        ;			k_debug_strings("k_dos_read_file
                     MATCH:file:",pentry->plongfileName);
  4630                        ;			fileSize = pentry->file_size;
  4631                        ;
  4632                        ;			pageSize = 512 * (fileSize/512 +
                     1);
  4633                        ;			buffer = k_mem_allocate_heap(pag
                    eSize);
  4634                        ;
  4635                        ;			k_debug_integer("pentry->startin
                    g_cluster:",pentry->starting_cluster);
  4636                        ;
  4637                        ;			next = pfxdosDevice->fileAllocat
                    ionTable[pentry->starting_cluster];
  4638                        ;
  4639                        ;			k_debug_integer("pentry->next:",
                    next);
  4640                        ;			//k_debug_integer("pfxdosDevice-
                    >fileAllocationTable[next]:",pfxdosDevice->fileAllocationTab
                    le[next]);
  4641                        ;
  4642                        ;			while(next!=65528L && next!=0L &
                    & next!=65535L)
  4643                        ;			{
  4644                        ;
  4645                        ;				k_debug_integer("k_dos_r
                    ead_file:next1:",next);
  4646                        ;
  4647                        ;				if(next!=65528L && next!
                    =0L && next!=65535L)
  4648                        ;				{
  4649                        ;					k_debug_integer(
  Mon Sep 27 2021  9:39                                                Page 93


                    "k_dos_read_file:pageSize:",pageSize);
  4650                        ;
  4651                        ;
  4652                        ;					//readClusterToM
                    emory(getClusterLocationByIndex(next) + pfxdosDevice->bsOffs
                    et,pfxdosDevice->sectors_per_cluster,buffer,pentry->file_siz
                    e);
  4653                        ;					//readSDSector(o
                    ffset + (pfxdosDevice->sectors_per_cluster * 1) + read,buffe
                    r);
  4654                        ;
  4655                        ;					//k_debug_long("
                    k_dos_read_file:getClusterLocationByIndex:0x210000:",0x21000
                    0);
  4656                        ;
  4657                        ;
  4658                        ;					k_debug_long("k_
                    dos_read_file:getDeviceClusterLocationByIndex1:",getDeviceCl
                    usterLocationByIndex(pfxdosDevice,next));
  4659                        ;					k_debug_long("k_
                    dos_read_file:getDeviceClusterLocationByIndex2:",getDeviceCl
                    usterLocationByIndex(pfxdosDevice,next) + pfxdosDevice->bsOf
                    fset);
  4660                        ;
  4661                        ;					//k_debug_long("
                    k_dos_read_file:getClusterLocationByIndex3:",getClusterLocat
                    ionByIndex(next) + pfxdosDevice->bsOffset);
  4662                        ;
  4663                        ;
  4664                        ;					//pfxdosDevice->
                    pfReader((getClusterLocationByIndex(next)+ pfxdosDevice->bsO
                    ffset) * 512,buffer);
  4665                        ;					//pfxdosDevice->
                    pfReader(getDeviceClusterLocationByIndex(pfxdosDevice,next) 
                    / 512 ,buffer);
  4666                        ;
  4667                        ;					pfxdosDevice->pf
                    Reader(pfxdosDevice->firstDataSector + (next + pfxdosDevice-
                    >sectors_per_cluster) ,buffer);
  4668                        ;
  4669                        ;
  4670                        ;					k_debug_byte_arr
                    ay("k_dos_read_file:buffer:\r\n",buffer,512);
  4671                        ;
  4672                        ;					next = pfxdosDev
                    ice->fileAllocationTable[next];
  4673                        ;
  4674                        ;					k_debug_integer(
                    "k_dos_read_file:next2:",next);
  4675                        ;					k_debug_long("k_
                    dos_read_file:next512:",next * 512);
  4676                        ;				}
  4677                        ;			}
  4678                        ;
  4679                        ;			k_mem_deallocate_heap(buffer);
  4680                        ;		}
  4681                        ;
  4682                        ;		k_nodelist_deallocate_list(fileList);
  Mon Sep 27 2021  9:39                                                Page 94


  4683                        ;	}
  4684                        ;
  4685                        ;
  4686                        ;	k_debug_integer("k_dos_read_file exit:fileSize:"
                    ,fileSize);
  4687                        ;
  4688                        ;	return fileSize;
  4689                        ;}
  4690                        ;
  4691                        ;PFXNODELIST k_read_dos_directory(PFXDOSDEVICE pfx
                    dosDevice)
  4692                        ;{
  4693                        ;	ULONG x = 0;
  4694                        ;	ULONG i = 0;
  4695                        ;	ULONG check = 0L;
  4696                        ;	ULONG fileOffset;
  4697                        ;	//PFAT16ENTRY     pentry     = NULL;
  4698                        ;	PFAT16ENTRYLONG  pentrylong = NULL;
  4699                        ;
  4700                        ;	PFXNODELIST plist   = NULL;
  4701                        ;
  4702                        ;	unsigned long rootDirSectors = pfxdosDevice->roo
                    tDirSectors;
  4703                        ;
  4704                        ;	k_debug_nstrings("k_read_dos_directory volume:",
                    pfxdosDevice->root_volume_name,11);
  4705                        ;
  4706                        ;	if(pfxdosDevice->initialized)
  4707                        ;	{
  4708                        ;		plist = k_nodelist_allocate_list("curren
                    tDirectory",k_dos_deallocate_long_entry);
  4709                        ;		if(plist)
  4710                        ;		{
  4711                        ;			for(i=0; i<pfxdosDevice->rootEnt
                    riesPerPage; i++)
  4712                        ;			{
  4713                        ;				if(pfxdosDevice->pfReade
                    r(rootDirSectors,sectorBuffer) == 0)
  4714                        ;				{
  4715                        ;					for(x=0; x<pfxdo
                    sDevice->rootEntriesPerPage; x++)
  4716                        ;					{
  4717                        ;						pentrylo
                    ng = (PFAT16ENTRYLONG)k_mem_allocate_heap(sizeof(FAT16ENTRYL
                    ONG));
  4718                        ;						if(pentr
                    ylong)
  4719                        ;						{
  4720                        ;							
                    memset(pentrylong,0,sizeof(FAT16ENTRYLONG));
  4721                        ;							
                    memcpy(pentrylong,(PFAT16ENTRY)&sectorBuffer[x * sizeof(FAT1
                    6ENTRY)],sizeof(FAT16ENTRY));
  4722                        ;							
                    pentrylong->plongfileName = NULL;
  4723                        ;
  4724                        ;							
                    check = k_dos_get_name(pentrylong,NULL);
  Mon Sep 27 2021  9:39                                                Page 95


  4725                        ;
  4726                        ;							
                    if(check > 0 && k_user_IsOSDebug())
  4727                        ;							
                    {
  4728                        ;							
                    	k_debug_long("k_dos_get_name check:",check);
  4729                        ;							
                    	//fileOffset = ((pentrylong->starting_cluster - 2) * 16)
                     + (8 + (2 * 240)  + ( ((512 * 32) + (512 - 1)) / 512 ));
  4730                        ;							
                    	//k_debug_long("fileOffset:",fileOffset);
  4731                        ;							
                    }
  4732                        ;							
                    //print_file_info((PFAT16ENTRY)pentrylong);
  4733                        ;
  4734                        ;							
                    if(pentrylong->plongfileName && pentrylong->plongfileName!=(
                    LPSTR)0xffffffff)
  4735                        ;							
                    {
  4736                        ;							
                    	k_nodelist_addtolist(plist,PFXNODE_FILE_PATH_TYPE,pentry
                    long->plongfileName,pentrylong);
  4737                        ;							
                    	//k_debug_strings("k_read_dos_directory dealloc pentrylo
                    ng1:",pentrylong);
  4738                        ;							
                    	//k_debug_pointer("k_read_dos_directory dealloc pentrylo
                    ng1:",pentrylong);
  4739                        ;							
                    	//k_mem_deallocate_heap(pentrylong->plongfileName);
  4740                        ;							
                    	//pentrylong->plongfileName = NULL;
  4741                        ;							
                    	//k_mem_deallocate_heap(pentrylong);
  4742                        ;							
                    }
  4743                        ;							
                    else
  4744                        ;							
                    {
  4745                        ;							
                    	//k_debug_pointer("k_read_dos_directory dealloc pentrylo
                    ng2:",pentrylong);
  4746                        ;							
                    	k_mem_deallocate_heap(pentrylong);
  4747                        ;							
                    }
  4748                        ;						}
  4749                        ;					}
  4750                        ;				}
  4751                        ;				rootDirSectors+=512;
  4752                        ;			}
  4753                        ;		}
  4754                        ;	}
  4755                        ;
  Mon Sep 27 2021  9:39                                                Page 96


  4756                        ;
  4757                        ;
  4758                        ;	return plist;
  4759                        ;}
  4760                        ;
  4761                        ;ULONG getDeviceClusterLocationByIndex(PFXDOSDEVIC
                    E pfxdosDevice,ULONG starting_cluster)
  4762                        ;{
  4763                        ;	ULONG rootDirSectors = 0L;
  4764                        ;	ULONG cluster2SectorNumber = 0L;
  4765                        ;	ULONG clusterSectorNumber = 0L;
  4766                        ;	ULONG clusterByteNumber = 0L;
  4767                        ;
  4768                        ;	ULONG firstDataSector = 0L;
  4769                        ;
  4770                        ;
  4771                        ;
  4772                        ;
  4773                        ;
  4774                        ;	firstDataSector = pfxdosDevice->bootSector.reser
                    ved_sector_count + (pfxdosDevice->bootSector.fat_table_count
                     * 512) + pfxdosDevice->rootDirSectors;
  4775                        ;
  4776                        ;	k_debug_long("firstDataSector:",firstDataSector)
                    ;
  4777                        ;
  4778                        ;	clusterSectorNumber = ((starting_cluster - 2) * 
                    pfxdosDevice->sectors_per_cluster) + firstDataSector;
  4779                        ;
  4780                        ;	k_debug_long("Cluster Offset Calculated:",cluste
                    rSectorNumber);
  4781                        ;
  4782                        ;	k_debug_long("FAT Entry:",((UINT*)(&pfxdosDevice
                    ->fileAllocationTable))[starting_cluster]);
  4783                        ;
  4784                        ;	rootDirSectors = (pfxdosDevice->bootSector.reser
                    ved_sector_count * pfxdosDevice->root_entry_count)  / pfxdos
                    Device->bootSector.bytes_per_sector;
  4785                        ;
  4786                        ;
  4787                        ;	cluster2SectorNumber =  8 + (2 * 240) + rootDirS
                    ectors;
  4788                        ;	clusterSectorNumber =  ((starting_cluster - 2) *
                     16) + cluster2SectorNumber;
  4789                        ;	k_debug_long("clusterSectorNumber:",clusterSecto
                    rNumber);
  4790                        ;
  4791                        ;	clusterByteNumber = clusterSectorNumber * 512;
  4792                        ;
  4793                        ;	return clusterByteNumber;
  4794                        ;}
  4795                        ;
  4796                        ;
  4797                        ;ULONG getClusterLocationByIndex(ULONG starting_cl
                    uster)
  4798                        ;{
  4799                        ;	ULONG rootDirSectors;
  4800                        ;	ULONG cluster2SectorNumber;
  Mon Sep 27 2021  9:39                                                Page 97


  4801                        ;	ULONG clusterSectorNumber;
  4802                        ;	ULONG clusterByteNumber = 0;
  4803                        ;
  4804                        ;	rootDirSectors = (32 * 512)  / 512;
  4805                        ;
  4806                        ;	cluster2SectorNumber = 8 + (2 * 240) + rootDirSe
                    ctors;
  4807                        ;	clusterSectorNumber =  ((starting_cluster - 2) *
                     16) + cluster2SectorNumber;
  4808                        ;	clusterByteNumber = clusterSectorNumber * 512;
  4809                        ;
  4810                        ;	return clusterByteNumber;
  4811                        ;}
  4812                        ;
  4813                        ;
  4814                        ;VOID k_GetDirectory(VOID)
  4815                        ;{
  4816                        ;	PFXZEROPAGE zp = k_getZeroPage();
  4817                        ;
  4818                        ;
  4819                        ;}
  4820                        ;*/
  4821                        ;
  4822                        ;VOID k_dos_deallocate_fileinfo(LPCSTR name,LPVOID
                     pdata)
  4823                        ;{
  4824                        	.line	1220
  4825                        	.line	1221
  4826                        	FXDOS
  4827                        	xdef	~~k_dos_deallocate_fileinfo
  4828                        	func
  4829                        	.function	1221
  4830                        ~~k_dos_deallocate_fileinfo:
  4831                        	longa	on
  4832                        	longi	on
  4833 08:9F10: 3B           	tsc
  4834 08:9F11: 38           	sec
  4835 08:9F12: E9 00 00     	sbc	#L78
  4836 08:9F15: 1B           	tcs
  4837 08:9F16: 0B           	phd
  4838 08:9F17: 5B           	tcd
  4839             00000004   name_0	set	4
  4840             00000008   pdata_0	set	8
  4841                        	.block	1221
  4842                        ;
  4843                        ;}
  4844                        	.sym	name,4,142,6,32
  4845                        	.sym	pdata,8,129,6,32
  4846                        	.line	1223
  4847                        L81:
  4848 08:9F18: A5 02        	lda	<L78+2
  4849 08:9F1A: 85 0A        	sta	<L78+2+8
  4850 08:9F1C: A5 01        	lda	<L78+1
  4851 08:9F1E: 85 09        	sta	<L78+1+8
  4852 08:9F20: 2B           	pld
  4853 08:9F21: 3B           	tsc
  4854 08:9F22: 18           	clc
  4855 08:9F23: 69 08 00     	adc	#L78+8
  Mon Sep 27 2021  9:39                                                Page 98


  4856 08:9F26: 1B           	tcs
  4857 08:9F27: 6B           	rtl
  4858                        	.endblock	1223
  4859             00000000   L78	equ	0
  4860             00000001   L79	equ	1
  4861 08:9F28:              	ends
  4862                        	efunc
  4863                        	.endfunc	1223,1,0
  4864                        	.line	1223
  4865                        ;
  4866                        ;PFXNODELIST k_dos_findfiles_to_nodes(LPCSTR path)
  4867                        ;{
  4868                        	.line	1225
  4869                        	.line	1226
  4870                        	FXDOS
  4871                        	xdef	~~k_dos_findfiles_to_nodes
  4872                        	func
  4873                        	.function	1226
  4874                        ~~k_dos_findfiles_to_nodes:
  4875                        	longa	on
  4876                        	longi	on
  4877 08:9F28: 3B           	tsc
  4878 08:9F29: 38           	sec
  4879 08:9F2A: E9 1E 00     	sbc	#L82
  4880 08:9F2D: 1B           	tcs
  4881 08:9F2E: 0B           	phd
  4882 08:9F2F: 5B           	tcd
  4883             00000004   path_0	set	4
  4884                        	.block	1226
  4885                        ;	DIR *dir;
  4886                        ;	FATFS *fs = NULL;
  4887                        ;	FIL *f = NULL;
  4888                        ;	FILINFO *fileInfo;
  4889                        ;	FRESULT fr = 0;
  4890                        ;
  4891                        ;	LPCSTR drive = NULL;
  4892                        ;
  4893                        ;	PFXNODELIST pcurrentDirectory = NULL;
  4894                        ;
  4895                        ;
  4896                        ;	drive = k_string_copy_to_delimiter(path,':');
  4897             00000000   dir_1	set	0
  4898             00000004   fs_1	set	4
  4899             00000008   f_1	set	8
  4900             0000000C   fileInfo_1	set	12
  4901             00000010   fr_1	set	16
  4902             00000012   drive_1	set	18
  4903             00000016   pcurrentDirectory_1	set	22
  4904                        	.sym	dir,0,138,1,32,87
  4905                        	.sym	fs,4,138,1,32,84
  4906                        	.sym	f,8,138,1,32,86
  4907                        	.sym	fileInfo,12,138,1,32,88
  4908                        	.sym	fr,16,5,1,16
  4909                        	.sym	drive,18,142,1,32
  4910                        	.sym	pcurrentDirectory,22,138,1,32,6
  4911                        	.sym	path,4,142,6,32
  4912 08:9F30: 64 09        	stz	<L83+fs_1
  4913 08:9F32: 64 0B        	stz	<L83+fs_1+2
  Mon Sep 27 2021  9:39                                                Page 99


  4914 08:9F34: 64 0D        	stz	<L83+f_1
  4915 08:9F36: 64 0F        	stz	<L83+f_1+2
  4916 08:9F38: 64 15        	stz	<L83+fr_1
  4917 08:9F3A: 64 17        	stz	<L83+drive_1
  4918 08:9F3C: 64 19        	stz	<L83+drive_1+2
  4919 08:9F3E: 64 1B        	stz	<L83+pcurrentDirectory_1
  4920 08:9F40: 64 1D        	stz	<L83+pcurrentDirectory_1+2
  4921                        	.line	1238
  4922 08:9F42: F4 3A 00     	pea	#<$3a
  4923 08:9F45: D4 24        	pei	<L82+path_0+2
  4924 08:9F47: D4 22        	pei	<L82+path_0
  4925 08:9F49: 22 xx xx xx  	jsl	~~k_string_copy_to_delimiter
  4926 08:9F4D: 85 17        	sta	<L83+drive_1
  4927 08:9F4F: 86 19        	stx	<L83+drive_1+2
  4928                        ;
  4929                        ;	pcurrentDirectory = k_nodelist_allocate_list("cu
                    rrentDirectory",k_dos_deallocate_fileinfo);
  4930                        	.line	1240
  4931 08:9F51: F4 08 00     	pea	#^~~k_dos_deallocate_fileinfo
  4932 08:9F54: F4 10 9F     	pea	#<~~k_dos_deallocate_fileinfo
  4933 08:9F57: F4 xx xx     	pea	#^L73
  4934 08:9F5A: F4 xx xx     	pea	#<L73
  4935 08:9F5D: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  4936 08:9F61: 85 1B        	sta	<L83+pcurrentDirectory_1
  4937 08:9F63: 86 1D        	stx	<L83+pcurrentDirectory_1+2
  4938                        ;	if(pcurrentDirectory)
  4939                        	.line	1241
  4940                        ;	{
  4941 08:9F65: A5 1B        	lda	<L83+pcurrentDirectory_1
  4942 08:9F67: 05 1D        	ora	<L83+pcurrentDirectory_1+2
  4943 08:9F69: D0 03        	bne	L85
  4944 08:9F6B: 82 46 01     	brl	L10050
  4945                        L85:
  4946                        	.line	1242
  4947                        ;		dir = k_mem_allocate_heap(sizeof(DIR));
  4948                        	.line	1243
  4949 08:9F6E: F4 00 00     	pea	#^$34
  4950 08:9F71: F4 34 00     	pea	#<$34
  4951 08:9F74: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  4952 08:9F78: 85 05        	sta	<L83+dir_1
  4953 08:9F7A: 86 07        	stx	<L83+dir_1+2
  4954                        ;		fs = k_mem_allocate_heap(sizeof(FATFS));
  4955                        	.line	1244
  4956 08:9F7C: F4 00 00     	pea	#^$233
  4957 08:9F7F: F4 33 02     	pea	#<$233
  4958 08:9F82: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  4959 08:9F86: 85 09        	sta	<L83+fs_1
  4960 08:9F88: 86 0B        	stx	<L83+fs_1+2
  4961                        ;
  4962                        ;		f_mount(NULL, drive,1); // unmount for s
                    afety
  4963                        	.line	1246
  4964 08:9F8A: F4 01 00     	pea	#<$1
  4965 08:9F8D: D4 19        	pei	<L83+drive_1+2
  4966 08:9F8F: D4 17        	pei	<L83+drive_1
  4967 08:9F91: F4 00 00     	pea	#^$0
  4968 08:9F94: F4 00 00     	pea	#<$0
  4969 08:9F97: 22 xx xx xx  	jsl	~~f_mount
  Mon Sep 27 2021  9:39                                                Page 100


  4970                        ;		f_mount(fs, drive,1);
  4971                        	.line	1247
  4972 08:9F9B: F4 01 00     	pea	#<$1
  4973 08:9F9E: D4 19        	pei	<L83+drive_1+2
  4974 08:9FA0: D4 17        	pei	<L83+drive_1
  4975 08:9FA2: D4 0B        	pei	<L83+fs_1+2
  4976 08:9FA4: D4 09        	pei	<L83+fs_1
  4977 08:9FA6: 22 xx xx xx  	jsl	~~f_mount
  4978                        ;
  4979                        ;		fr = f_opendir (dir,path);
  4980                        	.line	1249
  4981 08:9FAA: D4 24        	pei	<L82+path_0+2
  4982 08:9FAC: D4 22        	pei	<L82+path_0
  4983 08:9FAE: D4 07        	pei	<L83+dir_1+2
  4984 08:9FB0: D4 05        	pei	<L83+dir_1
  4985 08:9FB2: 22 xx xx xx  	jsl	~~f_opendir
  4986 08:9FB6: 85 15        	sta	<L83+fr_1
  4987                        ;		if(fr == FR_OK)
  4988                        	.line	1250
  4989                        ;		{
  4990 08:9FB8: A5 15        	lda	<L83+fr_1
  4991 08:9FBA: F0 03        	beq	L86
  4992 08:9FBC: 82 E5 00     	brl	L10051
  4993                        L86:
  4994                        	.line	1251
  4995                        ;			fileInfo = k_mem_allocate_heap(s
                    izeof(FILINFO));
  4996                        	.line	1252
  4997 08:9FBF: F4 00 00     	pea	#^$116
  4998 08:9FC2: F4 16 01     	pea	#<$116
  4999 08:9FC5: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5000 08:9FC9: 85 11        	sta	<L83+fileInfo_1
  5001 08:9FCB: 86 13        	stx	<L83+fileInfo_1+2
  5002                        ;			if(fileInfo)
  5003                        	.line	1253
  5004                        ;			{
  5005 08:9FCD: A5 11        	lda	<L83+fileInfo_1
  5006 08:9FCF: 05 13        	ora	<L83+fileInfo_1+2
  5007 08:9FD1: D0 03        	bne	L87
  5008 08:9FD3: 82 C6 00     	brl	L10052
  5009                        L87:
  5010                        	.line	1254
  5011                        ;				fr = f_findfirst(dir,fil
                    eInfo,path, "*");
  5012                        	.line	1255
  5013 08:9FD6: F4 xx xx     	pea	#^L73+17
  5014 08:9FD9: F4 xx xx     	pea	#<L73+17
  5015 08:9FDC: D4 24        	pei	<L82+path_0+2
  5016 08:9FDE: D4 22        	pei	<L82+path_0
  5017 08:9FE0: D4 13        	pei	<L83+fileInfo_1+2
  5018 08:9FE2: D4 11        	pei	<L83+fileInfo_1
  5019 08:9FE4: D4 07        	pei	<L83+dir_1+2
  5020 08:9FE6: D4 05        	pei	<L83+dir_1
  5021 08:9FE8: 22 xx xx xx  	jsl	~~f_findfirst
  5022 08:9FEC: 85 15        	sta	<L83+fr_1
  5023                        ;				if(fr == FR_OK)
  5024                        	.line	1256
  5025                        ;				{
  Mon Sep 27 2021  9:39                                                Page 101


  5026 08:9FEE: A5 15        	lda	<L83+fr_1
  5027 08:9FF0: F0 03        	beq	L88
  5028 08:9FF2: 82 A7 00     	brl	L10053
  5029                        L88:
  5030                        	.line	1257
  5031                        ;					k_nodelist_addto
                    list(pcurrentDirectory,PFXNODE_FILE_PATH_TYPE,(LPCSTR)fileIn
                    fo->fname,fileInfo);
  5032                        	.line	1258
  5033 08:9FF5: D4 13        	pei	<L83+fileInfo_1+2
  5034 08:9FF7: D4 11        	pei	<L83+fileInfo_1
  5035 08:9FF9: 18           	clc
  5036 08:9FFA: A9 16 00     	lda	#$16
  5037 08:9FFD: 65 11        	adc	<L83+fileInfo_1
  5038 08:9FFF: 85 01        	sta	<R0
  5039 08:A001: A9 00 00     	lda	#$0
  5040 08:A004: 65 13        	adc	<L83+fileInfo_1+2
  5041 08:A006: 85 03        	sta	<R0+2
  5042 08:A008: D4 03        	pei	<R0+2
  5043 08:A00A: D4 01        	pei	<R0
  5044 08:A00C: F4 A1 00     	pea	#<$a1
  5045 08:A00F: D4 1D        	pei	<L83+pcurrentDirectory_1+2
  5046 08:A011: D4 1B        	pei	<L83+pcurrentDirectory_1
  5047 08:A013: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  5048                        ;					do
  5049                        	.line	1259
  5050                        L10056:
  5051                        ;					{
  5052                        	.line	1260
  5053                        ;						fileInfo
                     = k_mem_allocate_heap(sizeof(FILINFO));
  5054                        	.line	1261
  5055 08:A017: F4 00 00     	pea	#^$116
  5056 08:A01A: F4 16 01     	pea	#<$116
  5057 08:A01D: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5058 08:A021: 85 11        	sta	<L83+fileInfo_1
  5059 08:A023: 86 13        	stx	<L83+fileInfo_1+2
  5060                        ;						if(fileI
                    nfo!=NULL)
  5061                        	.line	1262
  5062                        ;						{
  5063 08:A025: A5 11        	lda	<L83+fileInfo_1
  5064 08:A027: 05 13        	ora	<L83+fileInfo_1+2
  5065 08:A029: D0 03        	bne	L89
  5066 08:A02B: 82 5A 00     	brl	L10057
  5067                        L89:
  5068                        	.line	1263
  5069                        ;							
                    fr = f_findnext(dir,fileInfo);
  5070                        	.line	1264
  5071 08:A02E: D4 13        	pei	<L83+fileInfo_1+2
  5072 08:A030: D4 11        	pei	<L83+fileInfo_1
  5073 08:A032: D4 07        	pei	<L83+dir_1+2
  5074 08:A034: D4 05        	pei	<L83+dir_1
  5075 08:A036: 22 xx xx xx  	jsl	~~f_findnext
  5076 08:A03A: 85 15        	sta	<L83+fr_1
  5077                        ;							
                    if(fr != FR_OK)
  Mon Sep 27 2021  9:39                                                Page 102


  5078                        	.line	1265
  5079                        ;							
                    {
  5080 08:A03C: A5 15        	lda	<L83+fr_1
  5081 08:A03E: D0 03        	bne	L90
  5082 08:A040: 82 0B 00     	brl	L10058
  5083                        L90:
  5084                        	.line	1266
  5085                        ;							
                    	k_mem_deallocate_heap(fileInfo);
  5086                        	.line	1267
  5087 08:A043: D4 13        	pei	<L83+fileInfo_1+2
  5088 08:A045: D4 11        	pei	<L83+fileInfo_1
  5089 08:A047: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5090                        ;							
                    }
  5091                        	.line	1268
  5092                        ;							
                    else
  5093 08:A04B: 82 3A 00     	brl	L10059
  5094                        L10058:
  5095                        ;							
                    {
  5096                        	.line	1270
  5097                        ;							
                    	if(fileInfo->fname[0]!=0)
  5098                        	.line	1271
  5099                        ;							
                    		k_nodelist_addtolist(pcurrentDirectory,PFXNODE_F
                    ILE_PATH_TYPE,(LPCSTR)fileInfo->fname,fileInfo);
  5100 08:A04E: A0 16 00     	ldy	#$16
  5101 08:A051: B7 11        	lda	[<L83+fileInfo_1],Y
  5102 08:A053: 29 FF 00     	and	#$ff
  5103 08:A056: D0 03        	bne	L91
  5104 08:A058: 82 25 00     	brl	L10060
  5105                        L91:
  5106                        	.line	1272
  5107 08:A05B: D4 13        	pei	<L83+fileInfo_1+2
  5108 08:A05D: D4 11        	pei	<L83+fileInfo_1
  5109 08:A05F: 18           	clc
  5110 08:A060: A9 16 00     	lda	#$16
  5111 08:A063: 65 11        	adc	<L83+fileInfo_1
  5112 08:A065: 85 01        	sta	<R0
  5113 08:A067: A9 00 00     	lda	#$0
  5114 08:A06A: 65 13        	adc	<L83+fileInfo_1+2
  5115 08:A06C: 85 03        	sta	<R0+2
  5116 08:A06E: D4 03        	pei	<R0+2
  5117 08:A070: D4 01        	pei	<R0
  5118 08:A072: F4 A1 00     	pea	#<$a1
  5119 08:A075: D4 1D        	pei	<L83+pcurrentDirectory_1+2
  5120 08:A077: D4 1B        	pei	<L83+pcurrentDirectory_1
  5121 08:A079: 22 xx xx xx  	jsl	~~k_nodelist_addtolist
  5122                        ;							
                    	else
  5123 08:A07D: 82 08 00     	brl	L10061
  5124                        L10060:
  5125                        ;							
                    		k_mem_deallocate_heap(fileInfo);
  Mon Sep 27 2021  9:39                                                Page 103


  5126                        	.line	1274
  5127 08:A080: D4 13        	pei	<L83+fileInfo_1+2
  5128 08:A082: D4 11        	pei	<L83+fileInfo_1
  5129 08:A084: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5130                        L10061:
  5131                        ;							
                    }
  5132                        	.line	1275
  5133                        L10059:
  5134                        ;						}
  5135                        	.line	1276
  5136                        ;					}
  5137                        L10057:
  5138                        	.line	1277
  5139                        ;					while((fr == FR_
                    OK) && (fileInfo->fname[0]));
  5140                        L10054:
  5141 08:A088: A5 15        	lda	<L83+fr_1
  5142 08:A08A: F0 03        	beq	L93
  5143 08:A08C: 82 0D 00     	brl	L92
  5144                        L93:
  5145 08:A08F: A0 16 00     	ldy	#$16
  5146 08:A092: B7 11        	lda	[<L83+fileInfo_1],Y
  5147 08:A094: 29 FF 00     	and	#$ff
  5148 08:A097: F0 03        	beq	L94
  5149 08:A099: 82 7B FF     	brl	L10056
  5150                        L94:
  5151                        L92:
  5152                        L10055:
  5153                        ;				}
  5154                        	.line	1279
  5155                        ;			}
  5156                        L10053:
  5157                        	.line	1280
  5158                        ;			f_closedir(dir);
  5159                        L10052:
  5160                        	.line	1281
  5161 08:A09C: D4 07        	pei	<L83+dir_1+2
  5162 08:A09E: D4 05        	pei	<L83+dir_1
  5163 08:A0A0: 22 xx xx xx  	jsl	~~f_closedir
  5164                        ;		}
  5165                        	.line	1282
  5166                        ;
  5167                        ;
  5168                        ;		k_mem_deallocate_heap(fs);
  5169                        L10051:
  5170                        	.line	1285
  5171 08:A0A4: D4 0B        	pei	<L83+fs_1+2
  5172 08:A0A6: D4 09        	pei	<L83+fs_1
  5173 08:A0A8: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5174                        ;		k_mem_deallocate_heap(dir);
  5175                        	.line	1286
  5176 08:A0AC: D4 07        	pei	<L83+dir_1+2
  5177 08:A0AE: D4 05        	pei	<L83+dir_1
  5178 08:A0B0: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5179                        ;
  5180                        ;	}
  5181                        	.line	1288
  Mon Sep 27 2021  9:39                                                Page 104


  5182                        ;
  5183                        ;	return pcurrentDirectory;
  5184                        L10050:
  5185                        	.line	1290
  5186 08:A0B4: A6 1D        	ldx	<L83+pcurrentDirectory_1+2
  5187 08:A0B6: A5 1B        	lda	<L83+pcurrentDirectory_1
  5188                        L95:
  5189 08:A0B8: A8           	tay
  5190 08:A0B9: A5 20        	lda	<L82+2
  5191 08:A0BB: 85 24        	sta	<L82+2+4
  5192 08:A0BD: A5 1F        	lda	<L82+1
  5193 08:A0BF: 85 23        	sta	<L82+1+4
  5194 08:A0C1: 2B           	pld
  5195 08:A0C2: 3B           	tsc
  5196 08:A0C3: 18           	clc
  5197 08:A0C4: 69 22 00     	adc	#L82+4
  5198 08:A0C7: 1B           	tcs
  5199 08:A0C8: 98           	tya
  5200 08:A0C9: 6B           	rtl
  5201                        ;}
  5202                        	.line	1291
  5203                        	.endblock	1291
  5204             0000001E   L82	equ	30
  5205             00000005   L83	equ	5
  5206 08:A0CA:              	ends
  5207                        	efunc
  5208                        	.endfunc	1291,5,30
  5209                        	.line	1291
  5210                        	data
  5211                        L73:
  5212 00:0250: 63 75 72 72  	db	$63,$75,$72,$72,$65,$6E,$74,$44,$69,$72,
                    $65,$63,$74,$6F,$72
       00:0254: 65 6E 74 44 
       00:0258: 69 72 65 63 
       00:025C: 74 6F 72 
  5213 00:025F: 79 00 2A 00  	db	$79,$00,$2A,$00
  5214 00:0263:              	ends
  5215                        ;
  5216                        ;
  5217                        ;FILE k_dos_open(const TCHAR* path, BYTE mode)
  5218                        ;{
  5219                        	.line	1294
  5220                        	.line	1295
  5221                        	FXDOS
  5222                        	xdef	~~k_dos_open
  5223                        	func
  5224                        	.function	1295
  5225                        ~~k_dos_open:
  5226                        	longa	on
  5227                        	longi	on
  5228 08:A0CA: 3B           	tsc
  5229 08:A0CB: 38           	sec
  5230 08:A0CC: E9 0C 00     	sbc	#L97
  5231 08:A0CF: 1B           	tcs
  5232 08:A0D0: 0B           	phd
  5233 08:A0D1: 5B           	tcd
  5234             00000004   path_0	set	4
  5235             00000008   mode_0	set	8
  Mon Sep 27 2021  9:39                                                Page 105


  5236                        	.block	1295
  5237                        ;	LPCSTR drive = NULL;
  5238                        ;
  5239                        ;	FILE file = NULL;
  5240                        ;
  5241                        ;	file = k_mem_allocate_heap(sizeof(FILE_POINTER))
                    ;
  5242             00000000   drive_1	set	0
  5243             00000004   file_1	set	4
  5244                        	.sym	drive,0,142,1,32
  5245                        	.sym	file,4,138,1,32,130
  5246                        	.sym	path,4,142,6,32
  5247                        	.sym	mode,8,14,6,8
  5248 08:A0D2: 64 05        	stz	<L98+drive_1
  5249 08:A0D4: 64 07        	stz	<L98+drive_1+2
  5250 08:A0D6: 64 09        	stz	<L98+file_1
  5251 08:A0D8: 64 0B        	stz	<L98+file_1+2
  5252                        	.line	1300
  5253 08:A0DA: F4 00 00     	pea	#^$e
  5254 08:A0DD: F4 0E 00     	pea	#<$e
  5255 08:A0E0: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5256 08:A0E4: 85 09        	sta	<L98+file_1
  5257 08:A0E6: 86 0B        	stx	<L98+file_1+2
  5258                        ;
  5259                        ;	if(file)
  5260                        	.line	1302
  5261                        ;	{
  5262 08:A0E8: A5 09        	lda	<L98+file_1
  5263 08:A0EA: 05 0B        	ora	<L98+file_1+2
  5264 08:A0EC: D0 03        	bne	L100
  5265 08:A0EE: 82 B4 00     	brl	L10062
  5266                        L100:
  5267                        	.line	1303
  5268                        ;		drive = k_string_copy_to_delimiter(path,
                    ':');
  5269                        	.line	1304
  5270 08:A0F1: F4 3A 00     	pea	#<$3a
  5271 08:A0F4: D4 12        	pei	<L97+path_0+2
  5272 08:A0F6: D4 10        	pei	<L97+path_0
  5273 08:A0F8: 22 xx xx xx  	jsl	~~k_string_copy_to_delimiter
  5274 08:A0FC: 85 05        	sta	<L98+drive_1
  5275 08:A0FE: 86 07        	stx	<L98+drive_1+2
  5276                        ;		if(drive)
  5277                        	.line	1305
  5278                        ;		{
  5279 08:A100: A5 05        	lda	<L98+drive_1
  5280 08:A102: 05 07        	ora	<L98+drive_1+2
  5281 08:A104: D0 03        	bne	L101
  5282 08:A106: 82 9C 00     	brl	L10063
  5283                        L101:
  5284                        	.line	1306
  5285                        ;			file->fs  = k_mem_allocate_heap(
                    sizeof(FATFS));
  5286                        	.line	1307
  5287 08:A109: F4 00 00     	pea	#^$233
  5288 08:A10C: F4 33 02     	pea	#<$233
  5289 08:A10F: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5290 08:A113: 85 01        	sta	<R0
  Mon Sep 27 2021  9:39                                                Page 106


  5291 08:A115: 86 03        	stx	<R0+2
  5292 08:A117: A5 01        	lda	<R0
  5293 08:A119: 87 09        	sta	[<L98+file_1]
  5294 08:A11B: A5 03        	lda	<R0+2
  5295 08:A11D: A0 02 00     	ldy	#$2
  5296 08:A120: 97 09        	sta	[<L98+file_1],Y
  5297                        ;			file->f   = k_mem_allocate_heap(
                    sizeof(FIL));
  5298                        	.line	1308
  5299 08:A122: F4 00 00     	pea	#^$226
  5300 08:A125: F4 26 02     	pea	#<$226
  5301 08:A128: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  5302 08:A12C: 85 01        	sta	<R0
  5303 08:A12E: 86 03        	stx	<R0+2
  5304 08:A130: A5 01        	lda	<R0
  5305 08:A132: A0 08 00     	ldy	#$8
  5306 08:A135: 97 09        	sta	[<L98+file_1],Y
  5307 08:A137: A5 03        	lda	<R0+2
  5308 08:A139: A0 0A 00     	ldy	#$a
  5309 08:A13C: 97 09        	sta	[<L98+file_1],Y
  5310                        ;			file->fileInfo = NULL;
  5311                        	.line	1309
  5312 08:A13E: A9 00 00     	lda	#$0
  5313 08:A141: A0 04 00     	ldy	#$4
  5314 08:A144: 97 09        	sta	[<L98+file_1],Y
  5315 08:A146: A9 00 00     	lda	#$0
  5316 08:A149: A0 06 00     	ldy	#$6
  5317 08:A14C: 97 09        	sta	[<L98+file_1],Y
  5318                        ;
  5319                        ;
  5320                        ;			f_mount(NULL, drive,1); // unmou
                    nt for safety
  5321                        	.line	1312
  5322 08:A14E: F4 01 00     	pea	#<$1
  5323 08:A151: D4 07        	pei	<L98+drive_1+2
  5324 08:A153: D4 05        	pei	<L98+drive_1
  5325 08:A155: F4 00 00     	pea	#^$0
  5326 08:A158: F4 00 00     	pea	#<$0
  5327 08:A15B: 22 xx xx xx  	jsl	~~f_mount
  5328                        ;			file->fr = f_mount(file->fs , dr
                    ive,1);
  5329                        	.line	1313
  5330 08:A15F: F4 01 00     	pea	#<$1
  5331 08:A162: D4 07        	pei	<L98+drive_1+2
  5332 08:A164: D4 05        	pei	<L98+drive_1
  5333 08:A166: A0 02 00     	ldy	#$2
  5334 08:A169: B7 09        	lda	[<L98+file_1],Y
  5335 08:A16B: 48           	pha
  5336 08:A16C: A7 09        	lda	[<L98+file_1]
  5337 08:A16E: 48           	pha
  5338 08:A16F: 22 xx xx xx  	jsl	~~f_mount
  5339 08:A173: A0 0C 00     	ldy	#$c
  5340 08:A176: 97 09        	sta	[<L98+file_1],Y
  5341                        ;			if(file->fr == FR_OK)
  5342                        	.line	1314
  5343                        ;			{
  5344 08:A178: A0 0C 00     	ldy	#$c
  5345 08:A17B: B7 09        	lda	[<L98+file_1],Y
  Mon Sep 27 2021  9:39                                                Page 107


  5346 08:A17D: F0 03        	beq	L102
  5347 08:A17F: 82 1B 00     	brl	L10064
  5348                        L102:
  5349                        	.line	1315
  5350                        ;				file->fr = f_open(file->
                    f,path,mode);
  5351                        	.line	1316
  5352 08:A182: D4 14        	pei	<L97+mode_0
  5353 08:A184: D4 12        	pei	<L97+path_0+2
  5354 08:A186: D4 10        	pei	<L97+path_0
  5355 08:A188: A0 0A 00     	ldy	#$a
  5356 08:A18B: B7 09        	lda	[<L98+file_1],Y
  5357 08:A18D: 48           	pha
  5358 08:A18E: A0 08 00     	ldy	#$8
  5359 08:A191: B7 09        	lda	[<L98+file_1],Y
  5360 08:A193: 48           	pha
  5361 08:A194: 22 xx xx xx  	jsl	~~f_open
  5362 08:A198: A0 0C 00     	ldy	#$c
  5363 08:A19B: 97 09        	sta	[<L98+file_1],Y
  5364                        ;			}
  5365                        	.line	1317
  5366                        ;
  5367                        ;			k_mem_deallocate_heap((LPVOID)dr
                    ive);
  5368                        L10064:
  5369                        	.line	1319
  5370 08:A19D: D4 07        	pei	<L98+drive_1+2
  5371 08:A19F: D4 05        	pei	<L98+drive_1
  5372 08:A1A1: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5373                        ;		}
  5374                        	.line	1320
  5375                        ;	}
  5376                        L10063:
  5377                        	.line	1321
  5378                        ;
  5379                        ;	return file;
  5380                        L10062:
  5381                        	.line	1323
  5382 08:A1A5: A6 0B        	ldx	<L98+file_1+2
  5383 08:A1A7: A5 09        	lda	<L98+file_1
  5384                        L103:
  5385 08:A1A9: A8           	tay
  5386 08:A1AA: A5 0E        	lda	<L97+2
  5387 08:A1AC: 85 14        	sta	<L97+2+6
  5388 08:A1AE: A5 0D        	lda	<L97+1
  5389 08:A1B0: 85 13        	sta	<L97+1+6
  5390 08:A1B2: 2B           	pld
  5391 08:A1B3: 3B           	tsc
  5392 08:A1B4: 18           	clc
  5393 08:A1B5: 69 12 00     	adc	#L97+6
  5394 08:A1B8: 1B           	tcs
  5395 08:A1B9: 98           	tya
  5396 08:A1BA: 6B           	rtl
  5397                        ;}
  5398                        	.line	1324
  5399                        	.endblock	1324
  5400             0000000C   L97	equ	12
  5401             00000005   L98	equ	5
  Mon Sep 27 2021  9:39                                                Page 108


  5402 08:A1BB:              	ends
  5403                        	efunc
  5404                        	.endfunc	1324,5,12
  5405                        	.line	1324
  5406                        ;
  5407                        ;HRESULT k_dos_close (FILE file)
  5408                        ;{
  5409                        	.line	1326
  5410                        	.line	1327
  5411                        	FXDOS
  5412                        	xdef	~~k_dos_close
  5413                        	func
  5414                        	.function	1327
  5415                        ~~k_dos_close:
  5416                        	longa	on
  5417                        	longi	on
  5418 08:A1BB: 3B           	tsc
  5419 08:A1BC: 38           	sec
  5420 08:A1BD: E9 00 00     	sbc	#L104
  5421 08:A1C0: 1B           	tcs
  5422 08:A1C1: 0B           	phd
  5423 08:A1C2: 5B           	tcd
  5424             00000004   file_0	set	4
  5425                        	.block	1327
  5426                        ;	if(file!=NULL)
  5427                        	.sym	file,4,138,6,32,130
  5428                        	.line	1328
  5429                        ;	{
  5430 08:A1C3: A5 04        	lda	<L104+file_0
  5431 08:A1C5: 05 06        	ora	<L104+file_0+2
  5432 08:A1C7: D0 03        	bne	L107
  5433 08:A1C9: 82 6F 00     	brl	L10065
  5434                        L107:
  5435                        	.line	1329
  5436                        ;		if(file->f)
  5437                        	.line	1330
  5438                        ;		{
  5439 08:A1CC: A0 08 00     	ldy	#$8
  5440 08:A1CF: B7 04        	lda	[<L104+file_0],Y
  5441 08:A1D1: A0 0A 00     	ldy	#$a
  5442 08:A1D4: 17 04        	ora	[<L104+file_0],Y
  5443 08:A1D6: D0 03        	bne	L108
  5444 08:A1D8: 82 20 00     	brl	L10066
  5445                        L108:
  5446                        	.line	1331
  5447                        ;			f_close(file->f);
  5448                        	.line	1332
  5449 08:A1DB: A0 0A 00     	ldy	#$a
  5450 08:A1DE: B7 04        	lda	[<L104+file_0],Y
  5451 08:A1E0: 48           	pha
  5452 08:A1E1: A0 08 00     	ldy	#$8
  5453 08:A1E4: B7 04        	lda	[<L104+file_0],Y
  5454 08:A1E6: 48           	pha
  5455 08:A1E7: 22 xx xx xx  	jsl	~~f_close
  5456                        ;			k_mem_deallocate_heap(file->f);
  5457                        	.line	1333
  5458 08:A1EB: A0 0A 00     	ldy	#$a
  5459 08:A1EE: B7 04        	lda	[<L104+file_0],Y
  Mon Sep 27 2021  9:39                                                Page 109


  5460 08:A1F0: 48           	pha
  5461 08:A1F1: A0 08 00     	ldy	#$8
  5462 08:A1F4: B7 04        	lda	[<L104+file_0],Y
  5463 08:A1F6: 48           	pha
  5464 08:A1F7: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5465                        ;		}
  5466                        	.line	1334
  5467                        ;
  5468                        ;		if(file->fileInfo)
  5469                        L10066:
  5470                        	.line	1336
  5471                        ;			k_mem_deallocate_heap(file->file
                    Info);
  5472 08:A1FB: A0 04 00     	ldy	#$4
  5473 08:A1FE: B7 04        	lda	[<L104+file_0],Y
  5474 08:A200: A0 06 00     	ldy	#$6
  5475 08:A203: 17 04        	ora	[<L104+file_0],Y
  5476 08:A205: D0 03        	bne	L109
  5477 08:A207: 82 10 00     	brl	L10067
  5478                        L109:
  5479                        	.line	1337
  5480 08:A20A: A0 06 00     	ldy	#$6
  5481 08:A20D: B7 04        	lda	[<L104+file_0],Y
  5482 08:A20F: 48           	pha
  5483 08:A210: A0 04 00     	ldy	#$4
  5484 08:A213: B7 04        	lda	[<L104+file_0],Y
  5485 08:A215: 48           	pha
  5486 08:A216: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5487                        ;
  5488                        ;		if(file->fs)
  5489                        L10067:
  5490                        	.line	1339
  5491                        ;			k_mem_deallocate_heap(file->fs);
  5492 08:A21A: A7 04        	lda	[<L104+file_0]
  5493 08:A21C: A0 02 00     	ldy	#$2
  5494 08:A21F: 17 04        	ora	[<L104+file_0],Y
  5495 08:A221: D0 03        	bne	L110
  5496 08:A223: 82 0D 00     	brl	L10068
  5497                        L110:
  5498                        	.line	1340
  5499 08:A226: A0 02 00     	ldy	#$2
  5500 08:A229: B7 04        	lda	[<L104+file_0],Y
  5501 08:A22B: 48           	pha
  5502 08:A22C: A7 04        	lda	[<L104+file_0]
  5503 08:A22E: 48           	pha
  5504 08:A22F: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5505                        ;
  5506                        ;		k_mem_deallocate_heap(file);
  5507                        L10068:
  5508                        	.line	1342
  5509 08:A233: D4 06        	pei	<L104+file_0+2
  5510 08:A235: D4 04        	pei	<L104+file_0
  5511 08:A237: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  5512                        ;	}
  5513                        	.line	1343
  5514                        ;	return 0;
  5515                        L10065:
  5516                        	.line	1344
  Mon Sep 27 2021  9:39                                                Page 110


  5517 08:A23B: A9 00 00     	lda	#$0
  5518 08:A23E: AA           	tax
  5519 08:A23F: A9 00 00     	lda	#$0
  5520                        L111:
  5521 08:A242: A8           	tay
  5522 08:A243: A5 02        	lda	<L104+2
  5523 08:A245: 85 06        	sta	<L104+2+4
  5524 08:A247: A5 01        	lda	<L104+1
  5525 08:A249: 85 05        	sta	<L104+1+4
  5526 08:A24B: 2B           	pld
  5527 08:A24C: 3B           	tsc
  5528 08:A24D: 18           	clc
  5529 08:A24E: 69 04 00     	adc	#L104+4
  5530 08:A251: 1B           	tcs
  5531 08:A252: 98           	tya
  5532 08:A253: 6B           	rtl
  5533                        ;}
  5534                        	.line	1345
  5535                        	.endblock	1345
  5536             00000000   L104	equ	0
  5537             00000001   L105	equ	1
  5538 08:A254:              	ends
  5539                        	efunc
  5540                        	.endfunc	1345,1,0
  5541                        	.line	1345
  5542                        ;
  5543                        ;HRESULT k_dos_read (FIL* fp, void* buff, UINT btr
                    , UINT* br){return 0;}
  5544                        	.line	1347
  5545                        	.line	1347
  5546                        	FXDOS
  5547                        	xdef	~~k_dos_read
  5548                        	func
  5549                        	.function	1347
  5550                        ~~k_dos_read:
  5551                        	longa	on
  5552                        	longi	on
  5553 08:A254: 3B           	tsc
  5554 08:A255: 38           	sec
  5555 08:A256: E9 00 00     	sbc	#L112
  5556 08:A259: 1B           	tcs
  5557 08:A25A: 0B           	phd
  5558 08:A25B: 5B           	tcd
  5559             00000004   fp_0	set	4
  5560             00000008   buff_0	set	8
  5561             0000000C   btr_0	set	12
  5562             0000000E   br_0	set	14
  5563                        	.block	1347
  5564                        	.sym	fp,4,138,6,32,86
  5565                        	.sym	buff,8,129,6,32
  5566                        	.sym	btr,12,16,6,16
  5567                        	.sym	br,14,144,6,32
  5568                        	.line	1347
  5569 08:A25C: A9 00 00     	lda	#$0
  5570 08:A25F: AA           	tax
  5571 08:A260: A9 00 00     	lda	#$0
  5572                        L115:
  5573 08:A263: A8           	tay
  Mon Sep 27 2021  9:39                                                Page 111


  5574 08:A264: A5 02        	lda	<L112+2
  5575 08:A266: 85 10        	sta	<L112+2+14
  5576 08:A268: A5 01        	lda	<L112+1
  5577 08:A26A: 85 0F        	sta	<L112+1+14
  5578 08:A26C: 2B           	pld
  5579 08:A26D: 3B           	tsc
  5580 08:A26E: 18           	clc
  5581 08:A26F: 69 0E 00     	adc	#L112+14
  5582 08:A272: 1B           	tcs
  5583 08:A273: 98           	tya
  5584 08:A274: 6B           	rtl
  5585                        	.line	1347
  5586                        	.endblock	1347
  5587             00000000   L112	equ	0
  5588             00000001   L113	equ	1
  5589 08:A275:              	ends
  5590                        	efunc
  5591                        	.endfunc	1347,1,0
  5592                        	.line	1347
  5593                        ;HRESULT k_dos_write (FIL* fp, const void* buff, U
                    INT btw, UINT* bw){return 0;}
  5594                        	.line	1348
  5595                        	.line	1348
  5596                        	FXDOS
  5597                        	xdef	~~k_dos_write
  5598                        	func
  5599                        	.function	1348
  5600                        ~~k_dos_write:
  5601                        	longa	on
  5602                        	longi	on
  5603 08:A275: 3B           	tsc
  5604 08:A276: 38           	sec
  5605 08:A277: E9 00 00     	sbc	#L116
  5606 08:A27A: 1B           	tcs
  5607 08:A27B: 0B           	phd
  5608 08:A27C: 5B           	tcd
  5609             00000004   fp_0	set	4
  5610             00000008   buff_0	set	8
  5611             0000000C   btw_0	set	12
  5612             0000000E   bw_0	set	14
  5613                        	.block	1348
  5614                        	.sym	fp,4,138,6,32,86
  5615                        	.sym	buff,8,129,6,32
  5616                        	.sym	btw,12,16,6,16
  5617                        	.sym	bw,14,144,6,32
  5618                        	.line	1348
  5619 08:A27D: A9 00 00     	lda	#$0
  5620 08:A280: AA           	tax
  5621 08:A281: A9 00 00     	lda	#$0
  5622                        L119:
  5623 08:A284: A8           	tay
  5624 08:A285: A5 02        	lda	<L116+2
  5625 08:A287: 85 10        	sta	<L116+2+14
  5626 08:A289: A5 01        	lda	<L116+1
  5627 08:A28B: 85 0F        	sta	<L116+1+14
  5628 08:A28D: 2B           	pld
  5629 08:A28E: 3B           	tsc
  5630 08:A28F: 18           	clc
  Mon Sep 27 2021  9:39                                                Page 112


  5631 08:A290: 69 0E 00     	adc	#L116+14
  5632 08:A293: 1B           	tcs
  5633 08:A294: 98           	tya
  5634 08:A295: 6B           	rtl
  5635                        	.line	1348
  5636                        	.endblock	1348
  5637             00000000   L116	equ	0
  5638             00000001   L117	equ	1
  5639 08:A296:              	ends
  5640                        	efunc
  5641                        	.endfunc	1348,1,0
  5642                        	.line	1348
  5643                        ;HRESULT k_dos_lseek (FIL* fp, FSIZE_t ofs){return
                     0;}
  5644                        	.line	1349
  5645                        	.line	1349
  5646                        	FXDOS
  5647                        	xdef	~~k_dos_lseek
  5648                        	func
  5649                        	.function	1349
  5650                        ~~k_dos_lseek:
  5651                        	longa	on
  5652                        	longi	on
  5653 08:A296: 3B           	tsc
  5654 08:A297: 38           	sec
  5655 08:A298: E9 00 00     	sbc	#L120
  5656 08:A29B: 1B           	tcs
  5657 08:A29C: 0B           	phd
  5658 08:A29D: 5B           	tcd
  5659             00000004   fp_0	set	4
  5660             00000008   ofs_0	set	8
  5661                        	.block	1349
  5662                        	.sym	fp,4,138,6,32,86
  5663                        	.sym	ofs,8,18,6,32
  5664                        	.line	1349
  5665 08:A29E: A9 00 00     	lda	#$0
  5666 08:A2A1: AA           	tax
  5667 08:A2A2: A9 00 00     	lda	#$0
  5668                        L123:
  5669 08:A2A5: A8           	tay
  5670 08:A2A6: A5 02        	lda	<L120+2
  5671 08:A2A8: 85 0A        	sta	<L120+2+8
  5672 08:A2AA: A5 01        	lda	<L120+1
  5673 08:A2AC: 85 09        	sta	<L120+1+8
  5674 08:A2AE: 2B           	pld
  5675 08:A2AF: 3B           	tsc
  5676 08:A2B0: 18           	clc
  5677 08:A2B1: 69 08 00     	adc	#L120+8
  5678 08:A2B4: 1B           	tcs
  5679 08:A2B5: 98           	tya
  5680 08:A2B6: 6B           	rtl
  5681                        	.line	1349
  5682                        	.endblock	1349
  5683             00000000   L120	equ	0
  5684             00000001   L121	equ	1
  5685 08:A2B7:              	ends
  5686                        	efunc
  5687                        	.endfunc	1349,1,0
  Mon Sep 27 2021  9:39                                                Page 113


  5688                        	.line	1349
  5689                        ;HRESULT k_dos_truncate (FIL* fp){return 0;}	
                    								
                    	/* Truncate the file */
  5690                        	.line	1350
  5691                        	.line	1350
  5692                        	FXDOS
  5693                        	xdef	~~k_dos_truncate
  5694                        	func
  5695                        	.function	1350
  5696                        ~~k_dos_truncate:
  5697                        	longa	on
  5698                        	longi	on
  5699 08:A2B7: 3B           	tsc
  5700 08:A2B8: 38           	sec
  5701 08:A2B9: E9 00 00     	sbc	#L124
  5702 08:A2BC: 1B           	tcs
  5703 08:A2BD: 0B           	phd
  5704 08:A2BE: 5B           	tcd
  5705             00000004   fp_0	set	4
  5706                        	.block	1350
  5707                        	.sym	fp,4,138,6,32,86
  5708                        	.line	1350
  5709 08:A2BF: A9 00 00     	lda	#$0
  5710 08:A2C2: AA           	tax
  5711 08:A2C3: A9 00 00     	lda	#$0
  5712                        L127:
  5713 08:A2C6: A8           	tay
  5714 08:A2C7: A5 02        	lda	<L124+2
  5715 08:A2C9: 85 06        	sta	<L124+2+4
  5716 08:A2CB: A5 01        	lda	<L124+1
  5717 08:A2CD: 85 05        	sta	<L124+1+4
  5718 08:A2CF: 2B           	pld
  5719 08:A2D0: 3B           	tsc
  5720 08:A2D1: 18           	clc
  5721 08:A2D2: 69 04 00     	adc	#L124+4
  5722 08:A2D5: 1B           	tcs
  5723 08:A2D6: 98           	tya
  5724 08:A2D7: 6B           	rtl
  5725                        	.line	1350
  5726                        	.endblock	1350
  5727             00000000   L124	equ	0
  5728             00000001   L125	equ	1
  5729 08:A2D8:              	ends
  5730                        	efunc
  5731                        	.endfunc	1350,1,0
  5732                        	.line	1350
  5733                        ;HRESULT k_dos_sync (FIL* fp){return 0;}		
                    								
                    	/* Flush cached data of the writing file */
  5734                        	.line	1351
  5735                        	.line	1351
  5736                        	FXDOS
  5737                        	xdef	~~k_dos_sync
  5738                        	func
  5739                        	.function	1351
  5740                        ~~k_dos_sync:
  5741                        	longa	on
  Mon Sep 27 2021  9:39                                                Page 114


  5742                        	longi	on
  5743 08:A2D8: 3B           	tsc
  5744 08:A2D9: 38           	sec
  5745 08:A2DA: E9 00 00     	sbc	#L128
  5746 08:A2DD: 1B           	tcs
  5747 08:A2DE: 0B           	phd
  5748 08:A2DF: 5B           	tcd
  5749             00000004   fp_0	set	4
  5750                        	.block	1351
  5751                        	.sym	fp,4,138,6,32,86
  5752                        	.line	1351
  5753 08:A2E0: A9 00 00     	lda	#$0
  5754 08:A2E3: AA           	tax
  5755 08:A2E4: A9 00 00     	lda	#$0
  5756                        L131:
  5757 08:A2E7: A8           	tay
  5758 08:A2E8: A5 02        	lda	<L128+2
  5759 08:A2EA: 85 06        	sta	<L128+2+4
  5760 08:A2EC: A5 01        	lda	<L128+1
  5761 08:A2EE: 85 05        	sta	<L128+1+4
  5762 08:A2F0: 2B           	pld
  5763 08:A2F1: 3B           	tsc
  5764 08:A2F2: 18           	clc
  5765 08:A2F3: 69 04 00     	adc	#L128+4
  5766 08:A2F6: 1B           	tcs
  5767 08:A2F7: 98           	tya
  5768 08:A2F8: 6B           	rtl
  5769                        	.line	1351
  5770                        	.endblock	1351
  5771             00000000   L128	equ	0
  5772             00000001   L129	equ	1
  5773 08:A2F9:              	ends
  5774                        	efunc
  5775                        	.endfunc	1351,1,0
  5776                        	.line	1351
  5777                        ;HRESULT k_dos_opendir (DIR* dp, const TCHAR* path
                    ){return 0;}						
                    /* Open a directory */
  5778                        	.line	1352
  5779                        	.line	1352
  5780                        	FXDOS
  5781                        	xdef	~~k_dos_opendir
  5782                        	func
  5783                        	.function	1352
  5784                        ~~k_dos_opendir:
  5785                        	longa	on
  5786                        	longi	on
  5787 08:A2F9: 3B           	tsc
  5788 08:A2FA: 38           	sec
  5789 08:A2FB: E9 00 00     	sbc	#L132
  5790 08:A2FE: 1B           	tcs
  5791 08:A2FF: 0B           	phd
  5792 08:A300: 5B           	tcd
  5793             00000004   dp_0	set	4
  5794             00000008   path_0	set	8
  5795                        	.block	1352
  5796                        	.sym	dp,4,138,6,32,87
  5797                        	.sym	path,8,142,6,32
  Mon Sep 27 2021  9:39                                                Page 115


  5798                        	.line	1352
  5799 08:A301: A9 00 00     	lda	#$0
  5800 08:A304: AA           	tax
  5801 08:A305: A9 00 00     	lda	#$0
  5802                        L135:
  5803 08:A308: A8           	tay
  5804 08:A309: A5 02        	lda	<L132+2
  5805 08:A30B: 85 0A        	sta	<L132+2+8
  5806 08:A30D: A5 01        	lda	<L132+1
  5807 08:A30F: 85 09        	sta	<L132+1+8
  5808 08:A311: 2B           	pld
  5809 08:A312: 3B           	tsc
  5810 08:A313: 18           	clc
  5811 08:A314: 69 08 00     	adc	#L132+8
  5812 08:A317: 1B           	tcs
  5813 08:A318: 98           	tya
  5814 08:A319: 6B           	rtl
  5815                        	.line	1352
  5816                        	.endblock	1352
  5817             00000000   L132	equ	0
  5818             00000001   L133	equ	1
  5819 08:A31A:              	ends
  5820                        	efunc
  5821                        	.endfunc	1352,1,0
  5822                        	.line	1352
  5823                        ;HRESULT k_dos_closedir (DIR* dp){return 0;}	
                    								
                    	/* Close an open directory */
  5824                        	.line	1353
  5825                        	.line	1353
  5826                        	FXDOS
  5827                        	xdef	~~k_dos_closedir
  5828                        	func
  5829                        	.function	1353
  5830                        ~~k_dos_closedir:
  5831                        	longa	on
  5832                        	longi	on
  5833 08:A31A: 3B           	tsc
  5834 08:A31B: 38           	sec
  5835 08:A31C: E9 00 00     	sbc	#L136
  5836 08:A31F: 1B           	tcs
  5837 08:A320: 0B           	phd
  5838 08:A321: 5B           	tcd
  5839             00000004   dp_0	set	4
  5840                        	.block	1353
  5841                        	.sym	dp,4,138,6,32,87
  5842                        	.line	1353
  5843 08:A322: A9 00 00     	lda	#$0
  5844 08:A325: AA           	tax
  5845 08:A326: A9 00 00     	lda	#$0
  5846                        L139:
  5847 08:A329: A8           	tay
  5848 08:A32A: A5 02        	lda	<L136+2
  5849 08:A32C: 85 06        	sta	<L136+2+4
  5850 08:A32E: A5 01        	lda	<L136+1
  5851 08:A330: 85 05        	sta	<L136+1+4
  5852 08:A332: 2B           	pld
  5853 08:A333: 3B           	tsc
  Mon Sep 27 2021  9:39                                                Page 116


  5854 08:A334: 18           	clc
  5855 08:A335: 69 04 00     	adc	#L136+4
  5856 08:A338: 1B           	tcs
  5857 08:A339: 98           	tya
  5858 08:A33A: 6B           	rtl
  5859                        	.line	1353
  5860                        	.endblock	1353
  5861             00000000   L136	equ	0
  5862             00000001   L137	equ	1
  5863 08:A33B:              	ends
  5864                        	efunc
  5865                        	.endfunc	1353,1,0
  5866                        	.line	1353
  5867                        ;HRESULT k_dos_readdir (DIR* dp, FILINFO* fno){ret
                    urn 0;}							
                    /* Read a directory item */
  5868                        	.line	1354
  5869                        	.line	1354
  5870                        	FXDOS
  5871                        	xdef	~~k_dos_readdir
  5872                        	func
  5873                        	.function	1354
  5874                        ~~k_dos_readdir:
  5875                        	longa	on
  5876                        	longi	on
  5877 08:A33B: 3B           	tsc
  5878 08:A33C: 38           	sec
  5879 08:A33D: E9 00 00     	sbc	#L140
  5880 08:A340: 1B           	tcs
  5881 08:A341: 0B           	phd
  5882 08:A342: 5B           	tcd
  5883             00000004   dp_0	set	4
  5884             00000008   fno_0	set	8
  5885                        	.block	1354
  5886                        	.sym	dp,4,138,6,32,87
  5887                        	.sym	fno,8,138,6,32,88
  5888                        	.line	1354
  5889 08:A343: A9 00 00     	lda	#$0
  5890 08:A346: AA           	tax
  5891 08:A347: A9 00 00     	lda	#$0
  5892                        L143:
  5893 08:A34A: A8           	tay
  5894 08:A34B: A5 02        	lda	<L140+2
  5895 08:A34D: 85 0A        	sta	<L140+2+8
  5896 08:A34F: A5 01        	lda	<L140+1
  5897 08:A351: 85 09        	sta	<L140+1+8
  5898 08:A353: 2B           	pld
  5899 08:A354: 3B           	tsc
  5900 08:A355: 18           	clc
  5901 08:A356: 69 08 00     	adc	#L140+8
  5902 08:A359: 1B           	tcs
  5903 08:A35A: 98           	tya
  5904 08:A35B: 6B           	rtl
  5905                        	.line	1354
  5906                        	.endblock	1354
  5907             00000000   L140	equ	0
  5908             00000001   L141	equ	1
  5909 08:A35C:              	ends
  Mon Sep 27 2021  9:39                                                Page 117


  5910                        	efunc
  5911                        	.endfunc	1354,1,0
  5912                        	.line	1354
  5913                        ;HRESULT k_dos_findfirst (DIR* dp, FILINFO* fno, c
                    onst TCHAR* path, const TCHAR* pattern){return 0;}	/* Find 
                    first file */
  5914                        	.line	1355
  5915                        	.line	1355
  5916                        	FXDOS
  5917                        	xdef	~~k_dos_findfirst
  5918                        	func
  5919                        	.function	1355
  5920                        ~~k_dos_findfirst:
  5921                        	longa	on
  5922                        	longi	on
  5923 08:A35C: 3B           	tsc
  5924 08:A35D: 38           	sec
  5925 08:A35E: E9 00 00     	sbc	#L144
  5926 08:A361: 1B           	tcs
  5927 08:A362: 0B           	phd
  5928 08:A363: 5B           	tcd
  5929             00000004   dp_0	set	4
  5930             00000008   fno_0	set	8
  5931             0000000C   path_0	set	12
  5932             00000010   pattern_0	set	16
  5933                        	.block	1355
  5934                        	.sym	dp,4,138,6,32,87
  5935                        	.sym	fno,8,138,6,32,88
  5936                        	.sym	path,12,142,6,32
  5937                        	.sym	pattern,16,142,6,32
  5938                        	.line	1355
  5939 08:A364: A9 00 00     	lda	#$0
  5940 08:A367: AA           	tax
  5941 08:A368: A9 00 00     	lda	#$0
  5942                        L147:
  5943 08:A36B: A8           	tay
  5944 08:A36C: A5 02        	lda	<L144+2
  5945 08:A36E: 85 12        	sta	<L144+2+16
  5946 08:A370: A5 01        	lda	<L144+1
  5947 08:A372: 85 11        	sta	<L144+1+16
  5948 08:A374: 2B           	pld
  5949 08:A375: 3B           	tsc
  5950 08:A376: 18           	clc
  5951 08:A377: 69 10 00     	adc	#L144+16
  5952 08:A37A: 1B           	tcs
  5953 08:A37B: 98           	tya
  5954 08:A37C: 6B           	rtl
  5955                        	.line	1355
  5956                        	.endblock	1355
  5957             00000000   L144	equ	0
  5958             00000001   L145	equ	1
  5959 08:A37D:              	ends
  5960                        	efunc
  5961                        	.endfunc	1355,1,0
  5962                        	.line	1355
  5963                        ;HRESULT k_dos_findnext (DIR* dp, FILINFO* fno){re
                    turn 0;}	/* Find next file */
  5964                        	.line	1356
  Mon Sep 27 2021  9:39                                                Page 118


  5965                        	.line	1356
  5966                        	FXDOS
  5967                        	xdef	~~k_dos_findnext
  5968                        	func
  5969                        	.function	1356
  5970                        ~~k_dos_findnext:
  5971                        	longa	on
  5972                        	longi	on
  5973 08:A37D: 3B           	tsc
  5974 08:A37E: 38           	sec
  5975 08:A37F: E9 00 00     	sbc	#L148
  5976 08:A382: 1B           	tcs
  5977 08:A383: 0B           	phd
  5978 08:A384: 5B           	tcd
  5979             00000004   dp_0	set	4
  5980             00000008   fno_0	set	8
  5981                        	.block	1356
  5982                        	.sym	dp,4,138,6,32,87
  5983                        	.sym	fno,8,138,6,32,88
  5984                        	.line	1356
  5985 08:A385: A9 00 00     	lda	#$0
  5986 08:A388: AA           	tax
  5987 08:A389: A9 00 00     	lda	#$0
  5988                        L151:
  5989 08:A38C: A8           	tay
  5990 08:A38D: A5 02        	lda	<L148+2
  5991 08:A38F: 85 0A        	sta	<L148+2+8
  5992 08:A391: A5 01        	lda	<L148+1
  5993 08:A393: 85 09        	sta	<L148+1+8
  5994 08:A395: 2B           	pld
  5995 08:A396: 3B           	tsc
  5996 08:A397: 18           	clc
  5997 08:A398: 69 08 00     	adc	#L148+8
  5998 08:A39B: 1B           	tcs
  5999 08:A39C: 98           	tya
  6000 08:A39D: 6B           	rtl
  6001                        	.line	1356
  6002                        	.endblock	1356
  6003             00000000   L148	equ	0
  6004             00000001   L149	equ	1
  6005 08:A39E:              	ends
  6006                        	efunc
  6007                        	.endfunc	1356,1,0
  6008                        	.line	1356
  6009                        ;HRESULT k_dos_mkdir (const TCHAR* path){return 0;
                    }								
                    /* Create a sub directory */
  6010                        	.line	1357
  6011                        	.line	1357
  6012                        	FXDOS
  6013                        	xdef	~~k_dos_mkdir
  6014                        	func
  6015                        	.function	1357
  6016                        ~~k_dos_mkdir:
  6017                        	longa	on
  6018                        	longi	on
  6019 08:A39E: 3B           	tsc
  6020 08:A39F: 38           	sec
  Mon Sep 27 2021  9:39                                                Page 119


  6021 08:A3A0: E9 00 00     	sbc	#L152
  6022 08:A3A3: 1B           	tcs
  6023 08:A3A4: 0B           	phd
  6024 08:A3A5: 5B           	tcd
  6025             00000004   path_0	set	4
  6026                        	.block	1357
  6027                        	.sym	path,4,142,6,32
  6028                        	.line	1357
  6029 08:A3A6: A9 00 00     	lda	#$0
  6030 08:A3A9: AA           	tax
  6031 08:A3AA: A9 00 00     	lda	#$0
  6032                        L155:
  6033 08:A3AD: A8           	tay
  6034 08:A3AE: A5 02        	lda	<L152+2
  6035 08:A3B0: 85 06        	sta	<L152+2+4
  6036 08:A3B2: A5 01        	lda	<L152+1
  6037 08:A3B4: 85 05        	sta	<L152+1+4
  6038 08:A3B6: 2B           	pld
  6039 08:A3B7: 3B           	tsc
  6040 08:A3B8: 18           	clc
  6041 08:A3B9: 69 04 00     	adc	#L152+4
  6042 08:A3BC: 1B           	tcs
  6043 08:A3BD: 98           	tya
  6044 08:A3BE: 6B           	rtl
  6045                        	.line	1357
  6046                        	.endblock	1357
  6047             00000000   L152	equ	0
  6048             00000001   L153	equ	1
  6049 08:A3BF:              	ends
  6050                        	efunc
  6051                        	.endfunc	1357,1,0
  6052                        	.line	1357
  6053                        ;HRESULT k_dos_unlink (const TCHAR* path){return 0
                    ;}								
                    /* Delete an existing file or directory */
  6054                        	.line	1358
  6055                        	.line	1358
  6056                        	FXDOS
  6057                        	xdef	~~k_dos_unlink
  6058                        	func
  6059                        	.function	1358
  6060                        ~~k_dos_unlink:
  6061                        	longa	on
  6062                        	longi	on
  6063 08:A3BF: 3B           	tsc
  6064 08:A3C0: 38           	sec
  6065 08:A3C1: E9 00 00     	sbc	#L156
  6066 08:A3C4: 1B           	tcs
  6067 08:A3C5: 0B           	phd
  6068 08:A3C6: 5B           	tcd
  6069             00000004   path_0	set	4
  6070                        	.block	1358
  6071                        	.sym	path,4,142,6,32
  6072                        	.line	1358
  6073 08:A3C7: A9 00 00     	lda	#$0
  6074 08:A3CA: AA           	tax
  6075 08:A3CB: A9 00 00     	lda	#$0
  6076                        L159:
  Mon Sep 27 2021  9:39                                                Page 120


  6077 08:A3CE: A8           	tay
  6078 08:A3CF: A5 02        	lda	<L156+2
  6079 08:A3D1: 85 06        	sta	<L156+2+4
  6080 08:A3D3: A5 01        	lda	<L156+1
  6081 08:A3D5: 85 05        	sta	<L156+1+4
  6082 08:A3D7: 2B           	pld
  6083 08:A3D8: 3B           	tsc
  6084 08:A3D9: 18           	clc
  6085 08:A3DA: 69 04 00     	adc	#L156+4
  6086 08:A3DD: 1B           	tcs
  6087 08:A3DE: 98           	tya
  6088 08:A3DF: 6B           	rtl
  6089                        	.line	1358
  6090                        	.endblock	1358
  6091             00000000   L156	equ	0
  6092             00000001   L157	equ	1
  6093 08:A3E0:              	ends
  6094                        	efunc
  6095                        	.endfunc	1358,1,0
  6096                        	.line	1358
  6097                        ;HRESULT k_dos_rename (const TCHAR* path_old, cons
                    t TCHAR* path_new){return 0;}	/* Rename/Move a file or
                     directory */
  6098                        	.line	1359
  6099                        	.line	1359
  6100                        	FXDOS
  6101                        	xdef	~~k_dos_rename
  6102                        	func
  6103                        	.function	1359
  6104                        ~~k_dos_rename:
  6105                        	longa	on
  6106                        	longi	on
  6107 08:A3E0: 3B           	tsc
  6108 08:A3E1: 38           	sec
  6109 08:A3E2: E9 00 00     	sbc	#L160
  6110 08:A3E5: 1B           	tcs
  6111 08:A3E6: 0B           	phd
  6112 08:A3E7: 5B           	tcd
  6113             00000004   path_old_0	set	4
  6114             00000008   path_new_0	set	8
  6115                        	.block	1359
  6116                        	.sym	path_old,4,142,6,32
  6117                        	.sym	path_new,8,142,6,32
  6118                        	.line	1359
  6119 08:A3E8: A9 00 00     	lda	#$0
  6120 08:A3EB: AA           	tax
  6121 08:A3EC: A9 00 00     	lda	#$0
  6122                        L163:
  6123 08:A3EF: A8           	tay
  6124 08:A3F0: A5 02        	lda	<L160+2
  6125 08:A3F2: 85 0A        	sta	<L160+2+8
  6126 08:A3F4: A5 01        	lda	<L160+1
  6127 08:A3F6: 85 09        	sta	<L160+1+8
  6128 08:A3F8: 2B           	pld
  6129 08:A3F9: 3B           	tsc
  6130 08:A3FA: 18           	clc
  6131 08:A3FB: 69 08 00     	adc	#L160+8
  6132 08:A3FE: 1B           	tcs
  Mon Sep 27 2021  9:39                                                Page 121


  6133 08:A3FF: 98           	tya
  6134 08:A400: 6B           	rtl
  6135                        	.line	1359
  6136                        	.endblock	1359
  6137             00000000   L160	equ	0
  6138             00000001   L161	equ	1
  6139 08:A401:              	ends
  6140                        	efunc
  6141                        	.endfunc	1359,1,0
  6142                        	.line	1359
  6143                        ;HRESULT k_dos_stat (const TCHAR* path, FILINFO* f
                    no){return 0;}					/* Get f
                    ile status */
  6144                        	.line	1360
  6145                        	.line	1360
  6146                        	FXDOS
  6147                        	xdef	~~k_dos_stat
  6148                        	func
  6149                        	.function	1360
  6150                        ~~k_dos_stat:
  6151                        	longa	on
  6152                        	longi	on
  6153 08:A401: 3B           	tsc
  6154 08:A402: 38           	sec
  6155 08:A403: E9 00 00     	sbc	#L164
  6156 08:A406: 1B           	tcs
  6157 08:A407: 0B           	phd
  6158 08:A408: 5B           	tcd
  6159             00000004   path_0	set	4
  6160             00000008   fno_0	set	8
  6161                        	.block	1360
  6162                        	.sym	path,4,142,6,32
  6163                        	.sym	fno,8,138,6,32,88
  6164                        	.line	1360
  6165 08:A409: A9 00 00     	lda	#$0
  6166 08:A40C: AA           	tax
  6167 08:A40D: A9 00 00     	lda	#$0
  6168                        L167:
  6169 08:A410: A8           	tay
  6170 08:A411: A5 02        	lda	<L164+2
  6171 08:A413: 85 0A        	sta	<L164+2+8
  6172 08:A415: A5 01        	lda	<L164+1
  6173 08:A417: 85 09        	sta	<L164+1+8
  6174 08:A419: 2B           	pld
  6175 08:A41A: 3B           	tsc
  6176 08:A41B: 18           	clc
  6177 08:A41C: 69 08 00     	adc	#L164+8
  6178 08:A41F: 1B           	tcs
  6179 08:A420: 98           	tya
  6180 08:A421: 6B           	rtl
  6181                        	.line	1360
  6182                        	.endblock	1360
  6183             00000000   L164	equ	0
  6184             00000001   L165	equ	1
  6185 08:A422:              	ends
  6186                        	efunc
  6187                        	.endfunc	1360,1,0
  6188                        	.line	1360
  Mon Sep 27 2021  9:39                                                Page 122


  6189                        ;HRESULT k_dos_chmod (const TCHAR* path, BYTE attr
                    , BYTE mask){return 0;}			/* Change attrib
                    ute of a file/dir */
  6190                        	.line	1361
  6191                        	.line	1361
  6192                        	FXDOS
  6193                        	xdef	~~k_dos_chmod
  6194                        	func
  6195                        	.function	1361
  6196                        ~~k_dos_chmod:
  6197                        	longa	on
  6198                        	longi	on
  6199 08:A422: 3B           	tsc
  6200 08:A423: 38           	sec
  6201 08:A424: E9 00 00     	sbc	#L168
  6202 08:A427: 1B           	tcs
  6203 08:A428: 0B           	phd
  6204 08:A429: 5B           	tcd
  6205             00000004   path_0	set	4
  6206             00000008   attr_0	set	8
  6207             0000000A   mask_0	set	10
  6208                        	.block	1361
  6209                        	.sym	path,4,142,6,32
  6210                        	.sym	attr,8,14,6,8
  6211                        	.sym	mask,10,14,6,8
  6212                        	.line	1361
  6213 08:A42A: A9 00 00     	lda	#$0
  6214 08:A42D: AA           	tax
  6215 08:A42E: A9 00 00     	lda	#$0
  6216                        L171:
  6217 08:A431: A8           	tay
  6218 08:A432: A5 02        	lda	<L168+2
  6219 08:A434: 85 0A        	sta	<L168+2+8
  6220 08:A436: A5 01        	lda	<L168+1
  6221 08:A438: 85 09        	sta	<L168+1+8
  6222 08:A43A: 2B           	pld
  6223 08:A43B: 3B           	tsc
  6224 08:A43C: 18           	clc
  6225 08:A43D: 69 08 00     	adc	#L168+8
  6226 08:A440: 1B           	tcs
  6227 08:A441: 98           	tya
  6228 08:A442: 6B           	rtl
  6229                        	.line	1361
  6230                        	.endblock	1361
  6231             00000000   L168	equ	0
  6232             00000001   L169	equ	1
  6233 08:A443:              	ends
  6234                        	efunc
  6235                        	.endfunc	1361,1,0
  6236                        	.line	1361
  6237                        ;HRESULT k_dos_utime (const TCHAR* path, const FIL
                    INFO* fno){return 0;}			/* Change timest
                    amp of a file/dir */
  6238                        	.line	1362
  6239                        	.line	1362
  6240                        	FXDOS
  6241                        	xdef	~~k_dos_utime
  6242                        	func
  Mon Sep 27 2021  9:39                                                Page 123


  6243                        	.function	1362
  6244                        ~~k_dos_utime:
  6245                        	longa	on
  6246                        	longi	on
  6247 08:A443: 3B           	tsc
  6248 08:A444: 38           	sec
  6249 08:A445: E9 00 00     	sbc	#L172
  6250 08:A448: 1B           	tcs
  6251 08:A449: 0B           	phd
  6252 08:A44A: 5B           	tcd
  6253             00000004   path_0	set	4
  6254             00000008   fno_0	set	8
  6255                        	.block	1362
  6256                        	.sym	path,4,142,6,32
  6257                        	.sym	fno,8,138,6,32,88
  6258                        	.line	1362
  6259 08:A44B: A9 00 00     	lda	#$0
  6260 08:A44E: AA           	tax
  6261 08:A44F: A9 00 00     	lda	#$0
  6262                        L175:
  6263 08:A452: A8           	tay
  6264 08:A453: A5 02        	lda	<L172+2
  6265 08:A455: 85 0A        	sta	<L172+2+8
  6266 08:A457: A5 01        	lda	<L172+1
  6267 08:A459: 85 09        	sta	<L172+1+8
  6268 08:A45B: 2B           	pld
  6269 08:A45C: 3B           	tsc
  6270 08:A45D: 18           	clc
  6271 08:A45E: 69 08 00     	adc	#L172+8
  6272 08:A461: 1B           	tcs
  6273 08:A462: 98           	tya
  6274 08:A463: 6B           	rtl
  6275                        	.line	1362
  6276                        	.endblock	1362
  6277             00000000   L172	equ	0
  6278             00000001   L173	equ	1
  6279 08:A464:              	ends
  6280                        	efunc
  6281                        	.endfunc	1362,1,0
  6282                        	.line	1362
  6283                        ;HRESULT k_dos_chdir (const TCHAR* path){return 0;
                    }								
                    /* Change current directory */
  6284                        	.line	1363
  6285                        	.line	1363
  6286                        	FXDOS
  6287                        	xdef	~~k_dos_chdir
  6288                        	func
  6289                        	.function	1363
  6290                        ~~k_dos_chdir:
  6291                        	longa	on
  6292                        	longi	on
  6293 08:A464: 3B           	tsc
  6294 08:A465: 38           	sec
  6295 08:A466: E9 00 00     	sbc	#L176
  6296 08:A469: 1B           	tcs
  6297 08:A46A: 0B           	phd
  6298 08:A46B: 5B           	tcd
  Mon Sep 27 2021  9:39                                                Page 124


  6299             00000004   path_0	set	4
  6300                        	.block	1363
  6301                        	.sym	path,4,142,6,32
  6302                        	.line	1363
  6303 08:A46C: A9 00 00     	lda	#$0
  6304 08:A46F: AA           	tax
  6305 08:A470: A9 00 00     	lda	#$0
  6306                        L179:
  6307 08:A473: A8           	tay
  6308 08:A474: A5 02        	lda	<L176+2
  6309 08:A476: 85 06        	sta	<L176+2+4
  6310 08:A478: A5 01        	lda	<L176+1
  6311 08:A47A: 85 05        	sta	<L176+1+4
  6312 08:A47C: 2B           	pld
  6313 08:A47D: 3B           	tsc
  6314 08:A47E: 18           	clc
  6315 08:A47F: 69 04 00     	adc	#L176+4
  6316 08:A482: 1B           	tcs
  6317 08:A483: 98           	tya
  6318 08:A484: 6B           	rtl
  6319                        	.line	1363
  6320                        	.endblock	1363
  6321             00000000   L176	equ	0
  6322             00000001   L177	equ	1
  6323 08:A485:              	ends
  6324                        	efunc
  6325                        	.endfunc	1363,1,0
  6326                        	.line	1363
  6327                        ;HRESULT k_dos_chdrive (const TCHAR* path){return 
                    0;}								
                    /* Change current drive */
  6328                        	.line	1364
  6329                        	.line	1364
  6330                        	FXDOS
  6331                        	xdef	~~k_dos_chdrive
  6332                        	func
  6333                        	.function	1364
  6334                        ~~k_dos_chdrive:
  6335                        	longa	on
  6336                        	longi	on
  6337 08:A485: 3B           	tsc
  6338 08:A486: 38           	sec
  6339 08:A487: E9 00 00     	sbc	#L180
  6340 08:A48A: 1B           	tcs
  6341 08:A48B: 0B           	phd
  6342 08:A48C: 5B           	tcd
  6343             00000004   path_0	set	4
  6344                        	.block	1364
  6345                        	.sym	path,4,142,6,32
  6346                        	.line	1364
  6347 08:A48D: A9 00 00     	lda	#$0
  6348 08:A490: AA           	tax
  6349 08:A491: A9 00 00     	lda	#$0
  6350                        L183:
  6351 08:A494: A8           	tay
  6352 08:A495: A5 02        	lda	<L180+2
  6353 08:A497: 85 06        	sta	<L180+2+4
  6354 08:A499: A5 01        	lda	<L180+1
  Mon Sep 27 2021  9:39                                                Page 125


  6355 08:A49B: 85 05        	sta	<L180+1+4
  6356 08:A49D: 2B           	pld
  6357 08:A49E: 3B           	tsc
  6358 08:A49F: 18           	clc
  6359 08:A4A0: 69 04 00     	adc	#L180+4
  6360 08:A4A3: 1B           	tcs
  6361 08:A4A4: 98           	tya
  6362 08:A4A5: 6B           	rtl
  6363                        	.line	1364
  6364                        	.endblock	1364
  6365             00000000   L180	equ	0
  6366             00000001   L181	equ	1
  6367 08:A4A6:              	ends
  6368                        	efunc
  6369                        	.endfunc	1364,1,0
  6370                        	.line	1364
  6371                        ;HRESULT k_dos_getcwd (TCHAR* buff, UINT len){retu
                    rn 0;}							
                    /* Get current directory */
  6372                        	.line	1365
  6373                        	.line	1365
  6374                        	FXDOS
  6375                        	xdef	~~k_dos_getcwd
  6376                        	func
  6377                        	.function	1365
  6378                        ~~k_dos_getcwd:
  6379                        	longa	on
  6380                        	longi	on
  6381 08:A4A6: 3B           	tsc
  6382 08:A4A7: 38           	sec
  6383 08:A4A8: E9 00 00     	sbc	#L184
  6384 08:A4AB: 1B           	tcs
  6385 08:A4AC: 0B           	phd
  6386 08:A4AD: 5B           	tcd
  6387             00000004   buff_0	set	4
  6388             00000008   len_0	set	8
  6389                        	.block	1365
  6390                        	.sym	buff,4,142,6,32
  6391                        	.sym	len,8,16,6,16
  6392                        	.line	1365
  6393 08:A4AE: A9 00 00     	lda	#$0
  6394 08:A4B1: AA           	tax
  6395 08:A4B2: A9 00 00     	lda	#$0
  6396                        L187:
  6397 08:A4B5: A8           	tay
  6398 08:A4B6: A5 02        	lda	<L184+2
  6399 08:A4B8: 85 08        	sta	<L184+2+6
  6400 08:A4BA: A5 01        	lda	<L184+1
  6401 08:A4BC: 85 07        	sta	<L184+1+6
  6402 08:A4BE: 2B           	pld
  6403 08:A4BF: 3B           	tsc
  6404 08:A4C0: 18           	clc
  6405 08:A4C1: 69 06 00     	adc	#L184+6
  6406 08:A4C4: 1B           	tcs
  6407 08:A4C5: 98           	tya
  6408 08:A4C6: 6B           	rtl
  6409                        	.line	1365
  6410                        	.endblock	1365
  Mon Sep 27 2021  9:39                                                Page 126


  6411             00000000   L184	equ	0
  6412             00000001   L185	equ	1
  6413 08:A4C7:              	ends
  6414                        	efunc
  6415                        	.endfunc	1365,1,0
  6416                        	.line	1365
  6417                        ;HRESULT k_dos_getfree (const TCHAR* path, DWORD* 
                    nclst, FATFS** fatfs){return 0;}	/* Get number of free cl
                    usters on the drive */
  6418                        	.line	1366
  6419                        	.line	1366
  6420                        	FXDOS
  6421                        	xdef	~~k_dos_getfree
  6422                        	func
  6423                        	.function	1366
  6424                        ~~k_dos_getfree:
  6425                        	longa	on
  6426                        	longi	on
  6427 08:A4C7: 3B           	tsc
  6428 08:A4C8: 38           	sec
  6429 08:A4C9: E9 00 00     	sbc	#L188
  6430 08:A4CC: 1B           	tcs
  6431 08:A4CD: 0B           	phd
  6432 08:A4CE: 5B           	tcd
  6433             00000004   path_0	set	4
  6434             00000008   nclst_0	set	8
  6435             0000000C   fatfs_0	set	12
  6436                        	.block	1366
  6437                        	.sym	path,4,142,6,32
  6438                        	.sym	nclst,8,146,6,32
  6439                        	.sym	fatfs,12,1162,6,32,84
  6440                        	.line	1366
  6441 08:A4CF: A9 00 00     	lda	#$0
  6442 08:A4D2: AA           	tax
  6443 08:A4D3: A9 00 00     	lda	#$0
  6444                        L191:
  6445 08:A4D6: A8           	tay
  6446 08:A4D7: A5 02        	lda	<L188+2
  6447 08:A4D9: 85 0E        	sta	<L188+2+12
  6448 08:A4DB: A5 01        	lda	<L188+1
  6449 08:A4DD: 85 0D        	sta	<L188+1+12
  6450 08:A4DF: 2B           	pld
  6451 08:A4E0: 3B           	tsc
  6452 08:A4E1: 18           	clc
  6453 08:A4E2: 69 0C 00     	adc	#L188+12
  6454 08:A4E5: 1B           	tcs
  6455 08:A4E6: 98           	tya
  6456 08:A4E7: 6B           	rtl
  6457                        	.line	1366
  6458                        	.endblock	1366
  6459             00000000   L188	equ	0
  6460             00000001   L189	equ	1
  6461 08:A4E8:              	ends
  6462                        	efunc
  6463                        	.endfunc	1366,1,0
  6464                        	.line	1366
  6465                        ;HRESULT k_dos_getlabel (const TCHAR* path, TCHAR*
                     label, DWORD* vsn){return 0;}	/* Get volume label */
  Mon Sep 27 2021  9:39                                                Page 127


  6466                        	.line	1367
  6467                        	.line	1367
  6468                        	FXDOS
  6469                        	xdef	~~k_dos_getlabel
  6470                        	func
  6471                        	.function	1367
  6472                        ~~k_dos_getlabel:
  6473                        	longa	on
  6474                        	longi	on
  6475 08:A4E8: 3B           	tsc
  6476 08:A4E9: 38           	sec
  6477 08:A4EA: E9 00 00     	sbc	#L192
  6478 08:A4ED: 1B           	tcs
  6479 08:A4EE: 0B           	phd
  6480 08:A4EF: 5B           	tcd
  6481             00000004   path_0	set	4
  6482             00000008   label_0	set	8
  6483             0000000C   vsn_0	set	12
  6484                        	.block	1367
  6485                        	.sym	path,4,142,6,32
  6486                        	.sym	label,8,142,6,32
  6487                        	.sym	vsn,12,146,6,32
  6488                        	.line	1367
  6489 08:A4F0: A9 00 00     	lda	#$0
  6490 08:A4F3: AA           	tax
  6491 08:A4F4: A9 00 00     	lda	#$0
  6492                        L195:
  6493 08:A4F7: A8           	tay
  6494 08:A4F8: A5 02        	lda	<L192+2
  6495 08:A4FA: 85 0E        	sta	<L192+2+12
  6496 08:A4FC: A5 01        	lda	<L192+1
  6497 08:A4FE: 85 0D        	sta	<L192+1+12
  6498 08:A500: 2B           	pld
  6499 08:A501: 3B           	tsc
  6500 08:A502: 18           	clc
  6501 08:A503: 69 0C 00     	adc	#L192+12
  6502 08:A506: 1B           	tcs
  6503 08:A507: 98           	tya
  6504 08:A508: 6B           	rtl
  6505                        	.line	1367
  6506                        	.endblock	1367
  6507             00000000   L192	equ	0
  6508             00000001   L193	equ	1
  6509 08:A509:              	ends
  6510                        	efunc
  6511                        	.endfunc	1367,1,0
  6512                        	.line	1367
  6513                        ;HRESULT k_dos_setlabel (const TCHAR* label){retur
                    n 0;}							
                    /* Set volume label */
  6514                        	.line	1368
  6515                        	.line	1368
  6516                        	FXDOS
  6517                        	xdef	~~k_dos_setlabel
  6518                        	func
  6519                        	.function	1368
  6520                        ~~k_dos_setlabel:
  6521                        	longa	on
  Mon Sep 27 2021  9:39                                                Page 128


  6522                        	longi	on
  6523 08:A509: 3B           	tsc
  6524 08:A50A: 38           	sec
  6525 08:A50B: E9 00 00     	sbc	#L196
  6526 08:A50E: 1B           	tcs
  6527 08:A50F: 0B           	phd
  6528 08:A510: 5B           	tcd
  6529             00000004   label_0	set	4
  6530                        	.block	1368
  6531                        	.sym	label,4,142,6,32
  6532                        	.line	1368
  6533 08:A511: A9 00 00     	lda	#$0
  6534 08:A514: AA           	tax
  6535 08:A515: A9 00 00     	lda	#$0
  6536                        L199:
  6537 08:A518: A8           	tay
  6538 08:A519: A5 02        	lda	<L196+2
  6539 08:A51B: 85 06        	sta	<L196+2+4
  6540 08:A51D: A5 01        	lda	<L196+1
  6541 08:A51F: 85 05        	sta	<L196+1+4
  6542 08:A521: 2B           	pld
  6543 08:A522: 3B           	tsc
  6544 08:A523: 18           	clc
  6545 08:A524: 69 04 00     	adc	#L196+4
  6546 08:A527: 1B           	tcs
  6547 08:A528: 98           	tya
  6548 08:A529: 6B           	rtl
  6549                        	.line	1368
  6550                        	.endblock	1368
  6551             00000000   L196	equ	0
  6552             00000001   L197	equ	1
  6553 08:A52A:              	ends
  6554                        	efunc
  6555                        	.endfunc	1368,1,0
  6556                        	.line	1368
  6557                        ;HRESULT k_dos_forward (FIL* fp, UINT(*func)(const
                     BYTE*,UINT), UINT btf, UINT* bf){return 0;}	/* Forwa
                    rd data to the stream */
  6558                        	.line	1369
  6559                        	.line	1369
  6560                        	FXDOS
  6561                        	xdef	~~k_dos_forward
  6562                        	func
  6563                        	.function	1369
  6564                        ~~k_dos_forward:
  6565                        	longa	on
  6566                        	longi	on
  6567 08:A52A: 3B           	tsc
  6568 08:A52B: 38           	sec
  6569 08:A52C: E9 00 00     	sbc	#L200
  6570 08:A52F: 1B           	tcs
  6571 08:A530: 0B           	phd
  6572 08:A531: 5B           	tcd
  6573             00000004   fp_0	set	4
  6574             00000008   func_0	set	8
  6575             0000000C   btf_0	set	12
  6576             0000000E   bf_0	set	14
  6577                        	.block	1369
  Mon Sep 27 2021  9:39                                                Page 129


  6578                        	.sym	fp,4,138,6,32,86
  6579                        	.sym	func,8,656,6,32
  6580                        	.sym	btf,12,16,6,16
  6581                        	.sym	bf,14,144,6,32
  6582                        	.line	1369
  6583 08:A532: A9 00 00     	lda	#$0
  6584 08:A535: AA           	tax
  6585 08:A536: A9 00 00     	lda	#$0
  6586                        L203:
  6587 08:A539: A8           	tay
  6588 08:A53A: A5 02        	lda	<L200+2
  6589 08:A53C: 85 10        	sta	<L200+2+14
  6590 08:A53E: A5 01        	lda	<L200+1
  6591 08:A540: 85 0F        	sta	<L200+1+14
  6592 08:A542: 2B           	pld
  6593 08:A543: 3B           	tsc
  6594 08:A544: 18           	clc
  6595 08:A545: 69 0E 00     	adc	#L200+14
  6596 08:A548: 1B           	tcs
  6597 08:A549: 98           	tya
  6598 08:A54A: 6B           	rtl
  6599                        	.line	1369
  6600                        	.endblock	1369
  6601             00000000   L200	equ	0
  6602             00000001   L201	equ	1
  6603 08:A54B:              	ends
  6604                        	efunc
  6605                        	.endfunc	1369,1,0
  6606                        	.line	1369
  6607                        ;HRESULT k_dos_expand (FIL* fp, FSIZE_t fsz, BYTE 
                    opt){return 0;}					/* Alloc
                    ate a contiguous block to the file */
  6608                        	.line	1370
  6609                        	.line	1370
  6610                        	FXDOS
  6611                        	xdef	~~k_dos_expand
  6612                        	func
  6613                        	.function	1370
  6614                        ~~k_dos_expand:
  6615                        	longa	on
  6616                        	longi	on
  6617 08:A54B: 3B           	tsc
  6618 08:A54C: 38           	sec
  6619 08:A54D: E9 00 00     	sbc	#L204
  6620 08:A550: 1B           	tcs
  6621 08:A551: 0B           	phd
  6622 08:A552: 5B           	tcd
  6623             00000004   fp_0	set	4
  6624             00000008   fsz_0	set	8
  6625             0000000C   opt_0	set	12
  6626                        	.block	1370
  6627                        	.sym	fp,4,138,6,32,86
  6628                        	.sym	fsz,8,18,6,32
  6629                        	.sym	opt,12,14,6,8
  6630                        	.line	1370
  6631 08:A553: A9 00 00     	lda	#$0
  6632 08:A556: AA           	tax
  6633 08:A557: A9 00 00     	lda	#$0
  Mon Sep 27 2021  9:39                                                Page 130


  6634                        L207:
  6635 08:A55A: A8           	tay
  6636 08:A55B: A5 02        	lda	<L204+2
  6637 08:A55D: 85 0C        	sta	<L204+2+10
  6638 08:A55F: A5 01        	lda	<L204+1
  6639 08:A561: 85 0B        	sta	<L204+1+10
  6640 08:A563: 2B           	pld
  6641 08:A564: 3B           	tsc
  6642 08:A565: 18           	clc
  6643 08:A566: 69 0A 00     	adc	#L204+10
  6644 08:A569: 1B           	tcs
  6645 08:A56A: 98           	tya
  6646 08:A56B: 6B           	rtl
  6647                        	.line	1370
  6648                        	.endblock	1370
  6649             00000000   L204	equ	0
  6650             00000001   L205	equ	1
  6651 08:A56C:              	ends
  6652                        	efunc
  6653                        	.endfunc	1370,1,0
  6654                        	.line	1370
  6655                        ;HRESULT k_dos_mount (FATFS* fs, const TCHAR* path
                    , BYTE opt){return 0;}			/* Mount/Unmount
                     a logical drive */
  6656                        	.line	1371
  6657                        	.line	1371
  6658                        	FXDOS
  6659                        	xdef	~~k_dos_mount
  6660                        	func
  6661                        	.function	1371
  6662                        ~~k_dos_mount:
  6663                        	longa	on
  6664                        	longi	on
  6665 08:A56C: 3B           	tsc
  6666 08:A56D: 38           	sec
  6667 08:A56E: E9 00 00     	sbc	#L208
  6668 08:A571: 1B           	tcs
  6669 08:A572: 0B           	phd
  6670 08:A573: 5B           	tcd
  6671             00000004   fs_0	set	4
  6672             00000008   path_0	set	8
  6673             0000000C   opt_0	set	12
  6674                        	.block	1371
  6675                        	.sym	fs,4,138,6,32,84
  6676                        	.sym	path,8,142,6,32
  6677                        	.sym	opt,12,14,6,8
  6678                        	.line	1371
  6679 08:A574: A9 00 00     	lda	#$0
  6680 08:A577: AA           	tax
  6681 08:A578: A9 00 00     	lda	#$0
  6682                        L211:
  6683 08:A57B: A8           	tay
  6684 08:A57C: A5 02        	lda	<L208+2
  6685 08:A57E: 85 0C        	sta	<L208+2+10
  6686 08:A580: A5 01        	lda	<L208+1
  6687 08:A582: 85 0B        	sta	<L208+1+10
  6688 08:A584: 2B           	pld
  6689 08:A585: 3B           	tsc
  Mon Sep 27 2021  9:39                                                Page 131


  6690 08:A586: 18           	clc
  6691 08:A587: 69 0A 00     	adc	#L208+10
  6692 08:A58A: 1B           	tcs
  6693 08:A58B: 98           	tya
  6694 08:A58C: 6B           	rtl
  6695                        	.line	1371
  6696                        	.endblock	1371
  6697             00000000   L208	equ	0
  6698             00000001   L209	equ	1
  6699 08:A58D:              	ends
  6700                        	efunc
  6701                        	.endfunc	1371,1,0
  6702                        	.line	1371
  6703                        ;HRESULT k_dos_mkfs (const TCHAR* path, const MKFS
                    _PARM* opt, void* work, UINT len){return 0;}	/* Creat
                    e a FAT volume */
  6704                        	.line	1372
  6705                        	.line	1372
  6706                        	FXDOS
  6707                        	xdef	~~k_dos_mkfs
  6708                        	func
  6709                        	.function	1372
  6710                        ~~k_dos_mkfs:
  6711                        	longa	on
  6712                        	longi	on
  6713 08:A58D: 3B           	tsc
  6714 08:A58E: 38           	sec
  6715 08:A58F: E9 00 00     	sbc	#L212
  6716 08:A592: 1B           	tcs
  6717 08:A593: 0B           	phd
  6718 08:A594: 5B           	tcd
  6719             00000004   path_0	set	4
  6720             00000008   opt_0	set	8
  6721             0000000C   work_0	set	12
  6722             00000010   len_0	set	16
  6723                        	.block	1372
  6724                        	.sym	path,4,142,6,32
  6725                        	.sym	opt,8,138,6,32,89
  6726                        	.sym	work,12,129,6,32
  6727                        	.sym	len,16,16,6,16
  6728                        	.line	1372
  6729 08:A595: A9 00 00     	lda	#$0
  6730 08:A598: AA           	tax
  6731 08:A599: A9 00 00     	lda	#$0
  6732                        L215:
  6733 08:A59C: A8           	tay
  6734 08:A59D: A5 02        	lda	<L212+2
  6735 08:A59F: 85 10        	sta	<L212+2+14
  6736 08:A5A1: A5 01        	lda	<L212+1
  6737 08:A5A3: 85 0F        	sta	<L212+1+14
  6738 08:A5A5: 2B           	pld
  6739 08:A5A6: 3B           	tsc
  6740 08:A5A7: 18           	clc
  6741 08:A5A8: 69 0E 00     	adc	#L212+14
  6742 08:A5AB: 1B           	tcs
  6743 08:A5AC: 98           	tya
  6744 08:A5AD: 6B           	rtl
  6745                        	.line	1372
  Mon Sep 27 2021  9:39                                                Page 132


  6746                        	.endblock	1372
  6747             00000000   L212	equ	0
  6748             00000001   L213	equ	1
  6749 08:A5AE:              	ends
  6750                        	efunc
  6751                        	.endfunc	1372,1,0
  6752                        	.line	1372
  6753                        ;HRESULT k_dos_fdisk (BYTE pdrv, const LBA_t ptbl[
                    ], void* work){return 0;}		/* Divide a physical dri
                    ve into some partitions */
  6754                        	.line	1373
  6755                        	.line	1373
  6756                        	FXDOS
  6757                        	xdef	~~k_dos_fdisk
  6758                        	func
  6759                        	.function	1373
  6760                        ~~k_dos_fdisk:
  6761                        	longa	on
  6762                        	longi	on
  6763 08:A5AE: 3B           	tsc
  6764 08:A5AF: 38           	sec
  6765 08:A5B0: E9 00 00     	sbc	#L216
  6766 08:A5B3: 1B           	tcs
  6767 08:A5B4: 0B           	phd
  6768 08:A5B5: 5B           	tcd
  6769             00000004   pdrv_0	set	4
  6770             00000006   ptbl_0	set	6
  6771             0000000A   work_0	set	10
  6772                        	.block	1373
  6773                        	.sym	pdrv,4,14,6,8
  6774                        	.sym	ptbl,6,146,6,32
  6775                        	.sym	work,10,129,6,32
  6776                        	.line	1373
  6777 08:A5B6: A9 00 00     	lda	#$0
  6778 08:A5B9: AA           	tax
  6779 08:A5BA: A9 00 00     	lda	#$0
  6780                        L219:
  6781 08:A5BD: A8           	tay
  6782 08:A5BE: A5 02        	lda	<L216+2
  6783 08:A5C0: 85 0C        	sta	<L216+2+10
  6784 08:A5C2: A5 01        	lda	<L216+1
  6785 08:A5C4: 85 0B        	sta	<L216+1+10
  6786 08:A5C6: 2B           	pld
  6787 08:A5C7: 3B           	tsc
  6788 08:A5C8: 18           	clc
  6789 08:A5C9: 69 0A 00     	adc	#L216+10
  6790 08:A5CC: 1B           	tcs
  6791 08:A5CD: 98           	tya
  6792 08:A5CE: 6B           	rtl
  6793                        	.line	1373
  6794                        	.endblock	1373
  6795             00000000   L216	equ	0
  6796             00000001   L217	equ	1
  6797 08:A5CF:              	ends
  6798                        	efunc
  6799                        	.endfunc	1373,1,0
  6800                        	.line	1373
  6801                        ;HRESULT k_dos_setcp (WORD cp){return 0;}
  Mon Sep 27 2021  9:39                                                Page 133


  6802                        	.line	1374
  6803                        	.line	1374
  6804                        	FXDOS
  6805                        	xdef	~~k_dos_setcp
  6806                        	func
  6807                        	.function	1374
  6808                        ~~k_dos_setcp:
  6809                        	longa	on
  6810                        	longi	on
  6811 08:A5CF: 3B           	tsc
  6812 08:A5D0: 38           	sec
  6813 08:A5D1: E9 00 00     	sbc	#L220
  6814 08:A5D4: 1B           	tcs
  6815 08:A5D5: 0B           	phd
  6816 08:A5D6: 5B           	tcd
  6817             00000004   cp_0	set	4
  6818                        	.block	1374
  6819                        	.sym	cp,4,5,6,16
  6820                        	.line	1374
  6821 08:A5D7: A9 00 00     	lda	#$0
  6822 08:A5DA: AA           	tax
  6823 08:A5DB: A9 00 00     	lda	#$0
  6824                        L223:
  6825 08:A5DE: A8           	tay
  6826 08:A5DF: A5 02        	lda	<L220+2
  6827 08:A5E1: 85 04        	sta	<L220+2+2
  6828 08:A5E3: A5 01        	lda	<L220+1
  6829 08:A5E5: 85 03        	sta	<L220+1+2
  6830 08:A5E7: 2B           	pld
  6831 08:A5E8: 3B           	tsc
  6832 08:A5E9: 18           	clc
  6833 08:A5EA: 69 02 00     	adc	#L220+2
  6834 08:A5ED: 1B           	tcs
  6835 08:A5EE: 98           	tya
  6836 08:A5EF: 6B           	rtl
  6837                        	.line	1374
  6838                        	.endblock	1374
  6839             00000000   L220	equ	0
  6840             00000001   L221	equ	1
  6841 08:A5F0:              	ends
  6842                        	efunc
  6843                        	.endfunc	1374,1,0
  6844                        	.line	1374
  6845                        ;
  6846                        ;
  6847                        ;
  6848                        ;
  6849                        	.line	1377
  6850                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.c",1374
  6851                        	xref	~~f_mount
  6852                        	xref	~~f_findnext
  6853                        	xref	~~f_findfirst
  6854                        	xref	~~f_closedir
  6855                        	xref	~~f_opendir
  6856                        	xref	~~f_close
  6857                        	xref	~~f_open
  6858                        	xref	~~k_user_LoadResource
  Mon Sep 27 2021  9:39                                                Page 134


  6859                        	xref	~~k_mem_deallocate_heap
  6860                        	xref	~~k_mem_allocate_heap
  6861                        	xref	~~k_string_copy_to_delimiter
  6862                        	xref	~~k_bytetohex
  6863                        	xref	~~k_get_c256_minor_version
  6864                        	xref	~~k_get_c256_major_version
  6865                        	xref	~~k_debug_nstrings
  6866                        	xref	~~k_debug_integer
  6867                        	xref	~~k_debug_pointer
  6868                        	xref	~~k_debug_string
  6869                        	xref	~~k_unlock_irq
  6870                        	xref	~~k_lock_irq
  6871                        	xref	~~k_nodelist_removefromlist
  6872                        	xref	~~k_nodelist_searchByType
  6873                        	xref	~~k_nodelist_addtolist
  6874                        	xref	~~k_nodelist_allocate_list
  6875                        	xref	~~strcpy
  6876                        	xref	~~strcmp
  6877                        	xref	~~strcat
  6878                        	xref	~~memset
  6879                        	xref	~~memcpy
  6880                        	xref	~~free
  6881                        	xref	~~g_irq_handlers
  6882                        	udata
  6883                        	xdef	~~fxdosDevice
  6884                        ~~fxdosDevice
  6885 00:0000:              	ds	718
  6886 00:02CE:              	ends
  6887                        	.sym	~~k_dos_deallocate_fileinfo,~~k_dos_deal
                    locate_fileinfo,65,2,0
  6888                        	.sym	~~g_irq_handlers,~~g_irq_handlers,874,18
                    ,0,60,4,8
  6889                        	.sym	~~_k_dos_deviceinstance,~~_k_dos_devicei
                    nstance,138,3,32,6
  6890                        	.sym	~~_k_dos_devicedrivers,~~_k_dos_devicedr
                    ivers,138,3,32,6
  6891                        	.sym	~~fxdosDevice,~~fxdosDevice,10,2,5744,12
                    7
  6892                        	.sym	~~sectorBuffer,~~sectorBuffer,142,3,32
  6893                        	.sym	~~k_dos_setcp,~~k_dos_setcp,82,2,0
  6894                        	.sym	~~k_dos_fdisk,~~k_dos_fdisk,82,2,0
  6895                        	.sym	~~k_dos_mkfs,~~k_dos_mkfs,82,2,0
  6896                        	.sym	~~k_dos_mount,~~k_dos_mount,82,2,0
  6897                        	.sym	~~k_dos_expand,~~k_dos_expand,82,2,0
  6898                        	.sym	~~k_dos_forward,~~k_dos_forward,82,2,0
  6899                        	.sym	~~k_dos_setlabel,~~k_dos_setlabel,82,2,0
  6900                        	.sym	~~k_dos_getlabel,~~k_dos_getlabel,82,2,0
  6901                        	.sym	~~k_dos_getfree,~~k_dos_getfree,82,2,0
  6902                        	.sym	~~k_dos_getcwd,~~k_dos_getcwd,82,2,0
  6903                        	.sym	~~k_dos_chdrive,~~k_dos_chdrive,82,2,0
  6904                        	.sym	~~k_dos_chdir,~~k_dos_chdir,82,2,0
  6905                        	.sym	~~k_dos_utime,~~k_dos_utime,82,2,0
  6906                        	.sym	~~k_dos_chmod,~~k_dos_chmod,82,2,0
  6907                        	.sym	~~k_dos_stat,~~k_dos_stat,82,2,0
  6908                        	.sym	~~k_dos_rename,~~k_dos_rename,82,2,0
  6909                        	.sym	~~k_dos_unlink,~~k_dos_unlink,82,2,0
  6910                        	.sym	~~k_dos_mkdir,~~k_dos_mkdir,82,2,0
  6911                        	.sym	~~k_dos_findnext,~~k_dos_findnext,82,2,0
  Mon Sep 27 2021  9:39                                                Page 135


  6912                        	.sym	~~k_dos_findfirst,~~k_dos_findfirst,82,2
                    ,0
  6913                        	.sym	~~k_dos_readdir,~~k_dos_readdir,82,2,0
  6914                        	.sym	~~k_dos_closedir,~~k_dos_closedir,82,2,0
  6915                        	.sym	~~k_dos_opendir,~~k_dos_opendir,82,2,0
  6916                        	.sym	~~k_dos_sync,~~k_dos_sync,82,2,0
  6917                        	.sym	~~k_dos_truncate,~~k_dos_truncate,82,2,0
  6918                        	.sym	~~k_dos_lseek,~~k_dos_lseek,82,2,0
  6919                        	.sym	~~k_dos_write,~~k_dos_write,82,2,0
  6920                        	.sym	~~k_dos_read,~~k_dos_read,82,2,0
  6921                        	.sym	~~k_dos_close,~~k_dos_close,82,2,0
  6922                        	.sym	~~k_dos_open,~~k_dos_open,1098,2,32,130
  6923                        	.sym	~~k_dos_findfiles_to_nodes,~~k_dos_findf
                    iles_to_nodes,1098,2,32,6
  6924                        	.sym	~~k_get_dos_device,~~k_get_dos_device,10
                    98,2,32,127
  6925                        	.sym	~~k_get_device_driver,~~k_get_device_dri
                    ver,1098,2,32,58
  6926                        	.sym	FILE,0,138,14,32,130
  6927                        	.sym	FILE_POINTER,0,10,14,112,130
  6928                        	.sym	~~k_dos_load_drivers,~~k_dos_load_driver
                    s,1102,2,32
  6929                        	.sym	~~k_dos_load_driver,~~k_dos_load_driver,
                    1089,2,32
  6930                        	.sym	~~k_dos_ext_load_driver,~~k_dos_ext_load
                    _driver,1089,2,32
  6931                        	.sym	~~k_read_dos_directory,~~k_read_dos_dire
                    ctory,1098,2,32,6
  6932                        	.sym	~~k_close_dos_device,~~k_close_dos_devic
                    e,78,2,0
  6933                        	.sym	~~k_create_dos_device,~~k_create_dos_dev
                    ice,1098,2,32,127
  6934                        	.sym	PDOSHANDLE,0,138,14,32,129
  6935                        	.sym	DOSHANDLE,0,10,14,80,129
  6936                        	.sym	PFXDOSDEVICE,0,138,14,32,127
  6937                        	.sym	FXDOSDEVICE,0,10,14,5744,127
  6938                        	.sym	DOSINITDEVICE,0,641,14,32
  6939                        	.sym	DOSSECTORWRITER,0,654,14,32
  6940                        	.sym	DOSSECTORREADER,0,654,14,32
  6941                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,126
  6942                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,126
  6943                        	.sym	PIDSECTOR,0,138,14,32,103
  6944                        	.sym	IDSECTOR,0,10,14,2048,103
  6945                        	.sym	PLFN,0,138,14,32,102
  6946                        	.sym	LFN,0,10,14,256,102
  6947                        	.sym	PFAT16ENTRYLONG,0,138,14,32,101
  6948                        	.sym	FAT16ENTRYLONG,0,10,14,288,101
  6949                        	.sym	PFAT16ENTRY,0,138,14,32,100
  6950                        	.sym	FAT16ENTRY,0,10,14,256,100
  6951                        	.sym	Fat16BootSector,0,10,14,4096,99
  6952                        	.sym	PPARTITIONTABLE,0,138,14,32,98
  6953                        	.sym	PARTITIONTABLE,0,10,14,128,98
  6954                        	.sym	PFATBOOTSECTOR,0,138,14,32,97
  6955                        	.sym	FATBOOTSECTOR,0,10,14,928,97
  6956                        	.sym	fat_BS_t,0,10,14,688,96
  6957                        	.sym	fat_extBS_16_t,0,10,14,192,95
  6958                        	.sym	PFAT32EXT,0,138,14,32,94
  6959                        	.sym	fat_extBS_32_t,0,10,14,416,94
  Mon Sep 27 2021  9:39                                                Page 136


  6960                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,93
  6961                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,93
  6962                        	.sym	PFILEINFO,0,138,14,32,92
  6963                        	.sym	FILEINFO,0,10,14,136,92
  6964                        	.sym	PDISKINFO,0,138,14,32,91
  6965                        	.sym	DISKINFO,0,10,14,416,91
  6966                        	.sym	PDIRENTRY,0,138,14,32,90
  6967                        	.sym	DIRENTRY,0,10,14,256,90
  6968                        	.sym	DRESULT,0,5,14,16
  6969                        	.sym	DSTATUS,0,14,14,8
  6970                        	.sym	~~f_mount,~~f_mount,69,18,0
  6971                        	.sym	~~f_findnext,~~f_findnext,69,18,0
  6972                        	.sym	~~f_findfirst,~~f_findfirst,69,18,0
  6973                        	.sym	~~f_closedir,~~f_closedir,69,18,0
  6974                        	.sym	~~f_opendir,~~f_opendir,69,18,0
  6975                        	.sym	~~f_close,~~f_close,69,18,0
  6976                        	.sym	~~f_open,~~f_open,69,18,0
  6977                        	.sym	FRESULT,0,5,14,16
  6978                        	.sym	MKFS_PARM,0,10,14,80,89
  6979                        	.sym	FILINFO,0,10,14,2224,88
  6980                        	.sym	DIR,0,10,14,416,87
  6981                        	.sym	FIL,0,10,14,4400,86
  6982                        	.sym	FFOBJID,0,10,14,128,85
  6983                        	.sym	FATFS,0,10,14,4504,84
  6984                        	.sym	LBA_t,0,18,14,32
  6985                        	.sym	FSIZE_t,0,18,14,32
  6986                        	.sym	TCHAR,0,14,14,8
  6987                        	.sym	PCOMMANDARGS,0,138,14,32,83
  6988                        	.sym	COMMANDARGS,0,10,14,64,83
  6989                        	.sym	PTOKENIZESTATE,0,133,14,32
  6990                        	.sym	TOKENIZESTATE,0,5,14,16
  6991                        	.sym	PTOKEN,0,138,14,32,82
  6992                        	.sym	TOKEN,0,10,14,64,82
  6993                        	.sym	PTOKENTYPE,0,133,14,32
  6994                        	.sym	TOKENTYPE,0,5,14,16
  6995                        	.sym	FXCommandHandler,0,656,14,32
  6996                        	.sym	PCONSOLECTX,0,138,14,32,81
  6997                        	.sym	CONSOLECTX,0,10,14,1144,81
  6998                        	.sym	PSPINNERCTX,0,138,14,32,80
  6999                        	.sym	SPINNERCTX,0,10,14,48,80
  7000                        	.sym	HCLIP,0,138,14,32,79
  7001                        	.sym	PCLIPBOARD_DATA,0,138,14,32,79
  7002                        	.sym	CLIPBOARD_DATA,0,10,14,168,79
  7003                        	.sym	PEVENTMANAGER,0,138,14,32,78
  7004                        	.sym	EVENTMANAGER,0,10,14,192,78
  7005                        	.sym	EV_RUN,0,656,14,32
  7006                        	.sym	EV_QUERY_METRIC,0,656,14,32
  7007                        	.sym	EV_CONFIGURE,0,656,14,32
  7008                        	.sym	EV_UNINIT,0,641,14,32
  7009                        	.sym	EV_INIT,0,8833,14,32
  7010                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,77
  7011                        	.sym	MOUSE_MSG_STATE,0,10,14,184,77
  7012                        	.sym	PFXEVENTPROCESS,0,138,14,32,76
  7013                        	.sym	FXEVENTPROCESS,0,10,14,64,76
  7014                        	.sym	FXASYNCPROCESS,0,641,14,32
  7015                        	.sym	PMARSHALDATA,0,139,14,32,75
  7016                        	.sym	MARSHALDATA,0,11,14,32,75
  7017                        	.sym	FXIDLEPROCESS,0,641,14,32
  Mon Sep 27 2021  9:39                                                Page 137


  7018                        	.sym	FXEventProc,0,641,14,32
  7019                        	.sym	PMOUSEMSGDATA,0,138,14,32,74
  7020                        	.sym	MOUSEMSGDATA,0,10,14,64,74
  7021                        	.sym	MSGIRQ,0,5,14,16
  7022                        	.sym	MAINLOOPARGS,0,10,14,16,73
  7023                        	.sym	PEACHCHILD_MSG,0,138,14,32,72
  7024                        	.sym	EACHCHILD_MSG,0,10,14,64,72
  7025                        	.sym	PMSGBOX_DATA,0,138,14,32,71
  7026                        	.sym	MSGBOX_DATA,0,10,14,96,71
  7027                        	.sym	PDESKTOP_DATA,0,138,14,32,70
  7028                        	.sym	DESKTOP_DATA,0,10,14,64,70
  7029                        	.sym	~~k_user_LoadResource,~~k_user_LoadResou
                    rce,1089,18,32
  7030                        	.sym	PWINDOWMANAGER,0,138,14,32,69
  7031                        	.sym	WINDOWMANAGER,0,10,14,160,69
  7032                        	.sym	WM_DOPROCS,0,641,14,32
  7033                        	.sym	WM_QUERY_METRIC,0,656,14,32
  7034                        	.sym	WM_CONFIGURE,0,656,14,32
  7035                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  7036                        	.sym	WM_EVENTS,0,641,14,32
  7037                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,68
  7038                        	.sym	CUR_PALETTE_MAP,0,10,14,400,68
  7039                        	.sym	PCLICKDETECTED,0,138,14,32,67
  7040                        	.sym	CLICKDETECTED,0,10,14,64,67
  7041                        	.sym	OBJECTCLICKED,0,641,14,32
  7042                        	.sym	PALLOCATIONHEADER,0,138,14,32,66
  7043                        	.sym	ALLOCATIONHEADER,0,10,14,80,66
  7044                        	.sym	PIPCPORT,0,138,14,32,65
  7045                        	.sym	IPCPORT,0,10,14,144,65
  7046                        	.sym	~~k_mem_deallocate_heap,~~k_mem_dealloca
                    te_heap,65,18,0
  7047                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
  7048                        	.sym	MemoryCallback,0,641,14,32
  7049                        	.sym	PFXMEMORYMAP,0,138,14,32,64
  7050                        	.sym	FXMEMORYMAP,0,10,14,2072,64
  7051                        	.sym	UMM_HEAP_INFO,0,10,14,256,63
  7052                        	.sym	PEXECUTIVE,0,138,14,32,62
  7053                        	.sym	EXECUTIVE,0,10,14,128,62
  7054                        	.sym	EX_QUERY_METRIC,0,656,14,32
  7055                        	.sym	EX_CONFIGURE,0,656,14,32
  7056                        	.sym	EX_UNINIT,0,641,14,32
  7057                        	.sym	EX_INIT,0,8833,14,32
  7058                        	.sym	~~k_string_copy_to_delimiter,~~k_string_
                    copy_to_delimiter,1102,18,32
  7059                        	.sym	~~k_bytetohex,~~k_bytetohex,1102,18,32
  7060                        	.sym	PFXSTRING,0,138,14,32,61
  7061                        	.sym	FXSTRING,0,10,14,64,61
  7062                        	.sym	PIRQCHAIN,0,138,14,32,60
  7063                        	.sym	IRQCHAIN,0,10,14,128,60
  7064                        	.sym	DEVICEDRIVER_COMMAND,0,654,14,32
  7065                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  7066                        	.sym	DEVICEDRIVER_WRITE,0,654,14,32
  7067                        	.sym	DEVICEDRIVER_READ,0,654,14,32
  7068                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  7069                        	.sym	DEVICEDRIVER_IRQ,0,641,14,32
  7070                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,59
  7071                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,59
  Mon Sep 27 2021  9:39                                                Page 138


  7072                        	.sym	GETDRIVERDEF,0,8842,14,32,58
  7073                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,58
  7074                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,58
  7075                        	.sym	~~k_get_c256_minor_version,~~k_get_c256_
                    minor_version,65,18,0
  7076                        	.sym	~~k_get_c256_major_version,~~k_get_c256_
                    major_version,65,18,0
  7077                        	.sym	~~k_debug_nstrings,~~k_debug_nstrings,65
                    ,18,0
  7078                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  7079                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
  7080                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  7081                        	.sym	~~k_unlock_irq,~~k_unlock_irq,80,18,0
  7082                        	.sym	~~k_lock_irq,~~k_lock_irq,80,18,0
  7083                        	.sym	PSEGMENTHEADER,0,138,14,32,57
  7084                        	.sym	SEGMENTHEADER,0,10,14,160,57
  7085                        	.sym	PDEBUGBYTEBITS,0,138,14,32,56
  7086                        	.sym	DEBUGBYTEBITS,0,10,14,8,56
  7087                        	.sym	PFXENVIRONMENT,0,138,14,32,55
  7088                        	.sym	FXENVIRONMENT,0,10,14,96,55
  7089                        	.sym	PFXZEROPAGE,0,138,14,32,54
  7090                        	.sym	FXZEROPAGE,0,10,14,720,54
  7091                        	.sym	IRQBUFFER,0,10,14,32,53
  7092                        	.sym	KERNELTRAPCALL,0,641,14,32
  7093                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,52
  7094                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,52
  7095                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  7096                        	.sym	FOREACHNODE,0,641,14,32
  7097                        	.sym	~~k_nodelist_removefromlist,~~k_nodelist
                    _removefromlist,1098,18,32,5
  7098                        	.sym	~~k_nodelist_searchByType,~~k_nodelist_s
                    earchByType,1098,18,32,5
  7099                        	.sym	~~k_nodelist_addtolist,~~k_nodelist_addt
                    olist,1098,18,32,5
  7100                        	.sym	~~k_nodelist_allocate_list,~~k_nodelist_
                    allocate_list,1098,18,32,6
  7101                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,51
  7102                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,51
  7103                        	.sym	PFXRFHEADER_STRING,0,138,14,32,50
  7104                        	.sym	FXRFHEADER_STRING,0,10,14,32,50
  7105                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
  7106                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
  7107                        	.sym	PFXRFHEADER,0,138,14,32,48
  7108                        	.sym	FXRFHEADER,0,10,14,72,48
  7109                        	.sym	PFXCOMBUFFER,0,138,14,32,47
  7110                        	.sym	FXCOMBUFFER,0,10,14,2080,47
  7111                        	.sym	PSUBMENULIST,0,138,14,32,46
  7112                        	.sym	SUBMENULIST,0,10,14,40,46
  7113                        	.sym	HSUBMENU,0,7,14,32
  7114                        	.sym	PSUBMENU,0,138,14,32,45
  7115                        	.sym	SUBMENU,0,10,14,64,45
  7116                        	.sym	MenuAction,0,641,14,32
  7117                        	.sym	PMENUANCHOR,0,138,14,32,44
  7118                        	.sym	MENUANCHOR,0,10,14,272,44
  7119                        	.sym	PMSGBOX,0,138,14,32,43
  Mon Sep 27 2021  9:39                                                Page 139


  7120                        	.sym	MSGBOX,0,10,14,144,43
  7121                        	.sym	PTEXTBOX,0,138,14,32,42
  7122                        	.sym	TEXTBOX,0,10,14,144,42
  7123                        	.sym	PLISTBOX,0,138,14,32,41
  7124                        	.sym	LISTBOX,0,10,14,240,41
  7125                        	.sym	PSCROLLBAR,0,138,14,32,40
  7126                        	.sym	SCROLLBAR,0,10,14,240,40
  7127                        	.sym	PBUTTON,0,138,14,32,39
  7128                        	.sym	BUTTON,0,10,14,96,39
  7129                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
  7130                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
  7131                        	.sym	PMENUTAG,0,138,14,32,37
  7132                        	.sym	MENUTAG,0,10,14,160,37
  7133                        	.sym	PMENU,0,138,14,32,36
  7134                        	.sym	MENU,0,10,14,280,36
  7135                        	.sym	HMENURESOURCE,0,129,14,32
  7136                        	.sym	FONTMETRIC,0,10,14,32,35
  7137                        	.sym	TITLE,0,142,14,32
  7138                        	.sym	PHANDLE,0,1153,14,32
  7139                        	.sym	HANDLE,0,129,14,32
  7140                        	.sym	PWINDOWEX,0,138,14,32,34
  7141                        	.sym	WINDOWEX,0,10,14,3880,34
  7142                        	.sym	PWINDOW,0,138,14,32,33
  7143                        	.sym	WINDOW,0,10,14,3904,33
  7144                        	.sym	PDRAGDATA,0,138,14,32,32
  7145                        	.sym	DRAGDATA,0,10,14,216,32
  7146                        	.sym	PNCCLICKABLE,0,138,14,32,31
  7147                        	.sym	NCCLICKABLE,0,10,14,136,31
  7148                        	.sym	HCLICKABLE,0,7,14,32
  7149                        	.sym	PCLICKABLE,0,138,14,32,30
  7150                        	.sym	CLICKABLE,0,10,14,152,30
  7151                        	.sym	PWNDCLASS,0,138,14,32,29
  7152                        	.sym	WNDCLASS,0,10,14,272,29
  7153                        	.sym	HBRUSH,0,129,14,32
  7154                        	.sym	HCURSOR,0,129,14,32
  7155                        	.sym	HICON,0,129,14,32
  7156                        	.sym	HINSTANCE,0,129,14,32
  7157                        	.sym	FXWndProc,0,654,14,32
  7158                        	.sym	PDRECT,0,138,14,32,28
  7159                        	.sym	DRECT,0,10,14,112,28
  7160                        	.sym	PRECTP,0,138,14,32,27
  7161                        	.sym	RECTP,0,10,14,96,27
  7162                        	.sym	PRECT,0,138,14,32,26
  7163                        	.sym	RECT,0,10,14,112,26
  7164                        	.sym	PPOINT,0,138,14,32,25
  7165                        	.sym	POINT,0,10,14,32,25
  7166                        	.sym	PFXPROPERTY,0,138,14,32,23
  7167                        	.sym	FXPROPERTY,0,10,14,384,23
  7168                        	.sym	PKEYSTATE,0,138,14,32,22
  7169                        	.sym	KEYSTATE,0,10,14,112,22
  7170                        	.sym	SCANCODE,0,14,14,8
  7171                        	.sym	KEYCODE,0,16,14,16
  7172                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
  7173                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
  7174                        	.sym	PFXPROCESS,0,138,14,32,20
  7175                        	.sym	FXPROCESS,0,10,14,800,20
  7176                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
  7177                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
  Mon Sep 27 2021  9:39                                                Page 140


  7178                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
  7179                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
  7180                        	.sym	FXProcessProc,0,641,14,32
  7181                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
  7182                        	.sym	FXCMDMESSAGE,0,10,14,312,17
  7183                        	.sym	PFXOSMESSAGE,0,138,14,32,16
  7184                        	.sym	FXOSMESSAGE,0,10,14,312,16
  7185                        	.sym	PINT_REGS,0,138,14,32,15
  7186                        	.sym	INT_REGS,0,10,14,104,15
  7187                        	.sym	TASK_STACK,0,10,14,32,14
  7188                        	.sym	TASK,0,10,14,48,13
  7189                        	.sym	PIRQDATA,0,138,14,32,12
  7190                        	.sym	IRQDATA,0,10,14,48,12
  7191                        	.sym	HMENU,0,129,14,32
  7192                        	.sym	HWND,0,129,14,32
  7193                        	.sym	MSGDATA,0,14,14,8
  7194                        	.sym	MSGDEST,0,18,14,32
  7195                        	.sym	MSGSRC,0,18,14,32
  7196                        	.sym	MSGTYPE,0,16,14,16
  7197                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
  7198                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
  7199                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
  7200                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
  7201                        	.sym	FILE_PATH_LIST,0,138,14,32,6
  7202                        	.sym	PROCEDURE_LIST,0,138,14,32,6
  7203                        	.sym	FILE_HANDLE,0,138,14,32,11
  7204                        	.sym	FILE_BLOCK,0,10,14,552,11
  7205                        	.sym	SEMAPHORE,0,10,14,16,10
  7206                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
  7207                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
  7208                        	.sym	KRESULT,0,18,14,32
  7209                        	.sym	PKERNEL_ERROR,0,138,14,32,8
  7210                        	.sym	KERNEL_ERROR,0,10,14,32,8
  7211                        	.sym	PROCESS_STATUS,0,16,14,16
  7212                        	.sym	FILE_PATH_NAME,0,142,14,32
  7213                        	.sym	PROCESS_RESOURCE,0,129,14,32
  7214                        	.sym	PROCESS_TLS,0,129,14,32
  7215                        	.sym	PROCESS_CTX,0,129,14,32
  7216                        	.sym	USERID,0,16,14,16
  7217                        	.sym	PROCESS_ID,0,18,14,32
  7218                        	.sym	PROCESS_BANK,0,14,14,8
  7219                        	.sym	PFXQUEUE,0,138,14,32,7
  7220                        	.sym	FXQUEUE,0,10,14,80,7
  7221                        	.sym	PFXNODELIST,0,138,14,32,6
  7222                        	.sym	FXNODELIST,0,10,14,96,6
  7223                        	.sym	NodeListDeallocator,0,641,14,32
  7224                        	.sym	PFXNODE,0,138,14,32,5
  7225                        	.sym	FXNODE,0,10,14,384,5
  7226                        	.sym	PBYTEBITS,0,138,14,32,4
  7227                        	.sym	BYTEBITS,0,10,14,8,4
  7228                        	.sym	HRESULT,0,18,14,32
  7229                        	.sym	LPWCHAR,0,144,14,32
  7230                        	.sym	WCHAR,0,16,14,16
  7231                        	.sym	HSTRINGTABLE,0,129,14,32
  7232                        	.sym	HCOLOR,0,129,14,32
  7233                        	.sym	HFONT,0,129,14,32
  7234                        	.sym	HDC,0,129,14,32
  7235                        	.sym	HPOINTER,0,129,14,32
  Mon Sep 27 2021  9:39                                                Page 141


  7236                        	.sym	uint32_t,0,18,14,32
  7237                        	.sym	uint8_t,0,14,14,8
  7238                        	.sym	LPBOOL,0,142,14,32
  7239                        	.sym	BOOL,0,14,14,8
  7240                        	.sym	DWORD,0,18,14,32
  7241                        	.sym	ULONG,0,18,14,32
  7242                        	.sym	LPLONG,0,135,14,32
  7243                        	.sym	LONG,0,7,14,32
  7244                        	.sym	PUINT,0,144,14,32
  7245                        	.sym	USHORT,0,16,14,16
  7246                        	.sym	UINT,0,16,14,16
  7247                        	.sym	INT,0,5,14,16
  7248                        	.sym	WORD,0,5,14,16
  7249                        	.sym	PBYTE,0,142,14,32
  7250                        	.sym	BYTE,0,14,14,8
  7251                        	.sym	IOPORT,0,142,14,32
  7252                        	.sym	PUCHAR,0,142,14,32
  7253                        	.sym	UCHAR,0,14,14,8
  7254                        	.sym	LPWCSTR,0,142,14,32
  7255                        	.sym	LPCSTR,0,142,14,32
  7256                        	.sym	LPSTR,0,142,14,32
  7257                        	.sym	LPCHAR,0,142,14,32
  7258                        	.sym	CHAR,0,14,14,8
  7259                        	.sym	PUINT_32,0,146,14,32
  7260                        	.sym	UINT_32,0,18,14,32
  7261                        	.sym	PUINT_16,0,144,14,32
  7262                        	.sym	UINT_16,0,16,14,16
  7263                        	.sym	PUINT_8,0,142,14,32
  7264                        	.sym	UINT_8,0,14,14,8
  7265                        	.sym	LPVOID,0,129,14,32
  7266                        	.sym	VOID,0,1,14,32
  7267                        	.sym	~~strcpy,~~strcpy,1102,18,32
  7268                        	.sym	~~strcmp,~~strcmp,69,18,0
  7269                        	.sym	~~strcat,~~strcat,1102,18,32
  7270                        	.sym	~~memset,~~memset,1089,18,32
  7271                        	.sym	~~memcpy,~~memcpy,1089,18,32
  7272                        	.sym	Boolean_T,0,5,14,16
  7273                        	.sym	~~free,~~free,65,18,0
  7274                        	.sym	ldiv_t,0,10,14,64,2
  7275                        	.sym	div_t,0,10,14,32,1
  7276                        	.sym	wctype_t,0,16,14,16
  7277                        	.sym	wint_t,0,16,14,16
  7278                        	.sym	wchar_t,0,14,14,8
  7279                        	.sym	ptrdiff_t,0,7,14,32
  7280                        	.sym	size_t,0,16,14,16
  7281                        	end


      Lines assembled: 7281
      Errors: 0
