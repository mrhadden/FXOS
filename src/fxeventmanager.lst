  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",0
     7                        ;
     8                        ;#include "fxos.h"
     9                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
    10                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    11                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    12                        	.line	88
    13                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    14                        	.stag	fake1_,32,1
    15                        	.member	quot,0,5,8,16
    16                        	.member	rem,16,5,8,16
    17                        	.eos
    18                        	.stag	fake2_,64,2
    19                        	.member	quot,0,7,8,32
    20                        	.member	rem,32,7,8,32
    21                        	.eos
    22                        	.stag	int_sqrt,32,3
    23                        	.member	sqrt,0,16,8,16
    24                        	.member	frac,16,16,8,16
    25                        	.eos
    26                        	.line	205
    27                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
    28                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    29                        	.line	134
    30                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
    31                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    32                        	.line	103
    33                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
    34                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    35                        	.stag	_fx_bytebits,8,4
    36                        	.member	b7,0,14,17,1
    37                        	.member	b6,1,14,17,1
    38                        	.member	b5,2,14,17,1
    39                        	.member	b4,3,14,17,1
    40                        	.member	b3,4,14,17,1
    41                        	.member	b2,5,14,17,1
  Sat Jul 10 2021  1:15                                                Page 2


    42                        	.member	b1,6,14,17,1
    43                        	.member	b0,7,14,17,1
    44                        	.eos
    45                        	.stag	_fx_node,384,5
    46                        	.member	type,0,14,8,8
    47                        	.member	Reserved0,8,14,8,8
    48                        	.member	data,16,129,8,32
    49                        	.member	last,48,138,8,32,5
    50                        	.member	next,80,138,8,32,5
    51                        	.member	name,112,110,8,0,32
    52                        	.member	Reserved1,368,16,8,16
    53                        	.eos
    54                        	.stag	_fx_nodelist,96,6
    55                        	.member	listhead,0,138,8,32,5
    56                        	.member	listData,32,129,8,32
    57                        	.member	deallocator,64,641,8,32
    58                        	.eos
    59                        	.stag	_fx_queue,80,7
    60                        	.member	count,0,5,8,16
    61                        	.member	front,16,138,8,32,5
    62                        	.member	rear,48,138,8,32,5
    63                        	.eos
    64                        	.stag	fake8_,32,8
    65                        	.member	subsystem,0,14,8,8
    66                        	.member	level,8,14,8,8
    67                        	.member	error,16,16,8,16
    68                        	.eos
    69                        	.stag	_fx_process_signal,16,9
    70                        	.member	cbSize,0,16,8,16
    71                        	.eos
    72                        	.stag	_fx_semaphore,16,10
    73                        	.member	reserved,0,5,8,16
    74                        	.eos
    75                        	.stag	_fx_fileBlock,552,11
    76                        	.member	openCount,0,16,8,16
    77                        	.member	lockCount,16,16,8,16
    78                        	.member	dirty,32,14,8,8
    79                        	.member	fileBuffer,40,110,8,0,64
    80                        	.eos
    81                        	.stag	_fx_irq_data,48,12
    82                        	.member	line,0,5,8,16
    83                        	.member	keycode,16,142,8,32
    84                        	.eos
    85                        	.stag	_task,48,13
    86                        	.member	SPL,0,14,8,8
    87                        	.member	SPH,8,14,8,8
    88                        	.member	pstack,16,142,8,32
    89                        	.eos
    90                        	.stag	_task_stack,32,14
    91                        	.member	SS,0,142,8,32
    92                        	.eos
    93                        	.stag	int_regs,104,15
    94                        	.member	PB,0,14,8,8
    95                        	.member	PH,8,14,8,8
    96                        	.member	PL,16,14,8,8
    97                        	.member	PP,24,14,8,8
    98                        	.member	DB,32,14,8,8
    99                        	.member	DH,40,14,8,8
  Sat Jul 10 2021  1:15                                                Page 3


   100                        	.member	DL,48,14,8,8
   101                        	.member	AH,56,14,8,8
   102                        	.member	AL,64,14,8,8
   103                        	.member	XH,72,14,8,8
   104                        	.member	XL,80,14,8,8
   105                        	.member	YH,88,14,8,8
   106                        	.member	YL,96,14,8,8
   107                        	.eos
   108                        	.stag	_fx_eventMessage,304,16
   109                        	.member	src,0,18,8,32
   110                        	.member	dest,32,18,8,32
   111                        	.member	type,64,16,8,16
   112                        	.member	hwnd,80,129,8,32
   113                        	.member	pheap,112,129,8,32
   114                        	.member	msgTime,144,18,8,32
   115                        	.member	data,176,110,8,0,16
   116                        	.eos
   117                        	.stag	_fx_cmdMessage,304,17
   118                        	.member	src,0,18,8,32
   119                        	.member	dest,32,18,8,32
   120                        	.member	type,64,16,8,16
   121                        	.member	hwnd,80,129,8,32
   122                        	.member	pheap,112,129,8,32
   123                        	.member	msgTime,144,18,8,32
   124                        	.member	cmdCId,176,16,8,16
   125                        	.member	cmdMId,192,16,8,16
   126                        	.member	parameter1,208,18,8,32
   127                        	.member	parameter2,240,18,8,32
   128                        	.member	parameter3,272,18,8,32
   129                        	.eos
   130                        	.stag	_fx_console_ctl,448,18
   131                        	.member	maxCols,0,5,8,16
   132                        	.member	maxRows,16,5,8,16
   133                        	.member	curX,32,5,8,16
   134                        	.member	curY,48,5,8,16
   135                        	.member	fgColor,64,5,8,16
   136                        	.member	bgColor,80,5,8,16
   137                        	.member	mode,96,14,8,8
   138                        	.member	kbBuffer,104,101,8,0,16
   139                        	.member	screenBuffer,360,142,8,32
   140                        	.member	desktopMode,392,14,8,8
   141                        	.member	lastMouseButton,400,5,8,16
   142                        	.member	lastMouseX,416,5,8,16
   143                        	.member	lastMouseY,432,5,8,16
   144                        	.eos
   145                        	.stag	_fx_desktop_ctl,392,19
   146                        	.member	desktopMode,0,14,8,8
   147                        	.member	cursorCtl,8,5,8,16
   148                        	.member	cursorState,24,5,8,16
   149                        	.member	backgroundColor,40,5,8,16
   150                        	.member	foregroundColor,56,5,8,16
   151                        	.member	menuMode,72,5,8,16
   152                        	.member	lastMouseButton,88,5,8,16
   153                        	.member	lastMouseX,104,5,8,16
   154                        	.member	lastMouseY,120,5,8,16
   155                        	.member	currentDiskName,136,142,8,32
   156                        	.member	diskNodes,168,129,8,32
   157                        	.member	titleNodes,200,129,8,32
  Sat Jul 10 2021  1:15                                                Page 4


   158                        	.member	menuNodes,232,129,8,32
   159                        	.member	iconNodes,264,129,8,32
   160                        	.member	windowNodes,296,129,8,32
   161                        	.member	fontNodes,328,129,8,32
   162                        	.member	wndProc,360,138,8,32,6
   163                        	.eos
   164                        	.stag	_fx_process,800,20
   165                        	.member	cbSize,0,5,8,16
   166                        	.member	procId,16,18,8,32
   167                        	.member	parentId,48,18,8,32
   168                        	.member	ctx,80,129,8,32
   169                        	.member	userId,112,16,8,16
   170                        	.member	status,128,16,8,16
   171                        	.member	foregroundActive,144,14,8,8
   172                        	.member	tls,152,1121,8,32,8
   173                        	.member	commandLine,408,142,8,32
   174                        	.member	semaphores,440,138,8,32,6
   175                        	.member	fileHandles,472,138,8,32,6
   176                        	.member	pathList,504,138,8,32,6
   177                        	.member	resources,536,138,8,32,6
   178                        	.member	timerAware,568,14,8,8
   179                        	.member	timerTicks,576,112,8,0,2
   180                        	.member	timerTickCount,608,112,8,0,2
   181                        	.member	kernelError,640,10,8,32,8
   182                        	.member	consoleCtl,672,138,8,32,18
   183                        	.member	desktopCtl,704,138,8,32,19
   184                        	.member	execProc,736,641,8,32
   185                        	.member	startupArgs,768,129,8,32
   186                        	.eos
   187                        	.stag	_fxProcessMessage,112,21
   188                        	.member	src,0,18,8,32
   189                        	.member	dest,32,18,8,32
   190                        	.member	type,64,16,8,16
   191                        	.member	processInfo,80,138,8,32,20
   192                        	.eos
   193                        	.stag	_k_key_state,112,22
   194                        	.member	scanCode,0,14,8,8
   195                        	.member	isShifted,8,14,8,8
   196                        	.member	isAlt,16,14,8,8
   197                        	.member	isExtended,24,14,8,8
   198                        	.member	isCapsLock,32,14,8,8
   199                        	.member	isNumLock,40,14,8,8
   200                        	.member	isScrollLock,48,14,8,8
   201                        	.member	keyChar,56,16,8,16
   202                        	.member	scanTime,72,18,8,32
   203                        	.member	ledStatus,104,14,8,8
   204                        	.eos
   205                        	.stag	_fx_property,384,23
   206                        	.member	name,0,110,8,0,16
   207                        	.member	value,128,110,8,0,32
   208                        	.eos
   209                        	.utag	_24bitPointer,32,24
   210                        	.member	address,0,142,11,32
   211                        	.member	bytes,0,110,11,0,4
   212                        	.eos
   213                        	.stag	_PointStruct,32,25
   214                        	.member	x,0,5,8,16
   215                        	.member	y,16,5,8,16
  Sat Jul 10 2021  1:15                                                Page 5


   216                        	.eos
   217                        	.stag	_RectStruct,112,26
   218                        	.member	x,0,5,8,16
   219                        	.member	y,16,5,8,16
   220                        	.member	z,32,18,8,32
   221                        	.member	width,64,5,8,16
   222                        	.member	height,80,5,8,16
   223                        	.member	attr,96,5,8,16
   224                        	.eos
   225                        	.stag	fake27_,96,27
   226                        	.member	name,0,142,8,32
   227                        	.member	topLeft,32,10,8,32,25
   228                        	.member	bottomRight,64,10,8,32,25
   229                        	.eos
   230                        	.stag	fake28_,112,28
   231                        	.member	x,0,5,8,16
   232                        	.member	y,16,5,8,16
   233                        	.member	z,32,5,8,16
   234                        	.member	width,48,5,8,16
   235                        	.member	height,64,5,8,16
   236                        	.member	data,80,18,8,32
   237                        	.eos
   238                        	.stag	_k_WindowClass,272,29
   239                        	.member	cbSize,0,16,8,16
   240                        	.member	style,16,16,8,16
   241                        	.member	styleEx,32,16,8,16
   242                        	.member	pWndProc,48,654,8,32
   243                        	.member	hInstance,80,129,8,32
   244                        	.member	hIcon,112,129,8,32
   245                        	.member	hCursor,144,129,8,32
   246                        	.member	hbrBackground,176,129,8,32
   247                        	.member	lpszMenuName,208,142,8,32
   248                        	.member	lpszClassName,240,142,8,32
   249                        	.eos
   250                        	.stag	_ClickableRect,152,30
   251                        	.member	area,0,10,8,112,26
   252                        	.member	z,112,18,8,32
   253                        	.member	enabled,144,14,8,8
   254                        	.eos
   255                        	.stag	_NCClickableRect,136,31
   256                        	.member	area,0,10,8,112,26
   257                        	.member	msgType,112,16,8,16
   258                        	.member	enabled,128,14,8,8
   259                        	.eos
   260                        	.stag	_DragData,216,32
   261                        	.member	area,0,10,8,112,26
   262                        	.member	xoffset,112,5,8,16
   263                        	.member	yoffset,128,5,8,16
   264                        	.member	msgType,144,16,8,16
   265                        	.member	ncAction,160,16,8,16
   266                        	.member	isDrag,176,14,8,8
   267                        	.member	isResize,184,14,8,8
   268                        	.member	canDrag,192,14,8,8
   269                        	.member	canDrop,200,14,8,8
   270                        	.member	didDrag,208,14,8,8
   271                        	.eos
   272                        	.stag	_k_WindowStruct,3904,33
   273                        	.member	cbSize,0,16,8,16
  Sat Jul 10 2021  1:15                                                Page 6


   274                        	.member	style,16,18,8,32
   275                        	.member	styleEx,48,18,8,32
   276                        	.member	win_id,80,5,8,16
   277                        	.member	win_x,96,5,8,16
   278                        	.member	win_y,112,5,8,16
   279                        	.member	win_width,128,5,8,16
   280                        	.member	win_height,144,5,8,16
   281                        	.member	win_xoffset,160,5,8,16
   282                        	.member	win_yoffset,176,5,8,16
   283                        	.member	win_cxoffset,192,5,8,16
   284                        	.member	win_cyoffset,208,5,8,16
   285                        	.member	wndRect,224,10,8,112,26
   286                        	.member	clientRect,336,10,8,112,26
   287                        	.member	nonclientGadgets,448,106,8,0,31,16
   288                        	.member	clickable,2624,129,8,32
   289                        	.member	win_title,2656,110,8,0,32
   290                        	.member	Reserved0,2912,16,8,16
   291                        	.member	win_class,2928,110,8,0,16
   292                        	.member	win_class_name,3056,110,8,0,32
   293                        	.member	nBitmapLayer,3312,16,8,16
   294                        	.member	bgRegion,3328,129,8,32
   295                        	.member	procid,3360,18,8,32
   296                        	.member	pWndClass,3392,138,8,32,29
   297                        	.member	pParentWindow,3424,129,8,32
   298                        	.member	hMenu,3456,129,8,32
   299                        	.member	hPointer,3488,129,8,32
   300                        	.member	hBackground,3520,129,8,32
   301                        	.member	pChildWindows,3552,138,8,32,6
   302                        	.member	pChildHitList,3584,138,8,32,6
   303                        	.member	isVisible,3616,14,8,8
   304                        	.member	windowData,3624,129,8,32
   305                        	.member	clientData,3656,1121,8,32,6
   306                        	.member	isClosed,3848,14,8,8
   307                        	.member	isClosing,3856,14,8,8
   308                        	.member	isDesktop,3864,14,8,8
   309                        	.member	clickableNode,3872,138,8,32,5
   310                        	.eos
   311                        	.stag	_k_WindowStructEx,3880,34
   312                        	.member	cbSize,0,16,8,16
   313                        	.member	style,16,18,8,32
   314                        	.member	styleEx,48,18,8,32
   315                        	.member	win_id,80,5,8,16
   316                        	.member	win_x,96,5,8,16
   317                        	.member	win_y,112,5,8,16
   318                        	.member	win_width,128,5,8,16
   319                        	.member	win_height,144,5,8,16
   320                        	.member	win_xoffset,160,5,8,16
   321                        	.member	win_yoffset,176,5,8,16
   322                        	.member	win_cxoffset,192,5,8,16
   323                        	.member	win_cyoffset,208,5,8,16
   324                        	.member	wndRect,224,10,8,112,26
   325                        	.member	clientRect,336,10,8,112,26
   326                        	.member	nonclientGadgets,448,106,8,0,31,16
   327                        	.member	clickable,2624,129,8,32
   328                        	.member	win_title,2656,110,8,0,32
   329                        	.member	Reserved0,2912,16,8,16
   330                        	.member	win_class,2928,110,8,0,16
   331                        	.member	nBitmapLayer,3056,16,8,16
  Sat Jul 10 2021  1:15                                                Page 7


   332                        	.member	procid,3072,18,8,32
   333                        	.member	pWndClass,3104,138,8,32,29
   334                        	.member	pParentWindow,3136,129,8,32
   335                        	.member	hMenu,3168,129,8,32
   336                        	.member	hPointer,3200,129,8,32
   337                        	.member	hBackground,3232,129,8,32
   338                        	.member	pChildWindows,3264,138,8,32,6
   339                        	.member	pChildHitList,3296,138,8,32,6
   340                        	.member	isVisible,3328,14,8,8
   341                        	.member	windowData,3336,129,8,32
   342                        	.member	clientData,3368,1121,8,32,4
   343                        	.member	isClosed,3496,14,8,8
   344                        	.member	hWnd,3504,129,8,32
   345                        	.member	localRect,3536,10,8,112,26
   346                        	.member	globalRect,3648,10,8,112,26
   347                        	.member	clientOffsetRect,3760,10,8,112,26
   348                        	.member	isDesktop,3872,14,8,8
   349                        	.eos
   350                        	.stag	_FontMetric,32,35
   351                        	.member	width,0,5,8,16
   352                        	.member	height,16,5,8,16
   353                        	.eos
   354                        	.stag	_MenuStruct,280,36
   355                        	.member	cx,0,5,8,16
   356                        	.member	cy,16,5,8,16
   357                        	.member	width,32,5,8,16
   358                        	.member	height,48,5,8,16
   359                        	.member	fcolor,64,14,8,8
   360                        	.member	bcolor,72,14,8,8
   361                        	.member	chromeLeft,80,14,8,8
   362                        	.member	chromeRight1,88,14,8,8
   363                        	.member	chromeRight2,96,14,8,8
   364                        	.member	hFont,104,129,8,32
   365                        	.member	itemId,136,16,8,16
   366                        	.member	pCaption,152,142,8,32
   367                        	.member	subMenus,184,138,8,32,6
   368                        	.member	pBackground,216,129,8,32
   369                        	.member	hWndOwner,248,129,8,32
   370                        	.eos
   371                        	.stag	fake37_,160,37
   372                        	.member	menuId,0,16,8,16
   373                        	.member	caption,16,142,8,32
   374                        	.member	rect,48,10,8,112,26
   375                        	.eos
   376                        	.stag	fake38_,5152,38
   377                        	.member	pParent,0,138,8,32,33
   378                        	.member	rect,32,10,8,112,26
   379                        	.member	captions,144,1134,8,32,24
   380                        	.member	chrome,912,110,8,0,24
   381                        	.member	ids,1104,112,8,0,24
   382                        	.member	clickable,1488,106,8,0,30,24
   383                        	.member	selected,5136,16,8,16
   384                        	.eos
   385                        	.stag	_fx_button_t,96,39
   386                        	.member	pCaption,0,142,8,32
   387                        	.member	cCaption,32,16,8,16
   388                        	.member	data,48,129,8,32
   389                        	.member	captionPixelWidth,80,16,8,16
  Sat Jul 10 2021  1:15                                                Page 8


   390                        	.eos
   391                        	.stag	_fx_scrollbar_t,240,40
   392                        	.member	min,0,16,8,16
   393                        	.member	max,16,16,8,16
   394                        	.member	increment,32,16,8,16
   395                        	.member	stopsize,48,16,8,16
   396                        	.member	location,64,5,8,16
   397                        	.member	state,80,5,8,16
   398                        	.member	rectThumb,96,10,8,112,26
   399                        	.member	data,208,129,8,32
   400                        	.eos
   401                        	.stag	_fx_listbox_t,240,41
   402                        	.member	pos,0,5,8,16
   403                        	.member	selected,16,16,8,16
   404                        	.member	offsetX,32,5,8,16
   405                        	.member	offsetY,48,5,8,16
   406                        	.member	inc,64,5,8,16
   407                        	.member	direction,80,5,8,16
   408                        	.member	top,96,5,8,16
   409                        	.member	bottom,112,5,8,16
   410                        	.member	indexTop,128,5,8,16
   411                        	.member	indexBottom,144,5,8,16
   412                        	.member	maxItems,160,16,8,16
   413                        	.member	fontSet,176,142,8,32
   414                        	.member	data,208,129,8,32
   415                        	.eos
   416                        	.stag	_fx_textbox_t,144,42
   417                        	.member	pos,0,5,8,16
   418                        	.member	selected,16,16,8,16
   419                        	.member	offsetX,32,5,8,16
   420                        	.member	offsetY,48,5,8,16
   421                        	.member	isShifted,64,14,8,8
   422                        	.member	cursorState,72,14,8,8
   423                        	.member	fontSet,80,142,8,32
   424                        	.member	data,112,129,8,32
   425                        	.eos
   426                        	.stag	_fx_msgbox_t,144,43
   427                        	.member	pos,0,5,8,16
   428                        	.member	selected,16,16,8,16
   429                        	.member	offsetX,32,5,8,16
   430                        	.member	offsetY,48,5,8,16
   431                        	.member	isShifted,64,14,8,8
   432                        	.member	cursorState,72,14,8,8
   433                        	.member	fontSet,80,142,8,32
   434                        	.member	data,112,129,8,32
   435                        	.eos
   436                        	.stag	_fx_menuAnchor_t,272,44
   437                        	.member	pCaption,0,142,8,32
   438                        	.member	renderLayoutX,32,16,8,16
   439                        	.member	renderLayoutY,48,16,8,16
   440                        	.member	captionPixelWidth,64,16,8,16
   441                        	.member	data,80,129,8,32
   442                        	.member	droppedWindow,112,138,8,32,33
   443                        	.member	bytes,144,110,8,0,16
   444                        	.eos
   445                        	.stag	_SubMenuStruct,64,45
   446                        	.member	caption,0,142,8,32
   447                        	.member	action,32,641,8,32
  Sat Jul 10 2021  1:15                                                Page 9


   448                        	.eos
   449                        	.stag	_SubMenuListStruct,40,46
   450                        	.member	cMenus,0,14,8,8
   451                        	.member	psubmenus,8,9354,8,32,45
   452                        	.eos
   453                        	.stag	_fx_ComBuffer,2080,47
   454                        	.member	cbSize,0,16,8,16
   455                        	.member	cbBuffer,16,16,8,16
   456                        	.member	buffer,32,110,8,0,256
   457                        	.eos
   458                        	.stag	_fx_resource_header,72,48
   459                        	.member	magic,0,110,8,0,4
   460                        	.member	major,32,14,8,8
   461                        	.member	minor,40,14,8,8
   462                        	.member	type,48,14,8,8
   463                        	.member	reserved,56,14,8,8
   464                        	.member	resheaderSize,64,14,8,8
   465                        	.eos
   466                        	.stag	_fx_resource_header_font,144,49
   467                        	.member	title,0,110,8,0,16
   468                        	.member	height,128,14,8,8
   469                        	.member	width,136,14,8,8
   470                        	.eos
   471                        	.line	1010
   472                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   473                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   474                        	.line	89
   475                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   476                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   477                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   478                        	.line	1010
   479                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",5
   480                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   481                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   482                        	.line	1010
   483                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   484                        	.line	72
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   486                        	.line	1960
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   489                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   490                        	.line	30
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
  Sat Jul 10 2021  1:15                                                Page 10


   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   493                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   494                        	.line	1010
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   496                        	.line	114
   497                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   498                        	.stag	_fx_api_call_table,8192,50
   499                        	.member	call_table,0,1121,8,32,256
   500                        	.eos
   501                        	.stag	_fx_zero_page,824,51
   502                        	.member	fxos_mouse_byte_0,0,14,8,8
   503                        	.member	fxos_mouse_byte_1,8,14,8,8
   504                        	.member	fxos_mouse_byte_2,16,14,8,8
   505                        	.member	fxos_mouse_byte_t,24,14,8,8
   506                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   507                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   508                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   509                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   510                        	.member	fxos_key_byte_0,64,14,8,8
   511                        	.member	fxos_key_byte_1,72,14,8,8
   512                        	.member	fxos_key_byte_2,80,14,8,8
   513                        	.member	fxos_mouse_ctl,88,14,8,8
   514                        	.member	fxos_mouse_index,96,14,8,8
   515                        	.member	fxos_mouse_status,104,14,8,8
   516                        	.member	fxos_mouse_dbg_1,112,18,8,32
   517                        	.member	fxos_mouse_dbg_2,144,18,8,32
   518                        	.member	fxos_mouse_dbg_3,176,18,8,32
   519                        	.member	fxos_vicky_byte_0,208,14,8,8
   520                        	.member	fxos_vicky_byte_1,216,14,8,8
   521                        	.member	fxos_vicky_byte_2,224,14,8,8
   522                        	.member	VersionMajor,232,16,8,16
   523                        	.member	VersionMinor,248,16,8,16
   524                        	.member	VersionRelease,264,16,8,16
   525                        	.member	topMemory,280,18,8,32
   526                        	.member	bottomMemory,312,18,8,32
   527                        	.member	availableMemory,344,18,8,32
   528                        	.member	availableMemoryK,376,18,8,32
   529                        	.member	availableHeapMemory,408,18,8,32
   530                        	.member	availableHeapMemoryK,440,18,8,32
   531                        	.member	fxos_console_row,472,16,8,16
   532                        	.member	fxos_console_col,488,16,8,16
   533                        	.member	executive,504,129,8,32
   534                        	.member	eventmanager,536,129,8,32
   535                        	.member	devicemanager,568,129,8,32
   536                        	.member	windowmanager,600,129,8,32
   537                        	.member	fxos_kernel_api,632,138,8,32,50
   538                        	.member	fxos_dos_api,664,138,8,32,50
   539                        	.member	fxos_gfx_api,696,138,8,32,50
   540                        	.member	fxos_gui_api,728,138,8,32,50
   541                        	.member	fxos_con_api,760,138,8,32,50
   542                        	.member	fxos_reserved_2_api,792,138,8,32,50
   543                        	.eos
   544                        	.stag	_fx_environment,96,52
   545                        	.member	variables,0,142,8,32
  Sat Jul 10 2021  1:15                                                Page 11


   546                        	.member	reserved1,32,5,8,16
   547                        	.member	reserved2,48,5,8,16
   548                        	.member	reserved3,64,5,8,16
   549                        	.member	reserved4,80,5,8,16
   550                        	.eos
   551                        	.stag	_debug_byte_bits,8,53
   552                        	.member	bit7,0,14,17,1
   553                        	.member	bit6,1,14,17,1
   554                        	.member	bit5,2,14,17,1
   555                        	.member	bit4,3,14,17,1
   556                        	.member	bit3,4,14,17,1
   557                        	.member	bit2,5,14,17,1
   558                        	.member	bit1,6,14,17,1
   559                        	.member	bit0,7,14,17,1
   560                        	.eos
   561                        	.stag	_k_segmentheader,160,54
   562                        	.member	version_major,0,14,8,8
   563                        	.member	version_minor,8,14,8,8
   564                        	.member	length,16,5,8,16
   565                        	.member	segment_start_addr,32,7,8,32
   566                        	.member	segment_end_addr,64,7,8,32
   567                        	.member	segment_size,96,7,8,32
   568                        	.member	main_entry_addr,128,7,8,32
   569                        	.eos
   570                        	.stag	_fx_device_driver,776,55
   571                        	.member	name,0,110,8,0,32
   572                        	.member	version,256,110,8,0,16
   573                        	.member	hmajor,384,110,8,0,8
   574                        	.member	hminor,448,110,8,0,8
   575                        	.member	type,512,14,8,8
   576                        	.member	designation,520,110,8,0,6
   577                        	.member	reserved_1,568,16,8,16
   578                        	.member	f_driver_irq,584,129,8,32
   579                        	.member	driver_context,616,129,8,32
   580                        	.member	f_driver_load,648,129,8,32
   581                        	.member	f_driver_read,680,129,8,32
   582                        	.member	f_driver_write,712,129,8,32
   583                        	.member	f_driver_unload,744,129,8,32
   584                        	.eos
   585                        	.stag	_fx_block_device_driver,808,56
   586                        	.member	name,0,110,8,0,32
   587                        	.member	version,256,110,8,0,16
   588                        	.member	hmajor,384,110,8,0,8
   589                        	.member	hminor,448,110,8,0,8
   590                        	.member	type,512,14,8,8
   591                        	.member	designation,520,110,8,0,6
   592                        	.member	reserved_1,568,16,8,16
   593                        	.member	f_driver_irq,584,129,8,32
   594                        	.member	driver_context,616,129,8,32
   595                        	.member	f_driver_load,648,129,8,32
   596                        	.member	f_driver_read,680,129,8,32
   597                        	.member	f_driver_write,712,129,8,32
   598                        	.member	f_driver_unload,744,129,8,32
   599                        	.member	f_driver_command,776,129,8,32
   600                        	.eos
   601                        	.line	400
   602                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
  Sat Jul 10 2021  1:15                                                Page 12


   603                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   604                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   605                        	.line	134
   606                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   607                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   608                        	.line	205
   609                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   611                        	.line	1010
   612                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   614                        	.line	1960
   615                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
   616                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   617                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   618                        	.line	205
   619                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   620                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   621                        	.line	134
   622                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   623                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   624                        	.line	1010
   625                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   626                        	.stag	_fx_string,64,57
   627                        	.member	size,0,16,8,16
   628                        	.member	pos,16,5,8,16
   629                        	.member	buffer,32,142,8,32
   630                        	.eos
   631                        	.line	139
   632                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   633                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   635                        	.line	30
   636                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   637                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   638                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
  Sat Jul 10 2021  1:15                                                Page 13


   639                        	.line	1010
   640                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   641                        	.stag	_fxos_executive_vtable,128,58
   642                        	.member	Init,0,8833,8,32
   643                        	.member	Configure,32,656,8,32
   644                        	.member	Query,64,656,8,32
   645                        	.member	Uninit,96,641,8,32
   646                        	.eos
   647                        	.line	86
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   650                        	.line	114
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   652                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   653                        	.line	208
   654                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   655                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   656                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   657                        	.line	30
   658                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   661                        	.line	30
   662                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   664                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   665                        	.line	35
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   667                        	.stag	UMM_HEAP_INFO_t,256,59
   668                        	.member	totalEntries,0,18,8,32
   669                        	.member	usedEntries,32,18,8,32
   670                        	.member	freeEntries,64,18,8,32
   671                        	.member	totalBlocks,96,18,8,32
   672                        	.member	usedBlocks,128,18,8,32
   673                        	.member	freeBlocks,160,18,8,32
   674                        	.member	maxFreeContiguousBlocks,192,18,8,32
   675                        	.member	blockSize,224,18,8,32
   676                        	.eos
   677                        	.line	199
   678                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   679                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
  Sat Jul 10 2021  1:15                                                Page 14


   680                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   681                        	.line	1010
   682                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   683                        	.line	24
   684                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   685                        	.stag	_fx_memory_map,2072,60
   686                        	.member	availableMemory,0,18,8,32
   687                        	.member	valid_segments,32,110,8,0,255
   688                        	.eos
   689                        	.stag	_fx_ipc_port,144,61
   690                        	.member	id,0,18,8,32
   691                        	.member	type,32,14,8,8
   692                        	.member	name,40,138,8,32,57
   693                        	.member	time,72,18,8,32
   694                        	.member	queue,104,138,8,32,7
   695                        	.member	reserved_1,136,14,8,8
   696                        	.eos
   697                        	.line	105
   698                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   699                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   700                        	.line	564
   701                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   702                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   703                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   704                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   705                        	.line	1010
   706                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   707                        	.line	74
   708                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   709                        	.stag	_click_detected,64,62
   710                        	.member	window,0,138,8,32,33
   711                        	.member	handler,32,641,8,32
   712                        	.eos
   713                        	.stag	_current_palette_map,400,63
   714                        	.member	CUR_DESKTOP,0,5,8,16
   715                        	.member	CUR_BACKGROUND,16,5,8,16
   716                        	.member	CUR_FONT,32,5,8,16
   717                        	.member	CUR_SELECTED_FONT,48,5,8,16
   718                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   719                        	.member	CUR_WINDOWFRAME,80,5,8,16
   720                        	.member	CUR_WINDOWBORDER,96,5,8,16
   721                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   722                        	.member	CUR_MENU,128,5,8,16
   723                        	.member	CUR_GADGET,144,5,8,16
   724                        	.member	CUR_COLOR,160,101,8,0,15
   725                        	.eos
   726                        	.line	359
  Sat Jul 10 2021  1:15                                                Page 15


   727                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   728                        	.stag	_fxos_winman_vtable,160,64
   729                        	.member	Events,0,641,8,32
   730                        	.member	ConfigureWindowManager,32,656,8,32
   731                        	.member	ProcessWindowEvent,64,8833,8,32
   732                        	.member	QueryWindowManager,96,656,8,32
   733                        	.member	DoWndProcs,128,641,8,32
   734                        	.eos
   735                        	.stag	fake65_,64,65
   736                        	.member	type,0,16,8,16
   737                        	.member	size,16,16,8,16
   738                        	.member	desktopAction,32,129,8,32
   739                        	.eos
   740                        	.stag	fake66_,96,66
   741                        	.member	type,0,16,8,16
   742                        	.member	caption,16,138,8,32,57
   743                        	.member	buttonType,48,16,8,16
   744                        	.member	x,64,5,8,16
   745                        	.member	y,80,5,8,16
   746                        	.eos
   747                        	.stag	_childMessage_t,64,67
   748                        	.member	msgType,0,16,8,16
   749                        	.member	msgData,16,129,8,32
   750                        	.member	dataSize,48,16,8,16
   751                        	.eos
   752                        	.line	581
   753                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   754                        	.stag	_fx_main_loopvars,16,68
   755                        	.member	dummy,0,5,8,16
   756                        	.eos
   757                        	.stag	_fxMouseMessageData,64,69
   758                        	.member	button1,0,14,8,8
   759                        	.member	button2,8,14,8,8
   760                        	.member	button3,16,14,8,8
   761                        	.member	button4,24,14,8,8
   762                        	.member	x,32,16,8,16
   763                        	.member	y,48,16,8,16
   764                        	.eos
   765                        	.utag	marshalled_data,32,70
   766                        	.member	byteValue,0,14,11,8
   767                        	.member	verbValue,0,110,11,0,2
   768                        	.member	intValue,0,16,11,16
   769                        	.member	longValue,0,18,11,32
   770                        	.member	pointerValue,0,129,11,32
   771                        	.eos
   772                        	.stag	_fx_eventProcess,64,71
   773                        	.member	process,0,138,8,32,20
   774                        	.member	eventProc,32,641,8,32
   775                        	.eos
   776                        	.stag	_mouse_msg_state,184,72
   777                        	.member	lastEvent,0,18,8,32
   778                        	.member	buttonLeftDown,32,14,8,8
   779                        	.member	lastLeftDown,40,18,8,32
   780                        	.member	buttonRightDown,72,14,8,8
   781                        	.member	lastRightDown,80,18,8,32
   782                        	.member	buttonMiddleDown,112,14,8,8
  Sat Jul 10 2021  1:15                                                Page 16


   783                        	.member	lastMiddleDown,120,18,8,32
   784                        	.member	lastX,152,16,8,16
   785                        	.member	lastY,168,16,8,16
   786                        	.eos
   787                        	.stag	_fxos_eventmanager_vtable,192,73
   788                        	.member	EventQueue,0,138,8,32,7
   789                        	.member	Init,32,8833,8,32
   790                        	.member	Run,64,656,8,32
   791                        	.member	Configure,96,656,8,32
   792                        	.member	Query,128,656,8,32
   793                        	.member	Uninit,160,641,8,32
   794                        	.eos
   795                        	.stag	_k_clipboard_data,168,74
   796                        	.member	type,0,14,8,8
   797                        	.member	readable,8,110,8,0,16
   798                        	.member	data,136,129,8,32
   799                        	.eos
   800                        	.line	564
   801                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   802                        	.stag	_fx_spinner_ctx,48,75
   803                        	.member	index,0,5,8,16
   804                        	.member	spinner,16,142,8,32
   805                        	.eos
   806                        	.stag	_fx_console_ctx,1144,76
   807                        	.member	lineBufferIndex,0,5,8,16
   808                        	.member	lineBuffer,16,110,8,0,128
   809                        	.member	isShifted,1040,14,8,8
   810                        	.member	userData,1048,129,8,32
   811                        	.member	screenBuffer,1080,129,8,32
   812                        	.member	Reserved1,1112,129,8,32
   813                        	.eos
   814                        	.stag	_token,64,77
   815                        	.member	type,0,5,8,16
   816                        	.member	depth,16,16,8,16
   817                        	.member	text,32,142,8,32
   818                        	.eos
   819                        	.stag	_command_args,64,78
   820                        	.member	proc,0,656,8,32
   821                        	.member	tokens,32,138,8,32,5
   822                        	.eos
   823                        	.line	208
   824                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   825                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   826                        	.line	139
   827                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",24
   828                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   829                        	.line	114
   830                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   831                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   832                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
  Sat Jul 10 2021  1:15                                                Page 17


   833                        	.line	298
   834                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   835                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   836                        	.line	1010
   837                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   838                        	.stag	fake79_,4504,79
   839                        	.member	fs_type,0,14,8,8
   840                        	.member	pdrv,8,14,8,8
   841                        	.member	n_fats,16,14,8,8
   842                        	.member	wflag,24,14,8,8
   843                        	.member	fsi_flag,32,14,8,8
   844                        	.member	id,40,5,8,16
   845                        	.member	n_rootdir,56,5,8,16
   846                        	.member	csize,72,5,8,16
   847                        	.member	lfnbuf,88,144,8,32
   848                        	.member	last_clst,120,18,8,32
   849                        	.member	free_clst,152,18,8,32
   850                        	.member	n_fatent,184,18,8,32
   851                        	.member	fsize,216,18,8,32
   852                        	.member	volbase,248,18,8,32
   853                        	.member	fatbase,280,18,8,32
   854                        	.member	dirbase,312,18,8,32
   855                        	.member	database,344,18,8,32
   856                        	.member	winsect,376,18,8,32
   857                        	.member	win,408,110,8,0,512
   858                        	.eos
   859                        	.stag	fake80_,128,80
   860                        	.member	fs,0,138,8,32,79
   861                        	.member	id,32,5,8,16
   862                        	.member	attr,48,14,8,8
   863                        	.member	stat,56,14,8,8
   864                        	.member	sclust,64,18,8,32
   865                        	.member	objsize,96,18,8,32
   866                        	.eos
   867                        	.stag	fake81_,4400,81
   868                        	.member	obj,0,10,8,128,80
   869                        	.member	flag,128,14,8,8
   870                        	.member	err,136,14,8,8
   871                        	.member	fptr,144,18,8,32
   872                        	.member	clust,176,18,8,32
   873                        	.member	sect,208,18,8,32
   874                        	.member	dir_sect,240,18,8,32
   875                        	.member	dir_ptr,272,142,8,32
   876                        	.member	buf,304,110,8,0,512
   877                        	.eos
   878                        	.stag	fake82_,416,82
   879                        	.member	obj,0,10,8,128,80
   880                        	.member	dptr,128,18,8,32
   881                        	.member	clust,160,18,8,32
   882                        	.member	sect,192,18,8,32
   883                        	.member	dir,224,142,8,32
   884                        	.member	fn,256,110,8,0,12
   885                        	.member	blk_ofs,352,18,8,32
   886                        	.member	pat,384,142,8,32
   887                        	.eos
  Sat Jul 10 2021  1:15                                                Page 18


   888                        	.stag	fake83_,2224,83
   889                        	.member	fsize,0,18,8,32
   890                        	.member	fdate,32,5,8,16
   891                        	.member	ftime,48,5,8,16
   892                        	.member	fattrib,64,14,8,8
   893                        	.member	altname,72,110,8,0,13
   894                        	.member	fname,176,110,8,0,256
   895                        	.eos
   896                        	.stag	fake84_,80,84
   897                        	.member	fmt,0,14,8,8
   898                        	.member	n_fat,8,14,8,8
   899                        	.member	align,16,16,8,16
   900                        	.member	n_root,32,16,8,16
   901                        	.member	au_size,48,18,8,32
   902                        	.eos
   903                        	.line	429
   904                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",26
   905                        	.line	30
   906                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",2
   907                        ;#include "fxexec.h"
   908                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   909                        	.line	86
   910                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",3
   911                        ;#include "fxdos.h"
   912                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",0
   913                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   914                        	.line	1010
   915                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",5
   916                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   917                        	.line	429
   918                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",6
   919                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\diskio.h",0
   920                        	.line	85
   921                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",7
   922                        	.stag	_fx_sd_direntry,256,85
   923                        	.member	filename,0,110,8,0,11
   924                        	.member	type,88,14,8,8
   925                        	.member	attrs,96,110,8,0,20
   926                        	.eos
   927                        	.stag	_fx_info,416,86
   928                        	.member	stgName,0,110,8,0,32
   929                        	.member	Reserved1,256,14,8,8
   930                        	.member	stgType,264,16,8,16
   931                        	.member	Reserved2,280,14,8,8
   932                        	.member	stgReserved,288,110,8,0,16
   933                        	.eos
   934                        	.stag	_fx_fileinfo,136,87
  Sat Jul 10 2021  1:15                                                Page 19


   935                        	.member	type,0,14,8,8
   936                        	.member	pFilename,8,142,8,32
   937                        	.member	lSize,40,18,8,32
   938                        	.member	lcreateDate,72,18,8,32
   939                        	.member	lchangeDate,104,18,8,32
   940                        	.eos
   941                        	.stag	_FX_FAT_DIR_INFO,256,88
   942                        	.member	DIR_Name,0,110,8,0,11
   943                        	.member	DIR_Attr,88,14,8,8
   944                        	.member	DIR_NTRes,96,14,8,8
   945                        	.member	DIR_CrtTimeTenth,104,14,8,8
   946                        	.member	DIR_CrtTime,112,16,8,16
   947                        	.member	DIR_CrtDate,128,16,8,16
   948                        	.member	DIR_LstAccDate,144,16,8,16
   949                        	.member	DIR_FstClusHI,160,16,8,16
   950                        	.member	DIR_WrtTime,176,16,8,16
   951                        	.member	DIR_WrtDate,192,16,8,16
   952                        	.member	DIR_FstClusLO,208,16,8,16
   953                        	.member	DIR_FileSize,224,18,8,32
   954                        	.eos
   955                        	.stag	fat_extBS_32,416,89
   956                        	.member	table_size_32,0,18,8,32
   957                        	.member	extended_flags,32,16,8,16
   958                        	.member	fat_version,48,16,8,16
   959                        	.member	root_cluster,64,18,8,32
   960                        	.member	fat_info,96,16,8,16
   961                        	.member	backup_BS_sector,112,16,8,16
   962                        	.member	reserved_0,128,110,8,0,12
   963                        	.member	drive_number,224,14,8,8
   964                        	.member	reserved_1,232,14,8,8
   965                        	.member	boot_signature,240,14,8,8
   966                        	.member	volume_id,248,16,8,16
   967                        	.member	volume_label,264,110,8,0,11
   968                        	.member	fat_type_label,352,110,8,0,8
   969                        	.eos
   970                        	.stag	fat_extBS_16,192,90
   971                        	.member	bios_drive_num,0,14,8,8
   972                        	.member	reserved1,8,14,8,8
   973                        	.member	boot_signature,16,14,8,8
   974                        	.member	volume_id,24,16,8,16
   975                        	.member	volume_label,40,110,8,0,11
   976                        	.member	fat_type_label,128,110,8,0,8
   977                        	.eos
   978                        	.stag	fat_BS,688,91
   979                        	.member	bootjmp,0,110,8,0,3
   980                        	.member	oem_name,24,110,8,0,8
   981                        	.member	bytes_per_sector,88,16,8,16
   982                        	.member	sectors_per_cluster,104,14,8,8
   983                        	.member	reserved_sector_count,112,16,8,16
   984                        	.member	table_count,128,14,8,8
   985                        	.member	root_entry_count,136,16,8,16
   986                        	.member	total_sectors_16,152,16,8,16
   987                        	.member	media_type,168,14,8,8
   988                        	.member	table_size_16,176,16,8,16
   989                        	.member	sectors_per_track,192,16,8,16
   990                        	.member	head_side_count,208,16,8,16
   991                        	.member	hidden_sector_count,224,16,8,16
   992                        	.member	total_sectors_32,240,16,8,16
  Sat Jul 10 2021  1:15                                                Page 20


   993                        	.member	extended_section,256,110,8,0,54
   994                        	.eos
   995                        	.stag	__FATBootSector,928,92
   996                        	.member	bootjmp,0,110,8,0,3
   997                        	.member	oem_name,24,110,8,0,8
   998                        	.member	bytes_per_sector,88,16,8,16
   999                        	.member	sectors_per_cluster,104,14,8,8
  1000                        	.member	reserved_sector_count,112,16,8,16
  1001                        	.member	fat_table_count,128,14,8,8
  1002                        	.member	root_entry_count,136,16,8,16
  1003                        	.member	total_sectors_16,152,16,8,16
  1004                        	.member	media_type,168,14,8,8
  1005                        	.member	sectors_per_fat,176,16,8,16
  1006                        	.member	sectors_per_track,192,16,8,16
  1007                        	.member	head_side_count,208,16,8,16
  1008                        	.member	hidden_sector_count,224,18,8,32
  1009                        	.member	total_sectors_32,256,18,8,32
  1010                        	.member	drive_number,288,14,8,8
  1011                        	.member	reserved1,296,14,8,8
  1012                        	.member	boot_sig,304,14,8,8
  1013                        	.member	vol_id,312,18,8,32
  1014                        	.member	vol_name,344,110,8,0,11
  1015                        	.member	file_system_type,432,110,8,0,8
  1016                        	.member	extended_section,496,110,8,0,54
  1017                        	.eos
  1018                        	.stag	__PARTITIONTABLE,128,93
  1019                        	.member	first_byte,0,14,8,8
  1020                        	.member	start_chs,8,110,8,0,3
  1021                        	.member	partition_type,32,14,8,8
  1022                        	.member	end_chs,40,110,8,0,3
  1023                        	.member	start_sector,64,18,8,32
  1024                        	.member	length_sectors,96,18,8,32
  1025                        	.eos
  1026                        	.stag	fake94_,4096,94
  1027                        	.member	jmp,0,110,8,0,3
  1028                        	.member	oem,24,110,8,0,8
  1029                        	.member	sector_size,88,15,8,16
  1030                        	.member	sectors_per_cluster,104,14,8,8
  1031                        	.member	reserved_sectors,112,15,8,16
  1032                        	.member	number_ok_dos_fats,128,14,8,8
  1033                        	.member	root_dir_entries,136,15,8,16
  1034                        	.member	total_sectors_short,152,15,8,16
  1035                        	.member	media_descriptor,168,14,8,8
  1036                        	.member	fat_size_sectors,176,15,8,16
  1037                        	.member	sectors_per_track,192,15,8,16
  1038                        	.member	number_ok_dos_heads,208,15,8,16
  1039                        	.member	hidden_sectors,224,18,8,32
  1040                        	.member	total_sectors_long,256,18,8,32
  1041                        	.member	drive_number,288,14,8,8
  1042                        	.member	current_head,296,14,8,8
  1043                        	.member	boot_signature,304,14,8,8
  1044                        	.member	volume_id,312,18,8,32
  1045                        	.member	volume_label,344,110,8,0,11
  1046                        	.member	fs_type,432,110,8,0,8
  1047                        	.member	boot_code,496,110,8,0,448
  1048                        	.member	boot_sector_signature,4080,15,8,16
  1049                        	.eos
  1050                        	.stag	__FAT16ENTRY,256,95
  Sat Jul 10 2021  1:15                                                Page 21


  1051                        	.member	filename,0,110,8,0,8
  1052                        	.member	ext,64,110,8,0,3
  1053                        	.member	attributes,88,14,8,8
  1054                        	.member	reserved,96,110,8,0,10
  1055                        	.member	modify_time,176,16,8,16
  1056                        	.member	modify_date,192,16,8,16
  1057                        	.member	starting_cluster,208,16,8,16
  1058                        	.member	file_size,224,18,8,32
  1059                        	.eos
  1060                        	.stag	__FAT16ENTRYLONG,288,96
  1061                        	.member	filename,0,110,8,0,8
  1062                        	.member	ext,64,110,8,0,3
  1063                        	.member	attributes,88,14,8,8
  1064                        	.member	reserved,96,110,8,0,10
  1065                        	.member	modify_time,176,16,8,16
  1066                        	.member	modify_date,192,16,8,16
  1067                        	.member	starting_cluster,208,16,8,16
  1068                        	.member	file_size,224,18,8,32
  1069                        	.member	plongfileName,256,142,8,32
  1070                        	.eos
  1071                        	.stag	_LongFileName,256,97
  1072                        	.member	sequenceNo,0,14,8,8
  1073                        	.member	fileName_Part1,8,110,8,0,10
  1074                        	.member	fileattribute,88,14,8,8
  1075                        	.member	type,96,14,8,8
  1076                        	.member	checksum,104,14,8,8
  1077                        	.member	fileName_Part2,112,110,8,0,12
  1078                        	.member	fstclusLO,208,5,8,16
  1079                        	.member	fileName_Part3,224,110,8,0,4
  1080                        	.eos
  1081                        	.stag	_IDSECTOR,2048,98
  1082                        	.member	wGenConfig,0,16,8,16
  1083                        	.member	wNumCyls,16,16,8,16
  1084                        	.member	wReserved,32,16,8,16
  1085                        	.member	wNumHeads,48,16,8,16
  1086                        	.member	wBytesPerTrack,64,16,8,16
  1087                        	.member	wBytesPerSector,80,16,8,16
  1088                        	.member	wSectorsPerTrack,96,16,8,16
  1089                        	.member	wVendorUnique,112,112,8,0,3
  1090                        	.member	sSerialNumber,160,110,8,0,20
  1091                        	.member	wBufferType,320,16,8,16
  1092                        	.member	wBufferSize,336,16,8,16
  1093                        	.member	wECCSize,352,16,8,16
  1094                        	.member	sFirmwareRev,368,110,8,0,8
  1095                        	.member	sModelNumber,432,110,8,0,40
  1096                        	.member	wMoreVendorUnique,752,16,8,16
  1097                        	.member	wDoubleWordIO,768,16,8,16
  1098                        	.member	wCapabilities,784,16,8,16
  1099                        	.member	wReserved1,800,16,8,16
  1100                        	.member	wPIOTiming,816,16,8,16
  1101                        	.member	wDMATiming,832,16,8,16
  1102                        	.member	wBS,848,16,8,16
  1103                        	.member	wNumCurrentCyls,864,16,8,16
  1104                        	.member	wNumCurrentHeads,880,16,8,16
  1105                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1106                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1107                        	.member	wMultSectorStuff,944,16,8,16
  1108                        	.member	ulTotalAddressableSectors,960,18,8,32
  Sat Jul 10 2021  1:15                                                Page 22


  1109                        	.member	wSingleWordDMA,992,16,8,16
  1110                        	.member	wMultiWordDMA,1008,16,8,16
  1111                        	.member	bReserved,1024,110,8,0,128
  1112                        	.eos
  1113                        	.stag	fake99_,16,99
  1114                        	.member	Reserved1,0,16,17,1
  1115                        	.member	Retired3,1,16,17,1
  1116                        	.member	ResponseIncomplete,2,16,17,1
  1117                        	.member	Retired2,3,16,17,3
  1118                        	.member	FixedDevice,6,16,17,1
  1119                        	.member	RemovableMedia,7,16,17,1
  1120                        	.member	Retired1,8,16,17,7
  1121                        	.member	DeviceType,15,16,17,1
  1122                        	.eos
  1123                        	.stag	fake100_,16,100
  1124                        	.member	FeatureSupported,0,16,17,1
  1125                        	.member	Reserved,1,16,17,15
  1126                        	.eos
  1127                        	.stag	fake101_,32,101
  1128                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1129                        	.member	ReservedByte49,2,14,17,6
  1130                        	.member	DmaSupported,8,14,17,1
  1131                        	.member	LbaSupported,9,14,17,1
  1132                        	.member	IordyDisable,10,14,17,1
  1133                        	.member	IordySupported,11,14,17,1
  1134                        	.member	Reserved1,12,14,17,1
  1135                        	.member	StandybyTimerSupport,13,14,17,1
  1136                        	.member	Reserved2,14,14,17,2
  1137                        	.member	ReservedWord50,16,16,8,16
  1138                        	.eos
  1139                        	.stag	fake102_,16,102
  1140                        	.member	ZonedCapabilities,0,16,17,2
  1141                        	.member	NonVolatileWriteCache,2,16,17,1
  1142                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1143                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1144                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1145                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1146                        	.member	IEEE1667,7,16,17,1
  1147                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1148                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1149                        	.member	WriteBufferDmaSupported,10,16,17,1
  1150                        	.member	ReadBufferDmaSupported,11,16,17,1
  1151                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  1152                        	.member	LPSAERCSupported,13,16,17,1
  1153                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1154                        	.member	CFastSpecSupported,15,16,17,1
  1155                        	.eos
  1156                        	.stag	fake103_,32,103
  1157                        	.member	Reserved0,0,16,17,1
  1158                        	.member	SataGen1,1,16,17,1
  1159                        	.member	SataGen2,2,16,17,1
  1160                        	.member	SataGen3,3,16,17,1
  1161                        	.member	Reserved1,4,16,17,4
  Sat Jul 10 2021  1:15                                                Page 23


  1162                        	.member	NCQ,8,16,17,1
  1163                        	.member	HIPM,9,16,17,1
  1164                        	.member	PhyEvents,10,16,17,1
  1165                        	.member	NcqUnload,11,16,17,1
  1166                        	.member	NcqPriority,12,16,17,1
  1167                        	.member	HostAutoPS,13,16,17,1
  1168                        	.member	DeviceAutoPS,14,16,17,1
  1169                        	.member	ReadLogDMA,15,16,17,1
  1170                        	.member	Reserved2,16,16,17,1
  1171                        	.member	CurrentSpeed,17,16,17,3
  1172                        	.member	NcqStreaming,20,16,17,1
  1173                        	.member	NcqQueueMgmt,21,16,17,1
  1174                        	.member	NcqReceiveSend,22,16,17,1
  1175                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1176                        	.member	Reserved3,24,16,17,8
  1177                        	.eos
  1178                        	.stag	fake104_,16,104
  1179                        	.member	Reserved0,0,16,17,1
  1180                        	.member	NonZeroOffsets,1,16,17,1
  1181                        	.member	DmaSetupAutoActivate,2,16,17,1
  1182                        	.member	DIPM,3,16,17,1
  1183                        	.member	InOrderData,4,16,17,1
  1184                        	.member	HardwareFeatureControl,5,16,17,1
  1185                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1186                        	.member	NCQAutosense,7,16,17,1
  1187                        	.member	DEVSLP,8,16,17,1
  1188                        	.member	HybridInformation,9,16,17,1
  1189                        	.member	Reserved1,10,16,17,6
  1190                        	.eos
  1191                        	.stag	fake105_,16,105
  1192                        	.member	Reserved0,0,16,17,1
  1193                        	.member	NonZeroOffsets,1,16,17,1
  1194                        	.member	DmaSetupAutoActivate,2,16,17,1
  1195                        	.member	DIPM,3,16,17,1
  1196                        	.member	InOrderData,4,16,17,1
  1197                        	.member	HardwareFeatureControl,5,16,17,1
  1198                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1199                        	.member	DeviceAutoPS,7,16,17,1
  1200                        	.member	DEVSLP,8,16,17,1
  1201                        	.member	HybridInformation,9,16,17,1
  1202                        	.member	Reserved1,10,16,17,6
  1203                        	.eos
  1204                        	.stag	fake106_,48,106
  1205                        	.member	SmartCommands,0,16,17,1
  1206                        	.member	SecurityMode,1,16,17,1
  1207                        	.member	RemovableMediaFeature,2,16,17,1
  1208                        	.member	PowerManagement,3,16,17,1
  1209                        	.member	Reserved1,4,16,17,1
  1210                        	.member	WriteCache,5,16,17,1
  1211                        	.member	LookAhead,6,16,17,1
  1212                        	.member	ReleaseInterrupt,7,16,17,1
  1213                        	.member	ServiceInterrupt,8,16,17,1
  1214                        	.member	DeviceReset,9,16,17,1
  1215                        	.member	HostProtectedArea,10,16,17,1
  1216                        	.member	Obsolete1,11,16,17,1
  1217                        	.member	WriteBuffer,12,16,17,1
  1218                        	.member	ReadBuffer,13,16,17,1
  1219                        	.member	Nop,14,16,17,1
  Sat Jul 10 2021  1:15                                                Page 24


  1220                        	.member	Obsolete2,15,16,17,1
  1221                        	.member	DownloadMicrocode,16,16,17,1
  1222                        	.member	DmaQueued,17,16,17,1
  1223                        	.member	Cfa,18,16,17,1
  1224                        	.member	AdvancedPm,19,16,17,1
  1225                        	.member	Msn,20,16,17,1
  1226                        	.member	PowerUpInStandby,21,16,17,1
  1227                        	.member	ManualPowerUp,22,16,17,1
  1228                        	.member	Reserved2,23,16,17,1
  1229                        	.member	SetMax,24,16,17,1
  1230                        	.member	Acoustics,25,16,17,1
  1231                        	.member	BigLba,26,16,17,1
  1232                        	.member	DeviceConfigOverlay,27,16,17,1
  1233                        	.member	FlushCache,28,16,17,1
  1234                        	.member	FlushCacheExt,29,16,17,1
  1235                        	.member	WordValid83,30,16,17,2
  1236                        	.member	SmartErrorLog,32,16,17,1
  1237                        	.member	SmartSelfTest,33,16,17,1
  1238                        	.member	MediaSerialNumber,34,16,17,1
  1239                        	.member	MediaCardPassThrough,35,16,17,1
  1240                        	.member	StreamingFeature,36,16,17,1
  1241                        	.member	GpLogging,37,16,17,1
  1242                        	.member	WriteFua,38,16,17,1
  1243                        	.member	WriteQueuedFua,39,16,17,1
  1244                        	.member	WWN64Bit,40,16,17,1
  1245                        	.member	URGReadStream,41,16,17,1
  1246                        	.member	URGWriteStream,42,16,17,1
  1247                        	.member	ReservedForTechReport,43,16,17,2
  1248                        	.member	IdleWithUnloadFeature,45,16,17,1
  1249                        	.member	WordValid,46,16,17,2
  1250                        	.eos
  1251                        	.stag	fake107_,48,107
  1252                        	.member	SmartCommands,0,16,17,1
  1253                        	.member	SecurityMode,1,16,17,1
  1254                        	.member	RemovableMediaFeature,2,16,17,1
  1255                        	.member	PowerManagement,3,16,17,1
  1256                        	.member	Reserved1,4,16,17,1
  1257                        	.member	WriteCache,5,16,17,1
  1258                        	.member	LookAhead,6,16,17,1
  1259                        	.member	ReleaseInterrupt,7,16,17,1
  1260                        	.member	ServiceInterrupt,8,16,17,1
  1261                        	.member	DeviceReset,9,16,17,1
  1262                        	.member	HostProtectedArea,10,16,17,1
  1263                        	.member	Obsolete1,11,16,17,1
  1264                        	.member	WriteBuffer,12,16,17,1
  1265                        	.member	ReadBuffer,13,16,17,1
  1266                        	.member	Nop,14,16,17,1
  1267                        	.member	Obsolete2,15,16,17,1
  1268                        	.member	DownloadMicrocode,16,16,17,1
  1269                        	.member	DmaQueued,17,16,17,1
  1270                        	.member	Cfa,18,16,17,1
  1271                        	.member	AdvancedPm,19,16,17,1
  1272                        	.member	Msn,20,16,17,1
  1273                        	.member	PowerUpInStandby,21,16,17,1
  1274                        	.member	ManualPowerUp,22,16,17,1
  1275                        	.member	Reserved2,23,16,17,1
  1276                        	.member	SetMax,24,16,17,1
  1277                        	.member	Acoustics,25,16,17,1
  Sat Jul 10 2021  1:15                                                Page 25


  1278                        	.member	BigLba,26,16,17,1
  1279                        	.member	DeviceConfigOverlay,27,16,17,1
  1280                        	.member	FlushCache,28,16,17,1
  1281                        	.member	FlushCacheExt,29,16,17,1
  1282                        	.member	Resrved3,30,16,17,1
  1283                        	.member	Words119_120Valid,31,16,17,1
  1284                        	.member	SmartErrorLog,32,16,17,1
  1285                        	.member	SmartSelfTest,33,16,17,1
  1286                        	.member	MediaSerialNumber,34,16,17,1
  1287                        	.member	MediaCardPassThrough,35,16,17,1
  1288                        	.member	StreamingFeature,36,16,17,1
  1289                        	.member	GpLogging,37,16,17,1
  1290                        	.member	WriteFua,38,16,17,1
  1291                        	.member	WriteQueuedFua,39,16,17,1
  1292                        	.member	WWN64Bit,40,16,17,1
  1293                        	.member	URGReadStream,41,16,17,1
  1294                        	.member	URGWriteStream,42,16,17,1
  1295                        	.member	ReservedForTechReport,43,16,17,2
  1296                        	.member	IdleWithUnloadFeature,45,16,17,1
  1297                        	.member	Reserved4,46,16,17,2
  1298                        	.eos
  1299                        	.stag	fake108_,16,108
  1300                        	.member	TimeRequired,0,16,17,15
  1301                        	.member	ExtendedTimeReported,15,16,17,1
  1302                        	.eos
  1303                        	.stag	fake109_,16,109
  1304                        	.member	TimeRequired,0,16,17,15
  1305                        	.member	ExtendedTimeReported,15,16,17,1
  1306                        	.eos
  1307                        	.stag	fake110_,16,110
  1308                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1309                        	.member	Reserved0,4,16,17,8
  1310                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1311                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1312                        	.member	Reserved1,14,16,17,2
  1313                        	.eos
  1314                        	.stag	fake111_,16,111
  1315                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1316                        	.member	WriteReadVerify,1,16,17,1
  1317                        	.member	WriteUncorrectableExt,2,16,17,1
  1318                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1319                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1320                        	.member	FreefallControl,5,16,17,1
  1321                        	.member	SenseDataReporting,6,16,17,1
  1322                        	.member	ExtendedPowerConditions,7,16,17,1
  1323                        	.member	Reserved0,8,16,17,6
  1324                        	.member	WordValid,14,16,17,2
  1325                        	.eos
  1326                        	.stag	fake112_,16,112
  1327                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1328                        	.member	WriteReadVerify,1,16,17,1
  1329                        	.member	WriteUncorrectableExt,2,16,17,1
  1330                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1331                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1332                        	.member	FreefallControl,5,16,17,1
  Sat Jul 10 2021  1:15                                                Page 26


  1333                        	.member	SenseDataReporting,6,16,17,1
  1334                        	.member	ExtendedPowerConditions,7,16,17,1
  1335                        	.member	Reserved0,8,16,17,6
  1336                        	.member	Reserved1,14,16,17,2
  1337                        	.eos
  1338                        	.stag	fake113_,16,113
  1339                        	.member	SecuritySupported,0,16,17,1
  1340                        	.member	SecurityEnabled,1,16,17,1
  1341                        	.member	SecurityLocked,2,16,17,1
  1342                        	.member	SecurityFrozen,3,16,17,1
  1343                        	.member	SecurityCountExpired,4,16,17,1
  1344                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1345                        	.member	Reserved0,6,16,17,2
  1346                        	.member	SecurityLevel,8,16,17,1
  1347                        	.member	Reserved1,9,16,17,7
  1348                        	.eos
  1349                        	.stag	fake114_,16,114
  1350                        	.member	MaximumCurrentInMA,0,16,17,12
  1351                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1352                        	.member	CfaPowerMode1Required,13,16,17,1
  1353                        	.member	Reserved0,14,16,17,1
  1354                        	.member	Word160Supported,15,16,17,1
  1355                        	.eos
  1356                        	.stag	fake115_,16,115
  1357                        	.member	SupportsTrim,0,16,17,1
  1358                        	.member	Reserved0,1,16,17,15
  1359                        	.eos
  1360                        	.stag	fake116_,16,116
  1361                        	.member	Supported,0,16,17,1
  1362                        	.member	Reserved0,1,16,17,1
  1363                        	.member	WriteSameSuported,2,16,17,1
  1364                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1365                        	.member	FeatureControlSuported,4,16,17,1
  1366                        	.member	DataTablesSuported,5,16,17,1
  1367                        	.member	Reserved1,6,16,17,6
  1368                        	.member	VendorSpecific,12,16,17,4
  1369                        	.eos
  1370                        	.stag	fake117_,16,117
  1371                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1372                        	.member	Word209Supported,14,16,17,1
  1373                        	.member	Reserved0,15,16,17,1
  1374                        	.eos
  1375                        	.stag	fake118_,16,118
  1376                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1377                        	.member	Reserved0,1,16,17,3
  1378                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  1379                        	.member	Reserved1,5,16,17,3
  1380                        	.member	NVCachePowerModeVersion,8,16,17,4
  1381                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1382                        	.eos
  1383                        	.stag	fake119_,16,119
  1384                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1385                        	.member	Reserved,8,14,8,8
  1386                        	.eos
  1387                        	.stag	fake120_,16,120
  1388                        	.member	MajorVersion,0,16,17,12
  Sat Jul 10 2021  1:15                                                Page 27


  1389                        	.member	TransportType,12,16,17,4
  1390                        	.eos
  1391                        	.stag	_IDENTIFY_DEVICE_DATA,4096,121
  1392                        	.member	GeneralConfiguration,0,10,8,16,99
  1393                        	.member	NumCylinders,16,16,8,16
  1394                        	.member	SpecificConfiguration,32,16,8,16
  1395                        	.member	NumHeads,48,16,8,16
  1396                        	.member	Retired1Bytes,64,110,8,0,4
  1397                        	.member	NumSectorsPerTrack,96,16,8,16
  1398                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1399                        	.member	SerialNumber,160,110,8,0,20
  1400                        	.member	Retired2,320,112,8,0,2
  1401                        	.member	Obsolete1,352,16,8,16
  1402                        	.member	FirmwareRevision,368,110,8,0,8
  1403                        	.member	ModelNumber,432,110,8,0,40
  1404                        	.member	MaximumBlockTransfer,752,14,8,8
  1405                        	.member	VendorUnique2,760,14,8,8
  1406                        	.member	TrustedComputing,768,10,8,16,100
  1407                        	.member	Capabilities,784,10,8,32,101
  1408                        	.member	ObsoleteWords51,816,112,8,0,2
  1409                        	.member	TranslationFieldsValid,848,16,17,3
  1410                        	.member	Reserved3,851,16,17,5
  1411                        	.member	FreeFallControlSensitivity,856,16,17,8
  1412                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1413                        	.member	NumberOfCurrentHeads,880,16,8,16
  1414                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1415                        	.member	CurrentSectorCapacity,912,18,8,32
  1416                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1417                        	.member	MultiSectorSettingValid,952,14,17,1
  1418                        	.member	ReservedByte59,953,14,17,3
  1419                        	.member	SanitizeFeatureSupported,956,14,17,1
  1420                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1421                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1422                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1423                        	.member	UserAddressableSectors,960,18,8,32
  1424                        	.member	ObsoleteWord62,992,16,8,16
  1425                        	.member	MultiWordDMASupport,1008,16,17,8
  1426                        	.member	MultiWordDMAActive,1016,16,17,8
  1427                        	.member	AdvancedPIOModes,1024,16,17,8
  1428                        	.member	ReservedByte64,1032,16,17,8
  1429                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1430                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1431                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1432                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1433                        	.member	AdditionalSupported,1104,10,8,16,102
  1434                        	.member	ReservedWords70,1120,112,8,0,5
  1435                        	.member	QueueDepth,1200,16,17,5
  1436                        	.member	ReservedWord75,1205,16,17,11
  1437                        	.member	SerialAtaCapabilities,1216,10,8,32,103
  1438                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    104
  1439                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,10
                    5
  1440                        	.member	MajorRevision,1280,16,8,16
  1441                        	.member	MinorRevision,1296,16,8,16
  1442                        	.member	CommandSetSupport,1312,10,8,48,106
  Sat Jul 10 2021  1:15                                                Page 28


  1443                        	.member	CommandSetActive,1360,10,8,48,107
  1444                        	.member	UltraDMASupport,1408,16,17,8
  1445                        	.member	UltraDMAActive,1416,16,17,8
  1446                        	.member	NormalSecurityEraseUnit,1424,10,8,16,108
  1447                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
                    09
  1448                        	.member	CurrentAPMLevel,1456,16,17,8
  1449                        	.member	ReservedWord91,1464,16,17,8
  1450                        	.member	MasterPasswordID,1472,16,8,16
  1451                        	.member	HardwareResetResult,1488,16,8,16
  1452                        	.member	CurrentAcousticValue,1504,16,17,8
  1453                        	.member	RecommendedAcousticValue,1512,16,17,8
  1454                        	.member	StreamMinRequestSize,1520,16,8,16
  1455                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1456                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1457                        	.member	StreamingPerfGranularity,1568,18,8,32
  1458                        	.member	Max48BitLBA,1600,114,8,0,2
  1459                        	.member	StreamingTransferTime,1664,16,8,16
  1460                        	.member	DsmCap,1680,16,8,16
  1461                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    10
  1462                        	.member	InterSeekDelay,1712,16,8,16
  1463                        	.member	WorldWideName,1728,112,8,0,4
  1464                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1465                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1466                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1467                        	.member	CommandSetSupportExt,1904,10,8,16,111
  1468                        	.member	CommandSetActiveExt,1920,10,8,16,112
  1469                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1470                        	.member	MsnSupport,2032,16,17,2
  1471                        	.member	ReservedWord127,2034,16,17,14
  1472                        	.member	SecurityStatus,2048,10,8,16,113
  1473                        	.member	ReservedWord129,2064,112,8,0,31
  1474                        	.member	CfaPowerMode1,2560,10,8,16,114
  1475                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1476                        	.member	NominalFormFactor,2688,16,17,4
  1477                        	.member	ReservedWord168,2692,16,17,12
  1478                        	.member	DataSetManagementFeature,2704,10,8,16,11
                    5
  1479                        	.member	AdditionalProductID,2720,112,8,0,4
  1480                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1481                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1482                        	.member	SCTCommandTransport,3296,10,8,16,116
  1483                        	.member	ReservedWord207,3312,112,8,0,2
  1484                        	.member	BlockAlignment,3344,10,8,16,117
  1485                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1486                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1487                        	.member	NVCacheCapabilities,3424,10,8,16,118
  1488                        	.member	NVCacheSizeLSW,3440,16,8,16
  1489                        	.member	NVCacheSizeMSW,3456,16,8,16
  1490                        	.member	NominalMediaRotationRate,3472,16,8,16
  1491                        	.member	ReservedWord218,3488,16,8,16
  Sat Jul 10 2021  1:15                                                Page 29


  1492                        	.member	NVCacheOptions,3504,10,8,16,119
  1493                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1494                        	.member	ReservedWord220,3528,16,17,8
  1495                        	.member	ReservedWord221,3536,16,8,16
  1496                        	.member	TransportMajorVersion,3552,10,8,16,120
  1497                        	.member	TransportMinorVersion,3568,16,8,16
  1498                        	.member	ReservedWord224,3584,112,8,0,6
  1499                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1500                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1501                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1502                        	.member	ReservedWord236,3776,112,8,0,19
  1503                        	.member	Signature,4080,16,17,8
  1504                        	.member	CheckSum,4088,16,17,8
  1505                        	.eos
  1506                        	.stag	_FXDosDevice,5744,122
  1507                        	.member	type,0,14,8,8
  1508                        	.member	initialized,8,14,8,8
  1509                        	.member	devdata,16,129,8,32
  1510                        	.member	devstatus,48,14,8,8
  1511                        	.member	bootSector,56,10,8,928,92
  1512                        	.member	partitionTable,984,10,8,128,93
  1513                        	.member	fileAllocationTable,1112,110,8,0,512
  1514                        	.member	bsOffset,5208,18,8,32
  1515                        	.member	rootDirSectors,5240,18,8,32
  1516                        	.member	root_entry_count,5272,5,8,16
  1517                        	.member	rootEntriesPerPage,5288,5,8,16
  1518                        	.member	sectors_per_cluster,5304,5,8,16
  1519                        	.member	firstDataSector,5320,18,8,32
  1520                        	.member	fatTableOffset,5352,18,8,32
  1521                        	.member	volume_name,5384,110,8,0,12
  1522                        	.member	root_volume_name,5480,110,8,0,12
  1523                        	.member	errorCode,5576,14,8,8
  1524                        	.member	pfInit,5584,641,8,32
  1525                        	.member	pfReset,5616,641,8,32
  1526                        	.member	pfUninit,5648,641,8,32
  1527                        	.member	pfReader,5680,654,8,32
  1528                        	.member	pfWriter,5712,654,8,32
  1529                        	.eos
  1530                        	.utag	item,32,123
  1531                        	.member	dir,0,138,11,32,82
  1532                        	.member	file,0,138,11,32,81
  1533                        	.member	fileInfo,0,138,11,32,83
  1534                        	.eos
  1535                        	.stag	_dos_handle,80,124
  1536                        	.member	fs,0,138,8,32,79
  1537                        	.member	fr,32,5,8,16
  1538                        	.member	path,48,142,8,32
  1539                        	.eos
  1540                        	.line	800
  1541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",4
  1542                        ;#include "fxmemorymanager.h"
  1543                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
  Sat Jul 10 2021  1:15                                                Page 30


  1544                        	.line	105
  1545                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",5
  1546                        ;#include "fxeventmanager.h"
  1547                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
  1548                        	.line	564
  1549                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",6
  1550                        ;#include "fxos_desktop_proc.h"
  1551                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",0
  1552                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
  1553                        	.line	1010
  1554                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",5
  1555                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
  1556                        	.line	1960
  1557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",10
  1558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
  1559                        	.line	139
  1560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",15
  1561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
  1562                        	.line	564
  1563                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",16
  1564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
  1565                        	.line	359
  1566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",17
  1567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
  1568                        	.line	581
  1569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",18
  1570                        	.stag	fake125_,32,125
  1571                        	.member	contents,0,138,8,32,57
  1572                        	.eos
  1573                        	.line	92
  1574                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",7
  1575                        ;#include "fxconsole.h"
  1576                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
  1577                        	.line	208
  1578                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",8
  1579                        ;#include "ff.h"
  1580                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
  1581                        	.line	429
  Sat Jul 10 2021  1:15                                                Page 31


  1582                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",9
  1583                        ;//#include "OMF_Load.h"
  1584                        ;//#include "OMF_Dc_Memory.h"
  1585                        ;//#include "basicfont.h"
  1586                        ;
  1587                        ;#define IDLE_PROC	(0)
  1588                        ;#define LOW_PROC    (1)
  1589                        ;#define TOP_PROC    (255)
  1590                        ;#define MAX_PROCS   (256)
  1591                        ;
  1592                        ;#define IDLE_TIMEOUT 	 (0x00FF)
  1593                        ;#define FASTIDLE_TIMEOUT (0x007F)
  1594                        ;//static FIL fp;
  1595                        ;//static FRESULT fres;
  1596                        ;//static FATFS FatFs;
  1597                        ;
  1598                        ;EVENTMANAGER	 _k_eventmanager = NULL;
  1599                        	data
  1600                        	xdef	~~_k_eventmanager
  1601                        ~~_k_eventmanager:
  1602 00:0000: 00 00 00 00  	dl	$0
  1603 00:0004:              	ds	20
  1604 00:0018:              	ends
  1605                        ;PWINDOWMANAGER	 _k_currentWndManager = NULL;
  1606                        	data
  1607                        	xdef	~~_k_currentWndManager
  1608                        ~~_k_currentWndManager:
  1609 00:0018: 00 00 00 00  	dl	$0
  1610 00:001C:              	ends
  1611                        ;
  1612                        ;static FXEventProc 		eventProcs[MAX_P
                    ROCS];
  1613                        ;static PFXEVENTPROCESS  eventProcess[MAX_PROCS];
  1614                        ;
  1615                        ;static PFXNODELIST _k_eventManager_IdleProcList	
                    = NULL;
  1616                        	data
  1617                        ~~_k_eventManager_IdleProcList:
  1618 00:001C: 00 00 00 00  	dl	$0
  1619 00:0020:              	ends
  1620                        ;
  1621                        ;static ULONG _k_system_timer = 0;
  1622                        	data
  1623                        ~~_k_system_timer:
  1624 00:0020: 00 00 00 00  	dl	$0
  1625 00:0024:              	ends
  1626                        ;//static HWND	 _k_hLockedFocus 	= NULL;
  1627                        ;//static BOOL	 _k_bNCLockedFocus  = FALSE;
  1628                        ;static HWND	 _k_hWndFocus 	    = NULL;
  1629                        	data
  1630                        ~~_k_hWndFocus:
  1631 00:0024: 00 00 00 00  	dl	$0
  1632 00:0028:              	ends
  1633                        ;//static int scpu = 0;
  1634                        ;//static char idlespinner[] = {'|','/','-','\\'};
  1635                        ;
  1636                        ;//static FXOSMESSAGE smsg;
  Sat Jul 10 2021  1:15                                                Page 32


  1637                        ;static FXQUEUE FAR *_k_eventQueue = NULL;
  1638                        	data
  1639                        ~~_k_eventQueue:
  1640 00:0028: 00 00 00 00  	dl	$0
  1641 00:002C:              	ends
  1642                        ;static MOUSE_MSG_STATE _k_mouseState;
  1643                        ;
  1644                        ;static UINT _normal_idle_tick = 0x0001;
  1645                        	data
  1646                        ~~_normal_idle_tick:
  1647 00:002C: 01 00        	dw	$1
  1648 00:002E:              	ends
  1649                        ;static UINT _fast_idle_tick   = 0x0001;
  1650                        	data
  1651                        ~~_fast_idle_tick:
  1652 00:002E: 01 00        	dw	$1
  1653 00:0030:              	ends
  1654                        ;
  1655                        ;static ULONG THIS_MODULE = 0xB0000001;
  1656                        	data
  1657                        ~~THIS_MODULE:
  1658 00:0030: 01 00 00 B0  	dl	$B0000001
  1659 00:0034:              	ends
  1660                        ;
  1661                        ;
  1662                        ;static PIPCPORT _k_debugport_hd =  NULL;
  1663                        	data
  1664                        ~~_k_debugport_hd:
  1665 00:0034: 00 00 00 00  	dl	$0
  1666 00:0038:              	ends
  1667                        ;
  1668                        ;static KEYCODE extendedLookup[][2] = {
  1669                        	data
  1670                        ~~extendedLookup:
  1671                        ;							
                    			{0xE048,0xE048},{0xE0C8,0xF0C8}, // CURS
                    OR_UP
  1672 00:0038: 48 E0 48 E0  	dw	$E048,$E048,$E0C8,$F0C8
       00:003C: C8 E0 C8 F0 
  1673                        ;							
                    			{0xE050,0xE050},{0xE0D0,0xF0D0}, // CURS
                    OR_DOWN
  1674 00:0040: 50 E0 50 E0  	dw	$E050,$E050,$E0D0,$F0D0
       00:0044: D0 E0 D0 F0 
  1675                        ;							
                    			{0xE04B,0xE04B},{0xE0CB,0xF0CB}, // CURS
                    OR_LEFT
  1676 00:0048: 4B E0 4B E0  	dw	$E04B,$E04B,$E0CB,$F0CB
       00:004C: CB E0 CB F0 
  1677                        ;							
                    			{0xE04D,0xE04D},{0xE0CD,0xF0CD}, // CURS
                    OR_RIGHT
  1678 00:0050: 4D E0 4D E0  	dw	$E04D,$E04D,$E0CD,$F0CD
       00:0054: CD E0 CD F0 
  1679                        ;							
                    		 };
  1680 00:0058:              	ends
  1681                        ;
  Sat Jul 10 2021  1:15                                                Page 33


  1682                        ;
  1683                        ;static BOOL ps2port_ready = FALSE;
  1684                        	data
  1685                        ~~ps2port_ready:
  1686 00:0058: 00           	db	$0
  1687 00:0059:              	ends
  1688                        ;
  1689                        ;#define inportb60(a)	(KBD_INPT_BUF[0])
  1690                        ;#define inportb64(a)	(STATUS_PORT[0])
  1691                        ;#define outportb60(b)	(KBD_OUT_BUF[0] = b)
  1692                        ;#define outportb64(b)	(KBD_CMD_BUF[0] = b)
  1693                        ;
  1694                        ;static void k_mouse_wait(BYTE a_type);
  1695                        ;static void k_mouse_write(BYTE a_write);
  1696                        ;static BYTE k_mouse_read(VOID);
  1697                        ;
  1698                        ;#pragma section CODE=EVTMAN,offset $5:0000
  1699                        EVTMAN	section	offset $5:0000
  1700 05:0000:              	ends
  1701                        ;
  1702                        ;BOOL initHD = FALSE;
  1703                        	data
  1704                        	xdef	~~initHD
  1705                        ~~initHD:
  1706 00:0059: 00           	db	$0
  1707 00:005A:              	ends
  1708                        ;
  1709                        ;//void DoWndProcs(LPVOID ctx,LPVOID data);
  1710                        ;//int reg_config( void );
  1711                        ;//typedef void (*DllMain)(UINT argc,LPVOID *argv)
                    ;
  1712                        ;typedef void (*DllMain)(LPCSTR segment);
  1713                        ;
  1714                        ;extern ULONG _system_timer;
  1715                        ;//static UCHAR floppybuffer[512];
  1716                        ;
  1717                        ;
  1718                        ;VOID k_new_event_loop(VOID);
  1719                        ;
  1720                        ;static int sync_mouse_time = 0x00FF;
  1721                        	data
  1722                        ~~sync_mouse_time:
  1723 00:005A: FF 00        	dw	$FF
  1724 00:005C:              	ends
  1725                        ;
  1726                        ;
  1727                        ;
  1728                        ;#include "fxeventmanager_keys.h"
  1729                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager_keys.h",0
  1730                        	data
  1731                        	xdef	~~_k_keyCodesSet
  1732                        ~~_k_keyCodesSet:
  1733 00:005C: 00 00 1B 00  	dw	$0,$1B,$31,$32,$33,$34,$35,$36,$37,$38
       00:0060: 31 00 32 00 
       00:0064: 33 00 34 00 
       00:0068: 35 00 36 00 
       00:006C: 37 00 38 00 
  Sat Jul 10 2021  1:15                                                Page 34


  1734 00:0070: 39 00 30 00  	dw	$39,$30,$2D,$3D,$8,$9,$71,$77,$65,$72
       00:0074: 2D 00 3D 00 
       00:0078: 08 00 09 00 
       00:007C: 71 00 77 00 
       00:0080: 65 00 72 00 
  1735 00:0084: 74 00 79 00  	dw	$74,$79,$75,$69,$6F,$70,$5B,$5D,$D,$0
       00:0088: 75 00 69 00 
       00:008C: 6F 00 70 00 
       00:0090: 5B 00 5D 00 
       00:0094: 0D 00 00 00 
  1736 00:0098: 61 00 73 00  	dw	$61,$73,$64,$66,$67,$68,$6A,$6B,$6C,$3B
       00:009C: 64 00 66 00 
       00:00A0: 67 00 68 00 
       00:00A4: 6A 00 6B 00 
       00:00A8: 6C 00 3B 00 
  1737 00:00AC: 27 00 60 00  	dw	$27,$60,$0,$5C,$7A,$78,$63,$76,$62,$6E
       00:00B0: 00 00 5C 00 
       00:00B4: 7A 00 78 00 
       00:00B8: 63 00 76 00 
       00:00BC: 62 00 6E 00 
  1738 00:00C0: 6D 00 2C 00  	dw	$6D,$2C,$2E,$2F,$0,$2A,$0,$20,$0,$0
       00:00C4: 2E 00 2F 00 
       00:00C8: 00 00 2A 00 
       00:00CC: 00 00 20 00 
       00:00D0: 00 00 00 00 
  1739 00:00D4: 00 00 00 00  	dw	$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
       00:00D8: 00 00 00 00 
       00:00DC: 00 00 00 00 
       00:00E0: 00 00 00 00 
       00:00E4: 00 00 00 00 
  1740 00:00E8: 00 00 37 00  	dw	$0,$37,$38,$39,$2D,$34,$35,$36,$2B,$31
       00:00EC: 38 00 39 00 
       00:00F0: 2D 00 34 00 
       00:00F4: 35 00 36 00 
       00:00F8: 2B 00 31 00 
  1741 00:00FC: 32 00 33 00  	dw	$32,$33,$30,$2E,$0,$0,$0,$0,$0
       00:0100: 30 00 2E 00 
       00:0104: 00 00 00 00 
       00:0108: 00 00 00 00 
       00:010C: 00 00 
  1742 00:010E:              	ends
  1743                        	data
  1744                        	xdef	~~_k_keyCodesShiftSet
  1745                        ~~_k_keyCodesShiftSet:
  1746 00:010E: 00 00 1B 00  	dw	$0,$1B,$21,$40,$23,$24,$25,$5E,$26,$2A
       00:0112: 21 00 40 00 
       00:0116: 23 00 24 00 
       00:011A: 25 00 5E 00 
       00:011E: 26 00 2A 00 
  1747 00:0122: 28 00 29 00  	dw	$28,$29,$5F,$2B,$8,$9,$51,$57,$45,$52
       00:0126: 5F 00 2B 00 
       00:012A: 08 00 09 00 
       00:012E: 51 00 57 00 
       00:0132: 45 00 52 00 
  1748 00:0136: 54 00 59 00  	dw	$54,$59,$55,$49,$4F,$50,$7B,$7D,$D,$0
       00:013A: 55 00 49 00 
       00:013E: 4F 00 50 00 
       00:0142: 7B 00 7D 00 
  Sat Jul 10 2021  1:15                                                Page 35


       00:0146: 0D 00 00 00 
  1749 00:014A: 41 00 53 00  	dw	$41,$53,$44,$46,$47,$48,$4A,$4B,$4C,$3A
       00:014E: 44 00 46 00 
       00:0152: 47 00 48 00 
       00:0156: 4A 00 4B 00 
       00:015A: 4C 00 3A 00 
  1750 00:015E: 22 00 7E 00  	dw	$22,$7E,$0,$7C,$5A,$58,$43,$56,$42,$4E
       00:0162: 00 00 7C 00 
       00:0166: 5A 00 58 00 
       00:016A: 43 00 56 00 
       00:016E: 42 00 4E 00 
  1751 00:0172: 4D 00 3C 00  	dw	$4D,$3C,$3E,$3F,$0,$2A,$0,$20,$0,$0
       00:0176: 3E 00 3F 00 
       00:017A: 00 00 2A 00 
       00:017E: 00 00 20 00 
       00:0182: 00 00 00 00 
  1752 00:0186: 00 00 00 00  	dw	$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
       00:018A: 00 00 00 00 
       00:018E: 00 00 00 00 
       00:0192: 00 00 00 00 
       00:0196: 00 00 00 00 
  1753 00:019A: 00 00 37 00  	dw	$0,$37,$38,$39,$2D,$34,$35,$36,$2B,$31
       00:019E: 38 00 39 00 
       00:01A2: 2D 00 34 00 
       00:01A6: 35 00 36 00 
       00:01AA: 2B 00 31 00 
  1754 00:01AE: 32 00 33 00  	dw	$32,$33,$30,$2E,$0,$0,$0,$0,$0
       00:01B2: 30 00 2E 00 
       00:01B6: 00 00 00 00 
       00:01BA: 00 00 00 00 
       00:01BE: 00 00 
  1755 00:01C0:              	ends
  1756                        	data
  1757                        	xdef	~~_k_keyCodesExtSet
  1758                        ~~_k_keyCodesExtSet:
  1759 00:01C0: 00 00        	dw	$0
  1760 00:01C2:              	ends
  1761                        	.line	195
  1762                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",90
  1763                        ;
  1764                        ;
  1765                        ;ULONG k_get_systemtimer(void)
  1766                        ;{
  1767                        	.line	93
  1768                        	.line	94
  1769                        	EVTMAN
  1770                        	xdef	~~k_get_systemtimer
  1771                        	func
  1772                        	.function	94
  1773                        ~~k_get_systemtimer:
  1774                        	longa	on
  1775                        	longi	on
  1776 05:0000: 3B           	tsc
  1777 05:0001: 38           	sec
  1778 05:0002: E9 04 00     	sbc	#L2
  1779 05:0005: 1B           	tcs
  1780 05:0006: 0B           	phd
  Sat Jul 10 2021  1:15                                                Page 36


  1781 05:0007: 5B           	tcd
  1782                        	.block	94
  1783                        ;	return _system_timer++;
  1784                        	.line	95
  1785 05:0008: AD xx xx     	lda	|~~_system_timer
  1786 05:000B: 85 01        	sta	<R0
  1787 05:000D: AD xx xx     	lda	|~~_system_timer+2
  1788 05:0010: 85 03        	sta	<R0+2
  1789 05:0012: EE xx xx     	inc	|~~_system_timer
  1790 05:0015: D0 03        	bne	L5
  1791 05:0017: EE xx xx     	inc	|~~_system_timer+2
  1792                        L5:
  1793 05:001A: A6 03        	ldx	<R0+2
  1794 05:001C: A5 01        	lda	<R0
  1795                        L6:
  1796 05:001E: A8           	tay
  1797 05:001F: 2B           	pld
  1798 05:0020: 3B           	tsc
  1799 05:0021: 18           	clc
  1800 05:0022: 69 04 00     	adc	#L2
  1801 05:0025: 1B           	tcs
  1802 05:0026: 98           	tya
  1803 05:0027: 6B           	rtl
  1804                        ;}
  1805                        	.line	96
  1806                        	.endblock	96
  1807             00000004   L2	equ	4
  1808             00000005   L3	equ	5
  1809 05:0028:              	ends
  1810                        	efunc
  1811                        	.endfunc	96,5,4
  1812                        	.line	96
  1813                        ;
  1814                        ;static LPVOID Init(VOID)
  1815                        ;{
  1816                        	.line	98
  1817                        	.line	99
  1818                        	EVTMAN
  1819                        	func
  1820                        	.function	99
  1821                        ~~Init:
  1822                        	longa	on
  1823                        	longi	on
  1824 05:0028: 3B           	tsc
  1825 05:0029: 38           	sec
  1826 05:002A: E9 00 00     	sbc	#L7
  1827 05:002D: 1B           	tcs
  1828 05:002E: 0B           	phd
  1829 05:002F: 5B           	tcd
  1830                        	.block	99
  1831                        ;	k_debug_string("EVENTMANAGER::Init()\r\n");
  1832                        	.line	100
  1833 05:0030: F4 xx xx     	pea	#^L1
  1834 05:0033: F4 xx xx     	pea	#<L1
  1835 05:0036: 22 xx xx xx  	jsl	~~k_debug_string
  1836                        ;	return NULL;
  1837                        	.line	101
  1838 05:003A: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 37


  1839 05:003D: AA           	tax
  1840 05:003E: A9 00 00     	lda	#$0
  1841                        L10:
  1842 05:0041: A8           	tay
  1843 05:0042: 2B           	pld
  1844 05:0043: 3B           	tsc
  1845 05:0044: 18           	clc
  1846 05:0045: 69 00 00     	adc	#L7
  1847 05:0048: 1B           	tcs
  1848 05:0049: 98           	tya
  1849 05:004A: 6B           	rtl
  1850                        ;}
  1851                        	.line	102
  1852                        	.endblock	102
  1853             00000000   L7	equ	0
  1854             00000001   L8	equ	1
  1855 05:004B:              	ends
  1856                        	efunc
  1857                        	.endfunc	102,1,0
  1858                        	.line	102
  1859                        	data
  1860                        L1:
  1861 00:01C2: 45 56 45 4E  	db	$45,$56,$45,$4E,$54,$4D,$41,$4E,$41,$47,
                    $45,$52,$3A,$3A,$49
       00:01C6: 54 4D 41 4E 
       00:01CA: 41 47 45 52 
       00:01CE: 3A 3A 49 
  1862 00:01D1: 6E 69 74 28  	db	$6E,$69,$74,$28,$29,$0D,$0A,$00
       00:01D5: 29 0D 0A 00 
  1863 00:01D9:              	ends
  1864                        ;
  1865                        ;static VOID Uninit(VOID)
  1866                        ;{
  1867                        	.line	104
  1868                        	.line	105
  1869                        	EVTMAN
  1870                        	func
  1871                        	.function	105
  1872                        ~~Uninit:
  1873                        	longa	on
  1874                        	longi	on
  1875 05:004B: 3B           	tsc
  1876 05:004C: 38           	sec
  1877 05:004D: E9 00 00     	sbc	#L12
  1878 05:0050: 1B           	tcs
  1879 05:0051: 0B           	phd
  1880 05:0052: 5B           	tcd
  1881                        	.block	105
  1882                        ;	return;
  1883                        	.line	106
  1884                        L15:
  1885 05:0053: 2B           	pld
  1886 05:0054: 3B           	tsc
  1887 05:0055: 18           	clc
  1888 05:0056: 69 00 00     	adc	#L12
  1889 05:0059: 1B           	tcs
  1890 05:005A: 6B           	rtl
  1891                        ;}
  Sat Jul 10 2021  1:15                                                Page 38


  1892                        	.line	107
  1893                        	.endblock	107
  1894             00000000   L12	equ	0
  1895             00000001   L13	equ	1
  1896 05:005B:              	ends
  1897                        	efunc
  1898                        	.endfunc	107,1,0
  1899                        	.line	107
  1900                        ;
  1901                        ;static UINT Configure(UINT index,LPVOID ctx)
  1902                        ;{
  1903                        	.line	109
  1904                        	.line	110
  1905                        	EVTMAN
  1906                        	func
  1907                        	.function	110
  1908                        ~~Configure:
  1909                        	longa	on
  1910                        	longi	on
  1911 05:005B: 3B           	tsc
  1912 05:005C: 38           	sec
  1913 05:005D: E9 00 00     	sbc	#L16
  1914 05:0060: 1B           	tcs
  1915 05:0061: 0B           	phd
  1916 05:0062: 5B           	tcd
  1917             00000004   index_0	set	4
  1918             00000006   ctx_0	set	6
  1919                        	.block	110
  1920                        ;	return 0;
  1921                        	.sym	index,4,16,6,16
  1922                        	.sym	ctx,6,129,6,32
  1923                        	.line	111
  1924 05:0063: A9 00 00     	lda	#$0
  1925                        L19:
  1926 05:0066: A8           	tay
  1927 05:0067: A5 02        	lda	<L16+2
  1928 05:0069: 85 08        	sta	<L16+2+6
  1929 05:006B: A5 01        	lda	<L16+1
  1930 05:006D: 85 07        	sta	<L16+1+6
  1931 05:006F: 2B           	pld
  1932 05:0070: 3B           	tsc
  1933 05:0071: 18           	clc
  1934 05:0072: 69 06 00     	adc	#L16+6
  1935 05:0075: 1B           	tcs
  1936 05:0076: 98           	tya
  1937 05:0077: 6B           	rtl
  1938                        ;}
  1939                        	.line	112
  1940                        	.endblock	112
  1941             00000000   L16	equ	0
  1942             00000001   L17	equ	1
  1943 05:0078:              	ends
  1944                        	efunc
  1945                        	.endfunc	112,1,0
  1946                        	.line	112
  1947                        ;
  1948                        ;static UINT Query(UINT index)
  1949                        ;{
  Sat Jul 10 2021  1:15                                                Page 39


  1950                        	.line	114
  1951                        	.line	115
  1952                        	EVTMAN
  1953                        	func
  1954                        	.function	115
  1955                        ~~Query:
  1956                        	longa	on
  1957                        	longi	on
  1958 05:0078: 3B           	tsc
  1959 05:0079: 38           	sec
  1960 05:007A: E9 00 00     	sbc	#L20
  1961 05:007D: 1B           	tcs
  1962 05:007E: 0B           	phd
  1963 05:007F: 5B           	tcd
  1964             00000004   index_0	set	4
  1965                        	.block	115
  1966                        ;	switch(index)
  1967                        	.sym	index,4,16,6,16
  1968                        	.line	116
  1969 05:0080: A5 04        	lda	<L20+index_0
  1970 05:0082: 82 1B 00     	brl	L10001
  1971                        ;	{
  1972                        	.line	117
  1973                        ;	case EV_QUERY_VERSION_MAJOR:
  1974                        	.line	118
  1975                        L10003:
  1976                        ;		return 5;
  1977                        	.line	119
  1978 05:0085: A9 05 00     	lda	#$5
  1979                        L23:
  1980 05:0088: A8           	tay
  1981 05:0089: A5 02        	lda	<L20+2
  1982 05:008B: 85 04        	sta	<L20+2+2
  1983 05:008D: A5 01        	lda	<L20+1
  1984 05:008F: 85 03        	sta	<L20+1+2
  1985 05:0091: 2B           	pld
  1986 05:0092: 3B           	tsc
  1987 05:0093: 18           	clc
  1988 05:0094: 69 02 00     	adc	#L20+2
  1989 05:0097: 1B           	tcs
  1990 05:0098: 98           	tya
  1991 05:0099: 6B           	rtl
  1992                        ;	case EV_QUERY_VERSION_MINOR:
  1993                        	.line	120
  1994                        L10004:
  1995                        ;		return 0;
  1996                        	.line	121
  1997 05:009A: A9 00 00     	lda	#$0
  1998 05:009D: 82 E8 FF     	brl	L23
  1999                        ;	}
  2000                        	.line	122
  2001                        L10001:
  2002                        	xref	~~~swt
  2003 05:00A0: 22 xx xx xx  	jsl	~~~swt
  2004 05:00A4: 02 00        	dw	2
  2005 05:00A6: 00 00        	dw	0
  2006 05:00A8: 84 00        	dw	L10003-1
  2007 05:00AA: 01 00        	dw	1
  Sat Jul 10 2021  1:15                                                Page 40


  2008 05:00AC: 99 00        	dw	L10004-1
  2009 05:00AE: AF 00        	dw	L10002-1
  2010                        L10002:
  2011                        ;
  2012                        ;	return -1;
  2013                        	.line	124
  2014 05:00B0: A9 FF FF     	lda	#$ffff
  2015 05:00B3: 82 D2 FF     	brl	L23
  2016                        ;}
  2017                        	.line	125
  2018                        	.endblock	125
  2019             00000000   L20	equ	0
  2020             00000001   L21	equ	1
  2021 05:00B6:              	ends
  2022                        	efunc
  2023                        	.endfunc	125,1,0
  2024                        	.line	125
  2025                        ;
  2026                        ;static UINT Run(LPVOID context)
  2027                        ;{
  2028                        	.line	127
  2029                        	.line	128
  2030                        	EVTMAN
  2031                        	func
  2032                        	.function	128
  2033                        ~~Run:
  2034                        	longa	on
  2035                        	longi	on
  2036 05:00B6: 3B           	tsc
  2037 05:00B7: 38           	sec
  2038 05:00B8: E9 00 00     	sbc	#L24
  2039 05:00BB: 1B           	tcs
  2040 05:00BC: 0B           	phd
  2041 05:00BD: 5B           	tcd
  2042             00000004   context_0	set	4
  2043                        	.block	128
  2044                        ;	k_debug_string("EVENTMANAGER::Run():Enter\r\n");
  2045                        	.sym	context,4,129,6,32
  2046                        	.line	129
  2047 05:00BE: F4 xx xx     	pea	#^L11
  2048 05:00C1: F4 xx xx     	pea	#<L11
  2049 05:00C4: 22 xx xx xx  	jsl	~~k_debug_string
  2050                        ;
  2051                        ;	k_new_event_loop();
  2052                        	.line	131
  2053 05:00C8: 22 09 03 05  	jsl	~~k_new_event_loop
  2054                        ;
  2055                        ;	k_debug_string("EVENTMANAGER::Run():Exit\r\n");
  2056                        	.line	133
  2057 05:00CC: F4 xx xx     	pea	#^L11+28
  2058 05:00CF: F4 xx xx     	pea	#<L11+28
  2059 05:00D2: 22 xx xx xx  	jsl	~~k_debug_string
  2060                        ;
  2061                        ;	return 0;
  2062                        	.line	135
  2063 05:00D6: A9 00 00     	lda	#$0
  2064                        L27:
  2065 05:00D9: A8           	tay
  Sat Jul 10 2021  1:15                                                Page 41


  2066 05:00DA: A5 02        	lda	<L24+2
  2067 05:00DC: 85 06        	sta	<L24+2+4
  2068 05:00DE: A5 01        	lda	<L24+1
  2069 05:00E0: 85 05        	sta	<L24+1+4
  2070 05:00E2: 2B           	pld
  2071 05:00E3: 3B           	tsc
  2072 05:00E4: 18           	clc
  2073 05:00E5: 69 04 00     	adc	#L24+4
  2074 05:00E8: 1B           	tcs
  2075 05:00E9: 98           	tya
  2076 05:00EA: 6B           	rtl
  2077                        ;}
  2078                        	.line	136
  2079                        	.endblock	136
  2080             00000000   L24	equ	0
  2081             00000001   L25	equ	1
  2082 05:00EB:              	ends
  2083                        	efunc
  2084                        	.endfunc	136,1,0
  2085                        	.line	136
  2086                        	data
  2087                        L11:
  2088 00:01D9: 45 56 45 4E  	db	$45,$56,$45,$4E,$54,$4D,$41,$4E,$41,$47,
                    $45,$52,$3A,$3A,$52
       00:01DD: 54 4D 41 4E 
       00:01E1: 41 47 45 52 
       00:01E5: 3A 3A 52 
  2089 00:01E8: 75 6E 28 29  	db	$75,$6E,$28,$29,$3A,$45,$6E,$74,$65,$72,
                    $0D,$0A,$00,$45,$56
       00:01EC: 3A 45 6E 74 
       00:01F0: 65 72 0D 0A 
       00:01F4: 00 45 56 
  2090 00:01F7: 45 4E 54 4D  	db	$45,$4E,$54,$4D,$41,$4E,$41,$47,$45,$52,
                    $3A,$3A,$52,$75,$6E
       00:01FB: 41 4E 41 47 
       00:01FF: 45 52 3A 3A 
       00:0203: 52 75 6E 
  2091 00:0206: 28 29 3A 45  	db	$28,$29,$3A,$45,$78,$69,$74,$0D,$0A,$00
       00:020A: 78 69 74 0D 
       00:020E: 0A 00 
  2092 00:0210:              	ends
  2093                        ;
  2094                        ;
  2095                        ;PEVENTMANAGER k_initalize_event_manager(void)
  2096                        ;{
  2097                        	.line	139
  2098                        	.line	140
  2099                        	EVTMAN
  2100                        	xdef	~~k_initalize_event_manager
  2101                        	func
  2102                        	.function	140
  2103                        ~~k_initalize_event_manager:
  2104                        	longa	on
  2105                        	longi	on
  2106 05:00EB: 3B           	tsc
  2107 05:00EC: 38           	sec
  2108 05:00ED: E9 04 00     	sbc	#L29
  2109 05:00F0: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 42


  2110 05:00F1: 0B           	phd
  2111 05:00F2: 5B           	tcd
  2112                        	.block	140
  2113                        ;	memset(&_k_mouseState,0,sizeof(MOUSE_MSG_STATE))
                    ;
  2114                        	.line	141
  2115 05:00F3: F4 17 00     	pea	#<$17
  2116 05:00F6: F4 00 00     	pea	#<$0
  2117 05:00F9: A9 xx xx     	lda	#<~~_k_mouseState
  2118 05:00FC: 85 01        	sta	<R0
  2119                        	xref	_BEG_DATA
  2120 05:00FE: A9 xx xx     	lda	#_BEG_DATA>>16
  2121 05:0101: 85 03        	sta	<R0+2
  2122 05:0103: D4 03        	pei	<R0+2
  2123 05:0105: D4 01        	pei	<R0
  2124 05:0107: 22 xx xx xx  	jsl	~~memset
  2125                        ;
  2126                        ;
  2127                        ;	_k_eventManager_IdleProcList 	= k_nodelist_all
                    ocate_list("_events_idleproc_list",NODELIST_NO_DEALLOC);
  2128                        	.line	144
  2129 05:010B: F4 00 00     	pea	#^$0
  2130 05:010E: F4 00 00     	pea	#<$0
  2131 05:0111: F4 xx xx     	pea	#^L28
  2132 05:0114: F4 xx xx     	pea	#<L28
  2133 05:0117: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  2134 05:011B: 8D xx xx     	sta	|~~_k_eventManager_IdleProcList
  2135 05:011E: 8E xx xx     	stx	|~~_k_eventManager_IdleProcList+2
  2136                        ;
  2137                        ;	_k_eventQueue = k_mem_allocate_heap(sizeof(FXQUE
                    UE));
  2138                        	.line	146
  2139 05:0121: F4 0A 00     	pea	#<$a
  2140 05:0124: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2141 05:0128: 8D xx xx     	sta	|~~_k_eventQueue
  2142 05:012B: 8E xx xx     	stx	|~~_k_eventQueue+2
  2143                        ;	if(_k_eventQueue!=NULL)
  2144                        	.line	147
  2145                        ;	{
  2146 05:012E: AD xx xx     	lda	|~~_k_eventQueue
  2147 05:0131: 0D xx xx     	ora	|~~_k_eventQueue+2
  2148 05:0134: D0 03        	bne	L32
  2149 05:0136: 82 0C 00     	brl	L10005
  2150                        L32:
  2151                        	.line	148
  2152                        ;		k_initialize(_k_eventQueue);
  2153                        	.line	149
  2154 05:0139: AD xx xx     	lda	|~~_k_eventQueue+2
  2155 05:013C: 48           	pha
  2156 05:013D: AD xx xx     	lda	|~~_k_eventQueue
  2157 05:0140: 48           	pha
  2158 05:0141: 22 xx xx xx  	jsl	~~k_initialize
  2159                        ;	}
  2160                        	.line	150
  2161                        ;
  2162                        ;
  2163                        ;	k_register_idle_proc(IdleCleanup,IDLE_PRIORITY_N
                    ORMAL);
  Sat Jul 10 2021  1:15                                                Page 43


  2164                        L10005:
  2165                        	.line	153
  2166 05:0145: F4 00 00     	pea	#<$0
  2167 05:0148: F4 05 00     	pea	#^~~IdleCleanup
  2168 05:014B: F4 65 26     	pea	#<~~IdleCleanup
  2169 05:014E: 22 99 24 05  	jsl	~~k_register_idle_proc
  2170                        ;	k_register_idle_proc(DeviceChecks,IDLE_PRIORITY_
                    NORMAL);
  2171                        	.line	154
  2172 05:0152: F4 00 00     	pea	#<$0
  2173 05:0155: F4 05 00     	pea	#^~~DeviceChecks
  2174 05:0158: F4 05 26     	pea	#<~~DeviceChecks
  2175 05:015B: 22 99 24 05  	jsl	~~k_register_idle_proc
  2176                        ;	k_register_idle_proc(_k_async_keyboard,IDLE_PRIO
                    RITY_HIGH);
  2177                        	.line	155
  2178 05:015F: F4 01 00     	pea	#<$1
  2179 05:0162: F4 05 00     	pea	#^~~_k_async_keyboard
  2180 05:0165: F4 71 28     	pea	#<~~_k_async_keyboard
  2181 05:0168: 22 99 24 05  	jsl	~~k_register_idle_proc
  2182                        ;	k_register_idle_proc(_k_async_mouse,IDLE_PRIORIT
                    Y_HIGH);
  2183                        	.line	156
  2184 05:016C: F4 01 00     	pea	#<$1
  2185 05:016F: F4 05 00     	pea	#^~~_k_async_mouse
  2186 05:0172: F4 F4 2A     	pea	#<~~_k_async_mouse
  2187 05:0175: 22 99 24 05  	jsl	~~k_register_idle_proc
  2188                        ;	k_register_idle_proc(_k_async_debug,IDLE_PRIORIT
                    Y_HIGH);
  2189                        	.line	157
  2190 05:0179: F4 01 00     	pea	#<$1
  2191 05:017C: F4 05 00     	pea	#^~~_k_async_debug
  2192 05:017F: F4 16 2A     	pea	#<~~_k_async_debug
  2193 05:0182: 22 99 24 05  	jsl	~~k_register_idle_proc
  2194                        ;
  2195                        ;	_k_eventmanager.EventQueue  = _k_eventQueue;
  2196                        	.line	159
  2197 05:0186: AD xx xx     	lda	|~~_k_eventQueue
  2198 05:0189: 8D xx xx     	sta	|~~_k_eventmanager
  2199 05:018C: AD xx xx     	lda	|~~_k_eventQueue+2
  2200 05:018F: 8D xx xx     	sta	|~~_k_eventmanager+2
  2201                        ;	_k_eventmanager.Init 		= Init;
  2202                        	.line	160
  2203 05:0192: A9 28 00     	lda	#<~~Init
  2204 05:0195: 8D xx xx     	sta	|~~_k_eventmanager+4
  2205 05:0198: A9 05 00     	lda	#^~~Init
  2206 05:019B: 8D xx xx     	sta	|~~_k_eventmanager+4+2
  2207                        ;	_k_eventmanager.Run 		= Run;
  2208                        	.line	161
  2209 05:019E: A9 B6 00     	lda	#<~~Run
  2210 05:01A1: 8D xx xx     	sta	|~~_k_eventmanager+8
  2211 05:01A4: A9 05 00     	lda	#^~~Run
  2212 05:01A7: 8D xx xx     	sta	|~~_k_eventmanager+8+2
  2213                        ;	_k_eventmanager.Configure 	= Configure;
  2214                        	.line	162
  2215 05:01AA: A9 5B 00     	lda	#<~~Configure
  2216 05:01AD: 8D xx xx     	sta	|~~_k_eventmanager+12
  2217 05:01B0: A9 05 00     	lda	#^~~Configure
  Sat Jul 10 2021  1:15                                                Page 44


  2218 05:01B3: 8D xx xx     	sta	|~~_k_eventmanager+12+2
  2219                        ;	_k_eventmanager.Query 		= Query;
  2220                        	.line	163
  2221 05:01B6: A9 78 00     	lda	#<~~Query
  2222 05:01B9: 8D xx xx     	sta	|~~_k_eventmanager+16
  2223 05:01BC: A9 05 00     	lda	#^~~Query
  2224 05:01BF: 8D xx xx     	sta	|~~_k_eventmanager+16+2
  2225                        ;	_k_eventmanager.Uninit 	    = Uninit;
  2226                        	.line	164
  2227 05:01C2: A9 4B 00     	lda	#<~~Uninit
  2228 05:01C5: 8D xx xx     	sta	|~~_k_eventmanager+20
  2229 05:01C8: A9 05 00     	lda	#^~~Uninit
  2230 05:01CB: 8D xx xx     	sta	|~~_k_eventmanager+20+2
  2231                        ;
  2232                        ;	return &_k_eventmanager;
  2233                        	.line	166
  2234 05:01CE: A9 xx xx     	lda	#<~~_k_eventmanager
  2235 05:01D1: 85 01        	sta	<R0
  2236                        	xref	_BEG_DATA
  2237 05:01D3: A9 xx xx     	lda	#_BEG_DATA>>16
  2238 05:01D6: 85 03        	sta	<R0+2
  2239 05:01D8: A6 03        	ldx	<R0+2
  2240 05:01DA: A5 01        	lda	<R0
  2241                        L33:
  2242 05:01DC: A8           	tay
  2243 05:01DD: 2B           	pld
  2244 05:01DE: 3B           	tsc
  2245 05:01DF: 18           	clc
  2246 05:01E0: 69 04 00     	adc	#L29
  2247 05:01E3: 1B           	tcs
  2248 05:01E4: 98           	tya
  2249 05:01E5: 6B           	rtl
  2250                        ;}
  2251                        	.line	167
  2252                        	.endblock	167
  2253             00000004   L29	equ	4
  2254             00000005   L30	equ	5
  2255 05:01E6:              	ends
  2256                        	efunc
  2257                        	.endfunc	167,5,4
  2258                        	.line	167
  2259                        	data
  2260                        L28:
  2261 00:0210: 5F 65 76 65  	db	$5F,$65,$76,$65,$6E,$74,$73,$5F,$69,$64,
                    $6C,$65,$70,$72,$6F
       00:0214: 6E 74 73 5F 
       00:0218: 69 64 6C 65 
       00:021C: 70 72 6F 
  2262 00:021F: 63 5F 6C 69  	db	$63,$5F,$6C,$69,$73,$74,$00
       00:0223: 73 74 00 
  2263 00:0226:              	ends
  2264                        ;
  2265                        ;void k_signal_sol_event(long FAR *pktick)
  2266                        ;{
  2267                        	.line	169
  2268                        	.line	170
  2269                        	EVTMAN
  2270                        	xdef	~~k_signal_sol_event
  Sat Jul 10 2021  1:15                                                Page 45


  2271                        	func
  2272                        	.function	170
  2273                        ~~k_signal_sol_event:
  2274                        	longa	on
  2275                        	longi	on
  2276 05:01E6: 3B           	tsc
  2277 05:01E7: 38           	sec
  2278 05:01E8: E9 00 00     	sbc	#L35
  2279 05:01EB: 1B           	tcs
  2280 05:01EC: 0B           	phd
  2281 05:01ED: 5B           	tcd
  2282             00000004   pktick_0	set	4
  2283                        	.block	170
  2284                        ;	return;
  2285                        	.sym	pktick,4,135,6,32
  2286                        	.line	171
  2287                        L38:
  2288 05:01EE: A5 02        	lda	<L35+2
  2289 05:01F0: 85 06        	sta	<L35+2+4
  2290 05:01F2: A5 01        	lda	<L35+1
  2291 05:01F4: 85 05        	sta	<L35+1+4
  2292 05:01F6: 2B           	pld
  2293 05:01F7: 3B           	tsc
  2294 05:01F8: 18           	clc
  2295 05:01F9: 69 04 00     	adc	#L35+4
  2296 05:01FC: 1B           	tcs
  2297 05:01FD: 6B           	rtl
  2298                        ;}
  2299                        	.line	172
  2300                        	.endblock	172
  2301             00000000   L35	equ	0
  2302             00000001   L36	equ	1
  2303 05:01FE:              	ends
  2304                        	efunc
  2305                        	.endfunc	172,1,0
  2306                        	.line	172
  2307                        ;
  2308                        ;
  2309                        ;
  2310                        ;//
  2311                        ;//
  2312                        ;//
  2313                        ;
  2314                        ;
  2315                        ;/*
  2316                        ; *
  2317                        ; 			pmsg->data[0] = ((LPSTR)
                    data)[0]; // scanCode
  2318                        ;			pmsg->data[1] = ((LPSTR)data)[1]
                    ; // isShifted
  2319                        ;			pmsg->data[2] = ((LPSTR)data)[2]
                    ; // isAlt
  2320                        ;			pmsg->data[3] = ((LPSTR)data)[3]
                    ; // isExtended
  2321                        ;			pmsg->data[4] = ((LPSTR)data)[4]
                    ; // isCapsLock
  2322                        ;			pmsg->data[5] = ((LPSTR)data)[5]
                    ; // isNumLock
  Sat Jul 10 2021  1:15                                                Page 46


  2323                        ;			pmsg->data[6] = ((LPSTR)data)[6]
                    ; // isScrollLock
  2324                        ;			pmsg->data[7] = ((LPSTR)data)[7]
                    ; // keyChar
  2325                        ;			pmsg->data[8] = ((LPSTR)data)[8]
                    ; // keyChar
  2326                        ;			/*
  2327                        ;
  2328                        ; */
  2329                        ;
  2330                        ;static PFXOSMESSAGE processMessageCracker(PFXOSME
                    SSAGE pmsg)
  2331                        ;{
  2332                        	.line	196
  2333                        	.line	197
  2334                        	EVTMAN
  2335                        	func
  2336                        	.function	197
  2337                        ~~processMessageCracker:
  2338                        	longa	on
  2339                        	longi	on
  2340 05:01FE: 3B           	tsc
  2341 05:01FF: 38           	sec
  2342 05:0200: E9 12 00     	sbc	#L39
  2343 05:0203: 1B           	tcs
  2344 05:0204: 0B           	phd
  2345 05:0205: 5B           	tcd
  2346             00000004   pmsg_0	set	4
  2347                        	.block	197
  2348                        ;	KEYCODE kc = 0;
  2349                        ;	KEYCODE cc = 0;
  2350                        ;	//KEYCODE data[2];
  2351                        ;	MSGTYPE type = FX_KEY_DOWN;
  2352                        ;	int pos = 0;
  2353                        ;	int exsize = (sizeof(extendedLookup)/(sizeof(KEY
                    CODE)*2));
  2354                        ;
  2355                        ;	if(pmsg->type == FX_KEY_SCANCODE)
  2356             00000000   kc_1	set	0
  2357             00000002   cc_1	set	2
  2358             00000004   type_1	set	4
  2359             00000006   pos_1	set	6
  2360             00000008   exsize_1	set	8
  2361                        	.sym	kc,0,16,1,16
  2362                        	.sym	cc,2,16,1,16
  2363                        	.sym	type,4,16,1,16
  2364                        	.sym	pos,6,5,1,16
  2365                        	.sym	exsize,8,5,1,16
  2366                        	.sym	pmsg,4,138,6,32,16
  2367 05:0206: 64 09        	stz	<L40+kc_1
  2368 05:0208: 64 0B        	stz	<L40+cc_1
  2369 05:020A: A9 10 0F     	lda	#$f10
  2370 05:020D: 85 0D        	sta	<L40+type_1
  2371 05:020F: 64 0F        	stz	<L40+pos_1
  2372 05:0211: A9 08 00     	lda	#$8
  2373 05:0214: 85 11        	sta	<L40+exsize_1
  2374                        	.line	205
  2375                        ;	{
  Sat Jul 10 2021  1:15                                                Page 47


  2376 05:0216: A0 08 00     	ldy	#$8
  2377 05:0219: B7 16        	lda	[<L39+pmsg_0],Y
  2378 05:021B: C9 15 0F     	cmp	#<$f15
  2379 05:021E: F0 03        	beq	L42
  2380 05:0220: 82 D0 00     	brl	L10006
  2381                        L42:
  2382                        	.line	206
  2383                        ;		kc = ((PKEYSTATE)pmsg->data)->scanCode;
  2384                        	.line	207
  2385 05:0223: A0 16 00     	ldy	#$16
  2386 05:0226: B7 16        	lda	[<L39+pmsg_0],Y
  2387 05:0228: 29 FF 00     	and	#$ff
  2388 05:022B: 85 09        	sta	<L40+kc_1
  2389                        ;		cc = ((PKEYSTATE)pmsg->data)->keyChar;
  2390                        	.line	208
  2391 05:022D: A0 1D 00     	ldy	#$1d
  2392 05:0230: B7 16        	lda	[<L39+pmsg_0],Y
  2393 05:0232: 85 0B        	sta	<L40+cc_1
  2394                        ;
  2395                        ;		//k_debug_hex("=========================
                    = processMessageCracker:kc:",kc);
  2396                        ;		//k_debug_integer("=====================
                    ===== processMessageCracker:cc:", cc );
  2397                        ;
  2398                        ;		if(pmsg->data[0])
  2399                        	.line	213
  2400                        ;		{
  2401 05:0234: A0 16 00     	ldy	#$16
  2402 05:0237: B7 16        	lda	[<L39+pmsg_0],Y
  2403 05:0239: 29 FF 00     	and	#$ff
  2404 05:023C: D0 03        	bne	L43
  2405 05:023E: 82 B2 00     	brl	L10007
  2406                        L43:
  2407                        	.line	214
  2408                        ;			kc = pmsg->data[0];
  2409                        	.line	215
  2410 05:0241: A0 16 00     	ldy	#$16
  2411 05:0244: B7 16        	lda	[<L39+pmsg_0],Y
  2412 05:0246: 29 FF 00     	and	#$ff
  2413 05:0249: 85 09        	sta	<L40+kc_1
  2414                        ;
  2415                        ;
  2416                        ;			if(pmsg->data[3])
  2417                        	.line	218
  2418                        ;			{
  2419 05:024B: A0 19 00     	ldy	#$19
  2420 05:024E: B7 16        	lda	[<L39+pmsg_0],Y
  2421 05:0250: 29 FF 00     	and	#$ff
  2422 05:0253: D0 03        	bne	L44
  2423 05:0255: 82 52 00     	brl	L10008
  2424                        L44:
  2425                        	.line	219
  2426                        ;				kc+=0xE000;
  2427                        	.line	220
  2428 05:0258: 18           	clc
  2429 05:0259: A9 00 E0     	lda	#$e000
  2430 05:025C: 65 09        	adc	<L40+kc_1
  2431 05:025E: 85 09        	sta	<L40+kc_1
  Sat Jul 10 2021  1:15                                                Page 48


  2432                        ;
  2433                        ;				for(pos = 0;pos<(exsize)
                    ;pos++)
  2434                        	.line	222
  2435 05:0260: 64 0F        	stz	<L40+pos_1
  2436 05:0262: 82 24 00     	brl	L10012
  2437                        L10011:
  2438                        ;				{
  2439                        	.line	223
  2440                        ;					if(extendedLooku
                    p[pos][0] == kc)
  2441                        	.line	224
  2442                        ;					{
  2443 05:0265: A5 0F        	lda	<L40+pos_1
  2444 05:0267: 0A           	asl	A
  2445 05:0268: 0A           	asl	A
  2446 05:0269: 85 01        	sta	<R0
  2447 05:026B: A6 01        	ldx	<R0
  2448 05:026D: BD xx xx     	lda	|~~extendedLookup,X
  2449 05:0270: C5 09        	cmp	<L40+kc_1
  2450 05:0272: F0 03        	beq	L45
  2451 05:0274: 82 10 00     	brl	L10013
  2452                        L45:
  2453                        	.line	225
  2454                        ;						kc = ext
                    endedLookup[pos][1];
  2455                        	.line	226
  2456 05:0277: A5 0F        	lda	<L40+pos_1
  2457 05:0279: 0A           	asl	A
  2458 05:027A: 0A           	asl	A
  2459 05:027B: 85 01        	sta	<R0
  2460 05:027D: A6 01        	ldx	<R0
  2461 05:027F: BD xx xx     	lda	|~~extendedLookup+2,X
  2462 05:0282: 85 09        	sta	<L40+kc_1
  2463                        ;						break;
  2464                        	.line	227
  2465 05:0284: 82 11 00     	brl	L10010
  2466                        ;					}
  2467                        	.line	228
  2468                        ;				}
  2469                        L10013:
  2470                        	.line	229
  2471                        L10009:
  2472 05:0287: E6 0F        	inc	<L40+pos_1
  2473                        L10012:
  2474 05:0289: 38           	sec
  2475 05:028A: A5 0F        	lda	<L40+pos_1
  2476 05:028C: E5 11        	sbc	<L40+exsize_1
  2477 05:028E: 70 03        	bvs	L46
  2478 05:0290: 49 00 80     	eor	#$8000
  2479                        L46:
  2480 05:0293: 30 03        	bmi	L47
  2481 05:0295: 82 CD FF     	brl	L10011
  2482                        L47:
  2483                        L10010:
  2484                        ;				if(kc & 0x1000)
  2485                        	.line	230
  2486                        ;				{
  Sat Jul 10 2021  1:15                                                Page 49


  2487 05:0298: A5 09        	lda	<L40+kc_1
  2488 05:029A: 29 00 10     	and	#<$1000
  2489 05:029D: D0 03        	bne	L48
  2490 05:029F: 82 05 00     	brl	L10014
  2491                        L48:
  2492                        	.line	231
  2493                        ;					type = FX_KEY_UP
                    ;
  2494                        	.line	232
  2495 05:02A2: A9 12 0F     	lda	#$f12
  2496 05:02A5: 85 0D        	sta	<L40+type_1
  2497                        ;				}
  2498                        	.line	233
  2499                        ;			}
  2500                        L10014:
  2501                        	.line	234
  2502                        ;			else
  2503 05:02A7: 82 0F 00     	brl	L10015
  2504                        L10008:
  2505                        ;			{
  2506                        	.line	236
  2507                        ;				if(kc & 128)
  2508                        	.line	237
  2509                        ;				{
  2510 05:02AA: A5 09        	lda	<L40+kc_1
  2511 05:02AC: 29 80 00     	and	#<$80
  2512 05:02AF: D0 03        	bne	L49
  2513 05:02B1: 82 05 00     	brl	L10016
  2514                        L49:
  2515                        	.line	238
  2516                        ;					type = FX_KEY_UP
                    ;
  2517                        	.line	239
  2518 05:02B4: A9 12 0F     	lda	#$f12
  2519 05:02B7: 85 0D        	sta	<L40+type_1
  2520                        ;				}
  2521                        	.line	240
  2522                        ;			}
  2523                        L10016:
  2524                        	.line	241
  2525                        L10015:
  2526                        ;			k_enqueue(_k_eventQueue,k_create
                    _synthetic_window_msg(pmsg->hwnd,type,pmsg->data,sizeof(KEYS
                    TATE)));
  2527                        	.line	242
  2528 05:02B9: F4 0E 00     	pea	#<$e
  2529 05:02BC: 18           	clc
  2530 05:02BD: A9 16 00     	lda	#$16
  2531 05:02C0: 65 16        	adc	<L39+pmsg_0
  2532 05:02C2: 85 01        	sta	<R0
  2533 05:02C4: A9 00 00     	lda	#$0
  2534 05:02C7: 65 18        	adc	<L39+pmsg_0+2
  2535 05:02C9: 85 03        	sta	<R0+2
  2536 05:02CB: D4 03        	pei	<R0+2
  2537 05:02CD: D4 01        	pei	<R0
  2538 05:02CF: D4 0D        	pei	<L40+type_1
  2539 05:02D1: A0 0C 00     	ldy	#$c
  2540 05:02D4: B7 16        	lda	[<L39+pmsg_0],Y
  Sat Jul 10 2021  1:15                                                Page 50


  2541 05:02D6: 48           	pha
  2542 05:02D7: A0 0A 00     	ldy	#$a
  2543 05:02DA: B7 16        	lda	[<L39+pmsg_0],Y
  2544 05:02DC: 48           	pha
  2545 05:02DD: 22 37 20 05  	jsl	~~k_create_synthetic_window_msg
  2546 05:02E1: 85 05        	sta	<R1
  2547 05:02E3: 86 07        	stx	<R1+2
  2548 05:02E5: DA           	phx
  2549 05:02E6: 48           	pha
  2550 05:02E7: AD xx xx     	lda	|~~_k_eventQueue+2
  2551 05:02EA: 48           	pha
  2552 05:02EB: AD xx xx     	lda	|~~_k_eventQueue
  2553 05:02EE: 48           	pha
  2554 05:02EF: 22 xx xx xx  	jsl	~~k_enqueue
  2555                        ;		}
  2556                        	.line	243
  2557                        ;	}
  2558                        L10007:
  2559                        	.line	244
  2560                        ;
  2561                        ;	return pmsg;
  2562                        L10006:
  2563                        	.line	246
  2564 05:02F3: A6 18        	ldx	<L39+pmsg_0+2
  2565 05:02F5: A5 16        	lda	<L39+pmsg_0
  2566                        L50:
  2567 05:02F7: A8           	tay
  2568 05:02F8: A5 14        	lda	<L39+2
  2569 05:02FA: 85 18        	sta	<L39+2+4
  2570 05:02FC: A5 13        	lda	<L39+1
  2571 05:02FE: 85 17        	sta	<L39+1+4
  2572 05:0300: 2B           	pld
  2573 05:0301: 3B           	tsc
  2574 05:0302: 18           	clc
  2575 05:0303: 69 16 00     	adc	#L39+4
  2576 05:0306: 1B           	tcs
  2577 05:0307: 98           	tya
  2578 05:0308: 6B           	rtl
  2579                        ;}
  2580                        	.line	247
  2581                        	.endblock	247
  2582             00000012   L39	equ	18
  2583             00000009   L40	equ	9
  2584 05:0309:              	ends
  2585                        	efunc
  2586                        	.endfunc	247,9,18
  2587                        	.line	247
  2588                        ;void k_new_event_loop(void)
  2589                        ;{
  2590                        	.line	248
  2591                        	.line	249
  2592                        	EVTMAN
  2593                        	xdef	~~k_new_event_loop
  2594                        	func
  2595                        	.function	249
  2596                        ~~k_new_event_loop:
  2597                        	longa	on
  2598                        	longi	on
  Sat Jul 10 2021  1:15                                                Page 51


  2599 05:0309: 3B           	tsc
  2600 05:030A: 38           	sec
  2601 05:030B: E9 28 00     	sbc	#L51
  2602 05:030E: 1B           	tcs
  2603 05:030F: 0B           	phd
  2604 05:0310: 5B           	tcd
  2605                        	.block	249
  2606                        ;	PFXOSMESSAGE pmsg = NULL;
  2607                        ;	PFXOSMESSAGE processMessage = NULL;
  2608                        ;
  2609                        ;	PFXPROCESS 	 pprocess = NULL;
  2610                        ;	/*
  2611                        ;	PFXNODE 	 hitNodeParent = NULL;
  2612                        ;	PFXNODE 	 hitNode = NULL;
  2613                        ;	PFXNODE 	 hitChildNode = NULL;
  2614                        ;	PWINDOW 	 pWin = NULL;
  2615                        ;	/////////////
  2616                        ;	// new way //
  2617                        ;	/////////////
  2618                        ;	PWINDOW highhit 		= NULL;
  2619                        ;	PWINDOW currentFocus 	= NULL;
  2620                        ;    PFXNODELIST overlaps	= NULL;
  2621                        ;    PFXNODELIST intersections = NULL;
  2622                        ;    ////
  2623                        ;	*/
  2624                        ;	BOOL 		 bRet = FALSE;
  2625                        ;	HWND		 hWndFocusLost = NULL;
  2626                        ;	PFXDOSDEVICE pdd = NULL;
  2627                        ;	BYTE		status;
  2628                        ;	UINT		cExt = 0;
  2629                        ;	ULONG 		sync_mouse_time = 0x000FFFFF;
  2630                        ;	INT	x = 0;
  2631                        ;	INT y = 0;
  2632                        ;
  2633                        ;	k_debug_string("k_new_event_loop before\r\n");
  2634             00000000   pmsg_1	set	0
  2635             00000004   processMessage_1	set	4
  2636             00000008   pprocess_1	set	8
  2637             0000000C   bRet_1	set	12
  2638             0000000D   hWndFocusLost_1	set	13
  2639             00000011   pdd_1	set	17
  2640             00000015   status_1	set	21
  2641             00000016   cExt_1	set	22
  2642             00000018   sync_mouse_time_1	set	24
  2643             0000001C   x_1	set	28
  2644             0000001E   y_1	set	30
  2645                        	.sym	pmsg,0,138,1,32,16
  2646                        	.sym	processMessage,4,138,1,32,16
  2647                        	.sym	pprocess,8,138,1,32,20
  2648                        	.sym	bRet,12,14,1,8
  2649                        	.sym	hWndFocusLost,13,129,1,32
  2650                        	.sym	pdd,17,138,1,32,122
  2651                        	.sym	status,21,14,1,8
  2652                        	.sym	cExt,22,16,1,16
  2653                        	.sym	sync_mouse_time,24,18,1,32
  2654                        	.sym	x,28,5,1,16
  2655                        	.sym	y,30,5,1,16
  2656 05:0311: 64 09        	stz	<L52+pmsg_1
  Sat Jul 10 2021  1:15                                                Page 52


  2657 05:0313: 64 0B        	stz	<L52+pmsg_1+2
  2658 05:0315: 64 0D        	stz	<L52+processMessage_1
  2659 05:0317: 64 0F        	stz	<L52+processMessage_1+2
  2660 05:0319: 64 11        	stz	<L52+pprocess_1
  2661 05:031B: 64 13        	stz	<L52+pprocess_1+2
  2662 05:031D: E2 20        	sep	#$20
  2663                        	longa	off
  2664 05:031F: 64 15        	stz	<L52+bRet_1
  2665 05:0321: C2 20        	rep	#$20
  2666                        	longa	on
  2667 05:0323: 64 16        	stz	<L52+hWndFocusLost_1
  2668 05:0325: 64 18        	stz	<L52+hWndFocusLost_1+2
  2669 05:0327: 64 1A        	stz	<L52+pdd_1
  2670 05:0329: 64 1C        	stz	<L52+pdd_1+2
  2671 05:032B: 64 1F        	stz	<L52+cExt_1
  2672 05:032D: A9 FF FF     	lda	#$ffff
  2673 05:0330: 85 21        	sta	<L52+sync_mouse_time_1
  2674 05:0332: A9 0F 00     	lda	#$f
  2675 05:0335: 85 23        	sta	<L52+sync_mouse_time_1+2
  2676 05:0337: 64 25        	stz	<L52+x_1
  2677 05:0339: 64 27        	stz	<L52+y_1
  2678                        	.line	277
  2679 05:033B: F4 xx xx     	pea	#^L34
  2680 05:033E: F4 xx xx     	pea	#<L34
  2681 05:0341: 22 xx xx xx  	jsl	~~k_debug_string
  2682                        ;	_k_currentWndManager = k_initializeWindowManager
                    ();
  2683                        	.line	278
  2684 05:0345: 22 xx xx xx  	jsl	~~k_initializeWindowManager
  2685 05:0349: 8D xx xx     	sta	|~~_k_currentWndManager
  2686 05:034C: 8E xx xx     	stx	|~~_k_currentWndManager+2
  2687                        ;
  2688                        ;	if(!_k_currentWndManager)
  2689                        	.line	280
  2690                        ;	{
  2691 05:034F: AD xx xx     	lda	|~~_k_currentWndManager
  2692 05:0352: 0D xx xx     	ora	|~~_k_currentWndManager+2
  2693 05:0355: F0 03        	beq	L54
  2694 05:0357: 82 1B 00     	brl	L10017
  2695                        L54:
  2696                        	.line	281
  2697                        ;		k_exec_throw_exception(THIS_MODULE,0x000
                    10011,"Window Manager Failed to Initialize.",-1);
  2698                        	.line	282
  2699 05:035A: F4 FF FF     	pea	#<$ffffffff
  2700 05:035D: F4 xx xx     	pea	#^L34+26
  2701 05:0360: F4 xx xx     	pea	#<L34+26
  2702 05:0363: F4 01 00     	pea	#^$10011
  2703 05:0366: F4 11 00     	pea	#<$10011
  2704 05:0369: AD xx xx     	lda	|~~THIS_MODULE+2
  2705 05:036C: 48           	pha
  2706 05:036D: AD xx xx     	lda	|~~THIS_MODULE
  2707 05:0370: 48           	pha
  2708 05:0371: 22 xx xx xx  	jsl	~~k_exec_throw_exception
  2709                        ;	}
  2710                        	.line	283
  2711                        ;
  2712                        ;	_k_currentWndManager->Events(&_k_eventmanager);
  Sat Jul 10 2021  1:15                                                Page 53


  2713                        L10017:
  2714                        	.line	285
  2715 05:0375: A9 xx xx     	lda	#<~~_k_eventmanager
  2716 05:0378: 85 01        	sta	<R0
  2717                        	xref	_BEG_DATA
  2718 05:037A: A9 xx xx     	lda	#_BEG_DATA>>16
  2719 05:037D: 85 03        	sta	<R0+2
  2720 05:037F: D4 03        	pei	<R0+2
  2721 05:0381: D4 01        	pei	<R0
  2722 05:0383: AD xx xx     	lda	|~~_k_currentWndManager
  2723 05:0386: 85 05        	sta	<R1
  2724 05:0388: AD xx xx     	lda	|~~_k_currentWndManager+2
  2725 05:038B: 85 07        	sta	<R1+2
  2726 05:038D: A0 02 00     	ldy	#$2
  2727 05:0390: B7 05        	lda	[<R1],Y
  2728 05:0392: AA           	tax
  2729 05:0393: A7 05        	lda	[<R1]
  2730                        	xref	~~~lcal
  2731 05:0395: 22 xx xx xx  	jsl	~~~lcal
  2732                        ;
  2733                        ;	k_debug_integer("k_new_event_loop Window Manager
                     version:",_k_currentWndManager->QueryWindowManager(WM_QUERY
                    _VERSION_MAJOR));
  2734                        	.line	287
  2735 05:0399: F4 00 00     	pea	#<$0
  2736 05:039C: AD xx xx     	lda	|~~_k_currentWndManager
  2737 05:039F: 85 01        	sta	<R0
  2738 05:03A1: AD xx xx     	lda	|~~_k_currentWndManager+2
  2739 05:03A4: 85 03        	sta	<R0+2
  2740 05:03A6: A0 0E 00     	ldy	#$e
  2741 05:03A9: B7 01        	lda	[<R0],Y
  2742 05:03AB: AA           	tax
  2743 05:03AC: A0 0C 00     	ldy	#$c
  2744 05:03AF: B7 01        	lda	[<R0],Y
  2745                        	xref	~~~lcal
  2746 05:03B1: 22 xx xx xx  	jsl	~~~lcal
  2747 05:03B5: 48           	pha
  2748 05:03B6: F4 xx xx     	pea	#^L34+63
  2749 05:03B9: F4 xx xx     	pea	#<L34+63
  2750 05:03BC: 22 xx xx xx  	jsl	~~k_debug_integer
  2751                        ;	k_debug_string("\r\n");
  2752                        	.line	288
  2753 05:03C0: F4 xx xx     	pea	#^L34+104
  2754 05:03C3: F4 xx xx     	pea	#<L34+104
  2755 05:03C6: 22 xx xx xx  	jsl	~~k_debug_string
  2756                        ;
  2757                        ;	k_heap_integrity_check();
  2758                        	.line	290
  2759 05:03CA: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  2760                        ;
  2761                        ;	pprocess = k_exec_launchProcess("@/desktop");
  2762                        	.line	292
  2763 05:03CE: F4 xx xx     	pea	#^L34+107
  2764 05:03D1: F4 xx xx     	pea	#<L34+107
  2765 05:03D4: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  2766 05:03D8: 85 11        	sta	<L52+pprocess_1
  2767 05:03DA: 86 13        	stx	<L52+pprocess_1+2
  2768                        ;	if(pprocess!=NULL)
  Sat Jul 10 2021  1:15                                                Page 54


  2769                        	.line	293
  2770                        ;	{
  2771 05:03DC: A5 11        	lda	<L52+pprocess_1
  2772 05:03DE: 05 13        	ora	<L52+pprocess_1+2
  2773 05:03E0: D0 03        	bne	L55
  2774 05:03E2: 82 1F 00     	brl	L10018
  2775                        L55:
  2776                        	.line	294
  2777                        ;		//k_attach_process_events((FXEventProc)p
                    process->execProc-data,pprocess);
  2778                        ;		k_attach_process_events(pprocess->execPr
                    oc,pprocess);
  2779                        	.line	296
  2780 05:03E5: D4 13        	pei	<L52+pprocess_1+2
  2781 05:03E7: D4 11        	pei	<L52+pprocess_1
  2782 05:03E9: A0 5E 00     	ldy	#$5e
  2783 05:03EC: B7 11        	lda	[<L52+pprocess_1],Y
  2784 05:03EE: 48           	pha
  2785 05:03EF: A0 5C 00     	ldy	#$5c
  2786 05:03F2: B7 11        	lda	[<L52+pprocess_1],Y
  2787 05:03F4: 48           	pha
  2788 05:03F5: 22 73 15 05  	jsl	~~k_attach_process_events
  2789                        ;		k_exec_set_process_foreground(pprocess,T
                    RUE);
  2790                        	.line	297
  2791 05:03F9: F4 01 00     	pea	#<$1
  2792 05:03FC: D4 13        	pei	<L52+pprocess_1+2
  2793 05:03FE: D4 11        	pei	<L52+pprocess_1
  2794 05:0400: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  2795                        ;		//k_heap_integrity_check();
  2796                        ;	}
  2797                        	.line	299
  2798                        ;
  2799                        ;
  2800                        ;/*
  2801                        ;#if defined(USE_FX256_FMX) || defined(USE_FX256_F
                    MU)
  2802                        ;
  2803                        ;	pprocess = k_exec_launchProcess("@/desktop");
  2804                        ;	if(pprocess!=NULL)
  2805                        ;	{
  2806                        ;		//k_attach_process_events((FXEventProc)p
                    process->execProc-data,pprocess);
  2807                        ;		k_attach_process_events(pprocess->execPr
                    oc,pprocess);
  2808                        ;		k_exec_set_process_foreground(pprocess,T
                    RUE);
  2809                        ;		//k_heap_integrity_check();
  2810                        ;	}
  2811                        ;
  2812                        ;#else
  2813                        ;	pprocess = k_exec_launchProcess("@/console");
  2814                        ;	if(pprocess!=NULL)
  2815                        ;	{
  2816                        ;		//k_attach_process_events((FXEventProc)p
                    process->execProc-data,pprocess);
  2817                        ;		k_attach_process_events(pprocess->execPr
                    oc,pprocess);
  Sat Jul 10 2021  1:15                                                Page 55


  2818                        ;		k_exec_set_process_foreground(pprocess,T
                    RUE);
  2819                        ;	}
  2820                        ;
  2821                        ;#endif
  2822                        ;*/
  2823                        ;	pprocess = k_exec_launchProcess("@/idle");
  2824                        L10018:
  2825                        	.line	325
  2826 05:0404: F4 xx xx     	pea	#^L34+117
  2827 05:0407: F4 xx xx     	pea	#<L34+117
  2828 05:040A: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  2829 05:040E: 85 11        	sta	<L52+pprocess_1
  2830 05:0410: 86 13        	stx	<L52+pprocess_1+2
  2831                        ;	if(pprocess!=NULL)
  2832                        	.line	326
  2833                        ;	{
  2834 05:0412: A5 11        	lda	<L52+pprocess_1
  2835 05:0414: 05 13        	ora	<L52+pprocess_1+2
  2836 05:0416: D0 03        	bne	L56
  2837 05:0418: 82 1F 00     	brl	L10019
  2838                        L56:
  2839                        	.line	327
  2840                        ;
  2841                        ;		//k_attach_process_events((FXEventProc)p
                    process->execProc-data,pprocess);
  2842                        ;		k_attach_process_events(pprocess->execPr
                    oc,pprocess);
  2843                        	.line	330
  2844 05:041B: D4 13        	pei	<L52+pprocess_1+2
  2845 05:041D: D4 11        	pei	<L52+pprocess_1
  2846 05:041F: A0 5E 00     	ldy	#$5e
  2847 05:0422: B7 11        	lda	[<L52+pprocess_1],Y
  2848 05:0424: 48           	pha
  2849 05:0425: A0 5C 00     	ldy	#$5c
  2850 05:0428: B7 11        	lda	[<L52+pprocess_1],Y
  2851 05:042A: 48           	pha
  2852 05:042B: 22 73 15 05  	jsl	~~k_attach_process_events
  2853                        ;		k_exec_set_process_foreground(pprocess,F
                    ALSE);
  2854                        	.line	331
  2855 05:042F: F4 00 00     	pea	#<$0
  2856 05:0432: D4 13        	pei	<L52+pprocess_1+2
  2857 05:0434: D4 11        	pei	<L52+pprocess_1
  2858 05:0436: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  2859                        ;	}
  2860                        	.line	332
  2861                        ;
  2862                        ;
  2863                        ;	processMessage = k_create_process_msg(NULL);
  2864                        L10019:
  2865                        	.line	335
  2866 05:043A: F4 00 00     	pea	#^$0
  2867 05:043D: F4 00 00     	pea	#<$0
  2868 05:0440: 22 C7 1F 05  	jsl	~~k_create_process_msg
  2869 05:0444: 85 0D        	sta	<L52+processMessage_1
  2870 05:0446: 86 0F        	stx	<L52+processMessage_1+2
  2871                        ;
  Sat Jul 10 2021  1:15                                                Page 56


  2872                        ;	while(1)
  2873                        	.line	337
  2874                        L10020:
  2875                        ;	{
  2876                        	.line	338
  2877                        ;		asm sei;
  2878                        	.line	339
  2879                        	asmstart
  2880 05:0448: 78           	sei
  2881                        	asmend
  2882                        ;
  2883                        ;		//k_debug_string("*** k_new_event_loop::
                    top\r\n");
  2884                        ;		/*
  2885                        ;		if(!ps2port_ready)
  2886                        ;		{
  2887                        ;			status = 0xFE;
  2888                        ;			//while(status != 0xFA)
  2889                        ;			{
  2890                        ;				k_mouse_wait(2);
  2891                        ;				outportb64(0xFF);
  2892                        ;				k_mouse_wait(0);
  2893                        ;				status = inportb60(0x60)
                    ;
  2894                        ;				k_debug_hex("ps2port_rea
                    dy[KBD RESET]:",status);
  2895                        ;
  2896                        ;
  2897                        ;				k_mouse_wait(2);
  2898                        ;				outportb64(0xAA);
  2899                        ;				k_mouse_wait(0);
  2900                        ;				status = inportb60(0x60)
                    ;
  2901                        ;				k_debug_hex("ps2port_rea
                    dy[KBD ACK]:",status);
  2902                        ;
  2903                        ;				k_mouse_wait(2);
  2904                        ;				outportb64(0xF4);
  2905                        ;
  2906                        ;			}
  2907                        ;
  2908                        ;			//status = inportb60(0x60);
  2909                        ;			//k_debug_hex("ps2port_ready[KBD
                     CODE]:",status);
  2910                        ;
  2911                        ;
  2912                        ;
  2913                        ;			status = 0xFE;
  2914                        ;			while(status != 0xFA)
  2915                        ;			{
  2916                        ;				k_mouse_wait(2);
  2917                        ;				outportb64(0xAD);
  2918                        ;				k_mouse_wait(2);
  2919                        ;				outportb64(0xA8);
  2920                        ;				//k_mouse_wait(0);
  2921                        ;				//k_debug_hex("ps2port_r
                    eady[PORT]:",inportb60(0x60));
  2922                        ;
  Sat Jul 10 2021  1:15                                                Page 57


  2923                        ;				k_mouse_wait(2);
  2924                        ;				outportb64(0xD4);
  2925                        ;				k_mouse_wait(2);
  2926                        ;				outportb60(0xFF);
  2927                        ;				k_mouse_wait(0);
  2928                        ;				status = inportb60(0x60)
                    ;
  2929                        ;				k_debug_hex("ps2port_rea
                    dy[M1ACK]:",status);
  2930                        ;
  2931                        ;				k_mouse_wait(2);
  2932                        ;				outportb64(0xD4);
  2933                        ;				k_mouse_wait(2);
  2934                        ;				outportb60(0xAA);
  2935                        ;				k_mouse_wait(0);
  2936                        ;				status = inportb60(0x60)
                    ;
  2937                        ;				k_debug_hex("ps2port_rea
                    dy[M2ACK]:",status);
  2938                        ;
  2939                        ;			}
  2940                        ;
  2941                        ;			while(status == 0xFA)
  2942                        ;			{
  2943                        ;				//k_debug_hex("ps2port_r
                    eady[ACK]:",status);
  2944                        ;				status = inportb60(0x60)
                    ;
  2945                        ;			}
  2946                        ;
  2947                        ;			k_debug_hex("ps2port_ready[CODE]
                    :",status);
  2948                        ;
  2949                        ;			k_debug_hex("ps2port_ready[ID]:"
                    ,inportb60(0x60));
  2950                        ;
  2951                        ;			k_mouse_wait(2);
  2952                        ;			outportb64(0x20);
  2953                        ;			k_mouse_wait(0);
  2954                        ;
  2955                        ;			k_debug_hex("ps2port_ready[X]:",
                    inportb60(0x60));
  2956                        ;
  2957                        ;			k_mouse_wait(2);
  2958                        ;			outportb64(0x60);
  2959                        ;
  2960                        ;			k_mouse_wait(2);
  2961                        ;			outportb64(0xD4);
  2962                        ;			k_mouse_wait(2);
  2963                        ;			outportb60(0xF4);
  2964                        ;			//k_mouse_wait(0);
  2965                        ;			//k_debug_hex("ps2port_ready[END
                    ]:",inportb60(0x60));
  2966                        ;
  2967                        ;			ps2port_ready = TRUE;
  2968                        ;		}
  2969                        ;		*/
  2970                        ;		pmsg = (PFXOSMESSAGE)k_dequeue(_k_eventQ
  Sat Jul 10 2021  1:15                                                Page 58


                    ueue);
  2971                        	.line	428
  2972 05:0449: AD xx xx     	lda	|~~_k_eventQueue+2
  2973 05:044C: 48           	pha
  2974 05:044D: AD xx xx     	lda	|~~_k_eventQueue
  2975 05:0450: 48           	pha
  2976 05:0451: 22 xx xx xx  	jsl	~~k_dequeue
  2977 05:0455: 85 09        	sta	<L52+pmsg_1
  2978 05:0457: 86 0B        	stx	<L52+pmsg_1+2
  2979                        ;		while(pmsg)
  2980                        	.line	429
  2981                        L10022:
  2982 05:0459: A5 09        	lda	<L52+pmsg_1
  2983 05:045B: 05 0B        	ora	<L52+pmsg_1+2
  2984 05:045D: D0 03        	bne	L57
  2985 05:045F: 82 5E 00     	brl	L10023
  2986                        L57:
  2987                        ;		{
  2988                        	.line	430
  2989                        ;			pmsg = processMessageCracker(pms
                    g);
  2990                        	.line	431
  2991 05:0462: D4 0B        	pei	<L52+pmsg_1+2
  2992 05:0464: D4 09        	pei	<L52+pmsg_1
  2993 05:0466: 22 FE 01 05  	jsl	~~processMessageCracker
  2994 05:046A: 85 09        	sta	<L52+pmsg_1
  2995 05:046C: 86 0B        	stx	<L52+pmsg_1+2
  2996                        ;
  2997                        ;			pmsg = (PFXOSMESSAGE)_k_currentW
                    ndManager->ProcessWindowEvent(&_k_eventmanager,pmsg);
  2998                        	.line	433
  2999 05:046E: D4 0B        	pei	<L52+pmsg_1+2
  3000 05:0470: D4 09        	pei	<L52+pmsg_1
  3001 05:0472: A9 xx xx     	lda	#<~~_k_eventmanager
  3002 05:0475: 85 01        	sta	<R0
  3003                        	xref	_BEG_DATA
  3004 05:0477: A9 xx xx     	lda	#_BEG_DATA>>16
  3005 05:047A: 85 03        	sta	<R0+2
  3006 05:047C: D4 03        	pei	<R0+2
  3007 05:047E: D4 01        	pei	<R0
  3008 05:0480: AD xx xx     	lda	|~~_k_currentWndManager
  3009 05:0483: 85 05        	sta	<R1
  3010 05:0485: AD xx xx     	lda	|~~_k_currentWndManager+2
  3011 05:0488: 85 07        	sta	<R1+2
  3012 05:048A: A0 0A 00     	ldy	#$a
  3013 05:048D: B7 05        	lda	[<R1],Y
  3014 05:048F: AA           	tax
  3015 05:0490: A0 08 00     	ldy	#$8
  3016 05:0493: B7 05        	lda	[<R1],Y
  3017                        	xref	~~~lcal
  3018 05:0495: 22 xx xx xx  	jsl	~~~lcal
  3019 05:0499: 85 09        	sta	<L52+pmsg_1
  3020 05:049B: 86 0B        	stx	<L52+pmsg_1+2
  3021                        ;
  3022                        ;			//if((pmsg->type == FX_KEY_UP) |
                    | (pmsg->type == FX_KEY_DOWN))
  3023                        ;			//	k_debug_string("*** k_ne
                    w_event_loop::DESKTOP:FX_KEY_*\r\n");
  Sat Jul 10 2021  1:15                                                Page 59


  3024                        ;
  3025                        ;			//if(pmsg->type!=0xFFF1)
  3026                        ;			//	k_debug_hex_integer("***
                     k_new_event_loop::type:",pmsg->type);
  3027                        ;
  3028                        ;			k_do_processes(pmsg);
  3029                        	.line	441
  3030 05:049D: D4 0B        	pei	<L52+pmsg_1+2
  3031 05:049F: D4 09        	pei	<L52+pmsg_1
  3032 05:04A1: 22 4B 0D 05  	jsl	~~k_do_processes
  3033                        ;
  3034                        ;			k_destory_msg(pmsg);
  3035                        	.line	443
  3036 05:04A5: D4 0B        	pei	<L52+pmsg_1+2
  3037 05:04A7: D4 09        	pei	<L52+pmsg_1
  3038 05:04A9: 22 BC 23 05  	jsl	~~k_destory_msg
  3039                        ;
  3040                        ;			pmsg = (PFXOSMESSAGE)k_dequeue(_
                    k_eventQueue);
  3041                        	.line	445
  3042 05:04AD: AD xx xx     	lda	|~~_k_eventQueue+2
  3043 05:04B0: 48           	pha
  3044 05:04B1: AD xx xx     	lda	|~~_k_eventQueue
  3045 05:04B4: 48           	pha
  3046 05:04B5: 22 xx xx xx  	jsl	~~k_dequeue
  3047 05:04B9: 85 09        	sta	<L52+pmsg_1
  3048 05:04BB: 86 0B        	stx	<L52+pmsg_1+2
  3049                        ;		}
  3050                        	.line	446
  3051 05:04BD: 82 99 FF     	brl	L10022
  3052                        L10023:
  3053                        ;
  3054                        ;		//k_debug_string("*** k_new_event_loop::
                    bottom\r\n");
  3055                        ;
  3056                        ;		asm cli;
  3057                        	.line	450
  3058                        	asmstart
  3059 05:04C0: 58           	cli
  3060                        	asmend
  3061                        ;
  3062                        ;		asm NOP;
  3063                        	.line	452
  3064                        	asmstart
  3065 05:04C1: EA           	NOP
  3066                        	asmend
  3067                        ;		asm NOP;
  3068                        	.line	453
  3069                        	asmstart
  3070 05:04C2: EA           	NOP
  3071                        	asmend
  3072                        ;		asm NOP;
  3073                        	.line	454
  3074                        	asmstart
  3075 05:04C3: EA           	NOP
  3076                        	asmend
  3077                        ;		asm NOP;
  3078                        	.line	455
  Sat Jul 10 2021  1:15                                                Page 60


  3079                        	asmstart
  3080 05:04C4: EA           	NOP
  3081                        	asmend
  3082                        ;		asm NOP;
  3083                        	.line	456
  3084                        	asmstart
  3085 05:04C5: EA           	NOP
  3086                        	asmend
  3087                        ;		asm NOP;
  3088                        	.line	457
  3089                        	asmstart
  3090 05:04C6: EA           	NOP
  3091                        	asmend
  3092                        ;		asm NOP;
  3093                        	.line	458
  3094                        	asmstart
  3095 05:04C7: EA           	NOP
  3096                        	asmend
  3097                        ;		asm NOP;
  3098                        	.line	459
  3099                        	asmstart
  3100 05:04C8: EA           	NOP
  3101                        	asmend
  3102                        ;		asm NOP;
  3103                        	.line	460
  3104                        	asmstart
  3105 05:04C9: EA           	NOP
  3106                        	asmend
  3107                        ;		asm NOP;
  3108                        	.line	461
  3109                        	asmstart
  3110 05:04CA: EA           	NOP
  3111                        	asmend
  3112                        ;		asm NOP;
  3113                        	.line	462
  3114                        	asmstart
  3115 05:04CB: EA           	NOP
  3116                        	asmend
  3117                        ;	}
  3118                        	.line	463
  3119 05:04CC: 82 79 FF     	brl	L10020
  3120                        ;
  3121                        ;	if(processMessage)
  3122                        	.line	465
  3123                        ;		k_mem_deallocate_heap(processMessage);
  3124 05:04CF: A5 0D        	lda	<L52+processMessage_1
  3125 05:04D1: 05 0F        	ora	<L52+processMessage_1+2
  3126 05:04D3: D0 03        	bne	L58
  3127 05:04D5: 82 08 00     	brl	L10024
  3128                        L58:
  3129                        	.line	466
  3130 05:04D8: D4 0F        	pei	<L52+processMessage_1+2
  3131 05:04DA: D4 0D        	pei	<L52+processMessage_1
  3132 05:04DC: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  3133                        ;
  3134                        ;	return;
  3135                        L10024:
  3136                        	.line	468
  Sat Jul 10 2021  1:15                                                Page 61


  3137                        L59:
  3138 05:04E0: 2B           	pld
  3139 05:04E1: 3B           	tsc
  3140 05:04E2: 18           	clc
  3141 05:04E3: 69 28 00     	adc	#L51
  3142 05:04E6: 1B           	tcs
  3143 05:04E7: 6B           	rtl
  3144                        ;}
  3145                        	.line	469
  3146                        	.endblock	469
  3147             00000028   L51	equ	40
  3148             00000009   L52	equ	9
  3149 05:04E8:              	ends
  3150                        	efunc
  3151                        	.endfunc	469,9,40
  3152                        	.line	469
  3153                        	data
  3154                        L34:
  3155 00:0226: 6B 5F 6E 65  	db	$6B,$5F,$6E,$65,$77,$5F,$65,$76,$65,$6E,
                    $74,$5F,$6C,$6F,$6F
       00:022A: 77 5F 65 76 
       00:022E: 65 6E 74 5F 
       00:0232: 6C 6F 6F 
  3156 00:0235: 70 20 62 65  	db	$70,$20,$62,$65,$66,$6F,$72,$65,$0D,$0A,
                    $00,$57,$69,$6E,$64
       00:0239: 66 6F 72 65 
       00:023D: 0D 0A 00 57 
       00:0241: 69 6E 64 
  3157 00:0244: 6F 77 20 4D  	db	$6F,$77,$20,$4D,$61,$6E,$61,$67,$65,$72,
                    $20,$46,$61,$69,$6C
       00:0248: 61 6E 61 67 
       00:024C: 65 72 20 46 
       00:0250: 61 69 6C 
  3158 00:0253: 65 64 20 74  	db	$65,$64,$20,$74,$6F,$20,$49,$6E,$69,$74,
                    $69,$61,$6C,$69,$7A
       00:0257: 6F 20 49 6E 
       00:025B: 69 74 69 61 
       00:025F: 6C 69 7A 
  3159 00:0262: 65 2E 00 6B  	db	$65,$2E,$00,$6B,$5F,$6E,$65,$77,$5F,$65,
                    $76,$65,$6E,$74,$5F
       00:0266: 5F 6E 65 77 
       00:026A: 5F 65 76 65 
       00:026E: 6E 74 5F 
  3160 00:0271: 6C 6F 6F 70  	db	$6C,$6F,$6F,$70,$20,$57,$69,$6E,$64,$6F,
                    $77,$20,$4D,$61,$6E
       00:0275: 20 57 69 6E 
       00:0279: 64 6F 77 20 
       00:027D: 4D 61 6E 
  3161 00:0280: 61 67 65 72  	db	$61,$67,$65,$72,$20,$76,$65,$72,$73,$69,
                    $6F,$6E,$3A,$00,$0D
       00:0284: 20 76 65 72 
       00:0288: 73 69 6F 6E 
       00:028C: 3A 00 0D 
  3162 00:028F: 0A 00 40 2F  	db	$0A,$00,$40,$2F,$64,$65,$73,$6B,$74,$6F,
                    $70,$00,$40,$2F,$69
       00:0293: 64 65 73 6B 
       00:0297: 74 6F 70 00 
       00:029B: 40 2F 69 
  Sat Jul 10 2021  1:15                                                Page 62


  3163 00:029E: 64 6C 65 00  	db	$64,$6C,$65,$00
  3164 00:02A2:              	ends
  3165                        ;
  3166                        ;
  3167                        ;//
  3168                        ;
  3169                        ;void k_event_loop(void)
  3170                        ;{
  3171                        	.line	474
  3172                        	.line	475
  3173                        	EVTMAN
  3174                        	xdef	~~k_event_loop
  3175                        	func
  3176                        	.function	475
  3177                        ~~k_event_loop:
  3178                        	longa	on
  3179                        	longi	on
  3180 05:04E8: 3B           	tsc
  3181 05:04E9: 38           	sec
  3182 05:04EA: E9 48 00     	sbc	#L61
  3183 05:04ED: 1B           	tcs
  3184 05:04EE: 0B           	phd
  3185 05:04EF: 5B           	tcd
  3186                        	.block	475
  3187                        ;	PFXOSMESSAGE pmsg = NULL;
  3188                        ;	PFXOSMESSAGE processMessage = NULL;
  3189                        ;
  3190                        ;	PFXPROCESS 	 pprocess = NULL;
  3191                        ;	PFXNODE 	 hitNodeParent = NULL;
  3192                        ;	PFXNODE 	 hitNode = NULL;
  3193                        ;	PFXNODE 	 hitChildNode = NULL;
  3194                        ;	PWINDOW 	 pWin = NULL;
  3195                        ;
  3196                        ;	PWINDOWMANAGER pWinMan = NULL;
  3197                        ;
  3198                        ;	// new way //
  3199                        ;	/////////////
  3200                        ;	PWINDOW highhit 		= NULL;
  3201                        ;	PWINDOW currentFocus 	= NULL;
  3202                        ;    PFXNODELIST overlaps	= NULL;
  3203                        ;    PFXNODELIST intersections = NULL;
  3204                        ;    ////
  3205                        ;
  3206                        ;	BOOL 		 bRet = FALSE;
  3207                        ;	//HWND		 hWndFocus 	   = NULL;
  3208                        ;	HWND		 hWndFocusLost = NULL;
  3209                        ;	PFXDOSDEVICE pdd = NULL;
  3210                        ;
  3211                        ;	UINT		cExt = 0;
  3212                        ;	//DISKINFO diskInfo;
  3213                        ;	//BOOL volAvail = FALSE;
  3214                        ;
  3215                        ;	//BOOL floppy = FALSE;
  3216                        ;
  3217                        ;	BOOL sdcardInterted = FALSE;
  3218                        ;
  3219                        ;	//INT floppyLBA = 0;
  3220                        ;	INT	x = 0;
  Sat Jul 10 2021  1:15                                                Page 63


  3221                        ;	INT y = 0;
  3222                        ;
  3223                        ;	/*
  3224                        ;	int c = 0;
  3225                        ;	int cb = 0;
  3226                        ;	int mb = 0;
  3227                        ;	int mx = 0;
  3228                        ;	int my = 0;
  3229                        ;	int kb = 0;
  3230                        ;	*/
  3231                        ;
  3232                        ;	k_debug_string("k_initalize_executive\r\n");
  3233             00000000   pmsg_1	set	0
  3234             00000004   processMessage_1	set	4
  3235             00000008   pprocess_1	set	8
  3236             0000000C   hitNodeParent_1	set	12
  3237             00000010   hitNode_1	set	16
  3238             00000014   hitChildNode_1	set	20
  3239             00000018   pWin_1	set	24
  3240             0000001C   pWinMan_1	set	28
  3241             00000020   highhit_1	set	32
  3242             00000024   currentFocus_1	set	36
  3243             00000028   overlaps_1	set	40
  3244             0000002C   intersections_1	set	44
  3245             00000030   bRet_1	set	48
  3246             00000031   hWndFocusLost_1	set	49
  3247             00000035   pdd_1	set	53
  3248             00000039   cExt_1	set	57
  3249             0000003B   sdcardInterted_1	set	59
  3250             0000003C   x_1	set	60
  3251             0000003E   y_1	set	62
  3252                        	.sym	pmsg,0,138,1,32,16
  3253                        	.sym	processMessage,4,138,1,32,16
  3254                        	.sym	pprocess,8,138,1,32,20
  3255                        	.sym	hitNodeParent,12,138,1,32,5
  3256                        	.sym	hitNode,16,138,1,32,5
  3257                        	.sym	hitChildNode,20,138,1,32,5
  3258                        	.sym	pWin,24,138,1,32,33
  3259                        	.sym	pWinMan,28,138,1,32,64
  3260                        	.sym	highhit,32,138,1,32,33
  3261                        	.sym	currentFocus,36,138,1,32,33
  3262                        	.sym	overlaps,40,138,1,32,6
  3263                        	.sym	intersections,44,138,1,32,6
  3264                        	.sym	bRet,48,14,1,8
  3265                        	.sym	hWndFocusLost,49,129,1,32
  3266                        	.sym	pdd,53,138,1,32,122
  3267                        	.sym	cExt,57,16,1,16
  3268                        	.sym	sdcardInterted,59,14,1,8
  3269                        	.sym	x,60,5,1,16
  3270                        	.sym	y,62,5,1,16
  3271 05:04F0: 64 09        	stz	<L62+pmsg_1
  3272 05:04F2: 64 0B        	stz	<L62+pmsg_1+2
  3273 05:04F4: 64 0D        	stz	<L62+processMessage_1
  3274 05:04F6: 64 0F        	stz	<L62+processMessage_1+2
  3275 05:04F8: 64 11        	stz	<L62+pprocess_1
  3276 05:04FA: 64 13        	stz	<L62+pprocess_1+2
  3277 05:04FC: 64 15        	stz	<L62+hitNodeParent_1
  3278 05:04FE: 64 17        	stz	<L62+hitNodeParent_1+2
  Sat Jul 10 2021  1:15                                                Page 64


  3279 05:0500: 64 19        	stz	<L62+hitNode_1
  3280 05:0502: 64 1B        	stz	<L62+hitNode_1+2
  3281 05:0504: 64 1D        	stz	<L62+hitChildNode_1
  3282 05:0506: 64 1F        	stz	<L62+hitChildNode_1+2
  3283 05:0508: 64 21        	stz	<L62+pWin_1
  3284 05:050A: 64 23        	stz	<L62+pWin_1+2
  3285 05:050C: 64 25        	stz	<L62+pWinMan_1
  3286 05:050E: 64 27        	stz	<L62+pWinMan_1+2
  3287 05:0510: 64 29        	stz	<L62+highhit_1
  3288 05:0512: 64 2B        	stz	<L62+highhit_1+2
  3289 05:0514: 64 2D        	stz	<L62+currentFocus_1
  3290 05:0516: 64 2F        	stz	<L62+currentFocus_1+2
  3291 05:0518: 64 31        	stz	<L62+overlaps_1
  3292 05:051A: 64 33        	stz	<L62+overlaps_1+2
  3293 05:051C: 64 35        	stz	<L62+intersections_1
  3294 05:051E: 64 37        	stz	<L62+intersections_1+2
  3295 05:0520: E2 20        	sep	#$20
  3296                        	longa	off
  3297 05:0522: 64 39        	stz	<L62+bRet_1
  3298 05:0524: C2 20        	rep	#$20
  3299                        	longa	on
  3300 05:0526: 64 3A        	stz	<L62+hWndFocusLost_1
  3301 05:0528: 64 3C        	stz	<L62+hWndFocusLost_1+2
  3302 05:052A: 64 3E        	stz	<L62+pdd_1
  3303 05:052C: 64 40        	stz	<L62+pdd_1+2
  3304 05:052E: 64 42        	stz	<L62+cExt_1
  3305 05:0530: E2 20        	sep	#$20
  3306                        	longa	off
  3307 05:0532: 64 44        	stz	<L62+sdcardInterted_1
  3308 05:0534: C2 20        	rep	#$20
  3309                        	longa	on
  3310 05:0536: 64 45        	stz	<L62+x_1
  3311 05:0538: 64 47        	stz	<L62+y_1
  3312                        	.line	521
  3313 05:053A: F4 xx xx     	pea	#^L60
  3314 05:053D: F4 xx xx     	pea	#<L60
  3315 05:0540: 22 xx xx xx  	jsl	~~k_debug_string
  3316                        ;	k_initalize_executive();
  3317                        	.line	522
  3318 05:0544: 22 xx xx xx  	jsl	~~k_initalize_executive
  3319                        ;	k_heap_integrity_check();
  3320                        	.line	523
  3321 05:0548: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  3322                        ;	k_debug_string("k_initalize_event_manager\r\n");
  3323                        	.line	524
  3324 05:054C: F4 xx xx     	pea	#^L60+24
  3325 05:054F: F4 xx xx     	pea	#<L60+24
  3326 05:0552: 22 xx xx xx  	jsl	~~k_debug_string
  3327                        ;	k_initalize_event_manager();
  3328                        	.line	525
  3329 05:0556: 22 EB 00 05  	jsl	~~k_initalize_event_manager
  3330                        ;	k_heap_integrity_check();
  3331                        	.line	526
  3332 05:055A: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  3333                        ;	k_debug_string("k_initalize_window_manager befor
                    e\r\n");
  3334                        	.line	527
  3335 05:055E: F4 xx xx     	pea	#^L60+52
  Sat Jul 10 2021  1:15                                                Page 65


  3336 05:0561: F4 xx xx     	pea	#<L60+52
  3337 05:0564: 22 xx xx xx  	jsl	~~k_debug_string
  3338                        ;	pWinMan = k_initializeWindowManager();
  3339                        	.line	528
  3340 05:0568: 22 xx xx xx  	jsl	~~k_initializeWindowManager
  3341 05:056C: 85 25        	sta	<L62+pWinMan_1
  3342 05:056E: 86 27        	stx	<L62+pWinMan_1+2
  3343                        ;
  3344                        ;	if(!pWinMan)
  3345                        	.line	530
  3346                        ;	{
  3347 05:0570: A5 25        	lda	<L62+pWinMan_1
  3348 05:0572: 05 27        	ora	<L62+pWinMan_1+2
  3349 05:0574: F0 03        	beq	L64
  3350 05:0576: 82 1B 00     	brl	L10025
  3351                        L64:
  3352                        	.line	531
  3353                        ;		k_exec_throw_exception(THIS_MODULE,0x000
                    10011,"Window Manager Failed to Initialize.",-1);
  3354                        	.line	532
  3355 05:0579: F4 FF FF     	pea	#<$ffffffff
  3356 05:057C: F4 xx xx     	pea	#^L60+88
  3357 05:057F: F4 xx xx     	pea	#<L60+88
  3358 05:0582: F4 01 00     	pea	#^$10011
  3359 05:0585: F4 11 00     	pea	#<$10011
  3360 05:0588: AD xx xx     	lda	|~~THIS_MODULE+2
  3361 05:058B: 48           	pha
  3362 05:058C: AD xx xx     	lda	|~~THIS_MODULE
  3363 05:058F: 48           	pha
  3364 05:0590: 22 xx xx xx  	jsl	~~k_exec_throw_exception
  3365                        ;	}
  3366                        	.line	533
  3367                        ;
  3368                        ;	k_debug_integer("k_initalize_window_manager vers
                    ion:",pWinMan->QueryWindowManager(WM_QUERY_VERSION_MAJOR));
  3369                        L10025:
  3370                        	.line	535
  3371 05:0594: F4 00 00     	pea	#<$0
  3372 05:0597: A0 0E 00     	ldy	#$e
  3373 05:059A: B7 25        	lda	[<L62+pWinMan_1],Y
  3374 05:059C: AA           	tax
  3375 05:059D: A0 0C 00     	ldy	#$c
  3376 05:05A0: B7 25        	lda	[<L62+pWinMan_1],Y
  3377                        	xref	~~~lcal
  3378 05:05A2: 22 xx xx xx  	jsl	~~~lcal
  3379 05:05A6: 48           	pha
  3380 05:05A7: F4 xx xx     	pea	#^L60+125
  3381 05:05AA: F4 xx xx     	pea	#<L60+125
  3382 05:05AD: 22 xx xx xx  	jsl	~~k_debug_integer
  3383                        ;	k_debug_string("\r\n");
  3384                        	.line	536
  3385 05:05B1: F4 xx xx     	pea	#^L60+161
  3386 05:05B4: F4 xx xx     	pea	#<L60+161
  3387 05:05B7: 22 xx xx xx  	jsl	~~k_debug_string
  3388                        ;
  3389                        ;	k_heap_integrity_check();
  3390                        	.line	538
  3391 05:05BB: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  Sat Jul 10 2021  1:15                                                Page 66


  3392                        ;
  3393                        ;
  3394                        ;	/*
  3395                        ;	//////
  3396                        ;	// TEST
  3397                        ;	/////
  3398                        ;
  3399                        ;	asm cli;
  3400                        ;
  3401                        ;	floppy_init();
  3402                        ;
  3403                        ;	//asm sei;
  3404                        ;
  3405                        ;	while(TRUE);
  3406                        ;	///////
  3407                        ;	*/
  3408                        ;
  3409                        ;	//asm cli;
  3410                        ;
  3411                        ;	//k_debug_string("cli after\r\n");
  3412                        ;
  3413                        ;	if(_k_eventQueue!=NULL)
  3414                        	.line	560
  3415                        ;	{
  3416 05:05BF: AD xx xx     	lda	|~~_k_eventQueue
  3417 05:05C2: 0D xx xx     	ora	|~~_k_eventQueue+2
  3418 05:05C5: D0 03        	bne	L65
  3419 05:05C7: 82 B8 06     	brl	L10026
  3420                        L65:
  3421                        	.line	561
  3422                        ;		processMessage = k_create_process_msg(NU
                    LL);
  3423                        	.line	562
  3424 05:05CA: F4 00 00     	pea	#^$0
  3425 05:05CD: F4 00 00     	pea	#<$0
  3426 05:05D0: 22 C7 1F 05  	jsl	~~k_create_process_msg
  3427 05:05D4: 85 0D        	sta	<L62+processMessage_1
  3428 05:05D6: 86 0F        	stx	<L62+processMessage_1+2
  3429                        ;		k_heap_integrity_check();
  3430                        	.line	563
  3431 05:05D8: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  3432                        ;		//eventProcs[IDLE_PROC] = IdleProc;
  3433                        ;		//k_attach_process_events(IdleProc,NULL)
                    ;
  3434                        ;
  3435                        ;		/*
  3436                        ;		pprocess = k_exec_launchProcess("@/idle"
                    );
  3437                        ;		if(pprocess!=NULL)
  3438                        ;		{
  3439                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3440                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3441                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  3442                        ;		}
  3443                        ;		*/
  Sat Jul 10 2021  1:15                                                Page 67


  3444                        ;		//k_debug_string("check1\r\n");
  3445                        ;		//k_heap_integrity_check();
  3446                        ;
  3447                        ;		//pprocess =  k_exec_createProcess("cons
                    ole",DefConsoleProc);
  3448                        ;
  3449                        ;		//k_debug_string("check2\r\n");
  3450                        ;		//k_heap_integrity_check();
  3451                        ;		//pprocess =  k_exec_createProcess("desk
                    top",DesktopEnvironmentProc);
  3452                        ;
  3453                        ;#ifdef USE_FX256_FMX
  3454                        ;
  3455                        ;
  3456                        ;		/*
  3457                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  3458                        ;		if(pprocess!=NULL)
  3459                        ;		{
  3460                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3461                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3462                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  3463                        ;		}
  3464                        ;		*/
  3465                        ;
  3466                        ;
  3467                        ;		pprocess = k_exec_launchProcess("@/deskt
                    op");
  3468                        ;		if(pprocess!=NULL)
  3469                        ;		{
  3470                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3471                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3472                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  3473                        ;			k_heap_integrity_check();
  3474                        ;		}
  3475                        ;
  3476                        ;#elif USE_FX256_FMU
  3477                        ;
  3478                        ;
  3479                        ;		/*
  3480                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  3481                        ;		if(pprocess!=NULL)
  3482                        ;		{
  3483                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3484                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3485                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  3486                        ;		}
  3487                        ;		*/
  Sat Jul 10 2021  1:15                                                Page 68


  3488                        ;
  3489                        ;
  3490                        ;		pprocess = k_exec_launchProcess("@/deskt
                    op");
  3491                        ;		if(pprocess!=NULL)
  3492                        ;		{
  3493                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3494                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3495                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  3496                        ;			k_heap_integrity_check();
  3497                        ;		}
  3498                        ;#else
  3499                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  3500                        	.line	631
  3501 05:05DC: F4 xx xx     	pea	#^L60+164
  3502 05:05DF: F4 xx xx     	pea	#<L60+164
  3503 05:05E2: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  3504 05:05E6: 85 11        	sta	<L62+pprocess_1
  3505 05:05E8: 86 13        	stx	<L62+pprocess_1+2
  3506                        ;		if(pprocess!=NULL)
  3507                        	.line	632
  3508                        ;		{
  3509 05:05EA: A5 11        	lda	<L62+pprocess_1
  3510 05:05EC: 05 13        	ora	<L62+pprocess_1+2
  3511 05:05EE: D0 03        	bne	L66
  3512 05:05F0: 82 1F 00     	brl	L10027
  3513                        L66:
  3514                        	.line	633
  3515                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3516                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3517                        	.line	635
  3518 05:05F3: D4 13        	pei	<L62+pprocess_1+2
  3519 05:05F5: D4 11        	pei	<L62+pprocess_1
  3520 05:05F7: A0 5E 00     	ldy	#$5e
  3521 05:05FA: B7 11        	lda	[<L62+pprocess_1],Y
  3522 05:05FC: 48           	pha
  3523 05:05FD: A0 5C 00     	ldy	#$5c
  3524 05:0600: B7 11        	lda	[<L62+pprocess_1],Y
  3525 05:0602: 48           	pha
  3526 05:0603: 22 73 15 05  	jsl	~~k_attach_process_events
  3527                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  3528                        	.line	636
  3529 05:0607: F4 01 00     	pea	#<$1
  3530 05:060A: D4 13        	pei	<L62+pprocess_1+2
  3531 05:060C: D4 11        	pei	<L62+pprocess_1
  3532 05:060E: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  3533                        ;		}
  3534                        	.line	637
  3535                        ;
  3536                        ;#endif
  3537                        ;
  Sat Jul 10 2021  1:15                                                Page 69


  3538                        ;		pprocess = k_exec_launchProcess("@/idle"
                    );
  3539                        L10027:
  3540                        	.line	641
  3541 05:0612: F4 xx xx     	pea	#^L60+174
  3542 05:0615: F4 xx xx     	pea	#<L60+174
  3543 05:0618: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  3544 05:061C: 85 11        	sta	<L62+pprocess_1
  3545 05:061E: 86 13        	stx	<L62+pprocess_1+2
  3546                        ;		if(pprocess!=NULL)
  3547                        	.line	642
  3548                        ;		{
  3549 05:0620: A5 11        	lda	<L62+pprocess_1
  3550 05:0622: 05 13        	ora	<L62+pprocess_1+2
  3551 05:0624: D0 03        	bne	L67
  3552 05:0626: 82 1F 00     	brl	L10028
  3553                        L67:
  3554                        	.line	643
  3555                        ;
  3556                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3557                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3558                        	.line	646
  3559 05:0629: D4 13        	pei	<L62+pprocess_1+2
  3560 05:062B: D4 11        	pei	<L62+pprocess_1
  3561 05:062D: A0 5E 00     	ldy	#$5e
  3562 05:0630: B7 11        	lda	[<L62+pprocess_1],Y
  3563 05:0632: 48           	pha
  3564 05:0633: A0 5C 00     	ldy	#$5c
  3565 05:0636: B7 11        	lda	[<L62+pprocess_1],Y
  3566 05:0638: 48           	pha
  3567 05:0639: 22 73 15 05  	jsl	~~k_attach_process_events
  3568                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  3569                        	.line	647
  3570 05:063D: F4 00 00     	pea	#<$0
  3571 05:0640: D4 13        	pei	<L62+pprocess_1+2
  3572 05:0642: D4 11        	pei	<L62+pprocess_1
  3573 05:0644: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  3574                        ;		}
  3575                        	.line	648
  3576                        ;
  3577                        ;
  3578                        ;		//k_debug_string("check3\r\n");
  3579                        ;		//k_heap_integrity_check();
  3580                        ;
  3581                        ;
  3582                        ;		/*
  3583                        ;		pprocess =  k_exec_createProcess("consol
                    e",DefConsoleProc2);
  3584                        ;		if(pprocess!=NULL)
  3585                        ;		{
  3586                        ;			//k_attach_events((FXEventProc)p
                    process->execProc->data,pprocess);
  3587                        ;			k_attach_process_events((FXEvent
                    Proc)pprocess->execProc->data,pprocess);
  3588                        ;		}
  Sat Jul 10 2021  1:15                                                Page 70


  3589                        ;		 */
  3590                        ;		//asm cli;
  3591                        ;
  3592                        ;
  3593                        ;		while(1)
  3594                        L10028:
  3595                        	.line	666
  3596                        L10029:
  3597                        ;		{
  3598                        	.line	667
  3599                        ;			asm sei;
  3600                        	.line	668
  3601                        	asmstart
  3602 05:0648: 78           	sei
  3603                        	asmend
  3604                        ;
  3605                        ;			//asm sei;
  3606                        ;			pmsg = (PFXOSMESSAGE)k_dequeue(_
                    k_eventQueue);
  3607                        	.line	671
  3608 05:0649: AD xx xx     	lda	|~~_k_eventQueue+2
  3609 05:064C: 48           	pha
  3610 05:064D: AD xx xx     	lda	|~~_k_eventQueue
  3611 05:0650: 48           	pha
  3612 05:0651: 22 xx xx xx  	jsl	~~k_dequeue
  3613 05:0655: 85 09        	sta	<L62+pmsg_1
  3614 05:0657: 86 0B        	stx	<L62+pmsg_1+2
  3615                        ;			//if( pmsg == NULL)
  3616                        ;			//	k_debug_integer("k_event
                    _loop pmsg == NULL:", cExt++);
  3617                        ;			//asm cli;
  3618                        ;
  3619                        ;			while(pmsg!=NULL)
  3620                        	.line	676
  3621                        L10031:
  3622 05:0659: A5 09        	lda	<L62+pmsg_1
  3623 05:065B: 05 0B        	ora	<L62+pmsg_1+2
  3624 05:065D: D0 03        	bne	L68
  3625 05:065F: 82 00 06     	brl	L10032
  3626                        L68:
  3627                        ;			{
  3628                        	.line	677
  3629                        ;				//if( pmsg->type != FX_P
                    ROCESS_TIMER)
  3630                        ;				//	k_debug_integer(
                    "k_event_loop event:", pmsg->type);
  3631                        ;
  3632                        ;				if(pmsg->type == FX_FOCU
                    S_WINDOW)
  3633                        	.line	681
  3634                        ;				{
  3635 05:0662: A0 08 00     	ldy	#$8
  3636 05:0665: B7 09        	lda	[<L62+pmsg_1],Y
  3637 05:0667: C9 13 0F     	cmp	#<$f13
  3638 05:066A: F0 03        	beq	L69
  3639 05:066C: 82 B1 00     	brl	L10033
  3640                        L69:
  3641                        	.line	682
  Sat Jul 10 2021  1:15                                                Page 71


  3642                        ;					if(_k_hWndFocus 
                    && pmsg->hwnd!=_k_hWndFocus)
  3643                        	.line	683
  3644                        ;					{
  3645 05:066F: AD xx xx     	lda	|~~_k_hWndFocus
  3646 05:0672: 0D xx xx     	ora	|~~_k_hWndFocus+2
  3647 05:0675: D0 03        	bne	L70
  3648 05:0677: 82 A6 00     	brl	L10034
  3649                        L70:
  3650 05:067A: A0 0A 00     	ldy	#$a
  3651 05:067D: B7 09        	lda	[<L62+pmsg_1],Y
  3652 05:067F: CD xx xx     	cmp	|~~_k_hWndFocus
  3653 05:0682: D0 08        	bne	L71
  3654 05:0684: A0 0C 00     	ldy	#$c
  3655 05:0687: B7 09        	lda	[<L62+pmsg_1],Y
  3656 05:0689: CD xx xx     	cmp	|~~_k_hWndFocus+2
  3657                        L71:
  3658 05:068C: D0 03        	bne	L72
  3659 05:068E: 82 8F 00     	brl	L10034
  3660                        L72:
  3661                        	.line	684
  3662                        ;						k_debug_
                    string("k_event_loop RECEIVED:FX_FOCUS_WINDOW\r\n");
  3663                        	.line	685
  3664 05:0691: F4 xx xx     	pea	#^L60+181
  3665 05:0694: F4 xx xx     	pea	#<L60+181
  3666 05:0697: 22 xx xx xx  	jsl	~~k_debug_string
  3667                        ;						hWndFocu
                    sLost =  _k_hWndFocus;
  3668                        	.line	686
  3669 05:069B: AD xx xx     	lda	|~~_k_hWndFocus
  3670 05:069E: 85 3A        	sta	<L62+hWndFocusLost_1
  3671 05:06A0: AD xx xx     	lda	|~~_k_hWndFocus+2
  3672 05:06A3: 85 3C        	sta	<L62+hWndFocusLost_1+2
  3673                        ;						k_debug_
                    pointer("*** k_event_loop::FX_FOCUS_LOST:",hWndFocusLost);
  3674                        	.line	687
  3675 05:06A5: D4 3C        	pei	<L62+hWndFocusLost_1+2
  3676 05:06A7: D4 3A        	pei	<L62+hWndFocusLost_1
  3677 05:06A9: F4 xx xx     	pea	#^L60+221
  3678 05:06AC: F4 xx xx     	pea	#<L60+221
  3679 05:06AF: 22 xx xx xx  	jsl	~~k_debug_pointer
  3680                        ;						_k_hWndF
                    ocus = pmsg->hwnd;
  3681                        	.line	688
  3682 05:06B3: A0 0A 00     	ldy	#$a
  3683 05:06B6: B7 09        	lda	[<L62+pmsg_1],Y
  3684 05:06B8: 8D xx xx     	sta	|~~_k_hWndFocus
  3685 05:06BB: A0 0C 00     	ldy	#$c
  3686 05:06BE: B7 09        	lda	[<L62+pmsg_1],Y
  3687 05:06C0: 8D xx xx     	sta	|~~_k_hWndFocus+2
  3688                        ;						bRet = k
                    _enqueue(_k_eventQueue,k_create_synthetic_window_msg(hWndFoc
                    usLost,FX_FOCUS_LOST,&hWndFocusLost,sizeof(hWndFocusLost)));
  3689                        	.line	689
  3690 05:06C3: F4 04 00     	pea	#<$4
  3691 05:06C6: F4 00 00     	pea	#0
  3692 05:06C9: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 72


  3693 05:06CA: 7B           	tdc
  3694 05:06CB: 69 3A 00     	adc	#<L62+hWndFocusLost_1
  3695 05:06CE: 48           	pha
  3696 05:06CF: F4 14 0F     	pea	#<$f14
  3697 05:06D2: D4 3C        	pei	<L62+hWndFocusLost_1+2
  3698 05:06D4: D4 3A        	pei	<L62+hWndFocusLost_1
  3699 05:06D6: 22 37 20 05  	jsl	~~k_create_synthetic_window_msg
  3700 05:06DA: 85 01        	sta	<R0
  3701 05:06DC: 86 03        	stx	<R0+2
  3702 05:06DE: DA           	phx
  3703 05:06DF: 48           	pha
  3704 05:06E0: AD xx xx     	lda	|~~_k_eventQueue+2
  3705 05:06E3: 48           	pha
  3706 05:06E4: AD xx xx     	lda	|~~_k_eventQueue
  3707 05:06E7: 48           	pha
  3708 05:06E8: 22 xx xx xx  	jsl	~~k_enqueue
  3709 05:06EC: E2 20        	sep	#$20
  3710                        	longa	off
  3711 05:06EE: 85 39        	sta	<L62+bRet_1
  3712 05:06F0: C2 20        	rep	#$20
  3713                        	longa	on
  3714                        ;						if(!bRet
                    )
  3715                        	.line	690
  3716                        ;						{
  3717 05:06F2: A5 39        	lda	<L62+bRet_1
  3718 05:06F4: 29 FF 00     	and	#$ff
  3719 05:06F7: F0 03        	beq	L73
  3720 05:06F9: 82 10 00     	brl	L10035
  3721                        L73:
  3722                        	.line	691
  3723                        ;							
                    k_debug_integer("k_event_loop RECEIVED:FX_FOCUS_WINDOW:k_enq
                    ueue:",bRet);
  3724                        	.line	692
  3725 05:06FC: A5 39        	lda	<L62+bRet_1
  3726 05:06FE: 29 FF 00     	and	#$ff
  3727 05:0701: 48           	pha
  3728 05:0702: F4 xx xx     	pea	#^L60+254
  3729 05:0705: F4 xx xx     	pea	#<L60+254
  3730 05:0708: 22 xx xx xx  	jsl	~~k_debug_integer
  3731                        ;						}
  3732                        	.line	693
  3733                        ;						k_send_w
                    indow_message(hWndFocusLost,FX_FOCUS_LOST,NULL,0);
  3734                        L10035:
  3735                        	.line	694
  3736 05:070C: F4 00 00     	pea	#<$0
  3737 05:070F: F4 00 00     	pea	#^$0
  3738 05:0712: F4 00 00     	pea	#<$0
  3739 05:0715: F4 14 0F     	pea	#<$f14
  3740 05:0718: D4 3C        	pei	<L62+hWndFocusLost_1+2
  3741 05:071A: D4 3A        	pei	<L62+hWndFocusLost_1
  3742 05:071C: 22 E8 18 05  	jsl	~~k_send_window_message
  3743                        ;
  3744                        ;					}
  3745                        	.line	696
  3746                        ;				}
  Sat Jul 10 2021  1:15                                                Page 73


  3747                        L10034:
  3748                        	.line	697
  3749                        ;				/*
  3750                        ;				if(_k_hLockedFocus && (p
                    msg->hwnd != _k_hLockedFocus))
  3751                        ;				{
  3752                        ;					pmsg->hwnd = _k_
                    hLockedFocus;
  3753                        ;					k_debug_integer(
                    "k_event_loop _k_hLockedFocus LOCKED pmsg->type:", pmsg->typ
                    e);
  3754                        ;					k_debug_pointer(
                    "k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:", pmsg->hwn
                    d);
  3755                        ;				}
  3756                        ;				*/
  3757                        ;
  3758                        ;				_k_system_timer = pmsg->
                    msgTime;
  3759                        L10033:
  3760                        	.line	707
  3761 05:0720: A0 12 00     	ldy	#$12
  3762 05:0723: B7 09        	lda	[<L62+pmsg_1],Y
  3763 05:0725: 8D xx xx     	sta	|~~_k_system_timer
  3764 05:0728: A0 14 00     	ldy	#$14
  3765 05:072B: B7 09        	lda	[<L62+pmsg_1],Y
  3766 05:072D: 8D xx xx     	sta	|~~_k_system_timer+2
  3767                        ;				//k_debug_integer("k_eve
                    nt_loop event:", pmsg->type);
  3768                        ;				//k_debug_byte_array("k_
                    event_loop data:", pmsg->data,3);
  3769                        ;				//k_debug_char("k_event_
                    loop char:", pmsg->data[2]);
  3770                        ;
  3771                        ;				//k_debug_string("check3
                    \r\n");
  3772                        ;				//k_heap_integrity_check
                    ();
  3773                        ;				if(FX_MENU_COMMAND == pm
                    sg->type)
  3774                        	.line	714
  3775                        ;					k_debug_pointer(
                    "k_event_loop event::FX_MENU_COMMAND:", pmsg->hwnd);
  3776 05:0730: A0 08 00     	ldy	#$8
  3777 05:0733: B7 09        	lda	[<L62+pmsg_1],Y
  3778 05:0735: C9 01 FA     	cmp	#<$fa01
  3779 05:0738: F0 03        	beq	L74
  3780 05:073A: 82 16 00     	brl	L10036
  3781                        L74:
  3782                        	.line	715
  3783 05:073D: A0 0C 00     	ldy	#$c
  3784 05:0740: B7 09        	lda	[<L62+pmsg_1],Y
  3785 05:0742: 48           	pha
  3786 05:0743: A0 0A 00     	ldy	#$a
  3787 05:0746: B7 09        	lda	[<L62+pmsg_1],Y
  3788 05:0748: 48           	pha
  3789 05:0749: F4 xx xx     	pea	#^L60+303
  3790 05:074C: F4 xx xx     	pea	#<L60+303
  Sat Jul 10 2021  1:15                                                Page 74


  3791 05:074F: 22 xx xx xx  	jsl	~~k_debug_pointer
  3792                        ;
  3793                        ;				if(pmsg->type == FX_PROC
                    ESS_FLOPPY)
  3794                        L10036:
  3795                        	.line	717
  3796                        ;				{
  3797 05:0753: A0 08 00     	ldy	#$8
  3798 05:0756: B7 09        	lda	[<L62+pmsg_1],Y
  3799 05:0758: C9 F2 FF     	cmp	#<$fff2
  3800 05:075B: F0 03        	beq	L75
  3801 05:075D: 82 0A 00     	brl	L10037
  3802                        L75:
  3803                        	.line	718
  3804                        ;					k_debug_string("
                    k_event_loop data:FX_PROCESS_FLOPPY\r\n");
  3805                        	.line	719
  3806 05:0760: F4 xx xx     	pea	#^L60+340
  3807 05:0763: F4 xx xx     	pea	#<L60+340
  3808 05:0766: 22 xx xx xx  	jsl	~~k_debug_string
  3809                        ;
  3810                        ;					//k_debug_byte_a
                    rray("k_event_loop data:FX_PROCESS_FLOPPY:", pmsg->pheap,512
                    );
  3811                        ;				}
  3812                        	.line	722
  3813                        ;				if(pmsg->type == FX_PROC
                    ESS_SDCARD)
  3814                        L10037:
  3815                        	.line	723
  3816                        ;				{
  3817 05:076A: A0 08 00     	ldy	#$8
  3818 05:076D: B7 09        	lda	[<L62+pmsg_1],Y
  3819 05:076F: C9 F3 FF     	cmp	#<$fff3
  3820 05:0772: F0 03        	beq	L76
  3821 05:0774: 82 3F 00     	brl	L10038
  3822                        L76:
  3823                        	.line	724
  3824                        ;					k_debug_integer(
                    "k_event_loop data:FX_PROCESS_SDCARD:TYPE:",pmsg->data[0]);
  3825                        	.line	725
  3826 05:0777: A0 16 00     	ldy	#$16
  3827 05:077A: B7 09        	lda	[<L62+pmsg_1],Y
  3828 05:077C: 29 FF 00     	and	#$ff
  3829 05:077F: 48           	pha
  3830 05:0780: F4 xx xx     	pea	#^L60+378
  3831 05:0783: F4 xx xx     	pea	#<L60+378
  3832 05:0786: 22 xx xx xx  	jsl	~~k_debug_integer
  3833                        ;
  3834                        ;					if(!sdcardIntert
                    ed)
  3835                        	.line	727
  3836                        ;					{
  3837 05:078A: A5 44        	lda	<L62+sdcardInterted_1
  3838 05:078C: 29 FF 00     	and	#$ff
  3839 05:078F: F0 03        	beq	L77
  3840 05:0791: 82 22 00     	brl	L10039
  3841                        L77:
  Sat Jul 10 2021  1:15                                                Page 75


  3842                        	.line	728
  3843                        ;						sdcardIn
                    terted = TRUE;
  3844                        	.line	729
  3845 05:0794: E2 20        	sep	#$20
  3846                        	longa	off
  3847 05:0796: A9 01        	lda	#$1
  3848 05:0798: 85 44        	sta	<L62+sdcardInterted_1
  3849 05:079A: C2 20        	rep	#$20
  3850                        	longa	on
  3851                        ;
  3852                        ;						pdd = k_
                    create_dos_device(FXDOS_SDC);
  3853                        	.line	731
  3854 05:079C: F4 05 00     	pea	#<$5
  3855 05:079F: 22 xx xx xx  	jsl	~~k_create_dos_device
  3856 05:07A3: 85 3E        	sta	<L62+pdd_1
  3857 05:07A5: 86 40        	stx	<L62+pdd_1+2
  3858                        ;						if(pdd =
                    = NULL)
  3859                        	.line	732
  3860                        ;						{
  3861 05:07A7: A5 3E        	lda	<L62+pdd_1
  3862 05:07A9: 05 40        	ora	<L62+pdd_1+2
  3863 05:07AB: F0 03        	beq	L78
  3864 05:07AD: 82 06 00     	brl	L10040
  3865                        L78:
  3866                        	.line	733
  3867                        ;							
                    sdcardInterted = FALSE;
  3868                        	.line	734
  3869 05:07B0: E2 20        	sep	#$20
  3870                        	longa	off
  3871 05:07B2: 64 44        	stz	<L62+sdcardInterted_1
  3872 05:07B4: C2 20        	rep	#$20
  3873                        	longa	on
  3874                        ;						}
  3875                        	.line	735
  3876                        ;						//k_read
                    _dos_directory(pdd);
  3877                        ;						//k_dos_
                    read_file(pdd,"APGMLIB.LIB");
  3878                        ;						//pdd->p
                    fReader(0,NULL);
  3879                        ;					}
  3880                        L10040:
  3881                        	.line	739
  3882                        ;
  3883                        ;
  3884                        ;					//k_debug_byte_a
                    rray("k_event_loop data:FX_PROCESS_FLOPPY:", pmsg->pheap,512
                    );
  3885                        ;				}
  3886                        L10039:
  3887                        	.line	743
  3888                        ;
  3889                        ;				if((pmsg->type >= FX_MOU
                    SE_MOVE) &&  (pmsg->type <= FX_MBUTTON_DBLCLICK))
  Sat Jul 10 2021  1:15                                                Page 76


  3890                        L10038:
  3891                        	.line	745
  3892                        ;				{
  3893 05:07B6: A0 08 00     	ldy	#$8
  3894 05:07B9: B7 09        	lda	[<L62+pmsg_1],Y
  3895 05:07BB: C9 03 0F     	cmp	#<$f03
  3896 05:07BE: B0 03        	bcs	L79
  3897 05:07C0: 82 00 04     	brl	L10041
  3898                        L79:
  3899 05:07C3: A9 0F 0F     	lda	#$f0f
  3900 05:07C6: A0 08 00     	ldy	#$8
  3901 05:07C9: D7 09        	cmp	[<L62+pmsg_1],Y
  3902 05:07CB: B0 03        	bcs	L80
  3903 05:07CD: 82 F3 03     	brl	L10041
  3904                        L80:
  3905                        	.line	746
  3906                        ;					//k_debug_pointe
                    r("k_event_loop MOUSE hwnd:", pmsg->hwnd);
  3907                        ;					//k_debug_intege
                    r("k_event_loop MOUSE event:", pmsg->type);
  3908                        ;
  3909                        ;					x = MAKEWORD(pms
                    g->data[1],pmsg->data[2]);
  3910                        	.line	750
  3911 05:07D0: A0 18 00     	ldy	#$18
  3912 05:07D3: B7 09        	lda	[<L62+pmsg_1],Y
  3913 05:07D5: 29 FF 00     	and	#$ff
  3914 05:07D8: 85 05        	sta	<R1
  3915 05:07DA: A5 05        	lda	<R1
  3916 05:07DC: EB           	xba
  3917 05:07DD: 29 00 FF     	and	#$ff00
  3918 05:07E0: 85 01        	sta	<R0
  3919 05:07E2: A0 17 00     	ldy	#$17
  3920 05:07E5: B7 09        	lda	[<L62+pmsg_1],Y
  3921 05:07E7: 29 FF 00     	and	#$ff
  3922 05:07EA: 85 05        	sta	<R1
  3923 05:07EC: A5 05        	lda	<R1
  3924 05:07EE: 05 01        	ora	<R0
  3925 05:07F0: 85 45        	sta	<L62+x_1
  3926                        ;					y = MAKEWORD(pms
                    g->data[3],pmsg->data[4]);
  3927                        	.line	751
  3928 05:07F2: A0 1A 00     	ldy	#$1a
  3929 05:07F5: B7 09        	lda	[<L62+pmsg_1],Y
  3930 05:07F7: 29 FF 00     	and	#$ff
  3931 05:07FA: 85 05        	sta	<R1
  3932 05:07FC: A5 05        	lda	<R1
  3933 05:07FE: EB           	xba
  3934 05:07FF: 29 00 FF     	and	#$ff00
  3935 05:0802: 85 01        	sta	<R0
  3936 05:0804: A0 19 00     	ldy	#$19
  3937 05:0807: B7 09        	lda	[<L62+pmsg_1],Y
  3938 05:0809: 29 FF 00     	and	#$ff
  3939 05:080C: 85 05        	sta	<R1
  3940 05:080E: A5 05        	lda	<R1
  3941 05:0810: 05 01        	ora	<R0
  3942 05:0812: 85 47        	sta	<L62+y_1
  3943                        ;
  Sat Jul 10 2021  1:15                                                Page 77


  3944                        ;					////////////////
                    ////////////////////////////////////////
  3945                        ;					// BETA SECTION
  3946                        ;					////////////////
                    ////////////////////////////////////////
  3947                        ;
  3948                        ;					highhit = k_user
                    _FindRect(x,y);
  3949                        	.line	757
  3950 05:0814: D4 47        	pei	<L62+y_1
  3951 05:0816: D4 45        	pei	<L62+x_1
  3952 05:0818: 22 xx xx xx  	jsl	~~k_user_FindRect
  3953 05:081C: 85 29        	sta	<L62+highhit_1
  3954 05:081E: 86 2B        	stx	<L62+highhit_1+2
  3955                        ;					if(highhit!=NULL
                     && (highhit->styleEx & FXWSX_DESKTOP_FLAG) == 0)
  3956                        	.line	758
  3957                        ;					{
  3958 05:0820: A5 29        	lda	<L62+highhit_1
  3959 05:0822: 05 2B        	ora	<L62+highhit_1+2
  3960 05:0824: D0 03        	bne	L81
  3961 05:0826: 82 DF 00     	brl	L10042
  3962                        L81:
  3963 05:0829: A0 06 00     	ldy	#$6
  3964 05:082C: B7 29        	lda	[<L62+highhit_1],Y
  3965 05:082E: 29 04 00     	and	#<$4
  3966 05:0831: F0 03        	beq	L82
  3967 05:0833: 82 D2 00     	brl	L10042
  3968                        L82:
  3969                        	.line	759
  3970                        ;						if((pmsg
                    ->type == FX_LBUTTON_DOWN) || (pmsg->type == FX_MBUTTON_DOWN
                    ) || (pmsg->type == FX_RBUTTON_DOWN))
  3971                        	.line	760
  3972                        ;						{
  3973 05:0836: A0 08 00     	ldy	#$8
  3974 05:0839: B7 09        	lda	[<L62+pmsg_1],Y
  3975 05:083B: C9 04 0F     	cmp	#<$f04
  3976 05:083E: D0 03        	bne	L84
  3977 05:0840: 82 1A 00     	brl	L83
  3978                        L84:
  3979 05:0843: A0 08 00     	ldy	#$8
  3980 05:0846: B7 09        	lda	[<L62+pmsg_1],Y
  3981 05:0848: C9 0C 0F     	cmp	#<$f0c
  3982 05:084B: D0 03        	bne	L85
  3983 05:084D: 82 0D 00     	brl	L83
  3984                        L85:
  3985 05:0850: A0 08 00     	ldy	#$8
  3986 05:0853: B7 09        	lda	[<L62+pmsg_1],Y
  3987 05:0855: C9 08 0F     	cmp	#<$f08
  3988 05:0858: F0 03        	beq	L86
  3989 05:085A: 82 76 00     	brl	L10043
  3990                        L86:
  3991                        L83:
  3992                        	.line	761
  3993                        ;							
                    if(currentFocus!=NULL && currentFocus!=highhit)
  3994                        	.line	762
  Sat Jul 10 2021  1:15                                                Page 78


  3995                        ;							
                    {
  3996 05:085D: A5 2D        	lda	<L62+currentFocus_1
  3997 05:085F: 05 2F        	ora	<L62+currentFocus_1+2
  3998 05:0861: D0 03        	bne	L87
  3999 05:0863: 82 6D 00     	brl	L10044
  4000                        L87:
  4001 05:0866: A5 2D        	lda	<L62+currentFocus_1
  4002 05:0868: C5 29        	cmp	<L62+highhit_1
  4003 05:086A: D0 04        	bne	L88
  4004 05:086C: A5 2F        	lda	<L62+currentFocus_1+2
  4005 05:086E: C5 2B        	cmp	<L62+highhit_1+2
  4006                        L88:
  4007 05:0870: D0 03        	bne	L89
  4008 05:0872: 82 5E 00     	brl	L10044
  4009                        L89:
  4010                        	.line	763
  4011                        ;							
                    	k_debug_strings("FX_LOST_FOCUS:" , currentFocus->win_tit
                    le);
  4012                        	.line	764
  4013 05:0875: 18           	clc
  4014 05:0876: A9 4C 01     	lda	#$14c
  4015 05:0879: 65 2D        	adc	<L62+currentFocus_1
  4016 05:087B: 85 01        	sta	<R0
  4017 05:087D: A9 00 00     	lda	#$0
  4018 05:0880: 65 2F        	adc	<L62+currentFocus_1+2
  4019 05:0882: 85 03        	sta	<R0+2
  4020 05:0884: D4 03        	pei	<R0+2
  4021 05:0886: D4 01        	pei	<R0
  4022 05:0888: F4 xx xx     	pea	#^L60+420
  4023 05:088B: F4 xx xx     	pea	#<L60+420
  4024 05:088E: 22 xx xx xx  	jsl	~~k_debug_strings
  4025                        ;
  4026                        ;							
                    	currentFocus = highhit;
  4027                        	.line	766
  4028 05:0892: A5 29        	lda	<L62+highhit_1
  4029 05:0894: 85 2D        	sta	<L62+currentFocus_1
  4030 05:0896: A5 2B        	lda	<L62+highhit_1+2
  4031 05:0898: 85 2F        	sta	<L62+currentFocus_1+2
  4032                        ;							
                    	currentFocus->wndRect.z = k_increment_z(NULL);
  4033                        	.line	767
  4034 05:089A: F4 00 00     	pea	#^$0
  4035 05:089D: F4 00 00     	pea	#<$0
  4036 05:08A0: 22 xx xx xx  	jsl	~~k_increment_z
  4037 05:08A4: 85 01        	sta	<R0
  4038 05:08A6: 86 03        	stx	<R0+2
  4039 05:08A8: A5 01        	lda	<R0
  4040 05:08AA: A0 20 00     	ldy	#$20
  4041 05:08AD: 97 2D        	sta	[<L62+currentFocus_1],Y
  4042 05:08AF: A5 03        	lda	<R0+2
  4043 05:08B1: A0 22 00     	ldy	#$22
  4044 05:08B4: 97 2D        	sta	[<L62+currentFocus_1],Y
  4045                        ;
  4046                        ;
  4047                        ;							
  Sat Jul 10 2021  1:15                                                Page 79


                    	k_debug_strings("HAS FOCUS:" , currentFocus->win_title);
  4048                        	.line	770
  4049 05:08B6: 18           	clc
  4050 05:08B7: A9 4C 01     	lda	#$14c
  4051 05:08BA: 65 2D        	adc	<L62+currentFocus_1
  4052 05:08BC: 85 01        	sta	<R0
  4053 05:08BE: A9 00 00     	lda	#$0
  4054 05:08C1: 65 2F        	adc	<L62+currentFocus_1+2
  4055 05:08C3: 85 03        	sta	<R0+2
  4056 05:08C5: D4 03        	pei	<R0+2
  4057 05:08C7: D4 01        	pei	<R0
  4058 05:08C9: F4 xx xx     	pea	#^L60+435
  4059 05:08CC: F4 xx xx     	pea	#<L60+435
  4060 05:08CF: 22 xx xx xx  	jsl	~~k_debug_strings
  4061                        ;							
                    }
  4062                        	.line	771
  4063                        ;						}
  4064                        L10044:
  4065                        	.line	772
  4066                        ;
  4067                        ;
  4068                        ;						overlaps
                     = k_user_getOverLappedRect(&currentFocus->wndRect,NULL);
  4069                        L10043:
  4070                        	.line	775
  4071 05:08D3: F4 00 00     	pea	#^$0
  4072 05:08D6: F4 00 00     	pea	#<$0
  4073 05:08D9: 18           	clc
  4074 05:08DA: A9 1C 00     	lda	#$1c
  4075 05:08DD: 65 2D        	adc	<L62+currentFocus_1
  4076 05:08DF: 85 01        	sta	<R0
  4077 05:08E1: A9 00 00     	lda	#$0
  4078 05:08E4: 65 2F        	adc	<L62+currentFocus_1+2
  4079 05:08E6: 85 03        	sta	<R0+2
  4080 05:08E8: D4 03        	pei	<R0+2
  4081 05:08EA: D4 01        	pei	<R0
  4082 05:08EC: 22 xx xx xx  	jsl	~~k_user_getOverLappedRect
  4083 05:08F0: 85 31        	sta	<L62+overlaps_1
  4084 05:08F2: 86 33        	stx	<L62+overlaps_1+2
  4085                        ;						if(overl
                    aps)
  4086                        	.line	776
  4087                        ;						{
  4088 05:08F4: A5 31        	lda	<L62+overlaps_1
  4089 05:08F6: 05 33        	ora	<L62+overlaps_1+2
  4090 05:08F8: D0 03        	bne	L90
  4091 05:08FA: 82 08 00     	brl	L10045
  4092                        L90:
  4093                        	.line	777
  4094                        ;							
                    /*
  4095                        ;							
                    intersections = k_user_getIntersectionRect(&currentFocus->wn
                    dRect,overlaps);
  4096                        ;							
                    if(intersections)
  4097                        ;							
  Sat Jul 10 2021  1:15                                                Page 80


                    {
  4098                        ;							
                    	k_nodelist_deallocate_list(intersections);
  4099                        ;							
                    }
  4100                        ;							
                    */
  4101                        ;							
                    k_nodelist_deallocate_list(overlaps);
  4102                        	.line	785
  4103 05:08FD: D4 33        	pei	<L62+overlaps_1+2
  4104 05:08FF: D4 31        	pei	<L62+overlaps_1
  4105 05:0901: 22 xx xx xx  	jsl	~~k_nodelist_deallocate_list
  4106                        ;						}
  4107                        	.line	786
  4108                        ;
  4109                        ;
  4110                        ;						//highhi
                    t.color = 1;
  4111                        ;						//highhi
                    t->wndRect.z = k_increment_z(NULL);
  4112                        ;
  4113                        ;						//render
                    list.remove(highhit);
  4114                        ;						//render
                    list.add(highhit);
  4115                        ;
  4116                        ;						//curren
                    tFocus = highhit;
  4117                        ;
  4118                        ;						//System
                    .out.println("FX_GOT_FOCUS: " +  currentFocus.name);
  4119                        ;
  4120                        ;					}
  4121                        L10045:
  4122                        	.line	799
  4123                        ;					else if(highhit!
                    =NULL && currentFocus==highhit)
  4124 05:0905: 82 18 00     	brl	L10046
  4125                        L10042:
  4126                        	.line	800
  4127                        ;					{
  4128 05:0908: A5 29        	lda	<L62+highhit_1
  4129 05:090A: 05 2B        	ora	<L62+highhit_1+2
  4130 05:090C: D0 03        	bne	L91
  4131 05:090E: 82 0F 00     	brl	L10047
  4132                        L91:
  4133 05:0911: A5 2D        	lda	<L62+currentFocus_1
  4134 05:0913: C5 29        	cmp	<L62+highhit_1
  4135 05:0915: D0 04        	bne	L92
  4136 05:0917: A5 2F        	lda	<L62+currentFocus_1+2
  4137 05:0919: C5 2B        	cmp	<L62+highhit_1+2
  4138                        L92:
  4139 05:091B: F0 03        	beq	L93
  4140 05:091D: 82 00 00     	brl	L10047
  4141                        L93:
  4142                        	.line	801
  4143                        ;						//System
  Sat Jul 10 2021  1:15                                                Page 81


                    .out.println(highhit.name + " STILL HAS FOCUS");
  4144                        ;						//k_debu
                    g_string("STILL HAS FOCUS");
  4145                        ;					}
  4146                        	.line	804
  4147                        ;					////////////////
                    ////////////////////////////////////////
  4148                        ;					//
  4149                        ;					////////////////
                    ////////////////////////////////////////
  4150                        ;
  4151                        ;
  4152                        ;
  4153                        ;					hitNode = k_poin
                    t_hit_scan(x,y);
  4154                        L10047:
  4155                        L10046:
  4156                        	.line	811
  4157 05:0920: D4 47        	pei	<L62+y_1
  4158 05:0922: D4 45        	pei	<L62+x_1
  4159 05:0924: 22 xx xx xx  	jsl	~~k_point_hit_scan
  4160 05:0928: 85 19        	sta	<L62+hitNode_1
  4161 05:092A: 86 1B        	stx	<L62+hitNode_1+2
  4162                        ;					if(hitNode)
  4163                        	.line	812
  4164                        ;					{
  4165 05:092C: A5 19        	lda	<L62+hitNode_1
  4166 05:092E: 05 1B        	ora	<L62+hitNode_1+2
  4167 05:0930: D0 03        	bne	L94
  4168 05:0932: 82 58 02     	brl	L10048
  4169                        L94:
  4170                        	.line	813
  4171                        ;						//k_debu
                    g_strings("SCAN-HIT PARENT:",HITTOWND(hitNode)->win_title);
  4172                        ;						//k_debu
                    g_strings("SCAN-HIT PARENT:",HITTOWND(hitNode)->win_title);
  4173                        ;						if (HITT
                    OWND(hitNode)->pChildHitList)
  4174                        	.line	816
  4175                        ;						{
  4176 05:0935: A0 02 00     	ldy	#$2
  4177 05:0938: B7 19        	lda	[<L62+hitNode_1],Y
  4178 05:093A: 85 01        	sta	<R0
  4179 05:093C: A0 04 00     	ldy	#$4
  4180 05:093F: B7 19        	lda	[<L62+hitNode_1],Y
  4181 05:0941: 85 03        	sta	<R0+2
  4182 05:0943: A7 01        	lda	[<R0]
  4183 05:0945: 85 05        	sta	<R1
  4184 05:0947: A0 02 00     	ldy	#$2
  4185 05:094A: B7 01        	lda	[<R0],Y
  4186 05:094C: 85 07        	sta	<R1+2
  4187 05:094E: A0 C0 01     	ldy	#$1c0
  4188 05:0951: B7 05        	lda	[<R1],Y
  4189 05:0953: A0 C2 01     	ldy	#$1c2
  4190 05:0956: 17 05        	ora	[<R1],Y
  4191 05:0958: D0 03        	bne	L95
  4192 05:095A: 82 42 00     	brl	L10049
  4193                        L95:
  Sat Jul 10 2021  1:15                                                Page 82


  4194                        	.line	817
  4195                        ;							
                    hitChildNode = k_point_in_any_nodeslist(
  4196                        	.line	818
  4197                        ;							
                    		HITTOWND(hitNode)->pChildHitList, x, y);
  4198 05:095D: D4 47        	pei	<L62+y_1
  4199 05:095F: D4 45        	pei	<L62+x_1
  4200 05:0961: A0 02 00     	ldy	#$2
  4201 05:0964: B7 19        	lda	[<L62+hitNode_1],Y
  4202 05:0966: 85 01        	sta	<R0
  4203 05:0968: A0 04 00     	ldy	#$4
  4204 05:096B: B7 19        	lda	[<L62+hitNode_1],Y
  4205 05:096D: 85 03        	sta	<R0+2
  4206 05:096F: A7 01        	lda	[<R0]
  4207 05:0971: 85 05        	sta	<R1
  4208 05:0973: A0 02 00     	ldy	#$2
  4209 05:0976: B7 01        	lda	[<R0],Y
  4210 05:0978: 85 07        	sta	<R1+2
  4211 05:097A: A0 C2 01     	ldy	#$1c2
  4212 05:097D: B7 05        	lda	[<R1],Y
  4213 05:097F: 48           	pha
  4214 05:0980: A0 C0 01     	ldy	#$1c0
  4215 05:0983: B7 05        	lda	[<R1],Y
  4216 05:0985: 48           	pha
  4217 05:0986: 22 xx xx xx  	jsl	~~k_point_in_any_nodeslist
  4218 05:098A: 85 1D        	sta	<L62+hitChildNode_1
  4219 05:098C: 86 1F        	stx	<L62+hitChildNode_1+2
  4220                        ;							
                    if (hitChildNode)
  4221                        	.line	820
  4222                        ;							
                    {
  4223 05:098E: A5 1D        	lda	<L62+hitChildNode_1
  4224 05:0990: 05 1F        	ora	<L62+hitChildNode_1+2
  4225 05:0992: D0 03        	bne	L96
  4226 05:0994: 82 08 00     	brl	L10050
  4227                        L96:
  4228                        	.line	821
  4229                        ;							
                    	//k_debug_strings("SCAN-HIT CHILD:",HITTOWND(hitChildNod
                    e)->win_title);
  4230                        ;							
                    	hitNode = hitChildNode;
  4231                        	.line	823
  4232 05:0997: A5 1D        	lda	<L62+hitChildNode_1
  4233 05:0999: 85 19        	sta	<L62+hitNode_1
  4234 05:099B: A5 1F        	lda	<L62+hitChildNode_1+2
  4235 05:099D: 85 1B        	sta	<L62+hitNode_1+2
  4236                        ;							
                    }
  4237                        	.line	824
  4238                        ;						}
  4239                        L10050:
  4240                        	.line	825
  4241                        ;						//k_debu
                    g_strings("SCAN-HIT:",HITTOWND(hitNode)->win_title);
  4242                        ;						if (hitN
  Sat Jul 10 2021  1:15                                                Page 83


                    ode)
  4243                        L10049:
  4244                        	.line	827
  4245                        ;						{
  4246 05:099F: A5 19        	lda	<L62+hitNode_1
  4247 05:09A1: 05 1B        	ora	<L62+hitNode_1+2
  4248 05:09A3: D0 03        	bne	L97
  4249 05:09A5: 82 E5 01     	brl	L10051
  4250                        L97:
  4251                        	.line	828
  4252                        ;							
                    pWin = HITTOWND(hitNode);
  4253                        	.line	829
  4254 05:09A8: A0 02 00     	ldy	#$2
  4255 05:09AB: B7 19        	lda	[<L62+hitNode_1],Y
  4256 05:09AD: 85 01        	sta	<R0
  4257 05:09AF: A0 04 00     	ldy	#$4
  4258 05:09B2: B7 19        	lda	[<L62+hitNode_1],Y
  4259 05:09B4: 85 03        	sta	<R0+2
  4260 05:09B6: A7 01        	lda	[<R0]
  4261 05:09B8: 85 21        	sta	<L62+pWin_1
  4262 05:09BA: A0 02 00     	ldy	#$2
  4263 05:09BD: B7 01        	lda	[<R0],Y
  4264 05:09BF: 85 23        	sta	<L62+pWin_1+2
  4265                        ;							
                    if (pWin)
  4266                        	.line	830
  4267                        ;							
                    {
  4268 05:09C1: A5 21        	lda	<L62+pWin_1
  4269 05:09C3: 05 23        	ora	<L62+pWin_1+2
  4270 05:09C5: D0 03        	bne	L98
  4271 05:09C7: 82 C3 01     	brl	L10052
  4272                        L98:
  4273                        	.line	831
  4274                        ;							
                    	((PCLICKDETECTED) hitNode->data)->handler(pWin);
  4275                        	.line	832
  4276 05:09CA: D4 23        	pei	<L62+pWin_1+2
  4277 05:09CC: D4 21        	pei	<L62+pWin_1
  4278 05:09CE: A0 02 00     	ldy	#$2
  4279 05:09D1: B7 19        	lda	[<L62+hitNode_1],Y
  4280 05:09D3: 85 01        	sta	<R0
  4281 05:09D5: A0 04 00     	ldy	#$4
  4282 05:09D8: B7 19        	lda	[<L62+hitNode_1],Y
  4283 05:09DA: 85 03        	sta	<R0+2
  4284 05:09DC: A0 06 00     	ldy	#$6
  4285 05:09DF: B7 01        	lda	[<R0],Y
  4286 05:09E1: AA           	tax
  4287 05:09E2: A0 04 00     	ldy	#$4
  4288 05:09E5: B7 01        	lda	[<R0],Y
  4289                        	xref	~~~lcal
  4290 05:09E7: 22 xx xx xx  	jsl	~~~lcal
  4291                        ;							
                    	pmsg->hwnd = k_getHandleFromWindow(pWin);
  4292                        	.line	833
  4293 05:09EB: D4 23        	pei	<L62+pWin_1+2
  4294 05:09ED: D4 21        	pei	<L62+pWin_1
  Sat Jul 10 2021  1:15                                                Page 84


  4295 05:09EF: 22 xx xx xx  	jsl	~~k_getHandleFromWindow
  4296 05:09F3: 85 01        	sta	<R0
  4297 05:09F5: 86 03        	stx	<R0+2
  4298 05:09F7: A5 01        	lda	<R0
  4299 05:09F9: A0 0A 00     	ldy	#$a
  4300 05:09FC: 97 09        	sta	[<L62+pmsg_1],Y
  4301 05:09FE: A5 03        	lda	<R0+2
  4302 05:0A00: A0 0C 00     	ldy	#$c
  4303 05:0A03: 97 09        	sta	[<L62+pmsg_1],Y
  4304                        ;
  4305                        ;							
                    	if ((pmsg->type == FX_LBUTTON_DOWN)
  4306                        	.line	835
  4307                        ;							
                    			|| (pmsg->type == FX_MBUTTON_DOWN)
  4308                        ;							
                    			|| (pmsg->type == FX_RBUTTON_DOWN))
  4309                        ;							
                    	{
  4310 05:0A05: A0 08 00     	ldy	#$8
  4311 05:0A08: B7 09        	lda	[<L62+pmsg_1],Y
  4312 05:0A0A: C9 04 0F     	cmp	#<$f04
  4313 05:0A0D: D0 03        	bne	L100
  4314 05:0A0F: 82 1A 00     	brl	L99
  4315                        L100:
  4316 05:0A12: A0 08 00     	ldy	#$8
  4317 05:0A15: B7 09        	lda	[<L62+pmsg_1],Y
  4318 05:0A17: C9 0C 0F     	cmp	#<$f0c
  4319 05:0A1A: D0 03        	bne	L101
  4320 05:0A1C: 82 0D 00     	brl	L99
  4321                        L101:
  4322 05:0A1F: A0 08 00     	ldy	#$8
  4323 05:0A22: B7 09        	lda	[<L62+pmsg_1],Y
  4324 05:0A24: C9 08 0F     	cmp	#<$f08
  4325 05:0A27: F0 03        	beq	L102
  4326 05:0A29: 82 2F 01     	brl	L10053
  4327                        L102:
  4328                        L99:
  4329                        	.line	838
  4330                        ;							
                    		if (pmsg->hwnd != _k_hWndFocus)
  4331                        	.line	839
  4332                        ;							
                    		{
  4333 05:0A2C: A0 0A 00     	ldy	#$a
  4334 05:0A2F: B7 09        	lda	[<L62+pmsg_1],Y
  4335 05:0A31: CD xx xx     	cmp	|~~_k_hWndFocus
  4336 05:0A34: D0 08        	bne	L103
  4337 05:0A36: A0 0C 00     	ldy	#$c
  4338 05:0A39: B7 09        	lda	[<L62+pmsg_1],Y
  4339 05:0A3B: CD xx xx     	cmp	|~~_k_hWndFocus+2
  4340                        L103:
  4341 05:0A3E: D0 03        	bne	L104
  4342 05:0A40: 82 18 01     	brl	L10054
  4343                        L104:
  4344                        	.line	840
  4345                        ;							
                    			k_debug_pointer("*** k_event_loop::FX_FO
  Sat Jul 10 2021  1:15                                                Page 85


                    CUS_WINDOW:",
  4346                        	.line	841
  4347                        ;							
                    					pmsg->hwnd);
  4348 05:0A43: A0 0C 00     	ldy	#$c
  4349 05:0A46: B7 09        	lda	[<L62+pmsg_1],Y
  4350 05:0A48: 48           	pha
  4351 05:0A49: A0 0A 00     	ldy	#$a
  4352 05:0A4C: B7 09        	lda	[<L62+pmsg_1],Y
  4353 05:0A4E: 48           	pha
  4354 05:0A4F: F4 xx xx     	pea	#^L60+446
  4355 05:0A52: F4 xx xx     	pea	#<L60+446
  4356 05:0A55: 22 xx xx xx  	jsl	~~k_debug_pointer
  4357                        ;
  4358                        ;							
                    			if (_k_hWndFocus)
  4359                        	.line	844
  4360                        ;							
                    			{
  4361 05:0A59: AD xx xx     	lda	|~~_k_hWndFocus
  4362 05:0A5C: 0D xx xx     	ora	|~~_k_hWndFocus+2
  4363 05:0A5F: D0 03        	bne	L105
  4364 05:0A61: 82 75 00     	brl	L10055
  4365                        L105:
  4366                        	.line	845
  4367                        ;							
                    				hWndFocusLost = _k_hWndFocus;
  4368                        	.line	846
  4369 05:0A64: AD xx xx     	lda	|~~_k_hWndFocus
  4370 05:0A67: 85 3A        	sta	<L62+hWndFocusLost_1
  4371 05:0A69: AD xx xx     	lda	|~~_k_hWndFocus+2
  4372 05:0A6C: 85 3C        	sta	<L62+hWndFocusLost_1+2
  4373                        ;							
                    				k_debug_pointer("*** k_event_loo
                    p::FX_FOCUS_LOST:",
  4374                        	.line	847
  4375                        ;							
                    						hWndFocusLost);
  4376 05:0A6E: D4 3C        	pei	<L62+hWndFocusLost_1+2
  4377 05:0A70: D4 3A        	pei	<L62+hWndFocusLost_1
  4378 05:0A72: F4 xx xx     	pea	#^L60+481
  4379 05:0A75: F4 xx xx     	pea	#<L60+481
  4380 05:0A78: 22 xx xx xx  	jsl	~~k_debug_pointer
  4381                        ;							
                    				bRet = k_enqueue(_k_eventQueue,
  4382                        	.line	849
  4383                        ;							
                    						k_create_synthet
                    ic_window_msg(hWndFocusLost,
  4384                        ;							
                    								
                    FX_FOCUS_LOST, &hWndFocusLost,
  4385                        ;							
                    								
                    sizeof(hWndFocusLost)));
  4386 05:0A7C: F4 04 00     	pea	#<$4
  4387 05:0A7F: F4 00 00     	pea	#0
  4388 05:0A82: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 86


  4389 05:0A83: 7B           	tdc
  4390 05:0A84: 69 3A 00     	adc	#<L62+hWndFocusLost_1
  4391 05:0A87: 48           	pha
  4392 05:0A88: F4 14 0F     	pea	#<$f14
  4393 05:0A8B: D4 3C        	pei	<L62+hWndFocusLost_1+2
  4394 05:0A8D: D4 3A        	pei	<L62+hWndFocusLost_1
  4395 05:0A8F: 22 37 20 05  	jsl	~~k_create_synthetic_window_msg
  4396 05:0A93: 85 01        	sta	<R0
  4397 05:0A95: 86 03        	stx	<R0+2
  4398 05:0A97: DA           	phx
  4399 05:0A98: 48           	pha
  4400 05:0A99: AD xx xx     	lda	|~~_k_eventQueue+2
  4401 05:0A9C: 48           	pha
  4402 05:0A9D: AD xx xx     	lda	|~~_k_eventQueue
  4403 05:0AA0: 48           	pha
  4404 05:0AA1: 22 xx xx xx  	jsl	~~k_enqueue
  4405 05:0AA5: E2 20        	sep	#$20
  4406                        	longa	off
  4407 05:0AA7: 85 39        	sta	<L62+bRet_1
  4408 05:0AA9: C2 20        	rep	#$20
  4409                        	longa	on
  4410                        ;							
                    				if (!bRet)
  4411                        	.line	853
  4412                        ;							
                    				{
  4413 05:0AAB: A5 39        	lda	<L62+bRet_1
  4414 05:0AAD: 29 FF 00     	and	#$ff
  4415 05:0AB0: F0 03        	beq	L106
  4416 05:0AB2: 82 10 00     	brl	L10056
  4417                        L106:
  4418                        	.line	854
  4419                        ;							
                    					k_debug_integer(
  4420                        	.line	855
  4421                        ;							
                    							"k_event
                    _loop RECEIVED:FX_FOCUS_LOST:k_enqueue:",
  4422                        ;							
                    							bRet);
  4423 05:0AB5: A5 39        	lda	<L62+bRet_1
  4424 05:0AB7: 29 FF 00     	and	#$ff
  4425 05:0ABA: 48           	pha
  4426 05:0ABB: F4 xx xx     	pea	#^L60+514
  4427 05:0ABE: F4 xx xx     	pea	#<L60+514
  4428 05:0AC1: 22 xx xx xx  	jsl	~~k_debug_integer
  4429                        ;							
                    				}
  4430                        	.line	858
  4431                        ;							
                    				k_send_window_message(hWndFocusL
                    ost, FX_FOCUS_LOST,
  4432                        L10056:
  4433                        	.line	859
  4434                        ;							
                    						NULL, 0);
  4435 05:0AC5: F4 00 00     	pea	#<$0
  4436 05:0AC8: F4 00 00     	pea	#^$0
  Sat Jul 10 2021  1:15                                                Page 87


  4437 05:0ACB: F4 00 00     	pea	#<$0
  4438 05:0ACE: F4 14 0F     	pea	#<$f14
  4439 05:0AD1: D4 3C        	pei	<L62+hWndFocusLost_1+2
  4440 05:0AD3: D4 3A        	pei	<L62+hWndFocusLost_1
  4441 05:0AD5: 22 E8 18 05  	jsl	~~k_send_window_message
  4442                        ;
  4443                        ;							
                    			}
  4444                        	.line	862
  4445                        ;
  4446                        ;							
                    			bRet = k_enqueue(_k_eventQueue,
  4447                        L10055:
  4448                        	.line	864
  4449                        ;							
                    					k_create_synthetic_windo
                    w_msg(pmsg->hwnd,
  4450                        ;							
                    							FX_FOCUS
                    _WINDOW, &_k_hWndFocus,
  4451                        ;							
                    							sizeof(_
                    k_hWndFocus)));
  4452 05:0AD9: F4 04 00     	pea	#<$4
  4453 05:0ADC: A9 xx xx     	lda	#<~~_k_hWndFocus
  4454 05:0ADF: 85 01        	sta	<R0
  4455                        	xref	_BEG_DATA
  4456 05:0AE1: A9 xx xx     	lda	#_BEG_DATA>>16
  4457 05:0AE4: 85 03        	sta	<R0+2
  4458 05:0AE6: D4 03        	pei	<R0+2
  4459 05:0AE8: D4 01        	pei	<R0
  4460 05:0AEA: F4 13 0F     	pea	#<$f13
  4461 05:0AED: A0 0C 00     	ldy	#$c
  4462 05:0AF0: B7 09        	lda	[<L62+pmsg_1],Y
  4463 05:0AF2: 48           	pha
  4464 05:0AF3: A0 0A 00     	ldy	#$a
  4465 05:0AF6: B7 09        	lda	[<L62+pmsg_1],Y
  4466 05:0AF8: 48           	pha
  4467 05:0AF9: 22 37 20 05  	jsl	~~k_create_synthetic_window_msg
  4468 05:0AFD: 85 05        	sta	<R1
  4469 05:0AFF: 86 07        	stx	<R1+2
  4470 05:0B01: DA           	phx
  4471 05:0B02: 48           	pha
  4472 05:0B03: AD xx xx     	lda	|~~_k_eventQueue+2
  4473 05:0B06: 48           	pha
  4474 05:0B07: AD xx xx     	lda	|~~_k_eventQueue
  4475 05:0B0A: 48           	pha
  4476 05:0B0B: 22 xx xx xx  	jsl	~~k_enqueue
  4477 05:0B0F: E2 20        	sep	#$20
  4478                        	longa	off
  4479 05:0B11: 85 39        	sta	<L62+bRet_1
  4480 05:0B13: C2 20        	rep	#$20
  4481                        	longa	on
  4482                        ;							
                    			if (!bRet)
  4483                        	.line	868
  4484                        ;							
                    			{
  Sat Jul 10 2021  1:15                                                Page 88


  4485 05:0B15: A5 39        	lda	<L62+bRet_1
  4486 05:0B17: 29 FF 00     	and	#$ff
  4487 05:0B1A: F0 03        	beq	L107
  4488 05:0B1C: 82 10 00     	brl	L10057
  4489                        L107:
  4490                        	.line	869
  4491                        ;							
                    				k_debug_integer(
  4492                        	.line	870
  4493                        ;							
                    						"k_event_loop RE
                    CEIVED:FX_FOCUS_WINDOW:k_enqueue:",
  4494                        ;							
                    						bRet);
  4495 05:0B1F: A5 39        	lda	<L62+bRet_1
  4496 05:0B21: 29 FF 00     	and	#$ff
  4497 05:0B24: 48           	pha
  4498 05:0B25: F4 xx xx     	pea	#^L60+561
  4499 05:0B28: F4 xx xx     	pea	#<L60+561
  4500 05:0B2B: 22 xx xx xx  	jsl	~~k_debug_integer
  4501                        ;							
                    			}
  4502                        	.line	873
  4503                        ;							
                    			//
  4504                        ;							
                    			//
  4505                        ;							
                    			// NT 2/3/2021
  4506                        ;							
                    			//currentFocus = pWin;
  4507                        ;							
                    			//
  4508                        ;							
                    			k_send_window_message(pmsg->hwnd, FX_FOC
                    US_WINDOW, NULL, 0);
  4509                        L10057:
  4510                        	.line	879
  4511 05:0B2F: F4 00 00     	pea	#<$0
  4512 05:0B32: F4 00 00     	pea	#^$0
  4513 05:0B35: F4 00 00     	pea	#<$0
  4514 05:0B38: F4 13 0F     	pea	#<$f13
  4515 05:0B3B: A0 0C 00     	ldy	#$c
  4516 05:0B3E: B7 09        	lda	[<L62+pmsg_1],Y
  4517 05:0B40: 48           	pha
  4518 05:0B41: A0 0A 00     	ldy	#$a
  4519 05:0B44: B7 09        	lda	[<L62+pmsg_1],Y
  4520 05:0B46: 48           	pha
  4521 05:0B47: 22 E8 18 05  	jsl	~~k_send_window_message
  4522                        ;							
                    			_k_hWndFocus = pmsg->hwnd;
  4523                        	.line	880
  4524 05:0B4B: A0 0A 00     	ldy	#$a
  4525 05:0B4E: B7 09        	lda	[<L62+pmsg_1],Y
  4526 05:0B50: 8D xx xx     	sta	|~~_k_hWndFocus
  4527 05:0B53: A0 0C 00     	ldy	#$c
  4528 05:0B56: B7 09        	lda	[<L62+pmsg_1],Y
  4529 05:0B58: 8D xx xx     	sta	|~~_k_hWndFocus+2
  Sat Jul 10 2021  1:15                                                Page 89


  4530                        ;							
                    		}
  4531                        	.line	881
  4532                        ;							
                    	}
  4533                        L10054:
  4534                        	.line	882
  4535                        ;
  4536                        ;							
                    	if (pmsg->type < 0xF000 && k_isNonClient(pWin, pmsg, x, 
                    y))
  4537                        L10053:
  4538                        	.line	884
  4539                        ;							
                    	{
  4540 05:0B5B: A0 08 00     	ldy	#$8
  4541 05:0B5E: B7 09        	lda	[<L62+pmsg_1],Y
  4542 05:0B60: C9 00 F0     	cmp	#<$f000
  4543 05:0B63: 90 03        	bcc	L108
  4544 05:0B65: 82 25 00     	brl	L10058
  4545                        L108:
  4546 05:0B68: D4 47        	pei	<L62+y_1
  4547 05:0B6A: D4 45        	pei	<L62+x_1
  4548 05:0B6C: D4 0B        	pei	<L62+pmsg_1+2
  4549 05:0B6E: D4 09        	pei	<L62+pmsg_1
  4550 05:0B70: D4 23        	pei	<L62+pWin_1+2
  4551 05:0B72: D4 21        	pei	<L62+pWin_1
  4552 05:0B74: 22 xx xx xx  	jsl	~~k_isNonClient
  4553 05:0B78: 29 FF 00     	and	#$ff
  4554 05:0B7B: D0 03        	bne	L109
  4555 05:0B7D: 82 0D 00     	brl	L10058
  4556                        L109:
  4557                        	.line	885
  4558                        ;							
                    		//k_debug_string("*** k_event_loop::NON-CLIENT M
                    OUSE EVENT\r\n");
  4559                        ;
  4560                        ;							
                    		//k_debug_pointer("*** k_event_loop::NON-CLIENT 
                    MOUSE EVENT BEFORE:",(LPVOID)(LONG)pmsg->type);
  4561                        ;							
                    		pmsg->type = (UINT) (pmsg->type | 0x008000);
  4562                        	.line	889
  4563 05:0B80: A0 08 00     	ldy	#$8
  4564 05:0B83: B7 09        	lda	[<L62+pmsg_1],Y
  4565 05:0B85: 09 00 80     	ora	#<$8000
  4566 05:0B88: A0 08 00     	ldy	#$8
  4567 05:0B8B: 97 09        	sta	[<L62+pmsg_1],Y
  4568                        ;							
                    		//k_debug_pointer("*** k_event_loop::NON-CLIENT 
                    MOUSE EVENT AFTER :",(LPVOID)(LONG)pmsg->type);
  4569                        ;							
                    	}
  4570                        	.line	891
  4571                        ;							
                    }
  4572                        L10058:
  4573                        	.line	892
  Sat Jul 10 2021  1:15                                                Page 90


  4574                        ;						}
  4575                        L10052:
  4576                        	.line	893
  4577                        ;					}
  4578                        L10051:
  4579                        	.line	894
  4580                        ;
  4581                        ;
  4582                        ;					//hitNode = k_po
                    int_in_any_nodeslist(((PCLICKDETECTED)k_point_hit_scan(x,y)-
                    >data)->window->pChildHitList,x,y);
  4583                        ;
  4584                        ;					/*
  4585                        ;					hitNode = k_poin
                    t_in_nodeslist(x,y);
  4586                        ;					if(hitNode)
  4587                        ;					{
  4588                        ;						hitNodeP
                    arent = hitNode;
  4589                        ;						//k_debu
                    g_message("Found hit:",hitNode->name);
  4590                        ;
  4591                        ;						pWin = (
                    (PCLICKDETECTED)hitNode->data)->window;
  4592                        ;						//if(pWi
                    n && pWin->isVisible)
  4593                        ;						if(pWin)
  4594                        ;						{
  4595                        ;							
                    //k_debug_string("k_do_processes::Window\r\n");
  4596                        ;							
                    //k_debug_pointer("k_do_processes::pWin->pChildWindows:",pWi
                    n->pChildWindows);
  4597                        ;							
                    //if(pWin->pChildHitList)
  4598                        ;							
                    if(pWin->pChildHitList)
  4599                        ;							
                    {
  4600                        ;							
                    	// check if children were clicked
  4601                        ;							
                    	hitChildNode = k_point_in_any_nodeslist(pWin->pChildHitL
                    ist,x,y);
  4602                        ;							
                    	if(hitChildNode)
  4603                        ;							
                    	{
  4604                        ;							
                    		// switch hit to child
  4605                        ;							
                    		//k_debug_strings("k_do_processes::child-hit:",h
                    itChildNode->name);
  4606                        ;							
                    		hitNode = hitChildNode;
  4607                        ;							
                    		pWin = ((PCLICKDETECTED)hitChildNode->data)->win
                    dow;
  Sat Jul 10 2021  1:15                                                Page 91


  4608                        ;							
                    	}
  4609                        ;							
                    }
  4610                        ;
  4611                        ;							
                    ((PCLICKDETECTED)hitNode->data)->handler(pWin);
  4612                        ;							
                    pmsg->hwnd = k_getHandleFromWindow(pWin);
  4613                        ;
  4614                        ;							
                    if((pmsg->type == FX_LBUTTON_DOWN) || (pmsg->type == FX_MBUT
                    TON_DOWN) || (pmsg->type == FX_RBUTTON_DOWN))
  4615                        ;							
                    {
  4616                        ;							
                    	if(pmsg->hwnd!=hWndFocus)
  4617                        ;							
                    	{
  4618                        ;							
                    		k_debug_pointer("*** k_event_loop::FX_FOCUS_WIND
                    OW:",pmsg->hwnd);
  4619                        ;							
                    		k_enqueue(_k_eventQueue,k_create_synthetic_windo
                    w_msg(pmsg->hwnd,FX_FOCUS_WINDOW,&hWndFocus,sizeof(hWndFocus
                    )));
  4620                        ;							
                    		hWndFocus =  pmsg->hwnd;
  4621                        ;							
                    	}
  4622                        ;							
                    }
  4623                        ;
  4624                        ;//						
                    	if(k_isNonClient(pWin,pmsg,x,y))
  4625                        ;//						
                    	{
  4626                        ;//						
                    		k_debug_string("*** k_event_loop::NON-CLIENT MOU
                    SE EVENT\r\n");
  4627                        ;//						
                    	}
  4628                        ;
  4629                        ;
  4630                        ;						}
  4631                        ;
  4632                        ;					}
  4633                        ;					*/
  4634                        ;
  4635                        ;					/*
  4636                        ;					if(_k_hLockedFoc
                    us && (pmsg->hwnd != _k_hLockedFocus))
  4637                        ;					{
  4638                        ;						pmsg->hw
                    nd = _k_hLockedFocus;
  4639                        ;						k_debug_
                    pointer("k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:", p
                    msg->hwnd);
  Sat Jul 10 2021  1:15                                                Page 92


  4640                        ;					}
  4641                        ;					*/
  4642                        ;					if(!pmsg->hwnd)
  4643                        L10048:
  4644                        	.line	957
  4645                        ;					{
  4646 05:0B8D: A0 0A 00     	ldy	#$a
  4647 05:0B90: B7 09        	lda	[<L62+pmsg_1],Y
  4648 05:0B92: A0 0C 00     	ldy	#$c
  4649 05:0B95: 17 09        	ora	[<L62+pmsg_1],Y
  4650 05:0B97: F0 03        	beq	L110
  4651 05:0B99: 82 27 00     	brl	L10059
  4652                        L110:
  4653                        	.line	958
  4654                        ;						if(k_use
                    r_getDesktopWindow())
  4655                        	.line	959
  4656                        ;						{
  4657 05:0B9C: 22 xx xx xx  	jsl	~~k_user_getDesktopWindow
  4658 05:0BA0: 85 01        	sta	<R0
  4659 05:0BA2: 86 03        	stx	<R0+2
  4660 05:0BA4: A5 01        	lda	<R0
  4661 05:0BA6: 05 03        	ora	<R0+2
  4662 05:0BA8: D0 03        	bne	L111
  4663 05:0BAA: 82 16 00     	brl	L10060
  4664                        L111:
  4665                        	.line	960
  4666                        ;							
                    pmsg->hwnd = k_user_getDesktopWindow();
  4667                        	.line	961
  4668 05:0BAD: 22 xx xx xx  	jsl	~~k_user_getDesktopWindow
  4669 05:0BB1: 85 01        	sta	<R0
  4670 05:0BB3: 86 03        	stx	<R0+2
  4671 05:0BB5: A5 01        	lda	<R0
  4672 05:0BB7: A0 0A 00     	ldy	#$a
  4673 05:0BBA: 97 09        	sta	[<L62+pmsg_1],Y
  4674 05:0BBC: A5 03        	lda	<R0+2
  4675 05:0BBE: A0 0C 00     	ldy	#$c
  4676 05:0BC1: 97 09        	sta	[<L62+pmsg_1],Y
  4677                        ;						}
  4678                        	.line	962
  4679                        ;					}
  4680                        L10060:
  4681                        	.line	963
  4682                        ;
  4683                        ;
  4684                        ;					/*
  4685                        ;					if(_k_hLockedFoc
                    us)
  4686                        ;					{
  4687                        ;						pmsg->hw
                    nd = _k_hLockedFocus;
  4688                        ;						//k_debu
                    g_integer("k_event_loop _k_hLockedFocus LOCKED pmsg->type:",
                     pmsg->type);
  4689                        ;						//k_debu
                    g_pointer("k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:",
                     pmsg->hwnd);
  Sat Jul 10 2021  1:15                                                Page 93


  4690                        ;					}
  4691                        ;					*/
  4692                        ;				}
  4693                        L10059:
  4694                        	.line	974
  4695                        ;
  4696                        ;				//k_debug_pointer("k_eve
                    nt_loop hWndFocus pmsg->hwnd:", pmsg->hwnd);
  4697                        ;				if(_k_hWndFocus && ((pms
                    g->type == FX_KEY_DOWN) || (pmsg->type == FX_KEY_UP)))
  4698                        L10041:
  4699                        	.line	977
  4700                        ;				{
  4701 05:0BC3: AD xx xx     	lda	|~~_k_hWndFocus
  4702 05:0BC6: 0D xx xx     	ora	|~~_k_hWndFocus+2
  4703 05:0BC9: D0 03        	bne	L112
  4704 05:0BCB: 82 37 00     	brl	L10061
  4705                        L112:
  4706 05:0BCE: A0 08 00     	ldy	#$8
  4707 05:0BD1: B7 09        	lda	[<L62+pmsg_1],Y
  4708 05:0BD3: C9 10 0F     	cmp	#<$f10
  4709 05:0BD6: D0 03        	bne	L114
  4710 05:0BD8: 82 0D 00     	brl	L113
  4711                        L114:
  4712 05:0BDB: A0 08 00     	ldy	#$8
  4713 05:0BDE: B7 09        	lda	[<L62+pmsg_1],Y
  4714 05:0BE0: C9 12 0F     	cmp	#<$f12
  4715 05:0BE3: F0 03        	beq	L115
  4716 05:0BE5: 82 1D 00     	brl	L10061
  4717                        L115:
  4718                        L113:
  4719                        	.line	978
  4720                        ;					k_debug_string("
                    *** k_event_loop::FX_KEY_*\r\n");
  4721                        	.line	979
  4722 05:0BE8: F4 xx xx     	pea	#^L60+610
  4723 05:0BEB: F4 xx xx     	pea	#<L60+610
  4724 05:0BEE: 22 xx xx xx  	jsl	~~k_debug_string
  4725                        ;					pmsg->hwnd = _k_
                    hWndFocus;
  4726                        	.line	980
  4727 05:0BF2: AD xx xx     	lda	|~~_k_hWndFocus
  4728 05:0BF5: A0 0A 00     	ldy	#$a
  4729 05:0BF8: 97 09        	sta	[<L62+pmsg_1],Y
  4730 05:0BFA: AD xx xx     	lda	|~~_k_hWndFocus+2
  4731 05:0BFD: A0 0C 00     	ldy	#$c
  4732 05:0C00: 97 09        	sta	[<L62+pmsg_1],Y
  4733                        ;				}
  4734                        	.line	981
  4735                        ;				else if(((pmsg->type == 
                    FX_KEY_DOWN) || (pmsg->type == FX_KEY_UP)))
  4736 05:0C02: 82 3A 00     	brl	L10062
  4737                        L10061:
  4738                        	.line	982
  4739                        ;				{
  4740 05:0C05: A0 08 00     	ldy	#$8
  4741 05:0C08: B7 09        	lda	[<L62+pmsg_1],Y
  4742 05:0C0A: C9 10 0F     	cmp	#<$f10
  Sat Jul 10 2021  1:15                                                Page 94


  4743 05:0C0D: D0 03        	bne	L117
  4744 05:0C0F: 82 0D 00     	brl	L116
  4745                        L117:
  4746 05:0C12: A0 08 00     	ldy	#$8
  4747 05:0C15: B7 09        	lda	[<L62+pmsg_1],Y
  4748 05:0C17: C9 12 0F     	cmp	#<$f12
  4749 05:0C1A: F0 03        	beq	L118
  4750 05:0C1C: 82 20 00     	brl	L10063
  4751                        L118:
  4752                        L116:
  4753                        	.line	983
  4754                        ;					k_debug_string("
                    *** k_event_loop::FX_KEY_*\r\n");
  4755                        	.line	984
  4756 05:0C1F: F4 xx xx     	pea	#^L60+639
  4757 05:0C22: F4 xx xx     	pea	#<L60+639
  4758 05:0C25: 22 xx xx xx  	jsl	~~k_debug_string
  4759                        ;					pmsg->hwnd = k_u
                    ser_getDesktopWindow();
  4760                        	.line	985
  4761 05:0C29: 22 xx xx xx  	jsl	~~k_user_getDesktopWindow
  4762 05:0C2D: 85 01        	sta	<R0
  4763 05:0C2F: 86 03        	stx	<R0+2
  4764 05:0C31: A5 01        	lda	<R0
  4765 05:0C33: A0 0A 00     	ldy	#$a
  4766 05:0C36: 97 09        	sta	[<L62+pmsg_1],Y
  4767 05:0C38: A5 03        	lda	<R0+2
  4768 05:0C3A: A0 0C 00     	ldy	#$c
  4769 05:0C3D: 97 09        	sta	[<L62+pmsg_1],Y
  4770                        ;				}
  4771                        	.line	986
  4772                        ;				k_do_processes(pmsg);
  4773                        L10063:
  4774                        L10062:
  4775                        	.line	987
  4776 05:0C3F: D4 0B        	pei	<L62+pmsg_1+2
  4777 05:0C41: D4 09        	pei	<L62+pmsg_1
  4778 05:0C43: 22 4B 0D 05  	jsl	~~k_do_processes
  4779                        ;
  4780                        ;
  4781                        ;				/*
  4782                        ;				if(pmsg->hwnd)
  4783                        ;				{
  4784                        ;					//k_debug_pointe
                    r("k_do_processes:DoWndProcs:k_getWindowList:",k_getWindowLi
                    st());
  4785                        ;					k_nodelist_forea
                    ch_data(k_getWindowList(),pmsg,DoWndProcs);
  4786                        ;				}
  4787                        ;				*/
  4788                        ;
  4789                        ;				//
  4790                        ;				k_destory_msg(pmsg);
  4791                        	.line	999
  4792 05:0C47: D4 0B        	pei	<L62+pmsg_1+2
  4793 05:0C49: D4 09        	pei	<L62+pmsg_1
  4794 05:0C4B: 22 BC 23 05  	jsl	~~k_destory_msg
  4795                        ;
  Sat Jul 10 2021  1:15                                                Page 95


  4796                        ;				//asm sei;
  4797                        ;				pmsg = (PFXOSMESSAGE)k_d
                    equeue(_k_eventQueue);
  4798                        	.line	1002
  4799 05:0C4F: AD xx xx     	lda	|~~_k_eventQueue+2
  4800 05:0C52: 48           	pha
  4801 05:0C53: AD xx xx     	lda	|~~_k_eventQueue
  4802 05:0C56: 48           	pha
  4803 05:0C57: 22 xx xx xx  	jsl	~~k_dequeue
  4804 05:0C5B: 85 09        	sta	<L62+pmsg_1
  4805 05:0C5D: 86 0B        	stx	<L62+pmsg_1+2
  4806                        ;				//asm cli;
  4807                        ;			}
  4808                        	.line	1004
  4809 05:0C5F: 82 F7 F9     	brl	L10031
  4810                        L10032:
  4811                        ;			//
  4812                        ;			//
  4813                        ;			//k_do_procs(processMessage);
  4814                        ;			k_do_processes(processMessage);
  4815                        	.line	1008
  4816 05:0C62: D4 0F        	pei	<L62+processMessage_1+2
  4817 05:0C64: D4 0D        	pei	<L62+processMessage_1
  4818 05:0C66: 22 4B 0D 05  	jsl	~~k_do_processes
  4819                        ;
  4820                        ;			/*
  4821                        ;			volAvail = k_sd_read_vol(&diskIn
                    fo);
  4822                        ;			if(volAvail)
  4823                        ;			{
  4824                        ;				k_send_message(NULL,FX_D
                    ISK_INSERT,&diskInfo,sizeof(DISKINFO));
  4825                        ;			}
  4826                        ;			else
  4827                        ;			{
  4828                        ;				k_send_message(NULL,FX_D
                    ISK_REMOVE,NULL,0);
  4829                        ;			}
  4830                        ;		*/
  4831                        ;
  4832                        ;			asm cli;
  4833                        	.line	1022
  4834                        	asmstart
  4835 05:0C6A: 58           	cli
  4836                        	asmend
  4837                        ;
  4838                        ;
  4839                        ;
  4840                        ;
  4841                        ;
  4842                        ;			/*
  4843                        ;			if(!floppy)
  4844                        ;			{
  4845                        ;				//floppy_init();
  4846                        ;				//flpydsk_install(6);
  4847                        ;				//flpydsk_read_sector(1)
                    ;
  4848                        ;				floppy = TRUE;
  Sat Jul 10 2021  1:15                                                Page 96


  4849                        ;			}
  4850                        ;			*/
  4851                        ;
  4852                        ;			/*
  4853                        ;			if(floppy)
  4854                        ;				floppy_read(floppybuffer
                    , floppyLBA++, 3);
  4855                        ;				*/
  4856                        ;		}
  4857                        	.line	1042
  4858 05:0C6B: 82 DA F9     	brl	L10029
  4859                        ;
  4860                        ;		if(processMessage)
  4861                        	.line	1044
  4862                        ;			k_mem_deallocate_heap(processMes
                    sage);
  4863 05:0C6E: A5 0D        	lda	<L62+processMessage_1
  4864 05:0C70: 05 0F        	ora	<L62+processMessage_1+2
  4865 05:0C72: D0 03        	bne	L119
  4866 05:0C74: 82 08 00     	brl	L10064
  4867                        L119:
  4868                        	.line	1045
  4869 05:0C77: D4 0F        	pei	<L62+processMessage_1+2
  4870 05:0C79: D4 0D        	pei	<L62+processMessage_1
  4871 05:0C7B: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  4872                        ;	}
  4873                        L10064:
  4874                        	.line	1046
  4875                        ;	else
  4876 05:0C7F: 82 0C 00     	brl	L10065
  4877                        L10026:
  4878                        ;	{
  4879                        	.line	1048
  4880                        ;		k_debug_string("Exception:fxeventmanager
                     not initialized");
  4881                        	.line	1049
  4882 05:0C82: F4 xx xx     	pea	#^L60+668
  4883 05:0C85: F4 xx xx     	pea	#<L60+668
  4884 05:0C88: 22 xx xx xx  	jsl	~~k_debug_string
  4885                        ;		THROW_EXCEPTION(0xA000,0x0001,"");
  4886                        	.line	1050
  4887                        	.line	1050
  4888                        	asmstart
  4889 05:0C8C: 00 00        	BRK
  4890                        	asmend
  4891                        	.line	1050
  4892                        	.line	1050
  4893                        ;	}
  4894                        	.line	1051
  4895                        L10065:
  4896                        ;
  4897                        ;
  4898                        ;}
  4899                        	.line	1054
  4900                        L120:
  4901 05:0C8E: 2B           	pld
  4902 05:0C8F: 3B           	tsc
  4903 05:0C90: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 97


  4904 05:0C91: 69 48 00     	adc	#L61
  4905 05:0C94: 1B           	tcs
  4906 05:0C95: 6B           	rtl
  4907                        	.endblock	1054
  4908             00000048   L61	equ	72
  4909             00000009   L62	equ	9
  4910 05:0C96:              	ends
  4911                        	efunc
  4912                        	.endfunc	1054,9,72
  4913                        	.line	1054
  4914                        	data
  4915                        L60:
  4916 00:02A2: 6B 5F 69 6E  	db	$6B,$5F,$69,$6E,$69,$74,$61,$6C,$69,$7A,
                    $65,$5F,$65,$78,$65
       00:02A6: 69 74 61 6C 
       00:02AA: 69 7A 65 5F 
       00:02AE: 65 78 65 
  4917 00:02B1: 63 75 74 69  	db	$63,$75,$74,$69,$76,$65,$0D,$0A,$00,$6B,
                    $5F,$69,$6E,$69,$74
       00:02B5: 76 65 0D 0A 
       00:02B9: 00 6B 5F 69 
       00:02BD: 6E 69 74 
  4918 00:02C0: 61 6C 69 7A  	db	$61,$6C,$69,$7A,$65,$5F,$65,$76,$65,$6E,
                    $74,$5F,$6D,$61,$6E
       00:02C4: 65 5F 65 76 
       00:02C8: 65 6E 74 5F 
       00:02CC: 6D 61 6E 
  4919 00:02CF: 61 67 65 72  	db	$61,$67,$65,$72,$0D,$0A,$00,$6B,$5F,$69,
                    $6E,$69,$74,$61,$6C
       00:02D3: 0D 0A 00 6B 
       00:02D7: 5F 69 6E 69 
       00:02DB: 74 61 6C 
  4920 00:02DE: 69 7A 65 5F  	db	$69,$7A,$65,$5F,$77,$69,$6E,$64,$6F,$77,
                    $5F,$6D,$61,$6E,$61
       00:02E2: 77 69 6E 64 
       00:02E6: 6F 77 5F 6D 
       00:02EA: 61 6E 61 
  4921 00:02ED: 67 65 72 20  	db	$67,$65,$72,$20,$62,$65,$66,$6F,$72,$65,
                    $0D,$0A,$00,$57,$69
       00:02F1: 62 65 66 6F 
       00:02F5: 72 65 0D 0A 
       00:02F9: 00 57 69 
  4922 00:02FC: 6E 64 6F 77  	db	$6E,$64,$6F,$77,$20,$4D,$61,$6E,$61,$67,
                    $65,$72,$20,$46,$61
       00:0300: 20 4D 61 6E 
       00:0304: 61 67 65 72 
       00:0308: 20 46 61 
  4923 00:030B: 69 6C 65 64  	db	$69,$6C,$65,$64,$20,$74,$6F,$20,$49,$6E,
                    $69,$74,$69,$61,$6C
       00:030F: 20 74 6F 20 
       00:0313: 49 6E 69 74 
       00:0317: 69 61 6C 
  4924 00:031A: 69 7A 65 2E  	db	$69,$7A,$65,$2E,$00,$6B,$5F,$69,$6E,$69,
                    $74,$61,$6C,$69,$7A
       00:031E: 00 6B 5F 69 
       00:0322: 6E 69 74 61 
       00:0326: 6C 69 7A 
  4925 00:0329: 65 5F 77 69  	db	$65,$5F,$77,$69,$6E,$64,$6F,$77,$5F,$6D,
  Sat Jul 10 2021  1:15                                                Page 98


                    $61,$6E,$61,$67,$65
       00:032D: 6E 64 6F 77 
       00:0331: 5F 6D 61 6E 
       00:0335: 61 67 65 
  4926 00:0338: 72 20 76 65  	db	$72,$20,$76,$65,$72,$73,$69,$6F,$6E,$3A,
                    $00,$0D,$0A,$00,$40
       00:033C: 72 73 69 6F 
       00:0340: 6E 3A 00 0D 
       00:0344: 0A 00 40 
  4927 00:0347: 2F 63 6F 6E  	db	$2F,$63,$6F,$6E,$73,$6F,$6C,$65,$00,$40,
                    $2F,$69,$64,$6C,$65
       00:034B: 73 6F 6C 65 
       00:034F: 00 40 2F 69 
       00:0353: 64 6C 65 
  4928 00:0356: 00 6B 5F 65  	db	$00,$6B,$5F,$65,$76,$65,$6E,$74,$5F,$6C,
                    $6F,$6F,$70,$20,$52
       00:035A: 76 65 6E 74 
       00:035E: 5F 6C 6F 6F 
       00:0362: 70 20 52 
  4929 00:0365: 45 43 45 49  	db	$45,$43,$45,$49,$56,$45,$44,$3A,$46,$58,
                    $5F,$46,$4F,$43,$55
       00:0369: 56 45 44 3A 
       00:036D: 46 58 5F 46 
       00:0371: 4F 43 55 
  4930 00:0374: 53 5F 57 49  	db	$53,$5F,$57,$49,$4E,$44,$4F,$57,$0D,$0A,
                    $00,$2A,$2A,$2A,$20
       00:0378: 4E 44 4F 57 
       00:037C: 0D 0A 00 2A 
       00:0380: 2A 2A 20 
  4931 00:0383: 6B 5F 65 76  	db	$6B,$5F,$65,$76,$65,$6E,$74,$5F,$6C,$6F,
                    $6F,$70,$3A,$3A,$46
       00:0387: 65 6E 74 5F 
       00:038B: 6C 6F 6F 70 
       00:038F: 3A 3A 46 
  4932 00:0392: 58 5F 46 4F  	db	$58,$5F,$46,$4F,$43,$55,$53,$5F,$4C,$4F,
                    $53,$54,$3A,$00,$6B
       00:0396: 43 55 53 5F 
       00:039A: 4C 4F 53 54 
       00:039E: 3A 00 6B 
  4933 00:03A1: 5F 65 76 65  	db	$5F,$65,$76,$65,$6E,$74,$5F,$6C,$6F,$6F,
                    $70,$20,$52,$45,$43
       00:03A5: 6E 74 5F 6C 
       00:03A9: 6F 6F 70 20 
       00:03AD: 52 45 43 
  4934 00:03B0: 45 49 56 45  	db	$45,$49,$56,$45,$44,$3A,$46,$58,$5F,$46,
                    $4F,$43,$55,$53,$5F
       00:03B4: 44 3A 46 58 
       00:03B8: 5F 46 4F 43 
       00:03BC: 55 53 5F 
  4935 00:03BF: 57 49 4E 44  	db	$57,$49,$4E,$44,$4F,$57,$3A,$6B,$5F,$65,
                    $6E,$71,$75,$65,$75
       00:03C3: 4F 57 3A 6B 
       00:03C7: 5F 65 6E 71 
       00:03CB: 75 65 75 
  4936 00:03CE: 65 3A 00 6B  	db	$65,$3A,$00,$6B,$5F,$65,$76,$65,$6E,$74,
                    $5F,$6C,$6F,$6F,$70
       00:03D2: 5F 65 76 65 
       00:03D6: 6E 74 5F 6C 
  Sat Jul 10 2021  1:15                                                Page 99


       00:03DA: 6F 6F 70 
  4937 00:03DD: 20 65 76 65  	db	$20,$65,$76,$65,$6E,$74,$3A,$3A,$46,$58,
                    $5F,$4D,$45,$4E,$55
       00:03E1: 6E 74 3A 3A 
       00:03E5: 46 58 5F 4D 
       00:03E9: 45 4E 55 
  4938 00:03EC: 5F 43 4F 4D  	db	$5F,$43,$4F,$4D,$4D,$41,$4E,$44,$3A,$00,
                    $6B,$5F,$65,$76,$65
       00:03F0: 4D 41 4E 44 
       00:03F4: 3A 00 6B 5F 
       00:03F8: 65 76 65 
  4939 00:03FB: 6E 74 5F 6C  	db	$6E,$74,$5F,$6C,$6F,$6F,$70,$20,$64,$61,
                    $74,$61,$3A,$46,$58
       00:03FF: 6F 6F 70 20 
       00:0403: 64 61 74 61 
       00:0407: 3A 46 58 
  4940 00:040A: 5F 50 52 4F  	db	$5F,$50,$52,$4F,$43,$45,$53,$53,$5F,$46,
                    $4C,$4F,$50,$50,$59
       00:040E: 43 45 53 53 
       00:0412: 5F 46 4C 4F 
       00:0416: 50 50 59 
  4941 00:0419: 0D 0A 00 6B  	db	$0D,$0A,$00,$6B,$5F,$65,$76,$65,$6E,$74,
                    $5F,$6C,$6F,$6F,$70
       00:041D: 5F 65 76 65 
       00:0421: 6E 74 5F 6C 
       00:0425: 6F 6F 70 
  4942 00:0428: 20 64 61 74  	db	$20,$64,$61,$74,$61,$3A,$46,$58,$5F,$50,
                    $52,$4F,$43,$45,$53
       00:042C: 61 3A 46 58 
       00:0430: 5F 50 52 4F 
       00:0434: 43 45 53 
  4943 00:0437: 53 5F 53 44  	db	$53,$5F,$53,$44,$43,$41,$52,$44,$3A,$54,
                    $59,$50,$45,$3A,$00
       00:043B: 43 41 52 44 
       00:043F: 3A 54 59 50 
       00:0443: 45 3A 00 
  4944 00:0446: 46 58 5F 4C  	db	$46,$58,$5F,$4C,$4F,$53,$54,$5F,$46,$4F,
                    $43,$55,$53,$3A,$00
       00:044A: 4F 53 54 5F 
       00:044E: 46 4F 43 55 
       00:0452: 53 3A 00 
  4945 00:0455: 48 41 53 20  	db	$48,$41,$53,$20,$46,$4F,$43,$55,$53,$3A,
                    $00,$2A,$2A,$2A,$20
       00:0459: 46 4F 43 55 
       00:045D: 53 3A 00 2A 
       00:0461: 2A 2A 20 
  4946 00:0464: 6B 5F 65 76  	db	$6B,$5F,$65,$76,$65,$6E,$74,$5F,$6C,$6F,
                    $6F,$70,$3A,$3A,$46
       00:0468: 65 6E 74 5F 
       00:046C: 6C 6F 6F 70 
       00:0470: 3A 3A 46 
  4947 00:0473: 58 5F 46 4F  	db	$58,$5F,$46,$4F,$43,$55,$53,$5F,$57,$49,
                    $4E,$44,$4F,$57,$3A
       00:0477: 43 55 53 5F 
       00:047B: 57 49 4E 44 
       00:047F: 4F 57 3A 
  4948 00:0482: 00 2A 2A 2A  	db	$00,$2A,$2A,$2A,$20,$6B,$5F,$65,$76,$65,
                    $6E,$74,$5F,$6C,$6F
  Sat Jul 10 2021  1:15                                                Page 100


       00:0486: 20 6B 5F 65 
       00:048A: 76 65 6E 74 
       00:048E: 5F 6C 6F 
  4949 00:0491: 6F 70 3A 3A  	db	$6F,$70,$3A,$3A,$46,$58,$5F,$46,$4F,$43,
                    $55,$53,$5F,$4C,$4F
       00:0495: 46 58 5F 46 
       00:0499: 4F 43 55 53 
       00:049D: 5F 4C 4F 
  4950 00:04A0: 53 54 3A 00  	db	$53,$54,$3A,$00,$6B,$5F,$65,$76,$65,$6E,
                    $74,$5F,$6C,$6F,$6F
       00:04A4: 6B 5F 65 76 
       00:04A8: 65 6E 74 5F 
       00:04AC: 6C 6F 6F 
  4951 00:04AF: 70 20 52 45  	db	$70,$20,$52,$45,$43,$45,$49,$56,$45,$44,
                    $3A,$46,$58,$5F,$46
       00:04B3: 43 45 49 56 
       00:04B7: 45 44 3A 46 
       00:04BB: 58 5F 46 
  4952 00:04BE: 4F 43 55 53  	db	$4F,$43,$55,$53,$5F,$4C,$4F,$53,$54,$3A,
                    $6B,$5F,$65,$6E,$71
       00:04C2: 5F 4C 4F 53 
       00:04C6: 54 3A 6B 5F 
       00:04CA: 65 6E 71 
  4953 00:04CD: 75 65 75 65  	db	$75,$65,$75,$65,$3A,$00,$6B,$5F,$65,$76,
                    $65,$6E,$74,$5F,$6C
       00:04D1: 3A 00 6B 5F 
       00:04D5: 65 76 65 6E 
       00:04D9: 74 5F 6C 
  4954 00:04DC: 6F 6F 70 20  	db	$6F,$6F,$70,$20,$52,$45,$43,$45,$49,$56,
                    $45,$44,$3A,$46,$58
       00:04E0: 52 45 43 45 
       00:04E4: 49 56 45 44 
       00:04E8: 3A 46 58 
  4955 00:04EB: 5F 46 4F 43  	db	$5F,$46,$4F,$43,$55,$53,$5F,$57,$49,$4E,
                    $44,$4F,$57,$3A,$6B
       00:04EF: 55 53 5F 57 
       00:04F3: 49 4E 44 4F 
       00:04F7: 57 3A 6B 
  4956 00:04FA: 5F 65 6E 71  	db	$5F,$65,$6E,$71,$75,$65,$75,$65,$3A,$00,
                    $2A,$2A,$2A,$20,$6B
       00:04FE: 75 65 75 65 
       00:0502: 3A 00 2A 2A 
       00:0506: 2A 20 6B 
  4957 00:0509: 5F 65 76 65  	db	$5F,$65,$76,$65,$6E,$74,$5F,$6C,$6F,$6F,
                    $70,$3A,$3A,$46,$58
       00:050D: 6E 74 5F 6C 
       00:0511: 6F 6F 70 3A 
       00:0515: 3A 46 58 
  4958 00:0518: 5F 4B 45 59  	db	$5F,$4B,$45,$59,$5F,$2A,$0D,$0A,$00,$2A,
                    $2A,$2A,$20,$6B,$5F
       00:051C: 5F 2A 0D 0A 
       00:0520: 00 2A 2A 2A 
       00:0524: 20 6B 5F 
  4959 00:0527: 65 76 65 6E  	db	$65,$76,$65,$6E,$74,$5F,$6C,$6F,$6F,$70,
                    $3A,$3A,$46,$58,$5F
       00:052B: 74 5F 6C 6F 
       00:052F: 6F 70 3A 3A 
       00:0533: 46 58 5F 
  Sat Jul 10 2021  1:15                                                Page 101


  4960 00:0536: 4B 45 59 5F  	db	$4B,$45,$59,$5F,$2A,$0D,$0A,$00,$45,$78,
                    $63,$65,$70,$74,$69
       00:053A: 2A 0D 0A 00 
       00:053E: 45 78 63 65 
       00:0542: 70 74 69 
  4961 00:0545: 6F 6E 3A 66  	db	$6F,$6E,$3A,$66,$78,$65,$76,$65,$6E,$74,
                    $6D,$61,$6E,$61,$67
       00:0549: 78 65 76 65 
       00:054D: 6E 74 6D 61 
       00:0551: 6E 61 67 
  4962 00:0554: 65 72 20 6E  	db	$65,$72,$20,$6E,$6F,$74,$20,$69,$6E,$69,
                    $74,$69,$61,$6C,$69
       00:0558: 6F 74 20 69 
       00:055C: 6E 69 74 69 
       00:0560: 61 6C 69 
  4963 00:0563: 7A 65 64 00  	db	$7A,$65,$64,$00
  4964 00:0567:              	ends
  4965                        ;
  4966                        ;void IdleProc(PFXOSMESSAGE pMsg)
  4967                        ;{
  4968                        	.line	1056
  4969                        	.line	1057
  4970                        	EVTMAN
  4971                        	xdef	~~IdleProc
  4972                        	func
  4973                        	.function	1057
  4974                        ~~IdleProc:
  4975                        	longa	on
  4976                        	longi	on
  4977 05:0C96: 3B           	tsc
  4978 05:0C97: 38           	sec
  4979 05:0C98: E9 00 00     	sbc	#L122
  4980 05:0C9B: 1B           	tcs
  4981 05:0C9C: 0B           	phd
  4982 05:0C9D: 5B           	tcd
  4983             00000004   pMsg_0	set	4
  4984                        	.block	1057
  4985                        ;	if(pMsg!=NULL)
  4986                        	.sym	pMsg,4,138,6,32,16
  4987                        	.line	1058
  4988                        ;	{
  4989 05:0C9E: A5 04        	lda	<L122+pMsg_0
  4990 05:0CA0: 05 06        	ora	<L122+pMsg_0+2
  4991 05:0CA2: D0 03        	bne	L125
  4992 05:0CA4: 82 2E 00     	brl	L10066
  4993                        L125:
  4994                        	.line	1059
  4995                        ;		_normal_idle_tick--;
  4996                        	.line	1060
  4997 05:0CA7: CE xx xx     	dec	|~~_normal_idle_tick
  4998                        ;		_fast_idle_tick--;
  4999                        	.line	1061
  5000 05:0CAA: CE xx xx     	dec	|~~_fast_idle_tick
  5001                        ;
  5002                        ;		//k_debug_integer("IdleProc:",_subTick);
  5003                        ;
  5004                        ;		if(_normal_idle_tick == 0)
  5005                        	.line	1065
  Sat Jul 10 2021  1:15                                                Page 102


  5006                        ;		{
  5007 05:0CAD: AD xx xx     	lda	|~~_normal_idle_tick
  5008 05:0CB0: F0 03        	beq	L126
  5009 05:0CB2: 82 0E 00     	brl	L10067
  5010                        L126:
  5011                        	.line	1066
  5012                        ;			k_heap_integrity_check();
  5013                        	.line	1067
  5014 05:0CB5: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  5015                        ;
  5016                        ;			_normal_idle_tick = IDLE_TIMEOUT
                    ;//0x7FFF;
  5017                        	.line	1069
  5018 05:0CB9: A9 FF 00     	lda	#$ff
  5019 05:0CBC: 8D xx xx     	sta	|~~_normal_idle_tick
  5020                        ;
  5021                        ;			k_process_idle_procs();
  5022                        	.line	1071
  5023 05:0CBF: 22 84 25 05  	jsl	~~k_process_idle_procs
  5024                        ;		}
  5025                        	.line	1072
  5026                        ;
  5027                        ;		if(_fast_idle_tick)
  5028                        L10067:
  5029                        	.line	1074
  5030                        ;		{
  5031 05:0CC3: AD xx xx     	lda	|~~_fast_idle_tick
  5032 05:0CC6: D0 03        	bne	L127
  5033 05:0CC8: 82 0A 00     	brl	L10068
  5034                        L127:
  5035                        	.line	1075
  5036                        ;			k_process_hi_idle_procs();
  5037                        	.line	1076
  5038 05:0CCB: 22 AF 25 05  	jsl	~~k_process_hi_idle_procs
  5039                        ;			_fast_idle_tick = FASTIDLE_TIMEO
                    UT;
  5040                        	.line	1077
  5041 05:0CCF: A9 7F 00     	lda	#$7f
  5042 05:0CD2: 8D xx xx     	sta	|~~_fast_idle_tick
  5043                        ;		}
  5044                        	.line	1078
  5045                        ;	}
  5046                        L10068:
  5047                        	.line	1079
  5048                        ;}
  5049                        L10066:
  5050                        	.line	1080
  5051                        L128:
  5052 05:0CD5: A5 02        	lda	<L122+2
  5053 05:0CD7: 85 06        	sta	<L122+2+4
  5054 05:0CD9: A5 01        	lda	<L122+1
  5055 05:0CDB: 85 05        	sta	<L122+1+4
  5056 05:0CDD: 2B           	pld
  5057 05:0CDE: 3B           	tsc
  5058 05:0CDF: 18           	clc
  5059 05:0CE0: 69 04 00     	adc	#L122+4
  5060 05:0CE3: 1B           	tcs
  5061 05:0CE4: 6B           	rtl
  Sat Jul 10 2021  1:15                                                Page 103


  5062                        	.endblock	1080
  5063             00000000   L122	equ	0
  5064             00000001   L123	equ	1
  5065 05:0CE5:              	ends
  5066                        	efunc
  5067                        	.endfunc	1080,1,0
  5068                        	.line	1080
  5069                        ;
  5070                        ;void k_do_procs(PFXOSMESSAGE pMsg)
  5071                        ;{
  5072                        	.line	1082
  5073                        	.line	1083
  5074                        	EVTMAN
  5075                        	xdef	~~k_do_procs
  5076                        	func
  5077                        	.function	1083
  5078                        ~~k_do_procs:
  5079                        	longa	on
  5080                        	longi	on
  5081 05:0CE5: 3B           	tsc
  5082 05:0CE6: 38           	sec
  5083 05:0CE7: E9 0A 00     	sbc	#L129
  5084 05:0CEA: 1B           	tcs
  5085 05:0CEB: 0B           	phd
  5086 05:0CEC: 5B           	tcd
  5087             00000004   pMsg_0	set	4
  5088                        	.block	1083
  5089                        ;	int index = 0;
  5090                        ;
  5091                        ;	//k_debug_string("k_do_procs:Enter\r\n");
  5092                        ;	for(index = IDLE_PROC;index<MAX_PROCS;index++)
  5093             00000000   index_1	set	0
  5094                        	.sym	index,0,5,1,16
  5095                        	.sym	pMsg,4,138,6,32,16
  5096 05:0CED: 64 09        	stz	<L130+index_1
  5097                        	.line	1087
  5098 05:0CEF: 64 09        	stz	<L130+index_1
  5099                        L10071:
  5100                        ;	{
  5101                        	.line	1088
  5102                        ;		if(eventProcs[index] != NULL)
  5103                        	.line	1089
  5104                        ;		{
  5105 05:0CF1: A5 09        	lda	<L130+index_1
  5106 05:0CF3: 0A           	asl	A
  5107 05:0CF4: 0A           	asl	A
  5108 05:0CF5: 85 01        	sta	<R0
  5109 05:0CF7: 18           	clc
  5110 05:0CF8: A9 xx xx     	lda	#<~~eventProcs
  5111 05:0CFB: 65 01        	adc	<R0
  5112 05:0CFD: 85 05        	sta	<R1
  5113 05:0CFF: B2 05        	lda	(<R1)
  5114 05:0D01: A0 02 00     	ldy	#$2
  5115 05:0D04: 11 05        	ora	(<R1),Y
  5116 05:0D06: D0 03        	bne	L132
  5117 05:0D08: 82 1E 00     	brl	L10072
  5118                        L132:
  5119                        	.line	1090
  Sat Jul 10 2021  1:15                                                Page 104


  5120                        ;			//if(index > IDLE_PROC)
  5121                        ;			//	k_debug_string("Calling 
                    bad proc index.\r\n");
  5122                        ;
  5123                        ;			eventProcs[index](pMsg);
  5124                        	.line	1094
  5125 05:0D0B: D4 10        	pei	<L129+pMsg_0+2
  5126 05:0D0D: D4 0E        	pei	<L129+pMsg_0
  5127 05:0D0F: A5 09        	lda	<L130+index_1
  5128 05:0D11: 0A           	asl	A
  5129 05:0D12: 0A           	asl	A
  5130 05:0D13: 85 01        	sta	<R0
  5131 05:0D15: 18           	clc
  5132 05:0D16: A9 xx xx     	lda	#<~~eventProcs
  5133 05:0D19: 65 01        	adc	<R0
  5134 05:0D1B: 85 05        	sta	<R1
  5135 05:0D1D: A0 02 00     	ldy	#$2
  5136 05:0D20: B1 05        	lda	(<R1),Y
  5137 05:0D22: AA           	tax
  5138 05:0D23: B2 05        	lda	(<R1)
  5139                        	xref	~~~lcal
  5140 05:0D25: 22 xx xx xx  	jsl	~~~lcal
  5141                        ;		}
  5142                        	.line	1095
  5143                        ;	}
  5144                        L10072:
  5145                        	.line	1096
  5146                        L10069:
  5147 05:0D29: E6 09        	inc	<L130+index_1
  5148 05:0D2B: 38           	sec
  5149 05:0D2C: A5 09        	lda	<L130+index_1
  5150 05:0D2E: E9 00 01     	sbc	#<$100
  5151 05:0D31: 70 03        	bvs	L133
  5152 05:0D33: 49 00 80     	eor	#$8000
  5153                        L133:
  5154 05:0D36: 30 03        	bmi	L134
  5155 05:0D38: 82 B6 FF     	brl	L10071
  5156                        L134:
  5157                        L10070:
  5158                        ;}
  5159                        	.line	1097
  5160                        L135:
  5161 05:0D3B: A5 0C        	lda	<L129+2
  5162 05:0D3D: 85 10        	sta	<L129+2+4
  5163 05:0D3F: A5 0B        	lda	<L129+1
  5164 05:0D41: 85 0F        	sta	<L129+1+4
  5165 05:0D43: 2B           	pld
  5166 05:0D44: 3B           	tsc
  5167 05:0D45: 18           	clc
  5168 05:0D46: 69 0E 00     	adc	#L129+4
  5169 05:0D49: 1B           	tcs
  5170 05:0D4A: 6B           	rtl
  5171                        	.endblock	1097
  5172             0000000A   L129	equ	10
  5173             00000009   L130	equ	9
  5174 05:0D4B:              	ends
  5175                        	efunc
  5176                        	.endfunc	1097,9,10
  Sat Jul 10 2021  1:15                                                Page 105


  5177                        	.line	1097
  5178                        ;/*
  5179                        ;static void DoWndProcs(LPVOID ctx,LPVOID data)
  5180                        ;{
  5181                        ;	PFXOSMESSAGE pMsg  = (PFXOSMESSAGE)ctx;
  5182                        ;	PWINDOW 	 pWin  = (PWINDOW)data;
  5183                        ;	PFXPROCESS   pProc = k_exec_get_current_process(
                    );
  5184                        ;
  5185                        ;
  5186                        ;	if(pMsg && pWin && !pWin->isClosed && pWin->pWnd
                    Class && pWin->pWndClass->pWndProc)
  5187                        ;	{
  5188                        ;		//k_debug_integer("DoWndProcs:type:",pMs
                    g->type);
  5189                        ;
  5190                        ;		//k_debug_pointer("DoWndProcs:HWND:check
                    :",((LPVOID)pMsg->hwnd));
  5191                        ;		//k_debug_pointer("DoWndProcs:pWin:check
                    :",(LPVOID)pWin);
  5192                        ;		if((pWin->procid == pProc->procId) || ((
                    (LPVOID)pMsg->hwnd) == BROADCAST_HWND)) // change
  5193                        ;		{
  5194                        ;			if(pMsg->hwnd && !pWin->isClosed
                      && ( ((LPVOID)pMsg->hwnd) == (LPVOID)pWin || ((LPVOID)pMsg
                    ->hwnd) == BROADCAST_HWND)   )
  5195                        ;			{
  5196                        ;				//k_debug_pointer("DoWnd
                    Procs:CALLING:pMsg:",pMsg);
  5197                        ;				//k_debug_strings("DoWnd
                    Procs:CALLING:WindowTitle:",pWin->win_title);
  5198                        ;				if(((LPVOID)pMsg->hwnd) 
                    == BROADCAST_HWND)
  5199                        ;				{
  5200                        ;					//k_debug_string
                    s("DoWndProcs::win_class_name1:", pWin->win_class_name);
  5201                        ;
  5202                        ;					if(pMsg->type ==
                     FX_DRAW_NONCLIENT || pMsg->type == FX_DRAW_CLIENT)
  5203                        ;					{
  5204                        ;						k_debug_
                    nodelist_with_data( k_getWindowList(), debug_window_node );
  5205                        ;
  5206                        ;
  5207                        ;						k_debug_
                    strings("DoWndProcs::win_class_name2:", pWin->win_class_name
                    );
  5208                        ;						if( strc
                    mp(pWin->win_class_name,"desktopWindowClass") ==0 ||
  5209                        ;							
                    strcmp(pWin->win_class_name,"menuWindowClass") ==0 ||
  5210                        ;							
                    strcmp(pWin->win_class_name,"menuAnchorWindowClass") ==0 ||
  5211                        ;							
                    strcmp(pWin->win_class_name,"menuDropDownWindowClass") ==0)
  5212                        ;						{
  5213                        ;							
                    return;
  Sat Jul 10 2021  1:15                                                Page 106


  5214                        ;						}
  5215                        ;					}
  5216                        ;					//k_debug_pointe
                    r("DoWndProcs::BROADCAST_HWND:", pMsg->hwnd);
  5217                        ;					pMsg->hwnd = (HW
                    ND)pWin;
  5218                        ;					//k_debug_pointe
                    r("DoWndProcs::REAL HWND:", pMsg->hwnd);
  5219                        ;					//k_debug_string
                    s("DoWndProcs::REAL NAME:", pWin->win_title);
  5220                        ;				}
  5221                        ;
  5222                        ;				if(FX_MENU_COMMAND == pM
                    sg->type)
  5223                        ;				{
  5224                        ;					k_debug_pointer(
                    "DoWndProcs::FX_MENU_COMMAND:", pMsg->hwnd);
  5225                        ;					k_debug_pointer(
                    "DoWndProcs::FX_MENU_COMMAND:pWndProc:", pWin->pWndClass->pW
                    ndProc);
  5226                        ;				}
  5227                        ;
  5228                        ;				if(!pWin->pWndClass->pWn
                    dProc(pMsg))
  5229                        ;				{
  5230                        ;					k_debug_strings(
                    "DoWndProcs:HWND:Closed:",pWin->win_title);
  5231                        ;					k_debug_integer(
                    "DoWndProcs:HWND:Closed:pMsg:",pMsg->type);
  5232                        ;
  5233                        ;					if(k_user_get_lo
                    cked_focus() == pMsg->hwnd)
  5234                        ;						k_user_u
                    nlock_focus();
  5235                        ;
  5236                        ;					pWin->isClosed =
                     TRUE;
  5237                        ;					strcpy(pWin->win
                    _title,"##CLOSED");
  5238                        ;
  5239                        ;
  5240                        ;					k_nodelist_remov
                    e_obj(k_user_get_object_list(0)->listhead->next,(ULONG)pWin)
                    ;
  5241                        ;
  5242                        ;				}
  5243                        ;			}
  5244                        ;		}
  5245                        ;		else
  5246                        ;		{
  5247                        ;			//k_debug_long("DoWndProcs:WRONG
                     PROCESS:",(ULONG)pProc->procId);
  5248                        ;		}
  5249                        ;	}
  5250                        ;
  5251                        ;	return;
  5252                        ;}
  5253                        ;*/
  Sat Jul 10 2021  1:15                                                Page 107


  5254                        ;void k_do_processes(PFXOSMESSAGE pMsg)
  5255                        ;{
  5256                        	.line	1174
  5257                        	.line	1175
  5258                        	EVTMAN
  5259                        	xdef	~~k_do_processes
  5260                        	func
  5261                        	.function	1175
  5262                        ~~k_do_processes:
  5263                        	longa	on
  5264                        	longi	on
  5265 05:0D4B: 3B           	tsc
  5266 05:0D4C: 38           	sec
  5267 05:0D4D: E9 21 00     	sbc	#L136
  5268 05:0D50: 1B           	tcs
  5269 05:0D51: 0B           	phd
  5270 05:0D52: 5B           	tcd
  5271             00000004   pMsg_0	set	4
  5272                        	.block	1175
  5273                        ;	int index = 0;
  5274                        ;	int tc = 0;
  5275                        ;	BOOL isForeground = FALSE;
  5276                        ;	PFXPROCESS pCurrent = NULL;
  5277                        ;
  5278                        ;	if(pMsg->src == FX_MSGSRC_DRIVER )
  5279             00000000   index_1	set	0
  5280             00000002   tc_1	set	2
  5281             00000004   isForeground_1	set	4
  5282             00000005   pCurrent_1	set	5
  5283                        	.sym	index,0,5,1,16
  5284                        	.sym	tc,2,5,1,16
  5285                        	.sym	isForeground,4,14,1,8
  5286                        	.sym	pCurrent,5,138,1,32,20
  5287                        	.sym	pMsg,4,138,6,32,16
  5288 05:0D53: 64 19        	stz	<L137+index_1
  5289 05:0D55: 64 1B        	stz	<L137+tc_1
  5290 05:0D57: E2 20        	sep	#$20
  5291                        	longa	off
  5292 05:0D59: 64 1D        	stz	<L137+isForeground_1
  5293 05:0D5B: C2 20        	rep	#$20
  5294                        	longa	on
  5295 05:0D5D: 64 1E        	stz	<L137+pCurrent_1
  5296 05:0D5F: 64 20        	stz	<L137+pCurrent_1+2
  5297                        	.line	1181
  5298                        ;	{
  5299 05:0D61: A7 25        	lda	[<L136+pMsg_0]
  5300 05:0D63: C9 FE FF     	cmp	#<$fffffffe
  5301 05:0D66: D0 08        	bne	L139
  5302 05:0D68: A0 02 00     	ldy	#$2
  5303 05:0D6B: B7 25        	lda	[<L136+pMsg_0],Y
  5304 05:0D6D: C9 FF FF     	cmp	#^$fffffffe
  5305                        L139:
  5306 05:0D70: F0 03        	beq	L140
  5307 05:0D72: 82 2D 00     	brl	L10073
  5308                        L140:
  5309                        	.line	1182
  5310                        ;		if(pMsg->type == FX_PROCESS_SDCARD && pM
                    sg->data[0] == 1)
  Sat Jul 10 2021  1:15                                                Page 108


  5311                        	.line	1183
  5312                        ;		{
  5313 05:0D75: A0 08 00     	ldy	#$8
  5314 05:0D78: B7 25        	lda	[<L136+pMsg_0],Y
  5315 05:0D7A: C9 F3 FF     	cmp	#<$fff3
  5316 05:0D7D: F0 03        	beq	L141
  5317 05:0D7F: 82 20 00     	brl	L10074
  5318                        L141:
  5319 05:0D82: E2 20        	sep	#$20
  5320                        	longa	off
  5321 05:0D84: A0 16 00     	ldy	#$16
  5322 05:0D87: B7 25        	lda	[<L136+pMsg_0],Y
  5323 05:0D89: C9 01        	cmp	#<$1
  5324 05:0D8B: C2 20        	rep	#$20
  5325                        	longa	on
  5326 05:0D8D: F0 03        	beq	L142
  5327 05:0D8F: 82 10 00     	brl	L10074
  5328                        L142:
  5329                        	.line	1184
  5330                        ;			k_debug_integer("k_do_processes:
                    FX_PROCESS_SDCARD:",pMsg->type);
  5331                        	.line	1185
  5332 05:0D92: A0 08 00     	ldy	#$8
  5333 05:0D95: B7 25        	lda	[<L136+pMsg_0],Y
  5334 05:0D97: 48           	pha
  5335 05:0D98: F4 xx xx     	pea	#^L121
  5336 05:0D9B: F4 xx xx     	pea	#<L121
  5337 05:0D9E: 22 xx xx xx  	jsl	~~k_debug_integer
  5338                        ;		}
  5339                        	.line	1186
  5340                        ;	}
  5341                        L10074:
  5342                        	.line	1187
  5343                        ;
  5344                        ;	for(index = IDLE_PROC;index<MAX_PROCS;index++)
  5345                        L10073:
  5346                        	.line	1189
  5347 05:0DA2: 64 19        	stz	<L137+index_1
  5348                        L10077:
  5349                        ;	{
  5350                        	.line	1190
  5351                        ;		if(eventProcess[index] != NULL)
  5352                        	.line	1191
  5353                        ;		{
  5354 05:0DA4: A5 19        	lda	<L137+index_1
  5355 05:0DA6: 0A           	asl	A
  5356 05:0DA7: 0A           	asl	A
  5357 05:0DA8: 85 01        	sta	<R0
  5358 05:0DAA: 18           	clc
  5359 05:0DAB: A9 xx xx     	lda	#<~~eventProcess
  5360 05:0DAE: 65 01        	adc	<R0
  5361 05:0DB0: 85 05        	sta	<R1
  5362 05:0DB2: B2 05        	lda	(<R1)
  5363 05:0DB4: A0 02 00     	ldy	#$2
  5364 05:0DB7: 11 05        	ora	(<R1),Y
  5365 05:0DB9: D0 03        	bne	L143
  5366 05:0DBB: 82 1D 06     	brl	L10078
  5367                        L143:
  Sat Jul 10 2021  1:15                                                Page 109


  5368                        	.line	1192
  5369                        ;			isForeground = eventProcess[inde
                    x]->process->foregroundActive;
  5370                        	.line	1193
  5371 05:0DBE: A5 19        	lda	<L137+index_1
  5372 05:0DC0: 0A           	asl	A
  5373 05:0DC1: 0A           	asl	A
  5374 05:0DC2: 85 01        	sta	<R0
  5375 05:0DC4: 18           	clc
  5376 05:0DC5: A9 xx xx     	lda	#<~~eventProcess
  5377 05:0DC8: 65 01        	adc	<R0
  5378 05:0DCA: 85 05        	sta	<R1
  5379 05:0DCC: B2 05        	lda	(<R1)
  5380 05:0DCE: 85 01        	sta	<R0
  5381 05:0DD0: A0 02 00     	ldy	#$2
  5382 05:0DD3: B1 05        	lda	(<R1),Y
  5383 05:0DD5: 85 03        	sta	<R0+2
  5384 05:0DD7: A7 01        	lda	[<R0]
  5385 05:0DD9: 85 05        	sta	<R1
  5386 05:0DDB: A0 02 00     	ldy	#$2
  5387 05:0DDE: B7 01        	lda	[<R0],Y
  5388 05:0DE0: 85 07        	sta	<R1+2
  5389 05:0DE2: E2 20        	sep	#$20
  5390                        	longa	off
  5391 05:0DE4: A0 12 00     	ldy	#$12
  5392 05:0DE7: B7 05        	lda	[<R1],Y
  5393 05:0DE9: 85 1D        	sta	<L137+isForeground_1
  5394 05:0DEB: C2 20        	rep	#$20
  5395                        	longa	on
  5396                        ;
  5397                        ;			/*
  5398                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_TERMINATED)
  5399                        ;			{
  5400                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TERMINATING:",eventProcess[index]->process->pr
                    ocId);
  5401                        ;				k_unattach_events(eventP
                    rocess[index]->eventProc,NULL);
  5402                        ;				eventProcess[index] = NU
                    LL;
  5403                        ;				continue;
  5404                        ;			}
  5405                        ;			*/
  5406                        ;
  5407                        ;			/*
  5408                        ;			if(eventProcess[index]->process-
                    >status == FX_PROCESS_EXCEPTION)
  5409                        ;			{
  5410                        ;				k_debug_long("k_do_proce
                    sses::PFX_PROCESS_EXCEPTION:",eventProcess[index]->process->
                    procId);
  5411                        ;			}
  5412                        ;			*/
  5413                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_WAITING)
  5414                        	.line	1211
  5415                        ;			{
  Sat Jul 10 2021  1:15                                                Page 110


  5416 05:0DED: A5 19        	lda	<L137+index_1
  5417 05:0DEF: 0A           	asl	A
  5418 05:0DF0: 0A           	asl	A
  5419 05:0DF1: 85 01        	sta	<R0
  5420 05:0DF3: 18           	clc
  5421 05:0DF4: A9 xx xx     	lda	#<~~eventProcess
  5422 05:0DF7: 65 01        	adc	<R0
  5423 05:0DF9: 85 05        	sta	<R1
  5424 05:0DFB: B2 05        	lda	(<R1)
  5425 05:0DFD: 85 01        	sta	<R0
  5426 05:0DFF: A0 02 00     	ldy	#$2
  5427 05:0E02: B1 05        	lda	(<R1),Y
  5428 05:0E04: 85 03        	sta	<R0+2
  5429 05:0E06: A7 01        	lda	[<R0]
  5430 05:0E08: 85 05        	sta	<R1
  5431 05:0E0A: A0 02 00     	ldy	#$2
  5432 05:0E0D: B7 01        	lda	[<R0],Y
  5433 05:0E0F: 85 07        	sta	<R1+2
  5434 05:0E11: A0 10 00     	ldy	#$10
  5435 05:0E14: B7 05        	lda	[<R1],Y
  5436 05:0E16: C9 F1 00     	cmp	#<$f1
  5437 05:0E19: F0 03        	beq	L144
  5438 05:0E1B: 82 3D 00     	brl	L10079
  5439                        L144:
  5440                        	.line	1212
  5441                        ;				k_debug_long("k_do_proce
                    sses::PROCESS WAITING:",eventProcess[index]->process->procId
                    );
  5442                        	.line	1213
  5443 05:0E1E: A5 19        	lda	<L137+index_1
  5444 05:0E20: 0A           	asl	A
  5445 05:0E21: 0A           	asl	A
  5446 05:0E22: 85 01        	sta	<R0
  5447 05:0E24: 18           	clc
  5448 05:0E25: A9 xx xx     	lda	#<~~eventProcess
  5449 05:0E28: 65 01        	adc	<R0
  5450 05:0E2A: 85 05        	sta	<R1
  5451 05:0E2C: B2 05        	lda	(<R1)
  5452 05:0E2E: 85 01        	sta	<R0
  5453 05:0E30: A0 02 00     	ldy	#$2
  5454 05:0E33: B1 05        	lda	(<R1),Y
  5455 05:0E35: 85 03        	sta	<R0+2
  5456 05:0E37: A7 01        	lda	[<R0]
  5457 05:0E39: 85 05        	sta	<R1
  5458 05:0E3B: A0 02 00     	ldy	#$2
  5459 05:0E3E: B7 01        	lda	[<R0],Y
  5460 05:0E40: 85 07        	sta	<R1+2
  5461 05:0E42: A0 04 00     	ldy	#$4
  5462 05:0E45: B7 05        	lda	[<R1],Y
  5463 05:0E47: 48           	pha
  5464 05:0E48: A0 02 00     	ldy	#$2
  5465 05:0E4B: B7 05        	lda	[<R1],Y
  5466 05:0E4D: 48           	pha
  5467 05:0E4E: F4 xx xx     	pea	#^L121+34
  5468 05:0E51: F4 xx xx     	pea	#<L121+34
  5469 05:0E54: 22 xx xx xx  	jsl	~~k_debug_long
  5470                        ;				continue;
  5471                        	.line	1214
  Sat Jul 10 2021  1:15                                                Page 111


  5472 05:0E58: 82 80 05     	brl	L10075
  5473                        ;			}
  5474                        	.line	1215
  5475                        ;
  5476                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_SLEEPING)
  5477                        L10079:
  5478                        	.line	1217
  5479                        ;			{
  5480 05:0E5B: A5 19        	lda	<L137+index_1
  5481 05:0E5D: 0A           	asl	A
  5482 05:0E5E: 0A           	asl	A
  5483 05:0E5F: 85 01        	sta	<R0
  5484 05:0E61: 18           	clc
  5485 05:0E62: A9 xx xx     	lda	#<~~eventProcess
  5486 05:0E65: 65 01        	adc	<R0
  5487 05:0E67: 85 05        	sta	<R1
  5488 05:0E69: B2 05        	lda	(<R1)
  5489 05:0E6B: 85 01        	sta	<R0
  5490 05:0E6D: A0 02 00     	ldy	#$2
  5491 05:0E70: B1 05        	lda	(<R1),Y
  5492 05:0E72: 85 03        	sta	<R0+2
  5493 05:0E74: A7 01        	lda	[<R0]
  5494 05:0E76: 85 05        	sta	<R1
  5495 05:0E78: A0 02 00     	ldy	#$2
  5496 05:0E7B: B7 01        	lda	[<R0],Y
  5497 05:0E7D: 85 07        	sta	<R1+2
  5498 05:0E7F: A0 10 00     	ldy	#$10
  5499 05:0E82: B7 05        	lda	[<R1],Y
  5500 05:0E84: C9 02 00     	cmp	#<$2
  5501 05:0E87: F0 03        	beq	L145
  5502 05:0E89: 82 03 00     	brl	L10080
  5503                        L145:
  5504                        	.line	1218
  5505                        ;				//k_debug_long("k_do_pro
                    cesses::PROCESS SLEEPING:",eventProcess[index]->process->pro
                    cId);
  5506                        ;				continue;
  5507                        	.line	1220
  5508 05:0E8C: 82 4C 05     	brl	L10075
  5509                        ;			}
  5510                        	.line	1221
  5511                        ;			/*
  5512                        ;			if(eventProcess[index]->process 
                    &&
  5513                        ;			   (eventProcess[index]->process
                    ->status != PROCESS_STATUS_RUNNING) &&
  5514                        ;			   (eventProcess[index]->process
                    ->status != PROCESS_STATUS_INIT))
  5515                        ;			{
  5516                        ;				if(eventProcess[index]->
                    process->status != PROCESS_STATUS_TERMINATED)
  5517                        ;				{
  5518                        ;					k_debug_long("k_
                    do_processes::PROCESS TERMINATING:",eventProcess[index]->pro
                    cess->procId);
  5519                        ;					eventProcess[ind
                    ex] = NULL;
  Sat Jul 10 2021  1:15                                                Page 112


  5520                        ;				}
  5521                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_WAITING)
  5522                        ;				{
  5523                        ;
  5524                        ;				}
  5525                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_SLEEPING)
  5526                        ;				{
  5527                        ;
  5528                        ;				}
  5529                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_SEMAPHORE)
  5530                        ;				{
  5531                        ;
  5532                        ;				}
  5533                        ;				continue;
  5534                        ;			}
  5535                        ;			*/
  5536                        ;			//if(index > IDLE_PROC)
  5537                        ;			//	k_debug_string("Calling 
                    bad proc index.\r\n");
  5538                        ;
  5539                        ;			//eventProcess[index](pMsg);
  5540                        ;			//k_debug_pointer("k_do_processe
                    s process:",eventProcess[index]->process);
  5541                        ;
  5542                        ;			if(eventProcess[index]->process!
                    =NULL)
  5543                        L10080:
  5544                        	.line	1253
  5545                        ;				k_exec_set_current_proce
                    ss(eventProcess[index]->process);
  5546 05:0E8F: A5 19        	lda	<L137+index_1
  5547 05:0E91: 0A           	asl	A
  5548 05:0E92: 0A           	asl	A
  5549 05:0E93: 85 01        	sta	<R0
  5550 05:0E95: 18           	clc
  5551 05:0E96: A9 xx xx     	lda	#<~~eventProcess
  5552 05:0E99: 65 01        	adc	<R0
  5553 05:0E9B: 85 05        	sta	<R1
  5554 05:0E9D: B2 05        	lda	(<R1)
  5555 05:0E9F: 85 01        	sta	<R0
  5556 05:0EA1: A0 02 00     	ldy	#$2
  5557 05:0EA4: B1 05        	lda	(<R1),Y
  5558 05:0EA6: 85 03        	sta	<R0+2
  5559 05:0EA8: A7 01        	lda	[<R0]
  5560 05:0EAA: A0 02 00     	ldy	#$2
  5561 05:0EAD: 17 01        	ora	[<R0],Y
  5562 05:0EAF: D0 03        	bne	L146
  5563 05:0EB1: 82 26 00     	brl	L10081
  5564                        L146:
  5565                        	.line	1254
  5566 05:0EB4: A5 19        	lda	<L137+index_1
  5567 05:0EB6: 0A           	asl	A
  5568 05:0EB7: 0A           	asl	A
  5569 05:0EB8: 85 01        	sta	<R0
  5570 05:0EBA: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 113


  5571 05:0EBB: A9 xx xx     	lda	#<~~eventProcess
  5572 05:0EBE: 65 01        	adc	<R0
  5573 05:0EC0: 85 05        	sta	<R1
  5574 05:0EC2: B2 05        	lda	(<R1)
  5575 05:0EC4: 85 01        	sta	<R0
  5576 05:0EC6: A0 02 00     	ldy	#$2
  5577 05:0EC9: B1 05        	lda	(<R1),Y
  5578 05:0ECB: 85 03        	sta	<R0+2
  5579 05:0ECD: A0 02 00     	ldy	#$2
  5580 05:0ED0: B7 01        	lda	[<R0],Y
  5581 05:0ED2: 48           	pha
  5582 05:0ED3: A7 01        	lda	[<R0]
  5583 05:0ED5: 48           	pha
  5584 05:0ED6: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  5585                        ;
  5586                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_TERMINATED)
  5587                        L10081:
  5588                        	.line	1256
  5589                        ;			{
  5590 05:0EDA: A5 19        	lda	<L137+index_1
  5591 05:0EDC: 0A           	asl	A
  5592 05:0EDD: 0A           	asl	A
  5593 05:0EDE: 85 01        	sta	<R0
  5594 05:0EE0: 18           	clc
  5595 05:0EE1: A9 xx xx     	lda	#<~~eventProcess
  5596 05:0EE4: 65 01        	adc	<R0
  5597 05:0EE6: 85 05        	sta	<R1
  5598 05:0EE8: B2 05        	lda	(<R1)
  5599 05:0EEA: 85 01        	sta	<R0
  5600 05:0EEC: A0 02 00     	ldy	#$2
  5601 05:0EEF: B1 05        	lda	(<R1),Y
  5602 05:0EF1: 85 03        	sta	<R0+2
  5603 05:0EF3: A7 01        	lda	[<R0]
  5604 05:0EF5: 85 05        	sta	<R1
  5605 05:0EF7: A0 02 00     	ldy	#$2
  5606 05:0EFA: B7 01        	lda	[<R0],Y
  5607 05:0EFC: 85 07        	sta	<R1+2
  5608 05:0EFE: A0 10 00     	ldy	#$10
  5609 05:0F01: B7 05        	lda	[<R1],Y
  5610 05:0F03: C9 03 00     	cmp	#<$3
  5611 05:0F06: F0 03        	beq	L147
  5612 05:0F08: 82 87 00     	brl	L10082
  5613                        L147:
  5614                        	.line	1257
  5615                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TERMINATING:",eventProcess[index]->process->pr
                    ocId);
  5616                        	.line	1258
  5617 05:0F0B: A5 19        	lda	<L137+index_1
  5618 05:0F0D: 0A           	asl	A
  5619 05:0F0E: 0A           	asl	A
  5620 05:0F0F: 85 01        	sta	<R0
  5621 05:0F11: 18           	clc
  5622 05:0F12: A9 xx xx     	lda	#<~~eventProcess
  5623 05:0F15: 65 01        	adc	<R0
  5624 05:0F17: 85 05        	sta	<R1
  5625 05:0F19: B2 05        	lda	(<R1)
  Sat Jul 10 2021  1:15                                                Page 114


  5626 05:0F1B: 85 01        	sta	<R0
  5627 05:0F1D: A0 02 00     	ldy	#$2
  5628 05:0F20: B1 05        	lda	(<R1),Y
  5629 05:0F22: 85 03        	sta	<R0+2
  5630 05:0F24: A7 01        	lda	[<R0]
  5631 05:0F26: 85 05        	sta	<R1
  5632 05:0F28: A0 02 00     	ldy	#$2
  5633 05:0F2B: B7 01        	lda	[<R0],Y
  5634 05:0F2D: 85 07        	sta	<R1+2
  5635 05:0F2F: A0 04 00     	ldy	#$4
  5636 05:0F32: B7 05        	lda	[<R1],Y
  5637 05:0F34: 48           	pha
  5638 05:0F35: A0 02 00     	ldy	#$2
  5639 05:0F38: B7 05        	lda	[<R1],Y
  5640 05:0F3A: 48           	pha
  5641 05:0F3B: F4 xx xx     	pea	#^L121+67
  5642 05:0F3E: F4 xx xx     	pea	#<L121+67
  5643 05:0F41: 22 xx xx xx  	jsl	~~k_debug_long
  5644                        ;				k_unattach_events(eventP
                    rocess[index]->eventProc,NULL);
  5645                        	.line	1259
  5646 05:0F45: F4 00 00     	pea	#^$0
  5647 05:0F48: F4 00 00     	pea	#<$0
  5648 05:0F4B: A5 19        	lda	<L137+index_1
  5649 05:0F4D: 0A           	asl	A
  5650 05:0F4E: 0A           	asl	A
  5651 05:0F4F: 85 01        	sta	<R0
  5652 05:0F51: 18           	clc
  5653 05:0F52: A9 xx xx     	lda	#<~~eventProcess
  5654 05:0F55: 65 01        	adc	<R0
  5655 05:0F57: 85 05        	sta	<R1
  5656 05:0F59: B2 05        	lda	(<R1)
  5657 05:0F5B: 85 01        	sta	<R0
  5658 05:0F5D: A0 02 00     	ldy	#$2
  5659 05:0F60: B1 05        	lda	(<R1),Y
  5660 05:0F62: 85 03        	sta	<R0+2
  5661 05:0F64: A0 06 00     	ldy	#$6
  5662 05:0F67: B7 01        	lda	[<R0],Y
  5663 05:0F69: 48           	pha
  5664 05:0F6A: A0 04 00     	ldy	#$4
  5665 05:0F6D: B7 01        	lda	[<R0],Y
  5666 05:0F6F: 48           	pha
  5667 05:0F70: 22 B3 14 05  	jsl	~~k_unattach_events
  5668                        ;				eventProcess[index] = NU
                    LL;
  5669                        	.line	1260
  5670 05:0F74: A5 19        	lda	<L137+index_1
  5671 05:0F76: 0A           	asl	A
  5672 05:0F77: 0A           	asl	A
  5673 05:0F78: 85 01        	sta	<R0
  5674 05:0F7A: 18           	clc
  5675 05:0F7B: A9 xx xx     	lda	#<~~eventProcess
  5676 05:0F7E: 65 01        	adc	<R0
  5677 05:0F80: 85 05        	sta	<R1
  5678 05:0F82: A9 00 00     	lda	#$0
  5679 05:0F85: 92 05        	sta	(<R1)
  5680 05:0F87: A9 00 00     	lda	#$0
  5681 05:0F8A: A0 02 00     	ldy	#$2
  Sat Jul 10 2021  1:15                                                Page 115


  5682 05:0F8D: 91 05        	sta	(<R1),Y
  5683                        ;				continue;
  5684                        	.line	1261
  5685 05:0F8F: 82 49 04     	brl	L10075
  5686                        ;			}
  5687                        	.line	1262
  5688                        ;
  5689                        ;			pCurrent = eventProcess[index]->
                    process;
  5690                        L10082:
  5691                        	.line	1264
  5692 05:0F92: A5 19        	lda	<L137+index_1
  5693 05:0F94: 0A           	asl	A
  5694 05:0F95: 0A           	asl	A
  5695 05:0F96: 85 01        	sta	<R0
  5696 05:0F98: 18           	clc
  5697 05:0F99: A9 xx xx     	lda	#<~~eventProcess
  5698 05:0F9C: 65 01        	adc	<R0
  5699 05:0F9E: 85 05        	sta	<R1
  5700 05:0FA0: B2 05        	lda	(<R1)
  5701 05:0FA2: 85 01        	sta	<R0
  5702 05:0FA4: A0 02 00     	ldy	#$2
  5703 05:0FA7: B1 05        	lda	(<R1),Y
  5704 05:0FA9: 85 03        	sta	<R0+2
  5705 05:0FAB: A7 01        	lda	[<R0]
  5706 05:0FAD: 85 1E        	sta	<L137+pCurrent_1
  5707 05:0FAF: A0 02 00     	ldy	#$2
  5708 05:0FB2: B7 01        	lda	[<R0],Y
  5709 05:0FB4: 85 20        	sta	<L137+pCurrent_1+2
  5710                        ;
  5711                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_INIT)
  5712                        	.line	1266
  5713                        ;			{
  5714 05:0FB6: A5 19        	lda	<L137+index_1
  5715 05:0FB8: 0A           	asl	A
  5716 05:0FB9: 0A           	asl	A
  5717 05:0FBA: 85 01        	sta	<R0
  5718 05:0FBC: 18           	clc
  5719 05:0FBD: A9 xx xx     	lda	#<~~eventProcess
  5720 05:0FC0: 65 01        	adc	<R0
  5721 05:0FC2: 85 05        	sta	<R1
  5722 05:0FC4: B2 05        	lda	(<R1)
  5723 05:0FC6: 85 01        	sta	<R0
  5724 05:0FC8: A0 02 00     	ldy	#$2
  5725 05:0FCB: B1 05        	lda	(<R1),Y
  5726 05:0FCD: 85 03        	sta	<R0+2
  5727 05:0FCF: A7 01        	lda	[<R0]
  5728 05:0FD1: 85 05        	sta	<R1
  5729 05:0FD3: A0 02 00     	ldy	#$2
  5730 05:0FD6: B7 01        	lda	[<R0],Y
  5731 05:0FD8: 85 07        	sta	<R1+2
  5732 05:0FDA: A0 10 00     	ldy	#$10
  5733 05:0FDD: B7 05        	lda	[<R1],Y
  5734 05:0FDF: F0 03        	beq	L148
  5735 05:0FE1: 82 66 00     	brl	L10083
  5736                        L148:
  5737                        	.line	1267
  Sat Jul 10 2021  1:15                                                Page 116


  5738                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TO RUNNING:",eventProcess[index]->process->pro
                    cId);
  5739                        	.line	1268
  5740 05:0FE4: A5 19        	lda	<L137+index_1
  5741 05:0FE6: 0A           	asl	A
  5742 05:0FE7: 0A           	asl	A
  5743 05:0FE8: 85 01        	sta	<R0
  5744 05:0FEA: 18           	clc
  5745 05:0FEB: A9 xx xx     	lda	#<~~eventProcess
  5746 05:0FEE: 65 01        	adc	<R0
  5747 05:0FF0: 85 05        	sta	<R1
  5748 05:0FF2: B2 05        	lda	(<R1)
  5749 05:0FF4: 85 01        	sta	<R0
  5750 05:0FF6: A0 02 00     	ldy	#$2
  5751 05:0FF9: B1 05        	lda	(<R1),Y
  5752 05:0FFB: 85 03        	sta	<R0+2
  5753 05:0FFD: A7 01        	lda	[<R0]
  5754 05:0FFF: 85 05        	sta	<R1
  5755 05:1001: A0 02 00     	ldy	#$2
  5756 05:1004: B7 01        	lda	[<R0],Y
  5757 05:1006: 85 07        	sta	<R1+2
  5758 05:1008: A0 04 00     	ldy	#$4
  5759 05:100B: B7 05        	lda	[<R1],Y
  5760 05:100D: 48           	pha
  5761 05:100E: A0 02 00     	ldy	#$2
  5762 05:1011: B7 05        	lda	[<R1],Y
  5763 05:1013: 48           	pha
  5764 05:1014: F4 xx xx     	pea	#^L121+104
  5765 05:1017: F4 xx xx     	pea	#<L121+104
  5766 05:101A: 22 xx xx xx  	jsl	~~k_debug_long
  5767                        ;				eventProcess[index]->pro
                    cess->status = PROCESS_STATUS_RUNNING;
  5768                        	.line	1269
  5769 05:101E: A5 19        	lda	<L137+index_1
  5770 05:1020: 0A           	asl	A
  5771 05:1021: 0A           	asl	A
  5772 05:1022: 85 01        	sta	<R0
  5773 05:1024: 18           	clc
  5774 05:1025: A9 xx xx     	lda	#<~~eventProcess
  5775 05:1028: 65 01        	adc	<R0
  5776 05:102A: 85 05        	sta	<R1
  5777 05:102C: B2 05        	lda	(<R1)
  5778 05:102E: 85 01        	sta	<R0
  5779 05:1030: A0 02 00     	ldy	#$2
  5780 05:1033: B1 05        	lda	(<R1),Y
  5781 05:1035: 85 03        	sta	<R0+2
  5782 05:1037: A7 01        	lda	[<R0]
  5783 05:1039: 85 05        	sta	<R1
  5784 05:103B: A0 02 00     	ldy	#$2
  5785 05:103E: B7 01        	lda	[<R0],Y
  5786 05:1040: 85 07        	sta	<R1+2
  5787 05:1042: A9 01 00     	lda	#$1
  5788 05:1045: A0 10 00     	ldy	#$10
  5789 05:1048: 97 05        	sta	[<R1],Y
  5790                        ;			}
  5791                        	.line	1270
  5792                        ;
  Sat Jul 10 2021  1:15                                                Page 117


  5793                        ;			if(pMsg->dest!=FX_MSG_DEFAULT)
  5794                        L10083:
  5795                        	.line	1272
  5796                        ;			{
  5797 05:104A: A0 04 00     	ldy	#$4
  5798 05:104D: B7 25        	lda	[<L136+pMsg_0],Y
  5799 05:104F: C9 FF FF     	cmp	#<$ffffffff
  5800 05:1052: D0 08        	bne	L149
  5801 05:1054: A0 06 00     	ldy	#$6
  5802 05:1057: B7 25        	lda	[<L136+pMsg_0],Y
  5803 05:1059: C9 FF FF     	cmp	#^$ffffffff
  5804                        L149:
  5805 05:105C: D0 03        	bne	L150
  5806 05:105E: 82 2A 01     	brl	L10084
  5807                        L150:
  5808                        	.line	1273
  5809                        ;				if(eventProcess[index]->
                    eventProc && eventProcess[index]->process->procId == pMsg->d
                    est)
  5810                        	.line	1274
  5811                        ;				{
  5812 05:1061: A5 19        	lda	<L137+index_1
  5813 05:1063: 0A           	asl	A
  5814 05:1064: 0A           	asl	A
  5815 05:1065: 85 01        	sta	<R0
  5816 05:1067: 18           	clc
  5817 05:1068: A9 xx xx     	lda	#<~~eventProcess
  5818 05:106B: 65 01        	adc	<R0
  5819 05:106D: 85 05        	sta	<R1
  5820 05:106F: B2 05        	lda	(<R1)
  5821 05:1071: 85 01        	sta	<R0
  5822 05:1073: A0 02 00     	ldy	#$2
  5823 05:1076: B1 05        	lda	(<R1),Y
  5824 05:1078: 85 03        	sta	<R0+2
  5825 05:107A: A0 04 00     	ldy	#$4
  5826 05:107D: B7 01        	lda	[<R0],Y
  5827 05:107F: A0 06 00     	ldy	#$6
  5828 05:1082: 17 01        	ora	[<R0],Y
  5829 05:1084: D0 03        	bne	L151
  5830 05:1086: 82 FF 00     	brl	L10085
  5831                        L151:
  5832 05:1089: A5 19        	lda	<L137+index_1
  5833 05:108B: 0A           	asl	A
  5834 05:108C: 0A           	asl	A
  5835 05:108D: 85 01        	sta	<R0
  5836 05:108F: 18           	clc
  5837 05:1090: A9 xx xx     	lda	#<~~eventProcess
  5838 05:1093: 65 01        	adc	<R0
  5839 05:1095: 85 05        	sta	<R1
  5840 05:1097: B2 05        	lda	(<R1)
  5841 05:1099: 85 01        	sta	<R0
  5842 05:109B: A0 02 00     	ldy	#$2
  5843 05:109E: B1 05        	lda	(<R1),Y
  5844 05:10A0: 85 03        	sta	<R0+2
  5845 05:10A2: A7 01        	lda	[<R0]
  5846 05:10A4: 85 05        	sta	<R1
  5847 05:10A6: A0 02 00     	ldy	#$2
  5848 05:10A9: B7 01        	lda	[<R0],Y
  Sat Jul 10 2021  1:15                                                Page 118


  5849 05:10AB: 85 07        	sta	<R1+2
  5850 05:10AD: A0 02 00     	ldy	#$2
  5851 05:10B0: B7 05        	lda	[<R1],Y
  5852 05:10B2: A0 04 00     	ldy	#$4
  5853 05:10B5: D7 25        	cmp	[<L136+pMsg_0],Y
  5854 05:10B7: D0 0A        	bne	L152
  5855 05:10B9: A0 04 00     	ldy	#$4
  5856 05:10BC: B7 05        	lda	[<R1],Y
  5857 05:10BE: A0 06 00     	ldy	#$6
  5858 05:10C1: D7 25        	cmp	[<L136+pMsg_0],Y
  5859                        L152:
  5860 05:10C3: F0 03        	beq	L153
  5861 05:10C5: 82 C0 00     	brl	L10085
  5862                        L153:
  5863                        	.line	1275
  5864                        ;					k_debug_long("**
                    Process Specific Message:PROCID:",eventProcess[index]->proce
                    ss->procId);
  5865                        	.line	1276
  5866 05:10C8: A5 19        	lda	<L137+index_1
  5867 05:10CA: 0A           	asl	A
  5868 05:10CB: 0A           	asl	A
  5869 05:10CC: 85 01        	sta	<R0
  5870 05:10CE: 18           	clc
  5871 05:10CF: A9 xx xx     	lda	#<~~eventProcess
  5872 05:10D2: 65 01        	adc	<R0
  5873 05:10D4: 85 05        	sta	<R1
  5874 05:10D6: B2 05        	lda	(<R1)
  5875 05:10D8: 85 01        	sta	<R0
  5876 05:10DA: A0 02 00     	ldy	#$2
  5877 05:10DD: B1 05        	lda	(<R1),Y
  5878 05:10DF: 85 03        	sta	<R0+2
  5879 05:10E1: A7 01        	lda	[<R0]
  5880 05:10E3: 85 05        	sta	<R1
  5881 05:10E5: A0 02 00     	ldy	#$2
  5882 05:10E8: B7 01        	lda	[<R0],Y
  5883 05:10EA: 85 07        	sta	<R1+2
  5884 05:10EC: A0 04 00     	ldy	#$4
  5885 05:10EF: B7 05        	lda	[<R1],Y
  5886 05:10F1: 48           	pha
  5887 05:10F2: A0 02 00     	ldy	#$2
  5888 05:10F5: B7 05        	lda	[<R1],Y
  5889 05:10F7: 48           	pha
  5890 05:10F8: F4 xx xx     	pea	#^L121+140
  5891 05:10FB: F4 xx xx     	pea	#<L121+140
  5892 05:10FE: 22 xx xx xx  	jsl	~~k_debug_long
  5893                        ;					k_debug_long("**
                    Process Specific Message:TYPE:",pMsg->type);
  5894                        	.line	1277
  5895 05:1102: A0 08 00     	ldy	#$8
  5896 05:1105: B7 25        	lda	[<L136+pMsg_0],Y
  5897 05:1107: 85 01        	sta	<R0
  5898 05:1109: 64 03        	stz	<R0+2
  5899 05:110B: D4 03        	pei	<R0+2
  5900 05:110D: D4 01        	pei	<R0
  5901 05:110F: F4 xx xx     	pea	#^L121+175
  5902 05:1112: F4 xx xx     	pea	#<L121+175
  5903 05:1115: 22 xx xx xx  	jsl	~~k_debug_long
  Sat Jul 10 2021  1:15                                                Page 119


  5904                        ;					k_debug_integer(
                    "**Process Specific Message:index:",index);
  5905                        	.line	1278
  5906 05:1119: D4 19        	pei	<L137+index_1
  5907 05:111B: F4 xx xx     	pea	#^L121+208
  5908 05:111E: F4 xx xx     	pea	#<L121+208
  5909 05:1121: 22 xx xx xx  	jsl	~~k_debug_integer
  5910                        ;					if(eventProcess[
                    index]->eventProc)
  5911                        	.line	1279
  5912                        ;					{
  5913 05:1125: A5 19        	lda	<L137+index_1
  5914 05:1127: 0A           	asl	A
  5915 05:1128: 0A           	asl	A
  5916 05:1129: 85 01        	sta	<R0
  5917 05:112B: 18           	clc
  5918 05:112C: A9 xx xx     	lda	#<~~eventProcess
  5919 05:112F: 65 01        	adc	<R0
  5920 05:1131: 85 05        	sta	<R1
  5921 05:1133: B2 05        	lda	(<R1)
  5922 05:1135: 85 01        	sta	<R0
  5923 05:1137: A0 02 00     	ldy	#$2
  5924 05:113A: B1 05        	lda	(<R1),Y
  5925 05:113C: 85 03        	sta	<R0+2
  5926 05:113E: A0 04 00     	ldy	#$4
  5927 05:1141: B7 01        	lda	[<R0],Y
  5928 05:1143: A0 06 00     	ldy	#$6
  5929 05:1146: 17 01        	ora	[<R0],Y
  5930 05:1148: D0 03        	bne	L154
  5931 05:114A: 82 2F 00     	brl	L10086
  5932                        L154:
  5933                        	.line	1280
  5934                        ;						eventPro
                    cess[index]->eventProc(pMsg);
  5935                        	.line	1281
  5936 05:114D: D4 27        	pei	<L136+pMsg_0+2
  5937 05:114F: D4 25        	pei	<L136+pMsg_0
  5938 05:1151: A5 19        	lda	<L137+index_1
  5939 05:1153: 0A           	asl	A
  5940 05:1154: 0A           	asl	A
  5941 05:1155: 85 01        	sta	<R0
  5942 05:1157: 18           	clc
  5943 05:1158: A9 xx xx     	lda	#<~~eventProcess
  5944 05:115B: 65 01        	adc	<R0
  5945 05:115D: 85 05        	sta	<R1
  5946 05:115F: B2 05        	lda	(<R1)
  5947 05:1161: 85 01        	sta	<R0
  5948 05:1163: A0 02 00     	ldy	#$2
  5949 05:1166: B1 05        	lda	(<R1),Y
  5950 05:1168: 85 03        	sta	<R0+2
  5951 05:116A: A0 06 00     	ldy	#$6
  5952 05:116D: B7 01        	lda	[<R0],Y
  5953 05:116F: AA           	tax
  5954 05:1170: A0 04 00     	ldy	#$4
  5955 05:1173: B7 01        	lda	[<R0],Y
  5956                        	xref	~~~lcal
  5957 05:1175: 22 xx xx xx  	jsl	~~~lcal
  5958                        ;					}
  Sat Jul 10 2021  1:15                                                Page 120


  5959                        	.line	1282
  5960                        ;					else
  5961 05:1179: 82 0C 00     	brl	L10087
  5962                        L10086:
  5963                        ;					{
  5964                        	.line	1284
  5965                        ;						k_debug_
                    integer("**Process Specific Message:BAD PROC:",index);
  5966                        	.line	1285
  5967 05:117C: D4 19        	pei	<L137+index_1
  5968 05:117E: F4 xx xx     	pea	#^L121+242
  5969 05:1181: F4 xx xx     	pea	#<L121+242
  5970 05:1184: 22 xx xx xx  	jsl	~~k_debug_integer
  5971                        ;					}
  5972                        	.line	1286
  5973                        L10087:
  5974                        ;				}
  5975                        	.line	1287
  5976                        ;
  5977                        ;			}
  5978                        L10085:
  5979                        	.line	1289
  5980                        ;			else
  5981 05:1188: 82 46 02     	brl	L10088
  5982                        L10084:
  5983                        ;			{
  5984                        	.line	1291
  5985                        ;				if(pMsg->type == FX_PROC
                    ESS_TIMER)
  5986                        	.line	1292
  5987                        ;				{
  5988 05:118B: A0 08 00     	ldy	#$8
  5989 05:118E: B7 25        	lda	[<L136+pMsg_0],Y
  5990 05:1190: C9 F1 FF     	cmp	#<$fff1
  5991 05:1193: F0 03        	beq	L155
  5992 05:1195: 82 87 01     	brl	L10089
  5993                        L155:
  5994                        	.line	1293
  5995                        ;					//k_debug_string
                    ("** FX_PROCESS_TIMER DETECTED\r\n");
  5996                        ;					if(pCurrent && p
                    Current->timerAware )
  5997                        	.line	1295
  5998                        ;					{
  5999 05:1198: A5 1E        	lda	<L137+pCurrent_1
  6000 05:119A: 05 20        	ora	<L137+pCurrent_1+2
  6001 05:119C: D0 03        	bne	L156
  6002 05:119E: 82 7E 01     	brl	L10090
  6003                        L156:
  6004 05:11A1: A0 47 00     	ldy	#$47
  6005 05:11A4: B7 1E        	lda	[<L137+pCurrent_1],Y
  6006 05:11A6: 29 FF 00     	and	#$ff
  6007 05:11A9: D0 03        	bne	L157
  6008 05:11AB: 82 71 01     	brl	L10090
  6009                        L157:
  6010                        	.line	1296
  6011                        ;						//k_debu
                    g_string("** FX_PROCESS_TIMER DETECTED\r\n");
  Sat Jul 10 2021  1:15                                                Page 121


  6012                        ;						for(tc=0
                    ;tc<2;tc++)
  6013                        	.line	1298
  6014 05:11AE: 64 1B        	stz	<L137+tc_1
  6015                        L10093:
  6016                        ;						{
  6017                        	.line	1299
  6018                        ;							
                    if(pCurrent->timerTicks[tc])
  6019                        	.line	1300
  6020                        ;							
                    {
  6021 05:11B0: A0 00 00     	ldy	#$0
  6022 05:11B3: A5 1B        	lda	<L137+tc_1
  6023 05:11B5: 10 01        	bpl	L158
  6024 05:11B7: 88           	dey
  6025                        L158:
  6026 05:11B8: 85 05        	sta	<R1
  6027 05:11BA: 84 07        	sty	<R1+2
  6028 05:11BC: D4 07        	pei	<R1+2
  6029 05:11BE: D4 05        	pei	<R1
  6030 05:11C0: A9 01 00     	lda	#$1
  6031                        	xref	~~~lasl
  6032 05:11C3: 22 xx xx xx  	jsl	~~~lasl
  6033 05:11C7: 85 01        	sta	<R0
  6034 05:11C9: 86 03        	stx	<R0+2
  6035 05:11CB: 18           	clc
  6036 05:11CC: A9 48 00     	lda	#$48
  6037 05:11CF: 65 1E        	adc	<L137+pCurrent_1
  6038 05:11D1: 85 09        	sta	<R2
  6039 05:11D3: A9 00 00     	lda	#$0
  6040 05:11D6: 65 20        	adc	<L137+pCurrent_1+2
  6041 05:11D8: 85 0B        	sta	<R2+2
  6042 05:11DA: 18           	clc
  6043 05:11DB: A5 09        	lda	<R2
  6044 05:11DD: 65 01        	adc	<R0
  6045 05:11DF: 85 0D        	sta	<R3
  6046 05:11E1: A5 0B        	lda	<R2+2
  6047 05:11E3: 65 03        	adc	<R0+2
  6048 05:11E5: 85 0F        	sta	<R3+2
  6049 05:11E7: A7 0D        	lda	[<R3]
  6050 05:11E9: D0 03        	bne	L159
  6051 05:11EB: 82 24 01     	brl	L10094
  6052                        L159:
  6053                        	.line	1301
  6054                        ;							
                    	//k_debug_long   ("** FX_PROCESS_TIMER DETECTED:",pCurre
                    nt->procId);
  6055                        ;							
                    	//k_debug_integer("                       INDEX:",tc);
  6056                        ;							
                    	//k_debug_long   ("                       COUNT:",pCurre
                    nt->timerTickCount[tc]);
  6057                        ;							
                    	pCurrent->timerTickCount[tc]--;
  6058                        	.line	1305
  6059 05:11EE: A0 00 00     	ldy	#$0
  6060 05:11F1: A5 1B        	lda	<L137+tc_1
  Sat Jul 10 2021  1:15                                                Page 122


  6061 05:11F3: 10 01        	bpl	L160
  6062 05:11F5: 88           	dey
  6063                        L160:
  6064 05:11F6: 85 05        	sta	<R1
  6065 05:11F8: 84 07        	sty	<R1+2
  6066 05:11FA: D4 07        	pei	<R1+2
  6067 05:11FC: D4 05        	pei	<R1
  6068 05:11FE: A9 01 00     	lda	#$1
  6069                        	xref	~~~lasl
  6070 05:1201: 22 xx xx xx  	jsl	~~~lasl
  6071 05:1205: 85 01        	sta	<R0
  6072 05:1207: 86 03        	stx	<R0+2
  6073 05:1209: 18           	clc
  6074 05:120A: A9 4C 00     	lda	#$4c
  6075 05:120D: 65 1E        	adc	<L137+pCurrent_1
  6076 05:120F: 85 09        	sta	<R2
  6077 05:1211: A9 00 00     	lda	#$0
  6078 05:1214: 65 20        	adc	<L137+pCurrent_1+2
  6079 05:1216: 85 0B        	sta	<R2+2
  6080 05:1218: 18           	clc
  6081 05:1219: A5 09        	lda	<R2
  6082 05:121B: 65 01        	adc	<R0
  6083 05:121D: 85 0D        	sta	<R3
  6084 05:121F: A5 0B        	lda	<R2+2
  6085 05:1221: 65 03        	adc	<R0+2
  6086 05:1223: 85 0F        	sta	<R3+2
  6087 05:1225: 18           	clc
  6088 05:1226: A9 FF FF     	lda	#$ffff
  6089 05:1229: 67 0D        	adc	[<R3]
  6090 05:122B: 87 0D        	sta	[<R3]
  6091                        ;							
                    	if(pCurrent->timerTickCount[tc] == 0)
  6092                        	.line	1306
  6093                        ;							
                    	{
  6094 05:122D: A0 00 00     	ldy	#$0
  6095 05:1230: A5 1B        	lda	<L137+tc_1
  6096 05:1232: 10 01        	bpl	L161
  6097 05:1234: 88           	dey
  6098                        L161:
  6099 05:1235: 85 05        	sta	<R1
  6100 05:1237: 84 07        	sty	<R1+2
  6101 05:1239: D4 07        	pei	<R1+2
  6102 05:123B: D4 05        	pei	<R1
  6103 05:123D: A9 01 00     	lda	#$1
  6104                        	xref	~~~lasl
  6105 05:1240: 22 xx xx xx  	jsl	~~~lasl
  6106 05:1244: 85 01        	sta	<R0
  6107 05:1246: 86 03        	stx	<R0+2
  6108 05:1248: 18           	clc
  6109 05:1249: A9 4C 00     	lda	#$4c
  6110 05:124C: 65 1E        	adc	<L137+pCurrent_1
  6111 05:124E: 85 09        	sta	<R2
  6112 05:1250: A9 00 00     	lda	#$0
  6113 05:1253: 65 20        	adc	<L137+pCurrent_1+2
  6114 05:1255: 85 0B        	sta	<R2+2
  6115 05:1257: 18           	clc
  6116 05:1258: A5 09        	lda	<R2
  Sat Jul 10 2021  1:15                                                Page 123


  6117 05:125A: 65 01        	adc	<R0
  6118 05:125C: 85 0D        	sta	<R3
  6119 05:125E: A5 0B        	lda	<R2+2
  6120 05:1260: 65 03        	adc	<R0+2
  6121 05:1262: 85 0F        	sta	<R3+2
  6122 05:1264: A7 0D        	lda	[<R3]
  6123 05:1266: F0 03        	beq	L162
  6124 05:1268: 82 A7 00     	brl	L10095
  6125                        L162:
  6126                        	.line	1307
  6127                        ;							
                    		//k_debug_long("** FX_PROCESS_TIMER SENT:",pCurr
                    ent->procId);
  6128                        ;							
                    		pCurrent->timerTickCount[tc] = pCurrent->timerTi
                    cks[tc];
  6129                        	.line	1309
  6130 05:126B: A0 00 00     	ldy	#$0
  6131 05:126E: A5 1B        	lda	<L137+tc_1
  6132 05:1270: 10 01        	bpl	L163
  6133 05:1272: 88           	dey
  6134                        L163:
  6135 05:1273: 85 05        	sta	<R1
  6136 05:1275: 84 07        	sty	<R1+2
  6137 05:1277: D4 07        	pei	<R1+2
  6138 05:1279: D4 05        	pei	<R1
  6139 05:127B: A9 01 00     	lda	#$1
  6140                        	xref	~~~lasl
  6141 05:127E: 22 xx xx xx  	jsl	~~~lasl
  6142 05:1282: 85 01        	sta	<R0
  6143 05:1284: 86 03        	stx	<R0+2
  6144 05:1286: 18           	clc
  6145 05:1287: A9 4C 00     	lda	#$4c
  6146 05:128A: 65 1E        	adc	<L137+pCurrent_1
  6147 05:128C: 85 09        	sta	<R2
  6148 05:128E: A9 00 00     	lda	#$0
  6149 05:1291: 65 20        	adc	<L137+pCurrent_1+2
  6150 05:1293: 85 0B        	sta	<R2+2
  6151 05:1295: 18           	clc
  6152 05:1296: A5 09        	lda	<R2
  6153 05:1298: 65 01        	adc	<R0
  6154 05:129A: 85 0D        	sta	<R3
  6155 05:129C: A5 0B        	lda	<R2+2
  6156 05:129E: 65 03        	adc	<R0+2
  6157 05:12A0: 85 0F        	sta	<R3+2
  6158 05:12A2: A0 00 00     	ldy	#$0
  6159 05:12A5: A5 1B        	lda	<L137+tc_1
  6160 05:12A7: 10 01        	bpl	L164
  6161 05:12A9: 88           	dey
  6162                        L164:
  6163 05:12AA: 85 09        	sta	<R2
  6164 05:12AC: 84 0B        	sty	<R2+2
  6165 05:12AE: D4 0B        	pei	<R2+2
  6166 05:12B0: D4 09        	pei	<R2
  6167 05:12B2: A9 01 00     	lda	#$1
  6168                        	xref	~~~lasl
  6169 05:12B5: 22 xx xx xx  	jsl	~~~lasl
  6170 05:12B9: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 124


  6171 05:12BB: 86 03        	stx	<R0+2
  6172 05:12BD: 18           	clc
  6173 05:12BE: A9 48 00     	lda	#$48
  6174 05:12C1: 65 1E        	adc	<L137+pCurrent_1
  6175 05:12C3: 85 11        	sta	<17
  6176 05:12C5: A9 00 00     	lda	#$0
  6177 05:12C8: 65 20        	adc	<L137+pCurrent_1+2
  6178 05:12CA: 85 13        	sta	<17+2
  6179 05:12CC: 18           	clc
  6180 05:12CD: A5 11        	lda	<17
  6181 05:12CF: 65 01        	adc	<R0
  6182 05:12D1: 85 15        	sta	<21
  6183 05:12D3: A5 13        	lda	<17+2
  6184 05:12D5: 65 03        	adc	<R0+2
  6185 05:12D7: 85 17        	sta	<21+2
  6186 05:12D9: A7 15        	lda	[<21]
  6187 05:12DB: 87 0D        	sta	[<R3]
  6188                        ;							
                    		//pMsg->hwnd = BROADCAST_HWND;
  6189                        ;							
                    		pMsg->hwnd = k_user_getFocusWindow();
  6190                        	.line	1311
  6191 05:12DD: 22 xx xx xx  	jsl	~~k_user_getFocusWindow
  6192 05:12E1: 85 01        	sta	<R0
  6193 05:12E3: 86 03        	stx	<R0+2
  6194 05:12E5: A5 01        	lda	<R0
  6195 05:12E7: A0 0A 00     	ldy	#$a
  6196 05:12EA: 97 25        	sta	[<L136+pMsg_0],Y
  6197 05:12EC: A5 03        	lda	<R0+2
  6198 05:12EE: A0 0C 00     	ldy	#$c
  6199 05:12F1: 97 25        	sta	[<L136+pMsg_0],Y
  6200                        ;							
                    		if(!pMsg->hwnd)
  6201                        	.line	1312
  6202                        ;							
                    			pMsg->hwnd = BROADCAST_HWND;
  6203 05:12F3: A0 0A 00     	ldy	#$a
  6204 05:12F6: B7 25        	lda	[<L136+pMsg_0],Y
  6205 05:12F8: A0 0C 00     	ldy	#$c
  6206 05:12FB: 17 25        	ora	[<L136+pMsg_0],Y
  6207 05:12FD: F0 03        	beq	L165
  6208 05:12FF: 82 10 00     	brl	L10096
  6209                        L165:
  6210                        	.line	1313
  6211 05:1302: A9 FA FF     	lda	#$fffa
  6212 05:1305: A0 0A 00     	ldy	#$a
  6213 05:1308: 97 25        	sta	[<L136+pMsg_0],Y
  6214 05:130A: A9 FA FF     	lda	#$fffa
  6215 05:130D: A0 0C 00     	ldy	#$c
  6216 05:1310: 97 25        	sta	[<L136+pMsg_0],Y
  6217                        ;							
                    	}
  6218                        L10096:
  6219                        	.line	1314
  6220                        ;							
                    }
  6221                        L10095:
  6222                        	.line	1315
  Sat Jul 10 2021  1:15                                                Page 125


  6223                        ;						}
  6224                        L10094:
  6225                        	.line	1316
  6226                        L10091:
  6227 05:1312: E6 1B        	inc	<L137+tc_1
  6228 05:1314: A5 1B        	lda	<L137+tc_1
  6229 05:1316: 30 04        	bmi	L166
  6230 05:1318: 3A           	dea
  6231 05:1319: 3A           	dea
  6232 05:131A: 10 03        	bpl	L167
  6233                        L166:
  6234 05:131C: 82 91 FE     	brl	L10093
  6235                        L167:
  6236                        L10092:
  6237                        ;					}
  6238                        	.line	1317
  6239                        ;
  6240                        ;				}
  6241                        L10090:
  6242                        	.line	1319
  6243                        ;
  6244                        ;				if(pMsg->hwnd)
  6245                        L10089:
  6246                        	.line	1321
  6247                        ;				{
  6248 05:131F: A0 0A 00     	ldy	#$a
  6249 05:1322: B7 25        	lda	[<L136+pMsg_0],Y
  6250 05:1324: A0 0C 00     	ldy	#$c
  6251 05:1327: 17 25        	ora	[<L136+pMsg_0],Y
  6252 05:1329: D0 03        	bne	L168
  6253 05:132B: 82 4F 00     	brl	L10097
  6254                        L168:
  6255                        	.line	1322
  6256                        ;					if(pMsg->type ==
                     FX_LBUTTON_DOWN)
  6257                        	.line	1323
  6258                        ;						k_debug_
                    pointer("pMsg:FX_LBUTTON_DOWN:hWnd:",pMsg->hwnd);
  6259 05:132E: A0 08 00     	ldy	#$8
  6260 05:1331: B7 25        	lda	[<L136+pMsg_0],Y
  6261 05:1333: C9 04 0F     	cmp	#<$f04
  6262 05:1336: F0 03        	beq	L169
  6263 05:1338: 82 16 00     	brl	L10098
  6264                        L169:
  6265                        	.line	1324
  6266 05:133B: A0 0C 00     	ldy	#$c
  6267 05:133E: B7 25        	lda	[<L136+pMsg_0],Y
  6268 05:1340: 48           	pha
  6269 05:1341: A0 0A 00     	ldy	#$a
  6270 05:1344: B7 25        	lda	[<L136+pMsg_0],Y
  6271 05:1346: 48           	pha
  6272 05:1347: F4 xx xx     	pea	#^L121+279
  6273 05:134A: F4 xx xx     	pea	#<L121+279
  6274 05:134D: 22 xx xx xx  	jsl	~~k_debug_pointer
  6275                        ;
  6276                        ;					_k_currentWndMan
                    ager->DoWndProcs(k_exec_get_current_process(),pMsg,isForegro
                    und);
  Sat Jul 10 2021  1:15                                                Page 126


  6277                        L10098:
  6278                        	.line	1326
  6279 05:1351: D4 1D        	pei	<L137+isForeground_1
  6280 05:1353: D4 27        	pei	<L136+pMsg_0+2
  6281 05:1355: D4 25        	pei	<L136+pMsg_0
  6282 05:1357: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  6283 05:135B: 85 01        	sta	<R0
  6284 05:135D: 86 03        	stx	<R0+2
  6285 05:135F: DA           	phx
  6286 05:1360: 48           	pha
  6287 05:1361: AD xx xx     	lda	|~~_k_currentWndManager
  6288 05:1364: 85 05        	sta	<R1
  6289 05:1366: AD xx xx     	lda	|~~_k_currentWndManager+2
  6290 05:1369: 85 07        	sta	<R1+2
  6291 05:136B: A0 12 00     	ldy	#$12
  6292 05:136E: B7 05        	lda	[<R1],Y
  6293 05:1370: AA           	tax
  6294 05:1371: A0 10 00     	ldy	#$10
  6295 05:1374: B7 05        	lda	[<R1],Y
  6296                        	xref	~~~lcal
  6297 05:1376: 22 xx xx xx  	jsl	~~~lcal
  6298                        ;				}
  6299                        	.line	1327
  6300                        ;				else
  6301 05:137A: 82 54 00     	brl	L10099
  6302                        L10097:
  6303                        ;				{
  6304                        	.line	1329
  6305                        ;					if(eventProcess[
                    index]->eventProc)
  6306                        	.line	1330
  6307                        ;						eventPro
                    cess[index]->eventProc(pMsg);
  6308 05:137D: A5 19        	lda	<L137+index_1
  6309 05:137F: 0A           	asl	A
  6310 05:1380: 0A           	asl	A
  6311 05:1381: 85 01        	sta	<R0
  6312 05:1383: 18           	clc
  6313 05:1384: A9 xx xx     	lda	#<~~eventProcess
  6314 05:1387: 65 01        	adc	<R0
  6315 05:1389: 85 05        	sta	<R1
  6316 05:138B: B2 05        	lda	(<R1)
  6317 05:138D: 85 01        	sta	<R0
  6318 05:138F: A0 02 00     	ldy	#$2
  6319 05:1392: B1 05        	lda	(<R1),Y
  6320 05:1394: 85 03        	sta	<R0+2
  6321 05:1396: A0 04 00     	ldy	#$4
  6322 05:1399: B7 01        	lda	[<R0],Y
  6323 05:139B: A0 06 00     	ldy	#$6
  6324 05:139E: 17 01        	ora	[<R0],Y
  6325 05:13A0: D0 03        	bne	L170
  6326 05:13A2: 82 2C 00     	brl	L10100
  6327                        L170:
  6328                        	.line	1331
  6329 05:13A5: D4 27        	pei	<L136+pMsg_0+2
  6330 05:13A7: D4 25        	pei	<L136+pMsg_0
  6331 05:13A9: A5 19        	lda	<L137+index_1
  6332 05:13AB: 0A           	asl	A
  Sat Jul 10 2021  1:15                                                Page 127


  6333 05:13AC: 0A           	asl	A
  6334 05:13AD: 85 01        	sta	<R0
  6335 05:13AF: 18           	clc
  6336 05:13B0: A9 xx xx     	lda	#<~~eventProcess
  6337 05:13B3: 65 01        	adc	<R0
  6338 05:13B5: 85 05        	sta	<R1
  6339 05:13B7: B2 05        	lda	(<R1)
  6340 05:13B9: 85 01        	sta	<R0
  6341 05:13BB: A0 02 00     	ldy	#$2
  6342 05:13BE: B1 05        	lda	(<R1),Y
  6343 05:13C0: 85 03        	sta	<R0+2
  6344 05:13C2: A0 06 00     	ldy	#$6
  6345 05:13C5: B7 01        	lda	[<R0],Y
  6346 05:13C7: AA           	tax
  6347 05:13C8: A0 04 00     	ldy	#$4
  6348 05:13CB: B7 01        	lda	[<R0],Y
  6349                        	xref	~~~lcal
  6350 05:13CD: 22 xx xx xx  	jsl	~~~lcal
  6351                        ;				}
  6352                        L10100:
  6353                        	.line	1332
  6354                        L10099:
  6355                        ;
  6356                        ;			}
  6357                        	.line	1334
  6358                        L10088:
  6359                        ;
  6360                        ;			k_exec_set_current_process(NULL)
                    ;
  6361                        	.line	1336
  6362 05:13D1: F4 00 00     	pea	#^$0
  6363 05:13D4: F4 00 00     	pea	#<$0
  6364 05:13D7: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  6365                        ;		}
  6366                        	.line	1337
  6367                        ;	}
  6368                        L10078:
  6369                        	.line	1338
  6370                        L10075:
  6371 05:13DB: E6 19        	inc	<L137+index_1
  6372 05:13DD: 38           	sec
  6373 05:13DE: A5 19        	lda	<L137+index_1
  6374 05:13E0: E9 00 01     	sbc	#<$100
  6375 05:13E3: 70 03        	bvs	L171
  6376 05:13E5: 49 00 80     	eor	#$8000
  6377                        L171:
  6378 05:13E8: 30 03        	bmi	L172
  6379 05:13EA: 82 B7 F9     	brl	L10077
  6380                        L172:
  6381                        L10076:
  6382                        ;}
  6383                        	.line	1339
  6384                        L173:
  6385 05:13ED: A5 23        	lda	<L136+2
  6386 05:13EF: 85 27        	sta	<L136+2+4
  6387 05:13F1: A5 22        	lda	<L136+1
  6388 05:13F3: 85 26        	sta	<L136+1+4
  6389 05:13F5: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 128


  6390 05:13F6: 3B           	tsc
  6391 05:13F7: 18           	clc
  6392 05:13F8: 69 25 00     	adc	#L136+4
  6393 05:13FB: 1B           	tcs
  6394 05:13FC: 6B           	rtl
  6395                        	.endblock	1339
  6396             00000021   L136	equ	33
  6397             00000019   L137	equ	25
  6398 05:13FD:              	ends
  6399                        	efunc
  6400                        	.endfunc	1339,25,33
  6401                        	.line	1339
  6402                        	data
  6403                        L121:
  6404 00:0567: 6B 5F 64 6F  	db	$6B,$5F,$64,$6F,$5F,$70,$72,$6F,$63,$65,
                    $73,$73,$65,$73,$3A
       00:056B: 5F 70 72 6F 
       00:056F: 63 65 73 73 
       00:0573: 65 73 3A 
  6405 00:0576: 46 58 5F 50  	db	$46,$58,$5F,$50,$52,$4F,$43,$45,$53,$53,
                    $5F,$53,$44,$43,$41
       00:057A: 52 4F 43 45 
       00:057E: 53 53 5F 53 
       00:0582: 44 43 41 
  6406 00:0585: 52 44 3A 00  	db	$52,$44,$3A,$00,$6B,$5F,$64,$6F,$5F,$70,
                    $72,$6F,$63,$65,$73
       00:0589: 6B 5F 64 6F 
       00:058D: 5F 70 72 6F 
       00:0591: 63 65 73 
  6407 00:0594: 73 65 73 3A  	db	$73,$65,$73,$3A,$3A,$50,$52,$4F,$43,$45,
                    $53,$53,$20,$57,$41
       00:0598: 3A 50 52 4F 
       00:059C: 43 45 53 53 
       00:05A0: 20 57 41 
  6408 00:05A3: 49 54 49 4E  	db	$49,$54,$49,$4E,$47,$3A,$00,$6B,$5F,$64,
                    $6F,$5F,$70,$72,$6F
       00:05A7: 47 3A 00 6B 
       00:05AB: 5F 64 6F 5F 
       00:05AF: 70 72 6F 
  6409 00:05B2: 63 65 73 73  	db	$63,$65,$73,$73,$65,$73,$3A,$3A,$50,$52,
                    $4F,$43,$45,$53,$53
       00:05B6: 65 73 3A 3A 
       00:05BA: 50 52 4F 43 
       00:05BE: 45 53 53 
  6410 00:05C1: 20 54 45 52  	db	$20,$54,$45,$52,$4D,$49,$4E,$41,$54,$49,
                    $4E,$47,$3A,$00,$6B
       00:05C5: 4D 49 4E 41 
       00:05C9: 54 49 4E 47 
       00:05CD: 3A 00 6B 
  6411 00:05D0: 5F 64 6F 5F  	db	$5F,$64,$6F,$5F,$70,$72,$6F,$63,$65,$73,
                    $73,$65,$73,$3A,$3A
       00:05D4: 70 72 6F 63 
       00:05D8: 65 73 73 65 
       00:05DC: 73 3A 3A 
  6412 00:05DF: 50 52 4F 43  	db	$50,$52,$4F,$43,$45,$53,$53,$20,$54,$4F,
                    $20,$52,$55,$4E,$4E
       00:05E3: 45 53 53 20 
       00:05E7: 54 4F 20 52 
  Sat Jul 10 2021  1:15                                                Page 129


       00:05EB: 55 4E 4E 
  6413 00:05EE: 49 4E 47 3A  	db	$49,$4E,$47,$3A,$00,$2A,$2A,$50,$72,$6F,
                    $63,$65,$73,$73,$20
       00:05F2: 00 2A 2A 50 
       00:05F6: 72 6F 63 65 
       00:05FA: 73 73 20 
  6414 00:05FD: 53 70 65 63  	db	$53,$70,$65,$63,$69,$66,$69,$63,$20,$4D,
                    $65,$73,$73,$61,$67
       00:0601: 69 66 69 63 
       00:0605: 20 4D 65 73 
       00:0609: 73 61 67 
  6415 00:060C: 65 3A 50 52  	db	$65,$3A,$50,$52,$4F,$43,$49,$44,$3A,$00,
                    $2A,$2A,$50,$72,$6F
       00:0610: 4F 43 49 44 
       00:0614: 3A 00 2A 2A 
       00:0618: 50 72 6F 
  6416 00:061B: 63 65 73 73  	db	$63,$65,$73,$73,$20,$53,$70,$65,$63,$69,
                    $66,$69,$63,$20,$4D
       00:061F: 20 53 70 65 
       00:0623: 63 69 66 69 
       00:0627: 63 20 4D 
  6417 00:062A: 65 73 73 61  	db	$65,$73,$73,$61,$67,$65,$3A,$54,$59,$50,
                    $45,$3A,$00,$2A,$2A
       00:062E: 67 65 3A 54 
       00:0632: 59 50 45 3A 
       00:0636: 00 2A 2A 
  6418 00:0639: 50 72 6F 63  	db	$50,$72,$6F,$63,$65,$73,$73,$20,$53,$70,
                    $65,$63,$69,$66,$69
       00:063D: 65 73 73 20 
       00:0641: 53 70 65 63 
       00:0645: 69 66 69 
  6419 00:0648: 63 20 4D 65  	db	$63,$20,$4D,$65,$73,$73,$61,$67,$65,$3A,
                    $69,$6E,$64,$65,$78
       00:064C: 73 73 61 67 
       00:0650: 65 3A 69 6E 
       00:0654: 64 65 78 
  6420 00:0657: 3A 00 2A 2A  	db	$3A,$00,$2A,$2A,$50,$72,$6F,$63,$65,$73,
                    $73,$20,$53,$70,$65
       00:065B: 50 72 6F 63 
       00:065F: 65 73 73 20 
       00:0663: 53 70 65 
  6421 00:0666: 63 69 66 69  	db	$63,$69,$66,$69,$63,$20,$4D,$65,$73,$73,
                    $61,$67,$65,$3A,$42
       00:066A: 63 20 4D 65 
       00:066E: 73 73 61 67 
       00:0672: 65 3A 42 
  6422 00:0675: 41 44 20 50  	db	$41,$44,$20,$50,$52,$4F,$43,$3A,$00,$70,
                    $4D,$73,$67,$3A,$46
       00:0679: 52 4F 43 3A 
       00:067D: 00 70 4D 73 
       00:0681: 67 3A 46 
  6423 00:0684: 58 5F 4C 42  	db	$58,$5F,$4C,$42,$55,$54,$54,$4F,$4E,$5F,
                    $44,$4F,$57,$4E,$3A
       00:0688: 55 54 54 4F 
       00:068C: 4E 5F 44 4F 
       00:0690: 57 4E 3A 
  6424 00:0693: 68 57 6E 64  	db	$68,$57,$6E,$64,$3A,$00
       00:0697: 3A 00 
  Sat Jul 10 2021  1:15                                                Page 130


  6425 00:0699:              	ends
  6426                        ;
  6427                        ;/*
  6428                        ;void k_main_loop(PFXENVIRONMENT pEnv)
  6429                        ;{
  6430                        ;	int bExit = 0;
  6431                        ;	int mb = 0;
  6432                        ;	int mx = 0;
  6433                        ;
  6434                        ;	int my = 0;
  6435                        ;	int lk = 0;
  6436                        ;
  6437                        ;
  6438                        ;
  6439                        ;	FXOSMESSAGE msg;
  6440                        ;
  6441                        ;	k_debug_string("********************************
                    **\r\n");
  6442                        ;	k_debug_string("******     k_main_loop  3  *****
                    **\r\n");
  6443                        ;	k_debug_string("********************************
                    **\r\n");
  6444                        ;
  6445                        ;	//asm cli;
  6446                        ;
  6447                        ;	k_debug_string("k_main_loop:CLI\r\n");
  6448                        ;
  6449                        ;	eventProcs[IDLE_PROC] = IdleProc;
  6450                        ;
  6451                        ;	while(!bExit)
  6452                        ;	{
  6453                        ;		mb = 0;
  6454                        ;		//k_debug_string("k_main_loop:WAI\r\n");
  6455                        ;		//asm WAI;
  6456                        ;
  6457                        ;		//asm sei;
  6458                        ;		disable();
  6459                        ;		mb = (FXOS_MOUSE_BYTE_0 & 0x07);
  6460                        ;		mx = k_get_mouse_pos_X();
  6461                        ;		my = k_get_mouse_pos_Y();
  6462                        ;		//asm cli;
  6463                        ;		enable();
  6464                        ;		msg.type = FX_MOUSE_MOVE;
  6465                        ;
  6466                        ;		((PMOUSEMSGDATA)&msg.data)->button1 = (m
                    b & 1);
  6467                        ;		((PMOUSEMSGDATA)&msg.data)->button2 = (m
                    b & 2);
  6468                        ;		((PMOUSEMSGDATA)&msg.data)->button3 = (m
                    b & 4);
  6469                        ;		((PMOUSEMSGDATA)&msg.data)->button4 = 0;
  6470                        ;
  6471                        ;		((PMOUSEMSGDATA)&msg.data)->x = mx;
  6472                        ;		((PMOUSEMSGDATA)&msg.data)->y = my;
  6473                        ;
  6474                        ;
  6475                        ;		k_do_procs(&msg);
  6476                        ;	}
  Sat Jul 10 2021  1:15                                                Page 131


  6477                        ;
  6478                        ;
  6479                        ;	return;
  6480                        ;}
  6481                        ;*/
  6482                        ;//int k_getevents(FXEventProc eventProcedure)
  6483                        ;int k_attach_events(FXEventProc eventProcedure,LP
                    VOID processArgs)
  6484                        ;{
  6485                        	.line	1397
  6486                        	.line	1398
  6487                        	EVTMAN
  6488                        	xdef	~~k_attach_events
  6489                        	func
  6490                        	.function	1398
  6491                        ~~k_attach_events:
  6492                        	longa	on
  6493                        	longi	on
  6494 05:13FD: 3B           	tsc
  6495 05:13FE: 38           	sec
  6496 05:13FF: E9 18 00     	sbc	#L175
  6497 05:1402: 1B           	tcs
  6498 05:1403: 0B           	phd
  6499 05:1404: 5B           	tcd
  6500             00000004   eventProcedure_0	set	4
  6501             00000008   processArgs_0	set	8
  6502                        	.block	1398
  6503                        ;	FXPROCESSMESSAGE msg;
  6504                        ;
  6505                        ;	int index = LOW_PROC;
  6506                        ;	
  6507                        ;	if(eventProcedure!=NULL)
  6508             00000000   msg_1	set	0
  6509             0000000E   index_1	set	14
  6510                        	.sym	msg,0,10,1,112,21
  6511                        	.sym	index,14,5,1,16
  6512                        	.sym	eventProcedure,4,641,6,32
  6513                        	.sym	processArgs,8,129,6,32
  6514 05:1405: A9 01 00     	lda	#$1
  6515 05:1408: 85 17        	sta	<L176+index_1
  6516                        	.line	1403
  6517                        ;	{
  6518 05:140A: A5 1C        	lda	<L175+eventProcedure_0
  6519 05:140C: 05 1E        	ora	<L175+eventProcedure_0+2
  6520 05:140E: D0 03        	bne	L178
  6521 05:1410: 82 8B 00     	brl	L10101
  6522                        L178:
  6523                        	.line	1404
  6524                        ;		//k_debug_string("Enter k_getevents\r\n"
                    );
  6525                        ;		//k_debug_pointer("\tProcess:",processAr
                    gs);
  6526                        ;
  6527                        ;		//while(index < MAX_PROCS && eventProcs[
                    index]!=NULL)
  6528                        ;		for(index=LOW_PROC;index<MAX_PROCS;index
                    ++)
  6529                        	.line	1409
  Sat Jul 10 2021  1:15                                                Page 132


  6530 05:1413: A9 01 00     	lda	#$1
  6531 05:1416: 85 17        	sta	<L176+index_1
  6532                        L10104:
  6533                        ;		{
  6534                        	.line	1410
  6535                        ;			if(eventProcs[index] == NULL)
  6536                        	.line	1411
  6537                        ;			{
  6538 05:1418: A5 17        	lda	<L176+index_1
  6539 05:141A: 0A           	asl	A
  6540 05:141B: 0A           	asl	A
  6541 05:141C: 85 01        	sta	<R0
  6542 05:141E: 18           	clc
  6543 05:141F: A9 xx xx     	lda	#<~~eventProcs
  6544 05:1422: 65 01        	adc	<R0
  6545 05:1424: 85 05        	sta	<R1
  6546 05:1426: B2 05        	lda	(<R1)
  6547 05:1428: A0 02 00     	ldy	#$2
  6548 05:142B: 11 05        	ora	(<R1),Y
  6549 05:142D: F0 03        	beq	L179
  6550 05:142F: 82 28 00     	brl	L10105
  6551                        L179:
  6552                        	.line	1412
  6553                        ;				eventProcs[index] = even
                    tProcedure;
  6554                        	.line	1413
  6555 05:1432: A5 17        	lda	<L176+index_1
  6556 05:1434: 0A           	asl	A
  6557 05:1435: 0A           	asl	A
  6558 05:1436: 85 01        	sta	<R0
  6559 05:1438: 18           	clc
  6560 05:1439: A9 xx xx     	lda	#<~~eventProcs
  6561 05:143C: 65 01        	adc	<R0
  6562 05:143E: 85 05        	sta	<R1
  6563 05:1440: A5 1C        	lda	<L175+eventProcedure_0
  6564 05:1442: 92 05        	sta	(<R1)
  6565 05:1444: A5 1E        	lda	<L175+eventProcedure_0+2
  6566 05:1446: A0 02 00     	ldy	#$2
  6567 05:1449: 91 05        	sta	(<R1),Y
  6568                        ;				k_debug_integer("k_getev
                    ents::@index:",index);
  6569                        	.line	1414
  6570 05:144B: D4 17        	pei	<L176+index_1
  6571 05:144D: F4 xx xx     	pea	#^L174
  6572 05:1450: F4 xx xx     	pea	#<L174
  6573 05:1453: 22 xx xx xx  	jsl	~~k_debug_integer
  6574                        ;				break;
  6575                        	.line	1415
  6576 05:1457: 82 12 00     	brl	L10103
  6577                        ;			}
  6578                        	.line	1416
  6579                        ;		}
  6580                        L10105:
  6581                        	.line	1417
  6582                        L10102:
  6583 05:145A: E6 17        	inc	<L176+index_1
  6584 05:145C: 38           	sec
  6585 05:145D: A5 17        	lda	<L176+index_1
  Sat Jul 10 2021  1:15                                                Page 133


  6586 05:145F: E9 00 01     	sbc	#<$100
  6587 05:1462: 70 03        	bvs	L180
  6588 05:1464: 49 00 80     	eor	#$8000
  6589                        L180:
  6590 05:1467: 30 03        	bmi	L181
  6591 05:1469: 82 AC FF     	brl	L10104
  6592                        L181:
  6593                        L10103:
  6594                        ;
  6595                        ;		msg.type = FX_INIT_MESSAGE;
  6596                        	.line	1419
  6597 05:146C: A9 01 FF     	lda	#$ff01
  6598 05:146F: 85 11        	sta	<L176+msg_1+8
  6599                        ;		msg.src  = FX_MSG_DEFAULT;
  6600                        	.line	1420
  6601 05:1471: A9 FF FF     	lda	#$ffff
  6602 05:1474: 85 09        	sta	<L176+msg_1
  6603 05:1476: A9 FF FF     	lda	#$ffff
  6604 05:1479: 85 0B        	sta	<L176+msg_1+2
  6605                        ;		msg.dest = FX_MSG_DEFAULT;
  6606                        	.line	1421
  6607 05:147B: A9 FF FF     	lda	#$ffff
  6608 05:147E: 85 0D        	sta	<L176+msg_1+4
  6609 05:1480: A9 FF FF     	lda	#$ffff
  6610 05:1483: 85 0F        	sta	<L176+msg_1+6
  6611                        ;		msg.processInfo = processArgs;
  6612                        	.line	1422
  6613 05:1485: A5 20        	lda	<L175+processArgs_0
  6614 05:1487: 85 13        	sta	<L176+msg_1+10
  6615 05:1489: A5 22        	lda	<L175+processArgs_0+2
  6616 05:148B: 85 15        	sta	<L176+msg_1+12
  6617                        ;		eventProcedure((PFXOSMESSAGE)&msg);
  6618                        	.line	1423
  6619 05:148D: F4 00 00     	pea	#0
  6620 05:1490: 18           	clc
  6621 05:1491: 7B           	tdc
  6622 05:1492: 69 09 00     	adc	#<L176+msg_1
  6623 05:1495: 48           	pha
  6624 05:1496: A6 1E        	ldx	<L175+eventProcedure_0+2
  6625 05:1498: A5 1C        	lda	<L175+eventProcedure_0
  6626                        	xref	~~~lcal
  6627 05:149A: 22 xx xx xx  	jsl	~~~lcal
  6628                        ;	}
  6629                        	.line	1424
  6630                        ;	return 0;
  6631                        L10101:
  6632                        	.line	1425
  6633 05:149E: A9 00 00     	lda	#$0
  6634                        L182:
  6635 05:14A1: A8           	tay
  6636 05:14A2: A5 1A        	lda	<L175+2
  6637 05:14A4: 85 22        	sta	<L175+2+8
  6638 05:14A6: A5 19        	lda	<L175+1
  6639 05:14A8: 85 21        	sta	<L175+1+8
  6640 05:14AA: 2B           	pld
  6641 05:14AB: 3B           	tsc
  6642 05:14AC: 18           	clc
  6643 05:14AD: 69 20 00     	adc	#L175+8
  Sat Jul 10 2021  1:15                                                Page 134


  6644 05:14B0: 1B           	tcs
  6645 05:14B1: 98           	tya
  6646 05:14B2: 6B           	rtl
  6647                        ;}
  6648                        	.line	1426
  6649                        	.endblock	1426
  6650             00000018   L175	equ	24
  6651             00000009   L176	equ	9
  6652 05:14B3:              	ends
  6653                        	efunc
  6654                        	.endfunc	1426,9,24
  6655                        	.line	1426
  6656                        	data
  6657                        L174:
  6658 00:0699: 6B 5F 67 65  	db	$6B,$5F,$67,$65,$74,$65,$76,$65,$6E,$74,
                    $73,$3A,$3A,$40,$69
       00:069D: 74 65 76 65 
       00:06A1: 6E 74 73 3A 
       00:06A5: 3A 40 69 
  6659 00:06A8: 6E 64 65 78  	db	$6E,$64,$65,$78,$3A,$00
       00:06AC: 3A 00 
  6660 00:06AE:              	ends
  6661                        ;
  6662                        ;int k_unattach_events(FXEventProc eventProcedure,
                    LPVOID processArgs)
  6663                        ;{
  6664                        	.line	1428
  6665                        	.line	1429
  6666                        	EVTMAN
  6667                        	xdef	~~k_unattach_events
  6668                        	func
  6669                        	.function	1429
  6670                        ~~k_unattach_events:
  6671                        	longa	on
  6672                        	longi	on
  6673 05:14B3: 3B           	tsc
  6674 05:14B4: 38           	sec
  6675 05:14B5: E9 18 00     	sbc	#L184
  6676 05:14B8: 1B           	tcs
  6677 05:14B9: 0B           	phd
  6678 05:14BA: 5B           	tcd
  6679             00000004   eventProcedure_0	set	4
  6680             00000008   processArgs_0	set	8
  6681                        	.block	1429
  6682                        ;	FXPROCESSMESSAGE msg;
  6683                        ;
  6684                        ;	int index = LOW_PROC;
  6685                        ;
  6686                        ;	if(eventProcedure!=NULL)
  6687             00000000   msg_1	set	0
  6688             0000000E   index_1	set	14
  6689                        	.sym	msg,0,10,1,112,21
  6690                        	.sym	index,14,5,1,16
  6691                        	.sym	eventProcedure,4,641,6,32
  6692                        	.sym	processArgs,8,129,6,32
  6693 05:14BB: A9 01 00     	lda	#$1
  6694 05:14BE: 85 17        	sta	<L185+index_1
  6695                        	.line	1434
  Sat Jul 10 2021  1:15                                                Page 135


  6696                        ;	{
  6697 05:14C0: A5 1C        	lda	<L184+eventProcedure_0
  6698 05:14C2: 05 1E        	ora	<L184+eventProcedure_0+2
  6699 05:14C4: D0 03        	bne	L187
  6700 05:14C6: 82 95 00     	brl	L10106
  6701                        L187:
  6702                        	.line	1435
  6703                        ;		k_debug_string("k_unattach_events\r\n");
  6704                        	.line	1436
  6705 05:14C9: F4 xx xx     	pea	#^L183
  6706 05:14CC: F4 xx xx     	pea	#<L183
  6707 05:14CF: 22 xx xx xx  	jsl	~~k_debug_string
  6708                        ;		//k_debug_pointer("\tProcess:",processAr
                    gs);
  6709                        ;
  6710                        ;		//while(index < MAX_PROCS && eventProcs[
                    index]!=NULL)
  6711                        ;		for(index=LOW_PROC;index<MAX_PROCS;index
                    ++)
  6712                        	.line	1440
  6713 05:14D3: A9 01 00     	lda	#$1
  6714 05:14D6: 85 17        	sta	<L185+index_1
  6715                        L10109:
  6716                        ;		{
  6717                        	.line	1441
  6718                        ;			if(eventProcs[index] == NULL)
  6719                        	.line	1442
  6720                        ;			{
  6721 05:14D8: A5 17        	lda	<L185+index_1
  6722 05:14DA: 0A           	asl	A
  6723 05:14DB: 0A           	asl	A
  6724 05:14DC: 85 01        	sta	<R0
  6725 05:14DE: 18           	clc
  6726 05:14DF: A9 xx xx     	lda	#<~~eventProcs
  6727 05:14E2: 65 01        	adc	<R0
  6728 05:14E4: 85 05        	sta	<R1
  6729 05:14E6: B2 05        	lda	(<R1)
  6730 05:14E8: A0 02 00     	ldy	#$2
  6731 05:14EB: 11 05        	ora	(<R1),Y
  6732 05:14ED: F0 03        	beq	L188
  6733 05:14EF: 82 28 00     	brl	L10110
  6734                        L188:
  6735                        	.line	1443
  6736                        ;				eventProcs[index] = even
                    tProcedure;
  6737                        	.line	1444
  6738 05:14F2: A5 17        	lda	<L185+index_1
  6739 05:14F4: 0A           	asl	A
  6740 05:14F5: 0A           	asl	A
  6741 05:14F6: 85 01        	sta	<R0
  6742 05:14F8: 18           	clc
  6743 05:14F9: A9 xx xx     	lda	#<~~eventProcs
  6744 05:14FC: 65 01        	adc	<R0
  6745 05:14FE: 85 05        	sta	<R1
  6746 05:1500: A5 1C        	lda	<L184+eventProcedure_0
  6747 05:1502: 92 05        	sta	(<R1)
  6748 05:1504: A5 1E        	lda	<L184+eventProcedure_0+2
  6749 05:1506: A0 02 00     	ldy	#$2
  Sat Jul 10 2021  1:15                                                Page 136


  6750 05:1509: 91 05        	sta	(<R1),Y
  6751                        ;				k_debug_integer("k_getev
                    ents::@index:",index);
  6752                        	.line	1445
  6753 05:150B: D4 17        	pei	<L185+index_1
  6754 05:150D: F4 xx xx     	pea	#^L183+20
  6755 05:1510: F4 xx xx     	pea	#<L183+20
  6756 05:1513: 22 xx xx xx  	jsl	~~k_debug_integer
  6757                        ;				break;
  6758                        	.line	1446
  6759 05:1517: 82 12 00     	brl	L10108
  6760                        ;			}
  6761                        	.line	1447
  6762                        ;		}
  6763                        L10110:
  6764                        	.line	1448
  6765                        L10107:
  6766 05:151A: E6 17        	inc	<L185+index_1
  6767 05:151C: 38           	sec
  6768 05:151D: A5 17        	lda	<L185+index_1
  6769 05:151F: E9 00 01     	sbc	#<$100
  6770 05:1522: 70 03        	bvs	L189
  6771 05:1524: 49 00 80     	eor	#$8000
  6772                        L189:
  6773 05:1527: 30 03        	bmi	L190
  6774 05:1529: 82 AC FF     	brl	L10109
  6775                        L190:
  6776                        L10108:
  6777                        ;
  6778                        ;		msg.type = FX_UNINIT_MESSAGE;
  6779                        	.line	1450
  6780 05:152C: A9 02 FF     	lda	#$ff02
  6781 05:152F: 85 11        	sta	<L185+msg_1+8
  6782                        ;		msg.src  = FX_MSG_DEFAULT;
  6783                        	.line	1451
  6784 05:1531: A9 FF FF     	lda	#$ffff
  6785 05:1534: 85 09        	sta	<L185+msg_1
  6786 05:1536: A9 FF FF     	lda	#$ffff
  6787 05:1539: 85 0B        	sta	<L185+msg_1+2
  6788                        ;		msg.dest = FX_MSG_DEFAULT;
  6789                        	.line	1452
  6790 05:153B: A9 FF FF     	lda	#$ffff
  6791 05:153E: 85 0D        	sta	<L185+msg_1+4
  6792 05:1540: A9 FF FF     	lda	#$ffff
  6793 05:1543: 85 0F        	sta	<L185+msg_1+6
  6794                        ;		msg.processInfo = processArgs;
  6795                        	.line	1453
  6796 05:1545: A5 20        	lda	<L184+processArgs_0
  6797 05:1547: 85 13        	sta	<L185+msg_1+10
  6798 05:1549: A5 22        	lda	<L184+processArgs_0+2
  6799 05:154B: 85 15        	sta	<L185+msg_1+12
  6800                        ;		eventProcedure((PFXOSMESSAGE)&msg);
  6801                        	.line	1454
  6802 05:154D: F4 00 00     	pea	#0
  6803 05:1550: 18           	clc
  6804 05:1551: 7B           	tdc
  6805 05:1552: 69 09 00     	adc	#<L185+msg_1
  6806 05:1555: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 137


  6807 05:1556: A6 1E        	ldx	<L184+eventProcedure_0+2
  6808 05:1558: A5 1C        	lda	<L184+eventProcedure_0
  6809                        	xref	~~~lcal
  6810 05:155A: 22 xx xx xx  	jsl	~~~lcal
  6811                        ;	}
  6812                        	.line	1455
  6813                        ;	return 0;
  6814                        L10106:
  6815                        	.line	1456
  6816 05:155E: A9 00 00     	lda	#$0
  6817                        L191:
  6818 05:1561: A8           	tay
  6819 05:1562: A5 1A        	lda	<L184+2
  6820 05:1564: 85 22        	sta	<L184+2+8
  6821 05:1566: A5 19        	lda	<L184+1
  6822 05:1568: 85 21        	sta	<L184+1+8
  6823 05:156A: 2B           	pld
  6824 05:156B: 3B           	tsc
  6825 05:156C: 18           	clc
  6826 05:156D: 69 20 00     	adc	#L184+8
  6827 05:1570: 1B           	tcs
  6828 05:1571: 98           	tya
  6829 05:1572: 6B           	rtl
  6830                        ;}
  6831                        	.line	1457
  6832                        	.endblock	1457
  6833             00000018   L184	equ	24
  6834             00000009   L185	equ	9
  6835 05:1573:              	ends
  6836                        	efunc
  6837                        	.endfunc	1457,9,24
  6838                        	.line	1457
  6839                        	data
  6840                        L183:
  6841 00:06AE: 6B 5F 75 6E  	db	$6B,$5F,$75,$6E,$61,$74,$74,$61,$63,$68,
                    $5F,$65,$76,$65,$6E
       00:06B2: 61 74 74 61 
       00:06B6: 63 68 5F 65 
       00:06BA: 76 65 6E 
  6842 00:06BD: 74 73 0D 0A  	db	$74,$73,$0D,$0A,$00,$6B,$5F,$67,$65,$74,
                    $65,$76,$65,$6E,$74
       00:06C1: 00 6B 5F 67 
       00:06C5: 65 74 65 76 
       00:06C9: 65 6E 74 
  6843 00:06CC: 73 3A 3A 40  	db	$73,$3A,$3A,$40,$69,$6E,$64,$65,$78,$3A,
                    $00
       00:06D0: 69 6E 64 65 
       00:06D4: 78 3A 00 
  6844 00:06D7:              	ends
  6845                        ;
  6846                        ;int k_attach_process_events(FXEventProc eventProc
                    edure,LPVOID processArgs)
  6847                        ;{
  6848                        	.line	1459
  6849                        	.line	1460
  6850                        	EVTMAN
  6851                        	xdef	~~k_attach_process_events
  6852                        	func
  Sat Jul 10 2021  1:15                                                Page 138


  6853                        	.function	1460
  6854                        ~~k_attach_process_events:
  6855                        	longa	on
  6856                        	longi	on
  6857 05:1573: 3B           	tsc
  6858 05:1574: 38           	sec
  6859 05:1575: E9 1C 00     	sbc	#L193
  6860 05:1578: 1B           	tcs
  6861 05:1579: 0B           	phd
  6862 05:157A: 5B           	tcd
  6863             00000004   eventProcedure_0	set	4
  6864             00000008   processArgs_0	set	8
  6865                        	.block	1460
  6866                        ;	FXEVENTPROCESS FAR *fxep = NULL;
  6867                        ;	FXPROCESSMESSAGE msg;
  6868                        ;
  6869                        ;	int index = 0;
  6870                        ;
  6871                        ;	if(eventProcedure!=NULL)
  6872             00000000   fxep_1	set	0
  6873             00000004   msg_1	set	4
  6874             00000012   index_1	set	18
  6875                        	.sym	fxep,0,138,1,32,71
  6876                        	.sym	msg,4,10,1,112,21
  6877                        	.sym	index,18,5,1,16
  6878                        	.sym	eventProcedure,4,641,6,32
  6879                        	.sym	processArgs,8,129,6,32
  6880 05:157B: 64 09        	stz	<L194+fxep_1
  6881 05:157D: 64 0B        	stz	<L194+fxep_1+2
  6882 05:157F: 64 1B        	stz	<L194+index_1
  6883                        	.line	1466
  6884                        ;	{
  6885 05:1581: A5 20        	lda	<L193+eventProcedure_0
  6886 05:1583: 05 22        	ora	<L193+eventProcedure_0+2
  6887 05:1585: D0 03        	bne	L196
  6888 05:1587: 82 92 01     	brl	L10111
  6889                        L196:
  6890                        	.line	1467
  6891                        ;		k_debug_string("Enter k_attach_process_e
                    vents\r\n");
  6892                        	.line	1468
  6893 05:158A: F4 xx xx     	pea	#^L192
  6894 05:158D: F4 xx xx     	pea	#<L192
  6895 05:1590: 22 xx xx xx  	jsl	~~k_debug_string
  6896                        ;		k_debug_pointer("\eventProcedure:",event
                    Procedure);
  6897                        	.line	1469
  6898 05:1594: D4 22        	pei	<L193+eventProcedure_0+2
  6899 05:1596: D4 20        	pei	<L193+eventProcedure_0
  6900 05:1598: F4 xx xx     	pea	#^L192+32
  6901 05:159B: F4 xx xx     	pea	#<L192+32
  6902 05:159E: 22 xx xx xx  	jsl	~~k_debug_pointer
  6903                        ;		k_debug_pointer("\tProcess:",processArgs
                    );
  6904                        	.line	1470
  6905 05:15A2: D4 26        	pei	<L193+processArgs_0+2
  6906 05:15A4: D4 24        	pei	<L193+processArgs_0
  6907 05:15A6: F4 xx xx     	pea	#^L192+48
  Sat Jul 10 2021  1:15                                                Page 139


  6908 05:15A9: F4 xx xx     	pea	#<L192+48
  6909 05:15AC: 22 xx xx xx  	jsl	~~k_debug_pointer
  6910                        ;
  6911                        ;		for(index=IDLE_PROC;index<MAX_PROCS;inde
                    x++)
  6912                        	.line	1472
  6913 05:15B0: 64 1B        	stz	<L194+index_1
  6914                        L10114:
  6915                        ;		{
  6916                        	.line	1473
  6917                        ;			if(eventProcess[index] == NULL)
  6918                        	.line	1474
  6919                        ;			{
  6920 05:15B2: A5 1B        	lda	<L194+index_1
  6921 05:15B4: 0A           	asl	A
  6922 05:15B5: 0A           	asl	A
  6923 05:15B6: 85 01        	sta	<R0
  6924 05:15B8: 18           	clc
  6925 05:15B9: A9 xx xx     	lda	#<~~eventProcess
  6926 05:15BC: 65 01        	adc	<R0
  6927 05:15BE: 85 05        	sta	<R1
  6928 05:15C0: B2 05        	lda	(<R1)
  6929 05:15C2: A0 02 00     	ldy	#$2
  6930 05:15C5: 11 05        	ora	(<R1),Y
  6931 05:15C7: F0 03        	beq	L197
  6932 05:15C9: 82 55 00     	brl	L10115
  6933                        L197:
  6934                        	.line	1475
  6935                        ;				fxep = (FXEVENTPROCESS F
                    AR *)k_mem_allocate_heap(sizeof(FXEVENTPROCESS));
  6936                        	.line	1476
  6937 05:15CC: F4 08 00     	pea	#<$8
  6938 05:15CF: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  6939 05:15D3: 85 09        	sta	<L194+fxep_1
  6940 05:15D5: 86 0B        	stx	<L194+fxep_1+2
  6941                        ;				if(fxep!=NULL)
  6942                        	.line	1477
  6943                        ;				{
  6944 05:15D7: A5 09        	lda	<L194+fxep_1
  6945 05:15D9: 05 0B        	ora	<L194+fxep_1+2
  6946 05:15DB: D0 03        	bne	L198
  6947 05:15DD: 82 3E 00     	brl	L10116
  6948                        L198:
  6949                        	.line	1478
  6950                        ;					eventProcess[ind
                    ex] = fxep;
  6951                        	.line	1479
  6952 05:15E0: A5 1B        	lda	<L194+index_1
  6953 05:15E2: 0A           	asl	A
  6954 05:15E3: 0A           	asl	A
  6955 05:15E4: 85 01        	sta	<R0
  6956 05:15E6: 18           	clc
  6957 05:15E7: A9 xx xx     	lda	#<~~eventProcess
  6958 05:15EA: 65 01        	adc	<R0
  6959 05:15EC: 85 05        	sta	<R1
  6960 05:15EE: A5 09        	lda	<L194+fxep_1
  6961 05:15F0: 92 05        	sta	(<R1)
  6962 05:15F2: A5 0B        	lda	<L194+fxep_1+2
  Sat Jul 10 2021  1:15                                                Page 140


  6963 05:15F4: A0 02 00     	ldy	#$2
  6964 05:15F7: 91 05        	sta	(<R1),Y
  6965                        ;
  6966                        ;					fxep->process = 
                    (PFXPROCESS)processArgs;
  6967                        	.line	1481
  6968 05:15F9: A5 24        	lda	<L193+processArgs_0
  6969 05:15FB: 87 09        	sta	[<L194+fxep_1]
  6970 05:15FD: A5 26        	lda	<L193+processArgs_0+2
  6971 05:15FF: A0 02 00     	ldy	#$2
  6972 05:1602: 97 09        	sta	[<L194+fxep_1],Y
  6973                        ;					fxep->eventProc 
                    = eventProcedure;
  6974                        	.line	1482
  6975 05:1604: A5 20        	lda	<L193+eventProcedure_0
  6976 05:1606: A0 04 00     	ldy	#$4
  6977 05:1609: 97 09        	sta	[<L194+fxep_1],Y
  6978 05:160B: A5 22        	lda	<L193+eventProcedure_0+2
  6979 05:160D: A0 06 00     	ldy	#$6
  6980 05:1610: 97 09        	sta	[<L194+fxep_1],Y
  6981                        ;
  6982                        ;					k_debug_integer(
                    "k_attach_process_events::@index:",index);
  6983                        	.line	1484
  6984 05:1612: D4 1B        	pei	<L194+index_1
  6985 05:1614: F4 xx xx     	pea	#^L192+58
  6986 05:1617: F4 xx xx     	pea	#<L192+58
  6987 05:161A: 22 xx xx xx  	jsl	~~k_debug_integer
  6988                        ;				}
  6989                        	.line	1485
  6990                        ;				break;
  6991                        L10116:
  6992                        	.line	1486
  6993 05:161E: 82 12 00     	brl	L10113
  6994                        ;			}
  6995                        	.line	1487
  6996                        ;		}
  6997                        L10115:
  6998                        	.line	1488
  6999                        L10112:
  7000 05:1621: E6 1B        	inc	<L194+index_1
  7001 05:1623: 38           	sec
  7002 05:1624: A5 1B        	lda	<L194+index_1
  7003 05:1626: E9 00 01     	sbc	#<$100
  7004 05:1629: 70 03        	bvs	L199
  7005 05:162B: 49 00 80     	eor	#$8000
  7006                        L199:
  7007 05:162E: 30 03        	bmi	L200
  7008 05:1630: 82 7F FF     	brl	L10114
  7009                        L200:
  7010                        L10113:
  7011                        ;
  7012                        ;		if(index < MAX_PROCS)
  7013                        	.line	1490
  7014                        ;		{
  7015 05:1633: 38           	sec
  7016 05:1634: A5 1B        	lda	<L194+index_1
  7017 05:1636: E9 00 01     	sbc	#<$100
  Sat Jul 10 2021  1:15                                                Page 141


  7018 05:1639: 70 03        	bvs	L201
  7019 05:163B: 49 00 80     	eor	#$8000
  7020                        L201:
  7021 05:163E: 10 03        	bpl	L202
  7022 05:1640: 82 C5 00     	brl	L10117
  7023                        L202:
  7024                        	.line	1491
  7025                        ;			msg.type = FX_INIT_MESSAGE;
  7026                        	.line	1492
  7027 05:1643: A9 01 FF     	lda	#$ff01
  7028 05:1646: 85 15        	sta	<L194+msg_1+8
  7029                        ;			msg.processInfo = processArgs;
  7030                        	.line	1493
  7031 05:1648: A5 24        	lda	<L193+processArgs_0
  7032 05:164A: 85 17        	sta	<L194+msg_1+10
  7033 05:164C: A5 26        	lda	<L193+processArgs_0+2
  7034 05:164E: 85 19        	sta	<L194+msg_1+12
  7035                        ;
  7036                        ;			k_debug_string("k_getevents @1\r
                    \n");
  7037                        	.line	1495
  7038 05:1650: F4 xx xx     	pea	#^L192+91
  7039 05:1653: F4 xx xx     	pea	#<L192+91
  7040 05:1656: 22 xx xx xx  	jsl	~~k_debug_string
  7041                        ;
  7042                        ;			if(eventProcess[index]->process!
                    =NULL)
  7043                        	.line	1497
  7044                        ;				k_exec_set_current_proce
                    ss(eventProcess[index]->process);
  7045 05:165A: A5 1B        	lda	<L194+index_1
  7046 05:165C: 0A           	asl	A
  7047 05:165D: 0A           	asl	A
  7048 05:165E: 85 01        	sta	<R0
  7049 05:1660: 18           	clc
  7050 05:1661: A9 xx xx     	lda	#<~~eventProcess
  7051 05:1664: 65 01        	adc	<R0
  7052 05:1666: 85 05        	sta	<R1
  7053 05:1668: B2 05        	lda	(<R1)
  7054 05:166A: 85 01        	sta	<R0
  7055 05:166C: A0 02 00     	ldy	#$2
  7056 05:166F: B1 05        	lda	(<R1),Y
  7057 05:1671: 85 03        	sta	<R0+2
  7058 05:1673: A7 01        	lda	[<R0]
  7059 05:1675: A0 02 00     	ldy	#$2
  7060 05:1678: 17 01        	ora	[<R0],Y
  7061 05:167A: D0 03        	bne	L203
  7062 05:167C: 82 26 00     	brl	L10118
  7063                        L203:
  7064                        	.line	1498
  7065 05:167F: A5 1B        	lda	<L194+index_1
  7066 05:1681: 0A           	asl	A
  7067 05:1682: 0A           	asl	A
  7068 05:1683: 85 01        	sta	<R0
  7069 05:1685: 18           	clc
  7070 05:1686: A9 xx xx     	lda	#<~~eventProcess
  7071 05:1689: 65 01        	adc	<R0
  7072 05:168B: 85 05        	sta	<R1
  Sat Jul 10 2021  1:15                                                Page 142


  7073 05:168D: B2 05        	lda	(<R1)
  7074 05:168F: 85 01        	sta	<R0
  7075 05:1691: A0 02 00     	ldy	#$2
  7076 05:1694: B1 05        	lda	(<R1),Y
  7077 05:1696: 85 03        	sta	<R0+2
  7078 05:1698: A0 02 00     	ldy	#$2
  7079 05:169B: B7 01        	lda	[<R0],Y
  7080 05:169D: 48           	pha
  7081 05:169E: A7 01        	lda	[<R0]
  7082 05:16A0: 48           	pha
  7083 05:16A1: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  7084                        ;
  7085                        ;			//k_debug_integer("k_getevents @
                    2:",index);
  7086                        ;			//k_debug_pointer("k_getevents @
                    2:",eventProcess[index]->eventProc);
  7087                        ;
  7088                        ;			if(eventProcess[index]->eventPro
                    c)
  7089                        L10118:
  7090                        	.line	1503
  7091                        ;				eventProcess[index]->eve
                    ntProc((PFXOSMESSAGE)&msg);
  7092 05:16A5: A5 1B        	lda	<L194+index_1
  7093 05:16A7: 0A           	asl	A
  7094 05:16A8: 0A           	asl	A
  7095 05:16A9: 85 01        	sta	<R0
  7096 05:16AB: 18           	clc
  7097 05:16AC: A9 xx xx     	lda	#<~~eventProcess
  7098 05:16AF: 65 01        	adc	<R0
  7099 05:16B1: 85 05        	sta	<R1
  7100 05:16B3: B2 05        	lda	(<R1)
  7101 05:16B5: 85 01        	sta	<R0
  7102 05:16B7: A0 02 00     	ldy	#$2
  7103 05:16BA: B1 05        	lda	(<R1),Y
  7104 05:16BC: 85 03        	sta	<R0+2
  7105 05:16BE: A0 04 00     	ldy	#$4
  7106 05:16C1: B7 01        	lda	[<R0],Y
  7107 05:16C3: A0 06 00     	ldy	#$6
  7108 05:16C6: 17 01        	ora	[<R0],Y
  7109 05:16C8: D0 03        	bne	L204
  7110 05:16CA: 82 31 00     	brl	L10119
  7111                        L204:
  7112                        	.line	1504
  7113 05:16CD: F4 00 00     	pea	#0
  7114 05:16D0: 18           	clc
  7115 05:16D1: 7B           	tdc
  7116 05:16D2: 69 0D 00     	adc	#<L194+msg_1
  7117 05:16D5: 48           	pha
  7118 05:16D6: A5 1B        	lda	<L194+index_1
  7119 05:16D8: 0A           	asl	A
  7120 05:16D9: 0A           	asl	A
  7121 05:16DA: 85 01        	sta	<R0
  7122 05:16DC: 18           	clc
  7123 05:16DD: A9 xx xx     	lda	#<~~eventProcess
  7124 05:16E0: 65 01        	adc	<R0
  7125 05:16E2: 85 05        	sta	<R1
  7126 05:16E4: B2 05        	lda	(<R1)
  Sat Jul 10 2021  1:15                                                Page 143


  7127 05:16E6: 85 01        	sta	<R0
  7128 05:16E8: A0 02 00     	ldy	#$2
  7129 05:16EB: B1 05        	lda	(<R1),Y
  7130 05:16ED: 85 03        	sta	<R0+2
  7131 05:16EF: A0 06 00     	ldy	#$6
  7132 05:16F2: B7 01        	lda	[<R0],Y
  7133 05:16F4: AA           	tax
  7134 05:16F5: A0 04 00     	ldy	#$4
  7135 05:16F8: B7 01        	lda	[<R0],Y
  7136                        	xref	~~~lcal
  7137 05:16FA: 22 xx xx xx  	jsl	~~~lcal
  7138                        ;
  7139                        ;			//k_debug_string("k_getevents @3
                    \r\n");
  7140                        ;
  7141                        ;			k_exec_set_current_process(NULL)
                    ;
  7142                        L10119:
  7143                        	.line	1508
  7144 05:16FE: F4 00 00     	pea	#^$0
  7145 05:1701: F4 00 00     	pea	#<$0
  7146 05:1704: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  7147                        ;		}
  7148                        	.line	1509
  7149                        ;
  7150                        ;		k_debug_pointer("k_attach_process_events
                    ::k_exec_set_current_process:",k_exec_get_current_process())
                    ;
  7151                        L10117:
  7152                        	.line	1511
  7153 05:1708: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7154 05:170C: 85 01        	sta	<R0
  7155 05:170E: 86 03        	stx	<R0+2
  7156 05:1710: DA           	phx
  7157 05:1711: 48           	pha
  7158 05:1712: F4 xx xx     	pea	#^L192+108
  7159 05:1715: F4 xx xx     	pea	#<L192+108
  7160 05:1718: 22 xx xx xx  	jsl	~~k_debug_pointer
  7161                        ;	}
  7162                        	.line	1512
  7163                        ;	return 0;
  7164                        L10111:
  7165                        	.line	1513
  7166 05:171C: A9 00 00     	lda	#$0
  7167                        L205:
  7168 05:171F: A8           	tay
  7169 05:1720: A5 1E        	lda	<L193+2
  7170 05:1722: 85 26        	sta	<L193+2+8
  7171 05:1724: A5 1D        	lda	<L193+1
  7172 05:1726: 85 25        	sta	<L193+1+8
  7173 05:1728: 2B           	pld
  7174 05:1729: 3B           	tsc
  7175 05:172A: 18           	clc
  7176 05:172B: 69 24 00     	adc	#L193+8
  7177 05:172E: 1B           	tcs
  7178 05:172F: 98           	tya
  7179 05:1730: 6B           	rtl
  7180                        ;}
  Sat Jul 10 2021  1:15                                                Page 144


  7181                        	.line	1514
  7182                        	.endblock	1514
  7183             0000001C   L193	equ	28
  7184             00000009   L194	equ	9
  7185 05:1731:              	ends
  7186                        	efunc
  7187                        	.endfunc	1514,9,28
  7188                        	.line	1514
  7189                        	data
  7190                        L192:
  7191 00:06D7: 45 6E 74 65  	db	$45,$6E,$74,$65,$72,$20,$6B,$5F,$61,$74,
                    $74,$61,$63,$68,$5F
       00:06DB: 72 20 6B 5F 
       00:06DF: 61 74 74 61 
       00:06E3: 63 68 5F 
  7192 00:06E6: 70 72 6F 63  	db	$70,$72,$6F,$63,$65,$73,$73,$5F,$65,$76,
                    $65,$6E,$74,$73,$0D
       00:06EA: 65 73 73 5F 
       00:06EE: 65 76 65 6E 
       00:06F2: 74 73 0D 
  7193 00:06F5: 0A 00 65 76  	db	$0A,$00,$65,$76,$65,$6E,$74,$50,$72,$6F,
                    $63,$65,$64,$75,$72
       00:06F9: 65 6E 74 50 
       00:06FD: 72 6F 63 65 
       00:0701: 64 75 72 
  7194 00:0704: 65 3A 00 09  	db	$65,$3A,$00,$09,$50,$72,$6F,$63,$65,$73,
                    $73,$3A,$00,$6B,$5F
       00:0708: 50 72 6F 63 
       00:070C: 65 73 73 3A 
       00:0710: 00 6B 5F 
  7195 00:0713: 61 74 74 61  	db	$61,$74,$74,$61,$63,$68,$5F,$70,$72,$6F,
                    $63,$65,$73,$73,$5F
       00:0717: 63 68 5F 70 
       00:071B: 72 6F 63 65 
       00:071F: 73 73 5F 
  7196 00:0722: 65 76 65 6E  	db	$65,$76,$65,$6E,$74,$73,$3A,$3A,$40,$69,
                    $6E,$64,$65,$78,$3A
       00:0726: 74 73 3A 3A 
       00:072A: 40 69 6E 64 
       00:072E: 65 78 3A 
  7197 00:0731: 00 6B 5F 67  	db	$00,$6B,$5F,$67,$65,$74,$65,$76,$65,$6E,
                    $74,$73,$20,$40,$31
       00:0735: 65 74 65 76 
       00:0739: 65 6E 74 73 
       00:073D: 20 40 31 
  7198 00:0740: 0D 0A 00 6B  	db	$0D,$0A,$00,$6B,$5F,$61,$74,$74,$61,$63,
                    $68,$5F,$70,$72,$6F
       00:0744: 5F 61 74 74 
       00:0748: 61 63 68 5F 
       00:074C: 70 72 6F 
  7199 00:074F: 63 65 73 73  	db	$63,$65,$73,$73,$5F,$65,$76,$65,$6E,$74,
                    $73,$3A,$3A,$6B,$5F
       00:0753: 5F 65 76 65 
       00:0757: 6E 74 73 3A 
       00:075B: 3A 6B 5F 
  7200 00:075E: 65 78 65 63  	db	$65,$78,$65,$63,$5F,$73,$65,$74,$5F,$63,
                    $75,$72,$72,$65,$6E
       00:0762: 5F 73 65 74 
  Sat Jul 10 2021  1:15                                                Page 145


       00:0766: 5F 63 75 72 
       00:076A: 72 65 6E 
  7201 00:076D: 74 5F 70 72  	db	$74,$5F,$70,$72,$6F,$63,$65,$73,$73,$3A,
                    $00
       00:0771: 6F 63 65 73 
       00:0775: 73 3A 00 
  7202 00:0778:              	ends
  7203                        ;
  7204                        ;LPVOID k_alloc_message_arg(LPVOID data,UINT size)
  7205                        ;{
  7206                        	.line	1516
  7207                        	.line	1517
  7208                        	EVTMAN
  7209                        	xdef	~~k_alloc_message_arg
  7210                        	func
  7211                        	.function	1517
  7212                        ~~k_alloc_message_arg:
  7213                        	longa	on
  7214                        	longi	on
  7215 05:1731: 3B           	tsc
  7216 05:1732: 38           	sec
  7217 05:1733: E9 04 00     	sbc	#L207
  7218 05:1736: 1B           	tcs
  7219 05:1737: 0B           	phd
  7220 05:1738: 5B           	tcd
  7221             00000004   data_0	set	4
  7222             00000008   size_0	set	8
  7223                        	.block	1517
  7224                        ;	LPVOID ptr = NULL;
  7225                        ;
  7226                        ;	ptr = k_mem_allocate_heap(size);
  7227             00000000   ptr_1	set	0
  7228                        	.sym	ptr,0,129,1,32
  7229                        	.sym	data,4,129,6,32
  7230                        	.sym	size,8,16,6,16
  7231 05:1739: 64 01        	stz	<L208+ptr_1
  7232 05:173B: 64 03        	stz	<L208+ptr_1+2
  7233                        	.line	1520
  7234 05:173D: D4 0C        	pei	<L207+size_0
  7235 05:173F: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7236 05:1743: 85 01        	sta	<L208+ptr_1
  7237 05:1745: 86 03        	stx	<L208+ptr_1+2
  7238                        ;	if(ptr!=NULL)
  7239                        	.line	1521
  7240                        ;	{
  7241 05:1747: A5 01        	lda	<L208+ptr_1
  7242 05:1749: 05 03        	ora	<L208+ptr_1+2
  7243 05:174B: D0 03        	bne	L210
  7244 05:174D: 82 0E 00     	brl	L10120
  7245                        L210:
  7246                        	.line	1522
  7247                        ;		memcpy(ptr,data,size);
  7248                        	.line	1523
  7249 05:1750: D4 0C        	pei	<L207+size_0
  7250 05:1752: D4 0A        	pei	<L207+data_0+2
  7251 05:1754: D4 08        	pei	<L207+data_0
  7252 05:1756: D4 03        	pei	<L208+ptr_1+2
  7253 05:1758: D4 01        	pei	<L208+ptr_1
  Sat Jul 10 2021  1:15                                                Page 146


  7254 05:175A: 22 xx xx xx  	jsl	~~memcpy
  7255                        ;	}
  7256                        	.line	1524
  7257                        ;	return ptr;
  7258                        L10120:
  7259                        	.line	1525
  7260 05:175E: A6 03        	ldx	<L208+ptr_1+2
  7261 05:1760: A5 01        	lda	<L208+ptr_1
  7262                        L211:
  7263 05:1762: A8           	tay
  7264 05:1763: A5 06        	lda	<L207+2
  7265 05:1765: 85 0C        	sta	<L207+2+6
  7266 05:1767: A5 05        	lda	<L207+1
  7267 05:1769: 85 0B        	sta	<L207+1+6
  7268 05:176B: 2B           	pld
  7269 05:176C: 3B           	tsc
  7270 05:176D: 18           	clc
  7271 05:176E: 69 0A 00     	adc	#L207+6
  7272 05:1771: 1B           	tcs
  7273 05:1772: 98           	tya
  7274 05:1773: 6B           	rtl
  7275                        ;}
  7276                        	.line	1526
  7277                        	.endblock	1526
  7278             00000004   L207	equ	4
  7279             00000001   L208	equ	1
  7280 05:1774:              	ends
  7281                        	efunc
  7282                        	.endfunc	1526,1,4
  7283                        	.line	1526
  7284                        ;
  7285                        ;VOID k_dealloc_message_arg(LPVOID data)
  7286                        ;{
  7287                        	.line	1528
  7288                        	.line	1529
  7289                        	EVTMAN
  7290                        	xdef	~~k_dealloc_message_arg
  7291                        	func
  7292                        	.function	1529
  7293                        ~~k_dealloc_message_arg:
  7294                        	longa	on
  7295                        	longi	on
  7296 05:1774: 3B           	tsc
  7297 05:1775: 38           	sec
  7298 05:1776: E9 00 00     	sbc	#L212
  7299 05:1779: 1B           	tcs
  7300 05:177A: 0B           	phd
  7301 05:177B: 5B           	tcd
  7302             00000004   data_0	set	4
  7303                        	.block	1529
  7304                        ;	if(data!=NULL)
  7305                        	.sym	data,4,129,6,32
  7306                        	.line	1530
  7307                        ;		k_mem_deallocate_heap(data);
  7308 05:177C: A5 04        	lda	<L212+data_0
  7309 05:177E: 05 06        	ora	<L212+data_0+2
  7310 05:1780: D0 03        	bne	L215
  7311 05:1782: 82 0B 00     	brl	L10121
  Sat Jul 10 2021  1:15                                                Page 147


  7312                        L215:
  7313                        	.line	1531
  7314 05:1785: D4 06        	pei	<L212+data_0+2
  7315 05:1787: D4 04        	pei	<L212+data_0
  7316 05:1789: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  7317                        ;	else
  7318 05:178D: 82 1B 00     	brl	L10122
  7319                        L10121:
  7320                        ;		k_exec_throw_exception(THIS_MODULE,0x000
                    10001,"Dealloc of NULL reference",-1);
  7321                        	.line	1533
  7322 05:1790: F4 FF FF     	pea	#<$ffffffff
  7323 05:1793: F4 xx xx     	pea	#^L206
  7324 05:1796: F4 xx xx     	pea	#<L206
  7325 05:1799: F4 01 00     	pea	#^$10001
  7326 05:179C: F4 01 00     	pea	#<$10001
  7327 05:179F: AD xx xx     	lda	|~~THIS_MODULE+2
  7328 05:17A2: 48           	pha
  7329 05:17A3: AD xx xx     	lda	|~~THIS_MODULE
  7330 05:17A6: 48           	pha
  7331 05:17A7: 22 xx xx xx  	jsl	~~k_exec_throw_exception
  7332                        L10122:
  7333                        ;}
  7334                        	.line	1534
  7335                        L216:
  7336 05:17AB: A5 02        	lda	<L212+2
  7337 05:17AD: 85 06        	sta	<L212+2+4
  7338 05:17AF: A5 01        	lda	<L212+1
  7339 05:17B1: 85 05        	sta	<L212+1+4
  7340 05:17B3: 2B           	pld
  7341 05:17B4: 3B           	tsc
  7342 05:17B5: 18           	clc
  7343 05:17B6: 69 04 00     	adc	#L212+4
  7344 05:17B9: 1B           	tcs
  7345 05:17BA: 6B           	rtl
  7346                        	.endblock	1534
  7347             00000000   L212	equ	0
  7348             00000001   L213	equ	1
  7349 05:17BB:              	ends
  7350                        	efunc
  7351                        	.endfunc	1534,1,0
  7352                        	.line	1534
  7353                        	data
  7354                        L206:
  7355 00:0778: 44 65 61 6C  	db	$44,$65,$61,$6C,$6C,$6F,$63,$20,$6F,$66,
                    $20,$4E,$55,$4C,$4C
       00:077C: 6C 6F 63 20 
       00:0780: 6F 66 20 4E 
       00:0784: 55 4C 4C 
  7356 00:0787: 20 72 65 66  	db	$20,$72,$65,$66,$65,$72,$65,$6E,$63,$65,
                    $00
       00:078B: 65 72 65 6E 
       00:078F: 63 65 00 
  7357 00:0792:              	ends
  7358                        ;
  7359                        ;
  7360                        ;BOOL k_send_message(LPVOID queueName,MSGTYPE msgT
                    ype,LPVOID pmsgData,UINT size)
  Sat Jul 10 2021  1:15                                                Page 148


  7361                        ;{
  7362                        	.line	1537
  7363                        	.line	1538
  7364                        	EVTMAN
  7365                        	xdef	~~k_send_message
  7366                        	func
  7367                        	.function	1538
  7368                        ~~k_send_message:
  7369                        	longa	on
  7370                        	longi	on
  7371 05:17BB: 3B           	tsc
  7372 05:17BC: 38           	sec
  7373 05:17BD: E9 09 00     	sbc	#L218
  7374 05:17C0: 1B           	tcs
  7375 05:17C1: 0B           	phd
  7376 05:17C2: 5B           	tcd
  7377             00000004   queueName_0	set	4
  7378             00000008   msgType_0	set	8
  7379             0000000A   pmsgData_0	set	10
  7380             0000000E   size_0	set	14
  7381                        	.block	1538
  7382                        ;	BOOL bRet = FALSE;
  7383                        ;	PFXOSMESSAGE pmsg = NULL;
  7384                        ;
  7385                        ;	//k_debug_integer("k_send_message::msgType:",msg
                    Type);
  7386                        ;
  7387                        ;	pmsg = (PFXOSMESSAGE)k_mem_allocate_heap(sizeof(
                    FXOSMESSAGE));
  7388             00000000   bRet_1	set	0
  7389             00000001   pmsg_1	set	1
  7390                        	.sym	bRet,0,14,1,8
  7391                        	.sym	pmsg,1,138,1,32,16
  7392                        	.sym	queueName,4,129,6,32
  7393                        	.sym	msgType,8,16,6,16
  7394                        	.sym	pmsgData,10,129,6,32
  7395                        	.sym	size,14,16,6,16
  7396 05:17C3: E2 20        	sep	#$20
  7397                        	longa	off
  7398 05:17C5: 64 05        	stz	<L219+bRet_1
  7399 05:17C7: C2 20        	rep	#$20
  7400                        	longa	on
  7401 05:17C9: 64 06        	stz	<L219+pmsg_1
  7402 05:17CB: 64 08        	stz	<L219+pmsg_1+2
  7403                        	.line	1544
  7404 05:17CD: F4 26 00     	pea	#<$26
  7405 05:17D0: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7406 05:17D4: 85 06        	sta	<L219+pmsg_1
  7407 05:17D6: 86 08        	stx	<L219+pmsg_1+2
  7408                        ;	if(pmsg)
  7409                        	.line	1545
  7410                        ;	{
  7411 05:17D8: A5 06        	lda	<L219+pmsg_1
  7412 05:17DA: 05 08        	ora	<L219+pmsg_1+2
  7413 05:17DC: D0 03        	bne	L221
  7414 05:17DE: 82 F0 00     	brl	L10123
  7415                        L221:
  7416                        	.line	1546
  Sat Jul 10 2021  1:15                                                Page 149


  7417                        ;		pmsg->type = msgType;
  7418                        	.line	1547
  7419 05:17E1: A5 11        	lda	<L218+msgType_0
  7420 05:17E3: A0 08 00     	ldy	#$8
  7421 05:17E6: 97 06        	sta	[<L219+pmsg_1],Y
  7422                        ;		pmsg->pheap = NULL;
  7423                        	.line	1548
  7424 05:17E8: A9 00 00     	lda	#$0
  7425 05:17EB: A0 0E 00     	ldy	#$e
  7426 05:17EE: 97 06        	sta	[<L219+pmsg_1],Y
  7427 05:17F0: A9 00 00     	lda	#$0
  7428 05:17F3: A0 10 00     	ldy	#$10
  7429 05:17F6: 97 06        	sta	[<L219+pmsg_1],Y
  7430                        ;		pmsg->src  = k_exec_get_current_process(
                    )->procId;
  7431                        	.line	1549
  7432 05:17F8: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7433 05:17FC: 85 01        	sta	<R0
  7434 05:17FE: 86 03        	stx	<R0+2
  7435 05:1800: A0 02 00     	ldy	#$2
  7436 05:1803: B7 01        	lda	[<R0],Y
  7437 05:1805: 87 06        	sta	[<L219+pmsg_1]
  7438 05:1807: A0 04 00     	ldy	#$4
  7439 05:180A: B7 01        	lda	[<R0],Y
  7440 05:180C: A0 02 00     	ldy	#$2
  7441 05:180F: 97 06        	sta	[<L219+pmsg_1],Y
  7442                        ;		pmsg->dest = FX_MSG_DEFAULT;
  7443                        	.line	1550
  7444 05:1811: A9 FF FF     	lda	#$ffff
  7445 05:1814: A0 04 00     	ldy	#$4
  7446 05:1817: 97 06        	sta	[<L219+pmsg_1],Y
  7447 05:1819: A9 FF FF     	lda	#$ffff
  7448 05:181C: A0 06 00     	ldy	#$6
  7449 05:181F: 97 06        	sta	[<L219+pmsg_1],Y
  7450                        ;
  7451                        ;		if(queueName)
  7452                        	.line	1552
  7453                        ;		{
  7454 05:1821: A5 0D        	lda	<L218+queueName_0
  7455 05:1823: 05 0F        	ora	<L218+queueName_0+2
  7456 05:1825: D0 03        	bne	L222
  7457 05:1827: 82 24 00     	brl	L10124
  7458                        L222:
  7459                        	.line	1553
  7460                        ;			pmsg->dest = ((PFXPROCESS)queueN
                    ame)->procId;
  7461                        	.line	1554
  7462 05:182A: A0 02 00     	ldy	#$2
  7463 05:182D: B7 0D        	lda	[<L218+queueName_0],Y
  7464 05:182F: A0 04 00     	ldy	#$4
  7465 05:1832: 97 06        	sta	[<L219+pmsg_1],Y
  7466 05:1834: A0 04 00     	ldy	#$4
  7467 05:1837: B7 0D        	lda	[<L218+queueName_0],Y
  7468 05:1839: A0 06 00     	ldy	#$6
  7469 05:183C: 97 06        	sta	[<L219+pmsg_1],Y
  7470                        ;			k_debug_integer("k_send_message:
                    :DESTINATION:",pmsg->dest);
  7471                        	.line	1555
  Sat Jul 10 2021  1:15                                                Page 150


  7472 05:183E: A0 04 00     	ldy	#$4
  7473 05:1841: B7 06        	lda	[<L219+pmsg_1],Y
  7474 05:1843: 48           	pha
  7475 05:1844: F4 xx xx     	pea	#^L217
  7476 05:1847: F4 xx xx     	pea	#<L217
  7477 05:184A: 22 xx xx xx  	jsl	~~k_debug_integer
  7478                        ;		}
  7479                        	.line	1556
  7480                        ;
  7481                        ;		if(size == -1)
  7482                        L10124:
  7483                        	.line	1558
  7484                        ;		{
  7485 05:184E: A5 17        	lda	<L218+size_0
  7486 05:1850: C9 FF FF     	cmp	#<$ffffffff
  7487 05:1853: F0 03        	beq	L223
  7488 05:1855: 82 27 00     	brl	L10125
  7489                        L223:
  7490                        	.line	1559
  7491                        ;			pmsg->pheap = pmsgData;
  7492                        	.line	1560
  7493 05:1858: A5 13        	lda	<L218+pmsgData_0
  7494 05:185A: A0 0E 00     	ldy	#$e
  7495 05:185D: 97 06        	sta	[<L219+pmsg_1],Y
  7496 05:185F: A5 15        	lda	<L218+pmsgData_0+2
  7497 05:1861: A0 10 00     	ldy	#$10
  7498 05:1864: 97 06        	sta	[<L219+pmsg_1],Y
  7499                        ;			k_debug_pointer("k_send_message:
                    :SPECIALDATA:",pmsg->pheap);
  7500                        	.line	1561
  7501 05:1866: A0 10 00     	ldy	#$10
  7502 05:1869: B7 06        	lda	[<L219+pmsg_1],Y
  7503 05:186B: 48           	pha
  7504 05:186C: A0 0E 00     	ldy	#$e
  7505 05:186F: B7 06        	lda	[<L219+pmsg_1],Y
  7506 05:1871: 48           	pha
  7507 05:1872: F4 xx xx     	pea	#^L217+29
  7508 05:1875: F4 xx xx     	pea	#<L217+29
  7509 05:1878: 22 xx xx xx  	jsl	~~k_debug_pointer
  7510                        ;		}
  7511                        	.line	1562
  7512                        ;		else
  7513 05:187C: 82 42 00     	brl	L10126
  7514                        L10125:
  7515                        ;		{
  7516                        	.line	1564
  7517                        ;			if(size > MAX_FXMSG_DATA)
  7518                        	.line	1565
  7519                        ;				size = MAX_FXMSG_DATA;
  7520 05:187F: A9 10 00     	lda	#$10
  7521 05:1882: C5 17        	cmp	<L218+size_0
  7522 05:1884: 90 03        	bcc	L224
  7523 05:1886: 82 05 00     	brl	L10127
  7524                        L224:
  7525                        	.line	1566
  7526 05:1889: A9 10 00     	lda	#$10
  7527 05:188C: 85 17        	sta	<L218+size_0
  7528                        ;
  Sat Jul 10 2021  1:15                                                Page 151


  7529                        ;			if(pmsgData)
  7530                        L10127:
  7531                        	.line	1568
  7532                        ;				pmsg->pheap = k_alloc_me
                    ssage_arg(pmsgData,size);
  7533 05:188E: A5 13        	lda	<L218+pmsgData_0
  7534 05:1890: 05 15        	ora	<L218+pmsgData_0+2
  7535 05:1892: D0 03        	bne	L225
  7536 05:1894: 82 1F 00     	brl	L10128
  7537                        L225:
  7538                        	.line	1569
  7539 05:1897: D4 17        	pei	<L218+size_0
  7540 05:1899: D4 15        	pei	<L218+pmsgData_0+2
  7541 05:189B: D4 13        	pei	<L218+pmsgData_0
  7542 05:189D: 22 31 17 05  	jsl	~~k_alloc_message_arg
  7543 05:18A1: 85 01        	sta	<R0
  7544 05:18A3: 86 03        	stx	<R0+2
  7545 05:18A5: A5 01        	lda	<R0
  7546 05:18A7: A0 0E 00     	ldy	#$e
  7547 05:18AA: 97 06        	sta	[<L219+pmsg_1],Y
  7548 05:18AC: A5 03        	lda	<R0+2
  7549 05:18AE: A0 10 00     	ldy	#$10
  7550 05:18B1: 97 06        	sta	[<L219+pmsg_1],Y
  7551                        ;			else
  7552 05:18B3: 82 0B 00     	brl	L10129
  7553                        L10128:
  7554                        ;				pmsg->data[0] = 0;
  7555                        	.line	1571
  7556 05:18B6: E2 20        	sep	#$20
  7557                        	longa	off
  7558 05:18B8: A9 00        	lda	#$0
  7559 05:18BA: A0 16 00     	ldy	#$16
  7560 05:18BD: 97 06        	sta	[<L219+pmsg_1],Y
  7561 05:18BF: C2 20        	rep	#$20
  7562                        	longa	on
  7563                        L10129:
  7564                        ;		}
  7565                        	.line	1572
  7566                        L10126:
  7567                        ;
  7568                        ;		k_enqueue_with_lock(_k_eventQueue,pmsg);
  7569                        	.line	1574
  7570 05:18C1: D4 08        	pei	<L219+pmsg_1+2
  7571 05:18C3: D4 06        	pei	<L219+pmsg_1
  7572 05:18C5: AD xx xx     	lda	|~~_k_eventQueue+2
  7573 05:18C8: 48           	pha
  7574 05:18C9: AD xx xx     	lda	|~~_k_eventQueue
  7575 05:18CC: 48           	pha
  7576 05:18CD: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  7577                        ;	}
  7578                        	.line	1575
  7579                        ;
  7580                        ;
  7581                        ;	//k_debug_string("k_send_message::exit\r\n");
  7582                        ;
  7583                        ;	return bRet;
  7584                        L10123:
  7585                        	.line	1580
  Sat Jul 10 2021  1:15                                                Page 152


  7586 05:18D1: A5 05        	lda	<L219+bRet_1
  7587 05:18D3: 29 FF 00     	and	#$ff
  7588                        L226:
  7589 05:18D6: A8           	tay
  7590 05:18D7: A5 0B        	lda	<L218+2
  7591 05:18D9: 85 17        	sta	<L218+2+12
  7592 05:18DB: A5 0A        	lda	<L218+1
  7593 05:18DD: 85 16        	sta	<L218+1+12
  7594 05:18DF: 2B           	pld
  7595 05:18E0: 3B           	tsc
  7596 05:18E1: 18           	clc
  7597 05:18E2: 69 15 00     	adc	#L218+12
  7598 05:18E5: 1B           	tcs
  7599 05:18E6: 98           	tya
  7600 05:18E7: 6B           	rtl
  7601                        ;}
  7602                        	.line	1581
  7603                        	.endblock	1581
  7604             00000009   L218	equ	9
  7605             00000005   L219	equ	5
  7606 05:18E8:              	ends
  7607                        	efunc
  7608                        	.endfunc	1581,5,9
  7609                        	.line	1581
  7610                        	data
  7611                        L217:
  7612 00:0792: 6B 5F 73 65  	db	$6B,$5F,$73,$65,$6E,$64,$5F,$6D,$65,$73,
                    $73,$61,$67,$65,$3A
       00:0796: 6E 64 5F 6D 
       00:079A: 65 73 73 61 
       00:079E: 67 65 3A 
  7613 00:07A1: 3A 44 45 53  	db	$3A,$44,$45,$53,$54,$49,$4E,$41,$54,$49,
                    $4F,$4E,$3A,$00,$6B
       00:07A5: 54 49 4E 41 
       00:07A9: 54 49 4F 4E 
       00:07AD: 3A 00 6B 
  7614 00:07B0: 5F 73 65 6E  	db	$5F,$73,$65,$6E,$64,$5F,$6D,$65,$73,$73,
                    $61,$67,$65,$3A,$3A
       00:07B4: 64 5F 6D 65 
       00:07B8: 73 73 61 67 
       00:07BC: 65 3A 3A 
  7615 00:07BF: 53 50 45 43  	db	$53,$50,$45,$43,$49,$41,$4C,$44,$41,$54,
                    $41,$3A,$00
       00:07C3: 49 41 4C 44 
       00:07C7: 41 54 41 3A 
       00:07CB: 00 
  7616 00:07CC:              	ends
  7617                        ;
  7618                        ;
  7619                        ;BOOL k_send_window_message(HWND hWnd,MSGTYPE msgT
                    ype,LPVOID pmsgData,UINT size)
  7620                        ;{
  7621                        	.line	1584
  7622                        	.line	1585
  7623                        	EVTMAN
  7624                        	xdef	~~k_send_window_message
  7625                        	func
  7626                        	.function	1585
  Sat Jul 10 2021  1:15                                                Page 153


  7627                        ~~k_send_window_message:
  7628                        	longa	on
  7629                        	longi	on
  7630 05:18E8: 3B           	tsc
  7631 05:18E9: 38           	sec
  7632 05:18EA: E9 09 00     	sbc	#L228
  7633 05:18ED: 1B           	tcs
  7634 05:18EE: 0B           	phd
  7635 05:18EF: 5B           	tcd
  7636             00000004   hWnd_0	set	4
  7637             00000008   msgType_0	set	8
  7638             0000000A   pmsgData_0	set	10
  7639             0000000E   size_0	set	14
  7640                        	.block	1585
  7641                        ;	BOOL bRet = FALSE;
  7642                        ;	PFXOSMESSAGE pmsg = NULL;
  7643                        ;
  7644                        ;	//k_debug_pointer("k_send_window_message::hWnd:"
                    ,hWnd);
  7645                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  7646                        ;
  7647                        ;	if(hWnd)
  7648             00000000   bRet_1	set	0
  7649             00000001   pmsg_1	set	1
  7650                        	.sym	bRet,0,14,1,8
  7651                        	.sym	pmsg,1,138,1,32,16
  7652                        	.sym	hWnd,4,129,6,32
  7653                        	.sym	msgType,8,16,6,16
  7654                        	.sym	pmsgData,10,129,6,32
  7655                        	.sym	size,14,16,6,16
  7656 05:18F0: E2 20        	sep	#$20
  7657                        	longa	off
  7658 05:18F2: 64 05        	stz	<L229+bRet_1
  7659 05:18F4: C2 20        	rep	#$20
  7660                        	longa	on
  7661 05:18F6: 64 06        	stz	<L229+pmsg_1
  7662 05:18F8: 64 08        	stz	<L229+pmsg_1+2
  7663                        	.line	1592
  7664                        ;	{
  7665 05:18FA: A5 0D        	lda	<L228+hWnd_0
  7666 05:18FC: 05 0F        	ora	<L228+hWnd_0+2
  7667 05:18FE: D0 03        	bne	L231
  7668 05:1900: 82 D9 00     	brl	L10130
  7669                        L231:
  7670                        	.line	1593
  7671                        ;		pmsg = (PFXOSMESSAGE)k_mem_allocate_heap
                    (sizeof(FXOSMESSAGE));
  7672                        	.line	1594
  7673 05:1903: F4 26 00     	pea	#<$26
  7674 05:1906: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7675 05:190A: 85 06        	sta	<L229+pmsg_1
  7676 05:190C: 86 08        	stx	<L229+pmsg_1+2
  7677                        ;		if(pmsg)
  7678                        	.line	1595
  7679                        ;		{
  7680 05:190E: A5 06        	lda	<L229+pmsg_1
  7681 05:1910: 05 08        	ora	<L229+pmsg_1+2
  Sat Jul 10 2021  1:15                                                Page 154


  7682 05:1912: D0 03        	bne	L232
  7683 05:1914: 82 C5 00     	brl	L10131
  7684                        L232:
  7685                        	.line	1596
  7686                        ;			pmsg->type = msgType;
  7687                        	.line	1597
  7688 05:1917: A5 11        	lda	<L228+msgType_0
  7689 05:1919: A0 08 00     	ldy	#$8
  7690 05:191C: 97 06        	sta	[<L229+pmsg_1],Y
  7691                        ;			pmsg->pheap = NULL;
  7692                        	.line	1598
  7693 05:191E: A9 00 00     	lda	#$0
  7694 05:1921: A0 0E 00     	ldy	#$e
  7695 05:1924: 97 06        	sta	[<L229+pmsg_1],Y
  7696 05:1926: A9 00 00     	lda	#$0
  7697 05:1929: A0 10 00     	ldy	#$10
  7698 05:192C: 97 06        	sta	[<L229+pmsg_1],Y
  7699                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  7700                        	.line	1599
  7701 05:192E: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7702 05:1932: 85 01        	sta	<R0
  7703 05:1934: 86 03        	stx	<R0+2
  7704 05:1936: A0 02 00     	ldy	#$2
  7705 05:1939: B7 01        	lda	[<R0],Y
  7706 05:193B: 87 06        	sta	[<L229+pmsg_1]
  7707 05:193D: A0 04 00     	ldy	#$4
  7708 05:1940: B7 01        	lda	[<R0],Y
  7709 05:1942: A0 02 00     	ldy	#$2
  7710 05:1945: 97 06        	sta	[<L229+pmsg_1],Y
  7711                        ;			pmsg->dest = FX_MSG_DEFAULT;
  7712                        	.line	1600
  7713 05:1947: A9 FF FF     	lda	#$ffff
  7714 05:194A: A0 04 00     	ldy	#$4
  7715 05:194D: 97 06        	sta	[<L229+pmsg_1],Y
  7716 05:194F: A9 FF FF     	lda	#$ffff
  7717 05:1952: A0 06 00     	ldy	#$6
  7718 05:1955: 97 06        	sta	[<L229+pmsg_1],Y
  7719                        ;			pmsg->hwnd = hWnd;
  7720                        	.line	1601
  7721 05:1957: A5 0D        	lda	<L228+hWnd_0
  7722 05:1959: A0 0A 00     	ldy	#$a
  7723 05:195C: 97 06        	sta	[<L229+pmsg_1],Y
  7724 05:195E: A5 0F        	lda	<L228+hWnd_0+2
  7725 05:1960: A0 0C 00     	ldy	#$c
  7726 05:1963: 97 06        	sta	[<L229+pmsg_1],Y
  7727                        ;
  7728                        ;			if(size == -1)
  7729                        	.line	1603
  7730                        ;			{
  7731 05:1965: A5 17        	lda	<L228+size_0
  7732 05:1967: C9 FF FF     	cmp	#<$ffffffff
  7733 05:196A: F0 03        	beq	L233
  7734 05:196C: 82 11 00     	brl	L10132
  7735                        L233:
  7736                        	.line	1604
  7737                        ;				pmsg->pheap = pmsgData;
  7738                        	.line	1605
  Sat Jul 10 2021  1:15                                                Page 155


  7739 05:196F: A5 13        	lda	<L228+pmsgData_0
  7740 05:1971: A0 0E 00     	ldy	#$e
  7741 05:1974: 97 06        	sta	[<L229+pmsg_1],Y
  7742 05:1976: A5 15        	lda	<L228+pmsgData_0+2
  7743 05:1978: A0 10 00     	ldy	#$10
  7744 05:197B: 97 06        	sta	[<L229+pmsg_1],Y
  7745                        ;				//k_debug_pointer("k_sen
                    d_message::SPECIALDATA:",pmsg->pheap);
  7746                        ;			}
  7747                        	.line	1607
  7748                        ;			else if(size > 0)
  7749 05:197D: 82 4C 00     	brl	L10133
  7750                        L10132:
  7751                        	.line	1608
  7752                        ;			{
  7753 05:1980: A9 00 00     	lda	#$0
  7754 05:1983: C5 17        	cmp	<L228+size_0
  7755 05:1985: 90 03        	bcc	L234
  7756 05:1987: 82 42 00     	brl	L10134
  7757                        L234:
  7758                        	.line	1609
  7759                        ;				if(size > MAX_FXMSG_DATA
                    )
  7760                        	.line	1610
  7761                        ;					size = MAX_FXMSG
                    _DATA;
  7762 05:198A: A9 10 00     	lda	#$10
  7763 05:198D: C5 17        	cmp	<L228+size_0
  7764 05:198F: 90 03        	bcc	L235
  7765 05:1991: 82 05 00     	brl	L10135
  7766                        L235:
  7767                        	.line	1611
  7768 05:1994: A9 10 00     	lda	#$10
  7769 05:1997: 85 17        	sta	<L228+size_0
  7770                        ;
  7771                        ;				if(pmsgData)
  7772                        L10135:
  7773                        	.line	1613
  7774                        ;					pmsg->pheap = k_
                    alloc_message_arg(pmsgData,size);
  7775 05:1999: A5 13        	lda	<L228+pmsgData_0
  7776 05:199B: 05 15        	ora	<L228+pmsgData_0+2
  7777 05:199D: D0 03        	bne	L236
  7778 05:199F: 82 1F 00     	brl	L10136
  7779                        L236:
  7780                        	.line	1614
  7781 05:19A2: D4 17        	pei	<L228+size_0
  7782 05:19A4: D4 15        	pei	<L228+pmsgData_0+2
  7783 05:19A6: D4 13        	pei	<L228+pmsgData_0
  7784 05:19A8: 22 31 17 05  	jsl	~~k_alloc_message_arg
  7785 05:19AC: 85 01        	sta	<R0
  7786 05:19AE: 86 03        	stx	<R0+2
  7787 05:19B0: A5 01        	lda	<R0
  7788 05:19B2: A0 0E 00     	ldy	#$e
  7789 05:19B5: 97 06        	sta	[<L229+pmsg_1],Y
  7790 05:19B7: A5 03        	lda	<R0+2
  7791 05:19B9: A0 10 00     	ldy	#$10
  7792 05:19BC: 97 06        	sta	[<L229+pmsg_1],Y
  Sat Jul 10 2021  1:15                                                Page 156


  7793                        ;				else
  7794 05:19BE: 82 0B 00     	brl	L10137
  7795                        L10136:
  7796                        ;					pmsg->data[0] = 
                    0;
  7797                        	.line	1616
  7798 05:19C1: E2 20        	sep	#$20
  7799                        	longa	off
  7800 05:19C3: A9 00        	lda	#$0
  7801 05:19C5: A0 16 00     	ldy	#$16
  7802 05:19C8: 97 06        	sta	[<L229+pmsg_1],Y
  7803 05:19CA: C2 20        	rep	#$20
  7804                        	longa	on
  7805                        L10137:
  7806                        ;			}
  7807                        	.line	1617
  7808                        ;
  7809                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,pmsg);
  7810                        L10134:
  7811                        L10133:
  7812                        	.line	1619
  7813 05:19CC: D4 08        	pei	<L229+pmsg_1+2
  7814 05:19CE: D4 06        	pei	<L229+pmsg_1
  7815 05:19D0: AD xx xx     	lda	|~~_k_eventQueue+2
  7816 05:19D3: 48           	pha
  7817 05:19D4: AD xx xx     	lda	|~~_k_eventQueue
  7818 05:19D7: 48           	pha
  7819 05:19D8: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  7820                        ;		}
  7821                        	.line	1620
  7822                        ;	}
  7823                        L10131:
  7824                        	.line	1621
  7825                        ;
  7826                        ;	//k_debug_string("k_send_message::exit\r\n");
  7827                        ;
  7828                        ;	return bRet;
  7829                        L10130:
  7830                        	.line	1625
  7831 05:19DC: A5 05        	lda	<L229+bRet_1
  7832 05:19DE: 29 FF 00     	and	#$ff
  7833                        L237:
  7834 05:19E1: A8           	tay
  7835 05:19E2: A5 0B        	lda	<L228+2
  7836 05:19E4: 85 17        	sta	<L228+2+12
  7837 05:19E6: A5 0A        	lda	<L228+1
  7838 05:19E8: 85 16        	sta	<L228+1+12
  7839 05:19EA: 2B           	pld
  7840 05:19EB: 3B           	tsc
  7841 05:19EC: 18           	clc
  7842 05:19ED: 69 15 00     	adc	#L228+12
  7843 05:19F0: 1B           	tcs
  7844 05:19F1: 98           	tya
  7845 05:19F2: 6B           	rtl
  7846                        ;}
  7847                        	.line	1626
  7848                        	.endblock	1626
  Sat Jul 10 2021  1:15                                                Page 157


  7849             00000009   L228	equ	9
  7850             00000005   L229	equ	5
  7851 05:19F3:              	ends
  7852                        	efunc
  7853                        	.endfunc	1626,5,9
  7854                        	.line	1626
  7855                        ;
  7856                        ;BOOL k_send_window_native_message(HWND hWnd,MSGTY
                    PE msgType,LPVOID msgBytes,UINT size)
  7857                        ;{
  7858                        	.line	1628
  7859                        	.line	1629
  7860                        	EVTMAN
  7861                        	xdef	~~k_send_window_native_message
  7862                        	func
  7863                        	.function	1629
  7864                        ~~k_send_window_native_message:
  7865                        	longa	on
  7866                        	longi	on
  7867 05:19F3: 3B           	tsc
  7868 05:19F4: 38           	sec
  7869 05:19F5: E9 0B 00     	sbc	#L238
  7870 05:19F8: 1B           	tcs
  7871 05:19F9: 0B           	phd
  7872 05:19FA: 5B           	tcd
  7873             00000004   hWnd_0	set	4
  7874             00000008   msgType_0	set	8
  7875             0000000A   msgBytes_0	set	10
  7876             0000000E   size_0	set	14
  7877                        	.block	1629
  7878                        ;	BOOL bRet = FALSE;
  7879                        ;	PFXOSMESSAGE pmsg = NULL;
  7880                        ;
  7881                        ;	int i = 0;
  7882                        ;
  7883                        ;	//k_debug_pointer("k_send_window_message::hWnd:"
                    ,hWnd);
  7884                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  7885                        ;
  7886                        ;	if(hWnd)
  7887             00000000   bRet_1	set	0
  7888             00000001   pmsg_1	set	1
  7889             00000005   i_1	set	5
  7890                        	.sym	bRet,0,14,1,8
  7891                        	.sym	pmsg,1,138,1,32,16
  7892                        	.sym	i,5,5,1,16
  7893                        	.sym	hWnd,4,129,6,32
  7894                        	.sym	msgType,8,16,6,16
  7895                        	.sym	msgBytes,10,129,6,32
  7896                        	.sym	size,14,16,6,16
  7897 05:19FB: E2 20        	sep	#$20
  7898                        	longa	off
  7899 05:19FD: 64 05        	stz	<L239+bRet_1
  7900 05:19FF: C2 20        	rep	#$20
  7901                        	longa	on
  7902 05:1A01: 64 06        	stz	<L239+pmsg_1
  7903 05:1A03: 64 08        	stz	<L239+pmsg_1+2
  Sat Jul 10 2021  1:15                                                Page 158


  7904 05:1A05: 64 0A        	stz	<L239+i_1
  7905                        	.line	1638
  7906                        ;	{
  7907 05:1A07: A5 0F        	lda	<L238+hWnd_0
  7908 05:1A09: 05 11        	ora	<L238+hWnd_0+2
  7909 05:1A0B: D0 03        	bne	L241
  7910 05:1A0D: 82 BC 00     	brl	L10138
  7911                        L241:
  7912                        	.line	1639
  7913                        ;		pmsg = (PFXOSMESSAGE)k_mem_allocate_heap
                    (sizeof(FXOSMESSAGE));
  7914                        	.line	1640
  7915 05:1A10: F4 26 00     	pea	#<$26
  7916 05:1A13: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7917 05:1A17: 85 06        	sta	<L239+pmsg_1
  7918 05:1A19: 86 08        	stx	<L239+pmsg_1+2
  7919                        ;		if(pmsg)
  7920                        	.line	1641
  7921                        ;		{
  7922 05:1A1B: A5 06        	lda	<L239+pmsg_1
  7923 05:1A1D: 05 08        	ora	<L239+pmsg_1+2
  7924 05:1A1F: D0 03        	bne	L242
  7925 05:1A21: 82 A8 00     	brl	L10139
  7926                        L242:
  7927                        	.line	1642
  7928                        ;			pmsg->type = msgType;
  7929                        	.line	1643
  7930 05:1A24: A5 13        	lda	<L238+msgType_0
  7931 05:1A26: A0 08 00     	ldy	#$8
  7932 05:1A29: 97 06        	sta	[<L239+pmsg_1],Y
  7933                        ;			pmsg->pheap = NULL;
  7934                        	.line	1644
  7935 05:1A2B: A9 00 00     	lda	#$0
  7936 05:1A2E: A0 0E 00     	ldy	#$e
  7937 05:1A31: 97 06        	sta	[<L239+pmsg_1],Y
  7938 05:1A33: A9 00 00     	lda	#$0
  7939 05:1A36: A0 10 00     	ldy	#$10
  7940 05:1A39: 97 06        	sta	[<L239+pmsg_1],Y
  7941                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  7942                        	.line	1645
  7943 05:1A3B: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7944 05:1A3F: 85 01        	sta	<R0
  7945 05:1A41: 86 03        	stx	<R0+2
  7946 05:1A43: A0 02 00     	ldy	#$2
  7947 05:1A46: B7 01        	lda	[<R0],Y
  7948 05:1A48: 87 06        	sta	[<L239+pmsg_1]
  7949 05:1A4A: A0 04 00     	ldy	#$4
  7950 05:1A4D: B7 01        	lda	[<R0],Y
  7951 05:1A4F: A0 02 00     	ldy	#$2
  7952 05:1A52: 97 06        	sta	[<L239+pmsg_1],Y
  7953                        ;			pmsg->dest = FX_MSG_DEFAULT;
  7954                        	.line	1646
  7955 05:1A54: A9 FF FF     	lda	#$ffff
  7956 05:1A57: A0 04 00     	ldy	#$4
  7957 05:1A5A: 97 06        	sta	[<L239+pmsg_1],Y
  7958 05:1A5C: A9 FF FF     	lda	#$ffff
  7959 05:1A5F: A0 06 00     	ldy	#$6
  Sat Jul 10 2021  1:15                                                Page 159


  7960 05:1A62: 97 06        	sta	[<L239+pmsg_1],Y
  7961                        ;			pmsg->hwnd = hWnd;
  7962                        	.line	1647
  7963 05:1A64: A5 0F        	lda	<L238+hWnd_0
  7964 05:1A66: A0 0A 00     	ldy	#$a
  7965 05:1A69: 97 06        	sta	[<L239+pmsg_1],Y
  7966 05:1A6B: A5 11        	lda	<L238+hWnd_0+2
  7967 05:1A6D: A0 0C 00     	ldy	#$c
  7968 05:1A70: 97 06        	sta	[<L239+pmsg_1],Y
  7969                        ;
  7970                        ;			if(msgBytes)
  7971                        	.line	1649
  7972                        ;			{
  7973 05:1A72: A5 15        	lda	<L238+msgBytes_0
  7974 05:1A74: 05 17        	ora	<L238+msgBytes_0+2
  7975 05:1A76: D0 03        	bne	L243
  7976 05:1A78: 82 41 00     	brl	L10140
  7977                        L243:
  7978                        	.line	1650
  7979                        ;				memset(pmsg->data,0,MAX_
                    FXMSG_DATA);
  7980                        	.line	1651
  7981 05:1A7B: F4 10 00     	pea	#<$10
  7982 05:1A7E: F4 00 00     	pea	#<$0
  7983 05:1A81: 18           	clc
  7984 05:1A82: A9 16 00     	lda	#$16
  7985 05:1A85: 65 06        	adc	<L239+pmsg_1
  7986 05:1A87: 85 01        	sta	<R0
  7987 05:1A89: A9 00 00     	lda	#$0
  7988 05:1A8C: 65 08        	adc	<L239+pmsg_1+2
  7989 05:1A8E: 85 03        	sta	<R0+2
  7990 05:1A90: D4 03        	pei	<R0+2
  7991 05:1A92: D4 01        	pei	<R0
  7992 05:1A94: 22 xx xx xx  	jsl	~~memset
  7993                        ;				for(i=0;i<size;i++)
  7994                        	.line	1652
  7995 05:1A98: 64 0A        	stz	<L239+i_1
  7996 05:1A9A: 82 16 00     	brl	L10144
  7997                        L10143:
  7998                        ;					pmsg->data[i] = 
                    ((LPSTR)msgBytes)[i];
  7999                        	.line	1653
  8000 05:1A9D: 18           	clc
  8001 05:1A9E: A9 16 00     	lda	#$16
  8002 05:1AA1: 65 0A        	adc	<L239+i_1
  8003 05:1AA3: 85 01        	sta	<R0
  8004 05:1AA5: E2 20        	sep	#$20
  8005                        	longa	off
  8006 05:1AA7: A4 0A        	ldy	<L239+i_1
  8007 05:1AA9: B7 15        	lda	[<L238+msgBytes_0],Y
  8008 05:1AAB: A4 01        	ldy	<R0
  8009 05:1AAD: 97 06        	sta	[<L239+pmsg_1],Y
  8010 05:1AAF: C2 20        	rep	#$20
  8011                        	longa	on
  8012                        L10141:
  8013 05:1AB1: E6 0A        	inc	<L239+i_1
  8014                        L10144:
  8015 05:1AB3: A5 0A        	lda	<L239+i_1
  Sat Jul 10 2021  1:15                                                Page 160


  8016 05:1AB5: C5 19        	cmp	<L238+size_0
  8017 05:1AB7: B0 03        	bcs	L244
  8018 05:1AB9: 82 E1 FF     	brl	L10143
  8019                        L244:
  8020                        L10142:
  8021                        ;
  8022                        ;			}
  8023                        	.line	1655
  8024                        ;
  8025                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,pmsg);
  8026                        L10140:
  8027                        	.line	1657
  8028 05:1ABC: D4 08        	pei	<L239+pmsg_1+2
  8029 05:1ABE: D4 06        	pei	<L239+pmsg_1
  8030 05:1AC0: AD xx xx     	lda	|~~_k_eventQueue+2
  8031 05:1AC3: 48           	pha
  8032 05:1AC4: AD xx xx     	lda	|~~_k_eventQueue
  8033 05:1AC7: 48           	pha
  8034 05:1AC8: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  8035                        ;		}
  8036                        	.line	1658
  8037                        ;	}
  8038                        L10139:
  8039                        	.line	1659
  8040                        ;
  8041                        ;	//k_debug_string("k_send_message::exit\r\n");
  8042                        ;
  8043                        ;	return bRet;
  8044                        L10138:
  8045                        	.line	1663
  8046 05:1ACC: A5 05        	lda	<L239+bRet_1
  8047 05:1ACE: 29 FF 00     	and	#$ff
  8048                        L245:
  8049 05:1AD1: A8           	tay
  8050 05:1AD2: A5 0D        	lda	<L238+2
  8051 05:1AD4: 85 19        	sta	<L238+2+12
  8052 05:1AD6: A5 0C        	lda	<L238+1
  8053 05:1AD8: 85 18        	sta	<L238+1+12
  8054 05:1ADA: 2B           	pld
  8055 05:1ADB: 3B           	tsc
  8056 05:1ADC: 18           	clc
  8057 05:1ADD: 69 17 00     	adc	#L238+12
  8058 05:1AE0: 1B           	tcs
  8059 05:1AE1: 98           	tya
  8060 05:1AE2: 6B           	rtl
  8061                        ;}
  8062                        	.line	1664
  8063                        	.endblock	1664
  8064             0000000B   L238	equ	11
  8065             00000005   L239	equ	5
  8066 05:1AE3:              	ends
  8067                        	efunc
  8068                        	.endfunc	1664,5,11
  8069                        	.line	1664
  8070                        ;
  8071                        ;
  8072                        ;BOOL k_send_command_message(HWND hWnd,MSGTYPE msg
  Sat Jul 10 2021  1:15                                                Page 161


                    Type,UINT cmdCId,UINT cmdMId,ULONG pData1,ULONG pData2)
  8073                        ;{
  8074                        	.line	1667
  8075                        	.line	1668
  8076                        	EVTMAN
  8077                        	xdef	~~k_send_command_message
  8078                        	func
  8079                        	.function	1668
  8080                        ~~k_send_command_message:
  8081                        	longa	on
  8082                        	longi	on
  8083 05:1AE3: 3B           	tsc
  8084 05:1AE4: 38           	sec
  8085 05:1AE5: E9 09 00     	sbc	#L246
  8086 05:1AE8: 1B           	tcs
  8087 05:1AE9: 0B           	phd
  8088 05:1AEA: 5B           	tcd
  8089             00000004   hWnd_0	set	4
  8090             00000008   msgType_0	set	8
  8091             0000000A   cmdCId_0	set	10
  8092             0000000C   cmdMId_0	set	12
  8093             0000000E   pData1_0	set	14
  8094             00000012   pData2_0	set	18
  8095                        	.block	1668
  8096                        ;	BOOL bRet = FALSE;
  8097                        ;	PFXCMDMESSAGE pmsg = NULL;
  8098                        ;
  8099                        ;	//k_debug_pointer("k_send_command_message::hWnd:
                    ",hWnd);
  8100                        ;	//k_debug_long("k_send_command_message::pData1:"
                    ,pData1);
  8101                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  8102                        ;
  8103                        ;	if(hWnd)
  8104             00000000   bRet_1	set	0
  8105             00000001   pmsg_1	set	1
  8106                        	.sym	bRet,0,14,1,8
  8107                        	.sym	pmsg,1,138,1,32,17
  8108                        	.sym	hWnd,4,129,6,32
  8109                        	.sym	msgType,8,16,6,16
  8110                        	.sym	cmdCId,10,16,6,16
  8111                        	.sym	cmdMId,12,16,6,16
  8112                        	.sym	pData1,14,18,6,32
  8113                        	.sym	pData2,18,18,6,32
  8114 05:1AEB: E2 20        	sep	#$20
  8115                        	longa	off
  8116 05:1AED: 64 05        	stz	<L247+bRet_1
  8117 05:1AEF: C2 20        	rep	#$20
  8118                        	longa	on
  8119 05:1AF1: 64 06        	stz	<L247+pmsg_1
  8120 05:1AF3: 64 08        	stz	<L247+pmsg_1+2
  8121                        	.line	1676
  8122                        ;	{
  8123 05:1AF5: A5 0D        	lda	<L246+hWnd_0
  8124 05:1AF7: 05 0F        	ora	<L246+hWnd_0+2
  8125 05:1AF9: D0 03        	bne	L249
  8126 05:1AFB: 82 AC 00     	brl	L10145
  Sat Jul 10 2021  1:15                                                Page 162


  8127                        L249:
  8128                        	.line	1677
  8129                        ;		pmsg = (PFXCMDMESSAGE)k_mem_allocate_hea
                    p(sizeof(FXCMDMESSAGE));
  8130                        	.line	1678
  8131 05:1AFE: F4 26 00     	pea	#<$26
  8132 05:1B01: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  8133 05:1B05: 85 06        	sta	<L247+pmsg_1
  8134 05:1B07: 86 08        	stx	<L247+pmsg_1+2
  8135                        ;		if(pmsg)
  8136                        	.line	1679
  8137                        ;		{
  8138 05:1B09: A5 06        	lda	<L247+pmsg_1
  8139 05:1B0B: 05 08        	ora	<L247+pmsg_1+2
  8140 05:1B0D: D0 03        	bne	L250
  8141 05:1B0F: 82 98 00     	brl	L10146
  8142                        L250:
  8143                        	.line	1680
  8144                        ;			pmsg->type = msgType;
  8145                        	.line	1681
  8146 05:1B12: A5 11        	lda	<L246+msgType_0
  8147 05:1B14: A0 08 00     	ldy	#$8
  8148 05:1B17: 97 06        	sta	[<L247+pmsg_1],Y
  8149                        ;			pmsg->pheap = NULL;
  8150                        	.line	1682
  8151 05:1B19: A9 00 00     	lda	#$0
  8152 05:1B1C: A0 0E 00     	ldy	#$e
  8153 05:1B1F: 97 06        	sta	[<L247+pmsg_1],Y
  8154 05:1B21: A9 00 00     	lda	#$0
  8155 05:1B24: A0 10 00     	ldy	#$10
  8156 05:1B27: 97 06        	sta	[<L247+pmsg_1],Y
  8157                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  8158                        	.line	1683
  8159 05:1B29: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  8160 05:1B2D: 85 01        	sta	<R0
  8161 05:1B2F: 86 03        	stx	<R0+2
  8162 05:1B31: A0 02 00     	ldy	#$2
  8163 05:1B34: B7 01        	lda	[<R0],Y
  8164 05:1B36: 87 06        	sta	[<L247+pmsg_1]
  8165 05:1B38: A0 04 00     	ldy	#$4
  8166 05:1B3B: B7 01        	lda	[<R0],Y
  8167 05:1B3D: A0 02 00     	ldy	#$2
  8168 05:1B40: 97 06        	sta	[<L247+pmsg_1],Y
  8169                        ;			pmsg->dest = FX_MSG_DEFAULT;
  8170                        	.line	1684
  8171 05:1B42: A9 FF FF     	lda	#$ffff
  8172 05:1B45: A0 04 00     	ldy	#$4
  8173 05:1B48: 97 06        	sta	[<L247+pmsg_1],Y
  8174 05:1B4A: A9 FF FF     	lda	#$ffff
  8175 05:1B4D: A0 06 00     	ldy	#$6
  8176 05:1B50: 97 06        	sta	[<L247+pmsg_1],Y
  8177                        ;			pmsg->hwnd = hWnd;
  8178                        	.line	1685
  8179 05:1B52: A5 0D        	lda	<L246+hWnd_0
  8180 05:1B54: A0 0A 00     	ldy	#$a
  8181 05:1B57: 97 06        	sta	[<L247+pmsg_1],Y
  8182 05:1B59: A5 0F        	lda	<L246+hWnd_0+2
  Sat Jul 10 2021  1:15                                                Page 163


  8183 05:1B5B: A0 0C 00     	ldy	#$c
  8184 05:1B5E: 97 06        	sta	[<L247+pmsg_1],Y
  8185                        ;
  8186                        ;			pmsg->cmdCId = cmdCId;
  8187                        	.line	1687
  8188 05:1B60: A5 13        	lda	<L246+cmdCId_0
  8189 05:1B62: A0 16 00     	ldy	#$16
  8190 05:1B65: 97 06        	sta	[<L247+pmsg_1],Y
  8191                        ;			pmsg->cmdMId = cmdMId;
  8192                        	.line	1688
  8193 05:1B67: A5 15        	lda	<L246+cmdMId_0
  8194 05:1B69: A0 18 00     	ldy	#$18
  8195 05:1B6C: 97 06        	sta	[<L247+pmsg_1],Y
  8196                        ;			pmsg->parameter1 = (ULONG)pData1
                    ;
  8197                        	.line	1689
  8198 05:1B6E: A5 17        	lda	<L246+pData1_0
  8199 05:1B70: A0 1A 00     	ldy	#$1a
  8200 05:1B73: 97 06        	sta	[<L247+pmsg_1],Y
  8201 05:1B75: A5 19        	lda	<L246+pData1_0+2
  8202 05:1B77: A0 1C 00     	ldy	#$1c
  8203 05:1B7A: 97 06        	sta	[<L247+pmsg_1],Y
  8204                        ;			pmsg->parameter2 = (ULONG)pData2
                    ;
  8205                        	.line	1690
  8206 05:1B7C: A5 1B        	lda	<L246+pData2_0
  8207 05:1B7E: A0 1E 00     	ldy	#$1e
  8208 05:1B81: 97 06        	sta	[<L247+pmsg_1],Y
  8209 05:1B83: A5 1D        	lda	<L246+pData2_0+2
  8210 05:1B85: A0 20 00     	ldy	#$20
  8211 05:1B88: 97 06        	sta	[<L247+pmsg_1],Y
  8212                        ;
  8213                        ;			pmsg->parameter3 = 0L;
  8214                        	.line	1692
  8215 05:1B8A: A9 00 00     	lda	#$0
  8216 05:1B8D: A0 22 00     	ldy	#$22
  8217 05:1B90: 97 06        	sta	[<L247+pmsg_1],Y
  8218 05:1B92: A9 00 00     	lda	#$0
  8219 05:1B95: A0 24 00     	ldy	#$24
  8220 05:1B98: 97 06        	sta	[<L247+pmsg_1],Y
  8221                        ;
  8222                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,(PFXOSMESSAGE)pmsg);
  8223                        	.line	1694
  8224 05:1B9A: D4 08        	pei	<L247+pmsg_1+2
  8225 05:1B9C: D4 06        	pei	<L247+pmsg_1
  8226 05:1B9E: AD xx xx     	lda	|~~_k_eventQueue+2
  8227 05:1BA1: 48           	pha
  8228 05:1BA2: AD xx xx     	lda	|~~_k_eventQueue
  8229 05:1BA5: 48           	pha
  8230 05:1BA6: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  8231                        ;		}
  8232                        	.line	1695
  8233                        ;	}
  8234                        L10146:
  8235                        	.line	1696
  8236                        ;
  8237                        ;	//k_debug_string("k_send_command_message::exit\r
  Sat Jul 10 2021  1:15                                                Page 164


                    \n");
  8238                        ;
  8239                        ;	return bRet;
  8240                        L10145:
  8241                        	.line	1700
  8242 05:1BAA: A5 05        	lda	<L247+bRet_1
  8243 05:1BAC: 29 FF 00     	and	#$ff
  8244                        L251:
  8245 05:1BAF: A8           	tay
  8246 05:1BB0: A5 0B        	lda	<L246+2
  8247 05:1BB2: 85 1D        	sta	<L246+2+18
  8248 05:1BB4: A5 0A        	lda	<L246+1
  8249 05:1BB6: 85 1C        	sta	<L246+1+18
  8250 05:1BB8: 2B           	pld
  8251 05:1BB9: 3B           	tsc
  8252 05:1BBA: 18           	clc
  8253 05:1BBB: 69 1B 00     	adc	#L246+18
  8254 05:1BBE: 1B           	tcs
  8255 05:1BBF: 98           	tya
  8256 05:1BC0: 6B           	rtl
  8257                        ;}
  8258                        	.line	1701
  8259                        	.endblock	1701
  8260             00000009   L246	equ	9
  8261             00000005   L247	equ	5
  8262 05:1BC1:              	ends
  8263                        	efunc
  8264                        	.endfunc	1701,5,9
  8265                        	.line	1701
  8266                        ;
  8267                        ;BOOL k_send_process_command_message(PFXPROCESS pr
                    ocess,MSGTYPE msgType,UINT cmdCId,UINT cmdMId,ULONG pData1,U
                    LONG pData2)
  8268                        ;{
  8269                        	.line	1703
  8270                        	.line	1704
  8271                        	EVTMAN
  8272                        	xdef	~~k_send_process_command_message
  8273                        	func
  8274                        	.function	1704
  8275                        ~~k_send_process_command_message:
  8276                        	longa	on
  8277                        	longi	on
  8278 05:1BC1: 3B           	tsc
  8279 05:1BC2: 38           	sec
  8280 05:1BC3: E9 09 00     	sbc	#L252
  8281 05:1BC6: 1B           	tcs
  8282 05:1BC7: 0B           	phd
  8283 05:1BC8: 5B           	tcd
  8284             00000004   process_0	set	4
  8285             00000008   msgType_0	set	8
  8286             0000000A   cmdCId_0	set	10
  8287             0000000C   cmdMId_0	set	12
  8288             0000000E   pData1_0	set	14
  8289             00000012   pData2_0	set	18
  8290                        	.block	1704
  8291                        ;	BOOL bRet = FALSE;
  8292                        ;	PFXCMDMESSAGE pmsg = NULL;
  Sat Jul 10 2021  1:15                                                Page 165


  8293                        ;
  8294                        ;	//k_debug_pointer("k_send_command_message::hWnd:
                    ",hWnd);
  8295                        ;	//k_debug_long("k_send_command_message::pData1:"
                    ,pData1);
  8296                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  8297                        ;
  8298                        ;	if(process)
  8299             00000000   bRet_1	set	0
  8300             00000001   pmsg_1	set	1
  8301                        	.sym	bRet,0,14,1,8
  8302                        	.sym	pmsg,1,138,1,32,17
  8303                        	.sym	process,4,138,6,32,20
  8304                        	.sym	msgType,8,16,6,16
  8305                        	.sym	cmdCId,10,16,6,16
  8306                        	.sym	cmdMId,12,16,6,16
  8307                        	.sym	pData1,14,18,6,32
  8308                        	.sym	pData2,18,18,6,32
  8309 05:1BC9: E2 20        	sep	#$20
  8310                        	longa	off
  8311 05:1BCB: 64 05        	stz	<L253+bRet_1
  8312 05:1BCD: C2 20        	rep	#$20
  8313                        	longa	on
  8314 05:1BCF: 64 06        	stz	<L253+pmsg_1
  8315 05:1BD1: 64 08        	stz	<L253+pmsg_1+2
  8316                        	.line	1712
  8317                        ;	{
  8318 05:1BD3: A5 0D        	lda	<L252+process_0
  8319 05:1BD5: 05 0F        	ora	<L252+process_0+2
  8320 05:1BD7: D0 03        	bne	L255
  8321 05:1BD9: 82 B2 00     	brl	L10147
  8322                        L255:
  8323                        	.line	1713
  8324                        ;		pmsg = (PFXCMDMESSAGE)k_mem_allocate_hea
                    p(sizeof(FXCMDMESSAGE));
  8325                        	.line	1714
  8326 05:1BDC: F4 26 00     	pea	#<$26
  8327 05:1BDF: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  8328 05:1BE3: 85 06        	sta	<L253+pmsg_1
  8329 05:1BE5: 86 08        	stx	<L253+pmsg_1+2
  8330                        ;		if(pmsg)
  8331                        	.line	1715
  8332                        ;		{
  8333 05:1BE7: A5 06        	lda	<L253+pmsg_1
  8334 05:1BE9: 05 08        	ora	<L253+pmsg_1+2
  8335 05:1BEB: D0 03        	bne	L256
  8336 05:1BED: 82 9E 00     	brl	L10148
  8337                        L256:
  8338                        	.line	1716
  8339                        ;			pmsg->type = msgType;
  8340                        	.line	1717
  8341 05:1BF0: A5 11        	lda	<L252+msgType_0
  8342 05:1BF2: A0 08 00     	ldy	#$8
  8343 05:1BF5: 97 06        	sta	[<L253+pmsg_1],Y
  8344                        ;			pmsg->pheap = NULL;
  8345                        	.line	1718
  8346 05:1BF7: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 166


  8347 05:1BFA: A0 0E 00     	ldy	#$e
  8348 05:1BFD: 97 06        	sta	[<L253+pmsg_1],Y
  8349 05:1BFF: A9 00 00     	lda	#$0
  8350 05:1C02: A0 10 00     	ldy	#$10
  8351 05:1C05: 97 06        	sta	[<L253+pmsg_1],Y
  8352                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  8353                        	.line	1719
  8354 05:1C07: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  8355 05:1C0B: 85 01        	sta	<R0
  8356 05:1C0D: 86 03        	stx	<R0+2
  8357 05:1C0F: A0 02 00     	ldy	#$2
  8358 05:1C12: B7 01        	lda	[<R0],Y
  8359 05:1C14: 87 06        	sta	[<L253+pmsg_1]
  8360 05:1C16: A0 04 00     	ldy	#$4
  8361 05:1C19: B7 01        	lda	[<R0],Y
  8362 05:1C1B: A0 02 00     	ldy	#$2
  8363 05:1C1E: 97 06        	sta	[<L253+pmsg_1],Y
  8364                        ;			pmsg->dest = process->procId;
  8365                        	.line	1720
  8366 05:1C20: A0 02 00     	ldy	#$2
  8367 05:1C23: B7 0D        	lda	[<L252+process_0],Y
  8368 05:1C25: A0 04 00     	ldy	#$4
  8369 05:1C28: 97 06        	sta	[<L253+pmsg_1],Y
  8370 05:1C2A: A0 04 00     	ldy	#$4
  8371 05:1C2D: B7 0D        	lda	[<L252+process_0],Y
  8372 05:1C2F: A0 06 00     	ldy	#$6
  8373 05:1C32: 97 06        	sta	[<L253+pmsg_1],Y
  8374                        ;			pmsg->hwnd = NULL;
  8375                        	.line	1721
  8376 05:1C34: A9 00 00     	lda	#$0
  8377 05:1C37: A0 0A 00     	ldy	#$a
  8378 05:1C3A: 97 06        	sta	[<L253+pmsg_1],Y
  8379 05:1C3C: A9 00 00     	lda	#$0
  8380 05:1C3F: A0 0C 00     	ldy	#$c
  8381 05:1C42: 97 06        	sta	[<L253+pmsg_1],Y
  8382                        ;
  8383                        ;			pmsg->cmdCId = cmdCId;
  8384                        	.line	1723
  8385 05:1C44: A5 13        	lda	<L252+cmdCId_0
  8386 05:1C46: A0 16 00     	ldy	#$16
  8387 05:1C49: 97 06        	sta	[<L253+pmsg_1],Y
  8388                        ;			pmsg->cmdMId = cmdMId;
  8389                        	.line	1724
  8390 05:1C4B: A5 15        	lda	<L252+cmdMId_0
  8391 05:1C4D: A0 18 00     	ldy	#$18
  8392 05:1C50: 97 06        	sta	[<L253+pmsg_1],Y
  8393                        ;			pmsg->parameter1 = (ULONG)pData1
                    ;
  8394                        	.line	1725
  8395 05:1C52: A5 17        	lda	<L252+pData1_0
  8396 05:1C54: A0 1A 00     	ldy	#$1a
  8397 05:1C57: 97 06        	sta	[<L253+pmsg_1],Y
  8398 05:1C59: A5 19        	lda	<L252+pData1_0+2
  8399 05:1C5B: A0 1C 00     	ldy	#$1c
  8400 05:1C5E: 97 06        	sta	[<L253+pmsg_1],Y
  8401                        ;			pmsg->parameter2 = (ULONG)pData2
                    ;
  Sat Jul 10 2021  1:15                                                Page 167


  8402                        	.line	1726
  8403 05:1C60: A5 1B        	lda	<L252+pData2_0
  8404 05:1C62: A0 1E 00     	ldy	#$1e
  8405 05:1C65: 97 06        	sta	[<L253+pmsg_1],Y
  8406 05:1C67: A5 1D        	lda	<L252+pData2_0+2
  8407 05:1C69: A0 20 00     	ldy	#$20
  8408 05:1C6C: 97 06        	sta	[<L253+pmsg_1],Y
  8409                        ;
  8410                        ;			pmsg->parameter3 = 0L;
  8411                        	.line	1728
  8412 05:1C6E: A9 00 00     	lda	#$0
  8413 05:1C71: A0 22 00     	ldy	#$22
  8414 05:1C74: 97 06        	sta	[<L253+pmsg_1],Y
  8415 05:1C76: A9 00 00     	lda	#$0
  8416 05:1C79: A0 24 00     	ldy	#$24
  8417 05:1C7C: 97 06        	sta	[<L253+pmsg_1],Y
  8418                        ;
  8419                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,(PFXOSMESSAGE)pmsg);
  8420                        	.line	1730
  8421 05:1C7E: D4 08        	pei	<L253+pmsg_1+2
  8422 05:1C80: D4 06        	pei	<L253+pmsg_1
  8423 05:1C82: AD xx xx     	lda	|~~_k_eventQueue+2
  8424 05:1C85: 48           	pha
  8425 05:1C86: AD xx xx     	lda	|~~_k_eventQueue
  8426 05:1C89: 48           	pha
  8427 05:1C8A: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  8428                        ;		}
  8429                        	.line	1731
  8430                        ;	}
  8431                        L10148:
  8432                        	.line	1732
  8433                        ;
  8434                        ;	//k_debug_string("k_send_command_message::exit\r
                    \n");
  8435                        ;
  8436                        ;	return bRet;
  8437                        L10147:
  8438                        	.line	1736
  8439 05:1C8E: A5 05        	lda	<L253+bRet_1
  8440 05:1C90: 29 FF 00     	and	#$ff
  8441                        L257:
  8442 05:1C93: A8           	tay
  8443 05:1C94: A5 0B        	lda	<L252+2
  8444 05:1C96: 85 1D        	sta	<L252+2+18
  8445 05:1C98: A5 0A        	lda	<L252+1
  8446 05:1C9A: 85 1C        	sta	<L252+1+18
  8447 05:1C9C: 2B           	pld
  8448 05:1C9D: 3B           	tsc
  8449 05:1C9E: 18           	clc
  8450 05:1C9F: 69 1B 00     	adc	#L252+18
  8451 05:1CA2: 1B           	tcs
  8452 05:1CA3: 98           	tya
  8453 05:1CA4: 6B           	rtl
  8454                        ;}
  8455                        	.line	1737
  8456                        	.endblock	1737
  8457             00000009   L252	equ	9
  Sat Jul 10 2021  1:15                                                Page 168


  8458             00000005   L253	equ	5
  8459 05:1CA5:              	ends
  8460                        	efunc
  8461                        	.endfunc	1737,5,9
  8462                        	.line	1737
  8463                        ;
  8464                        ;void k_irq_device_event(MSGIRQ type,ULONG timer,v
                    oid FAR *data)
  8465                        ;{
  8466                        	.line	1739
  8467                        	.line	1740
  8468                        	EVTMAN
  8469                        	xdef	~~k_irq_device_event
  8470                        	func
  8471                        	.function	1740
  8472                        ~~k_irq_device_event:
  8473                        	longa	on
  8474                        	longi	on
  8475 05:1CA5: 3B           	tsc
  8476 05:1CA6: 38           	sec
  8477 05:1CA7: E9 05 00     	sbc	#L258
  8478 05:1CAA: 1B           	tcs
  8479 05:1CAB: 0B           	phd
  8480 05:1CAC: 5B           	tcd
  8481             00000004   type_0	set	4
  8482             00000006   timer_0	set	6
  8483             0000000A   data_0	set	10
  8484                        	.block	1740
  8485                        ;	BOOL bRet = FALSE;
  8486                        ;
  8487                        ;	PFXOSMESSAGE pmsg = k_create_msg(type,timer,data
                    );
  8488                        ;	if(pmsg)
  8489             00000000   bRet_1	set	0
  8490             00000001   pmsg_1	set	1
  8491                        	.sym	bRet,0,14,1,8
  8492                        	.sym	pmsg,1,138,1,32,16
  8493                        	.sym	type,4,5,6,16
  8494                        	.sym	timer,6,18,6,32
  8495                        	.sym	data,10,129,6,32
  8496 05:1CAD: E2 20        	sep	#$20
  8497                        	longa	off
  8498 05:1CAF: 64 01        	stz	<L259+bRet_1
  8499 05:1CB1: C2 20        	rep	#$20
  8500                        	longa	on
  8501 05:1CB3: D4 11        	pei	<L258+data_0+2
  8502 05:1CB5: D4 0F        	pei	<L258+data_0
  8503 05:1CB7: D4 0D        	pei	<L258+timer_0+2
  8504 05:1CB9: D4 0B        	pei	<L258+timer_0
  8505 05:1CBB: D4 09        	pei	<L258+type_0
  8506 05:1CBD: 22 D0 20 05  	jsl	~~k_create_msg
  8507 05:1CC1: 85 02        	sta	<L259+pmsg_1
  8508 05:1CC3: 86 04        	stx	<L259+pmsg_1+2
  8509                        	.line	1744
  8510                        ;	{
  8511 05:1CC5: A5 02        	lda	<L259+pmsg_1
  8512 05:1CC7: 05 04        	ora	<L259+pmsg_1+2
  8513 05:1CC9: D0 03        	bne	L261
  Sat Jul 10 2021  1:15                                                Page 169


  8514 05:1CCB: 82 AE 00     	brl	L10149
  8515                        L261:
  8516                        	.line	1745
  8517                        ;		//if(type != IRQE_SOL_TIMER && type != I
                    RQE_COM1)
  8518                        ;		//if(type == IRQE_KEYBOARD)
  8519                        ;	    //	k_debug_integer("k_irq_device_event:",ty
                    pe);
  8520                        ;		// debugging
  8521                        ;		if(type == IRQE_COM1)
  8522                        	.line	1750
  8523                        ;		{
  8524 05:1CCE: A5 09        	lda	<L258+type_0
  8525 05:1CD0: C9 03 00     	cmp	#<$3
  8526 05:1CD3: F0 03        	beq	L262
  8527 05:1CD5: 82 18 00     	brl	L10150
  8528                        L262:
  8529                        	.line	1751
  8530                        ;			k_mem_deallocate_heap(pmsg);
  8531                        	.line	1752
  8532 05:1CD8: D4 04        	pei	<L259+pmsg_1+2
  8533 05:1CDA: D4 02        	pei	<L259+pmsg_1
  8534 05:1CDC: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  8535                        ;			return;
  8536                        	.line	1753
  8537                        L263:
  8538 05:1CE0: A5 07        	lda	<L258+2
  8539 05:1CE2: 85 11        	sta	<L258+2+10
  8540 05:1CE4: A5 06        	lda	<L258+1
  8541 05:1CE6: 85 10        	sta	<L258+1+10
  8542 05:1CE8: 2B           	pld
  8543 05:1CE9: 3B           	tsc
  8544 05:1CEA: 18           	clc
  8545 05:1CEB: 69 0F 00     	adc	#L258+10
  8546 05:1CEE: 1B           	tcs
  8547 05:1CEF: 6B           	rtl
  8548                        ;		}
  8549                        	.line	1754
  8550                        ;
  8551                        ;		if(type == IRQE_CTLR_RESET)
  8552                        L10150:
  8553                        	.line	1756
  8554                        ;		{
  8555 05:1CF0: A5 09        	lda	<L258+type_0
  8556 05:1CF2: C9 09 00     	cmp	#<$9
  8557 05:1CF5: F0 03        	beq	L264
  8558 05:1CF7: 82 38 00     	brl	L10151
  8559                        L264:
  8560                        	.line	1757
  8561                        ;			k_debug_integer("k_irq_device_ev
                    ent:IRQE_CTLR_RESET:",timer);
  8562                        	.line	1758
  8563 05:1CFA: D4 0B        	pei	<L258+timer_0
  8564 05:1CFC: F4 xx xx     	pea	#^L227
  8565 05:1CFF: F4 xx xx     	pea	#<L227
  8566 05:1D02: 22 xx xx xx  	jsl	~~k_debug_integer
  8567                        ;			if(timer == -1)
  8568                        	.line	1759
  Sat Jul 10 2021  1:15                                                Page 170


  8569                        ;			{
  8570 05:1D06: A5 0B        	lda	<L258+timer_0
  8571 05:1D08: C9 FF FF     	cmp	#<$ffffffff
  8572 05:1D0B: D0 05        	bne	L265
  8573 05:1D0D: A5 0D        	lda	<L258+timer_0+2
  8574 05:1D0F: C9 FF FF     	cmp	#^$ffffffff
  8575                        L265:
  8576 05:1D12: F0 03        	beq	L266
  8577 05:1D14: 82 1B 00     	brl	L10152
  8578                        L266:
  8579                        	.line	1760
  8580                        ;				_k_mouseState.buttonLeft
                    Down   = FALSE;
  8581                        	.line	1761
  8582 05:1D17: E2 20        	sep	#$20
  8583                        	longa	off
  8584 05:1D19: 9C xx xx     	stz	|~~_k_mouseState+4
  8585 05:1D1C: C2 20        	rep	#$20
  8586                        	longa	on
  8587                        ;				_k_mouseState.buttonMidd
                    leDown = FALSE;
  8588                        	.line	1762
  8589 05:1D1E: E2 20        	sep	#$20
  8590                        	longa	off
  8591 05:1D20: 9C xx xx     	stz	|~~_k_mouseState+14
  8592 05:1D23: C2 20        	rep	#$20
  8593                        	longa	on
  8594                        ;				_k_mouseState.buttonRigh
                    tDown  = FALSE;
  8595                        	.line	1763
  8596 05:1D25: E2 20        	sep	#$20
  8597                        	longa	off
  8598 05:1D27: 9C xx xx     	stz	|~~_k_mouseState+9
  8599 05:1D2A: C2 20        	rep	#$20
  8600                        	longa	on
  8601                        ;				_k_mouseState.lastEvent 
                    = 0;
  8602                        	.line	1764
  8603 05:1D2C: 9C xx xx     	stz	|~~_k_mouseState
  8604 05:1D2F: 9C xx xx     	stz	|~~_k_mouseState+2
  8605                        ;			}
  8606                        	.line	1765
  8607                        ;		}
  8608                        L10152:
  8609                        	.line	1766
  8610                        ;
  8611                        ;		if(type == IRQE_MOUSE)
  8612                        L10151:
  8613                        	.line	1768
  8614                        ;			pmsg = k_updateMouseState(pmsg,t
                    imer,data);
  8615 05:1D32: A5 09        	lda	<L258+type_0
  8616 05:1D34: C9 02 00     	cmp	#<$2
  8617 05:1D37: F0 03        	beq	L267
  8618 05:1D39: 82 14 00     	brl	L10153
  8619                        L267:
  8620                        	.line	1769
  8621 05:1D3C: D4 11        	pei	<L258+data_0+2
  Sat Jul 10 2021  1:15                                                Page 171


  8622 05:1D3E: D4 0F        	pei	<L258+data_0
  8623 05:1D40: D4 0D        	pei	<L258+timer_0+2
  8624 05:1D42: D4 0B        	pei	<L258+timer_0
  8625 05:1D44: D4 04        	pei	<L259+pmsg_1+2
  8626 05:1D46: D4 02        	pei	<L259+pmsg_1
  8627 05:1D48: 22 7F 1D 05  	jsl	~~k_updateMouseState
  8628 05:1D4C: 85 02        	sta	<L259+pmsg_1
  8629 05:1D4E: 86 04        	stx	<L259+pmsg_1+2
  8630                        ;		//else
  8631                        ;		//	k_debug_integer("k_irq_device_ev
                    ent:type:",type);
  8632                        ;
  8633                        ;
  8634                        ;		//if(type == IRQE_FLOPPY)
  8635                        ;		//	k_debug_integer("k_irq_device_ev
                    ent:IRQE_FLOPPY:",type);
  8636                        ;
  8637                        ;		bRet = k_enqueue(_k_eventQueue,pmsg);
  8638                        L10153:
  8639                        	.line	1777
  8640 05:1D50: D4 04        	pei	<L259+pmsg_1+2
  8641 05:1D52: D4 02        	pei	<L259+pmsg_1
  8642 05:1D54: AD xx xx     	lda	|~~_k_eventQueue+2
  8643 05:1D57: 48           	pha
  8644 05:1D58: AD xx xx     	lda	|~~_k_eventQueue
  8645 05:1D5B: 48           	pha
  8646 05:1D5C: 22 xx xx xx  	jsl	~~k_enqueue
  8647 05:1D60: E2 20        	sep	#$20
  8648                        	longa	off
  8649 05:1D62: 85 01        	sta	<L259+bRet_1
  8650 05:1D64: C2 20        	rep	#$20
  8651                        	longa	on
  8652                        ;		if(!bRet)
  8653                        	.line	1778
  8654                        ;		{
  8655 05:1D66: A5 01        	lda	<L259+bRet_1
  8656 05:1D68: 29 FF 00     	and	#$ff
  8657 05:1D6B: F0 03        	beq	L268
  8658 05:1D6D: 82 0C 00     	brl	L10154
  8659                        L268:
  8660                        	.line	1779
  8661                        ;			k_debug_integer("k_irq_device_ev
                    ent:fail:type:",type);
  8662                        	.line	1780
  8663 05:1D70: D4 09        	pei	<L258+type_0
  8664 05:1D72: F4 xx xx     	pea	#^L227+36
  8665 05:1D75: F4 xx xx     	pea	#<L227+36
  8666 05:1D78: 22 xx xx xx  	jsl	~~k_debug_integer
  8667                        ;		}
  8668                        	.line	1781
  8669                        ;	}
  8670                        L10154:
  8671                        	.line	1782
  8672                        ;}
  8673                        L10149:
  8674                        	.line	1783
  8675 05:1D7C: 82 61 FF     	brl	L263
  8676                        	.endblock	1783
  Sat Jul 10 2021  1:15                                                Page 172


  8677             00000005   L258	equ	5
  8678             00000001   L259	equ	1
  8679 05:1D7F:              	ends
  8680                        	efunc
  8681                        	.endfunc	1783,1,5
  8682                        	.line	1783
  8683                        	data
  8684                        L227:
  8685 00:07CC: 6B 5F 69 72  	db	$6B,$5F,$69,$72,$71,$5F,$64,$65,$76,$69,
                    $63,$65,$5F,$65,$76
       00:07D0: 71 5F 64 65 
       00:07D4: 76 69 63 65 
       00:07D8: 5F 65 76 
  8686 00:07DB: 65 6E 74 3A  	db	$65,$6E,$74,$3A,$49,$52,$51,$45,$5F,$43,
                    $54,$4C,$52,$5F,$52
       00:07DF: 49 52 51 45 
       00:07E3: 5F 43 54 4C 
       00:07E7: 52 5F 52 
  8687 00:07EA: 45 53 45 54  	db	$45,$53,$45,$54,$3A,$00,$6B,$5F,$69,$72,
                    $71,$5F,$64,$65,$76
       00:07EE: 3A 00 6B 5F 
       00:07F2: 69 72 71 5F 
       00:07F6: 64 65 76 
  8688 00:07F9: 69 63 65 5F  	db	$69,$63,$65,$5F,$65,$76,$65,$6E,$74,$3A,
                    $66,$61,$69,$6C,$3A
       00:07FD: 65 76 65 6E 
       00:0801: 74 3A 66 61 
       00:0805: 69 6C 3A 
  8689 00:0808: 74 79 70 65  	db	$74,$79,$70,$65,$3A,$00
       00:080C: 3A 00 
  8690 00:080E:              	ends
  8691                        ;
  8692                        ;PFXOSMESSAGE k_updateMouseState(PFXOSMESSAGE pmsg
                    ,ULONG timer,void FAR *data)
  8693                        ;{
  8694                        	.line	1785
  8695                        	.line	1786
  8696                        	EVTMAN
  8697                        	xdef	~~k_updateMouseState
  8698                        	func
  8699                        	.function	1786
  8700                        ~~k_updateMouseState:
  8701                        	longa	on
  8702                        	longi	on
  8703 05:1D7F: 3B           	tsc
  8704 05:1D80: 38           	sec
  8705 05:1D81: E9 0E 00     	sbc	#L270
  8706 05:1D84: 1B           	tcs
  8707 05:1D85: 0B           	phd
  8708 05:1D86: 5B           	tcd
  8709             00000004   pmsg_0	set	4
  8710             00000008   timer_0	set	8
  8711             0000000C   data_0	set	12
  8712                        	.block	1786
  8713                        ;	ULONG lastTimer = _k_mouseState.lastEvent;
  8714                        ;
  8715                        ;	INT statusLeft   = ((LPCHAR)data)[0] & 1;
  8716                        ;	INT statusRight  = ((LPCHAR)data)[0] & 2;
  Sat Jul 10 2021  1:15                                                Page 173


  8717                        ;	INT statusMiddle = ((LPCHAR)data)[0] & 4;
  8718                        ;
  8719                        ;	if(_k_mouseState.buttonLeftDown)
  8720             00000000   lastTimer_1	set	0
  8721             00000004   statusLeft_1	set	4
  8722             00000006   statusRight_1	set	6
  8723             00000008   statusMiddle_1	set	8
  8724                        	.sym	lastTimer,0,18,1,32
  8725                        	.sym	statusLeft,4,5,1,16
  8726                        	.sym	statusRight,6,5,1,16
  8727                        	.sym	statusMiddle,8,5,1,16
  8728                        	.sym	pmsg,4,138,6,32,16
  8729                        	.sym	timer,8,18,6,32
  8730                        	.sym	data,12,129,6,32
  8731 05:1D87: AD xx xx     	lda	|~~_k_mouseState
  8732 05:1D8A: 85 05        	sta	<L271+lastTimer_1
  8733 05:1D8C: AD xx xx     	lda	|~~_k_mouseState+2
  8734 05:1D8F: 85 07        	sta	<L271+lastTimer_1+2
  8735 05:1D91: A7 1A        	lda	[<L270+data_0]
  8736 05:1D93: 29 01 00     	and	#<$1
  8737 05:1D96: 85 09        	sta	<L271+statusLeft_1
  8738 05:1D98: A7 1A        	lda	[<L270+data_0]
  8739 05:1D9A: 29 02 00     	and	#<$2
  8740 05:1D9D: 85 0B        	sta	<L271+statusRight_1
  8741 05:1D9F: A7 1A        	lda	[<L270+data_0]
  8742 05:1DA1: 29 04 00     	and	#<$4
  8743 05:1DA4: 85 0D        	sta	<L271+statusMiddle_1
  8744                        	.line	1793
  8745                        ;	{
  8746 05:1DA6: AD xx xx     	lda	|~~_k_mouseState+4
  8747 05:1DA9: 29 FF 00     	and	#$ff
  8748 05:1DAC: D0 03        	bne	L273
  8749 05:1DAE: 82 4B 00     	brl	L10155
  8750                        L273:
  8751                        	.line	1794
  8752                        ;		if(statusLeft)
  8753                        	.line	1795
  8754                        ;		{
  8755 05:1DB1: A5 09        	lda	<L271+statusLeft_1
  8756 05:1DB3: D0 03        	bne	L274
  8757 05:1DB5: 82 32 00     	brl	L10156
  8758                        L274:
  8759                        	.line	1796
  8760                        ;			_k_mouseState.buttonLeftDown = 1
                    ;
  8761                        	.line	1797
  8762 05:1DB8: E2 20        	sep	#$20
  8763                        	longa	off
  8764 05:1DBA: A9 01        	lda	#$1
  8765 05:1DBC: 8D xx xx     	sta	|~~_k_mouseState+4
  8766 05:1DBF: C2 20        	rep	#$20
  8767                        	longa	on
  8768                        ;			//_k_mouseState.lastLeftDown = t
                    imer;
  8769                        ;
  8770                        ;			if((timer - _k_mouseState.lastLe
                    ftDown) > 5)
  8771                        	.line	1800
  Sat Jul 10 2021  1:15                                                Page 174


  8772                        ;			{
  8773 05:1DC1: 38           	sec
  8774 05:1DC2: A5 16        	lda	<L270+timer_0
  8775 05:1DC4: ED xx xx     	sbc	|~~_k_mouseState+5
  8776 05:1DC7: 85 01        	sta	<R0
  8777 05:1DC9: A5 18        	lda	<L270+timer_0+2
  8778 05:1DCB: ED xx xx     	sbc	|~~_k_mouseState+5+2
  8779 05:1DCE: 85 03        	sta	<R0+2
  8780 05:1DD0: A9 05 00     	lda	#$5
  8781 05:1DD3: C5 01        	cmp	<R0
  8782 05:1DD5: A9 00 00     	lda	#$0
  8783 05:1DD8: E5 03        	sbc	<R0+2
  8784 05:1DDA: 90 03        	bcc	L275
  8785 05:1DDC: 82 08 00     	brl	L10157
  8786                        L275:
  8787                        	.line	1801
  8788                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDRAG\r\n");
  8789                        ;				pmsg->type = FX_LBUTTON_
                    DRAG;
  8790                        	.line	1803
  8791 05:1DDF: A9 05 0F     	lda	#$f05
  8792 05:1DE2: A0 08 00     	ldy	#$8
  8793 05:1DE5: 97 12        	sta	[<L270+pmsg_0],Y
  8794                        ;			}
  8795                        	.line	1804
  8796                        ;		}
  8797                        L10157:
  8798                        	.line	1805
  8799                        ;		else
  8800 05:1DE7: 82 0F 00     	brl	L10158
  8801                        L10156:
  8802                        ;		{
  8803                        	.line	1807
  8804                        ;			//k_debug_string("k_updateMouseS
                    tate:LeftMouseUp\r\n");
  8805                        ;			pmsg->type = FX_LBUTTON_UP;
  8806                        	.line	1809
  8807 05:1DEA: A9 06 0F     	lda	#$f06
  8808 05:1DED: A0 08 00     	ldy	#$8
  8809 05:1DF0: 97 12        	sta	[<L270+pmsg_0],Y
  8810                        ;			_k_mouseState.buttonLeftDown = 0
                    ;
  8811                        	.line	1810
  8812 05:1DF2: E2 20        	sep	#$20
  8813                        	longa	off
  8814 05:1DF4: 9C xx xx     	stz	|~~_k_mouseState+4
  8815 05:1DF7: C2 20        	rep	#$20
  8816                        	longa	on
  8817                        ;		}
  8818                        	.line	1811
  8819                        L10158:
  8820                        ;	}
  8821                        	.line	1812
  8822                        ;	else
  8823 05:1DF9: 82 55 00     	brl	L10159
  8824                        L10155:
  8825                        ;	{
  Sat Jul 10 2021  1:15                                                Page 175


  8826                        	.line	1814
  8827                        ;		if(statusLeft)
  8828                        	.line	1815
  8829                        ;		{
  8830 05:1DFC: A5 09        	lda	<L271+statusLeft_1
  8831 05:1DFE: D0 03        	bne	L276
  8832 05:1E00: 82 47 00     	brl	L10160
  8833                        L276:
  8834                        	.line	1816
  8835                        ;			_k_mouseState.buttonLeftDown = 1
                    ;
  8836                        	.line	1817
  8837 05:1E03: E2 20        	sep	#$20
  8838                        	longa	off
  8839 05:1E05: A9 01        	lda	#$1
  8840 05:1E07: 8D xx xx     	sta	|~~_k_mouseState+4
  8841 05:1E0A: C2 20        	rep	#$20
  8842                        	longa	on
  8843                        ;
  8844                        ;			if((timer - _k_mouseState.lastLe
                    ftDown) < 5)
  8845                        	.line	1819
  8846                        ;			{
  8847 05:1E0C: 38           	sec
  8848 05:1E0D: A5 16        	lda	<L270+timer_0
  8849 05:1E0F: ED xx xx     	sbc	|~~_k_mouseState+5
  8850 05:1E12: 85 01        	sta	<R0
  8851 05:1E14: A5 18        	lda	<L270+timer_0+2
  8852 05:1E16: ED xx xx     	sbc	|~~_k_mouseState+5+2
  8853 05:1E19: 85 03        	sta	<R0+2
  8854 05:1E1B: A5 01        	lda	<R0
  8855 05:1E1D: C9 05 00     	cmp	#<$5
  8856 05:1E20: A5 03        	lda	<R0+2
  8857 05:1E22: E9 00 00     	sbc	#^$5
  8858 05:1E25: 90 03        	bcc	L277
  8859 05:1E27: 82 0B 00     	brl	L10161
  8860                        L277:
  8861                        	.line	1820
  8862                        ;				//k_debug_integer("k_upd
                    ateMouseState:LeftMouseDblClick:",timer - _k_mouseState.last
                    LeftDown);
  8863                        ;				pmsg->type = FX_LBUTTON_
                    DBLCLICK;
  8864                        	.line	1822
  8865 05:1E2A: A9 07 0F     	lda	#$f07
  8866 05:1E2D: A0 08 00     	ldy	#$8
  8867 05:1E30: 97 12        	sta	[<L270+pmsg_0],Y
  8868                        ;			}
  8869                        	.line	1823
  8870                        ;			else
  8871 05:1E32: 82 08 00     	brl	L10162
  8872                        L10161:
  8873                        ;			{
  8874                        	.line	1825
  8875                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDown\r\n");
  8876                        ;				pmsg->type = FX_LBUTTON_
                    DOWN;
  Sat Jul 10 2021  1:15                                                Page 176


  8877                        	.line	1827
  8878 05:1E35: A9 04 0F     	lda	#$f04
  8879 05:1E38: A0 08 00     	ldy	#$8
  8880 05:1E3B: 97 12        	sta	[<L270+pmsg_0],Y
  8881                        ;			}
  8882                        	.line	1828
  8883                        L10162:
  8884                        ;			_k_mouseState.lastLeftDown = tim
                    er;
  8885                        	.line	1829
  8886 05:1E3D: A5 16        	lda	<L270+timer_0
  8887 05:1E3F: 8D xx xx     	sta	|~~_k_mouseState+5
  8888 05:1E42: A5 18        	lda	<L270+timer_0+2
  8889 05:1E44: 8D xx xx     	sta	|~~_k_mouseState+5+2
  8890                        ;		}
  8891                        	.line	1830
  8892                        ;		else
  8893 05:1E47: 82 07 00     	brl	L10163
  8894                        L10160:
  8895                        ;		{
  8896                        	.line	1832
  8897                        ;
  8898                        ;			_k_mouseState.buttonLeftDown = 0
                    ;
  8899                        	.line	1834
  8900 05:1E4A: E2 20        	sep	#$20
  8901                        	longa	off
  8902 05:1E4C: 9C xx xx     	stz	|~~_k_mouseState+4
  8903 05:1E4F: C2 20        	rep	#$20
  8904                        	longa	on
  8905                        ;		}
  8906                        	.line	1835
  8907                        L10163:
  8908                        ;	}
  8909                        	.line	1836
  8910                        L10159:
  8911                        ;
  8912                        ;	if(_k_mouseState.buttonRightDown)
  8913                        	.line	1838
  8914                        ;	{
  8915 05:1E51: AD xx xx     	lda	|~~_k_mouseState+9
  8916 05:1E54: 29 FF 00     	and	#$ff
  8917 05:1E57: D0 03        	bne	L278
  8918 05:1E59: 82 4B 00     	brl	L10164
  8919                        L278:
  8920                        	.line	1839
  8921                        ;		if(statusRight)
  8922                        	.line	1840
  8923                        ;		{
  8924 05:1E5C: A5 0B        	lda	<L271+statusRight_1
  8925 05:1E5E: D0 03        	bne	L279
  8926 05:1E60: 82 32 00     	brl	L10165
  8927                        L279:
  8928                        	.line	1841
  8929                        ;			_k_mouseState.buttonRightDown = 
                    1;
  8930                        	.line	1842
  8931 05:1E63: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 177


  8932                        	longa	off
  8933 05:1E65: A9 01        	lda	#$1
  8934 05:1E67: 8D xx xx     	sta	|~~_k_mouseState+9
  8935 05:1E6A: C2 20        	rep	#$20
  8936                        	longa	on
  8937                        ;			if((timer - _k_mouseState.lastRi
                    ghtDown) > 5)
  8938                        	.line	1843
  8939                        ;			{
  8940 05:1E6C: 38           	sec
  8941 05:1E6D: A5 16        	lda	<L270+timer_0
  8942 05:1E6F: ED xx xx     	sbc	|~~_k_mouseState+10
  8943 05:1E72: 85 01        	sta	<R0
  8944 05:1E74: A5 18        	lda	<L270+timer_0+2
  8945 05:1E76: ED xx xx     	sbc	|~~_k_mouseState+10+2
  8946 05:1E79: 85 03        	sta	<R0+2
  8947 05:1E7B: A9 05 00     	lda	#$5
  8948 05:1E7E: C5 01        	cmp	<R0
  8949 05:1E80: A9 00 00     	lda	#$0
  8950 05:1E83: E5 03        	sbc	<R0+2
  8951 05:1E85: 90 03        	bcc	L280
  8952 05:1E87: 82 08 00     	brl	L10166
  8953                        L280:
  8954                        	.line	1844
  8955                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDRAG\r\n");
  8956                        ;				pmsg->type = FX_RBUTTON_
                    DRAG;
  8957                        	.line	1846
  8958 05:1E8A: A9 09 0F     	lda	#$f09
  8959 05:1E8D: A0 08 00     	ldy	#$8
  8960 05:1E90: 97 12        	sta	[<L270+pmsg_0],Y
  8961                        ;			}
  8962                        	.line	1847
  8963                        ;		}
  8964                        L10166:
  8965                        	.line	1848
  8966                        ;		else
  8967 05:1E92: 82 0F 00     	brl	L10167
  8968                        L10165:
  8969                        ;		{
  8970                        	.line	1850
  8971                        ;			//k_debug_string("k_updateMouseS
                    tate:RightMouseUp\r\n");
  8972                        ;			pmsg->type = FX_RBUTTON_UP;
  8973                        	.line	1852
  8974 05:1E95: A9 0A 0F     	lda	#$f0a
  8975 05:1E98: A0 08 00     	ldy	#$8
  8976 05:1E9B: 97 12        	sta	[<L270+pmsg_0],Y
  8977                        ;			_k_mouseState.buttonRightDown = 
                    0;
  8978                        	.line	1853
  8979 05:1E9D: E2 20        	sep	#$20
  8980                        	longa	off
  8981 05:1E9F: 9C xx xx     	stz	|~~_k_mouseState+9
  8982 05:1EA2: C2 20        	rep	#$20
  8983                        	longa	on
  8984                        ;		}
  Sat Jul 10 2021  1:15                                                Page 178


  8985                        	.line	1854
  8986                        L10167:
  8987                        ;	}
  8988                        	.line	1855
  8989                        ;	else
  8990 05:1EA4: 82 55 00     	brl	L10168
  8991                        L10164:
  8992                        ;	{
  8993                        	.line	1857
  8994                        ;		if(statusRight)
  8995                        	.line	1858
  8996                        ;		{
  8997 05:1EA7: A5 0B        	lda	<L271+statusRight_1
  8998 05:1EA9: D0 03        	bne	L281
  8999 05:1EAB: 82 47 00     	brl	L10169
  9000                        L281:
  9001                        	.line	1859
  9002                        ;			_k_mouseState.buttonRightDown = 
                    1;
  9003                        	.line	1860
  9004 05:1EAE: E2 20        	sep	#$20
  9005                        	longa	off
  9006 05:1EB0: A9 01        	lda	#$1
  9007 05:1EB2: 8D xx xx     	sta	|~~_k_mouseState+9
  9008 05:1EB5: C2 20        	rep	#$20
  9009                        	longa	on
  9010                        ;
  9011                        ;			if((timer - _k_mouseState.lastRi
                    ghtDown) < 5)
  9012                        	.line	1862
  9013                        ;			{
  9014 05:1EB7: 38           	sec
  9015 05:1EB8: A5 16        	lda	<L270+timer_0
  9016 05:1EBA: ED xx xx     	sbc	|~~_k_mouseState+10
  9017 05:1EBD: 85 01        	sta	<R0
  9018 05:1EBF: A5 18        	lda	<L270+timer_0+2
  9019 05:1EC1: ED xx xx     	sbc	|~~_k_mouseState+10+2
  9020 05:1EC4: 85 03        	sta	<R0+2
  9021 05:1EC6: A5 01        	lda	<R0
  9022 05:1EC8: C9 05 00     	cmp	#<$5
  9023 05:1ECB: A5 03        	lda	<R0+2
  9024 05:1ECD: E9 00 00     	sbc	#^$5
  9025 05:1ED0: 90 03        	bcc	L282
  9026 05:1ED2: 82 0B 00     	brl	L10170
  9027                        L282:
  9028                        	.line	1863
  9029                        ;				//k_debug_integer("k_upd
                    ateMouseState:RightMouseDblClick:",timer - _k_mouseState.las
                    tRightDown);
  9030                        ;				pmsg->type = FX_RBUTTON_
                    DBLCLICK;
  9031                        	.line	1865
  9032 05:1ED5: A9 0B 0F     	lda	#$f0b
  9033 05:1ED8: A0 08 00     	ldy	#$8
  9034 05:1EDB: 97 12        	sta	[<L270+pmsg_0],Y
  9035                        ;			}
  9036                        	.line	1866
  9037                        ;			else
  Sat Jul 10 2021  1:15                                                Page 179


  9038 05:1EDD: 82 08 00     	brl	L10171
  9039                        L10170:
  9040                        ;			{
  9041                        	.line	1868
  9042                        ;				//k_debug_string("k_upda
                    teMouseState:RightMouseDown\r\n");
  9043                        ;				pmsg->type = FX_RBUTTON_
                    DOWN;
  9044                        	.line	1870
  9045 05:1EE0: A9 08 0F     	lda	#$f08
  9046 05:1EE3: A0 08 00     	ldy	#$8
  9047 05:1EE6: 97 12        	sta	[<L270+pmsg_0],Y
  9048                        ;			}
  9049                        	.line	1871
  9050                        L10171:
  9051                        ;			_k_mouseState.lastRightDown = ti
                    mer;
  9052                        	.line	1872
  9053 05:1EE8: A5 16        	lda	<L270+timer_0
  9054 05:1EEA: 8D xx xx     	sta	|~~_k_mouseState+10
  9055 05:1EED: A5 18        	lda	<L270+timer_0+2
  9056 05:1EEF: 8D xx xx     	sta	|~~_k_mouseState+10+2
  9057                        ;		}
  9058                        	.line	1873
  9059                        ;		else
  9060 05:1EF2: 82 07 00     	brl	L10172
  9061                        L10169:
  9062                        ;		{
  9063                        	.line	1875
  9064                        ;
  9065                        ;			_k_mouseState.buttonRightDown = 
                    0;
  9066                        	.line	1877
  9067 05:1EF5: E2 20        	sep	#$20
  9068                        	longa	off
  9069 05:1EF7: 9C xx xx     	stz	|~~_k_mouseState+9
  9070 05:1EFA: C2 20        	rep	#$20
  9071                        	longa	on
  9072                        ;		}
  9073                        	.line	1878
  9074                        L10172:
  9075                        ;	}
  9076                        	.line	1879
  9077                        L10168:
  9078                        ;
  9079                        ;	if(_k_mouseState.buttonMiddleDown)
  9080                        	.line	1881
  9081                        ;	{
  9082 05:1EFC: AD xx xx     	lda	|~~_k_mouseState+14
  9083 05:1EFF: 29 FF 00     	and	#$ff
  9084 05:1F02: D0 03        	bne	L283
  9085 05:1F04: 82 4B 00     	brl	L10173
  9086                        L283:
  9087                        	.line	1882
  9088                        ;		if(statusMiddle)
  9089                        	.line	1883
  9090                        ;		{
  9091 05:1F07: A5 0D        	lda	<L271+statusMiddle_1
  Sat Jul 10 2021  1:15                                                Page 180


  9092 05:1F09: D0 03        	bne	L284
  9093 05:1F0B: 82 32 00     	brl	L10174
  9094                        L284:
  9095                        	.line	1884
  9096                        ;			_k_mouseState.buttonMiddleDown =
                     1;
  9097                        	.line	1885
  9098 05:1F0E: E2 20        	sep	#$20
  9099                        	longa	off
  9100 05:1F10: A9 01        	lda	#$1
  9101 05:1F12: 8D xx xx     	sta	|~~_k_mouseState+14
  9102 05:1F15: C2 20        	rep	#$20
  9103                        	longa	on
  9104                        ;			if((timer - _k_mouseState.lastMi
                    ddleDown) > 5)
  9105                        	.line	1886
  9106                        ;			{
  9107 05:1F17: 38           	sec
  9108 05:1F18: A5 16        	lda	<L270+timer_0
  9109 05:1F1A: ED xx xx     	sbc	|~~_k_mouseState+15
  9110 05:1F1D: 85 01        	sta	<R0
  9111 05:1F1F: A5 18        	lda	<L270+timer_0+2
  9112 05:1F21: ED xx xx     	sbc	|~~_k_mouseState+15+2
  9113 05:1F24: 85 03        	sta	<R0+2
  9114 05:1F26: A9 05 00     	lda	#$5
  9115 05:1F29: C5 01        	cmp	<R0
  9116 05:1F2B: A9 00 00     	lda	#$0
  9117 05:1F2E: E5 03        	sbc	<R0+2
  9118 05:1F30: 90 03        	bcc	L285
  9119 05:1F32: 82 08 00     	brl	L10175
  9120                        L285:
  9121                        	.line	1887
  9122                        ;				//k_debug_string("k_upda
                    teMouseState:MiddletMouseDRAG\r\n");
  9123                        ;				pmsg->type = FX_MBUTTON_
                    DRAG;
  9124                        	.line	1889
  9125 05:1F35: A9 0D 0F     	lda	#$f0d
  9126 05:1F38: A0 08 00     	ldy	#$8
  9127 05:1F3B: 97 12        	sta	[<L270+pmsg_0],Y
  9128                        ;			}
  9129                        	.line	1890
  9130                        ;		}
  9131                        L10175:
  9132                        	.line	1891
  9133                        ;		else
  9134 05:1F3D: 82 0F 00     	brl	L10176
  9135                        L10174:
  9136                        ;		{
  9137                        	.line	1893
  9138                        ;			//k_debug_string("k_updateMouseS
                    tate:MiddleMouseUp\r\n");
  9139                        ;			pmsg->type = FX_MBUTTON_UP;
  9140                        	.line	1895
  9141 05:1F40: A9 0E 0F     	lda	#$f0e
  9142 05:1F43: A0 08 00     	ldy	#$8
  9143 05:1F46: 97 12        	sta	[<L270+pmsg_0],Y
  9144                        ;			_k_mouseState.buttonMiddleDown =
  Sat Jul 10 2021  1:15                                                Page 181


                     0;
  9145                        	.line	1896
  9146 05:1F48: E2 20        	sep	#$20
  9147                        	longa	off
  9148 05:1F4A: 9C xx xx     	stz	|~~_k_mouseState+14
  9149 05:1F4D: C2 20        	rep	#$20
  9150                        	longa	on
  9151                        ;		}
  9152                        	.line	1897
  9153                        L10176:
  9154                        ;	}
  9155                        	.line	1898
  9156                        ;	else
  9157 05:1F4F: 82 55 00     	brl	L10177
  9158                        L10173:
  9159                        ;	{
  9160                        	.line	1900
  9161                        ;		if(statusMiddle)
  9162                        	.line	1901
  9163                        ;		{
  9164 05:1F52: A5 0D        	lda	<L271+statusMiddle_1
  9165 05:1F54: D0 03        	bne	L286
  9166 05:1F56: 82 47 00     	brl	L10178
  9167                        L286:
  9168                        	.line	1902
  9169                        ;			_k_mouseState.buttonMiddleDown =
                     1;
  9170                        	.line	1903
  9171 05:1F59: E2 20        	sep	#$20
  9172                        	longa	off
  9173 05:1F5B: A9 01        	lda	#$1
  9174 05:1F5D: 8D xx xx     	sta	|~~_k_mouseState+14
  9175 05:1F60: C2 20        	rep	#$20
  9176                        	longa	on
  9177                        ;
  9178                        ;			if((timer - _k_mouseState.lastMi
                    ddleDown) < 5)
  9179                        	.line	1905
  9180                        ;			{
  9181 05:1F62: 38           	sec
  9182 05:1F63: A5 16        	lda	<L270+timer_0
  9183 05:1F65: ED xx xx     	sbc	|~~_k_mouseState+15
  9184 05:1F68: 85 01        	sta	<R0
  9185 05:1F6A: A5 18        	lda	<L270+timer_0+2
  9186 05:1F6C: ED xx xx     	sbc	|~~_k_mouseState+15+2
  9187 05:1F6F: 85 03        	sta	<R0+2
  9188 05:1F71: A5 01        	lda	<R0
  9189 05:1F73: C9 05 00     	cmp	#<$5
  9190 05:1F76: A5 03        	lda	<R0+2
  9191 05:1F78: E9 00 00     	sbc	#^$5
  9192 05:1F7B: 90 03        	bcc	L287
  9193 05:1F7D: 82 0B 00     	brl	L10179
  9194                        L287:
  9195                        	.line	1906
  9196                        ;				//k_debug_integer("k_upd
                    ateMouseState:MiddleMouseDblClick:",timer - _k_mouseState.la
                    stMiddleDown);
  9197                        ;				pmsg->type = FX_MBUTTON_
  Sat Jul 10 2021  1:15                                                Page 182


                    DBLCLICK;
  9198                        	.line	1908
  9199 05:1F80: A9 0F 0F     	lda	#$f0f
  9200 05:1F83: A0 08 00     	ldy	#$8
  9201 05:1F86: 97 12        	sta	[<L270+pmsg_0],Y
  9202                        ;			}
  9203                        	.line	1909
  9204                        ;			else
  9205 05:1F88: 82 08 00     	brl	L10180
  9206                        L10179:
  9207                        ;			{
  9208                        	.line	1911
  9209                        ;				//k_debug_string("k_upda
                    teMouseState:MiddleMouseDown\r\n");
  9210                        ;				pmsg->type = FX_MBUTTON_
                    DOWN;
  9211                        	.line	1913
  9212 05:1F8B: A9 0C 0F     	lda	#$f0c
  9213 05:1F8E: A0 08 00     	ldy	#$8
  9214 05:1F91: 97 12        	sta	[<L270+pmsg_0],Y
  9215                        ;			}
  9216                        	.line	1914
  9217                        L10180:
  9218                        ;			_k_mouseState.lastMiddleDown = t
                    imer;
  9219                        	.line	1915
  9220 05:1F93: A5 16        	lda	<L270+timer_0
  9221 05:1F95: 8D xx xx     	sta	|~~_k_mouseState+15
  9222 05:1F98: A5 18        	lda	<L270+timer_0+2
  9223 05:1F9A: 8D xx xx     	sta	|~~_k_mouseState+15+2
  9224                        ;		}
  9225                        	.line	1916
  9226                        ;		else
  9227 05:1F9D: 82 07 00     	brl	L10181
  9228                        L10178:
  9229                        ;		{
  9230                        	.line	1918
  9231                        ;
  9232                        ;			_k_mouseState.buttonMiddleDown =
                     0;
  9233                        	.line	1920
  9234 05:1FA0: E2 20        	sep	#$20
  9235                        	longa	off
  9236 05:1FA2: 9C xx xx     	stz	|~~_k_mouseState+14
  9237 05:1FA5: C2 20        	rep	#$20
  9238                        	longa	on
  9239                        ;		}
  9240                        	.line	1921
  9241                        L10181:
  9242                        ;	}
  9243                        	.line	1922
  9244                        L10177:
  9245                        ;
  9246                        ;	_k_mouseState.lastEvent = timer;
  9247                        	.line	1924
  9248 05:1FA7: A5 16        	lda	<L270+timer_0
  9249 05:1FA9: 8D xx xx     	sta	|~~_k_mouseState
  9250 05:1FAC: A5 18        	lda	<L270+timer_0+2
  Sat Jul 10 2021  1:15                                                Page 183


  9251 05:1FAE: 8D xx xx     	sta	|~~_k_mouseState+2
  9252                        ;
  9253                        ;	return pmsg;
  9254                        	.line	1926
  9255 05:1FB1: A6 14        	ldx	<L270+pmsg_0+2
  9256 05:1FB3: A5 12        	lda	<L270+pmsg_0
  9257                        L288:
  9258 05:1FB5: A8           	tay
  9259 05:1FB6: A5 10        	lda	<L270+2
  9260 05:1FB8: 85 1C        	sta	<L270+2+12
  9261 05:1FBA: A5 0F        	lda	<L270+1
  9262 05:1FBC: 85 1B        	sta	<L270+1+12
  9263 05:1FBE: 2B           	pld
  9264 05:1FBF: 3B           	tsc
  9265 05:1FC0: 18           	clc
  9266 05:1FC1: 69 1A 00     	adc	#L270+12
  9267 05:1FC4: 1B           	tcs
  9268 05:1FC5: 98           	tya
  9269 05:1FC6: 6B           	rtl
  9270                        ;}
  9271                        	.line	1927
  9272                        	.endblock	1927
  9273             0000000E   L270	equ	14
  9274             00000005   L271	equ	5
  9275 05:1FC7:              	ends
  9276                        	efunc
  9277                        	.endfunc	1927,5,14
  9278                        	.line	1927
  9279                        ;
  9280                        ;PFXOSMESSAGE k_create_process_msg(void FAR *data)
  9281                        ;{
  9282                        	.line	1929
  9283                        	.line	1930
  9284                        	EVTMAN
  9285                        	xdef	~~k_create_process_msg
  9286                        	func
  9287                        	.function	1930
  9288                        ~~k_create_process_msg:
  9289                        	longa	on
  9290                        	longi	on
  9291 05:1FC7: 3B           	tsc
  9292 05:1FC8: 38           	sec
  9293 05:1FC9: E9 04 00     	sbc	#L289
  9294 05:1FCC: 1B           	tcs
  9295 05:1FCD: 0B           	phd
  9296 05:1FCE: 5B           	tcd
  9297             00000004   data_0	set	4
  9298                        	.block	1930
  9299                        ;	PFXOSMESSAGE pmsg = (PFXOSMESSAGE)k_mem_allocate
                    _heap(sizeof(FXOSMESSAGE));
  9300                        ;	if(pmsg)
  9301             00000000   pmsg_1	set	0
  9302                        	.sym	pmsg,0,138,1,32,16
  9303                        	.sym	data,4,129,6,32
  9304 05:1FCF: F4 26 00     	pea	#<$26
  9305 05:1FD2: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  9306 05:1FD6: 85 01        	sta	<L290+pmsg_1
  9307 05:1FD8: 86 03        	stx	<L290+pmsg_1+2
  Sat Jul 10 2021  1:15                                                Page 184


  9308                        	.line	1932
  9309                        ;	{
  9310 05:1FDA: A5 01        	lda	<L290+pmsg_1
  9311 05:1FDC: 05 03        	ora	<L290+pmsg_1+2
  9312 05:1FDE: D0 03        	bne	L292
  9313 05:1FE0: 82 3E 00     	brl	L10182
  9314                        L292:
  9315                        	.line	1933
  9316                        ;		memset(pmsg,0,sizeof(FXOSMESSAGE));
  9317                        	.line	1934
  9318 05:1FE3: F4 26 00     	pea	#<$26
  9319 05:1FE6: F4 00 00     	pea	#<$0
  9320 05:1FE9: D4 03        	pei	<L290+pmsg_1+2
  9321 05:1FEB: D4 01        	pei	<L290+pmsg_1
  9322 05:1FED: 22 xx xx xx  	jsl	~~memset
  9323                        ;		pmsg->type = FX_PROCESS;
  9324                        	.line	1935
  9325 05:1FF1: A9 00 FF     	lda	#$ff00
  9326 05:1FF4: A0 08 00     	ldy	#$8
  9327 05:1FF7: 97 01        	sta	[<L290+pmsg_1],Y
  9328                        ;		pmsg->dest = FX_MSG_DEFAULT;
  9329                        	.line	1936
  9330 05:1FF9: A9 FF FF     	lda	#$ffff
  9331 05:1FFC: A0 04 00     	ldy	#$4
  9332 05:1FFF: 97 01        	sta	[<L290+pmsg_1],Y
  9333 05:2001: A9 FF FF     	lda	#$ffff
  9334 05:2004: A0 06 00     	ldy	#$6
  9335 05:2007: 97 01        	sta	[<L290+pmsg_1],Y
  9336                        ;		pmsg->src  = FX_MSG_DEFAULT;
  9337                        	.line	1937
  9338 05:2009: A9 FF FF     	lda	#$ffff
  9339 05:200C: 87 01        	sta	[<L290+pmsg_1]
  9340 05:200E: A9 FF FF     	lda	#$ffff
  9341 05:2011: A0 02 00     	ldy	#$2
  9342 05:2014: 97 01        	sta	[<L290+pmsg_1],Y
  9343                        ;		pmsg->data[0] = 0;
  9344                        	.line	1938
  9345 05:2016: E2 20        	sep	#$20
  9346                        	longa	off
  9347 05:2018: A9 00        	lda	#$0
  9348 05:201A: A0 16 00     	ldy	#$16
  9349 05:201D: 97 01        	sta	[<L290+pmsg_1],Y
  9350 05:201F: C2 20        	rep	#$20
  9351                        	longa	on
  9352                        ;	}
  9353                        	.line	1939
  9354                        ;	return pmsg;
  9355                        L10182:
  9356                        	.line	1940
  9357 05:2021: A6 03        	ldx	<L290+pmsg_1+2
  9358 05:2023: A5 01        	lda	<L290+pmsg_1
  9359                        L293:
  9360 05:2025: A8           	tay
  9361 05:2026: A5 06        	lda	<L289+2
  9362 05:2028: 85 0A        	sta	<L289+2+4
  9363 05:202A: A5 05        	lda	<L289+1
  9364 05:202C: 85 09        	sta	<L289+1+4
  9365 05:202E: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 185


  9366 05:202F: 3B           	tsc
  9367 05:2030: 18           	clc
  9368 05:2031: 69 08 00     	adc	#L289+4
  9369 05:2034: 1B           	tcs
  9370 05:2035: 98           	tya
  9371 05:2036: 6B           	rtl
  9372                        ;}
  9373                        	.line	1941
  9374                        	.endblock	1941
  9375             00000004   L289	equ	4
  9376             00000001   L290	equ	1
  9377 05:2037:              	ends
  9378                        	efunc
  9379                        	.endfunc	1941,1,4
  9380                        	.line	1941
  9381                        ;
  9382                        ;PFXOSMESSAGE k_create_synthetic_window_msg(HWND h
                    Wnd,MSGTYPE type,void FAR *data,UINT length)
  9383                        ;{
  9384                        	.line	1943
  9385                        	.line	1944
  9386                        	EVTMAN
  9387                        	xdef	~~k_create_synthetic_window_msg
  9388                        	func
  9389                        	.function	1944
  9390                        ~~k_create_synthetic_window_msg:
  9391                        	longa	on
  9392                        	longi	on
  9393 05:2037: 3B           	tsc
  9394 05:2038: 38           	sec
  9395 05:2039: E9 08 00     	sbc	#L294
  9396 05:203C: 1B           	tcs
  9397 05:203D: 0B           	phd
  9398 05:203E: 5B           	tcd
  9399             00000004   hWnd_0	set	4
  9400             00000008   type_0	set	8
  9401             0000000A   data_0	set	10
  9402             0000000E   length_0	set	14
  9403                        	.block	1944
  9404                        ;	PFXOSMESSAGE pmsg = (PFXOSMESSAGE)k_mem_allocate
                    _heap(sizeof(FXOSMESSAGE));
  9405                        ;	if(pmsg)
  9406             00000000   pmsg_1	set	0
  9407                        	.sym	pmsg,0,138,1,32,16
  9408                        	.sym	hWnd,4,129,6,32
  9409                        	.sym	type,8,16,6,16
  9410                        	.sym	data,10,129,6,32
  9411                        	.sym	length,14,16,6,16
  9412 05:203F: F4 26 00     	pea	#<$26
  9413 05:2042: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  9414 05:2046: 85 05        	sta	<L295+pmsg_1
  9415 05:2048: 86 07        	stx	<L295+pmsg_1+2
  9416                        	.line	1946
  9417                        ;	{
  9418 05:204A: A5 05        	lda	<L295+pmsg_1
  9419 05:204C: 05 07        	ora	<L295+pmsg_1+2
  9420 05:204E: D0 03        	bne	L297
  9421 05:2050: 82 67 00     	brl	L10183
  Sat Jul 10 2021  1:15                                                Page 186


  9422                        L297:
  9423                        	.line	1947
  9424                        ;		if(length < 16)
  9425                        	.line	1948
  9426                        ;		{
  9427 05:2053: A5 16        	lda	<L294+length_0
  9428 05:2055: C9 10 00     	cmp	#<$10
  9429 05:2058: 90 03        	bcc	L298
  9430 05:205A: 82 5D 00     	brl	L10184
  9431                        L298:
  9432                        	.line	1949
  9433                        ;			memset(pmsg,0,sizeof(FXOSMESSAGE
                    ));
  9434                        	.line	1950
  9435 05:205D: F4 26 00     	pea	#<$26
  9436 05:2060: F4 00 00     	pea	#<$0
  9437 05:2063: D4 07        	pei	<L295+pmsg_1+2
  9438 05:2065: D4 05        	pei	<L295+pmsg_1
  9439 05:2067: 22 xx xx xx  	jsl	~~memset
  9440                        ;			//pmsg->type = FX_PROCESS;
  9441                        ;			pmsg->type = type;
  9442                        	.line	1952
  9443 05:206B: A5 10        	lda	<L294+type_0
  9444 05:206D: A0 08 00     	ldy	#$8
  9445 05:2070: 97 05        	sta	[<L295+pmsg_1],Y
  9446                        ;			pmsg->hwnd = hWnd;
  9447                        	.line	1953
  9448 05:2072: A5 0C        	lda	<L294+hWnd_0
  9449 05:2074: A0 0A 00     	ldy	#$a
  9450 05:2077: 97 05        	sta	[<L295+pmsg_1],Y
  9451 05:2079: A5 0E        	lda	<L294+hWnd_0+2
  9452 05:207B: A0 0C 00     	ldy	#$c
  9453 05:207E: 97 05        	sta	[<L295+pmsg_1],Y
  9454                        ;			pmsg->dest = FX_MSG_DEFAULT;
  9455                        	.line	1954
  9456 05:2080: A9 FF FF     	lda	#$ffff
  9457 05:2083: A0 04 00     	ldy	#$4
  9458 05:2086: 97 05        	sta	[<L295+pmsg_1],Y
  9459 05:2088: A9 FF FF     	lda	#$ffff
  9460 05:208B: A0 06 00     	ldy	#$6
  9461 05:208E: 97 05        	sta	[<L295+pmsg_1],Y
  9462                        ;			pmsg->src  = FX_MSG_DEFAULT;
  9463                        	.line	1955
  9464 05:2090: A9 FF FF     	lda	#$ffff
  9465 05:2093: 87 05        	sta	[<L295+pmsg_1]
  9466 05:2095: A9 FF FF     	lda	#$ffff
  9467 05:2098: A0 02 00     	ldy	#$2
  9468 05:209B: 97 05        	sta	[<L295+pmsg_1],Y
  9469                        ;			memcpy(pmsg->data,data,length);
  9470                        	.line	1956
  9471 05:209D: D4 16        	pei	<L294+length_0
  9472 05:209F: D4 14        	pei	<L294+data_0+2
  9473 05:20A1: D4 12        	pei	<L294+data_0
  9474 05:20A3: 18           	clc
  9475 05:20A4: A9 16 00     	lda	#$16
  9476 05:20A7: 65 05        	adc	<L295+pmsg_1
  9477 05:20A9: 85 01        	sta	<R0
  9478 05:20AB: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 187


  9479 05:20AE: 65 07        	adc	<L295+pmsg_1+2
  9480 05:20B0: 85 03        	sta	<R0+2
  9481 05:20B2: D4 03        	pei	<R0+2
  9482 05:20B4: D4 01        	pei	<R0
  9483 05:20B6: 22 xx xx xx  	jsl	~~memcpy
  9484                        ;		}
  9485                        	.line	1957
  9486                        ;	}
  9487                        L10184:
  9488                        	.line	1958
  9489                        ;	return pmsg;
  9490                        L10183:
  9491                        	.line	1959
  9492 05:20BA: A6 07        	ldx	<L295+pmsg_1+2
  9493 05:20BC: A5 05        	lda	<L295+pmsg_1
  9494                        L299:
  9495 05:20BE: A8           	tay
  9496 05:20BF: A5 0A        	lda	<L294+2
  9497 05:20C1: 85 16        	sta	<L294+2+12
  9498 05:20C3: A5 09        	lda	<L294+1
  9499 05:20C5: 85 15        	sta	<L294+1+12
  9500 05:20C7: 2B           	pld
  9501 05:20C8: 3B           	tsc
  9502 05:20C9: 18           	clc
  9503 05:20CA: 69 14 00     	adc	#L294+12
  9504 05:20CD: 1B           	tcs
  9505 05:20CE: 98           	tya
  9506 05:20CF: 6B           	rtl
  9507                        ;}
  9508                        	.line	1960
  9509                        	.endblock	1960
  9510             00000008   L294	equ	8
  9511             00000005   L295	equ	5
  9512 05:20D0:              	ends
  9513                        	efunc
  9514                        	.endfunc	1960,5,8
  9515                        	.line	1960
  9516                        ;
  9517                        ;
  9518                        ;PFXOSMESSAGE k_create_msg(MSGIRQ type,ULONG timer
                    ,void FAR *data)
  9519                        ;{
  9520                        	.line	1963
  9521                        	.line	1964
  9522                        	EVTMAN
  9523                        	xdef	~~k_create_msg
  9524                        	func
  9525                        	.function	1964
  9526                        ~~k_create_msg:
  9527                        	longa	on
  9528                        	longi	on
  9529 05:20D0: 3B           	tsc
  9530 05:20D1: 38           	sec
  9531 05:20D2: E9 08 00     	sbc	#L300
  9532 05:20D5: 1B           	tcs
  9533 05:20D6: 0B           	phd
  9534 05:20D7: 5B           	tcd
  9535             00000004   type_0	set	4
  Sat Jul 10 2021  1:15                                                Page 188


  9536             00000006   timer_0	set	6
  9537             0000000A   data_0	set	10
  9538                        	.block	1964
  9539                        ;	PFXOSMESSAGE pmsg = (PFXOSMESSAGE)k_mem_allocate
                    _heap(sizeof(FXOSMESSAGE));
  9540                        ;	//PFXOSMESSAGE pmsg = (PFXOSMESSAGE)malloc(sizeo
                    f(FXOSMESSAGE));
  9541                        ;	if(pmsg)
  9542             00000000   pmsg_1	set	0
  9543                        	.sym	pmsg,0,138,1,32,16
  9544                        	.sym	type,4,5,6,16
  9545                        	.sym	timer,6,18,6,32
  9546                        	.sym	data,10,129,6,32
  9547 05:20D8: F4 26 00     	pea	#<$26
  9548 05:20DB: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  9549 05:20DF: 85 05        	sta	<L301+pmsg_1
  9550 05:20E1: 86 07        	stx	<L301+pmsg_1+2
  9551                        	.line	1967
  9552                        ;	{
  9553 05:20E3: A5 05        	lda	<L301+pmsg_1
  9554 05:20E5: 05 07        	ora	<L301+pmsg_1+2
  9555 05:20E7: D0 03        	bne	L303
  9556 05:20E9: 82 BA 02     	brl	L10185
  9557                        L303:
  9558                        	.line	1968
  9559                        ;		memset(pmsg,0,sizeof(FXOSMESSAGE));
  9560                        	.line	1969
  9561 05:20EC: F4 26 00     	pea	#<$26
  9562 05:20EF: F4 00 00     	pea	#<$0
  9563 05:20F2: D4 07        	pei	<L301+pmsg_1+2
  9564 05:20F4: D4 05        	pei	<L301+pmsg_1
  9565 05:20F6: 22 xx xx xx  	jsl	~~memset
  9566                        ;		pmsg->pheap = (LPVOID)0xFFFFFF;
  9567                        	.line	1970
  9568 05:20FA: A9 FF FF     	lda	#$ffff
  9569 05:20FD: A0 0E 00     	ldy	#$e
  9570 05:2100: 97 05        	sta	[<L301+pmsg_1],Y
  9571 05:2102: A9 FF 00     	lda	#$ff
  9572 05:2105: A0 10 00     	ldy	#$10
  9573 05:2108: 97 05        	sta	[<L301+pmsg_1],Y
  9574                        ;		pmsg->dest = FX_MSG_DEFAULT;
  9575                        	.line	1971
  9576 05:210A: A9 FF FF     	lda	#$ffff
  9577 05:210D: A0 04 00     	ldy	#$4
  9578 05:2110: 97 05        	sta	[<L301+pmsg_1],Y
  9579 05:2112: A9 FF FF     	lda	#$ffff
  9580 05:2115: A0 06 00     	ldy	#$6
  9581 05:2118: 97 05        	sta	[<L301+pmsg_1],Y
  9582                        ;		pmsg->src  = FX_MSG_DEFAULT;
  9583                        	.line	1972
  9584 05:211A: A9 FF FF     	lda	#$ffff
  9585 05:211D: 87 05        	sta	[<L301+pmsg_1]
  9586 05:211F: A9 FF FF     	lda	#$ffff
  9587 05:2122: A0 02 00     	ldy	#$2
  9588 05:2125: 97 05        	sta	[<L301+pmsg_1],Y
  9589                        ;		//k_debug_integer("k_create_msg:",type);
  9590                        ;		switch(type)
  9591                        	.line	1974
  Sat Jul 10 2021  1:15                                                Page 189


  9592 05:2127: A5 0C        	lda	<L300+type_0
  9593 05:2129: 82 4E 02     	brl	L10186
  9594                        ;		{
  9595                        	.line	1975
  9596                        ;		case IRQE_KEYBOARD_RAW:
  9597                        	.line	1976
  9598                        L10188:
  9599                        ;
  9600                        ;			pmsg->type = FX_KEY_SCANCODE;
  9601                        	.line	1978
  9602 05:212C: A9 15 0F     	lda	#$f15
  9603 05:212F: A0 08 00     	ldy	#$8
  9604 05:2132: 97 05        	sta	[<L301+pmsg_1],Y
  9605                        ;			memcpy(pmsg->data,data,sizeof(KE
                    YSTATE));
  9606                        	.line	1979
  9607 05:2134: F4 0E 00     	pea	#<$e
  9608 05:2137: D4 14        	pei	<L300+data_0+2
  9609 05:2139: D4 12        	pei	<L300+data_0
  9610 05:213B: 18           	clc
  9611 05:213C: A9 16 00     	lda	#$16
  9612 05:213F: 65 05        	adc	<L301+pmsg_1
  9613 05:2141: 85 01        	sta	<R0
  9614 05:2143: A9 00 00     	lda	#$0
  9615 05:2146: 65 07        	adc	<L301+pmsg_1+2
  9616 05:2148: 85 03        	sta	<R0+2
  9617 05:214A: D4 03        	pei	<R0+2
  9618 05:214C: D4 01        	pei	<R0
  9619 05:214E: 22 xx xx xx  	jsl	~~memcpy
  9620                        ;			/*
  9621                        ;			pmsg->data[0] = ((LPSTR)data)[0]
                    ; // scanCode
  9622                        ;			pmsg->data[1] = ((LPSTR)data)[1]
                    ; // isShifted
  9623                        ;			pmsg->data[2] = ((LPSTR)data)[2]
                    ; // isAlt
  9624                        ;			pmsg->data[3] = ((LPSTR)data)[3]
                    ; // isExtended
  9625                        ;			pmsg->data[4] = ((LPSTR)data)[4]
                    ; // isCapsLock
  9626                        ;			pmsg->data[5] = ((LPSTR)data)[5]
                    ; // isNumLock
  9627                        ;			pmsg->data[6] = ((LPSTR)data)[6]
                    ; // isScrollLock
  9628                        ;			pmsg->data[7] = ((LPSTR)data)[7]
                    ; // keyChar
  9629                        ;			pmsg->data[8] = ((LPSTR)data)[8]
                    ; // keyChar
  9630                        ;			*/
  9631                        ;
  9632                        ;			/*
  9633                        ;			pmsg->type = FX_KEY_DOWN;
  9634                        ;			if( (pmsg->data[3] == 0) && (pms
                    g->data[0] > 128) )
  9635                        ;			{
  9636                        ;				pmsg->type = FX_KEY_UP;
  9637                        ;			}
  9638                        ;			*/
  Sat Jul 10 2021  1:15                                                Page 190


  9639                        ;			break;
  9640                        	.line	1999
  9641 05:2152: 82 51 02     	brl	L10187
  9642                        ;		case IRQE_KEYBOARD:
  9643                        	.line	2000
  9644                        L10189:
  9645                        ;			pmsg->type = FX_KEY_DOWN;
  9646                        	.line	2001
  9647 05:2155: A9 10 0F     	lda	#$f10
  9648 05:2158: A0 08 00     	ldy	#$8
  9649 05:215B: 97 05        	sta	[<L301+pmsg_1],Y
  9650                        ;			pmsg->data[0] = ((LPSTR)data)[0]
                    ;  //*((INT*)data) & 0x00FF; // keycode
  9651                        	.line	2002
  9652 05:215D: E2 20        	sep	#$20
  9653                        	longa	off
  9654 05:215F: A7 12        	lda	[<L300+data_0]
  9655 05:2161: A0 16 00     	ldy	#$16
  9656 05:2164: 97 05        	sta	[<L301+pmsg_1],Y
  9657 05:2166: C2 20        	rep	#$20
  9658                        	longa	on
  9659                        ;			pmsg->data[1] = ((LPSTR)data)[1]
                    ; //(*((INT*)data) > 256); // exkeycode
  9660                        	.line	2003
  9661 05:2168: E2 20        	sep	#$20
  9662                        	longa	off
  9663 05:216A: A0 01 00     	ldy	#$1
  9664 05:216D: B7 12        	lda	[<L300+data_0],Y
  9665 05:216F: A0 17 00     	ldy	#$17
  9666 05:2172: 97 05        	sta	[<L301+pmsg_1],Y
  9667 05:2174: C2 20        	rep	#$20
  9668                        	longa	on
  9669                        ;			pmsg->data[2] = k_getKeyboardCha
                    r(*((BYTE*)data),pmsg->data[1],pmsg->data[1],0); // char
  9670                        	.line	2004
  9671 05:2176: F4 00 00     	pea	#<$0
  9672 05:2179: A0 17 00     	ldy	#$17
  9673 05:217C: B7 05        	lda	[<L301+pmsg_1],Y
  9674 05:217E: 29 FF 00     	and	#$ff
  9675 05:2181: 48           	pha
  9676 05:2182: A0 17 00     	ldy	#$17
  9677 05:2185: B7 05        	lda	[<L301+pmsg_1],Y
  9678 05:2187: 29 FF 00     	and	#$ff
  9679 05:218A: 48           	pha
  9680 05:218B: A7 12        	lda	[<L300+data_0]
  9681 05:218D: 48           	pha
  9682 05:218E: 22 1B 24 05  	jsl	~~k_getKeyboardChar
  9683 05:2192: E2 20        	sep	#$20
  9684                        	longa	off
  9685 05:2194: A0 18 00     	ldy	#$18
  9686 05:2197: 97 05        	sta	[<L301+pmsg_1],Y
  9687 05:2199: C2 20        	rep	#$20
  9688                        	longa	on
  9689                        ;
  9690                        ;			if(pmsg->data[0] > 128)
  9691                        	.line	2006
  9692                        ;			{
  9693 05:219B: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 191


  9694                        	longa	off
  9695 05:219D: A9 80        	lda	#$80
  9696 05:219F: A0 16 00     	ldy	#$16
  9697 05:21A2: D7 05        	cmp	[<L301+pmsg_1],Y
  9698 05:21A4: C2 20        	rep	#$20
  9699                        	longa	on
  9700 05:21A6: 90 03        	bcc	L304
  9701 05:21A8: 82 08 00     	brl	L10190
  9702                        L304:
  9703                        	.line	2007
  9704                        ;				pmsg->type = FX_KEY_UP;
  9705                        	.line	2008
  9706 05:21AB: A9 12 0F     	lda	#$f12
  9707 05:21AE: A0 08 00     	ldy	#$8
  9708 05:21B1: 97 05        	sta	[<L301+pmsg_1],Y
  9709                        ;			}
  9710                        	.line	2009
  9711                        ;
  9712                        ;			if(pmsg->data[2] == 0)
  9713                        L10190:
  9714                        	.line	2011
  9715                        ;			{
  9716 05:21B3: A0 18 00     	ldy	#$18
  9717 05:21B6: B7 05        	lda	[<L301+pmsg_1],Y
  9718 05:21B8: 29 FF 00     	and	#$ff
  9719 05:21BB: F0 03        	beq	L305
  9720 05:21BD: 82 04 00     	brl	L10191
  9721                        L305:
  9722                        	.line	2012
  9723                        ;				k_init_keyboard();
  9724                        	.line	2013
  9725 05:21C0: 22 xx xx xx  	jsl	~~k_init_keyboard
  9726                        ;			}
  9727                        	.line	2014
  9728                        ;
  9729                        ;			break;
  9730                        L10191:
  9731                        	.line	2016
  9732 05:21C4: 82 DF 01     	brl	L10187
  9733                        ;		case IRQE_MOUSE:
  9734                        	.line	2017
  9735                        L10192:
  9736                        ;			pmsg->type = FX_MOUSE_MOVE;
  9737                        	.line	2018
  9738 05:21C7: A9 03 0F     	lda	#$f03
  9739 05:21CA: A0 08 00     	ldy	#$8
  9740 05:21CD: 97 05        	sta	[<L301+pmsg_1],Y
  9741                        ;			pmsg->data[0] = *((BYTE*)data) &
                     7; // mouse byte 1
  9742                        	.line	2019
  9743 05:21CF: E2 20        	sep	#$20
  9744                        	longa	off
  9745 05:21D1: A7 12        	lda	[<L300+data_0]
  9746 05:21D3: 29 07        	and	#<$7
  9747 05:21D5: C2 20        	rep	#$20
  9748                        	longa	on
  9749 05:21D7: E2 20        	sep	#$20
  9750                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 192


  9751 05:21D9: A0 16 00     	ldy	#$16
  9752 05:21DC: 97 05        	sta	[<L301+pmsg_1],Y
  9753 05:21DE: C2 20        	rep	#$20
  9754                        	longa	on
  9755                        ;			pmsg->data[1] = ((LPCHAR)data)[1
                    ];
  9756                        	.line	2020
  9757 05:21E0: E2 20        	sep	#$20
  9758                        	longa	off
  9759 05:21E2: A0 01 00     	ldy	#$1
  9760 05:21E5: B7 12        	lda	[<L300+data_0],Y
  9761 05:21E7: A0 17 00     	ldy	#$17
  9762 05:21EA: 97 05        	sta	[<L301+pmsg_1],Y
  9763 05:21EC: C2 20        	rep	#$20
  9764                        	longa	on
  9765                        ;			pmsg->data[2] = ((LPCHAR)data)[2
                    ];
  9766                        	.line	2021
  9767 05:21EE: E2 20        	sep	#$20
  9768                        	longa	off
  9769 05:21F0: A0 02 00     	ldy	#$2
  9770 05:21F3: B7 12        	lda	[<L300+data_0],Y
  9771 05:21F5: A0 18 00     	ldy	#$18
  9772 05:21F8: 97 05        	sta	[<L301+pmsg_1],Y
  9773 05:21FA: C2 20        	rep	#$20
  9774                        	longa	on
  9775                        ;			pmsg->data[3] = ((LPCHAR)data)[3
                    ];
  9776                        	.line	2022
  9777 05:21FC: E2 20        	sep	#$20
  9778                        	longa	off
  9779 05:21FE: A0 03 00     	ldy	#$3
  9780 05:2201: B7 12        	lda	[<L300+data_0],Y
  9781 05:2203: A0 19 00     	ldy	#$19
  9782 05:2206: 97 05        	sta	[<L301+pmsg_1],Y
  9783 05:2208: C2 20        	rep	#$20
  9784                        	longa	on
  9785                        ;			pmsg->data[4] = ((LPCHAR)data)[4
                    ];
  9786                        	.line	2023
  9787 05:220A: E2 20        	sep	#$20
  9788                        	longa	off
  9789 05:220C: A0 04 00     	ldy	#$4
  9790 05:220F: B7 12        	lda	[<L300+data_0],Y
  9791 05:2211: A0 1A 00     	ldy	#$1a
  9792 05:2214: 97 05        	sta	[<L301+pmsg_1],Y
  9793 05:2216: C2 20        	rep	#$20
  9794                        	longa	on
  9795                        ;
  9796                        ;			break;
  9797                        	.line	2025
  9798 05:2218: 82 8B 01     	brl	L10187
  9799                        ;		case IRQE_COM1:
  9800                        	.line	2026
  9801                        L10193:
  9802                        ;			pmsg->type = FX_COM1_DATA;
  9803                        	.line	2027
  9804 05:221B: A9 00 FC     	lda	#$fc00
  Sat Jul 10 2021  1:15                                                Page 193


  9805 05:221E: A0 08 00     	ldy	#$8
  9806 05:2221: 97 05        	sta	[<L301+pmsg_1],Y
  9807                        ;			pmsg->data[0] = ((LPCHAR)data)[0
                    ];
  9808                        	.line	2028
  9809 05:2223: E2 20        	sep	#$20
  9810                        	longa	off
  9811 05:2225: A7 12        	lda	[<L300+data_0]
  9812 05:2227: A0 16 00     	ldy	#$16
  9813 05:222A: 97 05        	sta	[<L301+pmsg_1],Y
  9814 05:222C: C2 20        	rep	#$20
  9815                        	longa	on
  9816                        ;			break;
  9817                        	.line	2029
  9818 05:222E: 82 75 01     	brl	L10187
  9819                        ;		case IRQE_COM2:
  9820                        	.line	2030
  9821                        L10194:
  9822                        ;			pmsg->type = FX_COM2_DATA;
  9823                        	.line	2031
  9824 05:2231: A9 01 FC     	lda	#$fc01
  9825 05:2234: A0 08 00     	ldy	#$8
  9826 05:2237: 97 05        	sta	[<L301+pmsg_1],Y
  9827                        ;			pmsg->data[0] = ((LPCHAR)data)[0
                    ];
  9828                        	.line	2032
  9829 05:2239: E2 20        	sep	#$20
  9830                        	longa	off
  9831 05:223B: A7 12        	lda	[<L300+data_0]
  9832 05:223D: A0 16 00     	ldy	#$16
  9833 05:2240: 97 05        	sta	[<L301+pmsg_1],Y
  9834 05:2242: C2 20        	rep	#$20
  9835                        	longa	on
  9836                        ;			break;
  9837                        	.line	2033
  9838 05:2244: 82 5F 01     	brl	L10187
  9839                        ;		case IRQE_SOL_TIMER:
  9840                        	.line	2034
  9841                        L10195:
  9842                        ;			pmsg->type = FX_PROCESS_TIMER;
  9843                        	.line	2035
  9844 05:2247: A9 F1 FF     	lda	#$fff1
  9845 05:224A: A0 08 00     	ldy	#$8
  9846 05:224D: 97 05        	sta	[<L301+pmsg_1],Y
  9847                        ;			pmsg->data[0] = 0;
  9848                        	.line	2036
  9849 05:224F: E2 20        	sep	#$20
  9850                        	longa	off
  9851 05:2251: A9 00        	lda	#$0
  9852 05:2253: A0 16 00     	ldy	#$16
  9853 05:2256: 97 05        	sta	[<L301+pmsg_1],Y
  9854 05:2258: C2 20        	rep	#$20
  9855                        	longa	on
  9856                        ;			break;
  9857                        	.line	2037
  9858 05:225A: 82 49 01     	brl	L10187
  9859                        ;		case IRQE_FLOPPY:
  9860                        	.line	2038
  Sat Jul 10 2021  1:15                                                Page 194


  9861                        L10196:
  9862                        ;			pmsg->type = FX_PROCESS_FLOPPY;
  9863                        	.line	2039
  9864 05:225D: A9 F2 FF     	lda	#$fff2
  9865 05:2260: A0 08 00     	ldy	#$8
  9866 05:2263: 97 05        	sta	[<L301+pmsg_1],Y
  9867                        ;			pmsg->pheap = k_mem_allocate_hea
                    p(512);
  9868                        	.line	2040
  9869 05:2265: F4 00 02     	pea	#<$200
  9870 05:2268: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  9871 05:226C: 85 01        	sta	<R0
  9872 05:226E: 86 03        	stx	<R0+2
  9873 05:2270: A5 01        	lda	<R0
  9874 05:2272: A0 0E 00     	ldy	#$e
  9875 05:2275: 97 05        	sta	[<L301+pmsg_1],Y
  9876 05:2277: A5 03        	lda	<R0+2
  9877 05:2279: A0 10 00     	ldy	#$10
  9878 05:227C: 97 05        	sta	[<L301+pmsg_1],Y
  9879                        ;			memcpy(pmsg->pheap,data,512);
  9880                        	.line	2041
  9881 05:227E: F4 00 02     	pea	#<$200
  9882 05:2281: D4 14        	pei	<L300+data_0+2
  9883 05:2283: D4 12        	pei	<L300+data_0
  9884 05:2285: A0 10 00     	ldy	#$10
  9885 05:2288: B7 05        	lda	[<L301+pmsg_1],Y
  9886 05:228A: 48           	pha
  9887 05:228B: A0 0E 00     	ldy	#$e
  9888 05:228E: B7 05        	lda	[<L301+pmsg_1],Y
  9889 05:2290: 48           	pha
  9890 05:2291: 22 xx xx xx  	jsl	~~memcpy
  9891                        ;			pmsg->src = FX_MSGSRC_DRIVER;
  9892                        	.line	2042
  9893 05:2295: A9 FE FF     	lda	#$fffe
  9894 05:2298: 87 05        	sta	[<L301+pmsg_1]
  9895 05:229A: A9 FF FF     	lda	#$ffff
  9896 05:229D: A0 02 00     	ldy	#$2
  9897 05:22A0: 97 05        	sta	[<L301+pmsg_1],Y
  9898                        ;			//k_debug_integer("IRQE_FLOPPY:"
                    ,FX_PROCESS_FLOPPY);
  9899                        ;			break;
  9900                        	.line	2044
  9901 05:22A2: 82 01 01     	brl	L10187
  9902                        ;		case IRQE_SDCARD:
  9903                        	.line	2045
  9904                        L10197:
  9905                        ;			pmsg->type = FX_PROCESS_SDCARD;
  9906                        	.line	2046
  9907 05:22A5: A9 F3 FF     	lda	#$fff3
  9908 05:22A8: A0 08 00     	ldy	#$8
  9909 05:22AB: 97 05        	sta	[<L301+pmsg_1],Y
  9910                        ;			pmsg->data[0] = 0;
  9911                        	.line	2047
  9912 05:22AD: E2 20        	sep	#$20
  9913                        	longa	off
  9914 05:22AF: A9 00        	lda	#$0
  9915 05:22B1: A0 16 00     	ldy	#$16
  9916 05:22B4: 97 05        	sta	[<L301+pmsg_1],Y
  Sat Jul 10 2021  1:15                                                Page 195


  9917 05:22B6: C2 20        	rep	#$20
  9918                        	longa	on
  9919                        ;			pmsg->src = FX_MSGSRC_DRIVER;
  9920                        	.line	2048
  9921 05:22B8: A9 FE FF     	lda	#$fffe
  9922 05:22BB: 87 05        	sta	[<L301+pmsg_1]
  9923 05:22BD: A9 FF FF     	lda	#$ffff
  9924 05:22C0: A0 02 00     	ldy	#$2
  9925 05:22C3: 97 05        	sta	[<L301+pmsg_1],Y
  9926                        ;			//pmsg->pheap = k_mem_allocate_h
                    eap(512);
  9927                        ;			//memcpy(pmsg->pheap,data,512);
  9928                        ;			//k_debug_string("k_create_msg:F
                    X_PROCESS_SDCARD\r\n");
  9929                        ;			break;
  9930                        	.line	2052
  9931 05:22C5: 82 DE 00     	brl	L10187
  9932                        ;		case IRQE_SDCARD_INS:
  9933                        	.line	2053
  9934                        L10198:
  9935                        ;			pmsg->type = FX_PROCESS_SDCARD;
  9936                        	.line	2054
  9937 05:22C8: A9 F3 FF     	lda	#$fff3
  9938 05:22CB: A0 08 00     	ldy	#$8
  9939 05:22CE: 97 05        	sta	[<L301+pmsg_1],Y
  9940                        ;			pmsg->data[0] = 1;
  9941                        	.line	2055
  9942 05:22D0: E2 20        	sep	#$20
  9943                        	longa	off
  9944 05:22D2: A9 01        	lda	#$1
  9945 05:22D4: A0 16 00     	ldy	#$16
  9946 05:22D7: 97 05        	sta	[<L301+pmsg_1],Y
  9947 05:22D9: C2 20        	rep	#$20
  9948                        	longa	on
  9949                        ;			pmsg->src = FX_MSGSRC_DRIVER;
  9950                        	.line	2056
  9951 05:22DB: A9 FE FF     	lda	#$fffe
  9952 05:22DE: 87 05        	sta	[<L301+pmsg_1]
  9953 05:22E0: A9 FF FF     	lda	#$ffff
  9954 05:22E3: A0 02 00     	ldy	#$2
  9955 05:22E6: 97 05        	sta	[<L301+pmsg_1],Y
  9956                        ;			//pmsg->pheap = k_mem_allocate_h
                    eap(512);
  9957                        ;			//memcpy(pmsg->pheap,data,512);
  9958                        ;			//k_debug_string("k_create_msg:I
                    RQE_SDCARD_INS\r\n");
  9959                        ;			break;
  9960                        	.line	2060
  9961 05:22E8: 82 BB 00     	brl	L10187
  9962                        ;		case IRQE_LPT_PORT0:
  9963                        	.line	2061
  9964                        L10199:
  9965                        ;			pmsg->type = FX_PROCESS_LPT0;
  9966                        	.line	2062
  9967 05:22EB: A9 F4 FF     	lda	#$fff4
  9968 05:22EE: A0 08 00     	ldy	#$8
  9969 05:22F1: 97 05        	sta	[<L301+pmsg_1],Y
  9970                        ;			pmsg->data[0] = 0;
  Sat Jul 10 2021  1:15                                                Page 196


  9971                        	.line	2063
  9972 05:22F3: E2 20        	sep	#$20
  9973                        	longa	off
  9974 05:22F5: A9 00        	lda	#$0
  9975 05:22F7: A0 16 00     	ldy	#$16
  9976 05:22FA: 97 05        	sta	[<L301+pmsg_1],Y
  9977 05:22FC: C2 20        	rep	#$20
  9978                        	longa	on
  9979                        ;			//k_debug_integer("k_create_msg:
                    IRQE_LPT_PORT0:",type);
  9980                        ;			break;
  9981                        	.line	2065
  9982 05:22FE: 82 A5 00     	brl	L10187
  9983                        ;		case IRQE_RTC:
  9984                        	.line	2066
  9985                        L10200:
  9986                        ;			pmsg->type = FX_PROCESS_RTC;
  9987                        	.line	2067
  9988 05:2301: A9 F5 FF     	lda	#$fff5
  9989 05:2304: A0 08 00     	ldy	#$8
  9990 05:2307: 97 05        	sta	[<L301+pmsg_1],Y
  9991                        ;			pmsg->data[0] = 0;
  9992                        	.line	2068
  9993 05:2309: E2 20        	sep	#$20
  9994                        	longa	off
  9995 05:230B: A9 00        	lda	#$0
  9996 05:230D: A0 16 00     	ldy	#$16
  9997 05:2310: 97 05        	sta	[<L301+pmsg_1],Y
  9998 05:2312: C2 20        	rep	#$20
  9999                        	longa	on
 10000                        ;			//k_debug_integer("k_create_msg:
                    IRQE_RTC:",type);
 10001                        ;			break;
 10002                        	.line	2070
 10003 05:2314: 82 8F 00     	brl	L10187
 10004                        ;		case IRQE_OPL2R:
 10005                        	.line	2071
 10006                        L10201:
 10007                        ;			pmsg->type = FX_PROCESS_OPL2R;
 10008                        	.line	2072
 10009 05:2317: A9 F6 FF     	lda	#$fff6
 10010 05:231A: A0 08 00     	ldy	#$8
 10011 05:231D: 97 05        	sta	[<L301+pmsg_1],Y
 10012                        ;			pmsg->data[0] = 0;
 10013                        	.line	2073
 10014 05:231F: E2 20        	sep	#$20
 10015                        	longa	off
 10016 05:2321: A9 00        	lda	#$0
 10017 05:2323: A0 16 00     	ldy	#$16
 10018 05:2326: 97 05        	sta	[<L301+pmsg_1],Y
 10019 05:2328: C2 20        	rep	#$20
 10020                        	longa	on
 10021                        ;			//k_debug_integer("k_create_msg:
                    IRQE_OPL2R:",type);
 10022                        ;			break;
 10023                        	.line	2075
 10024 05:232A: 82 79 00     	brl	L10187
 10025                        ;		case IRQE_OPL2L:
  Sat Jul 10 2021  1:15                                                Page 197


 10026                        	.line	2076
 10027                        L10202:
 10028                        ;			pmsg->type = FX_PROCESS_OPL2L;
 10029                        	.line	2077
 10030 05:232D: A9 F7 FF     	lda	#$fff7
 10031 05:2330: A0 08 00     	ldy	#$8
 10032 05:2333: 97 05        	sta	[<L301+pmsg_1],Y
 10033                        ;			pmsg->data[0] = 0;
 10034                        	.line	2078
 10035 05:2335: E2 20        	sep	#$20
 10036                        	longa	off
 10037 05:2337: A9 00        	lda	#$0
 10038 05:2339: A0 16 00     	ldy	#$16
 10039 05:233C: 97 05        	sta	[<L301+pmsg_1],Y
 10040 05:233E: C2 20        	rep	#$20
 10041                        	longa	on
 10042                        ;			//k_debug_integer("k_create_msg:
                    IRQE_OPL2L:",type);
 10043                        ;			break;
 10044                        	.line	2080
 10045 05:2340: 82 63 00     	brl	L10187
 10046                        ;		case IRQE_VDMA:
 10047                        	.line	2081
 10048                        L10203:
 10049                        ;			pmsg->type = FX_PROCESS_VDMA;
 10050                        	.line	2082
 10051 05:2343: A9 F8 FF     	lda	#$fff8
 10052 05:2346: A0 08 00     	ldy	#$8
 10053 05:2349: 97 05        	sta	[<L301+pmsg_1],Y
 10054                        ;			pmsg->data[0] = 0;
 10055                        	.line	2083
 10056 05:234B: E2 20        	sep	#$20
 10057                        	longa	off
 10058 05:234D: A9 00        	lda	#$0
 10059 05:234F: A0 16 00     	ldy	#$16
 10060 05:2352: 97 05        	sta	[<L301+pmsg_1],Y
 10061 05:2354: C2 20        	rep	#$20
 10062                        	longa	on
 10063                        ;			//k_debug_integer("k_create_msg:
                    IRQE_VDMA:",type);
 10064                        ;			 break;
 10065                        	.line	2085
 10066 05:2356: 82 4D 00     	brl	L10187
 10067                        ;		case IRQE_SDMA:
 10068                        	.line	2086
 10069                        L10204:
 10070                        ;			pmsg->type = FX_PROCESS_SDMA;
 10071                        	.line	2087
 10072 05:2359: A9 F9 FF     	lda	#$fff9
 10073 05:235C: A0 08 00     	ldy	#$8
 10074 05:235F: 97 05        	sta	[<L301+pmsg_1],Y
 10075                        ;			pmsg->data[0] = 0;
 10076                        	.line	2088
 10077 05:2361: E2 20        	sep	#$20
 10078                        	longa	off
 10079 05:2363: A9 00        	lda	#$0
 10080 05:2365: A0 16 00     	ldy	#$16
 10081 05:2368: 97 05        	sta	[<L301+pmsg_1],Y
  Sat Jul 10 2021  1:15                                                Page 198


 10082 05:236A: C2 20        	rep	#$20
 10083                        	longa	on
 10084                        ;			//k_debug_integer("k_create_msg:
                    IRQE_SDMA:",type);
 10085                        ;			break;
 10086                        	.line	2090
 10087 05:236C: 82 37 00     	brl	L10187
 10088                        ;			/*
 10089                        ;		case IRQE_EXCEPTION:
 10090                        ;			pmsg->type = FX_PROCESS_EXCEPTIO
                    N;
 10091                        ;			pmsg->data[0] = 0;
 10092                        ;			k_debug_integer("k_create_msg:IR
                    QE_EXCEPTION:",type);
 10093                        ;			break;*/
 10094                        ;		default:
 10095                        	.line	2097
 10096                        L10205:
 10097                        ;			pmsg->type = 99;//IRQE_UNKNOWN;
 10098                        	.line	2098
 10099 05:236F: A9 63 00     	lda	#$63
 10100 05:2372: A0 08 00     	ldy	#$8
 10101 05:2375: 97 05        	sta	[<L301+pmsg_1],Y
 10102                        ;			break;
 10103                        	.line	2099
 10104 05:2377: 82 2C 00     	brl	L10187
 10105                        ;		}
 10106                        	.line	2100
 10107                        L10186:
 10108                        	xref	~~~fsw
 10109 05:237A: 22 xx xx xx  	jsl	~~~fsw
 10110 05:237E: 01 00        	dw	1
 10111 05:2380: 11 00        	dw	17
 10112 05:2382: 6E 23        	dw	L10205-1
 10113 05:2384: 54 21        	dw	L10189-1
 10114 05:2386: C6 21        	dw	L10192-1
 10115 05:2388: 1A 22        	dw	L10193-1
 10116 05:238A: 30 22        	dw	L10194-1
 10117 05:238C: 46 22        	dw	L10195-1
 10118 05:238E: 5C 22        	dw	L10196-1
 10119 05:2390: A4 22        	dw	L10197-1
 10120 05:2392: C7 22        	dw	L10198-1
 10121 05:2394: 6E 23        	dw	L10205-1
 10122 05:2396: EA 22        	dw	L10199-1
 10123 05:2398: 00 23        	dw	L10200-1
 10124 05:239A: 16 23        	dw	L10201-1
 10125 05:239C: 2C 23        	dw	L10202-1
 10126 05:239E: 42 23        	dw	L10203-1
 10127 05:23A0: 58 23        	dw	L10204-1
 10128 05:23A2: 6E 23        	dw	L10205-1
 10129 05:23A4: 2B 21        	dw	L10188-1
 10130                        L10187:
 10131                        ;		//k_debug_integer("k_create_msg pmsg->ty
                    pe:",pmsg->type);
 10132                        ;	}
 10133                        	.line	2102
 10134                        ;	return pmsg;
 10135                        L10185:
  Sat Jul 10 2021  1:15                                                Page 199


 10136                        	.line	2103
 10137 05:23A6: A6 07        	ldx	<L301+pmsg_1+2
 10138 05:23A8: A5 05        	lda	<L301+pmsg_1
 10139                        L306:
 10140 05:23AA: A8           	tay
 10141 05:23AB: A5 0A        	lda	<L300+2
 10142 05:23AD: 85 14        	sta	<L300+2+10
 10143 05:23AF: A5 09        	lda	<L300+1
 10144 05:23B1: 85 13        	sta	<L300+1+10
 10145 05:23B3: 2B           	pld
 10146 05:23B4: 3B           	tsc
 10147 05:23B5: 18           	clc
 10148 05:23B6: 69 12 00     	adc	#L300+10
 10149 05:23B9: 1B           	tcs
 10150 05:23BA: 98           	tya
 10151 05:23BB: 6B           	rtl
 10152                        ;}
 10153                        	.line	2104
 10154                        	.endblock	2104
 10155             00000008   L300	equ	8
 10156             00000005   L301	equ	5
 10157 05:23BC:              	ends
 10158                        	efunc
 10159                        	.endfunc	2104,5,8
 10160                        	.line	2104
 10161                        ;
 10162                        ;void k_destory_msg(PFXOSMESSAGE pmsg)
 10163                        ;{
 10164                        	.line	2106
 10165                        	.line	2107
 10166                        	EVTMAN
 10167                        	xdef	~~k_destory_msg
 10168                        	func
 10169                        	.function	2107
 10170                        ~~k_destory_msg:
 10171                        	longa	on
 10172                        	longi	on
 10173 05:23BC: 3B           	tsc
 10174 05:23BD: 38           	sec
 10175 05:23BE: E9 00 00     	sbc	#L307
 10176 05:23C1: 1B           	tcs
 10177 05:23C2: 0B           	phd
 10178 05:23C3: 5B           	tcd
 10179             00000004   pmsg_0	set	4
 10180                        	.block	2107
 10181                        ;	if(pmsg!=NULL)
 10182                        	.sym	pmsg,4,138,6,32,16
 10183                        	.line	2108
 10184                        ;	{
 10185 05:23C4: A5 04        	lda	<L307+pmsg_0
 10186 05:23C6: 05 06        	ora	<L307+pmsg_0+2
 10187 05:23C8: D0 03        	bne	L310
 10188 05:23CA: 82 3E 00     	brl	L10206
 10189                        L310:
 10190                        	.line	2109
 10191                        ;		if(pmsg->pheap!=NULL && pmsg->pheap!=(LP
                    VOID)0xFFFFFF)
 10192                        	.line	2110
  Sat Jul 10 2021  1:15                                                Page 200


 10193                        ;			k_dealloc_message_arg(pmsg->phea
                    p);
 10194 05:23CD: A0 0E 00     	ldy	#$e
 10195 05:23D0: B7 04        	lda	[<L307+pmsg_0],Y
 10196 05:23D2: A0 10 00     	ldy	#$10
 10197 05:23D5: 17 04        	ora	[<L307+pmsg_0],Y
 10198 05:23D7: D0 03        	bne	L311
 10199 05:23D9: 82 27 00     	brl	L10207
 10200                        L311:
 10201 05:23DC: A0 0E 00     	ldy	#$e
 10202 05:23DF: B7 04        	lda	[<L307+pmsg_0],Y
 10203 05:23E1: C9 FF FF     	cmp	#<$ffffff
 10204 05:23E4: D0 08        	bne	L312
 10205 05:23E6: A0 10 00     	ldy	#$10
 10206 05:23E9: B7 04        	lda	[<L307+pmsg_0],Y
 10207 05:23EB: C9 FF 00     	cmp	#^$ffffff
 10208                        L312:
 10209 05:23EE: D0 03        	bne	L313
 10210 05:23F0: 82 10 00     	brl	L10207
 10211                        L313:
 10212                        	.line	2111
 10213 05:23F3: A0 10 00     	ldy	#$10
 10214 05:23F6: B7 04        	lda	[<L307+pmsg_0],Y
 10215 05:23F8: 48           	pha
 10216 05:23F9: A0 0E 00     	ldy	#$e
 10217 05:23FC: B7 04        	lda	[<L307+pmsg_0],Y
 10218 05:23FE: 48           	pha
 10219 05:23FF: 22 74 17 05  	jsl	~~k_dealloc_message_arg
 10220                        ;
 10221                        ;		/*
 10222                        ;		if(pmsg->pheap == (LPVOID)0xFFFFFF)
 10223                        ;		{
 10224                        ;			//k_debug_pointer("k_destory_msg
                    :IRQ MSG:",pmsg);
 10225                        ;			free(pmsg);
 10226                        ;		}
 10227                        ;		else
 10228                        ;			k_mem_deallocate_heap(pmsg);
 10229                        ;		*/
 10230                        ;		k_mem_deallocate_heap(pmsg);
 10231                        L10207:
 10232                        	.line	2122
 10233 05:2403: D4 06        	pei	<L307+pmsg_0+2
 10234 05:2405: D4 04        	pei	<L307+pmsg_0
 10235 05:2407: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
 10236                        ;	}
 10237                        	.line	2123
 10238                        ;}
 10239                        L10206:
 10240                        	.line	2124
 10241                        L314:
 10242 05:240B: A5 02        	lda	<L307+2
 10243 05:240D: 85 06        	sta	<L307+2+4
 10244 05:240F: A5 01        	lda	<L307+1
 10245 05:2411: 85 05        	sta	<L307+1+4
 10246 05:2413: 2B           	pld
 10247 05:2414: 3B           	tsc
 10248 05:2415: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 201


 10249 05:2416: 69 04 00     	adc	#L307+4
 10250 05:2419: 1B           	tcs
 10251 05:241A: 6B           	rtl
 10252                        	.endblock	2124
 10253             00000000   L307	equ	0
 10254             00000001   L308	equ	1
 10255 05:241B:              	ends
 10256                        	efunc
 10257                        	.endfunc	2124,1,0
 10258                        	.line	2124
 10259                        ;
 10260                        ;
 10261                        ;KEYCODE k_getKeyboardChar(SCANCODE sc,int isExt,i
                    nt isShift,int isAlt)
 10262                        ;{
 10263                        	.line	2127
 10264                        	.line	2128
 10265                        	EVTMAN
 10266                        	xdef	~~k_getKeyboardChar
 10267                        	func
 10268                        	.function	2128
 10269                        ~~k_getKeyboardChar:
 10270                        	longa	on
 10271                        	longi	on
 10272 05:241B: 3B           	tsc
 10273 05:241C: 38           	sec
 10274 05:241D: E9 0A 00     	sbc	#L315
 10275 05:2420: 1B           	tcs
 10276 05:2421: 0B           	phd
 10277 05:2422: 5B           	tcd
 10278             00000004   sc_0	set	4
 10279             00000006   isExt_0	set	6
 10280             00000008   isShift_0	set	8
 10281             0000000A   isAlt_0	set	10
 10282                        	.block	2128
 10283                        ;	KEYCODE kc = 0;
 10284                        ;
 10285                        ;	if(isExt)
 10286             00000000   kc_1	set	0
 10287                        	.sym	kc,0,16,1,16
 10288                        	.sym	sc,4,14,6,8
 10289                        	.sym	isExt,6,5,6,16
 10290                        	.sym	isShift,8,5,6,16
 10291                        	.sym	isAlt,10,5,6,16
 10292 05:2423: 64 09        	stz	<L316+kc_1
 10293                        	.line	2131
 10294                        ;	{
 10295 05:2425: A5 10        	lda	<L315+isExt_0
 10296 05:2427: D0 03        	bne	L318
 10297 05:2429: 82 05 00     	brl	L10208
 10298                        L318:
 10299                        	.line	2132
 10300                        ;		kc = 0;
 10301                        	.line	2133
 10302 05:242C: 64 09        	stz	<L316+kc_1
 10303                        ;	}
 10304                        	.line	2134
 10305                        ;	else
  Sat Jul 10 2021  1:15                                                Page 202


 10306 05:242E: 82 54 00     	brl	L10209
 10307                        L10208:
 10308                        ;	{
 10309                        	.line	2136
 10310                        ;		/*
 10311                        ;		if(sc > (sizeof(_k_keyCodesShiftSet) - 1
                    ))
 10312                        ;		{
 10313                        ;			return -1;
 10314                        ;		}
 10315                        ;		*/
 10316                        ;		if(isShift)
 10317                        	.line	2143
 10318                        ;		{
 10319 05:2431: A5 12        	lda	<L315+isShift_0
 10320 05:2433: D0 03        	bne	L319
 10321 05:2435: 82 16 00     	brl	L10210
 10322                        L319:
 10323                        	.line	2144
 10324                        ;			kc =  _k_keyCodesShiftSet[sc];
 10325                        	.line	2145
 10326 05:2438: A5 0E        	lda	<L315+sc_0
 10327 05:243A: 29 FF 00     	and	#$ff
 10328 05:243D: 85 05        	sta	<R1
 10329 05:243F: A5 05        	lda	<R1
 10330 05:2441: 0A           	asl	A
 10331 05:2442: 85 01        	sta	<R0
 10332 05:2444: A6 01        	ldx	<R0
 10333 05:2446: BD xx xx     	lda	|~~_k_keyCodesShiftSet,X
 10334 05:2449: 85 09        	sta	<L316+kc_1
 10335                        ;		}
 10336                        	.line	2146
 10337                        ;		else
 10338 05:244B: 82 37 00     	brl	L10211
 10339                        L10210:
 10340                        ;		{
 10341                        	.line	2148
 10342                        ;			if(sc > 128)
 10343                        	.line	2149
 10344                        ;			{
 10345 05:244E: E2 20        	sep	#$20
 10346                        	longa	off
 10347 05:2450: A9 80        	lda	#$80
 10348 05:2452: C5 0E        	cmp	<L315+sc_0
 10349 05:2454: C2 20        	rep	#$20
 10350                        	longa	on
 10351 05:2456: 90 03        	bcc	L320
 10352 05:2458: 82 17 00     	brl	L10212
 10353                        L320:
 10354                        	.line	2150
 10355                        ;				sc-=128;
 10356                        	.line	2151
 10357 05:245B: A5 0E        	lda	<L315+sc_0
 10358 05:245D: 29 FF 00     	and	#$ff
 10359 05:2460: 85 01        	sta	<R0
 10360 05:2462: 18           	clc
 10361 05:2463: A9 80 FF     	lda	#$ff80
 10362 05:2466: 65 01        	adc	<R0
  Sat Jul 10 2021  1:15                                                Page 203


 10363 05:2468: 85 05        	sta	<R1
 10364 05:246A: E2 20        	sep	#$20
 10365                        	longa	off
 10366 05:246C: A5 05        	lda	<R1
 10367 05:246E: 85 0E        	sta	<L315+sc_0
 10368 05:2470: C2 20        	rep	#$20
 10369                        	longa	on
 10370                        ;			}
 10371                        	.line	2152
 10372                        ;			kc =  _k_keyCodesSet[sc];
 10373                        L10212:
 10374                        	.line	2153
 10375 05:2472: A5 0E        	lda	<L315+sc_0
 10376 05:2474: 29 FF 00     	and	#$ff
 10377 05:2477: 85 05        	sta	<R1
 10378 05:2479: A5 05        	lda	<R1
 10379 05:247B: 0A           	asl	A
 10380 05:247C: 85 01        	sta	<R0
 10381 05:247E: A6 01        	ldx	<R0
 10382 05:2480: BD xx xx     	lda	|~~_k_keyCodesSet,X
 10383 05:2483: 85 09        	sta	<L316+kc_1
 10384                        ;		}
 10385                        	.line	2154
 10386                        L10211:
 10387                        ;	}
 10388                        	.line	2155
 10389                        L10209:
 10390                        ;	/*
 10391                        ;	if(kc == 0)
 10392                        ;	{
 10393                        ;		k_debug_hex("UNMAPPED KEY:",sc);
 10394                        ;		k_debug_integer("UNMAPPED isExt:",isExt)
                    ;
 10395                        ;		k_debug_integer("UNMAPPED isShift:",isSh
                    ift);
 10396                        ;		k_debug_integer("UNMAPPED isAlt:",isAlt)
                    ;
 10397                        ;	}
 10398                        ;	else
 10399                        ;	{
 10400                        ;		k_debug_hex("KC:",kc);
 10401                        ;		k_debug_char("CHAR:",kc);
 10402                        ;	}
 10403                        ;	*/
 10404                        ;	return kc;
 10405                        	.line	2170
 10406 05:2485: A5 09        	lda	<L316+kc_1
 10407                        L321:
 10408 05:2487: A8           	tay
 10409 05:2488: A5 0C        	lda	<L315+2
 10410 05:248A: 85 14        	sta	<L315+2+8
 10411 05:248C: A5 0B        	lda	<L315+1
 10412 05:248E: 85 13        	sta	<L315+1+8
 10413 05:2490: 2B           	pld
 10414 05:2491: 3B           	tsc
 10415 05:2492: 18           	clc
 10416 05:2493: 69 12 00     	adc	#L315+8
 10417 05:2496: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 204


 10418 05:2497: 98           	tya
 10419 05:2498: 6B           	rtl
 10420                        ;}
 10421                        	.line	2171
 10422                        	.endblock	2171
 10423             0000000A   L315	equ	10
 10424             00000009   L316	equ	9
 10425 05:2499:              	ends
 10426                        	efunc
 10427                        	.endfunc	2171,9,10
 10428                        	.line	2171
 10429                        ;
 10430                        ;
 10431                        ;HANDLE k_register_idle_proc(FXIDLEPROCESS idlePro
                    c,UINT type)
 10432                        ;{
 10433                        	.line	2174
 10434                        	.line	2175
 10435                        	EVTMAN
 10436                        	xdef	~~k_register_idle_proc
 10437                        	func
 10438                        	.function	2175
 10439                        ~~k_register_idle_proc:
 10440                        	longa	on
 10441                        	longi	on
 10442 05:2499: 3B           	tsc
 10443 05:249A: 38           	sec
 10444 05:249B: E9 04 00     	sbc	#L322
 10445 05:249E: 1B           	tcs
 10446 05:249F: 0B           	phd
 10447 05:24A0: 5B           	tcd
 10448             00000004   idleProc_0	set	4
 10449             00000008   type_0	set	8
 10450                        	.block	2175
 10451                        ;	HANDLE hNode = NULL;
 10452                        ;
 10453                        ;	k_debug_pointer("k_register_idle_proc:",idleProc
                    );
 10454             00000000   hNode_1	set	0
 10455                        	.sym	hNode,0,129,1,32
 10456                        	.sym	idleProc,4,641,6,32
 10457                        	.sym	type,8,16,6,16
 10458 05:24A1: 64 01        	stz	<L323+hNode_1
 10459 05:24A3: 64 03        	stz	<L323+hNode_1+2
 10460                        	.line	2178
 10461 05:24A5: D4 0A        	pei	<L322+idleProc_0+2
 10462 05:24A7: D4 08        	pei	<L322+idleProc_0
 10463 05:24A9: F4 xx xx     	pea	#^L269
 10464 05:24AC: F4 xx xx     	pea	#<L269
 10465 05:24AF: 22 xx xx xx  	jsl	~~k_debug_pointer
 10466                        ;	if(type == IDLE_PRIORITY_HIGH)
 10467                        	.line	2179
 10468                        ;		hNode = (HANDLE)k_nodelist_naddtolist(_k
                    _eventManager_IdleProcList,NL_TYPE_EVENT_HI_IDLEPROC,(ULONG)
                    idleProc,(LPVOID)idleProc);
 10469 05:24B3: A5 0C        	lda	<L322+type_0
 10470 05:24B5: C9 01 00     	cmp	#<$1
 10471 05:24B8: F0 03        	beq	L325
  Sat Jul 10 2021  1:15                                                Page 205


 10472 05:24BA: 82 1E 00     	brl	L10213
 10473                        L325:
 10474                        	.line	2180
 10475 05:24BD: D4 0A        	pei	<L322+idleProc_0+2
 10476 05:24BF: D4 08        	pei	<L322+idleProc_0
 10477 05:24C1: D4 0A        	pei	<L322+idleProc_0+2
 10478 05:24C3: D4 08        	pei	<L322+idleProc_0
 10479 05:24C5: F4 F1 00     	pea	#<$f1
 10480 05:24C8: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10481 05:24CB: 48           	pha
 10482 05:24CC: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10483 05:24CF: 48           	pha
 10484 05:24D0: 22 xx xx xx  	jsl	~~k_nodelist_naddtolist
 10485 05:24D4: 85 01        	sta	<L323+hNode_1
 10486 05:24D6: 86 03        	stx	<L323+hNode_1+2
 10487                        ;	else
 10488 05:24D8: 82 1B 00     	brl	L10214
 10489                        L10213:
 10490                        ;		hNode = (HANDLE)k_nodelist_naddtolist(_k
                    _eventManager_IdleProcList,NL_TYPE_EVENT_IDLEPROC,(ULONG)idl
                    eProc,(LPVOID)idleProc);
 10491                        	.line	2182
 10492 05:24DB: D4 0A        	pei	<L322+idleProc_0+2
 10493 05:24DD: D4 08        	pei	<L322+idleProc_0
 10494 05:24DF: D4 0A        	pei	<L322+idleProc_0+2
 10495 05:24E1: D4 08        	pei	<L322+idleProc_0
 10496 05:24E3: F4 F0 00     	pea	#<$f0
 10497 05:24E6: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10498 05:24E9: 48           	pha
 10499 05:24EA: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10500 05:24ED: 48           	pha
 10501 05:24EE: 22 xx xx xx  	jsl	~~k_nodelist_naddtolist
 10502 05:24F2: 85 01        	sta	<L323+hNode_1
 10503 05:24F4: 86 03        	stx	<L323+hNode_1+2
 10504                        L10214:
 10505                        ;
 10506                        ;	idleProc(FX_IDLEPROC_REG);
 10507                        	.line	2184
 10508 05:24F6: F4 01 00     	pea	#<$1
 10509 05:24F9: A6 0A        	ldx	<L322+idleProc_0+2
 10510 05:24FB: A5 08        	lda	<L322+idleProc_0
 10511                        	xref	~~~lcal
 10512 05:24FD: 22 xx xx xx  	jsl	~~~lcal
 10513                        ;
 10514                        ;	return hNode;
 10515                        	.line	2186
 10516 05:2501: A6 03        	ldx	<L323+hNode_1+2
 10517 05:2503: A5 01        	lda	<L323+hNode_1
 10518                        L326:
 10519 05:2505: A8           	tay
 10520 05:2506: A5 06        	lda	<L322+2
 10521 05:2508: 85 0C        	sta	<L322+2+6
 10522 05:250A: A5 05        	lda	<L322+1
 10523 05:250C: 85 0B        	sta	<L322+1+6
 10524 05:250E: 2B           	pld
 10525 05:250F: 3B           	tsc
 10526 05:2510: 18           	clc
 10527 05:2511: 69 0A 00     	adc	#L322+6
  Sat Jul 10 2021  1:15                                                Page 206


 10528 05:2514: 1B           	tcs
 10529 05:2515: 98           	tya
 10530 05:2516: 6B           	rtl
 10531                        ;}
 10532                        	.line	2187
 10533                        	.endblock	2187
 10534             00000004   L322	equ	4
 10535             00000001   L323	equ	1
 10536 05:2517:              	ends
 10537                        	efunc
 10538                        	.endfunc	2187,1,4
 10539                        	.line	2187
 10540                        	data
 10541                        L269:
 10542 00:080E: 6B 5F 72 65  	db	$6B,$5F,$72,$65,$67,$69,$73,$74,$65,$72,
                    $5F,$69,$64,$6C,$65
       00:0812: 67 69 73 74 
       00:0816: 65 72 5F 69 
       00:081A: 64 6C 65 
 10543 00:081D: 5F 70 72 6F  	db	$5F,$70,$72,$6F,$63,$3A,$00
       00:0821: 63 3A 00 
 10544 00:0824:              	ends
 10545                        ;
 10546                        ;BOOL k_unregister_idle_proc(HANDLE hIdleProc)
 10547                        ;{
 10548                        	.line	2189
 10549                        	.line	2190
 10550                        	EVTMAN
 10551                        	xdef	~~k_unregister_idle_proc
 10552                        	func
 10553                        	.function	2190
 10554                        ~~k_unregister_idle_proc:
 10555                        	longa	on
 10556                        	longi	on
 10557 05:2517: 3B           	tsc
 10558 05:2518: 38           	sec
 10559 05:2519: E9 0D 00     	sbc	#L328
 10560 05:251C: 1B           	tcs
 10561 05:251D: 0B           	phd
 10562 05:251E: 5B           	tcd
 10563             00000004   hIdleProc_0	set	4
 10564                        	.block	2190
 10565                        ;	BOOL bRet = FALSE;
 10566                        ;
 10567                        ;	PFXNODE pnode = k_nodelist_remove_node(_k_eventM
                    anager_IdleProcList->listhead->next,(PFXNODE)hIdleProc);
 10568                        ;	if(pnode)
 10569             00000000   bRet_1	set	0
 10570             00000001   pnode_1	set	1
 10571                        	.sym	bRet,0,14,1,8
 10572                        	.sym	pnode,1,138,1,32,5
 10573                        	.sym	hIdleProc,4,129,6,32
 10574 05:251F: E2 20        	sep	#$20
 10575                        	longa	off
 10576 05:2521: 64 09        	stz	<L329+bRet_1
 10577 05:2523: C2 20        	rep	#$20
 10578                        	longa	on
 10579 05:2525: D4 13        	pei	<L328+hIdleProc_0+2
  Sat Jul 10 2021  1:15                                                Page 207


 10580 05:2527: D4 11        	pei	<L328+hIdleProc_0
 10581 05:2529: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10582 05:252C: 85 01        	sta	<R0
 10583 05:252E: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10584 05:2531: 85 03        	sta	<R0+2
 10585 05:2533: A7 01        	lda	[<R0]
 10586 05:2535: 85 05        	sta	<R1
 10587 05:2537: A0 02 00     	ldy	#$2
 10588 05:253A: B7 01        	lda	[<R0],Y
 10589 05:253C: 85 07        	sta	<R1+2
 10590 05:253E: A0 0C 00     	ldy	#$c
 10591 05:2541: B7 05        	lda	[<R1],Y
 10592 05:2543: 48           	pha
 10593 05:2544: A0 0A 00     	ldy	#$a
 10594 05:2547: B7 05        	lda	[<R1],Y
 10595 05:2549: 48           	pha
 10596 05:254A: 22 xx xx xx  	jsl	~~k_nodelist_remove_node
 10597 05:254E: 85 0A        	sta	<L329+pnode_1
 10598 05:2550: 86 0C        	stx	<L329+pnode_1+2
 10599                        	.line	2194
 10600                        ;	{
 10601 05:2552: A5 0A        	lda	<L329+pnode_1
 10602 05:2554: 05 0C        	ora	<L329+pnode_1+2
 10603 05:2556: D0 03        	bne	L331
 10604 05:2558: 82 12 00     	brl	L10215
 10605                        L331:
 10606                        	.line	2195
 10607                        ;		((FXIDLEPROCESS)pnode->data)(FX_IDLEPROC
                    _UNREG);
 10608                        	.line	2196
 10609 05:255B: F4 02 00     	pea	#<$2
 10610 05:255E: A0 04 00     	ldy	#$4
 10611 05:2561: B7 0A        	lda	[<L329+pnode_1],Y
 10612 05:2563: AA           	tax
 10613 05:2564: A0 02 00     	ldy	#$2
 10614 05:2567: B7 0A        	lda	[<L329+pnode_1],Y
 10615                        	xref	~~~lcal
 10616 05:2569: 22 xx xx xx  	jsl	~~~lcal
 10617                        ;	}
 10618                        	.line	2197
 10619                        ;	return bRet;
 10620                        L10215:
 10621                        	.line	2198
 10622 05:256D: A5 09        	lda	<L329+bRet_1
 10623 05:256F: 29 FF 00     	and	#$ff
 10624                        L332:
 10625 05:2572: A8           	tay
 10626 05:2573: A5 0F        	lda	<L328+2
 10627 05:2575: 85 13        	sta	<L328+2+4
 10628 05:2577: A5 0E        	lda	<L328+1
 10629 05:2579: 85 12        	sta	<L328+1+4
 10630 05:257B: 2B           	pld
 10631 05:257C: 3B           	tsc
 10632 05:257D: 18           	clc
 10633 05:257E: 69 11 00     	adc	#L328+4
 10634 05:2581: 1B           	tcs
 10635 05:2582: 98           	tya
 10636 05:2583: 6B           	rtl
  Sat Jul 10 2021  1:15                                                Page 208


 10637                        ;}
 10638                        	.line	2199
 10639                        	.endblock	2199
 10640             0000000D   L328	equ	13
 10641             00000009   L329	equ	9
 10642 05:2584:              	ends
 10643                        	efunc
 10644                        	.endfunc	2199,9,13
 10645                        	.line	2199
 10646                        ;
 10647                        ;VOID k_process_idle_procs(VOID)
 10648                        ;{
 10649                        	.line	2201
 10650                        	.line	2202
 10651                        	EVTMAN
 10652                        	xdef	~~k_process_idle_procs
 10653                        	func
 10654                        	.function	2202
 10655                        ~~k_process_idle_procs:
 10656                        	longa	on
 10657                        	longi	on
 10658 05:2584: 3B           	tsc
 10659 05:2585: 38           	sec
 10660 05:2586: E9 00 00     	sbc	#L333
 10661 05:2589: 1B           	tcs
 10662 05:258A: 0B           	phd
 10663 05:258B: 5B           	tcd
 10664                        	.block	2202
 10665                        ;	//k_debug_string("k_process_idle_procs\r\n");
 10666                        ;	//k_debug_pointer("k_process_idle_procs:",_k_eve
                    ntManager_IdleProcList->listhead);
 10667                        ;
 10668                        ;	//k_debug_nodelist(_k_eventManager_IdleProcList-
                    >listhead);
 10669                        ;
 10670                        ;	//k_nodelist_foreach_data(_k_eventManager_IdlePr
                    ocList->listhead->next,(LPVOID)FX_IDLEPROC_PROCESS,k_execute
                    _idleprocs);
 10671                        ;	k_nodelist_foreach_type(_k_eventManager_IdleProc
                    List,NL_TYPE_EVENT_IDLEPROC,(LPVOID)FX_IDLEPROC_PROCESS,k_ex
                    ecute_idleprocs);
 10672                        	.line	2209
 10673 05:258C: F4 05 00     	pea	#^~~k_execute_idleprocs
 10674 05:258F: F4 DA 25     	pea	#<~~k_execute_idleprocs
 10675 05:2592: F4 00 00     	pea	#^$4
 10676 05:2595: F4 04 00     	pea	#<$4
 10677 05:2598: F4 F0 00     	pea	#<$f0
 10678 05:259B: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10679 05:259E: 48           	pha
 10680 05:259F: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10681 05:25A2: 48           	pha
 10682 05:25A3: 22 xx xx xx  	jsl	~~k_nodelist_foreach_type
 10683                        ;}
 10684                        	.line	2210
 10685                        L336:
 10686 05:25A7: 2B           	pld
 10687 05:25A8: 3B           	tsc
 10688 05:25A9: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 209


 10689 05:25AA: 69 00 00     	adc	#L333
 10690 05:25AD: 1B           	tcs
 10691 05:25AE: 6B           	rtl
 10692                        	.endblock	2210
 10693             00000000   L333	equ	0
 10694             00000001   L334	equ	1
 10695 05:25AF:              	ends
 10696                        	efunc
 10697                        	.endfunc	2210,1,0
 10698                        	.line	2210
 10699                        ;
 10700                        ;VOID k_process_hi_idle_procs(VOID)
 10701                        ;{
 10702                        	.line	2212
 10703                        	.line	2213
 10704                        	EVTMAN
 10705                        	xdef	~~k_process_hi_idle_procs
 10706                        	func
 10707                        	.function	2213
 10708                        ~~k_process_hi_idle_procs:
 10709                        	longa	on
 10710                        	longi	on
 10711 05:25AF: 3B           	tsc
 10712 05:25B0: 38           	sec
 10713 05:25B1: E9 00 00     	sbc	#L337
 10714 05:25B4: 1B           	tcs
 10715 05:25B5: 0B           	phd
 10716 05:25B6: 5B           	tcd
 10717                        	.block	2213
 10718                        ;	//k_debug_string("k_process_hi_idle_procs\r\n");
 10719                        ;
 10720                        ;	//k_debug_pointer("k_process_idle_procs:",_k_eve
                    ntManager_IdleProcList->listhead);
 10721                        ;
 10722                        ;	//k_debug_nodelist(_k_eventManager_IdleProcList-
                    >listhead);
 10723                        ;
 10724                        ;	//k_nodelist_foreach_data(_k_eventManager_IdlePr
                    ocList->listhead->next,(LPVOID)FX_IDLEPROC_PROCESS,k_execute
                    _idleprocs);
 10725                        ;	k_nodelist_foreach_type(_k_eventManager_IdleProc
                    List,NL_TYPE_EVENT_HI_IDLEPROC,(LPVOID)FX_IDLEPROC_PROCESS,k
                    _execute_idleprocs);
 10726                        	.line	2221
 10727 05:25B7: F4 05 00     	pea	#^~~k_execute_idleprocs
 10728 05:25BA: F4 DA 25     	pea	#<~~k_execute_idleprocs
 10729 05:25BD: F4 00 00     	pea	#^$4
 10730 05:25C0: F4 04 00     	pea	#<$4
 10731 05:25C3: F4 F1 00     	pea	#<$f1
 10732 05:25C6: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10733 05:25C9: 48           	pha
 10734 05:25CA: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10735 05:25CD: 48           	pha
 10736 05:25CE: 22 xx xx xx  	jsl	~~k_nodelist_foreach_type
 10737                        ;}
 10738                        	.line	2222
 10739                        L340:
 10740 05:25D2: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 210


 10741 05:25D3: 3B           	tsc
 10742 05:25D4: 18           	clc
 10743 05:25D5: 69 00 00     	adc	#L337
 10744 05:25D8: 1B           	tcs
 10745 05:25D9: 6B           	rtl
 10746                        	.endblock	2222
 10747             00000000   L337	equ	0
 10748             00000001   L338	equ	1
 10749 05:25DA:              	ends
 10750                        	efunc
 10751                        	.endfunc	2222,1,0
 10752                        	.line	2222
 10753                        ;
 10754                        ;void k_execute_idleprocs(LPVOID ctx,LPVOID data)
 10755                        ;{
 10756                        	.line	2224
 10757                        	.line	2225
 10758                        	EVTMAN
 10759                        	xdef	~~k_execute_idleprocs
 10760                        	func
 10761                        	.function	2225
 10762                        ~~k_execute_idleprocs:
 10763                        	longa	on
 10764                        	longi	on
 10765 05:25DA: 3B           	tsc
 10766 05:25DB: 38           	sec
 10767 05:25DC: E9 00 00     	sbc	#L341
 10768 05:25DF: 1B           	tcs
 10769 05:25E0: 0B           	phd
 10770 05:25E1: 5B           	tcd
 10771             00000004   ctx_0	set	4
 10772             00000008   data_0	set	8
 10773                        	.block	2225
 10774                        ;	//k_debug_pointer("k_execute_idleprocs:",data);
 10775                        ;	if(data)
 10776                        	.sym	ctx,4,129,6,32
 10777                        	.sym	data,8,129,6,32
 10778                        	.line	2227
 10779                        ;	{
 10780 05:25E2: A5 08        	lda	<L341+data_0
 10781 05:25E4: 05 0A        	ora	<L341+data_0+2
 10782 05:25E6: D0 03        	bne	L344
 10783 05:25E8: 82 0A 00     	brl	L10216
 10784                        L344:
 10785                        	.line	2228
 10786                        ;		((FXIDLEPROCESS)data)((UINT)((ULONG)ctx)
                    );
 10787                        	.line	2229
 10788 05:25EB: D4 04        	pei	<L341+ctx_0
 10789 05:25ED: A6 0A        	ldx	<L341+data_0+2
 10790 05:25EF: A5 08        	lda	<L341+data_0
 10791                        	xref	~~~lcal
 10792 05:25F1: 22 xx xx xx  	jsl	~~~lcal
 10793                        ;	}
 10794                        	.line	2230
 10795                        ;}
 10796                        L10216:
 10797                        	.line	2231
  Sat Jul 10 2021  1:15                                                Page 211


 10798                        L345:
 10799 05:25F5: A5 02        	lda	<L341+2
 10800 05:25F7: 85 0A        	sta	<L341+2+8
 10801 05:25F9: A5 01        	lda	<L341+1
 10802 05:25FB: 85 09        	sta	<L341+1+8
 10803 05:25FD: 2B           	pld
 10804 05:25FE: 3B           	tsc
 10805 05:25FF: 18           	clc
 10806 05:2600: 69 08 00     	adc	#L341+8
 10807 05:2603: 1B           	tcs
 10808 05:2604: 6B           	rtl
 10809                        	.endblock	2231
 10810             00000000   L341	equ	0
 10811             00000001   L342	equ	1
 10812 05:2605:              	ends
 10813                        	efunc
 10814                        	.endfunc	2231,1,0
 10815                        	.line	2231
 10816                        ;
 10817                        ;VOID DeviceChecks(UINT reason)
 10818                        ;{
 10819                        	.line	2233
 10820                        	.line	2234
 10821                        	EVTMAN
 10822                        	xdef	~~DeviceChecks
 10823                        	func
 10824                        	.function	2234
 10825                        ~~DeviceChecks:
 10826                        	longa	on
 10827                        	longi	on
 10828 05:2605: 3B           	tsc
 10829 05:2606: 38           	sec
 10830 05:2607: E9 01 00     	sbc	#L346
 10831 05:260A: 1B           	tcs
 10832 05:260B: 0B           	phd
 10833 05:260C: 5B           	tcd
 10834             00000004   reason_0	set	4
 10835                        	.block	2234
 10836                        ;	BYTE s = 0;
 10837                        ;
 10838                        ;	switch(reason)
 10839             00000000   s_1	set	0
 10840                        	.sym	s,0,14,1,8
 10841                        	.sym	reason,4,16,6,16
 10842 05:260D: E2 20        	sep	#$20
 10843                        	longa	off
 10844 05:260F: 64 01        	stz	<L347+s_1
 10845 05:2611: C2 20        	rep	#$20
 10846                        	longa	on
 10847                        	.line	2237
 10848 05:2613: A5 05        	lda	<L346+reason_0
 10849 05:2615: 82 29 00     	brl	L10217
 10850                        ;	{
 10851                        	.line	2238
 10852                        ;	case FX_IDLEPROC_PROCESS:
 10853                        	.line	2239
 10854                        L10219:
 10855                        ;		//k_debug_strings("DeviceChecks reason:"
  Sat Jul 10 2021  1:15                                                Page 212


                    ,"FX_IDLEPROC_PROCESS");
 10856                        ;
 10857                        ;
 10858                        ;		/*
 10859                        ;		*((unsigned long*)(&SDC_SD_ADDR_7_0_REG[
                    0])) = 0L;
 10860                        ;
 10861                        ;		//k_debug_string("DeviceChecks FX_IDLEPR
                    OC_PROCESS:Enter\r\n");
 10862                        ;		SDC_TRANS_TYPE_REG[0]    = SDC_TRANS_REA
                    D_BLK;
 10863                        ;
 10864                        ;		//SDC_TRANS_TYPE_REG[0]    = SDC_TRANS_I
                    NIT_SD;
 10865                        ;		SDC_TRANS_CONTROL_REG[0] = SDC_TRANS_STA
                    RT;
 10866                        ;
 10867                        ;		s = SDC_TRANS_BUSY;
 10868                        ;		while(s & SDC_TRANS_BUSY)
 10869                        ;		{
 10870                        ;			s = SDC_TRANS_STATUS_REG[0];
 10871                        ;		}
 10872                        ;
 10873                        ;
 10874                        ;		if(SDC_TRANS_ERROR_REG[0])
 10875                        ;		{
 10876                        ;			k_debug_hex("DeviceChecks SDC_TR
                    ANS_ERROR_REG:",SDC_TRANS_ERROR_REG[0]);
 10877                        ;		}
 10878                        ;
 10879                        ;		//k_debug_string("DeviceChecks FX_IDLEPR
                    OC_PROCESS:Exit\r\n");
 10880                        ;		*/
 10881                        ;
 10882                        ;		break;
 10883                        	.line	2267
 10884 05:2618: 82 3A 00     	brl	L10218
 10885                        ;	case FX_IDLEPROC_REG:
 10886                        	.line	2268
 10887                        L10220:
 10888                        ;		k_debug_strings("DeviceChecks reason:","
                    FX_IDLEPROC_REG");
 10889                        	.line	2269
 10890 05:261B: F4 xx xx     	pea	#^L327+21
 10891 05:261E: F4 xx xx     	pea	#<L327+21
 10892 05:2621: F4 xx xx     	pea	#^L327
 10893 05:2624: F4 xx xx     	pea	#<L327
 10894 05:2627: 22 xx xx xx  	jsl	~~k_debug_strings
 10895                        ;		break;
 10896                        	.line	2270
 10897 05:262B: 82 27 00     	brl	L10218
 10898                        ;	case FX_IDLEPROC_UNREG:
 10899                        	.line	2271
 10900                        L10221:
 10901                        ;		k_debug_strings("DeviceChecks reason:","
                    FX_IDLEPROC_UNREG");
 10902                        	.line	2272
 10903 05:262E: F4 xx xx     	pea	#^L327+58
  Sat Jul 10 2021  1:15                                                Page 213


 10904 05:2631: F4 xx xx     	pea	#<L327+58
 10905 05:2634: F4 xx xx     	pea	#^L327+37
 10906 05:2637: F4 xx xx     	pea	#<L327+37
 10907 05:263A: 22 xx xx xx  	jsl	~~k_debug_strings
 10908                        ;		break;
 10909                        	.line	2273
 10910 05:263E: 82 14 00     	brl	L10218
 10911                        ;	}
 10912                        	.line	2274
 10913                        L10217:
 10914                        	xref	~~~swt
 10915 05:2641: 22 xx xx xx  	jsl	~~~swt
 10916 05:2645: 03 00        	dw	3
 10917 05:2647: 01 00        	dw	1
 10918 05:2649: 1A 26        	dw	L10220-1
 10919 05:264B: 02 00        	dw	2
 10920 05:264D: 2D 26        	dw	L10221-1
 10921 05:264F: 04 00        	dw	4
 10922 05:2651: 17 26        	dw	L10219-1
 10923 05:2653: 54 26        	dw	L10218-1
 10924                        L10218:
 10925                        ;}
 10926                        	.line	2275
 10927                        L349:
 10928 05:2655: A5 03        	lda	<L346+2
 10929 05:2657: 85 05        	sta	<L346+2+2
 10930 05:2659: A5 02        	lda	<L346+1
 10931 05:265B: 85 04        	sta	<L346+1+2
 10932 05:265D: 2B           	pld
 10933 05:265E: 3B           	tsc
 10934 05:265F: 18           	clc
 10935 05:2660: 69 03 00     	adc	#L346+2
 10936 05:2663: 1B           	tcs
 10937 05:2664: 6B           	rtl
 10938                        	.endblock	2275
 10939             00000001   L346	equ	1
 10940             00000001   L347	equ	1
 10941 05:2665:              	ends
 10942                        	efunc
 10943                        	.endfunc	2275,1,1
 10944                        	.line	2275
 10945                        	data
 10946                        L327:
 10947 00:0824: 44 65 76 69  	db	$44,$65,$76,$69,$63,$65,$43,$68,$65,$63,
                    $6B,$73,$20,$72,$65
       00:0828: 63 65 43 68 
       00:082C: 65 63 6B 73 
       00:0830: 20 72 65 
 10948 00:0833: 61 73 6F 6E  	db	$61,$73,$6F,$6E,$3A,$00,$46,$58,$5F,$49,
                    $44,$4C,$45,$50,$52
       00:0837: 3A 00 46 58 
       00:083B: 5F 49 44 4C 
       00:083F: 45 50 52 
 10949 00:0842: 4F 43 5F 52  	db	$4F,$43,$5F,$52,$45,$47,$00,$44,$65,$76,
                    $69,$63,$65,$43,$68
       00:0846: 45 47 00 44 
       00:084A: 65 76 69 63 
       00:084E: 65 43 68 
  Sat Jul 10 2021  1:15                                                Page 214


 10950 00:0851: 65 63 6B 73  	db	$65,$63,$6B,$73,$20,$72,$65,$61,$73,$6F,
                    $6E,$3A,$00,$46,$58
       00:0855: 20 72 65 61 
       00:0859: 73 6F 6E 3A 
       00:085D: 00 46 58 
 10951 00:0860: 5F 49 44 4C  	db	$5F,$49,$44,$4C,$45,$50,$52,$4F,$43,$5F,
                    $55,$4E,$52,$45,$47
       00:0864: 45 50 52 4F 
       00:0868: 43 5F 55 4E 
       00:086C: 52 45 47 
 10952 00:086F: 00           	db	$00
 10953 00:0870:              	ends
 10954                        ;
 10955                        ;VOID IdleCleanup(UINT reason)
 10956                        ;{
 10957                        	.line	2277
 10958                        	.line	2278
 10959                        	EVTMAN
 10960                        	xdef	~~IdleCleanup
 10961                        	func
 10962                        	.function	2278
 10963                        ~~IdleCleanup:
 10964                        	longa	on
 10965                        	longi	on
 10966 05:2665: 3B           	tsc
 10967 05:2666: 38           	sec
 10968 05:2667: E9 08 00     	sbc	#L351
 10969 05:266A: 1B           	tcs
 10970 05:266B: 0B           	phd
 10971 05:266C: 5B           	tcd
 10972             00000004   reason_0	set	4
 10973                        	.block	2278
 10974                        ;	PIPCPORT debugport = NULL;
 10975                        ;	LPSTR message = NULL;
 10976                        ;
 10977                        ;	switch(reason)
 10978             00000000   debugport_1	set	0
 10979             00000004   message_1	set	4
 10980                        	.sym	debugport,0,138,1,32,61
 10981                        	.sym	message,4,142,1,32
 10982                        	.sym	reason,4,16,6,16
 10983 05:266D: 64 01        	stz	<L352+debugport_1
 10984 05:266F: 64 03        	stz	<L352+debugport_1+2
 10985 05:2671: 64 05        	stz	<L352+message_1
 10986 05:2673: 64 07        	stz	<L352+message_1+2
 10987                        	.line	2282
 10988 05:2675: A5 0C        	lda	<L351+reason_0
 10989 05:2677: 82 82 00     	brl	L10222
 10990                        ;	{
 10991                        	.line	2283
 10992                        ;	case FX_IDLEPROC_PROCESS:
 10993                        	.line	2284
 10994                        L10224:
 10995                        ;		//k_debug_strings("IdleCleanup reason:",
                    "FX_IDLEPROC_PROCESS");
 10996                        ;
 10997                        ;		debugport =  k_get_ipc_port(IPC_SYS_DEBU
                    G);
  Sat Jul 10 2021  1:15                                                Page 215


 10998                        	.line	2287
 10999 05:267A: F4 xx xx     	pea	#^L350
 11000 05:267D: F4 xx xx     	pea	#<L350
 11001 05:2680: 22 xx xx xx  	jsl	~~k_get_ipc_port
 11002 05:2684: 85 01        	sta	<L352+debugport_1
 11003 05:2686: 86 03        	stx	<L352+debugport_1+2
 11004                        ;		if(debugport)
 11005                        	.line	2288
 11006                        ;		{
 11007 05:2688: A5 01        	lda	<L352+debugport_1
 11008 05:268A: 05 03        	ora	<L352+debugport_1+2
 11009 05:268C: D0 03        	bne	L354
 11010 05:268E: 82 42 00     	brl	L10225
 11011                        L354:
 11012                        	.line	2289
 11013                        ;			message = k_read_ipc_port(debugp
                    ort);
 11014                        	.line	2290
 11015 05:2691: D4 03        	pei	<L352+debugport_1+2
 11016 05:2693: D4 01        	pei	<L352+debugport_1
 11017 05:2695: 22 xx xx xx  	jsl	~~k_read_ipc_port
 11018 05:2699: 85 05        	sta	<L352+message_1
 11019 05:269B: 86 07        	stx	<L352+message_1+2
 11020                        ;			while(message)
 11021                        	.line	2291
 11022                        L10226:
 11023 05:269D: A5 05        	lda	<L352+message_1
 11024 05:269F: 05 07        	ora	<L352+message_1+2
 11025 05:26A1: D0 03        	bne	L355
 11026 05:26A3: 82 2D 00     	brl	L10227
 11027                        L355:
 11028                        ;			{
 11029                        	.line	2292
 11030                        ;				k_debug_strings("DEBUGPO
                    RT:", ((PFXSTRING)message)->buffer );
 11031                        	.line	2293
 11032 05:26A6: A0 06 00     	ldy	#$6
 11033 05:26A9: B7 05        	lda	[<L352+message_1],Y
 11034 05:26AB: 48           	pha
 11035 05:26AC: A0 04 00     	ldy	#$4
 11036 05:26AF: B7 05        	lda	[<L352+message_1],Y
 11037 05:26B1: 48           	pha
 11038 05:26B2: F4 xx xx     	pea	#^L350+7
 11039 05:26B5: F4 xx xx     	pea	#<L350+7
 11040 05:26B8: 22 xx xx xx  	jsl	~~k_debug_strings
 11041                        ;				k_fxstring_free(((PFXSTR
                    ING)message));
 11042                        	.line	2294
 11043 05:26BC: D4 07        	pei	<L352+message_1+2
 11044 05:26BE: D4 05        	pei	<L352+message_1
 11045 05:26C0: 22 xx xx xx  	jsl	~~k_fxstring_free
 11046                        ;				message = k_read_ipc_por
                    t(debugport);
 11047                        	.line	2295
 11048 05:26C4: D4 03        	pei	<L352+debugport_1+2
 11049 05:26C6: D4 01        	pei	<L352+debugport_1
 11050 05:26C8: 22 xx xx xx  	jsl	~~k_read_ipc_port
 11051 05:26CC: 85 05        	sta	<L352+message_1
  Sat Jul 10 2021  1:15                                                Page 216


 11052 05:26CE: 86 07        	stx	<L352+message_1+2
 11053                        ;			}
 11054                        	.line	2296
 11055 05:26D0: 82 CA FF     	brl	L10226
 11056                        L10227:
 11057                        ;		}
 11058                        	.line	2297
 11059                        ;
 11060                        ;
 11061                        ;		break;
 11062                        L10225:
 11063                        	.line	2300
 11064 05:26D3: 82 3A 00     	brl	L10223
 11065                        ;	case FX_IDLEPROC_REG:
 11066                        	.line	2301
 11067                        L10228:
 11068                        ;		k_debug_strings("IdleCleanup reason:","F
                    X_IDLEPROC_REG");
 11069                        	.line	2302
 11070 05:26D6: F4 xx xx     	pea	#^L350+38
 11071 05:26D9: F4 xx xx     	pea	#<L350+38
 11072 05:26DC: F4 xx xx     	pea	#^L350+18
 11073 05:26DF: F4 xx xx     	pea	#<L350+18
 11074 05:26E2: 22 xx xx xx  	jsl	~~k_debug_strings
 11075                        ;		break;
 11076                        	.line	2303
 11077 05:26E6: 82 27 00     	brl	L10223
 11078                        ;	case FX_IDLEPROC_UNREG:
 11079                        	.line	2304
 11080                        L10229:
 11081                        ;		k_debug_strings("IdleCleanup reason:","F
                    X_IDLEPROC_UNREG");
 11082                        	.line	2305
 11083 05:26E9: F4 xx xx     	pea	#^L350+74
 11084 05:26EC: F4 xx xx     	pea	#<L350+74
 11085 05:26EF: F4 xx xx     	pea	#^L350+54
 11086 05:26F2: F4 xx xx     	pea	#<L350+54
 11087 05:26F5: 22 xx xx xx  	jsl	~~k_debug_strings
 11088                        ;		break;
 11089                        	.line	2306
 11090 05:26F9: 82 14 00     	brl	L10223
 11091                        ;	}
 11092                        	.line	2307
 11093                        L10222:
 11094                        	xref	~~~swt
 11095 05:26FC: 22 xx xx xx  	jsl	~~~swt
 11096 05:2700: 03 00        	dw	3
 11097 05:2702: 01 00        	dw	1
 11098 05:2704: D5 26        	dw	L10228-1
 11099 05:2706: 02 00        	dw	2
 11100 05:2708: E8 26        	dw	L10229-1
 11101 05:270A: 04 00        	dw	4
 11102 05:270C: 79 26        	dw	L10224-1
 11103 05:270E: 0F 27        	dw	L10223-1
 11104                        L10223:
 11105                        ;}
 11106                        	.line	2308
 11107                        L356:
  Sat Jul 10 2021  1:15                                                Page 217


 11108 05:2710: A5 0A        	lda	<L351+2
 11109 05:2712: 85 0C        	sta	<L351+2+2
 11110 05:2714: A5 09        	lda	<L351+1
 11111 05:2716: 85 0B        	sta	<L351+1+2
 11112 05:2718: 2B           	pld
 11113 05:2719: 3B           	tsc
 11114 05:271A: 18           	clc
 11115 05:271B: 69 0A 00     	adc	#L351+2
 11116 05:271E: 1B           	tcs
 11117 05:271F: 6B           	rtl
 11118                        	.endblock	2308
 11119             00000008   L351	equ	8
 11120             00000001   L352	equ	1
 11121 05:2720:              	ends
 11122                        	efunc
 11123                        	.endfunc	2308,1,8
 11124                        	.line	2308
 11125                        	data
 11126                        L350:
 11127 00:0870: 40 64 65 62  	db	$40,$64,$65,$62,$75,$67,$00,$44,$45,$42,
                    $55,$47,$50,$4F,$52
       00:0874: 75 67 00 44 
       00:0878: 45 42 55 47 
       00:087C: 50 4F 52 
 11128 00:087F: 54 3A 00 49  	db	$54,$3A,$00,$49,$64,$6C,$65,$43,$6C,$65,
                    $61,$6E,$75,$70,$20
       00:0883: 64 6C 65 43 
       00:0887: 6C 65 61 6E 
       00:088B: 75 70 20 
 11129 00:088E: 72 65 61 73  	db	$72,$65,$61,$73,$6F,$6E,$3A,$00,$46,$58,
                    $5F,$49,$44,$4C,$45
       00:0892: 6F 6E 3A 00 
       00:0896: 46 58 5F 49 
       00:089A: 44 4C 45 
 11130 00:089D: 50 52 4F 43  	db	$50,$52,$4F,$43,$5F,$52,$45,$47,$00,$49,
                    $64,$6C,$65,$43,$6C
       00:08A1: 5F 52 45 47 
       00:08A5: 00 49 64 6C 
       00:08A9: 65 43 6C 
 11131 00:08AC: 65 61 6E 75  	db	$65,$61,$6E,$75,$70,$20,$72,$65,$61,$73,
                    $6F,$6E,$3A,$00,$46
       00:08B0: 70 20 72 65 
       00:08B4: 61 73 6F 6E 
       00:08B8: 3A 00 46 
 11132 00:08BB: 58 5F 49 44  	db	$58,$5F,$49,$44,$4C,$45,$50,$52,$4F,$43,
                    $5F,$55,$4E,$52,$45
       00:08BF: 4C 45 50 52 
       00:08C3: 4F 43 5F 55 
       00:08C7: 4E 52 45 
 11133 00:08CA: 47 00        	db	$47,$00
 11134 00:08CC:              	ends
 11135                        ;
 11136                        ;static void _kbd_wait(BYTE a_type) //unsigned cha
                    r
 11137                        ;{
 11138                        	.line	2310
 11139                        	.line	2311
 11140                        	EVTMAN
  Sat Jul 10 2021  1:15                                                Page 218


 11141                        	func
 11142                        	.function	2311
 11143                        ~~_kbd_wait:
 11144                        	longa	on
 11145                        	longi	on
 11146 05:2720: 3B           	tsc
 11147 05:2721: 38           	sec
 11148 05:2722: E9 08 00     	sbc	#L358
 11149 05:2725: 1B           	tcs
 11150 05:2726: 0B           	phd
 11151 05:2727: 5B           	tcd
 11152             00000004   a_type_0	set	4
 11153                        	.block	2311
 11154                        ;  DWORD _time_out=1000; //unsigned int
 11155                        ;  if(a_type==0)
 11156             00000000   _time_out_1	set	0
 11157                        	.sym	_time_out,0,18,1,32
 11158                        	.sym	a_type,4,14,6,8
 11159 05:2728: A9 E8 03     	lda	#$3e8
 11160 05:272B: 85 05        	sta	<L359+_time_out_1
 11161 05:272D: A9 00 00     	lda	#$0
 11162 05:2730: 85 07        	sta	<L359+_time_out_1+2
 11163                        	.line	2313
 11164                        ;  {
 11165 05:2732: A5 0C        	lda	<L358+a_type_0
 11166 05:2734: 29 FF 00     	and	#$ff
 11167 05:2737: F0 03        	beq	L361
 11168 05:2739: 82 42 00     	brl	L10230
 11169                        L361:
 11170                        	.line	2314
 11171                        ;    while(_time_out--) //Data
 11172                        	.line	2315
 11173                        L10231:
 11174 05:273C: A5 05        	lda	<L359+_time_out_1
 11175 05:273E: 85 01        	sta	<R0
 11176 05:2740: A5 07        	lda	<L359+_time_out_1+2
 11177 05:2742: 85 03        	sta	<R0+2
 11178 05:2744: A5 05        	lda	<L359+_time_out_1
 11179 05:2746: D0 02        	bne	L362
 11180 05:2748: C6 07        	dec	<L359+_time_out_1+2
 11181                        L362:
 11182 05:274A: C6 05        	dec	<L359+_time_out_1
 11183 05:274C: A5 01        	lda	<R0
 11184 05:274E: 05 03        	ora	<R0+2
 11185 05:2750: D0 03        	bne	L363
 11186 05:2752: 82 26 00     	brl	L10232
 11187                        L363:
 11188                        ;    {
 11189                        	.line	2316
 11190                        ;      if((inportb64(0x64) & 1)==1)
 11191                        	.line	2317
 11192                        ;      {
 11193 05:2755: AF 07 18 AF  	lda	>11474951
 11194 05:2759: 29 01 00     	and	#<$1
 11195 05:275C: 85 01        	sta	<R0
 11196 05:275E: A5 01        	lda	<R0
 11197 05:2760: C9 01 00     	cmp	#<$1
 11198 05:2763: F0 03        	beq	L364
  Sat Jul 10 2021  1:15                                                Page 219


 11199 05:2765: 82 10 00     	brl	L10233
 11200                        L364:
 11201                        	.line	2318
 11202                        ;        return;
 11203                        	.line	2319
 11204                        L365:
 11205 05:2768: A5 0A        	lda	<L358+2
 11206 05:276A: 85 0C        	sta	<L358+2+2
 11207 05:276C: A5 09        	lda	<L358+1
 11208 05:276E: 85 0B        	sta	<L358+1+2
 11209 05:2770: 2B           	pld
 11210 05:2771: 3B           	tsc
 11211 05:2772: 18           	clc
 11212 05:2773: 69 0A 00     	adc	#L358+2
 11213 05:2776: 1B           	tcs
 11214 05:2777: 6B           	rtl
 11215                        ;      }
 11216                        	.line	2320
 11217                        ;    }
 11218                        L10233:
 11219                        	.line	2321
 11220 05:2778: 82 C1 FF     	brl	L10231
 11221                        L10232:
 11222                        ;    return;
 11223                        	.line	2322
 11224 05:277B: 82 EA FF     	brl	L365
 11225                        ;  }
 11226                        	.line	2323
 11227                        ;  else
 11228                        L10230:
 11229                        ;  {
 11230                        	.line	2325
 11231                        ;    while(_time_out--) //Signal
 11232                        	.line	2326
 11233                        L10234:
 11234 05:277E: A5 05        	lda	<L359+_time_out_1
 11235 05:2780: 85 01        	sta	<R0
 11236 05:2782: A5 07        	lda	<L359+_time_out_1+2
 11237 05:2784: 85 03        	sta	<R0+2
 11238 05:2786: A5 05        	lda	<L359+_time_out_1
 11239 05:2788: D0 02        	bne	L366
 11240 05:278A: C6 07        	dec	<L359+_time_out_1+2
 11241                        L366:
 11242 05:278C: C6 05        	dec	<L359+_time_out_1
 11243 05:278E: A5 01        	lda	<R0
 11244 05:2790: 05 03        	ora	<R0+2
 11245 05:2792: D0 03        	bne	L367
 11246 05:2794: 82 15 00     	brl	L10235
 11247                        L367:
 11248                        ;    {
 11249                        	.line	2327
 11250                        ;      if((inportb64(0x64) & 2)==0)
 11251                        	.line	2328
 11252                        ;      {
 11253 05:2797: E2 20        	sep	#$20
 11254                        	longa	off
 11255 05:2799: AF 07 18 AF  	lda	>11474951
 11256 05:279D: 29 02        	and	#<$2
  Sat Jul 10 2021  1:15                                                Page 220


 11257 05:279F: C2 20        	rep	#$20
 11258                        	longa	on
 11259 05:27A1: F0 03        	beq	L368
 11260 05:27A3: 82 03 00     	brl	L10236
 11261                        L368:
 11262                        	.line	2329
 11263                        ;        return;
 11264                        	.line	2330
 11265 05:27A6: 82 BF FF     	brl	L365
 11266                        ;      }
 11267                        	.line	2331
 11268                        ;    }
 11269                        L10236:
 11270                        	.line	2332
 11271 05:27A9: 82 D2 FF     	brl	L10234
 11272                        L10235:
 11273                        ;    return;
 11274                        	.line	2333
 11275 05:27AC: 82 B9 FF     	brl	L365
 11276                        ;  }
 11277                        	.line	2334
 11278                        ;}
 11279                        	.line	2335
 11280                        	.endblock	2335
 11281             00000008   L358	equ	8
 11282             00000005   L359	equ	5
 11283 05:27AF:              	ends
 11284                        	efunc
 11285                        	.endfunc	2335,5,8
 11286                        	.line	2335
 11287                        ;
 11288                        ;
 11289                        ;BOOL _kbd_ack(void)
 11290                        ;{
 11291                        	.line	2338
 11292                        	.line	2339
 11293                        	EVTMAN
 11294                        	xdef	~~_kbd_ack
 11295                        	func
 11296                        	.function	2339
 11297                        ~~_kbd_ack:
 11298                        	longa	on
 11299                        	longi	on
 11300 05:27AF: 3B           	tsc
 11301 05:27B0: 38           	sec
 11302 05:27B1: E9 01 00     	sbc	#L369
 11303 05:27B4: 1B           	tcs
 11304 05:27B5: 0B           	phd
 11305 05:27B6: 5B           	tcd
 11306                        	.block	2339
 11307                        ;	BYTE retCode = 0;
 11308                        ;
 11309                        ;	while(!(KBD_OUT_BUF[0]==0xfa));
 11310             00000000   retCode_1	set	0
 11311                        	.sym	retCode,0,14,1,8
 11312 05:27B7: E2 20        	sep	#$20
 11313                        	longa	off
 11314 05:27B9: 64 01        	stz	<L370+retCode_1
  Sat Jul 10 2021  1:15                                                Page 221


 11315 05:27BB: C2 20        	rep	#$20
 11316                        	longa	on
 11317                        	.line	2342
 11318                        L10237:
 11319 05:27BD: E2 20        	sep	#$20
 11320                        	longa	off
 11321 05:27BF: AF 03 18 AF  	lda	>11474947
 11322 05:27C3: C9 FA        	cmp	#<$fa
 11323 05:27C5: C2 20        	rep	#$20
 11324                        	longa	on
 11325 05:27C7: D0 03        	bne	L372
 11326 05:27C9: 82 03 00     	brl	L10238
 11327                        L372:
 11328                        	.line	2342
 11329 05:27CC: 82 EE FF     	brl	L10237
 11330                        L10238:
 11331                        ;
 11332                        ;	retCode = KBD_OUT_BUF[0];
 11333                        	.line	2344
 11334 05:27CF: E2 20        	sep	#$20
 11335                        	longa	off
 11336 05:27D1: AF 03 18 AF  	lda	>11474947
 11337 05:27D5: 85 01        	sta	<L370+retCode_1
 11338 05:27D7: C2 20        	rep	#$20
 11339                        	longa	on
 11340                        ;	while(retCode!=0xFA)
 11341                        	.line	2345
 11342                        L10239:
 11343 05:27D9: E2 20        	sep	#$20
 11344                        	longa	off
 11345 05:27DB: A5 01        	lda	<L370+retCode_1
 11346 05:27DD: C9 FA        	cmp	#<$fa
 11347 05:27DF: C2 20        	rep	#$20
 11348                        	longa	on
 11349 05:27E1: D0 03        	bne	L373
 11350 05:27E3: 82 27 00     	brl	L10240
 11351                        L373:
 11352                        ;	{
 11353                        	.line	2346
 11354                        ;		if(retCode == 0xFE)
 11355                        	.line	2347
 11356                        ;		{
 11357 05:27E6: E2 20        	sep	#$20
 11358                        	longa	off
 11359 05:27E8: A5 01        	lda	<L370+retCode_1
 11360 05:27EA: C9 FE        	cmp	#<$fe
 11361 05:27EC: C2 20        	rep	#$20
 11362                        	longa	on
 11363 05:27EE: F0 03        	beq	L374
 11364 05:27F0: 82 0D 00     	brl	L10241
 11365                        L374:
 11366                        	.line	2348
 11367                        ;			return FALSE;
 11368                        	.line	2349
 11369 05:27F3: A9 00 00     	lda	#$0
 11370                        L375:
 11371 05:27F6: A8           	tay
 11372 05:27F7: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 222


 11373 05:27F8: 3B           	tsc
 11374 05:27F9: 18           	clc
 11375 05:27FA: 69 01 00     	adc	#L369
 11376 05:27FD: 1B           	tcs
 11377 05:27FE: 98           	tya
 11378 05:27FF: 6B           	rtl
 11379                        ;		}
 11380                        	.line	2350
 11381                        ;		retCode = KBD_OUT_BUF[0];
 11382                        L10241:
 11383                        	.line	2351
 11384 05:2800: E2 20        	sep	#$20
 11385                        	longa	off
 11386 05:2802: AF 03 18 AF  	lda	>11474947
 11387 05:2806: 85 01        	sta	<L370+retCode_1
 11388 05:2808: C2 20        	rep	#$20
 11389                        	longa	on
 11390                        ;	}
 11391                        	.line	2352
 11392 05:280A: 82 CC FF     	brl	L10239
 11393                        L10240:
 11394                        ;
 11395                        ;	return TRUE;
 11396                        	.line	2354
 11397 05:280D: A9 01 00     	lda	#$1
 11398 05:2810: 82 E3 FF     	brl	L375
 11399                        ;}
 11400                        	.line	2355
 11401                        	.endblock	2355
 11402             00000001   L369	equ	1
 11403             00000001   L370	equ	1
 11404 05:2813:              	ends
 11405                        	efunc
 11406                        	.endfunc	2355,1,1
 11407                        	.line	2355
 11408                        ;
 11409                        ;void kbd_cmd_handling(BYTE command,UCHAR value)
 11410                        ;{
 11411                        	.line	2357
 11412                        	.line	2358
 11413                        	EVTMAN
 11414                        	xdef	~~kbd_cmd_handling
 11415                        	func
 11416                        	.function	2358
 11417                        ~~kbd_cmd_handling:
 11418                        	longa	on
 11419                        	longi	on
 11420 05:2813: 3B           	tsc
 11421 05:2814: 38           	sec
 11422 05:2815: E9 00 00     	sbc	#L376
 11423 05:2818: 1B           	tcs
 11424 05:2819: 0B           	phd
 11425 05:281A: 5B           	tcd
 11426             00000004   command_0	set	4
 11427             00000006   value_0	set	6
 11428                        	.block	2358
 11429                        ;	do
 11430                        	.sym	command,4,14,6,8
  Sat Jul 10 2021  1:15                                                Page 223


 11431                        	.sym	value,6,14,6,8
 11432                        	.line	2359
 11433                        L10244:
 11434                        ;	{
 11435                        	.line	2360
 11436                        ;		_kbd_wait(0);
 11437                        	.line	2361
 11438 05:281B: F4 00 00     	pea	#<$0
 11439 05:281E: 22 20 27 05  	jsl	~~_kbd_wait
 11440                        ;		KBD_OUT_BUF[0] = command;
 11441                        	.line	2362
 11442 05:2822: E2 20        	sep	#$20
 11443                        	longa	off
 11444 05:2824: A5 04        	lda	<L376+command_0
 11445 05:2826: 8F 03 18 AF  	sta	>11474947
 11446 05:282A: C2 20        	rep	#$20
 11447                        	longa	on
 11448                        ;	}while(!_kbd_ack());
 11449                        	.line	2363
 11450                        L10242:
 11451 05:282C: 22 AF 27 05  	jsl	~~_kbd_ack
 11452 05:2830: 29 FF 00     	and	#$ff
 11453 05:2833: D0 03        	bne	L379
 11454 05:2835: 82 E3 FF     	brl	L10244
 11455                        L379:
 11456                        L10243:
 11457                        ;
 11458                        ;	if(value!=0xFF)
 11459                        	.line	2365
 11460                        ;	{
 11461 05:2838: E2 20        	sep	#$20
 11462                        	longa	off
 11463 05:283A: A5 06        	lda	<L376+value_0
 11464 05:283C: C9 FF        	cmp	#<$ff
 11465 05:283E: C2 20        	rep	#$20
 11466                        	longa	on
 11467 05:2840: D0 03        	bne	L380
 11468 05:2842: 82 1C 00     	brl	L10245
 11469                        L380:
 11470                        	.line	2366
 11471                        ;		KBD_OUT_BUF[0] = value;
 11472                        	.line	2367
 11473 05:2845: E2 20        	sep	#$20
 11474                        	longa	off
 11475 05:2847: A5 06        	lda	<L376+value_0
 11476 05:2849: 8F 03 18 AF  	sta	>11474947
 11477 05:284D: C2 20        	rep	#$20
 11478                        	longa	on
 11479                        ;		while(KBD_OUT_BUF[0]!=0xFA);
 11480                        	.line	2368
 11481                        L10246:
 11482 05:284F: E2 20        	sep	#$20
 11483                        	longa	off
 11484 05:2851: AF 03 18 AF  	lda	>11474947
 11485 05:2855: C9 FA        	cmp	#<$fa
 11486 05:2857: C2 20        	rep	#$20
 11487                        	longa	on
 11488 05:2859: D0 03        	bne	L381
  Sat Jul 10 2021  1:15                                                Page 224


 11489 05:285B: 82 03 00     	brl	L10247
 11490                        L381:
 11491                        	.line	2368
 11492 05:285E: 82 EE FF     	brl	L10246
 11493                        L10247:
 11494                        ;	}
 11495                        	.line	2369
 11496                        ;}
 11497                        L10245:
 11498                        	.line	2370
 11499                        L382:
 11500 05:2861: A5 02        	lda	<L376+2
 11501 05:2863: 85 06        	sta	<L376+2+4
 11502 05:2865: A5 01        	lda	<L376+1
 11503 05:2867: 85 05        	sta	<L376+1+4
 11504 05:2869: 2B           	pld
 11505 05:286A: 3B           	tsc
 11506 05:286B: 18           	clc
 11507 05:286C: 69 04 00     	adc	#L376+4
 11508 05:286F: 1B           	tcs
 11509 05:2870: 6B           	rtl
 11510                        	.endblock	2370
 11511             00000000   L376	equ	0
 11512             00000001   L377	equ	1
 11513 05:2871:              	ends
 11514                        	efunc
 11515                        	.endfunc	2370,1,0
 11516                        	.line	2370
 11517                        ;
 11518                        ;VOID _k_async_keyboard(UINT reason)
 11519                        ;{
 11520                        	.line	2372
 11521                        	.line	2373
 11522                        	EVTMAN
 11523                        	xdef	~~_k_async_keyboard
 11524                        	func
 11525                        	.function	2373
 11526                        ~~_k_async_keyboard:
 11527                        	longa	on
 11528                        	longi	on
 11529 05:2871: 3B           	tsc
 11530 05:2872: 38           	sec
 11531 05:2873: E9 08 00     	sbc	#L383
 11532 05:2876: 1B           	tcs
 11533 05:2877: 0B           	phd
 11534 05:2878: 5B           	tcd
 11535             00000004   reason_0	set	4
 11536                        	.block	2373
 11537                        ;	PIPCPORT kbport = NULL;
 11538                        ;	PMARSHALDATA pcmd  = NULL;
 11539                        ;
 11540                        ;	switch(reason)
 11541             00000000   kbport_1	set	0
 11542             00000004   pcmd_1	set	4
 11543                        	.sym	kbport,0,138,1,32,61
 11544                        	.sym	pcmd,4,139,1,32,70
 11545                        	.sym	reason,4,16,6,16
 11546 05:2879: 64 01        	stz	<L384+kbport_1
  Sat Jul 10 2021  1:15                                                Page 225


 11547 05:287B: 64 03        	stz	<L384+kbport_1+2
 11548 05:287D: 64 05        	stz	<L384+pcmd_1
 11549 05:287F: 64 07        	stz	<L384+pcmd_1+2
 11550                        	.line	2377
 11551 05:2881: A5 0C        	lda	<L383+reason_0
 11552 05:2883: 82 83 00     	brl	L10248
 11553                        ;	{
 11554                        	.line	2378
 11555                        ;	case FX_IDLEPROC_PROCESS:
 11556                        	.line	2379
 11557                        L10250:
 11558                        ;		//k_debug_string("_k_async_keyboard\r\n"
                    );
 11559                        ;
 11560                        ;		kbport =  k_get_ipc_port("@keyboard");
 11561                        	.line	2382
 11562 05:2886: F4 xx xx     	pea	#^L357
 11563 05:2889: F4 xx xx     	pea	#<L357
 11564 05:288C: 22 xx xx xx  	jsl	~~k_get_ipc_port
 11565 05:2890: 85 01        	sta	<L384+kbport_1
 11566 05:2892: 86 03        	stx	<L384+kbport_1+2
 11567                        ;		if(kbport)
 11568                        	.line	2383
 11569                        ;		{
 11570 05:2894: A5 01        	lda	<L384+kbport_1
 11571 05:2896: 05 03        	ora	<L384+kbport_1+2
 11572 05:2898: D0 03        	bne	L386
 11573 05:289A: 82 43 00     	brl	L10251
 11574                        L386:
 11575                        	.line	2384
 11576                        ;			pcmd = (PMARSHALDATA)k_read_ipc_
                    port(kbport);
 11577                        	.line	2385
 11578 05:289D: D4 03        	pei	<L384+kbport_1+2
 11579 05:289F: D4 01        	pei	<L384+kbport_1
 11580 05:28A1: 22 xx xx xx  	jsl	~~k_read_ipc_port
 11581 05:28A5: 85 05        	sta	<L384+pcmd_1
 11582 05:28A7: 86 07        	stx	<L384+pcmd_1+2
 11583                        ;			while(pcmd)
 11584                        	.line	2386
 11585                        L10252:
 11586 05:28A9: A5 05        	lda	<L384+pcmd_1
 11587 05:28AB: 05 07        	ora	<L384+pcmd_1+2
 11588 05:28AD: D0 03        	bne	L387
 11589 05:28AF: 82 2E 00     	brl	L10253
 11590                        L387:
 11591                        ;			{
 11592                        	.line	2387
 11593                        ;				if(pcmd->verbValue[0])
 11594                        	.line	2388
 11595                        ;				{
 11596 05:28B2: A7 05        	lda	[<L384+pcmd_1]
 11597 05:28B4: 29 FF 00     	and	#$ff
 11598 05:28B7: D0 03        	bne	L388
 11599 05:28B9: 82 15 00     	brl	L10254
 11600                        L388:
 11601                        	.line	2389
 11602                        ;					kbd_cmd_handling
  Sat Jul 10 2021  1:15                                                Page 226


                    (pcmd->verbValue[0],pcmd->verbValue[1]);
 11603                        	.line	2390
 11604 05:28BC: A0 01 00     	ldy	#$1
 11605 05:28BF: B7 05        	lda	[<L384+pcmd_1],Y
 11606 05:28C1: 48           	pha
 11607 05:28C2: A7 05        	lda	[<L384+pcmd_1]
 11608 05:28C4: 48           	pha
 11609 05:28C5: 22 13 28 05  	jsl	~~kbd_cmd_handling
 11610                        ;					k_mem_deallocate
                    _heap(pcmd);
 11611                        	.line	2391
 11612 05:28C9: D4 07        	pei	<L384+pcmd_1+2
 11613 05:28CB: D4 05        	pei	<L384+pcmd_1
 11614 05:28CD: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
 11615                        ;				}
 11616                        	.line	2392
 11617                        ;				pcmd = (PMARSHALDATA)k_r
                    ead_ipc_port(kbport);
 11618                        L10254:
 11619                        	.line	2393
 11620 05:28D1: D4 03        	pei	<L384+kbport_1+2
 11621 05:28D3: D4 01        	pei	<L384+kbport_1
 11622 05:28D5: 22 xx xx xx  	jsl	~~k_read_ipc_port
 11623 05:28D9: 85 05        	sta	<L384+pcmd_1
 11624 05:28DB: 86 07        	stx	<L384+pcmd_1+2
 11625                        ;			}
 11626                        	.line	2394
 11627 05:28DD: 82 C9 FF     	brl	L10252
 11628                        L10253:
 11629                        ;		}
 11630                        	.line	2395
 11631                        ;
 11632                        ;
 11633                        ;		break;
 11634                        L10251:
 11635                        	.line	2398
 11636 05:28E0: 82 3A 00     	brl	L10249
 11637                        ;	case FX_IDLEPROC_REG:
 11638                        	.line	2399
 11639                        L10255:
 11640                        ;		k_debug_strings("_k_async_keyboard reaso
                    n:","FX_IDLEPROC_REG");
 11641                        	.line	2400
 11642 05:28E3: F4 xx xx     	pea	#^L357+36
 11643 05:28E6: F4 xx xx     	pea	#<L357+36
 11644 05:28E9: F4 xx xx     	pea	#^L357+10
 11645 05:28EC: F4 xx xx     	pea	#<L357+10
 11646 05:28EF: 22 xx xx xx  	jsl	~~k_debug_strings
 11647                        ;		break;
 11648                        	.line	2401
 11649 05:28F3: 82 27 00     	brl	L10249
 11650                        ;	case FX_IDLEPROC_UNREG:
 11651                        	.line	2402
 11652                        L10256:
 11653                        ;		k_debug_strings("_k_async_keyboard reaso
                    n:","FX_IDLEPROC_UNREG");
 11654                        	.line	2403
 11655 05:28F6: F4 xx xx     	pea	#^L357+78
  Sat Jul 10 2021  1:15                                                Page 227


 11656 05:28F9: F4 xx xx     	pea	#<L357+78
 11657 05:28FC: F4 xx xx     	pea	#^L357+52
 11658 05:28FF: F4 xx xx     	pea	#<L357+52
 11659 05:2902: 22 xx xx xx  	jsl	~~k_debug_strings
 11660                        ;		break;
 11661                        	.line	2404
 11662 05:2906: 82 14 00     	brl	L10249
 11663                        ;	}
 11664                        	.line	2405
 11665                        L10248:
 11666                        	xref	~~~swt
 11667 05:2909: 22 xx xx xx  	jsl	~~~swt
 11668 05:290D: 03 00        	dw	3
 11669 05:290F: 01 00        	dw	1
 11670 05:2911: E2 28        	dw	L10255-1
 11671 05:2913: 02 00        	dw	2
 11672 05:2915: F5 28        	dw	L10256-1
 11673 05:2917: 04 00        	dw	4
 11674 05:2919: 85 28        	dw	L10250-1
 11675 05:291B: 1C 29        	dw	L10249-1
 11676                        L10249:
 11677                        ;}
 11678                        	.line	2406
 11679                        L389:
 11680 05:291D: A5 0A        	lda	<L383+2
 11681 05:291F: 85 0C        	sta	<L383+2+2
 11682 05:2921: A5 09        	lda	<L383+1
 11683 05:2923: 85 0B        	sta	<L383+1+2
 11684 05:2925: 2B           	pld
 11685 05:2926: 3B           	tsc
 11686 05:2927: 18           	clc
 11687 05:2928: 69 0A 00     	adc	#L383+2
 11688 05:292B: 1B           	tcs
 11689 05:292C: 6B           	rtl
 11690                        	.endblock	2406
 11691             00000008   L383	equ	8
 11692             00000001   L384	equ	1
 11693 05:292D:              	ends
 11694                        	efunc
 11695                        	.endfunc	2406,1,8
 11696                        	.line	2406
 11697                        	data
 11698                        L357:
 11699 00:08CC: 40 6B 65 79  	db	$40,$6B,$65,$79,$62,$6F,$61,$72,$64,$00,
                    $5F,$6B,$5F,$61,$73
       00:08D0: 62 6F 61 72 
       00:08D4: 64 00 5F 6B 
       00:08D8: 5F 61 73 
 11700 00:08DB: 79 6E 63 5F  	db	$79,$6E,$63,$5F,$6B,$65,$79,$62,$6F,$61,
                    $72,$64,$20,$72,$65
       00:08DF: 6B 65 79 62 
       00:08E3: 6F 61 72 64 
       00:08E7: 20 72 65 
 11701 00:08EA: 61 73 6F 6E  	db	$61,$73,$6F,$6E,$3A,$00,$46,$58,$5F,$49,
                    $44,$4C,$45,$50,$52
       00:08EE: 3A 00 46 58 
       00:08F2: 5F 49 44 4C 
       00:08F6: 45 50 52 
  Sat Jul 10 2021  1:15                                                Page 228


 11702 00:08F9: 4F 43 5F 52  	db	$4F,$43,$5F,$52,$45,$47,$00,$5F,$6B,$5F,
                    $61,$73,$79,$6E,$63
       00:08FD: 45 47 00 5F 
       00:0901: 6B 5F 61 73 
       00:0905: 79 6E 63 
 11703 00:0908: 5F 6B 65 79  	db	$5F,$6B,$65,$79,$62,$6F,$61,$72,$64,$20,
                    $72,$65,$61,$73,$6F
       00:090C: 62 6F 61 72 
       00:0910: 64 20 72 65 
       00:0914: 61 73 6F 
 11704 00:0917: 6E 3A 00 46  	db	$6E,$3A,$00,$46,$58,$5F,$49,$44,$4C,$45,
                    $50,$52,$4F,$43,$5F
       00:091B: 58 5F 49 44 
       00:091F: 4C 45 50 52 
       00:0923: 4F 43 5F 
 11705 00:0926: 55 4E 52 45  	db	$55,$4E,$52,$45,$47,$00
       00:092A: 47 00 
 11706 00:092C:              	ends
 11707                        ;
 11708                        ;
 11709                        ;
 11710                        ;
 11711                        ;static void k_mouse_wait(BYTE a_type) //unsigned 
                    char
 11712                        ;{
 11713                        	.line	2411
 11714                        	.line	2412
 11715                        	EVTMAN
 11716                        	func
 11717                        	.function	2412
 11718                        ~~k_mouse_wait:
 11719                        	longa	on
 11720                        	longi	on
 11721 05:292D: 3B           	tsc
 11722 05:292E: 38           	sec
 11723 05:292F: E9 08 00     	sbc	#L391
 11724 05:2932: 1B           	tcs
 11725 05:2933: 0B           	phd
 11726 05:2934: 5B           	tcd
 11727             00000004   a_type_0	set	4
 11728                        	.block	2412
 11729                        ;  DWORD _time_out=1000; //unsigned int
 11730                        ;  if(a_type==0)
 11731             00000000   _time_out_1	set	0
 11732                        	.sym	_time_out,0,18,1,32
 11733                        	.sym	a_type,4,14,6,8
 11734 05:2935: A9 E8 03     	lda	#$3e8
 11735 05:2938: 85 05        	sta	<L392+_time_out_1
 11736 05:293A: A9 00 00     	lda	#$0
 11737 05:293D: 85 07        	sta	<L392+_time_out_1+2
 11738                        	.line	2414
 11739                        ;  {
 11740 05:293F: A5 0C        	lda	<L391+a_type_0
 11741 05:2941: 29 FF 00     	and	#$ff
 11742 05:2944: F0 03        	beq	L394
 11743 05:2946: 82 42 00     	brl	L10257
 11744                        L394:
 11745                        	.line	2415
  Sat Jul 10 2021  1:15                                                Page 229


 11746                        ;    while(_time_out--) //Data
 11747                        	.line	2416
 11748                        L10258:
 11749 05:2949: A5 05        	lda	<L392+_time_out_1
 11750 05:294B: 85 01        	sta	<R0
 11751 05:294D: A5 07        	lda	<L392+_time_out_1+2
 11752 05:294F: 85 03        	sta	<R0+2
 11753 05:2951: A5 05        	lda	<L392+_time_out_1
 11754 05:2953: D0 02        	bne	L395
 11755 05:2955: C6 07        	dec	<L392+_time_out_1+2
 11756                        L395:
 11757 05:2957: C6 05        	dec	<L392+_time_out_1
 11758 05:2959: A5 01        	lda	<R0
 11759 05:295B: 05 03        	ora	<R0+2
 11760 05:295D: D0 03        	bne	L396
 11761 05:295F: 82 26 00     	brl	L10259
 11762                        L396:
 11763                        ;    {
 11764                        	.line	2417
 11765                        ;      if((inportb64(0x64) & 1)==1)
 11766                        	.line	2418
 11767                        ;      {
 11768 05:2962: AF 07 18 AF  	lda	>11474951
 11769 05:2966: 29 01 00     	and	#<$1
 11770 05:2969: 85 01        	sta	<R0
 11771 05:296B: A5 01        	lda	<R0
 11772 05:296D: C9 01 00     	cmp	#<$1
 11773 05:2970: F0 03        	beq	L397
 11774 05:2972: 82 10 00     	brl	L10260
 11775                        L397:
 11776                        	.line	2419
 11777                        ;        return;
 11778                        	.line	2420
 11779                        L398:
 11780 05:2975: A5 0A        	lda	<L391+2
 11781 05:2977: 85 0C        	sta	<L391+2+2
 11782 05:2979: A5 09        	lda	<L391+1
 11783 05:297B: 85 0B        	sta	<L391+1+2
 11784 05:297D: 2B           	pld
 11785 05:297E: 3B           	tsc
 11786 05:297F: 18           	clc
 11787 05:2980: 69 0A 00     	adc	#L391+2
 11788 05:2983: 1B           	tcs
 11789 05:2984: 6B           	rtl
 11790                        ;      }
 11791                        	.line	2421
 11792                        ;    }
 11793                        L10260:
 11794                        	.line	2422
 11795 05:2985: 82 C1 FF     	brl	L10258
 11796                        L10259:
 11797                        ;    return;
 11798                        	.line	2423
 11799 05:2988: 82 EA FF     	brl	L398
 11800                        ;  }
 11801                        	.line	2424
 11802                        ;  else
 11803                        L10257:
  Sat Jul 10 2021  1:15                                                Page 230


 11804                        ;  {
 11805                        	.line	2426
 11806                        ;    while(_time_out--) //Signal
 11807                        	.line	2427
 11808                        L10261:
 11809 05:298B: A5 05        	lda	<L392+_time_out_1
 11810 05:298D: 85 01        	sta	<R0
 11811 05:298F: A5 07        	lda	<L392+_time_out_1+2
 11812 05:2991: 85 03        	sta	<R0+2
 11813 05:2993: A5 05        	lda	<L392+_time_out_1
 11814 05:2995: D0 02        	bne	L399
 11815 05:2997: C6 07        	dec	<L392+_time_out_1+2
 11816                        L399:
 11817 05:2999: C6 05        	dec	<L392+_time_out_1
 11818 05:299B: A5 01        	lda	<R0
 11819 05:299D: 05 03        	ora	<R0+2
 11820 05:299F: D0 03        	bne	L400
 11821 05:29A1: 82 15 00     	brl	L10262
 11822                        L400:
 11823                        ;    {
 11824                        	.line	2428
 11825                        ;      if((inportb64(0x64) & 2)==0)
 11826                        	.line	2429
 11827                        ;      {
 11828 05:29A4: E2 20        	sep	#$20
 11829                        	longa	off
 11830 05:29A6: AF 07 18 AF  	lda	>11474951
 11831 05:29AA: 29 02        	and	#<$2
 11832 05:29AC: C2 20        	rep	#$20
 11833                        	longa	on
 11834 05:29AE: F0 03        	beq	L401
 11835 05:29B0: 82 03 00     	brl	L10263
 11836                        L401:
 11837                        	.line	2430
 11838                        ;        return;
 11839                        	.line	2431
 11840 05:29B3: 82 BF FF     	brl	L398
 11841                        ;      }
 11842                        	.line	2432
 11843                        ;    }
 11844                        L10263:
 11845                        	.line	2433
 11846 05:29B6: 82 D2 FF     	brl	L10261
 11847                        L10262:
 11848                        ;    return;
 11849                        	.line	2434
 11850 05:29B9: 82 B9 FF     	brl	L398
 11851                        ;  }
 11852                        	.line	2435
 11853                        ;}
 11854                        	.line	2436
 11855                        	.endblock	2436
 11856             00000008   L391	equ	8
 11857             00000005   L392	equ	5
 11858 05:29BC:              	ends
 11859                        	efunc
 11860                        	.endfunc	2436,5,8
 11861                        	.line	2436
  Sat Jul 10 2021  1:15                                                Page 231


 11862                        ;
 11863                        ;
 11864                        ;static void k_mouse_write(BYTE a_write) //unsigne
                    d char
 11865                        ;{
 11866                        	.line	2439
 11867                        	.line	2440
 11868                        	EVTMAN
 11869                        	func
 11870                        	.function	2440
 11871                        ~~k_mouse_write:
 11872                        	longa	on
 11873                        	longi	on
 11874 05:29BC: 3B           	tsc
 11875 05:29BD: 38           	sec
 11876 05:29BE: E9 00 00     	sbc	#L402
 11877 05:29C1: 1B           	tcs
 11878 05:29C2: 0B           	phd
 11879 05:29C3: 5B           	tcd
 11880             00000004   a_write_0	set	4
 11881                        	.block	2440
 11882                        ;  //Wait to be able to send a command
 11883                        ;  k_mouse_wait(0);
 11884                        	.sym	a_write,4,14,6,8
 11885                        	.line	2442
 11886 05:29C4: F4 00 00     	pea	#<$0
 11887 05:29C7: 22 2D 29 05  	jsl	~~k_mouse_wait
 11888                        ;  //Tell the mouse we are sending a command
 11889                        ;  outportb64(0xD4);
 11890                        	.line	2444
 11891 05:29CB: E2 20        	sep	#$20
 11892                        	longa	off
 11893 05:29CD: A9 D4        	lda	#$d4
 11894 05:29CF: 8F 07 18 AF  	sta	>11474951
 11895 05:29D3: C2 20        	rep	#$20
 11896                        	longa	on
 11897                        ;  //Wait for the final part
 11898                        ;  k_mouse_wait(0);
 11899                        	.line	2446
 11900 05:29D5: F4 00 00     	pea	#<$0
 11901 05:29D8: 22 2D 29 05  	jsl	~~k_mouse_wait
 11902                        ;  //Finally write
 11903                        ;  outportb60(a_write);
 11904                        	.line	2448
 11905 05:29DC: E2 20        	sep	#$20
 11906                        	longa	off
 11907 05:29DE: A5 04        	lda	<L402+a_write_0
 11908 05:29E0: 8F 03 18 AF  	sta	>11474947
 11909 05:29E4: C2 20        	rep	#$20
 11910                        	longa	on
 11911                        ;  //k_debug_hex("k_mouse_write:",a_write);
 11912                        ;}
 11913                        	.line	2450
 11914                        L405:
 11915 05:29E6: A5 02        	lda	<L402+2
 11916 05:29E8: 85 04        	sta	<L402+2+2
 11917 05:29EA: A5 01        	lda	<L402+1
 11918 05:29EC: 85 03        	sta	<L402+1+2
  Sat Jul 10 2021  1:15                                                Page 232


 11919 05:29EE: 2B           	pld
 11920 05:29EF: 3B           	tsc
 11921 05:29F0: 18           	clc
 11922 05:29F1: 69 02 00     	adc	#L402+2
 11923 05:29F4: 1B           	tcs
 11924 05:29F5: 6B           	rtl
 11925                        	.endblock	2450
 11926             00000000   L402	equ	0
 11927             00000001   L403	equ	1
 11928 05:29F6:              	ends
 11929                        	efunc
 11930                        	.endfunc	2450,1,0
 11931                        	.line	2450
 11932                        ;
 11933                        ;static BYTE k_mouse_read(VOID)
 11934                        ;{
 11935                        	.line	2452
 11936                        	.line	2453
 11937                        	EVTMAN
 11938                        	func
 11939                        	.function	2453
 11940                        ~~k_mouse_read:
 11941                        	longa	on
 11942                        	longi	on
 11943 05:29F6: 3B           	tsc
 11944 05:29F7: 38           	sec
 11945 05:29F8: E9 00 00     	sbc	#L406
 11946 05:29FB: 1B           	tcs
 11947 05:29FC: 0B           	phd
 11948 05:29FD: 5B           	tcd
 11949                        	.block	2453
 11950                        ;  //Get's response from mouse
 11951                        ;	k_mouse_wait(0);
 11952                        	.line	2455
 11953 05:29FE: F4 00 00     	pea	#<$0
 11954 05:2A01: 22 2D 29 05  	jsl	~~k_mouse_wait
 11955                        ;  return inportb60(0x60);
 11956                        	.line	2456
 11957 05:2A05: AF 03 18 AF  	lda	>11474947
 11958 05:2A09: 29 FF 00     	and	#$ff
 11959                        L409:
 11960 05:2A0C: A8           	tay
 11961 05:2A0D: 2B           	pld
 11962 05:2A0E: 3B           	tsc
 11963 05:2A0F: 18           	clc
 11964 05:2A10: 69 00 00     	adc	#L406
 11965 05:2A13: 1B           	tcs
 11966 05:2A14: 98           	tya
 11967 05:2A15: 6B           	rtl
 11968                        ;}
 11969                        	.line	2457
 11970                        	.endblock	2457
 11971             00000000   L406	equ	0
 11972             00000001   L407	equ	1
 11973 05:2A16:              	ends
 11974                        	efunc
 11975                        	.endfunc	2457,1,0
 11976                        	.line	2457
  Sat Jul 10 2021  1:15                                                Page 233


 11977                        ;
 11978                        ;VOID _k_async_debug(UINT reason)
 11979                        ;{
 11980                        	.line	2459
 11981                        	.line	2460
 11982                        	EVTMAN
 11983                        	xdef	~~_k_async_debug
 11984                        	func
 11985                        	.function	2460
 11986                        ~~_k_async_debug:
 11987                        	longa	on
 11988                        	longi	on
 11989 05:2A16: 3B           	tsc
 11990 05:2A17: 38           	sec
 11991 05:2A18: E9 04 00     	sbc	#L410
 11992 05:2A1B: 1B           	tcs
 11993 05:2A1C: 0B           	phd
 11994 05:2A1D: 5B           	tcd
 11995             00000004   reason_0	set	4
 11996                        	.block	2460
 11997                        ;	LPVOID message = NULL;
 11998                        ;
 11999                        ;	switch(reason)
 12000             00000000   message_1	set	0
 12001                        	.sym	message,0,129,1,32
 12002                        	.sym	reason,4,16,6,16
 12003 05:2A1E: 64 01        	stz	<L411+message_1
 12004 05:2A20: 64 03        	stz	<L411+message_1+2
 12005                        	.line	2463
 12006 05:2A22: A5 08        	lda	<L410+reason_0
 12007 05:2A24: 82 A9 00     	brl	L10264
 12008                        ;	{
 12009                        	.line	2464
 12010                        ;	case FX_IDLEPROC_PROCESS:
 12011                        	.line	2465
 12012                        L10266:
 12013                        ;
 12014                        ;		if(_k_debugport_hd == NULL)
 12015                        	.line	2467
 12016                        ;			_k_debugport_hd =  k_get_ipc_por
                    t(IPC_SYS_DEBUG_HD);
 12017 05:2A27: AD xx xx     	lda	|~~_k_debugport_hd
 12018 05:2A2A: 0D xx xx     	ora	|~~_k_debugport_hd+2
 12019 05:2A2D: F0 03        	beq	L413
 12020 05:2A2F: 82 10 00     	brl	L10267
 12021                        L413:
 12022                        	.line	2468
 12023 05:2A32: F4 xx xx     	pea	#^L390
 12024 05:2A35: F4 xx xx     	pea	#<L390
 12025 05:2A38: 22 xx xx xx  	jsl	~~k_get_ipc_port
 12026 05:2A3C: 8D xx xx     	sta	|~~_k_debugport_hd
 12027 05:2A3F: 8E xx xx     	stx	|~~_k_debugport_hd+2
 12028                        ;
 12029                        ;
 12030                        ;		if(_k_debugport_hd)
 12031                        L10267:
 12032                        	.line	2471
 12033                        ;		{
  Sat Jul 10 2021  1:15                                                Page 234


 12034 05:2A42: AD xx xx     	lda	|~~_k_debugport_hd
 12035 05:2A45: 0D xx xx     	ora	|~~_k_debugport_hd+2
 12036 05:2A48: D0 03        	bne	L414
 12037 05:2A4A: 82 4A 00     	brl	L10268
 12038                        L414:
 12039                        	.line	2472
 12040                        ;			message = k_read_ipc_port(_k_deb
                    ugport_hd);
 12041                        	.line	2473
 12042 05:2A4D: AD xx xx     	lda	|~~_k_debugport_hd+2
 12043 05:2A50: 48           	pha
 12044 05:2A51: AD xx xx     	lda	|~~_k_debugport_hd
 12045 05:2A54: 48           	pha
 12046 05:2A55: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12047 05:2A59: 85 01        	sta	<L411+message_1
 12048 05:2A5B: 86 03        	stx	<L411+message_1+2
 12049                        ;			while(message)
 12050                        	.line	2474
 12051                        L10269:
 12052 05:2A5D: A5 01        	lda	<L411+message_1
 12053 05:2A5F: 05 03        	ora	<L411+message_1+2
 12054 05:2A61: D0 03        	bne	L415
 12055 05:2A63: 82 31 00     	brl	L10270
 12056                        L415:
 12057                        ;			{
 12058                        	.line	2475
 12059                        ;				k_debug_strings("DEHD:",
                     ((PFXSTRING)message)->buffer );
 12060                        	.line	2476
 12061 05:2A66: A0 06 00     	ldy	#$6
 12062 05:2A69: B7 01        	lda	[<L411+message_1],Y
 12063 05:2A6B: 48           	pha
 12064 05:2A6C: A0 04 00     	ldy	#$4
 12065 05:2A6F: B7 01        	lda	[<L411+message_1],Y
 12066 05:2A71: 48           	pha
 12067 05:2A72: F4 xx xx     	pea	#^L390+9
 12068 05:2A75: F4 xx xx     	pea	#<L390+9
 12069 05:2A78: 22 xx xx xx  	jsl	~~k_debug_strings
 12070                        ;				k_fxstring_free(((PFXSTR
                    ING)message));
 12071                        	.line	2477
 12072 05:2A7C: D4 03        	pei	<L411+message_1+2
 12073 05:2A7E: D4 01        	pei	<L411+message_1
 12074 05:2A80: 22 xx xx xx  	jsl	~~k_fxstring_free
 12075                        ;				message = k_read_ipc_por
                    t(_k_debugport_hd);
 12076                        	.line	2478
 12077 05:2A84: AD xx xx     	lda	|~~_k_debugport_hd+2
 12078 05:2A87: 48           	pha
 12079 05:2A88: AD xx xx     	lda	|~~_k_debugport_hd
 12080 05:2A8B: 48           	pha
 12081 05:2A8C: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12082 05:2A90: 85 01        	sta	<L411+message_1
 12083 05:2A92: 86 03        	stx	<L411+message_1+2
 12084                        ;			}
 12085                        	.line	2479
 12086 05:2A94: 82 C6 FF     	brl	L10269
 12087                        L10270:
  Sat Jul 10 2021  1:15                                                Page 235


 12088                        ;		}
 12089                        	.line	2480
 12090                        ;
 12091                        ;
 12092                        ;		break;
 12093                        L10268:
 12094                        	.line	2483
 12095 05:2A97: 82 4A 00     	brl	L10265
 12096                        ;	case FX_IDLEPROC_REG:
 12097                        	.line	2484
 12098                        L10271:
 12099                        ;		k_debug_strings("_k_async_debug reason:"
                    ,"FX_IDLEPROC_REG");
 12100                        	.line	2485
 12101 05:2A9A: F4 xx xx     	pea	#^L390+38
 12102 05:2A9D: F4 xx xx     	pea	#<L390+38
 12103 05:2AA0: F4 xx xx     	pea	#^L390+15
 12104 05:2AA3: F4 xx xx     	pea	#<L390+15
 12105 05:2AA6: 22 xx xx xx  	jsl	~~k_debug_strings
 12106                        ;
 12107                        ;		_k_debugport_hd =  k_get_ipc_port(IPC_SY
                    S_DEBUG_HD);
 12108                        	.line	2487
 12109 05:2AAA: F4 xx xx     	pea	#^L390+54
 12110 05:2AAD: F4 xx xx     	pea	#<L390+54
 12111 05:2AB0: 22 xx xx xx  	jsl	~~k_get_ipc_port
 12112 05:2AB4: 8D xx xx     	sta	|~~_k_debugport_hd
 12113 05:2AB7: 8E xx xx     	stx	|~~_k_debugport_hd+2
 12114                        ;
 12115                        ;		break;
 12116                        	.line	2489
 12117 05:2ABA: 82 27 00     	brl	L10265
 12118                        ;	case FX_IDLEPROC_UNREG:
 12119                        	.line	2490
 12120                        L10272:
 12121                        ;		k_debug_strings("_k_async_debug reason:"
                    ,"FX_IDLEPROC_UNREG");
 12122                        	.line	2491
 12123 05:2ABD: F4 xx xx     	pea	#^L390+86
 12124 05:2AC0: F4 xx xx     	pea	#<L390+86
 12125 05:2AC3: F4 xx xx     	pea	#^L390+63
 12126 05:2AC6: F4 xx xx     	pea	#<L390+63
 12127 05:2AC9: 22 xx xx xx  	jsl	~~k_debug_strings
 12128                        ;		break;
 12129                        	.line	2492
 12130 05:2ACD: 82 14 00     	brl	L10265
 12131                        ;	}
 12132                        	.line	2493
 12133                        L10264:
 12134                        	xref	~~~swt
 12135 05:2AD0: 22 xx xx xx  	jsl	~~~swt
 12136 05:2AD4: 03 00        	dw	3
 12137 05:2AD6: 01 00        	dw	1
 12138 05:2AD8: 99 2A        	dw	L10271-1
 12139 05:2ADA: 02 00        	dw	2
 12140 05:2ADC: BC 2A        	dw	L10272-1
 12141 05:2ADE: 04 00        	dw	4
 12142 05:2AE0: 26 2A        	dw	L10266-1
  Sat Jul 10 2021  1:15                                                Page 236


 12143 05:2AE2: E3 2A        	dw	L10265-1
 12144                        L10265:
 12145                        ;}
 12146                        	.line	2494
 12147                        L416:
 12148 05:2AE4: A5 06        	lda	<L410+2
 12149 05:2AE6: 85 08        	sta	<L410+2+2
 12150 05:2AE8: A5 05        	lda	<L410+1
 12151 05:2AEA: 85 07        	sta	<L410+1+2
 12152 05:2AEC: 2B           	pld
 12153 05:2AED: 3B           	tsc
 12154 05:2AEE: 18           	clc
 12155 05:2AEF: 69 06 00     	adc	#L410+2
 12156 05:2AF2: 1B           	tcs
 12157 05:2AF3: 6B           	rtl
 12158                        	.endblock	2494
 12159             00000004   L410	equ	4
 12160             00000001   L411	equ	1
 12161 05:2AF4:              	ends
 12162                        	efunc
 12163                        	.endfunc	2494,1,4
 12164                        	.line	2494
 12165                        	data
 12166                        L390:
 12167 00:092C: 40 64 65 62  	db	$40,$64,$65,$62,$75,$67,$68,$64,$00,$44,
                    $45,$48,$44,$3A,$00
       00:0930: 75 67 68 64 
       00:0934: 00 44 45 48 
       00:0938: 44 3A 00 
 12168 00:093B: 5F 6B 5F 61  	db	$5F,$6B,$5F,$61,$73,$79,$6E,$63,$5F,$64,
                    $65,$62,$75,$67,$20
       00:093F: 73 79 6E 63 
       00:0943: 5F 64 65 62 
       00:0947: 75 67 20 
 12169 00:094A: 72 65 61 73  	db	$72,$65,$61,$73,$6F,$6E,$3A,$00,$46,$58,
                    $5F,$49,$44,$4C,$45
       00:094E: 6F 6E 3A 00 
       00:0952: 46 58 5F 49 
       00:0956: 44 4C 45 
 12170 00:0959: 50 52 4F 43  	db	$50,$52,$4F,$43,$5F,$52,$45,$47,$00,$40,
                    $64,$65,$62,$75,$67
       00:095D: 5F 52 45 47 
       00:0961: 00 40 64 65 
       00:0965: 62 75 67 
 12171 00:0968: 68 64 00 5F  	db	$68,$64,$00,$5F,$6B,$5F,$61,$73,$79,$6E,
                    $63,$5F,$64,$65,$62
       00:096C: 6B 5F 61 73 
       00:0970: 79 6E 63 5F 
       00:0974: 64 65 62 
 12172 00:0977: 75 67 20 72  	db	$75,$67,$20,$72,$65,$61,$73,$6F,$6E,$3A,
                    $00,$46,$58,$5F,$49
       00:097B: 65 61 73 6F 
       00:097F: 6E 3A 00 46 
       00:0983: 58 5F 49 
 12173 00:0986: 44 4C 45 50  	db	$44,$4C,$45,$50,$52,$4F,$43,$5F,$55,$4E,
                    $52,$45,$47,$00
       00:098A: 52 4F 43 5F 
       00:098E: 55 4E 52 45 
  Sat Jul 10 2021  1:15                                                Page 237


       00:0992: 47 00 
 12174 00:0994:              	ends
 12175                        ;
 12176                        ;
 12177                        ;VOID _k_async_mouse(UINT reason)
 12178                        ;{
 12179                        	.line	2497
 12180                        	.line	2498
 12181                        	EVTMAN
 12182                        	xdef	~~_k_async_mouse
 12183                        	func
 12184                        	.function	2498
 12185                        ~~_k_async_mouse:
 12186                        	longa	on
 12187                        	longi	on
 12188 05:2AF4: 3B           	tsc
 12189 05:2AF5: 38           	sec
 12190 05:2AF6: E9 08 00     	sbc	#L418
 12191 05:2AF9: 1B           	tcs
 12192 05:2AFA: 0B           	phd
 12193 05:2AFB: 5B           	tcd
 12194             00000004   reason_0	set	4
 12195                        	.block	2498
 12196                        ;	PIPCPORT mouseport = NULL;
 12197                        ;	PMARSHALDATA pcmd  = NULL;
 12198                        ;
 12199                        ;	switch(reason)
 12200             00000000   mouseport_1	set	0
 12201             00000004   pcmd_1	set	4
 12202                        	.sym	mouseport,0,138,1,32,61
 12203                        	.sym	pcmd,4,139,1,32,70
 12204                        	.sym	reason,4,16,6,16
 12205 05:2AFC: 64 01        	stz	<L419+mouseport_1
 12206 05:2AFE: 64 03        	stz	<L419+mouseport_1+2
 12207 05:2B00: 64 05        	stz	<L419+pcmd_1
 12208 05:2B02: 64 07        	stz	<L419+pcmd_1+2
 12209                        	.line	2502
 12210 05:2B04: A5 0C        	lda	<L418+reason_0
 12211 05:2B06: 82 7D 00     	brl	L10273
 12212                        ;	{
 12213                        	.line	2503
 12214                        ;	case FX_IDLEPROC_PROCESS:
 12215                        	.line	2504
 12216                        L10275:
 12217                        ;		//k_debug_string("_k_async_mouse\r\n");
 12218                        ;
 12219                        ;		mouseport =  k_get_ipc_port("@mouse");
 12220                        	.line	2507
 12221 05:2B09: F4 xx xx     	pea	#^L417
 12222 05:2B0C: F4 xx xx     	pea	#<L417
 12223 05:2B0F: 22 xx xx xx  	jsl	~~k_get_ipc_port
 12224 05:2B13: 85 01        	sta	<L419+mouseport_1
 12225 05:2B15: 86 03        	stx	<L419+mouseport_1+2
 12226                        ;		if(mouseport)
 12227                        	.line	2508
 12228                        ;		{
 12229 05:2B17: A5 01        	lda	<L419+mouseport_1
 12230 05:2B19: 05 03        	ora	<L419+mouseport_1+2
  Sat Jul 10 2021  1:15                                                Page 238


 12231 05:2B1B: D0 03        	bne	L421
 12232 05:2B1D: 82 3D 00     	brl	L10276
 12233                        L421:
 12234                        	.line	2509
 12235                        ;			pcmd = (PMARSHALDATA)k_read_ipc_
                    port(mouseport);
 12236                        	.line	2510
 12237 05:2B20: D4 03        	pei	<L419+mouseport_1+2
 12238 05:2B22: D4 01        	pei	<L419+mouseport_1
 12239 05:2B24: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12240 05:2B28: 85 05        	sta	<L419+pcmd_1
 12241 05:2B2A: 86 07        	stx	<L419+pcmd_1+2
 12242                        ;			while(pcmd)
 12243                        	.line	2511
 12244                        L10277:
 12245 05:2B2C: A5 05        	lda	<L419+pcmd_1
 12246 05:2B2E: 05 07        	ora	<L419+pcmd_1+2
 12247 05:2B30: D0 03        	bne	L422
 12248 05:2B32: 82 28 00     	brl	L10278
 12249                        L422:
 12250                        ;			{
 12251                        	.line	2512
 12252                        ;				if(pcmd->byteValue)
 12253                        	.line	2513
 12254                        ;				{
 12255 05:2B35: A7 05        	lda	[<L419+pcmd_1]
 12256 05:2B37: 29 FF 00     	and	#$ff
 12257 05:2B3A: D0 03        	bne	L423
 12258 05:2B3C: 82 0F 00     	brl	L10279
 12259                        L423:
 12260                        	.line	2514
 12261                        ;					//k_debug_hex("_
                    k_async_mouse:",pcmd->byteValue);
 12262                        ;					k_mouse_write(pc
                    md->byteValue);
 12263                        	.line	2516
 12264 05:2B3F: A7 05        	lda	[<L419+pcmd_1]
 12265 05:2B41: 48           	pha
 12266 05:2B42: 22 BC 29 05  	jsl	~~k_mouse_write
 12267                        ;					k_mem_deallocate
                    _heap(pcmd);
 12268                        	.line	2517
 12269 05:2B46: D4 07        	pei	<L419+pcmd_1+2
 12270 05:2B48: D4 05        	pei	<L419+pcmd_1
 12271 05:2B4A: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
 12272                        ;				}
 12273                        	.line	2518
 12274                        ;				pcmd = (PMARSHALDATA)k_r
                    ead_ipc_port(mouseport);
 12275                        L10279:
 12276                        	.line	2519
 12277 05:2B4E: D4 03        	pei	<L419+mouseport_1+2
 12278 05:2B50: D4 01        	pei	<L419+mouseport_1
 12279 05:2B52: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12280 05:2B56: 85 05        	sta	<L419+pcmd_1
 12281 05:2B58: 86 07        	stx	<L419+pcmd_1+2
 12282                        ;			}
 12283                        	.line	2520
  Sat Jul 10 2021  1:15                                                Page 239


 12284 05:2B5A: 82 CF FF     	brl	L10277
 12285                        L10278:
 12286                        ;		}
 12287                        	.line	2521
 12288                        ;
 12289                        ;
 12290                        ;		break;
 12291                        L10276:
 12292                        	.line	2524
 12293 05:2B5D: 82 3A 00     	brl	L10274
 12294                        ;	case FX_IDLEPROC_REG:
 12295                        	.line	2525
 12296                        L10280:
 12297                        ;		k_debug_strings("_k_async_mouse reason:"
                    ,"FX_IDLEPROC_REG");
 12298                        	.line	2526
 12299 05:2B60: F4 xx xx     	pea	#^L417+30
 12300 05:2B63: F4 xx xx     	pea	#<L417+30
 12301 05:2B66: F4 xx xx     	pea	#^L417+7
 12302 05:2B69: F4 xx xx     	pea	#<L417+7
 12303 05:2B6C: 22 xx xx xx  	jsl	~~k_debug_strings
 12304                        ;		break;
 12305                        	.line	2527
 12306 05:2B70: 82 27 00     	brl	L10274
 12307                        ;	case FX_IDLEPROC_UNREG:
 12308                        	.line	2528
 12309                        L10281:
 12310                        ;		k_debug_strings("_k_async_mouse reason:"
                    ,"FX_IDLEPROC_UNREG");
 12311                        	.line	2529
 12312 05:2B73: F4 xx xx     	pea	#^L417+69
 12313 05:2B76: F4 xx xx     	pea	#<L417+69
 12314 05:2B79: F4 xx xx     	pea	#^L417+46
 12315 05:2B7C: F4 xx xx     	pea	#<L417+46
 12316 05:2B7F: 22 xx xx xx  	jsl	~~k_debug_strings
 12317                        ;		break;
 12318                        	.line	2530
 12319 05:2B83: 82 14 00     	brl	L10274
 12320                        ;	}
 12321                        	.line	2531
 12322                        L10273:
 12323                        	xref	~~~swt
 12324 05:2B86: 22 xx xx xx  	jsl	~~~swt
 12325 05:2B8A: 03 00        	dw	3
 12326 05:2B8C: 01 00        	dw	1
 12327 05:2B8E: 5F 2B        	dw	L10280-1
 12328 05:2B90: 02 00        	dw	2
 12329 05:2B92: 72 2B        	dw	L10281-1
 12330 05:2B94: 04 00        	dw	4
 12331 05:2B96: 08 2B        	dw	L10275-1
 12332 05:2B98: 99 2B        	dw	L10274-1
 12333                        L10274:
 12334                        ;}
 12335                        	.line	2532
 12336                        L424:
 12337 05:2B9A: A5 0A        	lda	<L418+2
 12338 05:2B9C: 85 0C        	sta	<L418+2+2
 12339 05:2B9E: A5 09        	lda	<L418+1
  Sat Jul 10 2021  1:15                                                Page 240


 12340 05:2BA0: 85 0B        	sta	<L418+1+2
 12341 05:2BA2: 2B           	pld
 12342 05:2BA3: 3B           	tsc
 12343 05:2BA4: 18           	clc
 12344 05:2BA5: 69 0A 00     	adc	#L418+2
 12345 05:2BA8: 1B           	tcs
 12346 05:2BA9: 6B           	rtl
 12347                        	.endblock	2532
 12348             00000008   L418	equ	8
 12349             00000001   L419	equ	1
 12350 05:2BAA:              	ends
 12351                        	efunc
 12352                        	.endfunc	2532,1,8
 12353                        	.line	2532
 12354                        	data
 12355                        L417:
 12356 00:0994: 40 6D 6F 75  	db	$40,$6D,$6F,$75,$73,$65,$00,$5F,$6B,$5F,
                    $61,$73,$79,$6E,$63
       00:0998: 73 65 00 5F 
       00:099C: 6B 5F 61 73 
       00:09A0: 79 6E 63 
 12357 00:09A3: 5F 6D 6F 75  	db	$5F,$6D,$6F,$75,$73,$65,$20,$72,$65,$61,
                    $73,$6F,$6E,$3A,$00
       00:09A7: 73 65 20 72 
       00:09AB: 65 61 73 6F 
       00:09AF: 6E 3A 00 
 12358 00:09B2: 46 58 5F 49  	db	$46,$58,$5F,$49,$44,$4C,$45,$50,$52,$4F,
                    $43,$5F,$52,$45,$47
       00:09B6: 44 4C 45 50 
       00:09BA: 52 4F 43 5F 
       00:09BE: 52 45 47 
 12359 00:09C1: 00 5F 6B 5F  	db	$00,$5F,$6B,$5F,$61,$73,$79,$6E,$63,$5F,
                    $6D,$6F,$75,$73,$65
       00:09C5: 61 73 79 6E 
       00:09C9: 63 5F 6D 6F 
       00:09CD: 75 73 65 
 12360 00:09D0: 20 72 65 61  	db	$20,$72,$65,$61,$73,$6F,$6E,$3A,$00,$46,
                    $58,$5F,$49,$44,$4C
       00:09D4: 73 6F 6E 3A 
       00:09D8: 00 46 58 5F 
       00:09DC: 49 44 4C 
 12361 00:09DF: 45 50 52 4F  	db	$45,$50,$52,$4F,$43,$5F,$55,$4E,$52,$45,
                    $47,$00
       00:09E3: 43 5F 55 4E 
       00:09E7: 52 45 47 00 
 12362 00:09EB:              	ends
 12363                        ;
 12364                        ;
 12365                        	.line	2533
 12366                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanagerV5.c",2497
 12367                        	xref	~~k_create_dos_device
 12368                        	xref	~~k_user_FindRect
 12369                        	xref	~~k_user_getOverLappedRect
 12370                        	xref	~~k_increment_z
 12371                        	xref	~~k_point_hit_scan
 12372                        	xref	~~k_point_in_any_nodeslist
 12373                        	xref	~~k_user_getFocusWindow
  Sat Jul 10 2021  1:15                                                Page 241


 12374                        	xref	~~k_isNonClient
 12375                        	xref	~~k_user_getDesktopWindow
 12376                        	xref	~~k_getHandleFromWindow
 12377                        	xref	~~k_initializeWindowManager
 12378                        	xref	~~k_read_ipc_port
 12379                        	xref	~~k_get_ipc_port
 12380                        	xref	~~k_mem_deallocate_heap
 12381                        	xref	~~k_mem_allocate_heap
 12382                        	xref	~~k_heap_integrity_check
 12383                        	xref	~~k_exec_get_current_process
 12384                        	xref	~~k_exec_set_current_process
 12385                        	xref	~~k_exec_set_process_foreground
 12386                        	xref	~~k_exec_launchProcess
 12387                        	xref	~~k_exec_throw_exception
 12388                        	xref	~~k_initalize_executive
 12389                        	xref	~~k_fxstring_free
 12390                        	xref	~~k_debug_strings
 12391                        	xref	~~k_debug_long
 12392                        	xref	~~k_debug_integer
 12393                        	xref	~~k_debug_pointer
 12394                        	xref	~~k_debug_string
 12395                        	xref	~~k_init_keyboard
 12396                        	xref	~~k_nodelist_foreach_type
 12397                        	xref	~~k_nodelist_naddtolist
 12398                        	xref	~~k_nodelist_deallocate_list
 12399                        	xref	~~k_nodelist_allocate_list
 12400                        	xref	~~k_nodelist_remove_node
 12401                        	xref	~~k_enqueue_with_lock
 12402                        	xref	~~k_dequeue
 12403                        	xref	~~k_enqueue
 12404                        	xref	~~k_initialize
 12405                        	xref	~~memset
 12406                        	xref	~~memcpy
 12407                        	xref	~~_system_timer
 12408                        	udata
 12409                        ~~_k_mouseState
 12410 00:0000:              	ds	23
 12411 00:0017:              	ends
 12412                        	udata
 12413                        ~~eventProcess
 12414 00:0017:              	ds	1024
 12415 00:0417:              	ends
 12416                        	udata
 12417                        ~~eventProcs
 12418 00:0417:              	ds	1024
 12419 00:0817:              	ends
 12420                        	.sym	~~kbd_cmd_handling,~~kbd_cmd_handling,65
                    ,2,0
 12421                        	.sym	~~_kbd_ack,~~_kbd_ack,78,2,0
 12422                        	.sym	~~_kbd_wait,~~_kbd_wait,65,3,0
 12423                        	.sym	~~processMessageCracker,~~processMessage
                    Cracker,1098,3,32,16
 12424                        	.sym	~~Run,~~Run,80,3,0
 12425                        	.sym	~~Query,~~Query,80,3,0
 12426                        	.sym	~~Configure,~~Configure,80,3,0
 12427                        	.sym	~~Uninit,~~Uninit,65,3,0
 12428                        	.sym	~~Init,~~Init,1089,3,32
 12429                        	.sym	~~sync_mouse_time,~~sync_mouse_time,5,3,
  Sat Jul 10 2021  1:15                                                Page 242


                    16
 12430                        	.sym	~~k_new_event_loop,~~k_new_event_loop,65
                    ,2,0
 12431                        	.sym	~~_system_timer,~~_system_timer,18,18,32
 12432                        	.sym	DllMain,0,641,14,32
 12433                        	.sym	~~initHD,~~initHD,14,2,8
 12434                        	.sym	~~k_mouse_read,~~k_mouse_read,78,3,0
 12435                        	.sym	~~k_mouse_write,~~k_mouse_write,65,3,0
 12436                        	.sym	~~k_mouse_wait,~~k_mouse_wait,65,3,0
 12437                        	.sym	~~ps2port_ready,~~ps2port_ready,14,3,8
 12438                        	.sym	~~extendedLookup,~~extendedLookup,880,3,
                    0,8,2
 12439                        	.sym	~~_k_debugport_hd,~~_k_debugport_hd,138,
                    3,32,61
 12440                        	.sym	~~THIS_MODULE,~~THIS_MODULE,18,3,32
 12441                        	.sym	~~_fast_idle_tick,~~_fast_idle_tick,16,3
                    ,16
 12442                        	.sym	~~_normal_idle_tick,~~_normal_idle_tick,
                    16,3,16
 12443                        	.sym	~~_k_mouseState,~~_k_mouseState,10,3,184
                    ,72
 12444                        	.sym	~~_k_eventQueue,~~_k_eventQueue,138,3,32
                    ,7
 12445                        	.sym	~~_k_hWndFocus,~~_k_hWndFocus,129,3,32
 12446                        	.sym	~~_k_system_timer,~~_k_system_timer,18,3
                    ,32
 12447                        	.sym	~~_k_eventManager_IdleProcList,~~_k_even
                    tManager_IdleProcList,138,3,32,6
 12448                        	.sym	~~eventProcess,~~eventProcess,1130,3,32,
                    71,256
 12449                        	.sym	~~eventProcs,~~eventProcs,5217,3,32,256
 12450                        	.sym	~~_k_currentWndManager,~~_k_currentWndMa
                    nager,138,2,32,64
 12451                        	.sym	~~_k_eventmanager,~~_k_eventmanager,10,2
                    ,192,73
 12452                        	.sym	PTEXTVIEWDATA,0,138,14,32,125
 12453                        	.sym	TEXTVIEWDATA,0,10,14,32,125
 12454                        	.sym	~~k_create_dos_device,~~k_create_dos_dev
                    ice,1098,18,32,122
 12455                        	.sym	PDOSHANDLE,0,138,14,32,124
 12456                        	.sym	DOSHANDLE,0,10,14,80,124
 12457                        	.sym	PFXDOSDEVICE,0,138,14,32,122
 12458                        	.sym	FXDOSDEVICE,0,10,14,5744,122
 12459                        	.sym	DOSINITDEVICE,0,641,14,32
 12460                        	.sym	DOSSECTORWRITER,0,654,14,32
 12461                        	.sym	DOSSECTORREADER,0,654,14,32
 12462                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,121
 12463                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,121
 12464                        	.sym	PIDSECTOR,0,138,14,32,98
 12465                        	.sym	IDSECTOR,0,10,14,2048,98
 12466                        	.sym	PLFN,0,138,14,32,97
 12467                        	.sym	LFN,0,10,14,256,97
 12468                        	.sym	PFAT16ENTRYLONG,0,138,14,32,96
 12469                        	.sym	FAT16ENTRYLONG,0,10,14,288,96
 12470                        	.sym	PFAT16ENTRY,0,138,14,32,95
 12471                        	.sym	FAT16ENTRY,0,10,14,256,95
 12472                        	.sym	Fat16BootSector,0,10,14,4096,94
 12473                        	.sym	PPARTITIONTABLE,0,138,14,32,93
  Sat Jul 10 2021  1:15                                                Page 243


 12474                        	.sym	PARTITIONTABLE,0,10,14,128,93
 12475                        	.sym	PFATBOOTSECTOR,0,138,14,32,92
 12476                        	.sym	FATBOOTSECTOR,0,10,14,928,92
 12477                        	.sym	fat_BS_t,0,10,14,688,91
 12478                        	.sym	fat_extBS_16_t,0,10,14,192,90
 12479                        	.sym	PFAT32EXT,0,138,14,32,89
 12480                        	.sym	fat_extBS_32_t,0,10,14,416,89
 12481                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,88
 12482                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,88
 12483                        	.sym	PFILEINFO,0,138,14,32,87
 12484                        	.sym	FILEINFO,0,10,14,136,87
 12485                        	.sym	PDISKINFO,0,138,14,32,86
 12486                        	.sym	DISKINFO,0,10,14,416,86
 12487                        	.sym	PDIRENTRY,0,138,14,32,85
 12488                        	.sym	DIRENTRY,0,10,14,256,85
 12489                        	.sym	DRESULT,0,5,14,16
 12490                        	.sym	DSTATUS,0,14,14,8
 12491                        	.sym	FRESULT,0,5,14,16
 12492                        	.sym	MKFS_PARM,0,10,14,80,84
 12493                        	.sym	FILINFO,0,10,14,2224,83
 12494                        	.sym	DIR,0,10,14,416,82
 12495                        	.sym	FIL,0,10,14,4400,81
 12496                        	.sym	FFOBJID,0,10,14,128,80
 12497                        	.sym	FATFS,0,10,14,4504,79
 12498                        	.sym	LBA_t,0,18,14,32
 12499                        	.sym	FSIZE_t,0,18,14,32
 12500                        	.sym	TCHAR,0,14,14,8
 12501                        	.sym	PCOMMANDARGS,0,138,14,32,78
 12502                        	.sym	COMMANDARGS,0,10,14,64,78
 12503                        	.sym	PTOKENIZESTATE,0,133,14,32
 12504                        	.sym	TOKENIZESTATE,0,5,14,16
 12505                        	.sym	PTOKEN,0,138,14,32,77
 12506                        	.sym	TOKEN,0,10,14,64,77
 12507                        	.sym	PTOKENTYPE,0,133,14,32
 12508                        	.sym	TOKENTYPE,0,5,14,16
 12509                        	.sym	FXCommandHandler,0,656,14,32
 12510                        	.sym	PCONSOLECTX,0,138,14,32,76
 12511                        	.sym	CONSOLECTX,0,10,14,1144,76
 12512                        	.sym	PSPINNERCTX,0,138,14,32,75
 12513                        	.sym	SPINNERCTX,0,10,14,48,75
 12514                        	.sym	HCLIP,0,138,14,32,74
 12515                        	.sym	PCLIPBOARD_DATA,0,138,14,32,74
 12516                        	.sym	CLIPBOARD_DATA,0,10,14,168,74
 12517                        	.sym	~~_k_keyCodesExtSet,~~_k_keyCodesExtSet,
                    112,2,0,1
 12518                        	.sym	~~_k_keyCodesShiftSet,~~_k_keyCodesShift
                    Set,112,2,0,89
 12519                        	.sym	~~_k_keyCodesSet,~~_k_keyCodesSet,112,2,
                    0,89
 12520                        	.sym	~~_k_async_debug,~~_k_async_debug,65,2,0
 12521                        	.sym	~~_k_async_mouse,~~_k_async_mouse,65,2,0
 12522                        	.sym	~~_k_async_keyboard,~~_k_async_keyboard,
                    65,2,0
 12523                        	.sym	~~IdleCleanup,~~IdleCleanup,65,2,0
 12524                        	.sym	~~DeviceChecks,~~DeviceChecks,65,2,0
 12525                        	.sym	~~k_execute_idleprocs,~~k_execute_idlepr
                    ocs,65,2,0
 12526                        	.sym	~~k_process_hi_idle_procs,~~k_process_hi
  Sat Jul 10 2021  1:15                                                Page 244


                    _idle_procs,65,2,0
 12527                        	.sym	~~k_process_idle_procs,~~k_process_idle_
                    procs,65,2,0
 12528                        	.sym	~~k_unregister_idle_proc,~~k_unregister_
                    idle_proc,78,2,0
 12529                        	.sym	~~k_register_idle_proc,~~k_register_idle
                    _proc,1089,2,32
 12530                        	.sym	~~k_send_process_command_message,~~k_sen
                    d_process_command_message,78,2,0
 12531                        	.sym	~~k_send_command_message,~~k_send_comman
                    d_message,78,2,0
 12532                        	.sym	~~k_send_window_native_message,~~k_send_
                    window_native_message,78,2,0
 12533                        	.sym	~~k_send_window_message,~~k_send_window_
                    message,78,2,0
 12534                        	.sym	~~k_send_message,~~k_send_message,78,2,0
 12535                        	.sym	~~k_dealloc_message_arg,~~k_dealloc_mess
                    age_arg,65,2,0
 12536                        	.sym	~~k_alloc_message_arg,~~k_alloc_message_
                    arg,1089,2,32
 12537                        	.sym	~~k_destory_msg,~~k_destory_msg,65,2,0
 12538                        	.sym	~~k_updateMouseState,~~k_updateMouseStat
                    e,1098,2,32,16
 12539                        	.sym	~~k_create_synthetic_window_msg,~~k_crea
                    te_synthetic_window_msg,1098,2,32,16
 12540                        	.sym	~~k_create_process_msg,~~k_create_proces
                    s_msg,1098,2,32,16
 12541                        	.sym	~~k_create_msg,~~k_create_msg,1098,2,32,
                    16
 12542                        	.sym	~~k_irq_device_event,~~k_irq_device_even
                    t,65,2,0
 12543                        	.sym	~~k_unattach_events,~~k_unattach_events,
                    69,2,0
 12544                        	.sym	~~k_attach_process_events,~~k_attach_pro
                    cess_events,69,2,0
 12545                        	.sym	~~k_attach_events,~~k_attach_events,69,2
                    ,0
 12546                        	.sym	~~k_signal_sol_event,~~k_signal_sol_even
                    t,65,2,0
 12547                        	.sym	~~k_event_loop,~~k_event_loop,65,2,0
 12548                        	.sym	~~k_do_processes,~~k_do_processes,65,2,0
 12549                        	.sym	~~k_do_procs,~~k_do_procs,65,2,0
 12550                        	.sym	~~IdleProc,~~IdleProc,65,2,0
 12551                        	.sym	~~k_getKeyboardChar,~~k_getKeyboardChar,
                    80,2,0
 12552                        	.sym	~~k_initalize_event_manager,~~k_initaliz
                    e_event_manager,1098,2,32,73
 12553                        	.sym	~~k_get_systemtimer,~~k_get_systemtimer,
                    82,2,0
 12554                        	.sym	PEVENTMANAGER,0,138,14,32,73
 12555                        	.sym	EVENTMANAGER,0,10,14,192,73
 12556                        	.sym	EV_RUN,0,656,14,32
 12557                        	.sym	EV_QUERY_METRIC,0,656,14,32
 12558                        	.sym	EV_CONFIGURE,0,656,14,32
 12559                        	.sym	EV_UNINIT,0,641,14,32
 12560                        	.sym	EV_INIT,0,8833,14,32
 12561                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,72
 12562                        	.sym	MOUSE_MSG_STATE,0,10,14,184,72
  Sat Jul 10 2021  1:15                                                Page 245


 12563                        	.sym	PFXEVENTPROCESS,0,138,14,32,71
 12564                        	.sym	FXEVENTPROCESS,0,10,14,64,71
 12565                        	.sym	PMARSHALDATA,0,139,14,32,70
 12566                        	.sym	MARSHALDATA,0,11,14,32,70
 12567                        	.sym	FXIDLEPROCESS,0,641,14,32
 12568                        	.sym	FXEventProc,0,641,14,32
 12569                        	.sym	PMOUSEMSGDATA,0,138,14,32,69
 12570                        	.sym	MOUSEMSGDATA,0,10,14,64,69
 12571                        	.sym	MSGIRQ,0,5,14,16
 12572                        	.sym	MAINLOOPARGS,0,10,14,16,68
 12573                        	.sym	~~k_user_FindRect,~~k_user_FindRect,1098
                    ,18,32,33
 12574                        	.sym	~~k_user_getOverLappedRect,~~k_user_getO
                    verLappedRect,1098,18,32,6
 12575                        	.sym	PEACHCHILD_MSG,0,138,14,32,67
 12576                        	.sym	EACHCHILD_MSG,0,10,14,64,67
 12577                        	.sym	~~k_increment_z,~~k_increment_z,82,18,0
 12578                        	.sym	~~k_point_hit_scan,~~k_point_hit_scan,10
                    98,18,32,5
 12579                        	.sym	~~k_point_in_any_nodeslist,~~k_point_in_
                    any_nodeslist,1098,18,32,5
 12580                        	.sym	~~k_user_getFocusWindow,~~k_user_getFocu
                    sWindow,1089,18,32
 12581                        	.sym	PMSGBOX_DATA,0,138,14,32,66
 12582                        	.sym	MSGBOX_DATA,0,10,14,96,66
 12583                        	.sym	PDESKTOP_DATA,0,138,14,32,65
 12584                        	.sym	DESKTOP_DATA,0,10,14,64,65
 12585                        	.sym	~~k_isNonClient,~~k_isNonClient,78,18,0
 12586                        	.sym	~~k_user_getDesktopWindow,~~k_user_getDe
                    sktopWindow,1089,18,32
 12587                        	.sym	~~k_getHandleFromWindow,~~k_getHandleFro
                    mWindow,1089,18,32
 12588                        	.sym	~~k_initializeWindowManager,~~k_initiali
                    zeWindowManager,1098,18,32,64
 12589                        	.sym	PWINDOWMANAGER,0,138,14,32,64
 12590                        	.sym	WINDOWMANAGER,0,10,14,160,64
 12591                        	.sym	WM_DOPROCS,0,641,14,32
 12592                        	.sym	WM_QUERY_METRIC,0,656,14,32
 12593                        	.sym	WM_CONFIGURE,0,656,14,32
 12594                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
 12595                        	.sym	WM_EVENTS,0,641,14,32
 12596                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,63
 12597                        	.sym	CUR_PALETTE_MAP,0,10,14,400,63
 12598                        	.sym	PCLICKDETECTED,0,138,14,32,62
 12599                        	.sym	CLICKDETECTED,0,10,14,64,62
 12600                        	.sym	OBJECTCLICKED,0,641,14,32
 12601                        	.sym	~~k_read_ipc_port,~~k_read_ipc_port,1089
                    ,18,32
 12602                        	.sym	~~k_get_ipc_port,~~k_get_ipc_port,1098,1
                    8,32,61
 12603                        	.sym	PIPCPORT,0,138,14,32,61
 12604                        	.sym	IPCPORT,0,10,14,144,61
 12605                        	.sym	~~k_mem_deallocate_heap,~~k_mem_dealloca
                    te_heap,65,18,0
 12606                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
 12607                        	.sym	~~k_heap_integrity_check,~~k_heap_integr
                    ity_check,82,18,0
  Sat Jul 10 2021  1:15                                                Page 246


 12608                        	.sym	MemoryCallback,0,641,14,32
 12609                        	.sym	PFXMEMORYMAP,0,138,14,32,60
 12610                        	.sym	FXMEMORYMAP,0,10,14,2072,60
 12611                        	.sym	UMM_HEAP_INFO,0,10,14,256,59
 12612                        	.sym	~~k_exec_get_current_process,~~k_exec_ge
                    t_current_process,1098,18,32,20
 12613                        	.sym	~~k_exec_set_current_process,~~k_exec_se
                    t_current_process,1098,18,32,20
 12614                        	.sym	~~k_exec_set_process_foreground,~~k_exec
                    _set_process_foreground,65,18,0
 12615                        	.sym	~~k_exec_launchProcess,~~k_exec_launchPr
                    ocess,1098,18,32,20
 12616                        	.sym	~~k_exec_throw_exception,~~k_exec_throw_
                    exception,65,18,0
 12617                        	.sym	~~k_initalize_executive,~~k_initalize_ex
                    ecutive,1098,18,32,58
 12618                        	.sym	PEXECUTIVE,0,138,14,32,58
 12619                        	.sym	EXECUTIVE,0,10,14,128,58
 12620                        	.sym	EX_QUERY_METRIC,0,656,14,32
 12621                        	.sym	EX_CONFIGURE,0,656,14,32
 12622                        	.sym	EX_UNINIT,0,641,14,32
 12623                        	.sym	EX_INIT,0,8833,14,32
 12624                        	.sym	~~k_fxstring_free,~~k_fxstring_free,65,1
                    8,0
 12625                        	.sym	PFXSTRING,0,138,14,32,57
 12626                        	.sym	FXSTRING,0,10,14,64,57
 12627                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
 12628                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
 12629                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
 12630                        	.sym	DEVICEDRIVER_READ,0,656,14,32
 12631                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
 12632                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
 12633                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,56
 12634                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,56
 12635                        	.sym	GETDRIVERDEF,0,8842,14,32,55
 12636                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,55
 12637                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,55
 12638                        	.sym	~~k_debug_strings,~~k_debug_strings,65,1
                    8,0
 12639                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
 12640                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
 12641                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
 12642                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
 12643                        	.sym	PSEGMENTHEADER,0,138,14,32,54
 12644                        	.sym	SEGMENTHEADER,0,10,14,160,54
 12645                        	.sym	~~k_init_keyboard,~~k_init_keyboard,65,1
                    8,0
 12646                        	.sym	PDEBUGBYTEBITS,0,138,14,32,53
 12647                        	.sym	DEBUGBYTEBITS,0,10,14,8,53
 12648                        	.sym	PFXENVIRONMENT,0,138,14,32,52
 12649                        	.sym	FXENVIRONMENT,0,10,14,96,52
 12650                        	.sym	PFXZEROPAGE,0,138,14,32,51
 12651                        	.sym	FXZEROPAGE,0,10,14,824,51
 12652                        	.sym	KERNELTRAPCALL,0,641,14,32
 12653                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,50
  Sat Jul 10 2021  1:15                                                Page 247


 12654                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,50
 12655                        	.sym	~~k_nodelist_foreach_type,~~k_nodelist_f
                    oreach_type,65,18,0
 12656                        	.sym	FOREACHNODEUNTIL,0,654,14,32
 12657                        	.sym	FOREACHNODE,0,641,14,32
 12658                        	.sym	~~k_nodelist_naddtolist,~~k_nodelist_nad
                    dtolist,1098,18,32,5
 12659                        	.sym	~~k_nodelist_deallocate_list,~~k_nodelis
                    t_deallocate_list,65,18,0
 12660                        	.sym	~~k_nodelist_allocate_list,~~k_nodelist_
                    allocate_list,1098,18,32,6
 12661                        	.sym	~~k_nodelist_remove_node,~~k_nodelist_re
                    move_node,1098,18,32,5
 12662                        	.sym	~~k_enqueue_with_lock,~~k_enqueue_with_l
                    ock,65,18,0
 12663                        	.sym	~~k_dequeue,~~k_dequeue,1089,18,32
 12664                        	.sym	~~k_enqueue,~~k_enqueue,78,18,0
 12665                        	.sym	~~k_initialize,~~k_initialize,65,18,0
 12666                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
 12667                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
 12668                        	.sym	PFXRFHEADER,0,138,14,32,48
 12669                        	.sym	FXRFHEADER,0,10,14,72,48
 12670                        	.sym	PFXCOMBUFFER,0,138,14,32,47
 12671                        	.sym	FXCOMBUFFER,0,10,14,2080,47
 12672                        	.sym	PSUBMENULIST,0,138,14,32,46
 12673                        	.sym	SUBMENULIST,0,10,14,40,46
 12674                        	.sym	HSUBMENU,0,7,14,32
 12675                        	.sym	PSUBMENU,0,138,14,32,45
 12676                        	.sym	SUBMENU,0,10,14,64,45
 12677                        	.sym	MenuAction,0,641,14,32
 12678                        	.sym	PMENUANCHOR,0,138,14,32,44
 12679                        	.sym	MENUANCHOR,0,10,14,272,44
 12680                        	.sym	PMSGBOX,0,138,14,32,43
 12681                        	.sym	MSGBOX,0,10,14,144,43
 12682                        	.sym	PTEXTBOX,0,138,14,32,42
 12683                        	.sym	TEXTBOX,0,10,14,144,42
 12684                        	.sym	PLISTBOX,0,138,14,32,41
 12685                        	.sym	LISTBOX,0,10,14,240,41
 12686                        	.sym	PSCROLLBAR,0,138,14,32,40
 12687                        	.sym	SCROLLBAR,0,10,14,240,40
 12688                        	.sym	PBUTTON,0,138,14,32,39
 12689                        	.sym	BUTTON,0,10,14,96,39
 12690                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
 12691                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
 12692                        	.sym	PMENUTAG,0,138,14,32,37
 12693                        	.sym	MENUTAG,0,10,14,160,37
 12694                        	.sym	PMENU,0,138,14,32,36
 12695                        	.sym	MENU,0,10,14,280,36
 12696                        	.sym	HMENURESOURCE,0,129,14,32
 12697                        	.sym	FONTMETRIC,0,10,14,32,35
 12698                        	.sym	TITLE,0,142,14,32
 12699                        	.sym	PHANDLE,0,1153,14,32
 12700                        	.sym	HANDLE,0,129,14,32
 12701                        	.sym	PWINDOWEX,0,138,14,32,34
 12702                        	.sym	WINDOWEX,0,10,14,3880,34
 12703                        	.sym	PWINDOW,0,138,14,32,33
 12704                        	.sym	WINDOW,0,10,14,3904,33
 12705                        	.sym	PDRAGDATA,0,138,14,32,32
  Sat Jul 10 2021  1:15                                                Page 248


 12706                        	.sym	DRAGDATA,0,10,14,216,32
 12707                        	.sym	PNCCLICKABLE,0,138,14,32,31
 12708                        	.sym	NCCLICKABLE,0,10,14,136,31
 12709                        	.sym	HCLICKABLE,0,7,14,32
 12710                        	.sym	PCLICKABLE,0,138,14,32,30
 12711                        	.sym	CLICKABLE,0,10,14,152,30
 12712                        	.sym	PWNDCLASS,0,138,14,32,29
 12713                        	.sym	WNDCLASS,0,10,14,272,29
 12714                        	.sym	HBRUSH,0,129,14,32
 12715                        	.sym	HCURSOR,0,129,14,32
 12716                        	.sym	HICON,0,129,14,32
 12717                        	.sym	HINSTANCE,0,129,14,32
 12718                        	.sym	FXWndProc,0,654,14,32
 12719                        	.sym	PDRECT,0,138,14,32,28
 12720                        	.sym	DRECT,0,10,14,112,28
 12721                        	.sym	PRECTP,0,138,14,32,27
 12722                        	.sym	RECTP,0,10,14,96,27
 12723                        	.sym	PRECT,0,138,14,32,26
 12724                        	.sym	RECT,0,10,14,112,26
 12725                        	.sym	PPOINT,0,138,14,32,25
 12726                        	.sym	POINT,0,10,14,32,25
 12727                        	.sym	PFXPROPERTY,0,138,14,32,23
 12728                        	.sym	FXPROPERTY,0,10,14,384,23
 12729                        	.sym	PKEYSTATE,0,138,14,32,22
 12730                        	.sym	KEYSTATE,0,10,14,112,22
 12731                        	.sym	SCANCODE,0,14,14,8
 12732                        	.sym	KEYCODE,0,16,14,16
 12733                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
 12734                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
 12735                        	.sym	PFXPROCESS,0,138,14,32,20
 12736                        	.sym	FXPROCESS,0,10,14,800,20
 12737                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
 12738                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
 12739                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
 12740                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
 12741                        	.sym	FXProcessProc,0,641,14,32
 12742                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
 12743                        	.sym	FXCMDMESSAGE,0,10,14,304,17
 12744                        	.sym	PFXOSMESSAGE,0,138,14,32,16
 12745                        	.sym	FXOSMESSAGE,0,10,14,304,16
 12746                        	.sym	PINT_REGS,0,138,14,32,15
 12747                        	.sym	INT_REGS,0,10,14,104,15
 12748                        	.sym	TASK_STACK,0,10,14,32,14
 12749                        	.sym	TASK,0,10,14,48,13
 12750                        	.sym	PIRQDATA,0,138,14,32,12
 12751                        	.sym	IRQDATA,0,10,14,48,12
 12752                        	.sym	HMENU,0,129,14,32
 12753                        	.sym	HWND,0,129,14,32
 12754                        	.sym	MSGDATA,0,14,14,8
 12755                        	.sym	MSGDEST,0,18,14,32
 12756                        	.sym	MSGSRC,0,18,14,32
 12757                        	.sym	MSGTYPE,0,16,14,16
 12758                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
 12759                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
 12760                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
 12761                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
 12762                        	.sym	FILE_PATH_LIST,0,138,14,32,6
 12763                        	.sym	PROCEDURE_LIST,0,138,14,32,6
  Sat Jul 10 2021  1:15                                                Page 249


 12764                        	.sym	FILE_HANDLE,0,138,14,32,11
 12765                        	.sym	FILE_BLOCK,0,10,14,552,11
 12766                        	.sym	SEMAPHORE,0,10,14,16,10
 12767                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
 12768                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
 12769                        	.sym	KRESULT,0,18,14,32
 12770                        	.sym	PKERNEL_ERROR,0,138,14,32,8
 12771                        	.sym	KERNEL_ERROR,0,10,14,32,8
 12772                        	.sym	PROCESS_STATUS,0,16,14,16
 12773                        	.sym	FILE_PATH_NAME,0,142,14,32
 12774                        	.sym	PROCESS_RESOURCE,0,129,14,32
 12775                        	.sym	PROCESS_TLS,0,129,14,32
 12776                        	.sym	PROCESS_CTX,0,129,14,32
 12777                        	.sym	USERID,0,16,14,16
 12778                        	.sym	PROCESS_ID,0,18,14,32
 12779                        	.sym	PROCESS_BANK,0,14,14,8
 12780                        	.sym	PFXQUEUE,0,138,14,32,7
 12781                        	.sym	FXQUEUE,0,10,14,80,7
 12782                        	.sym	PFXNODELIST,0,138,14,32,6
 12783                        	.sym	FXNODELIST,0,10,14,96,6
 12784                        	.sym	NodeListDeallocator,0,641,14,32
 12785                        	.sym	PFXNODE,0,138,14,32,5
 12786                        	.sym	FXNODE,0,10,14,384,5
 12787                        	.sym	PBYTEBITS,0,138,14,32,4
 12788                        	.sym	BYTEBITS,0,10,14,8,4
 12789                        	.sym	HRESULT,0,18,14,32
 12790                        	.sym	LPWCHAR,0,144,14,32
 12791                        	.sym	WCHAR,0,16,14,16
 12792                        	.sym	HCOLOR,0,129,14,32
 12793                        	.sym	HFONT,0,129,14,32
 12794                        	.sym	HDC,0,129,14,32
 12795                        	.sym	HPOINTER,0,129,14,32
 12796                        	.sym	uint32_t,0,18,14,32
 12797                        	.sym	uint8_t,0,14,14,8
 12798                        	.sym	LPBOOL,0,142,14,32
 12799                        	.sym	BOOL,0,14,14,8
 12800                        	.sym	DWORD,0,18,14,32
 12801                        	.sym	ULONG,0,18,14,32
 12802                        	.sym	LPLONG,0,135,14,32
 12803                        	.sym	LONG,0,7,14,32
 12804                        	.sym	PUINT,0,144,14,32
 12805                        	.sym	USHORT,0,16,14,16
 12806                        	.sym	UINT,0,16,14,16
 12807                        	.sym	INT,0,5,14,16
 12808                        	.sym	WORD,0,5,14,16
 12809                        	.sym	PBYTE,0,142,14,32
 12810                        	.sym	BYTE,0,14,14,8
 12811                        	.sym	IOPORT,0,142,14,32
 12812                        	.sym	PUCHAR,0,142,14,32
 12813                        	.sym	UCHAR,0,14,14,8
 12814                        	.sym	LPWCSTR,0,142,14,32
 12815                        	.sym	LPCSTR,0,142,14,32
 12816                        	.sym	LPSTR,0,142,14,32
 12817                        	.sym	LPCHAR,0,142,14,32
 12818                        	.sym	CHAR,0,14,14,8
 12819                        	.sym	LPVOID,0,129,14,32
 12820                        	.sym	VOID,0,1,14,32
 12821                        	.sym	~~memset,~~memset,1089,18,32
  Sat Jul 10 2021  1:15                                                Page 250


 12822                        	.sym	~~memcpy,~~memcpy,1089,18,32
 12823                        	.sym	Boolean_T,0,5,14,16
 12824                        	.sym	ldiv_t,0,10,14,64,2
 12825                        	.sym	div_t,0,10,14,32,1
 12826                        	.sym	wctype_t,0,16,14,16
 12827                        	.sym	wint_t,0,16,14,16
 12828                        	.sym	wchar_t,0,14,14,8
 12829                        	.sym	ptrdiff_t,0,7,14,32
 12830                        	.sym	size_t,0,16,14,16
 12831                        	end


      Lines assembled: 12831
      Errors: 0
