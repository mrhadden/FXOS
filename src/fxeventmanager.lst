  Mon Sep 27 2021  9:39                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 1.00- Aug 10 2021    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",0
     7                        ;
     8                        ;#include "fxos.h"
     9                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
    10                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    11                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    12                        	.line	88
    13                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    14                        	.stag	fake1_,32,1
    15                        	.member	quot,0,5,8,16
    16                        	.member	rem,16,5,8,16
    17                        	.eos
    18                        	.stag	fake2_,64,2
    19                        	.member	quot,0,7,8,32
    20                        	.member	rem,32,7,8,32
    21                        	.eos
    22                        	.stag	int_sqrt,32,3
    23                        	.member	sqrt,0,16,8,16
    24                        	.member	frac,16,16,8,16
    25                        	.eos
    26                        	.line	205
    27                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",4
    28                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    29                        	.line	134
    30                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",5
    31                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    32                        	.line	103
    33                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",6
    34                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
    35                        	.stag	_fx_bytebits,8,4
    36                        	.member	b7,0,14,17,1
    37                        	.member	b6,1,14,17,1
    38                        	.member	b5,2,14,17,1
    39                        	.member	b4,3,14,17,1
    40                        	.member	b3,4,14,17,1
    41                        	.member	b2,5,14,17,1
  Mon Sep 27 2021  9:39                                                Page 2


    42                        	.member	b1,6,14,17,1
    43                        	.member	b0,7,14,17,1
    44                        	.eos
    45                        	.stag	_fx_node,384,5
    46                        	.member	type,0,14,8,8
    47                        	.member	Reserved0,8,14,8,8
    48                        	.member	data,16,129,8,32
    49                        	.member	last,48,138,8,32,5
    50                        	.member	next,80,138,8,32,5
    51                        	.member	name,112,110,8,0,32
    52                        	.member	Reserved1,368,16,8,16
    53                        	.eos
    54                        	.stag	_fx_nodelist,96,6
    55                        	.member	listhead,0,138,8,32,5
    56                        	.member	listData,32,129,8,32
    57                        	.member	deallocator,64,641,8,32
    58                        	.eos
    59                        	.stag	_fx_queue,80,7
    60                        	.member	count,0,5,8,16
    61                        	.member	front,16,138,8,32,5
    62                        	.member	rear,48,138,8,32,5
    63                        	.eos
    64                        	.stag	fake8_,32,8
    65                        	.member	subsystem,0,14,8,8
    66                        	.member	level,8,14,8,8
    67                        	.member	error,16,16,8,16
    68                        	.eos
    69                        	.stag	_fx_process_signal,16,9
    70                        	.member	cbSize,0,16,8,16
    71                        	.eos
    72                        	.stag	_fx_semaphore,16,10
    73                        	.member	reserved,0,5,8,16
    74                        	.eos
    75                        	.stag	_fx_fileBlock,552,11
    76                        	.member	openCount,0,16,8,16
    77                        	.member	lockCount,16,16,8,16
    78                        	.member	dirty,32,14,8,8
    79                        	.member	fileBuffer,40,110,8,0,64
    80                        	.eos
    81                        	.stag	_fx_irq_data,48,12
    82                        	.member	line,0,5,8,16
    83                        	.member	keycode,16,142,8,32
    84                        	.eos
    85                        	.stag	_task,48,13
    86                        	.member	SPL,0,14,8,8
    87                        	.member	SPH,8,14,8,8
    88                        	.member	pstack,16,142,8,32
    89                        	.eos
    90                        	.stag	_task_stack,32,14
    91                        	.member	SS,0,142,8,32
    92                        	.eos
    93                        	.stag	int_regs,104,15
    94                        	.member	PB,0,14,8,8
    95                        	.member	PH,8,14,8,8
    96                        	.member	PL,16,14,8,8
    97                        	.member	PP,24,14,8,8
    98                        	.member	DB,32,14,8,8
    99                        	.member	DH,40,14,8,8
  Mon Sep 27 2021  9:39                                                Page 3


   100                        	.member	DL,48,14,8,8
   101                        	.member	AH,56,14,8,8
   102                        	.member	AL,64,14,8,8
   103                        	.member	XH,72,14,8,8
   104                        	.member	XL,80,14,8,8
   105                        	.member	YH,88,14,8,8
   106                        	.member	YL,96,14,8,8
   107                        	.eos
   108                        	.stag	_fx_eventMessage,312,16
   109                        	.member	src,0,18,8,32
   110                        	.member	dest,32,18,8,32
   111                        	.member	type,64,16,8,16
   112                        	.member	hwnd,80,129,8,32
   113                        	.member	pheap,112,129,8,32
   114                        	.member	msgTime,144,18,8,32
   115                        	.member	data,176,110,8,0,16
   116                        	.member	attr,304,14,8,8
   117                        	.eos
   118                        	.stag	_fx_cmdMessage,312,17
   119                        	.member	src,0,18,8,32
   120                        	.member	dest,32,18,8,32
   121                        	.member	type,64,16,8,16
   122                        	.member	hwnd,80,129,8,32
   123                        	.member	pheap,112,129,8,32
   124                        	.member	msgTime,144,18,8,32
   125                        	.member	cmdCId,176,16,8,16
   126                        	.member	cmdMId,192,16,8,16
   127                        	.member	parameter1,208,18,8,32
   128                        	.member	parameter2,240,18,8,32
   129                        	.member	parameter3,272,18,8,32
   130                        	.member	attr,304,14,8,8
   131                        	.eos
   132                        	.stag	_fx_console_ctl,448,18
   133                        	.member	maxCols,0,5,8,16
   134                        	.member	maxRows,16,5,8,16
   135                        	.member	curX,32,5,8,16
   136                        	.member	curY,48,5,8,16
   137                        	.member	fgColor,64,5,8,16
   138                        	.member	bgColor,80,5,8,16
   139                        	.member	mode,96,14,8,8
   140                        	.member	kbBuffer,104,101,8,0,16
   141                        	.member	screenBuffer,360,142,8,32
   142                        	.member	desktopMode,392,14,8,8
   143                        	.member	lastMouseButton,400,5,8,16
   144                        	.member	lastMouseX,416,5,8,16
   145                        	.member	lastMouseY,432,5,8,16
   146                        	.eos
   147                        	.stag	_fx_desktop_ctl,392,19
   148                        	.member	desktopMode,0,14,8,8
   149                        	.member	cursorCtl,8,5,8,16
   150                        	.member	cursorState,24,5,8,16
   151                        	.member	backgroundColor,40,5,8,16
   152                        	.member	foregroundColor,56,5,8,16
   153                        	.member	menuMode,72,5,8,16
   154                        	.member	lastMouseButton,88,5,8,16
   155                        	.member	lastMouseX,104,5,8,16
   156                        	.member	lastMouseY,120,5,8,16
   157                        	.member	currentDiskName,136,142,8,32
  Mon Sep 27 2021  9:39                                                Page 4


   158                        	.member	diskNodes,168,129,8,32
   159                        	.member	titleNodes,200,129,8,32
   160                        	.member	menuNodes,232,129,8,32
   161                        	.member	iconNodes,264,129,8,32
   162                        	.member	windowNodes,296,129,8,32
   163                        	.member	fontNodes,328,129,8,32
   164                        	.member	wndProc,360,138,8,32,6
   165                        	.eos
   166                        	.stag	_fx_process,800,20
   167                        	.member	cbSize,0,5,8,16
   168                        	.member	procId,16,18,8,32
   169                        	.member	parentId,48,18,8,32
   170                        	.member	ctx,80,129,8,32
   171                        	.member	userId,112,16,8,16
   172                        	.member	status,128,16,8,16
   173                        	.member	foregroundActive,144,14,8,8
   174                        	.member	tls,152,1121,8,32,8
   175                        	.member	commandLine,408,142,8,32
   176                        	.member	semaphores,440,138,8,32,6
   177                        	.member	fileHandles,472,138,8,32,6
   178                        	.member	pathList,504,138,8,32,6
   179                        	.member	resources,536,138,8,32,6
   180                        	.member	timerAware,568,14,8,8
   181                        	.member	timerTicks,576,112,8,0,2
   182                        	.member	timerTickCount,608,112,8,0,2
   183                        	.member	kernelError,640,10,8,32,8
   184                        	.member	consoleCtl,672,138,8,32,18
   185                        	.member	desktopCtl,704,138,8,32,19
   186                        	.member	execProc,736,641,8,32
   187                        	.member	startupArgs,768,129,8,32
   188                        	.eos
   189                        	.stag	_fxProcessMessage,112,21
   190                        	.member	src,0,18,8,32
   191                        	.member	dest,32,18,8,32
   192                        	.member	type,64,16,8,16
   193                        	.member	processInfo,80,138,8,32,20
   194                        	.eos
   195                        	.stag	_k_key_state,112,22
   196                        	.member	scanCode,0,14,8,8
   197                        	.member	isShifted,8,14,8,8
   198                        	.member	isAlt,16,14,8,8
   199                        	.member	isExtended,24,14,8,8
   200                        	.member	isCapsLock,32,14,8,8
   201                        	.member	isNumLock,40,14,8,8
   202                        	.member	isScrollLock,48,14,8,8
   203                        	.member	keyChar,56,16,8,16
   204                        	.member	scanTime,72,18,8,32
   205                        	.member	ledStatus,104,14,8,8
   206                        	.eos
   207                        	.stag	_fx_property,384,23
   208                        	.member	name,0,110,8,0,16
   209                        	.member	value,128,110,8,0,32
   210                        	.eos
   211                        	.utag	_24bitPointer,32,24
   212                        	.member	address,0,142,11,32
   213                        	.member	bytes,0,110,11,0,4
   214                        	.eos
   215                        	.stag	_PointStruct,32,25
  Mon Sep 27 2021  9:39                                                Page 5


   216                        	.member	x,0,5,8,16
   217                        	.member	y,16,5,8,16
   218                        	.eos
   219                        	.stag	_RectStruct,112,26
   220                        	.member	x,0,5,8,16
   221                        	.member	y,16,5,8,16
   222                        	.member	z,32,18,8,32
   223                        	.member	width,64,5,8,16
   224                        	.member	height,80,5,8,16
   225                        	.member	attr,96,5,8,16
   226                        	.eos
   227                        	.stag	fake27_,96,27
   228                        	.member	name,0,142,8,32
   229                        	.member	topLeft,32,10,8,32,25
   230                        	.member	bottomRight,64,10,8,32,25
   231                        	.eos
   232                        	.stag	fake28_,112,28
   233                        	.member	x,0,5,8,16
   234                        	.member	y,16,5,8,16
   235                        	.member	z,32,5,8,16
   236                        	.member	width,48,5,8,16
   237                        	.member	height,64,5,8,16
   238                        	.member	data,80,18,8,32
   239                        	.eos
   240                        	.stag	_k_WindowClass,272,29
   241                        	.member	cbSize,0,16,8,16
   242                        	.member	style,16,16,8,16
   243                        	.member	styleEx,32,16,8,16
   244                        	.member	pWndProc,48,654,8,32
   245                        	.member	hInstance,80,129,8,32
   246                        	.member	hIcon,112,129,8,32
   247                        	.member	hCursor,144,129,8,32
   248                        	.member	hbrBackground,176,129,8,32
   249                        	.member	lpszMenuName,208,142,8,32
   250                        	.member	lpszClassName,240,142,8,32
   251                        	.eos
   252                        	.stag	_ClickableRect,152,30
   253                        	.member	area,0,10,8,112,26
   254                        	.member	z,112,18,8,32
   255                        	.member	enabled,144,14,8,8
   256                        	.eos
   257                        	.stag	_NCClickableRect,136,31
   258                        	.member	area,0,10,8,112,26
   259                        	.member	msgType,112,16,8,16
   260                        	.member	enabled,128,14,8,8
   261                        	.eos
   262                        	.stag	_DragData,216,32
   263                        	.member	area,0,10,8,112,26
   264                        	.member	xoffset,112,5,8,16
   265                        	.member	yoffset,128,5,8,16
   266                        	.member	msgType,144,16,8,16
   267                        	.member	ncAction,160,16,8,16
   268                        	.member	isDrag,176,14,8,8
   269                        	.member	isResize,184,14,8,8
   270                        	.member	canDrag,192,14,8,8
   271                        	.member	canDrop,200,14,8,8
   272                        	.member	didDrag,208,14,8,8
   273                        	.eos
  Mon Sep 27 2021  9:39                                                Page 6


   274                        	.stag	_k_WindowStruct,3904,33
   275                        	.member	cbSize,0,16,8,16
   276                        	.member	style,16,18,8,32
   277                        	.member	styleEx,48,18,8,32
   278                        	.member	win_id,80,5,8,16
   279                        	.member	win_x,96,5,8,16
   280                        	.member	win_y,112,5,8,16
   281                        	.member	win_width,128,5,8,16
   282                        	.member	win_height,144,5,8,16
   283                        	.member	win_xoffset,160,5,8,16
   284                        	.member	win_yoffset,176,5,8,16
   285                        	.member	win_cxoffset,192,5,8,16
   286                        	.member	win_cyoffset,208,5,8,16
   287                        	.member	wndRect,224,10,8,112,26
   288                        	.member	clientRect,336,10,8,112,26
   289                        	.member	nonclientGadgets,448,106,8,0,31,16
   290                        	.member	clickable,2624,129,8,32
   291                        	.member	win_title,2656,110,8,0,32
   292                        	.member	Reserved0,2912,16,8,16
   293                        	.member	win_class,2928,110,8,0,16
   294                        	.member	win_class_name,3056,110,8,0,32
   295                        	.member	nBitmapLayer,3312,16,8,16
   296                        	.member	bgRegion,3328,129,8,32
   297                        	.member	procid,3360,18,8,32
   298                        	.member	pWndClass,3392,138,8,32,29
   299                        	.member	pParentWindow,3424,129,8,32
   300                        	.member	hMenu,3456,129,8,32
   301                        	.member	hPointer,3488,129,8,32
   302                        	.member	hBackground,3520,129,8,32
   303                        	.member	pChildWindows,3552,138,8,32,6
   304                        	.member	pChildHitList,3584,138,8,32,6
   305                        	.member	isVisible,3616,14,8,8
   306                        	.member	windowData,3624,129,8,32
   307                        	.member	clientData,3656,1121,8,32,6
   308                        	.member	isClosed,3848,14,8,8
   309                        	.member	isClosing,3856,14,8,8
   310                        	.member	isDesktop,3864,14,8,8
   311                        	.member	clickableNode,3872,138,8,32,5
   312                        	.eos
   313                        	.stag	_k_WindowStructEx,3880,34
   314                        	.member	cbSize,0,16,8,16
   315                        	.member	style,16,18,8,32
   316                        	.member	styleEx,48,18,8,32
   317                        	.member	win_id,80,5,8,16
   318                        	.member	win_x,96,5,8,16
   319                        	.member	win_y,112,5,8,16
   320                        	.member	win_width,128,5,8,16
   321                        	.member	win_height,144,5,8,16
   322                        	.member	win_xoffset,160,5,8,16
   323                        	.member	win_yoffset,176,5,8,16
   324                        	.member	win_cxoffset,192,5,8,16
   325                        	.member	win_cyoffset,208,5,8,16
   326                        	.member	wndRect,224,10,8,112,26
   327                        	.member	clientRect,336,10,8,112,26
   328                        	.member	nonclientGadgets,448,106,8,0,31,16
   329                        	.member	clickable,2624,129,8,32
   330                        	.member	win_title,2656,110,8,0,32
   331                        	.member	Reserved0,2912,16,8,16
  Mon Sep 27 2021  9:39                                                Page 7


   332                        	.member	win_class,2928,110,8,0,16
   333                        	.member	nBitmapLayer,3056,16,8,16
   334                        	.member	procid,3072,18,8,32
   335                        	.member	pWndClass,3104,138,8,32,29
   336                        	.member	pParentWindow,3136,129,8,32
   337                        	.member	hMenu,3168,129,8,32
   338                        	.member	hPointer,3200,129,8,32
   339                        	.member	hBackground,3232,129,8,32
   340                        	.member	pChildWindows,3264,138,8,32,6
   341                        	.member	pChildHitList,3296,138,8,32,6
   342                        	.member	isVisible,3328,14,8,8
   343                        	.member	windowData,3336,129,8,32
   344                        	.member	clientData,3368,1121,8,32,4
   345                        	.member	isClosed,3496,14,8,8
   346                        	.member	hWnd,3504,129,8,32
   347                        	.member	localRect,3536,10,8,112,26
   348                        	.member	globalRect,3648,10,8,112,26
   349                        	.member	clientOffsetRect,3760,10,8,112,26
   350                        	.member	isDesktop,3872,14,8,8
   351                        	.eos
   352                        	.stag	_FontMetric,32,35
   353                        	.member	width,0,5,8,16
   354                        	.member	height,16,5,8,16
   355                        	.eos
   356                        	.stag	_MenuStruct,280,36
   357                        	.member	cx,0,5,8,16
   358                        	.member	cy,16,5,8,16
   359                        	.member	width,32,5,8,16
   360                        	.member	height,48,5,8,16
   361                        	.member	fcolor,64,14,8,8
   362                        	.member	bcolor,72,14,8,8
   363                        	.member	chromeLeft,80,14,8,8
   364                        	.member	chromeRight1,88,14,8,8
   365                        	.member	chromeRight2,96,14,8,8
   366                        	.member	hFont,104,129,8,32
   367                        	.member	itemId,136,16,8,16
   368                        	.member	pCaption,152,142,8,32
   369                        	.member	subMenus,184,138,8,32,6
   370                        	.member	pBackground,216,129,8,32
   371                        	.member	hWndOwner,248,129,8,32
   372                        	.eos
   373                        	.stag	fake37_,160,37
   374                        	.member	menuId,0,16,8,16
   375                        	.member	caption,16,142,8,32
   376                        	.member	rect,48,10,8,112,26
   377                        	.eos
   378                        	.stag	fake38_,5152,38
   379                        	.member	pParent,0,138,8,32,33
   380                        	.member	rect,32,10,8,112,26
   381                        	.member	captions,144,1134,8,32,24
   382                        	.member	chrome,912,110,8,0,24
   383                        	.member	ids,1104,112,8,0,24
   384                        	.member	clickable,1488,106,8,0,30,24
   385                        	.member	selected,5136,16,8,16
   386                        	.eos
   387                        	.stag	_fx_button_t,96,39
   388                        	.member	pCaption,0,142,8,32
   389                        	.member	cCaption,32,16,8,16
  Mon Sep 27 2021  9:39                                                Page 8


   390                        	.member	data,48,129,8,32
   391                        	.member	captionPixelWidth,80,16,8,16
   392                        	.eos
   393                        	.stag	_fx_scrollbar_t,240,40
   394                        	.member	min,0,16,8,16
   395                        	.member	max,16,16,8,16
   396                        	.member	increment,32,16,8,16
   397                        	.member	stopsize,48,16,8,16
   398                        	.member	location,64,5,8,16
   399                        	.member	state,80,5,8,16
   400                        	.member	rectThumb,96,10,8,112,26
   401                        	.member	data,208,129,8,32
   402                        	.eos
   403                        	.stag	_fx_listbox_t,240,41
   404                        	.member	pos,0,5,8,16
   405                        	.member	selected,16,16,8,16
   406                        	.member	offsetX,32,5,8,16
   407                        	.member	offsetY,48,5,8,16
   408                        	.member	inc,64,5,8,16
   409                        	.member	direction,80,5,8,16
   410                        	.member	top,96,5,8,16
   411                        	.member	bottom,112,5,8,16
   412                        	.member	indexTop,128,5,8,16
   413                        	.member	indexBottom,144,5,8,16
   414                        	.member	maxItems,160,16,8,16
   415                        	.member	fontSet,176,142,8,32
   416                        	.member	data,208,129,8,32
   417                        	.eos
   418                        	.stag	_fx_textbox_t,144,42
   419                        	.member	pos,0,5,8,16
   420                        	.member	selected,16,16,8,16
   421                        	.member	offsetX,32,5,8,16
   422                        	.member	offsetY,48,5,8,16
   423                        	.member	isShifted,64,14,8,8
   424                        	.member	cursorState,72,14,8,8
   425                        	.member	fontSet,80,142,8,32
   426                        	.member	data,112,129,8,32
   427                        	.eos
   428                        	.stag	_fx_msgbox_t,144,43
   429                        	.member	pos,0,5,8,16
   430                        	.member	selected,16,16,8,16
   431                        	.member	offsetX,32,5,8,16
   432                        	.member	offsetY,48,5,8,16
   433                        	.member	isShifted,64,14,8,8
   434                        	.member	cursorState,72,14,8,8
   435                        	.member	fontSet,80,142,8,32
   436                        	.member	data,112,129,8,32
   437                        	.eos
   438                        	.stag	_fx_menuAnchor_t,272,44
   439                        	.member	pCaption,0,142,8,32
   440                        	.member	renderLayoutX,32,16,8,16
   441                        	.member	renderLayoutY,48,16,8,16
   442                        	.member	captionPixelWidth,64,16,8,16
   443                        	.member	data,80,129,8,32
   444                        	.member	droppedWindow,112,138,8,32,33
   445                        	.member	bytes,144,110,8,0,16
   446                        	.eos
   447                        	.stag	_SubMenuStruct,64,45
  Mon Sep 27 2021  9:39                                                Page 9


   448                        	.member	caption,0,142,8,32
   449                        	.member	action,32,641,8,32
   450                        	.eos
   451                        	.stag	_SubMenuListStruct,40,46
   452                        	.member	cMenus,0,14,8,8
   453                        	.member	psubmenus,8,9354,8,32,45
   454                        	.eos
   455                        	.stag	_fx_ComBuffer,2080,47
   456                        	.member	cbSize,0,16,8,16
   457                        	.member	cbBuffer,16,16,8,16
   458                        	.member	buffer,32,110,8,0,256
   459                        	.eos
   460                        	.stag	_fx_resource_header,72,48
   461                        	.member	magic,0,110,8,0,4
   462                        	.member	major,32,14,8,8
   463                        	.member	minor,40,14,8,8
   464                        	.member	type,48,14,8,8
   465                        	.member	reserved,56,14,8,8
   466                        	.member	resheaderSize,64,14,8,8
   467                        	.eos
   468                        	.stag	_fx_resource_header_font,144,49
   469                        	.member	title,0,110,8,0,16
   470                        	.member	height,128,14,8,8
   471                        	.member	width,136,14,8,8
   472                        	.eos
   473                        	.stag	_fx_resource_string,32,50
   474                        	.member	locale,0,110,8,0,2
   475                        	.member	entries,16,16,8,16
   476                        	.eos
   477                        	.stag	_fx_resource_string_entry,40,51
   478                        	.member	index,0,16,8,16
   479                        	.member	length,16,16,8,16
   480                        	.member	data,32,14,8,8
   481                        	.eos
   482                        	.line	1064
   483                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",8
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstringtable.h",0
   485                        	.line	90
   486                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",9
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   489                        	.line	1064
   490                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",5
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",0
   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   493                        	.line	1064
   494                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",11
   495                        	.line	72
   496                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Mon Sep 27 2021  9:39                                                Page 10


                    space\FXOS-Beta\src\fxc256u.h",6
   497                        	.line	1963
   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",16
   499                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   500                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   501                        	.line	30
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",5
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   504                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   505                        	.line	1064
   506                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",11
   507                        	.line	118
   508                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",6
   509                        	.stag	_fx_api_call_table,8192,52
   510                        	.member	call_table,0,1121,8,32,256
   511                        	.eos
   512                        	.stag	_fx_zero_page_irq_data,32,53
   513                        	.member	data,0,110,8,0,4
   514                        	.eos
   515                        	.stag	_fx_zero_page,720,54
   516                        	.member	fxos_mouse_byte_0,0,14,8,8
   517                        	.member	fxos_mouse_byte_1,8,14,8,8
   518                        	.member	fxos_mouse_byte_2,16,14,8,8
   519                        	.member	fxos_mouse_byte_t,24,14,8,8
   520                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   521                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   522                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   523                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   524                        	.member	fxos_key_byte_0,64,14,8,8
   525                        	.member	fxos_key_byte_1,72,14,8,8
   526                        	.member	fxos_key_byte_2,80,14,8,8
   527                        	.member	fxos_mouse_ctl,88,14,8,8
   528                        	.member	fxos_mouse_index,96,14,8,8
   529                        	.member	fxos_mouse_status,104,14,8,8
   530                        	.member	Endianness,112,16,8,16
   531                        	.member	VersionMajor,128,16,8,16
   532                        	.member	VersionMinor,144,16,8,16
   533                        	.member	VersionRelease,160,16,8,16
   534                        	.member	topMemory,176,18,8,32
   535                        	.member	bottomMemory,208,18,8,32
   536                        	.member	availableMemory,240,18,8,32
   537                        	.member	availableMemoryK,272,18,8,32
   538                        	.member	availableHeapMemory,304,18,8,32
   539                        	.member	availableHeapMemoryK,336,18,8,32
   540                        	.member	fxos_console_row,368,16,8,16
   541                        	.member	fxos_console_col,384,16,8,16
   542                        	.member	executive,400,129,8,32
   543                        	.member	eventmanager,432,129,8,32
   544                        	.member	devicemanager,464,129,8,32
   545                        	.member	windowmanager,496,129,8,32
  Mon Sep 27 2021  9:39                                                Page 11


   546                        	.member	fxos_kernel_api,528,138,8,32,52
   547                        	.member	fxos_dos_api,560,138,8,32,52
   548                        	.member	fxos_gfx_api,592,138,8,32,52
   549                        	.member	fxos_gui_api,624,138,8,32,52
   550                        	.member	fxos_con_api,656,138,8,32,52
   551                        	.member	fxos_reserved_2_api,688,138,8,32,52
   552                        	.eos
   553                        	.stag	_fx_environment,96,55
   554                        	.member	variables,0,142,8,32
   555                        	.member	reserved1,32,5,8,16
   556                        	.member	reserved2,48,5,8,16
   557                        	.member	reserved3,64,5,8,16
   558                        	.member	reserved4,80,5,8,16
   559                        	.eos
   560                        	.stag	_debug_byte_bits,8,56
   561                        	.member	bit7,0,14,17,1
   562                        	.member	bit6,1,14,17,1
   563                        	.member	bit5,2,14,17,1
   564                        	.member	bit4,3,14,17,1
   565                        	.member	bit3,4,14,17,1
   566                        	.member	bit2,5,14,17,1
   567                        	.member	bit1,6,14,17,1
   568                        	.member	bit0,7,14,17,1
   569                        	.eos
   570                        	.stag	_k_segmentheader,160,57
   571                        	.member	version_major,0,14,8,8
   572                        	.member	version_minor,8,14,8,8
   573                        	.member	length,16,5,8,16
   574                        	.member	segment_start_addr,32,7,8,32
   575                        	.member	segment_end_addr,64,7,8,32
   576                        	.member	segment_size,96,7,8,32
   577                        	.member	main_entry_addr,128,7,8,32
   578                        	.eos
   579                        	.stag	_fx_device_driver,776,58
   580                        	.member	name,0,110,8,0,32
   581                        	.member	version,256,110,8,0,16
   582                        	.member	hmajor,384,110,8,0,8
   583                        	.member	hminor,448,110,8,0,8
   584                        	.member	type,512,14,8,8
   585                        	.member	designation,520,110,8,0,6
   586                        	.member	irq_ctl,568,16,8,16
   587                        	.member	f_driver_irq,584,129,8,32
   588                        	.member	driver_context,616,129,8,32
   589                        	.member	f_driver_load,648,129,8,32
   590                        	.member	f_driver_read,680,129,8,32
   591                        	.member	f_driver_write,712,129,8,32
   592                        	.member	f_driver_unload,744,129,8,32
   593                        	.eos
   594                        	.stag	_fx_block_device_driver,808,59
   595                        	.member	name,0,110,8,0,32
   596                        	.member	version,256,110,8,0,16
   597                        	.member	hmajor,384,110,8,0,8
   598                        	.member	hminor,448,110,8,0,8
   599                        	.member	type,512,14,8,8
   600                        	.member	designation,520,110,8,0,6
   601                        	.member	irq_ctl,568,16,8,16
   602                        	.member	f_driver_irq,584,129,8,32
   603                        	.member	driver_context,616,129,8,32
  Mon Sep 27 2021  9:39                                                Page 12


   604                        	.member	f_driver_load,648,129,8,32
   605                        	.member	f_driver_read,680,129,8,32
   606                        	.member	f_driver_write,712,129,8,32
   607                        	.member	f_driver_unload,744,129,8,32
   608                        	.member	f_driver_command,776,129,8,32
   609                        	.eos
   610                        	.stag	_k_irq_chain,128,60
   611                        	.member	handlers,0,5217,8,32,4
   612                        	.eos
   613                        	.line	475
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",22
   615                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   616                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   617                        	.line	134
   618                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",5
   619                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   620                        	.line	205
   621                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",6
   622                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   623                        	.line	1064
   624                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",7
   625                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   626                        	.line	1963
   627                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",12
   628                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   629                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   630                        	.line	205
   631                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",5
   632                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   633                        	.line	134
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",6
   635                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   636                        	.line	1064
   637                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",7
   638                        	.stag	_fx_string,64,61
   639                        	.member	size,0,16,8,16
   640                        	.member	pos,16,5,8,16
   641                        	.member	buffer,32,142,8,32
   642                        	.eos
   643                        	.line	141
   644                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Mon Sep 27 2021  9:39                                                Page 13


                    space\FXOS-Beta\src\fxconsole.h",17
   645                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   646                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   647                        	.line	30
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",5
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   650                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   651                        	.line	1064
   652                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",5
   653                        	.stag	_fxos_executive_vtable,128,62
   654                        	.member	Init,0,8833,8,32
   655                        	.member	Configure,32,656,8,32
   656                        	.member	Query,64,656,8,32
   657                        	.member	Uninit,96,641,8,32
   658                        	.eos
   659                        	.line	86
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",6
   661                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   662                        	.line	118
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",7
   664                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   665                        	.line	208
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",8
   667                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
   668                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   669                        	.line	30
   670                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",5
   671                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
   672                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   673                        	.line	30
   674                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",5
   675                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   676                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_build_parameters.h",0
   677                        	.line	35
   678                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",8
   679                        	.stag	UMM_HEAP_INFO_t,256,63
   680                        	.member	totalEntries,0,18,8,32
   681                        	.member	usedEntries,32,18,8,32
  Mon Sep 27 2021  9:39                                                Page 14


   682                        	.member	freeEntries,64,18,8,32
   683                        	.member	totalBlocks,96,18,8,32
   684                        	.member	usedBlocks,128,18,8,32
   685                        	.member	freeBlocks,160,18,8,32
   686                        	.member	maxFreeContiguousBlocks,192,18,8,32
   687                        	.member	blockSize,224,18,8,32
   688                        	.eos
   689                        	.line	199
   690                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",6
   691                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
   692                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   693                        	.line	1064
   694                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",11
   695                        	.line	24
   696                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",7
   697                        	.stag	_fx_memory_map,2072,64
   698                        	.member	availableMemory,0,18,8,32
   699                        	.member	valid_segments,32,110,8,0,255
   700                        	.eos
   701                        	.stag	_fx_ipc_port,144,65
   702                        	.member	id,0,18,8,32
   703                        	.member	type,32,14,8,8
   704                        	.member	name,40,138,8,32,61
   705                        	.member	time,72,18,8,32
   706                        	.member	queue,104,138,8,32,7
   707                        	.member	reserved_1,136,14,8,8
   708                        	.eos
   709                        	.stag	_k_mem_alloc_header,80,66
   710                        	.member	user,0,14,8,8
   711                        	.member	attr,8,14,8,8
   712                        	.member	size,16,18,8,32
   713                        	.member	virtual,48,129,8,32
   714                        	.eos
   715                        	.line	129
   716                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",6
   717                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   718                        	.line	572
   719                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",7
   720                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
   721                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",0
   722                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   723                        	.line	1064
   724                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",6
   725                        	.line	74
   726                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",5
  Mon Sep 27 2021  9:39                                                Page 15


   727                        	.stag	_click_detected,64,67
   728                        	.member	window,0,138,8,32,33
   729                        	.member	handler,32,641,8,32
   730                        	.eos
   731                        	.stag	_current_palette_map,400,68
   732                        	.member	CUR_DESKTOP,0,5,8,16
   733                        	.member	CUR_BACKGROUND,16,5,8,16
   734                        	.member	CUR_FONT,32,5,8,16
   735                        	.member	CUR_SELECTED_FONT,48,5,8,16
   736                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   737                        	.member	CUR_WINDOWFRAME,80,5,8,16
   738                        	.member	CUR_WINDOWBORDER,96,5,8,16
   739                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   740                        	.member	CUR_MENU,128,5,8,16
   741                        	.member	CUR_GADGET,144,5,8,16
   742                        	.member	CUR_COLOR,160,101,8,0,15
   743                        	.eos
   744                        	.line	370
   745                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",8
   746                        	.stag	_fxos_winman_vtable,160,69
   747                        	.member	Events,0,641,8,32
   748                        	.member	ConfigureWindowManager,32,656,8,32
   749                        	.member	ProcessWindowEvent,64,8833,8,32
   750                        	.member	QueryWindowManager,96,656,8,32
   751                        	.member	DoWndProcs,128,641,8,32
   752                        	.eos
   753                        	.stag	fake70_,64,70
   754                        	.member	type,0,16,8,16
   755                        	.member	size,16,16,8,16
   756                        	.member	desktopAction,32,129,8,32
   757                        	.eos
   758                        	.stag	fake71_,96,71
   759                        	.member	type,0,16,8,16
   760                        	.member	caption,16,138,8,32,61
   761                        	.member	buttonType,48,16,8,16
   762                        	.member	x,64,5,8,16
   763                        	.member	y,80,5,8,16
   764                        	.eos
   765                        	.stag	_childMessage_t,64,72
   766                        	.member	msgType,0,16,8,16
   767                        	.member	msgData,16,129,8,32
   768                        	.member	dataSize,48,16,8,16
   769                        	.eos
   770                        	.line	594
   771                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",9
   772                        	.stag	_fx_main_loopvars,16,73
   773                        	.member	dummy,0,5,8,16
   774                        	.eos
   775                        	.stag	_fxMouseMessageData,64,74
   776                        	.member	button1,0,14,8,8
   777                        	.member	button2,8,14,8,8
   778                        	.member	button3,16,14,8,8
   779                        	.member	button4,24,14,8,8
   780                        	.member	x,32,16,8,16
   781                        	.member	y,48,16,8,16
   782                        	.eos
  Mon Sep 27 2021  9:39                                                Page 16


   783                        	.utag	marshalled_data,32,75
   784                        	.member	byteValue,0,14,11,8
   785                        	.member	verbValue,0,110,11,0,2
   786                        	.member	intValue,0,16,11,16
   787                        	.member	longValue,0,18,11,32
   788                        	.member	pointerValue,0,129,11,32
   789                        	.eos
   790                        	.stag	_fx_eventProcess,64,76
   791                        	.member	process,0,138,8,32,20
   792                        	.member	eventProc,32,641,8,32
   793                        	.eos
   794                        	.stag	_mouse_msg_state,184,77
   795                        	.member	lastEvent,0,18,8,32
   796                        	.member	buttonLeftDown,32,14,8,8
   797                        	.member	lastLeftDown,40,18,8,32
   798                        	.member	buttonRightDown,72,14,8,8
   799                        	.member	lastRightDown,80,18,8,32
   800                        	.member	buttonMiddleDown,112,14,8,8
   801                        	.member	lastMiddleDown,120,18,8,32
   802                        	.member	lastX,152,16,8,16
   803                        	.member	lastY,168,16,8,16
   804                        	.eos
   805                        	.stag	_fxos_eventmanager_vtable,192,78
   806                        	.member	EventQueue,0,138,8,32,7
   807                        	.member	Init,32,8833,8,32
   808                        	.member	Run,64,656,8,32
   809                        	.member	Configure,96,656,8,32
   810                        	.member	Query,128,656,8,32
   811                        	.member	Uninit,160,641,8,32
   812                        	.eos
   813                        	.stag	_k_clipboard_data,168,79
   814                        	.member	type,0,14,8,8
   815                        	.member	readable,8,110,8,0,16
   816                        	.member	data,136,129,8,32
   817                        	.eos
   818                        	.line	572
   819                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",18
   820                        	.stag	_fx_spinner_ctx,48,80
   821                        	.member	index,0,5,8,16
   822                        	.member	spinner,16,142,8,32
   823                        	.eos
   824                        	.stag	_fx_console_ctx,1144,81
   825                        	.member	lineBufferIndex,0,5,8,16
   826                        	.member	lineBuffer,16,110,8,0,128
   827                        	.member	isShifted,1040,14,8,8
   828                        	.member	userData,1048,129,8,32
   829                        	.member	screenBuffer,1080,129,8,32
   830                        	.member	Reserved1,1112,129,8,32
   831                        	.eos
   832                        	.stag	_token,64,82
   833                        	.member	type,0,5,8,16
   834                        	.member	depth,16,16,8,16
   835                        	.member	text,32,142,8,32
   836                        	.eos
   837                        	.stag	_command_args,64,83
   838                        	.member	proc,0,656,8,32
   839                        	.member	tokens,32,138,8,32,5
  Mon Sep 27 2021  9:39                                                Page 17


   840                        	.eos
   841                        	.line	208
   842                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",23
   843                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   844                        	.line	141
   845                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",24
   846                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   847                        	.line	118
   848                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",25
   849                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   850                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ffconf.h",0
   851                        	.line	298
   852                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",29
   853                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   854                        	.line	1064
   855                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",30
   856                        	.stag	fake84_,4504,84
   857                        	.member	fs_type,0,14,8,8
   858                        	.member	pdrv,8,14,8,8
   859                        	.member	n_fats,16,14,8,8
   860                        	.member	wflag,24,14,8,8
   861                        	.member	fsi_flag,32,14,8,8
   862                        	.member	id,40,5,8,16
   863                        	.member	n_rootdir,56,5,8,16
   864                        	.member	csize,72,5,8,16
   865                        	.member	lfnbuf,88,144,8,32
   866                        	.member	last_clst,120,18,8,32
   867                        	.member	free_clst,152,18,8,32
   868                        	.member	n_fatent,184,18,8,32
   869                        	.member	fsize,216,18,8,32
   870                        	.member	volbase,248,18,8,32
   871                        	.member	fatbase,280,18,8,32
   872                        	.member	dirbase,312,18,8,32
   873                        	.member	database,344,18,8,32
   874                        	.member	winsect,376,18,8,32
   875                        	.member	win,408,110,8,0,512
   876                        	.eos
   877                        	.stag	fake85_,128,85
   878                        	.member	fs,0,138,8,32,84
   879                        	.member	id,32,5,8,16
   880                        	.member	attr,48,14,8,8
   881                        	.member	stat,56,14,8,8
   882                        	.member	sclust,64,18,8,32
   883                        	.member	objsize,96,18,8,32
   884                        	.eos
   885                        	.stag	fake86_,4400,86
   886                        	.member	obj,0,10,8,128,85
   887                        	.member	flag,128,14,8,8
  Mon Sep 27 2021  9:39                                                Page 18


   888                        	.member	err,136,14,8,8
   889                        	.member	fptr,144,18,8,32
   890                        	.member	clust,176,18,8,32
   891                        	.member	sect,208,18,8,32
   892                        	.member	dir_sect,240,18,8,32
   893                        	.member	dir_ptr,272,142,8,32
   894                        	.member	buf,304,110,8,0,512
   895                        	.eos
   896                        	.stag	fake87_,416,87
   897                        	.member	obj,0,10,8,128,85
   898                        	.member	dptr,128,18,8,32
   899                        	.member	clust,160,18,8,32
   900                        	.member	sect,192,18,8,32
   901                        	.member	dir,224,142,8,32
   902                        	.member	fn,256,110,8,0,12
   903                        	.member	blk_ofs,352,18,8,32
   904                        	.member	pat,384,142,8,32
   905                        	.eos
   906                        	.stag	fake88_,2224,88
   907                        	.member	fsize,0,18,8,32
   908                        	.member	fdate,32,5,8,16
   909                        	.member	ftime,48,5,8,16
   910                        	.member	fattrib,64,14,8,8
   911                        	.member	altname,72,110,8,0,13
   912                        	.member	fname,176,110,8,0,256
   913                        	.eos
   914                        	.stag	fake89_,80,89
   915                        	.member	fmt,0,14,8,8
   916                        	.member	n_fat,8,14,8,8
   917                        	.member	align,16,16,8,16
   918                        	.member	n_root,32,16,8,16
   919                        	.member	au_size,48,18,8,32
   920                        	.eos
   921                        	.line	429
   922                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",26
   923                        	.line	30
   924                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",2
   925                        ;#include "fxexec.h"
   926                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   927                        	.line	86
   928                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",3
   929                        ;#include "fxdos.h"
   930                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",0
   931                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   932                        	.line	1064
   933                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",5
   934                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   935                        	.line	429
   936                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",6
  Mon Sep 27 2021  9:39                                                Page 19


   937                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\diskio.h",0
   938                        	.line	85
   939                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxdos.h",7
   940                        	.stag	_fx_sd_direntry,256,90
   941                        	.member	filename,0,110,8,0,11
   942                        	.member	type,88,14,8,8
   943                        	.member	attrs,96,110,8,0,20
   944                        	.eos
   945                        	.stag	_fx_info,416,91
   946                        	.member	stgName,0,110,8,0,32
   947                        	.member	Reserved1,256,14,8,8
   948                        	.member	stgType,264,16,8,16
   949                        	.member	Reserved2,280,14,8,8
   950                        	.member	stgReserved,288,110,8,0,16
   951                        	.eos
   952                        	.stag	_fx_fileinfo,136,92
   953                        	.member	type,0,14,8,8
   954                        	.member	pFilename,8,142,8,32
   955                        	.member	lSize,40,18,8,32
   956                        	.member	lcreateDate,72,18,8,32
   957                        	.member	lchangeDate,104,18,8,32
   958                        	.eos
   959                        	.stag	_FX_FAT_DIR_INFO,256,93
   960                        	.member	DIR_Name,0,110,8,0,11
   961                        	.member	DIR_Attr,88,14,8,8
   962                        	.member	DIR_NTRes,96,14,8,8
   963                        	.member	DIR_CrtTimeTenth,104,14,8,8
   964                        	.member	DIR_CrtTime,112,16,8,16
   965                        	.member	DIR_CrtDate,128,16,8,16
   966                        	.member	DIR_LstAccDate,144,16,8,16
   967                        	.member	DIR_FstClusHI,160,16,8,16
   968                        	.member	DIR_WrtTime,176,16,8,16
   969                        	.member	DIR_WrtDate,192,16,8,16
   970                        	.member	DIR_FstClusLO,208,16,8,16
   971                        	.member	DIR_FileSize,224,18,8,32
   972                        	.eos
   973                        	.stag	fat_extBS_32,416,94
   974                        	.member	table_size_32,0,18,8,32
   975                        	.member	extended_flags,32,16,8,16
   976                        	.member	fat_version,48,16,8,16
   977                        	.member	root_cluster,64,18,8,32
   978                        	.member	fat_info,96,16,8,16
   979                        	.member	backup_BS_sector,112,16,8,16
   980                        	.member	reserved_0,128,110,8,0,12
   981                        	.member	drive_number,224,14,8,8
   982                        	.member	reserved_1,232,14,8,8
   983                        	.member	boot_signature,240,14,8,8
   984                        	.member	volume_id,248,16,8,16
   985                        	.member	volume_label,264,110,8,0,11
   986                        	.member	fat_type_label,352,110,8,0,8
   987                        	.eos
   988                        	.stag	fat_extBS_16,192,95
   989                        	.member	bios_drive_num,0,14,8,8
   990                        	.member	reserved1,8,14,8,8
   991                        	.member	boot_signature,16,14,8,8
   992                        	.member	volume_id,24,16,8,16
  Mon Sep 27 2021  9:39                                                Page 20


   993                        	.member	volume_label,40,110,8,0,11
   994                        	.member	fat_type_label,128,110,8,0,8
   995                        	.eos
   996                        	.stag	fat_BS,688,96
   997                        	.member	bootjmp,0,110,8,0,3
   998                        	.member	oem_name,24,110,8,0,8
   999                        	.member	bytes_per_sector,88,16,8,16
  1000                        	.member	sectors_per_cluster,104,14,8,8
  1001                        	.member	reserved_sector_count,112,16,8,16
  1002                        	.member	table_count,128,14,8,8
  1003                        	.member	root_entry_count,136,16,8,16
  1004                        	.member	total_sectors_16,152,16,8,16
  1005                        	.member	media_type,168,14,8,8
  1006                        	.member	table_size_16,176,16,8,16
  1007                        	.member	sectors_per_track,192,16,8,16
  1008                        	.member	head_side_count,208,16,8,16
  1009                        	.member	hidden_sector_count,224,16,8,16
  1010                        	.member	total_sectors_32,240,16,8,16
  1011                        	.member	extended_section,256,110,8,0,54
  1012                        	.eos
  1013                        	.stag	__FATBootSector,928,97
  1014                        	.member	bootjmp,0,110,8,0,3
  1015                        	.member	oem_name,24,110,8,0,8
  1016                        	.member	bytes_per_sector,88,16,8,16
  1017                        	.member	sectors_per_cluster,104,14,8,8
  1018                        	.member	reserved_sector_count,112,16,8,16
  1019                        	.member	fat_table_count,128,14,8,8
  1020                        	.member	root_entry_count,136,16,8,16
  1021                        	.member	total_sectors_16,152,16,8,16
  1022                        	.member	media_type,168,14,8,8
  1023                        	.member	sectors_per_fat,176,16,8,16
  1024                        	.member	sectors_per_track,192,16,8,16
  1025                        	.member	head_side_count,208,16,8,16
  1026                        	.member	hidden_sector_count,224,18,8,32
  1027                        	.member	total_sectors_32,256,18,8,32
  1028                        	.member	drive_number,288,14,8,8
  1029                        	.member	reserved1,296,14,8,8
  1030                        	.member	boot_sig,304,14,8,8
  1031                        	.member	vol_id,312,18,8,32
  1032                        	.member	vol_name,344,110,8,0,11
  1033                        	.member	file_system_type,432,110,8,0,8
  1034                        	.member	extended_section,496,110,8,0,54
  1035                        	.eos
  1036                        	.stag	__PARTITIONTABLE,128,98
  1037                        	.member	first_byte,0,14,8,8
  1038                        	.member	start_chs,8,110,8,0,3
  1039                        	.member	partition_type,32,14,8,8
  1040                        	.member	end_chs,40,110,8,0,3
  1041                        	.member	start_sector,64,18,8,32
  1042                        	.member	length_sectors,96,18,8,32
  1043                        	.eos
  1044                        	.stag	fake99_,4096,99
  1045                        	.member	jmp,0,110,8,0,3
  1046                        	.member	oem,24,110,8,0,8
  1047                        	.member	sector_size,88,15,8,16
  1048                        	.member	sectors_per_cluster,104,14,8,8
  1049                        	.member	reserved_sectors,112,15,8,16
  1050                        	.member	number_ok_dos_fats,128,14,8,8
  Mon Sep 27 2021  9:39                                                Page 21


  1051                        	.member	root_dir_entries,136,15,8,16
  1052                        	.member	total_sectors_short,152,15,8,16
  1053                        	.member	media_descriptor,168,14,8,8
  1054                        	.member	fat_size_sectors,176,15,8,16
  1055                        	.member	sectors_per_track,192,15,8,16
  1056                        	.member	number_ok_dos_heads,208,15,8,16
  1057                        	.member	hidden_sectors,224,18,8,32
  1058                        	.member	total_sectors_long,256,18,8,32
  1059                        	.member	drive_number,288,14,8,8
  1060                        	.member	current_head,296,14,8,8
  1061                        	.member	boot_signature,304,14,8,8
  1062                        	.member	volume_id,312,18,8,32
  1063                        	.member	volume_label,344,110,8,0,11
  1064                        	.member	fs_type,432,110,8,0,8
  1065                        	.member	boot_code,496,110,8,0,448
  1066                        	.member	boot_sector_signature,4080,15,8,16
  1067                        	.eos
  1068                        	.stag	__FAT16ENTRY,256,100
  1069                        	.member	filename,0,110,8,0,8
  1070                        	.member	ext,64,110,8,0,3
  1071                        	.member	attributes,88,14,8,8
  1072                        	.member	reserved,96,110,8,0,10
  1073                        	.member	modify_time,176,16,8,16
  1074                        	.member	modify_date,192,16,8,16
  1075                        	.member	starting_cluster,208,16,8,16
  1076                        	.member	file_size,224,18,8,32
  1077                        	.eos
  1078                        	.stag	__FAT16ENTRYLONG,288,101
  1079                        	.member	filename,0,110,8,0,8
  1080                        	.member	ext,64,110,8,0,3
  1081                        	.member	attributes,88,14,8,8
  1082                        	.member	reserved,96,110,8,0,10
  1083                        	.member	modify_time,176,16,8,16
  1084                        	.member	modify_date,192,16,8,16
  1085                        	.member	starting_cluster,208,16,8,16
  1086                        	.member	file_size,224,18,8,32
  1087                        	.member	plongfileName,256,142,8,32
  1088                        	.eos
  1089                        	.stag	_LongFileName,256,102
  1090                        	.member	sequenceNo,0,14,8,8
  1091                        	.member	fileName_Part1,8,110,8,0,10
  1092                        	.member	fileattribute,88,14,8,8
  1093                        	.member	type,96,14,8,8
  1094                        	.member	checksum,104,14,8,8
  1095                        	.member	fileName_Part2,112,110,8,0,12
  1096                        	.member	fstclusLO,208,5,8,16
  1097                        	.member	fileName_Part3,224,110,8,0,4
  1098                        	.eos
  1099                        	.stag	_IDSECTOR,2048,103
  1100                        	.member	wGenConfig,0,16,8,16
  1101                        	.member	wNumCyls,16,16,8,16
  1102                        	.member	wReserved,32,16,8,16
  1103                        	.member	wNumHeads,48,16,8,16
  1104                        	.member	wBytesPerTrack,64,16,8,16
  1105                        	.member	wBytesPerSector,80,16,8,16
  1106                        	.member	wSectorsPerTrack,96,16,8,16
  1107                        	.member	wVendorUnique,112,112,8,0,3
  1108                        	.member	sSerialNumber,160,110,8,0,20
  Mon Sep 27 2021  9:39                                                Page 22


  1109                        	.member	wBufferType,320,16,8,16
  1110                        	.member	wBufferSize,336,16,8,16
  1111                        	.member	wECCSize,352,16,8,16
  1112                        	.member	sFirmwareRev,368,110,8,0,8
  1113                        	.member	sModelNumber,432,110,8,0,40
  1114                        	.member	wMoreVendorUnique,752,16,8,16
  1115                        	.member	wDoubleWordIO,768,16,8,16
  1116                        	.member	wCapabilities,784,16,8,16
  1117                        	.member	wReserved1,800,16,8,16
  1118                        	.member	wPIOTiming,816,16,8,16
  1119                        	.member	wDMATiming,832,16,8,16
  1120                        	.member	wBS,848,16,8,16
  1121                        	.member	wNumCurrentCyls,864,16,8,16
  1122                        	.member	wNumCurrentHeads,880,16,8,16
  1123                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1124                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1125                        	.member	wMultSectorStuff,944,16,8,16
  1126                        	.member	ulTotalAddressableSectors,960,18,8,32
  1127                        	.member	wSingleWordDMA,992,16,8,16
  1128                        	.member	wMultiWordDMA,1008,16,8,16
  1129                        	.member	bReserved,1024,110,8,0,128
  1130                        	.eos
  1131                        	.stag	fake104_,16,104
  1132                        	.member	Reserved1,0,16,17,1
  1133                        	.member	Retired3,1,16,17,1
  1134                        	.member	ResponseIncomplete,2,16,17,1
  1135                        	.member	Retired2,3,16,17,3
  1136                        	.member	FixedDevice,6,16,17,1
  1137                        	.member	RemovableMedia,7,16,17,1
  1138                        	.member	Retired1,8,16,17,7
  1139                        	.member	DeviceType,15,16,17,1
  1140                        	.eos
  1141                        	.stag	fake105_,16,105
  1142                        	.member	FeatureSupported,0,16,17,1
  1143                        	.member	Reserved,1,16,17,15
  1144                        	.eos
  1145                        	.stag	fake106_,32,106
  1146                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1147                        	.member	ReservedByte49,2,14,17,6
  1148                        	.member	DmaSupported,8,14,17,1
  1149                        	.member	LbaSupported,9,14,17,1
  1150                        	.member	IordyDisable,10,14,17,1
  1151                        	.member	IordySupported,11,14,17,1
  1152                        	.member	Reserved1,12,14,17,1
  1153                        	.member	StandybyTimerSupport,13,14,17,1
  1154                        	.member	Reserved2,14,14,17,2
  1155                        	.member	ReservedWord50,16,16,8,16
  1156                        	.eos
  1157                        	.stag	fake107_,16,107
  1158                        	.member	ZonedCapabilities,0,16,17,2
  1159                        	.member	NonVolatileWriteCache,2,16,17,1
  1160                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1161                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1162                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1163                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1164                        	.member	IEEE1667,7,16,17,1
  Mon Sep 27 2021  9:39                                                Page 23


  1165                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1166                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1167                        	.member	WriteBufferDmaSupported,10,16,17,1
  1168                        	.member	ReadBufferDmaSupported,11,16,17,1
  1169                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  1170                        	.member	LPSAERCSupported,13,16,17,1
  1171                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1172                        	.member	CFastSpecSupported,15,16,17,1
  1173                        	.eos
  1174                        	.stag	fake108_,32,108
  1175                        	.member	Reserved0,0,16,17,1
  1176                        	.member	SataGen1,1,16,17,1
  1177                        	.member	SataGen2,2,16,17,1
  1178                        	.member	SataGen3,3,16,17,1
  1179                        	.member	Reserved1,4,16,17,4
  1180                        	.member	NCQ,8,16,17,1
  1181                        	.member	HIPM,9,16,17,1
  1182                        	.member	PhyEvents,10,16,17,1
  1183                        	.member	NcqUnload,11,16,17,1
  1184                        	.member	NcqPriority,12,16,17,1
  1185                        	.member	HostAutoPS,13,16,17,1
  1186                        	.member	DeviceAutoPS,14,16,17,1
  1187                        	.member	ReadLogDMA,15,16,17,1
  1188                        	.member	Reserved2,16,16,17,1
  1189                        	.member	CurrentSpeed,17,16,17,3
  1190                        	.member	NcqStreaming,20,16,17,1
  1191                        	.member	NcqQueueMgmt,21,16,17,1
  1192                        	.member	NcqReceiveSend,22,16,17,1
  1193                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1194                        	.member	Reserved3,24,16,17,8
  1195                        	.eos
  1196                        	.stag	fake109_,16,109
  1197                        	.member	Reserved0,0,16,17,1
  1198                        	.member	NonZeroOffsets,1,16,17,1
  1199                        	.member	DmaSetupAutoActivate,2,16,17,1
  1200                        	.member	DIPM,3,16,17,1
  1201                        	.member	InOrderData,4,16,17,1
  1202                        	.member	HardwareFeatureControl,5,16,17,1
  1203                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1204                        	.member	NCQAutosense,7,16,17,1
  1205                        	.member	DEVSLP,8,16,17,1
  1206                        	.member	HybridInformation,9,16,17,1
  1207                        	.member	Reserved1,10,16,17,6
  1208                        	.eos
  1209                        	.stag	fake110_,16,110
  1210                        	.member	Reserved0,0,16,17,1
  1211                        	.member	NonZeroOffsets,1,16,17,1
  1212                        	.member	DmaSetupAutoActivate,2,16,17,1
  1213                        	.member	DIPM,3,16,17,1
  1214                        	.member	InOrderData,4,16,17,1
  1215                        	.member	HardwareFeatureControl,5,16,17,1
  1216                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1217                        	.member	DeviceAutoPS,7,16,17,1
  1218                        	.member	DEVSLP,8,16,17,1
  1219                        	.member	HybridInformation,9,16,17,1
  Mon Sep 27 2021  9:39                                                Page 24


  1220                        	.member	Reserved1,10,16,17,6
  1221                        	.eos
  1222                        	.stag	fake111_,48,111
  1223                        	.member	SmartCommands,0,16,17,1
  1224                        	.member	SecurityMode,1,16,17,1
  1225                        	.member	RemovableMediaFeature,2,16,17,1
  1226                        	.member	PowerManagement,3,16,17,1
  1227                        	.member	Reserved1,4,16,17,1
  1228                        	.member	WriteCache,5,16,17,1
  1229                        	.member	LookAhead,6,16,17,1
  1230                        	.member	ReleaseInterrupt,7,16,17,1
  1231                        	.member	ServiceInterrupt,8,16,17,1
  1232                        	.member	DeviceReset,9,16,17,1
  1233                        	.member	HostProtectedArea,10,16,17,1
  1234                        	.member	Obsolete1,11,16,17,1
  1235                        	.member	WriteBuffer,12,16,17,1
  1236                        	.member	ReadBuffer,13,16,17,1
  1237                        	.member	Nop,14,16,17,1
  1238                        	.member	Obsolete2,15,16,17,1
  1239                        	.member	DownloadMicrocode,16,16,17,1
  1240                        	.member	DmaQueued,17,16,17,1
  1241                        	.member	Cfa,18,16,17,1
  1242                        	.member	AdvancedPm,19,16,17,1
  1243                        	.member	Msn,20,16,17,1
  1244                        	.member	PowerUpInStandby,21,16,17,1
  1245                        	.member	ManualPowerUp,22,16,17,1
  1246                        	.member	Reserved2,23,16,17,1
  1247                        	.member	SetMax,24,16,17,1
  1248                        	.member	Acoustics,25,16,17,1
  1249                        	.member	BigLba,26,16,17,1
  1250                        	.member	DeviceConfigOverlay,27,16,17,1
  1251                        	.member	FlushCache,28,16,17,1
  1252                        	.member	FlushCacheExt,29,16,17,1
  1253                        	.member	WordValid83,30,16,17,2
  1254                        	.member	SmartErrorLog,32,16,17,1
  1255                        	.member	SmartSelfTest,33,16,17,1
  1256                        	.member	MediaSerialNumber,34,16,17,1
  1257                        	.member	MediaCardPassThrough,35,16,17,1
  1258                        	.member	StreamingFeature,36,16,17,1
  1259                        	.member	GpLogging,37,16,17,1
  1260                        	.member	WriteFua,38,16,17,1
  1261                        	.member	WriteQueuedFua,39,16,17,1
  1262                        	.member	WWN64Bit,40,16,17,1
  1263                        	.member	URGReadStream,41,16,17,1
  1264                        	.member	URGWriteStream,42,16,17,1
  1265                        	.member	ReservedForTechReport,43,16,17,2
  1266                        	.member	IdleWithUnloadFeature,45,16,17,1
  1267                        	.member	WordValid,46,16,17,2
  1268                        	.eos
  1269                        	.stag	fake112_,48,112
  1270                        	.member	SmartCommands,0,16,17,1
  1271                        	.member	SecurityMode,1,16,17,1
  1272                        	.member	RemovableMediaFeature,2,16,17,1
  1273                        	.member	PowerManagement,3,16,17,1
  1274                        	.member	Reserved1,4,16,17,1
  1275                        	.member	WriteCache,5,16,17,1
  1276                        	.member	LookAhead,6,16,17,1
  1277                        	.member	ReleaseInterrupt,7,16,17,1
  Mon Sep 27 2021  9:39                                                Page 25


  1278                        	.member	ServiceInterrupt,8,16,17,1
  1279                        	.member	DeviceReset,9,16,17,1
  1280                        	.member	HostProtectedArea,10,16,17,1
  1281                        	.member	Obsolete1,11,16,17,1
  1282                        	.member	WriteBuffer,12,16,17,1
  1283                        	.member	ReadBuffer,13,16,17,1
  1284                        	.member	Nop,14,16,17,1
  1285                        	.member	Obsolete2,15,16,17,1
  1286                        	.member	DownloadMicrocode,16,16,17,1
  1287                        	.member	DmaQueued,17,16,17,1
  1288                        	.member	Cfa,18,16,17,1
  1289                        	.member	AdvancedPm,19,16,17,1
  1290                        	.member	Msn,20,16,17,1
  1291                        	.member	PowerUpInStandby,21,16,17,1
  1292                        	.member	ManualPowerUp,22,16,17,1
  1293                        	.member	Reserved2,23,16,17,1
  1294                        	.member	SetMax,24,16,17,1
  1295                        	.member	Acoustics,25,16,17,1
  1296                        	.member	BigLba,26,16,17,1
  1297                        	.member	DeviceConfigOverlay,27,16,17,1
  1298                        	.member	FlushCache,28,16,17,1
  1299                        	.member	FlushCacheExt,29,16,17,1
  1300                        	.member	Resrved3,30,16,17,1
  1301                        	.member	Words119_120Valid,31,16,17,1
  1302                        	.member	SmartErrorLog,32,16,17,1
  1303                        	.member	SmartSelfTest,33,16,17,1
  1304                        	.member	MediaSerialNumber,34,16,17,1
  1305                        	.member	MediaCardPassThrough,35,16,17,1
  1306                        	.member	StreamingFeature,36,16,17,1
  1307                        	.member	GpLogging,37,16,17,1
  1308                        	.member	WriteFua,38,16,17,1
  1309                        	.member	WriteQueuedFua,39,16,17,1
  1310                        	.member	WWN64Bit,40,16,17,1
  1311                        	.member	URGReadStream,41,16,17,1
  1312                        	.member	URGWriteStream,42,16,17,1
  1313                        	.member	ReservedForTechReport,43,16,17,2
  1314                        	.member	IdleWithUnloadFeature,45,16,17,1
  1315                        	.member	Reserved4,46,16,17,2
  1316                        	.eos
  1317                        	.stag	fake113_,16,113
  1318                        	.member	TimeRequired,0,16,17,15
  1319                        	.member	ExtendedTimeReported,15,16,17,1
  1320                        	.eos
  1321                        	.stag	fake114_,16,114
  1322                        	.member	TimeRequired,0,16,17,15
  1323                        	.member	ExtendedTimeReported,15,16,17,1
  1324                        	.eos
  1325                        	.stag	fake115_,16,115
  1326                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1327                        	.member	Reserved0,4,16,17,8
  1328                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1329                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1330                        	.member	Reserved1,14,16,17,2
  1331                        	.eos
  1332                        	.stag	fake116_,16,116
  Mon Sep 27 2021  9:39                                                Page 26


  1333                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1334                        	.member	WriteReadVerify,1,16,17,1
  1335                        	.member	WriteUncorrectableExt,2,16,17,1
  1336                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1337                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1338                        	.member	FreefallControl,5,16,17,1
  1339                        	.member	SenseDataReporting,6,16,17,1
  1340                        	.member	ExtendedPowerConditions,7,16,17,1
  1341                        	.member	Reserved0,8,16,17,6
  1342                        	.member	WordValid,14,16,17,2
  1343                        	.eos
  1344                        	.stag	fake117_,16,117
  1345                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1346                        	.member	WriteReadVerify,1,16,17,1
  1347                        	.member	WriteUncorrectableExt,2,16,17,1
  1348                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1349                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1350                        	.member	FreefallControl,5,16,17,1
  1351                        	.member	SenseDataReporting,6,16,17,1
  1352                        	.member	ExtendedPowerConditions,7,16,17,1
  1353                        	.member	Reserved0,8,16,17,6
  1354                        	.member	Reserved1,14,16,17,2
  1355                        	.eos
  1356                        	.stag	fake118_,16,118
  1357                        	.member	SecuritySupported,0,16,17,1
  1358                        	.member	SecurityEnabled,1,16,17,1
  1359                        	.member	SecurityLocked,2,16,17,1
  1360                        	.member	SecurityFrozen,3,16,17,1
  1361                        	.member	SecurityCountExpired,4,16,17,1
  1362                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1363                        	.member	Reserved0,6,16,17,2
  1364                        	.member	SecurityLevel,8,16,17,1
  1365                        	.member	Reserved1,9,16,17,7
  1366                        	.eos
  1367                        	.stag	fake119_,16,119
  1368                        	.member	MaximumCurrentInMA,0,16,17,12
  1369                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1370                        	.member	CfaPowerMode1Required,13,16,17,1
  1371                        	.member	Reserved0,14,16,17,1
  1372                        	.member	Word160Supported,15,16,17,1
  1373                        	.eos
  1374                        	.stag	fake120_,16,120
  1375                        	.member	SupportsTrim,0,16,17,1
  1376                        	.member	Reserved0,1,16,17,15
  1377                        	.eos
  1378                        	.stag	fake121_,16,121
  1379                        	.member	Supported,0,16,17,1
  1380                        	.member	Reserved0,1,16,17,1
  1381                        	.member	WriteSameSuported,2,16,17,1
  1382                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1383                        	.member	FeatureControlSuported,4,16,17,1
  1384                        	.member	DataTablesSuported,5,16,17,1
  1385                        	.member	Reserved1,6,16,17,6
  1386                        	.member	VendorSpecific,12,16,17,4
  1387                        	.eos
  1388                        	.stag	fake122_,16,122
  1389                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  Mon Sep 27 2021  9:39                                                Page 27


  1390                        	.member	Word209Supported,14,16,17,1
  1391                        	.member	Reserved0,15,16,17,1
  1392                        	.eos
  1393                        	.stag	fake123_,16,123
  1394                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1395                        	.member	Reserved0,1,16,17,3
  1396                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  1397                        	.member	Reserved1,5,16,17,3
  1398                        	.member	NVCachePowerModeVersion,8,16,17,4
  1399                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1400                        	.eos
  1401                        	.stag	fake124_,16,124
  1402                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1403                        	.member	Reserved,8,14,8,8
  1404                        	.eos
  1405                        	.stag	fake125_,16,125
  1406                        	.member	MajorVersion,0,16,17,12
  1407                        	.member	TransportType,12,16,17,4
  1408                        	.eos
  1409                        	.stag	_IDENTIFY_DEVICE_DATA,4096,126
  1410                        	.member	GeneralConfiguration,0,10,8,16,104
  1411                        	.member	NumCylinders,16,16,8,16
  1412                        	.member	SpecificConfiguration,32,16,8,16
  1413                        	.member	NumHeads,48,16,8,16
  1414                        	.member	Retired1Bytes,64,110,8,0,4
  1415                        	.member	NumSectorsPerTrack,96,16,8,16
  1416                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1417                        	.member	SerialNumber,160,110,8,0,20
  1418                        	.member	Retired2,320,112,8,0,2
  1419                        	.member	Obsolete1,352,16,8,16
  1420                        	.member	FirmwareRevision,368,110,8,0,8
  1421                        	.member	ModelNumber,432,110,8,0,40
  1422                        	.member	MaximumBlockTransfer,752,14,8,8
  1423                        	.member	VendorUnique2,760,14,8,8
  1424                        	.member	TrustedComputing,768,10,8,16,105
  1425                        	.member	Capabilities,784,10,8,32,106
  1426                        	.member	ObsoleteWords51,816,112,8,0,2
  1427                        	.member	TranslationFieldsValid,848,16,17,3
  1428                        	.member	Reserved3,851,16,17,5
  1429                        	.member	FreeFallControlSensitivity,856,16,17,8
  1430                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1431                        	.member	NumberOfCurrentHeads,880,16,8,16
  1432                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1433                        	.member	CurrentSectorCapacity,912,18,8,32
  1434                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1435                        	.member	MultiSectorSettingValid,952,14,17,1
  1436                        	.member	ReservedByte59,953,14,17,3
  1437                        	.member	SanitizeFeatureSupported,956,14,17,1
  1438                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1439                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1440                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1441                        	.member	UserAddressableSectors,960,18,8,32
  1442                        	.member	ObsoleteWord62,992,16,8,16
  1443                        	.member	MultiWordDMASupport,1008,16,17,8
  1444                        	.member	MultiWordDMAActive,1016,16,17,8
  Mon Sep 27 2021  9:39                                                Page 28


  1445                        	.member	AdvancedPIOModes,1024,16,17,8
  1446                        	.member	ReservedByte64,1032,16,17,8
  1447                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1448                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1449                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1450                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1451                        	.member	AdditionalSupported,1104,10,8,16,107
  1452                        	.member	ReservedWords70,1120,112,8,0,5
  1453                        	.member	QueueDepth,1200,16,17,5
  1454                        	.member	ReservedWord75,1205,16,17,11
  1455                        	.member	SerialAtaCapabilities,1216,10,8,32,108
  1456                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    109
  1457                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,11
                    0
  1458                        	.member	MajorRevision,1280,16,8,16
  1459                        	.member	MinorRevision,1296,16,8,16
  1460                        	.member	CommandSetSupport,1312,10,8,48,111
  1461                        	.member	CommandSetActive,1360,10,8,48,112
  1462                        	.member	UltraDMASupport,1408,16,17,8
  1463                        	.member	UltraDMAActive,1416,16,17,8
  1464                        	.member	NormalSecurityEraseUnit,1424,10,8,16,113
  1465                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
                    14
  1466                        	.member	CurrentAPMLevel,1456,16,17,8
  1467                        	.member	ReservedWord91,1464,16,17,8
  1468                        	.member	MasterPasswordID,1472,16,8,16
  1469                        	.member	HardwareResetResult,1488,16,8,16
  1470                        	.member	CurrentAcousticValue,1504,16,17,8
  1471                        	.member	RecommendedAcousticValue,1512,16,17,8
  1472                        	.member	StreamMinRequestSize,1520,16,8,16
  1473                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1474                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1475                        	.member	StreamingPerfGranularity,1568,18,8,32
  1476                        	.member	Max48BitLBA,1600,114,8,0,2
  1477                        	.member	StreamingTransferTime,1664,16,8,16
  1478                        	.member	DsmCap,1680,16,8,16
  1479                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    15
  1480                        	.member	InterSeekDelay,1712,16,8,16
  1481                        	.member	WorldWideName,1728,112,8,0,4
  1482                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1483                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1484                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1485                        	.member	CommandSetSupportExt,1904,10,8,16,116
  1486                        	.member	CommandSetActiveExt,1920,10,8,16,117
  1487                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1488                        	.member	MsnSupport,2032,16,17,2
  1489                        	.member	ReservedWord127,2034,16,17,14
  1490                        	.member	SecurityStatus,2048,10,8,16,118
  1491                        	.member	ReservedWord129,2064,112,8,0,31
  1492                        	.member	CfaPowerMode1,2560,10,8,16,119
  1493                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1494                        	.member	NominalFormFactor,2688,16,17,4
  Mon Sep 27 2021  9:39                                                Page 29


  1495                        	.member	ReservedWord168,2692,16,17,12
  1496                        	.member	DataSetManagementFeature,2704,10,8,16,12
                    0
  1497                        	.member	AdditionalProductID,2720,112,8,0,4
  1498                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1499                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1500                        	.member	SCTCommandTransport,3296,10,8,16,121
  1501                        	.member	ReservedWord207,3312,112,8,0,2
  1502                        	.member	BlockAlignment,3344,10,8,16,122
  1503                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1504                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1505                        	.member	NVCacheCapabilities,3424,10,8,16,123
  1506                        	.member	NVCacheSizeLSW,3440,16,8,16
  1507                        	.member	NVCacheSizeMSW,3456,16,8,16
  1508                        	.member	NominalMediaRotationRate,3472,16,8,16
  1509                        	.member	ReservedWord218,3488,16,8,16
  1510                        	.member	NVCacheOptions,3504,10,8,16,124
  1511                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1512                        	.member	ReservedWord220,3528,16,17,8
  1513                        	.member	ReservedWord221,3536,16,8,16
  1514                        	.member	TransportMajorVersion,3552,10,8,16,125
  1515                        	.member	TransportMinorVersion,3568,16,8,16
  1516                        	.member	ReservedWord224,3584,112,8,0,6
  1517                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1518                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1519                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1520                        	.member	ReservedWord236,3776,112,8,0,19
  1521                        	.member	Signature,4080,16,17,8
  1522                        	.member	CheckSum,4088,16,17,8
  1523                        	.eos
  1524                        	.stag	_FXDosDevice,5744,127
  1525                        	.member	type,0,14,8,8
  1526                        	.member	initialized,8,14,8,8
  1527                        	.member	devdata,16,129,8,32
  1528                        	.member	devstatus,48,14,8,8
  1529                        	.member	bootSector,56,10,8,928,97
  1530                        	.member	partitionTable,984,10,8,128,98
  1531                        	.member	fileAllocationTable,1112,110,8,0,512
  1532                        	.member	bsOffset,5208,18,8,32
  1533                        	.member	rootDirSectors,5240,18,8,32
  1534                        	.member	root_entry_count,5272,5,8,16
  1535                        	.member	rootEntriesPerPage,5288,5,8,16
  1536                        	.member	sectors_per_cluster,5304,5,8,16
  1537                        	.member	firstDataSector,5320,18,8,32
  1538                        	.member	fatTableOffset,5352,18,8,32
  1539                        	.member	volume_name,5384,110,8,0,12
  1540                        	.member	root_volume_name,5480,110,8,0,12
  1541                        	.member	errorCode,5576,14,8,8
  1542                        	.member	pfInit,5584,641,8,32
  1543                        	.member	pfReset,5616,641,8,32
  1544                        	.member	pfUninit,5648,641,8,32
  1545                        	.member	pfReader,5680,654,8,32
  Mon Sep 27 2021  9:39                                                Page 30


  1546                        	.member	pfWriter,5712,654,8,32
  1547                        	.eos
  1548                        	.utag	item,32,128
  1549                        	.member	dir,0,138,11,32,87
  1550                        	.member	file,0,138,11,32,86
  1551                        	.member	fileInfo,0,138,11,32,88
  1552                        	.eos
  1553                        	.stag	_dos_handle,80,129
  1554                        	.member	fs,0,138,8,32,84
  1555                        	.member	fr,32,5,8,16
  1556                        	.member	path,48,142,8,32
  1557                        	.eos
  1558                        	.stag	fx_file,112,130
  1559                        	.member	fs,0,138,8,32,84
  1560                        	.member	fileInfo,32,138,8,32,88
  1561                        	.member	f,64,138,8,32,86
  1562                        	.member	fr,96,5,8,16
  1563                        	.eos
  1564                        	.line	812
  1565                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",4
  1566                        ;#include "fxmemorymanager.h"
  1567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
  1568                        	.line	129
  1569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",5
  1570                        ;#include "fxeventmanager.h"
  1571                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
  1572                        	.line	572
  1573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",6
  1574                        ;#include "fxos_desktop_proc.h"
  1575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_desktop_proc.h",0
  1576                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
  1577                        	.line	1064
  1578                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_desktop_proc.h",5
  1579                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
  1580                        	.line	1963
  1581                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_desktop_proc.h",10
  1582                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
  1583                        	.line	141
  1584                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_desktop_proc.h",15
  1585                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
  1586                        	.line	572
  1587                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_desktop_proc.h",16
  1588                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
  Mon Sep 27 2021  9:39                                                Page 31


  1589                        	.line	370
  1590                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_desktop_proc.h",17
  1591                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
  1592                        	.line	594
  1593                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_desktop_proc.h",18
  1594                        	.stag	fake131_,32,131
  1595                        	.member	contents,0,138,8,32,61
  1596                        	.eos
  1597                        	.line	92
  1598                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",7
  1599                        ;#include "fxconsole.h"
  1600                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
  1601                        	.line	208
  1602                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",8
  1603                        ;#include "ff/ff.h"
  1604                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
  1605                        	.line	429
  1606                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",9
  1607                        ;#include "drivers/ps2ctl.h"
  1608                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/ps2ctl.h",0
  1609                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
  1610                        	.line	1064
  1611                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\drivers/ps2ctl.h",4
  1612                        	.stag	fake132_,88,132
  1613                        	.member	present,0,14,8,8
  1614                        	.member	num,8,18,8,32
  1615                        	.member	type,40,18,8,32
  1616                        	.member	first_id_byte,72,14,8,8
  1617                        	.member	second_id_byte,80,14,8,8
  1618                        	.eos
  1619                        	.line	84
  1620                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",10
  1621                        ;//#include "OMF_Load.h"
  1622                        ;//#include "OMF_Dc_Memory.h"
  1623                        ;//#include "basicfont.h"
  1624                        ;
  1625                        ;#define IDLE_PROC	(0)
  1626                        ;#define LOW_PROC    (1)
  1627                        ;#define TOP_PROC    (255)
  1628                        ;#define MAX_PROCS   (256)
  1629                        ;
  1630                        ;#define IDLE_TIMEOUT 	 (0x00FF)
  1631                        ;#define FASTIDLE_TIMEOUT (0x007F)
  1632                        ;//static FIL fp;
  1633                        ;//static FRESULT fres;
  1634                        ;//static FATFS FatFs;
  Mon Sep 27 2021  9:39                                                Page 32


  1635                        ;
  1636                        ;//extern ULONG _k_irq_handler_calls;
  1637                        ;extern BOOL _k_in_irq_enabled;
  1638                        ;
  1639                        ;EVENTMANAGER	 _k_eventmanager = NULL;
  1640                        	data
  1641                        	xdef	~~_k_eventmanager
  1642                        ~~_k_eventmanager:
  1643 00:0000: 00 00 00 00  	dl	$0
  1644 00:0004:              	ds	20
  1645 00:0018:              	ends
  1646                        ;PWINDOWMANAGER	 _k_currentWndManager = NULL;
  1647                        	data
  1648                        	xdef	~~_k_currentWndManager
  1649                        ~~_k_currentWndManager:
  1650 00:0018: 00 00 00 00  	dl	$0
  1651 00:001C:              	ends
  1652                        ;
  1653                        ;static FXEventProc 		eventProcs[MAX_P
                    ROCS];
  1654                        ;static PFXEVENTPROCESS  eventProcess[MAX_PROCS];
  1655                        ;
  1656                        ;PFXNODELIST _k_eventManager_IdleProcList	= NULL;
  1657                        	data
  1658                        	xdef	~~_k_eventManager_IdleProcList
  1659                        ~~_k_eventManager_IdleProcList:
  1660 00:001C: 00 00 00 00  	dl	$0
  1661 00:0020:              	ends
  1662                        ;
  1663                        ;static UINT _k_bootMode = BOOTMODE_DEFAULT;
  1664                        	data
  1665                        ~~_k_bootMode:
  1666 00:0020: 02 00        	dw	$2
  1667 00:0022:              	ends
  1668                        ;
  1669                        ;static ULONG _k_system_timer = 0;
  1670                        	data
  1671                        ~~_k_system_timer:
  1672 00:0022: 00 00 00 00  	dl	$0
  1673 00:0026:              	ends
  1674                        ;//static HWND	 _k_hLockedFocus 	= NULL;
  1675                        ;//static BOOL	 _k_bNCLockedFocus  = FALSE;
  1676                        ;static HWND	 _k_hWndFocus 	    = NULL;
  1677                        	data
  1678                        ~~_k_hWndFocus:
  1679 00:0026: 00 00 00 00  	dl	$0
  1680 00:002A:              	ends
  1681                        ;//static int scpu = 0;
  1682                        ;//static char idlespinner[] = {'|','/','-','\\'};
  1683                        ;
  1684                        ;//static FXOSMESSAGE smsg;
  1685                        ;static FXQUEUE FAR *_k_eventQueue = NULL;
  1686                        	data
  1687                        ~~_k_eventQueue:
  1688 00:002A: 00 00 00 00  	dl	$0
  1689 00:002E:              	ends
  1690                        ;static MOUSE_MSG_STATE _k_mouseState;
  1691                        ;
  Mon Sep 27 2021  9:39                                                Page 33


  1692                        ;static UINT _normal_idle_tick = 0x0001;
  1693                        	data
  1694                        ~~_normal_idle_tick:
  1695 00:002E: 01 00        	dw	$1
  1696 00:0030:              	ends
  1697                        ;static UINT _fast_idle_tick   = 0x0001;
  1698                        	data
  1699                        ~~_fast_idle_tick:
  1700 00:0030: 01 00        	dw	$1
  1701 00:0032:              	ends
  1702                        ;
  1703                        ;static ULONG THIS_MODULE = 0xB0000001;
  1704                        	data
  1705                        ~~THIS_MODULE:
  1706 00:0032: 01 00 00 B0  	dl	$B0000001
  1707 00:0036:              	ends
  1708                        ;
  1709                        ;
  1710                        ;static PIPCPORT _k_debugport_hd =  NULL;
  1711                        	data
  1712                        ~~_k_debugport_hd:
  1713 00:0036: 00 00 00 00  	dl	$0
  1714 00:003A:              	ends
  1715                        ;
  1716                        ;
  1717                        ;static KEYCODE extendedLookup[][2] = {
  1718                        	data
  1719                        ~~extendedLookup:
  1720                        ;							
                    			{0xE048,0xE048},{0xE0C8,0xF0C8}, // CURS
                    OR_UP
  1721 00:003A: 48 E0 48 E0  	dw	$E048,$E048,$E0C8,$F0C8
       00:003E: C8 E0 C8 F0 
  1722                        ;							
                    			{0xE050,0xE050},{0xE0D0,0xF0D0}, // CURS
                    OR_DOWN
  1723 00:0042: 50 E0 50 E0  	dw	$E050,$E050,$E0D0,$F0D0
       00:0046: D0 E0 D0 F0 
  1724                        ;							
                    			{0xE04B,0xE04B},{0xE0CB,0xF0CB}, // CURS
                    OR_LEFT
  1725 00:004A: 4B E0 4B E0  	dw	$E04B,$E04B,$E0CB,$F0CB
       00:004E: CB E0 CB F0 
  1726                        ;							
                    			{0xE04D,0xE04D},{0xE0CD,0xF0CD}, // CURS
                    OR_RIGHT
  1727 00:0052: 4D E0 4D E0  	dw	$E04D,$E04D,$E0CD,$F0CD
       00:0056: CD E0 CD F0 
  1728                        ;							
                    		 };
  1729 00:005A:              	ends
  1730                        ;
  1731                        ;static BOOL			_k_ignore_irq_ev
                    ents = TRUE;
  1732                        	data
  1733                        ~~_k_ignore_irq_events:
  1734 00:005A: 01           	db	$1
  1735 00:005B:              	ends
  Mon Sep 27 2021  9:39                                                Page 34


  1736                        ;static PFXOSMESSAGE	_k_irq_events = NULL;
  1737                        	data
  1738                        ~~_k_irq_events:
  1739 00:005B: 00 00 00 00  	dl	$0
  1740 00:005F:              	ends
  1741                        ;static BYTE			_k_irq_events_id
                    x = 0;
  1742                        	data
  1743                        ~~_k_irq_events_idx:
  1744 00:005F: 00           	db	$0
  1745 00:0060:              	ends
  1746                        ;
  1747                        ;//static BOOL ps2port_ready = FALSE;
  1748                        ;
  1749                        ;
  1750                        ;
  1751                        ;#define inportb60(a)	(KBD_INPT_BUF[0])
  1752                        ;#define inportb64(a)	(STATUS_PORT[0])
  1753                        ;#define outportb60(b)	(KBD_OUT_BUF[0] = b)
  1754                        ;#define outportb64(b)	(KBD_CMD_BUF[0] = b)
  1755                        ;
  1756                        ;static void k_mouse_wait(BYTE a_type);
  1757                        ;static void k_mouse_write(BYTE a_write);
  1758                        ;static BYTE k_mouse_read(VOID);
  1759                        ;
  1760                        ;#pragma section CODE=EVTMAN,offset $5:0000
  1761                        EVTMAN	section	offset $5:0000
  1762 05:0000:              	ends
  1763                        ;
  1764                        ;BOOL initHD = FALSE;
  1765                        	data
  1766                        	xdef	~~initHD
  1767                        ~~initHD:
  1768 00:0060: 00           	db	$0
  1769 00:0061:              	ends
  1770                        ;
  1771                        ;//void DoWndProcs(LPVOID ctx,LPVOID data);
  1772                        ;//int reg_config( void );
  1773                        ;//typedef void (*DllMain)(UINT argc,LPVOID *argv)
                    ;
  1774                        ;typedef void (*DllMain)(LPCSTR segment);
  1775                        ;
  1776                        ;extern ULONG _system_timer;
  1777                        ;//static UCHAR floppybuffer[512];
  1778                        ;
  1779                        ;
  1780                        ;VOID k_new_event_loop(VOID);
  1781                        ;
  1782                        ;static int sync_mouse_time = 0x00FF;
  1783                        	data
  1784                        ~~sync_mouse_time:
  1785 00:0061: FF 00        	dw	$FF
  1786 00:0063:              	ends
  1787                        ;
  1788                        ;
  1789                        ;
  1790                        ;#include "fxeventmanager_keys.h"
  1791                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Mon Sep 27 2021  9:39                                                Page 35


                    space\FXOS-Beta\src\fxeventmanager_keys.h",0
  1792                        	data
  1793                        	xdef	~~_k_keyCodesSet
  1794                        ~~_k_keyCodesSet:
  1795 00:0063: 00 00 1B 00  	dw	$0,$1B,$31,$32,$33,$34,$35,$36,$37,$38
       00:0067: 31 00 32 00 
       00:006B: 33 00 34 00 
       00:006F: 35 00 36 00 
       00:0073: 37 00 38 00 
  1796 00:0077: 39 00 30 00  	dw	$39,$30,$2D,$3D,$8,$9,$71,$77,$65,$72
       00:007B: 2D 00 3D 00 
       00:007F: 08 00 09 00 
       00:0083: 71 00 77 00 
       00:0087: 65 00 72 00 
  1797 00:008B: 74 00 79 00  	dw	$74,$79,$75,$69,$6F,$70,$5B,$5D,$D,$0
       00:008F: 75 00 69 00 
       00:0093: 6F 00 70 00 
       00:0097: 5B 00 5D 00 
       00:009B: 0D 00 00 00 
  1798 00:009F: 61 00 73 00  	dw	$61,$73,$64,$66,$67,$68,$6A,$6B,$6C,$3B
       00:00A3: 64 00 66 00 
       00:00A7: 67 00 68 00 
       00:00AB: 6A 00 6B 00 
       00:00AF: 6C 00 3B 00 
  1799 00:00B3: 27 00 60 00  	dw	$27,$60,$0,$5C,$7A,$78,$63,$76,$62,$6E
       00:00B7: 00 00 5C 00 
       00:00BB: 7A 00 78 00 
       00:00BF: 63 00 76 00 
       00:00C3: 62 00 6E 00 
  1800 00:00C7: 6D 00 2C 00  	dw	$6D,$2C,$2E,$2F,$0,$2A,$0,$20,$0,$0
       00:00CB: 2E 00 2F 00 
       00:00CF: 00 00 2A 00 
       00:00D3: 00 00 20 00 
       00:00D7: 00 00 00 00 
  1801 00:00DB: 00 00 00 00  	dw	$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
       00:00DF: 00 00 00 00 
       00:00E3: 00 00 00 00 
       00:00E7: 00 00 00 00 
       00:00EB: 00 00 00 00 
  1802 00:00EF: 00 00 37 00  	dw	$0,$37,$38,$39,$2D,$34,$35,$36,$2B,$31
       00:00F3: 38 00 39 00 
       00:00F7: 2D 00 34 00 
       00:00FB: 35 00 36 00 
       00:00FF: 2B 00 31 00 
  1803 00:0103: 32 00 33 00  	dw	$32,$33,$30,$2E,$0,$0,$0,$0,$0
       00:0107: 30 00 2E 00 
       00:010B: 00 00 00 00 
       00:010F: 00 00 00 00 
       00:0113: 00 00 
  1804 00:0115:              	ends
  1805                        	data
  1806                        	xdef	~~_k_keyCodesShiftSet
  1807                        ~~_k_keyCodesShiftSet:
  1808 00:0115: 00 00 1B 00  	dw	$0,$1B,$21,$40,$23,$24,$25,$5E,$26,$2A
       00:0119: 21 00 40 00 
       00:011D: 23 00 24 00 
       00:0121: 25 00 5E 00 
       00:0125: 26 00 2A 00 
  Mon Sep 27 2021  9:39                                                Page 36


  1809 00:0129: 28 00 29 00  	dw	$28,$29,$5F,$2B,$8,$9,$51,$57,$45,$52
       00:012D: 5F 00 2B 00 
       00:0131: 08 00 09 00 
       00:0135: 51 00 57 00 
       00:0139: 45 00 52 00 
  1810 00:013D: 54 00 59 00  	dw	$54,$59,$55,$49,$4F,$50,$7B,$7D,$D,$0
       00:0141: 55 00 49 00 
       00:0145: 4F 00 50 00 
       00:0149: 7B 00 7D 00 
       00:014D: 0D 00 00 00 
  1811 00:0151: 41 00 53 00  	dw	$41,$53,$44,$46,$47,$48,$4A,$4B,$4C,$3A
       00:0155: 44 00 46 00 
       00:0159: 47 00 48 00 
       00:015D: 4A 00 4B 00 
       00:0161: 4C 00 3A 00 
  1812 00:0165: 22 00 7E 00  	dw	$22,$7E,$0,$7C,$5A,$58,$43,$56,$42,$4E
       00:0169: 00 00 7C 00 
       00:016D: 5A 00 58 00 
       00:0171: 43 00 56 00 
       00:0175: 42 00 4E 00 
  1813 00:0179: 4D 00 3C 00  	dw	$4D,$3C,$3E,$3F,$0,$2A,$0,$20,$0,$0
       00:017D: 3E 00 3F 00 
       00:0181: 00 00 2A 00 
       00:0185: 00 00 20 00 
       00:0189: 00 00 00 00 
  1814 00:018D: 00 00 00 00  	dw	$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
       00:0191: 00 00 00 00 
       00:0195: 00 00 00 00 
       00:0199: 00 00 00 00 
       00:019D: 00 00 00 00 
  1815 00:01A1: 00 00 37 00  	dw	$0,$37,$38,$39,$2D,$34,$35,$36,$2B,$31
       00:01A5: 38 00 39 00 
       00:01A9: 2D 00 34 00 
       00:01AD: 35 00 36 00 
       00:01B1: 2B 00 31 00 
  1816 00:01B5: 32 00 33 00  	dw	$32,$33,$30,$2E,$0,$0,$0,$0,$0
       00:01B9: 30 00 2E 00 
       00:01BD: 00 00 00 00 
       00:01C1: 00 00 00 00 
       00:01C5: 00 00 
  1817 00:01C7:              	ends
  1818                        	data
  1819                        	xdef	~~_k_keyCodesExtSet
  1820                        ~~_k_keyCodesExtSet:
  1821 00:01C7: 00 00        	dw	$0
  1822 00:01C9:              	ends
  1823                        	.line	195
  1824                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",102
  1825                        ;
  1826                        ;
  1827                        ;ULONG k_get_systemtimer(void)
  1828                        ;{
  1829                        	.line	105
  1830                        	.line	106
  1831                        	EVTMAN
  1832                        	xdef	~~k_get_systemtimer
  1833                        	func
  Mon Sep 27 2021  9:39                                                Page 37


  1834                        	.function	106
  1835                        ~~k_get_systemtimer:
  1836                        	longa	on
  1837                        	longi	on
  1838 05:0000: 3B           	tsc
  1839 05:0001: 38           	sec
  1840 05:0002: E9 04 00     	sbc	#L2
  1841 05:0005: 1B           	tcs
  1842 05:0006: 0B           	phd
  1843 05:0007: 5B           	tcd
  1844                        	.block	106
  1845                        ;	return _system_timer++;
  1846                        	.line	107
  1847 05:0008: AD xx xx     	lda	|~~_system_timer
  1848 05:000B: 85 01        	sta	<R0
  1849 05:000D: AD xx xx     	lda	|~~_system_timer+2
  1850 05:0010: 85 03        	sta	<R0+2
  1851 05:0012: EE xx xx     	inc	|~~_system_timer
  1852 05:0015: D0 03        	bne	L5
  1853 05:0017: EE xx xx     	inc	|~~_system_timer+2
  1854                        L5:
  1855 05:001A: A6 03        	ldx	<R0+2
  1856 05:001C: A5 01        	lda	<R0
  1857                        L6:
  1858 05:001E: A8           	tay
  1859 05:001F: 2B           	pld
  1860 05:0020: 3B           	tsc
  1861 05:0021: 18           	clc
  1862 05:0022: 69 04 00     	adc	#L2
  1863 05:0025: 1B           	tcs
  1864 05:0026: 98           	tya
  1865 05:0027: 6B           	rtl
  1866                        ;}
  1867                        	.line	108
  1868                        	.endblock	108
  1869             00000004   L2	equ	4
  1870             00000005   L3	equ	5
  1871 05:0028:              	ends
  1872                        	efunc
  1873                        	.endfunc	108,5,4
  1874                        	.line	108
  1875                        ;
  1876                        ;static LPVOID Init(VOID)
  1877                        ;{
  1878                        	.line	110
  1879                        	.line	111
  1880                        	EVTMAN
  1881                        	func
  1882                        	.function	111
  1883                        ~~Init:
  1884                        	longa	on
  1885                        	longi	on
  1886 05:0028: 3B           	tsc
  1887 05:0029: 38           	sec
  1888 05:002A: E9 00 00     	sbc	#L7
  1889 05:002D: 1B           	tcs
  1890 05:002E: 0B           	phd
  1891 05:002F: 5B           	tcd
  Mon Sep 27 2021  9:39                                                Page 38


  1892                        	.block	111
  1893                        ;	k_debug_string("EVENTMANAGER::Init()\r\n");
  1894                        	.line	112
  1895 05:0030: F4 xx xx     	pea	#^L1
  1896 05:0033: F4 xx xx     	pea	#<L1
  1897 05:0036: 22 xx xx xx  	jsl	~~k_debug_string
  1898                        ;	return NULL;
  1899                        	.line	113
  1900 05:003A: A9 00 00     	lda	#$0
  1901 05:003D: AA           	tax
  1902 05:003E: A9 00 00     	lda	#$0
  1903                        L10:
  1904 05:0041: A8           	tay
  1905 05:0042: 2B           	pld
  1906 05:0043: 3B           	tsc
  1907 05:0044: 18           	clc
  1908 05:0045: 69 00 00     	adc	#L7
  1909 05:0048: 1B           	tcs
  1910 05:0049: 98           	tya
  1911 05:004A: 6B           	rtl
  1912                        ;}
  1913                        	.line	114
  1914                        	.endblock	114
  1915             00000000   L7	equ	0
  1916             00000001   L8	equ	1
  1917 05:004B:              	ends
  1918                        	efunc
  1919                        	.endfunc	114,1,0
  1920                        	.line	114
  1921                        	data
  1922                        L1:
  1923 00:01C9: 45 56 45 4E  	db	$45,$56,$45,$4E,$54,$4D,$41,$4E,$41,$47,
                    $45,$52,$3A,$3A,$49
       00:01CD: 54 4D 41 4E 
       00:01D1: 41 47 45 52 
       00:01D5: 3A 3A 49 
  1924 00:01D8: 6E 69 74 28  	db	$6E,$69,$74,$28,$29,$0D,$0A,$00
       00:01DC: 29 0D 0A 00 
  1925 00:01E0:              	ends
  1926                        ;
  1927                        ;static VOID Uninit(VOID)
  1928                        ;{
  1929                        	.line	116
  1930                        	.line	117
  1931                        	EVTMAN
  1932                        	func
  1933                        	.function	117
  1934                        ~~Uninit:
  1935                        	longa	on
  1936                        	longi	on
  1937 05:004B: 3B           	tsc
  1938 05:004C: 38           	sec
  1939 05:004D: E9 00 00     	sbc	#L12
  1940 05:0050: 1B           	tcs
  1941 05:0051: 0B           	phd
  1942 05:0052: 5B           	tcd
  1943                        	.block	117
  1944                        ;	return;
  Mon Sep 27 2021  9:39                                                Page 39


  1945                        	.line	118
  1946                        L15:
  1947 05:0053: 2B           	pld
  1948 05:0054: 3B           	tsc
  1949 05:0055: 18           	clc
  1950 05:0056: 69 00 00     	adc	#L12
  1951 05:0059: 1B           	tcs
  1952 05:005A: 6B           	rtl
  1953                        ;}
  1954                        	.line	119
  1955                        	.endblock	119
  1956             00000000   L12	equ	0
  1957             00000001   L13	equ	1
  1958 05:005B:              	ends
  1959                        	efunc
  1960                        	.endfunc	119,1,0
  1961                        	.line	119
  1962                        ;
  1963                        ;static UINT Configure(UINT index,LPVOID ctx)
  1964                        ;{
  1965                        	.line	121
  1966                        	.line	122
  1967                        	EVTMAN
  1968                        	func
  1969                        	.function	122
  1970                        ~~Configure:
  1971                        	longa	on
  1972                        	longi	on
  1973 05:005B: 3B           	tsc
  1974 05:005C: 38           	sec
  1975 05:005D: E9 00 00     	sbc	#L16
  1976 05:0060: 1B           	tcs
  1977 05:0061: 0B           	phd
  1978 05:0062: 5B           	tcd
  1979             00000004   index_0	set	4
  1980             00000006   ctx_0	set	6
  1981                        	.block	122
  1982                        ;	return 0;
  1983                        	.sym	index,4,16,6,16
  1984                        	.sym	ctx,6,129,6,32
  1985                        	.line	123
  1986 05:0063: A9 00 00     	lda	#$0
  1987                        L19:
  1988 05:0066: A8           	tay
  1989 05:0067: A5 02        	lda	<L16+2
  1990 05:0069: 85 08        	sta	<L16+2+6
  1991 05:006B: A5 01        	lda	<L16+1
  1992 05:006D: 85 07        	sta	<L16+1+6
  1993 05:006F: 2B           	pld
  1994 05:0070: 3B           	tsc
  1995 05:0071: 18           	clc
  1996 05:0072: 69 06 00     	adc	#L16+6
  1997 05:0075: 1B           	tcs
  1998 05:0076: 98           	tya
  1999 05:0077: 6B           	rtl
  2000                        ;}
  2001                        	.line	124
  2002                        	.endblock	124
  Mon Sep 27 2021  9:39                                                Page 40


  2003             00000000   L16	equ	0
  2004             00000001   L17	equ	1
  2005 05:0078:              	ends
  2006                        	efunc
  2007                        	.endfunc	124,1,0
  2008                        	.line	124
  2009                        ;
  2010                        ;static UINT Query(UINT index)
  2011                        ;{
  2012                        	.line	126
  2013                        	.line	127
  2014                        	EVTMAN
  2015                        	func
  2016                        	.function	127
  2017                        ~~Query:
  2018                        	longa	on
  2019                        	longi	on
  2020 05:0078: 3B           	tsc
  2021 05:0079: 38           	sec
  2022 05:007A: E9 00 00     	sbc	#L20
  2023 05:007D: 1B           	tcs
  2024 05:007E: 0B           	phd
  2025 05:007F: 5B           	tcd
  2026             00000004   index_0	set	4
  2027                        	.block	127
  2028                        ;	switch(index)
  2029                        	.sym	index,4,16,6,16
  2030                        	.line	128
  2031 05:0080: A5 04        	lda	<L20+index_0
  2032 05:0082: 82 1B 00     	brl	L10001
  2033                        ;	{
  2034                        	.line	129
  2035                        ;	case EV_QUERY_VERSION_MAJOR:
  2036                        	.line	130
  2037                        L10003:
  2038                        ;		return 5;
  2039                        	.line	131
  2040 05:0085: A9 05 00     	lda	#$5
  2041                        L23:
  2042 05:0088: A8           	tay
  2043 05:0089: A5 02        	lda	<L20+2
  2044 05:008B: 85 04        	sta	<L20+2+2
  2045 05:008D: A5 01        	lda	<L20+1
  2046 05:008F: 85 03        	sta	<L20+1+2
  2047 05:0091: 2B           	pld
  2048 05:0092: 3B           	tsc
  2049 05:0093: 18           	clc
  2050 05:0094: 69 02 00     	adc	#L20+2
  2051 05:0097: 1B           	tcs
  2052 05:0098: 98           	tya
  2053 05:0099: 6B           	rtl
  2054                        ;	case EV_QUERY_VERSION_MINOR:
  2055                        	.line	132
  2056                        L10004:
  2057                        ;		return 0;
  2058                        	.line	133
  2059 05:009A: A9 00 00     	lda	#$0
  2060 05:009D: 82 E8 FF     	brl	L23
  Mon Sep 27 2021  9:39                                                Page 41


  2061                        ;	}
  2062                        	.line	134
  2063                        L10001:
  2064                        	xref	~~~swt
  2065 05:00A0: 22 xx xx xx  	jsl	~~~swt
  2066 05:00A4: 02 00        	dw	2
  2067 05:00A6: 00 00        	dw	0
  2068 05:00A8: 84 00        	dw	L10003-1
  2069 05:00AA: 01 00        	dw	1
  2070 05:00AC: 99 00        	dw	L10004-1
  2071 05:00AE: AF 00        	dw	L10002-1
  2072                        L10002:
  2073                        ;
  2074                        ;	return -1;
  2075                        	.line	136
  2076 05:00B0: A9 FF FF     	lda	#$ffff
  2077 05:00B3: 82 D2 FF     	brl	L23
  2078                        ;}
  2079                        	.line	137
  2080                        	.endblock	137
  2081             00000000   L20	equ	0
  2082             00000001   L21	equ	1
  2083 05:00B6:              	ends
  2084                        	efunc
  2085                        	.endfunc	137,1,0
  2086                        	.line	137
  2087                        ;
  2088                        ;static UINT Run(LPVOID context)
  2089                        ;{
  2090                        	.line	139
  2091                        	.line	140
  2092                        	EVTMAN
  2093                        	func
  2094                        	.function	140
  2095                        ~~Run:
  2096                        	longa	on
  2097                        	longi	on
  2098 05:00B6: 3B           	tsc
  2099 05:00B7: 38           	sec
  2100 05:00B8: E9 00 00     	sbc	#L24
  2101 05:00BB: 1B           	tcs
  2102 05:00BC: 0B           	phd
  2103 05:00BD: 5B           	tcd
  2104             00000004   context_0	set	4
  2105                        	.block	140
  2106                        ;	k_debug_string("EVENTMANAGER::Run():Enter\r\n");
  2107                        	.sym	context,4,129,6,32
  2108                        	.line	141
  2109 05:00BE: F4 xx xx     	pea	#^L11
  2110 05:00C1: F4 xx xx     	pea	#<L11
  2111 05:00C4: 22 xx xx xx  	jsl	~~k_debug_string
  2112                        ;
  2113                        ;	if(_k_eventQueue!=NULL)
  2114                        	.line	143
  2115                        ;	{
  2116 05:00C8: AD xx xx     	lda	|~~_k_eventQueue
  2117 05:00CB: 0D xx xx     	ora	|~~_k_eventQueue+2
  2118 05:00CE: D0 03        	bne	L27
  Mon Sep 27 2021  9:39                                                Page 42


  2119 05:00D0: 82 0C 00     	brl	L10005
  2120                        L27:
  2121                        	.line	144
  2122                        ;		k_initialize(_k_eventQueue);
  2123                        	.line	145
  2124 05:00D3: AD xx xx     	lda	|~~_k_eventQueue+2
  2125 05:00D6: 48           	pha
  2126 05:00D7: AD xx xx     	lda	|~~_k_eventQueue
  2127 05:00DA: 48           	pha
  2128 05:00DB: 22 xx xx xx  	jsl	~~k_initialize
  2129                        ;	}
  2130                        	.line	146
  2131                        ;
  2132                        ;	k_heap_integrity_check();
  2133                        L10005:
  2134                        	.line	148
  2135 05:00DF: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  2136                        ;
  2137                        ;	k_register_idle_proc(IdleCleanup,IDLE_PRIORITY_N
                    ORMAL);
  2138                        	.line	150
  2139 05:00E3: F4 00 00     	pea	#<$0
  2140 05:00E6: F4 05 00     	pea	#^~~IdleCleanup
  2141 05:00E9: F4 53 27     	pea	#<~~IdleCleanup
  2142 05:00EC: 22 57 25 05  	jsl	~~k_register_idle_proc
  2143                        ;	//k_register_idle_proc(DeviceChecks,IDLE_PRIORIT
                    Y_NORMAL);
  2144                        ;	k_register_idle_proc(_k_async_keyboard,IDLE_PRIO
                    RITY_HIGH);
  2145                        	.line	152
  2146 05:00F0: F4 01 00     	pea	#<$1
  2147 05:00F3: F4 05 00     	pea	#^~~_k_async_keyboard
  2148 05:00F6: F4 39 29     	pea	#<~~_k_async_keyboard
  2149 05:00F9: 22 57 25 05  	jsl	~~k_register_idle_proc
  2150                        ;	//k_register_idle_proc(_k_async_mouse,IDLE_PRIOR
                    ITY_HIGH);
  2151                        ;	//k_register_idle_proc(_k_async_debug,IDLE_PRIOR
                    ITY_HIGH);
  2152                        ;	//k_register_idle_proc(_k_async_execute,IDLE_PRI
                    ORITY_HIGH);
  2153                        ;
  2154                        ;	k_new_event_loop();
  2155                        	.line	157
  2156 05:00FD: 22 18 03 05  	jsl	~~k_new_event_loop
  2157                        ;
  2158                        ;	k_debug_string("EVENTMANAGER::Run():Exit\r\n");
  2159                        	.line	159
  2160 05:0101: F4 xx xx     	pea	#^L11+28
  2161 05:0104: F4 xx xx     	pea	#<L11+28
  2162 05:0107: 22 xx xx xx  	jsl	~~k_debug_string
  2163                        ;
  2164                        ;	return 0;
  2165                        	.line	161
  2166 05:010B: A9 00 00     	lda	#$0
  2167                        L28:
  2168 05:010E: A8           	tay
  2169 05:010F: A5 02        	lda	<L24+2
  2170 05:0111: 85 06        	sta	<L24+2+4
  Mon Sep 27 2021  9:39                                                Page 43


  2171 05:0113: A5 01        	lda	<L24+1
  2172 05:0115: 85 05        	sta	<L24+1+4
  2173 05:0117: 2B           	pld
  2174 05:0118: 3B           	tsc
  2175 05:0119: 18           	clc
  2176 05:011A: 69 04 00     	adc	#L24+4
  2177 05:011D: 1B           	tcs
  2178 05:011E: 98           	tya
  2179 05:011F: 6B           	rtl
  2180                        ;}
  2181                        	.line	162
  2182                        	.endblock	162
  2183             00000000   L24	equ	0
  2184             00000001   L25	equ	1
  2185 05:0120:              	ends
  2186                        	efunc
  2187                        	.endfunc	162,1,0
  2188                        	.line	162
  2189                        	data
  2190                        L11:
  2191 00:01E0: 45 56 45 4E  	db	$45,$56,$45,$4E,$54,$4D,$41,$4E,$41,$47,
                    $45,$52,$3A,$3A,$52
       00:01E4: 54 4D 41 4E 
       00:01E8: 41 47 45 52 
       00:01EC: 3A 3A 52 
  2192 00:01EF: 75 6E 28 29  	db	$75,$6E,$28,$29,$3A,$45,$6E,$74,$65,$72,
                    $0D,$0A,$00,$45,$56
       00:01F3: 3A 45 6E 74 
       00:01F7: 65 72 0D 0A 
       00:01FB: 00 45 56 
  2193 00:01FE: 45 4E 54 4D  	db	$45,$4E,$54,$4D,$41,$4E,$41,$47,$45,$52,
                    $3A,$3A,$52,$75,$6E
       00:0202: 41 4E 41 47 
       00:0206: 45 52 3A 3A 
       00:020A: 52 75 6E 
  2194 00:020D: 28 29 3A 45  	db	$28,$29,$3A,$45,$78,$69,$74,$0D,$0A,$00
       00:0211: 78 69 74 0D 
       00:0215: 0A 00 
  2195 00:0217:              	ends
  2196                        ;
  2197                        ;
  2198                        ;PEVENTMANAGER k_initalize_event_manager(UINT boot
                    Mode)
  2199                        ;{
  2200                        	.line	165
  2201                        	.line	166
  2202                        	EVTMAN
  2203                        	xdef	~~k_initalize_event_manager
  2204                        	func
  2205                        	.function	166
  2206                        ~~k_initalize_event_manager:
  2207                        	longa	on
  2208                        	longi	on
  2209 05:0120: 3B           	tsc
  2210 05:0121: 38           	sec
  2211 05:0122: E9 04 00     	sbc	#L30
  2212 05:0125: 1B           	tcs
  2213 05:0126: 0B           	phd
  Mon Sep 27 2021  9:39                                                Page 44


  2214 05:0127: 5B           	tcd
  2215             00000004   bootMode_0	set	4
  2216                        	.block	166
  2217                        ;	memset(&_k_mouseState,0,sizeof(MOUSE_MSG_STATE))
                    ;
  2218                        	.sym	bootMode,4,16,6,16
  2219                        	.line	167
  2220 05:0128: F4 17 00     	pea	#<$17
  2221 05:012B: F4 00 00     	pea	#<$0
  2222 05:012E: A9 xx xx     	lda	#<~~_k_mouseState
  2223 05:0131: 85 01        	sta	<R0
  2224                        	xref	_BEG_DATA
  2225 05:0133: A9 xx xx     	lda	#_BEG_DATA>>16
  2226 05:0136: 85 03        	sta	<R0+2
  2227 05:0138: D4 03        	pei	<R0+2
  2228 05:013A: D4 01        	pei	<R0
  2229 05:013C: 22 xx xx xx  	jsl	~~memset
  2230                        ;
  2231                        ;	_k_bootMode = bootMode;
  2232                        	.line	169
  2233 05:0140: A5 08        	lda	<L30+bootMode_0
  2234 05:0142: 8D xx xx     	sta	|~~_k_bootMode
  2235                        ;
  2236                        ;	_k_eventManager_IdleProcList = k_nodelist_alloca
                    te_list("_events_idleproc_list",NODELIST_NO_DEALLOC);
  2237                        	.line	171
  2238 05:0145: F4 00 00     	pea	#^$0
  2239 05:0148: F4 00 00     	pea	#<$0
  2240 05:014B: F4 xx xx     	pea	#^L29
  2241 05:014E: F4 xx xx     	pea	#<L29
  2242 05:0151: 22 xx xx xx  	jsl	~~k_nodelist_allocate_list
  2243 05:0155: 8D xx xx     	sta	|~~_k_eventManager_IdleProcList
  2244 05:0158: 8E xx xx     	stx	|~~_k_eventManager_IdleProcList+2
  2245                        ;
  2246                        ;	_k_eventQueue = k_mem_allocate_heap(sizeof(FXQUE
                    UE));
  2247                        	.line	173
  2248 05:015B: F4 00 00     	pea	#^$a
  2249 05:015E: F4 0A 00     	pea	#<$a
  2250 05:0161: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2251 05:0165: 8D xx xx     	sta	|~~_k_eventQueue
  2252 05:0168: 8E xx xx     	stx	|~~_k_eventQueue+2
  2253                        ;
  2254                        ;	_k_irq_events = k_mem_allocate_heap(sizeof(FXOSM
                    ESSAGE) * 256);
  2255                        	.line	175
  2256 05:016B: F4 00 00     	pea	#^$2700
  2257 05:016E: F4 00 27     	pea	#<$2700
  2258 05:0171: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2259 05:0175: 8D xx xx     	sta	|~~_k_irq_events
  2260 05:0178: 8E xx xx     	stx	|~~_k_irq_events+2
  2261                        ;	k_debug_pointer("_k_irq_events:",_k_irq_events);
  2262                        	.line	176
  2263 05:017B: AD xx xx     	lda	|~~_k_irq_events+2
  2264 05:017E: 48           	pha
  2265 05:017F: AD xx xx     	lda	|~~_k_irq_events
  2266 05:0182: 48           	pha
  2267 05:0183: F4 xx xx     	pea	#^L29+22
  Mon Sep 27 2021  9:39                                                Page 45


  2268 05:0186: F4 xx xx     	pea	#<L29+22
  2269 05:0189: 22 xx xx xx  	jsl	~~k_debug_pointer
  2270                        ;	/*
  2271                        ;	if(_k_eventQueue!=NULL)
  2272                        ;	{
  2273                        ;		k_initialize(_k_eventQueue);
  2274                        ;	}
  2275                        ;
  2276                        ;
  2277                        ;	k_register_idle_proc(IdleCleanup,IDLE_PRIORITY_N
                    ORMAL);
  2278                        ;	k_register_idle_proc(DeviceChecks,IDLE_PRIORITY_
                    NORMAL);
  2279                        ;	k_register_idle_proc(_k_async_keyboard,IDLE_PRIO
                    RITY_HIGH);
  2280                        ;	k_register_idle_proc(_k_async_mouse,IDLE_PRIORIT
                    Y_HIGH);
  2281                        ;	k_register_idle_proc(_k_async_debug,IDLE_PRIORIT
                    Y_HIGH);
  2282                        ;	*/
  2283                        ;
  2284                        ;	_k_eventmanager.EventQueue  = _k_eventQueue;
  2285                        	.line	191
  2286 05:018D: AD xx xx     	lda	|~~_k_eventQueue
  2287 05:0190: 8D xx xx     	sta	|~~_k_eventmanager
  2288 05:0193: AD xx xx     	lda	|~~_k_eventQueue+2
  2289 05:0196: 8D xx xx     	sta	|~~_k_eventmanager+2
  2290                        ;	_k_eventmanager.Init 		= Init;
  2291                        	.line	192
  2292 05:0199: A9 28 00     	lda	#<~~Init
  2293 05:019C: 8D xx xx     	sta	|~~_k_eventmanager+4
  2294 05:019F: A9 05 00     	lda	#^~~Init
  2295 05:01A2: 8D xx xx     	sta	|~~_k_eventmanager+4+2
  2296                        ;	_k_eventmanager.Run 		= Run;
  2297                        	.line	193
  2298 05:01A5: A9 B6 00     	lda	#<~~Run
  2299 05:01A8: 8D xx xx     	sta	|~~_k_eventmanager+8
  2300 05:01AB: A9 05 00     	lda	#^~~Run
  2301 05:01AE: 8D xx xx     	sta	|~~_k_eventmanager+8+2
  2302                        ;	_k_eventmanager.Configure 	= Configure;
  2303                        	.line	194
  2304 05:01B1: A9 5B 00     	lda	#<~~Configure
  2305 05:01B4: 8D xx xx     	sta	|~~_k_eventmanager+12
  2306 05:01B7: A9 05 00     	lda	#^~~Configure
  2307 05:01BA: 8D xx xx     	sta	|~~_k_eventmanager+12+2
  2308                        ;	_k_eventmanager.Query 		= Query;
  2309                        	.line	195
  2310 05:01BD: A9 78 00     	lda	#<~~Query
  2311 05:01C0: 8D xx xx     	sta	|~~_k_eventmanager+16
  2312 05:01C3: A9 05 00     	lda	#^~~Query
  2313 05:01C6: 8D xx xx     	sta	|~~_k_eventmanager+16+2
  2314                        ;	_k_eventmanager.Uninit 	    = Uninit;
  2315                        	.line	196
  2316 05:01C9: A9 4B 00     	lda	#<~~Uninit
  2317 05:01CC: 8D xx xx     	sta	|~~_k_eventmanager+20
  2318 05:01CF: A9 05 00     	lda	#^~~Uninit
  2319 05:01D2: 8D xx xx     	sta	|~~_k_eventmanager+20+2
  2320                        ;
  Mon Sep 27 2021  9:39                                                Page 46


  2321                        ;	return &_k_eventmanager;
  2322                        	.line	198
  2323 05:01D5: A9 xx xx     	lda	#<~~_k_eventmanager
  2324 05:01D8: 85 01        	sta	<R0
  2325                        	xref	_BEG_DATA
  2326 05:01DA: A9 xx xx     	lda	#_BEG_DATA>>16
  2327 05:01DD: 85 03        	sta	<R0+2
  2328 05:01DF: A6 03        	ldx	<R0+2
  2329 05:01E1: A5 01        	lda	<R0
  2330                        L33:
  2331 05:01E3: A8           	tay
  2332 05:01E4: A5 06        	lda	<L30+2
  2333 05:01E6: 85 08        	sta	<L30+2+2
  2334 05:01E8: A5 05        	lda	<L30+1
  2335 05:01EA: 85 07        	sta	<L30+1+2
  2336 05:01EC: 2B           	pld
  2337 05:01ED: 3B           	tsc
  2338 05:01EE: 18           	clc
  2339 05:01EF: 69 06 00     	adc	#L30+2
  2340 05:01F2: 1B           	tcs
  2341 05:01F3: 98           	tya
  2342 05:01F4: 6B           	rtl
  2343                        ;}
  2344                        	.line	199
  2345                        	.endblock	199
  2346             00000004   L30	equ	4
  2347             00000005   L31	equ	5
  2348 05:01F5:              	ends
  2349                        	efunc
  2350                        	.endfunc	199,5,4
  2351                        	.line	199
  2352                        	data
  2353                        L29:
  2354 00:0217: 5F 65 76 65  	db	$5F,$65,$76,$65,$6E,$74,$73,$5F,$69,$64,
                    $6C,$65,$70,$72,$6F
       00:021B: 6E 74 73 5F 
       00:021F: 69 64 6C 65 
       00:0223: 70 72 6F 
  2355 00:0226: 63 5F 6C 69  	db	$63,$5F,$6C,$69,$73,$74,$00,$5F,$6B,$5F,
                    $69,$72,$71,$5F,$65
       00:022A: 73 74 00 5F 
       00:022E: 6B 5F 69 72 
       00:0232: 71 5F 65 
  2356 00:0235: 76 65 6E 74  	db	$76,$65,$6E,$74,$73,$3A,$00
       00:0239: 73 3A 00 
  2357 00:023C:              	ends
  2358                        ;
  2359                        ;void k_signal_sol_event(long FAR *pktick)
  2360                        ;{
  2361                        	.line	201
  2362                        	.line	202
  2363                        	EVTMAN
  2364                        	xdef	~~k_signal_sol_event
  2365                        	func
  2366                        	.function	202
  2367                        ~~k_signal_sol_event:
  2368                        	longa	on
  2369                        	longi	on
  Mon Sep 27 2021  9:39                                                Page 47


  2370 05:01F5: 3B           	tsc
  2371 05:01F6: 38           	sec
  2372 05:01F7: E9 00 00     	sbc	#L35
  2373 05:01FA: 1B           	tcs
  2374 05:01FB: 0B           	phd
  2375 05:01FC: 5B           	tcd
  2376             00000004   pktick_0	set	4
  2377                        	.block	202
  2378                        ;
  2379                        ;	return;
  2380                        	.sym	pktick,4,135,6,32
  2381                        	.line	204
  2382                        L38:
  2383 05:01FD: A5 02        	lda	<L35+2
  2384 05:01FF: 85 06        	sta	<L35+2+4
  2385 05:0201: A5 01        	lda	<L35+1
  2386 05:0203: 85 05        	sta	<L35+1+4
  2387 05:0205: 2B           	pld
  2388 05:0206: 3B           	tsc
  2389 05:0207: 18           	clc
  2390 05:0208: 69 04 00     	adc	#L35+4
  2391 05:020B: 1B           	tcs
  2392 05:020C: 6B           	rtl
  2393                        ;}
  2394                        	.line	205
  2395                        	.endblock	205
  2396             00000000   L35	equ	0
  2397             00000001   L36	equ	1
  2398 05:020D:              	ends
  2399                        	efunc
  2400                        	.endfunc	205,1,0
  2401                        	.line	205
  2402                        ;
  2403                        ;
  2404                        ;
  2405                        ;//
  2406                        ;//
  2407                        ;//
  2408                        ;
  2409                        ;
  2410                        ;/*
  2411                        ; *
  2412                        ; 			pmsg->data[0] = ((LPSTR)
                    data)[0]; // scanCode
  2413                        ;			pmsg->data[1] = ((LPSTR)data)[1]
                    ; // isShifted
  2414                        ;			pmsg->data[2] = ((LPSTR)data)[2]
                    ; // isAlt
  2415                        ;			pmsg->data[3] = ((LPSTR)data)[3]
                    ; // isExtended
  2416                        ;			pmsg->data[4] = ((LPSTR)data)[4]
                    ; // isCapsLock
  2417                        ;			pmsg->data[5] = ((LPSTR)data)[5]
                    ; // isNumLock
  2418                        ;			pmsg->data[6] = ((LPSTR)data)[6]
                    ; // isScrollLock
  2419                        ;			pmsg->data[7] = ((LPSTR)data)[7]
                    ; // keyChar
  Mon Sep 27 2021  9:39                                                Page 48


  2420                        ;			pmsg->data[8] = ((LPSTR)data)[8]
                    ; // keyChar
  2421                        ;			/*
  2422                        ;
  2423                        ; */
  2424                        ;
  2425                        ;static PFXOSMESSAGE k_translateKeyMessage(PFXOSME
                    SSAGE pmsg)
  2426                        ;{
  2427                        	.line	229
  2428                        	.line	230
  2429                        	EVTMAN
  2430                        	func
  2431                        	.function	230
  2432                        ~~k_translateKeyMessage:
  2433                        	longa	on
  2434                        	longi	on
  2435 05:020D: 3B           	tsc
  2436 05:020E: 38           	sec
  2437 05:020F: E9 12 00     	sbc	#L39
  2438 05:0212: 1B           	tcs
  2439 05:0213: 0B           	phd
  2440 05:0214: 5B           	tcd
  2441             00000004   pmsg_0	set	4
  2442                        	.block	230
  2443                        ;	KEYCODE kc = 0;
  2444                        ;	KEYCODE cc = 0;
  2445                        ;	//KEYCODE data[2];
  2446                        ;	MSGTYPE type = FX_KEY_DOWN;
  2447                        ;	int pos = 0;
  2448                        ;	int exsize = (sizeof(extendedLookup)/(sizeof(KEY
                    CODE)*2));
  2449                        ;
  2450                        ;	if(pmsg->type == FX_KEY_SCANCODE)
  2451             00000000   kc_1	set	0
  2452             00000002   cc_1	set	2
  2453             00000004   type_1	set	4
  2454             00000006   pos_1	set	6
  2455             00000008   exsize_1	set	8
  2456                        	.sym	kc,0,16,1,16
  2457                        	.sym	cc,2,16,1,16
  2458                        	.sym	type,4,16,1,16
  2459                        	.sym	pos,6,5,1,16
  2460                        	.sym	exsize,8,5,1,16
  2461                        	.sym	pmsg,4,138,6,32,16
  2462 05:0215: 64 09        	stz	<L40+kc_1
  2463 05:0217: 64 0B        	stz	<L40+cc_1
  2464 05:0219: A9 10 0F     	lda	#$f10
  2465 05:021C: 85 0D        	sta	<L40+type_1
  2466 05:021E: 64 0F        	stz	<L40+pos_1
  2467 05:0220: A9 08 00     	lda	#$8
  2468 05:0223: 85 11        	sta	<L40+exsize_1
  2469                        	.line	238
  2470                        ;	{
  2471 05:0225: A0 08 00     	ldy	#$8
  2472 05:0228: B7 16        	lda	[<L39+pmsg_0],Y
  2473 05:022A: C9 15 0F     	cmp	#<$f15
  2474 05:022D: F0 03        	beq	L42
  Mon Sep 27 2021  9:39                                                Page 49


  2475 05:022F: 82 D0 00     	brl	L10006
  2476                        L42:
  2477                        	.line	239
  2478                        ;		kc = ((PKEYSTATE)pmsg->data)->scanCode;
  2479                        	.line	240
  2480 05:0232: A0 16 00     	ldy	#$16
  2481 05:0235: B7 16        	lda	[<L39+pmsg_0],Y
  2482 05:0237: 29 FF 00     	and	#$ff
  2483 05:023A: 85 09        	sta	<L40+kc_1
  2484                        ;		cc = ((PKEYSTATE)pmsg->data)->keyChar;
  2485                        	.line	241
  2486 05:023C: A0 1D 00     	ldy	#$1d
  2487 05:023F: B7 16        	lda	[<L39+pmsg_0],Y
  2488 05:0241: 85 0B        	sta	<L40+cc_1
  2489                        ;
  2490                        ;		//k_debug_hex("=========================
                    = processMessageCracker:kc:",kc);
  2491                        ;		//k_debug_integer("=====================
                    ===== processMessageCracker:cc:", cc );
  2492                        ;
  2493                        ;		if(pmsg->data[0])
  2494                        	.line	246
  2495                        ;		{
  2496 05:0243: A0 16 00     	ldy	#$16
  2497 05:0246: B7 16        	lda	[<L39+pmsg_0],Y
  2498 05:0248: 29 FF 00     	and	#$ff
  2499 05:024B: D0 03        	bne	L43
  2500 05:024D: 82 B2 00     	brl	L10007
  2501                        L43:
  2502                        	.line	247
  2503                        ;			kc = pmsg->data[0];
  2504                        	.line	248
  2505 05:0250: A0 16 00     	ldy	#$16
  2506 05:0253: B7 16        	lda	[<L39+pmsg_0],Y
  2507 05:0255: 29 FF 00     	and	#$ff
  2508 05:0258: 85 09        	sta	<L40+kc_1
  2509                        ;
  2510                        ;
  2511                        ;			if(pmsg->data[3])
  2512                        	.line	251
  2513                        ;			{
  2514 05:025A: A0 19 00     	ldy	#$19
  2515 05:025D: B7 16        	lda	[<L39+pmsg_0],Y
  2516 05:025F: 29 FF 00     	and	#$ff
  2517 05:0262: D0 03        	bne	L44
  2518 05:0264: 82 52 00     	brl	L10008
  2519                        L44:
  2520                        	.line	252
  2521                        ;				kc+=0xE000;
  2522                        	.line	253
  2523 05:0267: 18           	clc
  2524 05:0268: A9 00 E0     	lda	#$e000
  2525 05:026B: 65 09        	adc	<L40+kc_1
  2526 05:026D: 85 09        	sta	<L40+kc_1
  2527                        ;
  2528                        ;				for(pos = 0;pos<(exsize)
                    ;pos++)
  2529                        	.line	255
  Mon Sep 27 2021  9:39                                                Page 50


  2530 05:026F: 64 0F        	stz	<L40+pos_1
  2531 05:0271: 82 24 00     	brl	L10012
  2532                        L10011:
  2533                        ;				{
  2534                        	.line	256
  2535                        ;					if(extendedLooku
                    p[pos][0] == kc)
  2536                        	.line	257
  2537                        ;					{
  2538 05:0274: A5 0F        	lda	<L40+pos_1
  2539 05:0276: 0A           	asl	A
  2540 05:0277: 0A           	asl	A
  2541 05:0278: 85 01        	sta	<R0
  2542 05:027A: A6 01        	ldx	<R0
  2543 05:027C: BD xx xx     	lda	|~~extendedLookup,X
  2544 05:027F: C5 09        	cmp	<L40+kc_1
  2545 05:0281: F0 03        	beq	L45
  2546 05:0283: 82 10 00     	brl	L10013
  2547                        L45:
  2548                        	.line	258
  2549                        ;						kc = ext
                    endedLookup[pos][1];
  2550                        	.line	259
  2551 05:0286: A5 0F        	lda	<L40+pos_1
  2552 05:0288: 0A           	asl	A
  2553 05:0289: 0A           	asl	A
  2554 05:028A: 85 01        	sta	<R0
  2555 05:028C: A6 01        	ldx	<R0
  2556 05:028E: BD xx xx     	lda	|~~extendedLookup+2,X
  2557 05:0291: 85 09        	sta	<L40+kc_1
  2558                        ;						break;
  2559                        	.line	260
  2560 05:0293: 82 11 00     	brl	L10010
  2561                        ;					}
  2562                        	.line	261
  2563                        ;				}
  2564                        L10013:
  2565                        	.line	262
  2566                        L10009:
  2567 05:0296: E6 0F        	inc	<L40+pos_1
  2568                        L10012:
  2569 05:0298: 38           	sec
  2570 05:0299: A5 0F        	lda	<L40+pos_1
  2571 05:029B: E5 11        	sbc	<L40+exsize_1
  2572 05:029D: 70 03        	bvs	L46
  2573 05:029F: 49 00 80     	eor	#$8000
  2574                        L46:
  2575 05:02A2: 30 03        	bmi	L47
  2576 05:02A4: 82 CD FF     	brl	L10011
  2577                        L47:
  2578                        L10010:
  2579                        ;				if(kc & 0x1000)
  2580                        	.line	263
  2581                        ;				{
  2582 05:02A7: A5 09        	lda	<L40+kc_1
  2583 05:02A9: 29 00 10     	and	#<$1000
  2584 05:02AC: D0 03        	bne	L48
  2585 05:02AE: 82 05 00     	brl	L10014
  Mon Sep 27 2021  9:39                                                Page 51


  2586                        L48:
  2587                        	.line	264
  2588                        ;					type = FX_KEY_UP
                    ;
  2589                        	.line	265
  2590 05:02B1: A9 12 0F     	lda	#$f12
  2591 05:02B4: 85 0D        	sta	<L40+type_1
  2592                        ;				}
  2593                        	.line	266
  2594                        ;			}
  2595                        L10014:
  2596                        	.line	267
  2597                        ;			else
  2598 05:02B6: 82 0F 00     	brl	L10015
  2599                        L10008:
  2600                        ;			{
  2601                        	.line	269
  2602                        ;				if(kc & 128)
  2603                        	.line	270
  2604                        ;				{
  2605 05:02B9: A5 09        	lda	<L40+kc_1
  2606 05:02BB: 29 80 00     	and	#<$80
  2607 05:02BE: D0 03        	bne	L49
  2608 05:02C0: 82 05 00     	brl	L10016
  2609                        L49:
  2610                        	.line	271
  2611                        ;					type = FX_KEY_UP
                    ;
  2612                        	.line	272
  2613 05:02C3: A9 12 0F     	lda	#$f12
  2614 05:02C6: 85 0D        	sta	<L40+type_1
  2615                        ;				}
  2616                        	.line	273
  2617                        ;			}
  2618                        L10016:
  2619                        	.line	274
  2620                        L10015:
  2621                        ;			k_enqueue(_k_eventQueue,k_create
                    _synthetic_window_msg(pmsg->hwnd,type,pmsg->data,sizeof(KEYS
                    TATE)));
  2622                        	.line	275
  2623 05:02C8: F4 0E 00     	pea	#<$e
  2624 05:02CB: 18           	clc
  2625 05:02CC: A9 16 00     	lda	#$16
  2626 05:02CF: 65 16        	adc	<L39+pmsg_0
  2627 05:02D1: 85 01        	sta	<R0
  2628 05:02D3: A9 00 00     	lda	#$0
  2629 05:02D6: 65 18        	adc	<L39+pmsg_0+2
  2630 05:02D8: 85 03        	sta	<R0+2
  2631 05:02DA: D4 03        	pei	<R0+2
  2632 05:02DC: D4 01        	pei	<R0
  2633 05:02DE: D4 0D        	pei	<L40+type_1
  2634 05:02E0: A0 0C 00     	ldy	#$c
  2635 05:02E3: B7 16        	lda	[<L39+pmsg_0],Y
  2636 05:02E5: 48           	pha
  2637 05:02E6: A0 0A 00     	ldy	#$a
  2638 05:02E9: B7 16        	lda	[<L39+pmsg_0],Y
  2639 05:02EB: 48           	pha
  Mon Sep 27 2021  9:39                                                Page 52


  2640 05:02EC: 22 7D 20 05  	jsl	~~k_create_synthetic_window_msg
  2641 05:02F0: 85 05        	sta	<R1
  2642 05:02F2: 86 07        	stx	<R1+2
  2643 05:02F4: DA           	phx
  2644 05:02F5: 48           	pha
  2645 05:02F6: AD xx xx     	lda	|~~_k_eventQueue+2
  2646 05:02F9: 48           	pha
  2647 05:02FA: AD xx xx     	lda	|~~_k_eventQueue
  2648 05:02FD: 48           	pha
  2649 05:02FE: 22 xx xx xx  	jsl	~~k_enqueue
  2650                        ;		}
  2651                        	.line	276
  2652                        ;	}
  2653                        L10007:
  2654                        	.line	277
  2655                        ;
  2656                        ;	return pmsg;
  2657                        L10006:
  2658                        	.line	279
  2659 05:0302: A6 18        	ldx	<L39+pmsg_0+2
  2660 05:0304: A5 16        	lda	<L39+pmsg_0
  2661                        L50:
  2662 05:0306: A8           	tay
  2663 05:0307: A5 14        	lda	<L39+2
  2664 05:0309: 85 18        	sta	<L39+2+4
  2665 05:030B: A5 13        	lda	<L39+1
  2666 05:030D: 85 17        	sta	<L39+1+4
  2667 05:030F: 2B           	pld
  2668 05:0310: 3B           	tsc
  2669 05:0311: 18           	clc
  2670 05:0312: 69 16 00     	adc	#L39+4
  2671 05:0315: 1B           	tcs
  2672 05:0316: 98           	tya
  2673 05:0317: 6B           	rtl
  2674                        ;}
  2675                        	.line	280
  2676                        	.endblock	280
  2677             00000012   L39	equ	18
  2678             00000009   L40	equ	9
  2679 05:0318:              	ends
  2680                        	efunc
  2681                        	.endfunc	280,9,18
  2682                        	.line	280
  2683                        ;void k_new_event_loop(void)
  2684                        ;{
  2685                        	.line	281
  2686                        	.line	282
  2687                        	EVTMAN
  2688                        	xdef	~~k_new_event_loop
  2689                        	func
  2690                        	.function	282
  2691                        ~~k_new_event_loop:
  2692                        	longa	on
  2693                        	longi	on
  2694 05:0318: 3B           	tsc
  2695 05:0319: 38           	sec
  2696 05:031A: E9 19 00     	sbc	#L51
  2697 05:031D: 1B           	tcs
  Mon Sep 27 2021  9:39                                                Page 53


  2698 05:031E: 0B           	phd
  2699 05:031F: 5B           	tcd
  2700                        	.block	282
  2701                        ;	PFXOSMESSAGE pmsg = NULL;
  2702                        ;	PFXOSMESSAGE processMessage = NULL;
  2703                        ;
  2704                        ;	PFXPROCESS 	 pprocess = NULL;
  2705                        ;	/*
  2706                        ;	PFXNODE 	 hitNodeParent = NULL;
  2707                        ;	PFXNODE 	 hitNode = NULL;
  2708                        ;	PFXNODE 	 hitChildNode = NULL;
  2709                        ;	PWINDOW 	 pWin = NULL;
  2710                        ;	/////////////
  2711                        ;	// new way //
  2712                        ;	/////////////
  2713                        ;	PWINDOW highhit 		= NULL;
  2714                        ;	PWINDOW currentFocus 	= NULL;
  2715                        ;    PFXNODELIST overlaps	= NULL;
  2716                        ;    PFXNODELIST intersections = NULL;
  2717                        ;    ////
  2718                        ;	*/
  2719                        ;	//BOOL 		 bRet = FALSE;
  2720                        ;	//HWND		 hWndFocusLost = NULL;
  2721                        ;	//PFXDOSDEVICE pdd = NULL;
  2722                        ;	//BYTE		status;
  2723                        ;	//UINT		cExt = 0;
  2724                        ;	//ULONG 		sync_mouse_time = 0x000F
                    FFFF;
  2725                        ;	//INT	x = 0;
  2726                        ;	//INT y = 0;
  2727                        ;	BYTE cycle = 0;
  2728                        ;	LPVOID p = NULL;
  2729                        ;
  2730                        ;	_k_currentWndManager = k_initializeWindowManager
                    ();
  2731             00000000   pmsg_1	set	0
  2732             00000004   processMessage_1	set	4
  2733             00000008   pprocess_1	set	8
  2734             0000000C   cycle_1	set	12
  2735             0000000D   p_1	set	13
  2736                        	.sym	pmsg,0,138,1,32,16
  2737                        	.sym	processMessage,4,138,1,32,16
  2738                        	.sym	pprocess,8,138,1,32,20
  2739                        	.sym	cycle,12,14,1,8
  2740                        	.sym	p,13,129,1,32
  2741 05:0320: 64 09        	stz	<L52+pmsg_1
  2742 05:0322: 64 0B        	stz	<L52+pmsg_1+2
  2743 05:0324: 64 0D        	stz	<L52+processMessage_1
  2744 05:0326: 64 0F        	stz	<L52+processMessage_1+2
  2745 05:0328: 64 11        	stz	<L52+pprocess_1
  2746 05:032A: 64 13        	stz	<L52+pprocess_1+2
  2747 05:032C: E2 20        	sep	#$20
  2748                        	longa	off
  2749 05:032E: 64 15        	stz	<L52+cycle_1
  2750 05:0330: C2 20        	rep	#$20
  2751                        	longa	on
  2752 05:0332: 64 16        	stz	<L52+p_1
  2753 05:0334: 64 18        	stz	<L52+p_1+2
  Mon Sep 27 2021  9:39                                                Page 54


  2754                        	.line	312
  2755 05:0336: 22 xx xx xx  	jsl	~~k_initializeWindowManager
  2756 05:033A: 8D xx xx     	sta	|~~_k_currentWndManager
  2757 05:033D: 8E xx xx     	stx	|~~_k_currentWndManager+2
  2758                        ;
  2759                        ;	if(!_k_currentWndManager)
  2760                        	.line	314
  2761                        ;	{
  2762 05:0340: AD xx xx     	lda	|~~_k_currentWndManager
  2763 05:0343: 0D xx xx     	ora	|~~_k_currentWndManager+2
  2764 05:0346: F0 03        	beq	L54
  2765 05:0348: 82 19 00     	brl	L10017
  2766                        L54:
  2767                        	.line	315
  2768                        ;		k_exec_throw_exception(k_new_event_loop,
                    0x00010011,"Window Manager Failed to Initialize.",-1);
  2769                        	.line	316
  2770 05:034B: F4 FF FF     	pea	#<$ffffffff
  2771 05:034E: F4 xx xx     	pea	#^L34
  2772 05:0351: F4 xx xx     	pea	#<L34
  2773 05:0354: F4 01 00     	pea	#^$10011
  2774 05:0357: F4 11 00     	pea	#<$10011
  2775 05:035A: F4 05 00     	pea	#^~~k_new_event_loop
  2776 05:035D: F4 18 03     	pea	#<~~k_new_event_loop
  2777 05:0360: 22 xx xx xx  	jsl	~~k_exec_throw_exception
  2778                        ;	}
  2779                        	.line	317
  2780                        ;
  2781                        ;	_k_currentWndManager->Events(&_k_eventmanager);
  2782                        L10017:
  2783                        	.line	319
  2784 05:0364: A9 xx xx     	lda	#<~~_k_eventmanager
  2785 05:0367: 85 01        	sta	<R0
  2786                        	xref	_BEG_DATA
  2787 05:0369: A9 xx xx     	lda	#_BEG_DATA>>16
  2788 05:036C: 85 03        	sta	<R0+2
  2789 05:036E: D4 03        	pei	<R0+2
  2790 05:0370: D4 01        	pei	<R0
  2791 05:0372: AD xx xx     	lda	|~~_k_currentWndManager
  2792 05:0375: 85 05        	sta	<R1
  2793 05:0377: AD xx xx     	lda	|~~_k_currentWndManager+2
  2794 05:037A: 85 07        	sta	<R1+2
  2795 05:037C: A0 02 00     	ldy	#$2
  2796 05:037F: B7 05        	lda	[<R1],Y
  2797 05:0381: AA           	tax
  2798 05:0382: A7 05        	lda	[<R1]
  2799                        	xref	~~~lcal
  2800 05:0384: 22 xx xx xx  	jsl	~~~lcal
  2801                        ;
  2802                        ;	k_debug_integer("k_new_event_loop Window Manager
                     version:",_k_currentWndManager->QueryWindowManager(WM_QUERY
                    _VERSION_MAJOR));
  2803                        	.line	321
  2804 05:0388: F4 00 00     	pea	#<$0
  2805 05:038B: AD xx xx     	lda	|~~_k_currentWndManager
  2806 05:038E: 85 01        	sta	<R0
  2807 05:0390: AD xx xx     	lda	|~~_k_currentWndManager+2
  2808 05:0393: 85 03        	sta	<R0+2
  Mon Sep 27 2021  9:39                                                Page 55


  2809 05:0395: A0 0E 00     	ldy	#$e
  2810 05:0398: B7 01        	lda	[<R0],Y
  2811 05:039A: AA           	tax
  2812 05:039B: A0 0C 00     	ldy	#$c
  2813 05:039E: B7 01        	lda	[<R0],Y
  2814                        	xref	~~~lcal
  2815 05:03A0: 22 xx xx xx  	jsl	~~~lcal
  2816 05:03A4: 48           	pha
  2817 05:03A5: F4 xx xx     	pea	#^L34+37
  2818 05:03A8: F4 xx xx     	pea	#<L34+37
  2819 05:03AB: 22 xx xx xx  	jsl	~~k_debug_integer
  2820                        ;	k_debug_string("\r\n");
  2821                        	.line	322
  2822 05:03AF: F4 xx xx     	pea	#^L34+78
  2823 05:03B2: F4 xx xx     	pea	#<L34+78
  2824 05:03B5: 22 xx xx xx  	jsl	~~k_debug_string
  2825                        ;
  2826                        ;	//k_heap_integrity_check();
  2827                        ;
  2828                        ;
  2829                        ;	if(_k_bootMode != BOOTMODE_CONSOLE)
  2830                        	.line	327
  2831                        ;	{
  2832 05:03B9: AD xx xx     	lda	|~~_k_bootMode
  2833 05:03BC: C9 01 00     	cmp	#<$1
  2834 05:03BF: D0 03        	bne	L55
  2835 05:03C1: 82 39 00     	brl	L10018
  2836                        L55:
  2837                        	.line	328
  2838                        ;		pprocess = k_exec_launchProcess("@/deskt
                    op");
  2839                        	.line	329
  2840 05:03C4: F4 xx xx     	pea	#^L34+81
  2841 05:03C7: F4 xx xx     	pea	#<L34+81
  2842 05:03CA: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  2843 05:03CE: 85 11        	sta	<L52+pprocess_1
  2844 05:03D0: 86 13        	stx	<L52+pprocess_1+2
  2845                        ;		if(pprocess!=NULL)
  2846                        	.line	330
  2847                        ;		{
  2848 05:03D2: A5 11        	lda	<L52+pprocess_1
  2849 05:03D4: 05 13        	ora	<L52+pprocess_1+2
  2850 05:03D6: D0 03        	bne	L56
  2851 05:03D8: 82 1F 00     	brl	L10019
  2852                        L56:
  2853                        	.line	331
  2854                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2855                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2856                        	.line	333
  2857 05:03DB: D4 13        	pei	<L52+pprocess_1+2
  2858 05:03DD: D4 11        	pei	<L52+pprocess_1
  2859 05:03DF: A0 5E 00     	ldy	#$5e
  2860 05:03E2: B7 11        	lda	[<L52+pprocess_1],Y
  2861 05:03E4: 48           	pha
  2862 05:03E5: A0 5C 00     	ldy	#$5c
  2863 05:03E8: B7 11        	lda	[<L52+pprocess_1],Y
  Mon Sep 27 2021  9:39                                                Page 56


  2864 05:03EA: 48           	pha
  2865 05:03EB: 22 8F 15 05  	jsl	~~k_attach_process_events
  2866                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  2867                        	.line	334
  2868 05:03EF: F4 01 00     	pea	#<$1
  2869 05:03F2: D4 13        	pei	<L52+pprocess_1+2
  2870 05:03F4: D4 11        	pei	<L52+pprocess_1
  2871 05:03F6: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  2872                        ;			//k_heap_integrity_check();
  2873                        ;		}
  2874                        	.line	336
  2875                        ;	}
  2876                        L10019:
  2877                        	.line	337
  2878                        ;	else
  2879 05:03FA: 82 36 00     	brl	L10020
  2880                        L10018:
  2881                        ;	{
  2882                        	.line	339
  2883                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  2884                        	.line	340
  2885 05:03FD: F4 xx xx     	pea	#^L34+91
  2886 05:0400: F4 xx xx     	pea	#<L34+91
  2887 05:0403: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  2888 05:0407: 85 11        	sta	<L52+pprocess_1
  2889 05:0409: 86 13        	stx	<L52+pprocess_1+2
  2890                        ;		if(pprocess!=NULL)
  2891                        	.line	341
  2892                        ;		{
  2893 05:040B: A5 11        	lda	<L52+pprocess_1
  2894 05:040D: 05 13        	ora	<L52+pprocess_1+2
  2895 05:040F: D0 03        	bne	L57
  2896 05:0411: 82 1F 00     	brl	L10021
  2897                        L57:
  2898                        	.line	342
  2899                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2900                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2901                        	.line	344
  2902 05:0414: D4 13        	pei	<L52+pprocess_1+2
  2903 05:0416: D4 11        	pei	<L52+pprocess_1
  2904 05:0418: A0 5E 00     	ldy	#$5e
  2905 05:041B: B7 11        	lda	[<L52+pprocess_1],Y
  2906 05:041D: 48           	pha
  2907 05:041E: A0 5C 00     	ldy	#$5c
  2908 05:0421: B7 11        	lda	[<L52+pprocess_1],Y
  2909 05:0423: 48           	pha
  2910 05:0424: 22 8F 15 05  	jsl	~~k_attach_process_events
  2911                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  2912                        	.line	345
  2913 05:0428: F4 01 00     	pea	#<$1
  2914 05:042B: D4 13        	pei	<L52+pprocess_1+2
  2915 05:042D: D4 11        	pei	<L52+pprocess_1
  2916 05:042F: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  Mon Sep 27 2021  9:39                                                Page 57


  2917                        ;		}
  2918                        	.line	346
  2919                        ;	}
  2920                        L10021:
  2921                        	.line	347
  2922                        L10020:
  2923                        ;
  2924                        ;/*
  2925                        ;#if defined(USE_FX256_FMX) || defined(USE_FX256_F
                    MU)
  2926                        ;
  2927                        ;	pprocess = k_exec_launchProcess("@/desktop");
  2928                        ;	if(pprocess!=NULL)
  2929                        ;	{
  2930                        ;		//k_attach_process_events((FXEventProc)p
                    process->execProc-data,pprocess);
  2931                        ;		k_attach_process_events(pprocess->execPr
                    oc,pprocess);
  2932                        ;		k_exec_set_process_foreground(pprocess,T
                    RUE);
  2933                        ;		//k_heap_integrity_check();
  2934                        ;	}
  2935                        ;
  2936                        ;#else
  2937                        ;	pprocess = k_exec_launchProcess("@/console");
  2938                        ;	if(pprocess!=NULL)
  2939                        ;	{
  2940                        ;		//k_attach_process_events((FXEventProc)p
                    process->execProc-data,pprocess);
  2941                        ;		k_attach_process_events(pprocess->execPr
                    oc,pprocess);
  2942                        ;		k_exec_set_process_foreground(pprocess,T
                    RUE);
  2943                        ;	}
  2944                        ;
  2945                        ;#endif
  2946                        ;*/
  2947                        ;
  2948                        ;
  2949                        ;	pprocess = k_exec_launchProcess("@/idle");
  2950                        	.line	374
  2951 05:0433: F4 xx xx     	pea	#^L34+101
  2952 05:0436: F4 xx xx     	pea	#<L34+101
  2953 05:0439: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  2954 05:043D: 85 11        	sta	<L52+pprocess_1
  2955 05:043F: 86 13        	stx	<L52+pprocess_1+2
  2956                        ;	if(pprocess!=NULL)
  2957                        	.line	375
  2958                        ;	{
  2959 05:0441: A5 11        	lda	<L52+pprocess_1
  2960 05:0443: 05 13        	ora	<L52+pprocess_1+2
  2961 05:0445: D0 03        	bne	L58
  2962 05:0447: 82 1F 00     	brl	L10022
  2963                        L58:
  2964                        	.line	376
  2965                        ;
  2966                        ;		//k_attach_process_events((FXEventProc)p
                    process->execProc-data,pprocess);
  Mon Sep 27 2021  9:39                                                Page 58


  2967                        ;		k_attach_process_events(pprocess->execPr
                    oc,pprocess);
  2968                        	.line	379
  2969 05:044A: D4 13        	pei	<L52+pprocess_1+2
  2970 05:044C: D4 11        	pei	<L52+pprocess_1
  2971 05:044E: A0 5E 00     	ldy	#$5e
  2972 05:0451: B7 11        	lda	[<L52+pprocess_1],Y
  2973 05:0453: 48           	pha
  2974 05:0454: A0 5C 00     	ldy	#$5c
  2975 05:0457: B7 11        	lda	[<L52+pprocess_1],Y
  2976 05:0459: 48           	pha
  2977 05:045A: 22 8F 15 05  	jsl	~~k_attach_process_events
  2978                        ;		k_exec_set_process_foreground(pprocess,F
                    ALSE);
  2979                        	.line	380
  2980 05:045E: F4 00 00     	pea	#<$0
  2981 05:0461: D4 13        	pei	<L52+pprocess_1+2
  2982 05:0463: D4 11        	pei	<L52+pprocess_1
  2983 05:0465: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  2984                        ;	}
  2985                        	.line	381
  2986                        ;
  2987                        ;
  2988                        ;	//k_debug_string("k_process_hi_idle_procs:3:poin
                    ter\r\n");
  2989                        ;	//k_debug_nodelist(_k_eventManager_IdleProcList-
                    >listhead);
  2990                        ;
  2991                        ;	processMessage = k_create_process_msg(NULL);
  2992                        L10022:
  2993                        	.line	387
  2994 05:0469: F4 00 00     	pea	#^$0
  2995 05:046C: F4 00 00     	pea	#<$0
  2996 05:046F: 22 0A 20 05  	jsl	~~k_create_process_msg
  2997 05:0473: 85 0D        	sta	<L52+processMessage_1
  2998 05:0475: 86 0F        	stx	<L52+processMessage_1+2
  2999                        ;
  3000                        ;	//k_debug_string("*** k_new_event_loop::start IR
                    Q\r\n");
  3001                        ;
  3002                        ;	//k_debug_pointer("_k_eventQueue:TOP1:",_k_event
                    Queue);
  3003                        ;	//k_debug_integer("_k_eventQueue:TOP1:",_k_event
                    Queue->count);
  3004                        ;
  3005                        ;	//k_heap_integrity_check();
  3006                        ;
  3007                        ;	k_enable_locking();
  3008                        	.line	396
  3009 05:0477: 22 xx xx xx  	jsl	~~k_enable_locking
  3010                        ;
  3011                        ;	asm CLI;
  3012                        	.line	398
  3013                        	asmstart
  3014 05:047B: 58           	CLI
  3015                        	asmend
  3016                        ;
  3017                        ;	_k_ignore_irq_events = FALSE;
  Mon Sep 27 2021  9:39                                                Page 59


  3018                        	.line	400
  3019 05:047C: E2 20        	sep	#$20
  3020                        	longa	off
  3021 05:047E: 9C xx xx     	stz	|~~_k_ignore_irq_events
  3022 05:0481: C2 20        	rep	#$20
  3023                        	longa	on
  3024                        ;
  3025                        ;	while(TRUE)
  3026                        	.line	402
  3027                        L10023:
  3028                        ;	{
  3029                        	.line	403
  3030                        ;		//asm SEI;
  3031                        ;
  3032                        ;		pmsg = (PFXOSMESSAGE)k_dequeue(_k_eventQ
                    ueue);
  3033                        	.line	406
  3034 05:0483: AD xx xx     	lda	|~~_k_eventQueue+2
  3035 05:0486: 48           	pha
  3036 05:0487: AD xx xx     	lda	|~~_k_eventQueue
  3037 05:048A: 48           	pha
  3038 05:048B: 22 xx xx xx  	jsl	~~k_dequeue
  3039 05:048F: 85 09        	sta	<L52+pmsg_1
  3040 05:0491: 86 0B        	stx	<L52+pmsg_1+2
  3041                        ;		while(pmsg!=NULL)
  3042                        	.line	407
  3043                        L10025:
  3044 05:0493: A5 09        	lda	<L52+pmsg_1
  3045 05:0495: 05 0B        	ora	<L52+pmsg_1+2
  3046 05:0497: D0 03        	bne	L59
  3047 05:0499: 82 85 00     	brl	L10026
  3048                        L59:
  3049                        ;		{
  3050                        	.line	408
  3051                        ;			//k_debug_string("*** k_new_even
                    t_loop::TOP\r\n");
  3052                        ;			pmsg = k_translateKeyMessage(pms
                    g);
  3053                        	.line	410
  3054 05:049C: D4 0B        	pei	<L52+pmsg_1+2
  3055 05:049E: D4 09        	pei	<L52+pmsg_1
  3056 05:04A0: 22 0D 02 05  	jsl	~~k_translateKeyMessage
  3057 05:04A4: 85 09        	sta	<L52+pmsg_1
  3058 05:04A6: 86 0B        	stx	<L52+pmsg_1+2
  3059                        ;
  3060                        ;			//k_heap_integrity_check();
  3061                        ;
  3062                        ;			//k_debug_string("*** k_new_even
                    t_loop::ProcessWindowEvent\r\n");
  3063                        ;			k_lock_irq();
  3064                        	.line	415
  3065 05:04A8: 22 xx xx xx  	jsl	~~k_lock_irq
  3066                        ;				pmsg = (PFXOSMESSAGE)_k_
                    currentWndManager->ProcessWindowEvent(&_k_eventmanager,pmsg)
                    ;
  3067                        	.line	416
  3068 05:04AC: D4 0B        	pei	<L52+pmsg_1+2
  3069 05:04AE: D4 09        	pei	<L52+pmsg_1
  Mon Sep 27 2021  9:39                                                Page 60


  3070 05:04B0: A9 xx xx     	lda	#<~~_k_eventmanager
  3071 05:04B3: 85 01        	sta	<R0
  3072                        	xref	_BEG_DATA
  3073 05:04B5: A9 xx xx     	lda	#_BEG_DATA>>16
  3074 05:04B8: 85 03        	sta	<R0+2
  3075 05:04BA: D4 03        	pei	<R0+2
  3076 05:04BC: D4 01        	pei	<R0
  3077 05:04BE: AD xx xx     	lda	|~~_k_currentWndManager
  3078 05:04C1: 85 05        	sta	<R1
  3079 05:04C3: AD xx xx     	lda	|~~_k_currentWndManager+2
  3080 05:04C6: 85 07        	sta	<R1+2
  3081 05:04C8: A0 0A 00     	ldy	#$a
  3082 05:04CB: B7 05        	lda	[<R1],Y
  3083 05:04CD: AA           	tax
  3084 05:04CE: A0 08 00     	ldy	#$8
  3085 05:04D1: B7 05        	lda	[<R1],Y
  3086                        	xref	~~~lcal
  3087 05:04D3: 22 xx xx xx  	jsl	~~~lcal
  3088 05:04D7: 85 09        	sta	<L52+pmsg_1
  3089 05:04D9: 86 0B        	stx	<L52+pmsg_1+2
  3090                        ;			k_unlock_irq();
  3091                        	.line	417
  3092 05:04DB: 22 xx xx xx  	jsl	~~k_unlock_irq
  3093                        ;			//k_heap_integrity_check();
  3094                        ;
  3095                        ;			//k_debug_string("*** k_new_even
                    t_loop::k_do_processes\r\n");
  3096                        ;			//k_debug_char_com1('[');
  3097                        ;			k_lock_irq();
  3098                        	.line	422
  3099 05:04DF: 22 xx xx xx  	jsl	~~k_lock_irq
  3100                        ;				k_do_processes(pmsg);
  3101                        	.line	423
  3102 05:04E3: D4 0B        	pei	<L52+pmsg_1+2
  3103 05:04E5: D4 09        	pei	<L52+pmsg_1
  3104 05:04E7: 22 9D 0D 05  	jsl	~~k_do_processes
  3105                        ;			k_unlock_irq();
  3106                        	.line	424
  3107 05:04EB: 22 xx xx xx  	jsl	~~k_unlock_irq
  3108                        ;			//k_debug_char_com1(']');
  3109                        ;
  3110                        ;			//k_heap_integrity_check();
  3111                        ;
  3112                        ;			k_destory_msg(pmsg);
  3113                        	.line	429
  3114 05:04EF: D4 0B        	pei	<L52+pmsg_1+2
  3115 05:04F1: D4 09        	pei	<L52+pmsg_1
  3116 05:04F3: 22 67 24 05  	jsl	~~k_destory_msg
  3117                        ;			//k_debug_string("*** k_new_even
                    t_loop::k_dequeue\r\n");
  3118                        ;			pmsg = (PFXOSMESSAGE)k_dequeue(_
                    k_eventQueue);
  3119                        	.line	431
  3120 05:04F7: AD xx xx     	lda	|~~_k_eventQueue+2
  3121 05:04FA: 48           	pha
  3122 05:04FB: AD xx xx     	lda	|~~_k_eventQueue
  3123 05:04FE: 48           	pha
  3124 05:04FF: 22 xx xx xx  	jsl	~~k_dequeue
  Mon Sep 27 2021  9:39                                                Page 61


  3125 05:0503: 85 09        	sta	<L52+pmsg_1
  3126 05:0505: 86 0B        	stx	<L52+pmsg_1+2
  3127                        ;
  3128                        ;			//k_heap_integrity_check();
  3129                        ;
  3130                        ;			//k_debug_string("*** k_new_even
                    t_loop::BOTTOM\r\n");
  3131                        ;			//if(_k_ignore_irq_events)
  3132                        ;			//	_k_ignore_irq_events = F
                    ALSE;
  3133                        ;
  3134                        ;
  3135                        ;			//k_delay(5);
  3136                        ;
  3137                        ;			cycle--;
  3138                        	.line	442
  3139 05:0507: E2 20        	sep	#$20
  3140                        	longa	off
  3141 05:0509: C6 15        	dec	<L52+cycle_1
  3142 05:050B: C2 20        	rep	#$20
  3143                        	longa	on
  3144                        ;			if(cycle == 0)
  3145                        	.line	443
  3146                        ;				k_debug_char_com1('.');
  3147 05:050D: A5 15        	lda	<L52+cycle_1
  3148 05:050F: 29 FF 00     	and	#$ff
  3149 05:0512: F0 03        	beq	L60
  3150 05:0514: 82 07 00     	brl	L10027
  3151                        L60:
  3152                        	.line	444
  3153 05:0517: F4 2E 00     	pea	#<$2e
  3154 05:051A: 22 xx xx xx  	jsl	~~k_debug_char_com1
  3155                        ;
  3156                        ;		}
  3157                        L10027:
  3158                        	.line	446
  3159 05:051E: 82 72 FF     	brl	L10025
  3160                        L10026:
  3161                        ;
  3162                        ;		//if(cycle == 0)
  3163                        ;		//	k_debug_char_com1(':');
  3164                        ;
  3165                        ;		//asm CLI;
  3166                        ;		//k_heap_integrity_check();
  3167                        ;
  3168                        ;		//if(_k_ignore_irq_events)
  3169                        ;		//	_k_ignore_irq_events = FALSE;
  3170                        ;
  3171                        ;	}
  3172                        	.line	457
  3173 05:0521: 82 5F FF     	brl	L10023
  3174                        ;
  3175                        ;	if(processMessage)
  3176                        	.line	459
  3177                        ;		k_mem_deallocate_heap(processMessage);
  3178 05:0524: A5 0D        	lda	<L52+processMessage_1
  3179 05:0526: 05 0F        	ora	<L52+processMessage_1+2
  3180 05:0528: D0 03        	bne	L61
  Mon Sep 27 2021  9:39                                                Page 62


  3181 05:052A: 82 08 00     	brl	L10028
  3182                        L61:
  3183                        	.line	460
  3184 05:052D: D4 0F        	pei	<L52+processMessage_1+2
  3185 05:052F: D4 0D        	pei	<L52+processMessage_1
  3186 05:0531: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  3187                        ;
  3188                        ;	return;
  3189                        L10028:
  3190                        	.line	462
  3191                        L62:
  3192 05:0535: 2B           	pld
  3193 05:0536: 3B           	tsc
  3194 05:0537: 18           	clc
  3195 05:0538: 69 19 00     	adc	#L51
  3196 05:053B: 1B           	tcs
  3197 05:053C: 6B           	rtl
  3198                        ;}
  3199                        	.line	463
  3200                        	.endblock	463
  3201             00000019   L51	equ	25
  3202             00000009   L52	equ	9
  3203 05:053D:              	ends
  3204                        	efunc
  3205                        	.endfunc	463,9,25
  3206                        	.line	463
  3207                        	data
  3208                        L34:
  3209 00:023C: 57 69 6E 64  	db	$57,$69,$6E,$64,$6F,$77,$20,$4D,$61,$6E,
                    $61,$67,$65,$72,$20
       00:0240: 6F 77 20 4D 
       00:0244: 61 6E 61 67 
       00:0248: 65 72 20 
  3210 00:024B: 46 61 69 6C  	db	$46,$61,$69,$6C,$65,$64,$20,$74,$6F,$20,
                    $49,$6E,$69,$74,$69
       00:024F: 65 64 20 74 
       00:0253: 6F 20 49 6E 
       00:0257: 69 74 69 
  3211 00:025A: 61 6C 69 7A  	db	$61,$6C,$69,$7A,$65,$2E,$00,$6B,$5F,$6E,
                    $65,$77,$5F,$65,$76
       00:025E: 65 2E 00 6B 
       00:0262: 5F 6E 65 77 
       00:0266: 5F 65 76 
  3212 00:0269: 65 6E 74 5F  	db	$65,$6E,$74,$5F,$6C,$6F,$6F,$70,$20,$57,
                    $69,$6E,$64,$6F,$77
       00:026D: 6C 6F 6F 70 
       00:0271: 20 57 69 6E 
       00:0275: 64 6F 77 
  3213 00:0278: 20 4D 61 6E  	db	$20,$4D,$61,$6E,$61,$67,$65,$72,$20,$76,
                    $65,$72,$73,$69,$6F
       00:027C: 61 67 65 72 
       00:0280: 20 76 65 72 
       00:0284: 73 69 6F 
  3214 00:0287: 6E 3A 00 0D  	db	$6E,$3A,$00,$0D,$0A,$00,$40,$2F,$64,$65,
                    $73,$6B,$74,$6F,$70
       00:028B: 0A 00 40 2F 
       00:028F: 64 65 73 6B 
       00:0293: 74 6F 70 
  Mon Sep 27 2021  9:39                                                Page 63


  3215 00:0296: 00 40 2F 63  	db	$00,$40,$2F,$63,$6F,$6E,$73,$6F,$6C,$65,
                    $00,$40,$2F,$69,$64
       00:029A: 6F 6E 73 6F 
       00:029E: 6C 65 00 40 
       00:02A2: 2F 69 64 
  3216 00:02A5: 6C 65 00     	db	$6C,$65,$00
  3217 00:02A8:              	ends
  3218                        ;
  3219                        ;
  3220                        ;//
  3221                        ;
  3222                        ;void k_event_loop(void)
  3223                        ;{
  3224                        	.line	468
  3225                        	.line	469
  3226                        	EVTMAN
  3227                        	xdef	~~k_event_loop
  3228                        	func
  3229                        	.function	469
  3230                        ~~k_event_loop:
  3231                        	longa	on
  3232                        	longi	on
  3233 05:053D: 3B           	tsc
  3234 05:053E: 38           	sec
  3235 05:053F: E9 48 00     	sbc	#L64
  3236 05:0542: 1B           	tcs
  3237 05:0543: 0B           	phd
  3238 05:0544: 5B           	tcd
  3239                        	.block	469
  3240                        ;	PFXOSMESSAGE pmsg = NULL;
  3241                        ;	PFXOSMESSAGE processMessage = NULL;
  3242                        ;
  3243                        ;	PFXPROCESS 	 pprocess = NULL;
  3244                        ;	PFXNODE 	 hitNodeParent = NULL;
  3245                        ;	PFXNODE 	 hitNode = NULL;
  3246                        ;	PFXNODE 	 hitChildNode = NULL;
  3247                        ;	PWINDOW 	 pWin = NULL;
  3248                        ;
  3249                        ;	PWINDOWMANAGER pWinMan = NULL;
  3250                        ;
  3251                        ;	// new way //
  3252                        ;	/////////////
  3253                        ;	PWINDOW highhit 		= NULL;
  3254                        ;	PWINDOW currentFocus 	= NULL;
  3255                        ;    PFXNODELIST overlaps	= NULL;
  3256                        ;    PFXNODELIST intersections = NULL;
  3257                        ;    ////
  3258                        ;
  3259                        ;	BOOL 		 bRet = FALSE;
  3260                        ;	//HWND		 hWndFocus 	   = NULL;
  3261                        ;	HWND		 hWndFocusLost = NULL;
  3262                        ;	PFXDOSDEVICE pdd = NULL;
  3263                        ;
  3264                        ;	UINT		cExt = 0;
  3265                        ;	//DISKINFO diskInfo;
  3266                        ;	//BOOL volAvail = FALSE;
  3267                        ;
  3268                        ;	//BOOL floppy = FALSE;
  Mon Sep 27 2021  9:39                                                Page 64


  3269                        ;
  3270                        ;	BOOL sdcardInterted = FALSE;
  3271                        ;
  3272                        ;	//INT floppyLBA = 0;
  3273                        ;	INT	x = 0;
  3274                        ;	INT y = 0;
  3275                        ;
  3276                        ;	/*
  3277                        ;	int c = 0;
  3278                        ;	int cb = 0;
  3279                        ;	int mb = 0;
  3280                        ;	int mx = 0;
  3281                        ;	int my = 0;
  3282                        ;	int kb = 0;
  3283                        ;	*/
  3284                        ;
  3285                        ;	k_debug_string("k_initalize_executive\r\n");
  3286             00000000   pmsg_1	set	0
  3287             00000004   processMessage_1	set	4
  3288             00000008   pprocess_1	set	8
  3289             0000000C   hitNodeParent_1	set	12
  3290             00000010   hitNode_1	set	16
  3291             00000014   hitChildNode_1	set	20
  3292             00000018   pWin_1	set	24
  3293             0000001C   pWinMan_1	set	28
  3294             00000020   highhit_1	set	32
  3295             00000024   currentFocus_1	set	36
  3296             00000028   overlaps_1	set	40
  3297             0000002C   intersections_1	set	44
  3298             00000030   bRet_1	set	48
  3299             00000031   hWndFocusLost_1	set	49
  3300             00000035   pdd_1	set	53
  3301             00000039   cExt_1	set	57
  3302             0000003B   sdcardInterted_1	set	59
  3303             0000003C   x_1	set	60
  3304             0000003E   y_1	set	62
  3305                        	.sym	pmsg,0,138,1,32,16
  3306                        	.sym	processMessage,4,138,1,32,16
  3307                        	.sym	pprocess,8,138,1,32,20
  3308                        	.sym	hitNodeParent,12,138,1,32,5
  3309                        	.sym	hitNode,16,138,1,32,5
  3310                        	.sym	hitChildNode,20,138,1,32,5
  3311                        	.sym	pWin,24,138,1,32,33
  3312                        	.sym	pWinMan,28,138,1,32,69
  3313                        	.sym	highhit,32,138,1,32,33
  3314                        	.sym	currentFocus,36,138,1,32,33
  3315                        	.sym	overlaps,40,138,1,32,6
  3316                        	.sym	intersections,44,138,1,32,6
  3317                        	.sym	bRet,48,14,1,8
  3318                        	.sym	hWndFocusLost,49,129,1,32
  3319                        	.sym	pdd,53,138,1,32,127
  3320                        	.sym	cExt,57,16,1,16
  3321                        	.sym	sdcardInterted,59,14,1,8
  3322                        	.sym	x,60,5,1,16
  3323                        	.sym	y,62,5,1,16
  3324 05:0545: 64 09        	stz	<L65+pmsg_1
  3325 05:0547: 64 0B        	stz	<L65+pmsg_1+2
  3326 05:0549: 64 0D        	stz	<L65+processMessage_1
  Mon Sep 27 2021  9:39                                                Page 65


  3327 05:054B: 64 0F        	stz	<L65+processMessage_1+2
  3328 05:054D: 64 11        	stz	<L65+pprocess_1
  3329 05:054F: 64 13        	stz	<L65+pprocess_1+2
  3330 05:0551: 64 15        	stz	<L65+hitNodeParent_1
  3331 05:0553: 64 17        	stz	<L65+hitNodeParent_1+2
  3332 05:0555: 64 19        	stz	<L65+hitNode_1
  3333 05:0557: 64 1B        	stz	<L65+hitNode_1+2
  3334 05:0559: 64 1D        	stz	<L65+hitChildNode_1
  3335 05:055B: 64 1F        	stz	<L65+hitChildNode_1+2
  3336 05:055D: 64 21        	stz	<L65+pWin_1
  3337 05:055F: 64 23        	stz	<L65+pWin_1+2
  3338 05:0561: 64 25        	stz	<L65+pWinMan_1
  3339 05:0563: 64 27        	stz	<L65+pWinMan_1+2
  3340 05:0565: 64 29        	stz	<L65+highhit_1
  3341 05:0567: 64 2B        	stz	<L65+highhit_1+2
  3342 05:0569: 64 2D        	stz	<L65+currentFocus_1
  3343 05:056B: 64 2F        	stz	<L65+currentFocus_1+2
  3344 05:056D: 64 31        	stz	<L65+overlaps_1
  3345 05:056F: 64 33        	stz	<L65+overlaps_1+2
  3346 05:0571: 64 35        	stz	<L65+intersections_1
  3347 05:0573: 64 37        	stz	<L65+intersections_1+2
  3348 05:0575: E2 20        	sep	#$20
  3349                        	longa	off
  3350 05:0577: 64 39        	stz	<L65+bRet_1
  3351 05:0579: C2 20        	rep	#$20
  3352                        	longa	on
  3353 05:057B: 64 3A        	stz	<L65+hWndFocusLost_1
  3354 05:057D: 64 3C        	stz	<L65+hWndFocusLost_1+2
  3355 05:057F: 64 3E        	stz	<L65+pdd_1
  3356 05:0581: 64 40        	stz	<L65+pdd_1+2
  3357 05:0583: 64 42        	stz	<L65+cExt_1
  3358 05:0585: E2 20        	sep	#$20
  3359                        	longa	off
  3360 05:0587: 64 44        	stz	<L65+sdcardInterted_1
  3361 05:0589: C2 20        	rep	#$20
  3362                        	longa	on
  3363 05:058B: 64 45        	stz	<L65+x_1
  3364 05:058D: 64 47        	stz	<L65+y_1
  3365                        	.line	515
  3366 05:058F: F4 xx xx     	pea	#^L63
  3367 05:0592: F4 xx xx     	pea	#<L63
  3368 05:0595: 22 xx xx xx  	jsl	~~k_debug_string
  3369                        ;	k_initalize_executive();
  3370                        	.line	516
  3371 05:0599: 22 xx xx xx  	jsl	~~k_initalize_executive
  3372                        ;	k_heap_integrity_check();
  3373                        	.line	517
  3374 05:059D: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  3375                        ;	k_debug_string("k_initalize_event_manager\r\n");
  3376                        	.line	518
  3377 05:05A1: F4 xx xx     	pea	#^L63+24
  3378 05:05A4: F4 xx xx     	pea	#<L63+24
  3379 05:05A7: 22 xx xx xx  	jsl	~~k_debug_string
  3380                        ;	k_initalize_event_manager(0);
  3381                        	.line	519
  3382 05:05AB: F4 00 00     	pea	#<$0
  3383 05:05AE: 22 20 01 05  	jsl	~~k_initalize_event_manager
  3384                        ;	k_heap_integrity_check();
  Mon Sep 27 2021  9:39                                                Page 66


  3385                        	.line	520
  3386 05:05B2: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  3387                        ;	k_debug_string("k_initalize_window_manager befor
                    e\r\n");
  3388                        	.line	521
  3389 05:05B6: F4 xx xx     	pea	#^L63+52
  3390 05:05B9: F4 xx xx     	pea	#<L63+52
  3391 05:05BC: 22 xx xx xx  	jsl	~~k_debug_string
  3392                        ;	pWinMan = k_initializeWindowManager();
  3393                        	.line	522
  3394 05:05C0: 22 xx xx xx  	jsl	~~k_initializeWindowManager
  3395 05:05C4: 85 25        	sta	<L65+pWinMan_1
  3396 05:05C6: 86 27        	stx	<L65+pWinMan_1+2
  3397                        ;
  3398                        ;	if(!pWinMan)
  3399                        	.line	524
  3400                        ;	{
  3401 05:05C8: A5 25        	lda	<L65+pWinMan_1
  3402 05:05CA: 05 27        	ora	<L65+pWinMan_1+2
  3403 05:05CC: F0 03        	beq	L67
  3404 05:05CE: 82 19 00     	brl	L10029
  3405                        L67:
  3406                        	.line	525
  3407                        ;		k_exec_throw_exception(k_event_loop,0x00
                    010011,"Window Manager Failed to Initialize.",-1);
  3408                        	.line	526
  3409 05:05D1: F4 FF FF     	pea	#<$ffffffff
  3410 05:05D4: F4 xx xx     	pea	#^L63+88
  3411 05:05D7: F4 xx xx     	pea	#<L63+88
  3412 05:05DA: F4 01 00     	pea	#^$10011
  3413 05:05DD: F4 11 00     	pea	#<$10011
  3414 05:05E0: F4 05 00     	pea	#^~~k_event_loop
  3415 05:05E3: F4 3D 05     	pea	#<~~k_event_loop
  3416 05:05E6: 22 xx xx xx  	jsl	~~k_exec_throw_exception
  3417                        ;	}
  3418                        	.line	527
  3419                        ;
  3420                        ;	k_debug_integer("k_initalize_window_manager vers
                    ion:",pWinMan->QueryWindowManager(WM_QUERY_VERSION_MAJOR));
  3421                        L10029:
  3422                        	.line	529
  3423 05:05EA: F4 00 00     	pea	#<$0
  3424 05:05ED: A0 0E 00     	ldy	#$e
  3425 05:05F0: B7 25        	lda	[<L65+pWinMan_1],Y
  3426 05:05F2: AA           	tax
  3427 05:05F3: A0 0C 00     	ldy	#$c
  3428 05:05F6: B7 25        	lda	[<L65+pWinMan_1],Y
  3429                        	xref	~~~lcal
  3430 05:05F8: 22 xx xx xx  	jsl	~~~lcal
  3431 05:05FC: 48           	pha
  3432 05:05FD: F4 xx xx     	pea	#^L63+125
  3433 05:0600: F4 xx xx     	pea	#<L63+125
  3434 05:0603: 22 xx xx xx  	jsl	~~k_debug_integer
  3435                        ;	k_debug_string("\r\n");
  3436                        	.line	530
  3437 05:0607: F4 xx xx     	pea	#^L63+161
  3438 05:060A: F4 xx xx     	pea	#<L63+161
  3439 05:060D: 22 xx xx xx  	jsl	~~k_debug_string
  Mon Sep 27 2021  9:39                                                Page 67


  3440                        ;
  3441                        ;	k_heap_integrity_check();
  3442                        	.line	532
  3443 05:0611: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  3444                        ;
  3445                        ;
  3446                        ;	/*
  3447                        ;	//////
  3448                        ;	// TEST
  3449                        ;	/////
  3450                        ;
  3451                        ;	asm cli;
  3452                        ;
  3453                        ;	floppy_init();
  3454                        ;
  3455                        ;	//asm sei;
  3456                        ;
  3457                        ;	while(TRUE);
  3458                        ;	///////
  3459                        ;	*/
  3460                        ;
  3461                        ;	//asm cli;
  3462                        ;
  3463                        ;	//k_debug_string("cli after\r\n");
  3464                        ;
  3465                        ;	if(_k_eventQueue!=NULL)
  3466                        	.line	554
  3467                        ;	{
  3468 05:0615: AD xx xx     	lda	|~~_k_eventQueue
  3469 05:0618: 0D xx xx     	ora	|~~_k_eventQueue+2
  3470 05:061B: D0 03        	bne	L68
  3471 05:061D: 82 B8 06     	brl	L10030
  3472                        L68:
  3473                        	.line	555
  3474                        ;		processMessage = k_create_process_msg(NU
                    LL);
  3475                        	.line	556
  3476 05:0620: F4 00 00     	pea	#^$0
  3477 05:0623: F4 00 00     	pea	#<$0
  3478 05:0626: 22 0A 20 05  	jsl	~~k_create_process_msg
  3479 05:062A: 85 0D        	sta	<L65+processMessage_1
  3480 05:062C: 86 0F        	stx	<L65+processMessage_1+2
  3481                        ;		k_heap_integrity_check();
  3482                        	.line	557
  3483 05:062E: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  3484                        ;		//eventProcs[IDLE_PROC] = IdleProc;
  3485                        ;		//k_attach_process_events(IdleProc,NULL)
                    ;
  3486                        ;
  3487                        ;		/*
  3488                        ;		pprocess = k_exec_launchProcess("@/idle"
                    );
  3489                        ;		if(pprocess!=NULL)
  3490                        ;		{
  3491                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3492                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  Mon Sep 27 2021  9:39                                                Page 68


  3493                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  3494                        ;		}
  3495                        ;		*/
  3496                        ;		//k_debug_string("check1\r\n");
  3497                        ;		//k_heap_integrity_check();
  3498                        ;
  3499                        ;		//pprocess =  k_exec_createProcess("cons
                    ole",DefConsoleProc);
  3500                        ;
  3501                        ;		//k_debug_string("check2\r\n");
  3502                        ;		//k_heap_integrity_check();
  3503                        ;		//pprocess =  k_exec_createProcess("desk
                    top",DesktopEnvironmentProc);
  3504                        ;
  3505                        ;#ifdef USE_FX256_FMX
  3506                        ;
  3507                        ;
  3508                        ;		/*
  3509                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  3510                        ;		if(pprocess!=NULL)
  3511                        ;		{
  3512                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3513                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3514                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  3515                        ;		}
  3516                        ;		*/
  3517                        ;
  3518                        ;
  3519                        ;		pprocess = k_exec_launchProcess("@/deskt
                    op");
  3520                        ;		if(pprocess!=NULL)
  3521                        ;		{
  3522                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3523                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3524                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  3525                        ;			k_heap_integrity_check();
  3526                        ;		}
  3527                        ;
  3528                        ;#elif USE_FX256_FMU
  3529                        ;
  3530                        ;
  3531                        ;		/*
  3532                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  3533                        ;		if(pprocess!=NULL)
  3534                        ;		{
  3535                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3536                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  Mon Sep 27 2021  9:39                                                Page 69


  3537                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  3538                        ;		}
  3539                        ;		*/
  3540                        ;
  3541                        ;
  3542                        ;		pprocess = k_exec_launchProcess("@/deskt
                    op");
  3543                        ;		if(pprocess!=NULL)
  3544                        ;		{
  3545                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3546                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3547                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  3548                        ;			k_heap_integrity_check();
  3549                        ;		}
  3550                        ;#else
  3551                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  3552                        	.line	625
  3553 05:0632: F4 xx xx     	pea	#^L63+164
  3554 05:0635: F4 xx xx     	pea	#<L63+164
  3555 05:0638: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  3556 05:063C: 85 11        	sta	<L65+pprocess_1
  3557 05:063E: 86 13        	stx	<L65+pprocess_1+2
  3558                        ;		if(pprocess!=NULL)
  3559                        	.line	626
  3560                        ;		{
  3561 05:0640: A5 11        	lda	<L65+pprocess_1
  3562 05:0642: 05 13        	ora	<L65+pprocess_1+2
  3563 05:0644: D0 03        	bne	L69
  3564 05:0646: 82 1F 00     	brl	L10031
  3565                        L69:
  3566                        	.line	627
  3567                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3568                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3569                        	.line	629
  3570 05:0649: D4 13        	pei	<L65+pprocess_1+2
  3571 05:064B: D4 11        	pei	<L65+pprocess_1
  3572 05:064D: A0 5E 00     	ldy	#$5e
  3573 05:0650: B7 11        	lda	[<L65+pprocess_1],Y
  3574 05:0652: 48           	pha
  3575 05:0653: A0 5C 00     	ldy	#$5c
  3576 05:0656: B7 11        	lda	[<L65+pprocess_1],Y
  3577 05:0658: 48           	pha
  3578 05:0659: 22 8F 15 05  	jsl	~~k_attach_process_events
  3579                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  3580                        	.line	630
  3581 05:065D: F4 01 00     	pea	#<$1
  3582 05:0660: D4 13        	pei	<L65+pprocess_1+2
  3583 05:0662: D4 11        	pei	<L65+pprocess_1
  3584 05:0664: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  3585                        ;		}
  Mon Sep 27 2021  9:39                                                Page 70


  3586                        	.line	631
  3587                        ;
  3588                        ;#endif
  3589                        ;
  3590                        ;		pprocess = k_exec_launchProcess("@/idle"
                    );
  3591                        L10031:
  3592                        	.line	635
  3593 05:0668: F4 xx xx     	pea	#^L63+174
  3594 05:066B: F4 xx xx     	pea	#<L63+174
  3595 05:066E: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  3596 05:0672: 85 11        	sta	<L65+pprocess_1
  3597 05:0674: 86 13        	stx	<L65+pprocess_1+2
  3598                        ;		if(pprocess!=NULL)
  3599                        	.line	636
  3600                        ;		{
  3601 05:0676: A5 11        	lda	<L65+pprocess_1
  3602 05:0678: 05 13        	ora	<L65+pprocess_1+2
  3603 05:067A: D0 03        	bne	L70
  3604 05:067C: 82 1F 00     	brl	L10032
  3605                        L70:
  3606                        	.line	637
  3607                        ;
  3608                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  3609                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  3610                        	.line	640
  3611 05:067F: D4 13        	pei	<L65+pprocess_1+2
  3612 05:0681: D4 11        	pei	<L65+pprocess_1
  3613 05:0683: A0 5E 00     	ldy	#$5e
  3614 05:0686: B7 11        	lda	[<L65+pprocess_1],Y
  3615 05:0688: 48           	pha
  3616 05:0689: A0 5C 00     	ldy	#$5c
  3617 05:068C: B7 11        	lda	[<L65+pprocess_1],Y
  3618 05:068E: 48           	pha
  3619 05:068F: 22 8F 15 05  	jsl	~~k_attach_process_events
  3620                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  3621                        	.line	641
  3622 05:0693: F4 00 00     	pea	#<$0
  3623 05:0696: D4 13        	pei	<L65+pprocess_1+2
  3624 05:0698: D4 11        	pei	<L65+pprocess_1
  3625 05:069A: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  3626                        ;		}
  3627                        	.line	642
  3628                        ;
  3629                        ;
  3630                        ;		//k_debug_string("check3\r\n");
  3631                        ;		//k_heap_integrity_check();
  3632                        ;
  3633                        ;
  3634                        ;		/*
  3635                        ;		pprocess =  k_exec_createProcess("consol
                    e",DefConsoleProc2);
  3636                        ;		if(pprocess!=NULL)
  3637                        ;		{
  3638                        ;			//k_attach_events((FXEventProc)p
  Mon Sep 27 2021  9:39                                                Page 71


                    process->execProc->data,pprocess);
  3639                        ;			k_attach_process_events((FXEvent
                    Proc)pprocess->execProc->data,pprocess);
  3640                        ;		}
  3641                        ;		 */
  3642                        ;		//asm cli;
  3643                        ;
  3644                        ;
  3645                        ;		while(1)
  3646                        L10032:
  3647                        	.line	660
  3648                        L10033:
  3649                        ;		{
  3650                        	.line	661
  3651                        ;			asm sei;
  3652                        	.line	662
  3653                        	asmstart
  3654 05:069E: 78           	sei
  3655                        	asmend
  3656                        ;
  3657                        ;			//asm sei;
  3658                        ;			pmsg = (PFXOSMESSAGE)k_dequeue(_
                    k_eventQueue);
  3659                        	.line	665
  3660 05:069F: AD xx xx     	lda	|~~_k_eventQueue+2
  3661 05:06A2: 48           	pha
  3662 05:06A3: AD xx xx     	lda	|~~_k_eventQueue
  3663 05:06A6: 48           	pha
  3664 05:06A7: 22 xx xx xx  	jsl	~~k_dequeue
  3665 05:06AB: 85 09        	sta	<L65+pmsg_1
  3666 05:06AD: 86 0B        	stx	<L65+pmsg_1+2
  3667                        ;			//if( pmsg == NULL)
  3668                        ;			//	k_debug_integer("k_event
                    _loop pmsg == NULL:", cExt++);
  3669                        ;			//asm cli;
  3670                        ;
  3671                        ;			while(pmsg!=NULL)
  3672                        	.line	670
  3673                        L10035:
  3674 05:06AF: A5 09        	lda	<L65+pmsg_1
  3675 05:06B1: 05 0B        	ora	<L65+pmsg_1+2
  3676 05:06B3: D0 03        	bne	L71
  3677 05:06B5: 82 00 06     	brl	L10036
  3678                        L71:
  3679                        ;			{
  3680                        	.line	671
  3681                        ;				//if( pmsg->type != FX_P
                    ROCESS_TIMER)
  3682                        ;				//	k_debug_integer(
                    "k_event_loop event:", pmsg->type);
  3683                        ;
  3684                        ;				if(pmsg->type == FX_FOCU
                    S_WINDOW)
  3685                        	.line	675
  3686                        ;				{
  3687 05:06B8: A0 08 00     	ldy	#$8
  3688 05:06BB: B7 09        	lda	[<L65+pmsg_1],Y
  3689 05:06BD: C9 13 0F     	cmp	#<$f13
  Mon Sep 27 2021  9:39                                                Page 72


  3690 05:06C0: F0 03        	beq	L72
  3691 05:06C2: 82 B1 00     	brl	L10037
  3692                        L72:
  3693                        	.line	676
  3694                        ;					if(_k_hWndFocus 
                    && pmsg->hwnd!=_k_hWndFocus)
  3695                        	.line	677
  3696                        ;					{
  3697 05:06C5: AD xx xx     	lda	|~~_k_hWndFocus
  3698 05:06C8: 0D xx xx     	ora	|~~_k_hWndFocus+2
  3699 05:06CB: D0 03        	bne	L73
  3700 05:06CD: 82 A6 00     	brl	L10038
  3701                        L73:
  3702 05:06D0: A0 0A 00     	ldy	#$a
  3703 05:06D3: B7 09        	lda	[<L65+pmsg_1],Y
  3704 05:06D5: CD xx xx     	cmp	|~~_k_hWndFocus
  3705 05:06D8: D0 08        	bne	L74
  3706 05:06DA: A0 0C 00     	ldy	#$c
  3707 05:06DD: B7 09        	lda	[<L65+pmsg_1],Y
  3708 05:06DF: CD xx xx     	cmp	|~~_k_hWndFocus+2
  3709                        L74:
  3710 05:06E2: D0 03        	bne	L75
  3711 05:06E4: 82 8F 00     	brl	L10038
  3712                        L75:
  3713                        	.line	678
  3714                        ;						k_debug_
                    string("k_event_loop RECEIVED:FX_FOCUS_WINDOW\r\n");
  3715                        	.line	679
  3716 05:06E7: F4 xx xx     	pea	#^L63+181
  3717 05:06EA: F4 xx xx     	pea	#<L63+181
  3718 05:06ED: 22 xx xx xx  	jsl	~~k_debug_string
  3719                        ;						hWndFocu
                    sLost =  _k_hWndFocus;
  3720                        	.line	680
  3721 05:06F1: AD xx xx     	lda	|~~_k_hWndFocus
  3722 05:06F4: 85 3A        	sta	<L65+hWndFocusLost_1
  3723 05:06F6: AD xx xx     	lda	|~~_k_hWndFocus+2
  3724 05:06F9: 85 3C        	sta	<L65+hWndFocusLost_1+2
  3725                        ;						k_debug_
                    pointer("*** k_event_loop::FX_FOCUS_LOST:",hWndFocusLost);
  3726                        	.line	681
  3727 05:06FB: D4 3C        	pei	<L65+hWndFocusLost_1+2
  3728 05:06FD: D4 3A        	pei	<L65+hWndFocusLost_1
  3729 05:06FF: F4 xx xx     	pea	#^L63+221
  3730 05:0702: F4 xx xx     	pea	#<L63+221
  3731 05:0705: 22 xx xx xx  	jsl	~~k_debug_pointer
  3732                        ;						_k_hWndF
                    ocus = pmsg->hwnd;
  3733                        	.line	682
  3734 05:0709: A0 0A 00     	ldy	#$a
  3735 05:070C: B7 09        	lda	[<L65+pmsg_1],Y
  3736 05:070E: 8D xx xx     	sta	|~~_k_hWndFocus
  3737 05:0711: A0 0C 00     	ldy	#$c
  3738 05:0714: B7 09        	lda	[<L65+pmsg_1],Y
  3739 05:0716: 8D xx xx     	sta	|~~_k_hWndFocus+2
  3740                        ;						bRet = k
                    _enqueue(_k_eventQueue,k_create_synthetic_window_msg(hWndFoc
                    usLost,FX_FOCUS_LOST,&hWndFocusLost,sizeof(hWndFocusLost)));
  Mon Sep 27 2021  9:39                                                Page 73


  3741                        	.line	683
  3742 05:0719: F4 04 00     	pea	#<$4
  3743 05:071C: F4 00 00     	pea	#0
  3744 05:071F: 18           	clc
  3745 05:0720: 7B           	tdc
  3746 05:0721: 69 3A 00     	adc	#<L65+hWndFocusLost_1
  3747 05:0724: 48           	pha
  3748 05:0725: F4 14 0F     	pea	#<$f14
  3749 05:0728: D4 3C        	pei	<L65+hWndFocusLost_1+2
  3750 05:072A: D4 3A        	pei	<L65+hWndFocusLost_1
  3751 05:072C: 22 7D 20 05  	jsl	~~k_create_synthetic_window_msg
  3752 05:0730: 85 01        	sta	<R0
  3753 05:0732: 86 03        	stx	<R0+2
  3754 05:0734: DA           	phx
  3755 05:0735: 48           	pha
  3756 05:0736: AD xx xx     	lda	|~~_k_eventQueue+2
  3757 05:0739: 48           	pha
  3758 05:073A: AD xx xx     	lda	|~~_k_eventQueue
  3759 05:073D: 48           	pha
  3760 05:073E: 22 xx xx xx  	jsl	~~k_enqueue
  3761 05:0742: E2 20        	sep	#$20
  3762                        	longa	off
  3763 05:0744: 85 39        	sta	<L65+bRet_1
  3764 05:0746: C2 20        	rep	#$20
  3765                        	longa	on
  3766                        ;						if(!bRet
                    )
  3767                        	.line	684
  3768                        ;						{
  3769 05:0748: A5 39        	lda	<L65+bRet_1
  3770 05:074A: 29 FF 00     	and	#$ff
  3771 05:074D: F0 03        	beq	L76
  3772 05:074F: 82 10 00     	brl	L10039
  3773                        L76:
  3774                        	.line	685
  3775                        ;							
                    k_debug_integer("k_event_loop RECEIVED:FX_FOCUS_WINDOW:k_enq
                    ueue:",bRet);
  3776                        	.line	686
  3777 05:0752: A5 39        	lda	<L65+bRet_1
  3778 05:0754: 29 FF 00     	and	#$ff
  3779 05:0757: 48           	pha
  3780 05:0758: F4 xx xx     	pea	#^L63+254
  3781 05:075B: F4 xx xx     	pea	#<L63+254
  3782 05:075E: 22 xx xx xx  	jsl	~~k_debug_integer
  3783                        ;						}
  3784                        	.line	687
  3785                        ;						k_send_w
                    indow_message(hWndFocusLost,FX_FOCUS_LOST,NULL,0);
  3786                        L10039:
  3787                        	.line	688
  3788 05:0762: F4 00 00     	pea	#<$0
  3789 05:0765: F4 00 00     	pea	#^$0
  3790 05:0768: F4 00 00     	pea	#<$0
  3791 05:076B: F4 14 0F     	pea	#<$f14
  3792 05:076E: D4 3C        	pei	<L65+hWndFocusLost_1+2
  3793 05:0770: D4 3A        	pei	<L65+hWndFocusLost_1
  3794 05:0772: 22 10 19 05  	jsl	~~k_send_window_message
  Mon Sep 27 2021  9:39                                                Page 74


  3795                        ;
  3796                        ;					}
  3797                        	.line	690
  3798                        ;				}
  3799                        L10038:
  3800                        	.line	691
  3801                        ;				/*
  3802                        ;				if(_k_hLockedFocus && (p
                    msg->hwnd != _k_hLockedFocus))
  3803                        ;				{
  3804                        ;					pmsg->hwnd = _k_
                    hLockedFocus;
  3805                        ;					k_debug_integer(
                    "k_event_loop _k_hLockedFocus LOCKED pmsg->type:", pmsg->typ
                    e);
  3806                        ;					k_debug_pointer(
                    "k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:", pmsg->hwn
                    d);
  3807                        ;				}
  3808                        ;				*/
  3809                        ;
  3810                        ;				_k_system_timer = pmsg->
                    msgTime;
  3811                        L10037:
  3812                        	.line	701
  3813 05:0776: A0 12 00     	ldy	#$12
  3814 05:0779: B7 09        	lda	[<L65+pmsg_1],Y
  3815 05:077B: 8D xx xx     	sta	|~~_k_system_timer
  3816 05:077E: A0 14 00     	ldy	#$14
  3817 05:0781: B7 09        	lda	[<L65+pmsg_1],Y
  3818 05:0783: 8D xx xx     	sta	|~~_k_system_timer+2
  3819                        ;				//k_debug_integer("k_eve
                    nt_loop event:", pmsg->type);
  3820                        ;				//k_debug_byte_array("k_
                    event_loop data:", pmsg->data,3);
  3821                        ;				//k_debug_char("k_event_
                    loop char:", pmsg->data[2]);
  3822                        ;
  3823                        ;				//k_debug_string("check3
                    \r\n");
  3824                        ;				//k_heap_integrity_check
                    ();
  3825                        ;				if(FX_MENU_COMMAND == pm
                    sg->type)
  3826                        	.line	708
  3827                        ;					k_debug_pointer(
                    "k_event_loop event::FX_MENU_COMMAND:", pmsg->hwnd);
  3828 05:0786: A0 08 00     	ldy	#$8
  3829 05:0789: B7 09        	lda	[<L65+pmsg_1],Y
  3830 05:078B: C9 01 FA     	cmp	#<$fa01
  3831 05:078E: F0 03        	beq	L77
  3832 05:0790: 82 16 00     	brl	L10040
  3833                        L77:
  3834                        	.line	709
  3835 05:0793: A0 0C 00     	ldy	#$c
  3836 05:0796: B7 09        	lda	[<L65+pmsg_1],Y
  3837 05:0798: 48           	pha
  3838 05:0799: A0 0A 00     	ldy	#$a
  Mon Sep 27 2021  9:39                                                Page 75


  3839 05:079C: B7 09        	lda	[<L65+pmsg_1],Y
  3840 05:079E: 48           	pha
  3841 05:079F: F4 xx xx     	pea	#^L63+303
  3842 05:07A2: F4 xx xx     	pea	#<L63+303
  3843 05:07A5: 22 xx xx xx  	jsl	~~k_debug_pointer
  3844                        ;
  3845                        ;				if(pmsg->type == FX_PROC
                    ESS_FLOPPY)
  3846                        L10040:
  3847                        	.line	711
  3848                        ;				{
  3849 05:07A9: A0 08 00     	ldy	#$8
  3850 05:07AC: B7 09        	lda	[<L65+pmsg_1],Y
  3851 05:07AE: C9 F2 FF     	cmp	#<$fff2
  3852 05:07B1: F0 03        	beq	L78
  3853 05:07B3: 82 0A 00     	brl	L10041
  3854                        L78:
  3855                        	.line	712
  3856                        ;					k_debug_string("
                    k_event_loop data:FX_PROCESS_FLOPPY\r\n");
  3857                        	.line	713
  3858 05:07B6: F4 xx xx     	pea	#^L63+340
  3859 05:07B9: F4 xx xx     	pea	#<L63+340
  3860 05:07BC: 22 xx xx xx  	jsl	~~k_debug_string
  3861                        ;
  3862                        ;					//k_debug_byte_a
                    rray("k_event_loop data:FX_PROCESS_FLOPPY:", pmsg->pheap,512
                    );
  3863                        ;				}
  3864                        	.line	716
  3865                        ;				if(pmsg->type == FX_PROC
                    ESS_SDCARD)
  3866                        L10041:
  3867                        	.line	717
  3868                        ;				{
  3869 05:07C0: A0 08 00     	ldy	#$8
  3870 05:07C3: B7 09        	lda	[<L65+pmsg_1],Y
  3871 05:07C5: C9 F3 FF     	cmp	#<$fff3
  3872 05:07C8: F0 03        	beq	L79
  3873 05:07CA: 82 3F 00     	brl	L10042
  3874                        L79:
  3875                        	.line	718
  3876                        ;					k_debug_integer(
                    "k_event_loop data:FX_PROCESS_SDCARD:TYPE:",pmsg->data[0]);
  3877                        	.line	719
  3878 05:07CD: A0 16 00     	ldy	#$16
  3879 05:07D0: B7 09        	lda	[<L65+pmsg_1],Y
  3880 05:07D2: 29 FF 00     	and	#$ff
  3881 05:07D5: 48           	pha
  3882 05:07D6: F4 xx xx     	pea	#^L63+378
  3883 05:07D9: F4 xx xx     	pea	#<L63+378
  3884 05:07DC: 22 xx xx xx  	jsl	~~k_debug_integer
  3885                        ;
  3886                        ;					if(!sdcardIntert
                    ed)
  3887                        	.line	721
  3888                        ;					{
  3889 05:07E0: A5 44        	lda	<L65+sdcardInterted_1
  Mon Sep 27 2021  9:39                                                Page 76


  3890 05:07E2: 29 FF 00     	and	#$ff
  3891 05:07E5: F0 03        	beq	L80
  3892 05:07E7: 82 22 00     	brl	L10043
  3893                        L80:
  3894                        	.line	722
  3895                        ;						sdcardIn
                    terted = TRUE;
  3896                        	.line	723
  3897 05:07EA: E2 20        	sep	#$20
  3898                        	longa	off
  3899 05:07EC: A9 01        	lda	#$1
  3900 05:07EE: 85 44        	sta	<L65+sdcardInterted_1
  3901 05:07F0: C2 20        	rep	#$20
  3902                        	longa	on
  3903                        ;
  3904                        ;						pdd = k_
                    create_dos_device(FXDOS_SDC);
  3905                        	.line	725
  3906 05:07F2: F4 05 00     	pea	#<$5
  3907 05:07F5: 22 xx xx xx  	jsl	~~k_create_dos_device
  3908 05:07F9: 85 3E        	sta	<L65+pdd_1
  3909 05:07FB: 86 40        	stx	<L65+pdd_1+2
  3910                        ;						if(pdd =
                    = NULL)
  3911                        	.line	726
  3912                        ;						{
  3913 05:07FD: A5 3E        	lda	<L65+pdd_1
  3914 05:07FF: 05 40        	ora	<L65+pdd_1+2
  3915 05:0801: F0 03        	beq	L81
  3916 05:0803: 82 06 00     	brl	L10044
  3917                        L81:
  3918                        	.line	727
  3919                        ;							
                    sdcardInterted = FALSE;
  3920                        	.line	728
  3921 05:0806: E2 20        	sep	#$20
  3922                        	longa	off
  3923 05:0808: 64 44        	stz	<L65+sdcardInterted_1
  3924 05:080A: C2 20        	rep	#$20
  3925                        	longa	on
  3926                        ;						}
  3927                        	.line	729
  3928                        ;						//k_read
                    _dos_directory(pdd);
  3929                        ;						//k_dos_
                    read_file(pdd,"APGMLIB.LIB");
  3930                        ;						//pdd->p
                    fReader(0,NULL);
  3931                        ;					}
  3932                        L10044:
  3933                        	.line	733
  3934                        ;
  3935                        ;
  3936                        ;					//k_debug_byte_a
                    rray("k_event_loop data:FX_PROCESS_FLOPPY:", pmsg->pheap,512
                    );
  3937                        ;				}
  3938                        L10043:
  Mon Sep 27 2021  9:39                                                Page 77


  3939                        	.line	737
  3940                        ;
  3941                        ;				if((pmsg->type >= FX_MOU
                    SE_MOVE) &&  (pmsg->type <= FX_MBUTTON_DBLCLICK))
  3942                        L10042:
  3943                        	.line	739
  3944                        ;				{
  3945 05:080C: A0 08 00     	ldy	#$8
  3946 05:080F: B7 09        	lda	[<L65+pmsg_1],Y
  3947 05:0811: C9 03 0F     	cmp	#<$f03
  3948 05:0814: B0 03        	bcs	L82
  3949 05:0816: 82 00 04     	brl	L10045
  3950                        L82:
  3951 05:0819: A9 0F 0F     	lda	#$f0f
  3952 05:081C: A0 08 00     	ldy	#$8
  3953 05:081F: D7 09        	cmp	[<L65+pmsg_1],Y
  3954 05:0821: B0 03        	bcs	L83
  3955 05:0823: 82 F3 03     	brl	L10045
  3956                        L83:
  3957                        	.line	740
  3958                        ;					//k_debug_pointe
                    r("k_event_loop MOUSE hwnd:", pmsg->hwnd);
  3959                        ;					//k_debug_intege
                    r("k_event_loop MOUSE event:", pmsg->type);
  3960                        ;
  3961                        ;					x = MAKEWORD(pms
                    g->data[1],pmsg->data[2]);
  3962                        	.line	744
  3963 05:0826: A0 18 00     	ldy	#$18
  3964 05:0829: B7 09        	lda	[<L65+pmsg_1],Y
  3965 05:082B: 29 FF 00     	and	#$ff
  3966 05:082E: 85 05        	sta	<R1
  3967 05:0830: A5 05        	lda	<R1
  3968 05:0832: EB           	xba
  3969 05:0833: 29 00 FF     	and	#$ff00
  3970 05:0836: 85 01        	sta	<R0
  3971 05:0838: A0 17 00     	ldy	#$17
  3972 05:083B: B7 09        	lda	[<L65+pmsg_1],Y
  3973 05:083D: 29 FF 00     	and	#$ff
  3974 05:0840: 85 05        	sta	<R1
  3975 05:0842: A5 05        	lda	<R1
  3976 05:0844: 05 01        	ora	<R0
  3977 05:0846: 85 45        	sta	<L65+x_1
  3978                        ;					y = MAKEWORD(pms
                    g->data[3],pmsg->data[4]);
  3979                        	.line	745
  3980 05:0848: A0 1A 00     	ldy	#$1a
  3981 05:084B: B7 09        	lda	[<L65+pmsg_1],Y
  3982 05:084D: 29 FF 00     	and	#$ff
  3983 05:0850: 85 05        	sta	<R1
  3984 05:0852: A5 05        	lda	<R1
  3985 05:0854: EB           	xba
  3986 05:0855: 29 00 FF     	and	#$ff00
  3987 05:0858: 85 01        	sta	<R0
  3988 05:085A: A0 19 00     	ldy	#$19
  3989 05:085D: B7 09        	lda	[<L65+pmsg_1],Y
  3990 05:085F: 29 FF 00     	and	#$ff
  3991 05:0862: 85 05        	sta	<R1
  Mon Sep 27 2021  9:39                                                Page 78


  3992 05:0864: A5 05        	lda	<R1
  3993 05:0866: 05 01        	ora	<R0
  3994 05:0868: 85 47        	sta	<L65+y_1
  3995                        ;
  3996                        ;					////////////////
                    ////////////////////////////////////////
  3997                        ;					// BETA SECTION
  3998                        ;					////////////////
                    ////////////////////////////////////////
  3999                        ;
  4000                        ;					highhit = k_user
                    _FindRect(x,y);
  4001                        	.line	751
  4002 05:086A: D4 47        	pei	<L65+y_1
  4003 05:086C: D4 45        	pei	<L65+x_1
  4004 05:086E: 22 xx xx xx  	jsl	~~k_user_FindRect
  4005 05:0872: 85 29        	sta	<L65+highhit_1
  4006 05:0874: 86 2B        	stx	<L65+highhit_1+2
  4007                        ;					if(highhit!=NULL
                     && (highhit->styleEx & FXWSX_DESKTOP_FLAG) == 0)
  4008                        	.line	752
  4009                        ;					{
  4010 05:0876: A5 29        	lda	<L65+highhit_1
  4011 05:0878: 05 2B        	ora	<L65+highhit_1+2
  4012 05:087A: D0 03        	bne	L84
  4013 05:087C: 82 DF 00     	brl	L10046
  4014                        L84:
  4015 05:087F: A0 06 00     	ldy	#$6
  4016 05:0882: B7 29        	lda	[<L65+highhit_1],Y
  4017 05:0884: 29 04 00     	and	#<$4
  4018 05:0887: F0 03        	beq	L85
  4019 05:0889: 82 D2 00     	brl	L10046
  4020                        L85:
  4021                        	.line	753
  4022                        ;						if((pmsg
                    ->type == FX_LBUTTON_DOWN) || (pmsg->type == FX_MBUTTON_DOWN
                    ) || (pmsg->type == FX_RBUTTON_DOWN))
  4023                        	.line	754
  4024                        ;						{
  4025 05:088C: A0 08 00     	ldy	#$8
  4026 05:088F: B7 09        	lda	[<L65+pmsg_1],Y
  4027 05:0891: C9 04 0F     	cmp	#<$f04
  4028 05:0894: D0 03        	bne	L87
  4029 05:0896: 82 1A 00     	brl	L86
  4030                        L87:
  4031 05:0899: A0 08 00     	ldy	#$8
  4032 05:089C: B7 09        	lda	[<L65+pmsg_1],Y
  4033 05:089E: C9 0C 0F     	cmp	#<$f0c
  4034 05:08A1: D0 03        	bne	L88
  4035 05:08A3: 82 0D 00     	brl	L86
  4036                        L88:
  4037 05:08A6: A0 08 00     	ldy	#$8
  4038 05:08A9: B7 09        	lda	[<L65+pmsg_1],Y
  4039 05:08AB: C9 08 0F     	cmp	#<$f08
  4040 05:08AE: F0 03        	beq	L89
  4041 05:08B0: 82 76 00     	brl	L10047
  4042                        L89:
  4043                        L86:
  Mon Sep 27 2021  9:39                                                Page 79


  4044                        	.line	755
  4045                        ;							
                    if(currentFocus!=NULL && currentFocus!=highhit)
  4046                        	.line	756
  4047                        ;							
                    {
  4048 05:08B3: A5 2D        	lda	<L65+currentFocus_1
  4049 05:08B5: 05 2F        	ora	<L65+currentFocus_1+2
  4050 05:08B7: D0 03        	bne	L90
  4051 05:08B9: 82 6D 00     	brl	L10048
  4052                        L90:
  4053 05:08BC: A5 2D        	lda	<L65+currentFocus_1
  4054 05:08BE: C5 29        	cmp	<L65+highhit_1
  4055 05:08C0: D0 04        	bne	L91
  4056 05:08C2: A5 2F        	lda	<L65+currentFocus_1+2
  4057 05:08C4: C5 2B        	cmp	<L65+highhit_1+2
  4058                        L91:
  4059 05:08C6: D0 03        	bne	L92
  4060 05:08C8: 82 5E 00     	brl	L10048
  4061                        L92:
  4062                        	.line	757
  4063                        ;							
                    	k_debug_strings("FX_LOST_FOCUS:" , currentFocus->win_tit
                    le);
  4064                        	.line	758
  4065 05:08CB: 18           	clc
  4066 05:08CC: A9 4C 01     	lda	#$14c
  4067 05:08CF: 65 2D        	adc	<L65+currentFocus_1
  4068 05:08D1: 85 01        	sta	<R0
  4069 05:08D3: A9 00 00     	lda	#$0
  4070 05:08D6: 65 2F        	adc	<L65+currentFocus_1+2
  4071 05:08D8: 85 03        	sta	<R0+2
  4072 05:08DA: D4 03        	pei	<R0+2
  4073 05:08DC: D4 01        	pei	<R0
  4074 05:08DE: F4 xx xx     	pea	#^L63+420
  4075 05:08E1: F4 xx xx     	pea	#<L63+420
  4076 05:08E4: 22 xx xx xx  	jsl	~~k_debug_strings
  4077                        ;
  4078                        ;							
                    	currentFocus = highhit;
  4079                        	.line	760
  4080 05:08E8: A5 29        	lda	<L65+highhit_1
  4081 05:08EA: 85 2D        	sta	<L65+currentFocus_1
  4082 05:08EC: A5 2B        	lda	<L65+highhit_1+2
  4083 05:08EE: 85 2F        	sta	<L65+currentFocus_1+2
  4084                        ;							
                    	currentFocus->wndRect.z = k_increment_z(NULL);
  4085                        	.line	761
  4086 05:08F0: F4 00 00     	pea	#^$0
  4087 05:08F3: F4 00 00     	pea	#<$0
  4088 05:08F6: 22 xx xx xx  	jsl	~~k_increment_z
  4089 05:08FA: 85 01        	sta	<R0
  4090 05:08FC: 86 03        	stx	<R0+2
  4091 05:08FE: A5 01        	lda	<R0
  4092 05:0900: A0 20 00     	ldy	#$20
  4093 05:0903: 97 2D        	sta	[<L65+currentFocus_1],Y
  4094 05:0905: A5 03        	lda	<R0+2
  4095 05:0907: A0 22 00     	ldy	#$22
  Mon Sep 27 2021  9:39                                                Page 80


  4096 05:090A: 97 2D        	sta	[<L65+currentFocus_1],Y
  4097                        ;
  4098                        ;
  4099                        ;							
                    	k_debug_strings("HAS FOCUS:" , currentFocus->win_title);
  4100                        	.line	764
  4101 05:090C: 18           	clc
  4102 05:090D: A9 4C 01     	lda	#$14c
  4103 05:0910: 65 2D        	adc	<L65+currentFocus_1
  4104 05:0912: 85 01        	sta	<R0
  4105 05:0914: A9 00 00     	lda	#$0
  4106 05:0917: 65 2F        	adc	<L65+currentFocus_1+2
  4107 05:0919: 85 03        	sta	<R0+2
  4108 05:091B: D4 03        	pei	<R0+2
  4109 05:091D: D4 01        	pei	<R0
  4110 05:091F: F4 xx xx     	pea	#^L63+435
  4111 05:0922: F4 xx xx     	pea	#<L63+435
  4112 05:0925: 22 xx xx xx  	jsl	~~k_debug_strings
  4113                        ;							
                    }
  4114                        	.line	765
  4115                        ;						}
  4116                        L10048:
  4117                        	.line	766
  4118                        ;
  4119                        ;
  4120                        ;						overlaps
                     = k_user_getOverLappedRect(&currentFocus->wndRect,NULL);
  4121                        L10047:
  4122                        	.line	769
  4123 05:0929: F4 00 00     	pea	#^$0
  4124 05:092C: F4 00 00     	pea	#<$0
  4125 05:092F: 18           	clc
  4126 05:0930: A9 1C 00     	lda	#$1c
  4127 05:0933: 65 2D        	adc	<L65+currentFocus_1
  4128 05:0935: 85 01        	sta	<R0
  4129 05:0937: A9 00 00     	lda	#$0
  4130 05:093A: 65 2F        	adc	<L65+currentFocus_1+2
  4131 05:093C: 85 03        	sta	<R0+2
  4132 05:093E: D4 03        	pei	<R0+2
  4133 05:0940: D4 01        	pei	<R0
  4134 05:0942: 22 xx xx xx  	jsl	~~k_user_getOverLappedRect
  4135 05:0946: 85 31        	sta	<L65+overlaps_1
  4136 05:0948: 86 33        	stx	<L65+overlaps_1+2
  4137                        ;						if(overl
                    aps)
  4138                        	.line	770
  4139                        ;						{
  4140 05:094A: A5 31        	lda	<L65+overlaps_1
  4141 05:094C: 05 33        	ora	<L65+overlaps_1+2
  4142 05:094E: D0 03        	bne	L93
  4143 05:0950: 82 08 00     	brl	L10049
  4144                        L93:
  4145                        	.line	771
  4146                        ;							
                    /*
  4147                        ;							
                    intersections = k_user_getIntersectionRect(&currentFocus->wn
  Mon Sep 27 2021  9:39                                                Page 81


                    dRect,overlaps);
  4148                        ;							
                    if(intersections)
  4149                        ;							
                    {
  4150                        ;							
                    	k_nodelist_deallocate_list(intersections);
  4151                        ;							
                    }
  4152                        ;							
                    */
  4153                        ;							
                    k_nodelist_deallocate_list(overlaps);
  4154                        	.line	779
  4155 05:0953: D4 33        	pei	<L65+overlaps_1+2
  4156 05:0955: D4 31        	pei	<L65+overlaps_1
  4157 05:0957: 22 xx xx xx  	jsl	~~k_nodelist_deallocate_list
  4158                        ;						}
  4159                        	.line	780
  4160                        ;
  4161                        ;
  4162                        ;						//highhi
                    t.color = 1;
  4163                        ;						//highhi
                    t->wndRect.z = k_increment_z(NULL);
  4164                        ;
  4165                        ;						//render
                    list.remove(highhit);
  4166                        ;						//render
                    list.add(highhit);
  4167                        ;
  4168                        ;						//curren
                    tFocus = highhit;
  4169                        ;
  4170                        ;						//System
                    .out.println("FX_GOT_FOCUS: " +  currentFocus.name);
  4171                        ;
  4172                        ;					}
  4173                        L10049:
  4174                        	.line	793
  4175                        ;					else if(highhit!
                    =NULL && currentFocus==highhit)
  4176 05:095B: 82 18 00     	brl	L10050
  4177                        L10046:
  4178                        	.line	794
  4179                        ;					{
  4180 05:095E: A5 29        	lda	<L65+highhit_1
  4181 05:0960: 05 2B        	ora	<L65+highhit_1+2
  4182 05:0962: D0 03        	bne	L94
  4183 05:0964: 82 0F 00     	brl	L10051
  4184                        L94:
  4185 05:0967: A5 2D        	lda	<L65+currentFocus_1
  4186 05:0969: C5 29        	cmp	<L65+highhit_1
  4187 05:096B: D0 04        	bne	L95
  4188 05:096D: A5 2F        	lda	<L65+currentFocus_1+2
  4189 05:096F: C5 2B        	cmp	<L65+highhit_1+2
  4190                        L95:
  4191 05:0971: F0 03        	beq	L96
  Mon Sep 27 2021  9:39                                                Page 82


  4192 05:0973: 82 00 00     	brl	L10051
  4193                        L96:
  4194                        	.line	795
  4195                        ;						//System
                    .out.println(highhit.name + " STILL HAS FOCUS");
  4196                        ;						//k_debu
                    g_string("STILL HAS FOCUS");
  4197                        ;					}
  4198                        	.line	798
  4199                        ;					////////////////
                    ////////////////////////////////////////
  4200                        ;					//
  4201                        ;					////////////////
                    ////////////////////////////////////////
  4202                        ;
  4203                        ;
  4204                        ;
  4205                        ;					hitNode = k_poin
                    t_hit_scan(x,y);
  4206                        L10051:
  4207                        L10050:
  4208                        	.line	805
  4209 05:0976: D4 47        	pei	<L65+y_1
  4210 05:0978: D4 45        	pei	<L65+x_1
  4211 05:097A: 22 xx xx xx  	jsl	~~k_point_hit_scan
  4212 05:097E: 85 19        	sta	<L65+hitNode_1
  4213 05:0980: 86 1B        	stx	<L65+hitNode_1+2
  4214                        ;					if(hitNode)
  4215                        	.line	806
  4216                        ;					{
  4217 05:0982: A5 19        	lda	<L65+hitNode_1
  4218 05:0984: 05 1B        	ora	<L65+hitNode_1+2
  4219 05:0986: D0 03        	bne	L97
  4220 05:0988: 82 58 02     	brl	L10052
  4221                        L97:
  4222                        	.line	807
  4223                        ;						//k_debu
                    g_strings("SCAN-HIT PARENT:",HITTOWND(hitNode)->win_title);
  4224                        ;						//k_debu
                    g_strings("SCAN-HIT PARENT:",HITTOWND(hitNode)->win_title);
  4225                        ;						if (HITT
                    OWND(hitNode)->pChildHitList)
  4226                        	.line	810
  4227                        ;						{
  4228 05:098B: A0 02 00     	ldy	#$2
  4229 05:098E: B7 19        	lda	[<L65+hitNode_1],Y
  4230 05:0990: 85 01        	sta	<R0
  4231 05:0992: A0 04 00     	ldy	#$4
  4232 05:0995: B7 19        	lda	[<L65+hitNode_1],Y
  4233 05:0997: 85 03        	sta	<R0+2
  4234 05:0999: A7 01        	lda	[<R0]
  4235 05:099B: 85 05        	sta	<R1
  4236 05:099D: A0 02 00     	ldy	#$2
  4237 05:09A0: B7 01        	lda	[<R0],Y
  4238 05:09A2: 85 07        	sta	<R1+2
  4239 05:09A4: A0 C0 01     	ldy	#$1c0
  4240 05:09A7: B7 05        	lda	[<R1],Y
  4241 05:09A9: A0 C2 01     	ldy	#$1c2
  Mon Sep 27 2021  9:39                                                Page 83


  4242 05:09AC: 17 05        	ora	[<R1],Y
  4243 05:09AE: D0 03        	bne	L98
  4244 05:09B0: 82 42 00     	brl	L10053
  4245                        L98:
  4246                        	.line	811
  4247                        ;							
                    hitChildNode = k_point_in_any_nodeslist(
  4248                        	.line	812
  4249                        ;							
                    		HITTOWND(hitNode)->pChildHitList, x, y);
  4250 05:09B3: D4 47        	pei	<L65+y_1
  4251 05:09B5: D4 45        	pei	<L65+x_1
  4252 05:09B7: A0 02 00     	ldy	#$2
  4253 05:09BA: B7 19        	lda	[<L65+hitNode_1],Y
  4254 05:09BC: 85 01        	sta	<R0
  4255 05:09BE: A0 04 00     	ldy	#$4
  4256 05:09C1: B7 19        	lda	[<L65+hitNode_1],Y
  4257 05:09C3: 85 03        	sta	<R0+2
  4258 05:09C5: A7 01        	lda	[<R0]
  4259 05:09C7: 85 05        	sta	<R1
  4260 05:09C9: A0 02 00     	ldy	#$2
  4261 05:09CC: B7 01        	lda	[<R0],Y
  4262 05:09CE: 85 07        	sta	<R1+2
  4263 05:09D0: A0 C2 01     	ldy	#$1c2
  4264 05:09D3: B7 05        	lda	[<R1],Y
  4265 05:09D5: 48           	pha
  4266 05:09D6: A0 C0 01     	ldy	#$1c0
  4267 05:09D9: B7 05        	lda	[<R1],Y
  4268 05:09DB: 48           	pha
  4269 05:09DC: 22 xx xx xx  	jsl	~~k_point_in_any_nodeslist
  4270 05:09E0: 85 1D        	sta	<L65+hitChildNode_1
  4271 05:09E2: 86 1F        	stx	<L65+hitChildNode_1+2
  4272                        ;							
                    if (hitChildNode)
  4273                        	.line	814
  4274                        ;							
                    {
  4275 05:09E4: A5 1D        	lda	<L65+hitChildNode_1
  4276 05:09E6: 05 1F        	ora	<L65+hitChildNode_1+2
  4277 05:09E8: D0 03        	bne	L99
  4278 05:09EA: 82 08 00     	brl	L10054
  4279                        L99:
  4280                        	.line	815
  4281                        ;							
                    	//k_debug_strings("SCAN-HIT CHILD:",HITTOWND(hitChildNod
                    e)->win_title);
  4282                        ;							
                    	hitNode = hitChildNode;
  4283                        	.line	817
  4284 05:09ED: A5 1D        	lda	<L65+hitChildNode_1
  4285 05:09EF: 85 19        	sta	<L65+hitNode_1
  4286 05:09F1: A5 1F        	lda	<L65+hitChildNode_1+2
  4287 05:09F3: 85 1B        	sta	<L65+hitNode_1+2
  4288                        ;							
                    }
  4289                        	.line	818
  4290                        ;						}
  4291                        L10054:
  Mon Sep 27 2021  9:39                                                Page 84


  4292                        	.line	819
  4293                        ;						//k_debu
                    g_strings("SCAN-HIT:",HITTOWND(hitNode)->win_title);
  4294                        ;						if (hitN
                    ode)
  4295                        L10053:
  4296                        	.line	821
  4297                        ;						{
  4298 05:09F5: A5 19        	lda	<L65+hitNode_1
  4299 05:09F7: 05 1B        	ora	<L65+hitNode_1+2
  4300 05:09F9: D0 03        	bne	L100
  4301 05:09FB: 82 E5 01     	brl	L10055
  4302                        L100:
  4303                        	.line	822
  4304                        ;							
                    pWin = HITTOWND(hitNode);
  4305                        	.line	823
  4306 05:09FE: A0 02 00     	ldy	#$2
  4307 05:0A01: B7 19        	lda	[<L65+hitNode_1],Y
  4308 05:0A03: 85 01        	sta	<R0
  4309 05:0A05: A0 04 00     	ldy	#$4
  4310 05:0A08: B7 19        	lda	[<L65+hitNode_1],Y
  4311 05:0A0A: 85 03        	sta	<R0+2
  4312 05:0A0C: A7 01        	lda	[<R0]
  4313 05:0A0E: 85 21        	sta	<L65+pWin_1
  4314 05:0A10: A0 02 00     	ldy	#$2
  4315 05:0A13: B7 01        	lda	[<R0],Y
  4316 05:0A15: 85 23        	sta	<L65+pWin_1+2
  4317                        ;							
                    if (pWin)
  4318                        	.line	824
  4319                        ;							
                    {
  4320 05:0A17: A5 21        	lda	<L65+pWin_1
  4321 05:0A19: 05 23        	ora	<L65+pWin_1+2
  4322 05:0A1B: D0 03        	bne	L101
  4323 05:0A1D: 82 C3 01     	brl	L10056
  4324                        L101:
  4325                        	.line	825
  4326                        ;							
                    	((PCLICKDETECTED) hitNode->data)->handler(pWin);
  4327                        	.line	826
  4328 05:0A20: D4 23        	pei	<L65+pWin_1+2
  4329 05:0A22: D4 21        	pei	<L65+pWin_1
  4330 05:0A24: A0 02 00     	ldy	#$2
  4331 05:0A27: B7 19        	lda	[<L65+hitNode_1],Y
  4332 05:0A29: 85 01        	sta	<R0
  4333 05:0A2B: A0 04 00     	ldy	#$4
  4334 05:0A2E: B7 19        	lda	[<L65+hitNode_1],Y
  4335 05:0A30: 85 03        	sta	<R0+2
  4336 05:0A32: A0 06 00     	ldy	#$6
  4337 05:0A35: B7 01        	lda	[<R0],Y
  4338 05:0A37: AA           	tax
  4339 05:0A38: A0 04 00     	ldy	#$4
  4340 05:0A3B: B7 01        	lda	[<R0],Y
  4341                        	xref	~~~lcal
  4342 05:0A3D: 22 xx xx xx  	jsl	~~~lcal
  4343                        ;							
  Mon Sep 27 2021  9:39                                                Page 85


                    	pmsg->hwnd = k_getHandleFromWindow(pWin);
  4344                        	.line	827
  4345 05:0A41: D4 23        	pei	<L65+pWin_1+2
  4346 05:0A43: D4 21        	pei	<L65+pWin_1
  4347 05:0A45: 22 xx xx xx  	jsl	~~k_getHandleFromWindow
  4348 05:0A49: 85 01        	sta	<R0
  4349 05:0A4B: 86 03        	stx	<R0+2
  4350 05:0A4D: A5 01        	lda	<R0
  4351 05:0A4F: A0 0A 00     	ldy	#$a
  4352 05:0A52: 97 09        	sta	[<L65+pmsg_1],Y
  4353 05:0A54: A5 03        	lda	<R0+2
  4354 05:0A56: A0 0C 00     	ldy	#$c
  4355 05:0A59: 97 09        	sta	[<L65+pmsg_1],Y
  4356                        ;
  4357                        ;							
                    	if ((pmsg->type == FX_LBUTTON_DOWN)
  4358                        	.line	829
  4359                        ;							
                    			|| (pmsg->type == FX_MBUTTON_DOWN)
  4360                        ;							
                    			|| (pmsg->type == FX_RBUTTON_DOWN))
  4361                        ;							
                    	{
  4362 05:0A5B: A0 08 00     	ldy	#$8
  4363 05:0A5E: B7 09        	lda	[<L65+pmsg_1],Y
  4364 05:0A60: C9 04 0F     	cmp	#<$f04
  4365 05:0A63: D0 03        	bne	L103
  4366 05:0A65: 82 1A 00     	brl	L102
  4367                        L103:
  4368 05:0A68: A0 08 00     	ldy	#$8
  4369 05:0A6B: B7 09        	lda	[<L65+pmsg_1],Y
  4370 05:0A6D: C9 0C 0F     	cmp	#<$f0c
  4371 05:0A70: D0 03        	bne	L104
  4372 05:0A72: 82 0D 00     	brl	L102
  4373                        L104:
  4374 05:0A75: A0 08 00     	ldy	#$8
  4375 05:0A78: B7 09        	lda	[<L65+pmsg_1],Y
  4376 05:0A7A: C9 08 0F     	cmp	#<$f08
  4377 05:0A7D: F0 03        	beq	L105
  4378 05:0A7F: 82 2F 01     	brl	L10057
  4379                        L105:
  4380                        L102:
  4381                        	.line	832
  4382                        ;							
                    		if (pmsg->hwnd != _k_hWndFocus)
  4383                        	.line	833
  4384                        ;							
                    		{
  4385 05:0A82: A0 0A 00     	ldy	#$a
  4386 05:0A85: B7 09        	lda	[<L65+pmsg_1],Y
  4387 05:0A87: CD xx xx     	cmp	|~~_k_hWndFocus
  4388 05:0A8A: D0 08        	bne	L106
  4389 05:0A8C: A0 0C 00     	ldy	#$c
  4390 05:0A8F: B7 09        	lda	[<L65+pmsg_1],Y
  4391 05:0A91: CD xx xx     	cmp	|~~_k_hWndFocus+2
  4392                        L106:
  4393 05:0A94: D0 03        	bne	L107
  4394 05:0A96: 82 18 01     	brl	L10058
  Mon Sep 27 2021  9:39                                                Page 86


  4395                        L107:
  4396                        	.line	834
  4397                        ;							
                    			k_debug_pointer("*** k_event_loop::FX_FO
                    CUS_WINDOW:",
  4398                        	.line	835
  4399                        ;							
                    					pmsg->hwnd);
  4400 05:0A99: A0 0C 00     	ldy	#$c
  4401 05:0A9C: B7 09        	lda	[<L65+pmsg_1],Y
  4402 05:0A9E: 48           	pha
  4403 05:0A9F: A0 0A 00     	ldy	#$a
  4404 05:0AA2: B7 09        	lda	[<L65+pmsg_1],Y
  4405 05:0AA4: 48           	pha
  4406 05:0AA5: F4 xx xx     	pea	#^L63+446
  4407 05:0AA8: F4 xx xx     	pea	#<L63+446
  4408 05:0AAB: 22 xx xx xx  	jsl	~~k_debug_pointer
  4409                        ;
  4410                        ;							
                    			if (_k_hWndFocus)
  4411                        	.line	838
  4412                        ;							
                    			{
  4413 05:0AAF: AD xx xx     	lda	|~~_k_hWndFocus
  4414 05:0AB2: 0D xx xx     	ora	|~~_k_hWndFocus+2
  4415 05:0AB5: D0 03        	bne	L108
  4416 05:0AB7: 82 75 00     	brl	L10059
  4417                        L108:
  4418                        	.line	839
  4419                        ;							
                    				hWndFocusLost = _k_hWndFocus;
  4420                        	.line	840
  4421 05:0ABA: AD xx xx     	lda	|~~_k_hWndFocus
  4422 05:0ABD: 85 3A        	sta	<L65+hWndFocusLost_1
  4423 05:0ABF: AD xx xx     	lda	|~~_k_hWndFocus+2
  4424 05:0AC2: 85 3C        	sta	<L65+hWndFocusLost_1+2
  4425                        ;							
                    				k_debug_pointer("*** k_event_loo
                    p::FX_FOCUS_LOST:",
  4426                        	.line	841
  4427                        ;							
                    						hWndFocusLost);
  4428 05:0AC4: D4 3C        	pei	<L65+hWndFocusLost_1+2
  4429 05:0AC6: D4 3A        	pei	<L65+hWndFocusLost_1
  4430 05:0AC8: F4 xx xx     	pea	#^L63+481
  4431 05:0ACB: F4 xx xx     	pea	#<L63+481
  4432 05:0ACE: 22 xx xx xx  	jsl	~~k_debug_pointer
  4433                        ;							
                    				bRet = k_enqueue(_k_eventQueue,
  4434                        	.line	843
  4435                        ;							
                    						k_create_synthet
                    ic_window_msg(hWndFocusLost,
  4436                        ;							
                    								
                    FX_FOCUS_LOST, &hWndFocusLost,
  4437                        ;							
                    								
  Mon Sep 27 2021  9:39                                                Page 87


                    sizeof(hWndFocusLost)));
  4438 05:0AD2: F4 04 00     	pea	#<$4
  4439 05:0AD5: F4 00 00     	pea	#0
  4440 05:0AD8: 18           	clc
  4441 05:0AD9: 7B           	tdc
  4442 05:0ADA: 69 3A 00     	adc	#<L65+hWndFocusLost_1
  4443 05:0ADD: 48           	pha
  4444 05:0ADE: F4 14 0F     	pea	#<$f14
  4445 05:0AE1: D4 3C        	pei	<L65+hWndFocusLost_1+2
  4446 05:0AE3: D4 3A        	pei	<L65+hWndFocusLost_1
  4447 05:0AE5: 22 7D 20 05  	jsl	~~k_create_synthetic_window_msg
  4448 05:0AE9: 85 01        	sta	<R0
  4449 05:0AEB: 86 03        	stx	<R0+2
  4450 05:0AED: DA           	phx
  4451 05:0AEE: 48           	pha
  4452 05:0AEF: AD xx xx     	lda	|~~_k_eventQueue+2
  4453 05:0AF2: 48           	pha
  4454 05:0AF3: AD xx xx     	lda	|~~_k_eventQueue
  4455 05:0AF6: 48           	pha
  4456 05:0AF7: 22 xx xx xx  	jsl	~~k_enqueue
  4457 05:0AFB: E2 20        	sep	#$20
  4458                        	longa	off
  4459 05:0AFD: 85 39        	sta	<L65+bRet_1
  4460 05:0AFF: C2 20        	rep	#$20
  4461                        	longa	on
  4462                        ;							
                    				if (!bRet)
  4463                        	.line	847
  4464                        ;							
                    				{
  4465 05:0B01: A5 39        	lda	<L65+bRet_1
  4466 05:0B03: 29 FF 00     	and	#$ff
  4467 05:0B06: F0 03        	beq	L109
  4468 05:0B08: 82 10 00     	brl	L10060
  4469                        L109:
  4470                        	.line	848
  4471                        ;							
                    					k_debug_integer(
  4472                        	.line	849
  4473                        ;							
                    							"k_event
                    _loop RECEIVED:FX_FOCUS_LOST:k_enqueue:",
  4474                        ;							
                    							bRet);
  4475 05:0B0B: A5 39        	lda	<L65+bRet_1
  4476 05:0B0D: 29 FF 00     	and	#$ff
  4477 05:0B10: 48           	pha
  4478 05:0B11: F4 xx xx     	pea	#^L63+514
  4479 05:0B14: F4 xx xx     	pea	#<L63+514
  4480 05:0B17: 22 xx xx xx  	jsl	~~k_debug_integer
  4481                        ;							
                    				}
  4482                        	.line	852
  4483                        ;							
                    				k_send_window_message(hWndFocusL
                    ost, FX_FOCUS_LOST,
  4484                        L10060:
  4485                        	.line	853
  Mon Sep 27 2021  9:39                                                Page 88


  4486                        ;							
                    						NULL, 0);
  4487 05:0B1B: F4 00 00     	pea	#<$0
  4488 05:0B1E: F4 00 00     	pea	#^$0
  4489 05:0B21: F4 00 00     	pea	#<$0
  4490 05:0B24: F4 14 0F     	pea	#<$f14
  4491 05:0B27: D4 3C        	pei	<L65+hWndFocusLost_1+2
  4492 05:0B29: D4 3A        	pei	<L65+hWndFocusLost_1
  4493 05:0B2B: 22 10 19 05  	jsl	~~k_send_window_message
  4494                        ;
  4495                        ;							
                    			}
  4496                        	.line	856
  4497                        ;
  4498                        ;							
                    			bRet = k_enqueue(_k_eventQueue,
  4499                        L10059:
  4500                        	.line	858
  4501                        ;							
                    					k_create_synthetic_windo
                    w_msg(pmsg->hwnd,
  4502                        ;							
                    							FX_FOCUS
                    _WINDOW, &_k_hWndFocus,
  4503                        ;							
                    							sizeof(_
                    k_hWndFocus)));
  4504 05:0B2F: F4 04 00     	pea	#<$4
  4505 05:0B32: A9 xx xx     	lda	#<~~_k_hWndFocus
  4506 05:0B35: 85 01        	sta	<R0
  4507                        	xref	_BEG_DATA
  4508 05:0B37: A9 xx xx     	lda	#_BEG_DATA>>16
  4509 05:0B3A: 85 03        	sta	<R0+2
  4510 05:0B3C: D4 03        	pei	<R0+2
  4511 05:0B3E: D4 01        	pei	<R0
  4512 05:0B40: F4 13 0F     	pea	#<$f13
  4513 05:0B43: A0 0C 00     	ldy	#$c
  4514 05:0B46: B7 09        	lda	[<L65+pmsg_1],Y
  4515 05:0B48: 48           	pha
  4516 05:0B49: A0 0A 00     	ldy	#$a
  4517 05:0B4C: B7 09        	lda	[<L65+pmsg_1],Y
  4518 05:0B4E: 48           	pha
  4519 05:0B4F: 22 7D 20 05  	jsl	~~k_create_synthetic_window_msg
  4520 05:0B53: 85 05        	sta	<R1
  4521 05:0B55: 86 07        	stx	<R1+2
  4522 05:0B57: DA           	phx
  4523 05:0B58: 48           	pha
  4524 05:0B59: AD xx xx     	lda	|~~_k_eventQueue+2
  4525 05:0B5C: 48           	pha
  4526 05:0B5D: AD xx xx     	lda	|~~_k_eventQueue
  4527 05:0B60: 48           	pha
  4528 05:0B61: 22 xx xx xx  	jsl	~~k_enqueue
  4529 05:0B65: E2 20        	sep	#$20
  4530                        	longa	off
  4531 05:0B67: 85 39        	sta	<L65+bRet_1
  4532 05:0B69: C2 20        	rep	#$20
  4533                        	longa	on
  4534                        ;							
  Mon Sep 27 2021  9:39                                                Page 89


                    			if (!bRet)
  4535                        	.line	862
  4536                        ;							
                    			{
  4537 05:0B6B: A5 39        	lda	<L65+bRet_1
  4538 05:0B6D: 29 FF 00     	and	#$ff
  4539 05:0B70: F0 03        	beq	L110
  4540 05:0B72: 82 10 00     	brl	L10061
  4541                        L110:
  4542                        	.line	863
  4543                        ;							
                    				k_debug_integer(
  4544                        	.line	864
  4545                        ;							
                    						"k_event_loop RE
                    CEIVED:FX_FOCUS_WINDOW:k_enqueue:",
  4546                        ;							
                    						bRet);
  4547 05:0B75: A5 39        	lda	<L65+bRet_1
  4548 05:0B77: 29 FF 00     	and	#$ff
  4549 05:0B7A: 48           	pha
  4550 05:0B7B: F4 xx xx     	pea	#^L63+561
  4551 05:0B7E: F4 xx xx     	pea	#<L63+561
  4552 05:0B81: 22 xx xx xx  	jsl	~~k_debug_integer
  4553                        ;							
                    			}
  4554                        	.line	867
  4555                        ;							
                    			//
  4556                        ;							
                    			//
  4557                        ;							
                    			// NT 2/3/2021
  4558                        ;							
                    			//currentFocus = pWin;
  4559                        ;							
                    			//
  4560                        ;							
                    			k_send_window_message(pmsg->hwnd, FX_FOC
                    US_WINDOW, NULL, 0);
  4561                        L10061:
  4562                        	.line	873
  4563 05:0B85: F4 00 00     	pea	#<$0
  4564 05:0B88: F4 00 00     	pea	#^$0
  4565 05:0B8B: F4 00 00     	pea	#<$0
  4566 05:0B8E: F4 13 0F     	pea	#<$f13
  4567 05:0B91: A0 0C 00     	ldy	#$c
  4568 05:0B94: B7 09        	lda	[<L65+pmsg_1],Y
  4569 05:0B96: 48           	pha
  4570 05:0B97: A0 0A 00     	ldy	#$a
  4571 05:0B9A: B7 09        	lda	[<L65+pmsg_1],Y
  4572 05:0B9C: 48           	pha
  4573 05:0B9D: 22 10 19 05  	jsl	~~k_send_window_message
  4574                        ;							
                    			_k_hWndFocus = pmsg->hwnd;
  4575                        	.line	874
  4576 05:0BA1: A0 0A 00     	ldy	#$a
  4577 05:0BA4: B7 09        	lda	[<L65+pmsg_1],Y
  Mon Sep 27 2021  9:39                                                Page 90


  4578 05:0BA6: 8D xx xx     	sta	|~~_k_hWndFocus
  4579 05:0BA9: A0 0C 00     	ldy	#$c
  4580 05:0BAC: B7 09        	lda	[<L65+pmsg_1],Y
  4581 05:0BAE: 8D xx xx     	sta	|~~_k_hWndFocus+2
  4582                        ;							
                    		}
  4583                        	.line	875
  4584                        ;							
                    	}
  4585                        L10058:
  4586                        	.line	876
  4587                        ;
  4588                        ;							
                    	if (pmsg->type < 0xF000 && k_isNonClient(pWin, pmsg, x, 
                    y))
  4589                        L10057:
  4590                        	.line	878
  4591                        ;							
                    	{
  4592 05:0BB1: A0 08 00     	ldy	#$8
  4593 05:0BB4: B7 09        	lda	[<L65+pmsg_1],Y
  4594 05:0BB6: C9 00 F0     	cmp	#<$f000
  4595 05:0BB9: 90 03        	bcc	L111
  4596 05:0BBB: 82 25 00     	brl	L10062
  4597                        L111:
  4598 05:0BBE: D4 47        	pei	<L65+y_1
  4599 05:0BC0: D4 45        	pei	<L65+x_1
  4600 05:0BC2: D4 0B        	pei	<L65+pmsg_1+2
  4601 05:0BC4: D4 09        	pei	<L65+pmsg_1
  4602 05:0BC6: D4 23        	pei	<L65+pWin_1+2
  4603 05:0BC8: D4 21        	pei	<L65+pWin_1
  4604 05:0BCA: 22 xx xx xx  	jsl	~~k_isNonClient
  4605 05:0BCE: 29 FF 00     	and	#$ff
  4606 05:0BD1: D0 03        	bne	L112
  4607 05:0BD3: 82 0D 00     	brl	L10062
  4608                        L112:
  4609                        	.line	879
  4610                        ;							
                    		//k_debug_string("*** k_event_loop::NON-CLIENT M
                    OUSE EVENT\r\n");
  4611                        ;
  4612                        ;							
                    		//k_debug_pointer("*** k_event_loop::NON-CLIENT 
                    MOUSE EVENT BEFORE:",(LPVOID)(LONG)pmsg->type);
  4613                        ;							
                    		pmsg->type = (UINT) (pmsg->type | 0x008000);
  4614                        	.line	883
  4615 05:0BD6: A0 08 00     	ldy	#$8
  4616 05:0BD9: B7 09        	lda	[<L65+pmsg_1],Y
  4617 05:0BDB: 09 00 80     	ora	#<$8000
  4618 05:0BDE: A0 08 00     	ldy	#$8
  4619 05:0BE1: 97 09        	sta	[<L65+pmsg_1],Y
  4620                        ;							
                    		//k_debug_pointer("*** k_event_loop::NON-CLIENT 
                    MOUSE EVENT AFTER :",(LPVOID)(LONG)pmsg->type);
  4621                        ;							
                    	}
  4622                        	.line	885
  Mon Sep 27 2021  9:39                                                Page 91


  4623                        ;							
                    }
  4624                        L10062:
  4625                        	.line	886
  4626                        ;						}
  4627                        L10056:
  4628                        	.line	887
  4629                        ;					}
  4630                        L10055:
  4631                        	.line	888
  4632                        ;
  4633                        ;
  4634                        ;					//hitNode = k_po
                    int_in_any_nodeslist(((PCLICKDETECTED)k_point_hit_scan(x,y)-
                    >data)->window->pChildHitList,x,y);
  4635                        ;
  4636                        ;					/*
  4637                        ;					hitNode = k_poin
                    t_in_nodeslist(x,y);
  4638                        ;					if(hitNode)
  4639                        ;					{
  4640                        ;						hitNodeP
                    arent = hitNode;
  4641                        ;						//k_debu
                    g_message("Found hit:",hitNode->name);
  4642                        ;
  4643                        ;						pWin = (
                    (PCLICKDETECTED)hitNode->data)->window;
  4644                        ;						//if(pWi
                    n && pWin->isVisible)
  4645                        ;						if(pWin)
  4646                        ;						{
  4647                        ;							
                    //k_debug_string("k_do_processes::Window\r\n");
  4648                        ;							
                    //k_debug_pointer("k_do_processes::pWin->pChildWindows:",pWi
                    n->pChildWindows);
  4649                        ;							
                    //if(pWin->pChildHitList)
  4650                        ;							
                    if(pWin->pChildHitList)
  4651                        ;							
                    {
  4652                        ;							
                    	// check if children were clicked
  4653                        ;							
                    	hitChildNode = k_point_in_any_nodeslist(pWin->pChildHitL
                    ist,x,y);
  4654                        ;							
                    	if(hitChildNode)
  4655                        ;							
                    	{
  4656                        ;							
                    		// switch hit to child
  4657                        ;							
                    		//k_debug_strings("k_do_processes::child-hit:",h
                    itChildNode->name);
  4658                        ;							
  Mon Sep 27 2021  9:39                                                Page 92


                    		hitNode = hitChildNode;
  4659                        ;							
                    		pWin = ((PCLICKDETECTED)hitChildNode->data)->win
                    dow;
  4660                        ;							
                    	}
  4661                        ;							
                    }
  4662                        ;
  4663                        ;							
                    ((PCLICKDETECTED)hitNode->data)->handler(pWin);
  4664                        ;							
                    pmsg->hwnd = k_getHandleFromWindow(pWin);
  4665                        ;
  4666                        ;							
                    if((pmsg->type == FX_LBUTTON_DOWN) || (pmsg->type == FX_MBUT
                    TON_DOWN) || (pmsg->type == FX_RBUTTON_DOWN))
  4667                        ;							
                    {
  4668                        ;							
                    	if(pmsg->hwnd!=hWndFocus)
  4669                        ;							
                    	{
  4670                        ;							
                    		k_debug_pointer("*** k_event_loop::FX_FOCUS_WIND
                    OW:",pmsg->hwnd);
  4671                        ;							
                    		k_enqueue(_k_eventQueue,k_create_synthetic_windo
                    w_msg(pmsg->hwnd,FX_FOCUS_WINDOW,&hWndFocus,sizeof(hWndFocus
                    )));
  4672                        ;							
                    		hWndFocus =  pmsg->hwnd;
  4673                        ;							
                    	}
  4674                        ;							
                    }
  4675                        ;
  4676                        ;//						
                    	if(k_isNonClient(pWin,pmsg,x,y))
  4677                        ;//						
                    	{
  4678                        ;//						
                    		k_debug_string("*** k_event_loop::NON-CLIENT MOU
                    SE EVENT\r\n");
  4679                        ;//						
                    	}
  4680                        ;
  4681                        ;
  4682                        ;						}
  4683                        ;
  4684                        ;					}
  4685                        ;					*/
  4686                        ;
  4687                        ;					/*
  4688                        ;					if(_k_hLockedFoc
                    us && (pmsg->hwnd != _k_hLockedFocus))
  4689                        ;					{
  4690                        ;						pmsg->hw
  Mon Sep 27 2021  9:39                                                Page 93


                    nd = _k_hLockedFocus;
  4691                        ;						k_debug_
                    pointer("k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:", p
                    msg->hwnd);
  4692                        ;					}
  4693                        ;					*/
  4694                        ;					if(!pmsg->hwnd)
  4695                        L10052:
  4696                        	.line	951
  4697                        ;					{
  4698 05:0BE3: A0 0A 00     	ldy	#$a
  4699 05:0BE6: B7 09        	lda	[<L65+pmsg_1],Y
  4700 05:0BE8: A0 0C 00     	ldy	#$c
  4701 05:0BEB: 17 09        	ora	[<L65+pmsg_1],Y
  4702 05:0BED: F0 03        	beq	L113
  4703 05:0BEF: 82 27 00     	brl	L10063
  4704                        L113:
  4705                        	.line	952
  4706                        ;						if(k_use
                    r_getDesktopWindow())
  4707                        	.line	953
  4708                        ;						{
  4709 05:0BF2: 22 xx xx xx  	jsl	~~k_user_getDesktopWindow
  4710 05:0BF6: 85 01        	sta	<R0
  4711 05:0BF8: 86 03        	stx	<R0+2
  4712 05:0BFA: A5 01        	lda	<R0
  4713 05:0BFC: 05 03        	ora	<R0+2
  4714 05:0BFE: D0 03        	bne	L114
  4715 05:0C00: 82 16 00     	brl	L10064
  4716                        L114:
  4717                        	.line	954
  4718                        ;							
                    pmsg->hwnd = k_user_getDesktopWindow();
  4719                        	.line	955
  4720 05:0C03: 22 xx xx xx  	jsl	~~k_user_getDesktopWindow
  4721 05:0C07: 85 01        	sta	<R0
  4722 05:0C09: 86 03        	stx	<R0+2
  4723 05:0C0B: A5 01        	lda	<R0
  4724 05:0C0D: A0 0A 00     	ldy	#$a
  4725 05:0C10: 97 09        	sta	[<L65+pmsg_1],Y
  4726 05:0C12: A5 03        	lda	<R0+2
  4727 05:0C14: A0 0C 00     	ldy	#$c
  4728 05:0C17: 97 09        	sta	[<L65+pmsg_1],Y
  4729                        ;						}
  4730                        	.line	956
  4731                        ;					}
  4732                        L10064:
  4733                        	.line	957
  4734                        ;
  4735                        ;
  4736                        ;					/*
  4737                        ;					if(_k_hLockedFoc
                    us)
  4738                        ;					{
  4739                        ;						pmsg->hw
                    nd = _k_hLockedFocus;
  4740                        ;						//k_debu
                    g_integer("k_event_loop _k_hLockedFocus LOCKED pmsg->type:",
  Mon Sep 27 2021  9:39                                                Page 94


                     pmsg->type);
  4741                        ;						//k_debu
                    g_pointer("k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:",
                     pmsg->hwnd);
  4742                        ;					}
  4743                        ;					*/
  4744                        ;				}
  4745                        L10063:
  4746                        	.line	968
  4747                        ;
  4748                        ;				//k_debug_pointer("k_eve
                    nt_loop hWndFocus pmsg->hwnd:", pmsg->hwnd);
  4749                        ;				if(_k_hWndFocus && ((pms
                    g->type == FX_KEY_DOWN) || (pmsg->type == FX_KEY_UP)))
  4750                        L10045:
  4751                        	.line	971
  4752                        ;				{
  4753 05:0C19: AD xx xx     	lda	|~~_k_hWndFocus
  4754 05:0C1C: 0D xx xx     	ora	|~~_k_hWndFocus+2
  4755 05:0C1F: D0 03        	bne	L115
  4756 05:0C21: 82 37 00     	brl	L10065
  4757                        L115:
  4758 05:0C24: A0 08 00     	ldy	#$8
  4759 05:0C27: B7 09        	lda	[<L65+pmsg_1],Y
  4760 05:0C29: C9 10 0F     	cmp	#<$f10
  4761 05:0C2C: D0 03        	bne	L117
  4762 05:0C2E: 82 0D 00     	brl	L116
  4763                        L117:
  4764 05:0C31: A0 08 00     	ldy	#$8
  4765 05:0C34: B7 09        	lda	[<L65+pmsg_1],Y
  4766 05:0C36: C9 12 0F     	cmp	#<$f12
  4767 05:0C39: F0 03        	beq	L118
  4768 05:0C3B: 82 1D 00     	brl	L10065
  4769                        L118:
  4770                        L116:
  4771                        	.line	972
  4772                        ;					k_debug_string("
                    *** k_event_loop::FX_KEY_*\r\n");
  4773                        	.line	973
  4774 05:0C3E: F4 xx xx     	pea	#^L63+610
  4775 05:0C41: F4 xx xx     	pea	#<L63+610
  4776 05:0C44: 22 xx xx xx  	jsl	~~k_debug_string
  4777                        ;					pmsg->hwnd = _k_
                    hWndFocus;
  4778                        	.line	974
  4779 05:0C48: AD xx xx     	lda	|~~_k_hWndFocus
  4780 05:0C4B: A0 0A 00     	ldy	#$a
  4781 05:0C4E: 97 09        	sta	[<L65+pmsg_1],Y
  4782 05:0C50: AD xx xx     	lda	|~~_k_hWndFocus+2
  4783 05:0C53: A0 0C 00     	ldy	#$c
  4784 05:0C56: 97 09        	sta	[<L65+pmsg_1],Y
  4785                        ;				}
  4786                        	.line	975
  4787                        ;				else if(((pmsg->type == 
                    FX_KEY_DOWN) || (pmsg->type == FX_KEY_UP)))
  4788 05:0C58: 82 3A 00     	brl	L10066
  4789                        L10065:
  4790                        	.line	976
  Mon Sep 27 2021  9:39                                                Page 95


  4791                        ;				{
  4792 05:0C5B: A0 08 00     	ldy	#$8
  4793 05:0C5E: B7 09        	lda	[<L65+pmsg_1],Y
  4794 05:0C60: C9 10 0F     	cmp	#<$f10
  4795 05:0C63: D0 03        	bne	L120
  4796 05:0C65: 82 0D 00     	brl	L119
  4797                        L120:
  4798 05:0C68: A0 08 00     	ldy	#$8
  4799 05:0C6B: B7 09        	lda	[<L65+pmsg_1],Y
  4800 05:0C6D: C9 12 0F     	cmp	#<$f12
  4801 05:0C70: F0 03        	beq	L121
  4802 05:0C72: 82 20 00     	brl	L10067
  4803                        L121:
  4804                        L119:
  4805                        	.line	977
  4806                        ;					k_debug_string("
                    *** k_event_loop::FX_KEY_*\r\n");
  4807                        	.line	978
  4808 05:0C75: F4 xx xx     	pea	#^L63+639
  4809 05:0C78: F4 xx xx     	pea	#<L63+639
  4810 05:0C7B: 22 xx xx xx  	jsl	~~k_debug_string
  4811                        ;					pmsg->hwnd = k_u
                    ser_getDesktopWindow();
  4812                        	.line	979
  4813 05:0C7F: 22 xx xx xx  	jsl	~~k_user_getDesktopWindow
  4814 05:0C83: 85 01        	sta	<R0
  4815 05:0C85: 86 03        	stx	<R0+2
  4816 05:0C87: A5 01        	lda	<R0
  4817 05:0C89: A0 0A 00     	ldy	#$a
  4818 05:0C8C: 97 09        	sta	[<L65+pmsg_1],Y
  4819 05:0C8E: A5 03        	lda	<R0+2
  4820 05:0C90: A0 0C 00     	ldy	#$c
  4821 05:0C93: 97 09        	sta	[<L65+pmsg_1],Y
  4822                        ;				}
  4823                        	.line	980
  4824                        ;				k_do_processes(pmsg);
  4825                        L10067:
  4826                        L10066:
  4827                        	.line	981
  4828 05:0C95: D4 0B        	pei	<L65+pmsg_1+2
  4829 05:0C97: D4 09        	pei	<L65+pmsg_1
  4830 05:0C99: 22 9D 0D 05  	jsl	~~k_do_processes
  4831                        ;
  4832                        ;
  4833                        ;				/*
  4834                        ;				if(pmsg->hwnd)
  4835                        ;				{
  4836                        ;					//k_debug_pointe
                    r("k_do_processes:DoWndProcs:k_getWindowList:",k_getWindowLi
                    st());
  4837                        ;					k_nodelist_forea
                    ch_data(k_getWindowList(),pmsg,DoWndProcs);
  4838                        ;				}
  4839                        ;				*/
  4840                        ;
  4841                        ;				//
  4842                        ;				k_destory_msg(pmsg);
  4843                        	.line	993
  Mon Sep 27 2021  9:39                                                Page 96


  4844 05:0C9D: D4 0B        	pei	<L65+pmsg_1+2
  4845 05:0C9F: D4 09        	pei	<L65+pmsg_1
  4846 05:0CA1: 22 67 24 05  	jsl	~~k_destory_msg
  4847                        ;
  4848                        ;				//asm sei;
  4849                        ;				pmsg = (PFXOSMESSAGE)k_d
                    equeue(_k_eventQueue);
  4850                        	.line	996
  4851 05:0CA5: AD xx xx     	lda	|~~_k_eventQueue+2
  4852 05:0CA8: 48           	pha
  4853 05:0CA9: AD xx xx     	lda	|~~_k_eventQueue
  4854 05:0CAC: 48           	pha
  4855 05:0CAD: 22 xx xx xx  	jsl	~~k_dequeue
  4856 05:0CB1: 85 09        	sta	<L65+pmsg_1
  4857 05:0CB3: 86 0B        	stx	<L65+pmsg_1+2
  4858                        ;				//asm cli;
  4859                        ;			}
  4860                        	.line	998
  4861 05:0CB5: 82 F7 F9     	brl	L10035
  4862                        L10036:
  4863                        ;			//
  4864                        ;			//
  4865                        ;			//k_do_procs(processMessage);
  4866                        ;			k_do_processes(processMessage);
  4867                        	.line	1002
  4868 05:0CB8: D4 0F        	pei	<L65+processMessage_1+2
  4869 05:0CBA: D4 0D        	pei	<L65+processMessage_1
  4870 05:0CBC: 22 9D 0D 05  	jsl	~~k_do_processes
  4871                        ;
  4872                        ;			/*
  4873                        ;			volAvail = k_sd_read_vol(&diskIn
                    fo);
  4874                        ;			if(volAvail)
  4875                        ;			{
  4876                        ;				k_send_message(NULL,FX_D
                    ISK_INSERT,&diskInfo,sizeof(DISKINFO));
  4877                        ;			}
  4878                        ;			else
  4879                        ;			{
  4880                        ;				k_send_message(NULL,FX_D
                    ISK_REMOVE,NULL,0);
  4881                        ;			}
  4882                        ;		*/
  4883                        ;
  4884                        ;			asm cli;
  4885                        	.line	1016
  4886                        	asmstart
  4887 05:0CC0: 58           	cli
  4888                        	asmend
  4889                        ;
  4890                        ;
  4891                        ;
  4892                        ;
  4893                        ;
  4894                        ;			/*
  4895                        ;			if(!floppy)
  4896                        ;			{
  4897                        ;				//floppy_init();
  Mon Sep 27 2021  9:39                                                Page 97


  4898                        ;				//flpydsk_install(6);
  4899                        ;				//flpydsk_read_sector(1)
                    ;
  4900                        ;				floppy = TRUE;
  4901                        ;			}
  4902                        ;			*/
  4903                        ;
  4904                        ;			/*
  4905                        ;			if(floppy)
  4906                        ;				floppy_read(floppybuffer
                    , floppyLBA++, 3);
  4907                        ;				*/
  4908                        ;		}
  4909                        	.line	1036
  4910 05:0CC1: 82 DA F9     	brl	L10033
  4911                        ;
  4912                        ;		if(processMessage)
  4913                        	.line	1038
  4914                        ;			k_mem_deallocate_heap(processMes
                    sage);
  4915 05:0CC4: A5 0D        	lda	<L65+processMessage_1
  4916 05:0CC6: 05 0F        	ora	<L65+processMessage_1+2
  4917 05:0CC8: D0 03        	bne	L122
  4918 05:0CCA: 82 08 00     	brl	L10068
  4919                        L122:
  4920                        	.line	1039
  4921 05:0CCD: D4 0F        	pei	<L65+processMessage_1+2
  4922 05:0CCF: D4 0D        	pei	<L65+processMessage_1
  4923 05:0CD1: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  4924                        ;	}
  4925                        L10068:
  4926                        	.line	1040
  4927                        ;	else
  4928 05:0CD5: 82 0C 00     	brl	L10069
  4929                        L10030:
  4930                        ;	{
  4931                        	.line	1042
  4932                        ;		k_debug_string("Exception:fxeventmanager
                     not initialized");
  4933                        	.line	1043
  4934 05:0CD8: F4 xx xx     	pea	#^L63+668
  4935 05:0CDB: F4 xx xx     	pea	#<L63+668
  4936 05:0CDE: 22 xx xx xx  	jsl	~~k_debug_string
  4937                        ;		THROW_EXCEPTION(0xA000,0x0001,"");
  4938                        	.line	1044
  4939                        	.line	1044
  4940                        	asmstart
  4941 05:0CE2: 00 00        	BRK
  4942                        	asmend
  4943                        	.line	1044
  4944                        	.line	1044
  4945                        ;	}
  4946                        	.line	1045
  4947                        L10069:
  4948                        ;
  4949                        ;
  4950                        ;}
  4951                        	.line	1048
  Mon Sep 27 2021  9:39                                                Page 98


  4952                        L123:
  4953 05:0CE4: 2B           	pld
  4954 05:0CE5: 3B           	tsc
  4955 05:0CE6: 18           	clc
  4956 05:0CE7: 69 48 00     	adc	#L64
  4957 05:0CEA: 1B           	tcs
  4958 05:0CEB: 6B           	rtl
  4959                        	.endblock	1048
  4960             00000048   L64	equ	72
  4961             00000009   L65	equ	9
  4962 05:0CEC:              	ends
  4963                        	efunc
  4964                        	.endfunc	1048,9,72
  4965                        	.line	1048
  4966                        	data
  4967                        L63:
  4968 00:02A8: 6B 5F 69 6E  	db	$6B,$5F,$69,$6E,$69,$74,$61,$6C,$69,$7A,
                    $65,$5F,$65,$78,$65
       00:02AC: 69 74 61 6C 
       00:02B0: 69 7A 65 5F 
       00:02B4: 65 78 65 
  4969 00:02B7: 63 75 74 69  	db	$63,$75,$74,$69,$76,$65,$0D,$0A,$00,$6B,
                    $5F,$69,$6E,$69,$74
       00:02BB: 76 65 0D 0A 
       00:02BF: 00 6B 5F 69 
       00:02C3: 6E 69 74 
  4970 00:02C6: 61 6C 69 7A  	db	$61,$6C,$69,$7A,$65,$5F,$65,$76,$65,$6E,
                    $74,$5F,$6D,$61,$6E
       00:02CA: 65 5F 65 76 
       00:02CE: 65 6E 74 5F 
       00:02D2: 6D 61 6E 
  4971 00:02D5: 61 67 65 72  	db	$61,$67,$65,$72,$0D,$0A,$00,$6B,$5F,$69,
                    $6E,$69,$74,$61,$6C
       00:02D9: 0D 0A 00 6B 
       00:02DD: 5F 69 6E 69 
       00:02E1: 74 61 6C 
  4972 00:02E4: 69 7A 65 5F  	db	$69,$7A,$65,$5F,$77,$69,$6E,$64,$6F,$77,
                    $5F,$6D,$61,$6E,$61
       00:02E8: 77 69 6E 64 
       00:02EC: 6F 77 5F 6D 
       00:02F0: 61 6E 61 
  4973 00:02F3: 67 65 72 20  	db	$67,$65,$72,$20,$62,$65,$66,$6F,$72,$65,
                    $0D,$0A,$00,$57,$69
       00:02F7: 62 65 66 6F 
       00:02FB: 72 65 0D 0A 
       00:02FF: 00 57 69 
  4974 00:0302: 6E 64 6F 77  	db	$6E,$64,$6F,$77,$20,$4D,$61,$6E,$61,$67,
                    $65,$72,$20,$46,$61
       00:0306: 20 4D 61 6E 
       00:030A: 61 67 65 72 
       00:030E: 20 46 61 
  4975 00:0311: 69 6C 65 64  	db	$69,$6C,$65,$64,$20,$74,$6F,$20,$49,$6E,
                    $69,$74,$69,$61,$6C
       00:0315: 20 74 6F 20 
       00:0319: 49 6E 69 74 
       00:031D: 69 61 6C 
  4976 00:0320: 69 7A 65 2E  	db	$69,$7A,$65,$2E,$00,$6B,$5F,$69,$6E,$69,
                    $74,$61,$6C,$69,$7A
  Mon Sep 27 2021  9:39                                                Page 99


       00:0324: 00 6B 5F 69 
       00:0328: 6E 69 74 61 
       00:032C: 6C 69 7A 
  4977 00:032F: 65 5F 77 69  	db	$65,$5F,$77,$69,$6E,$64,$6F,$77,$5F,$6D,
                    $61,$6E,$61,$67,$65
       00:0333: 6E 64 6F 77 
       00:0337: 5F 6D 61 6E 
       00:033B: 61 67 65 
  4978 00:033E: 72 20 76 65  	db	$72,$20,$76,$65,$72,$73,$69,$6F,$6E,$3A,
                    $00,$0D,$0A,$00,$40
       00:0342: 72 73 69 6F 
       00:0346: 6E 3A 00 0D 
       00:034A: 0A 00 40 
  4979 00:034D: 2F 63 6F 6E  	db	$2F,$63,$6F,$6E,$73,$6F,$6C,$65,$00,$40,
                    $2F,$69,$64,$6C,$65
       00:0351: 73 6F 6C 65 
       00:0355: 00 40 2F 69 
       00:0359: 64 6C 65 
  4980 00:035C: 00 6B 5F 65  	db	$00,$6B,$5F,$65,$76,$65,$6E,$74,$5F,$6C,
                    $6F,$6F,$70,$20,$52
       00:0360: 76 65 6E 74 
       00:0364: 5F 6C 6F 6F 
       00:0368: 70 20 52 
  4981 00:036B: 45 43 45 49  	db	$45,$43,$45,$49,$56,$45,$44,$3A,$46,$58,
                    $5F,$46,$4F,$43,$55
       00:036F: 56 45 44 3A 
       00:0373: 46 58 5F 46 
       00:0377: 4F 43 55 
  4982 00:037A: 53 5F 57 49  	db	$53,$5F,$57,$49,$4E,$44,$4F,$57,$0D,$0A,
                    $00,$2A,$2A,$2A,$20
       00:037E: 4E 44 4F 57 
       00:0382: 0D 0A 00 2A 
       00:0386: 2A 2A 20 
  4983 00:0389: 6B 5F 65 76  	db	$6B,$5F,$65,$76,$65,$6E,$74,$5F,$6C,$6F,
                    $6F,$70,$3A,$3A,$46
       00:038D: 65 6E 74 5F 
       00:0391: 6C 6F 6F 70 
       00:0395: 3A 3A 46 
  4984 00:0398: 58 5F 46 4F  	db	$58,$5F,$46,$4F,$43,$55,$53,$5F,$4C,$4F,
                    $53,$54,$3A,$00,$6B
       00:039C: 43 55 53 5F 
       00:03A0: 4C 4F 53 54 
       00:03A4: 3A 00 6B 
  4985 00:03A7: 5F 65 76 65  	db	$5F,$65,$76,$65,$6E,$74,$5F,$6C,$6F,$6F,
                    $70,$20,$52,$45,$43
       00:03AB: 6E 74 5F 6C 
       00:03AF: 6F 6F 70 20 
       00:03B3: 52 45 43 
  4986 00:03B6: 45 49 56 45  	db	$45,$49,$56,$45,$44,$3A,$46,$58,$5F,$46,
                    $4F,$43,$55,$53,$5F
       00:03BA: 44 3A 46 58 
       00:03BE: 5F 46 4F 43 
       00:03C2: 55 53 5F 
  4987 00:03C5: 57 49 4E 44  	db	$57,$49,$4E,$44,$4F,$57,$3A,$6B,$5F,$65,
                    $6E,$71,$75,$65,$75
       00:03C9: 4F 57 3A 6B 
       00:03CD: 5F 65 6E 71 
       00:03D1: 75 65 75 
  Mon Sep 27 2021  9:39                                                Page 100


  4988 00:03D4: 65 3A 00 6B  	db	$65,$3A,$00,$6B,$5F,$65,$76,$65,$6E,$74,
                    $5F,$6C,$6F,$6F,$70
       00:03D8: 5F 65 76 65 
       00:03DC: 6E 74 5F 6C 
       00:03E0: 6F 6F 70 
  4989 00:03E3: 20 65 76 65  	db	$20,$65,$76,$65,$6E,$74,$3A,$3A,$46,$58,
                    $5F,$4D,$45,$4E,$55
       00:03E7: 6E 74 3A 3A 
       00:03EB: 46 58 5F 4D 
       00:03EF: 45 4E 55 
  4990 00:03F2: 5F 43 4F 4D  	db	$5F,$43,$4F,$4D,$4D,$41,$4E,$44,$3A,$00,
                    $6B,$5F,$65,$76,$65
       00:03F6: 4D 41 4E 44 
       00:03FA: 3A 00 6B 5F 
       00:03FE: 65 76 65 
  4991 00:0401: 6E 74 5F 6C  	db	$6E,$74,$5F,$6C,$6F,$6F,$70,$20,$64,$61,
                    $74,$61,$3A,$46,$58
       00:0405: 6F 6F 70 20 
       00:0409: 64 61 74 61 
       00:040D: 3A 46 58 
  4992 00:0410: 5F 50 52 4F  	db	$5F,$50,$52,$4F,$43,$45,$53,$53,$5F,$46,
                    $4C,$4F,$50,$50,$59
       00:0414: 43 45 53 53 
       00:0418: 5F 46 4C 4F 
       00:041C: 50 50 59 
  4993 00:041F: 0D 0A 00 6B  	db	$0D,$0A,$00,$6B,$5F,$65,$76,$65,$6E,$74,
                    $5F,$6C,$6F,$6F,$70
       00:0423: 5F 65 76 65 
       00:0427: 6E 74 5F 6C 
       00:042B: 6F 6F 70 
  4994 00:042E: 20 64 61 74  	db	$20,$64,$61,$74,$61,$3A,$46,$58,$5F,$50,
                    $52,$4F,$43,$45,$53
       00:0432: 61 3A 46 58 
       00:0436: 5F 50 52 4F 
       00:043A: 43 45 53 
  4995 00:043D: 53 5F 53 44  	db	$53,$5F,$53,$44,$43,$41,$52,$44,$3A,$54,
                    $59,$50,$45,$3A,$00
       00:0441: 43 41 52 44 
       00:0445: 3A 54 59 50 
       00:0449: 45 3A 00 
  4996 00:044C: 46 58 5F 4C  	db	$46,$58,$5F,$4C,$4F,$53,$54,$5F,$46,$4F,
                    $43,$55,$53,$3A,$00
       00:0450: 4F 53 54 5F 
       00:0454: 46 4F 43 55 
       00:0458: 53 3A 00 
  4997 00:045B: 48 41 53 20  	db	$48,$41,$53,$20,$46,$4F,$43,$55,$53,$3A,
                    $00,$2A,$2A,$2A,$20
       00:045F: 46 4F 43 55 
       00:0463: 53 3A 00 2A 
       00:0467: 2A 2A 20 
  4998 00:046A: 6B 5F 65 76  	db	$6B,$5F,$65,$76,$65,$6E,$74,$5F,$6C,$6F,
                    $6F,$70,$3A,$3A,$46
       00:046E: 65 6E 74 5F 
       00:0472: 6C 6F 6F 70 
       00:0476: 3A 3A 46 
  4999 00:0479: 58 5F 46 4F  	db	$58,$5F,$46,$4F,$43,$55,$53,$5F,$57,$49,
                    $4E,$44,$4F,$57,$3A
       00:047D: 43 55 53 5F 
  Mon Sep 27 2021  9:39                                                Page 101


       00:0481: 57 49 4E 44 
       00:0485: 4F 57 3A 
  5000 00:0488: 00 2A 2A 2A  	db	$00,$2A,$2A,$2A,$20,$6B,$5F,$65,$76,$65,
                    $6E,$74,$5F,$6C,$6F
       00:048C: 20 6B 5F 65 
       00:0490: 76 65 6E 74 
       00:0494: 5F 6C 6F 
  5001 00:0497: 6F 70 3A 3A  	db	$6F,$70,$3A,$3A,$46,$58,$5F,$46,$4F,$43,
                    $55,$53,$5F,$4C,$4F
       00:049B: 46 58 5F 46 
       00:049F: 4F 43 55 53 
       00:04A3: 5F 4C 4F 
  5002 00:04A6: 53 54 3A 00  	db	$53,$54,$3A,$00,$6B,$5F,$65,$76,$65,$6E,
                    $74,$5F,$6C,$6F,$6F
       00:04AA: 6B 5F 65 76 
       00:04AE: 65 6E 74 5F 
       00:04B2: 6C 6F 6F 
  5003 00:04B5: 70 20 52 45  	db	$70,$20,$52,$45,$43,$45,$49,$56,$45,$44,
                    $3A,$46,$58,$5F,$46
       00:04B9: 43 45 49 56 
       00:04BD: 45 44 3A 46 
       00:04C1: 58 5F 46 
  5004 00:04C4: 4F 43 55 53  	db	$4F,$43,$55,$53,$5F,$4C,$4F,$53,$54,$3A,
                    $6B,$5F,$65,$6E,$71
       00:04C8: 5F 4C 4F 53 
       00:04CC: 54 3A 6B 5F 
       00:04D0: 65 6E 71 
  5005 00:04D3: 75 65 75 65  	db	$75,$65,$75,$65,$3A,$00,$6B,$5F,$65,$76,
                    $65,$6E,$74,$5F,$6C
       00:04D7: 3A 00 6B 5F 
       00:04DB: 65 76 65 6E 
       00:04DF: 74 5F 6C 
  5006 00:04E2: 6F 6F 70 20  	db	$6F,$6F,$70,$20,$52,$45,$43,$45,$49,$56,
                    $45,$44,$3A,$46,$58
       00:04E6: 52 45 43 45 
       00:04EA: 49 56 45 44 
       00:04EE: 3A 46 58 
  5007 00:04F1: 5F 46 4F 43  	db	$5F,$46,$4F,$43,$55,$53,$5F,$57,$49,$4E,
                    $44,$4F,$57,$3A,$6B
       00:04F5: 55 53 5F 57 
       00:04F9: 49 4E 44 4F 
       00:04FD: 57 3A 6B 
  5008 00:0500: 5F 65 6E 71  	db	$5F,$65,$6E,$71,$75,$65,$75,$65,$3A,$00,
                    $2A,$2A,$2A,$20,$6B
       00:0504: 75 65 75 65 
       00:0508: 3A 00 2A 2A 
       00:050C: 2A 20 6B 
  5009 00:050F: 5F 65 76 65  	db	$5F,$65,$76,$65,$6E,$74,$5F,$6C,$6F,$6F,
                    $70,$3A,$3A,$46,$58
       00:0513: 6E 74 5F 6C 
       00:0517: 6F 6F 70 3A 
       00:051B: 3A 46 58 
  5010 00:051E: 5F 4B 45 59  	db	$5F,$4B,$45,$59,$5F,$2A,$0D,$0A,$00,$2A,
                    $2A,$2A,$20,$6B,$5F
       00:0522: 5F 2A 0D 0A 
       00:0526: 00 2A 2A 2A 
       00:052A: 20 6B 5F 
  5011 00:052D: 65 76 65 6E  	db	$65,$76,$65,$6E,$74,$5F,$6C,$6F,$6F,$70,
  Mon Sep 27 2021  9:39                                                Page 102


                    $3A,$3A,$46,$58,$5F
       00:0531: 74 5F 6C 6F 
       00:0535: 6F 70 3A 3A 
       00:0539: 46 58 5F 
  5012 00:053C: 4B 45 59 5F  	db	$4B,$45,$59,$5F,$2A,$0D,$0A,$00,$45,$78,
                    $63,$65,$70,$74,$69
       00:0540: 2A 0D 0A 00 
       00:0544: 45 78 63 65 
       00:0548: 70 74 69 
  5013 00:054B: 6F 6E 3A 66  	db	$6F,$6E,$3A,$66,$78,$65,$76,$65,$6E,$74,
                    $6D,$61,$6E,$61,$67
       00:054F: 78 65 76 65 
       00:0553: 6E 74 6D 61 
       00:0557: 6E 61 67 
  5014 00:055A: 65 72 20 6E  	db	$65,$72,$20,$6E,$6F,$74,$20,$69,$6E,$69,
                    $74,$69,$61,$6C,$69
       00:055E: 6F 74 20 69 
       00:0562: 6E 69 74 69 
       00:0566: 61 6C 69 
  5015 00:0569: 7A 65 64 00  	db	$7A,$65,$64,$00
  5016 00:056D:              	ends
  5017                        ;
  5018                        ;void IdleProc(PFXOSMESSAGE pMsg)
  5019                        ;{
  5020                        	.line	1050
  5021                        	.line	1051
  5022                        	EVTMAN
  5023                        	xdef	~~IdleProc
  5024                        	func
  5025                        	.function	1051
  5026                        ~~IdleProc:
  5027                        	longa	on
  5028                        	longi	on
  5029 05:0CEC: 3B           	tsc
  5030 05:0CED: 38           	sec
  5031 05:0CEE: E9 00 00     	sbc	#L125
  5032 05:0CF1: 1B           	tcs
  5033 05:0CF2: 0B           	phd
  5034 05:0CF3: 5B           	tcd
  5035             00000004   pMsg_0	set	4
  5036                        	.block	1051
  5037                        ;	if(pMsg!=NULL)
  5038                        	.sym	pMsg,4,138,6,32,16
  5039                        	.line	1052
  5040                        ;	{
  5041 05:0CF4: A5 04        	lda	<L125+pMsg_0
  5042 05:0CF6: 05 06        	ora	<L125+pMsg_0+2
  5043 05:0CF8: D0 03        	bne	L128
  5044 05:0CFA: 82 2A 00     	brl	L10070
  5045                        L128:
  5046                        	.line	1053
  5047                        ;		_normal_idle_tick--;
  5048                        	.line	1054
  5049 05:0CFD: CE xx xx     	dec	|~~_normal_idle_tick
  5050                        ;		_fast_idle_tick--;
  5051                        	.line	1055
  5052 05:0D00: CE xx xx     	dec	|~~_fast_idle_tick
  5053                        ;
  Mon Sep 27 2021  9:39                                                Page 103


  5054                        ;		//k_debug_integer("IdleProc:",_normal_id
                    le_tick);
  5055                        ;
  5056                        ;		if(_normal_idle_tick == 0)
  5057                        	.line	1059
  5058                        ;		{
  5059 05:0D03: AD xx xx     	lda	|~~_normal_idle_tick
  5060 05:0D06: F0 03        	beq	L129
  5061 05:0D08: 82 0A 00     	brl	L10071
  5062                        L129:
  5063                        	.line	1060
  5064                        ;			//k_heap_integrity_check();
  5065                        ;
  5066                        ;			_normal_idle_tick = IDLE_TIMEOUT
                    ;//0x7FFF;
  5067                        	.line	1063
  5068 05:0D0B: A9 FF 00     	lda	#$ff
  5069 05:0D0E: 8D xx xx     	sta	|~~_normal_idle_tick
  5070                        ;
  5071                        ;			k_process_idle_procs();
  5072                        	.line	1065
  5073 05:0D11: 22 5C 26 05  	jsl	~~k_process_idle_procs
  5074                        ;		}
  5075                        	.line	1066
  5076                        ;
  5077                        ;		if(_fast_idle_tick == 0)
  5078                        L10071:
  5079                        	.line	1068
  5080                        ;		{
  5081 05:0D15: AD xx xx     	lda	|~~_fast_idle_tick
  5082 05:0D18: F0 03        	beq	L130
  5083 05:0D1A: 82 0A 00     	brl	L10072
  5084                        L130:
  5085                        	.line	1069
  5086                        ;			//k_debug_integer("IdleProc:_fas
                    t_idle_tick:",_fast_idle_tick);
  5087                        ;			k_process_hi_idle_procs();
  5088                        	.line	1071
  5089 05:0D1D: 22 92 26 05  	jsl	~~k_process_hi_idle_procs
  5090                        ;			_fast_idle_tick = FASTIDLE_TIMEO
                    UT;
  5091                        	.line	1072
  5092 05:0D21: A9 7F 00     	lda	#$7f
  5093 05:0D24: 8D xx xx     	sta	|~~_fast_idle_tick
  5094                        ;		}
  5095                        	.line	1073
  5096                        ;	}
  5097                        L10072:
  5098                        	.line	1074
  5099                        ;}
  5100                        L10070:
  5101                        	.line	1075
  5102                        L131:
  5103 05:0D27: A5 02        	lda	<L125+2
  5104 05:0D29: 85 06        	sta	<L125+2+4
  5105 05:0D2B: A5 01        	lda	<L125+1
  5106 05:0D2D: 85 05        	sta	<L125+1+4
  5107 05:0D2F: 2B           	pld
  Mon Sep 27 2021  9:39                                                Page 104


  5108 05:0D30: 3B           	tsc
  5109 05:0D31: 18           	clc
  5110 05:0D32: 69 04 00     	adc	#L125+4
  5111 05:0D35: 1B           	tcs
  5112 05:0D36: 6B           	rtl
  5113                        	.endblock	1075
  5114             00000000   L125	equ	0
  5115             00000001   L126	equ	1
  5116 05:0D37:              	ends
  5117                        	efunc
  5118                        	.endfunc	1075,1,0
  5119                        	.line	1075
  5120                        ;
  5121                        ;void k_do_procs(PFXOSMESSAGE pMsg)
  5122                        ;{
  5123                        	.line	1077
  5124                        	.line	1078
  5125                        	EVTMAN
  5126                        	xdef	~~k_do_procs
  5127                        	func
  5128                        	.function	1078
  5129                        ~~k_do_procs:
  5130                        	longa	on
  5131                        	longi	on
  5132 05:0D37: 3B           	tsc
  5133 05:0D38: 38           	sec
  5134 05:0D39: E9 0A 00     	sbc	#L132
  5135 05:0D3C: 1B           	tcs
  5136 05:0D3D: 0B           	phd
  5137 05:0D3E: 5B           	tcd
  5138             00000004   pMsg_0	set	4
  5139                        	.block	1078
  5140                        ;	int index = 0;
  5141                        ;
  5142                        ;	//k_debug_string("k_do_procs:Enter\r\n");
  5143                        ;	for(index = IDLE_PROC;index<MAX_PROCS;index++)
  5144             00000000   index_1	set	0
  5145                        	.sym	index,0,5,1,16
  5146                        	.sym	pMsg,4,138,6,32,16
  5147 05:0D3F: 64 09        	stz	<L133+index_1
  5148                        	.line	1082
  5149 05:0D41: 64 09        	stz	<L133+index_1
  5150                        L10075:
  5151                        ;	{
  5152                        	.line	1083
  5153                        ;		if(eventProcs[index] != NULL)
  5154                        	.line	1084
  5155                        ;		{
  5156 05:0D43: A5 09        	lda	<L133+index_1
  5157 05:0D45: 0A           	asl	A
  5158 05:0D46: 0A           	asl	A
  5159 05:0D47: 85 01        	sta	<R0
  5160 05:0D49: 18           	clc
  5161 05:0D4A: A9 xx xx     	lda	#<~~eventProcs
  5162 05:0D4D: 65 01        	adc	<R0
  5163 05:0D4F: 85 05        	sta	<R1
  5164 05:0D51: B2 05        	lda	(<R1)
  5165 05:0D53: A0 02 00     	ldy	#$2
  Mon Sep 27 2021  9:39                                                Page 105


  5166 05:0D56: 11 05        	ora	(<R1),Y
  5167 05:0D58: D0 03        	bne	L135
  5168 05:0D5A: 82 1E 00     	brl	L10076
  5169                        L135:
  5170                        	.line	1085
  5171                        ;			//if(index > IDLE_PROC)
  5172                        ;			//	k_debug_string("Calling 
                    bad proc index.\r\n");
  5173                        ;
  5174                        ;			eventProcs[index](pMsg);
  5175                        	.line	1089
  5176 05:0D5D: D4 10        	pei	<L132+pMsg_0+2
  5177 05:0D5F: D4 0E        	pei	<L132+pMsg_0
  5178 05:0D61: A5 09        	lda	<L133+index_1
  5179 05:0D63: 0A           	asl	A
  5180 05:0D64: 0A           	asl	A
  5181 05:0D65: 85 01        	sta	<R0
  5182 05:0D67: 18           	clc
  5183 05:0D68: A9 xx xx     	lda	#<~~eventProcs
  5184 05:0D6B: 65 01        	adc	<R0
  5185 05:0D6D: 85 05        	sta	<R1
  5186 05:0D6F: A0 02 00     	ldy	#$2
  5187 05:0D72: B1 05        	lda	(<R1),Y
  5188 05:0D74: AA           	tax
  5189 05:0D75: B2 05        	lda	(<R1)
  5190                        	xref	~~~lcal
  5191 05:0D77: 22 xx xx xx  	jsl	~~~lcal
  5192                        ;		}
  5193                        	.line	1090
  5194                        ;	}
  5195                        L10076:
  5196                        	.line	1091
  5197                        L10073:
  5198 05:0D7B: E6 09        	inc	<L133+index_1
  5199 05:0D7D: 38           	sec
  5200 05:0D7E: A5 09        	lda	<L133+index_1
  5201 05:0D80: E9 00 01     	sbc	#<$100
  5202 05:0D83: 70 03        	bvs	L136
  5203 05:0D85: 49 00 80     	eor	#$8000
  5204                        L136:
  5205 05:0D88: 30 03        	bmi	L137
  5206 05:0D8A: 82 B6 FF     	brl	L10075
  5207                        L137:
  5208                        L10074:
  5209                        ;}
  5210                        	.line	1092
  5211                        L138:
  5212 05:0D8D: A5 0C        	lda	<L132+2
  5213 05:0D8F: 85 10        	sta	<L132+2+4
  5214 05:0D91: A5 0B        	lda	<L132+1
  5215 05:0D93: 85 0F        	sta	<L132+1+4
  5216 05:0D95: 2B           	pld
  5217 05:0D96: 3B           	tsc
  5218 05:0D97: 18           	clc
  5219 05:0D98: 69 0E 00     	adc	#L132+4
  5220 05:0D9B: 1B           	tcs
  5221 05:0D9C: 6B           	rtl
  5222                        	.endblock	1092
  Mon Sep 27 2021  9:39                                                Page 106


  5223             0000000A   L132	equ	10
  5224             00000009   L133	equ	9
  5225 05:0D9D:              	ends
  5226                        	efunc
  5227                        	.endfunc	1092,9,10
  5228                        	.line	1092
  5229                        ;/*
  5230                        ;static void DoWndProcs(LPVOID ctx,LPVOID data)
  5231                        ;{
  5232                        ;	PFXOSMESSAGE pMsg  = (PFXOSMESSAGE)ctx;
  5233                        ;	PWINDOW 	 pWin  = (PWINDOW)data;
  5234                        ;	PFXPROCESS   pProc = k_exec_get_current_process(
                    );
  5235                        ;
  5236                        ;
  5237                        ;	if(pMsg && pWin && !pWin->isClosed && pWin->pWnd
                    Class && pWin->pWndClass->pWndProc)
  5238                        ;	{
  5239                        ;		//k_debug_integer("DoWndProcs:type:",pMs
                    g->type);
  5240                        ;
  5241                        ;		//k_debug_pointer("DoWndProcs:HWND:check
                    :",((LPVOID)pMsg->hwnd));
  5242                        ;		//k_debug_pointer("DoWndProcs:pWin:check
                    :",(LPVOID)pWin);
  5243                        ;		if((pWin->procid == pProc->procId) || ((
                    (LPVOID)pMsg->hwnd) == BROADCAST_HWND)) // change
  5244                        ;		{
  5245                        ;			if(pMsg->hwnd && !pWin->isClosed
                      && ( ((LPVOID)pMsg->hwnd) == (LPVOID)pWin || ((LPVOID)pMsg
                    ->hwnd) == BROADCAST_HWND)   )
  5246                        ;			{
  5247                        ;				//k_debug_pointer("DoWnd
                    Procs:CALLING:pMsg:",pMsg);
  5248                        ;				//k_debug_strings("DoWnd
                    Procs:CALLING:WindowTitle:",pWin->win_title);
  5249                        ;				if(((LPVOID)pMsg->hwnd) 
                    == BROADCAST_HWND)
  5250                        ;				{
  5251                        ;					//k_debug_string
                    s("DoWndProcs::win_class_name1:", pWin->win_class_name);
  5252                        ;
  5253                        ;					if(pMsg->type ==
                     FX_DRAW_NONCLIENT || pMsg->type == FX_DRAW_CLIENT)
  5254                        ;					{
  5255                        ;						k_debug_
                    nodelist_with_data( k_getWindowList(), debug_window_node );
  5256                        ;
  5257                        ;
  5258                        ;						k_debug_
                    strings("DoWndProcs::win_class_name2:", pWin->win_class_name
                    );
  5259                        ;						if( strc
                    mp(pWin->win_class_name,"desktopWindowClass") ==0 ||
  5260                        ;							
                    strcmp(pWin->win_class_name,"menuWindowClass") ==0 ||
  5261                        ;							
                    strcmp(pWin->win_class_name,"menuAnchorWindowClass") ==0 ||
  Mon Sep 27 2021  9:39                                                Page 107


  5262                        ;							
                    strcmp(pWin->win_class_name,"menuDropDownWindowClass") ==0)
  5263                        ;						{
  5264                        ;							
                    return;
  5265                        ;						}
  5266                        ;					}
  5267                        ;					//k_debug_pointe
                    r("DoWndProcs::BROADCAST_HWND:", pMsg->hwnd);
  5268                        ;					pMsg->hwnd = (HW
                    ND)pWin;
  5269                        ;					//k_debug_pointe
                    r("DoWndProcs::REAL HWND:", pMsg->hwnd);
  5270                        ;					//k_debug_string
                    s("DoWndProcs::REAL NAME:", pWin->win_title);
  5271                        ;				}
  5272                        ;
  5273                        ;				if(FX_MENU_COMMAND == pM
                    sg->type)
  5274                        ;				{
  5275                        ;					k_debug_pointer(
                    "DoWndProcs::FX_MENU_COMMAND:", pMsg->hwnd);
  5276                        ;					k_debug_pointer(
                    "DoWndProcs::FX_MENU_COMMAND:pWndProc:", pWin->pWndClass->pW
                    ndProc);
  5277                        ;				}
  5278                        ;
  5279                        ;				if(!pWin->pWndClass->pWn
                    dProc(pMsg))
  5280                        ;				{
  5281                        ;					k_debug_strings(
                    "DoWndProcs:HWND:Closed:",pWin->win_title);
  5282                        ;					k_debug_integer(
                    "DoWndProcs:HWND:Closed:pMsg:",pMsg->type);
  5283                        ;
  5284                        ;					if(k_user_get_lo
                    cked_focus() == pMsg->hwnd)
  5285                        ;						k_user_u
                    nlock_focus();
  5286                        ;
  5287                        ;					pWin->isClosed =
                     TRUE;
  5288                        ;					strcpy(pWin->win
                    _title,"##CLOSED");
  5289                        ;
  5290                        ;
  5291                        ;					k_nodelist_remov
                    e_obj(k_user_get_object_list(0)->listhead->next,(ULONG)pWin)
                    ;
  5292                        ;
  5293                        ;				}
  5294                        ;			}
  5295                        ;		}
  5296                        ;		else
  5297                        ;		{
  5298                        ;			//k_debug_long("DoWndProcs:WRONG
                     PROCESS:",(ULONG)pProc->procId);
  5299                        ;		}
  Mon Sep 27 2021  9:39                                                Page 108


  5300                        ;	}
  5301                        ;
  5302                        ;	return;
  5303                        ;}
  5304                        ;*/
  5305                        ;void k_do_processes(PFXOSMESSAGE pMsg)
  5306                        ;{
  5307                        	.line	1169
  5308                        	.line	1170
  5309                        	EVTMAN
  5310                        	xdef	~~k_do_processes
  5311                        	func
  5312                        	.function	1170
  5313                        ~~k_do_processes:
  5314                        	longa	on
  5315                        	longi	on
  5316 05:0D9D: 3B           	tsc
  5317 05:0D9E: 38           	sec
  5318 05:0D9F: E9 21 00     	sbc	#L139
  5319 05:0DA2: 1B           	tcs
  5320 05:0DA3: 0B           	phd
  5321 05:0DA4: 5B           	tcd
  5322             00000004   pMsg_0	set	4
  5323                        	.block	1170
  5324                        ;	int index = 0;
  5325                        ;	int tc = 0;
  5326                        ;	BOOL isForeground = FALSE;
  5327                        ;	PFXPROCESS pCurrent = NULL;
  5328                        ;
  5329                        ;	if(pMsg->src == FX_MSGSRC_DRIVER )
  5330             00000000   index_1	set	0
  5331             00000002   tc_1	set	2
  5332             00000004   isForeground_1	set	4
  5333             00000005   pCurrent_1	set	5
  5334                        	.sym	index,0,5,1,16
  5335                        	.sym	tc,2,5,1,16
  5336                        	.sym	isForeground,4,14,1,8
  5337                        	.sym	pCurrent,5,138,1,32,20
  5338                        	.sym	pMsg,4,138,6,32,16
  5339 05:0DA5: 64 19        	stz	<L140+index_1
  5340 05:0DA7: 64 1B        	stz	<L140+tc_1
  5341 05:0DA9: E2 20        	sep	#$20
  5342                        	longa	off
  5343 05:0DAB: 64 1D        	stz	<L140+isForeground_1
  5344 05:0DAD: C2 20        	rep	#$20
  5345                        	longa	on
  5346 05:0DAF: 64 1E        	stz	<L140+pCurrent_1
  5347 05:0DB1: 64 20        	stz	<L140+pCurrent_1+2
  5348                        	.line	1176
  5349                        ;	{
  5350 05:0DB3: A7 25        	lda	[<L139+pMsg_0]
  5351 05:0DB5: C9 FE FF     	cmp	#<$fffffffe
  5352 05:0DB8: D0 08        	bne	L142
  5353 05:0DBA: A0 02 00     	ldy	#$2
  5354 05:0DBD: B7 25        	lda	[<L139+pMsg_0],Y
  5355 05:0DBF: C9 FF FF     	cmp	#^$fffffffe
  5356                        L142:
  5357 05:0DC2: F0 03        	beq	L143
  Mon Sep 27 2021  9:39                                                Page 109


  5358 05:0DC4: 82 2D 00     	brl	L10077
  5359                        L143:
  5360                        	.line	1177
  5361                        ;		if(pMsg->type == FX_PROCESS_SDCARD && pM
                    sg->data[0] == 1)
  5362                        	.line	1178
  5363                        ;		{
  5364 05:0DC7: A0 08 00     	ldy	#$8
  5365 05:0DCA: B7 25        	lda	[<L139+pMsg_0],Y
  5366 05:0DCC: C9 F3 FF     	cmp	#<$fff3
  5367 05:0DCF: F0 03        	beq	L144
  5368 05:0DD1: 82 20 00     	brl	L10078
  5369                        L144:
  5370 05:0DD4: E2 20        	sep	#$20
  5371                        	longa	off
  5372 05:0DD6: A0 16 00     	ldy	#$16
  5373 05:0DD9: B7 25        	lda	[<L139+pMsg_0],Y
  5374 05:0DDB: C9 01        	cmp	#<$1
  5375 05:0DDD: C2 20        	rep	#$20
  5376                        	longa	on
  5377 05:0DDF: F0 03        	beq	L145
  5378 05:0DE1: 82 10 00     	brl	L10078
  5379                        L145:
  5380                        	.line	1179
  5381                        ;			k_debug_integer("k_do_processes:
                    FX_PROCESS_SDCARD:",pMsg->type);
  5382                        	.line	1180
  5383 05:0DE4: A0 08 00     	ldy	#$8
  5384 05:0DE7: B7 25        	lda	[<L139+pMsg_0],Y
  5385 05:0DE9: 48           	pha
  5386 05:0DEA: F4 xx xx     	pea	#^L124
  5387 05:0DED: F4 xx xx     	pea	#<L124
  5388 05:0DF0: 22 xx xx xx  	jsl	~~k_debug_integer
  5389                        ;		}
  5390                        	.line	1181
  5391                        ;	}
  5392                        L10078:
  5393                        	.line	1182
  5394                        ;
  5395                        ;	for(index = IDLE_PROC;index<MAX_PROCS;index++)
  5396                        L10077:
  5397                        	.line	1184
  5398 05:0DF4: 64 19        	stz	<L140+index_1
  5399                        L10081:
  5400                        ;	{
  5401                        	.line	1185
  5402                        ;		if(eventProcess[index] != NULL)
  5403                        	.line	1186
  5404                        ;		{
  5405 05:0DF6: A5 19        	lda	<L140+index_1
  5406 05:0DF8: 0A           	asl	A
  5407 05:0DF9: 0A           	asl	A
  5408 05:0DFA: 85 01        	sta	<R0
  5409 05:0DFC: 18           	clc
  5410 05:0DFD: A9 xx xx     	lda	#<~~eventProcess
  5411 05:0E00: 65 01        	adc	<R0
  5412 05:0E02: 85 05        	sta	<R1
  5413 05:0E04: B2 05        	lda	(<R1)
  Mon Sep 27 2021  9:39                                                Page 110


  5414 05:0E06: A0 02 00     	ldy	#$2
  5415 05:0E09: 11 05        	ora	(<R1),Y
  5416 05:0E0B: D0 03        	bne	L146
  5417 05:0E0D: 82 E7 05     	brl	L10082
  5418                        L146:
  5419                        	.line	1187
  5420                        ;			isForeground = eventProcess[inde
                    x]->process->foregroundActive;
  5421                        	.line	1188
  5422 05:0E10: A5 19        	lda	<L140+index_1
  5423 05:0E12: 0A           	asl	A
  5424 05:0E13: 0A           	asl	A
  5425 05:0E14: 85 01        	sta	<R0
  5426 05:0E16: 18           	clc
  5427 05:0E17: A9 xx xx     	lda	#<~~eventProcess
  5428 05:0E1A: 65 01        	adc	<R0
  5429 05:0E1C: 85 05        	sta	<R1
  5430 05:0E1E: B2 05        	lda	(<R1)
  5431 05:0E20: 85 01        	sta	<R0
  5432 05:0E22: A0 02 00     	ldy	#$2
  5433 05:0E25: B1 05        	lda	(<R1),Y
  5434 05:0E27: 85 03        	sta	<R0+2
  5435 05:0E29: A7 01        	lda	[<R0]
  5436 05:0E2B: 85 05        	sta	<R1
  5437 05:0E2D: A0 02 00     	ldy	#$2
  5438 05:0E30: B7 01        	lda	[<R0],Y
  5439 05:0E32: 85 07        	sta	<R1+2
  5440 05:0E34: E2 20        	sep	#$20
  5441                        	longa	off
  5442 05:0E36: A0 12 00     	ldy	#$12
  5443 05:0E39: B7 05        	lda	[<R1],Y
  5444 05:0E3B: 85 1D        	sta	<L140+isForeground_1
  5445 05:0E3D: C2 20        	rep	#$20
  5446                        	longa	on
  5447                        ;
  5448                        ;			//if(index == IDLE_PROC)
  5449                        ;			//	k_debug_hex("IDLE_PROC i
                    ndex:",pMsg->type);
  5450                        ;
  5451                        ;
  5452                        ;			/*
  5453                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_TERMINATED)
  5454                        ;			{
  5455                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TERMINATING:",eventProcess[index]->process->pr
                    ocId);
  5456                        ;				k_unattach_events(eventP
                    rocess[index]->eventProc,NULL);
  5457                        ;				eventProcess[index] = NU
                    LL;
  5458                        ;				continue;
  5459                        ;			}
  5460                        ;			*/
  5461                        ;
  5462                        ;			/*
  5463                        ;			if(eventProcess[index]->process-
                    >status == FX_PROCESS_EXCEPTION)
  Mon Sep 27 2021  9:39                                                Page 111


  5464                        ;			{
  5465                        ;				k_debug_long("k_do_proce
                    sses::PFX_PROCESS_EXCEPTION:",eventProcess[index]->process->
                    procId);
  5466                        ;			}
  5467                        ;			*/
  5468                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_WAITING)
  5469                        	.line	1210
  5470                        ;			{
  5471 05:0E3F: A5 19        	lda	<L140+index_1
  5472 05:0E41: 0A           	asl	A
  5473 05:0E42: 0A           	asl	A
  5474 05:0E43: 85 01        	sta	<R0
  5475 05:0E45: 18           	clc
  5476 05:0E46: A9 xx xx     	lda	#<~~eventProcess
  5477 05:0E49: 65 01        	adc	<R0
  5478 05:0E4B: 85 05        	sta	<R1
  5479 05:0E4D: B2 05        	lda	(<R1)
  5480 05:0E4F: 85 01        	sta	<R0
  5481 05:0E51: A0 02 00     	ldy	#$2
  5482 05:0E54: B1 05        	lda	(<R1),Y
  5483 05:0E56: 85 03        	sta	<R0+2
  5484 05:0E58: A7 01        	lda	[<R0]
  5485 05:0E5A: 85 05        	sta	<R1
  5486 05:0E5C: A0 02 00     	ldy	#$2
  5487 05:0E5F: B7 01        	lda	[<R0],Y
  5488 05:0E61: 85 07        	sta	<R1+2
  5489 05:0E63: A0 10 00     	ldy	#$10
  5490 05:0E66: B7 05        	lda	[<R1],Y
  5491 05:0E68: C9 F1 00     	cmp	#<$f1
  5492 05:0E6B: F0 03        	beq	L147
  5493 05:0E6D: 82 3D 00     	brl	L10083
  5494                        L147:
  5495                        	.line	1211
  5496                        ;				k_debug_long("k_do_proce
                    sses::PROCESS WAITING:",eventProcess[index]->process->procId
                    );
  5497                        	.line	1212
  5498 05:0E70: A5 19        	lda	<L140+index_1
  5499 05:0E72: 0A           	asl	A
  5500 05:0E73: 0A           	asl	A
  5501 05:0E74: 85 01        	sta	<R0
  5502 05:0E76: 18           	clc
  5503 05:0E77: A9 xx xx     	lda	#<~~eventProcess
  5504 05:0E7A: 65 01        	adc	<R0
  5505 05:0E7C: 85 05        	sta	<R1
  5506 05:0E7E: B2 05        	lda	(<R1)
  5507 05:0E80: 85 01        	sta	<R0
  5508 05:0E82: A0 02 00     	ldy	#$2
  5509 05:0E85: B1 05        	lda	(<R1),Y
  5510 05:0E87: 85 03        	sta	<R0+2
  5511 05:0E89: A7 01        	lda	[<R0]
  5512 05:0E8B: 85 05        	sta	<R1
  5513 05:0E8D: A0 02 00     	ldy	#$2
  5514 05:0E90: B7 01        	lda	[<R0],Y
  5515 05:0E92: 85 07        	sta	<R1+2
  5516 05:0E94: A0 04 00     	ldy	#$4
  Mon Sep 27 2021  9:39                                                Page 112


  5517 05:0E97: B7 05        	lda	[<R1],Y
  5518 05:0E99: 48           	pha
  5519 05:0E9A: A0 02 00     	ldy	#$2
  5520 05:0E9D: B7 05        	lda	[<R1],Y
  5521 05:0E9F: 48           	pha
  5522 05:0EA0: F4 xx xx     	pea	#^L124+34
  5523 05:0EA3: F4 xx xx     	pea	#<L124+34
  5524 05:0EA6: 22 xx xx xx  	jsl	~~k_debug_long
  5525                        ;				continue;
  5526                        	.line	1213
  5527 05:0EAA: 82 4A 05     	brl	L10079
  5528                        ;			}
  5529                        	.line	1214
  5530                        ;
  5531                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_SLEEPING)
  5532                        L10083:
  5533                        	.line	1216
  5534                        ;			{
  5535 05:0EAD: A5 19        	lda	<L140+index_1
  5536 05:0EAF: 0A           	asl	A
  5537 05:0EB0: 0A           	asl	A
  5538 05:0EB1: 85 01        	sta	<R0
  5539 05:0EB3: 18           	clc
  5540 05:0EB4: A9 xx xx     	lda	#<~~eventProcess
  5541 05:0EB7: 65 01        	adc	<R0
  5542 05:0EB9: 85 05        	sta	<R1
  5543 05:0EBB: B2 05        	lda	(<R1)
  5544 05:0EBD: 85 01        	sta	<R0
  5545 05:0EBF: A0 02 00     	ldy	#$2
  5546 05:0EC2: B1 05        	lda	(<R1),Y
  5547 05:0EC4: 85 03        	sta	<R0+2
  5548 05:0EC6: A7 01        	lda	[<R0]
  5549 05:0EC8: 85 05        	sta	<R1
  5550 05:0ECA: A0 02 00     	ldy	#$2
  5551 05:0ECD: B7 01        	lda	[<R0],Y
  5552 05:0ECF: 85 07        	sta	<R1+2
  5553 05:0ED1: A0 10 00     	ldy	#$10
  5554 05:0ED4: B7 05        	lda	[<R1],Y
  5555 05:0ED6: C9 02 00     	cmp	#<$2
  5556 05:0ED9: F0 03        	beq	L148
  5557 05:0EDB: 82 03 00     	brl	L10084
  5558                        L148:
  5559                        	.line	1217
  5560                        ;				//k_debug_long("k_do_pro
                    cesses::PROCESS SLEEPING:",eventProcess[index]->process->pro
                    cId);
  5561                        ;				continue;
  5562                        	.line	1219
  5563 05:0EDE: 82 16 05     	brl	L10079
  5564                        ;			}
  5565                        	.line	1220
  5566                        ;			/*
  5567                        ;			if(eventProcess[index]->process 
                    &&
  5568                        ;			   (eventProcess[index]->process
                    ->status != PROCESS_STATUS_RUNNING) &&
  5569                        ;			   (eventProcess[index]->process
  Mon Sep 27 2021  9:39                                                Page 113


                    ->status != PROCESS_STATUS_INIT))
  5570                        ;			{
  5571                        ;				if(eventProcess[index]->
                    process->status != PROCESS_STATUS_TERMINATED)
  5572                        ;				{
  5573                        ;					k_debug_long("k_
                    do_processes::PROCESS TERMINATING:",eventProcess[index]->pro
                    cess->procId);
  5574                        ;					eventProcess[ind
                    ex] = NULL;
  5575                        ;				}
  5576                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_WAITING)
  5577                        ;				{
  5578                        ;
  5579                        ;				}
  5580                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_SLEEPING)
  5581                        ;				{
  5582                        ;
  5583                        ;				}
  5584                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_SEMAPHORE)
  5585                        ;				{
  5586                        ;
  5587                        ;				}
  5588                        ;				continue;
  5589                        ;			}
  5590                        ;			*/
  5591                        ;
  5592                        ;			//if(index > IDLE_PROC)
  5593                        ;			//	k_debug_string("Calling 
                    bad proc index.\r\n");
  5594                        ;
  5595                        ;			//eventProcess[index](pMsg);
  5596                        ;			//k_debug_pointer("k_do_processe
                    s process:",eventProcess[index]->process);
  5597                        ;
  5598                        ;			//if(eventProcess[index]->proces
                    s!=NULL)
  5599                        ;			k_exec_set_current_process(event
                    Process[index]->process);
  5600                        L10084:
  5601                        	.line	1254
  5602 05:0EE1: A5 19        	lda	<L140+index_1
  5603 05:0EE3: 0A           	asl	A
  5604 05:0EE4: 0A           	asl	A
  5605 05:0EE5: 85 01        	sta	<R0
  5606 05:0EE7: 18           	clc
  5607 05:0EE8: A9 xx xx     	lda	#<~~eventProcess
  5608 05:0EEB: 65 01        	adc	<R0
  5609 05:0EED: 85 05        	sta	<R1
  5610 05:0EEF: B2 05        	lda	(<R1)
  5611 05:0EF1: 85 01        	sta	<R0
  5612 05:0EF3: A0 02 00     	ldy	#$2
  5613 05:0EF6: B1 05        	lda	(<R1),Y
  5614 05:0EF8: 85 03        	sta	<R0+2
  5615 05:0EFA: A0 02 00     	ldy	#$2
  Mon Sep 27 2021  9:39                                                Page 114


  5616 05:0EFD: B7 01        	lda	[<R0],Y
  5617 05:0EFF: 48           	pha
  5618 05:0F00: A7 01        	lda	[<R0]
  5619 05:0F02: 48           	pha
  5620 05:0F03: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  5621                        ;
  5622                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_TERMINATED)
  5623                        	.line	1256
  5624                        ;			{
  5625 05:0F07: A5 19        	lda	<L140+index_1
  5626 05:0F09: 0A           	asl	A
  5627 05:0F0A: 0A           	asl	A
  5628 05:0F0B: 85 01        	sta	<R0
  5629 05:0F0D: 18           	clc
  5630 05:0F0E: A9 xx xx     	lda	#<~~eventProcess
  5631 05:0F11: 65 01        	adc	<R0
  5632 05:0F13: 85 05        	sta	<R1
  5633 05:0F15: B2 05        	lda	(<R1)
  5634 05:0F17: 85 01        	sta	<R0
  5635 05:0F19: A0 02 00     	ldy	#$2
  5636 05:0F1C: B1 05        	lda	(<R1),Y
  5637 05:0F1E: 85 03        	sta	<R0+2
  5638 05:0F20: A7 01        	lda	[<R0]
  5639 05:0F22: 85 05        	sta	<R1
  5640 05:0F24: A0 02 00     	ldy	#$2
  5641 05:0F27: B7 01        	lda	[<R0],Y
  5642 05:0F29: 85 07        	sta	<R1+2
  5643 05:0F2B: A0 10 00     	ldy	#$10
  5644 05:0F2E: B7 05        	lda	[<R1],Y
  5645 05:0F30: C9 03 00     	cmp	#<$3
  5646 05:0F33: F0 03        	beq	L149
  5647 05:0F35: 82 87 00     	brl	L10085
  5648                        L149:
  5649                        	.line	1257
  5650                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TERMINATING:",eventProcess[index]->process->pr
                    ocId);
  5651                        	.line	1258
  5652 05:0F38: A5 19        	lda	<L140+index_1
  5653 05:0F3A: 0A           	asl	A
  5654 05:0F3B: 0A           	asl	A
  5655 05:0F3C: 85 01        	sta	<R0
  5656 05:0F3E: 18           	clc
  5657 05:0F3F: A9 xx xx     	lda	#<~~eventProcess
  5658 05:0F42: 65 01        	adc	<R0
  5659 05:0F44: 85 05        	sta	<R1
  5660 05:0F46: B2 05        	lda	(<R1)
  5661 05:0F48: 85 01        	sta	<R0
  5662 05:0F4A: A0 02 00     	ldy	#$2
  5663 05:0F4D: B1 05        	lda	(<R1),Y
  5664 05:0F4F: 85 03        	sta	<R0+2
  5665 05:0F51: A7 01        	lda	[<R0]
  5666 05:0F53: 85 05        	sta	<R1
  5667 05:0F55: A0 02 00     	ldy	#$2
  5668 05:0F58: B7 01        	lda	[<R0],Y
  5669 05:0F5A: 85 07        	sta	<R1+2
  5670 05:0F5C: A0 04 00     	ldy	#$4
  Mon Sep 27 2021  9:39                                                Page 115


  5671 05:0F5F: B7 05        	lda	[<R1],Y
  5672 05:0F61: 48           	pha
  5673 05:0F62: A0 02 00     	ldy	#$2
  5674 05:0F65: B7 05        	lda	[<R1],Y
  5675 05:0F67: 48           	pha
  5676 05:0F68: F4 xx xx     	pea	#^L124+67
  5677 05:0F6B: F4 xx xx     	pea	#<L124+67
  5678 05:0F6E: 22 xx xx xx  	jsl	~~k_debug_long
  5679                        ;				k_unattach_events(eventP
                    rocess[index]->eventProc,NULL);
  5680                        	.line	1259
  5681 05:0F72: F4 00 00     	pea	#^$0
  5682 05:0F75: F4 00 00     	pea	#<$0
  5683 05:0F78: A5 19        	lda	<L140+index_1
  5684 05:0F7A: 0A           	asl	A
  5685 05:0F7B: 0A           	asl	A
  5686 05:0F7C: 85 01        	sta	<R0
  5687 05:0F7E: 18           	clc
  5688 05:0F7F: A9 xx xx     	lda	#<~~eventProcess
  5689 05:0F82: 65 01        	adc	<R0
  5690 05:0F84: 85 05        	sta	<R1
  5691 05:0F86: B2 05        	lda	(<R1)
  5692 05:0F88: 85 01        	sta	<R0
  5693 05:0F8A: A0 02 00     	ldy	#$2
  5694 05:0F8D: B1 05        	lda	(<R1),Y
  5695 05:0F8F: 85 03        	sta	<R0+2
  5696 05:0F91: A0 06 00     	ldy	#$6
  5697 05:0F94: B7 01        	lda	[<R0],Y
  5698 05:0F96: 48           	pha
  5699 05:0F97: A0 04 00     	ldy	#$4
  5700 05:0F9A: B7 01        	lda	[<R0],Y
  5701 05:0F9C: 48           	pha
  5702 05:0F9D: 22 CF 14 05  	jsl	~~k_unattach_events
  5703                        ;				eventProcess[index] = NU
                    LL;
  5704                        	.line	1260
  5705 05:0FA1: A5 19        	lda	<L140+index_1
  5706 05:0FA3: 0A           	asl	A
  5707 05:0FA4: 0A           	asl	A
  5708 05:0FA5: 85 01        	sta	<R0
  5709 05:0FA7: 18           	clc
  5710 05:0FA8: A9 xx xx     	lda	#<~~eventProcess
  5711 05:0FAB: 65 01        	adc	<R0
  5712 05:0FAD: 85 05        	sta	<R1
  5713 05:0FAF: A9 00 00     	lda	#$0
  5714 05:0FB2: 92 05        	sta	(<R1)
  5715 05:0FB4: A9 00 00     	lda	#$0
  5716 05:0FB7: A0 02 00     	ldy	#$2
  5717 05:0FBA: 91 05        	sta	(<R1),Y
  5718                        ;				continue;
  5719                        	.line	1261
  5720 05:0FBC: 82 38 04     	brl	L10079
  5721                        ;			}
  5722                        	.line	1262
  5723                        ;
  5724                        ;			pCurrent = eventProcess[index]->
                    process;
  5725                        L10085:
  Mon Sep 27 2021  9:39                                                Page 116


  5726                        	.line	1264
  5727 05:0FBF: A5 19        	lda	<L140+index_1
  5728 05:0FC1: 0A           	asl	A
  5729 05:0FC2: 0A           	asl	A
  5730 05:0FC3: 85 01        	sta	<R0
  5731 05:0FC5: 18           	clc
  5732 05:0FC6: A9 xx xx     	lda	#<~~eventProcess
  5733 05:0FC9: 65 01        	adc	<R0
  5734 05:0FCB: 85 05        	sta	<R1
  5735 05:0FCD: B2 05        	lda	(<R1)
  5736 05:0FCF: 85 01        	sta	<R0
  5737 05:0FD1: A0 02 00     	ldy	#$2
  5738 05:0FD4: B1 05        	lda	(<R1),Y
  5739 05:0FD6: 85 03        	sta	<R0+2
  5740 05:0FD8: A7 01        	lda	[<R0]
  5741 05:0FDA: 85 1E        	sta	<L140+pCurrent_1
  5742 05:0FDC: A0 02 00     	ldy	#$2
  5743 05:0FDF: B7 01        	lda	[<R0],Y
  5744 05:0FE1: 85 20        	sta	<L140+pCurrent_1+2
  5745                        ;
  5746                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_INIT)
  5747                        	.line	1266
  5748                        ;			{
  5749 05:0FE3: A5 19        	lda	<L140+index_1
  5750 05:0FE5: 0A           	asl	A
  5751 05:0FE6: 0A           	asl	A
  5752 05:0FE7: 85 01        	sta	<R0
  5753 05:0FE9: 18           	clc
  5754 05:0FEA: A9 xx xx     	lda	#<~~eventProcess
  5755 05:0FED: 65 01        	adc	<R0
  5756 05:0FEF: 85 05        	sta	<R1
  5757 05:0FF1: B2 05        	lda	(<R1)
  5758 05:0FF3: 85 01        	sta	<R0
  5759 05:0FF5: A0 02 00     	ldy	#$2
  5760 05:0FF8: B1 05        	lda	(<R1),Y
  5761 05:0FFA: 85 03        	sta	<R0+2
  5762 05:0FFC: A7 01        	lda	[<R0]
  5763 05:0FFE: 85 05        	sta	<R1
  5764 05:1000: A0 02 00     	ldy	#$2
  5765 05:1003: B7 01        	lda	[<R0],Y
  5766 05:1005: 85 07        	sta	<R1+2
  5767 05:1007: A0 10 00     	ldy	#$10
  5768 05:100A: B7 05        	lda	[<R1],Y
  5769 05:100C: F0 03        	beq	L150
  5770 05:100E: 82 66 00     	brl	L10086
  5771                        L150:
  5772                        	.line	1267
  5773                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TO RUNNING:",eventProcess[index]->process->pro
                    cId);
  5774                        	.line	1268
  5775 05:1011: A5 19        	lda	<L140+index_1
  5776 05:1013: 0A           	asl	A
  5777 05:1014: 0A           	asl	A
  5778 05:1015: 85 01        	sta	<R0
  5779 05:1017: 18           	clc
  5780 05:1018: A9 xx xx     	lda	#<~~eventProcess
  Mon Sep 27 2021  9:39                                                Page 117


  5781 05:101B: 65 01        	adc	<R0
  5782 05:101D: 85 05        	sta	<R1
  5783 05:101F: B2 05        	lda	(<R1)
  5784 05:1021: 85 01        	sta	<R0
  5785 05:1023: A0 02 00     	ldy	#$2
  5786 05:1026: B1 05        	lda	(<R1),Y
  5787 05:1028: 85 03        	sta	<R0+2
  5788 05:102A: A7 01        	lda	[<R0]
  5789 05:102C: 85 05        	sta	<R1
  5790 05:102E: A0 02 00     	ldy	#$2
  5791 05:1031: B7 01        	lda	[<R0],Y
  5792 05:1033: 85 07        	sta	<R1+2
  5793 05:1035: A0 04 00     	ldy	#$4
  5794 05:1038: B7 05        	lda	[<R1],Y
  5795 05:103A: 48           	pha
  5796 05:103B: A0 02 00     	ldy	#$2
  5797 05:103E: B7 05        	lda	[<R1],Y
  5798 05:1040: 48           	pha
  5799 05:1041: F4 xx xx     	pea	#^L124+104
  5800 05:1044: F4 xx xx     	pea	#<L124+104
  5801 05:1047: 22 xx xx xx  	jsl	~~k_debug_long
  5802                        ;				eventProcess[index]->pro
                    cess->status = PROCESS_STATUS_RUNNING;
  5803                        	.line	1269
  5804 05:104B: A5 19        	lda	<L140+index_1
  5805 05:104D: 0A           	asl	A
  5806 05:104E: 0A           	asl	A
  5807 05:104F: 85 01        	sta	<R0
  5808 05:1051: 18           	clc
  5809 05:1052: A9 xx xx     	lda	#<~~eventProcess
  5810 05:1055: 65 01        	adc	<R0
  5811 05:1057: 85 05        	sta	<R1
  5812 05:1059: B2 05        	lda	(<R1)
  5813 05:105B: 85 01        	sta	<R0
  5814 05:105D: A0 02 00     	ldy	#$2
  5815 05:1060: B1 05        	lda	(<R1),Y
  5816 05:1062: 85 03        	sta	<R0+2
  5817 05:1064: A7 01        	lda	[<R0]
  5818 05:1066: 85 05        	sta	<R1
  5819 05:1068: A0 02 00     	ldy	#$2
  5820 05:106B: B7 01        	lda	[<R0],Y
  5821 05:106D: 85 07        	sta	<R1+2
  5822 05:106F: A9 01 00     	lda	#$1
  5823 05:1072: A0 10 00     	ldy	#$10
  5824 05:1075: 97 05        	sta	[<R1],Y
  5825                        ;			}
  5826                        	.line	1270
  5827                        ;
  5828                        ;			if(pMsg && pMsg->dest!=FX_MSG_DE
                    FAULT)
  5829                        L10086:
  5830                        	.line	1272
  5831                        ;			{
  5832 05:1077: A5 25        	lda	<L139+pMsg_0
  5833 05:1079: 05 27        	ora	<L139+pMsg_0+2
  5834 05:107B: D0 03        	bne	L151
  5835 05:107D: 82 41 01     	brl	L10087
  5836                        L151:
  Mon Sep 27 2021  9:39                                                Page 118


  5837 05:1080: A0 04 00     	ldy	#$4
  5838 05:1083: B7 25        	lda	[<L139+pMsg_0],Y
  5839 05:1085: C9 FF FF     	cmp	#<$ffffffff
  5840 05:1088: D0 08        	bne	L152
  5841 05:108A: A0 06 00     	ldy	#$6
  5842 05:108D: B7 25        	lda	[<L139+pMsg_0],Y
  5843 05:108F: C9 FF FF     	cmp	#^$ffffffff
  5844                        L152:
  5845 05:1092: D0 03        	bne	L153
  5846 05:1094: 82 2A 01     	brl	L10087
  5847                        L153:
  5848                        	.line	1273
  5849                        ;				if((eventProcess[index]-
                    >eventProc) && (eventProcess[index]->process->procId == pMsg
                    ->dest))
  5850                        	.line	1274
  5851                        ;				{
  5852 05:1097: A5 19        	lda	<L140+index_1
  5853 05:1099: 0A           	asl	A
  5854 05:109A: 0A           	asl	A
  5855 05:109B: 85 01        	sta	<R0
  5856 05:109D: 18           	clc
  5857 05:109E: A9 xx xx     	lda	#<~~eventProcess
  5858 05:10A1: 65 01        	adc	<R0
  5859 05:10A3: 85 05        	sta	<R1
  5860 05:10A5: B2 05        	lda	(<R1)
  5861 05:10A7: 85 01        	sta	<R0
  5862 05:10A9: A0 02 00     	ldy	#$2
  5863 05:10AC: B1 05        	lda	(<R1),Y
  5864 05:10AE: 85 03        	sta	<R0+2
  5865 05:10B0: A0 04 00     	ldy	#$4
  5866 05:10B3: B7 01        	lda	[<R0],Y
  5867 05:10B5: A0 06 00     	ldy	#$6
  5868 05:10B8: 17 01        	ora	[<R0],Y
  5869 05:10BA: D0 03        	bne	L154
  5870 05:10BC: 82 FF 00     	brl	L10088
  5871                        L154:
  5872 05:10BF: A5 19        	lda	<L140+index_1
  5873 05:10C1: 0A           	asl	A
  5874 05:10C2: 0A           	asl	A
  5875 05:10C3: 85 01        	sta	<R0
  5876 05:10C5: 18           	clc
  5877 05:10C6: A9 xx xx     	lda	#<~~eventProcess
  5878 05:10C9: 65 01        	adc	<R0
  5879 05:10CB: 85 05        	sta	<R1
  5880 05:10CD: B2 05        	lda	(<R1)
  5881 05:10CF: 85 01        	sta	<R0
  5882 05:10D1: A0 02 00     	ldy	#$2
  5883 05:10D4: B1 05        	lda	(<R1),Y
  5884 05:10D6: 85 03        	sta	<R0+2
  5885 05:10D8: A7 01        	lda	[<R0]
  5886 05:10DA: 85 05        	sta	<R1
  5887 05:10DC: A0 02 00     	ldy	#$2
  5888 05:10DF: B7 01        	lda	[<R0],Y
  5889 05:10E1: 85 07        	sta	<R1+2
  5890 05:10E3: A0 02 00     	ldy	#$2
  5891 05:10E6: B7 05        	lda	[<R1],Y
  5892 05:10E8: A0 04 00     	ldy	#$4
  Mon Sep 27 2021  9:39                                                Page 119


  5893 05:10EB: D7 25        	cmp	[<L139+pMsg_0],Y
  5894 05:10ED: D0 0A        	bne	L155
  5895 05:10EF: A0 04 00     	ldy	#$4
  5896 05:10F2: B7 05        	lda	[<R1],Y
  5897 05:10F4: A0 06 00     	ldy	#$6
  5898 05:10F7: D7 25        	cmp	[<L139+pMsg_0],Y
  5899                        L155:
  5900 05:10F9: F0 03        	beq	L156
  5901 05:10FB: 82 C0 00     	brl	L10088
  5902                        L156:
  5903                        	.line	1275
  5904                        ;					k_debug_long("**
                    Process Specific Message:PROCID:",eventProcess[index]->proce
                    ss->procId);
  5905                        	.line	1276
  5906 05:10FE: A5 19        	lda	<L140+index_1
  5907 05:1100: 0A           	asl	A
  5908 05:1101: 0A           	asl	A
  5909 05:1102: 85 01        	sta	<R0
  5910 05:1104: 18           	clc
  5911 05:1105: A9 xx xx     	lda	#<~~eventProcess
  5912 05:1108: 65 01        	adc	<R0
  5913 05:110A: 85 05        	sta	<R1
  5914 05:110C: B2 05        	lda	(<R1)
  5915 05:110E: 85 01        	sta	<R0
  5916 05:1110: A0 02 00     	ldy	#$2
  5917 05:1113: B1 05        	lda	(<R1),Y
  5918 05:1115: 85 03        	sta	<R0+2
  5919 05:1117: A7 01        	lda	[<R0]
  5920 05:1119: 85 05        	sta	<R1
  5921 05:111B: A0 02 00     	ldy	#$2
  5922 05:111E: B7 01        	lda	[<R0],Y
  5923 05:1120: 85 07        	sta	<R1+2
  5924 05:1122: A0 04 00     	ldy	#$4
  5925 05:1125: B7 05        	lda	[<R1],Y
  5926 05:1127: 48           	pha
  5927 05:1128: A0 02 00     	ldy	#$2
  5928 05:112B: B7 05        	lda	[<R1],Y
  5929 05:112D: 48           	pha
  5930 05:112E: F4 xx xx     	pea	#^L124+140
  5931 05:1131: F4 xx xx     	pea	#<L124+140
  5932 05:1134: 22 xx xx xx  	jsl	~~k_debug_long
  5933                        ;					k_debug_long("**
                    Process Specific Message:TYPE:",pMsg->type);
  5934                        	.line	1277
  5935 05:1138: A0 08 00     	ldy	#$8
  5936 05:113B: B7 25        	lda	[<L139+pMsg_0],Y
  5937 05:113D: 85 01        	sta	<R0
  5938 05:113F: 64 03        	stz	<R0+2
  5939 05:1141: D4 03        	pei	<R0+2
  5940 05:1143: D4 01        	pei	<R0
  5941 05:1145: F4 xx xx     	pea	#^L124+175
  5942 05:1148: F4 xx xx     	pea	#<L124+175
  5943 05:114B: 22 xx xx xx  	jsl	~~k_debug_long
  5944                        ;					k_debug_integer(
                    "**Process Specific Message:index:",index);
  5945                        	.line	1278
  5946 05:114F: D4 19        	pei	<L140+index_1
  Mon Sep 27 2021  9:39                                                Page 120


  5947 05:1151: F4 xx xx     	pea	#^L124+208
  5948 05:1154: F4 xx xx     	pea	#<L124+208
  5949 05:1157: 22 xx xx xx  	jsl	~~k_debug_integer
  5950                        ;					if(eventProcess[
                    index]->eventProc)
  5951                        	.line	1279
  5952                        ;					{
  5953 05:115B: A5 19        	lda	<L140+index_1
  5954 05:115D: 0A           	asl	A
  5955 05:115E: 0A           	asl	A
  5956 05:115F: 85 01        	sta	<R0
  5957 05:1161: 18           	clc
  5958 05:1162: A9 xx xx     	lda	#<~~eventProcess
  5959 05:1165: 65 01        	adc	<R0
  5960 05:1167: 85 05        	sta	<R1
  5961 05:1169: B2 05        	lda	(<R1)
  5962 05:116B: 85 01        	sta	<R0
  5963 05:116D: A0 02 00     	ldy	#$2
  5964 05:1170: B1 05        	lda	(<R1),Y
  5965 05:1172: 85 03        	sta	<R0+2
  5966 05:1174: A0 04 00     	ldy	#$4
  5967 05:1177: B7 01        	lda	[<R0],Y
  5968 05:1179: A0 06 00     	ldy	#$6
  5969 05:117C: 17 01        	ora	[<R0],Y
  5970 05:117E: D0 03        	bne	L157
  5971 05:1180: 82 2F 00     	brl	L10089
  5972                        L157:
  5973                        	.line	1280
  5974                        ;						eventPro
                    cess[index]->eventProc(pMsg);
  5975                        	.line	1281
  5976 05:1183: D4 27        	pei	<L139+pMsg_0+2
  5977 05:1185: D4 25        	pei	<L139+pMsg_0
  5978 05:1187: A5 19        	lda	<L140+index_1
  5979 05:1189: 0A           	asl	A
  5980 05:118A: 0A           	asl	A
  5981 05:118B: 85 01        	sta	<R0
  5982 05:118D: 18           	clc
  5983 05:118E: A9 xx xx     	lda	#<~~eventProcess
  5984 05:1191: 65 01        	adc	<R0
  5985 05:1193: 85 05        	sta	<R1
  5986 05:1195: B2 05        	lda	(<R1)
  5987 05:1197: 85 01        	sta	<R0
  5988 05:1199: A0 02 00     	ldy	#$2
  5989 05:119C: B1 05        	lda	(<R1),Y
  5990 05:119E: 85 03        	sta	<R0+2
  5991 05:11A0: A0 06 00     	ldy	#$6
  5992 05:11A3: B7 01        	lda	[<R0],Y
  5993 05:11A5: AA           	tax
  5994 05:11A6: A0 04 00     	ldy	#$4
  5995 05:11A9: B7 01        	lda	[<R0],Y
  5996                        	xref	~~~lcal
  5997 05:11AB: 22 xx xx xx  	jsl	~~~lcal
  5998                        ;					}
  5999                        	.line	1282
  6000                        ;					else
  6001 05:11AF: 82 0C 00     	brl	L10090
  6002                        L10089:
  Mon Sep 27 2021  9:39                                                Page 121


  6003                        ;					{
  6004                        	.line	1284
  6005                        ;						k_debug_
                    integer("**Process Specific Message:BAD PROC:",index);
  6006                        	.line	1285
  6007 05:11B2: D4 19        	pei	<L140+index_1
  6008 05:11B4: F4 xx xx     	pea	#^L124+242
  6009 05:11B7: F4 xx xx     	pea	#<L124+242
  6010 05:11BA: 22 xx xx xx  	jsl	~~k_debug_integer
  6011                        ;					}
  6012                        	.line	1286
  6013                        L10090:
  6014                        ;				}
  6015                        	.line	1287
  6016                        ;
  6017                        ;			}
  6018                        L10088:
  6019                        	.line	1289
  6020                        ;			else
  6021 05:11BE: 82 2C 02     	brl	L10091
  6022                        L10087:
  6023                        ;			{
  6024                        	.line	1291
  6025                        ;				if(pMsg && pMsg->type ==
                     FX_PROCESS_TIMER)
  6026                        	.line	1292
  6027                        ;				{
  6028 05:11C1: A5 25        	lda	<L139+pMsg_0
  6029 05:11C3: 05 27        	ora	<L139+pMsg_0+2
  6030 05:11C5: D0 03        	bne	L158
  6031 05:11C7: 82 94 01     	brl	L10092
  6032                        L158:
  6033 05:11CA: A0 08 00     	ldy	#$8
  6034 05:11CD: B7 25        	lda	[<L139+pMsg_0],Y
  6035 05:11CF: C9 F1 FF     	cmp	#<$fff1
  6036 05:11D2: F0 03        	beq	L159
  6037 05:11D4: 82 87 01     	brl	L10092
  6038                        L159:
  6039                        	.line	1293
  6040                        ;					//k_debug_string
                    ("** FX_PROCESS_TIMER DETECTED\r\n");
  6041                        ;					if(pCurrent && p
                    Current->timerAware )
  6042                        	.line	1295
  6043                        ;					{
  6044 05:11D7: A5 1E        	lda	<L140+pCurrent_1
  6045 05:11D9: 05 20        	ora	<L140+pCurrent_1+2
  6046 05:11DB: D0 03        	bne	L160
  6047 05:11DD: 82 7E 01     	brl	L10093
  6048                        L160:
  6049 05:11E0: A0 47 00     	ldy	#$47
  6050 05:11E3: B7 1E        	lda	[<L140+pCurrent_1],Y
  6051 05:11E5: 29 FF 00     	and	#$ff
  6052 05:11E8: D0 03        	bne	L161
  6053 05:11EA: 82 71 01     	brl	L10093
  6054                        L161:
  6055                        	.line	1296
  6056                        ;						//k_debu
  Mon Sep 27 2021  9:39                                                Page 122


                    g_string("** FX_PROCESS_TIMER DETECTED\r\n");
  6057                        ;						for(tc=0
                    ;tc<2;tc++)
  6058                        	.line	1298
  6059 05:11ED: 64 1B        	stz	<L140+tc_1
  6060                        L10096:
  6061                        ;						{
  6062                        	.line	1299
  6063                        ;							
                    if(pCurrent->timerTicks[tc])
  6064                        	.line	1300
  6065                        ;							
                    {
  6066 05:11EF: A0 00 00     	ldy	#$0
  6067 05:11F2: A5 1B        	lda	<L140+tc_1
  6068 05:11F4: 10 01        	bpl	L162
  6069 05:11F6: 88           	dey
  6070                        L162:
  6071 05:11F7: 85 05        	sta	<R1
  6072 05:11F9: 84 07        	sty	<R1+2
  6073 05:11FB: D4 07        	pei	<R1+2
  6074 05:11FD: D4 05        	pei	<R1
  6075 05:11FF: A9 01 00     	lda	#$1
  6076                        	xref	~~~lasl
  6077 05:1202: 22 xx xx xx  	jsl	~~~lasl
  6078 05:1206: 85 01        	sta	<R0
  6079 05:1208: 86 03        	stx	<R0+2
  6080 05:120A: 18           	clc
  6081 05:120B: A9 48 00     	lda	#$48
  6082 05:120E: 65 1E        	adc	<L140+pCurrent_1
  6083 05:1210: 85 09        	sta	<R2
  6084 05:1212: A9 00 00     	lda	#$0
  6085 05:1215: 65 20        	adc	<L140+pCurrent_1+2
  6086 05:1217: 85 0B        	sta	<R2+2
  6087 05:1219: 18           	clc
  6088 05:121A: A5 09        	lda	<R2
  6089 05:121C: 65 01        	adc	<R0
  6090 05:121E: 85 0D        	sta	<R3
  6091 05:1220: A5 0B        	lda	<R2+2
  6092 05:1222: 65 03        	adc	<R0+2
  6093 05:1224: 85 0F        	sta	<R3+2
  6094 05:1226: A7 0D        	lda	[<R3]
  6095 05:1228: D0 03        	bne	L163
  6096 05:122A: 82 24 01     	brl	L10097
  6097                        L163:
  6098                        	.line	1301
  6099                        ;							
                    	//k_debug_long   ("** FX_PROCESS_TIMER DETECTED:",pCurre
                    nt->procId);
  6100                        ;							
                    	//k_debug_integer("                       INDEX:",tc);
  6101                        ;							
                    	//k_debug_long   ("                       COUNT:",pCurre
                    nt->timerTickCount[tc]);
  6102                        ;							
                    	pCurrent->timerTickCount[tc]--;
  6103                        	.line	1305
  6104 05:122D: A0 00 00     	ldy	#$0
  Mon Sep 27 2021  9:39                                                Page 123


  6105 05:1230: A5 1B        	lda	<L140+tc_1
  6106 05:1232: 10 01        	bpl	L164
  6107 05:1234: 88           	dey
  6108                        L164:
  6109 05:1235: 85 05        	sta	<R1
  6110 05:1237: 84 07        	sty	<R1+2
  6111 05:1239: D4 07        	pei	<R1+2
  6112 05:123B: D4 05        	pei	<R1
  6113 05:123D: A9 01 00     	lda	#$1
  6114                        	xref	~~~lasl
  6115 05:1240: 22 xx xx xx  	jsl	~~~lasl
  6116 05:1244: 85 01        	sta	<R0
  6117 05:1246: 86 03        	stx	<R0+2
  6118 05:1248: 18           	clc
  6119 05:1249: A9 4C 00     	lda	#$4c
  6120 05:124C: 65 1E        	adc	<L140+pCurrent_1
  6121 05:124E: 85 09        	sta	<R2
  6122 05:1250: A9 00 00     	lda	#$0
  6123 05:1253: 65 20        	adc	<L140+pCurrent_1+2
  6124 05:1255: 85 0B        	sta	<R2+2
  6125 05:1257: 18           	clc
  6126 05:1258: A5 09        	lda	<R2
  6127 05:125A: 65 01        	adc	<R0
  6128 05:125C: 85 0D        	sta	<R3
  6129 05:125E: A5 0B        	lda	<R2+2
  6130 05:1260: 65 03        	adc	<R0+2
  6131 05:1262: 85 0F        	sta	<R3+2
  6132 05:1264: 18           	clc
  6133 05:1265: A9 FF FF     	lda	#$ffff
  6134 05:1268: 67 0D        	adc	[<R3]
  6135 05:126A: 87 0D        	sta	[<R3]
  6136                        ;							
                    	if(pCurrent->timerTickCount[tc] == 0)
  6137                        	.line	1306
  6138                        ;							
                    	{
  6139 05:126C: A0 00 00     	ldy	#$0
  6140 05:126F: A5 1B        	lda	<L140+tc_1
  6141 05:1271: 10 01        	bpl	L165
  6142 05:1273: 88           	dey
  6143                        L165:
  6144 05:1274: 85 05        	sta	<R1
  6145 05:1276: 84 07        	sty	<R1+2
  6146 05:1278: D4 07        	pei	<R1+2
  6147 05:127A: D4 05        	pei	<R1
  6148 05:127C: A9 01 00     	lda	#$1
  6149                        	xref	~~~lasl
  6150 05:127F: 22 xx xx xx  	jsl	~~~lasl
  6151 05:1283: 85 01        	sta	<R0
  6152 05:1285: 86 03        	stx	<R0+2
  6153 05:1287: 18           	clc
  6154 05:1288: A9 4C 00     	lda	#$4c
  6155 05:128B: 65 1E        	adc	<L140+pCurrent_1
  6156 05:128D: 85 09        	sta	<R2
  6157 05:128F: A9 00 00     	lda	#$0
  6158 05:1292: 65 20        	adc	<L140+pCurrent_1+2
  6159 05:1294: 85 0B        	sta	<R2+2
  6160 05:1296: 18           	clc
  Mon Sep 27 2021  9:39                                                Page 124


  6161 05:1297: A5 09        	lda	<R2
  6162 05:1299: 65 01        	adc	<R0
  6163 05:129B: 85 0D        	sta	<R3
  6164 05:129D: A5 0B        	lda	<R2+2
  6165 05:129F: 65 03        	adc	<R0+2
  6166 05:12A1: 85 0F        	sta	<R3+2
  6167 05:12A3: A7 0D        	lda	[<R3]
  6168 05:12A5: F0 03        	beq	L166
  6169 05:12A7: 82 A7 00     	brl	L10098
  6170                        L166:
  6171                        	.line	1307
  6172                        ;							
                    		//k_debug_long("** FX_PROCESS_TIMER SENT:",pCurr
                    ent->procId);
  6173                        ;							
                    		pCurrent->timerTickCount[tc] = pCurrent->timerTi
                    cks[tc];
  6174                        	.line	1309
  6175 05:12AA: A0 00 00     	ldy	#$0
  6176 05:12AD: A5 1B        	lda	<L140+tc_1
  6177 05:12AF: 10 01        	bpl	L167
  6178 05:12B1: 88           	dey
  6179                        L167:
  6180 05:12B2: 85 05        	sta	<R1
  6181 05:12B4: 84 07        	sty	<R1+2
  6182 05:12B6: D4 07        	pei	<R1+2
  6183 05:12B8: D4 05        	pei	<R1
  6184 05:12BA: A9 01 00     	lda	#$1
  6185                        	xref	~~~lasl
  6186 05:12BD: 22 xx xx xx  	jsl	~~~lasl
  6187 05:12C1: 85 01        	sta	<R0
  6188 05:12C3: 86 03        	stx	<R0+2
  6189 05:12C5: 18           	clc
  6190 05:12C6: A9 4C 00     	lda	#$4c
  6191 05:12C9: 65 1E        	adc	<L140+pCurrent_1
  6192 05:12CB: 85 09        	sta	<R2
  6193 05:12CD: A9 00 00     	lda	#$0
  6194 05:12D0: 65 20        	adc	<L140+pCurrent_1+2
  6195 05:12D2: 85 0B        	sta	<R2+2
  6196 05:12D4: 18           	clc
  6197 05:12D5: A5 09        	lda	<R2
  6198 05:12D7: 65 01        	adc	<R0
  6199 05:12D9: 85 0D        	sta	<R3
  6200 05:12DB: A5 0B        	lda	<R2+2
  6201 05:12DD: 65 03        	adc	<R0+2
  6202 05:12DF: 85 0F        	sta	<R3+2
  6203 05:12E1: A0 00 00     	ldy	#$0
  6204 05:12E4: A5 1B        	lda	<L140+tc_1
  6205 05:12E6: 10 01        	bpl	L168
  6206 05:12E8: 88           	dey
  6207                        L168:
  6208 05:12E9: 85 09        	sta	<R2
  6209 05:12EB: 84 0B        	sty	<R2+2
  6210 05:12ED: D4 0B        	pei	<R2+2
  6211 05:12EF: D4 09        	pei	<R2
  6212 05:12F1: A9 01 00     	lda	#$1
  6213                        	xref	~~~lasl
  6214 05:12F4: 22 xx xx xx  	jsl	~~~lasl
  Mon Sep 27 2021  9:39                                                Page 125


  6215 05:12F8: 85 01        	sta	<R0
  6216 05:12FA: 86 03        	stx	<R0+2
  6217 05:12FC: 18           	clc
  6218 05:12FD: A9 48 00     	lda	#$48
  6219 05:1300: 65 1E        	adc	<L140+pCurrent_1
  6220 05:1302: 85 11        	sta	<17
  6221 05:1304: A9 00 00     	lda	#$0
  6222 05:1307: 65 20        	adc	<L140+pCurrent_1+2
  6223 05:1309: 85 13        	sta	<17+2
  6224 05:130B: 18           	clc
  6225 05:130C: A5 11        	lda	<17
  6226 05:130E: 65 01        	adc	<R0
  6227 05:1310: 85 15        	sta	<21
  6228 05:1312: A5 13        	lda	<17+2
  6229 05:1314: 65 03        	adc	<R0+2
  6230 05:1316: 85 17        	sta	<21+2
  6231 05:1318: A7 15        	lda	[<21]
  6232 05:131A: 87 0D        	sta	[<R3]
  6233                        ;							
                    		//pMsg->hwnd = BROADCAST_HWND;
  6234                        ;							
                    		pMsg->hwnd = k_user_getFocusWindow();
  6235                        	.line	1311
  6236 05:131C: 22 xx xx xx  	jsl	~~k_user_getFocusWindow
  6237 05:1320: 85 01        	sta	<R0
  6238 05:1322: 86 03        	stx	<R0+2
  6239 05:1324: A5 01        	lda	<R0
  6240 05:1326: A0 0A 00     	ldy	#$a
  6241 05:1329: 97 25        	sta	[<L139+pMsg_0],Y
  6242 05:132B: A5 03        	lda	<R0+2
  6243 05:132D: A0 0C 00     	ldy	#$c
  6244 05:1330: 97 25        	sta	[<L139+pMsg_0],Y
  6245                        ;							
                    		if(!pMsg->hwnd)
  6246                        	.line	1312
  6247                        ;							
                    			pMsg->hwnd = BROADCAST_HWND;
  6248 05:1332: A0 0A 00     	ldy	#$a
  6249 05:1335: B7 25        	lda	[<L139+pMsg_0],Y
  6250 05:1337: A0 0C 00     	ldy	#$c
  6251 05:133A: 17 25        	ora	[<L139+pMsg_0],Y
  6252 05:133C: F0 03        	beq	L169
  6253 05:133E: 82 10 00     	brl	L10099
  6254                        L169:
  6255                        	.line	1313
  6256 05:1341: A9 FA FF     	lda	#$fffa
  6257 05:1344: A0 0A 00     	ldy	#$a
  6258 05:1347: 97 25        	sta	[<L139+pMsg_0],Y
  6259 05:1349: A9 FA FF     	lda	#$fffa
  6260 05:134C: A0 0C 00     	ldy	#$c
  6261 05:134F: 97 25        	sta	[<L139+pMsg_0],Y
  6262                        ;							
                    	}
  6263                        L10099:
  6264                        	.line	1314
  6265                        ;							
                    }
  6266                        L10098:
  Mon Sep 27 2021  9:39                                                Page 126


  6267                        	.line	1315
  6268                        ;						}
  6269                        L10097:
  6270                        	.line	1316
  6271                        L10094:
  6272 05:1351: E6 1B        	inc	<L140+tc_1
  6273 05:1353: A5 1B        	lda	<L140+tc_1
  6274 05:1355: 30 04        	bmi	L170
  6275 05:1357: 3A           	dea
  6276 05:1358: 3A           	dea
  6277 05:1359: 10 03        	bpl	L171
  6278                        L170:
  6279 05:135B: 82 91 FE     	brl	L10096
  6280                        L171:
  6281                        L10095:
  6282                        ;					}
  6283                        	.line	1317
  6284                        ;
  6285                        ;				}
  6286                        L10093:
  6287                        	.line	1319
  6288                        ;
  6289                        ;				if(pMsg->hwnd)
  6290                        L10092:
  6291                        	.line	1321
  6292                        ;				{
  6293 05:135E: A0 0A 00     	ldy	#$a
  6294 05:1361: B7 25        	lda	[<L139+pMsg_0],Y
  6295 05:1363: A0 0C 00     	ldy	#$c
  6296 05:1366: 17 25        	ora	[<L139+pMsg_0],Y
  6297 05:1368: D0 03        	bne	L172
  6298 05:136A: 82 2C 00     	brl	L10100
  6299                        L172:
  6300                        	.line	1322
  6301                        ;					//if(pMsg->type 
                    == FX_LBUTTON_DOWN)
  6302                        ;					//	k_debug_
                    pointer("pMsg:FX_LBUTTON_DOWN:hWnd:",pMsg->hwnd);
  6303                        ;					//k_debug_char_c
                    om1('{');
  6304                        ;					_k_currentWndMan
                    ager->DoWndProcs(k_exec_get_current_process(),pMsg,isForegro
                    und);
  6305                        	.line	1326
  6306 05:136D: D4 1D        	pei	<L140+isForeground_1
  6307 05:136F: D4 27        	pei	<L139+pMsg_0+2
  6308 05:1371: D4 25        	pei	<L139+pMsg_0
  6309 05:1373: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  6310 05:1377: 85 01        	sta	<R0
  6311 05:1379: 86 03        	stx	<R0+2
  6312 05:137B: DA           	phx
  6313 05:137C: 48           	pha
  6314 05:137D: AD xx xx     	lda	|~~_k_currentWndManager
  6315 05:1380: 85 05        	sta	<R1
  6316 05:1382: AD xx xx     	lda	|~~_k_currentWndManager+2
  6317 05:1385: 85 07        	sta	<R1+2
  6318 05:1387: A0 12 00     	ldy	#$12
  6319 05:138A: B7 05        	lda	[<R1],Y
  Mon Sep 27 2021  9:39                                                Page 127


  6320 05:138C: AA           	tax
  6321 05:138D: A0 10 00     	ldy	#$10
  6322 05:1390: B7 05        	lda	[<R1],Y
  6323                        	xref	~~~lcal
  6324 05:1392: 22 xx xx xx  	jsl	~~~lcal
  6325                        ;					//k_debug_char_c
                    om1('}');
  6326                        ;					//k_debug_pointe
                    r("pMsg:AFTER-DoWndProcs:hWnd:",pMsg->hwnd);
  6327                        ;				}
  6328                        	.line	1329
  6329                        ;				else
  6330 05:1396: 82 54 00     	brl	L10101
  6331                        L10100:
  6332                        ;				{
  6333                        	.line	1331
  6334                        ;					if(eventProcess[
                    index]->eventProc)
  6335                        	.line	1332
  6336                        ;					{
  6337 05:1399: A5 19        	lda	<L140+index_1
  6338 05:139B: 0A           	asl	A
  6339 05:139C: 0A           	asl	A
  6340 05:139D: 85 01        	sta	<R0
  6341 05:139F: 18           	clc
  6342 05:13A0: A9 xx xx     	lda	#<~~eventProcess
  6343 05:13A3: 65 01        	adc	<R0
  6344 05:13A5: 85 05        	sta	<R1
  6345 05:13A7: B2 05        	lda	(<R1)
  6346 05:13A9: 85 01        	sta	<R0
  6347 05:13AB: A0 02 00     	ldy	#$2
  6348 05:13AE: B1 05        	lda	(<R1),Y
  6349 05:13B0: 85 03        	sta	<R0+2
  6350 05:13B2: A0 04 00     	ldy	#$4
  6351 05:13B5: B7 01        	lda	[<R0],Y
  6352 05:13B7: A0 06 00     	ldy	#$6
  6353 05:13BA: 17 01        	ora	[<R0],Y
  6354 05:13BC: D0 03        	bne	L173
  6355 05:13BE: 82 2C 00     	brl	L10102
  6356                        L173:
  6357                        	.line	1333
  6358                        ;
  6359                        ;						//k_debu
                    g_char_com1('{');
  6360                        ;						eventPro
                    cess[index]->eventProc(pMsg);
  6361                        	.line	1336
  6362 05:13C1: D4 27        	pei	<L139+pMsg_0+2
  6363 05:13C3: D4 25        	pei	<L139+pMsg_0
  6364 05:13C5: A5 19        	lda	<L140+index_1
  6365 05:13C7: 0A           	asl	A
  6366 05:13C8: 0A           	asl	A
  6367 05:13C9: 85 01        	sta	<R0
  6368 05:13CB: 18           	clc
  6369 05:13CC: A9 xx xx     	lda	#<~~eventProcess
  6370 05:13CF: 65 01        	adc	<R0
  6371 05:13D1: 85 05        	sta	<R1
  6372 05:13D3: B2 05        	lda	(<R1)
  Mon Sep 27 2021  9:39                                                Page 128


  6373 05:13D5: 85 01        	sta	<R0
  6374 05:13D7: A0 02 00     	ldy	#$2
  6375 05:13DA: B1 05        	lda	(<R1),Y
  6376 05:13DC: 85 03        	sta	<R0+2
  6377 05:13DE: A0 06 00     	ldy	#$6
  6378 05:13E1: B7 01        	lda	[<R0],Y
  6379 05:13E3: AA           	tax
  6380 05:13E4: A0 04 00     	ldy	#$4
  6381 05:13E7: B7 01        	lda	[<R0],Y
  6382                        	xref	~~~lcal
  6383 05:13E9: 22 xx xx xx  	jsl	~~~lcal
  6384                        ;						//k_debu
                    g_char_com1('}');
  6385                        ;
  6386                        ;					}
  6387                        	.line	1339
  6388                        ;				}
  6389                        L10102:
  6390                        	.line	1340
  6391                        L10101:
  6392                        ;
  6393                        ;			}
  6394                        	.line	1342
  6395                        L10091:
  6396                        ;
  6397                        ;			k_exec_set_current_process(NULL)
                    ;
  6398                        	.line	1344
  6399 05:13ED: F4 00 00     	pea	#^$0
  6400 05:13F0: F4 00 00     	pea	#<$0
  6401 05:13F3: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  6402                        ;		}
  6403                        	.line	1345
  6404                        ;	}
  6405                        L10082:
  6406                        	.line	1346
  6407                        L10079:
  6408 05:13F7: E6 19        	inc	<L140+index_1
  6409 05:13F9: 38           	sec
  6410 05:13FA: A5 19        	lda	<L140+index_1
  6411 05:13FC: E9 00 01     	sbc	#<$100
  6412 05:13FF: 70 03        	bvs	L174
  6413 05:1401: 49 00 80     	eor	#$8000
  6414                        L174:
  6415 05:1404: 30 03        	bmi	L175
  6416 05:1406: 82 ED F9     	brl	L10081
  6417                        L175:
  6418                        L10080:
  6419                        ;}
  6420                        	.line	1347
  6421                        L176:
  6422 05:1409: A5 23        	lda	<L139+2
  6423 05:140B: 85 27        	sta	<L139+2+4
  6424 05:140D: A5 22        	lda	<L139+1
  6425 05:140F: 85 26        	sta	<L139+1+4
  6426 05:1411: 2B           	pld
  6427 05:1412: 3B           	tsc
  6428 05:1413: 18           	clc
  Mon Sep 27 2021  9:39                                                Page 129


  6429 05:1414: 69 25 00     	adc	#L139+4
  6430 05:1417: 1B           	tcs
  6431 05:1418: 6B           	rtl
  6432                        	.endblock	1347
  6433             00000021   L139	equ	33
  6434             00000019   L140	equ	25
  6435 05:1419:              	ends
  6436                        	efunc
  6437                        	.endfunc	1347,25,33
  6438                        	.line	1347
  6439                        	data
  6440                        L124:
  6441 00:056D: 6B 5F 64 6F  	db	$6B,$5F,$64,$6F,$5F,$70,$72,$6F,$63,$65,
                    $73,$73,$65,$73,$3A
       00:0571: 5F 70 72 6F 
       00:0575: 63 65 73 73 
       00:0579: 65 73 3A 
  6442 00:057C: 46 58 5F 50  	db	$46,$58,$5F,$50,$52,$4F,$43,$45,$53,$53,
                    $5F,$53,$44,$43,$41
       00:0580: 52 4F 43 45 
       00:0584: 53 53 5F 53 
       00:0588: 44 43 41 
  6443 00:058B: 52 44 3A 00  	db	$52,$44,$3A,$00,$6B,$5F,$64,$6F,$5F,$70,
                    $72,$6F,$63,$65,$73
       00:058F: 6B 5F 64 6F 
       00:0593: 5F 70 72 6F 
       00:0597: 63 65 73 
  6444 00:059A: 73 65 73 3A  	db	$73,$65,$73,$3A,$3A,$50,$52,$4F,$43,$45,
                    $53,$53,$20,$57,$41
       00:059E: 3A 50 52 4F 
       00:05A2: 43 45 53 53 
       00:05A6: 20 57 41 
  6445 00:05A9: 49 54 49 4E  	db	$49,$54,$49,$4E,$47,$3A,$00,$6B,$5F,$64,
                    $6F,$5F,$70,$72,$6F
       00:05AD: 47 3A 00 6B 
       00:05B1: 5F 64 6F 5F 
       00:05B5: 70 72 6F 
  6446 00:05B8: 63 65 73 73  	db	$63,$65,$73,$73,$65,$73,$3A,$3A,$50,$52,
                    $4F,$43,$45,$53,$53
       00:05BC: 65 73 3A 3A 
       00:05C0: 50 52 4F 43 
       00:05C4: 45 53 53 
  6447 00:05C7: 20 54 45 52  	db	$20,$54,$45,$52,$4D,$49,$4E,$41,$54,$49,
                    $4E,$47,$3A,$00,$6B
       00:05CB: 4D 49 4E 41 
       00:05CF: 54 49 4E 47 
       00:05D3: 3A 00 6B 
  6448 00:05D6: 5F 64 6F 5F  	db	$5F,$64,$6F,$5F,$70,$72,$6F,$63,$65,$73,
                    $73,$65,$73,$3A,$3A
       00:05DA: 70 72 6F 63 
       00:05DE: 65 73 73 65 
       00:05E2: 73 3A 3A 
  6449 00:05E5: 50 52 4F 43  	db	$50,$52,$4F,$43,$45,$53,$53,$20,$54,$4F,
                    $20,$52,$55,$4E,$4E
       00:05E9: 45 53 53 20 
       00:05ED: 54 4F 20 52 
       00:05F1: 55 4E 4E 
  6450 00:05F4: 49 4E 47 3A  	db	$49,$4E,$47,$3A,$00,$2A,$2A,$50,$72,$6F,
  Mon Sep 27 2021  9:39                                                Page 130


                    $63,$65,$73,$73,$20
       00:05F8: 00 2A 2A 50 
       00:05FC: 72 6F 63 65 
       00:0600: 73 73 20 
  6451 00:0603: 53 70 65 63  	db	$53,$70,$65,$63,$69,$66,$69,$63,$20,$4D,
                    $65,$73,$73,$61,$67
       00:0607: 69 66 69 63 
       00:060B: 20 4D 65 73 
       00:060F: 73 61 67 
  6452 00:0612: 65 3A 50 52  	db	$65,$3A,$50,$52,$4F,$43,$49,$44,$3A,$00,
                    $2A,$2A,$50,$72,$6F
       00:0616: 4F 43 49 44 
       00:061A: 3A 00 2A 2A 
       00:061E: 50 72 6F 
  6453 00:0621: 63 65 73 73  	db	$63,$65,$73,$73,$20,$53,$70,$65,$63,$69,
                    $66,$69,$63,$20,$4D
       00:0625: 20 53 70 65 
       00:0629: 63 69 66 69 
       00:062D: 63 20 4D 
  6454 00:0630: 65 73 73 61  	db	$65,$73,$73,$61,$67,$65,$3A,$54,$59,$50,
                    $45,$3A,$00,$2A,$2A
       00:0634: 67 65 3A 54 
       00:0638: 59 50 45 3A 
       00:063C: 00 2A 2A 
  6455 00:063F: 50 72 6F 63  	db	$50,$72,$6F,$63,$65,$73,$73,$20,$53,$70,
                    $65,$63,$69,$66,$69
       00:0643: 65 73 73 20 
       00:0647: 53 70 65 63 
       00:064B: 69 66 69 
  6456 00:064E: 63 20 4D 65  	db	$63,$20,$4D,$65,$73,$73,$61,$67,$65,$3A,
                    $69,$6E,$64,$65,$78
       00:0652: 73 73 61 67 
       00:0656: 65 3A 69 6E 
       00:065A: 64 65 78 
  6457 00:065D: 3A 00 2A 2A  	db	$3A,$00,$2A,$2A,$50,$72,$6F,$63,$65,$73,
                    $73,$20,$53,$70,$65
       00:0661: 50 72 6F 63 
       00:0665: 65 73 73 20 
       00:0669: 53 70 65 
  6458 00:066C: 63 69 66 69  	db	$63,$69,$66,$69,$63,$20,$4D,$65,$73,$73,
                    $61,$67,$65,$3A,$42
       00:0670: 63 20 4D 65 
       00:0674: 73 73 61 67 
       00:0678: 65 3A 42 
  6459 00:067B: 41 44 20 50  	db	$41,$44,$20,$50,$52,$4F,$43,$3A,$00
       00:067F: 52 4F 43 3A 
       00:0683: 00 
  6460 00:0684:              	ends
  6461                        ;
  6462                        ;/*
  6463                        ;void k_main_loop(PFXENVIRONMENT pEnv)
  6464                        ;{
  6465                        ;	int bExit = 0;
  6466                        ;	int mb = 0;
  6467                        ;	int mx = 0;
  6468                        ;
  6469                        ;	int my = 0;
  6470                        ;	int lk = 0;
  Mon Sep 27 2021  9:39                                                Page 131


  6471                        ;
  6472                        ;
  6473                        ;
  6474                        ;	FXOSMESSAGE msg;
  6475                        ;
  6476                        ;	k_debug_string("********************************
                    **\r\n");
  6477                        ;	k_debug_string("******     k_main_loop  3  *****
                    **\r\n");
  6478                        ;	k_debug_string("********************************
                    **\r\n");
  6479                        ;
  6480                        ;	//asm cli;
  6481                        ;
  6482                        ;	k_debug_string("k_main_loop:CLI\r\n");
  6483                        ;
  6484                        ;	eventProcs[IDLE_PROC] = IdleProc;
  6485                        ;
  6486                        ;	while(!bExit)
  6487                        ;	{
  6488                        ;		mb = 0;
  6489                        ;		//k_debug_string("k_main_loop:WAI\r\n");
  6490                        ;		//asm WAI;
  6491                        ;
  6492                        ;		//asm sei;
  6493                        ;		disable();
  6494                        ;		mb = (FXOS_MOUSE_BYTE_0 & 0x07);
  6495                        ;		mx = k_get_mouse_pos_X();
  6496                        ;		my = k_get_mouse_pos_Y();
  6497                        ;		//asm cli;
  6498                        ;		enable();
  6499                        ;		msg.type = FX_MOUSE_MOVE;
  6500                        ;
  6501                        ;		((PMOUSEMSGDATA)&msg.data)->button1 = (m
                    b & 1);
  6502                        ;		((PMOUSEMSGDATA)&msg.data)->button2 = (m
                    b & 2);
  6503                        ;		((PMOUSEMSGDATA)&msg.data)->button3 = (m
                    b & 4);
  6504                        ;		((PMOUSEMSGDATA)&msg.data)->button4 = 0;
  6505                        ;
  6506                        ;		((PMOUSEMSGDATA)&msg.data)->x = mx;
  6507                        ;		((PMOUSEMSGDATA)&msg.data)->y = my;
  6508                        ;
  6509                        ;
  6510                        ;		k_do_procs(&msg);
  6511                        ;	}
  6512                        ;
  6513                        ;
  6514                        ;	return;
  6515                        ;}
  6516                        ;*/
  6517                        ;//int k_getevents(FXEventProc eventProcedure)
  6518                        ;int k_attach_events(FXEventProc eventProcedure,LP
                    VOID processArgs)
  6519                        ;{
  6520                        	.line	1405
  6521                        	.line	1406
  Mon Sep 27 2021  9:39                                                Page 132


  6522                        	EVTMAN
  6523                        	xdef	~~k_attach_events
  6524                        	func
  6525                        	.function	1406
  6526                        ~~k_attach_events:
  6527                        	longa	on
  6528                        	longi	on
  6529 05:1419: 3B           	tsc
  6530 05:141A: 38           	sec
  6531 05:141B: E9 18 00     	sbc	#L178
  6532 05:141E: 1B           	tcs
  6533 05:141F: 0B           	phd
  6534 05:1420: 5B           	tcd
  6535             00000004   eventProcedure_0	set	4
  6536             00000008   processArgs_0	set	8
  6537                        	.block	1406
  6538                        ;	FXPROCESSMESSAGE msg;
  6539                        ;
  6540                        ;	int index = LOW_PROC;
  6541                        ;	
  6542                        ;	if(eventProcedure!=NULL)
  6543             00000000   msg_1	set	0
  6544             0000000E   index_1	set	14
  6545                        	.sym	msg,0,10,1,112,21
  6546                        	.sym	index,14,5,1,16
  6547                        	.sym	eventProcedure,4,641,6,32
  6548                        	.sym	processArgs,8,129,6,32
  6549 05:1421: A9 01 00     	lda	#$1
  6550 05:1424: 85 17        	sta	<L179+index_1
  6551                        	.line	1411
  6552                        ;	{
  6553 05:1426: A5 1C        	lda	<L178+eventProcedure_0
  6554 05:1428: 05 1E        	ora	<L178+eventProcedure_0+2
  6555 05:142A: D0 03        	bne	L181
  6556 05:142C: 82 8B 00     	brl	L10103
  6557                        L181:
  6558                        	.line	1412
  6559                        ;		//k_debug_string("Enter k_getevents\r\n"
                    );
  6560                        ;		//k_debug_pointer("\tProcess:",processAr
                    gs);
  6561                        ;
  6562                        ;		//while(index < MAX_PROCS && eventProcs[
                    index]!=NULL)
  6563                        ;		for(index=LOW_PROC;index<MAX_PROCS;index
                    ++)
  6564                        	.line	1417
  6565 05:142F: A9 01 00     	lda	#$1
  6566 05:1432: 85 17        	sta	<L179+index_1
  6567                        L10106:
  6568                        ;		{
  6569                        	.line	1418
  6570                        ;			if(eventProcs[index] == NULL)
  6571                        	.line	1419
  6572                        ;			{
  6573 05:1434: A5 17        	lda	<L179+index_1
  6574 05:1436: 0A           	asl	A
  6575 05:1437: 0A           	asl	A
  Mon Sep 27 2021  9:39                                                Page 133


  6576 05:1438: 85 01        	sta	<R0
  6577 05:143A: 18           	clc
  6578 05:143B: A9 xx xx     	lda	#<~~eventProcs
  6579 05:143E: 65 01        	adc	<R0
  6580 05:1440: 85 05        	sta	<R1
  6581 05:1442: B2 05        	lda	(<R1)
  6582 05:1444: A0 02 00     	ldy	#$2
  6583 05:1447: 11 05        	ora	(<R1),Y
  6584 05:1449: F0 03        	beq	L182
  6585 05:144B: 82 28 00     	brl	L10107
  6586                        L182:
  6587                        	.line	1420
  6588                        ;				eventProcs[index] = even
                    tProcedure;
  6589                        	.line	1421
  6590 05:144E: A5 17        	lda	<L179+index_1
  6591 05:1450: 0A           	asl	A
  6592 05:1451: 0A           	asl	A
  6593 05:1452: 85 01        	sta	<R0
  6594 05:1454: 18           	clc
  6595 05:1455: A9 xx xx     	lda	#<~~eventProcs
  6596 05:1458: 65 01        	adc	<R0
  6597 05:145A: 85 05        	sta	<R1
  6598 05:145C: A5 1C        	lda	<L178+eventProcedure_0
  6599 05:145E: 92 05        	sta	(<R1)
  6600 05:1460: A5 1E        	lda	<L178+eventProcedure_0+2
  6601 05:1462: A0 02 00     	ldy	#$2
  6602 05:1465: 91 05        	sta	(<R1),Y
  6603                        ;				k_debug_integer("k_getev
                    ents::@index:",index);
  6604                        	.line	1422
  6605 05:1467: D4 17        	pei	<L179+index_1
  6606 05:1469: F4 xx xx     	pea	#^L177
  6607 05:146C: F4 xx xx     	pea	#<L177
  6608 05:146F: 22 xx xx xx  	jsl	~~k_debug_integer
  6609                        ;				break;
  6610                        	.line	1423
  6611 05:1473: 82 12 00     	brl	L10105
  6612                        ;			}
  6613                        	.line	1424
  6614                        ;		}
  6615                        L10107:
  6616                        	.line	1425
  6617                        L10104:
  6618 05:1476: E6 17        	inc	<L179+index_1
  6619 05:1478: 38           	sec
  6620 05:1479: A5 17        	lda	<L179+index_1
  6621 05:147B: E9 00 01     	sbc	#<$100
  6622 05:147E: 70 03        	bvs	L183
  6623 05:1480: 49 00 80     	eor	#$8000
  6624                        L183:
  6625 05:1483: 30 03        	bmi	L184
  6626 05:1485: 82 AC FF     	brl	L10106
  6627                        L184:
  6628                        L10105:
  6629                        ;
  6630                        ;		msg.type = FX_INIT_MESSAGE;
  6631                        	.line	1427
  Mon Sep 27 2021  9:39                                                Page 134


  6632 05:1488: A9 01 FF     	lda	#$ff01
  6633 05:148B: 85 11        	sta	<L179+msg_1+8
  6634                        ;		msg.src  = FX_MSG_DEFAULT;
  6635                        	.line	1428
  6636 05:148D: A9 FF FF     	lda	#$ffff
  6637 05:1490: 85 09        	sta	<L179+msg_1
  6638 05:1492: A9 FF FF     	lda	#$ffff
  6639 05:1495: 85 0B        	sta	<L179+msg_1+2
  6640                        ;		msg.dest = FX_MSG_DEFAULT;
  6641                        	.line	1429
  6642 05:1497: A9 FF FF     	lda	#$ffff
  6643 05:149A: 85 0D        	sta	<L179+msg_1+4
  6644 05:149C: A9 FF FF     	lda	#$ffff
  6645 05:149F: 85 0F        	sta	<L179+msg_1+6
  6646                        ;		msg.processInfo = processArgs;
  6647                        	.line	1430
  6648 05:14A1: A5 20        	lda	<L178+processArgs_0
  6649 05:14A3: 85 13        	sta	<L179+msg_1+10
  6650 05:14A5: A5 22        	lda	<L178+processArgs_0+2
  6651 05:14A7: 85 15        	sta	<L179+msg_1+12
  6652                        ;		eventProcedure((PFXOSMESSAGE)&msg);
  6653                        	.line	1431
  6654 05:14A9: F4 00 00     	pea	#0
  6655 05:14AC: 18           	clc
  6656 05:14AD: 7B           	tdc
  6657 05:14AE: 69 09 00     	adc	#<L179+msg_1
  6658 05:14B1: 48           	pha
  6659 05:14B2: A6 1E        	ldx	<L178+eventProcedure_0+2
  6660 05:14B4: A5 1C        	lda	<L178+eventProcedure_0
  6661                        	xref	~~~lcal
  6662 05:14B6: 22 xx xx xx  	jsl	~~~lcal
  6663                        ;	}
  6664                        	.line	1432
  6665                        ;	return 0;
  6666                        L10103:
  6667                        	.line	1433
  6668 05:14BA: A9 00 00     	lda	#$0
  6669                        L185:
  6670 05:14BD: A8           	tay
  6671 05:14BE: A5 1A        	lda	<L178+2
  6672 05:14C0: 85 22        	sta	<L178+2+8
  6673 05:14C2: A5 19        	lda	<L178+1
  6674 05:14C4: 85 21        	sta	<L178+1+8
  6675 05:14C6: 2B           	pld
  6676 05:14C7: 3B           	tsc
  6677 05:14C8: 18           	clc
  6678 05:14C9: 69 20 00     	adc	#L178+8
  6679 05:14CC: 1B           	tcs
  6680 05:14CD: 98           	tya
  6681 05:14CE: 6B           	rtl
  6682                        ;}
  6683                        	.line	1434
  6684                        	.endblock	1434
  6685             00000018   L178	equ	24
  6686             00000009   L179	equ	9
  6687 05:14CF:              	ends
  6688                        	efunc
  6689                        	.endfunc	1434,9,24
  Mon Sep 27 2021  9:39                                                Page 135


  6690                        	.line	1434
  6691                        	data
  6692                        L177:
  6693 00:0684: 6B 5F 67 65  	db	$6B,$5F,$67,$65,$74,$65,$76,$65,$6E,$74,
                    $73,$3A,$3A,$40,$69
       00:0688: 74 65 76 65 
       00:068C: 6E 74 73 3A 
       00:0690: 3A 40 69 
  6694 00:0693: 6E 64 65 78  	db	$6E,$64,$65,$78,$3A,$00
       00:0697: 3A 00 
  6695 00:0699:              	ends
  6696                        ;
  6697                        ;int k_unattach_events(FXEventProc eventProcedure,
                    LPVOID processArgs)
  6698                        ;{
  6699                        	.line	1436
  6700                        	.line	1437
  6701                        	EVTMAN
  6702                        	xdef	~~k_unattach_events
  6703                        	func
  6704                        	.function	1437
  6705                        ~~k_unattach_events:
  6706                        	longa	on
  6707                        	longi	on
  6708 05:14CF: 3B           	tsc
  6709 05:14D0: 38           	sec
  6710 05:14D1: E9 18 00     	sbc	#L187
  6711 05:14D4: 1B           	tcs
  6712 05:14D5: 0B           	phd
  6713 05:14D6: 5B           	tcd
  6714             00000004   eventProcedure_0	set	4
  6715             00000008   processArgs_0	set	8
  6716                        	.block	1437
  6717                        ;	FXPROCESSMESSAGE msg;
  6718                        ;
  6719                        ;	int index = LOW_PROC;
  6720                        ;
  6721                        ;	if(eventProcedure!=NULL)
  6722             00000000   msg_1	set	0
  6723             0000000E   index_1	set	14
  6724                        	.sym	msg,0,10,1,112,21
  6725                        	.sym	index,14,5,1,16
  6726                        	.sym	eventProcedure,4,641,6,32
  6727                        	.sym	processArgs,8,129,6,32
  6728 05:14D7: A9 01 00     	lda	#$1
  6729 05:14DA: 85 17        	sta	<L188+index_1
  6730                        	.line	1442
  6731                        ;	{
  6732 05:14DC: A5 1C        	lda	<L187+eventProcedure_0
  6733 05:14DE: 05 1E        	ora	<L187+eventProcedure_0+2
  6734 05:14E0: D0 03        	bne	L190
  6735 05:14E2: 82 95 00     	brl	L10108
  6736                        L190:
  6737                        	.line	1443
  6738                        ;		k_debug_string("k_unattach_events\r\n");
  6739                        	.line	1444
  6740 05:14E5: F4 xx xx     	pea	#^L186
  6741 05:14E8: F4 xx xx     	pea	#<L186
  Mon Sep 27 2021  9:39                                                Page 136


  6742 05:14EB: 22 xx xx xx  	jsl	~~k_debug_string
  6743                        ;		//k_debug_pointer("\tProcess:",processAr
                    gs);
  6744                        ;
  6745                        ;		//while(index < MAX_PROCS && eventProcs[
                    index]!=NULL)
  6746                        ;		for(index=LOW_PROC;index<MAX_PROCS;index
                    ++)
  6747                        	.line	1448
  6748 05:14EF: A9 01 00     	lda	#$1
  6749 05:14F2: 85 17        	sta	<L188+index_1
  6750                        L10111:
  6751                        ;		{
  6752                        	.line	1449
  6753                        ;			if(eventProcs[index] == NULL)
  6754                        	.line	1450
  6755                        ;			{
  6756 05:14F4: A5 17        	lda	<L188+index_1
  6757 05:14F6: 0A           	asl	A
  6758 05:14F7: 0A           	asl	A
  6759 05:14F8: 85 01        	sta	<R0
  6760 05:14FA: 18           	clc
  6761 05:14FB: A9 xx xx     	lda	#<~~eventProcs
  6762 05:14FE: 65 01        	adc	<R0
  6763 05:1500: 85 05        	sta	<R1
  6764 05:1502: B2 05        	lda	(<R1)
  6765 05:1504: A0 02 00     	ldy	#$2
  6766 05:1507: 11 05        	ora	(<R1),Y
  6767 05:1509: F0 03        	beq	L191
  6768 05:150B: 82 28 00     	brl	L10112
  6769                        L191:
  6770                        	.line	1451
  6771                        ;				eventProcs[index] = even
                    tProcedure;
  6772                        	.line	1452
  6773 05:150E: A5 17        	lda	<L188+index_1
  6774 05:1510: 0A           	asl	A
  6775 05:1511: 0A           	asl	A
  6776 05:1512: 85 01        	sta	<R0
  6777 05:1514: 18           	clc
  6778 05:1515: A9 xx xx     	lda	#<~~eventProcs
  6779 05:1518: 65 01        	adc	<R0
  6780 05:151A: 85 05        	sta	<R1
  6781 05:151C: A5 1C        	lda	<L187+eventProcedure_0
  6782 05:151E: 92 05        	sta	(<R1)
  6783 05:1520: A5 1E        	lda	<L187+eventProcedure_0+2
  6784 05:1522: A0 02 00     	ldy	#$2
  6785 05:1525: 91 05        	sta	(<R1),Y
  6786                        ;				k_debug_integer("k_getev
                    ents::@index:",index);
  6787                        	.line	1453
  6788 05:1527: D4 17        	pei	<L188+index_1
  6789 05:1529: F4 xx xx     	pea	#^L186+20
  6790 05:152C: F4 xx xx     	pea	#<L186+20
  6791 05:152F: 22 xx xx xx  	jsl	~~k_debug_integer
  6792                        ;				break;
  6793                        	.line	1454
  6794 05:1533: 82 12 00     	brl	L10110
  Mon Sep 27 2021  9:39                                                Page 137


  6795                        ;			}
  6796                        	.line	1455
  6797                        ;		}
  6798                        L10112:
  6799                        	.line	1456
  6800                        L10109:
  6801 05:1536: E6 17        	inc	<L188+index_1
  6802 05:1538: 38           	sec
  6803 05:1539: A5 17        	lda	<L188+index_1
  6804 05:153B: E9 00 01     	sbc	#<$100
  6805 05:153E: 70 03        	bvs	L192
  6806 05:1540: 49 00 80     	eor	#$8000
  6807                        L192:
  6808 05:1543: 30 03        	bmi	L193
  6809 05:1545: 82 AC FF     	brl	L10111
  6810                        L193:
  6811                        L10110:
  6812                        ;
  6813                        ;		msg.type = FX_UNINIT_MESSAGE;
  6814                        	.line	1458
  6815 05:1548: A9 02 FF     	lda	#$ff02
  6816 05:154B: 85 11        	sta	<L188+msg_1+8
  6817                        ;		msg.src  = FX_MSG_DEFAULT;
  6818                        	.line	1459
  6819 05:154D: A9 FF FF     	lda	#$ffff
  6820 05:1550: 85 09        	sta	<L188+msg_1
  6821 05:1552: A9 FF FF     	lda	#$ffff
  6822 05:1555: 85 0B        	sta	<L188+msg_1+2
  6823                        ;		msg.dest = FX_MSG_DEFAULT;
  6824                        	.line	1460
  6825 05:1557: A9 FF FF     	lda	#$ffff
  6826 05:155A: 85 0D        	sta	<L188+msg_1+4
  6827 05:155C: A9 FF FF     	lda	#$ffff
  6828 05:155F: 85 0F        	sta	<L188+msg_1+6
  6829                        ;		msg.processInfo = processArgs;
  6830                        	.line	1461
  6831 05:1561: A5 20        	lda	<L187+processArgs_0
  6832 05:1563: 85 13        	sta	<L188+msg_1+10
  6833 05:1565: A5 22        	lda	<L187+processArgs_0+2
  6834 05:1567: 85 15        	sta	<L188+msg_1+12
  6835                        ;		eventProcedure((PFXOSMESSAGE)&msg);
  6836                        	.line	1462
  6837 05:1569: F4 00 00     	pea	#0
  6838 05:156C: 18           	clc
  6839 05:156D: 7B           	tdc
  6840 05:156E: 69 09 00     	adc	#<L188+msg_1
  6841 05:1571: 48           	pha
  6842 05:1572: A6 1E        	ldx	<L187+eventProcedure_0+2
  6843 05:1574: A5 1C        	lda	<L187+eventProcedure_0
  6844                        	xref	~~~lcal
  6845 05:1576: 22 xx xx xx  	jsl	~~~lcal
  6846                        ;	}
  6847                        	.line	1463
  6848                        ;	return 0;
  6849                        L10108:
  6850                        	.line	1464
  6851 05:157A: A9 00 00     	lda	#$0
  6852                        L194:
  Mon Sep 27 2021  9:39                                                Page 138


  6853 05:157D: A8           	tay
  6854 05:157E: A5 1A        	lda	<L187+2
  6855 05:1580: 85 22        	sta	<L187+2+8
  6856 05:1582: A5 19        	lda	<L187+1
  6857 05:1584: 85 21        	sta	<L187+1+8
  6858 05:1586: 2B           	pld
  6859 05:1587: 3B           	tsc
  6860 05:1588: 18           	clc
  6861 05:1589: 69 20 00     	adc	#L187+8
  6862 05:158C: 1B           	tcs
  6863 05:158D: 98           	tya
  6864 05:158E: 6B           	rtl
  6865                        ;}
  6866                        	.line	1465
  6867                        	.endblock	1465
  6868             00000018   L187	equ	24
  6869             00000009   L188	equ	9
  6870 05:158F:              	ends
  6871                        	efunc
  6872                        	.endfunc	1465,9,24
  6873                        	.line	1465
  6874                        	data
  6875                        L186:
  6876 00:0699: 6B 5F 75 6E  	db	$6B,$5F,$75,$6E,$61,$74,$74,$61,$63,$68,
                    $5F,$65,$76,$65,$6E
       00:069D: 61 74 74 61 
       00:06A1: 63 68 5F 65 
       00:06A5: 76 65 6E 
  6877 00:06A8: 74 73 0D 0A  	db	$74,$73,$0D,$0A,$00,$6B,$5F,$67,$65,$74,
                    $65,$76,$65,$6E,$74
       00:06AC: 00 6B 5F 67 
       00:06B0: 65 74 65 76 
       00:06B4: 65 6E 74 
  6878 00:06B7: 73 3A 3A 40  	db	$73,$3A,$3A,$40,$69,$6E,$64,$65,$78,$3A,
                    $00
       00:06BB: 69 6E 64 65 
       00:06BF: 78 3A 00 
  6879 00:06C2:              	ends
  6880                        ;
  6881                        ;int k_attach_process_events(FXEventProc eventProc
                    edure,LPVOID processArgs)
  6882                        ;{
  6883                        	.line	1467
  6884                        	.line	1468
  6885                        	EVTMAN
  6886                        	xdef	~~k_attach_process_events
  6887                        	func
  6888                        	.function	1468
  6889                        ~~k_attach_process_events:
  6890                        	longa	on
  6891                        	longi	on
  6892 05:158F: 3B           	tsc
  6893 05:1590: 38           	sec
  6894 05:1591: E9 1C 00     	sbc	#L196
  6895 05:1594: 1B           	tcs
  6896 05:1595: 0B           	phd
  6897 05:1596: 5B           	tcd
  6898             00000004   eventProcedure_0	set	4
  Mon Sep 27 2021  9:39                                                Page 139


  6899             00000008   processArgs_0	set	8
  6900                        	.block	1468
  6901                        ;	FXEVENTPROCESS FAR *fxep = NULL;
  6902                        ;	FXPROCESSMESSAGE msg;
  6903                        ;
  6904                        ;	int index = 0;
  6905                        ;
  6906                        ;	if(eventProcedure!=NULL)
  6907             00000000   fxep_1	set	0
  6908             00000004   msg_1	set	4
  6909             00000012   index_1	set	18
  6910                        	.sym	fxep,0,138,1,32,76
  6911                        	.sym	msg,4,10,1,112,21
  6912                        	.sym	index,18,5,1,16
  6913                        	.sym	eventProcedure,4,641,6,32
  6914                        	.sym	processArgs,8,129,6,32
  6915 05:1597: 64 09        	stz	<L197+fxep_1
  6916 05:1599: 64 0B        	stz	<L197+fxep_1+2
  6917 05:159B: 64 1B        	stz	<L197+index_1
  6918                        	.line	1474
  6919                        ;	{
  6920 05:159D: A5 20        	lda	<L196+eventProcedure_0
  6921 05:159F: 05 22        	ora	<L196+eventProcedure_0+2
  6922 05:15A1: D0 03        	bne	L199
  6923 05:15A3: 82 95 01     	brl	L10113
  6924                        L199:
  6925                        	.line	1475
  6926                        ;		k_debug_string("Enter k_attach_process_e
                    vents\r\n");
  6927                        	.line	1476
  6928 05:15A6: F4 xx xx     	pea	#^L195
  6929 05:15A9: F4 xx xx     	pea	#<L195
  6930 05:15AC: 22 xx xx xx  	jsl	~~k_debug_string
  6931                        ;		k_debug_pointer("\eventProcedure:",event
                    Procedure);
  6932                        	.line	1477
  6933 05:15B0: D4 22        	pei	<L196+eventProcedure_0+2
  6934 05:15B2: D4 20        	pei	<L196+eventProcedure_0
  6935 05:15B4: F4 xx xx     	pea	#^L195+32
  6936 05:15B7: F4 xx xx     	pea	#<L195+32
  6937 05:15BA: 22 xx xx xx  	jsl	~~k_debug_pointer
  6938                        ;		k_debug_pointer("\tProcess:",processArgs
                    );
  6939                        	.line	1478
  6940 05:15BE: D4 26        	pei	<L196+processArgs_0+2
  6941 05:15C0: D4 24        	pei	<L196+processArgs_0
  6942 05:15C2: F4 xx xx     	pea	#^L195+48
  6943 05:15C5: F4 xx xx     	pea	#<L195+48
  6944 05:15C8: 22 xx xx xx  	jsl	~~k_debug_pointer
  6945                        ;
  6946                        ;		for(index=IDLE_PROC;index<MAX_PROCS;inde
                    x++)
  6947                        	.line	1480
  6948 05:15CC: 64 1B        	stz	<L197+index_1
  6949                        L10116:
  6950                        ;		{
  6951                        	.line	1481
  6952                        ;			if(eventProcess[index] == NULL)
  Mon Sep 27 2021  9:39                                                Page 140


  6953                        	.line	1482
  6954                        ;			{
  6955 05:15CE: A5 1B        	lda	<L197+index_1
  6956 05:15D0: 0A           	asl	A
  6957 05:15D1: 0A           	asl	A
  6958 05:15D2: 85 01        	sta	<R0
  6959 05:15D4: 18           	clc
  6960 05:15D5: A9 xx xx     	lda	#<~~eventProcess
  6961 05:15D8: 65 01        	adc	<R0
  6962 05:15DA: 85 05        	sta	<R1
  6963 05:15DC: B2 05        	lda	(<R1)
  6964 05:15DE: A0 02 00     	ldy	#$2
  6965 05:15E1: 11 05        	ora	(<R1),Y
  6966 05:15E3: F0 03        	beq	L200
  6967 05:15E5: 82 58 00     	brl	L10117
  6968                        L200:
  6969                        	.line	1483
  6970                        ;				fxep = (FXEVENTPROCESS F
                    AR *)k_mem_allocate_heap(sizeof(FXEVENTPROCESS));
  6971                        	.line	1484
  6972 05:15E8: F4 00 00     	pea	#^$8
  6973 05:15EB: F4 08 00     	pea	#<$8
  6974 05:15EE: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  6975 05:15F2: 85 09        	sta	<L197+fxep_1
  6976 05:15F4: 86 0B        	stx	<L197+fxep_1+2
  6977                        ;				if(fxep!=NULL)
  6978                        	.line	1485
  6979                        ;				{
  6980 05:15F6: A5 09        	lda	<L197+fxep_1
  6981 05:15F8: 05 0B        	ora	<L197+fxep_1+2
  6982 05:15FA: D0 03        	bne	L201
  6983 05:15FC: 82 3E 00     	brl	L10118
  6984                        L201:
  6985                        	.line	1486
  6986                        ;					eventProcess[ind
                    ex] = fxep;
  6987                        	.line	1487
  6988 05:15FF: A5 1B        	lda	<L197+index_1
  6989 05:1601: 0A           	asl	A
  6990 05:1602: 0A           	asl	A
  6991 05:1603: 85 01        	sta	<R0
  6992 05:1605: 18           	clc
  6993 05:1606: A9 xx xx     	lda	#<~~eventProcess
  6994 05:1609: 65 01        	adc	<R0
  6995 05:160B: 85 05        	sta	<R1
  6996 05:160D: A5 09        	lda	<L197+fxep_1
  6997 05:160F: 92 05        	sta	(<R1)
  6998 05:1611: A5 0B        	lda	<L197+fxep_1+2
  6999 05:1613: A0 02 00     	ldy	#$2
  7000 05:1616: 91 05        	sta	(<R1),Y
  7001                        ;
  7002                        ;					fxep->process = 
                    (PFXPROCESS)processArgs;
  7003                        	.line	1489
  7004 05:1618: A5 24        	lda	<L196+processArgs_0
  7005 05:161A: 87 09        	sta	[<L197+fxep_1]
  7006 05:161C: A5 26        	lda	<L196+processArgs_0+2
  7007 05:161E: A0 02 00     	ldy	#$2
  Mon Sep 27 2021  9:39                                                Page 141


  7008 05:1621: 97 09        	sta	[<L197+fxep_1],Y
  7009                        ;					fxep->eventProc 
                    = eventProcedure;
  7010                        	.line	1490
  7011 05:1623: A5 20        	lda	<L196+eventProcedure_0
  7012 05:1625: A0 04 00     	ldy	#$4
  7013 05:1628: 97 09        	sta	[<L197+fxep_1],Y
  7014 05:162A: A5 22        	lda	<L196+eventProcedure_0+2
  7015 05:162C: A0 06 00     	ldy	#$6
  7016 05:162F: 97 09        	sta	[<L197+fxep_1],Y
  7017                        ;
  7018                        ;					k_debug_integer(
                    "k_attach_process_events::@index:",index);
  7019                        	.line	1492
  7020 05:1631: D4 1B        	pei	<L197+index_1
  7021 05:1633: F4 xx xx     	pea	#^L195+58
  7022 05:1636: F4 xx xx     	pea	#<L195+58
  7023 05:1639: 22 xx xx xx  	jsl	~~k_debug_integer
  7024                        ;				}
  7025                        	.line	1493
  7026                        ;				break;
  7027                        L10118:
  7028                        	.line	1494
  7029 05:163D: 82 12 00     	brl	L10115
  7030                        ;			}
  7031                        	.line	1495
  7032                        ;		}
  7033                        L10117:
  7034                        	.line	1496
  7035                        L10114:
  7036 05:1640: E6 1B        	inc	<L197+index_1
  7037 05:1642: 38           	sec
  7038 05:1643: A5 1B        	lda	<L197+index_1
  7039 05:1645: E9 00 01     	sbc	#<$100
  7040 05:1648: 70 03        	bvs	L202
  7041 05:164A: 49 00 80     	eor	#$8000
  7042                        L202:
  7043 05:164D: 30 03        	bmi	L203
  7044 05:164F: 82 7C FF     	brl	L10116
  7045                        L203:
  7046                        L10115:
  7047                        ;
  7048                        ;		if(index < MAX_PROCS)
  7049                        	.line	1498
  7050                        ;		{
  7051 05:1652: 38           	sec
  7052 05:1653: A5 1B        	lda	<L197+index_1
  7053 05:1655: E9 00 01     	sbc	#<$100
  7054 05:1658: 70 03        	bvs	L204
  7055 05:165A: 49 00 80     	eor	#$8000
  7056                        L204:
  7057 05:165D: 10 03        	bpl	L205
  7058 05:165F: 82 C5 00     	brl	L10119
  7059                        L205:
  7060                        	.line	1499
  7061                        ;			msg.type = FX_INIT_MESSAGE;
  7062                        	.line	1500
  7063 05:1662: A9 01 FF     	lda	#$ff01
  Mon Sep 27 2021  9:39                                                Page 142


  7064 05:1665: 85 15        	sta	<L197+msg_1+8
  7065                        ;			msg.processInfo = processArgs;
  7066                        	.line	1501
  7067 05:1667: A5 24        	lda	<L196+processArgs_0
  7068 05:1669: 85 17        	sta	<L197+msg_1+10
  7069 05:166B: A5 26        	lda	<L196+processArgs_0+2
  7070 05:166D: 85 19        	sta	<L197+msg_1+12
  7071                        ;
  7072                        ;			k_debug_string("k_getevents @1\r
                    \n");
  7073                        	.line	1503
  7074 05:166F: F4 xx xx     	pea	#^L195+91
  7075 05:1672: F4 xx xx     	pea	#<L195+91
  7076 05:1675: 22 xx xx xx  	jsl	~~k_debug_string
  7077                        ;
  7078                        ;			if(eventProcess[index]->process!
                    =NULL)
  7079                        	.line	1505
  7080                        ;				k_exec_set_current_proce
                    ss(eventProcess[index]->process);
  7081 05:1679: A5 1B        	lda	<L197+index_1
  7082 05:167B: 0A           	asl	A
  7083 05:167C: 0A           	asl	A
  7084 05:167D: 85 01        	sta	<R0
  7085 05:167F: 18           	clc
  7086 05:1680: A9 xx xx     	lda	#<~~eventProcess
  7087 05:1683: 65 01        	adc	<R0
  7088 05:1685: 85 05        	sta	<R1
  7089 05:1687: B2 05        	lda	(<R1)
  7090 05:1689: 85 01        	sta	<R0
  7091 05:168B: A0 02 00     	ldy	#$2
  7092 05:168E: B1 05        	lda	(<R1),Y
  7093 05:1690: 85 03        	sta	<R0+2
  7094 05:1692: A7 01        	lda	[<R0]
  7095 05:1694: A0 02 00     	ldy	#$2
  7096 05:1697: 17 01        	ora	[<R0],Y
  7097 05:1699: D0 03        	bne	L206
  7098 05:169B: 82 26 00     	brl	L10120
  7099                        L206:
  7100                        	.line	1506
  7101 05:169E: A5 1B        	lda	<L197+index_1
  7102 05:16A0: 0A           	asl	A
  7103 05:16A1: 0A           	asl	A
  7104 05:16A2: 85 01        	sta	<R0
  7105 05:16A4: 18           	clc
  7106 05:16A5: A9 xx xx     	lda	#<~~eventProcess
  7107 05:16A8: 65 01        	adc	<R0
  7108 05:16AA: 85 05        	sta	<R1
  7109 05:16AC: B2 05        	lda	(<R1)
  7110 05:16AE: 85 01        	sta	<R0
  7111 05:16B0: A0 02 00     	ldy	#$2
  7112 05:16B3: B1 05        	lda	(<R1),Y
  7113 05:16B5: 85 03        	sta	<R0+2
  7114 05:16B7: A0 02 00     	ldy	#$2
  7115 05:16BA: B7 01        	lda	[<R0],Y
  7116 05:16BC: 48           	pha
  7117 05:16BD: A7 01        	lda	[<R0]
  7118 05:16BF: 48           	pha
  Mon Sep 27 2021  9:39                                                Page 143


  7119 05:16C0: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  7120                        ;
  7121                        ;			//k_debug_integer("k_getevents @
                    2:",index);
  7122                        ;			//k_debug_pointer("k_getevents @
                    2:",eventProcess[index]->eventProc);
  7123                        ;
  7124                        ;			if(eventProcess[index]->eventPro
                    c)
  7125                        L10120:
  7126                        	.line	1511
  7127                        ;				eventProcess[index]->eve
                    ntProc((PFXOSMESSAGE)&msg);
  7128 05:16C4: A5 1B        	lda	<L197+index_1
  7129 05:16C6: 0A           	asl	A
  7130 05:16C7: 0A           	asl	A
  7131 05:16C8: 85 01        	sta	<R0
  7132 05:16CA: 18           	clc
  7133 05:16CB: A9 xx xx     	lda	#<~~eventProcess
  7134 05:16CE: 65 01        	adc	<R0
  7135 05:16D0: 85 05        	sta	<R1
  7136 05:16D2: B2 05        	lda	(<R1)
  7137 05:16D4: 85 01        	sta	<R0
  7138 05:16D6: A0 02 00     	ldy	#$2
  7139 05:16D9: B1 05        	lda	(<R1),Y
  7140 05:16DB: 85 03        	sta	<R0+2
  7141 05:16DD: A0 04 00     	ldy	#$4
  7142 05:16E0: B7 01        	lda	[<R0],Y
  7143 05:16E2: A0 06 00     	ldy	#$6
  7144 05:16E5: 17 01        	ora	[<R0],Y
  7145 05:16E7: D0 03        	bne	L207
  7146 05:16E9: 82 31 00     	brl	L10121
  7147                        L207:
  7148                        	.line	1512
  7149 05:16EC: F4 00 00     	pea	#0
  7150 05:16EF: 18           	clc
  7151 05:16F0: 7B           	tdc
  7152 05:16F1: 69 0D 00     	adc	#<L197+msg_1
  7153 05:16F4: 48           	pha
  7154 05:16F5: A5 1B        	lda	<L197+index_1
  7155 05:16F7: 0A           	asl	A
  7156 05:16F8: 0A           	asl	A
  7157 05:16F9: 85 01        	sta	<R0
  7158 05:16FB: 18           	clc
  7159 05:16FC: A9 xx xx     	lda	#<~~eventProcess
  7160 05:16FF: 65 01        	adc	<R0
  7161 05:1701: 85 05        	sta	<R1
  7162 05:1703: B2 05        	lda	(<R1)
  7163 05:1705: 85 01        	sta	<R0
  7164 05:1707: A0 02 00     	ldy	#$2
  7165 05:170A: B1 05        	lda	(<R1),Y
  7166 05:170C: 85 03        	sta	<R0+2
  7167 05:170E: A0 06 00     	ldy	#$6
  7168 05:1711: B7 01        	lda	[<R0],Y
  7169 05:1713: AA           	tax
  7170 05:1714: A0 04 00     	ldy	#$4
  7171 05:1717: B7 01        	lda	[<R0],Y
  7172                        	xref	~~~lcal
  Mon Sep 27 2021  9:39                                                Page 144


  7173 05:1719: 22 xx xx xx  	jsl	~~~lcal
  7174                        ;
  7175                        ;			//k_debug_string("k_getevents @3
                    \r\n");
  7176                        ;
  7177                        ;			k_exec_set_current_process(NULL)
                    ;
  7178                        L10121:
  7179                        	.line	1516
  7180 05:171D: F4 00 00     	pea	#^$0
  7181 05:1720: F4 00 00     	pea	#<$0
  7182 05:1723: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  7183                        ;		}
  7184                        	.line	1517
  7185                        ;
  7186                        ;		k_debug_pointer("k_attach_process_events
                    ::k_exec_set_current_process:",k_exec_get_current_process())
                    ;
  7187                        L10119:
  7188                        	.line	1519
  7189 05:1727: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7190 05:172B: 85 01        	sta	<R0
  7191 05:172D: 86 03        	stx	<R0+2
  7192 05:172F: DA           	phx
  7193 05:1730: 48           	pha
  7194 05:1731: F4 xx xx     	pea	#^L195+108
  7195 05:1734: F4 xx xx     	pea	#<L195+108
  7196 05:1737: 22 xx xx xx  	jsl	~~k_debug_pointer
  7197                        ;	}
  7198                        	.line	1520
  7199                        ;	return 0;
  7200                        L10113:
  7201                        	.line	1521
  7202 05:173B: A9 00 00     	lda	#$0
  7203                        L208:
  7204 05:173E: A8           	tay
  7205 05:173F: A5 1E        	lda	<L196+2
  7206 05:1741: 85 26        	sta	<L196+2+8
  7207 05:1743: A5 1D        	lda	<L196+1
  7208 05:1745: 85 25        	sta	<L196+1+8
  7209 05:1747: 2B           	pld
  7210 05:1748: 3B           	tsc
  7211 05:1749: 18           	clc
  7212 05:174A: 69 24 00     	adc	#L196+8
  7213 05:174D: 1B           	tcs
  7214 05:174E: 98           	tya
  7215 05:174F: 6B           	rtl
  7216                        ;}
  7217                        	.line	1522
  7218                        	.endblock	1522
  7219             0000001C   L196	equ	28
  7220             00000009   L197	equ	9
  7221 05:1750:              	ends
  7222                        	efunc
  7223                        	.endfunc	1522,9,28
  7224                        	.line	1522
  7225                        	data
  7226                        L195:
  Mon Sep 27 2021  9:39                                                Page 145


  7227 00:06C2: 45 6E 74 65  	db	$45,$6E,$74,$65,$72,$20,$6B,$5F,$61,$74,
                    $74,$61,$63,$68,$5F
       00:06C6: 72 20 6B 5F 
       00:06CA: 61 74 74 61 
       00:06CE: 63 68 5F 
  7228 00:06D1: 70 72 6F 63  	db	$70,$72,$6F,$63,$65,$73,$73,$5F,$65,$76,
                    $65,$6E,$74,$73,$0D
       00:06D5: 65 73 73 5F 
       00:06D9: 65 76 65 6E 
       00:06DD: 74 73 0D 
  7229 00:06E0: 0A 00 65 76  	db	$0A,$00,$65,$76,$65,$6E,$74,$50,$72,$6F,
                    $63,$65,$64,$75,$72
       00:06E4: 65 6E 74 50 
       00:06E8: 72 6F 63 65 
       00:06EC: 64 75 72 
  7230 00:06EF: 65 3A 00 09  	db	$65,$3A,$00,$09,$50,$72,$6F,$63,$65,$73,
                    $73,$3A,$00,$6B,$5F
       00:06F3: 50 72 6F 63 
       00:06F7: 65 73 73 3A 
       00:06FB: 00 6B 5F 
  7231 00:06FE: 61 74 74 61  	db	$61,$74,$74,$61,$63,$68,$5F,$70,$72,$6F,
                    $63,$65,$73,$73,$5F
       00:0702: 63 68 5F 70 
       00:0706: 72 6F 63 65 
       00:070A: 73 73 5F 
  7232 00:070D: 65 76 65 6E  	db	$65,$76,$65,$6E,$74,$73,$3A,$3A,$40,$69,
                    $6E,$64,$65,$78,$3A
       00:0711: 74 73 3A 3A 
       00:0715: 40 69 6E 64 
       00:0719: 65 78 3A 
  7233 00:071C: 00 6B 5F 67  	db	$00,$6B,$5F,$67,$65,$74,$65,$76,$65,$6E,
                    $74,$73,$20,$40,$31
       00:0720: 65 74 65 76 
       00:0724: 65 6E 74 73 
       00:0728: 20 40 31 
  7234 00:072B: 0D 0A 00 6B  	db	$0D,$0A,$00,$6B,$5F,$61,$74,$74,$61,$63,
                    $68,$5F,$70,$72,$6F
       00:072F: 5F 61 74 74 
       00:0733: 61 63 68 5F 
       00:0737: 70 72 6F 
  7235 00:073A: 63 65 73 73  	db	$63,$65,$73,$73,$5F,$65,$76,$65,$6E,$74,
                    $73,$3A,$3A,$6B,$5F
       00:073E: 5F 65 76 65 
       00:0742: 6E 74 73 3A 
       00:0746: 3A 6B 5F 
  7236 00:0749: 65 78 65 63  	db	$65,$78,$65,$63,$5F,$73,$65,$74,$5F,$63,
                    $75,$72,$72,$65,$6E
       00:074D: 5F 73 65 74 
       00:0751: 5F 63 75 72 
       00:0755: 72 65 6E 
  7237 00:0758: 74 5F 70 72  	db	$74,$5F,$70,$72,$6F,$63,$65,$73,$73,$3A,
                    $00
       00:075C: 6F 63 65 73 
       00:0760: 73 3A 00 
  7238 00:0763:              	ends
  7239                        ;
  7240                        ;LPVOID k_alloc_message_arg(LPVOID data,UINT size)
  7241                        ;{
  Mon Sep 27 2021  9:39                                                Page 146


  7242                        	.line	1524
  7243                        	.line	1525
  7244                        	EVTMAN
  7245                        	xdef	~~k_alloc_message_arg
  7246                        	func
  7247                        	.function	1525
  7248                        ~~k_alloc_message_arg:
  7249                        	longa	on
  7250                        	longi	on
  7251 05:1750: 3B           	tsc
  7252 05:1751: 38           	sec
  7253 05:1752: E9 08 00     	sbc	#L210
  7254 05:1755: 1B           	tcs
  7255 05:1756: 0B           	phd
  7256 05:1757: 5B           	tcd
  7257             00000004   data_0	set	4
  7258             00000008   size_0	set	8
  7259                        	.block	1525
  7260                        ;	LPVOID ptr = NULL;
  7261                        ;
  7262                        ;	ptr = k_mem_allocate_heap(size);
  7263             00000000   ptr_1	set	0
  7264                        	.sym	ptr,0,129,1,32
  7265                        	.sym	data,4,129,6,32
  7266                        	.sym	size,8,16,6,16
  7267 05:1758: 64 05        	stz	<L211+ptr_1
  7268 05:175A: 64 07        	stz	<L211+ptr_1+2
  7269                        	.line	1528
  7270 05:175C: A5 10        	lda	<L210+size_0
  7271 05:175E: 85 01        	sta	<R0
  7272 05:1760: 64 03        	stz	<R0+2
  7273 05:1762: D4 03        	pei	<R0+2
  7274 05:1764: D4 01        	pei	<R0
  7275 05:1766: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7276 05:176A: 85 05        	sta	<L211+ptr_1
  7277 05:176C: 86 07        	stx	<L211+ptr_1+2
  7278                        ;	if(ptr!=NULL)
  7279                        	.line	1529
  7280                        ;	{
  7281 05:176E: A5 05        	lda	<L211+ptr_1
  7282 05:1770: 05 07        	ora	<L211+ptr_1+2
  7283 05:1772: D0 03        	bne	L213
  7284 05:1774: 82 0E 00     	brl	L10122
  7285                        L213:
  7286                        	.line	1530
  7287                        ;		memcpy(ptr,data,size);
  7288                        	.line	1531
  7289 05:1777: D4 10        	pei	<L210+size_0
  7290 05:1779: D4 0E        	pei	<L210+data_0+2
  7291 05:177B: D4 0C        	pei	<L210+data_0
  7292 05:177D: D4 07        	pei	<L211+ptr_1+2
  7293 05:177F: D4 05        	pei	<L211+ptr_1
  7294 05:1781: 22 xx xx xx  	jsl	~~memcpy
  7295                        ;	}
  7296                        	.line	1532
  7297                        ;	return ptr;
  7298                        L10122:
  7299                        	.line	1533
  Mon Sep 27 2021  9:39                                                Page 147


  7300 05:1785: A6 07        	ldx	<L211+ptr_1+2
  7301 05:1787: A5 05        	lda	<L211+ptr_1
  7302                        L214:
  7303 05:1789: A8           	tay
  7304 05:178A: A5 0A        	lda	<L210+2
  7305 05:178C: 85 10        	sta	<L210+2+6
  7306 05:178E: A5 09        	lda	<L210+1
  7307 05:1790: 85 0F        	sta	<L210+1+6
  7308 05:1792: 2B           	pld
  7309 05:1793: 3B           	tsc
  7310 05:1794: 18           	clc
  7311 05:1795: 69 0E 00     	adc	#L210+6
  7312 05:1798: 1B           	tcs
  7313 05:1799: 98           	tya
  7314 05:179A: 6B           	rtl
  7315                        ;}
  7316                        	.line	1534
  7317                        	.endblock	1534
  7318             00000008   L210	equ	8
  7319             00000005   L211	equ	5
  7320 05:179B:              	ends
  7321                        	efunc
  7322                        	.endfunc	1534,5,8
  7323                        	.line	1534
  7324                        ;
  7325                        ;VOID k_dealloc_message_arg(LPVOID data)
  7326                        ;{
  7327                        	.line	1536
  7328                        	.line	1537
  7329                        	EVTMAN
  7330                        	xdef	~~k_dealloc_message_arg
  7331                        	func
  7332                        	.function	1537
  7333                        ~~k_dealloc_message_arg:
  7334                        	longa	on
  7335                        	longi	on
  7336 05:179B: 3B           	tsc
  7337 05:179C: 38           	sec
  7338 05:179D: E9 00 00     	sbc	#L215
  7339 05:17A0: 1B           	tcs
  7340 05:17A1: 0B           	phd
  7341 05:17A2: 5B           	tcd
  7342             00000004   data_0	set	4
  7343                        	.block	1537
  7344                        ;	if(data!=NULL)
  7345                        	.sym	data,4,129,6,32
  7346                        	.line	1538
  7347                        ;		k_mem_deallocate_heap(data);
  7348 05:17A3: A5 04        	lda	<L215+data_0
  7349 05:17A5: 05 06        	ora	<L215+data_0+2
  7350 05:17A7: D0 03        	bne	L218
  7351 05:17A9: 82 0B 00     	brl	L10123
  7352                        L218:
  7353                        	.line	1539
  7354 05:17AC: D4 06        	pei	<L215+data_0+2
  7355 05:17AE: D4 04        	pei	<L215+data_0
  7356 05:17B0: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  7357                        ;	else
  Mon Sep 27 2021  9:39                                                Page 148


  7358 05:17B4: 82 19 00     	brl	L10124
  7359                        L10123:
  7360                        ;		k_exec_throw_exception((LPVOID)k_dealloc
                    _message_arg,0x00010001,"Dealloc of NULL reference",-1);
  7361                        	.line	1541
  7362 05:17B7: F4 FF FF     	pea	#<$ffffffff
  7363 05:17BA: F4 xx xx     	pea	#^L209
  7364 05:17BD: F4 xx xx     	pea	#<L209
  7365 05:17C0: F4 01 00     	pea	#^$10001
  7366 05:17C3: F4 01 00     	pea	#<$10001
  7367 05:17C6: F4 05 00     	pea	#^~~k_dealloc_message_arg
  7368 05:17C9: F4 9B 17     	pea	#<~~k_dealloc_message_arg
  7369 05:17CC: 22 xx xx xx  	jsl	~~k_exec_throw_exception
  7370                        L10124:
  7371                        ;}
  7372                        	.line	1542
  7373                        L219:
  7374 05:17D0: A5 02        	lda	<L215+2
  7375 05:17D2: 85 06        	sta	<L215+2+4
  7376 05:17D4: A5 01        	lda	<L215+1
  7377 05:17D6: 85 05        	sta	<L215+1+4
  7378 05:17D8: 2B           	pld
  7379 05:17D9: 3B           	tsc
  7380 05:17DA: 18           	clc
  7381 05:17DB: 69 04 00     	adc	#L215+4
  7382 05:17DE: 1B           	tcs
  7383 05:17DF: 6B           	rtl
  7384                        	.endblock	1542
  7385             00000000   L215	equ	0
  7386             00000001   L216	equ	1
  7387 05:17E0:              	ends
  7388                        	efunc
  7389                        	.endfunc	1542,1,0
  7390                        	.line	1542
  7391                        	data
  7392                        L209:
  7393 00:0763: 44 65 61 6C  	db	$44,$65,$61,$6C,$6C,$6F,$63,$20,$6F,$66,
                    $20,$4E,$55,$4C,$4C
       00:0767: 6C 6F 63 20 
       00:076B: 6F 66 20 4E 
       00:076F: 55 4C 4C 
  7394 00:0772: 20 72 65 66  	db	$20,$72,$65,$66,$65,$72,$65,$6E,$63,$65,
                    $00
       00:0776: 65 72 65 6E 
       00:077A: 63 65 00 
  7395 00:077D:              	ends
  7396                        ;
  7397                        ;
  7398                        ;BOOL k_send_message(LPVOID queueName,MSGTYPE msgT
                    ype,LPVOID pmsgData,UINT size)
  7399                        ;{
  7400                        	.line	1545
  7401                        	.line	1546
  7402                        	EVTMAN
  7403                        	xdef	~~k_send_message
  7404                        	func
  7405                        	.function	1546
  7406                        ~~k_send_message:
  Mon Sep 27 2021  9:39                                                Page 149


  7407                        	longa	on
  7408                        	longi	on
  7409 05:17E0: 3B           	tsc
  7410 05:17E1: 38           	sec
  7411 05:17E2: E9 09 00     	sbc	#L221
  7412 05:17E5: 1B           	tcs
  7413 05:17E6: 0B           	phd
  7414 05:17E7: 5B           	tcd
  7415             00000004   queueName_0	set	4
  7416             00000008   msgType_0	set	8
  7417             0000000A   pmsgData_0	set	10
  7418             0000000E   size_0	set	14
  7419                        	.block	1546
  7420                        ;	BOOL bRet = FALSE;
  7421                        ;	PFXOSMESSAGE pmsg = NULL;
  7422                        ;
  7423                        ;	//k_debug_integer("k_send_message::msgType:",msg
                    Type);
  7424                        ;
  7425                        ;	pmsg = (PFXOSMESSAGE)k_mem_allocate_heap(sizeof(
                    FXOSMESSAGE));
  7426             00000000   bRet_1	set	0
  7427             00000001   pmsg_1	set	1
  7428                        	.sym	bRet,0,14,1,8
  7429                        	.sym	pmsg,1,138,1,32,16
  7430                        	.sym	queueName,4,129,6,32
  7431                        	.sym	msgType,8,16,6,16
  7432                        	.sym	pmsgData,10,129,6,32
  7433                        	.sym	size,14,16,6,16
  7434 05:17E8: E2 20        	sep	#$20
  7435                        	longa	off
  7436 05:17EA: 64 05        	stz	<L222+bRet_1
  7437 05:17EC: C2 20        	rep	#$20
  7438                        	longa	on
  7439 05:17EE: 64 06        	stz	<L222+pmsg_1
  7440 05:17F0: 64 08        	stz	<L222+pmsg_1+2
  7441                        	.line	1552
  7442 05:17F2: F4 00 00     	pea	#^$27
  7443 05:17F5: F4 27 00     	pea	#<$27
  7444 05:17F8: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7445 05:17FC: 85 06        	sta	<L222+pmsg_1
  7446 05:17FE: 86 08        	stx	<L222+pmsg_1+2
  7447                        ;	if(pmsg)
  7448                        	.line	1553
  7449                        ;	{
  7450 05:1800: A5 06        	lda	<L222+pmsg_1
  7451 05:1802: 05 08        	ora	<L222+pmsg_1+2
  7452 05:1804: D0 03        	bne	L224
  7453 05:1806: 82 F0 00     	brl	L10125
  7454                        L224:
  7455                        	.line	1554
  7456                        ;		pmsg->type = msgType;
  7457                        	.line	1555
  7458 05:1809: A5 11        	lda	<L221+msgType_0
  7459 05:180B: A0 08 00     	ldy	#$8
  7460 05:180E: 97 06        	sta	[<L222+pmsg_1],Y
  7461                        ;		pmsg->pheap = NULL;
  7462                        	.line	1556
  Mon Sep 27 2021  9:39                                                Page 150


  7463 05:1810: A9 00 00     	lda	#$0
  7464 05:1813: A0 0E 00     	ldy	#$e
  7465 05:1816: 97 06        	sta	[<L222+pmsg_1],Y
  7466 05:1818: A9 00 00     	lda	#$0
  7467 05:181B: A0 10 00     	ldy	#$10
  7468 05:181E: 97 06        	sta	[<L222+pmsg_1],Y
  7469                        ;		pmsg->src  = k_exec_get_current_process(
                    )->procId;
  7470                        	.line	1557
  7471 05:1820: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7472 05:1824: 85 01        	sta	<R0
  7473 05:1826: 86 03        	stx	<R0+2
  7474 05:1828: A0 02 00     	ldy	#$2
  7475 05:182B: B7 01        	lda	[<R0],Y
  7476 05:182D: 87 06        	sta	[<L222+pmsg_1]
  7477 05:182F: A0 04 00     	ldy	#$4
  7478 05:1832: B7 01        	lda	[<R0],Y
  7479 05:1834: A0 02 00     	ldy	#$2
  7480 05:1837: 97 06        	sta	[<L222+pmsg_1],Y
  7481                        ;		pmsg->dest = FX_MSG_DEFAULT;
  7482                        	.line	1558
  7483 05:1839: A9 FF FF     	lda	#$ffff
  7484 05:183C: A0 04 00     	ldy	#$4
  7485 05:183F: 97 06        	sta	[<L222+pmsg_1],Y
  7486 05:1841: A9 FF FF     	lda	#$ffff
  7487 05:1844: A0 06 00     	ldy	#$6
  7488 05:1847: 97 06        	sta	[<L222+pmsg_1],Y
  7489                        ;
  7490                        ;		if(queueName)
  7491                        	.line	1560
  7492                        ;		{
  7493 05:1849: A5 0D        	lda	<L221+queueName_0
  7494 05:184B: 05 0F        	ora	<L221+queueName_0+2
  7495 05:184D: D0 03        	bne	L225
  7496 05:184F: 82 24 00     	brl	L10126
  7497                        L225:
  7498                        	.line	1561
  7499                        ;			pmsg->dest = ((PFXPROCESS)queueN
                    ame)->procId;
  7500                        	.line	1562
  7501 05:1852: A0 02 00     	ldy	#$2
  7502 05:1855: B7 0D        	lda	[<L221+queueName_0],Y
  7503 05:1857: A0 04 00     	ldy	#$4
  7504 05:185A: 97 06        	sta	[<L222+pmsg_1],Y
  7505 05:185C: A0 04 00     	ldy	#$4
  7506 05:185F: B7 0D        	lda	[<L221+queueName_0],Y
  7507 05:1861: A0 06 00     	ldy	#$6
  7508 05:1864: 97 06        	sta	[<L222+pmsg_1],Y
  7509                        ;			k_debug_integer("k_send_message:
                    :DESTINATION:",pmsg->dest);
  7510                        	.line	1563
  7511 05:1866: A0 04 00     	ldy	#$4
  7512 05:1869: B7 06        	lda	[<L222+pmsg_1],Y
  7513 05:186B: 48           	pha
  7514 05:186C: F4 xx xx     	pea	#^L220
  7515 05:186F: F4 xx xx     	pea	#<L220
  7516 05:1872: 22 xx xx xx  	jsl	~~k_debug_integer
  7517                        ;		}
  Mon Sep 27 2021  9:39                                                Page 151


  7518                        	.line	1564
  7519                        ;
  7520                        ;		if(size == -1)
  7521                        L10126:
  7522                        	.line	1566
  7523                        ;		{
  7524 05:1876: A5 17        	lda	<L221+size_0
  7525 05:1878: C9 FF FF     	cmp	#<$ffffffff
  7526 05:187B: F0 03        	beq	L226
  7527 05:187D: 82 27 00     	brl	L10127
  7528                        L226:
  7529                        	.line	1567
  7530                        ;			pmsg->pheap = pmsgData;
  7531                        	.line	1568
  7532 05:1880: A5 13        	lda	<L221+pmsgData_0
  7533 05:1882: A0 0E 00     	ldy	#$e
  7534 05:1885: 97 06        	sta	[<L222+pmsg_1],Y
  7535 05:1887: A5 15        	lda	<L221+pmsgData_0+2
  7536 05:1889: A0 10 00     	ldy	#$10
  7537 05:188C: 97 06        	sta	[<L222+pmsg_1],Y
  7538                        ;			k_debug_pointer("k_send_message:
                    :SPECIALDATA:",pmsg->pheap);
  7539                        	.line	1569
  7540 05:188E: A0 10 00     	ldy	#$10
  7541 05:1891: B7 06        	lda	[<L222+pmsg_1],Y
  7542 05:1893: 48           	pha
  7543 05:1894: A0 0E 00     	ldy	#$e
  7544 05:1897: B7 06        	lda	[<L222+pmsg_1],Y
  7545 05:1899: 48           	pha
  7546 05:189A: F4 xx xx     	pea	#^L220+29
  7547 05:189D: F4 xx xx     	pea	#<L220+29
  7548 05:18A0: 22 xx xx xx  	jsl	~~k_debug_pointer
  7549                        ;		}
  7550                        	.line	1570
  7551                        ;		else
  7552 05:18A4: 82 42 00     	brl	L10128
  7553                        L10127:
  7554                        ;		{
  7555                        	.line	1572
  7556                        ;			if(size > MAX_FXMSG_DATA)
  7557                        	.line	1573
  7558                        ;				size = MAX_FXMSG_DATA;
  7559 05:18A7: A9 10 00     	lda	#$10
  7560 05:18AA: C5 17        	cmp	<L221+size_0
  7561 05:18AC: 90 03        	bcc	L227
  7562 05:18AE: 82 05 00     	brl	L10129
  7563                        L227:
  7564                        	.line	1574
  7565 05:18B1: A9 10 00     	lda	#$10
  7566 05:18B4: 85 17        	sta	<L221+size_0
  7567                        ;
  7568                        ;			if(pmsgData)
  7569                        L10129:
  7570                        	.line	1576
  7571                        ;				pmsg->pheap = k_alloc_me
                    ssage_arg(pmsgData,size);
  7572 05:18B6: A5 13        	lda	<L221+pmsgData_0
  7573 05:18B8: 05 15        	ora	<L221+pmsgData_0+2
  Mon Sep 27 2021  9:39                                                Page 152


  7574 05:18BA: D0 03        	bne	L228
  7575 05:18BC: 82 1F 00     	brl	L10130
  7576                        L228:
  7577                        	.line	1577
  7578 05:18BF: D4 17        	pei	<L221+size_0
  7579 05:18C1: D4 15        	pei	<L221+pmsgData_0+2
  7580 05:18C3: D4 13        	pei	<L221+pmsgData_0
  7581 05:18C5: 22 50 17 05  	jsl	~~k_alloc_message_arg
  7582 05:18C9: 85 01        	sta	<R0
  7583 05:18CB: 86 03        	stx	<R0+2
  7584 05:18CD: A5 01        	lda	<R0
  7585 05:18CF: A0 0E 00     	ldy	#$e
  7586 05:18D2: 97 06        	sta	[<L222+pmsg_1],Y
  7587 05:18D4: A5 03        	lda	<R0+2
  7588 05:18D6: A0 10 00     	ldy	#$10
  7589 05:18D9: 97 06        	sta	[<L222+pmsg_1],Y
  7590                        ;			else
  7591 05:18DB: 82 0B 00     	brl	L10131
  7592                        L10130:
  7593                        ;				pmsg->data[0] = 0;
  7594                        	.line	1579
  7595 05:18DE: E2 20        	sep	#$20
  7596                        	longa	off
  7597 05:18E0: A9 00        	lda	#$0
  7598 05:18E2: A0 16 00     	ldy	#$16
  7599 05:18E5: 97 06        	sta	[<L222+pmsg_1],Y
  7600 05:18E7: C2 20        	rep	#$20
  7601                        	longa	on
  7602                        L10131:
  7603                        ;		}
  7604                        	.line	1580
  7605                        L10128:
  7606                        ;
  7607                        ;		k_enqueue_with_lock(_k_eventQueue,pmsg);
  7608                        	.line	1582
  7609 05:18E9: D4 08        	pei	<L222+pmsg_1+2
  7610 05:18EB: D4 06        	pei	<L222+pmsg_1
  7611 05:18ED: AD xx xx     	lda	|~~_k_eventQueue+2
  7612 05:18F0: 48           	pha
  7613 05:18F1: AD xx xx     	lda	|~~_k_eventQueue
  7614 05:18F4: 48           	pha
  7615 05:18F5: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  7616                        ;	}
  7617                        	.line	1583
  7618                        ;
  7619                        ;
  7620                        ;	//k_debug_string("k_send_message::exit\r\n");
  7621                        ;
  7622                        ;	return bRet;
  7623                        L10125:
  7624                        	.line	1588
  7625 05:18F9: A5 05        	lda	<L222+bRet_1
  7626 05:18FB: 29 FF 00     	and	#$ff
  7627                        L229:
  7628 05:18FE: A8           	tay
  7629 05:18FF: A5 0B        	lda	<L221+2
  7630 05:1901: 85 17        	sta	<L221+2+12
  7631 05:1903: A5 0A        	lda	<L221+1
  Mon Sep 27 2021  9:39                                                Page 153


  7632 05:1905: 85 16        	sta	<L221+1+12
  7633 05:1907: 2B           	pld
  7634 05:1908: 3B           	tsc
  7635 05:1909: 18           	clc
  7636 05:190A: 69 15 00     	adc	#L221+12
  7637 05:190D: 1B           	tcs
  7638 05:190E: 98           	tya
  7639 05:190F: 6B           	rtl
  7640                        ;}
  7641                        	.line	1589
  7642                        	.endblock	1589
  7643             00000009   L221	equ	9
  7644             00000005   L222	equ	5
  7645 05:1910:              	ends
  7646                        	efunc
  7647                        	.endfunc	1589,5,9
  7648                        	.line	1589
  7649                        	data
  7650                        L220:
  7651 00:077D: 6B 5F 73 65  	db	$6B,$5F,$73,$65,$6E,$64,$5F,$6D,$65,$73,
                    $73,$61,$67,$65,$3A
       00:0781: 6E 64 5F 6D 
       00:0785: 65 73 73 61 
       00:0789: 67 65 3A 
  7652 00:078C: 3A 44 45 53  	db	$3A,$44,$45,$53,$54,$49,$4E,$41,$54,$49,
                    $4F,$4E,$3A,$00,$6B
       00:0790: 54 49 4E 41 
       00:0794: 54 49 4F 4E 
       00:0798: 3A 00 6B 
  7653 00:079B: 5F 73 65 6E  	db	$5F,$73,$65,$6E,$64,$5F,$6D,$65,$73,$73,
                    $61,$67,$65,$3A,$3A
       00:079F: 64 5F 6D 65 
       00:07A3: 73 73 61 67 
       00:07A7: 65 3A 3A 
  7654 00:07AA: 53 50 45 43  	db	$53,$50,$45,$43,$49,$41,$4C,$44,$41,$54,
                    $41,$3A,$00
       00:07AE: 49 41 4C 44 
       00:07B2: 41 54 41 3A 
       00:07B6: 00 
  7655 00:07B7:              	ends
  7656                        ;
  7657                        ;
  7658                        ;BOOL k_send_window_message(HWND hWnd,MSGTYPE msgT
                    ype,LPVOID pmsgData,UINT size)
  7659                        ;{
  7660                        	.line	1592
  7661                        	.line	1593
  7662                        	EVTMAN
  7663                        	xdef	~~k_send_window_message
  7664                        	func
  7665                        	.function	1593
  7666                        ~~k_send_window_message:
  7667                        	longa	on
  7668                        	longi	on
  7669 05:1910: 3B           	tsc
  7670 05:1911: 38           	sec
  7671 05:1912: E9 09 00     	sbc	#L231
  7672 05:1915: 1B           	tcs
  Mon Sep 27 2021  9:39                                                Page 154


  7673 05:1916: 0B           	phd
  7674 05:1917: 5B           	tcd
  7675             00000004   hWnd_0	set	4
  7676             00000008   msgType_0	set	8
  7677             0000000A   pmsgData_0	set	10
  7678             0000000E   size_0	set	14
  7679                        	.block	1593
  7680                        ;	BOOL bRet = FALSE;
  7681                        ;	PFXOSMESSAGE pmsg = NULL;
  7682                        ;
  7683                        ;	//k_debug_pointer("k_send_window_message::hWnd:"
                    ,hWnd);
  7684                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  7685                        ;
  7686                        ;	if(hWnd)
  7687             00000000   bRet_1	set	0
  7688             00000001   pmsg_1	set	1
  7689                        	.sym	bRet,0,14,1,8
  7690                        	.sym	pmsg,1,138,1,32,16
  7691                        	.sym	hWnd,4,129,6,32
  7692                        	.sym	msgType,8,16,6,16
  7693                        	.sym	pmsgData,10,129,6,32
  7694                        	.sym	size,14,16,6,16
  7695 05:1918: E2 20        	sep	#$20
  7696                        	longa	off
  7697 05:191A: 64 05        	stz	<L232+bRet_1
  7698 05:191C: C2 20        	rep	#$20
  7699                        	longa	on
  7700 05:191E: 64 06        	stz	<L232+pmsg_1
  7701 05:1920: 64 08        	stz	<L232+pmsg_1+2
  7702                        	.line	1600
  7703                        ;	{
  7704 05:1922: A5 0D        	lda	<L231+hWnd_0
  7705 05:1924: 05 0F        	ora	<L231+hWnd_0+2
  7706 05:1926: D0 03        	bne	L234
  7707 05:1928: 82 DC 00     	brl	L10132
  7708                        L234:
  7709                        	.line	1601
  7710                        ;		pmsg = (PFXOSMESSAGE)k_mem_allocate_heap
                    (sizeof(FXOSMESSAGE));
  7711                        	.line	1602
  7712 05:192B: F4 00 00     	pea	#^$27
  7713 05:192E: F4 27 00     	pea	#<$27
  7714 05:1931: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7715 05:1935: 85 06        	sta	<L232+pmsg_1
  7716 05:1937: 86 08        	stx	<L232+pmsg_1+2
  7717                        ;		if(pmsg)
  7718                        	.line	1603
  7719                        ;		{
  7720 05:1939: A5 06        	lda	<L232+pmsg_1
  7721 05:193B: 05 08        	ora	<L232+pmsg_1+2
  7722 05:193D: D0 03        	bne	L235
  7723 05:193F: 82 C5 00     	brl	L10133
  7724                        L235:
  7725                        	.line	1604
  7726                        ;			pmsg->type = msgType;
  7727                        	.line	1605
  Mon Sep 27 2021  9:39                                                Page 155


  7728 05:1942: A5 11        	lda	<L231+msgType_0
  7729 05:1944: A0 08 00     	ldy	#$8
  7730 05:1947: 97 06        	sta	[<L232+pmsg_1],Y
  7731                        ;			pmsg->pheap = NULL;
  7732                        	.line	1606
  7733 05:1949: A9 00 00     	lda	#$0
  7734 05:194C: A0 0E 00     	ldy	#$e
  7735 05:194F: 97 06        	sta	[<L232+pmsg_1],Y
  7736 05:1951: A9 00 00     	lda	#$0
  7737 05:1954: A0 10 00     	ldy	#$10
  7738 05:1957: 97 06        	sta	[<L232+pmsg_1],Y
  7739                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  7740                        	.line	1607
  7741 05:1959: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7742 05:195D: 85 01        	sta	<R0
  7743 05:195F: 86 03        	stx	<R0+2
  7744 05:1961: A0 02 00     	ldy	#$2
  7745 05:1964: B7 01        	lda	[<R0],Y
  7746 05:1966: 87 06        	sta	[<L232+pmsg_1]
  7747 05:1968: A0 04 00     	ldy	#$4
  7748 05:196B: B7 01        	lda	[<R0],Y
  7749 05:196D: A0 02 00     	ldy	#$2
  7750 05:1970: 97 06        	sta	[<L232+pmsg_1],Y
  7751                        ;			pmsg->dest = FX_MSG_DEFAULT;
  7752                        	.line	1608
  7753 05:1972: A9 FF FF     	lda	#$ffff
  7754 05:1975: A0 04 00     	ldy	#$4
  7755 05:1978: 97 06        	sta	[<L232+pmsg_1],Y
  7756 05:197A: A9 FF FF     	lda	#$ffff
  7757 05:197D: A0 06 00     	ldy	#$6
  7758 05:1980: 97 06        	sta	[<L232+pmsg_1],Y
  7759                        ;			pmsg->hwnd = hWnd;
  7760                        	.line	1609
  7761 05:1982: A5 0D        	lda	<L231+hWnd_0
  7762 05:1984: A0 0A 00     	ldy	#$a
  7763 05:1987: 97 06        	sta	[<L232+pmsg_1],Y
  7764 05:1989: A5 0F        	lda	<L231+hWnd_0+2
  7765 05:198B: A0 0C 00     	ldy	#$c
  7766 05:198E: 97 06        	sta	[<L232+pmsg_1],Y
  7767                        ;
  7768                        ;			if(size == -1)
  7769                        	.line	1611
  7770                        ;			{
  7771 05:1990: A5 17        	lda	<L231+size_0
  7772 05:1992: C9 FF FF     	cmp	#<$ffffffff
  7773 05:1995: F0 03        	beq	L236
  7774 05:1997: 82 11 00     	brl	L10134
  7775                        L236:
  7776                        	.line	1612
  7777                        ;				pmsg->pheap = pmsgData;
  7778                        	.line	1613
  7779 05:199A: A5 13        	lda	<L231+pmsgData_0
  7780 05:199C: A0 0E 00     	ldy	#$e
  7781 05:199F: 97 06        	sta	[<L232+pmsg_1],Y
  7782 05:19A1: A5 15        	lda	<L231+pmsgData_0+2
  7783 05:19A3: A0 10 00     	ldy	#$10
  7784 05:19A6: 97 06        	sta	[<L232+pmsg_1],Y
  Mon Sep 27 2021  9:39                                                Page 156


  7785                        ;				//k_debug_pointer("k_sen
                    d_message::SPECIALDATA:",pmsg->pheap);
  7786                        ;			}
  7787                        	.line	1615
  7788                        ;			else if(size > 0)
  7789 05:19A8: 82 4C 00     	brl	L10135
  7790                        L10134:
  7791                        	.line	1616
  7792                        ;			{
  7793 05:19AB: A9 00 00     	lda	#$0
  7794 05:19AE: C5 17        	cmp	<L231+size_0
  7795 05:19B0: 90 03        	bcc	L237
  7796 05:19B2: 82 42 00     	brl	L10136
  7797                        L237:
  7798                        	.line	1617
  7799                        ;				if(size > MAX_FXMSG_DATA
                    )
  7800                        	.line	1618
  7801                        ;					size = MAX_FXMSG
                    _DATA;
  7802 05:19B5: A9 10 00     	lda	#$10
  7803 05:19B8: C5 17        	cmp	<L231+size_0
  7804 05:19BA: 90 03        	bcc	L238
  7805 05:19BC: 82 05 00     	brl	L10137
  7806                        L238:
  7807                        	.line	1619
  7808 05:19BF: A9 10 00     	lda	#$10
  7809 05:19C2: 85 17        	sta	<L231+size_0
  7810                        ;
  7811                        ;				if(pmsgData)
  7812                        L10137:
  7813                        	.line	1621
  7814                        ;					pmsg->pheap = k_
                    alloc_message_arg(pmsgData,size);
  7815 05:19C4: A5 13        	lda	<L231+pmsgData_0
  7816 05:19C6: 05 15        	ora	<L231+pmsgData_0+2
  7817 05:19C8: D0 03        	bne	L239
  7818 05:19CA: 82 1F 00     	brl	L10138
  7819                        L239:
  7820                        	.line	1622
  7821 05:19CD: D4 17        	pei	<L231+size_0
  7822 05:19CF: D4 15        	pei	<L231+pmsgData_0+2
  7823 05:19D1: D4 13        	pei	<L231+pmsgData_0
  7824 05:19D3: 22 50 17 05  	jsl	~~k_alloc_message_arg
  7825 05:19D7: 85 01        	sta	<R0
  7826 05:19D9: 86 03        	stx	<R0+2
  7827 05:19DB: A5 01        	lda	<R0
  7828 05:19DD: A0 0E 00     	ldy	#$e
  7829 05:19E0: 97 06        	sta	[<L232+pmsg_1],Y
  7830 05:19E2: A5 03        	lda	<R0+2
  7831 05:19E4: A0 10 00     	ldy	#$10
  7832 05:19E7: 97 06        	sta	[<L232+pmsg_1],Y
  7833                        ;				else
  7834 05:19E9: 82 0B 00     	brl	L10139
  7835                        L10138:
  7836                        ;					pmsg->data[0] = 
                    0;
  7837                        	.line	1624
  Mon Sep 27 2021  9:39                                                Page 157


  7838 05:19EC: E2 20        	sep	#$20
  7839                        	longa	off
  7840 05:19EE: A9 00        	lda	#$0
  7841 05:19F0: A0 16 00     	ldy	#$16
  7842 05:19F3: 97 06        	sta	[<L232+pmsg_1],Y
  7843 05:19F5: C2 20        	rep	#$20
  7844                        	longa	on
  7845                        L10139:
  7846                        ;			}
  7847                        	.line	1625
  7848                        ;
  7849                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,pmsg);
  7850                        L10136:
  7851                        L10135:
  7852                        	.line	1627
  7853 05:19F7: D4 08        	pei	<L232+pmsg_1+2
  7854 05:19F9: D4 06        	pei	<L232+pmsg_1
  7855 05:19FB: AD xx xx     	lda	|~~_k_eventQueue+2
  7856 05:19FE: 48           	pha
  7857 05:19FF: AD xx xx     	lda	|~~_k_eventQueue
  7858 05:1A02: 48           	pha
  7859 05:1A03: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  7860                        ;		}
  7861                        	.line	1628
  7862                        ;	}
  7863                        L10133:
  7864                        	.line	1629
  7865                        ;
  7866                        ;	//k_debug_string("k_send_message::exit\r\n");
  7867                        ;
  7868                        ;	return bRet;
  7869                        L10132:
  7870                        	.line	1633
  7871 05:1A07: A5 05        	lda	<L232+bRet_1
  7872 05:1A09: 29 FF 00     	and	#$ff
  7873                        L240:
  7874 05:1A0C: A8           	tay
  7875 05:1A0D: A5 0B        	lda	<L231+2
  7876 05:1A0F: 85 17        	sta	<L231+2+12
  7877 05:1A11: A5 0A        	lda	<L231+1
  7878 05:1A13: 85 16        	sta	<L231+1+12
  7879 05:1A15: 2B           	pld
  7880 05:1A16: 3B           	tsc
  7881 05:1A17: 18           	clc
  7882 05:1A18: 69 15 00     	adc	#L231+12
  7883 05:1A1B: 1B           	tcs
  7884 05:1A1C: 98           	tya
  7885 05:1A1D: 6B           	rtl
  7886                        ;}
  7887                        	.line	1634
  7888                        	.endblock	1634
  7889             00000009   L231	equ	9
  7890             00000005   L232	equ	5
  7891 05:1A1E:              	ends
  7892                        	efunc
  7893                        	.endfunc	1634,5,9
  7894                        	.line	1634
  Mon Sep 27 2021  9:39                                                Page 158


  7895                        ;
  7896                        ;BOOL k_send_window_native_message(HWND hWnd,MSGTY
                    PE msgType,LPVOID msgBytes,UINT size)
  7897                        ;{
  7898                        	.line	1636
  7899                        	.line	1637
  7900                        	EVTMAN
  7901                        	xdef	~~k_send_window_native_message
  7902                        	func
  7903                        	.function	1637
  7904                        ~~k_send_window_native_message:
  7905                        	longa	on
  7906                        	longi	on
  7907 05:1A1E: 3B           	tsc
  7908 05:1A1F: 38           	sec
  7909 05:1A20: E9 0B 00     	sbc	#L241
  7910 05:1A23: 1B           	tcs
  7911 05:1A24: 0B           	phd
  7912 05:1A25: 5B           	tcd
  7913             00000004   hWnd_0	set	4
  7914             00000008   msgType_0	set	8
  7915             0000000A   msgBytes_0	set	10
  7916             0000000E   size_0	set	14
  7917                        	.block	1637
  7918                        ;	BOOL bRet = FALSE;
  7919                        ;	PFXOSMESSAGE pmsg = NULL;
  7920                        ;
  7921                        ;	int i = 0;
  7922                        ;
  7923                        ;	//k_debug_pointer("k_send_window_message::hWnd:"
                    ,hWnd);
  7924                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  7925                        ;
  7926                        ;	if(hWnd)
  7927             00000000   bRet_1	set	0
  7928             00000001   pmsg_1	set	1
  7929             00000005   i_1	set	5
  7930                        	.sym	bRet,0,14,1,8
  7931                        	.sym	pmsg,1,138,1,32,16
  7932                        	.sym	i,5,5,1,16
  7933                        	.sym	hWnd,4,129,6,32
  7934                        	.sym	msgType,8,16,6,16
  7935                        	.sym	msgBytes,10,129,6,32
  7936                        	.sym	size,14,16,6,16
  7937 05:1A26: E2 20        	sep	#$20
  7938                        	longa	off
  7939 05:1A28: 64 05        	stz	<L242+bRet_1
  7940 05:1A2A: C2 20        	rep	#$20
  7941                        	longa	on
  7942 05:1A2C: 64 06        	stz	<L242+pmsg_1
  7943 05:1A2E: 64 08        	stz	<L242+pmsg_1+2
  7944 05:1A30: 64 0A        	stz	<L242+i_1
  7945                        	.line	1646
  7946                        ;	{
  7947 05:1A32: A5 0F        	lda	<L241+hWnd_0
  7948 05:1A34: 05 11        	ora	<L241+hWnd_0+2
  7949 05:1A36: D0 03        	bne	L244
  Mon Sep 27 2021  9:39                                                Page 159


  7950 05:1A38: 82 BF 00     	brl	L10140
  7951                        L244:
  7952                        	.line	1647
  7953                        ;		pmsg = (PFXOSMESSAGE)k_mem_allocate_heap
                    (sizeof(FXOSMESSAGE));
  7954                        	.line	1648
  7955 05:1A3B: F4 00 00     	pea	#^$27
  7956 05:1A3E: F4 27 00     	pea	#<$27
  7957 05:1A41: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7958 05:1A45: 85 06        	sta	<L242+pmsg_1
  7959 05:1A47: 86 08        	stx	<L242+pmsg_1+2
  7960                        ;		if(pmsg)
  7961                        	.line	1649
  7962                        ;		{
  7963 05:1A49: A5 06        	lda	<L242+pmsg_1
  7964 05:1A4B: 05 08        	ora	<L242+pmsg_1+2
  7965 05:1A4D: D0 03        	bne	L245
  7966 05:1A4F: 82 A8 00     	brl	L10141
  7967                        L245:
  7968                        	.line	1650
  7969                        ;			pmsg->type = msgType;
  7970                        	.line	1651
  7971 05:1A52: A5 13        	lda	<L241+msgType_0
  7972 05:1A54: A0 08 00     	ldy	#$8
  7973 05:1A57: 97 06        	sta	[<L242+pmsg_1],Y
  7974                        ;			pmsg->pheap = NULL;
  7975                        	.line	1652
  7976 05:1A59: A9 00 00     	lda	#$0
  7977 05:1A5C: A0 0E 00     	ldy	#$e
  7978 05:1A5F: 97 06        	sta	[<L242+pmsg_1],Y
  7979 05:1A61: A9 00 00     	lda	#$0
  7980 05:1A64: A0 10 00     	ldy	#$10
  7981 05:1A67: 97 06        	sta	[<L242+pmsg_1],Y
  7982                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  7983                        	.line	1653
  7984 05:1A69: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7985 05:1A6D: 85 01        	sta	<R0
  7986 05:1A6F: 86 03        	stx	<R0+2
  7987 05:1A71: A0 02 00     	ldy	#$2
  7988 05:1A74: B7 01        	lda	[<R0],Y
  7989 05:1A76: 87 06        	sta	[<L242+pmsg_1]
  7990 05:1A78: A0 04 00     	ldy	#$4
  7991 05:1A7B: B7 01        	lda	[<R0],Y
  7992 05:1A7D: A0 02 00     	ldy	#$2
  7993 05:1A80: 97 06        	sta	[<L242+pmsg_1],Y
  7994                        ;			pmsg->dest = FX_MSG_DEFAULT;
  7995                        	.line	1654
  7996 05:1A82: A9 FF FF     	lda	#$ffff
  7997 05:1A85: A0 04 00     	ldy	#$4
  7998 05:1A88: 97 06        	sta	[<L242+pmsg_1],Y
  7999 05:1A8A: A9 FF FF     	lda	#$ffff
  8000 05:1A8D: A0 06 00     	ldy	#$6
  8001 05:1A90: 97 06        	sta	[<L242+pmsg_1],Y
  8002                        ;			pmsg->hwnd = hWnd;
  8003                        	.line	1655
  8004 05:1A92: A5 0F        	lda	<L241+hWnd_0
  8005 05:1A94: A0 0A 00     	ldy	#$a
  Mon Sep 27 2021  9:39                                                Page 160


  8006 05:1A97: 97 06        	sta	[<L242+pmsg_1],Y
  8007 05:1A99: A5 11        	lda	<L241+hWnd_0+2
  8008 05:1A9B: A0 0C 00     	ldy	#$c
  8009 05:1A9E: 97 06        	sta	[<L242+pmsg_1],Y
  8010                        ;
  8011                        ;			if(msgBytes)
  8012                        	.line	1657
  8013                        ;			{
  8014 05:1AA0: A5 15        	lda	<L241+msgBytes_0
  8015 05:1AA2: 05 17        	ora	<L241+msgBytes_0+2
  8016 05:1AA4: D0 03        	bne	L246
  8017 05:1AA6: 82 41 00     	brl	L10142
  8018                        L246:
  8019                        	.line	1658
  8020                        ;				memset(pmsg->data,0,MAX_
                    FXMSG_DATA);
  8021                        	.line	1659
  8022 05:1AA9: F4 10 00     	pea	#<$10
  8023 05:1AAC: F4 00 00     	pea	#<$0
  8024 05:1AAF: 18           	clc
  8025 05:1AB0: A9 16 00     	lda	#$16
  8026 05:1AB3: 65 06        	adc	<L242+pmsg_1
  8027 05:1AB5: 85 01        	sta	<R0
  8028 05:1AB7: A9 00 00     	lda	#$0
  8029 05:1ABA: 65 08        	adc	<L242+pmsg_1+2
  8030 05:1ABC: 85 03        	sta	<R0+2
  8031 05:1ABE: D4 03        	pei	<R0+2
  8032 05:1AC0: D4 01        	pei	<R0
  8033 05:1AC2: 22 xx xx xx  	jsl	~~memset
  8034                        ;				for(i=0;i<size;i++)
  8035                        	.line	1660
  8036 05:1AC6: 64 0A        	stz	<L242+i_1
  8037 05:1AC8: 82 16 00     	brl	L10146
  8038                        L10145:
  8039                        ;					pmsg->data[i] = 
                    ((LPSTR)msgBytes)[i];
  8040                        	.line	1661
  8041 05:1ACB: 18           	clc
  8042 05:1ACC: A9 16 00     	lda	#$16
  8043 05:1ACF: 65 0A        	adc	<L242+i_1
  8044 05:1AD1: 85 01        	sta	<R0
  8045 05:1AD3: E2 20        	sep	#$20
  8046                        	longa	off
  8047 05:1AD5: A4 0A        	ldy	<L242+i_1
  8048 05:1AD7: B7 15        	lda	[<L241+msgBytes_0],Y
  8049 05:1AD9: A4 01        	ldy	<R0
  8050 05:1ADB: 97 06        	sta	[<L242+pmsg_1],Y
  8051 05:1ADD: C2 20        	rep	#$20
  8052                        	longa	on
  8053                        L10143:
  8054 05:1ADF: E6 0A        	inc	<L242+i_1
  8055                        L10146:
  8056 05:1AE1: A5 0A        	lda	<L242+i_1
  8057 05:1AE3: C5 19        	cmp	<L241+size_0
  8058 05:1AE5: B0 03        	bcs	L247
  8059 05:1AE7: 82 E1 FF     	brl	L10145
  8060                        L247:
  8061                        L10144:
  Mon Sep 27 2021  9:39                                                Page 161


  8062                        ;
  8063                        ;			}
  8064                        	.line	1663
  8065                        ;
  8066                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,pmsg);
  8067                        L10142:
  8068                        	.line	1665
  8069 05:1AEA: D4 08        	pei	<L242+pmsg_1+2
  8070 05:1AEC: D4 06        	pei	<L242+pmsg_1
  8071 05:1AEE: AD xx xx     	lda	|~~_k_eventQueue+2
  8072 05:1AF1: 48           	pha
  8073 05:1AF2: AD xx xx     	lda	|~~_k_eventQueue
  8074 05:1AF5: 48           	pha
  8075 05:1AF6: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  8076                        ;		}
  8077                        	.line	1666
  8078                        ;	}
  8079                        L10141:
  8080                        	.line	1667
  8081                        ;
  8082                        ;	//k_debug_string("k_send_message::exit\r\n");
  8083                        ;
  8084                        ;	return bRet;
  8085                        L10140:
  8086                        	.line	1671
  8087 05:1AFA: A5 05        	lda	<L242+bRet_1
  8088 05:1AFC: 29 FF 00     	and	#$ff
  8089                        L248:
  8090 05:1AFF: A8           	tay
  8091 05:1B00: A5 0D        	lda	<L241+2
  8092 05:1B02: 85 19        	sta	<L241+2+12
  8093 05:1B04: A5 0C        	lda	<L241+1
  8094 05:1B06: 85 18        	sta	<L241+1+12
  8095 05:1B08: 2B           	pld
  8096 05:1B09: 3B           	tsc
  8097 05:1B0A: 18           	clc
  8098 05:1B0B: 69 17 00     	adc	#L241+12
  8099 05:1B0E: 1B           	tcs
  8100 05:1B0F: 98           	tya
  8101 05:1B10: 6B           	rtl
  8102                        ;}
  8103                        	.line	1672
  8104                        	.endblock	1672
  8105             0000000B   L241	equ	11
  8106             00000005   L242	equ	5
  8107 05:1B11:              	ends
  8108                        	efunc
  8109                        	.endfunc	1672,5,11
  8110                        	.line	1672
  8111                        ;
  8112                        ;
  8113                        ;BOOL k_send_command_message(HWND hWnd,MSGTYPE msg
                    Type,UINT cmdCId,UINT cmdMId,ULONG pData1,ULONG pData2)
  8114                        ;{
  8115                        	.line	1675
  8116                        	.line	1676
  8117                        	EVTMAN
  Mon Sep 27 2021  9:39                                                Page 162


  8118                        	xdef	~~k_send_command_message
  8119                        	func
  8120                        	.function	1676
  8121                        ~~k_send_command_message:
  8122                        	longa	on
  8123                        	longi	on
  8124 05:1B11: 3B           	tsc
  8125 05:1B12: 38           	sec
  8126 05:1B13: E9 09 00     	sbc	#L249
  8127 05:1B16: 1B           	tcs
  8128 05:1B17: 0B           	phd
  8129 05:1B18: 5B           	tcd
  8130             00000004   hWnd_0	set	4
  8131             00000008   msgType_0	set	8
  8132             0000000A   cmdCId_0	set	10
  8133             0000000C   cmdMId_0	set	12
  8134             0000000E   pData1_0	set	14
  8135             00000012   pData2_0	set	18
  8136                        	.block	1676
  8137                        ;	BOOL bRet = FALSE;
  8138                        ;	PFXCMDMESSAGE pmsg = NULL;
  8139                        ;
  8140                        ;	//k_debug_pointer("k_send_command_message::hWnd:
                    ",hWnd);
  8141                        ;	//k_debug_long("k_send_command_message::pData1:"
                    ,pData1);
  8142                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  8143                        ;
  8144                        ;	if(hWnd)
  8145             00000000   bRet_1	set	0
  8146             00000001   pmsg_1	set	1
  8147                        	.sym	bRet,0,14,1,8
  8148                        	.sym	pmsg,1,138,1,32,17
  8149                        	.sym	hWnd,4,129,6,32
  8150                        	.sym	msgType,8,16,6,16
  8151                        	.sym	cmdCId,10,16,6,16
  8152                        	.sym	cmdMId,12,16,6,16
  8153                        	.sym	pData1,14,18,6,32
  8154                        	.sym	pData2,18,18,6,32
  8155 05:1B19: E2 20        	sep	#$20
  8156                        	longa	off
  8157 05:1B1B: 64 05        	stz	<L250+bRet_1
  8158 05:1B1D: C2 20        	rep	#$20
  8159                        	longa	on
  8160 05:1B1F: 64 06        	stz	<L250+pmsg_1
  8161 05:1B21: 64 08        	stz	<L250+pmsg_1+2
  8162                        	.line	1684
  8163                        ;	{
  8164 05:1B23: A5 0D        	lda	<L249+hWnd_0
  8165 05:1B25: 05 0F        	ora	<L249+hWnd_0+2
  8166 05:1B27: D0 03        	bne	L252
  8167 05:1B29: 82 AF 00     	brl	L10147
  8168                        L252:
  8169                        	.line	1685
  8170                        ;		pmsg = (PFXCMDMESSAGE)k_mem_allocate_hea
                    p(sizeof(FXCMDMESSAGE));
  8171                        	.line	1686
  Mon Sep 27 2021  9:39                                                Page 163


  8172 05:1B2C: F4 00 00     	pea	#^$27
  8173 05:1B2F: F4 27 00     	pea	#<$27
  8174 05:1B32: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  8175 05:1B36: 85 06        	sta	<L250+pmsg_1
  8176 05:1B38: 86 08        	stx	<L250+pmsg_1+2
  8177                        ;		if(pmsg)
  8178                        	.line	1687
  8179                        ;		{
  8180 05:1B3A: A5 06        	lda	<L250+pmsg_1
  8181 05:1B3C: 05 08        	ora	<L250+pmsg_1+2
  8182 05:1B3E: D0 03        	bne	L253
  8183 05:1B40: 82 98 00     	brl	L10148
  8184                        L253:
  8185                        	.line	1688
  8186                        ;			pmsg->type = msgType;
  8187                        	.line	1689
  8188 05:1B43: A5 11        	lda	<L249+msgType_0
  8189 05:1B45: A0 08 00     	ldy	#$8
  8190 05:1B48: 97 06        	sta	[<L250+pmsg_1],Y
  8191                        ;			pmsg->pheap = NULL;
  8192                        	.line	1690
  8193 05:1B4A: A9 00 00     	lda	#$0
  8194 05:1B4D: A0 0E 00     	ldy	#$e
  8195 05:1B50: 97 06        	sta	[<L250+pmsg_1],Y
  8196 05:1B52: A9 00 00     	lda	#$0
  8197 05:1B55: A0 10 00     	ldy	#$10
  8198 05:1B58: 97 06        	sta	[<L250+pmsg_1],Y
  8199                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  8200                        	.line	1691
  8201 05:1B5A: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  8202 05:1B5E: 85 01        	sta	<R0
  8203 05:1B60: 86 03        	stx	<R0+2
  8204 05:1B62: A0 02 00     	ldy	#$2
  8205 05:1B65: B7 01        	lda	[<R0],Y
  8206 05:1B67: 87 06        	sta	[<L250+pmsg_1]
  8207 05:1B69: A0 04 00     	ldy	#$4
  8208 05:1B6C: B7 01        	lda	[<R0],Y
  8209 05:1B6E: A0 02 00     	ldy	#$2
  8210 05:1B71: 97 06        	sta	[<L250+pmsg_1],Y
  8211                        ;			pmsg->dest = FX_MSG_DEFAULT;
  8212                        	.line	1692
  8213 05:1B73: A9 FF FF     	lda	#$ffff
  8214 05:1B76: A0 04 00     	ldy	#$4
  8215 05:1B79: 97 06        	sta	[<L250+pmsg_1],Y
  8216 05:1B7B: A9 FF FF     	lda	#$ffff
  8217 05:1B7E: A0 06 00     	ldy	#$6
  8218 05:1B81: 97 06        	sta	[<L250+pmsg_1],Y
  8219                        ;			pmsg->hwnd = hWnd;
  8220                        	.line	1693
  8221 05:1B83: A5 0D        	lda	<L249+hWnd_0
  8222 05:1B85: A0 0A 00     	ldy	#$a
  8223 05:1B88: 97 06        	sta	[<L250+pmsg_1],Y
  8224 05:1B8A: A5 0F        	lda	<L249+hWnd_0+2
  8225 05:1B8C: A0 0C 00     	ldy	#$c
  8226 05:1B8F: 97 06        	sta	[<L250+pmsg_1],Y
  8227                        ;
  8228                        ;			pmsg->cmdCId = cmdCId;
  Mon Sep 27 2021  9:39                                                Page 164


  8229                        	.line	1695
  8230 05:1B91: A5 13        	lda	<L249+cmdCId_0
  8231 05:1B93: A0 16 00     	ldy	#$16
  8232 05:1B96: 97 06        	sta	[<L250+pmsg_1],Y
  8233                        ;			pmsg->cmdMId = cmdMId;
  8234                        	.line	1696
  8235 05:1B98: A5 15        	lda	<L249+cmdMId_0
  8236 05:1B9A: A0 18 00     	ldy	#$18
  8237 05:1B9D: 97 06        	sta	[<L250+pmsg_1],Y
  8238                        ;			pmsg->parameter1 = (ULONG)pData1
                    ;
  8239                        	.line	1697
  8240 05:1B9F: A5 17        	lda	<L249+pData1_0
  8241 05:1BA1: A0 1A 00     	ldy	#$1a
  8242 05:1BA4: 97 06        	sta	[<L250+pmsg_1],Y
  8243 05:1BA6: A5 19        	lda	<L249+pData1_0+2
  8244 05:1BA8: A0 1C 00     	ldy	#$1c
  8245 05:1BAB: 97 06        	sta	[<L250+pmsg_1],Y
  8246                        ;			pmsg->parameter2 = (ULONG)pData2
                    ;
  8247                        	.line	1698
  8248 05:1BAD: A5 1B        	lda	<L249+pData2_0
  8249 05:1BAF: A0 1E 00     	ldy	#$1e
  8250 05:1BB2: 97 06        	sta	[<L250+pmsg_1],Y
  8251 05:1BB4: A5 1D        	lda	<L249+pData2_0+2
  8252 05:1BB6: A0 20 00     	ldy	#$20
  8253 05:1BB9: 97 06        	sta	[<L250+pmsg_1],Y
  8254                        ;
  8255                        ;			pmsg->parameter3 = 0L;
  8256                        	.line	1700
  8257 05:1BBB: A9 00 00     	lda	#$0
  8258 05:1BBE: A0 22 00     	ldy	#$22
  8259 05:1BC1: 97 06        	sta	[<L250+pmsg_1],Y
  8260 05:1BC3: A9 00 00     	lda	#$0
  8261 05:1BC6: A0 24 00     	ldy	#$24
  8262 05:1BC9: 97 06        	sta	[<L250+pmsg_1],Y
  8263                        ;
  8264                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,(PFXOSMESSAGE)pmsg);
  8265                        	.line	1702
  8266 05:1BCB: D4 08        	pei	<L250+pmsg_1+2
  8267 05:1BCD: D4 06        	pei	<L250+pmsg_1
  8268 05:1BCF: AD xx xx     	lda	|~~_k_eventQueue+2
  8269 05:1BD2: 48           	pha
  8270 05:1BD3: AD xx xx     	lda	|~~_k_eventQueue
  8271 05:1BD6: 48           	pha
  8272 05:1BD7: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  8273                        ;		}
  8274                        	.line	1703
  8275                        ;	}
  8276                        L10148:
  8277                        	.line	1704
  8278                        ;
  8279                        ;	//k_debug_string("k_send_command_message::exit\r
                    \n");
  8280                        ;
  8281                        ;	return bRet;
  8282                        L10147:
  Mon Sep 27 2021  9:39                                                Page 165


  8283                        	.line	1708
  8284 05:1BDB: A5 05        	lda	<L250+bRet_1
  8285 05:1BDD: 29 FF 00     	and	#$ff
  8286                        L254:
  8287 05:1BE0: A8           	tay
  8288 05:1BE1: A5 0B        	lda	<L249+2
  8289 05:1BE3: 85 1D        	sta	<L249+2+18
  8290 05:1BE5: A5 0A        	lda	<L249+1
  8291 05:1BE7: 85 1C        	sta	<L249+1+18
  8292 05:1BE9: 2B           	pld
  8293 05:1BEA: 3B           	tsc
  8294 05:1BEB: 18           	clc
  8295 05:1BEC: 69 1B 00     	adc	#L249+18
  8296 05:1BEF: 1B           	tcs
  8297 05:1BF0: 98           	tya
  8298 05:1BF1: 6B           	rtl
  8299                        ;}
  8300                        	.line	1709
  8301                        	.endblock	1709
  8302             00000009   L249	equ	9
  8303             00000005   L250	equ	5
  8304 05:1BF2:              	ends
  8305                        	efunc
  8306                        	.endfunc	1709,5,9
  8307                        	.line	1709
  8308                        ;
  8309                        ;BOOL k_send_process_command_message(PFXPROCESS pr
                    ocess,MSGTYPE msgType,UINT cmdCId,UINT cmdMId,ULONG pData1,U
                    LONG pData2)
  8310                        ;{
  8311                        	.line	1711
  8312                        	.line	1712
  8313                        	EVTMAN
  8314                        	xdef	~~k_send_process_command_message
  8315                        	func
  8316                        	.function	1712
  8317                        ~~k_send_process_command_message:
  8318                        	longa	on
  8319                        	longi	on
  8320 05:1BF2: 3B           	tsc
  8321 05:1BF3: 38           	sec
  8322 05:1BF4: E9 09 00     	sbc	#L255
  8323 05:1BF7: 1B           	tcs
  8324 05:1BF8: 0B           	phd
  8325 05:1BF9: 5B           	tcd
  8326             00000004   process_0	set	4
  8327             00000008   msgType_0	set	8
  8328             0000000A   cmdCId_0	set	10
  8329             0000000C   cmdMId_0	set	12
  8330             0000000E   pData1_0	set	14
  8331             00000012   pData2_0	set	18
  8332                        	.block	1712
  8333                        ;	BOOL bRet = FALSE;
  8334                        ;	PFXCMDMESSAGE pmsg = NULL;
  8335                        ;
  8336                        ;	//k_debug_pointer("k_send_command_message::hWnd:
                    ",hWnd);
  8337                        ;	//k_debug_long("k_send_command_message::pData1:"
  Mon Sep 27 2021  9:39                                                Page 166


                    ,pData1);
  8338                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  8339                        ;
  8340                        ;	if(process)
  8341             00000000   bRet_1	set	0
  8342             00000001   pmsg_1	set	1
  8343                        	.sym	bRet,0,14,1,8
  8344                        	.sym	pmsg,1,138,1,32,17
  8345                        	.sym	process,4,138,6,32,20
  8346                        	.sym	msgType,8,16,6,16
  8347                        	.sym	cmdCId,10,16,6,16
  8348                        	.sym	cmdMId,12,16,6,16
  8349                        	.sym	pData1,14,18,6,32
  8350                        	.sym	pData2,18,18,6,32
  8351 05:1BFA: E2 20        	sep	#$20
  8352                        	longa	off
  8353 05:1BFC: 64 05        	stz	<L256+bRet_1
  8354 05:1BFE: C2 20        	rep	#$20
  8355                        	longa	on
  8356 05:1C00: 64 06        	stz	<L256+pmsg_1
  8357 05:1C02: 64 08        	stz	<L256+pmsg_1+2
  8358                        	.line	1720
  8359                        ;	{
  8360 05:1C04: A5 0D        	lda	<L255+process_0
  8361 05:1C06: 05 0F        	ora	<L255+process_0+2
  8362 05:1C08: D0 03        	bne	L258
  8363 05:1C0A: 82 B5 00     	brl	L10149
  8364                        L258:
  8365                        	.line	1721
  8366                        ;		pmsg = (PFXCMDMESSAGE)k_mem_allocate_hea
                    p(sizeof(FXCMDMESSAGE));
  8367                        	.line	1722
  8368 05:1C0D: F4 00 00     	pea	#^$27
  8369 05:1C10: F4 27 00     	pea	#<$27
  8370 05:1C13: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  8371 05:1C17: 85 06        	sta	<L256+pmsg_1
  8372 05:1C19: 86 08        	stx	<L256+pmsg_1+2
  8373                        ;		if(pmsg)
  8374                        	.line	1723
  8375                        ;		{
  8376 05:1C1B: A5 06        	lda	<L256+pmsg_1
  8377 05:1C1D: 05 08        	ora	<L256+pmsg_1+2
  8378 05:1C1F: D0 03        	bne	L259
  8379 05:1C21: 82 9E 00     	brl	L10150
  8380                        L259:
  8381                        	.line	1724
  8382                        ;			pmsg->type = msgType;
  8383                        	.line	1725
  8384 05:1C24: A5 11        	lda	<L255+msgType_0
  8385 05:1C26: A0 08 00     	ldy	#$8
  8386 05:1C29: 97 06        	sta	[<L256+pmsg_1],Y
  8387                        ;			pmsg->pheap = NULL;
  8388                        	.line	1726
  8389 05:1C2B: A9 00 00     	lda	#$0
  8390 05:1C2E: A0 0E 00     	ldy	#$e
  8391 05:1C31: 97 06        	sta	[<L256+pmsg_1],Y
  8392 05:1C33: A9 00 00     	lda	#$0
  Mon Sep 27 2021  9:39                                                Page 167


  8393 05:1C36: A0 10 00     	ldy	#$10
  8394 05:1C39: 97 06        	sta	[<L256+pmsg_1],Y
  8395                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  8396                        	.line	1727
  8397 05:1C3B: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  8398 05:1C3F: 85 01        	sta	<R0
  8399 05:1C41: 86 03        	stx	<R0+2
  8400 05:1C43: A0 02 00     	ldy	#$2
  8401 05:1C46: B7 01        	lda	[<R0],Y
  8402 05:1C48: 87 06        	sta	[<L256+pmsg_1]
  8403 05:1C4A: A0 04 00     	ldy	#$4
  8404 05:1C4D: B7 01        	lda	[<R0],Y
  8405 05:1C4F: A0 02 00     	ldy	#$2
  8406 05:1C52: 97 06        	sta	[<L256+pmsg_1],Y
  8407                        ;			pmsg->dest = process->procId;
  8408                        	.line	1728
  8409 05:1C54: A0 02 00     	ldy	#$2
  8410 05:1C57: B7 0D        	lda	[<L255+process_0],Y
  8411 05:1C59: A0 04 00     	ldy	#$4
  8412 05:1C5C: 97 06        	sta	[<L256+pmsg_1],Y
  8413 05:1C5E: A0 04 00     	ldy	#$4
  8414 05:1C61: B7 0D        	lda	[<L255+process_0],Y
  8415 05:1C63: A0 06 00     	ldy	#$6
  8416 05:1C66: 97 06        	sta	[<L256+pmsg_1],Y
  8417                        ;			pmsg->hwnd = NULL;
  8418                        	.line	1729
  8419 05:1C68: A9 00 00     	lda	#$0
  8420 05:1C6B: A0 0A 00     	ldy	#$a
  8421 05:1C6E: 97 06        	sta	[<L256+pmsg_1],Y
  8422 05:1C70: A9 00 00     	lda	#$0
  8423 05:1C73: A0 0C 00     	ldy	#$c
  8424 05:1C76: 97 06        	sta	[<L256+pmsg_1],Y
  8425                        ;
  8426                        ;			pmsg->cmdCId = cmdCId;
  8427                        	.line	1731
  8428 05:1C78: A5 13        	lda	<L255+cmdCId_0
  8429 05:1C7A: A0 16 00     	ldy	#$16
  8430 05:1C7D: 97 06        	sta	[<L256+pmsg_1],Y
  8431                        ;			pmsg->cmdMId = cmdMId;
  8432                        	.line	1732
  8433 05:1C7F: A5 15        	lda	<L255+cmdMId_0
  8434 05:1C81: A0 18 00     	ldy	#$18
  8435 05:1C84: 97 06        	sta	[<L256+pmsg_1],Y
  8436                        ;			pmsg->parameter1 = (ULONG)pData1
                    ;
  8437                        	.line	1733
  8438 05:1C86: A5 17        	lda	<L255+pData1_0
  8439 05:1C88: A0 1A 00     	ldy	#$1a
  8440 05:1C8B: 97 06        	sta	[<L256+pmsg_1],Y
  8441 05:1C8D: A5 19        	lda	<L255+pData1_0+2
  8442 05:1C8F: A0 1C 00     	ldy	#$1c
  8443 05:1C92: 97 06        	sta	[<L256+pmsg_1],Y
  8444                        ;			pmsg->parameter2 = (ULONG)pData2
                    ;
  8445                        	.line	1734
  8446 05:1C94: A5 1B        	lda	<L255+pData2_0
  8447 05:1C96: A0 1E 00     	ldy	#$1e
  Mon Sep 27 2021  9:39                                                Page 168


  8448 05:1C99: 97 06        	sta	[<L256+pmsg_1],Y
  8449 05:1C9B: A5 1D        	lda	<L255+pData2_0+2
  8450 05:1C9D: A0 20 00     	ldy	#$20
  8451 05:1CA0: 97 06        	sta	[<L256+pmsg_1],Y
  8452                        ;
  8453                        ;			pmsg->parameter3 = 0L;
  8454                        	.line	1736
  8455 05:1CA2: A9 00 00     	lda	#$0
  8456 05:1CA5: A0 22 00     	ldy	#$22
  8457 05:1CA8: 97 06        	sta	[<L256+pmsg_1],Y
  8458 05:1CAA: A9 00 00     	lda	#$0
  8459 05:1CAD: A0 24 00     	ldy	#$24
  8460 05:1CB0: 97 06        	sta	[<L256+pmsg_1],Y
  8461                        ;
  8462                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,(PFXOSMESSAGE)pmsg);
  8463                        	.line	1738
  8464 05:1CB2: D4 08        	pei	<L256+pmsg_1+2
  8465 05:1CB4: D4 06        	pei	<L256+pmsg_1
  8466 05:1CB6: AD xx xx     	lda	|~~_k_eventQueue+2
  8467 05:1CB9: 48           	pha
  8468 05:1CBA: AD xx xx     	lda	|~~_k_eventQueue
  8469 05:1CBD: 48           	pha
  8470 05:1CBE: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  8471                        ;		}
  8472                        	.line	1739
  8473                        ;	}
  8474                        L10150:
  8475                        	.line	1740
  8476                        ;
  8477                        ;	//k_debug_string("k_send_command_message::exit\r
                    \n");
  8478                        ;
  8479                        ;	return bRet;
  8480                        L10149:
  8481                        	.line	1744
  8482 05:1CC2: A5 05        	lda	<L256+bRet_1
  8483 05:1CC4: 29 FF 00     	and	#$ff
  8484                        L260:
  8485 05:1CC7: A8           	tay
  8486 05:1CC8: A5 0B        	lda	<L255+2
  8487 05:1CCA: 85 1D        	sta	<L255+2+18
  8488 05:1CCC: A5 0A        	lda	<L255+1
  8489 05:1CCE: 85 1C        	sta	<L255+1+18
  8490 05:1CD0: 2B           	pld
  8491 05:1CD1: 3B           	tsc
  8492 05:1CD2: 18           	clc
  8493 05:1CD3: 69 1B 00     	adc	#L255+18
  8494 05:1CD6: 1B           	tcs
  8495 05:1CD7: 98           	tya
  8496 05:1CD8: 6B           	rtl
  8497                        ;}
  8498                        	.line	1745
  8499                        	.endblock	1745
  8500             00000009   L255	equ	9
  8501             00000005   L256	equ	5
  8502 05:1CD9:              	ends
  8503                        	efunc
  Mon Sep 27 2021  9:39                                                Page 169


  8504                        	.endfunc	1745,5,9
  8505                        	.line	1745
  8506                        ;
  8507                        ;void k_irq_device_event(MSGIRQ type,ULONG timer,v
                    oid FAR *data)
  8508                        ;{
  8509                        	.line	1747
  8510                        	.line	1748
  8511                        	EVTMAN
  8512                        	xdef	~~k_irq_device_event
  8513                        	func
  8514                        	.function	1748
  8515                        ~~k_irq_device_event:
  8516                        	longa	on
  8517                        	longi	on
  8518 05:1CD9: 3B           	tsc
  8519 05:1CDA: 38           	sec
  8520 05:1CDB: E9 05 00     	sbc	#L261
  8521 05:1CDE: 1B           	tcs
  8522 05:1CDF: 0B           	phd
  8523 05:1CE0: 5B           	tcd
  8524             00000004   type_0	set	4
  8525             00000006   timer_0	set	6
  8526             0000000A   data_0	set	10
  8527                        	.block	1748
  8528                        ;	BOOL bRet = FALSE;
  8529                        ;	PFXOSMESSAGE pmsg = NULL;
  8530                        ;
  8531                        ;	pmsg = k_create_msg(type,timer,data);
  8532             00000000   bRet_1	set	0
  8533             00000001   pmsg_1	set	1
  8534                        	.sym	bRet,0,14,1,8
  8535                        	.sym	pmsg,1,138,1,32,16
  8536                        	.sym	type,4,5,6,16
  8537                        	.sym	timer,6,18,6,32
  8538                        	.sym	data,10,129,6,32
  8539 05:1CE1: E2 20        	sep	#$20
  8540                        	longa	off
  8541 05:1CE3: 64 01        	stz	<L262+bRet_1
  8542 05:1CE5: C2 20        	rep	#$20
  8543                        	longa	on
  8544 05:1CE7: 64 02        	stz	<L262+pmsg_1
  8545 05:1CE9: 64 04        	stz	<L262+pmsg_1+2
  8546                        	.line	1752
  8547 05:1CEB: D4 11        	pei	<L261+data_0+2
  8548 05:1CED: D4 0F        	pei	<L261+data_0
  8549 05:1CEF: D4 0D        	pei	<L261+timer_0+2
  8550 05:1CF1: D4 0B        	pei	<L261+timer_0
  8551 05:1CF3: D4 09        	pei	<L261+type_0
  8552 05:1CF5: 22 19 21 05  	jsl	~~k_create_msg
  8553 05:1CF9: 85 02        	sta	<L262+pmsg_1
  8554 05:1CFB: 86 04        	stx	<L262+pmsg_1+2
  8555                        ;	if(pmsg)
  8556                        	.line	1753
  8557                        ;	{
  8558 05:1CFD: A5 02        	lda	<L262+pmsg_1
  8559 05:1CFF: 05 04        	ora	<L262+pmsg_1+2
  8560 05:1D01: D0 03        	bne	L264
  Mon Sep 27 2021  9:39                                                Page 170


  8561 05:1D03: 82 AC 00     	brl	L10151
  8562                        L264:
  8563                        	.line	1754
  8564                        ;		//if(type != IRQE_SOL_TIMER)
  8565                        ;		//if(type == IRQE_KEYBOARD)
  8566                        ;	    //	k_debug_integer("k_irq_device_event:",ty
                    pe);
  8567                        ;		// debugging
  8568                        ;
  8569                        ;		if(type == IRQE_COM1 || type == IRQE_COM
                    2)
  8570                        	.line	1760
  8571                        ;		{
  8572 05:1D06: A5 09        	lda	<L261+type_0
  8573 05:1D08: C9 03 00     	cmp	#<$3
  8574 05:1D0B: D0 03        	bne	L266
  8575 05:1D0D: 82 0A 00     	brl	L265
  8576                        L266:
  8577 05:1D10: A5 09        	lda	<L261+type_0
  8578 05:1D12: C9 04 00     	cmp	#<$4
  8579 05:1D15: F0 03        	beq	L267
  8580 05:1D17: 82 0C 00     	brl	L10152
  8581                        L267:
  8582                        L265:
  8583                        	.line	1761
  8584                        ;			k_debug_integer("k_irq_device_ev
                    ent:IRQE_COM*:",type);
  8585                        	.line	1762
  8586 05:1D1A: D4 09        	pei	<L261+type_0
  8587 05:1D1C: F4 xx xx     	pea	#^L230
  8588 05:1D1F: F4 xx xx     	pea	#<L230
  8589 05:1D22: 22 xx xx xx  	jsl	~~k_debug_integer
  8590                        ;			//k_mem_deallocate_heap(pmsg);
  8591                        ;			//return;
  8592                        ;		}
  8593                        	.line	1765
  8594                        ;
  8595                        ;		if(type == IRQE_CTLR_RESET)
  8596                        L10152:
  8597                        	.line	1767
  8598                        ;		{
  8599 05:1D26: A5 09        	lda	<L261+type_0
  8600 05:1D28: C9 09 00     	cmp	#<$9
  8601 05:1D2B: F0 03        	beq	L268
  8602 05:1D2D: 82 38 00     	brl	L10153
  8603                        L268:
  8604                        	.line	1768
  8605                        ;			k_debug_integer("k_irq_device_ev
                    ent:IRQE_CTLR_RESET:",timer);
  8606                        	.line	1769
  8607 05:1D30: D4 0B        	pei	<L261+timer_0
  8608 05:1D32: F4 xx xx     	pea	#^L230+30
  8609 05:1D35: F4 xx xx     	pea	#<L230+30
  8610 05:1D38: 22 xx xx xx  	jsl	~~k_debug_integer
  8611                        ;			if(timer == -1)
  8612                        	.line	1770
  8613                        ;			{
  8614 05:1D3C: A5 0B        	lda	<L261+timer_0
  Mon Sep 27 2021  9:39                                                Page 171


  8615 05:1D3E: C9 FF FF     	cmp	#<$ffffffff
  8616 05:1D41: D0 05        	bne	L269
  8617 05:1D43: A5 0D        	lda	<L261+timer_0+2
  8618 05:1D45: C9 FF FF     	cmp	#^$ffffffff
  8619                        L269:
  8620 05:1D48: F0 03        	beq	L270
  8621 05:1D4A: 82 1B 00     	brl	L10154
  8622                        L270:
  8623                        	.line	1771
  8624                        ;				_k_mouseState.buttonLeft
                    Down   = FALSE;
  8625                        	.line	1772
  8626 05:1D4D: E2 20        	sep	#$20
  8627                        	longa	off
  8628 05:1D4F: 9C xx xx     	stz	|~~_k_mouseState+4
  8629 05:1D52: C2 20        	rep	#$20
  8630                        	longa	on
  8631                        ;				_k_mouseState.buttonMidd
                    leDown = FALSE;
  8632                        	.line	1773
  8633 05:1D54: E2 20        	sep	#$20
  8634                        	longa	off
  8635 05:1D56: 9C xx xx     	stz	|~~_k_mouseState+14
  8636 05:1D59: C2 20        	rep	#$20
  8637                        	longa	on
  8638                        ;				_k_mouseState.buttonRigh
                    tDown  = FALSE;
  8639                        	.line	1774
  8640 05:1D5B: E2 20        	sep	#$20
  8641                        	longa	off
  8642 05:1D5D: 9C xx xx     	stz	|~~_k_mouseState+9
  8643 05:1D60: C2 20        	rep	#$20
  8644                        	longa	on
  8645                        ;				_k_mouseState.lastEvent 
                    = 0;
  8646                        	.line	1775
  8647 05:1D62: 9C xx xx     	stz	|~~_k_mouseState
  8648 05:1D65: 9C xx xx     	stz	|~~_k_mouseState+2
  8649                        ;			}
  8650                        	.line	1776
  8651                        ;		}
  8652                        L10154:
  8653                        	.line	1777
  8654                        ;
  8655                        ;		if(type == IRQE_MOUSE)
  8656                        L10153:
  8657                        	.line	1779
  8658                        ;			pmsg = k_updateMouseState(pmsg,t
                    imer,data);
  8659 05:1D68: A5 09        	lda	<L261+type_0
  8660 05:1D6A: C9 02 00     	cmp	#<$2
  8661 05:1D6D: F0 03        	beq	L271
  8662 05:1D6F: 82 14 00     	brl	L10155
  8663                        L271:
  8664                        	.line	1780
  8665 05:1D72: D4 11        	pei	<L261+data_0+2
  8666 05:1D74: D4 0F        	pei	<L261+data_0
  8667 05:1D76: D4 0D        	pei	<L261+timer_0+2
  Mon Sep 27 2021  9:39                                                Page 172


  8668 05:1D78: D4 0B        	pei	<L261+timer_0
  8669 05:1D7A: D4 04        	pei	<L262+pmsg_1+2
  8670 05:1D7C: D4 02        	pei	<L262+pmsg_1
  8671 05:1D7E: 22 C2 1D 05  	jsl	~~k_updateMouseState
  8672 05:1D82: 85 02        	sta	<L262+pmsg_1
  8673 05:1D84: 86 04        	stx	<L262+pmsg_1+2
  8674                        ;
  8675                        ;		bRet = k_enqueue(_k_eventQueue,pmsg);
  8676                        L10155:
  8677                        	.line	1782
  8678 05:1D86: D4 04        	pei	<L262+pmsg_1+2
  8679 05:1D88: D4 02        	pei	<L262+pmsg_1
  8680 05:1D8A: AD xx xx     	lda	|~~_k_eventQueue+2
  8681 05:1D8D: 48           	pha
  8682 05:1D8E: AD xx xx     	lda	|~~_k_eventQueue
  8683 05:1D91: 48           	pha
  8684 05:1D92: 22 xx xx xx  	jsl	~~k_enqueue
  8685 05:1D96: E2 20        	sep	#$20
  8686                        	longa	off
  8687 05:1D98: 85 01        	sta	<L262+bRet_1
  8688 05:1D9A: C2 20        	rep	#$20
  8689                        	longa	on
  8690                        ;		if(!bRet)
  8691                        	.line	1783
  8692                        ;		{
  8693 05:1D9C: A5 01        	lda	<L262+bRet_1
  8694 05:1D9E: 29 FF 00     	and	#$ff
  8695 05:1DA1: F0 03        	beq	L272
  8696 05:1DA3: 82 0C 00     	brl	L10156
  8697                        L272:
  8698                        	.line	1784
  8699                        ;			k_debug_integer("k_irq_device_ev
                    ent:fail:type:",type);
  8700                        	.line	1785
  8701 05:1DA6: D4 09        	pei	<L261+type_0
  8702 05:1DA8: F4 xx xx     	pea	#^L230+66
  8703 05:1DAB: F4 xx xx     	pea	#<L230+66
  8704 05:1DAE: 22 xx xx xx  	jsl	~~k_debug_integer
  8705                        ;			//k_debug_integer("k_irq_device_
                    event:fail:id:",_k_irq_handler_calls);
  8706                        ;		}
  8707                        	.line	1787
  8708                        ;	}
  8709                        L10156:
  8710                        	.line	1788
  8711                        ;}
  8712                        L10151:
  8713                        	.line	1789
  8714                        L273:
  8715 05:1DB2: A5 07        	lda	<L261+2
  8716 05:1DB4: 85 11        	sta	<L261+2+10
  8717 05:1DB6: A5 06        	lda	<L261+1
  8718 05:1DB8: 85 10        	sta	<L261+1+10
  8719 05:1DBA: 2B           	pld
  8720 05:1DBB: 3B           	tsc
  8721 05:1DBC: 18           	clc
  8722 05:1DBD: 69 0F 00     	adc	#L261+10
  8723 05:1DC0: 1B           	tcs
  Mon Sep 27 2021  9:39                                                Page 173


  8724 05:1DC1: 6B           	rtl
  8725                        	.endblock	1789
  8726             00000005   L261	equ	5
  8727             00000001   L262	equ	1
  8728 05:1DC2:              	ends
  8729                        	efunc
  8730                        	.endfunc	1789,1,5
  8731                        	.line	1789
  8732                        	data
  8733                        L230:
  8734 00:07B7: 6B 5F 69 72  	db	$6B,$5F,$69,$72,$71,$5F,$64,$65,$76,$69,
                    $63,$65,$5F,$65,$76
       00:07BB: 71 5F 64 65 
       00:07BF: 76 69 63 65 
       00:07C3: 5F 65 76 
  8735 00:07C6: 65 6E 74 3A  	db	$65,$6E,$74,$3A,$49,$52,$51,$45,$5F,$43,
                    $4F,$4D,$2A,$3A,$00
       00:07CA: 49 52 51 45 
       00:07CE: 5F 43 4F 4D 
       00:07D2: 2A 3A 00 
  8736 00:07D5: 6B 5F 69 72  	db	$6B,$5F,$69,$72,$71,$5F,$64,$65,$76,$69,
                    $63,$65,$5F,$65,$76
       00:07D9: 71 5F 64 65 
       00:07DD: 76 69 63 65 
       00:07E1: 5F 65 76 
  8737 00:07E4: 65 6E 74 3A  	db	$65,$6E,$74,$3A,$49,$52,$51,$45,$5F,$43,
                    $54,$4C,$52,$5F,$52
       00:07E8: 49 52 51 45 
       00:07EC: 5F 43 54 4C 
       00:07F0: 52 5F 52 
  8738 00:07F3: 45 53 45 54  	db	$45,$53,$45,$54,$3A,$00,$6B,$5F,$69,$72,
                    $71,$5F,$64,$65,$76
       00:07F7: 3A 00 6B 5F 
       00:07FB: 69 72 71 5F 
       00:07FF: 64 65 76 
  8739 00:0802: 69 63 65 5F  	db	$69,$63,$65,$5F,$65,$76,$65,$6E,$74,$3A,
                    $66,$61,$69,$6C,$3A
       00:0806: 65 76 65 6E 
       00:080A: 74 3A 66 61 
       00:080E: 69 6C 3A 
  8740 00:0811: 74 79 70 65  	db	$74,$79,$70,$65,$3A,$00
       00:0815: 3A 00 
  8741 00:0817:              	ends
  8742                        ;
  8743                        ;PFXOSMESSAGE k_updateMouseState(PFXOSMESSAGE pmsg
                    ,ULONG timer,void FAR *data)
  8744                        ;{
  8745                        	.line	1791
  8746                        	.line	1792
  8747                        	EVTMAN
  8748                        	xdef	~~k_updateMouseState
  8749                        	func
  8750                        	.function	1792
  8751                        ~~k_updateMouseState:
  8752                        	longa	on
  8753                        	longi	on
  8754 05:1DC2: 3B           	tsc
  8755 05:1DC3: 38           	sec
  Mon Sep 27 2021  9:39                                                Page 174


  8756 05:1DC4: E9 0E 00     	sbc	#L275
  8757 05:1DC7: 1B           	tcs
  8758 05:1DC8: 0B           	phd
  8759 05:1DC9: 5B           	tcd
  8760             00000004   pmsg_0	set	4
  8761             00000008   timer_0	set	8
  8762             0000000C   data_0	set	12
  8763                        	.block	1792
  8764                        ;	ULONG lastTimer = _k_mouseState.lastEvent;
  8765                        ;
  8766                        ;	INT statusLeft   = ((LPCHAR)data)[0] & 1;
  8767                        ;	INT statusRight  = ((LPCHAR)data)[0] & 2;
  8768                        ;	INT statusMiddle = ((LPCHAR)data)[0] & 4;
  8769                        ;
  8770                        ;	if(_k_mouseState.buttonLeftDown)
  8771             00000000   lastTimer_1	set	0
  8772             00000004   statusLeft_1	set	4
  8773             00000006   statusRight_1	set	6
  8774             00000008   statusMiddle_1	set	8
  8775                        	.sym	lastTimer,0,18,1,32
  8776                        	.sym	statusLeft,4,5,1,16
  8777                        	.sym	statusRight,6,5,1,16
  8778                        	.sym	statusMiddle,8,5,1,16
  8779                        	.sym	pmsg,4,138,6,32,16
  8780                        	.sym	timer,8,18,6,32
  8781                        	.sym	data,12,129,6,32
  8782 05:1DCA: AD xx xx     	lda	|~~_k_mouseState
  8783 05:1DCD: 85 05        	sta	<L276+lastTimer_1
  8784 05:1DCF: AD xx xx     	lda	|~~_k_mouseState+2
  8785 05:1DD2: 85 07        	sta	<L276+lastTimer_1+2
  8786 05:1DD4: A7 1A        	lda	[<L275+data_0]
  8787 05:1DD6: 29 01 00     	and	#<$1
  8788 05:1DD9: 85 09        	sta	<L276+statusLeft_1
  8789 05:1DDB: A7 1A        	lda	[<L275+data_0]
  8790 05:1DDD: 29 02 00     	and	#<$2
  8791 05:1DE0: 85 0B        	sta	<L276+statusRight_1
  8792 05:1DE2: A7 1A        	lda	[<L275+data_0]
  8793 05:1DE4: 29 04 00     	and	#<$4
  8794 05:1DE7: 85 0D        	sta	<L276+statusMiddle_1
  8795                        	.line	1799
  8796                        ;	{
  8797 05:1DE9: AD xx xx     	lda	|~~_k_mouseState+4
  8798 05:1DEC: 29 FF 00     	and	#$ff
  8799 05:1DEF: D0 03        	bne	L278
  8800 05:1DF1: 82 4B 00     	brl	L10157
  8801                        L278:
  8802                        	.line	1800
  8803                        ;		if(statusLeft)
  8804                        	.line	1801
  8805                        ;		{
  8806 05:1DF4: A5 09        	lda	<L276+statusLeft_1
  8807 05:1DF6: D0 03        	bne	L279
  8808 05:1DF8: 82 32 00     	brl	L10158
  8809                        L279:
  8810                        	.line	1802
  8811                        ;			_k_mouseState.buttonLeftDown = 1
                    ;
  8812                        	.line	1803
  Mon Sep 27 2021  9:39                                                Page 175


  8813 05:1DFB: E2 20        	sep	#$20
  8814                        	longa	off
  8815 05:1DFD: A9 01        	lda	#$1
  8816 05:1DFF: 8D xx xx     	sta	|~~_k_mouseState+4
  8817 05:1E02: C2 20        	rep	#$20
  8818                        	longa	on
  8819                        ;			//_k_mouseState.lastLeftDown = t
                    imer;
  8820                        ;
  8821                        ;			if((timer - _k_mouseState.lastLe
                    ftDown) > 5)
  8822                        	.line	1806
  8823                        ;			{
  8824 05:1E04: 38           	sec
  8825 05:1E05: A5 16        	lda	<L275+timer_0
  8826 05:1E07: ED xx xx     	sbc	|~~_k_mouseState+5
  8827 05:1E0A: 85 01        	sta	<R0
  8828 05:1E0C: A5 18        	lda	<L275+timer_0+2
  8829 05:1E0E: ED xx xx     	sbc	|~~_k_mouseState+5+2
  8830 05:1E11: 85 03        	sta	<R0+2
  8831 05:1E13: A9 05 00     	lda	#$5
  8832 05:1E16: C5 01        	cmp	<R0
  8833 05:1E18: A9 00 00     	lda	#$0
  8834 05:1E1B: E5 03        	sbc	<R0+2
  8835 05:1E1D: 90 03        	bcc	L280
  8836 05:1E1F: 82 08 00     	brl	L10159
  8837                        L280:
  8838                        	.line	1807
  8839                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDRAG\r\n");
  8840                        ;				pmsg->type = FX_LBUTTON_
                    DRAG;
  8841                        	.line	1809
  8842 05:1E22: A9 05 0F     	lda	#$f05
  8843 05:1E25: A0 08 00     	ldy	#$8
  8844 05:1E28: 97 12        	sta	[<L275+pmsg_0],Y
  8845                        ;			}
  8846                        	.line	1810
  8847                        ;		}
  8848                        L10159:
  8849                        	.line	1811
  8850                        ;		else
  8851 05:1E2A: 82 0F 00     	brl	L10160
  8852                        L10158:
  8853                        ;		{
  8854                        	.line	1813
  8855                        ;			//k_debug_string("k_updateMouseS
                    tate:LeftMouseUp\r\n");
  8856                        ;			pmsg->type = FX_LBUTTON_UP;
  8857                        	.line	1815
  8858 05:1E2D: A9 06 0F     	lda	#$f06
  8859 05:1E30: A0 08 00     	ldy	#$8
  8860 05:1E33: 97 12        	sta	[<L275+pmsg_0],Y
  8861                        ;			_k_mouseState.buttonLeftDown = 0
                    ;
  8862                        	.line	1816
  8863 05:1E35: E2 20        	sep	#$20
  8864                        	longa	off
  Mon Sep 27 2021  9:39                                                Page 176


  8865 05:1E37: 9C xx xx     	stz	|~~_k_mouseState+4
  8866 05:1E3A: C2 20        	rep	#$20
  8867                        	longa	on
  8868                        ;		}
  8869                        	.line	1817
  8870                        L10160:
  8871                        ;	}
  8872                        	.line	1818
  8873                        ;	else
  8874 05:1E3C: 82 55 00     	brl	L10161
  8875                        L10157:
  8876                        ;	{
  8877                        	.line	1820
  8878                        ;		if(statusLeft)
  8879                        	.line	1821
  8880                        ;		{
  8881 05:1E3F: A5 09        	lda	<L276+statusLeft_1
  8882 05:1E41: D0 03        	bne	L281
  8883 05:1E43: 82 47 00     	brl	L10162
  8884                        L281:
  8885                        	.line	1822
  8886                        ;			_k_mouseState.buttonLeftDown = 1
                    ;
  8887                        	.line	1823
  8888 05:1E46: E2 20        	sep	#$20
  8889                        	longa	off
  8890 05:1E48: A9 01        	lda	#$1
  8891 05:1E4A: 8D xx xx     	sta	|~~_k_mouseState+4
  8892 05:1E4D: C2 20        	rep	#$20
  8893                        	longa	on
  8894                        ;
  8895                        ;			if((timer - _k_mouseState.lastLe
                    ftDown) < 15) // CHANGED from 5
  8896                        	.line	1825
  8897                        ;			{
  8898 05:1E4F: 38           	sec
  8899 05:1E50: A5 16        	lda	<L275+timer_0
  8900 05:1E52: ED xx xx     	sbc	|~~_k_mouseState+5
  8901 05:1E55: 85 01        	sta	<R0
  8902 05:1E57: A5 18        	lda	<L275+timer_0+2
  8903 05:1E59: ED xx xx     	sbc	|~~_k_mouseState+5+2
  8904 05:1E5C: 85 03        	sta	<R0+2
  8905 05:1E5E: A5 01        	lda	<R0
  8906 05:1E60: C9 0F 00     	cmp	#<$f
  8907 05:1E63: A5 03        	lda	<R0+2
  8908 05:1E65: E9 00 00     	sbc	#^$f
  8909 05:1E68: 90 03        	bcc	L282
  8910 05:1E6A: 82 0B 00     	brl	L10163
  8911                        L282:
  8912                        	.line	1826
  8913                        ;				//k_debug_integer("k_upd
                    ateMouseState:LeftMouseDblClick:",timer - _k_mouseState.last
                    LeftDown);
  8914                        ;				pmsg->type = FX_LBUTTON_
                    DBLCLICK;
  8915                        	.line	1828
  8916 05:1E6D: A9 07 0F     	lda	#$f07
  8917 05:1E70: A0 08 00     	ldy	#$8
  Mon Sep 27 2021  9:39                                                Page 177


  8918 05:1E73: 97 12        	sta	[<L275+pmsg_0],Y
  8919                        ;			}
  8920                        	.line	1829
  8921                        ;			else
  8922 05:1E75: 82 08 00     	brl	L10164
  8923                        L10163:
  8924                        ;			{
  8925                        	.line	1831
  8926                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDown\r\n");
  8927                        ;				pmsg->type = FX_LBUTTON_
                    DOWN;
  8928                        	.line	1833
  8929 05:1E78: A9 04 0F     	lda	#$f04
  8930 05:1E7B: A0 08 00     	ldy	#$8
  8931 05:1E7E: 97 12        	sta	[<L275+pmsg_0],Y
  8932                        ;			}
  8933                        	.line	1834
  8934                        L10164:
  8935                        ;			_k_mouseState.lastLeftDown = tim
                    er;
  8936                        	.line	1835
  8937 05:1E80: A5 16        	lda	<L275+timer_0
  8938 05:1E82: 8D xx xx     	sta	|~~_k_mouseState+5
  8939 05:1E85: A5 18        	lda	<L275+timer_0+2
  8940 05:1E87: 8D xx xx     	sta	|~~_k_mouseState+5+2
  8941                        ;		}
  8942                        	.line	1836
  8943                        ;		else
  8944 05:1E8A: 82 07 00     	brl	L10165
  8945                        L10162:
  8946                        ;		{
  8947                        	.line	1838
  8948                        ;
  8949                        ;			_k_mouseState.buttonLeftDown = 0
                    ;
  8950                        	.line	1840
  8951 05:1E8D: E2 20        	sep	#$20
  8952                        	longa	off
  8953 05:1E8F: 9C xx xx     	stz	|~~_k_mouseState+4
  8954 05:1E92: C2 20        	rep	#$20
  8955                        	longa	on
  8956                        ;		}
  8957                        	.line	1841
  8958                        L10165:
  8959                        ;	}
  8960                        	.line	1842
  8961                        L10161:
  8962                        ;
  8963                        ;	if(_k_mouseState.buttonRightDown)
  8964                        	.line	1844
  8965                        ;	{
  8966 05:1E94: AD xx xx     	lda	|~~_k_mouseState+9
  8967 05:1E97: 29 FF 00     	and	#$ff
  8968 05:1E9A: D0 03        	bne	L283
  8969 05:1E9C: 82 4B 00     	brl	L10166
  8970                        L283:
  8971                        	.line	1845
  Mon Sep 27 2021  9:39                                                Page 178


  8972                        ;		if(statusRight)
  8973                        	.line	1846
  8974                        ;		{
  8975 05:1E9F: A5 0B        	lda	<L276+statusRight_1
  8976 05:1EA1: D0 03        	bne	L284
  8977 05:1EA3: 82 32 00     	brl	L10167
  8978                        L284:
  8979                        	.line	1847
  8980                        ;			_k_mouseState.buttonRightDown = 
                    1;
  8981                        	.line	1848
  8982 05:1EA6: E2 20        	sep	#$20
  8983                        	longa	off
  8984 05:1EA8: A9 01        	lda	#$1
  8985 05:1EAA: 8D xx xx     	sta	|~~_k_mouseState+9
  8986 05:1EAD: C2 20        	rep	#$20
  8987                        	longa	on
  8988                        ;			if((timer - _k_mouseState.lastRi
                    ghtDown) > 5)
  8989                        	.line	1849
  8990                        ;			{
  8991 05:1EAF: 38           	sec
  8992 05:1EB0: A5 16        	lda	<L275+timer_0
  8993 05:1EB2: ED xx xx     	sbc	|~~_k_mouseState+10
  8994 05:1EB5: 85 01        	sta	<R0
  8995 05:1EB7: A5 18        	lda	<L275+timer_0+2
  8996 05:1EB9: ED xx xx     	sbc	|~~_k_mouseState+10+2
  8997 05:1EBC: 85 03        	sta	<R0+2
  8998 05:1EBE: A9 05 00     	lda	#$5
  8999 05:1EC1: C5 01        	cmp	<R0
  9000 05:1EC3: A9 00 00     	lda	#$0
  9001 05:1EC6: E5 03        	sbc	<R0+2
  9002 05:1EC8: 90 03        	bcc	L285
  9003 05:1ECA: 82 08 00     	brl	L10168
  9004                        L285:
  9005                        	.line	1850
  9006                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDRAG\r\n");
  9007                        ;				pmsg->type = FX_RBUTTON_
                    DRAG;
  9008                        	.line	1852
  9009 05:1ECD: A9 09 0F     	lda	#$f09
  9010 05:1ED0: A0 08 00     	ldy	#$8
  9011 05:1ED3: 97 12        	sta	[<L275+pmsg_0],Y
  9012                        ;			}
  9013                        	.line	1853
  9014                        ;		}
  9015                        L10168:
  9016                        	.line	1854
  9017                        ;		else
  9018 05:1ED5: 82 0F 00     	brl	L10169
  9019                        L10167:
  9020                        ;		{
  9021                        	.line	1856
  9022                        ;			//k_debug_string("k_updateMouseS
                    tate:RightMouseUp\r\n");
  9023                        ;			pmsg->type = FX_RBUTTON_UP;
  9024                        	.line	1858
  Mon Sep 27 2021  9:39                                                Page 179


  9025 05:1ED8: A9 0A 0F     	lda	#$f0a
  9026 05:1EDB: A0 08 00     	ldy	#$8
  9027 05:1EDE: 97 12        	sta	[<L275+pmsg_0],Y
  9028                        ;			_k_mouseState.buttonRightDown = 
                    0;
  9029                        	.line	1859
  9030 05:1EE0: E2 20        	sep	#$20
  9031                        	longa	off
  9032 05:1EE2: 9C xx xx     	stz	|~~_k_mouseState+9
  9033 05:1EE5: C2 20        	rep	#$20
  9034                        	longa	on
  9035                        ;		}
  9036                        	.line	1860
  9037                        L10169:
  9038                        ;	}
  9039                        	.line	1861
  9040                        ;	else
  9041 05:1EE7: 82 55 00     	brl	L10170
  9042                        L10166:
  9043                        ;	{
  9044                        	.line	1863
  9045                        ;		if(statusRight)
  9046                        	.line	1864
  9047                        ;		{
  9048 05:1EEA: A5 0B        	lda	<L276+statusRight_1
  9049 05:1EEC: D0 03        	bne	L286
  9050 05:1EEE: 82 47 00     	brl	L10171
  9051                        L286:
  9052                        	.line	1865
  9053                        ;			_k_mouseState.buttonRightDown = 
                    1;
  9054                        	.line	1866
  9055 05:1EF1: E2 20        	sep	#$20
  9056                        	longa	off
  9057 05:1EF3: A9 01        	lda	#$1
  9058 05:1EF5: 8D xx xx     	sta	|~~_k_mouseState+9
  9059 05:1EF8: C2 20        	rep	#$20
  9060                        	longa	on
  9061                        ;
  9062                        ;			if((timer - _k_mouseState.lastRi
                    ghtDown) < 5)
  9063                        	.line	1868
  9064                        ;			{
  9065 05:1EFA: 38           	sec
  9066 05:1EFB: A5 16        	lda	<L275+timer_0
  9067 05:1EFD: ED xx xx     	sbc	|~~_k_mouseState+10
  9068 05:1F00: 85 01        	sta	<R0
  9069 05:1F02: A5 18        	lda	<L275+timer_0+2
  9070 05:1F04: ED xx xx     	sbc	|~~_k_mouseState+10+2
  9071 05:1F07: 85 03        	sta	<R0+2
  9072 05:1F09: A5 01        	lda	<R0
  9073 05:1F0B: C9 05 00     	cmp	#<$5
  9074 05:1F0E: A5 03        	lda	<R0+2
  9075 05:1F10: E9 00 00     	sbc	#^$5
  9076 05:1F13: 90 03        	bcc	L287
  9077 05:1F15: 82 0B 00     	brl	L10172
  9078                        L287:
  9079                        	.line	1869
  Mon Sep 27 2021  9:39                                                Page 180


  9080                        ;				//k_debug_integer("k_upd
                    ateMouseState:RightMouseDblClick:",timer - _k_mouseState.las
                    tRightDown);
  9081                        ;				pmsg->type = FX_RBUTTON_
                    DBLCLICK;
  9082                        	.line	1871
  9083 05:1F18: A9 0B 0F     	lda	#$f0b
  9084 05:1F1B: A0 08 00     	ldy	#$8
  9085 05:1F1E: 97 12        	sta	[<L275+pmsg_0],Y
  9086                        ;			}
  9087                        	.line	1872
  9088                        ;			else
  9089 05:1F20: 82 08 00     	brl	L10173
  9090                        L10172:
  9091                        ;			{
  9092                        	.line	1874
  9093                        ;				//k_debug_string("k_upda
                    teMouseState:RightMouseDown\r\n");
  9094                        ;				pmsg->type = FX_RBUTTON_
                    DOWN;
  9095                        	.line	1876
  9096 05:1F23: A9 08 0F     	lda	#$f08
  9097 05:1F26: A0 08 00     	ldy	#$8
  9098 05:1F29: 97 12        	sta	[<L275+pmsg_0],Y
  9099                        ;			}
  9100                        	.line	1877
  9101                        L10173:
  9102                        ;			_k_mouseState.lastRightDown = ti
                    mer;
  9103                        	.line	1878
  9104 05:1F2B: A5 16        	lda	<L275+timer_0
  9105 05:1F2D: 8D xx xx     	sta	|~~_k_mouseState+10
  9106 05:1F30: A5 18        	lda	<L275+timer_0+2
  9107 05:1F32: 8D xx xx     	sta	|~~_k_mouseState+10+2
  9108                        ;		}
  9109                        	.line	1879
  9110                        ;		else
  9111 05:1F35: 82 07 00     	brl	L10174
  9112                        L10171:
  9113                        ;		{
  9114                        	.line	1881
  9115                        ;
  9116                        ;			_k_mouseState.buttonRightDown = 
                    0;
  9117                        	.line	1883
  9118 05:1F38: E2 20        	sep	#$20
  9119                        	longa	off
  9120 05:1F3A: 9C xx xx     	stz	|~~_k_mouseState+9
  9121 05:1F3D: C2 20        	rep	#$20
  9122                        	longa	on
  9123                        ;		}
  9124                        	.line	1884
  9125                        L10174:
  9126                        ;	}
  9127                        	.line	1885
  9128                        L10170:
  9129                        ;
  9130                        ;	if(_k_mouseState.buttonMiddleDown)
  Mon Sep 27 2021  9:39                                                Page 181


  9131                        	.line	1887
  9132                        ;	{
  9133 05:1F3F: AD xx xx     	lda	|~~_k_mouseState+14
  9134 05:1F42: 29 FF 00     	and	#$ff
  9135 05:1F45: D0 03        	bne	L288
  9136 05:1F47: 82 4B 00     	brl	L10175
  9137                        L288:
  9138                        	.line	1888
  9139                        ;		if(statusMiddle)
  9140                        	.line	1889
  9141                        ;		{
  9142 05:1F4A: A5 0D        	lda	<L276+statusMiddle_1
  9143 05:1F4C: D0 03        	bne	L289
  9144 05:1F4E: 82 32 00     	brl	L10176
  9145                        L289:
  9146                        	.line	1890
  9147                        ;			_k_mouseState.buttonMiddleDown =
                     1;
  9148                        	.line	1891
  9149 05:1F51: E2 20        	sep	#$20
  9150                        	longa	off
  9151 05:1F53: A9 01        	lda	#$1
  9152 05:1F55: 8D xx xx     	sta	|~~_k_mouseState+14
  9153 05:1F58: C2 20        	rep	#$20
  9154                        	longa	on
  9155                        ;			if((timer - _k_mouseState.lastMi
                    ddleDown) > 5)
  9156                        	.line	1892
  9157                        ;			{
  9158 05:1F5A: 38           	sec
  9159 05:1F5B: A5 16        	lda	<L275+timer_0
  9160 05:1F5D: ED xx xx     	sbc	|~~_k_mouseState+15
  9161 05:1F60: 85 01        	sta	<R0
  9162 05:1F62: A5 18        	lda	<L275+timer_0+2
  9163 05:1F64: ED xx xx     	sbc	|~~_k_mouseState+15+2
  9164 05:1F67: 85 03        	sta	<R0+2
  9165 05:1F69: A9 05 00     	lda	#$5
  9166 05:1F6C: C5 01        	cmp	<R0
  9167 05:1F6E: A9 00 00     	lda	#$0
  9168 05:1F71: E5 03        	sbc	<R0+2
  9169 05:1F73: 90 03        	bcc	L290
  9170 05:1F75: 82 08 00     	brl	L10177
  9171                        L290:
  9172                        	.line	1893
  9173                        ;				//k_debug_string("k_upda
                    teMouseState:MiddletMouseDRAG\r\n");
  9174                        ;				pmsg->type = FX_MBUTTON_
                    DRAG;
  9175                        	.line	1895
  9176 05:1F78: A9 0D 0F     	lda	#$f0d
  9177 05:1F7B: A0 08 00     	ldy	#$8
  9178 05:1F7E: 97 12        	sta	[<L275+pmsg_0],Y
  9179                        ;			}
  9180                        	.line	1896
  9181                        ;		}
  9182                        L10177:
  9183                        	.line	1897
  9184                        ;		else
  Mon Sep 27 2021  9:39                                                Page 182


  9185 05:1F80: 82 0F 00     	brl	L10178
  9186                        L10176:
  9187                        ;		{
  9188                        	.line	1899
  9189                        ;			//k_debug_string("k_updateMouseS
                    tate:MiddleMouseUp\r\n");
  9190                        ;			pmsg->type = FX_MBUTTON_UP;
  9191                        	.line	1901
  9192 05:1F83: A9 0E 0F     	lda	#$f0e
  9193 05:1F86: A0 08 00     	ldy	#$8
  9194 05:1F89: 97 12        	sta	[<L275+pmsg_0],Y
  9195                        ;			_k_mouseState.buttonMiddleDown =
                     0;
  9196                        	.line	1902
  9197 05:1F8B: E2 20        	sep	#$20
  9198                        	longa	off
  9199 05:1F8D: 9C xx xx     	stz	|~~_k_mouseState+14
  9200 05:1F90: C2 20        	rep	#$20
  9201                        	longa	on
  9202                        ;		}
  9203                        	.line	1903
  9204                        L10178:
  9205                        ;	}
  9206                        	.line	1904
  9207                        ;	else
  9208 05:1F92: 82 55 00     	brl	L10179
  9209                        L10175:
  9210                        ;	{
  9211                        	.line	1906
  9212                        ;		if(statusMiddle)
  9213                        	.line	1907
  9214                        ;		{
  9215 05:1F95: A5 0D        	lda	<L276+statusMiddle_1
  9216 05:1F97: D0 03        	bne	L291
  9217 05:1F99: 82 47 00     	brl	L10180
  9218                        L291:
  9219                        	.line	1908
  9220                        ;			_k_mouseState.buttonMiddleDown =
                     1;
  9221                        	.line	1909
  9222 05:1F9C: E2 20        	sep	#$20
  9223                        	longa	off
  9224 05:1F9E: A9 01        	lda	#$1
  9225 05:1FA0: 8D xx xx     	sta	|~~_k_mouseState+14
  9226 05:1FA3: C2 20        	rep	#$20
  9227                        	longa	on
  9228                        ;
  9229                        ;			if((timer - _k_mouseState.lastMi
                    ddleDown) < 5)
  9230                        	.line	1911
  9231                        ;			{
  9232 05:1FA5: 38           	sec
  9233 05:1FA6: A5 16        	lda	<L275+timer_0
  9234 05:1FA8: ED xx xx     	sbc	|~~_k_mouseState+15
  9235 05:1FAB: 85 01        	sta	<R0
  9236 05:1FAD: A5 18        	lda	<L275+timer_0+2
  9237 05:1FAF: ED xx xx     	sbc	|~~_k_mouseState+15+2
  9238 05:1FB2: 85 03        	sta	<R0+2
  Mon Sep 27 2021  9:39                                                Page 183


  9239 05:1FB4: A5 01        	lda	<R0
  9240 05:1FB6: C9 05 00     	cmp	#<$5
  9241 05:1FB9: A5 03        	lda	<R0+2
  9242 05:1FBB: E9 00 00     	sbc	#^$5
  9243 05:1FBE: 90 03        	bcc	L292
  9244 05:1FC0: 82 0B 00     	brl	L10181
  9245                        L292:
  9246                        	.line	1912
  9247                        ;				//k_debug_integer("k_upd
                    ateMouseState:MiddleMouseDblClick:",timer - _k_mouseState.la
                    stMiddleDown);
  9248                        ;				pmsg->type = FX_MBUTTON_
                    DBLCLICK;
  9249                        	.line	1914
  9250 05:1FC3: A9 0F 0F     	lda	#$f0f
  9251 05:1FC6: A0 08 00     	ldy	#$8
  9252 05:1FC9: 97 12        	sta	[<L275+pmsg_0],Y
  9253                        ;			}
  9254                        	.line	1915
  9255                        ;			else
  9256 05:1FCB: 82 08 00     	brl	L10182
  9257                        L10181:
  9258                        ;			{
  9259                        	.line	1917
  9260                        ;				//k_debug_string("k_upda
                    teMouseState:MiddleMouseDown\r\n");
  9261                        ;				pmsg->type = FX_MBUTTON_
                    DOWN;
  9262                        	.line	1919
  9263 05:1FCE: A9 0C 0F     	lda	#$f0c
  9264 05:1FD1: A0 08 00     	ldy	#$8
  9265 05:1FD4: 97 12        	sta	[<L275+pmsg_0],Y
  9266                        ;			}
  9267                        	.line	1920
  9268                        L10182:
  9269                        ;			_k_mouseState.lastMiddleDown = t
                    imer;
  9270                        	.line	1921
  9271 05:1FD6: A5 16        	lda	<L275+timer_0
  9272 05:1FD8: 8D xx xx     	sta	|~~_k_mouseState+15
  9273 05:1FDB: A5 18        	lda	<L275+timer_0+2
  9274 05:1FDD: 8D xx xx     	sta	|~~_k_mouseState+15+2
  9275                        ;		}
  9276                        	.line	1922
  9277                        ;		else
  9278 05:1FE0: 82 07 00     	brl	L10183
  9279                        L10180:
  9280                        ;		{
  9281                        	.line	1924
  9282                        ;
  9283                        ;			_k_mouseState.buttonMiddleDown =
                     0;
  9284                        	.line	1926
  9285 05:1FE3: E2 20        	sep	#$20
  9286                        	longa	off
  9287 05:1FE5: 9C xx xx     	stz	|~~_k_mouseState+14
  9288 05:1FE8: C2 20        	rep	#$20
  9289                        	longa	on
  Mon Sep 27 2021  9:39                                                Page 184


  9290                        ;		}
  9291                        	.line	1927
  9292                        L10183:
  9293                        ;	}
  9294                        	.line	1928
  9295                        L10179:
  9296                        ;
  9297                        ;	_k_mouseState.lastEvent = timer;
  9298                        	.line	1930
  9299 05:1FEA: A5 16        	lda	<L275+timer_0
  9300 05:1FEC: 8D xx xx     	sta	|~~_k_mouseState
  9301 05:1FEF: A5 18        	lda	<L275+timer_0+2
  9302 05:1FF1: 8D xx xx     	sta	|~~_k_mouseState+2
  9303                        ;
  9304                        ;	return pmsg;
  9305                        	.line	1932
  9306 05:1FF4: A6 14        	ldx	<L275+pmsg_0+2
  9307 05:1FF6: A5 12        	lda	<L275+pmsg_0
  9308                        L293:
  9309 05:1FF8: A8           	tay
  9310 05:1FF9: A5 10        	lda	<L275+2
  9311 05:1FFB: 85 1C        	sta	<L275+2+12
  9312 05:1FFD: A5 0F        	lda	<L275+1
  9313 05:1FFF: 85 1B        	sta	<L275+1+12
  9314 05:2001: 2B           	pld
  9315 05:2002: 3B           	tsc
  9316 05:2003: 18           	clc
  9317 05:2004: 69 1A 00     	adc	#L275+12
  9318 05:2007: 1B           	tcs
  9319 05:2008: 98           	tya
  9320 05:2009: 6B           	rtl
  9321                        ;}
  9322                        	.line	1933
  9323                        	.endblock	1933
  9324             0000000E   L275	equ	14
  9325             00000005   L276	equ	5
  9326 05:200A:              	ends
  9327                        	efunc
  9328                        	.endfunc	1933,5,14
  9329                        	.line	1933
  9330                        ;
  9331                        ;PFXOSMESSAGE k_create_process_msg(void FAR *data)
  9332                        ;{
  9333                        	.line	1935
  9334                        	.line	1936
  9335                        	EVTMAN
  9336                        	xdef	~~k_create_process_msg
  9337                        	func
  9338                        	.function	1936
  9339                        ~~k_create_process_msg:
  9340                        	longa	on
  9341                        	longi	on
  9342 05:200A: 3B           	tsc
  9343 05:200B: 38           	sec
  9344 05:200C: E9 04 00     	sbc	#L294
  9345 05:200F: 1B           	tcs
  9346 05:2010: 0B           	phd
  9347 05:2011: 5B           	tcd
  Mon Sep 27 2021  9:39                                                Page 185


  9348             00000004   data_0	set	4
  9349                        	.block	1936
  9350                        ;	PFXOSMESSAGE pmsg = (PFXOSMESSAGE)k_mem_allocate
                    _heap(sizeof(FXOSMESSAGE));
  9351                        ;	if(pmsg)
  9352             00000000   pmsg_1	set	0
  9353                        	.sym	pmsg,0,138,1,32,16
  9354                        	.sym	data,4,129,6,32
  9355 05:2012: F4 00 00     	pea	#^$27
  9356 05:2015: F4 27 00     	pea	#<$27
  9357 05:2018: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  9358 05:201C: 85 01        	sta	<L295+pmsg_1
  9359 05:201E: 86 03        	stx	<L295+pmsg_1+2
  9360                        	.line	1938
  9361                        ;	{
  9362 05:2020: A5 01        	lda	<L295+pmsg_1
  9363 05:2022: 05 03        	ora	<L295+pmsg_1+2
  9364 05:2024: D0 03        	bne	L297
  9365 05:2026: 82 3E 00     	brl	L10184
  9366                        L297:
  9367                        	.line	1939
  9368                        ;		memset(pmsg,0,sizeof(FXOSMESSAGE));
  9369                        	.line	1940
  9370 05:2029: F4 27 00     	pea	#<$27
  9371 05:202C: F4 00 00     	pea	#<$0
  9372 05:202F: D4 03        	pei	<L295+pmsg_1+2
  9373 05:2031: D4 01        	pei	<L295+pmsg_1
  9374 05:2033: 22 xx xx xx  	jsl	~~memset
  9375                        ;		pmsg->type = FX_PROCESS;
  9376                        	.line	1941
  9377 05:2037: A9 00 FF     	lda	#$ff00
  9378 05:203A: A0 08 00     	ldy	#$8
  9379 05:203D: 97 01        	sta	[<L295+pmsg_1],Y
  9380                        ;		pmsg->dest = FX_MSG_DEFAULT;
  9381                        	.line	1942
  9382 05:203F: A9 FF FF     	lda	#$ffff
  9383 05:2042: A0 04 00     	ldy	#$4
  9384 05:2045: 97 01        	sta	[<L295+pmsg_1],Y
  9385 05:2047: A9 FF FF     	lda	#$ffff
  9386 05:204A: A0 06 00     	ldy	#$6
  9387 05:204D: 97 01        	sta	[<L295+pmsg_1],Y
  9388                        ;		pmsg->src  = FX_MSG_DEFAULT;
  9389                        	.line	1943
  9390 05:204F: A9 FF FF     	lda	#$ffff
  9391 05:2052: 87 01        	sta	[<L295+pmsg_1]
  9392 05:2054: A9 FF FF     	lda	#$ffff
  9393 05:2057: A0 02 00     	ldy	#$2
  9394 05:205A: 97 01        	sta	[<L295+pmsg_1],Y
  9395                        ;		pmsg->data[0] = 0;
  9396                        	.line	1944
  9397 05:205C: E2 20        	sep	#$20
  9398                        	longa	off
  9399 05:205E: A9 00        	lda	#$0
  9400 05:2060: A0 16 00     	ldy	#$16
  9401 05:2063: 97 01        	sta	[<L295+pmsg_1],Y
  9402 05:2065: C2 20        	rep	#$20
  9403                        	longa	on
  9404                        ;	}
  Mon Sep 27 2021  9:39                                                Page 186


  9405                        	.line	1945
  9406                        ;	return pmsg;
  9407                        L10184:
  9408                        	.line	1946
  9409 05:2067: A6 03        	ldx	<L295+pmsg_1+2
  9410 05:2069: A5 01        	lda	<L295+pmsg_1
  9411                        L298:
  9412 05:206B: A8           	tay
  9413 05:206C: A5 06        	lda	<L294+2
  9414 05:206E: 85 0A        	sta	<L294+2+4
  9415 05:2070: A5 05        	lda	<L294+1
  9416 05:2072: 85 09        	sta	<L294+1+4
  9417 05:2074: 2B           	pld
  9418 05:2075: 3B           	tsc
  9419 05:2076: 18           	clc
  9420 05:2077: 69 08 00     	adc	#L294+4
  9421 05:207A: 1B           	tcs
  9422 05:207B: 98           	tya
  9423 05:207C: 6B           	rtl
  9424                        ;}
  9425                        	.line	1947
  9426                        	.endblock	1947
  9427             00000004   L294	equ	4
  9428             00000001   L295	equ	1
  9429 05:207D:              	ends
  9430                        	efunc
  9431                        	.endfunc	1947,1,4
  9432                        	.line	1947
  9433                        ;
  9434                        ;PFXOSMESSAGE k_create_synthetic_window_msg(HWND h
                    Wnd,MSGTYPE type,void FAR *data,UINT length)
  9435                        ;{
  9436                        	.line	1949
  9437                        	.line	1950
  9438                        	EVTMAN
  9439                        	xdef	~~k_create_synthetic_window_msg
  9440                        	func
  9441                        	.function	1950
  9442                        ~~k_create_synthetic_window_msg:
  9443                        	longa	on
  9444                        	longi	on
  9445 05:207D: 3B           	tsc
  9446 05:207E: 38           	sec
  9447 05:207F: E9 08 00     	sbc	#L299
  9448 05:2082: 1B           	tcs
  9449 05:2083: 0B           	phd
  9450 05:2084: 5B           	tcd
  9451             00000004   hWnd_0	set	4
  9452             00000008   type_0	set	8
  9453             0000000A   data_0	set	10
  9454             0000000E   length_0	set	14
  9455                        	.block	1950
  9456                        ;	PFXOSMESSAGE pmsg = (PFXOSMESSAGE)k_mem_allocate
                    _heap(sizeof(FXOSMESSAGE));
  9457                        ;	if(pmsg)
  9458             00000000   pmsg_1	set	0
  9459                        	.sym	pmsg,0,138,1,32,16
  9460                        	.sym	hWnd,4,129,6,32
  Mon Sep 27 2021  9:39                                                Page 187


  9461                        	.sym	type,8,16,6,16
  9462                        	.sym	data,10,129,6,32
  9463                        	.sym	length,14,16,6,16
  9464 05:2085: F4 00 00     	pea	#^$27
  9465 05:2088: F4 27 00     	pea	#<$27
  9466 05:208B: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  9467 05:208F: 85 05        	sta	<L300+pmsg_1
  9468 05:2091: 86 07        	stx	<L300+pmsg_1+2
  9469                        	.line	1952
  9470                        ;	{
  9471 05:2093: A5 05        	lda	<L300+pmsg_1
  9472 05:2095: 05 07        	ora	<L300+pmsg_1+2
  9473 05:2097: D0 03        	bne	L302
  9474 05:2099: 82 67 00     	brl	L10185
  9475                        L302:
  9476                        	.line	1953
  9477                        ;		if(length < 16)
  9478                        	.line	1954
  9479                        ;		{
  9480 05:209C: A5 16        	lda	<L299+length_0
  9481 05:209E: C9 10 00     	cmp	#<$10
  9482 05:20A1: 90 03        	bcc	L303
  9483 05:20A3: 82 5D 00     	brl	L10186
  9484                        L303:
  9485                        	.line	1955
  9486                        ;			memset(pmsg,0,sizeof(FXOSMESSAGE
                    ));
  9487                        	.line	1956
  9488 05:20A6: F4 27 00     	pea	#<$27
  9489 05:20A9: F4 00 00     	pea	#<$0
  9490 05:20AC: D4 07        	pei	<L300+pmsg_1+2
  9491 05:20AE: D4 05        	pei	<L300+pmsg_1
  9492 05:20B0: 22 xx xx xx  	jsl	~~memset
  9493                        ;			//pmsg->type = FX_PROCESS;
  9494                        ;			pmsg->type = type;
  9495                        	.line	1958
  9496 05:20B4: A5 10        	lda	<L299+type_0
  9497 05:20B6: A0 08 00     	ldy	#$8
  9498 05:20B9: 97 05        	sta	[<L300+pmsg_1],Y
  9499                        ;			pmsg->hwnd = hWnd;
  9500                        	.line	1959
  9501 05:20BB: A5 0C        	lda	<L299+hWnd_0
  9502 05:20BD: A0 0A 00     	ldy	#$a
  9503 05:20C0: 97 05        	sta	[<L300+pmsg_1],Y
  9504 05:20C2: A5 0E        	lda	<L299+hWnd_0+2
  9505 05:20C4: A0 0C 00     	ldy	#$c
  9506 05:20C7: 97 05        	sta	[<L300+pmsg_1],Y
  9507                        ;			pmsg->dest = FX_MSG_DEFAULT;
  9508                        	.line	1960
  9509 05:20C9: A9 FF FF     	lda	#$ffff
  9510 05:20CC: A0 04 00     	ldy	#$4
  9511 05:20CF: 97 05        	sta	[<L300+pmsg_1],Y
  9512 05:20D1: A9 FF FF     	lda	#$ffff
  9513 05:20D4: A0 06 00     	ldy	#$6
  9514 05:20D7: 97 05        	sta	[<L300+pmsg_1],Y
  9515                        ;			pmsg->src  = FX_MSG_DEFAULT;
  9516                        	.line	1961
  9517 05:20D9: A9 FF FF     	lda	#$ffff
  Mon Sep 27 2021  9:39                                                Page 188


  9518 05:20DC: 87 05        	sta	[<L300+pmsg_1]
  9519 05:20DE: A9 FF FF     	lda	#$ffff
  9520 05:20E1: A0 02 00     	ldy	#$2
  9521 05:20E4: 97 05        	sta	[<L300+pmsg_1],Y
  9522                        ;			memcpy(pmsg->data,data,length);
  9523                        	.line	1962
  9524 05:20E6: D4 16        	pei	<L299+length_0
  9525 05:20E8: D4 14        	pei	<L299+data_0+2
  9526 05:20EA: D4 12        	pei	<L299+data_0
  9527 05:20EC: 18           	clc
  9528 05:20ED: A9 16 00     	lda	#$16
  9529 05:20F0: 65 05        	adc	<L300+pmsg_1
  9530 05:20F2: 85 01        	sta	<R0
  9531 05:20F4: A9 00 00     	lda	#$0
  9532 05:20F7: 65 07        	adc	<L300+pmsg_1+2
  9533 05:20F9: 85 03        	sta	<R0+2
  9534 05:20FB: D4 03        	pei	<R0+2
  9535 05:20FD: D4 01        	pei	<R0
  9536 05:20FF: 22 xx xx xx  	jsl	~~memcpy
  9537                        ;		}
  9538                        	.line	1963
  9539                        ;	}
  9540                        L10186:
  9541                        	.line	1964
  9542                        ;	return pmsg;
  9543                        L10185:
  9544                        	.line	1965
  9545 05:2103: A6 07        	ldx	<L300+pmsg_1+2
  9546 05:2105: A5 05        	lda	<L300+pmsg_1
  9547                        L304:
  9548 05:2107: A8           	tay
  9549 05:2108: A5 0A        	lda	<L299+2
  9550 05:210A: 85 16        	sta	<L299+2+12
  9551 05:210C: A5 09        	lda	<L299+1
  9552 05:210E: 85 15        	sta	<L299+1+12
  9553 05:2110: 2B           	pld
  9554 05:2111: 3B           	tsc
  9555 05:2112: 18           	clc
  9556 05:2113: 69 14 00     	adc	#L299+12
  9557 05:2116: 1B           	tcs
  9558 05:2117: 98           	tya
  9559 05:2118: 6B           	rtl
  9560                        ;}
  9561                        	.line	1966
  9562                        	.endblock	1966
  9563             00000008   L299	equ	8
  9564             00000005   L300	equ	5
  9565 05:2119:              	ends
  9566                        	efunc
  9567                        	.endfunc	1966,5,8
  9568                        	.line	1966
  9569                        ;
  9570                        ;
  9571                        ;PFXOSMESSAGE k_create_msg(MSGIRQ type,ULONG timer
                    ,void FAR *data)
  9572                        ;{
  9573                        	.line	1969
  9574                        	.line	1970
  Mon Sep 27 2021  9:39                                                Page 189


  9575                        	EVTMAN
  9576                        	xdef	~~k_create_msg
  9577                        	func
  9578                        	.function	1970
  9579                        ~~k_create_msg:
  9580                        	longa	on
  9581                        	longi	on
  9582 05:2119: 3B           	tsc
  9583 05:211A: 38           	sec
  9584 05:211B: E9 08 00     	sbc	#L305
  9585 05:211E: 1B           	tcs
  9586 05:211F: 0B           	phd
  9587 05:2120: 5B           	tcd
  9588             00000004   type_0	set	4
  9589             00000006   timer_0	set	6
  9590             0000000A   data_0	set	10
  9591                        	.block	1970
  9592                        ;	PFXOSMESSAGE pmsg = NULL;
  9593                        ;
  9594                        ;	//if(type == IRQE_SOL_TIMER || type == IRQE_MOUS
                    E)
  9595                        ;	if(_k_ignore_irq_events)
  9596             00000000   pmsg_1	set	0
  9597                        	.sym	pmsg,0,138,1,32,16
  9598                        	.sym	type,4,5,6,16
  9599                        	.sym	timer,6,18,6,32
  9600                        	.sym	data,10,129,6,32
  9601 05:2121: 64 05        	stz	<L306+pmsg_1
  9602 05:2123: 64 07        	stz	<L306+pmsg_1+2
  9603                        	.line	1974
  9604                        ;		return NULL;
  9605 05:2125: AD xx xx     	lda	|~~_k_ignore_irq_events
  9606 05:2128: 29 FF 00     	and	#$ff
  9607 05:212B: D0 03        	bne	L308
  9608 05:212D: 82 19 00     	brl	L10187
  9609                        L308:
  9610                        	.line	1975
  9611 05:2130: A9 00 00     	lda	#$0
  9612 05:2133: AA           	tax
  9613 05:2134: A9 00 00     	lda	#$0
  9614                        L309:
  9615 05:2137: A8           	tay
  9616 05:2138: A5 0A        	lda	<L305+2
  9617 05:213A: 85 14        	sta	<L305+2+10
  9618 05:213C: A5 09        	lda	<L305+1
  9619 05:213E: 85 13        	sta	<L305+1+10
  9620 05:2140: 2B           	pld
  9621 05:2141: 3B           	tsc
  9622 05:2142: 18           	clc
  9623 05:2143: 69 12 00     	adc	#L305+10
  9624 05:2146: 1B           	tcs
  9625 05:2147: 98           	tya
  9626 05:2148: 6B           	rtl
  9627                        ;
  9628                        ;	//static FXOSMESSAGE	_k_irq_events[256];
  9629                        ;	//static BYTE			_k_irq_events_id
                    x = 0;
  9630                        ;
  Mon Sep 27 2021  9:39                                                Page 190


  9631                        ;
  9632                        ;	pmsg = &_k_irq_events[_k_irq_events_idx];
  9633                        L10187:
  9634                        	.line	1981
  9635 05:2149: AD xx xx     	lda	|~~_k_irq_events_idx
  9636 05:214C: 29 FF 00     	and	#$ff
  9637 05:214F: 85 01        	sta	<R0
  9638 05:2151: 64 03        	stz	<R0+2
  9639 05:2153: F4 00 00     	pea	#^$27
  9640 05:2156: F4 27 00     	pea	#<$27
  9641 05:2159: D4 03        	pei	<R0+2
  9642 05:215B: D4 01        	pei	<R0
  9643                        	xref	~~~lmul
  9644 05:215D: 22 xx xx xx  	jsl	~~~lmul
  9645 05:2161: 85 01        	sta	<R0
  9646 05:2163: 86 03        	stx	<R0+2
  9647 05:2165: 18           	clc
  9648 05:2166: AD xx xx     	lda	|~~_k_irq_events
  9649 05:2169: 65 01        	adc	<R0
  9650 05:216B: 85 05        	sta	<L306+pmsg_1
  9651 05:216D: AD xx xx     	lda	|~~_k_irq_events+2
  9652 05:2170: 65 03        	adc	<R0+2
  9653 05:2172: 85 07        	sta	<L306+pmsg_1+2
  9654                        ;
  9655                        ;	//pmsg = (PFXOSMESSAGE)k_mem_allocate_heap(sizeo
                    f(FXOSMESSAGE));
  9656                        ;	//PFXOSMESSAGE pmsg = (PFXOSMESSAGE)malloc(sizeo
                    f(FXOSMESSAGE));
  9657                        ;	if(pmsg)
  9658                        	.line	1985
  9659                        ;	{
  9660 05:2174: A5 05        	lda	<L306+pmsg_1
  9661 05:2176: 05 07        	ora	<L306+pmsg_1+2
  9662 05:2178: D0 03        	bne	L310
  9663 05:217A: 82 DC 02     	brl	L10188
  9664                        L310:
  9665                        	.line	1986
  9666                        ;		memset(pmsg,0,sizeof(FXOSMESSAGE));
  9667                        	.line	1987
  9668 05:217D: F4 27 00     	pea	#<$27
  9669 05:2180: F4 00 00     	pea	#<$0
  9670 05:2183: D4 07        	pei	<L306+pmsg_1+2
  9671 05:2185: D4 05        	pei	<L306+pmsg_1
  9672 05:2187: 22 xx xx xx  	jsl	~~memset
  9673                        ;		pmsg->pheap = (LPVOID)0xFFFFFF;
  9674                        	.line	1988
  9675 05:218B: A9 FF FF     	lda	#$ffff
  9676 05:218E: A0 0E 00     	ldy	#$e
  9677 05:2191: 97 05        	sta	[<L306+pmsg_1],Y
  9678 05:2193: A9 FF 00     	lda	#$ff
  9679 05:2196: A0 10 00     	ldy	#$10
  9680 05:2199: 97 05        	sta	[<L306+pmsg_1],Y
  9681                        ;		pmsg->dest = FX_MSG_DEFAULT;
  9682                        	.line	1989
  9683 05:219B: A9 FF FF     	lda	#$ffff
  9684 05:219E: A0 04 00     	ldy	#$4
  9685 05:21A1: 97 05        	sta	[<L306+pmsg_1],Y
  9686 05:21A3: A9 FF FF     	lda	#$ffff
  Mon Sep 27 2021  9:39                                                Page 191


  9687 05:21A6: A0 06 00     	ldy	#$6
  9688 05:21A9: 97 05        	sta	[<L306+pmsg_1],Y
  9689                        ;		pmsg->src  = FX_MSG_DEFAULT;
  9690                        	.line	1990
  9691 05:21AB: A9 FF FF     	lda	#$ffff
  9692 05:21AE: 87 05        	sta	[<L306+pmsg_1]
  9693 05:21B0: A9 FF FF     	lda	#$ffff
  9694 05:21B3: A0 02 00     	ldy	#$2
  9695 05:21B6: 97 05        	sta	[<L306+pmsg_1],Y
  9696                        ;		pmsg->msgTime = (ULONG)_k_irq_events_idx
                    ;
  9697                        	.line	1991
  9698 05:21B8: AD xx xx     	lda	|~~_k_irq_events_idx
  9699 05:21BB: 29 FF 00     	and	#$ff
  9700 05:21BE: 85 01        	sta	<R0
  9701 05:21C0: 64 03        	stz	<R0+2
  9702 05:21C2: A5 01        	lda	<R0
  9703 05:21C4: A0 12 00     	ldy	#$12
  9704 05:21C7: 97 05        	sta	[<L306+pmsg_1],Y
  9705 05:21C9: A5 03        	lda	<R0+2
  9706 05:21CB: A0 14 00     	ldy	#$14
  9707 05:21CE: 97 05        	sta	[<L306+pmsg_1],Y
  9708                        ;		pmsg->attr = FX_MSGATTR_FAST;
  9709                        	.line	1992
  9710 05:21D0: E2 20        	sep	#$20
  9711                        	longa	off
  9712 05:21D2: A9 02        	lda	#$2
  9713 05:21D4: A0 26 00     	ldy	#$26
  9714 05:21D7: 97 05        	sta	[<L306+pmsg_1],Y
  9715 05:21D9: C2 20        	rep	#$20
  9716                        	longa	on
  9717                        ;		//k_debug_integer("k_create_msg:",type);
  9718                        ;		switch(type)
  9719                        	.line	1994
  9720 05:21DB: A5 0C        	lda	<L305+type_0
  9721 05:21DD: 82 4D 02     	brl	L10189
  9722                        ;		{
  9723                        	.line	1995
  9724                        ;		case IRQE_KEYBOARD_RAW:
  9725                        	.line	1996
  9726                        L10191:
  9727                        ;
  9728                        ;			pmsg->type = FX_KEY_SCANCODE;
  9729                        	.line	1998
  9730 05:21E0: A9 15 0F     	lda	#$f15
  9731 05:21E3: A0 08 00     	ldy	#$8
  9732 05:21E6: 97 05        	sta	[<L306+pmsg_1],Y
  9733                        ;			memcpy(pmsg->data,data,sizeof(KE
                    YSTATE));
  9734                        	.line	1999
  9735 05:21E8: F4 0E 00     	pea	#<$e
  9736 05:21EB: D4 14        	pei	<L305+data_0+2
  9737 05:21ED: D4 12        	pei	<L305+data_0
  9738 05:21EF: 18           	clc
  9739 05:21F0: A9 16 00     	lda	#$16
  9740 05:21F3: 65 05        	adc	<L306+pmsg_1
  9741 05:21F5: 85 01        	sta	<R0
  9742 05:21F7: A9 00 00     	lda	#$0
  Mon Sep 27 2021  9:39                                                Page 192


  9743 05:21FA: 65 07        	adc	<L306+pmsg_1+2
  9744 05:21FC: 85 03        	sta	<R0+2
  9745 05:21FE: D4 03        	pei	<R0+2
  9746 05:2200: D4 01        	pei	<R0
  9747 05:2202: 22 xx xx xx  	jsl	~~memcpy
  9748                        ;			/*
  9749                        ;			pmsg->data[0] = ((LPSTR)data)[0]
                    ; // scanCode
  9750                        ;			pmsg->data[1] = ((LPSTR)data)[1]
                    ; // isShifted
  9751                        ;			pmsg->data[2] = ((LPSTR)data)[2]
                    ; // isAlt
  9752                        ;			pmsg->data[3] = ((LPSTR)data)[3]
                    ; // isExtended
  9753                        ;			pmsg->data[4] = ((LPSTR)data)[4]
                    ; // isCapsLock
  9754                        ;			pmsg->data[5] = ((LPSTR)data)[5]
                    ; // isNumLock
  9755                        ;			pmsg->data[6] = ((LPSTR)data)[6]
                    ; // isScrollLock
  9756                        ;			pmsg->data[7] = ((LPSTR)data)[7]
                    ; // keyChar
  9757                        ;			pmsg->data[8] = ((LPSTR)data)[8]
                    ; // keyChar
  9758                        ;			*/
  9759                        ;
  9760                        ;			/*
  9761                        ;			pmsg->type = FX_KEY_DOWN;
  9762                        ;			if( (pmsg->data[3] == 0) && (pms
                    g->data[0] > 128) )
  9763                        ;			{
  9764                        ;				pmsg->type = FX_KEY_UP;
  9765                        ;			}
  9766                        ;			*/
  9767                        ;			break;
  9768                        	.line	2019
  9769 05:2206: 82 50 02     	brl	L10190
  9770                        ;		case IRQE_KEYBOARD:
  9771                        	.line	2020
  9772                        L10192:
  9773                        ;			pmsg->type = FX_KEY_DOWN;
  9774                        	.line	2021
  9775 05:2209: A9 10 0F     	lda	#$f10
  9776 05:220C: A0 08 00     	ldy	#$8
  9777 05:220F: 97 05        	sta	[<L306+pmsg_1],Y
  9778                        ;			pmsg->data[0] = ((LPSTR)data)[0]
                    ;  //*((INT*)data) & 0x00FF; // keycode
  9779                        	.line	2022
  9780 05:2211: E2 20        	sep	#$20
  9781                        	longa	off
  9782 05:2213: A7 12        	lda	[<L305+data_0]
  9783 05:2215: A0 16 00     	ldy	#$16
  9784 05:2218: 97 05        	sta	[<L306+pmsg_1],Y
  9785 05:221A: C2 20        	rep	#$20
  9786                        	longa	on
  9787                        ;			pmsg->data[1] = ((LPSTR)data)[1]
                    ; //(*((INT*)data) > 256); // exkeycode
  9788                        	.line	2023
  Mon Sep 27 2021  9:39                                                Page 193


  9789 05:221C: E2 20        	sep	#$20
  9790                        	longa	off
  9791 05:221E: A0 01 00     	ldy	#$1
  9792 05:2221: B7 12        	lda	[<L305+data_0],Y
  9793 05:2223: A0 17 00     	ldy	#$17
  9794 05:2226: 97 05        	sta	[<L306+pmsg_1],Y
  9795 05:2228: C2 20        	rep	#$20
  9796                        	longa	on
  9797                        ;			pmsg->data[2] = k_getKeyboardCha
                    r(*((BYTE*)data),pmsg->data[1],pmsg->data[1],0); // char
  9798                        	.line	2024
  9799 05:222A: F4 00 00     	pea	#<$0
  9800 05:222D: A0 17 00     	ldy	#$17
  9801 05:2230: B7 05        	lda	[<L306+pmsg_1],Y
  9802 05:2232: 29 FF 00     	and	#$ff
  9803 05:2235: 48           	pha
  9804 05:2236: A0 17 00     	ldy	#$17
  9805 05:2239: B7 05        	lda	[<L306+pmsg_1],Y
  9806 05:223B: 29 FF 00     	and	#$ff
  9807 05:223E: 48           	pha
  9808 05:223F: A7 12        	lda	[<L305+data_0]
  9809 05:2241: 48           	pha
  9810 05:2242: 22 D9 24 05  	jsl	~~k_getKeyboardChar
  9811 05:2246: E2 20        	sep	#$20
  9812                        	longa	off
  9813 05:2248: A0 18 00     	ldy	#$18
  9814 05:224B: 97 05        	sta	[<L306+pmsg_1],Y
  9815 05:224D: C2 20        	rep	#$20
  9816                        	longa	on
  9817                        ;
  9818                        ;			if(pmsg->data[0] > 128)
  9819                        	.line	2026
  9820                        ;			{
  9821 05:224F: E2 20        	sep	#$20
  9822                        	longa	off
  9823 05:2251: A9 80        	lda	#$80
  9824 05:2253: A0 16 00     	ldy	#$16
  9825 05:2256: D7 05        	cmp	[<L306+pmsg_1],Y
  9826 05:2258: C2 20        	rep	#$20
  9827                        	longa	on
  9828 05:225A: 90 03        	bcc	L311
  9829 05:225C: 82 08 00     	brl	L10193
  9830                        L311:
  9831                        	.line	2027
  9832                        ;				pmsg->type = FX_KEY_UP;
  9833                        	.line	2028
  9834 05:225F: A9 12 0F     	lda	#$f12
  9835 05:2262: A0 08 00     	ldy	#$8
  9836 05:2265: 97 05        	sta	[<L306+pmsg_1],Y
  9837                        ;			}
  9838                        	.line	2029
  9839                        ;
  9840                        ;			if(pmsg->data[2] == 0)
  9841                        L10193:
  9842                        	.line	2031
  9843                        ;			{
  9844 05:2267: A0 18 00     	ldy	#$18
  9845 05:226A: B7 05        	lda	[<L306+pmsg_1],Y
  Mon Sep 27 2021  9:39                                                Page 194


  9846 05:226C: 29 FF 00     	and	#$ff
  9847 05:226F: F0 03        	beq	L312
  9848 05:2271: 82 00 00     	brl	L10194
  9849                        L312:
  9850                        	.line	2032
  9851                        ;				//k_init();
  9852                        ;			}
  9853                        	.line	2034
  9854                        ;
  9855                        ;			break;
  9856                        L10194:
  9857                        	.line	2036
  9858 05:2274: 82 E2 01     	brl	L10190
  9859                        ;		case IRQE_MOUSE:
  9860                        	.line	2037
  9861                        L10195:
  9862                        ;			pmsg->type = FX_MOUSE_MOVE;
  9863                        	.line	2038
  9864 05:2277: A9 03 0F     	lda	#$f03
  9865 05:227A: A0 08 00     	ldy	#$8
  9866 05:227D: 97 05        	sta	[<L306+pmsg_1],Y
  9867                        ;			pmsg->data[0] = *((BYTE*)data) &
                     7; // mouse byte 1
  9868                        	.line	2039
  9869 05:227F: E2 20        	sep	#$20
  9870                        	longa	off
  9871 05:2281: A7 12        	lda	[<L305+data_0]
  9872 05:2283: 29 07        	and	#<$7
  9873 05:2285: C2 20        	rep	#$20
  9874                        	longa	on
  9875 05:2287: E2 20        	sep	#$20
  9876                        	longa	off
  9877 05:2289: A0 16 00     	ldy	#$16
  9878 05:228C: 97 05        	sta	[<L306+pmsg_1],Y
  9879 05:228E: C2 20        	rep	#$20
  9880                        	longa	on
  9881                        ;			pmsg->data[1] = ((LPCHAR)data)[1
                    ];
  9882                        	.line	2040
  9883 05:2290: E2 20        	sep	#$20
  9884                        	longa	off
  9885 05:2292: A0 01 00     	ldy	#$1
  9886 05:2295: B7 12        	lda	[<L305+data_0],Y
  9887 05:2297: A0 17 00     	ldy	#$17
  9888 05:229A: 97 05        	sta	[<L306+pmsg_1],Y
  9889 05:229C: C2 20        	rep	#$20
  9890                        	longa	on
  9891                        ;			pmsg->data[2] = ((LPCHAR)data)[2
                    ];
  9892                        	.line	2041
  9893 05:229E: E2 20        	sep	#$20
  9894                        	longa	off
  9895 05:22A0: A0 02 00     	ldy	#$2
  9896 05:22A3: B7 12        	lda	[<L305+data_0],Y
  9897 05:22A5: A0 18 00     	ldy	#$18
  9898 05:22A8: 97 05        	sta	[<L306+pmsg_1],Y
  9899 05:22AA: C2 20        	rep	#$20
  9900                        	longa	on
  Mon Sep 27 2021  9:39                                                Page 195


  9901                        ;			pmsg->data[3] = ((LPCHAR)data)[3
                    ];
  9902                        	.line	2042
  9903 05:22AC: E2 20        	sep	#$20
  9904                        	longa	off
  9905 05:22AE: A0 03 00     	ldy	#$3
  9906 05:22B1: B7 12        	lda	[<L305+data_0],Y
  9907 05:22B3: A0 19 00     	ldy	#$19
  9908 05:22B6: 97 05        	sta	[<L306+pmsg_1],Y
  9909 05:22B8: C2 20        	rep	#$20
  9910                        	longa	on
  9911                        ;			pmsg->data[4] = ((LPCHAR)data)[4
                    ];
  9912                        	.line	2043
  9913 05:22BA: E2 20        	sep	#$20
  9914                        	longa	off
  9915 05:22BC: A0 04 00     	ldy	#$4
  9916 05:22BF: B7 12        	lda	[<L305+data_0],Y
  9917 05:22C1: A0 1A 00     	ldy	#$1a
  9918 05:22C4: 97 05        	sta	[<L306+pmsg_1],Y
  9919 05:22C6: C2 20        	rep	#$20
  9920                        	longa	on
  9921                        ;
  9922                        ;			break;
  9923                        	.line	2045
  9924 05:22C8: 82 8E 01     	brl	L10190
  9925                        ;		case IRQE_COM1:
  9926                        	.line	2046
  9927                        L10196:
  9928                        ;			pmsg->type = FX_COM1_DATA;
  9929                        	.line	2047
  9930 05:22CB: A9 00 FC     	lda	#$fc00
  9931 05:22CE: A0 08 00     	ldy	#$8
  9932 05:22D1: 97 05        	sta	[<L306+pmsg_1],Y
  9933                        ;			pmsg->data[0] = ((LPCHAR)data)[0
                    ];
  9934                        	.line	2048
  9935 05:22D3: E2 20        	sep	#$20
  9936                        	longa	off
  9937 05:22D5: A7 12        	lda	[<L305+data_0]
  9938 05:22D7: A0 16 00     	ldy	#$16
  9939 05:22DA: 97 05        	sta	[<L306+pmsg_1],Y
  9940 05:22DC: C2 20        	rep	#$20
  9941                        	longa	on
  9942                        ;			break;
  9943                        	.line	2049
  9944 05:22DE: 82 78 01     	brl	L10190
  9945                        ;		case IRQE_COM2:
  9946                        	.line	2050
  9947                        L10197:
  9948                        ;			pmsg->type = FX_COM2_DATA;
  9949                        	.line	2051
  9950 05:22E1: A9 01 FC     	lda	#$fc01
  9951 05:22E4: A0 08 00     	ldy	#$8
  9952 05:22E7: 97 05        	sta	[<L306+pmsg_1],Y
  9953                        ;			pmsg->data[0] = ((LPCHAR)data)[0
                    ];
  9954                        	.line	2052
  Mon Sep 27 2021  9:39                                                Page 196


  9955 05:22E9: E2 20        	sep	#$20
  9956                        	longa	off
  9957 05:22EB: A7 12        	lda	[<L305+data_0]
  9958 05:22ED: A0 16 00     	ldy	#$16
  9959 05:22F0: 97 05        	sta	[<L306+pmsg_1],Y
  9960 05:22F2: C2 20        	rep	#$20
  9961                        	longa	on
  9962                        ;			break;
  9963                        	.line	2053
  9964 05:22F4: 82 62 01     	brl	L10190
  9965                        ;		case IRQE_SOL_TIMER:
  9966                        	.line	2054
  9967                        L10198:
  9968                        ;			pmsg->type = FX_PROCESS_TIMER;
  9969                        	.line	2055
  9970 05:22F7: A9 F1 FF     	lda	#$fff1
  9971 05:22FA: A0 08 00     	ldy	#$8
  9972 05:22FD: 97 05        	sta	[<L306+pmsg_1],Y
  9973                        ;			pmsg->data[0] = 0;
  9974                        	.line	2056
  9975 05:22FF: E2 20        	sep	#$20
  9976                        	longa	off
  9977 05:2301: A9 00        	lda	#$0
  9978 05:2303: A0 16 00     	ldy	#$16
  9979 05:2306: 97 05        	sta	[<L306+pmsg_1],Y
  9980 05:2308: C2 20        	rep	#$20
  9981                        	longa	on
  9982                        ;			break;
  9983                        	.line	2057
  9984 05:230A: 82 4C 01     	brl	L10190
  9985                        ;		case IRQE_FLOPPY:
  9986                        	.line	2058
  9987                        L10199:
  9988                        ;			pmsg->type = FX_PROCESS_FLOPPY;
  9989                        	.line	2059
  9990 05:230D: A9 F2 FF     	lda	#$fff2
  9991 05:2310: A0 08 00     	ldy	#$8
  9992 05:2313: 97 05        	sta	[<L306+pmsg_1],Y
  9993                        ;			pmsg->pheap = k_mem_allocate_hea
                    p(512);
  9994                        	.line	2060
  9995 05:2315: F4 00 00     	pea	#^$200
  9996 05:2318: F4 00 02     	pea	#<$200
  9997 05:231B: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  9998 05:231F: 85 01        	sta	<R0
  9999 05:2321: 86 03        	stx	<R0+2
 10000 05:2323: A5 01        	lda	<R0
 10001 05:2325: A0 0E 00     	ldy	#$e
 10002 05:2328: 97 05        	sta	[<L306+pmsg_1],Y
 10003 05:232A: A5 03        	lda	<R0+2
 10004 05:232C: A0 10 00     	ldy	#$10
 10005 05:232F: 97 05        	sta	[<L306+pmsg_1],Y
 10006                        ;			memcpy(pmsg->pheap,data,512);
 10007                        	.line	2061
 10008 05:2331: F4 00 02     	pea	#<$200
 10009 05:2334: D4 14        	pei	<L305+data_0+2
 10010 05:2336: D4 12        	pei	<L305+data_0
 10011 05:2338: A0 10 00     	ldy	#$10
  Mon Sep 27 2021  9:39                                                Page 197


 10012 05:233B: B7 05        	lda	[<L306+pmsg_1],Y
 10013 05:233D: 48           	pha
 10014 05:233E: A0 0E 00     	ldy	#$e
 10015 05:2341: B7 05        	lda	[<L306+pmsg_1],Y
 10016 05:2343: 48           	pha
 10017 05:2344: 22 xx xx xx  	jsl	~~memcpy
 10018                        ;			pmsg->src = FX_MSGSRC_DRIVER;
 10019                        	.line	2062
 10020 05:2348: A9 FE FF     	lda	#$fffe
 10021 05:234B: 87 05        	sta	[<L306+pmsg_1]
 10022 05:234D: A9 FF FF     	lda	#$ffff
 10023 05:2350: A0 02 00     	ldy	#$2
 10024 05:2353: 97 05        	sta	[<L306+pmsg_1],Y
 10025                        ;			//k_debug_integer("IRQE_FLOPPY:"
                    ,FX_PROCESS_FLOPPY);
 10026                        ;			break;
 10027                        	.line	2064
 10028 05:2355: 82 01 01     	brl	L10190
 10029                        ;		case IRQE_SDCARD:
 10030                        	.line	2065
 10031                        L10200:
 10032                        ;			pmsg->type = FX_PROCESS_SDCARD;
 10033                        	.line	2066
 10034 05:2358: A9 F3 FF     	lda	#$fff3
 10035 05:235B: A0 08 00     	ldy	#$8
 10036 05:235E: 97 05        	sta	[<L306+pmsg_1],Y
 10037                        ;			pmsg->data[0] = 0;
 10038                        	.line	2067
 10039 05:2360: E2 20        	sep	#$20
 10040                        	longa	off
 10041 05:2362: A9 00        	lda	#$0
 10042 05:2364: A0 16 00     	ldy	#$16
 10043 05:2367: 97 05        	sta	[<L306+pmsg_1],Y
 10044 05:2369: C2 20        	rep	#$20
 10045                        	longa	on
 10046                        ;			pmsg->src = FX_MSGSRC_DRIVER;
 10047                        	.line	2068
 10048 05:236B: A9 FE FF     	lda	#$fffe
 10049 05:236E: 87 05        	sta	[<L306+pmsg_1]
 10050 05:2370: A9 FF FF     	lda	#$ffff
 10051 05:2373: A0 02 00     	ldy	#$2
 10052 05:2376: 97 05        	sta	[<L306+pmsg_1],Y
 10053                        ;			//pmsg->pheap = k_mem_allocate_h
                    eap(512);
 10054                        ;			//memcpy(pmsg->pheap,data,512);
 10055                        ;			//k_debug_string("k_create_msg:F
                    X_PROCESS_SDCARD\r\n");
 10056                        ;			break;
 10057                        	.line	2072
 10058 05:2378: 82 DE 00     	brl	L10190
 10059                        ;		case IRQE_SDCARD_INS:
 10060                        	.line	2073
 10061                        L10201:
 10062                        ;			pmsg->type = FX_PROCESS_SDCARD;
 10063                        	.line	2074
 10064 05:237B: A9 F3 FF     	lda	#$fff3
 10065 05:237E: A0 08 00     	ldy	#$8
 10066 05:2381: 97 05        	sta	[<L306+pmsg_1],Y
  Mon Sep 27 2021  9:39                                                Page 198


 10067                        ;			pmsg->data[0] = 1;
 10068                        	.line	2075
 10069 05:2383: E2 20        	sep	#$20
 10070                        	longa	off
 10071 05:2385: A9 01        	lda	#$1
 10072 05:2387: A0 16 00     	ldy	#$16
 10073 05:238A: 97 05        	sta	[<L306+pmsg_1],Y
 10074 05:238C: C2 20        	rep	#$20
 10075                        	longa	on
 10076                        ;			pmsg->src = FX_MSGSRC_DRIVER;
 10077                        	.line	2076
 10078 05:238E: A9 FE FF     	lda	#$fffe
 10079 05:2391: 87 05        	sta	[<L306+pmsg_1]
 10080 05:2393: A9 FF FF     	lda	#$ffff
 10081 05:2396: A0 02 00     	ldy	#$2
 10082 05:2399: 97 05        	sta	[<L306+pmsg_1],Y
 10083                        ;			//pmsg->pheap = k_mem_allocate_h
                    eap(512);
 10084                        ;			//memcpy(pmsg->pheap,data,512);
 10085                        ;			//k_debug_string("k_create_msg:I
                    RQE_SDCARD_INS\r\n");
 10086                        ;			break;
 10087                        	.line	2080
 10088 05:239B: 82 BB 00     	brl	L10190
 10089                        ;		case IRQE_LPT_PORT0:
 10090                        	.line	2081
 10091                        L10202:
 10092                        ;			pmsg->type = FX_PROCESS_LPT0;
 10093                        	.line	2082
 10094 05:239E: A9 F4 FF     	lda	#$fff4
 10095 05:23A1: A0 08 00     	ldy	#$8
 10096 05:23A4: 97 05        	sta	[<L306+pmsg_1],Y
 10097                        ;			pmsg->data[0] = 0;
 10098                        	.line	2083
 10099 05:23A6: E2 20        	sep	#$20
 10100                        	longa	off
 10101 05:23A8: A9 00        	lda	#$0
 10102 05:23AA: A0 16 00     	ldy	#$16
 10103 05:23AD: 97 05        	sta	[<L306+pmsg_1],Y
 10104 05:23AF: C2 20        	rep	#$20
 10105                        	longa	on
 10106                        ;			//k_debug_integer("k_create_msg:
                    IRQE_LPT_PORT0:",type);
 10107                        ;			break;
 10108                        	.line	2085
 10109 05:23B1: 82 A5 00     	brl	L10190
 10110                        ;		case IRQE_RTC:
 10111                        	.line	2086
 10112                        L10203:
 10113                        ;			pmsg->type = FX_PROCESS_RTC;
 10114                        	.line	2087
 10115 05:23B4: A9 F5 FF     	lda	#$fff5
 10116 05:23B7: A0 08 00     	ldy	#$8
 10117 05:23BA: 97 05        	sta	[<L306+pmsg_1],Y
 10118                        ;			pmsg->data[0] = 0;
 10119                        	.line	2088
 10120 05:23BC: E2 20        	sep	#$20
 10121                        	longa	off
  Mon Sep 27 2021  9:39                                                Page 199


 10122 05:23BE: A9 00        	lda	#$0
 10123 05:23C0: A0 16 00     	ldy	#$16
 10124 05:23C3: 97 05        	sta	[<L306+pmsg_1],Y
 10125 05:23C5: C2 20        	rep	#$20
 10126                        	longa	on
 10127                        ;			//k_debug_integer("k_create_msg:
                    IRQE_RTC:",type);
 10128                        ;			break;
 10129                        	.line	2090
 10130 05:23C7: 82 8F 00     	brl	L10190
 10131                        ;		case IRQE_OPL2R:
 10132                        	.line	2091
 10133                        L10204:
 10134                        ;			pmsg->type = FX_PROCESS_OPL2R;
 10135                        	.line	2092
 10136 05:23CA: A9 F6 FF     	lda	#$fff6
 10137 05:23CD: A0 08 00     	ldy	#$8
 10138 05:23D0: 97 05        	sta	[<L306+pmsg_1],Y
 10139                        ;			pmsg->data[0] = 0;
 10140                        	.line	2093
 10141 05:23D2: E2 20        	sep	#$20
 10142                        	longa	off
 10143 05:23D4: A9 00        	lda	#$0
 10144 05:23D6: A0 16 00     	ldy	#$16
 10145 05:23D9: 97 05        	sta	[<L306+pmsg_1],Y
 10146 05:23DB: C2 20        	rep	#$20
 10147                        	longa	on
 10148                        ;			//k_debug_integer("k_create_msg:
                    IRQE_OPL2R:",type);
 10149                        ;			break;
 10150                        	.line	2095
 10151 05:23DD: 82 79 00     	brl	L10190
 10152                        ;		case IRQE_OPL2L:
 10153                        	.line	2096
 10154                        L10205:
 10155                        ;			pmsg->type = FX_PROCESS_OPL2L;
 10156                        	.line	2097
 10157 05:23E0: A9 F7 FF     	lda	#$fff7
 10158 05:23E3: A0 08 00     	ldy	#$8
 10159 05:23E6: 97 05        	sta	[<L306+pmsg_1],Y
 10160                        ;			pmsg->data[0] = 0;
 10161                        	.line	2098
 10162 05:23E8: E2 20        	sep	#$20
 10163                        	longa	off
 10164 05:23EA: A9 00        	lda	#$0
 10165 05:23EC: A0 16 00     	ldy	#$16
 10166 05:23EF: 97 05        	sta	[<L306+pmsg_1],Y
 10167 05:23F1: C2 20        	rep	#$20
 10168                        	longa	on
 10169                        ;			//k_debug_integer("k_create_msg:
                    IRQE_OPL2L:",type);
 10170                        ;			break;
 10171                        	.line	2100
 10172 05:23F3: 82 63 00     	brl	L10190
 10173                        ;		case IRQE_VDMA:
 10174                        	.line	2101
 10175                        L10206:
 10176                        ;			pmsg->type = FX_PROCESS_VDMA;
  Mon Sep 27 2021  9:39                                                Page 200


 10177                        	.line	2102
 10178 05:23F6: A9 F8 FF     	lda	#$fff8
 10179 05:23F9: A0 08 00     	ldy	#$8
 10180 05:23FC: 97 05        	sta	[<L306+pmsg_1],Y
 10181                        ;			pmsg->data[0] = 0;
 10182                        	.line	2103
 10183 05:23FE: E2 20        	sep	#$20
 10184                        	longa	off
 10185 05:2400: A9 00        	lda	#$0
 10186 05:2402: A0 16 00     	ldy	#$16
 10187 05:2405: 97 05        	sta	[<L306+pmsg_1],Y
 10188 05:2407: C2 20        	rep	#$20
 10189                        	longa	on
 10190                        ;			//k_debug_integer("k_create_msg:
                    IRQE_VDMA:",type);
 10191                        ;			 break;
 10192                        	.line	2105
 10193 05:2409: 82 4D 00     	brl	L10190
 10194                        ;		case IRQE_SDMA:
 10195                        	.line	2106
 10196                        L10207:
 10197                        ;			pmsg->type = FX_PROCESS_SDMA;
 10198                        	.line	2107
 10199 05:240C: A9 F9 FF     	lda	#$fff9
 10200 05:240F: A0 08 00     	ldy	#$8
 10201 05:2412: 97 05        	sta	[<L306+pmsg_1],Y
 10202                        ;			pmsg->data[0] = 0;
 10203                        	.line	2108
 10204 05:2414: E2 20        	sep	#$20
 10205                        	longa	off
 10206 05:2416: A9 00        	lda	#$0
 10207 05:2418: A0 16 00     	ldy	#$16
 10208 05:241B: 97 05        	sta	[<L306+pmsg_1],Y
 10209 05:241D: C2 20        	rep	#$20
 10210                        	longa	on
 10211                        ;			//k_debug_integer("k_create_msg:
                    IRQE_SDMA:",type);
 10212                        ;			break;
 10213                        	.line	2110
 10214 05:241F: 82 37 00     	brl	L10190
 10215                        ;			/*
 10216                        ;		case IRQE_EXCEPTION:
 10217                        ;			pmsg->type = FX_PROCESS_EXCEPTIO
                    N;
 10218                        ;			pmsg->data[0] = 0;
 10219                        ;			k_debug_integer("k_create_msg:IR
                    QE_EXCEPTION:",type);
 10220                        ;			break;*/
 10221                        ;		default:
 10222                        	.line	2117
 10223                        L10208:
 10224                        ;			pmsg->type = 99;//IRQE_UNKNOWN;
 10225                        	.line	2118
 10226 05:2422: A9 63 00     	lda	#$63
 10227 05:2425: A0 08 00     	ldy	#$8
 10228 05:2428: 97 05        	sta	[<L306+pmsg_1],Y
 10229                        ;			break;
 10230                        	.line	2119
  Mon Sep 27 2021  9:39                                                Page 201


 10231 05:242A: 82 2C 00     	brl	L10190
 10232                        ;		}
 10233                        	.line	2120
 10234                        L10189:
 10235                        	xref	~~~fsw
 10236 05:242D: 22 xx xx xx  	jsl	~~~fsw
 10237 05:2431: 01 00        	dw	1
 10238 05:2433: 11 00        	dw	17
 10239 05:2435: 21 24        	dw	L10208-1
 10240 05:2437: 08 22        	dw	L10192-1
 10241 05:2439: 76 22        	dw	L10195-1
 10242 05:243B: CA 22        	dw	L10196-1
 10243 05:243D: E0 22        	dw	L10197-1
 10244 05:243F: F6 22        	dw	L10198-1
 10245 05:2441: 0C 23        	dw	L10199-1
 10246 05:2443: 57 23        	dw	L10200-1
 10247 05:2445: 7A 23        	dw	L10201-1
 10248 05:2447: 21 24        	dw	L10208-1
 10249 05:2449: 9D 23        	dw	L10202-1
 10250 05:244B: B3 23        	dw	L10203-1
 10251 05:244D: C9 23        	dw	L10204-1
 10252 05:244F: DF 23        	dw	L10205-1
 10253 05:2451: F5 23        	dw	L10206-1
 10254 05:2453: 0B 24        	dw	L10207-1
 10255 05:2455: 21 24        	dw	L10208-1
 10256 05:2457: DF 21        	dw	L10191-1
 10257                        L10190:
 10258                        ;		//k_debug_integer("k_create_msg pmsg->ty
                    pe:",pmsg->type);
 10259                        ;	}
 10260                        	.line	2122
 10261                        ;
 10262                        ;	_k_irq_events_idx++;
 10263                        L10188:
 10264                        	.line	2124
 10265 05:2459: E2 20        	sep	#$20
 10266                        	longa	off
 10267 05:245B: EE xx xx     	inc	|~~_k_irq_events_idx
 10268 05:245E: C2 20        	rep	#$20
 10269                        	longa	on
 10270                        ;
 10271                        ;	return pmsg;
 10272                        	.line	2126
 10273 05:2460: A6 07        	ldx	<L306+pmsg_1+2
 10274 05:2462: A5 05        	lda	<L306+pmsg_1
 10275 05:2464: 82 D0 FC     	brl	L309
 10276                        ;}
 10277                        	.line	2127
 10278                        	.endblock	2127
 10279             00000008   L305	equ	8
 10280             00000005   L306	equ	5
 10281 05:2467:              	ends
 10282                        	efunc
 10283                        	.endfunc	2127,5,8
 10284                        	.line	2127
 10285                        ;
 10286                        ;void k_destory_msg(PFXOSMESSAGE pmsg)
 10287                        ;{
  Mon Sep 27 2021  9:39                                                Page 202


 10288                        	.line	2129
 10289                        	.line	2130
 10290                        	EVTMAN
 10291                        	xdef	~~k_destory_msg
 10292                        	func
 10293                        	.function	2130
 10294                        ~~k_destory_msg:
 10295                        	longa	on
 10296                        	longi	on
 10297 05:2467: 3B           	tsc
 10298 05:2468: 38           	sec
 10299 05:2469: E9 00 00     	sbc	#L313
 10300 05:246C: 1B           	tcs
 10301 05:246D: 0B           	phd
 10302 05:246E: 5B           	tcd
 10303             00000004   pmsg_0	set	4
 10304                        	.block	2130
 10305                        ;	if(pmsg!=NULL)
 10306                        	.sym	pmsg,4,138,6,32,16
 10307                        	.line	2131
 10308                        ;	{
 10309 05:246F: A5 04        	lda	<L313+pmsg_0
 10310 05:2471: 05 06        	ora	<L313+pmsg_0+2
 10311 05:2473: D0 03        	bne	L316
 10312 05:2475: 82 51 00     	brl	L10209
 10313                        L316:
 10314                        	.line	2132
 10315                        ;		if(pmsg->attr & FX_MSGATTR_FAST)
 10316                        	.line	2133
 10317                        ;		{
 10318 05:2478: E2 20        	sep	#$20
 10319                        	longa	off
 10320 05:247A: A0 26 00     	ldy	#$26
 10321 05:247D: B7 04        	lda	[<L313+pmsg_0],Y
 10322 05:247F: 29 02        	and	#<$2
 10323 05:2481: C2 20        	rep	#$20
 10324                        	longa	on
 10325 05:2483: D0 03        	bne	L317
 10326 05:2485: 82 03 00     	brl	L10210
 10327                        L317:
 10328                        	.line	2134
 10329                        ;			//k_debug_long("k_destory_msg:FA
                    ST:IDX:",pmsg->msgTime);
 10330                        ;		}
 10331                        	.line	2136
 10332                        ;		else
 10333 05:2488: 82 3E 00     	brl	L10211
 10334                        L10210:
 10335                        ;		{
 10336                        	.line	2138
 10337                        ;			//k_debug_pointer("k_destory_msg
                    :pmsg:",pmsg);
 10338                        ;			if(pmsg->pheap!=NULL && pmsg->ph
                    eap!=(LPVOID)0xFFFFFF)
 10339                        	.line	2140
 10340                        ;				k_dealloc_message_arg(pm
                    sg->pheap);
 10341 05:248B: A0 0E 00     	ldy	#$e
  Mon Sep 27 2021  9:39                                                Page 203


 10342 05:248E: B7 04        	lda	[<L313+pmsg_0],Y
 10343 05:2490: A0 10 00     	ldy	#$10
 10344 05:2493: 17 04        	ora	[<L313+pmsg_0],Y
 10345 05:2495: D0 03        	bne	L318
 10346 05:2497: 82 27 00     	brl	L10212
 10347                        L318:
 10348 05:249A: A0 0E 00     	ldy	#$e
 10349 05:249D: B7 04        	lda	[<L313+pmsg_0],Y
 10350 05:249F: C9 FF FF     	cmp	#<$ffffff
 10351 05:24A2: D0 08        	bne	L319
 10352 05:24A4: A0 10 00     	ldy	#$10
 10353 05:24A7: B7 04        	lda	[<L313+pmsg_0],Y
 10354 05:24A9: C9 FF 00     	cmp	#^$ffffff
 10355                        L319:
 10356 05:24AC: D0 03        	bne	L320
 10357 05:24AE: 82 10 00     	brl	L10212
 10358                        L320:
 10359                        	.line	2141
 10360 05:24B1: A0 10 00     	ldy	#$10
 10361 05:24B4: B7 04        	lda	[<L313+pmsg_0],Y
 10362 05:24B6: 48           	pha
 10363 05:24B7: A0 0E 00     	ldy	#$e
 10364 05:24BA: B7 04        	lda	[<L313+pmsg_0],Y
 10365 05:24BC: 48           	pha
 10366 05:24BD: 22 9B 17 05  	jsl	~~k_dealloc_message_arg
 10367                        ;
 10368                        ;			/*
 10369                        ;			if(pmsg->pheap == (LPVOID)0xFFFF
                    FF)
 10370                        ;			{
 10371                        ;				//k_debug_pointer("k_des
                    tory_msg:IRQ MSG:",pmsg);
 10372                        ;				free(pmsg);
 10373                        ;			}
 10374                        ;			else
 10375                        ;				k_mem_deallocate_heap(pm
                    sg);
 10376                        ;			*/
 10377                        ;			k_mem_deallocate_heap(pmsg);
 10378                        L10212:
 10379                        	.line	2152
 10380 05:24C1: D4 06        	pei	<L313+pmsg_0+2
 10381 05:24C3: D4 04        	pei	<L313+pmsg_0
 10382 05:24C5: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
 10383                        ;		}
 10384                        	.line	2153
 10385                        L10211:
 10386                        ;	}
 10387                        	.line	2154
 10388                        ;}
 10389                        L10209:
 10390                        	.line	2155
 10391                        L321:
 10392 05:24C9: A5 02        	lda	<L313+2
 10393 05:24CB: 85 06        	sta	<L313+2+4
 10394 05:24CD: A5 01        	lda	<L313+1
 10395 05:24CF: 85 05        	sta	<L313+1+4
 10396 05:24D1: 2B           	pld
  Mon Sep 27 2021  9:39                                                Page 204


 10397 05:24D2: 3B           	tsc
 10398 05:24D3: 18           	clc
 10399 05:24D4: 69 04 00     	adc	#L313+4
 10400 05:24D7: 1B           	tcs
 10401 05:24D8: 6B           	rtl
 10402                        	.endblock	2155
 10403             00000000   L313	equ	0
 10404             00000001   L314	equ	1
 10405 05:24D9:              	ends
 10406                        	efunc
 10407                        	.endfunc	2155,1,0
 10408                        	.line	2155
 10409                        ;
 10410                        ;
 10411                        ;KEYCODE k_getKeyboardChar(SCANCODE sc,int isExt,i
                    nt isShift,int isAlt)
 10412                        ;{
 10413                        	.line	2158
 10414                        	.line	2159
 10415                        	EVTMAN
 10416                        	xdef	~~k_getKeyboardChar
 10417                        	func
 10418                        	.function	2159
 10419                        ~~k_getKeyboardChar:
 10420                        	longa	on
 10421                        	longi	on
 10422 05:24D9: 3B           	tsc
 10423 05:24DA: 38           	sec
 10424 05:24DB: E9 0A 00     	sbc	#L322
 10425 05:24DE: 1B           	tcs
 10426 05:24DF: 0B           	phd
 10427 05:24E0: 5B           	tcd
 10428             00000004   sc_0	set	4
 10429             00000006   isExt_0	set	6
 10430             00000008   isShift_0	set	8
 10431             0000000A   isAlt_0	set	10
 10432                        	.block	2159
 10433                        ;	KEYCODE kc = 0;
 10434                        ;
 10435                        ;	if(isExt)
 10436             00000000   kc_1	set	0
 10437                        	.sym	kc,0,16,1,16
 10438                        	.sym	sc,4,14,6,8
 10439                        	.sym	isExt,6,5,6,16
 10440                        	.sym	isShift,8,5,6,16
 10441                        	.sym	isAlt,10,5,6,16
 10442 05:24E1: 64 09        	stz	<L323+kc_1
 10443                        	.line	2162
 10444                        ;	{
 10445 05:24E3: A5 10        	lda	<L322+isExt_0
 10446 05:24E5: D0 03        	bne	L325
 10447 05:24E7: 82 05 00     	brl	L10213
 10448                        L325:
 10449                        	.line	2163
 10450                        ;		kc = 0;
 10451                        	.line	2164
 10452 05:24EA: 64 09        	stz	<L323+kc_1
 10453                        ;	}
  Mon Sep 27 2021  9:39                                                Page 205


 10454                        	.line	2165
 10455                        ;	else
 10456 05:24EC: 82 54 00     	brl	L10214
 10457                        L10213:
 10458                        ;	{
 10459                        	.line	2167
 10460                        ;		/*
 10461                        ;		if(sc > (sizeof(_k_keyCodesShiftSet) - 1
                    ))
 10462                        ;		{
 10463                        ;			return -1;
 10464                        ;		}
 10465                        ;		*/
 10466                        ;		if(isShift)
 10467                        	.line	2174
 10468                        ;		{
 10469 05:24EF: A5 12        	lda	<L322+isShift_0
 10470 05:24F1: D0 03        	bne	L326
 10471 05:24F3: 82 16 00     	brl	L10215
 10472                        L326:
 10473                        	.line	2175
 10474                        ;			kc =  _k_keyCodesShiftSet[sc];
 10475                        	.line	2176
 10476 05:24F6: A5 0E        	lda	<L322+sc_0
 10477 05:24F8: 29 FF 00     	and	#$ff
 10478 05:24FB: 85 05        	sta	<R1
 10479 05:24FD: A5 05        	lda	<R1
 10480 05:24FF: 0A           	asl	A
 10481 05:2500: 85 01        	sta	<R0
 10482 05:2502: A6 01        	ldx	<R0
 10483 05:2504: BD xx xx     	lda	|~~_k_keyCodesShiftSet,X
 10484 05:2507: 85 09        	sta	<L323+kc_1
 10485                        ;		}
 10486                        	.line	2177
 10487                        ;		else
 10488 05:2509: 82 37 00     	brl	L10216
 10489                        L10215:
 10490                        ;		{
 10491                        	.line	2179
 10492                        ;			if(sc > 128)
 10493                        	.line	2180
 10494                        ;			{
 10495 05:250C: E2 20        	sep	#$20
 10496                        	longa	off
 10497 05:250E: A9 80        	lda	#$80
 10498 05:2510: C5 0E        	cmp	<L322+sc_0
 10499 05:2512: C2 20        	rep	#$20
 10500                        	longa	on
 10501 05:2514: 90 03        	bcc	L327
 10502 05:2516: 82 17 00     	brl	L10217
 10503                        L327:
 10504                        	.line	2181
 10505                        ;				sc-=128;
 10506                        	.line	2182
 10507 05:2519: A5 0E        	lda	<L322+sc_0
 10508 05:251B: 29 FF 00     	and	#$ff
 10509 05:251E: 85 01        	sta	<R0
 10510 05:2520: 18           	clc
  Mon Sep 27 2021  9:39                                                Page 206


 10511 05:2521: A9 80 FF     	lda	#$ff80
 10512 05:2524: 65 01        	adc	<R0
 10513 05:2526: 85 05        	sta	<R1
 10514 05:2528: E2 20        	sep	#$20
 10515                        	longa	off
 10516 05:252A: A5 05        	lda	<R1
 10517 05:252C: 85 0E        	sta	<L322+sc_0
 10518 05:252E: C2 20        	rep	#$20
 10519                        	longa	on
 10520                        ;			}
 10521                        	.line	2183
 10522                        ;			kc =  _k_keyCodesSet[sc];
 10523                        L10217:
 10524                        	.line	2184
 10525 05:2530: A5 0E        	lda	<L322+sc_0
 10526 05:2532: 29 FF 00     	and	#$ff
 10527 05:2535: 85 05        	sta	<R1
 10528 05:2537: A5 05        	lda	<R1
 10529 05:2539: 0A           	asl	A
 10530 05:253A: 85 01        	sta	<R0
 10531 05:253C: A6 01        	ldx	<R0
 10532 05:253E: BD xx xx     	lda	|~~_k_keyCodesSet,X
 10533 05:2541: 85 09        	sta	<L323+kc_1
 10534                        ;		}
 10535                        	.line	2185
 10536                        L10216:
 10537                        ;	}
 10538                        	.line	2186
 10539                        L10214:
 10540                        ;	/*
 10541                        ;	if(kc == 0)
 10542                        ;	{
 10543                        ;		k_debug_hex("UNMAPPED KEY:",sc);
 10544                        ;		k_debug_integer("UNMAPPED isExt:",isExt)
                    ;
 10545                        ;		k_debug_integer("UNMAPPED isShift:",isSh
                    ift);
 10546                        ;		k_debug_integer("UNMAPPED isAlt:",isAlt)
                    ;
 10547                        ;	}
 10548                        ;	else
 10549                        ;	{
 10550                        ;		k_debug_hex("KC:",kc);
 10551                        ;		k_debug_char("CHAR:",kc);
 10552                        ;	}
 10553                        ;	*/
 10554                        ;	return kc;
 10555                        	.line	2201
 10556 05:2543: A5 09        	lda	<L323+kc_1
 10557                        L328:
 10558 05:2545: A8           	tay
 10559 05:2546: A5 0C        	lda	<L322+2
 10560 05:2548: 85 14        	sta	<L322+2+8
 10561 05:254A: A5 0B        	lda	<L322+1
 10562 05:254C: 85 13        	sta	<L322+1+8
 10563 05:254E: 2B           	pld
 10564 05:254F: 3B           	tsc
 10565 05:2550: 18           	clc
  Mon Sep 27 2021  9:39                                                Page 207


 10566 05:2551: 69 12 00     	adc	#L322+8
 10567 05:2554: 1B           	tcs
 10568 05:2555: 98           	tya
 10569 05:2556: 6B           	rtl
 10570                        ;}
 10571                        	.line	2202
 10572                        	.endblock	2202
 10573             0000000A   L322	equ	10
 10574             00000009   L323	equ	9
 10575 05:2557:              	ends
 10576                        	efunc
 10577                        	.endfunc	2202,9,10
 10578                        	.line	2202
 10579                        ;
 10580                        ;
 10581                        ;HANDLE k_register_idle_proc(FXIDLEPROCESS idlePro
                    c,UINT type)
 10582                        ;{
 10583                        	.line	2205
 10584                        	.line	2206
 10585                        	EVTMAN
 10586                        	xdef	~~k_register_idle_proc
 10587                        	func
 10588                        	.function	2206
 10589                        ~~k_register_idle_proc:
 10590                        	longa	on
 10591                        	longi	on
 10592 05:2557: 3B           	tsc
 10593 05:2558: 38           	sec
 10594 05:2559: E9 04 00     	sbc	#L329
 10595 05:255C: 1B           	tcs
 10596 05:255D: 0B           	phd
 10597 05:255E: 5B           	tcd
 10598             00000004   idleProc_0	set	4
 10599             00000008   type_0	set	8
 10600                        	.block	2206
 10601                        ;	PFXNODE hNode = NULL;
 10602                        ;
 10603                        ;	if(_k_eventManager_IdleProcList && idleProc)
 10604             00000000   hNode_1	set	0
 10605                        	.sym	hNode,0,138,1,32,5
 10606                        	.sym	idleProc,4,641,6,32
 10607                        	.sym	type,8,16,6,16
 10608 05:255F: 64 01        	stz	<L330+hNode_1
 10609 05:2561: 64 03        	stz	<L330+hNode_1+2
 10610                        	.line	2209
 10611                        ;	{
 10612 05:2563: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10613 05:2566: 0D xx xx     	ora	|~~_k_eventManager_IdleProcList+2
 10614 05:2569: D0 03        	bne	L332
 10615 05:256B: 82 57 00     	brl	L10218
 10616                        L332:
 10617 05:256E: A5 08        	lda	<L329+idleProc_0
 10618 05:2570: 05 0A        	ora	<L329+idleProc_0+2
 10619 05:2572: D0 03        	bne	L333
 10620 05:2574: 82 4E 00     	brl	L10218
 10621                        L333:
 10622                        	.line	2210
  Mon Sep 27 2021  9:39                                                Page 208


 10623                        ;		//k_debug_pointer("k_register_idle_proc:
                    _k_eventManager_IdleProcList:",_k_eventManager_IdleProcList)
                    ;
 10624                        ;		//k_debug_pointer("k_register_idle_proc:
                    ",idleProc);
 10625                        ;
 10626                        ;		if(type == IDLE_PRIORITY_HIGH)
 10627                        	.line	2214
 10628                        ;			hNode = k_nodelist_naddtolist(_k
                    _eventManager_IdleProcList,NL_TYPE_EVENT_HI_IDLEPROC,(ULONG)
                    idleProc,(LPVOID)idleProc);
 10629 05:2577: A5 0C        	lda	<L329+type_0
 10630 05:2579: C9 01 00     	cmp	#<$1
 10631 05:257C: F0 03        	beq	L334
 10632 05:257E: 82 1E 00     	brl	L10219
 10633                        L334:
 10634                        	.line	2215
 10635 05:2581: D4 0A        	pei	<L329+idleProc_0+2
 10636 05:2583: D4 08        	pei	<L329+idleProc_0
 10637 05:2585: D4 0A        	pei	<L329+idleProc_0+2
 10638 05:2587: D4 08        	pei	<L329+idleProc_0
 10639 05:2589: F4 F1 00     	pea	#<$f1
 10640 05:258C: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10641 05:258F: 48           	pha
 10642 05:2590: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10643 05:2593: 48           	pha
 10644 05:2594: 22 xx xx xx  	jsl	~~k_nodelist_naddtolist
 10645 05:2598: 85 01        	sta	<L330+hNode_1
 10646 05:259A: 86 03        	stx	<L330+hNode_1+2
 10647                        ;		else
 10648 05:259C: 82 1B 00     	brl	L10220
 10649                        L10219:
 10650                        ;			hNode = k_nodelist_naddtolist(_k
                    _eventManager_IdleProcList,NL_TYPE_EVENT_IDLEPROC,(ULONG)idl
                    eProc,(LPVOID)idleProc);
 10651                        	.line	2217
 10652 05:259F: D4 0A        	pei	<L329+idleProc_0+2
 10653 05:25A1: D4 08        	pei	<L329+idleProc_0
 10654 05:25A3: D4 0A        	pei	<L329+idleProc_0+2
 10655 05:25A5: D4 08        	pei	<L329+idleProc_0
 10656 05:25A7: F4 F0 00     	pea	#<$f0
 10657 05:25AA: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10658 05:25AD: 48           	pha
 10659 05:25AE: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10660 05:25B1: 48           	pha
 10661 05:25B2: 22 xx xx xx  	jsl	~~k_nodelist_naddtolist
 10662 05:25B6: 85 01        	sta	<L330+hNode_1
 10663 05:25B8: 86 03        	stx	<L330+hNode_1+2
 10664                        L10220:
 10665                        ;
 10666                        ;
 10667                        ;		//k_debug_nodelist(_k_eventManager_IdleP
                    rocList->listhead);
 10668                        ;
 10669                        ;
 10670                        ;		//k_debug_hex("k_register_idle_proc:type
                    :",hNode->type);
 10671                        ;		//k_debug_pointer("k_register_idle_proc:
  Mon Sep 27 2021  9:39                                                Page 209


                    data:",hNode->data);
 10672                        ;
 10673                        ;		idleProc(FX_IDLEPROC_REG);
 10674                        	.line	2226
 10675 05:25BA: F4 01 00     	pea	#<$1
 10676 05:25BD: A6 0A        	ldx	<L329+idleProc_0+2
 10677 05:25BF: A5 08        	lda	<L329+idleProc_0
 10678                        	xref	~~~lcal
 10679 05:25C1: 22 xx xx xx  	jsl	~~~lcal
 10680                        ;	}
 10681                        	.line	2227
 10682                        ;	//k_debug_pointer("k_register_idle_proc:hNode:",
                    hNode);
 10683                        ;
 10684                        ;	return (HANDLE)hNode;
 10685                        L10218:
 10686                        	.line	2230
 10687 05:25C5: A6 03        	ldx	<L330+hNode_1+2
 10688 05:25C7: A5 01        	lda	<L330+hNode_1
 10689                        L335:
 10690 05:25C9: A8           	tay
 10691 05:25CA: A5 06        	lda	<L329+2
 10692 05:25CC: 85 0C        	sta	<L329+2+6
 10693 05:25CE: A5 05        	lda	<L329+1
 10694 05:25D0: 85 0B        	sta	<L329+1+6
 10695 05:25D2: 2B           	pld
 10696 05:25D3: 3B           	tsc
 10697 05:25D4: 18           	clc
 10698 05:25D5: 69 0A 00     	adc	#L329+6
 10699 05:25D8: 1B           	tcs
 10700 05:25D9: 98           	tya
 10701 05:25DA: 6B           	rtl
 10702                        ;}
 10703                        	.line	2231
 10704                        	.endblock	2231
 10705             00000004   L329	equ	4
 10706             00000001   L330	equ	1
 10707 05:25DB:              	ends
 10708                        	efunc
 10709                        	.endfunc	2231,1,4
 10710                        	.line	2231
 10711                        ;
 10712                        ;BOOL k_unregister_idle_proc(HANDLE hIdleProc)
 10713                        ;{
 10714                        	.line	2233
 10715                        	.line	2234
 10716                        	EVTMAN
 10717                        	xdef	~~k_unregister_idle_proc
 10718                        	func
 10719                        	.function	2234
 10720                        ~~k_unregister_idle_proc:
 10721                        	longa	on
 10722                        	longi	on
 10723 05:25DB: 3B           	tsc
 10724 05:25DC: 38           	sec
 10725 05:25DD: E9 0D 00     	sbc	#L336
 10726 05:25E0: 1B           	tcs
 10727 05:25E1: 0B           	phd
  Mon Sep 27 2021  9:39                                                Page 210


 10728 05:25E2: 5B           	tcd
 10729             00000004   hIdleProc_0	set	4
 10730                        	.block	2234
 10731                        ;	BOOL bRet = FALSE;
 10732                        ;
 10733                        ;	if(_k_eventManager_IdleProcList && hIdleProc)
 10734             00000000   bRet_1	set	0
 10735                        	.sym	bRet,0,14,1,8
 10736                        	.sym	hIdleProc,4,129,6,32
 10737 05:25E3: E2 20        	sep	#$20
 10738                        	longa	off
 10739 05:25E5: 64 09        	stz	<L337+bRet_1
 10740 05:25E7: C2 20        	rep	#$20
 10741                        	longa	on
 10742                        	.line	2237
 10743                        ;	{
 10744 05:25E9: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10745 05:25EC: 0D xx xx     	ora	|~~_k_eventManager_IdleProcList+2
 10746 05:25EF: D0 03        	bne	L339
 10747 05:25F1: 82 51 00     	brl	L10221
 10748                        L339:
 10749 05:25F4: A5 11        	lda	<L336+hIdleProc_0
 10750 05:25F6: 05 13        	ora	<L336+hIdleProc_0+2
 10751 05:25F8: D0 03        	bne	L340
 10752 05:25FA: 82 48 00     	brl	L10221
 10753                        L340:
 10754                        	.line	2238
 10755                        ;		PFXNODE pnode = k_nodelist_remove_node(_
                    k_eventManager_IdleProcList->listhead->next,(PFXNODE)hIdlePr
                    oc);
 10756                        ;		if(pnode)
 10757                        	.block	2240
 10758             00000001   pnode_2	set	1
 10759                        	.sym	pnode,1,138,1,32,5
 10760 05:25FD: D4 13        	pei	<L336+hIdleProc_0+2
 10761 05:25FF: D4 11        	pei	<L336+hIdleProc_0
 10762 05:2601: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10763 05:2604: 85 01        	sta	<R0
 10764 05:2606: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10765 05:2609: 85 03        	sta	<R0+2
 10766 05:260B: A7 01        	lda	[<R0]
 10767 05:260D: 85 05        	sta	<R1
 10768 05:260F: A0 02 00     	ldy	#$2
 10769 05:2612: B7 01        	lda	[<R0],Y
 10770 05:2614: 85 07        	sta	<R1+2
 10771 05:2616: A0 0C 00     	ldy	#$c
 10772 05:2619: B7 05        	lda	[<R1],Y
 10773 05:261B: 48           	pha
 10774 05:261C: A0 0A 00     	ldy	#$a
 10775 05:261F: B7 05        	lda	[<R1],Y
 10776 05:2621: 48           	pha
 10777 05:2622: 22 xx xx xx  	jsl	~~k_nodelist_remove_node
 10778 05:2626: 85 0A        	sta	<L337+pnode_2
 10779 05:2628: 86 0C        	stx	<L337+pnode_2+2
 10780                        	.line	2240
 10781                        ;		{
 10782 05:262A: A5 0A        	lda	<L337+pnode_2
 10783 05:262C: 05 0C        	ora	<L337+pnode_2+2
  Mon Sep 27 2021  9:39                                                Page 211


 10784 05:262E: D0 03        	bne	L342
 10785 05:2630: 82 12 00     	brl	L10222
 10786                        L342:
 10787                        	.line	2241
 10788                        ;			((FXIDLEPROCESS)pnode->data)(FX_
                    IDLEPROC_UNREG);
 10789                        	.line	2242
 10790 05:2633: F4 02 00     	pea	#<$2
 10791 05:2636: A0 04 00     	ldy	#$4
 10792 05:2639: B7 0A        	lda	[<L337+pnode_2],Y
 10793 05:263B: AA           	tax
 10794 05:263C: A0 02 00     	ldy	#$2
 10795 05:263F: B7 0A        	lda	[<L337+pnode_2],Y
 10796                        	xref	~~~lcal
 10797 05:2641: 22 xx xx xx  	jsl	~~~lcal
 10798                        ;		}
 10799                        	.line	2243
 10800                        ;	}
 10801                        L10222:
 10802                        	.endblock	2244
 10803                        	.line	2244
 10804                        ;	return bRet;
 10805                        L10221:
 10806                        	.line	2245
 10807 05:2645: A5 09        	lda	<L337+bRet_1
 10808 05:2647: 29 FF 00     	and	#$ff
 10809                        L343:
 10810 05:264A: A8           	tay
 10811 05:264B: A5 0F        	lda	<L336+2
 10812 05:264D: 85 13        	sta	<L336+2+4
 10813 05:264F: A5 0E        	lda	<L336+1
 10814 05:2651: 85 12        	sta	<L336+1+4
 10815 05:2653: 2B           	pld
 10816 05:2654: 3B           	tsc
 10817 05:2655: 18           	clc
 10818 05:2656: 69 11 00     	adc	#L336+4
 10819 05:2659: 1B           	tcs
 10820 05:265A: 98           	tya
 10821 05:265B: 6B           	rtl
 10822                        ;}
 10823                        	.line	2246
 10824                        	.endblock	2246
 10825             0000000D   L336	equ	13
 10826             00000009   L337	equ	9
 10827 05:265C:              	ends
 10828                        	efunc
 10829                        	.endfunc	2246,9,13
 10830                        	.line	2246
 10831                        ;
 10832                        ;VOID k_process_idle_procs(VOID)
 10833                        ;{
 10834                        	.line	2248
 10835                        	.line	2249
 10836                        	EVTMAN
 10837                        	xdef	~~k_process_idle_procs
 10838                        	func
 10839                        	.function	2249
 10840                        ~~k_process_idle_procs:
  Mon Sep 27 2021  9:39                                                Page 212


 10841                        	longa	on
 10842                        	longi	on
 10843 05:265C: 3B           	tsc
 10844 05:265D: 38           	sec
 10845 05:265E: E9 00 00     	sbc	#L344
 10846 05:2661: 1B           	tcs
 10847 05:2662: 0B           	phd
 10848 05:2663: 5B           	tcd
 10849                        	.block	2249
 10850                        ;	//k_debug_string("k_process_idle_procs\r\n");
 10851                        ;	//k_debug_pointer("k_process_idle_procs:",_k_eve
                    ntManager_IdleProcList->listhead);
 10852                        ;
 10853                        ;	//k_debug_nodelist(_k_eventManager_IdleProcList-
                    >listhead);
 10854                        ;
 10855                        ;	//k_nodelist_foreach_data(_k_eventManager_IdlePr
                    ocList->listhead->next,(LPVOID)FX_IDLEPROC_PROCESS,k_execute
                    _idleprocs);
 10856                        ;	if(_k_eventManager_IdleProcList)
 10857                        	.line	2256
 10858                        ;		k_nodelist_foreach_type(_k_eventManager_
                    IdleProcList,NL_TYPE_EVENT_IDLEPROC,(LPVOID)FX_IDLEPROC_PROC
                    ESS,k_execute_idleprocs);
 10859 05:2664: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10860 05:2667: 0D xx xx     	ora	|~~_k_eventManager_IdleProcList+2
 10861 05:266A: D0 03        	bne	L347
 10862 05:266C: 82 1B 00     	brl	L10223
 10863                        L347:
 10864                        	.line	2257
 10865 05:266F: F4 05 00     	pea	#^~~k_execute_idleprocs
 10866 05:2672: F4 C8 26     	pea	#<~~k_execute_idleprocs
 10867 05:2675: F4 00 00     	pea	#^$4
 10868 05:2678: F4 04 00     	pea	#<$4
 10869 05:267B: F4 F0 00     	pea	#<$f0
 10870 05:267E: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10871 05:2681: 48           	pha
 10872 05:2682: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10873 05:2685: 48           	pha
 10874 05:2686: 22 xx xx xx  	jsl	~~k_nodelist_foreach_type
 10875                        ;}
 10876                        L10223:
 10877                        	.line	2258
 10878                        L348:
 10879 05:268A: 2B           	pld
 10880 05:268B: 3B           	tsc
 10881 05:268C: 18           	clc
 10882 05:268D: 69 00 00     	adc	#L344
 10883 05:2690: 1B           	tcs
 10884 05:2691: 6B           	rtl
 10885                        	.endblock	2258
 10886             00000000   L344	equ	0
 10887             00000001   L345	equ	1
 10888 05:2692:              	ends
 10889                        	efunc
 10890                        	.endfunc	2258,1,0
 10891                        	.line	2258
 10892                        ;
  Mon Sep 27 2021  9:39                                                Page 213


 10893                        ;VOID k_process_hi_idle_procs(VOID)
 10894                        ;{
 10895                        	.line	2260
 10896                        	.line	2261
 10897                        	EVTMAN
 10898                        	xdef	~~k_process_hi_idle_procs
 10899                        	func
 10900                        	.function	2261
 10901                        ~~k_process_hi_idle_procs:
 10902                        	longa	on
 10903                        	longi	on
 10904 05:2692: 3B           	tsc
 10905 05:2693: 38           	sec
 10906 05:2694: E9 00 00     	sbc	#L349
 10907 05:2697: 1B           	tcs
 10908 05:2698: 0B           	phd
 10909 05:2699: 5B           	tcd
 10910                        	.block	2261
 10911                        ;	//k_debug_string("k_process_hi_idle_procs\r\n");
 10912                        ;
 10913                        ;	//k_debug_pointer("k_process_idle_procs:",_k_eve
                    ntManager_IdleProcList->listhead);
 10914                        ;
 10915                        ;	//k_debug_pointer("k_process_hi_idle_procs:point
                    er:",_k_eventManager_IdleProcList);
 10916                        ;	//k_debug_nodelist(_k_eventManager_IdleProcList-
                    >listhead);
 10917                        ;
 10918                        ;	//k_nodelist_foreach_data(_k_eventManager_IdlePr
                    ocList->listhead->next,(LPVOID)FX_IDLEPROC_PROCESS,k_execute
                    _idleprocs);
 10919                        ;	if(_k_eventManager_IdleProcList)
 10920                        	.line	2270
 10921                        ;		k_nodelist_foreach_type(_k_eventManager_
                    IdleProcList,NL_TYPE_EVENT_HI_IDLEPROC,(LPVOID)FX_IDLEPROC_P
                    ROCESS,k_execute_idleprocs);
 10922 05:269A: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10923 05:269D: 0D xx xx     	ora	|~~_k_eventManager_IdleProcList+2
 10924 05:26A0: D0 03        	bne	L352
 10925 05:26A2: 82 1B 00     	brl	L10224
 10926                        L352:
 10927                        	.line	2271
 10928 05:26A5: F4 05 00     	pea	#^~~k_execute_idleprocs
 10929 05:26A8: F4 C8 26     	pea	#<~~k_execute_idleprocs
 10930 05:26AB: F4 00 00     	pea	#^$4
 10931 05:26AE: F4 04 00     	pea	#<$4
 10932 05:26B1: F4 F1 00     	pea	#<$f1
 10933 05:26B4: AD xx xx     	lda	|~~_k_eventManager_IdleProcList+2
 10934 05:26B7: 48           	pha
 10935 05:26B8: AD xx xx     	lda	|~~_k_eventManager_IdleProcList
 10936 05:26BB: 48           	pha
 10937 05:26BC: 22 xx xx xx  	jsl	~~k_nodelist_foreach_type
 10938                        ;}
 10939                        L10224:
 10940                        	.line	2272
 10941                        L353:
 10942 05:26C0: 2B           	pld
 10943 05:26C1: 3B           	tsc
  Mon Sep 27 2021  9:39                                                Page 214


 10944 05:26C2: 18           	clc
 10945 05:26C3: 69 00 00     	adc	#L349
 10946 05:26C6: 1B           	tcs
 10947 05:26C7: 6B           	rtl
 10948                        	.endblock	2272
 10949             00000000   L349	equ	0
 10950             00000001   L350	equ	1
 10951 05:26C8:              	ends
 10952                        	efunc
 10953                        	.endfunc	2272,1,0
 10954                        	.line	2272
 10955                        ;
 10956                        ;void k_execute_idleprocs(LPVOID ctx,LPVOID data)
 10957                        ;{
 10958                        	.line	2274
 10959                        	.line	2275
 10960                        	EVTMAN
 10961                        	xdef	~~k_execute_idleprocs
 10962                        	func
 10963                        	.function	2275
 10964                        ~~k_execute_idleprocs:
 10965                        	longa	on
 10966                        	longi	on
 10967 05:26C8: 3B           	tsc
 10968 05:26C9: 38           	sec
 10969 05:26CA: E9 00 00     	sbc	#L354
 10970 05:26CD: 1B           	tcs
 10971 05:26CE: 0B           	phd
 10972 05:26CF: 5B           	tcd
 10973             00000004   ctx_0	set	4
 10974             00000008   data_0	set	8
 10975                        	.block	2275
 10976                        ;//	k_debug_pointer("k_execute_idleprocs:",d
                    ata);
 10977                        ;	if(data)
 10978                        	.sym	ctx,4,129,6,32
 10979                        	.sym	data,8,129,6,32
 10980                        	.line	2277
 10981                        ;	{
 10982 05:26D0: A5 08        	lda	<L354+data_0
 10983 05:26D2: 05 0A        	ora	<L354+data_0+2
 10984 05:26D4: D0 03        	bne	L357
 10985 05:26D6: 82 0A 00     	brl	L10225
 10986                        L357:
 10987                        	.line	2278
 10988                        ;		((FXIDLEPROCESS)data)((UINT)((ULONG)ctx)
                    );
 10989                        	.line	2279
 10990 05:26D9: D4 04        	pei	<L354+ctx_0
 10991 05:26DB: A6 0A        	ldx	<L354+data_0+2
 10992 05:26DD: A5 08        	lda	<L354+data_0
 10993                        	xref	~~~lcal
 10994 05:26DF: 22 xx xx xx  	jsl	~~~lcal
 10995                        ;	}
 10996                        	.line	2280
 10997                        ;}
 10998                        L10225:
 10999                        	.line	2281
  Mon Sep 27 2021  9:39                                                Page 215


 11000                        L358:
 11001 05:26E3: A5 02        	lda	<L354+2
 11002 05:26E5: 85 0A        	sta	<L354+2+8
 11003 05:26E7: A5 01        	lda	<L354+1
 11004 05:26E9: 85 09        	sta	<L354+1+8
 11005 05:26EB: 2B           	pld
 11006 05:26EC: 3B           	tsc
 11007 05:26ED: 18           	clc
 11008 05:26EE: 69 08 00     	adc	#L354+8
 11009 05:26F1: 1B           	tcs
 11010 05:26F2: 6B           	rtl
 11011                        	.endblock	2281
 11012             00000000   L354	equ	0
 11013             00000001   L355	equ	1
 11014 05:26F3:              	ends
 11015                        	efunc
 11016                        	.endfunc	2281,1,0
 11017                        	.line	2281
 11018                        ;
 11019                        ;VOID DeviceChecks(UINT reason)
 11020                        ;{
 11021                        	.line	2283
 11022                        	.line	2284
 11023                        	EVTMAN
 11024                        	xdef	~~DeviceChecks
 11025                        	func
 11026                        	.function	2284
 11027                        ~~DeviceChecks:
 11028                        	longa	on
 11029                        	longi	on
 11030 05:26F3: 3B           	tsc
 11031 05:26F4: 38           	sec
 11032 05:26F5: E9 01 00     	sbc	#L359
 11033 05:26F8: 1B           	tcs
 11034 05:26F9: 0B           	phd
 11035 05:26FA: 5B           	tcd
 11036             00000004   reason_0	set	4
 11037                        	.block	2284
 11038                        ;	BYTE s = 0;
 11039                        ;
 11040                        ;	switch(reason)
 11041             00000000   s_1	set	0
 11042                        	.sym	s,0,14,1,8
 11043                        	.sym	reason,4,16,6,16
 11044 05:26FB: E2 20        	sep	#$20
 11045                        	longa	off
 11046 05:26FD: 64 01        	stz	<L360+s_1
 11047 05:26FF: C2 20        	rep	#$20
 11048                        	longa	on
 11049                        	.line	2287
 11050 05:2701: A5 05        	lda	<L359+reason_0
 11051 05:2703: 82 29 00     	brl	L10226
 11052                        ;	{
 11053                        	.line	2288
 11054                        ;	case FX_IDLEPROC_PROCESS:
 11055                        	.line	2289
 11056                        L10228:
 11057                        ;		//k_debug_strings("DeviceChecks reason:"
  Mon Sep 27 2021  9:39                                                Page 216


                    ,"FX_IDLEPROC_PROCESS");
 11058                        ;
 11059                        ;
 11060                        ;		/*
 11061                        ;		*((unsigned long*)(&SDC_SD_ADDR_7_0_REG[
                    0])) = 0L;
 11062                        ;
 11063                        ;		//k_debug_string("DeviceChecks FX_IDLEPR
                    OC_PROCESS:Enter\r\n");
 11064                        ;		SDC_TRANS_TYPE_REG[0]    = SDC_TRANS_REA
                    D_BLK;
 11065                        ;
 11066                        ;		//SDC_TRANS_TYPE_REG[0]    = SDC_TRANS_I
                    NIT_SD;
 11067                        ;		SDC_TRANS_CONTROL_REG[0] = SDC_TRANS_STA
                    RT;
 11068                        ;
 11069                        ;		s = SDC_TRANS_BUSY;
 11070                        ;		while(s & SDC_TRANS_BUSY)
 11071                        ;		{
 11072                        ;			s = SDC_TRANS_STATUS_REG[0];
 11073                        ;		}
 11074                        ;
 11075                        ;
 11076                        ;		if(SDC_TRANS_ERROR_REG[0])
 11077                        ;		{
 11078                        ;			k_debug_hex("DeviceChecks SDC_TR
                    ANS_ERROR_REG:",SDC_TRANS_ERROR_REG[0]);
 11079                        ;		}
 11080                        ;
 11081                        ;		//k_debug_string("DeviceChecks FX_IDLEPR
                    OC_PROCESS:Exit\r\n");
 11082                        ;		*/
 11083                        ;
 11084                        ;		break;
 11085                        	.line	2317
 11086 05:2706: 82 3A 00     	brl	L10227
 11087                        ;	case FX_IDLEPROC_REG:
 11088                        	.line	2318
 11089                        L10229:
 11090                        ;		k_debug_strings("DeviceChecks reason:","
                    FX_IDLEPROC_REG");
 11091                        	.line	2319
 11092 05:2709: F4 xx xx     	pea	#^L274+21
 11093 05:270C: F4 xx xx     	pea	#<L274+21
 11094 05:270F: F4 xx xx     	pea	#^L274
 11095 05:2712: F4 xx xx     	pea	#<L274
 11096 05:2715: 22 xx xx xx  	jsl	~~k_debug_strings
 11097                        ;		break;
 11098                        	.line	2320
 11099 05:2719: 82 27 00     	brl	L10227
 11100                        ;	case FX_IDLEPROC_UNREG:
 11101                        	.line	2321
 11102                        L10230:
 11103                        ;		k_debug_strings("DeviceChecks reason:","
                    FX_IDLEPROC_UNREG");
 11104                        	.line	2322
 11105 05:271C: F4 xx xx     	pea	#^L274+58
  Mon Sep 27 2021  9:39                                                Page 217


 11106 05:271F: F4 xx xx     	pea	#<L274+58
 11107 05:2722: F4 xx xx     	pea	#^L274+37
 11108 05:2725: F4 xx xx     	pea	#<L274+37
 11109 05:2728: 22 xx xx xx  	jsl	~~k_debug_strings
 11110                        ;		break;
 11111                        	.line	2323
 11112 05:272C: 82 14 00     	brl	L10227
 11113                        ;	}
 11114                        	.line	2324
 11115                        L10226:
 11116                        	xref	~~~swt
 11117 05:272F: 22 xx xx xx  	jsl	~~~swt
 11118 05:2733: 03 00        	dw	3
 11119 05:2735: 01 00        	dw	1
 11120 05:2737: 08 27        	dw	L10229-1
 11121 05:2739: 02 00        	dw	2
 11122 05:273B: 1B 27        	dw	L10230-1
 11123 05:273D: 04 00        	dw	4
 11124 05:273F: 05 27        	dw	L10228-1
 11125 05:2741: 42 27        	dw	L10227-1
 11126                        L10227:
 11127                        ;}
 11128                        	.line	2325
 11129                        L362:
 11130 05:2743: A5 03        	lda	<L359+2
 11131 05:2745: 85 05        	sta	<L359+2+2
 11132 05:2747: A5 02        	lda	<L359+1
 11133 05:2749: 85 04        	sta	<L359+1+2
 11134 05:274B: 2B           	pld
 11135 05:274C: 3B           	tsc
 11136 05:274D: 18           	clc
 11137 05:274E: 69 03 00     	adc	#L359+2
 11138 05:2751: 1B           	tcs
 11139 05:2752: 6B           	rtl
 11140                        	.endblock	2325
 11141             00000001   L359	equ	1
 11142             00000001   L360	equ	1
 11143 05:2753:              	ends
 11144                        	efunc
 11145                        	.endfunc	2325,1,1
 11146                        	.line	2325
 11147                        	data
 11148                        L274:
 11149 00:0817: 44 65 76 69  	db	$44,$65,$76,$69,$63,$65,$43,$68,$65,$63,
                    $6B,$73,$20,$72,$65
       00:081B: 63 65 43 68 
       00:081F: 65 63 6B 73 
       00:0823: 20 72 65 
 11150 00:0826: 61 73 6F 6E  	db	$61,$73,$6F,$6E,$3A,$00,$46,$58,$5F,$49,
                    $44,$4C,$45,$50,$52
       00:082A: 3A 00 46 58 
       00:082E: 5F 49 44 4C 
       00:0832: 45 50 52 
 11151 00:0835: 4F 43 5F 52  	db	$4F,$43,$5F,$52,$45,$47,$00,$44,$65,$76,
                    $69,$63,$65,$43,$68
       00:0839: 45 47 00 44 
       00:083D: 65 76 69 63 
       00:0841: 65 43 68 
  Mon Sep 27 2021  9:39                                                Page 218


 11152 00:0844: 65 63 6B 73  	db	$65,$63,$6B,$73,$20,$72,$65,$61,$73,$6F,
                    $6E,$3A,$00,$46,$58
       00:0848: 20 72 65 61 
       00:084C: 73 6F 6E 3A 
       00:0850: 00 46 58 
 11153 00:0853: 5F 49 44 4C  	db	$5F,$49,$44,$4C,$45,$50,$52,$4F,$43,$5F,
                    $55,$4E,$52,$45,$47
       00:0857: 45 50 52 4F 
       00:085B: 43 5F 55 4E 
       00:085F: 52 45 47 
 11154 00:0862: 00           	db	$00
 11155 00:0863:              	ends
 11156                        ;
 11157                        ;VOID IdleCleanup(UINT reason)
 11158                        ;{
 11159                        	.line	2327
 11160                        	.line	2328
 11161                        	EVTMAN
 11162                        	xdef	~~IdleCleanup
 11163                        	func
 11164                        	.function	2328
 11165                        ~~IdleCleanup:
 11166                        	longa	on
 11167                        	longi	on
 11168 05:2753: 3B           	tsc
 11169 05:2754: 38           	sec
 11170 05:2755: E9 08 00     	sbc	#L364
 11171 05:2758: 1B           	tcs
 11172 05:2759: 0B           	phd
 11173 05:275A: 5B           	tcd
 11174             00000004   reason_0	set	4
 11175                        	.block	2328
 11176                        ;	PIPCPORT debugport = NULL;
 11177                        ;	LPSTR message = NULL;
 11178                        ;
 11179                        ;	switch(reason)
 11180             00000000   debugport_1	set	0
 11181             00000004   message_1	set	4
 11182                        	.sym	debugport,0,138,1,32,65
 11183                        	.sym	message,4,142,1,32
 11184                        	.sym	reason,4,16,6,16
 11185 05:275B: 64 01        	stz	<L365+debugport_1
 11186 05:275D: 64 03        	stz	<L365+debugport_1+2
 11187 05:275F: 64 05        	stz	<L365+message_1
 11188 05:2761: 64 07        	stz	<L365+message_1+2
 11189                        	.line	2332
 11190 05:2763: A5 0C        	lda	<L364+reason_0
 11191 05:2765: 82 82 00     	brl	L10231
 11192                        ;	{
 11193                        	.line	2333
 11194                        ;	case FX_IDLEPROC_PROCESS:
 11195                        	.line	2334
 11196                        L10233:
 11197                        ;		//k_debug_strings("IdleCleanup reason:",
                    "FX_IDLEPROC_PROCESS");
 11198                        ;
 11199                        ;		debugport =  k_get_ipc_port(IPC_SYS_DEBU
                    G);
  Mon Sep 27 2021  9:39                                                Page 219


 11200                        	.line	2337
 11201 05:2768: F4 xx xx     	pea	#^L363
 11202 05:276B: F4 xx xx     	pea	#<L363
 11203 05:276E: 22 xx xx xx  	jsl	~~k_get_ipc_port
 11204 05:2772: 85 01        	sta	<L365+debugport_1
 11205 05:2774: 86 03        	stx	<L365+debugport_1+2
 11206                        ;		if(debugport)
 11207                        	.line	2338
 11208                        ;		{
 11209 05:2776: A5 01        	lda	<L365+debugport_1
 11210 05:2778: 05 03        	ora	<L365+debugport_1+2
 11211 05:277A: D0 03        	bne	L367
 11212 05:277C: 82 42 00     	brl	L10234
 11213                        L367:
 11214                        	.line	2339
 11215                        ;			message = k_read_ipc_port(debugp
                    ort);
 11216                        	.line	2340
 11217 05:277F: D4 03        	pei	<L365+debugport_1+2
 11218 05:2781: D4 01        	pei	<L365+debugport_1
 11219 05:2783: 22 xx xx xx  	jsl	~~k_read_ipc_port
 11220 05:2787: 85 05        	sta	<L365+message_1
 11221 05:2789: 86 07        	stx	<L365+message_1+2
 11222                        ;			while(message)
 11223                        	.line	2341
 11224                        L10235:
 11225 05:278B: A5 05        	lda	<L365+message_1
 11226 05:278D: 05 07        	ora	<L365+message_1+2
 11227 05:278F: D0 03        	bne	L368
 11228 05:2791: 82 2D 00     	brl	L10236
 11229                        L368:
 11230                        ;			{
 11231                        	.line	2342
 11232                        ;				k_debug_strings("DEBUGPO
                    RT:", ((PFXSTRING)message)->buffer );
 11233                        	.line	2343
 11234 05:2794: A0 06 00     	ldy	#$6
 11235 05:2797: B7 05        	lda	[<L365+message_1],Y
 11236 05:2799: 48           	pha
 11237 05:279A: A0 04 00     	ldy	#$4
 11238 05:279D: B7 05        	lda	[<L365+message_1],Y
 11239 05:279F: 48           	pha
 11240 05:27A0: F4 xx xx     	pea	#^L363+7
 11241 05:27A3: F4 xx xx     	pea	#<L363+7
 11242 05:27A6: 22 xx xx xx  	jsl	~~k_debug_strings
 11243                        ;				k_fxstring_free(((PFXSTR
                    ING)message));
 11244                        	.line	2344
 11245 05:27AA: D4 07        	pei	<L365+message_1+2
 11246 05:27AC: D4 05        	pei	<L365+message_1
 11247 05:27AE: 22 xx xx xx  	jsl	~~k_fxstring_free
 11248                        ;				message = k_read_ipc_por
                    t(debugport);
 11249                        	.line	2345
 11250 05:27B2: D4 03        	pei	<L365+debugport_1+2
 11251 05:27B4: D4 01        	pei	<L365+debugport_1
 11252 05:27B6: 22 xx xx xx  	jsl	~~k_read_ipc_port
 11253 05:27BA: 85 05        	sta	<L365+message_1
  Mon Sep 27 2021  9:39                                                Page 220


 11254 05:27BC: 86 07        	stx	<L365+message_1+2
 11255                        ;			}
 11256                        	.line	2346
 11257 05:27BE: 82 CA FF     	brl	L10235
 11258                        L10236:
 11259                        ;		}
 11260                        	.line	2347
 11261                        ;
 11262                        ;
 11263                        ;		break;
 11264                        L10234:
 11265                        	.line	2350
 11266 05:27C1: 82 3A 00     	brl	L10232
 11267                        ;	case FX_IDLEPROC_REG:
 11268                        	.line	2351
 11269                        L10237:
 11270                        ;		k_debug_strings("IdleCleanup reason:","F
                    X_IDLEPROC_REG");
 11271                        	.line	2352
 11272 05:27C4: F4 xx xx     	pea	#^L363+38
 11273 05:27C7: F4 xx xx     	pea	#<L363+38
 11274 05:27CA: F4 xx xx     	pea	#^L363+18
 11275 05:27CD: F4 xx xx     	pea	#<L363+18
 11276 05:27D0: 22 xx xx xx  	jsl	~~k_debug_strings
 11277                        ;		break;
 11278                        	.line	2353
 11279 05:27D4: 82 27 00     	brl	L10232
 11280                        ;	case FX_IDLEPROC_UNREG:
 11281                        	.line	2354
 11282                        L10238:
 11283                        ;		k_debug_strings("IdleCleanup reason:","F
                    X_IDLEPROC_UNREG");
 11284                        	.line	2355
 11285 05:27D7: F4 xx xx     	pea	#^L363+74
 11286 05:27DA: F4 xx xx     	pea	#<L363+74
 11287 05:27DD: F4 xx xx     	pea	#^L363+54
 11288 05:27E0: F4 xx xx     	pea	#<L363+54
 11289 05:27E3: 22 xx xx xx  	jsl	~~k_debug_strings
 11290                        ;		break;
 11291                        	.line	2356
 11292 05:27E7: 82 14 00     	brl	L10232
 11293                        ;	}
 11294                        	.line	2357
 11295                        L10231:
 11296                        	xref	~~~swt
 11297 05:27EA: 22 xx xx xx  	jsl	~~~swt
 11298 05:27EE: 03 00        	dw	3
 11299 05:27F0: 01 00        	dw	1
 11300 05:27F2: C3 27        	dw	L10237-1
 11301 05:27F4: 02 00        	dw	2
 11302 05:27F6: D6 27        	dw	L10238-1
 11303 05:27F8: 04 00        	dw	4
 11304 05:27FA: 67 27        	dw	L10233-1
 11305 05:27FC: FD 27        	dw	L10232-1
 11306                        L10232:
 11307                        ;}
 11308                        	.line	2358
 11309                        L369:
  Mon Sep 27 2021  9:39                                                Page 221


 11310 05:27FE: A5 0A        	lda	<L364+2
 11311 05:2800: 85 0C        	sta	<L364+2+2
 11312 05:2802: A5 09        	lda	<L364+1
 11313 05:2804: 85 0B        	sta	<L364+1+2
 11314 05:2806: 2B           	pld
 11315 05:2807: 3B           	tsc
 11316 05:2808: 18           	clc
 11317 05:2809: 69 0A 00     	adc	#L364+2
 11318 05:280C: 1B           	tcs
 11319 05:280D: 6B           	rtl
 11320                        	.endblock	2358
 11321             00000008   L364	equ	8
 11322             00000001   L365	equ	1
 11323 05:280E:              	ends
 11324                        	efunc
 11325                        	.endfunc	2358,1,8
 11326                        	.line	2358
 11327                        	data
 11328                        L363:
 11329 00:0863: 40 64 65 62  	db	$40,$64,$65,$62,$75,$67,$00,$44,$45,$42,
                    $55,$47,$50,$4F,$52
       00:0867: 75 67 00 44 
       00:086B: 45 42 55 47 
       00:086F: 50 4F 52 
 11330 00:0872: 54 3A 00 49  	db	$54,$3A,$00,$49,$64,$6C,$65,$43,$6C,$65,
                    $61,$6E,$75,$70,$20
       00:0876: 64 6C 65 43 
       00:087A: 6C 65 61 6E 
       00:087E: 75 70 20 
 11331 00:0881: 72 65 61 73  	db	$72,$65,$61,$73,$6F,$6E,$3A,$00,$46,$58,
                    $5F,$49,$44,$4C,$45
       00:0885: 6F 6E 3A 00 
       00:0889: 46 58 5F 49 
       00:088D: 44 4C 45 
 11332 00:0890: 50 52 4F 43  	db	$50,$52,$4F,$43,$5F,$52,$45,$47,$00,$49,
                    $64,$6C,$65,$43,$6C
       00:0894: 5F 52 45 47 
       00:0898: 00 49 64 6C 
       00:089C: 65 43 6C 
 11333 00:089F: 65 61 6E 75  	db	$65,$61,$6E,$75,$70,$20,$72,$65,$61,$73,
                    $6F,$6E,$3A,$00,$46
       00:08A3: 70 20 72 65 
       00:08A7: 61 73 6F 6E 
       00:08AB: 3A 00 46 
 11334 00:08AE: 58 5F 49 44  	db	$58,$5F,$49,$44,$4C,$45,$50,$52,$4F,$43,
                    $5F,$55,$4E,$52,$45
       00:08B2: 4C 45 50 52 
       00:08B6: 4F 43 5F 55 
       00:08BA: 4E 52 45 
 11335 00:08BD: 47 00        	db	$47,$00
 11336 00:08BF:              	ends
 11337                        ;
 11338                        ;static void _kbd_wait(BYTE a_type) //unsigned cha
                    r
 11339                        ;{
 11340                        	.line	2360
 11341                        	.line	2361
 11342                        	EVTMAN
  Mon Sep 27 2021  9:39                                                Page 222


 11343                        	func
 11344                        	.function	2361
 11345                        ~~_kbd_wait:
 11346                        	longa	on
 11347                        	longi	on
 11348 05:280E: 3B           	tsc
 11349 05:280F: 38           	sec
 11350 05:2810: E9 08 00     	sbc	#L371
 11351 05:2813: 1B           	tcs
 11352 05:2814: 0B           	phd
 11353 05:2815: 5B           	tcd
 11354             00000004   a_type_0	set	4
 11355                        	.block	2361
 11356                        ;  DWORD _time_out=1000; //unsigned int
 11357                        ;  if(a_type==0)
 11358             00000000   _time_out_1	set	0
 11359                        	.sym	_time_out,0,18,1,32
 11360                        	.sym	a_type,4,14,6,8
 11361 05:2816: A9 E8 03     	lda	#$3e8
 11362 05:2819: 85 05        	sta	<L372+_time_out_1
 11363 05:281B: A9 00 00     	lda	#$0
 11364 05:281E: 85 07        	sta	<L372+_time_out_1+2
 11365                        	.line	2363
 11366                        ;  {
 11367 05:2820: A5 0C        	lda	<L371+a_type_0
 11368 05:2822: 29 FF 00     	and	#$ff
 11369 05:2825: F0 03        	beq	L374
 11370 05:2827: 82 42 00     	brl	L10239
 11371                        L374:
 11372                        	.line	2364
 11373                        ;    while(_time_out--) //Data
 11374                        	.line	2365
 11375                        L10240:
 11376 05:282A: A5 05        	lda	<L372+_time_out_1
 11377 05:282C: 85 01        	sta	<R0
 11378 05:282E: A5 07        	lda	<L372+_time_out_1+2
 11379 05:2830: 85 03        	sta	<R0+2
 11380 05:2832: A5 05        	lda	<L372+_time_out_1
 11381 05:2834: D0 02        	bne	L375
 11382 05:2836: C6 07        	dec	<L372+_time_out_1+2
 11383                        L375:
 11384 05:2838: C6 05        	dec	<L372+_time_out_1
 11385 05:283A: A5 01        	lda	<R0
 11386 05:283C: 05 03        	ora	<R0+2
 11387 05:283E: D0 03        	bne	L376
 11388 05:2840: 82 26 00     	brl	L10241
 11389                        L376:
 11390                        ;    {
 11391                        	.line	2366
 11392                        ;      if((inportb64(0x64) & 1)==1)
 11393                        	.line	2367
 11394                        ;      {
 11395 05:2843: AF 07 18 AF  	lda	>11474951
 11396 05:2847: 29 01 00     	and	#<$1
 11397 05:284A: 85 01        	sta	<R0
 11398 05:284C: A5 01        	lda	<R0
 11399 05:284E: C9 01 00     	cmp	#<$1
 11400 05:2851: F0 03        	beq	L377
  Mon Sep 27 2021  9:39                                                Page 223


 11401 05:2853: 82 10 00     	brl	L10242
 11402                        L377:
 11403                        	.line	2368
 11404                        ;        return;
 11405                        	.line	2369
 11406                        L378:
 11407 05:2856: A5 0A        	lda	<L371+2
 11408 05:2858: 85 0C        	sta	<L371+2+2
 11409 05:285A: A5 09        	lda	<L371+1
 11410 05:285C: 85 0B        	sta	<L371+1+2
 11411 05:285E: 2B           	pld
 11412 05:285F: 3B           	tsc
 11413 05:2860: 18           	clc
 11414 05:2861: 69 0A 00     	adc	#L371+2
 11415 05:2864: 1B           	tcs
 11416 05:2865: 6B           	rtl
 11417                        ;      }
 11418                        	.line	2370
 11419                        ;    }
 11420                        L10242:
 11421                        	.line	2371
 11422 05:2866: 82 C1 FF     	brl	L10240
 11423                        L10241:
 11424                        ;    return;
 11425                        	.line	2372
 11426 05:2869: 82 EA FF     	brl	L378
 11427                        ;  }
 11428                        	.line	2373
 11429                        ;  else
 11430                        L10239:
 11431                        ;  {
 11432                        	.line	2375
 11433                        ;    while(_time_out--) //Signal
 11434                        	.line	2376
 11435                        L10243:
 11436 05:286C: A5 05        	lda	<L372+_time_out_1
 11437 05:286E: 85 01        	sta	<R0
 11438 05:2870: A5 07        	lda	<L372+_time_out_1+2
 11439 05:2872: 85 03        	sta	<R0+2
 11440 05:2874: A5 05        	lda	<L372+_time_out_1
 11441 05:2876: D0 02        	bne	L379
 11442 05:2878: C6 07        	dec	<L372+_time_out_1+2
 11443                        L379:
 11444 05:287A: C6 05        	dec	<L372+_time_out_1
 11445 05:287C: A5 01        	lda	<R0
 11446 05:287E: 05 03        	ora	<R0+2
 11447 05:2880: D0 03        	bne	L380
 11448 05:2882: 82 15 00     	brl	L10244
 11449                        L380:
 11450                        ;    {
 11451                        	.line	2377
 11452                        ;      if((inportb64(0x64) & 2)==0)
 11453                        	.line	2378
 11454                        ;      {
 11455 05:2885: E2 20        	sep	#$20
 11456                        	longa	off
 11457 05:2887: AF 07 18 AF  	lda	>11474951
 11458 05:288B: 29 02        	and	#<$2
  Mon Sep 27 2021  9:39                                                Page 224


 11459 05:288D: C2 20        	rep	#$20
 11460                        	longa	on
 11461 05:288F: F0 03        	beq	L381
 11462 05:2891: 82 03 00     	brl	L10245
 11463                        L381:
 11464                        	.line	2379
 11465                        ;        return;
 11466                        	.line	2380
 11467 05:2894: 82 BF FF     	brl	L378
 11468                        ;      }
 11469                        	.line	2381
 11470                        ;    }
 11471                        L10245:
 11472                        	.line	2382
 11473 05:2897: 82 D2 FF     	brl	L10243
 11474                        L10244:
 11475                        ;    return;
 11476                        	.line	2383
 11477 05:289A: 82 B9 FF     	brl	L378
 11478                        ;  }
 11479                        	.line	2384
 11480                        ;}
 11481                        	.line	2385
 11482                        	.endblock	2385
 11483             00000008   L371	equ	8
 11484             00000005   L372	equ	5
 11485 05:289D:              	ends
 11486                        	efunc
 11487                        	.endfunc	2385,5,8
 11488                        	.line	2385
 11489                        ;
 11490                        ;
 11491                        ;BOOL _kbd_ack(void)
 11492                        ;{
 11493                        	.line	2388
 11494                        	.line	2389
 11495                        	EVTMAN
 11496                        	xdef	~~_kbd_ack
 11497                        	func
 11498                        	.function	2389
 11499                        ~~_kbd_ack:
 11500                        	longa	on
 11501                        	longi	on
 11502 05:289D: 3B           	tsc
 11503 05:289E: 38           	sec
 11504 05:289F: E9 01 00     	sbc	#L382
 11505 05:28A2: 1B           	tcs
 11506 05:28A3: 0B           	phd
 11507 05:28A4: 5B           	tcd
 11508                        	.block	2389
 11509                        ;	BYTE retCode = 0;
 11510                        ;
 11511                        ;	while(!(KBD_OUT_BUF[0]==0xfa));
 11512             00000000   retCode_1	set	0
 11513                        	.sym	retCode,0,14,1,8
 11514 05:28A5: E2 20        	sep	#$20
 11515                        	longa	off
 11516 05:28A7: 64 01        	stz	<L383+retCode_1
  Mon Sep 27 2021  9:39                                                Page 225


 11517 05:28A9: C2 20        	rep	#$20
 11518                        	longa	on
 11519                        	.line	2392
 11520                        L10246:
 11521 05:28AB: E2 20        	sep	#$20
 11522                        	longa	off
 11523 05:28AD: AF 03 18 AF  	lda	>11474947
 11524 05:28B1: C9 FA        	cmp	#<$fa
 11525 05:28B3: C2 20        	rep	#$20
 11526                        	longa	on
 11527 05:28B5: D0 03        	bne	L385
 11528 05:28B7: 82 03 00     	brl	L10247
 11529                        L385:
 11530                        	.line	2392
 11531 05:28BA: 82 EE FF     	brl	L10246
 11532                        L10247:
 11533                        ;
 11534                        ;	retCode = KBD_OUT_BUF[0];
 11535                        	.line	2394
 11536 05:28BD: E2 20        	sep	#$20
 11537                        	longa	off
 11538 05:28BF: AF 03 18 AF  	lda	>11474947
 11539 05:28C3: 85 01        	sta	<L383+retCode_1
 11540 05:28C5: C2 20        	rep	#$20
 11541                        	longa	on
 11542                        ;	while(retCode!=0xFA)
 11543                        	.line	2395
 11544                        L10248:
 11545 05:28C7: E2 20        	sep	#$20
 11546                        	longa	off
 11547 05:28C9: A5 01        	lda	<L383+retCode_1
 11548 05:28CB: C9 FA        	cmp	#<$fa
 11549 05:28CD: C2 20        	rep	#$20
 11550                        	longa	on
 11551 05:28CF: D0 03        	bne	L386
 11552 05:28D1: 82 27 00     	brl	L10249
 11553                        L386:
 11554                        ;	{
 11555                        	.line	2396
 11556                        ;		if(retCode == 0xFE)
 11557                        	.line	2397
 11558                        ;		{
 11559 05:28D4: E2 20        	sep	#$20
 11560                        	longa	off
 11561 05:28D6: A5 01        	lda	<L383+retCode_1
 11562 05:28D8: C9 FE        	cmp	#<$fe
 11563 05:28DA: C2 20        	rep	#$20
 11564                        	longa	on
 11565 05:28DC: F0 03        	beq	L387
 11566 05:28DE: 82 0D 00     	brl	L10250
 11567                        L387:
 11568                        	.line	2398
 11569                        ;			return FALSE;
 11570                        	.line	2399
 11571 05:28E1: A9 00 00     	lda	#$0
 11572                        L388:
 11573 05:28E4: A8           	tay
 11574 05:28E5: 2B           	pld
  Mon Sep 27 2021  9:39                                                Page 226


 11575 05:28E6: 3B           	tsc
 11576 05:28E7: 18           	clc
 11577 05:28E8: 69 01 00     	adc	#L382
 11578 05:28EB: 1B           	tcs
 11579 05:28EC: 98           	tya
 11580 05:28ED: 6B           	rtl
 11581                        ;		}
 11582                        	.line	2400
 11583                        ;		retCode = KBD_OUT_BUF[0];
 11584                        L10250:
 11585                        	.line	2401
 11586 05:28EE: E2 20        	sep	#$20
 11587                        	longa	off
 11588 05:28F0: AF 03 18 AF  	lda	>11474947
 11589 05:28F4: 85 01        	sta	<L383+retCode_1
 11590 05:28F6: C2 20        	rep	#$20
 11591                        	longa	on
 11592                        ;	}
 11593                        	.line	2402
 11594 05:28F8: 82 CC FF     	brl	L10248
 11595                        L10249:
 11596                        ;
 11597                        ;	return TRUE;
 11598                        	.line	2404
 11599 05:28FB: A9 01 00     	lda	#$1
 11600 05:28FE: 82 E3 FF     	brl	L388
 11601                        ;}
 11602                        	.line	2405
 11603                        	.endblock	2405
 11604             00000001   L382	equ	1
 11605             00000001   L383	equ	1
 11606 05:2901:              	ends
 11607                        	efunc
 11608                        	.endfunc	2405,1,1
 11609                        	.line	2405
 11610                        ;
 11611                        ;void kbd_cmd_handling(BYTE command,UCHAR value)
 11612                        ;{
 11613                        	.line	2407
 11614                        	.line	2408
 11615                        	EVTMAN
 11616                        	xdef	~~kbd_cmd_handling
 11617                        	func
 11618                        	.function	2408
 11619                        ~~kbd_cmd_handling:
 11620                        	longa	on
 11621                        	longi	on
 11622 05:2901: 3B           	tsc
 11623 05:2902: 38           	sec
 11624 05:2903: E9 00 00     	sbc	#L389
 11625 05:2906: 1B           	tcs
 11626 05:2907: 0B           	phd
 11627 05:2908: 5B           	tcd
 11628             00000004   command_0	set	4
 11629             00000006   value_0	set	6
 11630                        	.block	2408
 11631                        ;
 11632                        ;	//k_debug_hex("kbd_cmd_handling:c:",command);
  Mon Sep 27 2021  9:39                                                Page 227


 11633                        ;	//k_debug_hex("kbd_cmd_handling:v:",value);
 11634                        ;	ps2_write(PS2_CMD, command);
 11635                        	.sym	command,4,14,6,8
 11636                        	.sym	value,6,14,6,8
 11637                        	.line	2412
 11638 05:2909: D4 04        	pei	<L389+command_0
 11639 05:290B: F4 00 00     	pea	#^$64
 11640 05:290E: F4 64 00     	pea	#<$64
 11641 05:2911: 22 xx xx xx  	jsl	~~ps2_write
 11642                        ;	ps2_expect_ack();
 11643                        	.line	2413
 11644 05:2915: 22 xx xx xx  	jsl	~~ps2_expect_ack
 11645                        ;	ps2_write(PS2_DATA, value);
 11646                        	.line	2414
 11647 05:2919: D4 06        	pei	<L389+value_0
 11648 05:291B: F4 00 00     	pea	#^$60
 11649 05:291E: F4 60 00     	pea	#<$60
 11650 05:2921: 22 xx xx xx  	jsl	~~ps2_write
 11651                        ;	ps2_expect_ack();
 11652                        	.line	2415
 11653 05:2925: 22 xx xx xx  	jsl	~~ps2_expect_ack
 11654                        ;	/*
 11655                        ;	do
 11656                        ;	{
 11657                        ;		_kbd_wait(0);
 11658                        ;		KBD_OUT_BUF[0] = command;
 11659                        ;	}while(!_kbd_ack());
 11660                        ;
 11661                        ;	if(value!=0xFF)
 11662                        ;	{
 11663                        ;		KBD_OUT_BUF[0] = value;
 11664                        ;		while(KBD_OUT_BUF[0]!=0xFA);
 11665                        ;	}
 11666                        ;	*/
 11667                        ;}
 11668                        	.line	2429
 11669                        L392:
 11670 05:2929: A5 02        	lda	<L389+2
 11671 05:292B: 85 06        	sta	<L389+2+4
 11672 05:292D: A5 01        	lda	<L389+1
 11673 05:292F: 85 05        	sta	<L389+1+4
 11674 05:2931: 2B           	pld
 11675 05:2932: 3B           	tsc
 11676 05:2933: 18           	clc
 11677 05:2934: 69 04 00     	adc	#L389+4
 11678 05:2937: 1B           	tcs
 11679 05:2938: 6B           	rtl
 11680                        	.endblock	2429
 11681             00000000   L389	equ	0
 11682             00000001   L390	equ	1
 11683 05:2939:              	ends
 11684                        	efunc
 11685                        	.endfunc	2429,1,0
 11686                        	.line	2429
 11687                        ;
 11688                        ;VOID _k_async_keyboard(UINT reason)
 11689                        ;{
 11690                        	.line	2431
  Mon Sep 27 2021  9:39                                                Page 228


 11691                        	.line	2432
 11692                        	EVTMAN
 11693                        	xdef	~~_k_async_keyboard
 11694                        	func
 11695                        	.function	2432
 11696                        ~~_k_async_keyboard:
 11697                        	longa	on
 11698                        	longi	on
 11699 05:2939: 3B           	tsc
 11700 05:293A: 38           	sec
 11701 05:293B: E9 08 00     	sbc	#L393
 11702 05:293E: 1B           	tcs
 11703 05:293F: 0B           	phd
 11704 05:2940: 5B           	tcd
 11705             00000004   reason_0	set	4
 11706                        	.block	2432
 11707                        ;	PIPCPORT kbport = NULL;
 11708                        ;	PMARSHALDATA pcmd  = NULL;
 11709                        ;
 11710                        ;	switch(reason)
 11711             00000000   kbport_1	set	0
 11712             00000004   pcmd_1	set	4
 11713                        	.sym	kbport,0,138,1,32,65
 11714                        	.sym	pcmd,4,139,1,32,75
 11715                        	.sym	reason,4,16,6,16
 11716 05:2941: 64 01        	stz	<L394+kbport_1
 11717 05:2943: 64 03        	stz	<L394+kbport_1+2
 11718 05:2945: 64 05        	stz	<L394+pcmd_1
 11719 05:2947: 64 07        	stz	<L394+pcmd_1+2
 11720                        	.line	2436
 11721 05:2949: A5 0C        	lda	<L393+reason_0
 11722 05:294B: 82 96 00     	brl	L10251
 11723                        ;	{
 11724                        	.line	2437
 11725                        ;	case FX_IDLEPROC_PROCESS:
 11726                        	.line	2438
 11727                        L10253:
 11728                        ;		//k_debug_string("_k_async_keyboard\r\n"
                    );
 11729                        ;
 11730                        ;		if(!_k_in_irq_enabled)
 11731                        	.line	2441
 11732                        ;		{
 11733 05:294E: AD xx xx     	lda	|~~_k_in_irq_enabled
 11734 05:2951: 29 FF 00     	and	#$ff
 11735 05:2954: F0 03        	beq	L396
 11736 05:2956: 82 62 00     	brl	L10254
 11737                        L396:
 11738                        	.line	2442
 11739                        ;			k_lock_irq();
 11740                        	.line	2443
 11741 05:2959: 22 xx xx xx  	jsl	~~k_lock_irq
 11742                        ;			kbport =  k_get_ipc_port("@keybo
                    ard");
 11743                        	.line	2444
 11744 05:295D: F4 xx xx     	pea	#^L370
 11745 05:2960: F4 xx xx     	pea	#<L370
 11746 05:2963: 22 xx xx xx  	jsl	~~k_get_ipc_port
  Mon Sep 27 2021  9:39                                                Page 229


 11747 05:2967: 85 01        	sta	<L394+kbport_1
 11748 05:2969: 86 03        	stx	<L394+kbport_1+2
 11749                        ;			if(kbport)
 11750                        	.line	2445
 11751                        ;			{
 11752 05:296B: A5 01        	lda	<L394+kbport_1
 11753 05:296D: 05 03        	ora	<L394+kbport_1+2
 11754 05:296F: D0 03        	bne	L397
 11755 05:2971: 82 43 00     	brl	L10255
 11756                        L397:
 11757                        	.line	2446
 11758                        ;				//k_debug_pointer("_k_as
                    ync_keyboard:kbport:",kbport);
 11759                        ;				pcmd = (PMARSHALDATA)k_r
                    ead_ipc_port(kbport);
 11760                        	.line	2448
 11761 05:2974: D4 03        	pei	<L394+kbport_1+2
 11762 05:2976: D4 01        	pei	<L394+kbport_1
 11763 05:2978: 22 xx xx xx  	jsl	~~k_read_ipc_port
 11764 05:297C: 85 05        	sta	<L394+pcmd_1
 11765 05:297E: 86 07        	stx	<L394+pcmd_1+2
 11766                        ;				while(pcmd)
 11767                        	.line	2449
 11768                        L10256:
 11769 05:2980: A5 05        	lda	<L394+pcmd_1
 11770 05:2982: 05 07        	ora	<L394+pcmd_1+2
 11771 05:2984: D0 03        	bne	L398
 11772 05:2986: 82 2E 00     	brl	L10257
 11773                        L398:
 11774                        ;				{
 11775                        	.line	2450
 11776                        ;					//k_debug_pointe
                    r("_k_async_keyboard:pcmd:",pcmd);
 11777                        ;					if(pcmd->verbVal
                    ue[0])
 11778                        	.line	2452
 11779                        ;					{
 11780 05:2989: A7 05        	lda	[<L394+pcmd_1]
 11781 05:298B: 29 FF 00     	and	#$ff
 11782 05:298E: D0 03        	bne	L399
 11783 05:2990: 82 15 00     	brl	L10258
 11784                        L399:
 11785                        	.line	2453
 11786                        ;						kbd_cmd_
                    handling(pcmd->verbValue[0],pcmd->verbValue[1]);
 11787                        	.line	2454
 11788 05:2993: A0 01 00     	ldy	#$1
 11789 05:2996: B7 05        	lda	[<L394+pcmd_1],Y
 11790 05:2998: 48           	pha
 11791 05:2999: A7 05        	lda	[<L394+pcmd_1]
 11792 05:299B: 48           	pha
 11793 05:299C: 22 01 29 05  	jsl	~~kbd_cmd_handling
 11794                        ;						k_mem_de
                    allocate_heap(pcmd);
 11795                        	.line	2455
 11796 05:29A0: D4 07        	pei	<L394+pcmd_1+2
 11797 05:29A2: D4 05        	pei	<L394+pcmd_1
 11798 05:29A4: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  Mon Sep 27 2021  9:39                                                Page 230


 11799                        ;					}
 11800                        	.line	2456
 11801                        ;					pcmd = (PMARSHAL
                    DATA)k_read_ipc_port(kbport);
 11802                        L10258:
 11803                        	.line	2457
 11804 05:29A8: D4 03        	pei	<L394+kbport_1+2
 11805 05:29AA: D4 01        	pei	<L394+kbport_1
 11806 05:29AC: 22 xx xx xx  	jsl	~~k_read_ipc_port
 11807 05:29B0: 85 05        	sta	<L394+pcmd_1
 11808 05:29B2: 86 07        	stx	<L394+pcmd_1+2
 11809                        ;				}
 11810                        	.line	2458
 11811 05:29B4: 82 C9 FF     	brl	L10256
 11812                        L10257:
 11813                        ;			}
 11814                        	.line	2459
 11815                        ;			k_unlock_irq();
 11816                        L10255:
 11817                        	.line	2460
 11818 05:29B7: 22 xx xx xx  	jsl	~~k_unlock_irq
 11819                        ;		}
 11820                        	.line	2461
 11821                        ;
 11822                        ;		break;
 11823                        L10254:
 11824                        	.line	2463
 11825 05:29BB: 82 3A 00     	brl	L10252
 11826                        ;	case FX_IDLEPROC_REG:
 11827                        	.line	2464
 11828                        L10259:
 11829                        ;		k_debug_strings("_k_async_keyboard reaso
                    n:","FX_IDLEPROC_REG");
 11830                        	.line	2465
 11831 05:29BE: F4 xx xx     	pea	#^L370+36
 11832 05:29C1: F4 xx xx     	pea	#<L370+36
 11833 05:29C4: F4 xx xx     	pea	#^L370+10
 11834 05:29C7: F4 xx xx     	pea	#<L370+10
 11835 05:29CA: 22 xx xx xx  	jsl	~~k_debug_strings
 11836                        ;		break;
 11837                        	.line	2466
 11838 05:29CE: 82 27 00     	brl	L10252
 11839                        ;	case FX_IDLEPROC_UNREG:
 11840                        	.line	2467
 11841                        L10260:
 11842                        ;		k_debug_strings("_k_async_keyboard reaso
                    n:","FX_IDLEPROC_UNREG");
 11843                        	.line	2468
 11844 05:29D1: F4 xx xx     	pea	#^L370+78
 11845 05:29D4: F4 xx xx     	pea	#<L370+78
 11846 05:29D7: F4 xx xx     	pea	#^L370+52
 11847 05:29DA: F4 xx xx     	pea	#<L370+52
 11848 05:29DD: 22 xx xx xx  	jsl	~~k_debug_strings
 11849                        ;		break;
 11850                        	.line	2469
 11851 05:29E1: 82 14 00     	brl	L10252
 11852                        ;	}
 11853                        	.line	2470
  Mon Sep 27 2021  9:39                                                Page 231


 11854                        L10251:
 11855                        	xref	~~~swt
 11856 05:29E4: 22 xx xx xx  	jsl	~~~swt
 11857 05:29E8: 03 00        	dw	3
 11858 05:29EA: 01 00        	dw	1
 11859 05:29EC: BD 29        	dw	L10259-1
 11860 05:29EE: 02 00        	dw	2
 11861 05:29F0: D0 29        	dw	L10260-1
 11862 05:29F2: 04 00        	dw	4
 11863 05:29F4: 4D 29        	dw	L10253-1
 11864 05:29F6: F7 29        	dw	L10252-1
 11865                        L10252:
 11866                        ;}
 11867                        	.line	2471
 11868                        L400:
 11869 05:29F8: A5 0A        	lda	<L393+2
 11870 05:29FA: 85 0C        	sta	<L393+2+2
 11871 05:29FC: A5 09        	lda	<L393+1
 11872 05:29FE: 85 0B        	sta	<L393+1+2
 11873 05:2A00: 2B           	pld
 11874 05:2A01: 3B           	tsc
 11875 05:2A02: 18           	clc
 11876 05:2A03: 69 0A 00     	adc	#L393+2
 11877 05:2A06: 1B           	tcs
 11878 05:2A07: 6B           	rtl
 11879                        	.endblock	2471
 11880             00000008   L393	equ	8
 11881             00000001   L394	equ	1
 11882 05:2A08:              	ends
 11883                        	efunc
 11884                        	.endfunc	2471,1,8
 11885                        	.line	2471
 11886                        	data
 11887                        L370:
 11888 00:08BF: 40 6B 65 79  	db	$40,$6B,$65,$79,$62,$6F,$61,$72,$64,$00,
                    $5F,$6B,$5F,$61,$73
       00:08C3: 62 6F 61 72 
       00:08C7: 64 00 5F 6B 
       00:08CB: 5F 61 73 
 11889 00:08CE: 79 6E 63 5F  	db	$79,$6E,$63,$5F,$6B,$65,$79,$62,$6F,$61,
                    $72,$64,$20,$72,$65
       00:08D2: 6B 65 79 62 
       00:08D6: 6F 61 72 64 
       00:08DA: 20 72 65 
 11890 00:08DD: 61 73 6F 6E  	db	$61,$73,$6F,$6E,$3A,$00,$46,$58,$5F,$49,
                    $44,$4C,$45,$50,$52
       00:08E1: 3A 00 46 58 
       00:08E5: 5F 49 44 4C 
       00:08E9: 45 50 52 
 11891 00:08EC: 4F 43 5F 52  	db	$4F,$43,$5F,$52,$45,$47,$00,$5F,$6B,$5F,
                    $61,$73,$79,$6E,$63
       00:08F0: 45 47 00 5F 
       00:08F4: 6B 5F 61 73 
       00:08F8: 79 6E 63 
 11892 00:08FB: 5F 6B 65 79  	db	$5F,$6B,$65,$79,$62,$6F,$61,$72,$64,$20,
                    $72,$65,$61,$73,$6F
       00:08FF: 62 6F 61 72 
       00:0903: 64 20 72 65 
  Mon Sep 27 2021  9:39                                                Page 232


       00:0907: 61 73 6F 
 11893 00:090A: 6E 3A 00 46  	db	$6E,$3A,$00,$46,$58,$5F,$49,$44,$4C,$45,
                    $50,$52,$4F,$43,$5F
       00:090E: 58 5F 49 44 
       00:0912: 4C 45 50 52 
       00:0916: 4F 43 5F 
 11894 00:0919: 55 4E 52 45  	db	$55,$4E,$52,$45,$47,$00
       00:091D: 47 00 
 11895 00:091F:              	ends
 11896                        ;
 11897                        ;
 11898                        ;
 11899                        ;
 11900                        ;static void k_mouse_wait(BYTE a_type) //unsigned 
                    char
 11901                        ;{
 11902                        	.line	2476
 11903                        	.line	2477
 11904                        	EVTMAN
 11905                        	func
 11906                        	.function	2477
 11907                        ~~k_mouse_wait:
 11908                        	longa	on
 11909                        	longi	on
 11910 05:2A08: 3B           	tsc
 11911 05:2A09: 38           	sec
 11912 05:2A0A: E9 08 00     	sbc	#L402
 11913 05:2A0D: 1B           	tcs
 11914 05:2A0E: 0B           	phd
 11915 05:2A0F: 5B           	tcd
 11916             00000004   a_type_0	set	4
 11917                        	.block	2477
 11918                        ;  DWORD _time_out=1000; //unsigned int
 11919                        ;  if(a_type==0)
 11920             00000000   _time_out_1	set	0
 11921                        	.sym	_time_out,0,18,1,32
 11922                        	.sym	a_type,4,14,6,8
 11923 05:2A10: A9 E8 03     	lda	#$3e8
 11924 05:2A13: 85 05        	sta	<L403+_time_out_1
 11925 05:2A15: A9 00 00     	lda	#$0
 11926 05:2A18: 85 07        	sta	<L403+_time_out_1+2
 11927                        	.line	2479
 11928                        ;  {
 11929 05:2A1A: A5 0C        	lda	<L402+a_type_0
 11930 05:2A1C: 29 FF 00     	and	#$ff
 11931 05:2A1F: F0 03        	beq	L405
 11932 05:2A21: 82 42 00     	brl	L10261
 11933                        L405:
 11934                        	.line	2480
 11935                        ;    while(_time_out--) //Data
 11936                        	.line	2481
 11937                        L10262:
 11938 05:2A24: A5 05        	lda	<L403+_time_out_1
 11939 05:2A26: 85 01        	sta	<R0
 11940 05:2A28: A5 07        	lda	<L403+_time_out_1+2
 11941 05:2A2A: 85 03        	sta	<R0+2
 11942 05:2A2C: A5 05        	lda	<L403+_time_out_1
 11943 05:2A2E: D0 02        	bne	L406
  Mon Sep 27 2021  9:39                                                Page 233


 11944 05:2A30: C6 07        	dec	<L403+_time_out_1+2
 11945                        L406:
 11946 05:2A32: C6 05        	dec	<L403+_time_out_1
 11947 05:2A34: A5 01        	lda	<R0
 11948 05:2A36: 05 03        	ora	<R0+2
 11949 05:2A38: D0 03        	bne	L407
 11950 05:2A3A: 82 26 00     	brl	L10263
 11951                        L407:
 11952                        ;    {
 11953                        	.line	2482
 11954                        ;      if((inportb64(0x64) & 1)==1)
 11955                        	.line	2483
 11956                        ;      {
 11957 05:2A3D: AF 07 18 AF  	lda	>11474951
 11958 05:2A41: 29 01 00     	and	#<$1
 11959 05:2A44: 85 01        	sta	<R0
 11960 05:2A46: A5 01        	lda	<R0
 11961 05:2A48: C9 01 00     	cmp	#<$1
 11962 05:2A4B: F0 03        	beq	L408
 11963 05:2A4D: 82 10 00     	brl	L10264
 11964                        L408:
 11965                        	.line	2484
 11966                        ;        return;
 11967                        	.line	2485
 11968                        L409:
 11969 05:2A50: A5 0A        	lda	<L402+2
 11970 05:2A52: 85 0C        	sta	<L402+2+2
 11971 05:2A54: A5 09        	lda	<L402+1
 11972 05:2A56: 85 0B        	sta	<L402+1+2
 11973 05:2A58: 2B           	pld
 11974 05:2A59: 3B           	tsc
 11975 05:2A5A: 18           	clc
 11976 05:2A5B: 69 0A 00     	adc	#L402+2
 11977 05:2A5E: 1B           	tcs
 11978 05:2A5F: 6B           	rtl
 11979                        ;      }
 11980                        	.line	2486
 11981                        ;    }
 11982                        L10264:
 11983                        	.line	2487
 11984 05:2A60: 82 C1 FF     	brl	L10262
 11985                        L10263:
 11986                        ;    return;
 11987                        	.line	2488
 11988 05:2A63: 82 EA FF     	brl	L409
 11989                        ;  }
 11990                        	.line	2489
 11991                        ;  else
 11992                        L10261:
 11993                        ;  {
 11994                        	.line	2491
 11995                        ;    while(_time_out--) //Signal
 11996                        	.line	2492
 11997                        L10265:
 11998 05:2A66: A5 05        	lda	<L403+_time_out_1
 11999 05:2A68: 85 01        	sta	<R0
 12000 05:2A6A: A5 07        	lda	<L403+_time_out_1+2
 12001 05:2A6C: 85 03        	sta	<R0+2
  Mon Sep 27 2021  9:39                                                Page 234


 12002 05:2A6E: A5 05        	lda	<L403+_time_out_1
 12003 05:2A70: D0 02        	bne	L410
 12004 05:2A72: C6 07        	dec	<L403+_time_out_1+2
 12005                        L410:
 12006 05:2A74: C6 05        	dec	<L403+_time_out_1
 12007 05:2A76: A5 01        	lda	<R0
 12008 05:2A78: 05 03        	ora	<R0+2
 12009 05:2A7A: D0 03        	bne	L411
 12010 05:2A7C: 82 15 00     	brl	L10266
 12011                        L411:
 12012                        ;    {
 12013                        	.line	2493
 12014                        ;      if((inportb64(0x64) & 2)==0)
 12015                        	.line	2494
 12016                        ;      {
 12017 05:2A7F: E2 20        	sep	#$20
 12018                        	longa	off
 12019 05:2A81: AF 07 18 AF  	lda	>11474951
 12020 05:2A85: 29 02        	and	#<$2
 12021 05:2A87: C2 20        	rep	#$20
 12022                        	longa	on
 12023 05:2A89: F0 03        	beq	L412
 12024 05:2A8B: 82 03 00     	brl	L10267
 12025                        L412:
 12026                        	.line	2495
 12027                        ;        return;
 12028                        	.line	2496
 12029 05:2A8E: 82 BF FF     	brl	L409
 12030                        ;      }
 12031                        	.line	2497
 12032                        ;    }
 12033                        L10267:
 12034                        	.line	2498
 12035 05:2A91: 82 D2 FF     	brl	L10265
 12036                        L10266:
 12037                        ;    return;
 12038                        	.line	2499
 12039 05:2A94: 82 B9 FF     	brl	L409
 12040                        ;  }
 12041                        	.line	2500
 12042                        ;}
 12043                        	.line	2501
 12044                        	.endblock	2501
 12045             00000008   L402	equ	8
 12046             00000005   L403	equ	5
 12047 05:2A97:              	ends
 12048                        	efunc
 12049                        	.endfunc	2501,5,8
 12050                        	.line	2501
 12051                        ;
 12052                        ;
 12053                        ;static void k_mouse_write(BYTE a_write) //unsigne
                    d char
 12054                        ;{
 12055                        	.line	2504
 12056                        	.line	2505
 12057                        	EVTMAN
 12058                        	func
  Mon Sep 27 2021  9:39                                                Page 235


 12059                        	.function	2505
 12060                        ~~k_mouse_write:
 12061                        	longa	on
 12062                        	longi	on
 12063 05:2A97: 3B           	tsc
 12064 05:2A98: 38           	sec
 12065 05:2A99: E9 00 00     	sbc	#L413
 12066 05:2A9C: 1B           	tcs
 12067 05:2A9D: 0B           	phd
 12068 05:2A9E: 5B           	tcd
 12069             00000004   a_write_0	set	4
 12070                        	.block	2505
 12071                        ;  //Wait to be able to send a command
 12072                        ;  k_mouse_wait(0);
 12073                        	.sym	a_write,4,14,6,8
 12074                        	.line	2507
 12075 05:2A9F: F4 00 00     	pea	#<$0
 12076 05:2AA2: 22 08 2A 05  	jsl	~~k_mouse_wait
 12077                        ;  //Tell the mouse we are sending a command
 12078                        ;  outportb64(0xD4);
 12079                        	.line	2509
 12080 05:2AA6: E2 20        	sep	#$20
 12081                        	longa	off
 12082 05:2AA8: A9 D4        	lda	#$d4
 12083 05:2AAA: 8F 07 18 AF  	sta	>11474951
 12084 05:2AAE: C2 20        	rep	#$20
 12085                        	longa	on
 12086                        ;  //Wait for the final part
 12087                        ;  k_mouse_wait(0);
 12088                        	.line	2511
 12089 05:2AB0: F4 00 00     	pea	#<$0
 12090 05:2AB3: 22 08 2A 05  	jsl	~~k_mouse_wait
 12091                        ;  //Finally write
 12092                        ;  outportb60(a_write);
 12093                        	.line	2513
 12094 05:2AB7: E2 20        	sep	#$20
 12095                        	longa	off
 12096 05:2AB9: A5 04        	lda	<L413+a_write_0
 12097 05:2ABB: 8F 03 18 AF  	sta	>11474947
 12098 05:2ABF: C2 20        	rep	#$20
 12099                        	longa	on
 12100                        ;  //k_debug_hex("k_mouse_write:",a_write);
 12101                        ;}
 12102                        	.line	2515
 12103                        L416:
 12104 05:2AC1: A5 02        	lda	<L413+2
 12105 05:2AC3: 85 04        	sta	<L413+2+2
 12106 05:2AC5: A5 01        	lda	<L413+1
 12107 05:2AC7: 85 03        	sta	<L413+1+2
 12108 05:2AC9: 2B           	pld
 12109 05:2ACA: 3B           	tsc
 12110 05:2ACB: 18           	clc
 12111 05:2ACC: 69 02 00     	adc	#L413+2
 12112 05:2ACF: 1B           	tcs
 12113 05:2AD0: 6B           	rtl
 12114                        	.endblock	2515
 12115             00000000   L413	equ	0
 12116             00000001   L414	equ	1
  Mon Sep 27 2021  9:39                                                Page 236


 12117 05:2AD1:              	ends
 12118                        	efunc
 12119                        	.endfunc	2515,1,0
 12120                        	.line	2515
 12121                        ;
 12122                        ;static BYTE k_mouse_read(VOID)
 12123                        ;{
 12124                        	.line	2517
 12125                        	.line	2518
 12126                        	EVTMAN
 12127                        	func
 12128                        	.function	2518
 12129                        ~~k_mouse_read:
 12130                        	longa	on
 12131                        	longi	on
 12132 05:2AD1: 3B           	tsc
 12133 05:2AD2: 38           	sec
 12134 05:2AD3: E9 00 00     	sbc	#L417
 12135 05:2AD6: 1B           	tcs
 12136 05:2AD7: 0B           	phd
 12137 05:2AD8: 5B           	tcd
 12138                        	.block	2518
 12139                        ;  //Get's response from mouse
 12140                        ;	k_mouse_wait(0);
 12141                        	.line	2520
 12142 05:2AD9: F4 00 00     	pea	#<$0
 12143 05:2ADC: 22 08 2A 05  	jsl	~~k_mouse_wait
 12144                        ;  return inportb60(0x60);
 12145                        	.line	2521
 12146 05:2AE0: AF 03 18 AF  	lda	>11474947
 12147 05:2AE4: 29 FF 00     	and	#$ff
 12148                        L420:
 12149 05:2AE7: A8           	tay
 12150 05:2AE8: 2B           	pld
 12151 05:2AE9: 3B           	tsc
 12152 05:2AEA: 18           	clc
 12153 05:2AEB: 69 00 00     	adc	#L417
 12154 05:2AEE: 1B           	tcs
 12155 05:2AEF: 98           	tya
 12156 05:2AF0: 6B           	rtl
 12157                        ;}
 12158                        	.line	2522
 12159                        	.endblock	2522
 12160             00000000   L417	equ	0
 12161             00000001   L418	equ	1
 12162 05:2AF1:              	ends
 12163                        	efunc
 12164                        	.endfunc	2522,1,0
 12165                        	.line	2522
 12166                        ;
 12167                        ;VOID _k_async_execute(UINT reason)
 12168                        ;{
 12169                        	.line	2524
 12170                        	.line	2525
 12171                        	EVTMAN
 12172                        	xdef	~~_k_async_execute
 12173                        	func
 12174                        	.function	2525
  Mon Sep 27 2021  9:39                                                Page 237


 12175                        ~~_k_async_execute:
 12176                        	longa	on
 12177                        	longi	on
 12178 05:2AF1: 3B           	tsc
 12179 05:2AF2: 38           	sec
 12180 05:2AF3: E9 08 00     	sbc	#L421
 12181 05:2AF6: 1B           	tcs
 12182 05:2AF7: 0B           	phd
 12183 05:2AF8: 5B           	tcd
 12184             00000004   reason_0	set	4
 12185                        	.block	2525
 12186                        ;	PIPCPORT processport = NULL;
 12187                        ;	PMARSHALDATA pcmd  = NULL;
 12188                        ;
 12189                        ;	switch(reason)
 12190             00000000   processport_1	set	0
 12191             00000004   pcmd_1	set	4
 12192                        	.sym	processport,0,138,1,32,65
 12193                        	.sym	pcmd,4,139,1,32,75
 12194                        	.sym	reason,4,16,6,16
 12195 05:2AF9: 64 01        	stz	<L422+processport_1
 12196 05:2AFB: 64 03        	stz	<L422+processport_1+2
 12197 05:2AFD: 64 05        	stz	<L422+pcmd_1
 12198 05:2AFF: 64 07        	stz	<L422+pcmd_1+2
 12199                        	.line	2529
 12200 05:2B01: A5 0C        	lda	<L421+reason_0
 12201 05:2B03: 82 96 00     	brl	L10268
 12202                        ;	{
 12203                        	.line	2530
 12204                        ;	case FX_IDLEPROC_PROCESS:
 12205                        	.line	2531
 12206                        L10270:
 12207                        ;		processport =  k_get_ipc_port(IPC_SYS_AS
                    YNCPROC);
 12208                        	.line	2532
 12209 05:2B06: F4 xx xx     	pea	#^L401
 12210 05:2B09: F4 xx xx     	pea	#<L401
 12211 05:2B0C: 22 xx xx xx  	jsl	~~k_get_ipc_port
 12212 05:2B10: 85 01        	sta	<L422+processport_1
 12213 05:2B12: 86 03        	stx	<L422+processport_1+2
 12214                        ;		if(processport)
 12215                        	.line	2533
 12216                        ;		{
 12217 05:2B14: A5 01        	lda	<L422+processport_1
 12218 05:2B16: 05 03        	ora	<L422+processport_1+2
 12219 05:2B18: D0 03        	bne	L424
 12220 05:2B1A: 82 56 00     	brl	L10271
 12221                        L424:
 12222                        	.line	2534
 12223                        ;			pcmd = (PMARSHALDATA)k_read_ipc_
                    port(processport);
 12224                        	.line	2535
 12225 05:2B1D: D4 03        	pei	<L422+processport_1+2
 12226 05:2B1F: D4 01        	pei	<L422+processport_1
 12227 05:2B21: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12228 05:2B25: 85 05        	sta	<L422+pcmd_1
 12229 05:2B27: 86 07        	stx	<L422+pcmd_1+2
 12230                        ;			while(pcmd)
  Mon Sep 27 2021  9:39                                                Page 238


 12231                        	.line	2536
 12232                        L10272:
 12233 05:2B29: A5 05        	lda	<L422+pcmd_1
 12234 05:2B2B: 05 07        	ora	<L422+pcmd_1+2
 12235 05:2B2D: D0 03        	bne	L425
 12236 05:2B2F: 82 41 00     	brl	L10273
 12237                        L425:
 12238                        ;			{
 12239                        	.line	2537
 12240                        ;				k_debug_pointer("_k_asyn
                    c_execute:pcmd:",pcmd);
 12241                        	.line	2538
 12242 05:2B32: D4 07        	pei	<L422+pcmd_1+2
 12243 05:2B34: D4 05        	pei	<L422+pcmd_1
 12244 05:2B36: F4 xx xx     	pea	#^L401+6
 12245 05:2B39: F4 xx xx     	pea	#<L401+6
 12246 05:2B3C: 22 xx xx xx  	jsl	~~k_debug_pointer
 12247                        ;				if(pcmd->pointerValue)
 12248                        	.line	2539
 12249                        ;				{
 12250 05:2B40: A7 05        	lda	[<L422+pcmd_1]
 12251 05:2B42: A0 02 00     	ldy	#$2
 12252 05:2B45: 17 05        	ora	[<L422+pcmd_1],Y
 12253 05:2B47: D0 03        	bne	L426
 12254 05:2B49: 82 18 00     	brl	L10274
 12255                        L426:
 12256                        	.line	2540
 12257                        ;					((FXASYNCPROCESS
                    )(pcmd->pointerValue))(pcmd);
 12258                        	.line	2541
 12259 05:2B4C: D4 07        	pei	<L422+pcmd_1+2
 12260 05:2B4E: D4 05        	pei	<L422+pcmd_1
 12261 05:2B50: A0 02 00     	ldy	#$2
 12262 05:2B53: B7 05        	lda	[<L422+pcmd_1],Y
 12263 05:2B55: AA           	tax
 12264 05:2B56: A7 05        	lda	[<L422+pcmd_1]
 12265                        	xref	~~~lcal
 12266 05:2B58: 22 xx xx xx  	jsl	~~~lcal
 12267                        ;					k_mem_deallocate
                    _heap(pcmd);
 12268                        	.line	2542
 12269 05:2B5C: D4 07        	pei	<L422+pcmd_1+2
 12270 05:2B5E: D4 05        	pei	<L422+pcmd_1
 12271 05:2B60: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
 12272                        ;				}
 12273                        	.line	2543
 12274                        ;				pcmd = (PMARSHALDATA)k_r
                    ead_ipc_port(processport);
 12275                        L10274:
 12276                        	.line	2544
 12277 05:2B64: D4 03        	pei	<L422+processport_1+2
 12278 05:2B66: D4 01        	pei	<L422+processport_1
 12279 05:2B68: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12280 05:2B6C: 85 05        	sta	<L422+pcmd_1
 12281 05:2B6E: 86 07        	stx	<L422+pcmd_1+2
 12282                        ;			}
 12283                        	.line	2545
 12284 05:2B70: 82 B6 FF     	brl	L10272
  Mon Sep 27 2021  9:39                                                Page 239


 12285                        L10273:
 12286                        ;		}
 12287                        	.line	2546
 12288                        ;
 12289                        ;
 12290                        ;		break;
 12291                        L10271:
 12292                        	.line	2549
 12293 05:2B73: 82 3A 00     	brl	L10269
 12294                        ;	case FX_IDLEPROC_REG:
 12295                        	.line	2550
 12296                        L10275:
 12297                        ;		k_debug_strings("_k_async_execute reason
                    :","FX_IDLEPROC_REG");
 12298                        	.line	2551
 12299 05:2B76: F4 xx xx     	pea	#^L401+54
 12300 05:2B79: F4 xx xx     	pea	#<L401+54
 12301 05:2B7C: F4 xx xx     	pea	#^L401+29
 12302 05:2B7F: F4 xx xx     	pea	#<L401+29
 12303 05:2B82: 22 xx xx xx  	jsl	~~k_debug_strings
 12304                        ;		break;
 12305                        	.line	2552
 12306 05:2B86: 82 27 00     	brl	L10269
 12307                        ;	case FX_IDLEPROC_UNREG:
 12308                        	.line	2553
 12309                        L10276:
 12310                        ;		k_debug_strings("_k_async_execute reason
                    :","FX_IDLEPROC_UNREG");
 12311                        	.line	2554
 12312 05:2B89: F4 xx xx     	pea	#^L401+95
 12313 05:2B8C: F4 xx xx     	pea	#<L401+95
 12314 05:2B8F: F4 xx xx     	pea	#^L401+70
 12315 05:2B92: F4 xx xx     	pea	#<L401+70
 12316 05:2B95: 22 xx xx xx  	jsl	~~k_debug_strings
 12317                        ;		break;
 12318                        	.line	2555
 12319 05:2B99: 82 14 00     	brl	L10269
 12320                        ;	}
 12321                        	.line	2556
 12322                        L10268:
 12323                        	xref	~~~swt
 12324 05:2B9C: 22 xx xx xx  	jsl	~~~swt
 12325 05:2BA0: 03 00        	dw	3
 12326 05:2BA2: 01 00        	dw	1
 12327 05:2BA4: 75 2B        	dw	L10275-1
 12328 05:2BA6: 02 00        	dw	2
 12329 05:2BA8: 88 2B        	dw	L10276-1
 12330 05:2BAA: 04 00        	dw	4
 12331 05:2BAC: 05 2B        	dw	L10270-1
 12332 05:2BAE: AF 2B        	dw	L10269-1
 12333                        L10269:
 12334                        ;}
 12335                        	.line	2557
 12336                        L427:
 12337 05:2BB0: A5 0A        	lda	<L421+2
 12338 05:2BB2: 85 0C        	sta	<L421+2+2
 12339 05:2BB4: A5 09        	lda	<L421+1
 12340 05:2BB6: 85 0B        	sta	<L421+1+2
  Mon Sep 27 2021  9:39                                                Page 240


 12341 05:2BB8: 2B           	pld
 12342 05:2BB9: 3B           	tsc
 12343 05:2BBA: 18           	clc
 12344 05:2BBB: 69 0A 00     	adc	#L421+2
 12345 05:2BBE: 1B           	tcs
 12346 05:2BBF: 6B           	rtl
 12347                        	.endblock	2557
 12348             00000008   L421	equ	8
 12349             00000001   L422	equ	1
 12350 05:2BC0:              	ends
 12351                        	efunc
 12352                        	.endfunc	2557,1,8
 12353                        	.line	2557
 12354                        	data
 12355                        L401:
 12356 00:091F: 40 70 72 6F  	db	$40,$70,$72,$6F,$63,$00,$5F,$6B,$5F,$61,
                    $73,$79,$6E,$63,$5F
       00:0923: 63 00 5F 6B 
       00:0927: 5F 61 73 79 
       00:092B: 6E 63 5F 
 12357 00:092E: 65 78 65 63  	db	$65,$78,$65,$63,$75,$74,$65,$3A,$70,$63,
                    $6D,$64,$3A,$00,$5F
       00:0932: 75 74 65 3A 
       00:0936: 70 63 6D 64 
       00:093A: 3A 00 5F 
 12358 00:093D: 6B 5F 61 73  	db	$6B,$5F,$61,$73,$79,$6E,$63,$5F,$65,$78,
                    $65,$63,$75,$74,$65
       00:0941: 79 6E 63 5F 
       00:0945: 65 78 65 63 
       00:0949: 75 74 65 
 12359 00:094C: 20 72 65 61  	db	$20,$72,$65,$61,$73,$6F,$6E,$3A,$00,$46,
                    $58,$5F,$49,$44,$4C
       00:0950: 73 6F 6E 3A 
       00:0954: 00 46 58 5F 
       00:0958: 49 44 4C 
 12360 00:095B: 45 50 52 4F  	db	$45,$50,$52,$4F,$43,$5F,$52,$45,$47,$00,
                    $5F,$6B,$5F,$61,$73
       00:095F: 43 5F 52 45 
       00:0963: 47 00 5F 6B 
       00:0967: 5F 61 73 
 12361 00:096A: 79 6E 63 5F  	db	$79,$6E,$63,$5F,$65,$78,$65,$63,$75,$74,
                    $65,$20,$72,$65,$61
       00:096E: 65 78 65 63 
       00:0972: 75 74 65 20 
       00:0976: 72 65 61 
 12362 00:0979: 73 6F 6E 3A  	db	$73,$6F,$6E,$3A,$00,$46,$58,$5F,$49,$44,
                    $4C,$45,$50,$52,$4F
       00:097D: 00 46 58 5F 
       00:0981: 49 44 4C 45 
       00:0985: 50 52 4F 
 12363 00:0988: 43 5F 55 4E  	db	$43,$5F,$55,$4E,$52,$45,$47,$00
       00:098C: 52 45 47 00 
 12364 00:0990:              	ends
 12365                        ;
 12366                        ;
 12367                        ;VOID _k_async_debug(UINT reason)
 12368                        ;{
 12369                        	.line	2560
  Mon Sep 27 2021  9:39                                                Page 241


 12370                        	.line	2561
 12371                        	EVTMAN
 12372                        	xdef	~~_k_async_debug
 12373                        	func
 12374                        	.function	2561
 12375                        ~~_k_async_debug:
 12376                        	longa	on
 12377                        	longi	on
 12378 05:2BC0: 3B           	tsc
 12379 05:2BC1: 38           	sec
 12380 05:2BC2: E9 04 00     	sbc	#L429
 12381 05:2BC5: 1B           	tcs
 12382 05:2BC6: 0B           	phd
 12383 05:2BC7: 5B           	tcd
 12384             00000004   reason_0	set	4
 12385                        	.block	2561
 12386                        ;	LPVOID message = NULL;
 12387                        ;
 12388                        ;	switch(reason)
 12389             00000000   message_1	set	0
 12390                        	.sym	message,0,129,1,32
 12391                        	.sym	reason,4,16,6,16
 12392 05:2BC8: 64 01        	stz	<L430+message_1
 12393 05:2BCA: 64 03        	stz	<L430+message_1+2
 12394                        	.line	2564
 12395 05:2BCC: A5 08        	lda	<L429+reason_0
 12396 05:2BCE: 82 A9 00     	brl	L10277
 12397                        ;	{
 12398                        	.line	2565
 12399                        ;	case FX_IDLEPROC_PROCESS:
 12400                        	.line	2566
 12401                        L10279:
 12402                        ;
 12403                        ;		if(_k_debugport_hd == NULL)
 12404                        	.line	2568
 12405                        ;			_k_debugport_hd =  k_get_ipc_por
                    t(IPC_SYS_DEBUG_HD);
 12406 05:2BD1: AD xx xx     	lda	|~~_k_debugport_hd
 12407 05:2BD4: 0D xx xx     	ora	|~~_k_debugport_hd+2
 12408 05:2BD7: F0 03        	beq	L432
 12409 05:2BD9: 82 10 00     	brl	L10280
 12410                        L432:
 12411                        	.line	2569
 12412 05:2BDC: F4 xx xx     	pea	#^L428
 12413 05:2BDF: F4 xx xx     	pea	#<L428
 12414 05:2BE2: 22 xx xx xx  	jsl	~~k_get_ipc_port
 12415 05:2BE6: 8D xx xx     	sta	|~~_k_debugport_hd
 12416 05:2BE9: 8E xx xx     	stx	|~~_k_debugport_hd+2
 12417                        ;
 12418                        ;
 12419                        ;		if(_k_debugport_hd)
 12420                        L10280:
 12421                        	.line	2572
 12422                        ;		{
 12423 05:2BEC: AD xx xx     	lda	|~~_k_debugport_hd
 12424 05:2BEF: 0D xx xx     	ora	|~~_k_debugport_hd+2
 12425 05:2BF2: D0 03        	bne	L433
 12426 05:2BF4: 82 4A 00     	brl	L10281
  Mon Sep 27 2021  9:39                                                Page 242


 12427                        L433:
 12428                        	.line	2573
 12429                        ;			message = k_read_ipc_port(_k_deb
                    ugport_hd);
 12430                        	.line	2574
 12431 05:2BF7: AD xx xx     	lda	|~~_k_debugport_hd+2
 12432 05:2BFA: 48           	pha
 12433 05:2BFB: AD xx xx     	lda	|~~_k_debugport_hd
 12434 05:2BFE: 48           	pha
 12435 05:2BFF: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12436 05:2C03: 85 01        	sta	<L430+message_1
 12437 05:2C05: 86 03        	stx	<L430+message_1+2
 12438                        ;			while(message)
 12439                        	.line	2575
 12440                        L10282:
 12441 05:2C07: A5 01        	lda	<L430+message_1
 12442 05:2C09: 05 03        	ora	<L430+message_1+2
 12443 05:2C0B: D0 03        	bne	L434
 12444 05:2C0D: 82 31 00     	brl	L10283
 12445                        L434:
 12446                        ;			{
 12447                        	.line	2576
 12448                        ;				k_debug_strings("DEHD:",
                     ((PFXSTRING)message)->buffer );
 12449                        	.line	2577
 12450 05:2C10: A0 06 00     	ldy	#$6
 12451 05:2C13: B7 01        	lda	[<L430+message_1],Y
 12452 05:2C15: 48           	pha
 12453 05:2C16: A0 04 00     	ldy	#$4
 12454 05:2C19: B7 01        	lda	[<L430+message_1],Y
 12455 05:2C1B: 48           	pha
 12456 05:2C1C: F4 xx xx     	pea	#^L428+9
 12457 05:2C1F: F4 xx xx     	pea	#<L428+9
 12458 05:2C22: 22 xx xx xx  	jsl	~~k_debug_strings
 12459                        ;				k_fxstring_free(((PFXSTR
                    ING)message));
 12460                        	.line	2578
 12461 05:2C26: D4 03        	pei	<L430+message_1+2
 12462 05:2C28: D4 01        	pei	<L430+message_1
 12463 05:2C2A: 22 xx xx xx  	jsl	~~k_fxstring_free
 12464                        ;				message = k_read_ipc_por
                    t(_k_debugport_hd);
 12465                        	.line	2579
 12466 05:2C2E: AD xx xx     	lda	|~~_k_debugport_hd+2
 12467 05:2C31: 48           	pha
 12468 05:2C32: AD xx xx     	lda	|~~_k_debugport_hd
 12469 05:2C35: 48           	pha
 12470 05:2C36: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12471 05:2C3A: 85 01        	sta	<L430+message_1
 12472 05:2C3C: 86 03        	stx	<L430+message_1+2
 12473                        ;			}
 12474                        	.line	2580
 12475 05:2C3E: 82 C6 FF     	brl	L10282
 12476                        L10283:
 12477                        ;		}
 12478                        	.line	2581
 12479                        ;
 12480                        ;
  Mon Sep 27 2021  9:39                                                Page 243


 12481                        ;		break;
 12482                        L10281:
 12483                        	.line	2584
 12484 05:2C41: 82 4A 00     	brl	L10278
 12485                        ;	case FX_IDLEPROC_REG:
 12486                        	.line	2585
 12487                        L10284:
 12488                        ;		k_debug_strings("_k_async_debug reason:"
                    ,"FX_IDLEPROC_REG");
 12489                        	.line	2586
 12490 05:2C44: F4 xx xx     	pea	#^L428+38
 12491 05:2C47: F4 xx xx     	pea	#<L428+38
 12492 05:2C4A: F4 xx xx     	pea	#^L428+15
 12493 05:2C4D: F4 xx xx     	pea	#<L428+15
 12494 05:2C50: 22 xx xx xx  	jsl	~~k_debug_strings
 12495                        ;
 12496                        ;		_k_debugport_hd =  k_get_ipc_port(IPC_SY
                    S_DEBUG_HD);
 12497                        	.line	2588
 12498 05:2C54: F4 xx xx     	pea	#^L428+54
 12499 05:2C57: F4 xx xx     	pea	#<L428+54
 12500 05:2C5A: 22 xx xx xx  	jsl	~~k_get_ipc_port
 12501 05:2C5E: 8D xx xx     	sta	|~~_k_debugport_hd
 12502 05:2C61: 8E xx xx     	stx	|~~_k_debugport_hd+2
 12503                        ;
 12504                        ;		break;
 12505                        	.line	2590
 12506 05:2C64: 82 27 00     	brl	L10278
 12507                        ;	case FX_IDLEPROC_UNREG:
 12508                        	.line	2591
 12509                        L10285:
 12510                        ;		k_debug_strings("_k_async_debug reason:"
                    ,"FX_IDLEPROC_UNREG");
 12511                        	.line	2592
 12512 05:2C67: F4 xx xx     	pea	#^L428+86
 12513 05:2C6A: F4 xx xx     	pea	#<L428+86
 12514 05:2C6D: F4 xx xx     	pea	#^L428+63
 12515 05:2C70: F4 xx xx     	pea	#<L428+63
 12516 05:2C73: 22 xx xx xx  	jsl	~~k_debug_strings
 12517                        ;		break;
 12518                        	.line	2593
 12519 05:2C77: 82 14 00     	brl	L10278
 12520                        ;	}
 12521                        	.line	2594
 12522                        L10277:
 12523                        	xref	~~~swt
 12524 05:2C7A: 22 xx xx xx  	jsl	~~~swt
 12525 05:2C7E: 03 00        	dw	3
 12526 05:2C80: 01 00        	dw	1
 12527 05:2C82: 43 2C        	dw	L10284-1
 12528 05:2C84: 02 00        	dw	2
 12529 05:2C86: 66 2C        	dw	L10285-1
 12530 05:2C88: 04 00        	dw	4
 12531 05:2C8A: D0 2B        	dw	L10279-1
 12532 05:2C8C: 8D 2C        	dw	L10278-1
 12533                        L10278:
 12534                        ;}
 12535                        	.line	2595
  Mon Sep 27 2021  9:39                                                Page 244


 12536                        L435:
 12537 05:2C8E: A5 06        	lda	<L429+2
 12538 05:2C90: 85 08        	sta	<L429+2+2
 12539 05:2C92: A5 05        	lda	<L429+1
 12540 05:2C94: 85 07        	sta	<L429+1+2
 12541 05:2C96: 2B           	pld
 12542 05:2C97: 3B           	tsc
 12543 05:2C98: 18           	clc
 12544 05:2C99: 69 06 00     	adc	#L429+2
 12545 05:2C9C: 1B           	tcs
 12546 05:2C9D: 6B           	rtl
 12547                        	.endblock	2595
 12548             00000004   L429	equ	4
 12549             00000001   L430	equ	1
 12550 05:2C9E:              	ends
 12551                        	efunc
 12552                        	.endfunc	2595,1,4
 12553                        	.line	2595
 12554                        	data
 12555                        L428:
 12556 00:0990: 40 64 65 62  	db	$40,$64,$65,$62,$75,$67,$68,$64,$00,$44,
                    $45,$48,$44,$3A,$00
       00:0994: 75 67 68 64 
       00:0998: 00 44 45 48 
       00:099C: 44 3A 00 
 12557 00:099F: 5F 6B 5F 61  	db	$5F,$6B,$5F,$61,$73,$79,$6E,$63,$5F,$64,
                    $65,$62,$75,$67,$20
       00:09A3: 73 79 6E 63 
       00:09A7: 5F 64 65 62 
       00:09AB: 75 67 20 
 12558 00:09AE: 72 65 61 73  	db	$72,$65,$61,$73,$6F,$6E,$3A,$00,$46,$58,
                    $5F,$49,$44,$4C,$45
       00:09B2: 6F 6E 3A 00 
       00:09B6: 46 58 5F 49 
       00:09BA: 44 4C 45 
 12559 00:09BD: 50 52 4F 43  	db	$50,$52,$4F,$43,$5F,$52,$45,$47,$00,$40,
                    $64,$65,$62,$75,$67
       00:09C1: 5F 52 45 47 
       00:09C5: 00 40 64 65 
       00:09C9: 62 75 67 
 12560 00:09CC: 68 64 00 5F  	db	$68,$64,$00,$5F,$6B,$5F,$61,$73,$79,$6E,
                    $63,$5F,$64,$65,$62
       00:09D0: 6B 5F 61 73 
       00:09D4: 79 6E 63 5F 
       00:09D8: 64 65 62 
 12561 00:09DB: 75 67 20 72  	db	$75,$67,$20,$72,$65,$61,$73,$6F,$6E,$3A,
                    $00,$46,$58,$5F,$49
       00:09DF: 65 61 73 6F 
       00:09E3: 6E 3A 00 46 
       00:09E7: 58 5F 49 
 12562 00:09EA: 44 4C 45 50  	db	$44,$4C,$45,$50,$52,$4F,$43,$5F,$55,$4E,
                    $52,$45,$47,$00
       00:09EE: 52 4F 43 5F 
       00:09F2: 55 4E 52 45 
       00:09F6: 47 00 
 12563 00:09F8:              	ends
 12564                        ;
 12565                        ;
  Mon Sep 27 2021  9:39                                                Page 245


 12566                        ;VOID _k_async_mouse(UINT reason)
 12567                        ;{
 12568                        	.line	2598
 12569                        	.line	2599
 12570                        	EVTMAN
 12571                        	xdef	~~_k_async_mouse
 12572                        	func
 12573                        	.function	2599
 12574                        ~~_k_async_mouse:
 12575                        	longa	on
 12576                        	longi	on
 12577 05:2C9E: 3B           	tsc
 12578 05:2C9F: 38           	sec
 12579 05:2CA0: E9 08 00     	sbc	#L437
 12580 05:2CA3: 1B           	tcs
 12581 05:2CA4: 0B           	phd
 12582 05:2CA5: 5B           	tcd
 12583             00000004   reason_0	set	4
 12584                        	.block	2599
 12585                        ;	PIPCPORT mouseport = NULL;
 12586                        ;	PMARSHALDATA pcmd  = NULL;
 12587                        ;
 12588                        ;	switch(reason)
 12589             00000000   mouseport_1	set	0
 12590             00000004   pcmd_1	set	4
 12591                        	.sym	mouseport,0,138,1,32,65
 12592                        	.sym	pcmd,4,139,1,32,75
 12593                        	.sym	reason,4,16,6,16
 12594 05:2CA6: 64 01        	stz	<L438+mouseport_1
 12595 05:2CA8: 64 03        	stz	<L438+mouseport_1+2
 12596 05:2CAA: 64 05        	stz	<L438+pcmd_1
 12597 05:2CAC: 64 07        	stz	<L438+pcmd_1+2
 12598                        	.line	2603
 12599 05:2CAE: A5 0C        	lda	<L437+reason_0
 12600 05:2CB0: 82 8B 00     	brl	L10286
 12601                        ;	{
 12602                        	.line	2604
 12603                        ;	case FX_IDLEPROC_PROCESS:
 12604                        	.line	2605
 12605                        L10288:
 12606                        ;		//k_debug_string("_k_async_mouse\r\n");
 12607                        ;
 12608                        ;		mouseport =  k_get_ipc_port("@mouse");
 12609                        	.line	2608
 12610 05:2CB3: F4 xx xx     	pea	#^L436
 12611 05:2CB6: F4 xx xx     	pea	#<L436
 12612 05:2CB9: 22 xx xx xx  	jsl	~~k_get_ipc_port
 12613 05:2CBD: 85 01        	sta	<L438+mouseport_1
 12614 05:2CBF: 86 03        	stx	<L438+mouseport_1+2
 12615                        ;		if(mouseport)
 12616                        	.line	2609
 12617                        ;		{
 12618 05:2CC1: A5 01        	lda	<L438+mouseport_1
 12619 05:2CC3: 05 03        	ora	<L438+mouseport_1+2
 12620 05:2CC5: D0 03        	bne	L440
 12621 05:2CC7: 82 4B 00     	brl	L10289
 12622                        L440:
 12623                        	.line	2610
  Mon Sep 27 2021  9:39                                                Page 246


 12624                        ;			pcmd = (PMARSHALDATA)k_read_ipc_
                    port(mouseport);
 12625                        	.line	2611
 12626 05:2CCA: D4 03        	pei	<L438+mouseport_1+2
 12627 05:2CCC: D4 01        	pei	<L438+mouseport_1
 12628 05:2CCE: 22 xx xx xx  	jsl	~~k_read_ipc_port
 12629 05:2CD2: 85 05        	sta	<L438+pcmd_1
 12630 05:2CD4: 86 07        	stx	<L438+pcmd_1+2
 12631                        ;			while(pcmd)
 12632                        	.line	2612
 12633                        L10290:
 12634 05:2CD6: A5 05        	lda	<L438+pcmd_1
 12635 05:2CD8: 05 07        	ora	<L438+pcmd_1+2
 12636 05:2CDA: D0 03        	bne	L441
 12637 05:2CDC: 82 36 00     	brl	L10291
 12638                        L441:
 12639                        ;			{
 12640                        	.line	2613
 12641                        ;				k_debug_pointer("_k_asyn
                    c_mouse:pcmd:",pcmd);
 12642                        	.line	2614
 12643 05:2CDF: D4 07        	pei	<L438+pcmd_1+2
 12644 05:2CE1: D4 05        	pei	<L438+pcmd_1
 12645 05:2CE3: F4 xx xx     	pea	#^L436+7
 12646 05:2CE6: F4 xx xx     	pea	#<L436+7
 12647 05:2CE9: 22 xx xx xx  	jsl	~~k_debug_pointer
 12648                        ;				if(pcmd->byteValue)
 12649                        	.line	2615
 12650                        ;				{
 12651 05:2CED: A7 05        	lda	[<L438+pcmd_1]
 12652 05:2CEF: 29 FF 00     	and	#$ff
 12653 05:2CF2: D0 03        	bne	L442
 12654 05:2CF4: 82 0F 00     	brl	L10292
 12655                        L442:
 12656                        	.line	2616
 12657                        ;					//k_debug_hex("_
                    k_async_mouse:",pcmd->byteValue);
 12658                        ;					k_mouse_write(pc
                    md->byteValue);
 12659                        	.line	2618
 12660 05:2CF7: A7 05        	lda	[<L438+pcmd_1]
 12661 05:2CF9: 48           	pha
 12662 05:2CFA: 22 97 2A 05  	jsl	~~k_mouse_write
 12663                        ;					k_mem_deallocate
                    _heap(pcmd);
 12664                        	.line	2619
 12665 05:2CFE: D4 07        	pei	<L438+pcmd_1+2
 12666 05:2D00: D4 05        	pei	<L438+pcmd_1
 12667 05:2D02: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
 12668                        ;				}
 12669                        	.line	2620
 12670                        ;				pcmd = (PMARSHALDATA)k_r
                    ead_ipc_port(mouseport);
 12671                        L10292:
 12672                        	.line	2621
 12673 05:2D06: D4 03        	pei	<L438+mouseport_1+2
 12674 05:2D08: D4 01        	pei	<L438+mouseport_1
 12675 05:2D0A: 22 xx xx xx  	jsl	~~k_read_ipc_port
  Mon Sep 27 2021  9:39                                                Page 247


 12676 05:2D0E: 85 05        	sta	<L438+pcmd_1
 12677 05:2D10: 86 07        	stx	<L438+pcmd_1+2
 12678                        ;			}
 12679                        	.line	2622
 12680 05:2D12: 82 C1 FF     	brl	L10290
 12681                        L10291:
 12682                        ;		}
 12683                        	.line	2623
 12684                        ;
 12685                        ;
 12686                        ;		break;
 12687                        L10289:
 12688                        	.line	2626
 12689 05:2D15: 82 3A 00     	brl	L10287
 12690                        ;	case FX_IDLEPROC_REG:
 12691                        	.line	2627
 12692                        L10293:
 12693                        ;		k_debug_strings("_k_async_mouse reason:"
                    ,"FX_IDLEPROC_REG");
 12694                        	.line	2628
 12695 05:2D18: F4 xx xx     	pea	#^L436+51
 12696 05:2D1B: F4 xx xx     	pea	#<L436+51
 12697 05:2D1E: F4 xx xx     	pea	#^L436+28
 12698 05:2D21: F4 xx xx     	pea	#<L436+28
 12699 05:2D24: 22 xx xx xx  	jsl	~~k_debug_strings
 12700                        ;		break;
 12701                        	.line	2629
 12702 05:2D28: 82 27 00     	brl	L10287
 12703                        ;	case FX_IDLEPROC_UNREG:
 12704                        	.line	2630
 12705                        L10294:
 12706                        ;		k_debug_strings("_k_async_mouse reason:"
                    ,"FX_IDLEPROC_UNREG");
 12707                        	.line	2631
 12708 05:2D2B: F4 xx xx     	pea	#^L436+90
 12709 05:2D2E: F4 xx xx     	pea	#<L436+90
 12710 05:2D31: F4 xx xx     	pea	#^L436+67
 12711 05:2D34: F4 xx xx     	pea	#<L436+67
 12712 05:2D37: 22 xx xx xx  	jsl	~~k_debug_strings
 12713                        ;		break;
 12714                        	.line	2632
 12715 05:2D3B: 82 14 00     	brl	L10287
 12716                        ;	}
 12717                        	.line	2633
 12718                        L10286:
 12719                        	xref	~~~swt
 12720 05:2D3E: 22 xx xx xx  	jsl	~~~swt
 12721 05:2D42: 03 00        	dw	3
 12722 05:2D44: 01 00        	dw	1
 12723 05:2D46: 17 2D        	dw	L10293-1
 12724 05:2D48: 02 00        	dw	2
 12725 05:2D4A: 2A 2D        	dw	L10294-1
 12726 05:2D4C: 04 00        	dw	4
 12727 05:2D4E: B2 2C        	dw	L10288-1
 12728 05:2D50: 51 2D        	dw	L10287-1
 12729                        L10287:
 12730                        ;}
 12731                        	.line	2634
  Mon Sep 27 2021  9:39                                                Page 248


 12732                        L443:
 12733 05:2D52: A5 0A        	lda	<L437+2
 12734 05:2D54: 85 0C        	sta	<L437+2+2
 12735 05:2D56: A5 09        	lda	<L437+1
 12736 05:2D58: 85 0B        	sta	<L437+1+2
 12737 05:2D5A: 2B           	pld
 12738 05:2D5B: 3B           	tsc
 12739 05:2D5C: 18           	clc
 12740 05:2D5D: 69 0A 00     	adc	#L437+2
 12741 05:2D60: 1B           	tcs
 12742 05:2D61: 6B           	rtl
 12743                        	.endblock	2634
 12744             00000008   L437	equ	8
 12745             00000001   L438	equ	1
 12746 05:2D62:              	ends
 12747                        	efunc
 12748                        	.endfunc	2634,1,8
 12749                        	.line	2634
 12750                        	data
 12751                        L436:
 12752 00:09F8: 40 6D 6F 75  	db	$40,$6D,$6F,$75,$73,$65,$00,$5F,$6B,$5F,
                    $61,$73,$79,$6E,$63
       00:09FC: 73 65 00 5F 
       00:0A00: 6B 5F 61 73 
       00:0A04: 79 6E 63 
 12753 00:0A07: 5F 6D 6F 75  	db	$5F,$6D,$6F,$75,$73,$65,$3A,$70,$63,$6D,
                    $64,$3A,$00,$5F,$6B
       00:0A0B: 73 65 3A 70 
       00:0A0F: 63 6D 64 3A 
       00:0A13: 00 5F 6B 
 12754 00:0A16: 5F 61 73 79  	db	$5F,$61,$73,$79,$6E,$63,$5F,$6D,$6F,$75,
                    $73,$65,$20,$72,$65
       00:0A1A: 6E 63 5F 6D 
       00:0A1E: 6F 75 73 65 
       00:0A22: 20 72 65 
 12755 00:0A25: 61 73 6F 6E  	db	$61,$73,$6F,$6E,$3A,$00,$46,$58,$5F,$49,
                    $44,$4C,$45,$50,$52
       00:0A29: 3A 00 46 58 
       00:0A2D: 5F 49 44 4C 
       00:0A31: 45 50 52 
 12756 00:0A34: 4F 43 5F 52  	db	$4F,$43,$5F,$52,$45,$47,$00,$5F,$6B,$5F,
                    $61,$73,$79,$6E,$63
       00:0A38: 45 47 00 5F 
       00:0A3C: 6B 5F 61 73 
       00:0A40: 79 6E 63 
 12757 00:0A43: 5F 6D 6F 75  	db	$5F,$6D,$6F,$75,$73,$65,$20,$72,$65,$61,
                    $73,$6F,$6E,$3A,$00
       00:0A47: 73 65 20 72 
       00:0A4B: 65 61 73 6F 
       00:0A4F: 6E 3A 00 
 12758 00:0A52: 46 58 5F 49  	db	$46,$58,$5F,$49,$44,$4C,$45,$50,$52,$4F,
                    $43,$5F,$55,$4E,$52
       00:0A56: 44 4C 45 50 
       00:0A5A: 52 4F 43 5F 
       00:0A5E: 55 4E 52 
 12759 00:0A61: 45 47 00     	db	$45,$47,$00
 12760 00:0A64:              	ends
 12761                        ;
  Mon Sep 27 2021  9:39                                                Page 249


 12762                        ;
 12763                        	.line	2635
 12764                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.c",2598
 12765                        	xref	~~ps2_expect_ack
 12766                        	xref	~~ps2_write
 12767                        	xref	~~k_create_dos_device
 12768                        	xref	~~k_user_FindRect
 12769                        	xref	~~k_user_getOverLappedRect
 12770                        	xref	~~k_increment_z
 12771                        	xref	~~k_point_hit_scan
 12772                        	xref	~~k_point_in_any_nodeslist
 12773                        	xref	~~k_user_getFocusWindow
 12774                        	xref	~~k_isNonClient
 12775                        	xref	~~k_user_getDesktopWindow
 12776                        	xref	~~k_getHandleFromWindow
 12777                        	xref	~~k_initializeWindowManager
 12778                        	xref	~~k_read_ipc_port
 12779                        	xref	~~k_get_ipc_port
 12780                        	xref	~~k_mem_deallocate_heap
 12781                        	xref	~~k_mem_allocate_heap
 12782                        	xref	~~k_heap_integrity_check
 12783                        	xref	~~k_exec_get_current_process
 12784                        	xref	~~k_exec_set_current_process
 12785                        	xref	~~k_exec_set_process_foreground
 12786                        	xref	~~k_exec_launchProcess
 12787                        	xref	~~k_initalize_executive
 12788                        	xref	~~k_fxstring_free
 12789                        	xref	~~k_exec_throw_exception
 12790                        	xref	~~k_debug_strings
 12791                        	xref	~~k_debug_long
 12792                        	xref	~~k_debug_integer
 12793                        	xref	~~k_debug_pointer
 12794                        	xref	~~k_debug_string
 12795                        	xref	~~k_enable_locking
 12796                        	xref	~~k_unlock_irq
 12797                        	xref	~~k_lock_irq
 12798                        	xref	~~k_debug_char_com1
 12799                        	xref	~~k_nodelist_foreach_type
 12800                        	xref	~~k_nodelist_naddtolist
 12801                        	xref	~~k_nodelist_deallocate_list
 12802                        	xref	~~k_nodelist_allocate_list
 12803                        	xref	~~k_nodelist_remove_node
 12804                        	xref	~~k_enqueue_with_lock
 12805                        	xref	~~k_dequeue
 12806                        	xref	~~k_enqueue
 12807                        	xref	~~k_initialize
 12808                        	xref	~~memset
 12809                        	xref	~~memcpy
 12810                        	xref	~~_system_timer
 12811                        	udata
 12812                        ~~_k_mouseState
 12813 00:0000:              	ds	23
 12814 00:0017:              	ends
 12815                        	udata
 12816                        ~~eventProcess
 12817 00:0017:              	ds	1024
 12818 00:0417:              	ends
  Mon Sep 27 2021  9:39                                                Page 250


 12819                        	udata
 12820                        ~~eventProcs
 12821 00:0417:              	ds	1024
 12822 00:0817:              	ends
 12823                        	xref	~~_k_in_irq_enabled
 12824                        	.sym	~~kbd_cmd_handling,~~kbd_cmd_handling,65
                    ,2,0
 12825                        	.sym	~~_kbd_ack,~~_kbd_ack,78,2,0
 12826                        	.sym	~~_kbd_wait,~~_kbd_wait,65,3,0
 12827                        	.sym	~~k_translateKeyMessage,~~k_translateKey
                    Message,1098,3,32,16
 12828                        	.sym	~~Run,~~Run,80,3,0
 12829                        	.sym	~~Query,~~Query,80,3,0
 12830                        	.sym	~~Configure,~~Configure,80,3,0
 12831                        	.sym	~~Uninit,~~Uninit,65,3,0
 12832                        	.sym	~~Init,~~Init,1089,3,32
 12833                        	.sym	~~sync_mouse_time,~~sync_mouse_time,5,3,
                    16
 12834                        	.sym	~~k_new_event_loop,~~k_new_event_loop,65
                    ,2,0
 12835                        	.sym	~~_system_timer,~~_system_timer,18,18,32
 12836                        	.sym	DllMain,0,641,14,32
 12837                        	.sym	~~initHD,~~initHD,14,2,8
 12838                        	.sym	~~k_mouse_read,~~k_mouse_read,78,3,0
 12839                        	.sym	~~k_mouse_write,~~k_mouse_write,65,3,0
 12840                        	.sym	~~k_mouse_wait,~~k_mouse_wait,65,3,0
 12841                        	.sym	~~_k_irq_events_idx,~~_k_irq_events_idx,
                    14,3,8
 12842                        	.sym	~~_k_irq_events,~~_k_irq_events,138,3,32
                    ,16
 12843                        	.sym	~~_k_ignore_irq_events,~~_k_ignore_irq_e
                    vents,14,3,8
 12844                        	.sym	~~extendedLookup,~~extendedLookup,880,3,
                    0,8,2
 12845                        	.sym	~~_k_debugport_hd,~~_k_debugport_hd,138,
                    3,32,65
 12846                        	.sym	~~THIS_MODULE,~~THIS_MODULE,18,3,32
 12847                        	.sym	~~_fast_idle_tick,~~_fast_idle_tick,16,3
                    ,16
 12848                        	.sym	~~_normal_idle_tick,~~_normal_idle_tick,
                    16,3,16
 12849                        	.sym	~~_k_mouseState,~~_k_mouseState,10,3,184
                    ,77
 12850                        	.sym	~~_k_eventQueue,~~_k_eventQueue,138,3,32
                    ,7
 12851                        	.sym	~~_k_hWndFocus,~~_k_hWndFocus,129,3,32
 12852                        	.sym	~~_k_system_timer,~~_k_system_timer,18,3
                    ,32
 12853                        	.sym	~~_k_bootMode,~~_k_bootMode,16,3,16
 12854                        	.sym	~~_k_eventManager_IdleProcList,~~_k_even
                    tManager_IdleProcList,138,2,32,6
 12855                        	.sym	~~eventProcess,~~eventProcess,1130,3,32,
                    76,256
 12856                        	.sym	~~eventProcs,~~eventProcs,5217,3,32,256
 12857                        	.sym	~~_k_currentWndManager,~~_k_currentWndMa
                    nager,138,2,32,69
 12858                        	.sym	~~_k_eventmanager,~~_k_eventmanager,10,2
                    ,192,78
  Mon Sep 27 2021  9:39                                                Page 251


 12859                        	.sym	~~_k_in_irq_enabled,~~_k_in_irq_enabled,
                    14,18,8
 12860                        	.sym	~~ps2_expect_ack,~~ps2_expect_ack,78,18,
                    0
 12861                        	.sym	~~ps2_write,~~ps2_write,78,18,0
 12862                        	.sym	ps2_device_t,0,10,14,88,132
 12863                        	.sym	PTEXTVIEWDATA,0,138,14,32,131
 12864                        	.sym	TEXTVIEWDATA,0,10,14,32,131
 12865                        	.sym	FILE,0,138,14,32,130
 12866                        	.sym	FILE_POINTER,0,10,14,112,130
 12867                        	.sym	~~k_create_dos_device,~~k_create_dos_dev
                    ice,1098,18,32,127
 12868                        	.sym	PDOSHANDLE,0,138,14,32,129
 12869                        	.sym	DOSHANDLE,0,10,14,80,129
 12870                        	.sym	PFXDOSDEVICE,0,138,14,32,127
 12871                        	.sym	FXDOSDEVICE,0,10,14,5744,127
 12872                        	.sym	DOSINITDEVICE,0,641,14,32
 12873                        	.sym	DOSSECTORWRITER,0,654,14,32
 12874                        	.sym	DOSSECTORREADER,0,654,14,32
 12875                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,126
 12876                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,126
 12877                        	.sym	PIDSECTOR,0,138,14,32,103
 12878                        	.sym	IDSECTOR,0,10,14,2048,103
 12879                        	.sym	PLFN,0,138,14,32,102
 12880                        	.sym	LFN,0,10,14,256,102
 12881                        	.sym	PFAT16ENTRYLONG,0,138,14,32,101
 12882                        	.sym	FAT16ENTRYLONG,0,10,14,288,101
 12883                        	.sym	PFAT16ENTRY,0,138,14,32,100
 12884                        	.sym	FAT16ENTRY,0,10,14,256,100
 12885                        	.sym	Fat16BootSector,0,10,14,4096,99
 12886                        	.sym	PPARTITIONTABLE,0,138,14,32,98
 12887                        	.sym	PARTITIONTABLE,0,10,14,128,98
 12888                        	.sym	PFATBOOTSECTOR,0,138,14,32,97
 12889                        	.sym	FATBOOTSECTOR,0,10,14,928,97
 12890                        	.sym	fat_BS_t,0,10,14,688,96
 12891                        	.sym	fat_extBS_16_t,0,10,14,192,95
 12892                        	.sym	PFAT32EXT,0,138,14,32,94
 12893                        	.sym	fat_extBS_32_t,0,10,14,416,94
 12894                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,93
 12895                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,93
 12896                        	.sym	PFILEINFO,0,138,14,32,92
 12897                        	.sym	FILEINFO,0,10,14,136,92
 12898                        	.sym	PDISKINFO,0,138,14,32,91
 12899                        	.sym	DISKINFO,0,10,14,416,91
 12900                        	.sym	PDIRENTRY,0,138,14,32,90
 12901                        	.sym	DIRENTRY,0,10,14,256,90
 12902                        	.sym	DRESULT,0,5,14,16
 12903                        	.sym	DSTATUS,0,14,14,8
 12904                        	.sym	FRESULT,0,5,14,16
 12905                        	.sym	MKFS_PARM,0,10,14,80,89
 12906                        	.sym	FILINFO,0,10,14,2224,88
 12907                        	.sym	DIR,0,10,14,416,87
 12908                        	.sym	FIL,0,10,14,4400,86
 12909                        	.sym	FFOBJID,0,10,14,128,85
 12910                        	.sym	FATFS,0,10,14,4504,84
 12911                        	.sym	LBA_t,0,18,14,32
 12912                        	.sym	FSIZE_t,0,18,14,32
 12913                        	.sym	TCHAR,0,14,14,8
  Mon Sep 27 2021  9:39                                                Page 252


 12914                        	.sym	PCOMMANDARGS,0,138,14,32,83
 12915                        	.sym	COMMANDARGS,0,10,14,64,83
 12916                        	.sym	PTOKENIZESTATE,0,133,14,32
 12917                        	.sym	TOKENIZESTATE,0,5,14,16
 12918                        	.sym	PTOKEN,0,138,14,32,82
 12919                        	.sym	TOKEN,0,10,14,64,82
 12920                        	.sym	PTOKENTYPE,0,133,14,32
 12921                        	.sym	TOKENTYPE,0,5,14,16
 12922                        	.sym	FXCommandHandler,0,656,14,32
 12923                        	.sym	PCONSOLECTX,0,138,14,32,81
 12924                        	.sym	CONSOLECTX,0,10,14,1144,81
 12925                        	.sym	PSPINNERCTX,0,138,14,32,80
 12926                        	.sym	SPINNERCTX,0,10,14,48,80
 12927                        	.sym	HCLIP,0,138,14,32,79
 12928                        	.sym	PCLIPBOARD_DATA,0,138,14,32,79
 12929                        	.sym	CLIPBOARD_DATA,0,10,14,168,79
 12930                        	.sym	~~_k_keyCodesExtSet,~~_k_keyCodesExtSet,
                    112,2,0,1
 12931                        	.sym	~~_k_keyCodesShiftSet,~~_k_keyCodesShift
                    Set,112,2,0,89
 12932                        	.sym	~~_k_keyCodesSet,~~_k_keyCodesSet,112,2,
                    0,89
 12933                        	.sym	~~_k_async_execute,~~_k_async_execute,65
                    ,2,0
 12934                        	.sym	~~_k_async_debug,~~_k_async_debug,65,2,0
 12935                        	.sym	~~_k_async_mouse,~~_k_async_mouse,65,2,0
 12936                        	.sym	~~_k_async_keyboard,~~_k_async_keyboard,
                    65,2,0
 12937                        	.sym	~~IdleCleanup,~~IdleCleanup,65,2,0
 12938                        	.sym	~~DeviceChecks,~~DeviceChecks,65,2,0
 12939                        	.sym	~~k_execute_idleprocs,~~k_execute_idlepr
                    ocs,65,2,0
 12940                        	.sym	~~k_process_hi_idle_procs,~~k_process_hi
                    _idle_procs,65,2,0
 12941                        	.sym	~~k_process_idle_procs,~~k_process_idle_
                    procs,65,2,0
 12942                        	.sym	~~k_unregister_idle_proc,~~k_unregister_
                    idle_proc,78,2,0
 12943                        	.sym	~~k_register_idle_proc,~~k_register_idle
                    _proc,1089,2,32
 12944                        	.sym	~~k_send_process_command_message,~~k_sen
                    d_process_command_message,78,2,0
 12945                        	.sym	~~k_send_command_message,~~k_send_comman
                    d_message,78,2,0
 12946                        	.sym	~~k_send_window_native_message,~~k_send_
                    window_native_message,78,2,0
 12947                        	.sym	~~k_send_window_message,~~k_send_window_
                    message,78,2,0
 12948                        	.sym	~~k_send_message,~~k_send_message,78,2,0
 12949                        	.sym	~~k_dealloc_message_arg,~~k_dealloc_mess
                    age_arg,65,2,0
 12950                        	.sym	~~k_alloc_message_arg,~~k_alloc_message_
                    arg,1089,2,32
 12951                        	.sym	~~k_destory_msg,~~k_destory_msg,65,2,0
 12952                        	.sym	~~k_updateMouseState,~~k_updateMouseStat
                    e,1098,2,32,16
 12953                        	.sym	~~k_create_synthetic_window_msg,~~k_crea
                    te_synthetic_window_msg,1098,2,32,16
  Mon Sep 27 2021  9:39                                                Page 253


 12954                        	.sym	~~k_create_process_msg,~~k_create_proces
                    s_msg,1098,2,32,16
 12955                        	.sym	~~k_create_msg,~~k_create_msg,1098,2,32,
                    16
 12956                        	.sym	~~k_irq_device_event,~~k_irq_device_even
                    t,65,2,0
 12957                        	.sym	~~k_unattach_events,~~k_unattach_events,
                    69,2,0
 12958                        	.sym	~~k_attach_process_events,~~k_attach_pro
                    cess_events,69,2,0
 12959                        	.sym	~~k_attach_events,~~k_attach_events,69,2
                    ,0
 12960                        	.sym	~~k_signal_sol_event,~~k_signal_sol_even
                    t,65,2,0
 12961                        	.sym	~~k_event_loop,~~k_event_loop,65,2,0
 12962                        	.sym	~~k_do_processes,~~k_do_processes,65,2,0
 12963                        	.sym	~~k_do_procs,~~k_do_procs,65,2,0
 12964                        	.sym	~~IdleProc,~~IdleProc,65,2,0
 12965                        	.sym	~~k_getKeyboardChar,~~k_getKeyboardChar,
                    80,2,0
 12966                        	.sym	~~k_initalize_event_manager,~~k_initaliz
                    e_event_manager,1098,2,32,78
 12967                        	.sym	~~k_get_systemtimer,~~k_get_systemtimer,
                    82,2,0
 12968                        	.sym	PEVENTMANAGER,0,138,14,32,78
 12969                        	.sym	EVENTMANAGER,0,10,14,192,78
 12970                        	.sym	EV_RUN,0,656,14,32
 12971                        	.sym	EV_QUERY_METRIC,0,656,14,32
 12972                        	.sym	EV_CONFIGURE,0,656,14,32
 12973                        	.sym	EV_UNINIT,0,641,14,32
 12974                        	.sym	EV_INIT,0,8833,14,32
 12975                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,77
 12976                        	.sym	MOUSE_MSG_STATE,0,10,14,184,77
 12977                        	.sym	PFXEVENTPROCESS,0,138,14,32,76
 12978                        	.sym	FXEVENTPROCESS,0,10,14,64,76
 12979                        	.sym	FXASYNCPROCESS,0,641,14,32
 12980                        	.sym	PMARSHALDATA,0,139,14,32,75
 12981                        	.sym	MARSHALDATA,0,11,14,32,75
 12982                        	.sym	FXIDLEPROCESS,0,641,14,32
 12983                        	.sym	FXEventProc,0,641,14,32
 12984                        	.sym	PMOUSEMSGDATA,0,138,14,32,74
 12985                        	.sym	MOUSEMSGDATA,0,10,14,64,74
 12986                        	.sym	MSGIRQ,0,5,14,16
 12987                        	.sym	MAINLOOPARGS,0,10,14,16,73
 12988                        	.sym	~~k_user_FindRect,~~k_user_FindRect,1098
                    ,18,32,33
 12989                        	.sym	~~k_user_getOverLappedRect,~~k_user_getO
                    verLappedRect,1098,18,32,6
 12990                        	.sym	PEACHCHILD_MSG,0,138,14,32,72
 12991                        	.sym	EACHCHILD_MSG,0,10,14,64,72
 12992                        	.sym	~~k_increment_z,~~k_increment_z,82,18,0
 12993                        	.sym	~~k_point_hit_scan,~~k_point_hit_scan,10
                    98,18,32,5
 12994                        	.sym	~~k_point_in_any_nodeslist,~~k_point_in_
                    any_nodeslist,1098,18,32,5
 12995                        	.sym	~~k_user_getFocusWindow,~~k_user_getFocu
                    sWindow,1089,18,32
 12996                        	.sym	PMSGBOX_DATA,0,138,14,32,71
  Mon Sep 27 2021  9:39                                                Page 254


 12997                        	.sym	MSGBOX_DATA,0,10,14,96,71
 12998                        	.sym	PDESKTOP_DATA,0,138,14,32,70
 12999                        	.sym	DESKTOP_DATA,0,10,14,64,70
 13000                        	.sym	~~k_isNonClient,~~k_isNonClient,78,18,0
 13001                        	.sym	~~k_user_getDesktopWindow,~~k_user_getDe
                    sktopWindow,1089,18,32
 13002                        	.sym	~~k_getHandleFromWindow,~~k_getHandleFro
                    mWindow,1089,18,32
 13003                        	.sym	~~k_initializeWindowManager,~~k_initiali
                    zeWindowManager,1098,18,32,69
 13004                        	.sym	PWINDOWMANAGER,0,138,14,32,69
 13005                        	.sym	WINDOWMANAGER,0,10,14,160,69
 13006                        	.sym	WM_DOPROCS,0,641,14,32
 13007                        	.sym	WM_QUERY_METRIC,0,656,14,32
 13008                        	.sym	WM_CONFIGURE,0,656,14,32
 13009                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
 13010                        	.sym	WM_EVENTS,0,641,14,32
 13011                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,68
 13012                        	.sym	CUR_PALETTE_MAP,0,10,14,400,68
 13013                        	.sym	PCLICKDETECTED,0,138,14,32,67
 13014                        	.sym	CLICKDETECTED,0,10,14,64,67
 13015                        	.sym	OBJECTCLICKED,0,641,14,32
 13016                        	.sym	PALLOCATIONHEADER,0,138,14,32,66
 13017                        	.sym	ALLOCATIONHEADER,0,10,14,80,66
 13018                        	.sym	~~k_read_ipc_port,~~k_read_ipc_port,1089
                    ,18,32
 13019                        	.sym	~~k_get_ipc_port,~~k_get_ipc_port,1098,1
                    8,32,65
 13020                        	.sym	PIPCPORT,0,138,14,32,65
 13021                        	.sym	IPCPORT,0,10,14,144,65
 13022                        	.sym	~~k_mem_deallocate_heap,~~k_mem_dealloca
                    te_heap,65,18,0
 13023                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
 13024                        	.sym	~~k_heap_integrity_check,~~k_heap_integr
                    ity_check,82,18,0
 13025                        	.sym	MemoryCallback,0,641,14,32
 13026                        	.sym	PFXMEMORYMAP,0,138,14,32,64
 13027                        	.sym	FXMEMORYMAP,0,10,14,2072,64
 13028                        	.sym	UMM_HEAP_INFO,0,10,14,256,63
 13029                        	.sym	~~k_exec_get_current_process,~~k_exec_ge
                    t_current_process,1098,18,32,20
 13030                        	.sym	~~k_exec_set_current_process,~~k_exec_se
                    t_current_process,1098,18,32,20
 13031                        	.sym	~~k_exec_set_process_foreground,~~k_exec
                    _set_process_foreground,65,18,0
 13032                        	.sym	~~k_exec_launchProcess,~~k_exec_launchPr
                    ocess,1098,18,32,20
 13033                        	.sym	~~k_initalize_executive,~~k_initalize_ex
                    ecutive,1098,18,32,62
 13034                        	.sym	PEXECUTIVE,0,138,14,32,62
 13035                        	.sym	EXECUTIVE,0,10,14,128,62
 13036                        	.sym	EX_QUERY_METRIC,0,656,14,32
 13037                        	.sym	EX_CONFIGURE,0,656,14,32
 13038                        	.sym	EX_UNINIT,0,641,14,32
 13039                        	.sym	EX_INIT,0,8833,14,32
 13040                        	.sym	~~k_fxstring_free,~~k_fxstring_free,65,1
                    8,0
  Mon Sep 27 2021  9:39                                                Page 255


 13041                        	.sym	PFXSTRING,0,138,14,32,61
 13042                        	.sym	FXSTRING,0,10,14,64,61
 13043                        	.sym	~~k_exec_throw_exception,~~k_exec_throw_
                    exception,65,18,0
 13044                        	.sym	PIRQCHAIN,0,138,14,32,60
 13045                        	.sym	IRQCHAIN,0,10,14,128,60
 13046                        	.sym	DEVICEDRIVER_COMMAND,0,654,14,32
 13047                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
 13048                        	.sym	DEVICEDRIVER_WRITE,0,654,14,32
 13049                        	.sym	DEVICEDRIVER_READ,0,654,14,32
 13050                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
 13051                        	.sym	DEVICEDRIVER_IRQ,0,641,14,32
 13052                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,59
 13053                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,59
 13054                        	.sym	GETDRIVERDEF,0,8842,14,32,58
 13055                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,58
 13056                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,58
 13057                        	.sym	~~k_debug_strings,~~k_debug_strings,65,1
                    8,0
 13058                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
 13059                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
 13060                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
 13061                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
 13062                        	.sym	~~k_enable_locking,~~k_enable_locking,65
                    ,18,0
 13063                        	.sym	~~k_unlock_irq,~~k_unlock_irq,80,18,0
 13064                        	.sym	~~k_lock_irq,~~k_lock_irq,80,18,0
 13065                        	.sym	~~k_debug_char_com1,~~k_debug_char_com1,
                    65,18,0
 13066                        	.sym	PSEGMENTHEADER,0,138,14,32,57
 13067                        	.sym	SEGMENTHEADER,0,10,14,160,57
 13068                        	.sym	PDEBUGBYTEBITS,0,138,14,32,56
 13069                        	.sym	DEBUGBYTEBITS,0,10,14,8,56
 13070                        	.sym	PFXENVIRONMENT,0,138,14,32,55
 13071                        	.sym	FXENVIRONMENT,0,10,14,96,55
 13072                        	.sym	PFXZEROPAGE,0,138,14,32,54
 13073                        	.sym	FXZEROPAGE,0,10,14,720,54
 13074                        	.sym	IRQBUFFER,0,10,14,32,53
 13075                        	.sym	KERNELTRAPCALL,0,641,14,32
 13076                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,52
 13077                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,52
 13078                        	.sym	~~k_nodelist_foreach_type,~~k_nodelist_f
                    oreach_type,65,18,0
 13079                        	.sym	FOREACHNODEUNTIL,0,654,14,32
 13080                        	.sym	FOREACHNODE,0,641,14,32
 13081                        	.sym	~~k_nodelist_naddtolist,~~k_nodelist_nad
                    dtolist,1098,18,32,5
 13082                        	.sym	~~k_nodelist_deallocate_list,~~k_nodelis
                    t_deallocate_list,65,18,0
 13083                        	.sym	~~k_nodelist_allocate_list,~~k_nodelist_
                    allocate_list,1098,18,32,6
 13084                        	.sym	~~k_nodelist_remove_node,~~k_nodelist_re
                    move_node,1098,18,32,5
 13085                        	.sym	~~k_enqueue_with_lock,~~k_enqueue_with_l
                    ock,65,18,0
  Mon Sep 27 2021  9:39                                                Page 256


 13086                        	.sym	~~k_dequeue,~~k_dequeue,1089,18,32
 13087                        	.sym	~~k_enqueue,~~k_enqueue,78,18,0
 13088                        	.sym	~~k_initialize,~~k_initialize,65,18,0
 13089                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,51
 13090                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,51
 13091                        	.sym	PFXRFHEADER_STRING,0,138,14,32,50
 13092                        	.sym	FXRFHEADER_STRING,0,10,14,32,50
 13093                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
 13094                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
 13095                        	.sym	PFXRFHEADER,0,138,14,32,48
 13096                        	.sym	FXRFHEADER,0,10,14,72,48
 13097                        	.sym	PFXCOMBUFFER,0,138,14,32,47
 13098                        	.sym	FXCOMBUFFER,0,10,14,2080,47
 13099                        	.sym	PSUBMENULIST,0,138,14,32,46
 13100                        	.sym	SUBMENULIST,0,10,14,40,46
 13101                        	.sym	HSUBMENU,0,7,14,32
 13102                        	.sym	PSUBMENU,0,138,14,32,45
 13103                        	.sym	SUBMENU,0,10,14,64,45
 13104                        	.sym	MenuAction,0,641,14,32
 13105                        	.sym	PMENUANCHOR,0,138,14,32,44
 13106                        	.sym	MENUANCHOR,0,10,14,272,44
 13107                        	.sym	PMSGBOX,0,138,14,32,43
 13108                        	.sym	MSGBOX,0,10,14,144,43
 13109                        	.sym	PTEXTBOX,0,138,14,32,42
 13110                        	.sym	TEXTBOX,0,10,14,144,42
 13111                        	.sym	PLISTBOX,0,138,14,32,41
 13112                        	.sym	LISTBOX,0,10,14,240,41
 13113                        	.sym	PSCROLLBAR,0,138,14,32,40
 13114                        	.sym	SCROLLBAR,0,10,14,240,40
 13115                        	.sym	PBUTTON,0,138,14,32,39
 13116                        	.sym	BUTTON,0,10,14,96,39
 13117                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
 13118                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
 13119                        	.sym	PMENUTAG,0,138,14,32,37
 13120                        	.sym	MENUTAG,0,10,14,160,37
 13121                        	.sym	PMENU,0,138,14,32,36
 13122                        	.sym	MENU,0,10,14,280,36
 13123                        	.sym	HMENURESOURCE,0,129,14,32
 13124                        	.sym	FONTMETRIC,0,10,14,32,35
 13125                        	.sym	TITLE,0,142,14,32
 13126                        	.sym	PHANDLE,0,1153,14,32
 13127                        	.sym	HANDLE,0,129,14,32
 13128                        	.sym	PWINDOWEX,0,138,14,32,34
 13129                        	.sym	WINDOWEX,0,10,14,3880,34
 13130                        	.sym	PWINDOW,0,138,14,32,33
 13131                        	.sym	WINDOW,0,10,14,3904,33
 13132                        	.sym	PDRAGDATA,0,138,14,32,32
 13133                        	.sym	DRAGDATA,0,10,14,216,32
 13134                        	.sym	PNCCLICKABLE,0,138,14,32,31
 13135                        	.sym	NCCLICKABLE,0,10,14,136,31
 13136                        	.sym	HCLICKABLE,0,7,14,32
 13137                        	.sym	PCLICKABLE,0,138,14,32,30
 13138                        	.sym	CLICKABLE,0,10,14,152,30
 13139                        	.sym	PWNDCLASS,0,138,14,32,29
 13140                        	.sym	WNDCLASS,0,10,14,272,29
 13141                        	.sym	HBRUSH,0,129,14,32
 13142                        	.sym	HCURSOR,0,129,14,32
 13143                        	.sym	HICON,0,129,14,32
  Mon Sep 27 2021  9:39                                                Page 257


 13144                        	.sym	HINSTANCE,0,129,14,32
 13145                        	.sym	FXWndProc,0,654,14,32
 13146                        	.sym	PDRECT,0,138,14,32,28
 13147                        	.sym	DRECT,0,10,14,112,28
 13148                        	.sym	PRECTP,0,138,14,32,27
 13149                        	.sym	RECTP,0,10,14,96,27
 13150                        	.sym	PRECT,0,138,14,32,26
 13151                        	.sym	RECT,0,10,14,112,26
 13152                        	.sym	PPOINT,0,138,14,32,25
 13153                        	.sym	POINT,0,10,14,32,25
 13154                        	.sym	PFXPROPERTY,0,138,14,32,23
 13155                        	.sym	FXPROPERTY,0,10,14,384,23
 13156                        	.sym	PKEYSTATE,0,138,14,32,22
 13157                        	.sym	KEYSTATE,0,10,14,112,22
 13158                        	.sym	SCANCODE,0,14,14,8
 13159                        	.sym	KEYCODE,0,16,14,16
 13160                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
 13161                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
 13162                        	.sym	PFXPROCESS,0,138,14,32,20
 13163                        	.sym	FXPROCESS,0,10,14,800,20
 13164                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
 13165                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
 13166                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
 13167                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
 13168                        	.sym	FXProcessProc,0,641,14,32
 13169                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
 13170                        	.sym	FXCMDMESSAGE,0,10,14,312,17
 13171                        	.sym	PFXOSMESSAGE,0,138,14,32,16
 13172                        	.sym	FXOSMESSAGE,0,10,14,312,16
 13173                        	.sym	PINT_REGS,0,138,14,32,15
 13174                        	.sym	INT_REGS,0,10,14,104,15
 13175                        	.sym	TASK_STACK,0,10,14,32,14
 13176                        	.sym	TASK,0,10,14,48,13
 13177                        	.sym	PIRQDATA,0,138,14,32,12
 13178                        	.sym	IRQDATA,0,10,14,48,12
 13179                        	.sym	HMENU,0,129,14,32
 13180                        	.sym	HWND,0,129,14,32
 13181                        	.sym	MSGDATA,0,14,14,8
 13182                        	.sym	MSGDEST,0,18,14,32
 13183                        	.sym	MSGSRC,0,18,14,32
 13184                        	.sym	MSGTYPE,0,16,14,16
 13185                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
 13186                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
 13187                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
 13188                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
 13189                        	.sym	FILE_PATH_LIST,0,138,14,32,6
 13190                        	.sym	PROCEDURE_LIST,0,138,14,32,6
 13191                        	.sym	FILE_HANDLE,0,138,14,32,11
 13192                        	.sym	FILE_BLOCK,0,10,14,552,11
 13193                        	.sym	SEMAPHORE,0,10,14,16,10
 13194                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
 13195                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
 13196                        	.sym	KRESULT,0,18,14,32
 13197                        	.sym	PKERNEL_ERROR,0,138,14,32,8
 13198                        	.sym	KERNEL_ERROR,0,10,14,32,8
 13199                        	.sym	PROCESS_STATUS,0,16,14,16
 13200                        	.sym	FILE_PATH_NAME,0,142,14,32
 13201                        	.sym	PROCESS_RESOURCE,0,129,14,32
  Mon Sep 27 2021  9:39                                                Page 258


 13202                        	.sym	PROCESS_TLS,0,129,14,32
 13203                        	.sym	PROCESS_CTX,0,129,14,32
 13204                        	.sym	USERID,0,16,14,16
 13205                        	.sym	PROCESS_ID,0,18,14,32
 13206                        	.sym	PROCESS_BANK,0,14,14,8
 13207                        	.sym	PFXQUEUE,0,138,14,32,7
 13208                        	.sym	FXQUEUE,0,10,14,80,7
 13209                        	.sym	PFXNODELIST,0,138,14,32,6
 13210                        	.sym	FXNODELIST,0,10,14,96,6
 13211                        	.sym	NodeListDeallocator,0,641,14,32
 13212                        	.sym	PFXNODE,0,138,14,32,5
 13213                        	.sym	FXNODE,0,10,14,384,5
 13214                        	.sym	PBYTEBITS,0,138,14,32,4
 13215                        	.sym	BYTEBITS,0,10,14,8,4
 13216                        	.sym	HRESULT,0,18,14,32
 13217                        	.sym	LPWCHAR,0,144,14,32
 13218                        	.sym	WCHAR,0,16,14,16
 13219                        	.sym	HSTRINGTABLE,0,129,14,32
 13220                        	.sym	HCOLOR,0,129,14,32
 13221                        	.sym	HFONT,0,129,14,32
 13222                        	.sym	HDC,0,129,14,32
 13223                        	.sym	HPOINTER,0,129,14,32
 13224                        	.sym	uint32_t,0,18,14,32
 13225                        	.sym	uint8_t,0,14,14,8
 13226                        	.sym	LPBOOL,0,142,14,32
 13227                        	.sym	BOOL,0,14,14,8
 13228                        	.sym	DWORD,0,18,14,32
 13229                        	.sym	ULONG,0,18,14,32
 13230                        	.sym	LPLONG,0,135,14,32
 13231                        	.sym	LONG,0,7,14,32
 13232                        	.sym	PUINT,0,144,14,32
 13233                        	.sym	USHORT,0,16,14,16
 13234                        	.sym	UINT,0,16,14,16
 13235                        	.sym	INT,0,5,14,16
 13236                        	.sym	WORD,0,5,14,16
 13237                        	.sym	PBYTE,0,142,14,32
 13238                        	.sym	BYTE,0,14,14,8
 13239                        	.sym	IOPORT,0,142,14,32
 13240                        	.sym	PUCHAR,0,142,14,32
 13241                        	.sym	UCHAR,0,14,14,8
 13242                        	.sym	LPWCSTR,0,142,14,32
 13243                        	.sym	LPCSTR,0,142,14,32
 13244                        	.sym	LPSTR,0,142,14,32
 13245                        	.sym	LPCHAR,0,142,14,32
 13246                        	.sym	CHAR,0,14,14,8
 13247                        	.sym	PUINT_32,0,146,14,32
 13248                        	.sym	UINT_32,0,18,14,32
 13249                        	.sym	PUINT_16,0,144,14,32
 13250                        	.sym	UINT_16,0,16,14,16
 13251                        	.sym	PUINT_8,0,142,14,32
 13252                        	.sym	UINT_8,0,14,14,8
 13253                        	.sym	LPVOID,0,129,14,32
 13254                        	.sym	VOID,0,1,14,32
 13255                        	.sym	~~memset,~~memset,1089,18,32
 13256                        	.sym	~~memcpy,~~memcpy,1089,18,32
 13257                        	.sym	Boolean_T,0,5,14,16
 13258                        	.sym	ldiv_t,0,10,14,64,2
 13259                        	.sym	div_t,0,10,14,32,1
  Mon Sep 27 2021  9:39                                                Page 259


 13260                        	.sym	wctype_t,0,16,14,16
 13261                        	.sym	wint_t,0,16,14,16
 13262                        	.sym	wchar_t,0,14,14,8
 13263                        	.sym	ptrdiff_t,0,7,14,32
 13264                        	.sym	size_t,0,16,14,16
 13265                        	end


      Lines assembled: 13265
      Errors: 0
