  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers\DRIVER_B2SDCard.c",0
     7                        ;
     8                        ;#include "DRIVER_B2SDCard.h"
     9                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\DRIVER_B2SDCard.h",0
    10                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
    11                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    12                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    13                        	.line	88
    14                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    15                        	.stag	fake1_,32,1
    16                        	.member	quot,0,5,8,16
    17                        	.member	rem,16,5,8,16
    18                        	.eos
    19                        	.stag	fake2_,64,2
    20                        	.member	quot,0,7,8,32
    21                        	.member	rem,32,7,8,32
    22                        	.eos
    23                        	.stag	int_sqrt,32,3
    24                        	.member	sqrt,0,16,8,16
    25                        	.member	frac,16,16,8,16
    26                        	.eos
    27                        	.line	205
    28                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
    29                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    30                        	.line	134
    31                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
    32                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    33                        	.line	103
    34                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
    35                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    36                        	.stag	_fx_bytebits,8,4
    37                        	.member	b7,0,14,17,1
    38                        	.member	b6,1,14,17,1
    39                        	.member	b5,2,14,17,1
    40                        	.member	b4,3,14,17,1
  Sat Jul 10 2021  1:15                                                Page 2


    41                        	.member	b3,4,14,17,1
    42                        	.member	b2,5,14,17,1
    43                        	.member	b1,6,14,17,1
    44                        	.member	b0,7,14,17,1
    45                        	.eos
    46                        	.stag	_fx_node,384,5
    47                        	.member	type,0,14,8,8
    48                        	.member	Reserved0,8,14,8,8
    49                        	.member	data,16,129,8,32
    50                        	.member	last,48,138,8,32,5
    51                        	.member	next,80,138,8,32,5
    52                        	.member	name,112,110,8,0,32
    53                        	.member	Reserved1,368,16,8,16
    54                        	.eos
    55                        	.stag	_fx_nodelist,96,6
    56                        	.member	listhead,0,138,8,32,5
    57                        	.member	listData,32,129,8,32
    58                        	.member	deallocator,64,641,8,32
    59                        	.eos
    60                        	.stag	_fx_queue,80,7
    61                        	.member	count,0,5,8,16
    62                        	.member	front,16,138,8,32,5
    63                        	.member	rear,48,138,8,32,5
    64                        	.eos
    65                        	.stag	fake8_,32,8
    66                        	.member	subsystem,0,14,8,8
    67                        	.member	level,8,14,8,8
    68                        	.member	error,16,16,8,16
    69                        	.eos
    70                        	.stag	_fx_process_signal,16,9
    71                        	.member	cbSize,0,16,8,16
    72                        	.eos
    73                        	.stag	_fx_semaphore,16,10
    74                        	.member	reserved,0,5,8,16
    75                        	.eos
    76                        	.stag	_fx_fileBlock,552,11
    77                        	.member	openCount,0,16,8,16
    78                        	.member	lockCount,16,16,8,16
    79                        	.member	dirty,32,14,8,8
    80                        	.member	fileBuffer,40,110,8,0,64
    81                        	.eos
    82                        	.stag	_fx_irq_data,48,12
    83                        	.member	line,0,5,8,16
    84                        	.member	keycode,16,142,8,32
    85                        	.eos
    86                        	.stag	_task,48,13
    87                        	.member	SPL,0,14,8,8
    88                        	.member	SPH,8,14,8,8
    89                        	.member	pstack,16,142,8,32
    90                        	.eos
    91                        	.stag	_task_stack,32,14
    92                        	.member	SS,0,142,8,32
    93                        	.eos
    94                        	.stag	int_regs,104,15
    95                        	.member	PB,0,14,8,8
    96                        	.member	PH,8,14,8,8
    97                        	.member	PL,16,14,8,8
    98                        	.member	PP,24,14,8,8
  Sat Jul 10 2021  1:15                                                Page 3


    99                        	.member	DB,32,14,8,8
   100                        	.member	DH,40,14,8,8
   101                        	.member	DL,48,14,8,8
   102                        	.member	AH,56,14,8,8
   103                        	.member	AL,64,14,8,8
   104                        	.member	XH,72,14,8,8
   105                        	.member	XL,80,14,8,8
   106                        	.member	YH,88,14,8,8
   107                        	.member	YL,96,14,8,8
   108                        	.eos
   109                        	.stag	_fx_eventMessage,304,16
   110                        	.member	src,0,18,8,32
   111                        	.member	dest,32,18,8,32
   112                        	.member	type,64,16,8,16
   113                        	.member	hwnd,80,129,8,32
   114                        	.member	pheap,112,129,8,32
   115                        	.member	msgTime,144,18,8,32
   116                        	.member	data,176,110,8,0,16
   117                        	.eos
   118                        	.stag	_fx_cmdMessage,304,17
   119                        	.member	src,0,18,8,32
   120                        	.member	dest,32,18,8,32
   121                        	.member	type,64,16,8,16
   122                        	.member	hwnd,80,129,8,32
   123                        	.member	pheap,112,129,8,32
   124                        	.member	msgTime,144,18,8,32
   125                        	.member	cmdCId,176,16,8,16
   126                        	.member	cmdMId,192,16,8,16
   127                        	.member	parameter1,208,18,8,32
   128                        	.member	parameter2,240,18,8,32
   129                        	.member	parameter3,272,18,8,32
   130                        	.eos
   131                        	.stag	_fx_console_ctl,448,18
   132                        	.member	maxCols,0,5,8,16
   133                        	.member	maxRows,16,5,8,16
   134                        	.member	curX,32,5,8,16
   135                        	.member	curY,48,5,8,16
   136                        	.member	fgColor,64,5,8,16
   137                        	.member	bgColor,80,5,8,16
   138                        	.member	mode,96,14,8,8
   139                        	.member	kbBuffer,104,101,8,0,16
   140                        	.member	screenBuffer,360,142,8,32
   141                        	.member	desktopMode,392,14,8,8
   142                        	.member	lastMouseButton,400,5,8,16
   143                        	.member	lastMouseX,416,5,8,16
   144                        	.member	lastMouseY,432,5,8,16
   145                        	.eos
   146                        	.stag	_fx_desktop_ctl,392,19
   147                        	.member	desktopMode,0,14,8,8
   148                        	.member	cursorCtl,8,5,8,16
   149                        	.member	cursorState,24,5,8,16
   150                        	.member	backgroundColor,40,5,8,16
   151                        	.member	foregroundColor,56,5,8,16
   152                        	.member	menuMode,72,5,8,16
   153                        	.member	lastMouseButton,88,5,8,16
   154                        	.member	lastMouseX,104,5,8,16
   155                        	.member	lastMouseY,120,5,8,16
   156                        	.member	currentDiskName,136,142,8,32
  Sat Jul 10 2021  1:15                                                Page 4


   157                        	.member	diskNodes,168,129,8,32
   158                        	.member	titleNodes,200,129,8,32
   159                        	.member	menuNodes,232,129,8,32
   160                        	.member	iconNodes,264,129,8,32
   161                        	.member	windowNodes,296,129,8,32
   162                        	.member	fontNodes,328,129,8,32
   163                        	.member	wndProc,360,138,8,32,6
   164                        	.eos
   165                        	.stag	_fx_process,800,20
   166                        	.member	cbSize,0,5,8,16
   167                        	.member	procId,16,18,8,32
   168                        	.member	parentId,48,18,8,32
   169                        	.member	ctx,80,129,8,32
   170                        	.member	userId,112,16,8,16
   171                        	.member	status,128,16,8,16
   172                        	.member	foregroundActive,144,14,8,8
   173                        	.member	tls,152,1121,8,32,8
   174                        	.member	commandLine,408,142,8,32
   175                        	.member	semaphores,440,138,8,32,6
   176                        	.member	fileHandles,472,138,8,32,6
   177                        	.member	pathList,504,138,8,32,6
   178                        	.member	resources,536,138,8,32,6
   179                        	.member	timerAware,568,14,8,8
   180                        	.member	timerTicks,576,112,8,0,2
   181                        	.member	timerTickCount,608,112,8,0,2
   182                        	.member	kernelError,640,10,8,32,8
   183                        	.member	consoleCtl,672,138,8,32,18
   184                        	.member	desktopCtl,704,138,8,32,19
   185                        	.member	execProc,736,641,8,32
   186                        	.member	startupArgs,768,129,8,32
   187                        	.eos
   188                        	.stag	_fxProcessMessage,112,21
   189                        	.member	src,0,18,8,32
   190                        	.member	dest,32,18,8,32
   191                        	.member	type,64,16,8,16
   192                        	.member	processInfo,80,138,8,32,20
   193                        	.eos
   194                        	.stag	_k_key_state,112,22
   195                        	.member	scanCode,0,14,8,8
   196                        	.member	isShifted,8,14,8,8
   197                        	.member	isAlt,16,14,8,8
   198                        	.member	isExtended,24,14,8,8
   199                        	.member	isCapsLock,32,14,8,8
   200                        	.member	isNumLock,40,14,8,8
   201                        	.member	isScrollLock,48,14,8,8
   202                        	.member	keyChar,56,16,8,16
   203                        	.member	scanTime,72,18,8,32
   204                        	.member	ledStatus,104,14,8,8
   205                        	.eos
   206                        	.stag	_fx_property,384,23
   207                        	.member	name,0,110,8,0,16
   208                        	.member	value,128,110,8,0,32
   209                        	.eos
   210                        	.utag	_24bitPointer,32,24
   211                        	.member	address,0,142,11,32
   212                        	.member	bytes,0,110,11,0,4
   213                        	.eos
   214                        	.stag	_PointStruct,32,25
  Sat Jul 10 2021  1:15                                                Page 5


   215                        	.member	x,0,5,8,16
   216                        	.member	y,16,5,8,16
   217                        	.eos
   218                        	.stag	_RectStruct,112,26
   219                        	.member	x,0,5,8,16
   220                        	.member	y,16,5,8,16
   221                        	.member	z,32,18,8,32
   222                        	.member	width,64,5,8,16
   223                        	.member	height,80,5,8,16
   224                        	.member	attr,96,5,8,16
   225                        	.eos
   226                        	.stag	fake27_,96,27
   227                        	.member	name,0,142,8,32
   228                        	.member	topLeft,32,10,8,32,25
   229                        	.member	bottomRight,64,10,8,32,25
   230                        	.eos
   231                        	.stag	fake28_,112,28
   232                        	.member	x,0,5,8,16
   233                        	.member	y,16,5,8,16
   234                        	.member	z,32,5,8,16
   235                        	.member	width,48,5,8,16
   236                        	.member	height,64,5,8,16
   237                        	.member	data,80,18,8,32
   238                        	.eos
   239                        	.stag	_k_WindowClass,272,29
   240                        	.member	cbSize,0,16,8,16
   241                        	.member	style,16,16,8,16
   242                        	.member	styleEx,32,16,8,16
   243                        	.member	pWndProc,48,654,8,32
   244                        	.member	hInstance,80,129,8,32
   245                        	.member	hIcon,112,129,8,32
   246                        	.member	hCursor,144,129,8,32
   247                        	.member	hbrBackground,176,129,8,32
   248                        	.member	lpszMenuName,208,142,8,32
   249                        	.member	lpszClassName,240,142,8,32
   250                        	.eos
   251                        	.stag	_ClickableRect,152,30
   252                        	.member	area,0,10,8,112,26
   253                        	.member	z,112,18,8,32
   254                        	.member	enabled,144,14,8,8
   255                        	.eos
   256                        	.stag	_NCClickableRect,136,31
   257                        	.member	area,0,10,8,112,26
   258                        	.member	msgType,112,16,8,16
   259                        	.member	enabled,128,14,8,8
   260                        	.eos
   261                        	.stag	_DragData,216,32
   262                        	.member	area,0,10,8,112,26
   263                        	.member	xoffset,112,5,8,16
   264                        	.member	yoffset,128,5,8,16
   265                        	.member	msgType,144,16,8,16
   266                        	.member	ncAction,160,16,8,16
   267                        	.member	isDrag,176,14,8,8
   268                        	.member	isResize,184,14,8,8
   269                        	.member	canDrag,192,14,8,8
   270                        	.member	canDrop,200,14,8,8
   271                        	.member	didDrag,208,14,8,8
   272                        	.eos
  Sat Jul 10 2021  1:15                                                Page 6


   273                        	.stag	_k_WindowStruct,3904,33
   274                        	.member	cbSize,0,16,8,16
   275                        	.member	style,16,18,8,32
   276                        	.member	styleEx,48,18,8,32
   277                        	.member	win_id,80,5,8,16
   278                        	.member	win_x,96,5,8,16
   279                        	.member	win_y,112,5,8,16
   280                        	.member	win_width,128,5,8,16
   281                        	.member	win_height,144,5,8,16
   282                        	.member	win_xoffset,160,5,8,16
   283                        	.member	win_yoffset,176,5,8,16
   284                        	.member	win_cxoffset,192,5,8,16
   285                        	.member	win_cyoffset,208,5,8,16
   286                        	.member	wndRect,224,10,8,112,26
   287                        	.member	clientRect,336,10,8,112,26
   288                        	.member	nonclientGadgets,448,106,8,0,31,16
   289                        	.member	clickable,2624,129,8,32
   290                        	.member	win_title,2656,110,8,0,32
   291                        	.member	Reserved0,2912,16,8,16
   292                        	.member	win_class,2928,110,8,0,16
   293                        	.member	win_class_name,3056,110,8,0,32
   294                        	.member	nBitmapLayer,3312,16,8,16
   295                        	.member	bgRegion,3328,129,8,32
   296                        	.member	procid,3360,18,8,32
   297                        	.member	pWndClass,3392,138,8,32,29
   298                        	.member	pParentWindow,3424,129,8,32
   299                        	.member	hMenu,3456,129,8,32
   300                        	.member	hPointer,3488,129,8,32
   301                        	.member	hBackground,3520,129,8,32
   302                        	.member	pChildWindows,3552,138,8,32,6
   303                        	.member	pChildHitList,3584,138,8,32,6
   304                        	.member	isVisible,3616,14,8,8
   305                        	.member	windowData,3624,129,8,32
   306                        	.member	clientData,3656,1121,8,32,6
   307                        	.member	isClosed,3848,14,8,8
   308                        	.member	isClosing,3856,14,8,8
   309                        	.member	isDesktop,3864,14,8,8
   310                        	.member	clickableNode,3872,138,8,32,5
   311                        	.eos
   312                        	.stag	_k_WindowStructEx,3880,34
   313                        	.member	cbSize,0,16,8,16
   314                        	.member	style,16,18,8,32
   315                        	.member	styleEx,48,18,8,32
   316                        	.member	win_id,80,5,8,16
   317                        	.member	win_x,96,5,8,16
   318                        	.member	win_y,112,5,8,16
   319                        	.member	win_width,128,5,8,16
   320                        	.member	win_height,144,5,8,16
   321                        	.member	win_xoffset,160,5,8,16
   322                        	.member	win_yoffset,176,5,8,16
   323                        	.member	win_cxoffset,192,5,8,16
   324                        	.member	win_cyoffset,208,5,8,16
   325                        	.member	wndRect,224,10,8,112,26
   326                        	.member	clientRect,336,10,8,112,26
   327                        	.member	nonclientGadgets,448,106,8,0,31,16
   328                        	.member	clickable,2624,129,8,32
   329                        	.member	win_title,2656,110,8,0,32
   330                        	.member	Reserved0,2912,16,8,16
  Sat Jul 10 2021  1:15                                                Page 7


   331                        	.member	win_class,2928,110,8,0,16
   332                        	.member	nBitmapLayer,3056,16,8,16
   333                        	.member	procid,3072,18,8,32
   334                        	.member	pWndClass,3104,138,8,32,29
   335                        	.member	pParentWindow,3136,129,8,32
   336                        	.member	hMenu,3168,129,8,32
   337                        	.member	hPointer,3200,129,8,32
   338                        	.member	hBackground,3232,129,8,32
   339                        	.member	pChildWindows,3264,138,8,32,6
   340                        	.member	pChildHitList,3296,138,8,32,6
   341                        	.member	isVisible,3328,14,8,8
   342                        	.member	windowData,3336,129,8,32
   343                        	.member	clientData,3368,1121,8,32,4
   344                        	.member	isClosed,3496,14,8,8
   345                        	.member	hWnd,3504,129,8,32
   346                        	.member	localRect,3536,10,8,112,26
   347                        	.member	globalRect,3648,10,8,112,26
   348                        	.member	clientOffsetRect,3760,10,8,112,26
   349                        	.member	isDesktop,3872,14,8,8
   350                        	.eos
   351                        	.stag	_FontMetric,32,35
   352                        	.member	width,0,5,8,16
   353                        	.member	height,16,5,8,16
   354                        	.eos
   355                        	.stag	_MenuStruct,280,36
   356                        	.member	cx,0,5,8,16
   357                        	.member	cy,16,5,8,16
   358                        	.member	width,32,5,8,16
   359                        	.member	height,48,5,8,16
   360                        	.member	fcolor,64,14,8,8
   361                        	.member	bcolor,72,14,8,8
   362                        	.member	chromeLeft,80,14,8,8
   363                        	.member	chromeRight1,88,14,8,8
   364                        	.member	chromeRight2,96,14,8,8
   365                        	.member	hFont,104,129,8,32
   366                        	.member	itemId,136,16,8,16
   367                        	.member	pCaption,152,142,8,32
   368                        	.member	subMenus,184,138,8,32,6
   369                        	.member	pBackground,216,129,8,32
   370                        	.member	hWndOwner,248,129,8,32
   371                        	.eos
   372                        	.stag	fake37_,160,37
   373                        	.member	menuId,0,16,8,16
   374                        	.member	caption,16,142,8,32
   375                        	.member	rect,48,10,8,112,26
   376                        	.eos
   377                        	.stag	fake38_,5152,38
   378                        	.member	pParent,0,138,8,32,33
   379                        	.member	rect,32,10,8,112,26
   380                        	.member	captions,144,1134,8,32,24
   381                        	.member	chrome,912,110,8,0,24
   382                        	.member	ids,1104,112,8,0,24
   383                        	.member	clickable,1488,106,8,0,30,24
   384                        	.member	selected,5136,16,8,16
   385                        	.eos
   386                        	.stag	_fx_button_t,96,39
   387                        	.member	pCaption,0,142,8,32
   388                        	.member	cCaption,32,16,8,16
  Sat Jul 10 2021  1:15                                                Page 8


   389                        	.member	data,48,129,8,32
   390                        	.member	captionPixelWidth,80,16,8,16
   391                        	.eos
   392                        	.stag	_fx_scrollbar_t,240,40
   393                        	.member	min,0,16,8,16
   394                        	.member	max,16,16,8,16
   395                        	.member	increment,32,16,8,16
   396                        	.member	stopsize,48,16,8,16
   397                        	.member	location,64,5,8,16
   398                        	.member	state,80,5,8,16
   399                        	.member	rectThumb,96,10,8,112,26
   400                        	.member	data,208,129,8,32
   401                        	.eos
   402                        	.stag	_fx_listbox_t,240,41
   403                        	.member	pos,0,5,8,16
   404                        	.member	selected,16,16,8,16
   405                        	.member	offsetX,32,5,8,16
   406                        	.member	offsetY,48,5,8,16
   407                        	.member	inc,64,5,8,16
   408                        	.member	direction,80,5,8,16
   409                        	.member	top,96,5,8,16
   410                        	.member	bottom,112,5,8,16
   411                        	.member	indexTop,128,5,8,16
   412                        	.member	indexBottom,144,5,8,16
   413                        	.member	maxItems,160,16,8,16
   414                        	.member	fontSet,176,142,8,32
   415                        	.member	data,208,129,8,32
   416                        	.eos
   417                        	.stag	_fx_textbox_t,144,42
   418                        	.member	pos,0,5,8,16
   419                        	.member	selected,16,16,8,16
   420                        	.member	offsetX,32,5,8,16
   421                        	.member	offsetY,48,5,8,16
   422                        	.member	isShifted,64,14,8,8
   423                        	.member	cursorState,72,14,8,8
   424                        	.member	fontSet,80,142,8,32
   425                        	.member	data,112,129,8,32
   426                        	.eos
   427                        	.stag	_fx_msgbox_t,144,43
   428                        	.member	pos,0,5,8,16
   429                        	.member	selected,16,16,8,16
   430                        	.member	offsetX,32,5,8,16
   431                        	.member	offsetY,48,5,8,16
   432                        	.member	isShifted,64,14,8,8
   433                        	.member	cursorState,72,14,8,8
   434                        	.member	fontSet,80,142,8,32
   435                        	.member	data,112,129,8,32
   436                        	.eos
   437                        	.stag	_fx_menuAnchor_t,272,44
   438                        	.member	pCaption,0,142,8,32
   439                        	.member	renderLayoutX,32,16,8,16
   440                        	.member	renderLayoutY,48,16,8,16
   441                        	.member	captionPixelWidth,64,16,8,16
   442                        	.member	data,80,129,8,32
   443                        	.member	droppedWindow,112,138,8,32,33
   444                        	.member	bytes,144,110,8,0,16
   445                        	.eos
   446                        	.stag	_SubMenuStruct,64,45
  Sat Jul 10 2021  1:15                                                Page 9


   447                        	.member	caption,0,142,8,32
   448                        	.member	action,32,641,8,32
   449                        	.eos
   450                        	.stag	_SubMenuListStruct,40,46
   451                        	.member	cMenus,0,14,8,8
   452                        	.member	psubmenus,8,9354,8,32,45
   453                        	.eos
   454                        	.stag	_fx_ComBuffer,2080,47
   455                        	.member	cbSize,0,16,8,16
   456                        	.member	cbBuffer,16,16,8,16
   457                        	.member	buffer,32,110,8,0,256
   458                        	.eos
   459                        	.stag	_fx_resource_header,72,48
   460                        	.member	magic,0,110,8,0,4
   461                        	.member	major,32,14,8,8
   462                        	.member	minor,40,14,8,8
   463                        	.member	type,48,14,8,8
   464                        	.member	reserved,56,14,8,8
   465                        	.member	resheaderSize,64,14,8,8
   466                        	.eos
   467                        	.stag	_fx_resource_header_font,144,49
   468                        	.member	title,0,110,8,0,16
   469                        	.member	height,128,14,8,8
   470                        	.member	width,136,14,8,8
   471                        	.eos
   472                        	.line	1010
   473                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   474                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   475                        	.line	89
   476                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   477                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   478                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   479                        	.line	1010
   480                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",5
   481                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   482                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   483                        	.line	1010
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   485                        	.line	72
   486                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   487                        	.line	1960
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
   489                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   490                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   491                        	.line	30
  Sat Jul 10 2021  1:15                                                Page 10


   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   493                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   494                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   495                        	.line	1010
   496                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   497                        	.line	114
   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   499                        	.stag	_fx_api_call_table,8192,50
   500                        	.member	call_table,0,1121,8,32,256
   501                        	.eos
   502                        	.stag	_fx_zero_page,824,51
   503                        	.member	fxos_mouse_byte_0,0,14,8,8
   504                        	.member	fxos_mouse_byte_1,8,14,8,8
   505                        	.member	fxos_mouse_byte_2,16,14,8,8
   506                        	.member	fxos_mouse_byte_t,24,14,8,8
   507                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   508                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   509                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   510                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   511                        	.member	fxos_key_byte_0,64,14,8,8
   512                        	.member	fxos_key_byte_1,72,14,8,8
   513                        	.member	fxos_key_byte_2,80,14,8,8
   514                        	.member	fxos_mouse_ctl,88,14,8,8
   515                        	.member	fxos_mouse_index,96,14,8,8
   516                        	.member	fxos_mouse_status,104,14,8,8
   517                        	.member	fxos_mouse_dbg_1,112,18,8,32
   518                        	.member	fxos_mouse_dbg_2,144,18,8,32
   519                        	.member	fxos_mouse_dbg_3,176,18,8,32
   520                        	.member	fxos_vicky_byte_0,208,14,8,8
   521                        	.member	fxos_vicky_byte_1,216,14,8,8
   522                        	.member	fxos_vicky_byte_2,224,14,8,8
   523                        	.member	VersionMajor,232,16,8,16
   524                        	.member	VersionMinor,248,16,8,16
   525                        	.member	VersionRelease,264,16,8,16
   526                        	.member	topMemory,280,18,8,32
   527                        	.member	bottomMemory,312,18,8,32
   528                        	.member	availableMemory,344,18,8,32
   529                        	.member	availableMemoryK,376,18,8,32
   530                        	.member	availableHeapMemory,408,18,8,32
   531                        	.member	availableHeapMemoryK,440,18,8,32
   532                        	.member	fxos_console_row,472,16,8,16
   533                        	.member	fxos_console_col,488,16,8,16
   534                        	.member	executive,504,129,8,32
   535                        	.member	eventmanager,536,129,8,32
   536                        	.member	devicemanager,568,129,8,32
   537                        	.member	windowmanager,600,129,8,32
   538                        	.member	fxos_kernel_api,632,138,8,32,50
   539                        	.member	fxos_dos_api,664,138,8,32,50
   540                        	.member	fxos_gfx_api,696,138,8,32,50
   541                        	.member	fxos_gui_api,728,138,8,32,50
   542                        	.member	fxos_con_api,760,138,8,32,50
   543                        	.member	fxos_reserved_2_api,792,138,8,32,50
   544                        	.eos
  Sat Jul 10 2021  1:15                                                Page 11


   545                        	.stag	_fx_environment,96,52
   546                        	.member	variables,0,142,8,32
   547                        	.member	reserved1,32,5,8,16
   548                        	.member	reserved2,48,5,8,16
   549                        	.member	reserved3,64,5,8,16
   550                        	.member	reserved4,80,5,8,16
   551                        	.eos
   552                        	.stag	_debug_byte_bits,8,53
   553                        	.member	bit7,0,14,17,1
   554                        	.member	bit6,1,14,17,1
   555                        	.member	bit5,2,14,17,1
   556                        	.member	bit4,3,14,17,1
   557                        	.member	bit3,4,14,17,1
   558                        	.member	bit2,5,14,17,1
   559                        	.member	bit1,6,14,17,1
   560                        	.member	bit0,7,14,17,1
   561                        	.eos
   562                        	.stag	_k_segmentheader,160,54
   563                        	.member	version_major,0,14,8,8
   564                        	.member	version_minor,8,14,8,8
   565                        	.member	length,16,5,8,16
   566                        	.member	segment_start_addr,32,7,8,32
   567                        	.member	segment_end_addr,64,7,8,32
   568                        	.member	segment_size,96,7,8,32
   569                        	.member	main_entry_addr,128,7,8,32
   570                        	.eos
   571                        	.stag	_fx_device_driver,776,55
   572                        	.member	name,0,110,8,0,32
   573                        	.member	version,256,110,8,0,16
   574                        	.member	hmajor,384,110,8,0,8
   575                        	.member	hminor,448,110,8,0,8
   576                        	.member	type,512,14,8,8
   577                        	.member	designation,520,110,8,0,6
   578                        	.member	reserved_1,568,16,8,16
   579                        	.member	f_driver_irq,584,129,8,32
   580                        	.member	driver_context,616,129,8,32
   581                        	.member	f_driver_load,648,129,8,32
   582                        	.member	f_driver_read,680,129,8,32
   583                        	.member	f_driver_write,712,129,8,32
   584                        	.member	f_driver_unload,744,129,8,32
   585                        	.eos
   586                        	.stag	_fx_block_device_driver,808,56
   587                        	.member	name,0,110,8,0,32
   588                        	.member	version,256,110,8,0,16
   589                        	.member	hmajor,384,110,8,0,8
   590                        	.member	hminor,448,110,8,0,8
   591                        	.member	type,512,14,8,8
   592                        	.member	designation,520,110,8,0,6
   593                        	.member	reserved_1,568,16,8,16
   594                        	.member	f_driver_irq,584,129,8,32
   595                        	.member	driver_context,616,129,8,32
   596                        	.member	f_driver_load,648,129,8,32
   597                        	.member	f_driver_read,680,129,8,32
   598                        	.member	f_driver_write,712,129,8,32
   599                        	.member	f_driver_unload,744,129,8,32
   600                        	.member	f_driver_command,776,129,8,32
   601                        	.eos
   602                        	.line	400
  Sat Jul 10 2021  1:15                                                Page 12


   603                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   604                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   605                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   606                        	.line	134
   607                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   608                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   609                        	.line	205
   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   611                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   612                        	.line	1010
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   615                        	.line	1960
   616                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
   617                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   618                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   619                        	.line	205
   620                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   621                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   622                        	.line	134
   623                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   624                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   625                        	.line	1010
   626                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   627                        	.stag	_fx_string,64,57
   628                        	.member	size,0,16,8,16
   629                        	.member	pos,16,5,8,16
   630                        	.member	buffer,32,142,8,32
   631                        	.eos
   632                        	.line	139
   633                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   635                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   636                        	.line	30
   637                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   638                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
  Sat Jul 10 2021  1:15                                                Page 13


   639                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   640                        	.line	1010
   641                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   642                        	.stag	_fxos_executive_vtable,128,58
   643                        	.member	Init,0,8833,8,32
   644                        	.member	Configure,32,656,8,32
   645                        	.member	Query,64,656,8,32
   646                        	.member	Uninit,96,641,8,32
   647                        	.eos
   648                        	.line	86
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   650                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   651                        	.line	114
   652                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   653                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   654                        	.line	208
   655                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   656                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   657                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   658                        	.line	30
   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   661                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   662                        	.line	30
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   664                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   665                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   666                        	.line	35
   667                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   668                        	.stag	UMM_HEAP_INFO_t,256,59
   669                        	.member	totalEntries,0,18,8,32
   670                        	.member	usedEntries,32,18,8,32
   671                        	.member	freeEntries,64,18,8,32
   672                        	.member	totalBlocks,96,18,8,32
   673                        	.member	usedBlocks,128,18,8,32
   674                        	.member	freeBlocks,160,18,8,32
   675                        	.member	maxFreeContiguousBlocks,192,18,8,32
   676                        	.member	blockSize,224,18,8,32
   677                        	.eos
   678                        	.line	199
   679                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
  Sat Jul 10 2021  1:15                                                Page 14


   680                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   681                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   682                        	.line	1010
   683                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   684                        	.line	24
   685                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   686                        	.stag	_fx_memory_map,2072,60
   687                        	.member	availableMemory,0,18,8,32
   688                        	.member	valid_segments,32,110,8,0,255
   689                        	.eos
   690                        	.stag	_fx_ipc_port,144,61
   691                        	.member	id,0,18,8,32
   692                        	.member	type,32,14,8,8
   693                        	.member	name,40,138,8,32,57
   694                        	.member	time,72,18,8,32
   695                        	.member	queue,104,138,8,32,7
   696                        	.member	reserved_1,136,14,8,8
   697                        	.eos
   698                        	.line	105
   699                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   700                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   701                        	.line	564
   702                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   703                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   704                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   705                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   706                        	.line	1010
   707                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   708                        	.line	74
   709                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   710                        	.stag	_click_detected,64,62
   711                        	.member	window,0,138,8,32,33
   712                        	.member	handler,32,641,8,32
   713                        	.eos
   714                        	.stag	_current_palette_map,400,63
   715                        	.member	CUR_DESKTOP,0,5,8,16
   716                        	.member	CUR_BACKGROUND,16,5,8,16
   717                        	.member	CUR_FONT,32,5,8,16
   718                        	.member	CUR_SELECTED_FONT,48,5,8,16
   719                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   720                        	.member	CUR_WINDOWFRAME,80,5,8,16
   721                        	.member	CUR_WINDOWBORDER,96,5,8,16
   722                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   723                        	.member	CUR_MENU,128,5,8,16
   724                        	.member	CUR_GADGET,144,5,8,16
   725                        	.member	CUR_COLOR,160,101,8,0,15
  Sat Jul 10 2021  1:15                                                Page 15


   726                        	.eos
   727                        	.line	359
   728                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   729                        	.stag	_fxos_winman_vtable,160,64
   730                        	.member	Events,0,641,8,32
   731                        	.member	ConfigureWindowManager,32,656,8,32
   732                        	.member	ProcessWindowEvent,64,8833,8,32
   733                        	.member	QueryWindowManager,96,656,8,32
   734                        	.member	DoWndProcs,128,641,8,32
   735                        	.eos
   736                        	.stag	fake65_,64,65
   737                        	.member	type,0,16,8,16
   738                        	.member	size,16,16,8,16
   739                        	.member	desktopAction,32,129,8,32
   740                        	.eos
   741                        	.stag	fake66_,96,66
   742                        	.member	type,0,16,8,16
   743                        	.member	caption,16,138,8,32,57
   744                        	.member	buttonType,48,16,8,16
   745                        	.member	x,64,5,8,16
   746                        	.member	y,80,5,8,16
   747                        	.eos
   748                        	.stag	_childMessage_t,64,67
   749                        	.member	msgType,0,16,8,16
   750                        	.member	msgData,16,129,8,32
   751                        	.member	dataSize,48,16,8,16
   752                        	.eos
   753                        	.line	581
   754                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   755                        	.stag	_fx_main_loopvars,16,68
   756                        	.member	dummy,0,5,8,16
   757                        	.eos
   758                        	.stag	_fxMouseMessageData,64,69
   759                        	.member	button1,0,14,8,8
   760                        	.member	button2,8,14,8,8
   761                        	.member	button3,16,14,8,8
   762                        	.member	button4,24,14,8,8
   763                        	.member	x,32,16,8,16
   764                        	.member	y,48,16,8,16
   765                        	.eos
   766                        	.utag	marshalled_data,32,70
   767                        	.member	byteValue,0,14,11,8
   768                        	.member	verbValue,0,110,11,0,2
   769                        	.member	intValue,0,16,11,16
   770                        	.member	longValue,0,18,11,32
   771                        	.member	pointerValue,0,129,11,32
   772                        	.eos
   773                        	.stag	_fx_eventProcess,64,71
   774                        	.member	process,0,138,8,32,20
   775                        	.member	eventProc,32,641,8,32
   776                        	.eos
   777                        	.stag	_mouse_msg_state,184,72
   778                        	.member	lastEvent,0,18,8,32
   779                        	.member	buttonLeftDown,32,14,8,8
   780                        	.member	lastLeftDown,40,18,8,32
   781                        	.member	buttonRightDown,72,14,8,8
  Sat Jul 10 2021  1:15                                                Page 16


   782                        	.member	lastRightDown,80,18,8,32
   783                        	.member	buttonMiddleDown,112,14,8,8
   784                        	.member	lastMiddleDown,120,18,8,32
   785                        	.member	lastX,152,16,8,16
   786                        	.member	lastY,168,16,8,16
   787                        	.eos
   788                        	.stag	_fxos_eventmanager_vtable,192,73
   789                        	.member	EventQueue,0,138,8,32,7
   790                        	.member	Init,32,8833,8,32
   791                        	.member	Run,64,656,8,32
   792                        	.member	Configure,96,656,8,32
   793                        	.member	Query,128,656,8,32
   794                        	.member	Uninit,160,641,8,32
   795                        	.eos
   796                        	.stag	_k_clipboard_data,168,74
   797                        	.member	type,0,14,8,8
   798                        	.member	readable,8,110,8,0,16
   799                        	.member	data,136,129,8,32
   800                        	.eos
   801                        	.line	564
   802                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   803                        	.stag	_fx_spinner_ctx,48,75
   804                        	.member	index,0,5,8,16
   805                        	.member	spinner,16,142,8,32
   806                        	.eos
   807                        	.stag	_fx_console_ctx,1144,76
   808                        	.member	lineBufferIndex,0,5,8,16
   809                        	.member	lineBuffer,16,110,8,0,128
   810                        	.member	isShifted,1040,14,8,8
   811                        	.member	userData,1048,129,8,32
   812                        	.member	screenBuffer,1080,129,8,32
   813                        	.member	Reserved1,1112,129,8,32
   814                        	.eos
   815                        	.stag	_token,64,77
   816                        	.member	type,0,5,8,16
   817                        	.member	depth,16,16,8,16
   818                        	.member	text,32,142,8,32
   819                        	.eos
   820                        	.stag	_command_args,64,78
   821                        	.member	proc,0,656,8,32
   822                        	.member	tokens,32,138,8,32,5
   823                        	.eos
   824                        	.line	208
   825                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   826                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   827                        	.line	139
   828                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",24
   829                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   830                        	.line	114
   831                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   832                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
  Sat Jul 10 2021  1:15                                                Page 17


   833                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
   834                        	.line	298
   835                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   836                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   837                        	.line	1010
   838                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   839                        	.stag	fake79_,4504,79
   840                        	.member	fs_type,0,14,8,8
   841                        	.member	pdrv,8,14,8,8
   842                        	.member	n_fats,16,14,8,8
   843                        	.member	wflag,24,14,8,8
   844                        	.member	fsi_flag,32,14,8,8
   845                        	.member	id,40,5,8,16
   846                        	.member	n_rootdir,56,5,8,16
   847                        	.member	csize,72,5,8,16
   848                        	.member	lfnbuf,88,144,8,32
   849                        	.member	last_clst,120,18,8,32
   850                        	.member	free_clst,152,18,8,32
   851                        	.member	n_fatent,184,18,8,32
   852                        	.member	fsize,216,18,8,32
   853                        	.member	volbase,248,18,8,32
   854                        	.member	fatbase,280,18,8,32
   855                        	.member	dirbase,312,18,8,32
   856                        	.member	database,344,18,8,32
   857                        	.member	winsect,376,18,8,32
   858                        	.member	win,408,110,8,0,512
   859                        	.eos
   860                        	.stag	fake80_,128,80
   861                        	.member	fs,0,138,8,32,79
   862                        	.member	id,32,5,8,16
   863                        	.member	attr,48,14,8,8
   864                        	.member	stat,56,14,8,8
   865                        	.member	sclust,64,18,8,32
   866                        	.member	objsize,96,18,8,32
   867                        	.eos
   868                        	.stag	fake81_,4400,81
   869                        	.member	obj,0,10,8,128,80
   870                        	.member	flag,128,14,8,8
   871                        	.member	err,136,14,8,8
   872                        	.member	fptr,144,18,8,32
   873                        	.member	clust,176,18,8,32
   874                        	.member	sect,208,18,8,32
   875                        	.member	dir_sect,240,18,8,32
   876                        	.member	dir_ptr,272,142,8,32
   877                        	.member	buf,304,110,8,0,512
   878                        	.eos
   879                        	.stag	fake82_,416,82
   880                        	.member	obj,0,10,8,128,80
   881                        	.member	dptr,128,18,8,32
   882                        	.member	clust,160,18,8,32
   883                        	.member	sect,192,18,8,32
   884                        	.member	dir,224,142,8,32
   885                        	.member	fn,256,110,8,0,12
   886                        	.member	blk_ofs,352,18,8,32
  Sat Jul 10 2021  1:15                                                Page 18


   887                        	.member	pat,384,142,8,32
   888                        	.eos
   889                        	.stag	fake83_,2224,83
   890                        	.member	fsize,0,18,8,32
   891                        	.member	fdate,32,5,8,16
   892                        	.member	ftime,48,5,8,16
   893                        	.member	fattrib,64,14,8,8
   894                        	.member	altname,72,110,8,0,13
   895                        	.member	fname,176,110,8,0,256
   896                        	.eos
   897                        	.stag	fake84_,80,84
   898                        	.member	fmt,0,14,8,8
   899                        	.member	n_fat,8,14,8,8
   900                        	.member	align,16,16,8,16
   901                        	.member	n_root,32,16,8,16
   902                        	.member	au_size,48,18,8,32
   903                        	.eos
   904                        	.line	429
   905                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",26
   906                        	.line	30
   907                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\DRIVER_B2SDCard.h",5
   908                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",0
   909                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   910                        	.line	1010
   911                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",5
   912                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   913                        	.line	429
   914                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",6
   915                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\diskio.h",0
   916                        	.line	85
   917                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",7
   918                        	.stag	_fx_sd_direntry,256,85
   919                        	.member	filename,0,110,8,0,11
   920                        	.member	type,88,14,8,8
   921                        	.member	attrs,96,110,8,0,20
   922                        	.eos
   923                        	.stag	_fx_info,416,86
   924                        	.member	stgName,0,110,8,0,32
   925                        	.member	Reserved1,256,14,8,8
   926                        	.member	stgType,264,16,8,16
   927                        	.member	Reserved2,280,14,8,8
   928                        	.member	stgReserved,288,110,8,0,16
   929                        	.eos
   930                        	.stag	_fx_fileinfo,136,87
   931                        	.member	type,0,14,8,8
   932                        	.member	pFilename,8,142,8,32
   933                        	.member	lSize,40,18,8,32
   934                        	.member	lcreateDate,72,18,8,32
   935                        	.member	lchangeDate,104,18,8,32
  Sat Jul 10 2021  1:15                                                Page 19


   936                        	.eos
   937                        	.stag	_FX_FAT_DIR_INFO,256,88
   938                        	.member	DIR_Name,0,110,8,0,11
   939                        	.member	DIR_Attr,88,14,8,8
   940                        	.member	DIR_NTRes,96,14,8,8
   941                        	.member	DIR_CrtTimeTenth,104,14,8,8
   942                        	.member	DIR_CrtTime,112,16,8,16
   943                        	.member	DIR_CrtDate,128,16,8,16
   944                        	.member	DIR_LstAccDate,144,16,8,16
   945                        	.member	DIR_FstClusHI,160,16,8,16
   946                        	.member	DIR_WrtTime,176,16,8,16
   947                        	.member	DIR_WrtDate,192,16,8,16
   948                        	.member	DIR_FstClusLO,208,16,8,16
   949                        	.member	DIR_FileSize,224,18,8,32
   950                        	.eos
   951                        	.stag	fat_extBS_32,416,89
   952                        	.member	table_size_32,0,18,8,32
   953                        	.member	extended_flags,32,16,8,16
   954                        	.member	fat_version,48,16,8,16
   955                        	.member	root_cluster,64,18,8,32
   956                        	.member	fat_info,96,16,8,16
   957                        	.member	backup_BS_sector,112,16,8,16
   958                        	.member	reserved_0,128,110,8,0,12
   959                        	.member	drive_number,224,14,8,8
   960                        	.member	reserved_1,232,14,8,8
   961                        	.member	boot_signature,240,14,8,8
   962                        	.member	volume_id,248,16,8,16
   963                        	.member	volume_label,264,110,8,0,11
   964                        	.member	fat_type_label,352,110,8,0,8
   965                        	.eos
   966                        	.stag	fat_extBS_16,192,90
   967                        	.member	bios_drive_num,0,14,8,8
   968                        	.member	reserved1,8,14,8,8
   969                        	.member	boot_signature,16,14,8,8
   970                        	.member	volume_id,24,16,8,16
   971                        	.member	volume_label,40,110,8,0,11
   972                        	.member	fat_type_label,128,110,8,0,8
   973                        	.eos
   974                        	.stag	fat_BS,688,91
   975                        	.member	bootjmp,0,110,8,0,3
   976                        	.member	oem_name,24,110,8,0,8
   977                        	.member	bytes_per_sector,88,16,8,16
   978                        	.member	sectors_per_cluster,104,14,8,8
   979                        	.member	reserved_sector_count,112,16,8,16
   980                        	.member	table_count,128,14,8,8
   981                        	.member	root_entry_count,136,16,8,16
   982                        	.member	total_sectors_16,152,16,8,16
   983                        	.member	media_type,168,14,8,8
   984                        	.member	table_size_16,176,16,8,16
   985                        	.member	sectors_per_track,192,16,8,16
   986                        	.member	head_side_count,208,16,8,16
   987                        	.member	hidden_sector_count,224,16,8,16
   988                        	.member	total_sectors_32,240,16,8,16
   989                        	.member	extended_section,256,110,8,0,54
   990                        	.eos
   991                        	.stag	__FATBootSector,928,92
   992                        	.member	bootjmp,0,110,8,0,3
   993                        	.member	oem_name,24,110,8,0,8
  Sat Jul 10 2021  1:15                                                Page 20


   994                        	.member	bytes_per_sector,88,16,8,16
   995                        	.member	sectors_per_cluster,104,14,8,8
   996                        	.member	reserved_sector_count,112,16,8,16
   997                        	.member	fat_table_count,128,14,8,8
   998                        	.member	root_entry_count,136,16,8,16
   999                        	.member	total_sectors_16,152,16,8,16
  1000                        	.member	media_type,168,14,8,8
  1001                        	.member	sectors_per_fat,176,16,8,16
  1002                        	.member	sectors_per_track,192,16,8,16
  1003                        	.member	head_side_count,208,16,8,16
  1004                        	.member	hidden_sector_count,224,18,8,32
  1005                        	.member	total_sectors_32,256,18,8,32
  1006                        	.member	drive_number,288,14,8,8
  1007                        	.member	reserved1,296,14,8,8
  1008                        	.member	boot_sig,304,14,8,8
  1009                        	.member	vol_id,312,18,8,32
  1010                        	.member	vol_name,344,110,8,0,11
  1011                        	.member	file_system_type,432,110,8,0,8
  1012                        	.member	extended_section,496,110,8,0,54
  1013                        	.eos
  1014                        	.stag	__PARTITIONTABLE,128,93
  1015                        	.member	first_byte,0,14,8,8
  1016                        	.member	start_chs,8,110,8,0,3
  1017                        	.member	partition_type,32,14,8,8
  1018                        	.member	end_chs,40,110,8,0,3
  1019                        	.member	start_sector,64,18,8,32
  1020                        	.member	length_sectors,96,18,8,32
  1021                        	.eos
  1022                        	.stag	fake94_,4096,94
  1023                        	.member	jmp,0,110,8,0,3
  1024                        	.member	oem,24,110,8,0,8
  1025                        	.member	sector_size,88,15,8,16
  1026                        	.member	sectors_per_cluster,104,14,8,8
  1027                        	.member	reserved_sectors,112,15,8,16
  1028                        	.member	number_ok_dos_fats,128,14,8,8
  1029                        	.member	root_dir_entries,136,15,8,16
  1030                        	.member	total_sectors_short,152,15,8,16
  1031                        	.member	media_descriptor,168,14,8,8
  1032                        	.member	fat_size_sectors,176,15,8,16
  1033                        	.member	sectors_per_track,192,15,8,16
  1034                        	.member	number_ok_dos_heads,208,15,8,16
  1035                        	.member	hidden_sectors,224,18,8,32
  1036                        	.member	total_sectors_long,256,18,8,32
  1037                        	.member	drive_number,288,14,8,8
  1038                        	.member	current_head,296,14,8,8
  1039                        	.member	boot_signature,304,14,8,8
  1040                        	.member	volume_id,312,18,8,32
  1041                        	.member	volume_label,344,110,8,0,11
  1042                        	.member	fs_type,432,110,8,0,8
  1043                        	.member	boot_code,496,110,8,0,448
  1044                        	.member	boot_sector_signature,4080,15,8,16
  1045                        	.eos
  1046                        	.stag	__FAT16ENTRY,256,95
  1047                        	.member	filename,0,110,8,0,8
  1048                        	.member	ext,64,110,8,0,3
  1049                        	.member	attributes,88,14,8,8
  1050                        	.member	reserved,96,110,8,0,10
  1051                        	.member	modify_time,176,16,8,16
  Sat Jul 10 2021  1:15                                                Page 21


  1052                        	.member	modify_date,192,16,8,16
  1053                        	.member	starting_cluster,208,16,8,16
  1054                        	.member	file_size,224,18,8,32
  1055                        	.eos
  1056                        	.stag	__FAT16ENTRYLONG,288,96
  1057                        	.member	filename,0,110,8,0,8
  1058                        	.member	ext,64,110,8,0,3
  1059                        	.member	attributes,88,14,8,8
  1060                        	.member	reserved,96,110,8,0,10
  1061                        	.member	modify_time,176,16,8,16
  1062                        	.member	modify_date,192,16,8,16
  1063                        	.member	starting_cluster,208,16,8,16
  1064                        	.member	file_size,224,18,8,32
  1065                        	.member	plongfileName,256,142,8,32
  1066                        	.eos
  1067                        	.stag	_LongFileName,256,97
  1068                        	.member	sequenceNo,0,14,8,8
  1069                        	.member	fileName_Part1,8,110,8,0,10
  1070                        	.member	fileattribute,88,14,8,8
  1071                        	.member	type,96,14,8,8
  1072                        	.member	checksum,104,14,8,8
  1073                        	.member	fileName_Part2,112,110,8,0,12
  1074                        	.member	fstclusLO,208,5,8,16
  1075                        	.member	fileName_Part3,224,110,8,0,4
  1076                        	.eos
  1077                        	.stag	_IDSECTOR,2048,98
  1078                        	.member	wGenConfig,0,16,8,16
  1079                        	.member	wNumCyls,16,16,8,16
  1080                        	.member	wReserved,32,16,8,16
  1081                        	.member	wNumHeads,48,16,8,16
  1082                        	.member	wBytesPerTrack,64,16,8,16
  1083                        	.member	wBytesPerSector,80,16,8,16
  1084                        	.member	wSectorsPerTrack,96,16,8,16
  1085                        	.member	wVendorUnique,112,112,8,0,3
  1086                        	.member	sSerialNumber,160,110,8,0,20
  1087                        	.member	wBufferType,320,16,8,16
  1088                        	.member	wBufferSize,336,16,8,16
  1089                        	.member	wECCSize,352,16,8,16
  1090                        	.member	sFirmwareRev,368,110,8,0,8
  1091                        	.member	sModelNumber,432,110,8,0,40
  1092                        	.member	wMoreVendorUnique,752,16,8,16
  1093                        	.member	wDoubleWordIO,768,16,8,16
  1094                        	.member	wCapabilities,784,16,8,16
  1095                        	.member	wReserved1,800,16,8,16
  1096                        	.member	wPIOTiming,816,16,8,16
  1097                        	.member	wDMATiming,832,16,8,16
  1098                        	.member	wBS,848,16,8,16
  1099                        	.member	wNumCurrentCyls,864,16,8,16
  1100                        	.member	wNumCurrentHeads,880,16,8,16
  1101                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
  1102                        	.member	ulCurrentSectorCapacity,912,18,8,32
  1103                        	.member	wMultSectorStuff,944,16,8,16
  1104                        	.member	ulTotalAddressableSectors,960,18,8,32
  1105                        	.member	wSingleWordDMA,992,16,8,16
  1106                        	.member	wMultiWordDMA,1008,16,8,16
  1107                        	.member	bReserved,1024,110,8,0,128
  1108                        	.eos
  1109                        	.stag	fake99_,16,99
  Sat Jul 10 2021  1:15                                                Page 22


  1110                        	.member	Reserved1,0,16,17,1
  1111                        	.member	Retired3,1,16,17,1
  1112                        	.member	ResponseIncomplete,2,16,17,1
  1113                        	.member	Retired2,3,16,17,3
  1114                        	.member	FixedDevice,6,16,17,1
  1115                        	.member	RemovableMedia,7,16,17,1
  1116                        	.member	Retired1,8,16,17,7
  1117                        	.member	DeviceType,15,16,17,1
  1118                        	.eos
  1119                        	.stag	fake100_,16,100
  1120                        	.member	FeatureSupported,0,16,17,1
  1121                        	.member	Reserved,1,16,17,15
  1122                        	.eos
  1123                        	.stag	fake101_,32,101
  1124                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
  1125                        	.member	ReservedByte49,2,14,17,6
  1126                        	.member	DmaSupported,8,14,17,1
  1127                        	.member	LbaSupported,9,14,17,1
  1128                        	.member	IordyDisable,10,14,17,1
  1129                        	.member	IordySupported,11,14,17,1
  1130                        	.member	Reserved1,12,14,17,1
  1131                        	.member	StandybyTimerSupport,13,14,17,1
  1132                        	.member	Reserved2,14,14,17,2
  1133                        	.member	ReservedWord50,16,16,8,16
  1134                        	.eos
  1135                        	.stag	fake102_,16,102
  1136                        	.member	ZonedCapabilities,0,16,17,2
  1137                        	.member	NonVolatileWriteCache,2,16,17,1
  1138                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
  1139                        	.member	DeviceEncryptsAllUserData,4,16,17,1
  1140                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
  1141                        	.member	Optional28BitCommandsSupported,6,16,17,1
  1142                        	.member	IEEE1667,7,16,17,1
  1143                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
  1144                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
  1145                        	.member	WriteBufferDmaSupported,10,16,17,1
  1146                        	.member	ReadBufferDmaSupported,11,16,17,1
  1147                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
  1148                        	.member	LPSAERCSupported,13,16,17,1
  1149                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
  1150                        	.member	CFastSpecSupported,15,16,17,1
  1151                        	.eos
  1152                        	.stag	fake103_,32,103
  1153                        	.member	Reserved0,0,16,17,1
  1154                        	.member	SataGen1,1,16,17,1
  1155                        	.member	SataGen2,2,16,17,1
  1156                        	.member	SataGen3,3,16,17,1
  1157                        	.member	Reserved1,4,16,17,4
  1158                        	.member	NCQ,8,16,17,1
  1159                        	.member	HIPM,9,16,17,1
  1160                        	.member	PhyEvents,10,16,17,1
  1161                        	.member	NcqUnload,11,16,17,1
  1162                        	.member	NcqPriority,12,16,17,1
  Sat Jul 10 2021  1:15                                                Page 23


  1163                        	.member	HostAutoPS,13,16,17,1
  1164                        	.member	DeviceAutoPS,14,16,17,1
  1165                        	.member	ReadLogDMA,15,16,17,1
  1166                        	.member	Reserved2,16,16,17,1
  1167                        	.member	CurrentSpeed,17,16,17,3
  1168                        	.member	NcqStreaming,20,16,17,1
  1169                        	.member	NcqQueueMgmt,21,16,17,1
  1170                        	.member	NcqReceiveSend,22,16,17,1
  1171                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
  1172                        	.member	Reserved3,24,16,17,8
  1173                        	.eos
  1174                        	.stag	fake104_,16,104
  1175                        	.member	Reserved0,0,16,17,1
  1176                        	.member	NonZeroOffsets,1,16,17,1
  1177                        	.member	DmaSetupAutoActivate,2,16,17,1
  1178                        	.member	DIPM,3,16,17,1
  1179                        	.member	InOrderData,4,16,17,1
  1180                        	.member	HardwareFeatureControl,5,16,17,1
  1181                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1182                        	.member	NCQAutosense,7,16,17,1
  1183                        	.member	DEVSLP,8,16,17,1
  1184                        	.member	HybridInformation,9,16,17,1
  1185                        	.member	Reserved1,10,16,17,6
  1186                        	.eos
  1187                        	.stag	fake105_,16,105
  1188                        	.member	Reserved0,0,16,17,1
  1189                        	.member	NonZeroOffsets,1,16,17,1
  1190                        	.member	DmaSetupAutoActivate,2,16,17,1
  1191                        	.member	DIPM,3,16,17,1
  1192                        	.member	InOrderData,4,16,17,1
  1193                        	.member	HardwareFeatureControl,5,16,17,1
  1194                        	.member	SoftwareSettingsPreservation,6,16,17,1
  1195                        	.member	DeviceAutoPS,7,16,17,1
  1196                        	.member	DEVSLP,8,16,17,1
  1197                        	.member	HybridInformation,9,16,17,1
  1198                        	.member	Reserved1,10,16,17,6
  1199                        	.eos
  1200                        	.stag	fake106_,48,106
  1201                        	.member	SmartCommands,0,16,17,1
  1202                        	.member	SecurityMode,1,16,17,1
  1203                        	.member	RemovableMediaFeature,2,16,17,1
  1204                        	.member	PowerManagement,3,16,17,1
  1205                        	.member	Reserved1,4,16,17,1
  1206                        	.member	WriteCache,5,16,17,1
  1207                        	.member	LookAhead,6,16,17,1
  1208                        	.member	ReleaseInterrupt,7,16,17,1
  1209                        	.member	ServiceInterrupt,8,16,17,1
  1210                        	.member	DeviceReset,9,16,17,1
  1211                        	.member	HostProtectedArea,10,16,17,1
  1212                        	.member	Obsolete1,11,16,17,1
  1213                        	.member	WriteBuffer,12,16,17,1
  1214                        	.member	ReadBuffer,13,16,17,1
  1215                        	.member	Nop,14,16,17,1
  1216                        	.member	Obsolete2,15,16,17,1
  1217                        	.member	DownloadMicrocode,16,16,17,1
  1218                        	.member	DmaQueued,17,16,17,1
  1219                        	.member	Cfa,18,16,17,1
  1220                        	.member	AdvancedPm,19,16,17,1
  Sat Jul 10 2021  1:15                                                Page 24


  1221                        	.member	Msn,20,16,17,1
  1222                        	.member	PowerUpInStandby,21,16,17,1
  1223                        	.member	ManualPowerUp,22,16,17,1
  1224                        	.member	Reserved2,23,16,17,1
  1225                        	.member	SetMax,24,16,17,1
  1226                        	.member	Acoustics,25,16,17,1
  1227                        	.member	BigLba,26,16,17,1
  1228                        	.member	DeviceConfigOverlay,27,16,17,1
  1229                        	.member	FlushCache,28,16,17,1
  1230                        	.member	FlushCacheExt,29,16,17,1
  1231                        	.member	WordValid83,30,16,17,2
  1232                        	.member	SmartErrorLog,32,16,17,1
  1233                        	.member	SmartSelfTest,33,16,17,1
  1234                        	.member	MediaSerialNumber,34,16,17,1
  1235                        	.member	MediaCardPassThrough,35,16,17,1
  1236                        	.member	StreamingFeature,36,16,17,1
  1237                        	.member	GpLogging,37,16,17,1
  1238                        	.member	WriteFua,38,16,17,1
  1239                        	.member	WriteQueuedFua,39,16,17,1
  1240                        	.member	WWN64Bit,40,16,17,1
  1241                        	.member	URGReadStream,41,16,17,1
  1242                        	.member	URGWriteStream,42,16,17,1
  1243                        	.member	ReservedForTechReport,43,16,17,2
  1244                        	.member	IdleWithUnloadFeature,45,16,17,1
  1245                        	.member	WordValid,46,16,17,2
  1246                        	.eos
  1247                        	.stag	fake107_,48,107
  1248                        	.member	SmartCommands,0,16,17,1
  1249                        	.member	SecurityMode,1,16,17,1
  1250                        	.member	RemovableMediaFeature,2,16,17,1
  1251                        	.member	PowerManagement,3,16,17,1
  1252                        	.member	Reserved1,4,16,17,1
  1253                        	.member	WriteCache,5,16,17,1
  1254                        	.member	LookAhead,6,16,17,1
  1255                        	.member	ReleaseInterrupt,7,16,17,1
  1256                        	.member	ServiceInterrupt,8,16,17,1
  1257                        	.member	DeviceReset,9,16,17,1
  1258                        	.member	HostProtectedArea,10,16,17,1
  1259                        	.member	Obsolete1,11,16,17,1
  1260                        	.member	WriteBuffer,12,16,17,1
  1261                        	.member	ReadBuffer,13,16,17,1
  1262                        	.member	Nop,14,16,17,1
  1263                        	.member	Obsolete2,15,16,17,1
  1264                        	.member	DownloadMicrocode,16,16,17,1
  1265                        	.member	DmaQueued,17,16,17,1
  1266                        	.member	Cfa,18,16,17,1
  1267                        	.member	AdvancedPm,19,16,17,1
  1268                        	.member	Msn,20,16,17,1
  1269                        	.member	PowerUpInStandby,21,16,17,1
  1270                        	.member	ManualPowerUp,22,16,17,1
  1271                        	.member	Reserved2,23,16,17,1
  1272                        	.member	SetMax,24,16,17,1
  1273                        	.member	Acoustics,25,16,17,1
  1274                        	.member	BigLba,26,16,17,1
  1275                        	.member	DeviceConfigOverlay,27,16,17,1
  1276                        	.member	FlushCache,28,16,17,1
  1277                        	.member	FlushCacheExt,29,16,17,1
  1278                        	.member	Resrved3,30,16,17,1
  Sat Jul 10 2021  1:15                                                Page 25


  1279                        	.member	Words119_120Valid,31,16,17,1
  1280                        	.member	SmartErrorLog,32,16,17,1
  1281                        	.member	SmartSelfTest,33,16,17,1
  1282                        	.member	MediaSerialNumber,34,16,17,1
  1283                        	.member	MediaCardPassThrough,35,16,17,1
  1284                        	.member	StreamingFeature,36,16,17,1
  1285                        	.member	GpLogging,37,16,17,1
  1286                        	.member	WriteFua,38,16,17,1
  1287                        	.member	WriteQueuedFua,39,16,17,1
  1288                        	.member	WWN64Bit,40,16,17,1
  1289                        	.member	URGReadStream,41,16,17,1
  1290                        	.member	URGWriteStream,42,16,17,1
  1291                        	.member	ReservedForTechReport,43,16,17,2
  1292                        	.member	IdleWithUnloadFeature,45,16,17,1
  1293                        	.member	Reserved4,46,16,17,2
  1294                        	.eos
  1295                        	.stag	fake108_,16,108
  1296                        	.member	TimeRequired,0,16,17,15
  1297                        	.member	ExtendedTimeReported,15,16,17,1
  1298                        	.eos
  1299                        	.stag	fake109_,16,109
  1300                        	.member	TimeRequired,0,16,17,15
  1301                        	.member	ExtendedTimeReported,15,16,17,1
  1302                        	.eos
  1303                        	.stag	fake110_,16,110
  1304                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1305                        	.member	Reserved0,4,16,17,8
  1306                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1307                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1308                        	.member	Reserved1,14,16,17,2
  1309                        	.eos
  1310                        	.stag	fake111_,16,111
  1311                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1312                        	.member	WriteReadVerify,1,16,17,1
  1313                        	.member	WriteUncorrectableExt,2,16,17,1
  1314                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1315                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1316                        	.member	FreefallControl,5,16,17,1
  1317                        	.member	SenseDataReporting,6,16,17,1
  1318                        	.member	ExtendedPowerConditions,7,16,17,1
  1319                        	.member	Reserved0,8,16,17,6
  1320                        	.member	WordValid,14,16,17,2
  1321                        	.eos
  1322                        	.stag	fake112_,16,112
  1323                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1324                        	.member	WriteReadVerify,1,16,17,1
  1325                        	.member	WriteUncorrectableExt,2,16,17,1
  1326                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1327                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1328                        	.member	FreefallControl,5,16,17,1
  1329                        	.member	SenseDataReporting,6,16,17,1
  1330                        	.member	ExtendedPowerConditions,7,16,17,1
  1331                        	.member	Reserved0,8,16,17,6
  1332                        	.member	Reserved1,14,16,17,2
  1333                        	.eos
  Sat Jul 10 2021  1:15                                                Page 26


  1334                        	.stag	fake113_,16,113
  1335                        	.member	SecuritySupported,0,16,17,1
  1336                        	.member	SecurityEnabled,1,16,17,1
  1337                        	.member	SecurityLocked,2,16,17,1
  1338                        	.member	SecurityFrozen,3,16,17,1
  1339                        	.member	SecurityCountExpired,4,16,17,1
  1340                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1341                        	.member	Reserved0,6,16,17,2
  1342                        	.member	SecurityLevel,8,16,17,1
  1343                        	.member	Reserved1,9,16,17,7
  1344                        	.eos
  1345                        	.stag	fake114_,16,114
  1346                        	.member	MaximumCurrentInMA,0,16,17,12
  1347                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1348                        	.member	CfaPowerMode1Required,13,16,17,1
  1349                        	.member	Reserved0,14,16,17,1
  1350                        	.member	Word160Supported,15,16,17,1
  1351                        	.eos
  1352                        	.stag	fake115_,16,115
  1353                        	.member	SupportsTrim,0,16,17,1
  1354                        	.member	Reserved0,1,16,17,15
  1355                        	.eos
  1356                        	.stag	fake116_,16,116
  1357                        	.member	Supported,0,16,17,1
  1358                        	.member	Reserved0,1,16,17,1
  1359                        	.member	WriteSameSuported,2,16,17,1
  1360                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1361                        	.member	FeatureControlSuported,4,16,17,1
  1362                        	.member	DataTablesSuported,5,16,17,1
  1363                        	.member	Reserved1,6,16,17,6
  1364                        	.member	VendorSpecific,12,16,17,4
  1365                        	.eos
  1366                        	.stag	fake117_,16,117
  1367                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1368                        	.member	Word209Supported,14,16,17,1
  1369                        	.member	Reserved0,15,16,17,1
  1370                        	.eos
  1371                        	.stag	fake118_,16,118
  1372                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1373                        	.member	Reserved0,1,16,17,3
  1374                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  1375                        	.member	Reserved1,5,16,17,3
  1376                        	.member	NVCachePowerModeVersion,8,16,17,4
  1377                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1378                        	.eos
  1379                        	.stag	fake119_,16,119
  1380                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1381                        	.member	Reserved,8,14,8,8
  1382                        	.eos
  1383                        	.stag	fake120_,16,120
  1384                        	.member	MajorVersion,0,16,17,12
  1385                        	.member	TransportType,12,16,17,4
  1386                        	.eos
  1387                        	.stag	_IDENTIFY_DEVICE_DATA,4096,121
  1388                        	.member	GeneralConfiguration,0,10,8,16,99
  1389                        	.member	NumCylinders,16,16,8,16
  Sat Jul 10 2021  1:15                                                Page 27


  1390                        	.member	SpecificConfiguration,32,16,8,16
  1391                        	.member	NumHeads,48,16,8,16
  1392                        	.member	Retired1Bytes,64,110,8,0,4
  1393                        	.member	NumSectorsPerTrack,96,16,8,16
  1394                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1395                        	.member	SerialNumber,160,110,8,0,20
  1396                        	.member	Retired2,320,112,8,0,2
  1397                        	.member	Obsolete1,352,16,8,16
  1398                        	.member	FirmwareRevision,368,110,8,0,8
  1399                        	.member	ModelNumber,432,110,8,0,40
  1400                        	.member	MaximumBlockTransfer,752,14,8,8
  1401                        	.member	VendorUnique2,760,14,8,8
  1402                        	.member	TrustedComputing,768,10,8,16,100
  1403                        	.member	Capabilities,784,10,8,32,101
  1404                        	.member	ObsoleteWords51,816,112,8,0,2
  1405                        	.member	TranslationFieldsValid,848,16,17,3
  1406                        	.member	Reserved3,851,16,17,5
  1407                        	.member	FreeFallControlSensitivity,856,16,17,8
  1408                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1409                        	.member	NumberOfCurrentHeads,880,16,8,16
  1410                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1411                        	.member	CurrentSectorCapacity,912,18,8,32
  1412                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1413                        	.member	MultiSectorSettingValid,952,14,17,1
  1414                        	.member	ReservedByte59,953,14,17,3
  1415                        	.member	SanitizeFeatureSupported,956,14,17,1
  1416                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1417                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1418                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1419                        	.member	UserAddressableSectors,960,18,8,32
  1420                        	.member	ObsoleteWord62,992,16,8,16
  1421                        	.member	MultiWordDMASupport,1008,16,17,8
  1422                        	.member	MultiWordDMAActive,1016,16,17,8
  1423                        	.member	AdvancedPIOModes,1024,16,17,8
  1424                        	.member	ReservedByte64,1032,16,17,8
  1425                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1426                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1427                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1428                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1429                        	.member	AdditionalSupported,1104,10,8,16,102
  1430                        	.member	ReservedWords70,1120,112,8,0,5
  1431                        	.member	QueueDepth,1200,16,17,5
  1432                        	.member	ReservedWord75,1205,16,17,11
  1433                        	.member	SerialAtaCapabilities,1216,10,8,32,103
  1434                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    104
  1435                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,10
                    5
  1436                        	.member	MajorRevision,1280,16,8,16
  1437                        	.member	MinorRevision,1296,16,8,16
  1438                        	.member	CommandSetSupport,1312,10,8,48,106
  1439                        	.member	CommandSetActive,1360,10,8,48,107
  1440                        	.member	UltraDMASupport,1408,16,17,8
  1441                        	.member	UltraDMAActive,1416,16,17,8
  1442                        	.member	NormalSecurityEraseUnit,1424,10,8,16,108
  1443                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,1
  Sat Jul 10 2021  1:15                                                Page 28


                    09
  1444                        	.member	CurrentAPMLevel,1456,16,17,8
  1445                        	.member	ReservedWord91,1464,16,17,8
  1446                        	.member	MasterPasswordID,1472,16,8,16
  1447                        	.member	HardwareResetResult,1488,16,8,16
  1448                        	.member	CurrentAcousticValue,1504,16,17,8
  1449                        	.member	RecommendedAcousticValue,1512,16,17,8
  1450                        	.member	StreamMinRequestSize,1520,16,8,16
  1451                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1452                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1453                        	.member	StreamingPerfGranularity,1568,18,8,32
  1454                        	.member	Max48BitLBA,1600,114,8,0,2
  1455                        	.member	StreamingTransferTime,1664,16,8,16
  1456                        	.member	DsmCap,1680,16,8,16
  1457                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,1
                    10
  1458                        	.member	InterSeekDelay,1712,16,8,16
  1459                        	.member	WorldWideName,1728,112,8,0,4
  1460                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1461                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1462                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1463                        	.member	CommandSetSupportExt,1904,10,8,16,111
  1464                        	.member	CommandSetActiveExt,1920,10,8,16,112
  1465                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1466                        	.member	MsnSupport,2032,16,17,2
  1467                        	.member	ReservedWord127,2034,16,17,14
  1468                        	.member	SecurityStatus,2048,10,8,16,113
  1469                        	.member	ReservedWord129,2064,112,8,0,31
  1470                        	.member	CfaPowerMode1,2560,10,8,16,114
  1471                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1472                        	.member	NominalFormFactor,2688,16,17,4
  1473                        	.member	ReservedWord168,2692,16,17,12
  1474                        	.member	DataSetManagementFeature,2704,10,8,16,11
                    5
  1475                        	.member	AdditionalProductID,2720,112,8,0,4
  1476                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1477                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1478                        	.member	SCTCommandTransport,3296,10,8,16,116
  1479                        	.member	ReservedWord207,3312,112,8,0,2
  1480                        	.member	BlockAlignment,3344,10,8,16,117
  1481                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1482                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1483                        	.member	NVCacheCapabilities,3424,10,8,16,118
  1484                        	.member	NVCacheSizeLSW,3440,16,8,16
  1485                        	.member	NVCacheSizeMSW,3456,16,8,16
  1486                        	.member	NominalMediaRotationRate,3472,16,8,16
  1487                        	.member	ReservedWord218,3488,16,8,16
  1488                        	.member	NVCacheOptions,3504,10,8,16,119
  1489                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1490                        	.member	ReservedWord220,3528,16,17,8
  1491                        	.member	ReservedWord221,3536,16,8,16
  Sat Jul 10 2021  1:15                                                Page 29


  1492                        	.member	TransportMajorVersion,3552,10,8,16,120
  1493                        	.member	TransportMinorVersion,3568,16,8,16
  1494                        	.member	ReservedWord224,3584,112,8,0,6
  1495                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1496                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1497                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1498                        	.member	ReservedWord236,3776,112,8,0,19
  1499                        	.member	Signature,4080,16,17,8
  1500                        	.member	CheckSum,4088,16,17,8
  1501                        	.eos
  1502                        	.stag	_FXDosDevice,5744,122
  1503                        	.member	type,0,14,8,8
  1504                        	.member	initialized,8,14,8,8
  1505                        	.member	devdata,16,129,8,32
  1506                        	.member	devstatus,48,14,8,8
  1507                        	.member	bootSector,56,10,8,928,92
  1508                        	.member	partitionTable,984,10,8,128,93
  1509                        	.member	fileAllocationTable,1112,110,8,0,512
  1510                        	.member	bsOffset,5208,18,8,32
  1511                        	.member	rootDirSectors,5240,18,8,32
  1512                        	.member	root_entry_count,5272,5,8,16
  1513                        	.member	rootEntriesPerPage,5288,5,8,16
  1514                        	.member	sectors_per_cluster,5304,5,8,16
  1515                        	.member	firstDataSector,5320,18,8,32
  1516                        	.member	fatTableOffset,5352,18,8,32
  1517                        	.member	volume_name,5384,110,8,0,12
  1518                        	.member	root_volume_name,5480,110,8,0,12
  1519                        	.member	errorCode,5576,14,8,8
  1520                        	.member	pfInit,5584,641,8,32
  1521                        	.member	pfReset,5616,641,8,32
  1522                        	.member	pfUninit,5648,641,8,32
  1523                        	.member	pfReader,5680,654,8,32
  1524                        	.member	pfWriter,5712,654,8,32
  1525                        	.eos
  1526                        	.utag	item,32,123
  1527                        	.member	dir,0,138,11,32,82
  1528                        	.member	file,0,138,11,32,81
  1529                        	.member	fileInfo,0,138,11,32,83
  1530                        	.eos
  1531                        	.stag	_dos_handle,80,124
  1532                        	.member	fs,0,138,8,32,79
  1533                        	.member	fr,32,5,8,16
  1534                        	.member	path,48,142,8,32
  1535                        	.eos
  1536                        	.line	800
  1537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\DRIVER_B2SDCard.h",6
  1538                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
  1539                        	.line	105
  1540                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\DRIVER_B2SDCard.h",7
  1541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\CH376INC.H",0
  1542                        	.stag	_FAT_DIR_INFO,256,125
  Sat Jul 10 2021  1:15                                                Page 30


  1543                        	.member	DIR_Name,0,110,8,0,11
  1544                        	.member	DIR_Attr,88,14,8,8
  1545                        	.member	DIR_NTRes,96,14,8,8
  1546                        	.member	DIR_CrtTimeTenth,104,14,8,8
  1547                        	.member	DIR_CrtTime,112,15,8,16
  1548                        	.member	DIR_CrtDate,128,15,8,16
  1549                        	.member	DIR_LstAccDate,144,15,8,16
  1550                        	.member	DIR_FstClusHI,160,15,8,16
  1551                        	.member	DIR_WrtTime,176,15,8,16
  1552                        	.member	DIR_WrtDate,192,15,8,16
  1553                        	.member	DIR_FstClusLO,208,15,8,16
  1554                        	.member	DIR_FileSize,224,18,8,32
  1555                        	.eos
  1556                        	.stag	_BULK_ONLY_CBW,248,126
  1557                        	.member	CBW_Sig,0,18,8,32
  1558                        	.member	CBW_Tag,32,18,8,32
  1559                        	.member	CBW_DataLen0,64,14,8,8
  1560                        	.member	CBW_DataLen1,72,14,8,8
  1561                        	.member	CBW_DataLen2,80,15,8,16
  1562                        	.member	CBW_Flag,96,14,8,8
  1563                        	.member	CBW_LUN,104,14,8,8
  1564                        	.member	CBW_CB_Len,112,14,8,8
  1565                        	.member	CBW_CB_Buf,120,110,8,0,16
  1566                        	.eos
  1567                        	.stag	_INQUIRY_DATA,288,127
  1568                        	.member	DeviceType,0,14,8,8
  1569                        	.member	RemovableMedia,8,14,8,8
  1570                        	.member	Versions,16,14,8,8
  1571                        	.member	DataFormatAndEtc,24,14,8,8
  1572                        	.member	AdditionalLength,32,14,8,8
  1573                        	.member	Reserved1,40,14,8,8
  1574                        	.member	Reserved2,48,14,8,8
  1575                        	.member	MiscFlag,56,14,8,8
  1576                        	.member	VendorIdStr,64,110,8,0,8
  1577                        	.member	ProductIdStr,128,110,8,0,16
  1578                        	.member	ProductRevStr,256,110,8,0,4
  1579                        	.eos
  1580                        	.stag	_SENSE_DATA,144,128
  1581                        	.member	ErrorCode,0,14,8,8
  1582                        	.member	SegmentNumber,8,14,8,8
  1583                        	.member	SenseKeyAndEtc,16,14,8,8
  1584                        	.member	Information0,24,14,8,8
  1585                        	.member	Information1,32,14,8,8
  1586                        	.member	Information2,40,14,8,8
  1587                        	.member	Information3,48,14,8,8
  1588                        	.member	AdditSenseLen,56,14,8,8
  1589                        	.member	CmdSpecInfo,64,110,8,0,4
  1590                        	.member	AdditSenseCode,96,14,8,8
  1591                        	.member	AddSenCodeQual,104,14,8,8
  1592                        	.member	FieldReplaUnit,112,14,8,8
  1593                        	.member	SenseKeySpec,120,110,8,0,3
  1594                        	.eos
  1595                        	.stag	fake129_,112,129
  1596                        	.member	mBuffer,0,110,8,0,14
  1597                        	.eos
  1598                        	.stag	fake130_,8,130
  1599                        	.member	mUpdateFileSz,0,14,8,8
  1600                        	.eos
  Sat Jul 10 2021  1:15                                                Page 31


  1601                        	.stag	fake131_,8,131
  1602                        	.member	mDirInfoIndex,0,14,8,8
  1603                        	.eos
  1604                        	.utag	fake132_,32,132
  1605                        	.member	mByteOffset,0,18,11,32
  1606                        	.member	mSectorLba,0,18,11,32
  1607                        	.eos
  1608                        	.stag	fake133_,16,133
  1609                        	.member	mByteCount,0,15,8,16
  1610                        	.eos
  1611                        	.stag	fake134_,16,134
  1612                        	.member	mByteCount,0,15,8,16
  1613                        	.eos
  1614                        	.utag	fake135_,32,135
  1615                        	.member	mSectorOffset,0,18,11,32
  1616                        	.member	mSectorLba,0,18,11,32
  1617                        	.eos
  1618                        	.stag	fake136_,64,136
  1619                        	.member	mSectorCount,0,14,8,8
  1620                        	.member	mReserved1,8,14,8,8
  1621                        	.member	mReserved2,16,14,8,8
  1622                        	.member	mReserved3,24,14,8,8
  1623                        	.member	mStartSector,32,18,8,32
  1624                        	.eos
  1625                        	.stag	fake137_,64,137
  1626                        	.member	mSectorCount,0,14,8,8
  1627                        	.member	mReserved1,8,14,8,8
  1628                        	.member	mReserved2,16,14,8,8
  1629                        	.member	mReserved3,24,14,8,8
  1630                        	.member	mStartSector,32,18,8,32
  1631                        	.eos
  1632                        	.stag	fake138_,32,138
  1633                        	.member	mDiskSizeSec,0,18,8,32
  1634                        	.eos
  1635                        	.stag	fake139_,72,139
  1636                        	.member	mTotalSector,0,18,8,32
  1637                        	.member	mFreeSector,32,18,8,32
  1638                        	.member	mDiskFat,64,14,8,8
  1639                        	.eos
  1640                        	.stag	fake140_,8,140
  1641                        	.member	mMaxLogicUnit,0,14,8,8
  1642                        	.eos
  1643                        	.stag	fake141_,32,141
  1644                        	.member	mDiskSizeSec,0,18,8,32
  1645                        	.eos
  1646                        	.stag	fake142_,40,142
  1647                        	.member	mStartSector,0,18,8,32
  1648                        	.member	mSectorCount,32,14,8,8
  1649                        	.eos
  1650                        	.stag	fake143_,40,143
  1651                        	.member	mStartSector,0,18,8,32
  1652                        	.member	mSectorCount,32,14,8,8
  1653                        	.eos
  1654                        	.utag	_CH376_CMD_DATA,288,144
  1655                        	.member	Default,0,10,11,112,129
  1656                        	.member	DiskMountInq,0,10,11,288,127
  1657                        	.member	OpenDirInfo,0,10,11,256,125
  1658                        	.member	EnumDirInfo,0,10,11,256,125
  Sat Jul 10 2021  1:15                                                Page 32


  1659                        	.member	FileCLose,0,10,11,8,130
  1660                        	.member	DirInfoRead,0,10,11,8,131
  1661                        	.member	ByteLocate,0,11,11,32,132
  1662                        	.member	ByteRead,0,10,11,16,133
  1663                        	.member	ByteWrite,0,10,11,16,134
  1664                        	.member	SectorLocate,0,11,11,32,135
  1665                        	.member	SectorRead,0,10,11,64,136
  1666                        	.member	SectorWrite,0,10,11,64,137
  1667                        	.member	DiskCapacity,0,10,11,32,138
  1668                        	.member	DiskQuery,0,10,11,72,139
  1669                        	.member	DiskBocCbw,0,10,11,248,126
  1670                        	.member	DiskMaxLun,0,10,11,8,140
  1671                        	.member	DiskInitInq,0,10,11,288,127
  1672                        	.member	DiskInqData,0,10,11,288,127
  1673                        	.member	ReqSenseData,0,10,11,144,128
  1674                        	.member	DiskSize,0,10,11,32,141
  1675                        	.member	DiskRead,0,10,11,40,142
  1676                        	.member	DiskWrite,0,10,11,40,143
  1677                        	.eos
  1678                        	.line	586
  1679                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\DRIVER_B2SDCard.h",8
  1680                        	.line	51
  1681                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers\DRIVER_B2SDCard.c",2
  1682                        ;
  1683                        ;#include "drivers\DRIVER_SLOT_11.h"
  1684                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers\DRIVER_SLOT_11.h",0
  1685                        DSLT11	section	offset $04:4150
  1686 04:4150:              	ends
  1687                        	data
  1688                        ~~_k_s11_driver_base:
  1689 00:0000: 50 41 04 00  	dl	$44150
  1690 00:0004:              	ends
  1691                        	.line	7
  1692                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers\DRIVER_B2SDCard.c",4
  1693                        ;//#pragma section CODE=B2SDCard,offset $08:A000
  1694                        ;
  1695                        ;#if defined(USE_FX256_FMX) || defined(USE_FX256_U
                    )
  1696                        ;
  1697                        ;FX_BLOCK_DEVICE_DRIVER DRIVER_B2SDCard = {
  1698                        	data
  1699                        	xdef	~~DRIVER_B2SDCard
  1700                        ~~DRIVER_B2SDCard:
  1701                        ;							
                    			"DRIVER_B2SDCard\0",
  1702 00:0004: 44 52 49 56  	db	$44,$52,$49,$56,$45,$52,$5F,$42,$32,$53
       00:0008: 45 52 5F 42 
       00:000C: 32 53 
  1703 00:000E: 44 43 61 72  	db	$44,$43,$61,$72,$64,$0,$0
       00:0012: 64 00 00 
  1704 00:0015:              	ds	15
  1705                        ;							
                    			"v1.0.0\0",
  1706 00:0024: 76 31 2E 30  	db	$76,$31,$2E,$30,$2E,$30,$0,$0
  Sat Jul 10 2021  1:15                                                Page 33


       00:0028: 2E 30 00 00 
  1707 00:002C:              	ds	8
  1708                        ;							
                    			"B\0",
  1709 00:0034: 42 00 00     	db	$42,$0,$0
  1710 00:0037:              	ds	5
  1711                        ;							
                    			"2\0",
  1712 00:003C: 32 00 00     	db	$32,$0,$0
  1713 00:003F:              	ds	5
  1714                        ;							
                    			DRIVER_TYPE_SDCARD,
  1715 00:0044: 06           	db	$6
  1716                        ;							
                    			"SD:",
  1717 00:0045: 53 44 3A 00  	db	$53,$44,$3A,$0
  1718 00:0049:              	ds	2
  1719                        ;							
                    			NULL,
  1720 00:004B: 00 00        	dw	$0
  1721                        ;							
                    			NULL,
  1722 00:004D: 00 00 00 00  	dl	$0
  1723                        ;							
                    			NULL,
  1724 00:0051: 00 00 00 00  	dl	$0
  1725                        ;							
                    			NULL
  1726                        ;							
                    	   };
  1727 00:0055: 00 00 00 00  	dl	$0
  1728 00:0059:              	ds	16
  1729 00:0069:              	ends
  1730                        ;
  1731                        ;
  1732                        ;static PFX_DEVICE_DRIVER f_get_driver(LPCSTR majo
                    r,LPCSTR minor)
  1733                        ;{
  1734                        	.line	23
  1735                        	.line	24
  1736                        	DSLT11
  1737                        	func
  1738                        	.function	24
  1739                        ~~f_get_driver:
  1740                        	longa	on
  1741                        	longi	on
  1742 04:4150: 3B           	tsc
  1743 04:4151: 38           	sec
  1744 04:4152: E9 04 00     	sbc	#L2
  1745 04:4155: 1B           	tcs
  1746 04:4156: 0B           	phd
  1747 04:4157: 5B           	tcd
  1748             00000004   major_0	set	4
  1749             00000008   minor_0	set	8
  1750                        	.block	24
  1751                        ;	return &DRIVER_B2SDCard;
  1752                        	.sym	major,4,142,6,32
  1753                        	.sym	minor,8,142,6,32
  Sat Jul 10 2021  1:15                                                Page 34


  1754                        	.line	25
  1755 04:4158: A9 xx xx     	lda	#<~~DRIVER_B2SDCard
  1756 04:415B: 85 01        	sta	<R0
  1757                        	xref	_BEG_DATA
  1758 04:415D: A9 xx xx     	lda	#_BEG_DATA>>16
  1759 04:4160: 85 03        	sta	<R0+2
  1760 04:4162: A6 03        	ldx	<R0+2
  1761 04:4164: A5 01        	lda	<R0
  1762                        L5:
  1763 04:4166: A8           	tay
  1764 04:4167: A5 06        	lda	<L2+2
  1765 04:4169: 85 0E        	sta	<L2+2+8
  1766 04:416B: A5 05        	lda	<L2+1
  1767 04:416D: 85 0D        	sta	<L2+1+8
  1768 04:416F: 2B           	pld
  1769 04:4170: 3B           	tsc
  1770 04:4171: 18           	clc
  1771 04:4172: 69 0C 00     	adc	#L2+8
  1772 04:4175: 1B           	tcs
  1773 04:4176: 98           	tya
  1774 04:4177: 6B           	rtl
  1775                        ;}
  1776                        	.line	26
  1777                        	.endblock	26
  1778             00000004   L2	equ	4
  1779             00000005   L3	equ	5
  1780 04:4178:              	ends
  1781                        	efunc
  1782                        	.endfunc	26,5,4
  1783                        	.line	26
  1784                        ;
  1785                        ;#else
  1786                        ;
  1787                        ;FX_BLOCK_DEVICE_DRIVER DRIVER_B2SDCard = {
  1788                        ;							
                    			"DRIVER_B2SDCard\0",
  1789                        ;							
                    			"v1.0.0\0",
  1790                        ;							
                    			"B\0",
  1791                        ;							
                    			"2\0",
  1792                        ;							
                    			DRIVER_TYPE_SDCARD,
  1793                        ;							
                    			"SD:",
  1794                        ;							
                    			NULL
  1795                        ;							
                    			k_sd_initialize,
  1796                        ;							
                    			NULL,
  1797                        ;							
                    			NULL,
  1798                        ;							
                    			NULL
  1799                        ;							
                    	   };
  Sat Jul 10 2021  1:15                                                Page 35


  1800                        ;
  1801                        ;
  1802                        ;static PFX_DEVICE_DRIVER f_get_driver(LPCSTR majo
                    r,LPCSTR minor)
  1803                        ;{
  1804                        ;	return &DRIVER_B2SDCard;
  1805                        ;}
  1806                        ;
  1807                        ;
  1808                        ;BOOL k_pc_initialize(void)
  1809                        ;{
  1810                        ;	return FALSE;
  1811                        ;}
  1812                        ;
  1813                        ;
  1814                        ;BOOL k_sd_initialize(void)
  1815                        ;{
  1816                        ;	BOOL retCode = FALSE;
  1817                        ;	UCHAR data = 0;
  1818                        ;	UCHAR status = 0;
  1819                        ;	int abort = 0;
  1820                        ;	//k_sd_init();
  1821                        ;	//k_sd_ismounted();
  1822                        ;	k_debug_string("k_sd_initialize::reset...\r\n");
  1823                        ;
  1824                        ;	k_sd_mount();
  1825                        ;
  1826                        ;	SDCARD_PRSNT_MNT[0] = 0x00;
  1827                        ;
  1828                        ;	SDCARD_CMD[0] = 0x05;
  1829                        ;
  1830                        ;	for (abort = 0; abort < 35; abort++)
  1831                        ;		k_sd_cmd_delay();
  1832                        ;
  1833                        ;	k_debug_string("k_sd_initialize::init s1...\r\n"
                    );
  1834                        ;
  1835                        ;	SDCARD_CMD[0] = 0x06;
  1836                        ;	k_sd_cmd_delay();
  1837                        ;	SDCARD_DATA[0] = 0xA8;
  1838                        ;
  1839                        ;
  1840                        ;	k_debug_string("k_sd_initialize::init s1a...\r\n
                    ");
  1841                        ;
  1842                        ;	k_sd_dta_delay();
  1843                        ;	k_sd_dta_delay();
  1844                        ;	k_sd_dta_delay();
  1845                        ;
  1846                        ;	k_debug_string("k_sd_initialize::init s1b...\r\n
                    ");
  1847                        ;
  1848                        ;	data = SDCARD_DATA[0];
  1849                        ;
  1850                        ;	k_debug_string("k_sd_initialize::init s1c...\r\n
                    ");
  1851                        ;
  1852                        ;	k_sd_cmd_delay();
  Sat Jul 10 2021  1:15                                                Page 36


  1853                        ;
  1854                        ;	k_debug_string("k_sd_initialize::init s2...\r\n"
                    );
  1855                        ;
  1856                        ;	SDCARD_CMD[0] = CH_CMD_SET_MODE;
  1857                        ;	k_sd_cmd_delay();
  1858                        ;	k_sd_cmd_delay();
  1859                        ;	k_sd_cmd_delay();
  1860                        ;
  1861                        ;
  1862                        ;
  1863                        ;	SDCARD_DATA[0] = 0x03; // Mode 3 - SDCARD
  1864                        ;
  1865                        ;	k_debug_string("k_sd_initialize::read..\r\n");
  1866                        ;
  1867                        ;	retCode = TRUE;
  1868                        ;	data = 0;
  1869                        ;	while (data != 0x51)
  1870                        ;	{
  1871                        ;		abort++;
  1872                        ;		if (abort > 100)
  1873                        ;		{
  1874                        ;			retCode = FALSE;
  1875                        ;			break;
  1876                        ;		}
  1877                        ;		k_sd_dta_delay();
  1878                        ;
  1879                        ;		data = SDCARD_DATA[0];
  1880                        ;		k_debug_integer("k_sd_initialize::SDCARD
                    _DATA:", data);
  1881                        ;	}
  1882                        ;
  1883                        ;
  1884                        ;	abort = k_read_disk_sector(sectorBuffer, 1, 1);
  1885                        ;	//SDCARD_CMD[0] = 0x01;
  1886                        ;	//k_sd_cmd_delay();
  1887                        ;	//k_debug_integer("k_sd_initialize::version:",SD
                    CARD_DATA[0]);
  1888                        ;
  1889                        ;	//SDCARD_CMD[0] = CH_CMD_GET_STATUS;
  1890                        ;	//status = k_sd_waitforirq();
  1891                        ;	//k_debug_integer("k_sd_initialize::CH_CMD_GET_S
                    TATUS:",status);
  1892                        ;
  1893                        ;	k_debug_string("k_sd_initialize::exit...\r\n");
  1894                        ;
  1895                        ;	return retCode;
  1896                        ;}
  1897                        ;
  1898                        ;UINT8 k_sd_reset(VOID)
  1899                        ;{
  1900                        ;	UINT8	s;
  1901                        ;
  1902                        ;	k_debug_string("***k_sd_reset 1\r\n");
  1903                        ;
  1904                        ;	xWriteCH376Cmd( CMD_RESET_ALL );
  1905                        ;	s = xReadCH376Data( );
  1906                        ;	xEndCH376Cmd( );
  Sat Jul 10 2021  1:15                                                Page 37


  1907                        ;
  1908                        ;	k_debug_string("***k_sd_reset 2\r\n");
  1909                        ;
  1910                        ;	k_sd_cmd_delay();
  1911                        ;	k_sd_cmd_delay();
  1912                        ;	k_sd_cmd_delay();
  1913                        ;	k_sd_cmd_delay();
  1914                        ;	k_sd_cmd_delay();
  1915                        ;
  1916                        ;	k_sd_initialize();
  1917                        ;
  1918                        ;	return( s );
  1919                        ;}
  1920                        ;
  1921                        ;
  1922                        ;UINT8 k_sd_status(VOID)
  1923                        ;{
  1924                        ;	UINT8	s;
  1925                        ;
  1926                        ;	xWriteCH376Cmd( CMD01_GET_STATUS );
  1927                        ;	s = xReadCH376Data( );
  1928                        ;	xEndCH376Cmd( );
  1929                        ;	return( s );
  1930                        ;}
  1931                        ;
  1932                        ;BOOL k_sd_ispresent(void)
  1933                        ;{
  1934                        ;	UCHAR stat = 0;
  1935                        ;	BOOL retCode = FALSE;
  1936                        ;
  1937                        ;	stat = SDCARD_STAT[0]; //  BIT[0] = Cd, BIT[1] =
                     WP
  1938                        ;	k_debug_integer("k_sd_initialize::SDCARD_STAT:",
                     stat);
  1939                        ;
  1940                        ;	if (stat & 0x01)
  1941                        ;	{
  1942                        ;		retCode = FALSE;
  1943                        ;		SDCARD_PRSNT_MNT[0] = 0x00;
  1944                        ;	}
  1945                        ;	else
  1946                        ;	{
  1947                        ;		SDCARD_PRSNT_MNT[0] = 0x01;
  1948                        ;		retCode = TRUE;
  1949                        ;	}
  1950                        ;
  1951                        ;
  1952                        ;	if(!retCode)
  1953                        ;	{
  1954                        ;		pdiskCache = NULL;
  1955                        ;		k_sd_reset();
  1956                        ;	}
  1957                        ;
  1958                        ;
  1959                        ;	k_debug_integer("k_sd_ispresent:", retCode);
  1960                        ;
  1961                        ;	return retCode;
  1962                        ;}
  Sat Jul 10 2021  1:15                                                Page 38


  1963                        ;
  1964                        ;UCHAR k_sd_waitforirq(void)
  1965                        ;{
  1966                        ;	UINT abort = 0xFF;
  1967                        ;	UCHAR status = 0x80;
  1968                        ;
  1969                        ;	//asm SEI;
  1970                        ;
  1971                        ;	while (status == 0x80)
  1972                        ;	{
  1973                        ;		status = SDCARD_DATA[0];
  1974                        ;		//k_debug_integer("k_sd_waitforirq::wait
                    :", status);
  1975                        ;
  1976                        ;		abort--;
  1977                        ;		if(abort < 1)
  1978                        ;		{
  1979                        ;			return 0x80;
  1980                        ;		}
  1981                        ;	}
  1982                        ;
  1983                        ;	k_sd_cmd_delay();
  1984                        ;	k_sd_cmd_delay();
  1985                        ;
  1986                        ;	SDCARD_CMD[0] = CH_CMD_GET_STATUS;
  1987                        ;
  1988                        ;	k_sd_cmd_delay();
  1989                        ;
  1990                        ;	status = SDCARD_DATA[0];
  1991                        ;
  1992                        ;	//k_debug_integer("k_sd_waitforirq::status:", st
                    atus);
  1993                        ;
  1994                        ;	//asm cli;
  1995                        ;
  1996                        ;	return status;
  1997                        ;}
  1998                        ;
  1999                        ;BOOL k_sd_mount(void)
  2000                        ;{
  2001                        ;	int i = 0;
  2002                        ;	int abort = 0;
  2003                        ;	UCHAR status = 0x00;
  2004                        ;	UCHAR data[37];
  2005                        ;	BOOL retCode = FALSE;
  2006                        ;
  2007                        ;	if(_mount_lock)
  2008                        ;		return TRUE;
  2009                        ;
  2010                        ;	if(k_sd_ispresent())
  2011                        ;	{
  2012                        ;		k_debug_string("k_sd_mount::card detecte
                    d\r\n");
  2013                        ;		//if(SDCARD_PRSNT_MNT[0] & 0x05 != 0x05)
  2014                        ;		if (SDCARD_PRSNT_MNT[0] == 0x01)
  2015                        ;		{
  2016                        ;			k_debug_string("k_sd_mount::card
                     mounting..\r\n");
  Sat Jul 10 2021  1:15                                                Page 39


  2017                        ;
  2018                        ;			/// SDCARD_PRSNT_MNT[0] = 0x01;/
                    /      ; Bit[0] = Card Present
  2019                        ;
  2020                        ;			while (status != CH376S_STAT_SUC
                    CESS) //TRY_MOUNT_AGAIN
  2021                        ;			{
  2022                        ;				SDCARD_CMD[0] = CH_CMD_D
                    ISK_MOUNT;
  2023                        ;				k_sd_cmd_delay();
  2024                        ;
  2025                        ;				k_sd_cmd_delay();
  2026                        ;				k_sd_cmd_delay();
  2027                        ;
  2028                        ;				status = k_sd_waitforirq
                    ();
  2029                        ;
  2030                        ;				if (status == CH376S_STA
                    T_SUCCESS)
  2031                        ;				{
  2032                        ;
  2033                        ;					/*
  2034                        ;					 SDCARD_CMD[0] =
                     CH_CMD_RD_DATA0;
  2035                        ;					 k_sd_cmd_delay(
                    );
  2036                        ;					 k_debug_hex("k_
                    sd_read_dir::k_sd_mount-size:",SDCARD_DATA[0]);
  2037                        ;
  2038                        ;					 for(i=0;i<36;i+
                    +)
  2039                        ;					 {
  2040                        ;					 data[i] = SDCAR
                    D_DATA[0];
  2041                        ;					 k_sd_dta_delay(
                    );
  2042                        ;					 k_debug_hexchar
                    ("k_sd_read_dir::k_sd_mount:",data[i]);
  2043                        ;					 }
  2044                        ;					 data[36] = 0;
  2045                        ;
  2046                        ;					 k_debug_string(
                    "k_sd_mount::mount-name:");
  2047                        ;					 k_debug_string(
                    data);
  2048                        ;					 k_debug_string(
                    "\r\n");
  2049                        ;					 */
  2050                        ;				}
  2051                        ;
  2052                        ;				//INY
  2053                        ;				//CPY #$00F0
  2054                        ;				//BNE TRY_MOUNT_AGAIN
  2055                        ;				//JMP SDCARD_ERROR_MOUNT
  2056                        ;				abort++;
  2057                        ;				if (abort > 0x03FF) // 0
                    x03FF
  2058                        ;				{
  Sat Jul 10 2021  1:15                                                Page 40


  2059                        ;					k_debug_string("
                    k_sd_mount::card mount failed\r\n");
  2060                        ;					k_debug_hex("k_s
                    d_mount::status:",status);
  2061                        ;					return FALSE;
  2062                        ;				}
  2063                        ;			}
  2064                        ;
  2065                        ;			k_debug_integer("k_sd_mount::abo
                    rt:",abort);
  2066                        ;		}
  2067                        ;
  2068                        ;		//;              LDA SDCARD_PRSNT_MNT   
                         ; Load Presence Status
  2069                        ;		//;              AND #$05
  2070                        ;		//;              CMP #$05
  2071                        ;		//;              BEQ ISDOS_MOUNTED
  2072                        ;
  2073                        ;		SDCARD_PRSNT_MNT[0] &= SDCARD_PRSNT_MNTE
                    D;
  2074                        ;		k_debug_string("k_sd_mount::card mounted
                    \r\n");
  2075                        ;		retCode = TRUE;
  2076                        ;	}
  2077                        ;	else
  2078                        ;	{
  2079                        ;		SDCARD_PRSNT_MNT[0] = SDCARD_PRSNT_NO_CA
                    RD;
  2080                        ;	}
  2081                        ;
  2082                        ;	return retCode;
  2083                        ;}
  2084                        ;
  2085                        ;BOOL k_sd_openfile(LPCHAR filename)
  2086                        ;{
  2087                        ;	UCHAR status = 0x00;
  2088                        ;	BOOL retCode = FALSE;
  2089                        ;
  2090                        ;	k_debug_string("k_sd_openfile::filename:");
  2091                        ;	k_debug_string(filename);
  2092                        ;	k_debug_string("\r\n");
  2093                        ;
  2094                        ;	k_sd_setfilename(filename);
  2095                        ;	k_sd_cmd_delay();
  2096                        ;	SDCARD_CMD[0] = CH_CMD_FILE_OPEN;
  2097                        ;
  2098                        ;	status = k_sd_waitforirq();
  2099                        ;
  2100                        ;	k_debug_integer("k_sd_openfile::result:", status
                    );
  2101                        ;
  2102                        ;	//retCode = (status == 0x14);
  2103                        ;	retCode = (status !=USB_INT_DISK_ERR);
  2104                        ;
  2105                        ;
  2106                        ;	return retCode;
  2107                        ;}
  2108                        ;
  Sat Jul 10 2021  1:15                                                Page 41


  2109                        ;BOOL k_sd_setfilename(LPCHAR filename)
  2110                        ;{
  2111                        ;	int i = 0;
  2112                        ;	BOOL bRet = FALSE;
  2113                        ;	LPCHAR fptr = filename;
  2114                        ;
  2115                        ;	//k_debug_string("k_sd_setfilename::enter\r\n");
  2116                        ;
  2117                        ;	if (filename != NULL)
  2118                        ;	{
  2119                        ;		SDCARD_CMD[0] = CH_CMD_SET_FILENAME;
  2120                        ;		k_sd_cmd_delay();
  2121                        ;
  2122                        ;		//k_debug_string("k_sd_setfilename::send
                    \r\n");
  2123                        ;
  2124                        ;		while (*fptr)
  2125                        ;		{
  2126                        ;			SDCARD_DATA[0] = *fptr;
  2127                        ;			k_sd_dta_delay();
  2128                        ;			fptr++;
  2129                        ;		}
  2130                        ;		SDCARD_DATA[0] = 0;
  2131                        ;		k_sd_dta_delay();
  2132                        ;
  2133                        ;		bRet = TRUE;
  2134                        ;	}
  2135                        ;
  2136                        ;	//k_debug_integer("k_sd_setfilename::result:", b
                    Ret);
  2137                        ;
  2138                        ;	return bRet;
  2139                        ;}
  2140                        ;
  2141                        ;/*
  2142                        ; 	nodelist = k_nodelist_init(1,"node1",NUL
                    L);
  2143                        ;
  2144                        ;	newnode = k_nodelist_create(2,"node2",NULL,NULL,
                    NULL);
  2145                        ;	k_nodelist_add(nodelist,newnode);
  2146                        ;	newnode = k_nodelist_create(3,"node3",NULL,NULL,
                    NULL);
  2147                        ;	k_nodelist_add(nodelist,newnode);
  2148                        ;	newnode = k_nodelist_create(34,"node4",NULL,NULL
                    ,NULL);
  2149                        ;	k_nodelist_add(nodelist,newnode);
  2150                        ;
  2151                        ;	k_debug_nodelist(nodelist);
  2152                        ;
  2153                        ;*/
  2154                        ;
  2155                        ;PFXNODE k_sd_read_dir(void)
  2156                        ;{
  2157                        ;	PFXNODE pnDirList = NULL;
  2158                        ;	PFXNODE node  = NULL;
  2159                        ;	PFILEINFO pfi = NULL;
  2160                        ;	UCHAR rsize = 0;
  Sat Jul 10 2021  1:15                                                Page 42


  2161                        ;	FX_FAT_DIR_INFO FAR *direntry = NULL;
  2162                        ;	//FAT_DIR_INFO direntry;
  2163                        ;	LPCHAR pdirentry = NULL;
  2164                        ;	UCHAR data = 0;
  2165                        ;	UCHAR status = 0x000;
  2166                        ;	int i = 0;
  2167                        ;
  2168                        ;	k_debug_integer("k_sd_read_dir::enter:sizeof(FAT
                    _DIR_INFO):",sizeof(FAT_DIR_INFO));
  2169                        ;
  2170                        ;	k_sd_read_vol(NULL);
  2171                        ;
  2172                        ;	if(k_sd_ispresent() && k_sd_mount())
  2173                        ;	{
  2174                        ;		if(k_sd_openfile(sd_card_dir_string))
  2175                        ;		{
  2176                        ;			k_debug_string("k_sd_read_dir::k
                    _sd_openfile:success\r\n");
  2177                        ;
  2178                        ;			direntry = k_mem_allocate_heap(s
                    izeof(FAT_DIR_INFO));
  2179                        ;
  2180                        ;			status = CH376S_STAT_DSK_RD;
  2181                        ;			while (status == CH376S_STAT_DSK
                    _RD || status == 0x51)
  2182                        ;			//while (status != ERR_MISS_FILE
                    )
  2183                        ;			{
  2184                        ;				SDCARD_CMD[0] = CH_CMD_R
                    D_DATA0;
  2185                        ;				k_sd_cmd_delay();
  2186                        ;
  2187                        ;				rsize = SDCARD_DATA[0];
  2188                        ;				k_debug_hex("k_sd_read_d
                    ir::k_sd_openfile:read:",data);
  2189                        ;
  2190                        ;				//k_sd_cmd_delay();
  2191                        ;
  2192                        ;				pdirentry = (LPCHAR) dir
                    entry;
  2193                        ;
  2194                        ;				for (i = 0; i < rsize; i
                    ++)
  2195                        ;				{
  2196                        ;					k_sd_dta_delay()
                    ;
  2197                        ;					data = SDCARD_DA
                    TA[0];
  2198                        ;					//k_debug_char("
                    k_sd_read_dir::entrydata:",data);
  2199                        ;					*pdirentry = dat
                    a;
  2200                        ;					pdirentry++;
  2201                        ;				}
  2202                        ;
  2203                        ;				k_debug_string("k_sd_rea
                    d_dir::FAT_DIR_INFO.NAME:");
  2204                        ;				k_debug_nstring(direntry
  Sat Jul 10 2021  1:15                                                Page 43


                    ->DIR_Name, 11);
  2205                        ;				k_debug_string("\r\n");
  2206                        ;
  2207                        ;				if(pnDirList == NULL)
  2208                        ;				{
  2209                        ;					k_debug_string("
                    k_sd_read_dir::pnDirList\r\n");
  2210                        ;					pnDirList = k_no
                    delist_init(direntry->DIR_Attr,"dos",(LPVOID)_k_dos_alloc_fi
                    leinfo(direntry));
  2211                        ;				}
  2212                        ;				else
  2213                        ;				{
  2214                        ;					node = k_nodelis
                    t_create(direntry->DIR_Attr,"dos",(LPVOID)_k_dos_alloc_filei
                    nfo(direntry),NULL,NULL);
  2215                        ;					k_debug_pointer(
                    "k_sd_read_dir::node:",node);
  2216                        ;					if(node!=NULL)
  2217                        ;						k_nodeli
                    st_add(pnDirList,node);
  2218                        ;				}
  2219                        ;
  2220                        ;				/*
  2221                        ;				if (direntry.DIR_Attr ==
                     ATTR_VOLUME_ID)
  2222                        ;				{
  2223                        ;					k_debug_string("
                    ** VOLUME **\r\n");
  2224                        ;				}
  2225                        ;				*/
  2226                        ;				//k_debug_integer("k_sd_
                    read_dir::FAT_DIR_INFO.ATTR:",direntry.DIR_Attr);
  2227                        ;				//k_debug_integer("k_sd_
                    read_dir::FAT_DIR_INFO.NTRES:",direntry.DIR_NTRes);
  2228                        ;				//k_debug_integer("k_sd_
                    read_dir::FAT_DIR_INFO.SIZE:",direntry.DIR_FileSize);
  2229                        ;
  2230                        ;				k_sd_cmd_delay();
  2231                        ;
  2232                        ;				SDCARD_CMD[0] = CH_CMD_F
                    ILE_ENUM_GO;
  2233                        ;				k_sd_cmd_delay();
  2234                        ;				status = k_sd_waitforirq
                    ();
  2235                        ;				k_debug_hex("k_sd_read_d
                    ir::CH_CMD_FILE_ENUM_GO:status:",status);
  2236                        ;
  2237                        ;				if(status == 0)
  2238                        ;				{
  2239                        ;					SDCARD_CMD[0] = 
                    CH_CMD_FILE_ENUM_GO;
  2240                        ;					k_sd_cmd_delay()
                    ;
  2241                        ;					status = k_sd_wa
                    itforirq();
  2242                        ;					k_debug_hex("k_s
                    d_read_dir::CH_CMD_FILE_ENUM_GO:retry status:",status);
  Sat Jul 10 2021  1:15                                                Page 44


  2243                        ;				}
  2244                        ;
  2245                        ;			}
  2246                        ;
  2247                        ;			k_sd_close(0);
  2248                        ;		}
  2249                        ;	}
  2250                        ;
  2251                        ;	return pnDirList;
  2252                        ;}
  2253                        ;
  2254                        ;void k_sd_read_dir_OLD(void)
  2255                        ;{
  2256                        ;	PFXNODE nodesDirList = NULL;
  2257                        ;
  2258                        ;	FAT_DIR_INFO direntry;
  2259                        ;	LPCHAR pdirentry = NULL;
  2260                        ;	UCHAR data = 0;
  2261                        ;	UCHAR status = 0x000;
  2262                        ;	int i = 0;
  2263                        ;
  2264                        ;	//k_debug_string("k_sd_read_dir::enter\r\n");
  2265                        ;
  2266                        ;	if (k_sd_mount())
  2267                        ;	{
  2268                        ;		if (k_sd_openfile(sd_card_dir_string))
  2269                        ;		{
  2270                        ;			//k_debug_string("k_sd_read_dir:
                    :k_sd_openfile:success\r\n");
  2271                        ;			;
  2272                        ;			status = CH376S_STAT_DSK_RD;
  2273                        ;			while (status == CH376S_STAT_DSK
                    _RD || status == 0x51)
  2274                        ;			{
  2275                        ;				SDCARD_CMD[0] = CH_CMD_R
                    D_DATA0;
  2276                        ;				k_sd_cmd_delay();
  2277                        ;
  2278                        ;				data = SDCARD_DATA[0];
  2279                        ;				//k_debug_hex("k_sd_read
                    _dir::k_sd_openfile:read:",data);
  2280                        ;
  2281                        ;				//k_sd_cmd_delay();
  2282                        ;
  2283                        ;				pdirentry = (LPCHAR) &di
                    rentry;
  2284                        ;
  2285                        ;				for (i = 0; i < sizeof(D
                    IRENTRY); i++)
  2286                        ;				{
  2287                        ;					k_sd_dta_delay()
                    ;
  2288                        ;					data = SDCARD_DA
                    TA[0];
  2289                        ;					//k_debug_char("
                    k_sd_read_dir::entrydata:",data);
  2290                        ;					*pdirentry = dat
                    a;
  Sat Jul 10 2021  1:15                                                Page 45


  2291                        ;					pdirentry++;
  2292                        ;				}
  2293                        ;
  2294                        ;				k_debug_string("k_sd_rea
                    d_dir::FAT_DIR_INFO.NAME:");
  2295                        ;				k_debug_nstring(direntry
                    .DIR_Name, 11);
  2296                        ;				//k_debug_string(pdirent
                    ry);
  2297                        ;				k_debug_string("\r\n");
  2298                        ;
  2299                        ;				if (direntry.DIR_Attr ==
                     ATTR_VOLUME_ID)
  2300                        ;				{
  2301                        ;					k_debug_string("
                    ** VOLUME **\r\n");
  2302                        ;				}
  2303                        ;
  2304                        ;				k_debug_integer("k_sd_re
                    ad_dir::FAT_DIR_INFO.ATTR:",direntry.DIR_Attr);
  2305                        ;				//k_debug_integer("k_sd_
                    read_dir::FAT_DIR_INFO.NTRES:",direntry.DIR_NTRes);
  2306                        ;				k_debug_integer("k_sd_re
                    ad_dir::FAT_DIR_INFO.SIZE:",direntry.DIR_FileSize);
  2307                        ;
  2308                        ;				k_sd_cmd_delay();
  2309                        ;
  2310                        ;				SDCARD_CMD[0] = CH_CMD_F
                    ILE_ENUM_GO;
  2311                        ;				status = k_sd_waitforirq
                    ();
  2312                        ;				//k_debug_hex("k_sd_read
                    _dir::CH_CMD_FILE_ENUM_GO:status:",status);
  2313                        ;			}
  2314                        ;
  2315                        ;			k_sd_close(0);
  2316                        ;		}
  2317                        ;	}
  2318                        ;}
  2319                        ;
  2320                        ;void k_sd_search_dir(LPCHAR searchString)
  2321                        ;{
  2322                        ;	FAT_DIR_INFO direntry;
  2323                        ;	LPCHAR pdirentry = NULL;
  2324                        ;	UCHAR data = 0;
  2325                        ;	UCHAR status = 0x000;
  2326                        ;	int i = 0;
  2327                        ;
  2328                        ;	//k_debug_string("k_sd_read_dir::enter\r\n");
  2329                        ;
  2330                        ;	if (k_sd_mount())
  2331                        ;	{
  2332                        ;		if (k_sd_openfile(searchString))
  2333                        ;		{
  2334                        ;			//k_debug_string("k_sd_read_dir:
                    :k_sd_openfile:success\r\n");
  2335                        ;			;
  2336                        ;			status = CH376S_STAT_DSK_RD;
  Sat Jul 10 2021  1:15                                                Page 46


  2337                        ;			while (status == CH376S_STAT_DSK
                    _RD || status == 0x51)
  2338                        ;			{
  2339                        ;				SDCARD_CMD[0] = CH_CMD_R
                    D_DATA0;
  2340                        ;				k_sd_cmd_delay();
  2341                        ;
  2342                        ;				data = SDCARD_DATA[0];
  2343                        ;				//k_debug_hex("k_sd_read
                    _dir::k_sd_openfile:read:",data);
  2344                        ;
  2345                        ;				//k_sd_cmd_delay();
  2346                        ;
  2347                        ;				pdirentry = (LPCHAR) &di
                    rentry;
  2348                        ;
  2349                        ;				for (i = 0; i < sizeof(D
                    IRENTRY); i++)
  2350                        ;				{
  2351                        ;					k_sd_dta_delay()
                    ;
  2352                        ;					data = SDCARD_DA
                    TA[0];
  2353                        ;					//k_debug_char("
                    k_sd_read_dir::entrydata:",data);
  2354                        ;					*pdirentry = dat
                    a;
  2355                        ;					pdirentry++;
  2356                        ;				}
  2357                        ;
  2358                        ;				k_debug_string("k_sd_rea
                    d_dir::FAT_DIR_INFO.NAME:");
  2359                        ;				k_debug_nstring(direntry
                    .DIR_Name, 11);
  2360                        ;				//k_debug_string(pdirent
                    ry);
  2361                        ;				k_debug_string("\r\n");
  2362                        ;
  2363                        ;				if (direntry.DIR_Attr ==
                     ATTR_VOLUME_ID)
  2364                        ;				{
  2365                        ;					k_debug_string("
                    ** VOLUME **\r\n");
  2366                        ;				}
  2367                        ;
  2368                        ;				k_debug_integer("k_sd_re
                    ad_dir::FAT_DIR_INFO.ATTR:",direntry.DIR_Attr);
  2369                        ;				//k_debug_integer("k_sd_
                    read_dir::FAT_DIR_INFO.NTRES:",direntry.DIR_NTRes);
  2370                        ;				k_debug_integer("k_sd_re
                    ad_dir::FAT_DIR_INFO.SIZE:",direntry.DIR_FileSize);
  2371                        ;
  2372                        ;				k_sd_cmd_delay();
  2373                        ;
  2374                        ;				SDCARD_CMD[0] = CH_CMD_F
                    ILE_ENUM_GO;
  2375                        ;				status = k_sd_waitforirq
                    ();
  Sat Jul 10 2021  1:15                                                Page 47


  2376                        ;				//k_debug_hex("k_sd_read
                    _dir::CH_CMD_FILE_ENUM_GO:status:",status);
  2377                        ;			}
  2378                        ;
  2379                        ;			k_sd_close(0);
  2380                        ;		}
  2381                        ;	}
  2382                        ;}
  2383                        ;
  2384                        ;
  2385                        ;UINT16 k_read_disk_sector(LPCHAR buf, UINT32 iLba
                    Start, UINT8 iSectorCount)
  2386                        ;{
  2387                        ;	UINT16 size = 0;
  2388                        ;	UINT8  err;
  2389                        ;	UINT16 mBlockCount;
  2390                        ;
  2391                        ;	UINT8  s = USB_INT_DISK_READ;
  2392                        ;
  2393                        ;	k_debug_long("k_read_disk_sector::iLbaStart:",iL
                    baStart);
  2394                        ;
  2395                        ;	for (err = 0; err != 3; ++err)
  2396                        ;	{
  2397                        ;		xWriteCH376Cmd(CMD5H_DISK_READ);
  2398                        ;		k_sd_cmd_delay();
  2399                        ;		k_sd_cmd_delay();
  2400                        ;		xWriteCH376Data((UINT8) iLbaStart);
  2401                        ;		k_sd_dta_delay();
  2402                        ;		xWriteCH376Data((UINT8) ((UINT16) iLbaSt
                    art >> 8));
  2403                        ;		k_sd_dta_delay();
  2404                        ;		xWriteCH376Data((UINT8) (iLbaStart >> 16
                    ));
  2405                        ;		k_sd_dta_delay();
  2406                        ;		xWriteCH376Data((UINT8) (iLbaStart >> 24
                    ));
  2407                        ;		k_sd_dta_delay();
  2408                        ;		xWriteCH376Data(iSectorCount);
  2409                        ;		k_sd_dta_delay();
  2410                        ;		xEndCH376Cmd();
  2411                        ;
  2412                        ;		s = USB_INT_DISK_READ;
  2413                        ;
  2414                        ;		for (mBlockCount = iSectorCount * DEF_SE
                    CTOR_SIZE / CH376_DAT_BLOCK_LEN;mBlockCount != 0; --mBlockCo
                    unt)
  2415                        ;		{
  2416                        ;			k_debug_integer("k_read_disk_sec
                    tor::mBlockCount:",mBlockCount);
  2417                        ;
  2418                        ;			s = k_sd_waitforirq();
  2419                        ;
  2420                        ;			//s = USB_INT_DISK_READ;
  2421                        ;			if (s == USB_INT_DISK_READ)
  2422                        ;			{
  2423                        ;				s = k_sd_read_block(buf)
                    ;
  Sat Jul 10 2021  1:15                                                Page 48


  2424                        ;				xWriteCH376Cmd( CMD0H_DI
                    SK_RD_GO);
  2425                        ;				xEndCH376Cmd();
  2426                        ;				buf += s;
  2427                        ;				size += s;
  2428                        ;				k_debug_integer("k_read_
                    disk_sector::read:size:",size);
  2429                        ;			}
  2430                        ;			else
  2431                        ;			{
  2432                        ;				k_debug_integer("k_read_
                    disk_sector::k_sd_waitforirq:",s);
  2433                        ;				break;
  2434                        ;			}
  2435                        ;			s = k_sd_waitforirq();
  2436                        ;		}
  2437                        ;
  2438                        ;		if (mBlockCount == 0)
  2439                        ;		{
  2440                        ;			s = k_sd_waitforirq();
  2441                        ;			if (s == USB_INT_SUCCESS)
  2442                        ;				return (size);
  2443                        ;		}
  2444                        ;		if (s == USB_INT_DISCONNECT)
  2445                        ;			return (size);
  2446                        ;		k_sd_disk_req_sense();
  2447                        ;	}
  2448                        ;	return (size);
  2449                        ;}
  2450                        ;
  2451                        ;UINT8 k_sd_cmd_and_irq( UINT8 mCmd )
  2452                        ;{
  2453                        ;	xWriteCH376Cmd( mCmd );
  2454                        ;	k_sd_cmd_delay();
  2455                        ;	xEndCH376Cmd( );
  2456                        ;	return( k_sd_waitforirq( ) );
  2457                        ;}
  2458                        ;
  2459                        ;UINT8 k_sd_disk_req_sense( void )
  2460                        ;{
  2461                        ;	UINT8	s;
  2462                        ;	mDelaymS( 5 );
  2463                        ;	s = k_sd_cmd_and_irq( CMD0H_DISK_R_SENSE );
  2464                        ;	mDelaymS( 5 );
  2465                        ;	return( s );
  2466                        ;}
  2467                        ;
  2468                        ;BOOL k_sd_read_vol(PDISKINFO pdiskInfo)
  2469                        ;{
  2470                        ;
  2471                        ;	BOOL bRet = FALSE;
  2472                        ;	//UINT size = 0;
  2473                        ;	UINT   index = 0;
  2474                        ;	BOOL   cmd = FALSE;
  2475                        ;	UINT16 read = 0;
  2476                        ;	//fat_BS_t direntry;
  2477                        ;	//LPCHAR pdirentry = (LPCHAR) &direntry;
  2478                        ;	UCHAR data = 0;
  Sat Jul 10 2021  1:15                                                Page 49


  2479                        ;	//UCHAR status = 0x000;
  2480                        ;	LPCHAR contents = NULL;
  2481                        ;	//LPCHAR test = "This is a test!\r\n";
  2482                        ;	int i = 0;
  2483                        ;
  2484                        ;	k_debug_string("k_sd_read_dir::enter\r\n");
  2485                        ;
  2486                        ;	//asm sei;
  2487                        ;
  2488                        ;	k_sd_reset();
  2489                        ;
  2490                        ;	//if(k_sd_ispresent() && k_sd_mount())
  2491                        ;	if(k_sd_mount())
  2492                        ;	{
  2493                        ;		_mount_lock = TRUE;
  2494                        ;
  2495                        ;		k_sd_openfile("\0");
  2496                        ;
  2497                        ;		if (k_sd_openfile(CONST_FXINFO_FILE))
  2498                        ;		{
  2499                        ;
  2500                        ;			k_debug_string("k_sd_read_vol::o
                    pened\r\n");
  2501                        ;
  2502                        ;			//k_sd_byte_locate(0L);
  2503                        ;
  2504                        ;			if(pdiskInfo!=NULL)
  2505                        ;			{
  2506                        ;				memset(pdiskInfo,0,sizeo
                    f(DISKINFO));
  2507                        ;
  2508                        ;
  2509                        ;				k_sd_byte_read((LPCHAR)p
                    diskInfo,sizeof(DISKINFO),&read);
  2510                        ;				if(read == 0)
  2511                        ;				{
  2512                        ;					strcpy(pdiskInfo
                    ->stgName,"NO NAME");
  2513                        ;				}
  2514                        ;				k_debug_integer("k_sd_re
                    ad_vol::k_sd_byte_read:read:", read);
  2515                        ;				k_debug_string("VOLUME N
                    AME:");
  2516                        ;				k_debug_nstring(pdiskInf
                    o->stgName, 32 );
  2517                        ;				k_debug_string("\r\n");
  2518                        ;
  2519                        ;				memcpy(&lastdiskInfo,pdi
                    skInfo,sizeof(DISKINFO));
  2520                        ;				pdiskCache = &lastdiskIn
                    fo;
  2521                        ;
  2522                        ;				bRet = TRUE;
  2523                        ;			}
  2524                        ;
  2525                        ;			k_sd_close(CLOSE_NOUPDATE);
  2526                        ;		}
  2527                        ;
  Sat Jul 10 2021  1:15                                                Page 50


  2528                        ;		k_debug_string("k_sd_read_vol::exit\r\n"
                    );
  2529                        ;
  2530                        ;		_mount_lock = FALSE;
  2531                        ;	}
  2532                        ;	else
  2533                        ;	{
  2534                        ;		pdiskCache = NULL;
  2535                        ;	}
  2536                        ;
  2537                        ;	//asm cli;
  2538                        ;
  2539                        ;	return bRet;
  2540                        ;}
  2541                        ;
  2542                        ;BOOL k_sd_write_file(LPCHAR fileName,LPVOID fileB
                    uffer,UINT fileSize)
  2543                        ;{
  2544                        ;
  2545                        ;	BOOL bRet = FALSE;
  2546                        ;	UINT   index = 0;
  2547                        ;	BOOL   cmd = FALSE;
  2548                        ;	UINT16 wrote = 0;
  2549                        ;	int i = 0;
  2550                        ;
  2551                        ;	k_debug_integer("k_sd_write_file::enter:",fileSi
                    ze);
  2552                        ;
  2553                        ;	//asm sei;
  2554                        ;
  2555                        ;	k_sd_reset();
  2556                        ;
  2557                        ;	if(fileName && k_sd_ispresent() && k_sd_mount())
  2558                        ;	{
  2559                        ;		k_sd_openfile("\0");
  2560                        ;
  2561                        ;		k_sd_delete(fileName);
  2562                        ;
  2563                        ;		k_sd_reset();
  2564                        ;
  2565                        ;		k_sd_openfile("\0");
  2566                        ;		if(k_sd_createfile(fileName))
  2567                        ;		{
  2568                        ;			if (k_sd_openfile(fileName))
  2569                        ;			{
  2570                        ;				k_sd_cmd_delay();
  2571                        ;				k_debug_string("k_sd_wri
                    te_file::opened\r\n");
  2572                        ;				if(fileBuffer!=NULL)
  2573                        ;				{
  2574                        ;					k_sd_byte_write(
                    (LPCHAR)fileBuffer,fileSize,&wrote);
  2575                        ;					k_debug_integer(
                    "k_sd_write_file::k_sd_byte_write:wrote:", wrote);
  2576                        ;					bRet = (wrote ==
                     fileSize);
  2577                        ;				}
  2578                        ;				k_sd_close(TRUE);
  Sat Jul 10 2021  1:15                                                Page 51


  2579                        ;			}
  2580                        ;		}
  2581                        ;		k_debug_string("k_sd_write_file::exit\r\
                    n");
  2582                        ;	}
  2583                        ;
  2584                        ;	//asm cli;
  2585                        ;
  2586                        ;	return bRet;
  2587                        ;}
  2588                        ;
  2589                        ;BOOL k_sd_read_file(LPCHAR fileName,LPVOID fileBu
                    ffer,UINT fileSize)
  2590                        ;{
  2591                        ;
  2592                        ;	BOOL bRet = FALSE;
  2593                        ;	UINT   index = 0;
  2594                        ;	BOOL   cmd = FALSE;
  2595                        ;	UINT16 read = 0;
  2596                        ;	UCHAR data = 0;
  2597                        ;	LPCHAR contents = NULL;
  2598                        ;	int i = 0;
  2599                        ;
  2600                        ;	k_debug_string("k_sd_read_file::enter\r\n");
  2601                        ;
  2602                        ;	//asm sei;
  2603                        ;
  2604                        ;	k_sd_reset();
  2605                        ;
  2606                        ;	if(k_sd_ispresent() && k_sd_mount())
  2607                        ;	{
  2608                        ;		if (k_sd_openfile(CONST_FXINFO_FILE))
  2609                        ;		{
  2610                        ;
  2611                        ;			k_debug_string("k_sd_read_file::
                    opened\r\n");
  2612                        ;
  2613                        ;			//k_sd_byte_locate(0L);
  2614                        ;
  2615                        ;			if(fileBuffer!=NULL)
  2616                        ;			{
  2617                        ;				memset(fileBuffer,0,file
                    Size);
  2618                        ;				k_sd_byte_read((LPCHAR)f
                    ileBuffer,fileSize,&read);
  2619                        ;
  2620                        ;
  2621                        ;				k_debug_integer("k_sd_re
                    ad_file::k_sd_byte_read:read:", read);
  2622                        ;
  2623                        ;				bRet = TRUE;
  2624                        ;			}
  2625                        ;
  2626                        ;			k_sd_close(CLOSE_NOUPDATE);
  2627                        ;		}
  2628                        ;
  2629                        ;		k_debug_string("k_sd_read_file::exit\r\n
                    ");
  Sat Jul 10 2021  1:15                                                Page 52


  2630                        ;	}
  2631                        ;
  2632                        ;	//asm cli;
  2633                        ;
  2634                        ;	return bRet;
  2635                        ;}
  2636                        ;
  2637                        ;BOOL k_sd_create_dir(LPCHAR dirName)
  2638                        ;{
  2639                        ;	UCHAR status = 0;
  2640                        ;	BOOL bRet = FALSE;
  2641                        ;
  2642                        ;	if (k_sd_setfilename(dirName))
  2643                        ;	{
  2644                        ;		k_sd_sendcmd( CMD0H_DIR_CREATE);
  2645                        ;		status = k_sd_waitforirq();
  2646                        ;		if (status == USB_INT_SUCCESS)
  2647                        ;		{
  2648                        ;			bRet = TRUE;
  2649                        ;		}
  2650                        ;	}
  2651                        ;
  2652                        ;	return bRet;
  2653                        ;}
  2654                        ;
  2655                        ;BOOL k_sd_getdirinfo(P_FAT_DIR_INFO pdirName)
  2656                        ;{
  2657                        ;	int i = 0;
  2658                        ;	UCHAR status = 0;
  2659                        ;	UCHAR data = 0;
  2660                        ;	BOOL bRet = FALSE;
  2661                        ;	LPCHAR ptr = (LPCHAR) pdirName;
  2662                        ;
  2663                        ;	if (k_sd_openfile("/NEWDIR"))
  2664                        ;	{
  2665                        ;		k_sd_sendcmd( CMD1H_DIR_INFO_READ);
  2666                        ;		k_sd_senddta(0xFF);
  2667                        ;		status = k_sd_waitforirq();
  2668                        ;		k_debug_hex("k_sd_getdirinfo::CMD1H_DIR_
                    INFO_READ:read:", status);
  2669                        ;		if (status == USB_INT_SUCCESS)
  2670                        ;		{
  2671                        ;			k_sd_sendcmd( CH_CMD_RD_DATA0);
  2672                        ;
  2673                        ;			//data = SDCARD_DATA[0];
  2674                        ;			//k_debug_hex("k_sd_getdirinfo::
                    read:",data);
  2675                        ;
  2676                        ;			//k_sd_cmd_delay();
  2677                        ;
  2678                        ;			for (i = 0; i < sizeof(FAT_DIR_I
                    NFO); i++)
  2679                        ;			{
  2680                        ;				k_sd_dta_delay();
  2681                        ;				data = SDCARD_DATA[0];
  2682                        ;				k_debug_char("k_sd_getdi
                    rinfo::entrydata:", data);
  2683                        ;				*ptr = data;
  Sat Jul 10 2021  1:15                                                Page 53


  2684                        ;				ptr++;
  2685                        ;			}
  2686                        ;
  2687                        ;			bRet = TRUE;
  2688                        ;		}
  2689                        ;
  2690                        ;		k_sd_close(FALSE);
  2691                        ;	}
  2692                        ;	return bRet;
  2693                        ;}
  2694                        ;
  2695                        ;BOOL k_sd_delete(LPCHAR dirOrFileName)
  2696                        ;{
  2697                        ;	UCHAR status = 0;
  2698                        ;	BOOL bRet = FALSE;
  2699                        ;
  2700                        ;	k_debug_string("k_sd_delete:enter\r\n");
  2701                        ;
  2702                        ;	if (k_sd_setfilename(dirOrFileName))
  2703                        ;	{
  2704                        ;		k_sd_sendcmd( CMD0H_FILE_ERASE);
  2705                        ;		status = k_sd_waitforirq();
  2706                        ;		if (status == USB_INT_SUCCESS)
  2707                        ;		{
  2708                        ;			bRet = TRUE;
  2709                        ;		}
  2710                        ;		//k_sd_close(TRUE);
  2711                        ;	}
  2712                        ;
  2713                        ;
  2714                        ;	k_debug_integer("k_sd_delete:exit:",bRet);
  2715                        ;
  2716                        ;	return bRet;
  2717                        ;}
  2718                        ;
  2719                        ;BOOL k_sd_close(UCHAR update)
  2720                        ;{
  2721                        ;	UCHAR status = 0;
  2722                        ;	BOOL bRet = FALSE;
  2723                        ;
  2724                        ;	k_debug_string("k_sd_close\r\n");
  2725                        ;
  2726                        ;	k_sd_sendcmd( CMD1H_FILE_CLOSE);
  2727                        ;	k_sd_senddta(update);
  2728                        ;
  2729                        ;	status = k_sd_waitforirq();
  2730                        ;	if (status == USB_INT_SUCCESS)
  2731                        ;	{
  2732                        ;		bRet = TRUE;
  2733                        ;	}
  2734                        ;
  2735                        ;	return bRet;
  2736                        ;}
  2737                        ;
  2738                        ;void k_sd_sendcmd(UCHAR command)
  2739                        ;{
  2740                        ;	SDCARD_CMD[0] = command;
  2741                        ;	k_sd_cmd_delay();
  Sat Jul 10 2021  1:15                                                Page 54


  2742                        ;}
  2743                        ;
  2744                        ;void k_sd_senddta(UCHAR data)
  2745                        ;{
  2746                        ;	SDCARD_DATA[0] = data;
  2747                        ;	k_sd_dta_delay();
  2748                        ;}
  2749                        ;
  2750                        ;void k_sd_cmd_delay(void)
  2751                        ;{
  2752                        ;#asm
  2753                        ;	NOP
  2754                        ;	NOP
  2755                        ;	NOP
  2756                        ;	NOP
  2757                        ;	NOP
  2758                        ;	NOP
  2759                        ;	NOP
  2760                        ;	NOP
  2761                        ;	NOP
  2762                        ;	NOP
  2763                        ;#endasm
  2764                        ;}
  2765                        ;
  2766                        ;void k_sd_dta_delay(void)
  2767                        ;{
  2768                        ;#asm
  2769                        ;	NOP
  2770                        ;	NOP
  2771                        ;	NOP
  2772                        ;	NOP
  2773                        ;	NOP
  2774                        ;#endasm
  2775                        ;}
  2776                        ;
  2777                        ;
  2778                        ;UINT8 k_sd_createfile( LPCHAR name )
  2779                        ;{
  2780                        ;	if(name)
  2781                        ;	{
  2782                        ;		k_debug_string("k_sd_createfile:name:");
  2783                        ;		k_debug_string(name);
  2784                        ;		k_debug_string("\r\n");
  2785                        ;
  2786                        ;		k_sd_setfilename( name );
  2787                        ;	}
  2788                        ;	return( k_sd_cmd_and_irq( CMD0H_FILE_CREATE ) );
  2789                        ;}
  2790                        ;
  2791                        ;UINT8	k_sd_read_block( PUINT8 buf )
  2792                        ;{
  2793                        ;	UINT8	s, l;
  2794                        ;	xWriteCH376Cmd( CMD01_RD_USB_DATA0 );
  2795                        ;	s = l = xReadCH376Data( );
  2796                        ;	if ( l ) {
  2797                        ;		do {
  2798                        ;			*buf = xReadCH376Data( );
  2799                        ;			buf ++;
  Sat Jul 10 2021  1:15                                                Page 55


  2800                        ;		} while ( -- l );
  2801                        ;	}
  2802                        ;	xEndCH376Cmd( );
  2803                        ;	return( s );
  2804                        ;}
  2805                        ;
  2806                        ;
  2807                        ;void k_sd_write_host_block( PUINT8 buf, UINT8 len
                     )
  2808                        ;{
  2809                        ;	xWriteCH376Cmd( CMD10_WR_HOST_DATA );
  2810                        ;	xWriteCH376Data( len );
  2811                        ;	if ( len ) {
  2812                        ;		do {
  2813                        ;			xWriteCH376Data( *buf );
  2814                        ;			buf ++;
  2815                        ;		} while ( -- len );
  2816                        ;	}
  2817                        ;	xEndCH376Cmd( );
  2818                        ;}
  2819                        ;
  2820                        ;void k_sd_write_ofs_blocks( PUINT8 buf, UINT8 ofs
                    , UINT8 len )
  2821                        ;{
  2822                        ;	xWriteCH376Cmd( CMD20_WR_OFS_DATA );
  2823                        ;	xWriteCH376Data( ofs );
  2824                        ;	xWriteCH376Data( len );
  2825                        ;	if ( len ) {
  2826                        ;		do {
  2827                        ;			xWriteCH376Data( *buf );
  2828                        ;			buf ++;
  2829                        ;		} while ( -- len );
  2830                        ;	}
  2831                        ;	xEndCH376Cmd( );
  2832                        ;}
  2833                        ;
  2834                        ;UINT8 k_sd_byte_locate( UINT32 offset )
  2835                        ;{
  2836                        ;	xWriteCH376Cmd( CMD4H_BYTE_LOCATE );
  2837                        ;	xWriteCH376Data( (UINT8)offset );
  2838                        ;	xWriteCH376Data( (UINT8)((UINT16)offset>>8) );
  2839                        ;	xWriteCH376Data( (UINT8)(offset>>16) );
  2840                        ;	xWriteCH376Data( (UINT8)(offset>>24) );
  2841                        ;	xEndCH376Cmd( );
  2842                        ;	return( Wait376Interrupt( ) );
  2843                        ;}
  2844                        ;
  2845                        ;/*
  2846                        ;UINT8 k_sd_byte_read( PUINT8 buf, UINT16 ReqCount
                    , PUINT16 RealCount )
  2847                        ;{
  2848                        ;	UINT8	s;
  2849                        ;
  2850                        ;	k_debug_integer("k_sd_byte_read:",ReqCount);
  2851                        ;
  2852                        ;	xWriteCH376Cmd( CMD2H_BYTE_READ );
  2853                        ;	xWriteCH376Data( (UINT8)ReqCount );
  2854                        ;	xWriteCH376Data( (UINT8)(ReqCount>>8) );
  Sat Jul 10 2021  1:15                                                Page 56


  2855                        ;	xEndCH376Cmd( );
  2856                        ;	if ( RealCount ) *RealCount = 0;
  2857                        ;	while ( 1 )
  2858                        ;	{
  2859                        ;		s = k_sd_waitforirq( );
  2860                        ;		k_debug_integer("k_sd_byte_read:status:"
                    ,s);
  2861                        ;		if ( s == USB_INT_DISK_READ || s == USB_
                    INT_SUCCESS)
  2862                        ;		{
  2863                        ;			s = k_sd_read_block( buf );
  2864                        ;			xWriteCH376Cmd( CMD0H_BYTE_RD_GO
                     );
  2865                        ;			xEndCH376Cmd( );
  2866                        ;			buf += s;
  2867                        ;			if ( RealCount )
  2868                        ;				*RealCount += s;
  2869                        ;
  2870                        ;			k_debug_integer("k_sd_byte_read:
                    RealCount:",*RealCount);
  2871                        ;		}
  2872                        ;		//else if ( s == USB_INT_SUCCESS ) retur
                    n( s );
  2873                        ;		else return( s );
  2874                        ;	}
  2875                        ;}
  2876                        ;*/
  2877                        ;UINT8 k_sd_byte_read( PUINT8 buf, UINT16 ReqCount
                    , PUINT16 RealCount )
  2878                        ;{
  2879                        ;	UINT8	s;
  2880                        ;
  2881                        ;	k_debug_integer("k_sd_byte_read:ReqCount:",ReqCo
                    unt);
  2882                        ;
  2883                        ;	k_debug_hex("k_sd_byte_read:ReqCount L:",(UINT8)
                    ReqCount );
  2884                        ;	k_debug_hex("k_sd_byte_read:ReqCount H:",(UINT8)
                    (ReqCount>>8));
  2885                        ;
  2886                        ;	xWriteCH376Cmd( CMD2H_BYTE_READ );
  2887                        ;	xWriteCH376Data( (UINT8)ReqCount );
  2888                        ;	xWriteCH376Data( (UINT8)(ReqCount>>8) );
  2889                        ;	xEndCH376Cmd( );
  2890                        ;	if ( RealCount )
  2891                        ;		*RealCount = 0;
  2892                        ;
  2893                        ;	s = k_sd_waitforirq( );
  2894                        ;	k_debug_integer("k_sd_byte_read:INITIAL:",s);
  2895                        ;	if(s == USB_INT_SUCCESS || s == USB_INT_DISK_REA
                    D)
  2896                        ;	{
  2897                        ;		k_debug_integer("k_sd_byte_read:STATUS:"
                    ,s);
  2898                        ;
  2899                        ;		s = USB_INT_DISK_READ;
  2900                        ;		while(s == USB_INT_DISK_READ)
  2901                        ;		{
  Sat Jul 10 2021  1:15                                                Page 57


  2902                        ;			s = k_sd_read_block( buf );
  2903                        ;			buf += s;
  2904                        ;
  2905                        ;			if ( RealCount )
  2906                        ;			{
  2907                        ;				*RealCount += s;
  2908                        ;			}
  2909                        ;			k_debug_integer("k_sd_byte_read:
                    READ:",s);
  2910                        ;
  2911                        ;			xWriteCH376Cmd( CMD0H_BYTE_RD_GO
                     );
  2912                        ;			xEndCH376Cmd( );
  2913                        ;
  2914                        ;			s = k_sd_waitforirq();
  2915                        ;		}
  2916                        ;	}
  2917                        ;
  2918                        ;	return s;
  2919                        ;}
  2920                        ;
  2921                        ;/*
  2922                        ;UINT8 k_sd_byte_write( LPCHAR buf, UINT16 ReqCoun
                    t, PUINT16 RealCount )
  2923                        ;{
  2924                        ;	UINT8	s;
  2925                        ;
  2926                        ;	k_debug_integer("k_sd_byte_write:",ReqCount);
  2927                        ;
  2928                        ;	xWriteCH376Cmd( CMD2H_BYTE_WRITE );
  2929                        ;	xWriteCH376Data( (UINT8)ReqCount );
  2930                        ;	xWriteCH376Data( (UINT8)(ReqCount>>8) );
  2931                        ;	xEndCH376Cmd( );
  2932                        ;	if ( RealCount ) *RealCount = 0;
  2933                        ;	while ( 1 )
  2934                        ;	{
  2935                        ;		s = k_sd_waitforirq( );
  2936                        ;		k_debug_integer("k_sd_byte_write:status1
                    :",s);
  2937                        ;		//if ( s == USB_INT_DISK_WRITE )
  2938                        ;		if ( s == USB_INT_SUCCESS ||  s == USB_I
                    NT_DISK_WRITE)
  2939                        ;		{
  2940                        ;			s = k_sd_write_req_block( buf );
  2941                        ;
  2942                        ;			xWriteCH376Cmd( CMD0H_BYTE_WR_GO
                     );
  2943                        ;			xEndCH376Cmd( );
  2944                        ;			buf += s;
  2945                        ;
  2946                        ;			if ( RealCount )
  2947                        ;			{
  2948                        ;				*RealCount += s;
  2949                        ;				if(*RealCount == ReqCoun
                    t)
  2950                        ;					return s;
  2951                        ;			}
  2952                        ;			k_debug_integer("k_sd_byte_write
  Sat Jul 10 2021  1:15                                                Page 58


                    :status2:",s);
  2953                        ;		}
  2954                        ;		//e-lse if ( s == USB_INT_SUCCESS ) retu
                    rn( s );
  2955                        ;		else return( s );
  2956                        ;	}
  2957                        ;}
  2958                        ;*/
  2959                        ;
  2960                        ;UINT8 k_sd_byte_write( LPCHAR buf, UINT16 ReqCoun
                    t, PUINT16 RealCount )
  2961                        ;{
  2962                        ;	UINT8	s;
  2963                        ;
  2964                        ;	k_debug_integer("k_sd_byte_write:ReqCount:",ReqC
                    ount);
  2965                        ;
  2966                        ;	k_debug_hex("k_sd_byte_write:ReqCount L:",(UINT8
                    )ReqCount );
  2967                        ;	k_debug_hex("k_sd_byte_write:ReqCount H:",(UINT8
                    )(ReqCount>>8));
  2968                        ;
  2969                        ;	xWriteCH376Cmd( CMD2H_BYTE_WRITE );
  2970                        ;	xWriteCH376Data( (UINT8)ReqCount );
  2971                        ;	xWriteCH376Data( (UINT8)(ReqCount>>8) );
  2972                        ;	xEndCH376Cmd( );
  2973                        ;
  2974                        ;	if ( RealCount )
  2975                        ;		*RealCount = 0;
  2976                        ;
  2977                        ;	s = k_sd_waitforirq( );
  2978                        ;
  2979                        ;	k_debug_integer("k_sd_byte_write:INITIAL:",s);
  2980                        ;	if(s == USB_INT_SUCCESS || s == CMD_RET_SUCCESS 
                     || s == USB_INT_DISK_WRITE)
  2981                        ;	{
  2982                        ;		k_debug_integer("k_sd_byte_write:STATUS:
                    ",s);
  2983                        ;		s = USB_INT_DISK_WRITE;
  2984                        ;		while(s == USB_INT_DISK_WRITE)
  2985                        ;		{
  2986                        ;			s = k_sd_write_req_block( buf );
  2987                        ;			buf += s;
  2988                        ;
  2989                        ;			if ( RealCount )
  2990                        ;			{
  2991                        ;				*RealCount += s;
  2992                        ;			}
  2993                        ;			k_debug_integer("k_sd_byte_write
                    :WRITE:",s);
  2994                        ;
  2995                        ;			xWriteCH376Cmd( CMD0H_BYTE_WR_GO
                     );
  2996                        ;			xEndCH376Cmd( );
  2997                        ;
  2998                        ;			s = k_sd_waitforirq();
  2999                        ;			k_debug_integer("k_sd_byte_write
                    :CMD0H_BYTE_WR_GO:STATUS:",s);
  Sat Jul 10 2021  1:15                                                Page 59


  3000                        ;		}
  3001                        ;	}
  3002                        ;
  3003                        ;	return s;
  3004                        ;}
  3005                        ;
  3006                        ;UINT8 k_sd_write_req_block( PUINT8 buf )
  3007                        ;{
  3008                        ;	UINT8	s, l;
  3009                        ;
  3010                        ;	k_debug_string("k_sd_write_req_block::ENTER\r\n"
                    );
  3011                        ;
  3012                        ;	xWriteCH376Cmd( CMD01_WR_REQ_DATA );
  3013                        ;	s = l = xReadCH376Data( );
  3014                        ;	k_debug_integer("k_sd_write_req_block:SIZE:",l);
  3015                        ;
  3016                        ;	if ( l )
  3017                        ;	{
  3018                        ;		do
  3019                        ;		{
  3020                        ;			xWriteCH376Data( *buf );
  3021                        ;			buf ++;
  3022                        ;		} while ( -- l );
  3023                        ;	}
  3024                        ;	xEndCH376Cmd( );
  3025                        ;
  3026                        ;	k_debug_integer("k_sd_write_req_block::EXIT:",s)
                    ;
  3027                        ;
  3028                        ;	return( s );
  3029                        ;}
  3030                        ;
  3031                        ;
  3032                        ;void k_sd_test_new(void)
  3033                        ;{
  3034                        ;	UINT8 s;
  3035                        ;	UINT16 j;
  3036                        ;
  3037                        ;	mDelaymS(100);
  3038                        ;
  3039                        ;	//mInitCH376Host();
  3040                        ;
  3041                        ;	if (k_sd_initialize())
  3042                        ;	{
  3043                        ;		k_debug_string("k_sd_test::initialized..
                    .\r\n");
  3044                        ;		if (k_sd_ispresent())
  3045                        ;		{
  3046                        ;			k_debug_string("k_sd_test::card 
                    present...\r\n");
  3047                        ;
  3048                        ;			if (k_sd_mount())
  3049                        ;			{
  3050                        ;				k_debug_string("k_sd_tes
                    t::card mounted...\r\n");
  3051                        ;
  3052                        ;				k_debug_string("k_sd_tes
  Sat Jul 10 2021  1:15                                                Page 60


                    t::k_sd_read_dir...\r\n");
  3053                        ;				s = CH376ReadBlock(buf);
  3054                        ;				if (s == sizeof(INQUIRY_
                    DATA))
  3055                        ;				{
  3056                        ;					buf[s] = 0;
  3057                        ;					k_debug_string("
                    UdiskInfo:");
  3058                        ;					k_debug_string(
  3059                        ;							
                    (char FAR*) ((P_INQUIRY_DATA) buf)->VendorIdStr);
  3060                        ;					k_debug_string("
                    \r\n");
  3061                        ;				}
  3062                        ;
  3063                        ;			}
  3064                        ;			else
  3065                        ;			{
  3066                        ;				k_debug_string("k_sd_tes
                    t::card NOT mounted...\r\n");
  3067                        ;			}
  3068                        ;		}
  3069                        ;		else
  3070                        ;		{
  3071                        ;			k_debug_string("k_sd_test::card 
                    NOT present...\r\n");
  3072                        ;		}
  3073                        ;	}
  3074                        ;	else
  3075                        ;	{
  3076                        ;		k_debug_string("k_sd_test::NOT initializ
                    ed...\r\n");
  3077                        ;	}
  3078                        ;
  3079                        ;}
  3080                        ;
  3081                        ;void k_sd_test(void)
  3082                        ;{
  3083                        ;
  3084                        ;	DISKINFO di;
  3085                        ;	FAT_DIR_INFO dirName;
  3086                        ;
  3087                        ;	if (k_sd_initialize())
  3088                        ;	{
  3089                        ;		k_debug_string("k_sd_test::initialized..
                    .\r\n");
  3090                        ;		if (k_sd_ispresent())
  3091                        ;		{
  3092                        ;			k_debug_string("k_sd_test::card 
                    present...\r\n");
  3093                        ;
  3094                        ;			if (k_sd_mount())
  3095                        ;			{
  3096                        ;				k_debug_string("k_sd_tes
                    t::card mounted...\r\n");
  3097                        ;
  3098                        ;				k_debug_string("k_sd_tes
                    t::k_sd_read_dir...\r\n");
  Sat Jul 10 2021  1:15                                                Page 61


  3099                        ;
  3100                        ;				//k_sd_read_vol(&di);
  3101                        ;				//k_sd_search_dir("*VOL"
                    );
  3102                        ;
  3103                        ;				//k_sd_read_dir();
  3104                        ;				/*
  3105                        ;				 k_sd_read_vol();
  3106                        ;
  3107                        ;				 if(k_sd_getdirinfo( &di
                    rName ))
  3108                        ;				 {
  3109                        ;				 k_debug_string("k_sd_ge
                    tdirinfo::ROOT:FAT_DIR_INFO.NAME:");
  3110                        ;				 k_debug_nstring(dirName
                    .DIR_Name,11);
  3111                        ;				 k_debug_string("\r\n");
  3112                        ;				 }
  3113                        ;				 */
  3114                        ;
  3115                        ;				/*
  3116                        ;				 k_debug_string("k_sd_te
                    st::k_sd_delete...\r\n");
  3117                        ;				 if(k_sd_delete("/NEWDIR
                    "))
  3118                        ;				 {
  3119                        ;				 k_debug_string("k_sd_te
                    st::k_sd_delete:DELETED\r\n");
  3120                        ;				 }
  3121                        ;				 else
  3122                        ;				 {
  3123                        ;				 k_debug_string("k_sd_te
                    st::k_sd_delete:NOT DELETED\r\n");
  3124                        ;				 }
  3125                        ;
  3126                        ;				 k_debug_string("k_sd_te
                    st::k_sd_create_dir...\r\n");
  3127                        ;				 if(k_sd_create_dir("/NE
                    WDIR"))
  3128                        ;				 {
  3129                        ;				 k_debug_string("k_sd_te
                    st::ck_sd_create_dir CREATED...\r\n");
  3130                        ;				 }
  3131                        ;				 else
  3132                        ;				 {
  3133                        ;				 k_debug_string("k_sd_te
                    st::ck_sd_create_dir:NOT CREATED\r\n");
  3134                        ;				 }
  3135                        ;
  3136                        ;				 k_debug_string("k_sd_te
                    st::k_sd_read_dir...\r\n");
  3137                        ;				 k_sd_read_dir();
  3138                        ;				 */
  3139                        ;			}
  3140                        ;			else
  3141                        ;			{
  3142                        ;				k_debug_string("k_sd_tes
                    t::card NOT mounted...\r\n");
  Sat Jul 10 2021  1:15                                                Page 62


  3143                        ;			}
  3144                        ;		}
  3145                        ;		else
  3146                        ;		{
  3147                        ;			k_debug_string("k_sd_test::card 
                    NOT present...\r\n");
  3148                        ;		}
  3149                        ;	}
  3150                        ;	else
  3151                        ;	{
  3152                        ;		k_debug_string("k_sd_test::NOT initializ
                    ed...\r\n");
  3153                        ;	}
  3154                        ;}
  3155                        ;
  3156                        ;
  3157                        ;#endif
  3158                        ;
  3159                        	.line	1400
  3160                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\drivers\DRIVER_B2SDCard.c",23
  3161                        	.sym	~~f_get_driver,~~f_get_driver,1098,3,32,
                    55
  3162                        	.sym	~~DRIVER_B2SDCard,~~DRIVER_B2SDCard,10,2
                    ,808,56
  3163                        	.sym	~~_k_s11_driver_base,~~_k_s11_driver_bas
                    e,129,3,32
  3164                        	.sym	P_CH376_CMD_DATA,0,139,14,32,144
  3165                        	.sym	CH376_CMD_DATA,0,11,14,288,144
  3166                        	.sym	P_SENSE_DATA,0,138,14,32,128
  3167                        	.sym	SENSE_DATA,0,10,14,144,128
  3168                        	.sym	P_INQUIRY_DATA,0,138,14,32,127
  3169                        	.sym	INQUIRY_DATA,0,10,14,288,127
  3170                        	.sym	P_BULK_ONLY_CBW,0,138,14,32,126
  3171                        	.sym	BULK_ONLY_CBW,0,10,14,248,126
  3172                        	.sym	P_FAT_DIR_INFO,0,138,14,32,125
  3173                        	.sym	FAT_DIR_INFO,0,10,14,256,125
  3174                        	.sym	PUINT8V,0,142,14,32
  3175                        	.sym	UINT8V,0,14,14,8
  3176                        	.sym	PUINT32,0,146,14,32
  3177                        	.sym	PUINT16,0,143,14,32
  3178                        	.sym	PUINT8,0,142,14,32
  3179                        	.sym	UINT32,0,18,14,32
  3180                        	.sym	UINT16,0,15,14,16
  3181                        	.sym	UINT8,0,14,14,8
  3182                        	.sym	PDOSHANDLE,0,138,14,32,124
  3183                        	.sym	DOSHANDLE,0,10,14,80,124
  3184                        	.sym	PFXDOSDEVICE,0,138,14,32,122
  3185                        	.sym	FXDOSDEVICE,0,10,14,5744,122
  3186                        	.sym	DOSINITDEVICE,0,641,14,32
  3187                        	.sym	DOSSECTORWRITER,0,654,14,32
  3188                        	.sym	DOSSECTORREADER,0,654,14,32
  3189                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,121
  3190                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,121
  3191                        	.sym	PIDSECTOR,0,138,14,32,98
  3192                        	.sym	IDSECTOR,0,10,14,2048,98
  3193                        	.sym	PLFN,0,138,14,32,97
  3194                        	.sym	LFN,0,10,14,256,97
  Sat Jul 10 2021  1:15                                                Page 63


  3195                        	.sym	PFAT16ENTRYLONG,0,138,14,32,96
  3196                        	.sym	FAT16ENTRYLONG,0,10,14,288,96
  3197                        	.sym	PFAT16ENTRY,0,138,14,32,95
  3198                        	.sym	FAT16ENTRY,0,10,14,256,95
  3199                        	.sym	Fat16BootSector,0,10,14,4096,94
  3200                        	.sym	PPARTITIONTABLE,0,138,14,32,93
  3201                        	.sym	PARTITIONTABLE,0,10,14,128,93
  3202                        	.sym	PFATBOOTSECTOR,0,138,14,32,92
  3203                        	.sym	FATBOOTSECTOR,0,10,14,928,92
  3204                        	.sym	fat_BS_t,0,10,14,688,91
  3205                        	.sym	fat_extBS_16_t,0,10,14,192,90
  3206                        	.sym	PFAT32EXT,0,138,14,32,89
  3207                        	.sym	fat_extBS_32_t,0,10,14,416,89
  3208                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,88
  3209                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,88
  3210                        	.sym	PFILEINFO,0,138,14,32,87
  3211                        	.sym	FILEINFO,0,10,14,136,87
  3212                        	.sym	PDISKINFO,0,138,14,32,86
  3213                        	.sym	DISKINFO,0,10,14,416,86
  3214                        	.sym	PDIRENTRY,0,138,14,32,85
  3215                        	.sym	DIRENTRY,0,10,14,256,85
  3216                        	.sym	DRESULT,0,5,14,16
  3217                        	.sym	DSTATUS,0,14,14,8
  3218                        	.sym	FRESULT,0,5,14,16
  3219                        	.sym	MKFS_PARM,0,10,14,80,84
  3220                        	.sym	FILINFO,0,10,14,2224,83
  3221                        	.sym	DIR,0,10,14,416,82
  3222                        	.sym	FIL,0,10,14,4400,81
  3223                        	.sym	FFOBJID,0,10,14,128,80
  3224                        	.sym	FATFS,0,10,14,4504,79
  3225                        	.sym	LBA_t,0,18,14,32
  3226                        	.sym	FSIZE_t,0,18,14,32
  3227                        	.sym	TCHAR,0,14,14,8
  3228                        	.sym	PCOMMANDARGS,0,138,14,32,78
  3229                        	.sym	COMMANDARGS,0,10,14,64,78
  3230                        	.sym	PTOKENIZESTATE,0,133,14,32
  3231                        	.sym	TOKENIZESTATE,0,5,14,16
  3232                        	.sym	PTOKEN,0,138,14,32,77
  3233                        	.sym	TOKEN,0,10,14,64,77
  3234                        	.sym	PTOKENTYPE,0,133,14,32
  3235                        	.sym	TOKENTYPE,0,5,14,16
  3236                        	.sym	FXCommandHandler,0,656,14,32
  3237                        	.sym	PCONSOLECTX,0,138,14,32,76
  3238                        	.sym	CONSOLECTX,0,10,14,1144,76
  3239                        	.sym	PSPINNERCTX,0,138,14,32,75
  3240                        	.sym	SPINNERCTX,0,10,14,48,75
  3241                        	.sym	HCLIP,0,138,14,32,74
  3242                        	.sym	PCLIPBOARD_DATA,0,138,14,32,74
  3243                        	.sym	CLIPBOARD_DATA,0,10,14,168,74
  3244                        	.sym	PEVENTMANAGER,0,138,14,32,73
  3245                        	.sym	EVENTMANAGER,0,10,14,192,73
  3246                        	.sym	EV_RUN,0,656,14,32
  3247                        	.sym	EV_QUERY_METRIC,0,656,14,32
  3248                        	.sym	EV_CONFIGURE,0,656,14,32
  3249                        	.sym	EV_UNINIT,0,641,14,32
  3250                        	.sym	EV_INIT,0,8833,14,32
  3251                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,72
  3252                        	.sym	MOUSE_MSG_STATE,0,10,14,184,72
  Sat Jul 10 2021  1:15                                                Page 64


  3253                        	.sym	PFXEVENTPROCESS,0,138,14,32,71
  3254                        	.sym	FXEVENTPROCESS,0,10,14,64,71
  3255                        	.sym	PMARSHALDATA,0,139,14,32,70
  3256                        	.sym	MARSHALDATA,0,11,14,32,70
  3257                        	.sym	FXIDLEPROCESS,0,641,14,32
  3258                        	.sym	FXEventProc,0,641,14,32
  3259                        	.sym	PMOUSEMSGDATA,0,138,14,32,69
  3260                        	.sym	MOUSEMSGDATA,0,10,14,64,69
  3261                        	.sym	MSGIRQ,0,5,14,16
  3262                        	.sym	MAINLOOPARGS,0,10,14,16,68
  3263                        	.sym	PEACHCHILD_MSG,0,138,14,32,67
  3264                        	.sym	EACHCHILD_MSG,0,10,14,64,67
  3265                        	.sym	PMSGBOX_DATA,0,138,14,32,66
  3266                        	.sym	MSGBOX_DATA,0,10,14,96,66
  3267                        	.sym	PDESKTOP_DATA,0,138,14,32,65
  3268                        	.sym	DESKTOP_DATA,0,10,14,64,65
  3269                        	.sym	PWINDOWMANAGER,0,138,14,32,64
  3270                        	.sym	WINDOWMANAGER,0,10,14,160,64
  3271                        	.sym	WM_DOPROCS,0,641,14,32
  3272                        	.sym	WM_QUERY_METRIC,0,656,14,32
  3273                        	.sym	WM_CONFIGURE,0,656,14,32
  3274                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  3275                        	.sym	WM_EVENTS,0,641,14,32
  3276                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,63
  3277                        	.sym	CUR_PALETTE_MAP,0,10,14,400,63
  3278                        	.sym	PCLICKDETECTED,0,138,14,32,62
  3279                        	.sym	CLICKDETECTED,0,10,14,64,62
  3280                        	.sym	OBJECTCLICKED,0,641,14,32
  3281                        	.sym	PIPCPORT,0,138,14,32,61
  3282                        	.sym	IPCPORT,0,10,14,144,61
  3283                        	.sym	MemoryCallback,0,641,14,32
  3284                        	.sym	PFXMEMORYMAP,0,138,14,32,60
  3285                        	.sym	FXMEMORYMAP,0,10,14,2072,60
  3286                        	.sym	UMM_HEAP_INFO,0,10,14,256,59
  3287                        	.sym	PEXECUTIVE,0,138,14,32,58
  3288                        	.sym	EXECUTIVE,0,10,14,128,58
  3289                        	.sym	EX_QUERY_METRIC,0,656,14,32
  3290                        	.sym	EX_CONFIGURE,0,656,14,32
  3291                        	.sym	EX_UNINIT,0,641,14,32
  3292                        	.sym	EX_INIT,0,8833,14,32
  3293                        	.sym	PFXSTRING,0,138,14,32,57
  3294                        	.sym	FXSTRING,0,10,14,64,57
  3295                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  3296                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  3297                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  3298                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  3299                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  3300                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
  3301                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,56
  3302                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,56
  3303                        	.sym	GETDRIVERDEF,0,8842,14,32,55
  3304                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,55
  3305                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,55
  3306                        	.sym	PSEGMENTHEADER,0,138,14,32,54
  3307                        	.sym	SEGMENTHEADER,0,10,14,160,54
  3308                        	.sym	PDEBUGBYTEBITS,0,138,14,32,53
  3309                        	.sym	DEBUGBYTEBITS,0,10,14,8,53
  3310                        	.sym	PFXENVIRONMENT,0,138,14,32,52
  Sat Jul 10 2021  1:15                                                Page 65


  3311                        	.sym	FXENVIRONMENT,0,10,14,96,52
  3312                        	.sym	PFXZEROPAGE,0,138,14,32,51
  3313                        	.sym	FXZEROPAGE,0,10,14,824,51
  3314                        	.sym	KERNELTRAPCALL,0,641,14,32
  3315                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,50
  3316                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,50
  3317                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  3318                        	.sym	FOREACHNODE,0,641,14,32
  3319                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
  3320                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
  3321                        	.sym	PFXRFHEADER,0,138,14,32,48
  3322                        	.sym	FXRFHEADER,0,10,14,72,48
  3323                        	.sym	PFXCOMBUFFER,0,138,14,32,47
  3324                        	.sym	FXCOMBUFFER,0,10,14,2080,47
  3325                        	.sym	PSUBMENULIST,0,138,14,32,46
  3326                        	.sym	SUBMENULIST,0,10,14,40,46
  3327                        	.sym	HSUBMENU,0,7,14,32
  3328                        	.sym	PSUBMENU,0,138,14,32,45
  3329                        	.sym	SUBMENU,0,10,14,64,45
  3330                        	.sym	MenuAction,0,641,14,32
  3331                        	.sym	PMENUANCHOR,0,138,14,32,44
  3332                        	.sym	MENUANCHOR,0,10,14,272,44
  3333                        	.sym	PMSGBOX,0,138,14,32,43
  3334                        	.sym	MSGBOX,0,10,14,144,43
  3335                        	.sym	PTEXTBOX,0,138,14,32,42
  3336                        	.sym	TEXTBOX,0,10,14,144,42
  3337                        	.sym	PLISTBOX,0,138,14,32,41
  3338                        	.sym	LISTBOX,0,10,14,240,41
  3339                        	.sym	PSCROLLBAR,0,138,14,32,40
  3340                        	.sym	SCROLLBAR,0,10,14,240,40
  3341                        	.sym	PBUTTON,0,138,14,32,39
  3342                        	.sym	BUTTON,0,10,14,96,39
  3343                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
  3344                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
  3345                        	.sym	PMENUTAG,0,138,14,32,37
  3346                        	.sym	MENUTAG,0,10,14,160,37
  3347                        	.sym	PMENU,0,138,14,32,36
  3348                        	.sym	MENU,0,10,14,280,36
  3349                        	.sym	HMENURESOURCE,0,129,14,32
  3350                        	.sym	FONTMETRIC,0,10,14,32,35
  3351                        	.sym	TITLE,0,142,14,32
  3352                        	.sym	PHANDLE,0,1153,14,32
  3353                        	.sym	HANDLE,0,129,14,32
  3354                        	.sym	PWINDOWEX,0,138,14,32,34
  3355                        	.sym	WINDOWEX,0,10,14,3880,34
  3356                        	.sym	PWINDOW,0,138,14,32,33
  3357                        	.sym	WINDOW,0,10,14,3904,33
  3358                        	.sym	PDRAGDATA,0,138,14,32,32
  3359                        	.sym	DRAGDATA,0,10,14,216,32
  3360                        	.sym	PNCCLICKABLE,0,138,14,32,31
  3361                        	.sym	NCCLICKABLE,0,10,14,136,31
  3362                        	.sym	HCLICKABLE,0,7,14,32
  3363                        	.sym	PCLICKABLE,0,138,14,32,30
  3364                        	.sym	CLICKABLE,0,10,14,152,30
  3365                        	.sym	PWNDCLASS,0,138,14,32,29
  3366                        	.sym	WNDCLASS,0,10,14,272,29
  3367                        	.sym	HBRUSH,0,129,14,32
  3368                        	.sym	HCURSOR,0,129,14,32
  Sat Jul 10 2021  1:15                                                Page 66


  3369                        	.sym	HICON,0,129,14,32
  3370                        	.sym	HINSTANCE,0,129,14,32
  3371                        	.sym	FXWndProc,0,654,14,32
  3372                        	.sym	PDRECT,0,138,14,32,28
  3373                        	.sym	DRECT,0,10,14,112,28
  3374                        	.sym	PRECTP,0,138,14,32,27
  3375                        	.sym	RECTP,0,10,14,96,27
  3376                        	.sym	PRECT,0,138,14,32,26
  3377                        	.sym	RECT,0,10,14,112,26
  3378                        	.sym	PPOINT,0,138,14,32,25
  3379                        	.sym	POINT,0,10,14,32,25
  3380                        	.sym	PFXPROPERTY,0,138,14,32,23
  3381                        	.sym	FXPROPERTY,0,10,14,384,23
  3382                        	.sym	PKEYSTATE,0,138,14,32,22
  3383                        	.sym	KEYSTATE,0,10,14,112,22
  3384                        	.sym	SCANCODE,0,14,14,8
  3385                        	.sym	KEYCODE,0,16,14,16
  3386                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
  3387                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
  3388                        	.sym	PFXPROCESS,0,138,14,32,20
  3389                        	.sym	FXPROCESS,0,10,14,800,20
  3390                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
  3391                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
  3392                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
  3393                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
  3394                        	.sym	FXProcessProc,0,641,14,32
  3395                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
  3396                        	.sym	FXCMDMESSAGE,0,10,14,304,17
  3397                        	.sym	PFXOSMESSAGE,0,138,14,32,16
  3398                        	.sym	FXOSMESSAGE,0,10,14,304,16
  3399                        	.sym	PINT_REGS,0,138,14,32,15
  3400                        	.sym	INT_REGS,0,10,14,104,15
  3401                        	.sym	TASK_STACK,0,10,14,32,14
  3402                        	.sym	TASK,0,10,14,48,13
  3403                        	.sym	PIRQDATA,0,138,14,32,12
  3404                        	.sym	IRQDATA,0,10,14,48,12
  3405                        	.sym	HMENU,0,129,14,32
  3406                        	.sym	HWND,0,129,14,32
  3407                        	.sym	MSGDATA,0,14,14,8
  3408                        	.sym	MSGDEST,0,18,14,32
  3409                        	.sym	MSGSRC,0,18,14,32
  3410                        	.sym	MSGTYPE,0,16,14,16
  3411                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
  3412                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
  3413                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
  3414                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
  3415                        	.sym	FILE_PATH_LIST,0,138,14,32,6
  3416                        	.sym	PROCEDURE_LIST,0,138,14,32,6
  3417                        	.sym	FILE_HANDLE,0,138,14,32,11
  3418                        	.sym	FILE_BLOCK,0,10,14,552,11
  3419                        	.sym	SEMAPHORE,0,10,14,16,10
  3420                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
  3421                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
  3422                        	.sym	KRESULT,0,18,14,32
  3423                        	.sym	PKERNEL_ERROR,0,138,14,32,8
  3424                        	.sym	KERNEL_ERROR,0,10,14,32,8
  3425                        	.sym	PROCESS_STATUS,0,16,14,16
  3426                        	.sym	FILE_PATH_NAME,0,142,14,32
  Sat Jul 10 2021  1:15                                                Page 67


  3427                        	.sym	PROCESS_RESOURCE,0,129,14,32
  3428                        	.sym	PROCESS_TLS,0,129,14,32
  3429                        	.sym	PROCESS_CTX,0,129,14,32
  3430                        	.sym	USERID,0,16,14,16
  3431                        	.sym	PROCESS_ID,0,18,14,32
  3432                        	.sym	PROCESS_BANK,0,14,14,8
  3433                        	.sym	PFXQUEUE,0,138,14,32,7
  3434                        	.sym	FXQUEUE,0,10,14,80,7
  3435                        	.sym	PFXNODELIST,0,138,14,32,6
  3436                        	.sym	FXNODELIST,0,10,14,96,6
  3437                        	.sym	NodeListDeallocator,0,641,14,32
  3438                        	.sym	PFXNODE,0,138,14,32,5
  3439                        	.sym	FXNODE,0,10,14,384,5
  3440                        	.sym	PBYTEBITS,0,138,14,32,4
  3441                        	.sym	BYTEBITS,0,10,14,8,4
  3442                        	.sym	HRESULT,0,18,14,32
  3443                        	.sym	LPWCHAR,0,144,14,32
  3444                        	.sym	WCHAR,0,16,14,16
  3445                        	.sym	HCOLOR,0,129,14,32
  3446                        	.sym	HFONT,0,129,14,32
  3447                        	.sym	HDC,0,129,14,32
  3448                        	.sym	HPOINTER,0,129,14,32
  3449                        	.sym	uint32_t,0,18,14,32
  3450                        	.sym	uint8_t,0,14,14,8
  3451                        	.sym	LPBOOL,0,142,14,32
  3452                        	.sym	BOOL,0,14,14,8
  3453                        	.sym	DWORD,0,18,14,32
  3454                        	.sym	ULONG,0,18,14,32
  3455                        	.sym	LPLONG,0,135,14,32
  3456                        	.sym	LONG,0,7,14,32
  3457                        	.sym	PUINT,0,144,14,32
  3458                        	.sym	USHORT,0,16,14,16
  3459                        	.sym	UINT,0,16,14,16
  3460                        	.sym	INT,0,5,14,16
  3461                        	.sym	WORD,0,5,14,16
  3462                        	.sym	PBYTE,0,142,14,32
  3463                        	.sym	BYTE,0,14,14,8
  3464                        	.sym	IOPORT,0,142,14,32
  3465                        	.sym	PUCHAR,0,142,14,32
  3466                        	.sym	UCHAR,0,14,14,8
  3467                        	.sym	LPWCSTR,0,142,14,32
  3468                        	.sym	LPCSTR,0,142,14,32
  3469                        	.sym	LPSTR,0,142,14,32
  3470                        	.sym	LPCHAR,0,142,14,32
  3471                        	.sym	CHAR,0,14,14,8
  3472                        	.sym	LPVOID,0,129,14,32
  3473                        	.sym	VOID,0,1,14,32
  3474                        	.sym	Boolean_T,0,5,14,16
  3475                        	.sym	ldiv_t,0,10,14,64,2
  3476                        	.sym	div_t,0,10,14,32,1
  3477                        	.sym	wctype_t,0,16,14,16
  3478                        	.sym	wint_t,0,16,14,16
  3479                        	.sym	wchar_t,0,14,14,8
  3480                        	.sym	ptrdiff_t,0,7,14,32
  3481                        	.sym	size_t,0,16,14,16
  3482                        	end


  Sat Jul 10 2021  1:15                                                Page 68


      Lines assembled: 3482
      Errors: 0
