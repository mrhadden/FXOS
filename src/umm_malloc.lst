  Mon Aug  9 2021 16:52                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",0
     7                        ;/* ----------------------------------------------
                    ------------------------------
     8                        ; * umm_malloc.c - a memory allocator for embedded
                     systems (microcontrollers)
     9                        ; *
    10                        ; * See LICENSE for copyright notice
    11                        ; * See README.md for acknowledgements and descrip
                    tion of internals
    12                        ; * ----------------------------------------------
                    ------------------------------
    13                        ; *
    14                        ; * R.Hempel 2007-09-22 - Original
    15                        ; * R.Hempel 2008-12-11 - Added MIT License bioler
                    plate
    16                        ; *                     - realloc() now looks to s
                    ee if previous block is free
    17                        ; *                     - made common operations f
                    unctions
    18                        ; * R.Hempel 2009-03-02 - Added macros to disable 
                    tasking
    19                        ; *                     - Added function to dump h
                    eap and check for valid free
    20                        ; *                        pointer
    21                        ; * R.Hempel 2009-03-09 - Changed name to umm_mall
                    oc to avoid conflicts with
    22                        ; *                        the mm_malloc() library
                     functions
    23                        ; *                     - Added some test code to 
                    assimilate a free block
    24                        ; *                        with the very block if 
                    possible. Complicated and
    25                        ; *                        not worth the grief.
    26                        ; * D.Frank 2014-04-02  - Fixed heap configuration
                     when UMM_TEST_MAIN is NOT set,
    27                        ; *                        added user-dependent co
                    nfiguration file umm_malloc_cfg.h
    28                        ; * R.Hempel 2016-12-04 - Add support for Unity te
                    st framework
    29                        ; *                     - Reorganize source files 
                    to avoid redundant content
    30                        ; *                     - Move integrity and poiso
                    n checking to separate file
    31                        ; * R.Hempel 2017-12-29 - Fix bug in realloc when 
                    requesting a new block that
    32                        ; *                        results in OOM error - 
  Mon Aug  9 2021 16:52                                                Page 2


                    see Issue 11
    33                        ; * R.Hempel 2019-09-07 - Separate the malloc() an
                    d free() functionality into
    34                        ; *                        wrappers that use criti
                    cal section protection macros
    35                        ; *                        and static core functio
                    ns that assume they are
    36                        ; *                        running in a protected 
                    con text. Thanks @devyte
    37                        ; * ----------------------------------------------
                    ------------------------------
    38                        ; */
    39                        ;
    40                        ;#include <stdio.h>
    41                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdio.h",0
    42                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
    43                        	.line	51
    44                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdio.h",40
    45                        	.stag	__stdio,160,1
    46                        	.member	_bp,0,142,8,32
    47                        	.member	_bend,32,142,8,32
    48                        	.member	_buff,64,142,8,32
    49                        	.member	_flags,96,15,8,16
    50                        	.member	_unit,112,14,8,8
    51                        	.member	_bytbuf,120,14,8,8
    52                        	.member	_buflen,128,16,8,16
    53                        	.member	_tmpnum,144,15,8,16
    54                        	.eos
    55                        	.line	219
    56                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",34
    57                        ;#include <string.h>
    58                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    59                        	.line	134
    60                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",35
    61                        ;
    62                        ;#include "umm_malloc.h"
    63                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
    64                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
    65                        	.stag	_fx_bytebits,8,2
    66                        	.member	b7,0,14,17,1
    67                        	.member	b6,1,14,17,1
    68                        	.member	b5,2,14,17,1
    69                        	.member	b4,3,14,17,1
    70                        	.member	b3,4,14,17,1
    71                        	.member	b2,5,14,17,1
    72                        	.member	b1,6,14,17,1
    73                        	.member	b0,7,14,17,1
    74                        	.eos
    75                        	.stag	_fx_node,384,3
    76                        	.member	type,0,14,8,8
  Mon Aug  9 2021 16:52                                                Page 3


    77                        	.member	Reserved0,8,14,8,8
    78                        	.member	data,16,129,8,32
    79                        	.member	last,48,138,8,32,3
    80                        	.member	next,80,138,8,32,3
    81                        	.member	name,112,110,8,0,32
    82                        	.member	Reserved1,368,16,8,16
    83                        	.eos
    84                        	.stag	_fx_nodelist,96,4
    85                        	.member	listhead,0,138,8,32,3
    86                        	.member	listData,32,129,8,32
    87                        	.member	deallocator,64,641,8,32
    88                        	.eos
    89                        	.stag	_fx_queue,80,5
    90                        	.member	count,0,5,8,16
    91                        	.member	front,16,138,8,32,3
    92                        	.member	rear,48,138,8,32,3
    93                        	.eos
    94                        	.stag	fake6_,32,6
    95                        	.member	subsystem,0,14,8,8
    96                        	.member	level,8,14,8,8
    97                        	.member	error,16,16,8,16
    98                        	.eos
    99                        	.stag	_fx_process_signal,16,7
   100                        	.member	cbSize,0,16,8,16
   101                        	.eos
   102                        	.stag	_fx_semaphore,16,8
   103                        	.member	reserved,0,5,8,16
   104                        	.eos
   105                        	.stag	_fx_fileBlock,552,9
   106                        	.member	openCount,0,16,8,16
   107                        	.member	lockCount,16,16,8,16
   108                        	.member	dirty,32,14,8,8
   109                        	.member	fileBuffer,40,110,8,0,64
   110                        	.eos
   111                        	.stag	_fx_irq_data,48,10
   112                        	.member	line,0,5,8,16
   113                        	.member	keycode,16,142,8,32
   114                        	.eos
   115                        	.stag	_task,48,11
   116                        	.member	SPL,0,14,8,8
   117                        	.member	SPH,8,14,8,8
   118                        	.member	pstack,16,142,8,32
   119                        	.eos
   120                        	.stag	_task_stack,32,12
   121                        	.member	SS,0,142,8,32
   122                        	.eos
   123                        	.stag	int_regs,104,13
   124                        	.member	PB,0,14,8,8
   125                        	.member	PH,8,14,8,8
   126                        	.member	PL,16,14,8,8
   127                        	.member	PP,24,14,8,8
   128                        	.member	DB,32,14,8,8
   129                        	.member	DH,40,14,8,8
   130                        	.member	DL,48,14,8,8
   131                        	.member	AH,56,14,8,8
   132                        	.member	AL,64,14,8,8
   133                        	.member	XH,72,14,8,8
   134                        	.member	XL,80,14,8,8
  Mon Aug  9 2021 16:52                                                Page 4


   135                        	.member	YH,88,14,8,8
   136                        	.member	YL,96,14,8,8
   137                        	.eos
   138                        	.stag	_fx_eventMessage,312,14
   139                        	.member	src,0,18,8,32
   140                        	.member	dest,32,18,8,32
   141                        	.member	type,64,16,8,16
   142                        	.member	hwnd,80,129,8,32
   143                        	.member	pheap,112,129,8,32
   144                        	.member	msgTime,144,18,8,32
   145                        	.member	data,176,110,8,0,16
   146                        	.member	attr,304,14,8,8
   147                        	.eos
   148                        	.stag	_fx_cmdMessage,312,15
   149                        	.member	src,0,18,8,32
   150                        	.member	dest,32,18,8,32
   151                        	.member	type,64,16,8,16
   152                        	.member	hwnd,80,129,8,32
   153                        	.member	pheap,112,129,8,32
   154                        	.member	msgTime,144,18,8,32
   155                        	.member	cmdCId,176,16,8,16
   156                        	.member	cmdMId,192,16,8,16
   157                        	.member	parameter1,208,18,8,32
   158                        	.member	parameter2,240,18,8,32
   159                        	.member	parameter3,272,18,8,32
   160                        	.member	attr,304,14,8,8
   161                        	.eos
   162                        	.stag	_fx_console_ctl,448,16
   163                        	.member	maxCols,0,5,8,16
   164                        	.member	maxRows,16,5,8,16
   165                        	.member	curX,32,5,8,16
   166                        	.member	curY,48,5,8,16
   167                        	.member	fgColor,64,5,8,16
   168                        	.member	bgColor,80,5,8,16
   169                        	.member	mode,96,14,8,8
   170                        	.member	kbBuffer,104,101,8,0,16
   171                        	.member	screenBuffer,360,142,8,32
   172                        	.member	desktopMode,392,14,8,8
   173                        	.member	lastMouseButton,400,5,8,16
   174                        	.member	lastMouseX,416,5,8,16
   175                        	.member	lastMouseY,432,5,8,16
   176                        	.eos
   177                        	.stag	_fx_desktop_ctl,392,17
   178                        	.member	desktopMode,0,14,8,8
   179                        	.member	cursorCtl,8,5,8,16
   180                        	.member	cursorState,24,5,8,16
   181                        	.member	backgroundColor,40,5,8,16
   182                        	.member	foregroundColor,56,5,8,16
   183                        	.member	menuMode,72,5,8,16
   184                        	.member	lastMouseButton,88,5,8,16
   185                        	.member	lastMouseX,104,5,8,16
   186                        	.member	lastMouseY,120,5,8,16
   187                        	.member	currentDiskName,136,142,8,32
   188                        	.member	diskNodes,168,129,8,32
   189                        	.member	titleNodes,200,129,8,32
   190                        	.member	menuNodes,232,129,8,32
   191                        	.member	iconNodes,264,129,8,32
   192                        	.member	windowNodes,296,129,8,32
  Mon Aug  9 2021 16:52                                                Page 5


   193                        	.member	fontNodes,328,129,8,32
   194                        	.member	wndProc,360,138,8,32,4
   195                        	.eos
   196                        	.stag	_fx_process,800,18
   197                        	.member	cbSize,0,5,8,16
   198                        	.member	procId,16,18,8,32
   199                        	.member	parentId,48,18,8,32
   200                        	.member	ctx,80,129,8,32
   201                        	.member	userId,112,16,8,16
   202                        	.member	status,128,16,8,16
   203                        	.member	foregroundActive,144,14,8,8
   204                        	.member	tls,152,1121,8,32,8
   205                        	.member	commandLine,408,142,8,32
   206                        	.member	semaphores,440,138,8,32,4
   207                        	.member	fileHandles,472,138,8,32,4
   208                        	.member	pathList,504,138,8,32,4
   209                        	.member	resources,536,138,8,32,4
   210                        	.member	timerAware,568,14,8,8
   211                        	.member	timerTicks,576,112,8,0,2
   212                        	.member	timerTickCount,608,112,8,0,2
   213                        	.member	kernelError,640,10,8,32,6
   214                        	.member	consoleCtl,672,138,8,32,16
   215                        	.member	desktopCtl,704,138,8,32,17
   216                        	.member	execProc,736,641,8,32
   217                        	.member	startupArgs,768,129,8,32
   218                        	.eos
   219                        	.stag	_fxProcessMessage,112,19
   220                        	.member	src,0,18,8,32
   221                        	.member	dest,32,18,8,32
   222                        	.member	type,64,16,8,16
   223                        	.member	processInfo,80,138,8,32,18
   224                        	.eos
   225                        	.stag	_k_key_state,112,20
   226                        	.member	scanCode,0,14,8,8
   227                        	.member	isShifted,8,14,8,8
   228                        	.member	isAlt,16,14,8,8
   229                        	.member	isExtended,24,14,8,8
   230                        	.member	isCapsLock,32,14,8,8
   231                        	.member	isNumLock,40,14,8,8
   232                        	.member	isScrollLock,48,14,8,8
   233                        	.member	keyChar,56,16,8,16
   234                        	.member	scanTime,72,18,8,32
   235                        	.member	ledStatus,104,14,8,8
   236                        	.eos
   237                        	.stag	_fx_property,384,21
   238                        	.member	name,0,110,8,0,16
   239                        	.member	value,128,110,8,0,32
   240                        	.eos
   241                        	.utag	_24bitPointer,32,22
   242                        	.member	address,0,142,11,32
   243                        	.member	bytes,0,110,11,0,4
   244                        	.eos
   245                        	.stag	_PointStruct,32,23
   246                        	.member	x,0,5,8,16
   247                        	.member	y,16,5,8,16
   248                        	.eos
   249                        	.stag	_RectStruct,112,24
   250                        	.member	x,0,5,8,16
  Mon Aug  9 2021 16:52                                                Page 6


   251                        	.member	y,16,5,8,16
   252                        	.member	z,32,18,8,32
   253                        	.member	width,64,5,8,16
   254                        	.member	height,80,5,8,16
   255                        	.member	attr,96,5,8,16
   256                        	.eos
   257                        	.stag	fake25_,96,25
   258                        	.member	name,0,142,8,32
   259                        	.member	topLeft,32,10,8,32,23
   260                        	.member	bottomRight,64,10,8,32,23
   261                        	.eos
   262                        	.stag	fake26_,112,26
   263                        	.member	x,0,5,8,16
   264                        	.member	y,16,5,8,16
   265                        	.member	z,32,5,8,16
   266                        	.member	width,48,5,8,16
   267                        	.member	height,64,5,8,16
   268                        	.member	data,80,18,8,32
   269                        	.eos
   270                        	.stag	_k_WindowClass,272,27
   271                        	.member	cbSize,0,16,8,16
   272                        	.member	style,16,16,8,16
   273                        	.member	styleEx,32,16,8,16
   274                        	.member	pWndProc,48,654,8,32
   275                        	.member	hInstance,80,129,8,32
   276                        	.member	hIcon,112,129,8,32
   277                        	.member	hCursor,144,129,8,32
   278                        	.member	hbrBackground,176,129,8,32
   279                        	.member	lpszMenuName,208,142,8,32
   280                        	.member	lpszClassName,240,142,8,32
   281                        	.eos
   282                        	.stag	_ClickableRect,152,28
   283                        	.member	area,0,10,8,112,24
   284                        	.member	z,112,18,8,32
   285                        	.member	enabled,144,14,8,8
   286                        	.eos
   287                        	.stag	_NCClickableRect,136,29
   288                        	.member	area,0,10,8,112,24
   289                        	.member	msgType,112,16,8,16
   290                        	.member	enabled,128,14,8,8
   291                        	.eos
   292                        	.stag	_DragData,216,30
   293                        	.member	area,0,10,8,112,24
   294                        	.member	xoffset,112,5,8,16
   295                        	.member	yoffset,128,5,8,16
   296                        	.member	msgType,144,16,8,16
   297                        	.member	ncAction,160,16,8,16
   298                        	.member	isDrag,176,14,8,8
   299                        	.member	isResize,184,14,8,8
   300                        	.member	canDrag,192,14,8,8
   301                        	.member	canDrop,200,14,8,8
   302                        	.member	didDrag,208,14,8,8
   303                        	.eos
   304                        	.stag	_k_WindowStruct,3904,31
   305                        	.member	cbSize,0,16,8,16
   306                        	.member	style,16,18,8,32
   307                        	.member	styleEx,48,18,8,32
   308                        	.member	win_id,80,5,8,16
  Mon Aug  9 2021 16:52                                                Page 7


   309                        	.member	win_x,96,5,8,16
   310                        	.member	win_y,112,5,8,16
   311                        	.member	win_width,128,5,8,16
   312                        	.member	win_height,144,5,8,16
   313                        	.member	win_xoffset,160,5,8,16
   314                        	.member	win_yoffset,176,5,8,16
   315                        	.member	win_cxoffset,192,5,8,16
   316                        	.member	win_cyoffset,208,5,8,16
   317                        	.member	wndRect,224,10,8,112,24
   318                        	.member	clientRect,336,10,8,112,24
   319                        	.member	nonclientGadgets,448,106,8,0,29,16
   320                        	.member	clickable,2624,129,8,32
   321                        	.member	win_title,2656,110,8,0,32
   322                        	.member	Reserved0,2912,16,8,16
   323                        	.member	win_class,2928,110,8,0,16
   324                        	.member	win_class_name,3056,110,8,0,32
   325                        	.member	nBitmapLayer,3312,16,8,16
   326                        	.member	bgRegion,3328,129,8,32
   327                        	.member	procid,3360,18,8,32
   328                        	.member	pWndClass,3392,138,8,32,27
   329                        	.member	pParentWindow,3424,129,8,32
   330                        	.member	hMenu,3456,129,8,32
   331                        	.member	hPointer,3488,129,8,32
   332                        	.member	hBackground,3520,129,8,32
   333                        	.member	pChildWindows,3552,138,8,32,4
   334                        	.member	pChildHitList,3584,138,8,32,4
   335                        	.member	isVisible,3616,14,8,8
   336                        	.member	windowData,3624,129,8,32
   337                        	.member	clientData,3656,1121,8,32,6
   338                        	.member	isClosed,3848,14,8,8
   339                        	.member	isClosing,3856,14,8,8
   340                        	.member	isDesktop,3864,14,8,8
   341                        	.member	clickableNode,3872,138,8,32,3
   342                        	.eos
   343                        	.stag	_k_WindowStructEx,3880,32
   344                        	.member	cbSize,0,16,8,16
   345                        	.member	style,16,18,8,32
   346                        	.member	styleEx,48,18,8,32
   347                        	.member	win_id,80,5,8,16
   348                        	.member	win_x,96,5,8,16
   349                        	.member	win_y,112,5,8,16
   350                        	.member	win_width,128,5,8,16
   351                        	.member	win_height,144,5,8,16
   352                        	.member	win_xoffset,160,5,8,16
   353                        	.member	win_yoffset,176,5,8,16
   354                        	.member	win_cxoffset,192,5,8,16
   355                        	.member	win_cyoffset,208,5,8,16
   356                        	.member	wndRect,224,10,8,112,24
   357                        	.member	clientRect,336,10,8,112,24
   358                        	.member	nonclientGadgets,448,106,8,0,29,16
   359                        	.member	clickable,2624,129,8,32
   360                        	.member	win_title,2656,110,8,0,32
   361                        	.member	Reserved0,2912,16,8,16
   362                        	.member	win_class,2928,110,8,0,16
   363                        	.member	nBitmapLayer,3056,16,8,16
   364                        	.member	procid,3072,18,8,32
   365                        	.member	pWndClass,3104,138,8,32,27
   366                        	.member	pParentWindow,3136,129,8,32
  Mon Aug  9 2021 16:52                                                Page 8


   367                        	.member	hMenu,3168,129,8,32
   368                        	.member	hPointer,3200,129,8,32
   369                        	.member	hBackground,3232,129,8,32
   370                        	.member	pChildWindows,3264,138,8,32,4
   371                        	.member	pChildHitList,3296,138,8,32,4
   372                        	.member	isVisible,3328,14,8,8
   373                        	.member	windowData,3336,129,8,32
   374                        	.member	clientData,3368,1121,8,32,4
   375                        	.member	isClosed,3496,14,8,8
   376                        	.member	hWnd,3504,129,8,32
   377                        	.member	localRect,3536,10,8,112,24
   378                        	.member	globalRect,3648,10,8,112,24
   379                        	.member	clientOffsetRect,3760,10,8,112,24
   380                        	.member	isDesktop,3872,14,8,8
   381                        	.eos
   382                        	.stag	_FontMetric,32,33
   383                        	.member	width,0,5,8,16
   384                        	.member	height,16,5,8,16
   385                        	.eos
   386                        	.stag	_MenuStruct,280,34
   387                        	.member	cx,0,5,8,16
   388                        	.member	cy,16,5,8,16
   389                        	.member	width,32,5,8,16
   390                        	.member	height,48,5,8,16
   391                        	.member	fcolor,64,14,8,8
   392                        	.member	bcolor,72,14,8,8
   393                        	.member	chromeLeft,80,14,8,8
   394                        	.member	chromeRight1,88,14,8,8
   395                        	.member	chromeRight2,96,14,8,8
   396                        	.member	hFont,104,129,8,32
   397                        	.member	itemId,136,16,8,16
   398                        	.member	pCaption,152,142,8,32
   399                        	.member	subMenus,184,138,8,32,4
   400                        	.member	pBackground,216,129,8,32
   401                        	.member	hWndOwner,248,129,8,32
   402                        	.eos
   403                        	.stag	fake35_,160,35
   404                        	.member	menuId,0,16,8,16
   405                        	.member	caption,16,142,8,32
   406                        	.member	rect,48,10,8,112,24
   407                        	.eos
   408                        	.stag	fake36_,5152,36
   409                        	.member	pParent,0,138,8,32,31
   410                        	.member	rect,32,10,8,112,24
   411                        	.member	captions,144,1134,8,32,24
   412                        	.member	chrome,912,110,8,0,24
   413                        	.member	ids,1104,112,8,0,24
   414                        	.member	clickable,1488,106,8,0,28,24
   415                        	.member	selected,5136,16,8,16
   416                        	.eos
   417                        	.stag	_fx_button_t,96,37
   418                        	.member	pCaption,0,142,8,32
   419                        	.member	cCaption,32,16,8,16
   420                        	.member	data,48,129,8,32
   421                        	.member	captionPixelWidth,80,16,8,16
   422                        	.eos
   423                        	.stag	_fx_scrollbar_t,240,38
   424                        	.member	min,0,16,8,16
  Mon Aug  9 2021 16:52                                                Page 9


   425                        	.member	max,16,16,8,16
   426                        	.member	increment,32,16,8,16
   427                        	.member	stopsize,48,16,8,16
   428                        	.member	location,64,5,8,16
   429                        	.member	state,80,5,8,16
   430                        	.member	rectThumb,96,10,8,112,24
   431                        	.member	data,208,129,8,32
   432                        	.eos
   433                        	.stag	_fx_listbox_t,240,39
   434                        	.member	pos,0,5,8,16
   435                        	.member	selected,16,16,8,16
   436                        	.member	offsetX,32,5,8,16
   437                        	.member	offsetY,48,5,8,16
   438                        	.member	inc,64,5,8,16
   439                        	.member	direction,80,5,8,16
   440                        	.member	top,96,5,8,16
   441                        	.member	bottom,112,5,8,16
   442                        	.member	indexTop,128,5,8,16
   443                        	.member	indexBottom,144,5,8,16
   444                        	.member	maxItems,160,16,8,16
   445                        	.member	fontSet,176,142,8,32
   446                        	.member	data,208,129,8,32
   447                        	.eos
   448                        	.stag	_fx_textbox_t,144,40
   449                        	.member	pos,0,5,8,16
   450                        	.member	selected,16,16,8,16
   451                        	.member	offsetX,32,5,8,16
   452                        	.member	offsetY,48,5,8,16
   453                        	.member	isShifted,64,14,8,8
   454                        	.member	cursorState,72,14,8,8
   455                        	.member	fontSet,80,142,8,32
   456                        	.member	data,112,129,8,32
   457                        	.eos
   458                        	.stag	_fx_msgbox_t,144,41
   459                        	.member	pos,0,5,8,16
   460                        	.member	selected,16,16,8,16
   461                        	.member	offsetX,32,5,8,16
   462                        	.member	offsetY,48,5,8,16
   463                        	.member	isShifted,64,14,8,8
   464                        	.member	cursorState,72,14,8,8
   465                        	.member	fontSet,80,142,8,32
   466                        	.member	data,112,129,8,32
   467                        	.eos
   468                        	.stag	_fx_menuAnchor_t,272,42
   469                        	.member	pCaption,0,142,8,32
   470                        	.member	renderLayoutX,32,16,8,16
   471                        	.member	renderLayoutY,48,16,8,16
   472                        	.member	captionPixelWidth,64,16,8,16
   473                        	.member	data,80,129,8,32
   474                        	.member	droppedWindow,112,138,8,32,31
   475                        	.member	bytes,144,110,8,0,16
   476                        	.eos
   477                        	.stag	_SubMenuStruct,64,43
   478                        	.member	caption,0,142,8,32
   479                        	.member	action,32,641,8,32
   480                        	.eos
   481                        	.stag	_SubMenuListStruct,40,44
   482                        	.member	cMenus,0,14,8,8
  Mon Aug  9 2021 16:52                                                Page 10


   483                        	.member	psubmenus,8,9354,8,32,43
   484                        	.eos
   485                        	.stag	_fx_ComBuffer,2080,45
   486                        	.member	cbSize,0,16,8,16
   487                        	.member	cbBuffer,16,16,8,16
   488                        	.member	buffer,32,110,8,0,256
   489                        	.eos
   490                        	.stag	_fx_resource_header,72,46
   491                        	.member	magic,0,110,8,0,4
   492                        	.member	major,32,14,8,8
   493                        	.member	minor,40,14,8,8
   494                        	.member	type,48,14,8,8
   495                        	.member	reserved,56,14,8,8
   496                        	.member	resheaderSize,64,14,8,8
   497                        	.eos
   498                        	.stag	_fx_resource_header_font,144,47
   499                        	.member	title,0,110,8,0,16
   500                        	.member	height,128,14,8,8
   501                        	.member	width,136,14,8,8
   502                        	.eos
   503                        	.stag	_fx_resource_string,32,48
   504                        	.member	locale,0,110,8,0,2
   505                        	.member	entries,16,16,8,16
   506                        	.eos
   507                        	.stag	_fx_resource_string_entry,40,49
   508                        	.member	index,0,16,8,16
   509                        	.member	length,16,16,8,16
   510                        	.member	data,32,14,8,8
   511                        	.eos
   512                        	.line	1064
   513                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",11
   514                        	.line	24
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",37
   516                        ;
   517                        ;#include "umm_malloc_cfg.h"   /* user-dependent *
                    /
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_build_parameters.h",0
   520                        	.line	35
   521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",8
   522                        	.stag	UMM_HEAP_INFO_t,256,50
   523                        	.member	totalEntries,0,18,8,32
   524                        	.member	usedEntries,32,18,8,32
   525                        	.member	freeEntries,64,18,8,32
   526                        	.member	totalBlocks,96,18,8,32
   527                        	.member	usedBlocks,128,18,8,32
   528                        	.member	freeBlocks,160,18,8,32
   529                        	.member	maxFreeContiguousBlocks,192,18,8,32
   530                        	.member	blockSize,224,18,8,32
   531                        	.eos
   532                        	.line	199
   533                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",39
  Mon Aug  9 2021 16:52                                                Page 11


   534                        ;
   535                        ;/* Use the default DBGLOG_LEVEL and DBGLOG_FUNCTI
                    ON */
   536                        ;
   537                        ;#define DBGLOG_LEVEL 0
   538                        ;
   539                        ;#include "dbglog.h"
   540                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\dbglog.h",0
   541                        	.line	99
   542                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",45
   543                        ;
   544                        ;/* ----------------------------------------------
                    --------------------------- */
   545                        ;
   546                        ;UMM_H_ATTPACKPRE typedef struct umm_ptr_t
   547                        ;{
   548                        ;	unsigned long next;
   549                        ;	unsigned long prev;
   550                        ;}UMM_H_ATTPACKSUF umm_ptr;
   551                        	.stag	umm_ptr_t,64,51
   552                        	.member	next,0,18,8,32
   553                        	.member	prev,32,18,8,32
   554                        	.eos
   555                        ;
   556                        ;UMM_H_ATTPACKPRE typedef struct umm_block_t
   557                        ;{
   558                        ;	union
   559                        ;	{
   560                        ;		umm_ptr used;
   561                        ;	} header;
   562                        	.utag	fake52_,64,52
   563                        	.member	used,0,10,11,64,51
   564                        	.eos
   565                        ;	union
   566                        ;	{
   567                        ;		umm_ptr free;
   568                        ;		unsigned char data[8];
   569                        ;	} body;
   570                        	.utag	fake53_,64,53
   571                        	.member	free,0,10,11,64,51
   572                        	.member	data,0,110,11,0,8
   573                        	.eos
   574                        ;}UMM_H_ATTPACKSUF umm_block;
   575                        	.stag	umm_block_t,128,54
   576                        	.member	header,0,11,8,64,52
   577                        	.member	body,64,11,8,64,53
   578                        	.eos
   579                        ;
   580                        ;#define UMM_FREELIST_MASK (0x8000)
   581                        ;#define UMM_BLOCKNO_MASK  (0x7FFF)
   582                        ;
   583                        ;/* ----------------------------------------------
                    --------------------------- */
   584                        ;
   585                        ;umm_block FAR *umm_heap = NULL;
   586                        	data
  Mon Aug  9 2021 16:52                                                Page 12


   587                        	xdef	~~umm_heap
   588                        ~~umm_heap:
   589 00:0000: 00 00 00 00  	dl	$0
   590 00:0004:              	ends
   591                        ;unsigned long umm_numblocks = 0;
   592                        	data
   593                        	xdef	~~umm_numblocks
   594                        ~~umm_numblocks:
   595 00:0004: 00 00 00 00  	dl	$0
   596 00:0008:              	ends
   597                        ;
   598                        ;#define UMM_NUMBLOCKS (umm_numblocks)
   599                        ;
   600                        ;/* ----------------------------------------------
                    -------------------------- */
   601                        ;
   602                        ;#define UMM_BLOCK(b)  (umm_heap[b])
   603                        ;
   604                        ;#define UMM_NBLOCK(b) (UMM_BLOCK(b).header.used.n
                    ext)
   605                        ;#define UMM_PBLOCK(b) (UMM_BLOCK(b).header.used.p
                    rev)
   606                        ;#define UMM_NFREE(b)  (UMM_BLOCK(b).body.free.nex
                    t)
   607                        ;#define UMM_PFREE(b)  (UMM_BLOCK(b).body.free.pre
                    v)
   608                        ;#define UMM_DATA(b)   (UMM_BLOCK(b).body.data)
   609                        ;
   610                        ;/* ----------------------------------------------
                    ---------------------------
   611                        ; * There are additional files that may be include
                    d here - normally it's
   612                        ; * not a good idea to include .c files but in thi
                    s case it keeps the
   613                        ; * main umm_malloc file clear and prevents issues
                     with exposing internal
   614                        ; * data structures to other programs.
   615                        ; * ----------------------------------------------
                    ---------------------------
   616                        ; */
   617                        ;
   618                        ;#include "umm_integrity.c"
   619                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_integrity.c",0
   620                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   621                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   622                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   623                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   624                        	.line	88
   625                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   626                        	.stag	fake55_,32,55
   627                        	.member	quot,0,5,8,16
   628                        	.member	rem,16,5,8,16
  Mon Aug  9 2021 16:52                                                Page 13


   629                        	.eos
   630                        	.stag	fake56_,64,56
   631                        	.member	quot,0,7,8,32
   632                        	.member	rem,32,7,8,32
   633                        	.eos
   634                        	.stag	int_sqrt,32,57
   635                        	.member	sqrt,0,16,8,16
   636                        	.member	frac,16,16,8,16
   637                        	.eos
   638                        	.line	205
   639                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",4
   640                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   641                        	.line	134
   642                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",5
   643                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   644                        	.line	103
   645                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",6
   646                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   647                        	.line	1064
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",8
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstringtable.h",0
   650                        	.line	90
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",9
   652                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   653                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   654                        	.line	1064
   655                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",5
   656                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",0
   657                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   658                        	.line	1064
   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",11
   660                        	.line	72
   661                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",6
   662                        	.line	1960
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",16
   664                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   665                        	.line	490
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",22
   667                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Mon Aug  9 2021 16:52                                                Page 14


                    space\FXOS-Beta\src\fxconsole.h",0
   668                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   669                        	.line	134
   670                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",5
   671                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   672                        	.line	205
   673                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",6
   674                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   675                        	.line	1064
   676                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",7
   677                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   678                        	.line	1960
   679                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",12
   680                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   681                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   682                        	.line	205
   683                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",5
   684                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   685                        	.line	134
   686                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",6
   687                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   688                        	.line	1064
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",7
   690                        	.stag	_fx_string,64,58
   691                        	.member	size,0,16,8,16
   692                        	.member	pos,16,5,8,16
   693                        	.member	buffer,32,142,8,32
   694                        	.eos
   695                        	.line	141
   696                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",17
   697                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   698                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   699                        	.line	30
   700                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",5
   701                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   702                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   703                        	.line	1064
  Mon Aug  9 2021 16:52                                                Page 15


   704                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",5
   705                        	.stag	_fxos_executive_vtable,128,59
   706                        	.member	Init,0,8833,8,32
   707                        	.member	Configure,32,656,8,32
   708                        	.member	Query,64,656,8,32
   709                        	.member	Uninit,96,641,8,32
   710                        	.eos
   711                        	.line	86
   712                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",6
   713                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   714                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   715                        	.line	1064
   716                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",11
   717                        	.line	118
   718                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",7
   719                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   720                        	.line	208
   721                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",8
   722                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
   723                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   724                        	.line	30
   725                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",5
   726                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
   727                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   728                        	.line	30
   729                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",5
   730                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   731                        	.line	199
   732                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",6
   733                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
   734                        	.line	24
   735                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",7
   736                        	.stag	_fx_memory_map,2072,60
   737                        	.member	availableMemory,0,18,8,32
   738                        	.member	valid_segments,32,110,8,0,255
   739                        	.eos
   740                        	.stag	_fx_ipc_port,144,61
   741                        	.member	id,0,18,8,32
   742                        	.member	type,32,14,8,8
   743                        	.member	name,40,138,8,32,58
  Mon Aug  9 2021 16:52                                                Page 16


   744                        	.member	time,72,18,8,32
   745                        	.member	queue,104,138,8,32,5
   746                        	.member	reserved_1,136,14,8,8
   747                        	.eos
   748                        	.stag	_k_mem_alloc_header,80,62
   749                        	.member	user,0,14,8,8
   750                        	.member	attr,8,14,8,8
   751                        	.member	size,16,18,8,32
   752                        	.member	virtual,48,129,8,32
   753                        	.eos
   754                        	.line	129
   755                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",6
   756                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   757                        	.line	568
   758                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",7
   759                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
   760                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",0
   761                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   762                        	.line	1064
   763                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",6
   764                        	.line	74
   765                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",5
   766                        	.stag	_click_detected,64,63
   767                        	.member	window,0,138,8,32,31
   768                        	.member	handler,32,641,8,32
   769                        	.eos
   770                        	.stag	_current_palette_map,400,64
   771                        	.member	CUR_DESKTOP,0,5,8,16
   772                        	.member	CUR_BACKGROUND,16,5,8,16
   773                        	.member	CUR_FONT,32,5,8,16
   774                        	.member	CUR_SELECTED_FONT,48,5,8,16
   775                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   776                        	.member	CUR_WINDOWFRAME,80,5,8,16
   777                        	.member	CUR_WINDOWBORDER,96,5,8,16
   778                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   779                        	.member	CUR_MENU,128,5,8,16
   780                        	.member	CUR_GADGET,144,5,8,16
   781                        	.member	CUR_COLOR,160,101,8,0,15
   782                        	.eos
   783                        	.line	359
   784                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",8
   785                        	.stag	_fxos_winman_vtable,160,65
   786                        	.member	Events,0,641,8,32
   787                        	.member	ConfigureWindowManager,32,656,8,32
   788                        	.member	ProcessWindowEvent,64,8833,8,32
   789                        	.member	QueryWindowManager,96,656,8,32
   790                        	.member	DoWndProcs,128,641,8,32
   791                        	.eos
   792                        	.stag	fake66_,64,66
  Mon Aug  9 2021 16:52                                                Page 17


   793                        	.member	type,0,16,8,16
   794                        	.member	size,16,16,8,16
   795                        	.member	desktopAction,32,129,8,32
   796                        	.eos
   797                        	.stag	fake67_,96,67
   798                        	.member	type,0,16,8,16
   799                        	.member	caption,16,138,8,32,58
   800                        	.member	buttonType,48,16,8,16
   801                        	.member	x,64,5,8,16
   802                        	.member	y,80,5,8,16
   803                        	.eos
   804                        	.stag	_childMessage_t,64,68
   805                        	.member	msgType,0,16,8,16
   806                        	.member	msgData,16,129,8,32
   807                        	.member	dataSize,48,16,8,16
   808                        	.eos
   809                        	.line	594
   810                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",9
   811                        	.stag	_fx_main_loopvars,16,69
   812                        	.member	dummy,0,5,8,16
   813                        	.eos
   814                        	.stag	_fxMouseMessageData,64,70
   815                        	.member	button1,0,14,8,8
   816                        	.member	button2,8,14,8,8
   817                        	.member	button3,16,14,8,8
   818                        	.member	button4,24,14,8,8
   819                        	.member	x,32,16,8,16
   820                        	.member	y,48,16,8,16
   821                        	.eos
   822                        	.utag	marshalled_data,32,71
   823                        	.member	byteValue,0,14,11,8
   824                        	.member	verbValue,0,110,11,0,2
   825                        	.member	intValue,0,16,11,16
   826                        	.member	longValue,0,18,11,32
   827                        	.member	pointerValue,0,129,11,32
   828                        	.eos
   829                        	.stag	_fx_eventProcess,64,72
   830                        	.member	process,0,138,8,32,18
   831                        	.member	eventProc,32,641,8,32
   832                        	.eos
   833                        	.stag	_mouse_msg_state,184,73
   834                        	.member	lastEvent,0,18,8,32
   835                        	.member	buttonLeftDown,32,14,8,8
   836                        	.member	lastLeftDown,40,18,8,32
   837                        	.member	buttonRightDown,72,14,8,8
   838                        	.member	lastRightDown,80,18,8,32
   839                        	.member	buttonMiddleDown,112,14,8,8
   840                        	.member	lastMiddleDown,120,18,8,32
   841                        	.member	lastX,152,16,8,16
   842                        	.member	lastY,168,16,8,16
   843                        	.eos
   844                        	.stag	_fxos_eventmanager_vtable,192,74
   845                        	.member	EventQueue,0,138,8,32,5
   846                        	.member	Init,32,8833,8,32
   847                        	.member	Run,64,656,8,32
   848                        	.member	Configure,96,656,8,32
   849                        	.member	Query,128,656,8,32
  Mon Aug  9 2021 16:52                                                Page 18


   850                        	.member	Uninit,160,641,8,32
   851                        	.eos
   852                        	.stag	_k_clipboard_data,168,75
   853                        	.member	type,0,14,8,8
   854                        	.member	readable,8,110,8,0,16
   855                        	.member	data,136,129,8,32
   856                        	.eos
   857                        	.line	568
   858                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",18
   859                        	.stag	_fx_spinner_ctx,48,76
   860                        	.member	index,0,5,8,16
   861                        	.member	spinner,16,142,8,32
   862                        	.eos
   863                        	.stag	_fx_console_ctx,1144,77
   864                        	.member	lineBufferIndex,0,5,8,16
   865                        	.member	lineBuffer,16,110,8,0,128
   866                        	.member	isShifted,1040,14,8,8
   867                        	.member	userData,1048,129,8,32
   868                        	.member	screenBuffer,1080,129,8,32
   869                        	.member	Reserved1,1112,129,8,32
   870                        	.eos
   871                        	.stag	_token,64,78
   872                        	.member	type,0,5,8,16
   873                        	.member	depth,16,16,8,16
   874                        	.member	text,32,142,8,32
   875                        	.eos
   876                        	.stag	_command_args,64,79
   877                        	.member	proc,0,656,8,32
   878                        	.member	tokens,32,138,8,32,3
   879                        	.eos
   880                        	.line	208
   881                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",23
   882                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   883                        	.line	141
   884                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",24
   885                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   886                        	.line	118
   887                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",25
   888                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",0
   889                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ffconf.h",0
   890                        	.line	298
   891                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",29
   892                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   893                        	.line	1064
   894                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff/ff.h",30
   895                        	.stag	fake80_,4504,80
   896                        	.member	fs_type,0,14,8,8
  Mon Aug  9 2021 16:52                                                Page 19


   897                        	.member	pdrv,8,14,8,8
   898                        	.member	n_fats,16,14,8,8
   899                        	.member	wflag,24,14,8,8
   900                        	.member	fsi_flag,32,14,8,8
   901                        	.member	id,40,5,8,16
   902                        	.member	n_rootdir,56,5,8,16
   903                        	.member	csize,72,5,8,16
   904                        	.member	lfnbuf,88,144,8,32
   905                        	.member	last_clst,120,18,8,32
   906                        	.member	free_clst,152,18,8,32
   907                        	.member	n_fatent,184,18,8,32
   908                        	.member	fsize,216,18,8,32
   909                        	.member	volbase,248,18,8,32
   910                        	.member	fatbase,280,18,8,32
   911                        	.member	dirbase,312,18,8,32
   912                        	.member	database,344,18,8,32
   913                        	.member	winsect,376,18,8,32
   914                        	.member	win,408,110,8,0,512
   915                        	.eos
   916                        	.stag	fake81_,128,81
   917                        	.member	fs,0,138,8,32,80
   918                        	.member	id,32,5,8,16
   919                        	.member	attr,48,14,8,8
   920                        	.member	stat,56,14,8,8
   921                        	.member	sclust,64,18,8,32
   922                        	.member	objsize,96,18,8,32
   923                        	.eos
   924                        	.stag	fake82_,4400,82
   925                        	.member	obj,0,10,8,128,81
   926                        	.member	flag,128,14,8,8
   927                        	.member	err,136,14,8,8
   928                        	.member	fptr,144,18,8,32
   929                        	.member	clust,176,18,8,32
   930                        	.member	sect,208,18,8,32
   931                        	.member	dir_sect,240,18,8,32
   932                        	.member	dir_ptr,272,142,8,32
   933                        	.member	buf,304,110,8,0,512
   934                        	.eos
   935                        	.stag	fake83_,416,83
   936                        	.member	obj,0,10,8,128,81
   937                        	.member	dptr,128,18,8,32
   938                        	.member	clust,160,18,8,32
   939                        	.member	sect,192,18,8,32
   940                        	.member	dir,224,142,8,32
   941                        	.member	fn,256,110,8,0,12
   942                        	.member	blk_ofs,352,18,8,32
   943                        	.member	pat,384,142,8,32
   944                        	.eos
   945                        	.stag	fake84_,2224,84
   946                        	.member	fsize,0,18,8,32
   947                        	.member	fdate,32,5,8,16
   948                        	.member	ftime,48,5,8,16
   949                        	.member	fattrib,64,14,8,8
   950                        	.member	altname,72,110,8,0,13
   951                        	.member	fname,176,110,8,0,256
   952                        	.eos
   953                        	.stag	fake85_,80,85
   954                        	.member	fmt,0,14,8,8
  Mon Aug  9 2021 16:52                                                Page 20


   955                        	.member	n_fat,8,14,8,8
   956                        	.member	align,16,16,8,16
   957                        	.member	n_root,32,16,8,16
   958                        	.member	au_size,48,18,8,32
   959                        	.eos
   960                        	.line	429
   961                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",26
   962                        	.line	30
   963                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",5
   964                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   965                        	.line	118
   966                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",6
   967                        	.stag	_fx_api_call_table,8192,86
   968                        	.member	call_table,0,1121,8,32,256
   969                        	.eos
   970                        	.stag	_fx_zero_page_irq_data,32,87
   971                        	.member	data,0,110,8,0,4
   972                        	.eos
   973                        	.stag	_fx_zero_page,720,88
   974                        	.member	fxos_mouse_byte_0,0,14,8,8
   975                        	.member	fxos_mouse_byte_1,8,14,8,8
   976                        	.member	fxos_mouse_byte_2,16,14,8,8
   977                        	.member	fxos_mouse_byte_t,24,14,8,8
   978                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   979                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   980                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   981                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   982                        	.member	fxos_key_byte_0,64,14,8,8
   983                        	.member	fxos_key_byte_1,72,14,8,8
   984                        	.member	fxos_key_byte_2,80,14,8,8
   985                        	.member	fxos_mouse_ctl,88,14,8,8
   986                        	.member	fxos_mouse_index,96,14,8,8
   987                        	.member	fxos_mouse_status,104,14,8,8
   988                        	.member	Endianness,112,16,8,16
   989                        	.member	VersionMajor,128,16,8,16
   990                        	.member	VersionMinor,144,16,8,16
   991                        	.member	VersionRelease,160,16,8,16
   992                        	.member	topMemory,176,18,8,32
   993                        	.member	bottomMemory,208,18,8,32
   994                        	.member	availableMemory,240,18,8,32
   995                        	.member	availableMemoryK,272,18,8,32
   996                        	.member	availableHeapMemory,304,18,8,32
   997                        	.member	availableHeapMemoryK,336,18,8,32
   998                        	.member	fxos_console_row,368,16,8,16
   999                        	.member	fxos_console_col,384,16,8,16
  1000                        	.member	executive,400,129,8,32
  1001                        	.member	eventmanager,432,129,8,32
  1002                        	.member	devicemanager,464,129,8,32
  1003                        	.member	windowmanager,496,129,8,32
  1004                        	.member	fxos_kernel_api,528,138,8,32,86
  1005                        	.member	fxos_dos_api,560,138,8,32,86
  1006                        	.member	fxos_gfx_api,592,138,8,32,86
  1007                        	.member	fxos_gui_api,624,138,8,32,86
  1008                        	.member	fxos_con_api,656,138,8,32,86
  Mon Aug  9 2021 16:52                                                Page 21


  1009                        	.member	fxos_reserved_2_api,688,138,8,32,86
  1010                        	.eos
  1011                        	.stag	_fx_environment,96,89
  1012                        	.member	variables,0,142,8,32
  1013                        	.member	reserved1,32,5,8,16
  1014                        	.member	reserved2,48,5,8,16
  1015                        	.member	reserved3,64,5,8,16
  1016                        	.member	reserved4,80,5,8,16
  1017                        	.eos
  1018                        	.stag	_debug_byte_bits,8,90
  1019                        	.member	bit7,0,14,17,1
  1020                        	.member	bit6,1,14,17,1
  1021                        	.member	bit5,2,14,17,1
  1022                        	.member	bit4,3,14,17,1
  1023                        	.member	bit3,4,14,17,1
  1024                        	.member	bit2,5,14,17,1
  1025                        	.member	bit1,6,14,17,1
  1026                        	.member	bit0,7,14,17,1
  1027                        	.eos
  1028                        	.stag	_k_segmentheader,160,91
  1029                        	.member	version_major,0,14,8,8
  1030                        	.member	version_minor,8,14,8,8
  1031                        	.member	length,16,5,8,16
  1032                        	.member	segment_start_addr,32,7,8,32
  1033                        	.member	segment_end_addr,64,7,8,32
  1034                        	.member	segment_size,96,7,8,32
  1035                        	.member	main_entry_addr,128,7,8,32
  1036                        	.eos
  1037                        	.stag	_fx_device_driver,776,92
  1038                        	.member	name,0,110,8,0,32
  1039                        	.member	version,256,110,8,0,16
  1040                        	.member	hmajor,384,110,8,0,8
  1041                        	.member	hminor,448,110,8,0,8
  1042                        	.member	type,512,14,8,8
  1043                        	.member	designation,520,110,8,0,6
  1044                        	.member	irq_ctl,568,16,8,16
  1045                        	.member	f_driver_irq,584,129,8,32
  1046                        	.member	driver_context,616,129,8,32
  1047                        	.member	f_driver_load,648,129,8,32
  1048                        	.member	f_driver_read,680,129,8,32
  1049                        	.member	f_driver_write,712,129,8,32
  1050                        	.member	f_driver_unload,744,129,8,32
  1051                        	.eos
  1052                        	.stag	_fx_block_device_driver,808,93
  1053                        	.member	name,0,110,8,0,32
  1054                        	.member	version,256,110,8,0,16
  1055                        	.member	hmajor,384,110,8,0,8
  1056                        	.member	hminor,448,110,8,0,8
  1057                        	.member	type,512,14,8,8
  1058                        	.member	designation,520,110,8,0,6
  1059                        	.member	irq_ctl,568,16,8,16
  1060                        	.member	f_driver_irq,584,129,8,32
  1061                        	.member	driver_context,616,129,8,32
  1062                        	.member	f_driver_load,648,129,8,32
  1063                        	.member	f_driver_read,680,129,8,32
  1064                        	.member	f_driver_write,712,129,8,32
  1065                        	.member	f_driver_unload,744,129,8,32
  1066                        	.member	f_driver_command,776,129,8,32
  Mon Aug  9 2021 16:52                                                Page 22


  1067                        	.eos
  1068                        	.stag	_k_irq_chain,128,94
  1069                        	.member	handlers,0,5217,8,32,4
  1070                        	.eos
  1071                        	.line	490
  1072                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_integrity.c",1
  1073                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_integrity.c",27
  1074                        	.line	28
  1075                        	code
  1076                        	xdef	~~umm_integrity_check
  1077                        	func
  1078                        	.function	28
  1079                        ~~umm_integrity_check:
  1080                        	longa	on
  1081                        	longi	on
  1082 00:0000: 3B           	tsc
  1083 00:0001: 38           	sec
  1084 00:0002: E9 16 00     	sbc	#L2
  1085 00:0005: 1B           	tcs
  1086 00:0006: 0B           	phd
  1087 00:0007: 5B           	tcd
  1088             00000004   ppaddress_0	set	4
  1089                        	.block	28
  1090             00000000   ok_1	set	0
  1091             00000002   prev_1	set	2
  1092             00000006   cur_1	set	6
  1093                        	.sym	ok,0,5,1,16
  1094                        	.sym	prev,2,18,1,32
  1095                        	.sym	cur,6,18,1,32
  1096                        	.sym	ppaddress,4,1153,6,32
  1097 00:0008: A9 01 00     	lda	#$1
  1098 00:000B: 85 0D        	sta	<L3+ok_1
  1099                        	.line	36
  1100 00:000D: AD xx xx     	lda	|~~umm_heap
  1101 00:0010: 0D xx xx     	ora	|~~umm_heap+2
  1102 00:0013: F0 03        	beq	L5
  1103 00:0015: 82 04 00     	brl	L10001
  1104                        L5:
  1105                        	.line	37
  1106                        	.line	38
  1107 00:0018: 22 xx xx xx  	jsl	~~umm_init
  1108                        	.line	39
  1109                        L10001:
  1110                        	.line	42
  1111 00:001C: 64 0F        	stz	<L3+prev_1
  1112 00:001E: 64 11        	stz	<L3+prev_1+2
  1113                        	.line	43
  1114                        L10002:
  1115                        	.line	44
  1116                        	.line	45
  1117 00:0020: A5 0F        	lda	<L3+prev_1
  1118 00:0022: 85 01        	sta	<R0
  1119 00:0024: A5 11        	lda	<L3+prev_1+2
  1120 00:0026: 85 03        	sta	<R0+2
  1121 00:0028: 06 01        	asl	<R0
  1122 00:002A: 26 03        	rol	<R0+2
  Mon Aug  9 2021 16:52                                                Page 23


  1123 00:002C: 06 01        	asl	<R0
  1124 00:002E: 26 03        	rol	<R0+2
  1125 00:0030: 06 01        	asl	<R0
  1126 00:0032: 26 03        	rol	<R0+2
  1127 00:0034: 06 01        	asl	<R0
  1128 00:0036: 26 03        	rol	<R0+2
  1129 00:0038: 18           	clc
  1130 00:0039: A9 08 00     	lda	#$8
  1131 00:003C: 6D xx xx     	adc	|~~umm_heap
  1132 00:003F: 85 05        	sta	<R1
  1133 00:0041: A9 00 00     	lda	#$0
  1134 00:0044: 6D xx xx     	adc	|~~umm_heap+2
  1135 00:0047: 85 07        	sta	<R1+2
  1136 00:0049: 18           	clc
  1137 00:004A: A5 05        	lda	<R1
  1138 00:004C: 65 01        	adc	<R0
  1139 00:004E: 85 09        	sta	<R2
  1140 00:0050: A5 07        	lda	<R1+2
  1141 00:0052: 65 03        	adc	<R0+2
  1142 00:0054: 85 0B        	sta	<R2+2
  1143 00:0056: A7 09        	lda	[<R2]
  1144 00:0058: 85 13        	sta	<L3+cur_1
  1145 00:005A: A0 02 00     	ldy	#$2
  1146 00:005D: B7 09        	lda	[<R2],Y
  1147 00:005F: 85 15        	sta	<L3+cur_1+2
  1148                        	.line	48
  1149 00:0061: A5 13        	lda	<L3+cur_1
  1150 00:0063: CD xx xx     	cmp	|~~umm_numblocks
  1151 00:0066: A5 15        	lda	<L3+cur_1+2
  1152 00:0068: ED xx xx     	sbc	|~~umm_numblocks+2
  1153 00:006B: B0 03        	bcs	L6
  1154 00:006D: 82 45 00     	brl	L10004
  1155                        L6:
  1156                        	.line	49
  1157                        	.line	53
  1158 00:0070: D4 15        	pei	<L3+cur_1+2
  1159 00:0072: D4 13        	pei	<L3+cur_1
  1160 00:0074: F4 xx xx     	pea	#^L1
  1161 00:0077: F4 xx xx     	pea	#<L1
  1162 00:007A: 22 xx xx xx  	jsl	~~k_debug_long
  1163                        	.line	55
  1164 00:007E: A5 13        	lda	<L3+cur_1
  1165 00:0080: 85 01        	sta	<R0
  1166 00:0082: A5 15        	lda	<L3+cur_1+2
  1167 00:0084: 85 03        	sta	<R0+2
  1168 00:0086: 06 01        	asl	<R0
  1169 00:0088: 26 03        	rol	<R0+2
  1170 00:008A: 06 01        	asl	<R0
  1171 00:008C: 26 03        	rol	<R0+2
  1172 00:008E: 06 01        	asl	<R0
  1173 00:0090: 26 03        	rol	<R0+2
  1174 00:0092: 06 01        	asl	<R0
  1175 00:0094: 26 03        	rol	<R0+2
  1176 00:0096: 18           	clc
  1177 00:0097: AD xx xx     	lda	|~~umm_heap
  1178 00:009A: 65 01        	adc	<R0
  1179 00:009C: 85 05        	sta	<R1
  1180 00:009E: AD xx xx     	lda	|~~umm_heap+2
  Mon Aug  9 2021 16:52                                                Page 24


  1181 00:00A1: 65 03        	adc	<R0+2
  1182 00:00A3: 85 07        	sta	<R1+2
  1183 00:00A5: A5 05        	lda	<R1
  1184 00:00A7: 87 1A        	sta	[<L2+ppaddress_0]
  1185 00:00A9: A5 07        	lda	<R1+2
  1186 00:00AB: A0 02 00     	ldy	#$2
  1187 00:00AE: 97 1A        	sta	[<L2+ppaddress_0],Y
  1188                        	.line	57
  1189 00:00B0: 64 0D        	stz	<L3+ok_1
  1190                        	.line	58
  1191 00:00B2: 82 5D 04     	brl	L10005
  1192                        	.line	59
  1193                        L10004:
  1194                        	.line	60
  1195 00:00B5: A5 13        	lda	<L3+cur_1
  1196 00:00B7: 05 15        	ora	<L3+cur_1+2
  1197 00:00B9: F0 03        	beq	L7
  1198 00:00BB: 82 03 00     	brl	L10006
  1199                        L7:
  1200                        	.line	61
  1201                        	.line	63
  1202 00:00BE: 82 D5 00     	brl	L10003
  1203                        	.line	64
  1204                        L10006:
  1205                        	.line	67
  1206 00:00C1: A5 13        	lda	<L3+cur_1
  1207 00:00C3: 85 01        	sta	<R0
  1208 00:00C5: A5 15        	lda	<L3+cur_1+2
  1209 00:00C7: 85 03        	sta	<R0+2
  1210 00:00C9: 06 01        	asl	<R0
  1211 00:00CB: 26 03        	rol	<R0+2
  1212 00:00CD: 06 01        	asl	<R0
  1213 00:00CF: 26 03        	rol	<R0+2
  1214 00:00D1: 06 01        	asl	<R0
  1215 00:00D3: 26 03        	rol	<R0+2
  1216 00:00D5: 06 01        	asl	<R0
  1217 00:00D7: 26 03        	rol	<R0+2
  1218 00:00D9: 18           	clc
  1219 00:00DA: A9 0C 00     	lda	#$c
  1220 00:00DD: 6D xx xx     	adc	|~~umm_heap
  1221 00:00E0: 85 05        	sta	<R1
  1222 00:00E2: A9 00 00     	lda	#$0
  1223 00:00E5: 6D xx xx     	adc	|~~umm_heap+2
  1224 00:00E8: 85 07        	sta	<R1+2
  1225 00:00EA: 18           	clc
  1226 00:00EB: A5 05        	lda	<R1
  1227 00:00ED: 65 01        	adc	<R0
  1228 00:00EF: 85 09        	sta	<R2
  1229 00:00F1: A5 07        	lda	<R1+2
  1230 00:00F3: 65 03        	adc	<R0+2
  1231 00:00F5: 85 0B        	sta	<R2+2
  1232 00:00F7: A7 09        	lda	[<R2]
  1233 00:00F9: C5 0F        	cmp	<L3+prev_1
  1234 00:00FB: D0 07        	bne	L8
  1235 00:00FD: A0 02 00     	ldy	#$2
  1236 00:0100: B7 09        	lda	[<R2],Y
  1237 00:0102: C5 11        	cmp	<L3+prev_1+2
  1238                        L8:
  Mon Aug  9 2021 16:52                                                Page 25


  1239 00:0104: D0 03        	bne	L9
  1240 00:0106: 82 45 00     	brl	L10007
  1241                        L9:
  1242                        	.line	68
  1243                        	.line	72
  1244 00:0109: D4 15        	pei	<L3+cur_1+2
  1245 00:010B: D4 13        	pei	<L3+cur_1
  1246 00:010D: F4 xx xx     	pea	#^L1+48
  1247 00:0110: F4 xx xx     	pea	#<L1+48
  1248 00:0113: 22 xx xx xx  	jsl	~~k_debug_long
  1249                        	.line	73
  1250 00:0117: A5 13        	lda	<L3+cur_1
  1251 00:0119: 85 01        	sta	<R0
  1252 00:011B: A5 15        	lda	<L3+cur_1+2
  1253 00:011D: 85 03        	sta	<R0+2
  1254 00:011F: 06 01        	asl	<R0
  1255 00:0121: 26 03        	rol	<R0+2
  1256 00:0123: 06 01        	asl	<R0
  1257 00:0125: 26 03        	rol	<R0+2
  1258 00:0127: 06 01        	asl	<R0
  1259 00:0129: 26 03        	rol	<R0+2
  1260 00:012B: 06 01        	asl	<R0
  1261 00:012D: 26 03        	rol	<R0+2
  1262 00:012F: 18           	clc
  1263 00:0130: AD xx xx     	lda	|~~umm_heap
  1264 00:0133: 65 01        	adc	<R0
  1265 00:0135: 85 05        	sta	<R1
  1266 00:0137: AD xx xx     	lda	|~~umm_heap+2
  1267 00:013A: 65 03        	adc	<R0+2
  1268 00:013C: 85 07        	sta	<R1+2
  1269 00:013E: A5 05        	lda	<R1
  1270 00:0140: 87 1A        	sta	[<L2+ppaddress_0]
  1271 00:0142: A5 07        	lda	<R1+2
  1272 00:0144: A0 02 00     	ldy	#$2
  1273 00:0147: 97 1A        	sta	[<L2+ppaddress_0],Y
  1274                        	.line	75
  1275 00:0149: 64 0D        	stz	<L3+ok_1
  1276                        	.line	76
  1277 00:014B: 82 C4 03     	brl	L10005
  1278                        	.line	77
  1279                        L10007:
  1280                        	.line	79
  1281 00:014E: A5 13        	lda	<L3+cur_1
  1282 00:0150: 85 01        	sta	<R0
  1283 00:0152: A5 15        	lda	<L3+cur_1+2
  1284 00:0154: 85 03        	sta	<R0+2
  1285 00:0156: 06 01        	asl	<R0
  1286 00:0158: 26 03        	rol	<R0+2
  1287 00:015A: 06 01        	asl	<R0
  1288 00:015C: 26 03        	rol	<R0+2
  1289 00:015E: 06 01        	asl	<R0
  1290 00:0160: 26 03        	rol	<R0+2
  1291 00:0162: 06 01        	asl	<R0
  1292 00:0164: 26 03        	rol	<R0+2
  1293 00:0166: 18           	clc
  1294 00:0167: A9 04 00     	lda	#$4
  1295 00:016A: 65 01        	adc	<R0
  1296 00:016C: 85 05        	sta	<R1
  Mon Aug  9 2021 16:52                                                Page 26


  1297 00:016E: A9 00 00     	lda	#$0
  1298 00:0171: 65 03        	adc	<R0+2
  1299 00:0173: 85 07        	sta	<R1+2
  1300 00:0175: 18           	clc
  1301 00:0176: AD xx xx     	lda	|~~umm_heap
  1302 00:0179: 65 05        	adc	<R1
  1303 00:017B: 85 01        	sta	<R0
  1304 00:017D: AD xx xx     	lda	|~~umm_heap+2
  1305 00:0180: 65 07        	adc	<R1+2
  1306 00:0182: 85 03        	sta	<R0+2
  1307 00:0184: A7 01        	lda	[<R0]
  1308 00:0186: 09 00 80     	ora	#<$8000
  1309 00:0189: 87 01        	sta	[<R0]
  1310                        	.line	81
  1311 00:018B: A5 13        	lda	<L3+cur_1
  1312 00:018D: 85 0F        	sta	<L3+prev_1
  1313 00:018F: A5 15        	lda	<L3+cur_1+2
  1314 00:0191: 85 11        	sta	<L3+prev_1+2
  1315                        	.line	82
  1316 00:0193: 82 8A FE     	brl	L10002
  1317                        L10003:
  1318                        	.line	85
  1319 00:0196: 64 0F        	stz	<L3+prev_1
  1320 00:0198: 64 11        	stz	<L3+prev_1+2
  1321                        	.line	86
  1322                        L10008:
  1323                        	.line	87
  1324                        	.line	88
  1325 00:019A: A5 0F        	lda	<L3+prev_1
  1326 00:019C: 85 01        	sta	<R0
  1327 00:019E: A5 11        	lda	<L3+prev_1+2
  1328 00:01A0: 85 03        	sta	<R0+2
  1329 00:01A2: 06 01        	asl	<R0
  1330 00:01A4: 26 03        	rol	<R0+2
  1331 00:01A6: 06 01        	asl	<R0
  1332 00:01A8: 26 03        	rol	<R0+2
  1333 00:01AA: 06 01        	asl	<R0
  1334 00:01AC: 26 03        	rol	<R0+2
  1335 00:01AE: 06 01        	asl	<R0
  1336 00:01B0: 26 03        	rol	<R0+2
  1337 00:01B2: 18           	clc
  1338 00:01B3: AD xx xx     	lda	|~~umm_heap
  1339 00:01B6: 65 01        	adc	<R0
  1340 00:01B8: 85 05        	sta	<R1
  1341 00:01BA: AD xx xx     	lda	|~~umm_heap+2
  1342 00:01BD: 65 03        	adc	<R0+2
  1343 00:01BF: 85 07        	sta	<R1+2
  1344 00:01C1: A7 05        	lda	[<R1]
  1345 00:01C3: 29 FF 7F     	and	#<$7fff
  1346 00:01C6: 85 13        	sta	<L3+cur_1
  1347 00:01C8: 64 15        	stz	<L3+cur_1+2
  1348                        	.line	91
  1349 00:01CA: A5 13        	lda	<L3+cur_1
  1350 00:01CC: CD xx xx     	cmp	|~~umm_numblocks
  1351 00:01CF: A5 15        	lda	<L3+cur_1+2
  1352 00:01D1: ED xx xx     	sbc	|~~umm_numblocks+2
  1353 00:01D4: B0 03        	bcs	L10
  1354 00:01D6: 82 7A 00     	brl	L10010
  Mon Aug  9 2021 16:52                                                Page 27


  1355                        L10:
  1356                        	.line	92
  1357                        	.line	96
  1358 00:01D9: D4 15        	pei	<L3+cur_1+2
  1359 00:01DB: D4 13        	pei	<L3+cur_1
  1360 00:01DD: F4 xx xx     	pea	#^L1+95
  1361 00:01E0: F4 xx xx     	pea	#<L1+95
  1362 00:01E3: 22 xx xx xx  	jsl	~~k_debug_long
  1363                        	.line	97
  1364 00:01E7: A5 0F        	lda	<L3+prev_1
  1365 00:01E9: 85 01        	sta	<R0
  1366 00:01EB: A5 11        	lda	<L3+prev_1+2
  1367 00:01ED: 85 03        	sta	<R0+2
  1368 00:01EF: 06 01        	asl	<R0
  1369 00:01F1: 26 03        	rol	<R0+2
  1370 00:01F3: 06 01        	asl	<R0
  1371 00:01F5: 26 03        	rol	<R0+2
  1372 00:01F7: 06 01        	asl	<R0
  1373 00:01F9: 26 03        	rol	<R0+2
  1374 00:01FB: 06 01        	asl	<R0
  1375 00:01FD: 26 03        	rol	<R0+2
  1376 00:01FF: 18           	clc
  1377 00:0200: AD xx xx     	lda	|~~umm_heap
  1378 00:0203: 65 01        	adc	<R0
  1379 00:0205: 85 05        	sta	<R1
  1380 00:0207: AD xx xx     	lda	|~~umm_heap+2
  1381 00:020A: 65 03        	adc	<R0+2
  1382 00:020C: 85 07        	sta	<R1+2
  1383 00:020E: D4 07        	pei	<R1+2
  1384 00:0210: D4 05        	pei	<R1
  1385 00:0212: F4 xx xx     	pea	#^L1+144
  1386 00:0215: F4 xx xx     	pea	#<L1+144
  1387 00:0218: 22 xx xx xx  	jsl	~~k_debug_pointer
  1388                        	.line	99
  1389 00:021C: A5 0F        	lda	<L3+prev_1
  1390 00:021E: 85 01        	sta	<R0
  1391 00:0220: A5 11        	lda	<L3+prev_1+2
  1392 00:0222: 85 03        	sta	<R0+2
  1393 00:0224: 06 01        	asl	<R0
  1394 00:0226: 26 03        	rol	<R0+2
  1395 00:0228: 06 01        	asl	<R0
  1396 00:022A: 26 03        	rol	<R0+2
  1397 00:022C: 06 01        	asl	<R0
  1398 00:022E: 26 03        	rol	<R0+2
  1399 00:0230: 06 01        	asl	<R0
  1400 00:0232: 26 03        	rol	<R0+2
  1401 00:0234: 18           	clc
  1402 00:0235: AD xx xx     	lda	|~~umm_heap
  1403 00:0238: 65 01        	adc	<R0
  1404 00:023A: 85 05        	sta	<R1
  1405 00:023C: AD xx xx     	lda	|~~umm_heap+2
  1406 00:023F: 65 03        	adc	<R0+2
  1407 00:0241: 85 07        	sta	<R1+2
  1408 00:0243: A5 05        	lda	<R1
  1409 00:0245: 87 1A        	sta	[<L2+ppaddress_0]
  1410 00:0247: A5 07        	lda	<R1+2
  1411 00:0249: A0 02 00     	ldy	#$2
  1412 00:024C: 97 1A        	sta	[<L2+ppaddress_0],Y
  Mon Aug  9 2021 16:52                                                Page 28


  1413                        	.line	101
  1414 00:024E: 64 0D        	stz	<L3+ok_1
  1415                        	.line	102
  1416 00:0250: 82 BF 02     	brl	L10005
  1417                        	.line	103
  1418                        L10010:
  1419                        	.line	104
  1420 00:0253: A5 13        	lda	<L3+cur_1
  1421 00:0255: 05 15        	ora	<L3+cur_1+2
  1422 00:0257: F0 03        	beq	L11
  1423 00:0259: 82 03 00     	brl	L10011
  1424                        L11:
  1425                        	.line	105
  1426                        	.line	107
  1427 00:025C: 82 B3 02     	brl	L10009
  1428                        	.line	108
  1429                        L10011:
  1430                        	.line	111
  1431 00:025F: A5 13        	lda	<L3+cur_1
  1432 00:0261: 85 01        	sta	<R0
  1433 00:0263: A5 15        	lda	<L3+cur_1+2
  1434 00:0265: 85 03        	sta	<R0+2
  1435 00:0267: 06 01        	asl	<R0
  1436 00:0269: 26 03        	rol	<R0+2
  1437 00:026B: 06 01        	asl	<R0
  1438 00:026D: 26 03        	rol	<R0+2
  1439 00:026F: 06 01        	asl	<R0
  1440 00:0271: 26 03        	rol	<R0+2
  1441 00:0273: 06 01        	asl	<R0
  1442 00:0275: 26 03        	rol	<R0+2
  1443 00:0277: 18           	clc
  1444 00:0278: A9 04 00     	lda	#$4
  1445 00:027B: 6D xx xx     	adc	|~~umm_heap
  1446 00:027E: 85 05        	sta	<R1
  1447 00:0280: A9 00 00     	lda	#$0
  1448 00:0283: 6D xx xx     	adc	|~~umm_heap+2
  1449 00:0286: 85 07        	sta	<R1+2
  1450 00:0288: 18           	clc
  1451 00:0289: A5 05        	lda	<R1
  1452 00:028B: 65 01        	adc	<R0
  1453 00:028D: 85 09        	sta	<R2
  1454 00:028F: A5 07        	lda	<R1+2
  1455 00:0291: 65 03        	adc	<R0+2
  1456 00:0293: 85 0B        	sta	<R2+2
  1457 00:0295: A7 09        	lda	[<R2]
  1458 00:0297: 29 00 80     	and	#<$8000
  1459 00:029A: 85 01        	sta	<R0
  1460 00:029C: 64 03        	stz	<R0+2
  1461 00:029E: A5 13        	lda	<L3+cur_1
  1462 00:02A0: 85 05        	sta	<R1
  1463 00:02A2: A5 15        	lda	<L3+cur_1+2
  1464 00:02A4: 85 07        	sta	<R1+2
  1465 00:02A6: 06 05        	asl	<R1
  1466 00:02A8: 26 07        	rol	<R1+2
  1467 00:02AA: 06 05        	asl	<R1
  1468 00:02AC: 26 07        	rol	<R1+2
  1469 00:02AE: 06 05        	asl	<R1
  1470 00:02B0: 26 07        	rol	<R1+2
  Mon Aug  9 2021 16:52                                                Page 29


  1471 00:02B2: 06 05        	asl	<R1
  1472 00:02B4: 26 07        	rol	<R1+2
  1473 00:02B6: 18           	clc
  1474 00:02B7: AD xx xx     	lda	|~~umm_heap
  1475 00:02BA: 65 05        	adc	<R1
  1476 00:02BC: 85 09        	sta	<R2
  1477 00:02BE: AD xx xx     	lda	|~~umm_heap+2
  1478 00:02C1: 65 07        	adc	<R1+2
  1479 00:02C3: 85 0B        	sta	<R2+2
  1480 00:02C5: A7 09        	lda	[<R2]
  1481 00:02C7: 29 00 80     	and	#<$8000
  1482 00:02CA: 85 05        	sta	<R1
  1483 00:02CC: 64 07        	stz	<R1+2
  1484 00:02CE: A5 05        	lda	<R1
  1485 00:02D0: C5 01        	cmp	<R0
  1486 00:02D2: D0 04        	bne	L12
  1487 00:02D4: A5 07        	lda	<R1+2
  1488 00:02D6: C5 03        	cmp	<R0+2
  1489                        L12:
  1490 00:02D8: D0 03        	bne	L13
  1491 00:02DA: 82 6C 00     	brl	L10012
  1492                        L13:
  1493                        	.line	113
  1494                        	.line	119
  1495 00:02DD: A5 13        	lda	<L3+cur_1
  1496 00:02DF: 85 01        	sta	<R0
  1497 00:02E1: A5 15        	lda	<L3+cur_1+2
  1498 00:02E3: 85 03        	sta	<R0+2
  1499 00:02E5: 06 01        	asl	<R0
  1500 00:02E7: 26 03        	rol	<R0+2
  1501 00:02E9: 06 01        	asl	<R0
  1502 00:02EB: 26 03        	rol	<R0+2
  1503 00:02ED: 06 01        	asl	<R0
  1504 00:02EF: 26 03        	rol	<R0+2
  1505 00:02F1: 06 01        	asl	<R0
  1506 00:02F3: 26 03        	rol	<R0+2
  1507 00:02F5: 18           	clc
  1508 00:02F6: AD xx xx     	lda	|~~umm_heap
  1509 00:02F9: 65 01        	adc	<R0
  1510 00:02FB: 85 05        	sta	<R1
  1511 00:02FD: AD xx xx     	lda	|~~umm_heap+2
  1512 00:0300: 65 03        	adc	<R0+2
  1513 00:0302: 85 07        	sta	<R1+2
  1514 00:0304: D4 07        	pei	<R1+2
  1515 00:0306: D4 05        	pei	<R1
  1516 00:0308: F4 xx xx     	pea	#^L1+193
  1517 00:030B: F4 xx xx     	pea	#<L1+193
  1518 00:030E: 22 xx xx xx  	jsl	~~k_debug_pointer
  1519                        	.line	120
  1520 00:0312: A5 13        	lda	<L3+cur_1
  1521 00:0314: 85 01        	sta	<R0
  1522 00:0316: A5 15        	lda	<L3+cur_1+2
  1523 00:0318: 85 03        	sta	<R0+2
  1524 00:031A: 06 01        	asl	<R0
  1525 00:031C: 26 03        	rol	<R0+2
  1526 00:031E: 06 01        	asl	<R0
  1527 00:0320: 26 03        	rol	<R0+2
  1528 00:0322: 06 01        	asl	<R0
  Mon Aug  9 2021 16:52                                                Page 30


  1529 00:0324: 26 03        	rol	<R0+2
  1530 00:0326: 06 01        	asl	<R0
  1531 00:0328: 26 03        	rol	<R0+2
  1532 00:032A: 18           	clc
  1533 00:032B: AD xx xx     	lda	|~~umm_heap
  1534 00:032E: 65 01        	adc	<R0
  1535 00:0330: 85 05        	sta	<R1
  1536 00:0332: AD xx xx     	lda	|~~umm_heap+2
  1537 00:0335: 65 03        	adc	<R0+2
  1538 00:0337: 85 07        	sta	<R1+2
  1539 00:0339: A5 05        	lda	<R1
  1540 00:033B: 87 1A        	sta	[<L2+ppaddress_0]
  1541 00:033D: A5 07        	lda	<R1+2
  1542 00:033F: A0 02 00     	ldy	#$2
  1543 00:0342: 97 1A        	sta	[<L2+ppaddress_0],Y
  1544                        	.line	122
  1545 00:0344: 64 0D        	stz	<L3+ok_1
  1546                        	.line	123
  1547 00:0346: 82 C9 01     	brl	L10005
  1548                        	.line	124
  1549                        L10012:
  1550                        	.line	127
  1551 00:0349: A5 0F        	lda	<L3+prev_1
  1552 00:034B: C5 13        	cmp	<L3+cur_1
  1553 00:034D: A5 11        	lda	<L3+prev_1+2
  1554 00:034F: E5 15        	sbc	<L3+cur_1+2
  1555 00:0351: B0 03        	bcs	L14
  1556 00:0353: 82 88 00     	brl	L10013
  1557                        L14:
  1558                        	.line	128
  1559                        	.line	132
  1560 00:0356: D4 15        	pei	<L3+cur_1+2
  1561 00:0358: D4 13        	pei	<L3+cur_1
  1562 00:035A: F4 xx xx     	pea	#^L1+236
  1563 00:035D: F4 xx xx     	pea	#<L1+236
  1564 00:0360: 22 xx xx xx  	jsl	~~k_debug_long
  1565                        	.line	133
  1566 00:0364: D4 11        	pei	<L3+prev_1+2
  1567 00:0366: D4 0F        	pei	<L3+prev_1
  1568 00:0368: F4 xx xx     	pea	#^L1+294
  1569 00:036B: F4 xx xx     	pea	#<L1+294
  1570 00:036E: 22 xx xx xx  	jsl	~~k_debug_long
  1571                        	.line	134
  1572 00:0372: A5 0F        	lda	<L3+prev_1
  1573 00:0374: 85 01        	sta	<R0
  1574 00:0376: A5 11        	lda	<L3+prev_1+2
  1575 00:0378: 85 03        	sta	<R0+2
  1576 00:037A: 06 01        	asl	<R0
  1577 00:037C: 26 03        	rol	<R0+2
  1578 00:037E: 06 01        	asl	<R0
  1579 00:0380: 26 03        	rol	<R0+2
  1580 00:0382: 06 01        	asl	<R0
  1581 00:0384: 26 03        	rol	<R0+2
  1582 00:0386: 06 01        	asl	<R0
  1583 00:0388: 26 03        	rol	<R0+2
  1584 00:038A: 18           	clc
  1585 00:038B: AD xx xx     	lda	|~~umm_heap
  1586 00:038E: 65 01        	adc	<R0
  Mon Aug  9 2021 16:52                                                Page 31


  1587 00:0390: 85 05        	sta	<R1
  1588 00:0392: AD xx xx     	lda	|~~umm_heap+2
  1589 00:0395: 65 03        	adc	<R0+2
  1590 00:0397: 85 07        	sta	<R1+2
  1591 00:0399: D4 07        	pei	<R1+2
  1592 00:039B: D4 05        	pei	<R1
  1593 00:039D: F4 xx xx     	pea	#^L1+352
  1594 00:03A0: F4 xx xx     	pea	#<L1+352
  1595 00:03A3: 22 xx xx xx  	jsl	~~k_debug_pointer
  1596                        	.line	136
  1597 00:03A7: A5 0F        	lda	<L3+prev_1
  1598 00:03A9: 85 01        	sta	<R0
  1599 00:03AB: A5 11        	lda	<L3+prev_1+2
  1600 00:03AD: 85 03        	sta	<R0+2
  1601 00:03AF: 06 01        	asl	<R0
  1602 00:03B1: 26 03        	rol	<R0+2
  1603 00:03B3: 06 01        	asl	<R0
  1604 00:03B5: 26 03        	rol	<R0+2
  1605 00:03B7: 06 01        	asl	<R0
  1606 00:03B9: 26 03        	rol	<R0+2
  1607 00:03BB: 06 01        	asl	<R0
  1608 00:03BD: 26 03        	rol	<R0+2
  1609 00:03BF: 18           	clc
  1610 00:03C0: AD xx xx     	lda	|~~umm_heap
  1611 00:03C3: 65 01        	adc	<R0
  1612 00:03C5: 85 05        	sta	<R1
  1613 00:03C7: AD xx xx     	lda	|~~umm_heap+2
  1614 00:03CA: 65 03        	adc	<R0+2
  1615 00:03CC: 85 07        	sta	<R1+2
  1616 00:03CE: A5 05        	lda	<R1
  1617 00:03D0: 87 1A        	sta	[<L2+ppaddress_0]
  1618 00:03D2: A5 07        	lda	<R1+2
  1619 00:03D4: A0 02 00     	ldy	#$2
  1620 00:03D7: 97 1A        	sta	[<L2+ppaddress_0],Y
  1621                        	.line	138
  1622 00:03D9: 64 0D        	stz	<L3+ok_1
  1623                        	.line	139
  1624 00:03DB: 82 34 01     	brl	L10005
  1625                        	.line	140
  1626                        L10013:
  1627                        	.line	143
  1628 00:03DE: A5 13        	lda	<L3+cur_1
  1629 00:03E0: 85 01        	sta	<R0
  1630 00:03E2: A5 15        	lda	<L3+cur_1+2
  1631 00:03E4: 85 03        	sta	<R0+2
  1632 00:03E6: 06 01        	asl	<R0
  1633 00:03E8: 26 03        	rol	<R0+2
  1634 00:03EA: 06 01        	asl	<R0
  1635 00:03EC: 26 03        	rol	<R0+2
  1636 00:03EE: 06 01        	asl	<R0
  1637 00:03F0: 26 03        	rol	<R0+2
  1638 00:03F2: 06 01        	asl	<R0
  1639 00:03F4: 26 03        	rol	<R0+2
  1640 00:03F6: 18           	clc
  1641 00:03F7: A9 04 00     	lda	#$4
  1642 00:03FA: 65 01        	adc	<R0
  1643 00:03FC: 85 05        	sta	<R1
  1644 00:03FE: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 32


  1645 00:0401: 65 03        	adc	<R0+2
  1646 00:0403: 85 07        	sta	<R1+2
  1647 00:0405: 18           	clc
  1648 00:0406: AD xx xx     	lda	|~~umm_heap
  1649 00:0409: 65 05        	adc	<R1
  1650 00:040B: 85 01        	sta	<R0
  1651 00:040D: AD xx xx     	lda	|~~umm_heap+2
  1652 00:0410: 65 07        	adc	<R1+2
  1653 00:0412: 85 03        	sta	<R0+2
  1654 00:0414: A7 01        	lda	[<R0]
  1655 00:0416: 29 FF 7F     	and	#<$7fff
  1656 00:0419: 87 01        	sta	[<R0]
  1657 00:041B: A9 00 00     	lda	#$0
  1658 00:041E: A0 02 00     	ldy	#$2
  1659 00:0421: 97 01        	sta	[<R0],Y
  1660                        	.line	146
  1661 00:0423: A5 13        	lda	<L3+cur_1
  1662 00:0425: 85 01        	sta	<R0
  1663 00:0427: A5 15        	lda	<L3+cur_1+2
  1664 00:0429: 85 03        	sta	<R0+2
  1665 00:042B: 06 01        	asl	<R0
  1666 00:042D: 26 03        	rol	<R0+2
  1667 00:042F: 06 01        	asl	<R0
  1668 00:0431: 26 03        	rol	<R0+2
  1669 00:0433: 06 01        	asl	<R0
  1670 00:0435: 26 03        	rol	<R0+2
  1671 00:0437: 06 01        	asl	<R0
  1672 00:0439: 26 03        	rol	<R0+2
  1673 00:043B: 18           	clc
  1674 00:043C: A9 04 00     	lda	#$4
  1675 00:043F: 6D xx xx     	adc	|~~umm_heap
  1676 00:0442: 85 05        	sta	<R1
  1677 00:0444: A9 00 00     	lda	#$0
  1678 00:0447: 6D xx xx     	adc	|~~umm_heap+2
  1679 00:044A: 85 07        	sta	<R1+2
  1680 00:044C: 18           	clc
  1681 00:044D: A5 05        	lda	<R1
  1682 00:044F: 65 01        	adc	<R0
  1683 00:0451: 85 09        	sta	<R2
  1684 00:0453: A5 07        	lda	<R1+2
  1685 00:0455: 65 03        	adc	<R0+2
  1686 00:0457: 85 0B        	sta	<R2+2
  1687 00:0459: A7 09        	lda	[<R2]
  1688 00:045B: C5 0F        	cmp	<L3+prev_1
  1689 00:045D: D0 07        	bne	L15
  1690 00:045F: A0 02 00     	ldy	#$2
  1691 00:0462: B7 09        	lda	[<R2],Y
  1692 00:0464: C5 11        	cmp	<L3+prev_1+2
  1693                        L15:
  1694 00:0466: D0 03        	bne	L16
  1695 00:0468: 82 9C 00     	brl	L10014
  1696                        L16:
  1697                        	.line	147
  1698                        	.line	151
  1699 00:046B: D4 11        	pei	<L3+prev_1+2
  1700 00:046D: D4 0F        	pei	<L3+prev_1
  1701 00:046F: F4 xx xx     	pea	#^L1+410
  1702 00:0472: F4 xx xx     	pea	#<L1+410
  Mon Aug  9 2021 16:52                                                Page 33


  1703 00:0475: 22 xx xx xx  	jsl	~~k_debug_long
  1704                        	.line	152
  1705 00:0479: D4 15        	pei	<L3+cur_1+2
  1706 00:047B: D4 13        	pei	<L3+cur_1
  1707 00:047D: F4 xx xx     	pea	#^L1+464
  1708 00:0480: F4 xx xx     	pea	#<L1+464
  1709 00:0483: 22 xx xx xx  	jsl	~~k_debug_long
  1710                        	.line	153
  1711 00:0487: A5 13        	lda	<L3+cur_1
  1712 00:0489: 85 01        	sta	<R0
  1713 00:048B: A5 15        	lda	<L3+cur_1+2
  1714 00:048D: 85 03        	sta	<R0+2
  1715 00:048F: 06 01        	asl	<R0
  1716 00:0491: 26 03        	rol	<R0+2
  1717 00:0493: 06 01        	asl	<R0
  1718 00:0495: 26 03        	rol	<R0+2
  1719 00:0497: 06 01        	asl	<R0
  1720 00:0499: 26 03        	rol	<R0+2
  1721 00:049B: 06 01        	asl	<R0
  1722 00:049D: 26 03        	rol	<R0+2
  1723 00:049F: 18           	clc
  1724 00:04A0: A9 04 00     	lda	#$4
  1725 00:04A3: 6D xx xx     	adc	|~~umm_heap
  1726 00:04A6: 85 05        	sta	<R1
  1727 00:04A8: A9 00 00     	lda	#$0
  1728 00:04AB: 6D xx xx     	adc	|~~umm_heap+2
  1729 00:04AE: 85 07        	sta	<R1+2
  1730 00:04B0: 18           	clc
  1731 00:04B1: A5 05        	lda	<R1
  1732 00:04B3: 65 01        	adc	<R0
  1733 00:04B5: 85 09        	sta	<R2
  1734 00:04B7: A5 07        	lda	<R1+2
  1735 00:04B9: 65 03        	adc	<R0+2
  1736 00:04BB: 85 0B        	sta	<R2+2
  1737 00:04BD: A0 02 00     	ldy	#$2
  1738 00:04C0: B7 09        	lda	[<R2],Y
  1739 00:04C2: 48           	pha
  1740 00:04C3: A7 09        	lda	[<R2]
  1741 00:04C5: 48           	pha
  1742 00:04C6: F4 xx xx     	pea	#^L1+518
  1743 00:04C9: F4 xx xx     	pea	#<L1+518
  1744 00:04CC: 22 xx xx xx  	jsl	~~k_debug_long
  1745                        	.line	155
  1746 00:04D0: A5 13        	lda	<L3+cur_1
  1747 00:04D2: 85 01        	sta	<R0
  1748 00:04D4: A5 15        	lda	<L3+cur_1+2
  1749 00:04D6: 85 03        	sta	<R0+2
  1750 00:04D8: 06 01        	asl	<R0
  1751 00:04DA: 26 03        	rol	<R0+2
  1752 00:04DC: 06 01        	asl	<R0
  1753 00:04DE: 26 03        	rol	<R0+2
  1754 00:04E0: 06 01        	asl	<R0
  1755 00:04E2: 26 03        	rol	<R0+2
  1756 00:04E4: 06 01        	asl	<R0
  1757 00:04E6: 26 03        	rol	<R0+2
  1758 00:04E8: 18           	clc
  1759 00:04E9: AD xx xx     	lda	|~~umm_heap
  1760 00:04EC: 65 01        	adc	<R0
  Mon Aug  9 2021 16:52                                                Page 34


  1761 00:04EE: 85 05        	sta	<R1
  1762 00:04F0: AD xx xx     	lda	|~~umm_heap+2
  1763 00:04F3: 65 03        	adc	<R0+2
  1764 00:04F5: 85 07        	sta	<R1+2
  1765 00:04F7: A5 05        	lda	<R1
  1766 00:04F9: 87 1A        	sta	[<L2+ppaddress_0]
  1767 00:04FB: A5 07        	lda	<R1+2
  1768 00:04FD: A0 02 00     	ldy	#$2
  1769 00:0500: 97 1A        	sta	[<L2+ppaddress_0],Y
  1770                        	.line	157
  1771 00:0502: 64 0D        	stz	<L3+ok_1
  1772                        	.line	158
  1773 00:0504: 82 0B 00     	brl	L10005
  1774                        	.line	159
  1775                        L10014:
  1776                        	.line	161
  1777 00:0507: A5 13        	lda	<L3+cur_1
  1778 00:0509: 85 0F        	sta	<L3+prev_1
  1779 00:050B: A5 15        	lda	<L3+cur_1+2
  1780 00:050D: 85 11        	sta	<L3+prev_1+2
  1781                        	.line	162
  1782 00:050F: 82 88 FC     	brl	L10008
  1783                        L10009:
  1784                        	.line	164
  1785                        L10005:
  1786                        	.line	165
  1787 00:0512: A5 0D        	lda	<L3+ok_1
  1788 00:0514: F0 03        	beq	L17
  1789 00:0516: 82 0A 00     	brl	L10015
  1790                        L17:
  1791                        	.line	166
  1792                        	.line	167
  1793 00:0519: F4 xx xx     	pea	#^L1+572
  1794 00:051C: F4 xx xx     	pea	#<L1+572
  1795 00:051F: 22 xx xx xx  	jsl	~~k_debug_string
  1796                        	.line	168
  1797                        L10015:
  1798                        	.line	169
  1799 00:0523: A5 0D        	lda	<L3+ok_1
  1800                        L18:
  1801 00:0525: A8           	tay
  1802 00:0526: A5 18        	lda	<L2+2
  1803 00:0528: 85 1C        	sta	<L2+2+4
  1804 00:052A: A5 17        	lda	<L2+1
  1805 00:052C: 85 1B        	sta	<L2+1+4
  1806 00:052E: 2B           	pld
  1807 00:052F: 3B           	tsc
  1808 00:0530: 18           	clc
  1809 00:0531: 69 1A 00     	adc	#L2+4
  1810 00:0534: 1B           	tcs
  1811 00:0535: 98           	tya
  1812 00:0536: 6B           	rtl
  1813                        	.line	170
  1814                        	.endblock	170
  1815             00000016   L2	equ	22
  1816             0000000D   L3	equ	13
  1817                        	ends
  1818                        	efunc
  Mon Aug  9 2021 16:52                                                Page 35


  1819                        	.endfunc	170,13,22
  1820                        	.line	170
  1821                        	data
  1822                        L1:
  1823 00:0008: 68 65 61 70  	db	$68,$65,$61,$70,$20,$69,$6E,$74,$65,$67,
                    $72,$69,$74,$79,$20
       00:000C: 20 69 6E 74 
       00:0010: 65 67 72 69 
       00:0014: 74 79 20 
  1824 00:0017: 62 72 6F 6B  	db	$62,$72,$6F,$6B,$65,$6E,$3A,$20,$74,$6F,
                    $6F,$20,$6C,$61,$72
       00:001B: 65 6E 3A 20 
       00:001F: 74 6F 6F 20 
       00:0023: 6C 61 72 
  1825 00:0026: 67 65 20 6E  	db	$67,$65,$20,$6E,$65,$78,$74,$20,$66,$72,
                    $65,$65,$20,$6E,$75
       00:002A: 65 78 74 20 
       00:002E: 66 72 65 65 
       00:0032: 20 6E 75 
  1826 00:0035: 6D 3A 00 68  	db	$6D,$3A,$00,$68,$65,$61,$70,$20,$69,$6E,
                    $74,$65,$67,$72,$69
       00:0039: 65 61 70 20 
       00:003D: 69 6E 74 65 
       00:0041: 67 72 69 
  1827 00:0044: 74 79 20 62  	db	$74,$79,$20,$62,$72,$6F,$6B,$65,$6E,$3A,
                    $20,$66,$72,$65,$65
       00:0048: 72 6F 6B 65 
       00:004C: 6E 3A 20 66 
       00:0050: 72 65 65 
  1828 00:0053: 20 6C 69 6E  	db	$20,$6C,$69,$6E,$6B,$73,$20,$64,$6F,$6E,
                    $27,$74,$20,$6D,$61
       00:0057: 6B 73 20 64 
       00:005B: 6F 6E 27 74 
       00:005F: 20 6D 61 
  1829 00:0062: 74 63 68 3A  	db	$74,$63,$68,$3A,$00,$68,$65,$61,$70,$20,
                    $69,$6E,$74,$65,$67
       00:0066: 00 68 65 61 
       00:006A: 70 20 69 6E 
       00:006E: 74 65 67 
  1830 00:0071: 72 69 74 79  	db	$72,$69,$74,$79,$20,$62,$72,$6F,$6B,$65,
                    $6E,$3A,$20,$74,$6F
       00:0075: 20 62 72 6F 
       00:0079: 6B 65 6E 3A 
       00:007D: 20 74 6F 
  1831 00:0080: 6F 20 6C 61  	db	$6F,$20,$6C,$61,$72,$67,$65,$20,$6E,$65,
                    $78,$74,$20,$62,$6C
       00:0084: 72 67 65 20 
       00:0088: 6E 65 78 74 
       00:008C: 20 62 6C 
  1832 00:008F: 6F 63 6B 20  	db	$6F,$63,$6B,$20,$6E,$75,$6D,$3A,$00,$20,
                    $20,$20,$20,$20,$20
       00:0093: 6E 75 6D 3A 
       00:0097: 00 20 20 20 
       00:009B: 20 20 20 
  1833 00:009E: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:00A2: 20 20 20 20 
       00:00A6: 20 20 20 20 
  Mon Aug  9 2021 16:52                                                Page 36


       00:00AA: 20 20 20 
  1834 00:00AD: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:00B1: 20 20 20 20 
       00:00B5: 20 20 20 20 
       00:00B9: 20 20 20 
  1835 00:00BC: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$41,$44,$44,
                    $52,$3A,$00,$68,$65
       00:00C0: 20 20 20 41 
       00:00C4: 44 44 52 3A 
       00:00C8: 00 68 65 
  1836 00:00CB: 61 70 20 69  	db	$61,$70,$20,$69,$6E,$74,$65,$67,$72,$69,
                    $74,$79,$20,$62,$72
       00:00CF: 6E 74 65 67 
       00:00D3: 72 69 74 79 
       00:00D7: 20 62 72 
  1837 00:00DA: 6F 6B 65 6E  	db	$6F,$6B,$65,$6E,$3A,$20,$6D,$61,$73,$6B,
                    $20,$77,$72,$6F,$6E
       00:00DE: 3A 20 6D 61 
       00:00E2: 73 6B 20 77 
       00:00E6: 72 6F 6E 
  1838 00:00E9: 67 20 61 74  	db	$67,$20,$61,$74,$20,$61,$64,$64,$72,$3A,
                    $00,$68,$65,$61,$70
       00:00ED: 20 61 64 64 
       00:00F1: 72 3A 00 68 
       00:00F5: 65 61 70 
  1839 00:00F8: 20 69 6E 74  	db	$20,$69,$6E,$74,$65,$67,$72,$69,$74,$79,
                    $20,$62,$72,$6F,$6B
       00:00FC: 65 67 72 69 
       00:0100: 74 79 20 62 
       00:0104: 72 6F 6B 
  1840 00:0107: 65 6E 3A 6E  	db	$65,$6E,$3A,$6E,$65,$78,$74,$20,$62,$6C,
                    $6F,$63,$6B,$20,$69
       00:010B: 65 78 74 20 
       00:010F: 62 6C 6F 63 
       00:0113: 6B 20 69 
  1841 00:0116: 73 20 62 65  	db	$73,$20,$62,$65,$66,$6F,$72,$65,$20,$70,
                    $72,$65,$76,$20,$74
       00:011A: 66 6F 72 65 
       00:011E: 20 70 72 65 
       00:0122: 76 20 74 
  1842 00:0125: 68 69 73 20  	db	$68,$69,$73,$20,$6F,$6E,$65,$3A,$00,$20,
                    $20,$20,$20,$20,$20
       00:0129: 6F 6E 65 3A 
       00:012D: 00 20 20 20 
       00:0131: 20 20 20 
  1843 00:0134: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0138: 20 20 20 20 
       00:013C: 20 20 20 20 
       00:0140: 20 20 20 
  1844 00:0143: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0147: 20 20 20 20 
       00:014B: 20 20 20 20 
       00:014F: 20 20 20 
  1845 00:0152: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
  Mon Aug  9 2021 16:52                                                Page 37


       00:0156: 20 20 20 20 
       00:015A: 20 20 20 20 
       00:015E: 20 20 20 
  1846 00:0161: 20 50 52 45  	db	$20,$50,$52,$45,$56,$3A,$00,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0165: 56 3A 00 20 
       00:0169: 20 20 20 20 
       00:016D: 20 20 20 
  1847 00:0170: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0174: 20 20 20 20 
       00:0178: 20 20 20 20 
       00:017C: 20 20 20 
  1848 00:017F: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0183: 20 20 20 20 
       00:0187: 20 20 20 20 
       00:018B: 20 20 20 
  1849 00:018E: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$41
       00:0192: 20 20 20 20 
       00:0196: 20 20 20 20 
       00:019A: 20 20 41 
  1850 00:019D: 44 44 52 3A  	db	$44,$44,$52,$3A,$00,$68,$65,$61,$70,$20,
                    $69,$6E,$74,$65,$67
       00:01A1: 00 68 65 61 
       00:01A5: 70 20 69 6E 
       00:01A9: 74 65 67 
  1851 00:01AC: 72 69 74 79  	db	$72,$69,$74,$79,$20,$62,$72,$6F,$6B,$65,
                    $6E,$3A,$20,$62,$6C
       00:01B0: 20 62 72 6F 
       00:01B4: 6B 65 6E 3A 
       00:01B8: 20 62 6C 
  1852 00:01BB: 6F 63 6B 20  	db	$6F,$63,$6B,$20,$6C,$69,$6E,$6B,$73,$20,
                    $64,$6F,$6E,$27,$74
       00:01BF: 6C 69 6E 6B 
       00:01C3: 73 20 64 6F 
       00:01C7: 6E 27 74 
  1853 00:01CA: 20 6D 61 74  	db	$20,$6D,$61,$74,$63,$68,$20,$70,$72,$65,
                    $76,$3A,$20,$00,$20
       00:01CE: 63 68 20 70 
       00:01D2: 72 65 76 3A 
       00:01D6: 20 00 20 
  1854 00:01D9: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:01DD: 20 20 20 20 
       00:01E1: 20 20 20 20 
       00:01E5: 20 20 20 
  1855 00:01E8: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:01EC: 20 20 20 20 
       00:01F0: 20 20 20 20 
       00:01F4: 20 20 20 
  1856 00:01F7: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:01FB: 20 20 20 20 
       00:01FF: 20 20 20 20 
       00:0203: 20 20 20 
  Mon Aug  9 2021 16:52                                                Page 38


  1857 00:0206: 20 20 63 75  	db	$20,$20,$63,$75,$72,$3A,$20,$00,$20,$20,
                    $20,$20,$20,$20,$20
       00:020A: 72 3A 20 00 
       00:020E: 20 20 20 20 
       00:0212: 20 20 20 
  1858 00:0215: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0219: 20 20 20 20 
       00:021D: 20 20 20 20 
       00:0221: 20 20 20 
  1859 00:0224: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$55
       00:0228: 20 20 20 20 
       00:022C: 20 20 20 20 
       00:0230: 20 20 55 
  1860 00:0233: 4D 4D 5F 50  	db	$4D,$4D,$5F,$50,$42,$4C,$4F,$43,$4B,$28,
                    $63,$75,$72,$29,$3A
       00:0237: 42 4C 4F 43 
       00:023B: 4B 28 63 75 
       00:023F: 72 29 3A 
  1861 00:0242: 20 00 48 65  	db	$20,$00,$48,$65,$61,$70,$20,$43,$6F,$72,
                    $72,$75,$70,$74,$69
       00:0246: 61 70 20 43 
       00:024A: 6F 72 72 75 
       00:024E: 70 74 69 
  1862 00:0251: 6F 6E 21 0D  	db	$6F,$6E,$21,$0D,$0A,$00
       00:0255: 0A 00 
  1863 00:0257:              	ends
  1864                        	.line	174
  1865                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",96
  1866                        ;#include "umm_poison.c"
  1867                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_poison.c",0
  1868                        	.line	9
  1869                        	.line	10
  1870                        	code
  1871                        	func
  1872                        	.function	10
  1873                        ~~poison_size:
  1874                        	longa	on
  1875                        	longi	on
  1876 00:0537: 3B           	tsc
  1877 00:0538: 38           	sec
  1878 00:0539: E9 04 00     	sbc	#L20
  1879 00:053C: 1B           	tcs
  1880 00:053D: 0B           	phd
  1881 00:053E: 5B           	tcd
  1882             00000004   s_0	set	4
  1883                        	.block	10
  1884                        	.sym	s,4,18,6,32
  1885                        	.line	11
  1886 00:053F: A5 08        	lda	<L20+s_0
  1887 00:0541: 05 0A        	ora	<L20+s_0+2
  1888 00:0543: D0 03        	bne	L24
  1889 00:0545: 82 05 00     	brl	L23
  1890                        L24:
  1891 00:0548: A9 0A 00     	lda	#$a
  Mon Aug  9 2021 16:52                                                Page 39


  1892 00:054B: 80 03        	bra	L25
  1893                        L23:
  1894 00:054D: A9 00 00     	lda	#$0
  1895                        L25:
  1896 00:0550: 85 01        	sta	<R0
  1897 00:0552: A5 01        	lda	<R0
  1898 00:0554: 85 01        	sta	<R0
  1899 00:0556: 64 03        	stz	<R0+2
  1900 00:0558: A6 03        	ldx	<R0+2
  1901 00:055A: A5 01        	lda	<R0
  1902                        L26:
  1903 00:055C: A8           	tay
  1904 00:055D: A5 06        	lda	<L20+2
  1905 00:055F: 85 0A        	sta	<L20+2+4
  1906 00:0561: A5 05        	lda	<L20+1
  1907 00:0563: 85 09        	sta	<L20+1+4
  1908 00:0565: 2B           	pld
  1909 00:0566: 3B           	tsc
  1910 00:0567: 18           	clc
  1911 00:0568: 69 08 00     	adc	#L20+4
  1912 00:056B: 1B           	tcs
  1913 00:056C: 98           	tya
  1914 00:056D: 6B           	rtl
  1915                        	.line	15
  1916                        	.endblock	15
  1917             00000004   L20	equ	4
  1918             00000005   L21	equ	5
  1919                        	ends
  1920                        	efunc
  1921                        	.endfunc	15,5,4
  1922                        	.line	15
  1923                        	.line	20
  1924                        	.line	21
  1925                        	code
  1926                        	func
  1927                        	.function	21
  1928                        ~~dump_mem:
  1929                        	longa	on
  1930                        	longi	on
  1931 00:056E: 3B           	tsc
  1932 00:056F: 38           	sec
  1933 00:0570: E9 04 00     	sbc	#L27
  1934 00:0573: 1B           	tcs
  1935 00:0574: 0B           	phd
  1936 00:0575: 5B           	tcd
  1937             00000004   ptr_0	set	4
  1938             00000008   len_0	set	8
  1939                        	.block	21
  1940                        	.sym	ptr,4,142,6,32
  1941                        	.sym	len,8,18,6,32
  1942                        	.line	22
  1943                        L10016:
  1944 00:0576: A5 0C        	lda	<L27+len_0
  1945 00:0578: 85 01        	sta	<R0
  1946 00:057A: A5 0E        	lda	<L27+len_0+2
  1947 00:057C: 85 03        	sta	<R0+2
  1948 00:057E: A5 0C        	lda	<L27+len_0
  1949 00:0580: D0 02        	bne	L30
  Mon Aug  9 2021 16:52                                                Page 40


  1950 00:0582: C6 0E        	dec	<L27+len_0+2
  1951                        L30:
  1952 00:0584: C6 0C        	dec	<L27+len_0
  1953 00:0586: A5 01        	lda	<R0
  1954 00:0588: 05 03        	ora	<R0+2
  1955 00:058A: D0 03        	bne	L31
  1956 00:058C: 82 03 00     	brl	L10017
  1957                        L31:
  1958                        	.line	23
  1959                        	.line	25
  1960 00:058F: 82 E4 FF     	brl	L10016
  1961                        L10017:
  1962                        	.line	26
  1963                        L32:
  1964 00:0592: A5 06        	lda	<L27+2
  1965 00:0594: 85 0E        	sta	<L27+2+8
  1966 00:0596: A5 05        	lda	<L27+1
  1967 00:0598: 85 0D        	sta	<L27+1+8
  1968 00:059A: 2B           	pld
  1969 00:059B: 3B           	tsc
  1970 00:059C: 18           	clc
  1971 00:059D: 69 0C 00     	adc	#L27+8
  1972 00:05A0: 1B           	tcs
  1973 00:05A1: 6B           	rtl
  1974                        	.endblock	26
  1975             00000004   L27	equ	4
  1976             00000005   L28	equ	5
  1977                        	ends
  1978                        	efunc
  1979                        	.endfunc	26,5,4
  1980                        	.line	26
  1981                        	.line	31
  1982                        	.line	32
  1983                        	code
  1984                        	func
  1985                        	.function	32
  1986                        ~~put_poison:
  1987                        	longa	on
  1988                        	longi	on
  1989 00:05A2: 3B           	tsc
  1990 00:05A3: 38           	sec
  1991 00:05A4: E9 00 00     	sbc	#L33
  1992 00:05A7: 1B           	tcs
  1993 00:05A8: 0B           	phd
  1994 00:05A9: 5B           	tcd
  1995             00000004   ptr_0	set	4
  1996             00000008   poison_size_0	set	8
  1997                        	.block	32
  1998                        	.sym	ptr,4,142,6,32
  1999                        	.sym	poison_size,8,18,6,32
  2000                        	.line	33
  2001 00:05AA: D4 08        	pei	<L33+poison_size_0
  2002 00:05AC: F4 A5 00     	pea	#<$a5
  2003 00:05AF: D4 06        	pei	<L33+ptr_0+2
  2004 00:05B1: D4 04        	pei	<L33+ptr_0
  2005 00:05B3: 22 xx xx xx  	jsl	~~memset
  2006                        	.line	34
  2007                        L36:
  Mon Aug  9 2021 16:52                                                Page 41


  2008 00:05B7: A5 02        	lda	<L33+2
  2009 00:05B9: 85 0A        	sta	<L33+2+8
  2010 00:05BB: A5 01        	lda	<L33+1
  2011 00:05BD: 85 09        	sta	<L33+1+8
  2012 00:05BF: 2B           	pld
  2013 00:05C0: 3B           	tsc
  2014 00:05C1: 18           	clc
  2015 00:05C2: 69 08 00     	adc	#L33+8
  2016 00:05C5: 1B           	tcs
  2017 00:05C6: 6B           	rtl
  2018                        	.endblock	34
  2019             00000000   L33	equ	0
  2020             00000001   L34	equ	1
  2021                        	ends
  2022                        	efunc
  2023                        	.endfunc	34,1,0
  2024                        	.line	34
  2025                        	.line	43
  2026                        	.line	45
  2027                        	code
  2028                        	func
  2029                        	.function	45
  2030                        ~~check_poison:
  2031                        	longa	on
  2032                        	longi	on
  2033 00:05C7: 3B           	tsc
  2034 00:05C8: 38           	sec
  2035 00:05C9: E9 0A 00     	sbc	#L37
  2036 00:05CC: 1B           	tcs
  2037 00:05CD: 0B           	phd
  2038 00:05CE: 5B           	tcd
  2039             00000004   ptr_0	set	4
  2040             00000008   poison_size_0	set	8
  2041             0000000C   where_0	set	12
  2042                        	.block	45
  2043             00000000   i_1	set	0
  2044             00000004   ok_1	set	4
  2045                        	.sym	i,0,18,1,32
  2046                        	.sym	ok,4,5,1,16
  2047                        	.sym	ptr,4,142,6,32
  2048                        	.sym	poison_size,8,18,6,32
  2049                        	.sym	where,12,142,6,32
  2050 00:05CF: A9 01 00     	lda	#$1
  2051 00:05D2: 85 09        	sta	<L38+ok_1
  2052                        	.line	49
  2053 00:05D4: 64 05        	stz	<L38+i_1
  2054 00:05D6: 64 07        	stz	<L38+i_1+2
  2055 00:05D8: 82 25 00     	brl	L10021
  2056                        L10020:
  2057                        	.line	50
  2058                        	.line	51
  2059 00:05DB: 18           	clc
  2060 00:05DC: A5 0E        	lda	<L37+ptr_0
  2061 00:05DE: 65 05        	adc	<L38+i_1
  2062 00:05E0: 85 01        	sta	<R0
  2063 00:05E2: A5 10        	lda	<L37+ptr_0+2
  2064 00:05E4: 65 07        	adc	<L38+i_1+2
  2065 00:05E6: 85 03        	sta	<R0+2
  Mon Aug  9 2021 16:52                                                Page 42


  2066 00:05E8: E2 20        	sep	#$20
  2067                        	longa	off
  2068 00:05EA: A7 01        	lda	[<R0]
  2069 00:05EC: C9 A5        	cmp	#<$a5
  2070 00:05EE: C2 20        	rep	#$20
  2071                        	longa	on
  2072 00:05F0: D0 03        	bne	L40
  2073 00:05F2: 82 05 00     	brl	L10022
  2074                        L40:
  2075                        	.line	52
  2076                        	.line	53
  2077 00:05F5: 64 09        	stz	<L38+ok_1
  2078                        	.line	54
  2079 00:05F7: 82 13 00     	brl	L10019
  2080                        	.line	55
  2081                        L10022:
  2082                        	.line	56
  2083                        L10018:
  2084 00:05FA: E6 05        	inc	<L38+i_1
  2085 00:05FC: D0 02        	bne	L41
  2086 00:05FE: E6 07        	inc	<L38+i_1+2
  2087                        L41:
  2088                        L10021:
  2089 00:0600: A5 05        	lda	<L38+i_1
  2090 00:0602: C5 12        	cmp	<L37+poison_size_0
  2091 00:0604: A5 07        	lda	<L38+i_1+2
  2092 00:0606: E5 14        	sbc	<L37+poison_size_0+2
  2093 00:0608: B0 03        	bcs	L42
  2094 00:060A: 82 CE FF     	brl	L10020
  2095                        L42:
  2096                        L10019:
  2097                        	.line	58
  2098 00:060D: A5 09        	lda	<L38+ok_1
  2099 00:060F: F0 03        	beq	L43
  2100 00:0611: 82 0C 00     	brl	L10023
  2101                        L43:
  2102                        	.line	59
  2103                        	.line	61
  2104 00:0614: D4 14        	pei	<L37+poison_size_0+2
  2105 00:0616: D4 12        	pei	<L37+poison_size_0
  2106 00:0618: D4 10        	pei	<L37+ptr_0+2
  2107 00:061A: D4 0E        	pei	<L37+ptr_0
  2108 00:061C: 22 xx xx xx  	jsl	~~dump_mem
  2109                        	.line	63
  2110                        L10023:
  2111                        	.line	65
  2112 00:0620: A5 09        	lda	<L38+ok_1
  2113                        L44:
  2114 00:0622: A8           	tay
  2115 00:0623: A5 0C        	lda	<L37+2
  2116 00:0625: 85 18        	sta	<L37+2+12
  2117 00:0627: A5 0B        	lda	<L37+1
  2118 00:0629: 85 17        	sta	<L37+1+12
  2119 00:062B: 2B           	pld
  2120 00:062C: 3B           	tsc
  2121 00:062D: 18           	clc
  2122 00:062E: 69 16 00     	adc	#L37+12
  2123 00:0631: 1B           	tcs
  Mon Aug  9 2021 16:52                                                Page 43


  2124 00:0632: 98           	tya
  2125 00:0633: 6B           	rtl
  2126                        	.line	66
  2127                        	.endblock	66
  2128             0000000A   L37	equ	10
  2129             00000005   L38	equ	5
  2130                        	ends
  2131                        	efunc
  2132                        	.endfunc	66,5,10
  2133                        	.line	66
  2134                        	.line	72
  2135                        	.line	73
  2136                        	code
  2137                        	func
  2138                        	.function	73
  2139                        ~~check_poison_block:
  2140                        	longa	on
  2141                        	longi	on
  2142 00:0634: 3B           	tsc
  2143 00:0635: 38           	sec
  2144 00:0636: E9 12 00     	sbc	#L45
  2145 00:0639: 1B           	tcs
  2146 00:063A: 0B           	phd
  2147 00:063B: 5B           	tcd
  2148             00000004   pblock_0	set	4
  2149                        	.block	73
  2150             00000000   ok_1	set	0
  2151                        	.sym	ok,0,5,1,16
  2152                        	.sym	pblock,4,138,6,32,54
  2153 00:063C: A9 01 00     	lda	#$1
  2154 00:063F: 85 09        	sta	<L46+ok_1
  2155                        	.line	76
  2156 00:0641: A7 16        	lda	[<L45+pblock_0]
  2157 00:0643: 29 00 80     	and	#<$8000
  2158 00:0646: D0 03        	bne	L48
  2159 00:0648: 82 03 00     	brl	L10024
  2160                        L48:
  2161                        	.line	77
  2162                        	.line	79
  2163 00:064B: 82 84 00     	brl	L10025
  2164                        L10024:
  2165                        	.line	81
  2166                        	.block	86
  2167             00000002   pc_2	set	2
  2168             00000006   pc_cur_2	set	6
  2169                        	.sym	pc,2,142,1,32
  2170                        	.sym	pc_cur,6,142,1,32
  2171 00:064E: 18           	clc
  2172 00:064F: A9 08 00     	lda	#$8
  2173 00:0652: 65 16        	adc	<L45+pblock_0
  2174 00:0654: 85 0B        	sta	<L46+pc_2
  2175 00:0656: A9 00 00     	lda	#$0
  2176 00:0659: 65 18        	adc	<L45+pblock_0+2
  2177 00:065B: 85 0D        	sta	<L46+pc_2+2
  2178                        	.line	86
  2179 00:065D: 18           	clc
  2180 00:065E: A9 02 00     	lda	#$2
  2181 00:0661: 65 0B        	adc	<L46+pc_2
  Mon Aug  9 2021 16:52                                                Page 44


  2182 00:0663: 85 0F        	sta	<L46+pc_cur_2
  2183 00:0665: A9 00 00     	lda	#$0
  2184 00:0668: 65 0D        	adc	<L46+pc_2+2
  2185 00:066A: 85 11        	sta	<L46+pc_cur_2+2
  2186                        	.line	87
  2187 00:066C: F4 xx xx     	pea	#^L19
  2188 00:066F: F4 xx xx     	pea	#<L19
  2189 00:0672: F4 00 00     	pea	#^$4
  2190 00:0675: F4 04 00     	pea	#<$4
  2191 00:0678: D4 11        	pei	<L46+pc_cur_2+2
  2192 00:067A: D4 0F        	pei	<L46+pc_cur_2
  2193 00:067C: 22 xx xx xx  	jsl	~~check_poison
  2194 00:0680: AA           	tax
  2195 00:0681: F0 03        	beq	L50
  2196 00:0683: 82 05 00     	brl	L10026
  2197                        L50:
  2198                        	.line	88
  2199                        	.line	89
  2200 00:0686: 64 09        	stz	<L46+ok_1
  2201                        	.line	90
  2202 00:0688: 82 47 00     	brl	L10027
  2203                        	.line	91
  2204                        L10026:
  2205                        	.line	93
  2206 00:068B: A0 00 00     	ldy	#$0
  2207 00:068E: A7 0B        	lda	[<L46+pc_2]
  2208 00:0690: 10 01        	bpl	L51
  2209 00:0692: 88           	dey
  2210                        L51:
  2211 00:0693: 85 01        	sta	<R0
  2212 00:0695: 84 03        	sty	<R0+2
  2213 00:0697: 18           	clc
  2214 00:0698: A9 FC FF     	lda	#$fffc
  2215 00:069B: 65 01        	adc	<R0
  2216 00:069D: 85 05        	sta	<R1
  2217 00:069F: A9 FF FF     	lda	#$ffff
  2218 00:06A2: 65 03        	adc	<R0+2
  2219 00:06A4: 85 07        	sta	<R1+2
  2220 00:06A6: 18           	clc
  2221 00:06A7: A5 0B        	lda	<L46+pc_2
  2222 00:06A9: 65 05        	adc	<R1
  2223 00:06AB: 85 0F        	sta	<L46+pc_cur_2
  2224 00:06AD: A5 0D        	lda	<L46+pc_2+2
  2225 00:06AF: 65 07        	adc	<R1+2
  2226 00:06B1: 85 11        	sta	<L46+pc_cur_2+2
  2227                        	.line	94
  2228 00:06B3: F4 xx xx     	pea	#^L19+7
  2229 00:06B6: F4 xx xx     	pea	#<L19+7
  2230 00:06B9: F4 00 00     	pea	#^$4
  2231 00:06BC: F4 04 00     	pea	#<$4
  2232 00:06BF: D4 11        	pei	<L46+pc_cur_2+2
  2233 00:06C1: D4 0F        	pei	<L46+pc_cur_2
  2234 00:06C3: 22 xx xx xx  	jsl	~~check_poison
  2235 00:06C7: AA           	tax
  2236 00:06C8: F0 03        	beq	L52
  2237 00:06CA: 82 05 00     	brl	L10028
  2238                        L52:
  2239                        	.line	95
  Mon Aug  9 2021 16:52                                                Page 45


  2240                        	.line	96
  2241 00:06CD: 64 09        	stz	<L46+ok_1
  2242                        	.line	97
  2243 00:06CF: 82 00 00     	brl	L10027
  2244                        	.line	98
  2245                        L10028:
  2246                        	.endblock	99
  2247                        	.line	99
  2248                        L10025:
  2249                        	.line	101
  2250                        L10027:
  2251                        	.line	102
  2252 00:06D2: A5 09        	lda	<L46+ok_1
  2253                        L53:
  2254 00:06D4: A8           	tay
  2255 00:06D5: A5 14        	lda	<L45+2
  2256 00:06D7: 85 18        	sta	<L45+2+4
  2257 00:06D9: A5 13        	lda	<L45+1
  2258 00:06DB: 85 17        	sta	<L45+1+4
  2259 00:06DD: 2B           	pld
  2260 00:06DE: 3B           	tsc
  2261 00:06DF: 18           	clc
  2262 00:06E0: 69 16 00     	adc	#L45+4
  2263 00:06E3: 1B           	tcs
  2264 00:06E4: 98           	tya
  2265 00:06E5: 6B           	rtl
  2266                        	.line	103
  2267                        	.endblock	103
  2268             00000012   L45	equ	18
  2269             00000009   L46	equ	9
  2270                        	ends
  2271                        	efunc
  2272                        	.endfunc	103,9,18
  2273                        	.line	103
  2274                        	data
  2275                        L19:
  2276 00:0257: 62 65 66 6F  	db	$62,$65,$66,$6F,$72,$65,$00,$61,$66,$74,
                    $65,$72,$00
       00:025B: 72 65 00 61 
       00:025F: 66 74 65 72 
       00:0263: 00 
  2277 00:0264:              	ends
  2278                        	.line	112
  2279                        	.line	113
  2280                        	code
  2281                        	func
  2282                        	.function	113
  2283                        ~~get_poisoned:
  2284                        	longa	on
  2285                        	longi	on
  2286 00:06E6: 3B           	tsc
  2287 00:06E7: 38           	sec
  2288 00:06E8: E9 08 00     	sbc	#L55
  2289 00:06EB: 1B           	tcs
  2290 00:06EC: 0B           	phd
  2291 00:06ED: 5B           	tcd
  2292             00000004   ptr_0	set	4
  2293             00000008   size_w_poison_0	set	8
  Mon Aug  9 2021 16:52                                                Page 46


  2294                        	.block	113
  2295                        	.sym	ptr,4,142,6,32
  2296                        	.sym	size_w_poison,8,18,6,32
  2297                        	.line	114
  2298 00:06EE: A5 10        	lda	<L55+size_w_poison_0
  2299 00:06F0: 05 12        	ora	<L55+size_w_poison_0+2
  2300 00:06F2: D0 03        	bne	L58
  2301 00:06F4: 82 79 00     	brl	L10029
  2302                        L58:
  2303 00:06F7: A5 0C        	lda	<L55+ptr_0
  2304 00:06F9: 05 0E        	ora	<L55+ptr_0+2
  2305 00:06FB: D0 03        	bne	L59
  2306 00:06FD: 82 70 00     	brl	L10029
  2307                        L59:
  2308                        	.line	115
  2309                        	.line	118
  2310 00:0700: F4 00 00     	pea	#^$4
  2311 00:0703: F4 04 00     	pea	#<$4
  2312 00:0706: 18           	clc
  2313 00:0707: A9 02 00     	lda	#$2
  2314 00:070A: 65 0C        	adc	<L55+ptr_0
  2315 00:070C: 85 01        	sta	<R0
  2316 00:070E: A9 00 00     	lda	#$0
  2317 00:0711: 65 0E        	adc	<L55+ptr_0+2
  2318 00:0713: 85 03        	sta	<R0+2
  2319 00:0715: D4 03        	pei	<R0+2
  2320 00:0717: D4 01        	pei	<R0
  2321 00:0719: 22 xx xx xx  	jsl	~~put_poison
  2322                        	.line	120
  2323 00:071D: F4 00 00     	pea	#^$4
  2324 00:0720: F4 04 00     	pea	#<$4
  2325 00:0723: 18           	clc
  2326 00:0724: A9 FC FF     	lda	#$fffc
  2327 00:0727: 65 10        	adc	<L55+size_w_poison_0
  2328 00:0729: 85 01        	sta	<R0
  2329 00:072B: A9 FF FF     	lda	#$ffff
  2330 00:072E: 65 12        	adc	<L55+size_w_poison_0+2
  2331 00:0730: 85 03        	sta	<R0+2
  2332 00:0732: 18           	clc
  2333 00:0733: A5 0C        	lda	<L55+ptr_0
  2334 00:0735: 65 01        	adc	<R0
  2335 00:0737: 85 05        	sta	<R1
  2336 00:0739: A5 0E        	lda	<L55+ptr_0+2
  2337 00:073B: 65 03        	adc	<R0+2
  2338 00:073D: 85 07        	sta	<R1+2
  2339 00:073F: D4 07        	pei	<R1+2
  2340 00:0741: D4 05        	pei	<R1
  2341 00:0743: 22 xx xx xx  	jsl	~~put_poison
  2342                        	.line	124
  2343 00:0747: A5 10        	lda	<L55+size_w_poison_0
  2344 00:0749: 87 0C        	sta	[<L55+ptr_0]
  2345                        	.line	127
  2346 00:074B: 18           	clc
  2347 00:074C: A9 06 00     	lda	#$6
  2348 00:074F: 65 0C        	adc	<L55+ptr_0
  2349 00:0751: 85 01        	sta	<R0
  2350 00:0753: A9 00 00     	lda	#$0
  2351 00:0756: 65 0E        	adc	<L55+ptr_0+2
  Mon Aug  9 2021 16:52                                                Page 47


  2352 00:0758: 85 03        	sta	<R0+2
  2353 00:075A: A6 03        	ldx	<R0+2
  2354 00:075C: A5 01        	lda	<R0
  2355                        L60:
  2356 00:075E: A8           	tay
  2357 00:075F: A5 0A        	lda	<L55+2
  2358 00:0761: 85 12        	sta	<L55+2+8
  2359 00:0763: A5 09        	lda	<L55+1
  2360 00:0765: 85 11        	sta	<L55+1+8
  2361 00:0767: 2B           	pld
  2362 00:0768: 3B           	tsc
  2363 00:0769: 18           	clc
  2364 00:076A: 69 10 00     	adc	#L55+8
  2365 00:076D: 1B           	tcs
  2366 00:076E: 98           	tya
  2367 00:076F: 6B           	rtl
  2368                        	.line	128
  2369                        L10029:
  2370                        	.line	130
  2371                        	.line	131
  2372 00:0770: A6 0E        	ldx	<L55+ptr_0+2
  2373 00:0772: A5 0C        	lda	<L55+ptr_0
  2374 00:0774: 82 E7 FF     	brl	L60
  2375                        	.line	132
  2376                        	.line	133
  2377                        	.endblock	133
  2378             00000008   L55	equ	8
  2379             00000009   L56	equ	9
  2380                        	ends
  2381                        	efunc
  2382                        	.endfunc	133,9,8
  2383                        	.line	133
  2384                        	.line	141
  2385                        	.line	142
  2386                        	code
  2387                        	func
  2388                        	.function	142
  2389                        ~~get_unpoisoned:
  2390                        	longa	on
  2391                        	longi	on
  2392 00:0777: 3B           	tsc
  2393 00:0778: 38           	sec
  2394 00:0779: E9 0C 00     	sbc	#L61
  2395 00:077C: 1B           	tcs
  2396 00:077D: 0B           	phd
  2397 00:077E: 5B           	tcd
  2398             00000004   ptr_0	set	4
  2399                        	.block	142
  2400                        	.sym	ptr,4,142,6,32
  2401                        	.line	143
  2402 00:077F: A5 10        	lda	<L61+ptr_0
  2403 00:0781: 05 12        	ora	<L61+ptr_0+2
  2404 00:0783: D0 03        	bne	L64
  2405 00:0785: 82 5F 00     	brl	L10030
  2406                        L64:
  2407                        	.line	144
  2408                        	.block	147
  2409             00000000   c_2	set	0
  Mon Aug  9 2021 16:52                                                Page 48


  2410                        	.sym	c,0,18,1,32
  2411                        	.line	147
  2412 00:0788: 18           	clc
  2413 00:0789: A9 FA FF     	lda	#$fffa
  2414 00:078C: 65 10        	adc	<L61+ptr_0
  2415 00:078E: 85 10        	sta	<L61+ptr_0
  2416 00:0790: A9 FF FF     	lda	#$ffff
  2417 00:0793: 65 12        	adc	<L61+ptr_0+2
  2418 00:0795: 85 12        	sta	<L61+ptr_0+2
  2419                        	.line	150
  2420 00:0797: 38           	sec
  2421 00:0798: A5 10        	lda	<L61+ptr_0
  2422 00:079A: ED xx xx     	sbc	|~~umm_heap
  2423 00:079D: 85 01        	sta	<R0
  2424 00:079F: A5 12        	lda	<L61+ptr_0+2
  2425 00:07A1: ED xx xx     	sbc	|~~umm_heap+2
  2426 00:07A4: 85 03        	sta	<R0+2
  2427 00:07A6: F4 00 00     	pea	#^$10
  2428 00:07A9: F4 10 00     	pea	#<$10
  2429 00:07AC: D4 03        	pei	<R0+2
  2430 00:07AE: D4 01        	pei	<R0
  2431                        	xref	~~~ldiv
  2432 00:07B0: 22 xx xx xx  	jsl	~~~ldiv
  2433 00:07B4: 85 09        	sta	<L62+c_2
  2434 00:07B6: 86 0B        	stx	<L62+c_2+2
  2435                        	.line	152
  2436 00:07B8: A5 09        	lda	<L62+c_2
  2437 00:07BA: 85 01        	sta	<R0
  2438 00:07BC: A5 0B        	lda	<L62+c_2+2
  2439 00:07BE: 85 03        	sta	<R0+2
  2440 00:07C0: 06 01        	asl	<R0
  2441 00:07C2: 26 03        	rol	<R0+2
  2442 00:07C4: 06 01        	asl	<R0
  2443 00:07C6: 26 03        	rol	<R0+2
  2444 00:07C8: 06 01        	asl	<R0
  2445 00:07CA: 26 03        	rol	<R0+2
  2446 00:07CC: 06 01        	asl	<R0
  2447 00:07CE: 26 03        	rol	<R0+2
  2448 00:07D0: 18           	clc
  2449 00:07D1: AD xx xx     	lda	|~~umm_heap
  2450 00:07D4: 65 01        	adc	<R0
  2451 00:07D6: 85 05        	sta	<R1
  2452 00:07D8: AD xx xx     	lda	|~~umm_heap+2
  2453 00:07DB: 65 03        	adc	<R0+2
  2454 00:07DD: 85 07        	sta	<R1+2
  2455 00:07DF: D4 07        	pei	<R1+2
  2456 00:07E1: D4 05        	pei	<R1
  2457 00:07E3: 22 xx xx xx  	jsl	~~check_poison_block
  2458                        	.endblock	153
  2459                        	.line	153
  2460                        L10030:
  2461                        	.line	155
  2462 00:07E7: A6 12        	ldx	<L61+ptr_0+2
  2463 00:07E9: A5 10        	lda	<L61+ptr_0
  2464                        L66:
  2465 00:07EB: A8           	tay
  2466 00:07EC: A5 0E        	lda	<L61+2
  2467 00:07EE: 85 12        	sta	<L61+2+4
  Mon Aug  9 2021 16:52                                                Page 49


  2468 00:07F0: A5 0D        	lda	<L61+1
  2469 00:07F2: 85 11        	sta	<L61+1+4
  2470 00:07F4: 2B           	pld
  2471 00:07F5: 3B           	tsc
  2472 00:07F6: 18           	clc
  2473 00:07F7: 69 10 00     	adc	#L61+4
  2474 00:07FA: 1B           	tcs
  2475 00:07FB: 98           	tya
  2476 00:07FC: 6B           	rtl
  2477                        	.line	156
  2478                        	.endblock	156
  2479             0000000C   L61	equ	12
  2480             00000009   L62	equ	9
  2481                        	ends
  2482                        	efunc
  2483                        	.endfunc	156,9,12
  2484                        	.line	156
  2485                        	.line	162
  2486                        	.line	163
  2487                        	code
  2488                        	xdef	~~umm_poison_malloc
  2489                        	func
  2490                        	.function	163
  2491                        ~~umm_poison_malloc:
  2492                        	longa	on
  2493                        	longi	on
  2494 00:07FD: 3B           	tsc
  2495 00:07FE: 38           	sec
  2496 00:07FF: E9 08 00     	sbc	#L67
  2497 00:0802: 1B           	tcs
  2498 00:0803: 0B           	phd
  2499 00:0804: 5B           	tcd
  2500             00000004   size_0	set	4
  2501                        	.block	163
  2502             00000000   ret_1	set	0
  2503                        	.sym	ret,0,129,1,32
  2504                        	.sym	size,4,18,6,32
  2505                        	.line	166
  2506 00:0805: D4 0E        	pei	<L67+size_0+2
  2507 00:0807: D4 0C        	pei	<L67+size_0
  2508 00:0809: 22 xx xx xx  	jsl	~~poison_size
  2509 00:080D: 85 01        	sta	<R0
  2510 00:080F: 86 03        	stx	<R0+2
  2511 00:0811: 18           	clc
  2512 00:0812: A5 01        	lda	<R0
  2513 00:0814: 65 0C        	adc	<L67+size_0
  2514 00:0816: 85 0C        	sta	<L67+size_0
  2515 00:0818: A5 03        	lda	<R0+2
  2516 00:081A: 65 0E        	adc	<L67+size_0+2
  2517 00:081C: 85 0E        	sta	<L67+size_0+2
  2518                        	.line	168
  2519 00:081E: D4 0E        	pei	<L67+size_0+2
  2520 00:0820: D4 0C        	pei	<L67+size_0
  2521 00:0822: 22 xx xx xx  	jsl	~~umm_malloc
  2522 00:0826: 85 05        	sta	<L68+ret_1
  2523 00:0828: 86 07        	stx	<L68+ret_1+2
  2524                        	.line	170
  2525 00:082A: D4 0E        	pei	<L67+size_0+2
  Mon Aug  9 2021 16:52                                                Page 50


  2526 00:082C: D4 0C        	pei	<L67+size_0
  2527 00:082E: D4 07        	pei	<L68+ret_1+2
  2528 00:0830: D4 05        	pei	<L68+ret_1
  2529 00:0832: 22 xx xx xx  	jsl	~~get_poisoned
  2530 00:0836: 85 05        	sta	<L68+ret_1
  2531 00:0838: 86 07        	stx	<L68+ret_1+2
  2532                        	.line	172
  2533 00:083A: A6 07        	ldx	<L68+ret_1+2
  2534 00:083C: A5 05        	lda	<L68+ret_1
  2535                        L70:
  2536 00:083E: A8           	tay
  2537 00:083F: A5 0A        	lda	<L67+2
  2538 00:0841: 85 0E        	sta	<L67+2+4
  2539 00:0843: A5 09        	lda	<L67+1
  2540 00:0845: 85 0D        	sta	<L67+1+4
  2541 00:0847: 2B           	pld
  2542 00:0848: 3B           	tsc
  2543 00:0849: 18           	clc
  2544 00:084A: 69 0C 00     	adc	#L67+4
  2545 00:084D: 1B           	tcs
  2546 00:084E: 98           	tya
  2547 00:084F: 6B           	rtl
  2548                        	.line	173
  2549                        	.endblock	173
  2550             00000008   L67	equ	8
  2551             00000005   L68	equ	5
  2552                        	ends
  2553                        	efunc
  2554                        	.endfunc	173,5,8
  2555                        	.line	173
  2556                        	.line	177
  2557                        	.line	178
  2558                        	code
  2559                        	xdef	~~umm_poison_calloc
  2560                        	func
  2561                        	.function	178
  2562                        ~~umm_poison_calloc:
  2563                        	longa	on
  2564                        	longi	on
  2565 00:0850: 3B           	tsc
  2566 00:0851: 38           	sec
  2567 00:0852: E9 0C 00     	sbc	#L71
  2568 00:0855: 1B           	tcs
  2569 00:0856: 0B           	phd
  2570 00:0857: 5B           	tcd
  2571             00000004   num_0	set	4
  2572             00000008   item_size_0	set	8
  2573                        	.block	178
  2574             00000000   ret_1	set	0
  2575             00000004   size_1	set	4
  2576                        	.sym	ret,0,129,1,32
  2577                        	.sym	size,4,18,1,32
  2578                        	.sym	num,4,18,6,32
  2579                        	.sym	item_size,8,18,6,32
  2580 00:0858: D4 12        	pei	<L71+num_0+2
  2581 00:085A: D4 10        	pei	<L71+num_0
  2582 00:085C: D4 16        	pei	<L71+item_size_0+2
  2583 00:085E: D4 14        	pei	<L71+item_size_0
  Mon Aug  9 2021 16:52                                                Page 51


  2584                        	xref	~~~lmul
  2585 00:0860: 22 xx xx xx  	jsl	~~~lmul
  2586 00:0864: 85 09        	sta	<L72+size_1
  2587 00:0866: 86 0B        	stx	<L72+size_1+2
  2588                        	.line	182
  2589 00:0868: D4 0B        	pei	<L72+size_1+2
  2590 00:086A: D4 09        	pei	<L72+size_1
  2591 00:086C: 22 xx xx xx  	jsl	~~poison_size
  2592 00:0870: 85 01        	sta	<R0
  2593 00:0872: 86 03        	stx	<R0+2
  2594 00:0874: 18           	clc
  2595 00:0875: A5 01        	lda	<R0
  2596 00:0877: 65 09        	adc	<L72+size_1
  2597 00:0879: 85 09        	sta	<L72+size_1
  2598 00:087B: A5 03        	lda	<R0+2
  2599 00:087D: 65 0B        	adc	<L72+size_1+2
  2600 00:087F: 85 0B        	sta	<L72+size_1+2
  2601                        	.line	184
  2602 00:0881: D4 0B        	pei	<L72+size_1+2
  2603 00:0883: D4 09        	pei	<L72+size_1
  2604 00:0885: 22 xx xx xx  	jsl	~~umm_malloc
  2605 00:0889: 85 05        	sta	<L72+ret_1
  2606 00:088B: 86 07        	stx	<L72+ret_1+2
  2607                        	.line	186
  2608 00:088D: A5 05        	lda	<L72+ret_1
  2609 00:088F: 05 07        	ora	<L72+ret_1+2
  2610 00:0891: D0 03        	bne	L74
  2611 00:0893: 82 0D 00     	brl	L10031
  2612                        L74:
  2613                        	.line	187
  2614 00:0896: D4 09        	pei	<L72+size_1
  2615 00:0898: F4 00 00     	pea	#<$0
  2616 00:089B: D4 07        	pei	<L72+ret_1+2
  2617 00:089D: D4 05        	pei	<L72+ret_1
  2618 00:089F: 22 xx xx xx  	jsl	~~memset
  2619                        L10031:
  2620                        	.line	189
  2621 00:08A3: D4 0B        	pei	<L72+size_1+2
  2622 00:08A5: D4 09        	pei	<L72+size_1
  2623 00:08A7: D4 07        	pei	<L72+ret_1+2
  2624 00:08A9: D4 05        	pei	<L72+ret_1
  2625 00:08AB: 22 xx xx xx  	jsl	~~get_poisoned
  2626 00:08AF: 85 05        	sta	<L72+ret_1
  2627 00:08B1: 86 07        	stx	<L72+ret_1+2
  2628                        	.line	191
  2629 00:08B3: A6 07        	ldx	<L72+ret_1+2
  2630 00:08B5: A5 05        	lda	<L72+ret_1
  2631                        L75:
  2632 00:08B7: A8           	tay
  2633 00:08B8: A5 0E        	lda	<L71+2
  2634 00:08BA: 85 16        	sta	<L71+2+8
  2635 00:08BC: A5 0D        	lda	<L71+1
  2636 00:08BE: 85 15        	sta	<L71+1+8
  2637 00:08C0: 2B           	pld
  2638 00:08C1: 3B           	tsc
  2639 00:08C2: 18           	clc
  2640 00:08C3: 69 14 00     	adc	#L71+8
  2641 00:08C6: 1B           	tcs
  Mon Aug  9 2021 16:52                                                Page 52


  2642 00:08C7: 98           	tya
  2643 00:08C8: 6B           	rtl
  2644                        	.line	192
  2645                        	.endblock	192
  2646             0000000C   L71	equ	12
  2647             00000005   L72	equ	5
  2648                        	ends
  2649                        	efunc
  2650                        	.endfunc	192,5,12
  2651                        	.line	192
  2652                        	.line	196
  2653                        	.line	197
  2654                        	code
  2655                        	xdef	~~umm_poison_realloc
  2656                        	func
  2657                        	.function	197
  2658                        ~~umm_poison_realloc:
  2659                        	longa	on
  2660                        	longi	on
  2661 00:08C9: 3B           	tsc
  2662 00:08CA: 38           	sec
  2663 00:08CB: E9 08 00     	sbc	#L76
  2664 00:08CE: 1B           	tcs
  2665 00:08CF: 0B           	phd
  2666 00:08D0: 5B           	tcd
  2667             00000004   ptr_0	set	4
  2668             00000008   size_0	set	8
  2669                        	.block	197
  2670             00000000   ret_1	set	0
  2671                        	.sym	ret,0,129,1,32
  2672                        	.sym	ptr,4,129,6,32
  2673                        	.sym	size,8,18,6,32
  2674                        	.line	200
  2675 00:08D1: D4 0E        	pei	<L76+ptr_0+2
  2676 00:08D3: D4 0C        	pei	<L76+ptr_0
  2677 00:08D5: 22 xx xx xx  	jsl	~~get_unpoisoned
  2678 00:08D9: 85 0C        	sta	<L76+ptr_0
  2679 00:08DB: 86 0E        	stx	<L76+ptr_0+2
  2680                        	.line	202
  2681 00:08DD: D4 12        	pei	<L76+size_0+2
  2682 00:08DF: D4 10        	pei	<L76+size_0
  2683 00:08E1: 22 xx xx xx  	jsl	~~poison_size
  2684 00:08E5: 85 01        	sta	<R0
  2685 00:08E7: 86 03        	stx	<R0+2
  2686 00:08E9: 18           	clc
  2687 00:08EA: A5 01        	lda	<R0
  2688 00:08EC: 65 10        	adc	<L76+size_0
  2689 00:08EE: 85 10        	sta	<L76+size_0
  2690 00:08F0: A5 03        	lda	<R0+2
  2691 00:08F2: 65 12        	adc	<L76+size_0+2
  2692 00:08F4: 85 12        	sta	<L76+size_0+2
  2693                        	.line	203
  2694 00:08F6: D4 12        	pei	<L76+size_0+2
  2695 00:08F8: D4 10        	pei	<L76+size_0
  2696 00:08FA: D4 0E        	pei	<L76+ptr_0+2
  2697 00:08FC: D4 0C        	pei	<L76+ptr_0
  2698 00:08FE: 22 xx xx xx  	jsl	~~umm_realloc
  2699 00:0902: 85 05        	sta	<L77+ret_1
  Mon Aug  9 2021 16:52                                                Page 53


  2700 00:0904: 86 07        	stx	<L77+ret_1+2
  2701                        	.line	205
  2702 00:0906: D4 12        	pei	<L76+size_0+2
  2703 00:0908: D4 10        	pei	<L76+size_0
  2704 00:090A: D4 07        	pei	<L77+ret_1+2
  2705 00:090C: D4 05        	pei	<L77+ret_1
  2706 00:090E: 22 xx xx xx  	jsl	~~get_poisoned
  2707 00:0912: 85 05        	sta	<L77+ret_1
  2708 00:0914: 86 07        	stx	<L77+ret_1+2
  2709                        	.line	207
  2710 00:0916: A6 07        	ldx	<L77+ret_1+2
  2711 00:0918: A5 05        	lda	<L77+ret_1
  2712                        L79:
  2713 00:091A: A8           	tay
  2714 00:091B: A5 0A        	lda	<L76+2
  2715 00:091D: 85 12        	sta	<L76+2+8
  2716 00:091F: A5 09        	lda	<L76+1
  2717 00:0921: 85 11        	sta	<L76+1+8
  2718 00:0923: 2B           	pld
  2719 00:0924: 3B           	tsc
  2720 00:0925: 18           	clc
  2721 00:0926: 69 10 00     	adc	#L76+8
  2722 00:0929: 1B           	tcs
  2723 00:092A: 98           	tya
  2724 00:092B: 6B           	rtl
  2725                        	.line	208
  2726                        	.endblock	208
  2727             00000008   L76	equ	8
  2728             00000005   L77	equ	5
  2729                        	ends
  2730                        	efunc
  2731                        	.endfunc	208,5,8
  2732                        	.line	208
  2733                        	.line	212
  2734                        	.line	213
  2735                        	code
  2736                        	xdef	~~umm_poison_free
  2737                        	func
  2738                        	.function	213
  2739                        ~~umm_poison_free:
  2740                        	longa	on
  2741                        	longi	on
  2742 00:092C: 3B           	tsc
  2743 00:092D: 38           	sec
  2744 00:092E: E9 00 00     	sbc	#L80
  2745 00:0931: 1B           	tcs
  2746 00:0932: 0B           	phd
  2747 00:0933: 5B           	tcd
  2748             00000004   ptr_0	set	4
  2749                        	.block	213
  2750                        	.sym	ptr,4,129,6,32
  2751                        	.line	215
  2752 00:0934: D4 06        	pei	<L80+ptr_0+2
  2753 00:0936: D4 04        	pei	<L80+ptr_0
  2754 00:0938: 22 xx xx xx  	jsl	~~get_unpoisoned
  2755 00:093C: 85 04        	sta	<L80+ptr_0
  2756 00:093E: 86 06        	stx	<L80+ptr_0+2
  2757                        	.line	217
  Mon Aug  9 2021 16:52                                                Page 54


  2758 00:0940: D4 06        	pei	<L80+ptr_0+2
  2759 00:0942: D4 04        	pei	<L80+ptr_0
  2760 00:0944: 22 xx xx xx  	jsl	~~umm_free
  2761                        	.line	218
  2762                        L83:
  2763 00:0948: A5 02        	lda	<L80+2
  2764 00:094A: 85 06        	sta	<L80+2+4
  2765 00:094C: A5 01        	lda	<L80+1
  2766 00:094E: 85 05        	sta	<L80+1+4
  2767 00:0950: 2B           	pld
  2768 00:0951: 3B           	tsc
  2769 00:0952: 18           	clc
  2770 00:0953: 69 04 00     	adc	#L80+4
  2771 00:0956: 1B           	tcs
  2772 00:0957: 6B           	rtl
  2773                        	.endblock	218
  2774             00000000   L80	equ	0
  2775             00000001   L81	equ	1
  2776                        	ends
  2777                        	efunc
  2778                        	.endfunc	218,1,0
  2779                        	.line	218
  2780                        	.line	225
  2781                        	.line	226
  2782                        	code
  2783                        	xdef	~~umm_poison_check
  2784                        	func
  2785                        	.function	226
  2786                        ~~umm_poison_check:
  2787                        	longa	on
  2788                        	longi	on
  2789 00:0958: 3B           	tsc
  2790 00:0959: 38           	sec
  2791 00:095A: E9 0E 00     	sbc	#L84
  2792 00:095D: 1B           	tcs
  2793 00:095E: 0B           	phd
  2794 00:095F: 5B           	tcd
  2795                        	.block	226
  2796             00000000   ok_1	set	0
  2797             00000002   cur_1	set	2
  2798                        	.sym	ok,0,5,1,16
  2799                        	.sym	cur,2,18,1,32
  2800 00:0960: A9 01 00     	lda	#$1
  2801 00:0963: 85 09        	sta	<L85+ok_1
  2802                        	.line	230
  2803 00:0965: AD xx xx     	lda	|~~umm_heap
  2804 00:0968: 0D xx xx     	ora	|~~umm_heap+2
  2805 00:096B: F0 03        	beq	L87
  2806 00:096D: 82 04 00     	brl	L10032
  2807                        L87:
  2808                        	.line	231
  2809                        	.line	232
  2810 00:0970: 22 xx xx xx  	jsl	~~umm_init
  2811                        	.line	233
  2812                        L10032:
  2813                        	.line	236
  2814 00:0974: AD xx xx     	lda	|~~umm_heap
  2815 00:0977: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 55


  2816 00:0979: AD xx xx     	lda	|~~umm_heap+2
  2817 00:097C: 85 03        	sta	<R0+2
  2818 00:097E: A7 01        	lda	[<R0]
  2819 00:0980: 29 FF 7F     	and	#<$7fff
  2820 00:0983: 85 0B        	sta	<L85+cur_1
  2821 00:0985: 64 0D        	stz	<L85+cur_1+2
  2822                        	.line	238
  2823                        L10033:
  2824 00:0987: A5 0B        	lda	<L85+cur_1
  2825 00:0989: 85 01        	sta	<R0
  2826 00:098B: A5 0D        	lda	<L85+cur_1+2
  2827 00:098D: 85 03        	sta	<R0+2
  2828 00:098F: 06 01        	asl	<R0
  2829 00:0991: 26 03        	rol	<R0+2
  2830 00:0993: 06 01        	asl	<R0
  2831 00:0995: 26 03        	rol	<R0+2
  2832 00:0997: 06 01        	asl	<R0
  2833 00:0999: 26 03        	rol	<R0+2
  2834 00:099B: 06 01        	asl	<R0
  2835 00:099D: 26 03        	rol	<R0+2
  2836 00:099F: 18           	clc
  2837 00:09A0: AD xx xx     	lda	|~~umm_heap
  2838 00:09A3: 65 01        	adc	<R0
  2839 00:09A5: 85 05        	sta	<R1
  2840 00:09A7: AD xx xx     	lda	|~~umm_heap+2
  2841 00:09AA: 65 03        	adc	<R0+2
  2842 00:09AC: 85 07        	sta	<R1+2
  2843 00:09AE: A7 05        	lda	[<R1]
  2844 00:09B0: 29 FF 7F     	and	#<$7fff
  2845 00:09B3: D0 03        	bne	L88
  2846 00:09B5: 82 9F 00     	brl	L10034
  2847                        L88:
  2848                        	.line	239
  2849                        	.line	240
  2850 00:09B8: A5 0B        	lda	<L85+cur_1
  2851 00:09BA: 85 01        	sta	<R0
  2852 00:09BC: A5 0D        	lda	<L85+cur_1+2
  2853 00:09BE: 85 03        	sta	<R0+2
  2854 00:09C0: 06 01        	asl	<R0
  2855 00:09C2: 26 03        	rol	<R0+2
  2856 00:09C4: 06 01        	asl	<R0
  2857 00:09C6: 26 03        	rol	<R0+2
  2858 00:09C8: 06 01        	asl	<R0
  2859 00:09CA: 26 03        	rol	<R0+2
  2860 00:09CC: 06 01        	asl	<R0
  2861 00:09CE: 26 03        	rol	<R0+2
  2862 00:09D0: 18           	clc
  2863 00:09D1: AD xx xx     	lda	|~~umm_heap
  2864 00:09D4: 65 01        	adc	<R0
  2865 00:09D6: 85 05        	sta	<R1
  2866 00:09D8: AD xx xx     	lda	|~~umm_heap+2
  2867 00:09DB: 65 03        	adc	<R0+2
  2868 00:09DD: 85 07        	sta	<R1+2
  2869 00:09DF: A7 05        	lda	[<R1]
  2870 00:09E1: 29 00 80     	and	#<$8000
  2871 00:09E4: F0 03        	beq	L89
  2872 00:09E6: 82 3B 00     	brl	L10035
  2873                        L89:
  Mon Aug  9 2021 16:52                                                Page 56


  2874                        	.line	241
  2875                        	.line	243
  2876 00:09E9: A5 0B        	lda	<L85+cur_1
  2877 00:09EB: 85 01        	sta	<R0
  2878 00:09ED: A5 0D        	lda	<L85+cur_1+2
  2879 00:09EF: 85 03        	sta	<R0+2
  2880 00:09F1: 06 01        	asl	<R0
  2881 00:09F3: 26 03        	rol	<R0+2
  2882 00:09F5: 06 01        	asl	<R0
  2883 00:09F7: 26 03        	rol	<R0+2
  2884 00:09F9: 06 01        	asl	<R0
  2885 00:09FB: 26 03        	rol	<R0+2
  2886 00:09FD: 06 01        	asl	<R0
  2887 00:09FF: 26 03        	rol	<R0+2
  2888 00:0A01: 18           	clc
  2889 00:0A02: AD xx xx     	lda	|~~umm_heap
  2890 00:0A05: 65 01        	adc	<R0
  2891 00:0A07: 85 05        	sta	<R1
  2892 00:0A09: AD xx xx     	lda	|~~umm_heap+2
  2893 00:0A0C: 65 03        	adc	<R0+2
  2894 00:0A0E: 85 07        	sta	<R1+2
  2895 00:0A10: D4 07        	pei	<R1+2
  2896 00:0A12: D4 05        	pei	<R1
  2897 00:0A14: 22 xx xx xx  	jsl	~~check_poison_block
  2898 00:0A18: 85 09        	sta	<L85+ok_1
  2899                        	.line	244
  2900 00:0A1A: A5 09        	lda	<L85+ok_1
  2901 00:0A1C: F0 03        	beq	L90
  2902 00:0A1E: 82 03 00     	brl	L10036
  2903                        L90:
  2904                        	.line	245
  2905                        	.line	246
  2906 00:0A21: 82 33 00     	brl	L10034
  2907                        	.line	247
  2908                        L10036:
  2909                        	.line	248
  2910                        L10035:
  2911                        	.line	250
  2912 00:0A24: A5 0B        	lda	<L85+cur_1
  2913 00:0A26: 85 01        	sta	<R0
  2914 00:0A28: A5 0D        	lda	<L85+cur_1+2
  2915 00:0A2A: 85 03        	sta	<R0+2
  2916 00:0A2C: 06 01        	asl	<R0
  2917 00:0A2E: 26 03        	rol	<R0+2
  2918 00:0A30: 06 01        	asl	<R0
  2919 00:0A32: 26 03        	rol	<R0+2
  2920 00:0A34: 06 01        	asl	<R0
  2921 00:0A36: 26 03        	rol	<R0+2
  2922 00:0A38: 06 01        	asl	<R0
  2923 00:0A3A: 26 03        	rol	<R0+2
  2924 00:0A3C: 18           	clc
  2925 00:0A3D: AD xx xx     	lda	|~~umm_heap
  2926 00:0A40: 65 01        	adc	<R0
  2927 00:0A42: 85 05        	sta	<R1
  2928 00:0A44: AD xx xx     	lda	|~~umm_heap+2
  2929 00:0A47: 65 03        	adc	<R0+2
  2930 00:0A49: 85 07        	sta	<R1+2
  2931 00:0A4B: A7 05        	lda	[<R1]
  Mon Aug  9 2021 16:52                                                Page 57


  2932 00:0A4D: 29 FF 7F     	and	#<$7fff
  2933 00:0A50: 85 0B        	sta	<L85+cur_1
  2934 00:0A52: 64 0D        	stz	<L85+cur_1+2
  2935                        	.line	251
  2936 00:0A54: 82 30 FF     	brl	L10033
  2937                        L10034:
  2938                        	.line	253
  2939 00:0A57: A5 09        	lda	<L85+ok_1
  2940                        L91:
  2941 00:0A59: A8           	tay
  2942 00:0A5A: 2B           	pld
  2943 00:0A5B: 3B           	tsc
  2944 00:0A5C: 18           	clc
  2945 00:0A5D: 69 0E 00     	adc	#L84
  2946 00:0A60: 1B           	tcs
  2947 00:0A61: 98           	tya
  2948 00:0A62: 6B           	rtl
  2949                        	.line	254
  2950                        	.endblock	254
  2951             0000000E   L84	equ	14
  2952             00000009   L85	equ	9
  2953                        	ends
  2954                        	efunc
  2955                        	.endfunc	254,9,14
  2956                        	.line	254
  2957                        	.line	259
  2958                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",97
  2959                        ;#include "umm_info.c"
  2960                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_info.c",0
  2961                        	.line	20
  2962                        	.line	21
  2963                        	code
  2964                        	xdef	~~umm_info
  2965                        	func
  2966                        	.function	21
  2967                        ~~umm_info:
  2968                        	longa	on
  2969                        	longi	on
  2970 00:0A63: 3B           	tsc
  2971 00:0A64: 38           	sec
  2972 00:0A65: E9 16 00     	sbc	#L92
  2973 00:0A68: 1B           	tcs
  2974 00:0A69: 0B           	phd
  2975 00:0A6A: 5B           	tcd
  2976             00000004   ptr_0	set	4
  2977             00000008   force_0	set	8
  2978                        	.block	21
  2979             00000000   blockNo_1	set	0
  2980                        	.sym	blockNo,0,15,1,16
  2981                        	.sym	ptr,4,129,6,32
  2982                        	.sym	force,8,5,6,16
  2983 00:0A6B: 64 11        	stz	<L93+blockNo_1
  2984                        	.line	26
  2985                        	.line	32
  2986 00:0A6D: F4 20 00     	pea	#<$20
  2987 00:0A70: F4 00 00     	pea	#<$0
  Mon Aug  9 2021 16:52                                                Page 58


  2988 00:0A73: A9 xx xx     	lda	#<~~ummHeapInfo
  2989 00:0A76: 85 01        	sta	<R0
  2990                        	xref	_BEG_DATA
  2991 00:0A78: A9 xx xx     	lda	#_BEG_DATA>>16
  2992 00:0A7B: 85 03        	sta	<R0+2
  2993 00:0A7D: D4 03        	pei	<R0+2
  2994 00:0A7F: D4 01        	pei	<R0
  2995 00:0A81: 22 xx xx xx  	jsl	~~memset
  2996                        	.line	51
  2997 00:0A85: A5 11        	lda	<L93+blockNo_1
  2998 00:0A87: 85 05        	sta	<R1
  2999 00:0A89: 64 07        	stz	<R1+2
  3000 00:0A8B: D4 07        	pei	<R1+2
  3001 00:0A8D: D4 05        	pei	<R1
  3002 00:0A8F: A9 04 00     	lda	#$4
  3003                        	xref	~~~lasl
  3004 00:0A92: 22 xx xx xx  	jsl	~~~lasl
  3005 00:0A96: 85 01        	sta	<R0
  3006 00:0A98: 86 03        	stx	<R0+2
  3007 00:0A9A: 18           	clc
  3008 00:0A9B: AD xx xx     	lda	|~~umm_heap
  3009 00:0A9E: 65 01        	adc	<R0
  3010 00:0AA0: 85 09        	sta	<R2
  3011 00:0AA2: AD xx xx     	lda	|~~umm_heap+2
  3012 00:0AA5: 65 03        	adc	<R0+2
  3013 00:0AA7: 85 0B        	sta	<R2+2
  3014 00:0AA9: A7 09        	lda	[<R2]
  3015 00:0AAB: 29 FF 7F     	and	#<$7fff
  3016 00:0AAE: 85 01        	sta	<R0
  3017 00:0AB0: 64 03        	stz	<R0+2
  3018 00:0AB2: A5 01        	lda	<R0
  3019 00:0AB4: 85 11        	sta	<L93+blockNo_1
  3020                        	.line	53
  3021 00:0AB6: A9 10 00     	lda	#$10
  3022 00:0AB9: 8D xx xx     	sta	|~~ummHeapInfo+28
  3023 00:0ABC: A9 00 00     	lda	#$0
  3024 00:0ABF: 8D xx xx     	sta	|~~ummHeapInfo+28+2
  3025                        	.line	55
  3026                        L10037:
  3027 00:0AC2: A5 11        	lda	<L93+blockNo_1
  3028 00:0AC4: 85 05        	sta	<R1
  3029 00:0AC6: 64 07        	stz	<R1+2
  3030 00:0AC8: D4 07        	pei	<R1+2
  3031 00:0ACA: D4 05        	pei	<R1
  3032 00:0ACC: A9 04 00     	lda	#$4
  3033                        	xref	~~~lasl
  3034 00:0ACF: 22 xx xx xx  	jsl	~~~lasl
  3035 00:0AD3: 85 01        	sta	<R0
  3036 00:0AD5: 86 03        	stx	<R0+2
  3037 00:0AD7: 18           	clc
  3038 00:0AD8: AD xx xx     	lda	|~~umm_heap
  3039 00:0ADB: 65 01        	adc	<R0
  3040 00:0ADD: 85 09        	sta	<R2
  3041 00:0ADF: AD xx xx     	lda	|~~umm_heap+2
  3042 00:0AE2: 65 03        	adc	<R0+2
  3043 00:0AE4: 85 0B        	sta	<R2+2
  3044 00:0AE6: A7 09        	lda	[<R2]
  3045 00:0AE8: 29 FF 7F     	and	#<$7fff
  Mon Aug  9 2021 16:52                                                Page 59


  3046 00:0AEB: D0 03        	bne	L95
  3047 00:0AED: 82 52 01     	brl	L10038
  3048                        L95:
  3049                        	.line	56
  3050                        	.block	59
  3051             00000002   curBlocks_2	set	2
  3052                        	.sym	curBlocks,2,18,1,32
  3053 00:0AF0: A5 11        	lda	<L93+blockNo_1
  3054 00:0AF2: 85 01        	sta	<R0
  3055 00:0AF4: 64 03        	stz	<R0+2
  3056 00:0AF6: A5 11        	lda	<L93+blockNo_1
  3057 00:0AF8: 85 09        	sta	<R2
  3058 00:0AFA: 64 0B        	stz	<R2+2
  3059 00:0AFC: D4 0B        	pei	<R2+2
  3060 00:0AFE: D4 09        	pei	<R2
  3061 00:0B00: A9 04 00     	lda	#$4
  3062                        	xref	~~~lasl
  3063 00:0B03: 22 xx xx xx  	jsl	~~~lasl
  3064 00:0B07: 85 05        	sta	<R1
  3065 00:0B09: 86 07        	stx	<R1+2
  3066 00:0B0B: 18           	clc
  3067 00:0B0C: AD xx xx     	lda	|~~umm_heap
  3068 00:0B0F: 65 05        	adc	<R1
  3069 00:0B11: 85 0D        	sta	<R3
  3070 00:0B13: AD xx xx     	lda	|~~umm_heap+2
  3071 00:0B16: 65 07        	adc	<R1+2
  3072 00:0B18: 85 0F        	sta	<R3+2
  3073 00:0B1A: A7 0D        	lda	[<R3]
  3074 00:0B1C: 29 FF 7F     	and	#<$7fff
  3075 00:0B1F: 85 05        	sta	<R1
  3076 00:0B21: 64 07        	stz	<R1+2
  3077 00:0B23: 38           	sec
  3078 00:0B24: A5 05        	lda	<R1
  3079 00:0B26: E5 01        	sbc	<R0
  3080 00:0B28: 85 13        	sta	<L93+curBlocks_2
  3081 00:0B2A: A5 07        	lda	<R1+2
  3082 00:0B2C: E5 03        	sbc	<R0+2
  3083 00:0B2E: 85 15        	sta	<L93+curBlocks_2+2
  3084                        	.line	59
  3085 00:0B30: EE xx xx     	inc	|~~ummHeapInfo
  3086 00:0B33: D0 03        	bne	L97
  3087 00:0B35: EE xx xx     	inc	|~~ummHeapInfo+2
  3088                        L97:
  3089                        	.line	60
  3090 00:0B38: 18           	clc
  3091 00:0B39: AD xx xx     	lda	|~~ummHeapInfo+12
  3092 00:0B3C: 65 13        	adc	<L93+curBlocks_2
  3093 00:0B3E: 8D xx xx     	sta	|~~ummHeapInfo+12
  3094 00:0B41: AD xx xx     	lda	|~~ummHeapInfo+12+2
  3095 00:0B44: 65 15        	adc	<L93+curBlocks_2+2
  3096 00:0B46: 8D xx xx     	sta	|~~ummHeapInfo+12+2
  3097                        	.line	64
  3098 00:0B49: A5 11        	lda	<L93+blockNo_1
  3099 00:0B4B: 85 05        	sta	<R1
  3100 00:0B4D: 64 07        	stz	<R1+2
  3101 00:0B4F: D4 07        	pei	<R1+2
  3102 00:0B51: D4 05        	pei	<R1
  3103 00:0B53: A9 04 00     	lda	#$4
  Mon Aug  9 2021 16:52                                                Page 60


  3104                        	xref	~~~lasl
  3105 00:0B56: 22 xx xx xx  	jsl	~~~lasl
  3106 00:0B5A: 85 01        	sta	<R0
  3107 00:0B5C: 86 03        	stx	<R0+2
  3108 00:0B5E: 18           	clc
  3109 00:0B5F: AD xx xx     	lda	|~~umm_heap
  3110 00:0B62: 65 01        	adc	<R0
  3111 00:0B64: 85 09        	sta	<R2
  3112 00:0B66: AD xx xx     	lda	|~~umm_heap+2
  3113 00:0B69: 65 03        	adc	<R0+2
  3114 00:0B6B: 85 0B        	sta	<R2+2
  3115 00:0B6D: A7 09        	lda	[<R2]
  3116 00:0B6F: 29 00 80     	and	#<$8000
  3117 00:0B72: D0 03        	bne	L98
  3118 00:0B74: 82 7E 00     	brl	L10039
  3119                        L98:
  3120                        	.line	65
  3121                        	.line	66
  3122 00:0B77: EE xx xx     	inc	|~~ummHeapInfo+8
  3123 00:0B7A: D0 03        	bne	L99
  3124 00:0B7C: EE xx xx     	inc	|~~ummHeapInfo+8+2
  3125                        L99:
  3126                        	.line	67
  3127 00:0B7F: 18           	clc
  3128 00:0B80: AD xx xx     	lda	|~~ummHeapInfo+20
  3129 00:0B83: 65 13        	adc	<L93+curBlocks_2
  3130 00:0B85: 8D xx xx     	sta	|~~ummHeapInfo+20
  3131 00:0B88: AD xx xx     	lda	|~~ummHeapInfo+20+2
  3132 00:0B8B: 65 15        	adc	<L93+curBlocks_2+2
  3133 00:0B8D: 8D xx xx     	sta	|~~ummHeapInfo+20+2
  3134                        	.line	69
  3135 00:0B90: AD xx xx     	lda	|~~ummHeapInfo+24
  3136 00:0B93: C5 13        	cmp	<L93+curBlocks_2
  3137 00:0B95: AD xx xx     	lda	|~~ummHeapInfo+24+2
  3138 00:0B98: E5 15        	sbc	<L93+curBlocks_2+2
  3139 00:0B9A: 90 03        	bcc	L100
  3140 00:0B9C: 82 0A 00     	brl	L10040
  3141                        L100:
  3142                        	.line	70
  3143                        	.line	71
  3144 00:0B9F: A5 13        	lda	<L93+curBlocks_2
  3145 00:0BA1: 8D xx xx     	sta	|~~ummHeapInfo+24
  3146 00:0BA4: A5 15        	lda	<L93+curBlocks_2+2
  3147 00:0BA6: 8D xx xx     	sta	|~~ummHeapInfo+24+2
  3148                        	.line	72
  3149                        L10040:
  3150                        	.line	86
  3151 00:0BA9: A5 11        	lda	<L93+blockNo_1
  3152 00:0BAB: 85 05        	sta	<R1
  3153 00:0BAD: 64 07        	stz	<R1+2
  3154 00:0BAF: D4 07        	pei	<R1+2
  3155 00:0BB1: D4 05        	pei	<R1
  3156 00:0BB3: A9 04 00     	lda	#$4
  3157                        	xref	~~~lasl
  3158 00:0BB6: 22 xx xx xx  	jsl	~~~lasl
  3159 00:0BBA: 85 01        	sta	<R0
  3160 00:0BBC: 86 03        	stx	<R0+2
  3161 00:0BBE: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 61


  3162 00:0BBF: AD xx xx     	lda	|~~umm_heap
  3163 00:0BC2: 65 01        	adc	<R0
  3164 00:0BC4: 85 09        	sta	<R2
  3165 00:0BC6: AD xx xx     	lda	|~~umm_heap+2
  3166 00:0BC9: 65 03        	adc	<R0+2
  3167 00:0BCB: 85 0B        	sta	<R2+2
  3168 00:0BCD: A5 09        	lda	<R2
  3169 00:0BCF: C5 1A        	cmp	<L92+ptr_0
  3170 00:0BD1: D0 04        	bne	L101
  3171 00:0BD3: A5 0B        	lda	<R2+2
  3172 00:0BD5: C5 1C        	cmp	<L92+ptr_0+2
  3173                        L101:
  3174 00:0BD7: F0 03        	beq	L102
  3175 00:0BD9: 82 16 00     	brl	L10041
  3176                        L102:
  3177                        	.line	87
  3178                        	.line	90
  3179                        	.line	92
  3180 00:0BDC: A6 1C        	ldx	<L92+ptr_0+2
  3181 00:0BDE: A5 1A        	lda	<L92+ptr_0
  3182                        L103:
  3183 00:0BE0: A8           	tay
  3184 00:0BE1: A5 18        	lda	<L92+2
  3185 00:0BE3: 85 1E        	sta	<L92+2+6
  3186 00:0BE5: A5 17        	lda	<L92+1
  3187 00:0BE7: 85 1D        	sta	<L92+1+6
  3188 00:0BE9: 2B           	pld
  3189 00:0BEA: 3B           	tsc
  3190 00:0BEB: 18           	clc
  3191 00:0BEC: 69 1C 00     	adc	#L92+6
  3192 00:0BEF: 1B           	tcs
  3193 00:0BF0: 98           	tya
  3194 00:0BF1: 6B           	rtl
  3195                        	.line	93
  3196                        L10041:
  3197                        	.line	94
  3198 00:0BF2: 82 19 00     	brl	L10042
  3199                        L10039:
  3200                        	.line	96
  3201                        	.line	97
  3202 00:0BF5: EE xx xx     	inc	|~~ummHeapInfo+4
  3203 00:0BF8: D0 03        	bne	L104
  3204 00:0BFA: EE xx xx     	inc	|~~ummHeapInfo+4+2
  3205                        L104:
  3206                        	.line	98
  3207 00:0BFD: 18           	clc
  3208 00:0BFE: AD xx xx     	lda	|~~ummHeapInfo+16
  3209 00:0C01: 65 13        	adc	<L93+curBlocks_2
  3210 00:0C03: 8D xx xx     	sta	|~~ummHeapInfo+16
  3211 00:0C06: AD xx xx     	lda	|~~ummHeapInfo+16+2
  3212 00:0C09: 65 15        	adc	<L93+curBlocks_2+2
  3213 00:0C0B: 8D xx xx     	sta	|~~ummHeapInfo+16+2
  3214                        	.line	106
  3215                        L10042:
  3216                        	.line	108
  3217 00:0C0E: A5 11        	lda	<L93+blockNo_1
  3218 00:0C10: 85 05        	sta	<R1
  3219 00:0C12: 64 07        	stz	<R1+2
  Mon Aug  9 2021 16:52                                                Page 62


  3220 00:0C14: D4 07        	pei	<R1+2
  3221 00:0C16: D4 05        	pei	<R1
  3222 00:0C18: A9 04 00     	lda	#$4
  3223                        	xref	~~~lasl
  3224 00:0C1B: 22 xx xx xx  	jsl	~~~lasl
  3225 00:0C1F: 85 01        	sta	<R0
  3226 00:0C21: 86 03        	stx	<R0+2
  3227 00:0C23: 18           	clc
  3228 00:0C24: AD xx xx     	lda	|~~umm_heap
  3229 00:0C27: 65 01        	adc	<R0
  3230 00:0C29: 85 09        	sta	<R2
  3231 00:0C2B: AD xx xx     	lda	|~~umm_heap+2
  3232 00:0C2E: 65 03        	adc	<R0+2
  3233 00:0C30: 85 0B        	sta	<R2+2
  3234 00:0C32: A7 09        	lda	[<R2]
  3235 00:0C34: 29 FF 7F     	and	#<$7fff
  3236 00:0C37: 85 01        	sta	<R0
  3237 00:0C39: 64 03        	stz	<R0+2
  3238 00:0C3B: A5 01        	lda	<R0
  3239 00:0C3D: 85 11        	sta	<L93+blockNo_1
  3240                        	.endblock	109
  3241                        	.line	109
  3242 00:0C3F: 82 80 FE     	brl	L10037
  3243                        L10038:
  3244                        	.line	116
  3245                        	.block	118
  3246             00000002   curBlocks_3	set	2
  3247                        	.sym	curBlocks,2,18,1,32
  3248 00:0C42: A5 11        	lda	<L93+blockNo_1
  3249 00:0C44: 85 01        	sta	<R0
  3250 00:0C46: 64 03        	stz	<R0+2
  3251 00:0C48: 38           	sec
  3252 00:0C49: AD xx xx     	lda	|~~umm_numblocks
  3253 00:0C4C: E5 01        	sbc	<R0
  3254 00:0C4E: 85 13        	sta	<L93+curBlocks_3
  3255 00:0C50: AD xx xx     	lda	|~~umm_numblocks+2
  3256 00:0C53: E5 03        	sbc	<R0+2
  3257 00:0C55: 85 15        	sta	<L93+curBlocks_3+2
  3258                        	.line	118
  3259 00:0C57: 18           	clc
  3260 00:0C58: AD xx xx     	lda	|~~ummHeapInfo+20
  3261 00:0C5B: 65 13        	adc	<L93+curBlocks_3
  3262 00:0C5D: 8D xx xx     	sta	|~~ummHeapInfo+20
  3263 00:0C60: AD xx xx     	lda	|~~ummHeapInfo+20+2
  3264 00:0C63: 65 15        	adc	<L93+curBlocks_3+2
  3265 00:0C65: 8D xx xx     	sta	|~~ummHeapInfo+20+2
  3266                        	.line	119
  3267 00:0C68: 18           	clc
  3268 00:0C69: AD xx xx     	lda	|~~ummHeapInfo+12
  3269 00:0C6C: 65 13        	adc	<L93+curBlocks_3
  3270 00:0C6E: 8D xx xx     	sta	|~~ummHeapInfo+12
  3271 00:0C71: AD xx xx     	lda	|~~ummHeapInfo+12+2
  3272 00:0C74: 65 15        	adc	<L93+curBlocks_3+2
  3273 00:0C76: 8D xx xx     	sta	|~~ummHeapInfo+12+2
  3274                        	.line	121
  3275 00:0C79: AD xx xx     	lda	|~~ummHeapInfo+24
  3276 00:0C7C: C5 13        	cmp	<L93+curBlocks_3
  3277 00:0C7E: AD xx xx     	lda	|~~ummHeapInfo+24+2
  Mon Aug  9 2021 16:52                                                Page 63


  3278 00:0C81: E5 15        	sbc	<L93+curBlocks_3+2
  3279 00:0C83: 90 03        	bcc	L106
  3280 00:0C85: 82 0A 00     	brl	L10043
  3281                        L106:
  3282                        	.line	122
  3283                        	.line	123
  3284 00:0C88: A5 13        	lda	<L93+curBlocks_3
  3285 00:0C8A: 8D xx xx     	sta	|~~ummHeapInfo+24
  3286 00:0C8D: A5 15        	lda	<L93+curBlocks_3+2
  3287 00:0C8F: 8D xx xx     	sta	|~~ummHeapInfo+24+2
  3288                        	.line	124
  3289                        L10043:
  3290                        	.endblock	125
  3291                        	.line	125
  3292                        	.line	152
  3293                        	.line	154
  3294 00:0C92: A9 xx xx     	lda	#<~~ummHeapInfo
  3295 00:0C95: 85 01        	sta	<R0
  3296                        	xref	_BEG_DATA
  3297 00:0C97: A9 xx xx     	lda	#_BEG_DATA>>16
  3298 00:0C9A: 85 03        	sta	<R0+2
  3299 00:0C9C: A6 03        	ldx	<R0+2
  3300 00:0C9E: A5 01        	lda	<R0
  3301 00:0CA0: 82 3D FF     	brl	L103
  3302                        	.line	155
  3303                        	.endblock	155
  3304             00000016   L92	equ	22
  3305             00000011   L93	equ	17
  3306                        	ends
  3307                        	efunc
  3308                        	.endfunc	155,17,22
  3309                        	.line	155
  3310                        	.line	159
  3311                        	.line	160
  3312                        	code
  3313                        	xdef	~~umm_free_heap_size
  3314                        	func
  3315                        	.function	160
  3316                        ~~umm_free_heap_size:
  3317                        	longa	on
  3318                        	longi	on
  3319 00:0CA3: 3B           	tsc
  3320 00:0CA4: 38           	sec
  3321 00:0CA5: E9 04 00     	sbc	#L107
  3322 00:0CA8: 1B           	tcs
  3323 00:0CA9: 0B           	phd
  3324 00:0CAA: 5B           	tcd
  3325                        	.block	160
  3326                        	.line	161
  3327 00:0CAB: F4 00 00     	pea	#<$0
  3328 00:0CAE: F4 00 00     	pea	#^$0
  3329 00:0CB1: F4 00 00     	pea	#<$0
  3330 00:0CB4: 22 xx xx xx  	jsl	~~umm_info
  3331                        	.line	162
  3332 00:0CB8: AD xx xx     	lda	|~~ummHeapInfo+20
  3333 00:0CBB: 85 01        	sta	<R0
  3334 00:0CBD: AD xx xx     	lda	|~~ummHeapInfo+20+2
  3335 00:0CC0: 85 03        	sta	<R0+2
  Mon Aug  9 2021 16:52                                                Page 64


  3336 00:0CC2: 06 01        	asl	<R0
  3337 00:0CC4: 26 03        	rol	<R0+2
  3338 00:0CC6: 06 01        	asl	<R0
  3339 00:0CC8: 26 03        	rol	<R0+2
  3340 00:0CCA: 06 01        	asl	<R0
  3341 00:0CCC: 26 03        	rol	<R0+2
  3342 00:0CCE: 06 01        	asl	<R0
  3343 00:0CD0: 26 03        	rol	<R0+2
  3344 00:0CD2: A6 03        	ldx	<R0+2
  3345 00:0CD4: A5 01        	lda	<R0
  3346                        L110:
  3347 00:0CD6: A8           	tay
  3348 00:0CD7: 2B           	pld
  3349 00:0CD8: 3B           	tsc
  3350 00:0CD9: 18           	clc
  3351 00:0CDA: 69 04 00     	adc	#L107
  3352 00:0CDD: 1B           	tcs
  3353 00:0CDE: 98           	tya
  3354 00:0CDF: 6B           	rtl
  3355                        	.line	163
  3356                        	.endblock	163
  3357             00000004   L107	equ	4
  3358             00000005   L108	equ	5
  3359                        	ends
  3360                        	efunc
  3361                        	.endfunc	163,5,4
  3362                        	.line	163
  3363                        	.line	166
  3364                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",98
  3365                        ;
  3366                        ;/* ----------------------------------------------
                    -------------------------- */
  3367                        ;
  3368                        ;static unsigned long umm_blocks(ULONG size)
  3369                        ;{
  3370                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.c",102
  3371                        	.line	103
  3372                        	code
  3373                        	func
  3374                        	.function	103
  3375                        ~~umm_blocks:
  3376                        	longa	on
  3377                        	longi	on
  3378 00:0CE0: 3B           	tsc
  3379 00:0CE1: 38           	sec
  3380 00:0CE2: E9 08 00     	sbc	#L111
  3381 00:0CE5: 1B           	tcs
  3382 00:0CE6: 0B           	phd
  3383 00:0CE7: 5B           	tcd
  3384             00000004   size_0	set	4
  3385                        	.block	103
  3386                        ;
  3387                        ;	/*
  3388                        ;	 * The calculation of the block size is not too 
                    difficult, but there are
  3389                        ;	 * a few little things that we need to be mindfu
  Mon Aug  9 2021 16:52                                                Page 65


                    l of.
  3390                        ;	 *
  3391                        ;	 * When a block removed from the free list, the 
                    space used by the free
  3392                        ;	 * pointers is available for data. That's what t
                    he first calculation
  3393                        ;	 * of size is doing.
  3394                        ;	 */
  3395                        ;
  3396                        ;	if (size <= (sizeof(((umm_block *) 0)->body)))
  3397                        	.sym	size,4,18,6,32
  3398                        	.line	114
  3399                        ;		return (1);
  3400 00:0CE8: A9 08 00     	lda	#$8
  3401 00:0CEB: C5 0C        	cmp	<L111+size_0
  3402 00:0CED: A9 00 00     	lda	#$0
  3403 00:0CF0: E5 0E        	sbc	<L111+size_0+2
  3404 00:0CF2: B0 03        	bcs	L114
  3405 00:0CF4: 82 19 00     	brl	L10044
  3406                        L114:
  3407                        	.line	115
  3408 00:0CF7: A9 00 00     	lda	#$0
  3409 00:0CFA: AA           	tax
  3410 00:0CFB: A9 01 00     	lda	#$1
  3411                        L115:
  3412 00:0CFE: A8           	tay
  3413 00:0CFF: A5 0A        	lda	<L111+2
  3414 00:0D01: 85 0E        	sta	<L111+2+4
  3415 00:0D03: A5 09        	lda	<L111+1
  3416 00:0D05: 85 0D        	sta	<L111+1+4
  3417 00:0D07: 2B           	pld
  3418 00:0D08: 3B           	tsc
  3419 00:0D09: 18           	clc
  3420 00:0D0A: 69 0C 00     	adc	#L111+4
  3421 00:0D0D: 1B           	tcs
  3422 00:0D0E: 98           	tya
  3423 00:0D0F: 6B           	rtl
  3424                        ;
  3425                        ;	/*
  3426                        ;	 * If it's for more than that, then we need to f
                    igure out the number of
  3427                        ;	 * additional whole blocks the size of an umm_bl
                    ock are required.
  3428                        ;	 */
  3429                        ;
  3430                        ;	size -= (1 + (sizeof(((umm_block *) 0)->body)));
  3431                        L10044:
  3432                        	.line	122
  3433 00:0D10: 18           	clc
  3434 00:0D11: A9 F7 FF     	lda	#$fff7
  3435 00:0D14: 65 0C        	adc	<L111+size_0
  3436 00:0D16: 85 0C        	sta	<L111+size_0
  3437 00:0D18: A9 FF FF     	lda	#$ffff
  3438 00:0D1B: 65 0E        	adc	<L111+size_0+2
  3439 00:0D1D: 85 0E        	sta	<L111+size_0+2
  3440                        ;
  3441                        ;	return (2 + size / (sizeof(umm_block)));
  3442                        	.line	124
  Mon Aug  9 2021 16:52                                                Page 66


  3443 00:0D1F: A5 0C        	lda	<L111+size_0
  3444 00:0D21: 85 01        	sta	<R0
  3445 00:0D23: A5 0E        	lda	<L111+size_0+2
  3446 00:0D25: 85 03        	sta	<R0+2
  3447 00:0D27: 46 03        	lsr	<R0+2
  3448 00:0D29: 66 01        	ror	<R0
  3449 00:0D2B: 46 03        	lsr	<R0+2
  3450 00:0D2D: 66 01        	ror	<R0
  3451 00:0D2F: 46 03        	lsr	<R0+2
  3452 00:0D31: 66 01        	ror	<R0
  3453 00:0D33: 46 03        	lsr	<R0+2
  3454 00:0D35: 66 01        	ror	<R0
  3455 00:0D37: 18           	clc
  3456 00:0D38: A9 02 00     	lda	#$2
  3457 00:0D3B: 65 01        	adc	<R0
  3458 00:0D3D: 85 05        	sta	<R1
  3459 00:0D3F: A9 00 00     	lda	#$0
  3460 00:0D42: 65 03        	adc	<R0+2
  3461 00:0D44: 85 07        	sta	<R1+2
  3462 00:0D46: A6 07        	ldx	<R1+2
  3463 00:0D48: A5 05        	lda	<R1
  3464 00:0D4A: 82 B1 FF     	brl	L115
  3465                        ;}
  3466                        	.line	125
  3467                        	.endblock	125
  3468             00000008   L111	equ	8
  3469             00000009   L112	equ	9
  3470                        	ends
  3471                        	efunc
  3472                        	.endfunc	125,9,8
  3473                        	.line	125
  3474                        ;
  3475                        ;/* ----------------------------------------------
                    -------------------------- */
  3476                        ;/*
  3477                        ; * Split the block `c` into two blocks: `c` and `
                    c + blocks`.
  3478                        ; *
  3479                        ; * - `new_freemask` should be `0` if `c + blocks`
                     used, or `UMM_FREELIST_MASK`
  3480                        ; *   otherwise.
  3481                        ; *
  3482                        ; * Note that free pointers are NOT modified by th
                    is function.
  3483                        ; */
  3484                        ;static void umm_split_block(unsigned long c, unsi
                    gned long blocks,
  3485                        ;		unsigned long new_freemask)
  3486                        ;{
  3487                        	.line	136
  3488                        	.line	138
  3489                        	code
  3490                        	func
  3491                        	.function	138
  3492                        ~~umm_split_block:
  3493                        	longa	on
  3494                        	longi	on
  3495 00:0D4D: 3B           	tsc
  Mon Aug  9 2021 16:52                                                Page 67


  3496 00:0D4E: 38           	sec
  3497 00:0D4F: E9 10 00     	sbc	#L116
  3498 00:0D52: 1B           	tcs
  3499 00:0D53: 0B           	phd
  3500 00:0D54: 5B           	tcd
  3501             00000004   c_0	set	4
  3502             00000008   blocks_0	set	8
  3503             0000000C   new_freemask_0	set	12
  3504                        	.block	138
  3505                        ;
  3506                        ;	UMM_NBLOCK(c+blocks) = (UMM_NBLOCK(c) & UMM_BLOC
                    KNO_MASK) | new_freemask;
  3507                        	.sym	c,4,18,6,32
  3508                        	.sym	blocks,8,18,6,32
  3509                        	.sym	new_freemask,12,18,6,32
  3510                        	.line	140
  3511 00:0D55: 18           	clc
  3512 00:0D56: A5 14        	lda	<L116+c_0
  3513 00:0D58: 65 18        	adc	<L116+blocks_0
  3514 00:0D5A: 85 05        	sta	<R1
  3515 00:0D5C: A5 16        	lda	<L116+c_0+2
  3516 00:0D5E: 65 1A        	adc	<L116+blocks_0+2
  3517 00:0D60: 85 07        	sta	<R1+2
  3518 00:0D62: D4 07        	pei	<R1+2
  3519 00:0D64: D4 05        	pei	<R1
  3520 00:0D66: A9 04 00     	lda	#$4
  3521                        	xref	~~~lasl
  3522 00:0D69: 22 xx xx xx  	jsl	~~~lasl
  3523 00:0D6D: 85 01        	sta	<R0
  3524 00:0D6F: 86 03        	stx	<R0+2
  3525 00:0D71: 18           	clc
  3526 00:0D72: AD xx xx     	lda	|~~umm_heap
  3527 00:0D75: 65 01        	adc	<R0
  3528 00:0D77: 85 09        	sta	<R2
  3529 00:0D79: AD xx xx     	lda	|~~umm_heap+2
  3530 00:0D7C: 65 03        	adc	<R0+2
  3531 00:0D7E: 85 0B        	sta	<R2+2
  3532 00:0D80: A5 14        	lda	<L116+c_0
  3533 00:0D82: 85 01        	sta	<R0
  3534 00:0D84: A5 16        	lda	<L116+c_0+2
  3535 00:0D86: 85 03        	sta	<R0+2
  3536 00:0D88: 06 01        	asl	<R0
  3537 00:0D8A: 26 03        	rol	<R0+2
  3538 00:0D8C: 06 01        	asl	<R0
  3539 00:0D8E: 26 03        	rol	<R0+2
  3540 00:0D90: 06 01        	asl	<R0
  3541 00:0D92: 26 03        	rol	<R0+2
  3542 00:0D94: 06 01        	asl	<R0
  3543 00:0D96: 26 03        	rol	<R0+2
  3544 00:0D98: 18           	clc
  3545 00:0D99: AD xx xx     	lda	|~~umm_heap
  3546 00:0D9C: 65 01        	adc	<R0
  3547 00:0D9E: 85 0D        	sta	<R3
  3548 00:0DA0: AD xx xx     	lda	|~~umm_heap+2
  3549 00:0DA3: 65 03        	adc	<R0+2
  3550 00:0DA5: 85 0F        	sta	<R3+2
  3551 00:0DA7: A7 0D        	lda	[<R3]
  3552 00:0DA9: 29 FF 7F     	and	#<$7fff
  Mon Aug  9 2021 16:52                                                Page 68


  3553 00:0DAC: 85 01        	sta	<R0
  3554 00:0DAE: 64 03        	stz	<R0+2
  3555 00:0DB0: A5 1C        	lda	<L116+new_freemask_0
  3556 00:0DB2: 05 01        	ora	<R0
  3557 00:0DB4: 85 0D        	sta	<R3
  3558 00:0DB6: A5 1E        	lda	<L116+new_freemask_0+2
  3559 00:0DB8: 05 03        	ora	<R0+2
  3560 00:0DBA: 85 0F        	sta	<R3+2
  3561 00:0DBC: A5 0D        	lda	<R3
  3562 00:0DBE: 87 09        	sta	[<R2]
  3563 00:0DC0: A5 0F        	lda	<R3+2
  3564 00:0DC2: A0 02 00     	ldy	#$2
  3565 00:0DC5: 97 09        	sta	[<R2],Y
  3566                        ;	UMM_PBLOCK(c+blocks) = c;
  3567                        	.line	141
  3568 00:0DC7: 18           	clc
  3569 00:0DC8: A5 14        	lda	<L116+c_0
  3570 00:0DCA: 65 18        	adc	<L116+blocks_0
  3571 00:0DCC: 85 05        	sta	<R1
  3572 00:0DCE: A5 16        	lda	<L116+c_0+2
  3573 00:0DD0: 65 1A        	adc	<L116+blocks_0+2
  3574 00:0DD2: 85 07        	sta	<R1+2
  3575 00:0DD4: D4 07        	pei	<R1+2
  3576 00:0DD6: D4 05        	pei	<R1
  3577 00:0DD8: A9 04 00     	lda	#$4
  3578                        	xref	~~~lasl
  3579 00:0DDB: 22 xx xx xx  	jsl	~~~lasl
  3580 00:0DDF: 85 01        	sta	<R0
  3581 00:0DE1: 86 03        	stx	<R0+2
  3582 00:0DE3: 18           	clc
  3583 00:0DE4: A9 04 00     	lda	#$4
  3584 00:0DE7: 6D xx xx     	adc	|~~umm_heap
  3585 00:0DEA: 85 09        	sta	<R2
  3586 00:0DEC: A9 00 00     	lda	#$0
  3587 00:0DEF: 6D xx xx     	adc	|~~umm_heap+2
  3588 00:0DF2: 85 0B        	sta	<R2+2
  3589 00:0DF4: 18           	clc
  3590 00:0DF5: A5 09        	lda	<R2
  3591 00:0DF7: 65 01        	adc	<R0
  3592 00:0DF9: 85 0D        	sta	<R3
  3593 00:0DFB: A5 0B        	lda	<R2+2
  3594 00:0DFD: 65 03        	adc	<R0+2
  3595 00:0DFF: 85 0F        	sta	<R3+2
  3596 00:0E01: A5 14        	lda	<L116+c_0
  3597 00:0E03: 87 0D        	sta	[<R3]
  3598 00:0E05: A5 16        	lda	<L116+c_0+2
  3599 00:0E07: A0 02 00     	ldy	#$2
  3600 00:0E0A: 97 0D        	sta	[<R3],Y
  3601                        ;
  3602                        ;	UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (
                    c + blocks);
  3603                        	.line	143
  3604 00:0E0C: A5 14        	lda	<L116+c_0
  3605 00:0E0E: 85 05        	sta	<R1
  3606 00:0E10: A5 16        	lda	<L116+c_0+2
  3607 00:0E12: 85 07        	sta	<R1+2
  3608 00:0E14: 06 05        	asl	<R1
  3609 00:0E16: 26 07        	rol	<R1+2
  Mon Aug  9 2021 16:52                                                Page 69


  3610 00:0E18: 06 05        	asl	<R1
  3611 00:0E1A: 26 07        	rol	<R1+2
  3612 00:0E1C: 06 05        	asl	<R1
  3613 00:0E1E: 26 07        	rol	<R1+2
  3614 00:0E20: 06 05        	asl	<R1
  3615 00:0E22: 26 07        	rol	<R1+2
  3616 00:0E24: 18           	clc
  3617 00:0E25: AD xx xx     	lda	|~~umm_heap
  3618 00:0E28: 65 05        	adc	<R1
  3619 00:0E2A: 85 09        	sta	<R2
  3620 00:0E2C: AD xx xx     	lda	|~~umm_heap+2
  3621 00:0E2F: 65 07        	adc	<R1+2
  3622 00:0E31: 85 0B        	sta	<R2+2
  3623 00:0E33: A7 09        	lda	[<R2]
  3624 00:0E35: 29 FF 7F     	and	#<$7fff
  3625 00:0E38: 85 05        	sta	<R1
  3626 00:0E3A: 64 07        	stz	<R1+2
  3627 00:0E3C: D4 07        	pei	<R1+2
  3628 00:0E3E: D4 05        	pei	<R1
  3629 00:0E40: A9 04 00     	lda	#$4
  3630                        	xref	~~~lasl
  3631 00:0E43: 22 xx xx xx  	jsl	~~~lasl
  3632 00:0E47: 85 01        	sta	<R0
  3633 00:0E49: 86 03        	stx	<R0+2
  3634 00:0E4B: 18           	clc
  3635 00:0E4C: A9 04 00     	lda	#$4
  3636 00:0E4F: 6D xx xx     	adc	|~~umm_heap
  3637 00:0E52: 85 09        	sta	<R2
  3638 00:0E54: A9 00 00     	lda	#$0
  3639 00:0E57: 6D xx xx     	adc	|~~umm_heap+2
  3640 00:0E5A: 85 0B        	sta	<R2+2
  3641 00:0E5C: 18           	clc
  3642 00:0E5D: A5 09        	lda	<R2
  3643 00:0E5F: 65 01        	adc	<R0
  3644 00:0E61: 85 0D        	sta	<R3
  3645 00:0E63: A5 0B        	lda	<R2+2
  3646 00:0E65: 65 03        	adc	<R0+2
  3647 00:0E67: 85 0F        	sta	<R3+2
  3648 00:0E69: 18           	clc
  3649 00:0E6A: A5 14        	lda	<L116+c_0
  3650 00:0E6C: 65 18        	adc	<L116+blocks_0
  3651 00:0E6E: 85 01        	sta	<R0
  3652 00:0E70: A5 16        	lda	<L116+c_0+2
  3653 00:0E72: 65 1A        	adc	<L116+blocks_0+2
  3654 00:0E74: 85 03        	sta	<R0+2
  3655 00:0E76: A5 01        	lda	<R0
  3656 00:0E78: 87 0D        	sta	[<R3]
  3657 00:0E7A: A5 03        	lda	<R0+2
  3658 00:0E7C: A0 02 00     	ldy	#$2
  3659 00:0E7F: 97 0D        	sta	[<R3],Y
  3660                        ;	UMM_NBLOCK(c) = (c + blocks);
  3661                        	.line	144
  3662 00:0E81: A5 14        	lda	<L116+c_0
  3663 00:0E83: 85 01        	sta	<R0
  3664 00:0E85: A5 16        	lda	<L116+c_0+2
  3665 00:0E87: 85 03        	sta	<R0+2
  3666 00:0E89: 06 01        	asl	<R0
  3667 00:0E8B: 26 03        	rol	<R0+2
  Mon Aug  9 2021 16:52                                                Page 70


  3668 00:0E8D: 06 01        	asl	<R0
  3669 00:0E8F: 26 03        	rol	<R0+2
  3670 00:0E91: 06 01        	asl	<R0
  3671 00:0E93: 26 03        	rol	<R0+2
  3672 00:0E95: 06 01        	asl	<R0
  3673 00:0E97: 26 03        	rol	<R0+2
  3674 00:0E99: 18           	clc
  3675 00:0E9A: AD xx xx     	lda	|~~umm_heap
  3676 00:0E9D: 65 01        	adc	<R0
  3677 00:0E9F: 85 05        	sta	<R1
  3678 00:0EA1: AD xx xx     	lda	|~~umm_heap+2
  3679 00:0EA4: 65 03        	adc	<R0+2
  3680 00:0EA6: 85 07        	sta	<R1+2
  3681 00:0EA8: 18           	clc
  3682 00:0EA9: A5 14        	lda	<L116+c_0
  3683 00:0EAB: 65 18        	adc	<L116+blocks_0
  3684 00:0EAD: 85 01        	sta	<R0
  3685 00:0EAF: A5 16        	lda	<L116+c_0+2
  3686 00:0EB1: 65 1A        	adc	<L116+blocks_0+2
  3687 00:0EB3: 85 03        	sta	<R0+2
  3688 00:0EB5: A5 01        	lda	<R0
  3689 00:0EB7: 87 05        	sta	[<R1]
  3690 00:0EB9: A5 03        	lda	<R0+2
  3691 00:0EBB: A0 02 00     	ldy	#$2
  3692 00:0EBE: 97 05        	sta	[<R1],Y
  3693                        ;}
  3694                        	.line	145
  3695                        L119:
  3696 00:0EC0: A5 12        	lda	<L116+2
  3697 00:0EC2: 85 1E        	sta	<L116+2+12
  3698 00:0EC4: A5 11        	lda	<L116+1
  3699 00:0EC6: 85 1D        	sta	<L116+1+12
  3700 00:0EC8: 2B           	pld
  3701 00:0EC9: 3B           	tsc
  3702 00:0ECA: 18           	clc
  3703 00:0ECB: 69 1C 00     	adc	#L116+12
  3704 00:0ECE: 1B           	tcs
  3705 00:0ECF: 6B           	rtl
  3706                        	.endblock	145
  3707             00000010   L116	equ	16
  3708             00000011   L117	equ	17
  3709                        	ends
  3710                        	efunc
  3711                        	.endfunc	145,17,16
  3712                        	.line	145
  3713                        ;
  3714                        ;/* ----------------------------------------------
                    -------------------------- */
  3715                        ;
  3716                        ;static void umm_disconnect_from_free_list(unsigne
                    d long c)
  3717                        ;{
  3718                        	.line	149
  3719                        	.line	150
  3720                        	code
  3721                        	func
  3722                        	.function	150
  3723                        ~~umm_disconnect_from_free_list:
  Mon Aug  9 2021 16:52                                                Page 71


  3724                        	longa	on
  3725                        	longi	on
  3726 00:0ED0: 3B           	tsc
  3727 00:0ED1: 38           	sec
  3728 00:0ED2: E9 10 00     	sbc	#L120
  3729 00:0ED5: 1B           	tcs
  3730 00:0ED6: 0B           	phd
  3731 00:0ED7: 5B           	tcd
  3732             00000004   c_0	set	4
  3733                        	.block	150
  3734                        ;	/* Disconnect this block from the FREE list */
  3735                        ;
  3736                        ;	UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
  3737                        	.sym	c,4,18,6,32
  3738                        	.line	153
  3739 00:0ED8: A5 14        	lda	<L120+c_0
  3740 00:0EDA: 85 05        	sta	<R1
  3741 00:0EDC: A5 16        	lda	<L120+c_0+2
  3742 00:0EDE: 85 07        	sta	<R1+2
  3743 00:0EE0: 06 05        	asl	<R1
  3744 00:0EE2: 26 07        	rol	<R1+2
  3745 00:0EE4: 06 05        	asl	<R1
  3746 00:0EE6: 26 07        	rol	<R1+2
  3747 00:0EE8: 06 05        	asl	<R1
  3748 00:0EEA: 26 07        	rol	<R1+2
  3749 00:0EEC: 06 05        	asl	<R1
  3750 00:0EEE: 26 07        	rol	<R1+2
  3751 00:0EF0: 18           	clc
  3752 00:0EF1: A9 0C 00     	lda	#$c
  3753 00:0EF4: 6D xx xx     	adc	|~~umm_heap
  3754 00:0EF7: 85 09        	sta	<R2
  3755 00:0EF9: A9 00 00     	lda	#$0
  3756 00:0EFC: 6D xx xx     	adc	|~~umm_heap+2
  3757 00:0EFF: 85 0B        	sta	<R2+2
  3758 00:0F01: 18           	clc
  3759 00:0F02: A5 09        	lda	<R2
  3760 00:0F04: 65 05        	adc	<R1
  3761 00:0F06: 85 0D        	sta	<R3
  3762 00:0F08: A5 0B        	lda	<R2+2
  3763 00:0F0A: 65 07        	adc	<R1+2
  3764 00:0F0C: 85 0F        	sta	<R3+2
  3765 00:0F0E: A0 02 00     	ldy	#$2
  3766 00:0F11: B7 0D        	lda	[<R3],Y
  3767 00:0F13: 48           	pha
  3768 00:0F14: A7 0D        	lda	[<R3]
  3769 00:0F16: 48           	pha
  3770 00:0F17: A9 04 00     	lda	#$4
  3771                        	xref	~~~lasl
  3772 00:0F1A: 22 xx xx xx  	jsl	~~~lasl
  3773 00:0F1E: 85 01        	sta	<R0
  3774 00:0F20: 86 03        	stx	<R0+2
  3775 00:0F22: 18           	clc
  3776 00:0F23: A9 08 00     	lda	#$8
  3777 00:0F26: 6D xx xx     	adc	|~~umm_heap
  3778 00:0F29: 85 05        	sta	<R1
  3779 00:0F2B: A9 00 00     	lda	#$0
  3780 00:0F2E: 6D xx xx     	adc	|~~umm_heap+2
  3781 00:0F31: 85 07        	sta	<R1+2
  Mon Aug  9 2021 16:52                                                Page 72


  3782 00:0F33: 18           	clc
  3783 00:0F34: A5 05        	lda	<R1
  3784 00:0F36: 65 01        	adc	<R0
  3785 00:0F38: 85 09        	sta	<R2
  3786 00:0F3A: A5 07        	lda	<R1+2
  3787 00:0F3C: 65 03        	adc	<R0+2
  3788 00:0F3E: 85 0B        	sta	<R2+2
  3789 00:0F40: A5 14        	lda	<L120+c_0
  3790 00:0F42: 85 01        	sta	<R0
  3791 00:0F44: A5 16        	lda	<L120+c_0+2
  3792 00:0F46: 85 03        	sta	<R0+2
  3793 00:0F48: 06 01        	asl	<R0
  3794 00:0F4A: 26 03        	rol	<R0+2
  3795 00:0F4C: 06 01        	asl	<R0
  3796 00:0F4E: 26 03        	rol	<R0+2
  3797 00:0F50: 06 01        	asl	<R0
  3798 00:0F52: 26 03        	rol	<R0+2
  3799 00:0F54: 06 01        	asl	<R0
  3800 00:0F56: 26 03        	rol	<R0+2
  3801 00:0F58: 18           	clc
  3802 00:0F59: A9 08 00     	lda	#$8
  3803 00:0F5C: 6D xx xx     	adc	|~~umm_heap
  3804 00:0F5F: 85 05        	sta	<R1
  3805 00:0F61: A9 00 00     	lda	#$0
  3806 00:0F64: 6D xx xx     	adc	|~~umm_heap+2
  3807 00:0F67: 85 07        	sta	<R1+2
  3808 00:0F69: 18           	clc
  3809 00:0F6A: A5 05        	lda	<R1
  3810 00:0F6C: 65 01        	adc	<R0
  3811 00:0F6E: 85 0D        	sta	<R3
  3812 00:0F70: A5 07        	lda	<R1+2
  3813 00:0F72: 65 03        	adc	<R0+2
  3814 00:0F74: 85 0F        	sta	<R3+2
  3815 00:0F76: A7 0D        	lda	[<R3]
  3816 00:0F78: 87 09        	sta	[<R2]
  3817 00:0F7A: A0 02 00     	ldy	#$2
  3818 00:0F7D: B7 0D        	lda	[<R3],Y
  3819 00:0F7F: A0 02 00     	ldy	#$2
  3820 00:0F82: 97 09        	sta	[<R2],Y
  3821                        ;	UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
  3822                        	.line	154
  3823 00:0F84: A5 14        	lda	<L120+c_0
  3824 00:0F86: 85 05        	sta	<R1
  3825 00:0F88: A5 16        	lda	<L120+c_0+2
  3826 00:0F8A: 85 07        	sta	<R1+2
  3827 00:0F8C: 06 05        	asl	<R1
  3828 00:0F8E: 26 07        	rol	<R1+2
  3829 00:0F90: 06 05        	asl	<R1
  3830 00:0F92: 26 07        	rol	<R1+2
  3831 00:0F94: 06 05        	asl	<R1
  3832 00:0F96: 26 07        	rol	<R1+2
  3833 00:0F98: 06 05        	asl	<R1
  3834 00:0F9A: 26 07        	rol	<R1+2
  3835 00:0F9C: 18           	clc
  3836 00:0F9D: A9 08 00     	lda	#$8
  3837 00:0FA0: 6D xx xx     	adc	|~~umm_heap
  3838 00:0FA3: 85 09        	sta	<R2
  3839 00:0FA5: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 73


  3840 00:0FA8: 6D xx xx     	adc	|~~umm_heap+2
  3841 00:0FAB: 85 0B        	sta	<R2+2
  3842 00:0FAD: 18           	clc
  3843 00:0FAE: A5 09        	lda	<R2
  3844 00:0FB0: 65 05        	adc	<R1
  3845 00:0FB2: 85 0D        	sta	<R3
  3846 00:0FB4: A5 0B        	lda	<R2+2
  3847 00:0FB6: 65 07        	adc	<R1+2
  3848 00:0FB8: 85 0F        	sta	<R3+2
  3849 00:0FBA: A0 02 00     	ldy	#$2
  3850 00:0FBD: B7 0D        	lda	[<R3],Y
  3851 00:0FBF: 48           	pha
  3852 00:0FC0: A7 0D        	lda	[<R3]
  3853 00:0FC2: 48           	pha
  3854 00:0FC3: A9 04 00     	lda	#$4
  3855                        	xref	~~~lasl
  3856 00:0FC6: 22 xx xx xx  	jsl	~~~lasl
  3857 00:0FCA: 85 01        	sta	<R0
  3858 00:0FCC: 86 03        	stx	<R0+2
  3859 00:0FCE: 18           	clc
  3860 00:0FCF: A9 0C 00     	lda	#$c
  3861 00:0FD2: 6D xx xx     	adc	|~~umm_heap
  3862 00:0FD5: 85 05        	sta	<R1
  3863 00:0FD7: A9 00 00     	lda	#$0
  3864 00:0FDA: 6D xx xx     	adc	|~~umm_heap+2
  3865 00:0FDD: 85 07        	sta	<R1+2
  3866 00:0FDF: 18           	clc
  3867 00:0FE0: A5 05        	lda	<R1
  3868 00:0FE2: 65 01        	adc	<R0
  3869 00:0FE4: 85 09        	sta	<R2
  3870 00:0FE6: A5 07        	lda	<R1+2
  3871 00:0FE8: 65 03        	adc	<R0+2
  3872 00:0FEA: 85 0B        	sta	<R2+2
  3873 00:0FEC: A5 14        	lda	<L120+c_0
  3874 00:0FEE: 85 01        	sta	<R0
  3875 00:0FF0: A5 16        	lda	<L120+c_0+2
  3876 00:0FF2: 85 03        	sta	<R0+2
  3877 00:0FF4: 06 01        	asl	<R0
  3878 00:0FF6: 26 03        	rol	<R0+2
  3879 00:0FF8: 06 01        	asl	<R0
  3880 00:0FFA: 26 03        	rol	<R0+2
  3881 00:0FFC: 06 01        	asl	<R0
  3882 00:0FFE: 26 03        	rol	<R0+2
  3883 00:1000: 06 01        	asl	<R0
  3884 00:1002: 26 03        	rol	<R0+2
  3885 00:1004: 18           	clc
  3886 00:1005: A9 0C 00     	lda	#$c
  3887 00:1008: 6D xx xx     	adc	|~~umm_heap
  3888 00:100B: 85 05        	sta	<R1
  3889 00:100D: A9 00 00     	lda	#$0
  3890 00:1010: 6D xx xx     	adc	|~~umm_heap+2
  3891 00:1013: 85 07        	sta	<R1+2
  3892 00:1015: 18           	clc
  3893 00:1016: A5 05        	lda	<R1
  3894 00:1018: 65 01        	adc	<R0
  3895 00:101A: 85 0D        	sta	<R3
  3896 00:101C: A5 07        	lda	<R1+2
  3897 00:101E: 65 03        	adc	<R0+2
  Mon Aug  9 2021 16:52                                                Page 74


  3898 00:1020: 85 0F        	sta	<R3+2
  3899 00:1022: A7 0D        	lda	[<R3]
  3900 00:1024: 87 09        	sta	[<R2]
  3901 00:1026: A0 02 00     	ldy	#$2
  3902 00:1029: B7 0D        	lda	[<R3],Y
  3903 00:102B: A0 02 00     	ldy	#$2
  3904 00:102E: 97 09        	sta	[<R2],Y
  3905                        ;
  3906                        ;	/* And clear the free block indicator */
  3907                        ;
  3908                        ;	UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
  3909                        	.line	158
  3910 00:1030: A5 14        	lda	<L120+c_0
  3911 00:1032: 85 01        	sta	<R0
  3912 00:1034: A5 16        	lda	<L120+c_0+2
  3913 00:1036: 85 03        	sta	<R0+2
  3914 00:1038: 06 01        	asl	<R0
  3915 00:103A: 26 03        	rol	<R0+2
  3916 00:103C: 06 01        	asl	<R0
  3917 00:103E: 26 03        	rol	<R0+2
  3918 00:1040: 06 01        	asl	<R0
  3919 00:1042: 26 03        	rol	<R0+2
  3920 00:1044: 06 01        	asl	<R0
  3921 00:1046: 26 03        	rol	<R0+2
  3922 00:1048: 18           	clc
  3923 00:1049: AD xx xx     	lda	|~~umm_heap
  3924 00:104C: 65 01        	adc	<R0
  3925 00:104E: 85 05        	sta	<R1
  3926 00:1050: AD xx xx     	lda	|~~umm_heap+2
  3927 00:1053: 65 03        	adc	<R0+2
  3928 00:1055: 85 07        	sta	<R1+2
  3929 00:1057: A7 05        	lda	[<R1]
  3930 00:1059: 29 FF 7F     	and	#<$7fff
  3931 00:105C: 87 05        	sta	[<R1]
  3932 00:105E: A9 00 00     	lda	#$0
  3933 00:1061: A0 02 00     	ldy	#$2
  3934 00:1064: 97 05        	sta	[<R1],Y
  3935                        ;}
  3936                        	.line	159
  3937                        L123:
  3938 00:1066: A5 12        	lda	<L120+2
  3939 00:1068: 85 16        	sta	<L120+2+4
  3940 00:106A: A5 11        	lda	<L120+1
  3941 00:106C: 85 15        	sta	<L120+1+4
  3942 00:106E: 2B           	pld
  3943 00:106F: 3B           	tsc
  3944 00:1070: 18           	clc
  3945 00:1071: 69 14 00     	adc	#L120+4
  3946 00:1074: 1B           	tcs
  3947 00:1075: 6B           	rtl
  3948                        	.endblock	159
  3949             00000010   L120	equ	16
  3950             00000011   L121	equ	17
  3951                        	ends
  3952                        	efunc
  3953                        	.endfunc	159,17,16
  3954                        	.line	159
  3955                        ;
  Mon Aug  9 2021 16:52                                                Page 75


  3956                        ;/* ----------------------------------------------
                    --------------------------
  3957                        ; * The umm_assimilate_up() function assumes that 
                    UMM_NBLOCK(c) does NOT
  3958                        ; * have the UMM_FREELIST_MASK bit set!
  3959                        ; */
  3960                        ;
  3961                        ;static void umm_assimilate_up(unsigned long c)
  3962                        ;{
  3963                        	.line	166
  3964                        	.line	167
  3965                        	code
  3966                        	func
  3967                        	.function	167
  3968                        ~~umm_assimilate_up:
  3969                        	longa	on
  3970                        	longi	on
  3971 00:1076: 3B           	tsc
  3972 00:1077: 38           	sec
  3973 00:1078: E9 10 00     	sbc	#L124
  3974 00:107B: 1B           	tcs
  3975 00:107C: 0B           	phd
  3976 00:107D: 5B           	tcd
  3977             00000004   c_0	set	4
  3978                        	.block	167
  3979                        ;
  3980                        ;	if ( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MA
                    SK)
  3981                        	.sym	c,4,18,6,32
  3982                        	.line	169
  3983                        ;	{
  3984 00:107E: A5 14        	lda	<L124+c_0
  3985 00:1080: 85 05        	sta	<R1
  3986 00:1082: A5 16        	lda	<L124+c_0+2
  3987 00:1084: 85 07        	sta	<R1+2
  3988 00:1086: 06 05        	asl	<R1
  3989 00:1088: 26 07        	rol	<R1+2
  3990 00:108A: 06 05        	asl	<R1
  3991 00:108C: 26 07        	rol	<R1+2
  3992 00:108E: 06 05        	asl	<R1
  3993 00:1090: 26 07        	rol	<R1+2
  3994 00:1092: 06 05        	asl	<R1
  3995 00:1094: 26 07        	rol	<R1+2
  3996 00:1096: 18           	clc
  3997 00:1097: AD xx xx     	lda	|~~umm_heap
  3998 00:109A: 65 05        	adc	<R1
  3999 00:109C: 85 09        	sta	<R2
  4000 00:109E: AD xx xx     	lda	|~~umm_heap+2
  4001 00:10A1: 65 07        	adc	<R1+2
  4002 00:10A3: 85 0B        	sta	<R2+2
  4003 00:10A5: A0 02 00     	ldy	#$2
  4004 00:10A8: B7 09        	lda	[<R2],Y
  4005 00:10AA: 48           	pha
  4006 00:10AB: A7 09        	lda	[<R2]
  4007 00:10AD: 48           	pha
  4008 00:10AE: A9 04 00     	lda	#$4
  4009                        	xref	~~~lasl
  4010 00:10B1: 22 xx xx xx  	jsl	~~~lasl
  Mon Aug  9 2021 16:52                                                Page 76


  4011 00:10B5: 85 01        	sta	<R0
  4012 00:10B7: 86 03        	stx	<R0+2
  4013 00:10B9: 18           	clc
  4014 00:10BA: AD xx xx     	lda	|~~umm_heap
  4015 00:10BD: 65 01        	adc	<R0
  4016 00:10BF: 85 05        	sta	<R1
  4017 00:10C1: AD xx xx     	lda	|~~umm_heap+2
  4018 00:10C4: 65 03        	adc	<R0+2
  4019 00:10C6: 85 07        	sta	<R1+2
  4020 00:10C8: A7 05        	lda	[<R1]
  4021 00:10CA: 29 00 80     	and	#<$8000
  4022 00:10CD: D0 03        	bne	L127
  4023 00:10CF: 82 44 01     	brl	L10045
  4024                        L127:
  4025                        	.line	170
  4026                        ;		/*
  4027                        ;		 * The next block is a free block, so as
                    similate up and remove it from
  4028                        ;		 * the free list
  4029                        ;		 */
  4030                        ;
  4031                        ;		//DBGLOG_DEBUG( "Assimilate up to next b
                    lock, which is FREE\n" );
  4032                        ;		/* Disconnect the next block from the FR
                    EE list */
  4033                        ;
  4034                        ;		umm_disconnect_from_free_list(UMM_NBLOCK
                    (c));
  4035                        	.line	179
  4036 00:10D2: A5 14        	lda	<L124+c_0
  4037 00:10D4: 85 01        	sta	<R0
  4038 00:10D6: A5 16        	lda	<L124+c_0+2
  4039 00:10D8: 85 03        	sta	<R0+2
  4040 00:10DA: 06 01        	asl	<R0
  4041 00:10DC: 26 03        	rol	<R0+2
  4042 00:10DE: 06 01        	asl	<R0
  4043 00:10E0: 26 03        	rol	<R0+2
  4044 00:10E2: 06 01        	asl	<R0
  4045 00:10E4: 26 03        	rol	<R0+2
  4046 00:10E6: 06 01        	asl	<R0
  4047 00:10E8: 26 03        	rol	<R0+2
  4048 00:10EA: 18           	clc
  4049 00:10EB: AD xx xx     	lda	|~~umm_heap
  4050 00:10EE: 65 01        	adc	<R0
  4051 00:10F0: 85 05        	sta	<R1
  4052 00:10F2: AD xx xx     	lda	|~~umm_heap+2
  4053 00:10F5: 65 03        	adc	<R0+2
  4054 00:10F7: 85 07        	sta	<R1+2
  4055 00:10F9: A0 02 00     	ldy	#$2
  4056 00:10FC: B7 05        	lda	[<R1],Y
  4057 00:10FE: 48           	pha
  4058 00:10FF: A7 05        	lda	[<R1]
  4059 00:1101: 48           	pha
  4060 00:1102: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  4061                        ;
  4062                        ;		/* Assimilate the next block with this o
                    ne */
  4063                        ;
  Mon Aug  9 2021 16:52                                                Page 77


  4064                        ;		UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & U
                    MM_BLOCKNO_MASK) = c;
  4065                        	.line	183
  4066 00:1106: A5 14        	lda	<L124+c_0
  4067 00:1108: 85 09        	sta	<R2
  4068 00:110A: A5 16        	lda	<L124+c_0+2
  4069 00:110C: 85 0B        	sta	<R2+2
  4070 00:110E: 06 09        	asl	<R2
  4071 00:1110: 26 0B        	rol	<R2+2
  4072 00:1112: 06 09        	asl	<R2
  4073 00:1114: 26 0B        	rol	<R2+2
  4074 00:1116: 06 09        	asl	<R2
  4075 00:1118: 26 0B        	rol	<R2+2
  4076 00:111A: 06 09        	asl	<R2
  4077 00:111C: 26 0B        	rol	<R2+2
  4078 00:111E: 18           	clc
  4079 00:111F: AD xx xx     	lda	|~~umm_heap
  4080 00:1122: 65 09        	adc	<R2
  4081 00:1124: 85 0D        	sta	<R3
  4082 00:1126: AD xx xx     	lda	|~~umm_heap+2
  4083 00:1129: 65 0B        	adc	<R2+2
  4084 00:112B: 85 0F        	sta	<R3+2
  4085 00:112D: A0 02 00     	ldy	#$2
  4086 00:1130: B7 0D        	lda	[<R3],Y
  4087 00:1132: 48           	pha
  4088 00:1133: A7 0D        	lda	[<R3]
  4089 00:1135: 48           	pha
  4090 00:1136: A9 04 00     	lda	#$4
  4091                        	xref	~~~lasl
  4092 00:1139: 22 xx xx xx  	jsl	~~~lasl
  4093 00:113D: 85 05        	sta	<R1
  4094 00:113F: 86 07        	stx	<R1+2
  4095 00:1141: 18           	clc
  4096 00:1142: AD xx xx     	lda	|~~umm_heap
  4097 00:1145: 65 05        	adc	<R1
  4098 00:1147: 85 09        	sta	<R2
  4099 00:1149: AD xx xx     	lda	|~~umm_heap+2
  4100 00:114C: 65 07        	adc	<R1+2
  4101 00:114E: 85 0B        	sta	<R2+2
  4102 00:1150: A7 09        	lda	[<R2]
  4103 00:1152: 29 FF 7F     	and	#<$7fff
  4104 00:1155: 85 05        	sta	<R1
  4105 00:1157: 64 07        	stz	<R1+2
  4106 00:1159: D4 07        	pei	<R1+2
  4107 00:115B: D4 05        	pei	<R1
  4108 00:115D: A9 04 00     	lda	#$4
  4109                        	xref	~~~lasl
  4110 00:1160: 22 xx xx xx  	jsl	~~~lasl
  4111 00:1164: 85 01        	sta	<R0
  4112 00:1166: 86 03        	stx	<R0+2
  4113 00:1168: 18           	clc
  4114 00:1169: A9 04 00     	lda	#$4
  4115 00:116C: 6D xx xx     	adc	|~~umm_heap
  4116 00:116F: 85 09        	sta	<R2
  4117 00:1171: A9 00 00     	lda	#$0
  4118 00:1174: 6D xx xx     	adc	|~~umm_heap+2
  4119 00:1177: 85 0B        	sta	<R2+2
  4120 00:1179: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 78


  4121 00:117A: A5 09        	lda	<R2
  4122 00:117C: 65 01        	adc	<R0
  4123 00:117E: 85 0D        	sta	<R3
  4124 00:1180: A5 0B        	lda	<R2+2
  4125 00:1182: 65 03        	adc	<R0+2
  4126 00:1184: 85 0F        	sta	<R3+2
  4127 00:1186: A5 14        	lda	<L124+c_0
  4128 00:1188: 87 0D        	sta	[<R3]
  4129 00:118A: A5 16        	lda	<L124+c_0+2
  4130 00:118C: A0 02 00     	ldy	#$2
  4131 00:118F: 97 0D        	sta	[<R3],Y
  4132                        ;		UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)
                    ) & UMM_BLOCKNO_MASK;
  4133                        	.line	184
  4134 00:1191: A5 14        	lda	<L124+c_0
  4135 00:1193: 85 01        	sta	<R0
  4136 00:1195: A5 16        	lda	<L124+c_0+2
  4137 00:1197: 85 03        	sta	<R0+2
  4138 00:1199: 06 01        	asl	<R0
  4139 00:119B: 26 03        	rol	<R0+2
  4140 00:119D: 06 01        	asl	<R0
  4141 00:119F: 26 03        	rol	<R0+2
  4142 00:11A1: 06 01        	asl	<R0
  4143 00:11A3: 26 03        	rol	<R0+2
  4144 00:11A5: 06 01        	asl	<R0
  4145 00:11A7: 26 03        	rol	<R0+2
  4146 00:11A9: 18           	clc
  4147 00:11AA: AD xx xx     	lda	|~~umm_heap
  4148 00:11AD: 65 01        	adc	<R0
  4149 00:11AF: 85 05        	sta	<R1
  4150 00:11B1: AD xx xx     	lda	|~~umm_heap+2
  4151 00:11B4: 65 03        	adc	<R0+2
  4152 00:11B6: 85 07        	sta	<R1+2
  4153 00:11B8: A5 14        	lda	<L124+c_0
  4154 00:11BA: 85 09        	sta	<R2
  4155 00:11BC: A5 16        	lda	<L124+c_0+2
  4156 00:11BE: 85 0B        	sta	<R2+2
  4157 00:11C0: 06 09        	asl	<R2
  4158 00:11C2: 26 0B        	rol	<R2+2
  4159 00:11C4: 06 09        	asl	<R2
  4160 00:11C6: 26 0B        	rol	<R2+2
  4161 00:11C8: 06 09        	asl	<R2
  4162 00:11CA: 26 0B        	rol	<R2+2
  4163 00:11CC: 06 09        	asl	<R2
  4164 00:11CE: 26 0B        	rol	<R2+2
  4165 00:11D0: 18           	clc
  4166 00:11D1: AD xx xx     	lda	|~~umm_heap
  4167 00:11D4: 65 09        	adc	<R2
  4168 00:11D6: 85 0D        	sta	<R3
  4169 00:11D8: AD xx xx     	lda	|~~umm_heap+2
  4170 00:11DB: 65 0B        	adc	<R2+2
  4171 00:11DD: 85 0F        	sta	<R3+2
  4172 00:11DF: A0 02 00     	ldy	#$2
  4173 00:11E2: B7 0D        	lda	[<R3],Y
  4174 00:11E4: 48           	pha
  4175 00:11E5: A7 0D        	lda	[<R3]
  4176 00:11E7: 48           	pha
  4177 00:11E8: A9 04 00     	lda	#$4
  Mon Aug  9 2021 16:52                                                Page 79


  4178                        	xref	~~~lasl
  4179 00:11EB: 22 xx xx xx  	jsl	~~~lasl
  4180 00:11EF: 85 01        	sta	<R0
  4181 00:11F1: 86 03        	stx	<R0+2
  4182 00:11F3: 18           	clc
  4183 00:11F4: AD xx xx     	lda	|~~umm_heap
  4184 00:11F7: 65 01        	adc	<R0
  4185 00:11F9: 85 09        	sta	<R2
  4186 00:11FB: AD xx xx     	lda	|~~umm_heap+2
  4187 00:11FE: 65 03        	adc	<R0+2
  4188 00:1200: 85 0B        	sta	<R2+2
  4189 00:1202: A7 09        	lda	[<R2]
  4190 00:1204: 29 FF 7F     	and	#<$7fff
  4191 00:1207: 85 01        	sta	<R0
  4192 00:1209: 64 03        	stz	<R0+2
  4193 00:120B: A5 01        	lda	<R0
  4194 00:120D: 87 05        	sta	[<R1]
  4195 00:120F: A5 03        	lda	<R0+2
  4196 00:1211: A0 02 00     	ldy	#$2
  4197 00:1214: 97 05        	sta	[<R1],Y
  4198                        ;	}
  4199                        	.line	185
  4200                        ;}
  4201                        L10045:
  4202                        	.line	186
  4203                        L128:
  4204 00:1216: A5 12        	lda	<L124+2
  4205 00:1218: 85 16        	sta	<L124+2+4
  4206 00:121A: A5 11        	lda	<L124+1
  4207 00:121C: 85 15        	sta	<L124+1+4
  4208 00:121E: 2B           	pld
  4209 00:121F: 3B           	tsc
  4210 00:1220: 18           	clc
  4211 00:1221: 69 14 00     	adc	#L124+4
  4212 00:1224: 1B           	tcs
  4213 00:1225: 6B           	rtl
  4214                        	.endblock	186
  4215             00000010   L124	equ	16
  4216             00000011   L125	equ	17
  4217                        	ends
  4218                        	efunc
  4219                        	.endfunc	186,17,16
  4220                        	.line	186
  4221                        ;
  4222                        ;/* ----------------------------------------------
                    --------------------------
  4223                        ; * The umm_assimilate_down() function assumes tha
                    t UMM_NBLOCK(c) does NOT
  4224                        ; * have the UMM_FREELIST_MASK bit set!
  4225                        ; */
  4226                        ;
  4227                        ;static unsigned long umm_assimilate_down(unsigned
                     long c,
  4228                        ;		unsigned long freemask)
  4229                        ;{
  4230                        	.line	193
  4231                        	.line	195
  4232                        	code
  Mon Aug  9 2021 16:52                                                Page 80


  4233                        	func
  4234                        	.function	195
  4235                        ~~umm_assimilate_down:
  4236                        	longa	on
  4237                        	longi	on
  4238 00:1226: 3B           	tsc
  4239 00:1227: 38           	sec
  4240 00:1228: E9 10 00     	sbc	#L129
  4241 00:122B: 1B           	tcs
  4242 00:122C: 0B           	phd
  4243 00:122D: 5B           	tcd
  4244             00000004   c_0	set	4
  4245             00000008   freemask_0	set	8
  4246                        	.block	195
  4247                        ;
  4248                        ;	UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | free
                    mask;
  4249                        	.sym	c,4,18,6,32
  4250                        	.sym	freemask,8,18,6,32
  4251                        	.line	197
  4252 00:122E: A5 14        	lda	<L129+c_0
  4253 00:1230: 85 05        	sta	<R1
  4254 00:1232: A5 16        	lda	<L129+c_0+2
  4255 00:1234: 85 07        	sta	<R1+2
  4256 00:1236: 06 05        	asl	<R1
  4257 00:1238: 26 07        	rol	<R1+2
  4258 00:123A: 06 05        	asl	<R1
  4259 00:123C: 26 07        	rol	<R1+2
  4260 00:123E: 06 05        	asl	<R1
  4261 00:1240: 26 07        	rol	<R1+2
  4262 00:1242: 06 05        	asl	<R1
  4263 00:1244: 26 07        	rol	<R1+2
  4264 00:1246: 18           	clc
  4265 00:1247: A9 04 00     	lda	#$4
  4266 00:124A: 6D xx xx     	adc	|~~umm_heap
  4267 00:124D: 85 09        	sta	<R2
  4268 00:124F: A9 00 00     	lda	#$0
  4269 00:1252: 6D xx xx     	adc	|~~umm_heap+2
  4270 00:1255: 85 0B        	sta	<R2+2
  4271 00:1257: 18           	clc
  4272 00:1258: A5 09        	lda	<R2
  4273 00:125A: 65 05        	adc	<R1
  4274 00:125C: 85 0D        	sta	<R3
  4275 00:125E: A5 0B        	lda	<R2+2
  4276 00:1260: 65 07        	adc	<R1+2
  4277 00:1262: 85 0F        	sta	<R3+2
  4278 00:1264: A0 02 00     	ldy	#$2
  4279 00:1267: B7 0D        	lda	[<R3],Y
  4280 00:1269: 48           	pha
  4281 00:126A: A7 0D        	lda	[<R3]
  4282 00:126C: 48           	pha
  4283 00:126D: A9 04 00     	lda	#$4
  4284                        	xref	~~~lasl
  4285 00:1270: 22 xx xx xx  	jsl	~~~lasl
  4286 00:1274: 85 01        	sta	<R0
  4287 00:1276: 86 03        	stx	<R0+2
  4288 00:1278: 18           	clc
  4289 00:1279: AD xx xx     	lda	|~~umm_heap
  Mon Aug  9 2021 16:52                                                Page 81


  4290 00:127C: 65 01        	adc	<R0
  4291 00:127E: 85 05        	sta	<R1
  4292 00:1280: AD xx xx     	lda	|~~umm_heap+2
  4293 00:1283: 65 03        	adc	<R0+2
  4294 00:1285: 85 07        	sta	<R1+2
  4295 00:1287: A5 14        	lda	<L129+c_0
  4296 00:1289: 85 01        	sta	<R0
  4297 00:128B: A5 16        	lda	<L129+c_0+2
  4298 00:128D: 85 03        	sta	<R0+2
  4299 00:128F: 06 01        	asl	<R0
  4300 00:1291: 26 03        	rol	<R0+2
  4301 00:1293: 06 01        	asl	<R0
  4302 00:1295: 26 03        	rol	<R0+2
  4303 00:1297: 06 01        	asl	<R0
  4304 00:1299: 26 03        	rol	<R0+2
  4305 00:129B: 06 01        	asl	<R0
  4306 00:129D: 26 03        	rol	<R0+2
  4307 00:129F: 18           	clc
  4308 00:12A0: AD xx xx     	lda	|~~umm_heap
  4309 00:12A3: 65 01        	adc	<R0
  4310 00:12A5: 85 09        	sta	<R2
  4311 00:12A7: AD xx xx     	lda	|~~umm_heap+2
  4312 00:12AA: 65 03        	adc	<R0+2
  4313 00:12AC: 85 0B        	sta	<R2+2
  4314 00:12AE: A5 18        	lda	<L129+freemask_0
  4315 00:12B0: 07 09        	ora	[<R2]
  4316 00:12B2: 85 01        	sta	<R0
  4317 00:12B4: A5 1A        	lda	<L129+freemask_0+2
  4318 00:12B6: A0 02 00     	ldy	#$2
  4319 00:12B9: 17 09        	ora	[<R2],Y
  4320 00:12BB: 85 03        	sta	<R0+2
  4321 00:12BD: A5 01        	lda	<R0
  4322 00:12BF: 87 05        	sta	[<R1]
  4323 00:12C1: A5 03        	lda	<R0+2
  4324 00:12C3: A0 02 00     	ldy	#$2
  4325 00:12C6: 97 05        	sta	[<R1],Y
  4326                        ;	UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
  4327                        	.line	198
  4328 00:12C8: A5 14        	lda	<L129+c_0
  4329 00:12CA: 85 05        	sta	<R1
  4330 00:12CC: A5 16        	lda	<L129+c_0+2
  4331 00:12CE: 85 07        	sta	<R1+2
  4332 00:12D0: 06 05        	asl	<R1
  4333 00:12D2: 26 07        	rol	<R1+2
  4334 00:12D4: 06 05        	asl	<R1
  4335 00:12D6: 26 07        	rol	<R1+2
  4336 00:12D8: 06 05        	asl	<R1
  4337 00:12DA: 26 07        	rol	<R1+2
  4338 00:12DC: 06 05        	asl	<R1
  4339 00:12DE: 26 07        	rol	<R1+2
  4340 00:12E0: 18           	clc
  4341 00:12E1: AD xx xx     	lda	|~~umm_heap
  4342 00:12E4: 65 05        	adc	<R1
  4343 00:12E6: 85 09        	sta	<R2
  4344 00:12E8: AD xx xx     	lda	|~~umm_heap+2
  4345 00:12EB: 65 07        	adc	<R1+2
  4346 00:12ED: 85 0B        	sta	<R2+2
  4347 00:12EF: A0 02 00     	ldy	#$2
  Mon Aug  9 2021 16:52                                                Page 82


  4348 00:12F2: B7 09        	lda	[<R2],Y
  4349 00:12F4: 48           	pha
  4350 00:12F5: A7 09        	lda	[<R2]
  4351 00:12F7: 48           	pha
  4352 00:12F8: A9 04 00     	lda	#$4
  4353                        	xref	~~~lasl
  4354 00:12FB: 22 xx xx xx  	jsl	~~~lasl
  4355 00:12FF: 85 01        	sta	<R0
  4356 00:1301: 86 03        	stx	<R0+2
  4357 00:1303: 18           	clc
  4358 00:1304: A9 04 00     	lda	#$4
  4359 00:1307: 6D xx xx     	adc	|~~umm_heap
  4360 00:130A: 85 05        	sta	<R1
  4361 00:130C: A9 00 00     	lda	#$0
  4362 00:130F: 6D xx xx     	adc	|~~umm_heap+2
  4363 00:1312: 85 07        	sta	<R1+2
  4364 00:1314: 18           	clc
  4365 00:1315: A5 05        	lda	<R1
  4366 00:1317: 65 01        	adc	<R0
  4367 00:1319: 85 09        	sta	<R2
  4368 00:131B: A5 07        	lda	<R1+2
  4369 00:131D: 65 03        	adc	<R0+2
  4370 00:131F: 85 0B        	sta	<R2+2
  4371 00:1321: A5 14        	lda	<L129+c_0
  4372 00:1323: 85 01        	sta	<R0
  4373 00:1325: A5 16        	lda	<L129+c_0+2
  4374 00:1327: 85 03        	sta	<R0+2
  4375 00:1329: 06 01        	asl	<R0
  4376 00:132B: 26 03        	rol	<R0+2
  4377 00:132D: 06 01        	asl	<R0
  4378 00:132F: 26 03        	rol	<R0+2
  4379 00:1331: 06 01        	asl	<R0
  4380 00:1333: 26 03        	rol	<R0+2
  4381 00:1335: 06 01        	asl	<R0
  4382 00:1337: 26 03        	rol	<R0+2
  4383 00:1339: 18           	clc
  4384 00:133A: A9 04 00     	lda	#$4
  4385 00:133D: 6D xx xx     	adc	|~~umm_heap
  4386 00:1340: 85 05        	sta	<R1
  4387 00:1342: A9 00 00     	lda	#$0
  4388 00:1345: 6D xx xx     	adc	|~~umm_heap+2
  4389 00:1348: 85 07        	sta	<R1+2
  4390 00:134A: 18           	clc
  4391 00:134B: A5 05        	lda	<R1
  4392 00:134D: 65 01        	adc	<R0
  4393 00:134F: 85 0D        	sta	<R3
  4394 00:1351: A5 07        	lda	<R1+2
  4395 00:1353: 65 03        	adc	<R0+2
  4396 00:1355: 85 0F        	sta	<R3+2
  4397 00:1357: A7 0D        	lda	[<R3]
  4398 00:1359: 87 09        	sta	[<R2]
  4399 00:135B: A0 02 00     	ldy	#$2
  4400 00:135E: B7 0D        	lda	[<R3],Y
  4401 00:1360: A0 02 00     	ldy	#$2
  4402 00:1363: 97 09        	sta	[<R2],Y
  4403                        ;
  4404                        ;	return (UMM_PBLOCK(c));
  4405                        	.line	200
  Mon Aug  9 2021 16:52                                                Page 83


  4406 00:1365: A5 14        	lda	<L129+c_0
  4407 00:1367: 85 01        	sta	<R0
  4408 00:1369: A5 16        	lda	<L129+c_0+2
  4409 00:136B: 85 03        	sta	<R0+2
  4410 00:136D: 06 01        	asl	<R0
  4411 00:136F: 26 03        	rol	<R0+2
  4412 00:1371: 06 01        	asl	<R0
  4413 00:1373: 26 03        	rol	<R0+2
  4414 00:1375: 06 01        	asl	<R0
  4415 00:1377: 26 03        	rol	<R0+2
  4416 00:1379: 06 01        	asl	<R0
  4417 00:137B: 26 03        	rol	<R0+2
  4418 00:137D: 18           	clc
  4419 00:137E: A9 04 00     	lda	#$4
  4420 00:1381: 6D xx xx     	adc	|~~umm_heap
  4421 00:1384: 85 05        	sta	<R1
  4422 00:1386: A9 00 00     	lda	#$0
  4423 00:1389: 6D xx xx     	adc	|~~umm_heap+2
  4424 00:138C: 85 07        	sta	<R1+2
  4425 00:138E: 18           	clc
  4426 00:138F: A5 05        	lda	<R1
  4427 00:1391: 65 01        	adc	<R0
  4428 00:1393: 85 09        	sta	<R2
  4429 00:1395: A5 07        	lda	<R1+2
  4430 00:1397: 65 03        	adc	<R0+2
  4431 00:1399: 85 0B        	sta	<R2+2
  4432 00:139B: A0 02 00     	ldy	#$2
  4433 00:139E: B7 09        	lda	[<R2],Y
  4434 00:13A0: AA           	tax
  4435 00:13A1: A7 09        	lda	[<R2]
  4436                        L132:
  4437 00:13A3: A8           	tay
  4438 00:13A4: A5 12        	lda	<L129+2
  4439 00:13A6: 85 1A        	sta	<L129+2+8
  4440 00:13A8: A5 11        	lda	<L129+1
  4441 00:13AA: 85 19        	sta	<L129+1+8
  4442 00:13AC: 2B           	pld
  4443 00:13AD: 3B           	tsc
  4444 00:13AE: 18           	clc
  4445 00:13AF: 69 18 00     	adc	#L129+8
  4446 00:13B2: 1B           	tcs
  4447 00:13B3: 98           	tya
  4448 00:13B4: 6B           	rtl
  4449                        ;}
  4450                        	.line	201
  4451                        	.endblock	201
  4452             00000010   L129	equ	16
  4453             00000011   L130	equ	17
  4454                        	ends
  4455                        	efunc
  4456                        	.endfunc	201,17,16
  4457                        	.line	201
  4458                        ;
  4459                        ;/* ----------------------------------------------
                    --------------------------- */
  4460                        ;
  4461                        ;void umm_init(void)
  4462                        ;{
  Mon Aug  9 2021 16:52                                                Page 84


  4463                        	.line	205
  4464                        	.line	206
  4465                        	code
  4466                        	xdef	~~umm_init
  4467                        	func
  4468                        	.function	206
  4469                        ~~umm_init:
  4470                        	longa	on
  4471                        	longi	on
  4472 00:13B5: 3B           	tsc
  4473 00:13B6: 38           	sec
  4474 00:13B7: E9 1C 00     	sbc	#L133
  4475 00:13BA: 1B           	tcs
  4476 00:13BB: 0B           	phd
  4477 00:13BC: 5B           	tcd
  4478                        	.block	206
  4479                        ;	unsigned long i = 0L;
  4480                        ;	/* init heap pointer and size, and memset it to 
                    0 */
  4481                        ;	umm_heap = (umm_block *) UMM_MALLOC_CFG_HEAP_ADD
                    R;
  4482             00000000   i_1	set	0
  4483                        	.sym	i,0,18,1,32
  4484 00:13BD: 64 0D        	stz	<L134+i_1
  4485 00:13BF: 64 0F        	stz	<L134+i_1+2
  4486                        	.line	209
  4487 00:13C1: A9 00 00     	lda	#$0
  4488 00:13C4: 8D xx xx     	sta	|~~umm_heap
  4489 00:13C7: A9 10 00     	lda	#$10
  4490 00:13CA: 8D xx xx     	sta	|~~umm_heap+2
  4491                        ;	umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / size
                    of(umm_block));
  4492                        	.line	210
  4493 00:13CD: A9 00 50     	lda	#$5000
  4494 00:13D0: 8D xx xx     	sta	|~~umm_numblocks
  4495 00:13D3: A9 00 00     	lda	#$0
  4496 00:13D6: 8D xx xx     	sta	|~~umm_numblocks+2
  4497                        ;	//memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZ
                    E);
  4498                        ;	for(i=0;i<UMM_MALLOC_CFG_HEAP_SIZE;i++)
  4499                        	.line	212
  4500 00:13D9: 64 0D        	stz	<L134+i_1
  4501 00:13DB: 64 0F        	stz	<L134+i_1+2
  4502                        L10048:
  4503                        ;		((char FAR*)umm_heap)[i] = 0x00;
  4504                        	.line	213
  4505 00:13DD: 18           	clc
  4506 00:13DE: AD xx xx     	lda	|~~umm_heap
  4507 00:13E1: 65 0D        	adc	<L134+i_1
  4508 00:13E3: 85 01        	sta	<R0
  4509 00:13E5: AD xx xx     	lda	|~~umm_heap+2
  4510 00:13E8: 65 0F        	adc	<L134+i_1+2
  4511 00:13EA: 85 03        	sta	<R0+2
  4512 00:13EC: E2 20        	sep	#$20
  4513                        	longa	off
  4514 00:13EE: A9 00        	lda	#$0
  4515 00:13F0: 87 01        	sta	[<R0]
  4516 00:13F2: C2 20        	rep	#$20
  Mon Aug  9 2021 16:52                                                Page 85


  4517                        	longa	on
  4518                        L10046:
  4519 00:13F4: E6 0D        	inc	<L134+i_1
  4520 00:13F6: D0 02        	bne	L136
  4521 00:13F8: E6 0F        	inc	<L134+i_1+2
  4522                        L136:
  4523 00:13FA: A5 0D        	lda	<L134+i_1
  4524 00:13FC: C9 00 00     	cmp	#<$50000
  4525 00:13FF: A5 0F        	lda	<L134+i_1+2
  4526 00:1401: E9 05 00     	sbc	#^$50000
  4527 00:1404: B0 03        	bcs	L137
  4528 00:1406: 82 D4 FF     	brl	L10048
  4529                        L137:
  4530                        L10047:
  4531                        ;
  4532                        ;	/* setup initial blank heap structure */
  4533                        ;	{
  4534                        	.line	216
  4535                        ;		/* index of the 0th `umm_block` */
  4536                        ;		const unsigned long block_0th = 0;
  4537                        ;		/* index of the 1st `umm_block` */
  4538                        ;		const unsigned long block_1th = 1;
  4539                        ;		/* index of the latest `umm_block` */
  4540                        ;		const unsigned long block_last = UMM_NUM
                    BLOCKS - 1;
  4541                        ;
  4542                        ;		/* setup the 0th `umm_block`, which just
                     points to the 1st */
  4543                        ;		UMM_NBLOCK(block_0th) = block_1th;
  4544                        	.block	225
  4545             00000004   block_0th_2	set	4
  4546             00000008   block_1th_2	set	8
  4547             0000000C   block_last_2	set	12
  4548                        	.sym	block_0th,4,18,1,32
  4549                        	.sym	block_1th,8,18,1,32
  4550                        	.sym	block_last,12,18,1,32
  4551 00:1409: 64 11        	stz	<L134+block_0th_2
  4552 00:140B: 64 13        	stz	<L134+block_0th_2+2
  4553 00:140D: A9 01 00     	lda	#$1
  4554 00:1410: 85 15        	sta	<L134+block_1th_2
  4555 00:1412: A9 00 00     	lda	#$0
  4556 00:1415: 85 17        	sta	<L134+block_1th_2+2
  4557 00:1417: 18           	clc
  4558 00:1418: A9 FF FF     	lda	#$ffff
  4559 00:141B: 6D xx xx     	adc	|~~umm_numblocks
  4560 00:141E: 85 19        	sta	<L134+block_last_2
  4561 00:1420: A9 FF FF     	lda	#$ffff
  4562 00:1423: 6D xx xx     	adc	|~~umm_numblocks+2
  4563 00:1426: 85 1B        	sta	<L134+block_last_2+2
  4564                        	.line	225
  4565 00:1428: AD xx xx     	lda	|~~umm_heap
  4566 00:142B: 85 01        	sta	<R0
  4567 00:142D: AD xx xx     	lda	|~~umm_heap+2
  4568 00:1430: 85 03        	sta	<R0+2
  4569 00:1432: A9 01 00     	lda	#$1
  4570 00:1435: 87 01        	sta	[<R0]
  4571 00:1437: A9 00 00     	lda	#$0
  4572 00:143A: A0 02 00     	ldy	#$2
  Mon Aug  9 2021 16:52                                                Page 86


  4573 00:143D: 97 01        	sta	[<R0],Y
  4574                        ;		UMM_NFREE(block_0th) = block_1th;
  4575                        	.line	226
  4576 00:143F: AD xx xx     	lda	|~~umm_heap
  4577 00:1442: 85 01        	sta	<R0
  4578 00:1444: AD xx xx     	lda	|~~umm_heap+2
  4579 00:1447: 85 03        	sta	<R0+2
  4580 00:1449: A9 01 00     	lda	#$1
  4581 00:144C: A0 08 00     	ldy	#$8
  4582 00:144F: 97 01        	sta	[<R0],Y
  4583 00:1451: A9 00 00     	lda	#$0
  4584 00:1454: A0 0A 00     	ldy	#$a
  4585 00:1457: 97 01        	sta	[<R0],Y
  4586                        ;		UMM_PFREE(block_0th) = block_1th;
  4587                        	.line	227
  4588 00:1459: AD xx xx     	lda	|~~umm_heap
  4589 00:145C: 85 01        	sta	<R0
  4590 00:145E: AD xx xx     	lda	|~~umm_heap+2
  4591 00:1461: 85 03        	sta	<R0+2
  4592 00:1463: A9 01 00     	lda	#$1
  4593 00:1466: A0 0C 00     	ldy	#$c
  4594 00:1469: 97 01        	sta	[<R0],Y
  4595 00:146B: A9 00 00     	lda	#$0
  4596 00:146E: A0 0E 00     	ldy	#$e
  4597 00:1471: 97 01        	sta	[<R0],Y
  4598                        ;
  4599                        ;		/*
  4600                        ;		 * Now, we need to set the whole heap sp
                    ace as a huge free block. We should
  4601                        ;		 * not touch the 0th `umm_block`, since 
                    it's special: the 0th `umm_block`
  4602                        ;		 * is the head of the free block list. I
                    t's a part of the heap invariant.
  4603                        ;		 *
  4604                        ;		 * See the detailed explanation at the b
                    eginning of the file.
  4605                        ;		 */
  4606                        ;
  4607                        ;		/*
  4608                        ;		 * 1th `umm_block` has pointers:
  4609                        ;		 *
  4610                        ;		 * - next `umm_block`: the latest one
  4611                        ;		 * - prev `umm_block`: the 0th
  4612                        ;		 *
  4613                        ;		 * Plus, it's a free `umm_block`, so we 
                    need to apply `UMM_FREELIST_MASK`
  4614                        ;		 *
  4615                        ;		 * And it's the last free block, so the 
                    next free block is 0.
  4616                        ;		 */
  4617                        ;		UMM_NBLOCK(block_1th) = block_last | UMM
                    _FREELIST_MASK;
  4618                        	.line	247
  4619 00:1473: AD xx xx     	lda	|~~umm_heap
  4620 00:1476: 85 01        	sta	<R0
  4621 00:1478: AD xx xx     	lda	|~~umm_heap+2
  4622 00:147B: 85 03        	sta	<R0+2
  4623 00:147D: A5 19        	lda	<L134+block_last_2
  Mon Aug  9 2021 16:52                                                Page 87


  4624 00:147F: 09 00 80     	ora	#<$8000
  4625 00:1482: 85 05        	sta	<R1
  4626 00:1484: A5 1B        	lda	<L134+block_last_2+2
  4627 00:1486: 85 07        	sta	<R1+2
  4628 00:1488: A5 05        	lda	<R1
  4629 00:148A: A0 10 00     	ldy	#$10
  4630 00:148D: 97 01        	sta	[<R0],Y
  4631 00:148F: A5 07        	lda	<R1+2
  4632 00:1491: A0 12 00     	ldy	#$12
  4633 00:1494: 97 01        	sta	[<R0],Y
  4634                        ;		UMM_NFREE(block_1th) = 0;
  4635                        	.line	248
  4636 00:1496: AD xx xx     	lda	|~~umm_heap
  4637 00:1499: 85 01        	sta	<R0
  4638 00:149B: AD xx xx     	lda	|~~umm_heap+2
  4639 00:149E: 85 03        	sta	<R0+2
  4640 00:14A0: A9 00 00     	lda	#$0
  4641 00:14A3: A0 18 00     	ldy	#$18
  4642 00:14A6: 97 01        	sta	[<R0],Y
  4643 00:14A8: A9 00 00     	lda	#$0
  4644 00:14AB: A0 1A 00     	ldy	#$1a
  4645 00:14AE: 97 01        	sta	[<R0],Y
  4646                        ;		UMM_PBLOCK(block_1th) = block_0th;
  4647                        	.line	249
  4648 00:14B0: AD xx xx     	lda	|~~umm_heap
  4649 00:14B3: 85 01        	sta	<R0
  4650 00:14B5: AD xx xx     	lda	|~~umm_heap+2
  4651 00:14B8: 85 03        	sta	<R0+2
  4652 00:14BA: A9 00 00     	lda	#$0
  4653 00:14BD: A0 14 00     	ldy	#$14
  4654 00:14C0: 97 01        	sta	[<R0],Y
  4655 00:14C2: A9 00 00     	lda	#$0
  4656 00:14C5: A0 16 00     	ldy	#$16
  4657 00:14C8: 97 01        	sta	[<R0],Y
  4658                        ;		UMM_PFREE(block_1th) = block_0th;
  4659                        	.line	250
  4660 00:14CA: AD xx xx     	lda	|~~umm_heap
  4661 00:14CD: 85 01        	sta	<R0
  4662 00:14CF: AD xx xx     	lda	|~~umm_heap+2
  4663 00:14D2: 85 03        	sta	<R0+2
  4664 00:14D4: A9 00 00     	lda	#$0
  4665 00:14D7: A0 1C 00     	ldy	#$1c
  4666 00:14DA: 97 01        	sta	[<R0],Y
  4667 00:14DC: A9 00 00     	lda	#$0
  4668 00:14DF: A0 1E 00     	ldy	#$1e
  4669 00:14E2: 97 01        	sta	[<R0],Y
  4670                        ;
  4671                        ;		/*
  4672                        ;		 * latest `umm_block` has pointers:
  4673                        ;		 *
  4674                        ;		 * - next `umm_block`: 0 (meaning, there
                     are no more `umm_blocks`)
  4675                        ;		 * - prev `umm_block`: the 1st
  4676                        ;		 *
  4677                        ;		 * It's not a free block, so we don't to
                    uch NFREE / PFREE at all.
  4678                        ;		 */
  4679                        ;		UMM_NBLOCK(block_last) = 0;
  Mon Aug  9 2021 16:52                                                Page 88


  4680                        	.line	260
  4681 00:14E4: A5 19        	lda	<L134+block_last_2
  4682 00:14E6: 85 01        	sta	<R0
  4683 00:14E8: A5 1B        	lda	<L134+block_last_2+2
  4684 00:14EA: 85 03        	sta	<R0+2
  4685 00:14EC: 06 01        	asl	<R0
  4686 00:14EE: 26 03        	rol	<R0+2
  4687 00:14F0: 06 01        	asl	<R0
  4688 00:14F2: 26 03        	rol	<R0+2
  4689 00:14F4: 06 01        	asl	<R0
  4690 00:14F6: 26 03        	rol	<R0+2
  4691 00:14F8: 06 01        	asl	<R0
  4692 00:14FA: 26 03        	rol	<R0+2
  4693 00:14FC: 18           	clc
  4694 00:14FD: AD xx xx     	lda	|~~umm_heap
  4695 00:1500: 65 01        	adc	<R0
  4696 00:1502: 85 05        	sta	<R1
  4697 00:1504: AD xx xx     	lda	|~~umm_heap+2
  4698 00:1507: 65 03        	adc	<R0+2
  4699 00:1509: 85 07        	sta	<R1+2
  4700 00:150B: A9 00 00     	lda	#$0
  4701 00:150E: 87 05        	sta	[<R1]
  4702 00:1510: A9 00 00     	lda	#$0
  4703 00:1513: A0 02 00     	ldy	#$2
  4704 00:1516: 97 05        	sta	[<R1],Y
  4705                        ;		UMM_PBLOCK(block_last) = block_1th;
  4706                        	.line	261
  4707 00:1518: A5 19        	lda	<L134+block_last_2
  4708 00:151A: 85 01        	sta	<R0
  4709 00:151C: A5 1B        	lda	<L134+block_last_2+2
  4710 00:151E: 85 03        	sta	<R0+2
  4711 00:1520: 06 01        	asl	<R0
  4712 00:1522: 26 03        	rol	<R0+2
  4713 00:1524: 06 01        	asl	<R0
  4714 00:1526: 26 03        	rol	<R0+2
  4715 00:1528: 06 01        	asl	<R0
  4716 00:152A: 26 03        	rol	<R0+2
  4717 00:152C: 06 01        	asl	<R0
  4718 00:152E: 26 03        	rol	<R0+2
  4719 00:1530: 18           	clc
  4720 00:1531: A9 04 00     	lda	#$4
  4721 00:1534: 6D xx xx     	adc	|~~umm_heap
  4722 00:1537: 85 05        	sta	<R1
  4723 00:1539: A9 00 00     	lda	#$0
  4724 00:153C: 6D xx xx     	adc	|~~umm_heap+2
  4725 00:153F: 85 07        	sta	<R1+2
  4726 00:1541: 18           	clc
  4727 00:1542: A5 05        	lda	<R1
  4728 00:1544: 65 01        	adc	<R0
  4729 00:1546: 85 09        	sta	<R2
  4730 00:1548: A5 07        	lda	<R1+2
  4731 00:154A: 65 03        	adc	<R0+2
  4732 00:154C: 85 0B        	sta	<R2+2
  4733 00:154E: A9 01 00     	lda	#$1
  4734 00:1551: 87 09        	sta	[<R2]
  4735 00:1553: A9 00 00     	lda	#$0
  4736 00:1556: A0 02 00     	ldy	#$2
  4737 00:1559: 97 09        	sta	[<R2],Y
  Mon Aug  9 2021 16:52                                                Page 89


  4738                        ;	}
  4739                        	.endblock	262
  4740                        	.line	262
  4741                        ;}
  4742                        	.line	263
  4743                        L139:
  4744 00:155B: 2B           	pld
  4745 00:155C: 3B           	tsc
  4746 00:155D: 18           	clc
  4747 00:155E: 69 1C 00     	adc	#L133
  4748 00:1561: 1B           	tcs
  4749 00:1562: 6B           	rtl
  4750                        	.endblock	263
  4751             0000001C   L133	equ	28
  4752             0000000D   L134	equ	13
  4753                        	ends
  4754                        	efunc
  4755                        	.endfunc	263,13,28
  4756                        	.line	263
  4757                        ;
  4758                        ;/* ----------------------------------------------
                    --------------------------
  4759                        ; * Must be called only from within critical secti
                    ons guarded by
  4760                        ; * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
  4761                        ; */
  4762                        ;
  4763                        ;static void umm_free_core(void *ptr)
  4764                        ;{
  4765                        	.line	270
  4766                        	.line	271
  4767                        	code
  4768                        	func
  4769                        	.function	271
  4770                        ~~umm_free_core:
  4771                        	longa	on
  4772                        	longi	on
  4773 00:1563: 3B           	tsc
  4774 00:1564: 38           	sec
  4775 00:1565: E9 14 00     	sbc	#L140
  4776 00:1568: 1B           	tcs
  4777 00:1569: 0B           	phd
  4778 00:156A: 5B           	tcd
  4779             00000004   ptr_0	set	4
  4780                        	.block	271
  4781                        ;
  4782                        ;	unsigned long c;
  4783                        ;
  4784                        ;	/*
  4785                        ;	 * FIXME: At some point it might be a good idea 
                    to add a check to make sure
  4786                        ;	 *        that the pointer we're being asked to 
                    free up is actually within
  4787                        ;	 *        the umm_heap!
  4788                        ;	 *
  4789                        ;	 * NOTE:  See the new umm_info() function that y
                    ou can use to see if a ptr is
  4790                        ;	 *        on the free list!
  Mon Aug  9 2021 16:52                                                Page 90


  4791                        ;	 */
  4792                        ;
  4793                        ;	/* Figure out which block we're in. Note the use
                     of truncated division... */
  4794                        ;
  4795                        ;	c = (((char *) ptr) - (char *) (&(umm_heap[0])))
                     / sizeof(umm_block);
  4796             00000000   c_1	set	0
  4797                        	.sym	c,0,18,1,32
  4798                        	.sym	ptr,4,129,6,32
  4799                        	.line	286
  4800 00:156B: 38           	sec
  4801 00:156C: A5 18        	lda	<L140+ptr_0
  4802 00:156E: ED xx xx     	sbc	|~~umm_heap
  4803 00:1571: 85 01        	sta	<R0
  4804 00:1573: A5 1A        	lda	<L140+ptr_0+2
  4805 00:1575: ED xx xx     	sbc	|~~umm_heap+2
  4806 00:1578: 85 03        	sta	<R0+2
  4807 00:157A: F4 00 00     	pea	#^$10
  4808 00:157D: F4 10 00     	pea	#<$10
  4809 00:1580: D4 03        	pei	<R0+2
  4810 00:1582: D4 01        	pei	<R0
  4811                        	xref	~~~ldiv
  4812 00:1584: 22 xx xx xx  	jsl	~~~ldiv
  4813 00:1588: 85 11        	sta	<L141+c_1
  4814 00:158A: 86 13        	stx	<L141+c_1+2
  4815                        ;
  4816                        ;	//DBGLOG_DEBUG( "Freeing block %6i\n", c );
  4817                        ;
  4818                        ;	/* Now let's assimilate this block with the next
                     one if possible. */
  4819                        ;
  4820                        ;	umm_assimilate_up(c);
  4821                        	.line	292
  4822 00:158C: D4 13        	pei	<L141+c_1+2
  4823 00:158E: D4 11        	pei	<L141+c_1
  4824 00:1590: 22 xx xx xx  	jsl	~~umm_assimilate_up
  4825                        ;
  4826                        ;	/* Then assimilate with the previous block if po
                    ssible */
  4827                        ;
  4828                        ;	if ( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MA
                    SK)
  4829                        	.line	296
  4830                        ;	{
  4831 00:1594: A5 11        	lda	<L141+c_1
  4832 00:1596: 85 05        	sta	<R1
  4833 00:1598: A5 13        	lda	<L141+c_1+2
  4834 00:159A: 85 07        	sta	<R1+2
  4835 00:159C: 06 05        	asl	<R1
  4836 00:159E: 26 07        	rol	<R1+2
  4837 00:15A0: 06 05        	asl	<R1
  4838 00:15A2: 26 07        	rol	<R1+2
  4839 00:15A4: 06 05        	asl	<R1
  4840 00:15A6: 26 07        	rol	<R1+2
  4841 00:15A8: 06 05        	asl	<R1
  4842 00:15AA: 26 07        	rol	<R1+2
  4843 00:15AC: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 91


  4844 00:15AD: A9 04 00     	lda	#$4
  4845 00:15B0: 6D xx xx     	adc	|~~umm_heap
  4846 00:15B3: 85 09        	sta	<R2
  4847 00:15B5: A9 00 00     	lda	#$0
  4848 00:15B8: 6D xx xx     	adc	|~~umm_heap+2
  4849 00:15BB: 85 0B        	sta	<R2+2
  4850 00:15BD: 18           	clc
  4851 00:15BE: A5 09        	lda	<R2
  4852 00:15C0: 65 05        	adc	<R1
  4853 00:15C2: 85 0D        	sta	<R3
  4854 00:15C4: A5 0B        	lda	<R2+2
  4855 00:15C6: 65 07        	adc	<R1+2
  4856 00:15C8: 85 0F        	sta	<R3+2
  4857 00:15CA: A0 02 00     	ldy	#$2
  4858 00:15CD: B7 0D        	lda	[<R3],Y
  4859 00:15CF: 48           	pha
  4860 00:15D0: A7 0D        	lda	[<R3]
  4861 00:15D2: 48           	pha
  4862 00:15D3: A9 04 00     	lda	#$4
  4863                        	xref	~~~lasl
  4864 00:15D6: 22 xx xx xx  	jsl	~~~lasl
  4865 00:15DA: 85 01        	sta	<R0
  4866 00:15DC: 86 03        	stx	<R0+2
  4867 00:15DE: 18           	clc
  4868 00:15DF: AD xx xx     	lda	|~~umm_heap
  4869 00:15E2: 65 01        	adc	<R0
  4870 00:15E4: 85 05        	sta	<R1
  4871 00:15E6: AD xx xx     	lda	|~~umm_heap+2
  4872 00:15E9: 65 03        	adc	<R0+2
  4873 00:15EB: 85 07        	sta	<R1+2
  4874 00:15ED: A7 05        	lda	[<R1]
  4875 00:15EF: 29 00 80     	and	#<$8000
  4876 00:15F2: D0 03        	bne	L143
  4877 00:15F4: 82 15 00     	brl	L10049
  4878                        L143:
  4879                        	.line	297
  4880                        ;
  4881                        ;		//DBGLOG_DEBUG( "Assimilate down to next
                     block, which is FREE\n" );
  4882                        ;
  4883                        ;		c = umm_assimilate_down(c, UMM_FREELIST_
                    MASK);
  4884                        	.line	301
  4885 00:15F7: F4 00 00     	pea	#^$8000
  4886 00:15FA: F4 00 80     	pea	#<$8000
  4887 00:15FD: D4 13        	pei	<L141+c_1+2
  4888 00:15FF: D4 11        	pei	<L141+c_1
  4889 00:1601: 22 xx xx xx  	jsl	~~umm_assimilate_down
  4890 00:1605: 85 11        	sta	<L141+c_1
  4891 00:1607: 86 13        	stx	<L141+c_1+2
  4892                        ;	}
  4893                        	.line	302
  4894                        ;	else
  4895 00:1609: 82 24 01     	brl	L10050
  4896                        L10049:
  4897                        ;	{
  4898                        	.line	304
  4899                        ;		/*
  Mon Aug  9 2021 16:52                                                Page 92


  4900                        ;		 * The previous block is not a free bloc
                    k, so add this one to the head
  4901                        ;		 * of the free list
  4902                        ;		 */
  4903                        ;
  4904                        ;		//DBGLOG_DEBUG( "Just add to head of fre
                    e list\n" );
  4905                        ;		UMM_PFREE(UMM_NFREE(0)) = c;
  4906                        	.line	311
  4907 00:160C: AD xx xx     	lda	|~~umm_heap
  4908 00:160F: 85 05        	sta	<R1
  4909 00:1611: AD xx xx     	lda	|~~umm_heap+2
  4910 00:1614: 85 07        	sta	<R1+2
  4911 00:1616: A0 0A 00     	ldy	#$a
  4912 00:1619: B7 05        	lda	[<R1],Y
  4913 00:161B: 48           	pha
  4914 00:161C: A0 08 00     	ldy	#$8
  4915 00:161F: B7 05        	lda	[<R1],Y
  4916 00:1621: 48           	pha
  4917 00:1622: A9 04 00     	lda	#$4
  4918                        	xref	~~~lasl
  4919 00:1625: 22 xx xx xx  	jsl	~~~lasl
  4920 00:1629: 85 01        	sta	<R0
  4921 00:162B: 86 03        	stx	<R0+2
  4922 00:162D: 18           	clc
  4923 00:162E: A9 0C 00     	lda	#$c
  4924 00:1631: 6D xx xx     	adc	|~~umm_heap
  4925 00:1634: 85 05        	sta	<R1
  4926 00:1636: A9 00 00     	lda	#$0
  4927 00:1639: 6D xx xx     	adc	|~~umm_heap+2
  4928 00:163C: 85 07        	sta	<R1+2
  4929 00:163E: 18           	clc
  4930 00:163F: A5 05        	lda	<R1
  4931 00:1641: 65 01        	adc	<R0
  4932 00:1643: 85 09        	sta	<R2
  4933 00:1645: A5 07        	lda	<R1+2
  4934 00:1647: 65 03        	adc	<R0+2
  4935 00:1649: 85 0B        	sta	<R2+2
  4936 00:164B: A5 11        	lda	<L141+c_1
  4937 00:164D: 87 09        	sta	[<R2]
  4938 00:164F: A5 13        	lda	<L141+c_1+2
  4939 00:1651: A0 02 00     	ldy	#$2
  4940 00:1654: 97 09        	sta	[<R2],Y
  4941                        ;		UMM_NFREE(c) = UMM_NFREE(0);
  4942                        	.line	312
  4943 00:1656: A5 11        	lda	<L141+c_1
  4944 00:1658: 85 01        	sta	<R0
  4945 00:165A: A5 13        	lda	<L141+c_1+2
  4946 00:165C: 85 03        	sta	<R0+2
  4947 00:165E: 06 01        	asl	<R0
  4948 00:1660: 26 03        	rol	<R0+2
  4949 00:1662: 06 01        	asl	<R0
  4950 00:1664: 26 03        	rol	<R0+2
  4951 00:1666: 06 01        	asl	<R0
  4952 00:1668: 26 03        	rol	<R0+2
  4953 00:166A: 06 01        	asl	<R0
  4954 00:166C: 26 03        	rol	<R0+2
  4955 00:166E: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 93


  4956 00:166F: A9 08 00     	lda	#$8
  4957 00:1672: 6D xx xx     	adc	|~~umm_heap
  4958 00:1675: 85 05        	sta	<R1
  4959 00:1677: A9 00 00     	lda	#$0
  4960 00:167A: 6D xx xx     	adc	|~~umm_heap+2
  4961 00:167D: 85 07        	sta	<R1+2
  4962 00:167F: 18           	clc
  4963 00:1680: A5 05        	lda	<R1
  4964 00:1682: 65 01        	adc	<R0
  4965 00:1684: 85 09        	sta	<R2
  4966 00:1686: A5 07        	lda	<R1+2
  4967 00:1688: 65 03        	adc	<R0+2
  4968 00:168A: 85 0B        	sta	<R2+2
  4969 00:168C: AD xx xx     	lda	|~~umm_heap
  4970 00:168F: 85 01        	sta	<R0
  4971 00:1691: AD xx xx     	lda	|~~umm_heap+2
  4972 00:1694: 85 03        	sta	<R0+2
  4973 00:1696: A0 08 00     	ldy	#$8
  4974 00:1699: B7 01        	lda	[<R0],Y
  4975 00:169B: 87 09        	sta	[<R2]
  4976 00:169D: A0 0A 00     	ldy	#$a
  4977 00:16A0: B7 01        	lda	[<R0],Y
  4978 00:16A2: A0 02 00     	ldy	#$2
  4979 00:16A5: 97 09        	sta	[<R2],Y
  4980                        ;		UMM_PFREE(c) = 0;
  4981                        	.line	313
  4982 00:16A7: A5 11        	lda	<L141+c_1
  4983 00:16A9: 85 01        	sta	<R0
  4984 00:16AB: A5 13        	lda	<L141+c_1+2
  4985 00:16AD: 85 03        	sta	<R0+2
  4986 00:16AF: 06 01        	asl	<R0
  4987 00:16B1: 26 03        	rol	<R0+2
  4988 00:16B3: 06 01        	asl	<R0
  4989 00:16B5: 26 03        	rol	<R0+2
  4990 00:16B7: 06 01        	asl	<R0
  4991 00:16B9: 26 03        	rol	<R0+2
  4992 00:16BB: 06 01        	asl	<R0
  4993 00:16BD: 26 03        	rol	<R0+2
  4994 00:16BF: 18           	clc
  4995 00:16C0: A9 0C 00     	lda	#$c
  4996 00:16C3: 6D xx xx     	adc	|~~umm_heap
  4997 00:16C6: 85 05        	sta	<R1
  4998 00:16C8: A9 00 00     	lda	#$0
  4999 00:16CB: 6D xx xx     	adc	|~~umm_heap+2
  5000 00:16CE: 85 07        	sta	<R1+2
  5001 00:16D0: 18           	clc
  5002 00:16D1: A5 05        	lda	<R1
  5003 00:16D3: 65 01        	adc	<R0
  5004 00:16D5: 85 09        	sta	<R2
  5005 00:16D7: A5 07        	lda	<R1+2
  5006 00:16D9: 65 03        	adc	<R0+2
  5007 00:16DB: 85 0B        	sta	<R2+2
  5008 00:16DD: A9 00 00     	lda	#$0
  5009 00:16E0: 87 09        	sta	[<R2]
  5010 00:16E2: A9 00 00     	lda	#$0
  5011 00:16E5: A0 02 00     	ldy	#$2
  5012 00:16E8: 97 09        	sta	[<R2],Y
  5013                        ;		UMM_NFREE(0) = c;
  Mon Aug  9 2021 16:52                                                Page 94


  5014                        	.line	314
  5015 00:16EA: AD xx xx     	lda	|~~umm_heap
  5016 00:16ED: 85 01        	sta	<R0
  5017 00:16EF: AD xx xx     	lda	|~~umm_heap+2
  5018 00:16F2: 85 03        	sta	<R0+2
  5019 00:16F4: A5 11        	lda	<L141+c_1
  5020 00:16F6: A0 08 00     	ldy	#$8
  5021 00:16F9: 97 01        	sta	[<R0],Y
  5022 00:16FB: A5 13        	lda	<L141+c_1+2
  5023 00:16FD: A0 0A 00     	ldy	#$a
  5024 00:1700: 97 01        	sta	[<R0],Y
  5025                        ;
  5026                        ;		UMM_NBLOCK(c) |= UMM_FREELIST_MASK;
  5027                        	.line	316
  5028 00:1702: A5 11        	lda	<L141+c_1
  5029 00:1704: 85 01        	sta	<R0
  5030 00:1706: A5 13        	lda	<L141+c_1+2
  5031 00:1708: 85 03        	sta	<R0+2
  5032 00:170A: 06 01        	asl	<R0
  5033 00:170C: 26 03        	rol	<R0+2
  5034 00:170E: 06 01        	asl	<R0
  5035 00:1710: 26 03        	rol	<R0+2
  5036 00:1712: 06 01        	asl	<R0
  5037 00:1714: 26 03        	rol	<R0+2
  5038 00:1716: 06 01        	asl	<R0
  5039 00:1718: 26 03        	rol	<R0+2
  5040 00:171A: 18           	clc
  5041 00:171B: AD xx xx     	lda	|~~umm_heap
  5042 00:171E: 65 01        	adc	<R0
  5043 00:1720: 85 05        	sta	<R1
  5044 00:1722: AD xx xx     	lda	|~~umm_heap+2
  5045 00:1725: 65 03        	adc	<R0+2
  5046 00:1727: 85 07        	sta	<R1+2
  5047 00:1729: A7 05        	lda	[<R1]
  5048 00:172B: 09 00 80     	ora	#<$8000
  5049 00:172E: 87 05        	sta	[<R1]
  5050                        ;	}
  5051                        	.line	317
  5052                        L10050:
  5053                        ;}
  5054                        	.line	318
  5055                        L144:
  5056 00:1730: A5 16        	lda	<L140+2
  5057 00:1732: 85 1A        	sta	<L140+2+4
  5058 00:1734: A5 15        	lda	<L140+1
  5059 00:1736: 85 19        	sta	<L140+1+4
  5060 00:1738: 2B           	pld
  5061 00:1739: 3B           	tsc
  5062 00:173A: 18           	clc
  5063 00:173B: 69 18 00     	adc	#L140+4
  5064 00:173E: 1B           	tcs
  5065 00:173F: 6B           	rtl
  5066                        	.endblock	318
  5067             00000014   L140	equ	20
  5068             00000011   L141	equ	17
  5069                        	ends
  5070                        	efunc
  5071                        	.endfunc	318,17,20
  Mon Aug  9 2021 16:52                                                Page 95


  5072                        	.line	318
  5073                        ;
  5074                        ;/* ----------------------------------------------
                    -------------------------- */
  5075                        ;
  5076                        ;void umm_free(void FAR *ptr)
  5077                        ;{
  5078                        	.line	322
  5079                        	.line	323
  5080                        	code
  5081                        	xdef	~~umm_free
  5082                        	func
  5083                        	.function	323
  5084                        ~~umm_free:
  5085                        	longa	on
  5086                        	longi	on
  5087 00:1740: 3B           	tsc
  5088 00:1741: 38           	sec
  5089 00:1742: E9 00 00     	sbc	#L145
  5090 00:1745: 1B           	tcs
  5091 00:1746: 0B           	phd
  5092 00:1747: 5B           	tcd
  5093             00000004   ptr_0	set	4
  5094                        	.block	323
  5095                        ;
  5096                        ;	if (umm_heap == NULL)
  5097                        	.sym	ptr,4,129,6,32
  5098                        	.line	325
  5099                        ;	{
  5100 00:1748: AD xx xx     	lda	|~~umm_heap
  5101 00:174B: 0D xx xx     	ora	|~~umm_heap+2
  5102 00:174E: F0 03        	beq	L148
  5103 00:1750: 82 04 00     	brl	L10051
  5104                        L148:
  5105                        	.line	326
  5106                        ;		umm_init();
  5107                        	.line	327
  5108 00:1753: 22 xx xx xx  	jsl	~~umm_init
  5109                        ;	}
  5110                        	.line	328
  5111                        ;
  5112                        ;	/* If we're being asked to free a NULL pointer, 
                    well that's just silly! */
  5113                        ;
  5114                        ;	if ((void FAR *) 0 == ptr)
  5115                        L10051:
  5116                        	.line	332
  5117                        ;	{
  5118 00:1757: A5 04        	lda	<L145+ptr_0
  5119 00:1759: 05 06        	ora	<L145+ptr_0+2
  5120 00:175B: F0 03        	beq	L149
  5121 00:175D: 82 10 00     	brl	L10052
  5122                        L149:
  5123                        	.line	333
  5124                        ;		//DBGLOG_DEBUG( "free a null pointer -> 
                    do nothing\n" );
  5125                        ;
  5126                        ;		return;
  Mon Aug  9 2021 16:52                                                Page 96


  5127                        	.line	336
  5128                        L150:
  5129 00:1760: A5 02        	lda	<L145+2
  5130 00:1762: 85 06        	sta	<L145+2+4
  5131 00:1764: A5 01        	lda	<L145+1
  5132 00:1766: 85 05        	sta	<L145+1+4
  5133 00:1768: 2B           	pld
  5134 00:1769: 3B           	tsc
  5135 00:176A: 18           	clc
  5136 00:176B: 69 04 00     	adc	#L145+4
  5137 00:176E: 1B           	tcs
  5138 00:176F: 6B           	rtl
  5139                        ;	}
  5140                        	.line	337
  5141                        ;
  5142                        ;	/* Free the memory withing a protected critical 
                    section */
  5143                        ;
  5144                        ;	UMM_CRITICAL_ENTRY();
  5145                        L10052:
  5146                        	.line	341
  5147                        ;
  5148                        ;	umm_free_core(ptr);
  5149                        	.line	343
  5150 00:1770: D4 06        	pei	<L145+ptr_0+2
  5151 00:1772: D4 04        	pei	<L145+ptr_0
  5152 00:1774: 22 xx xx xx  	jsl	~~umm_free_core
  5153                        ;
  5154                        ;	UMM_CRITICAL_EXIT();
  5155                        	.line	345
  5156                        ;}
  5157                        	.line	346
  5158 00:1778: 82 E5 FF     	brl	L150
  5159                        	.endblock	346
  5160             00000000   L145	equ	0
  5161             00000001   L146	equ	1
  5162                        	ends
  5163                        	efunc
  5164                        	.endfunc	346,1,0
  5165                        	.line	346
  5166                        ;
  5167                        ;/* ----------------------------------------------
                    --------------------------
  5168                        ; * Must be called only from within critical secti
                    ons guarded by
  5169                        ; * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
  5170                        ; */
  5171                        ;
  5172                        ;static void FAR *umm_malloc_core(unsigned long si
                    ze)
  5173                        ;{
  5174                        	.line	353
  5175                        	.line	354
  5176                        	code
  5177                        	func
  5178                        	.function	354
  5179                        ~~umm_malloc_core:
  5180                        	longa	on
  Mon Aug  9 2021 16:52                                                Page 97


  5181                        	longi	on
  5182 00:177B: 3B           	tsc
  5183 00:177C: 38           	sec
  5184 00:177D: E9 28 00     	sbc	#L151
  5185 00:1780: 1B           	tcs
  5186 00:1781: 0B           	phd
  5187 00:1782: 5B           	tcd
  5188             00000004   size_0	set	4
  5189                        	.block	354
  5190                        ;	unsigned long blocks;
  5191                        ;	unsigned long blockSize = 0;
  5192                        ;
  5193                        ;	unsigned long bestSize;
  5194                        ;	unsigned long bestBlock;
  5195                        ;
  5196                        ;	unsigned long cf;
  5197                        ;
  5198                        ;	blocks = umm_blocks(size);
  5199             00000000   blocks_1	set	0
  5200             00000004   blockSize_1	set	4
  5201             00000008   bestSize_1	set	8
  5202             0000000C   bestBlock_1	set	12
  5203             00000010   cf_1	set	16
  5204                        	.sym	blocks,0,18,1,32
  5205                        	.sym	blockSize,4,18,1,32
  5206                        	.sym	bestSize,8,18,1,32
  5207                        	.sym	bestBlock,12,18,1,32
  5208                        	.sym	cf,16,18,1,32
  5209                        	.sym	size,4,18,6,32
  5210 00:1783: 64 19        	stz	<L152+blockSize_1
  5211 00:1785: 64 1B        	stz	<L152+blockSize_1+2
  5212                        	.line	363
  5213 00:1787: D4 2E        	pei	<L151+size_0+2
  5214 00:1789: D4 2C        	pei	<L151+size_0
  5215 00:178B: 22 xx xx xx  	jsl	~~umm_blocks
  5216 00:178F: 85 15        	sta	<L152+blocks_1
  5217 00:1791: 86 17        	stx	<L152+blocks_1+2
  5218                        ;
  5219                        ;	/*
  5220                        ;	 * Now we can scan through the free list until w
                    e find a space that's big
  5221                        ;	 * enough to hold the number of blocks we need.
  5222                        ;	 *
  5223                        ;	 * This part may be customized to be a best-fit,
                     worst-fit, or first-fit
  5224                        ;	 * algorithm
  5225                        ;	 */
  5226                        ;
  5227                        ;	cf = UMM_NFREE(0);
  5228                        	.line	373
  5229 00:1793: AD xx xx     	lda	|~~umm_heap
  5230 00:1796: 85 01        	sta	<R0
  5231 00:1798: AD xx xx     	lda	|~~umm_heap+2
  5232 00:179B: 85 03        	sta	<R0+2
  5233 00:179D: A0 08 00     	ldy	#$8
  5234 00:17A0: B7 01        	lda	[<R0],Y
  5235 00:17A2: 85 25        	sta	<L152+cf_1
  5236 00:17A4: A0 0A 00     	ldy	#$a
  Mon Aug  9 2021 16:52                                                Page 98


  5237 00:17A7: B7 01        	lda	[<R0],Y
  5238 00:17A9: 85 27        	sta	<L152+cf_1+2
  5239                        ;
  5240                        ;	bestBlock = UMM_NFREE(0);
  5241                        	.line	375
  5242 00:17AB: AD xx xx     	lda	|~~umm_heap
  5243 00:17AE: 85 01        	sta	<R0
  5244 00:17B0: AD xx xx     	lda	|~~umm_heap+2
  5245 00:17B3: 85 03        	sta	<R0+2
  5246 00:17B5: A0 08 00     	ldy	#$8
  5247 00:17B8: B7 01        	lda	[<R0],Y
  5248 00:17BA: 85 21        	sta	<L152+bestBlock_1
  5249 00:17BC: A0 0A 00     	ldy	#$a
  5250 00:17BF: B7 01        	lda	[<R0],Y
  5251 00:17C1: 85 23        	sta	<L152+bestBlock_1+2
  5252                        ;	bestSize = 0x7FFF;
  5253                        	.line	376
  5254 00:17C3: A9 FF 7F     	lda	#$7fff
  5255 00:17C6: 85 1D        	sta	<L152+bestSize_1
  5256 00:17C8: A9 00 00     	lda	#$0
  5257 00:17CB: 85 1F        	sta	<L152+bestSize_1+2
  5258                        ;
  5259                        ;	while (cf)
  5260                        	.line	378
  5261                        L10053:
  5262 00:17CD: A5 25        	lda	<L152+cf_1
  5263 00:17CF: 05 27        	ora	<L152+cf_1+2
  5264 00:17D1: D0 03        	bne	L154
  5265 00:17D3: 82 AB 00     	brl	L10054
  5266                        L154:
  5267                        ;	{
  5268                        	.line	379
  5269                        ;		blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKN
                    O_MASK) - cf;
  5270                        	.line	380
  5271 00:17D6: A5 25        	lda	<L152+cf_1
  5272 00:17D8: 85 01        	sta	<R0
  5273 00:17DA: A5 27        	lda	<L152+cf_1+2
  5274 00:17DC: 85 03        	sta	<R0+2
  5275 00:17DE: 06 01        	asl	<R0
  5276 00:17E0: 26 03        	rol	<R0+2
  5277 00:17E2: 06 01        	asl	<R0
  5278 00:17E4: 26 03        	rol	<R0+2
  5279 00:17E6: 06 01        	asl	<R0
  5280 00:17E8: 26 03        	rol	<R0+2
  5281 00:17EA: 06 01        	asl	<R0
  5282 00:17EC: 26 03        	rol	<R0+2
  5283 00:17EE: 18           	clc
  5284 00:17EF: AD xx xx     	lda	|~~umm_heap
  5285 00:17F2: 65 01        	adc	<R0
  5286 00:17F4: 85 05        	sta	<R1
  5287 00:17F6: AD xx xx     	lda	|~~umm_heap+2
  5288 00:17F9: 65 03        	adc	<R0+2
  5289 00:17FB: 85 07        	sta	<R1+2
  5290 00:17FD: A7 05        	lda	[<R1]
  5291 00:17FF: 29 FF 7F     	and	#<$7fff
  5292 00:1802: 85 01        	sta	<R0
  5293 00:1804: 64 03        	stz	<R0+2
  Mon Aug  9 2021 16:52                                                Page 99


  5294 00:1806: 38           	sec
  5295 00:1807: A5 01        	lda	<R0
  5296 00:1809: E5 25        	sbc	<L152+cf_1
  5297 00:180B: 85 19        	sta	<L152+blockSize_1
  5298 00:180D: A5 03        	lda	<R0+2
  5299 00:180F: E5 27        	sbc	<L152+cf_1+2
  5300 00:1811: 85 1B        	sta	<L152+blockSize_1+2
  5301                        ;
  5302                        ;		//DBGLOG_TRACE( "Looking at block %6i si
                    ze %6i\n", cf, blockSize );
  5303                        ;
  5304                        ;#if defined UMM_BEST_FIT
  5305                        ;		if ((blockSize >= blocks) && (blockSize 
                    < bestSize))
  5306                        	.line	385
  5307                        ;		{
  5308 00:1813: A5 19        	lda	<L152+blockSize_1
  5309 00:1815: C5 15        	cmp	<L152+blocks_1
  5310 00:1817: A5 1B        	lda	<L152+blockSize_1+2
  5311 00:1819: E5 17        	sbc	<L152+blocks_1+2
  5312 00:181B: B0 03        	bcs	L155
  5313 00:181D: 82 1D 00     	brl	L10055
  5314                        L155:
  5315 00:1820: A5 19        	lda	<L152+blockSize_1
  5316 00:1822: C5 1D        	cmp	<L152+bestSize_1
  5317 00:1824: A5 1B        	lda	<L152+blockSize_1+2
  5318 00:1826: E5 1F        	sbc	<L152+bestSize_1+2
  5319 00:1828: 90 03        	bcc	L156
  5320 00:182A: 82 10 00     	brl	L10055
  5321                        L156:
  5322                        	.line	386
  5323                        ;			bestBlock = cf;
  5324                        	.line	387
  5325 00:182D: A5 25        	lda	<L152+cf_1
  5326 00:182F: 85 21        	sta	<L152+bestBlock_1
  5327 00:1831: A5 27        	lda	<L152+cf_1+2
  5328 00:1833: 85 23        	sta	<L152+bestBlock_1+2
  5329                        ;			bestSize = blockSize;
  5330                        	.line	388
  5331 00:1835: A5 19        	lda	<L152+blockSize_1
  5332 00:1837: 85 1D        	sta	<L152+bestSize_1
  5333 00:1839: A5 1B        	lda	<L152+blockSize_1+2
  5334 00:183B: 85 1F        	sta	<L152+bestSize_1+2
  5335                        ;		}
  5336                        	.line	389
  5337                        ;#elif defined UMM_FIRST_FIT
  5338                        ;		/* This is the first block that fits! */
  5339                        ;		if( (blockSize >= blocks) )
  5340                        ;		break;
  5341                        ;#else
  5342                        ;#  error "No UMM_*_FIT is defined - check umm_mal
                    loc_cfg.h"
  5343                        ;#endif
  5344                        ;
  5345                        ;		cf = UMM_NFREE(cf);
  5346                        L10055:
  5347                        	.line	398
  5348 00:183D: A5 25        	lda	<L152+cf_1
  Mon Aug  9 2021 16:52                                                Page 100


  5349 00:183F: 85 01        	sta	<R0
  5350 00:1841: A5 27        	lda	<L152+cf_1+2
  5351 00:1843: 85 03        	sta	<R0+2
  5352 00:1845: 06 01        	asl	<R0
  5353 00:1847: 26 03        	rol	<R0+2
  5354 00:1849: 06 01        	asl	<R0
  5355 00:184B: 26 03        	rol	<R0+2
  5356 00:184D: 06 01        	asl	<R0
  5357 00:184F: 26 03        	rol	<R0+2
  5358 00:1851: 06 01        	asl	<R0
  5359 00:1853: 26 03        	rol	<R0+2
  5360 00:1855: 18           	clc
  5361 00:1856: A9 08 00     	lda	#$8
  5362 00:1859: 6D xx xx     	adc	|~~umm_heap
  5363 00:185C: 85 05        	sta	<R1
  5364 00:185E: A9 00 00     	lda	#$0
  5365 00:1861: 6D xx xx     	adc	|~~umm_heap+2
  5366 00:1864: 85 07        	sta	<R1+2
  5367 00:1866: 18           	clc
  5368 00:1867: A5 05        	lda	<R1
  5369 00:1869: 65 01        	adc	<R0
  5370 00:186B: 85 09        	sta	<R2
  5371 00:186D: A5 07        	lda	<R1+2
  5372 00:186F: 65 03        	adc	<R0+2
  5373 00:1871: 85 0B        	sta	<R2+2
  5374 00:1873: A7 09        	lda	[<R2]
  5375 00:1875: 85 25        	sta	<L152+cf_1
  5376 00:1877: A0 02 00     	ldy	#$2
  5377 00:187A: B7 09        	lda	[<R2],Y
  5378 00:187C: 85 27        	sta	<L152+cf_1+2
  5379                        ;	}
  5380                        	.line	399
  5381 00:187E: 82 4C FF     	brl	L10053
  5382                        L10054:
  5383                        ;
  5384                        ;	if (0x7FFF != bestSize)
  5385                        	.line	401
  5386                        ;	{
  5387 00:1881: A5 1D        	lda	<L152+bestSize_1
  5388 00:1883: C9 FF 7F     	cmp	#<$7fff
  5389 00:1886: D0 05        	bne	L157
  5390 00:1888: A5 1F        	lda	<L152+bestSize_1+2
  5391 00:188A: C9 00 00     	cmp	#^$7fff
  5392                        L157:
  5393 00:188D: D0 03        	bne	L158
  5394 00:188F: 82 10 00     	brl	L10056
  5395                        L158:
  5396                        	.line	402
  5397                        ;		cf = bestBlock;
  5398                        	.line	403
  5399 00:1892: A5 21        	lda	<L152+bestBlock_1
  5400 00:1894: 85 25        	sta	<L152+cf_1
  5401 00:1896: A5 23        	lda	<L152+bestBlock_1+2
  5402 00:1898: 85 27        	sta	<L152+cf_1+2
  5403                        ;		blockSize = bestSize;
  5404                        	.line	404
  5405 00:189A: A5 1D        	lda	<L152+bestSize_1
  5406 00:189C: 85 19        	sta	<L152+blockSize_1
  Mon Aug  9 2021 16:52                                                Page 101


  5407 00:189E: A5 1F        	lda	<L152+bestSize_1+2
  5408 00:18A0: 85 1B        	sta	<L152+blockSize_1+2
  5409                        ;	}
  5410                        	.line	405
  5411                        ;
  5412                        ;	if (( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) && bloc
                    kSize >= blocks)
  5413                        L10056:
  5414                        	.line	407
  5415                        ;	{
  5416 00:18A2: A5 25        	lda	<L152+cf_1
  5417 00:18A4: 85 01        	sta	<R0
  5418 00:18A6: A5 27        	lda	<L152+cf_1+2
  5419 00:18A8: 85 03        	sta	<R0+2
  5420 00:18AA: 06 01        	asl	<R0
  5421 00:18AC: 26 03        	rol	<R0+2
  5422 00:18AE: 06 01        	asl	<R0
  5423 00:18B0: 26 03        	rol	<R0+2
  5424 00:18B2: 06 01        	asl	<R0
  5425 00:18B4: 26 03        	rol	<R0+2
  5426 00:18B6: 06 01        	asl	<R0
  5427 00:18B8: 26 03        	rol	<R0+2
  5428 00:18BA: 18           	clc
  5429 00:18BB: AD xx xx     	lda	|~~umm_heap
  5430 00:18BE: 65 01        	adc	<R0
  5431 00:18C0: 85 05        	sta	<R1
  5432 00:18C2: AD xx xx     	lda	|~~umm_heap+2
  5433 00:18C5: 65 03        	adc	<R0+2
  5434 00:18C7: 85 07        	sta	<R1+2
  5435 00:18C9: A7 05        	lda	[<R1]
  5436 00:18CB: 29 FF 7F     	and	#<$7fff
  5437 00:18CE: D0 03        	bne	L159
  5438 00:18D0: 82 38 02     	brl	L10057
  5439                        L159:
  5440 00:18D3: A5 19        	lda	<L152+blockSize_1
  5441 00:18D5: C5 15        	cmp	<L152+blocks_1
  5442 00:18D7: A5 1B        	lda	<L152+blockSize_1+2
  5443 00:18D9: E5 17        	sbc	<L152+blocks_1+2
  5444 00:18DB: B0 03        	bcs	L160
  5445 00:18DD: 82 2B 02     	brl	L10057
  5446                        L160:
  5447                        	.line	408
  5448                        ;		/*
  5449                        ;		 * This is an existing block in the memo
                    ry heap, we just need to split off
  5450                        ;		 * what we need, unlink it from the free
                     list and mark it as in use, and
  5451                        ;		 * link the rest of the block back into 
                    the freelist as if it was a new
  5452                        ;		 * block on the free list...
  5453                        ;		 */
  5454                        ;
  5455                        ;		if (blockSize == blocks)
  5456                        	.line	416
  5457                        ;		{
  5458 00:18E0: A5 19        	lda	<L152+blockSize_1
  5459 00:18E2: C5 15        	cmp	<L152+blocks_1
  5460 00:18E4: D0 04        	bne	L161
  Mon Aug  9 2021 16:52                                                Page 102


  5461 00:18E6: A5 1B        	lda	<L152+blockSize_1+2
  5462 00:18E8: C5 17        	cmp	<L152+blocks_1+2
  5463                        L161:
  5464 00:18EA: F0 03        	beq	L162
  5465 00:18EC: 82 0B 00     	brl	L10058
  5466                        L162:
  5467                        	.line	417
  5468                        ;			/* It's an exact fit and we don'
                    t neet to split off a block. */
  5469                        ;			//DBGLOG_DEBUG( "Allocating %6i 
                    blocks starting at %6i - exact\n", blocks, cf );
  5470                        ;			/* Disconnect this block from th
                    e FREE list */
  5471                        ;
  5472                        ;			umm_disconnect_from_free_list(cf
                    );
  5473                        	.line	422
  5474 00:18EF: D4 27        	pei	<L152+cf_1+2
  5475 00:18F1: D4 25        	pei	<L152+cf_1
  5476 00:18F3: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  5477                        ;
  5478                        ;		}
  5479                        	.line	424
  5480                        ;		else
  5481 00:18F7: 82 0E 02     	brl	L10059
  5482                        L10058:
  5483                        ;		{
  5484                        	.line	426
  5485                        ;			/* It's not an exact fit and we 
                    need to split off a block. */
  5486                        ;			//DBGLOG_DEBUG( "Allocating %6i 
                    blocks starting at %6i - existing\n", blocks, cf );
  5487                        ;			/*
  5488                        ;			 * split current free block `cf`
                     into two blocks. The first one will be
  5489                        ;			 * returned to user, so it's not
                     free, and the second one will be free.
  5490                        ;			 */
  5491                        ;			umm_split_block(cf, blocks,
  5492                        	.line	433
  5493                        ;					UMM_FREELIST_MAS
                    K /*new block is free*/);
  5494 00:18FA: F4 00 00     	pea	#^$8000
  5495 00:18FD: F4 00 80     	pea	#<$8000
  5496 00:1900: D4 17        	pei	<L152+blocks_1+2
  5497 00:1902: D4 15        	pei	<L152+blocks_1
  5498 00:1904: D4 27        	pei	<L152+cf_1+2
  5499 00:1906: D4 25        	pei	<L152+cf_1
  5500 00:1908: 22 xx xx xx  	jsl	~~umm_split_block
  5501                        ;
  5502                        ;			/*
  5503                        ;			 * `umm_split_block()` does not 
                    update the free pointers (it affects
  5504                        ;			 * only free flags), but effecti
                    vely we've just moved beginning of the
  5505                        ;			 * free block from `cf` to `cf +
                     blocks`. So we have to adjust pointers
  5506                        ;			 * to and from adjacent free blo
  Mon Aug  9 2021 16:52                                                Page 103


                    cks.
  5507                        ;			 */
  5508                        ;
  5509                        ;			/* previous free block */
  5510                        ;			UMM_NFREE( UMM_PFREE(cf) ) = cf 
                    + blocks;
  5511                        	.line	444
  5512 00:190C: A5 25        	lda	<L152+cf_1
  5513 00:190E: 85 05        	sta	<R1
  5514 00:1910: A5 27        	lda	<L152+cf_1+2
  5515 00:1912: 85 07        	sta	<R1+2
  5516 00:1914: 06 05        	asl	<R1
  5517 00:1916: 26 07        	rol	<R1+2
  5518 00:1918: 06 05        	asl	<R1
  5519 00:191A: 26 07        	rol	<R1+2
  5520 00:191C: 06 05        	asl	<R1
  5521 00:191E: 26 07        	rol	<R1+2
  5522 00:1920: 06 05        	asl	<R1
  5523 00:1922: 26 07        	rol	<R1+2
  5524 00:1924: 18           	clc
  5525 00:1925: A9 0C 00     	lda	#$c
  5526 00:1928: 6D xx xx     	adc	|~~umm_heap
  5527 00:192B: 85 09        	sta	<R2
  5528 00:192D: A9 00 00     	lda	#$0
  5529 00:1930: 6D xx xx     	adc	|~~umm_heap+2
  5530 00:1933: 85 0B        	sta	<R2+2
  5531 00:1935: 18           	clc
  5532 00:1936: A5 09        	lda	<R2
  5533 00:1938: 65 05        	adc	<R1
  5534 00:193A: 85 0D        	sta	<R3
  5535 00:193C: A5 0B        	lda	<R2+2
  5536 00:193E: 65 07        	adc	<R1+2
  5537 00:1940: 85 0F        	sta	<R3+2
  5538 00:1942: A0 02 00     	ldy	#$2
  5539 00:1945: B7 0D        	lda	[<R3],Y
  5540 00:1947: 48           	pha
  5541 00:1948: A7 0D        	lda	[<R3]
  5542 00:194A: 48           	pha
  5543 00:194B: A9 04 00     	lda	#$4
  5544                        	xref	~~~lasl
  5545 00:194E: 22 xx xx xx  	jsl	~~~lasl
  5546 00:1952: 85 01        	sta	<R0
  5547 00:1954: 86 03        	stx	<R0+2
  5548 00:1956: 18           	clc
  5549 00:1957: A9 08 00     	lda	#$8
  5550 00:195A: 6D xx xx     	adc	|~~umm_heap
  5551 00:195D: 85 05        	sta	<R1
  5552 00:195F: A9 00 00     	lda	#$0
  5553 00:1962: 6D xx xx     	adc	|~~umm_heap+2
  5554 00:1965: 85 07        	sta	<R1+2
  5555 00:1967: 18           	clc
  5556 00:1968: A5 05        	lda	<R1
  5557 00:196A: 65 01        	adc	<R0
  5558 00:196C: 85 09        	sta	<R2
  5559 00:196E: A5 07        	lda	<R1+2
  5560 00:1970: 65 03        	adc	<R0+2
  5561 00:1972: 85 0B        	sta	<R2+2
  5562 00:1974: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 104


  5563 00:1975: A5 25        	lda	<L152+cf_1
  5564 00:1977: 65 15        	adc	<L152+blocks_1
  5565 00:1979: 85 01        	sta	<R0
  5566 00:197B: A5 27        	lda	<L152+cf_1+2
  5567 00:197D: 65 17        	adc	<L152+blocks_1+2
  5568 00:197F: 85 03        	sta	<R0+2
  5569 00:1981: A5 01        	lda	<R0
  5570 00:1983: 87 09        	sta	[<R2]
  5571 00:1985: A5 03        	lda	<R0+2
  5572 00:1987: A0 02 00     	ldy	#$2
  5573 00:198A: 97 09        	sta	[<R2],Y
  5574                        ;			UMM_PFREE( cf + blocks ) = UMM_P
                    FREE(cf);
  5575                        	.line	445
  5576 00:198C: 18           	clc
  5577 00:198D: A5 25        	lda	<L152+cf_1
  5578 00:198F: 65 15        	adc	<L152+blocks_1
  5579 00:1991: 85 05        	sta	<R1
  5580 00:1993: A5 27        	lda	<L152+cf_1+2
  5581 00:1995: 65 17        	adc	<L152+blocks_1+2
  5582 00:1997: 85 07        	sta	<R1+2
  5583 00:1999: D4 07        	pei	<R1+2
  5584 00:199B: D4 05        	pei	<R1
  5585 00:199D: A9 04 00     	lda	#$4
  5586                        	xref	~~~lasl
  5587 00:19A0: 22 xx xx xx  	jsl	~~~lasl
  5588 00:19A4: 85 01        	sta	<R0
  5589 00:19A6: 86 03        	stx	<R0+2
  5590 00:19A8: 18           	clc
  5591 00:19A9: A9 0C 00     	lda	#$c
  5592 00:19AC: 6D xx xx     	adc	|~~umm_heap
  5593 00:19AF: 85 09        	sta	<R2
  5594 00:19B1: A9 00 00     	lda	#$0
  5595 00:19B4: 6D xx xx     	adc	|~~umm_heap+2
  5596 00:19B7: 85 0B        	sta	<R2+2
  5597 00:19B9: 18           	clc
  5598 00:19BA: A5 09        	lda	<R2
  5599 00:19BC: 65 01        	adc	<R0
  5600 00:19BE: 85 0D        	sta	<R3
  5601 00:19C0: A5 0B        	lda	<R2+2
  5602 00:19C2: 65 03        	adc	<R0+2
  5603 00:19C4: 85 0F        	sta	<R3+2
  5604 00:19C6: A5 25        	lda	<L152+cf_1
  5605 00:19C8: 85 01        	sta	<R0
  5606 00:19CA: A5 27        	lda	<L152+cf_1+2
  5607 00:19CC: 85 03        	sta	<R0+2
  5608 00:19CE: 06 01        	asl	<R0
  5609 00:19D0: 26 03        	rol	<R0+2
  5610 00:19D2: 06 01        	asl	<R0
  5611 00:19D4: 26 03        	rol	<R0+2
  5612 00:19D6: 06 01        	asl	<R0
  5613 00:19D8: 26 03        	rol	<R0+2
  5614 00:19DA: 06 01        	asl	<R0
  5615 00:19DC: 26 03        	rol	<R0+2
  5616 00:19DE: 18           	clc
  5617 00:19DF: A9 0C 00     	lda	#$c
  5618 00:19E2: 6D xx xx     	adc	|~~umm_heap
  5619 00:19E5: 85 09        	sta	<R2
  Mon Aug  9 2021 16:52                                                Page 105


  5620 00:19E7: A9 00 00     	lda	#$0
  5621 00:19EA: 6D xx xx     	adc	|~~umm_heap+2
  5622 00:19ED: 85 0B        	sta	<R2+2
  5623 00:19EF: 18           	clc
  5624 00:19F0: A5 09        	lda	<R2
  5625 00:19F2: 65 01        	adc	<R0
  5626 00:19F4: 85 11        	sta	<17
  5627 00:19F6: A5 0B        	lda	<R2+2
  5628 00:19F8: 65 03        	adc	<R0+2
  5629 00:19FA: 85 13        	sta	<17+2
  5630 00:19FC: A7 11        	lda	[<17]
  5631 00:19FE: 87 0D        	sta	[<R3]
  5632 00:1A00: A0 02 00     	ldy	#$2
  5633 00:1A03: B7 11        	lda	[<17],Y
  5634 00:1A05: A0 02 00     	ldy	#$2
  5635 00:1A08: 97 0D        	sta	[<R3],Y
  5636                        ;
  5637                        ;			/* next free block */
  5638                        ;			UMM_PFREE( UMM_NFREE(cf) ) = cf 
                    + blocks;
  5639                        	.line	448
  5640 00:1A0A: A5 25        	lda	<L152+cf_1
  5641 00:1A0C: 85 05        	sta	<R1
  5642 00:1A0E: A5 27        	lda	<L152+cf_1+2
  5643 00:1A10: 85 07        	sta	<R1+2
  5644 00:1A12: 06 05        	asl	<R1
  5645 00:1A14: 26 07        	rol	<R1+2
  5646 00:1A16: 06 05        	asl	<R1
  5647 00:1A18: 26 07        	rol	<R1+2
  5648 00:1A1A: 06 05        	asl	<R1
  5649 00:1A1C: 26 07        	rol	<R1+2
  5650 00:1A1E: 06 05        	asl	<R1
  5651 00:1A20: 26 07        	rol	<R1+2
  5652 00:1A22: 18           	clc
  5653 00:1A23: A9 08 00     	lda	#$8
  5654 00:1A26: 6D xx xx     	adc	|~~umm_heap
  5655 00:1A29: 85 09        	sta	<R2
  5656 00:1A2B: A9 00 00     	lda	#$0
  5657 00:1A2E: 6D xx xx     	adc	|~~umm_heap+2
  5658 00:1A31: 85 0B        	sta	<R2+2
  5659 00:1A33: 18           	clc
  5660 00:1A34: A5 09        	lda	<R2
  5661 00:1A36: 65 05        	adc	<R1
  5662 00:1A38: 85 0D        	sta	<R3
  5663 00:1A3A: A5 0B        	lda	<R2+2
  5664 00:1A3C: 65 07        	adc	<R1+2
  5665 00:1A3E: 85 0F        	sta	<R3+2
  5666 00:1A40: A0 02 00     	ldy	#$2
  5667 00:1A43: B7 0D        	lda	[<R3],Y
  5668 00:1A45: 48           	pha
  5669 00:1A46: A7 0D        	lda	[<R3]
  5670 00:1A48: 48           	pha
  5671 00:1A49: A9 04 00     	lda	#$4
  5672                        	xref	~~~lasl
  5673 00:1A4C: 22 xx xx xx  	jsl	~~~lasl
  5674 00:1A50: 85 01        	sta	<R0
  5675 00:1A52: 86 03        	stx	<R0+2
  5676 00:1A54: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 106


  5677 00:1A55: A9 0C 00     	lda	#$c
  5678 00:1A58: 6D xx xx     	adc	|~~umm_heap
  5679 00:1A5B: 85 05        	sta	<R1
  5680 00:1A5D: A9 00 00     	lda	#$0
  5681 00:1A60: 6D xx xx     	adc	|~~umm_heap+2
  5682 00:1A63: 85 07        	sta	<R1+2
  5683 00:1A65: 18           	clc
  5684 00:1A66: A5 05        	lda	<R1
  5685 00:1A68: 65 01        	adc	<R0
  5686 00:1A6A: 85 09        	sta	<R2
  5687 00:1A6C: A5 07        	lda	<R1+2
  5688 00:1A6E: 65 03        	adc	<R0+2
  5689 00:1A70: 85 0B        	sta	<R2+2
  5690 00:1A72: 18           	clc
  5691 00:1A73: A5 25        	lda	<L152+cf_1
  5692 00:1A75: 65 15        	adc	<L152+blocks_1
  5693 00:1A77: 85 01        	sta	<R0
  5694 00:1A79: A5 27        	lda	<L152+cf_1+2
  5695 00:1A7B: 65 17        	adc	<L152+blocks_1+2
  5696 00:1A7D: 85 03        	sta	<R0+2
  5697 00:1A7F: A5 01        	lda	<R0
  5698 00:1A81: 87 09        	sta	[<R2]
  5699 00:1A83: A5 03        	lda	<R0+2
  5700 00:1A85: A0 02 00     	ldy	#$2
  5701 00:1A88: 97 09        	sta	[<R2],Y
  5702                        ;			UMM_NFREE( cf + blocks ) = UMM_N
                    FREE(cf);
  5703                        	.line	449
  5704 00:1A8A: 18           	clc
  5705 00:1A8B: A5 25        	lda	<L152+cf_1
  5706 00:1A8D: 65 15        	adc	<L152+blocks_1
  5707 00:1A8F: 85 05        	sta	<R1
  5708 00:1A91: A5 27        	lda	<L152+cf_1+2
  5709 00:1A93: 65 17        	adc	<L152+blocks_1+2
  5710 00:1A95: 85 07        	sta	<R1+2
  5711 00:1A97: D4 07        	pei	<R1+2
  5712 00:1A99: D4 05        	pei	<R1
  5713 00:1A9B: A9 04 00     	lda	#$4
  5714                        	xref	~~~lasl
  5715 00:1A9E: 22 xx xx xx  	jsl	~~~lasl
  5716 00:1AA2: 85 01        	sta	<R0
  5717 00:1AA4: 86 03        	stx	<R0+2
  5718 00:1AA6: 18           	clc
  5719 00:1AA7: A9 08 00     	lda	#$8
  5720 00:1AAA: 6D xx xx     	adc	|~~umm_heap
  5721 00:1AAD: 85 09        	sta	<R2
  5722 00:1AAF: A9 00 00     	lda	#$0
  5723 00:1AB2: 6D xx xx     	adc	|~~umm_heap+2
  5724 00:1AB5: 85 0B        	sta	<R2+2
  5725 00:1AB7: 18           	clc
  5726 00:1AB8: A5 09        	lda	<R2
  5727 00:1ABA: 65 01        	adc	<R0
  5728 00:1ABC: 85 0D        	sta	<R3
  5729 00:1ABE: A5 0B        	lda	<R2+2
  5730 00:1AC0: 65 03        	adc	<R0+2
  5731 00:1AC2: 85 0F        	sta	<R3+2
  5732 00:1AC4: A5 25        	lda	<L152+cf_1
  5733 00:1AC6: 85 01        	sta	<R0
  Mon Aug  9 2021 16:52                                                Page 107


  5734 00:1AC8: A5 27        	lda	<L152+cf_1+2
  5735 00:1ACA: 85 03        	sta	<R0+2
  5736 00:1ACC: 06 01        	asl	<R0
  5737 00:1ACE: 26 03        	rol	<R0+2
  5738 00:1AD0: 06 01        	asl	<R0
  5739 00:1AD2: 26 03        	rol	<R0+2
  5740 00:1AD4: 06 01        	asl	<R0
  5741 00:1AD6: 26 03        	rol	<R0+2
  5742 00:1AD8: 06 01        	asl	<R0
  5743 00:1ADA: 26 03        	rol	<R0+2
  5744 00:1ADC: 18           	clc
  5745 00:1ADD: A9 08 00     	lda	#$8
  5746 00:1AE0: 6D xx xx     	adc	|~~umm_heap
  5747 00:1AE3: 85 09        	sta	<R2
  5748 00:1AE5: A9 00 00     	lda	#$0
  5749 00:1AE8: 6D xx xx     	adc	|~~umm_heap+2
  5750 00:1AEB: 85 0B        	sta	<R2+2
  5751 00:1AED: 18           	clc
  5752 00:1AEE: A5 09        	lda	<R2
  5753 00:1AF0: 65 01        	adc	<R0
  5754 00:1AF2: 85 11        	sta	<17
  5755 00:1AF4: A5 0B        	lda	<R2+2
  5756 00:1AF6: 65 03        	adc	<R0+2
  5757 00:1AF8: 85 13        	sta	<17+2
  5758 00:1AFA: A7 11        	lda	[<17]
  5759 00:1AFC: 87 0D        	sta	[<R3]
  5760 00:1AFE: A0 02 00     	ldy	#$2
  5761 00:1B01: B7 11        	lda	[<17],Y
  5762 00:1B03: A0 02 00     	ldy	#$2
  5763 00:1B06: 97 0D        	sta	[<R3],Y
  5764                        ;		}
  5765                        	.line	450
  5766                        L10059:
  5767                        ;	}
  5768                        	.line	451
  5769                        ;	else
  5770 00:1B08: 82 19 00     	brl	L10060
  5771                        L10057:
  5772                        ;	{
  5773                        	.line	453
  5774                        ;		/* Out of memory */
  5775                        ;
  5776                        ;		//DBGLOG_DEBUG(  "Can't allocate %5i blo
                    cks\n", blocks );
  5777                        ;		return ((void FAR*) NULL);
  5778                        	.line	457
  5779 00:1B0B: A9 00 00     	lda	#$0
  5780 00:1B0E: AA           	tax
  5781 00:1B0F: A9 00 00     	lda	#$0
  5782                        L163:
  5783 00:1B12: A8           	tay
  5784 00:1B13: A5 2A        	lda	<L151+2
  5785 00:1B15: 85 2E        	sta	<L151+2+4
  5786 00:1B17: A5 29        	lda	<L151+1
  5787 00:1B19: 85 2D        	sta	<L151+1+4
  5788 00:1B1B: 2B           	pld
  5789 00:1B1C: 3B           	tsc
  5790 00:1B1D: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 108


  5791 00:1B1E: 69 2C 00     	adc	#L151+4
  5792 00:1B21: 1B           	tcs
  5793 00:1B22: 98           	tya
  5794 00:1B23: 6B           	rtl
  5795                        ;	}
  5796                        	.line	458
  5797                        L10060:
  5798                        ;
  5799                        ;	return ((void FAR*) &UMM_DATA(cf));
  5800                        	.line	460
  5801 00:1B24: A5 25        	lda	<L152+cf_1
  5802 00:1B26: 85 01        	sta	<R0
  5803 00:1B28: A5 27        	lda	<L152+cf_1+2
  5804 00:1B2A: 85 03        	sta	<R0+2
  5805 00:1B2C: 06 01        	asl	<R0
  5806 00:1B2E: 26 03        	rol	<R0+2
  5807 00:1B30: 06 01        	asl	<R0
  5808 00:1B32: 26 03        	rol	<R0+2
  5809 00:1B34: 06 01        	asl	<R0
  5810 00:1B36: 26 03        	rol	<R0+2
  5811 00:1B38: 06 01        	asl	<R0
  5812 00:1B3A: 26 03        	rol	<R0+2
  5813 00:1B3C: 18           	clc
  5814 00:1B3D: A9 08 00     	lda	#$8
  5815 00:1B40: 65 01        	adc	<R0
  5816 00:1B42: 85 05        	sta	<R1
  5817 00:1B44: A9 00 00     	lda	#$0
  5818 00:1B47: 65 03        	adc	<R0+2
  5819 00:1B49: 85 07        	sta	<R1+2
  5820 00:1B4B: 18           	clc
  5821 00:1B4C: AD xx xx     	lda	|~~umm_heap
  5822 00:1B4F: 65 05        	adc	<R1
  5823 00:1B51: 85 01        	sta	<R0
  5824 00:1B53: AD xx xx     	lda	|~~umm_heap+2
  5825 00:1B56: 65 07        	adc	<R1+2
  5826 00:1B58: 85 03        	sta	<R0+2
  5827 00:1B5A: A6 03        	ldx	<R0+2
  5828 00:1B5C: A5 01        	lda	<R0
  5829 00:1B5E: 82 B1 FF     	brl	L163
  5830                        ;}
  5831                        	.line	461
  5832                        	.endblock	461
  5833             00000028   L151	equ	40
  5834             00000015   L152	equ	21
  5835                        	ends
  5836                        	efunc
  5837                        	.endfunc	461,21,40
  5838                        	.line	461
  5839                        ;
  5840                        ;/* ----------------------------------------------
                    -------------------------- */
  5841                        ;
  5842                        ;void FAR *umm_malloc(unsigned long size)
  5843                        ;{
  5844                        	.line	465
  5845                        	.line	466
  5846                        	code
  5847                        	xdef	~~umm_malloc
  Mon Aug  9 2021 16:52                                                Page 109


  5848                        	func
  5849                        	.function	466
  5850                        ~~umm_malloc:
  5851                        	longa	on
  5852                        	longi	on
  5853 00:1B61: 3B           	tsc
  5854 00:1B62: 38           	sec
  5855 00:1B63: E9 04 00     	sbc	#L164
  5856 00:1B66: 1B           	tcs
  5857 00:1B67: 0B           	phd
  5858 00:1B68: 5B           	tcd
  5859             00000004   size_0	set	4
  5860                        	.block	466
  5861                        ;
  5862                        ;	void FAR *ptr = NULL;
  5863                        ;
  5864                        ;	if (umm_heap == NULL)
  5865             00000000   ptr_1	set	0
  5866                        	.sym	ptr,0,129,1,32
  5867                        	.sym	size,4,18,6,32
  5868 00:1B69: 64 01        	stz	<L165+ptr_1
  5869 00:1B6B: 64 03        	stz	<L165+ptr_1+2
  5870                        	.line	470
  5871                        ;	{
  5872 00:1B6D: AD xx xx     	lda	|~~umm_heap
  5873 00:1B70: 0D xx xx     	ora	|~~umm_heap+2
  5874 00:1B73: F0 03        	beq	L167
  5875 00:1B75: 82 04 00     	brl	L10061
  5876                        L167:
  5877                        	.line	471
  5878                        ;		umm_init();
  5879                        	.line	472
  5880 00:1B78: 22 xx xx xx  	jsl	~~umm_init
  5881                        ;	}
  5882                        	.line	473
  5883                        ;
  5884                        ;	/*
  5885                        ;	 * the very first thing we do is figure out if w
                    e're being asked to allocate
  5886                        ;	 * a size of 0 - and if we are we'll simply retu
                    rn a null pointer. if not
  5887                        ;	 * then reduce the size by 1 byte so that the su
                    bsequent calculations on
  5888                        ;	 * the number of blocks to allocate are easier..
                    .
  5889                        ;	 */
  5890                        ;
  5891                        ;	if (0 == size)
  5892                        L10061:
  5893                        	.line	482
  5894                        ;	{
  5895 00:1B7C: A5 08        	lda	<L164+size_0
  5896 00:1B7E: 05 0A        	ora	<L164+size_0+2
  5897 00:1B80: F0 03        	beq	L168
  5898 00:1B82: 82 16 00     	brl	L10062
  5899                        L168:
  5900                        	.line	483
  5901                        ;		//DBGLOG_DEBUG( "malloc a block of 0 byt
  Mon Aug  9 2021 16:52                                                Page 110


                    es -> do nothing\n" );
  5902                        ;
  5903                        ;		return (ptr);
  5904                        	.line	486
  5905 00:1B85: A6 03        	ldx	<L165+ptr_1+2
  5906 00:1B87: A5 01        	lda	<L165+ptr_1
  5907                        L169:
  5908 00:1B89: A8           	tay
  5909 00:1B8A: A5 06        	lda	<L164+2
  5910 00:1B8C: 85 0A        	sta	<L164+2+4
  5911 00:1B8E: A5 05        	lda	<L164+1
  5912 00:1B90: 85 09        	sta	<L164+1+4
  5913 00:1B92: 2B           	pld
  5914 00:1B93: 3B           	tsc
  5915 00:1B94: 18           	clc
  5916 00:1B95: 69 08 00     	adc	#L164+4
  5917 00:1B98: 1B           	tcs
  5918 00:1B99: 98           	tya
  5919 00:1B9A: 6B           	rtl
  5920                        ;	}
  5921                        	.line	487
  5922                        ;
  5923                        ;	/* Allocate the memory withing a protected criti
                    cal section */
  5924                        ;
  5925                        ;	UMM_CRITICAL_ENTRY();
  5926                        L10062:
  5927                        	.line	491
  5928                        ;
  5929                        ;	ptr = umm_malloc_core(size);
  5930                        	.line	493
  5931 00:1B9B: D4 0A        	pei	<L164+size_0+2
  5932 00:1B9D: D4 08        	pei	<L164+size_0
  5933 00:1B9F: 22 xx xx xx  	jsl	~~umm_malloc_core
  5934 00:1BA3: 85 01        	sta	<L165+ptr_1
  5935 00:1BA5: 86 03        	stx	<L165+ptr_1+2
  5936                        ;
  5937                        ;	UMM_CRITICAL_EXIT();
  5938                        	.line	495
  5939                        ;
  5940                        ;	return (ptr);
  5941                        	.line	497
  5942 00:1BA7: A6 03        	ldx	<L165+ptr_1+2
  5943 00:1BA9: A5 01        	lda	<L165+ptr_1
  5944 00:1BAB: 82 DB FF     	brl	L169
  5945                        ;}
  5946                        	.line	498
  5947                        	.endblock	498
  5948             00000004   L164	equ	4
  5949             00000001   L165	equ	1
  5950                        	ends
  5951                        	efunc
  5952                        	.endfunc	498,1,4
  5953                        	.line	498
  5954                        ;
  5955                        ;/* ----------------------------------------------
                    -------------------------- */
  5956                        ;
  Mon Aug  9 2021 16:52                                                Page 111


  5957                        ;void FAR *umm_realloc(void FAR *ptr, unsigned lon
                    g size)
  5958                        ;{
  5959                        	.line	502
  5960                        	.line	503
  5961                        	code
  5962                        	xdef	~~umm_realloc
  5963                        	func
  5964                        	.function	503
  5965                        ~~umm_realloc:
  5966                        	longa	on
  5967                        	longi	on
  5968 00:1BAE: 3B           	tsc
  5969 00:1BAF: 38           	sec
  5970 00:1BB0: E9 2C 00     	sbc	#L170
  5971 00:1BB3: 1B           	tcs
  5972 00:1BB4: 0B           	phd
  5973 00:1BB5: 5B           	tcd
  5974             00000004   ptr_0	set	4
  5975             00000008   size_0	set	8
  5976                        	.block	503
  5977                        ;
  5978                        ;	unsigned long blocks;
  5979                        ;	unsigned long blockSize;
  5980                        ;	unsigned long prevBlockSize = 0;
  5981                        ;	unsigned long nextBlockSize = 0;
  5982                        ;
  5983                        ;	unsigned long c;
  5984                        ;
  5985                        ;	ULONG curSize;
  5986                        ;
  5987                        ;	if (umm_heap == NULL)
  5988             00000000   blocks_1	set	0
  5989             00000004   blockSize_1	set	4
  5990             00000008   prevBlockSize_1	set	8
  5991             0000000C   nextBlockSize_1	set	12
  5992             00000010   c_1	set	16
  5993             00000014   curSize_1	set	20
  5994                        	.sym	blocks,0,18,1,32
  5995                        	.sym	blockSize,4,18,1,32
  5996                        	.sym	prevBlockSize,8,18,1,32
  5997                        	.sym	nextBlockSize,12,18,1,32
  5998                        	.sym	c,16,18,1,32
  5999                        	.sym	curSize,20,18,1,32
  6000                        	.sym	ptr,4,129,6,32
  6001                        	.sym	size,8,18,6,32
  6002 00:1BB6: 64 19        	stz	<L171+prevBlockSize_1
  6003 00:1BB8: 64 1B        	stz	<L171+prevBlockSize_1+2
  6004 00:1BBA: 64 1D        	stz	<L171+nextBlockSize_1
  6005 00:1BBC: 64 1F        	stz	<L171+nextBlockSize_1+2
  6006                        	.line	514
  6007                        ;	{
  6008 00:1BBE: AD xx xx     	lda	|~~umm_heap
  6009 00:1BC1: 0D xx xx     	ora	|~~umm_heap+2
  6010 00:1BC4: F0 03        	beq	L173
  6011 00:1BC6: 82 04 00     	brl	L10063
  6012                        L173:
  6013                        	.line	515
  Mon Aug  9 2021 16:52                                                Page 112


  6014                        ;		umm_init();
  6015                        	.line	516
  6016 00:1BC9: 22 xx xx xx  	jsl	~~umm_init
  6017                        ;	}
  6018                        	.line	517
  6019                        ;
  6020                        ;	/*
  6021                        ;	 * This code looks after the case of a NULL valu
                    e for ptr. The ANSI C
  6022                        ;	 * standard says that if ptr is NULL and size is
                     non-zero, then we've
  6023                        ;	 * got to work the same a malloc(). If size is a
                    lso 0, then our version
  6024                        ;	 * of malloc() returns a NULL pointer, which is 
                    OK as FAR as the ANSI C
  6025                        ;	 * standard is concerned.
  6026                        ;	 */
  6027                        ;
  6028                        ;	if (((void FAR*) NULL == ptr))
  6029                        L10063:
  6030                        	.line	527
  6031                        ;	{
  6032 00:1BCD: A5 30        	lda	<L170+ptr_0
  6033 00:1BCF: 05 32        	ora	<L170+ptr_0+2
  6034 00:1BD1: F0 03        	beq	L174
  6035 00:1BD3: 82 22 00     	brl	L10064
  6036                        L174:
  6037                        	.line	528
  6038                        ;		//DBGLOG_DEBUG( "realloc the NULL pointe
                    r - call malloc()\n" );
  6039                        ;
  6040                        ;		return (umm_malloc(size));
  6041                        	.line	531
  6042 00:1BD6: D4 36        	pei	<L170+size_0+2
  6043 00:1BD8: D4 34        	pei	<L170+size_0
  6044 00:1BDA: 22 xx xx xx  	jsl	~~umm_malloc
  6045 00:1BDE: 85 01        	sta	<R0
  6046 00:1BE0: 86 03        	stx	<R0+2
  6047 00:1BE2: A6 03        	ldx	<R0+2
  6048 00:1BE4: A5 01        	lda	<R0
  6049                        L175:
  6050 00:1BE6: A8           	tay
  6051 00:1BE7: A5 2E        	lda	<L170+2
  6052 00:1BE9: 85 36        	sta	<L170+2+8
  6053 00:1BEB: A5 2D        	lda	<L170+1
  6054 00:1BED: 85 35        	sta	<L170+1+8
  6055 00:1BEF: 2B           	pld
  6056 00:1BF0: 3B           	tsc
  6057 00:1BF1: 18           	clc
  6058 00:1BF2: 69 34 00     	adc	#L170+8
  6059 00:1BF5: 1B           	tcs
  6060 00:1BF6: 98           	tya
  6061 00:1BF7: 6B           	rtl
  6062                        ;	}
  6063                        	.line	532
  6064                        ;
  6065                        ;	/*
  6066                        ;	 * Now we're sure that we have a non_NULL ptr, b
  Mon Aug  9 2021 16:52                                                Page 113


                    ut we're not sure what
  6067                        ;	 * we should do with it. If the size is 0, then 
                    the ANSI C standard says that
  6068                        ;	 * we should operate the same as free.
  6069                        ;	 */
  6070                        ;
  6071                        ;	if (0 == size)
  6072                        L10064:
  6073                        	.line	540
  6074                        ;	{
  6075 00:1BF8: A5 34        	lda	<L170+size_0
  6076 00:1BFA: 05 36        	ora	<L170+size_0+2
  6077 00:1BFC: F0 03        	beq	L176
  6078 00:1BFE: 82 12 00     	brl	L10065
  6079                        L176:
  6080                        	.line	541
  6081                        ;		//DBGLOG_DEBUG( "realloc to 0 size, just
                     free the block\n" );
  6082                        ;
  6083                        ;		umm_free(ptr);
  6084                        	.line	544
  6085 00:1C01: D4 32        	pei	<L170+ptr_0+2
  6086 00:1C03: D4 30        	pei	<L170+ptr_0
  6087 00:1C05: 22 xx xx xx  	jsl	~~umm_free
  6088                        ;
  6089                        ;		return ((void FAR *) NULL);
  6090                        	.line	546
  6091 00:1C09: A9 00 00     	lda	#$0
  6092 00:1C0C: AA           	tax
  6093 00:1C0D: A9 00 00     	lda	#$0
  6094 00:1C10: 82 D3 FF     	brl	L175
  6095                        ;	}
  6096                        	.line	547
  6097                        ;
  6098                        ;	/*
  6099                        ;	 * Otherwise we need to actually do a reallocati
                    on. A naiive approach
  6100                        ;	 * would be to malloc() a new block of the corre
                    ct size, copy the old data
  6101                        ;	 * to the new block, and then free the old block
                    .
  6102                        ;	 *
  6103                        ;	 * While this will work, we end up doing a lot o
                    f possibly unnecessary
  6104                        ;	 * copying. So first, let's figure out how many 
                    blocks we'll need.
  6105                        ;	 */
  6106                        ;
  6107                        ;	blocks = umm_blocks(size);
  6108                        L10065:
  6109                        	.line	558
  6110 00:1C13: D4 36        	pei	<L170+size_0+2
  6111 00:1C15: D4 34        	pei	<L170+size_0
  6112 00:1C17: 22 xx xx xx  	jsl	~~umm_blocks
  6113 00:1C1B: 85 11        	sta	<L171+blocks_1
  6114 00:1C1D: 86 13        	stx	<L171+blocks_1+2
  6115                        ;
  6116                        ;	/* Figure out which block we're in. Note the use
  Mon Aug  9 2021 16:52                                                Page 114


                     of truncated division... */
  6117                        ;
  6118                        ;	c = (((char FAR *) ptr) - (char FAR *) (&(umm_he
                    ap[0]))) / sizeof(umm_block);
  6119                        	.line	562
  6120 00:1C1F: 38           	sec
  6121 00:1C20: A5 30        	lda	<L170+ptr_0
  6122 00:1C22: ED xx xx     	sbc	|~~umm_heap
  6123 00:1C25: 85 01        	sta	<R0
  6124 00:1C27: A5 32        	lda	<L170+ptr_0+2
  6125 00:1C29: ED xx xx     	sbc	|~~umm_heap+2
  6126 00:1C2C: 85 03        	sta	<R0+2
  6127 00:1C2E: F4 00 00     	pea	#^$10
  6128 00:1C31: F4 10 00     	pea	#<$10
  6129 00:1C34: D4 03        	pei	<R0+2
  6130 00:1C36: D4 01        	pei	<R0
  6131                        	xref	~~~ldiv
  6132 00:1C38: 22 xx xx xx  	jsl	~~~ldiv
  6133 00:1C3C: 85 21        	sta	<L171+c_1
  6134 00:1C3E: 86 23        	stx	<L171+c_1+2
  6135                        ;
  6136                        ;	/* Figure out how big this block is ... the free
                     bit is not set :-) */
  6137                        ;
  6138                        ;	blockSize = (UMM_NBLOCK(c) - c);
  6139                        	.line	566
  6140 00:1C40: A5 21        	lda	<L171+c_1
  6141 00:1C42: 85 01        	sta	<R0
  6142 00:1C44: A5 23        	lda	<L171+c_1+2
  6143 00:1C46: 85 03        	sta	<R0+2
  6144 00:1C48: 06 01        	asl	<R0
  6145 00:1C4A: 26 03        	rol	<R0+2
  6146 00:1C4C: 06 01        	asl	<R0
  6147 00:1C4E: 26 03        	rol	<R0+2
  6148 00:1C50: 06 01        	asl	<R0
  6149 00:1C52: 26 03        	rol	<R0+2
  6150 00:1C54: 06 01        	asl	<R0
  6151 00:1C56: 26 03        	rol	<R0+2
  6152 00:1C58: 18           	clc
  6153 00:1C59: AD xx xx     	lda	|~~umm_heap
  6154 00:1C5C: 65 01        	adc	<R0
  6155 00:1C5E: 85 05        	sta	<R1
  6156 00:1C60: AD xx xx     	lda	|~~umm_heap+2
  6157 00:1C63: 65 03        	adc	<R0+2
  6158 00:1C65: 85 07        	sta	<R1+2
  6159 00:1C67: 38           	sec
  6160 00:1C68: A7 05        	lda	[<R1]
  6161 00:1C6A: E5 21        	sbc	<L171+c_1
  6162 00:1C6C: 85 15        	sta	<L171+blockSize_1
  6163 00:1C6E: A0 02 00     	ldy	#$2
  6164 00:1C71: B7 05        	lda	[<R1],Y
  6165 00:1C73: E5 23        	sbc	<L171+c_1+2
  6166 00:1C75: 85 17        	sta	<L171+blockSize_1+2
  6167                        ;
  6168                        ;	/* Figure out how many bytes are in this block *
                    /
  6169                        ;
  6170                        ;	curSize = (blockSize * sizeof(umm_block))
  Mon Aug  9 2021 16:52                                                Page 115


  6171                        	.line	570
  6172                        ;			- (sizeof(((umm_block *) 0)->hea
                    der));
  6173 00:1C77: A5 15        	lda	<L171+blockSize_1
  6174 00:1C79: 85 01        	sta	<R0
  6175 00:1C7B: A5 17        	lda	<L171+blockSize_1+2
  6176 00:1C7D: 85 03        	sta	<R0+2
  6177 00:1C7F: 06 01        	asl	<R0
  6178 00:1C81: 26 03        	rol	<R0+2
  6179 00:1C83: 06 01        	asl	<R0
  6180 00:1C85: 26 03        	rol	<R0+2
  6181 00:1C87: 06 01        	asl	<R0
  6182 00:1C89: 26 03        	rol	<R0+2
  6183 00:1C8B: 06 01        	asl	<R0
  6184 00:1C8D: 26 03        	rol	<R0+2
  6185 00:1C8F: 18           	clc
  6186 00:1C90: A9 F8 FF     	lda	#$fff8
  6187 00:1C93: 65 01        	adc	<R0
  6188 00:1C95: 85 25        	sta	<L171+curSize_1
  6189 00:1C97: A9 FF FF     	lda	#$ffff
  6190 00:1C9A: 65 03        	adc	<R0+2
  6191 00:1C9C: 85 27        	sta	<L171+curSize_1+2
  6192                        ;
  6193                        ;	/* Protect the critical section... */
  6194                        ;	UMM_CRITICAL_ENTRY();
  6195                        	.line	574
  6196                        ;
  6197                        ;	/* Now figure out if the previous and/or next bl
                    ocks are free as well as
  6198                        ;	 * their sizes - this will help us to minimize s
                    pecial code later when we
  6199                        ;	 * decide if it's possible to use the adjacent b
                    locks.
  6200                        ;	 *
  6201                        ;	 * We set prevBlockSize and nextBlockSize to non
                    -zero values ONLY if they
  6202                        ;	 * are free!
  6203                        ;	 */
  6204                        ;
  6205                        ;	if ((UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MA
                    SK))
  6206                        	.line	584
  6207                        ;	{
  6208 00:1C9E: A5 21        	lda	<L171+c_1
  6209 00:1CA0: 85 05        	sta	<R1
  6210 00:1CA2: A5 23        	lda	<L171+c_1+2
  6211 00:1CA4: 85 07        	sta	<R1+2
  6212 00:1CA6: 06 05        	asl	<R1
  6213 00:1CA8: 26 07        	rol	<R1+2
  6214 00:1CAA: 06 05        	asl	<R1
  6215 00:1CAC: 26 07        	rol	<R1+2
  6216 00:1CAE: 06 05        	asl	<R1
  6217 00:1CB0: 26 07        	rol	<R1+2
  6218 00:1CB2: 06 05        	asl	<R1
  6219 00:1CB4: 26 07        	rol	<R1+2
  6220 00:1CB6: 18           	clc
  6221 00:1CB7: AD xx xx     	lda	|~~umm_heap
  6222 00:1CBA: 65 05        	adc	<R1
  Mon Aug  9 2021 16:52                                                Page 116


  6223 00:1CBC: 85 09        	sta	<R2
  6224 00:1CBE: AD xx xx     	lda	|~~umm_heap+2
  6225 00:1CC1: 65 07        	adc	<R1+2
  6226 00:1CC3: 85 0B        	sta	<R2+2
  6227 00:1CC5: A0 02 00     	ldy	#$2
  6228 00:1CC8: B7 09        	lda	[<R2],Y
  6229 00:1CCA: 48           	pha
  6230 00:1CCB: A7 09        	lda	[<R2]
  6231 00:1CCD: 48           	pha
  6232 00:1CCE: A9 04 00     	lda	#$4
  6233                        	xref	~~~lasl
  6234 00:1CD1: 22 xx xx xx  	jsl	~~~lasl
  6235 00:1CD5: 85 01        	sta	<R0
  6236 00:1CD7: 86 03        	stx	<R0+2
  6237 00:1CD9: 18           	clc
  6238 00:1CDA: AD xx xx     	lda	|~~umm_heap
  6239 00:1CDD: 65 01        	adc	<R0
  6240 00:1CDF: 85 05        	sta	<R1
  6241 00:1CE1: AD xx xx     	lda	|~~umm_heap+2
  6242 00:1CE4: 65 03        	adc	<R0+2
  6243 00:1CE6: 85 07        	sta	<R1+2
  6244 00:1CE8: A7 05        	lda	[<R1]
  6245 00:1CEA: 29 00 80     	and	#<$8000
  6246 00:1CED: D0 03        	bne	L177
  6247 00:1CEF: 82 8A 00     	brl	L10066
  6248                        L177:
  6249                        	.line	585
  6250                        ;		nextBlockSize = (UMM_NBLOCK(UMM_NBLOCK(c
                    )) & UMM_BLOCKNO_MASK)
  6251                        	.line	586
  6252                        ;				- UMM_NBLOCK(c);
  6253 00:1CF2: A5 21        	lda	<L171+c_1
  6254 00:1CF4: 85 01        	sta	<R0
  6255 00:1CF6: A5 23        	lda	<L171+c_1+2
  6256 00:1CF8: 85 03        	sta	<R0+2
  6257 00:1CFA: 06 01        	asl	<R0
  6258 00:1CFC: 26 03        	rol	<R0+2
  6259 00:1CFE: 06 01        	asl	<R0
  6260 00:1D00: 26 03        	rol	<R0+2
  6261 00:1D02: 06 01        	asl	<R0
  6262 00:1D04: 26 03        	rol	<R0+2
  6263 00:1D06: 06 01        	asl	<R0
  6264 00:1D08: 26 03        	rol	<R0+2
  6265 00:1D0A: 18           	clc
  6266 00:1D0B: AD xx xx     	lda	|~~umm_heap
  6267 00:1D0E: 65 01        	adc	<R0
  6268 00:1D10: 85 05        	sta	<R1
  6269 00:1D12: AD xx xx     	lda	|~~umm_heap+2
  6270 00:1D15: 65 03        	adc	<R0+2
  6271 00:1D17: 85 07        	sta	<R1+2
  6272 00:1D19: A5 21        	lda	<L171+c_1
  6273 00:1D1B: 85 09        	sta	<R2
  6274 00:1D1D: A5 23        	lda	<L171+c_1+2
  6275 00:1D1F: 85 0B        	sta	<R2+2
  6276 00:1D21: 06 09        	asl	<R2
  6277 00:1D23: 26 0B        	rol	<R2+2
  6278 00:1D25: 06 09        	asl	<R2
  6279 00:1D27: 26 0B        	rol	<R2+2
  Mon Aug  9 2021 16:52                                                Page 117


  6280 00:1D29: 06 09        	asl	<R2
  6281 00:1D2B: 26 0B        	rol	<R2+2
  6282 00:1D2D: 06 09        	asl	<R2
  6283 00:1D2F: 26 0B        	rol	<R2+2
  6284 00:1D31: 18           	clc
  6285 00:1D32: AD xx xx     	lda	|~~umm_heap
  6286 00:1D35: 65 09        	adc	<R2
  6287 00:1D37: 85 0D        	sta	<R3
  6288 00:1D39: AD xx xx     	lda	|~~umm_heap+2
  6289 00:1D3C: 65 0B        	adc	<R2+2
  6290 00:1D3E: 85 0F        	sta	<R3+2
  6291 00:1D40: A0 02 00     	ldy	#$2
  6292 00:1D43: B7 0D        	lda	[<R3],Y
  6293 00:1D45: 48           	pha
  6294 00:1D46: A7 0D        	lda	[<R3]
  6295 00:1D48: 48           	pha
  6296 00:1D49: A9 04 00     	lda	#$4
  6297                        	xref	~~~lasl
  6298 00:1D4C: 22 xx xx xx  	jsl	~~~lasl
  6299 00:1D50: 85 01        	sta	<R0
  6300 00:1D52: 86 03        	stx	<R0+2
  6301 00:1D54: 18           	clc
  6302 00:1D55: AD xx xx     	lda	|~~umm_heap
  6303 00:1D58: 65 01        	adc	<R0
  6304 00:1D5A: 85 09        	sta	<R2
  6305 00:1D5C: AD xx xx     	lda	|~~umm_heap+2
  6306 00:1D5F: 65 03        	adc	<R0+2
  6307 00:1D61: 85 0B        	sta	<R2+2
  6308 00:1D63: A7 09        	lda	[<R2]
  6309 00:1D65: 29 FF 7F     	and	#<$7fff
  6310 00:1D68: 85 01        	sta	<R0
  6311 00:1D6A: 64 03        	stz	<R0+2
  6312 00:1D6C: 38           	sec
  6313 00:1D6D: A5 01        	lda	<R0
  6314 00:1D6F: E7 05        	sbc	[<R1]
  6315 00:1D71: 85 1D        	sta	<L171+nextBlockSize_1
  6316 00:1D73: A5 03        	lda	<R0+2
  6317 00:1D75: A0 02 00     	ldy	#$2
  6318 00:1D78: F7 05        	sbc	[<R1],Y
  6319 00:1D7A: 85 1F        	sta	<L171+nextBlockSize_1+2
  6320                        ;	}
  6321                        	.line	588
  6322                        ;
  6323                        ;	if ((UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MA
                    SK))
  6324                        L10066:
  6325                        	.line	590
  6326                        ;	{
  6327 00:1D7C: A5 21        	lda	<L171+c_1
  6328 00:1D7E: 85 05        	sta	<R1
  6329 00:1D80: A5 23        	lda	<L171+c_1+2
  6330 00:1D82: 85 07        	sta	<R1+2
  6331 00:1D84: 06 05        	asl	<R1
  6332 00:1D86: 26 07        	rol	<R1+2
  6333 00:1D88: 06 05        	asl	<R1
  6334 00:1D8A: 26 07        	rol	<R1+2
  6335 00:1D8C: 06 05        	asl	<R1
  6336 00:1D8E: 26 07        	rol	<R1+2
  Mon Aug  9 2021 16:52                                                Page 118


  6337 00:1D90: 06 05        	asl	<R1
  6338 00:1D92: 26 07        	rol	<R1+2
  6339 00:1D94: 18           	clc
  6340 00:1D95: A9 04 00     	lda	#$4
  6341 00:1D98: 6D xx xx     	adc	|~~umm_heap
  6342 00:1D9B: 85 09        	sta	<R2
  6343 00:1D9D: A9 00 00     	lda	#$0
  6344 00:1DA0: 6D xx xx     	adc	|~~umm_heap+2
  6345 00:1DA3: 85 0B        	sta	<R2+2
  6346 00:1DA5: 18           	clc
  6347 00:1DA6: A5 09        	lda	<R2
  6348 00:1DA8: 65 05        	adc	<R1
  6349 00:1DAA: 85 0D        	sta	<R3
  6350 00:1DAC: A5 0B        	lda	<R2+2
  6351 00:1DAE: 65 07        	adc	<R1+2
  6352 00:1DB0: 85 0F        	sta	<R3+2
  6353 00:1DB2: A0 02 00     	ldy	#$2
  6354 00:1DB5: B7 0D        	lda	[<R3],Y
  6355 00:1DB7: 48           	pha
  6356 00:1DB8: A7 0D        	lda	[<R3]
  6357 00:1DBA: 48           	pha
  6358 00:1DBB: A9 04 00     	lda	#$4
  6359                        	xref	~~~lasl
  6360 00:1DBE: 22 xx xx xx  	jsl	~~~lasl
  6361 00:1DC2: 85 01        	sta	<R0
  6362 00:1DC4: 86 03        	stx	<R0+2
  6363 00:1DC6: 18           	clc
  6364 00:1DC7: AD xx xx     	lda	|~~umm_heap
  6365 00:1DCA: 65 01        	adc	<R0
  6366 00:1DCC: 85 05        	sta	<R1
  6367 00:1DCE: AD xx xx     	lda	|~~umm_heap+2
  6368 00:1DD1: 65 03        	adc	<R0+2
  6369 00:1DD3: 85 07        	sta	<R1+2
  6370 00:1DD5: A7 05        	lda	[<R1]
  6371 00:1DD7: 29 00 80     	and	#<$8000
  6372 00:1DDA: D0 03        	bne	L178
  6373 00:1DDC: 82 46 00     	brl	L10067
  6374                        L178:
  6375                        	.line	591
  6376                        ;		prevBlockSize = (c - UMM_PBLOCK(c));
  6377                        	.line	592
  6378 00:1DDF: A5 21        	lda	<L171+c_1
  6379 00:1DE1: 85 01        	sta	<R0
  6380 00:1DE3: A5 23        	lda	<L171+c_1+2
  6381 00:1DE5: 85 03        	sta	<R0+2
  6382 00:1DE7: 06 01        	asl	<R0
  6383 00:1DE9: 26 03        	rol	<R0+2
  6384 00:1DEB: 06 01        	asl	<R0
  6385 00:1DED: 26 03        	rol	<R0+2
  6386 00:1DEF: 06 01        	asl	<R0
  6387 00:1DF1: 26 03        	rol	<R0+2
  6388 00:1DF3: 06 01        	asl	<R0
  6389 00:1DF5: 26 03        	rol	<R0+2
  6390 00:1DF7: 18           	clc
  6391 00:1DF8: A9 04 00     	lda	#$4
  6392 00:1DFB: 6D xx xx     	adc	|~~umm_heap
  6393 00:1DFE: 85 05        	sta	<R1
  6394 00:1E00: A9 00 00     	lda	#$0
  Mon Aug  9 2021 16:52                                                Page 119


  6395 00:1E03: 6D xx xx     	adc	|~~umm_heap+2
  6396 00:1E06: 85 07        	sta	<R1+2
  6397 00:1E08: 18           	clc
  6398 00:1E09: A5 05        	lda	<R1
  6399 00:1E0B: 65 01        	adc	<R0
  6400 00:1E0D: 85 09        	sta	<R2
  6401 00:1E0F: A5 07        	lda	<R1+2
  6402 00:1E11: 65 03        	adc	<R0+2
  6403 00:1E13: 85 0B        	sta	<R2+2
  6404 00:1E15: 38           	sec
  6405 00:1E16: A5 21        	lda	<L171+c_1
  6406 00:1E18: E7 09        	sbc	[<R2]
  6407 00:1E1A: 85 19        	sta	<L171+prevBlockSize_1
  6408 00:1E1C: A5 23        	lda	<L171+c_1+2
  6409 00:1E1E: A0 02 00     	ldy	#$2
  6410 00:1E21: F7 09        	sbc	[<R2],Y
  6411 00:1E23: 85 1B        	sta	<L171+prevBlockSize_1+2
  6412                        ;	}
  6413                        	.line	593
  6414                        ;
  6415                        ;	//DBGLOG_DEBUG( "realloc blocks %i blockSize %i 
                    nextBlockSize %i prevBlockSize %i\n", blocks, blockSize, nex
                    tBlockSize, prevBlockSize );
  6416                        ;
  6417                        ;	/*
  6418                        ;	 * Ok, now that we're here we know how many bloc
                    ks we want and the current
  6419                        ;	 * blockSize. The prevBlockSize and nextBlockSiz
                    e are set and we can figure
  6420                        ;	 * out the best strategy for the new allocation 
                    as follows:
  6421                        ;	 *
  6422                        ;	 * 1. If the new block is the same size or small
                    er than the current block do
  6423                        ;	 *    nothing.
  6424                        ;	 * 2. If the next block is free and adding it to
                     the current block gives us
  6425                        ;	 *    enough memory, assimilate the next block.
  6426                        ;	 * 3. If the prev block is free and adding it to
                     the current block gives us
  6427                        ;	 *    enough memory, remove the previous block f
                    rom the free list, assimilate
  6428                        ;	 *    it, copy to the new block.
  6429                        ;	 * 4. If the prev and next blocks are free and a
                    dding them to the current
  6430                        ;	 *    block gives us enough memory, assimilate t
                    he next block, remove the
  6431                        ;	 *    previous block from the free list, assimil
                    ate it, copy to the new block.
  6432                        ;	 * 5. Otherwise try to allocate an entirely new 
                    block of memory. If the
  6433                        ;	 *    allocation works free the old block and re
                    turn the new pointer. If
  6434                        ;	 *    the allocation fails, return NULL and leav
                    e the old block intact.
  6435                        ;	 *
  6436                        ;	 * All that's left to do is decide if the fit wa
                    s exact or not. If the fit
  Mon Aug  9 2021 16:52                                                Page 120


  6437                        ;	 * was not exact, then split the memory block so
                     that we use only the requested
  6438                        ;	 * number of blocks and add what's left to the f
                    ree list.
  6439                        ;	 */
  6440                        ;
  6441                        ;	if (blockSize >= blocks)
  6442                        L10067:
  6443                        	.line	621
  6444                        ;	{
  6445 00:1E25: A5 15        	lda	<L171+blockSize_1
  6446 00:1E27: C5 11        	cmp	<L171+blocks_1
  6447 00:1E29: A5 17        	lda	<L171+blockSize_1+2
  6448 00:1E2B: E5 13        	sbc	<L171+blocks_1+2
  6449 00:1E2D: B0 03        	bcs	L179
  6450 00:1E2F: 82 03 00     	brl	L10068
  6451                        L179:
  6452                        	.line	622
  6453                        ;		//DBGLOG_DEBUG( "realloc the same or sma
                    ller size block - %i, do nothing\n", blocks );
  6454                        ;		/* This space intentionally left blank *
                    /
  6455                        ;	}
  6456                        	.line	625
  6457                        ;	else if ((blockSize + nextBlockSize) >= blocks)
  6458 00:1E32: 82 84 02     	brl	L10069
  6459                        L10068:
  6460                        	.line	626
  6461                        ;	{
  6462 00:1E35: 18           	clc
  6463 00:1E36: A5 15        	lda	<L171+blockSize_1
  6464 00:1E38: 65 1D        	adc	<L171+nextBlockSize_1
  6465 00:1E3A: 85 01        	sta	<R0
  6466 00:1E3C: A5 17        	lda	<L171+blockSize_1+2
  6467 00:1E3E: 65 1F        	adc	<L171+nextBlockSize_1+2
  6468 00:1E40: 85 03        	sta	<R0+2
  6469 00:1E42: A5 01        	lda	<R0
  6470 00:1E44: C5 11        	cmp	<L171+blocks_1
  6471 00:1E46: A5 03        	lda	<R0+2
  6472 00:1E48: E5 13        	sbc	<L171+blocks_1+2
  6473 00:1E4A: B0 03        	bcs	L180
  6474 00:1E4C: 82 18 00     	brl	L10070
  6475                        L180:
  6476                        	.line	627
  6477                        ;		//DBGLOG_DEBUG( "realloc using next bloc
                    k - %i\n", blocks );
  6478                        ;		umm_assimilate_up(c);
  6479                        	.line	629
  6480 00:1E4F: D4 23        	pei	<L171+c_1+2
  6481 00:1E51: D4 21        	pei	<L171+c_1
  6482 00:1E53: 22 xx xx xx  	jsl	~~umm_assimilate_up
  6483                        ;		blockSize += nextBlockSize;
  6484                        	.line	630
  6485 00:1E57: 18           	clc
  6486 00:1E58: A5 15        	lda	<L171+blockSize_1
  6487 00:1E5A: 65 1D        	adc	<L171+nextBlockSize_1
  6488 00:1E5C: 85 15        	sta	<L171+blockSize_1
  6489 00:1E5E: A5 17        	lda	<L171+blockSize_1+2
  Mon Aug  9 2021 16:52                                                Page 121


  6490 00:1E60: 65 1F        	adc	<L171+nextBlockSize_1+2
  6491 00:1E62: 85 17        	sta	<L171+blockSize_1+2
  6492                        ;	}
  6493                        	.line	631
  6494                        ;	else if ((prevBlockSize + blockSize) >= blocks)
  6495 00:1E64: 82 52 02     	brl	L10071
  6496                        L10070:
  6497                        	.line	632
  6498                        ;	{
  6499 00:1E67: 18           	clc
  6500 00:1E68: A5 19        	lda	<L171+prevBlockSize_1
  6501 00:1E6A: 65 15        	adc	<L171+blockSize_1
  6502 00:1E6C: 85 01        	sta	<R0
  6503 00:1E6E: A5 1B        	lda	<L171+prevBlockSize_1+2
  6504 00:1E70: 65 17        	adc	<L171+blockSize_1+2
  6505 00:1E72: 85 03        	sta	<R0+2
  6506 00:1E74: A5 01        	lda	<R0
  6507 00:1E76: C5 11        	cmp	<L171+blocks_1
  6508 00:1E78: A5 03        	lda	<R0+2
  6509 00:1E7A: E5 13        	sbc	<L171+blocks_1+2
  6510 00:1E7C: B0 03        	bcs	L181
  6511 00:1E7E: 82 DF 00     	brl	L10072
  6512                        L181:
  6513                        	.line	633
  6514                        ;		//DBGLOG_DEBUG( "realloc using prev bloc
                    k - %i\n", blocks );
  6515                        ;		umm_disconnect_from_free_list(UMM_PBLOCK
                    (c));
  6516                        	.line	635
  6517 00:1E81: A5 21        	lda	<L171+c_1
  6518 00:1E83: 85 01        	sta	<R0
  6519 00:1E85: A5 23        	lda	<L171+c_1+2
  6520 00:1E87: 85 03        	sta	<R0+2
  6521 00:1E89: 06 01        	asl	<R0
  6522 00:1E8B: 26 03        	rol	<R0+2
  6523 00:1E8D: 06 01        	asl	<R0
  6524 00:1E8F: 26 03        	rol	<R0+2
  6525 00:1E91: 06 01        	asl	<R0
  6526 00:1E93: 26 03        	rol	<R0+2
  6527 00:1E95: 06 01        	asl	<R0
  6528 00:1E97: 26 03        	rol	<R0+2
  6529 00:1E99: 18           	clc
  6530 00:1E9A: A9 04 00     	lda	#$4
  6531 00:1E9D: 6D xx xx     	adc	|~~umm_heap
  6532 00:1EA0: 85 05        	sta	<R1
  6533 00:1EA2: A9 00 00     	lda	#$0
  6534 00:1EA5: 6D xx xx     	adc	|~~umm_heap+2
  6535 00:1EA8: 85 07        	sta	<R1+2
  6536 00:1EAA: 18           	clc
  6537 00:1EAB: A5 05        	lda	<R1
  6538 00:1EAD: 65 01        	adc	<R0
  6539 00:1EAF: 85 09        	sta	<R2
  6540 00:1EB1: A5 07        	lda	<R1+2
  6541 00:1EB3: 65 03        	adc	<R0+2
  6542 00:1EB5: 85 0B        	sta	<R2+2
  6543 00:1EB7: A0 02 00     	ldy	#$2
  6544 00:1EBA: B7 09        	lda	[<R2],Y
  6545 00:1EBC: 48           	pha
  Mon Aug  9 2021 16:52                                                Page 122


  6546 00:1EBD: A7 09        	lda	[<R2]
  6547 00:1EBF: 48           	pha
  6548 00:1EC0: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  6549                        ;		c = umm_assimilate_down(c, 0);
  6550                        	.line	636
  6551 00:1EC4: F4 00 00     	pea	#^$0
  6552 00:1EC7: F4 00 00     	pea	#<$0
  6553 00:1ECA: D4 23        	pei	<L171+c_1+2
  6554 00:1ECC: D4 21        	pei	<L171+c_1
  6555 00:1ECE: 22 xx xx xx  	jsl	~~umm_assimilate_down
  6556 00:1ED2: 85 21        	sta	<L171+c_1
  6557 00:1ED4: 86 23        	stx	<L171+c_1+2
  6558                        ;		memmove((void *) &UMM_DATA(c), ptr, curS
                    ize);
  6559                        	.line	637
  6560 00:1ED6: D4 25        	pei	<L171+curSize_1
  6561 00:1ED8: D4 32        	pei	<L170+ptr_0+2
  6562 00:1EDA: D4 30        	pei	<L170+ptr_0
  6563 00:1EDC: A5 21        	lda	<L171+c_1
  6564 00:1EDE: 85 01        	sta	<R0
  6565 00:1EE0: A5 23        	lda	<L171+c_1+2
  6566 00:1EE2: 85 03        	sta	<R0+2
  6567 00:1EE4: 06 01        	asl	<R0
  6568 00:1EE6: 26 03        	rol	<R0+2
  6569 00:1EE8: 06 01        	asl	<R0
  6570 00:1EEA: 26 03        	rol	<R0+2
  6571 00:1EEC: 06 01        	asl	<R0
  6572 00:1EEE: 26 03        	rol	<R0+2
  6573 00:1EF0: 06 01        	asl	<R0
  6574 00:1EF2: 26 03        	rol	<R0+2
  6575 00:1EF4: 18           	clc
  6576 00:1EF5: A9 08 00     	lda	#$8
  6577 00:1EF8: 65 01        	adc	<R0
  6578 00:1EFA: 85 05        	sta	<R1
  6579 00:1EFC: A9 00 00     	lda	#$0
  6580 00:1EFF: 65 03        	adc	<R0+2
  6581 00:1F01: 85 07        	sta	<R1+2
  6582 00:1F03: 18           	clc
  6583 00:1F04: AD xx xx     	lda	|~~umm_heap
  6584 00:1F07: 65 05        	adc	<R1
  6585 00:1F09: 85 01        	sta	<R0
  6586 00:1F0B: AD xx xx     	lda	|~~umm_heap+2
  6587 00:1F0E: 65 07        	adc	<R1+2
  6588 00:1F10: 85 03        	sta	<R0+2
  6589 00:1F12: D4 03        	pei	<R0+2
  6590 00:1F14: D4 01        	pei	<R0
  6591 00:1F16: 22 xx xx xx  	jsl	~~memmove
  6592                        ;		ptr = (void *) &UMM_DATA(c);
  6593                        	.line	638
  6594 00:1F1A: A5 21        	lda	<L171+c_1
  6595 00:1F1C: 85 01        	sta	<R0
  6596 00:1F1E: A5 23        	lda	<L171+c_1+2
  6597 00:1F20: 85 03        	sta	<R0+2
  6598 00:1F22: 06 01        	asl	<R0
  6599 00:1F24: 26 03        	rol	<R0+2
  6600 00:1F26: 06 01        	asl	<R0
  6601 00:1F28: 26 03        	rol	<R0+2
  6602 00:1F2A: 06 01        	asl	<R0
  Mon Aug  9 2021 16:52                                                Page 123


  6603 00:1F2C: 26 03        	rol	<R0+2
  6604 00:1F2E: 06 01        	asl	<R0
  6605 00:1F30: 26 03        	rol	<R0+2
  6606 00:1F32: 18           	clc
  6607 00:1F33: A9 08 00     	lda	#$8
  6608 00:1F36: 65 01        	adc	<R0
  6609 00:1F38: 85 05        	sta	<R1
  6610 00:1F3A: A9 00 00     	lda	#$0
  6611 00:1F3D: 65 03        	adc	<R0+2
  6612 00:1F3F: 85 07        	sta	<R1+2
  6613 00:1F41: 18           	clc
  6614 00:1F42: AD xx xx     	lda	|~~umm_heap
  6615 00:1F45: 65 05        	adc	<R1
  6616 00:1F47: 85 30        	sta	<L170+ptr_0
  6617 00:1F49: AD xx xx     	lda	|~~umm_heap+2
  6618 00:1F4C: 65 07        	adc	<R1+2
  6619 00:1F4E: 85 32        	sta	<L170+ptr_0+2
  6620                        ;		blockSize += prevBlockSize;
  6621                        	.line	639
  6622 00:1F50: 18           	clc
  6623 00:1F51: A5 15        	lda	<L171+blockSize_1
  6624 00:1F53: 65 19        	adc	<L171+prevBlockSize_1
  6625 00:1F55: 85 15        	sta	<L171+blockSize_1
  6626 00:1F57: A5 17        	lda	<L171+blockSize_1+2
  6627 00:1F59: 65 1B        	adc	<L171+prevBlockSize_1+2
  6628 00:1F5B: 85 17        	sta	<L171+blockSize_1+2
  6629                        ;	}
  6630                        	.line	640
  6631                        ;	else if ((prevBlockSize + blockSize + nextBlockS
                    ize) >= blocks)
  6632 00:1F5D: 82 59 01     	brl	L10073
  6633                        L10072:
  6634                        	.line	641
  6635                        ;	{
  6636 00:1F60: 18           	clc
  6637 00:1F61: A5 19        	lda	<L171+prevBlockSize_1
  6638 00:1F63: 65 15        	adc	<L171+blockSize_1
  6639 00:1F65: 85 01        	sta	<R0
  6640 00:1F67: A5 1B        	lda	<L171+prevBlockSize_1+2
  6641 00:1F69: 65 17        	adc	<L171+blockSize_1+2
  6642 00:1F6B: 85 03        	sta	<R0+2
  6643 00:1F6D: 18           	clc
  6644 00:1F6E: A5 01        	lda	<R0
  6645 00:1F70: 65 1D        	adc	<L171+nextBlockSize_1
  6646 00:1F72: 85 05        	sta	<R1
  6647 00:1F74: A5 03        	lda	<R0+2
  6648 00:1F76: 65 1F        	adc	<L171+nextBlockSize_1+2
  6649 00:1F78: 85 07        	sta	<R1+2
  6650 00:1F7A: A5 05        	lda	<R1
  6651 00:1F7C: C5 11        	cmp	<L171+blocks_1
  6652 00:1F7E: A5 07        	lda	<R1+2
  6653 00:1F80: E5 13        	sbc	<L171+blocks_1+2
  6654 00:1F82: B0 03        	bcs	L182
  6655 00:1F84: 82 F4 00     	brl	L10074
  6656                        L182:
  6657                        	.line	642
  6658                        ;		//DBGLOG_DEBUG( "realloc using prev and 
                    next block - %i\n", blocks );
  Mon Aug  9 2021 16:52                                                Page 124


  6659                        ;		umm_assimilate_up(c);
  6660                        	.line	644
  6661 00:1F87: D4 23        	pei	<L171+c_1+2
  6662 00:1F89: D4 21        	pei	<L171+c_1
  6663 00:1F8B: 22 xx xx xx  	jsl	~~umm_assimilate_up
  6664                        ;		umm_disconnect_from_free_list(UMM_PBLOCK
                    (c));
  6665                        	.line	645
  6666 00:1F8F: A5 21        	lda	<L171+c_1
  6667 00:1F91: 85 01        	sta	<R0
  6668 00:1F93: A5 23        	lda	<L171+c_1+2
  6669 00:1F95: 85 03        	sta	<R0+2
  6670 00:1F97: 06 01        	asl	<R0
  6671 00:1F99: 26 03        	rol	<R0+2
  6672 00:1F9B: 06 01        	asl	<R0
  6673 00:1F9D: 26 03        	rol	<R0+2
  6674 00:1F9F: 06 01        	asl	<R0
  6675 00:1FA1: 26 03        	rol	<R0+2
  6676 00:1FA3: 06 01        	asl	<R0
  6677 00:1FA5: 26 03        	rol	<R0+2
  6678 00:1FA7: 18           	clc
  6679 00:1FA8: A9 04 00     	lda	#$4
  6680 00:1FAB: 6D xx xx     	adc	|~~umm_heap
  6681 00:1FAE: 85 05        	sta	<R1
  6682 00:1FB0: A9 00 00     	lda	#$0
  6683 00:1FB3: 6D xx xx     	adc	|~~umm_heap+2
  6684 00:1FB6: 85 07        	sta	<R1+2
  6685 00:1FB8: 18           	clc
  6686 00:1FB9: A5 05        	lda	<R1
  6687 00:1FBB: 65 01        	adc	<R0
  6688 00:1FBD: 85 09        	sta	<R2
  6689 00:1FBF: A5 07        	lda	<R1+2
  6690 00:1FC1: 65 03        	adc	<R0+2
  6691 00:1FC3: 85 0B        	sta	<R2+2
  6692 00:1FC5: A0 02 00     	ldy	#$2
  6693 00:1FC8: B7 09        	lda	[<R2],Y
  6694 00:1FCA: 48           	pha
  6695 00:1FCB: A7 09        	lda	[<R2]
  6696 00:1FCD: 48           	pha
  6697 00:1FCE: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  6698                        ;		c = umm_assimilate_down(c, 0);
  6699                        	.line	646
  6700 00:1FD2: F4 00 00     	pea	#^$0
  6701 00:1FD5: F4 00 00     	pea	#<$0
  6702 00:1FD8: D4 23        	pei	<L171+c_1+2
  6703 00:1FDA: D4 21        	pei	<L171+c_1
  6704 00:1FDC: 22 xx xx xx  	jsl	~~umm_assimilate_down
  6705 00:1FE0: 85 21        	sta	<L171+c_1
  6706 00:1FE2: 86 23        	stx	<L171+c_1+2
  6707                        ;		memmove((void *) &UMM_DATA(c), ptr, curS
                    ize);
  6708                        	.line	647
  6709 00:1FE4: D4 25        	pei	<L171+curSize_1
  6710 00:1FE6: D4 32        	pei	<L170+ptr_0+2
  6711 00:1FE8: D4 30        	pei	<L170+ptr_0
  6712 00:1FEA: A5 21        	lda	<L171+c_1
  6713 00:1FEC: 85 01        	sta	<R0
  6714 00:1FEE: A5 23        	lda	<L171+c_1+2
  Mon Aug  9 2021 16:52                                                Page 125


  6715 00:1FF0: 85 03        	sta	<R0+2
  6716 00:1FF2: 06 01        	asl	<R0
  6717 00:1FF4: 26 03        	rol	<R0+2
  6718 00:1FF6: 06 01        	asl	<R0
  6719 00:1FF8: 26 03        	rol	<R0+2
  6720 00:1FFA: 06 01        	asl	<R0
  6721 00:1FFC: 26 03        	rol	<R0+2
  6722 00:1FFE: 06 01        	asl	<R0
  6723 00:2000: 26 03        	rol	<R0+2
  6724 00:2002: 18           	clc
  6725 00:2003: A9 08 00     	lda	#$8
  6726 00:2006: 65 01        	adc	<R0
  6727 00:2008: 85 05        	sta	<R1
  6728 00:200A: A9 00 00     	lda	#$0
  6729 00:200D: 65 03        	adc	<R0+2
  6730 00:200F: 85 07        	sta	<R1+2
  6731 00:2011: 18           	clc
  6732 00:2012: AD xx xx     	lda	|~~umm_heap
  6733 00:2015: 65 05        	adc	<R1
  6734 00:2017: 85 01        	sta	<R0
  6735 00:2019: AD xx xx     	lda	|~~umm_heap+2
  6736 00:201C: 65 07        	adc	<R1+2
  6737 00:201E: 85 03        	sta	<R0+2
  6738 00:2020: D4 03        	pei	<R0+2
  6739 00:2022: D4 01        	pei	<R0
  6740 00:2024: 22 xx xx xx  	jsl	~~memmove
  6741                        ;		ptr = (void *) &UMM_DATA(c);
  6742                        	.line	648
  6743 00:2028: A5 21        	lda	<L171+c_1
  6744 00:202A: 85 01        	sta	<R0
  6745 00:202C: A5 23        	lda	<L171+c_1+2
  6746 00:202E: 85 03        	sta	<R0+2
  6747 00:2030: 06 01        	asl	<R0
  6748 00:2032: 26 03        	rol	<R0+2
  6749 00:2034: 06 01        	asl	<R0
  6750 00:2036: 26 03        	rol	<R0+2
  6751 00:2038: 06 01        	asl	<R0
  6752 00:203A: 26 03        	rol	<R0+2
  6753 00:203C: 06 01        	asl	<R0
  6754 00:203E: 26 03        	rol	<R0+2
  6755 00:2040: 18           	clc
  6756 00:2041: A9 08 00     	lda	#$8
  6757 00:2044: 65 01        	adc	<R0
  6758 00:2046: 85 05        	sta	<R1
  6759 00:2048: A9 00 00     	lda	#$0
  6760 00:204B: 65 03        	adc	<R0+2
  6761 00:204D: 85 07        	sta	<R1+2
  6762 00:204F: 18           	clc
  6763 00:2050: AD xx xx     	lda	|~~umm_heap
  6764 00:2053: 65 05        	adc	<R1
  6765 00:2055: 85 30        	sta	<L170+ptr_0
  6766 00:2057: AD xx xx     	lda	|~~umm_heap+2
  6767 00:205A: 65 07        	adc	<R1+2
  6768 00:205C: 85 32        	sta	<L170+ptr_0+2
  6769                        ;		blockSize += (prevBlockSize + nextBlockS
                    ize);
  6770                        	.line	649
  6771 00:205E: 18           	clc
  Mon Aug  9 2021 16:52                                                Page 126


  6772 00:205F: A5 15        	lda	<L171+blockSize_1
  6773 00:2061: 65 1D        	adc	<L171+nextBlockSize_1
  6774 00:2063: 85 01        	sta	<R0
  6775 00:2065: A5 17        	lda	<L171+blockSize_1+2
  6776 00:2067: 65 1F        	adc	<L171+nextBlockSize_1+2
  6777 00:2069: 85 03        	sta	<R0+2
  6778 00:206B: 18           	clc
  6779 00:206C: A5 01        	lda	<R0
  6780 00:206E: 65 19        	adc	<L171+prevBlockSize_1
  6781 00:2070: 85 15        	sta	<L171+blockSize_1
  6782 00:2072: A5 03        	lda	<R0+2
  6783 00:2074: 65 1B        	adc	<L171+prevBlockSize_1+2
  6784 00:2076: 85 17        	sta	<L171+blockSize_1+2
  6785                        ;	}
  6786                        	.line	650
  6787                        ;	else
  6788 00:2078: 82 3E 00     	brl	L10075
  6789                        L10074:
  6790                        ;	{
  6791                        	.line	652
  6792                        ;		//DBGLOG_DEBUG( "realloc a completely ne
                    w block %i\n", blocks );
  6793                        ;		void *oldptr = ptr;
  6794                        ;		if ((ptr = umm_malloc_core(size)))
  6795                        	.block	655
  6796             00000018   oldptr_2	set	24
  6797                        	.sym	oldptr,24,129,1,32
  6798 00:207B: A5 30        	lda	<L170+ptr_0
  6799 00:207D: 85 29        	sta	<L171+oldptr_2
  6800 00:207F: A5 32        	lda	<L170+ptr_0+2
  6801 00:2081: 85 2B        	sta	<L171+oldptr_2+2
  6802                        	.line	655
  6803                        ;		{
  6804 00:2083: D4 36        	pei	<L170+size_0+2
  6805 00:2085: D4 34        	pei	<L170+size_0
  6806 00:2087: 22 xx xx xx  	jsl	~~umm_malloc_core
  6807 00:208B: 85 30        	sta	<L170+ptr_0
  6808 00:208D: 86 32        	stx	<L170+ptr_0+2
  6809 00:208F: A5 30        	lda	<L170+ptr_0
  6810 00:2091: 05 32        	ora	<L170+ptr_0+2
  6811 00:2093: D0 03        	bne	L184
  6812 00:2095: 82 19 00     	brl	L10076
  6813                        L184:
  6814                        	.line	656
  6815                        ;			//DBGLOG_DEBUG( "realloc %i to a
                     bigger block %i, copy, and free the old\n", blockSize, bloc
                    ks );
  6816                        ;			memcpy(ptr, oldptr, curSize);
  6817                        	.line	658
  6818 00:2098: D4 25        	pei	<L171+curSize_1
  6819 00:209A: D4 2B        	pei	<L171+oldptr_2+2
  6820 00:209C: D4 29        	pei	<L171+oldptr_2
  6821 00:209E: D4 32        	pei	<L170+ptr_0+2
  6822 00:20A0: D4 30        	pei	<L170+ptr_0
  6823 00:20A2: 22 xx xx xx  	jsl	~~memcpy
  6824                        ;			umm_free_core(oldptr);
  6825                        	.line	659
  6826 00:20A6: D4 2B        	pei	<L171+oldptr_2+2
  Mon Aug  9 2021 16:52                                                Page 127


  6827 00:20A8: D4 29        	pei	<L171+oldptr_2
  6828 00:20AA: 22 xx xx xx  	jsl	~~umm_free_core
  6829                        ;		}
  6830                        	.line	660
  6831                        ;		else
  6832 00:20AE: 82 00 00     	brl	L10077
  6833                        L10076:
  6834                        ;		{
  6835                        	.line	662
  6836                        ;			//DBGLOG_DEBUG( "realloc %i to a
                     bigger block %i failed - return NULL and leave the old bloc
                    k!\n", blockSize, blocks );
  6837                        ;			/* This space intentionally left
                     blnk */
  6838                        ;		}
  6839                        	.line	665
  6840                        L10077:
  6841                        ;		blockSize = blocks;
  6842                        	.line	666
  6843 00:20B1: A5 11        	lda	<L171+blocks_1
  6844 00:20B3: 85 15        	sta	<L171+blockSize_1
  6845 00:20B5: A5 13        	lda	<L171+blocks_1+2
  6846 00:20B7: 85 17        	sta	<L171+blockSize_1+2
  6847                        ;	}
  6848                        	.endblock	667
  6849                        	.line	667
  6850                        L10075:
  6851                        L10073:
  6852                        L10071:
  6853                        L10069:
  6854                        ;
  6855                        ;	/* Now all we need to do is figure out if the bl
                    ock fit exactly or if we
  6856                        ;	 * need to split and free ...
  6857                        ;	 */
  6858                        ;
  6859                        ;	if (blockSize > blocks)
  6860                        	.line	673
  6861                        ;	{
  6862 00:20B9: A5 11        	lda	<L171+blocks_1
  6863 00:20BB: C5 15        	cmp	<L171+blockSize_1
  6864 00:20BD: A5 13        	lda	<L171+blocks_1+2
  6865 00:20BF: E5 17        	sbc	<L171+blockSize_1+2
  6866 00:20C1: 90 03        	bcc	L185
  6867 00:20C3: 82 54 00     	brl	L10078
  6868                        L185:
  6869                        	.line	674
  6870                        ;		//DBGLOG_DEBUG( "split and free %i block
                    s from %i\n", blocks, blockSize );
  6871                        ;		umm_split_block(c, blocks, 0);
  6872                        	.line	676
  6873 00:20C6: F4 00 00     	pea	#^$0
  6874 00:20C9: F4 00 00     	pea	#<$0
  6875 00:20CC: D4 13        	pei	<L171+blocks_1+2
  6876 00:20CE: D4 11        	pei	<L171+blocks_1
  6877 00:20D0: D4 23        	pei	<L171+c_1+2
  6878 00:20D2: D4 21        	pei	<L171+c_1
  6879 00:20D4: 22 xx xx xx  	jsl	~~umm_split_block
  Mon Aug  9 2021 16:52                                                Page 128


  6880                        ;		umm_free_core((void *) &UMM_DATA(c + blo
                    cks));
  6881                        	.line	677
  6882 00:20D8: 18           	clc
  6883 00:20D9: A5 21        	lda	<L171+c_1
  6884 00:20DB: 65 11        	adc	<L171+blocks_1
  6885 00:20DD: 85 05        	sta	<R1
  6886 00:20DF: A5 23        	lda	<L171+c_1+2
  6887 00:20E1: 65 13        	adc	<L171+blocks_1+2
  6888 00:20E3: 85 07        	sta	<R1+2
  6889 00:20E5: D4 07        	pei	<R1+2
  6890 00:20E7: D4 05        	pei	<R1
  6891 00:20E9: A9 04 00     	lda	#$4
  6892                        	xref	~~~lasl
  6893 00:20EC: 22 xx xx xx  	jsl	~~~lasl
  6894 00:20F0: 85 01        	sta	<R0
  6895 00:20F2: 86 03        	stx	<R0+2
  6896 00:20F4: 18           	clc
  6897 00:20F5: A9 08 00     	lda	#$8
  6898 00:20F8: 65 01        	adc	<R0
  6899 00:20FA: 85 09        	sta	<R2
  6900 00:20FC: A9 00 00     	lda	#$0
  6901 00:20FF: 65 03        	adc	<R0+2
  6902 00:2101: 85 0B        	sta	<R2+2
  6903 00:2103: 18           	clc
  6904 00:2104: AD xx xx     	lda	|~~umm_heap
  6905 00:2107: 65 09        	adc	<R2
  6906 00:2109: 85 01        	sta	<R0
  6907 00:210B: AD xx xx     	lda	|~~umm_heap+2
  6908 00:210E: 65 0B        	adc	<R2+2
  6909 00:2110: 85 03        	sta	<R0+2
  6910 00:2112: D4 03        	pei	<R0+2
  6911 00:2114: D4 01        	pei	<R0
  6912 00:2116: 22 xx xx xx  	jsl	~~umm_free_core
  6913                        ;	}
  6914                        	.line	678
  6915                        ;
  6916                        ;	/* Release the critical section... */
  6917                        ;	UMM_CRITICAL_EXIT();
  6918                        L10078:
  6919                        	.line	681
  6920                        ;
  6921                        ;	return (ptr);
  6922                        	.line	683
  6923 00:211A: A6 32        	ldx	<L170+ptr_0+2
  6924 00:211C: A5 30        	lda	<L170+ptr_0
  6925 00:211E: 82 C5 FA     	brl	L175
  6926                        ;}
  6927                        	.line	684
  6928                        	.endblock	684
  6929             0000002C   L170	equ	44
  6930             00000011   L171	equ	17
  6931                        	ends
  6932                        	efunc
  6933                        	.endfunc	684,17,44
  6934                        	.line	684
  6935                        ;
  6936                        ;/* ----------------------------------------------
  Mon Aug  9 2021 16:52                                                Page 129


                    -------------------------- */
  6937                        ;
  6938                        ;void FAR *umm_calloc(unsigned long num, unsigned 
                    long item_size)
  6939                        ;{
  6940                        	.line	688
  6941                        	.line	689
  6942                        	code
  6943                        	xdef	~~umm_calloc
  6944                        	func
  6945                        	.function	689
  6946                        ~~umm_calloc:
  6947                        	longa	on
  6948                        	longi	on
  6949 00:2121: 3B           	tsc
  6950 00:2122: 38           	sec
  6951 00:2123: E9 08 00     	sbc	#L186
  6952 00:2126: 1B           	tcs
  6953 00:2127: 0B           	phd
  6954 00:2128: 5B           	tcd
  6955             00000004   num_0	set	4
  6956             00000008   item_size_0	set	8
  6957                        	.block	689
  6958                        ;	void FAR *ret;
  6959                        ;
  6960                        ;	ret = umm_malloc((ULONG) (item_size * num));
  6961             00000000   ret_1	set	0
  6962                        	.sym	ret,0,129,1,32
  6963                        	.sym	num,4,18,6,32
  6964                        	.sym	item_size,8,18,6,32
  6965                        	.line	692
  6966 00:2129: D4 0E        	pei	<L186+num_0+2
  6967 00:212B: D4 0C        	pei	<L186+num_0
  6968 00:212D: D4 12        	pei	<L186+item_size_0+2
  6969 00:212F: D4 10        	pei	<L186+item_size_0
  6970                        	xref	~~~lmul
  6971 00:2131: 22 xx xx xx  	jsl	~~~lmul
  6972 00:2135: 85 01        	sta	<R0
  6973 00:2137: 86 03        	stx	<R0+2
  6974 00:2139: D4 03        	pei	<R0+2
  6975 00:213B: D4 01        	pei	<R0
  6976 00:213D: 22 xx xx xx  	jsl	~~umm_malloc
  6977 00:2141: 85 05        	sta	<L187+ret_1
  6978 00:2143: 86 07        	stx	<L187+ret_1+2
  6979                        ;
  6980                        ;	if (ret)
  6981                        	.line	694
  6982                        ;		memset(ret, 0x00, (ULONG) (item_size * n
                    um));
  6983 00:2145: A5 05        	lda	<L187+ret_1
  6984 00:2147: 05 07        	ora	<L187+ret_1+2
  6985 00:2149: D0 03        	bne	L189
  6986 00:214B: 82 1D 00     	brl	L10079
  6987                        L189:
  6988                        	.line	695
  6989 00:214E: D4 0E        	pei	<L186+num_0+2
  6990 00:2150: D4 0C        	pei	<L186+num_0
  6991 00:2152: D4 12        	pei	<L186+item_size_0+2
  Mon Aug  9 2021 16:52                                                Page 130


  6992 00:2154: D4 10        	pei	<L186+item_size_0
  6993                        	xref	~~~lmul
  6994 00:2156: 22 xx xx xx  	jsl	~~~lmul
  6995 00:215A: 85 01        	sta	<R0
  6996 00:215C: 86 03        	stx	<R0+2
  6997 00:215E: D4 01        	pei	<R0
  6998 00:2160: F4 00 00     	pea	#<$0
  6999 00:2163: D4 07        	pei	<L187+ret_1+2
  7000 00:2165: D4 05        	pei	<L187+ret_1
  7001 00:2167: 22 xx xx xx  	jsl	~~memset
  7002                        ;
  7003                        ;	return ret;
  7004                        L10079:
  7005                        	.line	697
  7006 00:216B: A6 07        	ldx	<L187+ret_1+2
  7007 00:216D: A5 05        	lda	<L187+ret_1
  7008                        L190:
  7009 00:216F: A8           	tay
  7010 00:2170: A5 0A        	lda	<L186+2
  7011 00:2172: 85 12        	sta	<L186+2+8
  7012 00:2174: A5 09        	lda	<L186+1
  7013 00:2176: 85 11        	sta	<L186+1+8
  7014 00:2178: 2B           	pld
  7015 00:2179: 3B           	tsc
  7016 00:217A: 18           	clc
  7017 00:217B: 69 10 00     	adc	#L186+8
  7018 00:217E: 1B           	tcs
  7019 00:217F: 98           	tya
  7020 00:2180: 6B           	rtl
  7021                        ;}
  7022                        	.line	698
  7023                        	.endblock	698
  7024             00000008   L186	equ	8
  7025             00000005   L187	equ	5
  7026                        	ends
  7027                        	efunc
  7028                        	.endfunc	698,5,8
  7029                        	.line	698
  7030                        ;
  7031                        ;/* ----------------------------------------------
                    -------------------------- */
  7032                        ;
  7033                        	.line	700
  7034                        	xref	~~k_debug_long
  7035                        	xref	~~k_debug_pointer
  7036                        	xref	~~k_debug_string
  7037                        	xref	~~memset
  7038                        	xref	~~memmove
  7039                        	xref	~~memcpy
  7040                        	udata
  7041                        	xdef	~~ummHeapInfo
  7042                        ~~ummHeapInfo
  7043 00:0000:              	ds	32
  7044 00:0020:              	ends
  7045                        	.sym	~~umm_malloc_core,~~umm_malloc_core,1089
                    ,3,32
  7046                        	.sym	~~umm_free_core,~~umm_free_core,65,3,0
  7047                        	.sym	~~umm_assimilate_down,~~umm_assimilate_d
  Mon Aug  9 2021 16:52                                                Page 131


                    own,82,3,0
  7048                        	.sym	~~umm_assimilate_up,~~umm_assimilate_up,
                    65,3,0
  7049                        	.sym	~~umm_disconnect_from_free_list,~~umm_di
                    sconnect_from_free_list,65,3,0
  7050                        	.sym	~~umm_split_block,~~umm_split_block,65,3
                    ,0
  7051                        	.sym	~~umm_blocks,~~umm_blocks,82,3,0
  7052                        	.sym	~~get_unpoisoned,~~get_unpoisoned,1089,3
                    ,32
  7053                        	.sym	~~get_poisoned,~~get_poisoned,1089,3,32
  7054                        	.sym	~~check_poison_block,~~check_poison_bloc
                    k,69,3,0
  7055                        	.sym	~~check_poison,~~check_poison,69,3,0
  7056                        	.sym	~~put_poison,~~put_poison,65,3,0
  7057                        	.sym	~~dump_mem,~~dump_mem,65,3,0
  7058                        	.sym	~~poison_size,~~poison_size,82,3,0
  7059                        	.sym	PIRQCHAIN,0,138,14,32,94
  7060                        	.sym	IRQCHAIN,0,10,14,128,94
  7061                        	.sym	DEVICEDRIVER_COMMAND,0,654,14,32
  7062                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  7063                        	.sym	DEVICEDRIVER_WRITE,0,654,14,32
  7064                        	.sym	DEVICEDRIVER_READ,0,654,14,32
  7065                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  7066                        	.sym	DEVICEDRIVER_IRQ,0,641,14,32
  7067                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,93
  7068                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,93
  7069                        	.sym	GETDRIVERDEF,0,8842,14,32,92
  7070                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,92
  7071                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,92
  7072                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
  7073                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
  7074                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  7075                        	.sym	PSEGMENTHEADER,0,138,14,32,91
  7076                        	.sym	SEGMENTHEADER,0,10,14,160,91
  7077                        	.sym	PDEBUGBYTEBITS,0,138,14,32,90
  7078                        	.sym	DEBUGBYTEBITS,0,10,14,8,90
  7079                        	.sym	PFXENVIRONMENT,0,138,14,32,89
  7080                        	.sym	FXENVIRONMENT,0,10,14,96,89
  7081                        	.sym	PFXZEROPAGE,0,138,14,32,88
  7082                        	.sym	FXZEROPAGE,0,10,14,720,88
  7083                        	.sym	IRQBUFFER,0,10,14,32,87
  7084                        	.sym	KERNELTRAPCALL,0,641,14,32
  7085                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,86
  7086                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,86
  7087                        	.sym	FRESULT,0,5,14,16
  7088                        	.sym	MKFS_PARM,0,10,14,80,85
  7089                        	.sym	FILINFO,0,10,14,2224,84
  7090                        	.sym	DIR,0,10,14,416,83
  7091                        	.sym	FIL,0,10,14,4400,82
  7092                        	.sym	FFOBJID,0,10,14,128,81
  7093                        	.sym	FATFS,0,10,14,4504,80
  7094                        	.sym	LBA_t,0,18,14,32
  7095                        	.sym	FSIZE_t,0,18,14,32
  7096                        	.sym	TCHAR,0,14,14,8
  7097                        	.sym	PCOMMANDARGS,0,138,14,32,79
  Mon Aug  9 2021 16:52                                                Page 132


  7098                        	.sym	COMMANDARGS,0,10,14,64,79
  7099                        	.sym	PTOKENIZESTATE,0,133,14,32
  7100                        	.sym	TOKENIZESTATE,0,5,14,16
  7101                        	.sym	PTOKEN,0,138,14,32,78
  7102                        	.sym	TOKEN,0,10,14,64,78
  7103                        	.sym	PTOKENTYPE,0,133,14,32
  7104                        	.sym	TOKENTYPE,0,5,14,16
  7105                        	.sym	FXCommandHandler,0,656,14,32
  7106                        	.sym	PCONSOLECTX,0,138,14,32,77
  7107                        	.sym	CONSOLECTX,0,10,14,1144,77
  7108                        	.sym	PSPINNERCTX,0,138,14,32,76
  7109                        	.sym	SPINNERCTX,0,10,14,48,76
  7110                        	.sym	HCLIP,0,138,14,32,75
  7111                        	.sym	PCLIPBOARD_DATA,0,138,14,32,75
  7112                        	.sym	CLIPBOARD_DATA,0,10,14,168,75
  7113                        	.sym	PEVENTMANAGER,0,138,14,32,74
  7114                        	.sym	EVENTMANAGER,0,10,14,192,74
  7115                        	.sym	EV_RUN,0,656,14,32
  7116                        	.sym	EV_QUERY_METRIC,0,656,14,32
  7117                        	.sym	EV_CONFIGURE,0,656,14,32
  7118                        	.sym	EV_UNINIT,0,641,14,32
  7119                        	.sym	EV_INIT,0,8833,14,32
  7120                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,73
  7121                        	.sym	MOUSE_MSG_STATE,0,10,14,184,73
  7122                        	.sym	PFXEVENTPROCESS,0,138,14,32,72
  7123                        	.sym	FXEVENTPROCESS,0,10,14,64,72
  7124                        	.sym	FXASYNCPROCESS,0,641,14,32
  7125                        	.sym	PMARSHALDATA,0,139,14,32,71
  7126                        	.sym	MARSHALDATA,0,11,14,32,71
  7127                        	.sym	FXIDLEPROCESS,0,641,14,32
  7128                        	.sym	FXEventProc,0,641,14,32
  7129                        	.sym	PMOUSEMSGDATA,0,138,14,32,70
  7130                        	.sym	MOUSEMSGDATA,0,10,14,64,70
  7131                        	.sym	MSGIRQ,0,5,14,16
  7132                        	.sym	MAINLOOPARGS,0,10,14,16,69
  7133                        	.sym	PEACHCHILD_MSG,0,138,14,32,68
  7134                        	.sym	EACHCHILD_MSG,0,10,14,64,68
  7135                        	.sym	PMSGBOX_DATA,0,138,14,32,67
  7136                        	.sym	MSGBOX_DATA,0,10,14,96,67
  7137                        	.sym	PDESKTOP_DATA,0,138,14,32,66
  7138                        	.sym	DESKTOP_DATA,0,10,14,64,66
  7139                        	.sym	PWINDOWMANAGER,0,138,14,32,65
  7140                        	.sym	WINDOWMANAGER,0,10,14,160,65
  7141                        	.sym	WM_DOPROCS,0,641,14,32
  7142                        	.sym	WM_QUERY_METRIC,0,656,14,32
  7143                        	.sym	WM_CONFIGURE,0,656,14,32
  7144                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  7145                        	.sym	WM_EVENTS,0,641,14,32
  7146                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,64
  7147                        	.sym	CUR_PALETTE_MAP,0,10,14,400,64
  7148                        	.sym	PCLICKDETECTED,0,138,14,32,63
  7149                        	.sym	CLICKDETECTED,0,10,14,64,63
  7150                        	.sym	OBJECTCLICKED,0,641,14,32
  7151                        	.sym	PALLOCATIONHEADER,0,138,14,32,62
  7152                        	.sym	ALLOCATIONHEADER,0,10,14,80,62
  7153                        	.sym	PIPCPORT,0,138,14,32,61
  7154                        	.sym	IPCPORT,0,10,14,144,61
  7155                        	.sym	MemoryCallback,0,641,14,32
  Mon Aug  9 2021 16:52                                                Page 133


  7156                        	.sym	PFXMEMORYMAP,0,138,14,32,60
  7157                        	.sym	FXMEMORYMAP,0,10,14,2072,60
  7158                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  7159                        	.sym	FOREACHNODE,0,641,14,32
  7160                        	.sym	PEXECUTIVE,0,138,14,32,59
  7161                        	.sym	EXECUTIVE,0,10,14,128,59
  7162                        	.sym	EX_QUERY_METRIC,0,656,14,32
  7163                        	.sym	EX_CONFIGURE,0,656,14,32
  7164                        	.sym	EX_UNINIT,0,641,14,32
  7165                        	.sym	EX_INIT,0,8833,14,32
  7166                        	.sym	PFXSTRING,0,138,14,32,58
  7167                        	.sym	FXSTRING,0,10,14,64,58
  7168                        	.sym	ldiv_t,0,10,14,64,56
  7169                        	.sym	div_t,0,10,14,32,55
  7170                        	.sym	wctype_t,0,16,14,16
  7171                        	.sym	wint_t,0,16,14,16
  7172                        	.sym	wchar_t,0,14,14,8
  7173                        	.sym	ptrdiff_t,0,7,14,32
  7174                        	.sym	~~umm_numblocks,~~umm_numblocks,18,2,32
  7175                        	.sym	~~umm_heap,~~umm_heap,138,2,32,54
  7176                        	.sym	umm_block,0,10,14,128,54
  7177                        	.sym	umm_ptr,0,10,14,64,51
  7178                        	.sym	~~umm_poison_check,~~umm_poison_check,69
                    ,2,0
  7179                        	.sym	~~umm_poison_free,~~umm_poison_free,65,2
                    ,0
  7180                        	.sym	~~umm_poison_realloc,~~umm_poison_reallo
                    c,1089,2,32
  7181                        	.sym	~~umm_poison_calloc,~~umm_poison_calloc,
                    1089,2,32
  7182                        	.sym	~~umm_poison_malloc,~~umm_poison_malloc,
                    1089,2,32
  7183                        	.sym	~~umm_integrity_check,~~umm_integrity_ch
                    eck,69,2,0
  7184                        	.sym	~~umm_free_heap_size,~~umm_free_heap_siz
                    e,82,2,0
  7185                        	.sym	~~umm_info,~~umm_info,1089,2,32
  7186                        	.sym	~~ummHeapInfo,~~ummHeapInfo,10,2,256,50
  7187                        	.sym	UMM_HEAP_INFO,0,10,14,256,50
  7188                        	.sym	~~umm_free,~~umm_free,65,2,0
  7189                        	.sym	~~umm_realloc,~~umm_realloc,1089,2,32
  7190                        	.sym	~~umm_calloc,~~umm_calloc,1089,2,32
  7191                        	.sym	~~umm_malloc,~~umm_malloc,1089,2,32
  7192                        	.sym	~~umm_init,~~umm_init,65,2,0
  7193                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,49
  7194                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,49
  7195                        	.sym	PFXRFHEADER_STRING,0,138,14,32,48
  7196                        	.sym	FXRFHEADER_STRING,0,10,14,32,48
  7197                        	.sym	PFXRFHEADER_FONT,0,138,14,32,47
  7198                        	.sym	FXRFHEADER_FONT,0,10,14,144,47
  7199                        	.sym	PFXRFHEADER,0,138,14,32,46
  7200                        	.sym	FXRFHEADER,0,10,14,72,46
  7201                        	.sym	PFXCOMBUFFER,0,138,14,32,45
  7202                        	.sym	FXCOMBUFFER,0,10,14,2080,45
  7203                        	.sym	PSUBMENULIST,0,138,14,32,44
  7204                        	.sym	SUBMENULIST,0,10,14,40,44
  7205                        	.sym	HSUBMENU,0,7,14,32
  7206                        	.sym	PSUBMENU,0,138,14,32,43
  Mon Aug  9 2021 16:52                                                Page 134


  7207                        	.sym	SUBMENU,0,10,14,64,43
  7208                        	.sym	MenuAction,0,641,14,32
  7209                        	.sym	PMENUANCHOR,0,138,14,32,42
  7210                        	.sym	MENUANCHOR,0,10,14,272,42
  7211                        	.sym	PMSGBOX,0,138,14,32,41
  7212                        	.sym	MSGBOX,0,10,14,144,41
  7213                        	.sym	PTEXTBOX,0,138,14,32,40
  7214                        	.sym	TEXTBOX,0,10,14,144,40
  7215                        	.sym	PLISTBOX,0,138,14,32,39
  7216                        	.sym	LISTBOX,0,10,14,240,39
  7217                        	.sym	PSCROLLBAR,0,138,14,32,38
  7218                        	.sym	SCROLLBAR,0,10,14,240,38
  7219                        	.sym	PBUTTON,0,138,14,32,37
  7220                        	.sym	BUTTON,0,10,14,96,37
  7221                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,36
  7222                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,36
  7223                        	.sym	PMENUTAG,0,138,14,32,35
  7224                        	.sym	MENUTAG,0,10,14,160,35
  7225                        	.sym	PMENU,0,138,14,32,34
  7226                        	.sym	MENU,0,10,14,280,34
  7227                        	.sym	HMENURESOURCE,0,129,14,32
  7228                        	.sym	FONTMETRIC,0,10,14,32,33
  7229                        	.sym	TITLE,0,142,14,32
  7230                        	.sym	PHANDLE,0,1153,14,32
  7231                        	.sym	HANDLE,0,129,14,32
  7232                        	.sym	PWINDOWEX,0,138,14,32,32
  7233                        	.sym	WINDOWEX,0,10,14,3880,32
  7234                        	.sym	PWINDOW,0,138,14,32,31
  7235                        	.sym	WINDOW,0,10,14,3904,31
  7236                        	.sym	PDRAGDATA,0,138,14,32,30
  7237                        	.sym	DRAGDATA,0,10,14,216,30
  7238                        	.sym	PNCCLICKABLE,0,138,14,32,29
  7239                        	.sym	NCCLICKABLE,0,10,14,136,29
  7240                        	.sym	HCLICKABLE,0,7,14,32
  7241                        	.sym	PCLICKABLE,0,138,14,32,28
  7242                        	.sym	CLICKABLE,0,10,14,152,28
  7243                        	.sym	PWNDCLASS,0,138,14,32,27
  7244                        	.sym	WNDCLASS,0,10,14,272,27
  7245                        	.sym	HBRUSH,0,129,14,32
  7246                        	.sym	HCURSOR,0,129,14,32
  7247                        	.sym	HICON,0,129,14,32
  7248                        	.sym	HINSTANCE,0,129,14,32
  7249                        	.sym	FXWndProc,0,654,14,32
  7250                        	.sym	PDRECT,0,138,14,32,26
  7251                        	.sym	DRECT,0,10,14,112,26
  7252                        	.sym	PRECTP,0,138,14,32,25
  7253                        	.sym	RECTP,0,10,14,96,25
  7254                        	.sym	PRECT,0,138,14,32,24
  7255                        	.sym	RECT,0,10,14,112,24
  7256                        	.sym	PPOINT,0,138,14,32,23
  7257                        	.sym	POINT,0,10,14,32,23
  7258                        	.sym	PFXPROPERTY,0,138,14,32,21
  7259                        	.sym	FXPROPERTY,0,10,14,384,21
  7260                        	.sym	PKEYSTATE,0,138,14,32,20
  7261                        	.sym	KEYSTATE,0,10,14,112,20
  7262                        	.sym	SCANCODE,0,14,14,8
  7263                        	.sym	KEYCODE,0,16,14,16
  7264                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,19
  Mon Aug  9 2021 16:52                                                Page 135


  7265                        	.sym	FXPROCESSMESSAGE,0,10,14,112,19
  7266                        	.sym	PFXPROCESS,0,138,14,32,18
  7267                        	.sym	FXPROCESS,0,10,14,800,18
  7268                        	.sym	PDESKTOP_CONTROL,0,138,14,32,17
  7269                        	.sym	DESKTOP_CONTROL,0,10,14,392,17
  7270                        	.sym	PCONSOLE_CONTROL,0,138,14,32,16
  7271                        	.sym	CONSOLE_CONTROL,0,10,14,448,16
  7272                        	.sym	FXProcessProc,0,641,14,32
  7273                        	.sym	PFXCMDMESSAGE,0,138,14,32,15
  7274                        	.sym	FXCMDMESSAGE,0,10,14,312,15
  7275                        	.sym	PFXOSMESSAGE,0,138,14,32,14
  7276                        	.sym	FXOSMESSAGE,0,10,14,312,14
  7277                        	.sym	PINT_REGS,0,138,14,32,13
  7278                        	.sym	INT_REGS,0,10,14,104,13
  7279                        	.sym	TASK_STACK,0,10,14,32,12
  7280                        	.sym	TASK,0,10,14,48,11
  7281                        	.sym	PIRQDATA,0,138,14,32,10
  7282                        	.sym	IRQDATA,0,10,14,48,10
  7283                        	.sym	HMENU,0,129,14,32
  7284                        	.sym	HWND,0,129,14,32
  7285                        	.sym	MSGDATA,0,14,14,8
  7286                        	.sym	MSGDEST,0,18,14,32
  7287                        	.sym	MSGSRC,0,18,14,32
  7288                        	.sym	MSGTYPE,0,16,14,16
  7289                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,4
  7290                        	.sym	PROCESS_TLS_LIST,0,138,14,32,4
  7291                        	.sym	SEMAPHORE_LIST,0,138,14,32,4
  7292                        	.sym	FILE_BLOCK_LIST,0,138,14,32,4
  7293                        	.sym	FILE_PATH_LIST,0,138,14,32,4
  7294                        	.sym	PROCEDURE_LIST,0,138,14,32,4
  7295                        	.sym	FILE_HANDLE,0,138,14,32,9
  7296                        	.sym	FILE_BLOCK,0,10,14,552,9
  7297                        	.sym	SEMAPHORE,0,10,14,16,8
  7298                        	.sym	PPROCESS_SIGNAL,0,138,14,32,7
  7299                        	.sym	PROCESS_SIGNAL,0,10,14,16,7
  7300                        	.sym	KRESULT,0,18,14,32
  7301                        	.sym	PKERNEL_ERROR,0,138,14,32,6
  7302                        	.sym	KERNEL_ERROR,0,10,14,32,6
  7303                        	.sym	PROCESS_STATUS,0,16,14,16
  7304                        	.sym	FILE_PATH_NAME,0,142,14,32
  7305                        	.sym	PROCESS_RESOURCE,0,129,14,32
  7306                        	.sym	PROCESS_TLS,0,129,14,32
  7307                        	.sym	PROCESS_CTX,0,129,14,32
  7308                        	.sym	USERID,0,16,14,16
  7309                        	.sym	PROCESS_ID,0,18,14,32
  7310                        	.sym	PROCESS_BANK,0,14,14,8
  7311                        	.sym	PFXQUEUE,0,138,14,32,5
  7312                        	.sym	FXQUEUE,0,10,14,80,5
  7313                        	.sym	PFXNODELIST,0,138,14,32,4
  7314                        	.sym	FXNODELIST,0,10,14,96,4
  7315                        	.sym	NodeListDeallocator,0,641,14,32
  7316                        	.sym	PFXNODE,0,138,14,32,3
  7317                        	.sym	FXNODE,0,10,14,384,3
  7318                        	.sym	PBYTEBITS,0,138,14,32,2
  7319                        	.sym	BYTEBITS,0,10,14,8,2
  7320                        	.sym	HRESULT,0,18,14,32
  7321                        	.sym	LPWCHAR,0,144,14,32
  7322                        	.sym	WCHAR,0,16,14,16
  Mon Aug  9 2021 16:52                                                Page 136


  7323                        	.sym	HSTRINGTABLE,0,129,14,32
  7324                        	.sym	HCOLOR,0,129,14,32
  7325                        	.sym	HFONT,0,129,14,32
  7326                        	.sym	HDC,0,129,14,32
  7327                        	.sym	HPOINTER,0,129,14,32
  7328                        	.sym	uint32_t,0,18,14,32
  7329                        	.sym	uint8_t,0,14,14,8
  7330                        	.sym	LPBOOL,0,142,14,32
  7331                        	.sym	BOOL,0,14,14,8
  7332                        	.sym	DWORD,0,18,14,32
  7333                        	.sym	ULONG,0,18,14,32
  7334                        	.sym	LPLONG,0,135,14,32
  7335                        	.sym	LONG,0,7,14,32
  7336                        	.sym	PUINT,0,144,14,32
  7337                        	.sym	USHORT,0,16,14,16
  7338                        	.sym	UINT,0,16,14,16
  7339                        	.sym	INT,0,5,14,16
  7340                        	.sym	WORD,0,5,14,16
  7341                        	.sym	PBYTE,0,142,14,32
  7342                        	.sym	BYTE,0,14,14,8
  7343                        	.sym	IOPORT,0,142,14,32
  7344                        	.sym	PUCHAR,0,142,14,32
  7345                        	.sym	UCHAR,0,14,14,8
  7346                        	.sym	LPWCSTR,0,142,14,32
  7347                        	.sym	LPCSTR,0,142,14,32
  7348                        	.sym	LPSTR,0,142,14,32
  7349                        	.sym	LPCHAR,0,142,14,32
  7350                        	.sym	CHAR,0,14,14,8
  7351                        	.sym	PUINT_32,0,146,14,32
  7352                        	.sym	UINT_32,0,18,14,32
  7353                        	.sym	PUINT_16,0,144,14,32
  7354                        	.sym	UINT_16,0,16,14,16
  7355                        	.sym	PUINT_8,0,142,14,32
  7356                        	.sym	UINT_8,0,14,14,8
  7357                        	.sym	LPVOID,0,129,14,32
  7358                        	.sym	VOID,0,1,14,32
  7359                        	.sym	~~memset,~~memset,1089,18,32
  7360                        	.sym	~~memmove,~~memmove,1089,18,32
  7361                        	.sym	~~memcpy,~~memcpy,1089,18,32
  7362                        	.sym	Boolean_T,0,5,14,16
  7363                        	.sym	FILE,0,10,14,160,1
  7364                        	.sym	fpos_t,0,7,14,32
  7365                        	.sym	size_t,0,16,14,16
  7366                        	.sym	va_list,0,142,14,32
  7367                        	end


      Lines assembled: 7367
      Errors: 0
