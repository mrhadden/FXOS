  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",0
     7                        ;/* ----------------------------------------------
                    ------------------------------
     8                        ; * umm_malloc.c - a memory allocator for embedded
                     systems (microcontrollers)
     9                        ; *
    10                        ; * See LICENSE for copyright notice
    11                        ; * See README.md for acknowledgements and descrip
                    tion of internals
    12                        ; * ----------------------------------------------
                    ------------------------------
    13                        ; *
    14                        ; * R.Hempel 2007-09-22 - Original
    15                        ; * R.Hempel 2008-12-11 - Added MIT License bioler
                    plate
    16                        ; *                     - realloc() now looks to s
                    ee if previous block is free
    17                        ; *                     - made common operations f
                    unctions
    18                        ; * R.Hempel 2009-03-02 - Added macros to disable 
                    tasking
    19                        ; *                     - Added function to dump h
                    eap and check for valid free
    20                        ; *                        pointer
    21                        ; * R.Hempel 2009-03-09 - Changed name to umm_mall
                    oc to avoid conflicts with
    22                        ; *                        the mm_malloc() library
                     functions
    23                        ; *                     - Added some test code to 
                    assimilate a free block
    24                        ; *                        with the very block if 
                    possible. Complicated and
    25                        ; *                        not worth the grief.
    26                        ; * D.Frank 2014-04-02  - Fixed heap configuration
                     when UMM_TEST_MAIN is NOT set,
    27                        ; *                        added user-dependent co
                    nfiguration file umm_malloc_cfg.h
    28                        ; * R.Hempel 2016-12-04 - Add support for Unity te
                    st framework
    29                        ; *                     - Reorganize source files 
                    to avoid redundant content
    30                        ; *                     - Move integrity and poiso
                    n checking to separate file
    31                        ; * R.Hempel 2017-12-29 - Fix bug in realloc when 
                    requesting a new block that
    32                        ; *                        results in OOM error - 
  Sat Jul 10 2021  1:15                                                Page 2


                    see Issue 11
    33                        ; * R.Hempel 2019-09-07 - Separate the malloc() an
                    d free() functionality into
    34                        ; *                        wrappers that use criti
                    cal section protection macros
    35                        ; *                        and static core functio
                    ns that assume they are
    36                        ; *                        running in a protected 
                    con text. Thanks @devyte
    37                        ; * ----------------------------------------------
                    ------------------------------
    38                        ; */
    39                        ;
    40                        ;#include <stdio.h>
    41                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdio.h",0
    42                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
    43                        	.line	51
    44                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdio.h",40
    45                        	.stag	__stdio,160,1
    46                        	.member	_bp,0,142,8,32
    47                        	.member	_bend,32,142,8,32
    48                        	.member	_buff,64,142,8,32
    49                        	.member	_flags,96,15,8,16
    50                        	.member	_unit,112,14,8,8
    51                        	.member	_bytbuf,120,14,8,8
    52                        	.member	_buflen,128,16,8,16
    53                        	.member	_tmpnum,144,15,8,16
    54                        	.eos
    55                        	.line	219
    56                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",34
    57                        ;#include <string.h>
    58                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    59                        	.line	134
    60                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",35
    61                        ;
    62                        ;#include "umm_malloc.h"
    63                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
    64                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    65                        	.stag	_fx_bytebits,8,2
    66                        	.member	b7,0,14,17,1
    67                        	.member	b6,1,14,17,1
    68                        	.member	b5,2,14,17,1
    69                        	.member	b4,3,14,17,1
    70                        	.member	b3,4,14,17,1
    71                        	.member	b2,5,14,17,1
    72                        	.member	b1,6,14,17,1
    73                        	.member	b0,7,14,17,1
    74                        	.eos
    75                        	.stag	_fx_node,384,3
    76                        	.member	type,0,14,8,8
  Sat Jul 10 2021  1:15                                                Page 3


    77                        	.member	Reserved0,8,14,8,8
    78                        	.member	data,16,129,8,32
    79                        	.member	last,48,138,8,32,3
    80                        	.member	next,80,138,8,32,3
    81                        	.member	name,112,110,8,0,32
    82                        	.member	Reserved1,368,16,8,16
    83                        	.eos
    84                        	.stag	_fx_nodelist,96,4
    85                        	.member	listhead,0,138,8,32,3
    86                        	.member	listData,32,129,8,32
    87                        	.member	deallocator,64,641,8,32
    88                        	.eos
    89                        	.stag	_fx_queue,80,5
    90                        	.member	count,0,5,8,16
    91                        	.member	front,16,138,8,32,3
    92                        	.member	rear,48,138,8,32,3
    93                        	.eos
    94                        	.stag	fake6_,32,6
    95                        	.member	subsystem,0,14,8,8
    96                        	.member	level,8,14,8,8
    97                        	.member	error,16,16,8,16
    98                        	.eos
    99                        	.stag	_fx_process_signal,16,7
   100                        	.member	cbSize,0,16,8,16
   101                        	.eos
   102                        	.stag	_fx_semaphore,16,8
   103                        	.member	reserved,0,5,8,16
   104                        	.eos
   105                        	.stag	_fx_fileBlock,552,9
   106                        	.member	openCount,0,16,8,16
   107                        	.member	lockCount,16,16,8,16
   108                        	.member	dirty,32,14,8,8
   109                        	.member	fileBuffer,40,110,8,0,64
   110                        	.eos
   111                        	.stag	_fx_irq_data,48,10
   112                        	.member	line,0,5,8,16
   113                        	.member	keycode,16,142,8,32
   114                        	.eos
   115                        	.stag	_task,48,11
   116                        	.member	SPL,0,14,8,8
   117                        	.member	SPH,8,14,8,8
   118                        	.member	pstack,16,142,8,32
   119                        	.eos
   120                        	.stag	_task_stack,32,12
   121                        	.member	SS,0,142,8,32
   122                        	.eos
   123                        	.stag	int_regs,104,13
   124                        	.member	PB,0,14,8,8
   125                        	.member	PH,8,14,8,8
   126                        	.member	PL,16,14,8,8
   127                        	.member	PP,24,14,8,8
   128                        	.member	DB,32,14,8,8
   129                        	.member	DH,40,14,8,8
   130                        	.member	DL,48,14,8,8
   131                        	.member	AH,56,14,8,8
   132                        	.member	AL,64,14,8,8
   133                        	.member	XH,72,14,8,8
   134                        	.member	XL,80,14,8,8
  Sat Jul 10 2021  1:15                                                Page 4


   135                        	.member	YH,88,14,8,8
   136                        	.member	YL,96,14,8,8
   137                        	.eos
   138                        	.stag	_fx_eventMessage,304,14
   139                        	.member	src,0,18,8,32
   140                        	.member	dest,32,18,8,32
   141                        	.member	type,64,16,8,16
   142                        	.member	hwnd,80,129,8,32
   143                        	.member	pheap,112,129,8,32
   144                        	.member	msgTime,144,18,8,32
   145                        	.member	data,176,110,8,0,16
   146                        	.eos
   147                        	.stag	_fx_cmdMessage,304,15
   148                        	.member	src,0,18,8,32
   149                        	.member	dest,32,18,8,32
   150                        	.member	type,64,16,8,16
   151                        	.member	hwnd,80,129,8,32
   152                        	.member	pheap,112,129,8,32
   153                        	.member	msgTime,144,18,8,32
   154                        	.member	cmdCId,176,16,8,16
   155                        	.member	cmdMId,192,16,8,16
   156                        	.member	parameter1,208,18,8,32
   157                        	.member	parameter2,240,18,8,32
   158                        	.member	parameter3,272,18,8,32
   159                        	.eos
   160                        	.stag	_fx_console_ctl,448,16
   161                        	.member	maxCols,0,5,8,16
   162                        	.member	maxRows,16,5,8,16
   163                        	.member	curX,32,5,8,16
   164                        	.member	curY,48,5,8,16
   165                        	.member	fgColor,64,5,8,16
   166                        	.member	bgColor,80,5,8,16
   167                        	.member	mode,96,14,8,8
   168                        	.member	kbBuffer,104,101,8,0,16
   169                        	.member	screenBuffer,360,142,8,32
   170                        	.member	desktopMode,392,14,8,8
   171                        	.member	lastMouseButton,400,5,8,16
   172                        	.member	lastMouseX,416,5,8,16
   173                        	.member	lastMouseY,432,5,8,16
   174                        	.eos
   175                        	.stag	_fx_desktop_ctl,392,17
   176                        	.member	desktopMode,0,14,8,8
   177                        	.member	cursorCtl,8,5,8,16
   178                        	.member	cursorState,24,5,8,16
   179                        	.member	backgroundColor,40,5,8,16
   180                        	.member	foregroundColor,56,5,8,16
   181                        	.member	menuMode,72,5,8,16
   182                        	.member	lastMouseButton,88,5,8,16
   183                        	.member	lastMouseX,104,5,8,16
   184                        	.member	lastMouseY,120,5,8,16
   185                        	.member	currentDiskName,136,142,8,32
   186                        	.member	diskNodes,168,129,8,32
   187                        	.member	titleNodes,200,129,8,32
   188                        	.member	menuNodes,232,129,8,32
   189                        	.member	iconNodes,264,129,8,32
   190                        	.member	windowNodes,296,129,8,32
   191                        	.member	fontNodes,328,129,8,32
   192                        	.member	wndProc,360,138,8,32,4
  Sat Jul 10 2021  1:15                                                Page 5


   193                        	.eos
   194                        	.stag	_fx_process,800,18
   195                        	.member	cbSize,0,5,8,16
   196                        	.member	procId,16,18,8,32
   197                        	.member	parentId,48,18,8,32
   198                        	.member	ctx,80,129,8,32
   199                        	.member	userId,112,16,8,16
   200                        	.member	status,128,16,8,16
   201                        	.member	foregroundActive,144,14,8,8
   202                        	.member	tls,152,1121,8,32,8
   203                        	.member	commandLine,408,142,8,32
   204                        	.member	semaphores,440,138,8,32,4
   205                        	.member	fileHandles,472,138,8,32,4
   206                        	.member	pathList,504,138,8,32,4
   207                        	.member	resources,536,138,8,32,4
   208                        	.member	timerAware,568,14,8,8
   209                        	.member	timerTicks,576,112,8,0,2
   210                        	.member	timerTickCount,608,112,8,0,2
   211                        	.member	kernelError,640,10,8,32,6
   212                        	.member	consoleCtl,672,138,8,32,16
   213                        	.member	desktopCtl,704,138,8,32,17
   214                        	.member	execProc,736,641,8,32
   215                        	.member	startupArgs,768,129,8,32
   216                        	.eos
   217                        	.stag	_fxProcessMessage,112,19
   218                        	.member	src,0,18,8,32
   219                        	.member	dest,32,18,8,32
   220                        	.member	type,64,16,8,16
   221                        	.member	processInfo,80,138,8,32,18
   222                        	.eos
   223                        	.stag	_k_key_state,112,20
   224                        	.member	scanCode,0,14,8,8
   225                        	.member	isShifted,8,14,8,8
   226                        	.member	isAlt,16,14,8,8
   227                        	.member	isExtended,24,14,8,8
   228                        	.member	isCapsLock,32,14,8,8
   229                        	.member	isNumLock,40,14,8,8
   230                        	.member	isScrollLock,48,14,8,8
   231                        	.member	keyChar,56,16,8,16
   232                        	.member	scanTime,72,18,8,32
   233                        	.member	ledStatus,104,14,8,8
   234                        	.eos
   235                        	.stag	_fx_property,384,21
   236                        	.member	name,0,110,8,0,16
   237                        	.member	value,128,110,8,0,32
   238                        	.eos
   239                        	.utag	_24bitPointer,32,22
   240                        	.member	address,0,142,11,32
   241                        	.member	bytes,0,110,11,0,4
   242                        	.eos
   243                        	.stag	_PointStruct,32,23
   244                        	.member	x,0,5,8,16
   245                        	.member	y,16,5,8,16
   246                        	.eos
   247                        	.stag	_RectStruct,112,24
   248                        	.member	x,0,5,8,16
   249                        	.member	y,16,5,8,16
   250                        	.member	z,32,18,8,32
  Sat Jul 10 2021  1:15                                                Page 6


   251                        	.member	width,64,5,8,16
   252                        	.member	height,80,5,8,16
   253                        	.member	attr,96,5,8,16
   254                        	.eos
   255                        	.stag	fake25_,96,25
   256                        	.member	name,0,142,8,32
   257                        	.member	topLeft,32,10,8,32,23
   258                        	.member	bottomRight,64,10,8,32,23
   259                        	.eos
   260                        	.stag	fake26_,112,26
   261                        	.member	x,0,5,8,16
   262                        	.member	y,16,5,8,16
   263                        	.member	z,32,5,8,16
   264                        	.member	width,48,5,8,16
   265                        	.member	height,64,5,8,16
   266                        	.member	data,80,18,8,32
   267                        	.eos
   268                        	.stag	_k_WindowClass,272,27
   269                        	.member	cbSize,0,16,8,16
   270                        	.member	style,16,16,8,16
   271                        	.member	styleEx,32,16,8,16
   272                        	.member	pWndProc,48,654,8,32
   273                        	.member	hInstance,80,129,8,32
   274                        	.member	hIcon,112,129,8,32
   275                        	.member	hCursor,144,129,8,32
   276                        	.member	hbrBackground,176,129,8,32
   277                        	.member	lpszMenuName,208,142,8,32
   278                        	.member	lpszClassName,240,142,8,32
   279                        	.eos
   280                        	.stag	_ClickableRect,152,28
   281                        	.member	area,0,10,8,112,24
   282                        	.member	z,112,18,8,32
   283                        	.member	enabled,144,14,8,8
   284                        	.eos
   285                        	.stag	_NCClickableRect,136,29
   286                        	.member	area,0,10,8,112,24
   287                        	.member	msgType,112,16,8,16
   288                        	.member	enabled,128,14,8,8
   289                        	.eos
   290                        	.stag	_DragData,216,30
   291                        	.member	area,0,10,8,112,24
   292                        	.member	xoffset,112,5,8,16
   293                        	.member	yoffset,128,5,8,16
   294                        	.member	msgType,144,16,8,16
   295                        	.member	ncAction,160,16,8,16
   296                        	.member	isDrag,176,14,8,8
   297                        	.member	isResize,184,14,8,8
   298                        	.member	canDrag,192,14,8,8
   299                        	.member	canDrop,200,14,8,8
   300                        	.member	didDrag,208,14,8,8
   301                        	.eos
   302                        	.stag	_k_WindowStruct,3904,31
   303                        	.member	cbSize,0,16,8,16
   304                        	.member	style,16,18,8,32
   305                        	.member	styleEx,48,18,8,32
   306                        	.member	win_id,80,5,8,16
   307                        	.member	win_x,96,5,8,16
   308                        	.member	win_y,112,5,8,16
  Sat Jul 10 2021  1:15                                                Page 7


   309                        	.member	win_width,128,5,8,16
   310                        	.member	win_height,144,5,8,16
   311                        	.member	win_xoffset,160,5,8,16
   312                        	.member	win_yoffset,176,5,8,16
   313                        	.member	win_cxoffset,192,5,8,16
   314                        	.member	win_cyoffset,208,5,8,16
   315                        	.member	wndRect,224,10,8,112,24
   316                        	.member	clientRect,336,10,8,112,24
   317                        	.member	nonclientGadgets,448,106,8,0,29,16
   318                        	.member	clickable,2624,129,8,32
   319                        	.member	win_title,2656,110,8,0,32
   320                        	.member	Reserved0,2912,16,8,16
   321                        	.member	win_class,2928,110,8,0,16
   322                        	.member	win_class_name,3056,110,8,0,32
   323                        	.member	nBitmapLayer,3312,16,8,16
   324                        	.member	bgRegion,3328,129,8,32
   325                        	.member	procid,3360,18,8,32
   326                        	.member	pWndClass,3392,138,8,32,27
   327                        	.member	pParentWindow,3424,129,8,32
   328                        	.member	hMenu,3456,129,8,32
   329                        	.member	hPointer,3488,129,8,32
   330                        	.member	hBackground,3520,129,8,32
   331                        	.member	pChildWindows,3552,138,8,32,4
   332                        	.member	pChildHitList,3584,138,8,32,4
   333                        	.member	isVisible,3616,14,8,8
   334                        	.member	windowData,3624,129,8,32
   335                        	.member	clientData,3656,1121,8,32,6
   336                        	.member	isClosed,3848,14,8,8
   337                        	.member	isClosing,3856,14,8,8
   338                        	.member	isDesktop,3864,14,8,8
   339                        	.member	clickableNode,3872,138,8,32,3
   340                        	.eos
   341                        	.stag	_k_WindowStructEx,3880,32
   342                        	.member	cbSize,0,16,8,16
   343                        	.member	style,16,18,8,32
   344                        	.member	styleEx,48,18,8,32
   345                        	.member	win_id,80,5,8,16
   346                        	.member	win_x,96,5,8,16
   347                        	.member	win_y,112,5,8,16
   348                        	.member	win_width,128,5,8,16
   349                        	.member	win_height,144,5,8,16
   350                        	.member	win_xoffset,160,5,8,16
   351                        	.member	win_yoffset,176,5,8,16
   352                        	.member	win_cxoffset,192,5,8,16
   353                        	.member	win_cyoffset,208,5,8,16
   354                        	.member	wndRect,224,10,8,112,24
   355                        	.member	clientRect,336,10,8,112,24
   356                        	.member	nonclientGadgets,448,106,8,0,29,16
   357                        	.member	clickable,2624,129,8,32
   358                        	.member	win_title,2656,110,8,0,32
   359                        	.member	Reserved0,2912,16,8,16
   360                        	.member	win_class,2928,110,8,0,16
   361                        	.member	nBitmapLayer,3056,16,8,16
   362                        	.member	procid,3072,18,8,32
   363                        	.member	pWndClass,3104,138,8,32,27
   364                        	.member	pParentWindow,3136,129,8,32
   365                        	.member	hMenu,3168,129,8,32
   366                        	.member	hPointer,3200,129,8,32
  Sat Jul 10 2021  1:15                                                Page 8


   367                        	.member	hBackground,3232,129,8,32
   368                        	.member	pChildWindows,3264,138,8,32,4
   369                        	.member	pChildHitList,3296,138,8,32,4
   370                        	.member	isVisible,3328,14,8,8
   371                        	.member	windowData,3336,129,8,32
   372                        	.member	clientData,3368,1121,8,32,4
   373                        	.member	isClosed,3496,14,8,8
   374                        	.member	hWnd,3504,129,8,32
   375                        	.member	localRect,3536,10,8,112,24
   376                        	.member	globalRect,3648,10,8,112,24
   377                        	.member	clientOffsetRect,3760,10,8,112,24
   378                        	.member	isDesktop,3872,14,8,8
   379                        	.eos
   380                        	.stag	_FontMetric,32,33
   381                        	.member	width,0,5,8,16
   382                        	.member	height,16,5,8,16
   383                        	.eos
   384                        	.stag	_MenuStruct,280,34
   385                        	.member	cx,0,5,8,16
   386                        	.member	cy,16,5,8,16
   387                        	.member	width,32,5,8,16
   388                        	.member	height,48,5,8,16
   389                        	.member	fcolor,64,14,8,8
   390                        	.member	bcolor,72,14,8,8
   391                        	.member	chromeLeft,80,14,8,8
   392                        	.member	chromeRight1,88,14,8,8
   393                        	.member	chromeRight2,96,14,8,8
   394                        	.member	hFont,104,129,8,32
   395                        	.member	itemId,136,16,8,16
   396                        	.member	pCaption,152,142,8,32
   397                        	.member	subMenus,184,138,8,32,4
   398                        	.member	pBackground,216,129,8,32
   399                        	.member	hWndOwner,248,129,8,32
   400                        	.eos
   401                        	.stag	fake35_,160,35
   402                        	.member	menuId,0,16,8,16
   403                        	.member	caption,16,142,8,32
   404                        	.member	rect,48,10,8,112,24
   405                        	.eos
   406                        	.stag	fake36_,5152,36
   407                        	.member	pParent,0,138,8,32,31
   408                        	.member	rect,32,10,8,112,24
   409                        	.member	captions,144,1134,8,32,24
   410                        	.member	chrome,912,110,8,0,24
   411                        	.member	ids,1104,112,8,0,24
   412                        	.member	clickable,1488,106,8,0,28,24
   413                        	.member	selected,5136,16,8,16
   414                        	.eos
   415                        	.stag	_fx_button_t,96,37
   416                        	.member	pCaption,0,142,8,32
   417                        	.member	cCaption,32,16,8,16
   418                        	.member	data,48,129,8,32
   419                        	.member	captionPixelWidth,80,16,8,16
   420                        	.eos
   421                        	.stag	_fx_scrollbar_t,240,38
   422                        	.member	min,0,16,8,16
   423                        	.member	max,16,16,8,16
   424                        	.member	increment,32,16,8,16
  Sat Jul 10 2021  1:15                                                Page 9


   425                        	.member	stopsize,48,16,8,16
   426                        	.member	location,64,5,8,16
   427                        	.member	state,80,5,8,16
   428                        	.member	rectThumb,96,10,8,112,24
   429                        	.member	data,208,129,8,32
   430                        	.eos
   431                        	.stag	_fx_listbox_t,240,39
   432                        	.member	pos,0,5,8,16
   433                        	.member	selected,16,16,8,16
   434                        	.member	offsetX,32,5,8,16
   435                        	.member	offsetY,48,5,8,16
   436                        	.member	inc,64,5,8,16
   437                        	.member	direction,80,5,8,16
   438                        	.member	top,96,5,8,16
   439                        	.member	bottom,112,5,8,16
   440                        	.member	indexTop,128,5,8,16
   441                        	.member	indexBottom,144,5,8,16
   442                        	.member	maxItems,160,16,8,16
   443                        	.member	fontSet,176,142,8,32
   444                        	.member	data,208,129,8,32
   445                        	.eos
   446                        	.stag	_fx_textbox_t,144,40
   447                        	.member	pos,0,5,8,16
   448                        	.member	selected,16,16,8,16
   449                        	.member	offsetX,32,5,8,16
   450                        	.member	offsetY,48,5,8,16
   451                        	.member	isShifted,64,14,8,8
   452                        	.member	cursorState,72,14,8,8
   453                        	.member	fontSet,80,142,8,32
   454                        	.member	data,112,129,8,32
   455                        	.eos
   456                        	.stag	_fx_msgbox_t,144,41
   457                        	.member	pos,0,5,8,16
   458                        	.member	selected,16,16,8,16
   459                        	.member	offsetX,32,5,8,16
   460                        	.member	offsetY,48,5,8,16
   461                        	.member	isShifted,64,14,8,8
   462                        	.member	cursorState,72,14,8,8
   463                        	.member	fontSet,80,142,8,32
   464                        	.member	data,112,129,8,32
   465                        	.eos
   466                        	.stag	_fx_menuAnchor_t,272,42
   467                        	.member	pCaption,0,142,8,32
   468                        	.member	renderLayoutX,32,16,8,16
   469                        	.member	renderLayoutY,48,16,8,16
   470                        	.member	captionPixelWidth,64,16,8,16
   471                        	.member	data,80,129,8,32
   472                        	.member	droppedWindow,112,138,8,32,31
   473                        	.member	bytes,144,110,8,0,16
   474                        	.eos
   475                        	.stag	_SubMenuStruct,64,43
   476                        	.member	caption,0,142,8,32
   477                        	.member	action,32,641,8,32
   478                        	.eos
   479                        	.stag	_SubMenuListStruct,40,44
   480                        	.member	cMenus,0,14,8,8
   481                        	.member	psubmenus,8,9354,8,32,43
   482                        	.eos
  Sat Jul 10 2021  1:15                                                Page 10


   483                        	.stag	_fx_ComBuffer,2080,45
   484                        	.member	cbSize,0,16,8,16
   485                        	.member	cbBuffer,16,16,8,16
   486                        	.member	buffer,32,110,8,0,256
   487                        	.eos
   488                        	.stag	_fx_resource_header,72,46
   489                        	.member	magic,0,110,8,0,4
   490                        	.member	major,32,14,8,8
   491                        	.member	minor,40,14,8,8
   492                        	.member	type,48,14,8,8
   493                        	.member	reserved,56,14,8,8
   494                        	.member	resheaderSize,64,14,8,8
   495                        	.eos
   496                        	.stag	_fx_resource_header_font,144,47
   497                        	.member	title,0,110,8,0,16
   498                        	.member	height,128,14,8,8
   499                        	.member	width,136,14,8,8
   500                        	.eos
   501                        	.line	1010
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   503                        	.line	24
   504                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",37
   505                        ;
   506                        ;#include "umm_malloc_cfg.h"   /* user-dependent *
                    /
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   508                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   509                        	.line	35
   510                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   511                        	.stag	UMM_HEAP_INFO_t,256,48
   512                        	.member	totalEntries,0,18,8,32
   513                        	.member	usedEntries,32,18,8,32
   514                        	.member	freeEntries,64,18,8,32
   515                        	.member	totalBlocks,96,18,8,32
   516                        	.member	usedBlocks,128,18,8,32
   517                        	.member	freeBlocks,160,18,8,32
   518                        	.member	maxFreeContiguousBlocks,192,18,8,32
   519                        	.member	blockSize,224,18,8,32
   520                        	.eos
   521                        	.line	199
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",39
   523                        ;
   524                        ;/* Use the default DBGLOG_LEVEL and DBGLOG_FUNCTI
                    ON */
   525                        ;
   526                        ;#define DBGLOG_LEVEL 0
   527                        ;
   528                        ;#include "dbglog.h"
   529                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\dbglog.h",0
   530                        	.line	99
   531                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 11


                    space\FXOSv1\src\umm_malloc.c",45
   532                        ;
   533                        ;/* ----------------------------------------------
                    --------------------------- */
   534                        ;
   535                        ;UMM_H_ATTPACKPRE typedef struct umm_ptr_t
   536                        ;{
   537                        ;	unsigned long next;
   538                        ;	unsigned long prev;
   539                        ;}UMM_H_ATTPACKSUF umm_ptr;
   540                        	.stag	umm_ptr_t,64,49
   541                        	.member	next,0,18,8,32
   542                        	.member	prev,32,18,8,32
   543                        	.eos
   544                        ;
   545                        ;UMM_H_ATTPACKPRE typedef struct umm_block_t
   546                        ;{
   547                        ;	union
   548                        ;	{
   549                        ;		umm_ptr used;
   550                        ;	} header;
   551                        	.utag	fake50_,64,50
   552                        	.member	used,0,10,11,64,49
   553                        	.eos
   554                        ;	union
   555                        ;	{
   556                        ;		umm_ptr free;
   557                        ;		unsigned char data[8];
   558                        ;	} body;
   559                        	.utag	fake51_,64,51
   560                        	.member	free,0,10,11,64,49
   561                        	.member	data,0,110,11,0,8
   562                        	.eos
   563                        ;}UMM_H_ATTPACKSUF umm_block;
   564                        	.stag	umm_block_t,128,52
   565                        	.member	header,0,11,8,64,50
   566                        	.member	body,64,11,8,64,51
   567                        	.eos
   568                        ;
   569                        ;#define UMM_FREELIST_MASK (0x8000)
   570                        ;#define UMM_BLOCKNO_MASK  (0x7FFF)
   571                        ;
   572                        ;/* ----------------------------------------------
                    --------------------------- */
   573                        ;
   574                        ;umm_block FAR *umm_heap = NULL;
   575                        	data
   576                        	xdef	~~umm_heap
   577                        ~~umm_heap:
   578 00:0000: 00 00 00 00  	dl	$0
   579 00:0004:              	ends
   580                        ;unsigned long umm_numblocks = 0;
   581                        	data
   582                        	xdef	~~umm_numblocks
   583                        ~~umm_numblocks:
   584 00:0004: 00 00 00 00  	dl	$0
   585 00:0008:              	ends
   586                        ;
  Sat Jul 10 2021  1:15                                                Page 12


   587                        ;#define UMM_NUMBLOCKS (umm_numblocks)
   588                        ;
   589                        ;/* ----------------------------------------------
                    -------------------------- */
   590                        ;
   591                        ;#define UMM_BLOCK(b)  (umm_heap[b])
   592                        ;
   593                        ;#define UMM_NBLOCK(b) (UMM_BLOCK(b).header.used.n
                    ext)
   594                        ;#define UMM_PBLOCK(b) (UMM_BLOCK(b).header.used.p
                    rev)
   595                        ;#define UMM_NFREE(b)  (UMM_BLOCK(b).body.free.nex
                    t)
   596                        ;#define UMM_PFREE(b)  (UMM_BLOCK(b).body.free.pre
                    v)
   597                        ;#define UMM_DATA(b)   (UMM_BLOCK(b).body.data)
   598                        ;
   599                        ;/* ----------------------------------------------
                    ---------------------------
   600                        ; * There are additional files that may be include
                    d here - normally it's
   601                        ; * not a good idea to include .c files but in thi
                    s case it keeps the
   602                        ; * main umm_malloc file clear and prevents issues
                     with exposing internal
   603                        ; * data structures to other programs.
   604                        ; * ----------------------------------------------
                    ---------------------------
   605                        ; */
   606                        ;
   607                        ;#include "umm_integrity.c"
   608                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_integrity.c",0
   609                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   611                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   612                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   613                        	.line	88
   614                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   615                        	.stag	fake53_,32,53
   616                        	.member	quot,0,5,8,16
   617                        	.member	rem,16,5,8,16
   618                        	.eos
   619                        	.stag	fake54_,64,54
   620                        	.member	quot,0,7,8,32
   621                        	.member	rem,32,7,8,32
   622                        	.eos
   623                        	.stag	int_sqrt,32,55
   624                        	.member	sqrt,0,16,8,16
   625                        	.member	frac,16,16,8,16
   626                        	.eos
   627                        	.line	205
   628                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 13


                    space\FXOSv1\src\fxos.h",4
   629                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   630                        	.line	134
   631                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   632                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   633                        	.line	103
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
   635                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   636                        	.line	1010
   637                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   638                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   639                        	.line	89
   640                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   641                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   642                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   643                        	.line	1010
   644                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",5
   645                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   646                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   647                        	.line	1010
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   649                        	.line	72
   650                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   651                        	.line	1960
   652                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
   653                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   654                        	.line	400
   655                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   656                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   657                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   658                        	.line	134
   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   660                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   661                        	.line	205
   662                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
  Sat Jul 10 2021  1:15                                                Page 14


   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   664                        	.line	1010
   665                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   667                        	.line	1960
   668                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
   669                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   670                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   671                        	.line	205
   672                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   673                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   674                        	.line	134
   675                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   676                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   677                        	.line	1010
   678                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   679                        	.stag	_fx_string,64,56
   680                        	.member	size,0,16,8,16
   681                        	.member	pos,16,5,8,16
   682                        	.member	buffer,32,142,8,32
   683                        	.eos
   684                        	.line	139
   685                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   686                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   687                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   688                        	.line	30
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   690                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   691                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   692                        	.line	1010
   693                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   694                        	.stag	_fxos_executive_vtable,128,57
   695                        	.member	Init,0,8833,8,32
   696                        	.member	Configure,32,656,8,32
   697                        	.member	Query,64,656,8,32
   698                        	.member	Uninit,96,641,8,32
   699                        	.eos
   700                        	.line	86
   701                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
  Sat Jul 10 2021  1:15                                                Page 15


   702                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   703                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   704                        	.line	1010
   705                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   706                        	.line	114
   707                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   708                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   709                        	.line	208
   710                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   711                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   712                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   713                        	.line	30
   714                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   715                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   716                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   717                        	.line	30
   718                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   719                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   720                        	.line	199
   721                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   722                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   723                        	.line	24
   724                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   725                        	.stag	_fx_memory_map,2072,58
   726                        	.member	availableMemory,0,18,8,32
   727                        	.member	valid_segments,32,110,8,0,255
   728                        	.eos
   729                        	.stag	_fx_ipc_port,144,59
   730                        	.member	id,0,18,8,32
   731                        	.member	type,32,14,8,8
   732                        	.member	name,40,138,8,32,56
   733                        	.member	time,72,18,8,32
   734                        	.member	queue,104,138,8,32,5
   735                        	.member	reserved_1,136,14,8,8
   736                        	.eos
   737                        	.line	105
   738                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   739                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   740                        	.line	564
   741                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 16


                    space\FXOSv1\src\fxwindowmanager.h",7
   742                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   744                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   745                        	.line	1010
   746                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   747                        	.line	74
   748                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   749                        	.stag	_click_detected,64,60
   750                        	.member	window,0,138,8,32,31
   751                        	.member	handler,32,641,8,32
   752                        	.eos
   753                        	.stag	_current_palette_map,400,61
   754                        	.member	CUR_DESKTOP,0,5,8,16
   755                        	.member	CUR_BACKGROUND,16,5,8,16
   756                        	.member	CUR_FONT,32,5,8,16
   757                        	.member	CUR_SELECTED_FONT,48,5,8,16
   758                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   759                        	.member	CUR_WINDOWFRAME,80,5,8,16
   760                        	.member	CUR_WINDOWBORDER,96,5,8,16
   761                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   762                        	.member	CUR_MENU,128,5,8,16
   763                        	.member	CUR_GADGET,144,5,8,16
   764                        	.member	CUR_COLOR,160,101,8,0,15
   765                        	.eos
   766                        	.line	359
   767                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   768                        	.stag	_fxos_winman_vtable,160,62
   769                        	.member	Events,0,641,8,32
   770                        	.member	ConfigureWindowManager,32,656,8,32
   771                        	.member	ProcessWindowEvent,64,8833,8,32
   772                        	.member	QueryWindowManager,96,656,8,32
   773                        	.member	DoWndProcs,128,641,8,32
   774                        	.eos
   775                        	.stag	fake63_,64,63
   776                        	.member	type,0,16,8,16
   777                        	.member	size,16,16,8,16
   778                        	.member	desktopAction,32,129,8,32
   779                        	.eos
   780                        	.stag	fake64_,96,64
   781                        	.member	type,0,16,8,16
   782                        	.member	caption,16,138,8,32,56
   783                        	.member	buttonType,48,16,8,16
   784                        	.member	x,64,5,8,16
   785                        	.member	y,80,5,8,16
   786                        	.eos
   787                        	.stag	_childMessage_t,64,65
   788                        	.member	msgType,0,16,8,16
   789                        	.member	msgData,16,129,8,32
   790                        	.member	dataSize,48,16,8,16
   791                        	.eos
   792                        	.line	581
  Sat Jul 10 2021  1:15                                                Page 17


   793                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   794                        	.stag	_fx_main_loopvars,16,66
   795                        	.member	dummy,0,5,8,16
   796                        	.eos
   797                        	.stag	_fxMouseMessageData,64,67
   798                        	.member	button1,0,14,8,8
   799                        	.member	button2,8,14,8,8
   800                        	.member	button3,16,14,8,8
   801                        	.member	button4,24,14,8,8
   802                        	.member	x,32,16,8,16
   803                        	.member	y,48,16,8,16
   804                        	.eos
   805                        	.utag	marshalled_data,32,68
   806                        	.member	byteValue,0,14,11,8
   807                        	.member	verbValue,0,110,11,0,2
   808                        	.member	intValue,0,16,11,16
   809                        	.member	longValue,0,18,11,32
   810                        	.member	pointerValue,0,129,11,32
   811                        	.eos
   812                        	.stag	_fx_eventProcess,64,69
   813                        	.member	process,0,138,8,32,18
   814                        	.member	eventProc,32,641,8,32
   815                        	.eos
   816                        	.stag	_mouse_msg_state,184,70
   817                        	.member	lastEvent,0,18,8,32
   818                        	.member	buttonLeftDown,32,14,8,8
   819                        	.member	lastLeftDown,40,18,8,32
   820                        	.member	buttonRightDown,72,14,8,8
   821                        	.member	lastRightDown,80,18,8,32
   822                        	.member	buttonMiddleDown,112,14,8,8
   823                        	.member	lastMiddleDown,120,18,8,32
   824                        	.member	lastX,152,16,8,16
   825                        	.member	lastY,168,16,8,16
   826                        	.eos
   827                        	.stag	_fxos_eventmanager_vtable,192,71
   828                        	.member	EventQueue,0,138,8,32,5
   829                        	.member	Init,32,8833,8,32
   830                        	.member	Run,64,656,8,32
   831                        	.member	Configure,96,656,8,32
   832                        	.member	Query,128,656,8,32
   833                        	.member	Uninit,160,641,8,32
   834                        	.eos
   835                        	.stag	_k_clipboard_data,168,72
   836                        	.member	type,0,14,8,8
   837                        	.member	readable,8,110,8,0,16
   838                        	.member	data,136,129,8,32
   839                        	.eos
   840                        	.line	564
   841                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   842                        	.stag	_fx_spinner_ctx,48,73
   843                        	.member	index,0,5,8,16
   844                        	.member	spinner,16,142,8,32
   845                        	.eos
   846                        	.stag	_fx_console_ctx,1144,74
   847                        	.member	lineBufferIndex,0,5,8,16
   848                        	.member	lineBuffer,16,110,8,0,128
  Sat Jul 10 2021  1:15                                                Page 18


   849                        	.member	isShifted,1040,14,8,8
   850                        	.member	userData,1048,129,8,32
   851                        	.member	screenBuffer,1080,129,8,32
   852                        	.member	Reserved1,1112,129,8,32
   853                        	.eos
   854                        	.stag	_token,64,75
   855                        	.member	type,0,5,8,16
   856                        	.member	depth,16,16,8,16
   857                        	.member	text,32,142,8,32
   858                        	.eos
   859                        	.stag	_command_args,64,76
   860                        	.member	proc,0,656,8,32
   861                        	.member	tokens,32,138,8,32,3
   862                        	.eos
   863                        	.line	208
   864                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   865                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   866                        	.line	139
   867                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",24
   868                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   869                        	.line	114
   870                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   871                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   872                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
   873                        	.line	298
   874                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   875                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   876                        	.line	1010
   877                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   878                        	.stag	fake77_,4504,77
   879                        	.member	fs_type,0,14,8,8
   880                        	.member	pdrv,8,14,8,8
   881                        	.member	n_fats,16,14,8,8
   882                        	.member	wflag,24,14,8,8
   883                        	.member	fsi_flag,32,14,8,8
   884                        	.member	id,40,5,8,16
   885                        	.member	n_rootdir,56,5,8,16
   886                        	.member	csize,72,5,8,16
   887                        	.member	lfnbuf,88,144,8,32
   888                        	.member	last_clst,120,18,8,32
   889                        	.member	free_clst,152,18,8,32
   890                        	.member	n_fatent,184,18,8,32
   891                        	.member	fsize,216,18,8,32
   892                        	.member	volbase,248,18,8,32
   893                        	.member	fatbase,280,18,8,32
   894                        	.member	dirbase,312,18,8,32
   895                        	.member	database,344,18,8,32
   896                        	.member	winsect,376,18,8,32
  Sat Jul 10 2021  1:15                                                Page 19


   897                        	.member	win,408,110,8,0,512
   898                        	.eos
   899                        	.stag	fake78_,128,78
   900                        	.member	fs,0,138,8,32,77
   901                        	.member	id,32,5,8,16
   902                        	.member	attr,48,14,8,8
   903                        	.member	stat,56,14,8,8
   904                        	.member	sclust,64,18,8,32
   905                        	.member	objsize,96,18,8,32
   906                        	.eos
   907                        	.stag	fake79_,4400,79
   908                        	.member	obj,0,10,8,128,78
   909                        	.member	flag,128,14,8,8
   910                        	.member	err,136,14,8,8
   911                        	.member	fptr,144,18,8,32
   912                        	.member	clust,176,18,8,32
   913                        	.member	sect,208,18,8,32
   914                        	.member	dir_sect,240,18,8,32
   915                        	.member	dir_ptr,272,142,8,32
   916                        	.member	buf,304,110,8,0,512
   917                        	.eos
   918                        	.stag	fake80_,416,80
   919                        	.member	obj,0,10,8,128,78
   920                        	.member	dptr,128,18,8,32
   921                        	.member	clust,160,18,8,32
   922                        	.member	sect,192,18,8,32
   923                        	.member	dir,224,142,8,32
   924                        	.member	fn,256,110,8,0,12
   925                        	.member	blk_ofs,352,18,8,32
   926                        	.member	pat,384,142,8,32
   927                        	.eos
   928                        	.stag	fake81_,2224,81
   929                        	.member	fsize,0,18,8,32
   930                        	.member	fdate,32,5,8,16
   931                        	.member	ftime,48,5,8,16
   932                        	.member	fattrib,64,14,8,8
   933                        	.member	altname,72,110,8,0,13
   934                        	.member	fname,176,110,8,0,256
   935                        	.eos
   936                        	.stag	fake82_,80,82
   937                        	.member	fmt,0,14,8,8
   938                        	.member	n_fat,8,14,8,8
   939                        	.member	align,16,16,8,16
   940                        	.member	n_root,32,16,8,16
   941                        	.member	au_size,48,18,8,32
   942                        	.eos
   943                        	.line	429
   944                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",26
   945                        	.line	30
   946                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   947                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   948                        	.line	114
   949                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   950                        	.stag	_fx_api_call_table,8192,83
  Sat Jul 10 2021  1:15                                                Page 20


   951                        	.member	call_table,0,1121,8,32,256
   952                        	.eos
   953                        	.stag	_fx_zero_page,824,84
   954                        	.member	fxos_mouse_byte_0,0,14,8,8
   955                        	.member	fxos_mouse_byte_1,8,14,8,8
   956                        	.member	fxos_mouse_byte_2,16,14,8,8
   957                        	.member	fxos_mouse_byte_t,24,14,8,8
   958                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   959                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   960                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   961                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   962                        	.member	fxos_key_byte_0,64,14,8,8
   963                        	.member	fxos_key_byte_1,72,14,8,8
   964                        	.member	fxos_key_byte_2,80,14,8,8
   965                        	.member	fxos_mouse_ctl,88,14,8,8
   966                        	.member	fxos_mouse_index,96,14,8,8
   967                        	.member	fxos_mouse_status,104,14,8,8
   968                        	.member	fxos_mouse_dbg_1,112,18,8,32
   969                        	.member	fxos_mouse_dbg_2,144,18,8,32
   970                        	.member	fxos_mouse_dbg_3,176,18,8,32
   971                        	.member	fxos_vicky_byte_0,208,14,8,8
   972                        	.member	fxos_vicky_byte_1,216,14,8,8
   973                        	.member	fxos_vicky_byte_2,224,14,8,8
   974                        	.member	VersionMajor,232,16,8,16
   975                        	.member	VersionMinor,248,16,8,16
   976                        	.member	VersionRelease,264,16,8,16
   977                        	.member	topMemory,280,18,8,32
   978                        	.member	bottomMemory,312,18,8,32
   979                        	.member	availableMemory,344,18,8,32
   980                        	.member	availableMemoryK,376,18,8,32
   981                        	.member	availableHeapMemory,408,18,8,32
   982                        	.member	availableHeapMemoryK,440,18,8,32
   983                        	.member	fxos_console_row,472,16,8,16
   984                        	.member	fxos_console_col,488,16,8,16
   985                        	.member	executive,504,129,8,32
   986                        	.member	eventmanager,536,129,8,32
   987                        	.member	devicemanager,568,129,8,32
   988                        	.member	windowmanager,600,129,8,32
   989                        	.member	fxos_kernel_api,632,138,8,32,83
   990                        	.member	fxos_dos_api,664,138,8,32,83
   991                        	.member	fxos_gfx_api,696,138,8,32,83
   992                        	.member	fxos_gui_api,728,138,8,32,83
   993                        	.member	fxos_con_api,760,138,8,32,83
   994                        	.member	fxos_reserved_2_api,792,138,8,32,83
   995                        	.eos
   996                        	.stag	_fx_environment,96,85
   997                        	.member	variables,0,142,8,32
   998                        	.member	reserved1,32,5,8,16
   999                        	.member	reserved2,48,5,8,16
  1000                        	.member	reserved3,64,5,8,16
  1001                        	.member	reserved4,80,5,8,16
  1002                        	.eos
  1003                        	.stag	_debug_byte_bits,8,86
  1004                        	.member	bit7,0,14,17,1
  1005                        	.member	bit6,1,14,17,1
  1006                        	.member	bit5,2,14,17,1
  1007                        	.member	bit4,3,14,17,1
  1008                        	.member	bit3,4,14,17,1
  Sat Jul 10 2021  1:15                                                Page 21


  1009                        	.member	bit2,5,14,17,1
  1010                        	.member	bit1,6,14,17,1
  1011                        	.member	bit0,7,14,17,1
  1012                        	.eos
  1013                        	.stag	_k_segmentheader,160,87
  1014                        	.member	version_major,0,14,8,8
  1015                        	.member	version_minor,8,14,8,8
  1016                        	.member	length,16,5,8,16
  1017                        	.member	segment_start_addr,32,7,8,32
  1018                        	.member	segment_end_addr,64,7,8,32
  1019                        	.member	segment_size,96,7,8,32
  1020                        	.member	main_entry_addr,128,7,8,32
  1021                        	.eos
  1022                        	.stag	_fx_device_driver,776,88
  1023                        	.member	name,0,110,8,0,32
  1024                        	.member	version,256,110,8,0,16
  1025                        	.member	hmajor,384,110,8,0,8
  1026                        	.member	hminor,448,110,8,0,8
  1027                        	.member	type,512,14,8,8
  1028                        	.member	designation,520,110,8,0,6
  1029                        	.member	reserved_1,568,16,8,16
  1030                        	.member	f_driver_irq,584,129,8,32
  1031                        	.member	driver_context,616,129,8,32
  1032                        	.member	f_driver_load,648,129,8,32
  1033                        	.member	f_driver_read,680,129,8,32
  1034                        	.member	f_driver_write,712,129,8,32
  1035                        	.member	f_driver_unload,744,129,8,32
  1036                        	.eos
  1037                        	.stag	_fx_block_device_driver,808,89
  1038                        	.member	name,0,110,8,0,32
  1039                        	.member	version,256,110,8,0,16
  1040                        	.member	hmajor,384,110,8,0,8
  1041                        	.member	hminor,448,110,8,0,8
  1042                        	.member	type,512,14,8,8
  1043                        	.member	designation,520,110,8,0,6
  1044                        	.member	reserved_1,568,16,8,16
  1045                        	.member	f_driver_irq,584,129,8,32
  1046                        	.member	driver_context,616,129,8,32
  1047                        	.member	f_driver_load,648,129,8,32
  1048                        	.member	f_driver_read,680,129,8,32
  1049                        	.member	f_driver_write,712,129,8,32
  1050                        	.member	f_driver_unload,744,129,8,32
  1051                        	.member	f_driver_command,776,129,8,32
  1052                        	.eos
  1053                        	.line	400
  1054                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_integrity.c",1
  1055                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_integrity.c",27
  1056                        	.line	28
  1057                        	code
  1058                        	xdef	~~umm_integrity_check
  1059                        	func
  1060                        	.function	28
  1061                        ~~umm_integrity_check:
  1062                        	longa	on
  1063                        	longi	on
  1064 00:0000: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 22


  1065 00:0001: 38           	sec
  1066 00:0002: E9 16 00     	sbc	#L2
  1067 00:0005: 1B           	tcs
  1068 00:0006: 0B           	phd
  1069 00:0007: 5B           	tcd
  1070                        	.block	28
  1071             00000000   ok_1	set	0
  1072             00000002   prev_1	set	2
  1073             00000006   cur_1	set	6
  1074                        	.sym	ok,0,5,1,16
  1075                        	.sym	prev,2,18,1,32
  1076                        	.sym	cur,6,18,1,32
  1077 00:0008: A9 01 00     	lda	#$1
  1078 00:000B: 85 0D        	sta	<L3+ok_1
  1079                        	.line	35
  1080 00:000D: AD xx xx     	lda	|~~umm_heap
  1081 00:0010: 0D xx xx     	ora	|~~umm_heap+2
  1082 00:0013: F0 03        	beq	L5
  1083 00:0015: 82 04 00     	brl	L10001
  1084                        L5:
  1085                        	.line	36
  1086                        	.line	37
  1087 00:0018: 22 xx xx xx  	jsl	~~umm_init
  1088                        	.line	38
  1089                        L10001:
  1090                        	.line	41
  1091 00:001C: 64 0F        	stz	<L3+prev_1
  1092 00:001E: 64 11        	stz	<L3+prev_1+2
  1093                        	.line	42
  1094                        L10002:
  1095                        	.line	43
  1096                        	.line	44
  1097 00:0020: A5 0F        	lda	<L3+prev_1
  1098 00:0022: 85 01        	sta	<R0
  1099 00:0024: A5 11        	lda	<L3+prev_1+2
  1100 00:0026: 85 03        	sta	<R0+2
  1101 00:0028: 06 01        	asl	<R0
  1102 00:002A: 26 03        	rol	<R0+2
  1103 00:002C: 06 01        	asl	<R0
  1104 00:002E: 26 03        	rol	<R0+2
  1105 00:0030: 06 01        	asl	<R0
  1106 00:0032: 26 03        	rol	<R0+2
  1107 00:0034: 06 01        	asl	<R0
  1108 00:0036: 26 03        	rol	<R0+2
  1109 00:0038: 18           	clc
  1110 00:0039: A9 08 00     	lda	#$8
  1111 00:003C: 6D xx xx     	adc	|~~umm_heap
  1112 00:003F: 85 05        	sta	<R1
  1113 00:0041: A9 00 00     	lda	#$0
  1114 00:0044: 6D xx xx     	adc	|~~umm_heap+2
  1115 00:0047: 85 07        	sta	<R1+2
  1116 00:0049: 18           	clc
  1117 00:004A: A5 05        	lda	<R1
  1118 00:004C: 65 01        	adc	<R0
  1119 00:004E: 85 09        	sta	<R2
  1120 00:0050: A5 07        	lda	<R1+2
  1121 00:0052: 65 03        	adc	<R0+2
  1122 00:0054: 85 0B        	sta	<R2+2
  Sat Jul 10 2021  1:15                                                Page 23


  1123 00:0056: A7 09        	lda	[<R2]
  1124 00:0058: 85 13        	sta	<L3+cur_1
  1125 00:005A: A0 02 00     	ldy	#$2
  1126 00:005D: B7 09        	lda	[<R2],Y
  1127 00:005F: 85 15        	sta	<L3+cur_1+2
  1128                        	.line	47
  1129 00:0061: A5 13        	lda	<L3+cur_1
  1130 00:0063: CD xx xx     	cmp	|~~umm_numblocks
  1131 00:0066: A5 15        	lda	<L3+cur_1+2
  1132 00:0068: ED xx xx     	sbc	|~~umm_numblocks+2
  1133 00:006B: B0 03        	bcs	L6
  1134 00:006D: 82 13 00     	brl	L10004
  1135                        L6:
  1136                        	.line	48
  1137                        	.line	52
  1138 00:0070: D4 15        	pei	<L3+cur_1+2
  1139 00:0072: D4 13        	pei	<L3+cur_1
  1140 00:0074: F4 xx xx     	pea	#^L1
  1141 00:0077: F4 xx xx     	pea	#<L1
  1142 00:007A: 22 xx xx xx  	jsl	~~k_debug_long
  1143                        	.line	54
  1144 00:007E: 64 0D        	stz	<L3+ok_1
  1145                        	.line	55
  1146 00:0080: 82 63 03     	brl	L10005
  1147                        	.line	56
  1148                        L10004:
  1149                        	.line	57
  1150 00:0083: A5 13        	lda	<L3+cur_1
  1151 00:0085: 05 15        	ora	<L3+cur_1+2
  1152 00:0087: F0 03        	beq	L7
  1153 00:0089: 82 03 00     	brl	L10006
  1154                        L7:
  1155                        	.line	58
  1156                        	.line	60
  1157 00:008C: 82 A3 00     	brl	L10003
  1158                        	.line	61
  1159                        L10006:
  1160                        	.line	64
  1161 00:008F: A5 13        	lda	<L3+cur_1
  1162 00:0091: 85 01        	sta	<R0
  1163 00:0093: A5 15        	lda	<L3+cur_1+2
  1164 00:0095: 85 03        	sta	<R0+2
  1165 00:0097: 06 01        	asl	<R0
  1166 00:0099: 26 03        	rol	<R0+2
  1167 00:009B: 06 01        	asl	<R0
  1168 00:009D: 26 03        	rol	<R0+2
  1169 00:009F: 06 01        	asl	<R0
  1170 00:00A1: 26 03        	rol	<R0+2
  1171 00:00A3: 06 01        	asl	<R0
  1172 00:00A5: 26 03        	rol	<R0+2
  1173 00:00A7: 18           	clc
  1174 00:00A8: A9 0C 00     	lda	#$c
  1175 00:00AB: 6D xx xx     	adc	|~~umm_heap
  1176 00:00AE: 85 05        	sta	<R1
  1177 00:00B0: A9 00 00     	lda	#$0
  1178 00:00B3: 6D xx xx     	adc	|~~umm_heap+2
  1179 00:00B6: 85 07        	sta	<R1+2
  1180 00:00B8: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 24


  1181 00:00B9: A5 05        	lda	<R1
  1182 00:00BB: 65 01        	adc	<R0
  1183 00:00BD: 85 09        	sta	<R2
  1184 00:00BF: A5 07        	lda	<R1+2
  1185 00:00C1: 65 03        	adc	<R0+2
  1186 00:00C3: 85 0B        	sta	<R2+2
  1187 00:00C5: A7 09        	lda	[<R2]
  1188 00:00C7: C5 0F        	cmp	<L3+prev_1
  1189 00:00C9: D0 07        	bne	L8
  1190 00:00CB: A0 02 00     	ldy	#$2
  1191 00:00CE: B7 09        	lda	[<R2],Y
  1192 00:00D0: C5 11        	cmp	<L3+prev_1+2
  1193                        L8:
  1194 00:00D2: D0 03        	bne	L9
  1195 00:00D4: 82 13 00     	brl	L10007
  1196                        L9:
  1197                        	.line	65
  1198                        	.line	69
  1199 00:00D7: D4 15        	pei	<L3+cur_1+2
  1200 00:00D9: D4 13        	pei	<L3+cur_1
  1201 00:00DB: F4 xx xx     	pea	#^L1+48
  1202 00:00DE: F4 xx xx     	pea	#<L1+48
  1203 00:00E1: 22 xx xx xx  	jsl	~~k_debug_long
  1204                        	.line	70
  1205 00:00E5: 64 0D        	stz	<L3+ok_1
  1206                        	.line	71
  1207 00:00E7: 82 FC 02     	brl	L10005
  1208                        	.line	72
  1209                        L10007:
  1210                        	.line	74
  1211 00:00EA: A5 13        	lda	<L3+cur_1
  1212 00:00EC: 85 01        	sta	<R0
  1213 00:00EE: A5 15        	lda	<L3+cur_1+2
  1214 00:00F0: 85 03        	sta	<R0+2
  1215 00:00F2: 06 01        	asl	<R0
  1216 00:00F4: 26 03        	rol	<R0+2
  1217 00:00F6: 06 01        	asl	<R0
  1218 00:00F8: 26 03        	rol	<R0+2
  1219 00:00FA: 06 01        	asl	<R0
  1220 00:00FC: 26 03        	rol	<R0+2
  1221 00:00FE: 06 01        	asl	<R0
  1222 00:0100: 26 03        	rol	<R0+2
  1223 00:0102: 18           	clc
  1224 00:0103: A9 04 00     	lda	#$4
  1225 00:0106: 65 01        	adc	<R0
  1226 00:0108: 85 05        	sta	<R1
  1227 00:010A: A9 00 00     	lda	#$0
  1228 00:010D: 65 03        	adc	<R0+2
  1229 00:010F: 85 07        	sta	<R1+2
  1230 00:0111: 18           	clc
  1231 00:0112: AD xx xx     	lda	|~~umm_heap
  1232 00:0115: 65 05        	adc	<R1
  1233 00:0117: 85 01        	sta	<R0
  1234 00:0119: AD xx xx     	lda	|~~umm_heap+2
  1235 00:011C: 65 07        	adc	<R1+2
  1236 00:011E: 85 03        	sta	<R0+2
  1237 00:0120: A7 01        	lda	[<R0]
  1238 00:0122: 09 00 80     	ora	#<$8000
  Sat Jul 10 2021  1:15                                                Page 25


  1239 00:0125: 87 01        	sta	[<R0]
  1240                        	.line	76
  1241 00:0127: A5 13        	lda	<L3+cur_1
  1242 00:0129: 85 0F        	sta	<L3+prev_1
  1243 00:012B: A5 15        	lda	<L3+cur_1+2
  1244 00:012D: 85 11        	sta	<L3+prev_1+2
  1245                        	.line	77
  1246 00:012F: 82 EE FE     	brl	L10002
  1247                        L10003:
  1248                        	.line	80
  1249 00:0132: 64 0F        	stz	<L3+prev_1
  1250 00:0134: 64 11        	stz	<L3+prev_1+2
  1251                        	.line	81
  1252                        L10008:
  1253                        	.line	82
  1254                        	.line	83
  1255 00:0136: A5 0F        	lda	<L3+prev_1
  1256 00:0138: 85 01        	sta	<R0
  1257 00:013A: A5 11        	lda	<L3+prev_1+2
  1258 00:013C: 85 03        	sta	<R0+2
  1259 00:013E: 06 01        	asl	<R0
  1260 00:0140: 26 03        	rol	<R0+2
  1261 00:0142: 06 01        	asl	<R0
  1262 00:0144: 26 03        	rol	<R0+2
  1263 00:0146: 06 01        	asl	<R0
  1264 00:0148: 26 03        	rol	<R0+2
  1265 00:014A: 06 01        	asl	<R0
  1266 00:014C: 26 03        	rol	<R0+2
  1267 00:014E: 18           	clc
  1268 00:014F: AD xx xx     	lda	|~~umm_heap
  1269 00:0152: 65 01        	adc	<R0
  1270 00:0154: 85 05        	sta	<R1
  1271 00:0156: AD xx xx     	lda	|~~umm_heap+2
  1272 00:0159: 65 03        	adc	<R0+2
  1273 00:015B: 85 07        	sta	<R1+2
  1274 00:015D: A7 05        	lda	[<R1]
  1275 00:015F: 29 FF 7F     	and	#<$7fff
  1276 00:0162: 85 13        	sta	<L3+cur_1
  1277 00:0164: 64 15        	stz	<L3+cur_1+2
  1278                        	.line	86
  1279 00:0166: A5 13        	lda	<L3+cur_1
  1280 00:0168: CD xx xx     	cmp	|~~umm_numblocks
  1281 00:016B: A5 15        	lda	<L3+cur_1+2
  1282 00:016D: ED xx xx     	sbc	|~~umm_numblocks+2
  1283 00:0170: B0 03        	bcs	L10
  1284 00:0172: 82 48 00     	brl	L10010
  1285                        L10:
  1286                        	.line	87
  1287                        	.line	91
  1288 00:0175: D4 15        	pei	<L3+cur_1+2
  1289 00:0177: D4 13        	pei	<L3+cur_1
  1290 00:0179: F4 xx xx     	pea	#^L1+95
  1291 00:017C: F4 xx xx     	pea	#<L1+95
  1292 00:017F: 22 xx xx xx  	jsl	~~k_debug_long
  1293                        	.line	92
  1294 00:0183: A5 0F        	lda	<L3+prev_1
  1295 00:0185: 85 01        	sta	<R0
  1296 00:0187: A5 11        	lda	<L3+prev_1+2
  Sat Jul 10 2021  1:15                                                Page 26


  1297 00:0189: 85 03        	sta	<R0+2
  1298 00:018B: 06 01        	asl	<R0
  1299 00:018D: 26 03        	rol	<R0+2
  1300 00:018F: 06 01        	asl	<R0
  1301 00:0191: 26 03        	rol	<R0+2
  1302 00:0193: 06 01        	asl	<R0
  1303 00:0195: 26 03        	rol	<R0+2
  1304 00:0197: 06 01        	asl	<R0
  1305 00:0199: 26 03        	rol	<R0+2
  1306 00:019B: 18           	clc
  1307 00:019C: AD xx xx     	lda	|~~umm_heap
  1308 00:019F: 65 01        	adc	<R0
  1309 00:01A1: 85 05        	sta	<R1
  1310 00:01A3: AD xx xx     	lda	|~~umm_heap+2
  1311 00:01A6: 65 03        	adc	<R0+2
  1312 00:01A8: 85 07        	sta	<R1+2
  1313 00:01AA: D4 07        	pei	<R1+2
  1314 00:01AC: D4 05        	pei	<R1
  1315 00:01AE: F4 xx xx     	pea	#^L1+144
  1316 00:01B1: F4 xx xx     	pea	#<L1+144
  1317 00:01B4: 22 xx xx xx  	jsl	~~k_debug_pointer
  1318                        	.line	93
  1319 00:01B8: 64 0D        	stz	<L3+ok_1
  1320                        	.line	94
  1321 00:01BA: 82 29 02     	brl	L10005
  1322                        	.line	95
  1323                        L10010:
  1324                        	.line	96
  1325 00:01BD: A5 13        	lda	<L3+cur_1
  1326 00:01BF: 05 15        	ora	<L3+cur_1+2
  1327 00:01C1: F0 03        	beq	L11
  1328 00:01C3: 82 03 00     	brl	L10011
  1329                        L11:
  1330                        	.line	97
  1331                        	.line	99
  1332 00:01C6: 82 1D 02     	brl	L10009
  1333                        	.line	100
  1334                        L10011:
  1335                        	.line	103
  1336 00:01C9: A5 13        	lda	<L3+cur_1
  1337 00:01CB: 85 01        	sta	<R0
  1338 00:01CD: A5 15        	lda	<L3+cur_1+2
  1339 00:01CF: 85 03        	sta	<R0+2
  1340 00:01D1: 06 01        	asl	<R0
  1341 00:01D3: 26 03        	rol	<R0+2
  1342 00:01D5: 06 01        	asl	<R0
  1343 00:01D7: 26 03        	rol	<R0+2
  1344 00:01D9: 06 01        	asl	<R0
  1345 00:01DB: 26 03        	rol	<R0+2
  1346 00:01DD: 06 01        	asl	<R0
  1347 00:01DF: 26 03        	rol	<R0+2
  1348 00:01E1: 18           	clc
  1349 00:01E2: A9 04 00     	lda	#$4
  1350 00:01E5: 6D xx xx     	adc	|~~umm_heap
  1351 00:01E8: 85 05        	sta	<R1
  1352 00:01EA: A9 00 00     	lda	#$0
  1353 00:01ED: 6D xx xx     	adc	|~~umm_heap+2
  1354 00:01F0: 85 07        	sta	<R1+2
  Sat Jul 10 2021  1:15                                                Page 27


  1355 00:01F2: 18           	clc
  1356 00:01F3: A5 05        	lda	<R1
  1357 00:01F5: 65 01        	adc	<R0
  1358 00:01F7: 85 09        	sta	<R2
  1359 00:01F9: A5 07        	lda	<R1+2
  1360 00:01FB: 65 03        	adc	<R0+2
  1361 00:01FD: 85 0B        	sta	<R2+2
  1362 00:01FF: A7 09        	lda	[<R2]
  1363 00:0201: 29 00 80     	and	#<$8000
  1364 00:0204: 85 01        	sta	<R0
  1365 00:0206: 64 03        	stz	<R0+2
  1366 00:0208: A5 13        	lda	<L3+cur_1
  1367 00:020A: 85 05        	sta	<R1
  1368 00:020C: A5 15        	lda	<L3+cur_1+2
  1369 00:020E: 85 07        	sta	<R1+2
  1370 00:0210: 06 05        	asl	<R1
  1371 00:0212: 26 07        	rol	<R1+2
  1372 00:0214: 06 05        	asl	<R1
  1373 00:0216: 26 07        	rol	<R1+2
  1374 00:0218: 06 05        	asl	<R1
  1375 00:021A: 26 07        	rol	<R1+2
  1376 00:021C: 06 05        	asl	<R1
  1377 00:021E: 26 07        	rol	<R1+2
  1378 00:0220: 18           	clc
  1379 00:0221: AD xx xx     	lda	|~~umm_heap
  1380 00:0224: 65 05        	adc	<R1
  1381 00:0226: 85 09        	sta	<R2
  1382 00:0228: AD xx xx     	lda	|~~umm_heap+2
  1383 00:022B: 65 07        	adc	<R1+2
  1384 00:022D: 85 0B        	sta	<R2+2
  1385 00:022F: A7 09        	lda	[<R2]
  1386 00:0231: 29 00 80     	and	#<$8000
  1387 00:0234: 85 05        	sta	<R1
  1388 00:0236: 64 07        	stz	<R1+2
  1389 00:0238: A5 05        	lda	<R1
  1390 00:023A: C5 01        	cmp	<R0
  1391 00:023C: D0 04        	bne	L12
  1392 00:023E: A5 07        	lda	<R1+2
  1393 00:0240: C5 03        	cmp	<R0+2
  1394                        L12:
  1395 00:0242: D0 03        	bne	L13
  1396 00:0244: 82 3A 00     	brl	L10012
  1397                        L13:
  1398                        	.line	105
  1399                        	.line	111
  1400 00:0247: A5 13        	lda	<L3+cur_1
  1401 00:0249: 85 01        	sta	<R0
  1402 00:024B: A5 15        	lda	<L3+cur_1+2
  1403 00:024D: 85 03        	sta	<R0+2
  1404 00:024F: 06 01        	asl	<R0
  1405 00:0251: 26 03        	rol	<R0+2
  1406 00:0253: 06 01        	asl	<R0
  1407 00:0255: 26 03        	rol	<R0+2
  1408 00:0257: 06 01        	asl	<R0
  1409 00:0259: 26 03        	rol	<R0+2
  1410 00:025B: 06 01        	asl	<R0
  1411 00:025D: 26 03        	rol	<R0+2
  1412 00:025F: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 28


  1413 00:0260: AD xx xx     	lda	|~~umm_heap
  1414 00:0263: 65 01        	adc	<R0
  1415 00:0265: 85 05        	sta	<R1
  1416 00:0267: AD xx xx     	lda	|~~umm_heap+2
  1417 00:026A: 65 03        	adc	<R0+2
  1418 00:026C: 85 07        	sta	<R1+2
  1419 00:026E: D4 07        	pei	<R1+2
  1420 00:0270: D4 05        	pei	<R1
  1421 00:0272: F4 xx xx     	pea	#^L1+193
  1422 00:0275: F4 xx xx     	pea	#<L1+193
  1423 00:0278: 22 xx xx xx  	jsl	~~k_debug_pointer
  1424                        	.line	112
  1425 00:027C: 64 0D        	stz	<L3+ok_1
  1426                        	.line	113
  1427 00:027E: 82 65 01     	brl	L10005
  1428                        	.line	114
  1429                        L10012:
  1430                        	.line	117
  1431 00:0281: A5 0F        	lda	<L3+prev_1
  1432 00:0283: C5 13        	cmp	<L3+cur_1
  1433 00:0285: A5 11        	lda	<L3+prev_1+2
  1434 00:0287: E5 15        	sbc	<L3+cur_1+2
  1435 00:0289: B0 03        	bcs	L14
  1436 00:028B: 82 56 00     	brl	L10013
  1437                        L14:
  1438                        	.line	118
  1439                        	.line	122
  1440 00:028E: D4 15        	pei	<L3+cur_1+2
  1441 00:0290: D4 13        	pei	<L3+cur_1
  1442 00:0292: F4 xx xx     	pea	#^L1+236
  1443 00:0295: F4 xx xx     	pea	#<L1+236
  1444 00:0298: 22 xx xx xx  	jsl	~~k_debug_long
  1445                        	.line	123
  1446 00:029C: D4 11        	pei	<L3+prev_1+2
  1447 00:029E: D4 0F        	pei	<L3+prev_1
  1448 00:02A0: F4 xx xx     	pea	#^L1+294
  1449 00:02A3: F4 xx xx     	pea	#<L1+294
  1450 00:02A6: 22 xx xx xx  	jsl	~~k_debug_long
  1451                        	.line	124
  1452 00:02AA: A5 0F        	lda	<L3+prev_1
  1453 00:02AC: 85 01        	sta	<R0
  1454 00:02AE: A5 11        	lda	<L3+prev_1+2
  1455 00:02B0: 85 03        	sta	<R0+2
  1456 00:02B2: 06 01        	asl	<R0
  1457 00:02B4: 26 03        	rol	<R0+2
  1458 00:02B6: 06 01        	asl	<R0
  1459 00:02B8: 26 03        	rol	<R0+2
  1460 00:02BA: 06 01        	asl	<R0
  1461 00:02BC: 26 03        	rol	<R0+2
  1462 00:02BE: 06 01        	asl	<R0
  1463 00:02C0: 26 03        	rol	<R0+2
  1464 00:02C2: 18           	clc
  1465 00:02C3: AD xx xx     	lda	|~~umm_heap
  1466 00:02C6: 65 01        	adc	<R0
  1467 00:02C8: 85 05        	sta	<R1
  1468 00:02CA: AD xx xx     	lda	|~~umm_heap+2
  1469 00:02CD: 65 03        	adc	<R0+2
  1470 00:02CF: 85 07        	sta	<R1+2
  Sat Jul 10 2021  1:15                                                Page 29


  1471 00:02D1: D4 07        	pei	<R1+2
  1472 00:02D3: D4 05        	pei	<R1
  1473 00:02D5: F4 xx xx     	pea	#^L1+352
  1474 00:02D8: F4 xx xx     	pea	#<L1+352
  1475 00:02DB: 22 xx xx xx  	jsl	~~k_debug_pointer
  1476                        	.line	125
  1477 00:02DF: 64 0D        	stz	<L3+ok_1
  1478                        	.line	126
  1479 00:02E1: 82 02 01     	brl	L10005
  1480                        	.line	127
  1481                        L10013:
  1482                        	.line	130
  1483 00:02E4: A5 13        	lda	<L3+cur_1
  1484 00:02E6: 85 01        	sta	<R0
  1485 00:02E8: A5 15        	lda	<L3+cur_1+2
  1486 00:02EA: 85 03        	sta	<R0+2
  1487 00:02EC: 06 01        	asl	<R0
  1488 00:02EE: 26 03        	rol	<R0+2
  1489 00:02F0: 06 01        	asl	<R0
  1490 00:02F2: 26 03        	rol	<R0+2
  1491 00:02F4: 06 01        	asl	<R0
  1492 00:02F6: 26 03        	rol	<R0+2
  1493 00:02F8: 06 01        	asl	<R0
  1494 00:02FA: 26 03        	rol	<R0+2
  1495 00:02FC: 18           	clc
  1496 00:02FD: A9 04 00     	lda	#$4
  1497 00:0300: 65 01        	adc	<R0
  1498 00:0302: 85 05        	sta	<R1
  1499 00:0304: A9 00 00     	lda	#$0
  1500 00:0307: 65 03        	adc	<R0+2
  1501 00:0309: 85 07        	sta	<R1+2
  1502 00:030B: 18           	clc
  1503 00:030C: AD xx xx     	lda	|~~umm_heap
  1504 00:030F: 65 05        	adc	<R1
  1505 00:0311: 85 01        	sta	<R0
  1506 00:0313: AD xx xx     	lda	|~~umm_heap+2
  1507 00:0316: 65 07        	adc	<R1+2
  1508 00:0318: 85 03        	sta	<R0+2
  1509 00:031A: A7 01        	lda	[<R0]
  1510 00:031C: 29 FF 7F     	and	#<$7fff
  1511 00:031F: 87 01        	sta	[<R0]
  1512 00:0321: A9 00 00     	lda	#$0
  1513 00:0324: A0 02 00     	ldy	#$2
  1514 00:0327: 97 01        	sta	[<R0],Y
  1515                        	.line	133
  1516 00:0329: A5 13        	lda	<L3+cur_1
  1517 00:032B: 85 01        	sta	<R0
  1518 00:032D: A5 15        	lda	<L3+cur_1+2
  1519 00:032F: 85 03        	sta	<R0+2
  1520 00:0331: 06 01        	asl	<R0
  1521 00:0333: 26 03        	rol	<R0+2
  1522 00:0335: 06 01        	asl	<R0
  1523 00:0337: 26 03        	rol	<R0+2
  1524 00:0339: 06 01        	asl	<R0
  1525 00:033B: 26 03        	rol	<R0+2
  1526 00:033D: 06 01        	asl	<R0
  1527 00:033F: 26 03        	rol	<R0+2
  1528 00:0341: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 30


  1529 00:0342: A9 04 00     	lda	#$4
  1530 00:0345: 6D xx xx     	adc	|~~umm_heap
  1531 00:0348: 85 05        	sta	<R1
  1532 00:034A: A9 00 00     	lda	#$0
  1533 00:034D: 6D xx xx     	adc	|~~umm_heap+2
  1534 00:0350: 85 07        	sta	<R1+2
  1535 00:0352: 18           	clc
  1536 00:0353: A5 05        	lda	<R1
  1537 00:0355: 65 01        	adc	<R0
  1538 00:0357: 85 09        	sta	<R2
  1539 00:0359: A5 07        	lda	<R1+2
  1540 00:035B: 65 03        	adc	<R0+2
  1541 00:035D: 85 0B        	sta	<R2+2
  1542 00:035F: A7 09        	lda	[<R2]
  1543 00:0361: C5 0F        	cmp	<L3+prev_1
  1544 00:0363: D0 07        	bne	L15
  1545 00:0365: A0 02 00     	ldy	#$2
  1546 00:0368: B7 09        	lda	[<R2],Y
  1547 00:036A: C5 11        	cmp	<L3+prev_1+2
  1548                        L15:
  1549 00:036C: D0 03        	bne	L16
  1550 00:036E: 82 6A 00     	brl	L10014
  1551                        L16:
  1552                        	.line	134
  1553                        	.line	138
  1554 00:0371: D4 11        	pei	<L3+prev_1+2
  1555 00:0373: D4 0F        	pei	<L3+prev_1
  1556 00:0375: F4 xx xx     	pea	#^L1+410
  1557 00:0378: F4 xx xx     	pea	#<L1+410
  1558 00:037B: 22 xx xx xx  	jsl	~~k_debug_long
  1559                        	.line	139
  1560 00:037F: D4 15        	pei	<L3+cur_1+2
  1561 00:0381: D4 13        	pei	<L3+cur_1
  1562 00:0383: F4 xx xx     	pea	#^L1+464
  1563 00:0386: F4 xx xx     	pea	#<L1+464
  1564 00:0389: 22 xx xx xx  	jsl	~~k_debug_long
  1565                        	.line	140
  1566 00:038D: A5 13        	lda	<L3+cur_1
  1567 00:038F: 85 01        	sta	<R0
  1568 00:0391: A5 15        	lda	<L3+cur_1+2
  1569 00:0393: 85 03        	sta	<R0+2
  1570 00:0395: 06 01        	asl	<R0
  1571 00:0397: 26 03        	rol	<R0+2
  1572 00:0399: 06 01        	asl	<R0
  1573 00:039B: 26 03        	rol	<R0+2
  1574 00:039D: 06 01        	asl	<R0
  1575 00:039F: 26 03        	rol	<R0+2
  1576 00:03A1: 06 01        	asl	<R0
  1577 00:03A3: 26 03        	rol	<R0+2
  1578 00:03A5: 18           	clc
  1579 00:03A6: A9 04 00     	lda	#$4
  1580 00:03A9: 6D xx xx     	adc	|~~umm_heap
  1581 00:03AC: 85 05        	sta	<R1
  1582 00:03AE: A9 00 00     	lda	#$0
  1583 00:03B1: 6D xx xx     	adc	|~~umm_heap+2
  1584 00:03B4: 85 07        	sta	<R1+2
  1585 00:03B6: 18           	clc
  1586 00:03B7: A5 05        	lda	<R1
  Sat Jul 10 2021  1:15                                                Page 31


  1587 00:03B9: 65 01        	adc	<R0
  1588 00:03BB: 85 09        	sta	<R2
  1589 00:03BD: A5 07        	lda	<R1+2
  1590 00:03BF: 65 03        	adc	<R0+2
  1591 00:03C1: 85 0B        	sta	<R2+2
  1592 00:03C3: A0 02 00     	ldy	#$2
  1593 00:03C6: B7 09        	lda	[<R2],Y
  1594 00:03C8: 48           	pha
  1595 00:03C9: A7 09        	lda	[<R2]
  1596 00:03CB: 48           	pha
  1597 00:03CC: F4 xx xx     	pea	#^L1+518
  1598 00:03CF: F4 xx xx     	pea	#<L1+518
  1599 00:03D2: 22 xx xx xx  	jsl	~~k_debug_long
  1600                        	.line	141
  1601 00:03D6: 64 0D        	stz	<L3+ok_1
  1602                        	.line	142
  1603 00:03D8: 82 0B 00     	brl	L10005
  1604                        	.line	143
  1605                        L10014:
  1606                        	.line	145
  1607 00:03DB: A5 13        	lda	<L3+cur_1
  1608 00:03DD: 85 0F        	sta	<L3+prev_1
  1609 00:03DF: A5 15        	lda	<L3+cur_1+2
  1610 00:03E1: 85 11        	sta	<L3+prev_1+2
  1611                        	.line	146
  1612 00:03E3: 82 50 FD     	brl	L10008
  1613                        L10009:
  1614                        	.line	148
  1615                        L10005:
  1616                        	.line	149
  1617 00:03E6: A5 0D        	lda	<L3+ok_1
  1618 00:03E8: F0 03        	beq	L17
  1619 00:03EA: 82 0A 00     	brl	L10015
  1620                        L17:
  1621                        	.line	150
  1622                        	.line	151
  1623 00:03ED: F4 xx xx     	pea	#^L1+572
  1624 00:03F0: F4 xx xx     	pea	#<L1+572
  1625 00:03F3: 22 xx xx xx  	jsl	~~k_debug_string
  1626                        	.line	152
  1627                        L10015:
  1628                        	.line	153
  1629 00:03F7: A5 0D        	lda	<L3+ok_1
  1630                        L18:
  1631 00:03F9: A8           	tay
  1632 00:03FA: 2B           	pld
  1633 00:03FB: 3B           	tsc
  1634 00:03FC: 18           	clc
  1635 00:03FD: 69 16 00     	adc	#L2
  1636 00:0400: 1B           	tcs
  1637 00:0401: 98           	tya
  1638 00:0402: 6B           	rtl
  1639                        	.line	154
  1640                        	.endblock	154
  1641             00000016   L2	equ	22
  1642             0000000D   L3	equ	13
  1643                        	ends
  1644                        	efunc
  Sat Jul 10 2021  1:15                                                Page 32


  1645                        	.endfunc	154,13,22
  1646                        	.line	154
  1647                        	data
  1648                        L1:
  1649 00:0008: 68 65 61 70  	db	$68,$65,$61,$70,$20,$69,$6E,$74,$65,$67,
                    $72,$69,$74,$79,$20
       00:000C: 20 69 6E 74 
       00:0010: 65 67 72 69 
       00:0014: 74 79 20 
  1650 00:0017: 62 72 6F 6B  	db	$62,$72,$6F,$6B,$65,$6E,$3A,$20,$74,$6F,
                    $6F,$20,$6C,$61,$72
       00:001B: 65 6E 3A 20 
       00:001F: 74 6F 6F 20 
       00:0023: 6C 61 72 
  1651 00:0026: 67 65 20 6E  	db	$67,$65,$20,$6E,$65,$78,$74,$20,$66,$72,
                    $65,$65,$20,$6E,$75
       00:002A: 65 78 74 20 
       00:002E: 66 72 65 65 
       00:0032: 20 6E 75 
  1652 00:0035: 6D 3A 00 68  	db	$6D,$3A,$00,$68,$65,$61,$70,$20,$69,$6E,
                    $74,$65,$67,$72,$69
       00:0039: 65 61 70 20 
       00:003D: 69 6E 74 65 
       00:0041: 67 72 69 
  1653 00:0044: 74 79 20 62  	db	$74,$79,$20,$62,$72,$6F,$6B,$65,$6E,$3A,
                    $20,$66,$72,$65,$65
       00:0048: 72 6F 6B 65 
       00:004C: 6E 3A 20 66 
       00:0050: 72 65 65 
  1654 00:0053: 20 6C 69 6E  	db	$20,$6C,$69,$6E,$6B,$73,$20,$64,$6F,$6E,
                    $27,$74,$20,$6D,$61
       00:0057: 6B 73 20 64 
       00:005B: 6F 6E 27 74 
       00:005F: 20 6D 61 
  1655 00:0062: 74 63 68 3A  	db	$74,$63,$68,$3A,$00,$68,$65,$61,$70,$20,
                    $69,$6E,$74,$65,$67
       00:0066: 00 68 65 61 
       00:006A: 70 20 69 6E 
       00:006E: 74 65 67 
  1656 00:0071: 72 69 74 79  	db	$72,$69,$74,$79,$20,$62,$72,$6F,$6B,$65,
                    $6E,$3A,$20,$74,$6F
       00:0075: 20 62 72 6F 
       00:0079: 6B 65 6E 3A 
       00:007D: 20 74 6F 
  1657 00:0080: 6F 20 6C 61  	db	$6F,$20,$6C,$61,$72,$67,$65,$20,$6E,$65,
                    $78,$74,$20,$62,$6C
       00:0084: 72 67 65 20 
       00:0088: 6E 65 78 74 
       00:008C: 20 62 6C 
  1658 00:008F: 6F 63 6B 20  	db	$6F,$63,$6B,$20,$6E,$75,$6D,$3A,$00,$20,
                    $20,$20,$20,$20,$20
       00:0093: 6E 75 6D 3A 
       00:0097: 00 20 20 20 
       00:009B: 20 20 20 
  1659 00:009E: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:00A2: 20 20 20 20 
       00:00A6: 20 20 20 20 
  Sat Jul 10 2021  1:15                                                Page 33


       00:00AA: 20 20 20 
  1660 00:00AD: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:00B1: 20 20 20 20 
       00:00B5: 20 20 20 20 
       00:00B9: 20 20 20 
  1661 00:00BC: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$41,$44,$44,
                    $52,$3A,$00,$68,$65
       00:00C0: 20 20 20 41 
       00:00C4: 44 44 52 3A 
       00:00C8: 00 68 65 
  1662 00:00CB: 61 70 20 69  	db	$61,$70,$20,$69,$6E,$74,$65,$67,$72,$69,
                    $74,$79,$20,$62,$72
       00:00CF: 6E 74 65 67 
       00:00D3: 72 69 74 79 
       00:00D7: 20 62 72 
  1663 00:00DA: 6F 6B 65 6E  	db	$6F,$6B,$65,$6E,$3A,$20,$6D,$61,$73,$6B,
                    $20,$77,$72,$6F,$6E
       00:00DE: 3A 20 6D 61 
       00:00E2: 73 6B 20 77 
       00:00E6: 72 6F 6E 
  1664 00:00E9: 67 20 61 74  	db	$67,$20,$61,$74,$20,$61,$64,$64,$72,$3A,
                    $00,$68,$65,$61,$70
       00:00ED: 20 61 64 64 
       00:00F1: 72 3A 00 68 
       00:00F5: 65 61 70 
  1665 00:00F8: 20 69 6E 74  	db	$20,$69,$6E,$74,$65,$67,$72,$69,$74,$79,
                    $20,$62,$72,$6F,$6B
       00:00FC: 65 67 72 69 
       00:0100: 74 79 20 62 
       00:0104: 72 6F 6B 
  1666 00:0107: 65 6E 3A 6E  	db	$65,$6E,$3A,$6E,$65,$78,$74,$20,$62,$6C,
                    $6F,$63,$6B,$20,$69
       00:010B: 65 78 74 20 
       00:010F: 62 6C 6F 63 
       00:0113: 6B 20 69 
  1667 00:0116: 73 20 62 65  	db	$73,$20,$62,$65,$66,$6F,$72,$65,$20,$70,
                    $72,$65,$76,$20,$74
       00:011A: 66 6F 72 65 
       00:011E: 20 70 72 65 
       00:0122: 76 20 74 
  1668 00:0125: 68 69 73 20  	db	$68,$69,$73,$20,$6F,$6E,$65,$3A,$00,$20,
                    $20,$20,$20,$20,$20
       00:0129: 6F 6E 65 3A 
       00:012D: 00 20 20 20 
       00:0131: 20 20 20 
  1669 00:0134: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0138: 20 20 20 20 
       00:013C: 20 20 20 20 
       00:0140: 20 20 20 
  1670 00:0143: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0147: 20 20 20 20 
       00:014B: 20 20 20 20 
       00:014F: 20 20 20 
  1671 00:0152: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
  Sat Jul 10 2021  1:15                                                Page 34


       00:0156: 20 20 20 20 
       00:015A: 20 20 20 20 
       00:015E: 20 20 20 
  1672 00:0161: 20 50 52 45  	db	$20,$50,$52,$45,$56,$3A,$00,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0165: 56 3A 00 20 
       00:0169: 20 20 20 20 
       00:016D: 20 20 20 
  1673 00:0170: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0174: 20 20 20 20 
       00:0178: 20 20 20 20 
       00:017C: 20 20 20 
  1674 00:017F: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0183: 20 20 20 20 
       00:0187: 20 20 20 20 
       00:018B: 20 20 20 
  1675 00:018E: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$41
       00:0192: 20 20 20 20 
       00:0196: 20 20 20 20 
       00:019A: 20 20 41 
  1676 00:019D: 44 44 52 3A  	db	$44,$44,$52,$3A,$00,$68,$65,$61,$70,$20,
                    $69,$6E,$74,$65,$67
       00:01A1: 00 68 65 61 
       00:01A5: 70 20 69 6E 
       00:01A9: 74 65 67 
  1677 00:01AC: 72 69 74 79  	db	$72,$69,$74,$79,$20,$62,$72,$6F,$6B,$65,
                    $6E,$3A,$20,$62,$6C
       00:01B0: 20 62 72 6F 
       00:01B4: 6B 65 6E 3A 
       00:01B8: 20 62 6C 
  1678 00:01BB: 6F 63 6B 20  	db	$6F,$63,$6B,$20,$6C,$69,$6E,$6B,$73,$20,
                    $64,$6F,$6E,$27,$74
       00:01BF: 6C 69 6E 6B 
       00:01C3: 73 20 64 6F 
       00:01C7: 6E 27 74 
  1679 00:01CA: 20 6D 61 74  	db	$20,$6D,$61,$74,$63,$68,$20,$70,$72,$65,
                    $76,$3A,$20,$00,$20
       00:01CE: 63 68 20 70 
       00:01D2: 72 65 76 3A 
       00:01D6: 20 00 20 
  1680 00:01D9: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:01DD: 20 20 20 20 
       00:01E1: 20 20 20 20 
       00:01E5: 20 20 20 
  1681 00:01E8: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:01EC: 20 20 20 20 
       00:01F0: 20 20 20 20 
       00:01F4: 20 20 20 
  1682 00:01F7: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:01FB: 20 20 20 20 
       00:01FF: 20 20 20 20 
       00:0203: 20 20 20 
  Sat Jul 10 2021  1:15                                                Page 35


  1683 00:0206: 20 20 63 75  	db	$20,$20,$63,$75,$72,$3A,$20,$00,$20,$20,
                    $20,$20,$20,$20,$20
       00:020A: 72 3A 20 00 
       00:020E: 20 20 20 20 
       00:0212: 20 20 20 
  1684 00:0215: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0219: 20 20 20 20 
       00:021D: 20 20 20 20 
       00:0221: 20 20 20 
  1685 00:0224: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$55
       00:0228: 20 20 20 20 
       00:022C: 20 20 20 20 
       00:0230: 20 20 55 
  1686 00:0233: 4D 4D 5F 50  	db	$4D,$4D,$5F,$50,$42,$4C,$4F,$43,$4B,$28,
                    $63,$75,$72,$29,$3A
       00:0237: 42 4C 4F 43 
       00:023B: 4B 28 63 75 
       00:023F: 72 29 3A 
  1687 00:0242: 20 00 48 65  	db	$20,$00,$48,$65,$61,$70,$20,$43,$6F,$72,
                    $72,$75,$70,$74,$69
       00:0246: 61 70 20 43 
       00:024A: 6F 72 72 75 
       00:024E: 70 74 69 
  1688 00:0251: 6F 6E 21 0D  	db	$6F,$6E,$21,$0D,$0A,$00
       00:0255: 0A 00 
  1689 00:0257:              	ends
  1690                        	.line	158
  1691                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",96
  1692                        ;#include "umm_poison.c"
  1693                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_poison.c",0
  1694                        	.line	9
  1695                        	.line	10
  1696                        	code
  1697                        	func
  1698                        	.function	10
  1699                        ~~poison_size:
  1700                        	longa	on
  1701                        	longi	on
  1702 00:0403: 3B           	tsc
  1703 00:0404: 38           	sec
  1704 00:0405: E9 00 00     	sbc	#L20
  1705 00:0408: 1B           	tcs
  1706 00:0409: 0B           	phd
  1707 00:040A: 5B           	tcd
  1708             00000004   s_0	set	4
  1709                        	.block	10
  1710                        	.sym	s,4,16,6,16
  1711                        	.line	11
  1712 00:040B: A5 04        	lda	<L20+s_0
  1713 00:040D: D0 03        	bne	L24
  1714 00:040F: 82 05 00     	brl	L23
  1715                        L24:
  1716 00:0412: A9 0A 00     	lda	#$a
  1717 00:0415: 80 03        	bra	L25
  Sat Jul 10 2021  1:15                                                Page 36


  1718                        L23:
  1719 00:0417: A9 00 00     	lda	#$0
  1720                        L25:
  1721                        L26:
  1722 00:041A: A8           	tay
  1723 00:041B: A5 02        	lda	<L20+2
  1724 00:041D: 85 04        	sta	<L20+2+2
  1725 00:041F: A5 01        	lda	<L20+1
  1726 00:0421: 85 03        	sta	<L20+1+2
  1727 00:0423: 2B           	pld
  1728 00:0424: 3B           	tsc
  1729 00:0425: 18           	clc
  1730 00:0426: 69 02 00     	adc	#L20+2
  1731 00:0429: 1B           	tcs
  1732 00:042A: 98           	tya
  1733 00:042B: 6B           	rtl
  1734                        	.line	15
  1735                        	.endblock	15
  1736             00000000   L20	equ	0
  1737             00000001   L21	equ	1
  1738                        	ends
  1739                        	efunc
  1740                        	.endfunc	15,1,0
  1741                        	.line	15
  1742                        	.line	20
  1743                        	.line	21
  1744                        	code
  1745                        	func
  1746                        	.function	21
  1747                        ~~dump_mem:
  1748                        	longa	on
  1749                        	longi	on
  1750 00:042C: 3B           	tsc
  1751 00:042D: 38           	sec
  1752 00:042E: E9 04 00     	sbc	#L27
  1753 00:0431: 1B           	tcs
  1754 00:0432: 0B           	phd
  1755 00:0433: 5B           	tcd
  1756             00000004   ptr_0	set	4
  1757             00000008   len_0	set	8
  1758                        	.block	21
  1759                        	.sym	ptr,4,142,6,32
  1760                        	.sym	len,8,16,6,16
  1761                        	.line	22
  1762                        L10016:
  1763 00:0434: A5 0C        	lda	<L27+len_0
  1764 00:0436: 85 01        	sta	<R0
  1765 00:0438: C6 0C        	dec	<L27+len_0
  1766 00:043A: A5 01        	lda	<R0
  1767 00:043C: D0 03        	bne	L30
  1768 00:043E: 82 03 00     	brl	L10017
  1769                        L30:
  1770                        	.line	23
  1771                        	.line	25
  1772 00:0441: 82 F0 FF     	brl	L10016
  1773                        L10017:
  1774                        	.line	26
  1775                        L31:
  Sat Jul 10 2021  1:15                                                Page 37


  1776 00:0444: A5 06        	lda	<L27+2
  1777 00:0446: 85 0C        	sta	<L27+2+6
  1778 00:0448: A5 05        	lda	<L27+1
  1779 00:044A: 85 0B        	sta	<L27+1+6
  1780 00:044C: 2B           	pld
  1781 00:044D: 3B           	tsc
  1782 00:044E: 18           	clc
  1783 00:044F: 69 0A 00     	adc	#L27+6
  1784 00:0452: 1B           	tcs
  1785 00:0453: 6B           	rtl
  1786                        	.endblock	26
  1787             00000004   L27	equ	4
  1788             00000005   L28	equ	5
  1789                        	ends
  1790                        	efunc
  1791                        	.endfunc	26,5,4
  1792                        	.line	26
  1793                        	.line	31
  1794                        	.line	32
  1795                        	code
  1796                        	func
  1797                        	.function	32
  1798                        ~~put_poison:
  1799                        	longa	on
  1800                        	longi	on
  1801 00:0454: 3B           	tsc
  1802 00:0455: 38           	sec
  1803 00:0456: E9 00 00     	sbc	#L32
  1804 00:0459: 1B           	tcs
  1805 00:045A: 0B           	phd
  1806 00:045B: 5B           	tcd
  1807             00000004   ptr_0	set	4
  1808             00000008   poison_size_0	set	8
  1809                        	.block	32
  1810                        	.sym	ptr,4,142,6,32
  1811                        	.sym	poison_size,8,16,6,16
  1812                        	.line	33
  1813 00:045C: D4 08        	pei	<L32+poison_size_0
  1814 00:045E: F4 A5 00     	pea	#<$a5
  1815 00:0461: D4 06        	pei	<L32+ptr_0+2
  1816 00:0463: D4 04        	pei	<L32+ptr_0
  1817 00:0465: 22 xx xx xx  	jsl	~~memset
  1818                        	.line	34
  1819                        L35:
  1820 00:0469: A5 02        	lda	<L32+2
  1821 00:046B: 85 08        	sta	<L32+2+6
  1822 00:046D: A5 01        	lda	<L32+1
  1823 00:046F: 85 07        	sta	<L32+1+6
  1824 00:0471: 2B           	pld
  1825 00:0472: 3B           	tsc
  1826 00:0473: 18           	clc
  1827 00:0474: 69 06 00     	adc	#L32+6
  1828 00:0477: 1B           	tcs
  1829 00:0478: 6B           	rtl
  1830                        	.endblock	34
  1831             00000000   L32	equ	0
  1832             00000001   L33	equ	1
  1833                        	ends
  Sat Jul 10 2021  1:15                                                Page 38


  1834                        	efunc
  1835                        	.endfunc	34,1,0
  1836                        	.line	34
  1837                        	.line	43
  1838                        	.line	45
  1839                        	code
  1840                        	func
  1841                        	.function	45
  1842                        ~~check_poison:
  1843                        	longa	on
  1844                        	longi	on
  1845 00:0479: 3B           	tsc
  1846 00:047A: 38           	sec
  1847 00:047B: E9 04 00     	sbc	#L36
  1848 00:047E: 1B           	tcs
  1849 00:047F: 0B           	phd
  1850 00:0480: 5B           	tcd
  1851             00000004   ptr_0	set	4
  1852             00000008   poison_size_0	set	8
  1853             0000000A   where_0	set	10
  1854                        	.block	45
  1855             00000000   i_1	set	0
  1856             00000002   ok_1	set	2
  1857                        	.sym	i,0,16,1,16
  1858                        	.sym	ok,2,5,1,16
  1859                        	.sym	ptr,4,142,6,32
  1860                        	.sym	poison_size,8,16,6,16
  1861                        	.sym	where,10,142,6,32
  1862 00:0481: A9 01 00     	lda	#$1
  1863 00:0484: 85 03        	sta	<L37+ok_1
  1864                        	.line	49
  1865 00:0486: 64 01        	stz	<L37+i_1
  1866 00:0488: 82 16 00     	brl	L10021
  1867                        L10020:
  1868                        	.line	50
  1869                        	.line	51
  1870 00:048B: E2 20        	sep	#$20
  1871                        	longa	off
  1872 00:048D: A4 01        	ldy	<L37+i_1
  1873 00:048F: B7 08        	lda	[<L36+ptr_0],Y
  1874 00:0491: C9 A5        	cmp	#<$a5
  1875 00:0493: C2 20        	rep	#$20
  1876                        	longa	on
  1877 00:0495: D0 03        	bne	L39
  1878 00:0497: 82 05 00     	brl	L10022
  1879                        L39:
  1880                        	.line	52
  1881                        	.line	53
  1882 00:049A: 64 03        	stz	<L37+ok_1
  1883                        	.line	54
  1884 00:049C: 82 0B 00     	brl	L10019
  1885                        	.line	55
  1886                        L10022:
  1887                        	.line	56
  1888                        L10018:
  1889 00:049F: E6 01        	inc	<L37+i_1
  1890                        L10021:
  1891 00:04A1: A5 01        	lda	<L37+i_1
  Sat Jul 10 2021  1:15                                                Page 39


  1892 00:04A3: C5 0C        	cmp	<L36+poison_size_0
  1893 00:04A5: B0 03        	bcs	L40
  1894 00:04A7: 82 E1 FF     	brl	L10020
  1895                        L40:
  1896                        L10019:
  1897                        	.line	58
  1898 00:04AA: A5 03        	lda	<L37+ok_1
  1899 00:04AC: F0 03        	beq	L41
  1900 00:04AE: 82 0A 00     	brl	L10023
  1901                        L41:
  1902                        	.line	59
  1903                        	.line	61
  1904 00:04B1: D4 0C        	pei	<L36+poison_size_0
  1905 00:04B3: D4 0A        	pei	<L36+ptr_0+2
  1906 00:04B5: D4 08        	pei	<L36+ptr_0
  1907 00:04B7: 22 xx xx xx  	jsl	~~dump_mem
  1908                        	.line	63
  1909                        L10023:
  1910                        	.line	65
  1911 00:04BB: A5 03        	lda	<L37+ok_1
  1912                        L42:
  1913 00:04BD: A8           	tay
  1914 00:04BE: A5 06        	lda	<L36+2
  1915 00:04C0: 85 10        	sta	<L36+2+10
  1916 00:04C2: A5 05        	lda	<L36+1
  1917 00:04C4: 85 0F        	sta	<L36+1+10
  1918 00:04C6: 2B           	pld
  1919 00:04C7: 3B           	tsc
  1920 00:04C8: 18           	clc
  1921 00:04C9: 69 0E 00     	adc	#L36+10
  1922 00:04CC: 1B           	tcs
  1923 00:04CD: 98           	tya
  1924 00:04CE: 6B           	rtl
  1925                        	.line	66
  1926                        	.endblock	66
  1927             00000004   L36	equ	4
  1928             00000001   L37	equ	1
  1929                        	ends
  1930                        	efunc
  1931                        	.endfunc	66,1,4
  1932                        	.line	66
  1933                        	.line	72
  1934                        	.line	73
  1935                        	code
  1936                        	func
  1937                        	.function	73
  1938                        ~~check_poison_block:
  1939                        	longa	on
  1940                        	longi	on
  1941 00:04CF: 3B           	tsc
  1942 00:04D0: 38           	sec
  1943 00:04D1: E9 12 00     	sbc	#L43
  1944 00:04D4: 1B           	tcs
  1945 00:04D5: 0B           	phd
  1946 00:04D6: 5B           	tcd
  1947             00000004   pblock_0	set	4
  1948                        	.block	73
  1949             00000000   ok_1	set	0
  Sat Jul 10 2021  1:15                                                Page 40


  1950                        	.sym	ok,0,5,1,16
  1951                        	.sym	pblock,4,138,6,32,52
  1952 00:04D7: A9 01 00     	lda	#$1
  1953 00:04DA: 85 09        	sta	<L44+ok_1
  1954                        	.line	76
  1955 00:04DC: A7 16        	lda	[<L43+pblock_0]
  1956 00:04DE: 29 00 80     	and	#<$8000
  1957 00:04E1: D0 03        	bne	L46
  1958 00:04E3: 82 03 00     	brl	L10024
  1959                        L46:
  1960                        	.line	77
  1961                        	.line	79
  1962 00:04E6: 82 7E 00     	brl	L10025
  1963                        L10024:
  1964                        	.line	81
  1965                        	.block	86
  1966             00000002   pc_2	set	2
  1967             00000006   pc_cur_2	set	6
  1968                        	.sym	pc,2,142,1,32
  1969                        	.sym	pc_cur,6,142,1,32
  1970 00:04E9: 18           	clc
  1971 00:04EA: A9 08 00     	lda	#$8
  1972 00:04ED: 65 16        	adc	<L43+pblock_0
  1973 00:04EF: 85 0B        	sta	<L44+pc_2
  1974 00:04F1: A9 00 00     	lda	#$0
  1975 00:04F4: 65 18        	adc	<L43+pblock_0+2
  1976 00:04F6: 85 0D        	sta	<L44+pc_2+2
  1977                        	.line	86
  1978 00:04F8: 18           	clc
  1979 00:04F9: A9 02 00     	lda	#$2
  1980 00:04FC: 65 0B        	adc	<L44+pc_2
  1981 00:04FE: 85 0F        	sta	<L44+pc_cur_2
  1982 00:0500: A9 00 00     	lda	#$0
  1983 00:0503: 65 0D        	adc	<L44+pc_2+2
  1984 00:0505: 85 11        	sta	<L44+pc_cur_2+2
  1985                        	.line	87
  1986 00:0507: F4 xx xx     	pea	#^L19
  1987 00:050A: F4 xx xx     	pea	#<L19
  1988 00:050D: F4 04 00     	pea	#<$4
  1989 00:0510: D4 11        	pei	<L44+pc_cur_2+2
  1990 00:0512: D4 0F        	pei	<L44+pc_cur_2
  1991 00:0514: 22 xx xx xx  	jsl	~~check_poison
  1992 00:0518: AA           	tax
  1993 00:0519: F0 03        	beq	L48
  1994 00:051B: 82 05 00     	brl	L10026
  1995                        L48:
  1996                        	.line	88
  1997                        	.line	89
  1998 00:051E: 64 09        	stz	<L44+ok_1
  1999                        	.line	90
  2000 00:0520: 82 44 00     	brl	L10027
  2001                        	.line	91
  2002                        L10026:
  2003                        	.line	93
  2004 00:0523: A0 00 00     	ldy	#$0
  2005 00:0526: A7 0B        	lda	[<L44+pc_2]
  2006 00:0528: 10 01        	bpl	L49
  2007 00:052A: 88           	dey
  Sat Jul 10 2021  1:15                                                Page 41


  2008                        L49:
  2009 00:052B: 85 01        	sta	<R0
  2010 00:052D: 84 03        	sty	<R0+2
  2011 00:052F: 18           	clc
  2012 00:0530: A9 FC FF     	lda	#$fffc
  2013 00:0533: 65 01        	adc	<R0
  2014 00:0535: 85 05        	sta	<R1
  2015 00:0537: A9 FF FF     	lda	#$ffff
  2016 00:053A: 65 03        	adc	<R0+2
  2017 00:053C: 85 07        	sta	<R1+2
  2018 00:053E: 18           	clc
  2019 00:053F: A5 0B        	lda	<L44+pc_2
  2020 00:0541: 65 05        	adc	<R1
  2021 00:0543: 85 0F        	sta	<L44+pc_cur_2
  2022 00:0545: A5 0D        	lda	<L44+pc_2+2
  2023 00:0547: 65 07        	adc	<R1+2
  2024 00:0549: 85 11        	sta	<L44+pc_cur_2+2
  2025                        	.line	94
  2026 00:054B: F4 xx xx     	pea	#^L19+7
  2027 00:054E: F4 xx xx     	pea	#<L19+7
  2028 00:0551: F4 04 00     	pea	#<$4
  2029 00:0554: D4 11        	pei	<L44+pc_cur_2+2
  2030 00:0556: D4 0F        	pei	<L44+pc_cur_2
  2031 00:0558: 22 xx xx xx  	jsl	~~check_poison
  2032 00:055C: AA           	tax
  2033 00:055D: F0 03        	beq	L50
  2034 00:055F: 82 05 00     	brl	L10028
  2035                        L50:
  2036                        	.line	95
  2037                        	.line	96
  2038 00:0562: 64 09        	stz	<L44+ok_1
  2039                        	.line	97
  2040 00:0564: 82 00 00     	brl	L10027
  2041                        	.line	98
  2042                        L10028:
  2043                        	.endblock	99
  2044                        	.line	99
  2045                        L10025:
  2046                        	.line	101
  2047                        L10027:
  2048                        	.line	102
  2049 00:0567: A5 09        	lda	<L44+ok_1
  2050                        L51:
  2051 00:0569: A8           	tay
  2052 00:056A: A5 14        	lda	<L43+2
  2053 00:056C: 85 18        	sta	<L43+2+4
  2054 00:056E: A5 13        	lda	<L43+1
  2055 00:0570: 85 17        	sta	<L43+1+4
  2056 00:0572: 2B           	pld
  2057 00:0573: 3B           	tsc
  2058 00:0574: 18           	clc
  2059 00:0575: 69 16 00     	adc	#L43+4
  2060 00:0578: 1B           	tcs
  2061 00:0579: 98           	tya
  2062 00:057A: 6B           	rtl
  2063                        	.line	103
  2064                        	.endblock	103
  2065             00000012   L43	equ	18
  Sat Jul 10 2021  1:15                                                Page 42


  2066             00000009   L44	equ	9
  2067                        	ends
  2068                        	efunc
  2069                        	.endfunc	103,9,18
  2070                        	.line	103
  2071                        	data
  2072                        L19:
  2073 00:0257: 62 65 66 6F  	db	$62,$65,$66,$6F,$72,$65,$00,$61,$66,$74,
                    $65,$72,$00
       00:025B: 72 65 00 61 
       00:025F: 66 74 65 72 
       00:0263: 00 
  2074 00:0264:              	ends
  2075                        	.line	112
  2076                        	.line	113
  2077                        	code
  2078                        	func
  2079                        	.function	113
  2080                        ~~get_poisoned:
  2081                        	longa	on
  2082                        	longi	on
  2083 00:057B: 3B           	tsc
  2084 00:057C: 38           	sec
  2085 00:057D: E9 08 00     	sbc	#L53
  2086 00:0580: 1B           	tcs
  2087 00:0581: 0B           	phd
  2088 00:0582: 5B           	tcd
  2089             00000004   ptr_0	set	4
  2090             00000008   size_w_poison_0	set	8
  2091                        	.block	113
  2092                        	.sym	ptr,4,142,6,32
  2093                        	.sym	size_w_poison,8,16,6,16
  2094                        	.line	114
  2095 00:0583: A5 10        	lda	<L53+size_w_poison_0
  2096 00:0585: D0 03        	bne	L56
  2097 00:0587: 82 79 00     	brl	L10029
  2098                        L56:
  2099 00:058A: A5 0C        	lda	<L53+ptr_0
  2100 00:058C: 05 0E        	ora	<L53+ptr_0+2
  2101 00:058E: D0 03        	bne	L57
  2102 00:0590: 82 70 00     	brl	L10029
  2103                        L57:
  2104                        	.line	115
  2105                        	.line	118
  2106 00:0593: F4 04 00     	pea	#<$4
  2107 00:0596: 18           	clc
  2108 00:0597: A9 02 00     	lda	#$2
  2109 00:059A: 65 0C        	adc	<L53+ptr_0
  2110 00:059C: 85 01        	sta	<R0
  2111 00:059E: A9 00 00     	lda	#$0
  2112 00:05A1: 65 0E        	adc	<L53+ptr_0+2
  2113 00:05A3: 85 03        	sta	<R0+2
  2114 00:05A5: D4 03        	pei	<R0+2
  2115 00:05A7: D4 01        	pei	<R0
  2116 00:05A9: 22 xx xx xx  	jsl	~~put_poison
  2117                        	.line	120
  2118 00:05AD: F4 04 00     	pea	#<$4
  2119 00:05B0: A5 10        	lda	<L53+size_w_poison_0
  Sat Jul 10 2021  1:15                                                Page 43


  2120 00:05B2: 85 01        	sta	<R0
  2121 00:05B4: 64 03        	stz	<R0+2
  2122 00:05B6: 18           	clc
  2123 00:05B7: A9 FC FF     	lda	#$fffc
  2124 00:05BA: 65 01        	adc	<R0
  2125 00:05BC: 85 05        	sta	<R1
  2126 00:05BE: A9 FF FF     	lda	#$ffff
  2127 00:05C1: 65 03        	adc	<R0+2
  2128 00:05C3: 85 07        	sta	<R1+2
  2129 00:05C5: 18           	clc
  2130 00:05C6: A5 0C        	lda	<L53+ptr_0
  2131 00:05C8: 65 05        	adc	<R1
  2132 00:05CA: 85 01        	sta	<R0
  2133 00:05CC: A5 0E        	lda	<L53+ptr_0+2
  2134 00:05CE: 65 07        	adc	<R1+2
  2135 00:05D0: 85 03        	sta	<R0+2
  2136 00:05D2: D4 03        	pei	<R0+2
  2137 00:05D4: D4 01        	pei	<R0
  2138 00:05D6: 22 xx xx xx  	jsl	~~put_poison
  2139                        	.line	124
  2140 00:05DA: A5 10        	lda	<L53+size_w_poison_0
  2141 00:05DC: 87 0C        	sta	[<L53+ptr_0]
  2142                        	.line	127
  2143 00:05DE: 18           	clc
  2144 00:05DF: A9 06 00     	lda	#$6
  2145 00:05E2: 65 0C        	adc	<L53+ptr_0
  2146 00:05E4: 85 01        	sta	<R0
  2147 00:05E6: A9 00 00     	lda	#$0
  2148 00:05E9: 65 0E        	adc	<L53+ptr_0+2
  2149 00:05EB: 85 03        	sta	<R0+2
  2150 00:05ED: A6 03        	ldx	<R0+2
  2151 00:05EF: A5 01        	lda	<R0
  2152                        L58:
  2153 00:05F1: A8           	tay
  2154 00:05F2: A5 0A        	lda	<L53+2
  2155 00:05F4: 85 10        	sta	<L53+2+6
  2156 00:05F6: A5 09        	lda	<L53+1
  2157 00:05F8: 85 0F        	sta	<L53+1+6
  2158 00:05FA: 2B           	pld
  2159 00:05FB: 3B           	tsc
  2160 00:05FC: 18           	clc
  2161 00:05FD: 69 0E 00     	adc	#L53+6
  2162 00:0600: 1B           	tcs
  2163 00:0601: 98           	tya
  2164 00:0602: 6B           	rtl
  2165                        	.line	128
  2166                        L10029:
  2167                        	.line	130
  2168                        	.line	131
  2169 00:0603: A6 0E        	ldx	<L53+ptr_0+2
  2170 00:0605: A5 0C        	lda	<L53+ptr_0
  2171 00:0607: 82 E7 FF     	brl	L58
  2172                        	.line	132
  2173                        	.line	133
  2174                        	.endblock	133
  2175             00000008   L53	equ	8
  2176             00000009   L54	equ	9
  2177                        	ends
  Sat Jul 10 2021  1:15                                                Page 44


  2178                        	efunc
  2179                        	.endfunc	133,9,8
  2180                        	.line	133
  2181                        	.line	141
  2182                        	.line	142
  2183                        	code
  2184                        	func
  2185                        	.function	142
  2186                        ~~get_unpoisoned:
  2187                        	longa	on
  2188                        	longi	on
  2189 00:060A: 3B           	tsc
  2190 00:060B: 38           	sec
  2191 00:060C: E9 0C 00     	sbc	#L59
  2192 00:060F: 1B           	tcs
  2193 00:0610: 0B           	phd
  2194 00:0611: 5B           	tcd
  2195             00000004   ptr_0	set	4
  2196                        	.block	142
  2197                        	.sym	ptr,4,142,6,32
  2198                        	.line	143
  2199 00:0612: A5 10        	lda	<L59+ptr_0
  2200 00:0614: 05 12        	ora	<L59+ptr_0+2
  2201 00:0616: D0 03        	bne	L62
  2202 00:0618: 82 5F 00     	brl	L10030
  2203                        L62:
  2204                        	.line	144
  2205                        	.block	147
  2206             00000000   c_2	set	0
  2207                        	.sym	c,0,18,1,32
  2208                        	.line	147
  2209 00:061B: 18           	clc
  2210 00:061C: A9 FA FF     	lda	#$fffa
  2211 00:061F: 65 10        	adc	<L59+ptr_0
  2212 00:0621: 85 10        	sta	<L59+ptr_0
  2213 00:0623: A9 FF FF     	lda	#$ffff
  2214 00:0626: 65 12        	adc	<L59+ptr_0+2
  2215 00:0628: 85 12        	sta	<L59+ptr_0+2
  2216                        	.line	150
  2217 00:062A: 38           	sec
  2218 00:062B: A5 10        	lda	<L59+ptr_0
  2219 00:062D: ED xx xx     	sbc	|~~umm_heap
  2220 00:0630: 85 01        	sta	<R0
  2221 00:0632: A5 12        	lda	<L59+ptr_0+2
  2222 00:0634: ED xx xx     	sbc	|~~umm_heap+2
  2223 00:0637: 85 03        	sta	<R0+2
  2224 00:0639: F4 00 00     	pea	#^$10
  2225 00:063C: F4 10 00     	pea	#<$10
  2226 00:063F: D4 03        	pei	<R0+2
  2227 00:0641: D4 01        	pei	<R0
  2228                        	xref	~~~ldiv
  2229 00:0643: 22 xx xx xx  	jsl	~~~ldiv
  2230 00:0647: 85 09        	sta	<L60+c_2
  2231 00:0649: 86 0B        	stx	<L60+c_2+2
  2232                        	.line	152
  2233 00:064B: A5 09        	lda	<L60+c_2
  2234 00:064D: 85 01        	sta	<R0
  2235 00:064F: A5 0B        	lda	<L60+c_2+2
  Sat Jul 10 2021  1:15                                                Page 45


  2236 00:0651: 85 03        	sta	<R0+2
  2237 00:0653: 06 01        	asl	<R0
  2238 00:0655: 26 03        	rol	<R0+2
  2239 00:0657: 06 01        	asl	<R0
  2240 00:0659: 26 03        	rol	<R0+2
  2241 00:065B: 06 01        	asl	<R0
  2242 00:065D: 26 03        	rol	<R0+2
  2243 00:065F: 06 01        	asl	<R0
  2244 00:0661: 26 03        	rol	<R0+2
  2245 00:0663: 18           	clc
  2246 00:0664: AD xx xx     	lda	|~~umm_heap
  2247 00:0667: 65 01        	adc	<R0
  2248 00:0669: 85 05        	sta	<R1
  2249 00:066B: AD xx xx     	lda	|~~umm_heap+2
  2250 00:066E: 65 03        	adc	<R0+2
  2251 00:0670: 85 07        	sta	<R1+2
  2252 00:0672: D4 07        	pei	<R1+2
  2253 00:0674: D4 05        	pei	<R1
  2254 00:0676: 22 xx xx xx  	jsl	~~check_poison_block
  2255                        	.endblock	153
  2256                        	.line	153
  2257                        L10030:
  2258                        	.line	155
  2259 00:067A: A6 12        	ldx	<L59+ptr_0+2
  2260 00:067C: A5 10        	lda	<L59+ptr_0
  2261                        L64:
  2262 00:067E: A8           	tay
  2263 00:067F: A5 0E        	lda	<L59+2
  2264 00:0681: 85 12        	sta	<L59+2+4
  2265 00:0683: A5 0D        	lda	<L59+1
  2266 00:0685: 85 11        	sta	<L59+1+4
  2267 00:0687: 2B           	pld
  2268 00:0688: 3B           	tsc
  2269 00:0689: 18           	clc
  2270 00:068A: 69 10 00     	adc	#L59+4
  2271 00:068D: 1B           	tcs
  2272 00:068E: 98           	tya
  2273 00:068F: 6B           	rtl
  2274                        	.line	156
  2275                        	.endblock	156
  2276             0000000C   L59	equ	12
  2277             00000009   L60	equ	9
  2278                        	ends
  2279                        	efunc
  2280                        	.endfunc	156,9,12
  2281                        	.line	156
  2282                        	.line	162
  2283                        	.line	163
  2284                        	code
  2285                        	xdef	~~umm_poison_malloc
  2286                        	func
  2287                        	.function	163
  2288                        ~~umm_poison_malloc:
  2289                        	longa	on
  2290                        	longi	on
  2291 00:0690: 3B           	tsc
  2292 00:0691: 38           	sec
  2293 00:0692: E9 08 00     	sbc	#L65
  Sat Jul 10 2021  1:15                                                Page 46


  2294 00:0695: 1B           	tcs
  2295 00:0696: 0B           	phd
  2296 00:0697: 5B           	tcd
  2297             00000004   size_0	set	4
  2298                        	.block	163
  2299             00000000   ret_1	set	0
  2300                        	.sym	ret,0,129,1,32
  2301                        	.sym	size,4,16,6,16
  2302                        	.line	166
  2303 00:0698: D4 0C        	pei	<L65+size_0
  2304 00:069A: 22 xx xx xx  	jsl	~~poison_size
  2305 00:069E: 85 01        	sta	<R0
  2306 00:06A0: 18           	clc
  2307 00:06A1: A5 01        	lda	<R0
  2308 00:06A3: 65 0C        	adc	<L65+size_0
  2309 00:06A5: 85 0C        	sta	<L65+size_0
  2310                        	.line	168
  2311 00:06A7: A5 0C        	lda	<L65+size_0
  2312 00:06A9: 85 01        	sta	<R0
  2313 00:06AB: 64 03        	stz	<R0+2
  2314 00:06AD: D4 03        	pei	<R0+2
  2315 00:06AF: D4 01        	pei	<R0
  2316 00:06B1: 22 xx xx xx  	jsl	~~umm_malloc
  2317 00:06B5: 85 05        	sta	<L66+ret_1
  2318 00:06B7: 86 07        	stx	<L66+ret_1+2
  2319                        	.line	170
  2320 00:06B9: D4 0C        	pei	<L65+size_0
  2321 00:06BB: D4 07        	pei	<L66+ret_1+2
  2322 00:06BD: D4 05        	pei	<L66+ret_1
  2323 00:06BF: 22 xx xx xx  	jsl	~~get_poisoned
  2324 00:06C3: 85 05        	sta	<L66+ret_1
  2325 00:06C5: 86 07        	stx	<L66+ret_1+2
  2326                        	.line	172
  2327 00:06C7: A6 07        	ldx	<L66+ret_1+2
  2328 00:06C9: A5 05        	lda	<L66+ret_1
  2329                        L68:
  2330 00:06CB: A8           	tay
  2331 00:06CC: A5 0A        	lda	<L65+2
  2332 00:06CE: 85 0C        	sta	<L65+2+2
  2333 00:06D0: A5 09        	lda	<L65+1
  2334 00:06D2: 85 0B        	sta	<L65+1+2
  2335 00:06D4: 2B           	pld
  2336 00:06D5: 3B           	tsc
  2337 00:06D6: 18           	clc
  2338 00:06D7: 69 0A 00     	adc	#L65+2
  2339 00:06DA: 1B           	tcs
  2340 00:06DB: 98           	tya
  2341 00:06DC: 6B           	rtl
  2342                        	.line	173
  2343                        	.endblock	173
  2344             00000008   L65	equ	8
  2345             00000005   L66	equ	5
  2346                        	ends
  2347                        	efunc
  2348                        	.endfunc	173,5,8
  2349                        	.line	173
  2350                        	.line	177
  2351                        	.line	178
  Sat Jul 10 2021  1:15                                                Page 47


  2352                        	code
  2353                        	xdef	~~umm_poison_calloc
  2354                        	func
  2355                        	.function	178
  2356                        ~~umm_poison_calloc:
  2357                        	longa	on
  2358                        	longi	on
  2359 00:06DD: 3B           	tsc
  2360 00:06DE: 38           	sec
  2361 00:06DF: E9 0A 00     	sbc	#L69
  2362 00:06E2: 1B           	tcs
  2363 00:06E3: 0B           	phd
  2364 00:06E4: 5B           	tcd
  2365             00000004   num_0	set	4
  2366             00000006   item_size_0	set	6
  2367                        	.block	178
  2368             00000000   ret_1	set	0
  2369             00000004   size_1	set	4
  2370                        	.sym	ret,0,129,1,32
  2371                        	.sym	size,4,16,1,16
  2372                        	.sym	num,4,16,6,16
  2373                        	.sym	item_size,6,16,6,16
  2374 00:06E5: A5 10        	lda	<L69+item_size_0
  2375 00:06E7: A6 0E        	ldx	<L69+num_0
  2376                        	xref	~~~mul
  2377 00:06E9: 22 xx xx xx  	jsl	~~~mul
  2378 00:06ED: 85 09        	sta	<L70+size_1
  2379                        	.line	182
  2380 00:06EF: D4 09        	pei	<L70+size_1
  2381 00:06F1: 22 xx xx xx  	jsl	~~poison_size
  2382 00:06F5: 85 01        	sta	<R0
  2383 00:06F7: 18           	clc
  2384 00:06F8: A5 01        	lda	<R0
  2385 00:06FA: 65 09        	adc	<L70+size_1
  2386 00:06FC: 85 09        	sta	<L70+size_1
  2387                        	.line	184
  2388 00:06FE: A5 09        	lda	<L70+size_1
  2389 00:0700: 85 01        	sta	<R0
  2390 00:0702: 64 03        	stz	<R0+2
  2391 00:0704: D4 03        	pei	<R0+2
  2392 00:0706: D4 01        	pei	<R0
  2393 00:0708: 22 xx xx xx  	jsl	~~umm_malloc
  2394 00:070C: 85 05        	sta	<L70+ret_1
  2395 00:070E: 86 07        	stx	<L70+ret_1+2
  2396                        	.line	186
  2397 00:0710: A5 05        	lda	<L70+ret_1
  2398 00:0712: 05 07        	ora	<L70+ret_1+2
  2399 00:0714: D0 03        	bne	L72
  2400 00:0716: 82 0D 00     	brl	L10031
  2401                        L72:
  2402                        	.line	187
  2403 00:0719: D4 09        	pei	<L70+size_1
  2404 00:071B: F4 00 00     	pea	#<$0
  2405 00:071E: D4 07        	pei	<L70+ret_1+2
  2406 00:0720: D4 05        	pei	<L70+ret_1
  2407 00:0722: 22 xx xx xx  	jsl	~~memset
  2408                        L10031:
  2409                        	.line	189
  Sat Jul 10 2021  1:15                                                Page 48


  2410 00:0726: D4 09        	pei	<L70+size_1
  2411 00:0728: D4 07        	pei	<L70+ret_1+2
  2412 00:072A: D4 05        	pei	<L70+ret_1
  2413 00:072C: 22 xx xx xx  	jsl	~~get_poisoned
  2414 00:0730: 85 05        	sta	<L70+ret_1
  2415 00:0732: 86 07        	stx	<L70+ret_1+2
  2416                        	.line	191
  2417 00:0734: A6 07        	ldx	<L70+ret_1+2
  2418 00:0736: A5 05        	lda	<L70+ret_1
  2419                        L73:
  2420 00:0738: A8           	tay
  2421 00:0739: A5 0C        	lda	<L69+2
  2422 00:073B: 85 10        	sta	<L69+2+4
  2423 00:073D: A5 0B        	lda	<L69+1
  2424 00:073F: 85 0F        	sta	<L69+1+4
  2425 00:0741: 2B           	pld
  2426 00:0742: 3B           	tsc
  2427 00:0743: 18           	clc
  2428 00:0744: 69 0E 00     	adc	#L69+4
  2429 00:0747: 1B           	tcs
  2430 00:0748: 98           	tya
  2431 00:0749: 6B           	rtl
  2432                        	.line	192
  2433                        	.endblock	192
  2434             0000000A   L69	equ	10
  2435             00000005   L70	equ	5
  2436                        	ends
  2437                        	efunc
  2438                        	.endfunc	192,5,10
  2439                        	.line	192
  2440                        	.line	196
  2441                        	.line	197
  2442                        	code
  2443                        	xdef	~~umm_poison_realloc
  2444                        	func
  2445                        	.function	197
  2446                        ~~umm_poison_realloc:
  2447                        	longa	on
  2448                        	longi	on
  2449 00:074A: 3B           	tsc
  2450 00:074B: 38           	sec
  2451 00:074C: E9 08 00     	sbc	#L74
  2452 00:074F: 1B           	tcs
  2453 00:0750: 0B           	phd
  2454 00:0751: 5B           	tcd
  2455             00000004   ptr_0	set	4
  2456             00000008   size_0	set	8
  2457                        	.block	197
  2458             00000000   ret_1	set	0
  2459                        	.sym	ret,0,129,1,32
  2460                        	.sym	ptr,4,129,6,32
  2461                        	.sym	size,8,16,6,16
  2462                        	.line	200
  2463 00:0752: D4 0E        	pei	<L74+ptr_0+2
  2464 00:0754: D4 0C        	pei	<L74+ptr_0
  2465 00:0756: 22 xx xx xx  	jsl	~~get_unpoisoned
  2466 00:075A: 85 0C        	sta	<L74+ptr_0
  2467 00:075C: 86 0E        	stx	<L74+ptr_0+2
  Sat Jul 10 2021  1:15                                                Page 49


  2468                        	.line	202
  2469 00:075E: D4 10        	pei	<L74+size_0
  2470 00:0760: 22 xx xx xx  	jsl	~~poison_size
  2471 00:0764: 85 01        	sta	<R0
  2472 00:0766: 18           	clc
  2473 00:0767: A5 01        	lda	<R0
  2474 00:0769: 65 10        	adc	<L74+size_0
  2475 00:076B: 85 10        	sta	<L74+size_0
  2476                        	.line	203
  2477 00:076D: A5 10        	lda	<L74+size_0
  2478 00:076F: 85 01        	sta	<R0
  2479 00:0771: 64 03        	stz	<R0+2
  2480 00:0773: D4 03        	pei	<R0+2
  2481 00:0775: D4 01        	pei	<R0
  2482 00:0777: D4 0E        	pei	<L74+ptr_0+2
  2483 00:0779: D4 0C        	pei	<L74+ptr_0
  2484 00:077B: 22 xx xx xx  	jsl	~~umm_realloc
  2485 00:077F: 85 05        	sta	<L75+ret_1
  2486 00:0781: 86 07        	stx	<L75+ret_1+2
  2487                        	.line	205
  2488 00:0783: D4 10        	pei	<L74+size_0
  2489 00:0785: D4 07        	pei	<L75+ret_1+2
  2490 00:0787: D4 05        	pei	<L75+ret_1
  2491 00:0789: 22 xx xx xx  	jsl	~~get_poisoned
  2492 00:078D: 85 05        	sta	<L75+ret_1
  2493 00:078F: 86 07        	stx	<L75+ret_1+2
  2494                        	.line	207
  2495 00:0791: A6 07        	ldx	<L75+ret_1+2
  2496 00:0793: A5 05        	lda	<L75+ret_1
  2497                        L77:
  2498 00:0795: A8           	tay
  2499 00:0796: A5 0A        	lda	<L74+2
  2500 00:0798: 85 10        	sta	<L74+2+6
  2501 00:079A: A5 09        	lda	<L74+1
  2502 00:079C: 85 0F        	sta	<L74+1+6
  2503 00:079E: 2B           	pld
  2504 00:079F: 3B           	tsc
  2505 00:07A0: 18           	clc
  2506 00:07A1: 69 0E 00     	adc	#L74+6
  2507 00:07A4: 1B           	tcs
  2508 00:07A5: 98           	tya
  2509 00:07A6: 6B           	rtl
  2510                        	.line	208
  2511                        	.endblock	208
  2512             00000008   L74	equ	8
  2513             00000005   L75	equ	5
  2514                        	ends
  2515                        	efunc
  2516                        	.endfunc	208,5,8
  2517                        	.line	208
  2518                        	.line	212
  2519                        	.line	213
  2520                        	code
  2521                        	xdef	~~umm_poison_free
  2522                        	func
  2523                        	.function	213
  2524                        ~~umm_poison_free:
  2525                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 50


  2526                        	longi	on
  2527 00:07A7: 3B           	tsc
  2528 00:07A8: 38           	sec
  2529 00:07A9: E9 00 00     	sbc	#L78
  2530 00:07AC: 1B           	tcs
  2531 00:07AD: 0B           	phd
  2532 00:07AE: 5B           	tcd
  2533             00000004   ptr_0	set	4
  2534                        	.block	213
  2535                        	.sym	ptr,4,129,6,32
  2536                        	.line	215
  2537 00:07AF: D4 06        	pei	<L78+ptr_0+2
  2538 00:07B1: D4 04        	pei	<L78+ptr_0
  2539 00:07B3: 22 xx xx xx  	jsl	~~get_unpoisoned
  2540 00:07B7: 85 04        	sta	<L78+ptr_0
  2541 00:07B9: 86 06        	stx	<L78+ptr_0+2
  2542                        	.line	217
  2543 00:07BB: D4 06        	pei	<L78+ptr_0+2
  2544 00:07BD: D4 04        	pei	<L78+ptr_0
  2545 00:07BF: 22 xx xx xx  	jsl	~~umm_free
  2546                        	.line	218
  2547                        L81:
  2548 00:07C3: A5 02        	lda	<L78+2
  2549 00:07C5: 85 06        	sta	<L78+2+4
  2550 00:07C7: A5 01        	lda	<L78+1
  2551 00:07C9: 85 05        	sta	<L78+1+4
  2552 00:07CB: 2B           	pld
  2553 00:07CC: 3B           	tsc
  2554 00:07CD: 18           	clc
  2555 00:07CE: 69 04 00     	adc	#L78+4
  2556 00:07D1: 1B           	tcs
  2557 00:07D2: 6B           	rtl
  2558                        	.endblock	218
  2559             00000000   L78	equ	0
  2560             00000001   L79	equ	1
  2561                        	ends
  2562                        	efunc
  2563                        	.endfunc	218,1,0
  2564                        	.line	218
  2565                        	.line	225
  2566                        	.line	226
  2567                        	code
  2568                        	xdef	~~umm_poison_check
  2569                        	func
  2570                        	.function	226
  2571                        ~~umm_poison_check:
  2572                        	longa	on
  2573                        	longi	on
  2574 00:07D3: 3B           	tsc
  2575 00:07D4: 38           	sec
  2576 00:07D5: E9 0E 00     	sbc	#L82
  2577 00:07D8: 1B           	tcs
  2578 00:07D9: 0B           	phd
  2579 00:07DA: 5B           	tcd
  2580                        	.block	226
  2581             00000000   ok_1	set	0
  2582             00000002   cur_1	set	2
  2583                        	.sym	ok,0,5,1,16
  Sat Jul 10 2021  1:15                                                Page 51


  2584                        	.sym	cur,2,18,1,32
  2585 00:07DB: A9 01 00     	lda	#$1
  2586 00:07DE: 85 09        	sta	<L83+ok_1
  2587                        	.line	230
  2588 00:07E0: AD xx xx     	lda	|~~umm_heap
  2589 00:07E3: 0D xx xx     	ora	|~~umm_heap+2
  2590 00:07E6: F0 03        	beq	L85
  2591 00:07E8: 82 04 00     	brl	L10032
  2592                        L85:
  2593                        	.line	231
  2594                        	.line	232
  2595 00:07EB: 22 xx xx xx  	jsl	~~umm_init
  2596                        	.line	233
  2597                        L10032:
  2598                        	.line	236
  2599 00:07EF: AD xx xx     	lda	|~~umm_heap
  2600 00:07F2: 85 01        	sta	<R0
  2601 00:07F4: AD xx xx     	lda	|~~umm_heap+2
  2602 00:07F7: 85 03        	sta	<R0+2
  2603 00:07F9: A7 01        	lda	[<R0]
  2604 00:07FB: 29 FF 7F     	and	#<$7fff
  2605 00:07FE: 85 0B        	sta	<L83+cur_1
  2606 00:0800: 64 0D        	stz	<L83+cur_1+2
  2607                        	.line	238
  2608                        L10033:
  2609 00:0802: A5 0B        	lda	<L83+cur_1
  2610 00:0804: 85 01        	sta	<R0
  2611 00:0806: A5 0D        	lda	<L83+cur_1+2
  2612 00:0808: 85 03        	sta	<R0+2
  2613 00:080A: 06 01        	asl	<R0
  2614 00:080C: 26 03        	rol	<R0+2
  2615 00:080E: 06 01        	asl	<R0
  2616 00:0810: 26 03        	rol	<R0+2
  2617 00:0812: 06 01        	asl	<R0
  2618 00:0814: 26 03        	rol	<R0+2
  2619 00:0816: 06 01        	asl	<R0
  2620 00:0818: 26 03        	rol	<R0+2
  2621 00:081A: 18           	clc
  2622 00:081B: AD xx xx     	lda	|~~umm_heap
  2623 00:081E: 65 01        	adc	<R0
  2624 00:0820: 85 05        	sta	<R1
  2625 00:0822: AD xx xx     	lda	|~~umm_heap+2
  2626 00:0825: 65 03        	adc	<R0+2
  2627 00:0827: 85 07        	sta	<R1+2
  2628 00:0829: A7 05        	lda	[<R1]
  2629 00:082B: 29 FF 7F     	and	#<$7fff
  2630 00:082E: D0 03        	bne	L86
  2631 00:0830: 82 9F 00     	brl	L10034
  2632                        L86:
  2633                        	.line	239
  2634                        	.line	240
  2635 00:0833: A5 0B        	lda	<L83+cur_1
  2636 00:0835: 85 01        	sta	<R0
  2637 00:0837: A5 0D        	lda	<L83+cur_1+2
  2638 00:0839: 85 03        	sta	<R0+2
  2639 00:083B: 06 01        	asl	<R0
  2640 00:083D: 26 03        	rol	<R0+2
  2641 00:083F: 06 01        	asl	<R0
  Sat Jul 10 2021  1:15                                                Page 52


  2642 00:0841: 26 03        	rol	<R0+2
  2643 00:0843: 06 01        	asl	<R0
  2644 00:0845: 26 03        	rol	<R0+2
  2645 00:0847: 06 01        	asl	<R0
  2646 00:0849: 26 03        	rol	<R0+2
  2647 00:084B: 18           	clc
  2648 00:084C: AD xx xx     	lda	|~~umm_heap
  2649 00:084F: 65 01        	adc	<R0
  2650 00:0851: 85 05        	sta	<R1
  2651 00:0853: AD xx xx     	lda	|~~umm_heap+2
  2652 00:0856: 65 03        	adc	<R0+2
  2653 00:0858: 85 07        	sta	<R1+2
  2654 00:085A: A7 05        	lda	[<R1]
  2655 00:085C: 29 00 80     	and	#<$8000
  2656 00:085F: F0 03        	beq	L87
  2657 00:0861: 82 3B 00     	brl	L10035
  2658                        L87:
  2659                        	.line	241
  2660                        	.line	243
  2661 00:0864: A5 0B        	lda	<L83+cur_1
  2662 00:0866: 85 01        	sta	<R0
  2663 00:0868: A5 0D        	lda	<L83+cur_1+2
  2664 00:086A: 85 03        	sta	<R0+2
  2665 00:086C: 06 01        	asl	<R0
  2666 00:086E: 26 03        	rol	<R0+2
  2667 00:0870: 06 01        	asl	<R0
  2668 00:0872: 26 03        	rol	<R0+2
  2669 00:0874: 06 01        	asl	<R0
  2670 00:0876: 26 03        	rol	<R0+2
  2671 00:0878: 06 01        	asl	<R0
  2672 00:087A: 26 03        	rol	<R0+2
  2673 00:087C: 18           	clc
  2674 00:087D: AD xx xx     	lda	|~~umm_heap
  2675 00:0880: 65 01        	adc	<R0
  2676 00:0882: 85 05        	sta	<R1
  2677 00:0884: AD xx xx     	lda	|~~umm_heap+2
  2678 00:0887: 65 03        	adc	<R0+2
  2679 00:0889: 85 07        	sta	<R1+2
  2680 00:088B: D4 07        	pei	<R1+2
  2681 00:088D: D4 05        	pei	<R1
  2682 00:088F: 22 xx xx xx  	jsl	~~check_poison_block
  2683 00:0893: 85 09        	sta	<L83+ok_1
  2684                        	.line	244
  2685 00:0895: A5 09        	lda	<L83+ok_1
  2686 00:0897: F0 03        	beq	L88
  2687 00:0899: 82 03 00     	brl	L10036
  2688                        L88:
  2689                        	.line	245
  2690                        	.line	246
  2691 00:089C: 82 33 00     	brl	L10034
  2692                        	.line	247
  2693                        L10036:
  2694                        	.line	248
  2695                        L10035:
  2696                        	.line	250
  2697 00:089F: A5 0B        	lda	<L83+cur_1
  2698 00:08A1: 85 01        	sta	<R0
  2699 00:08A3: A5 0D        	lda	<L83+cur_1+2
  Sat Jul 10 2021  1:15                                                Page 53


  2700 00:08A5: 85 03        	sta	<R0+2
  2701 00:08A7: 06 01        	asl	<R0
  2702 00:08A9: 26 03        	rol	<R0+2
  2703 00:08AB: 06 01        	asl	<R0
  2704 00:08AD: 26 03        	rol	<R0+2
  2705 00:08AF: 06 01        	asl	<R0
  2706 00:08B1: 26 03        	rol	<R0+2
  2707 00:08B3: 06 01        	asl	<R0
  2708 00:08B5: 26 03        	rol	<R0+2
  2709 00:08B7: 18           	clc
  2710 00:08B8: AD xx xx     	lda	|~~umm_heap
  2711 00:08BB: 65 01        	adc	<R0
  2712 00:08BD: 85 05        	sta	<R1
  2713 00:08BF: AD xx xx     	lda	|~~umm_heap+2
  2714 00:08C2: 65 03        	adc	<R0+2
  2715 00:08C4: 85 07        	sta	<R1+2
  2716 00:08C6: A7 05        	lda	[<R1]
  2717 00:08C8: 29 FF 7F     	and	#<$7fff
  2718 00:08CB: 85 0B        	sta	<L83+cur_1
  2719 00:08CD: 64 0D        	stz	<L83+cur_1+2
  2720                        	.line	251
  2721 00:08CF: 82 30 FF     	brl	L10033
  2722                        L10034:
  2723                        	.line	253
  2724 00:08D2: A5 09        	lda	<L83+ok_1
  2725                        L89:
  2726 00:08D4: A8           	tay
  2727 00:08D5: 2B           	pld
  2728 00:08D6: 3B           	tsc
  2729 00:08D7: 18           	clc
  2730 00:08D8: 69 0E 00     	adc	#L82
  2731 00:08DB: 1B           	tcs
  2732 00:08DC: 98           	tya
  2733 00:08DD: 6B           	rtl
  2734                        	.line	254
  2735                        	.endblock	254
  2736             0000000E   L82	equ	14
  2737             00000009   L83	equ	9
  2738                        	ends
  2739                        	efunc
  2740                        	.endfunc	254,9,14
  2741                        	.line	254
  2742                        	.line	259
  2743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",97
  2744                        ;#include "umm_info.c"
  2745                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_info.c",0
  2746                        	.line	20
  2747                        	.line	21
  2748                        	code
  2749                        	xdef	~~umm_info
  2750                        	func
  2751                        	.function	21
  2752                        ~~umm_info:
  2753                        	longa	on
  2754                        	longi	on
  2755 00:08DE: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 54


  2756 00:08DF: 38           	sec
  2757 00:08E0: E9 14 00     	sbc	#L90
  2758 00:08E3: 1B           	tcs
  2759 00:08E4: 0B           	phd
  2760 00:08E5: 5B           	tcd
  2761             00000004   ptr_0	set	4
  2762             00000008   force_0	set	8
  2763                        	.block	21
  2764             00000000   blockNo_1	set	0
  2765                        	.sym	blockNo,0,15,1,16
  2766                        	.sym	ptr,4,129,6,32
  2767                        	.sym	force,8,5,6,16
  2768 00:08E6: 64 11        	stz	<L91+blockNo_1
  2769                        	.line	26
  2770                        	.line	32
  2771 00:08E8: F4 20 00     	pea	#<$20
  2772 00:08EB: F4 00 00     	pea	#<$0
  2773 00:08EE: A9 xx xx     	lda	#<~~ummHeapInfo
  2774 00:08F1: 85 01        	sta	<R0
  2775                        	xref	_BEG_DATA
  2776 00:08F3: A9 xx xx     	lda	#_BEG_DATA>>16
  2777 00:08F6: 85 03        	sta	<R0+2
  2778 00:08F8: D4 03        	pei	<R0+2
  2779 00:08FA: D4 01        	pei	<R0
  2780 00:08FC: 22 xx xx xx  	jsl	~~memset
  2781                        	.line	51
  2782 00:0900: A5 11        	lda	<L91+blockNo_1
  2783 00:0902: 85 05        	sta	<R1
  2784 00:0904: 64 07        	stz	<R1+2
  2785 00:0906: D4 07        	pei	<R1+2
  2786 00:0908: D4 05        	pei	<R1
  2787 00:090A: A9 04 00     	lda	#$4
  2788                        	xref	~~~lasl
  2789 00:090D: 22 xx xx xx  	jsl	~~~lasl
  2790 00:0911: 85 01        	sta	<R0
  2791 00:0913: 86 03        	stx	<R0+2
  2792 00:0915: 18           	clc
  2793 00:0916: AD xx xx     	lda	|~~umm_heap
  2794 00:0919: 65 01        	adc	<R0
  2795 00:091B: 85 09        	sta	<R2
  2796 00:091D: AD xx xx     	lda	|~~umm_heap+2
  2797 00:0920: 65 03        	adc	<R0+2
  2798 00:0922: 85 0B        	sta	<R2+2
  2799 00:0924: A7 09        	lda	[<R2]
  2800 00:0926: 29 FF 7F     	and	#<$7fff
  2801 00:0929: 85 01        	sta	<R0
  2802 00:092B: 64 03        	stz	<R0+2
  2803 00:092D: A5 01        	lda	<R0
  2804 00:092F: 85 11        	sta	<L91+blockNo_1
  2805                        	.line	53
  2806 00:0931: A9 10 00     	lda	#$10
  2807 00:0934: 8D xx xx     	sta	|~~ummHeapInfo+28
  2808 00:0937: A9 00 00     	lda	#$0
  2809 00:093A: 8D xx xx     	sta	|~~ummHeapInfo+28+2
  2810                        	.line	55
  2811                        L10037:
  2812 00:093D: A5 11        	lda	<L91+blockNo_1
  2813 00:093F: 85 05        	sta	<R1
  Sat Jul 10 2021  1:15                                                Page 55


  2814 00:0941: 64 07        	stz	<R1+2
  2815 00:0943: D4 07        	pei	<R1+2
  2816 00:0945: D4 05        	pei	<R1
  2817 00:0947: A9 04 00     	lda	#$4
  2818                        	xref	~~~lasl
  2819 00:094A: 22 xx xx xx  	jsl	~~~lasl
  2820 00:094E: 85 01        	sta	<R0
  2821 00:0950: 86 03        	stx	<R0+2
  2822 00:0952: 18           	clc
  2823 00:0953: AD xx xx     	lda	|~~umm_heap
  2824 00:0956: 65 01        	adc	<R0
  2825 00:0958: 85 09        	sta	<R2
  2826 00:095A: AD xx xx     	lda	|~~umm_heap+2
  2827 00:095D: 65 03        	adc	<R0+2
  2828 00:095F: 85 0B        	sta	<R2+2
  2829 00:0961: A7 09        	lda	[<R2]
  2830 00:0963: 29 FF 7F     	and	#<$7fff
  2831 00:0966: D0 03        	bne	L93
  2832 00:0968: 82 6C 01     	brl	L10038
  2833                        L93:
  2834                        	.line	56
  2835                        	.block	59
  2836             00000002   curBlocks_2	set	2
  2837                        	.sym	curBlocks,2,16,1,16
  2838 00:096B: A5 11        	lda	<L91+blockNo_1
  2839 00:096D: 85 01        	sta	<R0
  2840 00:096F: 64 03        	stz	<R0+2
  2841 00:0971: A5 11        	lda	<L91+blockNo_1
  2842 00:0973: 85 09        	sta	<R2
  2843 00:0975: 64 0B        	stz	<R2+2
  2844 00:0977: D4 0B        	pei	<R2+2
  2845 00:0979: D4 09        	pei	<R2
  2846 00:097B: A9 04 00     	lda	#$4
  2847                        	xref	~~~lasl
  2848 00:097E: 22 xx xx xx  	jsl	~~~lasl
  2849 00:0982: 85 05        	sta	<R1
  2850 00:0984: 86 07        	stx	<R1+2
  2851 00:0986: 18           	clc
  2852 00:0987: AD xx xx     	lda	|~~umm_heap
  2853 00:098A: 65 05        	adc	<R1
  2854 00:098C: 85 0D        	sta	<R3
  2855 00:098E: AD xx xx     	lda	|~~umm_heap+2
  2856 00:0991: 65 07        	adc	<R1+2
  2857 00:0993: 85 0F        	sta	<R3+2
  2858 00:0995: A7 0D        	lda	[<R3]
  2859 00:0997: 29 FF 7F     	and	#<$7fff
  2860 00:099A: 85 05        	sta	<R1
  2861 00:099C: 64 07        	stz	<R1+2
  2862 00:099E: 38           	sec
  2863 00:099F: A5 05        	lda	<R1
  2864 00:09A1: E5 01        	sbc	<R0
  2865 00:09A3: 85 0D        	sta	<R3
  2866 00:09A5: A5 07        	lda	<R1+2
  2867 00:09A7: E5 03        	sbc	<R0+2
  2868 00:09A9: 85 0F        	sta	<R3+2
  2869 00:09AB: A5 0D        	lda	<R3
  2870 00:09AD: 85 13        	sta	<L91+curBlocks_2
  2871                        	.line	59
  Sat Jul 10 2021  1:15                                                Page 56


  2872 00:09AF: EE xx xx     	inc	|~~ummHeapInfo
  2873 00:09B2: D0 03        	bne	L95
  2874 00:09B4: EE xx xx     	inc	|~~ummHeapInfo+2
  2875                        L95:
  2876                        	.line	60
  2877 00:09B7: A5 13        	lda	<L91+curBlocks_2
  2878 00:09B9: 85 01        	sta	<R0
  2879 00:09BB: 64 03        	stz	<R0+2
  2880 00:09BD: 18           	clc
  2881 00:09BE: A5 01        	lda	<R0
  2882 00:09C0: 6D xx xx     	adc	|~~ummHeapInfo+12
  2883 00:09C3: 8D xx xx     	sta	|~~ummHeapInfo+12
  2884 00:09C6: A5 03        	lda	<R0+2
  2885 00:09C8: 6D xx xx     	adc	|~~ummHeapInfo+12+2
  2886 00:09CB: 8D xx xx     	sta	|~~ummHeapInfo+12+2
  2887                        	.line	64
  2888 00:09CE: A5 11        	lda	<L91+blockNo_1
  2889 00:09D0: 85 05        	sta	<R1
  2890 00:09D2: 64 07        	stz	<R1+2
  2891 00:09D4: D4 07        	pei	<R1+2
  2892 00:09D6: D4 05        	pei	<R1
  2893 00:09D8: A9 04 00     	lda	#$4
  2894                        	xref	~~~lasl
  2895 00:09DB: 22 xx xx xx  	jsl	~~~lasl
  2896 00:09DF: 85 01        	sta	<R0
  2897 00:09E1: 86 03        	stx	<R0+2
  2898 00:09E3: 18           	clc
  2899 00:09E4: AD xx xx     	lda	|~~umm_heap
  2900 00:09E7: 65 01        	adc	<R0
  2901 00:09E9: 85 09        	sta	<R2
  2902 00:09EB: AD xx xx     	lda	|~~umm_heap+2
  2903 00:09EE: 65 03        	adc	<R0+2
  2904 00:09F0: 85 0B        	sta	<R2+2
  2905 00:09F2: A7 09        	lda	[<R2]
  2906 00:09F4: 29 00 80     	and	#<$8000
  2907 00:09F7: D0 03        	bne	L96
  2908 00:09F9: 82 88 00     	brl	L10039
  2909                        L96:
  2910                        	.line	65
  2911                        	.line	66
  2912 00:09FC: EE xx xx     	inc	|~~ummHeapInfo+8
  2913 00:09FF: D0 03        	bne	L97
  2914 00:0A01: EE xx xx     	inc	|~~ummHeapInfo+8+2
  2915                        L97:
  2916                        	.line	67
  2917 00:0A04: A5 13        	lda	<L91+curBlocks_2
  2918 00:0A06: 85 01        	sta	<R0
  2919 00:0A08: 64 03        	stz	<R0+2
  2920 00:0A0A: 18           	clc
  2921 00:0A0B: A5 01        	lda	<R0
  2922 00:0A0D: 6D xx xx     	adc	|~~ummHeapInfo+20
  2923 00:0A10: 8D xx xx     	sta	|~~ummHeapInfo+20
  2924 00:0A13: A5 03        	lda	<R0+2
  2925 00:0A15: 6D xx xx     	adc	|~~ummHeapInfo+20+2
  2926 00:0A18: 8D xx xx     	sta	|~~ummHeapInfo+20+2
  2927                        	.line	69
  2928 00:0A1B: A5 13        	lda	<L91+curBlocks_2
  2929 00:0A1D: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 57


  2930 00:0A1F: 64 03        	stz	<R0+2
  2931 00:0A21: AD xx xx     	lda	|~~ummHeapInfo+24
  2932 00:0A24: C5 01        	cmp	<R0
  2933 00:0A26: AD xx xx     	lda	|~~ummHeapInfo+24+2
  2934 00:0A29: E5 03        	sbc	<R0+2
  2935 00:0A2B: 90 03        	bcc	L98
  2936 00:0A2D: 82 08 00     	brl	L10040
  2937                        L98:
  2938                        	.line	70
  2939                        	.line	71
  2940 00:0A30: A5 13        	lda	<L91+curBlocks_2
  2941 00:0A32: 8D xx xx     	sta	|~~ummHeapInfo+24
  2942 00:0A35: 9C xx xx     	stz	|~~ummHeapInfo+24+2
  2943                        	.line	72
  2944                        L10040:
  2945                        	.line	86
  2946 00:0A38: A5 11        	lda	<L91+blockNo_1
  2947 00:0A3A: 85 05        	sta	<R1
  2948 00:0A3C: 64 07        	stz	<R1+2
  2949 00:0A3E: D4 07        	pei	<R1+2
  2950 00:0A40: D4 05        	pei	<R1
  2951 00:0A42: A9 04 00     	lda	#$4
  2952                        	xref	~~~lasl
  2953 00:0A45: 22 xx xx xx  	jsl	~~~lasl
  2954 00:0A49: 85 01        	sta	<R0
  2955 00:0A4B: 86 03        	stx	<R0+2
  2956 00:0A4D: 18           	clc
  2957 00:0A4E: AD xx xx     	lda	|~~umm_heap
  2958 00:0A51: 65 01        	adc	<R0
  2959 00:0A53: 85 09        	sta	<R2
  2960 00:0A55: AD xx xx     	lda	|~~umm_heap+2
  2961 00:0A58: 65 03        	adc	<R0+2
  2962 00:0A5A: 85 0B        	sta	<R2+2
  2963 00:0A5C: A5 09        	lda	<R2
  2964 00:0A5E: C5 18        	cmp	<L90+ptr_0
  2965 00:0A60: D0 04        	bne	L99
  2966 00:0A62: A5 0B        	lda	<R2+2
  2967 00:0A64: C5 1A        	cmp	<L90+ptr_0+2
  2968                        L99:
  2969 00:0A66: F0 03        	beq	L100
  2970 00:0A68: 82 16 00     	brl	L10041
  2971                        L100:
  2972                        	.line	87
  2973                        	.line	90
  2974                        	.line	92
  2975 00:0A6B: A6 1A        	ldx	<L90+ptr_0+2
  2976 00:0A6D: A5 18        	lda	<L90+ptr_0
  2977                        L101:
  2978 00:0A6F: A8           	tay
  2979 00:0A70: A5 16        	lda	<L90+2
  2980 00:0A72: 85 1C        	sta	<L90+2+6
  2981 00:0A74: A5 15        	lda	<L90+1
  2982 00:0A76: 85 1B        	sta	<L90+1+6
  2983 00:0A78: 2B           	pld
  2984 00:0A79: 3B           	tsc
  2985 00:0A7A: 18           	clc
  2986 00:0A7B: 69 1A 00     	adc	#L90+6
  2987 00:0A7E: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 58


  2988 00:0A7F: 98           	tya
  2989 00:0A80: 6B           	rtl
  2990                        	.line	93
  2991                        L10041:
  2992                        	.line	94
  2993 00:0A81: 82 1F 00     	brl	L10042
  2994                        L10039:
  2995                        	.line	96
  2996                        	.line	97
  2997 00:0A84: EE xx xx     	inc	|~~ummHeapInfo+4
  2998 00:0A87: D0 03        	bne	L102
  2999 00:0A89: EE xx xx     	inc	|~~ummHeapInfo+4+2
  3000                        L102:
  3001                        	.line	98
  3002 00:0A8C: A5 13        	lda	<L91+curBlocks_2
  3003 00:0A8E: 85 01        	sta	<R0
  3004 00:0A90: 64 03        	stz	<R0+2
  3005 00:0A92: 18           	clc
  3006 00:0A93: A5 01        	lda	<R0
  3007 00:0A95: 6D xx xx     	adc	|~~ummHeapInfo+16
  3008 00:0A98: 8D xx xx     	sta	|~~ummHeapInfo+16
  3009 00:0A9B: A5 03        	lda	<R0+2
  3010 00:0A9D: 6D xx xx     	adc	|~~ummHeapInfo+16+2
  3011 00:0AA0: 8D xx xx     	sta	|~~ummHeapInfo+16+2
  3012                        	.line	106
  3013                        L10042:
  3014                        	.line	108
  3015 00:0AA3: A5 11        	lda	<L91+blockNo_1
  3016 00:0AA5: 85 05        	sta	<R1
  3017 00:0AA7: 64 07        	stz	<R1+2
  3018 00:0AA9: D4 07        	pei	<R1+2
  3019 00:0AAB: D4 05        	pei	<R1
  3020 00:0AAD: A9 04 00     	lda	#$4
  3021                        	xref	~~~lasl
  3022 00:0AB0: 22 xx xx xx  	jsl	~~~lasl
  3023 00:0AB4: 85 01        	sta	<R0
  3024 00:0AB6: 86 03        	stx	<R0+2
  3025 00:0AB8: 18           	clc
  3026 00:0AB9: AD xx xx     	lda	|~~umm_heap
  3027 00:0ABC: 65 01        	adc	<R0
  3028 00:0ABE: 85 09        	sta	<R2
  3029 00:0AC0: AD xx xx     	lda	|~~umm_heap+2
  3030 00:0AC3: 65 03        	adc	<R0+2
  3031 00:0AC5: 85 0B        	sta	<R2+2
  3032 00:0AC7: A7 09        	lda	[<R2]
  3033 00:0AC9: 29 FF 7F     	and	#<$7fff
  3034 00:0ACC: 85 01        	sta	<R0
  3035 00:0ACE: 64 03        	stz	<R0+2
  3036 00:0AD0: A5 01        	lda	<R0
  3037 00:0AD2: 85 11        	sta	<L91+blockNo_1
  3038                        	.endblock	109
  3039                        	.line	109
  3040 00:0AD4: 82 66 FE     	brl	L10037
  3041                        L10038:
  3042                        	.line	116
  3043                        	.block	118
  3044             00000002   curBlocks_3	set	2
  3045                        	.sym	curBlocks,2,16,1,16
  Sat Jul 10 2021  1:15                                                Page 59


  3046 00:0AD7: A5 11        	lda	<L91+blockNo_1
  3047 00:0AD9: 85 01        	sta	<R0
  3048 00:0ADB: 64 03        	stz	<R0+2
  3049 00:0ADD: 38           	sec
  3050 00:0ADE: AD xx xx     	lda	|~~umm_numblocks
  3051 00:0AE1: E5 01        	sbc	<R0
  3052 00:0AE3: 85 05        	sta	<R1
  3053 00:0AE5: AD xx xx     	lda	|~~umm_numblocks+2
  3054 00:0AE8: E5 03        	sbc	<R0+2
  3055 00:0AEA: 85 07        	sta	<R1+2
  3056 00:0AEC: A5 05        	lda	<R1
  3057 00:0AEE: 85 13        	sta	<L91+curBlocks_3
  3058                        	.line	118
  3059 00:0AF0: A5 13        	lda	<L91+curBlocks_3
  3060 00:0AF2: 85 01        	sta	<R0
  3061 00:0AF4: 64 03        	stz	<R0+2
  3062 00:0AF6: 18           	clc
  3063 00:0AF7: A5 01        	lda	<R0
  3064 00:0AF9: 6D xx xx     	adc	|~~ummHeapInfo+20
  3065 00:0AFC: 8D xx xx     	sta	|~~ummHeapInfo+20
  3066 00:0AFF: A5 03        	lda	<R0+2
  3067 00:0B01: 6D xx xx     	adc	|~~ummHeapInfo+20+2
  3068 00:0B04: 8D xx xx     	sta	|~~ummHeapInfo+20+2
  3069                        	.line	119
  3070 00:0B07: A5 13        	lda	<L91+curBlocks_3
  3071 00:0B09: 85 01        	sta	<R0
  3072 00:0B0B: 64 03        	stz	<R0+2
  3073 00:0B0D: 18           	clc
  3074 00:0B0E: A5 01        	lda	<R0
  3075 00:0B10: 6D xx xx     	adc	|~~ummHeapInfo+12
  3076 00:0B13: 8D xx xx     	sta	|~~ummHeapInfo+12
  3077 00:0B16: A5 03        	lda	<R0+2
  3078 00:0B18: 6D xx xx     	adc	|~~ummHeapInfo+12+2
  3079 00:0B1B: 8D xx xx     	sta	|~~ummHeapInfo+12+2
  3080                        	.line	121
  3081 00:0B1E: A5 13        	lda	<L91+curBlocks_3
  3082 00:0B20: 85 01        	sta	<R0
  3083 00:0B22: 64 03        	stz	<R0+2
  3084 00:0B24: AD xx xx     	lda	|~~ummHeapInfo+24
  3085 00:0B27: C5 01        	cmp	<R0
  3086 00:0B29: AD xx xx     	lda	|~~ummHeapInfo+24+2
  3087 00:0B2C: E5 03        	sbc	<R0+2
  3088 00:0B2E: 90 03        	bcc	L104
  3089 00:0B30: 82 08 00     	brl	L10043
  3090                        L104:
  3091                        	.line	122
  3092                        	.line	123
  3093 00:0B33: A5 13        	lda	<L91+curBlocks_3
  3094 00:0B35: 8D xx xx     	sta	|~~ummHeapInfo+24
  3095 00:0B38: 9C xx xx     	stz	|~~ummHeapInfo+24+2
  3096                        	.line	124
  3097                        L10043:
  3098                        	.endblock	125
  3099                        	.line	125
  3100                        	.line	152
  3101                        	.line	154
  3102 00:0B3B: A9 xx xx     	lda	#<~~ummHeapInfo
  3103 00:0B3E: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 60


  3104                        	xref	_BEG_DATA
  3105 00:0B40: A9 xx xx     	lda	#_BEG_DATA>>16
  3106 00:0B43: 85 03        	sta	<R0+2
  3107 00:0B45: A6 03        	ldx	<R0+2
  3108 00:0B47: A5 01        	lda	<R0
  3109 00:0B49: 82 23 FF     	brl	L101
  3110                        	.line	155
  3111                        	.endblock	155
  3112             00000014   L90	equ	20
  3113             00000011   L91	equ	17
  3114                        	ends
  3115                        	efunc
  3116                        	.endfunc	155,17,20
  3117                        	.line	155
  3118                        	.line	159
  3119                        	.line	160
  3120                        	code
  3121                        	xdef	~~umm_free_heap_size
  3122                        	func
  3123                        	.function	160
  3124                        ~~umm_free_heap_size:
  3125                        	longa	on
  3126                        	longi	on
  3127 00:0B4C: 3B           	tsc
  3128 00:0B4D: 38           	sec
  3129 00:0B4E: E9 00 00     	sbc	#L105
  3130 00:0B51: 1B           	tcs
  3131 00:0B52: 0B           	phd
  3132 00:0B53: 5B           	tcd
  3133                        	.block	160
  3134                        	.line	161
  3135 00:0B54: F4 00 00     	pea	#<$0
  3136 00:0B57: F4 00 00     	pea	#^$0
  3137 00:0B5A: F4 00 00     	pea	#<$0
  3138 00:0B5D: 22 xx xx xx  	jsl	~~umm_info
  3139                        	.line	162
  3140 00:0B61: AD xx xx     	lda	|~~ummHeapInfo+20
  3141 00:0B64: 0A           	asl	A
  3142 00:0B65: 0A           	asl	A
  3143 00:0B66: 0A           	asl	A
  3144 00:0B67: 0A           	asl	A
  3145                        L108:
  3146 00:0B68: A8           	tay
  3147 00:0B69: 2B           	pld
  3148 00:0B6A: 3B           	tsc
  3149 00:0B6B: 18           	clc
  3150 00:0B6C: 69 00 00     	adc	#L105
  3151 00:0B6F: 1B           	tcs
  3152 00:0B70: 98           	tya
  3153 00:0B71: 6B           	rtl
  3154                        	.line	163
  3155                        	.endblock	163
  3156             00000000   L105	equ	0
  3157             00000001   L106	equ	1
  3158                        	ends
  3159                        	efunc
  3160                        	.endfunc	163,1,0
  3161                        	.line	163
  Sat Jul 10 2021  1:15                                                Page 61


  3162                        	.line	166
  3163                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",98
  3164                        ;
  3165                        ;/* ----------------------------------------------
                    -------------------------- */
  3166                        ;
  3167                        ;static unsigned long umm_blocks(size_t size)
  3168                        ;{
  3169                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",102
  3170                        	.line	103
  3171                        	code
  3172                        	func
  3173                        	.function	103
  3174                        ~~umm_blocks:
  3175                        	longa	on
  3176                        	longi	on
  3177 00:0B72: 3B           	tsc
  3178 00:0B73: 38           	sec
  3179 00:0B74: E9 08 00     	sbc	#L109
  3180 00:0B77: 1B           	tcs
  3181 00:0B78: 0B           	phd
  3182 00:0B79: 5B           	tcd
  3183             00000004   size_0	set	4
  3184                        	.block	103
  3185                        ;
  3186                        ;	/*
  3187                        ;	 * The calculation of the block size is not too 
                    difficult, but there are
  3188                        ;	 * a few little things that we need to be mindfu
                    l of.
  3189                        ;	 *
  3190                        ;	 * When a block removed from the free list, the 
                    space used by the free
  3191                        ;	 * pointers is available for data. That's what t
                    he first calculation
  3192                        ;	 * of size is doing.
  3193                        ;	 */
  3194                        ;
  3195                        ;	if (size <= (sizeof(((umm_block *) 0)->body)))
  3196                        	.sym	size,4,16,6,16
  3197                        	.line	114
  3198                        ;		return (1);
  3199 00:0B7A: A9 08 00     	lda	#$8
  3200 00:0B7D: C5 0C        	cmp	<L109+size_0
  3201 00:0B7F: B0 03        	bcs	L112
  3202 00:0B81: 82 19 00     	brl	L10044
  3203                        L112:
  3204                        	.line	115
  3205 00:0B84: A9 00 00     	lda	#$0
  3206 00:0B87: AA           	tax
  3207 00:0B88: A9 01 00     	lda	#$1
  3208                        L113:
  3209 00:0B8B: A8           	tay
  3210 00:0B8C: A5 0A        	lda	<L109+2
  3211 00:0B8E: 85 0C        	sta	<L109+2+2
  3212 00:0B90: A5 09        	lda	<L109+1
  Sat Jul 10 2021  1:15                                                Page 62


  3213 00:0B92: 85 0B        	sta	<L109+1+2
  3214 00:0B94: 2B           	pld
  3215 00:0B95: 3B           	tsc
  3216 00:0B96: 18           	clc
  3217 00:0B97: 69 0A 00     	adc	#L109+2
  3218 00:0B9A: 1B           	tcs
  3219 00:0B9B: 98           	tya
  3220 00:0B9C: 6B           	rtl
  3221                        ;
  3222                        ;	/*
  3223                        ;	 * If it's for more than that, then we need to f
                    igure out the number of
  3224                        ;	 * additional whole blocks the size of an umm_bl
                    ock are required.
  3225                        ;	 */
  3226                        ;
  3227                        ;	size -= (1 + (sizeof(((umm_block *) 0)->body)));
  3228                        L10044:
  3229                        	.line	122
  3230 00:0B9D: 18           	clc
  3231 00:0B9E: A9 F7 FF     	lda	#$fff7
  3232 00:0BA1: 65 0C        	adc	<L109+size_0
  3233 00:0BA3: 85 0C        	sta	<L109+size_0
  3234                        ;
  3235                        ;	return (2 + size / (sizeof(umm_block)));
  3236                        	.line	124
  3237 00:0BA5: A5 0C        	lda	<L109+size_0
  3238 00:0BA7: 4A           	lsr	A
  3239 00:0BA8: 4A           	lsr	A
  3240 00:0BA9: 4A           	lsr	A
  3241 00:0BAA: 4A           	lsr	A
  3242 00:0BAB: 85 01        	sta	<R0
  3243 00:0BAD: 18           	clc
  3244 00:0BAE: A9 02 00     	lda	#$2
  3245 00:0BB1: 65 01        	adc	<R0
  3246 00:0BB3: 85 05        	sta	<R1
  3247 00:0BB5: A5 05        	lda	<R1
  3248 00:0BB7: 85 01        	sta	<R0
  3249 00:0BB9: 64 03        	stz	<R0+2
  3250 00:0BBB: A6 03        	ldx	<R0+2
  3251 00:0BBD: A5 01        	lda	<R0
  3252 00:0BBF: 82 C9 FF     	brl	L113
  3253                        ;}
  3254                        	.line	125
  3255                        	.endblock	125
  3256             00000008   L109	equ	8
  3257             00000009   L110	equ	9
  3258                        	ends
  3259                        	efunc
  3260                        	.endfunc	125,9,8
  3261                        	.line	125
  3262                        ;
  3263                        ;/* ----------------------------------------------
                    -------------------------- */
  3264                        ;/*
  3265                        ; * Split the block `c` into two blocks: `c` and `
                    c + blocks`.
  3266                        ; *
  Sat Jul 10 2021  1:15                                                Page 63


  3267                        ; * - `new_freemask` should be `0` if `c + blocks`
                     used, or `UMM_FREELIST_MASK`
  3268                        ; *   otherwise.
  3269                        ; *
  3270                        ; * Note that free pointers are NOT modified by th
                    is function.
  3271                        ; */
  3272                        ;static void umm_split_block(unsigned long c, unsi
                    gned long blocks,
  3273                        ;		unsigned long new_freemask)
  3274                        ;{
  3275                        	.line	136
  3276                        	.line	138
  3277                        	code
  3278                        	func
  3279                        	.function	138
  3280                        ~~umm_split_block:
  3281                        	longa	on
  3282                        	longi	on
  3283 00:0BC2: 3B           	tsc
  3284 00:0BC3: 38           	sec
  3285 00:0BC4: E9 10 00     	sbc	#L114
  3286 00:0BC7: 1B           	tcs
  3287 00:0BC8: 0B           	phd
  3288 00:0BC9: 5B           	tcd
  3289             00000004   c_0	set	4
  3290             00000008   blocks_0	set	8
  3291             0000000C   new_freemask_0	set	12
  3292                        	.block	138
  3293                        ;
  3294                        ;	UMM_NBLOCK(c+blocks) = (UMM_NBLOCK(c) & UMM_BLOC
                    KNO_MASK) | new_freemask;
  3295                        	.sym	c,4,18,6,32
  3296                        	.sym	blocks,8,18,6,32
  3297                        	.sym	new_freemask,12,18,6,32
  3298                        	.line	140
  3299 00:0BCA: 18           	clc
  3300 00:0BCB: A5 14        	lda	<L114+c_0
  3301 00:0BCD: 65 18        	adc	<L114+blocks_0
  3302 00:0BCF: 85 05        	sta	<R1
  3303 00:0BD1: A5 16        	lda	<L114+c_0+2
  3304 00:0BD3: 65 1A        	adc	<L114+blocks_0+2
  3305 00:0BD5: 85 07        	sta	<R1+2
  3306 00:0BD7: D4 07        	pei	<R1+2
  3307 00:0BD9: D4 05        	pei	<R1
  3308 00:0BDB: A9 04 00     	lda	#$4
  3309                        	xref	~~~lasl
  3310 00:0BDE: 22 xx xx xx  	jsl	~~~lasl
  3311 00:0BE2: 85 01        	sta	<R0
  3312 00:0BE4: 86 03        	stx	<R0+2
  3313 00:0BE6: 18           	clc
  3314 00:0BE7: AD xx xx     	lda	|~~umm_heap
  3315 00:0BEA: 65 01        	adc	<R0
  3316 00:0BEC: 85 09        	sta	<R2
  3317 00:0BEE: AD xx xx     	lda	|~~umm_heap+2
  3318 00:0BF1: 65 03        	adc	<R0+2
  3319 00:0BF3: 85 0B        	sta	<R2+2
  3320 00:0BF5: A5 14        	lda	<L114+c_0
  Sat Jul 10 2021  1:15                                                Page 64


  3321 00:0BF7: 85 01        	sta	<R0
  3322 00:0BF9: A5 16        	lda	<L114+c_0+2
  3323 00:0BFB: 85 03        	sta	<R0+2
  3324 00:0BFD: 06 01        	asl	<R0
  3325 00:0BFF: 26 03        	rol	<R0+2
  3326 00:0C01: 06 01        	asl	<R0
  3327 00:0C03: 26 03        	rol	<R0+2
  3328 00:0C05: 06 01        	asl	<R0
  3329 00:0C07: 26 03        	rol	<R0+2
  3330 00:0C09: 06 01        	asl	<R0
  3331 00:0C0B: 26 03        	rol	<R0+2
  3332 00:0C0D: 18           	clc
  3333 00:0C0E: AD xx xx     	lda	|~~umm_heap
  3334 00:0C11: 65 01        	adc	<R0
  3335 00:0C13: 85 0D        	sta	<R3
  3336 00:0C15: AD xx xx     	lda	|~~umm_heap+2
  3337 00:0C18: 65 03        	adc	<R0+2
  3338 00:0C1A: 85 0F        	sta	<R3+2
  3339 00:0C1C: A7 0D        	lda	[<R3]
  3340 00:0C1E: 29 FF 7F     	and	#<$7fff
  3341 00:0C21: 85 01        	sta	<R0
  3342 00:0C23: 64 03        	stz	<R0+2
  3343 00:0C25: A5 1C        	lda	<L114+new_freemask_0
  3344 00:0C27: 05 01        	ora	<R0
  3345 00:0C29: 85 0D        	sta	<R3
  3346 00:0C2B: A5 1E        	lda	<L114+new_freemask_0+2
  3347 00:0C2D: 05 03        	ora	<R0+2
  3348 00:0C2F: 85 0F        	sta	<R3+2
  3349 00:0C31: A5 0D        	lda	<R3
  3350 00:0C33: 87 09        	sta	[<R2]
  3351 00:0C35: A5 0F        	lda	<R3+2
  3352 00:0C37: A0 02 00     	ldy	#$2
  3353 00:0C3A: 97 09        	sta	[<R2],Y
  3354                        ;	UMM_PBLOCK(c+blocks) = c;
  3355                        	.line	141
  3356 00:0C3C: 18           	clc
  3357 00:0C3D: A5 14        	lda	<L114+c_0
  3358 00:0C3F: 65 18        	adc	<L114+blocks_0
  3359 00:0C41: 85 05        	sta	<R1
  3360 00:0C43: A5 16        	lda	<L114+c_0+2
  3361 00:0C45: 65 1A        	adc	<L114+blocks_0+2
  3362 00:0C47: 85 07        	sta	<R1+2
  3363 00:0C49: D4 07        	pei	<R1+2
  3364 00:0C4B: D4 05        	pei	<R1
  3365 00:0C4D: A9 04 00     	lda	#$4
  3366                        	xref	~~~lasl
  3367 00:0C50: 22 xx xx xx  	jsl	~~~lasl
  3368 00:0C54: 85 01        	sta	<R0
  3369 00:0C56: 86 03        	stx	<R0+2
  3370 00:0C58: 18           	clc
  3371 00:0C59: A9 04 00     	lda	#$4
  3372 00:0C5C: 6D xx xx     	adc	|~~umm_heap
  3373 00:0C5F: 85 09        	sta	<R2
  3374 00:0C61: A9 00 00     	lda	#$0
  3375 00:0C64: 6D xx xx     	adc	|~~umm_heap+2
  3376 00:0C67: 85 0B        	sta	<R2+2
  3377 00:0C69: 18           	clc
  3378 00:0C6A: A5 09        	lda	<R2
  Sat Jul 10 2021  1:15                                                Page 65


  3379 00:0C6C: 65 01        	adc	<R0
  3380 00:0C6E: 85 0D        	sta	<R3
  3381 00:0C70: A5 0B        	lda	<R2+2
  3382 00:0C72: 65 03        	adc	<R0+2
  3383 00:0C74: 85 0F        	sta	<R3+2
  3384 00:0C76: A5 14        	lda	<L114+c_0
  3385 00:0C78: 87 0D        	sta	[<R3]
  3386 00:0C7A: A5 16        	lda	<L114+c_0+2
  3387 00:0C7C: A0 02 00     	ldy	#$2
  3388 00:0C7F: 97 0D        	sta	[<R3],Y
  3389                        ;
  3390                        ;	UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (
                    c + blocks);
  3391                        	.line	143
  3392 00:0C81: A5 14        	lda	<L114+c_0
  3393 00:0C83: 85 05        	sta	<R1
  3394 00:0C85: A5 16        	lda	<L114+c_0+2
  3395 00:0C87: 85 07        	sta	<R1+2
  3396 00:0C89: 06 05        	asl	<R1
  3397 00:0C8B: 26 07        	rol	<R1+2
  3398 00:0C8D: 06 05        	asl	<R1
  3399 00:0C8F: 26 07        	rol	<R1+2
  3400 00:0C91: 06 05        	asl	<R1
  3401 00:0C93: 26 07        	rol	<R1+2
  3402 00:0C95: 06 05        	asl	<R1
  3403 00:0C97: 26 07        	rol	<R1+2
  3404 00:0C99: 18           	clc
  3405 00:0C9A: AD xx xx     	lda	|~~umm_heap
  3406 00:0C9D: 65 05        	adc	<R1
  3407 00:0C9F: 85 09        	sta	<R2
  3408 00:0CA1: AD xx xx     	lda	|~~umm_heap+2
  3409 00:0CA4: 65 07        	adc	<R1+2
  3410 00:0CA6: 85 0B        	sta	<R2+2
  3411 00:0CA8: A7 09        	lda	[<R2]
  3412 00:0CAA: 29 FF 7F     	and	#<$7fff
  3413 00:0CAD: 85 05        	sta	<R1
  3414 00:0CAF: 64 07        	stz	<R1+2
  3415 00:0CB1: D4 07        	pei	<R1+2
  3416 00:0CB3: D4 05        	pei	<R1
  3417 00:0CB5: A9 04 00     	lda	#$4
  3418                        	xref	~~~lasl
  3419 00:0CB8: 22 xx xx xx  	jsl	~~~lasl
  3420 00:0CBC: 85 01        	sta	<R0
  3421 00:0CBE: 86 03        	stx	<R0+2
  3422 00:0CC0: 18           	clc
  3423 00:0CC1: A9 04 00     	lda	#$4
  3424 00:0CC4: 6D xx xx     	adc	|~~umm_heap
  3425 00:0CC7: 85 09        	sta	<R2
  3426 00:0CC9: A9 00 00     	lda	#$0
  3427 00:0CCC: 6D xx xx     	adc	|~~umm_heap+2
  3428 00:0CCF: 85 0B        	sta	<R2+2
  3429 00:0CD1: 18           	clc
  3430 00:0CD2: A5 09        	lda	<R2
  3431 00:0CD4: 65 01        	adc	<R0
  3432 00:0CD6: 85 0D        	sta	<R3
  3433 00:0CD8: A5 0B        	lda	<R2+2
  3434 00:0CDA: 65 03        	adc	<R0+2
  3435 00:0CDC: 85 0F        	sta	<R3+2
  Sat Jul 10 2021  1:15                                                Page 66


  3436 00:0CDE: 18           	clc
  3437 00:0CDF: A5 14        	lda	<L114+c_0
  3438 00:0CE1: 65 18        	adc	<L114+blocks_0
  3439 00:0CE3: 85 01        	sta	<R0
  3440 00:0CE5: A5 16        	lda	<L114+c_0+2
  3441 00:0CE7: 65 1A        	adc	<L114+blocks_0+2
  3442 00:0CE9: 85 03        	sta	<R0+2
  3443 00:0CEB: A5 01        	lda	<R0
  3444 00:0CED: 87 0D        	sta	[<R3]
  3445 00:0CEF: A5 03        	lda	<R0+2
  3446 00:0CF1: A0 02 00     	ldy	#$2
  3447 00:0CF4: 97 0D        	sta	[<R3],Y
  3448                        ;	UMM_NBLOCK(c) = (c + blocks);
  3449                        	.line	144
  3450 00:0CF6: A5 14        	lda	<L114+c_0
  3451 00:0CF8: 85 01        	sta	<R0
  3452 00:0CFA: A5 16        	lda	<L114+c_0+2
  3453 00:0CFC: 85 03        	sta	<R0+2
  3454 00:0CFE: 06 01        	asl	<R0
  3455 00:0D00: 26 03        	rol	<R0+2
  3456 00:0D02: 06 01        	asl	<R0
  3457 00:0D04: 26 03        	rol	<R0+2
  3458 00:0D06: 06 01        	asl	<R0
  3459 00:0D08: 26 03        	rol	<R0+2
  3460 00:0D0A: 06 01        	asl	<R0
  3461 00:0D0C: 26 03        	rol	<R0+2
  3462 00:0D0E: 18           	clc
  3463 00:0D0F: AD xx xx     	lda	|~~umm_heap
  3464 00:0D12: 65 01        	adc	<R0
  3465 00:0D14: 85 05        	sta	<R1
  3466 00:0D16: AD xx xx     	lda	|~~umm_heap+2
  3467 00:0D19: 65 03        	adc	<R0+2
  3468 00:0D1B: 85 07        	sta	<R1+2
  3469 00:0D1D: 18           	clc
  3470 00:0D1E: A5 14        	lda	<L114+c_0
  3471 00:0D20: 65 18        	adc	<L114+blocks_0
  3472 00:0D22: 85 01        	sta	<R0
  3473 00:0D24: A5 16        	lda	<L114+c_0+2
  3474 00:0D26: 65 1A        	adc	<L114+blocks_0+2
  3475 00:0D28: 85 03        	sta	<R0+2
  3476 00:0D2A: A5 01        	lda	<R0
  3477 00:0D2C: 87 05        	sta	[<R1]
  3478 00:0D2E: A5 03        	lda	<R0+2
  3479 00:0D30: A0 02 00     	ldy	#$2
  3480 00:0D33: 97 05        	sta	[<R1],Y
  3481                        ;}
  3482                        	.line	145
  3483                        L117:
  3484 00:0D35: A5 12        	lda	<L114+2
  3485 00:0D37: 85 1E        	sta	<L114+2+12
  3486 00:0D39: A5 11        	lda	<L114+1
  3487 00:0D3B: 85 1D        	sta	<L114+1+12
  3488 00:0D3D: 2B           	pld
  3489 00:0D3E: 3B           	tsc
  3490 00:0D3F: 18           	clc
  3491 00:0D40: 69 1C 00     	adc	#L114+12
  3492 00:0D43: 1B           	tcs
  3493 00:0D44: 6B           	rtl
  Sat Jul 10 2021  1:15                                                Page 67


  3494                        	.endblock	145
  3495             00000010   L114	equ	16
  3496             00000011   L115	equ	17
  3497                        	ends
  3498                        	efunc
  3499                        	.endfunc	145,17,16
  3500                        	.line	145
  3501                        ;
  3502                        ;/* ----------------------------------------------
                    -------------------------- */
  3503                        ;
  3504                        ;static void umm_disconnect_from_free_list(unsigne
                    d long c)
  3505                        ;{
  3506                        	.line	149
  3507                        	.line	150
  3508                        	code
  3509                        	func
  3510                        	.function	150
  3511                        ~~umm_disconnect_from_free_list:
  3512                        	longa	on
  3513                        	longi	on
  3514 00:0D45: 3B           	tsc
  3515 00:0D46: 38           	sec
  3516 00:0D47: E9 10 00     	sbc	#L118
  3517 00:0D4A: 1B           	tcs
  3518 00:0D4B: 0B           	phd
  3519 00:0D4C: 5B           	tcd
  3520             00000004   c_0	set	4
  3521                        	.block	150
  3522                        ;	/* Disconnect this block from the FREE list */
  3523                        ;
  3524                        ;	UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
  3525                        	.sym	c,4,18,6,32
  3526                        	.line	153
  3527 00:0D4D: A5 14        	lda	<L118+c_0
  3528 00:0D4F: 85 05        	sta	<R1
  3529 00:0D51: A5 16        	lda	<L118+c_0+2
  3530 00:0D53: 85 07        	sta	<R1+2
  3531 00:0D55: 06 05        	asl	<R1
  3532 00:0D57: 26 07        	rol	<R1+2
  3533 00:0D59: 06 05        	asl	<R1
  3534 00:0D5B: 26 07        	rol	<R1+2
  3535 00:0D5D: 06 05        	asl	<R1
  3536 00:0D5F: 26 07        	rol	<R1+2
  3537 00:0D61: 06 05        	asl	<R1
  3538 00:0D63: 26 07        	rol	<R1+2
  3539 00:0D65: 18           	clc
  3540 00:0D66: A9 0C 00     	lda	#$c
  3541 00:0D69: 6D xx xx     	adc	|~~umm_heap
  3542 00:0D6C: 85 09        	sta	<R2
  3543 00:0D6E: A9 00 00     	lda	#$0
  3544 00:0D71: 6D xx xx     	adc	|~~umm_heap+2
  3545 00:0D74: 85 0B        	sta	<R2+2
  3546 00:0D76: 18           	clc
  3547 00:0D77: A5 09        	lda	<R2
  3548 00:0D79: 65 05        	adc	<R1
  3549 00:0D7B: 85 0D        	sta	<R3
  Sat Jul 10 2021  1:15                                                Page 68


  3550 00:0D7D: A5 0B        	lda	<R2+2
  3551 00:0D7F: 65 07        	adc	<R1+2
  3552 00:0D81: 85 0F        	sta	<R3+2
  3553 00:0D83: A0 02 00     	ldy	#$2
  3554 00:0D86: B7 0D        	lda	[<R3],Y
  3555 00:0D88: 48           	pha
  3556 00:0D89: A7 0D        	lda	[<R3]
  3557 00:0D8B: 48           	pha
  3558 00:0D8C: A9 04 00     	lda	#$4
  3559                        	xref	~~~lasl
  3560 00:0D8F: 22 xx xx xx  	jsl	~~~lasl
  3561 00:0D93: 85 01        	sta	<R0
  3562 00:0D95: 86 03        	stx	<R0+2
  3563 00:0D97: 18           	clc
  3564 00:0D98: A9 08 00     	lda	#$8
  3565 00:0D9B: 6D xx xx     	adc	|~~umm_heap
  3566 00:0D9E: 85 05        	sta	<R1
  3567 00:0DA0: A9 00 00     	lda	#$0
  3568 00:0DA3: 6D xx xx     	adc	|~~umm_heap+2
  3569 00:0DA6: 85 07        	sta	<R1+2
  3570 00:0DA8: 18           	clc
  3571 00:0DA9: A5 05        	lda	<R1
  3572 00:0DAB: 65 01        	adc	<R0
  3573 00:0DAD: 85 09        	sta	<R2
  3574 00:0DAF: A5 07        	lda	<R1+2
  3575 00:0DB1: 65 03        	adc	<R0+2
  3576 00:0DB3: 85 0B        	sta	<R2+2
  3577 00:0DB5: A5 14        	lda	<L118+c_0
  3578 00:0DB7: 85 01        	sta	<R0
  3579 00:0DB9: A5 16        	lda	<L118+c_0+2
  3580 00:0DBB: 85 03        	sta	<R0+2
  3581 00:0DBD: 06 01        	asl	<R0
  3582 00:0DBF: 26 03        	rol	<R0+2
  3583 00:0DC1: 06 01        	asl	<R0
  3584 00:0DC3: 26 03        	rol	<R0+2
  3585 00:0DC5: 06 01        	asl	<R0
  3586 00:0DC7: 26 03        	rol	<R0+2
  3587 00:0DC9: 06 01        	asl	<R0
  3588 00:0DCB: 26 03        	rol	<R0+2
  3589 00:0DCD: 18           	clc
  3590 00:0DCE: A9 08 00     	lda	#$8
  3591 00:0DD1: 6D xx xx     	adc	|~~umm_heap
  3592 00:0DD4: 85 05        	sta	<R1
  3593 00:0DD6: A9 00 00     	lda	#$0
  3594 00:0DD9: 6D xx xx     	adc	|~~umm_heap+2
  3595 00:0DDC: 85 07        	sta	<R1+2
  3596 00:0DDE: 18           	clc
  3597 00:0DDF: A5 05        	lda	<R1
  3598 00:0DE1: 65 01        	adc	<R0
  3599 00:0DE3: 85 0D        	sta	<R3
  3600 00:0DE5: A5 07        	lda	<R1+2
  3601 00:0DE7: 65 03        	adc	<R0+2
  3602 00:0DE9: 85 0F        	sta	<R3+2
  3603 00:0DEB: A7 0D        	lda	[<R3]
  3604 00:0DED: 87 09        	sta	[<R2]
  3605 00:0DEF: A0 02 00     	ldy	#$2
  3606 00:0DF2: B7 0D        	lda	[<R3],Y
  3607 00:0DF4: A0 02 00     	ldy	#$2
  Sat Jul 10 2021  1:15                                                Page 69


  3608 00:0DF7: 97 09        	sta	[<R2],Y
  3609                        ;	UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
  3610                        	.line	154
  3611 00:0DF9: A5 14        	lda	<L118+c_0
  3612 00:0DFB: 85 05        	sta	<R1
  3613 00:0DFD: A5 16        	lda	<L118+c_0+2
  3614 00:0DFF: 85 07        	sta	<R1+2
  3615 00:0E01: 06 05        	asl	<R1
  3616 00:0E03: 26 07        	rol	<R1+2
  3617 00:0E05: 06 05        	asl	<R1
  3618 00:0E07: 26 07        	rol	<R1+2
  3619 00:0E09: 06 05        	asl	<R1
  3620 00:0E0B: 26 07        	rol	<R1+2
  3621 00:0E0D: 06 05        	asl	<R1
  3622 00:0E0F: 26 07        	rol	<R1+2
  3623 00:0E11: 18           	clc
  3624 00:0E12: A9 08 00     	lda	#$8
  3625 00:0E15: 6D xx xx     	adc	|~~umm_heap
  3626 00:0E18: 85 09        	sta	<R2
  3627 00:0E1A: A9 00 00     	lda	#$0
  3628 00:0E1D: 6D xx xx     	adc	|~~umm_heap+2
  3629 00:0E20: 85 0B        	sta	<R2+2
  3630 00:0E22: 18           	clc
  3631 00:0E23: A5 09        	lda	<R2
  3632 00:0E25: 65 05        	adc	<R1
  3633 00:0E27: 85 0D        	sta	<R3
  3634 00:0E29: A5 0B        	lda	<R2+2
  3635 00:0E2B: 65 07        	adc	<R1+2
  3636 00:0E2D: 85 0F        	sta	<R3+2
  3637 00:0E2F: A0 02 00     	ldy	#$2
  3638 00:0E32: B7 0D        	lda	[<R3],Y
  3639 00:0E34: 48           	pha
  3640 00:0E35: A7 0D        	lda	[<R3]
  3641 00:0E37: 48           	pha
  3642 00:0E38: A9 04 00     	lda	#$4
  3643                        	xref	~~~lasl
  3644 00:0E3B: 22 xx xx xx  	jsl	~~~lasl
  3645 00:0E3F: 85 01        	sta	<R0
  3646 00:0E41: 86 03        	stx	<R0+2
  3647 00:0E43: 18           	clc
  3648 00:0E44: A9 0C 00     	lda	#$c
  3649 00:0E47: 6D xx xx     	adc	|~~umm_heap
  3650 00:0E4A: 85 05        	sta	<R1
  3651 00:0E4C: A9 00 00     	lda	#$0
  3652 00:0E4F: 6D xx xx     	adc	|~~umm_heap+2
  3653 00:0E52: 85 07        	sta	<R1+2
  3654 00:0E54: 18           	clc
  3655 00:0E55: A5 05        	lda	<R1
  3656 00:0E57: 65 01        	adc	<R0
  3657 00:0E59: 85 09        	sta	<R2
  3658 00:0E5B: A5 07        	lda	<R1+2
  3659 00:0E5D: 65 03        	adc	<R0+2
  3660 00:0E5F: 85 0B        	sta	<R2+2
  3661 00:0E61: A5 14        	lda	<L118+c_0
  3662 00:0E63: 85 01        	sta	<R0
  3663 00:0E65: A5 16        	lda	<L118+c_0+2
  3664 00:0E67: 85 03        	sta	<R0+2
  3665 00:0E69: 06 01        	asl	<R0
  Sat Jul 10 2021  1:15                                                Page 70


  3666 00:0E6B: 26 03        	rol	<R0+2
  3667 00:0E6D: 06 01        	asl	<R0
  3668 00:0E6F: 26 03        	rol	<R0+2
  3669 00:0E71: 06 01        	asl	<R0
  3670 00:0E73: 26 03        	rol	<R0+2
  3671 00:0E75: 06 01        	asl	<R0
  3672 00:0E77: 26 03        	rol	<R0+2
  3673 00:0E79: 18           	clc
  3674 00:0E7A: A9 0C 00     	lda	#$c
  3675 00:0E7D: 6D xx xx     	adc	|~~umm_heap
  3676 00:0E80: 85 05        	sta	<R1
  3677 00:0E82: A9 00 00     	lda	#$0
  3678 00:0E85: 6D xx xx     	adc	|~~umm_heap+2
  3679 00:0E88: 85 07        	sta	<R1+2
  3680 00:0E8A: 18           	clc
  3681 00:0E8B: A5 05        	lda	<R1
  3682 00:0E8D: 65 01        	adc	<R0
  3683 00:0E8F: 85 0D        	sta	<R3
  3684 00:0E91: A5 07        	lda	<R1+2
  3685 00:0E93: 65 03        	adc	<R0+2
  3686 00:0E95: 85 0F        	sta	<R3+2
  3687 00:0E97: A7 0D        	lda	[<R3]
  3688 00:0E99: 87 09        	sta	[<R2]
  3689 00:0E9B: A0 02 00     	ldy	#$2
  3690 00:0E9E: B7 0D        	lda	[<R3],Y
  3691 00:0EA0: A0 02 00     	ldy	#$2
  3692 00:0EA3: 97 09        	sta	[<R2],Y
  3693                        ;
  3694                        ;	/* And clear the free block indicator */
  3695                        ;
  3696                        ;	UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
  3697                        	.line	158
  3698 00:0EA5: A5 14        	lda	<L118+c_0
  3699 00:0EA7: 85 01        	sta	<R0
  3700 00:0EA9: A5 16        	lda	<L118+c_0+2
  3701 00:0EAB: 85 03        	sta	<R0+2
  3702 00:0EAD: 06 01        	asl	<R0
  3703 00:0EAF: 26 03        	rol	<R0+2
  3704 00:0EB1: 06 01        	asl	<R0
  3705 00:0EB3: 26 03        	rol	<R0+2
  3706 00:0EB5: 06 01        	asl	<R0
  3707 00:0EB7: 26 03        	rol	<R0+2
  3708 00:0EB9: 06 01        	asl	<R0
  3709 00:0EBB: 26 03        	rol	<R0+2
  3710 00:0EBD: 18           	clc
  3711 00:0EBE: AD xx xx     	lda	|~~umm_heap
  3712 00:0EC1: 65 01        	adc	<R0
  3713 00:0EC3: 85 05        	sta	<R1
  3714 00:0EC5: AD xx xx     	lda	|~~umm_heap+2
  3715 00:0EC8: 65 03        	adc	<R0+2
  3716 00:0ECA: 85 07        	sta	<R1+2
  3717 00:0ECC: A7 05        	lda	[<R1]
  3718 00:0ECE: 29 FF 7F     	and	#<$7fff
  3719 00:0ED1: 87 05        	sta	[<R1]
  3720 00:0ED3: A9 00 00     	lda	#$0
  3721 00:0ED6: A0 02 00     	ldy	#$2
  3722 00:0ED9: 97 05        	sta	[<R1],Y
  3723                        ;}
  Sat Jul 10 2021  1:15                                                Page 71


  3724                        	.line	159
  3725                        L121:
  3726 00:0EDB: A5 12        	lda	<L118+2
  3727 00:0EDD: 85 16        	sta	<L118+2+4
  3728 00:0EDF: A5 11        	lda	<L118+1
  3729 00:0EE1: 85 15        	sta	<L118+1+4
  3730 00:0EE3: 2B           	pld
  3731 00:0EE4: 3B           	tsc
  3732 00:0EE5: 18           	clc
  3733 00:0EE6: 69 14 00     	adc	#L118+4
  3734 00:0EE9: 1B           	tcs
  3735 00:0EEA: 6B           	rtl
  3736                        	.endblock	159
  3737             00000010   L118	equ	16
  3738             00000011   L119	equ	17
  3739                        	ends
  3740                        	efunc
  3741                        	.endfunc	159,17,16
  3742                        	.line	159
  3743                        ;
  3744                        ;/* ----------------------------------------------
                    --------------------------
  3745                        ; * The umm_assimilate_up() function assumes that 
                    UMM_NBLOCK(c) does NOT
  3746                        ; * have the UMM_FREELIST_MASK bit set!
  3747                        ; */
  3748                        ;
  3749                        ;static void umm_assimilate_up(unsigned long c)
  3750                        ;{
  3751                        	.line	166
  3752                        	.line	167
  3753                        	code
  3754                        	func
  3755                        	.function	167
  3756                        ~~umm_assimilate_up:
  3757                        	longa	on
  3758                        	longi	on
  3759 00:0EEB: 3B           	tsc
  3760 00:0EEC: 38           	sec
  3761 00:0EED: E9 10 00     	sbc	#L122
  3762 00:0EF0: 1B           	tcs
  3763 00:0EF1: 0B           	phd
  3764 00:0EF2: 5B           	tcd
  3765             00000004   c_0	set	4
  3766                        	.block	167
  3767                        ;
  3768                        ;	if ( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MA
                    SK)
  3769                        	.sym	c,4,18,6,32
  3770                        	.line	169
  3771                        ;	{
  3772 00:0EF3: A5 14        	lda	<L122+c_0
  3773 00:0EF5: 85 05        	sta	<R1
  3774 00:0EF7: A5 16        	lda	<L122+c_0+2
  3775 00:0EF9: 85 07        	sta	<R1+2
  3776 00:0EFB: 06 05        	asl	<R1
  3777 00:0EFD: 26 07        	rol	<R1+2
  3778 00:0EFF: 06 05        	asl	<R1
  Sat Jul 10 2021  1:15                                                Page 72


  3779 00:0F01: 26 07        	rol	<R1+2
  3780 00:0F03: 06 05        	asl	<R1
  3781 00:0F05: 26 07        	rol	<R1+2
  3782 00:0F07: 06 05        	asl	<R1
  3783 00:0F09: 26 07        	rol	<R1+2
  3784 00:0F0B: 18           	clc
  3785 00:0F0C: AD xx xx     	lda	|~~umm_heap
  3786 00:0F0F: 65 05        	adc	<R1
  3787 00:0F11: 85 09        	sta	<R2
  3788 00:0F13: AD xx xx     	lda	|~~umm_heap+2
  3789 00:0F16: 65 07        	adc	<R1+2
  3790 00:0F18: 85 0B        	sta	<R2+2
  3791 00:0F1A: A0 02 00     	ldy	#$2
  3792 00:0F1D: B7 09        	lda	[<R2],Y
  3793 00:0F1F: 48           	pha
  3794 00:0F20: A7 09        	lda	[<R2]
  3795 00:0F22: 48           	pha
  3796 00:0F23: A9 04 00     	lda	#$4
  3797                        	xref	~~~lasl
  3798 00:0F26: 22 xx xx xx  	jsl	~~~lasl
  3799 00:0F2A: 85 01        	sta	<R0
  3800 00:0F2C: 86 03        	stx	<R0+2
  3801 00:0F2E: 18           	clc
  3802 00:0F2F: AD xx xx     	lda	|~~umm_heap
  3803 00:0F32: 65 01        	adc	<R0
  3804 00:0F34: 85 05        	sta	<R1
  3805 00:0F36: AD xx xx     	lda	|~~umm_heap+2
  3806 00:0F39: 65 03        	adc	<R0+2
  3807 00:0F3B: 85 07        	sta	<R1+2
  3808 00:0F3D: A7 05        	lda	[<R1]
  3809 00:0F3F: 29 00 80     	and	#<$8000
  3810 00:0F42: D0 03        	bne	L125
  3811 00:0F44: 82 44 01     	brl	L10045
  3812                        L125:
  3813                        	.line	170
  3814                        ;		/*
  3815                        ;		 * The next block is a free block, so as
                    similate up and remove it from
  3816                        ;		 * the free list
  3817                        ;		 */
  3818                        ;
  3819                        ;		//DBGLOG_DEBUG( "Assimilate up to next b
                    lock, which is FREE\n" );
  3820                        ;		/* Disconnect the next block from the FR
                    EE list */
  3821                        ;
  3822                        ;		umm_disconnect_from_free_list(UMM_NBLOCK
                    (c));
  3823                        	.line	179
  3824 00:0F47: A5 14        	lda	<L122+c_0
  3825 00:0F49: 85 01        	sta	<R0
  3826 00:0F4B: A5 16        	lda	<L122+c_0+2
  3827 00:0F4D: 85 03        	sta	<R0+2
  3828 00:0F4F: 06 01        	asl	<R0
  3829 00:0F51: 26 03        	rol	<R0+2
  3830 00:0F53: 06 01        	asl	<R0
  3831 00:0F55: 26 03        	rol	<R0+2
  3832 00:0F57: 06 01        	asl	<R0
  Sat Jul 10 2021  1:15                                                Page 73


  3833 00:0F59: 26 03        	rol	<R0+2
  3834 00:0F5B: 06 01        	asl	<R0
  3835 00:0F5D: 26 03        	rol	<R0+2
  3836 00:0F5F: 18           	clc
  3837 00:0F60: AD xx xx     	lda	|~~umm_heap
  3838 00:0F63: 65 01        	adc	<R0
  3839 00:0F65: 85 05        	sta	<R1
  3840 00:0F67: AD xx xx     	lda	|~~umm_heap+2
  3841 00:0F6A: 65 03        	adc	<R0+2
  3842 00:0F6C: 85 07        	sta	<R1+2
  3843 00:0F6E: A0 02 00     	ldy	#$2
  3844 00:0F71: B7 05        	lda	[<R1],Y
  3845 00:0F73: 48           	pha
  3846 00:0F74: A7 05        	lda	[<R1]
  3847 00:0F76: 48           	pha
  3848 00:0F77: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  3849                        ;
  3850                        ;		/* Assimilate the next block with this o
                    ne */
  3851                        ;
  3852                        ;		UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & U
                    MM_BLOCKNO_MASK) = c;
  3853                        	.line	183
  3854 00:0F7B: A5 14        	lda	<L122+c_0
  3855 00:0F7D: 85 09        	sta	<R2
  3856 00:0F7F: A5 16        	lda	<L122+c_0+2
  3857 00:0F81: 85 0B        	sta	<R2+2
  3858 00:0F83: 06 09        	asl	<R2
  3859 00:0F85: 26 0B        	rol	<R2+2
  3860 00:0F87: 06 09        	asl	<R2
  3861 00:0F89: 26 0B        	rol	<R2+2
  3862 00:0F8B: 06 09        	asl	<R2
  3863 00:0F8D: 26 0B        	rol	<R2+2
  3864 00:0F8F: 06 09        	asl	<R2
  3865 00:0F91: 26 0B        	rol	<R2+2
  3866 00:0F93: 18           	clc
  3867 00:0F94: AD xx xx     	lda	|~~umm_heap
  3868 00:0F97: 65 09        	adc	<R2
  3869 00:0F99: 85 0D        	sta	<R3
  3870 00:0F9B: AD xx xx     	lda	|~~umm_heap+2
  3871 00:0F9E: 65 0B        	adc	<R2+2
  3872 00:0FA0: 85 0F        	sta	<R3+2
  3873 00:0FA2: A0 02 00     	ldy	#$2
  3874 00:0FA5: B7 0D        	lda	[<R3],Y
  3875 00:0FA7: 48           	pha
  3876 00:0FA8: A7 0D        	lda	[<R3]
  3877 00:0FAA: 48           	pha
  3878 00:0FAB: A9 04 00     	lda	#$4
  3879                        	xref	~~~lasl
  3880 00:0FAE: 22 xx xx xx  	jsl	~~~lasl
  3881 00:0FB2: 85 05        	sta	<R1
  3882 00:0FB4: 86 07        	stx	<R1+2
  3883 00:0FB6: 18           	clc
  3884 00:0FB7: AD xx xx     	lda	|~~umm_heap
  3885 00:0FBA: 65 05        	adc	<R1
  3886 00:0FBC: 85 09        	sta	<R2
  3887 00:0FBE: AD xx xx     	lda	|~~umm_heap+2
  3888 00:0FC1: 65 07        	adc	<R1+2
  Sat Jul 10 2021  1:15                                                Page 74


  3889 00:0FC3: 85 0B        	sta	<R2+2
  3890 00:0FC5: A7 09        	lda	[<R2]
  3891 00:0FC7: 29 FF 7F     	and	#<$7fff
  3892 00:0FCA: 85 05        	sta	<R1
  3893 00:0FCC: 64 07        	stz	<R1+2
  3894 00:0FCE: D4 07        	pei	<R1+2
  3895 00:0FD0: D4 05        	pei	<R1
  3896 00:0FD2: A9 04 00     	lda	#$4
  3897                        	xref	~~~lasl
  3898 00:0FD5: 22 xx xx xx  	jsl	~~~lasl
  3899 00:0FD9: 85 01        	sta	<R0
  3900 00:0FDB: 86 03        	stx	<R0+2
  3901 00:0FDD: 18           	clc
  3902 00:0FDE: A9 04 00     	lda	#$4
  3903 00:0FE1: 6D xx xx     	adc	|~~umm_heap
  3904 00:0FE4: 85 09        	sta	<R2
  3905 00:0FE6: A9 00 00     	lda	#$0
  3906 00:0FE9: 6D xx xx     	adc	|~~umm_heap+2
  3907 00:0FEC: 85 0B        	sta	<R2+2
  3908 00:0FEE: 18           	clc
  3909 00:0FEF: A5 09        	lda	<R2
  3910 00:0FF1: 65 01        	adc	<R0
  3911 00:0FF3: 85 0D        	sta	<R3
  3912 00:0FF5: A5 0B        	lda	<R2+2
  3913 00:0FF7: 65 03        	adc	<R0+2
  3914 00:0FF9: 85 0F        	sta	<R3+2
  3915 00:0FFB: A5 14        	lda	<L122+c_0
  3916 00:0FFD: 87 0D        	sta	[<R3]
  3917 00:0FFF: A5 16        	lda	<L122+c_0+2
  3918 00:1001: A0 02 00     	ldy	#$2
  3919 00:1004: 97 0D        	sta	[<R3],Y
  3920                        ;		UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)
                    ) & UMM_BLOCKNO_MASK;
  3921                        	.line	184
  3922 00:1006: A5 14        	lda	<L122+c_0
  3923 00:1008: 85 01        	sta	<R0
  3924 00:100A: A5 16        	lda	<L122+c_0+2
  3925 00:100C: 85 03        	sta	<R0+2
  3926 00:100E: 06 01        	asl	<R0
  3927 00:1010: 26 03        	rol	<R0+2
  3928 00:1012: 06 01        	asl	<R0
  3929 00:1014: 26 03        	rol	<R0+2
  3930 00:1016: 06 01        	asl	<R0
  3931 00:1018: 26 03        	rol	<R0+2
  3932 00:101A: 06 01        	asl	<R0
  3933 00:101C: 26 03        	rol	<R0+2
  3934 00:101E: 18           	clc
  3935 00:101F: AD xx xx     	lda	|~~umm_heap
  3936 00:1022: 65 01        	adc	<R0
  3937 00:1024: 85 05        	sta	<R1
  3938 00:1026: AD xx xx     	lda	|~~umm_heap+2
  3939 00:1029: 65 03        	adc	<R0+2
  3940 00:102B: 85 07        	sta	<R1+2
  3941 00:102D: A5 14        	lda	<L122+c_0
  3942 00:102F: 85 09        	sta	<R2
  3943 00:1031: A5 16        	lda	<L122+c_0+2
  3944 00:1033: 85 0B        	sta	<R2+2
  3945 00:1035: 06 09        	asl	<R2
  Sat Jul 10 2021  1:15                                                Page 75


  3946 00:1037: 26 0B        	rol	<R2+2
  3947 00:1039: 06 09        	asl	<R2
  3948 00:103B: 26 0B        	rol	<R2+2
  3949 00:103D: 06 09        	asl	<R2
  3950 00:103F: 26 0B        	rol	<R2+2
  3951 00:1041: 06 09        	asl	<R2
  3952 00:1043: 26 0B        	rol	<R2+2
  3953 00:1045: 18           	clc
  3954 00:1046: AD xx xx     	lda	|~~umm_heap
  3955 00:1049: 65 09        	adc	<R2
  3956 00:104B: 85 0D        	sta	<R3
  3957 00:104D: AD xx xx     	lda	|~~umm_heap+2
  3958 00:1050: 65 0B        	adc	<R2+2
  3959 00:1052: 85 0F        	sta	<R3+2
  3960 00:1054: A0 02 00     	ldy	#$2
  3961 00:1057: B7 0D        	lda	[<R3],Y
  3962 00:1059: 48           	pha
  3963 00:105A: A7 0D        	lda	[<R3]
  3964 00:105C: 48           	pha
  3965 00:105D: A9 04 00     	lda	#$4
  3966                        	xref	~~~lasl
  3967 00:1060: 22 xx xx xx  	jsl	~~~lasl
  3968 00:1064: 85 01        	sta	<R0
  3969 00:1066: 86 03        	stx	<R0+2
  3970 00:1068: 18           	clc
  3971 00:1069: AD xx xx     	lda	|~~umm_heap
  3972 00:106C: 65 01        	adc	<R0
  3973 00:106E: 85 09        	sta	<R2
  3974 00:1070: AD xx xx     	lda	|~~umm_heap+2
  3975 00:1073: 65 03        	adc	<R0+2
  3976 00:1075: 85 0B        	sta	<R2+2
  3977 00:1077: A7 09        	lda	[<R2]
  3978 00:1079: 29 FF 7F     	and	#<$7fff
  3979 00:107C: 85 01        	sta	<R0
  3980 00:107E: 64 03        	stz	<R0+2
  3981 00:1080: A5 01        	lda	<R0
  3982 00:1082: 87 05        	sta	[<R1]
  3983 00:1084: A5 03        	lda	<R0+2
  3984 00:1086: A0 02 00     	ldy	#$2
  3985 00:1089: 97 05        	sta	[<R1],Y
  3986                        ;	}
  3987                        	.line	185
  3988                        ;}
  3989                        L10045:
  3990                        	.line	186
  3991                        L126:
  3992 00:108B: A5 12        	lda	<L122+2
  3993 00:108D: 85 16        	sta	<L122+2+4
  3994 00:108F: A5 11        	lda	<L122+1
  3995 00:1091: 85 15        	sta	<L122+1+4
  3996 00:1093: 2B           	pld
  3997 00:1094: 3B           	tsc
  3998 00:1095: 18           	clc
  3999 00:1096: 69 14 00     	adc	#L122+4
  4000 00:1099: 1B           	tcs
  4001 00:109A: 6B           	rtl
  4002                        	.endblock	186
  4003             00000010   L122	equ	16
  Sat Jul 10 2021  1:15                                                Page 76


  4004             00000011   L123	equ	17
  4005                        	ends
  4006                        	efunc
  4007                        	.endfunc	186,17,16
  4008                        	.line	186
  4009                        ;
  4010                        ;/* ----------------------------------------------
                    --------------------------
  4011                        ; * The umm_assimilate_down() function assumes tha
                    t UMM_NBLOCK(c) does NOT
  4012                        ; * have the UMM_FREELIST_MASK bit set!
  4013                        ; */
  4014                        ;
  4015                        ;static unsigned long umm_assimilate_down(unsigned
                     long c,
  4016                        ;		unsigned long freemask)
  4017                        ;{
  4018                        	.line	193
  4019                        	.line	195
  4020                        	code
  4021                        	func
  4022                        	.function	195
  4023                        ~~umm_assimilate_down:
  4024                        	longa	on
  4025                        	longi	on
  4026 00:109B: 3B           	tsc
  4027 00:109C: 38           	sec
  4028 00:109D: E9 10 00     	sbc	#L127
  4029 00:10A0: 1B           	tcs
  4030 00:10A1: 0B           	phd
  4031 00:10A2: 5B           	tcd
  4032             00000004   c_0	set	4
  4033             00000008   freemask_0	set	8
  4034                        	.block	195
  4035                        ;
  4036                        ;	UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | free
                    mask;
  4037                        	.sym	c,4,18,6,32
  4038                        	.sym	freemask,8,18,6,32
  4039                        	.line	197
  4040 00:10A3: A5 14        	lda	<L127+c_0
  4041 00:10A5: 85 05        	sta	<R1
  4042 00:10A7: A5 16        	lda	<L127+c_0+2
  4043 00:10A9: 85 07        	sta	<R1+2
  4044 00:10AB: 06 05        	asl	<R1
  4045 00:10AD: 26 07        	rol	<R1+2
  4046 00:10AF: 06 05        	asl	<R1
  4047 00:10B1: 26 07        	rol	<R1+2
  4048 00:10B3: 06 05        	asl	<R1
  4049 00:10B5: 26 07        	rol	<R1+2
  4050 00:10B7: 06 05        	asl	<R1
  4051 00:10B9: 26 07        	rol	<R1+2
  4052 00:10BB: 18           	clc
  4053 00:10BC: A9 04 00     	lda	#$4
  4054 00:10BF: 6D xx xx     	adc	|~~umm_heap
  4055 00:10C2: 85 09        	sta	<R2
  4056 00:10C4: A9 00 00     	lda	#$0
  4057 00:10C7: 6D xx xx     	adc	|~~umm_heap+2
  Sat Jul 10 2021  1:15                                                Page 77


  4058 00:10CA: 85 0B        	sta	<R2+2
  4059 00:10CC: 18           	clc
  4060 00:10CD: A5 09        	lda	<R2
  4061 00:10CF: 65 05        	adc	<R1
  4062 00:10D1: 85 0D        	sta	<R3
  4063 00:10D3: A5 0B        	lda	<R2+2
  4064 00:10D5: 65 07        	adc	<R1+2
  4065 00:10D7: 85 0F        	sta	<R3+2
  4066 00:10D9: A0 02 00     	ldy	#$2
  4067 00:10DC: B7 0D        	lda	[<R3],Y
  4068 00:10DE: 48           	pha
  4069 00:10DF: A7 0D        	lda	[<R3]
  4070 00:10E1: 48           	pha
  4071 00:10E2: A9 04 00     	lda	#$4
  4072                        	xref	~~~lasl
  4073 00:10E5: 22 xx xx xx  	jsl	~~~lasl
  4074 00:10E9: 85 01        	sta	<R0
  4075 00:10EB: 86 03        	stx	<R0+2
  4076 00:10ED: 18           	clc
  4077 00:10EE: AD xx xx     	lda	|~~umm_heap
  4078 00:10F1: 65 01        	adc	<R0
  4079 00:10F3: 85 05        	sta	<R1
  4080 00:10F5: AD xx xx     	lda	|~~umm_heap+2
  4081 00:10F8: 65 03        	adc	<R0+2
  4082 00:10FA: 85 07        	sta	<R1+2
  4083 00:10FC: A5 14        	lda	<L127+c_0
  4084 00:10FE: 85 01        	sta	<R0
  4085 00:1100: A5 16        	lda	<L127+c_0+2
  4086 00:1102: 85 03        	sta	<R0+2
  4087 00:1104: 06 01        	asl	<R0
  4088 00:1106: 26 03        	rol	<R0+2
  4089 00:1108: 06 01        	asl	<R0
  4090 00:110A: 26 03        	rol	<R0+2
  4091 00:110C: 06 01        	asl	<R0
  4092 00:110E: 26 03        	rol	<R0+2
  4093 00:1110: 06 01        	asl	<R0
  4094 00:1112: 26 03        	rol	<R0+2
  4095 00:1114: 18           	clc
  4096 00:1115: AD xx xx     	lda	|~~umm_heap
  4097 00:1118: 65 01        	adc	<R0
  4098 00:111A: 85 09        	sta	<R2
  4099 00:111C: AD xx xx     	lda	|~~umm_heap+2
  4100 00:111F: 65 03        	adc	<R0+2
  4101 00:1121: 85 0B        	sta	<R2+2
  4102 00:1123: A5 18        	lda	<L127+freemask_0
  4103 00:1125: 07 09        	ora	[<R2]
  4104 00:1127: 85 01        	sta	<R0
  4105 00:1129: A5 1A        	lda	<L127+freemask_0+2
  4106 00:112B: A0 02 00     	ldy	#$2
  4107 00:112E: 17 09        	ora	[<R2],Y
  4108 00:1130: 85 03        	sta	<R0+2
  4109 00:1132: A5 01        	lda	<R0
  4110 00:1134: 87 05        	sta	[<R1]
  4111 00:1136: A5 03        	lda	<R0+2
  4112 00:1138: A0 02 00     	ldy	#$2
  4113 00:113B: 97 05        	sta	[<R1],Y
  4114                        ;	UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
  4115                        	.line	198
  Sat Jul 10 2021  1:15                                                Page 78


  4116 00:113D: A5 14        	lda	<L127+c_0
  4117 00:113F: 85 05        	sta	<R1
  4118 00:1141: A5 16        	lda	<L127+c_0+2
  4119 00:1143: 85 07        	sta	<R1+2
  4120 00:1145: 06 05        	asl	<R1
  4121 00:1147: 26 07        	rol	<R1+2
  4122 00:1149: 06 05        	asl	<R1
  4123 00:114B: 26 07        	rol	<R1+2
  4124 00:114D: 06 05        	asl	<R1
  4125 00:114F: 26 07        	rol	<R1+2
  4126 00:1151: 06 05        	asl	<R1
  4127 00:1153: 26 07        	rol	<R1+2
  4128 00:1155: 18           	clc
  4129 00:1156: AD xx xx     	lda	|~~umm_heap
  4130 00:1159: 65 05        	adc	<R1
  4131 00:115B: 85 09        	sta	<R2
  4132 00:115D: AD xx xx     	lda	|~~umm_heap+2
  4133 00:1160: 65 07        	adc	<R1+2
  4134 00:1162: 85 0B        	sta	<R2+2
  4135 00:1164: A0 02 00     	ldy	#$2
  4136 00:1167: B7 09        	lda	[<R2],Y
  4137 00:1169: 48           	pha
  4138 00:116A: A7 09        	lda	[<R2]
  4139 00:116C: 48           	pha
  4140 00:116D: A9 04 00     	lda	#$4
  4141                        	xref	~~~lasl
  4142 00:1170: 22 xx xx xx  	jsl	~~~lasl
  4143 00:1174: 85 01        	sta	<R0
  4144 00:1176: 86 03        	stx	<R0+2
  4145 00:1178: 18           	clc
  4146 00:1179: A9 04 00     	lda	#$4
  4147 00:117C: 6D xx xx     	adc	|~~umm_heap
  4148 00:117F: 85 05        	sta	<R1
  4149 00:1181: A9 00 00     	lda	#$0
  4150 00:1184: 6D xx xx     	adc	|~~umm_heap+2
  4151 00:1187: 85 07        	sta	<R1+2
  4152 00:1189: 18           	clc
  4153 00:118A: A5 05        	lda	<R1
  4154 00:118C: 65 01        	adc	<R0
  4155 00:118E: 85 09        	sta	<R2
  4156 00:1190: A5 07        	lda	<R1+2
  4157 00:1192: 65 03        	adc	<R0+2
  4158 00:1194: 85 0B        	sta	<R2+2
  4159 00:1196: A5 14        	lda	<L127+c_0
  4160 00:1198: 85 01        	sta	<R0
  4161 00:119A: A5 16        	lda	<L127+c_0+2
  4162 00:119C: 85 03        	sta	<R0+2
  4163 00:119E: 06 01        	asl	<R0
  4164 00:11A0: 26 03        	rol	<R0+2
  4165 00:11A2: 06 01        	asl	<R0
  4166 00:11A4: 26 03        	rol	<R0+2
  4167 00:11A6: 06 01        	asl	<R0
  4168 00:11A8: 26 03        	rol	<R0+2
  4169 00:11AA: 06 01        	asl	<R0
  4170 00:11AC: 26 03        	rol	<R0+2
  4171 00:11AE: 18           	clc
  4172 00:11AF: A9 04 00     	lda	#$4
  4173 00:11B2: 6D xx xx     	adc	|~~umm_heap
  Sat Jul 10 2021  1:15                                                Page 79


  4174 00:11B5: 85 05        	sta	<R1
  4175 00:11B7: A9 00 00     	lda	#$0
  4176 00:11BA: 6D xx xx     	adc	|~~umm_heap+2
  4177 00:11BD: 85 07        	sta	<R1+2
  4178 00:11BF: 18           	clc
  4179 00:11C0: A5 05        	lda	<R1
  4180 00:11C2: 65 01        	adc	<R0
  4181 00:11C4: 85 0D        	sta	<R3
  4182 00:11C6: A5 07        	lda	<R1+2
  4183 00:11C8: 65 03        	adc	<R0+2
  4184 00:11CA: 85 0F        	sta	<R3+2
  4185 00:11CC: A7 0D        	lda	[<R3]
  4186 00:11CE: 87 09        	sta	[<R2]
  4187 00:11D0: A0 02 00     	ldy	#$2
  4188 00:11D3: B7 0D        	lda	[<R3],Y
  4189 00:11D5: A0 02 00     	ldy	#$2
  4190 00:11D8: 97 09        	sta	[<R2],Y
  4191                        ;
  4192                        ;	return (UMM_PBLOCK(c));
  4193                        	.line	200
  4194 00:11DA: A5 14        	lda	<L127+c_0
  4195 00:11DC: 85 01        	sta	<R0
  4196 00:11DE: A5 16        	lda	<L127+c_0+2
  4197 00:11E0: 85 03        	sta	<R0+2
  4198 00:11E2: 06 01        	asl	<R0
  4199 00:11E4: 26 03        	rol	<R0+2
  4200 00:11E6: 06 01        	asl	<R0
  4201 00:11E8: 26 03        	rol	<R0+2
  4202 00:11EA: 06 01        	asl	<R0
  4203 00:11EC: 26 03        	rol	<R0+2
  4204 00:11EE: 06 01        	asl	<R0
  4205 00:11F0: 26 03        	rol	<R0+2
  4206 00:11F2: 18           	clc
  4207 00:11F3: A9 04 00     	lda	#$4
  4208 00:11F6: 6D xx xx     	adc	|~~umm_heap
  4209 00:11F9: 85 05        	sta	<R1
  4210 00:11FB: A9 00 00     	lda	#$0
  4211 00:11FE: 6D xx xx     	adc	|~~umm_heap+2
  4212 00:1201: 85 07        	sta	<R1+2
  4213 00:1203: 18           	clc
  4214 00:1204: A5 05        	lda	<R1
  4215 00:1206: 65 01        	adc	<R0
  4216 00:1208: 85 09        	sta	<R2
  4217 00:120A: A5 07        	lda	<R1+2
  4218 00:120C: 65 03        	adc	<R0+2
  4219 00:120E: 85 0B        	sta	<R2+2
  4220 00:1210: A0 02 00     	ldy	#$2
  4221 00:1213: B7 09        	lda	[<R2],Y
  4222 00:1215: AA           	tax
  4223 00:1216: A7 09        	lda	[<R2]
  4224                        L130:
  4225 00:1218: A8           	tay
  4226 00:1219: A5 12        	lda	<L127+2
  4227 00:121B: 85 1A        	sta	<L127+2+8
  4228 00:121D: A5 11        	lda	<L127+1
  4229 00:121F: 85 19        	sta	<L127+1+8
  4230 00:1221: 2B           	pld
  4231 00:1222: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 80


  4232 00:1223: 18           	clc
  4233 00:1224: 69 18 00     	adc	#L127+8
  4234 00:1227: 1B           	tcs
  4235 00:1228: 98           	tya
  4236 00:1229: 6B           	rtl
  4237                        ;}
  4238                        	.line	201
  4239                        	.endblock	201
  4240             00000010   L127	equ	16
  4241             00000011   L128	equ	17
  4242                        	ends
  4243                        	efunc
  4244                        	.endfunc	201,17,16
  4245                        	.line	201
  4246                        ;
  4247                        ;/* ----------------------------------------------
                    --------------------------- */
  4248                        ;
  4249                        ;void umm_init(void)
  4250                        ;{
  4251                        	.line	205
  4252                        	.line	206
  4253                        	code
  4254                        	xdef	~~umm_init
  4255                        	func
  4256                        	.function	206
  4257                        ~~umm_init:
  4258                        	longa	on
  4259                        	longi	on
  4260 00:122A: 3B           	tsc
  4261 00:122B: 38           	sec
  4262 00:122C: E9 1C 00     	sbc	#L131
  4263 00:122F: 1B           	tcs
  4264 00:1230: 0B           	phd
  4265 00:1231: 5B           	tcd
  4266                        	.block	206
  4267                        ;	unsigned long i = 0L;
  4268                        ;	/* init heap pointer and size, and memset it to 
                    0 */
  4269                        ;	umm_heap = (umm_block *) UMM_MALLOC_CFG_HEAP_ADD
                    R;
  4270             00000000   i_1	set	0
  4271                        	.sym	i,0,18,1,32
  4272 00:1232: 64 0D        	stz	<L132+i_1
  4273 00:1234: 64 0F        	stz	<L132+i_1+2
  4274                        	.line	209
  4275 00:1236: A9 00 00     	lda	#$0
  4276 00:1239: 8D xx xx     	sta	|~~umm_heap
  4277 00:123C: A9 10 00     	lda	#$10
  4278 00:123F: 8D xx xx     	sta	|~~umm_heap+2
  4279                        ;	umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / size
                    of(umm_block));
  4280                        	.line	210
  4281 00:1242: A9 00 50     	lda	#$5000
  4282 00:1245: 8D xx xx     	sta	|~~umm_numblocks
  4283 00:1248: A9 00 00     	lda	#$0
  4284 00:124B: 8D xx xx     	sta	|~~umm_numblocks+2
  4285                        ;	//memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZ
  Sat Jul 10 2021  1:15                                                Page 81


                    E);
  4286                        ;	for(i=0;i<UMM_MALLOC_CFG_HEAP_SIZE;i++)
  4287                        	.line	212
  4288 00:124E: 64 0D        	stz	<L132+i_1
  4289 00:1250: 64 0F        	stz	<L132+i_1+2
  4290                        L10048:
  4291                        ;		((char FAR*)umm_heap)[i] = 0x00;
  4292                        	.line	213
  4293 00:1252: 18           	clc
  4294 00:1253: AD xx xx     	lda	|~~umm_heap
  4295 00:1256: 65 0D        	adc	<L132+i_1
  4296 00:1258: 85 01        	sta	<R0
  4297 00:125A: AD xx xx     	lda	|~~umm_heap+2
  4298 00:125D: 65 0F        	adc	<L132+i_1+2
  4299 00:125F: 85 03        	sta	<R0+2
  4300 00:1261: E2 20        	sep	#$20
  4301                        	longa	off
  4302 00:1263: A9 00        	lda	#$0
  4303 00:1265: 87 01        	sta	[<R0]
  4304 00:1267: C2 20        	rep	#$20
  4305                        	longa	on
  4306                        L10046:
  4307 00:1269: E6 0D        	inc	<L132+i_1
  4308 00:126B: D0 02        	bne	L134
  4309 00:126D: E6 0F        	inc	<L132+i_1+2
  4310                        L134:
  4311 00:126F: A5 0D        	lda	<L132+i_1
  4312 00:1271: C9 00 00     	cmp	#<$50000
  4313 00:1274: A5 0F        	lda	<L132+i_1+2
  4314 00:1276: E9 05 00     	sbc	#^$50000
  4315 00:1279: B0 03        	bcs	L135
  4316 00:127B: 82 D4 FF     	brl	L10048
  4317                        L135:
  4318                        L10047:
  4319                        ;
  4320                        ;	/* setup initial blank heap structure */
  4321                        ;	{
  4322                        	.line	216
  4323                        ;		/* index of the 0th `umm_block` */
  4324                        ;		const unsigned long block_0th = 0;
  4325                        ;		/* index of the 1st `umm_block` */
  4326                        ;		const unsigned long block_1th = 1;
  4327                        ;		/* index of the latest `umm_block` */
  4328                        ;		const unsigned long block_last = UMM_NUM
                    BLOCKS - 1;
  4329                        ;
  4330                        ;		/* setup the 0th `umm_block`, which just
                     points to the 1st */
  4331                        ;		UMM_NBLOCK(block_0th) = block_1th;
  4332                        	.block	225
  4333             00000004   block_0th_2	set	4
  4334             00000008   block_1th_2	set	8
  4335             0000000C   block_last_2	set	12
  4336                        	.sym	block_0th,4,18,1,32
  4337                        	.sym	block_1th,8,18,1,32
  4338                        	.sym	block_last,12,18,1,32
  4339 00:127E: 64 11        	stz	<L132+block_0th_2
  4340 00:1280: 64 13        	stz	<L132+block_0th_2+2
  Sat Jul 10 2021  1:15                                                Page 82


  4341 00:1282: A9 01 00     	lda	#$1
  4342 00:1285: 85 15        	sta	<L132+block_1th_2
  4343 00:1287: A9 00 00     	lda	#$0
  4344 00:128A: 85 17        	sta	<L132+block_1th_2+2
  4345 00:128C: 18           	clc
  4346 00:128D: A9 FF FF     	lda	#$ffff
  4347 00:1290: 6D xx xx     	adc	|~~umm_numblocks
  4348 00:1293: 85 19        	sta	<L132+block_last_2
  4349 00:1295: A9 FF FF     	lda	#$ffff
  4350 00:1298: 6D xx xx     	adc	|~~umm_numblocks+2
  4351 00:129B: 85 1B        	sta	<L132+block_last_2+2
  4352                        	.line	225
  4353 00:129D: AD xx xx     	lda	|~~umm_heap
  4354 00:12A0: 85 01        	sta	<R0
  4355 00:12A2: AD xx xx     	lda	|~~umm_heap+2
  4356 00:12A5: 85 03        	sta	<R0+2
  4357 00:12A7: A9 01 00     	lda	#$1
  4358 00:12AA: 87 01        	sta	[<R0]
  4359 00:12AC: A9 00 00     	lda	#$0
  4360 00:12AF: A0 02 00     	ldy	#$2
  4361 00:12B2: 97 01        	sta	[<R0],Y
  4362                        ;		UMM_NFREE(block_0th) = block_1th;
  4363                        	.line	226
  4364 00:12B4: AD xx xx     	lda	|~~umm_heap
  4365 00:12B7: 85 01        	sta	<R0
  4366 00:12B9: AD xx xx     	lda	|~~umm_heap+2
  4367 00:12BC: 85 03        	sta	<R0+2
  4368 00:12BE: A9 01 00     	lda	#$1
  4369 00:12C1: A0 08 00     	ldy	#$8
  4370 00:12C4: 97 01        	sta	[<R0],Y
  4371 00:12C6: A9 00 00     	lda	#$0
  4372 00:12C9: A0 0A 00     	ldy	#$a
  4373 00:12CC: 97 01        	sta	[<R0],Y
  4374                        ;		UMM_PFREE(block_0th) = block_1th;
  4375                        	.line	227
  4376 00:12CE: AD xx xx     	lda	|~~umm_heap
  4377 00:12D1: 85 01        	sta	<R0
  4378 00:12D3: AD xx xx     	lda	|~~umm_heap+2
  4379 00:12D6: 85 03        	sta	<R0+2
  4380 00:12D8: A9 01 00     	lda	#$1
  4381 00:12DB: A0 0C 00     	ldy	#$c
  4382 00:12DE: 97 01        	sta	[<R0],Y
  4383 00:12E0: A9 00 00     	lda	#$0
  4384 00:12E3: A0 0E 00     	ldy	#$e
  4385 00:12E6: 97 01        	sta	[<R0],Y
  4386                        ;
  4387                        ;		/*
  4388                        ;		 * Now, we need to set the whole heap sp
                    ace as a huge free block. We should
  4389                        ;		 * not touch the 0th `umm_block`, since 
                    it's special: the 0th `umm_block`
  4390                        ;		 * is the head of the free block list. I
                    t's a part of the heap invariant.
  4391                        ;		 *
  4392                        ;		 * See the detailed explanation at the b
                    eginning of the file.
  4393                        ;		 */
  4394                        ;
  Sat Jul 10 2021  1:15                                                Page 83


  4395                        ;		/*
  4396                        ;		 * 1th `umm_block` has pointers:
  4397                        ;		 *
  4398                        ;		 * - next `umm_block`: the latest one
  4399                        ;		 * - prev `umm_block`: the 0th
  4400                        ;		 *
  4401                        ;		 * Plus, it's a free `umm_block`, so we 
                    need to apply `UMM_FREELIST_MASK`
  4402                        ;		 *
  4403                        ;		 * And it's the last free block, so the 
                    next free block is 0.
  4404                        ;		 */
  4405                        ;		UMM_NBLOCK(block_1th) = block_last | UMM
                    _FREELIST_MASK;
  4406                        	.line	247
  4407 00:12E8: AD xx xx     	lda	|~~umm_heap
  4408 00:12EB: 85 01        	sta	<R0
  4409 00:12ED: AD xx xx     	lda	|~~umm_heap+2
  4410 00:12F0: 85 03        	sta	<R0+2
  4411 00:12F2: A5 19        	lda	<L132+block_last_2
  4412 00:12F4: 09 00 80     	ora	#<$8000
  4413 00:12F7: 85 05        	sta	<R1
  4414 00:12F9: A5 1B        	lda	<L132+block_last_2+2
  4415 00:12FB: 85 07        	sta	<R1+2
  4416 00:12FD: A5 05        	lda	<R1
  4417 00:12FF: A0 10 00     	ldy	#$10
  4418 00:1302: 97 01        	sta	[<R0],Y
  4419 00:1304: A5 07        	lda	<R1+2
  4420 00:1306: A0 12 00     	ldy	#$12
  4421 00:1309: 97 01        	sta	[<R0],Y
  4422                        ;		UMM_NFREE(block_1th) = 0;
  4423                        	.line	248
  4424 00:130B: AD xx xx     	lda	|~~umm_heap
  4425 00:130E: 85 01        	sta	<R0
  4426 00:1310: AD xx xx     	lda	|~~umm_heap+2
  4427 00:1313: 85 03        	sta	<R0+2
  4428 00:1315: A9 00 00     	lda	#$0
  4429 00:1318: A0 18 00     	ldy	#$18
  4430 00:131B: 97 01        	sta	[<R0],Y
  4431 00:131D: A9 00 00     	lda	#$0
  4432 00:1320: A0 1A 00     	ldy	#$1a
  4433 00:1323: 97 01        	sta	[<R0],Y
  4434                        ;		UMM_PBLOCK(block_1th) = block_0th;
  4435                        	.line	249
  4436 00:1325: AD xx xx     	lda	|~~umm_heap
  4437 00:1328: 85 01        	sta	<R0
  4438 00:132A: AD xx xx     	lda	|~~umm_heap+2
  4439 00:132D: 85 03        	sta	<R0+2
  4440 00:132F: A9 00 00     	lda	#$0
  4441 00:1332: A0 14 00     	ldy	#$14
  4442 00:1335: 97 01        	sta	[<R0],Y
  4443 00:1337: A9 00 00     	lda	#$0
  4444 00:133A: A0 16 00     	ldy	#$16
  4445 00:133D: 97 01        	sta	[<R0],Y
  4446                        ;		UMM_PFREE(block_1th) = block_0th;
  4447                        	.line	250
  4448 00:133F: AD xx xx     	lda	|~~umm_heap
  4449 00:1342: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 84


  4450 00:1344: AD xx xx     	lda	|~~umm_heap+2
  4451 00:1347: 85 03        	sta	<R0+2
  4452 00:1349: A9 00 00     	lda	#$0
  4453 00:134C: A0 1C 00     	ldy	#$1c
  4454 00:134F: 97 01        	sta	[<R0],Y
  4455 00:1351: A9 00 00     	lda	#$0
  4456 00:1354: A0 1E 00     	ldy	#$1e
  4457 00:1357: 97 01        	sta	[<R0],Y
  4458                        ;
  4459                        ;		/*
  4460                        ;		 * latest `umm_block` has pointers:
  4461                        ;		 *
  4462                        ;		 * - next `umm_block`: 0 (meaning, there
                     are no more `umm_blocks`)
  4463                        ;		 * - prev `umm_block`: the 1st
  4464                        ;		 *
  4465                        ;		 * It's not a free block, so we don't to
                    uch NFREE / PFREE at all.
  4466                        ;		 */
  4467                        ;		UMM_NBLOCK(block_last) = 0;
  4468                        	.line	260
  4469 00:1359: A5 19        	lda	<L132+block_last_2
  4470 00:135B: 85 01        	sta	<R0
  4471 00:135D: A5 1B        	lda	<L132+block_last_2+2
  4472 00:135F: 85 03        	sta	<R0+2
  4473 00:1361: 06 01        	asl	<R0
  4474 00:1363: 26 03        	rol	<R0+2
  4475 00:1365: 06 01        	asl	<R0
  4476 00:1367: 26 03        	rol	<R0+2
  4477 00:1369: 06 01        	asl	<R0
  4478 00:136B: 26 03        	rol	<R0+2
  4479 00:136D: 06 01        	asl	<R0
  4480 00:136F: 26 03        	rol	<R0+2
  4481 00:1371: 18           	clc
  4482 00:1372: AD xx xx     	lda	|~~umm_heap
  4483 00:1375: 65 01        	adc	<R0
  4484 00:1377: 85 05        	sta	<R1
  4485 00:1379: AD xx xx     	lda	|~~umm_heap+2
  4486 00:137C: 65 03        	adc	<R0+2
  4487 00:137E: 85 07        	sta	<R1+2
  4488 00:1380: A9 00 00     	lda	#$0
  4489 00:1383: 87 05        	sta	[<R1]
  4490 00:1385: A9 00 00     	lda	#$0
  4491 00:1388: A0 02 00     	ldy	#$2
  4492 00:138B: 97 05        	sta	[<R1],Y
  4493                        ;		UMM_PBLOCK(block_last) = block_1th;
  4494                        	.line	261
  4495 00:138D: A5 19        	lda	<L132+block_last_2
  4496 00:138F: 85 01        	sta	<R0
  4497 00:1391: A5 1B        	lda	<L132+block_last_2+2
  4498 00:1393: 85 03        	sta	<R0+2
  4499 00:1395: 06 01        	asl	<R0
  4500 00:1397: 26 03        	rol	<R0+2
  4501 00:1399: 06 01        	asl	<R0
  4502 00:139B: 26 03        	rol	<R0+2
  4503 00:139D: 06 01        	asl	<R0
  4504 00:139F: 26 03        	rol	<R0+2
  4505 00:13A1: 06 01        	asl	<R0
  Sat Jul 10 2021  1:15                                                Page 85


  4506 00:13A3: 26 03        	rol	<R0+2
  4507 00:13A5: 18           	clc
  4508 00:13A6: A9 04 00     	lda	#$4
  4509 00:13A9: 6D xx xx     	adc	|~~umm_heap
  4510 00:13AC: 85 05        	sta	<R1
  4511 00:13AE: A9 00 00     	lda	#$0
  4512 00:13B1: 6D xx xx     	adc	|~~umm_heap+2
  4513 00:13B4: 85 07        	sta	<R1+2
  4514 00:13B6: 18           	clc
  4515 00:13B7: A5 05        	lda	<R1
  4516 00:13B9: 65 01        	adc	<R0
  4517 00:13BB: 85 09        	sta	<R2
  4518 00:13BD: A5 07        	lda	<R1+2
  4519 00:13BF: 65 03        	adc	<R0+2
  4520 00:13C1: 85 0B        	sta	<R2+2
  4521 00:13C3: A9 01 00     	lda	#$1
  4522 00:13C6: 87 09        	sta	[<R2]
  4523 00:13C8: A9 00 00     	lda	#$0
  4524 00:13CB: A0 02 00     	ldy	#$2
  4525 00:13CE: 97 09        	sta	[<R2],Y
  4526                        ;	}
  4527                        	.endblock	262
  4528                        	.line	262
  4529                        ;}
  4530                        	.line	263
  4531                        L137:
  4532 00:13D0: 2B           	pld
  4533 00:13D1: 3B           	tsc
  4534 00:13D2: 18           	clc
  4535 00:13D3: 69 1C 00     	adc	#L131
  4536 00:13D6: 1B           	tcs
  4537 00:13D7: 6B           	rtl
  4538                        	.endblock	263
  4539             0000001C   L131	equ	28
  4540             0000000D   L132	equ	13
  4541                        	ends
  4542                        	efunc
  4543                        	.endfunc	263,13,28
  4544                        	.line	263
  4545                        ;
  4546                        ;/* ----------------------------------------------
                    --------------------------
  4547                        ; * Must be called only from within critical secti
                    ons guarded by
  4548                        ; * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
  4549                        ; */
  4550                        ;
  4551                        ;static void umm_free_core(void *ptr)
  4552                        ;{
  4553                        	.line	270
  4554                        	.line	271
  4555                        	code
  4556                        	func
  4557                        	.function	271
  4558                        ~~umm_free_core:
  4559                        	longa	on
  4560                        	longi	on
  4561 00:13D8: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 86


  4562 00:13D9: 38           	sec
  4563 00:13DA: E9 14 00     	sbc	#L138
  4564 00:13DD: 1B           	tcs
  4565 00:13DE: 0B           	phd
  4566 00:13DF: 5B           	tcd
  4567             00000004   ptr_0	set	4
  4568                        	.block	271
  4569                        ;
  4570                        ;	unsigned long c;
  4571                        ;
  4572                        ;	/*
  4573                        ;	 * FIXME: At some point it might be a good idea 
                    to add a check to make sure
  4574                        ;	 *        that the pointer we're being asked to 
                    free up is actually within
  4575                        ;	 *        the umm_heap!
  4576                        ;	 *
  4577                        ;	 * NOTE:  See the new umm_info() function that y
                    ou can use to see if a ptr is
  4578                        ;	 *        on the free list!
  4579                        ;	 */
  4580                        ;
  4581                        ;	/* Figure out which block we're in. Note the use
                     of truncated division... */
  4582                        ;
  4583                        ;	c = (((char *) ptr) - (char *) (&(umm_heap[0])))
                     / sizeof(umm_block);
  4584             00000000   c_1	set	0
  4585                        	.sym	c,0,18,1,32
  4586                        	.sym	ptr,4,129,6,32
  4587                        	.line	286
  4588 00:13E0: 38           	sec
  4589 00:13E1: A5 18        	lda	<L138+ptr_0
  4590 00:13E3: ED xx xx     	sbc	|~~umm_heap
  4591 00:13E6: 85 01        	sta	<R0
  4592 00:13E8: A5 1A        	lda	<L138+ptr_0+2
  4593 00:13EA: ED xx xx     	sbc	|~~umm_heap+2
  4594 00:13ED: 85 03        	sta	<R0+2
  4595 00:13EF: F4 00 00     	pea	#^$10
  4596 00:13F2: F4 10 00     	pea	#<$10
  4597 00:13F5: D4 03        	pei	<R0+2
  4598 00:13F7: D4 01        	pei	<R0
  4599                        	xref	~~~ldiv
  4600 00:13F9: 22 xx xx xx  	jsl	~~~ldiv
  4601 00:13FD: 85 11        	sta	<L139+c_1
  4602 00:13FF: 86 13        	stx	<L139+c_1+2
  4603                        ;
  4604                        ;	//DBGLOG_DEBUG( "Freeing block %6i\n", c );
  4605                        ;
  4606                        ;	/* Now let's assimilate this block with the next
                     one if possible. */
  4607                        ;
  4608                        ;	umm_assimilate_up(c);
  4609                        	.line	292
  4610 00:1401: D4 13        	pei	<L139+c_1+2
  4611 00:1403: D4 11        	pei	<L139+c_1
  4612 00:1405: 22 xx xx xx  	jsl	~~umm_assimilate_up
  4613                        ;
  Sat Jul 10 2021  1:15                                                Page 87


  4614                        ;	/* Then assimilate with the previous block if po
                    ssible */
  4615                        ;
  4616                        ;	if ( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MA
                    SK)
  4617                        	.line	296
  4618                        ;	{
  4619 00:1409: A5 11        	lda	<L139+c_1
  4620 00:140B: 85 05        	sta	<R1
  4621 00:140D: A5 13        	lda	<L139+c_1+2
  4622 00:140F: 85 07        	sta	<R1+2
  4623 00:1411: 06 05        	asl	<R1
  4624 00:1413: 26 07        	rol	<R1+2
  4625 00:1415: 06 05        	asl	<R1
  4626 00:1417: 26 07        	rol	<R1+2
  4627 00:1419: 06 05        	asl	<R1
  4628 00:141B: 26 07        	rol	<R1+2
  4629 00:141D: 06 05        	asl	<R1
  4630 00:141F: 26 07        	rol	<R1+2
  4631 00:1421: 18           	clc
  4632 00:1422: A9 04 00     	lda	#$4
  4633 00:1425: 6D xx xx     	adc	|~~umm_heap
  4634 00:1428: 85 09        	sta	<R2
  4635 00:142A: A9 00 00     	lda	#$0
  4636 00:142D: 6D xx xx     	adc	|~~umm_heap+2
  4637 00:1430: 85 0B        	sta	<R2+2
  4638 00:1432: 18           	clc
  4639 00:1433: A5 09        	lda	<R2
  4640 00:1435: 65 05        	adc	<R1
  4641 00:1437: 85 0D        	sta	<R3
  4642 00:1439: A5 0B        	lda	<R2+2
  4643 00:143B: 65 07        	adc	<R1+2
  4644 00:143D: 85 0F        	sta	<R3+2
  4645 00:143F: A0 02 00     	ldy	#$2
  4646 00:1442: B7 0D        	lda	[<R3],Y
  4647 00:1444: 48           	pha
  4648 00:1445: A7 0D        	lda	[<R3]
  4649 00:1447: 48           	pha
  4650 00:1448: A9 04 00     	lda	#$4
  4651                        	xref	~~~lasl
  4652 00:144B: 22 xx xx xx  	jsl	~~~lasl
  4653 00:144F: 85 01        	sta	<R0
  4654 00:1451: 86 03        	stx	<R0+2
  4655 00:1453: 18           	clc
  4656 00:1454: AD xx xx     	lda	|~~umm_heap
  4657 00:1457: 65 01        	adc	<R0
  4658 00:1459: 85 05        	sta	<R1
  4659 00:145B: AD xx xx     	lda	|~~umm_heap+2
  4660 00:145E: 65 03        	adc	<R0+2
  4661 00:1460: 85 07        	sta	<R1+2
  4662 00:1462: A7 05        	lda	[<R1]
  4663 00:1464: 29 00 80     	and	#<$8000
  4664 00:1467: D0 03        	bne	L141
  4665 00:1469: 82 15 00     	brl	L10049
  4666                        L141:
  4667                        	.line	297
  4668                        ;
  4669                        ;		//DBGLOG_DEBUG( "Assimilate down to next
  Sat Jul 10 2021  1:15                                                Page 88


                     block, which is FREE\n" );
  4670                        ;
  4671                        ;		c = umm_assimilate_down(c, UMM_FREELIST_
                    MASK);
  4672                        	.line	301
  4673 00:146C: F4 00 00     	pea	#^$8000
  4674 00:146F: F4 00 80     	pea	#<$8000
  4675 00:1472: D4 13        	pei	<L139+c_1+2
  4676 00:1474: D4 11        	pei	<L139+c_1
  4677 00:1476: 22 xx xx xx  	jsl	~~umm_assimilate_down
  4678 00:147A: 85 11        	sta	<L139+c_1
  4679 00:147C: 86 13        	stx	<L139+c_1+2
  4680                        ;	}
  4681                        	.line	302
  4682                        ;	else
  4683 00:147E: 82 24 01     	brl	L10050
  4684                        L10049:
  4685                        ;	{
  4686                        	.line	304
  4687                        ;		/*
  4688                        ;		 * The previous block is not a free bloc
                    k, so add this one to the head
  4689                        ;		 * of the free list
  4690                        ;		 */
  4691                        ;
  4692                        ;		//DBGLOG_DEBUG( "Just add to head of fre
                    e list\n" );
  4693                        ;		UMM_PFREE(UMM_NFREE(0)) = c;
  4694                        	.line	311
  4695 00:1481: AD xx xx     	lda	|~~umm_heap
  4696 00:1484: 85 05        	sta	<R1
  4697 00:1486: AD xx xx     	lda	|~~umm_heap+2
  4698 00:1489: 85 07        	sta	<R1+2
  4699 00:148B: A0 0A 00     	ldy	#$a
  4700 00:148E: B7 05        	lda	[<R1],Y
  4701 00:1490: 48           	pha
  4702 00:1491: A0 08 00     	ldy	#$8
  4703 00:1494: B7 05        	lda	[<R1],Y
  4704 00:1496: 48           	pha
  4705 00:1497: A9 04 00     	lda	#$4
  4706                        	xref	~~~lasl
  4707 00:149A: 22 xx xx xx  	jsl	~~~lasl
  4708 00:149E: 85 01        	sta	<R0
  4709 00:14A0: 86 03        	stx	<R0+2
  4710 00:14A2: 18           	clc
  4711 00:14A3: A9 0C 00     	lda	#$c
  4712 00:14A6: 6D xx xx     	adc	|~~umm_heap
  4713 00:14A9: 85 05        	sta	<R1
  4714 00:14AB: A9 00 00     	lda	#$0
  4715 00:14AE: 6D xx xx     	adc	|~~umm_heap+2
  4716 00:14B1: 85 07        	sta	<R1+2
  4717 00:14B3: 18           	clc
  4718 00:14B4: A5 05        	lda	<R1
  4719 00:14B6: 65 01        	adc	<R0
  4720 00:14B8: 85 09        	sta	<R2
  4721 00:14BA: A5 07        	lda	<R1+2
  4722 00:14BC: 65 03        	adc	<R0+2
  4723 00:14BE: 85 0B        	sta	<R2+2
  Sat Jul 10 2021  1:15                                                Page 89


  4724 00:14C0: A5 11        	lda	<L139+c_1
  4725 00:14C2: 87 09        	sta	[<R2]
  4726 00:14C4: A5 13        	lda	<L139+c_1+2
  4727 00:14C6: A0 02 00     	ldy	#$2
  4728 00:14C9: 97 09        	sta	[<R2],Y
  4729                        ;		UMM_NFREE(c) = UMM_NFREE(0);
  4730                        	.line	312
  4731 00:14CB: A5 11        	lda	<L139+c_1
  4732 00:14CD: 85 01        	sta	<R0
  4733 00:14CF: A5 13        	lda	<L139+c_1+2
  4734 00:14D1: 85 03        	sta	<R0+2
  4735 00:14D3: 06 01        	asl	<R0
  4736 00:14D5: 26 03        	rol	<R0+2
  4737 00:14D7: 06 01        	asl	<R0
  4738 00:14D9: 26 03        	rol	<R0+2
  4739 00:14DB: 06 01        	asl	<R0
  4740 00:14DD: 26 03        	rol	<R0+2
  4741 00:14DF: 06 01        	asl	<R0
  4742 00:14E1: 26 03        	rol	<R0+2
  4743 00:14E3: 18           	clc
  4744 00:14E4: A9 08 00     	lda	#$8
  4745 00:14E7: 6D xx xx     	adc	|~~umm_heap
  4746 00:14EA: 85 05        	sta	<R1
  4747 00:14EC: A9 00 00     	lda	#$0
  4748 00:14EF: 6D xx xx     	adc	|~~umm_heap+2
  4749 00:14F2: 85 07        	sta	<R1+2
  4750 00:14F4: 18           	clc
  4751 00:14F5: A5 05        	lda	<R1
  4752 00:14F7: 65 01        	adc	<R0
  4753 00:14F9: 85 09        	sta	<R2
  4754 00:14FB: A5 07        	lda	<R1+2
  4755 00:14FD: 65 03        	adc	<R0+2
  4756 00:14FF: 85 0B        	sta	<R2+2
  4757 00:1501: AD xx xx     	lda	|~~umm_heap
  4758 00:1504: 85 01        	sta	<R0
  4759 00:1506: AD xx xx     	lda	|~~umm_heap+2
  4760 00:1509: 85 03        	sta	<R0+2
  4761 00:150B: A0 08 00     	ldy	#$8
  4762 00:150E: B7 01        	lda	[<R0],Y
  4763 00:1510: 87 09        	sta	[<R2]
  4764 00:1512: A0 0A 00     	ldy	#$a
  4765 00:1515: B7 01        	lda	[<R0],Y
  4766 00:1517: A0 02 00     	ldy	#$2
  4767 00:151A: 97 09        	sta	[<R2],Y
  4768                        ;		UMM_PFREE(c) = 0;
  4769                        	.line	313
  4770 00:151C: A5 11        	lda	<L139+c_1
  4771 00:151E: 85 01        	sta	<R0
  4772 00:1520: A5 13        	lda	<L139+c_1+2
  4773 00:1522: 85 03        	sta	<R0+2
  4774 00:1524: 06 01        	asl	<R0
  4775 00:1526: 26 03        	rol	<R0+2
  4776 00:1528: 06 01        	asl	<R0
  4777 00:152A: 26 03        	rol	<R0+2
  4778 00:152C: 06 01        	asl	<R0
  4779 00:152E: 26 03        	rol	<R0+2
  4780 00:1530: 06 01        	asl	<R0
  4781 00:1532: 26 03        	rol	<R0+2
  Sat Jul 10 2021  1:15                                                Page 90


  4782 00:1534: 18           	clc
  4783 00:1535: A9 0C 00     	lda	#$c
  4784 00:1538: 6D xx xx     	adc	|~~umm_heap
  4785 00:153B: 85 05        	sta	<R1
  4786 00:153D: A9 00 00     	lda	#$0
  4787 00:1540: 6D xx xx     	adc	|~~umm_heap+2
  4788 00:1543: 85 07        	sta	<R1+2
  4789 00:1545: 18           	clc
  4790 00:1546: A5 05        	lda	<R1
  4791 00:1548: 65 01        	adc	<R0
  4792 00:154A: 85 09        	sta	<R2
  4793 00:154C: A5 07        	lda	<R1+2
  4794 00:154E: 65 03        	adc	<R0+2
  4795 00:1550: 85 0B        	sta	<R2+2
  4796 00:1552: A9 00 00     	lda	#$0
  4797 00:1555: 87 09        	sta	[<R2]
  4798 00:1557: A9 00 00     	lda	#$0
  4799 00:155A: A0 02 00     	ldy	#$2
  4800 00:155D: 97 09        	sta	[<R2],Y
  4801                        ;		UMM_NFREE(0) = c;
  4802                        	.line	314
  4803 00:155F: AD xx xx     	lda	|~~umm_heap
  4804 00:1562: 85 01        	sta	<R0
  4805 00:1564: AD xx xx     	lda	|~~umm_heap+2
  4806 00:1567: 85 03        	sta	<R0+2
  4807 00:1569: A5 11        	lda	<L139+c_1
  4808 00:156B: A0 08 00     	ldy	#$8
  4809 00:156E: 97 01        	sta	[<R0],Y
  4810 00:1570: A5 13        	lda	<L139+c_1+2
  4811 00:1572: A0 0A 00     	ldy	#$a
  4812 00:1575: 97 01        	sta	[<R0],Y
  4813                        ;
  4814                        ;		UMM_NBLOCK(c) |= UMM_FREELIST_MASK;
  4815                        	.line	316
  4816 00:1577: A5 11        	lda	<L139+c_1
  4817 00:1579: 85 01        	sta	<R0
  4818 00:157B: A5 13        	lda	<L139+c_1+2
  4819 00:157D: 85 03        	sta	<R0+2
  4820 00:157F: 06 01        	asl	<R0
  4821 00:1581: 26 03        	rol	<R0+2
  4822 00:1583: 06 01        	asl	<R0
  4823 00:1585: 26 03        	rol	<R0+2
  4824 00:1587: 06 01        	asl	<R0
  4825 00:1589: 26 03        	rol	<R0+2
  4826 00:158B: 06 01        	asl	<R0
  4827 00:158D: 26 03        	rol	<R0+2
  4828 00:158F: 18           	clc
  4829 00:1590: AD xx xx     	lda	|~~umm_heap
  4830 00:1593: 65 01        	adc	<R0
  4831 00:1595: 85 05        	sta	<R1
  4832 00:1597: AD xx xx     	lda	|~~umm_heap+2
  4833 00:159A: 65 03        	adc	<R0+2
  4834 00:159C: 85 07        	sta	<R1+2
  4835 00:159E: A7 05        	lda	[<R1]
  4836 00:15A0: 09 00 80     	ora	#<$8000
  4837 00:15A3: 87 05        	sta	[<R1]
  4838                        ;	}
  4839                        	.line	317
  Sat Jul 10 2021  1:15                                                Page 91


  4840                        L10050:
  4841                        ;}
  4842                        	.line	318
  4843                        L142:
  4844 00:15A5: A5 16        	lda	<L138+2
  4845 00:15A7: 85 1A        	sta	<L138+2+4
  4846 00:15A9: A5 15        	lda	<L138+1
  4847 00:15AB: 85 19        	sta	<L138+1+4
  4848 00:15AD: 2B           	pld
  4849 00:15AE: 3B           	tsc
  4850 00:15AF: 18           	clc
  4851 00:15B0: 69 18 00     	adc	#L138+4
  4852 00:15B3: 1B           	tcs
  4853 00:15B4: 6B           	rtl
  4854                        	.endblock	318
  4855             00000014   L138	equ	20
  4856             00000011   L139	equ	17
  4857                        	ends
  4858                        	efunc
  4859                        	.endfunc	318,17,20
  4860                        	.line	318
  4861                        ;
  4862                        ;/* ----------------------------------------------
                    -------------------------- */
  4863                        ;
  4864                        ;void umm_free(void FAR *ptr)
  4865                        ;{
  4866                        	.line	322
  4867                        	.line	323
  4868                        	code
  4869                        	xdef	~~umm_free
  4870                        	func
  4871                        	.function	323
  4872                        ~~umm_free:
  4873                        	longa	on
  4874                        	longi	on
  4875 00:15B5: 3B           	tsc
  4876 00:15B6: 38           	sec
  4877 00:15B7: E9 00 00     	sbc	#L143
  4878 00:15BA: 1B           	tcs
  4879 00:15BB: 0B           	phd
  4880 00:15BC: 5B           	tcd
  4881             00000004   ptr_0	set	4
  4882                        	.block	323
  4883                        ;
  4884                        ;	if (umm_heap == NULL)
  4885                        	.sym	ptr,4,129,6,32
  4886                        	.line	325
  4887                        ;	{
  4888 00:15BD: AD xx xx     	lda	|~~umm_heap
  4889 00:15C0: 0D xx xx     	ora	|~~umm_heap+2
  4890 00:15C3: F0 03        	beq	L146
  4891 00:15C5: 82 04 00     	brl	L10051
  4892                        L146:
  4893                        	.line	326
  4894                        ;		umm_init();
  4895                        	.line	327
  4896 00:15C8: 22 xx xx xx  	jsl	~~umm_init
  Sat Jul 10 2021  1:15                                                Page 92


  4897                        ;	}
  4898                        	.line	328
  4899                        ;
  4900                        ;	/* If we're being asked to free a NULL pointer, 
                    well that's just silly! */
  4901                        ;
  4902                        ;	if ((void FAR *) 0 == ptr)
  4903                        L10051:
  4904                        	.line	332
  4905                        ;	{
  4906 00:15CC: A5 04        	lda	<L143+ptr_0
  4907 00:15CE: 05 06        	ora	<L143+ptr_0+2
  4908 00:15D0: F0 03        	beq	L147
  4909 00:15D2: 82 10 00     	brl	L10052
  4910                        L147:
  4911                        	.line	333
  4912                        ;		//DBGLOG_DEBUG( "free a null pointer -> 
                    do nothing\n" );
  4913                        ;
  4914                        ;		return;
  4915                        	.line	336
  4916                        L148:
  4917 00:15D5: A5 02        	lda	<L143+2
  4918 00:15D7: 85 06        	sta	<L143+2+4
  4919 00:15D9: A5 01        	lda	<L143+1
  4920 00:15DB: 85 05        	sta	<L143+1+4
  4921 00:15DD: 2B           	pld
  4922 00:15DE: 3B           	tsc
  4923 00:15DF: 18           	clc
  4924 00:15E0: 69 04 00     	adc	#L143+4
  4925 00:15E3: 1B           	tcs
  4926 00:15E4: 6B           	rtl
  4927                        ;	}
  4928                        	.line	337
  4929                        ;
  4930                        ;	/* Free the memory withing a protected critical 
                    section */
  4931                        ;
  4932                        ;	UMM_CRITICAL_ENTRY();
  4933                        L10052:
  4934                        	.line	341
  4935                        ;
  4936                        ;	umm_free_core(ptr);
  4937                        	.line	343
  4938 00:15E5: D4 06        	pei	<L143+ptr_0+2
  4939 00:15E7: D4 04        	pei	<L143+ptr_0
  4940 00:15E9: 22 xx xx xx  	jsl	~~umm_free_core
  4941                        ;
  4942                        ;	UMM_CRITICAL_EXIT();
  4943                        	.line	345
  4944                        ;}
  4945                        	.line	346
  4946 00:15ED: 82 E5 FF     	brl	L148
  4947                        	.endblock	346
  4948             00000000   L143	equ	0
  4949             00000001   L144	equ	1
  4950                        	ends
  4951                        	efunc
  Sat Jul 10 2021  1:15                                                Page 93


  4952                        	.endfunc	346,1,0
  4953                        	.line	346
  4954                        ;
  4955                        ;/* ----------------------------------------------
                    --------------------------
  4956                        ; * Must be called only from within critical secti
                    ons guarded by
  4957                        ; * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
  4958                        ; */
  4959                        ;
  4960                        ;static void FAR *umm_malloc_core(unsigned long si
                    ze)
  4961                        ;{
  4962                        	.line	353
  4963                        	.line	354
  4964                        	code
  4965                        	func
  4966                        	.function	354
  4967                        ~~umm_malloc_core:
  4968                        	longa	on
  4969                        	longi	on
  4970 00:15F0: 3B           	tsc
  4971 00:15F1: 38           	sec
  4972 00:15F2: E9 28 00     	sbc	#L149
  4973 00:15F5: 1B           	tcs
  4974 00:15F6: 0B           	phd
  4975 00:15F7: 5B           	tcd
  4976             00000004   size_0	set	4
  4977                        	.block	354
  4978                        ;	unsigned long blocks;
  4979                        ;	unsigned long blockSize = 0;
  4980                        ;
  4981                        ;	unsigned long bestSize;
  4982                        ;	unsigned long bestBlock;
  4983                        ;
  4984                        ;	unsigned long cf;
  4985                        ;
  4986                        ;	blocks = umm_blocks(size);
  4987             00000000   blocks_1	set	0
  4988             00000004   blockSize_1	set	4
  4989             00000008   bestSize_1	set	8
  4990             0000000C   bestBlock_1	set	12
  4991             00000010   cf_1	set	16
  4992                        	.sym	blocks,0,18,1,32
  4993                        	.sym	blockSize,4,18,1,32
  4994                        	.sym	bestSize,8,18,1,32
  4995                        	.sym	bestBlock,12,18,1,32
  4996                        	.sym	cf,16,18,1,32
  4997                        	.sym	size,4,18,6,32
  4998 00:15F8: 64 19        	stz	<L150+blockSize_1
  4999 00:15FA: 64 1B        	stz	<L150+blockSize_1+2
  5000                        	.line	363
  5001 00:15FC: D4 2C        	pei	<L149+size_0
  5002 00:15FE: 22 xx xx xx  	jsl	~~umm_blocks
  5003 00:1602: 85 15        	sta	<L150+blocks_1
  5004 00:1604: 86 17        	stx	<L150+blocks_1+2
  5005                        ;
  5006                        ;	/*
  Sat Jul 10 2021  1:15                                                Page 94


  5007                        ;	 * Now we can scan through the free list until w
                    e find a space that's big
  5008                        ;	 * enough to hold the number of blocks we need.
  5009                        ;	 *
  5010                        ;	 * This part may be customized to be a best-fit,
                     worst-fit, or first-fit
  5011                        ;	 * algorithm
  5012                        ;	 */
  5013                        ;
  5014                        ;	cf = UMM_NFREE(0);
  5015                        	.line	373
  5016 00:1606: AD xx xx     	lda	|~~umm_heap
  5017 00:1609: 85 01        	sta	<R0
  5018 00:160B: AD xx xx     	lda	|~~umm_heap+2
  5019 00:160E: 85 03        	sta	<R0+2
  5020 00:1610: A0 08 00     	ldy	#$8
  5021 00:1613: B7 01        	lda	[<R0],Y
  5022 00:1615: 85 25        	sta	<L150+cf_1
  5023 00:1617: A0 0A 00     	ldy	#$a
  5024 00:161A: B7 01        	lda	[<R0],Y
  5025 00:161C: 85 27        	sta	<L150+cf_1+2
  5026                        ;
  5027                        ;	bestBlock = UMM_NFREE(0);
  5028                        	.line	375
  5029 00:161E: AD xx xx     	lda	|~~umm_heap
  5030 00:1621: 85 01        	sta	<R0
  5031 00:1623: AD xx xx     	lda	|~~umm_heap+2
  5032 00:1626: 85 03        	sta	<R0+2
  5033 00:1628: A0 08 00     	ldy	#$8
  5034 00:162B: B7 01        	lda	[<R0],Y
  5035 00:162D: 85 21        	sta	<L150+bestBlock_1
  5036 00:162F: A0 0A 00     	ldy	#$a
  5037 00:1632: B7 01        	lda	[<R0],Y
  5038 00:1634: 85 23        	sta	<L150+bestBlock_1+2
  5039                        ;	bestSize = 0x7FFF;
  5040                        	.line	376
  5041 00:1636: A9 FF 7F     	lda	#$7fff
  5042 00:1639: 85 1D        	sta	<L150+bestSize_1
  5043 00:163B: A9 00 00     	lda	#$0
  5044 00:163E: 85 1F        	sta	<L150+bestSize_1+2
  5045                        ;
  5046                        ;	while (cf)
  5047                        	.line	378
  5048                        L10053:
  5049 00:1640: A5 25        	lda	<L150+cf_1
  5050 00:1642: 05 27        	ora	<L150+cf_1+2
  5051 00:1644: D0 03        	bne	L152
  5052 00:1646: 82 AB 00     	brl	L10054
  5053                        L152:
  5054                        ;	{
  5055                        	.line	379
  5056                        ;		blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKN
                    O_MASK) - cf;
  5057                        	.line	380
  5058 00:1649: A5 25        	lda	<L150+cf_1
  5059 00:164B: 85 01        	sta	<R0
  5060 00:164D: A5 27        	lda	<L150+cf_1+2
  5061 00:164F: 85 03        	sta	<R0+2
  Sat Jul 10 2021  1:15                                                Page 95


  5062 00:1651: 06 01        	asl	<R0
  5063 00:1653: 26 03        	rol	<R0+2
  5064 00:1655: 06 01        	asl	<R0
  5065 00:1657: 26 03        	rol	<R0+2
  5066 00:1659: 06 01        	asl	<R0
  5067 00:165B: 26 03        	rol	<R0+2
  5068 00:165D: 06 01        	asl	<R0
  5069 00:165F: 26 03        	rol	<R0+2
  5070 00:1661: 18           	clc
  5071 00:1662: AD xx xx     	lda	|~~umm_heap
  5072 00:1665: 65 01        	adc	<R0
  5073 00:1667: 85 05        	sta	<R1
  5074 00:1669: AD xx xx     	lda	|~~umm_heap+2
  5075 00:166C: 65 03        	adc	<R0+2
  5076 00:166E: 85 07        	sta	<R1+2
  5077 00:1670: A7 05        	lda	[<R1]
  5078 00:1672: 29 FF 7F     	and	#<$7fff
  5079 00:1675: 85 01        	sta	<R0
  5080 00:1677: 64 03        	stz	<R0+2
  5081 00:1679: 38           	sec
  5082 00:167A: A5 01        	lda	<R0
  5083 00:167C: E5 25        	sbc	<L150+cf_1
  5084 00:167E: 85 19        	sta	<L150+blockSize_1
  5085 00:1680: A5 03        	lda	<R0+2
  5086 00:1682: E5 27        	sbc	<L150+cf_1+2
  5087 00:1684: 85 1B        	sta	<L150+blockSize_1+2
  5088                        ;
  5089                        ;		//DBGLOG_TRACE( "Looking at block %6i si
                    ze %6i\n", cf, blockSize );
  5090                        ;
  5091                        ;#if defined UMM_BEST_FIT
  5092                        ;		if ((blockSize >= blocks) && (blockSize 
                    < bestSize))
  5093                        	.line	385
  5094                        ;		{
  5095 00:1686: A5 19        	lda	<L150+blockSize_1
  5096 00:1688: C5 15        	cmp	<L150+blocks_1
  5097 00:168A: A5 1B        	lda	<L150+blockSize_1+2
  5098 00:168C: E5 17        	sbc	<L150+blocks_1+2
  5099 00:168E: B0 03        	bcs	L153
  5100 00:1690: 82 1D 00     	brl	L10055
  5101                        L153:
  5102 00:1693: A5 19        	lda	<L150+blockSize_1
  5103 00:1695: C5 1D        	cmp	<L150+bestSize_1
  5104 00:1697: A5 1B        	lda	<L150+blockSize_1+2
  5105 00:1699: E5 1F        	sbc	<L150+bestSize_1+2
  5106 00:169B: 90 03        	bcc	L154
  5107 00:169D: 82 10 00     	brl	L10055
  5108                        L154:
  5109                        	.line	386
  5110                        ;			bestBlock = cf;
  5111                        	.line	387
  5112 00:16A0: A5 25        	lda	<L150+cf_1
  5113 00:16A2: 85 21        	sta	<L150+bestBlock_1
  5114 00:16A4: A5 27        	lda	<L150+cf_1+2
  5115 00:16A6: 85 23        	sta	<L150+bestBlock_1+2
  5116                        ;			bestSize = blockSize;
  5117                        	.line	388
  Sat Jul 10 2021  1:15                                                Page 96


  5118 00:16A8: A5 19        	lda	<L150+blockSize_1
  5119 00:16AA: 85 1D        	sta	<L150+bestSize_1
  5120 00:16AC: A5 1B        	lda	<L150+blockSize_1+2
  5121 00:16AE: 85 1F        	sta	<L150+bestSize_1+2
  5122                        ;		}
  5123                        	.line	389
  5124                        ;#elif defined UMM_FIRST_FIT
  5125                        ;		/* This is the first block that fits! */
  5126                        ;		if( (blockSize >= blocks) )
  5127                        ;		break;
  5128                        ;#else
  5129                        ;#  error "No UMM_*_FIT is defined - check umm_mal
                    loc_cfg.h"
  5130                        ;#endif
  5131                        ;
  5132                        ;		cf = UMM_NFREE(cf);
  5133                        L10055:
  5134                        	.line	398
  5135 00:16B0: A5 25        	lda	<L150+cf_1
  5136 00:16B2: 85 01        	sta	<R0
  5137 00:16B4: A5 27        	lda	<L150+cf_1+2
  5138 00:16B6: 85 03        	sta	<R0+2
  5139 00:16B8: 06 01        	asl	<R0
  5140 00:16BA: 26 03        	rol	<R0+2
  5141 00:16BC: 06 01        	asl	<R0
  5142 00:16BE: 26 03        	rol	<R0+2
  5143 00:16C0: 06 01        	asl	<R0
  5144 00:16C2: 26 03        	rol	<R0+2
  5145 00:16C4: 06 01        	asl	<R0
  5146 00:16C6: 26 03        	rol	<R0+2
  5147 00:16C8: 18           	clc
  5148 00:16C9: A9 08 00     	lda	#$8
  5149 00:16CC: 6D xx xx     	adc	|~~umm_heap
  5150 00:16CF: 85 05        	sta	<R1
  5151 00:16D1: A9 00 00     	lda	#$0
  5152 00:16D4: 6D xx xx     	adc	|~~umm_heap+2
  5153 00:16D7: 85 07        	sta	<R1+2
  5154 00:16D9: 18           	clc
  5155 00:16DA: A5 05        	lda	<R1
  5156 00:16DC: 65 01        	adc	<R0
  5157 00:16DE: 85 09        	sta	<R2
  5158 00:16E0: A5 07        	lda	<R1+2
  5159 00:16E2: 65 03        	adc	<R0+2
  5160 00:16E4: 85 0B        	sta	<R2+2
  5161 00:16E6: A7 09        	lda	[<R2]
  5162 00:16E8: 85 25        	sta	<L150+cf_1
  5163 00:16EA: A0 02 00     	ldy	#$2
  5164 00:16ED: B7 09        	lda	[<R2],Y
  5165 00:16EF: 85 27        	sta	<L150+cf_1+2
  5166                        ;	}
  5167                        	.line	399
  5168 00:16F1: 82 4C FF     	brl	L10053
  5169                        L10054:
  5170                        ;
  5171                        ;	if (0x7FFF != bestSize)
  5172                        	.line	401
  5173                        ;	{
  5174 00:16F4: A5 1D        	lda	<L150+bestSize_1
  Sat Jul 10 2021  1:15                                                Page 97


  5175 00:16F6: C9 FF 7F     	cmp	#<$7fff
  5176 00:16F9: D0 05        	bne	L155
  5177 00:16FB: A5 1F        	lda	<L150+bestSize_1+2
  5178 00:16FD: C9 00 00     	cmp	#^$7fff
  5179                        L155:
  5180 00:1700: D0 03        	bne	L156
  5181 00:1702: 82 10 00     	brl	L10056
  5182                        L156:
  5183                        	.line	402
  5184                        ;		cf = bestBlock;
  5185                        	.line	403
  5186 00:1705: A5 21        	lda	<L150+bestBlock_1
  5187 00:1707: 85 25        	sta	<L150+cf_1
  5188 00:1709: A5 23        	lda	<L150+bestBlock_1+2
  5189 00:170B: 85 27        	sta	<L150+cf_1+2
  5190                        ;		blockSize = bestSize;
  5191                        	.line	404
  5192 00:170D: A5 1D        	lda	<L150+bestSize_1
  5193 00:170F: 85 19        	sta	<L150+blockSize_1
  5194 00:1711: A5 1F        	lda	<L150+bestSize_1+2
  5195 00:1713: 85 1B        	sta	<L150+blockSize_1+2
  5196                        ;	}
  5197                        	.line	405
  5198                        ;
  5199                        ;	if (( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) && bloc
                    kSize >= blocks)
  5200                        L10056:
  5201                        	.line	407
  5202                        ;	{
  5203 00:1715: A5 25        	lda	<L150+cf_1
  5204 00:1717: 85 01        	sta	<R0
  5205 00:1719: A5 27        	lda	<L150+cf_1+2
  5206 00:171B: 85 03        	sta	<R0+2
  5207 00:171D: 06 01        	asl	<R0
  5208 00:171F: 26 03        	rol	<R0+2
  5209 00:1721: 06 01        	asl	<R0
  5210 00:1723: 26 03        	rol	<R0+2
  5211 00:1725: 06 01        	asl	<R0
  5212 00:1727: 26 03        	rol	<R0+2
  5213 00:1729: 06 01        	asl	<R0
  5214 00:172B: 26 03        	rol	<R0+2
  5215 00:172D: 18           	clc
  5216 00:172E: AD xx xx     	lda	|~~umm_heap
  5217 00:1731: 65 01        	adc	<R0
  5218 00:1733: 85 05        	sta	<R1
  5219 00:1735: AD xx xx     	lda	|~~umm_heap+2
  5220 00:1738: 65 03        	adc	<R0+2
  5221 00:173A: 85 07        	sta	<R1+2
  5222 00:173C: A7 05        	lda	[<R1]
  5223 00:173E: 29 FF 7F     	and	#<$7fff
  5224 00:1741: D0 03        	bne	L157
  5225 00:1743: 82 38 02     	brl	L10057
  5226                        L157:
  5227 00:1746: A5 19        	lda	<L150+blockSize_1
  5228 00:1748: C5 15        	cmp	<L150+blocks_1
  5229 00:174A: A5 1B        	lda	<L150+blockSize_1+2
  5230 00:174C: E5 17        	sbc	<L150+blocks_1+2
  5231 00:174E: B0 03        	bcs	L158
  Sat Jul 10 2021  1:15                                                Page 98


  5232 00:1750: 82 2B 02     	brl	L10057
  5233                        L158:
  5234                        	.line	408
  5235                        ;		/*
  5236                        ;		 * This is an existing block in the memo
                    ry heap, we just need to split off
  5237                        ;		 * what we need, unlink it from the free
                     list and mark it as in use, and
  5238                        ;		 * link the rest of the block back into 
                    the freelist as if it was a new
  5239                        ;		 * block on the free list...
  5240                        ;		 */
  5241                        ;
  5242                        ;		if (blockSize == blocks)
  5243                        	.line	416
  5244                        ;		{
  5245 00:1753: A5 19        	lda	<L150+blockSize_1
  5246 00:1755: C5 15        	cmp	<L150+blocks_1
  5247 00:1757: D0 04        	bne	L159
  5248 00:1759: A5 1B        	lda	<L150+blockSize_1+2
  5249 00:175B: C5 17        	cmp	<L150+blocks_1+2
  5250                        L159:
  5251 00:175D: F0 03        	beq	L160
  5252 00:175F: 82 0B 00     	brl	L10058
  5253                        L160:
  5254                        	.line	417
  5255                        ;			/* It's an exact fit and we don'
                    t neet to split off a block. */
  5256                        ;			//DBGLOG_DEBUG( "Allocating %6i 
                    blocks starting at %6i - exact\n", blocks, cf );
  5257                        ;			/* Disconnect this block from th
                    e FREE list */
  5258                        ;
  5259                        ;			umm_disconnect_from_free_list(cf
                    );
  5260                        	.line	422
  5261 00:1762: D4 27        	pei	<L150+cf_1+2
  5262 00:1764: D4 25        	pei	<L150+cf_1
  5263 00:1766: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  5264                        ;
  5265                        ;		}
  5266                        	.line	424
  5267                        ;		else
  5268 00:176A: 82 0E 02     	brl	L10059
  5269                        L10058:
  5270                        ;		{
  5271                        	.line	426
  5272                        ;			/* It's not an exact fit and we 
                    need to split off a block. */
  5273                        ;			//DBGLOG_DEBUG( "Allocating %6i 
                    blocks starting at %6i - existing\n", blocks, cf );
  5274                        ;			/*
  5275                        ;			 * split current free block `cf`
                     into two blocks. The first one will be
  5276                        ;			 * returned to user, so it's not
                     free, and the second one will be free.
  5277                        ;			 */
  5278                        ;			umm_split_block(cf, blocks,
  Sat Jul 10 2021  1:15                                                Page 99


  5279                        	.line	433
  5280                        ;					UMM_FREELIST_MAS
                    K /*new block is free*/);
  5281 00:176D: F4 00 00     	pea	#^$8000
  5282 00:1770: F4 00 80     	pea	#<$8000
  5283 00:1773: D4 17        	pei	<L150+blocks_1+2
  5284 00:1775: D4 15        	pei	<L150+blocks_1
  5285 00:1777: D4 27        	pei	<L150+cf_1+2
  5286 00:1779: D4 25        	pei	<L150+cf_1
  5287 00:177B: 22 xx xx xx  	jsl	~~umm_split_block
  5288                        ;
  5289                        ;			/*
  5290                        ;			 * `umm_split_block()` does not 
                    update the free pointers (it affects
  5291                        ;			 * only free flags), but effecti
                    vely we've just moved beginning of the
  5292                        ;			 * free block from `cf` to `cf +
                     blocks`. So we have to adjust pointers
  5293                        ;			 * to and from adjacent free blo
                    cks.
  5294                        ;			 */
  5295                        ;
  5296                        ;			/* previous free block */
  5297                        ;			UMM_NFREE( UMM_PFREE(cf) ) = cf 
                    + blocks;
  5298                        	.line	444
  5299 00:177F: A5 25        	lda	<L150+cf_1
  5300 00:1781: 85 05        	sta	<R1
  5301 00:1783: A5 27        	lda	<L150+cf_1+2
  5302 00:1785: 85 07        	sta	<R1+2
  5303 00:1787: 06 05        	asl	<R1
  5304 00:1789: 26 07        	rol	<R1+2
  5305 00:178B: 06 05        	asl	<R1
  5306 00:178D: 26 07        	rol	<R1+2
  5307 00:178F: 06 05        	asl	<R1
  5308 00:1791: 26 07        	rol	<R1+2
  5309 00:1793: 06 05        	asl	<R1
  5310 00:1795: 26 07        	rol	<R1+2
  5311 00:1797: 18           	clc
  5312 00:1798: A9 0C 00     	lda	#$c
  5313 00:179B: 6D xx xx     	adc	|~~umm_heap
  5314 00:179E: 85 09        	sta	<R2
  5315 00:17A0: A9 00 00     	lda	#$0
  5316 00:17A3: 6D xx xx     	adc	|~~umm_heap+2
  5317 00:17A6: 85 0B        	sta	<R2+2
  5318 00:17A8: 18           	clc
  5319 00:17A9: A5 09        	lda	<R2
  5320 00:17AB: 65 05        	adc	<R1
  5321 00:17AD: 85 0D        	sta	<R3
  5322 00:17AF: A5 0B        	lda	<R2+2
  5323 00:17B1: 65 07        	adc	<R1+2
  5324 00:17B3: 85 0F        	sta	<R3+2
  5325 00:17B5: A0 02 00     	ldy	#$2
  5326 00:17B8: B7 0D        	lda	[<R3],Y
  5327 00:17BA: 48           	pha
  5328 00:17BB: A7 0D        	lda	[<R3]
  5329 00:17BD: 48           	pha
  5330 00:17BE: A9 04 00     	lda	#$4
  Sat Jul 10 2021  1:15                                                Page 100


  5331                        	xref	~~~lasl
  5332 00:17C1: 22 xx xx xx  	jsl	~~~lasl
  5333 00:17C5: 85 01        	sta	<R0
  5334 00:17C7: 86 03        	stx	<R0+2
  5335 00:17C9: 18           	clc
  5336 00:17CA: A9 08 00     	lda	#$8
  5337 00:17CD: 6D xx xx     	adc	|~~umm_heap
  5338 00:17D0: 85 05        	sta	<R1
  5339 00:17D2: A9 00 00     	lda	#$0
  5340 00:17D5: 6D xx xx     	adc	|~~umm_heap+2
  5341 00:17D8: 85 07        	sta	<R1+2
  5342 00:17DA: 18           	clc
  5343 00:17DB: A5 05        	lda	<R1
  5344 00:17DD: 65 01        	adc	<R0
  5345 00:17DF: 85 09        	sta	<R2
  5346 00:17E1: A5 07        	lda	<R1+2
  5347 00:17E3: 65 03        	adc	<R0+2
  5348 00:17E5: 85 0B        	sta	<R2+2
  5349 00:17E7: 18           	clc
  5350 00:17E8: A5 25        	lda	<L150+cf_1
  5351 00:17EA: 65 15        	adc	<L150+blocks_1
  5352 00:17EC: 85 01        	sta	<R0
  5353 00:17EE: A5 27        	lda	<L150+cf_1+2
  5354 00:17F0: 65 17        	adc	<L150+blocks_1+2
  5355 00:17F2: 85 03        	sta	<R0+2
  5356 00:17F4: A5 01        	lda	<R0
  5357 00:17F6: 87 09        	sta	[<R2]
  5358 00:17F8: A5 03        	lda	<R0+2
  5359 00:17FA: A0 02 00     	ldy	#$2
  5360 00:17FD: 97 09        	sta	[<R2],Y
  5361                        ;			UMM_PFREE( cf + blocks ) = UMM_P
                    FREE(cf);
  5362                        	.line	445
  5363 00:17FF: 18           	clc
  5364 00:1800: A5 25        	lda	<L150+cf_1
  5365 00:1802: 65 15        	adc	<L150+blocks_1
  5366 00:1804: 85 05        	sta	<R1
  5367 00:1806: A5 27        	lda	<L150+cf_1+2
  5368 00:1808: 65 17        	adc	<L150+blocks_1+2
  5369 00:180A: 85 07        	sta	<R1+2
  5370 00:180C: D4 07        	pei	<R1+2
  5371 00:180E: D4 05        	pei	<R1
  5372 00:1810: A9 04 00     	lda	#$4
  5373                        	xref	~~~lasl
  5374 00:1813: 22 xx xx xx  	jsl	~~~lasl
  5375 00:1817: 85 01        	sta	<R0
  5376 00:1819: 86 03        	stx	<R0+2
  5377 00:181B: 18           	clc
  5378 00:181C: A9 0C 00     	lda	#$c
  5379 00:181F: 6D xx xx     	adc	|~~umm_heap
  5380 00:1822: 85 09        	sta	<R2
  5381 00:1824: A9 00 00     	lda	#$0
  5382 00:1827: 6D xx xx     	adc	|~~umm_heap+2
  5383 00:182A: 85 0B        	sta	<R2+2
  5384 00:182C: 18           	clc
  5385 00:182D: A5 09        	lda	<R2
  5386 00:182F: 65 01        	adc	<R0
  5387 00:1831: 85 0D        	sta	<R3
  Sat Jul 10 2021  1:15                                                Page 101


  5388 00:1833: A5 0B        	lda	<R2+2
  5389 00:1835: 65 03        	adc	<R0+2
  5390 00:1837: 85 0F        	sta	<R3+2
  5391 00:1839: A5 25        	lda	<L150+cf_1
  5392 00:183B: 85 01        	sta	<R0
  5393 00:183D: A5 27        	lda	<L150+cf_1+2
  5394 00:183F: 85 03        	sta	<R0+2
  5395 00:1841: 06 01        	asl	<R0
  5396 00:1843: 26 03        	rol	<R0+2
  5397 00:1845: 06 01        	asl	<R0
  5398 00:1847: 26 03        	rol	<R0+2
  5399 00:1849: 06 01        	asl	<R0
  5400 00:184B: 26 03        	rol	<R0+2
  5401 00:184D: 06 01        	asl	<R0
  5402 00:184F: 26 03        	rol	<R0+2
  5403 00:1851: 18           	clc
  5404 00:1852: A9 0C 00     	lda	#$c
  5405 00:1855: 6D xx xx     	adc	|~~umm_heap
  5406 00:1858: 85 09        	sta	<R2
  5407 00:185A: A9 00 00     	lda	#$0
  5408 00:185D: 6D xx xx     	adc	|~~umm_heap+2
  5409 00:1860: 85 0B        	sta	<R2+2
  5410 00:1862: 18           	clc
  5411 00:1863: A5 09        	lda	<R2
  5412 00:1865: 65 01        	adc	<R0
  5413 00:1867: 85 11        	sta	<17
  5414 00:1869: A5 0B        	lda	<R2+2
  5415 00:186B: 65 03        	adc	<R0+2
  5416 00:186D: 85 13        	sta	<17+2
  5417 00:186F: A7 11        	lda	[<17]
  5418 00:1871: 87 0D        	sta	[<R3]
  5419 00:1873: A0 02 00     	ldy	#$2
  5420 00:1876: B7 11        	lda	[<17],Y
  5421 00:1878: A0 02 00     	ldy	#$2
  5422 00:187B: 97 0D        	sta	[<R3],Y
  5423                        ;
  5424                        ;			/* next free block */
  5425                        ;			UMM_PFREE( UMM_NFREE(cf) ) = cf 
                    + blocks;
  5426                        	.line	448
  5427 00:187D: A5 25        	lda	<L150+cf_1
  5428 00:187F: 85 05        	sta	<R1
  5429 00:1881: A5 27        	lda	<L150+cf_1+2
  5430 00:1883: 85 07        	sta	<R1+2
  5431 00:1885: 06 05        	asl	<R1
  5432 00:1887: 26 07        	rol	<R1+2
  5433 00:1889: 06 05        	asl	<R1
  5434 00:188B: 26 07        	rol	<R1+2
  5435 00:188D: 06 05        	asl	<R1
  5436 00:188F: 26 07        	rol	<R1+2
  5437 00:1891: 06 05        	asl	<R1
  5438 00:1893: 26 07        	rol	<R1+2
  5439 00:1895: 18           	clc
  5440 00:1896: A9 08 00     	lda	#$8
  5441 00:1899: 6D xx xx     	adc	|~~umm_heap
  5442 00:189C: 85 09        	sta	<R2
  5443 00:189E: A9 00 00     	lda	#$0
  5444 00:18A1: 6D xx xx     	adc	|~~umm_heap+2
  Sat Jul 10 2021  1:15                                                Page 102


  5445 00:18A4: 85 0B        	sta	<R2+2
  5446 00:18A6: 18           	clc
  5447 00:18A7: A5 09        	lda	<R2
  5448 00:18A9: 65 05        	adc	<R1
  5449 00:18AB: 85 0D        	sta	<R3
  5450 00:18AD: A5 0B        	lda	<R2+2
  5451 00:18AF: 65 07        	adc	<R1+2
  5452 00:18B1: 85 0F        	sta	<R3+2
  5453 00:18B3: A0 02 00     	ldy	#$2
  5454 00:18B6: B7 0D        	lda	[<R3],Y
  5455 00:18B8: 48           	pha
  5456 00:18B9: A7 0D        	lda	[<R3]
  5457 00:18BB: 48           	pha
  5458 00:18BC: A9 04 00     	lda	#$4
  5459                        	xref	~~~lasl
  5460 00:18BF: 22 xx xx xx  	jsl	~~~lasl
  5461 00:18C3: 85 01        	sta	<R0
  5462 00:18C5: 86 03        	stx	<R0+2
  5463 00:18C7: 18           	clc
  5464 00:18C8: A9 0C 00     	lda	#$c
  5465 00:18CB: 6D xx xx     	adc	|~~umm_heap
  5466 00:18CE: 85 05        	sta	<R1
  5467 00:18D0: A9 00 00     	lda	#$0
  5468 00:18D3: 6D xx xx     	adc	|~~umm_heap+2
  5469 00:18D6: 85 07        	sta	<R1+2
  5470 00:18D8: 18           	clc
  5471 00:18D9: A5 05        	lda	<R1
  5472 00:18DB: 65 01        	adc	<R0
  5473 00:18DD: 85 09        	sta	<R2
  5474 00:18DF: A5 07        	lda	<R1+2
  5475 00:18E1: 65 03        	adc	<R0+2
  5476 00:18E3: 85 0B        	sta	<R2+2
  5477 00:18E5: 18           	clc
  5478 00:18E6: A5 25        	lda	<L150+cf_1
  5479 00:18E8: 65 15        	adc	<L150+blocks_1
  5480 00:18EA: 85 01        	sta	<R0
  5481 00:18EC: A5 27        	lda	<L150+cf_1+2
  5482 00:18EE: 65 17        	adc	<L150+blocks_1+2
  5483 00:18F0: 85 03        	sta	<R0+2
  5484 00:18F2: A5 01        	lda	<R0
  5485 00:18F4: 87 09        	sta	[<R2]
  5486 00:18F6: A5 03        	lda	<R0+2
  5487 00:18F8: A0 02 00     	ldy	#$2
  5488 00:18FB: 97 09        	sta	[<R2],Y
  5489                        ;			UMM_NFREE( cf + blocks ) = UMM_N
                    FREE(cf);
  5490                        	.line	449
  5491 00:18FD: 18           	clc
  5492 00:18FE: A5 25        	lda	<L150+cf_1
  5493 00:1900: 65 15        	adc	<L150+blocks_1
  5494 00:1902: 85 05        	sta	<R1
  5495 00:1904: A5 27        	lda	<L150+cf_1+2
  5496 00:1906: 65 17        	adc	<L150+blocks_1+2
  5497 00:1908: 85 07        	sta	<R1+2
  5498 00:190A: D4 07        	pei	<R1+2
  5499 00:190C: D4 05        	pei	<R1
  5500 00:190E: A9 04 00     	lda	#$4
  5501                        	xref	~~~lasl
  Sat Jul 10 2021  1:15                                                Page 103


  5502 00:1911: 22 xx xx xx  	jsl	~~~lasl
  5503 00:1915: 85 01        	sta	<R0
  5504 00:1917: 86 03        	stx	<R0+2
  5505 00:1919: 18           	clc
  5506 00:191A: A9 08 00     	lda	#$8
  5507 00:191D: 6D xx xx     	adc	|~~umm_heap
  5508 00:1920: 85 09        	sta	<R2
  5509 00:1922: A9 00 00     	lda	#$0
  5510 00:1925: 6D xx xx     	adc	|~~umm_heap+2
  5511 00:1928: 85 0B        	sta	<R2+2
  5512 00:192A: 18           	clc
  5513 00:192B: A5 09        	lda	<R2
  5514 00:192D: 65 01        	adc	<R0
  5515 00:192F: 85 0D        	sta	<R3
  5516 00:1931: A5 0B        	lda	<R2+2
  5517 00:1933: 65 03        	adc	<R0+2
  5518 00:1935: 85 0F        	sta	<R3+2
  5519 00:1937: A5 25        	lda	<L150+cf_1
  5520 00:1939: 85 01        	sta	<R0
  5521 00:193B: A5 27        	lda	<L150+cf_1+2
  5522 00:193D: 85 03        	sta	<R0+2
  5523 00:193F: 06 01        	asl	<R0
  5524 00:1941: 26 03        	rol	<R0+2
  5525 00:1943: 06 01        	asl	<R0
  5526 00:1945: 26 03        	rol	<R0+2
  5527 00:1947: 06 01        	asl	<R0
  5528 00:1949: 26 03        	rol	<R0+2
  5529 00:194B: 06 01        	asl	<R0
  5530 00:194D: 26 03        	rol	<R0+2
  5531 00:194F: 18           	clc
  5532 00:1950: A9 08 00     	lda	#$8
  5533 00:1953: 6D xx xx     	adc	|~~umm_heap
  5534 00:1956: 85 09        	sta	<R2
  5535 00:1958: A9 00 00     	lda	#$0
  5536 00:195B: 6D xx xx     	adc	|~~umm_heap+2
  5537 00:195E: 85 0B        	sta	<R2+2
  5538 00:1960: 18           	clc
  5539 00:1961: A5 09        	lda	<R2
  5540 00:1963: 65 01        	adc	<R0
  5541 00:1965: 85 11        	sta	<17
  5542 00:1967: A5 0B        	lda	<R2+2
  5543 00:1969: 65 03        	adc	<R0+2
  5544 00:196B: 85 13        	sta	<17+2
  5545 00:196D: A7 11        	lda	[<17]
  5546 00:196F: 87 0D        	sta	[<R3]
  5547 00:1971: A0 02 00     	ldy	#$2
  5548 00:1974: B7 11        	lda	[<17],Y
  5549 00:1976: A0 02 00     	ldy	#$2
  5550 00:1979: 97 0D        	sta	[<R3],Y
  5551                        ;		}
  5552                        	.line	450
  5553                        L10059:
  5554                        ;	}
  5555                        	.line	451
  5556                        ;	else
  5557 00:197B: 82 19 00     	brl	L10060
  5558                        L10057:
  5559                        ;	{
  Sat Jul 10 2021  1:15                                                Page 104


  5560                        	.line	453
  5561                        ;		/* Out of memory */
  5562                        ;
  5563                        ;		//DBGLOG_DEBUG(  "Can't allocate %5i blo
                    cks\n", blocks );
  5564                        ;		return ((void FAR*) NULL);
  5565                        	.line	457
  5566 00:197E: A9 00 00     	lda	#$0
  5567 00:1981: AA           	tax
  5568 00:1982: A9 00 00     	lda	#$0
  5569                        L161:
  5570 00:1985: A8           	tay
  5571 00:1986: A5 2A        	lda	<L149+2
  5572 00:1988: 85 2E        	sta	<L149+2+4
  5573 00:198A: A5 29        	lda	<L149+1
  5574 00:198C: 85 2D        	sta	<L149+1+4
  5575 00:198E: 2B           	pld
  5576 00:198F: 3B           	tsc
  5577 00:1990: 18           	clc
  5578 00:1991: 69 2C 00     	adc	#L149+4
  5579 00:1994: 1B           	tcs
  5580 00:1995: 98           	tya
  5581 00:1996: 6B           	rtl
  5582                        ;	}
  5583                        	.line	458
  5584                        L10060:
  5585                        ;
  5586                        ;	return ((void FAR*) &UMM_DATA(cf));
  5587                        	.line	460
  5588 00:1997: A5 25        	lda	<L150+cf_1
  5589 00:1999: 85 01        	sta	<R0
  5590 00:199B: A5 27        	lda	<L150+cf_1+2
  5591 00:199D: 85 03        	sta	<R0+2
  5592 00:199F: 06 01        	asl	<R0
  5593 00:19A1: 26 03        	rol	<R0+2
  5594 00:19A3: 06 01        	asl	<R0
  5595 00:19A5: 26 03        	rol	<R0+2
  5596 00:19A7: 06 01        	asl	<R0
  5597 00:19A9: 26 03        	rol	<R0+2
  5598 00:19AB: 06 01        	asl	<R0
  5599 00:19AD: 26 03        	rol	<R0+2
  5600 00:19AF: 18           	clc
  5601 00:19B0: A9 08 00     	lda	#$8
  5602 00:19B3: 65 01        	adc	<R0
  5603 00:19B5: 85 05        	sta	<R1
  5604 00:19B7: A9 00 00     	lda	#$0
  5605 00:19BA: 65 03        	adc	<R0+2
  5606 00:19BC: 85 07        	sta	<R1+2
  5607 00:19BE: 18           	clc
  5608 00:19BF: AD xx xx     	lda	|~~umm_heap
  5609 00:19C2: 65 05        	adc	<R1
  5610 00:19C4: 85 01        	sta	<R0
  5611 00:19C6: AD xx xx     	lda	|~~umm_heap+2
  5612 00:19C9: 65 07        	adc	<R1+2
  5613 00:19CB: 85 03        	sta	<R0+2
  5614 00:19CD: A6 03        	ldx	<R0+2
  5615 00:19CF: A5 01        	lda	<R0
  5616 00:19D1: 82 B1 FF     	brl	L161
  Sat Jul 10 2021  1:15                                                Page 105


  5617                        ;}
  5618                        	.line	461
  5619                        	.endblock	461
  5620             00000028   L149	equ	40
  5621             00000015   L150	equ	21
  5622                        	ends
  5623                        	efunc
  5624                        	.endfunc	461,21,40
  5625                        	.line	461
  5626                        ;
  5627                        ;/* ----------------------------------------------
                    -------------------------- */
  5628                        ;
  5629                        ;void FAR *umm_malloc(unsigned long size)
  5630                        ;{
  5631                        	.line	465
  5632                        	.line	466
  5633                        	code
  5634                        	xdef	~~umm_malloc
  5635                        	func
  5636                        	.function	466
  5637                        ~~umm_malloc:
  5638                        	longa	on
  5639                        	longi	on
  5640 00:19D4: 3B           	tsc
  5641 00:19D5: 38           	sec
  5642 00:19D6: E9 04 00     	sbc	#L162
  5643 00:19D9: 1B           	tcs
  5644 00:19DA: 0B           	phd
  5645 00:19DB: 5B           	tcd
  5646             00000004   size_0	set	4
  5647                        	.block	466
  5648                        ;
  5649                        ;	void FAR *ptr = NULL;
  5650                        ;
  5651                        ;	if (umm_heap == NULL)
  5652             00000000   ptr_1	set	0
  5653                        	.sym	ptr,0,129,1,32
  5654                        	.sym	size,4,18,6,32
  5655 00:19DC: 64 01        	stz	<L163+ptr_1
  5656 00:19DE: 64 03        	stz	<L163+ptr_1+2
  5657                        	.line	470
  5658                        ;	{
  5659 00:19E0: AD xx xx     	lda	|~~umm_heap
  5660 00:19E3: 0D xx xx     	ora	|~~umm_heap+2
  5661 00:19E6: F0 03        	beq	L165
  5662 00:19E8: 82 04 00     	brl	L10061
  5663                        L165:
  5664                        	.line	471
  5665                        ;		umm_init();
  5666                        	.line	472
  5667 00:19EB: 22 xx xx xx  	jsl	~~umm_init
  5668                        ;	}
  5669                        	.line	473
  5670                        ;
  5671                        ;	/*
  5672                        ;	 * the very first thing we do is figure out if w
                    e're being asked to allocate
  Sat Jul 10 2021  1:15                                                Page 106


  5673                        ;	 * a size of 0 - and if we are we'll simply retu
                    rn a null pointer. if not
  5674                        ;	 * then reduce the size by 1 byte so that the su
                    bsequent calculations on
  5675                        ;	 * the number of blocks to allocate are easier..
                    .
  5676                        ;	 */
  5677                        ;
  5678                        ;	if (0 == size)
  5679                        L10061:
  5680                        	.line	482
  5681                        ;	{
  5682 00:19EF: A5 08        	lda	<L162+size_0
  5683 00:19F1: 05 0A        	ora	<L162+size_0+2
  5684 00:19F3: F0 03        	beq	L166
  5685 00:19F5: 82 16 00     	brl	L10062
  5686                        L166:
  5687                        	.line	483
  5688                        ;		//DBGLOG_DEBUG( "malloc a block of 0 byt
                    es -> do nothing\n" );
  5689                        ;
  5690                        ;		return (ptr);
  5691                        	.line	486
  5692 00:19F8: A6 03        	ldx	<L163+ptr_1+2
  5693 00:19FA: A5 01        	lda	<L163+ptr_1
  5694                        L167:
  5695 00:19FC: A8           	tay
  5696 00:19FD: A5 06        	lda	<L162+2
  5697 00:19FF: 85 0A        	sta	<L162+2+4
  5698 00:1A01: A5 05        	lda	<L162+1
  5699 00:1A03: 85 09        	sta	<L162+1+4
  5700 00:1A05: 2B           	pld
  5701 00:1A06: 3B           	tsc
  5702 00:1A07: 18           	clc
  5703 00:1A08: 69 08 00     	adc	#L162+4
  5704 00:1A0B: 1B           	tcs
  5705 00:1A0C: 98           	tya
  5706 00:1A0D: 6B           	rtl
  5707                        ;	}
  5708                        	.line	487
  5709                        ;
  5710                        ;	/* Allocate the memory withing a protected criti
                    cal section */
  5711                        ;
  5712                        ;	UMM_CRITICAL_ENTRY();
  5713                        L10062:
  5714                        	.line	491
  5715                        ;
  5716                        ;	ptr = umm_malloc_core(size);
  5717                        	.line	493
  5718 00:1A0E: D4 0A        	pei	<L162+size_0+2
  5719 00:1A10: D4 08        	pei	<L162+size_0
  5720 00:1A12: 22 xx xx xx  	jsl	~~umm_malloc_core
  5721 00:1A16: 85 01        	sta	<L163+ptr_1
  5722 00:1A18: 86 03        	stx	<L163+ptr_1+2
  5723                        ;
  5724                        ;	UMM_CRITICAL_EXIT();
  5725                        	.line	495
  Sat Jul 10 2021  1:15                                                Page 107


  5726                        ;
  5727                        ;	return (ptr);
  5728                        	.line	497
  5729 00:1A1A: A6 03        	ldx	<L163+ptr_1+2
  5730 00:1A1C: A5 01        	lda	<L163+ptr_1
  5731 00:1A1E: 82 DB FF     	brl	L167
  5732                        ;}
  5733                        	.line	498
  5734                        	.endblock	498
  5735             00000004   L162	equ	4
  5736             00000001   L163	equ	1
  5737                        	ends
  5738                        	efunc
  5739                        	.endfunc	498,1,4
  5740                        	.line	498
  5741                        ;
  5742                        ;/* ----------------------------------------------
                    -------------------------- */
  5743                        ;
  5744                        ;void FAR *umm_realloc(void FAR *ptr, unsigned lon
                    g size)
  5745                        ;{
  5746                        	.line	502
  5747                        	.line	503
  5748                        	code
  5749                        	xdef	~~umm_realloc
  5750                        	func
  5751                        	.function	503
  5752                        ~~umm_realloc:
  5753                        	longa	on
  5754                        	longi	on
  5755 00:1A21: 3B           	tsc
  5756 00:1A22: 38           	sec
  5757 00:1A23: E9 2A 00     	sbc	#L168
  5758 00:1A26: 1B           	tcs
  5759 00:1A27: 0B           	phd
  5760 00:1A28: 5B           	tcd
  5761             00000004   ptr_0	set	4
  5762             00000008   size_0	set	8
  5763                        	.block	503
  5764                        ;
  5765                        ;	unsigned long blocks;
  5766                        ;	unsigned long blockSize;
  5767                        ;	unsigned long prevBlockSize = 0;
  5768                        ;	unsigned long nextBlockSize = 0;
  5769                        ;
  5770                        ;	unsigned long c;
  5771                        ;
  5772                        ;	size_t curSize;
  5773                        ;
  5774                        ;	if (umm_heap == NULL)
  5775             00000000   blocks_1	set	0
  5776             00000004   blockSize_1	set	4
  5777             00000008   prevBlockSize_1	set	8
  5778             0000000C   nextBlockSize_1	set	12
  5779             00000010   c_1	set	16
  5780             00000014   curSize_1	set	20
  5781                        	.sym	blocks,0,18,1,32
  Sat Jul 10 2021  1:15                                                Page 108


  5782                        	.sym	blockSize,4,18,1,32
  5783                        	.sym	prevBlockSize,8,18,1,32
  5784                        	.sym	nextBlockSize,12,18,1,32
  5785                        	.sym	c,16,18,1,32
  5786                        	.sym	curSize,20,16,1,16
  5787                        	.sym	ptr,4,129,6,32
  5788                        	.sym	size,8,18,6,32
  5789 00:1A29: 64 19        	stz	<L169+prevBlockSize_1
  5790 00:1A2B: 64 1B        	stz	<L169+prevBlockSize_1+2
  5791 00:1A2D: 64 1D        	stz	<L169+nextBlockSize_1
  5792 00:1A2F: 64 1F        	stz	<L169+nextBlockSize_1+2
  5793                        	.line	514
  5794                        ;	{
  5795 00:1A31: AD xx xx     	lda	|~~umm_heap
  5796 00:1A34: 0D xx xx     	ora	|~~umm_heap+2
  5797 00:1A37: F0 03        	beq	L171
  5798 00:1A39: 82 04 00     	brl	L10063
  5799                        L171:
  5800                        	.line	515
  5801                        ;		umm_init();
  5802                        	.line	516
  5803 00:1A3C: 22 xx xx xx  	jsl	~~umm_init
  5804                        ;	}
  5805                        	.line	517
  5806                        ;
  5807                        ;	/*
  5808                        ;	 * This code looks after the case of a NULL valu
                    e for ptr. The ANSI C
  5809                        ;	 * standard says that if ptr is NULL and size is
                     non-zero, then we've
  5810                        ;	 * got to work the same a malloc(). If size is a
                    lso 0, then our version
  5811                        ;	 * of malloc() returns a NULL pointer, which is 
                    OK as FAR as the ANSI C
  5812                        ;	 * standard is concerned.
  5813                        ;	 */
  5814                        ;
  5815                        ;	if (((void FAR*) NULL == ptr))
  5816                        L10063:
  5817                        	.line	527
  5818                        ;	{
  5819 00:1A40: A5 2E        	lda	<L168+ptr_0
  5820 00:1A42: 05 30        	ora	<L168+ptr_0+2
  5821 00:1A44: F0 03        	beq	L172
  5822 00:1A46: 82 22 00     	brl	L10064
  5823                        L172:
  5824                        	.line	528
  5825                        ;		//DBGLOG_DEBUG( "realloc the NULL pointe
                    r - call malloc()\n" );
  5826                        ;
  5827                        ;		return (umm_malloc(size));
  5828                        	.line	531
  5829 00:1A49: D4 34        	pei	<L168+size_0+2
  5830 00:1A4B: D4 32        	pei	<L168+size_0
  5831 00:1A4D: 22 xx xx xx  	jsl	~~umm_malloc
  5832 00:1A51: 85 01        	sta	<R0
  5833 00:1A53: 86 03        	stx	<R0+2
  5834 00:1A55: A6 03        	ldx	<R0+2
  Sat Jul 10 2021  1:15                                                Page 109


  5835 00:1A57: A5 01        	lda	<R0
  5836                        L173:
  5837 00:1A59: A8           	tay
  5838 00:1A5A: A5 2C        	lda	<L168+2
  5839 00:1A5C: 85 34        	sta	<L168+2+8
  5840 00:1A5E: A5 2B        	lda	<L168+1
  5841 00:1A60: 85 33        	sta	<L168+1+8
  5842 00:1A62: 2B           	pld
  5843 00:1A63: 3B           	tsc
  5844 00:1A64: 18           	clc
  5845 00:1A65: 69 32 00     	adc	#L168+8
  5846 00:1A68: 1B           	tcs
  5847 00:1A69: 98           	tya
  5848 00:1A6A: 6B           	rtl
  5849                        ;	}
  5850                        	.line	532
  5851                        ;
  5852                        ;	/*
  5853                        ;	 * Now we're sure that we have a non_NULL ptr, b
                    ut we're not sure what
  5854                        ;	 * we should do with it. If the size is 0, then 
                    the ANSI C standard says that
  5855                        ;	 * we should operate the same as free.
  5856                        ;	 */
  5857                        ;
  5858                        ;	if (0 == size)
  5859                        L10064:
  5860                        	.line	540
  5861                        ;	{
  5862 00:1A6B: A5 32        	lda	<L168+size_0
  5863 00:1A6D: 05 34        	ora	<L168+size_0+2
  5864 00:1A6F: F0 03        	beq	L174
  5865 00:1A71: 82 12 00     	brl	L10065
  5866                        L174:
  5867                        	.line	541
  5868                        ;		//DBGLOG_DEBUG( "realloc to 0 size, just
                     free the block\n" );
  5869                        ;
  5870                        ;		umm_free(ptr);
  5871                        	.line	544
  5872 00:1A74: D4 30        	pei	<L168+ptr_0+2
  5873 00:1A76: D4 2E        	pei	<L168+ptr_0
  5874 00:1A78: 22 xx xx xx  	jsl	~~umm_free
  5875                        ;
  5876                        ;		return ((void FAR *) NULL);
  5877                        	.line	546
  5878 00:1A7C: A9 00 00     	lda	#$0
  5879 00:1A7F: AA           	tax
  5880 00:1A80: A9 00 00     	lda	#$0
  5881 00:1A83: 82 D3 FF     	brl	L173
  5882                        ;	}
  5883                        	.line	547
  5884                        ;
  5885                        ;	/*
  5886                        ;	 * Otherwise we need to actually do a reallocati
                    on. A naiive approach
  5887                        ;	 * would be to malloc() a new block of the corre
                    ct size, copy the old data
  Sat Jul 10 2021  1:15                                                Page 110


  5888                        ;	 * to the new block, and then free the old block
                    .
  5889                        ;	 *
  5890                        ;	 * While this will work, we end up doing a lot o
                    f possibly unnecessary
  5891                        ;	 * copying. So first, let's figure out how many 
                    blocks we'll need.
  5892                        ;	 */
  5893                        ;
  5894                        ;	blocks = umm_blocks(size);
  5895                        L10065:
  5896                        	.line	558
  5897 00:1A86: D4 32        	pei	<L168+size_0
  5898 00:1A88: 22 xx xx xx  	jsl	~~umm_blocks
  5899 00:1A8C: 85 11        	sta	<L169+blocks_1
  5900 00:1A8E: 86 13        	stx	<L169+blocks_1+2
  5901                        ;
  5902                        ;	/* Figure out which block we're in. Note the use
                     of truncated division... */
  5903                        ;
  5904                        ;	c = (((char FAR *) ptr) - (char FAR *) (&(umm_he
                    ap[0]))) / sizeof(umm_block);
  5905                        	.line	562
  5906 00:1A90: 38           	sec
  5907 00:1A91: A5 2E        	lda	<L168+ptr_0
  5908 00:1A93: ED xx xx     	sbc	|~~umm_heap
  5909 00:1A96: 85 01        	sta	<R0
  5910 00:1A98: A5 30        	lda	<L168+ptr_0+2
  5911 00:1A9A: ED xx xx     	sbc	|~~umm_heap+2
  5912 00:1A9D: 85 03        	sta	<R0+2
  5913 00:1A9F: F4 00 00     	pea	#^$10
  5914 00:1AA2: F4 10 00     	pea	#<$10
  5915 00:1AA5: D4 03        	pei	<R0+2
  5916 00:1AA7: D4 01        	pei	<R0
  5917                        	xref	~~~ldiv
  5918 00:1AA9: 22 xx xx xx  	jsl	~~~ldiv
  5919 00:1AAD: 85 21        	sta	<L169+c_1
  5920 00:1AAF: 86 23        	stx	<L169+c_1+2
  5921                        ;
  5922                        ;	/* Figure out how big this block is ... the free
                     bit is not set :-) */
  5923                        ;
  5924                        ;	blockSize = (UMM_NBLOCK(c) - c);
  5925                        	.line	566
  5926 00:1AB1: A5 21        	lda	<L169+c_1
  5927 00:1AB3: 85 01        	sta	<R0
  5928 00:1AB5: A5 23        	lda	<L169+c_1+2
  5929 00:1AB7: 85 03        	sta	<R0+2
  5930 00:1AB9: 06 01        	asl	<R0
  5931 00:1ABB: 26 03        	rol	<R0+2
  5932 00:1ABD: 06 01        	asl	<R0
  5933 00:1ABF: 26 03        	rol	<R0+2
  5934 00:1AC1: 06 01        	asl	<R0
  5935 00:1AC3: 26 03        	rol	<R0+2
  5936 00:1AC5: 06 01        	asl	<R0
  5937 00:1AC7: 26 03        	rol	<R0+2
  5938 00:1AC9: 18           	clc
  5939 00:1ACA: AD xx xx     	lda	|~~umm_heap
  Sat Jul 10 2021  1:15                                                Page 111


  5940 00:1ACD: 65 01        	adc	<R0
  5941 00:1ACF: 85 05        	sta	<R1
  5942 00:1AD1: AD xx xx     	lda	|~~umm_heap+2
  5943 00:1AD4: 65 03        	adc	<R0+2
  5944 00:1AD6: 85 07        	sta	<R1+2
  5945 00:1AD8: 38           	sec
  5946 00:1AD9: A7 05        	lda	[<R1]
  5947 00:1ADB: E5 21        	sbc	<L169+c_1
  5948 00:1ADD: 85 15        	sta	<L169+blockSize_1
  5949 00:1ADF: A0 02 00     	ldy	#$2
  5950 00:1AE2: B7 05        	lda	[<R1],Y
  5951 00:1AE4: E5 23        	sbc	<L169+c_1+2
  5952 00:1AE6: 85 17        	sta	<L169+blockSize_1+2
  5953                        ;
  5954                        ;	/* Figure out how many bytes are in this block *
                    /
  5955                        ;
  5956                        ;	curSize = (blockSize * sizeof(umm_block))
  5957                        	.line	570
  5958                        ;			- (sizeof(((umm_block *) 0)->hea
                    der));
  5959 00:1AE8: A5 15        	lda	<L169+blockSize_1
  5960 00:1AEA: 85 01        	sta	<R0
  5961 00:1AEC: A5 17        	lda	<L169+blockSize_1+2
  5962 00:1AEE: 85 03        	sta	<R0+2
  5963 00:1AF0: 06 01        	asl	<R0
  5964 00:1AF2: 26 03        	rol	<R0+2
  5965 00:1AF4: 06 01        	asl	<R0
  5966 00:1AF6: 26 03        	rol	<R0+2
  5967 00:1AF8: 06 01        	asl	<R0
  5968 00:1AFA: 26 03        	rol	<R0+2
  5969 00:1AFC: 06 01        	asl	<R0
  5970 00:1AFE: 26 03        	rol	<R0+2
  5971 00:1B00: 18           	clc
  5972 00:1B01: A9 F8 FF     	lda	#$fff8
  5973 00:1B04: 65 01        	adc	<R0
  5974 00:1B06: 85 05        	sta	<R1
  5975 00:1B08: A9 FF FF     	lda	#$ffff
  5976 00:1B0B: 65 03        	adc	<R0+2
  5977 00:1B0D: 85 07        	sta	<R1+2
  5978 00:1B0F: A5 05        	lda	<R1
  5979 00:1B11: 85 25        	sta	<L169+curSize_1
  5980                        ;
  5981                        ;	/* Protect the critical section... */
  5982                        ;	UMM_CRITICAL_ENTRY();
  5983                        	.line	574
  5984                        ;
  5985                        ;	/* Now figure out if the previous and/or next bl
                    ocks are free as well as
  5986                        ;	 * their sizes - this will help us to minimize s
                    pecial code later when we
  5987                        ;	 * decide if it's possible to use the adjacent b
                    locks.
  5988                        ;	 *
  5989                        ;	 * We set prevBlockSize and nextBlockSize to non
                    -zero values ONLY if they
  5990                        ;	 * are free!
  5991                        ;	 */
  Sat Jul 10 2021  1:15                                                Page 112


  5992                        ;
  5993                        ;	if ((UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MA
                    SK))
  5994                        	.line	584
  5995                        ;	{
  5996 00:1B13: A5 21        	lda	<L169+c_1
  5997 00:1B15: 85 05        	sta	<R1
  5998 00:1B17: A5 23        	lda	<L169+c_1+2
  5999 00:1B19: 85 07        	sta	<R1+2
  6000 00:1B1B: 06 05        	asl	<R1
  6001 00:1B1D: 26 07        	rol	<R1+2
  6002 00:1B1F: 06 05        	asl	<R1
  6003 00:1B21: 26 07        	rol	<R1+2
  6004 00:1B23: 06 05        	asl	<R1
  6005 00:1B25: 26 07        	rol	<R1+2
  6006 00:1B27: 06 05        	asl	<R1
  6007 00:1B29: 26 07        	rol	<R1+2
  6008 00:1B2B: 18           	clc
  6009 00:1B2C: AD xx xx     	lda	|~~umm_heap
  6010 00:1B2F: 65 05        	adc	<R1
  6011 00:1B31: 85 09        	sta	<R2
  6012 00:1B33: AD xx xx     	lda	|~~umm_heap+2
  6013 00:1B36: 65 07        	adc	<R1+2
  6014 00:1B38: 85 0B        	sta	<R2+2
  6015 00:1B3A: A0 02 00     	ldy	#$2
  6016 00:1B3D: B7 09        	lda	[<R2],Y
  6017 00:1B3F: 48           	pha
  6018 00:1B40: A7 09        	lda	[<R2]
  6019 00:1B42: 48           	pha
  6020 00:1B43: A9 04 00     	lda	#$4
  6021                        	xref	~~~lasl
  6022 00:1B46: 22 xx xx xx  	jsl	~~~lasl
  6023 00:1B4A: 85 01        	sta	<R0
  6024 00:1B4C: 86 03        	stx	<R0+2
  6025 00:1B4E: 18           	clc
  6026 00:1B4F: AD xx xx     	lda	|~~umm_heap
  6027 00:1B52: 65 01        	adc	<R0
  6028 00:1B54: 85 05        	sta	<R1
  6029 00:1B56: AD xx xx     	lda	|~~umm_heap+2
  6030 00:1B59: 65 03        	adc	<R0+2
  6031 00:1B5B: 85 07        	sta	<R1+2
  6032 00:1B5D: A7 05        	lda	[<R1]
  6033 00:1B5F: 29 00 80     	and	#<$8000
  6034 00:1B62: D0 03        	bne	L175
  6035 00:1B64: 82 8A 00     	brl	L10066
  6036                        L175:
  6037                        	.line	585
  6038                        ;		nextBlockSize = (UMM_NBLOCK(UMM_NBLOCK(c
                    )) & UMM_BLOCKNO_MASK)
  6039                        	.line	586
  6040                        ;				- UMM_NBLOCK(c);
  6041 00:1B67: A5 21        	lda	<L169+c_1
  6042 00:1B69: 85 01        	sta	<R0
  6043 00:1B6B: A5 23        	lda	<L169+c_1+2
  6044 00:1B6D: 85 03        	sta	<R0+2
  6045 00:1B6F: 06 01        	asl	<R0
  6046 00:1B71: 26 03        	rol	<R0+2
  6047 00:1B73: 06 01        	asl	<R0
  Sat Jul 10 2021  1:15                                                Page 113


  6048 00:1B75: 26 03        	rol	<R0+2
  6049 00:1B77: 06 01        	asl	<R0
  6050 00:1B79: 26 03        	rol	<R0+2
  6051 00:1B7B: 06 01        	asl	<R0
  6052 00:1B7D: 26 03        	rol	<R0+2
  6053 00:1B7F: 18           	clc
  6054 00:1B80: AD xx xx     	lda	|~~umm_heap
  6055 00:1B83: 65 01        	adc	<R0
  6056 00:1B85: 85 05        	sta	<R1
  6057 00:1B87: AD xx xx     	lda	|~~umm_heap+2
  6058 00:1B8A: 65 03        	adc	<R0+2
  6059 00:1B8C: 85 07        	sta	<R1+2
  6060 00:1B8E: A5 21        	lda	<L169+c_1
  6061 00:1B90: 85 09        	sta	<R2
  6062 00:1B92: A5 23        	lda	<L169+c_1+2
  6063 00:1B94: 85 0B        	sta	<R2+2
  6064 00:1B96: 06 09        	asl	<R2
  6065 00:1B98: 26 0B        	rol	<R2+2
  6066 00:1B9A: 06 09        	asl	<R2
  6067 00:1B9C: 26 0B        	rol	<R2+2
  6068 00:1B9E: 06 09        	asl	<R2
  6069 00:1BA0: 26 0B        	rol	<R2+2
  6070 00:1BA2: 06 09        	asl	<R2
  6071 00:1BA4: 26 0B        	rol	<R2+2
  6072 00:1BA6: 18           	clc
  6073 00:1BA7: AD xx xx     	lda	|~~umm_heap
  6074 00:1BAA: 65 09        	adc	<R2
  6075 00:1BAC: 85 0D        	sta	<R3
  6076 00:1BAE: AD xx xx     	lda	|~~umm_heap+2
  6077 00:1BB1: 65 0B        	adc	<R2+2
  6078 00:1BB3: 85 0F        	sta	<R3+2
  6079 00:1BB5: A0 02 00     	ldy	#$2
  6080 00:1BB8: B7 0D        	lda	[<R3],Y
  6081 00:1BBA: 48           	pha
  6082 00:1BBB: A7 0D        	lda	[<R3]
  6083 00:1BBD: 48           	pha
  6084 00:1BBE: A9 04 00     	lda	#$4
  6085                        	xref	~~~lasl
  6086 00:1BC1: 22 xx xx xx  	jsl	~~~lasl
  6087 00:1BC5: 85 01        	sta	<R0
  6088 00:1BC7: 86 03        	stx	<R0+2
  6089 00:1BC9: 18           	clc
  6090 00:1BCA: AD xx xx     	lda	|~~umm_heap
  6091 00:1BCD: 65 01        	adc	<R0
  6092 00:1BCF: 85 09        	sta	<R2
  6093 00:1BD1: AD xx xx     	lda	|~~umm_heap+2
  6094 00:1BD4: 65 03        	adc	<R0+2
  6095 00:1BD6: 85 0B        	sta	<R2+2
  6096 00:1BD8: A7 09        	lda	[<R2]
  6097 00:1BDA: 29 FF 7F     	and	#<$7fff
  6098 00:1BDD: 85 01        	sta	<R0
  6099 00:1BDF: 64 03        	stz	<R0+2
  6100 00:1BE1: 38           	sec
  6101 00:1BE2: A5 01        	lda	<R0
  6102 00:1BE4: E7 05        	sbc	[<R1]
  6103 00:1BE6: 85 1D        	sta	<L169+nextBlockSize_1
  6104 00:1BE8: A5 03        	lda	<R0+2
  6105 00:1BEA: A0 02 00     	ldy	#$2
  Sat Jul 10 2021  1:15                                                Page 114


  6106 00:1BED: F7 05        	sbc	[<R1],Y
  6107 00:1BEF: 85 1F        	sta	<L169+nextBlockSize_1+2
  6108                        ;	}
  6109                        	.line	588
  6110                        ;
  6111                        ;	if ((UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MA
                    SK))
  6112                        L10066:
  6113                        	.line	590
  6114                        ;	{
  6115 00:1BF1: A5 21        	lda	<L169+c_1
  6116 00:1BF3: 85 05        	sta	<R1
  6117 00:1BF5: A5 23        	lda	<L169+c_1+2
  6118 00:1BF7: 85 07        	sta	<R1+2
  6119 00:1BF9: 06 05        	asl	<R1
  6120 00:1BFB: 26 07        	rol	<R1+2
  6121 00:1BFD: 06 05        	asl	<R1
  6122 00:1BFF: 26 07        	rol	<R1+2
  6123 00:1C01: 06 05        	asl	<R1
  6124 00:1C03: 26 07        	rol	<R1+2
  6125 00:1C05: 06 05        	asl	<R1
  6126 00:1C07: 26 07        	rol	<R1+2
  6127 00:1C09: 18           	clc
  6128 00:1C0A: A9 04 00     	lda	#$4
  6129 00:1C0D: 6D xx xx     	adc	|~~umm_heap
  6130 00:1C10: 85 09        	sta	<R2
  6131 00:1C12: A9 00 00     	lda	#$0
  6132 00:1C15: 6D xx xx     	adc	|~~umm_heap+2
  6133 00:1C18: 85 0B        	sta	<R2+2
  6134 00:1C1A: 18           	clc
  6135 00:1C1B: A5 09        	lda	<R2
  6136 00:1C1D: 65 05        	adc	<R1
  6137 00:1C1F: 85 0D        	sta	<R3
  6138 00:1C21: A5 0B        	lda	<R2+2
  6139 00:1C23: 65 07        	adc	<R1+2
  6140 00:1C25: 85 0F        	sta	<R3+2
  6141 00:1C27: A0 02 00     	ldy	#$2
  6142 00:1C2A: B7 0D        	lda	[<R3],Y
  6143 00:1C2C: 48           	pha
  6144 00:1C2D: A7 0D        	lda	[<R3]
  6145 00:1C2F: 48           	pha
  6146 00:1C30: A9 04 00     	lda	#$4
  6147                        	xref	~~~lasl
  6148 00:1C33: 22 xx xx xx  	jsl	~~~lasl
  6149 00:1C37: 85 01        	sta	<R0
  6150 00:1C39: 86 03        	stx	<R0+2
  6151 00:1C3B: 18           	clc
  6152 00:1C3C: AD xx xx     	lda	|~~umm_heap
  6153 00:1C3F: 65 01        	adc	<R0
  6154 00:1C41: 85 05        	sta	<R1
  6155 00:1C43: AD xx xx     	lda	|~~umm_heap+2
  6156 00:1C46: 65 03        	adc	<R0+2
  6157 00:1C48: 85 07        	sta	<R1+2
  6158 00:1C4A: A7 05        	lda	[<R1]
  6159 00:1C4C: 29 00 80     	and	#<$8000
  6160 00:1C4F: D0 03        	bne	L176
  6161 00:1C51: 82 46 00     	brl	L10067
  6162                        L176:
  Sat Jul 10 2021  1:15                                                Page 115


  6163                        	.line	591
  6164                        ;		prevBlockSize = (c - UMM_PBLOCK(c));
  6165                        	.line	592
  6166 00:1C54: A5 21        	lda	<L169+c_1
  6167 00:1C56: 85 01        	sta	<R0
  6168 00:1C58: A5 23        	lda	<L169+c_1+2
  6169 00:1C5A: 85 03        	sta	<R0+2
  6170 00:1C5C: 06 01        	asl	<R0
  6171 00:1C5E: 26 03        	rol	<R0+2
  6172 00:1C60: 06 01        	asl	<R0
  6173 00:1C62: 26 03        	rol	<R0+2
  6174 00:1C64: 06 01        	asl	<R0
  6175 00:1C66: 26 03        	rol	<R0+2
  6176 00:1C68: 06 01        	asl	<R0
  6177 00:1C6A: 26 03        	rol	<R0+2
  6178 00:1C6C: 18           	clc
  6179 00:1C6D: A9 04 00     	lda	#$4
  6180 00:1C70: 6D xx xx     	adc	|~~umm_heap
  6181 00:1C73: 85 05        	sta	<R1
  6182 00:1C75: A9 00 00     	lda	#$0
  6183 00:1C78: 6D xx xx     	adc	|~~umm_heap+2
  6184 00:1C7B: 85 07        	sta	<R1+2
  6185 00:1C7D: 18           	clc
  6186 00:1C7E: A5 05        	lda	<R1
  6187 00:1C80: 65 01        	adc	<R0
  6188 00:1C82: 85 09        	sta	<R2
  6189 00:1C84: A5 07        	lda	<R1+2
  6190 00:1C86: 65 03        	adc	<R0+2
  6191 00:1C88: 85 0B        	sta	<R2+2
  6192 00:1C8A: 38           	sec
  6193 00:1C8B: A5 21        	lda	<L169+c_1
  6194 00:1C8D: E7 09        	sbc	[<R2]
  6195 00:1C8F: 85 19        	sta	<L169+prevBlockSize_1
  6196 00:1C91: A5 23        	lda	<L169+c_1+2
  6197 00:1C93: A0 02 00     	ldy	#$2
  6198 00:1C96: F7 09        	sbc	[<R2],Y
  6199 00:1C98: 85 1B        	sta	<L169+prevBlockSize_1+2
  6200                        ;	}
  6201                        	.line	593
  6202                        ;
  6203                        ;	//DBGLOG_DEBUG( "realloc blocks %i blockSize %i 
                    nextBlockSize %i prevBlockSize %i\n", blocks, blockSize, nex
                    tBlockSize, prevBlockSize );
  6204                        ;
  6205                        ;	/*
  6206                        ;	 * Ok, now that we're here we know how many bloc
                    ks we want and the current
  6207                        ;	 * blockSize. The prevBlockSize and nextBlockSiz
                    e are set and we can figure
  6208                        ;	 * out the best strategy for the new allocation 
                    as follows:
  6209                        ;	 *
  6210                        ;	 * 1. If the new block is the same size or small
                    er than the current block do
  6211                        ;	 *    nothing.
  6212                        ;	 * 2. If the next block is free and adding it to
                     the current block gives us
  6213                        ;	 *    enough memory, assimilate the next block.
  Sat Jul 10 2021  1:15                                                Page 116


  6214                        ;	 * 3. If the prev block is free and adding it to
                     the current block gives us
  6215                        ;	 *    enough memory, remove the previous block f
                    rom the free list, assimilate
  6216                        ;	 *    it, copy to the new block.
  6217                        ;	 * 4. If the prev and next blocks are free and a
                    dding them to the current
  6218                        ;	 *    block gives us enough memory, assimilate t
                    he next block, remove the
  6219                        ;	 *    previous block from the free list, assimil
                    ate it, copy to the new block.
  6220                        ;	 * 5. Otherwise try to allocate an entirely new 
                    block of memory. If the
  6221                        ;	 *    allocation works free the old block and re
                    turn the new pointer. If
  6222                        ;	 *    the allocation fails, return NULL and leav
                    e the old block intact.
  6223                        ;	 *
  6224                        ;	 * All that's left to do is decide if the fit wa
                    s exact or not. If the fit
  6225                        ;	 * was not exact, then split the memory block so
                     that we use only the requested
  6226                        ;	 * number of blocks and add what's left to the f
                    ree list.
  6227                        ;	 */
  6228                        ;
  6229                        ;	if (blockSize >= blocks)
  6230                        L10067:
  6231                        	.line	621
  6232                        ;	{
  6233 00:1C9A: A5 15        	lda	<L169+blockSize_1
  6234 00:1C9C: C5 11        	cmp	<L169+blocks_1
  6235 00:1C9E: A5 17        	lda	<L169+blockSize_1+2
  6236 00:1CA0: E5 13        	sbc	<L169+blocks_1+2
  6237 00:1CA2: B0 03        	bcs	L177
  6238 00:1CA4: 82 03 00     	brl	L10068
  6239                        L177:
  6240                        	.line	622
  6241                        ;		//DBGLOG_DEBUG( "realloc the same or sma
                    ller size block - %i, do nothing\n", blocks );
  6242                        ;		/* This space intentionally left blank *
                    /
  6243                        ;	}
  6244                        	.line	625
  6245                        ;	else if ((blockSize + nextBlockSize) >= blocks)
  6246 00:1CA7: 82 84 02     	brl	L10069
  6247                        L10068:
  6248                        	.line	626
  6249                        ;	{
  6250 00:1CAA: 18           	clc
  6251 00:1CAB: A5 15        	lda	<L169+blockSize_1
  6252 00:1CAD: 65 1D        	adc	<L169+nextBlockSize_1
  6253 00:1CAF: 85 01        	sta	<R0
  6254 00:1CB1: A5 17        	lda	<L169+blockSize_1+2
  6255 00:1CB3: 65 1F        	adc	<L169+nextBlockSize_1+2
  6256 00:1CB5: 85 03        	sta	<R0+2
  6257 00:1CB7: A5 01        	lda	<R0
  6258 00:1CB9: C5 11        	cmp	<L169+blocks_1
  Sat Jul 10 2021  1:15                                                Page 117


  6259 00:1CBB: A5 03        	lda	<R0+2
  6260 00:1CBD: E5 13        	sbc	<L169+blocks_1+2
  6261 00:1CBF: B0 03        	bcs	L178
  6262 00:1CC1: 82 18 00     	brl	L10070
  6263                        L178:
  6264                        	.line	627
  6265                        ;		//DBGLOG_DEBUG( "realloc using next bloc
                    k - %i\n", blocks );
  6266                        ;		umm_assimilate_up(c);
  6267                        	.line	629
  6268 00:1CC4: D4 23        	pei	<L169+c_1+2
  6269 00:1CC6: D4 21        	pei	<L169+c_1
  6270 00:1CC8: 22 xx xx xx  	jsl	~~umm_assimilate_up
  6271                        ;		blockSize += nextBlockSize;
  6272                        	.line	630
  6273 00:1CCC: 18           	clc
  6274 00:1CCD: A5 15        	lda	<L169+blockSize_1
  6275 00:1CCF: 65 1D        	adc	<L169+nextBlockSize_1
  6276 00:1CD1: 85 15        	sta	<L169+blockSize_1
  6277 00:1CD3: A5 17        	lda	<L169+blockSize_1+2
  6278 00:1CD5: 65 1F        	adc	<L169+nextBlockSize_1+2
  6279 00:1CD7: 85 17        	sta	<L169+blockSize_1+2
  6280                        ;	}
  6281                        	.line	631
  6282                        ;	else if ((prevBlockSize + blockSize) >= blocks)
  6283 00:1CD9: 82 52 02     	brl	L10071
  6284                        L10070:
  6285                        	.line	632
  6286                        ;	{
  6287 00:1CDC: 18           	clc
  6288 00:1CDD: A5 19        	lda	<L169+prevBlockSize_1
  6289 00:1CDF: 65 15        	adc	<L169+blockSize_1
  6290 00:1CE1: 85 01        	sta	<R0
  6291 00:1CE3: A5 1B        	lda	<L169+prevBlockSize_1+2
  6292 00:1CE5: 65 17        	adc	<L169+blockSize_1+2
  6293 00:1CE7: 85 03        	sta	<R0+2
  6294 00:1CE9: A5 01        	lda	<R0
  6295 00:1CEB: C5 11        	cmp	<L169+blocks_1
  6296 00:1CED: A5 03        	lda	<R0+2
  6297 00:1CEF: E5 13        	sbc	<L169+blocks_1+2
  6298 00:1CF1: B0 03        	bcs	L179
  6299 00:1CF3: 82 DF 00     	brl	L10072
  6300                        L179:
  6301                        	.line	633
  6302                        ;		//DBGLOG_DEBUG( "realloc using prev bloc
                    k - %i\n", blocks );
  6303                        ;		umm_disconnect_from_free_list(UMM_PBLOCK
                    (c));
  6304                        	.line	635
  6305 00:1CF6: A5 21        	lda	<L169+c_1
  6306 00:1CF8: 85 01        	sta	<R0
  6307 00:1CFA: A5 23        	lda	<L169+c_1+2
  6308 00:1CFC: 85 03        	sta	<R0+2
  6309 00:1CFE: 06 01        	asl	<R0
  6310 00:1D00: 26 03        	rol	<R0+2
  6311 00:1D02: 06 01        	asl	<R0
  6312 00:1D04: 26 03        	rol	<R0+2
  6313 00:1D06: 06 01        	asl	<R0
  Sat Jul 10 2021  1:15                                                Page 118


  6314 00:1D08: 26 03        	rol	<R0+2
  6315 00:1D0A: 06 01        	asl	<R0
  6316 00:1D0C: 26 03        	rol	<R0+2
  6317 00:1D0E: 18           	clc
  6318 00:1D0F: A9 04 00     	lda	#$4
  6319 00:1D12: 6D xx xx     	adc	|~~umm_heap
  6320 00:1D15: 85 05        	sta	<R1
  6321 00:1D17: A9 00 00     	lda	#$0
  6322 00:1D1A: 6D xx xx     	adc	|~~umm_heap+2
  6323 00:1D1D: 85 07        	sta	<R1+2
  6324 00:1D1F: 18           	clc
  6325 00:1D20: A5 05        	lda	<R1
  6326 00:1D22: 65 01        	adc	<R0
  6327 00:1D24: 85 09        	sta	<R2
  6328 00:1D26: A5 07        	lda	<R1+2
  6329 00:1D28: 65 03        	adc	<R0+2
  6330 00:1D2A: 85 0B        	sta	<R2+2
  6331 00:1D2C: A0 02 00     	ldy	#$2
  6332 00:1D2F: B7 09        	lda	[<R2],Y
  6333 00:1D31: 48           	pha
  6334 00:1D32: A7 09        	lda	[<R2]
  6335 00:1D34: 48           	pha
  6336 00:1D35: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  6337                        ;		c = umm_assimilate_down(c, 0);
  6338                        	.line	636
  6339 00:1D39: F4 00 00     	pea	#^$0
  6340 00:1D3C: F4 00 00     	pea	#<$0
  6341 00:1D3F: D4 23        	pei	<L169+c_1+2
  6342 00:1D41: D4 21        	pei	<L169+c_1
  6343 00:1D43: 22 xx xx xx  	jsl	~~umm_assimilate_down
  6344 00:1D47: 85 21        	sta	<L169+c_1
  6345 00:1D49: 86 23        	stx	<L169+c_1+2
  6346                        ;		memmove((void *) &UMM_DATA(c), ptr, curS
                    ize);
  6347                        	.line	637
  6348 00:1D4B: D4 25        	pei	<L169+curSize_1
  6349 00:1D4D: D4 30        	pei	<L168+ptr_0+2
  6350 00:1D4F: D4 2E        	pei	<L168+ptr_0
  6351 00:1D51: A5 21        	lda	<L169+c_1
  6352 00:1D53: 85 01        	sta	<R0
  6353 00:1D55: A5 23        	lda	<L169+c_1+2
  6354 00:1D57: 85 03        	sta	<R0+2
  6355 00:1D59: 06 01        	asl	<R0
  6356 00:1D5B: 26 03        	rol	<R0+2
  6357 00:1D5D: 06 01        	asl	<R0
  6358 00:1D5F: 26 03        	rol	<R0+2
  6359 00:1D61: 06 01        	asl	<R0
  6360 00:1D63: 26 03        	rol	<R0+2
  6361 00:1D65: 06 01        	asl	<R0
  6362 00:1D67: 26 03        	rol	<R0+2
  6363 00:1D69: 18           	clc
  6364 00:1D6A: A9 08 00     	lda	#$8
  6365 00:1D6D: 65 01        	adc	<R0
  6366 00:1D6F: 85 05        	sta	<R1
  6367 00:1D71: A9 00 00     	lda	#$0
  6368 00:1D74: 65 03        	adc	<R0+2
  6369 00:1D76: 85 07        	sta	<R1+2
  6370 00:1D78: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 119


  6371 00:1D79: AD xx xx     	lda	|~~umm_heap
  6372 00:1D7C: 65 05        	adc	<R1
  6373 00:1D7E: 85 01        	sta	<R0
  6374 00:1D80: AD xx xx     	lda	|~~umm_heap+2
  6375 00:1D83: 65 07        	adc	<R1+2
  6376 00:1D85: 85 03        	sta	<R0+2
  6377 00:1D87: D4 03        	pei	<R0+2
  6378 00:1D89: D4 01        	pei	<R0
  6379 00:1D8B: 22 xx xx xx  	jsl	~~memmove
  6380                        ;		ptr = (void *) &UMM_DATA(c);
  6381                        	.line	638
  6382 00:1D8F: A5 21        	lda	<L169+c_1
  6383 00:1D91: 85 01        	sta	<R0
  6384 00:1D93: A5 23        	lda	<L169+c_1+2
  6385 00:1D95: 85 03        	sta	<R0+2
  6386 00:1D97: 06 01        	asl	<R0
  6387 00:1D99: 26 03        	rol	<R0+2
  6388 00:1D9B: 06 01        	asl	<R0
  6389 00:1D9D: 26 03        	rol	<R0+2
  6390 00:1D9F: 06 01        	asl	<R0
  6391 00:1DA1: 26 03        	rol	<R0+2
  6392 00:1DA3: 06 01        	asl	<R0
  6393 00:1DA5: 26 03        	rol	<R0+2
  6394 00:1DA7: 18           	clc
  6395 00:1DA8: A9 08 00     	lda	#$8
  6396 00:1DAB: 65 01        	adc	<R0
  6397 00:1DAD: 85 05        	sta	<R1
  6398 00:1DAF: A9 00 00     	lda	#$0
  6399 00:1DB2: 65 03        	adc	<R0+2
  6400 00:1DB4: 85 07        	sta	<R1+2
  6401 00:1DB6: 18           	clc
  6402 00:1DB7: AD xx xx     	lda	|~~umm_heap
  6403 00:1DBA: 65 05        	adc	<R1
  6404 00:1DBC: 85 2E        	sta	<L168+ptr_0
  6405 00:1DBE: AD xx xx     	lda	|~~umm_heap+2
  6406 00:1DC1: 65 07        	adc	<R1+2
  6407 00:1DC3: 85 30        	sta	<L168+ptr_0+2
  6408                        ;		blockSize += prevBlockSize;
  6409                        	.line	639
  6410 00:1DC5: 18           	clc
  6411 00:1DC6: A5 15        	lda	<L169+blockSize_1
  6412 00:1DC8: 65 19        	adc	<L169+prevBlockSize_1
  6413 00:1DCA: 85 15        	sta	<L169+blockSize_1
  6414 00:1DCC: A5 17        	lda	<L169+blockSize_1+2
  6415 00:1DCE: 65 1B        	adc	<L169+prevBlockSize_1+2
  6416 00:1DD0: 85 17        	sta	<L169+blockSize_1+2
  6417                        ;	}
  6418                        	.line	640
  6419                        ;	else if ((prevBlockSize + blockSize + nextBlockS
                    ize) >= blocks)
  6420 00:1DD2: 82 59 01     	brl	L10073
  6421                        L10072:
  6422                        	.line	641
  6423                        ;	{
  6424 00:1DD5: 18           	clc
  6425 00:1DD6: A5 19        	lda	<L169+prevBlockSize_1
  6426 00:1DD8: 65 15        	adc	<L169+blockSize_1
  6427 00:1DDA: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 120


  6428 00:1DDC: A5 1B        	lda	<L169+prevBlockSize_1+2
  6429 00:1DDE: 65 17        	adc	<L169+blockSize_1+2
  6430 00:1DE0: 85 03        	sta	<R0+2
  6431 00:1DE2: 18           	clc
  6432 00:1DE3: A5 01        	lda	<R0
  6433 00:1DE5: 65 1D        	adc	<L169+nextBlockSize_1
  6434 00:1DE7: 85 05        	sta	<R1
  6435 00:1DE9: A5 03        	lda	<R0+2
  6436 00:1DEB: 65 1F        	adc	<L169+nextBlockSize_1+2
  6437 00:1DED: 85 07        	sta	<R1+2
  6438 00:1DEF: A5 05        	lda	<R1
  6439 00:1DF1: C5 11        	cmp	<L169+blocks_1
  6440 00:1DF3: A5 07        	lda	<R1+2
  6441 00:1DF5: E5 13        	sbc	<L169+blocks_1+2
  6442 00:1DF7: B0 03        	bcs	L180
  6443 00:1DF9: 82 F4 00     	brl	L10074
  6444                        L180:
  6445                        	.line	642
  6446                        ;		//DBGLOG_DEBUG( "realloc using prev and 
                    next block - %i\n", blocks );
  6447                        ;		umm_assimilate_up(c);
  6448                        	.line	644
  6449 00:1DFC: D4 23        	pei	<L169+c_1+2
  6450 00:1DFE: D4 21        	pei	<L169+c_1
  6451 00:1E00: 22 xx xx xx  	jsl	~~umm_assimilate_up
  6452                        ;		umm_disconnect_from_free_list(UMM_PBLOCK
                    (c));
  6453                        	.line	645
  6454 00:1E04: A5 21        	lda	<L169+c_1
  6455 00:1E06: 85 01        	sta	<R0
  6456 00:1E08: A5 23        	lda	<L169+c_1+2
  6457 00:1E0A: 85 03        	sta	<R0+2
  6458 00:1E0C: 06 01        	asl	<R0
  6459 00:1E0E: 26 03        	rol	<R0+2
  6460 00:1E10: 06 01        	asl	<R0
  6461 00:1E12: 26 03        	rol	<R0+2
  6462 00:1E14: 06 01        	asl	<R0
  6463 00:1E16: 26 03        	rol	<R0+2
  6464 00:1E18: 06 01        	asl	<R0
  6465 00:1E1A: 26 03        	rol	<R0+2
  6466 00:1E1C: 18           	clc
  6467 00:1E1D: A9 04 00     	lda	#$4
  6468 00:1E20: 6D xx xx     	adc	|~~umm_heap
  6469 00:1E23: 85 05        	sta	<R1
  6470 00:1E25: A9 00 00     	lda	#$0
  6471 00:1E28: 6D xx xx     	adc	|~~umm_heap+2
  6472 00:1E2B: 85 07        	sta	<R1+2
  6473 00:1E2D: 18           	clc
  6474 00:1E2E: A5 05        	lda	<R1
  6475 00:1E30: 65 01        	adc	<R0
  6476 00:1E32: 85 09        	sta	<R2
  6477 00:1E34: A5 07        	lda	<R1+2
  6478 00:1E36: 65 03        	adc	<R0+2
  6479 00:1E38: 85 0B        	sta	<R2+2
  6480 00:1E3A: A0 02 00     	ldy	#$2
  6481 00:1E3D: B7 09        	lda	[<R2],Y
  6482 00:1E3F: 48           	pha
  6483 00:1E40: A7 09        	lda	[<R2]
  Sat Jul 10 2021  1:15                                                Page 121


  6484 00:1E42: 48           	pha
  6485 00:1E43: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  6486                        ;		c = umm_assimilate_down(c, 0);
  6487                        	.line	646
  6488 00:1E47: F4 00 00     	pea	#^$0
  6489 00:1E4A: F4 00 00     	pea	#<$0
  6490 00:1E4D: D4 23        	pei	<L169+c_1+2
  6491 00:1E4F: D4 21        	pei	<L169+c_1
  6492 00:1E51: 22 xx xx xx  	jsl	~~umm_assimilate_down
  6493 00:1E55: 85 21        	sta	<L169+c_1
  6494 00:1E57: 86 23        	stx	<L169+c_1+2
  6495                        ;		memmove((void *) &UMM_DATA(c), ptr, curS
                    ize);
  6496                        	.line	647
  6497 00:1E59: D4 25        	pei	<L169+curSize_1
  6498 00:1E5B: D4 30        	pei	<L168+ptr_0+2
  6499 00:1E5D: D4 2E        	pei	<L168+ptr_0
  6500 00:1E5F: A5 21        	lda	<L169+c_1
  6501 00:1E61: 85 01        	sta	<R0
  6502 00:1E63: A5 23        	lda	<L169+c_1+2
  6503 00:1E65: 85 03        	sta	<R0+2
  6504 00:1E67: 06 01        	asl	<R0
  6505 00:1E69: 26 03        	rol	<R0+2
  6506 00:1E6B: 06 01        	asl	<R0
  6507 00:1E6D: 26 03        	rol	<R0+2
  6508 00:1E6F: 06 01        	asl	<R0
  6509 00:1E71: 26 03        	rol	<R0+2
  6510 00:1E73: 06 01        	asl	<R0
  6511 00:1E75: 26 03        	rol	<R0+2
  6512 00:1E77: 18           	clc
  6513 00:1E78: A9 08 00     	lda	#$8
  6514 00:1E7B: 65 01        	adc	<R0
  6515 00:1E7D: 85 05        	sta	<R1
  6516 00:1E7F: A9 00 00     	lda	#$0
  6517 00:1E82: 65 03        	adc	<R0+2
  6518 00:1E84: 85 07        	sta	<R1+2
  6519 00:1E86: 18           	clc
  6520 00:1E87: AD xx xx     	lda	|~~umm_heap
  6521 00:1E8A: 65 05        	adc	<R1
  6522 00:1E8C: 85 01        	sta	<R0
  6523 00:1E8E: AD xx xx     	lda	|~~umm_heap+2
  6524 00:1E91: 65 07        	adc	<R1+2
  6525 00:1E93: 85 03        	sta	<R0+2
  6526 00:1E95: D4 03        	pei	<R0+2
  6527 00:1E97: D4 01        	pei	<R0
  6528 00:1E99: 22 xx xx xx  	jsl	~~memmove
  6529                        ;		ptr = (void *) &UMM_DATA(c);
  6530                        	.line	648
  6531 00:1E9D: A5 21        	lda	<L169+c_1
  6532 00:1E9F: 85 01        	sta	<R0
  6533 00:1EA1: A5 23        	lda	<L169+c_1+2
  6534 00:1EA3: 85 03        	sta	<R0+2
  6535 00:1EA5: 06 01        	asl	<R0
  6536 00:1EA7: 26 03        	rol	<R0+2
  6537 00:1EA9: 06 01        	asl	<R0
  6538 00:1EAB: 26 03        	rol	<R0+2
  6539 00:1EAD: 06 01        	asl	<R0
  6540 00:1EAF: 26 03        	rol	<R0+2
  Sat Jul 10 2021  1:15                                                Page 122


  6541 00:1EB1: 06 01        	asl	<R0
  6542 00:1EB3: 26 03        	rol	<R0+2
  6543 00:1EB5: 18           	clc
  6544 00:1EB6: A9 08 00     	lda	#$8
  6545 00:1EB9: 65 01        	adc	<R0
  6546 00:1EBB: 85 05        	sta	<R1
  6547 00:1EBD: A9 00 00     	lda	#$0
  6548 00:1EC0: 65 03        	adc	<R0+2
  6549 00:1EC2: 85 07        	sta	<R1+2
  6550 00:1EC4: 18           	clc
  6551 00:1EC5: AD xx xx     	lda	|~~umm_heap
  6552 00:1EC8: 65 05        	adc	<R1
  6553 00:1ECA: 85 2E        	sta	<L168+ptr_0
  6554 00:1ECC: AD xx xx     	lda	|~~umm_heap+2
  6555 00:1ECF: 65 07        	adc	<R1+2
  6556 00:1ED1: 85 30        	sta	<L168+ptr_0+2
  6557                        ;		blockSize += (prevBlockSize + nextBlockS
                    ize);
  6558                        	.line	649
  6559 00:1ED3: 18           	clc
  6560 00:1ED4: A5 15        	lda	<L169+blockSize_1
  6561 00:1ED6: 65 1D        	adc	<L169+nextBlockSize_1
  6562 00:1ED8: 85 01        	sta	<R0
  6563 00:1EDA: A5 17        	lda	<L169+blockSize_1+2
  6564 00:1EDC: 65 1F        	adc	<L169+nextBlockSize_1+2
  6565 00:1EDE: 85 03        	sta	<R0+2
  6566 00:1EE0: 18           	clc
  6567 00:1EE1: A5 01        	lda	<R0
  6568 00:1EE3: 65 19        	adc	<L169+prevBlockSize_1
  6569 00:1EE5: 85 15        	sta	<L169+blockSize_1
  6570 00:1EE7: A5 03        	lda	<R0+2
  6571 00:1EE9: 65 1B        	adc	<L169+prevBlockSize_1+2
  6572 00:1EEB: 85 17        	sta	<L169+blockSize_1+2
  6573                        ;	}
  6574                        	.line	650
  6575                        ;	else
  6576 00:1EED: 82 3E 00     	brl	L10075
  6577                        L10074:
  6578                        ;	{
  6579                        	.line	652
  6580                        ;		//DBGLOG_DEBUG( "realloc a completely ne
                    w block %i\n", blocks );
  6581                        ;		void *oldptr = ptr;
  6582                        ;		if ((ptr = umm_malloc_core(size)))
  6583                        	.block	655
  6584             00000016   oldptr_2	set	22
  6585                        	.sym	oldptr,22,129,1,32
  6586 00:1EF0: A5 2E        	lda	<L168+ptr_0
  6587 00:1EF2: 85 27        	sta	<L169+oldptr_2
  6588 00:1EF4: A5 30        	lda	<L168+ptr_0+2
  6589 00:1EF6: 85 29        	sta	<L169+oldptr_2+2
  6590                        	.line	655
  6591                        ;		{
  6592 00:1EF8: D4 34        	pei	<L168+size_0+2
  6593 00:1EFA: D4 32        	pei	<L168+size_0
  6594 00:1EFC: 22 xx xx xx  	jsl	~~umm_malloc_core
  6595 00:1F00: 85 2E        	sta	<L168+ptr_0
  6596 00:1F02: 86 30        	stx	<L168+ptr_0+2
  Sat Jul 10 2021  1:15                                                Page 123


  6597 00:1F04: A5 2E        	lda	<L168+ptr_0
  6598 00:1F06: 05 30        	ora	<L168+ptr_0+2
  6599 00:1F08: D0 03        	bne	L182
  6600 00:1F0A: 82 19 00     	brl	L10076
  6601                        L182:
  6602                        	.line	656
  6603                        ;			//DBGLOG_DEBUG( "realloc %i to a
                     bigger block %i, copy, and free the old\n", blockSize, bloc
                    ks );
  6604                        ;			memcpy(ptr, oldptr, curSize);
  6605                        	.line	658
  6606 00:1F0D: D4 25        	pei	<L169+curSize_1
  6607 00:1F0F: D4 29        	pei	<L169+oldptr_2+2
  6608 00:1F11: D4 27        	pei	<L169+oldptr_2
  6609 00:1F13: D4 30        	pei	<L168+ptr_0+2
  6610 00:1F15: D4 2E        	pei	<L168+ptr_0
  6611 00:1F17: 22 xx xx xx  	jsl	~~memcpy
  6612                        ;			umm_free_core(oldptr);
  6613                        	.line	659
  6614 00:1F1B: D4 29        	pei	<L169+oldptr_2+2
  6615 00:1F1D: D4 27        	pei	<L169+oldptr_2
  6616 00:1F1F: 22 xx xx xx  	jsl	~~umm_free_core
  6617                        ;		}
  6618                        	.line	660
  6619                        ;		else
  6620 00:1F23: 82 00 00     	brl	L10077
  6621                        L10076:
  6622                        ;		{
  6623                        	.line	662
  6624                        ;			//DBGLOG_DEBUG( "realloc %i to a
                     bigger block %i failed - return NULL and leave the old bloc
                    k!\n", blockSize, blocks );
  6625                        ;			/* This space intentionally left
                     blnk */
  6626                        ;		}
  6627                        	.line	665
  6628                        L10077:
  6629                        ;		blockSize = blocks;
  6630                        	.line	666
  6631 00:1F26: A5 11        	lda	<L169+blocks_1
  6632 00:1F28: 85 15        	sta	<L169+blockSize_1
  6633 00:1F2A: A5 13        	lda	<L169+blocks_1+2
  6634 00:1F2C: 85 17        	sta	<L169+blockSize_1+2
  6635                        ;	}
  6636                        	.endblock	667
  6637                        	.line	667
  6638                        L10075:
  6639                        L10073:
  6640                        L10071:
  6641                        L10069:
  6642                        ;
  6643                        ;	/* Now all we need to do is figure out if the bl
                    ock fit exactly or if we
  6644                        ;	 * need to split and free ...
  6645                        ;	 */
  6646                        ;
  6647                        ;	if (blockSize > blocks)
  6648                        	.line	673
  Sat Jul 10 2021  1:15                                                Page 124


  6649                        ;	{
  6650 00:1F2E: A5 11        	lda	<L169+blocks_1
  6651 00:1F30: C5 15        	cmp	<L169+blockSize_1
  6652 00:1F32: A5 13        	lda	<L169+blocks_1+2
  6653 00:1F34: E5 17        	sbc	<L169+blockSize_1+2
  6654 00:1F36: 90 03        	bcc	L183
  6655 00:1F38: 82 54 00     	brl	L10078
  6656                        L183:
  6657                        	.line	674
  6658                        ;		//DBGLOG_DEBUG( "split and free %i block
                    s from %i\n", blocks, blockSize );
  6659                        ;		umm_split_block(c, blocks, 0);
  6660                        	.line	676
  6661 00:1F3B: F4 00 00     	pea	#^$0
  6662 00:1F3E: F4 00 00     	pea	#<$0
  6663 00:1F41: D4 13        	pei	<L169+blocks_1+2
  6664 00:1F43: D4 11        	pei	<L169+blocks_1
  6665 00:1F45: D4 23        	pei	<L169+c_1+2
  6666 00:1F47: D4 21        	pei	<L169+c_1
  6667 00:1F49: 22 xx xx xx  	jsl	~~umm_split_block
  6668                        ;		umm_free_core((void *) &UMM_DATA(c + blo
                    cks));
  6669                        	.line	677
  6670 00:1F4D: 18           	clc
  6671 00:1F4E: A5 21        	lda	<L169+c_1
  6672 00:1F50: 65 11        	adc	<L169+blocks_1
  6673 00:1F52: 85 05        	sta	<R1
  6674 00:1F54: A5 23        	lda	<L169+c_1+2
  6675 00:1F56: 65 13        	adc	<L169+blocks_1+2
  6676 00:1F58: 85 07        	sta	<R1+2
  6677 00:1F5A: D4 07        	pei	<R1+2
  6678 00:1F5C: D4 05        	pei	<R1
  6679 00:1F5E: A9 04 00     	lda	#$4
  6680                        	xref	~~~lasl
  6681 00:1F61: 22 xx xx xx  	jsl	~~~lasl
  6682 00:1F65: 85 01        	sta	<R0
  6683 00:1F67: 86 03        	stx	<R0+2
  6684 00:1F69: 18           	clc
  6685 00:1F6A: A9 08 00     	lda	#$8
  6686 00:1F6D: 65 01        	adc	<R0
  6687 00:1F6F: 85 09        	sta	<R2
  6688 00:1F71: A9 00 00     	lda	#$0
  6689 00:1F74: 65 03        	adc	<R0+2
  6690 00:1F76: 85 0B        	sta	<R2+2
  6691 00:1F78: 18           	clc
  6692 00:1F79: AD xx xx     	lda	|~~umm_heap
  6693 00:1F7C: 65 09        	adc	<R2
  6694 00:1F7E: 85 01        	sta	<R0
  6695 00:1F80: AD xx xx     	lda	|~~umm_heap+2
  6696 00:1F83: 65 0B        	adc	<R2+2
  6697 00:1F85: 85 03        	sta	<R0+2
  6698 00:1F87: D4 03        	pei	<R0+2
  6699 00:1F89: D4 01        	pei	<R0
  6700 00:1F8B: 22 xx xx xx  	jsl	~~umm_free_core
  6701                        ;	}
  6702                        	.line	678
  6703                        ;
  6704                        ;	/* Release the critical section... */
  Sat Jul 10 2021  1:15                                                Page 125


  6705                        ;	UMM_CRITICAL_EXIT();
  6706                        L10078:
  6707                        	.line	681
  6708                        ;
  6709                        ;	return (ptr);
  6710                        	.line	683
  6711 00:1F8F: A6 30        	ldx	<L168+ptr_0+2
  6712 00:1F91: A5 2E        	lda	<L168+ptr_0
  6713 00:1F93: 82 C3 FA     	brl	L173
  6714                        ;}
  6715                        	.line	684
  6716                        	.endblock	684
  6717             0000002A   L168	equ	42
  6718             00000011   L169	equ	17
  6719                        	ends
  6720                        	efunc
  6721                        	.endfunc	684,17,42
  6722                        	.line	684
  6723                        ;
  6724                        ;/* ----------------------------------------------
                    -------------------------- */
  6725                        ;
  6726                        ;void FAR *umm_calloc(unsigned long num, unsigned 
                    long item_size)
  6727                        ;{
  6728                        	.line	688
  6729                        	.line	689
  6730                        	code
  6731                        	xdef	~~umm_calloc
  6732                        	func
  6733                        	.function	689
  6734                        ~~umm_calloc:
  6735                        	longa	on
  6736                        	longi	on
  6737 00:1F96: 3B           	tsc
  6738 00:1F97: 38           	sec
  6739 00:1F98: E9 08 00     	sbc	#L184
  6740 00:1F9B: 1B           	tcs
  6741 00:1F9C: 0B           	phd
  6742 00:1F9D: 5B           	tcd
  6743             00000004   num_0	set	4
  6744             00000008   item_size_0	set	8
  6745                        	.block	689
  6746                        ;	void FAR *ret;
  6747                        ;
  6748                        ;	ret = umm_malloc((size_t) (item_size * num));
  6749             00000000   ret_1	set	0
  6750                        	.sym	ret,0,129,1,32
  6751                        	.sym	num,4,18,6,32
  6752                        	.sym	item_size,8,18,6,32
  6753                        	.line	692
  6754 00:1F9E: D4 0E        	pei	<L184+num_0+2
  6755 00:1FA0: D4 0C        	pei	<L184+num_0
  6756 00:1FA2: D4 12        	pei	<L184+item_size_0+2
  6757 00:1FA4: D4 10        	pei	<L184+item_size_0
  6758                        	xref	~~~lmul
  6759 00:1FA6: 22 xx xx xx  	jsl	~~~lmul
  6760 00:1FAA: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 126


  6761 00:1FAC: 86 03        	stx	<R0+2
  6762 00:1FAE: A5 01        	lda	<R0
  6763 00:1FB0: 85 01        	sta	<R0
  6764 00:1FB2: 64 03        	stz	<R0+2
  6765 00:1FB4: D4 03        	pei	<R0+2
  6766 00:1FB6: D4 01        	pei	<R0
  6767 00:1FB8: 22 xx xx xx  	jsl	~~umm_malloc
  6768 00:1FBC: 85 05        	sta	<L185+ret_1
  6769 00:1FBE: 86 07        	stx	<L185+ret_1+2
  6770                        ;
  6771                        ;	if (ret)
  6772                        	.line	694
  6773                        ;		memset(ret, 0x00, (size_t) (item_size * 
                    num));
  6774 00:1FC0: A5 05        	lda	<L185+ret_1
  6775 00:1FC2: 05 07        	ora	<L185+ret_1+2
  6776 00:1FC4: D0 03        	bne	L187
  6777 00:1FC6: 82 1D 00     	brl	L10079
  6778                        L187:
  6779                        	.line	695
  6780 00:1FC9: D4 0E        	pei	<L184+num_0+2
  6781 00:1FCB: D4 0C        	pei	<L184+num_0
  6782 00:1FCD: D4 12        	pei	<L184+item_size_0+2
  6783 00:1FCF: D4 10        	pei	<L184+item_size_0
  6784                        	xref	~~~lmul
  6785 00:1FD1: 22 xx xx xx  	jsl	~~~lmul
  6786 00:1FD5: 85 01        	sta	<R0
  6787 00:1FD7: 86 03        	stx	<R0+2
  6788 00:1FD9: D4 01        	pei	<R0
  6789 00:1FDB: F4 00 00     	pea	#<$0
  6790 00:1FDE: D4 07        	pei	<L185+ret_1+2
  6791 00:1FE0: D4 05        	pei	<L185+ret_1
  6792 00:1FE2: 22 xx xx xx  	jsl	~~memset
  6793                        ;
  6794                        ;	return ret;
  6795                        L10079:
  6796                        	.line	697
  6797 00:1FE6: A6 07        	ldx	<L185+ret_1+2
  6798 00:1FE8: A5 05        	lda	<L185+ret_1
  6799                        L188:
  6800 00:1FEA: A8           	tay
  6801 00:1FEB: A5 0A        	lda	<L184+2
  6802 00:1FED: 85 12        	sta	<L184+2+8
  6803 00:1FEF: A5 09        	lda	<L184+1
  6804 00:1FF1: 85 11        	sta	<L184+1+8
  6805 00:1FF3: 2B           	pld
  6806 00:1FF4: 3B           	tsc
  6807 00:1FF5: 18           	clc
  6808 00:1FF6: 69 10 00     	adc	#L184+8
  6809 00:1FF9: 1B           	tcs
  6810 00:1FFA: 98           	tya
  6811 00:1FFB: 6B           	rtl
  6812                        ;}
  6813                        	.line	698
  6814                        	.endblock	698
  6815             00000008   L184	equ	8
  6816             00000005   L185	equ	5
  6817                        	ends
  Sat Jul 10 2021  1:15                                                Page 127


  6818                        	efunc
  6819                        	.endfunc	698,5,8
  6820                        	.line	698
  6821                        ;
  6822                        ;/* ----------------------------------------------
                    -------------------------- */
  6823                        ;
  6824                        	.line	700
  6825                        	xref	~~k_debug_long
  6826                        	xref	~~k_debug_pointer
  6827                        	xref	~~k_debug_string
  6828                        	xref	~~memset
  6829                        	xref	~~memmove
  6830                        	xref	~~memcpy
  6831                        	udata
  6832                        	xdef	~~ummHeapInfo
  6833                        ~~ummHeapInfo
  6834 00:0000:              	ds	32
  6835 00:0020:              	ends
  6836                        	.sym	~~umm_malloc_core,~~umm_malloc_core,1089
                    ,3,32
  6837                        	.sym	~~umm_free_core,~~umm_free_core,65,3,0
  6838                        	.sym	~~umm_assimilate_down,~~umm_assimilate_d
                    own,82,3,0
  6839                        	.sym	~~umm_assimilate_up,~~umm_assimilate_up,
                    65,3,0
  6840                        	.sym	~~umm_disconnect_from_free_list,~~umm_di
                    sconnect_from_free_list,65,3,0
  6841                        	.sym	~~umm_split_block,~~umm_split_block,65,3
                    ,0
  6842                        	.sym	~~umm_blocks,~~umm_blocks,82,3,0
  6843                        	.sym	~~get_unpoisoned,~~get_unpoisoned,1089,3
                    ,32
  6844                        	.sym	~~get_poisoned,~~get_poisoned,1089,3,32
  6845                        	.sym	~~check_poison_block,~~check_poison_bloc
                    k,69,3,0
  6846                        	.sym	~~check_poison,~~check_poison,69,3,0
  6847                        	.sym	~~put_poison,~~put_poison,65,3,0
  6848                        	.sym	~~dump_mem,~~dump_mem,65,3,0
  6849                        	.sym	~~poison_size,~~poison_size,80,3,0
  6850                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  6851                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  6852                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  6853                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  6854                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  6855                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
  6856                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,89
  6857                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,89
  6858                        	.sym	GETDRIVERDEF,0,8842,14,32,88
  6859                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,88
  6860                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,88
  6861                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
  6862                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
  6863                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  6864                        	.sym	PSEGMENTHEADER,0,138,14,32,87
  6865                        	.sym	SEGMENTHEADER,0,10,14,160,87
  Sat Jul 10 2021  1:15                                                Page 128


  6866                        	.sym	PDEBUGBYTEBITS,0,138,14,32,86
  6867                        	.sym	DEBUGBYTEBITS,0,10,14,8,86
  6868                        	.sym	PFXENVIRONMENT,0,138,14,32,85
  6869                        	.sym	FXENVIRONMENT,0,10,14,96,85
  6870                        	.sym	PFXZEROPAGE,0,138,14,32,84
  6871                        	.sym	FXZEROPAGE,0,10,14,824,84
  6872                        	.sym	KERNELTRAPCALL,0,641,14,32
  6873                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,83
  6874                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,83
  6875                        	.sym	FRESULT,0,5,14,16
  6876                        	.sym	MKFS_PARM,0,10,14,80,82
  6877                        	.sym	FILINFO,0,10,14,2224,81
  6878                        	.sym	DIR,0,10,14,416,80
  6879                        	.sym	FIL,0,10,14,4400,79
  6880                        	.sym	FFOBJID,0,10,14,128,78
  6881                        	.sym	FATFS,0,10,14,4504,77
  6882                        	.sym	LBA_t,0,18,14,32
  6883                        	.sym	FSIZE_t,0,18,14,32
  6884                        	.sym	TCHAR,0,14,14,8
  6885                        	.sym	PCOMMANDARGS,0,138,14,32,76
  6886                        	.sym	COMMANDARGS,0,10,14,64,76
  6887                        	.sym	PTOKENIZESTATE,0,133,14,32
  6888                        	.sym	TOKENIZESTATE,0,5,14,16
  6889                        	.sym	PTOKEN,0,138,14,32,75
  6890                        	.sym	TOKEN,0,10,14,64,75
  6891                        	.sym	PTOKENTYPE,0,133,14,32
  6892                        	.sym	TOKENTYPE,0,5,14,16
  6893                        	.sym	FXCommandHandler,0,656,14,32
  6894                        	.sym	PCONSOLECTX,0,138,14,32,74
  6895                        	.sym	CONSOLECTX,0,10,14,1144,74
  6896                        	.sym	PSPINNERCTX,0,138,14,32,73
  6897                        	.sym	SPINNERCTX,0,10,14,48,73
  6898                        	.sym	HCLIP,0,138,14,32,72
  6899                        	.sym	PCLIPBOARD_DATA,0,138,14,32,72
  6900                        	.sym	CLIPBOARD_DATA,0,10,14,168,72
  6901                        	.sym	PEVENTMANAGER,0,138,14,32,71
  6902                        	.sym	EVENTMANAGER,0,10,14,192,71
  6903                        	.sym	EV_RUN,0,656,14,32
  6904                        	.sym	EV_QUERY_METRIC,0,656,14,32
  6905                        	.sym	EV_CONFIGURE,0,656,14,32
  6906                        	.sym	EV_UNINIT,0,641,14,32
  6907                        	.sym	EV_INIT,0,8833,14,32
  6908                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,70
  6909                        	.sym	MOUSE_MSG_STATE,0,10,14,184,70
  6910                        	.sym	PFXEVENTPROCESS,0,138,14,32,69
  6911                        	.sym	FXEVENTPROCESS,0,10,14,64,69
  6912                        	.sym	PMARSHALDATA,0,139,14,32,68
  6913                        	.sym	MARSHALDATA,0,11,14,32,68
  6914                        	.sym	FXIDLEPROCESS,0,641,14,32
  6915                        	.sym	FXEventProc,0,641,14,32
  6916                        	.sym	PMOUSEMSGDATA,0,138,14,32,67
  6917                        	.sym	MOUSEMSGDATA,0,10,14,64,67
  6918                        	.sym	MSGIRQ,0,5,14,16
  6919                        	.sym	MAINLOOPARGS,0,10,14,16,66
  6920                        	.sym	PEACHCHILD_MSG,0,138,14,32,65
  6921                        	.sym	EACHCHILD_MSG,0,10,14,64,65
  6922                        	.sym	PMSGBOX_DATA,0,138,14,32,64
  6923                        	.sym	MSGBOX_DATA,0,10,14,96,64
  Sat Jul 10 2021  1:15                                                Page 129


  6924                        	.sym	PDESKTOP_DATA,0,138,14,32,63
  6925                        	.sym	DESKTOP_DATA,0,10,14,64,63
  6926                        	.sym	PWINDOWMANAGER,0,138,14,32,62
  6927                        	.sym	WINDOWMANAGER,0,10,14,160,62
  6928                        	.sym	WM_DOPROCS,0,641,14,32
  6929                        	.sym	WM_QUERY_METRIC,0,656,14,32
  6930                        	.sym	WM_CONFIGURE,0,656,14,32
  6931                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  6932                        	.sym	WM_EVENTS,0,641,14,32
  6933                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,61
  6934                        	.sym	CUR_PALETTE_MAP,0,10,14,400,61
  6935                        	.sym	PCLICKDETECTED,0,138,14,32,60
  6936                        	.sym	CLICKDETECTED,0,10,14,64,60
  6937                        	.sym	OBJECTCLICKED,0,641,14,32
  6938                        	.sym	PIPCPORT,0,138,14,32,59
  6939                        	.sym	IPCPORT,0,10,14,144,59
  6940                        	.sym	MemoryCallback,0,641,14,32
  6941                        	.sym	PFXMEMORYMAP,0,138,14,32,58
  6942                        	.sym	FXMEMORYMAP,0,10,14,2072,58
  6943                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  6944                        	.sym	FOREACHNODE,0,641,14,32
  6945                        	.sym	PEXECUTIVE,0,138,14,32,57
  6946                        	.sym	EXECUTIVE,0,10,14,128,57
  6947                        	.sym	EX_QUERY_METRIC,0,656,14,32
  6948                        	.sym	EX_CONFIGURE,0,656,14,32
  6949                        	.sym	EX_UNINIT,0,641,14,32
  6950                        	.sym	EX_INIT,0,8833,14,32
  6951                        	.sym	PFXSTRING,0,138,14,32,56
  6952                        	.sym	FXSTRING,0,10,14,64,56
  6953                        	.sym	ldiv_t,0,10,14,64,54
  6954                        	.sym	div_t,0,10,14,32,53
  6955                        	.sym	wctype_t,0,16,14,16
  6956                        	.sym	wint_t,0,16,14,16
  6957                        	.sym	wchar_t,0,14,14,8
  6958                        	.sym	ptrdiff_t,0,7,14,32
  6959                        	.sym	~~umm_numblocks,~~umm_numblocks,18,2,32
  6960                        	.sym	~~umm_heap,~~umm_heap,138,2,32,52
  6961                        	.sym	umm_block,0,10,14,128,52
  6962                        	.sym	umm_ptr,0,10,14,64,49
  6963                        	.sym	~~umm_poison_check,~~umm_poison_check,69
                    ,2,0
  6964                        	.sym	~~umm_poison_free,~~umm_poison_free,65,2
                    ,0
  6965                        	.sym	~~umm_poison_realloc,~~umm_poison_reallo
                    c,1089,2,32
  6966                        	.sym	~~umm_poison_calloc,~~umm_poison_calloc,
                    1089,2,32
  6967                        	.sym	~~umm_poison_malloc,~~umm_poison_malloc,
                    1089,2,32
  6968                        	.sym	~~umm_integrity_check,~~umm_integrity_ch
                    eck,69,2,0
  6969                        	.sym	~~umm_free_heap_size,~~umm_free_heap_siz
                    e,80,2,0
  6970                        	.sym	~~umm_info,~~umm_info,1089,2,32
  6971                        	.sym	~~ummHeapInfo,~~ummHeapInfo,10,2,256,48
  6972                        	.sym	UMM_HEAP_INFO,0,10,14,256,48
  6973                        	.sym	~~umm_free,~~umm_free,65,2,0
  6974                        	.sym	~~umm_realloc,~~umm_realloc,1089,2,32
  Sat Jul 10 2021  1:15                                                Page 130


  6975                        	.sym	~~umm_calloc,~~umm_calloc,1089,2,32
  6976                        	.sym	~~umm_malloc,~~umm_malloc,1089,2,32
  6977                        	.sym	~~umm_init,~~umm_init,65,2,0
  6978                        	.sym	PFXRFHEADER_FONT,0,138,14,32,47
  6979                        	.sym	FXRFHEADER_FONT,0,10,14,144,47
  6980                        	.sym	PFXRFHEADER,0,138,14,32,46
  6981                        	.sym	FXRFHEADER,0,10,14,72,46
  6982                        	.sym	PFXCOMBUFFER,0,138,14,32,45
  6983                        	.sym	FXCOMBUFFER,0,10,14,2080,45
  6984                        	.sym	PSUBMENULIST,0,138,14,32,44
  6985                        	.sym	SUBMENULIST,0,10,14,40,44
  6986                        	.sym	HSUBMENU,0,7,14,32
  6987                        	.sym	PSUBMENU,0,138,14,32,43
  6988                        	.sym	SUBMENU,0,10,14,64,43
  6989                        	.sym	MenuAction,0,641,14,32
  6990                        	.sym	PMENUANCHOR,0,138,14,32,42
  6991                        	.sym	MENUANCHOR,0,10,14,272,42
  6992                        	.sym	PMSGBOX,0,138,14,32,41
  6993                        	.sym	MSGBOX,0,10,14,144,41
  6994                        	.sym	PTEXTBOX,0,138,14,32,40
  6995                        	.sym	TEXTBOX,0,10,14,144,40
  6996                        	.sym	PLISTBOX,0,138,14,32,39
  6997                        	.sym	LISTBOX,0,10,14,240,39
  6998                        	.sym	PSCROLLBAR,0,138,14,32,38
  6999                        	.sym	SCROLLBAR,0,10,14,240,38
  7000                        	.sym	PBUTTON,0,138,14,32,37
  7001                        	.sym	BUTTON,0,10,14,96,37
  7002                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,36
  7003                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,36
  7004                        	.sym	PMENUTAG,0,138,14,32,35
  7005                        	.sym	MENUTAG,0,10,14,160,35
  7006                        	.sym	PMENU,0,138,14,32,34
  7007                        	.sym	MENU,0,10,14,280,34
  7008                        	.sym	HMENURESOURCE,0,129,14,32
  7009                        	.sym	FONTMETRIC,0,10,14,32,33
  7010                        	.sym	TITLE,0,142,14,32
  7011                        	.sym	PHANDLE,0,1153,14,32
  7012                        	.sym	HANDLE,0,129,14,32
  7013                        	.sym	PWINDOWEX,0,138,14,32,32
  7014                        	.sym	WINDOWEX,0,10,14,3880,32
  7015                        	.sym	PWINDOW,0,138,14,32,31
  7016                        	.sym	WINDOW,0,10,14,3904,31
  7017                        	.sym	PDRAGDATA,0,138,14,32,30
  7018                        	.sym	DRAGDATA,0,10,14,216,30
  7019                        	.sym	PNCCLICKABLE,0,138,14,32,29
  7020                        	.sym	NCCLICKABLE,0,10,14,136,29
  7021                        	.sym	HCLICKABLE,0,7,14,32
  7022                        	.sym	PCLICKABLE,0,138,14,32,28
  7023                        	.sym	CLICKABLE,0,10,14,152,28
  7024                        	.sym	PWNDCLASS,0,138,14,32,27
  7025                        	.sym	WNDCLASS,0,10,14,272,27
  7026                        	.sym	HBRUSH,0,129,14,32
  7027                        	.sym	HCURSOR,0,129,14,32
  7028                        	.sym	HICON,0,129,14,32
  7029                        	.sym	HINSTANCE,0,129,14,32
  7030                        	.sym	FXWndProc,0,654,14,32
  7031                        	.sym	PDRECT,0,138,14,32,26
  7032                        	.sym	DRECT,0,10,14,112,26
  Sat Jul 10 2021  1:15                                                Page 131


  7033                        	.sym	PRECTP,0,138,14,32,25
  7034                        	.sym	RECTP,0,10,14,96,25
  7035                        	.sym	PRECT,0,138,14,32,24
  7036                        	.sym	RECT,0,10,14,112,24
  7037                        	.sym	PPOINT,0,138,14,32,23
  7038                        	.sym	POINT,0,10,14,32,23
  7039                        	.sym	PFXPROPERTY,0,138,14,32,21
  7040                        	.sym	FXPROPERTY,0,10,14,384,21
  7041                        	.sym	PKEYSTATE,0,138,14,32,20
  7042                        	.sym	KEYSTATE,0,10,14,112,20
  7043                        	.sym	SCANCODE,0,14,14,8
  7044                        	.sym	KEYCODE,0,16,14,16
  7045                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,19
  7046                        	.sym	FXPROCESSMESSAGE,0,10,14,112,19
  7047                        	.sym	PFXPROCESS,0,138,14,32,18
  7048                        	.sym	FXPROCESS,0,10,14,800,18
  7049                        	.sym	PDESKTOP_CONTROL,0,138,14,32,17
  7050                        	.sym	DESKTOP_CONTROL,0,10,14,392,17
  7051                        	.sym	PCONSOLE_CONTROL,0,138,14,32,16
  7052                        	.sym	CONSOLE_CONTROL,0,10,14,448,16
  7053                        	.sym	FXProcessProc,0,641,14,32
  7054                        	.sym	PFXCMDMESSAGE,0,138,14,32,15
  7055                        	.sym	FXCMDMESSAGE,0,10,14,304,15
  7056                        	.sym	PFXOSMESSAGE,0,138,14,32,14
  7057                        	.sym	FXOSMESSAGE,0,10,14,304,14
  7058                        	.sym	PINT_REGS,0,138,14,32,13
  7059                        	.sym	INT_REGS,0,10,14,104,13
  7060                        	.sym	TASK_STACK,0,10,14,32,12
  7061                        	.sym	TASK,0,10,14,48,11
  7062                        	.sym	PIRQDATA,0,138,14,32,10
  7063                        	.sym	IRQDATA,0,10,14,48,10
  7064                        	.sym	HMENU,0,129,14,32
  7065                        	.sym	HWND,0,129,14,32
  7066                        	.sym	MSGDATA,0,14,14,8
  7067                        	.sym	MSGDEST,0,18,14,32
  7068                        	.sym	MSGSRC,0,18,14,32
  7069                        	.sym	MSGTYPE,0,16,14,16
  7070                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,4
  7071                        	.sym	PROCESS_TLS_LIST,0,138,14,32,4
  7072                        	.sym	SEMAPHORE_LIST,0,138,14,32,4
  7073                        	.sym	FILE_BLOCK_LIST,0,138,14,32,4
  7074                        	.sym	FILE_PATH_LIST,0,138,14,32,4
  7075                        	.sym	PROCEDURE_LIST,0,138,14,32,4
  7076                        	.sym	FILE_HANDLE,0,138,14,32,9
  7077                        	.sym	FILE_BLOCK,0,10,14,552,9
  7078                        	.sym	SEMAPHORE,0,10,14,16,8
  7079                        	.sym	PPROCESS_SIGNAL,0,138,14,32,7
  7080                        	.sym	PROCESS_SIGNAL,0,10,14,16,7
  7081                        	.sym	KRESULT,0,18,14,32
  7082                        	.sym	PKERNEL_ERROR,0,138,14,32,6
  7083                        	.sym	KERNEL_ERROR,0,10,14,32,6
  7084                        	.sym	PROCESS_STATUS,0,16,14,16
  7085                        	.sym	FILE_PATH_NAME,0,142,14,32
  7086                        	.sym	PROCESS_RESOURCE,0,129,14,32
  7087                        	.sym	PROCESS_TLS,0,129,14,32
  7088                        	.sym	PROCESS_CTX,0,129,14,32
  7089                        	.sym	USERID,0,16,14,16
  7090                        	.sym	PROCESS_ID,0,18,14,32
  Sat Jul 10 2021  1:15                                                Page 132


  7091                        	.sym	PROCESS_BANK,0,14,14,8
  7092                        	.sym	PFXQUEUE,0,138,14,32,5
  7093                        	.sym	FXQUEUE,0,10,14,80,5
  7094                        	.sym	PFXNODELIST,0,138,14,32,4
  7095                        	.sym	FXNODELIST,0,10,14,96,4
  7096                        	.sym	NodeListDeallocator,0,641,14,32
  7097                        	.sym	PFXNODE,0,138,14,32,3
  7098                        	.sym	FXNODE,0,10,14,384,3
  7099                        	.sym	PBYTEBITS,0,138,14,32,2
  7100                        	.sym	BYTEBITS,0,10,14,8,2
  7101                        	.sym	HRESULT,0,18,14,32
  7102                        	.sym	LPWCHAR,0,144,14,32
  7103                        	.sym	WCHAR,0,16,14,16
  7104                        	.sym	HCOLOR,0,129,14,32
  7105                        	.sym	HFONT,0,129,14,32
  7106                        	.sym	HDC,0,129,14,32
  7107                        	.sym	HPOINTER,0,129,14,32
  7108                        	.sym	uint32_t,0,18,14,32
  7109                        	.sym	uint8_t,0,14,14,8
  7110                        	.sym	LPBOOL,0,142,14,32
  7111                        	.sym	BOOL,0,14,14,8
  7112                        	.sym	DWORD,0,18,14,32
  7113                        	.sym	ULONG,0,18,14,32
  7114                        	.sym	LPLONG,0,135,14,32
  7115                        	.sym	LONG,0,7,14,32
  7116                        	.sym	PUINT,0,144,14,32
  7117                        	.sym	USHORT,0,16,14,16
  7118                        	.sym	UINT,0,16,14,16
  7119                        	.sym	INT,0,5,14,16
  7120                        	.sym	WORD,0,5,14,16
  7121                        	.sym	PBYTE,0,142,14,32
  7122                        	.sym	BYTE,0,14,14,8
  7123                        	.sym	IOPORT,0,142,14,32
  7124                        	.sym	PUCHAR,0,142,14,32
  7125                        	.sym	UCHAR,0,14,14,8
  7126                        	.sym	LPWCSTR,0,142,14,32
  7127                        	.sym	LPCSTR,0,142,14,32
  7128                        	.sym	LPSTR,0,142,14,32
  7129                        	.sym	LPCHAR,0,142,14,32
  7130                        	.sym	CHAR,0,14,14,8
  7131                        	.sym	LPVOID,0,129,14,32
  7132                        	.sym	VOID,0,1,14,32
  7133                        	.sym	~~memset,~~memset,1089,18,32
  7134                        	.sym	~~memmove,~~memmove,1089,18,32
  7135                        	.sym	~~memcpy,~~memcpy,1089,18,32
  7136                        	.sym	Boolean_T,0,5,14,16
  7137                        	.sym	FILE,0,10,14,160,1
  7138                        	.sym	fpos_t,0,7,14,32
  7139                        	.sym	size_t,0,16,14,16
  7140                        	.sym	va_list,0,142,14,32
  7141                        	end


      Lines assembled: 7141
      Errors: 0
