  Thu Jul 29 2021 11:55                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\MINDRVR.C",0
     7                        ;//***********************************************
                    *********************
     8                        ;// MINIMUM ATA LOW LEVEL I/O DRIVER -- MINDRVR.C
     9                        ;//
    10                        ;// by Hale Landis (hlandis@ata-atapi.com)
    11                        ;//
    12                        ;// There is no copyright and there are no restric
                    tions on the use
    13                        ;// of this ATA Low Level I/O Driver code.  It is 
                    distributed to
    14                        ;// help other programmers understand how the ATA 
                    device interface
    15                        ;// works and it is distributed without any warran
                    ty.  Use this
    16                        ;// code at your own risk.
    17                        ;//
    18                        ;// Minimum ATA Driver (MINDRVR) is a subset of AT
                    ADRVR. MINDRVR
    19                        ;// has a single header file and a single C file. 
                    MINDRVR can
    20                        ;// be used as the starting point for an ATADRVR f
                    or an embedded
    21                        ;// system. NOTE all the places in the MINDRVR.H a
                    nd MINDRVR.C files
    22                        ;// where there is a comment containing the string
                     "!!!".
    23                        ;//
    24                        ;// Use the header file mindrvr.h in any C files t
                    hat call MINDRVR
    25                        ;// functions.
    26                        ;//
    27                        ;// This code is based on the ATA/ATAPI-4,-5 and -
                    6 standards and
    28                        ;// on interviews with various ATA controller and 
                    drive designers.
    29                        ;//
    30                        ;// Note that MINDRVR does not support ATA CHS add
                    ressing.
    31                        ;//
    32                        ;// Most of the MINDRVR code is standard C code an
                    d should compile
    33                        ;// using any C compiler. It has been tested using
                     Borland C/C++ 4.5.
    34                        ;//
    35                        ;// This C source file is the header file for the 
  Thu Jul 29 2021 11:55                                                Page 2


                    driver
    36                        ;// and is used in the MINDRVR.C files and must al
                    so be used
    37                        ;// by any program using the MINDRVR code/function
                    s.
    38                        ;//***********************************************
                    *********************
    39                        ;
    40                        ;#if defined(USE_FX256_FMX) || defined(USE_FX256_U
                    )
    41                        ;
    42                        ;#include "mindrvr.h"
    43                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\mindrvr.h",0
    44                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
    45                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    46                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    47                        	.line	88
    48                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    49                        	.stag	fake1_,32,1
    50                        	.member	quot,0,5,8,16
    51                        	.member	rem,16,5,8,16
    52                        	.eos
    53                        	.stag	fake2_,64,2
    54                        	.member	quot,0,7,8,32
    55                        	.member	rem,32,7,8,32
    56                        	.eos
    57                        	.stag	int_sqrt,32,3
    58                        	.member	sqrt,0,16,8,16
    59                        	.member	frac,16,16,8,16
    60                        	.eos
    61                        	.line	205
    62                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",4
    63                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    64                        	.line	134
    65                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",5
    66                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    67                        	.line	103
    68                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",6
    69                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
    70                        	.stag	_fx_bytebits,8,4
    71                        	.member	b7,0,14,17,1
    72                        	.member	b6,1,14,17,1
    73                        	.member	b5,2,14,17,1
    74                        	.member	b4,3,14,17,1
    75                        	.member	b3,4,14,17,1
    76                        	.member	b2,5,14,17,1
    77                        	.member	b1,6,14,17,1
  Thu Jul 29 2021 11:55                                                Page 3


    78                        	.member	b0,7,14,17,1
    79                        	.eos
    80                        	.stag	_fx_node,384,5
    81                        	.member	type,0,14,8,8
    82                        	.member	Reserved0,8,14,8,8
    83                        	.member	data,16,129,8,32
    84                        	.member	last,48,138,8,32,5
    85                        	.member	next,80,138,8,32,5
    86                        	.member	name,112,110,8,0,32
    87                        	.member	Reserved1,368,16,8,16
    88                        	.eos
    89                        	.stag	_fx_nodelist,96,6
    90                        	.member	listhead,0,138,8,32,5
    91                        	.member	listData,32,129,8,32
    92                        	.member	deallocator,64,641,8,32
    93                        	.eos
    94                        	.stag	_fx_queue,80,7
    95                        	.member	count,0,5,8,16
    96                        	.member	front,16,138,8,32,5
    97                        	.member	rear,48,138,8,32,5
    98                        	.eos
    99                        	.stag	fake8_,32,8
   100                        	.member	subsystem,0,14,8,8
   101                        	.member	level,8,14,8,8
   102                        	.member	error,16,16,8,16
   103                        	.eos
   104                        	.stag	_fx_process_signal,16,9
   105                        	.member	cbSize,0,16,8,16
   106                        	.eos
   107                        	.stag	_fx_semaphore,16,10
   108                        	.member	reserved,0,5,8,16
   109                        	.eos
   110                        	.stag	_fx_fileBlock,552,11
   111                        	.member	openCount,0,16,8,16
   112                        	.member	lockCount,16,16,8,16
   113                        	.member	dirty,32,14,8,8
   114                        	.member	fileBuffer,40,110,8,0,64
   115                        	.eos
   116                        	.stag	_fx_irq_data,48,12
   117                        	.member	line,0,5,8,16
   118                        	.member	keycode,16,142,8,32
   119                        	.eos
   120                        	.stag	_task,48,13
   121                        	.member	SPL,0,14,8,8
   122                        	.member	SPH,8,14,8,8
   123                        	.member	pstack,16,142,8,32
   124                        	.eos
   125                        	.stag	_task_stack,32,14
   126                        	.member	SS,0,142,8,32
   127                        	.eos
   128                        	.stag	int_regs,104,15
   129                        	.member	PB,0,14,8,8
   130                        	.member	PH,8,14,8,8
   131                        	.member	PL,16,14,8,8
   132                        	.member	PP,24,14,8,8
   133                        	.member	DB,32,14,8,8
   134                        	.member	DH,40,14,8,8
   135                        	.member	DL,48,14,8,8
  Thu Jul 29 2021 11:55                                                Page 4


   136                        	.member	AH,56,14,8,8
   137                        	.member	AL,64,14,8,8
   138                        	.member	XH,72,14,8,8
   139                        	.member	XL,80,14,8,8
   140                        	.member	YH,88,14,8,8
   141                        	.member	YL,96,14,8,8
   142                        	.eos
   143                        	.stag	_fx_eventMessage,312,16
   144                        	.member	src,0,18,8,32
   145                        	.member	dest,32,18,8,32
   146                        	.member	type,64,16,8,16
   147                        	.member	hwnd,80,129,8,32
   148                        	.member	pheap,112,129,8,32
   149                        	.member	msgTime,144,18,8,32
   150                        	.member	data,176,110,8,0,16
   151                        	.member	attr,304,14,8,8
   152                        	.eos
   153                        	.stag	_fx_cmdMessage,312,17
   154                        	.member	src,0,18,8,32
   155                        	.member	dest,32,18,8,32
   156                        	.member	type,64,16,8,16
   157                        	.member	hwnd,80,129,8,32
   158                        	.member	pheap,112,129,8,32
   159                        	.member	msgTime,144,18,8,32
   160                        	.member	cmdCId,176,16,8,16
   161                        	.member	cmdMId,192,16,8,16
   162                        	.member	parameter1,208,18,8,32
   163                        	.member	parameter2,240,18,8,32
   164                        	.member	parameter3,272,18,8,32
   165                        	.member	attr,304,14,8,8
   166                        	.eos
   167                        	.stag	_fx_console_ctl,448,18
   168                        	.member	maxCols,0,5,8,16
   169                        	.member	maxRows,16,5,8,16
   170                        	.member	curX,32,5,8,16
   171                        	.member	curY,48,5,8,16
   172                        	.member	fgColor,64,5,8,16
   173                        	.member	bgColor,80,5,8,16
   174                        	.member	mode,96,14,8,8
   175                        	.member	kbBuffer,104,101,8,0,16
   176                        	.member	screenBuffer,360,142,8,32
   177                        	.member	desktopMode,392,14,8,8
   178                        	.member	lastMouseButton,400,5,8,16
   179                        	.member	lastMouseX,416,5,8,16
   180                        	.member	lastMouseY,432,5,8,16
   181                        	.eos
   182                        	.stag	_fx_desktop_ctl,392,19
   183                        	.member	desktopMode,0,14,8,8
   184                        	.member	cursorCtl,8,5,8,16
   185                        	.member	cursorState,24,5,8,16
   186                        	.member	backgroundColor,40,5,8,16
   187                        	.member	foregroundColor,56,5,8,16
   188                        	.member	menuMode,72,5,8,16
   189                        	.member	lastMouseButton,88,5,8,16
   190                        	.member	lastMouseX,104,5,8,16
   191                        	.member	lastMouseY,120,5,8,16
   192                        	.member	currentDiskName,136,142,8,32
   193                        	.member	diskNodes,168,129,8,32
  Thu Jul 29 2021 11:55                                                Page 5


   194                        	.member	titleNodes,200,129,8,32
   195                        	.member	menuNodes,232,129,8,32
   196                        	.member	iconNodes,264,129,8,32
   197                        	.member	windowNodes,296,129,8,32
   198                        	.member	fontNodes,328,129,8,32
   199                        	.member	wndProc,360,138,8,32,6
   200                        	.eos
   201                        	.stag	_fx_process,800,20
   202                        	.member	cbSize,0,5,8,16
   203                        	.member	procId,16,18,8,32
   204                        	.member	parentId,48,18,8,32
   205                        	.member	ctx,80,129,8,32
   206                        	.member	userId,112,16,8,16
   207                        	.member	status,128,16,8,16
   208                        	.member	foregroundActive,144,14,8,8
   209                        	.member	tls,152,1121,8,32,8
   210                        	.member	commandLine,408,142,8,32
   211                        	.member	semaphores,440,138,8,32,6
   212                        	.member	fileHandles,472,138,8,32,6
   213                        	.member	pathList,504,138,8,32,6
   214                        	.member	resources,536,138,8,32,6
   215                        	.member	timerAware,568,14,8,8
   216                        	.member	timerTicks,576,112,8,0,2
   217                        	.member	timerTickCount,608,112,8,0,2
   218                        	.member	kernelError,640,10,8,32,8
   219                        	.member	consoleCtl,672,138,8,32,18
   220                        	.member	desktopCtl,704,138,8,32,19
   221                        	.member	execProc,736,641,8,32
   222                        	.member	startupArgs,768,129,8,32
   223                        	.eos
   224                        	.stag	_fxProcessMessage,112,21
   225                        	.member	src,0,18,8,32
   226                        	.member	dest,32,18,8,32
   227                        	.member	type,64,16,8,16
   228                        	.member	processInfo,80,138,8,32,20
   229                        	.eos
   230                        	.stag	_k_key_state,112,22
   231                        	.member	scanCode,0,14,8,8
   232                        	.member	isShifted,8,14,8,8
   233                        	.member	isAlt,16,14,8,8
   234                        	.member	isExtended,24,14,8,8
   235                        	.member	isCapsLock,32,14,8,8
   236                        	.member	isNumLock,40,14,8,8
   237                        	.member	isScrollLock,48,14,8,8
   238                        	.member	keyChar,56,16,8,16
   239                        	.member	scanTime,72,18,8,32
   240                        	.member	ledStatus,104,14,8,8
   241                        	.eos
   242                        	.stag	_fx_property,384,23
   243                        	.member	name,0,110,8,0,16
   244                        	.member	value,128,110,8,0,32
   245                        	.eos
   246                        	.utag	_24bitPointer,32,24
   247                        	.member	address,0,142,11,32
   248                        	.member	bytes,0,110,11,0,4
   249                        	.eos
   250                        	.stag	_PointStruct,32,25
   251                        	.member	x,0,5,8,16
  Thu Jul 29 2021 11:55                                                Page 6


   252                        	.member	y,16,5,8,16
   253                        	.eos
   254                        	.stag	_RectStruct,112,26
   255                        	.member	x,0,5,8,16
   256                        	.member	y,16,5,8,16
   257                        	.member	z,32,18,8,32
   258                        	.member	width,64,5,8,16
   259                        	.member	height,80,5,8,16
   260                        	.member	attr,96,5,8,16
   261                        	.eos
   262                        	.stag	fake27_,96,27
   263                        	.member	name,0,142,8,32
   264                        	.member	topLeft,32,10,8,32,25
   265                        	.member	bottomRight,64,10,8,32,25
   266                        	.eos
   267                        	.stag	fake28_,112,28
   268                        	.member	x,0,5,8,16
   269                        	.member	y,16,5,8,16
   270                        	.member	z,32,5,8,16
   271                        	.member	width,48,5,8,16
   272                        	.member	height,64,5,8,16
   273                        	.member	data,80,18,8,32
   274                        	.eos
   275                        	.stag	_k_WindowClass,272,29
   276                        	.member	cbSize,0,16,8,16
   277                        	.member	style,16,16,8,16
   278                        	.member	styleEx,32,16,8,16
   279                        	.member	pWndProc,48,654,8,32
   280                        	.member	hInstance,80,129,8,32
   281                        	.member	hIcon,112,129,8,32
   282                        	.member	hCursor,144,129,8,32
   283                        	.member	hbrBackground,176,129,8,32
   284                        	.member	lpszMenuName,208,142,8,32
   285                        	.member	lpszClassName,240,142,8,32
   286                        	.eos
   287                        	.stag	_ClickableRect,152,30
   288                        	.member	area,0,10,8,112,26
   289                        	.member	z,112,18,8,32
   290                        	.member	enabled,144,14,8,8
   291                        	.eos
   292                        	.stag	_NCClickableRect,136,31
   293                        	.member	area,0,10,8,112,26
   294                        	.member	msgType,112,16,8,16
   295                        	.member	enabled,128,14,8,8
   296                        	.eos
   297                        	.stag	_DragData,216,32
   298                        	.member	area,0,10,8,112,26
   299                        	.member	xoffset,112,5,8,16
   300                        	.member	yoffset,128,5,8,16
   301                        	.member	msgType,144,16,8,16
   302                        	.member	ncAction,160,16,8,16
   303                        	.member	isDrag,176,14,8,8
   304                        	.member	isResize,184,14,8,8
   305                        	.member	canDrag,192,14,8,8
   306                        	.member	canDrop,200,14,8,8
   307                        	.member	didDrag,208,14,8,8
   308                        	.eos
   309                        	.stag	_k_WindowStruct,3904,33
  Thu Jul 29 2021 11:55                                                Page 7


   310                        	.member	cbSize,0,16,8,16
   311                        	.member	style,16,18,8,32
   312                        	.member	styleEx,48,18,8,32
   313                        	.member	win_id,80,5,8,16
   314                        	.member	win_x,96,5,8,16
   315                        	.member	win_y,112,5,8,16
   316                        	.member	win_width,128,5,8,16
   317                        	.member	win_height,144,5,8,16
   318                        	.member	win_xoffset,160,5,8,16
   319                        	.member	win_yoffset,176,5,8,16
   320                        	.member	win_cxoffset,192,5,8,16
   321                        	.member	win_cyoffset,208,5,8,16
   322                        	.member	wndRect,224,10,8,112,26
   323                        	.member	clientRect,336,10,8,112,26
   324                        	.member	nonclientGadgets,448,106,8,0,31,16
   325                        	.member	clickable,2624,129,8,32
   326                        	.member	win_title,2656,110,8,0,32
   327                        	.member	Reserved0,2912,16,8,16
   328                        	.member	win_class,2928,110,8,0,16
   329                        	.member	win_class_name,3056,110,8,0,32
   330                        	.member	nBitmapLayer,3312,16,8,16
   331                        	.member	bgRegion,3328,129,8,32
   332                        	.member	procid,3360,18,8,32
   333                        	.member	pWndClass,3392,138,8,32,29
   334                        	.member	pParentWindow,3424,129,8,32
   335                        	.member	hMenu,3456,129,8,32
   336                        	.member	hPointer,3488,129,8,32
   337                        	.member	hBackground,3520,129,8,32
   338                        	.member	pChildWindows,3552,138,8,32,6
   339                        	.member	pChildHitList,3584,138,8,32,6
   340                        	.member	isVisible,3616,14,8,8
   341                        	.member	windowData,3624,129,8,32
   342                        	.member	clientData,3656,1121,8,32,6
   343                        	.member	isClosed,3848,14,8,8
   344                        	.member	isClosing,3856,14,8,8
   345                        	.member	isDesktop,3864,14,8,8
   346                        	.member	clickableNode,3872,138,8,32,5
   347                        	.eos
   348                        	.stag	_k_WindowStructEx,3880,34
   349                        	.member	cbSize,0,16,8,16
   350                        	.member	style,16,18,8,32
   351                        	.member	styleEx,48,18,8,32
   352                        	.member	win_id,80,5,8,16
   353                        	.member	win_x,96,5,8,16
   354                        	.member	win_y,112,5,8,16
   355                        	.member	win_width,128,5,8,16
   356                        	.member	win_height,144,5,8,16
   357                        	.member	win_xoffset,160,5,8,16
   358                        	.member	win_yoffset,176,5,8,16
   359                        	.member	win_cxoffset,192,5,8,16
   360                        	.member	win_cyoffset,208,5,8,16
   361                        	.member	wndRect,224,10,8,112,26
   362                        	.member	clientRect,336,10,8,112,26
   363                        	.member	nonclientGadgets,448,106,8,0,31,16
   364                        	.member	clickable,2624,129,8,32
   365                        	.member	win_title,2656,110,8,0,32
   366                        	.member	Reserved0,2912,16,8,16
   367                        	.member	win_class,2928,110,8,0,16
  Thu Jul 29 2021 11:55                                                Page 8


   368                        	.member	nBitmapLayer,3056,16,8,16
   369                        	.member	procid,3072,18,8,32
   370                        	.member	pWndClass,3104,138,8,32,29
   371                        	.member	pParentWindow,3136,129,8,32
   372                        	.member	hMenu,3168,129,8,32
   373                        	.member	hPointer,3200,129,8,32
   374                        	.member	hBackground,3232,129,8,32
   375                        	.member	pChildWindows,3264,138,8,32,6
   376                        	.member	pChildHitList,3296,138,8,32,6
   377                        	.member	isVisible,3328,14,8,8
   378                        	.member	windowData,3336,129,8,32
   379                        	.member	clientData,3368,1121,8,32,4
   380                        	.member	isClosed,3496,14,8,8
   381                        	.member	hWnd,3504,129,8,32
   382                        	.member	localRect,3536,10,8,112,26
   383                        	.member	globalRect,3648,10,8,112,26
   384                        	.member	clientOffsetRect,3760,10,8,112,26
   385                        	.member	isDesktop,3872,14,8,8
   386                        	.eos
   387                        	.stag	_FontMetric,32,35
   388                        	.member	width,0,5,8,16
   389                        	.member	height,16,5,8,16
   390                        	.eos
   391                        	.stag	_MenuStruct,280,36
   392                        	.member	cx,0,5,8,16
   393                        	.member	cy,16,5,8,16
   394                        	.member	width,32,5,8,16
   395                        	.member	height,48,5,8,16
   396                        	.member	fcolor,64,14,8,8
   397                        	.member	bcolor,72,14,8,8
   398                        	.member	chromeLeft,80,14,8,8
   399                        	.member	chromeRight1,88,14,8,8
   400                        	.member	chromeRight2,96,14,8,8
   401                        	.member	hFont,104,129,8,32
   402                        	.member	itemId,136,16,8,16
   403                        	.member	pCaption,152,142,8,32
   404                        	.member	subMenus,184,138,8,32,6
   405                        	.member	pBackground,216,129,8,32
   406                        	.member	hWndOwner,248,129,8,32
   407                        	.eos
   408                        	.stag	fake37_,160,37
   409                        	.member	menuId,0,16,8,16
   410                        	.member	caption,16,142,8,32
   411                        	.member	rect,48,10,8,112,26
   412                        	.eos
   413                        	.stag	fake38_,5152,38
   414                        	.member	pParent,0,138,8,32,33
   415                        	.member	rect,32,10,8,112,26
   416                        	.member	captions,144,1134,8,32,24
   417                        	.member	chrome,912,110,8,0,24
   418                        	.member	ids,1104,112,8,0,24
   419                        	.member	clickable,1488,106,8,0,30,24
   420                        	.member	selected,5136,16,8,16
   421                        	.eos
   422                        	.stag	_fx_button_t,96,39
   423                        	.member	pCaption,0,142,8,32
   424                        	.member	cCaption,32,16,8,16
   425                        	.member	data,48,129,8,32
  Thu Jul 29 2021 11:55                                                Page 9


   426                        	.member	captionPixelWidth,80,16,8,16
   427                        	.eos
   428                        	.stag	_fx_scrollbar_t,240,40
   429                        	.member	min,0,16,8,16
   430                        	.member	max,16,16,8,16
   431                        	.member	increment,32,16,8,16
   432                        	.member	stopsize,48,16,8,16
   433                        	.member	location,64,5,8,16
   434                        	.member	state,80,5,8,16
   435                        	.member	rectThumb,96,10,8,112,26
   436                        	.member	data,208,129,8,32
   437                        	.eos
   438                        	.stag	_fx_listbox_t,240,41
   439                        	.member	pos,0,5,8,16
   440                        	.member	selected,16,16,8,16
   441                        	.member	offsetX,32,5,8,16
   442                        	.member	offsetY,48,5,8,16
   443                        	.member	inc,64,5,8,16
   444                        	.member	direction,80,5,8,16
   445                        	.member	top,96,5,8,16
   446                        	.member	bottom,112,5,8,16
   447                        	.member	indexTop,128,5,8,16
   448                        	.member	indexBottom,144,5,8,16
   449                        	.member	maxItems,160,16,8,16
   450                        	.member	fontSet,176,142,8,32
   451                        	.member	data,208,129,8,32
   452                        	.eos
   453                        	.stag	_fx_textbox_t,144,42
   454                        	.member	pos,0,5,8,16
   455                        	.member	selected,16,16,8,16
   456                        	.member	offsetX,32,5,8,16
   457                        	.member	offsetY,48,5,8,16
   458                        	.member	isShifted,64,14,8,8
   459                        	.member	cursorState,72,14,8,8
   460                        	.member	fontSet,80,142,8,32
   461                        	.member	data,112,129,8,32
   462                        	.eos
   463                        	.stag	_fx_msgbox_t,144,43
   464                        	.member	pos,0,5,8,16
   465                        	.member	selected,16,16,8,16
   466                        	.member	offsetX,32,5,8,16
   467                        	.member	offsetY,48,5,8,16
   468                        	.member	isShifted,64,14,8,8
   469                        	.member	cursorState,72,14,8,8
   470                        	.member	fontSet,80,142,8,32
   471                        	.member	data,112,129,8,32
   472                        	.eos
   473                        	.stag	_fx_menuAnchor_t,272,44
   474                        	.member	pCaption,0,142,8,32
   475                        	.member	renderLayoutX,32,16,8,16
   476                        	.member	renderLayoutY,48,16,8,16
   477                        	.member	captionPixelWidth,64,16,8,16
   478                        	.member	data,80,129,8,32
   479                        	.member	droppedWindow,112,138,8,32,33
   480                        	.member	bytes,144,110,8,0,16
   481                        	.eos
   482                        	.stag	_SubMenuStruct,64,45
   483                        	.member	caption,0,142,8,32
  Thu Jul 29 2021 11:55                                                Page 10


   484                        	.member	action,32,641,8,32
   485                        	.eos
   486                        	.stag	_SubMenuListStruct,40,46
   487                        	.member	cMenus,0,14,8,8
   488                        	.member	psubmenus,8,9354,8,32,45
   489                        	.eos
   490                        	.stag	_fx_ComBuffer,2080,47
   491                        	.member	cbSize,0,16,8,16
   492                        	.member	cbBuffer,16,16,8,16
   493                        	.member	buffer,32,110,8,0,256
   494                        	.eos
   495                        	.stag	_fx_resource_header,72,48
   496                        	.member	magic,0,110,8,0,4
   497                        	.member	major,32,14,8,8
   498                        	.member	minor,40,14,8,8
   499                        	.member	type,48,14,8,8
   500                        	.member	reserved,56,14,8,8
   501                        	.member	resheaderSize,64,14,8,8
   502                        	.eos
   503                        	.stag	_fx_resource_header_font,144,49
   504                        	.member	title,0,110,8,0,16
   505                        	.member	height,128,14,8,8
   506                        	.member	width,136,14,8,8
   507                        	.eos
   508                        	.stag	_fx_resource_string,32,50
   509                        	.member	locale,0,110,8,0,2
   510                        	.member	entries,16,16,8,16
   511                        	.eos
   512                        	.stag	_fx_resource_string_entry,40,51
   513                        	.member	index,0,16,8,16
   514                        	.member	length,16,16,8,16
   515                        	.member	data,32,14,8,8
   516                        	.eos
   517                        	.line	1064
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",8
   519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstringtable.h",0
   520                        	.line	90
   521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",9
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   523                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   524                        	.line	1064
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",5
   526                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",0
   527                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   528                        	.line	1064
   529                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",11
   530                        	.line	72
   531                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",6
  Thu Jul 29 2021 11:55                                                Page 11


   532                        	.line	1960
   533                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",16
   534                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   535                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   536                        	.line	30
   537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",5
   538                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   539                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   540                        	.line	1064
   541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",11
   542                        	.line	118
   543                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",6
   544                        	.stag	_fx_api_call_table,8192,52
   545                        	.member	call_table,0,1121,8,32,256
   546                        	.eos
   547                        	.stag	_fx_zero_page_irq_data,32,53
   548                        	.member	data,0,110,8,0,4
   549                        	.eos
   550                        	.stag	_fx_zero_page,720,54
   551                        	.member	fxos_mouse_byte_0,0,14,8,8
   552                        	.member	fxos_mouse_byte_1,8,14,8,8
   553                        	.member	fxos_mouse_byte_2,16,14,8,8
   554                        	.member	fxos_mouse_byte_t,24,14,8,8
   555                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   556                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   557                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   558                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   559                        	.member	fxos_key_byte_0,64,14,8,8
   560                        	.member	fxos_key_byte_1,72,14,8,8
   561                        	.member	fxos_key_byte_2,80,14,8,8
   562                        	.member	fxos_mouse_ctl,88,14,8,8
   563                        	.member	fxos_mouse_index,96,14,8,8
   564                        	.member	fxos_mouse_status,104,14,8,8
   565                        	.member	Endianness,112,16,8,16
   566                        	.member	VersionMajor,128,16,8,16
   567                        	.member	VersionMinor,144,16,8,16
   568                        	.member	VersionRelease,160,16,8,16
   569                        	.member	topMemory,176,18,8,32
   570                        	.member	bottomMemory,208,18,8,32
   571                        	.member	availableMemory,240,18,8,32
   572                        	.member	availableMemoryK,272,18,8,32
   573                        	.member	availableHeapMemory,304,18,8,32
   574                        	.member	availableHeapMemoryK,336,18,8,32
   575                        	.member	fxos_console_row,368,16,8,16
   576                        	.member	fxos_console_col,384,16,8,16
   577                        	.member	executive,400,129,8,32
   578                        	.member	eventmanager,432,129,8,32
   579                        	.member	devicemanager,464,129,8,32
   580                        	.member	windowmanager,496,129,8,32
   581                        	.member	fxos_kernel_api,528,138,8,32,52
  Thu Jul 29 2021 11:55                                                Page 12


   582                        	.member	fxos_dos_api,560,138,8,32,52
   583                        	.member	fxos_gfx_api,592,138,8,32,52
   584                        	.member	fxos_gui_api,624,138,8,32,52
   585                        	.member	fxos_con_api,656,138,8,32,52
   586                        	.member	fxos_reserved_2_api,688,138,8,32,52
   587                        	.eos
   588                        	.stag	_fx_environment,96,55
   589                        	.member	variables,0,142,8,32
   590                        	.member	reserved1,32,5,8,16
   591                        	.member	reserved2,48,5,8,16
   592                        	.member	reserved3,64,5,8,16
   593                        	.member	reserved4,80,5,8,16
   594                        	.eos
   595                        	.stag	_debug_byte_bits,8,56
   596                        	.member	bit7,0,14,17,1
   597                        	.member	bit6,1,14,17,1
   598                        	.member	bit5,2,14,17,1
   599                        	.member	bit4,3,14,17,1
   600                        	.member	bit3,4,14,17,1
   601                        	.member	bit2,5,14,17,1
   602                        	.member	bit1,6,14,17,1
   603                        	.member	bit0,7,14,17,1
   604                        	.eos
   605                        	.stag	_k_segmentheader,160,57
   606                        	.member	version_major,0,14,8,8
   607                        	.member	version_minor,8,14,8,8
   608                        	.member	length,16,5,8,16
   609                        	.member	segment_start_addr,32,7,8,32
   610                        	.member	segment_end_addr,64,7,8,32
   611                        	.member	segment_size,96,7,8,32
   612                        	.member	main_entry_addr,128,7,8,32
   613                        	.eos
   614                        	.stag	_fx_device_driver,776,58
   615                        	.member	name,0,110,8,0,32
   616                        	.member	version,256,110,8,0,16
   617                        	.member	hmajor,384,110,8,0,8
   618                        	.member	hminor,448,110,8,0,8
   619                        	.member	type,512,14,8,8
   620                        	.member	designation,520,110,8,0,6
   621                        	.member	irq_ctl,568,16,8,16
   622                        	.member	f_driver_irq,584,129,8,32
   623                        	.member	driver_context,616,129,8,32
   624                        	.member	f_driver_load,648,129,8,32
   625                        	.member	f_driver_read,680,129,8,32
   626                        	.member	f_driver_write,712,129,8,32
   627                        	.member	f_driver_unload,744,129,8,32
   628                        	.eos
   629                        	.stag	_fx_block_device_driver,808,59
   630                        	.member	name,0,110,8,0,32
   631                        	.member	version,256,110,8,0,16
   632                        	.member	hmajor,384,110,8,0,8
   633                        	.member	hminor,448,110,8,0,8
   634                        	.member	type,512,14,8,8
   635                        	.member	designation,520,110,8,0,6
   636                        	.member	irq_ctl,568,16,8,16
   637                        	.member	f_driver_irq,584,129,8,32
   638                        	.member	driver_context,616,129,8,32
   639                        	.member	f_driver_load,648,129,8,32
  Thu Jul 29 2021 11:55                                                Page 13


   640                        	.member	f_driver_read,680,129,8,32
   641                        	.member	f_driver_write,712,129,8,32
   642                        	.member	f_driver_unload,744,129,8,32
   643                        	.member	f_driver_command,776,129,8,32
   644                        	.eos
   645                        	.stag	_k_irq_chain,128,60
   646                        	.member	handlers,0,5217,8,32,4
   647                        	.eos
   648                        	.line	473
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",22
   650                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   651                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   652                        	.line	134
   653                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",5
   654                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   655                        	.line	205
   656                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",6
   657                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   658                        	.line	1064
   659                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",7
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   661                        	.line	1960
   662                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",12
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   664                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   665                        	.line	205
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",5
   667                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   668                        	.line	134
   669                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",6
   670                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   671                        	.line	1064
   672                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",7
   673                        	.stag	_fx_string,64,61
   674                        	.member	size,0,16,8,16
   675                        	.member	pos,16,5,8,16
   676                        	.member	buffer,32,142,8,32
   677                        	.eos
   678                        	.line	139
   679                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",17
  Thu Jul 29 2021 11:55                                                Page 14


   680                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   681                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   682                        	.line	30
   683                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",5
   684                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   685                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   686                        	.line	1064
   687                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",5
   688                        	.stag	_fxos_executive_vtable,128,62
   689                        	.member	Init,0,8833,8,32
   690                        	.member	Configure,32,656,8,32
   691                        	.member	Query,64,656,8,32
   692                        	.member	Uninit,96,641,8,32
   693                        	.eos
   694                        	.line	86
   695                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",6
   696                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   697                        	.line	118
   698                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",7
   699                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   700                        	.line	208
   701                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",8
   702                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
   703                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   704                        	.line	30
   705                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",5
   706                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
   707                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   708                        	.line	30
   709                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",5
   710                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   711                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_build_parameters.h",0
   712                        	.line	35
   713                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",8
   714                        	.stag	UMM_HEAP_INFO_t,256,63
   715                        	.member	totalEntries,0,18,8,32
   716                        	.member	usedEntries,32,18,8,32
   717                        	.member	freeEntries,64,18,8,32
  Thu Jul 29 2021 11:55                                                Page 15


   718                        	.member	totalBlocks,96,18,8,32
   719                        	.member	usedBlocks,128,18,8,32
   720                        	.member	freeBlocks,160,18,8,32
   721                        	.member	maxFreeContiguousBlocks,192,18,8,32
   722                        	.member	blockSize,224,18,8,32
   723                        	.eos
   724                        	.line	199
   725                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",6
   726                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
   727                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   728                        	.line	1064
   729                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",11
   730                        	.line	24
   731                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",7
   732                        	.stag	_fx_memory_map,2072,64
   733                        	.member	availableMemory,0,18,8,32
   734                        	.member	valid_segments,32,110,8,0,255
   735                        	.eos
   736                        	.stag	_fx_ipc_port,144,65
   737                        	.member	id,0,18,8,32
   738                        	.member	type,32,14,8,8
   739                        	.member	name,40,138,8,32,61
   740                        	.member	time,72,18,8,32
   741                        	.member	queue,104,138,8,32,7
   742                        	.member	reserved_1,136,14,8,8
   743                        	.eos
   744                        	.stag	_k_mem_alloc_header,80,66
   745                        	.member	user,0,14,8,8
   746                        	.member	attr,8,14,8,8
   747                        	.member	size,16,18,8,32
   748                        	.member	virtual,48,129,8,32
   749                        	.eos
   750                        	.line	129
   751                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",6
   752                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   753                        	.line	565
   754                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",7
   755                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
   756                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",0
   757                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   758                        	.line	1064
   759                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",6
   760                        	.line	74
   761                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",5
   762                        	.stag	_click_detected,64,67
  Thu Jul 29 2021 11:55                                                Page 16


   763                        	.member	window,0,138,8,32,33
   764                        	.member	handler,32,641,8,32
   765                        	.eos
   766                        	.stag	_current_palette_map,400,68
   767                        	.member	CUR_DESKTOP,0,5,8,16
   768                        	.member	CUR_BACKGROUND,16,5,8,16
   769                        	.member	CUR_FONT,32,5,8,16
   770                        	.member	CUR_SELECTED_FONT,48,5,8,16
   771                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   772                        	.member	CUR_WINDOWFRAME,80,5,8,16
   773                        	.member	CUR_WINDOWBORDER,96,5,8,16
   774                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   775                        	.member	CUR_MENU,128,5,8,16
   776                        	.member	CUR_GADGET,144,5,8,16
   777                        	.member	CUR_COLOR,160,101,8,0,15
   778                        	.eos
   779                        	.line	359
   780                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",8
   781                        	.stag	_fxos_winman_vtable,160,69
   782                        	.member	Events,0,641,8,32
   783                        	.member	ConfigureWindowManager,32,656,8,32
   784                        	.member	ProcessWindowEvent,64,8833,8,32
   785                        	.member	QueryWindowManager,96,656,8,32
   786                        	.member	DoWndProcs,128,641,8,32
   787                        	.eos
   788                        	.stag	fake70_,64,70
   789                        	.member	type,0,16,8,16
   790                        	.member	size,16,16,8,16
   791                        	.member	desktopAction,32,129,8,32
   792                        	.eos
   793                        	.stag	fake71_,96,71
   794                        	.member	type,0,16,8,16
   795                        	.member	caption,16,138,8,32,61
   796                        	.member	buttonType,48,16,8,16
   797                        	.member	x,64,5,8,16
   798                        	.member	y,80,5,8,16
   799                        	.eos
   800                        	.stag	_childMessage_t,64,72
   801                        	.member	msgType,0,16,8,16
   802                        	.member	msgData,16,129,8,32
   803                        	.member	dataSize,48,16,8,16
   804                        	.eos
   805                        	.line	591
   806                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",9
   807                        	.stag	_fx_main_loopvars,16,73
   808                        	.member	dummy,0,5,8,16
   809                        	.eos
   810                        	.stag	_fxMouseMessageData,64,74
   811                        	.member	button1,0,14,8,8
   812                        	.member	button2,8,14,8,8
   813                        	.member	button3,16,14,8,8
   814                        	.member	button4,24,14,8,8
   815                        	.member	x,32,16,8,16
   816                        	.member	y,48,16,8,16
   817                        	.eos
   818                        	.utag	marshalled_data,32,75
  Thu Jul 29 2021 11:55                                                Page 17


   819                        	.member	byteValue,0,14,11,8
   820                        	.member	verbValue,0,110,11,0,2
   821                        	.member	intValue,0,16,11,16
   822                        	.member	longValue,0,18,11,32
   823                        	.member	pointerValue,0,129,11,32
   824                        	.eos
   825                        	.stag	_fx_eventProcess,64,76
   826                        	.member	process,0,138,8,32,20
   827                        	.member	eventProc,32,641,8,32
   828                        	.eos
   829                        	.stag	_mouse_msg_state,184,77
   830                        	.member	lastEvent,0,18,8,32
   831                        	.member	buttonLeftDown,32,14,8,8
   832                        	.member	lastLeftDown,40,18,8,32
   833                        	.member	buttonRightDown,72,14,8,8
   834                        	.member	lastRightDown,80,18,8,32
   835                        	.member	buttonMiddleDown,112,14,8,8
   836                        	.member	lastMiddleDown,120,18,8,32
   837                        	.member	lastX,152,16,8,16
   838                        	.member	lastY,168,16,8,16
   839                        	.eos
   840                        	.stag	_fxos_eventmanager_vtable,192,78
   841                        	.member	EventQueue,0,138,8,32,7
   842                        	.member	Init,32,8833,8,32
   843                        	.member	Run,64,656,8,32
   844                        	.member	Configure,96,656,8,32
   845                        	.member	Query,128,656,8,32
   846                        	.member	Uninit,160,641,8,32
   847                        	.eos
   848                        	.stag	_k_clipboard_data,168,79
   849                        	.member	type,0,14,8,8
   850                        	.member	readable,8,110,8,0,16
   851                        	.member	data,136,129,8,32
   852                        	.eos
   853                        	.line	565
   854                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",18
   855                        	.stag	_fx_spinner_ctx,48,80
   856                        	.member	index,0,5,8,16
   857                        	.member	spinner,16,142,8,32
   858                        	.eos
   859                        	.stag	_fx_console_ctx,1144,81
   860                        	.member	lineBufferIndex,0,5,8,16
   861                        	.member	lineBuffer,16,110,8,0,128
   862                        	.member	isShifted,1040,14,8,8
   863                        	.member	userData,1048,129,8,32
   864                        	.member	screenBuffer,1080,129,8,32
   865                        	.member	Reserved1,1112,129,8,32
   866                        	.eos
   867                        	.stag	_token,64,82
   868                        	.member	type,0,5,8,16
   869                        	.member	depth,16,16,8,16
   870                        	.member	text,32,142,8,32
   871                        	.eos
   872                        	.stag	_command_args,64,83
   873                        	.member	proc,0,656,8,32
   874                        	.member	tokens,32,138,8,32,5
   875                        	.eos
  Thu Jul 29 2021 11:55                                                Page 18


   876                        	.line	208
   877                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",23
   878                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   879                        	.line	139
   880                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",24
   881                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   882                        	.line	118
   883                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",25
   884                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff.h",0
   885                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ffconf.h",0
   886                        	.line	298
   887                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff.h",29
   888                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   889                        	.line	1064
   890                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff.h",30
   891                        	.stag	fake84_,4504,84
   892                        	.member	fs_type,0,14,8,8
   893                        	.member	pdrv,8,14,8,8
   894                        	.member	n_fats,16,14,8,8
   895                        	.member	wflag,24,14,8,8
   896                        	.member	fsi_flag,32,14,8,8
   897                        	.member	id,40,5,8,16
   898                        	.member	n_rootdir,56,5,8,16
   899                        	.member	csize,72,5,8,16
   900                        	.member	lfnbuf,88,144,8,32
   901                        	.member	last_clst,120,18,8,32
   902                        	.member	free_clst,152,18,8,32
   903                        	.member	n_fatent,184,18,8,32
   904                        	.member	fsize,216,18,8,32
   905                        	.member	volbase,248,18,8,32
   906                        	.member	fatbase,280,18,8,32
   907                        	.member	dirbase,312,18,8,32
   908                        	.member	database,344,18,8,32
   909                        	.member	winsect,376,18,8,32
   910                        	.member	win,408,110,8,0,512
   911                        	.eos
   912                        	.stag	fake85_,128,85
   913                        	.member	fs,0,138,8,32,84
   914                        	.member	id,32,5,8,16
   915                        	.member	attr,48,14,8,8
   916                        	.member	stat,56,14,8,8
   917                        	.member	sclust,64,18,8,32
   918                        	.member	objsize,96,18,8,32
   919                        	.eos
   920                        	.stag	fake86_,4400,86
   921                        	.member	obj,0,10,8,128,85
   922                        	.member	flag,128,14,8,8
   923                        	.member	err,136,14,8,8
  Thu Jul 29 2021 11:55                                                Page 19


   924                        	.member	fptr,144,18,8,32
   925                        	.member	clust,176,18,8,32
   926                        	.member	sect,208,18,8,32
   927                        	.member	dir_sect,240,18,8,32
   928                        	.member	dir_ptr,272,142,8,32
   929                        	.member	buf,304,110,8,0,512
   930                        	.eos
   931                        	.stag	fake87_,416,87
   932                        	.member	obj,0,10,8,128,85
   933                        	.member	dptr,128,18,8,32
   934                        	.member	clust,160,18,8,32
   935                        	.member	sect,192,18,8,32
   936                        	.member	dir,224,142,8,32
   937                        	.member	fn,256,110,8,0,12
   938                        	.member	blk_ofs,352,18,8,32
   939                        	.member	pat,384,142,8,32
   940                        	.eos
   941                        	.stag	fake88_,2224,88
   942                        	.member	fsize,0,18,8,32
   943                        	.member	fdate,32,5,8,16
   944                        	.member	ftime,48,5,8,16
   945                        	.member	fattrib,64,14,8,8
   946                        	.member	altname,72,110,8,0,13
   947                        	.member	fname,176,110,8,0,256
   948                        	.eos
   949                        	.stag	fake89_,80,89
   950                        	.member	fmt,0,14,8,8
   951                        	.member	n_fat,8,14,8,8
   952                        	.member	align,16,16,8,16
   953                        	.member	n_root,32,16,8,16
   954                        	.member	au_size,48,18,8,32
   955                        	.eos
   956                        	.line	429
   957                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",26
   958                        	.line	30
   959                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\mindrvr.h",35
   960                        	.stag	REG_CMD_INFO,328,90
   961                        	.member	cmd,0,14,8,8
   962                        	.member	fr,8,16,8,16
   963                        	.member	sc,24,16,8,16
   964                        	.member	sn,40,16,8,16
   965                        	.member	cl,56,16,8,16
   966                        	.member	ch,72,16,8,16
   967                        	.member	dh,88,14,8,8
   968                        	.member	dc,96,14,8,8
   969                        	.member	ns,104,7,8,32
   970                        	.member	mc,136,5,8,16
   971                        	.member	lbaSize,152,14,8,8
   972                        	.member	lbaLow,160,18,8,32
   973                        	.member	lbaHigh,192,18,8,32
   974                        	.member	st,224,14,8,8
   975                        	.member	as,232,14,8,8
   976                        	.member	er,240,14,8,8
   977                        	.member	ec,248,14,8,8
   978                        	.member	to,256,14,8,8
   979                        	.member	totalBytesXfer,264,7,8,32
  Thu Jul 29 2021 11:55                                                Page 20


   980                        	.member	drqPackets,296,7,8,32
   981                        	.eos
   982                        	.line	475
   983                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\MINDRVR.C",36
   984                        ;#include "fxos.h"
   985                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   986                        	.line	30
   987                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\MINDRVR.C",37
   988                        ;#include "ata.h"
   989                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ata.h",0
   990                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdint.h",0
   991                        	.line	92
   992                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ata.h",4
   993                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   994                        	.line	30
   995                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ata.h",5
   996                        	.stag	fake91_,8,91
   997                        	.member	drive,0,14,8,8
   998                        	.eos
   999                        	.line	94
  1000                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\MINDRVR.C",38
  1001                        ;
  1002                        ;//#pragma section CODE=IDEMAN,offset $08:0000
  1003                        ;#pragma section CODE=FXHDD,offset $06:8FFE
  1004                        FXHDD	section	offset $06:8FFE
  1005 06:8FFE:              	ends
  1006                        ;
  1007                        ;//***********************************************
                    ***************
  1008                        ;//
  1009                        ;// !!! data that functions outside of MINDRVR mus
                    t use
  1010                        ;//
  1011                        ;// Note that there is no actual "interrupt handle
                    r" provide in
  1012                        ;// MINDRVR. The interrupt handler is usually a sm
                    all function that
  1013                        ;// is very system specific. However, MINDRVR expe
                    cts that interrupt
  1014                        ;// handler function to provide some status data a
                    t the time the
  1015                        ;// interrupt handler is executed.
  1016                        ;//
  1017                        ;// In many systems, including PCI bus based syste
                    ms, when an
  1018                        ;// interrupt is received from an ATA controller, 
                    the interrupt
  1019                        ;// handler must acknowledge the interrupt by read
                    ing both the
  Thu Jul 29 2021 11:55                                                Page 21


  1020                        ;// ATA/ATAPI device Status register and the contr
                    oller status
  1021                        ;// register. This status must be stored here so t
                    hat MINDRVR
  1022                        ;// can use it.
  1023                        ;//
  1024                        ;//***********************************************
                    ***************
  1025                        ;extern ULONG _pseudo_timer;
  1026                        ;
  1027                        ;//UCHAR ide_sector[512];
  1028                        ;
  1029                        ;unsigned char int_ata_status;    // ATA status re
                    ad by interrupt handler
  1030                        ;
  1031                        ;unsigned char int_bmide_status;  // BMIDE status 
                    read by interrupt handler
  1032                        ;
  1033                        ;unsigned char int_use_intr_flag = INT_DEFAULT_INT
                    ERRUPT_MODE;
  1034                        	data
  1035                        	xdef	~~int_use_intr_flag
  1036                        ~~int_use_intr_flag:
  1037 00:0000: 00           	db	$0
  1038 00:0001:              	ends
  1039                        ;
  1040                        ;struct REG_CMD_INFO reg_cmd_info;
  1041                        ;
  1042                        ;int reg_config_info[2];
  1043                        ;
  1044                        ;unsigned char * pio_bmide_base_addr;
  1045                        ;
  1046                        ;unsigned char * pio_reg_addrs[9] =
  1047                        	data
  1048                        	xdef	~~pio_reg_addrs
  1049                        ~~pio_reg_addrs:
  1050                        ;{
  1051                        ;   PIO_BASE_ADDR1 + 0,  // [0] CB_DATA
  1052 00:0001: 39 E8 AF 00  	dl	$AFE839
  1053                        ;   PIO_BASE_ADDR1 + 1,  // [1] CB_FR & CB_ER
  1054 00:0005: 3A E8 AF 00  	dl	$AFE83A
  1055                        ;   PIO_BASE_ADDR1 + 2,  // [2] CB_SC
  1056 00:0009: 3B E8 AF 00  	dl	$AFE83B
  1057                        ;   PIO_BASE_ADDR1 + 3,  // [3] CB_SN
  1058 00:000D: 3C E8 AF 00  	dl	$AFE83C
  1059                        ;   PIO_BASE_ADDR1 + 4,  // [4] CB_CL
  1060 00:0011: 3D E8 AF 00  	dl	$AFE83D
  1061                        ;   PIO_BASE_ADDR1 + 5,  // [5] CB_CH
  1062 00:0015: 3E E8 AF 00  	dl	$AFE83E
  1063                        ;   PIO_BASE_ADDR1 + 6,  // [6] CB_DH
  1064 00:0019: 3F E8 AF 00  	dl	$AFE83F
  1065                        ;   PIO_BASE_ADDR1 + 7,  // [7] CB_CMD & CB_STAT
  1066 00:001D: 40 E8 AF 00  	dl	$AFE840
  1067                        ;   PIO_BASE_ADDR2 + 0   // [8] CB_DC & CB_ASTAT
  1068                        ;} ;
  1069 00:0021: 38 E8 AF 00  	dl	$AFE838
  1070 00:0025:              	ends
  1071                        ;
  Thu Jul 29 2021 11:55                                                Page 22


  1072                        ;unsigned char pio_xfer_width = PIO_DEFAULT_XFER_W
                    IDTH;
  1073                        	data
  1074                        	xdef	~~pio_xfer_width
  1075                        ~~pio_xfer_width:
  1076 00:0025: 10           	db	$10
  1077 00:0026:              	ends
  1078                        ;
  1079                        ;//***********************************************
                    ***************
  1080                        ;//
  1081                        ;// functions internal and private to MINDRVR
  1082                        ;//
  1083                        ;//***********************************************
                    ***************
  1084                        ;
  1085                        ;static void sub_setup_command( void );
  1086                        ;static void sub_trace_command( void );
  1087                        ;static int sub_select( unsigned char dev );
  1088                        ;static void sub_wait_poll( unsigned char we, unsi
                    gned char pe );
  1089                        ;
  1090                        ;static unsigned char pio_inbyte( unsigned char ad
                    dr );
  1091                        ;static void pio_outbyte( int addr, unsigned char 
                    data );
  1092                        ;static unsigned int pio_inword( unsigned char add
                    r );
  1093                        ;static void pio_outword( int addr, unsigned int d
                    ata );
  1094                        ;static unsigned long pio_indword( unsigned char a
                    ddr );
  1095                        ;static void pio_outdword( int addr, unsigned long
                     data );
  1096                        ;static void pio_drq_block_in( unsigned char addrD
                    ataReg,
  1097                        ;                              unsigned char * buf
                    Addr,
  1098                        ;                              long wordCnt );
  1099                        ;static void pio_drq_block_out( unsigned char addr
                    DataReg,
  1100                        ;                               unsigned char * bu
                    fAddr,
  1101                        ;                               long wordCnt );
  1102                        ;static void pio_rep_inbyte( unsigned char addrDat
                    aReg,
  1103                        ;                            unsigned char * bufAd
                    dr,
  1104                        ;                            long byteCnt );
  1105                        ;static void pio_rep_outbyte( unsigned char addrDa
                    taReg,
  1106                        ;                             unsigned char * bufA
                    ddr,
  1107                        ;                             long byteCnt );
  1108                        ;static void pio_rep_inword( unsigned char addrDat
                    aReg,
  1109                        ;                            unsigned char * bufAd
                    dr,
  Thu Jul 29 2021 11:55                                                Page 23


  1110                        ;                            long wordCnt );
  1111                        ;static void pio_rep_outword( unsigned char addrDa
                    taReg,
  1112                        ;                             unsigned char * bufA
                    ddr,
  1113                        ;                             long wordCnt );
  1114                        ;static void pio_rep_indword( unsigned char addrDa
                    taReg,
  1115                        ;                             unsigned char * bufA
                    ddr,
  1116                        ;                             long dwordCnt );
  1117                        ;static void pio_rep_outdword( unsigned char addrD
                    ataReg,
  1118                        ;                              unsigned char * buf
                    Addr,
  1119                        ;                              long dwordCnt );
  1120                        ;
  1121                        ;static unsigned char pio_readBusMstrCmd( void );
  1122                        ;static unsigned char pio_readBusMstrStatus( void 
                    );
  1123                        ;static void pio_writeBusMstrCmd( unsigned char x 
                    );
  1124                        ;static void pio_writeBusMstrStatus( unsigned char
                     x );
  1125                        ;
  1126                        ;static long tmr_cmd_start_time;     // command st
                    art time
  1127                        ;static void tmr_set_timeout( void );
  1128                        ;static int tmr_chk_timeout( void );
  1129                        ;
  1130                        ;void k_ide_init(void);
  1131                        ;void k_ide_busy(void);
  1132                        ;void k_ide_drive_ready(void);
  1133                        ;void k_ide_drive_ready_notbusy(void);
  1134                        ;void k_ide_not_drq(void);
  1135                        ;LPCHAR k_ide_read_sector(LPCHAR readBuffer);
  1136                        ;void k_read_lba_sector(ULONG sectorStart,
  1137                        ;						unsigned
                     char count,
  1138                        ;					   LPCHAR readBu
                    ffer);
  1139                        ;LPCHAR k_ide_get_info(void);
  1140                        ;
  1141                        ;// This macro provides a small delay that is used
                     in several
  1142                        ;// places in the ATA command protocols:
  1143                        ;
  1144                        ;#define DELAY400NS  { pio_inbyte( CB_ASTAT ); pio
                    _inbyte( CB_ASTAT );  \
  1145                        ;                      pio_inbyte( CB_ASTAT ); pio
                    _inbyte( CB_ASTAT ); pio_inbyte( CB_ASTAT );}
  1146                        ;
  1147                        ;//***********************************************
                    **************
  1148                        ;//
  1149                        ;// reg_config() - Check the host adapter and dete
                    rmine the
  1150                        ;//                number and type of drives attac
  Thu Jul 29 2021 11:55                                                Page 24


                    hed.
  1151                        ;//
  1152                        ;// This process is not documented by any of the A
                    TA standards.
  1153                        ;//
  1154                        ;// Infomation is returned by this function is in
  1155                        ;// reg_config_info[] -- see MINDRVR.H.
  1156                        ;//
  1157                        ;//***********************************************
                    **************
  1158                        ;
  1159                        ;
  1160                        ;
  1161                        ;// Directions:
  1162                        ;//#define      ATA_READ      0x00
  1163                        ;//#define      ATA_WRITE     0x01
  1164                        ;/*
  1165                        ;struct IDEChannelRegisters {
  1166                        ;   unsigned short base;  // I/O Base.
  1167                        ;   unsigned short ctrl;  // Control Base
  1168                        ;   unsigned short bmide; // Bus Master IDE
  1169                        ;   unsigned char  nIEN;  // nIEN (No Interrupt);
  1170                        ;} channels[2];
  1171                        ;
  1172                        ;unsigned char ide_buf[2048] = {0};
  1173                        ;unsigned static char ide_irq_invoked = 0;
  1174                        ;unsigned static char atapi_packet[12] = {0xA8, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  1175                        ;
  1176                        ;struct ide_device {
  1177                        ;   unsigned char  Reserved;    // 0 (Empty) or 1 
                    (This Drive really exists).
  1178                        ;   unsigned char  Channel;     // 0 (Primary Chan
                    nel) or 1 (Secondary Channel).
  1179                        ;   unsigned char  Drive;       // 0 (Master Drive
                    ) or 1 (Slave Drive).
  1180                        ;   unsigned short Type;        // 0: ATA, 1:ATAPI
                    .
  1181                        ;   unsigned short Signature;   // Drive Signature
  1182                        ;   unsigned short Capabilities;// Features.
  1183                        ;   unsigned int   CommandSets; // Command Sets Su
                    pported.
  1184                        ;   unsigned int   Size;        // Size in Sectors
                    .
  1185                        ;   unsigned char  Model[41];   // Model in string
                    .
  1186                        ;} ide_devices[4];
  1187                        ;
  1188                        ;
  1189                        ;void ide_write(unsigned char channel, unsigned ch
                    ar reg, unsigned char data)
  1190                        ;{
  1191                        ;   if (reg > 0x07 && reg < 0x0C)
  1192                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
  1193                        ;   if (reg < 0x08)
  1194                        ;      outb(channels[channel].base  + reg - 0x00, 
                    data);
  Thu Jul 29 2021 11:55                                                Page 25


  1195                        ;   else if (reg < 0x0C)
  1196                        ;      outb(channels[channel].base  + reg - 0x06, 
                    data);
  1197                        ;   else if (reg < 0x0E)
  1198                        ;      outb(channels[channel].ctrl  + reg - 0x0A, 
                    data);
  1199                        ;   else if (reg < 0x16)
  1200                        ;      outb(channels[channel].bmide + reg - 0x0E, 
                    data);
  1201                        ;   if (reg > 0x07 && reg < 0x0C)
  1202                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
  1203                        ;}
  1204                        ;
  1205                        ;unsigned char ide_read(unsigned char channel, uns
                    igned char reg)
  1206                        ;{
  1207                        ;   unsigned char result;
  1208                        ;   if (reg > 0x07 && reg < 0x0C)
  1209                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
  1210                        ;   if (reg < 0x08)
  1211                        ;      result = inb(channels[channel].base + reg -
                     0x00);
  1212                        ;   else if (reg < 0x0C)
  1213                        ;      result = inb(channels[channel].base  + reg 
                    - 0x06);
  1214                        ;   else if (reg < 0x0E)
  1215                        ;      result = inb(channels[channel].ctrl  + reg 
                    - 0x0A);
  1216                        ;   else if (reg < 0x16)
  1217                        ;      result = inb(channels[channel].bmide + reg 
                    - 0x0E);
  1218                        ;   if (reg > 0x07 && reg < 0x0C)
  1219                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
  1220                        ;   return result;
  1221                        ;}
  1222                        ;
  1223                        ;void ide_read_buffer(unsigned char channel, unsig
                    ned char reg, unsigned int buffer,unsigned int quads)
  1224                        ;{
  1225                        ;    if (reg > 0x07 && reg < 0x0C)
  1226                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
  1227                        ;  // asm("pushw %es; movw %ds, %ax; movw %ax, %es
                    ");
  1228                        ;   if (reg < 0x08)
  1229                        ;      insl(channels[channel].base  + reg - 0x00, 
                    buffer, quads);
  1230                        ;   else if (reg < 0x0C)
  1231                        ;      insl(channels[channel].base  + reg - 0x06, 
                    buffer, quads);
  1232                        ;   else if (reg < 0x0E)
  1233                        ;      insl(channels[channel].ctrl  + reg - 0x0A, 
                    buffer, quads);
  1234                        ;   else if (reg < 0x16)
  1235                        ;      insl(channels[channel].bmide + reg - 0x0E, 
  Thu Jul 29 2021 11:55                                                Page 26


                    buffer, quads);
  1236                        ;   //asm("popw %es;");
  1237                        ;   if (reg > 0x07 && reg < 0x0C)
  1238                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
  1239                        ;}
  1240                        ;
  1241                        ;void ide_initialize(unsigned int BAR0, unsigned i
                    nt BAR1, unsigned int BAR2, unsigned int BAR3,unsigned int B
                    AR4)
  1242                        ;{
  1243                        ;	UCHAR i;
  1244                        ;    int j, k, count = 0;
  1245                        ;
  1246                        ;   // 1- Detect I/O Ports which interface IDE Con
                    troller:
  1247                        ;   channels[ATA_PRIMARY  ].base  = (BAR0 & 0xFFFF
                    FFFC) + 0x1F0 * (!BAR0);
  1248                        ;   channels[ATA_PRIMARY  ].ctrl  = (BAR1 & 0xFFFF
                    FFFC) + 0x3F6 * (!BAR1);
  1249                        ;   channels[ATA_SECONDARY].base  = (BAR2 & 0xFFFF
                    FFFC) + 0x170 * (!BAR2);
  1250                        ;   channels[ATA_SECONDARY].ctrl  = (BAR3 & 0xFFFF
                    FFFC) + 0x376 * (!BAR3);
  1251                        ;   channels[ATA_PRIMARY  ].bmide = (BAR4 & 0xFFFF
                    FFFC) + 0; // Bus Master IDE
  1252                        ;   channels[ATA_SECONDARY].bmide = (BAR4 & 0xFFFF
                    FFFC) + 8; // Bus Master IDE
  1253                        ;
  1254                        ;   ide_write(ATA_PRIMARY  , ATA_REG_CONTROL, 2);
  1255                        ;   ide_write(ATA_SECONDARY, ATA_REG_CONTROL, 2);
  1256                        ;
  1257                        ;
  1258                        ;   // 3- Detect ATA-ATAPI Devices:
  1259                        ;   for (i = 0; i < 2; i++)
  1260                        ;      for (j = 0; j < 2; j++) {
  1261                        ;
  1262                        ;         unsigned char err = 0, type = IDE_ATA, s
                    tatus;
  1263                        ;         ide_devices[count].Reserved = 0; // Assu
                    ming that no drive here.
  1264                        ;
  1265                        ;         // (I) Select Drive:
  1266                        ;         ide_write(i, ATA_REG_HDDEVSEL, 0xA0 | (j
                     << 4)); // Select Drive.
  1267                        ;         sleep(1); // Wait 1ms for drive select t
                    o work.
  1268                        ;
  1269                        ;         // (II) Send ATA Identify Command:
  1270                        ;         ide_write(i, ATA_REG_COMMAND, ATA_CMD_ID
                    ENTIFY);
  1271                        ;         sleep(1); // This function should be imp
                    lemented in your OS. which waits for 1 ms.
  1272                        ;                   // it is based on System Timer
                     Device Driver.
  1273                        ;
  1274                        ;         // (III) Polling:
  1275                        ;         if (ide_read(i, ATA_REG_STATUS) == 0) co
  Thu Jul 29 2021 11:55                                                Page 27


                    ntinue; // If Status = 0, No Device.
  1276                        ;
  1277                        ;         while(1) {
  1278                        ;            status = ide_read(i, ATA_REG_STATUS);
  1279                        ;            if ((status & ATA_SR_ERR)) {err = 1; 
                    break;} // If Err, Device is not ATA.
  1280                        ;            if (!(status & ATA_SR_BSY) && (status
                     & ATA_SR_DRQ)) break; // Everything is right.
  1281                        ;         }
  1282                        ;
  1283                        ;         // (IV) Probe for ATAPI Devices:
  1284                        ;
  1285                        ;         if (err != 0) {
  1286                        ;            unsigned char cl = ide_read(i, ATA_RE
                    G_LBA1);
  1287                        ;            unsigned char ch = ide_read(i, ATA_RE
                    G_LBA2);
  1288                        ;
  1289                        ;            if (cl == 0x14 && ch ==0xEB)
  1290                        ;               type = IDE_ATAPI;
  1291                        ;            else if (cl == 0x69 && ch == 0x96)
  1292                        ;               type = IDE_ATAPI;
  1293                        ;            else
  1294                        ;               continue; // Unknown Type (may not
                     be a device).
  1295                        ;
  1296                        ;            ide_write(i, ATA_REG_COMMAND, ATA_CMD
                    _IDENTIFY_PACKET);
  1297                        ;            sleep(1);
  1298                        ;         }
  1299                        ;
  1300                        ;         // (V) Read Identification Space of the 
                    Device:
  1301                        ;         ide_read_buffer(i, ATA_REG_DATA, (unsign
                    ed int) ide_buf, 128);
  1302                        ;
  1303                        ;         // (VI) Read Device Parameters:
  1304                        ;         ide_devices[count].Reserved     = 1;
  1305                        ;         ide_devices[count].Type         = type;
  1306                        ;         ide_devices[count].Channel      = i;
  1307                        ;         ide_devices[count].Drive        = j;
  1308                        ;         ide_devices[count].Signature    = *((uns
                    igned short *)(ide_buf + ATA_IDENT_DEVICETYPE));
  1309                        ;         ide_devices[count].Capabilities = *((uns
                    igned short *)(ide_buf + ATA_IDENT_CAPABILITIES));
  1310                        ;         ide_devices[count].CommandSets  = *((uns
                    igned int *)(ide_buf + ATA_IDENT_COMMANDSETS));
  1311                        ;
  1312                        ;         // (VII) Get Size:
  1313                        ;         if (ide_devices[count].CommandSets & (1 
                    << 26))
  1314                        ;            // Device uses 48-Bit Addressing:
  1315                        ;            ide_devices[count].Size   = *((unsign
                    ed int *)(ide_buf + ATA_IDENT_MAX_LBA_EXT));
  1316                        ;         else
  1317                        ;            // Device uses CHS or 28-bit Addressi
                    ng:
  1318                        ;            ide_devices[count].Size   = *((unsign
  Thu Jul 29 2021 11:55                                                Page 28


                    ed int *)(ide_buf + ATA_IDENT_MAX_LBA));
  1319                        ;
  1320                        ;         // (VIII) String indicates model of devi
                    ce (like Western Digital HDD and SONY DVD-RW...):
  1321                        ;         for(k = 0; k < 40; k += 2) {
  1322                        ;            ide_devices[count].Model[k] = ide_buf
                    [ATA_IDENT_MODEL + k + 1];
  1323                        ;            ide_devices[count].Model[k + 1] = ide
                    _buf[ATA_IDENT_MODEL + k];}
  1324                        ;         ide_devices[count].Model[40] = 0; // Ter
                    minate String.
  1325                        ;
  1326                        ;         count++;
  1327                        ;      }
  1328                        ;
  1329                        ;   // 4- Print Summary:
  1330                        ;   for (i = 0; i < 4; i++)
  1331                        ;   {
  1332                        ;      if (ide_devices[i].Reserved == 1)
  1333                        ;      {
  1334                        ;
  1335                        ;      }
  1336                        ;   }
  1337                        ;}
  1338                        ;
  1339                        ;unsigned char ide_polling(unsigned char channel, 
                    unsigned int advanced_check)
  1340                        ;{
  1341                        ;	int i;
  1342                        ;   // (I) Delay 400 nanosecond for BSY to be set:
  1343                        ;   // -------------------------------------------
                    ------
  1344                        ;   for(i = 0; i < 4; i++)
  1345                        ;      ide_read(channel, ATA_REG_ALTSTATUS); // Re
                    ading the Alternate Status port wastes 100ns; loop four time
                    s.
  1346                        ;
  1347                        ;   // (II) Wait for BSY to be cleared:
  1348                        ;   // -------------------------------------------
                    ------
  1349                        ;   while (ide_read(channel, ATA_REG_STATUS) & ATA
                    _SR_BSY)
  1350                        ;      ; // Wait for BSY to be zero.
  1351                        ;
  1352                        ;   if (advanced_check) {
  1353                        ;      unsigned char state = ide_read(channel, ATA
                    _REG_STATUS); // Read Status Register.
  1354                        ;
  1355                        ;      // (III) Check For Errors:
  1356                        ;      // ----------------------------------------
                    ---------
  1357                        ;      if (state & ATA_SR_ERR)
  1358                        ;         return 2; // Error.
  1359                        ;
  1360                        ;      // (IV) Check If Device fault:
  1361                        ;      // ----------------------------------------
                    ---------
  1362                        ;      if (state & ATA_SR_DF)
  Thu Jul 29 2021 11:55                                                Page 29


  1363                        ;         return 1; // Device Fault.
  1364                        ;
  1365                        ;      // (V) Check DRQ:
  1366                        ;      // ----------------------------------------
                    ---------
  1367                        ;      // BSY = 0; DF = 0; ERR = 0 so we should ch
                    eck for DRQ now.
  1368                        ;      if ((state & ATA_SR_DRQ) == 0)
  1369                        ;         return 3; // DRQ should be set
  1370                        ;
  1371                        ;   }
  1372                        ;
  1373                        ;   return 0; // No Error.
  1374                        ;
  1375                        ;}
  1376                        ;*/
  1377                        ;
  1378                        ;/*
  1379                        ;#define ATA_SR_BSY     0x80
  1380                        ;#define ATA_SR_DRDY    0x40
  1381                        ;#define ATA_SR_DF      0x20
  1382                        ;#define ATA_SR_DSC     0x10
  1383                        ;#define ATA_SR_DRQ     0x08
  1384                        ;#define ATA_SR_CORR    0x04
  1385                        ;#define ATA_SR_IDX     0x02
  1386                        ;#define ATA_SR_ERR     0x01
  1387                        ;
  1388                        ;#define FX_ATA_REG_DATA       ((LPCHAR)0xAFE830)
  1389                        ;#define FX_ATA_REG_ERROR      ((LPCHAR)0xAFE831)
  1390                        ;#define FX_ATA_REG_FEATURES   ((LPCHAR)0xAFE831)
  1391                        ;#define FX_ATA_REG_SECCOUNT0  ((LPCHAR)0xAFE832)
  1392                        ;#define FX_ATA_REG_LBA0       ((LPCHAR)0xAFE833)
  1393                        ;#define FX_ATA_REG_LBA1       ((LPCHAR)0xAFE834)
  1394                        ;#define FX_ATA_REG_LBA2       ((LPCHAR)0xAFE835)
  1395                        ;#define FX_ATA_REG_HDDEVSEL   ((LPCHAR)0xAFE836)
  1396                        ;#define FX_ATA_REG_HDDEVSEL   ((LPCHAR)0xAFE836)
  1397                        ;#define FX_ATA_REG_COMMAND    ((LPCHAR)0xAFE837)
  1398                        ;#define FX_ATA_REG_STATUS     ((LPCHAR)0xAFE837)
  1399                        ;#define FX_ATA_REG_SECCOUNT1  ((LPCHAR)0xAFE838)
  1400                        ;#define FX_ATA_REG_LBA3       ((LPCHAR)0xAFE839)
  1401                        ;
  1402                        ;*/
  1403                        ;
  1404                        ;void k_ide_isbusy(void)
  1405                        ;{
  1406                        	.line	417
  1407                        	.line	418
  1408                        	FXHDD
  1409                        	xdef	~~k_ide_isbusy
  1410                        	func
  1411                        	.function	418
  1412                        ~~k_ide_isbusy:
  1413                        	longa	on
  1414                        	longi	on
  1415 06:8FFE: 3B           	tsc
  1416 06:8FFF: 38           	sec
  1417 06:9000: E9 04 00     	sbc	#L2
  1418 06:9003: 1B           	tcs
  Thu Jul 29 2021 11:55                                                Page 30


  1419 06:9004: 0B           	phd
  1420 06:9005: 5B           	tcd
  1421                        	.block	418
  1422                        ;	INT timeout  = 128;
  1423                        ;	UCHAR sts    = ATA_SR_BSY;
  1424                        ;	UCHAR errsts = 0x00;
  1425                        ;
  1426                        ;	k_debug_string("k_ide_isbusy:enter\r\n");
  1427             00000000   timeout_1	set	0
  1428             00000002   sts_1	set	2
  1429             00000003   errsts_1	set	3
  1430                        	.sym	timeout,0,5,1,16
  1431                        	.sym	sts,2,14,1,8
  1432                        	.sym	errsts,3,14,1,8
  1433 06:9006: A9 80 00     	lda	#$80
  1434 06:9009: 85 01        	sta	<L3+timeout_1
  1435 06:900B: E2 20        	sep	#$20
  1436                        	longa	off
  1437 06:900D: A9 80        	lda	#$80
  1438 06:900F: 85 03        	sta	<L3+sts_1
  1439 06:9011: C2 20        	rep	#$20
  1440                        	longa	on
  1441 06:9013: E2 20        	sep	#$20
  1442                        	longa	off
  1443 06:9015: 64 04        	stz	<L3+errsts_1
  1444 06:9017: C2 20        	rep	#$20
  1445                        	longa	on
  1446                        	.line	423
  1447 06:9019: F4 xx xx     	pea	#^L1
  1448 06:901C: F4 xx xx     	pea	#<L1
  1449 06:901F: 22 xx xx xx  	jsl	~~k_debug_string
  1450                        ;
  1451                        ;	do
  1452                        	.line	425
  1453                        L10003:
  1454                        ;	{
  1455                        	.line	426
  1456                        ;		sts = FX_ATA_REG_STATUS[0];
  1457                        	.line	427
  1458 06:9023: E2 20        	sep	#$20
  1459                        	longa	off
  1460 06:9025: AF 37 E8 AF  	lda	>11528247
  1461 06:9029: 85 03        	sta	<L3+sts_1
  1462 06:902B: C2 20        	rep	#$20
  1463                        	longa	on
  1464                        ;		//k_debug_bits("k_ide_isbusy:",sts);
  1465                        ;		if(sts & ATA_SR_ERR)
  1466                        	.line	429
  1467                        ;		{
  1468 06:902D: E2 20        	sep	#$20
  1469                        	longa	off
  1470 06:902F: A5 03        	lda	<L3+sts_1
  1471 06:9031: 29 01        	and	#<$1
  1472 06:9033: C2 20        	rep	#$20
  1473                        	longa	on
  1474 06:9035: D0 03        	bne	L5
  1475 06:9037: 82 19 00     	brl	L10004
  1476                        L5:
  Thu Jul 29 2021 11:55                                                Page 31


  1477                        	.line	430
  1478                        ;			errsts = FX_ATA_REG_ERROR[0];
  1479                        	.line	431
  1480 06:903A: E2 20        	sep	#$20
  1481                        	longa	off
  1482 06:903C: AF 31 E8 AF  	lda	>11528241
  1483 06:9040: 85 04        	sta	<L3+errsts_1
  1484 06:9042: C2 20        	rep	#$20
  1485                        	longa	on
  1486                        ;			k_debug_bits("k_ide_busy:ERR:",e
                    rrsts);
  1487                        	.line	432
  1488 06:9044: D4 04        	pei	<L3+errsts_1
  1489 06:9046: F4 xx xx     	pea	#^L1+21
  1490 06:9049: F4 xx xx     	pea	#<L1+21
  1491 06:904C: 22 xx xx xx  	jsl	~~k_debug_bits
  1492                        ;			break;
  1493                        	.line	433
  1494 06:9050: 82 1F 00     	brl	L10002
  1495                        ;		}
  1496                        	.line	434
  1497                        ;		timeout--;
  1498                        L10004:
  1499                        	.line	435
  1500 06:9053: C6 01        	dec	<L3+timeout_1
  1501                        ;	}while((sts & ATA_SR_BSY) && timeout > 0);
  1502                        	.line	436
  1503                        L10001:
  1504 06:9055: E2 20        	sep	#$20
  1505                        	longa	off
  1506 06:9057: A5 03        	lda	<L3+sts_1
  1507 06:9059: 29 80        	and	#<$80
  1508 06:905B: C2 20        	rep	#$20
  1509                        	longa	on
  1510 06:905D: D0 03        	bne	L7
  1511 06:905F: 82 10 00     	brl	L6
  1512                        L7:
  1513 06:9062: 38           	sec
  1514 06:9063: A9 00 00     	lda	#$0
  1515 06:9066: E5 01        	sbc	<L3+timeout_1
  1516 06:9068: 70 03        	bvs	L8
  1517 06:906A: 49 00 80     	eor	#$8000
  1518                        L8:
  1519 06:906D: 30 03        	bmi	L9
  1520 06:906F: 82 B1 FF     	brl	L10003
  1521                        L9:
  1522                        L6:
  1523                        L10002:
  1524                        ;	k_debug_bits("k_ide_isbusy:",sts);
  1525                        	.line	437
  1526 06:9072: D4 03        	pei	<L3+sts_1
  1527 06:9074: F4 xx xx     	pea	#^L1+37
  1528 06:9077: F4 xx xx     	pea	#<L1+37
  1529 06:907A: 22 xx xx xx  	jsl	~~k_debug_bits
  1530                        ;	k_debug_string("k_ide_isbusy:exit\r\n");
  1531                        	.line	438
  1532 06:907E: F4 xx xx     	pea	#^L1+51
  1533 06:9081: F4 xx xx     	pea	#<L1+51
  Thu Jul 29 2021 11:55                                                Page 32


  1534 06:9084: 22 xx xx xx  	jsl	~~k_debug_string
  1535                        ;
  1536                        ;	return;
  1537                        	.line	440
  1538                        L10:
  1539 06:9088: 2B           	pld
  1540 06:9089: 3B           	tsc
  1541 06:908A: 18           	clc
  1542 06:908B: 69 04 00     	adc	#L2
  1543 06:908E: 1B           	tcs
  1544 06:908F: 6B           	rtl
  1545                        ;}
  1546                        	.line	441
  1547                        	.endblock	441
  1548             00000004   L2	equ	4
  1549             00000001   L3	equ	1
  1550 06:9090:              	ends
  1551                        	efunc
  1552                        	.endfunc	441,1,4
  1553                        	.line	441
  1554                        	data
  1555                        L1:
  1556 00:0026: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$62,$75,
                    $73,$79,$3A,$65,$6E
       00:002A: 65 5F 69 73 
       00:002E: 62 75 73 79 
       00:0032: 3A 65 6E 
  1557 00:0035: 74 65 72 0D  	db	$74,$65,$72,$0D,$0A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$62,$75,$73
       00:0039: 0A 00 6B 5F 
       00:003D: 69 64 65 5F 
       00:0041: 62 75 73 
  1558 00:0044: 79 3A 45 52  	db	$79,$3A,$45,$52,$52,$3A,$00,$6B,$5F,$69,
                    $64,$65,$5F,$69,$73
       00:0048: 52 3A 00 6B 
       00:004C: 5F 69 64 65 
       00:0050: 5F 69 73 
  1559 00:0053: 62 75 73 79  	db	$62,$75,$73,$79,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$69,$73,$62
       00:0057: 3A 00 6B 5F 
       00:005B: 69 64 65 5F 
       00:005F: 69 73 62 
  1560 00:0062: 75 73 79 3A  	db	$75,$73,$79,$3A,$65,$78,$69,$74,$0D,$0A,
                    $00
       00:0066: 65 78 69 74 
       00:006A: 0D 0A 00 
  1561 00:006D:              	ends
  1562                        ;
  1563                        ;
  1564                        ;void k_ide_isready(void)
  1565                        ;{
  1566                        	.line	444
  1567                        	.line	445
  1568                        	FXHDD
  1569                        	xdef	~~k_ide_isready
  1570                        	func
  1571                        	.function	445
  1572                        ~~k_ide_isready:
  Thu Jul 29 2021 11:55                                                Page 33


  1573                        	longa	on
  1574                        	longi	on
  1575 06:9090: 3B           	tsc
  1576 06:9091: 38           	sec
  1577 06:9092: E9 04 00     	sbc	#L12
  1578 06:9095: 1B           	tcs
  1579 06:9096: 0B           	phd
  1580 06:9097: 5B           	tcd
  1581                        	.block	445
  1582                        ;	INT timeout  = 128;
  1583                        ;	UCHAR sts    = ATA_SR_DRDY;
  1584                        ;	UCHAR errsts = 0x00;
  1585                        ;
  1586                        ;	//k_debug_string("k_ide_isready:enter\r\n");
  1587                        ;
  1588                        ;	do
  1589             00000000   timeout_1	set	0
  1590             00000002   sts_1	set	2
  1591             00000003   errsts_1	set	3
  1592                        	.sym	timeout,0,5,1,16
  1593                        	.sym	sts,2,14,1,8
  1594                        	.sym	errsts,3,14,1,8
  1595 06:9098: A9 80 00     	lda	#$80
  1596 06:909B: 85 01        	sta	<L13+timeout_1
  1597 06:909D: E2 20        	sep	#$20
  1598                        	longa	off
  1599 06:909F: A9 40        	lda	#$40
  1600 06:90A1: 85 03        	sta	<L13+sts_1
  1601 06:90A3: C2 20        	rep	#$20
  1602                        	longa	on
  1603 06:90A5: E2 20        	sep	#$20
  1604                        	longa	off
  1605 06:90A7: 64 04        	stz	<L13+errsts_1
  1606 06:90A9: C2 20        	rep	#$20
  1607                        	longa	on
  1608                        	.line	452
  1609                        L10007:
  1610                        ;	{
  1611                        	.line	453
  1612                        ;		sts = FX_ATA_REG_STATUS[0];
  1613                        	.line	454
  1614 06:90AB: E2 20        	sep	#$20
  1615                        	longa	off
  1616 06:90AD: AF 37 E8 AF  	lda	>11528247
  1617 06:90B1: 85 03        	sta	<L13+sts_1
  1618 06:90B3: C2 20        	rep	#$20
  1619                        	longa	on
  1620                        ;
  1621                        ;		if(sts & ATA_SR_BSY)
  1622                        	.line	456
  1623                        ;			k_ide_isbusy();
  1624 06:90B5: E2 20        	sep	#$20
  1625                        	longa	off
  1626 06:90B7: A5 03        	lda	<L13+sts_1
  1627 06:90B9: 29 80        	and	#<$80
  1628 06:90BB: C2 20        	rep	#$20
  1629                        	longa	on
  1630 06:90BD: D0 03        	bne	L15
  Thu Jul 29 2021 11:55                                                Page 34


  1631 06:90BF: 82 04 00     	brl	L10008
  1632                        L15:
  1633                        	.line	457
  1634 06:90C2: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  1635                        ;
  1636                        ;		//k_debug_bits("k_ide_isready:",sts);
  1637                        ;		//k_debug_hex("k_ide_isready:set:",(sts 
                    & ATA_SR_DRDY));
  1638                        ;		if((sts & ATA_SR_ERR) && (((sts & ATA_SR
                    _BSY) == 0) && ((sts & ATA_SR_BSY) == 0)  ))
  1639                        L10008:
  1640                        	.line	461
  1641                        ;		{
  1642 06:90C6: E2 20        	sep	#$20
  1643                        	longa	off
  1644 06:90C8: A5 03        	lda	<L13+sts_1
  1645 06:90CA: 29 01        	and	#<$1
  1646 06:90CC: C2 20        	rep	#$20
  1647                        	longa	on
  1648 06:90CE: D0 03        	bne	L16
  1649 06:90D0: 82 33 00     	brl	L10009
  1650                        L16:
  1651 06:90D3: E2 20        	sep	#$20
  1652                        	longa	off
  1653 06:90D5: A5 03        	lda	<L13+sts_1
  1654 06:90D7: 29 80        	and	#<$80
  1655 06:90D9: C2 20        	rep	#$20
  1656                        	longa	on
  1657 06:90DB: F0 03        	beq	L17
  1658 06:90DD: 82 26 00     	brl	L10009
  1659                        L17:
  1660 06:90E0: E2 20        	sep	#$20
  1661                        	longa	off
  1662 06:90E2: A5 03        	lda	<L13+sts_1
  1663 06:90E4: 29 80        	and	#<$80
  1664 06:90E6: C2 20        	rep	#$20
  1665                        	longa	on
  1666 06:90E8: F0 03        	beq	L18
  1667 06:90EA: 82 19 00     	brl	L10009
  1668                        L18:
  1669                        	.line	462
  1670                        ;			errsts = FX_ATA_REG_ERROR[0];
  1671                        	.line	463
  1672 06:90ED: E2 20        	sep	#$20
  1673                        	longa	off
  1674 06:90EF: AF 31 E8 AF  	lda	>11528241
  1675 06:90F3: 85 04        	sta	<L13+errsts_1
  1676 06:90F5: C2 20        	rep	#$20
  1677                        	longa	on
  1678                        ;			k_debug_bits("k_ide_isready:ERR:
                    ",errsts);
  1679                        	.line	464
  1680 06:90F7: D4 04        	pei	<L13+errsts_1
  1681 06:90F9: F4 xx xx     	pea	#^L11
  1682 06:90FC: F4 xx xx     	pea	#<L11
  1683 06:90FF: 22 xx xx xx  	jsl	~~k_debug_bits
  1684                        ;			break;
  1685                        	.line	465
  Thu Jul 29 2021 11:55                                                Page 35


  1686 06:9103: 82 16 00     	brl	L10006
  1687                        ;		}
  1688                        	.line	466
  1689                        ;		timeout--;
  1690                        L10009:
  1691                        	.line	467
  1692 06:9106: C6 01        	dec	<L13+timeout_1
  1693                        ;		if(timeout < 0)
  1694                        	.line	468
  1695                        ;			break;
  1696 06:9108: A5 01        	lda	<L13+timeout_1
  1697 06:910A: 10 03        	bpl	L19
  1698 06:910C: 82 0D 00     	brl	L10006
  1699                        L19:
  1700                        ;	}
  1701                        	.line	470
  1702                        ;	while(!(sts & ATA_SR_DRDY));
  1703                        L10005:
  1704 06:910F: E2 20        	sep	#$20
  1705                        	longa	off
  1706 06:9111: A5 03        	lda	<L13+sts_1
  1707 06:9113: 29 40        	and	#<$40
  1708 06:9115: C2 20        	rep	#$20
  1709                        	longa	on
  1710 06:9117: D0 03        	bne	L20
  1711 06:9119: 82 8F FF     	brl	L10007
  1712                        L20:
  1713                        L10006:
  1714                        ;	//k_debug_bits("k_ide_isready:",sts);
  1715                        ;	//k_debug_string("k_ide_isready:exit\r\n");
  1716                        ;
  1717                        ;	return;
  1718                        	.line	475
  1719                        L21:
  1720 06:911C: 2B           	pld
  1721 06:911D: 3B           	tsc
  1722 06:911E: 18           	clc
  1723 06:911F: 69 04 00     	adc	#L12
  1724 06:9122: 1B           	tcs
  1725 06:9123: 6B           	rtl
  1726                        ;}
  1727                        	.line	476
  1728                        	.endblock	476
  1729             00000004   L12	equ	4
  1730             00000001   L13	equ	1
  1731 06:9124:              	ends
  1732                        	efunc
  1733                        	.endfunc	476,1,4
  1734                        	.line	476
  1735                        	data
  1736                        L11:
  1737 00:006D: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$72,$65,
                    $61,$64,$79,$3A,$45
       00:0071: 65 5F 69 73 
       00:0075: 72 65 61 64 
       00:0079: 79 3A 45 
  1738 00:007C: 52 52 3A 00  	db	$52,$52,$3A,$00
  1739 00:0080:              	ends
  Thu Jul 29 2021 11:55                                                Page 36


  1740                        ;
  1741                        ;void k_ide_isdrq(void)
  1742                        ;{
  1743                        	.line	478
  1744                        	.line	479
  1745                        	FXHDD
  1746                        	xdef	~~k_ide_isdrq
  1747                        	func
  1748                        	.function	479
  1749                        ~~k_ide_isdrq:
  1750                        	longa	on
  1751                        	longi	on
  1752 06:9124: 3B           	tsc
  1753 06:9125: 38           	sec
  1754 06:9126: E9 08 00     	sbc	#L23
  1755 06:9129: 1B           	tcs
  1756 06:912A: 0B           	phd
  1757 06:912B: 5B           	tcd
  1758                        	.block	479
  1759                        ;	INT timeout  = 128;
  1760                        ;	UCHAR sts    = ATA_SR_DRDY;
  1761                        ;	UCHAR errsts = 0x00;
  1762                        ;
  1763                        ;	k_debug_string("k_ide_isdrq:enter\r\n");
  1764             00000000   timeout_1	set	0
  1765             00000002   sts_1	set	2
  1766             00000003   errsts_1	set	3
  1767                        	.sym	timeout,0,5,1,16
  1768                        	.sym	sts,2,14,1,8
  1769                        	.sym	errsts,3,14,1,8
  1770 06:912C: A9 80 00     	lda	#$80
  1771 06:912F: 85 05        	sta	<L24+timeout_1
  1772 06:9131: E2 20        	sep	#$20
  1773                        	longa	off
  1774 06:9133: A9 40        	lda	#$40
  1775 06:9135: 85 07        	sta	<L24+sts_1
  1776 06:9137: C2 20        	rep	#$20
  1777                        	longa	on
  1778 06:9139: E2 20        	sep	#$20
  1779                        	longa	off
  1780 06:913B: 64 08        	stz	<L24+errsts_1
  1781 06:913D: C2 20        	rep	#$20
  1782                        	longa	on
  1783                        	.line	484
  1784 06:913F: F4 xx xx     	pea	#^L22
  1785 06:9142: F4 xx xx     	pea	#<L22
  1786 06:9145: 22 xx xx xx  	jsl	~~k_debug_string
  1787                        ;
  1788                        ;	do
  1789                        	.line	486
  1790                        L10012:
  1791                        ;	{
  1792                        	.line	487
  1793                        ;		sts = FX_ATA_REG_STATUS[0];
  1794                        	.line	488
  1795 06:9149: E2 20        	sep	#$20
  1796                        	longa	off
  1797 06:914B: AF 37 E8 AF  	lda	>11528247
  Thu Jul 29 2021 11:55                                                Page 37


  1798 06:914F: 85 07        	sta	<L24+sts_1
  1799 06:9151: C2 20        	rep	#$20
  1800                        	longa	on
  1801                        ;		//k_debug_bits("k_ide_isdrq:",sts);
  1802                        ;
  1803                        ;		//if(sts & ATA_SR_BSY)
  1804                        ;		//	k_ide_isbusy();
  1805                        ;
  1806                        ;		if(sts & ATA_SR_ERR)
  1807                        	.line	494
  1808                        ;		{
  1809 06:9153: E2 20        	sep	#$20
  1810                        	longa	off
  1811 06:9155: A5 07        	lda	<L24+sts_1
  1812 06:9157: 29 01        	and	#<$1
  1813 06:9159: C2 20        	rep	#$20
  1814                        	longa	on
  1815 06:915B: D0 03        	bne	L26
  1816 06:915D: 82 19 00     	brl	L10013
  1817                        L26:
  1818                        	.line	495
  1819                        ;			errsts = FX_ATA_REG_ERROR[0];
  1820                        	.line	496
  1821 06:9160: E2 20        	sep	#$20
  1822                        	longa	off
  1823 06:9162: AF 31 E8 AF  	lda	>11528241
  1824 06:9166: 85 08        	sta	<L24+errsts_1
  1825 06:9168: C2 20        	rep	#$20
  1826                        	longa	on
  1827                        ;			k_debug_bits("k_ide_isdrq:ERR:",
                    errsts);
  1828                        	.line	497
  1829 06:916A: D4 08        	pei	<L24+errsts_1
  1830 06:916C: F4 xx xx     	pea	#^L22+20
  1831 06:916F: F4 xx xx     	pea	#<L22+20
  1832 06:9172: 22 xx xx xx  	jsl	~~k_debug_bits
  1833                        ;			break;
  1834                        	.line	498
  1835 06:9176: 82 13 00     	brl	L10011
  1836                        ;		}
  1837                        	.line	499
  1838                        ;		timeout--;
  1839                        L10013:
  1840                        	.line	500
  1841 06:9179: C6 05        	dec	<L24+timeout_1
  1842                        ;	}while((sts & ATA_SR_DRQ) != ATA_SR_DRQ);
  1843                        	.line	501
  1844                        L10010:
  1845 06:917B: A5 07        	lda	<L24+sts_1
  1846 06:917D: 29 08 00     	and	#<$8
  1847 06:9180: 85 01        	sta	<R0
  1848 06:9182: A5 01        	lda	<R0
  1849 06:9184: C9 08 00     	cmp	#<$8
  1850 06:9187: F0 03        	beq	L27
  1851 06:9189: 82 BD FF     	brl	L10012
  1852                        L27:
  1853                        L10011:
  1854                        ;	k_debug_bits("k_ide_isdrq:",sts);
  Thu Jul 29 2021 11:55                                                Page 38


  1855                        	.line	502
  1856 06:918C: D4 07        	pei	<L24+sts_1
  1857 06:918E: F4 xx xx     	pea	#^L22+37
  1858 06:9191: F4 xx xx     	pea	#<L22+37
  1859 06:9194: 22 xx xx xx  	jsl	~~k_debug_bits
  1860                        ;	k_debug_string("k_ide_isdrq:exit\r\n");
  1861                        	.line	503
  1862 06:9198: F4 xx xx     	pea	#^L22+50
  1863 06:919B: F4 xx xx     	pea	#<L22+50
  1864 06:919E: 22 xx xx xx  	jsl	~~k_debug_string
  1865                        ;
  1866                        ;	return;
  1867                        	.line	505
  1868                        L28:
  1869 06:91A2: 2B           	pld
  1870 06:91A3: 3B           	tsc
  1871 06:91A4: 18           	clc
  1872 06:91A5: 69 08 00     	adc	#L23
  1873 06:91A8: 1B           	tcs
  1874 06:91A9: 6B           	rtl
  1875                        ;}
  1876                        	.line	506
  1877                        	.endblock	506
  1878             00000008   L23	equ	8
  1879             00000005   L24	equ	5
  1880 06:91AA:              	ends
  1881                        	efunc
  1882                        	.endfunc	506,5,8
  1883                        	.line	506
  1884                        	data
  1885                        L22:
  1886 00:0080: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$64,$72,
                    $71,$3A,$65,$6E,$74
       00:0084: 65 5F 69 73 
       00:0088: 64 72 71 3A 
       00:008C: 65 6E 74 
  1887 00:008F: 65 72 0D 0A  	db	$65,$72,$0D,$0A,$00,$6B,$5F,$69,$64,$65,
                    $5F,$69,$73,$64,$72
       00:0093: 00 6B 5F 69 
       00:0097: 64 65 5F 69 
       00:009B: 73 64 72 
  1888 00:009E: 71 3A 45 52  	db	$71,$3A,$45,$52,$52,$3A,$00,$6B,$5F,$69,
                    $64,$65,$5F,$69,$73
       00:00A2: 52 3A 00 6B 
       00:00A6: 5F 69 64 65 
       00:00AA: 5F 69 73 
  1889 00:00AD: 64 72 71 3A  	db	$64,$72,$71,$3A,$00,$6B,$5F,$69,$64,$65,
                    $5F,$69,$73,$64,$72
       00:00B1: 00 6B 5F 69 
       00:00B5: 64 65 5F 69 
       00:00B9: 73 64 72 
  1890 00:00BC: 71 3A 65 78  	db	$71,$3A,$65,$78,$69,$74,$0D,$0A,$00
       00:00C0: 69 74 0D 0A 
       00:00C4: 00 
  1891 00:00C5:              	ends
  1892                        ;
  1893                        ;
  1894                        ;void ide_select_drive(UCHAR bus, UCHAR i)
  Thu Jul 29 2021 11:55                                                Page 39


  1895                        ;{
  1896                        	.line	509
  1897                        	.line	510
  1898                        	FXHDD
  1899                        	xdef	~~ide_select_drive
  1900                        	func
  1901                        	.function	510
  1902                        ~~ide_select_drive:
  1903                        	longa	on
  1904                        	longi	on
  1905 06:91AA: 3B           	tsc
  1906 06:91AB: 38           	sec
  1907 06:91AC: E9 00 00     	sbc	#L30
  1908 06:91AF: 1B           	tcs
  1909 06:91B0: 0B           	phd
  1910 06:91B1: 5B           	tcd
  1911             00000004   bus_0	set	4
  1912             00000006   i_0	set	6
  1913                        	.block	510
  1914                        ;	k_debug_hex("ide_select_drive:",i);
  1915                        	.sym	bus,4,14,6,8
  1916                        	.sym	i,6,14,6,8
  1917                        	.line	511
  1918 06:91B2: D4 06        	pei	<L30+i_0
  1919 06:91B4: F4 xx xx     	pea	#^L29
  1920 06:91B7: F4 xx xx     	pea	#<L29
  1921 06:91BA: 22 xx xx xx  	jsl	~~k_debug_hex
  1922                        ;
  1923                        ;	if(bus == ATA_PRIMARY)
  1924                        	.line	513
  1925                        ;	{
  1926 06:91BE: A5 04        	lda	<L30+bus_0
  1927 06:91C0: 29 FF 00     	and	#$ff
  1928 06:91C3: F0 03        	beq	L33
  1929 06:91C5: 82 21 00     	brl	L10014
  1930                        L33:
  1931                        	.line	514
  1932                        ;		if(i == ATA_MASTER)
  1933                        	.line	515
  1934                        ;			ATA_PRIMARY_IO[ATA_REG_HDDEVSEL]
                     = 0xA0;
  1935 06:91C8: A5 06        	lda	<L30+i_0
  1936 06:91CA: 29 FF 00     	and	#$ff
  1937 06:91CD: F0 03        	beq	L34
  1938 06:91CF: 82 0D 00     	brl	L10015
  1939                        L34:
  1940                        	.line	516
  1941 06:91D2: E2 20        	sep	#$20
  1942                        	longa	off
  1943 06:91D4: A9 A0        	lda	#$a0
  1944 06:91D6: 8F 36 E8 AF  	sta	>11528246
  1945 06:91DA: C2 20        	rep	#$20
  1946                        	longa	on
  1947                        ;		else
  1948 06:91DC: 82 0A 00     	brl	L10016
  1949                        L10015:
  1950                        ;			ATA_PRIMARY_IO[ATA_REG_HDDEVSEL]
                     = 0xB0;
  Thu Jul 29 2021 11:55                                                Page 40


  1951                        	.line	518
  1952 06:91DF: E2 20        	sep	#$20
  1953                        	longa	off
  1954 06:91E1: A9 B0        	lda	#$b0
  1955 06:91E3: 8F 36 E8 AF  	sta	>11528246
  1956 06:91E7: C2 20        	rep	#$20
  1957                        	longa	on
  1958                        L10016:
  1959                        ;	}
  1960                        	.line	519
  1961                        ;
  1962                        ;
  1963                        ;	//k_delay(10);
  1964                        ;	k_ide_isbusy();
  1965                        L10014:
  1966                        	.line	523
  1967 06:91E9: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  1968                        ;
  1969                        ;}
  1970                        	.line	525
  1971                        L35:
  1972 06:91ED: A5 02        	lda	<L30+2
  1973 06:91EF: 85 06        	sta	<L30+2+4
  1974 06:91F1: A5 01        	lda	<L30+1
  1975 06:91F3: 85 05        	sta	<L30+1+4
  1976 06:91F5: 2B           	pld
  1977 06:91F6: 3B           	tsc
  1978 06:91F7: 18           	clc
  1979 06:91F8: 69 04 00     	adc	#L30+4
  1980 06:91FB: 1B           	tcs
  1981 06:91FC: 6B           	rtl
  1982                        	.endblock	525
  1983             00000000   L30	equ	0
  1984             00000001   L31	equ	1
  1985 06:91FD:              	ends
  1986                        	efunc
  1987                        	.endfunc	525,1,0
  1988                        	.line	525
  1989                        	data
  1990                        L29:
  1991 00:00C5: 69 64 65 5F  	db	$69,$64,$65,$5F,$73,$65,$6C,$65,$63,$74,
                    $5F,$64,$72,$69,$76
       00:00C9: 73 65 6C 65 
       00:00CD: 63 74 5F 64 
       00:00D1: 72 69 76 
  1992 00:00D4: 65 3A 00     	db	$65,$3A,$00
  1993 00:00D7:              	ends
  1994                        ;
  1995                        ;void k_ide_diagnostic(void)
  1996                        ;{
  1997                        	.line	527
  1998                        	.line	528
  1999                        	FXHDD
  2000                        	xdef	~~k_ide_diagnostic
  2001                        	func
  2002                        	.function	528
  2003                        ~~k_ide_diagnostic:
  2004                        	longa	on
  Thu Jul 29 2021 11:55                                                Page 41


  2005                        	longi	on
  2006 06:91FD: 3B           	tsc
  2007 06:91FE: 38           	sec
  2008 06:91FF: E9 01 00     	sbc	#L37
  2009 06:9202: 1B           	tcs
  2010 06:9203: 0B           	phd
  2011 06:9204: 5B           	tcd
  2012                        	.block	528
  2013                        ;	UCHAR sts = 0x00;
  2014                        ;
  2015                        ;	k_ide_isbusy();
  2016             00000000   sts_1	set	0
  2017                        	.sym	sts,0,14,1,8
  2018 06:9205: E2 20        	sep	#$20
  2019                        	longa	off
  2020 06:9207: 64 01        	stz	<L38+sts_1
  2021 06:9209: C2 20        	rep	#$20
  2022                        	longa	on
  2023                        	.line	531
  2024 06:920B: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2025                        ;
  2026                        ;	IDE_CMD_STAT[0] = 0x90;
  2027                        	.line	533
  2028 06:920F: E2 20        	sep	#$20
  2029                        	longa	off
  2030 06:9211: A9 90        	lda	#$90
  2031 06:9213: 8F 37 E8 AF  	sta	>11528247
  2032 06:9217: C2 20        	rep	#$20
  2033                        	longa	on
  2034                        ;
  2035                        ;	k_ide_isbusy();
  2036                        	.line	535
  2037 06:9219: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2038                        ;
  2039                        ;	sts = IDE_ERROR[0];
  2040                        	.line	537
  2041 06:921D: E2 20        	sep	#$20
  2042                        	longa	off
  2043 06:921F: AF 31 E8 AF  	lda	>11528241
  2044 06:9223: 85 01        	sta	<L38+sts_1
  2045 06:9225: C2 20        	rep	#$20
  2046                        	longa	on
  2047                        ;	k_debug_hex("k_ide_diagnostic:code:",sts);
  2048                        	.line	538
  2049 06:9227: D4 01        	pei	<L38+sts_1
  2050 06:9229: F4 xx xx     	pea	#^L36
  2051 06:922C: F4 xx xx     	pea	#<L36
  2052 06:922F: 22 xx xx xx  	jsl	~~k_debug_hex
  2053                        ;
  2054                        ;	//k_ide_isbusy();
  2055                        ;
  2056                        ;	return;
  2057                        	.line	542
  2058                        L40:
  2059 06:9233: 2B           	pld
  2060 06:9234: 3B           	tsc
  2061 06:9235: 18           	clc
  2062 06:9236: 69 01 00     	adc	#L37
  Thu Jul 29 2021 11:55                                                Page 42


  2063 06:9239: 1B           	tcs
  2064 06:923A: 6B           	rtl
  2065                        ;}
  2066                        	.line	543
  2067                        	.endblock	543
  2068             00000001   L37	equ	1
  2069             00000001   L38	equ	1
  2070 06:923B:              	ends
  2071                        	efunc
  2072                        	.endfunc	543,1,1
  2073                        	.line	543
  2074                        	data
  2075                        L36:
  2076 00:00D7: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$64,$69,$61,$67,
                    $6E,$6F,$73,$74,$69
       00:00DB: 65 5F 64 69 
       00:00DF: 61 67 6E 6F 
       00:00E3: 73 74 69 
  2077 00:00E6: 63 3A 63 6F  	db	$63,$3A,$63,$6F,$64,$65,$3A,$00
       00:00EA: 64 65 3A 00 
  2078 00:00EE:              	ends
  2079                        ;
  2080                        ;
  2081                        ;void k_ide_init(void)
  2082                        ;{
  2083                        	.line	546
  2084                        	.line	547
  2085                        	FXHDD
  2086                        	xdef	~~k_ide_init
  2087                        	func
  2088                        	.function	547
  2089                        ~~k_ide_init:
  2090                        	longa	on
  2091                        	longi	on
  2092 06:923B: 3B           	tsc
  2093 06:923C: 38           	sec
  2094 06:923D: E9 01 00     	sbc	#L42
  2095 06:9240: 1B           	tcs
  2096 06:9241: 0B           	phd
  2097 06:9242: 5B           	tcd
  2098                        	.block	547
  2099                        ;	UCHAR sts = 0x00;
  2100                        ;
  2101                        ;	//k_ide_diagnostic();
  2102                        ;
  2103                        ;	k_debug_hex("k_ide_init:",0);
  2104             00000000   sts_1	set	0
  2105                        	.sym	sts,0,14,1,8
  2106 06:9243: E2 20        	sep	#$20
  2107                        	longa	off
  2108 06:9245: 64 01        	stz	<L43+sts_1
  2109 06:9247: C2 20        	rep	#$20
  2110                        	longa	on
  2111                        	.line	552
  2112 06:9249: F4 00 00     	pea	#<$0
  2113 06:924C: F4 xx xx     	pea	#^L41
  2114 06:924F: F4 xx xx     	pea	#<L41
  2115 06:9252: 22 xx xx xx  	jsl	~~k_debug_hex
  Thu Jul 29 2021 11:55                                                Page 43


  2116                        ;	IDE_HEAD[0] = 0x06;
  2117                        	.line	553
  2118 06:9256: E2 20        	sep	#$20
  2119                        	longa	off
  2120 06:9258: A9 06        	lda	#$6
  2121 06:925A: 8F 36 E8 AF  	sta	>11528246
  2122 06:925E: C2 20        	rep	#$20
  2123                        	longa	on
  2124                        ;
  2125                        ;
  2126                        ;
  2127                        ;	//IDE_CMD_STAT[0] = 0x08;
  2128                        ;	k_ide_isbusy();
  2129                        	.line	558
  2130 06:9260: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2131                        ;
  2132                        ;	//k_ide_wait();
  2133                        ;	sts = IDE_CMD_STAT[0];
  2134                        	.line	561
  2135 06:9264: E2 20        	sep	#$20
  2136                        	longa	off
  2137 06:9266: AF 37 E8 AF  	lda	>11528247
  2138 06:926A: 85 01        	sta	<L43+sts_1
  2139 06:926C: C2 20        	rep	#$20
  2140                        	longa	on
  2141                        ;	k_debug_bits("k_ide_init:softreset:",sts);
  2142                        	.line	562
  2143 06:926E: D4 01        	pei	<L43+sts_1
  2144 06:9270: F4 xx xx     	pea	#^L41+12
  2145 06:9273: F4 xx xx     	pea	#<L41+12
  2146 06:9276: 22 xx xx xx  	jsl	~~k_debug_bits
  2147                        ;	k_ide_isbusy();
  2148                        	.line	563
  2149 06:927A: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2150                        ;	k_ide_isready();
  2151                        	.line	564
  2152 06:927E: 22 90 90 06  	jsl	~~k_ide_isready
  2153                        ;
  2154                        ;	//k_delay(10);
  2155                        ;	ide_select_drive(ATA_PRIMARY, ATA_MASTER);
  2156                        	.line	567
  2157 06:9282: F4 00 00     	pea	#<$0
  2158 06:9285: F4 00 00     	pea	#<$0
  2159 06:9288: 22 AA 91 06  	jsl	~~ide_select_drive
  2160                        ;
  2161                        ;	//k_debug_hex("k_ide_init:",sts);
  2162                        ;	//k_ide_isbusy();
  2163                        ;
  2164                        ;	IDE_CLDR_HI[0]  = 0;
  2165                        	.line	572
  2166 06:928C: E2 20        	sep	#$20
  2167                        	longa	off
  2168 06:928E: A9 00        	lda	#$0
  2169 06:9290: 8F 35 E8 AF  	sta	>11528245
  2170 06:9294: C2 20        	rep	#$20
  2171                        	longa	on
  2172                        ;	IDE_CLDR_LO[0]  = 0;
  2173                        	.line	573
  Thu Jul 29 2021 11:55                                                Page 44


  2174 06:9296: E2 20        	sep	#$20
  2175                        	longa	off
  2176 06:9298: A9 00        	lda	#$0
  2177 06:929A: 8F 34 E8 AF  	sta	>11528244
  2178 06:929E: C2 20        	rep	#$20
  2179                        	longa	on
  2180                        ;	IDE_SECT_CNT[0] = 0;
  2181                        	.line	574
  2182 06:92A0: E2 20        	sep	#$20
  2183                        	longa	off
  2184 06:92A2: A9 00        	lda	#$0
  2185 06:92A4: 8F 32 E8 AF  	sta	>11528242
  2186 06:92A8: C2 20        	rep	#$20
  2187                        	longa	on
  2188                        ;	IDE_SECT_SRT[0] = 0x01;
  2189                        	.line	575
  2190 06:92AA: E2 20        	sep	#$20
  2191                        	longa	off
  2192 06:92AC: A9 01        	lda	#$1
  2193 06:92AE: 8F 33 E8 AF  	sta	>11528243
  2194 06:92B2: C2 20        	rep	#$20
  2195                        	longa	on
  2196                        ;	IDE_HEAD[0]     = 0xA0;
  2197                        	.line	576
  2198 06:92B4: E2 20        	sep	#$20
  2199                        	longa	off
  2200 06:92B6: A9 A0        	lda	#$a0
  2201 06:92B8: 8F 36 E8 AF  	sta	>11528246
  2202 06:92BC: C2 20        	rep	#$20
  2203                        	longa	on
  2204                        ;
  2205                        ;	//IDE_CMD_STAT[0] = 0x91;
  2206                        ;
  2207                        ;	//sts = IDE_CMD_STAT[0];
  2208                        ;	//k_debug_hex("k_ide_init:",sts);
  2209                        ;
  2210                        ;	//k_ide_isbusy();
  2211                        ;	//k_ide_isready();
  2212                        ;	//k_ide_drive_ready_notbusy();
  2213                        ;
  2214                        ;	return;
  2215                        	.line	587
  2216                        L45:
  2217 06:92BE: 2B           	pld
  2218 06:92BF: 3B           	tsc
  2219 06:92C0: 18           	clc
  2220 06:92C1: 69 01 00     	adc	#L42
  2221 06:92C4: 1B           	tcs
  2222 06:92C5: 6B           	rtl
  2223                        ;}
  2224                        	.line	588
  2225                        	.endblock	588
  2226             00000001   L42	equ	1
  2227             00000001   L43	equ	1
  2228 06:92C6:              	ends
  2229                        	efunc
  2230                        	.endfunc	588,1,1
  2231                        	.line	588
  Thu Jul 29 2021 11:55                                                Page 45


  2232                        	data
  2233                        L41:
  2234 00:00EE: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$6E,$69,$74,
                    $3A,$00,$6B,$5F,$69
       00:00F2: 65 5F 69 6E 
       00:00F6: 69 74 3A 00 
       00:00FA: 6B 5F 69 
  2235 00:00FD: 64 65 5F 69  	db	$64,$65,$5F,$69,$6E,$69,$74,$3A,$73,$6F,
                    $66,$74,$72,$65,$73
       00:0101: 6E 69 74 3A 
       00:0105: 73 6F 66 74 
       00:0109: 72 65 73 
  2236 00:010C: 65 74 3A 00  	db	$65,$74,$3A,$00
  2237 00:0110:              	ends
  2238                        ;
  2239                        ;
  2240                        ;LPCHAR k_ide_get_info(void)
  2241                        ;{
  2242                        	.line	591
  2243                        	.line	592
  2244                        	FXHDD
  2245                        	xdef	~~k_ide_get_info
  2246                        	func
  2247                        	.function	592
  2248                        ~~k_ide_get_info:
  2249                        	longa	on
  2250                        	longi	on
  2251 06:92C6: 3B           	tsc
  2252 06:92C7: 38           	sec
  2253 06:92C8: E9 2B 00     	sbc	#L47
  2254 06:92CB: 1B           	tcs
  2255 06:92CC: 0B           	phd
  2256 06:92CD: 5B           	tcd
  2257                        	.block	592
  2258                        ;	UINT index = 0;
  2259                        ;	UINT data = 0;
  2260                        ;
  2261                        ;	LPCHAR pdata = (LPCHAR)k_mem_allocate_heap(516);
  2262                        ;	UINT *ideInfo = (UINT*)(&pdata[0]);
  2263                        ;
  2264                        ;	UCHAR sts = 0x00;
  2265                        ;	UCHAR lo = 0;
  2266                        ;	UCHAR hi = 0;
  2267                        ;
  2268                        ;	k_debug_bits("k_ide_get_info:bits:",0);
  2269             00000000   index_1	set	0
  2270             00000002   data_1	set	2
  2271             00000004   pdata_1	set	4
  2272             00000008   ideInfo_1	set	8
  2273             0000000C   sts_1	set	12
  2274             0000000D   lo_1	set	13
  2275             0000000E   hi_1	set	14
  2276                        	.sym	index,0,16,1,16
  2277                        	.sym	data,2,16,1,16
  2278                        	.sym	pdata,4,142,1,32
  2279                        	.sym	ideInfo,8,144,1,32
  2280                        	.sym	sts,12,14,1,8
  2281                        	.sym	lo,13,14,1,8
  Thu Jul 29 2021 11:55                                                Page 46


  2282                        	.sym	hi,14,14,1,8
  2283 06:92CE: 64 1D        	stz	<L48+index_1
  2284 06:92D0: 64 1F        	stz	<L48+data_1
  2285 06:92D2: F4 04 02     	pea	#<$204
  2286 06:92D5: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2287 06:92D9: 85 21        	sta	<L48+pdata_1
  2288 06:92DB: 86 23        	stx	<L48+pdata_1+2
  2289 06:92DD: A5 21        	lda	<L48+pdata_1
  2290 06:92DF: 85 25        	sta	<L48+ideInfo_1
  2291 06:92E1: A5 23        	lda	<L48+pdata_1+2
  2292 06:92E3: 85 27        	sta	<L48+ideInfo_1+2
  2293 06:92E5: E2 20        	sep	#$20
  2294                        	longa	off
  2295 06:92E7: 64 29        	stz	<L48+sts_1
  2296 06:92E9: C2 20        	rep	#$20
  2297                        	longa	on
  2298 06:92EB: E2 20        	sep	#$20
  2299                        	longa	off
  2300 06:92ED: 64 2A        	stz	<L48+lo_1
  2301 06:92EF: C2 20        	rep	#$20
  2302                        	longa	on
  2303 06:92F1: E2 20        	sep	#$20
  2304                        	longa	off
  2305 06:92F3: 64 2B        	stz	<L48+hi_1
  2306 06:92F5: C2 20        	rep	#$20
  2307                        	longa	on
  2308                        	.line	603
  2309 06:92F7: F4 00 00     	pea	#<$0
  2310 06:92FA: F4 xx xx     	pea	#^L46
  2311 06:92FD: F4 xx xx     	pea	#<L46
  2312 06:9300: 22 xx xx xx  	jsl	~~k_debug_bits
  2313                        ;
  2314                        ;	FX_ATA_REG_COMMAND[0] = 0;
  2315                        	.line	605
  2316 06:9304: E2 20        	sep	#$20
  2317                        	longa	off
  2318 06:9306: A9 00        	lda	#$0
  2319 06:9308: 8F 37 E8 AF  	sta	>11528247
  2320 06:930C: C2 20        	rep	#$20
  2321                        	longa	on
  2322                        ;
  2323                        ;	k_ide_isbusy();
  2324                        	.line	607
  2325 06:930E: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2326                        ;	k_ide_isready();
  2327                        	.line	608
  2328 06:9312: 22 90 90 06  	jsl	~~k_ide_isready
  2329                        ;
  2330                        ;	FX_ATA_REG_FEATURES[0] = 0;
  2331                        	.line	610
  2332 06:9316: E2 20        	sep	#$20
  2333                        	longa	off
  2334 06:9318: A9 00        	lda	#$0
  2335 06:931A: 8F 31 E8 AF  	sta	>11528241
  2336 06:931E: C2 20        	rep	#$20
  2337                        	longa	on
  2338                        ;	IDE_CLDR_HI[0]  = 0;
  2339                        	.line	611
  Thu Jul 29 2021 11:55                                                Page 47


  2340 06:9320: E2 20        	sep	#$20
  2341                        	longa	off
  2342 06:9322: A9 00        	lda	#$0
  2343 06:9324: 8F 35 E8 AF  	sta	>11528245
  2344 06:9328: C2 20        	rep	#$20
  2345                        	longa	on
  2346                        ;	IDE_CLDR_LO[0]  = 0;
  2347                        	.line	612
  2348 06:932A: E2 20        	sep	#$20
  2349                        	longa	off
  2350 06:932C: A9 00        	lda	#$0
  2351 06:932E: 8F 34 E8 AF  	sta	>11528244
  2352 06:9332: C2 20        	rep	#$20
  2353                        	longa	on
  2354                        ;	IDE_SECT_CNT[0] = 0;
  2355                        	.line	613
  2356 06:9334: E2 20        	sep	#$20
  2357                        	longa	off
  2358 06:9336: A9 00        	lda	#$0
  2359 06:9338: 8F 32 E8 AF  	sta	>11528242
  2360 06:933C: C2 20        	rep	#$20
  2361                        	longa	on
  2362                        ;	IDE_SECT_SRT[0] = 0;
  2363                        	.line	614
  2364 06:933E: E2 20        	sep	#$20
  2365                        	longa	off
  2366 06:9340: A9 00        	lda	#$0
  2367 06:9342: 8F 33 E8 AF  	sta	>11528243
  2368 06:9346: C2 20        	rep	#$20
  2369                        	longa	on
  2370                        ;	IDE_HEAD[0]     = 0xA0;
  2371                        	.line	615
  2372 06:9348: E2 20        	sep	#$20
  2373                        	longa	off
  2374 06:934A: A9 A0        	lda	#$a0
  2375 06:934C: 8F 36 E8 AF  	sta	>11528246
  2376 06:9350: C2 20        	rep	#$20
  2377                        	longa	on
  2378                        ;
  2379                        ;	FX_ATA_REG_COMMAND[0] = ATA_CMD_IDENTIFY;
  2380                        	.line	617
  2381 06:9352: E2 20        	sep	#$20
  2382                        	longa	off
  2383 06:9354: A9 EC        	lda	#$ec
  2384 06:9356: 8F 37 E8 AF  	sta	>11528247
  2385 06:935A: C2 20        	rep	#$20
  2386                        	longa	on
  2387                        ;
  2388                        ;	k_ide_isbusy();
  2389                        	.line	619
  2390 06:935C: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2391                        ;
  2392                        ;
  2393                        ;	k_ide_isready();
  2394                        	.line	622
  2395 06:9360: 22 90 90 06  	jsl	~~k_ide_isready
  2396                        ;
  2397                        ;
  Thu Jul 29 2021 11:55                                                Page 48


  2398                        ;	if(FX_ATA_REG_STATUS[0] & ATA_SR_DRQ)
  2399                        	.line	625
  2400                        ;	{
  2401 06:9364: E2 20        	sep	#$20
  2402                        	longa	off
  2403 06:9366: AF 37 E8 AF  	lda	>11528247
  2404 06:936A: 29 08        	and	#<$8
  2405 06:936C: C2 20        	rep	#$20
  2406                        	longa	on
  2407 06:936E: D0 03        	bne	L50
  2408 06:9370: 82 E8 00     	brl	L10017
  2409                        L50:
  2410                        	.line	626
  2411                        ;		k_debug_bits("k_ide_get_info:bits:",FX_A
                    TA_REG_STATUS[0]);
  2412                        	.line	627
  2413 06:9373: AF 37 E8 AF  	lda	>11528247
  2414 06:9377: 48           	pha
  2415 06:9378: F4 xx xx     	pea	#^L46+21
  2416 06:937B: F4 xx xx     	pea	#<L46+21
  2417 06:937E: 22 xx xx xx  	jsl	~~k_debug_bits
  2418                        ;
  2419                        ;		for(index = 0;index < 256;index++)
  2420                        	.line	629
  2421 06:9382: 64 1D        	stz	<L48+index_1
  2422                        L10020:
  2423                        ;		{
  2424                        	.line	630
  2425                        ;			ideInfo[index] = *((UINT*)&IDE_D
                    ATA_LO[0]);
  2426                        	.line	631
  2427 06:9384: A5 1D        	lda	<L48+index_1
  2428 06:9386: 85 05        	sta	<R1
  2429 06:9388: 64 07        	stz	<R1+2
  2430 06:938A: D4 07        	pei	<R1+2
  2431 06:938C: D4 05        	pei	<R1
  2432 06:938E: A9 01 00     	lda	#$1
  2433                        	xref	~~~lasl
  2434 06:9391: 22 xx xx xx  	jsl	~~~lasl
  2435 06:9395: 85 01        	sta	<R0
  2436 06:9397: 86 03        	stx	<R0+2
  2437 06:9399: 18           	clc
  2438 06:939A: A5 25        	lda	<L48+ideInfo_1
  2439 06:939C: 65 01        	adc	<R0
  2440 06:939E: 85 09        	sta	<R2
  2441 06:93A0: A5 27        	lda	<L48+ideInfo_1+2
  2442 06:93A2: 65 03        	adc	<R0+2
  2443 06:93A4: 85 0B        	sta	<R2+2
  2444 06:93A6: AF 38 E8 AF  	lda	>11528248
  2445 06:93AA: 87 09        	sta	[<R2]
  2446                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2447                        	.line	632
  2448 06:93AC: A5 1D        	lda	<L48+index_1
  2449 06:93AE: 85 05        	sta	<R1
  2450 06:93B0: 64 07        	stz	<R1+2
  2451 06:93B2: D4 07        	pei	<R1+2
  2452 06:93B4: D4 05        	pei	<R1
  Thu Jul 29 2021 11:55                                                Page 49


  2453 06:93B6: A9 01 00     	lda	#$1
  2454                        	xref	~~~lasl
  2455 06:93B9: 22 xx xx xx  	jsl	~~~lasl
  2456 06:93BD: 85 01        	sta	<R0
  2457 06:93BF: 86 03        	stx	<R0+2
  2458 06:93C1: 18           	clc
  2459 06:93C2: A5 25        	lda	<L48+ideInfo_1
  2460 06:93C4: 65 01        	adc	<R0
  2461 06:93C6: 85 09        	sta	<R2
  2462 06:93C8: A5 27        	lda	<L48+ideInfo_1+2
  2463 06:93CA: 65 03        	adc	<R0+2
  2464 06:93CC: 85 0B        	sta	<R2+2
  2465 06:93CE: A5 1D        	lda	<L48+index_1
  2466 06:93D0: 85 0D        	sta	<R3
  2467 06:93D2: 64 0F        	stz	<R3+2
  2468 06:93D4: D4 0F        	pei	<R3+2
  2469 06:93D6: D4 0D        	pei	<R3
  2470 06:93D8: A9 01 00     	lda	#$1
  2471                        	xref	~~~lasl
  2472 06:93DB: 22 xx xx xx  	jsl	~~~lasl
  2473 06:93DF: 85 01        	sta	<R0
  2474 06:93E1: 86 03        	stx	<R0+2
  2475 06:93E3: 18           	clc
  2476 06:93E4: A5 25        	lda	<L48+ideInfo_1
  2477 06:93E6: 65 01        	adc	<R0
  2478 06:93E8: 85 11        	sta	<17
  2479 06:93EA: A5 27        	lda	<L48+ideInfo_1+2
  2480 06:93EC: 65 03        	adc	<R0+2
  2481 06:93EE: 85 13        	sta	<17+2
  2482 06:93F0: A7 11        	lda	[<17]
  2483 06:93F2: EB           	xba
  2484 06:93F3: 29 00 FF     	and	#$ff00
  2485 06:93F6: 29 00 FF     	and	#<$ff00
  2486 06:93F9: 85 01        	sta	<R0
  2487 06:93FB: A5 1D        	lda	<L48+index_1
  2488 06:93FD: 85 15        	sta	<21
  2489 06:93FF: 64 17        	stz	<21+2
  2490 06:9401: D4 17        	pei	<21+2
  2491 06:9403: D4 15        	pei	<21
  2492 06:9405: A9 01 00     	lda	#$1
  2493                        	xref	~~~lasl
  2494 06:9408: 22 xx xx xx  	jsl	~~~lasl
  2495 06:940C: 85 11        	sta	<17
  2496 06:940E: 86 13        	stx	<17+2
  2497 06:9410: 18           	clc
  2498 06:9411: A5 25        	lda	<L48+ideInfo_1
  2499 06:9413: 65 11        	adc	<17
  2500 06:9415: 85 19        	sta	<25
  2501 06:9417: A5 27        	lda	<L48+ideInfo_1+2
  2502 06:9419: 65 13        	adc	<17+2
  2503 06:941B: 85 1B        	sta	<25+2
  2504 06:941D: A7 19        	lda	[<25]
  2505 06:941F: EB           	xba
  2506 06:9420: 29 FF 00     	and	#$00ff
  2507 06:9423: 29 FF 00     	and	#<$ff
  2508 06:9426: 85 11        	sta	<17
  2509 06:9428: A5 11        	lda	<17
  2510 06:942A: 05 01        	ora	<R0
  Thu Jul 29 2021 11:55                                                Page 50


  2511 06:942C: 87 09        	sta	[<R2]
  2512                        ;			//k_debug_bits("k_ide_get_info:b
                    its:",FX_ATA_REG_STATUS[0]);
  2513                        ;			//if(!(FX_ATA_REG_STATUS[0] & AT
                    A_SR_DRQ))
  2514                        ;			//	k_ide_isdrq();
  2515                        ;		}
  2516                        	.line	636
  2517                        L10018:
  2518 06:942E: E6 1D        	inc	<L48+index_1
  2519 06:9430: A5 1D        	lda	<L48+index_1
  2520 06:9432: C9 00 01     	cmp	#<$100
  2521 06:9435: B0 03        	bcs	L51
  2522 06:9437: 82 4A FF     	brl	L10020
  2523                        L51:
  2524                        L10019:
  2525                        ;
  2526                        ;		FX_ATA_REG_HDDEVCTL[0] = 0x06;
  2527                        	.line	638
  2528 06:943A: E2 20        	sep	#$20
  2529                        	longa	off
  2530 06:943C: A9 06        	lda	#$6
  2531 06:943E: 8F 36 E8 AF  	sta	>11528246
  2532 06:9442: C2 20        	rep	#$20
  2533                        	longa	on
  2534                        ;
  2535                        ;
  2536                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",(LPCHAR)pdata,512);
  2537                        	.line	641
  2538 06:9444: F4 00 00     	pea	#^$200
  2539 06:9447: F4 00 02     	pea	#<$200
  2540 06:944A: D4 23        	pei	<L48+pdata_1+2
  2541 06:944C: D4 21        	pei	<L48+pdata_1
  2542 06:944E: F4 xx xx     	pea	#^L46+42
  2543 06:9451: F4 xx xx     	pea	#<L46+42
  2544 06:9454: 22 xx xx xx  	jsl	~~k_debug_byte_array
  2545                        ;	}
  2546                        	.line	642
  2547                        ;	else
  2548 06:9458: 82 04 00     	brl	L10021
  2549                        L10017:
  2550                        ;	{
  2551                        	.line	644
  2552                        ;		pdata = NULL;
  2553                        	.line	645
  2554 06:945B: 64 21        	stz	<L48+pdata_1
  2555 06:945D: 64 23        	stz	<L48+pdata_1+2
  2556                        ;	}
  2557                        	.line	646
  2558                        L10021:
  2559                        ;	return (LPCHAR)pdata;
  2560                        	.line	647
  2561 06:945F: A6 23        	ldx	<L48+pdata_1+2
  2562 06:9461: A5 21        	lda	<L48+pdata_1
  2563                        L52:
  2564 06:9463: A8           	tay
  2565 06:9464: 2B           	pld
  Thu Jul 29 2021 11:55                                                Page 51


  2566 06:9465: 3B           	tsc
  2567 06:9466: 18           	clc
  2568 06:9467: 69 2B 00     	adc	#L47
  2569 06:946A: 1B           	tcs
  2570 06:946B: 98           	tya
  2571 06:946C: 6B           	rtl
  2572                        ;}
  2573                        	.line	648
  2574                        	.endblock	648
  2575             0000002B   L47	equ	43
  2576             0000001D   L48	equ	29
  2577 06:946D:              	ends
  2578                        	efunc
  2579                        	.endfunc	648,29,43
  2580                        	.line	648
  2581                        	data
  2582                        L46:
  2583 00:0110: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$67,$65,$74,$5F,
                    $69,$6E,$66,$6F,$3A
       00:0114: 65 5F 67 65 
       00:0118: 74 5F 69 6E 
       00:011C: 66 6F 3A 
  2584 00:011F: 62 69 74 73  	db	$62,$69,$74,$73,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$67,$65,$74
       00:0123: 3A 00 6B 5F 
       00:0127: 69 64 65 5F 
       00:012B: 67 65 74 
  2585 00:012E: 5F 69 6E 66  	db	$5F,$69,$6E,$66,$6F,$3A,$62,$69,$74,$73,
                    $3A,$00,$6B,$5F,$69
       00:0132: 6F 3A 62 69 
       00:0136: 74 73 3A 00 
       00:013A: 6B 5F 69 
  2586 00:013D: 64 65 5F 67  	db	$64,$65,$5F,$67,$65,$74,$5F,$69,$6E,$66,
                    $6F,$3A,$44,$41,$54
       00:0141: 65 74 5F 69 
       00:0145: 6E 66 6F 3A 
       00:0149: 44 41 54 
  2587 00:014C: 41 3A 0D 0A  	db	$41,$3A,$0D,$0A,$00
       00:0150: 00 
  2588 00:0151:              	ends
  2589                        ;
  2590                        ;LPCHAR k_ide_get_info_old(void)
  2591                        ;{
  2592                        	.line	650
  2593                        	.line	651
  2594                        	FXHDD
  2595                        	xdef	~~k_ide_get_info_old
  2596                        	func
  2597                        	.function	651
  2598                        ~~k_ide_get_info_old:
  2599                        	longa	on
  2600                        	longi	on
  2601 06:946D: 3B           	tsc
  2602 06:946E: 38           	sec
  2603 06:946F: E9 2B 00     	sbc	#L54
  2604 06:9472: 1B           	tcs
  2605 06:9473: 0B           	phd
  2606 06:9474: 5B           	tcd
  Thu Jul 29 2021 11:55                                                Page 52


  2607                        	.block	651
  2608                        ;	UINT index = 0;
  2609                        ;	UINT data = 0;
  2610                        ;	//LPCHAR ideInfo = k_mem_allocate_heap(512);
  2611                        ;
  2612                        ;	//UINT *ideInfo = (UINT*)k_mem_allocate_heap(512
                    );
  2613                        ;
  2614                        ;	LPCHAR pdata = (LPCHAR)k_mem_allocate_heap(516);
  2615                        ;	UINT *ideInfo = (UINT*)(&pdata[0]);
  2616                        ;
  2617                        ;	UCHAR sts = 0x00;
  2618                        ;	UCHAR lo = 0;
  2619                        ;	UCHAR hi = 0;
  2620                        ;
  2621                        ;	k_debug_bits("k_ide_get_info:bits:",0);
  2622             00000000   index_1	set	0
  2623             00000002   data_1	set	2
  2624             00000004   pdata_1	set	4
  2625             00000008   ideInfo_1	set	8
  2626             0000000C   sts_1	set	12
  2627             0000000D   lo_1	set	13
  2628             0000000E   hi_1	set	14
  2629                        	.sym	index,0,16,1,16
  2630                        	.sym	data,2,16,1,16
  2631                        	.sym	pdata,4,142,1,32
  2632                        	.sym	ideInfo,8,144,1,32
  2633                        	.sym	sts,12,14,1,8
  2634                        	.sym	lo,13,14,1,8
  2635                        	.sym	hi,14,14,1,8
  2636 06:9475: 64 1D        	stz	<L55+index_1
  2637 06:9477: 64 1F        	stz	<L55+data_1
  2638 06:9479: F4 04 02     	pea	#<$204
  2639 06:947C: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2640 06:9480: 85 21        	sta	<L55+pdata_1
  2641 06:9482: 86 23        	stx	<L55+pdata_1+2
  2642 06:9484: A5 21        	lda	<L55+pdata_1
  2643 06:9486: 85 25        	sta	<L55+ideInfo_1
  2644 06:9488: A5 23        	lda	<L55+pdata_1+2
  2645 06:948A: 85 27        	sta	<L55+ideInfo_1+2
  2646 06:948C: E2 20        	sep	#$20
  2647                        	longa	off
  2648 06:948E: 64 29        	stz	<L55+sts_1
  2649 06:9490: C2 20        	rep	#$20
  2650                        	longa	on
  2651 06:9492: E2 20        	sep	#$20
  2652                        	longa	off
  2653 06:9494: 64 2A        	stz	<L55+lo_1
  2654 06:9496: C2 20        	rep	#$20
  2655                        	longa	on
  2656 06:9498: E2 20        	sep	#$20
  2657                        	longa	off
  2658 06:949A: 64 2B        	stz	<L55+hi_1
  2659 06:949C: C2 20        	rep	#$20
  2660                        	longa	on
  2661                        	.line	665
  2662 06:949E: F4 00 00     	pea	#<$0
  2663 06:94A1: F4 xx xx     	pea	#^L53
  Thu Jul 29 2021 11:55                                                Page 53


  2664 06:94A4: F4 xx xx     	pea	#<L53
  2665 06:94A7: 22 xx xx xx  	jsl	~~k_debug_bits
  2666                        ;
  2667                        ;	k_ide_isbusy();
  2668                        	.line	667
  2669 06:94AB: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2670                        ;	k_ide_isready();
  2671                        	.line	668
  2672 06:94AF: 22 90 90 06  	jsl	~~k_ide_isready
  2673                        ;
  2674                        ;	//ide_select_drive(ATA_PRIMARY, ATA_MASTER);
  2675                        ;
  2676                        ;	FX_ATA_REG_FEATURES[0] = 0;
  2677                        	.line	672
  2678 06:94B3: E2 20        	sep	#$20
  2679                        	longa	off
  2680 06:94B5: A9 00        	lda	#$0
  2681 06:94B7: 8F 31 E8 AF  	sta	>11528241
  2682 06:94BB: C2 20        	rep	#$20
  2683                        	longa	on
  2684                        ;	IDE_CLDR_HI[0]  = 0;
  2685                        	.line	673
  2686 06:94BD: E2 20        	sep	#$20
  2687                        	longa	off
  2688 06:94BF: A9 00        	lda	#$0
  2689 06:94C1: 8F 35 E8 AF  	sta	>11528245
  2690 06:94C5: C2 20        	rep	#$20
  2691                        	longa	on
  2692                        ;	IDE_CLDR_LO[0]  = 0;
  2693                        	.line	674
  2694 06:94C7: E2 20        	sep	#$20
  2695                        	longa	off
  2696 06:94C9: A9 00        	lda	#$0
  2697 06:94CB: 8F 34 E8 AF  	sta	>11528244
  2698 06:94CF: C2 20        	rep	#$20
  2699                        	longa	on
  2700                        ;	IDE_SECT_CNT[0] = 0;
  2701                        	.line	675
  2702 06:94D1: E2 20        	sep	#$20
  2703                        	longa	off
  2704 06:94D3: A9 00        	lda	#$0
  2705 06:94D5: 8F 32 E8 AF  	sta	>11528242
  2706 06:94D9: C2 20        	rep	#$20
  2707                        	longa	on
  2708                        ;	IDE_SECT_SRT[0] = 0;
  2709                        	.line	676
  2710 06:94DB: E2 20        	sep	#$20
  2711                        	longa	off
  2712 06:94DD: A9 00        	lda	#$0
  2713 06:94DF: 8F 33 E8 AF  	sta	>11528243
  2714 06:94E3: C2 20        	rep	#$20
  2715                        	longa	on
  2716                        ;	IDE_HEAD[0]     = 0xA0;
  2717                        	.line	677
  2718 06:94E5: E2 20        	sep	#$20
  2719                        	longa	off
  2720 06:94E7: A9 A0        	lda	#$a0
  2721 06:94E9: 8F 36 E8 AF  	sta	>11528246
  Thu Jul 29 2021 11:55                                                Page 54


  2722 06:94ED: C2 20        	rep	#$20
  2723                        	longa	on
  2724                        ;
  2725                        ;	FX_ATA_REG_COMMAND[0] = ATA_CMD_IDENTIFY;
  2726                        	.line	679
  2727 06:94EF: E2 20        	sep	#$20
  2728                        	longa	off
  2729 06:94F1: A9 EC        	lda	#$ec
  2730 06:94F3: 8F 37 E8 AF  	sta	>11528247
  2731 06:94F7: C2 20        	rep	#$20
  2732                        	longa	on
  2733                        ;
  2734                        ;	//k_ide_wait();
  2735                        ;	k_ide_isbusy();
  2736                        	.line	682
  2737 06:94F9: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2738                        ;
  2739                        ;	//k_ide_wait();
  2740                        ;
  2741                        ;	//sts = IDE_CMD_STAT[0];
  2742                        ;	//k_debug_hex("k_ide_get_info:sts:initial:",sts)
                    ;
  2743                        ;
  2744                        ;	//k_debug_bits("k_ide_get_info:bits:",sts);
  2745                        ;
  2746                        ;	//k_ide_isbusy();
  2747                        ;	k_ide_isready();
  2748                        	.line	692
  2749 06:94FD: 22 90 90 06  	jsl	~~k_ide_isready
  2750                        ;	//k_ide_isdrq();
  2751                        ;
  2752                        ;	//k_debug_hex("k_ide_get_info:IDE_DATA:",IDE_DAT
                    A[0]);
  2753                        ;	/*
  2754                        ;	k_ide_read_sector(ide_sector);
  2755                        ;	if(ide_sector)
  2756                        ;	{
  2757                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    ",ide_sector,512);
  2758                        ;	}
  2759                        ;	*/
  2760                        ;
  2761                        ;	/*
  2762                        ;	if(sts & FX_ATA_REG_ALTSTATUS[0])
  2763                        ;	{
  2764                        ;		for(index = 0;index < 512;index+=2)
  2765                        ;		{
  2766                        ;			lo = IDE_DATA_LO[0];
  2767                        ;			hi = IDE_DATA_HI[0];
  2768                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2769                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2770                        ;			ideInfo[index] =   lo;
  2771                        ;			ideInfo[index+1] = hi;
  2772                        ;		}
  2773                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",ideInfo,512);
  Thu Jul 29 2021 11:55                                                Page 55


  2774                        ;	}
  2775                        ;	else
  2776                        ;	{
  2777                        ;		ideInfo = NULL;
  2778                        ;	}
  2779                        ;	*/
  2780                        ;
  2781                        ;
  2782                        ;	if(FX_ATA_REG_STATUS[0] & ATA_SR_DRQ)
  2783                        	.line	725
  2784                        ;	{
  2785 06:9501: E2 20        	sep	#$20
  2786                        	longa	off
  2787 06:9503: AF 37 E8 AF  	lda	>11528247
  2788 06:9507: 29 08        	and	#<$8
  2789 06:9509: C2 20        	rep	#$20
  2790                        	longa	on
  2791 06:950B: D0 03        	bne	L57
  2792 06:950D: 82 EC 00     	brl	L10022
  2793                        L57:
  2794                        	.line	726
  2795                        ;		k_debug_bits("k_ide_get_info:bits:",FX_A
                    TA_REG_STATUS[0]);
  2796                        	.line	727
  2797 06:9510: AF 37 E8 AF  	lda	>11528247
  2798 06:9514: 48           	pha
  2799 06:9515: F4 xx xx     	pea	#^L53+21
  2800 06:9518: F4 xx xx     	pea	#<L53+21
  2801 06:951B: 22 xx xx xx  	jsl	~~k_debug_bits
  2802                        ;
  2803                        ;		//lo = IDE_DATA_LO[0];
  2804                        ;		//hi = IDE_DATA_HI[0];
  2805                        ;
  2806                        ;		/*
  2807                        ;		lo = IDE_DATA[0];
  2808                        ;		hi = IDE_DATA[0];
  2809                        ;		k_debug_hex("LO:",lo);
  2810                        ;		k_debug_hex("HI:",hi);
  2811                        ;
  2812                        ;
  2813                        ;		pdata[0] = lo;//MAKEWORD(lo,hi);
  2814                        ;		pdata[1] = hi;//MAKEWORD(lo,hi);
  2815                        ;		*/
  2816                        ;		/*
  2817                        ;		lo = IDE_DATA[0];
  2818                        ;		hi = IDE_DATA[0];
  2819                        ;
  2820                        ;		k_debug_hex("LO:",lo);
  2821                        ;		k_debug_hex("HI:",hi);
  2822                        ;		*/
  2823                        ;
  2824                        ;		/*
  2825                        ;		for(index = 0;index < 256;index++)
  2826                        ;		{
  2827                        ;			//lo = IDE_DATA_LO[0];
  2828                        ;			//hi = IDE_DATA_HI[0];
  2829                        ;
  2830                        ;			ideInfo[index] = *((UINT*)&IDE_D
  Thu Jul 29 2021 11:55                                                Page 56


                    ATA_LO[0]);
  2831                        ;
  2832                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2833                        ;
  2834                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2835                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2836                        ;			//ideInfo[index] =   lo;
  2837                        ;			//ideInfo[index+1] = hi;
  2838                        ;		}
  2839                        ;		*/
  2840                        ;
  2841                        ;		/*
  2842                        ;		for(index = 0;index < 512;index+=2)
  2843                        ;		{
  2844                        ;			pdata[index]   = IDE_DATA_HI[0];
  2845                        ;			pdata[index+1] = IDE_DATA_LO[0];
  2846                        ;			k_debug_bits("k_ide_get_info:bit
                    s:",FX_ATA_REG_STATUS[0]);
  2847                        ;		}
  2848                        ;		*/
  2849                        ;		for(index = 0;index < 256;index++)
  2850                        	.line	775
  2851 06:951F: 64 1D        	stz	<L55+index_1
  2852                        L10025:
  2853                        ;		{
  2854                        	.line	776
  2855                        ;			ideInfo[index] = *((UINT*)&IDE_D
                    ATA_LO[0]);
  2856                        	.line	777
  2857 06:9521: A5 1D        	lda	<L55+index_1
  2858 06:9523: 85 05        	sta	<R1
  2859 06:9525: 64 07        	stz	<R1+2
  2860 06:9527: D4 07        	pei	<R1+2
  2861 06:9529: D4 05        	pei	<R1
  2862 06:952B: A9 01 00     	lda	#$1
  2863                        	xref	~~~lasl
  2864 06:952E: 22 xx xx xx  	jsl	~~~lasl
  2865 06:9532: 85 01        	sta	<R0
  2866 06:9534: 86 03        	stx	<R0+2
  2867 06:9536: 18           	clc
  2868 06:9537: A5 25        	lda	<L55+ideInfo_1
  2869 06:9539: 65 01        	adc	<R0
  2870 06:953B: 85 09        	sta	<R2
  2871 06:953D: A5 27        	lda	<L55+ideInfo_1+2
  2872 06:953F: 65 03        	adc	<R0+2
  2873 06:9541: 85 0B        	sta	<R2+2
  2874 06:9543: AF 38 E8 AF  	lda	>11528248
  2875 06:9547: 87 09        	sta	[<R2]
  2876                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2877                        	.line	778
  2878 06:9549: A5 1D        	lda	<L55+index_1
  2879 06:954B: 85 05        	sta	<R1
  2880 06:954D: 64 07        	stz	<R1+2
  2881 06:954F: D4 07        	pei	<R1+2
  Thu Jul 29 2021 11:55                                                Page 57


  2882 06:9551: D4 05        	pei	<R1
  2883 06:9553: A9 01 00     	lda	#$1
  2884                        	xref	~~~lasl
  2885 06:9556: 22 xx xx xx  	jsl	~~~lasl
  2886 06:955A: 85 01        	sta	<R0
  2887 06:955C: 86 03        	stx	<R0+2
  2888 06:955E: 18           	clc
  2889 06:955F: A5 25        	lda	<L55+ideInfo_1
  2890 06:9561: 65 01        	adc	<R0
  2891 06:9563: 85 09        	sta	<R2
  2892 06:9565: A5 27        	lda	<L55+ideInfo_1+2
  2893 06:9567: 65 03        	adc	<R0+2
  2894 06:9569: 85 0B        	sta	<R2+2
  2895 06:956B: A5 1D        	lda	<L55+index_1
  2896 06:956D: 85 0D        	sta	<R3
  2897 06:956F: 64 0F        	stz	<R3+2
  2898 06:9571: D4 0F        	pei	<R3+2
  2899 06:9573: D4 0D        	pei	<R3
  2900 06:9575: A9 01 00     	lda	#$1
  2901                        	xref	~~~lasl
  2902 06:9578: 22 xx xx xx  	jsl	~~~lasl
  2903 06:957C: 85 01        	sta	<R0
  2904 06:957E: 86 03        	stx	<R0+2
  2905 06:9580: 18           	clc
  2906 06:9581: A5 25        	lda	<L55+ideInfo_1
  2907 06:9583: 65 01        	adc	<R0
  2908 06:9585: 85 11        	sta	<17
  2909 06:9587: A5 27        	lda	<L55+ideInfo_1+2
  2910 06:9589: 65 03        	adc	<R0+2
  2911 06:958B: 85 13        	sta	<17+2
  2912 06:958D: A7 11        	lda	[<17]
  2913 06:958F: EB           	xba
  2914 06:9590: 29 00 FF     	and	#$ff00
  2915 06:9593: 29 00 FF     	and	#<$ff00
  2916 06:9596: 85 01        	sta	<R0
  2917 06:9598: A5 1D        	lda	<L55+index_1
  2918 06:959A: 85 15        	sta	<21
  2919 06:959C: 64 17        	stz	<21+2
  2920 06:959E: D4 17        	pei	<21+2
  2921 06:95A0: D4 15        	pei	<21
  2922 06:95A2: A9 01 00     	lda	#$1
  2923                        	xref	~~~lasl
  2924 06:95A5: 22 xx xx xx  	jsl	~~~lasl
  2925 06:95A9: 85 11        	sta	<17
  2926 06:95AB: 86 13        	stx	<17+2
  2927 06:95AD: 18           	clc
  2928 06:95AE: A5 25        	lda	<L55+ideInfo_1
  2929 06:95B0: 65 11        	adc	<17
  2930 06:95B2: 85 19        	sta	<25
  2931 06:95B4: A5 27        	lda	<L55+ideInfo_1+2
  2932 06:95B6: 65 13        	adc	<17+2
  2933 06:95B8: 85 1B        	sta	<25+2
  2934 06:95BA: A7 19        	lda	[<25]
  2935 06:95BC: EB           	xba
  2936 06:95BD: 29 FF 00     	and	#$00ff
  2937 06:95C0: 29 FF 00     	and	#<$ff
  2938 06:95C3: 85 11        	sta	<17
  2939 06:95C5: A5 11        	lda	<17
  Thu Jul 29 2021 11:55                                                Page 58


  2940 06:95C7: 05 01        	ora	<R0
  2941 06:95C9: 87 09        	sta	[<R2]
  2942                        ;			//k_debug_bits("k_ide_get_info:b
                    its:",FX_ATA_REG_STATUS[0]);
  2943                        ;			//if(!(FX_ATA_REG_STATUS[0] & AT
                    A_SR_DRQ))
  2944                        ;			//	k_ide_isdrq();
  2945                        ;		}
  2946                        	.line	782
  2947                        L10023:
  2948 06:95CB: E6 1D        	inc	<L55+index_1
  2949 06:95CD: A5 1D        	lda	<L55+index_1
  2950 06:95CF: C9 00 01     	cmp	#<$100
  2951 06:95D2: B0 03        	bcs	L58
  2952 06:95D4: 82 4A FF     	brl	L10025
  2953                        L58:
  2954                        L10024:
  2955                        ;
  2956                        ;		/*
  2957                        ;		for(index = 0;index < 256;index++)
  2958                        ;		{
  2959                        ;			lo = IDE_DATA_LO[0];
  2960                        ;			hi = IDE_DATA_HI[0];
  2961                        ;
  2962                        ;			ideInfo[index] = MAKEWORD(lo,hi)
                    ;
  2963                        ;
  2964                        ;			//ideInfo[index] = ((ideInfo[ind
                    ex]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2965                        ;
  2966                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2967                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2968                        ;			//ideInfo[index] =   lo;
  2969                        ;			//ideInfo[index+1] = hi;
  2970                        ;		}
  2971                        ;		*/
  2972                        ;		FX_ATA_REG_HDDEVCTL[0] = 0x06;
  2973                        	.line	800
  2974 06:95D7: E2 20        	sep	#$20
  2975                        	longa	off
  2976 06:95D9: A9 06        	lda	#$6
  2977 06:95DB: 8F 36 E8 AF  	sta	>11528246
  2978 06:95DF: C2 20        	rep	#$20
  2979                        	longa	on
  2980                        ;		k_ide_wait();
  2981                        	.line	801
  2982 06:95E1: 22 0E 96 06  	jsl	~~k_ide_wait
  2983                        ;
  2984                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",(LPCHAR)pdata,512);
  2985                        	.line	803
  2986 06:95E5: F4 00 00     	pea	#^$200
  2987 06:95E8: F4 00 02     	pea	#<$200
  2988 06:95EB: D4 23        	pei	<L55+pdata_1+2
  2989 06:95ED: D4 21        	pei	<L55+pdata_1
  2990 06:95EF: F4 xx xx     	pea	#^L53+42
  Thu Jul 29 2021 11:55                                                Page 59


  2991 06:95F2: F4 xx xx     	pea	#<L53+42
  2992 06:95F5: 22 xx xx xx  	jsl	~~k_debug_byte_array
  2993                        ;	}
  2994                        	.line	804
  2995                        ;	else
  2996 06:95F9: 82 04 00     	brl	L10026
  2997                        L10022:
  2998                        ;	{
  2999                        	.line	806
  3000                        ;		pdata = NULL;
  3001                        	.line	807
  3002 06:95FC: 64 21        	stz	<L55+pdata_1
  3003 06:95FE: 64 23        	stz	<L55+pdata_1+2
  3004                        ;	}
  3005                        	.line	808
  3006                        L10026:
  3007                        ;	return (LPCHAR)pdata;
  3008                        	.line	809
  3009 06:9600: A6 23        	ldx	<L55+pdata_1+2
  3010 06:9602: A5 21        	lda	<L55+pdata_1
  3011                        L59:
  3012 06:9604: A8           	tay
  3013 06:9605: 2B           	pld
  3014 06:9606: 3B           	tsc
  3015 06:9607: 18           	clc
  3016 06:9608: 69 2B 00     	adc	#L54
  3017 06:960B: 1B           	tcs
  3018 06:960C: 98           	tya
  3019 06:960D: 6B           	rtl
  3020                        ;}
  3021                        	.line	810
  3022                        	.endblock	810
  3023             0000002B   L54	equ	43
  3024             0000001D   L55	equ	29
  3025 06:960E:              	ends
  3026                        	efunc
  3027                        	.endfunc	810,29,43
  3028                        	.line	810
  3029                        	data
  3030                        L53:
  3031 00:0151: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$67,$65,$74,$5F,
                    $69,$6E,$66,$6F,$3A
       00:0155: 65 5F 67 65 
       00:0159: 74 5F 69 6E 
       00:015D: 66 6F 3A 
  3032 00:0160: 62 69 74 73  	db	$62,$69,$74,$73,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$67,$65,$74
       00:0164: 3A 00 6B 5F 
       00:0168: 69 64 65 5F 
       00:016C: 67 65 74 
  3033 00:016F: 5F 69 6E 66  	db	$5F,$69,$6E,$66,$6F,$3A,$62,$69,$74,$73,
                    $3A,$00,$6B,$5F,$69
       00:0173: 6F 3A 62 69 
       00:0177: 74 73 3A 00 
       00:017B: 6B 5F 69 
  3034 00:017E: 64 65 5F 67  	db	$64,$65,$5F,$67,$65,$74,$5F,$69,$6E,$66,
                    $6F,$3A,$44,$41,$54
       00:0182: 65 74 5F 69 
  Thu Jul 29 2021 11:55                                                Page 60


       00:0186: 6E 66 6F 3A 
       00:018A: 44 41 54 
  3035 00:018D: 41 3A 0D 0A  	db	$41,$3A,$0D,$0A,$00
       00:0191: 00 
  3036 00:0192:              	ends
  3037                        ;
  3038                        ;
  3039                        ;void k_ide_wait(void)
  3040                        ;{
  3041                        	.line	813
  3042                        	.line	814
  3043                        	FXHDD
  3044                        	xdef	~~k_ide_wait
  3045                        	func
  3046                        	.function	814
  3047                        ~~k_ide_wait:
  3048                        	longa	on
  3049                        	longi	on
  3050 06:960E: 3B           	tsc
  3051 06:960F: 38           	sec
  3052 06:9610: E9 03 00     	sbc	#L61
  3053 06:9613: 1B           	tcs
  3054 06:9614: 0B           	phd
  3055 06:9615: 5B           	tcd
  3056                        	.block	814
  3057                        ;	UINT i = 0;
  3058                        ;	UCHAR status = 0x00;
  3059                        ;
  3060                        ;	//k_debug_string("k_ide_wait...\r\n");
  3061                        ;
  3062                        ;	for(i=0; i< 4; i++)
  3063             00000000   i_1	set	0
  3064             00000002   status_1	set	2
  3065                        	.sym	i,0,16,1,16
  3066                        	.sym	status,2,14,1,8
  3067 06:9616: 64 01        	stz	<L62+i_1
  3068 06:9618: E2 20        	sep	#$20
  3069                        	longa	off
  3070 06:961A: 64 03        	stz	<L62+status_1
  3071 06:961C: C2 20        	rep	#$20
  3072                        	longa	on
  3073                        	.line	820
  3074 06:961E: 64 01        	stz	<L62+i_1
  3075                        L10029:
  3076                        ;	{
  3077                        	.line	821
  3078                        ;		status = IDE_CMD_STAT[0];
  3079                        	.line	822
  3080 06:9620: E2 20        	sep	#$20
  3081                        	longa	off
  3082 06:9622: AF 37 E8 AF  	lda	>11528247
  3083 06:9626: 85 03        	sta	<L62+status_1
  3084 06:9628: C2 20        	rep	#$20
  3085                        	longa	on
  3086                        ;		k_debug_bits("k_ide_wait:bits:",status);
  3087                        	.line	823
  3088 06:962A: D4 03        	pei	<L62+status_1
  3089 06:962C: F4 xx xx     	pea	#^L60
  Thu Jul 29 2021 11:55                                                Page 61


  3090 06:962F: F4 xx xx     	pea	#<L60
  3091 06:9632: 22 xx xx xx  	jsl	~~k_debug_bits
  3092                        ;	}
  3093                        	.line	824
  3094                        L10027:
  3095 06:9636: E6 01        	inc	<L62+i_1
  3096 06:9638: A5 01        	lda	<L62+i_1
  3097 06:963A: C9 04 00     	cmp	#<$4
  3098 06:963D: B0 03        	bcs	L64
  3099 06:963F: 82 DE FF     	brl	L10029
  3100                        L64:
  3101                        L10028:
  3102                        ;}
  3103                        	.line	825
  3104                        L65:
  3105 06:9642: 2B           	pld
  3106 06:9643: 3B           	tsc
  3107 06:9644: 18           	clc
  3108 06:9645: 69 03 00     	adc	#L61
  3109 06:9648: 1B           	tcs
  3110 06:9649: 6B           	rtl
  3111                        	.endblock	825
  3112             00000003   L61	equ	3
  3113             00000001   L62	equ	1
  3114 06:964A:              	ends
  3115                        	efunc
  3116                        	.endfunc	825,1,3
  3117                        	.line	825
  3118                        	data
  3119                        L60:
  3120 00:0192: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$77,$61,$69,$74,
                    $3A,$62,$69,$74,$73
       00:0196: 65 5F 77 61 
       00:019A: 69 74 3A 62 
       00:019E: 69 74 73 
  3121 00:01A1: 3A 00        	db	$3A,$00
  3122 00:01A3:              	ends
  3123                        ;
  3124                        ;void k_ide_poll(UINT io)
  3125                        ;{
  3126                        	.line	827
  3127                        	.line	828
  3128                        	FXHDD
  3129                        	xdef	~~k_ide_poll
  3130                        	func
  3131                        	.function	828
  3132                        ~~k_ide_poll:
  3133                        	longa	on
  3134                        	longi	on
  3135 06:964A: 3B           	tsc
  3136 06:964B: 38           	sec
  3137 06:964C: E9 03 00     	sbc	#L67
  3138 06:964F: 1B           	tcs
  3139 06:9650: 0B           	phd
  3140 06:9651: 5B           	tcd
  3141             00000004   io_0	set	4
  3142                        	.block	828
  3143                        ;	UINT i = 0;
  Thu Jul 29 2021 11:55                                                Page 62


  3144                        ;	UCHAR status = 0x00;
  3145                        ;
  3146                        ;	for(i=0; i< 4; i++)
  3147             00000000   i_1	set	0
  3148             00000002   status_1	set	2
  3149                        	.sym	i,0,16,1,16
  3150                        	.sym	status,2,14,1,8
  3151                        	.sym	io,4,16,6,16
  3152 06:9652: 64 01        	stz	<L68+i_1
  3153 06:9654: E2 20        	sep	#$20
  3154                        	longa	off
  3155 06:9656: 64 03        	stz	<L68+status_1
  3156 06:9658: C2 20        	rep	#$20
  3157                        	longa	on
  3158                        	.line	832
  3159 06:965A: 64 01        	stz	<L68+i_1
  3160                        L10032:
  3161                        ;		status = FX_ATA_REG_STATUS[0];
  3162                        	.line	833
  3163 06:965C: E2 20        	sep	#$20
  3164                        	longa	off
  3165 06:965E: AF 37 E8 AF  	lda	>11528247
  3166 06:9662: 85 03        	sta	<L68+status_1
  3167 06:9664: C2 20        	rep	#$20
  3168                        	longa	on
  3169                        L10030:
  3170 06:9666: E6 01        	inc	<L68+i_1
  3171 06:9668: A5 01        	lda	<L68+i_1
  3172 06:966A: C9 04 00     	cmp	#<$4
  3173 06:966D: B0 03        	bcs	L70
  3174 06:966F: 82 EA FF     	brl	L10032
  3175                        L70:
  3176                        L10031:
  3177                        ;
  3178                        ;retry:;
  3179                        	.line	835
  3180                        L10033:
  3181                        	.line	835
  3182                        ;	status = FX_ATA_REG_STATUS[0];
  3183                        	.line	836
  3184 06:9672: E2 20        	sep	#$20
  3185                        	longa	off
  3186 06:9674: AF 37 E8 AF  	lda	>11528247
  3187 06:9678: 85 03        	sta	<L68+status_1
  3188 06:967A: C2 20        	rep	#$20
  3189                        	longa	on
  3190                        ;	k_debug_string("testing for BSY\r\n");
  3191                        	.line	837
  3192 06:967C: F4 xx xx     	pea	#^L66
  3193 06:967F: F4 xx xx     	pea	#<L66
  3194 06:9682: 22 xx xx xx  	jsl	~~k_debug_string
  3195                        ;	if(status & ATA_SR_BSY) goto retry;
  3196                        	.line	838
  3197 06:9686: E2 20        	sep	#$20
  3198                        	longa	off
  3199 06:9688: A5 03        	lda	<L68+status_1
  3200 06:968A: 29 80        	and	#<$80
  3201 06:968C: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 63


  3202                        	longa	on
  3203 06:968E: F0 03        	beq	L71
  3204 06:9690: 82 DF FF     	brl	L10033
  3205                        L71:
  3206                        ;	k_debug_string("BSY cleared\r\n");
  3207                        	.line	839
  3208 06:9693: F4 xx xx     	pea	#^L66+18
  3209 06:9696: F4 xx xx     	pea	#<L66+18
  3210 06:9699: 22 xx xx xx  	jsl	~~k_debug_string
  3211                        ;
  3212                        ;retry2:	status = FX_ATA_REG_STATUS[0];
  3213                        	.line	841
  3214                        L10034:
  3215                        	.line	841
  3216 06:969D: E2 20        	sep	#$20
  3217                        	longa	off
  3218 06:969F: AF 37 E8 AF  	lda	>11528247
  3219 06:96A3: 85 03        	sta	<L68+status_1
  3220 06:96A5: C2 20        	rep	#$20
  3221                        	longa	on
  3222                        ;	if(status & ATA_SR_ERR)
  3223                        	.line	842
  3224                        ;	{
  3225 06:96A7: E2 20        	sep	#$20
  3226                        	longa	off
  3227 06:96A9: A5 03        	lda	<L68+status_1
  3228 06:96AB: 29 01        	and	#<$1
  3229 06:96AD: C2 20        	rep	#$20
  3230                        	longa	on
  3231 06:96AF: D0 03        	bne	L72
  3232 06:96B1: 82 0C 00     	brl	L10035
  3233                        L72:
  3234                        	.line	843
  3235                        ;		k_debug_hex("k_ide_poll:ATA_SR_ERR:",sta
                    tus);
  3236                        	.line	844
  3237 06:96B4: D4 03        	pei	<L68+status_1
  3238 06:96B6: F4 xx xx     	pea	#^L66+32
  3239 06:96B9: F4 xx xx     	pea	#<L66+32
  3240 06:96BC: 22 xx xx xx  	jsl	~~k_debug_hex
  3241                        ;	}
  3242                        	.line	845
  3243                        ;	k_debug_string("testing for DRQ\r\n");
  3244                        L10035:
  3245                        	.line	846
  3246 06:96C0: F4 xx xx     	pea	#^L66+55
  3247 06:96C3: F4 xx xx     	pea	#<L66+55
  3248 06:96C6: 22 xx xx xx  	jsl	~~k_debug_string
  3249                        ;	if(!(status & ATA_SR_DRQ)) goto retry2;
  3250                        	.line	847
  3251 06:96CA: E2 20        	sep	#$20
  3252                        	longa	off
  3253 06:96CC: A5 03        	lda	<L68+status_1
  3254 06:96CE: 29 08        	and	#<$8
  3255 06:96D0: C2 20        	rep	#$20
  3256                        	longa	on
  3257 06:96D2: D0 03        	bne	L73
  3258 06:96D4: 82 C6 FF     	brl	L10034
  Thu Jul 29 2021 11:55                                                Page 64


  3259                        L73:
  3260                        ;	k_debug_string("DRQ set, ready to PIO!\r\n");
  3261                        	.line	848
  3262 06:96D7: F4 xx xx     	pea	#^L66+73
  3263 06:96DA: F4 xx xx     	pea	#<L66+73
  3264 06:96DD: 22 xx xx xx  	jsl	~~k_debug_string
  3265                        ;	return;
  3266                        	.line	849
  3267                        L74:
  3268 06:96E1: A5 05        	lda	<L67+2
  3269 06:96E3: 85 07        	sta	<L67+2+2
  3270 06:96E5: A5 04        	lda	<L67+1
  3271 06:96E7: 85 06        	sta	<L67+1+2
  3272 06:96E9: 2B           	pld
  3273 06:96EA: 3B           	tsc
  3274 06:96EB: 18           	clc
  3275 06:96EC: 69 05 00     	adc	#L67+2
  3276 06:96EF: 1B           	tcs
  3277 06:96F0: 6B           	rtl
  3278                        ;}
  3279                        	.line	850
  3280                        	.endblock	850
  3281             00000003   L67	equ	3
  3282             00000001   L68	equ	1
  3283 06:96F1:              	ends
  3284                        	efunc
  3285                        	.endfunc	850,1,3
  3286                        	.line	850
  3287                        	data
  3288                        L66:
  3289 00:01A3: 74 65 73 74  	db	$74,$65,$73,$74,$69,$6E,$67,$20,$66,$6F,
                    $72,$20,$42,$53,$59
       00:01A7: 69 6E 67 20 
       00:01AB: 66 6F 72 20 
       00:01AF: 42 53 59 
  3290 00:01B2: 0D 0A 00 42  	db	$0D,$0A,$00,$42,$53,$59,$20,$63,$6C,$65,
                    $61,$72,$65,$64,$0D
       00:01B6: 53 59 20 63 
       00:01BA: 6C 65 61 72 
       00:01BE: 65 64 0D 
  3291 00:01C1: 0A 00 6B 5F  	db	$0A,$00,$6B,$5F,$69,$64,$65,$5F,$70,$6F,
                    $6C,$6C,$3A,$41,$54
       00:01C5: 69 64 65 5F 
       00:01C9: 70 6F 6C 6C 
       00:01CD: 3A 41 54 
  3292 00:01D0: 41 5F 53 52  	db	$41,$5F,$53,$52,$5F,$45,$52,$52,$3A,$00,
                    $74,$65,$73,$74,$69
       00:01D4: 5F 45 52 52 
       00:01D8: 3A 00 74 65 
       00:01DC: 73 74 69 
  3293 00:01DF: 6E 67 20 66  	db	$6E,$67,$20,$66,$6F,$72,$20,$44,$52,$51,
                    $0D,$0A,$00,$44,$52
       00:01E3: 6F 72 20 44 
       00:01E7: 52 51 0D 0A 
       00:01EB: 00 44 52 
  3294 00:01EE: 51 20 73 65  	db	$51,$20,$73,$65,$74,$2C,$20,$72,$65,$61,
                    $64,$79,$20,$74,$6F
       00:01F2: 74 2C 20 72 
  Thu Jul 29 2021 11:55                                                Page 65


       00:01F6: 65 61 64 79 
       00:01FA: 20 74 6F 
  3295 00:01FD: 20 50 49 4F  	db	$20,$50,$49,$4F,$21,$0D,$0A,$00
       00:0201: 21 0D 0A 00 
  3296 00:0205:              	ends
  3297                        ;
  3298                        ;
  3299                        ;
  3300                        ;void k_read_lba_sector(ULONG lba,unsigned char co
                    unt,LPCHAR readBuffer)
  3301                        ;{
  3302                        	.line	854
  3303                        	.line	855
  3304                        	FXHDD
  3305                        	xdef	~~k_read_lba_sector
  3306                        	func
  3307                        	.function	855
  3308                        ~~k_read_lba_sector:
  3309                        	longa	on
  3310                        	longi	on
  3311 06:96F1: 3B           	tsc
  3312 06:96F2: 38           	sec
  3313 06:96F3: E9 16 00     	sbc	#L76
  3314 06:96F6: 1B           	tcs
  3315 06:96F7: 0B           	phd
  3316 06:96F8: 5B           	tcd
  3317             00000004   lba_0	set	4
  3318             00000008   count_0	set	8
  3319             0000000A   readBuffer_0	set	10
  3320                        	.block	855
  3321                        ;	UCHAR sts = 0x00;
  3322                        ;	UCHAR cmd = 0xE0;
  3323                        ;	UCHAR hi;
  3324                        ;	UCHAR lo;
  3325                        ;	UINT  index = 0;
  3326                        ;
  3327                        ;	UINT *pbuffer = (UINT*)readBuffer;
  3328                        ;
  3329                        ;	k_debug_long("READING LBA:",lba);
  3330             00000000   sts_1	set	0
  3331             00000001   cmd_1	set	1
  3332             00000002   hi_1	set	2
  3333             00000003   lo_1	set	3
  3334             00000004   index_1	set	4
  3335             00000006   pbuffer_1	set	6
  3336                        	.sym	sts,0,14,1,8
  3337                        	.sym	cmd,1,14,1,8
  3338                        	.sym	hi,2,14,1,8
  3339                        	.sym	lo,3,14,1,8
  3340                        	.sym	index,4,16,1,16
  3341                        	.sym	pbuffer,6,144,1,32
  3342                        	.sym	lba,4,18,6,32
  3343                        	.sym	count,8,14,6,8
  3344                        	.sym	readBuffer,10,142,6,32
  3345 06:96F9: E2 20        	sep	#$20
  3346                        	longa	off
  3347 06:96FB: 64 0D        	stz	<L77+sts_1
  3348 06:96FD: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 66


  3349                        	longa	on
  3350 06:96FF: E2 20        	sep	#$20
  3351                        	longa	off
  3352 06:9701: A9 E0        	lda	#$e0
  3353 06:9703: 85 0E        	sta	<L77+cmd_1
  3354 06:9705: C2 20        	rep	#$20
  3355                        	longa	on
  3356 06:9707: 64 11        	stz	<L77+index_1
  3357 06:9709: A5 20        	lda	<L76+readBuffer_0
  3358 06:970B: 85 13        	sta	<L77+pbuffer_1
  3359 06:970D: A5 22        	lda	<L76+readBuffer_0+2
  3360 06:970F: 85 15        	sta	<L77+pbuffer_1+2
  3361                        	.line	864
  3362 06:9711: D4 1C        	pei	<L76+lba_0+2
  3363 06:9713: D4 1A        	pei	<L76+lba_0
  3364 06:9715: F4 xx xx     	pea	#^L75
  3365 06:9718: F4 xx xx     	pea	#<L75
  3366 06:971B: 22 xx xx xx  	jsl	~~k_debug_long
  3367                        ;
  3368                        ;	k_ide_isbusy();
  3369                        	.line	866
  3370 06:971F: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  3371                        ;	k_ide_isready();
  3372                        	.line	867
  3373 06:9723: 22 90 90 06  	jsl	~~k_ide_isready
  3374                        ;
  3375                        ;	FX_ATA_REG_HDDEVSEL[0] 	= (cmd | (UCHAR)((lba >>
                     24 & 0x0F)));
  3376                        	.line	869
  3377 06:9727: D4 1C        	pei	<L76+lba_0+2
  3378 06:9729: D4 1A        	pei	<L76+lba_0
  3379 06:972B: A9 18 00     	lda	#$18
  3380                        	xref	~~~llsr
  3381 06:972E: 22 xx xx xx  	jsl	~~~llsr
  3382 06:9732: 85 01        	sta	<R0
  3383 06:9734: 86 03        	stx	<R0+2
  3384 06:9736: A5 01        	lda	<R0
  3385 06:9738: 29 0F 00     	and	#<$f
  3386 06:973B: 85 05        	sta	<R1
  3387 06:973D: 64 07        	stz	<R1+2
  3388 06:973F: E2 20        	sep	#$20
  3389                        	longa	off
  3390 06:9741: A5 0E        	lda	<L77+cmd_1
  3391 06:9743: 05 05        	ora	<R1
  3392 06:9745: 8F 36 E8 AF  	sta	>11528246
  3393 06:9749: C2 20        	rep	#$20
  3394                        	longa	on
  3395                        ;
  3396                        ;	FX_ATA_REG_FEATURES[0] 	= 0x00;
  3397                        	.line	871
  3398 06:974B: E2 20        	sep	#$20
  3399                        	longa	off
  3400 06:974D: A9 00        	lda	#$0
  3401 06:974F: 8F 31 E8 AF  	sta	>11528241
  3402 06:9753: C2 20        	rep	#$20
  3403                        	longa	on
  3404                        ;	FX_ATA_REG_SECCOUNT0[0] = count;
  3405                        	.line	872
  Thu Jul 29 2021 11:55                                                Page 67


  3406 06:9755: E2 20        	sep	#$20
  3407                        	longa	off
  3408 06:9757: A5 1E        	lda	<L76+count_0
  3409 06:9759: 8F 32 E8 AF  	sta	>11528242
  3410 06:975D: C2 20        	rep	#$20
  3411                        	longa	on
  3412                        ;	FX_ATA_REG_LBA0[0] 		= (UCHAR)((lba))
                    ;
  3413                        	.line	873
  3414 06:975F: E2 20        	sep	#$20
  3415                        	longa	off
  3416 06:9761: A5 1A        	lda	<L76+lba_0
  3417 06:9763: 8F 33 E8 AF  	sta	>11528243
  3418 06:9767: C2 20        	rep	#$20
  3419                        	longa	on
  3420                        ;	FX_ATA_REG_LBA1[0] 		= (UCHAR)((lba) 
                    >> 8);
  3421                        	.line	874
  3422 06:9769: D4 1C        	pei	<L76+lba_0+2
  3423 06:976B: D4 1A        	pei	<L76+lba_0
  3424 06:976D: A9 08 00     	lda	#$8
  3425                        	xref	~~~llsr
  3426 06:9770: 22 xx xx xx  	jsl	~~~llsr
  3427 06:9774: 85 01        	sta	<R0
  3428 06:9776: 86 03        	stx	<R0+2
  3429 06:9778: E2 20        	sep	#$20
  3430                        	longa	off
  3431 06:977A: A5 01        	lda	<R0
  3432 06:977C: 8F 34 E8 AF  	sta	>11528244
  3433 06:9780: C2 20        	rep	#$20
  3434                        	longa	on
  3435                        ;	FX_ATA_REG_LBA2[0] 		= (UCHAR)((lba) 
                    >> 16);
  3436                        	.line	875
  3437 06:9782: D4 1C        	pei	<L76+lba_0+2
  3438 06:9784: D4 1A        	pei	<L76+lba_0
  3439 06:9786: A9 10 00     	lda	#$10
  3440                        	xref	~~~llsr
  3441 06:9789: 22 xx xx xx  	jsl	~~~llsr
  3442 06:978D: 85 01        	sta	<R0
  3443 06:978F: 86 03        	stx	<R0+2
  3444 06:9791: E2 20        	sep	#$20
  3445                        	longa	off
  3446 06:9793: A5 01        	lda	<R0
  3447 06:9795: 8F 35 E8 AF  	sta	>11528245
  3448 06:9799: C2 20        	rep	#$20
  3449                        	longa	on
  3450                        ;
  3451                        ;	FX_ATA_REG_COMMAND[0] 	= ATA_CMD_READ_PIO;
  3452                        	.line	877
  3453 06:979B: E2 20        	sep	#$20
  3454                        	longa	off
  3455 06:979D: A9 20        	lda	#$20
  3456 06:979F: 8F 37 E8 AF  	sta	>11528247
  3457 06:97A3: C2 20        	rep	#$20
  3458                        	longa	on
  3459                        ;
  3460                        ;	k_debug_bits("FX_ATA_REG_SECCOUNT0:",count);
  Thu Jul 29 2021 11:55                                                Page 68


  3461                        	.line	879
  3462 06:97A5: D4 1E        	pei	<L76+count_0
  3463 06:97A7: F4 xx xx     	pea	#^L75+13
  3464 06:97AA: F4 xx xx     	pea	#<L75+13
  3465 06:97AD: 22 xx xx xx  	jsl	~~k_debug_bits
  3466                        ;	k_debug_bits("FX_ATA_REG_HDDEVSEL:",(cmd | (UCHA
                    R)((lba >> 24 & 0x0F))));
  3467                        	.line	880
  3468 06:97B1: D4 1C        	pei	<L76+lba_0+2
  3469 06:97B3: D4 1A        	pei	<L76+lba_0
  3470 06:97B5: A9 18 00     	lda	#$18
  3471                        	xref	~~~llsr
  3472 06:97B8: 22 xx xx xx  	jsl	~~~llsr
  3473 06:97BC: 85 01        	sta	<R0
  3474 06:97BE: 86 03        	stx	<R0+2
  3475 06:97C0: A5 01        	lda	<R0
  3476 06:97C2: 29 0F 00     	and	#<$f
  3477 06:97C5: 85 05        	sta	<R1
  3478 06:97C7: 64 07        	stz	<R1+2
  3479 06:97C9: A5 05        	lda	<R1
  3480 06:97CB: 29 FF 00     	and	#$ff
  3481 06:97CE: 85 01        	sta	<R0
  3482 06:97D0: A5 0E        	lda	<L77+cmd_1
  3483 06:97D2: 29 FF 00     	and	#$ff
  3484 06:97D5: 85 05        	sta	<R1
  3485 06:97D7: A5 05        	lda	<R1
  3486 06:97D9: 05 01        	ora	<R0
  3487 06:97DB: 48           	pha
  3488 06:97DC: F4 xx xx     	pea	#^L75+35
  3489 06:97DF: F4 xx xx     	pea	#<L75+35
  3490 06:97E2: 22 xx xx xx  	jsl	~~k_debug_bits
  3491                        ;	k_debug_bits("FX_ATA_REG_LBA0:",(UCHAR)((lba)));
  3492                        	.line	881
  3493 06:97E6: D4 1A        	pei	<L76+lba_0
  3494 06:97E8: F4 xx xx     	pea	#^L75+56
  3495 06:97EB: F4 xx xx     	pea	#<L75+56
  3496 06:97EE: 22 xx xx xx  	jsl	~~k_debug_bits
  3497                        ;	k_debug_bits("FX_ATA_REG_LBA1:",(UCHAR)((lba) >>
                     8));
  3498                        	.line	882
  3499 06:97F2: D4 1C        	pei	<L76+lba_0+2
  3500 06:97F4: D4 1A        	pei	<L76+lba_0
  3501 06:97F6: A9 08 00     	lda	#$8
  3502                        	xref	~~~llsr
  3503 06:97F9: 22 xx xx xx  	jsl	~~~llsr
  3504 06:97FD: 85 01        	sta	<R0
  3505 06:97FF: 86 03        	stx	<R0+2
  3506 06:9801: D4 01        	pei	<R0
  3507 06:9803: F4 xx xx     	pea	#^L75+73
  3508 06:9806: F4 xx xx     	pea	#<L75+73
  3509 06:9809: 22 xx xx xx  	jsl	~~k_debug_bits
  3510                        ;	k_debug_bits("FX_ATA_REG_LBA2:",(UCHAR)((lba) >>
                     16));
  3511                        	.line	883
  3512 06:980D: D4 1C        	pei	<L76+lba_0+2
  3513 06:980F: D4 1A        	pei	<L76+lba_0
  3514 06:9811: A9 10 00     	lda	#$10
  3515                        	xref	~~~llsr
  Thu Jul 29 2021 11:55                                                Page 69


  3516 06:9814: 22 xx xx xx  	jsl	~~~llsr
  3517 06:9818: 85 01        	sta	<R0
  3518 06:981A: 86 03        	stx	<R0+2
  3519 06:981C: D4 01        	pei	<R0
  3520 06:981E: F4 xx xx     	pea	#^L75+90
  3521 06:9821: F4 xx xx     	pea	#<L75+90
  3522 06:9824: 22 xx xx xx  	jsl	~~k_debug_bits
  3523                        ;
  3524                        ;	//k_ide_wait();
  3525                        ;
  3526                        ;	k_ide_isbusy();
  3527                        	.line	887
  3528 06:9828: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  3529                        ;	k_ide_isdrq();
  3530                        	.line	888
  3531 06:982C: 22 24 91 06  	jsl	~~k_ide_isdrq
  3532                        ;
  3533                        ;	index = *((UINT*)&IDE_DATA_LO[0]);
  3534                        	.line	890
  3535 06:9830: AF 38 E8 AF  	lda	>11528248
  3536 06:9834: 85 11        	sta	<L77+index_1
  3537                        ;
  3538                        ;	for(index = 0;index < 256;index++)
  3539                        	.line	892
  3540 06:9836: 64 11        	stz	<L77+index_1
  3541                        L10038:
  3542                        ;	{
  3543                        	.line	893
  3544                        ;		pbuffer[index] = *((UINT*)&IDE_DATA_LO[0
                    ]);
  3545                        	.line	894
  3546 06:9838: A5 11        	lda	<L77+index_1
  3547 06:983A: 85 05        	sta	<R1
  3548 06:983C: 64 07        	stz	<R1+2
  3549 06:983E: D4 07        	pei	<R1+2
  3550 06:9840: D4 05        	pei	<R1
  3551 06:9842: A9 01 00     	lda	#$1
  3552                        	xref	~~~lasl
  3553 06:9845: 22 xx xx xx  	jsl	~~~lasl
  3554 06:9849: 85 01        	sta	<R0
  3555 06:984B: 86 03        	stx	<R0+2
  3556 06:984D: 18           	clc
  3557 06:984E: A5 13        	lda	<L77+pbuffer_1
  3558 06:9850: 65 01        	adc	<R0
  3559 06:9852: 85 09        	sta	<R2
  3560 06:9854: A5 15        	lda	<L77+pbuffer_1+2
  3561 06:9856: 65 03        	adc	<R0+2
  3562 06:9858: 85 0B        	sta	<R2+2
  3563 06:985A: AF 38 E8 AF  	lda	>11528248
  3564 06:985E: 87 09        	sta	[<R2]
  3565                        ;		//pbuffer[index] = ((pbuffer[index]<<8)&
                    0xff00)|((pbuffer[index]>>8)&0x00ff);
  3566                        ;	}
  3567                        	.line	896
  3568                        L10036:
  3569 06:9860: E6 11        	inc	<L77+index_1
  3570 06:9862: A5 11        	lda	<L77+index_1
  3571 06:9864: C9 00 01     	cmp	#<$100
  Thu Jul 29 2021 11:55                                                Page 70


  3572 06:9867: B0 03        	bcs	L79
  3573 06:9869: 82 CC FF     	brl	L10038
  3574                        L79:
  3575                        L10037:
  3576                        ;
  3577                        ;	return;
  3578                        	.line	898
  3579                        L80:
  3580 06:986C: A5 18        	lda	<L76+2
  3581 06:986E: 85 22        	sta	<L76+2+10
  3582 06:9870: A5 17        	lda	<L76+1
  3583 06:9872: 85 21        	sta	<L76+1+10
  3584 06:9874: 2B           	pld
  3585 06:9875: 3B           	tsc
  3586 06:9876: 18           	clc
  3587 06:9877: 69 20 00     	adc	#L76+10
  3588 06:987A: 1B           	tcs
  3589 06:987B: 6B           	rtl
  3590                        ;}
  3591                        	.line	899
  3592                        	.endblock	899
  3593             00000016   L76	equ	22
  3594             0000000D   L77	equ	13
  3595 06:987C:              	ends
  3596                        	efunc
  3597                        	.endfunc	899,13,22
  3598                        	.line	899
  3599                        	data
  3600                        L75:
  3601 00:0205: 52 45 41 44  	db	$52,$45,$41,$44,$49,$4E,$47,$20,$4C,$42,
                    $41,$3A,$00,$46,$58
       00:0209: 49 4E 47 20 
       00:020D: 4C 42 41 3A 
       00:0211: 00 46 58 
  3602 00:0214: 5F 41 54 41  	db	$5F,$41,$54,$41,$5F,$52,$45,$47,$5F,$53,
                    $45,$43,$43,$4F,$55
       00:0218: 5F 52 45 47 
       00:021C: 5F 53 45 43 
       00:0220: 43 4F 55 
  3603 00:0223: 4E 54 30 3A  	db	$4E,$54,$30,$3A,$00,$46,$58,$5F,$41,$54,
                    $41,$5F,$52,$45,$47
       00:0227: 00 46 58 5F 
       00:022B: 41 54 41 5F 
       00:022F: 52 45 47 
  3604 00:0232: 5F 48 44 44  	db	$5F,$48,$44,$44,$45,$56,$53,$45,$4C,$3A,
                    $00,$46,$58,$5F,$41
       00:0236: 45 56 53 45 
       00:023A: 4C 3A 00 46 
       00:023E: 58 5F 41 
  3605 00:0241: 54 41 5F 52  	db	$54,$41,$5F,$52,$45,$47,$5F,$4C,$42,$41,
                    $30,$3A,$00,$46,$58
       00:0245: 45 47 5F 4C 
       00:0249: 42 41 30 3A 
       00:024D: 00 46 58 
  3606 00:0250: 5F 41 54 41  	db	$5F,$41,$54,$41,$5F,$52,$45,$47,$5F,$4C,
                    $42,$41,$31,$3A,$00
       00:0254: 5F 52 45 47 
       00:0258: 5F 4C 42 41 
  Thu Jul 29 2021 11:55                                                Page 71


       00:025C: 31 3A 00 
  3607 00:025F: 46 58 5F 41  	db	$46,$58,$5F,$41,$54,$41,$5F,$52,$45,$47,
                    $5F,$4C,$42,$41,$32
       00:0263: 54 41 5F 52 
       00:0267: 45 47 5F 4C 
       00:026B: 42 41 32 
  3608 00:026E: 3A 00        	db	$3A,$00
  3609 00:0270:              	ends
  3610                        ;
  3611                        ;
  3612                        ;void k_read_lba_sector_old(ULONG lba,unsigned cha
                    r count,LPCHAR readBuffer)
  3613                        ;{
  3614                        	.line	902
  3615                        	.line	903
  3616                        	FXHDD
  3617                        	xdef	~~k_read_lba_sector_old
  3618                        	func
  3619                        	.function	903
  3620                        ~~k_read_lba_sector_old:
  3621                        	longa	on
  3622                        	longi	on
  3623 06:987C: 3B           	tsc
  3624 06:987D: 38           	sec
  3625 06:987E: E9 0E 00     	sbc	#L82
  3626 06:9881: 1B           	tcs
  3627 06:9882: 0B           	phd
  3628 06:9883: 5B           	tcd
  3629             00000004   lba_0	set	4
  3630             00000008   count_0	set	8
  3631             0000000A   readBuffer_0	set	10
  3632                        	.block	903
  3633                        ;	UCHAR sts = 0x00;
  3634                        ;	UCHAR cmd = 0xE0;
  3635                        ;	UCHAR hi;
  3636                        ;	UCHAR lo;
  3637                        ;	UINT  index = 0;
  3638                        ;	//LPCHAR lbaBytes = (LPCHAR)&lba;
  3639                        ;	k_debug_long("k_read_lba_sector:",lba);
  3640             00000000   sts_1	set	0
  3641             00000001   cmd_1	set	1
  3642             00000002   hi_1	set	2
  3643             00000003   lo_1	set	3
  3644             00000004   index_1	set	4
  3645                        	.sym	sts,0,14,1,8
  3646                        	.sym	cmd,1,14,1,8
  3647                        	.sym	hi,2,14,1,8
  3648                        	.sym	lo,3,14,1,8
  3649                        	.sym	index,4,16,1,16
  3650                        	.sym	lba,4,18,6,32
  3651                        	.sym	count,8,14,6,8
  3652                        	.sym	readBuffer,10,142,6,32
  3653 06:9884: E2 20        	sep	#$20
  3654                        	longa	off
  3655 06:9886: 64 09        	stz	<L83+sts_1
  3656 06:9888: C2 20        	rep	#$20
  3657                        	longa	on
  3658 06:988A: E2 20        	sep	#$20
  Thu Jul 29 2021 11:55                                                Page 72


  3659                        	longa	off
  3660 06:988C: A9 E0        	lda	#$e0
  3661 06:988E: 85 0A        	sta	<L83+cmd_1
  3662 06:9890: C2 20        	rep	#$20
  3663                        	longa	on
  3664 06:9892: 64 0D        	stz	<L83+index_1
  3665                        	.line	910
  3666 06:9894: D4 14        	pei	<L82+lba_0+2
  3667 06:9896: D4 12        	pei	<L82+lba_0
  3668 06:9898: F4 xx xx     	pea	#^L81
  3669 06:989B: F4 xx xx     	pea	#<L81
  3670 06:989E: 22 xx xx xx  	jsl	~~k_debug_long
  3671                        ;
  3672                        ;	//ide_select_drive(ATA_PRIMARY,ATA_MASTER);
  3673                        ;
  3674                        ;	k_ide_isbusy();
  3675                        	.line	914
  3676 06:98A2: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  3677                        ;
  3678                        ;	/*
  3679                        ;	IDE_SECT_CNT[0]  = count;
  3680                        ;
  3681                        ;	IDE_HEAD[0]  	 = lbaBytes[3];
  3682                        ;	IDE_SECT_SRT[0]  = lbaBytes[0];
  3683                        ;	IDE_CLDR_LO[0]   = lbaBytes[1];
  3684                        ;	IDE_CLDR_HI[0]   = lbaBytes[2];
  3685                        ;	*/
  3686                        ;	//FX_ATA_REG_HDDEVSEL[0] 	= 0xA0;
  3687                        ;
  3688                        ;	//k_ide_isbusy();
  3689                        ;	//k_ide_isready();
  3690                        ;
  3691                        ;
  3692                        ;	k_ide_isready();
  3693                        	.line	930
  3694 06:98A6: 22 90 90 06  	jsl	~~k_ide_isready
  3695                        ;
  3696                        ;	FX_ATA_REG_HDDEVSEL[0] 	= (cmd | (UCHAR)((lba >>
                     24 & 0x0F)));
  3697                        	.line	932
  3698 06:98AA: D4 14        	pei	<L82+lba_0+2
  3699 06:98AC: D4 12        	pei	<L82+lba_0
  3700 06:98AE: A9 18 00     	lda	#$18
  3701                        	xref	~~~llsr
  3702 06:98B1: 22 xx xx xx  	jsl	~~~llsr
  3703 06:98B5: 85 01        	sta	<R0
  3704 06:98B7: 86 03        	stx	<R0+2
  3705 06:98B9: A5 01        	lda	<R0
  3706 06:98BB: 29 0F 00     	and	#<$f
  3707 06:98BE: 85 05        	sta	<R1
  3708 06:98C0: 64 07        	stz	<R1+2
  3709 06:98C2: E2 20        	sep	#$20
  3710                        	longa	off
  3711 06:98C4: A5 0A        	lda	<L83+cmd_1
  3712 06:98C6: 05 05        	ora	<R1
  3713 06:98C8: 8F 36 E8 AF  	sta	>11528246
  3714 06:98CC: C2 20        	rep	#$20
  3715                        	longa	on
  Thu Jul 29 2021 11:55                                                Page 73


  3716                        ;
  3717                        ;
  3718                        ;
  3719                        ;	FX_ATA_REG_FEATURES[0] 	= 0x00;
  3720                        	.line	936
  3721 06:98CE: E2 20        	sep	#$20
  3722                        	longa	off
  3723 06:98D0: A9 00        	lda	#$0
  3724 06:98D2: 8F 31 E8 AF  	sta	>11528241
  3725 06:98D6: C2 20        	rep	#$20
  3726                        	longa	on
  3727                        ;	FX_ATA_REG_SECCOUNT0[0] = count;
  3728                        	.line	937
  3729 06:98D8: E2 20        	sep	#$20
  3730                        	longa	off
  3731 06:98DA: A5 16        	lda	<L82+count_0
  3732 06:98DC: 8F 32 E8 AF  	sta	>11528242
  3733 06:98E0: C2 20        	rep	#$20
  3734                        	longa	on
  3735                        ;	FX_ATA_REG_LBA0[0] 		= (UCHAR)((lba))
                    ;
  3736                        	.line	938
  3737 06:98E2: E2 20        	sep	#$20
  3738                        	longa	off
  3739 06:98E4: A5 12        	lda	<L82+lba_0
  3740 06:98E6: 8F 33 E8 AF  	sta	>11528243
  3741 06:98EA: C2 20        	rep	#$20
  3742                        	longa	on
  3743                        ;	FX_ATA_REG_LBA1[0] 		= (UCHAR)((lba) 
                    >> 8);
  3744                        	.line	939
  3745 06:98EC: D4 14        	pei	<L82+lba_0+2
  3746 06:98EE: D4 12        	pei	<L82+lba_0
  3747 06:98F0: A9 08 00     	lda	#$8
  3748                        	xref	~~~llsr
  3749 06:98F3: 22 xx xx xx  	jsl	~~~llsr
  3750 06:98F7: 85 01        	sta	<R0
  3751 06:98F9: 86 03        	stx	<R0+2
  3752 06:98FB: E2 20        	sep	#$20
  3753                        	longa	off
  3754 06:98FD: A5 01        	lda	<R0
  3755 06:98FF: 8F 34 E8 AF  	sta	>11528244
  3756 06:9903: C2 20        	rep	#$20
  3757                        	longa	on
  3758                        ;	FX_ATA_REG_LBA2[0] 		= (UCHAR)((lba) 
                    >> 16);
  3759                        	.line	940
  3760 06:9905: D4 14        	pei	<L82+lba_0+2
  3761 06:9907: D4 12        	pei	<L82+lba_0
  3762 06:9909: A9 10 00     	lda	#$10
  3763                        	xref	~~~llsr
  3764 06:990C: 22 xx xx xx  	jsl	~~~llsr
  3765 06:9910: 85 01        	sta	<R0
  3766 06:9912: 86 03        	stx	<R0+2
  3767 06:9914: E2 20        	sep	#$20
  3768                        	longa	off
  3769 06:9916: A5 01        	lda	<R0
  3770 06:9918: 8F 35 E8 AF  	sta	>11528245
  Thu Jul 29 2021 11:55                                                Page 74


  3771 06:991C: C2 20        	rep	#$20
  3772                        	longa	on
  3773                        ;
  3774                        ;	FX_ATA_REG_COMMAND[0] 	= ATA_CMD_READ_PIO;
  3775                        	.line	942
  3776 06:991E: E2 20        	sep	#$20
  3777                        	longa	off
  3778 06:9920: A9 20        	lda	#$20
  3779 06:9922: 8F 37 E8 AF  	sta	>11528247
  3780 06:9926: C2 20        	rep	#$20
  3781                        	longa	on
  3782                        ;
  3783                        ;	k_debug_bits("FX_ATA_REG_SECCOUNT0:",count);
  3784                        	.line	944
  3785 06:9928: D4 16        	pei	<L82+count_0
  3786 06:992A: F4 xx xx     	pea	#^L81+19
  3787 06:992D: F4 xx xx     	pea	#<L81+19
  3788 06:9930: 22 xx xx xx  	jsl	~~k_debug_bits
  3789                        ;	k_debug_bits("FX_ATA_REG_HDDEVSEL:",(cmd | (UCHA
                    R)((lba >> 24 & 0x0F))));
  3790                        	.line	945
  3791 06:9934: D4 14        	pei	<L82+lba_0+2
  3792 06:9936: D4 12        	pei	<L82+lba_0
  3793 06:9938: A9 18 00     	lda	#$18
  3794                        	xref	~~~llsr
  3795 06:993B: 22 xx xx xx  	jsl	~~~llsr
  3796 06:993F: 85 01        	sta	<R0
  3797 06:9941: 86 03        	stx	<R0+2
  3798 06:9943: A5 01        	lda	<R0
  3799 06:9945: 29 0F 00     	and	#<$f
  3800 06:9948: 85 05        	sta	<R1
  3801 06:994A: 64 07        	stz	<R1+2
  3802 06:994C: A5 05        	lda	<R1
  3803 06:994E: 29 FF 00     	and	#$ff
  3804 06:9951: 85 01        	sta	<R0
  3805 06:9953: A5 0A        	lda	<L83+cmd_1
  3806 06:9955: 29 FF 00     	and	#$ff
  3807 06:9958: 85 05        	sta	<R1
  3808 06:995A: A5 05        	lda	<R1
  3809 06:995C: 05 01        	ora	<R0
  3810 06:995E: 48           	pha
  3811 06:995F: F4 xx xx     	pea	#^L81+41
  3812 06:9962: F4 xx xx     	pea	#<L81+41
  3813 06:9965: 22 xx xx xx  	jsl	~~k_debug_bits
  3814                        ;	k_debug_bits("FX_ATA_REG_LBA0:",(UCHAR)((lba)));
  3815                        	.line	946
  3816 06:9969: D4 12        	pei	<L82+lba_0
  3817 06:996B: F4 xx xx     	pea	#^L81+62
  3818 06:996E: F4 xx xx     	pea	#<L81+62
  3819 06:9971: 22 xx xx xx  	jsl	~~k_debug_bits
  3820                        ;	k_debug_bits("FX_ATA_REG_LBA1:",(UCHAR)((lba) >>
                     8));
  3821                        	.line	947
  3822 06:9975: D4 14        	pei	<L82+lba_0+2
  3823 06:9977: D4 12        	pei	<L82+lba_0
  3824 06:9979: A9 08 00     	lda	#$8
  3825                        	xref	~~~llsr
  3826 06:997C: 22 xx xx xx  	jsl	~~~llsr
  Thu Jul 29 2021 11:55                                                Page 75


  3827 06:9980: 85 01        	sta	<R0
  3828 06:9982: 86 03        	stx	<R0+2
  3829 06:9984: D4 01        	pei	<R0
  3830 06:9986: F4 xx xx     	pea	#^L81+79
  3831 06:9989: F4 xx xx     	pea	#<L81+79
  3832 06:998C: 22 xx xx xx  	jsl	~~k_debug_bits
  3833                        ;	k_debug_bits("FX_ATA_REG_LBA2:",(UCHAR)((lba) >>
                     16));
  3834                        	.line	948
  3835 06:9990: D4 14        	pei	<L82+lba_0+2
  3836 06:9992: D4 12        	pei	<L82+lba_0
  3837 06:9994: A9 10 00     	lda	#$10
  3838                        	xref	~~~llsr
  3839 06:9997: 22 xx xx xx  	jsl	~~~llsr
  3840 06:999B: 85 01        	sta	<R0
  3841 06:999D: 86 03        	stx	<R0+2
  3842 06:999F: D4 01        	pei	<R0
  3843 06:99A1: F4 xx xx     	pea	#^L81+96
  3844 06:99A4: F4 xx xx     	pea	#<L81+96
  3845 06:99A7: 22 xx xx xx  	jsl	~~k_debug_bits
  3846                        ;
  3847                        ;
  3848                        ;	k_ide_isbusy();
  3849                        	.line	951
  3850 06:99AB: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  3851                        ;
  3852                        ;	k_ide_isdrq();
  3853                        	.line	953
  3854 06:99AF: 22 24 91 06  	jsl	~~k_ide_isdrq
  3855                        ;
  3856                        ;	/*
  3857                        ;	IDE_CMD_STAT[0] = 0x20;
  3858                        ;
  3859                        ;	k_ide_busy();
  3860                        ;
  3861                        ;	sts = IDE_CMD_STAT[0];
  3862                        ;	k_debug_hex("k_read_lba_sector:",sts);
  3863                        ;	*/
  3864                        ;
  3865                        ;	//k_ide_drive_ready_notbusy();
  3866                        ;	//k_ide_not_drq();
  3867                        ;
  3868                        ;
  3869                        ;	//k_ide_read_sector(readBuffer);
  3870                        ;
  3871                        ;	for(index = 0;index < 512;index+=2)
  3872                        	.line	970
  3873 06:99B3: 64 0D        	stz	<L83+index_1
  3874                        L10041:
  3875                        ;	{
  3876                        	.line	971
  3877                        ;		lo = IDE_DATA_LO[0];
  3878                        	.line	972
  3879 06:99B5: E2 20        	sep	#$20
  3880                        	longa	off
  3881 06:99B7: AF 38 E8 AF  	lda	>11528248
  3882 06:99BB: 85 0C        	sta	<L83+lo_1
  3883 06:99BD: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 76


  3884                        	longa	on
  3885                        ;		hi = IDE_DATA_HI[0];
  3886                        	.line	973
  3887 06:99BF: E2 20        	sep	#$20
  3888                        	longa	off
  3889 06:99C1: AF 39 E8 AF  	lda	>11528249
  3890 06:99C5: 85 0B        	sta	<L83+hi_1
  3891 06:99C7: C2 20        	rep	#$20
  3892                        	longa	on
  3893                        ;		//k_debug_hex("k_ide_read_sector:lo:",lo
                    );
  3894                        ;		//k_debug_hex("k_ide_read_sector:hi:",hi
                    );
  3895                        ;		readBuffer[index] =   hi;
  3896                        	.line	976
  3897 06:99C9: E2 20        	sep	#$20
  3898                        	longa	off
  3899 06:99CB: A5 0B        	lda	<L83+hi_1
  3900 06:99CD: A4 0D        	ldy	<L83+index_1
  3901 06:99CF: 97 18        	sta	[<L82+readBuffer_0],Y
  3902 06:99D1: C2 20        	rep	#$20
  3903                        	longa	on
  3904                        ;		readBuffer[index+1] = lo;
  3905                        	.line	977
  3906 06:99D3: A5 0D        	lda	<L83+index_1
  3907 06:99D5: 1A           	ina
  3908 06:99D6: 85 01        	sta	<R0
  3909 06:99D8: E2 20        	sep	#$20
  3910                        	longa	off
  3911 06:99DA: A5 0C        	lda	<L83+lo_1
  3912 06:99DC: A4 01        	ldy	<R0
  3913 06:99DE: 97 18        	sta	[<L82+readBuffer_0],Y
  3914 06:99E0: C2 20        	rep	#$20
  3915                        	longa	on
  3916                        ;	}
  3917                        	.line	978
  3918                        L10039:
  3919 06:99E2: E6 0D        	inc	<L83+index_1
  3920 06:99E4: E6 0D        	inc	<L83+index_1
  3921 06:99E6: A5 0D        	lda	<L83+index_1
  3922 06:99E8: C9 00 02     	cmp	#<$200
  3923 06:99EB: B0 03        	bcs	L85
  3924 06:99ED: 82 C5 FF     	brl	L10041
  3925                        L85:
  3926                        L10040:
  3927                        ;
  3928                        ;
  3929                        ;
  3930                        ;	return;
  3931                        	.line	982
  3932                        L86:
  3933 06:99F0: A5 10        	lda	<L82+2
  3934 06:99F2: 85 1A        	sta	<L82+2+10
  3935 06:99F4: A5 0F        	lda	<L82+1
  3936 06:99F6: 85 19        	sta	<L82+1+10
  3937 06:99F8: 2B           	pld
  3938 06:99F9: 3B           	tsc
  3939 06:99FA: 18           	clc
  Thu Jul 29 2021 11:55                                                Page 77


  3940 06:99FB: 69 18 00     	adc	#L82+10
  3941 06:99FE: 1B           	tcs
  3942 06:99FF: 6B           	rtl
  3943                        ;}
  3944                        	.line	983
  3945                        	.endblock	983
  3946             0000000E   L82	equ	14
  3947             00000009   L83	equ	9
  3948 06:9A00:              	ends
  3949                        	efunc
  3950                        	.endfunc	983,9,14
  3951                        	.line	983
  3952                        	data
  3953                        L81:
  3954 00:0270: 6B 5F 72 65  	db	$6B,$5F,$72,$65,$61,$64,$5F,$6C,$62,$61,
                    $5F,$73,$65,$63,$74
       00:0274: 61 64 5F 6C 
       00:0278: 62 61 5F 73 
       00:027C: 65 63 74 
  3955 00:027F: 6F 72 3A 00  	db	$6F,$72,$3A,$00,$46,$58,$5F,$41,$54,$41,
                    $5F,$52,$45,$47,$5F
       00:0283: 46 58 5F 41 
       00:0287: 54 41 5F 52 
       00:028B: 45 47 5F 
  3956 00:028E: 53 45 43 43  	db	$53,$45,$43,$43,$4F,$55,$4E,$54,$30,$3A,
                    $00,$46,$58,$5F,$41
       00:0292: 4F 55 4E 54 
       00:0296: 30 3A 00 46 
       00:029A: 58 5F 41 
  3957 00:029D: 54 41 5F 52  	db	$54,$41,$5F,$52,$45,$47,$5F,$48,$44,$44,
                    $45,$56,$53,$45,$4C
       00:02A1: 45 47 5F 48 
       00:02A5: 44 44 45 56 
       00:02A9: 53 45 4C 
  3958 00:02AC: 3A 00 46 58  	db	$3A,$00,$46,$58,$5F,$41,$54,$41,$5F,$52,
                    $45,$47,$5F,$4C,$42
       00:02B0: 5F 41 54 41 
       00:02B4: 5F 52 45 47 
       00:02B8: 5F 4C 42 
  3959 00:02BB: 41 30 3A 00  	db	$41,$30,$3A,$00,$46,$58,$5F,$41,$54,$41,
                    $5F,$52,$45,$47,$5F
       00:02BF: 46 58 5F 41 
       00:02C3: 54 41 5F 52 
       00:02C7: 45 47 5F 
  3960 00:02CA: 4C 42 41 31  	db	$4C,$42,$41,$31,$3A,$00,$46,$58,$5F,$41,
                    $54,$41,$5F,$52,$45
       00:02CE: 3A 00 46 58 
       00:02D2: 5F 41 54 41 
       00:02D6: 5F 52 45 
  3961 00:02D9: 47 5F 4C 42  	db	$47,$5F,$4C,$42,$41,$32,$3A,$00
       00:02DD: 41 32 3A 00 
  3962 00:02E1:              	ends
  3963                        ;
  3964                        ;/**
  3965                        ; *
  3966                        ; */
  3967                        ;
  3968                        ;UCHAR k_read_hd_sector(unsigned long offset,LPCHA
  Thu Jul 29 2021 11:55                                                Page 78


                    R receiveBuffer)
  3969                        ;{
  3970                        	.line	989
  3971                        	.line	990
  3972                        	FXHDD
  3973                        	xdef	~~k_read_hd_sector
  3974                        	func
  3975                        	.function	990
  3976                        ~~k_read_hd_sector:
  3977                        	longa	on
  3978                        	longi	on
  3979 06:9A00: 3B           	tsc
  3980 06:9A01: 38           	sec
  3981 06:9A02: E9 04 00     	sbc	#L88
  3982 06:9A05: 1B           	tcs
  3983 06:9A06: 0B           	phd
  3984 06:9A07: 5B           	tcd
  3985             00000004   offset_0	set	4
  3986             00000008   receiveBuffer_0	set	8
  3987                        	.block	990
  3988                        ;	k_read_lba_sector(offset/512,1,receiveBuffer);
  3989                        	.sym	offset,4,18,6,32
  3990                        	.sym	receiveBuffer,8,142,6,32
  3991                        	.line	991
  3992 06:9A08: D4 0E        	pei	<L88+receiveBuffer_0+2
  3993 06:9A0A: D4 0C        	pei	<L88+receiveBuffer_0
  3994 06:9A0C: F4 01 00     	pea	#<$1
  3995 06:9A0F: D4 0A        	pei	<L88+offset_0+2
  3996 06:9A11: D4 08        	pei	<L88+offset_0
  3997 06:9A13: A9 09 00     	lda	#$9
  3998                        	xref	~~~llsr
  3999 06:9A16: 22 xx xx xx  	jsl	~~~llsr
  4000 06:9A1A: 85 01        	sta	<R0
  4001 06:9A1C: 86 03        	stx	<R0+2
  4002 06:9A1E: D4 03        	pei	<R0+2
  4003 06:9A20: D4 01        	pei	<R0
  4004 06:9A22: 22 F1 96 06  	jsl	~~k_read_lba_sector
  4005                        ;	k_debug_byte_array("k_read_hd_sector:\r\n",recei
                    veBuffer,512);
  4006                        	.line	992
  4007 06:9A26: F4 00 00     	pea	#^$200
  4008 06:9A29: F4 00 02     	pea	#<$200
  4009 06:9A2C: D4 0E        	pei	<L88+receiveBuffer_0+2
  4010 06:9A2E: D4 0C        	pei	<L88+receiveBuffer_0
  4011 06:9A30: F4 xx xx     	pea	#^L87
  4012 06:9A33: F4 xx xx     	pea	#<L87
  4013 06:9A36: 22 xx xx xx  	jsl	~~k_debug_byte_array
  4014                        ;	return 0;
  4015                        	.line	993
  4016 06:9A3A: A9 00 00     	lda	#$0
  4017                        L91:
  4018 06:9A3D: A8           	tay
  4019 06:9A3E: A5 06        	lda	<L88+2
  4020 06:9A40: 85 0E        	sta	<L88+2+8
  4021 06:9A42: A5 05        	lda	<L88+1
  4022 06:9A44: 85 0D        	sta	<L88+1+8
  4023 06:9A46: 2B           	pld
  4024 06:9A47: 3B           	tsc
  Thu Jul 29 2021 11:55                                                Page 79


  4025 06:9A48: 18           	clc
  4026 06:9A49: 69 0C 00     	adc	#L88+8
  4027 06:9A4C: 1B           	tcs
  4028 06:9A4D: 98           	tya
  4029 06:9A4E: 6B           	rtl
  4030                        ;}
  4031                        	.line	994
  4032                        	.endblock	994
  4033             00000004   L88	equ	4
  4034             00000005   L89	equ	5
  4035 06:9A4F:              	ends
  4036                        	efunc
  4037                        	.endfunc	994,5,4
  4038                        	.line	994
  4039                        	data
  4040                        L87:
  4041 00:02E1: 6B 5F 72 65  	db	$6B,$5F,$72,$65,$61,$64,$5F,$68,$64,$5F,
                    $73,$65,$63,$74,$6F
       00:02E5: 61 64 5F 68 
       00:02E9: 64 5F 73 65 
       00:02ED: 63 74 6F 
  4042 00:02F0: 72 3A 0D 0A  	db	$72,$3A,$0D,$0A,$00
       00:02F4: 00 
  4043 00:02F5:              	ends
  4044                        ;
  4045                        ;
  4046                        ;void k_ide_busy(void)
  4047                        ;{
  4048                        	.line	997
  4049                        	.line	998
  4050                        	FXHDD
  4051                        	xdef	~~k_ide_busy
  4052                        	func
  4053                        	.function	998
  4054                        ~~k_ide_busy:
  4055                        	longa	on
  4056                        	longi	on
  4057 06:9A4F: 3B           	tsc
  4058 06:9A50: 38           	sec
  4059 06:9A51: E9 03 00     	sbc	#L93
  4060 06:9A54: 1B           	tcs
  4061 06:9A55: 0B           	phd
  4062 06:9A56: 5B           	tcd
  4063                        	.block	998
  4064                        ;	INT timeout = 128;
  4065                        ;	UCHAR sts = 0x80;
  4066                        ;
  4067                        ;	k_debug_hex("k_ide_busy:",0);
  4068             00000000   timeout_1	set	0
  4069             00000002   sts_1	set	2
  4070                        	.sym	timeout,0,5,1,16
  4071                        	.sym	sts,2,14,1,8
  4072 06:9A57: A9 80 00     	lda	#$80
  4073 06:9A5A: 85 01        	sta	<L94+timeout_1
  4074 06:9A5C: E2 20        	sep	#$20
  4075                        	longa	off
  4076 06:9A5E: A9 80        	lda	#$80
  4077 06:9A60: 85 03        	sta	<L94+sts_1
  Thu Jul 29 2021 11:55                                                Page 80


  4078 06:9A62: C2 20        	rep	#$20
  4079                        	longa	on
  4080                        	.line	1002
  4081 06:9A64: F4 00 00     	pea	#<$0
  4082 06:9A67: F4 xx xx     	pea	#^L92
  4083 06:9A6A: F4 xx xx     	pea	#<L92
  4084 06:9A6D: 22 xx xx xx  	jsl	~~k_debug_hex
  4085                        ;
  4086                        ;	do
  4087                        	.line	1004
  4088                        L10044:
  4089                        ;	{
  4090                        	.line	1005
  4091                        ;		sts = IDE_CMD_STAT[0];
  4092                        	.line	1006
  4093 06:9A71: E2 20        	sep	#$20
  4094                        	longa	off
  4095 06:9A73: AF 37 E8 AF  	lda	>11528247
  4096 06:9A77: 85 03        	sta	<L94+sts_1
  4097 06:9A79: C2 20        	rep	#$20
  4098                        	longa	on
  4099                        ;		k_debug_hex("k_ide_busy:sts:",sts);
  4100                        	.line	1007
  4101 06:9A7B: D4 03        	pei	<L94+sts_1
  4102 06:9A7D: F4 xx xx     	pea	#^L92+12
  4103 06:9A80: F4 xx xx     	pea	#<L92+12
  4104 06:9A83: 22 xx xx xx  	jsl	~~k_debug_hex
  4105                        ;		if(sts&ATA_SR_ERR)
  4106                        	.line	1008
  4107                        ;		{
  4108 06:9A87: E2 20        	sep	#$20
  4109                        	longa	off
  4110 06:9A89: A5 03        	lda	<L94+sts_1
  4111 06:9A8B: 29 01        	and	#<$1
  4112 06:9A8D: C2 20        	rep	#$20
  4113                        	longa	on
  4114 06:9A8F: D0 03        	bne	L96
  4115 06:9A91: 82 0F 00     	brl	L10045
  4116                        L96:
  4117                        	.line	1009
  4118                        ;			k_debug_hex("k_ide_busy:ERR:",st
                    s);
  4119                        	.line	1010
  4120 06:9A94: D4 03        	pei	<L94+sts_1
  4121 06:9A96: F4 xx xx     	pea	#^L92+28
  4122 06:9A99: F4 xx xx     	pea	#<L92+28
  4123 06:9A9C: 22 xx xx xx  	jsl	~~k_debug_hex
  4124                        ;			break;
  4125                        	.line	1011
  4126 06:9AA0: 82 1F 00     	brl	L10043
  4127                        ;		}
  4128                        	.line	1012
  4129                        ;		timeout--;
  4130                        L10045:
  4131                        	.line	1013
  4132 06:9AA3: C6 01        	dec	<L94+timeout_1
  4133                        ;	}while((sts&0x80) && timeout > 0);
  4134                        	.line	1014
  Thu Jul 29 2021 11:55                                                Page 81


  4135                        L10042:
  4136 06:9AA5: E2 20        	sep	#$20
  4137                        	longa	off
  4138 06:9AA7: A5 03        	lda	<L94+sts_1
  4139 06:9AA9: 29 80        	and	#<$80
  4140 06:9AAB: C2 20        	rep	#$20
  4141                        	longa	on
  4142 06:9AAD: D0 03        	bne	L98
  4143 06:9AAF: 82 10 00     	brl	L97
  4144                        L98:
  4145 06:9AB2: 38           	sec
  4146 06:9AB3: A9 00 00     	lda	#$0
  4147 06:9AB6: E5 01        	sbc	<L94+timeout_1
  4148 06:9AB8: 70 03        	bvs	L99
  4149 06:9ABA: 49 00 80     	eor	#$8000
  4150                        L99:
  4151 06:9ABD: 30 03        	bmi	L100
  4152 06:9ABF: 82 AF FF     	brl	L10044
  4153                        L100:
  4154                        L97:
  4155                        L10043:
  4156                        ;
  4157                        ;	return;
  4158                        	.line	1016
  4159                        L101:
  4160 06:9AC2: 2B           	pld
  4161 06:9AC3: 3B           	tsc
  4162 06:9AC4: 18           	clc
  4163 06:9AC5: 69 03 00     	adc	#L93
  4164 06:9AC8: 1B           	tcs
  4165 06:9AC9: 6B           	rtl
  4166                        ;}
  4167                        	.line	1017
  4168                        	.endblock	1017
  4169             00000003   L93	equ	3
  4170             00000001   L94	equ	1
  4171 06:9ACA:              	ends
  4172                        	efunc
  4173                        	.endfunc	1017,1,3
  4174                        	.line	1017
  4175                        	data
  4176                        L92:
  4177 00:02F5: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$62,$75,$73,$79,
                    $3A,$00,$6B,$5F,$69
       00:02F9: 65 5F 62 75 
       00:02FD: 73 79 3A 00 
       00:0301: 6B 5F 69 
  4178 00:0304: 64 65 5F 62  	db	$64,$65,$5F,$62,$75,$73,$79,$3A,$73,$74,
                    $73,$3A,$00,$6B,$5F
       00:0308: 75 73 79 3A 
       00:030C: 73 74 73 3A 
       00:0310: 00 6B 5F 
  4179 00:0313: 69 64 65 5F  	db	$69,$64,$65,$5F,$62,$75,$73,$79,$3A,$45,
                    $52,$52,$3A,$00
       00:0317: 62 75 73 79 
       00:031B: 3A 45 52 52 
       00:031F: 3A 00 
  4180 00:0321:              	ends
  Thu Jul 29 2021 11:55                                                Page 82


  4181                        ;
  4182                        ;void k_ide_drive_ready(void)
  4183                        ;{
  4184                        	.line	1019
  4185                        	.line	1020
  4186                        	FXHDD
  4187                        	xdef	~~k_ide_drive_ready
  4188                        	func
  4189                        	.function	1020
  4190                        ~~k_ide_drive_ready:
  4191                        	longa	on
  4192                        	longi	on
  4193 06:9ACA: 3B           	tsc
  4194 06:9ACB: 38           	sec
  4195 06:9ACC: E9 03 00     	sbc	#L103
  4196 06:9ACF: 1B           	tcs
  4197 06:9AD0: 0B           	phd
  4198 06:9AD1: 5B           	tcd
  4199                        	.block	1020
  4200                        ;	UCHAR sts = 0x00;
  4201                        ;	INT timeout = 255;
  4202                        ;	do
  4203             00000000   sts_1	set	0
  4204             00000001   timeout_1	set	1
  4205                        	.sym	sts,0,14,1,8
  4206                        	.sym	timeout,1,5,1,16
  4207 06:9AD2: E2 20        	sep	#$20
  4208                        	longa	off
  4209 06:9AD4: 64 01        	stz	<L104+sts_1
  4210 06:9AD6: C2 20        	rep	#$20
  4211                        	longa	on
  4212 06:9AD8: A9 FF 00     	lda	#$ff
  4213 06:9ADB: 85 02        	sta	<L104+timeout_1
  4214                        	.line	1023
  4215                        L10048:
  4216                        ;	{
  4217                        	.line	1024
  4218                        ;		sts = IDE_CMD_STAT[0];
  4219                        	.line	1025
  4220 06:9ADD: E2 20        	sep	#$20
  4221                        	longa	off
  4222 06:9ADF: AF 37 E8 AF  	lda	>11528247
  4223 06:9AE3: 85 01        	sta	<L104+sts_1
  4224 06:9AE5: C2 20        	rep	#$20
  4225                        	longa	on
  4226                        ;		k_debug_bits("k_ide_drive_ready:sts:",st
                    s);
  4227                        	.line	1026
  4228 06:9AE7: D4 01        	pei	<L104+sts_1
  4229 06:9AE9: F4 xx xx     	pea	#^L102
  4230 06:9AEC: F4 xx xx     	pea	#<L102
  4231 06:9AEF: 22 xx xx xx  	jsl	~~k_debug_bits
  4232                        ;		if(sts&ATA_SR_ERR)
  4233                        	.line	1027
  4234                        ;		{
  4235 06:9AF3: E2 20        	sep	#$20
  4236                        	longa	off
  4237 06:9AF5: A5 01        	lda	<L104+sts_1
  Thu Jul 29 2021 11:55                                                Page 83


  4238 06:9AF7: 29 01        	and	#<$1
  4239 06:9AF9: C2 20        	rep	#$20
  4240                        	longa	on
  4241 06:9AFB: D0 03        	bne	L106
  4242 06:9AFD: 82 0F 00     	brl	L10049
  4243                        L106:
  4244                        	.line	1028
  4245                        ;			k_debug_hex("k_ide_drive_ready:E
                    RR:",sts);
  4246                        	.line	1029
  4247 06:9B00: D4 01        	pei	<L104+sts_1
  4248 06:9B02: F4 xx xx     	pea	#^L102+23
  4249 06:9B05: F4 xx xx     	pea	#<L102+23
  4250 06:9B08: 22 xx xx xx  	jsl	~~k_debug_hex
  4251                        ;			break;
  4252                        	.line	1030
  4253 06:9B0C: 82 1F 00     	brl	L10047
  4254                        ;		}
  4255                        	.line	1031
  4256                        ;		timeout--;
  4257                        L10049:
  4258                        	.line	1032
  4259 06:9B0F: C6 02        	dec	<L104+timeout_1
  4260                        ;	}
  4261                        	.line	1033
  4262                        ;	while((sts&0x40) && timeout > 0);
  4263                        L10046:
  4264 06:9B11: E2 20        	sep	#$20
  4265                        	longa	off
  4266 06:9B13: A5 01        	lda	<L104+sts_1
  4267 06:9B15: 29 40        	and	#<$40
  4268 06:9B17: C2 20        	rep	#$20
  4269                        	longa	on
  4270 06:9B19: D0 03        	bne	L108
  4271 06:9B1B: 82 10 00     	brl	L107
  4272                        L108:
  4273 06:9B1E: 38           	sec
  4274 06:9B1F: A9 00 00     	lda	#$0
  4275 06:9B22: E5 02        	sbc	<L104+timeout_1
  4276 06:9B24: 70 03        	bvs	L109
  4277 06:9B26: 49 00 80     	eor	#$8000
  4278                        L109:
  4279 06:9B29: 30 03        	bmi	L110
  4280 06:9B2B: 82 AF FF     	brl	L10048
  4281                        L110:
  4282                        L107:
  4283                        L10047:
  4284                        ;
  4285                        ;	return;
  4286                        	.line	1036
  4287                        L111:
  4288 06:9B2E: 2B           	pld
  4289 06:9B2F: 3B           	tsc
  4290 06:9B30: 18           	clc
  4291 06:9B31: 69 03 00     	adc	#L103
  4292 06:9B34: 1B           	tcs
  4293 06:9B35: 6B           	rtl
  4294                        ;}
  Thu Jul 29 2021 11:55                                                Page 84


  4295                        	.line	1037
  4296                        	.endblock	1037
  4297             00000003   L103	equ	3
  4298             00000001   L104	equ	1
  4299 06:9B36:              	ends
  4300                        	efunc
  4301                        	.endfunc	1037,1,3
  4302                        	.line	1037
  4303                        	data
  4304                        L102:
  4305 00:0321: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$64,$72,$69,$76,
                    $65,$5F,$72,$65,$61
       00:0325: 65 5F 64 72 
       00:0329: 69 76 65 5F 
       00:032D: 72 65 61 
  4306 00:0330: 64 79 3A 73  	db	$64,$79,$3A,$73,$74,$73,$3A,$00,$6B,$5F,
                    $69,$64,$65,$5F,$64
       00:0334: 74 73 3A 00 
       00:0338: 6B 5F 69 64 
       00:033C: 65 5F 64 
  4307 00:033F: 72 69 76 65  	db	$72,$69,$76,$65,$5F,$72,$65,$61,$64,$79,
                    $3A,$45,$52,$52,$3A
       00:0343: 5F 72 65 61 
       00:0347: 64 79 3A 45 
       00:034B: 52 52 3A 
  4308 00:034E: 00           	db	$00
  4309 00:034F:              	ends
  4310                        ;
  4311                        ;
  4312                        ;void k_ide_drive_ready_notbusy(void)
  4313                        ;{
  4314                        	.line	1040
  4315                        	.line	1041
  4316                        	FXHDD
  4317                        	xdef	~~k_ide_drive_ready_notbusy
  4318                        	func
  4319                        	.function	1041
  4320                        ~~k_ide_drive_ready_notbusy:
  4321                        	longa	on
  4322                        	longi	on
  4323 06:9B36: 3B           	tsc
  4324 06:9B37: 38           	sec
  4325 06:9B38: E9 00 00     	sbc	#L113
  4326 06:9B3B: 1B           	tcs
  4327 06:9B3C: 0B           	phd
  4328 06:9B3D: 5B           	tcd
  4329                        	.block	1041
  4330                        ;
  4331                        ;
  4332                        ;	k_ide_drive_ready();
  4333                        	.line	1044
  4334 06:9B3E: 22 CA 9A 06  	jsl	~~k_ide_drive_ready
  4335                        ;	k_ide_busy();
  4336                        	.line	1045
  4337 06:9B42: 22 4F 9A 06  	jsl	~~k_ide_busy
  4338                        ;
  4339                        ;
  4340                        ;	return;
  Thu Jul 29 2021 11:55                                                Page 85


  4341                        	.line	1048
  4342                        L116:
  4343 06:9B46: 2B           	pld
  4344 06:9B47: 3B           	tsc
  4345 06:9B48: 18           	clc
  4346 06:9B49: 69 00 00     	adc	#L113
  4347 06:9B4C: 1B           	tcs
  4348 06:9B4D: 6B           	rtl
  4349                        ;}
  4350                        	.line	1049
  4351                        	.endblock	1049
  4352             00000000   L113	equ	0
  4353             00000001   L114	equ	1
  4354 06:9B4E:              	ends
  4355                        	efunc
  4356                        	.endfunc	1049,1,0
  4357                        	.line	1049
  4358                        ;
  4359                        ;/*
  4360                        ;;
  4361                        ;;////////////////////////////////////////////////
                    ////////
  4362                        ;; IDE_NOT_DRQ
  4363                        ;; Indicates that the drive is ready to transfer w
                    ord or byte of data
  4364                        ;; Inputs:
  4365                        ;;  None
  4366                        ;; Affects:
  4367                        ;;   A
  4368                        ;;////////////////////////////////////////////////
                    /////////
  4369                        ;*/
  4370                        ;void k_ide_not_drq(void)
  4371                        ;{
  4372                        	.line	1062
  4373                        	.line	1063
  4374                        	FXHDD
  4375                        	xdef	~~k_ide_not_drq
  4376                        	func
  4377                        	.function	1063
  4378                        ~~k_ide_not_drq:
  4379                        	longa	on
  4380                        	longi	on
  4381 06:9B4E: 3B           	tsc
  4382 06:9B4F: 38           	sec
  4383 06:9B50: E9 01 00     	sbc	#L117
  4384 06:9B53: 1B           	tcs
  4385 06:9B54: 0B           	phd
  4386 06:9B55: 5B           	tcd
  4387                        	.block	1063
  4388                        ;	UCHAR sts = 0x00;
  4389                        ;
  4390                        ;	do
  4391             00000000   sts_1	set	0
  4392                        	.sym	sts,0,14,1,8
  4393 06:9B56: E2 20        	sep	#$20
  4394                        	longa	off
  4395 06:9B58: 64 01        	stz	<L118+sts_1
  Thu Jul 29 2021 11:55                                                Page 86


  4396 06:9B5A: C2 20        	rep	#$20
  4397                        	longa	on
  4398                        	.line	1066
  4399                        L10052:
  4400                        ;	{
  4401                        	.line	1067
  4402                        ;		sts = IDE_CMD_STAT[0];
  4403                        	.line	1068
  4404 06:9B5C: E2 20        	sep	#$20
  4405                        	longa	off
  4406 06:9B5E: AF 37 E8 AF  	lda	>11528247
  4407 06:9B62: 85 01        	sta	<L118+sts_1
  4408 06:9B64: C2 20        	rep	#$20
  4409                        	longa	on
  4410                        ;		k_debug_hex("k_ide_not_drq:sts:",sts);
  4411                        	.line	1069
  4412 06:9B66: D4 01        	pei	<L118+sts_1
  4413 06:9B68: F4 xx xx     	pea	#^L112
  4414 06:9B6B: F4 xx xx     	pea	#<L112
  4415 06:9B6E: 22 xx xx xx  	jsl	~~k_debug_hex
  4416                        ;		if(sts == ATA_SR_ERR)
  4417                        	.line	1070
  4418                        ;			break;
  4419 06:9B72: E2 20        	sep	#$20
  4420                        	longa	off
  4421 06:9B74: A5 01        	lda	<L118+sts_1
  4422 06:9B76: C9 01        	cmp	#<$1
  4423 06:9B78: C2 20        	rep	#$20
  4424                        	longa	on
  4425 06:9B7A: D0 03        	bne	L120
  4426 06:9B7C: 82 0D 00     	brl	L10051
  4427                        L120:
  4428                        ;	}
  4429                        	.line	1072
  4430                        ;	while(sts & ATA_SR_DRQ);
  4431                        L10050:
  4432 06:9B7F: E2 20        	sep	#$20
  4433                        	longa	off
  4434 06:9B81: A5 01        	lda	<L118+sts_1
  4435 06:9B83: 29 08        	and	#<$8
  4436 06:9B85: C2 20        	rep	#$20
  4437                        	longa	on
  4438 06:9B87: F0 03        	beq	L121
  4439 06:9B89: 82 D0 FF     	brl	L10052
  4440                        L121:
  4441                        L10051:
  4442                        ;
  4443                        ;	return;
  4444                        	.line	1075
  4445                        L122:
  4446 06:9B8C: 2B           	pld
  4447 06:9B8D: 3B           	tsc
  4448 06:9B8E: 18           	clc
  4449 06:9B8F: 69 01 00     	adc	#L117
  4450 06:9B92: 1B           	tcs
  4451 06:9B93: 6B           	rtl
  4452                        ;}
  4453                        	.line	1076
  Thu Jul 29 2021 11:55                                                Page 87


  4454                        	.endblock	1076
  4455             00000001   L117	equ	1
  4456             00000001   L118	equ	1
  4457 06:9B94:              	ends
  4458                        	efunc
  4459                        	.endfunc	1076,1,1
  4460                        	.line	1076
  4461                        	data
  4462                        L112:
  4463 00:034F: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$6E,$6F,$74,$5F,
                    $64,$72,$71,$3A,$73
       00:0353: 65 5F 6E 6F 
       00:0357: 74 5F 64 72 
       00:035B: 71 3A 73 
  4464 00:035E: 74 73 3A 00  	db	$74,$73,$3A,$00
  4465 00:0362:              	ends
  4466                        ;
  4467                        ;/*
  4468                        ;			  ;
  4469                        ;;////////////////////////////////////////////////
                    ////////
  4470                        ;; IDE_GET_512BYTES
  4471                        ;; Fetch the Data from the Drive and Save it in th
                    e SDCard Data Buffer
  4472                        ;; Inputs:
  4473                        ;;  None
  4474                        ;; Affects:
  4475                        ;;   None
  4476                        ;;////////////////////////////////////////////////
                    /////////
  4477                        ;IDE_GET_512BYTES
  4478                        ;              setaxl
  4479                        ;              LDA IDE_DATA_LO
  4480                        ;              LDX #$0000
  4481                        ;IDE_GET_INFO_KEEP_FETCHING
  4482                        ;              LDA IDE_DATA_LO
  4483                        ;              STA SDOS_BLK_BEGIN, X
  4484                        ;              ;LDA IDE_DATA_HI
  4485                        ;              ;INX
  4486                        ;              ;STA SDOS_BLK_BEGIN, x
  4487                        ;              INX
  4488                        ;              INX
  4489                        ;              CPX #$0200
  4490                        ;              BNE IDE_GET_INFO_KEEP_FETCHING
  4491                        ;              RTL
  4492                        ;
  4493                        ;*/
  4494                        ;LPCHAR k_ide_read_sector(LPCHAR readBuffer)
  4495                        ;{
  4496                        	.line	1105
  4497                        	.line	1106
  4498                        	FXHDD
  4499                        	xdef	~~k_ide_read_sector
  4500                        	func
  4501                        	.function	1106
  4502                        ~~k_ide_read_sector:
  4503                        	longa	on
  4504                        	longi	on
  Thu Jul 29 2021 11:55                                                Page 88


  4505 06:9B94: 3B           	tsc
  4506 06:9B95: 38           	sec
  4507 06:9B96: E9 08 00     	sbc	#L124
  4508 06:9B99: 1B           	tcs
  4509 06:9B9A: 0B           	phd
  4510 06:9B9B: 5B           	tcd
  4511             00000004   readBuffer_0	set	4
  4512                        	.block	1106
  4513                        ;	UINT index = 0;
  4514                        ;	UCHAR lo;
  4515                        ;	UCHAR hi;
  4516                        ;
  4517                        ;	//UINT *pword = (UINT*)readBuffer;
  4518                        ;
  4519                        ;	//k_ide_poll(0);
  4520                        ;	//k_ide_not_drq();
  4521                        ;	k_debug_integer("k_ide_read_sector:sts:",512);
  4522             00000000   index_1	set	0
  4523             00000002   lo_1	set	2
  4524             00000003   hi_1	set	3
  4525                        	.sym	index,0,16,1,16
  4526                        	.sym	lo,2,14,1,8
  4527                        	.sym	hi,3,14,1,8
  4528                        	.sym	readBuffer,4,142,6,32
  4529 06:9B9C: 64 05        	stz	<L125+index_1
  4530                        	.line	1115
  4531 06:9B9E: F4 00 02     	pea	#<$200
  4532 06:9BA1: F4 xx xx     	pea	#^L123
  4533 06:9BA4: F4 xx xx     	pea	#<L123
  4534 06:9BA7: 22 xx xx xx  	jsl	~~k_debug_integer
  4535                        ;
  4536                        ;	for(index = 0;index < 512;index+=2)
  4537                        	.line	1117
  4538 06:9BAB: 64 05        	stz	<L125+index_1
  4539                        L10055:
  4540                        ;	{
  4541                        	.line	1118
  4542                        ;		lo = IDE_DATA_LO[0];
  4543                        	.line	1119
  4544 06:9BAD: E2 20        	sep	#$20
  4545                        	longa	off
  4546 06:9BAF: AF 38 E8 AF  	lda	>11528248
  4547 06:9BB3: 85 07        	sta	<L125+lo_1
  4548 06:9BB5: C2 20        	rep	#$20
  4549                        	longa	on
  4550                        ;		hi = IDE_DATA_HI[0];
  4551                        	.line	1120
  4552 06:9BB7: E2 20        	sep	#$20
  4553                        	longa	off
  4554 06:9BB9: AF 39 E8 AF  	lda	>11528249
  4555 06:9BBD: 85 08        	sta	<L125+hi_1
  4556 06:9BBF: C2 20        	rep	#$20
  4557                        	longa	on
  4558                        ;		//k_debug_hex("k_ide_read_sector:lo:",lo
                    );
  4559                        ;		//k_debug_hex("k_ide_read_sector:hi:",hi
                    );
  4560                        ;		readBuffer[index] =   lo;
  Thu Jul 29 2021 11:55                                                Page 89


  4561                        	.line	1123
  4562 06:9BC1: E2 20        	sep	#$20
  4563                        	longa	off
  4564 06:9BC3: A5 07        	lda	<L125+lo_1
  4565 06:9BC5: A4 05        	ldy	<L125+index_1
  4566 06:9BC7: 97 0C        	sta	[<L124+readBuffer_0],Y
  4567 06:9BC9: C2 20        	rep	#$20
  4568                        	longa	on
  4569                        ;		readBuffer[index+1] = hi;
  4570                        	.line	1124
  4571 06:9BCB: A5 05        	lda	<L125+index_1
  4572 06:9BCD: 1A           	ina
  4573 06:9BCE: 85 01        	sta	<R0
  4574 06:9BD0: E2 20        	sep	#$20
  4575                        	longa	off
  4576 06:9BD2: A5 08        	lda	<L125+hi_1
  4577 06:9BD4: A4 01        	ldy	<R0
  4578 06:9BD6: 97 0C        	sta	[<L124+readBuffer_0],Y
  4579 06:9BD8: C2 20        	rep	#$20
  4580                        	longa	on
  4581                        ;	}
  4582                        	.line	1125
  4583                        L10053:
  4584 06:9BDA: E6 05        	inc	<L125+index_1
  4585 06:9BDC: E6 05        	inc	<L125+index_1
  4586 06:9BDE: A5 05        	lda	<L125+index_1
  4587 06:9BE0: C9 00 02     	cmp	#<$200
  4588 06:9BE3: B0 03        	bcs	L127
  4589 06:9BE5: 82 C5 FF     	brl	L10055
  4590                        L127:
  4591                        L10054:
  4592                        ;
  4593                        ;	/*
  4594                        ;	for(index = 0;index < 256;index+=2)
  4595                        ;	{
  4596                        ;		lo = IDE_DATA_LO[0];
  4597                        ;		hi = IDE_DATA_HI[0];
  4598                        ;
  4599                        ;
  4600                        ;		k_debug_hex("k_ide_read_sector:lo:",lo);
  4601                        ;		k_debug_hex("k_ide_read_sector:hi:",hi);
  4602                        ;		readBuffer[index] =   lo;
  4603                        ;		readBuffer[index+1] = hi;
  4604                        ;	}
  4605                        ;	*/
  4606                        ;
  4607                        ;	//k_debug_byte_array("k_ide_read_sector:data:",r
                    eadBuffer,512);
  4608                        ;
  4609                        ;	return readBuffer;
  4610                        	.line	1143
  4611 06:9BE8: A6 0E        	ldx	<L124+readBuffer_0+2
  4612 06:9BEA: A5 0C        	lda	<L124+readBuffer_0
  4613                        L128:
  4614 06:9BEC: A8           	tay
  4615 06:9BED: A5 0A        	lda	<L124+2
  4616 06:9BEF: 85 0E        	sta	<L124+2+4
  4617 06:9BF1: A5 09        	lda	<L124+1
  Thu Jul 29 2021 11:55                                                Page 90


  4618 06:9BF3: 85 0D        	sta	<L124+1+4
  4619 06:9BF5: 2B           	pld
  4620 06:9BF6: 3B           	tsc
  4621 06:9BF7: 18           	clc
  4622 06:9BF8: 69 0C 00     	adc	#L124+4
  4623 06:9BFB: 1B           	tcs
  4624 06:9BFC: 98           	tya
  4625 06:9BFD: 6B           	rtl
  4626                        ;}
  4627                        	.line	1144
  4628                        	.endblock	1144
  4629             00000008   L124	equ	8
  4630             00000005   L125	equ	5
  4631 06:9BFE:              	ends
  4632                        	efunc
  4633                        	.endfunc	1144,5,8
  4634                        	.line	1144
  4635                        	data
  4636                        L123:
  4637 00:0362: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$72,$65,$61,$64,
                    $5F,$73,$65,$63,$74
       00:0366: 65 5F 72 65 
       00:036A: 61 64 5F 73 
       00:036E: 65 63 74 
  4638 00:0371: 6F 72 3A 73  	db	$6F,$72,$3A,$73,$74,$73,$3A,$00
       00:0375: 74 73 3A 00 
  4639 00:0379:              	ends
  4640                        ;
  4641                        ;
  4642                        ;
  4643                        ;
  4644                        ;int reg_config( void )
  4645                        ;
  4646                        ;{
  4647                        	.line	1149
  4648                        	.line	1151
  4649                        	FXHDD
  4650                        	xdef	~~reg_config
  4651                        	func
  4652                        	.function	1151
  4653                        ~~reg_config:
  4654                        	longa	on
  4655                        	longi	on
  4656 06:9BFE: 3B           	tsc
  4657 06:9BFF: 38           	sec
  4658 06:9C00: E9 0C 00     	sbc	#L130
  4659 06:9C03: 1B           	tcs
  4660 06:9C04: 0B           	phd
  4661 06:9C05: 5B           	tcd
  4662                        	.block	1151
  4663                        ;   int numDev = 0;
  4664                        ;   unsigned char sc;
  4665                        ;   unsigned char sn;
  4666                        ;   unsigned char cl;
  4667                        ;   unsigned char ch;
  4668                        ;   unsigned char st;
  4669                        ;   unsigned char dc;
  4670                        ;
  Thu Jul 29 2021 11:55                                                Page 91


  4671                        ;   // setup register values
  4672                        ;
  4673                        ;
  4674                        ;   dc = (unsigned char) ( int_use_intr_flag ? 0 :
                     CB_DC_NIEN );
  4675             00000000   numDev_1	set	0
  4676             00000002   sc_1	set	2
  4677             00000003   sn_1	set	3
  4678             00000004   cl_1	set	4
  4679             00000005   ch_1	set	5
  4680             00000006   st_1	set	6
  4681             00000007   dc_1	set	7
  4682                        	.sym	numDev,0,5,1,16
  4683                        	.sym	sc,2,14,1,8
  4684                        	.sym	sn,3,14,1,8
  4685                        	.sym	cl,4,14,1,8
  4686                        	.sym	ch,5,14,1,8
  4687                        	.sym	st,6,14,1,8
  4688                        	.sym	dc,7,14,1,8
  4689 06:9C06: 64 05        	stz	<L131+numDev_1
  4690                        	.line	1163
  4691 06:9C08: AD xx xx     	lda	|~~int_use_intr_flag
  4692 06:9C0B: 29 FF 00     	and	#$ff
  4693 06:9C0E: D0 03        	bne	L134
  4694 06:9C10: 82 05 00     	brl	L133
  4695                        L134:
  4696 06:9C13: A9 00 00     	lda	#$0
  4697 06:9C16: 80 03        	bra	L135
  4698                        L133:
  4699 06:9C18: A9 02 00     	lda	#$2
  4700                        L135:
  4701 06:9C1B: 85 01        	sta	<R0
  4702 06:9C1D: E2 20        	sep	#$20
  4703                        	longa	off
  4704 06:9C1F: A5 01        	lda	<R0
  4705 06:9C21: 85 0C        	sta	<L131+dc_1
  4706 06:9C23: C2 20        	rep	#$20
  4707                        	longa	on
  4708                        ;   k_debug_hex("dc:",dc);
  4709                        	.line	1164
  4710 06:9C25: D4 0C        	pei	<L131+dc_1
  4711 06:9C27: F4 xx xx     	pea	#^L129
  4712 06:9C2A: F4 xx xx     	pea	#<L129
  4713 06:9C2D: 22 xx xx xx  	jsl	~~k_debug_hex
  4714                        ;
  4715                        ;   // reset Bus Master Error bit
  4716                        ;
  4717                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  4718                        	.line	1168
  4719 06:9C31: F4 02 00     	pea	#<$2
  4720 06:9C34: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  4721                        ;   k_debug_hex("pio_writeBusMstrStatus:",BM_SR_MA
                    SK_ERR);
  4722                        	.line	1169
  4723 06:9C38: F4 02 00     	pea	#<$2
  4724 06:9C3B: F4 xx xx     	pea	#^L129+4
  4725 06:9C3E: F4 xx xx     	pea	#<L129+4
  4726 06:9C41: 22 xx xx xx  	jsl	~~k_debug_hex
  Thu Jul 29 2021 11:55                                                Page 92


  4727                        ;   // assume there are no devices
  4728                        ;
  4729                        ;   reg_config_info[0] = REG_CONFIG_TYPE_NONE;
  4730                        	.line	1172
  4731 06:9C45: 9C xx xx     	stz	|~~reg_config_info
  4732                        ;   reg_config_info[1] = REG_CONFIG_TYPE_NONE;
  4733                        	.line	1173
  4734 06:9C48: 9C xx xx     	stz	|~~reg_config_info+2
  4735                        ;
  4736                        ;   // set up Device Control register
  4737                        ;
  4738                        ;   pio_outbyte( CB_DC, dc );
  4739                        	.line	1177
  4740 06:9C4B: D4 0C        	pei	<L131+dc_1
  4741 06:9C4D: F4 08 00     	pea	#<$8
  4742 06:9C50: 22 F0 B7 06  	jsl	~~pio_outbyte
  4743                        ;
  4744                        ;   // lets see if there is a device 0
  4745                        ;
  4746                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  4747                        	.line	1181
  4748 06:9C54: F4 00 00     	pea	#<$0
  4749 06:9C57: F4 06 00     	pea	#<$6
  4750 06:9C5A: 22 F0 B7 06  	jsl	~~pio_outbyte
  4751                        ;   DELAY400NS;
  4752                        	.line	1182
  4753                        	.line	1182
  4754 06:9C5E: F4 08 00     	pea	#<$8
  4755 06:9C61: 22 B1 B7 06  	jsl	~~pio_inbyte
  4756                        	.line	1182
  4757 06:9C65: F4 08 00     	pea	#<$8
  4758 06:9C68: 22 B1 B7 06  	jsl	~~pio_inbyte
  4759                        	.line	1182
  4760 06:9C6C: F4 08 00     	pea	#<$8
  4761 06:9C6F: 22 B1 B7 06  	jsl	~~pio_inbyte
  4762                        	.line	1182
  4763 06:9C73: F4 08 00     	pea	#<$8
  4764 06:9C76: 22 B1 B7 06  	jsl	~~pio_inbyte
  4765                        	.line	1182
  4766 06:9C7A: F4 08 00     	pea	#<$8
  4767 06:9C7D: 22 B1 B7 06  	jsl	~~pio_inbyte
  4768                        	.line	1182
  4769                        	.line	1182
  4770                        ;   pio_outbyte( CB_SC, 0x55 );
  4771                        	.line	1183
  4772 06:9C81: F4 55 00     	pea	#<$55
  4773 06:9C84: F4 02 00     	pea	#<$2
  4774 06:9C87: 22 F0 B7 06  	jsl	~~pio_outbyte
  4775                        ;   pio_outbyte( CB_SN, 0xaa );
  4776                        	.line	1184
  4777 06:9C8B: F4 AA 00     	pea	#<$aa
  4778 06:9C8E: F4 03 00     	pea	#<$3
  4779 06:9C91: 22 F0 B7 06  	jsl	~~pio_outbyte
  4780                        ;   pio_outbyte( CB_SC, 0xaa );
  4781                        	.line	1185
  4782 06:9C95: F4 AA 00     	pea	#<$aa
  4783 06:9C98: F4 02 00     	pea	#<$2
  4784 06:9C9B: 22 F0 B7 06  	jsl	~~pio_outbyte
  Thu Jul 29 2021 11:55                                                Page 93


  4785                        ;   pio_outbyte( CB_SN, 0x55 );
  4786                        	.line	1186
  4787 06:9C9F: F4 55 00     	pea	#<$55
  4788 06:9CA2: F4 03 00     	pea	#<$3
  4789 06:9CA5: 22 F0 B7 06  	jsl	~~pio_outbyte
  4790                        ;   pio_outbyte( CB_SC, 0x55 );
  4791                        	.line	1187
  4792 06:9CA9: F4 55 00     	pea	#<$55
  4793 06:9CAC: F4 02 00     	pea	#<$2
  4794 06:9CAF: 22 F0 B7 06  	jsl	~~pio_outbyte
  4795                        ;   pio_outbyte( CB_SN, 0xaa );
  4796                        	.line	1188
  4797 06:9CB3: F4 AA 00     	pea	#<$aa
  4798 06:9CB6: F4 03 00     	pea	#<$3
  4799 06:9CB9: 22 F0 B7 06  	jsl	~~pio_outbyte
  4800                        ;   sc = pio_inbyte( CB_SC );
  4801                        	.line	1189
  4802 06:9CBD: F4 02 00     	pea	#<$2
  4803 06:9CC0: 22 B1 B7 06  	jsl	~~pio_inbyte
  4804 06:9CC4: E2 20        	sep	#$20
  4805                        	longa	off
  4806 06:9CC6: 85 07        	sta	<L131+sc_1
  4807 06:9CC8: C2 20        	rep	#$20
  4808                        	longa	on
  4809                        ;   sn = pio_inbyte( CB_SN );
  4810                        	.line	1190
  4811 06:9CCA: F4 03 00     	pea	#<$3
  4812 06:9CCD: 22 B1 B7 06  	jsl	~~pio_inbyte
  4813 06:9CD1: E2 20        	sep	#$20
  4814                        	longa	off
  4815 06:9CD3: 85 08        	sta	<L131+sn_1
  4816 06:9CD5: C2 20        	rep	#$20
  4817                        	longa	on
  4818                        ;   if ( ( sc == 0x55 ) && ( sn == 0xaa ) )
  4819                        	.line	1191
  4820                        ;      reg_config_info[0] = REG_CONFIG_TYPE_UNKN;
  4821 06:9CD7: E2 20        	sep	#$20
  4822                        	longa	off
  4823 06:9CD9: A5 07        	lda	<L131+sc_1
  4824 06:9CDB: C9 55        	cmp	#<$55
  4825 06:9CDD: C2 20        	rep	#$20
  4826                        	longa	on
  4827 06:9CDF: F0 03        	beq	L136
  4828 06:9CE1: 82 13 00     	brl	L10056
  4829                        L136:
  4830 06:9CE4: E2 20        	sep	#$20
  4831                        	longa	off
  4832 06:9CE6: A5 08        	lda	<L131+sn_1
  4833 06:9CE8: C9 AA        	cmp	#<$aa
  4834 06:9CEA: C2 20        	rep	#$20
  4835                        	longa	on
  4836 06:9CEC: F0 03        	beq	L137
  4837 06:9CEE: 82 06 00     	brl	L10056
  4838                        L137:
  4839                        	.line	1192
  4840 06:9CF1: A9 01 00     	lda	#$1
  4841 06:9CF4: 8D xx xx     	sta	|~~reg_config_info
  4842                        ;
  Thu Jul 29 2021 11:55                                                Page 94


  4843                        ;   k_debug_hex("sc1:",sc);
  4844                        L10056:
  4845                        	.line	1194
  4846 06:9CF7: D4 07        	pei	<L131+sc_1
  4847 06:9CF9: F4 xx xx     	pea	#^L129+28
  4848 06:9CFC: F4 xx xx     	pea	#<L129+28
  4849 06:9CFF: 22 xx xx xx  	jsl	~~k_debug_hex
  4850                        ;   k_debug_hex("sn1:",sn);
  4851                        	.line	1195
  4852 06:9D03: D4 08        	pei	<L131+sn_1
  4853 06:9D05: F4 xx xx     	pea	#^L129+33
  4854 06:9D08: F4 xx xx     	pea	#<L129+33
  4855 06:9D0B: 22 xx xx xx  	jsl	~~k_debug_hex
  4856                        ;   // lets see if there is a device 1
  4857                        ;
  4858                        ;   pio_outbyte( CB_DH, CB_DH_DEV1 );
  4859                        	.line	1198
  4860 06:9D0F: F4 10 00     	pea	#<$10
  4861 06:9D12: F4 06 00     	pea	#<$6
  4862 06:9D15: 22 F0 B7 06  	jsl	~~pio_outbyte
  4863                        ;   DELAY400NS;
  4864                        	.line	1199
  4865                        	.line	1199
  4866 06:9D19: F4 08 00     	pea	#<$8
  4867 06:9D1C: 22 B1 B7 06  	jsl	~~pio_inbyte
  4868                        	.line	1199
  4869 06:9D20: F4 08 00     	pea	#<$8
  4870 06:9D23: 22 B1 B7 06  	jsl	~~pio_inbyte
  4871                        	.line	1199
  4872 06:9D27: F4 08 00     	pea	#<$8
  4873 06:9D2A: 22 B1 B7 06  	jsl	~~pio_inbyte
  4874                        	.line	1199
  4875 06:9D2E: F4 08 00     	pea	#<$8
  4876 06:9D31: 22 B1 B7 06  	jsl	~~pio_inbyte
  4877                        	.line	1199
  4878 06:9D35: F4 08 00     	pea	#<$8
  4879 06:9D38: 22 B1 B7 06  	jsl	~~pio_inbyte
  4880                        	.line	1199
  4881                        	.line	1199
  4882                        ;   pio_outbyte( CB_SC, 0x55 );
  4883                        	.line	1200
  4884 06:9D3C: F4 55 00     	pea	#<$55
  4885 06:9D3F: F4 02 00     	pea	#<$2
  4886 06:9D42: 22 F0 B7 06  	jsl	~~pio_outbyte
  4887                        ;   pio_outbyte( CB_SN, 0xaa );
  4888                        	.line	1201
  4889 06:9D46: F4 AA 00     	pea	#<$aa
  4890 06:9D49: F4 03 00     	pea	#<$3
  4891 06:9D4C: 22 F0 B7 06  	jsl	~~pio_outbyte
  4892                        ;   pio_outbyte( CB_SC, 0xaa );
  4893                        	.line	1202
  4894 06:9D50: F4 AA 00     	pea	#<$aa
  4895 06:9D53: F4 02 00     	pea	#<$2
  4896 06:9D56: 22 F0 B7 06  	jsl	~~pio_outbyte
  4897                        ;   pio_outbyte( CB_SN, 0x55 );
  4898                        	.line	1203
  4899 06:9D5A: F4 55 00     	pea	#<$55
  4900 06:9D5D: F4 03 00     	pea	#<$3
  Thu Jul 29 2021 11:55                                                Page 95


  4901 06:9D60: 22 F0 B7 06  	jsl	~~pio_outbyte
  4902                        ;   pio_outbyte( CB_SC, 0x55 );
  4903                        	.line	1204
  4904 06:9D64: F4 55 00     	pea	#<$55
  4905 06:9D67: F4 02 00     	pea	#<$2
  4906 06:9D6A: 22 F0 B7 06  	jsl	~~pio_outbyte
  4907                        ;   pio_outbyte( CB_SN, 0xaa );
  4908                        	.line	1205
  4909 06:9D6E: F4 AA 00     	pea	#<$aa
  4910 06:9D71: F4 03 00     	pea	#<$3
  4911 06:9D74: 22 F0 B7 06  	jsl	~~pio_outbyte
  4912                        ;   sc = pio_inbyte( CB_SC );
  4913                        	.line	1206
  4914 06:9D78: F4 02 00     	pea	#<$2
  4915 06:9D7B: 22 B1 B7 06  	jsl	~~pio_inbyte
  4916 06:9D7F: E2 20        	sep	#$20
  4917                        	longa	off
  4918 06:9D81: 85 07        	sta	<L131+sc_1
  4919 06:9D83: C2 20        	rep	#$20
  4920                        	longa	on
  4921                        ;   sn = pio_inbyte( CB_SN );
  4922                        	.line	1207
  4923 06:9D85: F4 03 00     	pea	#<$3
  4924 06:9D88: 22 B1 B7 06  	jsl	~~pio_inbyte
  4925 06:9D8C: E2 20        	sep	#$20
  4926                        	longa	off
  4927 06:9D8E: 85 08        	sta	<L131+sn_1
  4928 06:9D90: C2 20        	rep	#$20
  4929                        	longa	on
  4930                        ;   if ( ( sc == 0x55 ) && ( sn == 0xaa ) )
  4931                        	.line	1208
  4932                        ;      reg_config_info[1] = REG_CONFIG_TYPE_UNKN;
  4933 06:9D92: E2 20        	sep	#$20
  4934                        	longa	off
  4935 06:9D94: A5 07        	lda	<L131+sc_1
  4936 06:9D96: C9 55        	cmp	#<$55
  4937 06:9D98: C2 20        	rep	#$20
  4938                        	longa	on
  4939 06:9D9A: F0 03        	beq	L138
  4940 06:9D9C: 82 13 00     	brl	L10057
  4941                        L138:
  4942 06:9D9F: E2 20        	sep	#$20
  4943                        	longa	off
  4944 06:9DA1: A5 08        	lda	<L131+sn_1
  4945 06:9DA3: C9 AA        	cmp	#<$aa
  4946 06:9DA5: C2 20        	rep	#$20
  4947                        	longa	on
  4948 06:9DA7: F0 03        	beq	L139
  4949 06:9DA9: 82 06 00     	brl	L10057
  4950                        L139:
  4951                        	.line	1209
  4952 06:9DAC: A9 01 00     	lda	#$1
  4953 06:9DAF: 8D xx xx     	sta	|~~reg_config_info+2
  4954                        ;
  4955                        ;   // now we think we know which devices, if any 
                    are there,
  4956                        ;   // so lets try a soft reset (ignoring any erro
                    rs).
  Thu Jul 29 2021 11:55                                                Page 96


  4957                        ;   k_debug_hex("sc2:",sc);
  4958                        L10057:
  4959                        	.line	1213
  4960 06:9DB2: D4 07        	pei	<L131+sc_1
  4961 06:9DB4: F4 xx xx     	pea	#^L129+38
  4962 06:9DB7: F4 xx xx     	pea	#<L129+38
  4963 06:9DBA: 22 xx xx xx  	jsl	~~k_debug_hex
  4964                        ;   k_debug_hex("sn2:",sn);
  4965                        	.line	1214
  4966 06:9DBE: D4 08        	pei	<L131+sn_1
  4967 06:9DC0: F4 xx xx     	pea	#^L129+43
  4968 06:9DC3: F4 xx xx     	pea	#<L129+43
  4969 06:9DC6: 22 xx xx xx  	jsl	~~k_debug_hex
  4970                        ;
  4971                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  4972                        	.line	1216
  4973 06:9DCA: F4 00 00     	pea	#<$0
  4974 06:9DCD: F4 06 00     	pea	#<$6
  4975 06:9DD0: 22 F0 B7 06  	jsl	~~pio_outbyte
  4976                        ;   DELAY400NS;
  4977                        	.line	1217
  4978                        	.line	1217
  4979 06:9DD4: F4 08 00     	pea	#<$8
  4980 06:9DD7: 22 B1 B7 06  	jsl	~~pio_inbyte
  4981                        	.line	1217
  4982 06:9DDB: F4 08 00     	pea	#<$8
  4983 06:9DDE: 22 B1 B7 06  	jsl	~~pio_inbyte
  4984                        	.line	1217
  4985 06:9DE2: F4 08 00     	pea	#<$8
  4986 06:9DE5: 22 B1 B7 06  	jsl	~~pio_inbyte
  4987                        	.line	1217
  4988 06:9DE9: F4 08 00     	pea	#<$8
  4989 06:9DEC: 22 B1 B7 06  	jsl	~~pio_inbyte
  4990                        	.line	1217
  4991 06:9DF0: F4 08 00     	pea	#<$8
  4992 06:9DF3: 22 B1 B7 06  	jsl	~~pio_inbyte
  4993                        	.line	1217
  4994                        	.line	1217
  4995                        ;   reg_reset( 0 );
  4996                        	.line	1218
  4997 06:9DF7: F4 00 00     	pea	#<$0
  4998 06:9DFA: 22 FA A0 06  	jsl	~~reg_reset
  4999                        ;
  5000                        ;   // lets check device 0 again, is device 0 real
                    ly there?
  5001                        ;   // is it ATA or ATAPI?
  5002                        ;
  5003                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  5004                        	.line	1223
  5005 06:9DFE: F4 00 00     	pea	#<$0
  5006 06:9E01: F4 06 00     	pea	#<$6
  5007 06:9E04: 22 F0 B7 06  	jsl	~~pio_outbyte
  5008                        ;   DELAY400NS;
  5009                        	.line	1224
  5010                        	.line	1224
  5011 06:9E08: F4 08 00     	pea	#<$8
  5012 06:9E0B: 22 B1 B7 06  	jsl	~~pio_inbyte
  5013                        	.line	1224
  Thu Jul 29 2021 11:55                                                Page 97


  5014 06:9E0F: F4 08 00     	pea	#<$8
  5015 06:9E12: 22 B1 B7 06  	jsl	~~pio_inbyte
  5016                        	.line	1224
  5017 06:9E16: F4 08 00     	pea	#<$8
  5018 06:9E19: 22 B1 B7 06  	jsl	~~pio_inbyte
  5019                        	.line	1224
  5020 06:9E1D: F4 08 00     	pea	#<$8
  5021 06:9E20: 22 B1 B7 06  	jsl	~~pio_inbyte
  5022                        	.line	1224
  5023 06:9E24: F4 08 00     	pea	#<$8
  5024 06:9E27: 22 B1 B7 06  	jsl	~~pio_inbyte
  5025                        	.line	1224
  5026                        	.line	1224
  5027                        ;   sc = pio_inbyte( CB_SC );
  5028                        	.line	1225
  5029 06:9E2B: F4 02 00     	pea	#<$2
  5030 06:9E2E: 22 B1 B7 06  	jsl	~~pio_inbyte
  5031 06:9E32: E2 20        	sep	#$20
  5032                        	longa	off
  5033 06:9E34: 85 07        	sta	<L131+sc_1
  5034 06:9E36: C2 20        	rep	#$20
  5035                        	longa	on
  5036                        ;   sn = pio_inbyte( CB_SN );
  5037                        	.line	1226
  5038 06:9E38: F4 03 00     	pea	#<$3
  5039 06:9E3B: 22 B1 B7 06  	jsl	~~pio_inbyte
  5040 06:9E3F: E2 20        	sep	#$20
  5041                        	longa	off
  5042 06:9E41: 85 08        	sta	<L131+sn_1
  5043 06:9E43: C2 20        	rep	#$20
  5044                        	longa	on
  5045                        ;
  5046                        ;   k_debug_hex("sc3:",sc);
  5047                        	.line	1228
  5048 06:9E45: D4 07        	pei	<L131+sc_1
  5049 06:9E47: F4 xx xx     	pea	#^L129+48
  5050 06:9E4A: F4 xx xx     	pea	#<L129+48
  5051 06:9E4D: 22 xx xx xx  	jsl	~~k_debug_hex
  5052                        ;   k_debug_hex("sn3:",sn);
  5053                        	.line	1229
  5054 06:9E51: D4 08        	pei	<L131+sn_1
  5055 06:9E53: F4 xx xx     	pea	#^L129+53
  5056 06:9E56: F4 xx xx     	pea	#<L129+53
  5057 06:9E59: 22 xx xx xx  	jsl	~~k_debug_hex
  5058                        ;
  5059                        ;   if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  5060                        	.line	1231
  5061                        ;   {
  5062 06:9E5D: E2 20        	sep	#$20
  5063                        	longa	off
  5064 06:9E5F: A5 07        	lda	<L131+sc_1
  5065 06:9E61: C9 01        	cmp	#<$1
  5066 06:9E63: C2 20        	rep	#$20
  5067                        	longa	on
  5068 06:9E65: F0 03        	beq	L140
  5069 06:9E67: 82 B5 00     	brl	L10058
  5070                        L140:
  5071 06:9E6A: E2 20        	sep	#$20
  Thu Jul 29 2021 11:55                                                Page 98


  5072                        	longa	off
  5073 06:9E6C: A5 08        	lda	<L131+sn_1
  5074 06:9E6E: C9 01        	cmp	#<$1
  5075 06:9E70: C2 20        	rep	#$20
  5076                        	longa	on
  5077 06:9E72: F0 03        	beq	L141
  5078 06:9E74: 82 A8 00     	brl	L10058
  5079                        L141:
  5080                        	.line	1232
  5081                        ;      reg_config_info[0] = REG_CONFIG_TYPE_UNKN;
  5082                        	.line	1233
  5083 06:9E77: A9 01 00     	lda	#$1
  5084 06:9E7A: 8D xx xx     	sta	|~~reg_config_info
  5085                        ;      st = pio_inbyte( CB_STAT );
  5086                        	.line	1234
  5087 06:9E7D: F4 07 00     	pea	#<$7
  5088 06:9E80: 22 B1 B7 06  	jsl	~~pio_inbyte
  5089 06:9E84: E2 20        	sep	#$20
  5090                        	longa	off
  5091 06:9E86: 85 0B        	sta	<L131+st_1
  5092 06:9E88: C2 20        	rep	#$20
  5093                        	longa	on
  5094                        ;      cl = pio_inbyte( CB_CL );
  5095                        	.line	1235
  5096 06:9E8A: F4 04 00     	pea	#<$4
  5097 06:9E8D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5098 06:9E91: E2 20        	sep	#$20
  5099                        	longa	off
  5100 06:9E93: 85 09        	sta	<L131+cl_1
  5101 06:9E95: C2 20        	rep	#$20
  5102                        	longa	on
  5103                        ;      ch = pio_inbyte( CB_CH );
  5104                        	.line	1236
  5105 06:9E97: F4 05 00     	pea	#<$5
  5106 06:9E9A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5107 06:9E9E: E2 20        	sep	#$20
  5108                        	longa	off
  5109 06:9EA0: 85 0A        	sta	<L131+ch_1
  5110 06:9EA2: C2 20        	rep	#$20
  5111                        	longa	on
  5112                        ;      if ( ( ( cl == 0x14 ) && ( ch == 0xeb ) )  
                         // PATAPI
  5113                        	.line	1237
  5114                        ;           ||
  5115                        ;           ( ( cl == 0x69 ) && ( ch == 0x96 ) )  
                         // SATAPI
  5116                        ;         )
  5117                        ;      {
  5118 06:9EA4: E2 20        	sep	#$20
  5119                        	longa	off
  5120 06:9EA6: A5 09        	lda	<L131+cl_1
  5121 06:9EA8: C9 14        	cmp	#<$14
  5122 06:9EAA: C2 20        	rep	#$20
  5123                        	longa	on
  5124 06:9EAC: F0 03        	beq	L144
  5125 06:9EAE: 82 0D 00     	brl	L143
  5126                        L144:
  5127 06:9EB1: E2 20        	sep	#$20
  Thu Jul 29 2021 11:55                                                Page 99


  5128                        	longa	off
  5129 06:9EB3: A5 0A        	lda	<L131+ch_1
  5130 06:9EB5: C9 EB        	cmp	#<$eb
  5131 06:9EB7: C2 20        	rep	#$20
  5132                        	longa	on
  5133 06:9EB9: D0 03        	bne	L145
  5134 06:9EBB: 82 1A 00     	brl	L142
  5135                        L145:
  5136                        L143:
  5137 06:9EBE: E2 20        	sep	#$20
  5138                        	longa	off
  5139 06:9EC0: A5 09        	lda	<L131+cl_1
  5140 06:9EC2: C9 69        	cmp	#<$69
  5141 06:9EC4: C2 20        	rep	#$20
  5142                        	longa	on
  5143 06:9EC6: F0 03        	beq	L146
  5144 06:9EC8: 82 16 00     	brl	L10059
  5145                        L146:
  5146 06:9ECB: E2 20        	sep	#$20
  5147                        	longa	off
  5148 06:9ECD: A5 0A        	lda	<L131+ch_1
  5149 06:9ECF: C9 96        	cmp	#<$96
  5150 06:9ED1: C2 20        	rep	#$20
  5151                        	longa	on
  5152 06:9ED3: F0 03        	beq	L147
  5153 06:9ED5: 82 09 00     	brl	L10059
  5154                        L147:
  5155                        L142:
  5156                        	.line	1241
  5157                        ;         reg_config_info[0] = REG_CONFIG_TYPE_ATA
                    PI;
  5158                        	.line	1242
  5159 06:9ED8: A9 03 00     	lda	#$3
  5160 06:9EDB: 8D xx xx     	sta	|~~reg_config_info
  5161                        ;      }
  5162                        	.line	1243
  5163                        ;      else
  5164 06:9EDE: 82 3E 00     	brl	L10060
  5165                        L10059:
  5166                        ;      if ( ( st != 0 )
  5167                        	.line	1245
  5168                        ;           &&
  5169                        ;           ( ( ( cl == 0x00 ) && ( ch == 0x00 ) )
                         // PATA
  5170                        ;             ||
  5171                        ;             ( ( cl == 0x3c ) && ( ch == 0xc3 ) )
                     )   // SATA
  5172                        ;         )
  5173                        ;      {
  5174 06:9EE1: A5 0B        	lda	<L131+st_1
  5175 06:9EE3: 29 FF 00     	and	#$ff
  5176 06:9EE6: D0 03        	bne	L148
  5177 06:9EE8: 82 34 00     	brl	L10061
  5178                        L148:
  5179 06:9EEB: A5 09        	lda	<L131+cl_1
  5180 06:9EED: 29 FF 00     	and	#$ff
  5181 06:9EF0: F0 03        	beq	L151
  5182 06:9EF2: 82 0A 00     	brl	L150
  Thu Jul 29 2021 11:55                                                Page 100


  5183                        L151:
  5184 06:9EF5: A5 0A        	lda	<L131+ch_1
  5185 06:9EF7: 29 FF 00     	and	#$ff
  5186 06:9EFA: D0 03        	bne	L152
  5187 06:9EFC: 82 1A 00     	brl	L149
  5188                        L152:
  5189                        L150:
  5190 06:9EFF: E2 20        	sep	#$20
  5191                        	longa	off
  5192 06:9F01: A5 09        	lda	<L131+cl_1
  5193 06:9F03: C9 3C        	cmp	#<$3c
  5194 06:9F05: C2 20        	rep	#$20
  5195                        	longa	on
  5196 06:9F07: F0 03        	beq	L153
  5197 06:9F09: 82 13 00     	brl	L10061
  5198                        L153:
  5199 06:9F0C: E2 20        	sep	#$20
  5200                        	longa	off
  5201 06:9F0E: A5 0A        	lda	<L131+ch_1
  5202 06:9F10: C9 C3        	cmp	#<$c3
  5203 06:9F12: C2 20        	rep	#$20
  5204                        	longa	on
  5205 06:9F14: F0 03        	beq	L154
  5206 06:9F16: 82 06 00     	brl	L10061
  5207                        L154:
  5208                        L149:
  5209                        	.line	1251
  5210                        ;         reg_config_info[0] = REG_CONFIG_TYPE_ATA
                    ;
  5211                        	.line	1252
  5212 06:9F19: A9 02 00     	lda	#$2
  5213 06:9F1C: 8D xx xx     	sta	|~~reg_config_info
  5214                        ;      }
  5215                        	.line	1253
  5216                        ;   }
  5217                        L10061:
  5218                        L10060:
  5219                        	.line	1254
  5220                        ;
  5221                        ;   // lets check device 1 again, is device 1 real
                    ly there?
  5222                        ;   // is it ATA or ATAPI?
  5223                        ;   k_debug_hex("reg_config_info[0]:",reg_config_i
                    nfo[0]);
  5224                        L10058:
  5225                        	.line	1258
  5226 06:9F1F: AD xx xx     	lda	|~~reg_config_info
  5227 06:9F22: 48           	pha
  5228 06:9F23: F4 xx xx     	pea	#^L129+58
  5229 06:9F26: F4 xx xx     	pea	#<L129+58
  5230 06:9F29: 22 xx xx xx  	jsl	~~k_debug_hex
  5231                        ;
  5232                        ;   pio_outbyte( CB_DH, CB_DH_DEV1 );
  5233                        	.line	1260
  5234 06:9F2D: F4 10 00     	pea	#<$10
  5235 06:9F30: F4 06 00     	pea	#<$6
  5236 06:9F33: 22 F0 B7 06  	jsl	~~pio_outbyte
  5237                        ;   DELAY400NS;
  Thu Jul 29 2021 11:55                                                Page 101


  5238                        	.line	1261
  5239                        	.line	1261
  5240 06:9F37: F4 08 00     	pea	#<$8
  5241 06:9F3A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5242                        	.line	1261
  5243 06:9F3E: F4 08 00     	pea	#<$8
  5244 06:9F41: 22 B1 B7 06  	jsl	~~pio_inbyte
  5245                        	.line	1261
  5246 06:9F45: F4 08 00     	pea	#<$8
  5247 06:9F48: 22 B1 B7 06  	jsl	~~pio_inbyte
  5248                        	.line	1261
  5249 06:9F4C: F4 08 00     	pea	#<$8
  5250 06:9F4F: 22 B1 B7 06  	jsl	~~pio_inbyte
  5251                        	.line	1261
  5252 06:9F53: F4 08 00     	pea	#<$8
  5253 06:9F56: 22 B1 B7 06  	jsl	~~pio_inbyte
  5254                        	.line	1261
  5255                        	.line	1261
  5256                        ;   sc = pio_inbyte( CB_SC );
  5257                        	.line	1262
  5258 06:9F5A: F4 02 00     	pea	#<$2
  5259 06:9F5D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5260 06:9F61: E2 20        	sep	#$20
  5261                        	longa	off
  5262 06:9F63: 85 07        	sta	<L131+sc_1
  5263 06:9F65: C2 20        	rep	#$20
  5264                        	longa	on
  5265                        ;   sn = pio_inbyte( CB_SN );
  5266                        	.line	1263
  5267 06:9F67: F4 03 00     	pea	#<$3
  5268 06:9F6A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5269 06:9F6E: E2 20        	sep	#$20
  5270                        	longa	off
  5271 06:9F70: 85 08        	sta	<L131+sn_1
  5272 06:9F72: C2 20        	rep	#$20
  5273                        	longa	on
  5274                        ;
  5275                        ;   k_debug_hex("sc4:",sc);
  5276                        	.line	1265
  5277 06:9F74: D4 07        	pei	<L131+sc_1
  5278 06:9F76: F4 xx xx     	pea	#^L129+78
  5279 06:9F79: F4 xx xx     	pea	#<L129+78
  5280 06:9F7C: 22 xx xx xx  	jsl	~~k_debug_hex
  5281                        ;   k_debug_hex("sn4:",sn);
  5282                        	.line	1266
  5283 06:9F80: D4 08        	pei	<L131+sn_1
  5284 06:9F82: F4 xx xx     	pea	#^L129+83
  5285 06:9F85: F4 xx xx     	pea	#<L129+83
  5286 06:9F88: 22 xx xx xx  	jsl	~~k_debug_hex
  5287                        ;
  5288                        ;   if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  5289                        	.line	1268
  5290                        ;   {
  5291 06:9F8C: E2 20        	sep	#$20
  5292                        	longa	off
  5293 06:9F8E: A5 07        	lda	<L131+sc_1
  5294 06:9F90: C9 01        	cmp	#<$1
  5295 06:9F92: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 102


  5296                        	longa	on
  5297 06:9F94: F0 03        	beq	L155
  5298 06:9F96: 82 B5 00     	brl	L10062
  5299                        L155:
  5300 06:9F99: E2 20        	sep	#$20
  5301                        	longa	off
  5302 06:9F9B: A5 08        	lda	<L131+sn_1
  5303 06:9F9D: C9 01        	cmp	#<$1
  5304 06:9F9F: C2 20        	rep	#$20
  5305                        	longa	on
  5306 06:9FA1: F0 03        	beq	L156
  5307 06:9FA3: 82 A8 00     	brl	L10062
  5308                        L156:
  5309                        	.line	1269
  5310                        ;      reg_config_info[1] = REG_CONFIG_TYPE_UNKN;
  5311                        	.line	1270
  5312 06:9FA6: A9 01 00     	lda	#$1
  5313 06:9FA9: 8D xx xx     	sta	|~~reg_config_info+2
  5314                        ;      st = pio_inbyte( CB_STAT );
  5315                        	.line	1271
  5316 06:9FAC: F4 07 00     	pea	#<$7
  5317 06:9FAF: 22 B1 B7 06  	jsl	~~pio_inbyte
  5318 06:9FB3: E2 20        	sep	#$20
  5319                        	longa	off
  5320 06:9FB5: 85 0B        	sta	<L131+st_1
  5321 06:9FB7: C2 20        	rep	#$20
  5322                        	longa	on
  5323                        ;      cl = pio_inbyte( CB_CL );
  5324                        	.line	1272
  5325 06:9FB9: F4 04 00     	pea	#<$4
  5326 06:9FBC: 22 B1 B7 06  	jsl	~~pio_inbyte
  5327 06:9FC0: E2 20        	sep	#$20
  5328                        	longa	off
  5329 06:9FC2: 85 09        	sta	<L131+cl_1
  5330 06:9FC4: C2 20        	rep	#$20
  5331                        	longa	on
  5332                        ;      ch = pio_inbyte( CB_CH );
  5333                        	.line	1273
  5334 06:9FC6: F4 05 00     	pea	#<$5
  5335 06:9FC9: 22 B1 B7 06  	jsl	~~pio_inbyte
  5336 06:9FCD: E2 20        	sep	#$20
  5337                        	longa	off
  5338 06:9FCF: 85 0A        	sta	<L131+ch_1
  5339 06:9FD1: C2 20        	rep	#$20
  5340                        	longa	on
  5341                        ;      if ( ( ( cl == 0x14 ) && ( ch == 0xeb ) )  
                         // PATAPI
  5342                        	.line	1274
  5343                        ;           ||
  5344                        ;           ( ( cl == 0x69 ) && ( ch == 0x96 ) )  
                         // SATAPI
  5345                        ;         )
  5346                        ;      {
  5347 06:9FD3: E2 20        	sep	#$20
  5348                        	longa	off
  5349 06:9FD5: A5 09        	lda	<L131+cl_1
  5350 06:9FD7: C9 14        	cmp	#<$14
  5351 06:9FD9: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 103


  5352                        	longa	on
  5353 06:9FDB: F0 03        	beq	L159
  5354 06:9FDD: 82 0D 00     	brl	L158
  5355                        L159:
  5356 06:9FE0: E2 20        	sep	#$20
  5357                        	longa	off
  5358 06:9FE2: A5 0A        	lda	<L131+ch_1
  5359 06:9FE4: C9 EB        	cmp	#<$eb
  5360 06:9FE6: C2 20        	rep	#$20
  5361                        	longa	on
  5362 06:9FE8: D0 03        	bne	L160
  5363 06:9FEA: 82 1A 00     	brl	L157
  5364                        L160:
  5365                        L158:
  5366 06:9FED: E2 20        	sep	#$20
  5367                        	longa	off
  5368 06:9FEF: A5 09        	lda	<L131+cl_1
  5369 06:9FF1: C9 69        	cmp	#<$69
  5370 06:9FF3: C2 20        	rep	#$20
  5371                        	longa	on
  5372 06:9FF5: F0 03        	beq	L161
  5373 06:9FF7: 82 16 00     	brl	L10063
  5374                        L161:
  5375 06:9FFA: E2 20        	sep	#$20
  5376                        	longa	off
  5377 06:9FFC: A5 0A        	lda	<L131+ch_1
  5378 06:9FFE: C9 96        	cmp	#<$96
  5379 06:A000: C2 20        	rep	#$20
  5380                        	longa	on
  5381 06:A002: F0 03        	beq	L162
  5382 06:A004: 82 09 00     	brl	L10063
  5383                        L162:
  5384                        L157:
  5385                        	.line	1278
  5386                        ;         reg_config_info[1] = REG_CONFIG_TYPE_ATA
                    PI;
  5387                        	.line	1279
  5388 06:A007: A9 03 00     	lda	#$3
  5389 06:A00A: 8D xx xx     	sta	|~~reg_config_info+2
  5390                        ;      }
  5391                        	.line	1280
  5392                        ;      else
  5393 06:A00D: 82 3E 00     	brl	L10064
  5394                        L10063:
  5395                        ;      if ( ( st != 0 )
  5396                        	.line	1282
  5397                        ;           &&
  5398                        ;           ( ( ( cl == 0x00 ) && ( ch == 0x00 ) )
                         // PATA
  5399                        ;             ||
  5400                        ;             ( ( cl == 0x3c ) && ( ch == 0xc3 ) )
                     )   // SATA
  5401                        ;         )
  5402                        ;      {
  5403 06:A010: A5 0B        	lda	<L131+st_1
  5404 06:A012: 29 FF 00     	and	#$ff
  5405 06:A015: D0 03        	bne	L163
  5406 06:A017: 82 34 00     	brl	L10065
  Thu Jul 29 2021 11:55                                                Page 104


  5407                        L163:
  5408 06:A01A: A5 09        	lda	<L131+cl_1
  5409 06:A01C: 29 FF 00     	and	#$ff
  5410 06:A01F: F0 03        	beq	L166
  5411 06:A021: 82 0A 00     	brl	L165
  5412                        L166:
  5413 06:A024: A5 0A        	lda	<L131+ch_1
  5414 06:A026: 29 FF 00     	and	#$ff
  5415 06:A029: D0 03        	bne	L167
  5416 06:A02B: 82 1A 00     	brl	L164
  5417                        L167:
  5418                        L165:
  5419 06:A02E: E2 20        	sep	#$20
  5420                        	longa	off
  5421 06:A030: A5 09        	lda	<L131+cl_1
  5422 06:A032: C9 3C        	cmp	#<$3c
  5423 06:A034: C2 20        	rep	#$20
  5424                        	longa	on
  5425 06:A036: F0 03        	beq	L168
  5426 06:A038: 82 13 00     	brl	L10065
  5427                        L168:
  5428 06:A03B: E2 20        	sep	#$20
  5429                        	longa	off
  5430 06:A03D: A5 0A        	lda	<L131+ch_1
  5431 06:A03F: C9 C3        	cmp	#<$c3
  5432 06:A041: C2 20        	rep	#$20
  5433                        	longa	on
  5434 06:A043: F0 03        	beq	L169
  5435 06:A045: 82 06 00     	brl	L10065
  5436                        L169:
  5437                        L164:
  5438                        	.line	1288
  5439                        ;         reg_config_info[1] = REG_CONFIG_TYPE_ATA
                    ;
  5440                        	.line	1289
  5441 06:A048: A9 02 00     	lda	#$2
  5442 06:A04B: 8D xx xx     	sta	|~~reg_config_info+2
  5443                        ;      }
  5444                        	.line	1290
  5445                        ;   }
  5446                        L10065:
  5447                        L10064:
  5448                        	.line	1291
  5449                        ;
  5450                        ;   k_debug_hex("reg_config_info[1]:",reg_config_i
                    nfo[1]);
  5451                        L10062:
  5452                        	.line	1293
  5453 06:A04E: AD xx xx     	lda	|~~reg_config_info+2
  5454 06:A051: 48           	pha
  5455 06:A052: F4 xx xx     	pea	#^L129+88
  5456 06:A055: F4 xx xx     	pea	#<L129+88
  5457 06:A058: 22 xx xx xx  	jsl	~~k_debug_hex
  5458                        ;   // If possible, select a device that exists, t
                    ry device 0 first.
  5459                        ;
  5460                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  Thu Jul 29 2021 11:55                                                Page 105


  5461                        	.line	1296
  5462                        ;   {
  5463 06:A05C: AD xx xx     	lda	|~~reg_config_info+2
  5464 06:A05F: D0 03        	bne	L170
  5465 06:A061: 82 2F 00     	brl	L10066
  5466                        L170:
  5467                        	.line	1297
  5468                        ;      pio_outbyte( CB_DH, CB_DH_DEV1 );
  5469                        	.line	1298
  5470 06:A064: F4 10 00     	pea	#<$10
  5471 06:A067: F4 06 00     	pea	#<$6
  5472 06:A06A: 22 F0 B7 06  	jsl	~~pio_outbyte
  5473                        ;      DELAY400NS;
  5474                        	.line	1299
  5475                        	.line	1299
  5476 06:A06E: F4 08 00     	pea	#<$8
  5477 06:A071: 22 B1 B7 06  	jsl	~~pio_inbyte
  5478                        	.line	1299
  5479 06:A075: F4 08 00     	pea	#<$8
  5480 06:A078: 22 B1 B7 06  	jsl	~~pio_inbyte
  5481                        	.line	1299
  5482 06:A07C: F4 08 00     	pea	#<$8
  5483 06:A07F: 22 B1 B7 06  	jsl	~~pio_inbyte
  5484                        	.line	1299
  5485 06:A083: F4 08 00     	pea	#<$8
  5486 06:A086: 22 B1 B7 06  	jsl	~~pio_inbyte
  5487                        	.line	1299
  5488 06:A08A: F4 08 00     	pea	#<$8
  5489 06:A08D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5490                        	.line	1299
  5491                        	.line	1299
  5492                        ;      numDev ++ ;
  5493                        	.line	1300
  5494 06:A091: E6 05        	inc	<L131+numDev_1
  5495                        ;   }
  5496                        	.line	1301
  5497                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  5498                        L10066:
  5499                        	.line	1302
  5500                        ;   {
  5501 06:A093: AD xx xx     	lda	|~~reg_config_info
  5502 06:A096: D0 03        	bne	L171
  5503 06:A098: 82 2F 00     	brl	L10067
  5504                        L171:
  5505                        	.line	1303
  5506                        ;      pio_outbyte( CB_DH, CB_DH_DEV0 );
  5507                        	.line	1304
  5508 06:A09B: F4 00 00     	pea	#<$0
  5509 06:A09E: F4 06 00     	pea	#<$6
  5510 06:A0A1: 22 F0 B7 06  	jsl	~~pio_outbyte
  5511                        ;      DELAY400NS;
  5512                        	.line	1305
  5513                        	.line	1305
  5514 06:A0A5: F4 08 00     	pea	#<$8
  5515 06:A0A8: 22 B1 B7 06  	jsl	~~pio_inbyte
  5516                        	.line	1305
  5517 06:A0AC: F4 08 00     	pea	#<$8
  Thu Jul 29 2021 11:55                                                Page 106


  5518 06:A0AF: 22 B1 B7 06  	jsl	~~pio_inbyte
  5519                        	.line	1305
  5520 06:A0B3: F4 08 00     	pea	#<$8
  5521 06:A0B6: 22 B1 B7 06  	jsl	~~pio_inbyte
  5522                        	.line	1305
  5523 06:A0BA: F4 08 00     	pea	#<$8
  5524 06:A0BD: 22 B1 B7 06  	jsl	~~pio_inbyte
  5525                        	.line	1305
  5526 06:A0C1: F4 08 00     	pea	#<$8
  5527 06:A0C4: 22 B1 B7 06  	jsl	~~pio_inbyte
  5528                        	.line	1305
  5529                        	.line	1305
  5530                        ;      numDev ++ ;
  5531                        	.line	1306
  5532 06:A0C8: E6 05        	inc	<L131+numDev_1
  5533                        ;   }
  5534                        	.line	1307
  5535                        ;
  5536                        ;   // BMIDE Error=1?
  5537                        ;
  5538                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  5539                        L10067:
  5540                        	.line	1311
  5541                        ;   {
  5542 06:A0CA: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  5543 06:A0CE: E2 20        	sep	#$20
  5544                        	longa	off
  5545 06:A0D0: 29 02        	and	#<$2
  5546 06:A0D2: C2 20        	rep	#$20
  5547                        	longa	on
  5548 06:A0D4: D0 03        	bne	L172
  5549 06:A0D6: 82 09 00     	brl	L10068
  5550                        L172:
  5551                        	.line	1312
  5552                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  5553                        	.line	1313
  5554 06:A0D9: E2 20        	sep	#$20
  5555                        	longa	off
  5556 06:A0DB: A9 4E        	lda	#$4e
  5557 06:A0DD: 8D xx xx     	sta	|~~reg_cmd_info+31
  5558 06:A0E0: C2 20        	rep	#$20
  5559                        	longa	on
  5560                        ;   }
  5561                        	.line	1314
  5562                        ;
  5563                        ;   // return the number of devices found
  5564                        ;   k_debug_hex("numDev:",numDev);
  5565                        L10068:
  5566                        	.line	1317
  5567 06:A0E2: D4 05        	pei	<L131+numDev_1
  5568 06:A0E4: F4 xx xx     	pea	#^L129+108
  5569 06:A0E7: F4 xx xx     	pea	#<L129+108
  5570 06:A0EA: 22 xx xx xx  	jsl	~~k_debug_hex
  5571                        ;
  5572                        ;   return numDev;
  5573                        	.line	1319
  Thu Jul 29 2021 11:55                                                Page 107


  5574 06:A0EE: A5 05        	lda	<L131+numDev_1
  5575                        L173:
  5576 06:A0F0: A8           	tay
  5577 06:A0F1: 2B           	pld
  5578 06:A0F2: 3B           	tsc
  5579 06:A0F3: 18           	clc
  5580 06:A0F4: 69 0C 00     	adc	#L130
  5581 06:A0F7: 1B           	tcs
  5582 06:A0F8: 98           	tya
  5583 06:A0F9: 6B           	rtl
  5584                        ;}
  5585                        	.line	1320
  5586                        	.endblock	1320
  5587             0000000C   L130	equ	12
  5588             00000005   L131	equ	5
  5589 06:A0FA:              	ends
  5590                        	efunc
  5591                        	.endfunc	1320,5,12
  5592                        	.line	1320
  5593                        	data
  5594                        L129:
  5595 00:0379: 64 63 3A 00  	db	$64,$63,$3A,$00,$70,$69,$6F,$5F,$77,$72,
                    $69,$74,$65,$42,$75
       00:037D: 70 69 6F 5F 
       00:0381: 77 72 69 74 
       00:0385: 65 42 75 
  5596 00:0388: 73 4D 73 74  	db	$73,$4D,$73,$74,$72,$53,$74,$61,$74,$75,
                    $73,$3A,$00,$73,$63
       00:038C: 72 53 74 61 
       00:0390: 74 75 73 3A 
       00:0394: 00 73 63 
  5597 00:0397: 31 3A 00 73  	db	$31,$3A,$00,$73,$6E,$31,$3A,$00,$73,$63,
                    $32,$3A,$00,$73,$6E
       00:039B: 6E 31 3A 00 
       00:039F: 73 63 32 3A 
       00:03A3: 00 73 6E 
  5598 00:03A6: 32 3A 00 73  	db	$32,$3A,$00,$73,$63,$33,$3A,$00,$73,$6E,
                    $33,$3A,$00,$72,$65
       00:03AA: 63 33 3A 00 
       00:03AE: 73 6E 33 3A 
       00:03B2: 00 72 65 
  5599 00:03B5: 67 5F 63 6F  	db	$67,$5F,$63,$6F,$6E,$66,$69,$67,$5F,$69,
                    $6E,$66,$6F,$5B,$30
       00:03B9: 6E 66 69 67 
       00:03BD: 5F 69 6E 66 
       00:03C1: 6F 5B 30 
  5600 00:03C4: 5D 3A 00 73  	db	$5D,$3A,$00,$73,$63,$34,$3A,$00,$73,$6E,
                    $34,$3A,$00,$72,$65
       00:03C8: 63 34 3A 00 
       00:03CC: 73 6E 34 3A 
       00:03D0: 00 72 65 
  5601 00:03D3: 67 5F 63 6F  	db	$67,$5F,$63,$6F,$6E,$66,$69,$67,$5F,$69,
                    $6E,$66,$6F,$5B,$31
       00:03D7: 6E 66 69 67 
       00:03DB: 5F 69 6E 66 
       00:03DF: 6F 5B 31 
  5602 00:03E2: 5D 3A 00 6E  	db	$5D,$3A,$00,$6E,$75,$6D,$44,$65,$76,$3A,
                    $00
  Thu Jul 29 2021 11:55                                                Page 108


       00:03E6: 75 6D 44 65 
       00:03EA: 76 3A 00 
  5603 00:03ED:              	ends
  5604                        ;
  5605                        ;//***********************************************
                    **************
  5606                        ;//
  5607                        ;// reg_reset() - Execute a Software Reset.
  5608                        ;//
  5609                        ;// See ATA-2 Section 9.2, ATA-3 Section 9.2, ATA-
                    4 Section 8.3.
  5610                        ;//
  5611                        ;//***********************************************
                    **************
  5612                        ;
  5613                        ;int reg_reset( unsigned char devRtrn )
  5614                        ;
  5615                        ;{
  5616                        	.line	1330
  5617                        	.line	1332
  5618                        	FXHDD
  5619                        	xdef	~~reg_reset
  5620                        	func
  5621                        	.function	1332
  5622                        ~~reg_reset:
  5623                        	longa	on
  5624                        	longi	on
  5625 06:A0FA: 3B           	tsc
  5626 06:A0FB: 38           	sec
  5627 06:A0FC: E9 08 00     	sbc	#L175
  5628 06:A0FF: 1B           	tcs
  5629 06:A100: 0B           	phd
  5630 06:A101: 5B           	tcd
  5631             00000004   devRtrn_0	set	4
  5632                        	.block	1332
  5633                        ;   unsigned char sc;
  5634                        ;   unsigned char sn;
  5635                        ;   unsigned char status;
  5636                        ;   unsigned char dc;
  5637                        ;
  5638                        ;   // setup register values
  5639                        ;
  5640                        ;   dc = (unsigned char) ( int_use_intr_flag ? 0 :
                     CB_DC_NIEN );
  5641             00000000   sc_1	set	0
  5642             00000001   sn_1	set	1
  5643             00000002   status_1	set	2
  5644             00000003   dc_1	set	3
  5645                        	.sym	sc,0,14,1,8
  5646                        	.sym	sn,1,14,1,8
  5647                        	.sym	status,2,14,1,8
  5648                        	.sym	dc,3,14,1,8
  5649                        	.sym	devRtrn,4,14,6,8
  5650                        	.line	1340
  5651 06:A102: AD xx xx     	lda	|~~int_use_intr_flag
  5652 06:A105: 29 FF 00     	and	#$ff
  5653 06:A108: D0 03        	bne	L179
  5654 06:A10A: 82 05 00     	brl	L178
  Thu Jul 29 2021 11:55                                                Page 109


  5655                        L179:
  5656 06:A10D: A9 00 00     	lda	#$0
  5657 06:A110: 80 03        	bra	L180
  5658                        L178:
  5659 06:A112: A9 02 00     	lda	#$2
  5660                        L180:
  5661 06:A115: 85 01        	sta	<R0
  5662 06:A117: E2 20        	sep	#$20
  5663                        	longa	off
  5664 06:A119: A5 01        	lda	<R0
  5665 06:A11B: 85 08        	sta	<L176+dc_1
  5666 06:A11D: C2 20        	rep	#$20
  5667                        	longa	on
  5668                        ;
  5669                        ;   k_debug_hex("reg_reset:dc:",dc);
  5670                        	.line	1342
  5671 06:A11F: D4 08        	pei	<L176+dc_1
  5672 06:A121: F4 xx xx     	pea	#^L174
  5673 06:A124: F4 xx xx     	pea	#<L174
  5674 06:A127: 22 xx xx xx  	jsl	~~k_debug_hex
  5675                        ;
  5676                        ;   // reset Bus Master Error bit
  5677                        ;
  5678                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  5679                        	.line	1346
  5680 06:A12B: F4 02 00     	pea	#<$2
  5681 06:A12E: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  5682                        ;
  5683                        ;   // initialize the command timeout counter
  5684                        ;
  5685                        ;   k_debug_hex("reg_reset:tmr_set_timeout:",dc);
  5686                        	.line	1350
  5687 06:A132: D4 08        	pei	<L176+dc_1
  5688 06:A134: F4 xx xx     	pea	#^L174+14
  5689 06:A137: F4 xx xx     	pea	#<L174+14
  5690 06:A13A: 22 xx xx xx  	jsl	~~k_debug_hex
  5691                        ;   tmr_set_timeout();
  5692                        	.line	1351
  5693 06:A13E: 22 00 BD 06  	jsl	~~tmr_set_timeout
  5694                        ;
  5695                        ;   // Set and then reset the soft reset bit in th
                    e Device Control
  5696                        ;   // register.  This causes device 0 be selected
                    .
  5697                        ;
  5698                        ;   pio_outbyte( CB_DC, (unsigned char) ( dc | CB_
                    DC_SRST ) );
  5699                        	.line	1356
  5700 06:A142: A5 08        	lda	<L176+dc_1
  5701 06:A144: 29 FF 00     	and	#$ff
  5702 06:A147: 09 04 00     	ora	#<$4
  5703 06:A14A: 48           	pha
  5704 06:A14B: F4 08 00     	pea	#<$8
  5705 06:A14E: 22 F0 B7 06  	jsl	~~pio_outbyte
  5706                        ;   DELAY400NS;
  5707                        	.line	1357
  5708                        	.line	1357
  5709 06:A152: F4 08 00     	pea	#<$8
  Thu Jul 29 2021 11:55                                                Page 110


  5710 06:A155: 22 B1 B7 06  	jsl	~~pio_inbyte
  5711                        	.line	1357
  5712 06:A159: F4 08 00     	pea	#<$8
  5713 06:A15C: 22 B1 B7 06  	jsl	~~pio_inbyte
  5714                        	.line	1357
  5715 06:A160: F4 08 00     	pea	#<$8
  5716 06:A163: 22 B1 B7 06  	jsl	~~pio_inbyte
  5717                        	.line	1357
  5718 06:A167: F4 08 00     	pea	#<$8
  5719 06:A16A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5720                        	.line	1357
  5721 06:A16E: F4 08 00     	pea	#<$8
  5722 06:A171: 22 B1 B7 06  	jsl	~~pio_inbyte
  5723                        	.line	1357
  5724                        	.line	1357
  5725                        ;   pio_outbyte( CB_DC, dc );
  5726                        	.line	1358
  5727 06:A175: D4 08        	pei	<L176+dc_1
  5728 06:A177: F4 08 00     	pea	#<$8
  5729 06:A17A: 22 F0 B7 06  	jsl	~~pio_outbyte
  5730                        ;   DELAY400NS;
  5731                        	.line	1359
  5732                        	.line	1359
  5733 06:A17E: F4 08 00     	pea	#<$8
  5734 06:A181: 22 B1 B7 06  	jsl	~~pio_inbyte
  5735                        	.line	1359
  5736 06:A185: F4 08 00     	pea	#<$8
  5737 06:A188: 22 B1 B7 06  	jsl	~~pio_inbyte
  5738                        	.line	1359
  5739 06:A18C: F4 08 00     	pea	#<$8
  5740 06:A18F: 22 B1 B7 06  	jsl	~~pio_inbyte
  5741                        	.line	1359
  5742 06:A193: F4 08 00     	pea	#<$8
  5743 06:A196: 22 B1 B7 06  	jsl	~~pio_inbyte
  5744                        	.line	1359
  5745 06:A19A: F4 08 00     	pea	#<$8
  5746 06:A19D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5747                        	.line	1359
  5748                        	.line	1359
  5749                        ;
  5750                        ;   // If there is a device 0, wait for device 0 t
                    o set BSY=0.
  5751                        ;
  5752                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  5753                        	.line	1363
  5754                        ;   {
  5755 06:A1A1: AD xx xx     	lda	|~~reg_config_info
  5756 06:A1A4: D0 03        	bne	L181
  5757 06:A1A6: 82 3C 00     	brl	L10069
  5758                        L181:
  5759                        	.line	1364
  5760                        ;      while ( 1 )
  5761                        	.line	1365
  5762                        L10070:
  5763                        ;      {
  5764                        	.line	1366
  5765                        ;         status = pio_inbyte( CB_STAT );
  Thu Jul 29 2021 11:55                                                Page 111


  5766                        	.line	1367
  5767 06:A1A9: F4 07 00     	pea	#<$7
  5768 06:A1AC: 22 B1 B7 06  	jsl	~~pio_inbyte
  5769 06:A1B0: E2 20        	sep	#$20
  5770                        	longa	off
  5771 06:A1B2: 85 07        	sta	<L176+status_1
  5772 06:A1B4: C2 20        	rep	#$20
  5773                        	longa	on
  5774                        ;         if ( ( status & CB_STAT_BSY ) == 0 )
  5775                        	.line	1368
  5776                        ;            break;
  5777 06:A1B6: E2 20        	sep	#$20
  5778                        	longa	off
  5779 06:A1B8: A5 07        	lda	<L176+status_1
  5780 06:A1BA: 29 80        	and	#<$80
  5781 06:A1BC: C2 20        	rep	#$20
  5782                        	longa	on
  5783 06:A1BE: D0 03        	bne	L182
  5784 06:A1C0: 82 22 00     	brl	L10071
  5785                        L182:
  5786                        ;         if ( tmr_chk_timeout() )
  5787                        	.line	1370
  5788                        ;         {
  5789 06:A1C3: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  5790 06:A1C7: AA           	tax
  5791 06:A1C8: D0 03        	bne	L183
  5792 06:A1CA: 82 15 00     	brl	L10072
  5793                        L183:
  5794                        	.line	1371
  5795                        ;            reg_cmd_info.to = 1;
  5796                        	.line	1372
  5797 06:A1CD: E2 20        	sep	#$20
  5798                        	longa	off
  5799 06:A1CF: A9 01        	lda	#$1
  5800 06:A1D1: 8D xx xx     	sta	|~~reg_cmd_info+32
  5801 06:A1D4: C2 20        	rep	#$20
  5802                        	longa	on
  5803                        ;            reg_cmd_info.ec = 1;
  5804                        	.line	1373
  5805 06:A1D6: E2 20        	sep	#$20
  5806                        	longa	off
  5807 06:A1D8: A9 01        	lda	#$1
  5808 06:A1DA: 8D xx xx     	sta	|~~reg_cmd_info+31
  5809 06:A1DD: C2 20        	rep	#$20
  5810                        	longa	on
  5811                        ;            break;
  5812                        	.line	1374
  5813 06:A1DF: 82 03 00     	brl	L10071
  5814                        ;         }
  5815                        	.line	1375
  5816                        ;      }
  5817                        L10072:
  5818                        	.line	1376
  5819 06:A1E2: 82 C4 FF     	brl	L10070
  5820                        L10071:
  5821                        ;   }
  5822                        	.line	1377
  5823                        ;
  Thu Jul 29 2021 11:55                                                Page 112


  5824                        ;   // If there is a device 1, wait until device 1
                     allows
  5825                        ;   // register access.
  5826                        ;
  5827                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  5828                        L10069:
  5829                        	.line	1382
  5830                        ;   {
  5831 06:A1E5: AD xx xx     	lda	|~~reg_config_info+2
  5832 06:A1E8: D0 03        	bne	L184
  5833 06:A1EA: 82 A9 00     	brl	L10073
  5834                        L184:
  5835                        	.line	1383
  5836                        ;      while ( 1 )
  5837                        	.line	1384
  5838                        L10074:
  5839                        ;      {
  5840                        	.line	1385
  5841                        ;         pio_outbyte( CB_DH, CB_DH_DEV1 );
  5842                        	.line	1386
  5843 06:A1ED: F4 10 00     	pea	#<$10
  5844 06:A1F0: F4 06 00     	pea	#<$6
  5845 06:A1F3: 22 F0 B7 06  	jsl	~~pio_outbyte
  5846                        ;         DELAY400NS;
  5847                        	.line	1387
  5848                        	.line	1387
  5849 06:A1F7: F4 08 00     	pea	#<$8
  5850 06:A1FA: 22 B1 B7 06  	jsl	~~pio_inbyte
  5851                        	.line	1387
  5852 06:A1FE: F4 08 00     	pea	#<$8
  5853 06:A201: 22 B1 B7 06  	jsl	~~pio_inbyte
  5854                        	.line	1387
  5855 06:A205: F4 08 00     	pea	#<$8
  5856 06:A208: 22 B1 B7 06  	jsl	~~pio_inbyte
  5857                        	.line	1387
  5858 06:A20C: F4 08 00     	pea	#<$8
  5859 06:A20F: 22 B1 B7 06  	jsl	~~pio_inbyte
  5860                        	.line	1387
  5861 06:A213: F4 08 00     	pea	#<$8
  5862 06:A216: 22 B1 B7 06  	jsl	~~pio_inbyte
  5863                        	.line	1387
  5864                        	.line	1387
  5865                        ;         sc = pio_inbyte( CB_SC );
  5866                        	.line	1388
  5867 06:A21A: F4 02 00     	pea	#<$2
  5868 06:A21D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5869 06:A221: E2 20        	sep	#$20
  5870                        	longa	off
  5871 06:A223: 85 05        	sta	<L176+sc_1
  5872 06:A225: C2 20        	rep	#$20
  5873                        	longa	on
  5874                        ;         sn = pio_inbyte( CB_SN );
  5875                        	.line	1389
  5876 06:A227: F4 03 00     	pea	#<$3
  5877 06:A22A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5878 06:A22E: E2 20        	sep	#$20
  5879                        	longa	off
  Thu Jul 29 2021 11:55                                                Page 113


  5880 06:A230: 85 06        	sta	<L176+sn_1
  5881 06:A232: C2 20        	rep	#$20
  5882                        	longa	on
  5883                        ;         if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  5884                        	.line	1390
  5885                        ;            break;
  5886 06:A234: E2 20        	sep	#$20
  5887                        	longa	off
  5888 06:A236: A5 05        	lda	<L176+sc_1
  5889 06:A238: C9 01        	cmp	#<$1
  5890 06:A23A: C2 20        	rep	#$20
  5891                        	longa	on
  5892 06:A23C: F0 03        	beq	L186
  5893 06:A23E: 82 0D 00     	brl	L185
  5894                        L186:
  5895 06:A241: E2 20        	sep	#$20
  5896                        	longa	off
  5897 06:A243: A5 06        	lda	<L176+sn_1
  5898 06:A245: C9 01        	cmp	#<$1
  5899 06:A247: C2 20        	rep	#$20
  5900                        	longa	on
  5901 06:A249: D0 03        	bne	L187
  5902 06:A24B: 82 22 00     	brl	L10075
  5903                        L187:
  5904                        L185:
  5905                        ;         if ( tmr_chk_timeout() )
  5906                        	.line	1392
  5907                        ;         {
  5908 06:A24E: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  5909 06:A252: AA           	tax
  5910 06:A253: D0 03        	bne	L188
  5911 06:A255: 82 15 00     	brl	L10076
  5912                        L188:
  5913                        	.line	1393
  5914                        ;            reg_cmd_info.to = 1;
  5915                        	.line	1394
  5916 06:A258: E2 20        	sep	#$20
  5917                        	longa	off
  5918 06:A25A: A9 01        	lda	#$1
  5919 06:A25C: 8D xx xx     	sta	|~~reg_cmd_info+32
  5920 06:A25F: C2 20        	rep	#$20
  5921                        	longa	on
  5922                        ;            reg_cmd_info.ec = 2;
  5923                        	.line	1395
  5924 06:A261: E2 20        	sep	#$20
  5925                        	longa	off
  5926 06:A263: A9 02        	lda	#$2
  5927 06:A265: 8D xx xx     	sta	|~~reg_cmd_info+31
  5928 06:A268: C2 20        	rep	#$20
  5929                        	longa	on
  5930                        ;            break;
  5931                        	.line	1396
  5932 06:A26A: 82 03 00     	brl	L10075
  5933                        ;         }
  5934                        	.line	1397
  5935                        ;      }
  5936                        L10076:
  5937                        	.line	1398
  Thu Jul 29 2021 11:55                                                Page 114


  5938 06:A26D: 82 7D FF     	brl	L10074
  5939                        L10075:
  5940                        ;
  5941                        ;      // Now check if drive 1 set BSY=0.
  5942                        ;
  5943                        ;      if ( reg_cmd_info.ec == 0 )
  5944                        	.line	1402
  5945                        ;      {
  5946 06:A270: AD xx xx     	lda	|~~reg_cmd_info+31
  5947 06:A273: 29 FF 00     	and	#$ff
  5948 06:A276: F0 03        	beq	L189
  5949 06:A278: 82 1B 00     	brl	L10077
  5950                        L189:
  5951                        	.line	1403
  5952                        ;         if ( pio_inbyte( CB_STAT ) & CB_STAT_BSY
                     )
  5953                        	.line	1404
  5954                        ;         {
  5955 06:A27B: F4 07 00     	pea	#<$7
  5956 06:A27E: 22 B1 B7 06  	jsl	~~pio_inbyte
  5957 06:A282: E2 20        	sep	#$20
  5958                        	longa	off
  5959 06:A284: 29 80        	and	#<$80
  5960 06:A286: C2 20        	rep	#$20
  5961                        	longa	on
  5962 06:A288: D0 03        	bne	L190
  5963 06:A28A: 82 09 00     	brl	L10078
  5964                        L190:
  5965                        	.line	1405
  5966                        ;            reg_cmd_info.ec = 3;
  5967                        	.line	1406
  5968 06:A28D: E2 20        	sep	#$20
  5969                        	longa	off
  5970 06:A28F: A9 03        	lda	#$3
  5971 06:A291: 8D xx xx     	sta	|~~reg_cmd_info+31
  5972 06:A294: C2 20        	rep	#$20
  5973                        	longa	on
  5974                        ;         }
  5975                        	.line	1407
  5976                        ;      }
  5977                        L10078:
  5978                        	.line	1408
  5979                        ;   }
  5980                        L10077:
  5981                        	.line	1409
  5982                        ;
  5983                        ;   // RESET_DONE:
  5984                        ;
  5985                        ;   // We are done but now we must select the devi
                    ce the caller
  5986                        ;   // requested. This will cause
  5987                        ;   // the correct data to be returned in reg_cmd_
                    info.
  5988                        ;
  5989                        ;   pio_outbyte( CB_DH, (unsigned char) ( devRtrn 
                    ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  5990                        L10073:
  5991                        	.line	1417
  Thu Jul 29 2021 11:55                                                Page 115


  5992 06:A296: A5 0C        	lda	<L175+devRtrn_0
  5993 06:A298: 29 FF 00     	and	#$ff
  5994 06:A29B: D0 03        	bne	L192
  5995 06:A29D: 82 05 00     	brl	L191
  5996                        L192:
  5997 06:A2A0: A9 10 00     	lda	#$10
  5998 06:A2A3: 80 03        	bra	L193
  5999                        L191:
  6000 06:A2A5: A9 00 00     	lda	#$0
  6001                        L193:
  6002 06:A2A8: 48           	pha
  6003 06:A2A9: F4 06 00     	pea	#<$6
  6004 06:A2AC: 22 F0 B7 06  	jsl	~~pio_outbyte
  6005                        ;   DELAY400NS;
  6006                        	.line	1418
  6007                        	.line	1418
  6008 06:A2B0: F4 08 00     	pea	#<$8
  6009 06:A2B3: 22 B1 B7 06  	jsl	~~pio_inbyte
  6010                        	.line	1418
  6011 06:A2B7: F4 08 00     	pea	#<$8
  6012 06:A2BA: 22 B1 B7 06  	jsl	~~pio_inbyte
  6013                        	.line	1418
  6014 06:A2BE: F4 08 00     	pea	#<$8
  6015 06:A2C1: 22 B1 B7 06  	jsl	~~pio_inbyte
  6016                        	.line	1418
  6017 06:A2C5: F4 08 00     	pea	#<$8
  6018 06:A2C8: 22 B1 B7 06  	jsl	~~pio_inbyte
  6019                        	.line	1418
  6020 06:A2CC: F4 08 00     	pea	#<$8
  6021 06:A2CF: 22 B1 B7 06  	jsl	~~pio_inbyte
  6022                        	.line	1418
  6023                        	.line	1418
  6024                        ;
  6025                        ;   // If possible, select a device that exists,
  6026                        ;   // try device 0 first.
  6027                        ;
  6028                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  6029                        	.line	1423
  6030                        ;   {
  6031 06:A2D3: AD xx xx     	lda	|~~reg_config_info+2
  6032 06:A2D6: D0 03        	bne	L194
  6033 06:A2D8: 82 2D 00     	brl	L10079
  6034                        L194:
  6035                        	.line	1424
  6036                        ;      pio_outbyte( CB_DH, CB_DH_DEV1 );
  6037                        	.line	1425
  6038 06:A2DB: F4 10 00     	pea	#<$10
  6039 06:A2DE: F4 06 00     	pea	#<$6
  6040 06:A2E1: 22 F0 B7 06  	jsl	~~pio_outbyte
  6041                        ;      DELAY400NS;
  6042                        	.line	1426
  6043                        	.line	1426
  6044 06:A2E5: F4 08 00     	pea	#<$8
  6045 06:A2E8: 22 B1 B7 06  	jsl	~~pio_inbyte
  6046                        	.line	1426
  6047 06:A2EC: F4 08 00     	pea	#<$8
  6048 06:A2EF: 22 B1 B7 06  	jsl	~~pio_inbyte
  Thu Jul 29 2021 11:55                                                Page 116


  6049                        	.line	1426
  6050 06:A2F3: F4 08 00     	pea	#<$8
  6051 06:A2F6: 22 B1 B7 06  	jsl	~~pio_inbyte
  6052                        	.line	1426
  6053 06:A2FA: F4 08 00     	pea	#<$8
  6054 06:A2FD: 22 B1 B7 06  	jsl	~~pio_inbyte
  6055                        	.line	1426
  6056 06:A301: F4 08 00     	pea	#<$8
  6057 06:A304: 22 B1 B7 06  	jsl	~~pio_inbyte
  6058                        	.line	1426
  6059                        	.line	1426
  6060                        ;   }
  6061                        	.line	1427
  6062                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  6063                        L10079:
  6064                        	.line	1428
  6065                        ;   {
  6066 06:A308: AD xx xx     	lda	|~~reg_config_info
  6067 06:A30B: D0 03        	bne	L195
  6068 06:A30D: 82 2D 00     	brl	L10080
  6069                        L195:
  6070                        	.line	1429
  6071                        ;      pio_outbyte( CB_DH, CB_DH_DEV0 );
  6072                        	.line	1430
  6073 06:A310: F4 00 00     	pea	#<$0
  6074 06:A313: F4 06 00     	pea	#<$6
  6075 06:A316: 22 F0 B7 06  	jsl	~~pio_outbyte
  6076                        ;      DELAY400NS;
  6077                        	.line	1431
  6078                        	.line	1431
  6079 06:A31A: F4 08 00     	pea	#<$8
  6080 06:A31D: 22 B1 B7 06  	jsl	~~pio_inbyte
  6081                        	.line	1431
  6082 06:A321: F4 08 00     	pea	#<$8
  6083 06:A324: 22 B1 B7 06  	jsl	~~pio_inbyte
  6084                        	.line	1431
  6085 06:A328: F4 08 00     	pea	#<$8
  6086 06:A32B: 22 B1 B7 06  	jsl	~~pio_inbyte
  6087                        	.line	1431
  6088 06:A32F: F4 08 00     	pea	#<$8
  6089 06:A332: 22 B1 B7 06  	jsl	~~pio_inbyte
  6090                        	.line	1431
  6091 06:A336: F4 08 00     	pea	#<$8
  6092 06:A339: 22 B1 B7 06  	jsl	~~pio_inbyte
  6093                        	.line	1431
  6094                        	.line	1431
  6095                        ;   }
  6096                        	.line	1432
  6097                        ;
  6098                        ;   // BMIDE Error=1?
  6099                        ;
  6100                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  6101                        L10080:
  6102                        	.line	1436
  6103                        ;   {
  6104 06:A33D: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  Thu Jul 29 2021 11:55                                                Page 117


  6105 06:A341: E2 20        	sep	#$20
  6106                        	longa	off
  6107 06:A343: 29 02        	and	#<$2
  6108 06:A345: C2 20        	rep	#$20
  6109                        	longa	on
  6110 06:A347: D0 03        	bne	L196
  6111 06:A349: 82 09 00     	brl	L10081
  6112                        L196:
  6113                        	.line	1437
  6114                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  6115                        	.line	1438
  6116 06:A34C: E2 20        	sep	#$20
  6117                        	longa	off
  6118 06:A34E: A9 4E        	lda	#$4e
  6119 06:A350: 8D xx xx     	sta	|~~reg_cmd_info+31
  6120 06:A353: C2 20        	rep	#$20
  6121                        	longa	on
  6122                        ;   }
  6123                        	.line	1439
  6124                        ;
  6125                        ;   // All done.  The return values of this functi
                    on are described in
  6126                        ;   // MINDRVR.H.
  6127                        ;
  6128                        ;   sub_trace_command();
  6129                        L10081:
  6130                        	.line	1444
  6131 06:A355: 22 4B B4 06  	jsl	~~sub_trace_command
  6132                        ;   if ( reg_cmd_info.ec )
  6133                        	.line	1445
  6134                        ;      return 1;
  6135 06:A359: AD xx xx     	lda	|~~reg_cmd_info+31
  6136 06:A35C: 29 FF 00     	and	#$ff
  6137 06:A35F: D0 03        	bne	L197
  6138 06:A361: 82 15 00     	brl	L10082
  6139                        L197:
  6140                        	.line	1446
  6141 06:A364: A9 01 00     	lda	#$1
  6142                        L198:
  6143 06:A367: A8           	tay
  6144 06:A368: A5 0A        	lda	<L175+2
  6145 06:A36A: 85 0C        	sta	<L175+2+2
  6146 06:A36C: A5 09        	lda	<L175+1
  6147 06:A36E: 85 0B        	sta	<L175+1+2
  6148 06:A370: 2B           	pld
  6149 06:A371: 3B           	tsc
  6150 06:A372: 18           	clc
  6151 06:A373: 69 0A 00     	adc	#L175+2
  6152 06:A376: 1B           	tcs
  6153 06:A377: 98           	tya
  6154 06:A378: 6B           	rtl
  6155                        ;   return 0;
  6156                        L10082:
  6157                        	.line	1447
  6158 06:A379: A9 00 00     	lda	#$0
  6159 06:A37C: 82 E8 FF     	brl	L198
  6160                        ;}
  Thu Jul 29 2021 11:55                                                Page 118


  6161                        	.line	1448
  6162                        	.endblock	1448
  6163             00000008   L175	equ	8
  6164             00000005   L176	equ	5
  6165 06:A37F:              	ends
  6166                        	efunc
  6167                        	.endfunc	1448,5,8
  6168                        	.line	1448
  6169                        	data
  6170                        L174:
  6171 00:03ED: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
                    $64,$63,$3A,$00,$72
       00:03F1: 72 65 73 65 
       00:03F5: 74 3A 64 63 
       00:03F9: 3A 00 72 
  6172 00:03FC: 65 67 5F 72  	db	$65,$67,$5F,$72,$65,$73,$65,$74,$3A,$74,
                    $6D,$72,$5F,$73,$65
       00:0400: 65 73 65 74 
       00:0404: 3A 74 6D 72 
       00:0408: 5F 73 65 
  6173 00:040B: 74 5F 74 69  	db	$74,$5F,$74,$69,$6D,$65,$6F,$75,$74,$3A,
                    $00
       00:040F: 6D 65 6F 75 
       00:0413: 74 3A 00 
  6174 00:0416:              	ends
  6175                        ;
  6176                        ;//***********************************************
                    **************
  6177                        ;//
  6178                        ;// exec_non_data_cmd() - Execute a non-data comma
                    nd.
  6179                        ;//
  6180                        ;// This includes the strange ATAPI DEVICE RESET '
                    command'
  6181                        ;// (command code 08H).
  6182                        ;//
  6183                        ;// Note special handling for Execute Device Diagn
                    ostics
  6184                        ;// command when there is no device 0.
  6185                        ;//
  6186                        ;// See ATA-2 Section 9.5, ATA-3 Section 9.5,
  6187                        ;// ATA-4 Section 8.8 Figure 12.  Also see Section
                     8.5.
  6188                        ;//
  6189                        ;//***********************************************
                    **************
  6190                        ;
  6191                        ;static int exec_non_data_cmd( unsigned char dev )
                    ;
  6192                        ;
  6193                        ;static int exec_non_data_cmd( unsigned char dev )
  6194                        ;
  6195                        ;{
  6196                        	.line	1467
  6197                        	.line	1469
  6198                        	FXHDD
  6199                        	func
  6200                        	.function	1469
  Thu Jul 29 2021 11:55                                                Page 119


  6201                        ~~exec_non_data_cmd:
  6202                        	longa	on
  6203                        	longi	on
  6204 06:A37F: 3B           	tsc
  6205 06:A380: 38           	sec
  6206 06:A381: E9 05 00     	sbc	#L200
  6207 06:A384: 1B           	tcs
  6208 06:A385: 0B           	phd
  6209 06:A386: 5B           	tcd
  6210             00000004   dev_0	set	4
  6211                        	.block	1469
  6212                        ;   unsigned char secCnt;
  6213                        ;   unsigned char secNum;
  6214                        ;   unsigned char status;
  6215                        ;   int polled = 0;
  6216                        ;
  6217                        ;   // reset Bus Master Error bit
  6218                        ;
  6219                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  6220             00000000   secCnt_1	set	0
  6221             00000001   secNum_1	set	1
  6222             00000002   status_1	set	2
  6223             00000003   polled_1	set	3
  6224                        	.sym	secCnt,0,14,1,8
  6225                        	.sym	secNum,1,14,1,8
  6226                        	.sym	status,2,14,1,8
  6227                        	.sym	polled,3,5,1,16
  6228                        	.sym	dev,4,14,6,8
  6229 06:A387: 64 04        	stz	<L201+polled_1
  6230                        	.line	1477
  6231 06:A389: F4 02 00     	pea	#<$2
  6232 06:A38C: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  6233                        ;
  6234                        ;   // Set command time out.
  6235                        ;
  6236                        ;   tmr_set_timeout();
  6237                        	.line	1481
  6238 06:A390: 22 00 BD 06  	jsl	~~tmr_set_timeout
  6239                        ;
  6240                        ;   // PAY ATTENTION HERE
  6241                        ;   // If the caller is attempting a Device Reset 
                    command, then
  6242                        ;   // don't do most of the normal stuff.  Device 
                    Reset has no
  6243                        ;   // parameters, should not generate an interrup
                    t and it is the
  6244                        ;   // only command that can be written to the Com
                    mand register
  6245                        ;   // when a device has BSY=1 (a very strange com
                    mand!).  Not
  6246                        ;   // all devices support this command (even some
                     ATAPI devices
  6247                        ;   // don't support the command.
  6248                        ;
  6249                        ;   if ( reg_cmd_info.cmd != CMD_DEVICE_RESET )
  6250                        	.line	1492
  6251                        ;   {
  6252 06:A394: E2 20        	sep	#$20
  Thu Jul 29 2021 11:55                                                Page 120


  6253                        	longa	off
  6254 06:A396: AD xx xx     	lda	|~~reg_cmd_info
  6255 06:A399: C9 08        	cmp	#<$8
  6256 06:A39B: C2 20        	rep	#$20
  6257                        	longa	on
  6258 06:A39D: D0 03        	bne	L203
  6259 06:A39F: 82 25 00     	brl	L10083
  6260                        L203:
  6261                        	.line	1493
  6262                        ;      // Select the drive - call the sub_select f
                    unction.
  6263                        ;      // Quit now if this fails.
  6264                        ;
  6265                        ;      if ( sub_select( dev ) )
  6266                        	.line	1497
  6267                        ;      {
  6268 06:A3A2: D4 09        	pei	<L200+dev_0
  6269 06:A3A4: 22 AF B4 06  	jsl	~~sub_select
  6270 06:A3A8: AA           	tax
  6271 06:A3A9: D0 03        	bne	L204
  6272 06:A3AB: 82 15 00     	brl	L10084
  6273                        L204:
  6274                        	.line	1498
  6275                        ;         return 1;
  6276                        	.line	1499
  6277 06:A3AE: A9 01 00     	lda	#$1
  6278                        L205:
  6279 06:A3B1: A8           	tay
  6280 06:A3B2: A5 07        	lda	<L200+2
  6281 06:A3B4: 85 09        	sta	<L200+2+2
  6282 06:A3B6: A5 06        	lda	<L200+1
  6283 06:A3B8: 85 08        	sta	<L200+1+2
  6284 06:A3BA: 2B           	pld
  6285 06:A3BB: 3B           	tsc
  6286 06:A3BC: 18           	clc
  6287 06:A3BD: 69 07 00     	adc	#L200+2
  6288 06:A3C0: 1B           	tcs
  6289 06:A3C1: 98           	tya
  6290 06:A3C2: 6B           	rtl
  6291                        ;      }
  6292                        	.line	1500
  6293                        ;
  6294                        ;      // Set up all the registers except the comm
                    and register.
  6295                        ;
  6296                        ;      sub_setup_command();
  6297                        L10084:
  6298                        	.line	1504
  6299 06:A3C3: 22 69 B2 06  	jsl	~~sub_setup_command
  6300                        ;   }
  6301                        	.line	1505
  6302                        ;
  6303                        ;   // Start the command by setting the Command re
                    gister.  The drive
  6304                        ;   // should immediately set BUSY status.
  6305                        ;
  6306                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  6307                        L10083:
  Thu Jul 29 2021 11:55                                                Page 121


  6308                        	.line	1510
  6309 06:A3C7: AD xx xx     	lda	|~~reg_cmd_info
  6310 06:A3CA: 48           	pha
  6311 06:A3CB: F4 07 00     	pea	#<$7
  6312 06:A3CE: 22 F0 B7 06  	jsl	~~pio_outbyte
  6313                        ;
  6314                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  6315                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  6316                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  6317                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  6318                        ;   // completed the command when it really had no
                    t even started the
  6319                        ;   // command yet.
  6320                        ;
  6321                        ;   DELAY400NS;
  6322                        	.line	1519
  6323                        	.line	1519
  6324 06:A3D2: F4 08 00     	pea	#<$8
  6325 06:A3D5: 22 B1 B7 06  	jsl	~~pio_inbyte
  6326                        	.line	1519
  6327 06:A3D9: F4 08 00     	pea	#<$8
  6328 06:A3DC: 22 B1 B7 06  	jsl	~~pio_inbyte
  6329                        	.line	1519
  6330 06:A3E0: F4 08 00     	pea	#<$8
  6331 06:A3E3: 22 B1 B7 06  	jsl	~~pio_inbyte
  6332                        	.line	1519
  6333 06:A3E7: F4 08 00     	pea	#<$8
  6334 06:A3EA: 22 B1 B7 06  	jsl	~~pio_inbyte
  6335                        	.line	1519
  6336 06:A3EE: F4 08 00     	pea	#<$8
  6337 06:A3F1: 22 B1 B7 06  	jsl	~~pio_inbyte
  6338                        	.line	1519
  6339                        	.line	1519
  6340                        ;
  6341                        ;   // IF
  6342                        ;   //    This is an Exec Dev Diag command (cmd=0x
                    90)
  6343                        ;   //    and there is no device 0 then
  6344                        ;   //    there will be no interrupt. So we must
  6345                        ;   //    poll device 1 until it allows register
  6346                        ;   //    access and then do normal polling of the
                     Status
  6347                        ;   //    register for BSY=0.
  6348                        ;   // ELSE
  6349                        ;   // IF
  6350                        ;   //    This is a Dev Reset command (cmd=0x08) t
                    hen
  6351                        ;   //    there should be no interrupt.  So we mus
                    t
  6352                        ;   //    poll for BSY=0.
  6353                        ;   // ELSE
  6354                        ;   //    Do the normal wait for interrupt or poll
                    ing for
  6355                        ;   //    completion.
  Thu Jul 29 2021 11:55                                                Page 122


  6356                        ;
  6357                        ;   if ( ( reg_cmd_info.cmd == CMD_EXECUTE_DEVICE_
                    DIAGNOSTIC )
  6358                        	.line	1537
  6359                        ;        &&
  6360                        ;        ( reg_config_info[0] == REG_CONFIG_TYPE_N
                    ONE )
  6361                        ;      )
  6362                        ;   {
  6363 06:A3F5: E2 20        	sep	#$20
  6364                        	longa	off
  6365 06:A3F7: AD xx xx     	lda	|~~reg_cmd_info
  6366 06:A3FA: C9 90        	cmp	#<$90
  6367 06:A3FC: C2 20        	rep	#$20
  6368                        	longa	on
  6369 06:A3FE: F0 03        	beq	L206
  6370 06:A400: 82 93 00     	brl	L10085
  6371                        L206:
  6372 06:A403: AD xx xx     	lda	|~~reg_config_info
  6373 06:A406: F0 03        	beq	L207
  6374 06:A408: 82 8B 00     	brl	L10085
  6375                        L207:
  6376                        	.line	1541
  6377                        ;      polled = 1;
  6378                        	.line	1542
  6379 06:A40B: A9 01 00     	lda	#$1
  6380 06:A40E: 85 04        	sta	<L201+polled_1
  6381                        ;      while ( 1 )
  6382                        	.line	1543
  6383                        L10086:
  6384                        ;      {
  6385                        	.line	1544
  6386                        ;         pio_outbyte( CB_DH, CB_DH_DEV1 );
  6387                        	.line	1545
  6388 06:A410: F4 10 00     	pea	#<$10
  6389 06:A413: F4 06 00     	pea	#<$6
  6390 06:A416: 22 F0 B7 06  	jsl	~~pio_outbyte
  6391                        ;         DELAY400NS;
  6392                        	.line	1546
  6393                        	.line	1546
  6394 06:A41A: F4 08 00     	pea	#<$8
  6395 06:A41D: 22 B1 B7 06  	jsl	~~pio_inbyte
  6396                        	.line	1546
  6397 06:A421: F4 08 00     	pea	#<$8
  6398 06:A424: 22 B1 B7 06  	jsl	~~pio_inbyte
  6399                        	.line	1546
  6400 06:A428: F4 08 00     	pea	#<$8
  6401 06:A42B: 22 B1 B7 06  	jsl	~~pio_inbyte
  6402                        	.line	1546
  6403 06:A42F: F4 08 00     	pea	#<$8
  6404 06:A432: 22 B1 B7 06  	jsl	~~pio_inbyte
  6405                        	.line	1546
  6406 06:A436: F4 08 00     	pea	#<$8
  6407 06:A439: 22 B1 B7 06  	jsl	~~pio_inbyte
  6408                        	.line	1546
  6409                        	.line	1546
  6410                        ;         secCnt = pio_inbyte( CB_SC );
  6411                        	.line	1547
  Thu Jul 29 2021 11:55                                                Page 123


  6412 06:A43D: F4 02 00     	pea	#<$2
  6413 06:A440: 22 B1 B7 06  	jsl	~~pio_inbyte
  6414 06:A444: E2 20        	sep	#$20
  6415                        	longa	off
  6416 06:A446: 85 01        	sta	<L201+secCnt_1
  6417 06:A448: C2 20        	rep	#$20
  6418                        	longa	on
  6419                        ;         secNum = pio_inbyte( CB_SN );
  6420                        	.line	1548
  6421 06:A44A: F4 03 00     	pea	#<$3
  6422 06:A44D: 22 B1 B7 06  	jsl	~~pio_inbyte
  6423 06:A451: E2 20        	sep	#$20
  6424                        	longa	off
  6425 06:A453: 85 02        	sta	<L201+secNum_1
  6426 06:A455: C2 20        	rep	#$20
  6427                        	longa	on
  6428                        ;         if ( ( secCnt == 0x01 ) && ( secNum == 0
                    x01 ) )
  6429                        	.line	1549
  6430                        ;            break;
  6431 06:A457: E2 20        	sep	#$20
  6432                        	longa	off
  6433 06:A459: A5 01        	lda	<L201+secCnt_1
  6434 06:A45B: C9 01        	cmp	#<$1
  6435 06:A45D: C2 20        	rep	#$20
  6436                        	longa	on
  6437 06:A45F: F0 03        	beq	L209
  6438 06:A461: 82 0D 00     	brl	L208
  6439                        L209:
  6440 06:A464: E2 20        	sep	#$20
  6441                        	longa	off
  6442 06:A466: A5 02        	lda	<L201+secNum_1
  6443 06:A468: C9 01        	cmp	#<$1
  6444 06:A46A: C2 20        	rep	#$20
  6445                        	longa	on
  6446 06:A46C: D0 03        	bne	L210
  6447 06:A46E: 82 22 00     	brl	L10087
  6448                        L210:
  6449                        L208:
  6450                        ;         if ( tmr_chk_timeout() )
  6451                        	.line	1551
  6452                        ;         {
  6453 06:A471: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  6454 06:A475: AA           	tax
  6455 06:A476: D0 03        	bne	L211
  6456 06:A478: 82 15 00     	brl	L10088
  6457                        L211:
  6458                        	.line	1552
  6459                        ;            reg_cmd_info.to = 1;
  6460                        	.line	1553
  6461 06:A47B: E2 20        	sep	#$20
  6462                        	longa	off
  6463 06:A47D: A9 01        	lda	#$1
  6464 06:A47F: 8D xx xx     	sta	|~~reg_cmd_info+32
  6465 06:A482: C2 20        	rep	#$20
  6466                        	longa	on
  6467                        ;            reg_cmd_info.ec = 24;
  6468                        	.line	1554
  Thu Jul 29 2021 11:55                                                Page 124


  6469 06:A484: E2 20        	sep	#$20
  6470                        	longa	off
  6471 06:A486: A9 18        	lda	#$18
  6472 06:A488: 8D xx xx     	sta	|~~reg_cmd_info+31
  6473 06:A48B: C2 20        	rep	#$20
  6474                        	longa	on
  6475                        ;            break;
  6476                        	.line	1555
  6477 06:A48D: 82 03 00     	brl	L10087
  6478                        ;         }
  6479                        	.line	1556
  6480                        ;      }
  6481                        L10088:
  6482                        	.line	1557
  6483 06:A490: 82 7D FF     	brl	L10086
  6484                        L10087:
  6485                        ;   }
  6486                        	.line	1558
  6487                        ;   else
  6488 06:A493: 82 3A 00     	brl	L10089
  6489                        L10085:
  6490                        ;   {
  6491                        	.line	1560
  6492                        ;      if ( reg_cmd_info.cmd == CMD_DEVICE_RESET )
  6493                        	.line	1561
  6494                        ;      {
  6495 06:A496: E2 20        	sep	#$20
  6496                        	longa	off
  6497 06:A498: AD xx xx     	lda	|~~reg_cmd_info
  6498 06:A49B: C9 08        	cmp	#<$8
  6499 06:A49D: C2 20        	rep	#$20
  6500                        	longa	on
  6501 06:A49F: F0 03        	beq	L212
  6502 06:A4A1: 82 12 00     	brl	L10090
  6503                        L212:
  6504                        	.line	1562
  6505                        ;         // Wait for not BUSY -or- wait for time 
                    out.
  6506                        ;
  6507                        ;         polled = 1;
  6508                        	.line	1565
  6509 06:A4A4: A9 01 00     	lda	#$1
  6510 06:A4A7: 85 04        	sta	<L201+polled_1
  6511                        ;         sub_wait_poll( 0, 23 );
  6512                        	.line	1566
  6513 06:A4A9: F4 17 00     	pea	#<$17
  6514 06:A4AC: F4 00 00     	pea	#<$0
  6515 06:A4AF: 22 3F B6 06  	jsl	~~sub_wait_poll
  6516                        ;      }
  6517                        	.line	1567
  6518                        ;      else
  6519 06:A4B3: 82 1A 00     	brl	L10091
  6520                        L10090:
  6521                        ;      {
  6522                        	.line	1569
  6523                        ;         // Wait for interrupt -or- wait for not 
                    BUSY -or- wait for time out.
  6524                        ;
  Thu Jul 29 2021 11:55                                                Page 125


  6525                        ;         if ( ! int_use_intr_flag )
  6526                        	.line	1572
  6527                        ;            polled = 1;
  6528 06:A4B6: AD xx xx     	lda	|~~int_use_intr_flag
  6529 06:A4B9: 29 FF 00     	and	#$ff
  6530 06:A4BC: F0 03        	beq	L213
  6531 06:A4BE: 82 05 00     	brl	L10092
  6532                        L213:
  6533                        	.line	1573
  6534 06:A4C1: A9 01 00     	lda	#$1
  6535 06:A4C4: 85 04        	sta	<L201+polled_1
  6536                        ;         sub_wait_poll( 22, 23 );
  6537                        L10092:
  6538                        	.line	1574
  6539 06:A4C6: F4 17 00     	pea	#<$17
  6540 06:A4C9: F4 16 00     	pea	#<$16
  6541 06:A4CC: 22 3F B6 06  	jsl	~~sub_wait_poll
  6542                        ;      }
  6543                        	.line	1575
  6544                        L10091:
  6545                        ;   }
  6546                        	.line	1576
  6547                        L10089:
  6548                        ;
  6549                        ;   // If status was polled or if any error read t
                    he status register,
  6550                        ;   // otherwise get the status that was read by t
                    he interrupt handler.
  6551                        ;
  6552                        ;   if ( ( polled ) || ( reg_cmd_info.ec ) )
  6553                        	.line	1581
  6554                        ;      status = pio_inbyte( CB_STAT );
  6555 06:A4D0: A5 04        	lda	<L201+polled_1
  6556 06:A4D2: F0 03        	beq	L215
  6557 06:A4D4: 82 0B 00     	brl	L214
  6558                        L215:
  6559 06:A4D7: AD xx xx     	lda	|~~reg_cmd_info+31
  6560 06:A4DA: 29 FF 00     	and	#$ff
  6561 06:A4DD: D0 03        	bne	L216
  6562 06:A4DF: 82 10 00     	brl	L10093
  6563                        L216:
  6564                        L214:
  6565                        	.line	1582
  6566 06:A4E2: F4 07 00     	pea	#<$7
  6567 06:A4E5: 22 B1 B7 06  	jsl	~~pio_inbyte
  6568 06:A4E9: E2 20        	sep	#$20
  6569                        	longa	off
  6570 06:A4EB: 85 03        	sta	<L201+status_1
  6571 06:A4ED: C2 20        	rep	#$20
  6572                        	longa	on
  6573                        ;   else
  6574 06:A4EF: 82 09 00     	brl	L10094
  6575                        L10093:
  6576                        ;      status = int_ata_status;
  6577                        	.line	1584
  6578 06:A4F2: E2 20        	sep	#$20
  6579                        	longa	off
  6580 06:A4F4: AD xx xx     	lda	|~~int_ata_status
  Thu Jul 29 2021 11:55                                                Page 126


  6581 06:A4F7: 85 03        	sta	<L201+status_1
  6582 06:A4F9: C2 20        	rep	#$20
  6583                        	longa	on
  6584                        L10094:
  6585                        ;
  6586                        ;   // Error if BUSY, DEVICE FAULT, DRQ or ERROR s
                    tatus now.
  6587                        ;
  6588                        ;   if ( reg_cmd_info.ec == 0 )
  6589                        	.line	1588
  6590                        ;   {
  6591 06:A4FB: AD xx xx     	lda	|~~reg_cmd_info+31
  6592 06:A4FE: 29 FF 00     	and	#$ff
  6593 06:A501: F0 03        	beq	L217
  6594 06:A503: 82 16 00     	brl	L10095
  6595                        L217:
  6596                        	.line	1589
  6597                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_DRQ | CB_STAT_ERR ) )
  6598                        	.line	1590
  6599                        ;      {
  6600 06:A506: E2 20        	sep	#$20
  6601                        	longa	off
  6602 06:A508: A5 03        	lda	<L201+status_1
  6603 06:A50A: 29 A9        	and	#<$a9
  6604 06:A50C: C2 20        	rep	#$20
  6605                        	longa	on
  6606 06:A50E: D0 03        	bne	L218
  6607 06:A510: 82 09 00     	brl	L10096
  6608                        L218:
  6609                        	.line	1591
  6610                        ;         reg_cmd_info.ec = 21;
  6611                        	.line	1592
  6612 06:A513: E2 20        	sep	#$20
  6613                        	longa	off
  6614 06:A515: A9 15        	lda	#$15
  6615 06:A517: 8D xx xx     	sta	|~~reg_cmd_info+31
  6616 06:A51A: C2 20        	rep	#$20
  6617                        	longa	on
  6618                        ;      }
  6619                        	.line	1593
  6620                        ;   }
  6621                        L10096:
  6622                        	.line	1594
  6623                        ;
  6624                        ;   // BMIDE Error=1?
  6625                        ;
  6626                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  6627                        L10095:
  6628                        	.line	1598
  6629                        ;   {
  6630 06:A51C: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  6631 06:A520: E2 20        	sep	#$20
  6632                        	longa	off
  6633 06:A522: 29 02        	and	#<$2
  6634 06:A524: C2 20        	rep	#$20
  6635                        	longa	on
  Thu Jul 29 2021 11:55                                                Page 127


  6636 06:A526: D0 03        	bne	L219
  6637 06:A528: 82 09 00     	brl	L10097
  6638                        L219:
  6639                        	.line	1599
  6640                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  6641                        	.line	1600
  6642 06:A52B: E2 20        	sep	#$20
  6643                        	longa	off
  6644 06:A52D: A9 4E        	lda	#$4e
  6645 06:A52F: 8D xx xx     	sta	|~~reg_cmd_info+31
  6646 06:A532: C2 20        	rep	#$20
  6647                        	longa	on
  6648                        ;   }
  6649                        	.line	1601
  6650                        ;
  6651                        ;   // NON_DATA_DONE:
  6652                        ;
  6653                        ;   // All done.  The return values of this functi
                    on are described in
  6654                        ;   // MINDRVR.H.
  6655                        ;
  6656                        ;   sub_trace_command();
  6657                        L10097:
  6658                        	.line	1608
  6659 06:A534: 22 4B B4 06  	jsl	~~sub_trace_command
  6660                        ;   if ( reg_cmd_info.ec )
  6661                        	.line	1609
  6662                        ;      return 1;
  6663 06:A538: AD xx xx     	lda	|~~reg_cmd_info+31
  6664 06:A53B: 29 FF 00     	and	#$ff
  6665 06:A53E: D0 03        	bne	L220
  6666 06:A540: 82 06 00     	brl	L10098
  6667                        L220:
  6668                        	.line	1610
  6669 06:A543: A9 01 00     	lda	#$1
  6670 06:A546: 82 68 FE     	brl	L205
  6671                        ;   return 0;
  6672                        L10098:
  6673                        	.line	1611
  6674 06:A549: A9 00 00     	lda	#$0
  6675 06:A54C: 82 62 FE     	brl	L205
  6676                        ;}
  6677                        	.line	1612
  6678                        	.endblock	1612
  6679             00000005   L200	equ	5
  6680             00000001   L201	equ	1
  6681 06:A54F:              	ends
  6682                        	efunc
  6683                        	.endfunc	1612,1,5
  6684                        	.line	1612
  6685                        ;
  6686                        ;//***********************************************
                    **************
  6687                        ;//
  6688                        ;// reg_non_data_lba28() - Easy way to execute a n
                    on-data command
  6689                        ;//                        using an LBA sector add
  Thu Jul 29 2021 11:55                                                Page 128


                    ress.
  6690                        ;//
  6691                        ;//***********************************************
                    **************
  6692                        ;
  6693                        ;int reg_non_data_lba28( unsigned char dev, unsign
                    ed char cmd,
  6694                        ;                        unsigned int fr, unsigned
                     int sc,
  6695                        ;                        unsigned long lba )
  6696                        ;
  6697                        ;{
  6698                        	.line	1621
  6699                        	.line	1625
  6700                        	FXHDD
  6701                        	xdef	~~reg_non_data_lba28
  6702                        	func
  6703                        	.function	1625
  6704                        ~~reg_non_data_lba28:
  6705                        	longa	on
  6706                        	longi	on
  6707 06:A54F: 3B           	tsc
  6708 06:A550: 38           	sec
  6709 06:A551: E9 04 00     	sbc	#L221
  6710 06:A554: 1B           	tcs
  6711 06:A555: 0B           	phd
  6712 06:A556: 5B           	tcd
  6713             00000004   dev_0	set	4
  6714             00000006   cmd_0	set	6
  6715             00000008   fr_0	set	8
  6716             0000000A   sc_0	set	10
  6717             0000000C   lba_0	set	12
  6718                        	.block	1625
  6719                        ;
  6720                        ;   // Setup current command information.
  6721                        ;
  6722                        ;   reg_cmd_info.cmd = cmd;
  6723                        	.sym	dev,4,14,6,8
  6724                        	.sym	cmd,6,14,6,8
  6725                        	.sym	fr,8,16,6,16
  6726                        	.sym	sc,10,16,6,16
  6727                        	.sym	lba,12,18,6,32
  6728                        	.line	1629
  6729 06:A557: E2 20        	sep	#$20
  6730                        	longa	off
  6731 06:A559: A5 0A        	lda	<L221+cmd_0
  6732 06:A55B: 8D xx xx     	sta	|~~reg_cmd_info
  6733 06:A55E: C2 20        	rep	#$20
  6734                        	longa	on
  6735                        ;   reg_cmd_info.fr = fr;
  6736                        	.line	1630
  6737 06:A560: A5 0C        	lda	<L221+fr_0
  6738 06:A562: 8D xx xx     	sta	|~~reg_cmd_info+1
  6739                        ;   reg_cmd_info.sc = sc;
  6740                        	.line	1631
  6741 06:A565: A5 0E        	lda	<L221+sc_0
  6742 06:A567: 8D xx xx     	sta	|~~reg_cmd_info+3
  6743                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
  Thu Jul 29 2021 11:55                                                Page 129


                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  6744                        	.line	1632
  6745 06:A56A: A5 08        	lda	<L221+dev_0
  6746 06:A56C: 29 FF 00     	and	#$ff
  6747 06:A56F: D0 03        	bne	L225
  6748 06:A571: 82 05 00     	brl	L224
  6749                        L225:
  6750 06:A574: A9 10 00     	lda	#$10
  6751 06:A577: 80 03        	bra	L226
  6752                        L224:
  6753 06:A579: A9 00 00     	lda	#$0
  6754                        L226:
  6755 06:A57C: 09 40 00     	ora	#<$40
  6756 06:A57F: 85 01        	sta	<R0
  6757 06:A581: E2 20        	sep	#$20
  6758                        	longa	off
  6759 06:A583: A5 01        	lda	<R0
  6760 06:A585: 8D xx xx     	sta	|~~reg_cmd_info+11
  6761 06:A588: C2 20        	rep	#$20
  6762                        	longa	on
  6763                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  6764                        	.line	1633
  6765 06:A58A: AD xx xx     	lda	|~~int_use_intr_flag
  6766 06:A58D: 29 FF 00     	and	#$ff
  6767 06:A590: D0 03        	bne	L228
  6768 06:A592: 82 05 00     	brl	L227
  6769                        L228:
  6770 06:A595: A9 00 00     	lda	#$0
  6771 06:A598: 80 03        	bra	L229
  6772                        L227:
  6773 06:A59A: A9 02 00     	lda	#$2
  6774                        L229:
  6775 06:A59D: 85 01        	sta	<R0
  6776 06:A59F: E2 20        	sep	#$20
  6777                        	longa	off
  6778 06:A5A1: A5 01        	lda	<R0
  6779 06:A5A3: 8D xx xx     	sta	|~~reg_cmd_info+12
  6780 06:A5A6: C2 20        	rep	#$20
  6781                        	longa	on
  6782                        ;   reg_cmd_info.ns  = sc;
  6783                        	.line	1634
  6784 06:A5A8: A5 0E        	lda	<L221+sc_0
  6785 06:A5AA: 8D xx xx     	sta	|~~reg_cmd_info+13
  6786 06:A5AD: 9C xx xx     	stz	|~~reg_cmd_info+13+2
  6787                        ;   reg_cmd_info.lbaSize = LBA28;
  6788                        	.line	1635
  6789 06:A5B0: E2 20        	sep	#$20
  6790                        	longa	off
  6791 06:A5B2: A9 1C        	lda	#$1c
  6792 06:A5B4: 8D xx xx     	sta	|~~reg_cmd_info+19
  6793 06:A5B7: C2 20        	rep	#$20
  6794                        	longa	on
  6795                        ;   reg_cmd_info.lbaHigh = 0L;
  6796                        	.line	1636
  6797 06:A5B9: 9C xx xx     	stz	|~~reg_cmd_info+24
  6798 06:A5BC: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  6799                        ;   reg_cmd_info.lbaLow = lba;
  Thu Jul 29 2021 11:55                                                Page 130


  6800                        	.line	1637
  6801 06:A5BF: A5 10        	lda	<L221+lba_0
  6802 06:A5C1: 8D xx xx     	sta	|~~reg_cmd_info+20
  6803 06:A5C4: A5 12        	lda	<L221+lba_0+2
  6804 06:A5C6: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  6805                        ;
  6806                        ;   // Execute the command.
  6807                        ;
  6808                        ;   return exec_non_data_cmd( dev );
  6809                        	.line	1641
  6810 06:A5C9: D4 08        	pei	<L221+dev_0
  6811 06:A5CB: 22 7F A3 06  	jsl	~~exec_non_data_cmd
  6812                        L230:
  6813 06:A5CF: A8           	tay
  6814 06:A5D0: A5 06        	lda	<L221+2
  6815 06:A5D2: 85 12        	sta	<L221+2+12
  6816 06:A5D4: A5 05        	lda	<L221+1
  6817 06:A5D6: 85 11        	sta	<L221+1+12
  6818 06:A5D8: 2B           	pld
  6819 06:A5D9: 3B           	tsc
  6820 06:A5DA: 18           	clc
  6821 06:A5DB: 69 10 00     	adc	#L221+12
  6822 06:A5DE: 1B           	tcs
  6823 06:A5DF: 98           	tya
  6824 06:A5E0: 6B           	rtl
  6825                        ;}
  6826                        	.line	1642
  6827                        	.endblock	1642
  6828             00000004   L221	equ	4
  6829             00000005   L222	equ	5
  6830 06:A5E1:              	ends
  6831                        	efunc
  6832                        	.endfunc	1642,5,4
  6833                        	.line	1642
  6834                        ;
  6835                        ;//***********************************************
                    **************
  6836                        ;//
  6837                        ;// reg_non_data_lba48() - Easy way to execute a n
                    on-data command
  6838                        ;//                        using an LBA sector add
                    ress.
  6839                        ;//
  6840                        ;//***********************************************
                    **************
  6841                        ;
  6842                        ;int reg_non_data_lba48( unsigned char dev, unsign
                    ed char cmd,
  6843                        ;                        unsigned int fr, unsigned
                     int sc,
  6844                        ;                        unsigned long lbahi, unsi
                    gned long lbalo )
  6845                        ;
  6846                        ;{
  6847                        	.line	1651
  6848                        	.line	1655
  6849                        	FXHDD
  6850                        	xdef	~~reg_non_data_lba48
  Thu Jul 29 2021 11:55                                                Page 131


  6851                        	func
  6852                        	.function	1655
  6853                        ~~reg_non_data_lba48:
  6854                        	longa	on
  6855                        	longi	on
  6856 06:A5E1: 3B           	tsc
  6857 06:A5E2: 38           	sec
  6858 06:A5E3: E9 04 00     	sbc	#L231
  6859 06:A5E6: 1B           	tcs
  6860 06:A5E7: 0B           	phd
  6861 06:A5E8: 5B           	tcd
  6862             00000004   dev_0	set	4
  6863             00000006   cmd_0	set	6
  6864             00000008   fr_0	set	8
  6865             0000000A   sc_0	set	10
  6866             0000000C   lbahi_0	set	12
  6867             00000010   lbalo_0	set	16
  6868                        	.block	1655
  6869                        ;
  6870                        ;   // Setup current command infomation.
  6871                        ;
  6872                        ;   reg_cmd_info.cmd = cmd;
  6873                        	.sym	dev,4,14,6,8
  6874                        	.sym	cmd,6,14,6,8
  6875                        	.sym	fr,8,16,6,16
  6876                        	.sym	sc,10,16,6,16
  6877                        	.sym	lbahi,12,18,6,32
  6878                        	.sym	lbalo,16,18,6,32
  6879                        	.line	1659
  6880 06:A5E9: E2 20        	sep	#$20
  6881                        	longa	off
  6882 06:A5EB: A5 0A        	lda	<L231+cmd_0
  6883 06:A5ED: 8D xx xx     	sta	|~~reg_cmd_info
  6884 06:A5F0: C2 20        	rep	#$20
  6885                        	longa	on
  6886                        ;   reg_cmd_info.fr = fr;
  6887                        	.line	1660
  6888 06:A5F2: A5 0C        	lda	<L231+fr_0
  6889 06:A5F4: 8D xx xx     	sta	|~~reg_cmd_info+1
  6890                        ;   reg_cmd_info.sc = sc;
  6891                        	.line	1661
  6892 06:A5F7: A5 0E        	lda	<L231+sc_0
  6893 06:A5F9: 8D xx xx     	sta	|~~reg_cmd_info+3
  6894                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  6895                        	.line	1662
  6896 06:A5FC: A5 08        	lda	<L231+dev_0
  6897 06:A5FE: 29 FF 00     	and	#$ff
  6898 06:A601: D0 03        	bne	L235
  6899 06:A603: 82 05 00     	brl	L234
  6900                        L235:
  6901 06:A606: A9 10 00     	lda	#$10
  6902 06:A609: 80 03        	bra	L236
  6903                        L234:
  6904 06:A60B: A9 00 00     	lda	#$0
  6905                        L236:
  6906 06:A60E: 09 40 00     	ora	#<$40
  6907 06:A611: 85 01        	sta	<R0
  Thu Jul 29 2021 11:55                                                Page 132


  6908 06:A613: E2 20        	sep	#$20
  6909                        	longa	off
  6910 06:A615: A5 01        	lda	<R0
  6911 06:A617: 8D xx xx     	sta	|~~reg_cmd_info+11
  6912 06:A61A: C2 20        	rep	#$20
  6913                        	longa	on
  6914                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  6915                        	.line	1663
  6916 06:A61C: AD xx xx     	lda	|~~int_use_intr_flag
  6917 06:A61F: 29 FF 00     	and	#$ff
  6918 06:A622: D0 03        	bne	L238
  6919 06:A624: 82 05 00     	brl	L237
  6920                        L238:
  6921 06:A627: A9 00 00     	lda	#$0
  6922 06:A62A: 80 03        	bra	L239
  6923                        L237:
  6924 06:A62C: A9 02 00     	lda	#$2
  6925                        L239:
  6926 06:A62F: 85 01        	sta	<R0
  6927 06:A631: E2 20        	sep	#$20
  6928                        	longa	off
  6929 06:A633: A5 01        	lda	<R0
  6930 06:A635: 8D xx xx     	sta	|~~reg_cmd_info+12
  6931 06:A638: C2 20        	rep	#$20
  6932                        	longa	on
  6933                        ;   reg_cmd_info.ns  = sc;
  6934                        	.line	1664
  6935 06:A63A: A5 0E        	lda	<L231+sc_0
  6936 06:A63C: 8D xx xx     	sta	|~~reg_cmd_info+13
  6937 06:A63F: 9C xx xx     	stz	|~~reg_cmd_info+13+2
  6938                        ;   reg_cmd_info.lbaSize = LBA48;
  6939                        	.line	1665
  6940 06:A642: E2 20        	sep	#$20
  6941                        	longa	off
  6942 06:A644: A9 30        	lda	#$30
  6943 06:A646: 8D xx xx     	sta	|~~reg_cmd_info+19
  6944 06:A649: C2 20        	rep	#$20
  6945                        	longa	on
  6946                        ;   reg_cmd_info.lbaHigh = lbahi;
  6947                        	.line	1666
  6948 06:A64B: A5 10        	lda	<L231+lbahi_0
  6949 06:A64D: 8D xx xx     	sta	|~~reg_cmd_info+24
  6950 06:A650: A5 12        	lda	<L231+lbahi_0+2
  6951 06:A652: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  6952                        ;   reg_cmd_info.lbaLow = lbalo;
  6953                        	.line	1667
  6954 06:A655: A5 14        	lda	<L231+lbalo_0
  6955 06:A657: 8D xx xx     	sta	|~~reg_cmd_info+20
  6956 06:A65A: A5 16        	lda	<L231+lbalo_0+2
  6957 06:A65C: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  6958                        ;
  6959                        ;   // Execute the command.
  6960                        ;
  6961                        ;   return exec_non_data_cmd( dev );
  6962                        	.line	1671
  6963 06:A65F: D4 08        	pei	<L231+dev_0
  6964 06:A661: 22 7F A3 06  	jsl	~~exec_non_data_cmd
  Thu Jul 29 2021 11:55                                                Page 133


  6965                        L240:
  6966 06:A665: A8           	tay
  6967 06:A666: A5 06        	lda	<L231+2
  6968 06:A668: 85 16        	sta	<L231+2+16
  6969 06:A66A: A5 05        	lda	<L231+1
  6970 06:A66C: 85 15        	sta	<L231+1+16
  6971 06:A66E: 2B           	pld
  6972 06:A66F: 3B           	tsc
  6973 06:A670: 18           	clc
  6974 06:A671: 69 14 00     	adc	#L231+16
  6975 06:A674: 1B           	tcs
  6976 06:A675: 98           	tya
  6977 06:A676: 6B           	rtl
  6978                        ;}
  6979                        	.line	1672
  6980                        	.endblock	1672
  6981             00000004   L231	equ	4
  6982             00000005   L232	equ	5
  6983 06:A677:              	ends
  6984                        	efunc
  6985                        	.endfunc	1672,5,4
  6986                        	.line	1672
  6987                        ;
  6988                        ;//***********************************************
                    **************
  6989                        ;//
  6990                        ;// exec_pio_data_in_cmd() - Execute a PIO Data In
                     command.
  6991                        ;//
  6992                        ;// See ATA-2 Section 9.3, ATA-3 Section 9.3,
  6993                        ;// ATA-4 Section 8.6 Figure 10.
  6994                        ;//
  6995                        ;//***********************************************
                    **************
  6996                        ;
  6997                        ;
  6998                        ;
  6999                        ; int exec_pio_data_in_cmd( unsigned char dev,
  7000                        ;                            unsigned char * bufAd
                    dr,
  7001                        ;                            long numSect, int mul
                    tiCnt )
  7002                        ;
  7003                        ;{
  7004                        	.line	1685
  7005                        	.line	1689
  7006                        	FXHDD
  7007                        	xdef	~~exec_pio_data_in_cmd
  7008                        	func
  7009                        	.function	1689
  7010                        ~~exec_pio_data_in_cmd:
  7011                        	longa	on
  7012                        	longi	on
  7013 06:A677: 3B           	tsc
  7014 06:A678: 38           	sec
  7015 06:A679: E9 09 00     	sbc	#L241
  7016 06:A67C: 1B           	tcs
  7017 06:A67D: 0B           	phd
  Thu Jul 29 2021 11:55                                                Page 134


  7018 06:A67E: 5B           	tcd
  7019             00000004   dev_0	set	4
  7020             00000006   bufAddr_0	set	6
  7021             0000000A   numSect_0	set	10
  7022             0000000E   multiCnt_0	set	14
  7023                        	.block	1689
  7024                        ;   unsigned char status;
  7025                        ;   long wordCnt;
  7026                        ;
  7027                        ;   // reset Bus Master Error bit
  7028                        ;
  7029                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  7030             00000000   status_1	set	0
  7031             00000001   wordCnt_1	set	1
  7032                        	.sym	status,0,14,1,8
  7033                        	.sym	wordCnt,1,7,1,32
  7034                        	.sym	dev,4,14,6,8
  7035                        	.sym	bufAddr,6,142,6,32
  7036                        	.sym	numSect,10,7,6,32
  7037                        	.sym	multiCnt,14,5,6,16
  7038                        	.line	1695
  7039 06:A67F: F4 02 00     	pea	#<$2
  7040 06:A682: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  7041                        ;
  7042                        ;   // Set command time out.
  7043                        ;
  7044                        ;   tmr_set_timeout();
  7045                        	.line	1699
  7046 06:A686: 22 00 BD 06  	jsl	~~tmr_set_timeout
  7047                        ;
  7048                        ;   // Select the drive - call the sub_select func
                    tion.
  7049                        ;   // Quit now if this fails.
  7050                        ;
  7051                        ;   if ( sub_select( dev ) )
  7052                        	.line	1704
  7053                        ;   {
  7054 06:A68A: D4 0D        	pei	<L241+dev_0
  7055 06:A68C: 22 AF B4 06  	jsl	~~sub_select
  7056 06:A690: AA           	tax
  7057 06:A691: D0 03        	bne	L244
  7058 06:A693: 82 15 00     	brl	L10099
  7059                        L244:
  7060                        	.line	1705
  7061                        ;      return 1;
  7062                        	.line	1706
  7063 06:A696: A9 01 00     	lda	#$1
  7064                        L245:
  7065 06:A699: A8           	tay
  7066 06:A69A: A5 0B        	lda	<L241+2
  7067 06:A69C: 85 17        	sta	<L241+2+12
  7068 06:A69E: A5 0A        	lda	<L241+1
  7069 06:A6A0: 85 16        	sta	<L241+1+12
  7070 06:A6A2: 2B           	pld
  7071 06:A6A3: 3B           	tsc
  7072 06:A6A4: 18           	clc
  7073 06:A6A5: 69 15 00     	adc	#L241+12
  7074 06:A6A8: 1B           	tcs
  Thu Jul 29 2021 11:55                                                Page 135


  7075 06:A6A9: 98           	tya
  7076 06:A6AA: 6B           	rtl
  7077                        ;   }
  7078                        	.line	1707
  7079                        ;
  7080                        ;   // Set up all the registers except the command
                     register.
  7081                        ;
  7082                        ;   sub_setup_command();
  7083                        L10099:
  7084                        	.line	1711
  7085 06:A6AB: 22 69 B2 06  	jsl	~~sub_setup_command
  7086                        ;
  7087                        ;   // Start the command by setting the Command re
                    gister.  The drive
  7088                        ;   // should immediately set BUSY status.
  7089                        ;
  7090                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  7091                        	.line	1716
  7092 06:A6AF: AD xx xx     	lda	|~~reg_cmd_info
  7093 06:A6B2: 48           	pha
  7094 06:A6B3: F4 07 00     	pea	#<$7
  7095 06:A6B6: 22 F0 B7 06  	jsl	~~pio_outbyte
  7096                        ;
  7097                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  7098                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  7099                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  7100                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  7101                        ;   // completed the command when it really had no
                    t even started the
  7102                        ;   // command yet.
  7103                        ;
  7104                        ;   DELAY400NS;
  7105                        	.line	1725
  7106                        	.line	1725
  7107 06:A6BA: F4 08 00     	pea	#<$8
  7108 06:A6BD: 22 B1 B7 06  	jsl	~~pio_inbyte
  7109                        	.line	1725
  7110 06:A6C1: F4 08 00     	pea	#<$8
  7111 06:A6C4: 22 B1 B7 06  	jsl	~~pio_inbyte
  7112                        	.line	1725
  7113 06:A6C8: F4 08 00     	pea	#<$8
  7114 06:A6CB: 22 B1 B7 06  	jsl	~~pio_inbyte
  7115                        	.line	1725
  7116 06:A6CF: F4 08 00     	pea	#<$8
  7117 06:A6D2: 22 B1 B7 06  	jsl	~~pio_inbyte
  7118                        	.line	1725
  7119 06:A6D6: F4 08 00     	pea	#<$8
  7120 06:A6D9: 22 B1 B7 06  	jsl	~~pio_inbyte
  7121                        	.line	1725
  7122                        	.line	1725
  7123                        ;
  7124                        ;   // Loop to read each sector.
  7125                        ;
  Thu Jul 29 2021 11:55                                                Page 136


  7126                        ;   while ( 1 )
  7127                        	.line	1729
  7128                        L10100:
  7129                        ;   {
  7130                        	.line	1730
  7131                        ;      // READ_LOOP:
  7132                        ;      //
  7133                        ;      // NOTE NOTE NOTE ...  The primary status r
                    egister (1f7) MUST NOT be
  7134                        ;      // read more than ONCE for each sector tran
                    sferred!  When the
  7135                        ;      // primary status register is read, the dri
                    ve resets IRQ.  The
  7136                        ;      // alternate status register (3f6) can be r
                    ead any number of times.
  7137                        ;      // After interrupt read the the primary sta
                    tus register ONCE
  7138                        ;      // and transfer the 256 words (REP INSW).  
                    AS SOON as BOTH the
  7139                        ;      // primary status register has been read AN
                    D the last of the 256
  7140                        ;      // words has been read, the drive is allowe
                    d to generate the next
  7141                        ;      // IRQ (newer and faster drives could gener
                    ate the next IRQ in
  7142                        ;      // 50 microseconds or less).  If the primar
                    y status register is read
  7143                        ;      // more than once, there is the possibility
                     of a race between the
  7144                        ;      // drive and the software and the next IRQ 
                    could be reset before
  7145                        ;      // the system interrupt controller sees it.
  7146                        ;
  7147                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  7148                        ;
  7149                        ;      sub_wait_poll( 34, 35 );
  7150                        	.line	1749
  7151 06:A6DD: F4 23 00     	pea	#<$23
  7152 06:A6E0: F4 22 00     	pea	#<$22
  7153 06:A6E3: 22 3F B6 06  	jsl	~~sub_wait_poll
  7154                        ;
  7155                        ;      // If polling or error read the status, oth
                    erwise
  7156                        ;      // get the status that was read by the inte
                    rrupt handler.
  7157                        ;
  7158                        ;      if ( ( ! int_use_intr_flag ) || ( reg_cmd_i
                    nfo.ec ) )
  7159                        	.line	1754
  7160                        ;         status = pio_inbyte( CB_STAT );
  7161 06:A6E7: AD xx xx     	lda	|~~int_use_intr_flag
  7162 06:A6EA: 29 FF 00     	and	#$ff
  7163 06:A6ED: D0 03        	bne	L247
  7164 06:A6EF: 82 0B 00     	brl	L246
  7165                        L247:
  7166 06:A6F2: AD xx xx     	lda	|~~reg_cmd_info+31
  7167 06:A6F5: 29 FF 00     	and	#$ff
  Thu Jul 29 2021 11:55                                                Page 137


  7168 06:A6F8: D0 03        	bne	L248
  7169 06:A6FA: 82 10 00     	brl	L10102
  7170                        L248:
  7171                        L246:
  7172                        	.line	1755
  7173 06:A6FD: F4 07 00     	pea	#<$7
  7174 06:A700: 22 B1 B7 06  	jsl	~~pio_inbyte
  7175 06:A704: E2 20        	sep	#$20
  7176                        	longa	off
  7177 06:A706: 85 05        	sta	<L242+status_1
  7178 06:A708: C2 20        	rep	#$20
  7179                        	longa	on
  7180                        ;      else
  7181 06:A70A: 82 09 00     	brl	L10103
  7182                        L10102:
  7183                        ;         status = int_ata_status;
  7184                        	.line	1757
  7185 06:A70D: E2 20        	sep	#$20
  7186                        	longa	off
  7187 06:A70F: AD xx xx     	lda	|~~int_ata_status
  7188 06:A712: 85 05        	sta	<L242+status_1
  7189 06:A714: C2 20        	rep	#$20
  7190                        	longa	on
  7191                        L10103:
  7192                        ;
  7193                        ;      // If there was a time out error, go to REA
                    D_DONE.
  7194                        ;
  7195                        ;      if ( reg_cmd_info.ec )
  7196                        	.line	1761
  7197                        ;         break;   // go to READ_DONE
  7198 06:A716: AD xx xx     	lda	|~~reg_cmd_info+31
  7199 06:A719: 29 FF 00     	and	#$ff
  7200 06:A71C: F0 03        	beq	L249
  7201 06:A71E: 82 75 01     	brl	L10101
  7202                        L249:
  7203                        ;
  7204                        ;      // If BSY=0 and DRQ=1, transfer the data,
  7205                        ;      // even if we find out there is an error la
                    ter.
  7206                        ;
  7207                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == CB_STAT_DRQ )
  7208                        	.line	1767
  7209                        ;      {
  7210 06:A721: A5 05        	lda	<L242+status_1
  7211 06:A723: 29 88 00     	and	#<$88
  7212 06:A726: 85 01        	sta	<R0
  7213 06:A728: A5 01        	lda	<R0
  7214 06:A72A: C9 08 00     	cmp	#<$8
  7215 06:A72D: F0 03        	beq	L250
  7216 06:A72F: 82 F6 00     	brl	L10104
  7217                        L250:
  7218                        	.line	1768
  7219                        ;
  7220                        ;         // increment number of DRQ packets
  7221                        ;
  7222                        ;         reg_cmd_info.drqPackets ++ ;
  Thu Jul 29 2021 11:55                                                Page 138


  7223                        	.line	1772
  7224 06:A732: EE xx xx     	inc	|~~reg_cmd_info+37
  7225 06:A735: D0 03        	bne	L251
  7226 06:A737: EE xx xx     	inc	|~~reg_cmd_info+37+2
  7227                        L251:
  7228                        ;
  7229                        ;         // determine the number of sectors to tr
                    ansfer
  7230                        ;
  7231                        ;         wordCnt = multiCnt ? multiCnt : 1;
  7232                        	.line	1776
  7233 06:A73A: A5 17        	lda	<L241+multiCnt_0
  7234 06:A73C: D0 03        	bne	L253
  7235 06:A73E: 82 04 00     	brl	L252
  7236                        L253:
  7237 06:A741: A5 17        	lda	<L241+multiCnt_0
  7238 06:A743: 80 03        	bra	L254
  7239                        L252:
  7240 06:A745: A9 01 00     	lda	#$1
  7241                        L254:
  7242 06:A748: 85 01        	sta	<R0
  7243 06:A74A: A0 00 00     	ldy	#$0
  7244 06:A74D: A5 01        	lda	<R0
  7245 06:A74F: 10 01        	bpl	L255
  7246 06:A751: 88           	dey
  7247                        L255:
  7248 06:A752: 85 06        	sta	<L242+wordCnt_1
  7249 06:A754: 84 08        	sty	<L242+wordCnt_1+2
  7250                        ;         if ( wordCnt > numSect )
  7251                        	.line	1777
  7252                        ;            wordCnt = numSect;
  7253 06:A756: 38           	sec
  7254 06:A757: A5 13        	lda	<L241+numSect_0
  7255 06:A759: E5 06        	sbc	<L242+wordCnt_1
  7256 06:A75B: A5 15        	lda	<L241+numSect_0+2
  7257 06:A75D: E5 08        	sbc	<L242+wordCnt_1+2
  7258 06:A75F: 70 03        	bvs	L256
  7259 06:A761: 49 00 80     	eor	#$8000
  7260                        L256:
  7261 06:A764: 10 03        	bpl	L257
  7262 06:A766: 82 08 00     	brl	L10105
  7263                        L257:
  7264                        	.line	1778
  7265 06:A769: A5 13        	lda	<L241+numSect_0
  7266 06:A76B: 85 06        	sta	<L242+wordCnt_1
  7267 06:A76D: A5 15        	lda	<L241+numSect_0+2
  7268 06:A76F: 85 08        	sta	<L242+wordCnt_1+2
  7269                        ;         wordCnt = wordCnt * 256;
  7270                        L10105:
  7271                        	.line	1779
  7272 06:A771: D4 08        	pei	<L242+wordCnt_1+2
  7273 06:A773: D4 06        	pei	<L242+wordCnt_1
  7274 06:A775: A9 08 00     	lda	#$8
  7275                        	xref	~~~lasl
  7276 06:A778: 22 xx xx xx  	jsl	~~~lasl
  7277 06:A77C: 85 06        	sta	<L242+wordCnt_1
  7278 06:A77E: 86 08        	stx	<L242+wordCnt_1+2
  7279                        ;
  Thu Jul 29 2021 11:55                                                Page 139


  7280                        ;         // Do the REP INSW to read the data for 
                    one DRQ block.
  7281                        ;
  7282                        ;         reg_cmd_info.totalBytesXfer += ( wordCnt
                     << 1 );
  7283                        	.line	1783
  7284 06:A780: A5 06        	lda	<L242+wordCnt_1
  7285 06:A782: 85 01        	sta	<R0
  7286 06:A784: A5 08        	lda	<L242+wordCnt_1+2
  7287 06:A786: 85 03        	sta	<R0+2
  7288 06:A788: 06 01        	asl	<R0
  7289 06:A78A: 26 03        	rol	<R0+2
  7290 06:A78C: 18           	clc
  7291 06:A78D: A5 01        	lda	<R0
  7292 06:A78F: 6D xx xx     	adc	|~~reg_cmd_info+33
  7293 06:A792: 8D xx xx     	sta	|~~reg_cmd_info+33
  7294 06:A795: A5 03        	lda	<R0+2
  7295 06:A797: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  7296 06:A79A: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  7297                        ;         pio_drq_block_in( CB_DATA, bufAddr, word
                    Cnt );
  7298                        	.line	1784
  7299 06:A79D: D4 08        	pei	<L242+wordCnt_1+2
  7300 06:A79F: D4 06        	pei	<L242+wordCnt_1
  7301 06:A7A1: D4 11        	pei	<L241+bufAddr_0+2
  7302 06:A7A3: D4 0F        	pei	<L241+bufAddr_0
  7303 06:A7A5: F4 00 00     	pea	#<$0
  7304 06:A7A8: 22 18 B9 06  	jsl	~~pio_drq_block_in
  7305                        ;
  7306                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  7307                        	.line	1786
  7308                        	.line	1786
  7309 06:A7AC: F4 08 00     	pea	#<$8
  7310 06:A7AF: 22 B1 B7 06  	jsl	~~pio_inbyte
  7311                        	.line	1786
  7312 06:A7B3: F4 08 00     	pea	#<$8
  7313 06:A7B6: 22 B1 B7 06  	jsl	~~pio_inbyte
  7314                        	.line	1786
  7315 06:A7BA: F4 08 00     	pea	#<$8
  7316 06:A7BD: 22 B1 B7 06  	jsl	~~pio_inbyte
  7317                        	.line	1786
  7318 06:A7C1: F4 08 00     	pea	#<$8
  7319 06:A7C4: 22 B1 B7 06  	jsl	~~pio_inbyte
  7320                        	.line	1786
  7321 06:A7C8: F4 08 00     	pea	#<$8
  7322 06:A7CB: 22 B1 B7 06  	jsl	~~pio_inbyte
  7323                        	.line	1786
  7324                        	.line	1786
  7325                        ;
  7326                        ;         // Note: The drive should have dropped D
                    ATA REQUEST by now.  If there
  7327                        ;         // are more sectors to transfer, BUSY sh
                    ould be active now (unless
  7328                        ;         // there is an error).
  7329                        ;
  7330                        ;         // Decrement the count of sectors to be 
                    transferred
  Thu Jul 29 2021 11:55                                                Page 140


  7331                        ;         // and increment buffer address.
  7332                        ;
  7333                        ;         numSect = numSect - ( multiCnt ? multiCn
                    t : 1 );
  7334                        	.line	1795
  7335 06:A7CF: A5 17        	lda	<L241+multiCnt_0
  7336 06:A7D1: D0 03        	bne	L259
  7337 06:A7D3: 82 04 00     	brl	L258
  7338                        L259:
  7339 06:A7D6: A5 17        	lda	<L241+multiCnt_0
  7340 06:A7D8: 80 03        	bra	L260
  7341                        L258:
  7342 06:A7DA: A9 01 00     	lda	#$1
  7343                        L260:
  7344 06:A7DD: 85 01        	sta	<R0
  7345 06:A7DF: A0 00 00     	ldy	#$0
  7346 06:A7E2: A5 01        	lda	<R0
  7347 06:A7E4: 10 01        	bpl	L261
  7348 06:A7E6: 88           	dey
  7349                        L261:
  7350 06:A7E7: 85 01        	sta	<R0
  7351 06:A7E9: 84 03        	sty	<R0+2
  7352 06:A7EB: 38           	sec
  7353 06:A7EC: A5 13        	lda	<L241+numSect_0
  7354 06:A7EE: E5 01        	sbc	<R0
  7355 06:A7F0: 85 13        	sta	<L241+numSect_0
  7356 06:A7F2: A5 15        	lda	<L241+numSect_0+2
  7357 06:A7F4: E5 03        	sbc	<R0+2
  7358 06:A7F6: 85 15        	sta	<L241+numSect_0+2
  7359                        ;         bufAddr = bufAddr + ( 512 * ( multiCnt ?
                     multiCnt : 1 ) );
  7360                        	.line	1796
  7361 06:A7F8: A5 17        	lda	<L241+multiCnt_0
  7362 06:A7FA: D0 03        	bne	L263
  7363 06:A7FC: 82 04 00     	brl	L262
  7364                        L263:
  7365 06:A7FF: A5 17        	lda	<L241+multiCnt_0
  7366 06:A801: 80 03        	bra	L264
  7367                        L262:
  7368 06:A803: A9 01 00     	lda	#$1
  7369                        L264:
  7370 06:A806: A2 09 00     	ldx	#<$9
  7371                        	xref	~~~asl
  7372 06:A809: 22 xx xx xx  	jsl	~~~asl
  7373 06:A80D: 85 01        	sta	<R0
  7374 06:A80F: A0 00 00     	ldy	#$0
  7375 06:A812: A5 01        	lda	<R0
  7376 06:A814: 10 01        	bpl	L265
  7377 06:A816: 88           	dey
  7378                        L265:
  7379 06:A817: 85 01        	sta	<R0
  7380 06:A819: 84 03        	sty	<R0+2
  7381 06:A81B: 18           	clc
  7382 06:A81C: A5 0F        	lda	<L241+bufAddr_0
  7383 06:A81E: 65 01        	adc	<R0
  7384 06:A820: 85 0F        	sta	<L241+bufAddr_0
  7385 06:A822: A5 11        	lda	<L241+bufAddr_0+2
  7386 06:A824: 65 03        	adc	<R0+2
  Thu Jul 29 2021 11:55                                                Page 141


  7387 06:A826: 85 11        	sta	<L241+bufAddr_0+2
  7388                        ;      }
  7389                        	.line	1797
  7390                        ;
  7391                        ;      // So was there any error condition?
  7392                        ;
  7393                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_ERR ) )
  7394                        L10104:
  7395                        	.line	1801
  7396                        ;      {
  7397 06:A828: E2 20        	sep	#$20
  7398                        	longa	off
  7399 06:A82A: A5 05        	lda	<L242+status_1
  7400 06:A82C: 29 A1        	and	#<$a1
  7401 06:A82E: C2 20        	rep	#$20
  7402                        	longa	on
  7403 06:A830: D0 03        	bne	L266
  7404 06:A832: 82 0C 00     	brl	L10106
  7405                        L266:
  7406                        	.line	1802
  7407                        ;         reg_cmd_info.ec = 31;
  7408                        	.line	1803
  7409 06:A835: E2 20        	sep	#$20
  7410                        	longa	off
  7411 06:A837: A9 1F        	lda	#$1f
  7412 06:A839: 8D xx xx     	sta	|~~reg_cmd_info+31
  7413 06:A83C: C2 20        	rep	#$20
  7414                        	longa	on
  7415                        ;         break;   // go to READ_DONE
  7416                        	.line	1804
  7417 06:A83E: 82 55 00     	brl	L10101
  7418                        ;      }
  7419                        	.line	1805
  7420                        ;
  7421                        ;      // DRQ should have been set -- was it?
  7422                        ;
  7423                        ;      if ( ( status & CB_STAT_DRQ ) == 0 )
  7424                        L10106:
  7425                        	.line	1809
  7426                        ;      {
  7427 06:A841: E2 20        	sep	#$20
  7428                        	longa	off
  7429 06:A843: A5 05        	lda	<L242+status_1
  7430 06:A845: 29 08        	and	#<$8
  7431 06:A847: C2 20        	rep	#$20
  7432                        	longa	on
  7433 06:A849: F0 03        	beq	L267
  7434 06:A84B: 82 0C 00     	brl	L10107
  7435                        L267:
  7436                        	.line	1810
  7437                        ;         reg_cmd_info.ec = 32;
  7438                        	.line	1811
  7439 06:A84E: E2 20        	sep	#$20
  7440                        	longa	off
  7441 06:A850: A9 20        	lda	#$20
  7442 06:A852: 8D xx xx     	sta	|~~reg_cmd_info+31
  7443 06:A855: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 142


  7444                        	longa	on
  7445                        ;         break;   // go to READ_DONE
  7446                        	.line	1812
  7447 06:A857: 82 3C 00     	brl	L10101
  7448                        ;      }
  7449                        	.line	1813
  7450                        ;
  7451                        ;      // If all of the requested sectors have bee
                    n transferred, make a
  7452                        ;      // few more checks before we exit.
  7453                        ;
  7454                        ;      if ( numSect < 1 )
  7455                        L10107:
  7456                        	.line	1818
  7457                        ;      {
  7458 06:A85A: A5 15        	lda	<L241+numSect_0+2
  7459 06:A85C: 30 0C        	bmi	L268
  7460 06:A85E: D0 07        	bne	L269
  7461 06:A860: A5 13        	lda	<L241+numSect_0
  7462 06:A862: C9 01 00     	cmp	#1
  7463 06:A865: 90 03        	bcc	L268
  7464                        L269:
  7465 06:A867: 82 29 00     	brl	L10108
  7466                        L268:
  7467                        	.line	1819
  7468                        ;         // Since the drive has transferred all o
                    f the requested sectors
  7469                        ;         // without error, the drive should not h
                    ave BUSY, DEVICE FAULT,
  7470                        ;         // DATA REQUEST or ERROR active now.
  7471                        ;
  7472                        ;         status = pio_inbyte( CB_STAT );
  7473                        	.line	1824
  7474 06:A86A: F4 07 00     	pea	#<$7
  7475 06:A86D: 22 B1 B7 06  	jsl	~~pio_inbyte
  7476 06:A871: E2 20        	sep	#$20
  7477                        	longa	off
  7478 06:A873: 85 05        	sta	<L242+status_1
  7479 06:A875: C2 20        	rep	#$20
  7480                        	longa	on
  7481                        ;         if ( status & ( CB_STAT_BSY | CB_STAT_DF
                     | CB_STAT_DRQ | CB_STAT_ERR ) )
  7482                        	.line	1825
  7483                        ;         {
  7484 06:A877: E2 20        	sep	#$20
  7485                        	longa	off
  7486 06:A879: A5 05        	lda	<L242+status_1
  7487 06:A87B: 29 A9        	and	#<$a9
  7488 06:A87D: C2 20        	rep	#$20
  7489                        	longa	on
  7490 06:A87F: D0 03        	bne	L270
  7491 06:A881: 82 0C 00     	brl	L10109
  7492                        L270:
  7493                        	.line	1826
  7494                        ;            reg_cmd_info.ec = 33;
  7495                        	.line	1827
  7496 06:A884: E2 20        	sep	#$20
  7497                        	longa	off
  Thu Jul 29 2021 11:55                                                Page 143


  7498 06:A886: A9 21        	lda	#$21
  7499 06:A888: 8D xx xx     	sta	|~~reg_cmd_info+31
  7500 06:A88B: C2 20        	rep	#$20
  7501                        	longa	on
  7502                        ;            break;   // go to READ_DONE
  7503                        	.line	1828
  7504 06:A88D: 82 06 00     	brl	L10101
  7505                        ;         }
  7506                        	.line	1829
  7507                        ;
  7508                        ;         // All sectors have been read without er
                    ror, go to READ_DONE.
  7509                        ;
  7510                        ;         break;   // go to READ_DONE
  7511                        L10109:
  7512                        	.line	1833
  7513 06:A890: 82 03 00     	brl	L10101
  7514                        ;
  7515                        ;      }
  7516                        	.line	1835
  7517                        ;
  7518                        ;      // This is the end of the read loop.  If we
                     get here, the loop is
  7519                        ;      // repeated to read the next sector.  Go ba
                    ck to READ_LOOP.
  7520                        ;
  7521                        ;   }
  7522                        L10108:
  7523                        	.line	1840
  7524 06:A893: 82 47 FE     	brl	L10100
  7525                        L10101:
  7526                        ;
  7527                        ;   // BMIDE Error=1?
  7528                        ;
  7529                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  7530                        	.line	1844
  7531                        ;   {
  7532 06:A896: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  7533 06:A89A: E2 20        	sep	#$20
  7534                        	longa	off
  7535 06:A89C: 29 02        	and	#<$2
  7536 06:A89E: C2 20        	rep	#$20
  7537                        	longa	on
  7538 06:A8A0: D0 03        	bne	L271
  7539 06:A8A2: 82 09 00     	brl	L10110
  7540                        L271:
  7541                        	.line	1845
  7542                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  7543                        	.line	1846
  7544 06:A8A5: E2 20        	sep	#$20
  7545                        	longa	off
  7546 06:A8A7: A9 4E        	lda	#$4e
  7547 06:A8A9: 8D xx xx     	sta	|~~reg_cmd_info+31
  7548 06:A8AC: C2 20        	rep	#$20
  7549                        	longa	on
  7550                        ;   }
  Thu Jul 29 2021 11:55                                                Page 144


  7551                        	.line	1847
  7552                        ;
  7553                        ;   // READ_DONE:
  7554                        ;
  7555                        ;   // All done.  The return values of this functi
                    on are described in
  7556                        ;   // MINDRVR.H.
  7557                        ;
  7558                        ;   if ( reg_cmd_info.ec )
  7559                        L10110:
  7560                        	.line	1854
  7561                        ;      return 1;
  7562 06:A8AE: AD xx xx     	lda	|~~reg_cmd_info+31
  7563 06:A8B1: 29 FF 00     	and	#$ff
  7564 06:A8B4: D0 03        	bne	L272
  7565 06:A8B6: 82 06 00     	brl	L10111
  7566                        L272:
  7567                        	.line	1855
  7568 06:A8B9: A9 01 00     	lda	#$1
  7569 06:A8BC: 82 DA FD     	brl	L245
  7570                        ;   return 0;
  7571                        L10111:
  7572                        	.line	1856
  7573 06:A8BF: A9 00 00     	lda	#$0
  7574 06:A8C2: 82 D4 FD     	brl	L245
  7575                        ;}
  7576                        	.line	1857
  7577                        	.endblock	1857
  7578             00000009   L241	equ	9
  7579             00000005   L242	equ	5
  7580 06:A8C5:              	ends
  7581                        	efunc
  7582                        	.endfunc	1857,5,9
  7583                        	.line	1857
  7584                        ;
  7585                        ;//***********************************************
                    **************
  7586                        ;//
  7587                        ;// reg_pio_data_in_lba28() - Easy way to execute 
                    a PIO Data In command
  7588                        ;//                           using an LBA sector 
                    address.
  7589                        ;//
  7590                        ;//***********************************************
                    **************
  7591                        ;
  7592                        ;int reg_pio_data_in_lba28( unsigned char dev, uns
                    igned char cmd,
  7593                        ;                           unsigned int fr, unsig
                    ned int sc,
  7594                        ;                           unsigned long lba,
  7595                        ;                           unsigned char * bufAdd
                    r,
  7596                        ;                           long numSect, int mult
                    iCnt )
  7597                        ;
  7598                        ;{
  7599                        	.line	1866
  Thu Jul 29 2021 11:55                                                Page 145


  7600                        	.line	1872
  7601                        	FXHDD
  7602                        	xdef	~~reg_pio_data_in_lba28
  7603                        	func
  7604                        	.function	1872
  7605                        ~~reg_pio_data_in_lba28:
  7606                        	longa	on
  7607                        	longi	on
  7608 06:A8C5: 3B           	tsc
  7609 06:A8C6: 38           	sec
  7610 06:A8C7: E9 04 00     	sbc	#L273
  7611 06:A8CA: 1B           	tcs
  7612 06:A8CB: 0B           	phd
  7613 06:A8CC: 5B           	tcd
  7614             00000004   dev_0	set	4
  7615             00000006   cmd_0	set	6
  7616             00000008   fr_0	set	8
  7617             0000000A   sc_0	set	10
  7618             0000000C   lba_0	set	12
  7619             00000010   bufAddr_0	set	16
  7620             00000014   numSect_0	set	20
  7621             00000018   multiCnt_0	set	24
  7622                        	.block	1872
  7623                        ;
  7624                        ;   reg_cmd_info.cmd = cmd;
  7625                        	.sym	dev,4,14,6,8
  7626                        	.sym	cmd,6,14,6,8
  7627                        	.sym	fr,8,16,6,16
  7628                        	.sym	sc,10,16,6,16
  7629                        	.sym	lba,12,18,6,32
  7630                        	.sym	bufAddr,16,142,6,32
  7631                        	.sym	numSect,20,7,6,32
  7632                        	.sym	multiCnt,24,5,6,16
  7633                        	.line	1874
  7634 06:A8CD: E2 20        	sep	#$20
  7635                        	longa	off
  7636 06:A8CF: A5 0A        	lda	<L273+cmd_0
  7637 06:A8D1: 8D xx xx     	sta	|~~reg_cmd_info
  7638 06:A8D4: C2 20        	rep	#$20
  7639                        	longa	on
  7640                        ;   reg_cmd_info.fr = fr;
  7641                        	.line	1875
  7642 06:A8D6: A5 0C        	lda	<L273+fr_0
  7643 06:A8D8: 8D xx xx     	sta	|~~reg_cmd_info+1
  7644                        ;   reg_cmd_info.sc = sc;
  7645                        	.line	1876
  7646 06:A8DB: A5 0E        	lda	<L273+sc_0
  7647 06:A8DD: 8D xx xx     	sta	|~~reg_cmd_info+3
  7648                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  7649                        	.line	1877
  7650 06:A8E0: A5 08        	lda	<L273+dev_0
  7651 06:A8E2: 29 FF 00     	and	#$ff
  7652 06:A8E5: D0 03        	bne	L277
  7653 06:A8E7: 82 05 00     	brl	L276
  7654                        L277:
  7655 06:A8EA: A9 10 00     	lda	#$10
  7656 06:A8ED: 80 03        	bra	L278
  Thu Jul 29 2021 11:55                                                Page 146


  7657                        L276:
  7658 06:A8EF: A9 00 00     	lda	#$0
  7659                        L278:
  7660 06:A8F2: 09 40 00     	ora	#<$40
  7661 06:A8F5: 85 01        	sta	<R0
  7662 06:A8F7: E2 20        	sep	#$20
  7663                        	longa	off
  7664 06:A8F9: A5 01        	lda	<R0
  7665 06:A8FB: 8D xx xx     	sta	|~~reg_cmd_info+11
  7666 06:A8FE: C2 20        	rep	#$20
  7667                        	longa	on
  7668                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  7669                        	.line	1878
  7670 06:A900: AD xx xx     	lda	|~~int_use_intr_flag
  7671 06:A903: 29 FF 00     	and	#$ff
  7672 06:A906: D0 03        	bne	L280
  7673 06:A908: 82 05 00     	brl	L279
  7674                        L280:
  7675 06:A90B: A9 00 00     	lda	#$0
  7676 06:A90E: 80 03        	bra	L281
  7677                        L279:
  7678 06:A910: A9 02 00     	lda	#$2
  7679                        L281:
  7680 06:A913: 85 01        	sta	<R0
  7681 06:A915: E2 20        	sep	#$20
  7682                        	longa	off
  7683 06:A917: A5 01        	lda	<R0
  7684 06:A919: 8D xx xx     	sta	|~~reg_cmd_info+12
  7685 06:A91C: C2 20        	rep	#$20
  7686                        	longa	on
  7687                        ;   reg_cmd_info.lbaSize = LBA28;
  7688                        	.line	1879
  7689 06:A91E: E2 20        	sep	#$20
  7690                        	longa	off
  7691 06:A920: A9 1C        	lda	#$1c
  7692 06:A922: 8D xx xx     	sta	|~~reg_cmd_info+19
  7693 06:A925: C2 20        	rep	#$20
  7694                        	longa	on
  7695                        ;   reg_cmd_info.lbaHigh = 0L;
  7696                        	.line	1880
  7697 06:A927: 9C xx xx     	stz	|~~reg_cmd_info+24
  7698 06:A92A: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  7699                        ;   reg_cmd_info.lbaLow = lba;
  7700                        	.line	1881
  7701 06:A92D: A5 10        	lda	<L273+lba_0
  7702 06:A92F: 8D xx xx     	sta	|~~reg_cmd_info+20
  7703 06:A932: A5 12        	lda	<L273+lba_0+2
  7704 06:A934: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  7705                        ;
  7706                        ;   // these commands transfer only 1 sector
  7707                        ;   if (    ( cmd == CMD_IDENTIFY_DEVICE )
  7708                        	.line	1884
  7709                        ;        || ( cmd == CMD_IDENTIFY_DEVICE_PACKET )
  7710                        ;      )
  7711                        ;      numSect = 1;
  7712 06:A937: E2 20        	sep	#$20
  7713                        	longa	off
  Thu Jul 29 2021 11:55                                                Page 147


  7714 06:A939: A5 0A        	lda	<L273+cmd_0
  7715 06:A93B: C9 EC        	cmp	#<$ec
  7716 06:A93D: C2 20        	rep	#$20
  7717                        	longa	on
  7718 06:A93F: D0 03        	bne	L283
  7719 06:A941: 82 0D 00     	brl	L282
  7720                        L283:
  7721 06:A944: E2 20        	sep	#$20
  7722                        	longa	off
  7723 06:A946: A5 0A        	lda	<L273+cmd_0
  7724 06:A948: C9 A1        	cmp	#<$a1
  7725 06:A94A: C2 20        	rep	#$20
  7726                        	longa	on
  7727 06:A94C: F0 03        	beq	L284
  7728 06:A94E: 82 0A 00     	brl	L10112
  7729                        L284:
  7730                        L282:
  7731                        	.line	1887
  7732 06:A951: A9 01 00     	lda	#$1
  7733 06:A954: 85 18        	sta	<L273+numSect_0
  7734 06:A956: A9 00 00     	lda	#$0
  7735 06:A959: 85 1A        	sta	<L273+numSect_0+2
  7736                        ;
  7737                        ;   // adjust multiple count
  7738                        ;   if ( multiCnt & 0x0800 )
  7739                        L10112:
  7740                        	.line	1890
  7741                        ;   {
  7742 06:A95B: A5 1C        	lda	<L273+multiCnt_0
  7743 06:A95D: 29 00 08     	and	#<$800
  7744 06:A960: D0 03        	bne	L285
  7745 06:A962: 82 08 00     	brl	L10113
  7746                        L285:
  7747                        	.line	1891
  7748                        ;      // assume caller knows what they are doing
  7749                        ;      multiCnt &= 0x00ff;
  7750                        	.line	1893
  7751 06:A965: A9 00 FF     	lda	#$ff00
  7752 06:A968: 14 1C        	trb	<L273+multiCnt_0
  7753                        ;   }
  7754                        	.line	1894
  7755                        ;   else
  7756 06:A96A: 82 12 00     	brl	L10114
  7757                        L10113:
  7758                        ;   {
  7759                        	.line	1896
  7760                        ;      // only Read Multiple uses multiCnt
  7761                        ;      if ( cmd != CMD_READ_MULTIPLE )
  7762                        	.line	1898
  7763                        ;         multiCnt = 1;
  7764 06:A96D: E2 20        	sep	#$20
  7765                        	longa	off
  7766 06:A96F: A5 0A        	lda	<L273+cmd_0
  7767 06:A971: C9 C4        	cmp	#<$c4
  7768 06:A973: C2 20        	rep	#$20
  7769                        	longa	on
  7770 06:A975: D0 03        	bne	L286
  7771 06:A977: 82 05 00     	brl	L10115
  Thu Jul 29 2021 11:55                                                Page 148


  7772                        L286:
  7773                        	.line	1899
  7774 06:A97A: A9 01 00     	lda	#$1
  7775 06:A97D: 85 1C        	sta	<L273+multiCnt_0
  7776                        ;   }
  7777                        L10115:
  7778                        	.line	1900
  7779                        L10114:
  7780                        ;
  7781                        ;   reg_cmd_info.ns  = numSect;
  7782                        	.line	1902
  7783 06:A97F: A5 18        	lda	<L273+numSect_0
  7784 06:A981: 8D xx xx     	sta	|~~reg_cmd_info+13
  7785 06:A984: A5 1A        	lda	<L273+numSect_0+2
  7786 06:A986: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  7787                        ;   reg_cmd_info.mc  = multiCnt;
  7788                        	.line	1903
  7789 06:A989: A5 1C        	lda	<L273+multiCnt_0
  7790 06:A98B: 8D xx xx     	sta	|~~reg_cmd_info+17
  7791                        ;
  7792                        ;   return exec_pio_data_in_cmd( dev, bufAddr, num
                    Sect, multiCnt );
  7793                        	.line	1905
  7794 06:A98E: D4 1C        	pei	<L273+multiCnt_0
  7795 06:A990: D4 1A        	pei	<L273+numSect_0+2
  7796 06:A992: D4 18        	pei	<L273+numSect_0
  7797 06:A994: D4 16        	pei	<L273+bufAddr_0+2
  7798 06:A996: D4 14        	pei	<L273+bufAddr_0
  7799 06:A998: D4 08        	pei	<L273+dev_0
  7800 06:A99A: 22 77 A6 06  	jsl	~~exec_pio_data_in_cmd
  7801                        L287:
  7802 06:A99E: A8           	tay
  7803 06:A99F: A5 06        	lda	<L273+2
  7804 06:A9A1: 85 1C        	sta	<L273+2+22
  7805 06:A9A3: A5 05        	lda	<L273+1
  7806 06:A9A5: 85 1B        	sta	<L273+1+22
  7807 06:A9A7: 2B           	pld
  7808 06:A9A8: 3B           	tsc
  7809 06:A9A9: 18           	clc
  7810 06:A9AA: 69 1A 00     	adc	#L273+22
  7811 06:A9AD: 1B           	tcs
  7812 06:A9AE: 98           	tya
  7813 06:A9AF: 6B           	rtl
  7814                        ;}
  7815                        	.line	1906
  7816                        	.endblock	1906
  7817             00000004   L273	equ	4
  7818             00000005   L274	equ	5
  7819 06:A9B0:              	ends
  7820                        	efunc
  7821                        	.endfunc	1906,5,4
  7822                        	.line	1906
  7823                        ;
  7824                        ;//***********************************************
                    **************
  7825                        ;//
  7826                        ;// reg_pio_data_in_lba48() - Easy way to execute 
                    a PIO Data In command
  Thu Jul 29 2021 11:55                                                Page 149


  7827                        ;//                           using an LBA sector 
                    address.
  7828                        ;//
  7829                        ;//***********************************************
                    **************
  7830                        ;
  7831                        ;int reg_pio_data_in_lba48( unsigned char dev, uns
                    igned char cmd,
  7832                        ;                           unsigned int fr, unsig
                    ned int sc,
  7833                        ;                           unsigned long lbahi, u
                    nsigned long lbalo,
  7834                        ;                           unsigned char * bufAdd
                    r,
  7835                        ;                           long numSect, int mult
                    iCnt )
  7836                        ;
  7837                        ;{
  7838                        	.line	1915
  7839                        	.line	1921
  7840                        	FXHDD
  7841                        	xdef	~~reg_pio_data_in_lba48
  7842                        	func
  7843                        	.function	1921
  7844                        ~~reg_pio_data_in_lba48:
  7845                        	longa	on
  7846                        	longi	on
  7847 06:A9B0: 3B           	tsc
  7848 06:A9B1: 38           	sec
  7849 06:A9B2: E9 04 00     	sbc	#L288
  7850 06:A9B5: 1B           	tcs
  7851 06:A9B6: 0B           	phd
  7852 06:A9B7: 5B           	tcd
  7853             00000004   dev_0	set	4
  7854             00000006   cmd_0	set	6
  7855             00000008   fr_0	set	8
  7856             0000000A   sc_0	set	10
  7857             0000000C   lbahi_0	set	12
  7858             00000010   lbalo_0	set	16
  7859             00000014   bufAddr_0	set	20
  7860             00000018   numSect_0	set	24
  7861             0000001C   multiCnt_0	set	28
  7862                        	.block	1921
  7863                        ;
  7864                        ;   reg_cmd_info.cmd = cmd;
  7865                        	.sym	dev,4,14,6,8
  7866                        	.sym	cmd,6,14,6,8
  7867                        	.sym	fr,8,16,6,16
  7868                        	.sym	sc,10,16,6,16
  7869                        	.sym	lbahi,12,18,6,32
  7870                        	.sym	lbalo,16,18,6,32
  7871                        	.sym	bufAddr,20,142,6,32
  7872                        	.sym	numSect,24,7,6,32
  7873                        	.sym	multiCnt,28,5,6,16
  7874                        	.line	1923
  7875 06:A9B8: E2 20        	sep	#$20
  7876                        	longa	off
  7877 06:A9BA: A5 0A        	lda	<L288+cmd_0
  Thu Jul 29 2021 11:55                                                Page 150


  7878 06:A9BC: 8D xx xx     	sta	|~~reg_cmd_info
  7879 06:A9BF: C2 20        	rep	#$20
  7880                        	longa	on
  7881                        ;   reg_cmd_info.fr = fr;
  7882                        	.line	1924
  7883 06:A9C1: A5 0C        	lda	<L288+fr_0
  7884 06:A9C3: 8D xx xx     	sta	|~~reg_cmd_info+1
  7885                        ;   reg_cmd_info.sc = sc;
  7886                        	.line	1925
  7887 06:A9C6: A5 0E        	lda	<L288+sc_0
  7888 06:A9C8: 8D xx xx     	sta	|~~reg_cmd_info+3
  7889                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  7890                        	.line	1926
  7891 06:A9CB: A5 08        	lda	<L288+dev_0
  7892 06:A9CD: 29 FF 00     	and	#$ff
  7893 06:A9D0: D0 03        	bne	L292
  7894 06:A9D2: 82 05 00     	brl	L291
  7895                        L292:
  7896 06:A9D5: A9 10 00     	lda	#$10
  7897 06:A9D8: 80 03        	bra	L293
  7898                        L291:
  7899 06:A9DA: A9 00 00     	lda	#$0
  7900                        L293:
  7901 06:A9DD: 09 40 00     	ora	#<$40
  7902 06:A9E0: 85 01        	sta	<R0
  7903 06:A9E2: E2 20        	sep	#$20
  7904                        	longa	off
  7905 06:A9E4: A5 01        	lda	<R0
  7906 06:A9E6: 8D xx xx     	sta	|~~reg_cmd_info+11
  7907 06:A9E9: C2 20        	rep	#$20
  7908                        	longa	on
  7909                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  7910                        	.line	1927
  7911 06:A9EB: AD xx xx     	lda	|~~int_use_intr_flag
  7912 06:A9EE: 29 FF 00     	and	#$ff
  7913 06:A9F1: D0 03        	bne	L295
  7914 06:A9F3: 82 05 00     	brl	L294
  7915                        L295:
  7916 06:A9F6: A9 00 00     	lda	#$0
  7917 06:A9F9: 80 03        	bra	L296
  7918                        L294:
  7919 06:A9FB: A9 02 00     	lda	#$2
  7920                        L296:
  7921 06:A9FE: 85 01        	sta	<R0
  7922 06:AA00: E2 20        	sep	#$20
  7923                        	longa	off
  7924 06:AA02: A5 01        	lda	<R0
  7925 06:AA04: 8D xx xx     	sta	|~~reg_cmd_info+12
  7926 06:AA07: C2 20        	rep	#$20
  7927                        	longa	on
  7928                        ;   reg_cmd_info.lbaSize = LBA48;
  7929                        	.line	1928
  7930 06:AA09: E2 20        	sep	#$20
  7931                        	longa	off
  7932 06:AA0B: A9 30        	lda	#$30
  7933 06:AA0D: 8D xx xx     	sta	|~~reg_cmd_info+19
  Thu Jul 29 2021 11:55                                                Page 151


  7934 06:AA10: C2 20        	rep	#$20
  7935                        	longa	on
  7936                        ;   reg_cmd_info.lbaHigh = lbahi;
  7937                        	.line	1929
  7938 06:AA12: A5 10        	lda	<L288+lbahi_0
  7939 06:AA14: 8D xx xx     	sta	|~~reg_cmd_info+24
  7940 06:AA17: A5 12        	lda	<L288+lbahi_0+2
  7941 06:AA19: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  7942                        ;   reg_cmd_info.lbaLow = lbalo;
  7943                        	.line	1930
  7944 06:AA1C: A5 14        	lda	<L288+lbalo_0
  7945 06:AA1E: 8D xx xx     	sta	|~~reg_cmd_info+20
  7946 06:AA21: A5 16        	lda	<L288+lbalo_0+2
  7947 06:AA23: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  7948                        ;
  7949                        ;   // adjust multiple count
  7950                        ;   if ( multiCnt & 0x0800 )
  7951                        	.line	1933
  7952                        ;   {
  7953 06:AA26: A5 20        	lda	<L288+multiCnt_0
  7954 06:AA28: 29 00 08     	and	#<$800
  7955 06:AA2B: D0 03        	bne	L297
  7956 06:AA2D: 82 08 00     	brl	L10116
  7957                        L297:
  7958                        	.line	1934
  7959                        ;      // assume caller knows what they are doing
  7960                        ;      multiCnt &= 0x00ff;
  7961                        	.line	1936
  7962 06:AA30: A9 00 FF     	lda	#$ff00
  7963 06:AA33: 14 20        	trb	<L288+multiCnt_0
  7964                        ;   }
  7965                        	.line	1937
  7966                        ;   else
  7967 06:AA35: 82 12 00     	brl	L10117
  7968                        L10116:
  7969                        ;   {
  7970                        	.line	1939
  7971                        ;      // only Read Multiple Ext uses multiCnt
  7972                        ;      if ( cmd != CMD_READ_MULTIPLE_EXT )
  7973                        	.line	1941
  7974                        ;         multiCnt = 1;
  7975 06:AA38: E2 20        	sep	#$20
  7976                        	longa	off
  7977 06:AA3A: A5 0A        	lda	<L288+cmd_0
  7978 06:AA3C: C9 29        	cmp	#<$29
  7979 06:AA3E: C2 20        	rep	#$20
  7980                        	longa	on
  7981 06:AA40: D0 03        	bne	L298
  7982 06:AA42: 82 05 00     	brl	L10118
  7983                        L298:
  7984                        	.line	1942
  7985 06:AA45: A9 01 00     	lda	#$1
  7986 06:AA48: 85 20        	sta	<L288+multiCnt_0
  7987                        ;   }
  7988                        L10118:
  7989                        	.line	1943
  7990                        L10117:
  7991                        ;
  Thu Jul 29 2021 11:55                                                Page 152


  7992                        ;   reg_cmd_info.ns  = numSect;
  7993                        	.line	1945
  7994 06:AA4A: A5 1C        	lda	<L288+numSect_0
  7995 06:AA4C: 8D xx xx     	sta	|~~reg_cmd_info+13
  7996 06:AA4F: A5 1E        	lda	<L288+numSect_0+2
  7997 06:AA51: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  7998                        ;   reg_cmd_info.mc  = multiCnt;
  7999                        	.line	1946
  8000 06:AA54: A5 20        	lda	<L288+multiCnt_0
  8001 06:AA56: 8D xx xx     	sta	|~~reg_cmd_info+17
  8002                        ;
  8003                        ;   return exec_pio_data_in_cmd( dev, bufAddr, num
                    Sect, multiCnt );
  8004                        	.line	1948
  8005 06:AA59: D4 20        	pei	<L288+multiCnt_0
  8006 06:AA5B: D4 1E        	pei	<L288+numSect_0+2
  8007 06:AA5D: D4 1C        	pei	<L288+numSect_0
  8008 06:AA5F: D4 1A        	pei	<L288+bufAddr_0+2
  8009 06:AA61: D4 18        	pei	<L288+bufAddr_0
  8010 06:AA63: D4 08        	pei	<L288+dev_0
  8011 06:AA65: 22 77 A6 06  	jsl	~~exec_pio_data_in_cmd
  8012                        L299:
  8013 06:AA69: A8           	tay
  8014 06:AA6A: A5 06        	lda	<L288+2
  8015 06:AA6C: 85 20        	sta	<L288+2+26
  8016 06:AA6E: A5 05        	lda	<L288+1
  8017 06:AA70: 85 1F        	sta	<L288+1+26
  8018 06:AA72: 2B           	pld
  8019 06:AA73: 3B           	tsc
  8020 06:AA74: 18           	clc
  8021 06:AA75: 69 1E 00     	adc	#L288+26
  8022 06:AA78: 1B           	tcs
  8023 06:AA79: 98           	tya
  8024 06:AA7A: 6B           	rtl
  8025                        ;}
  8026                        	.line	1949
  8027                        	.endblock	1949
  8028             00000004   L288	equ	4
  8029             00000005   L289	equ	5
  8030 06:AA7B:              	ends
  8031                        	efunc
  8032                        	.endfunc	1949,5,4
  8033                        	.line	1949
  8034                        ;
  8035                        ;//***********************************************
                    **************
  8036                        ;//
  8037                        ;// exec_pio_data_out_cmd() - Execute a PIO Data O
                    ut command.
  8038                        ;//
  8039                        ;// See ATA-2 Section 9.4, ATA-3 Section 9.4,
  8040                        ;// ATA-4 Section 8.7 Figure 11.
  8041                        ;//
  8042                        ;//***********************************************
                    **************
  8043                        ;
  8044                        ;static int exec_pio_data_out_cmd( unsigned char d
                    ev,
  Thu Jul 29 2021 11:55                                                Page 153


  8045                        ;                             unsigned char * bufA
                    ddr,
  8046                        ;                             long numSect, int mu
                    ltiCnt );
  8047                        ;
  8048                        ;static int exec_pio_data_out_cmd( unsigned char d
                    ev,
  8049                        ;                             unsigned char * bufA
                    ddr,
  8050                        ;                             long numSect, int mu
                    ltiCnt )
  8051                        ;
  8052                        ;{
  8053                        	.line	1964
  8054                        	.line	1968
  8055                        	FXHDD
  8056                        	func
  8057                        	.function	1968
  8058                        ~~exec_pio_data_out_cmd:
  8059                        	longa	on
  8060                        	longi	on
  8061 06:AA7B: 3B           	tsc
  8062 06:AA7C: 38           	sec
  8063 06:AA7D: E9 0B 00     	sbc	#L300
  8064 06:AA80: 1B           	tcs
  8065 06:AA81: 0B           	phd
  8066 06:AA82: 5B           	tcd
  8067             00000004   dev_0	set	4
  8068             00000006   bufAddr_0	set	6
  8069             0000000A   numSect_0	set	10
  8070             0000000E   multiCnt_0	set	14
  8071                        	.block	1968
  8072                        ;   unsigned char status;
  8073                        ;   int loopFlag = 1;
  8074                        ;   long wordCnt;
  8075                        ;
  8076                        ;   // reset Bus Master Error bit
  8077                        ;
  8078                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  8079             00000000   status_1	set	0
  8080             00000001   loopFlag_1	set	1
  8081             00000003   wordCnt_1	set	3
  8082                        	.sym	status,0,14,1,8
  8083                        	.sym	loopFlag,1,5,1,16
  8084                        	.sym	wordCnt,3,7,1,32
  8085                        	.sym	dev,4,14,6,8
  8086                        	.sym	bufAddr,6,142,6,32
  8087                        	.sym	numSect,10,7,6,32
  8088                        	.sym	multiCnt,14,5,6,16
  8089 06:AA83: A9 01 00     	lda	#$1
  8090 06:AA86: 85 06        	sta	<L301+loopFlag_1
  8091                        	.line	1975
  8092 06:AA88: F4 02 00     	pea	#<$2
  8093 06:AA8B: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  8094                        ;
  8095                        ;   // Set command time out.
  8096                        ;
  8097                        ;   tmr_set_timeout();
  Thu Jul 29 2021 11:55                                                Page 154


  8098                        	.line	1979
  8099 06:AA8F: 22 00 BD 06  	jsl	~~tmr_set_timeout
  8100                        ;
  8101                        ;   // Select the drive - call the sub_select func
                    tion.
  8102                        ;   // Quit now if this fails.
  8103                        ;
  8104                        ;   if ( sub_select( dev ) )
  8105                        	.line	1984
  8106                        ;   {
  8107 06:AA93: D4 0F        	pei	<L300+dev_0
  8108 06:AA95: 22 AF B4 06  	jsl	~~sub_select
  8109 06:AA99: AA           	tax
  8110 06:AA9A: D0 03        	bne	L303
  8111 06:AA9C: 82 15 00     	brl	L10119
  8112                        L303:
  8113                        	.line	1985
  8114                        ;      return 1;
  8115                        	.line	1986
  8116 06:AA9F: A9 01 00     	lda	#$1
  8117                        L304:
  8118 06:AAA2: A8           	tay
  8119 06:AAA3: A5 0D        	lda	<L300+2
  8120 06:AAA5: 85 19        	sta	<L300+2+12
  8121 06:AAA7: A5 0C        	lda	<L300+1
  8122 06:AAA9: 85 18        	sta	<L300+1+12
  8123 06:AAAB: 2B           	pld
  8124 06:AAAC: 3B           	tsc
  8125 06:AAAD: 18           	clc
  8126 06:AAAE: 69 17 00     	adc	#L300+12
  8127 06:AAB1: 1B           	tcs
  8128 06:AAB2: 98           	tya
  8129 06:AAB3: 6B           	rtl
  8130                        ;   }
  8131                        	.line	1987
  8132                        ;
  8133                        ;   // Set up all the registers except the command
                     register.
  8134                        ;
  8135                        ;   sub_setup_command();
  8136                        L10119:
  8137                        	.line	1991
  8138 06:AAB4: 22 69 B2 06  	jsl	~~sub_setup_command
  8139                        ;
  8140                        ;   // Start the command by setting the Command re
                    gister.  The drive
  8141                        ;   // should immediately set BUSY status.
  8142                        ;
  8143                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  8144                        	.line	1996
  8145 06:AAB8: AD xx xx     	lda	|~~reg_cmd_info
  8146 06:AABB: 48           	pha
  8147 06:AABC: F4 07 00     	pea	#<$7
  8148 06:AABF: 22 F0 B7 06  	jsl	~~pio_outbyte
  8149                        ;
  8150                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  8151                        ;   // This gives the drive time to set BUSY in th
  Thu Jul 29 2021 11:55                                                Page 155


                    e status register on
  8152                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  8153                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  8154                        ;   // completed the command when it really had no
                    t even started the
  8155                        ;   // command yet.
  8156                        ;
  8157                        ;   DELAY400NS;
  8158                        	.line	2005
  8159                        	.line	2005
  8160 06:AAC3: F4 08 00     	pea	#<$8
  8161 06:AAC6: 22 B1 B7 06  	jsl	~~pio_inbyte
  8162                        	.line	2005
  8163 06:AACA: F4 08 00     	pea	#<$8
  8164 06:AACD: 22 B1 B7 06  	jsl	~~pio_inbyte
  8165                        	.line	2005
  8166 06:AAD1: F4 08 00     	pea	#<$8
  8167 06:AAD4: 22 B1 B7 06  	jsl	~~pio_inbyte
  8168                        	.line	2005
  8169 06:AAD8: F4 08 00     	pea	#<$8
  8170 06:AADB: 22 B1 B7 06  	jsl	~~pio_inbyte
  8171                        	.line	2005
  8172 06:AADF: F4 08 00     	pea	#<$8
  8173 06:AAE2: 22 B1 B7 06  	jsl	~~pio_inbyte
  8174                        	.line	2005
  8175                        	.line	2005
  8176                        ;
  8177                        ;   // Wait for not BUSY or time out.
  8178                        ;   // Note: No interrupt is generated for the
  8179                        ;   // first sector of a write command.
  8180                        ;
  8181                        ;   while ( 1 )
  8182                        	.line	2011
  8183                        L10120:
  8184                        ;   {
  8185                        	.line	2012
  8186                        ;      status = pio_inbyte( CB_ASTAT );
  8187                        	.line	2013
  8188 06:AAE6: F4 08 00     	pea	#<$8
  8189 06:AAE9: 22 B1 B7 06  	jsl	~~pio_inbyte
  8190 06:AAED: E2 20        	sep	#$20
  8191                        	longa	off
  8192 06:AAEF: 85 05        	sta	<L301+status_1
  8193 06:AAF1: C2 20        	rep	#$20
  8194                        	longa	on
  8195                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
  8196                        	.line	2014
  8197                        ;         break;
  8198 06:AAF3: E2 20        	sep	#$20
  8199                        	longa	off
  8200 06:AAF5: A5 05        	lda	<L301+status_1
  8201 06:AAF7: 29 80        	and	#<$80
  8202 06:AAF9: C2 20        	rep	#$20
  8203                        	longa	on
  8204 06:AAFB: D0 03        	bne	L305
  8205 06:AAFD: 82 24 00     	brl	L10121
  Thu Jul 29 2021 11:55                                                Page 156


  8206                        L305:
  8207                        ;      if ( tmr_chk_timeout() )
  8208                        	.line	2016
  8209                        ;      {
  8210 06:AB00: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  8211 06:AB04: AA           	tax
  8212 06:AB05: D0 03        	bne	L306
  8213 06:AB07: 82 17 00     	brl	L10122
  8214                        L306:
  8215                        	.line	2017
  8216                        ;         reg_cmd_info.to = 1;
  8217                        	.line	2018
  8218 06:AB0A: E2 20        	sep	#$20
  8219                        	longa	off
  8220 06:AB0C: A9 01        	lda	#$1
  8221 06:AB0E: 8D xx xx     	sta	|~~reg_cmd_info+32
  8222 06:AB11: C2 20        	rep	#$20
  8223                        	longa	on
  8224                        ;         reg_cmd_info.ec = 47;
  8225                        	.line	2019
  8226 06:AB13: E2 20        	sep	#$20
  8227                        	longa	off
  8228 06:AB15: A9 2F        	lda	#$2f
  8229 06:AB17: 8D xx xx     	sta	|~~reg_cmd_info+31
  8230 06:AB1A: C2 20        	rep	#$20
  8231                        	longa	on
  8232                        ;         loopFlag = 0;
  8233                        	.line	2020
  8234 06:AB1C: 64 06        	stz	<L301+loopFlag_1
  8235                        ;         break;
  8236                        	.line	2021
  8237 06:AB1E: 82 03 00     	brl	L10121
  8238                        ;      }
  8239                        	.line	2022
  8240                        ;   }
  8241                        L10122:
  8242                        	.line	2023
  8243 06:AB21: 82 C2 FF     	brl	L10120
  8244                        L10121:
  8245                        ;
  8246                        ;   // This loop writes each sector.
  8247                        ;
  8248                        ;   while ( loopFlag )
  8249                        	.line	2027
  8250                        L10123:
  8251 06:AB24: A5 06        	lda	<L301+loopFlag_1
  8252 06:AB26: D0 03        	bne	L307
  8253 06:AB28: 82 AC 01     	brl	L10124
  8254                        L307:
  8255                        ;   {
  8256                        	.line	2028
  8257                        ;      // WRITE_LOOP:
  8258                        ;      //
  8259                        ;      // NOTE NOTE NOTE ...  The primary status r
                    egister (1f7) MUST NOT be
  8260                        ;      // read more than ONCE for each sector tran
                    sferred!  When the
  8261                        ;      // primary status register is read, the dri
  Thu Jul 29 2021 11:55                                                Page 157


                    ve resets IRQ.  The
  8262                        ;      // alternate status register (3f6) can be r
                    ead any number of times.
  8263                        ;      // For correct results, transfer the 256 wo
                    rds (REP OUTSW), wait for
  8264                        ;      // interrupt and then read the primary stat
                    us register.  AS
  8265                        ;      // SOON as BOTH the primary status register
                     has been read AND the
  8266                        ;      // last of the 256 words has been written, 
                    the drive is allowed to
  8267                        ;      // generate the next IRQ (newer and faster 
                    drives could generate
  8268                        ;      // the next IRQ in 50 microseconds or less)
                    .  If the primary
  8269                        ;      // status register is read more than once, 
                    there is the possibility
  8270                        ;      // of a race between the drive and the soft
                    ware and the next IRQ
  8271                        ;      // could be reset before the system interru
                    pt controller sees it.
  8272                        ;
  8273                        ;      // If BSY=0 and DRQ=1, transfer the data,
  8274                        ;      // even if we find out there is an error la
                    ter.
  8275                        ;
  8276                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == CB_STAT_DRQ )
  8277                        	.line	2048
  8278                        ;      {
  8279 06:AB2B: A5 05        	lda	<L301+status_1
  8280 06:AB2D: 29 88 00     	and	#<$88
  8281 06:AB30: 85 01        	sta	<R0
  8282 06:AB32: A5 01        	lda	<R0
  8283 06:AB34: C9 08 00     	cmp	#<$8
  8284 06:AB37: F0 03        	beq	L308
  8285 06:AB39: 82 F6 00     	brl	L10125
  8286                        L308:
  8287                        	.line	2049
  8288                        ;
  8289                        ;         // increment number of DRQ packets
  8290                        ;
  8291                        ;         reg_cmd_info.drqPackets ++ ;
  8292                        	.line	2053
  8293 06:AB3C: EE xx xx     	inc	|~~reg_cmd_info+37
  8294 06:AB3F: D0 03        	bne	L309
  8295 06:AB41: EE xx xx     	inc	|~~reg_cmd_info+37+2
  8296                        L309:
  8297                        ;
  8298                        ;         // determine the number of sectors to tr
                    ansfer
  8299                        ;
  8300                        ;         wordCnt = multiCnt ? multiCnt : 1;
  8301                        	.line	2057
  8302 06:AB44: A5 19        	lda	<L300+multiCnt_0
  8303 06:AB46: D0 03        	bne	L311
  8304 06:AB48: 82 04 00     	brl	L310
  8305                        L311:
  Thu Jul 29 2021 11:55                                                Page 158


  8306 06:AB4B: A5 19        	lda	<L300+multiCnt_0
  8307 06:AB4D: 80 03        	bra	L312
  8308                        L310:
  8309 06:AB4F: A9 01 00     	lda	#$1
  8310                        L312:
  8311 06:AB52: 85 01        	sta	<R0
  8312 06:AB54: A0 00 00     	ldy	#$0
  8313 06:AB57: A5 01        	lda	<R0
  8314 06:AB59: 10 01        	bpl	L313
  8315 06:AB5B: 88           	dey
  8316                        L313:
  8317 06:AB5C: 85 08        	sta	<L301+wordCnt_1
  8318 06:AB5E: 84 0A        	sty	<L301+wordCnt_1+2
  8319                        ;         if ( wordCnt > numSect )
  8320                        	.line	2058
  8321                        ;            wordCnt = numSect;
  8322 06:AB60: 38           	sec
  8323 06:AB61: A5 15        	lda	<L300+numSect_0
  8324 06:AB63: E5 08        	sbc	<L301+wordCnt_1
  8325 06:AB65: A5 17        	lda	<L300+numSect_0+2
  8326 06:AB67: E5 0A        	sbc	<L301+wordCnt_1+2
  8327 06:AB69: 70 03        	bvs	L314
  8328 06:AB6B: 49 00 80     	eor	#$8000
  8329                        L314:
  8330 06:AB6E: 10 03        	bpl	L315
  8331 06:AB70: 82 08 00     	brl	L10126
  8332                        L315:
  8333                        	.line	2059
  8334 06:AB73: A5 15        	lda	<L300+numSect_0
  8335 06:AB75: 85 08        	sta	<L301+wordCnt_1
  8336 06:AB77: A5 17        	lda	<L300+numSect_0+2
  8337 06:AB79: 85 0A        	sta	<L301+wordCnt_1+2
  8338                        ;         wordCnt = wordCnt * 256;
  8339                        L10126:
  8340                        	.line	2060
  8341 06:AB7B: D4 0A        	pei	<L301+wordCnt_1+2
  8342 06:AB7D: D4 08        	pei	<L301+wordCnt_1
  8343 06:AB7F: A9 08 00     	lda	#$8
  8344                        	xref	~~~lasl
  8345 06:AB82: 22 xx xx xx  	jsl	~~~lasl
  8346 06:AB86: 85 08        	sta	<L301+wordCnt_1
  8347 06:AB88: 86 0A        	stx	<L301+wordCnt_1+2
  8348                        ;
  8349                        ;         // Do the REP OUTSW to write the data fo
                    r one DRQ block.
  8350                        ;
  8351                        ;         reg_cmd_info.totalBytesXfer += ( wordCnt
                     << 1 );
  8352                        	.line	2064
  8353 06:AB8A: A5 08        	lda	<L301+wordCnt_1
  8354 06:AB8C: 85 01        	sta	<R0
  8355 06:AB8E: A5 0A        	lda	<L301+wordCnt_1+2
  8356 06:AB90: 85 03        	sta	<R0+2
  8357 06:AB92: 06 01        	asl	<R0
  8358 06:AB94: 26 03        	rol	<R0+2
  8359 06:AB96: 18           	clc
  8360 06:AB97: A5 01        	lda	<R0
  8361 06:AB99: 6D xx xx     	adc	|~~reg_cmd_info+33
  Thu Jul 29 2021 11:55                                                Page 159


  8362 06:AB9C: 8D xx xx     	sta	|~~reg_cmd_info+33
  8363 06:AB9F: A5 03        	lda	<R0+2
  8364 06:ABA1: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  8365 06:ABA4: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  8366                        ;         pio_drq_block_out( CB_DATA, bufAddr, wor
                    dCnt );
  8367                        	.line	2065
  8368 06:ABA7: D4 0A        	pei	<L301+wordCnt_1+2
  8369 06:ABA9: D4 08        	pei	<L301+wordCnt_1
  8370 06:ABAB: D4 13        	pei	<L300+bufAddr_0+2
  8371 06:ABAD: D4 11        	pei	<L300+bufAddr_0
  8372 06:ABAF: F4 00 00     	pea	#<$0
  8373 06:ABB2: 22 1B BA 06  	jsl	~~pio_drq_block_out
  8374                        ;
  8375                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  8376                        	.line	2067
  8377                        	.line	2067
  8378 06:ABB6: F4 08 00     	pea	#<$8
  8379 06:ABB9: 22 B1 B7 06  	jsl	~~pio_inbyte
  8380                        	.line	2067
  8381 06:ABBD: F4 08 00     	pea	#<$8
  8382 06:ABC0: 22 B1 B7 06  	jsl	~~pio_inbyte
  8383                        	.line	2067
  8384 06:ABC4: F4 08 00     	pea	#<$8
  8385 06:ABC7: 22 B1 B7 06  	jsl	~~pio_inbyte
  8386                        	.line	2067
  8387 06:ABCB: F4 08 00     	pea	#<$8
  8388 06:ABCE: 22 B1 B7 06  	jsl	~~pio_inbyte
  8389                        	.line	2067
  8390 06:ABD2: F4 08 00     	pea	#<$8
  8391 06:ABD5: 22 B1 B7 06  	jsl	~~pio_inbyte
  8392                        	.line	2067
  8393                        	.line	2067
  8394                        ;
  8395                        ;         // Note: The drive should have dropped D
                    ATA REQUEST and
  8396                        ;         // raised BUSY by now.
  8397                        ;
  8398                        ;         // Decrement the count of sectors to be 
                    transferred
  8399                        ;         // and increment buffer address.
  8400                        ;
  8401                        ;         numSect = numSect - ( multiCnt ? multiCn
                    t : 1 );
  8402                        	.line	2075
  8403 06:ABD9: A5 19        	lda	<L300+multiCnt_0
  8404 06:ABDB: D0 03        	bne	L317
  8405 06:ABDD: 82 04 00     	brl	L316
  8406                        L317:
  8407 06:ABE0: A5 19        	lda	<L300+multiCnt_0
  8408 06:ABE2: 80 03        	bra	L318
  8409                        L316:
  8410 06:ABE4: A9 01 00     	lda	#$1
  8411                        L318:
  8412 06:ABE7: 85 01        	sta	<R0
  8413 06:ABE9: A0 00 00     	ldy	#$0
  8414 06:ABEC: A5 01        	lda	<R0
  Thu Jul 29 2021 11:55                                                Page 160


  8415 06:ABEE: 10 01        	bpl	L319
  8416 06:ABF0: 88           	dey
  8417                        L319:
  8418 06:ABF1: 85 01        	sta	<R0
  8419 06:ABF3: 84 03        	sty	<R0+2
  8420 06:ABF5: 38           	sec
  8421 06:ABF6: A5 15        	lda	<L300+numSect_0
  8422 06:ABF8: E5 01        	sbc	<R0
  8423 06:ABFA: 85 15        	sta	<L300+numSect_0
  8424 06:ABFC: A5 17        	lda	<L300+numSect_0+2
  8425 06:ABFE: E5 03        	sbc	<R0+2
  8426 06:AC00: 85 17        	sta	<L300+numSect_0+2
  8427                        ;         bufAddr = bufAddr + ( 512 * ( multiCnt ?
                     multiCnt : 1 ) );
  8428                        	.line	2076
  8429 06:AC02: A5 19        	lda	<L300+multiCnt_0
  8430 06:AC04: D0 03        	bne	L321
  8431 06:AC06: 82 04 00     	brl	L320
  8432                        L321:
  8433 06:AC09: A5 19        	lda	<L300+multiCnt_0
  8434 06:AC0B: 80 03        	bra	L322
  8435                        L320:
  8436 06:AC0D: A9 01 00     	lda	#$1
  8437                        L322:
  8438 06:AC10: A2 09 00     	ldx	#<$9
  8439                        	xref	~~~asl
  8440 06:AC13: 22 xx xx xx  	jsl	~~~asl
  8441 06:AC17: 85 01        	sta	<R0
  8442 06:AC19: A0 00 00     	ldy	#$0
  8443 06:AC1C: A5 01        	lda	<R0
  8444 06:AC1E: 10 01        	bpl	L323
  8445 06:AC20: 88           	dey
  8446                        L323:
  8447 06:AC21: 85 01        	sta	<R0
  8448 06:AC23: 84 03        	sty	<R0+2
  8449 06:AC25: 18           	clc
  8450 06:AC26: A5 11        	lda	<L300+bufAddr_0
  8451 06:AC28: 65 01        	adc	<R0
  8452 06:AC2A: 85 11        	sta	<L300+bufAddr_0
  8453 06:AC2C: A5 13        	lda	<L300+bufAddr_0+2
  8454 06:AC2E: 65 03        	adc	<R0+2
  8455 06:AC30: 85 13        	sta	<L300+bufAddr_0+2
  8456                        ;      }
  8457                        	.line	2077
  8458                        ;
  8459                        ;      // So was there any error condition?
  8460                        ;
  8461                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_ERR ) )
  8462                        L10125:
  8463                        	.line	2081
  8464                        ;      {
  8465 06:AC32: E2 20        	sep	#$20
  8466                        	longa	off
  8467 06:AC34: A5 05        	lda	<L301+status_1
  8468 06:AC36: 29 A1        	and	#<$a1
  8469 06:AC38: C2 20        	rep	#$20
  8470                        	longa	on
  Thu Jul 29 2021 11:55                                                Page 161


  8471 06:AC3A: D0 03        	bne	L324
  8472 06:AC3C: 82 0C 00     	brl	L10127
  8473                        L324:
  8474                        	.line	2082
  8475                        ;         reg_cmd_info.ec = 41;
  8476                        	.line	2083
  8477 06:AC3F: E2 20        	sep	#$20
  8478                        	longa	off
  8479 06:AC41: A9 29        	lda	#$29
  8480 06:AC43: 8D xx xx     	sta	|~~reg_cmd_info+31
  8481 06:AC46: C2 20        	rep	#$20
  8482                        	longa	on
  8483                        ;         break;   // go to WRITE_DONE
  8484                        	.line	2084
  8485 06:AC48: 82 8C 00     	brl	L10124
  8486                        ;      }
  8487                        	.line	2085
  8488                        ;
  8489                        ;      // DRQ should have been set -- was it?
  8490                        ;
  8491                        ;      if ( ( status & CB_STAT_DRQ ) == 0 )
  8492                        L10127:
  8493                        	.line	2089
  8494                        ;      {
  8495 06:AC4B: E2 20        	sep	#$20
  8496                        	longa	off
  8497 06:AC4D: A5 05        	lda	<L301+status_1
  8498 06:AC4F: 29 08        	and	#<$8
  8499 06:AC51: C2 20        	rep	#$20
  8500                        	longa	on
  8501 06:AC53: F0 03        	beq	L325
  8502 06:AC55: 82 0C 00     	brl	L10128
  8503                        L325:
  8504                        	.line	2090
  8505                        ;         reg_cmd_info.ec = 42;
  8506                        	.line	2091
  8507 06:AC58: E2 20        	sep	#$20
  8508                        	longa	off
  8509 06:AC5A: A9 2A        	lda	#$2a
  8510 06:AC5C: 8D xx xx     	sta	|~~reg_cmd_info+31
  8511 06:AC5F: C2 20        	rep	#$20
  8512                        	longa	on
  8513                        ;         break;   // go to WRITE_DONE
  8514                        	.line	2092
  8515 06:AC61: 82 73 00     	brl	L10124
  8516                        ;      }
  8517                        	.line	2093
  8518                        ;
  8519                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  8520                        ;
  8521                        ;      sub_wait_poll( 44, 45 );
  8522                        L10128:
  8523                        	.line	2097
  8524 06:AC64: F4 2D 00     	pea	#<$2d
  8525 06:AC67: F4 2C 00     	pea	#<$2c
  8526 06:AC6A: 22 3F B6 06  	jsl	~~sub_wait_poll
  8527                        ;
  Thu Jul 29 2021 11:55                                                Page 162


  8528                        ;      // If polling or error read the status, oth
                    erwise
  8529                        ;      // get the status that was read by the inte
                    rrupt handler.
  8530                        ;
  8531                        ;      if ( ( ! int_use_intr_flag ) || ( reg_cmd_i
                    nfo.ec ) )
  8532                        	.line	2102
  8533                        ;         status = pio_inbyte( CB_STAT );
  8534 06:AC6E: AD xx xx     	lda	|~~int_use_intr_flag
  8535 06:AC71: 29 FF 00     	and	#$ff
  8536 06:AC74: D0 03        	bne	L327
  8537 06:AC76: 82 0B 00     	brl	L326
  8538                        L327:
  8539 06:AC79: AD xx xx     	lda	|~~reg_cmd_info+31
  8540 06:AC7C: 29 FF 00     	and	#$ff
  8541 06:AC7F: D0 03        	bne	L328
  8542 06:AC81: 82 10 00     	brl	L10129
  8543                        L328:
  8544                        L326:
  8545                        	.line	2103
  8546 06:AC84: F4 07 00     	pea	#<$7
  8547 06:AC87: 22 B1 B7 06  	jsl	~~pio_inbyte
  8548 06:AC8B: E2 20        	sep	#$20
  8549                        	longa	off
  8550 06:AC8D: 85 05        	sta	<L301+status_1
  8551 06:AC8F: C2 20        	rep	#$20
  8552                        	longa	on
  8553                        ;      else
  8554 06:AC91: 82 09 00     	brl	L10130
  8555                        L10129:
  8556                        ;         status = int_ata_status;
  8557                        	.line	2105
  8558 06:AC94: E2 20        	sep	#$20
  8559                        	longa	off
  8560 06:AC96: AD xx xx     	lda	|~~int_ata_status
  8561 06:AC99: 85 05        	sta	<L301+status_1
  8562 06:AC9B: C2 20        	rep	#$20
  8563                        	longa	on
  8564                        L10130:
  8565                        ;
  8566                        ;      // If there was a time out error, go to WRI
                    TE_DONE.
  8567                        ;
  8568                        ;      if ( reg_cmd_info.ec )
  8569                        	.line	2109
  8570                        ;         break;   // go to WRITE_DONE
  8571 06:AC9D: AD xx xx     	lda	|~~reg_cmd_info+31
  8572 06:ACA0: 29 FF 00     	and	#$ff
  8573 06:ACA3: F0 03        	beq	L329
  8574 06:ACA5: 82 2F 00     	brl	L10124
  8575                        L329:
  8576                        ;
  8577                        ;      // If all of the requested sectors have bee
                    n transferred, make a
  8578                        ;      // few more checks before we exit.
  8579                        ;
  8580                        ;      if ( numSect < 1 )
  Thu Jul 29 2021 11:55                                                Page 163


  8581                        	.line	2115
  8582                        ;      {
  8583 06:ACA8: A5 17        	lda	<L300+numSect_0+2
  8584 06:ACAA: 30 0C        	bmi	L330
  8585 06:ACAC: D0 07        	bne	L331
  8586 06:ACAE: A5 15        	lda	<L300+numSect_0
  8587 06:ACB0: C9 01 00     	cmp	#1
  8588 06:ACB3: 90 03        	bcc	L330
  8589                        L331:
  8590 06:ACB5: 82 1C 00     	brl	L10131
  8591                        L330:
  8592                        	.line	2116
  8593                        ;         // Since the drive has transferred all o
                    f the sectors without
  8594                        ;         // error, the drive MUST not have BUSY, 
                    DEVICE FAULT, DATA REQUEST
  8595                        ;         // or ERROR status at this time.
  8596                        ;
  8597                        ;         if ( status & ( CB_STAT_BSY | CB_STAT_DF
                     | CB_STAT_DRQ | CB_STAT_ERR ) )
  8598                        	.line	2121
  8599                        ;         {
  8600 06:ACB8: E2 20        	sep	#$20
  8601                        	longa	off
  8602 06:ACBA: A5 05        	lda	<L301+status_1
  8603 06:ACBC: 29 A9        	and	#<$a9
  8604 06:ACBE: C2 20        	rep	#$20
  8605                        	longa	on
  8606 06:ACC0: D0 03        	bne	L332
  8607 06:ACC2: 82 0C 00     	brl	L10132
  8608                        L332:
  8609                        	.line	2122
  8610                        ;            reg_cmd_info.ec = 43;
  8611                        	.line	2123
  8612 06:ACC5: E2 20        	sep	#$20
  8613                        	longa	off
  8614 06:ACC7: A9 2B        	lda	#$2b
  8615 06:ACC9: 8D xx xx     	sta	|~~reg_cmd_info+31
  8616 06:ACCC: C2 20        	rep	#$20
  8617                        	longa	on
  8618                        ;            break;   // go to WRITE_DONE
  8619                        	.line	2124
  8620 06:ACCE: 82 06 00     	brl	L10124
  8621                        ;         }
  8622                        	.line	2125
  8623                        ;
  8624                        ;         // All sectors have been written without
                     error, go to WRITE_DONE.
  8625                        ;
  8626                        ;         break;   // go to WRITE_DONE
  8627                        L10132:
  8628                        	.line	2129
  8629 06:ACD1: 82 03 00     	brl	L10124
  8630                        ;
  8631                        ;      }
  8632                        	.line	2131
  8633                        ;
  8634                        ;      //
  Thu Jul 29 2021 11:55                                                Page 164


  8635                        ;      // This is the end of the write loop.  If w
                    e get here, the loop
  8636                        ;      // is repeated to write the next sector.  G
                    o back to WRITE_LOOP.
  8637                        ;
  8638                        ;   }
  8639                        L10131:
  8640                        	.line	2137
  8641 06:ACD4: 82 4D FE     	brl	L10123
  8642                        L10124:
  8643                        ;
  8644                        ;   // BMIDE Error=1?
  8645                        ;
  8646                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  8647                        	.line	2141
  8648                        ;   {
  8649 06:ACD7: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  8650 06:ACDB: E2 20        	sep	#$20
  8651                        	longa	off
  8652 06:ACDD: 29 02        	and	#<$2
  8653 06:ACDF: C2 20        	rep	#$20
  8654                        	longa	on
  8655 06:ACE1: D0 03        	bne	L333
  8656 06:ACE3: 82 09 00     	brl	L10133
  8657                        L333:
  8658                        	.line	2142
  8659                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  8660                        	.line	2143
  8661 06:ACE6: E2 20        	sep	#$20
  8662                        	longa	off
  8663 06:ACE8: A9 4E        	lda	#$4e
  8664 06:ACEA: 8D xx xx     	sta	|~~reg_cmd_info+31
  8665 06:ACED: C2 20        	rep	#$20
  8666                        	longa	on
  8667                        ;   }
  8668                        	.line	2144
  8669                        ;
  8670                        ;   // WRITE_DONE:
  8671                        ;
  8672                        ;   // All done.  The return values of this functi
                    on are described in
  8673                        ;   // MINDRVR.H.
  8674                        ;
  8675                        ;   if ( reg_cmd_info.ec )
  8676                        L10133:
  8677                        	.line	2151
  8678                        ;      return 1;
  8679 06:ACEF: AD xx xx     	lda	|~~reg_cmd_info+31
  8680 06:ACF2: 29 FF 00     	and	#$ff
  8681 06:ACF5: D0 03        	bne	L334
  8682 06:ACF7: 82 06 00     	brl	L10134
  8683                        L334:
  8684                        	.line	2152
  8685 06:ACFA: A9 01 00     	lda	#$1
  8686 06:ACFD: 82 A2 FD     	brl	L304
  8687                        ;   return 0;
  Thu Jul 29 2021 11:55                                                Page 165


  8688                        L10134:
  8689                        	.line	2153
  8690 06:AD00: A9 00 00     	lda	#$0
  8691 06:AD03: 82 9C FD     	brl	L304
  8692                        ;}
  8693                        	.line	2154
  8694                        	.endblock	2154
  8695             0000000B   L300	equ	11
  8696             00000005   L301	equ	5
  8697 06:AD06:              	ends
  8698                        	efunc
  8699                        	.endfunc	2154,5,11
  8700                        	.line	2154
  8701                        ;
  8702                        ;//***********************************************
                    **************
  8703                        ;//
  8704                        ;// reg_pio_data_out_lba28() - Easy way to execute
                     a PIO Data In command
  8705                        ;//                            using an LBA sector
                     address.
  8706                        ;//
  8707                        ;//***********************************************
                    **************
  8708                        ;
  8709                        ;int reg_pio_data_out_lba28( unsigned char dev, un
                    signed char cmd,
  8710                        ;                            unsigned int fr, unsi
                    gned int sc,
  8711                        ;                            unsigned long lba,
  8712                        ;                            unsigned char * bufAd
                    dr,
  8713                        ;                            long numSect, int mul
                    tiCnt )
  8714                        ;
  8715                        ;{
  8716                        	.line	2163
  8717                        	.line	2169
  8718                        	FXHDD
  8719                        	xdef	~~reg_pio_data_out_lba28
  8720                        	func
  8721                        	.function	2169
  8722                        ~~reg_pio_data_out_lba28:
  8723                        	longa	on
  8724                        	longi	on
  8725 06:AD06: 3B           	tsc
  8726 06:AD07: 38           	sec
  8727 06:AD08: E9 04 00     	sbc	#L335
  8728 06:AD0B: 1B           	tcs
  8729 06:AD0C: 0B           	phd
  8730 06:AD0D: 5B           	tcd
  8731             00000004   dev_0	set	4
  8732             00000006   cmd_0	set	6
  8733             00000008   fr_0	set	8
  8734             0000000A   sc_0	set	10
  8735             0000000C   lba_0	set	12
  8736             00000010   bufAddr_0	set	16
  8737             00000014   numSect_0	set	20
  Thu Jul 29 2021 11:55                                                Page 166


  8738             00000018   multiCnt_0	set	24
  8739                        	.block	2169
  8740                        ;
  8741                        ;   reg_cmd_info.cmd = cmd;
  8742                        	.sym	dev,4,14,6,8
  8743                        	.sym	cmd,6,14,6,8
  8744                        	.sym	fr,8,16,6,16
  8745                        	.sym	sc,10,16,6,16
  8746                        	.sym	lba,12,18,6,32
  8747                        	.sym	bufAddr,16,142,6,32
  8748                        	.sym	numSect,20,7,6,32
  8749                        	.sym	multiCnt,24,5,6,16
  8750                        	.line	2171
  8751 06:AD0E: E2 20        	sep	#$20
  8752                        	longa	off
  8753 06:AD10: A5 0A        	lda	<L335+cmd_0
  8754 06:AD12: 8D xx xx     	sta	|~~reg_cmd_info
  8755 06:AD15: C2 20        	rep	#$20
  8756                        	longa	on
  8757                        ;   reg_cmd_info.fr = fr;
  8758                        	.line	2172
  8759 06:AD17: A5 0C        	lda	<L335+fr_0
  8760 06:AD19: 8D xx xx     	sta	|~~reg_cmd_info+1
  8761                        ;   reg_cmd_info.sc = sc;
  8762                        	.line	2173
  8763 06:AD1C: A5 0E        	lda	<L335+sc_0
  8764 06:AD1E: 8D xx xx     	sta	|~~reg_cmd_info+3
  8765                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  8766                        	.line	2174
  8767 06:AD21: A5 08        	lda	<L335+dev_0
  8768 06:AD23: 29 FF 00     	and	#$ff
  8769 06:AD26: D0 03        	bne	L339
  8770 06:AD28: 82 05 00     	brl	L338
  8771                        L339:
  8772 06:AD2B: A9 10 00     	lda	#$10
  8773 06:AD2E: 80 03        	bra	L340
  8774                        L338:
  8775 06:AD30: A9 00 00     	lda	#$0
  8776                        L340:
  8777 06:AD33: 09 40 00     	ora	#<$40
  8778 06:AD36: 85 01        	sta	<R0
  8779 06:AD38: E2 20        	sep	#$20
  8780                        	longa	off
  8781 06:AD3A: A5 01        	lda	<R0
  8782 06:AD3C: 8D xx xx     	sta	|~~reg_cmd_info+11
  8783 06:AD3F: C2 20        	rep	#$20
  8784                        	longa	on
  8785                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  8786                        	.line	2175
  8787 06:AD41: AD xx xx     	lda	|~~int_use_intr_flag
  8788 06:AD44: 29 FF 00     	and	#$ff
  8789 06:AD47: D0 03        	bne	L342
  8790 06:AD49: 82 05 00     	brl	L341
  8791                        L342:
  8792 06:AD4C: A9 00 00     	lda	#$0
  8793 06:AD4F: 80 03        	bra	L343
  Thu Jul 29 2021 11:55                                                Page 167


  8794                        L341:
  8795 06:AD51: A9 02 00     	lda	#$2
  8796                        L343:
  8797 06:AD54: 85 01        	sta	<R0
  8798 06:AD56: E2 20        	sep	#$20
  8799                        	longa	off
  8800 06:AD58: A5 01        	lda	<R0
  8801 06:AD5A: 8D xx xx     	sta	|~~reg_cmd_info+12
  8802 06:AD5D: C2 20        	rep	#$20
  8803                        	longa	on
  8804                        ;   reg_cmd_info.lbaSize = LBA28;
  8805                        	.line	2176
  8806 06:AD5F: E2 20        	sep	#$20
  8807                        	longa	off
  8808 06:AD61: A9 1C        	lda	#$1c
  8809 06:AD63: 8D xx xx     	sta	|~~reg_cmd_info+19
  8810 06:AD66: C2 20        	rep	#$20
  8811                        	longa	on
  8812                        ;   reg_cmd_info.lbaHigh = 0;
  8813                        	.line	2177
  8814 06:AD68: 9C xx xx     	stz	|~~reg_cmd_info+24
  8815 06:AD6B: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  8816                        ;   reg_cmd_info.lbaLow = lba;
  8817                        	.line	2178
  8818 06:AD6E: A5 10        	lda	<L335+lba_0
  8819 06:AD70: 8D xx xx     	sta	|~~reg_cmd_info+20
  8820 06:AD73: A5 12        	lda	<L335+lba_0+2
  8821 06:AD75: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  8822                        ;
  8823                        ;   // adjust multiple count
  8824                        ;   if ( multiCnt & 0x0800 )
  8825                        	.line	2181
  8826                        ;   {
  8827 06:AD78: A5 1C        	lda	<L335+multiCnt_0
  8828 06:AD7A: 29 00 08     	and	#<$800
  8829 06:AD7D: D0 03        	bne	L344
  8830 06:AD7F: 82 08 00     	brl	L10135
  8831                        L344:
  8832                        	.line	2182
  8833                        ;      // assume caller knows what they are doing
  8834                        ;      multiCnt &= 0x00ff;
  8835                        	.line	2184
  8836 06:AD82: A9 00 FF     	lda	#$ff00
  8837 06:AD85: 14 1C        	trb	<L335+multiCnt_0
  8838                        ;   }
  8839                        	.line	2185
  8840                        ;   else
  8841 06:AD87: 82 1F 00     	brl	L10136
  8842                        L10135:
  8843                        ;   {
  8844                        	.line	2187
  8845                        ;      // only Write Multiple and CFA Write Multip
                    le W/O Erase uses multiCnt
  8846                        ;      if (    ( cmd != CMD_WRITE_MULTIPLE )
  8847                        	.line	2189
  8848                        ;           && ( cmd != CMD_CFA_WRITE_MULTIPLE_WO_
                    ERASE )
  8849                        ;         )
  Thu Jul 29 2021 11:55                                                Page 168


  8850                        ;         multiCnt = 1;
  8851 06:AD8A: E2 20        	sep	#$20
  8852                        	longa	off
  8853 06:AD8C: A5 0A        	lda	<L335+cmd_0
  8854 06:AD8E: C9 C5        	cmp	#<$c5
  8855 06:AD90: C2 20        	rep	#$20
  8856                        	longa	on
  8857 06:AD92: D0 03        	bne	L345
  8858 06:AD94: 82 12 00     	brl	L10137
  8859                        L345:
  8860 06:AD97: E2 20        	sep	#$20
  8861                        	longa	off
  8862 06:AD99: A5 0A        	lda	<L335+cmd_0
  8863 06:AD9B: C9 CD        	cmp	#<$cd
  8864 06:AD9D: C2 20        	rep	#$20
  8865                        	longa	on
  8866 06:AD9F: D0 03        	bne	L346
  8867 06:ADA1: 82 05 00     	brl	L10137
  8868                        L346:
  8869                        	.line	2192
  8870 06:ADA4: A9 01 00     	lda	#$1
  8871 06:ADA7: 85 1C        	sta	<L335+multiCnt_0
  8872                        ;   }
  8873                        L10137:
  8874                        	.line	2193
  8875                        L10136:
  8876                        ;
  8877                        ;   reg_cmd_info.ns  = numSect;
  8878                        	.line	2195
  8879 06:ADA9: A5 18        	lda	<L335+numSect_0
  8880 06:ADAB: 8D xx xx     	sta	|~~reg_cmd_info+13
  8881 06:ADAE: A5 1A        	lda	<L335+numSect_0+2
  8882 06:ADB0: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  8883                        ;   reg_cmd_info.mc  = multiCnt;
  8884                        	.line	2196
  8885 06:ADB3: A5 1C        	lda	<L335+multiCnt_0
  8886 06:ADB5: 8D xx xx     	sta	|~~reg_cmd_info+17
  8887                        ;
  8888                        ;   return exec_pio_data_out_cmd( dev, bufAddr, nu
                    mSect, multiCnt );
  8889                        	.line	2198
  8890 06:ADB8: D4 1C        	pei	<L335+multiCnt_0
  8891 06:ADBA: D4 1A        	pei	<L335+numSect_0+2
  8892 06:ADBC: D4 18        	pei	<L335+numSect_0
  8893 06:ADBE: D4 16        	pei	<L335+bufAddr_0+2
  8894 06:ADC0: D4 14        	pei	<L335+bufAddr_0
  8895 06:ADC2: D4 08        	pei	<L335+dev_0
  8896 06:ADC4: 22 7B AA 06  	jsl	~~exec_pio_data_out_cmd
  8897                        L347:
  8898 06:ADC8: A8           	tay
  8899 06:ADC9: A5 06        	lda	<L335+2
  8900 06:ADCB: 85 1C        	sta	<L335+2+22
  8901 06:ADCD: A5 05        	lda	<L335+1
  8902 06:ADCF: 85 1B        	sta	<L335+1+22
  8903 06:ADD1: 2B           	pld
  8904 06:ADD2: 3B           	tsc
  8905 06:ADD3: 18           	clc
  8906 06:ADD4: 69 1A 00     	adc	#L335+22
  Thu Jul 29 2021 11:55                                                Page 169


  8907 06:ADD7: 1B           	tcs
  8908 06:ADD8: 98           	tya
  8909 06:ADD9: 6B           	rtl
  8910                        ;}
  8911                        	.line	2199
  8912                        	.endblock	2199
  8913             00000004   L335	equ	4
  8914             00000005   L336	equ	5
  8915 06:ADDA:              	ends
  8916                        	efunc
  8917                        	.endfunc	2199,5,4
  8918                        	.line	2199
  8919                        ;
  8920                        ;//***********************************************
                    **************
  8921                        ;//
  8922                        ;// reg_pio_data_out_lba48() - Easy way to execute
                     a PIO Data In command
  8923                        ;//                            using an LBA sector
                     address.
  8924                        ;//
  8925                        ;//***********************************************
                    **************
  8926                        ;
  8927                        ;int reg_pio_data_out_lba48( unsigned char dev, un
                    signed char cmd,
  8928                        ;                            unsigned int fr, unsi
                    gned int sc,
  8929                        ;                            unsigned long lbahi, 
                    unsigned long lbalo,
  8930                        ;                            unsigned char * bufAd
                    dr,
  8931                        ;                            long numSect, int mul
                    tiCnt )
  8932                        ;
  8933                        ;{
  8934                        	.line	2208
  8935                        	.line	2214
  8936                        	FXHDD
  8937                        	xdef	~~reg_pio_data_out_lba48
  8938                        	func
  8939                        	.function	2214
  8940                        ~~reg_pio_data_out_lba48:
  8941                        	longa	on
  8942                        	longi	on
  8943 06:ADDA: 3B           	tsc
  8944 06:ADDB: 38           	sec
  8945 06:ADDC: E9 04 00     	sbc	#L348
  8946 06:ADDF: 1B           	tcs
  8947 06:ADE0: 0B           	phd
  8948 06:ADE1: 5B           	tcd
  8949             00000004   dev_0	set	4
  8950             00000006   cmd_0	set	6
  8951             00000008   fr_0	set	8
  8952             0000000A   sc_0	set	10
  8953             0000000C   lbahi_0	set	12
  8954             00000010   lbalo_0	set	16
  8955             00000014   bufAddr_0	set	20
  Thu Jul 29 2021 11:55                                                Page 170


  8956             00000018   numSect_0	set	24
  8957             0000001C   multiCnt_0	set	28
  8958                        	.block	2214
  8959                        ;
  8960                        ;   reg_cmd_info.cmd = cmd;
  8961                        	.sym	dev,4,14,6,8
  8962                        	.sym	cmd,6,14,6,8
  8963                        	.sym	fr,8,16,6,16
  8964                        	.sym	sc,10,16,6,16
  8965                        	.sym	lbahi,12,18,6,32
  8966                        	.sym	lbalo,16,18,6,32
  8967                        	.sym	bufAddr,20,142,6,32
  8968                        	.sym	numSect,24,7,6,32
  8969                        	.sym	multiCnt,28,5,6,16
  8970                        	.line	2216
  8971 06:ADE2: E2 20        	sep	#$20
  8972                        	longa	off
  8973 06:ADE4: A5 0A        	lda	<L348+cmd_0
  8974 06:ADE6: 8D xx xx     	sta	|~~reg_cmd_info
  8975 06:ADE9: C2 20        	rep	#$20
  8976                        	longa	on
  8977                        ;   reg_cmd_info.fr = fr;
  8978                        	.line	2217
  8979 06:ADEB: A5 0C        	lda	<L348+fr_0
  8980 06:ADED: 8D xx xx     	sta	|~~reg_cmd_info+1
  8981                        ;   reg_cmd_info.sc = sc;
  8982                        	.line	2218
  8983 06:ADF0: A5 0E        	lda	<L348+sc_0
  8984 06:ADF2: 8D xx xx     	sta	|~~reg_cmd_info+3
  8985                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  8986                        	.line	2219
  8987 06:ADF5: A5 08        	lda	<L348+dev_0
  8988 06:ADF7: 29 FF 00     	and	#$ff
  8989 06:ADFA: D0 03        	bne	L352
  8990 06:ADFC: 82 05 00     	brl	L351
  8991                        L352:
  8992 06:ADFF: A9 10 00     	lda	#$10
  8993 06:AE02: 80 03        	bra	L353
  8994                        L351:
  8995 06:AE04: A9 00 00     	lda	#$0
  8996                        L353:
  8997 06:AE07: 09 40 00     	ora	#<$40
  8998 06:AE0A: 85 01        	sta	<R0
  8999 06:AE0C: E2 20        	sep	#$20
  9000                        	longa	off
  9001 06:AE0E: A5 01        	lda	<R0
  9002 06:AE10: 8D xx xx     	sta	|~~reg_cmd_info+11
  9003 06:AE13: C2 20        	rep	#$20
  9004                        	longa	on
  9005                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  9006                        	.line	2220
  9007 06:AE15: AD xx xx     	lda	|~~int_use_intr_flag
  9008 06:AE18: 29 FF 00     	and	#$ff
  9009 06:AE1B: D0 03        	bne	L355
  9010 06:AE1D: 82 05 00     	brl	L354
  9011                        L355:
  Thu Jul 29 2021 11:55                                                Page 171


  9012 06:AE20: A9 00 00     	lda	#$0
  9013 06:AE23: 80 03        	bra	L356
  9014                        L354:
  9015 06:AE25: A9 02 00     	lda	#$2
  9016                        L356:
  9017 06:AE28: 85 01        	sta	<R0
  9018 06:AE2A: E2 20        	sep	#$20
  9019                        	longa	off
  9020 06:AE2C: A5 01        	lda	<R0
  9021 06:AE2E: 8D xx xx     	sta	|~~reg_cmd_info+12
  9022 06:AE31: C2 20        	rep	#$20
  9023                        	longa	on
  9024                        ;   reg_cmd_info.lbaSize = LBA48;
  9025                        	.line	2221
  9026 06:AE33: E2 20        	sep	#$20
  9027                        	longa	off
  9028 06:AE35: A9 30        	lda	#$30
  9029 06:AE37: 8D xx xx     	sta	|~~reg_cmd_info+19
  9030 06:AE3A: C2 20        	rep	#$20
  9031                        	longa	on
  9032                        ;   reg_cmd_info.lbaHigh = lbahi;
  9033                        	.line	2222
  9034 06:AE3C: A5 10        	lda	<L348+lbahi_0
  9035 06:AE3E: 8D xx xx     	sta	|~~reg_cmd_info+24
  9036 06:AE41: A5 12        	lda	<L348+lbahi_0+2
  9037 06:AE43: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  9038                        ;   reg_cmd_info.lbaLow = lbalo;
  9039                        	.line	2223
  9040 06:AE46: A5 14        	lda	<L348+lbalo_0
  9041 06:AE48: 8D xx xx     	sta	|~~reg_cmd_info+20
  9042 06:AE4B: A5 16        	lda	<L348+lbalo_0+2
  9043 06:AE4D: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  9044                        ;
  9045                        ;   // adjust multiple count
  9046                        ;   if ( multiCnt & 0x0800 )
  9047                        	.line	2226
  9048                        ;   {
  9049 06:AE50: A5 20        	lda	<L348+multiCnt_0
  9050 06:AE52: 29 00 08     	and	#<$800
  9051 06:AE55: D0 03        	bne	L357
  9052 06:AE57: 82 08 00     	brl	L10138
  9053                        L357:
  9054                        	.line	2227
  9055                        ;      // assume caller knows what they are doing
  9056                        ;      multiCnt &= 0x00ff;
  9057                        	.line	2229
  9058 06:AE5A: A9 00 FF     	lda	#$ff00
  9059 06:AE5D: 14 20        	trb	<L348+multiCnt_0
  9060                        ;   }
  9061                        	.line	2230
  9062                        ;   else
  9063 06:AE5F: 82 12 00     	brl	L10139
  9064                        L10138:
  9065                        ;   {
  9066                        	.line	2232
  9067                        ;      // only Write Multiple Ext uses multiCnt
  9068                        ;      if ( cmd != CMD_WRITE_MULTIPLE_EXT )
  9069                        	.line	2234
  Thu Jul 29 2021 11:55                                                Page 172


  9070                        ;         multiCnt = 1;
  9071 06:AE62: E2 20        	sep	#$20
  9072                        	longa	off
  9073 06:AE64: A5 0A        	lda	<L348+cmd_0
  9074 06:AE66: C9 39        	cmp	#<$39
  9075 06:AE68: C2 20        	rep	#$20
  9076                        	longa	on
  9077 06:AE6A: D0 03        	bne	L358
  9078 06:AE6C: 82 05 00     	brl	L10140
  9079                        L358:
  9080                        	.line	2235
  9081 06:AE6F: A9 01 00     	lda	#$1
  9082 06:AE72: 85 20        	sta	<L348+multiCnt_0
  9083                        ;   }
  9084                        L10140:
  9085                        	.line	2236
  9086                        L10139:
  9087                        ;
  9088                        ;   reg_cmd_info.ns  = numSect;
  9089                        	.line	2238
  9090 06:AE74: A5 1C        	lda	<L348+numSect_0
  9091 06:AE76: 8D xx xx     	sta	|~~reg_cmd_info+13
  9092 06:AE79: A5 1E        	lda	<L348+numSect_0+2
  9093 06:AE7B: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  9094                        ;   reg_cmd_info.mc  = multiCnt;
  9095                        	.line	2239
  9096 06:AE7E: A5 20        	lda	<L348+multiCnt_0
  9097 06:AE80: 8D xx xx     	sta	|~~reg_cmd_info+17
  9098                        ;
  9099                        ;   return exec_pio_data_out_cmd( dev, bufAddr, nu
                    mSect, multiCnt );
  9100                        	.line	2241
  9101 06:AE83: D4 20        	pei	<L348+multiCnt_0
  9102 06:AE85: D4 1E        	pei	<L348+numSect_0+2
  9103 06:AE87: D4 1C        	pei	<L348+numSect_0
  9104 06:AE89: D4 1A        	pei	<L348+bufAddr_0+2
  9105 06:AE8B: D4 18        	pei	<L348+bufAddr_0
  9106 06:AE8D: D4 08        	pei	<L348+dev_0
  9107 06:AE8F: 22 7B AA 06  	jsl	~~exec_pio_data_out_cmd
  9108                        L359:
  9109 06:AE93: A8           	tay
  9110 06:AE94: A5 06        	lda	<L348+2
  9111 06:AE96: 85 20        	sta	<L348+2+26
  9112 06:AE98: A5 05        	lda	<L348+1
  9113 06:AE9A: 85 1F        	sta	<L348+1+26
  9114 06:AE9C: 2B           	pld
  9115 06:AE9D: 3B           	tsc
  9116 06:AE9E: 18           	clc
  9117 06:AE9F: 69 1E 00     	adc	#L348+26
  9118 06:AEA2: 1B           	tcs
  9119 06:AEA3: 98           	tya
  9120 06:AEA4: 6B           	rtl
  9121                        ;}
  9122                        	.line	2242
  9123                        	.endblock	2242
  9124             00000004   L348	equ	4
  9125             00000005   L349	equ	5
  9126 06:AEA5:              	ends
  Thu Jul 29 2021 11:55                                                Page 173


  9127                        	efunc
  9128                        	.endfunc	2242,5,4
  9129                        	.line	2242
  9130                        ;
  9131                        ;#ifdef INCLUDE_ATAPI_PIO
  9132                        ;
  9133                        ;//***********************************************
                    **************
  9134                        ;//
  9135                        ;// reg_packet() - Execute an ATAPI Packet (A0H) c
                    ommand.
  9136                        ;//
  9137                        ;// See ATA-4 Section 9.10, Figure 14.
  9138                        ;//
  9139                        ;//***********************************************
                    **************
  9140                        ;
  9141                        ;int reg_packet( unsigned char dev,
  9142                        ;                unsigned int cpbc,
  9143                        ;                unsigned char * cdbBufAddr,
  9144                        ;                int dir,
  9145                        ;                long dpbc,
  9146                        ;                unsigned char * dataBufAddr )
  9147                        ;
  9148                        ;{
  9149                        	.line	2254
  9150                        	.line	2261
  9151                        	FXHDD
  9152                        	xdef	~~reg_packet
  9153                        	func
  9154                        	.function	2261
  9155                        ~~reg_packet:
  9156                        	longa	on
  9157                        	longi	on
  9158 06:AEA5: 3B           	tsc
  9159 06:AEA6: 38           	sec
  9160 06:AEA7: E9 13 00     	sbc	#L360
  9161 06:AEAA: 1B           	tcs
  9162 06:AEAB: 0B           	phd
  9163 06:AEAC: 5B           	tcd
  9164             00000004   dev_0	set	4
  9165             00000006   cpbc_0	set	6
  9166             00000008   cdbBufAddr_0	set	8
  9167             0000000C   dir_0	set	12
  9168             0000000E   dpbc_0	set	14
  9169             00000012   dataBufAddr_0	set	18
  9170                        	.block	2261
  9171                        ;   unsigned char status;
  9172                        ;   unsigned int byteCnt;
  9173                        ;   long wordCnt;
  9174                        ;
  9175                        ;   // reset Bus Master Error bit
  9176                        ;
  9177                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  9178             00000000   status_1	set	0
  9179             00000001   byteCnt_1	set	1
  9180             00000003   wordCnt_1	set	3
  9181                        	.sym	status,0,14,1,8
  Thu Jul 29 2021 11:55                                                Page 174


  9182                        	.sym	byteCnt,1,16,1,16
  9183                        	.sym	wordCnt,3,7,1,32
  9184                        	.sym	dev,4,14,6,8
  9185                        	.sym	cpbc,6,16,6,16
  9186                        	.sym	cdbBufAddr,8,142,6,32
  9187                        	.sym	dir,12,5,6,16
  9188                        	.sym	dpbc,14,7,6,32
  9189                        	.sym	dataBufAddr,18,142,6,32
  9190                        	.line	2268
  9191 06:AEAD: F4 02 00     	pea	#<$2
  9192 06:AEB0: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  9193                        ;
  9194                        ;   // Make sure the command packet size is either
                     12 or 16
  9195                        ;   // and save the command packet size and data.
  9196                        ;
  9197                        ;   cpbc = cpbc < 12 ? 12 : cpbc;
  9198                        	.line	2273
  9199 06:AEB4: A5 19        	lda	<L360+cpbc_0
  9200 06:AEB6: C9 0C 00     	cmp	#<$c
  9201 06:AEB9: 90 03        	bcc	L364
  9202 06:AEBB: 82 05 00     	brl	L363
  9203                        L364:
  9204 06:AEBE: A9 0C 00     	lda	#$c
  9205 06:AEC1: 80 02        	bra	L365
  9206                        L363:
  9207 06:AEC3: A5 19        	lda	<L360+cpbc_0
  9208                        L365:
  9209 06:AEC5: 85 19        	sta	<L360+cpbc_0
  9210                        ;   cpbc = cpbc > 12 ? 16 : cpbc;
  9211                        	.line	2274
  9212 06:AEC7: A9 0C 00     	lda	#$c
  9213 06:AECA: C5 19        	cmp	<L360+cpbc_0
  9214 06:AECC: 90 03        	bcc	L367
  9215 06:AECE: 82 05 00     	brl	L366
  9216                        L367:
  9217 06:AED1: A9 10 00     	lda	#$10
  9218 06:AED4: 80 02        	bra	L368
  9219                        L366:
  9220 06:AED6: A5 19        	lda	<L360+cpbc_0
  9221                        L368:
  9222 06:AED8: 85 19        	sta	<L360+cpbc_0
  9223                        ;
  9224                        ;   // Setup current command information.
  9225                        ;
  9226                        ;   reg_cmd_info.cmd = CMD_PACKET;
  9227                        	.line	2278
  9228 06:AEDA: E2 20        	sep	#$20
  9229                        	longa	off
  9230 06:AEDC: A9 A0        	lda	#$a0
  9231 06:AEDE: 8D xx xx     	sta	|~~reg_cmd_info
  9232 06:AEE1: C2 20        	rep	#$20
  9233                        	longa	on
  9234                        ;   reg_cmd_info.fr = 0;
  9235                        	.line	2279
  9236 06:AEE3: 9C xx xx     	stz	|~~reg_cmd_info+1
  9237                        ;   reg_cmd_info.sc = 0;
  9238                        	.line	2280
  Thu Jul 29 2021 11:55                                                Page 175


  9239 06:AEE6: 9C xx xx     	stz	|~~reg_cmd_info+3
  9240                        ;   reg_cmd_info.sn = 0;
  9241                        	.line	2281
  9242 06:AEE9: 9C xx xx     	stz	|~~reg_cmd_info+5
  9243                        ;   reg_cmd_info.cl = (unsigned char) ( dpbc & 0x0
                    0ff );
  9244                        	.line	2282
  9245 06:AEEC: A5 21        	lda	<L360+dpbc_0
  9246 06:AEEE: 29 FF 00     	and	#<$ff
  9247 06:AEF1: 85 01        	sta	<R0
  9248 06:AEF3: 64 03        	stz	<R0+2
  9249 06:AEF5: A5 01        	lda	<R0
  9250 06:AEF7: 29 FF 00     	and	#$ff
  9251 06:AEFA: 8D xx xx     	sta	|~~reg_cmd_info+7
  9252                        ;   reg_cmd_info.ch = ( unsigned char) ( ( dpbc & 
                    0xff00 ) >> 8 );
  9253                        	.line	2283
  9254 06:AEFD: A5 21        	lda	<L360+dpbc_0
  9255 06:AEFF: 29 00 FF     	and	#<$ff00
  9256 06:AF02: 85 05        	sta	<R1
  9257 06:AF04: 64 07        	stz	<R1+2
  9258 06:AF06: D4 07        	pei	<R1+2
  9259 06:AF08: D4 05        	pei	<R1
  9260 06:AF0A: A9 08 00     	lda	#$8
  9261                        	xref	~~~lasr
  9262 06:AF0D: 22 xx xx xx  	jsl	~~~lasr
  9263 06:AF11: 85 01        	sta	<R0
  9264 06:AF13: 86 03        	stx	<R0+2
  9265 06:AF15: A5 01        	lda	<R0
  9266 06:AF17: 29 FF 00     	and	#$ff
  9267 06:AF1A: 8D xx xx     	sta	|~~reg_cmd_info+9
  9268                        ;   reg_cmd_info.dh = (unsigned char) ( dev ? CB_D
                    H_DEV1 : CB_DH_DEV0 );
  9269                        	.line	2284
  9270 06:AF1D: A5 17        	lda	<L360+dev_0
  9271 06:AF1F: 29 FF 00     	and	#$ff
  9272 06:AF22: D0 03        	bne	L370
  9273 06:AF24: 82 05 00     	brl	L369
  9274                        L370:
  9275 06:AF27: A9 10 00     	lda	#$10
  9276 06:AF2A: 80 03        	bra	L371
  9277                        L369:
  9278 06:AF2C: A9 00 00     	lda	#$0
  9279                        L371:
  9280 06:AF2F: 85 01        	sta	<R0
  9281 06:AF31: E2 20        	sep	#$20
  9282                        	longa	off
  9283 06:AF33: A5 01        	lda	<R0
  9284 06:AF35: 8D xx xx     	sta	|~~reg_cmd_info+11
  9285 06:AF38: C2 20        	rep	#$20
  9286                        	longa	on
  9287                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  9288                        	.line	2285
  9289 06:AF3A: AD xx xx     	lda	|~~int_use_intr_flag
  9290 06:AF3D: 29 FF 00     	and	#$ff
  9291 06:AF40: D0 03        	bne	L373
  9292 06:AF42: 82 05 00     	brl	L372
  Thu Jul 29 2021 11:55                                                Page 176


  9293                        L373:
  9294 06:AF45: A9 00 00     	lda	#$0
  9295 06:AF48: 80 03        	bra	L374
  9296                        L372:
  9297 06:AF4A: A9 02 00     	lda	#$2
  9298                        L374:
  9299 06:AF4D: 85 01        	sta	<R0
  9300 06:AF4F: E2 20        	sep	#$20
  9301                        	longa	off
  9302 06:AF51: A5 01        	lda	<R0
  9303 06:AF53: 8D xx xx     	sta	|~~reg_cmd_info+12
  9304 06:AF56: C2 20        	rep	#$20
  9305                        	longa	on
  9306                        ;
  9307                        ;   // Set command time out.
  9308                        ;
  9309                        ;   tmr_set_timeout();
  9310                        	.line	2289
  9311 06:AF58: 22 00 BD 06  	jsl	~~tmr_set_timeout
  9312                        ;
  9313                        ;   // Select the drive - call the sub_select func
                    tion.
  9314                        ;   // Quit now if this fails.
  9315                        ;
  9316                        ;   if ( sub_select( dev ) )
  9317                        	.line	2294
  9318                        ;   {
  9319 06:AF5C: D4 17        	pei	<L360+dev_0
  9320 06:AF5E: 22 AF B4 06  	jsl	~~sub_select
  9321 06:AF62: AA           	tax
  9322 06:AF63: D0 03        	bne	L375
  9323 06:AF65: 82 15 00     	brl	L10141
  9324                        L375:
  9325                        	.line	2295
  9326                        ;      return 1;
  9327                        	.line	2296
  9328 06:AF68: A9 01 00     	lda	#$1
  9329                        L376:
  9330 06:AF6B: A8           	tay
  9331 06:AF6C: A5 15        	lda	<L360+2
  9332 06:AF6E: 85 27        	sta	<L360+2+18
  9333 06:AF70: A5 14        	lda	<L360+1
  9334 06:AF72: 85 26        	sta	<L360+1+18
  9335 06:AF74: 2B           	pld
  9336 06:AF75: 3B           	tsc
  9337 06:AF76: 18           	clc
  9338 06:AF77: 69 25 00     	adc	#L360+18
  9339 06:AF7A: 1B           	tcs
  9340 06:AF7B: 98           	tya
  9341 06:AF7C: 6B           	rtl
  9342                        ;   }
  9343                        	.line	2297
  9344                        ;
  9345                        ;   // Set up all the registers except the command
                     register.
  9346                        ;
  9347                        ;   sub_setup_command();
  9348                        L10141:
  Thu Jul 29 2021 11:55                                                Page 177


  9349                        	.line	2301
  9350 06:AF7D: 22 69 B2 06  	jsl	~~sub_setup_command
  9351                        ;
  9352                        ;   // Start the command by setting the Command re
                    gister.  The drive
  9353                        ;   // should immediately set BUSY status.
  9354                        ;
  9355                        ;   pio_outbyte( CB_CMD, CMD_PACKET );
  9356                        	.line	2306
  9357 06:AF81: F4 A0 00     	pea	#<$a0
  9358 06:AF84: F4 07 00     	pea	#<$7
  9359 06:AF87: 22 F0 B7 06  	jsl	~~pio_outbyte
  9360                        ;
  9361                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  9362                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  9363                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  9364                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  9365                        ;   // completed the command when it really had no
                    t even started the
  9366                        ;   // command yet.
  9367                        ;
  9368                        ;   DELAY400NS;
  9369                        	.line	2315
  9370                        	.line	2315
  9371 06:AF8B: F4 08 00     	pea	#<$8
  9372 06:AF8E: 22 B1 B7 06  	jsl	~~pio_inbyte
  9373                        	.line	2315
  9374 06:AF92: F4 08 00     	pea	#<$8
  9375 06:AF95: 22 B1 B7 06  	jsl	~~pio_inbyte
  9376                        	.line	2315
  9377 06:AF99: F4 08 00     	pea	#<$8
  9378 06:AF9C: 22 B1 B7 06  	jsl	~~pio_inbyte
  9379                        	.line	2315
  9380 06:AFA0: F4 08 00     	pea	#<$8
  9381 06:AFA3: 22 B1 B7 06  	jsl	~~pio_inbyte
  9382                        	.line	2315
  9383 06:AFA7: F4 08 00     	pea	#<$8
  9384 06:AFAA: 22 B1 B7 06  	jsl	~~pio_inbyte
  9385                        	.line	2315
  9386                        	.line	2315
  9387                        ;
  9388                        ;   // Command packet transfer...
  9389                        ;   // Poll Alternate Status for BSY=0.
  9390                        ;
  9391                        ;   while ( 1 )
  9392                        	.line	2320
  9393                        L10142:
  9394                        ;   {
  9395                        	.line	2321
  9396                        ;      status = pio_inbyte( CB_ASTAT );       // p
                    oll for not busy
  9397                        	.line	2322
  9398 06:AFAE: F4 08 00     	pea	#<$8
  9399 06:AFB1: 22 B1 B7 06  	jsl	~~pio_inbyte
  Thu Jul 29 2021 11:55                                                Page 178


  9400 06:AFB5: E2 20        	sep	#$20
  9401                        	longa	off
  9402 06:AFB7: 85 0D        	sta	<L361+status_1
  9403 06:AFB9: C2 20        	rep	#$20
  9404                        	longa	on
  9405                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
  9406                        	.line	2323
  9407                        ;         break;
  9408 06:AFBB: E2 20        	sep	#$20
  9409                        	longa	off
  9410 06:AFBD: A5 0D        	lda	<L361+status_1
  9411 06:AFBF: 29 80        	and	#<$80
  9412 06:AFC1: C2 20        	rep	#$20
  9413                        	longa	on
  9414 06:AFC3: D0 03        	bne	L377
  9415 06:AFC5: 82 27 00     	brl	L10143
  9416                        L377:
  9417                        ;      if ( tmr_chk_timeout() )               // t
                    ime out yet ?
  9418                        	.line	2325
  9419                        ;      {
  9420 06:AFC8: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  9421 06:AFCC: AA           	tax
  9422 06:AFCD: D0 03        	bne	L378
  9423 06:AFCF: 82 1A 00     	brl	L10144
  9424                        L378:
  9425                        	.line	2326
  9426                        ;         reg_cmd_info.to = 1;
  9427                        	.line	2327
  9428 06:AFD2: E2 20        	sep	#$20
  9429                        	longa	off
  9430 06:AFD4: A9 01        	lda	#$1
  9431 06:AFD6: 8D xx xx     	sta	|~~reg_cmd_info+32
  9432 06:AFD9: C2 20        	rep	#$20
  9433                        	longa	on
  9434                        ;         reg_cmd_info.ec = 51;
  9435                        	.line	2328
  9436 06:AFDB: E2 20        	sep	#$20
  9437                        	longa	off
  9438 06:AFDD: A9 33        	lda	#$33
  9439 06:AFDF: 8D xx xx     	sta	|~~reg_cmd_info+31
  9440 06:AFE2: C2 20        	rep	#$20
  9441                        	longa	on
  9442                        ;         dir = -1;   // command done
  9443                        	.line	2329
  9444 06:AFE4: A9 FF FF     	lda	#$ffff
  9445 06:AFE7: 85 1F        	sta	<L360+dir_0
  9446                        ;         break;
  9447                        	.line	2330
  9448 06:AFE9: 82 03 00     	brl	L10143
  9449                        ;      }
  9450                        	.line	2331
  9451                        ;   }
  9452                        L10144:
  9453                        	.line	2332
  9454 06:AFEC: 82 BF FF     	brl	L10142
  9455                        L10143:
  9456                        ;
  Thu Jul 29 2021 11:55                                                Page 179


  9457                        ;   // Command packet transfer...
  9458                        ;   // Check for protocol failures... no interrupt
                     here please!
  9459                        ;
  9460                        ;   // Command packet transfer...
  9461                        ;   // If no error, transfer the command packet.
  9462                        ;
  9463                        ;   if ( reg_cmd_info.ec == 0 )
  9464                        	.line	2340
  9465                        ;   {
  9466 06:AFEF: AD xx xx     	lda	|~~reg_cmd_info+31
  9467 06:AFF2: 29 FF 00     	and	#$ff
  9468 06:AFF5: F0 03        	beq	L379
  9469 06:AFF7: 82 6C 00     	brl	L10145
  9470                        L379:
  9471                        	.line	2341
  9472                        ;
  9473                        ;      // Command packet transfer...
  9474                        ;      // Read the primary status register and the
                     other ATAPI registers.
  9475                        ;
  9476                        ;      status = pio_inbyte( CB_STAT );
  9477                        	.line	2346
  9478 06:AFFA: F4 07 00     	pea	#<$7
  9479 06:AFFD: 22 B1 B7 06  	jsl	~~pio_inbyte
  9480 06:B001: E2 20        	sep	#$20
  9481                        	longa	off
  9482 06:B003: 85 0D        	sta	<L361+status_1
  9483 06:B005: C2 20        	rep	#$20
  9484                        	longa	on
  9485                        ;
  9486                        ;      // Command packet transfer...
  9487                        ;      // check status: must have BSY=0, DRQ=1 now
  9488                        ;
  9489                        ;      if (    ( status & ( CB_STAT_BSY | CB_STAT_
                    DRQ | CB_STAT_ERR ) )
  9490                        	.line	2351
  9491                        ;           != CB_STAT_DRQ
  9492                        ;         )
  9493                        ;      {
  9494 06:B007: A5 0D        	lda	<L361+status_1
  9495 06:B009: 29 89 00     	and	#<$89
  9496 06:B00C: 85 01        	sta	<R0
  9497 06:B00E: A5 01        	lda	<R0
  9498 06:B010: C9 08 00     	cmp	#<$8
  9499 06:B013: D0 03        	bne	L380
  9500 06:B015: 82 11 00     	brl	L10146
  9501                        L380:
  9502                        	.line	2354
  9503                        ;         reg_cmd_info.ec = 52;
  9504                        	.line	2355
  9505 06:B018: E2 20        	sep	#$20
  9506                        	longa	off
  9507 06:B01A: A9 34        	lda	#$34
  9508 06:B01C: 8D xx xx     	sta	|~~reg_cmd_info+31
  9509 06:B01F: C2 20        	rep	#$20
  9510                        	longa	on
  9511                        ;         dir = -1;   // command done
  Thu Jul 29 2021 11:55                                                Page 180


  9512                        	.line	2356
  9513 06:B021: A9 FF FF     	lda	#$ffff
  9514 06:B024: 85 1F        	sta	<L360+dir_0
  9515                        ;      }
  9516                        	.line	2357
  9517                        ;      else
  9518 06:B026: 82 3D 00     	brl	L10147
  9519                        L10146:
  9520                        ;      {
  9521                        	.line	2359
  9522                        ;         // Command packet transfer...
  9523                        ;         // xfer the command packet (the cdb)
  9524                        ;
  9525                        ;         pio_drq_block_out( CB_DATA, cdbBufAddr, 
                    cpbc >> 1 );
  9526                        	.line	2363
  9527 06:B029: A5 19        	lda	<L360+cpbc_0
  9528 06:B02B: 4A           	lsr	A
  9529 06:B02C: 85 01        	sta	<R0
  9530 06:B02E: A5 01        	lda	<R0
  9531 06:B030: 85 01        	sta	<R0
  9532 06:B032: 64 03        	stz	<R0+2
  9533 06:B034: D4 03        	pei	<R0+2
  9534 06:B036: D4 01        	pei	<R0
  9535 06:B038: D4 1D        	pei	<L360+cdbBufAddr_0+2
  9536 06:B03A: D4 1B        	pei	<L360+cdbBufAddr_0
  9537 06:B03C: F4 00 00     	pea	#<$0
  9538 06:B03F: 22 1B BA 06  	jsl	~~pio_drq_block_out
  9539                        ;
  9540                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  9541                        	.line	2365
  9542                        	.line	2365
  9543 06:B043: F4 08 00     	pea	#<$8
  9544 06:B046: 22 B1 B7 06  	jsl	~~pio_inbyte
  9545                        	.line	2365
  9546 06:B04A: F4 08 00     	pea	#<$8
  9547 06:B04D: 22 B1 B7 06  	jsl	~~pio_inbyte
  9548                        	.line	2365
  9549 06:B051: F4 08 00     	pea	#<$8
  9550 06:B054: 22 B1 B7 06  	jsl	~~pio_inbyte
  9551                        	.line	2365
  9552 06:B058: F4 08 00     	pea	#<$8
  9553 06:B05B: 22 B1 B7 06  	jsl	~~pio_inbyte
  9554                        	.line	2365
  9555 06:B05F: F4 08 00     	pea	#<$8
  9556 06:B062: 22 B1 B7 06  	jsl	~~pio_inbyte
  9557                        	.line	2365
  9558                        	.line	2365
  9559                        ;      }
  9560                        	.line	2366
  9561                        L10147:
  9562                        ;   }
  9563                        	.line	2367
  9564                        ;
  9565                        ;   // Data transfer loop...
  9566                        ;   // If there is no error, enter the data transf
                    er loop.
  Thu Jul 29 2021 11:55                                                Page 181


  9567                        ;
  9568                        ;   while ( reg_cmd_info.ec == 0 )
  9569                        L10145:
  9570                        	.line	2372
  9571                        L10148:
  9572 06:B066: AD xx xx     	lda	|~~reg_cmd_info+31
  9573 06:B069: 29 FF 00     	and	#$ff
  9574 06:B06C: F0 03        	beq	L381
  9575 06:B06E: 82 68 01     	brl	L10149
  9576                        L381:
  9577                        ;   {
  9578                        	.line	2373
  9579                        ;      // Data transfer loop...
  9580                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  9581                        ;
  9582                        ;      sub_wait_poll( 53, 54 );
  9583                        	.line	2377
  9584 06:B071: F4 36 00     	pea	#<$36
  9585 06:B074: F4 35 00     	pea	#<$35
  9586 06:B077: 22 3F B6 06  	jsl	~~sub_wait_poll
  9587                        ;
  9588                        ;      // Data transfer loop...
  9589                        ;      // If there was a time out error, exit the 
                    data transfer loop.
  9590                        ;
  9591                        ;      if ( reg_cmd_info.ec )
  9592                        	.line	2382
  9593                        ;      {
  9594 06:B07B: AD xx xx     	lda	|~~reg_cmd_info+31
  9595 06:B07E: 29 FF 00     	and	#$ff
  9596 06:B081: D0 03        	bne	L382
  9597 06:B083: 82 08 00     	brl	L10150
  9598                        L382:
  9599                        	.line	2383
  9600                        ;         dir = -1;   // command done
  9601                        	.line	2384
  9602 06:B086: A9 FF FF     	lda	#$ffff
  9603 06:B089: 85 1F        	sta	<L360+dir_0
  9604                        ;         break;
  9605                        	.line	2385
  9606 06:B08B: 82 4B 01     	brl	L10149
  9607                        ;      }
  9608                        	.line	2386
  9609                        ;
  9610                        ;      // Data transfer loop...
  9611                        ;      // If using interrupts get the status read 
                    by the interrupt
  9612                        ;      // handler, otherwise read the status regis
                    ter.
  9613                        ;
  9614                        ;      if ( int_use_intr_flag )
  9615                        L10150:
  9616                        	.line	2392
  9617                        ;         status = int_ata_status;
  9618 06:B08E: AD xx xx     	lda	|~~int_use_intr_flag
  9619 06:B091: 29 FF 00     	and	#$ff
  9620 06:B094: D0 03        	bne	L383
  Thu Jul 29 2021 11:55                                                Page 182


  9621 06:B096: 82 0C 00     	brl	L10151
  9622                        L383:
  9623                        	.line	2393
  9624 06:B099: E2 20        	sep	#$20
  9625                        	longa	off
  9626 06:B09B: AD xx xx     	lda	|~~int_ata_status
  9627 06:B09E: 85 0D        	sta	<L361+status_1
  9628 06:B0A0: C2 20        	rep	#$20
  9629                        	longa	on
  9630                        ;      else
  9631 06:B0A2: 82 0D 00     	brl	L10152
  9632                        L10151:
  9633                        ;         status = pio_inbyte( CB_STAT );
  9634                        	.line	2395
  9635 06:B0A5: F4 07 00     	pea	#<$7
  9636 06:B0A8: 22 B1 B7 06  	jsl	~~pio_inbyte
  9637 06:B0AC: E2 20        	sep	#$20
  9638                        	longa	off
  9639 06:B0AE: 85 0D        	sta	<L361+status_1
  9640 06:B0B0: C2 20        	rep	#$20
  9641                        	longa	on
  9642                        L10152:
  9643                        ;
  9644                        ;      // Data transfer loop...
  9645                        ;      // Exit the read data loop if the device in
                    dicates this
  9646                        ;      // is the end of the command.
  9647                        ;
  9648                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
  9649                        	.line	2401
  9650                        ;      {
  9651 06:B0B2: E2 20        	sep	#$20
  9652                        	longa	off
  9653 06:B0B4: A5 0D        	lda	<L361+status_1
  9654 06:B0B6: 29 88        	and	#<$88
  9655 06:B0B8: C2 20        	rep	#$20
  9656                        	longa	on
  9657 06:B0BA: F0 03        	beq	L384
  9658 06:B0BC: 82 08 00     	brl	L10153
  9659                        L384:
  9660                        	.line	2402
  9661                        ;         dir = -1;   // command done
  9662                        	.line	2403
  9663 06:B0BF: A9 FF FF     	lda	#$ffff
  9664 06:B0C2: 85 1F        	sta	<L360+dir_0
  9665                        ;         break;
  9666                        	.line	2404
  9667 06:B0C4: 82 12 01     	brl	L10149
  9668                        ;      }
  9669                        	.line	2405
  9670                        ;
  9671                        ;      // Data transfer loop...
  9672                        ;      // The device must want to transfer data...
  9673                        ;      // check status: must have BSY=0, DRQ=1 now
                    .
  9674                        ;
  9675                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
  Thu Jul 29 2021 11:55                                                Page 183


                     ) ) != CB_STAT_DRQ )
  9676                        L10153:
  9677                        	.line	2411
  9678                        ;      {
  9679 06:B0C7: A5 0D        	lda	<L361+status_1
  9680 06:B0C9: 29 88 00     	and	#<$88
  9681 06:B0CC: 85 01        	sta	<R0
  9682 06:B0CE: A5 01        	lda	<R0
  9683 06:B0D0: C9 08 00     	cmp	#<$8
  9684 06:B0D3: D0 03        	bne	L385
  9685 06:B0D5: 82 11 00     	brl	L10154
  9686                        L385:
  9687                        	.line	2412
  9688                        ;         reg_cmd_info.ec = 55;
  9689                        	.line	2413
  9690 06:B0D8: E2 20        	sep	#$20
  9691                        	longa	off
  9692 06:B0DA: A9 37        	lda	#$37
  9693 06:B0DC: 8D xx xx     	sta	|~~reg_cmd_info+31
  9694 06:B0DF: C2 20        	rep	#$20
  9695                        	longa	on
  9696                        ;         dir = -1;   // command done
  9697                        	.line	2414
  9698 06:B0E1: A9 FF FF     	lda	#$ffff
  9699 06:B0E4: 85 1F        	sta	<L360+dir_0
  9700                        ;         break;
  9701                        	.line	2415
  9702 06:B0E6: 82 F0 00     	brl	L10149
  9703                        ;      }
  9704                        	.line	2416
  9705                        ;
  9706                        ;      // Data transfer loop...
  9707                        ;      // get the byte count, check for zero...
  9708                        ;
  9709                        ;      byteCnt = ( pio_inbyte( CB_CH ) << 8 ) | pi
                    o_inbyte( CB_CL );
  9710                        L10154:
  9711                        	.line	2421
  9712 06:B0E9: F4 05 00     	pea	#<$5
  9713 06:B0EC: 22 B1 B7 06  	jsl	~~pio_inbyte
  9714 06:B0F0: E2 20        	sep	#$20
  9715                        	longa	off
  9716 06:B0F2: 85 05        	sta	<R1
  9717 06:B0F4: C2 20        	rep	#$20
  9718                        	longa	on
  9719 06:B0F6: A5 05        	lda	<R1
  9720 06:B0F8: 29 FF 00     	and	#$ff
  9721 06:B0FB: 85 05        	sta	<R1
  9722 06:B0FD: A5 05        	lda	<R1
  9723 06:B0FF: EB           	xba
  9724 06:B100: 29 00 FF     	and	#$ff00
  9725 06:B103: 85 01        	sta	<R0
  9726 06:B105: F4 04 00     	pea	#<$4
  9727 06:B108: 22 B1 B7 06  	jsl	~~pio_inbyte
  9728 06:B10C: E2 20        	sep	#$20
  9729                        	longa	off
  9730 06:B10E: 85 05        	sta	<R1
  9731 06:B110: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 184


  9732                        	longa	on
  9733 06:B112: A5 05        	lda	<R1
  9734 06:B114: 29 FF 00     	and	#$ff
  9735 06:B117: 85 05        	sta	<R1
  9736 06:B119: A5 05        	lda	<R1
  9737 06:B11B: 05 01        	ora	<R0
  9738 06:B11D: 85 0E        	sta	<L361+byteCnt_1
  9739                        ;      if ( byteCnt < 1 )
  9740                        	.line	2422
  9741                        ;      {
  9742 06:B11F: A5 0E        	lda	<L361+byteCnt_1
  9743 06:B121: C9 01 00     	cmp	#<$1
  9744 06:B124: 90 03        	bcc	L386
  9745 06:B126: 82 11 00     	brl	L10155
  9746                        L386:
  9747                        	.line	2423
  9748                        ;         reg_cmd_info.ec = 59;
  9749                        	.line	2424
  9750 06:B129: E2 20        	sep	#$20
  9751                        	longa	off
  9752 06:B12B: A9 3B        	lda	#$3b
  9753 06:B12D: 8D xx xx     	sta	|~~reg_cmd_info+31
  9754 06:B130: C2 20        	rep	#$20
  9755                        	longa	on
  9756                        ;         dir = -1;   // command done
  9757                        	.line	2425
  9758 06:B132: A9 FF FF     	lda	#$ffff
  9759 06:B135: 85 1F        	sta	<L360+dir_0
  9760                        ;         break;
  9761                        	.line	2426
  9762 06:B137: 82 9F 00     	brl	L10149
  9763                        ;      }
  9764                        	.line	2427
  9765                        ;
  9766                        ;      // Data transfer loop...
  9767                        ;      // increment number of DRQ packets
  9768                        ;
  9769                        ;      reg_cmd_info.drqPackets ++ ;
  9770                        L10155:
  9771                        	.line	2432
  9772 06:B13A: EE xx xx     	inc	|~~reg_cmd_info+37
  9773 06:B13D: D0 03        	bne	L387
  9774 06:B13F: EE xx xx     	inc	|~~reg_cmd_info+37+2
  9775                        L387:
  9776                        ;
  9777                        ;      // Data transfer loop...
  9778                        ;      // transfer the data and update the i/o buf
                    fer address
  9779                        ;      // and the number of bytes transfered.
  9780                        ;
  9781                        ;      wordCnt = ( byteCnt >> 1 ) + ( byteCnt & 0x
                    0001 );
  9782                        	.line	2438
  9783 06:B142: A5 0E        	lda	<L361+byteCnt_1
  9784 06:B144: 29 01 00     	and	#<$1
  9785 06:B147: 85 01        	sta	<R0
  9786 06:B149: A5 0E        	lda	<L361+byteCnt_1
  9787 06:B14B: 4A           	lsr	A
  Thu Jul 29 2021 11:55                                                Page 185


  9788 06:B14C: 85 05        	sta	<R1
  9789 06:B14E: 18           	clc
  9790 06:B14F: A5 05        	lda	<R1
  9791 06:B151: 65 01        	adc	<R0
  9792 06:B153: 85 09        	sta	<R2
  9793 06:B155: A5 09        	lda	<R2
  9794 06:B157: 85 10        	sta	<L361+wordCnt_1
  9795 06:B159: 64 12        	stz	<L361+wordCnt_1+2
  9796                        ;      reg_cmd_info.totalBytesXfer += ( wordCnt <<
                     1 );
  9797                        	.line	2439
  9798 06:B15B: A5 10        	lda	<L361+wordCnt_1
  9799 06:B15D: 85 01        	sta	<R0
  9800 06:B15F: A5 12        	lda	<L361+wordCnt_1+2
  9801 06:B161: 85 03        	sta	<R0+2
  9802 06:B163: 06 01        	asl	<R0
  9803 06:B165: 26 03        	rol	<R0+2
  9804 06:B167: 18           	clc
  9805 06:B168: A5 01        	lda	<R0
  9806 06:B16A: 6D xx xx     	adc	|~~reg_cmd_info+33
  9807 06:B16D: 8D xx xx     	sta	|~~reg_cmd_info+33
  9808 06:B170: A5 03        	lda	<R0+2
  9809 06:B172: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  9810 06:B175: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  9811                        ;      if ( dir )
  9812                        	.line	2440
  9813                        ;         pio_drq_block_out( CB_DATA, dataBufAddr,
                     wordCnt );
  9814 06:B178: A5 1F        	lda	<L360+dir_0
  9815 06:B17A: D0 03        	bne	L388
  9816 06:B17C: 82 12 00     	brl	L10156
  9817                        L388:
  9818                        	.line	2441
  9819 06:B17F: D4 12        	pei	<L361+wordCnt_1+2
  9820 06:B181: D4 10        	pei	<L361+wordCnt_1
  9821 06:B183: D4 27        	pei	<L360+dataBufAddr_0+2
  9822 06:B185: D4 25        	pei	<L360+dataBufAddr_0
  9823 06:B187: F4 00 00     	pea	#<$0
  9824 06:B18A: 22 1B BA 06  	jsl	~~pio_drq_block_out
  9825                        ;      else
  9826 06:B18E: 82 0F 00     	brl	L10157
  9827                        L10156:
  9828                        ;         pio_drq_block_in( CB_DATA, dataBufAddr, 
                    wordCnt );
  9829                        	.line	2443
  9830 06:B191: D4 12        	pei	<L361+wordCnt_1+2
  9831 06:B193: D4 10        	pei	<L361+wordCnt_1
  9832 06:B195: D4 27        	pei	<L360+dataBufAddr_0+2
  9833 06:B197: D4 25        	pei	<L360+dataBufAddr_0
  9834 06:B199: F4 00 00     	pea	#<$0
  9835 06:B19C: 22 18 B9 06  	jsl	~~pio_drq_block_in
  9836                        L10157:
  9837                        ;      dataBufAddr = dataBufAddr + byteCnt;
  9838                        	.line	2444
  9839 06:B1A0: A5 0E        	lda	<L361+byteCnt_1
  9840 06:B1A2: 85 01        	sta	<R0
  9841 06:B1A4: 64 03        	stz	<R0+2
  9842 06:B1A6: 18           	clc
  Thu Jul 29 2021 11:55                                                Page 186


  9843 06:B1A7: A5 25        	lda	<L360+dataBufAddr_0
  9844 06:B1A9: 65 01        	adc	<R0
  9845 06:B1AB: 85 25        	sta	<L360+dataBufAddr_0
  9846 06:B1AD: A5 27        	lda	<L360+dataBufAddr_0+2
  9847 06:B1AF: 65 03        	adc	<R0+2
  9848 06:B1B1: 85 27        	sta	<L360+dataBufAddr_0+2
  9849                        ;
  9850                        ;      DELAY400NS;    // delay so device can get t
                    he status updated
  9851                        	.line	2446
  9852                        	.line	2446
  9853 06:B1B3: F4 08 00     	pea	#<$8
  9854 06:B1B6: 22 B1 B7 06  	jsl	~~pio_inbyte
  9855                        	.line	2446
  9856 06:B1BA: F4 08 00     	pea	#<$8
  9857 06:B1BD: 22 B1 B7 06  	jsl	~~pio_inbyte
  9858                        	.line	2446
  9859 06:B1C1: F4 08 00     	pea	#<$8
  9860 06:B1C4: 22 B1 B7 06  	jsl	~~pio_inbyte
  9861                        	.line	2446
  9862 06:B1C8: F4 08 00     	pea	#<$8
  9863 06:B1CB: 22 B1 B7 06  	jsl	~~pio_inbyte
  9864                        	.line	2446
  9865 06:B1CF: F4 08 00     	pea	#<$8
  9866 06:B1D2: 22 B1 B7 06  	jsl	~~pio_inbyte
  9867                        	.line	2446
  9868                        	.line	2446
  9869                        ;   }
  9870                        	.line	2447
  9871 06:B1D6: 82 8D FE     	brl	L10148
  9872                        L10149:
  9873                        ;
  9874                        ;   // End of command...
  9875                        ;   // Wait for interrupt or poll for BSY=0,
  9876                        ;   // but don't do this if there was any error or
                     if this
  9877                        ;   // was a commmand that did not transfer data.
  9878                        ;
  9879                        ;   if ( ( reg_cmd_info.ec == 0 ) && ( dir >= 0 ) 
                    )
  9880                        	.line	2454
  9881                        ;   {
  9882 06:B1D9: AD xx xx     	lda	|~~reg_cmd_info+31
  9883 06:B1DC: 29 FF 00     	and	#$ff
  9884 06:B1DF: F0 03        	beq	L389
  9885 06:B1E1: 82 11 00     	brl	L10158
  9886                        L389:
  9887 06:B1E4: A5 1F        	lda	<L360+dir_0
  9888 06:B1E6: 10 03        	bpl	L390
  9889 06:B1E8: 82 0A 00     	brl	L10158
  9890                        L390:
  9891                        	.line	2455
  9892                        ;      sub_wait_poll( 56, 57 );
  9893                        	.line	2456
  9894 06:B1EB: F4 39 00     	pea	#<$39
  9895 06:B1EE: F4 38 00     	pea	#<$38
  9896 06:B1F1: 22 3F B6 06  	jsl	~~sub_wait_poll
  9897                        ;   }
  Thu Jul 29 2021 11:55                                                Page 187


  9898                        	.line	2457
  9899                        ;
  9900                        ;   // Final status check, only if no previous err
                    or.
  9901                        ;
  9902                        ;   if ( reg_cmd_info.ec == 0 )
  9903                        L10158:
  9904                        	.line	2461
  9905                        ;   {
  9906 06:B1F5: AD xx xx     	lda	|~~reg_cmd_info+31
  9907 06:B1F8: 29 FF 00     	and	#$ff
  9908 06:B1FB: F0 03        	beq	L391
  9909 06:B1FD: 82 3A 00     	brl	L10159
  9910                        L391:
  9911                        	.line	2462
  9912                        ;      // Final status check...
  9913                        ;      // If using interrupts get the status read 
                    by the interrupt
  9914                        ;      // handler, otherwise read the status regis
                    ter.
  9915                        ;
  9916                        ;      if ( int_use_intr_flag )
  9917                        	.line	2467
  9918                        ;         status = int_ata_status;
  9919 06:B200: AD xx xx     	lda	|~~int_use_intr_flag
  9920 06:B203: 29 FF 00     	and	#$ff
  9921 06:B206: D0 03        	bne	L392
  9922 06:B208: 82 0C 00     	brl	L10160
  9923                        L392:
  9924                        	.line	2468
  9925 06:B20B: E2 20        	sep	#$20
  9926                        	longa	off
  9927 06:B20D: AD xx xx     	lda	|~~int_ata_status
  9928 06:B210: 85 0D        	sta	<L361+status_1
  9929 06:B212: C2 20        	rep	#$20
  9930                        	longa	on
  9931                        ;      else
  9932 06:B214: 82 0D 00     	brl	L10161
  9933                        L10160:
  9934                        ;         status = pio_inbyte( CB_STAT );
  9935                        	.line	2470
  9936 06:B217: F4 07 00     	pea	#<$7
  9937 06:B21A: 22 B1 B7 06  	jsl	~~pio_inbyte
  9938 06:B21E: E2 20        	sep	#$20
  9939                        	longa	off
  9940 06:B220: 85 0D        	sta	<L361+status_1
  9941 06:B222: C2 20        	rep	#$20
  9942                        	longa	on
  9943                        L10161:
  9944                        ;
  9945                        ;      // Final status check...
  9946                        ;      // check for any error.
  9947                        ;
  9948                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DRQ |
                     CB_STAT_ERR ) )
  9949                        	.line	2475
  9950                        ;      {
  9951 06:B224: E2 20        	sep	#$20
  Thu Jul 29 2021 11:55                                                Page 188


  9952                        	longa	off
  9953 06:B226: A5 0D        	lda	<L361+status_1
  9954 06:B228: 29 89        	and	#<$89
  9955 06:B22A: C2 20        	rep	#$20
  9956                        	longa	on
  9957 06:B22C: D0 03        	bne	L393
  9958 06:B22E: 82 09 00     	brl	L10162
  9959                        L393:
  9960                        	.line	2476
  9961                        ;         reg_cmd_info.ec = 58;
  9962                        	.line	2477
  9963 06:B231: E2 20        	sep	#$20
  9964                        	longa	off
  9965 06:B233: A9 3A        	lda	#$3a
  9966 06:B235: 8D xx xx     	sta	|~~reg_cmd_info+31
  9967 06:B238: C2 20        	rep	#$20
  9968                        	longa	on
  9969                        ;      }
  9970                        	.line	2478
  9971                        ;   }
  9972                        L10162:
  9973                        	.line	2479
  9974                        ;
  9975                        ;   // Done...
  9976                        ;
  9977                        ;   // Final status check
  9978                        ;   // BMIDE Error=1?
  9979                        ;
  9980                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  9981                        L10159:
  9982                        	.line	2486
  9983                        ;   {
  9984 06:B23A: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  9985 06:B23E: E2 20        	sep	#$20
  9986                        	longa	off
  9987 06:B240: 29 02        	and	#<$2
  9988 06:B242: C2 20        	rep	#$20
  9989                        	longa	on
  9990 06:B244: D0 03        	bne	L394
  9991 06:B246: 82 09 00     	brl	L10163
  9992                        L394:
  9993                        	.line	2487
  9994                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  9995                        	.line	2488
  9996 06:B249: E2 20        	sep	#$20
  9997                        	longa	off
  9998 06:B24B: A9 4E        	lda	#$4e
  9999 06:B24D: 8D xx xx     	sta	|~~reg_cmd_info+31
 10000 06:B250: C2 20        	rep	#$20
 10001                        	longa	on
 10002                        ;   }
 10003                        	.line	2489
 10004                        ;
 10005                        ;   // All done.  The return values of this functi
                    on are described in
 10006                        ;   // MINDRVR.H.
  Thu Jul 29 2021 11:55                                                Page 189


 10007                        ;
 10008                        ;   if ( reg_cmd_info.ec )
 10009                        L10163:
 10010                        	.line	2494
 10011                        ;      return 1;
 10012 06:B252: AD xx xx     	lda	|~~reg_cmd_info+31
 10013 06:B255: 29 FF 00     	and	#$ff
 10014 06:B258: D0 03        	bne	L395
 10015 06:B25A: 82 06 00     	brl	L10164
 10016                        L395:
 10017                        	.line	2495
 10018 06:B25D: A9 01 00     	lda	#$1
 10019 06:B260: 82 08 FD     	brl	L376
 10020                        ;   return 0;
 10021                        L10164:
 10022                        	.line	2496
 10023 06:B263: A9 00 00     	lda	#$0
 10024 06:B266: 82 02 FD     	brl	L376
 10025                        ;}
 10026                        	.line	2497
 10027                        	.endblock	2497
 10028             00000013   L360	equ	19
 10029             0000000D   L361	equ	13
 10030 06:B269:              	ends
 10031                        	efunc
 10032                        	.endfunc	2497,13,19
 10033                        	.line	2497
 10034                        ;
 10035                        ;#endif   // INCLUDE_ATAPI
 10036                        ;
 10037                        ;#ifdef INCLUDE_ATA_DMA
 10038                        ;
 10039                        ;//***********************************************
                    ************
 10040                        ;//
 10041                        ;// Some notes about PCI bus mastering DMA...
 10042                        ;//
 10043                        ;// !!! The DMA support in MINDRVR is based on x86
                     PCI bus mastering
 10044                        ;// !!! ATA controller design as described by the 
                    T13 document
 10045                        ;// !!! '1510 Host Controller Standard' (in sectio
                    ns 1-6).
 10046                        ;//
 10047                        ;// Note that the T13 1510D document also describe
                    s a
 10048                        ;// complex DMA engine called ADMA.  While ADMA is
                     a good idea it
 10049                        ;// will probably never be popular or widely imple
                    mented.  MINDRVR
 10050                        ;// does not support ADMA.
 10051                        ;//
 10052                        ;// The base address of the Bus Master Control Reg
                    isters (BMIDE) is
 10053                        ;// found in the PCI Configuration space for the A
                    TA controller (at
 10054                        ;// offset 0x20 in the config space data).  This i
                    s normally an I/O
  Thu Jul 29 2021 11:55                                                Page 190


 10055                        ;// address.
 10056                        ;//
 10057                        ;// The BMIDE data is 16 bytes of data starting at
                     the BMIDE base
 10058                        ;// address.  The first 8 bytes is for the primary
                     ATA channel and
 10059                        ;// the second 8 bytes is for the secondary ATA ch
                    annel.  The 8 bytes
 10060                        ;// contain a "command" byte and a "status" byte a
                    nd a 4 byte
 10061                        ;// (32-bit) physical memory address pointing to t
                    he Physical Region
 10062                        ;// Descriptor (PRD) list.  Each PRD entry describ
                    es an area of
 10063                        ;// memory or data buffer for the DMA transfer.  A
                     region described
 10064                        ;// by a PRD may not cross a 64K byte boundary in 
                    physical memory.
 10065                        ;// Also, the PRD list must not cross a 64K byte b
                    oundary.
 10066                        ;//
 10067                        ;//***********************************************
                    ************
 10068                        ;
 10069                        ;//***********************************************
                    ************
 10070                        ;//
 10071                        ;// pci bus master registers and PRD list buffer,
 10072                        ;// see the dma_pci_config() and set_up_xfer() fun
                    ctions.
 10073                        ;//
 10074                        ;// !!! Note that the PRD buffer is statically all
                    ocated here
 10075                        ;// !!! but the actual address of the buffer is ad
                    justed by
 10076                        ;// !!! the dma_pci_config() function.
 10077                        ;//
 10078                        ;//***********************************************
                    ************
 10079                        ;
 10080                        ;static unsigned long * dma_pci_prd_ptr;   // curr
                    ent PRD buffer address
 10081                        ;static int dma_pci_num_prd;               // curr
                    ent number of PRD entries
 10082                        ;
 10083                        ;static unsigned char statReg;             // save
                     BM status reg bits
 10084                        ;static unsigned char rwControl;           // read
                    /write control bit setting
 10085                        ;
 10086                        ;#define MAX_TRANSFER_SIZE  262144L        // max 
                    transfer size (in bytes,
 10087                        ;                                          // shou
                    ld be multiple of 65536)
 10088                        ;
 10089                        ;#define MAX_SEG ((MAX_TRANSFER_SIZE/65536L)+2L) /
                    / number physical segments
 10090                        ;#define MAX_PRD (MAX_SEG*4L)                    /
  Thu Jul 29 2021 11:55                                                Page 191


                    / number of PRDs required
 10091                        ;
 10092                        ;#define PRD_BUF_SIZE (48+(2*MAX_PRD*8))         /
                    / size of PRD list buffer
 10093                        ;
 10094                        ;static unsigned char prdBuf[PRD_BUF_SIZE];      /
                    / PRD buffer
 10095                        ;static unsigned long * prdBufPtr;               /
                    / first PRD addr
 10096                        ;
 10097                        ;//***********************************************
                    ************
 10098                        ;//
 10099                        ;// dma_pci_config() - configure/setup for Read/Wr
                    ite DMA
 10100                        ;//
 10101                        ;// The caller must call this function before atte
                    mpting
 10102                        ;// to use any ATA or ATAPI commands in PCI DMA mo
                    de.
 10103                        ;//
 10104                        ;// !!! MINDRVR assumes the entire DMA data transf
                    er is contained
 10105                        ;// !!! within a single contiguous I/O buffer. You
                     may not need
 10106                        ;// !!! the dma_pci_config() function depending on
                     how your system
 10107                        ;// !!! allocates the PRD buffer.
 10108                        ;//
 10109                        ;// !!! This function shows an example of PRD buff
                    er allocation.
 10110                        ;// !!! The PRD buffer must be aligned
 10111                        ;// !!! on a 8 byte boundary and must not cross a 
                    64K byte
 10112                        ;// !!! boundary in memory.
 10113                        ;//
 10114                        ;//***********************************************
                    ************
 10115                        ;
 10116                        ;int dma_pci_config( void )
 10117                        ;
 10118                        ;{
 10119                        ;   unsigned long lw;
 10120                        ;
 10121                        ;   // Set up the PRD entry list buffer address - 
                    the PRD entry list
 10122                        ;   // may not span a 64KB boundary in physical me
                    mory. Space is
 10123                        ;   // allocated (above) for this buffer such that
                     it will be
 10124                        ;   // aligned on a seqment boundary
 10125                        ;   // and such that the PRD list will not span a 
                    64KB boundary...
 10126                        ;   lw = (unsigned long) prdBuf;
 10127                        ;   // ...move up to an 8 byte boundary.
 10128                        ;   lw = lw + 15;
 10129                        ;   lw = lw & 0xfffffff8L;
 10130                        ;   // ...check for 64KB boundary in the first par
  Thu Jul 29 2021 11:55                                                Page 192


                    t of the PRD buffer,
 10131                        ;   // ...if so just move the buffer to that bound
                    ary.
 10132                        ;   if ( ( lw & 0xffff0000L )
 10133                        ;        !=
 10134                        ;        ( ( lw + ( MAX_PRD * 8L ) - 1L ) & 0xffff
                    0000L )
 10135                        ;      )
 10136                        ;      lw = ( lw + ( MAX_PRD * 8L ) ) & 0xffff0000
                    L;
 10137                        ;   // ... return the address of the first PRD
 10138                        ;   dma_pci_prd_ptr = prdBufPtr = (unsigned long *
                    ) lw;
 10139                        ;   // ... return the current number of PRD entrie
                    s
 10140                        ;   dma_pci_num_prd = 0;
 10141                        ;
 10142                        ;   // read the BM status reg and save the upper 3
                     bits.
 10143                        ;   statReg = (unsigned char) ( pio_readBusMstrSta
                    tus() & 0x60 );
 10144                        ;
 10145                        ;   return 0;
 10146                        ;}
 10147                        ;
 10148                        ;//***********************************************
                    ************
 10149                        ;//
 10150                        ;// set_up_xfer() -- set up the PRD entry list
 10151                        ;//
 10152                        ;// !!! MINDRVR assumes the entire DMA data transf
                    er is contained
 10153                        ;// !!! within a single contiguous I/O buffer. You
                     may not need
 10154                        ;// !!! a much more complex set_up_xfer() function
                     to support
 10155                        ;// !!! true scatter/gather lists.
 10156                        ;//
 10157                        ;// The PRD list must be aligned on an 8 byte boun
                    dary and the
 10158                        ;// list must not cross a 64K byte boundary in mem
                    ory.
 10159                        ;//
 10160                        ;//***********************************************
                    ************
 10161                        ;
 10162                        ;static int set_up_xfer( int dir, long bc, unsigne
                    d char * bufAddr );
 10163                        ;
 10164                        ;static int set_up_xfer( int dir, long bc, unsigne
                    d char * bufAddr )
 10165                        ;
 10166                        ;{
 10167                        ;   int numPrd;                      // number of 
                    PRD required
 10168                        ;   int maxPrd;                      // max number
                     of PRD allowed
 10169                        ;   unsigned long temp;
  Thu Jul 29 2021 11:55                                                Page 193


 10170                        ;   unsigned long phyAddr;           // physical m
                    emory address
 10171                        ;   unsigned long * prdPtr;      // pointer to PRD
                     entry list
 10172                        ;
 10173                        ;   // disable/stop the dma channel, clear interru
                    pt and error bits
 10174                        ;   pio_writeBusMstrCmd( BM_CR_MASK_STOP );
 10175                        ;   pio_writeBusMstrStatus( (unsigned char) ( stat
                    Reg | BM_SR_MASK_INT | BM_SR_MASK_ERR ) );
 10176                        ;
 10177                        ;   // setup to build the PRD list...
 10178                        ;   // ...max PRDs allowed
 10179                        ;   maxPrd = (int) MAX_PRD;
 10180                        ;   // ...PRD buffer address
 10181                        ;   prdPtr = prdBufPtr;
 10182                        ;   dma_pci_prd_ptr = prdPtr;
 10183                        ;   // ... convert I/O buffer address to an physic
                    al memory address
 10184                        ;   phyAddr = (unsigned long) bufAddr;
 10185                        ;
 10186                        ;   // build the PRD list...
 10187                        ;   // ...PRD entry format:
 10188                        ;   // +0 to +3 = memory address
 10189                        ;   // +4 to +5 = 0x0000 (not EOT) or 0x8000 (EOT)
 10190                        ;   // +6 to +7 = byte count
 10191                        ;   // ...zero number of PRDs
 10192                        ;   numPrd = 0;
 10193                        ;   // ...loop to build each PRD
 10194                        ;   while ( bc > 0 )
 10195                        ;   {
 10196                        ;      if ( numPrd >= maxPrd )
 10197                        ;         return 1;
 10198                        ;      // set this PRD's address
 10199                        ;      prdPtr[0] = phyAddr;
 10200                        ;      // set count for this PRD
 10201                        ;      temp = 65536L;          // max PRD length
 10202                        ;      if ( temp > bc )        // count to large?
 10203                        ;         temp = bc;           //    yes - use act
                    ual count
 10204                        ;      // check if count will fit
 10205                        ;      phyAddr = phyAddr + temp;
 10206                        ;      if ( ( phyAddr & 0xffff0000L ) != ( prdPtr[
                    0] & 0xffff0000L ) )
 10207                        ;      {
 10208                        ;         phyAddr = phyAddr & 0xffff0000L;
 10209                        ;         temp = phyAddr - prdPtr[0];
 10210                        ;      }
 10211                        ;      // set this PRD's count
 10212                        ;      prdPtr[1] = temp & 0x0000ffffL;
 10213                        ;      // update byte count
 10214                        ;      bc = bc - temp;
 10215                        ;      // set the end bit in the prd list
 10216                        ;      if ( bc < 1 )
 10217                        ;         prdPtr[1] = prdPtr[1] | 0x80000000L;
 10218                        ;      prdPtr ++ ;
 10219                        ;      prdPtr ++ ;
 10220                        ;      numPrd ++ ;
  Thu Jul 29 2021 11:55                                                Page 194


 10221                        ;   }
 10222                        ;
 10223                        ;   // return the current PRD list size and
 10224                        ;   // write into BMIDE PRD address registers.
 10225                        ;
 10226                        ;   dma_pci_num_prd = numPrd;
 10227                        ;   * (unsigned long *) (pio_bmide_base_addr + BM_
                    PRD_ADDR_LOW )
 10228                        ;      = (unsigned long) prdBufPtr;
 10229                        ;
 10230                        ;   // set the read/write control:
 10231                        ;   // PCI reads for ATA Write DMA commands,
 10232                        ;   // PCI writes for ATA Read DMA commands.
 10233                        ;
 10234                        ;   if ( dir )
 10235                        ;      rwControl = BM_CR_MASK_READ;     // ATA Wri
                    te DMA
 10236                        ;   else
 10237                        ;      rwControl = BM_CR_MASK_WRITE;    // ATA Rea
                    d DMA
 10238                        ;   pio_writeBusMstrCmd( rwControl );
 10239                        ;   return 0;
 10240                        ;}
 10241                        ;
 10242                        ;//***********************************************
                    ************
 10243                        ;//
 10244                        ;// exec_pci_ata_cmd() - PCI Bus Master for ATA R/
                    W DMA commands
 10245                        ;//
 10246                        ;//***********************************************
                    ************
 10247                        ;
 10248                        ;static int exec_pci_ata_cmd( unsigned char dev,
 10249                        ;                             unsigned char * bufA
                    ddr,
 10250                        ;                             long numSect );
 10251                        ;
 10252                        ;static int exec_pci_ata_cmd( unsigned char dev,
 10253                        ;                             unsigned char * bufA
                    ddr,
 10254                        ;                             long numSect )
 10255                        ;
 10256                        ;{
 10257                        ;   unsigned char status;
 10258                        ;
 10259                        ;   // Quit now if the command is incorrect.
 10260                        ;
 10261                        ;   if (    ( reg_cmd_info.cmd != CMD_READ_DMA )
 10262                        ;        && ( reg_cmd_info.cmd != CMD_READ_DMA_EXT
                     )
 10263                        ;        && ( reg_cmd_info.cmd != CMD_WRITE_DMA )
 10264                        ;        && ( reg_cmd_info.cmd != CMD_WRITE_DMA_EX
                    T ) )
 10265                        ;   {
 10266                        ;      reg_cmd_info.ec = 77;
 10267                        ;      return 1;
 10268                        ;   }
  Thu Jul 29 2021 11:55                                                Page 195


 10269                        ;
 10270                        ;   // Set up the dma transfer
 10271                        ;
 10272                        ;   if ( set_up_xfer( ( reg_cmd_info.cmd == CMD_WR
                    ITE_DMA )
 10273                        ;                     ||
 10274                        ;                     ( reg_cmd_info.cmd == CMD_WR
                    ITE_DMA_EXT ),
 10275                        ;                     numSect * 512L, bufAddr ) )
 10276                        ;   {
 10277                        ;      reg_cmd_info.ec = 61;
 10278                        ;      return 1;
 10279                        ;   }
 10280                        ;
 10281                        ;   // Set command time out.
 10282                        ;
 10283                        ;   tmr_set_timeout();
 10284                        ;
 10285                        ;   // Select the drive - call the sub_select func
                    tion.
 10286                        ;   // Quit now if this fails.
 10287                        ;
 10288                        ;   if ( sub_select( dev ) )
 10289                        ;   {
 10290                        ;      return 1;
 10291                        ;   }
 10292                        ;
 10293                        ;   // Set up all the registers except the command
                     register.
 10294                        ;
 10295                        ;   sub_setup_command();
 10296                        ;
 10297                        ;   // Start the command by setting the Command re
                    gister.  The drive
 10298                        ;   // should immediately set BUSY status.
 10299                        ;
 10300                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
 10301                        ;
 10302                        ;   // The drive should start executing the comman
                    d including any
 10303                        ;   // data transfer.
 10304                        ;
 10305                        ;   // Data transfer...
 10306                        ;   // read the BMIDE regs
 10307                        ;   // enable/start the dma channel.
 10308                        ;   // read the BMIDE regs again
 10309                        ;
 10310                        ;   pio_readBusMstrCmd();
 10311                        ;   pio_readBusMstrStatus();
 10312                        ;   pio_writeBusMstrCmd( (unsigned char) ( rwContr
                    ol | BM_CR_MASK_START ) );
 10313                        ;   pio_readBusMstrCmd();
 10314                        ;   pio_readBusMstrStatus();
 10315                        ;
 10316                        ;   // Data transfer...
 10317                        ;   // the device and dma channel transfer the dat
                    a here while we start
 10318                        ;   // checking for command completion...
  Thu Jul 29 2021 11:55                                                Page 196


 10319                        ;   // wait for the PCI BM Interrupt=1 (see ATAIOI
                    NT.C)...
 10320                        ;
 10321                        ;   if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )       // 
                    time out ?
 10322                        ;   {
 10323                        ;      reg_cmd_info.to = 1;
 10324                        ;      reg_cmd_info.ec = 73;
 10325                        ;   }
 10326                        ;
 10327                        ;   // End of command...
 10328                        ;   // disable/stop the dma channel
 10329                        ;
 10330                        ;   status = int_bmide_status;                // r
                    ead BM status
 10331                        ;   status &= ~ BM_SR_MASK_ACT;            // igno
                    re Active bit
 10332                        ;   pio_writeBusMstrCmd( BM_CR_MASK_STOP );    // 
                    shutdown DMA
 10333                        ;   pio_readBusMstrCmd();                      // 
                    read BM cmd (just for trace)
 10334                        ;   status |= pio_readBusMstrStatus();         // 
                    read BM status again
 10335                        ;
 10336                        ;   if ( reg_cmd_info.ec == 0 )
 10337                        ;   {
 10338                        ;      if ( status & BM_SR_MASK_ERR )            /
                    / bus master error?
 10339                        ;      {
 10340                        ;         reg_cmd_info.ec = 78;                  /
                    / yes
 10341                        ;      }
 10342                        ;   }
 10343                        ;   if ( reg_cmd_info.ec == 0 )
 10344                        ;   {
 10345                        ;      if ( status & BM_SR_MASK_ACT )            /
                    / end of PRD list?
 10346                        ;      {
 10347                        ;         reg_cmd_info.ec = 71;                  /
                    / no
 10348                        ;      }
 10349                        ;   }
 10350                        ;
 10351                        ;   // End of command...
 10352                        ;   // If no error use the Status register value t
                    hat was read
 10353                        ;   // by the interrupt handler. If there was an e
                    rror
 10354                        ;   // read the Status register because it may not
                     have been
 10355                        ;   // read by the interrupt handler.
 10356                        ;
 10357                        ;   if ( reg_cmd_info.ec )
 10358                        ;      status = pio_inbyte( CB_STAT );
 10359                        ;   else
 10360                        ;      status = int_ata_status;
 10361                        ;
 10362                        ;   // Final status check...
  Thu Jul 29 2021 11:55                                                Page 197


 10363                        ;   // if no error, check final status...
 10364                        ;   // Error if BUSY, DEVICE FAULT, DRQ or ERROR s
                    tatus now.
 10365                        ;
 10366                        ;   if ( reg_cmd_info.ec == 0 )
 10367                        ;   {
 10368                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_DRQ | CB_STAT_ERR ) )
 10369                        ;      {
 10370                        ;         reg_cmd_info.ec = 74;
 10371                        ;      }
 10372                        ;   }
 10373                        ;
 10374                        ;   // Final status check...
 10375                        ;   // if any error, update total bytes transferre
                    d.
 10376                        ;
 10377                        ;   if ( reg_cmd_info.ec == 0 )
 10378                        ;      reg_cmd_info.totalBytesXfer = numSect * 512
                    L;
 10379                        ;   else
 10380                        ;      reg_cmd_info.totalBytesXfer = 0L;
 10381                        ;
 10382                        ;   // All done.  The return values of this functi
                    on are described in
 10383                        ;   // MINDRVR.H.
 10384                        ;
 10385                        ;   if ( reg_cmd_info.ec )
 10386                        ;      return 1;
 10387                        ;   return 0;
 10388                        ;}
 10389                        ;
 10390                        ;//***********************************************
                    ************
 10391                        ;//
 10392                        ;// dma_pci_lba28() - DMA in PCI Multiword for ATA
                     R/W DMA
 10393                        ;//
 10394                        ;//***********************************************
                    ************
 10395                        ;
 10396                        ;int dma_pci_lba28( unsigned char dev, unsigned ch
                    ar cmd,
 10397                        ;                   unsigned int fr, unsigned int 
                    sc,
 10398                        ;                   unsigned long lba,
 10399                        ;                   unsigned char * bufAddr,
 10400                        ;                   long numSect )
 10401                        ;
 10402                        ;{
 10403                        ;
 10404                        ;   // Setup current command information.
 10405                        ;
 10406                        ;   reg_cmd_info.cmd = cmd;
 10407                        ;   reg_cmd_info.fr = fr;
 10408                        ;   reg_cmd_info.sc = sc;
 10409                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  Thu Jul 29 2021 11:55                                                Page 198


 10410                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10411                        ;   reg_cmd_info.ns  = numSect;
 10412                        ;   reg_cmd_info.lbaSize = LBA28;
 10413                        ;   reg_cmd_info.lbaHigh = 0L;
 10414                        ;   reg_cmd_info.lbaLow = lba;
 10415                        ;
 10416                        ;   // Execute the command.
 10417                        ;
 10418                        ;   return exec_pci_ata_cmd( dev, bufAddr, numSect
                     );
 10419                        ;}
 10420                        ;
 10421                        ;//***********************************************
                    ************
 10422                        ;//
 10423                        ;// dma_pci_lba48() - DMA in PCI Multiword for ATA
                     R/W DMA
 10424                        ;//
 10425                        ;//***********************************************
                    ************
 10426                        ;
 10427                        ;int dma_pci_lba48( unsigned char dev, unsigned ch
                    ar cmd,
 10428                        ;                   unsigned int fr, unsigned int 
                    sc,
 10429                        ;                   unsigned long lbahi, unsigned 
                    long lbalo,
 10430                        ;                   unsigned char * bufAddr,
 10431                        ;                   long numSect )
 10432                        ;
 10433                        ;{
 10434                        ;
 10435                        ;   // Setup current command information.
 10436                        ;
 10437                        ;   reg_cmd_info.cmd = cmd;
 10438                        ;   reg_cmd_info.fr = fr;
 10439                        ;   reg_cmd_info.sc = sc;
 10440                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
 10441                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10442                        ;   reg_cmd_info.ns  = numSect;
 10443                        ;   reg_cmd_info.lbaSize = LBA48;
 10444                        ;   reg_cmd_info.lbaHigh = lbahi;
 10445                        ;   reg_cmd_info.lbaLow = lbalo;
 10446                        ;
 10447                        ;   // Execute the command.
 10448                        ;
 10449                        ;   return exec_pci_ata_cmd( dev, bufAddr, numSect
                     );
 10450                        ;}
 10451                        ;
 10452                        ;#endif   // INCLUDE_ATA_DMA
 10453                        ;
 10454                        ;#ifdef INCLUDE_ATAPI_DMA
 10455                        ;
 10456                        ;//***********************************************
  Thu Jul 29 2021 11:55                                                Page 199


                    ************
 10457                        ;//
 10458                        ;// dma_pci_packet() - PCI Bus Master for ATAPI Pa
                    cket command
 10459                        ;//
 10460                        ;//***********************************************
                    ************
 10461                        ;
 10462                        ;int dma_pci_packet( unsigned char dev,
 10463                        ;                    unsigned int cpbc,
 10464                        ;                    unsigned char * cdbBufAddr,
 10465                        ;                    int dir,
 10466                        ;                    long dpbc,
 10467                        ;                    unsigned char * dataBufAddr )
 10468                        ;
 10469                        ;{
 10470                        ;   unsigned char status;
 10471                        ;
 10472                        ;   // Make sure the command packet size is either
                     12 or 16
 10473                        ;   // and save the command packet size and data.
 10474                        ;
 10475                        ;   cpbc = cpbc < 12 ? 12 : cpbc;
 10476                        ;   cpbc = cpbc > 12 ? 16 : cpbc;
 10477                        ;
 10478                        ;   // Setup current command information.
 10479                        ;
 10480                        ;   reg_cmd_info.cmd = CMD_PACKET;
 10481                        ;   reg_cmd_info.fr = 0x01;      // packet DMA mod
                    e !
 10482                        ;   reg_cmd_info.sc = 0;
 10483                        ;   reg_cmd_info.sn = 0;
 10484                        ;   reg_cmd_info.cl = 0;         // no Byte Count 
                    Limit in DMA !
 10485                        ;   reg_cmd_info.ch = 0;         // no Byte Count 
                    Limit in DMA !
 10486                        ;   reg_cmd_info.dh = (unsigned char) ( dev ? CB_D
                    H_DEV1 : CB_DH_DEV0 );
 10487                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10488                        ;
 10489                        ;   // the data packet byte count must be even
 10490                        ;   // and must not be zero
 10491                        ;
 10492                        ;   if ( dpbc & 1L )
 10493                        ;      dpbc ++ ;
 10494                        ;   if ( dpbc < 2L )
 10495                        ;      dpbc = 2L;
 10496                        ;
 10497                        ;   // Set up the dma transfer
 10498                        ;
 10499                        ;   if ( set_up_xfer( dir, dpbc, dataBufAddr ) )
 10500                        ;   {
 10501                        ;      reg_cmd_info.ec = 61;
 10502                        ;      return 1;
 10503                        ;   }
 10504                        ;
 10505                        ;   // Set command time out.
  Thu Jul 29 2021 11:55                                                Page 200


 10506                        ;
 10507                        ;   tmr_set_timeout();
 10508                        ;
 10509                        ;   // Select the drive - call the reg_select func
                    tion.
 10510                        ;   // Quit now if this fails.
 10511                        ;
 10512                        ;   if ( sub_select( dev ) )
 10513                        ;   {
 10514                        ;      return 1;
 10515                        ;   }
 10516                        ;
 10517                        ;   // Set up all the registers except the command
                     register.
 10518                        ;
 10519                        ;   sub_setup_command();
 10520                        ;
 10521                        ;   // Start the command by setting the Command re
                    gister.  The drive
 10522                        ;   // should immediately set BUSY status.
 10523                        ;
 10524                        ;   pio_outbyte( CB_CMD, CMD_PACKET );
 10525                        ;
 10526                        ;   // Waste some time by reading the alternate st
                    atus a few times.
 10527                        ;   // This gives the drive time to set BUSY in th
                    e status register on
 10528                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
 10529                        ;   // system may not set BUSY fast enough and we 
                    would think it had
 10530                        ;   // completed the command when it really had no
                    t started the
 10531                        ;   // command yet.
 10532                        ;
 10533                        ;   DELAY400NS;
 10534                        ;
 10535                        ;   // Command packet transfer...
 10536                        ;   // Poll Alternate Status for BSY=0.
 10537                        ;
 10538                        ;   while ( 1 )
 10539                        ;   {
 10540                        ;      status = pio_inbyte( CB_ASTAT );       // p
                    oll for not busy
 10541                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
 10542                        ;         break;
 10543                        ;      if ( tmr_chk_timeout() )               // t
                    ime out yet ?
 10544                        ;      {
 10545                        ;         reg_cmd_info.to = 1;
 10546                        ;         reg_cmd_info.ec = 75;
 10547                        ;         break;
 10548                        ;      }
 10549                        ;   }
 10550                        ;
 10551                        ;   // Command packet transfer...
 10552                        ;   // Check for protocol failures... no interrupt
                     here please!
  Thu Jul 29 2021 11:55                                                Page 201


 10553                        ;
 10554                        ;   // Command packet transfer...
 10555                        ;   // If no error, transfer the command packet.
 10556                        ;
 10557                        ;   if ( reg_cmd_info.ec == 0 )
 10558                        ;   {
 10559                        ;
 10560                        ;      // Command packet transfer...
 10561                        ;      // Read the primary status register and the
                     other ATAPI registers.
 10562                        ;
 10563                        ;      status = pio_inbyte( CB_STAT );
 10564                        ;
 10565                        ;      // Command packet transfer...
 10566                        ;      // check status: must have BSY=0, DRQ=1 now
 10567                        ;
 10568                        ;      if (    ( status & ( CB_STAT_BSY | CB_STAT_
                    DRQ | CB_STAT_ERR ) )
 10569                        ;           != CB_STAT_DRQ
 10570                        ;         )
 10571                        ;      {
 10572                        ;         reg_cmd_info.ec = 76;
 10573                        ;      }
 10574                        ;      else
 10575                        ;      {
 10576                        ;
 10577                        ;         // Command packet transfer...
 10578                        ;         // xfer the command packet (the cdb)
 10579                        ;
 10580                        ;         pio_drq_block_out( CB_DATA, cdbBufAddr, 
                    cpbc >> 1 );
 10581                        ;      }
 10582                        ;   }
 10583                        ;
 10584                        ;   // Data transfer...
 10585                        ;   // The drive should start executing the comman
                    d
 10586                        ;   // including any data transfer.
 10587                        ;   // If no error, set up and start the DMA,
 10588                        ;   // and wait for the DMA to complete.
 10589                        ;
 10590                        ;   if ( reg_cmd_info.ec == 0 )
 10591                        ;   {
 10592                        ;
 10593                        ;      // Data transfer...
 10594                        ;      // read the BMIDE regs
 10595                        ;      // enable/start the dma channel.
 10596                        ;      // read the BMIDE regs again
 10597                        ;
 10598                        ;      pio_readBusMstrCmd();
 10599                        ;      pio_readBusMstrStatus();
 10600                        ;      pio_writeBusMstrCmd( (unsigned char) ( rwCo
                    ntrol | BM_CR_MASK_START ) );
 10601                        ;      pio_readBusMstrCmd();
 10602                        ;      pio_readBusMstrStatus();
 10603                        ;
 10604                        ;      // Data transfer...
 10605                        ;      // the device and dma channel transfer the 
  Thu Jul 29 2021 11:55                                                Page 202


                    data here while we start
 10606                        ;      // checking for command completion...
 10607                        ;      // wait for the PCI BM Active=0 and Interru
                    pt=1 or PCI BM Error=1...
 10608                        ;
 10609                        ;      if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )    // 
                    time out ?
 10610                        ;      {
 10611                        ;         reg_cmd_info.to = 1;
 10612                        ;         reg_cmd_info.ec = 73;
 10613                        ;      }
 10614                        ;
 10615                        ;      // End of command...
 10616                        ;      // disable/stop the dma channel
 10617                        ;
 10618                        ;      status = int_bmide_status;                /
                    / read BM status
 10619                        ;      status &= ~ BM_SR_MASK_ACT;            // i
                    gnore Active bit
 10620                        ;      pio_writeBusMstrCmd( BM_CR_MASK_STOP );    
                    // shutdown DMA
 10621                        ;      pio_readBusMstrCmd();                      
                    // read BM cmd (just for trace)
 10622                        ;      status |= pio_readBusMstrStatus();         
                    // read BM statu again
 10623                        ;   }
 10624                        ;
 10625                        ;   if ( reg_cmd_info.ec == 0 )
 10626                        ;   {
 10627                        ;      if ( status & ( BM_SR_MASK_ERR ) )        /
                    / bus master error?
 10628                        ;      {
 10629                        ;         reg_cmd_info.ec = 78;                  /
                    / yes
 10630                        ;      }
 10631                        ;      if ( ( status & BM_SR_MASK_ACT ) )        /
                    / end of PRD list?
 10632                        ;      {
 10633                        ;         reg_cmd_info.ec = 71;                  /
                    / no
 10634                        ;      }
 10635                        ;   }
 10636                        ;
 10637                        ;   // End of command...
 10638                        ;   // If no error use the Status register value t
                    hat was read
 10639                        ;   // by the interrupt handler. If there was an e
                    rror
 10640                        ;   // read the Status register because it may not
                     have been
 10641                        ;   // read by the interrupt handler.
 10642                        ;
 10643                        ;   if ( reg_cmd_info.ec )
 10644                        ;      status = pio_inbyte( CB_STAT );
 10645                        ;   else
 10646                        ;      status = int_ata_status;
 10647                        ;
 10648                        ;   // Final status check...
  Thu Jul 29 2021 11:55                                                Page 203


 10649                        ;   // if no error, check final status...
 10650                        ;   // Error if BUSY, DRQ or ERROR status now.
 10651                        ;
 10652                        ;   if ( reg_cmd_info.ec == 0 )
 10653                        ;   {
 10654                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DRQ |
                     CB_STAT_ERR ) )
 10655                        ;      {
 10656                        ;         reg_cmd_info.ec = 74;
 10657                        ;      }
 10658                        ;   }
 10659                        ;
 10660                        ;
 10661                        ;   // Final status check...
 10662                        ;   // if any error, update total bytes transferre
                    d.
 10663                        ;
 10664                        ;   if ( reg_cmd_info.ec == 0 )
 10665                        ;      reg_cmd_info.totalBytesXfer = dpbc;
 10666                        ;   else
 10667                        ;      reg_cmd_info.totalBytesXfer = 0L;
 10668                        ;
 10669                        ;   // All done.  The return values of this functi
                    on are described in
 10670                        ;   // MINDRVR.H.
 10671                        ;
 10672                        ;   if ( reg_cmd_info.ec )
 10673                        ;      return 1;
 10674                        ;   return 0;
 10675                        ;}
 10676                        ;
 10677                        ;#endif   // INCLUDE_ATAPI_DMA
 10678                        ;
 10679                        ;//***********************************************
                    **************
 10680                        ;//
 10681                        ;// sub_setup_command() -- setup the command param
                    eters
 10682                        ;//                        in FR, SC, SN, CL, CH a
                    nd DH.
 10683                        ;//
 10684                        ;//***********************************************
                    **************
 10685                        ;
 10686                        ;static void sub_setup_command( void )
 10687                        ;
 10688                        ;{
 10689                        	.line	3150
 10690                        	.line	3152
 10691                        	FXHDD
 10692                        	func
 10693                        	.function	3152
 10694                        ~~sub_setup_command:
 10695                        	longa	on
 10696                        	longi	on
 10697 06:B269: 3B           	tsc
 10698 06:B26A: 38           	sec
 10699 06:B26B: E9 0C 00     	sbc	#L396
  Thu Jul 29 2021 11:55                                                Page 204


 10700 06:B26E: 1B           	tcs
 10701 06:B26F: 0B           	phd
 10702 06:B270: 5B           	tcd
 10703                        	.block	3152
 10704                        ;
 10705                        ;   // output DevCtrl - same for all devices and c
                    ommands
 10706                        ;   pio_outbyte( CB_DC, reg_cmd_info.dc );
 10707                        	.line	3155
 10708 06:B271: AD xx xx     	lda	|~~reg_cmd_info+12
 10709 06:B274: 48           	pha
 10710 06:B275: F4 08 00     	pea	#<$8
 10711 06:B278: 22 F0 B7 06  	jsl	~~pio_outbyte
 10712                        ;
 10713                        ;   // output command parameters
 10714                        ;   if ( reg_cmd_info.lbaSize == LBA28 )
 10715                        	.line	3158
 10716                        ;   {
 10717 06:B27C: E2 20        	sep	#$20
 10718                        	longa	off
 10719 06:B27E: AD xx xx     	lda	|~~reg_cmd_info+19
 10720 06:B281: C9 1C        	cmp	#<$1c
 10721 06:B283: C2 20        	rep	#$20
 10722                        	longa	on
 10723 06:B285: F0 03        	beq	L399
 10724 06:B287: 82 A1 00     	brl	L10165
 10725                        L399:
 10726                        	.line	3159
 10727                        ;      // in ATA LBA28 mode
 10728                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
                    _info.fr );
 10729                        	.line	3161
 10730 06:B28A: AD xx xx     	lda	|~~reg_cmd_info+1
 10731 06:B28D: 48           	pha
 10732 06:B28E: F4 01 00     	pea	#<$1
 10733 06:B291: 22 F0 B7 06  	jsl	~~pio_outbyte
 10734                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc );
 10735                        	.line	3162
 10736 06:B295: AD xx xx     	lda	|~~reg_cmd_info+3
 10737 06:B298: 48           	pha
 10738 06:B299: F4 02 00     	pea	#<$2
 10739 06:B29C: 22 F0 B7 06  	jsl	~~pio_outbyte
 10740                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.lbaLow );
 10741                        	.line	3163
 10742 06:B2A0: AD xx xx     	lda	|~~reg_cmd_info+20
 10743 06:B2A3: 48           	pha
 10744 06:B2A4: F4 03 00     	pea	#<$3
 10745 06:B2A7: 22 F0 B7 06  	jsl	~~pio_outbyte
 10746                        ;      pio_outbyte( CB_CL, (unsigned char) ( reg_c
                    md_info.lbaLow >> 8 ) );
 10747                        	.line	3164
 10748 06:B2AB: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10749 06:B2AE: 48           	pha
 10750 06:B2AF: AD xx xx     	lda	|~~reg_cmd_info+20
 10751 06:B2B2: 48           	pha
 10752 06:B2B3: A9 08 00     	lda	#$8
  Thu Jul 29 2021 11:55                                                Page 205


 10753                        	xref	~~~llsr
 10754 06:B2B6: 22 xx xx xx  	jsl	~~~llsr
 10755 06:B2BA: 85 01        	sta	<R0
 10756 06:B2BC: 86 03        	stx	<R0+2
 10757 06:B2BE: D4 01        	pei	<R0
 10758 06:B2C0: F4 04 00     	pea	#<$4
 10759 06:B2C3: 22 F0 B7 06  	jsl	~~pio_outbyte
 10760                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaLow >> 16 ) );
 10761                        	.line	3165
 10762 06:B2C7: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10763 06:B2CA: 48           	pha
 10764 06:B2CB: AD xx xx     	lda	|~~reg_cmd_info+20
 10765 06:B2CE: 48           	pha
 10766 06:B2CF: A9 10 00     	lda	#$10
 10767                        	xref	~~~llsr
 10768 06:B2D2: 22 xx xx xx  	jsl	~~~llsr
 10769 06:B2D6: 85 01        	sta	<R0
 10770 06:B2D8: 86 03        	stx	<R0+2
 10771 06:B2DA: D4 01        	pei	<R0
 10772 06:B2DC: F4 05 00     	pea	#<$5
 10773 06:B2DF: 22 F0 B7 06  	jsl	~~pio_outbyte
 10774                        ;      pio_outbyte( CB_DH, (unsigned char) ( ( reg
                    _cmd_info.dh & 0xf0 )
 10775                        	.line	3166
 10776                        ;                                            | ( (
                     reg_cmd_info.lbaLow >> 24 ) & 0x0f ) ) );
 10777 06:B2E3: AD xx xx     	lda	|~~reg_cmd_info+11
 10778 06:B2E6: 29 F0 00     	and	#<$f0
 10779 06:B2E9: 85 01        	sta	<R0
 10780 06:B2EB: A0 00 00     	ldy	#$0
 10781 06:B2EE: A5 01        	lda	<R0
 10782 06:B2F0: 10 01        	bpl	L400
 10783 06:B2F2: 88           	dey
 10784                        L400:
 10785 06:B2F3: 85 01        	sta	<R0
 10786 06:B2F5: 84 03        	sty	<R0+2
 10787 06:B2F7: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10788 06:B2FA: 48           	pha
 10789 06:B2FB: AD xx xx     	lda	|~~reg_cmd_info+20
 10790 06:B2FE: 48           	pha
 10791 06:B2FF: A9 18 00     	lda	#$18
 10792                        	xref	~~~llsr
 10793 06:B302: 22 xx xx xx  	jsl	~~~llsr
 10794 06:B306: 85 05        	sta	<R1
 10795 06:B308: 86 07        	stx	<R1+2
 10796 06:B30A: A5 05        	lda	<R1
 10797 06:B30C: 29 0F 00     	and	#<$f
 10798 06:B30F: 85 09        	sta	<R2
 10799 06:B311: 64 0B        	stz	<R2+2
 10800 06:B313: A5 09        	lda	<R2
 10801 06:B315: 05 01        	ora	<R0
 10802 06:B317: 85 05        	sta	<R1
 10803 06:B319: A5 0B        	lda	<R2+2
 10804 06:B31B: 05 03        	ora	<R0+2
 10805 06:B31D: 85 07        	sta	<R1+2
 10806 06:B31F: D4 05        	pei	<R1
 10807 06:B321: F4 06 00     	pea	#<$6
  Thu Jul 29 2021 11:55                                                Page 206


 10808 06:B324: 22 F0 B7 06  	jsl	~~pio_outbyte
 10809                        ;   }
 10810                        	.line	3168
 10811                        ;   else
 10812 06:B328: 82 18 01     	brl	L10166
 10813                        L10165:
 10814                        ;   if ( reg_cmd_info.lbaSize == LBA48 )
 10815                        	.line	3170
 10816                        ;   {
 10817 06:B32B: E2 20        	sep	#$20
 10818                        	longa	off
 10819 06:B32D: AD xx xx     	lda	|~~reg_cmd_info+19
 10820 06:B330: C9 30        	cmp	#<$30
 10821 06:B332: C2 20        	rep	#$20
 10822                        	longa	on
 10823 06:B334: F0 03        	beq	L401
 10824 06:B336: 82 C8 00     	brl	L10167
 10825                        L401:
 10826                        	.line	3171
 10827                        ;      // in ATA LBA48 mode
 10828                        ;      pio_outbyte( CB_FR, (unsigned char) ( reg_c
                    md_info.fr >> 8 ) );
 10829                        	.line	3173
 10830 06:B339: AD xx xx     	lda	|~~reg_cmd_info+1
 10831 06:B33C: EB           	xba
 10832 06:B33D: 29 FF 00     	and	#$00ff
 10833 06:B340: 48           	pha
 10834 06:B341: F4 01 00     	pea	#<$1
 10835 06:B344: 22 F0 B7 06  	jsl	~~pio_outbyte
 10836                        ;      pio_outbyte( CB_SC, (unsigned char) ( reg_c
                    md_info.sc >> 8 ) );
 10837                        	.line	3174
 10838 06:B348: AD xx xx     	lda	|~~reg_cmd_info+3
 10839 06:B34B: EB           	xba
 10840 06:B34C: 29 FF 00     	and	#$00ff
 10841 06:B34F: 48           	pha
 10842 06:B350: F4 02 00     	pea	#<$2
 10843 06:B353: 22 F0 B7 06  	jsl	~~pio_outbyte
 10844                        ;      pio_outbyte( CB_SN, (unsigned char) ( reg_c
                    md_info.lbaLow >> 24 ) );
 10845                        	.line	3175
 10846 06:B357: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10847 06:B35A: 48           	pha
 10848 06:B35B: AD xx xx     	lda	|~~reg_cmd_info+20
 10849 06:B35E: 48           	pha
 10850 06:B35F: A9 18 00     	lda	#$18
 10851                        	xref	~~~llsr
 10852 06:B362: 22 xx xx xx  	jsl	~~~llsr
 10853 06:B366: 85 01        	sta	<R0
 10854 06:B368: 86 03        	stx	<R0+2
 10855 06:B36A: D4 01        	pei	<R0
 10856 06:B36C: F4 03 00     	pea	#<$3
 10857 06:B36F: 22 F0 B7 06  	jsl	~~pio_outbyte
 10858                        ;      pio_outbyte( CB_CL, (unsigned char) reg_cmd
                    _info.lbaHigh );
 10859                        	.line	3176
 10860 06:B373: AD xx xx     	lda	|~~reg_cmd_info+24
 10861 06:B376: 48           	pha
  Thu Jul 29 2021 11:55                                                Page 207


 10862 06:B377: F4 04 00     	pea	#<$4
 10863 06:B37A: 22 F0 B7 06  	jsl	~~pio_outbyte
 10864                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaHigh >> 8 ) );
 10865                        	.line	3177
 10866 06:B37E: AD xx xx     	lda	|~~reg_cmd_info+24+2
 10867 06:B381: 48           	pha
 10868 06:B382: AD xx xx     	lda	|~~reg_cmd_info+24
 10869 06:B385: 48           	pha
 10870 06:B386: A9 08 00     	lda	#$8
 10871                        	xref	~~~llsr
 10872 06:B389: 22 xx xx xx  	jsl	~~~llsr
 10873 06:B38D: 85 01        	sta	<R0
 10874 06:B38F: 86 03        	stx	<R0+2
 10875 06:B391: D4 01        	pei	<R0
 10876 06:B393: F4 05 00     	pea	#<$5
 10877 06:B396: 22 F0 B7 06  	jsl	~~pio_outbyte
 10878                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
                    _info.fr );
 10879                        	.line	3178
 10880 06:B39A: AD xx xx     	lda	|~~reg_cmd_info+1
 10881 06:B39D: 48           	pha
 10882 06:B39E: F4 01 00     	pea	#<$1
 10883 06:B3A1: 22 F0 B7 06  	jsl	~~pio_outbyte
 10884                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc );
 10885                        	.line	3179
 10886 06:B3A5: AD xx xx     	lda	|~~reg_cmd_info+3
 10887 06:B3A8: 48           	pha
 10888 06:B3A9: F4 02 00     	pea	#<$2
 10889 06:B3AC: 22 F0 B7 06  	jsl	~~pio_outbyte
 10890                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.lbaLow );
 10891                        	.line	3180
 10892 06:B3B0: AD xx xx     	lda	|~~reg_cmd_info+20
 10893 06:B3B3: 48           	pha
 10894 06:B3B4: F4 03 00     	pea	#<$3
 10895 06:B3B7: 22 F0 B7 06  	jsl	~~pio_outbyte
 10896                        ;      pio_outbyte( CB_CL, (unsigned char) ( reg_c
                    md_info.lbaLow >> 8 ) );
 10897                        	.line	3181
 10898 06:B3BB: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10899 06:B3BE: 48           	pha
 10900 06:B3BF: AD xx xx     	lda	|~~reg_cmd_info+20
 10901 06:B3C2: 48           	pha
 10902 06:B3C3: A9 08 00     	lda	#$8
 10903                        	xref	~~~llsr
 10904 06:B3C6: 22 xx xx xx  	jsl	~~~llsr
 10905 06:B3CA: 85 01        	sta	<R0
 10906 06:B3CC: 86 03        	stx	<R0+2
 10907 06:B3CE: D4 01        	pei	<R0
 10908 06:B3D0: F4 04 00     	pea	#<$4
 10909 06:B3D3: 22 F0 B7 06  	jsl	~~pio_outbyte
 10910                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaLow >> 16 ) );
 10911                        	.line	3182
 10912 06:B3D7: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10913 06:B3DA: 48           	pha
  Thu Jul 29 2021 11:55                                                Page 208


 10914 06:B3DB: AD xx xx     	lda	|~~reg_cmd_info+20
 10915 06:B3DE: 48           	pha
 10916 06:B3DF: A9 10 00     	lda	#$10
 10917                        	xref	~~~llsr
 10918 06:B3E2: 22 xx xx xx  	jsl	~~~llsr
 10919 06:B3E6: 85 01        	sta	<R0
 10920 06:B3E8: 86 03        	stx	<R0+2
 10921 06:B3EA: D4 01        	pei	<R0
 10922 06:B3EC: F4 05 00     	pea	#<$5
 10923 06:B3EF: 22 F0 B7 06  	jsl	~~pio_outbyte
 10924                        ;      pio_outbyte( CB_DH, reg_cmd_info.dh  );
 10925                        	.line	3183
 10926 06:B3F3: AD xx xx     	lda	|~~reg_cmd_info+11
 10927 06:B3F6: 48           	pha
 10928 06:B3F7: F4 06 00     	pea	#<$6
 10929 06:B3FA: 22 F0 B7 06  	jsl	~~pio_outbyte
 10930                        ;   }
 10931                        	.line	3184
 10932                        ;   else
 10933 06:B3FE: 82 42 00     	brl	L10168
 10934                        L10167:
 10935                        ;   {
 10936                        	.line	3186
 10937                        ;      // for ATAPI PACKET command
 10938                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
                    _info.fr  );
 10939                        	.line	3188
 10940 06:B401: AD xx xx     	lda	|~~reg_cmd_info+1
 10941 06:B404: 48           	pha
 10942 06:B405: F4 01 00     	pea	#<$1
 10943 06:B408: 22 F0 B7 06  	jsl	~~pio_outbyte
 10944                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc  );
 10945                        	.line	3189
 10946 06:B40C: AD xx xx     	lda	|~~reg_cmd_info+3
 10947 06:B40F: 48           	pha
 10948 06:B410: F4 02 00     	pea	#<$2
 10949 06:B413: 22 F0 B7 06  	jsl	~~pio_outbyte
 10950                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.sn  );
 10951                        	.line	3190
 10952 06:B417: AD xx xx     	lda	|~~reg_cmd_info+5
 10953 06:B41A: 48           	pha
 10954 06:B41B: F4 03 00     	pea	#<$3
 10955 06:B41E: 22 F0 B7 06  	jsl	~~pio_outbyte
 10956                        ;      pio_outbyte( CB_CL, (unsigned char) reg_cmd
                    _info.cl  );
 10957                        	.line	3191
 10958 06:B422: AD xx xx     	lda	|~~reg_cmd_info+7
 10959 06:B425: 48           	pha
 10960 06:B426: F4 04 00     	pea	#<$4
 10961 06:B429: 22 F0 B7 06  	jsl	~~pio_outbyte
 10962                        ;      pio_outbyte( CB_CH, (unsigned char) reg_cmd
                    _info.ch  );
 10963                        	.line	3192
 10964 06:B42D: AD xx xx     	lda	|~~reg_cmd_info+9
 10965 06:B430: 48           	pha
 10966 06:B431: F4 05 00     	pea	#<$5
  Thu Jul 29 2021 11:55                                                Page 209


 10967 06:B434: 22 F0 B7 06  	jsl	~~pio_outbyte
 10968                        ;      pio_outbyte( CB_DH, reg_cmd_info.dh  );
 10969                        	.line	3193
 10970 06:B438: AD xx xx     	lda	|~~reg_cmd_info+11
 10971 06:B43B: 48           	pha
 10972 06:B43C: F4 06 00     	pea	#<$6
 10973 06:B43F: 22 F0 B7 06  	jsl	~~pio_outbyte
 10974                        ;   }
 10975                        	.line	3194
 10976                        L10168:
 10977                        L10166:
 10978                        ;}
 10979                        	.line	3195
 10980                        L402:
 10981 06:B443: 2B           	pld
 10982 06:B444: 3B           	tsc
 10983 06:B445: 18           	clc
 10984 06:B446: 69 0C 00     	adc	#L396
 10985 06:B449: 1B           	tcs
 10986 06:B44A: 6B           	rtl
 10987                        	.endblock	3195
 10988             0000000C   L396	equ	12
 10989             0000000D   L397	equ	13
 10990 06:B44B:              	ends
 10991                        	efunc
 10992                        	.endfunc	3195,13,12
 10993                        	.line	3195
 10994                        ;
 10995                        ;//***********************************************
                    **************
 10996                        ;//
 10997                        ;// sub_trace_command() -- trace the end of a comm
                    and.
 10998                        ;//
 10999                        ;//***********************************************
                    **************
 11000                        ;
 11001                        ;static void sub_trace_command( void )
 11002                        ;
 11003                        ;{
 11004                        	.line	3203
 11005                        	.line	3205
 11006                        	FXHDD
 11007                        	func
 11008                        	.function	3205
 11009                        ~~sub_trace_command:
 11010                        	longa	on
 11011                        	longi	on
 11012 06:B44B: 3B           	tsc
 11013 06:B44C: 38           	sec
 11014 06:B44D: E9 00 00     	sbc	#L403
 11015 06:B450: 1B           	tcs
 11016 06:B451: 0B           	phd
 11017 06:B452: 5B           	tcd
 11018                        	.block	3205
 11019                        ;
 11020                        ;   reg_cmd_info.st = pio_inbyte( CB_STAT );
 11021                        	.line	3207
  Thu Jul 29 2021 11:55                                                Page 210


 11022 06:B453: F4 07 00     	pea	#<$7
 11023 06:B456: 22 B1 B7 06  	jsl	~~pio_inbyte
 11024 06:B45A: E2 20        	sep	#$20
 11025                        	longa	off
 11026 06:B45C: 8D xx xx     	sta	|~~reg_cmd_info+28
 11027 06:B45F: C2 20        	rep	#$20
 11028                        	longa	on
 11029                        ;   reg_cmd_info.as = pio_inbyte( CB_ASTAT );
 11030                        	.line	3208
 11031 06:B461: F4 08 00     	pea	#<$8
 11032 06:B464: 22 B1 B7 06  	jsl	~~pio_inbyte
 11033 06:B468: E2 20        	sep	#$20
 11034                        	longa	off
 11035 06:B46A: 8D xx xx     	sta	|~~reg_cmd_info+29
 11036 06:B46D: C2 20        	rep	#$20
 11037                        	longa	on
 11038                        ;   reg_cmd_info.er = pio_inbyte( CB_ERR );
 11039                        	.line	3209
 11040 06:B46F: F4 01 00     	pea	#<$1
 11041 06:B472: 22 B1 B7 06  	jsl	~~pio_inbyte
 11042 06:B476: E2 20        	sep	#$20
 11043                        	longa	off
 11044 06:B478: 8D xx xx     	sta	|~~reg_cmd_info+30
 11045 06:B47B: C2 20        	rep	#$20
 11046                        	longa	on
 11047                        ;
 11048                        ;
 11049                        ;   k_debug_hex("reg_cmd_info.st:",reg_cmd_info.st
                    );
 11050                        	.line	3212
 11051 06:B47D: AD xx xx     	lda	|~~reg_cmd_info+28
 11052 06:B480: 48           	pha
 11053 06:B481: F4 xx xx     	pea	#^L199
 11054 06:B484: F4 xx xx     	pea	#<L199
 11055 06:B487: 22 xx xx xx  	jsl	~~k_debug_hex
 11056                        ;   k_debug_hex("reg_cmd_info.as:",reg_cmd_info.as
                    );
 11057                        	.line	3213
 11058 06:B48B: AD xx xx     	lda	|~~reg_cmd_info+29
 11059 06:B48E: 48           	pha
 11060 06:B48F: F4 xx xx     	pea	#^L199+17
 11061 06:B492: F4 xx xx     	pea	#<L199+17
 11062 06:B495: 22 xx xx xx  	jsl	~~k_debug_hex
 11063                        ;   k_debug_hex("reg_cmd_info.er:",reg_cmd_info.er
                    );
 11064                        	.line	3214
 11065 06:B499: AD xx xx     	lda	|~~reg_cmd_info+30
 11066 06:B49C: 48           	pha
 11067 06:B49D: F4 xx xx     	pea	#^L199+34
 11068 06:B4A0: F4 xx xx     	pea	#<L199+34
 11069 06:B4A3: 22 xx xx xx  	jsl	~~k_debug_hex
 11070                        ;
 11071                        ;
 11072                        ;// !!! if you want to read back the other device 
                    registers
 11073                        ;// !!! at the end of a command then this is the p
                    lace to do
 11074                        ;// !!! it. The code here is just and example of o
  Thu Jul 29 2021 11:55                                                Page 211


                    ut this is
 11075                        ;// !!! done on a little endian system like an x86
                    .
 11076                        ;
 11077                        ;#ifdef ENABLE_READBACK    // read back other regi
                    sters
 11078                        ;
 11079                        ;   {
 11080                        ;      unsigned long lbaHigh;
 11081                        ;      unsigned long lbaLow;
 11082                        ;      unsigned char sc48[2];
 11083                        ;      unsigned char lba48[8];
 11084                        ;
 11085                        ;      lbaHigh = 0;
 11086                        ;      lbaLow = 0;
 11087                        ;      if ( reg_cmd_info.lbaSize == LBA48 )
 11088                        ;      {
 11089                        ;         // read back ATA LBA48...
 11090                        ;         sc48[0]  = pio_inbyte( CB_SC );
 11091                        ;         lba48[0] = pio_inbyte( CB_SN );
 11092                        ;         lba48[1] = pio_inbyte( CB_CL );
 11093                        ;         lba48[2] = pio_inbyte( CB_CH );
 11094                        ;         pio_outbyte( CB_DC, CB_DC_HOB );
 11095                        ;         sc48[1]  = pio_inbyte( CB_SC );
 11096                        ;         lba48[3] = pio_inbyte( CB_SN );
 11097                        ;         lba48[4] = pio_inbyte( CB_CL );
 11098                        ;         lba48[5] = pio_inbyte( CB_CH );
 11099                        ;         lba48[6] = 0;
 11100                        ;         lba48[7] = 0;
 11101                        ;         lbaHigh = * (unsigned long *) ( lba48 + 
                    4 );
 11102                        ;         lbaLow  = * (unsigned long *) ( lba48 + 
                    0 );
 11103                        ;      }
 11104                        ;      else
 11105                        ;      if ( reg_cmd_info.lbaSize == LBA28 )
 11106                        ;      {
 11107                        ;         // read back ATA LBA28
 11108                        ;         lbaLow = pio_inbyte( CB_DH );
 11109                        ;         lbaLow = lbaLow << 8;
 11110                        ;         lbaLow = lbaLow | pio_inbyte( CB_CH );
 11111                        ;         lbaLow = lbaLow << 8;
 11112                        ;         lbaLow = lbaLow | pio_inbyte( CB_CL );
 11113                        ;         lbaLow = lbaLow << 8;
 11114                        ;         lbaLow = lbaLow | pio_inbyte( CB_SN );
 11115                        ;      }
 11116                        ;      else
 11117                        ;      {
 11118                        ;         // really no reason to read back for ATA
                    PI
 11119                        ;      }
 11120                        ;   }
 11121                        ;
 11122                        ;#endif   // read back other registers
 11123                        ;
 11124                        ;}
 11125                        	.line	3269
 11126                        L406:
  Thu Jul 29 2021 11:55                                                Page 212


 11127 06:B4A7: 2B           	pld
 11128 06:B4A8: 3B           	tsc
 11129 06:B4A9: 18           	clc
 11130 06:B4AA: 69 00 00     	adc	#L403
 11131 06:B4AD: 1B           	tcs
 11132 06:B4AE: 6B           	rtl
 11133                        	.endblock	3269
 11134             00000000   L403	equ	0
 11135             00000001   L404	equ	1
 11136 06:B4AF:              	ends
 11137                        	efunc
 11138                        	.endfunc	3269,1,0
 11139                        	.line	3269
 11140                        	data
 11141                        L199:
 11142 00:0416: 72 65 67 5F  	db	$72,$65,$67,$5F,$63,$6D,$64,$5F,$69,$6E,
                    $66,$6F,$2E,$73,$74
       00:041A: 63 6D 64 5F 
       00:041E: 69 6E 66 6F 
       00:0422: 2E 73 74 
 11143 00:0425: 3A 00 72 65  	db	$3A,$00,$72,$65,$67,$5F,$63,$6D,$64,$5F,
                    $69,$6E,$66,$6F,$2E
       00:0429: 67 5F 63 6D 
       00:042D: 64 5F 69 6E 
       00:0431: 66 6F 2E 
 11144 00:0434: 61 73 3A 00  	db	$61,$73,$3A,$00,$72,$65,$67,$5F,$63,$6D,
                    $64,$5F,$69,$6E,$66
       00:0438: 72 65 67 5F 
       00:043C: 63 6D 64 5F 
       00:0440: 69 6E 66 
 11145 00:0443: 6F 2E 65 72  	db	$6F,$2E,$65,$72,$3A,$00
       00:0447: 3A 00 
 11146 00:0449:              	ends
 11147                        ;
 11148                        ;//***********************************************
                    **************
 11149                        ;//
 11150                        ;// sub_select() - function used to select a drive
                    .
 11151                        ;//
 11152                        ;// Function to select a drive making sure that BS
                    Y=0 and DRQ=0.
 11153                        ;//
 11154                        ;//***********************************************
                    ***************
 11155                        ;
 11156                        ;static int sub_select( unsigned char dev )
 11157                        ;
 11158                        ;{
 11159                        	.line	3279
 11160                        	.line	3281
 11161                        	FXHDD
 11162                        	func
 11163                        	.function	3281
 11164                        ~~sub_select:
 11165                        	longa	on
 11166                        	longi	on
 11167 06:B4AF: 3B           	tsc
  Thu Jul 29 2021 11:55                                                Page 213


 11168 06:B4B0: 38           	sec
 11169 06:B4B1: E9 09 00     	sbc	#L408
 11170 06:B4B4: 1B           	tcs
 11171 06:B4B5: 0B           	phd
 11172 06:B4B6: 5B           	tcd
 11173             00000004   dev_0	set	4
 11174                        	.block	3281
 11175                        ;   unsigned char status;
 11176                        ;
 11177                        ;   // PAY ATTENTION HERE
 11178                        ;   // The caller may want to issue a command to a
                     device that doesn't
 11179                        ;   // exist (for example, Exec Dev Diag), so if w
                    e see this,
 11180                        ;   // just select that device, skip all status ch
                    ecking and return.
 11181                        ;   // We assume the caller knows what they are do
                    ing!
 11182                        ;
 11183                        ;   if ( reg_config_info[dev] < REG_CONFIG_TYPE_AT
                    A )
 11184             00000000   status_1	set	0
 11185                        	.sym	status,0,14,1,8
 11186                        	.sym	dev,4,14,6,8
 11187                        	.line	3290
 11188                        ;   {
 11189 06:B4B7: A5 0D        	lda	<L408+dev_0
 11190 06:B4B9: 29 FF 00     	and	#$ff
 11191 06:B4BC: 85 05        	sta	<R1
 11192 06:B4BE: A5 05        	lda	<R1
 11193 06:B4C0: 0A           	asl	A
 11194 06:B4C1: 85 01        	sta	<R0
 11195 06:B4C3: A6 01        	ldx	<R0
 11196 06:B4C5: BD xx xx     	lda	|~~reg_config_info,X
 11197 06:B4C8: 30 07        	bmi	L411
 11198 06:B4CA: 3A           	dea
 11199 06:B4CB: 3A           	dea
 11200 06:B4CC: 30 03        	bmi	L411
 11201 06:B4CE: 82 52 00     	brl	L10169
 11202                        L411:
 11203                        	.line	3291
 11204                        ;      // select the device and return
 11205                        ;
 11206                        ;      pio_outbyte( CB_DH, (unsigned char) ( dev ?
                     CB_DH_DEV1 : CB_DH_DEV0 ) );
 11207                        	.line	3294
 11208 06:B4D1: A5 0D        	lda	<L408+dev_0
 11209 06:B4D3: 29 FF 00     	and	#$ff
 11210 06:B4D6: D0 03        	bne	L413
 11211 06:B4D8: 82 05 00     	brl	L412
 11212                        L413:
 11213 06:B4DB: A9 10 00     	lda	#$10
 11214 06:B4DE: 80 03        	bra	L414
 11215                        L412:
 11216 06:B4E0: A9 00 00     	lda	#$0
 11217                        L414:
 11218 06:B4E3: 48           	pha
 11219 06:B4E4: F4 06 00     	pea	#<$6
  Thu Jul 29 2021 11:55                                                Page 214


 11220 06:B4E7: 22 F0 B7 06  	jsl	~~pio_outbyte
 11221                        ;      DELAY400NS;
 11222                        	.line	3295
 11223                        	.line	3295
 11224 06:B4EB: F4 08 00     	pea	#<$8
 11225 06:B4EE: 22 B1 B7 06  	jsl	~~pio_inbyte
 11226                        	.line	3295
 11227 06:B4F2: F4 08 00     	pea	#<$8
 11228 06:B4F5: 22 B1 B7 06  	jsl	~~pio_inbyte
 11229                        	.line	3295
 11230 06:B4F9: F4 08 00     	pea	#<$8
 11231 06:B4FC: 22 B1 B7 06  	jsl	~~pio_inbyte
 11232                        	.line	3295
 11233 06:B500: F4 08 00     	pea	#<$8
 11234 06:B503: 22 B1 B7 06  	jsl	~~pio_inbyte
 11235                        	.line	3295
 11236 06:B507: F4 08 00     	pea	#<$8
 11237 06:B50A: 22 B1 B7 06  	jsl	~~pio_inbyte
 11238                        	.line	3295
 11239                        	.line	3295
 11240                        ;      return 0;
 11241                        	.line	3296
 11242 06:B50E: A9 00 00     	lda	#$0
 11243                        L415:
 11244 06:B511: A8           	tay
 11245 06:B512: A5 0B        	lda	<L408+2
 11246 06:B514: 85 0D        	sta	<L408+2+2
 11247 06:B516: A5 0A        	lda	<L408+1
 11248 06:B518: 85 0C        	sta	<L408+1+2
 11249 06:B51A: 2B           	pld
 11250 06:B51B: 3B           	tsc
 11251 06:B51C: 18           	clc
 11252 06:B51D: 69 0B 00     	adc	#L408+2
 11253 06:B520: 1B           	tcs
 11254 06:B521: 98           	tya
 11255 06:B522: 6B           	rtl
 11256                        ;   }
 11257                        	.line	3297
 11258                        ;
 11259                        ;   // The rest of this is the normal ATA stuff fo
                    r device selection
 11260                        ;   // and we don't expect the caller to be select
                    ing a device that
 11261                        ;   // does not exist.
 11262                        ;   // We don't know which drive is currently sele
                    cted but we should
 11263                        ;   // wait BSY=0 and DRQ=0. Normally both BSY=0 a
                    nd DRQ=0
 11264                        ;   // unless something is very wrong!
 11265                        ;
 11266                        ;   while ( 1 )
 11267                        L10169:
 11268                        	.line	3306
 11269                        L10170:
 11270                        ;   {
 11271                        	.line	3307
 11272                        ;      status = pio_inbyte( CB_STAT );
 11273                        	.line	3308
  Thu Jul 29 2021 11:55                                                Page 215


 11274 06:B523: F4 07 00     	pea	#<$7
 11275 06:B526: 22 B1 B7 06  	jsl	~~pio_inbyte
 11276 06:B52A: E2 20        	sep	#$20
 11277                        	longa	off
 11278 06:B52C: 85 09        	sta	<L409+status_1
 11279 06:B52E: C2 20        	rep	#$20
 11280                        	longa	on
 11281                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
 11282                        	.line	3309
 11283                        ;         break;
 11284 06:B530: E2 20        	sep	#$20
 11285                        	longa	off
 11286 06:B532: A5 09        	lda	<L409+status_1
 11287 06:B534: 29 88        	and	#<$88
 11288 06:B536: C2 20        	rep	#$20
 11289                        	longa	on
 11290 06:B538: D0 03        	bne	L416
 11291 06:B53A: 82 4A 00     	brl	L10171
 11292                        L416:
 11293                        ;      if ( tmr_chk_timeout() )
 11294                        	.line	3311
 11295                        ;      {
 11296 06:B53D: 22 28 BD 06  	jsl	~~tmr_chk_timeout
 11297 06:B541: AA           	tax
 11298 06:B542: D0 03        	bne	L417
 11299 06:B544: 82 3D 00     	brl	L10172
 11300                        L417:
 11301                        	.line	3312
 11302                        ;         reg_cmd_info.to = 1;
 11303                        	.line	3313
 11304 06:B547: E2 20        	sep	#$20
 11305                        	longa	off
 11306 06:B549: A9 01        	lda	#$1
 11307 06:B54B: 8D xx xx     	sta	|~~reg_cmd_info+32
 11308 06:B54E: C2 20        	rep	#$20
 11309                        	longa	on
 11310                        ;         reg_cmd_info.ec = 11;
 11311                        	.line	3314
 11312 06:B550: E2 20        	sep	#$20
 11313                        	longa	off
 11314 06:B552: A9 0B        	lda	#$b
 11315 06:B554: 8D xx xx     	sta	|~~reg_cmd_info+31
 11316 06:B557: C2 20        	rep	#$20
 11317                        	longa	on
 11318                        ;         reg_cmd_info.st = status;
 11319                        	.line	3315
 11320 06:B559: E2 20        	sep	#$20
 11321                        	longa	off
 11322 06:B55B: A5 09        	lda	<L409+status_1
 11323 06:B55D: 8D xx xx     	sta	|~~reg_cmd_info+28
 11324 06:B560: C2 20        	rep	#$20
 11325                        	longa	on
 11326                        ;         reg_cmd_info.as = pio_inbyte( CB_ASTAT )
                    ;
 11327                        	.line	3316
 11328 06:B562: F4 08 00     	pea	#<$8
 11329 06:B565: 22 B1 B7 06  	jsl	~~pio_inbyte
  Thu Jul 29 2021 11:55                                                Page 216


 11330 06:B569: E2 20        	sep	#$20
 11331                        	longa	off
 11332 06:B56B: 8D xx xx     	sta	|~~reg_cmd_info+29
 11333 06:B56E: C2 20        	rep	#$20
 11334                        	longa	on
 11335                        ;         reg_cmd_info.er = pio_inbyte( CB_ERR );
 11336                        	.line	3317
 11337 06:B570: F4 01 00     	pea	#<$1
 11338 06:B573: 22 B1 B7 06  	jsl	~~pio_inbyte
 11339 06:B577: E2 20        	sep	#$20
 11340                        	longa	off
 11341 06:B579: 8D xx xx     	sta	|~~reg_cmd_info+30
 11342 06:B57C: C2 20        	rep	#$20
 11343                        	longa	on
 11344                        ;         return 1;
 11345                        	.line	3318
 11346 06:B57E: A9 01 00     	lda	#$1
 11347 06:B581: 82 8D FF     	brl	L415
 11348                        ;      }
 11349                        	.line	3319
 11350                        ;   }
 11351                        L10172:
 11352                        	.line	3320
 11353 06:B584: 82 9C FF     	brl	L10170
 11354                        L10171:
 11355                        ;
 11356                        ;   // Here we select the drive we really want to 
                    work with by
 11357                        ;   // setting the DEV bit in the Drive/Head regis
                    ter.
 11358                        ;
 11359                        ;   pio_outbyte( CB_DH, (unsigned char) ( dev ? CB
                    _DH_DEV1 : CB_DH_DEV0 ) );
 11360                        	.line	3325
 11361 06:B587: A5 0D        	lda	<L408+dev_0
 11362 06:B589: 29 FF 00     	and	#$ff
 11363 06:B58C: D0 03        	bne	L419
 11364 06:B58E: 82 05 00     	brl	L418
 11365                        L419:
 11366 06:B591: A9 10 00     	lda	#$10
 11367 06:B594: 80 03        	bra	L420
 11368                        L418:
 11369 06:B596: A9 00 00     	lda	#$0
 11370                        L420:
 11371 06:B599: 48           	pha
 11372 06:B59A: F4 06 00     	pea	#<$6
 11373 06:B59D: 22 F0 B7 06  	jsl	~~pio_outbyte
 11374                        ;   DELAY400NS;
 11375                        	.line	3326
 11376                        	.line	3326
 11377 06:B5A1: F4 08 00     	pea	#<$8
 11378 06:B5A4: 22 B1 B7 06  	jsl	~~pio_inbyte
 11379                        	.line	3326
 11380 06:B5A8: F4 08 00     	pea	#<$8
 11381 06:B5AB: 22 B1 B7 06  	jsl	~~pio_inbyte
 11382                        	.line	3326
 11383 06:B5AF: F4 08 00     	pea	#<$8
 11384 06:B5B2: 22 B1 B7 06  	jsl	~~pio_inbyte
  Thu Jul 29 2021 11:55                                                Page 217


 11385                        	.line	3326
 11386 06:B5B6: F4 08 00     	pea	#<$8
 11387 06:B5B9: 22 B1 B7 06  	jsl	~~pio_inbyte
 11388                        	.line	3326
 11389 06:B5BD: F4 08 00     	pea	#<$8
 11390 06:B5C0: 22 B1 B7 06  	jsl	~~pio_inbyte
 11391                        	.line	3326
 11392                        	.line	3326
 11393                        ;
 11394                        ;   // Wait for the selected device to have BSY=0 
                    and DRQ=0.
 11395                        ;   // Normally the drive should be in this state 
                    unless
 11396                        ;   // something is very wrong (or initial power u
                    p is still in
 11397                        ;   // progress).
 11398                        ;
 11399                        ;   while ( 1 )
 11400                        	.line	3333
 11401                        L10173:
 11402                        ;   {
 11403                        	.line	3334
 11404                        ;      status = pio_inbyte( CB_STAT );
 11405                        	.line	3335
 11406 06:B5C4: F4 07 00     	pea	#<$7
 11407 06:B5C7: 22 B1 B7 06  	jsl	~~pio_inbyte
 11408 06:B5CB: E2 20        	sep	#$20
 11409                        	longa	off
 11410 06:B5CD: 85 09        	sta	<L409+status_1
 11411 06:B5CF: C2 20        	rep	#$20
 11412                        	longa	on
 11413                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
 11414                        	.line	3336
 11415                        ;         break;
 11416 06:B5D1: E2 20        	sep	#$20
 11417                        	longa	off
 11418 06:B5D3: A5 09        	lda	<L409+status_1
 11419 06:B5D5: 29 88        	and	#<$88
 11420 06:B5D7: C2 20        	rep	#$20
 11421                        	longa	on
 11422 06:B5D9: D0 03        	bne	L421
 11423 06:B5DB: 82 4A 00     	brl	L10174
 11424                        L421:
 11425                        ;      if ( tmr_chk_timeout() )
 11426                        	.line	3338
 11427                        ;      {
 11428 06:B5DE: 22 28 BD 06  	jsl	~~tmr_chk_timeout
 11429 06:B5E2: AA           	tax
 11430 06:B5E3: D0 03        	bne	L422
 11431 06:B5E5: 82 3D 00     	brl	L10175
 11432                        L422:
 11433                        	.line	3339
 11434                        ;         reg_cmd_info.to = 1;
 11435                        	.line	3340
 11436 06:B5E8: E2 20        	sep	#$20
 11437                        	longa	off
 11438 06:B5EA: A9 01        	lda	#$1
  Thu Jul 29 2021 11:55                                                Page 218


 11439 06:B5EC: 8D xx xx     	sta	|~~reg_cmd_info+32
 11440 06:B5EF: C2 20        	rep	#$20
 11441                        	longa	on
 11442                        ;         reg_cmd_info.ec = 12;
 11443                        	.line	3341
 11444 06:B5F1: E2 20        	sep	#$20
 11445                        	longa	off
 11446 06:B5F3: A9 0C        	lda	#$c
 11447 06:B5F5: 8D xx xx     	sta	|~~reg_cmd_info+31
 11448 06:B5F8: C2 20        	rep	#$20
 11449                        	longa	on
 11450                        ;         reg_cmd_info.st = status;
 11451                        	.line	3342
 11452 06:B5FA: E2 20        	sep	#$20
 11453                        	longa	off
 11454 06:B5FC: A5 09        	lda	<L409+status_1
 11455 06:B5FE: 8D xx xx     	sta	|~~reg_cmd_info+28
 11456 06:B601: C2 20        	rep	#$20
 11457                        	longa	on
 11458                        ;         reg_cmd_info.as = pio_inbyte( CB_ASTAT )
                    ;
 11459                        	.line	3343
 11460 06:B603: F4 08 00     	pea	#<$8
 11461 06:B606: 22 B1 B7 06  	jsl	~~pio_inbyte
 11462 06:B60A: E2 20        	sep	#$20
 11463                        	longa	off
 11464 06:B60C: 8D xx xx     	sta	|~~reg_cmd_info+29
 11465 06:B60F: C2 20        	rep	#$20
 11466                        	longa	on
 11467                        ;         reg_cmd_info.er = pio_inbyte( CB_ERR );
 11468                        	.line	3344
 11469 06:B611: F4 01 00     	pea	#<$1
 11470 06:B614: 22 B1 B7 06  	jsl	~~pio_inbyte
 11471 06:B618: E2 20        	sep	#$20
 11472                        	longa	off
 11473 06:B61A: 8D xx xx     	sta	|~~reg_cmd_info+30
 11474 06:B61D: C2 20        	rep	#$20
 11475                        	longa	on
 11476                        ;         return 1;
 11477                        	.line	3345
 11478 06:B61F: A9 01 00     	lda	#$1
 11479 06:B622: 82 EC FE     	brl	L415
 11480                        ;      }
 11481                        	.line	3346
 11482                        ;   }
 11483                        L10175:
 11484                        	.line	3347
 11485 06:B625: 82 9C FF     	brl	L10173
 11486                        L10174:
 11487                        ;
 11488                        ;   // All done.  The return values of this functi
                    on are described in
 11489                        ;   // ATAIO.H.
 11490                        ;
 11491                        ;   if ( reg_cmd_info.ec )
 11492                        	.line	3352
 11493                        ;      return 1;
 11494 06:B628: AD xx xx     	lda	|~~reg_cmd_info+31
  Thu Jul 29 2021 11:55                                                Page 219


 11495 06:B62B: 29 FF 00     	and	#$ff
 11496 06:B62E: D0 03        	bne	L423
 11497 06:B630: 82 06 00     	brl	L10176
 11498                        L423:
 11499                        	.line	3353
 11500 06:B633: A9 01 00     	lda	#$1
 11501 06:B636: 82 D8 FE     	brl	L415
 11502                        ;   return 0;
 11503                        L10176:
 11504                        	.line	3354
 11505 06:B639: A9 00 00     	lda	#$0
 11506 06:B63C: 82 D2 FE     	brl	L415
 11507                        ;}
 11508                        	.line	3355
 11509                        	.endblock	3355
 11510             00000009   L408	equ	9
 11511             00000009   L409	equ	9
 11512 06:B63F:              	ends
 11513                        	efunc
 11514                        	.endfunc	3355,9,9
 11515                        	.line	3355
 11516                        ;
 11517                        ;//***********************************************
                    **************
 11518                        ;//
 11519                        ;// sub_wait_poll() - wait for interrupt or poll f
                    or BSY=0
 11520                        ;//
 11521                        ;//***********************************************
                    **************
 11522                        ;
 11523                        ;static void sub_wait_poll( unsigned char we, unsi
                    gned char pe )
 11524                        ;
 11525                        ;{
 11526                        	.line	3363
 11527                        	.line	3365
 11528                        	FXHDD
 11529                        	func
 11530                        	.function	3365
 11531                        ~~sub_wait_poll:
 11532                        	longa	on
 11533                        	longi	on
 11534 06:B63F: 3B           	tsc
 11535 06:B640: 38           	sec
 11536 06:B641: E9 01 00     	sbc	#L424
 11537 06:B644: 1B           	tcs
 11538 06:B645: 0B           	phd
 11539 06:B646: 5B           	tcd
 11540             00000004   we_0	set	4
 11541             00000006   pe_0	set	6
 11542                        	.block	3365
 11543                        ;   unsigned char status;
 11544                        ;
 11545                        ;   // Wait for interrupt -or- wait for not BUSY -
                    or- wait for time out.
 11546                        ;
 11547                        ;   if ( we && int_use_intr_flag )
  Thu Jul 29 2021 11:55                                                Page 220


 11548             00000000   status_1	set	0
 11549                        	.sym	status,0,14,1,8
 11550                        	.sym	we,4,14,6,8
 11551                        	.sym	pe,6,14,6,8
 11552                        	.line	3370
 11553                        ;   {
 11554 06:B647: A5 05        	lda	<L424+we_0
 11555 06:B649: 29 FF 00     	and	#$ff
 11556 06:B64C: D0 03        	bne	L427
 11557 06:B64E: 82 2A 00     	brl	L10177
 11558                        L427:
 11559 06:B651: AD xx xx     	lda	|~~int_use_intr_flag
 11560 06:B654: 29 FF 00     	and	#$ff
 11561 06:B657: D0 03        	bne	L428
 11562 06:B659: 82 1F 00     	brl	L10177
 11563                        L428:
 11564                        	.line	3371
 11565                        ;      if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )    // 
                    time out ?
 11566                        	.line	3372
 11567                        ;      {
 11568 06:B65C: 22 8D BD 06  	jsl	~~SYSTEM_WAIT_INTR_OR_TIMEOUT
 11569 06:B660: AA           	tax
 11570 06:B661: D0 03        	bne	L429
 11571 06:B663: 82 12 00     	brl	L10178
 11572                        L429:
 11573                        	.line	3373
 11574                        ;         reg_cmd_info.to = 1;
 11575                        	.line	3374
 11576 06:B666: E2 20        	sep	#$20
 11577                        	longa	off
 11578 06:B668: A9 01        	lda	#$1
 11579 06:B66A: 8D xx xx     	sta	|~~reg_cmd_info+32
 11580 06:B66D: C2 20        	rep	#$20
 11581                        	longa	on
 11582                        ;         reg_cmd_info.ec = we;
 11583                        	.line	3375
 11584 06:B66F: E2 20        	sep	#$20
 11585                        	longa	off
 11586 06:B671: A5 05        	lda	<L424+we_0
 11587 06:B673: 8D xx xx     	sta	|~~reg_cmd_info+31
 11588 06:B676: C2 20        	rep	#$20
 11589                        	longa	on
 11590                        ;      }
 11591                        	.line	3376
 11592                        ;   }
 11593                        L10178:
 11594                        	.line	3377
 11595                        ;   else
 11596 06:B678: 82 3C 00     	brl	L10179
 11597                        L10177:
 11598                        ;   {
 11599                        	.line	3379
 11600                        ;      while ( 1 )
 11601                        	.line	3380
 11602                        L10180:
 11603                        ;      {
 11604                        	.line	3381
  Thu Jul 29 2021 11:55                                                Page 221


 11605                        ;         status = pio_inbyte( CB_ASTAT );       /
                    / poll for not busy
 11606                        	.line	3382
 11607 06:B67B: F4 08 00     	pea	#<$8
 11608 06:B67E: 22 B1 B7 06  	jsl	~~pio_inbyte
 11609 06:B682: E2 20        	sep	#$20
 11610                        	longa	off
 11611 06:B684: 85 01        	sta	<L425+status_1
 11612 06:B686: C2 20        	rep	#$20
 11613                        	longa	on
 11614                        ;         if ( ( status & CB_STAT_BSY ) == 0 )
 11615                        	.line	3383
 11616                        ;            break;
 11617 06:B688: E2 20        	sep	#$20
 11618                        	longa	off
 11619 06:B68A: A5 01        	lda	<L425+status_1
 11620 06:B68C: 29 80        	and	#<$80
 11621 06:B68E: C2 20        	rep	#$20
 11622                        	longa	on
 11623 06:B690: D0 03        	bne	L430
 11624 06:B692: 82 22 00     	brl	L10181
 11625                        L430:
 11626                        ;         if ( tmr_chk_timeout() )               /
                    / time out yet ?
 11627                        	.line	3385
 11628                        ;         {
 11629 06:B695: 22 28 BD 06  	jsl	~~tmr_chk_timeout
 11630 06:B699: AA           	tax
 11631 06:B69A: D0 03        	bne	L431
 11632 06:B69C: 82 15 00     	brl	L10182
 11633                        L431:
 11634                        	.line	3386
 11635                        ;            reg_cmd_info.to = 1;
 11636                        	.line	3387
 11637 06:B69F: E2 20        	sep	#$20
 11638                        	longa	off
 11639 06:B6A1: A9 01        	lda	#$1
 11640 06:B6A3: 8D xx xx     	sta	|~~reg_cmd_info+32
 11641 06:B6A6: C2 20        	rep	#$20
 11642                        	longa	on
 11643                        ;            reg_cmd_info.ec = pe;
 11644                        	.line	3388
 11645 06:B6A8: E2 20        	sep	#$20
 11646                        	longa	off
 11647 06:B6AA: A5 07        	lda	<L424+pe_0
 11648 06:B6AC: 8D xx xx     	sta	|~~reg_cmd_info+31
 11649 06:B6AF: C2 20        	rep	#$20
 11650                        	longa	on
 11651                        ;            break;
 11652                        	.line	3389
 11653 06:B6B1: 82 03 00     	brl	L10181
 11654                        ;         }
 11655                        	.line	3390
 11656                        ;      }
 11657                        L10182:
 11658                        	.line	3391
 11659 06:B6B4: 82 C4 FF     	brl	L10180
 11660                        L10181:
  Thu Jul 29 2021 11:55                                                Page 222


 11661                        ;   }
 11662                        	.line	3392
 11663                        L10179:
 11664                        ;}
 11665                        	.line	3393
 11666                        L432:
 11667 06:B6B7: A5 03        	lda	<L424+2
 11668 06:B6B9: 85 07        	sta	<L424+2+4
 11669 06:B6BB: A5 02        	lda	<L424+1
 11670 06:B6BD: 85 06        	sta	<L424+1+4
 11671 06:B6BF: 2B           	pld
 11672 06:B6C0: 3B           	tsc
 11673 06:B6C1: 18           	clc
 11674 06:B6C2: 69 05 00     	adc	#L424+4
 11675 06:B6C5: 1B           	tcs
 11676 06:B6C6: 6B           	rtl
 11677                        	.endblock	3393
 11678             00000001   L424	equ	1
 11679             00000001   L425	equ	1
 11680 06:B6C7:              	ends
 11681                        	efunc
 11682                        	.endfunc	3393,1,1
 11683                        	.line	3393
 11684                        ;
 11685                        ;//***********************************************
                    ************
 11686                        ;//
 11687                        ;// functions used to read/write the BMIDE registe
                    rs
 11688                        ;//
 11689                        ;//***********************************************
                    ************
 11690                        ;
 11691                        ;static unsigned char pio_readBusMstrCmd( void )
 11692                        ;
 11693                        ;{
 11694                        	.line	3401
 11695                        	.line	3403
 11696                        	FXHDD
 11697                        	func
 11698                        	.function	3403
 11699                        ~~pio_readBusMstrCmd:
 11700                        	longa	on
 11701                        	longi	on
 11702 06:B6C7: 3B           	tsc
 11703 06:B6C8: 38           	sec
 11704 06:B6C9: E9 05 00     	sbc	#L433
 11705 06:B6CC: 1B           	tcs
 11706 06:B6CD: 0B           	phd
 11707 06:B6CE: 5B           	tcd
 11708                        	.block	3403
 11709                        ;   unsigned char x;
 11710                        ;
 11711                        ;   if ( ! pio_bmide_base_addr )
 11712             00000000   x_1	set	0
 11713                        	.sym	x,0,14,1,8
 11714                        	.line	3406
 11715                        ;      return 0;
  Thu Jul 29 2021 11:55                                                Page 223


 11716 06:B6CF: AD xx xx     	lda	|~~pio_bmide_base_addr
 11717 06:B6D2: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11718 06:B6D5: F0 03        	beq	L436
 11719 06:B6D7: 82 0D 00     	brl	L10183
 11720                        L436:
 11721                        	.line	3407
 11722 06:B6DA: A9 00 00     	lda	#$0
 11723                        L437:
 11724 06:B6DD: A8           	tay
 11725 06:B6DE: 2B           	pld
 11726 06:B6DF: 3B           	tsc
 11727 06:B6E0: 18           	clc
 11728 06:B6E1: 69 05 00     	adc	#L433
 11729 06:B6E4: 1B           	tcs
 11730 06:B6E5: 98           	tya
 11731 06:B6E6: 6B           	rtl
 11732                        ;   x = * (pio_bmide_base_addr + BM_COMMAND_REG );
 11733                        L10183:
 11734                        	.line	3408
 11735 06:B6E7: AD xx xx     	lda	|~~pio_bmide_base_addr
 11736 06:B6EA: 85 01        	sta	<R0
 11737 06:B6EC: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11738 06:B6EF: 85 03        	sta	<R0+2
 11739 06:B6F1: E2 20        	sep	#$20
 11740                        	longa	off
 11741 06:B6F3: A7 01        	lda	[<R0]
 11742 06:B6F5: 85 05        	sta	<L434+x_1
 11743 06:B6F7: C2 20        	rep	#$20
 11744                        	longa	on
 11745                        ;   return x;
 11746                        	.line	3409
 11747 06:B6F9: A5 05        	lda	<L434+x_1
 11748 06:B6FB: 29 FF 00     	and	#$ff
 11749 06:B6FE: 82 DC FF     	brl	L437
 11750                        ;}
 11751                        	.line	3410
 11752                        	.endblock	3410
 11753             00000005   L433	equ	5
 11754             00000005   L434	equ	5
 11755 06:B701:              	ends
 11756                        	efunc
 11757                        	.endfunc	3410,5,5
 11758                        	.line	3410
 11759                        ;
 11760                        ;
 11761                        ;static unsigned char pio_readBusMstrStatus( void 
                    )
 11762                        ;
 11763                        ;{
 11764                        	.line	3413
 11765                        	.line	3415
 11766                        	FXHDD
 11767                        	func
 11768                        	.function	3415
 11769                        ~~pio_readBusMstrStatus:
 11770                        	longa	on
 11771                        	longi	on
 11772 06:B701: 3B           	tsc
  Thu Jul 29 2021 11:55                                                Page 224


 11773 06:B702: 38           	sec
 11774 06:B703: E9 05 00     	sbc	#L438
 11775 06:B706: 1B           	tcs
 11776 06:B707: 0B           	phd
 11777 06:B708: 5B           	tcd
 11778                        	.block	3415
 11779                        ;   unsigned char x;
 11780                        ;
 11781                        ;   if ( ! pio_bmide_base_addr )
 11782             00000000   x_1	set	0
 11783                        	.sym	x,0,14,1,8
 11784                        	.line	3418
 11785                        ;      return 0;
 11786 06:B709: AD xx xx     	lda	|~~pio_bmide_base_addr
 11787 06:B70C: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11788 06:B70F: F0 03        	beq	L441
 11789 06:B711: 82 0D 00     	brl	L10184
 11790                        L441:
 11791                        	.line	3419
 11792 06:B714: A9 00 00     	lda	#$0
 11793                        L442:
 11794 06:B717: A8           	tay
 11795 06:B718: 2B           	pld
 11796 06:B719: 3B           	tsc
 11797 06:B71A: 18           	clc
 11798 06:B71B: 69 05 00     	adc	#L438
 11799 06:B71E: 1B           	tcs
 11800 06:B71F: 98           	tya
 11801 06:B720: 6B           	rtl
 11802                        ;   x = * ( pio_bmide_base_addr + BM_STATUS_REG );
 11803                        L10184:
 11804                        	.line	3420
 11805 06:B721: AD xx xx     	lda	|~~pio_bmide_base_addr
 11806 06:B724: 85 01        	sta	<R0
 11807 06:B726: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11808 06:B729: 85 03        	sta	<R0+2
 11809 06:B72B: E2 20        	sep	#$20
 11810                        	longa	off
 11811 06:B72D: A0 02 00     	ldy	#$2
 11812 06:B730: B7 01        	lda	[<R0],Y
 11813 06:B732: 85 05        	sta	<L439+x_1
 11814 06:B734: C2 20        	rep	#$20
 11815                        	longa	on
 11816                        ;   return x;
 11817                        	.line	3421
 11818 06:B736: A5 05        	lda	<L439+x_1
 11819 06:B738: 29 FF 00     	and	#$ff
 11820 06:B73B: 82 D9 FF     	brl	L442
 11821                        ;}
 11822                        	.line	3422
 11823                        	.endblock	3422
 11824             00000005   L438	equ	5
 11825             00000005   L439	equ	5
 11826 06:B73E:              	ends
 11827                        	efunc
 11828                        	.endfunc	3422,5,5
 11829                        	.line	3422
 11830                        ;
  Thu Jul 29 2021 11:55                                                Page 225


 11831                        ;
 11832                        ;static void pio_writeBusMstrCmd( unsigned char x 
                    )
 11833                        ;
 11834                        ;{
 11835                        	.line	3425
 11836                        	.line	3427
 11837                        	FXHDD
 11838                        	func
 11839                        	.function	3427
 11840                        ~~pio_writeBusMstrCmd:
 11841                        	longa	on
 11842                        	longi	on
 11843 06:B73E: 3B           	tsc
 11844 06:B73F: 38           	sec
 11845 06:B740: E9 04 00     	sbc	#L443
 11846 06:B743: 1B           	tcs
 11847 06:B744: 0B           	phd
 11848 06:B745: 5B           	tcd
 11849             00000004   x_0	set	4
 11850                        	.block	3427
 11851                        ;
 11852                        ;   if ( ! pio_bmide_base_addr )
 11853                        	.sym	x,4,14,6,8
 11854                        	.line	3429
 11855                        ;      return;
 11856 06:B746: AD xx xx     	lda	|~~pio_bmide_base_addr
 11857 06:B749: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11858 06:B74C: F0 03        	beq	L446
 11859 06:B74E: 82 10 00     	brl	L10185
 11860                        L446:
 11861                        	.line	3430
 11862                        L447:
 11863 06:B751: A5 06        	lda	<L443+2
 11864 06:B753: 85 08        	sta	<L443+2+2
 11865 06:B755: A5 05        	lda	<L443+1
 11866 06:B757: 85 07        	sta	<L443+1+2
 11867 06:B759: 2B           	pld
 11868 06:B75A: 3B           	tsc
 11869 06:B75B: 18           	clc
 11870 06:B75C: 69 06 00     	adc	#L443+2
 11871 06:B75F: 1B           	tcs
 11872 06:B760: 6B           	rtl
 11873                        ;   * ( pio_bmide_base_addr + BM_COMMAND_REG ) = x
                    ;
 11874                        L10185:
 11875                        	.line	3431
 11876 06:B761: AD xx xx     	lda	|~~pio_bmide_base_addr
 11877 06:B764: 85 01        	sta	<R0
 11878 06:B766: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11879 06:B769: 85 03        	sta	<R0+2
 11880 06:B76B: E2 20        	sep	#$20
 11881                        	longa	off
 11882 06:B76D: A5 08        	lda	<L443+x_0
 11883 06:B76F: 87 01        	sta	[<R0]
 11884 06:B771: C2 20        	rep	#$20
 11885                        	longa	on
 11886                        ;}
  Thu Jul 29 2021 11:55                                                Page 226


 11887                        	.line	3432
 11888 06:B773: 82 DB FF     	brl	L447
 11889                        	.endblock	3432
 11890             00000004   L443	equ	4
 11891             00000005   L444	equ	5
 11892 06:B776:              	ends
 11893                        	efunc
 11894                        	.endfunc	3432,5,4
 11895                        	.line	3432
 11896                        ;
 11897                        ;
 11898                        ;static void pio_writeBusMstrStatus( unsigned char
                     x )
 11899                        ;
 11900                        ;{
 11901                        	.line	3435
 11902                        	.line	3437
 11903                        	FXHDD
 11904                        	func
 11905                        	.function	3437
 11906                        ~~pio_writeBusMstrStatus:
 11907                        	longa	on
 11908                        	longi	on
 11909 06:B776: 3B           	tsc
 11910 06:B777: 38           	sec
 11911 06:B778: E9 04 00     	sbc	#L448
 11912 06:B77B: 1B           	tcs
 11913 06:B77C: 0B           	phd
 11914 06:B77D: 5B           	tcd
 11915             00000004   x_0	set	4
 11916                        	.block	3437
 11917                        ;
 11918                        ;   if ( ! pio_bmide_base_addr )
 11919                        	.sym	x,4,14,6,8
 11920                        	.line	3439
 11921                        ;      return;
 11922 06:B77E: AD xx xx     	lda	|~~pio_bmide_base_addr
 11923 06:B781: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11924 06:B784: F0 03        	beq	L451
 11925 06:B786: 82 10 00     	brl	L10186
 11926                        L451:
 11927                        	.line	3440
 11928                        L452:
 11929 06:B789: A5 06        	lda	<L448+2
 11930 06:B78B: 85 08        	sta	<L448+2+2
 11931 06:B78D: A5 05        	lda	<L448+1
 11932 06:B78F: 85 07        	sta	<L448+1+2
 11933 06:B791: 2B           	pld
 11934 06:B792: 3B           	tsc
 11935 06:B793: 18           	clc
 11936 06:B794: 69 06 00     	adc	#L448+2
 11937 06:B797: 1B           	tcs
 11938 06:B798: 6B           	rtl
 11939                        ;   * ( pio_bmide_base_addr + BM_STATUS_REG ) =  x
                    ;
 11940                        L10186:
 11941                        	.line	3441
 11942 06:B799: AD xx xx     	lda	|~~pio_bmide_base_addr
  Thu Jul 29 2021 11:55                                                Page 227


 11943 06:B79C: 85 01        	sta	<R0
 11944 06:B79E: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11945 06:B7A1: 85 03        	sta	<R0+2
 11946 06:B7A3: E2 20        	sep	#$20
 11947                        	longa	off
 11948 06:B7A5: A5 08        	lda	<L448+x_0
 11949 06:B7A7: A0 02 00     	ldy	#$2
 11950 06:B7AA: 97 01        	sta	[<R0],Y
 11951 06:B7AC: C2 20        	rep	#$20
 11952                        	longa	on
 11953                        ;}
 11954                        	.line	3442
 11955 06:B7AE: 82 D8 FF     	brl	L452
 11956                        	.endblock	3442
 11957             00000004   L448	equ	4
 11958             00000005   L449	equ	5
 11959 06:B7B1:              	ends
 11960                        	efunc
 11961                        	.endfunc	3442,5,4
 11962                        	.line	3442
 11963                        ;
 11964                        ;//***********************************************
                    **************
 11965                        ;//
 11966                        ;// These functions do basic IN/OUT of byte and wo
                    rd values:
 11967                        ;//
 11968                        ;//    pio_inbyte()
 11969                        ;//    pio_outbyte()
 11970                        ;//    pio_inword()
 11971                        ;//    pio_outword()
 11972                        ;//
 11973                        ;//***********************************************
                    **************
 11974                        ;
 11975                        ;static unsigned char pio_inbyte( unsigned char ad
                    dr )
 11976                        ;
 11977                        ;{
 11978                        	.line	3455
 11979                        	.line	3457
 11980                        	FXHDD
 11981                        	func
 11982                        	.function	3457
 11983                        ~~pio_inbyte:
 11984                        	longa	on
 11985                        	longi	on
 11986 06:B7B1: 3B           	tsc
 11987 06:B7B2: 38           	sec
 11988 06:B7B3: E9 08 00     	sbc	#L453
 11989 06:B7B6: 1B           	tcs
 11990 06:B7B7: 0B           	phd
 11991 06:B7B8: 5B           	tcd
 11992             00000004   addr_0	set	4
 11993                        	.block	3457
 11994                        ;
 11995                        ;   //!!! read an 8-bit ATA register
 11996                        ;
  Thu Jul 29 2021 11:55                                                Page 228


 11997                        ;   return * pio_reg_addrs[ addr ];
 11998                        	.sym	addr,4,14,6,8
 11999                        	.line	3461
 12000 06:B7B9: A5 0C        	lda	<L453+addr_0
 12001 06:B7BB: 29 FF 00     	and	#$ff
 12002 06:B7BE: 85 05        	sta	<R1
 12003 06:B7C0: A5 05        	lda	<R1
 12004 06:B7C2: 0A           	asl	A
 12005 06:B7C3: 0A           	asl	A
 12006 06:B7C4: 85 01        	sta	<R0
 12007 06:B7C6: 18           	clc
 12008 06:B7C7: A9 xx xx     	lda	#<~~pio_reg_addrs
 12009 06:B7CA: 65 01        	adc	<R0
 12010 06:B7CC: 85 05        	sta	<R1
 12011 06:B7CE: B2 05        	lda	(<R1)
 12012 06:B7D0: 85 01        	sta	<R0
 12013 06:B7D2: A0 02 00     	ldy	#$2
 12014 06:B7D5: B1 05        	lda	(<R1),Y
 12015 06:B7D7: 85 03        	sta	<R0+2
 12016 06:B7D9: A7 01        	lda	[<R0]
 12017 06:B7DB: 29 FF 00     	and	#$ff
 12018                        L456:
 12019 06:B7DE: A8           	tay
 12020 06:B7DF: A5 0A        	lda	<L453+2
 12021 06:B7E1: 85 0C        	sta	<L453+2+2
 12022 06:B7E3: A5 09        	lda	<L453+1
 12023 06:B7E5: 85 0B        	sta	<L453+1+2
 12024 06:B7E7: 2B           	pld
 12025 06:B7E8: 3B           	tsc
 12026 06:B7E9: 18           	clc
 12027 06:B7EA: 69 0A 00     	adc	#L453+2
 12028 06:B7ED: 1B           	tcs
 12029 06:B7EE: 98           	tya
 12030 06:B7EF: 6B           	rtl
 12031                        ;}
 12032                        	.line	3462
 12033                        	.endblock	3462
 12034             00000008   L453	equ	8
 12035             00000009   L454	equ	9
 12036 06:B7F0:              	ends
 12037                        	efunc
 12038                        	.endfunc	3462,9,8
 12039                        	.line	3462
 12040                        ;
 12041                        ;//***********************************************
                    **************
 12042                        ;
 12043                        ;static void pio_outbyte( int addr, unsigned char 
                    data )
 12044                        ;
 12045                        ;{
 12046                        	.line	3466
 12047                        	.line	3468
 12048                        	FXHDD
 12049                        	func
 12050                        	.function	3468
 12051                        ~~pio_outbyte:
 12052                        	longa	on
  Thu Jul 29 2021 11:55                                                Page 229


 12053                        	longi	on
 12054 06:B7F0: 3B           	tsc
 12055 06:B7F1: 38           	sec
 12056 06:B7F2: E9 08 00     	sbc	#L457
 12057 06:B7F5: 1B           	tcs
 12058 06:B7F6: 0B           	phd
 12059 06:B7F7: 5B           	tcd
 12060             00000004   addr_0	set	4
 12061             00000006   data_0	set	6
 12062                        	.block	3468
 12063                        ;
 12064                        ;   //!!! write an 8-bit ATA register
 12065                        ;
 12066                        ;   * pio_reg_addrs[ addr ] = data;
 12067                        	.sym	addr,4,5,6,16
 12068                        	.sym	data,6,14,6,8
 12069                        	.line	3472
 12070 06:B7F8: A5 0C        	lda	<L457+addr_0
 12071 06:B7FA: 0A           	asl	A
 12072 06:B7FB: 0A           	asl	A
 12073 06:B7FC: 85 01        	sta	<R0
 12074 06:B7FE: 18           	clc
 12075 06:B7FF: A9 xx xx     	lda	#<~~pio_reg_addrs
 12076 06:B802: 65 01        	adc	<R0
 12077 06:B804: 85 05        	sta	<R1
 12078 06:B806: B2 05        	lda	(<R1)
 12079 06:B808: 85 01        	sta	<R0
 12080 06:B80A: A0 02 00     	ldy	#$2
 12081 06:B80D: B1 05        	lda	(<R1),Y
 12082 06:B80F: 85 03        	sta	<R0+2
 12083 06:B811: E2 20        	sep	#$20
 12084                        	longa	off
 12085 06:B813: A5 0E        	lda	<L457+data_0
 12086 06:B815: 87 01        	sta	[<R0]
 12087 06:B817: C2 20        	rep	#$20
 12088                        	longa	on
 12089                        ;}
 12090                        	.line	3473
 12091                        L460:
 12092 06:B819: A5 0A        	lda	<L457+2
 12093 06:B81B: 85 0E        	sta	<L457+2+4
 12094 06:B81D: A5 09        	lda	<L457+1
 12095 06:B81F: 85 0D        	sta	<L457+1+4
 12096 06:B821: 2B           	pld
 12097 06:B822: 3B           	tsc
 12098 06:B823: 18           	clc
 12099 06:B824: 69 0C 00     	adc	#L457+4
 12100 06:B827: 1B           	tcs
 12101 06:B828: 6B           	rtl
 12102                        	.endblock	3473
 12103             00000008   L457	equ	8
 12104             00000009   L458	equ	9
 12105 06:B829:              	ends
 12106                        	efunc
 12107                        	.endfunc	3473,9,8
 12108                        	.line	3473
 12109                        ;
 12110                        ;//***********************************************
  Thu Jul 29 2021 11:55                                                Page 230


                    **************
 12111                        ;
 12112                        ;static unsigned int pio_inword( unsigned char add
                    r )
 12113                        ;
 12114                        ;{
 12115                        	.line	3477
 12116                        	.line	3479
 12117                        	FXHDD
 12118                        	func
 12119                        	.function	3479
 12120                        ~~pio_inword:
 12121                        	longa	on
 12122                        	longi	on
 12123 06:B829: 3B           	tsc
 12124 06:B82A: 38           	sec
 12125 06:B82B: E9 08 00     	sbc	#L461
 12126 06:B82E: 1B           	tcs
 12127 06:B82F: 0B           	phd
 12128 06:B830: 5B           	tcd
 12129             00000004   addr_0	set	4
 12130                        	.block	3479
 12131                        ;
 12132                        ;   //!!! read an 8-bit ATA register (usually the 
                    ATA Data register)
 12133                        ;
 12134                        ;   return * ( (unsigned int *) pio_reg_addrs[ add
                    r ] );
 12135                        	.sym	addr,4,14,6,8
 12136                        	.line	3483
 12137 06:B831: A5 0C        	lda	<L461+addr_0
 12138 06:B833: 29 FF 00     	and	#$ff
 12139 06:B836: 85 05        	sta	<R1
 12140 06:B838: A5 05        	lda	<R1
 12141 06:B83A: 0A           	asl	A
 12142 06:B83B: 0A           	asl	A
 12143 06:B83C: 85 01        	sta	<R0
 12144 06:B83E: 18           	clc
 12145 06:B83F: A9 xx xx     	lda	#<~~pio_reg_addrs
 12146 06:B842: 65 01        	adc	<R0
 12147 06:B844: 85 05        	sta	<R1
 12148 06:B846: B2 05        	lda	(<R1)
 12149 06:B848: 85 01        	sta	<R0
 12150 06:B84A: A0 02 00     	ldy	#$2
 12151 06:B84D: B1 05        	lda	(<R1),Y
 12152 06:B84F: 85 03        	sta	<R0+2
 12153 06:B851: A7 01        	lda	[<R0]
 12154                        L464:
 12155 06:B853: A8           	tay
 12156 06:B854: A5 0A        	lda	<L461+2
 12157 06:B856: 85 0C        	sta	<L461+2+2
 12158 06:B858: A5 09        	lda	<L461+1
 12159 06:B85A: 85 0B        	sta	<L461+1+2
 12160 06:B85C: 2B           	pld
 12161 06:B85D: 3B           	tsc
 12162 06:B85E: 18           	clc
 12163 06:B85F: 69 0A 00     	adc	#L461+2
 12164 06:B862: 1B           	tcs
  Thu Jul 29 2021 11:55                                                Page 231


 12165 06:B863: 98           	tya
 12166 06:B864: 6B           	rtl
 12167                        ;}
 12168                        	.line	3484
 12169                        	.endblock	3484
 12170             00000008   L461	equ	8
 12171             00000009   L462	equ	9
 12172 06:B865:              	ends
 12173                        	efunc
 12174                        	.endfunc	3484,9,8
 12175                        	.line	3484
 12176                        ;
 12177                        ;//***********************************************
                    **************
 12178                        ;
 12179                        ;static void pio_outword( int addr, unsigned int d
                    ata )
 12180                        ;
 12181                        ;{
 12182                        	.line	3488
 12183                        	.line	3490
 12184                        	FXHDD
 12185                        	func
 12186                        	.function	3490
 12187                        ~~pio_outword:
 12188                        	longa	on
 12189                        	longi	on
 12190 06:B865: 3B           	tsc
 12191 06:B866: 38           	sec
 12192 06:B867: E9 08 00     	sbc	#L465
 12193 06:B86A: 1B           	tcs
 12194 06:B86B: 0B           	phd
 12195 06:B86C: 5B           	tcd
 12196             00000004   addr_0	set	4
 12197             00000006   data_0	set	6
 12198                        	.block	3490
 12199                        ;
 12200                        ;   //!!! Write an 8-bit ATA register (usually the
                     ATA Data register)
 12201                        ;
 12202                        ;   * ( (unsigned int *) pio_reg_addrs[ addr ] ) =
                     data;
 12203                        	.sym	addr,4,5,6,16
 12204                        	.sym	data,6,16,6,16
 12205                        	.line	3494
 12206 06:B86D: A5 0C        	lda	<L465+addr_0
 12207 06:B86F: 0A           	asl	A
 12208 06:B870: 0A           	asl	A
 12209 06:B871: 85 01        	sta	<R0
 12210 06:B873: 18           	clc
 12211 06:B874: A9 xx xx     	lda	#<~~pio_reg_addrs
 12212 06:B877: 65 01        	adc	<R0
 12213 06:B879: 85 05        	sta	<R1
 12214 06:B87B: B2 05        	lda	(<R1)
 12215 06:B87D: 85 01        	sta	<R0
 12216 06:B87F: A0 02 00     	ldy	#$2
 12217 06:B882: B1 05        	lda	(<R1),Y
 12218 06:B884: 85 03        	sta	<R0+2
  Thu Jul 29 2021 11:55                                                Page 232


 12219 06:B886: A5 0E        	lda	<L465+data_0
 12220 06:B888: 87 01        	sta	[<R0]
 12221                        ;}
 12222                        	.line	3495
 12223                        L468:
 12224 06:B88A: A5 0A        	lda	<L465+2
 12225 06:B88C: 85 0E        	sta	<L465+2+4
 12226 06:B88E: A5 09        	lda	<L465+1
 12227 06:B890: 85 0D        	sta	<L465+1+4
 12228 06:B892: 2B           	pld
 12229 06:B893: 3B           	tsc
 12230 06:B894: 18           	clc
 12231 06:B895: 69 0C 00     	adc	#L465+4
 12232 06:B898: 1B           	tcs
 12233 06:B899: 6B           	rtl
 12234                        	.endblock	3495
 12235             00000008   L465	equ	8
 12236             00000009   L466	equ	9
 12237 06:B89A:              	ends
 12238                        	efunc
 12239                        	.endfunc	3495,9,8
 12240                        	.line	3495
 12241                        ;
 12242                        ;//***********************************************
                    **************
 12243                        ;
 12244                        ;static unsigned long pio_indword( unsigned char a
                    ddr )
 12245                        ;
 12246                        ;{
 12247                        	.line	3499
 12248                        	.line	3501
 12249                        	FXHDD
 12250                        	func
 12251                        	.function	3501
 12252                        ~~pio_indword:
 12253                        	longa	on
 12254                        	longi	on
 12255 06:B89A: 3B           	tsc
 12256 06:B89B: 38           	sec
 12257 06:B89C: E9 08 00     	sbc	#L469
 12258 06:B89F: 1B           	tcs
 12259 06:B8A0: 0B           	phd
 12260 06:B8A1: 5B           	tcd
 12261             00000004   addr_0	set	4
 12262                        	.block	3501
 12263                        ;
 12264                        ;   //!!! read an 8-bit ATA register (usually the 
                    ATA Data register)
 12265                        ;
 12266                        ;   return * ( (unsigned long *) pio_reg_addrs[ ad
                    dr ] );
 12267                        	.sym	addr,4,14,6,8
 12268                        	.line	3505
 12269 06:B8A2: A5 0C        	lda	<L469+addr_0
 12270 06:B8A4: 29 FF 00     	and	#$ff
 12271 06:B8A7: 85 05        	sta	<R1
 12272 06:B8A9: A5 05        	lda	<R1
  Thu Jul 29 2021 11:55                                                Page 233


 12273 06:B8AB: 0A           	asl	A
 12274 06:B8AC: 0A           	asl	A
 12275 06:B8AD: 85 01        	sta	<R0
 12276 06:B8AF: 18           	clc
 12277 06:B8B0: A9 xx xx     	lda	#<~~pio_reg_addrs
 12278 06:B8B3: 65 01        	adc	<R0
 12279 06:B8B5: 85 05        	sta	<R1
 12280 06:B8B7: B2 05        	lda	(<R1)
 12281 06:B8B9: 85 01        	sta	<R0
 12282 06:B8BB: A0 02 00     	ldy	#$2
 12283 06:B8BE: B1 05        	lda	(<R1),Y
 12284 06:B8C0: 85 03        	sta	<R0+2
 12285 06:B8C2: A0 02 00     	ldy	#$2
 12286 06:B8C5: B7 01        	lda	[<R0],Y
 12287 06:B8C7: AA           	tax
 12288 06:B8C8: A7 01        	lda	[<R0]
 12289                        L472:
 12290 06:B8CA: A8           	tay
 12291 06:B8CB: A5 0A        	lda	<L469+2
 12292 06:B8CD: 85 0C        	sta	<L469+2+2
 12293 06:B8CF: A5 09        	lda	<L469+1
 12294 06:B8D1: 85 0B        	sta	<L469+1+2
 12295 06:B8D3: 2B           	pld
 12296 06:B8D4: 3B           	tsc
 12297 06:B8D5: 18           	clc
 12298 06:B8D6: 69 0A 00     	adc	#L469+2
 12299 06:B8D9: 1B           	tcs
 12300 06:B8DA: 98           	tya
 12301 06:B8DB: 6B           	rtl
 12302                        ;}
 12303                        	.line	3506
 12304                        	.endblock	3506
 12305             00000008   L469	equ	8
 12306             00000009   L470	equ	9
 12307 06:B8DC:              	ends
 12308                        	efunc
 12309                        	.endfunc	3506,9,8
 12310                        	.line	3506
 12311                        ;
 12312                        ;//***********************************************
                    **************
 12313                        ;
 12314                        ;static void pio_outdword( int addr, unsigned long
                     data )
 12315                        ;
 12316                        ;{
 12317                        	.line	3510
 12318                        	.line	3512
 12319                        	FXHDD
 12320                        	func
 12321                        	.function	3512
 12322                        ~~pio_outdword:
 12323                        	longa	on
 12324                        	longi	on
 12325 06:B8DC: 3B           	tsc
 12326 06:B8DD: 38           	sec
 12327 06:B8DE: E9 08 00     	sbc	#L473
 12328 06:B8E1: 1B           	tcs
  Thu Jul 29 2021 11:55                                                Page 234


 12329 06:B8E2: 0B           	phd
 12330 06:B8E3: 5B           	tcd
 12331             00000004   addr_0	set	4
 12332             00000006   data_0	set	6
 12333                        	.block	3512
 12334                        ;
 12335                        ;   //!!! Write an 8-bit ATA register (usually the
                     ATA Data register)
 12336                        ;
 12337                        ;   * ( (unsigned long *) pio_reg_addrs[ addr ] ) 
                    = data;
 12338                        	.sym	addr,4,5,6,16
 12339                        	.sym	data,6,18,6,32
 12340                        	.line	3516
 12341 06:B8E4: A5 0C        	lda	<L473+addr_0
 12342 06:B8E6: 0A           	asl	A
 12343 06:B8E7: 0A           	asl	A
 12344 06:B8E8: 85 01        	sta	<R0
 12345 06:B8EA: 18           	clc
 12346 06:B8EB: A9 xx xx     	lda	#<~~pio_reg_addrs
 12347 06:B8EE: 65 01        	adc	<R0
 12348 06:B8F0: 85 05        	sta	<R1
 12349 06:B8F2: B2 05        	lda	(<R1)
 12350 06:B8F4: 85 01        	sta	<R0
 12351 06:B8F6: A0 02 00     	ldy	#$2
 12352 06:B8F9: B1 05        	lda	(<R1),Y
 12353 06:B8FB: 85 03        	sta	<R0+2
 12354 06:B8FD: A5 0E        	lda	<L473+data_0
 12355 06:B8FF: 87 01        	sta	[<R0]
 12356 06:B901: A5 10        	lda	<L473+data_0+2
 12357 06:B903: A0 02 00     	ldy	#$2
 12358 06:B906: 97 01        	sta	[<R0],Y
 12359                        ;}
 12360                        	.line	3517
 12361                        L476:
 12362 06:B908: A5 0A        	lda	<L473+2
 12363 06:B90A: 85 10        	sta	<L473+2+6
 12364 06:B90C: A5 09        	lda	<L473+1
 12365 06:B90E: 85 0F        	sta	<L473+1+6
 12366 06:B910: 2B           	pld
 12367 06:B911: 3B           	tsc
 12368 06:B912: 18           	clc
 12369 06:B913: 69 0E 00     	adc	#L473+6
 12370 06:B916: 1B           	tcs
 12371 06:B917: 6B           	rtl
 12372                        	.endblock	3517
 12373             00000008   L473	equ	8
 12374             00000009   L474	equ	9
 12375 06:B918:              	ends
 12376                        	efunc
 12377                        	.endfunc	3517,9,8
 12378                        	.line	3517
 12379                        ;
 12380                        ;//***********************************************
                    **************
 12381                        ;//
 12382                        ;// These functions are normally used to transfer 
                    DRQ blocks:
  Thu Jul 29 2021 11:55                                                Page 235


 12383                        ;//
 12384                        ;// pio_drq_block_in()
 12385                        ;// pio_drq_block_out()
 12386                        ;//
 12387                        ;//***********************************************
                    **************
 12388                        ;
 12389                        ;// Note: pio_drq_block_in() is the primary way pe
                    rform PIO
 12390                        ;// Data In transfers. It will handle 8-bit, 16-bi
                    t and 32-bit
 12391                        ;// I/O based data transfers.
 12392                        ;
 12393                        ;static void pio_drq_block_in( unsigned char addrD
                    ataReg,
 12394                        ;                       unsigned char * bufAddr,
 12395                        ;                       long wordCnt )
 12396                        ;
 12397                        ;{
 12398                        	.line	3532
 12399                        	.line	3536
 12400                        	FXHDD
 12401                        	func
 12402                        	.function	3536
 12403                        ~~pio_drq_block_in:
 12404                        	longa	on
 12405                        	longi	on
 12406 06:B918: 3B           	tsc
 12407 06:B919: 38           	sec
 12408 06:B91A: E9 0A 00     	sbc	#L477
 12409 06:B91D: 1B           	tcs
 12410 06:B91E: 0B           	phd
 12411 06:B91F: 5B           	tcd
 12412             00000004   addrDataReg_0	set	4
 12413             00000006   bufAddr_0	set	6
 12414             0000000A   wordCnt_0	set	10
 12415                        	.block	3536
 12416                        ;
 12417                        ;   // NOTE: wordCnt is the size of a DRQ data blo
                    ck/packet
 12418                        ;   // in words. The maximum value of wordCnt is n
                    ormally:
 12419                        ;   // a) For ATA, 16384 words or 32768 bytes (64 
                    sectors,
 12420                        ;   //    only with READ/WRITE MULTIPLE commands),
 12421                        ;   // b) For ATAPI, 32768 words or 65536 bytes
 12422                        ;   //    (actually 65535 bytes plus a pad byte).
 12423                        ;
 12424                        ;   {
 12425                        	.sym	addrDataReg,4,14,6,8
 12426                        	.sym	bufAddr,6,142,6,32
 12427                        	.sym	wordCnt,10,7,6,32
 12428                        	.line	3545
 12429                        ;      int pxw;
 12430                        ;      long wc;
 12431                        ;
 12432                        ;      // adjust pio_xfer_width - don't use DWORD 
                    if wordCnt is odd.
  Thu Jul 29 2021 11:55                                                Page 236


 12433                        ;
 12434                        ;      pxw = pio_xfer_width;
 12435                        	.block	3551
 12436             00000000   pxw_2	set	0
 12437             00000002   wc_2	set	2
 12438                        	.sym	pxw,0,5,1,16
 12439                        	.sym	wc,2,7,1,32
 12440                        	.line	3551
 12441 06:B920: AD xx xx     	lda	|~~pio_xfer_width
 12442 06:B923: 29 FF 00     	and	#$ff
 12443 06:B926: 85 05        	sta	<L478+pxw_2
 12444                        ;      if ( ( pxw == 32 ) && ( wordCnt & 0x0000000
                    1L ) )
 12445                        	.line	3552
 12446                        ;         pxw = 16;
 12447 06:B928: A5 05        	lda	<L478+pxw_2
 12448 06:B92A: C9 20 00     	cmp	#<$20
 12449 06:B92D: F0 03        	beq	L481
 12450 06:B92F: 82 0F 00     	brl	L10187
 12451                        L481:
 12452 06:B932: A5 14        	lda	<L477+wordCnt_0
 12453 06:B934: 29 01 00     	and	#<$1
 12454 06:B937: D0 03        	bne	L482
 12455 06:B939: 82 05 00     	brl	L10187
 12456                        L482:
 12457                        	.line	3553
 12458 06:B93C: A9 10 00     	lda	#$10
 12459 06:B93F: 85 05        	sta	<L478+pxw_2
 12460                        ;
 12461                        ;      // Data transfer using INS instruction.
 12462                        ;      // Break the transfer into chunks of 32768 
                    or fewer bytes.
 12463                        ;
 12464                        ;      while ( wordCnt > 0 )
 12465                        L10187:
 12466                        	.line	3558
 12467                        L10188:
 12468 06:B941: 38           	sec
 12469 06:B942: A9 00 00     	lda	#$0
 12470 06:B945: E5 14        	sbc	<L477+wordCnt_0
 12471 06:B947: A9 00 00     	lda	#$0
 12472 06:B94A: E5 16        	sbc	<L477+wordCnt_0+2
 12473 06:B94C: 70 03        	bvs	L483
 12474 06:B94E: 49 00 80     	eor	#$8000
 12475                        L483:
 12476 06:B951: 10 03        	bpl	L484
 12477 06:B953: 82 B5 00     	brl	L10189
 12478                        L484:
 12479                        ;      {
 12480                        	.line	3559
 12481                        ;         if ( wordCnt > 16384L )
 12482                        	.line	3560
 12483                        ;            wc = 16384;
 12484 06:B956: 38           	sec
 12485 06:B957: A9 00 40     	lda	#$4000
 12486 06:B95A: E5 14        	sbc	<L477+wordCnt_0
 12487 06:B95C: A9 00 00     	lda	#$0
 12488 06:B95F: E5 16        	sbc	<L477+wordCnt_0+2
  Thu Jul 29 2021 11:55                                                Page 237


 12489 06:B961: 70 03        	bvs	L485
 12490 06:B963: 49 00 80     	eor	#$8000
 12491                        L485:
 12492 06:B966: 10 03        	bpl	L486
 12493 06:B968: 82 0D 00     	brl	L10190
 12494                        L486:
 12495                        	.line	3561
 12496 06:B96B: A9 00 40     	lda	#$4000
 12497 06:B96E: 85 07        	sta	<L478+wc_2
 12498 06:B970: A9 00 00     	lda	#$0
 12499 06:B973: 85 09        	sta	<L478+wc_2+2
 12500                        ;         else
 12501 06:B975: 82 08 00     	brl	L10191
 12502                        L10190:
 12503                        ;            wc = wordCnt;
 12504                        	.line	3563
 12505 06:B978: A5 14        	lda	<L477+wordCnt_0
 12506 06:B97A: 85 07        	sta	<L478+wc_2
 12507 06:B97C: A5 16        	lda	<L477+wordCnt_0+2
 12508 06:B97E: 85 09        	sta	<L478+wc_2+2
 12509                        L10191:
 12510                        ;         if ( pxw == 8 )
 12511                        	.line	3564
 12512                        ;         {
 12513 06:B980: A5 05        	lda	<L478+pxw_2
 12514 06:B982: C9 08 00     	cmp	#<$8
 12515 06:B985: F0 03        	beq	L487
 12516 06:B987: 82 1D 00     	brl	L10192
 12517                        L487:
 12518                        	.line	3565
 12519                        ;            // do REP INS
 12520                        ;            pio_rep_inbyte( addrDataReg, bufAddr,
                     wc * 2L );
 12521                        	.line	3567
 12522 06:B98A: A5 07        	lda	<L478+wc_2
 12523 06:B98C: 85 01        	sta	<R0
 12524 06:B98E: A5 09        	lda	<L478+wc_2+2
 12525 06:B990: 85 03        	sta	<R0+2
 12526 06:B992: 06 01        	asl	<R0
 12527 06:B994: 26 03        	rol	<R0+2
 12528 06:B996: D4 03        	pei	<R0+2
 12529 06:B998: D4 01        	pei	<R0
 12530 06:B99A: D4 12        	pei	<L477+bufAddr_0+2
 12531 06:B99C: D4 10        	pei	<L477+bufAddr_0
 12532 06:B99E: D4 0E        	pei	<L477+addrDataReg_0
 12533 06:B9A0: 22 1E BB 06  	jsl	~~pio_rep_inbyte
 12534                        ;         }
 12535                        	.line	3568
 12536                        ;         else
 12537 06:B9A4: 82 3B 00     	brl	L10193
 12538                        L10192:
 12539                        ;         if ( pxw == 32 )
 12540                        	.line	3570
 12541                        ;         {
 12542 06:B9A7: A5 05        	lda	<L478+pxw_2
 12543 06:B9A9: C9 20 00     	cmp	#<$20
 12544 06:B9AC: F0 03        	beq	L488
 12545 06:B9AE: 82 23 00     	brl	L10194
  Thu Jul 29 2021 11:55                                                Page 238


 12546                        L488:
 12547                        	.line	3571
 12548                        ;            // do REP INSD
 12549                        ;            pio_rep_indword( addrDataReg, bufAddr
                    , wc / 2L );
 12550                        	.line	3573
 12551 06:B9B1: F4 00 00     	pea	#^$2
 12552 06:B9B4: F4 02 00     	pea	#<$2
 12553 06:B9B7: D4 09        	pei	<L478+wc_2+2
 12554 06:B9B9: D4 07        	pei	<L478+wc_2
 12555                        	xref	~~~ldiv
 12556 06:B9BB: 22 xx xx xx  	jsl	~~~ldiv
 12557 06:B9BF: 85 01        	sta	<R0
 12558 06:B9C1: 86 03        	stx	<R0+2
 12559 06:B9C3: D4 03        	pei	<R0+2
 12560 06:B9C5: D4 01        	pei	<R0
 12561 06:B9C7: D4 12        	pei	<L477+bufAddr_0+2
 12562 06:B9C9: D4 10        	pei	<L477+bufAddr_0
 12563 06:B9CB: D4 0E        	pei	<L477+addrDataReg_0
 12564 06:B9CD: 22 50 BC 06  	jsl	~~pio_rep_indword
 12565                        ;         }
 12566                        	.line	3574
 12567                        ;         else
 12568 06:B9D1: 82 0E 00     	brl	L10195
 12569                        L10194:
 12570                        ;         {
 12571                        	.line	3576
 12572                        ;            // do REP INSW
 12573                        ;            pio_rep_inword( addrDataReg, bufAddr,
                     wc );
 12574                        	.line	3578
 12575 06:B9D4: D4 09        	pei	<L478+wc_2+2
 12576 06:B9D6: D4 07        	pei	<L478+wc_2
 12577 06:B9D8: D4 12        	pei	<L477+bufAddr_0+2
 12578 06:B9DA: D4 10        	pei	<L477+bufAddr_0
 12579 06:B9DC: D4 0E        	pei	<L477+addrDataReg_0
 12580 06:B9DE: 22 B3 BB 06  	jsl	~~pio_rep_inword
 12581                        ;         }
 12582                        	.line	3579
 12583                        L10195:
 12584                        L10193:
 12585                        ;         bufAddr = bufAddr + ( wc * 2 );
 12586                        	.line	3580
 12587 06:B9E2: A5 07        	lda	<L478+wc_2
 12588 06:B9E4: 85 01        	sta	<R0
 12589 06:B9E6: A5 09        	lda	<L478+wc_2+2
 12590 06:B9E8: 85 03        	sta	<R0+2
 12591 06:B9EA: 06 01        	asl	<R0
 12592 06:B9EC: 26 03        	rol	<R0+2
 12593 06:B9EE: 18           	clc
 12594 06:B9EF: A5 10        	lda	<L477+bufAddr_0
 12595 06:B9F1: 65 01        	adc	<R0
 12596 06:B9F3: 85 10        	sta	<L477+bufAddr_0
 12597 06:B9F5: A5 12        	lda	<L477+bufAddr_0+2
 12598 06:B9F7: 65 03        	adc	<R0+2
 12599 06:B9F9: 85 12        	sta	<L477+bufAddr_0+2
 12600                        ;         wordCnt = wordCnt - wc;
 12601                        	.line	3581
  Thu Jul 29 2021 11:55                                                Page 239


 12602 06:B9FB: 38           	sec
 12603 06:B9FC: A5 14        	lda	<L477+wordCnt_0
 12604 06:B9FE: E5 07        	sbc	<L478+wc_2
 12605 06:BA00: 85 14        	sta	<L477+wordCnt_0
 12606 06:BA02: A5 16        	lda	<L477+wordCnt_0+2
 12607 06:BA04: E5 09        	sbc	<L478+wc_2+2
 12608 06:BA06: 85 16        	sta	<L477+wordCnt_0+2
 12609                        ;      }
 12610                        	.line	3582
 12611 06:BA08: 82 36 FF     	brl	L10188
 12612                        L10189:
 12613                        ;   }
 12614                        	.endblock	3583
 12615                        	.line	3583
 12616                        ;
 12617                        ;   return;
 12618                        	.line	3585
 12619                        L489:
 12620 06:BA0B: A5 0C        	lda	<L477+2
 12621 06:BA0D: 85 16        	sta	<L477+2+10
 12622 06:BA0F: A5 0B        	lda	<L477+1
 12623 06:BA11: 85 15        	sta	<L477+1+10
 12624 06:BA13: 2B           	pld
 12625 06:BA14: 3B           	tsc
 12626 06:BA15: 18           	clc
 12627 06:BA16: 69 14 00     	adc	#L477+10
 12628 06:BA19: 1B           	tcs
 12629 06:BA1A: 6B           	rtl
 12630                        ;}
 12631                        	.line	3586
 12632                        	.endblock	3586
 12633             0000000A   L477	equ	10
 12634             00000005   L478	equ	5
 12635 06:BA1B:              	ends
 12636                        	efunc
 12637                        	.endfunc	3586,5,10
 12638                        	.line	3586
 12639                        ;
 12640                        ;//***********************************************
                    **************
 12641                        ;
 12642                        ;// Note: pio_drq_block_out() is the primary way p
                    erform PIO
 12643                        ;// Data Out transfers. It will handle 8-bit, 16-b
                    it and 32-bit
 12644                        ;// I/O based data transfers.
 12645                        ;
 12646                        ;static void pio_drq_block_out( unsigned char addr
                    DataReg,
 12647                        ;                        unsigned char * bufAddr,
 12648                        ;                        long wordCnt )
 12649                        ;
 12650                        ;{
 12651                        	.line	3594
 12652                        	.line	3598
 12653                        	FXHDD
 12654                        	func
 12655                        	.function	3598
  Thu Jul 29 2021 11:55                                                Page 240


 12656                        ~~pio_drq_block_out:
 12657                        	longa	on
 12658                        	longi	on
 12659 06:BA1B: 3B           	tsc
 12660 06:BA1C: 38           	sec
 12661 06:BA1D: E9 0A 00     	sbc	#L490
 12662 06:BA20: 1B           	tcs
 12663 06:BA21: 0B           	phd
 12664 06:BA22: 5B           	tcd
 12665             00000004   addrDataReg_0	set	4
 12666             00000006   bufAddr_0	set	6
 12667             0000000A   wordCnt_0	set	10
 12668                        	.block	3598
 12669                        ;
 12670                        ;   // NOTE: wordCnt is the size of a DRQ data blo
                    ck/packet
 12671                        ;   // in words. The maximum value of wordCnt is n
                    ormally:
 12672                        ;   // a) For ATA, 16384 words or 32768 bytes (64 
                    sectors,
 12673                        ;   //    only with READ/WRITE MULTIPLE commands),
 12674                        ;   // b) For ATAPI, 32768 words or 65536 bytes
 12675                        ;   //    (actually 65535 bytes plus a pad byte).
 12676                        ;
 12677                        ;   {
 12678                        	.sym	addrDataReg,4,14,6,8
 12679                        	.sym	bufAddr,6,142,6,32
 12680                        	.sym	wordCnt,10,7,6,32
 12681                        	.line	3607
 12682                        ;      int pxw;
 12683                        ;      long wc;
 12684                        ;
 12685                        ;      // adjust pio_xfer_width - don't use DWORD 
                    if wordCnt is odd.
 12686                        ;
 12687                        ;      pxw = pio_xfer_width;
 12688                        	.block	3613
 12689             00000000   pxw_2	set	0
 12690             00000002   wc_2	set	2
 12691                        	.sym	pxw,0,5,1,16
 12692                        	.sym	wc,2,7,1,32
 12693                        	.line	3613
 12694 06:BA23: AD xx xx     	lda	|~~pio_xfer_width
 12695 06:BA26: 29 FF 00     	and	#$ff
 12696 06:BA29: 85 05        	sta	<L491+pxw_2
 12697                        ;      if ( ( pxw == 32 ) && ( wordCnt & 0x0000000
                    1L ) )
 12698                        	.line	3614
 12699                        ;         pxw = 16;
 12700 06:BA2B: A5 05        	lda	<L491+pxw_2
 12701 06:BA2D: C9 20 00     	cmp	#<$20
 12702 06:BA30: F0 03        	beq	L494
 12703 06:BA32: 82 0F 00     	brl	L10196
 12704                        L494:
 12705 06:BA35: A5 14        	lda	<L490+wordCnt_0
 12706 06:BA37: 29 01 00     	and	#<$1
 12707 06:BA3A: D0 03        	bne	L495
 12708 06:BA3C: 82 05 00     	brl	L10196
  Thu Jul 29 2021 11:55                                                Page 241


 12709                        L495:
 12710                        	.line	3615
 12711 06:BA3F: A9 10 00     	lda	#$10
 12712 06:BA42: 85 05        	sta	<L491+pxw_2
 12713                        ;
 12714                        ;      // Data transfer using OUTS instruction.
 12715                        ;      // Break the transfer into chunks of 32768 
                    or fewer bytes.
 12716                        ;
 12717                        ;      while ( wordCnt > 0 )
 12718                        L10196:
 12719                        	.line	3620
 12720                        L10197:
 12721 06:BA44: 38           	sec
 12722 06:BA45: A9 00 00     	lda	#$0
 12723 06:BA48: E5 14        	sbc	<L490+wordCnt_0
 12724 06:BA4A: A9 00 00     	lda	#$0
 12725 06:BA4D: E5 16        	sbc	<L490+wordCnt_0+2
 12726 06:BA4F: 70 03        	bvs	L496
 12727 06:BA51: 49 00 80     	eor	#$8000
 12728                        L496:
 12729 06:BA54: 10 03        	bpl	L497
 12730 06:BA56: 82 B5 00     	brl	L10198
 12731                        L497:
 12732                        ;      {
 12733                        	.line	3621
 12734                        ;         if ( wordCnt > 16384L )
 12735                        	.line	3622
 12736                        ;            wc = 16384;
 12737 06:BA59: 38           	sec
 12738 06:BA5A: A9 00 40     	lda	#$4000
 12739 06:BA5D: E5 14        	sbc	<L490+wordCnt_0
 12740 06:BA5F: A9 00 00     	lda	#$0
 12741 06:BA62: E5 16        	sbc	<L490+wordCnt_0+2
 12742 06:BA64: 70 03        	bvs	L498
 12743 06:BA66: 49 00 80     	eor	#$8000
 12744                        L498:
 12745 06:BA69: 10 03        	bpl	L499
 12746 06:BA6B: 82 0D 00     	brl	L10199
 12747                        L499:
 12748                        	.line	3623
 12749 06:BA6E: A9 00 40     	lda	#$4000
 12750 06:BA71: 85 07        	sta	<L491+wc_2
 12751 06:BA73: A9 00 00     	lda	#$0
 12752 06:BA76: 85 09        	sta	<L491+wc_2+2
 12753                        ;         else
 12754 06:BA78: 82 08 00     	brl	L10200
 12755                        L10199:
 12756                        ;            wc = wordCnt;
 12757                        	.line	3625
 12758 06:BA7B: A5 14        	lda	<L490+wordCnt_0
 12759 06:BA7D: 85 07        	sta	<L491+wc_2
 12760 06:BA7F: A5 16        	lda	<L490+wordCnt_0+2
 12761 06:BA81: 85 09        	sta	<L491+wc_2+2
 12762                        L10200:
 12763                        ;         if ( pxw == 8 )
 12764                        	.line	3626
 12765                        ;         {
  Thu Jul 29 2021 11:55                                                Page 242


 12766 06:BA83: A5 05        	lda	<L491+pxw_2
 12767 06:BA85: C9 08 00     	cmp	#<$8
 12768 06:BA88: F0 03        	beq	L500
 12769 06:BA8A: 82 1D 00     	brl	L10201
 12770                        L500:
 12771                        	.line	3627
 12772                        ;            // do REP OUTS
 12773                        ;            pio_rep_outbyte( addrDataReg, bufAddr
                    , wc * 2L );
 12774                        	.line	3629
 12775 06:BA8D: A5 07        	lda	<L491+wc_2
 12776 06:BA8F: 85 01        	sta	<R0
 12777 06:BA91: A5 09        	lda	<L491+wc_2+2
 12778 06:BA93: 85 03        	sta	<R0+2
 12779 06:BA95: 06 01        	asl	<R0
 12780 06:BA97: 26 03        	rol	<R0+2
 12781 06:BA99: D4 03        	pei	<R0+2
 12782 06:BA9B: D4 01        	pei	<R0
 12783 06:BA9D: D4 12        	pei	<L490+bufAddr_0+2
 12784 06:BA9F: D4 10        	pei	<L490+bufAddr_0
 12785 06:BAA1: D4 0E        	pei	<L490+addrDataReg_0
 12786 06:BAA3: 22 68 BB 06  	jsl	~~pio_rep_outbyte
 12787                        ;         }
 12788                        	.line	3630
 12789                        ;         else
 12790 06:BAA7: 82 3B 00     	brl	L10202
 12791                        L10201:
 12792                        ;         if ( pxw == 32 )
 12793                        	.line	3632
 12794                        ;         {
 12795 06:BAAA: A5 05        	lda	<L491+pxw_2
 12796 06:BAAC: C9 20 00     	cmp	#<$20
 12797 06:BAAF: F0 03        	beq	L501
 12798 06:BAB1: 82 23 00     	brl	L10203
 12799                        L501:
 12800                        	.line	3633
 12801                        ;            // do REP OUTSD
 12802                        ;            pio_rep_outdword( addrDataReg, bufAdd
                    r, wc / 2L );
 12803                        	.line	3635
 12804 06:BAB4: F4 00 00     	pea	#^$2
 12805 06:BAB7: F4 02 00     	pea	#<$2
 12806 06:BABA: D4 09        	pei	<L491+wc_2+2
 12807 06:BABC: D4 07        	pei	<L491+wc_2
 12808                        	xref	~~~ldiv
 12809 06:BABE: 22 xx xx xx  	jsl	~~~ldiv
 12810 06:BAC2: 85 01        	sta	<R0
 12811 06:BAC4: 86 03        	stx	<R0+2
 12812 06:BAC6: D4 03        	pei	<R0+2
 12813 06:BAC8: D4 01        	pei	<R0
 12814 06:BACA: D4 12        	pei	<L490+bufAddr_0+2
 12815 06:BACC: D4 10        	pei	<L490+bufAddr_0
 12816 06:BACE: D4 0E        	pei	<L490+addrDataReg_0
 12817 06:BAD0: 22 A9 BC 06  	jsl	~~pio_rep_outdword
 12818                        ;         }
 12819                        	.line	3636
 12820                        ;         else
 12821 06:BAD4: 82 0E 00     	brl	L10204
  Thu Jul 29 2021 11:55                                                Page 243


 12822                        L10203:
 12823                        ;         {
 12824                        	.line	3638
 12825                        ;            // do REP OUTSW
 12826                        ;            pio_rep_outword( addrDataReg, bufAddr
                    , wc );
 12827                        	.line	3640
 12828 06:BAD7: D4 09        	pei	<L491+wc_2+2
 12829 06:BAD9: D4 07        	pei	<L491+wc_2
 12830 06:BADB: D4 12        	pei	<L490+bufAddr_0+2
 12831 06:BADD: D4 10        	pei	<L490+bufAddr_0
 12832 06:BADF: D4 0E        	pei	<L490+addrDataReg_0
 12833 06:BAE1: 22 FF BB 06  	jsl	~~pio_rep_outword
 12834                        ;         }
 12835                        	.line	3641
 12836                        L10204:
 12837                        L10202:
 12838                        ;         bufAddr = bufAddr + ( wc * 2 );
 12839                        	.line	3642
 12840 06:BAE5: A5 07        	lda	<L491+wc_2
 12841 06:BAE7: 85 01        	sta	<R0
 12842 06:BAE9: A5 09        	lda	<L491+wc_2+2
 12843 06:BAEB: 85 03        	sta	<R0+2
 12844 06:BAED: 06 01        	asl	<R0
 12845 06:BAEF: 26 03        	rol	<R0+2
 12846 06:BAF1: 18           	clc
 12847 06:BAF2: A5 10        	lda	<L490+bufAddr_0
 12848 06:BAF4: 65 01        	adc	<R0
 12849 06:BAF6: 85 10        	sta	<L490+bufAddr_0
 12850 06:BAF8: A5 12        	lda	<L490+bufAddr_0+2
 12851 06:BAFA: 65 03        	adc	<R0+2
 12852 06:BAFC: 85 12        	sta	<L490+bufAddr_0+2
 12853                        ;         wordCnt = wordCnt - wc;
 12854                        	.line	3643
 12855 06:BAFE: 38           	sec
 12856 06:BAFF: A5 14        	lda	<L490+wordCnt_0
 12857 06:BB01: E5 07        	sbc	<L491+wc_2
 12858 06:BB03: 85 14        	sta	<L490+wordCnt_0
 12859 06:BB05: A5 16        	lda	<L490+wordCnt_0+2
 12860 06:BB07: E5 09        	sbc	<L491+wc_2+2
 12861 06:BB09: 85 16        	sta	<L490+wordCnt_0+2
 12862                        ;      }
 12863                        	.line	3644
 12864 06:BB0B: 82 36 FF     	brl	L10197
 12865                        L10198:
 12866                        ;   }
 12867                        	.endblock	3645
 12868                        	.line	3645
 12869                        ;
 12870                        ;   return;
 12871                        	.line	3647
 12872                        L502:
 12873 06:BB0E: A5 0C        	lda	<L490+2
 12874 06:BB10: 85 16        	sta	<L490+2+10
 12875 06:BB12: A5 0B        	lda	<L490+1
 12876 06:BB14: 85 15        	sta	<L490+1+10
 12877 06:BB16: 2B           	pld
 12878 06:BB17: 3B           	tsc
  Thu Jul 29 2021 11:55                                                Page 244


 12879 06:BB18: 18           	clc
 12880 06:BB19: 69 14 00     	adc	#L490+10
 12881 06:BB1C: 1B           	tcs
 12882 06:BB1D: 6B           	rtl
 12883                        ;}
 12884                        	.line	3648
 12885                        	.endblock	3648
 12886             0000000A   L490	equ	10
 12887             00000005   L491	equ	5
 12888 06:BB1E:              	ends
 12889                        	efunc
 12890                        	.endfunc	3648,5,10
 12891                        	.line	3648
 12892                        ;
 12893                        ;//***********************************************
                    **************
 12894                        ;//
 12895                        ;// These functions transfer PIO DRQ data blocks t
                    hrough the ATA
 12896                        ;// Data register. On an x86 these functions would
                     use the
 12897                        ;// REP INS and REP OUTS instructions.
 12898                        ;//
 12899                        ;// pio_rep_inbyte()
 12900                        ;// pio_rep_outbyte()
 12901                        ;// pio_rep_inword()
 12902                        ;// pio_rep_outword()
 12903                        ;// pio_rep_indword()
 12904                        ;// pio_rep_outdword()
 12905                        ;//
 12906                        ;// These functions can be called directly but usu
                    ally they
 12907                        ;// are called by the pio_drq_block_in() and pio_d
                    rq_block_out()
 12908                        ;// functions to perform I/O mode transfers. See t
                    he
 12909                        ;// pio_xfer_width variable!
 12910                        ;//
 12911                        ;//***********************************************
                    **************
 12912                        ;
 12913                        ;static void pio_rep_inbyte( unsigned char addrDat
                    aReg,
 12914                        ;                     unsigned char * bufAddr,
 12915                        ;                     long byteCnt )
 12916                        ;
 12917                        ;{
 12918                        	.line	3670
 12919                        	.line	3674
 12920                        	FXHDD
 12921                        	func
 12922                        	.function	3674
 12923                        ~~pio_rep_inbyte:
 12924                        	longa	on
 12925                        	longi	on
 12926 06:BB1E: 3B           	tsc
 12927 06:BB1F: 38           	sec
 12928 06:BB20: E9 00 00     	sbc	#L503
  Thu Jul 29 2021 11:55                                                Page 245


 12929 06:BB23: 1B           	tcs
 12930 06:BB24: 0B           	phd
 12931 06:BB25: 5B           	tcd
 12932             00000004   addrDataReg_0	set	4
 12933             00000006   bufAddr_0	set	6
 12934             0000000A   byteCnt_0	set	10
 12935                        	.block	3674
 12936                        ;
 12937                        ;   // Warning: Avoid calling this function with
 12938                        ;   // byteCnt > 32768 (transfers 32768 bytes).
 12939                        ;   // that bufOff is a value between 0 and 15 (0x
                    f).
 12940                        ;
 12941                        ;   //!!! repeat read an 8-bit register (ATA Data 
                    register when
 12942                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 12943                        ;
 12944                        ;   while ( byteCnt > 0 )
 12945                        	.sym	addrDataReg,4,14,6,8
 12946                        	.sym	bufAddr,6,142,6,32
 12947                        	.sym	byteCnt,10,7,6,32
 12948                        	.line	3683
 12949                        L10205:
 12950 06:BB26: 38           	sec
 12951 06:BB27: A9 00 00     	lda	#$0
 12952 06:BB2A: E5 0A        	sbc	<L503+byteCnt_0
 12953 06:BB2C: A9 00 00     	lda	#$0
 12954 06:BB2F: E5 0C        	sbc	<L503+byteCnt_0+2
 12955 06:BB31: 70 03        	bvs	L506
 12956 06:BB33: 49 00 80     	eor	#$8000
 12957                        L506:
 12958 06:BB36: 10 03        	bpl	L507
 12959 06:BB38: 82 1D 00     	brl	L10206
 12960                        L507:
 12961                        ;   {
 12962                        	.line	3684
 12963                        ;      * bufAddr = pio_inbyte( addrDataReg );
 12964                        	.line	3685
 12965 06:BB3B: D4 04        	pei	<L503+addrDataReg_0
 12966 06:BB3D: 22 B1 B7 06  	jsl	~~pio_inbyte
 12967 06:BB41: E2 20        	sep	#$20
 12968                        	longa	off
 12969 06:BB43: 87 06        	sta	[<L503+bufAddr_0]
 12970 06:BB45: C2 20        	rep	#$20
 12971                        	longa	on
 12972                        ;      bufAddr ++ ;
 12973                        	.line	3686
 12974 06:BB47: E6 06        	inc	<L503+bufAddr_0
 12975 06:BB49: D0 02        	bne	L508
 12976 06:BB4B: E6 08        	inc	<L503+bufAddr_0+2
 12977                        L508:
 12978                        ;      byteCnt -- ;
 12979                        	.line	3687
 12980 06:BB4D: A5 0A        	lda	<L503+byteCnt_0
 12981 06:BB4F: D0 02        	bne	L509
 12982 06:BB51: C6 0C        	dec	<L503+byteCnt_0+2
 12983                        L509:
 12984 06:BB53: C6 0A        	dec	<L503+byteCnt_0
  Thu Jul 29 2021 11:55                                                Page 246


 12985                        ;   }
 12986                        	.line	3688
 12987 06:BB55: 82 CE FF     	brl	L10205
 12988                        L10206:
 12989                        ;}
 12990                        	.line	3689
 12991                        L510:
 12992 06:BB58: A5 02        	lda	<L503+2
 12993 06:BB5A: 85 0C        	sta	<L503+2+10
 12994 06:BB5C: A5 01        	lda	<L503+1
 12995 06:BB5E: 85 0B        	sta	<L503+1+10
 12996 06:BB60: 2B           	pld
 12997 06:BB61: 3B           	tsc
 12998 06:BB62: 18           	clc
 12999 06:BB63: 69 0A 00     	adc	#L503+10
 13000 06:BB66: 1B           	tcs
 13001 06:BB67: 6B           	rtl
 13002                        	.endblock	3689
 13003             00000000   L503	equ	0
 13004             00000001   L504	equ	1
 13005 06:BB68:              	ends
 13006                        	efunc
 13007                        	.endfunc	3689,1,0
 13008                        	.line	3689
 13009                        ;
 13010                        ;//***********************************************
                    **************
 13011                        ;
 13012                        ;static void pio_rep_outbyte( unsigned char addrDa
                    taReg,
 13013                        ;                      unsigned char * bufAddr,
 13014                        ;                      long byteCnt )
 13015                        ;
 13016                        ;{
 13017                        	.line	3693
 13018                        	.line	3697
 13019                        	FXHDD
 13020                        	func
 13021                        	.function	3697
 13022                        ~~pio_rep_outbyte:
 13023                        	longa	on
 13024                        	longi	on
 13025 06:BB68: 3B           	tsc
 13026 06:BB69: 38           	sec
 13027 06:BB6A: E9 00 00     	sbc	#L511
 13028 06:BB6D: 1B           	tcs
 13029 06:BB6E: 0B           	phd
 13030 06:BB6F: 5B           	tcd
 13031             00000004   addrDataReg_0	set	4
 13032             00000006   bufAddr_0	set	6
 13033             0000000A   byteCnt_0	set	10
 13034                        	.block	3697
 13035                        ;
 13036                        ;   // Warning: Avoid calling this function with
 13037                        ;   // byteCnt > 32768 (transfers 32768 bytes).
 13038                        ;   // that bufOff is a value between 0 and 15 (0x
                    f).
 13039                        ;
  Thu Jul 29 2021 11:55                                                Page 247


 13040                        ;   //!!! repeat write an 8-bit register (ATA Data
                     register when
 13041                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13042                        ;
 13043                        ;   while ( byteCnt > 0 )
 13044                        	.sym	addrDataReg,4,14,6,8
 13045                        	.sym	bufAddr,6,142,6,32
 13046                        	.sym	byteCnt,10,7,6,32
 13047                        	.line	3706
 13048                        L10207:
 13049 06:BB70: 38           	sec
 13050 06:BB71: A9 00 00     	lda	#$0
 13051 06:BB74: E5 0A        	sbc	<L511+byteCnt_0
 13052 06:BB76: A9 00 00     	lda	#$0
 13053 06:BB79: E5 0C        	sbc	<L511+byteCnt_0+2
 13054 06:BB7B: 70 03        	bvs	L514
 13055 06:BB7D: 49 00 80     	eor	#$8000
 13056                        L514:
 13057 06:BB80: 10 03        	bpl	L515
 13058 06:BB82: 82 1E 00     	brl	L10208
 13059                        L515:
 13060                        ;   {
 13061                        	.line	3707
 13062                        ;      pio_outbyte( addrDataReg, * bufAddr );
 13063                        	.line	3708
 13064 06:BB85: A7 06        	lda	[<L511+bufAddr_0]
 13065 06:BB87: 48           	pha
 13066 06:BB88: A5 04        	lda	<L511+addrDataReg_0
 13067 06:BB8A: 29 FF 00     	and	#$ff
 13068 06:BB8D: 48           	pha
 13069 06:BB8E: 22 F0 B7 06  	jsl	~~pio_outbyte
 13070                        ;      bufAddr ++ ;
 13071                        	.line	3709
 13072 06:BB92: E6 06        	inc	<L511+bufAddr_0
 13073 06:BB94: D0 02        	bne	L516
 13074 06:BB96: E6 08        	inc	<L511+bufAddr_0+2
 13075                        L516:
 13076                        ;      byteCnt -- ;
 13077                        	.line	3710
 13078 06:BB98: A5 0A        	lda	<L511+byteCnt_0
 13079 06:BB9A: D0 02        	bne	L517
 13080 06:BB9C: C6 0C        	dec	<L511+byteCnt_0+2
 13081                        L517:
 13082 06:BB9E: C6 0A        	dec	<L511+byteCnt_0
 13083                        ;   }
 13084                        	.line	3711
 13085 06:BBA0: 82 CD FF     	brl	L10207
 13086                        L10208:
 13087                        ;}
 13088                        	.line	3712
 13089                        L518:
 13090 06:BBA3: A5 02        	lda	<L511+2
 13091 06:BBA5: 85 0C        	sta	<L511+2+10
 13092 06:BBA7: A5 01        	lda	<L511+1
 13093 06:BBA9: 85 0B        	sta	<L511+1+10
 13094 06:BBAB: 2B           	pld
 13095 06:BBAC: 3B           	tsc
 13096 06:BBAD: 18           	clc
  Thu Jul 29 2021 11:55                                                Page 248


 13097 06:BBAE: 69 0A 00     	adc	#L511+10
 13098 06:BBB1: 1B           	tcs
 13099 06:BBB2: 6B           	rtl
 13100                        	.endblock	3712
 13101             00000000   L511	equ	0
 13102             00000001   L512	equ	1
 13103 06:BBB3:              	ends
 13104                        	efunc
 13105                        	.endfunc	3712,1,0
 13106                        	.line	3712
 13107                        ;
 13108                        ;//***********************************************
                    **************
 13109                        ;
 13110                        ;static void pio_rep_inword( unsigned char addrDat
                    aReg,
 13111                        ;                     unsigned char * bufAddr,
 13112                        ;                     long wordCnt )
 13113                        ;
 13114                        ;{
 13115                        	.line	3716
 13116                        	.line	3720
 13117                        	FXHDD
 13118                        	func
 13119                        	.function	3720
 13120                        ~~pio_rep_inword:
 13121                        	longa	on
 13122                        	longi	on
 13123 06:BBB3: 3B           	tsc
 13124 06:BBB4: 38           	sec
 13125 06:BBB5: E9 00 00     	sbc	#L519
 13126 06:BBB8: 1B           	tcs
 13127 06:BBB9: 0B           	phd
 13128 06:BBBA: 5B           	tcd
 13129             00000004   addrDataReg_0	set	4
 13130             00000006   bufAddr_0	set	6
 13131             0000000A   wordCnt_0	set	10
 13132                        	.block	3720
 13133                        ;
 13134                        ;   // Warning: Avoid calling this function with
 13135                        ;   // wordCnt > 16384 (transfers 32768 bytes).
 13136                        ;
 13137                        ;   //!!! repeat read a 16-bit register (ATA Data 
                    register when
 13138                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13139                        ;
 13140                        ;   while ( wordCnt > 0 )
 13141                        	.sym	addrDataReg,4,14,6,8
 13142                        	.sym	bufAddr,6,142,6,32
 13143                        	.sym	wordCnt,10,7,6,32
 13144                        	.line	3728
 13145                        L10209:
 13146 06:BBBB: 38           	sec
 13147 06:BBBC: A9 00 00     	lda	#$0
 13148 06:BBBF: E5 0A        	sbc	<L519+wordCnt_0
 13149 06:BBC1: A9 00 00     	lda	#$0
 13150 06:BBC4: E5 0C        	sbc	<L519+wordCnt_0+2
 13151 06:BBC6: 70 03        	bvs	L522
  Thu Jul 29 2021 11:55                                                Page 249


 13152 06:BBC8: 49 00 80     	eor	#$8000
 13153                        L522:
 13154 06:BBCB: 10 03        	bpl	L523
 13155 06:BBCD: 82 1F 00     	brl	L10210
 13156                        L523:
 13157                        ;   {
 13158                        	.line	3729
 13159                        ;      * (unsigned int *) bufAddr = pio_inword( ad
                    drDataReg );
 13160                        	.line	3730
 13161 06:BBD0: D4 04        	pei	<L519+addrDataReg_0
 13162 06:BBD2: 22 29 B8 06  	jsl	~~pio_inword
 13163 06:BBD6: 87 06        	sta	[<L519+bufAddr_0]
 13164                        ;      bufAddr += 2;
 13165                        	.line	3731
 13166 06:BBD8: 18           	clc
 13167 06:BBD9: A9 02 00     	lda	#$2
 13168 06:BBDC: 65 06        	adc	<L519+bufAddr_0
 13169 06:BBDE: 85 06        	sta	<L519+bufAddr_0
 13170 06:BBE0: 90 02        	bcc	L524
 13171 06:BBE2: E6 08        	inc	<L519+bufAddr_0+2
 13172                        L524:
 13173                        ;      wordCnt -- ;
 13174                        	.line	3732
 13175 06:BBE4: A5 0A        	lda	<L519+wordCnt_0
 13176 06:BBE6: D0 02        	bne	L525
 13177 06:BBE8: C6 0C        	dec	<L519+wordCnt_0+2
 13178                        L525:
 13179 06:BBEA: C6 0A        	dec	<L519+wordCnt_0
 13180                        ;   }
 13181                        	.line	3733
 13182 06:BBEC: 82 CC FF     	brl	L10209
 13183                        L10210:
 13184                        ;}
 13185                        	.line	3734
 13186                        L526:
 13187 06:BBEF: A5 02        	lda	<L519+2
 13188 06:BBF1: 85 0C        	sta	<L519+2+10
 13189 06:BBF3: A5 01        	lda	<L519+1
 13190 06:BBF5: 85 0B        	sta	<L519+1+10
 13191 06:BBF7: 2B           	pld
 13192 06:BBF8: 3B           	tsc
 13193 06:BBF9: 18           	clc
 13194 06:BBFA: 69 0A 00     	adc	#L519+10
 13195 06:BBFD: 1B           	tcs
 13196 06:BBFE: 6B           	rtl
 13197                        	.endblock	3734
 13198             00000000   L519	equ	0
 13199             00000001   L520	equ	1
 13200 06:BBFF:              	ends
 13201                        	efunc
 13202                        	.endfunc	3734,1,0
 13203                        	.line	3734
 13204                        ;
 13205                        ;//***********************************************
                    **************
 13206                        ;
 13207                        ;static void pio_rep_outword( unsigned char addrDa
  Thu Jul 29 2021 11:55                                                Page 250


                    taReg,
 13208                        ;                      unsigned char * bufAddr,
 13209                        ;                      long wordCnt )
 13210                        ;
 13211                        ;{
 13212                        	.line	3738
 13213                        	.line	3742
 13214                        	FXHDD
 13215                        	func
 13216                        	.function	3742
 13217                        ~~pio_rep_outword:
 13218                        	longa	on
 13219                        	longi	on
 13220 06:BBFF: 3B           	tsc
 13221 06:BC00: 38           	sec
 13222 06:BC01: E9 00 00     	sbc	#L527
 13223 06:BC04: 1B           	tcs
 13224 06:BC05: 0B           	phd
 13225 06:BC06: 5B           	tcd
 13226             00000004   addrDataReg_0	set	4
 13227             00000006   bufAddr_0	set	6
 13228             0000000A   wordCnt_0	set	10
 13229                        	.block	3742
 13230                        ;
 13231                        ;   // Warning: Avoid calling this function with
 13232                        ;   // wordCnt > 16384 (transfers 32768 bytes).
 13233                        ;
 13234                        ;   //!!! repeat write a 16-bit register (ATA Data
                     register when
 13235                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13236                        ;
 13237                        ;   while ( wordCnt > 0 )
 13238                        	.sym	addrDataReg,4,14,6,8
 13239                        	.sym	bufAddr,6,142,6,32
 13240                        	.sym	wordCnt,10,7,6,32
 13241                        	.line	3750
 13242                        L10211:
 13243 06:BC07: 38           	sec
 13244 06:BC08: A9 00 00     	lda	#$0
 13245 06:BC0B: E5 0A        	sbc	<L527+wordCnt_0
 13246 06:BC0D: A9 00 00     	lda	#$0
 13247 06:BC10: E5 0C        	sbc	<L527+wordCnt_0+2
 13248 06:BC12: 70 03        	bvs	L530
 13249 06:BC14: 49 00 80     	eor	#$8000
 13250                        L530:
 13251 06:BC17: 10 03        	bpl	L531
 13252 06:BC19: 82 24 00     	brl	L10212
 13253                        L531:
 13254                        ;   {
 13255                        	.line	3751
 13256                        ;      pio_outword( addrDataReg, * (unsigned int *
                    ) bufAddr );
 13257                        	.line	3752
 13258 06:BC1C: A7 06        	lda	[<L527+bufAddr_0]
 13259 06:BC1E: 48           	pha
 13260 06:BC1F: A5 04        	lda	<L527+addrDataReg_0
 13261 06:BC21: 29 FF 00     	and	#$ff
 13262 06:BC24: 48           	pha
  Thu Jul 29 2021 11:55                                                Page 251


 13263 06:BC25: 22 65 B8 06  	jsl	~~pio_outword
 13264                        ;      bufAddr += 2;
 13265                        	.line	3753
 13266 06:BC29: 18           	clc
 13267 06:BC2A: A9 02 00     	lda	#$2
 13268 06:BC2D: 65 06        	adc	<L527+bufAddr_0
 13269 06:BC2F: 85 06        	sta	<L527+bufAddr_0
 13270 06:BC31: 90 02        	bcc	L532
 13271 06:BC33: E6 08        	inc	<L527+bufAddr_0+2
 13272                        L532:
 13273                        ;      wordCnt -- ;
 13274                        	.line	3754
 13275 06:BC35: A5 0A        	lda	<L527+wordCnt_0
 13276 06:BC37: D0 02        	bne	L533
 13277 06:BC39: C6 0C        	dec	<L527+wordCnt_0+2
 13278                        L533:
 13279 06:BC3B: C6 0A        	dec	<L527+wordCnt_0
 13280                        ;   }
 13281                        	.line	3755
 13282 06:BC3D: 82 C7 FF     	brl	L10211
 13283                        L10212:
 13284                        ;}
 13285                        	.line	3756
 13286                        L534:
 13287 06:BC40: A5 02        	lda	<L527+2
 13288 06:BC42: 85 0C        	sta	<L527+2+10
 13289 06:BC44: A5 01        	lda	<L527+1
 13290 06:BC46: 85 0B        	sta	<L527+1+10
 13291 06:BC48: 2B           	pld
 13292 06:BC49: 3B           	tsc
 13293 06:BC4A: 18           	clc
 13294 06:BC4B: 69 0A 00     	adc	#L527+10
 13295 06:BC4E: 1B           	tcs
 13296 06:BC4F: 6B           	rtl
 13297                        	.endblock	3756
 13298             00000000   L527	equ	0
 13299             00000001   L528	equ	1
 13300 06:BC50:              	ends
 13301                        	efunc
 13302                        	.endfunc	3756,1,0
 13303                        	.line	3756
 13304                        ;
 13305                        ;//***********************************************
                    **************
 13306                        ;
 13307                        ;static void pio_rep_indword( unsigned char addrDa
                    taReg,
 13308                        ;                      unsigned char * bufAddr,
 13309                        ;                      long dwordCnt )
 13310                        ;
 13311                        ;{
 13312                        	.line	3760
 13313                        	.line	3764
 13314                        	FXHDD
 13315                        	func
 13316                        	.function	3764
 13317                        ~~pio_rep_indword:
 13318                        	longa	on
  Thu Jul 29 2021 11:55                                                Page 252


 13319                        	longi	on
 13320 06:BC50: 3B           	tsc
 13321 06:BC51: 38           	sec
 13322 06:BC52: E9 04 00     	sbc	#L535
 13323 06:BC55: 1B           	tcs
 13324 06:BC56: 0B           	phd
 13325 06:BC57: 5B           	tcd
 13326             00000004   addrDataReg_0	set	4
 13327             00000006   bufAddr_0	set	6
 13328             0000000A   dwordCnt_0	set	10
 13329                        	.block	3764
 13330                        ;
 13331                        ;   // Warning: Avoid calling this function with
 13332                        ;   // dwordCnt > 8192 (transfers 32768 bytes).
 13333                        ;
 13334                        ;   //!!! repeat read a 32-bit register (ATA Data 
                    register when
 13335                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13336                        ;
 13337                        ;   while ( dwordCnt > 0 )
 13338                        	.sym	addrDataReg,4,14,6,8
 13339                        	.sym	bufAddr,6,142,6,32
 13340                        	.sym	dwordCnt,10,7,6,32
 13341                        	.line	3772
 13342                        L10213:
 13343 06:BC58: 38           	sec
 13344 06:BC59: A9 00 00     	lda	#$0
 13345 06:BC5C: E5 0E        	sbc	<L535+dwordCnt_0
 13346 06:BC5E: A9 00 00     	lda	#$0
 13347 06:BC61: E5 10        	sbc	<L535+dwordCnt_0+2
 13348 06:BC63: 70 03        	bvs	L538
 13349 06:BC65: 49 00 80     	eor	#$8000
 13350                        L538:
 13351 06:BC68: 10 03        	bpl	L539
 13352 06:BC6A: 82 2C 00     	brl	L10214
 13353                        L539:
 13354                        ;   {
 13355                        	.line	3773
 13356                        ;      * (unsigned long *) bufAddr = pio_indword( 
                    addrDataReg );
 13357                        	.line	3774
 13358 06:BC6D: D4 08        	pei	<L535+addrDataReg_0
 13359 06:BC6F: 22 9A B8 06  	jsl	~~pio_indword
 13360 06:BC73: 85 01        	sta	<R0
 13361 06:BC75: 86 03        	stx	<R0+2
 13362 06:BC77: A5 01        	lda	<R0
 13363 06:BC79: 87 0A        	sta	[<L535+bufAddr_0]
 13364 06:BC7B: A5 03        	lda	<R0+2
 13365 06:BC7D: A0 02 00     	ldy	#$2
 13366 06:BC80: 97 0A        	sta	[<L535+bufAddr_0],Y
 13367                        ;      bufAddr += 4;
 13368                        	.line	3775
 13369 06:BC82: 18           	clc
 13370 06:BC83: A9 04 00     	lda	#$4
 13371 06:BC86: 65 0A        	adc	<L535+bufAddr_0
 13372 06:BC88: 85 0A        	sta	<L535+bufAddr_0
 13373 06:BC8A: 90 02        	bcc	L540
 13374 06:BC8C: E6 0C        	inc	<L535+bufAddr_0+2
  Thu Jul 29 2021 11:55                                                Page 253


 13375                        L540:
 13376                        ;      dwordCnt -- ;
 13377                        	.line	3776
 13378 06:BC8E: A5 0E        	lda	<L535+dwordCnt_0
 13379 06:BC90: D0 02        	bne	L541
 13380 06:BC92: C6 10        	dec	<L535+dwordCnt_0+2
 13381                        L541:
 13382 06:BC94: C6 0E        	dec	<L535+dwordCnt_0
 13383                        ;   }
 13384                        	.line	3777
 13385 06:BC96: 82 BF FF     	brl	L10213
 13386                        L10214:
 13387                        ;}
 13388                        	.line	3778
 13389                        L542:
 13390 06:BC99: A5 06        	lda	<L535+2
 13391 06:BC9B: 85 10        	sta	<L535+2+10
 13392 06:BC9D: A5 05        	lda	<L535+1
 13393 06:BC9F: 85 0F        	sta	<L535+1+10
 13394 06:BCA1: 2B           	pld
 13395 06:BCA2: 3B           	tsc
 13396 06:BCA3: 18           	clc
 13397 06:BCA4: 69 0E 00     	adc	#L535+10
 13398 06:BCA7: 1B           	tcs
 13399 06:BCA8: 6B           	rtl
 13400                        	.endblock	3778
 13401             00000004   L535	equ	4
 13402             00000005   L536	equ	5
 13403 06:BCA9:              	ends
 13404                        	efunc
 13405                        	.endfunc	3778,5,4
 13406                        	.line	3778
 13407                        ;
 13408                        ;//***********************************************
                    **************
 13409                        ;
 13410                        ;static void pio_rep_outdword( unsigned char addrD
                    ataReg,
 13411                        ;                       unsigned char * bufAddr,
 13412                        ;                       long dwordCnt )
 13413                        ;
 13414                        ;{
 13415                        	.line	3782
 13416                        	.line	3786
 13417                        	FXHDD
 13418                        	func
 13419                        	.function	3786
 13420                        ~~pio_rep_outdword:
 13421                        	longa	on
 13422                        	longi	on
 13423 06:BCA9: 3B           	tsc
 13424 06:BCAA: 38           	sec
 13425 06:BCAB: E9 00 00     	sbc	#L543
 13426 06:BCAE: 1B           	tcs
 13427 06:BCAF: 0B           	phd
 13428 06:BCB0: 5B           	tcd
 13429             00000004   addrDataReg_0	set	4
 13430             00000006   bufAddr_0	set	6
  Thu Jul 29 2021 11:55                                                Page 254


 13431             0000000A   dwordCnt_0	set	10
 13432                        	.block	3786
 13433                        ;
 13434                        ;   // Warning: Avoid calling this function with
 13435                        ;   // dwordCnt > 8192 (transfers 32768 bytes).
 13436                        ;
 13437                        ;   //!!! repeat write a 32-bit register (ATA Data
                     register when
 13438                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13439                        ;
 13440                        ;   while ( dwordCnt > 0 )
 13441                        	.sym	addrDataReg,4,14,6,8
 13442                        	.sym	bufAddr,6,142,6,32
 13443                        	.sym	dwordCnt,10,7,6,32
 13444                        	.line	3794
 13445                        L10215:
 13446 06:BCB1: 38           	sec
 13447 06:BCB2: A9 00 00     	lda	#$0
 13448 06:BCB5: E5 0A        	sbc	<L543+dwordCnt_0
 13449 06:BCB7: A9 00 00     	lda	#$0
 13450 06:BCBA: E5 0C        	sbc	<L543+dwordCnt_0+2
 13451 06:BCBC: 70 03        	bvs	L546
 13452 06:BCBE: 49 00 80     	eor	#$8000
 13453                        L546:
 13454 06:BCC1: 10 03        	bpl	L547
 13455 06:BCC3: 82 2A 00     	brl	L10216
 13456                        L547:
 13457                        ;   {
 13458                        	.line	3795
 13459                        ;      pio_outdword( addrDataReg, * (unsigned long
                     *) bufAddr );
 13460                        	.line	3796
 13461 06:BCC6: A0 02 00     	ldy	#$2
 13462 06:BCC9: B7 06        	lda	[<L543+bufAddr_0],Y
 13463 06:BCCB: 48           	pha
 13464 06:BCCC: A7 06        	lda	[<L543+bufAddr_0]
 13465 06:BCCE: 48           	pha
 13466 06:BCCF: A5 04        	lda	<L543+addrDataReg_0
 13467 06:BCD1: 29 FF 00     	and	#$ff
 13468 06:BCD4: 48           	pha
 13469 06:BCD5: 22 DC B8 06  	jsl	~~pio_outdword
 13470                        ;      bufAddr += 4;
 13471                        	.line	3797
 13472 06:BCD9: 18           	clc
 13473 06:BCDA: A9 04 00     	lda	#$4
 13474 06:BCDD: 65 06        	adc	<L543+bufAddr_0
 13475 06:BCDF: 85 06        	sta	<L543+bufAddr_0
 13476 06:BCE1: 90 02        	bcc	L548
 13477 06:BCE3: E6 08        	inc	<L543+bufAddr_0+2
 13478                        L548:
 13479                        ;      dwordCnt -- ;
 13480                        	.line	3798
 13481 06:BCE5: A5 0A        	lda	<L543+dwordCnt_0
 13482 06:BCE7: D0 02        	bne	L549
 13483 06:BCE9: C6 0C        	dec	<L543+dwordCnt_0+2
 13484                        L549:
 13485 06:BCEB: C6 0A        	dec	<L543+dwordCnt_0
 13486                        ;   }
  Thu Jul 29 2021 11:55                                                Page 255


 13487                        	.line	3799
 13488 06:BCED: 82 C1 FF     	brl	L10215
 13489                        L10216:
 13490                        ;}
 13491                        	.line	3800
 13492                        L550:
 13493 06:BCF0: A5 02        	lda	<L543+2
 13494 06:BCF2: 85 0C        	sta	<L543+2+10
 13495 06:BCF4: A5 01        	lda	<L543+1
 13496 06:BCF6: 85 0B        	sta	<L543+1+10
 13497 06:BCF8: 2B           	pld
 13498 06:BCF9: 3B           	tsc
 13499 06:BCFA: 18           	clc
 13500 06:BCFB: 69 0A 00     	adc	#L543+10
 13501 06:BCFE: 1B           	tcs
 13502 06:BCFF: 6B           	rtl
 13503                        	.endblock	3800
 13504             00000000   L543	equ	0
 13505             00000001   L544	equ	1
 13506 06:BD00:              	ends
 13507                        	efunc
 13508                        	.endfunc	3800,1,0
 13509                        	.line	3800
 13510                        ;
 13511                        ;
 13512                        ;//***********************************************
                    **************
 13513                        ;//
 13514                        ;// Command timing functions
 13515                        ;//
 13516                        ;//***********************************************
                    ***************
 13517                        ;
 13518                        ;
 13519                        ;static long tmr_cmd_start_time;      // command s
                    tart time - see the
 13520                        ;                              // tmr_set_timeout(
                    ) and
 13521                        ;                              // tmr_chk_timeout(
                    ) functions.
 13522                        ;
 13523                        ;//***********************************************
                    **************
 13524                        ;//
 13525                        ;// tmr_set_timeout() - get the command start time
 13526                        ;//
 13527                        ;//***********************************************
                    ***************
 13528                        ;
 13529                        ;static void tmr_set_timeout( void )
 13530                        ;
 13531                        ;{
 13532                        	.line	3820
 13533                        	.line	3822
 13534                        	FXHDD
 13535                        	func
 13536                        	.function	3822
 13537                        ~~tmr_set_timeout:
  Thu Jul 29 2021 11:55                                                Page 256


 13538                        	longa	on
 13539                        	longi	on
 13540 06:BD00: 3B           	tsc
 13541 06:BD01: 38           	sec
 13542 06:BD02: E9 00 00     	sbc	#L551
 13543 06:BD05: 1B           	tcs
 13544 06:BD06: 0B           	phd
 13545 06:BD07: 5B           	tcd
 13546                        	.block	3822
 13547                        ;	k_debug_long("tmr_set_timeout:",tmr_cmd_start_ti
                    me);
 13548                        	.line	3823
 13549 06:BD08: AD xx xx     	lda	|~~tmr_cmd_start_time+2
 13550 06:BD0B: 48           	pha
 13551 06:BD0C: AD xx xx     	lda	|~~tmr_cmd_start_time
 13552 06:BD0F: 48           	pha
 13553 06:BD10: F4 xx xx     	pea	#^L407
 13554 06:BD13: F4 xx xx     	pea	#<L407
 13555 06:BD16: 22 xx xx xx  	jsl	~~k_debug_long
 13556                        ;   // get the command start time
 13557                        ;   tmr_cmd_start_time = 0L;// k_get_systemtimer()
                    ;
 13558                        	.line	3825
 13559 06:BD1A: 9C xx xx     	stz	|~~tmr_cmd_start_time
 13560 06:BD1D: 9C xx xx     	stz	|~~tmr_cmd_start_time+2
 13561                        ;}
 13562                        	.line	3826
 13563                        L554:
 13564 06:BD20: 2B           	pld
 13565 06:BD21: 3B           	tsc
 13566 06:BD22: 18           	clc
 13567 06:BD23: 69 00 00     	adc	#L551
 13568 06:BD26: 1B           	tcs
 13569 06:BD27: 6B           	rtl
 13570                        	.endblock	3826
 13571             00000000   L551	equ	0
 13572             00000001   L552	equ	1
 13573 06:BD28:              	ends
 13574                        	efunc
 13575                        	.endfunc	3826,1,0
 13576                        	.line	3826
 13577                        	data
 13578                        L407:
 13579 00:0449: 74 6D 72 5F  	db	$74,$6D,$72,$5F,$73,$65,$74,$5F,$74,$69,
                    $6D,$65,$6F,$75,$74
       00:044D: 73 65 74 5F 
       00:0451: 74 69 6D 65 
       00:0455: 6F 75 74 
 13580 00:0458: 3A 00        	db	$3A,$00
 13581 00:045A:              	ends
 13582                        ;
 13583                        ;//***********************************************
                    **************
 13584                        ;//
 13585                        ;// tmr_chk_timeout() - check for command timeout.
 13586                        ;//
 13587                        ;// Gives non-zero return if command has timed out
                    .
  Thu Jul 29 2021 11:55                                                Page 257


 13588                        ;//
 13589                        ;//***********************************************
                    ***************
 13590                        ;
 13591                        ;static int tmr_chk_timeout( void )
 13592                        ;
 13593                        ;{
 13594                        	.line	3836
 13595                        	.line	3838
 13596                        	FXHDD
 13597                        	func
 13598                        	.function	3838
 13599                        ~~tmr_chk_timeout:
 13600                        	longa	on
 13601                        	longi	on
 13602 06:BD28: 3B           	tsc
 13603 06:BD29: 38           	sec
 13604 06:BD2A: E9 08 00     	sbc	#L556
 13605 06:BD2D: 1B           	tcs
 13606 06:BD2E: 0B           	phd
 13607 06:BD2F: 5B           	tcd
 13608                        	.block	3838
 13609                        ;   long curTime;
 13610                        ;
 13611                        ;   // get current time
 13612                        ;   curTime++; //= k_get_systemtimer();
 13613             00000000   curTime_1	set	0
 13614                        	.sym	curTime,0,7,1,32
 13615                        	.line	3842
 13616 06:BD30: E6 05        	inc	<L557+curTime_1
 13617 06:BD32: D0 02        	bne	L559
 13618 06:BD34: E6 07        	inc	<L557+curTime_1+2
 13619                        L559:
 13620                        ;
 13621                        ;   k_debug_long("reg_reset:tmr_cmd_start_time:",t
                    mr_cmd_start_time);
 13622                        	.line	3844
 13623 06:BD36: AD xx xx     	lda	|~~tmr_cmd_start_time+2
 13624 06:BD39: 48           	pha
 13625 06:BD3A: AD xx xx     	lda	|~~tmr_cmd_start_time
 13626 06:BD3D: 48           	pha
 13627 06:BD3E: F4 xx xx     	pea	#^L555
 13628 06:BD41: F4 xx xx     	pea	#<L555
 13629 06:BD44: 22 xx xx xx  	jsl	~~k_debug_long
 13630                        ;   k_debug_long("reg_reset:tmr_chk_timeout:",curT
                    ime);
 13631                        	.line	3845
 13632 06:BD48: D4 07        	pei	<L557+curTime_1+2
 13633 06:BD4A: D4 05        	pei	<L557+curTime_1
 13634 06:BD4C: F4 xx xx     	pea	#^L555+30
 13635 06:BD4F: F4 xx xx     	pea	#<L555+30
 13636 06:BD52: 22 xx xx xx  	jsl	~~k_debug_long
 13637                        ;
 13638                        ;   // timed out yet ?
 13639                        ;   if ( curTime >= ( tmr_cmd_start_time + ( TMR_T
                    IME_OUT * SYSTEM_TIMER_TICKS_PER_SECOND ) ) )
 13640                        	.line	3848
 13641                        ;      return 1;      // yes
  Thu Jul 29 2021 11:55                                                Page 258


 13642 06:BD56: 18           	clc
 13643 06:BD57: A9 64 00     	lda	#$64
 13644 06:BD5A: 6D xx xx     	adc	|~~tmr_cmd_start_time
 13645 06:BD5D: 85 01        	sta	<R0
 13646 06:BD5F: A9 00 00     	lda	#$0
 13647 06:BD62: 6D xx xx     	adc	|~~tmr_cmd_start_time+2
 13648 06:BD65: 85 03        	sta	<R0+2
 13649 06:BD67: 38           	sec
 13650 06:BD68: A5 05        	lda	<L557+curTime_1
 13651 06:BD6A: E5 01        	sbc	<R0
 13652 06:BD6C: A5 07        	lda	<L557+curTime_1+2
 13653 06:BD6E: E5 03        	sbc	<R0+2
 13654 06:BD70: 70 03        	bvs	L560
 13655 06:BD72: 49 00 80     	eor	#$8000
 13656                        L560:
 13657 06:BD75: 30 03        	bmi	L561
 13658 06:BD77: 82 0D 00     	brl	L10217
 13659                        L561:
 13660                        	.line	3849
 13661 06:BD7A: A9 01 00     	lda	#$1
 13662                        L562:
 13663 06:BD7D: A8           	tay
 13664 06:BD7E: 2B           	pld
 13665 06:BD7F: 3B           	tsc
 13666 06:BD80: 18           	clc
 13667 06:BD81: 69 08 00     	adc	#L556
 13668 06:BD84: 1B           	tcs
 13669 06:BD85: 98           	tya
 13670 06:BD86: 6B           	rtl
 13671                        ;
 13672                        ;   // no timeout yet
 13673                        ;   return 0;
 13674                        L10217:
 13675                        	.line	3852
 13676 06:BD87: A9 00 00     	lda	#$0
 13677 06:BD8A: 82 F0 FF     	brl	L562
 13678                        ;}
 13679                        	.line	3853
 13680                        	.endblock	3853
 13681             00000008   L556	equ	8
 13682             00000005   L557	equ	5
 13683 06:BD8D:              	ends
 13684                        	efunc
 13685                        	.endfunc	3853,5,8
 13686                        	.line	3853
 13687                        	data
 13688                        L555:
 13689 00:045A: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
                    $74,$6D,$72,$5F,$63
       00:045E: 72 65 73 65 
       00:0462: 74 3A 74 6D 
       00:0466: 72 5F 63 
 13690 00:0469: 6D 64 5F 73  	db	$6D,$64,$5F,$73,$74,$61,$72,$74,$5F,$74,
                    $69,$6D,$65,$3A,$00
       00:046D: 74 61 72 74 
       00:0471: 5F 74 69 6D 
       00:0475: 65 3A 00 
 13691 00:0478: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
  Thu Jul 29 2021 11:55                                                Page 259


                    $74,$6D,$72,$5F,$63
       00:047C: 72 65 73 65 
       00:0480: 74 3A 74 6D 
       00:0484: 72 5F 63 
 13692 00:0487: 68 6B 5F 74  	db	$68,$6B,$5F,$74,$69,$6D,$65,$6F,$75,$74,
                    $3A,$00
       00:048B: 69 6D 65 6F 
       00:048F: 75 74 3A 00 
 13693 00:0493:              	ends
 13694                        ;
 13695                        ;
 13696                        ;int SYSTEM_WAIT_INTR_OR_TIMEOUT( void )
 13697                        ;{
 13698                        	.line	3856
 13699                        	.line	3857
 13700                        	FXHDD
 13701                        	xdef	~~SYSTEM_WAIT_INTR_OR_TIMEOUT
 13702                        	func
 13703                        	.function	3857
 13704                        ~~SYSTEM_WAIT_INTR_OR_TIMEOUT:
 13705                        	longa	on
 13706                        	longi	on
 13707 06:BD8D: 3B           	tsc
 13708 06:BD8E: 38           	sec
 13709 06:BD8F: E9 00 00     	sbc	#L564
 13710 06:BD92: 1B           	tcs
 13711 06:BD93: 0B           	phd
 13712 06:BD94: 5B           	tcd
 13713                        	.block	3857
 13714                        ;#asm
 13715                        	.line	3858
 13716                        ;	NOP
 13717                        ;	NOP
 13718                        ;	NOP
 13719                        ;	NOP
 13720                        ;	NOP
 13721                        ;	NOP
 13722                        ;	NOP
 13723                        ;	NOP
 13724                        ;	NOP
 13725                        ;	NOP
 13726                        ;#endasm
 13727                        	asmstart
 13728 06:BD95: EA           	NOP
 13729 06:BD96: EA           	NOP
 13730 06:BD97: EA           	NOP
 13731 06:BD98: EA           	NOP
 13732 06:BD99: EA           	NOP
 13733 06:BD9A: EA           	NOP
 13734 06:BD9B: EA           	NOP
 13735 06:BD9C: EA           	NOP
 13736 06:BD9D: EA           	NOP
 13737 06:BD9E: EA           	NOP
 13738                        	asmend
 13739                        ;	return 0;
 13740                        	.line	3870
 13741 06:BD9F: A9 00 00     	lda	#$0
 13742                        L567:
  Thu Jul 29 2021 11:55                                                Page 260


 13743 06:BDA2: A8           	tay
 13744 06:BDA3: 2B           	pld
 13745 06:BDA4: 3B           	tsc
 13746 06:BDA5: 18           	clc
 13747 06:BDA6: 69 00 00     	adc	#L564
 13748 06:BDA9: 1B           	tcs
 13749 06:BDAA: 98           	tya
 13750 06:BDAB: 6B           	rtl
 13751                        ;}
 13752                        	.line	3871
 13753                        	.endblock	3871
 13754             00000000   L564	equ	0
 13755             00000001   L565	equ	1
 13756 06:BDAC:              	ends
 13757                        	efunc
 13758                        	.endfunc	3871,1,0
 13759                        	.line	3871
 13760                        ;
 13761                        ;// end mindrvr.c
 13762                        ;
 13763                        ;#endif
 13764                        ;
 13765                        	.line	3875
 13766                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\MINDRVR.C",3856
 13767                        	xref	~~k_mem_allocate_heap
 13768                        	xref	~~k_debug_byte_array
 13769                        	xref	~~k_debug_bits
 13770                        	xref	~~k_debug_hex
 13771                        	xref	~~k_debug_long
 13772                        	xref	~~k_debug_integer
 13773                        	xref	~~k_debug_string
 13774                        	udata
 13775                        ~~tmr_cmd_start_time
 13776 00:0000:              	ds	4
 13777 00:0004:              	ends
 13778                        	udata
 13779                        	xdef	~~pio_bmide_base_addr
 13780                        ~~pio_bmide_base_addr
 13781 00:0004:              	ds	4
 13782 00:0008:              	ends
 13783                        	udata
 13784                        	xdef	~~reg_config_info
 13785                        ~~reg_config_info
 13786 00:0008:              	ds	4
 13787 00:000C:              	ends
 13788                        	udata
 13789                        	xdef	~~reg_cmd_info
 13790                        ~~reg_cmd_info
 13791 00:000C:              	ds	41
 13792 00:0035:              	ends
 13793                        	udata
 13794                        	xdef	~~int_bmide_status
 13795                        ~~int_bmide_status
 13796 00:0035:              	ds	1
 13797 00:0036:              	ends
 13798                        	udata
 13799                        	xdef	~~int_ata_status
  Thu Jul 29 2021 11:55                                                Page 261


 13800                        ~~int_ata_status
 13801 00:0036:              	ds	1
 13802 00:0037:              	ends
 13803                        	.sym	~~exec_pio_data_out_cmd,~~exec_pio_data_
                    out_cmd,69,3,0
 13804                        	.sym	~~exec_pio_data_in_cmd,~~exec_pio_data_i
                    n_cmd,69,2,0
 13805                        	.sym	~~exec_non_data_cmd,~~exec_non_data_cmd,
                    69,3,0
 13806                        	.sym	~~k_read_lba_sector_old,~~k_read_lba_sec
                    tor_old,65,2,0
 13807                        	.sym	~~k_ide_get_info_old,~~k_ide_get_info_ol
                    d,1102,2,32
 13808                        	.sym	~~ide_select_drive,~~ide_select_drive,65
                    ,2,0
 13809                        	.sym	~~k_ide_read_sector,~~k_ide_read_sector,
                    1102,2,32
 13810                        	.sym	~~k_ide_not_drq,~~k_ide_not_drq,65,2,0
 13811                        	.sym	~~k_ide_drive_ready_notbusy,~~k_ide_driv
                    e_ready_notbusy,65,2,0
 13812                        	.sym	~~k_ide_drive_ready,~~k_ide_drive_ready,
                    65,2,0
 13813                        	.sym	~~tmr_chk_timeout,~~tmr_chk_timeout,69,3
                    ,0
 13814                        	.sym	~~tmr_set_timeout,~~tmr_set_timeout,65,3
                    ,0
 13815                        	.sym	~~tmr_cmd_start_time,~~tmr_cmd_start_tim
                    e,7,3,32
 13816                        	.sym	~~pio_writeBusMstrStatus,~~pio_writeBusM
                    strStatus,65,3,0
 13817                        	.sym	~~pio_writeBusMstrCmd,~~pio_writeBusMstr
                    Cmd,65,3,0
 13818                        	.sym	~~pio_readBusMstrStatus,~~pio_readBusMst
                    rStatus,78,3,0
 13819                        	.sym	~~pio_readBusMstrCmd,~~pio_readBusMstrCm
                    d,78,3,0
 13820                        	.sym	~~pio_rep_outdword,~~pio_rep_outdword,65
                    ,3,0
 13821                        	.sym	~~pio_rep_indword,~~pio_rep_indword,65,3
                    ,0
 13822                        	.sym	~~pio_rep_outword,~~pio_rep_outword,65,3
                    ,0
 13823                        	.sym	~~pio_rep_inword,~~pio_rep_inword,65,3,0
 13824                        	.sym	~~pio_rep_outbyte,~~pio_rep_outbyte,65,3
                    ,0
 13825                        	.sym	~~pio_rep_inbyte,~~pio_rep_inbyte,65,3,0
 13826                        	.sym	~~pio_drq_block_out,~~pio_drq_block_out,
                    65,3,0
 13827                        	.sym	~~pio_drq_block_in,~~pio_drq_block_in,65
                    ,3,0
 13828                        	.sym	~~pio_outdword,~~pio_outdword,65,3,0
 13829                        	.sym	~~pio_indword,~~pio_indword,82,3,0
 13830                        	.sym	~~pio_outword,~~pio_outword,65,3,0
 13831                        	.sym	~~pio_inword,~~pio_inword,80,3,0
 13832                        	.sym	~~pio_outbyte,~~pio_outbyte,65,3,0
 13833                        	.sym	~~pio_inbyte,~~pio_inbyte,78,3,0
 13834                        	.sym	~~sub_wait_poll,~~sub_wait_poll,65,3,0
 13835                        	.sym	~~sub_select,~~sub_select,69,3,0
  Thu Jul 29 2021 11:55                                                Page 262


 13836                        	.sym	~~sub_trace_command,~~sub_trace_command,
                    65,3,0
 13837                        	.sym	~~sub_setup_command,~~sub_setup_command,
                    65,3,0
 13838                        	.sym	~~pio_reg_addrs,~~pio_reg_addrs,1134,2,3
                    2,9
 13839                        	.sym	~~pio_bmide_base_addr,~~pio_bmide_base_a
                    ddr,142,2,32
 13840                        	.sym	ide_private_data,0,10,14,8,91
 13841                        	.sym	~~reg_packet,~~reg_packet,69,2,0
 13842                        	.sym	~~reg_pio_data_out_lba48,~~reg_pio_data_
                    out_lba48,69,2,0
 13843                        	.sym	~~reg_pio_data_out_lba28,~~reg_pio_data_
                    out_lba28,69,2,0
 13844                        	.sym	~~reg_pio_data_in_lba48,~~reg_pio_data_i
                    n_lba48,69,2,0
 13845                        	.sym	~~reg_pio_data_in_lba28,~~reg_pio_data_i
                    n_lba28,69,2,0
 13846                        	.sym	~~reg_non_data_lba48,~~reg_non_data_lba4
                    8,69,2,0
 13847                        	.sym	~~reg_non_data_lba28,~~reg_non_data_lba2
                    8,69,2,0
 13848                        	.sym	~~reg_reset,~~reg_reset,69,2,0
 13849                        	.sym	~~reg_config,~~reg_config,69,2,0
 13850                        	.sym	~~k_ide_poll,~~k_ide_poll,65,2,0
 13851                        	.sym	~~k_read_hd_sector,~~k_read_hd_sector,78
                    ,2,0
 13852                        	.sym	~~k_read_lba_sector,~~k_read_lba_sector,
                    65,2,0
 13853                        	.sym	~~k_ide_diagnostic,~~k_ide_diagnostic,65
                    ,2,0
 13854                        	.sym	~~k_ide_get_info,~~k_ide_get_info,1102,2
                    ,32
 13855                        	.sym	~~k_ide_wait,~~k_ide_wait,65,2,0
 13856                        	.sym	~~k_ide_busy,~~k_ide_busy,65,2,0
 13857                        	.sym	~~k_ide_isdrq,~~k_ide_isdrq,65,2,0
 13858                        	.sym	~~k_ide_isready,~~k_ide_isready,65,2,0
 13859                        	.sym	~~k_ide_isbusy,~~k_ide_isbusy,65,2,0
 13860                        	.sym	~~k_ide_init,~~k_ide_init,65,2,0
 13861                        	.sym	~~reg_config_info,~~reg_config_info,101,
                    2,0,2
 13862                        	.sym	~~reg_cmd_info,~~reg_cmd_info,10,2,328,9
                    0
 13863                        	.sym	~~pio_xfer_width,~~pio_xfer_width,14,2,8
 13864                        	.sym	~~int_use_intr_flag,~~int_use_intr_flag,
                    14,2,8
 13865                        	.sym	~~int_bmide_status,~~int_bmide_status,14
                    ,2,8
 13866                        	.sym	~~int_ata_status,~~int_ata_status,14,2,8
 13867                        	.sym	~~SYSTEM_WAIT_INTR_OR_TIMEOUT,~~SYSTEM_W
                    AIT_INTR_OR_TIMEOUT,69,2,0
 13868                        	.sym	FRESULT,0,5,14,16
 13869                        	.sym	MKFS_PARM,0,10,14,80,89
 13870                        	.sym	FILINFO,0,10,14,2224,88
 13871                        	.sym	DIR,0,10,14,416,87
 13872                        	.sym	FIL,0,10,14,4400,86
 13873                        	.sym	FFOBJID,0,10,14,128,85
 13874                        	.sym	FATFS,0,10,14,4504,84
  Thu Jul 29 2021 11:55                                                Page 263


 13875                        	.sym	LBA_t,0,18,14,32
 13876                        	.sym	FSIZE_t,0,18,14,32
 13877                        	.sym	TCHAR,0,14,14,8
 13878                        	.sym	PCOMMANDARGS,0,138,14,32,83
 13879                        	.sym	COMMANDARGS,0,10,14,64,83
 13880                        	.sym	PTOKENIZESTATE,0,133,14,32
 13881                        	.sym	TOKENIZESTATE,0,5,14,16
 13882                        	.sym	PTOKEN,0,138,14,32,82
 13883                        	.sym	TOKEN,0,10,14,64,82
 13884                        	.sym	PTOKENTYPE,0,133,14,32
 13885                        	.sym	TOKENTYPE,0,5,14,16
 13886                        	.sym	FXCommandHandler,0,656,14,32
 13887                        	.sym	PCONSOLECTX,0,138,14,32,81
 13888                        	.sym	CONSOLECTX,0,10,14,1144,81
 13889                        	.sym	PSPINNERCTX,0,138,14,32,80
 13890                        	.sym	SPINNERCTX,0,10,14,48,80
 13891                        	.sym	HCLIP,0,138,14,32,79
 13892                        	.sym	PCLIPBOARD_DATA,0,138,14,32,79
 13893                        	.sym	CLIPBOARD_DATA,0,10,14,168,79
 13894                        	.sym	PEVENTMANAGER,0,138,14,32,78
 13895                        	.sym	EVENTMANAGER,0,10,14,192,78
 13896                        	.sym	EV_RUN,0,656,14,32
 13897                        	.sym	EV_QUERY_METRIC,0,656,14,32
 13898                        	.sym	EV_CONFIGURE,0,656,14,32
 13899                        	.sym	EV_UNINIT,0,641,14,32
 13900                        	.sym	EV_INIT,0,8833,14,32
 13901                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,77
 13902                        	.sym	MOUSE_MSG_STATE,0,10,14,184,77
 13903                        	.sym	PFXEVENTPROCESS,0,138,14,32,76
 13904                        	.sym	FXEVENTPROCESS,0,10,14,64,76
 13905                        	.sym	PMARSHALDATA,0,139,14,32,75
 13906                        	.sym	MARSHALDATA,0,11,14,32,75
 13907                        	.sym	FXIDLEPROCESS,0,641,14,32
 13908                        	.sym	FXEventProc,0,641,14,32
 13909                        	.sym	PMOUSEMSGDATA,0,138,14,32,74
 13910                        	.sym	MOUSEMSGDATA,0,10,14,64,74
 13911                        	.sym	MSGIRQ,0,5,14,16
 13912                        	.sym	MAINLOOPARGS,0,10,14,16,73
 13913                        	.sym	PEACHCHILD_MSG,0,138,14,32,72
 13914                        	.sym	EACHCHILD_MSG,0,10,14,64,72
 13915                        	.sym	PMSGBOX_DATA,0,138,14,32,71
 13916                        	.sym	MSGBOX_DATA,0,10,14,96,71
 13917                        	.sym	PDESKTOP_DATA,0,138,14,32,70
 13918                        	.sym	DESKTOP_DATA,0,10,14,64,70
 13919                        	.sym	PWINDOWMANAGER,0,138,14,32,69
 13920                        	.sym	WINDOWMANAGER,0,10,14,160,69
 13921                        	.sym	WM_DOPROCS,0,641,14,32
 13922                        	.sym	WM_QUERY_METRIC,0,656,14,32
 13923                        	.sym	WM_CONFIGURE,0,656,14,32
 13924                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
 13925                        	.sym	WM_EVENTS,0,641,14,32
 13926                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,68
 13927                        	.sym	CUR_PALETTE_MAP,0,10,14,400,68
 13928                        	.sym	PCLICKDETECTED,0,138,14,32,67
 13929                        	.sym	CLICKDETECTED,0,10,14,64,67
 13930                        	.sym	OBJECTCLICKED,0,641,14,32
 13931                        	.sym	PALLOCATIONHEADER,0,138,14,32,66
 13932                        	.sym	ALLOCATIONHEADER,0,10,14,80,66
  Thu Jul 29 2021 11:55                                                Page 264


 13933                        	.sym	PIPCPORT,0,138,14,32,65
 13934                        	.sym	IPCPORT,0,10,14,144,65
 13935                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
 13936                        	.sym	MemoryCallback,0,641,14,32
 13937                        	.sym	PFXMEMORYMAP,0,138,14,32,64
 13938                        	.sym	FXMEMORYMAP,0,10,14,2072,64
 13939                        	.sym	UMM_HEAP_INFO,0,10,14,256,63
 13940                        	.sym	PEXECUTIVE,0,138,14,32,62
 13941                        	.sym	EXECUTIVE,0,10,14,128,62
 13942                        	.sym	EX_QUERY_METRIC,0,656,14,32
 13943                        	.sym	EX_CONFIGURE,0,656,14,32
 13944                        	.sym	EX_UNINIT,0,641,14,32
 13945                        	.sym	EX_INIT,0,8833,14,32
 13946                        	.sym	PFXSTRING,0,138,14,32,61
 13947                        	.sym	FXSTRING,0,10,14,64,61
 13948                        	.sym	PIRQCHAIN,0,138,14,32,60
 13949                        	.sym	IRQCHAIN,0,10,14,128,60
 13950                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
 13951                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
 13952                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
 13953                        	.sym	DEVICEDRIVER_READ,0,656,14,32
 13954                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
 13955                        	.sym	DEVICEDRIVER_IRQ,0,641,14,32
 13956                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,59
 13957                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,59
 13958                        	.sym	GETDRIVERDEF,0,8842,14,32,58
 13959                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,58
 13960                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,58
 13961                        	.sym	~~k_debug_byte_array,~~k_debug_byte_arra
                    y,65,18,0
 13962                        	.sym	~~k_debug_bits,~~k_debug_bits,65,18,0
 13963                        	.sym	~~k_debug_hex,~~k_debug_hex,65,18,0
 13964                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
 13965                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
 13966                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
 13967                        	.sym	PSEGMENTHEADER,0,138,14,32,57
 13968                        	.sym	SEGMENTHEADER,0,10,14,160,57
 13969                        	.sym	PDEBUGBYTEBITS,0,138,14,32,56
 13970                        	.sym	DEBUGBYTEBITS,0,10,14,8,56
 13971                        	.sym	PFXENVIRONMENT,0,138,14,32,55
 13972                        	.sym	FXENVIRONMENT,0,10,14,96,55
 13973                        	.sym	PFXZEROPAGE,0,138,14,32,54
 13974                        	.sym	FXZEROPAGE,0,10,14,720,54
 13975                        	.sym	IRQBUFFER,0,10,14,32,53
 13976                        	.sym	KERNELTRAPCALL,0,641,14,32
 13977                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,52
 13978                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,52
 13979                        	.sym	FOREACHNODEUNTIL,0,654,14,32
 13980                        	.sym	FOREACHNODE,0,641,14,32
 13981                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,51
 13982                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,51
 13983                        	.sym	PFXRFHEADER_STRING,0,138,14,32,50
 13984                        	.sym	FXRFHEADER_STRING,0,10,14,32,50
 13985                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
 13986                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
  Thu Jul 29 2021 11:55                                                Page 265


 13987                        	.sym	PFXRFHEADER,0,138,14,32,48
 13988                        	.sym	FXRFHEADER,0,10,14,72,48
 13989                        	.sym	PFXCOMBUFFER,0,138,14,32,47
 13990                        	.sym	FXCOMBUFFER,0,10,14,2080,47
 13991                        	.sym	PSUBMENULIST,0,138,14,32,46
 13992                        	.sym	SUBMENULIST,0,10,14,40,46
 13993                        	.sym	HSUBMENU,0,7,14,32
 13994                        	.sym	PSUBMENU,0,138,14,32,45
 13995                        	.sym	SUBMENU,0,10,14,64,45
 13996                        	.sym	MenuAction,0,641,14,32
 13997                        	.sym	PMENUANCHOR,0,138,14,32,44
 13998                        	.sym	MENUANCHOR,0,10,14,272,44
 13999                        	.sym	PMSGBOX,0,138,14,32,43
 14000                        	.sym	MSGBOX,0,10,14,144,43
 14001                        	.sym	PTEXTBOX,0,138,14,32,42
 14002                        	.sym	TEXTBOX,0,10,14,144,42
 14003                        	.sym	PLISTBOX,0,138,14,32,41
 14004                        	.sym	LISTBOX,0,10,14,240,41
 14005                        	.sym	PSCROLLBAR,0,138,14,32,40
 14006                        	.sym	SCROLLBAR,0,10,14,240,40
 14007                        	.sym	PBUTTON,0,138,14,32,39
 14008                        	.sym	BUTTON,0,10,14,96,39
 14009                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
 14010                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
 14011                        	.sym	PMENUTAG,0,138,14,32,37
 14012                        	.sym	MENUTAG,0,10,14,160,37
 14013                        	.sym	PMENU,0,138,14,32,36
 14014                        	.sym	MENU,0,10,14,280,36
 14015                        	.sym	HMENURESOURCE,0,129,14,32
 14016                        	.sym	FONTMETRIC,0,10,14,32,35
 14017                        	.sym	TITLE,0,142,14,32
 14018                        	.sym	PHANDLE,0,1153,14,32
 14019                        	.sym	HANDLE,0,129,14,32
 14020                        	.sym	PWINDOWEX,0,138,14,32,34
 14021                        	.sym	WINDOWEX,0,10,14,3880,34
 14022                        	.sym	PWINDOW,0,138,14,32,33
 14023                        	.sym	WINDOW,0,10,14,3904,33
 14024                        	.sym	PDRAGDATA,0,138,14,32,32
 14025                        	.sym	DRAGDATA,0,10,14,216,32
 14026                        	.sym	PNCCLICKABLE,0,138,14,32,31
 14027                        	.sym	NCCLICKABLE,0,10,14,136,31
 14028                        	.sym	HCLICKABLE,0,7,14,32
 14029                        	.sym	PCLICKABLE,0,138,14,32,30
 14030                        	.sym	CLICKABLE,0,10,14,152,30
 14031                        	.sym	PWNDCLASS,0,138,14,32,29
 14032                        	.sym	WNDCLASS,0,10,14,272,29
 14033                        	.sym	HBRUSH,0,129,14,32
 14034                        	.sym	HCURSOR,0,129,14,32
 14035                        	.sym	HICON,0,129,14,32
 14036                        	.sym	HINSTANCE,0,129,14,32
 14037                        	.sym	FXWndProc,0,654,14,32
 14038                        	.sym	PDRECT,0,138,14,32,28
 14039                        	.sym	DRECT,0,10,14,112,28
 14040                        	.sym	PRECTP,0,138,14,32,27
 14041                        	.sym	RECTP,0,10,14,96,27
 14042                        	.sym	PRECT,0,138,14,32,26
 14043                        	.sym	RECT,0,10,14,112,26
 14044                        	.sym	PPOINT,0,138,14,32,25
  Thu Jul 29 2021 11:55                                                Page 266


 14045                        	.sym	POINT,0,10,14,32,25
 14046                        	.sym	PFXPROPERTY,0,138,14,32,23
 14047                        	.sym	FXPROPERTY,0,10,14,384,23
 14048                        	.sym	PKEYSTATE,0,138,14,32,22
 14049                        	.sym	KEYSTATE,0,10,14,112,22
 14050                        	.sym	SCANCODE,0,14,14,8
 14051                        	.sym	KEYCODE,0,16,14,16
 14052                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
 14053                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
 14054                        	.sym	PFXPROCESS,0,138,14,32,20
 14055                        	.sym	FXPROCESS,0,10,14,800,20
 14056                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
 14057                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
 14058                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
 14059                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
 14060                        	.sym	FXProcessProc,0,641,14,32
 14061                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
 14062                        	.sym	FXCMDMESSAGE,0,10,14,312,17
 14063                        	.sym	PFXOSMESSAGE,0,138,14,32,16
 14064                        	.sym	FXOSMESSAGE,0,10,14,312,16
 14065                        	.sym	PINT_REGS,0,138,14,32,15
 14066                        	.sym	INT_REGS,0,10,14,104,15
 14067                        	.sym	TASK_STACK,0,10,14,32,14
 14068                        	.sym	TASK,0,10,14,48,13
 14069                        	.sym	PIRQDATA,0,138,14,32,12
 14070                        	.sym	IRQDATA,0,10,14,48,12
 14071                        	.sym	HMENU,0,129,14,32
 14072                        	.sym	HWND,0,129,14,32
 14073                        	.sym	MSGDATA,0,14,14,8
 14074                        	.sym	MSGDEST,0,18,14,32
 14075                        	.sym	MSGSRC,0,18,14,32
 14076                        	.sym	MSGTYPE,0,16,14,16
 14077                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
 14078                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
 14079                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
 14080                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
 14081                        	.sym	FILE_PATH_LIST,0,138,14,32,6
 14082                        	.sym	PROCEDURE_LIST,0,138,14,32,6
 14083                        	.sym	FILE_HANDLE,0,138,14,32,11
 14084                        	.sym	FILE_BLOCK,0,10,14,552,11
 14085                        	.sym	SEMAPHORE,0,10,14,16,10
 14086                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
 14087                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
 14088                        	.sym	KRESULT,0,18,14,32
 14089                        	.sym	PKERNEL_ERROR,0,138,14,32,8
 14090                        	.sym	KERNEL_ERROR,0,10,14,32,8
 14091                        	.sym	PROCESS_STATUS,0,16,14,16
 14092                        	.sym	FILE_PATH_NAME,0,142,14,32
 14093                        	.sym	PROCESS_RESOURCE,0,129,14,32
 14094                        	.sym	PROCESS_TLS,0,129,14,32
 14095                        	.sym	PROCESS_CTX,0,129,14,32
 14096                        	.sym	USERID,0,16,14,16
 14097                        	.sym	PROCESS_ID,0,18,14,32
 14098                        	.sym	PROCESS_BANK,0,14,14,8
 14099                        	.sym	PFXQUEUE,0,138,14,32,7
 14100                        	.sym	FXQUEUE,0,10,14,80,7
 14101                        	.sym	PFXNODELIST,0,138,14,32,6
 14102                        	.sym	FXNODELIST,0,10,14,96,6
  Thu Jul 29 2021 11:55                                                Page 267


 14103                        	.sym	NodeListDeallocator,0,641,14,32
 14104                        	.sym	PFXNODE,0,138,14,32,5
 14105                        	.sym	FXNODE,0,10,14,384,5
 14106                        	.sym	PBYTEBITS,0,138,14,32,4
 14107                        	.sym	BYTEBITS,0,10,14,8,4
 14108                        	.sym	HRESULT,0,18,14,32
 14109                        	.sym	LPWCHAR,0,144,14,32
 14110                        	.sym	WCHAR,0,16,14,16
 14111                        	.sym	HSTRINGTABLE,0,129,14,32
 14112                        	.sym	HCOLOR,0,129,14,32
 14113                        	.sym	HFONT,0,129,14,32
 14114                        	.sym	HDC,0,129,14,32
 14115                        	.sym	HPOINTER,0,129,14,32
 14116                        	.sym	uint32_t,0,18,14,32
 14117                        	.sym	uint8_t,0,14,14,8
 14118                        	.sym	LPBOOL,0,142,14,32
 14119                        	.sym	BOOL,0,14,14,8
 14120                        	.sym	DWORD,0,18,14,32
 14121                        	.sym	ULONG,0,18,14,32
 14122                        	.sym	LPLONG,0,135,14,32
 14123                        	.sym	LONG,0,7,14,32
 14124                        	.sym	PUINT,0,144,14,32
 14125                        	.sym	USHORT,0,16,14,16
 14126                        	.sym	UINT,0,16,14,16
 14127                        	.sym	INT,0,5,14,16
 14128                        	.sym	WORD,0,5,14,16
 14129                        	.sym	PBYTE,0,142,14,32
 14130                        	.sym	BYTE,0,14,14,8
 14131                        	.sym	IOPORT,0,142,14,32
 14132                        	.sym	PUCHAR,0,142,14,32
 14133                        	.sym	UCHAR,0,14,14,8
 14134                        	.sym	LPWCSTR,0,142,14,32
 14135                        	.sym	LPCSTR,0,142,14,32
 14136                        	.sym	LPSTR,0,142,14,32
 14137                        	.sym	LPCHAR,0,142,14,32
 14138                        	.sym	CHAR,0,14,14,8
 14139                        	.sym	PUINT_32,0,146,14,32
 14140                        	.sym	UINT_32,0,18,14,32
 14141                        	.sym	PUINT_16,0,144,14,32
 14142                        	.sym	UINT_16,0,16,14,16
 14143                        	.sym	PUINT_8,0,142,14,32
 14144                        	.sym	UINT_8,0,14,14,8
 14145                        	.sym	LPVOID,0,129,14,32
 14146                        	.sym	VOID,0,1,14,32
 14147                        	.sym	Boolean_T,0,5,14,16
 14148                        	.sym	ldiv_t,0,10,14,64,2
 14149                        	.sym	div_t,0,10,14,32,1
 14150                        	.sym	wctype_t,0,16,14,16
 14151                        	.sym	wint_t,0,16,14,16
 14152                        	.sym	wchar_t,0,14,14,8
 14153                        	.sym	ptrdiff_t,0,7,14,32
 14154                        	.sym	size_t,0,16,14,16
 14155                        	end


      Lines assembled: 14155
      Errors: 0
