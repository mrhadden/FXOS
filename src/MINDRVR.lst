  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",0
     7                        ;//***********************************************
                    *********************
     8                        ;// MINIMUM ATA LOW LEVEL I/O DRIVER -- MINDRVR.C
     9                        ;//
    10                        ;// by Hale Landis (hlandis@ata-atapi.com)
    11                        ;//
    12                        ;// There is no copyright and there are no restric
                    tions on the use
    13                        ;// of this ATA Low Level I/O Driver code.  It is 
                    distributed to
    14                        ;// help other programmers understand how the ATA 
                    device interface
    15                        ;// works and it is distributed without any warran
                    ty.  Use this
    16                        ;// code at your own risk.
    17                        ;//
    18                        ;// Minimum ATA Driver (MINDRVR) is a subset of AT
                    ADRVR. MINDRVR
    19                        ;// has a single header file and a single C file. 
                    MINDRVR can
    20                        ;// be used as the starting point for an ATADRVR f
                    or an embedded
    21                        ;// system. NOTE all the places in the MINDRVR.H a
                    nd MINDRVR.C files
    22                        ;// where there is a comment containing the string
                     "!!!".
    23                        ;//
    24                        ;// Use the header file mindrvr.h in any C files t
                    hat call MINDRVR
    25                        ;// functions.
    26                        ;//
    27                        ;// This code is based on the ATA/ATAPI-4,-5 and -
                    6 standards and
    28                        ;// on interviews with various ATA controller and 
                    drive designers.
    29                        ;//
    30                        ;// Note that MINDRVR does not support ATA CHS add
                    ressing.
    31                        ;//
    32                        ;// Most of the MINDRVR code is standard C code an
                    d should compile
    33                        ;// using any C compiler. It has been tested using
                     Borland C/C++ 4.5.
    34                        ;//
    35                        ;// This C source file is the header file for the 
  Sat Jul 10 2021  1:15                                                Page 2


                    driver
    36                        ;// and is used in the MINDRVR.C files and must al
                    so be used
    37                        ;// by any program using the MINDRVR code/function
                    s.
    38                        ;//***********************************************
                    *********************
    39                        ;
    40                        ;#if defined(USE_FX256_FMX) || defined(USE_FX256_U
                    )
    41                        ;
    42                        ;#include "mindrvr.h"
    43                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\mindrvr.h",0
    44                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
    45                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    46                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    47                        	.line	88
    48                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    49                        	.stag	fake1_,32,1
    50                        	.member	quot,0,5,8,16
    51                        	.member	rem,16,5,8,16
    52                        	.eos
    53                        	.stag	fake2_,64,2
    54                        	.member	quot,0,7,8,32
    55                        	.member	rem,32,7,8,32
    56                        	.eos
    57                        	.stag	int_sqrt,32,3
    58                        	.member	sqrt,0,16,8,16
    59                        	.member	frac,16,16,8,16
    60                        	.eos
    61                        	.line	205
    62                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
    63                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    64                        	.line	134
    65                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
    66                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    67                        	.line	103
    68                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
    69                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    70                        	.stag	_fx_bytebits,8,4
    71                        	.member	b7,0,14,17,1
    72                        	.member	b6,1,14,17,1
    73                        	.member	b5,2,14,17,1
    74                        	.member	b4,3,14,17,1
    75                        	.member	b3,4,14,17,1
    76                        	.member	b2,5,14,17,1
    77                        	.member	b1,6,14,17,1
  Sat Jul 10 2021  1:15                                                Page 3


    78                        	.member	b0,7,14,17,1
    79                        	.eos
    80                        	.stag	_fx_node,384,5
    81                        	.member	type,0,14,8,8
    82                        	.member	Reserved0,8,14,8,8
    83                        	.member	data,16,129,8,32
    84                        	.member	last,48,138,8,32,5
    85                        	.member	next,80,138,8,32,5
    86                        	.member	name,112,110,8,0,32
    87                        	.member	Reserved1,368,16,8,16
    88                        	.eos
    89                        	.stag	_fx_nodelist,96,6
    90                        	.member	listhead,0,138,8,32,5
    91                        	.member	listData,32,129,8,32
    92                        	.member	deallocator,64,641,8,32
    93                        	.eos
    94                        	.stag	_fx_queue,80,7
    95                        	.member	count,0,5,8,16
    96                        	.member	front,16,138,8,32,5
    97                        	.member	rear,48,138,8,32,5
    98                        	.eos
    99                        	.stag	fake8_,32,8
   100                        	.member	subsystem,0,14,8,8
   101                        	.member	level,8,14,8,8
   102                        	.member	error,16,16,8,16
   103                        	.eos
   104                        	.stag	_fx_process_signal,16,9
   105                        	.member	cbSize,0,16,8,16
   106                        	.eos
   107                        	.stag	_fx_semaphore,16,10
   108                        	.member	reserved,0,5,8,16
   109                        	.eos
   110                        	.stag	_fx_fileBlock,552,11
   111                        	.member	openCount,0,16,8,16
   112                        	.member	lockCount,16,16,8,16
   113                        	.member	dirty,32,14,8,8
   114                        	.member	fileBuffer,40,110,8,0,64
   115                        	.eos
   116                        	.stag	_fx_irq_data,48,12
   117                        	.member	line,0,5,8,16
   118                        	.member	keycode,16,142,8,32
   119                        	.eos
   120                        	.stag	_task,48,13
   121                        	.member	SPL,0,14,8,8
   122                        	.member	SPH,8,14,8,8
   123                        	.member	pstack,16,142,8,32
   124                        	.eos
   125                        	.stag	_task_stack,32,14
   126                        	.member	SS,0,142,8,32
   127                        	.eos
   128                        	.stag	int_regs,104,15
   129                        	.member	PB,0,14,8,8
   130                        	.member	PH,8,14,8,8
   131                        	.member	PL,16,14,8,8
   132                        	.member	PP,24,14,8,8
   133                        	.member	DB,32,14,8,8
   134                        	.member	DH,40,14,8,8
   135                        	.member	DL,48,14,8,8
  Sat Jul 10 2021  1:15                                                Page 4


   136                        	.member	AH,56,14,8,8
   137                        	.member	AL,64,14,8,8
   138                        	.member	XH,72,14,8,8
   139                        	.member	XL,80,14,8,8
   140                        	.member	YH,88,14,8,8
   141                        	.member	YL,96,14,8,8
   142                        	.eos
   143                        	.stag	_fx_eventMessage,304,16
   144                        	.member	src,0,18,8,32
   145                        	.member	dest,32,18,8,32
   146                        	.member	type,64,16,8,16
   147                        	.member	hwnd,80,129,8,32
   148                        	.member	pheap,112,129,8,32
   149                        	.member	msgTime,144,18,8,32
   150                        	.member	data,176,110,8,0,16
   151                        	.eos
   152                        	.stag	_fx_cmdMessage,304,17
   153                        	.member	src,0,18,8,32
   154                        	.member	dest,32,18,8,32
   155                        	.member	type,64,16,8,16
   156                        	.member	hwnd,80,129,8,32
   157                        	.member	pheap,112,129,8,32
   158                        	.member	msgTime,144,18,8,32
   159                        	.member	cmdCId,176,16,8,16
   160                        	.member	cmdMId,192,16,8,16
   161                        	.member	parameter1,208,18,8,32
   162                        	.member	parameter2,240,18,8,32
   163                        	.member	parameter3,272,18,8,32
   164                        	.eos
   165                        	.stag	_fx_console_ctl,448,18
   166                        	.member	maxCols,0,5,8,16
   167                        	.member	maxRows,16,5,8,16
   168                        	.member	curX,32,5,8,16
   169                        	.member	curY,48,5,8,16
   170                        	.member	fgColor,64,5,8,16
   171                        	.member	bgColor,80,5,8,16
   172                        	.member	mode,96,14,8,8
   173                        	.member	kbBuffer,104,101,8,0,16
   174                        	.member	screenBuffer,360,142,8,32
   175                        	.member	desktopMode,392,14,8,8
   176                        	.member	lastMouseButton,400,5,8,16
   177                        	.member	lastMouseX,416,5,8,16
   178                        	.member	lastMouseY,432,5,8,16
   179                        	.eos
   180                        	.stag	_fx_desktop_ctl,392,19
   181                        	.member	desktopMode,0,14,8,8
   182                        	.member	cursorCtl,8,5,8,16
   183                        	.member	cursorState,24,5,8,16
   184                        	.member	backgroundColor,40,5,8,16
   185                        	.member	foregroundColor,56,5,8,16
   186                        	.member	menuMode,72,5,8,16
   187                        	.member	lastMouseButton,88,5,8,16
   188                        	.member	lastMouseX,104,5,8,16
   189                        	.member	lastMouseY,120,5,8,16
   190                        	.member	currentDiskName,136,142,8,32
   191                        	.member	diskNodes,168,129,8,32
   192                        	.member	titleNodes,200,129,8,32
   193                        	.member	menuNodes,232,129,8,32
  Sat Jul 10 2021  1:15                                                Page 5


   194                        	.member	iconNodes,264,129,8,32
   195                        	.member	windowNodes,296,129,8,32
   196                        	.member	fontNodes,328,129,8,32
   197                        	.member	wndProc,360,138,8,32,6
   198                        	.eos
   199                        	.stag	_fx_process,800,20
   200                        	.member	cbSize,0,5,8,16
   201                        	.member	procId,16,18,8,32
   202                        	.member	parentId,48,18,8,32
   203                        	.member	ctx,80,129,8,32
   204                        	.member	userId,112,16,8,16
   205                        	.member	status,128,16,8,16
   206                        	.member	foregroundActive,144,14,8,8
   207                        	.member	tls,152,1121,8,32,8
   208                        	.member	commandLine,408,142,8,32
   209                        	.member	semaphores,440,138,8,32,6
   210                        	.member	fileHandles,472,138,8,32,6
   211                        	.member	pathList,504,138,8,32,6
   212                        	.member	resources,536,138,8,32,6
   213                        	.member	timerAware,568,14,8,8
   214                        	.member	timerTicks,576,112,8,0,2
   215                        	.member	timerTickCount,608,112,8,0,2
   216                        	.member	kernelError,640,10,8,32,8
   217                        	.member	consoleCtl,672,138,8,32,18
   218                        	.member	desktopCtl,704,138,8,32,19
   219                        	.member	execProc,736,641,8,32
   220                        	.member	startupArgs,768,129,8,32
   221                        	.eos
   222                        	.stag	_fxProcessMessage,112,21
   223                        	.member	src,0,18,8,32
   224                        	.member	dest,32,18,8,32
   225                        	.member	type,64,16,8,16
   226                        	.member	processInfo,80,138,8,32,20
   227                        	.eos
   228                        	.stag	_k_key_state,112,22
   229                        	.member	scanCode,0,14,8,8
   230                        	.member	isShifted,8,14,8,8
   231                        	.member	isAlt,16,14,8,8
   232                        	.member	isExtended,24,14,8,8
   233                        	.member	isCapsLock,32,14,8,8
   234                        	.member	isNumLock,40,14,8,8
   235                        	.member	isScrollLock,48,14,8,8
   236                        	.member	keyChar,56,16,8,16
   237                        	.member	scanTime,72,18,8,32
   238                        	.member	ledStatus,104,14,8,8
   239                        	.eos
   240                        	.stag	_fx_property,384,23
   241                        	.member	name,0,110,8,0,16
   242                        	.member	value,128,110,8,0,32
   243                        	.eos
   244                        	.utag	_24bitPointer,32,24
   245                        	.member	address,0,142,11,32
   246                        	.member	bytes,0,110,11,0,4
   247                        	.eos
   248                        	.stag	_PointStruct,32,25
   249                        	.member	x,0,5,8,16
   250                        	.member	y,16,5,8,16
   251                        	.eos
  Sat Jul 10 2021  1:15                                                Page 6


   252                        	.stag	_RectStruct,112,26
   253                        	.member	x,0,5,8,16
   254                        	.member	y,16,5,8,16
   255                        	.member	z,32,18,8,32
   256                        	.member	width,64,5,8,16
   257                        	.member	height,80,5,8,16
   258                        	.member	attr,96,5,8,16
   259                        	.eos
   260                        	.stag	fake27_,96,27
   261                        	.member	name,0,142,8,32
   262                        	.member	topLeft,32,10,8,32,25
   263                        	.member	bottomRight,64,10,8,32,25
   264                        	.eos
   265                        	.stag	fake28_,112,28
   266                        	.member	x,0,5,8,16
   267                        	.member	y,16,5,8,16
   268                        	.member	z,32,5,8,16
   269                        	.member	width,48,5,8,16
   270                        	.member	height,64,5,8,16
   271                        	.member	data,80,18,8,32
   272                        	.eos
   273                        	.stag	_k_WindowClass,272,29
   274                        	.member	cbSize,0,16,8,16
   275                        	.member	style,16,16,8,16
   276                        	.member	styleEx,32,16,8,16
   277                        	.member	pWndProc,48,654,8,32
   278                        	.member	hInstance,80,129,8,32
   279                        	.member	hIcon,112,129,8,32
   280                        	.member	hCursor,144,129,8,32
   281                        	.member	hbrBackground,176,129,8,32
   282                        	.member	lpszMenuName,208,142,8,32
   283                        	.member	lpszClassName,240,142,8,32
   284                        	.eos
   285                        	.stag	_ClickableRect,152,30
   286                        	.member	area,0,10,8,112,26
   287                        	.member	z,112,18,8,32
   288                        	.member	enabled,144,14,8,8
   289                        	.eos
   290                        	.stag	_NCClickableRect,136,31
   291                        	.member	area,0,10,8,112,26
   292                        	.member	msgType,112,16,8,16
   293                        	.member	enabled,128,14,8,8
   294                        	.eos
   295                        	.stag	_DragData,216,32
   296                        	.member	area,0,10,8,112,26
   297                        	.member	xoffset,112,5,8,16
   298                        	.member	yoffset,128,5,8,16
   299                        	.member	msgType,144,16,8,16
   300                        	.member	ncAction,160,16,8,16
   301                        	.member	isDrag,176,14,8,8
   302                        	.member	isResize,184,14,8,8
   303                        	.member	canDrag,192,14,8,8
   304                        	.member	canDrop,200,14,8,8
   305                        	.member	didDrag,208,14,8,8
   306                        	.eos
   307                        	.stag	_k_WindowStruct,3904,33
   308                        	.member	cbSize,0,16,8,16
   309                        	.member	style,16,18,8,32
  Sat Jul 10 2021  1:15                                                Page 7


   310                        	.member	styleEx,48,18,8,32
   311                        	.member	win_id,80,5,8,16
   312                        	.member	win_x,96,5,8,16
   313                        	.member	win_y,112,5,8,16
   314                        	.member	win_width,128,5,8,16
   315                        	.member	win_height,144,5,8,16
   316                        	.member	win_xoffset,160,5,8,16
   317                        	.member	win_yoffset,176,5,8,16
   318                        	.member	win_cxoffset,192,5,8,16
   319                        	.member	win_cyoffset,208,5,8,16
   320                        	.member	wndRect,224,10,8,112,26
   321                        	.member	clientRect,336,10,8,112,26
   322                        	.member	nonclientGadgets,448,106,8,0,31,16
   323                        	.member	clickable,2624,129,8,32
   324                        	.member	win_title,2656,110,8,0,32
   325                        	.member	Reserved0,2912,16,8,16
   326                        	.member	win_class,2928,110,8,0,16
   327                        	.member	win_class_name,3056,110,8,0,32
   328                        	.member	nBitmapLayer,3312,16,8,16
   329                        	.member	bgRegion,3328,129,8,32
   330                        	.member	procid,3360,18,8,32
   331                        	.member	pWndClass,3392,138,8,32,29
   332                        	.member	pParentWindow,3424,129,8,32
   333                        	.member	hMenu,3456,129,8,32
   334                        	.member	hPointer,3488,129,8,32
   335                        	.member	hBackground,3520,129,8,32
   336                        	.member	pChildWindows,3552,138,8,32,6
   337                        	.member	pChildHitList,3584,138,8,32,6
   338                        	.member	isVisible,3616,14,8,8
   339                        	.member	windowData,3624,129,8,32
   340                        	.member	clientData,3656,1121,8,32,6
   341                        	.member	isClosed,3848,14,8,8
   342                        	.member	isClosing,3856,14,8,8
   343                        	.member	isDesktop,3864,14,8,8
   344                        	.member	clickableNode,3872,138,8,32,5
   345                        	.eos
   346                        	.stag	_k_WindowStructEx,3880,34
   347                        	.member	cbSize,0,16,8,16
   348                        	.member	style,16,18,8,32
   349                        	.member	styleEx,48,18,8,32
   350                        	.member	win_id,80,5,8,16
   351                        	.member	win_x,96,5,8,16
   352                        	.member	win_y,112,5,8,16
   353                        	.member	win_width,128,5,8,16
   354                        	.member	win_height,144,5,8,16
   355                        	.member	win_xoffset,160,5,8,16
   356                        	.member	win_yoffset,176,5,8,16
   357                        	.member	win_cxoffset,192,5,8,16
   358                        	.member	win_cyoffset,208,5,8,16
   359                        	.member	wndRect,224,10,8,112,26
   360                        	.member	clientRect,336,10,8,112,26
   361                        	.member	nonclientGadgets,448,106,8,0,31,16
   362                        	.member	clickable,2624,129,8,32
   363                        	.member	win_title,2656,110,8,0,32
   364                        	.member	Reserved0,2912,16,8,16
   365                        	.member	win_class,2928,110,8,0,16
   366                        	.member	nBitmapLayer,3056,16,8,16
   367                        	.member	procid,3072,18,8,32
  Sat Jul 10 2021  1:15                                                Page 8


   368                        	.member	pWndClass,3104,138,8,32,29
   369                        	.member	pParentWindow,3136,129,8,32
   370                        	.member	hMenu,3168,129,8,32
   371                        	.member	hPointer,3200,129,8,32
   372                        	.member	hBackground,3232,129,8,32
   373                        	.member	pChildWindows,3264,138,8,32,6
   374                        	.member	pChildHitList,3296,138,8,32,6
   375                        	.member	isVisible,3328,14,8,8
   376                        	.member	windowData,3336,129,8,32
   377                        	.member	clientData,3368,1121,8,32,4
   378                        	.member	isClosed,3496,14,8,8
   379                        	.member	hWnd,3504,129,8,32
   380                        	.member	localRect,3536,10,8,112,26
   381                        	.member	globalRect,3648,10,8,112,26
   382                        	.member	clientOffsetRect,3760,10,8,112,26
   383                        	.member	isDesktop,3872,14,8,8
   384                        	.eos
   385                        	.stag	_FontMetric,32,35
   386                        	.member	width,0,5,8,16
   387                        	.member	height,16,5,8,16
   388                        	.eos
   389                        	.stag	_MenuStruct,280,36
   390                        	.member	cx,0,5,8,16
   391                        	.member	cy,16,5,8,16
   392                        	.member	width,32,5,8,16
   393                        	.member	height,48,5,8,16
   394                        	.member	fcolor,64,14,8,8
   395                        	.member	bcolor,72,14,8,8
   396                        	.member	chromeLeft,80,14,8,8
   397                        	.member	chromeRight1,88,14,8,8
   398                        	.member	chromeRight2,96,14,8,8
   399                        	.member	hFont,104,129,8,32
   400                        	.member	itemId,136,16,8,16
   401                        	.member	pCaption,152,142,8,32
   402                        	.member	subMenus,184,138,8,32,6
   403                        	.member	pBackground,216,129,8,32
   404                        	.member	hWndOwner,248,129,8,32
   405                        	.eos
   406                        	.stag	fake37_,160,37
   407                        	.member	menuId,0,16,8,16
   408                        	.member	caption,16,142,8,32
   409                        	.member	rect,48,10,8,112,26
   410                        	.eos
   411                        	.stag	fake38_,5152,38
   412                        	.member	pParent,0,138,8,32,33
   413                        	.member	rect,32,10,8,112,26
   414                        	.member	captions,144,1134,8,32,24
   415                        	.member	chrome,912,110,8,0,24
   416                        	.member	ids,1104,112,8,0,24
   417                        	.member	clickable,1488,106,8,0,30,24
   418                        	.member	selected,5136,16,8,16
   419                        	.eos
   420                        	.stag	_fx_button_t,96,39
   421                        	.member	pCaption,0,142,8,32
   422                        	.member	cCaption,32,16,8,16
   423                        	.member	data,48,129,8,32
   424                        	.member	captionPixelWidth,80,16,8,16
   425                        	.eos
  Sat Jul 10 2021  1:15                                                Page 9


   426                        	.stag	_fx_scrollbar_t,240,40
   427                        	.member	min,0,16,8,16
   428                        	.member	max,16,16,8,16
   429                        	.member	increment,32,16,8,16
   430                        	.member	stopsize,48,16,8,16
   431                        	.member	location,64,5,8,16
   432                        	.member	state,80,5,8,16
   433                        	.member	rectThumb,96,10,8,112,26
   434                        	.member	data,208,129,8,32
   435                        	.eos
   436                        	.stag	_fx_listbox_t,240,41
   437                        	.member	pos,0,5,8,16
   438                        	.member	selected,16,16,8,16
   439                        	.member	offsetX,32,5,8,16
   440                        	.member	offsetY,48,5,8,16
   441                        	.member	inc,64,5,8,16
   442                        	.member	direction,80,5,8,16
   443                        	.member	top,96,5,8,16
   444                        	.member	bottom,112,5,8,16
   445                        	.member	indexTop,128,5,8,16
   446                        	.member	indexBottom,144,5,8,16
   447                        	.member	maxItems,160,16,8,16
   448                        	.member	fontSet,176,142,8,32
   449                        	.member	data,208,129,8,32
   450                        	.eos
   451                        	.stag	_fx_textbox_t,144,42
   452                        	.member	pos,0,5,8,16
   453                        	.member	selected,16,16,8,16
   454                        	.member	offsetX,32,5,8,16
   455                        	.member	offsetY,48,5,8,16
   456                        	.member	isShifted,64,14,8,8
   457                        	.member	cursorState,72,14,8,8
   458                        	.member	fontSet,80,142,8,32
   459                        	.member	data,112,129,8,32
   460                        	.eos
   461                        	.stag	_fx_msgbox_t,144,43
   462                        	.member	pos,0,5,8,16
   463                        	.member	selected,16,16,8,16
   464                        	.member	offsetX,32,5,8,16
   465                        	.member	offsetY,48,5,8,16
   466                        	.member	isShifted,64,14,8,8
   467                        	.member	cursorState,72,14,8,8
   468                        	.member	fontSet,80,142,8,32
   469                        	.member	data,112,129,8,32
   470                        	.eos
   471                        	.stag	_fx_menuAnchor_t,272,44
   472                        	.member	pCaption,0,142,8,32
   473                        	.member	renderLayoutX,32,16,8,16
   474                        	.member	renderLayoutY,48,16,8,16
   475                        	.member	captionPixelWidth,64,16,8,16
   476                        	.member	data,80,129,8,32
   477                        	.member	droppedWindow,112,138,8,32,33
   478                        	.member	bytes,144,110,8,0,16
   479                        	.eos
   480                        	.stag	_SubMenuStruct,64,45
   481                        	.member	caption,0,142,8,32
   482                        	.member	action,32,641,8,32
   483                        	.eos
  Sat Jul 10 2021  1:15                                                Page 10


   484                        	.stag	_SubMenuListStruct,40,46
   485                        	.member	cMenus,0,14,8,8
   486                        	.member	psubmenus,8,9354,8,32,45
   487                        	.eos
   488                        	.stag	_fx_ComBuffer,2080,47
   489                        	.member	cbSize,0,16,8,16
   490                        	.member	cbBuffer,16,16,8,16
   491                        	.member	buffer,32,110,8,0,256
   492                        	.eos
   493                        	.stag	_fx_resource_header,72,48
   494                        	.member	magic,0,110,8,0,4
   495                        	.member	major,32,14,8,8
   496                        	.member	minor,40,14,8,8
   497                        	.member	type,48,14,8,8
   498                        	.member	reserved,56,14,8,8
   499                        	.member	resheaderSize,64,14,8,8
   500                        	.eos
   501                        	.stag	_fx_resource_header_font,144,49
   502                        	.member	title,0,110,8,0,16
   503                        	.member	height,128,14,8,8
   504                        	.member	width,136,14,8,8
   505                        	.eos
   506                        	.line	1010
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   508                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   509                        	.line	89
   510                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   511                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   512                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   513                        	.line	1010
   514                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",5
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   516                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   517                        	.line	1010
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   519                        	.line	72
   520                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   521                        	.line	1960
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
   523                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   524                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   525                        	.line	30
   526                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   527                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 11


                    space\FXOSv1\src\fxnode.h",0
   528                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   529                        	.line	1010
   530                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   531                        	.line	114
   532                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   533                        	.stag	_fx_api_call_table,8192,50
   534                        	.member	call_table,0,1121,8,32,256
   535                        	.eos
   536                        	.stag	_fx_zero_page,824,51
   537                        	.member	fxos_mouse_byte_0,0,14,8,8
   538                        	.member	fxos_mouse_byte_1,8,14,8,8
   539                        	.member	fxos_mouse_byte_2,16,14,8,8
   540                        	.member	fxos_mouse_byte_t,24,14,8,8
   541                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   542                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   543                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   544                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   545                        	.member	fxos_key_byte_0,64,14,8,8
   546                        	.member	fxos_key_byte_1,72,14,8,8
   547                        	.member	fxos_key_byte_2,80,14,8,8
   548                        	.member	fxos_mouse_ctl,88,14,8,8
   549                        	.member	fxos_mouse_index,96,14,8,8
   550                        	.member	fxos_mouse_status,104,14,8,8
   551                        	.member	fxos_mouse_dbg_1,112,18,8,32
   552                        	.member	fxos_mouse_dbg_2,144,18,8,32
   553                        	.member	fxos_mouse_dbg_3,176,18,8,32
   554                        	.member	fxos_vicky_byte_0,208,14,8,8
   555                        	.member	fxos_vicky_byte_1,216,14,8,8
   556                        	.member	fxos_vicky_byte_2,224,14,8,8
   557                        	.member	VersionMajor,232,16,8,16
   558                        	.member	VersionMinor,248,16,8,16
   559                        	.member	VersionRelease,264,16,8,16
   560                        	.member	topMemory,280,18,8,32
   561                        	.member	bottomMemory,312,18,8,32
   562                        	.member	availableMemory,344,18,8,32
   563                        	.member	availableMemoryK,376,18,8,32
   564                        	.member	availableHeapMemory,408,18,8,32
   565                        	.member	availableHeapMemoryK,440,18,8,32
   566                        	.member	fxos_console_row,472,16,8,16
   567                        	.member	fxos_console_col,488,16,8,16
   568                        	.member	executive,504,129,8,32
   569                        	.member	eventmanager,536,129,8,32
   570                        	.member	devicemanager,568,129,8,32
   571                        	.member	windowmanager,600,129,8,32
   572                        	.member	fxos_kernel_api,632,138,8,32,50
   573                        	.member	fxos_dos_api,664,138,8,32,50
   574                        	.member	fxos_gfx_api,696,138,8,32,50
   575                        	.member	fxos_gui_api,728,138,8,32,50
   576                        	.member	fxos_con_api,760,138,8,32,50
   577                        	.member	fxos_reserved_2_api,792,138,8,32,50
   578                        	.eos
   579                        	.stag	_fx_environment,96,52
   580                        	.member	variables,0,142,8,32
   581                        	.member	reserved1,32,5,8,16
  Sat Jul 10 2021  1:15                                                Page 12


   582                        	.member	reserved2,48,5,8,16
   583                        	.member	reserved3,64,5,8,16
   584                        	.member	reserved4,80,5,8,16
   585                        	.eos
   586                        	.stag	_debug_byte_bits,8,53
   587                        	.member	bit7,0,14,17,1
   588                        	.member	bit6,1,14,17,1
   589                        	.member	bit5,2,14,17,1
   590                        	.member	bit4,3,14,17,1
   591                        	.member	bit3,4,14,17,1
   592                        	.member	bit2,5,14,17,1
   593                        	.member	bit1,6,14,17,1
   594                        	.member	bit0,7,14,17,1
   595                        	.eos
   596                        	.stag	_k_segmentheader,160,54
   597                        	.member	version_major,0,14,8,8
   598                        	.member	version_minor,8,14,8,8
   599                        	.member	length,16,5,8,16
   600                        	.member	segment_start_addr,32,7,8,32
   601                        	.member	segment_end_addr,64,7,8,32
   602                        	.member	segment_size,96,7,8,32
   603                        	.member	main_entry_addr,128,7,8,32
   604                        	.eos
   605                        	.stag	_fx_device_driver,776,55
   606                        	.member	name,0,110,8,0,32
   607                        	.member	version,256,110,8,0,16
   608                        	.member	hmajor,384,110,8,0,8
   609                        	.member	hminor,448,110,8,0,8
   610                        	.member	type,512,14,8,8
   611                        	.member	designation,520,110,8,0,6
   612                        	.member	reserved_1,568,16,8,16
   613                        	.member	f_driver_irq,584,129,8,32
   614                        	.member	driver_context,616,129,8,32
   615                        	.member	f_driver_load,648,129,8,32
   616                        	.member	f_driver_read,680,129,8,32
   617                        	.member	f_driver_write,712,129,8,32
   618                        	.member	f_driver_unload,744,129,8,32
   619                        	.eos
   620                        	.stag	_fx_block_device_driver,808,56
   621                        	.member	name,0,110,8,0,32
   622                        	.member	version,256,110,8,0,16
   623                        	.member	hmajor,384,110,8,0,8
   624                        	.member	hminor,448,110,8,0,8
   625                        	.member	type,512,14,8,8
   626                        	.member	designation,520,110,8,0,6
   627                        	.member	reserved_1,568,16,8,16
   628                        	.member	f_driver_irq,584,129,8,32
   629                        	.member	driver_context,616,129,8,32
   630                        	.member	f_driver_load,648,129,8,32
   631                        	.member	f_driver_read,680,129,8,32
   632                        	.member	f_driver_write,712,129,8,32
   633                        	.member	f_driver_unload,744,129,8,32
   634                        	.member	f_driver_command,776,129,8,32
   635                        	.eos
   636                        	.line	400
   637                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   638                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 13


                    space\FXOSv1\src\fxconsole.h",0
   639                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   640                        	.line	134
   641                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   642                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   643                        	.line	205
   644                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   645                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   646                        	.line	1010
   647                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   649                        	.line	1960
   650                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   652                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   653                        	.line	205
   654                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   655                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   656                        	.line	134
   657                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   658                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   659                        	.line	1010
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   661                        	.stag	_fx_string,64,57
   662                        	.member	size,0,16,8,16
   663                        	.member	pos,16,5,8,16
   664                        	.member	buffer,32,142,8,32
   665                        	.eos
   666                        	.line	139
   667                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   668                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   669                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   670                        	.line	30
   671                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   672                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   673                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   674                        	.line	1010
  Sat Jul 10 2021  1:15                                                Page 14


   675                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   676                        	.stag	_fxos_executive_vtable,128,58
   677                        	.member	Init,0,8833,8,32
   678                        	.member	Configure,32,656,8,32
   679                        	.member	Query,64,656,8,32
   680                        	.member	Uninit,96,641,8,32
   681                        	.eos
   682                        	.line	86
   683                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   684                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   685                        	.line	114
   686                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   687                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   688                        	.line	208
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   690                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   691                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   692                        	.line	30
   693                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   694                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   695                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   696                        	.line	30
   697                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   698                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   699                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   700                        	.line	35
   701                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   702                        	.stag	UMM_HEAP_INFO_t,256,59
   703                        	.member	totalEntries,0,18,8,32
   704                        	.member	usedEntries,32,18,8,32
   705                        	.member	freeEntries,64,18,8,32
   706                        	.member	totalBlocks,96,18,8,32
   707                        	.member	usedBlocks,128,18,8,32
   708                        	.member	freeBlocks,160,18,8,32
   709                        	.member	maxFreeContiguousBlocks,192,18,8,32
   710                        	.member	blockSize,224,18,8,32
   711                        	.eos
   712                        	.line	199
   713                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   714                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   715                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 15


                    space\FXOSv1\src\fxtypes.h",0
   716                        	.line	1010
   717                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   718                        	.line	24
   719                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   720                        	.stag	_fx_memory_map,2072,60
   721                        	.member	availableMemory,0,18,8,32
   722                        	.member	valid_segments,32,110,8,0,255
   723                        	.eos
   724                        	.stag	_fx_ipc_port,144,61
   725                        	.member	id,0,18,8,32
   726                        	.member	type,32,14,8,8
   727                        	.member	name,40,138,8,32,57
   728                        	.member	time,72,18,8,32
   729                        	.member	queue,104,138,8,32,7
   730                        	.member	reserved_1,136,14,8,8
   731                        	.eos
   732                        	.line	105
   733                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   734                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   735                        	.line	564
   736                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   737                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   738                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   739                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   740                        	.line	1010
   741                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   742                        	.line	74
   743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   744                        	.stag	_click_detected,64,62
   745                        	.member	window,0,138,8,32,33
   746                        	.member	handler,32,641,8,32
   747                        	.eos
   748                        	.stag	_current_palette_map,400,63
   749                        	.member	CUR_DESKTOP,0,5,8,16
   750                        	.member	CUR_BACKGROUND,16,5,8,16
   751                        	.member	CUR_FONT,32,5,8,16
   752                        	.member	CUR_SELECTED_FONT,48,5,8,16
   753                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   754                        	.member	CUR_WINDOWFRAME,80,5,8,16
   755                        	.member	CUR_WINDOWBORDER,96,5,8,16
   756                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   757                        	.member	CUR_MENU,128,5,8,16
   758                        	.member	CUR_GADGET,144,5,8,16
   759                        	.member	CUR_COLOR,160,101,8,0,15
   760                        	.eos
   761                        	.line	359
   762                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 16


                    space\FXOSv1\src\fxwindowmanager.h",8
   763                        	.stag	_fxos_winman_vtable,160,64
   764                        	.member	Events,0,641,8,32
   765                        	.member	ConfigureWindowManager,32,656,8,32
   766                        	.member	ProcessWindowEvent,64,8833,8,32
   767                        	.member	QueryWindowManager,96,656,8,32
   768                        	.member	DoWndProcs,128,641,8,32
   769                        	.eos
   770                        	.stag	fake65_,64,65
   771                        	.member	type,0,16,8,16
   772                        	.member	size,16,16,8,16
   773                        	.member	desktopAction,32,129,8,32
   774                        	.eos
   775                        	.stag	fake66_,96,66
   776                        	.member	type,0,16,8,16
   777                        	.member	caption,16,138,8,32,57
   778                        	.member	buttonType,48,16,8,16
   779                        	.member	x,64,5,8,16
   780                        	.member	y,80,5,8,16
   781                        	.eos
   782                        	.stag	_childMessage_t,64,67
   783                        	.member	msgType,0,16,8,16
   784                        	.member	msgData,16,129,8,32
   785                        	.member	dataSize,48,16,8,16
   786                        	.eos
   787                        	.line	581
   788                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   789                        	.stag	_fx_main_loopvars,16,68
   790                        	.member	dummy,0,5,8,16
   791                        	.eos
   792                        	.stag	_fxMouseMessageData,64,69
   793                        	.member	button1,0,14,8,8
   794                        	.member	button2,8,14,8,8
   795                        	.member	button3,16,14,8,8
   796                        	.member	button4,24,14,8,8
   797                        	.member	x,32,16,8,16
   798                        	.member	y,48,16,8,16
   799                        	.eos
   800                        	.utag	marshalled_data,32,70
   801                        	.member	byteValue,0,14,11,8
   802                        	.member	verbValue,0,110,11,0,2
   803                        	.member	intValue,0,16,11,16
   804                        	.member	longValue,0,18,11,32
   805                        	.member	pointerValue,0,129,11,32
   806                        	.eos
   807                        	.stag	_fx_eventProcess,64,71
   808                        	.member	process,0,138,8,32,20
   809                        	.member	eventProc,32,641,8,32
   810                        	.eos
   811                        	.stag	_mouse_msg_state,184,72
   812                        	.member	lastEvent,0,18,8,32
   813                        	.member	buttonLeftDown,32,14,8,8
   814                        	.member	lastLeftDown,40,18,8,32
   815                        	.member	buttonRightDown,72,14,8,8
   816                        	.member	lastRightDown,80,18,8,32
   817                        	.member	buttonMiddleDown,112,14,8,8
   818                        	.member	lastMiddleDown,120,18,8,32
  Sat Jul 10 2021  1:15                                                Page 17


   819                        	.member	lastX,152,16,8,16
   820                        	.member	lastY,168,16,8,16
   821                        	.eos
   822                        	.stag	_fxos_eventmanager_vtable,192,73
   823                        	.member	EventQueue,0,138,8,32,7
   824                        	.member	Init,32,8833,8,32
   825                        	.member	Run,64,656,8,32
   826                        	.member	Configure,96,656,8,32
   827                        	.member	Query,128,656,8,32
   828                        	.member	Uninit,160,641,8,32
   829                        	.eos
   830                        	.stag	_k_clipboard_data,168,74
   831                        	.member	type,0,14,8,8
   832                        	.member	readable,8,110,8,0,16
   833                        	.member	data,136,129,8,32
   834                        	.eos
   835                        	.line	564
   836                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   837                        	.stag	_fx_spinner_ctx,48,75
   838                        	.member	index,0,5,8,16
   839                        	.member	spinner,16,142,8,32
   840                        	.eos
   841                        	.stag	_fx_console_ctx,1144,76
   842                        	.member	lineBufferIndex,0,5,8,16
   843                        	.member	lineBuffer,16,110,8,0,128
   844                        	.member	isShifted,1040,14,8,8
   845                        	.member	userData,1048,129,8,32
   846                        	.member	screenBuffer,1080,129,8,32
   847                        	.member	Reserved1,1112,129,8,32
   848                        	.eos
   849                        	.stag	_token,64,77
   850                        	.member	type,0,5,8,16
   851                        	.member	depth,16,16,8,16
   852                        	.member	text,32,142,8,32
   853                        	.eos
   854                        	.stag	_command_args,64,78
   855                        	.member	proc,0,656,8,32
   856                        	.member	tokens,32,138,8,32,5
   857                        	.eos
   858                        	.line	208
   859                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   860                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   861                        	.line	139
   862                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",24
   863                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   864                        	.line	114
   865                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   866                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   867                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
   868                        	.line	298
  Sat Jul 10 2021  1:15                                                Page 18


   869                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   870                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   871                        	.line	1010
   872                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   873                        	.stag	fake79_,4504,79
   874                        	.member	fs_type,0,14,8,8
   875                        	.member	pdrv,8,14,8,8
   876                        	.member	n_fats,16,14,8,8
   877                        	.member	wflag,24,14,8,8
   878                        	.member	fsi_flag,32,14,8,8
   879                        	.member	id,40,5,8,16
   880                        	.member	n_rootdir,56,5,8,16
   881                        	.member	csize,72,5,8,16
   882                        	.member	lfnbuf,88,144,8,32
   883                        	.member	last_clst,120,18,8,32
   884                        	.member	free_clst,152,18,8,32
   885                        	.member	n_fatent,184,18,8,32
   886                        	.member	fsize,216,18,8,32
   887                        	.member	volbase,248,18,8,32
   888                        	.member	fatbase,280,18,8,32
   889                        	.member	dirbase,312,18,8,32
   890                        	.member	database,344,18,8,32
   891                        	.member	winsect,376,18,8,32
   892                        	.member	win,408,110,8,0,512
   893                        	.eos
   894                        	.stag	fake80_,128,80
   895                        	.member	fs,0,138,8,32,79
   896                        	.member	id,32,5,8,16
   897                        	.member	attr,48,14,8,8
   898                        	.member	stat,56,14,8,8
   899                        	.member	sclust,64,18,8,32
   900                        	.member	objsize,96,18,8,32
   901                        	.eos
   902                        	.stag	fake81_,4400,81
   903                        	.member	obj,0,10,8,128,80
   904                        	.member	flag,128,14,8,8
   905                        	.member	err,136,14,8,8
   906                        	.member	fptr,144,18,8,32
   907                        	.member	clust,176,18,8,32
   908                        	.member	sect,208,18,8,32
   909                        	.member	dir_sect,240,18,8,32
   910                        	.member	dir_ptr,272,142,8,32
   911                        	.member	buf,304,110,8,0,512
   912                        	.eos
   913                        	.stag	fake82_,416,82
   914                        	.member	obj,0,10,8,128,80
   915                        	.member	dptr,128,18,8,32
   916                        	.member	clust,160,18,8,32
   917                        	.member	sect,192,18,8,32
   918                        	.member	dir,224,142,8,32
   919                        	.member	fn,256,110,8,0,12
   920                        	.member	blk_ofs,352,18,8,32
   921                        	.member	pat,384,142,8,32
   922                        	.eos
   923                        	.stag	fake83_,2224,83
  Sat Jul 10 2021  1:15                                                Page 19


   924                        	.member	fsize,0,18,8,32
   925                        	.member	fdate,32,5,8,16
   926                        	.member	ftime,48,5,8,16
   927                        	.member	fattrib,64,14,8,8
   928                        	.member	altname,72,110,8,0,13
   929                        	.member	fname,176,110,8,0,256
   930                        	.eos
   931                        	.stag	fake84_,80,84
   932                        	.member	fmt,0,14,8,8
   933                        	.member	n_fat,8,14,8,8
   934                        	.member	align,16,16,8,16
   935                        	.member	n_root,32,16,8,16
   936                        	.member	au_size,48,18,8,32
   937                        	.eos
   938                        	.line	429
   939                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",26
   940                        	.line	30
   941                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\mindrvr.h",35
   942                        	.stag	REG_CMD_INFO,328,85
   943                        	.member	cmd,0,14,8,8
   944                        	.member	fr,8,16,8,16
   945                        	.member	sc,24,16,8,16
   946                        	.member	sn,40,16,8,16
   947                        	.member	cl,56,16,8,16
   948                        	.member	ch,72,16,8,16
   949                        	.member	dh,88,14,8,8
   950                        	.member	dc,96,14,8,8
   951                        	.member	ns,104,7,8,32
   952                        	.member	mc,136,5,8,16
   953                        	.member	lbaSize,152,14,8,8
   954                        	.member	lbaLow,160,18,8,32
   955                        	.member	lbaHigh,192,18,8,32
   956                        	.member	st,224,14,8,8
   957                        	.member	as,232,14,8,8
   958                        	.member	er,240,14,8,8
   959                        	.member	ec,248,14,8,8
   960                        	.member	to,256,14,8,8
   961                        	.member	totalBytesXfer,264,7,8,32
   962                        	.member	drqPackets,296,7,8,32
   963                        	.eos
   964                        	.line	475
   965                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",36
   966                        ;#include "fxos.h"
   967                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   968                        	.line	30
   969                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",37
   970                        ;#include "ata.h"
   971                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ata.h",0
   972                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdint.h",0
   973                        	.line	92
   974                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 20


                    space\FXOSv1\src\ata.h",4
   975                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   976                        	.line	30
   977                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ata.h",5
   978                        	.stag	fake86_,8,86
   979                        	.member	drive,0,14,8,8
   980                        	.eos
   981                        	.line	94
   982                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",38
   983                        ;
   984                        ;//#pragma section CODE=IDEMAN,offset $08:0000
   985                        ;#pragma section CODE=FXHDD,offset $06:8FFE
   986                        FXHDD	section	offset $06:8FFE
   987 06:8FFE:              	ends
   988                        ;
   989                        ;//***********************************************
                    ***************
   990                        ;//
   991                        ;// !!! data that functions outside of MINDRVR mus
                    t use
   992                        ;//
   993                        ;// Note that there is no actual "interrupt handle
                    r" provide in
   994                        ;// MINDRVR. The interrupt handler is usually a sm
                    all function that
   995                        ;// is very system specific. However, MINDRVR expe
                    cts that interrupt
   996                        ;// handler function to provide some status data a
                    t the time the
   997                        ;// interrupt handler is executed.
   998                        ;//
   999                        ;// In many systems, including PCI bus based syste
                    ms, when an
  1000                        ;// interrupt is received from an ATA controller, 
                    the interrupt
  1001                        ;// handler must acknowledge the interrupt by read
                    ing both the
  1002                        ;// ATA/ATAPI device Status register and the contr
                    oller status
  1003                        ;// register. This status must be stored here so t
                    hat MINDRVR
  1004                        ;// can use it.
  1005                        ;//
  1006                        ;//***********************************************
                    ***************
  1007                        ;extern ULONG _pseudo_timer;
  1008                        ;
  1009                        ;//UCHAR ide_sector[512];
  1010                        ;
  1011                        ;unsigned char int_ata_status;    // ATA status re
                    ad by interrupt handler
  1012                        ;
  1013                        ;unsigned char int_bmide_status;  // BMIDE status 
                    read by interrupt handler
  1014                        ;
  Sat Jul 10 2021  1:15                                                Page 21


  1015                        ;unsigned char int_use_intr_flag = INT_DEFAULT_INT
                    ERRUPT_MODE;
  1016                        	data
  1017                        	xdef	~~int_use_intr_flag
  1018                        ~~int_use_intr_flag:
  1019 00:0000: 00           	db	$0
  1020 00:0001:              	ends
  1021                        ;
  1022                        ;struct REG_CMD_INFO reg_cmd_info;
  1023                        ;
  1024                        ;int reg_config_info[2];
  1025                        ;
  1026                        ;unsigned char * pio_bmide_base_addr;
  1027                        ;
  1028                        ;unsigned char * pio_reg_addrs[9] =
  1029                        	data
  1030                        	xdef	~~pio_reg_addrs
  1031                        ~~pio_reg_addrs:
  1032                        ;{
  1033                        ;   PIO_BASE_ADDR1 + 0,  // [0] CB_DATA
  1034 00:0001: 39 E8 AF 00  	dl	$AFE839
  1035                        ;   PIO_BASE_ADDR1 + 1,  // [1] CB_FR & CB_ER
  1036 00:0005: 3A E8 AF 00  	dl	$AFE83A
  1037                        ;   PIO_BASE_ADDR1 + 2,  // [2] CB_SC
  1038 00:0009: 3B E8 AF 00  	dl	$AFE83B
  1039                        ;   PIO_BASE_ADDR1 + 3,  // [3] CB_SN
  1040 00:000D: 3C E8 AF 00  	dl	$AFE83C
  1041                        ;   PIO_BASE_ADDR1 + 4,  // [4] CB_CL
  1042 00:0011: 3D E8 AF 00  	dl	$AFE83D
  1043                        ;   PIO_BASE_ADDR1 + 5,  // [5] CB_CH
  1044 00:0015: 3E E8 AF 00  	dl	$AFE83E
  1045                        ;   PIO_BASE_ADDR1 + 6,  // [6] CB_DH
  1046 00:0019: 3F E8 AF 00  	dl	$AFE83F
  1047                        ;   PIO_BASE_ADDR1 + 7,  // [7] CB_CMD & CB_STAT
  1048 00:001D: 40 E8 AF 00  	dl	$AFE840
  1049                        ;   PIO_BASE_ADDR2 + 0   // [8] CB_DC & CB_ASTAT
  1050                        ;} ;
  1051 00:0021: 38 E8 AF 00  	dl	$AFE838
  1052 00:0025:              	ends
  1053                        ;
  1054                        ;unsigned char pio_xfer_width = PIO_DEFAULT_XFER_W
                    IDTH;
  1055                        	data
  1056                        	xdef	~~pio_xfer_width
  1057                        ~~pio_xfer_width:
  1058 00:0025: 10           	db	$10
  1059 00:0026:              	ends
  1060                        ;
  1061                        ;//***********************************************
                    ***************
  1062                        ;//
  1063                        ;// functions internal and private to MINDRVR
  1064                        ;//
  1065                        ;//***********************************************
                    ***************
  1066                        ;
  1067                        ;static void sub_setup_command( void );
  1068                        ;static void sub_trace_command( void );
  Sat Jul 10 2021  1:15                                                Page 22


  1069                        ;static int sub_select( unsigned char dev );
  1070                        ;static void sub_wait_poll( unsigned char we, unsi
                    gned char pe );
  1071                        ;
  1072                        ;static unsigned char pio_inbyte( unsigned char ad
                    dr );
  1073                        ;static void pio_outbyte( int addr, unsigned char 
                    data );
  1074                        ;static unsigned int pio_inword( unsigned char add
                    r );
  1075                        ;static void pio_outword( int addr, unsigned int d
                    ata );
  1076                        ;static unsigned long pio_indword( unsigned char a
                    ddr );
  1077                        ;static void pio_outdword( int addr, unsigned long
                     data );
  1078                        ;static void pio_drq_block_in( unsigned char addrD
                    ataReg,
  1079                        ;                              unsigned char * buf
                    Addr,
  1080                        ;                              long wordCnt );
  1081                        ;static void pio_drq_block_out( unsigned char addr
                    DataReg,
  1082                        ;                               unsigned char * bu
                    fAddr,
  1083                        ;                               long wordCnt );
  1084                        ;static void pio_rep_inbyte( unsigned char addrDat
                    aReg,
  1085                        ;                            unsigned char * bufAd
                    dr,
  1086                        ;                            long byteCnt );
  1087                        ;static void pio_rep_outbyte( unsigned char addrDa
                    taReg,
  1088                        ;                             unsigned char * bufA
                    ddr,
  1089                        ;                             long byteCnt );
  1090                        ;static void pio_rep_inword( unsigned char addrDat
                    aReg,
  1091                        ;                            unsigned char * bufAd
                    dr,
  1092                        ;                            long wordCnt );
  1093                        ;static void pio_rep_outword( unsigned char addrDa
                    taReg,
  1094                        ;                             unsigned char * bufA
                    ddr,
  1095                        ;                             long wordCnt );
  1096                        ;static void pio_rep_indword( unsigned char addrDa
                    taReg,
  1097                        ;                             unsigned char * bufA
                    ddr,
  1098                        ;                             long dwordCnt );
  1099                        ;static void pio_rep_outdword( unsigned char addrD
                    ataReg,
  1100                        ;                              unsigned char * buf
                    Addr,
  1101                        ;                              long dwordCnt );
  1102                        ;
  1103                        ;static unsigned char pio_readBusMstrCmd( void );
  Sat Jul 10 2021  1:15                                                Page 23


  1104                        ;static unsigned char pio_readBusMstrStatus( void 
                    );
  1105                        ;static void pio_writeBusMstrCmd( unsigned char x 
                    );
  1106                        ;static void pio_writeBusMstrStatus( unsigned char
                     x );
  1107                        ;
  1108                        ;static long tmr_cmd_start_time;     // command st
                    art time
  1109                        ;static void tmr_set_timeout( void );
  1110                        ;static int tmr_chk_timeout( void );
  1111                        ;
  1112                        ;void k_ide_init(void);
  1113                        ;void k_ide_busy(void);
  1114                        ;void k_ide_drive_ready(void);
  1115                        ;void k_ide_drive_ready_notbusy(void);
  1116                        ;void k_ide_not_drq(void);
  1117                        ;LPCHAR k_ide_read_sector(LPCHAR readBuffer);
  1118                        ;void k_read_lba_sector(ULONG sectorStart,
  1119                        ;						unsigned
                     char count,
  1120                        ;					   LPCHAR readBu
                    ffer);
  1121                        ;LPCHAR k_ide_get_info(void);
  1122                        ;
  1123                        ;// This macro provides a small delay that is used
                     in several
  1124                        ;// places in the ATA command protocols:
  1125                        ;
  1126                        ;#define DELAY400NS  { pio_inbyte( CB_ASTAT ); pio
                    _inbyte( CB_ASTAT );  \
  1127                        ;                      pio_inbyte( CB_ASTAT ); pio
                    _inbyte( CB_ASTAT ); pio_inbyte( CB_ASTAT );}
  1128                        ;
  1129                        ;//***********************************************
                    **************
  1130                        ;//
  1131                        ;// reg_config() - Check the host adapter and dete
                    rmine the
  1132                        ;//                number and type of drives attac
                    hed.
  1133                        ;//
  1134                        ;// This process is not documented by any of the A
                    TA standards.
  1135                        ;//
  1136                        ;// Infomation is returned by this function is in
  1137                        ;// reg_config_info[] -- see MINDRVR.H.
  1138                        ;//
  1139                        ;//***********************************************
                    **************
  1140                        ;
  1141                        ;
  1142                        ;
  1143                        ;// Directions:
  1144                        ;//#define      ATA_READ      0x00
  1145                        ;//#define      ATA_WRITE     0x01
  1146                        ;/*
  1147                        ;struct IDEChannelRegisters {
  Sat Jul 10 2021  1:15                                                Page 24


  1148                        ;   unsigned short base;  // I/O Base.
  1149                        ;   unsigned short ctrl;  // Control Base
  1150                        ;   unsigned short bmide; // Bus Master IDE
  1151                        ;   unsigned char  nIEN;  // nIEN (No Interrupt);
  1152                        ;} channels[2];
  1153                        ;
  1154                        ;unsigned char ide_buf[2048] = {0};
  1155                        ;unsigned static char ide_irq_invoked = 0;
  1156                        ;unsigned static char atapi_packet[12] = {0xA8, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  1157                        ;
  1158                        ;struct ide_device {
  1159                        ;   unsigned char  Reserved;    // 0 (Empty) or 1 
                    (This Drive really exists).
  1160                        ;   unsigned char  Channel;     // 0 (Primary Chan
                    nel) or 1 (Secondary Channel).
  1161                        ;   unsigned char  Drive;       // 0 (Master Drive
                    ) or 1 (Slave Drive).
  1162                        ;   unsigned short Type;        // 0: ATA, 1:ATAPI
                    .
  1163                        ;   unsigned short Signature;   // Drive Signature
  1164                        ;   unsigned short Capabilities;// Features.
  1165                        ;   unsigned int   CommandSets; // Command Sets Su
                    pported.
  1166                        ;   unsigned int   Size;        // Size in Sectors
                    .
  1167                        ;   unsigned char  Model[41];   // Model in string
                    .
  1168                        ;} ide_devices[4];
  1169                        ;
  1170                        ;
  1171                        ;void ide_write(unsigned char channel, unsigned ch
                    ar reg, unsigned char data)
  1172                        ;{
  1173                        ;   if (reg > 0x07 && reg < 0x0C)
  1174                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
  1175                        ;   if (reg < 0x08)
  1176                        ;      outb(channels[channel].base  + reg - 0x00, 
                    data);
  1177                        ;   else if (reg < 0x0C)
  1178                        ;      outb(channels[channel].base  + reg - 0x06, 
                    data);
  1179                        ;   else if (reg < 0x0E)
  1180                        ;      outb(channels[channel].ctrl  + reg - 0x0A, 
                    data);
  1181                        ;   else if (reg < 0x16)
  1182                        ;      outb(channels[channel].bmide + reg - 0x0E, 
                    data);
  1183                        ;   if (reg > 0x07 && reg < 0x0C)
  1184                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
  1185                        ;}
  1186                        ;
  1187                        ;unsigned char ide_read(unsigned char channel, uns
                    igned char reg)
  1188                        ;{
  1189                        ;   unsigned char result;
  Sat Jul 10 2021  1:15                                                Page 25


  1190                        ;   if (reg > 0x07 && reg < 0x0C)
  1191                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
  1192                        ;   if (reg < 0x08)
  1193                        ;      result = inb(channels[channel].base + reg -
                     0x00);
  1194                        ;   else if (reg < 0x0C)
  1195                        ;      result = inb(channels[channel].base  + reg 
                    - 0x06);
  1196                        ;   else if (reg < 0x0E)
  1197                        ;      result = inb(channels[channel].ctrl  + reg 
                    - 0x0A);
  1198                        ;   else if (reg < 0x16)
  1199                        ;      result = inb(channels[channel].bmide + reg 
                    - 0x0E);
  1200                        ;   if (reg > 0x07 && reg < 0x0C)
  1201                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
  1202                        ;   return result;
  1203                        ;}
  1204                        ;
  1205                        ;void ide_read_buffer(unsigned char channel, unsig
                    ned char reg, unsigned int buffer,unsigned int quads)
  1206                        ;{
  1207                        ;    if (reg > 0x07 && reg < 0x0C)
  1208                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
  1209                        ;  // asm("pushw %es; movw %ds, %ax; movw %ax, %es
                    ");
  1210                        ;   if (reg < 0x08)
  1211                        ;      insl(channels[channel].base  + reg - 0x00, 
                    buffer, quads);
  1212                        ;   else if (reg < 0x0C)
  1213                        ;      insl(channels[channel].base  + reg - 0x06, 
                    buffer, quads);
  1214                        ;   else if (reg < 0x0E)
  1215                        ;      insl(channels[channel].ctrl  + reg - 0x0A, 
                    buffer, quads);
  1216                        ;   else if (reg < 0x16)
  1217                        ;      insl(channels[channel].bmide + reg - 0x0E, 
                    buffer, quads);
  1218                        ;   //asm("popw %es;");
  1219                        ;   if (reg > 0x07 && reg < 0x0C)
  1220                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
  1221                        ;}
  1222                        ;
  1223                        ;void ide_initialize(unsigned int BAR0, unsigned i
                    nt BAR1, unsigned int BAR2, unsigned int BAR3,unsigned int B
                    AR4)
  1224                        ;{
  1225                        ;	UCHAR i;
  1226                        ;    int j, k, count = 0;
  1227                        ;
  1228                        ;   // 1- Detect I/O Ports which interface IDE Con
                    troller:
  1229                        ;   channels[ATA_PRIMARY  ].base  = (BAR0 & 0xFFFF
                    FFFC) + 0x1F0 * (!BAR0);
  Sat Jul 10 2021  1:15                                                Page 26


  1230                        ;   channels[ATA_PRIMARY  ].ctrl  = (BAR1 & 0xFFFF
                    FFFC) + 0x3F6 * (!BAR1);
  1231                        ;   channels[ATA_SECONDARY].base  = (BAR2 & 0xFFFF
                    FFFC) + 0x170 * (!BAR2);
  1232                        ;   channels[ATA_SECONDARY].ctrl  = (BAR3 & 0xFFFF
                    FFFC) + 0x376 * (!BAR3);
  1233                        ;   channels[ATA_PRIMARY  ].bmide = (BAR4 & 0xFFFF
                    FFFC) + 0; // Bus Master IDE
  1234                        ;   channels[ATA_SECONDARY].bmide = (BAR4 & 0xFFFF
                    FFFC) + 8; // Bus Master IDE
  1235                        ;
  1236                        ;   ide_write(ATA_PRIMARY  , ATA_REG_CONTROL, 2);
  1237                        ;   ide_write(ATA_SECONDARY, ATA_REG_CONTROL, 2);
  1238                        ;
  1239                        ;
  1240                        ;   // 3- Detect ATA-ATAPI Devices:
  1241                        ;   for (i = 0; i < 2; i++)
  1242                        ;      for (j = 0; j < 2; j++) {
  1243                        ;
  1244                        ;         unsigned char err = 0, type = IDE_ATA, s
                    tatus;
  1245                        ;         ide_devices[count].Reserved = 0; // Assu
                    ming that no drive here.
  1246                        ;
  1247                        ;         // (I) Select Drive:
  1248                        ;         ide_write(i, ATA_REG_HDDEVSEL, 0xA0 | (j
                     << 4)); // Select Drive.
  1249                        ;         sleep(1); // Wait 1ms for drive select t
                    o work.
  1250                        ;
  1251                        ;         // (II) Send ATA Identify Command:
  1252                        ;         ide_write(i, ATA_REG_COMMAND, ATA_CMD_ID
                    ENTIFY);
  1253                        ;         sleep(1); // This function should be imp
                    lemented in your OS. which waits for 1 ms.
  1254                        ;                   // it is based on System Timer
                     Device Driver.
  1255                        ;
  1256                        ;         // (III) Polling:
  1257                        ;         if (ide_read(i, ATA_REG_STATUS) == 0) co
                    ntinue; // If Status = 0, No Device.
  1258                        ;
  1259                        ;         while(1) {
  1260                        ;            status = ide_read(i, ATA_REG_STATUS);
  1261                        ;            if ((status & ATA_SR_ERR)) {err = 1; 
                    break;} // If Err, Device is not ATA.
  1262                        ;            if (!(status & ATA_SR_BSY) && (status
                     & ATA_SR_DRQ)) break; // Everything is right.
  1263                        ;         }
  1264                        ;
  1265                        ;         // (IV) Probe for ATAPI Devices:
  1266                        ;
  1267                        ;         if (err != 0) {
  1268                        ;            unsigned char cl = ide_read(i, ATA_RE
                    G_LBA1);
  1269                        ;            unsigned char ch = ide_read(i, ATA_RE
                    G_LBA2);
  1270                        ;
  Sat Jul 10 2021  1:15                                                Page 27


  1271                        ;            if (cl == 0x14 && ch ==0xEB)
  1272                        ;               type = IDE_ATAPI;
  1273                        ;            else if (cl == 0x69 && ch == 0x96)
  1274                        ;               type = IDE_ATAPI;
  1275                        ;            else
  1276                        ;               continue; // Unknown Type (may not
                     be a device).
  1277                        ;
  1278                        ;            ide_write(i, ATA_REG_COMMAND, ATA_CMD
                    _IDENTIFY_PACKET);
  1279                        ;            sleep(1);
  1280                        ;         }
  1281                        ;
  1282                        ;         // (V) Read Identification Space of the 
                    Device:
  1283                        ;         ide_read_buffer(i, ATA_REG_DATA, (unsign
                    ed int) ide_buf, 128);
  1284                        ;
  1285                        ;         // (VI) Read Device Parameters:
  1286                        ;         ide_devices[count].Reserved     = 1;
  1287                        ;         ide_devices[count].Type         = type;
  1288                        ;         ide_devices[count].Channel      = i;
  1289                        ;         ide_devices[count].Drive        = j;
  1290                        ;         ide_devices[count].Signature    = *((uns
                    igned short *)(ide_buf + ATA_IDENT_DEVICETYPE));
  1291                        ;         ide_devices[count].Capabilities = *((uns
                    igned short *)(ide_buf + ATA_IDENT_CAPABILITIES));
  1292                        ;         ide_devices[count].CommandSets  = *((uns
                    igned int *)(ide_buf + ATA_IDENT_COMMANDSETS));
  1293                        ;
  1294                        ;         // (VII) Get Size:
  1295                        ;         if (ide_devices[count].CommandSets & (1 
                    << 26))
  1296                        ;            // Device uses 48-Bit Addressing:
  1297                        ;            ide_devices[count].Size   = *((unsign
                    ed int *)(ide_buf + ATA_IDENT_MAX_LBA_EXT));
  1298                        ;         else
  1299                        ;            // Device uses CHS or 28-bit Addressi
                    ng:
  1300                        ;            ide_devices[count].Size   = *((unsign
                    ed int *)(ide_buf + ATA_IDENT_MAX_LBA));
  1301                        ;
  1302                        ;         // (VIII) String indicates model of devi
                    ce (like Western Digital HDD and SONY DVD-RW...):
  1303                        ;         for(k = 0; k < 40; k += 2) {
  1304                        ;            ide_devices[count].Model[k] = ide_buf
                    [ATA_IDENT_MODEL + k + 1];
  1305                        ;            ide_devices[count].Model[k + 1] = ide
                    _buf[ATA_IDENT_MODEL + k];}
  1306                        ;         ide_devices[count].Model[40] = 0; // Ter
                    minate String.
  1307                        ;
  1308                        ;         count++;
  1309                        ;      }
  1310                        ;
  1311                        ;   // 4- Print Summary:
  1312                        ;   for (i = 0; i < 4; i++)
  1313                        ;   {
  Sat Jul 10 2021  1:15                                                Page 28


  1314                        ;      if (ide_devices[i].Reserved == 1)
  1315                        ;      {
  1316                        ;
  1317                        ;      }
  1318                        ;   }
  1319                        ;}
  1320                        ;
  1321                        ;unsigned char ide_polling(unsigned char channel, 
                    unsigned int advanced_check)
  1322                        ;{
  1323                        ;	int i;
  1324                        ;   // (I) Delay 400 nanosecond for BSY to be set:
  1325                        ;   // -------------------------------------------
                    ------
  1326                        ;   for(i = 0; i < 4; i++)
  1327                        ;      ide_read(channel, ATA_REG_ALTSTATUS); // Re
                    ading the Alternate Status port wastes 100ns; loop four time
                    s.
  1328                        ;
  1329                        ;   // (II) Wait for BSY to be cleared:
  1330                        ;   // -------------------------------------------
                    ------
  1331                        ;   while (ide_read(channel, ATA_REG_STATUS) & ATA
                    _SR_BSY)
  1332                        ;      ; // Wait for BSY to be zero.
  1333                        ;
  1334                        ;   if (advanced_check) {
  1335                        ;      unsigned char state = ide_read(channel, ATA
                    _REG_STATUS); // Read Status Register.
  1336                        ;
  1337                        ;      // (III) Check For Errors:
  1338                        ;      // ----------------------------------------
                    ---------
  1339                        ;      if (state & ATA_SR_ERR)
  1340                        ;         return 2; // Error.
  1341                        ;
  1342                        ;      // (IV) Check If Device fault:
  1343                        ;      // ----------------------------------------
                    ---------
  1344                        ;      if (state & ATA_SR_DF)
  1345                        ;         return 1; // Device Fault.
  1346                        ;
  1347                        ;      // (V) Check DRQ:
  1348                        ;      // ----------------------------------------
                    ---------
  1349                        ;      // BSY = 0; DF = 0; ERR = 0 so we should ch
                    eck for DRQ now.
  1350                        ;      if ((state & ATA_SR_DRQ) == 0)
  1351                        ;         return 3; // DRQ should be set
  1352                        ;
  1353                        ;   }
  1354                        ;
  1355                        ;   return 0; // No Error.
  1356                        ;
  1357                        ;}
  1358                        ;*/
  1359                        ;
  1360                        ;/*
  Sat Jul 10 2021  1:15                                                Page 29


  1361                        ;#define ATA_SR_BSY     0x80
  1362                        ;#define ATA_SR_DRDY    0x40
  1363                        ;#define ATA_SR_DF      0x20
  1364                        ;#define ATA_SR_DSC     0x10
  1365                        ;#define ATA_SR_DRQ     0x08
  1366                        ;#define ATA_SR_CORR    0x04
  1367                        ;#define ATA_SR_IDX     0x02
  1368                        ;#define ATA_SR_ERR     0x01
  1369                        ;
  1370                        ;#define FX_ATA_REG_DATA       ((LPCHAR)0xAFE830)
  1371                        ;#define FX_ATA_REG_ERROR      ((LPCHAR)0xAFE831)
  1372                        ;#define FX_ATA_REG_FEATURES   ((LPCHAR)0xAFE831)
  1373                        ;#define FX_ATA_REG_SECCOUNT0  ((LPCHAR)0xAFE832)
  1374                        ;#define FX_ATA_REG_LBA0       ((LPCHAR)0xAFE833)
  1375                        ;#define FX_ATA_REG_LBA1       ((LPCHAR)0xAFE834)
  1376                        ;#define FX_ATA_REG_LBA2       ((LPCHAR)0xAFE835)
  1377                        ;#define FX_ATA_REG_HDDEVSEL   ((LPCHAR)0xAFE836)
  1378                        ;#define FX_ATA_REG_HDDEVSEL   ((LPCHAR)0xAFE836)
  1379                        ;#define FX_ATA_REG_COMMAND    ((LPCHAR)0xAFE837)
  1380                        ;#define FX_ATA_REG_STATUS     ((LPCHAR)0xAFE837)
  1381                        ;#define FX_ATA_REG_SECCOUNT1  ((LPCHAR)0xAFE838)
  1382                        ;#define FX_ATA_REG_LBA3       ((LPCHAR)0xAFE839)
  1383                        ;
  1384                        ;*/
  1385                        ;
  1386                        ;void k_ide_isbusy(void)
  1387                        ;{
  1388                        	.line	417
  1389                        	.line	418
  1390                        	FXHDD
  1391                        	xdef	~~k_ide_isbusy
  1392                        	func
  1393                        	.function	418
  1394                        ~~k_ide_isbusy:
  1395                        	longa	on
  1396                        	longi	on
  1397 06:8FFE: 3B           	tsc
  1398 06:8FFF: 38           	sec
  1399 06:9000: E9 04 00     	sbc	#L2
  1400 06:9003: 1B           	tcs
  1401 06:9004: 0B           	phd
  1402 06:9005: 5B           	tcd
  1403                        	.block	418
  1404                        ;	INT timeout  = 128;
  1405                        ;	UCHAR sts    = ATA_SR_BSY;
  1406                        ;	UCHAR errsts = 0x00;
  1407                        ;
  1408                        ;	k_debug_string("k_ide_isbusy:enter\r\n");
  1409             00000000   timeout_1	set	0
  1410             00000002   sts_1	set	2
  1411             00000003   errsts_1	set	3
  1412                        	.sym	timeout,0,5,1,16
  1413                        	.sym	sts,2,14,1,8
  1414                        	.sym	errsts,3,14,1,8
  1415 06:9006: A9 80 00     	lda	#$80
  1416 06:9009: 85 01        	sta	<L3+timeout_1
  1417 06:900B: E2 20        	sep	#$20
  1418                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 30


  1419 06:900D: A9 80        	lda	#$80
  1420 06:900F: 85 03        	sta	<L3+sts_1
  1421 06:9011: C2 20        	rep	#$20
  1422                        	longa	on
  1423 06:9013: E2 20        	sep	#$20
  1424                        	longa	off
  1425 06:9015: 64 04        	stz	<L3+errsts_1
  1426 06:9017: C2 20        	rep	#$20
  1427                        	longa	on
  1428                        	.line	423
  1429 06:9019: F4 xx xx     	pea	#^L1
  1430 06:901C: F4 xx xx     	pea	#<L1
  1431 06:901F: 22 xx xx xx  	jsl	~~k_debug_string
  1432                        ;
  1433                        ;	do
  1434                        	.line	425
  1435                        L10003:
  1436                        ;	{
  1437                        	.line	426
  1438                        ;		sts = FX_ATA_REG_STATUS[0];
  1439                        	.line	427
  1440 06:9023: E2 20        	sep	#$20
  1441                        	longa	off
  1442 06:9025: AF 37 E8 AF  	lda	>11528247
  1443 06:9029: 85 03        	sta	<L3+sts_1
  1444 06:902B: C2 20        	rep	#$20
  1445                        	longa	on
  1446                        ;		//k_debug_bits("k_ide_isbusy:",sts);
  1447                        ;		if(sts & ATA_SR_ERR)
  1448                        	.line	429
  1449                        ;		{
  1450 06:902D: E2 20        	sep	#$20
  1451                        	longa	off
  1452 06:902F: A5 03        	lda	<L3+sts_1
  1453 06:9031: 29 01        	and	#<$1
  1454 06:9033: C2 20        	rep	#$20
  1455                        	longa	on
  1456 06:9035: D0 03        	bne	L5
  1457 06:9037: 82 19 00     	brl	L10004
  1458                        L5:
  1459                        	.line	430
  1460                        ;			errsts = FX_ATA_REG_ERROR[0];
  1461                        	.line	431
  1462 06:903A: E2 20        	sep	#$20
  1463                        	longa	off
  1464 06:903C: AF 31 E8 AF  	lda	>11528241
  1465 06:9040: 85 04        	sta	<L3+errsts_1
  1466 06:9042: C2 20        	rep	#$20
  1467                        	longa	on
  1468                        ;			k_debug_bits("k_ide_busy:ERR:",e
                    rrsts);
  1469                        	.line	432
  1470 06:9044: D4 04        	pei	<L3+errsts_1
  1471 06:9046: F4 xx xx     	pea	#^L1+21
  1472 06:9049: F4 xx xx     	pea	#<L1+21
  1473 06:904C: 22 xx xx xx  	jsl	~~k_debug_bits
  1474                        ;			break;
  1475                        	.line	433
  Sat Jul 10 2021  1:15                                                Page 31


  1476 06:9050: 82 1F 00     	brl	L10002
  1477                        ;		}
  1478                        	.line	434
  1479                        ;		timeout--;
  1480                        L10004:
  1481                        	.line	435
  1482 06:9053: C6 01        	dec	<L3+timeout_1
  1483                        ;	}while((sts & ATA_SR_BSY) && timeout > 0);
  1484                        	.line	436
  1485                        L10001:
  1486 06:9055: E2 20        	sep	#$20
  1487                        	longa	off
  1488 06:9057: A5 03        	lda	<L3+sts_1
  1489 06:9059: 29 80        	and	#<$80
  1490 06:905B: C2 20        	rep	#$20
  1491                        	longa	on
  1492 06:905D: D0 03        	bne	L7
  1493 06:905F: 82 10 00     	brl	L6
  1494                        L7:
  1495 06:9062: 38           	sec
  1496 06:9063: A9 00 00     	lda	#$0
  1497 06:9066: E5 01        	sbc	<L3+timeout_1
  1498 06:9068: 70 03        	bvs	L8
  1499 06:906A: 49 00 80     	eor	#$8000
  1500                        L8:
  1501 06:906D: 30 03        	bmi	L9
  1502 06:906F: 82 B1 FF     	brl	L10003
  1503                        L9:
  1504                        L6:
  1505                        L10002:
  1506                        ;	k_debug_bits("k_ide_isbusy:",sts);
  1507                        	.line	437
  1508 06:9072: D4 03        	pei	<L3+sts_1
  1509 06:9074: F4 xx xx     	pea	#^L1+37
  1510 06:9077: F4 xx xx     	pea	#<L1+37
  1511 06:907A: 22 xx xx xx  	jsl	~~k_debug_bits
  1512                        ;	k_debug_string("k_ide_isbusy:exit\r\n");
  1513                        	.line	438
  1514 06:907E: F4 xx xx     	pea	#^L1+51
  1515 06:9081: F4 xx xx     	pea	#<L1+51
  1516 06:9084: 22 xx xx xx  	jsl	~~k_debug_string
  1517                        ;
  1518                        ;	return;
  1519                        	.line	440
  1520                        L10:
  1521 06:9088: 2B           	pld
  1522 06:9089: 3B           	tsc
  1523 06:908A: 18           	clc
  1524 06:908B: 69 04 00     	adc	#L2
  1525 06:908E: 1B           	tcs
  1526 06:908F: 6B           	rtl
  1527                        ;}
  1528                        	.line	441
  1529                        	.endblock	441
  1530             00000004   L2	equ	4
  1531             00000001   L3	equ	1
  1532 06:9090:              	ends
  1533                        	efunc
  Sat Jul 10 2021  1:15                                                Page 32


  1534                        	.endfunc	441,1,4
  1535                        	.line	441
  1536                        	data
  1537                        L1:
  1538 00:0026: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$62,$75,
                    $73,$79,$3A,$65,$6E
       00:002A: 65 5F 69 73 
       00:002E: 62 75 73 79 
       00:0032: 3A 65 6E 
  1539 00:0035: 74 65 72 0D  	db	$74,$65,$72,$0D,$0A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$62,$75,$73
       00:0039: 0A 00 6B 5F 
       00:003D: 69 64 65 5F 
       00:0041: 62 75 73 
  1540 00:0044: 79 3A 45 52  	db	$79,$3A,$45,$52,$52,$3A,$00,$6B,$5F,$69,
                    $64,$65,$5F,$69,$73
       00:0048: 52 3A 00 6B 
       00:004C: 5F 69 64 65 
       00:0050: 5F 69 73 
  1541 00:0053: 62 75 73 79  	db	$62,$75,$73,$79,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$69,$73,$62
       00:0057: 3A 00 6B 5F 
       00:005B: 69 64 65 5F 
       00:005F: 69 73 62 
  1542 00:0062: 75 73 79 3A  	db	$75,$73,$79,$3A,$65,$78,$69,$74,$0D,$0A,
                    $00
       00:0066: 65 78 69 74 
       00:006A: 0D 0A 00 
  1543 00:006D:              	ends
  1544                        ;
  1545                        ;
  1546                        ;void k_ide_isready(void)
  1547                        ;{
  1548                        	.line	444
  1549                        	.line	445
  1550                        	FXHDD
  1551                        	xdef	~~k_ide_isready
  1552                        	func
  1553                        	.function	445
  1554                        ~~k_ide_isready:
  1555                        	longa	on
  1556                        	longi	on
  1557 06:9090: 3B           	tsc
  1558 06:9091: 38           	sec
  1559 06:9092: E9 04 00     	sbc	#L12
  1560 06:9095: 1B           	tcs
  1561 06:9096: 0B           	phd
  1562 06:9097: 5B           	tcd
  1563                        	.block	445
  1564                        ;	INT timeout  = 128;
  1565                        ;	UCHAR sts    = ATA_SR_DRDY;
  1566                        ;	UCHAR errsts = 0x00;
  1567                        ;
  1568                        ;	//k_debug_string("k_ide_isready:enter\r\n");
  1569                        ;
  1570                        ;	do
  1571             00000000   timeout_1	set	0
  1572             00000002   sts_1	set	2
  Sat Jul 10 2021  1:15                                                Page 33


  1573             00000003   errsts_1	set	3
  1574                        	.sym	timeout,0,5,1,16
  1575                        	.sym	sts,2,14,1,8
  1576                        	.sym	errsts,3,14,1,8
  1577 06:9098: A9 80 00     	lda	#$80
  1578 06:909B: 85 01        	sta	<L13+timeout_1
  1579 06:909D: E2 20        	sep	#$20
  1580                        	longa	off
  1581 06:909F: A9 40        	lda	#$40
  1582 06:90A1: 85 03        	sta	<L13+sts_1
  1583 06:90A3: C2 20        	rep	#$20
  1584                        	longa	on
  1585 06:90A5: E2 20        	sep	#$20
  1586                        	longa	off
  1587 06:90A7: 64 04        	stz	<L13+errsts_1
  1588 06:90A9: C2 20        	rep	#$20
  1589                        	longa	on
  1590                        	.line	452
  1591                        L10007:
  1592                        ;	{
  1593                        	.line	453
  1594                        ;		sts = FX_ATA_REG_STATUS[0];
  1595                        	.line	454
  1596 06:90AB: E2 20        	sep	#$20
  1597                        	longa	off
  1598 06:90AD: AF 37 E8 AF  	lda	>11528247
  1599 06:90B1: 85 03        	sta	<L13+sts_1
  1600 06:90B3: C2 20        	rep	#$20
  1601                        	longa	on
  1602                        ;
  1603                        ;		if(sts & ATA_SR_BSY)
  1604                        	.line	456
  1605                        ;			k_ide_isbusy();
  1606 06:90B5: E2 20        	sep	#$20
  1607                        	longa	off
  1608 06:90B7: A5 03        	lda	<L13+sts_1
  1609 06:90B9: 29 80        	and	#<$80
  1610 06:90BB: C2 20        	rep	#$20
  1611                        	longa	on
  1612 06:90BD: D0 03        	bne	L15
  1613 06:90BF: 82 04 00     	brl	L10008
  1614                        L15:
  1615                        	.line	457
  1616 06:90C2: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  1617                        ;
  1618                        ;		//k_debug_bits("k_ide_isready:",sts);
  1619                        ;		//k_debug_hex("k_ide_isready:set:",(sts 
                    & ATA_SR_DRDY));
  1620                        ;		if((sts & ATA_SR_ERR) && (((sts & ATA_SR
                    _BSY) == 0) && ((sts & ATA_SR_BSY) == 0)  ))
  1621                        L10008:
  1622                        	.line	461
  1623                        ;		{
  1624 06:90C6: E2 20        	sep	#$20
  1625                        	longa	off
  1626 06:90C8: A5 03        	lda	<L13+sts_1
  1627 06:90CA: 29 01        	and	#<$1
  1628 06:90CC: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 34


  1629                        	longa	on
  1630 06:90CE: D0 03        	bne	L16
  1631 06:90D0: 82 33 00     	brl	L10009
  1632                        L16:
  1633 06:90D3: E2 20        	sep	#$20
  1634                        	longa	off
  1635 06:90D5: A5 03        	lda	<L13+sts_1
  1636 06:90D7: 29 80        	and	#<$80
  1637 06:90D9: C2 20        	rep	#$20
  1638                        	longa	on
  1639 06:90DB: F0 03        	beq	L17
  1640 06:90DD: 82 26 00     	brl	L10009
  1641                        L17:
  1642 06:90E0: E2 20        	sep	#$20
  1643                        	longa	off
  1644 06:90E2: A5 03        	lda	<L13+sts_1
  1645 06:90E4: 29 80        	and	#<$80
  1646 06:90E6: C2 20        	rep	#$20
  1647                        	longa	on
  1648 06:90E8: F0 03        	beq	L18
  1649 06:90EA: 82 19 00     	brl	L10009
  1650                        L18:
  1651                        	.line	462
  1652                        ;			errsts = FX_ATA_REG_ERROR[0];
  1653                        	.line	463
  1654 06:90ED: E2 20        	sep	#$20
  1655                        	longa	off
  1656 06:90EF: AF 31 E8 AF  	lda	>11528241
  1657 06:90F3: 85 04        	sta	<L13+errsts_1
  1658 06:90F5: C2 20        	rep	#$20
  1659                        	longa	on
  1660                        ;			k_debug_bits("k_ide_isready:ERR:
                    ",errsts);
  1661                        	.line	464
  1662 06:90F7: D4 04        	pei	<L13+errsts_1
  1663 06:90F9: F4 xx xx     	pea	#^L11
  1664 06:90FC: F4 xx xx     	pea	#<L11
  1665 06:90FF: 22 xx xx xx  	jsl	~~k_debug_bits
  1666                        ;			break;
  1667                        	.line	465
  1668 06:9103: 82 16 00     	brl	L10006
  1669                        ;		}
  1670                        	.line	466
  1671                        ;		timeout--;
  1672                        L10009:
  1673                        	.line	467
  1674 06:9106: C6 01        	dec	<L13+timeout_1
  1675                        ;		if(timeout < 0)
  1676                        	.line	468
  1677                        ;			break;
  1678 06:9108: A5 01        	lda	<L13+timeout_1
  1679 06:910A: 10 03        	bpl	L19
  1680 06:910C: 82 0D 00     	brl	L10006
  1681                        L19:
  1682                        ;	}
  1683                        	.line	470
  1684                        ;	while(!(sts & ATA_SR_DRDY));
  1685                        L10005:
  Sat Jul 10 2021  1:15                                                Page 35


  1686 06:910F: E2 20        	sep	#$20
  1687                        	longa	off
  1688 06:9111: A5 03        	lda	<L13+sts_1
  1689 06:9113: 29 40        	and	#<$40
  1690 06:9115: C2 20        	rep	#$20
  1691                        	longa	on
  1692 06:9117: D0 03        	bne	L20
  1693 06:9119: 82 8F FF     	brl	L10007
  1694                        L20:
  1695                        L10006:
  1696                        ;	//k_debug_bits("k_ide_isready:",sts);
  1697                        ;	//k_debug_string("k_ide_isready:exit\r\n");
  1698                        ;
  1699                        ;	return;
  1700                        	.line	475
  1701                        L21:
  1702 06:911C: 2B           	pld
  1703 06:911D: 3B           	tsc
  1704 06:911E: 18           	clc
  1705 06:911F: 69 04 00     	adc	#L12
  1706 06:9122: 1B           	tcs
  1707 06:9123: 6B           	rtl
  1708                        ;}
  1709                        	.line	476
  1710                        	.endblock	476
  1711             00000004   L12	equ	4
  1712             00000001   L13	equ	1
  1713 06:9124:              	ends
  1714                        	efunc
  1715                        	.endfunc	476,1,4
  1716                        	.line	476
  1717                        	data
  1718                        L11:
  1719 00:006D: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$72,$65,
                    $61,$64,$79,$3A,$45
       00:0071: 65 5F 69 73 
       00:0075: 72 65 61 64 
       00:0079: 79 3A 45 
  1720 00:007C: 52 52 3A 00  	db	$52,$52,$3A,$00
  1721 00:0080:              	ends
  1722                        ;
  1723                        ;void k_ide_isdrq(void)
  1724                        ;{
  1725                        	.line	478
  1726                        	.line	479
  1727                        	FXHDD
  1728                        	xdef	~~k_ide_isdrq
  1729                        	func
  1730                        	.function	479
  1731                        ~~k_ide_isdrq:
  1732                        	longa	on
  1733                        	longi	on
  1734 06:9124: 3B           	tsc
  1735 06:9125: 38           	sec
  1736 06:9126: E9 08 00     	sbc	#L23
  1737 06:9129: 1B           	tcs
  1738 06:912A: 0B           	phd
  1739 06:912B: 5B           	tcd
  Sat Jul 10 2021  1:15                                                Page 36


  1740                        	.block	479
  1741                        ;	INT timeout  = 128;
  1742                        ;	UCHAR sts    = ATA_SR_DRDY;
  1743                        ;	UCHAR errsts = 0x00;
  1744                        ;
  1745                        ;	k_debug_string("k_ide_isdrq:enter\r\n");
  1746             00000000   timeout_1	set	0
  1747             00000002   sts_1	set	2
  1748             00000003   errsts_1	set	3
  1749                        	.sym	timeout,0,5,1,16
  1750                        	.sym	sts,2,14,1,8
  1751                        	.sym	errsts,3,14,1,8
  1752 06:912C: A9 80 00     	lda	#$80
  1753 06:912F: 85 05        	sta	<L24+timeout_1
  1754 06:9131: E2 20        	sep	#$20
  1755                        	longa	off
  1756 06:9133: A9 40        	lda	#$40
  1757 06:9135: 85 07        	sta	<L24+sts_1
  1758 06:9137: C2 20        	rep	#$20
  1759                        	longa	on
  1760 06:9139: E2 20        	sep	#$20
  1761                        	longa	off
  1762 06:913B: 64 08        	stz	<L24+errsts_1
  1763 06:913D: C2 20        	rep	#$20
  1764                        	longa	on
  1765                        	.line	484
  1766 06:913F: F4 xx xx     	pea	#^L22
  1767 06:9142: F4 xx xx     	pea	#<L22
  1768 06:9145: 22 xx xx xx  	jsl	~~k_debug_string
  1769                        ;
  1770                        ;	do
  1771                        	.line	486
  1772                        L10012:
  1773                        ;	{
  1774                        	.line	487
  1775                        ;		sts = FX_ATA_REG_STATUS[0];
  1776                        	.line	488
  1777 06:9149: E2 20        	sep	#$20
  1778                        	longa	off
  1779 06:914B: AF 37 E8 AF  	lda	>11528247
  1780 06:914F: 85 07        	sta	<L24+sts_1
  1781 06:9151: C2 20        	rep	#$20
  1782                        	longa	on
  1783                        ;		//k_debug_bits("k_ide_isdrq:",sts);
  1784                        ;
  1785                        ;		//if(sts & ATA_SR_BSY)
  1786                        ;		//	k_ide_isbusy();
  1787                        ;
  1788                        ;		if(sts & ATA_SR_ERR)
  1789                        	.line	494
  1790                        ;		{
  1791 06:9153: E2 20        	sep	#$20
  1792                        	longa	off
  1793 06:9155: A5 07        	lda	<L24+sts_1
  1794 06:9157: 29 01        	and	#<$1
  1795 06:9159: C2 20        	rep	#$20
  1796                        	longa	on
  1797 06:915B: D0 03        	bne	L26
  Sat Jul 10 2021  1:15                                                Page 37


  1798 06:915D: 82 19 00     	brl	L10013
  1799                        L26:
  1800                        	.line	495
  1801                        ;			errsts = FX_ATA_REG_ERROR[0];
  1802                        	.line	496
  1803 06:9160: E2 20        	sep	#$20
  1804                        	longa	off
  1805 06:9162: AF 31 E8 AF  	lda	>11528241
  1806 06:9166: 85 08        	sta	<L24+errsts_1
  1807 06:9168: C2 20        	rep	#$20
  1808                        	longa	on
  1809                        ;			k_debug_bits("k_ide_isdrq:ERR:",
                    errsts);
  1810                        	.line	497
  1811 06:916A: D4 08        	pei	<L24+errsts_1
  1812 06:916C: F4 xx xx     	pea	#^L22+20
  1813 06:916F: F4 xx xx     	pea	#<L22+20
  1814 06:9172: 22 xx xx xx  	jsl	~~k_debug_bits
  1815                        ;			break;
  1816                        	.line	498
  1817 06:9176: 82 13 00     	brl	L10011
  1818                        ;		}
  1819                        	.line	499
  1820                        ;		timeout--;
  1821                        L10013:
  1822                        	.line	500
  1823 06:9179: C6 05        	dec	<L24+timeout_1
  1824                        ;	}while((sts & ATA_SR_DRQ) != ATA_SR_DRQ);
  1825                        	.line	501
  1826                        L10010:
  1827 06:917B: A5 07        	lda	<L24+sts_1
  1828 06:917D: 29 08 00     	and	#<$8
  1829 06:9180: 85 01        	sta	<R0
  1830 06:9182: A5 01        	lda	<R0
  1831 06:9184: C9 08 00     	cmp	#<$8
  1832 06:9187: F0 03        	beq	L27
  1833 06:9189: 82 BD FF     	brl	L10012
  1834                        L27:
  1835                        L10011:
  1836                        ;	k_debug_bits("k_ide_isdrq:",sts);
  1837                        	.line	502
  1838 06:918C: D4 07        	pei	<L24+sts_1
  1839 06:918E: F4 xx xx     	pea	#^L22+37
  1840 06:9191: F4 xx xx     	pea	#<L22+37
  1841 06:9194: 22 xx xx xx  	jsl	~~k_debug_bits
  1842                        ;	k_debug_string("k_ide_isdrq:exit\r\n");
  1843                        	.line	503
  1844 06:9198: F4 xx xx     	pea	#^L22+50
  1845 06:919B: F4 xx xx     	pea	#<L22+50
  1846 06:919E: 22 xx xx xx  	jsl	~~k_debug_string
  1847                        ;
  1848                        ;	return;
  1849                        	.line	505
  1850                        L28:
  1851 06:91A2: 2B           	pld
  1852 06:91A3: 3B           	tsc
  1853 06:91A4: 18           	clc
  1854 06:91A5: 69 08 00     	adc	#L23
  Sat Jul 10 2021  1:15                                                Page 38


  1855 06:91A8: 1B           	tcs
  1856 06:91A9: 6B           	rtl
  1857                        ;}
  1858                        	.line	506
  1859                        	.endblock	506
  1860             00000008   L23	equ	8
  1861             00000005   L24	equ	5
  1862 06:91AA:              	ends
  1863                        	efunc
  1864                        	.endfunc	506,5,8
  1865                        	.line	506
  1866                        	data
  1867                        L22:
  1868 00:0080: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$64,$72,
                    $71,$3A,$65,$6E,$74
       00:0084: 65 5F 69 73 
       00:0088: 64 72 71 3A 
       00:008C: 65 6E 74 
  1869 00:008F: 65 72 0D 0A  	db	$65,$72,$0D,$0A,$00,$6B,$5F,$69,$64,$65,
                    $5F,$69,$73,$64,$72
       00:0093: 00 6B 5F 69 
       00:0097: 64 65 5F 69 
       00:009B: 73 64 72 
  1870 00:009E: 71 3A 45 52  	db	$71,$3A,$45,$52,$52,$3A,$00,$6B,$5F,$69,
                    $64,$65,$5F,$69,$73
       00:00A2: 52 3A 00 6B 
       00:00A6: 5F 69 64 65 
       00:00AA: 5F 69 73 
  1871 00:00AD: 64 72 71 3A  	db	$64,$72,$71,$3A,$00,$6B,$5F,$69,$64,$65,
                    $5F,$69,$73,$64,$72
       00:00B1: 00 6B 5F 69 
       00:00B5: 64 65 5F 69 
       00:00B9: 73 64 72 
  1872 00:00BC: 71 3A 65 78  	db	$71,$3A,$65,$78,$69,$74,$0D,$0A,$00
       00:00C0: 69 74 0D 0A 
       00:00C4: 00 
  1873 00:00C5:              	ends
  1874                        ;
  1875                        ;
  1876                        ;void ide_select_drive(UCHAR bus, UCHAR i)
  1877                        ;{
  1878                        	.line	509
  1879                        	.line	510
  1880                        	FXHDD
  1881                        	xdef	~~ide_select_drive
  1882                        	func
  1883                        	.function	510
  1884                        ~~ide_select_drive:
  1885                        	longa	on
  1886                        	longi	on
  1887 06:91AA: 3B           	tsc
  1888 06:91AB: 38           	sec
  1889 06:91AC: E9 00 00     	sbc	#L30
  1890 06:91AF: 1B           	tcs
  1891 06:91B0: 0B           	phd
  1892 06:91B1: 5B           	tcd
  1893             00000004   bus_0	set	4
  1894             00000006   i_0	set	6
  Sat Jul 10 2021  1:15                                                Page 39


  1895                        	.block	510
  1896                        ;	k_debug_hex("ide_select_drive:",i);
  1897                        	.sym	bus,4,14,6,8
  1898                        	.sym	i,6,14,6,8
  1899                        	.line	511
  1900 06:91B2: D4 06        	pei	<L30+i_0
  1901 06:91B4: F4 xx xx     	pea	#^L29
  1902 06:91B7: F4 xx xx     	pea	#<L29
  1903 06:91BA: 22 xx xx xx  	jsl	~~k_debug_hex
  1904                        ;
  1905                        ;	if(bus == ATA_PRIMARY)
  1906                        	.line	513
  1907                        ;	{
  1908 06:91BE: A5 04        	lda	<L30+bus_0
  1909 06:91C0: 29 FF 00     	and	#$ff
  1910 06:91C3: F0 03        	beq	L33
  1911 06:91C5: 82 21 00     	brl	L10014
  1912                        L33:
  1913                        	.line	514
  1914                        ;		if(i == ATA_MASTER)
  1915                        	.line	515
  1916                        ;			ATA_PRIMARY_IO[ATA_REG_HDDEVSEL]
                     = 0xA0;
  1917 06:91C8: A5 06        	lda	<L30+i_0
  1918 06:91CA: 29 FF 00     	and	#$ff
  1919 06:91CD: F0 03        	beq	L34
  1920 06:91CF: 82 0D 00     	brl	L10015
  1921                        L34:
  1922                        	.line	516
  1923 06:91D2: E2 20        	sep	#$20
  1924                        	longa	off
  1925 06:91D4: A9 A0        	lda	#$a0
  1926 06:91D6: 8F 36 E8 AF  	sta	>11528246
  1927 06:91DA: C2 20        	rep	#$20
  1928                        	longa	on
  1929                        ;		else
  1930 06:91DC: 82 0A 00     	brl	L10016
  1931                        L10015:
  1932                        ;			ATA_PRIMARY_IO[ATA_REG_HDDEVSEL]
                     = 0xB0;
  1933                        	.line	518
  1934 06:91DF: E2 20        	sep	#$20
  1935                        	longa	off
  1936 06:91E1: A9 B0        	lda	#$b0
  1937 06:91E3: 8F 36 E8 AF  	sta	>11528246
  1938 06:91E7: C2 20        	rep	#$20
  1939                        	longa	on
  1940                        L10016:
  1941                        ;	}
  1942                        	.line	519
  1943                        ;
  1944                        ;
  1945                        ;	//k_delay(10);
  1946                        ;	k_ide_isbusy();
  1947                        L10014:
  1948                        	.line	523
  1949 06:91E9: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  1950                        ;
  Sat Jul 10 2021  1:15                                                Page 40


  1951                        ;}
  1952                        	.line	525
  1953                        L35:
  1954 06:91ED: A5 02        	lda	<L30+2
  1955 06:91EF: 85 06        	sta	<L30+2+4
  1956 06:91F1: A5 01        	lda	<L30+1
  1957 06:91F3: 85 05        	sta	<L30+1+4
  1958 06:91F5: 2B           	pld
  1959 06:91F6: 3B           	tsc
  1960 06:91F7: 18           	clc
  1961 06:91F8: 69 04 00     	adc	#L30+4
  1962 06:91FB: 1B           	tcs
  1963 06:91FC: 6B           	rtl
  1964                        	.endblock	525
  1965             00000000   L30	equ	0
  1966             00000001   L31	equ	1
  1967 06:91FD:              	ends
  1968                        	efunc
  1969                        	.endfunc	525,1,0
  1970                        	.line	525
  1971                        	data
  1972                        L29:
  1973 00:00C5: 69 64 65 5F  	db	$69,$64,$65,$5F,$73,$65,$6C,$65,$63,$74,
                    $5F,$64,$72,$69,$76
       00:00C9: 73 65 6C 65 
       00:00CD: 63 74 5F 64 
       00:00D1: 72 69 76 
  1974 00:00D4: 65 3A 00     	db	$65,$3A,$00
  1975 00:00D7:              	ends
  1976                        ;
  1977                        ;void k_ide_diagnostic(void)
  1978                        ;{
  1979                        	.line	527
  1980                        	.line	528
  1981                        	FXHDD
  1982                        	xdef	~~k_ide_diagnostic
  1983                        	func
  1984                        	.function	528
  1985                        ~~k_ide_diagnostic:
  1986                        	longa	on
  1987                        	longi	on
  1988 06:91FD: 3B           	tsc
  1989 06:91FE: 38           	sec
  1990 06:91FF: E9 01 00     	sbc	#L37
  1991 06:9202: 1B           	tcs
  1992 06:9203: 0B           	phd
  1993 06:9204: 5B           	tcd
  1994                        	.block	528
  1995                        ;	UCHAR sts = 0x00;
  1996                        ;
  1997                        ;	k_ide_isbusy();
  1998             00000000   sts_1	set	0
  1999                        	.sym	sts,0,14,1,8
  2000 06:9205: E2 20        	sep	#$20
  2001                        	longa	off
  2002 06:9207: 64 01        	stz	<L38+sts_1
  2003 06:9209: C2 20        	rep	#$20
  2004                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 41


  2005                        	.line	531
  2006 06:920B: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2007                        ;
  2008                        ;	IDE_CMD_STAT[0] = 0x90;
  2009                        	.line	533
  2010 06:920F: E2 20        	sep	#$20
  2011                        	longa	off
  2012 06:9211: A9 90        	lda	#$90
  2013 06:9213: 8F 37 E8 AF  	sta	>11528247
  2014 06:9217: C2 20        	rep	#$20
  2015                        	longa	on
  2016                        ;
  2017                        ;	k_ide_isbusy();
  2018                        	.line	535
  2019 06:9219: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2020                        ;
  2021                        ;	sts = IDE_ERROR[0];
  2022                        	.line	537
  2023 06:921D: E2 20        	sep	#$20
  2024                        	longa	off
  2025 06:921F: AF 31 E8 AF  	lda	>11528241
  2026 06:9223: 85 01        	sta	<L38+sts_1
  2027 06:9225: C2 20        	rep	#$20
  2028                        	longa	on
  2029                        ;	k_debug_hex("k_ide_diagnostic:code:",sts);
  2030                        	.line	538
  2031 06:9227: D4 01        	pei	<L38+sts_1
  2032 06:9229: F4 xx xx     	pea	#^L36
  2033 06:922C: F4 xx xx     	pea	#<L36
  2034 06:922F: 22 xx xx xx  	jsl	~~k_debug_hex
  2035                        ;
  2036                        ;	//k_ide_isbusy();
  2037                        ;
  2038                        ;	return;
  2039                        	.line	542
  2040                        L40:
  2041 06:9233: 2B           	pld
  2042 06:9234: 3B           	tsc
  2043 06:9235: 18           	clc
  2044 06:9236: 69 01 00     	adc	#L37
  2045 06:9239: 1B           	tcs
  2046 06:923A: 6B           	rtl
  2047                        ;}
  2048                        	.line	543
  2049                        	.endblock	543
  2050             00000001   L37	equ	1
  2051             00000001   L38	equ	1
  2052 06:923B:              	ends
  2053                        	efunc
  2054                        	.endfunc	543,1,1
  2055                        	.line	543
  2056                        	data
  2057                        L36:
  2058 00:00D7: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$64,$69,$61,$67,
                    $6E,$6F,$73,$74,$69
       00:00DB: 65 5F 64 69 
       00:00DF: 61 67 6E 6F 
       00:00E3: 73 74 69 
  Sat Jul 10 2021  1:15                                                Page 42


  2059 00:00E6: 63 3A 63 6F  	db	$63,$3A,$63,$6F,$64,$65,$3A,$00
       00:00EA: 64 65 3A 00 
  2060 00:00EE:              	ends
  2061                        ;
  2062                        ;
  2063                        ;void k_ide_init(void)
  2064                        ;{
  2065                        	.line	546
  2066                        	.line	547
  2067                        	FXHDD
  2068                        	xdef	~~k_ide_init
  2069                        	func
  2070                        	.function	547
  2071                        ~~k_ide_init:
  2072                        	longa	on
  2073                        	longi	on
  2074 06:923B: 3B           	tsc
  2075 06:923C: 38           	sec
  2076 06:923D: E9 01 00     	sbc	#L42
  2077 06:9240: 1B           	tcs
  2078 06:9241: 0B           	phd
  2079 06:9242: 5B           	tcd
  2080                        	.block	547
  2081                        ;	UCHAR sts = 0x00;
  2082                        ;
  2083                        ;	//k_ide_diagnostic();
  2084                        ;
  2085                        ;	k_debug_hex("k_ide_init:",0);
  2086             00000000   sts_1	set	0
  2087                        	.sym	sts,0,14,1,8
  2088 06:9243: E2 20        	sep	#$20
  2089                        	longa	off
  2090 06:9245: 64 01        	stz	<L43+sts_1
  2091 06:9247: C2 20        	rep	#$20
  2092                        	longa	on
  2093                        	.line	552
  2094 06:9249: F4 00 00     	pea	#<$0
  2095 06:924C: F4 xx xx     	pea	#^L41
  2096 06:924F: F4 xx xx     	pea	#<L41
  2097 06:9252: 22 xx xx xx  	jsl	~~k_debug_hex
  2098                        ;	IDE_HEAD[0] = 0x06;
  2099                        	.line	553
  2100 06:9256: E2 20        	sep	#$20
  2101                        	longa	off
  2102 06:9258: A9 06        	lda	#$6
  2103 06:925A: 8F 36 E8 AF  	sta	>11528246
  2104 06:925E: C2 20        	rep	#$20
  2105                        	longa	on
  2106                        ;
  2107                        ;
  2108                        ;
  2109                        ;	//IDE_CMD_STAT[0] = 0x08;
  2110                        ;	k_ide_isbusy();
  2111                        	.line	558
  2112 06:9260: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2113                        ;
  2114                        ;	//k_ide_wait();
  2115                        ;	sts = IDE_CMD_STAT[0];
  Sat Jul 10 2021  1:15                                                Page 43


  2116                        	.line	561
  2117 06:9264: E2 20        	sep	#$20
  2118                        	longa	off
  2119 06:9266: AF 37 E8 AF  	lda	>11528247
  2120 06:926A: 85 01        	sta	<L43+sts_1
  2121 06:926C: C2 20        	rep	#$20
  2122                        	longa	on
  2123                        ;	k_debug_bits("k_ide_init:softreset:",sts);
  2124                        	.line	562
  2125 06:926E: D4 01        	pei	<L43+sts_1
  2126 06:9270: F4 xx xx     	pea	#^L41+12
  2127 06:9273: F4 xx xx     	pea	#<L41+12
  2128 06:9276: 22 xx xx xx  	jsl	~~k_debug_bits
  2129                        ;	k_ide_isbusy();
  2130                        	.line	563
  2131 06:927A: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2132                        ;	k_ide_isready();
  2133                        	.line	564
  2134 06:927E: 22 90 90 06  	jsl	~~k_ide_isready
  2135                        ;
  2136                        ;	//k_delay(10);
  2137                        ;	ide_select_drive(ATA_PRIMARY, ATA_MASTER);
  2138                        	.line	567
  2139 06:9282: F4 00 00     	pea	#<$0
  2140 06:9285: F4 00 00     	pea	#<$0
  2141 06:9288: 22 AA 91 06  	jsl	~~ide_select_drive
  2142                        ;
  2143                        ;	//k_debug_hex("k_ide_init:",sts);
  2144                        ;	//k_ide_isbusy();
  2145                        ;
  2146                        ;	IDE_CLDR_HI[0]  = 0;
  2147                        	.line	572
  2148 06:928C: E2 20        	sep	#$20
  2149                        	longa	off
  2150 06:928E: A9 00        	lda	#$0
  2151 06:9290: 8F 35 E8 AF  	sta	>11528245
  2152 06:9294: C2 20        	rep	#$20
  2153                        	longa	on
  2154                        ;	IDE_CLDR_LO[0]  = 0;
  2155                        	.line	573
  2156 06:9296: E2 20        	sep	#$20
  2157                        	longa	off
  2158 06:9298: A9 00        	lda	#$0
  2159 06:929A: 8F 34 E8 AF  	sta	>11528244
  2160 06:929E: C2 20        	rep	#$20
  2161                        	longa	on
  2162                        ;	IDE_SECT_CNT[0] = 0;
  2163                        	.line	574
  2164 06:92A0: E2 20        	sep	#$20
  2165                        	longa	off
  2166 06:92A2: A9 00        	lda	#$0
  2167 06:92A4: 8F 32 E8 AF  	sta	>11528242
  2168 06:92A8: C2 20        	rep	#$20
  2169                        	longa	on
  2170                        ;	IDE_SECT_SRT[0] = 0x01;
  2171                        	.line	575
  2172 06:92AA: E2 20        	sep	#$20
  2173                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 44


  2174 06:92AC: A9 01        	lda	#$1
  2175 06:92AE: 8F 33 E8 AF  	sta	>11528243
  2176 06:92B2: C2 20        	rep	#$20
  2177                        	longa	on
  2178                        ;	IDE_HEAD[0]     = 0xA0;
  2179                        	.line	576
  2180 06:92B4: E2 20        	sep	#$20
  2181                        	longa	off
  2182 06:92B6: A9 A0        	lda	#$a0
  2183 06:92B8: 8F 36 E8 AF  	sta	>11528246
  2184 06:92BC: C2 20        	rep	#$20
  2185                        	longa	on
  2186                        ;
  2187                        ;	//IDE_CMD_STAT[0] = 0x91;
  2188                        ;
  2189                        ;	//sts = IDE_CMD_STAT[0];
  2190                        ;	//k_debug_hex("k_ide_init:",sts);
  2191                        ;
  2192                        ;	//k_ide_isbusy();
  2193                        ;	//k_ide_isready();
  2194                        ;	//k_ide_drive_ready_notbusy();
  2195                        ;
  2196                        ;	return;
  2197                        	.line	587
  2198                        L45:
  2199 06:92BE: 2B           	pld
  2200 06:92BF: 3B           	tsc
  2201 06:92C0: 18           	clc
  2202 06:92C1: 69 01 00     	adc	#L42
  2203 06:92C4: 1B           	tcs
  2204 06:92C5: 6B           	rtl
  2205                        ;}
  2206                        	.line	588
  2207                        	.endblock	588
  2208             00000001   L42	equ	1
  2209             00000001   L43	equ	1
  2210 06:92C6:              	ends
  2211                        	efunc
  2212                        	.endfunc	588,1,1
  2213                        	.line	588
  2214                        	data
  2215                        L41:
  2216 00:00EE: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$6E,$69,$74,
                    $3A,$00,$6B,$5F,$69
       00:00F2: 65 5F 69 6E 
       00:00F6: 69 74 3A 00 
       00:00FA: 6B 5F 69 
  2217 00:00FD: 64 65 5F 69  	db	$64,$65,$5F,$69,$6E,$69,$74,$3A,$73,$6F,
                    $66,$74,$72,$65,$73
       00:0101: 6E 69 74 3A 
       00:0105: 73 6F 66 74 
       00:0109: 72 65 73 
  2218 00:010C: 65 74 3A 00  	db	$65,$74,$3A,$00
  2219 00:0110:              	ends
  2220                        ;
  2221                        ;
  2222                        ;LPCHAR k_ide_get_info(void)
  2223                        ;{
  Sat Jul 10 2021  1:15                                                Page 45


  2224                        	.line	591
  2225                        	.line	592
  2226                        	FXHDD
  2227                        	xdef	~~k_ide_get_info
  2228                        	func
  2229                        	.function	592
  2230                        ~~k_ide_get_info:
  2231                        	longa	on
  2232                        	longi	on
  2233 06:92C6: 3B           	tsc
  2234 06:92C7: 38           	sec
  2235 06:92C8: E9 2B 00     	sbc	#L47
  2236 06:92CB: 1B           	tcs
  2237 06:92CC: 0B           	phd
  2238 06:92CD: 5B           	tcd
  2239                        	.block	592
  2240                        ;	UINT index = 0;
  2241                        ;	UINT data = 0;
  2242                        ;
  2243                        ;	LPCHAR pdata = (LPCHAR)k_mem_allocate_heap(516);
  2244                        ;	UINT *ideInfo = (UINT*)(&pdata[0]);
  2245                        ;
  2246                        ;	UCHAR sts = 0x00;
  2247                        ;	UCHAR lo = 0;
  2248                        ;	UCHAR hi = 0;
  2249                        ;
  2250                        ;	k_debug_bits("k_ide_get_info:bits:",0);
  2251             00000000   index_1	set	0
  2252             00000002   data_1	set	2
  2253             00000004   pdata_1	set	4
  2254             00000008   ideInfo_1	set	8
  2255             0000000C   sts_1	set	12
  2256             0000000D   lo_1	set	13
  2257             0000000E   hi_1	set	14
  2258                        	.sym	index,0,16,1,16
  2259                        	.sym	data,2,16,1,16
  2260                        	.sym	pdata,4,142,1,32
  2261                        	.sym	ideInfo,8,144,1,32
  2262                        	.sym	sts,12,14,1,8
  2263                        	.sym	lo,13,14,1,8
  2264                        	.sym	hi,14,14,1,8
  2265 06:92CE: 64 1D        	stz	<L48+index_1
  2266 06:92D0: 64 1F        	stz	<L48+data_1
  2267 06:92D2: F4 04 02     	pea	#<$204
  2268 06:92D5: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2269 06:92D9: 85 21        	sta	<L48+pdata_1
  2270 06:92DB: 86 23        	stx	<L48+pdata_1+2
  2271 06:92DD: A5 21        	lda	<L48+pdata_1
  2272 06:92DF: 85 25        	sta	<L48+ideInfo_1
  2273 06:92E1: A5 23        	lda	<L48+pdata_1+2
  2274 06:92E3: 85 27        	sta	<L48+ideInfo_1+2
  2275 06:92E5: E2 20        	sep	#$20
  2276                        	longa	off
  2277 06:92E7: 64 29        	stz	<L48+sts_1
  2278 06:92E9: C2 20        	rep	#$20
  2279                        	longa	on
  2280 06:92EB: E2 20        	sep	#$20
  2281                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 46


  2282 06:92ED: 64 2A        	stz	<L48+lo_1
  2283 06:92EF: C2 20        	rep	#$20
  2284                        	longa	on
  2285 06:92F1: E2 20        	sep	#$20
  2286                        	longa	off
  2287 06:92F3: 64 2B        	stz	<L48+hi_1
  2288 06:92F5: C2 20        	rep	#$20
  2289                        	longa	on
  2290                        	.line	603
  2291 06:92F7: F4 00 00     	pea	#<$0
  2292 06:92FA: F4 xx xx     	pea	#^L46
  2293 06:92FD: F4 xx xx     	pea	#<L46
  2294 06:9300: 22 xx xx xx  	jsl	~~k_debug_bits
  2295                        ;
  2296                        ;	FX_ATA_REG_COMMAND[0] = 0;
  2297                        	.line	605
  2298 06:9304: E2 20        	sep	#$20
  2299                        	longa	off
  2300 06:9306: A9 00        	lda	#$0
  2301 06:9308: 8F 37 E8 AF  	sta	>11528247
  2302 06:930C: C2 20        	rep	#$20
  2303                        	longa	on
  2304                        ;
  2305                        ;	k_ide_isbusy();
  2306                        	.line	607
  2307 06:930E: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2308                        ;	k_ide_isready();
  2309                        	.line	608
  2310 06:9312: 22 90 90 06  	jsl	~~k_ide_isready
  2311                        ;
  2312                        ;	FX_ATA_REG_FEATURES[0] = 0;
  2313                        	.line	610
  2314 06:9316: E2 20        	sep	#$20
  2315                        	longa	off
  2316 06:9318: A9 00        	lda	#$0
  2317 06:931A: 8F 31 E8 AF  	sta	>11528241
  2318 06:931E: C2 20        	rep	#$20
  2319                        	longa	on
  2320                        ;	IDE_CLDR_HI[0]  = 0;
  2321                        	.line	611
  2322 06:9320: E2 20        	sep	#$20
  2323                        	longa	off
  2324 06:9322: A9 00        	lda	#$0
  2325 06:9324: 8F 35 E8 AF  	sta	>11528245
  2326 06:9328: C2 20        	rep	#$20
  2327                        	longa	on
  2328                        ;	IDE_CLDR_LO[0]  = 0;
  2329                        	.line	612
  2330 06:932A: E2 20        	sep	#$20
  2331                        	longa	off
  2332 06:932C: A9 00        	lda	#$0
  2333 06:932E: 8F 34 E8 AF  	sta	>11528244
  2334 06:9332: C2 20        	rep	#$20
  2335                        	longa	on
  2336                        ;	IDE_SECT_CNT[0] = 0;
  2337                        	.line	613
  2338 06:9334: E2 20        	sep	#$20
  2339                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 47


  2340 06:9336: A9 00        	lda	#$0
  2341 06:9338: 8F 32 E8 AF  	sta	>11528242
  2342 06:933C: C2 20        	rep	#$20
  2343                        	longa	on
  2344                        ;	IDE_SECT_SRT[0] = 0;
  2345                        	.line	614
  2346 06:933E: E2 20        	sep	#$20
  2347                        	longa	off
  2348 06:9340: A9 00        	lda	#$0
  2349 06:9342: 8F 33 E8 AF  	sta	>11528243
  2350 06:9346: C2 20        	rep	#$20
  2351                        	longa	on
  2352                        ;	IDE_HEAD[0]     = 0xA0;
  2353                        	.line	615
  2354 06:9348: E2 20        	sep	#$20
  2355                        	longa	off
  2356 06:934A: A9 A0        	lda	#$a0
  2357 06:934C: 8F 36 E8 AF  	sta	>11528246
  2358 06:9350: C2 20        	rep	#$20
  2359                        	longa	on
  2360                        ;
  2361                        ;	FX_ATA_REG_COMMAND[0] = ATA_CMD_IDENTIFY;
  2362                        	.line	617
  2363 06:9352: E2 20        	sep	#$20
  2364                        	longa	off
  2365 06:9354: A9 EC        	lda	#$ec
  2366 06:9356: 8F 37 E8 AF  	sta	>11528247
  2367 06:935A: C2 20        	rep	#$20
  2368                        	longa	on
  2369                        ;
  2370                        ;	k_ide_isbusy();
  2371                        	.line	619
  2372 06:935C: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2373                        ;
  2374                        ;
  2375                        ;	k_ide_isready();
  2376                        	.line	622
  2377 06:9360: 22 90 90 06  	jsl	~~k_ide_isready
  2378                        ;
  2379                        ;
  2380                        ;	if(FX_ATA_REG_STATUS[0] & ATA_SR_DRQ)
  2381                        	.line	625
  2382                        ;	{
  2383 06:9364: E2 20        	sep	#$20
  2384                        	longa	off
  2385 06:9366: AF 37 E8 AF  	lda	>11528247
  2386 06:936A: 29 08        	and	#<$8
  2387 06:936C: C2 20        	rep	#$20
  2388                        	longa	on
  2389 06:936E: D0 03        	bne	L50
  2390 06:9370: 82 E8 00     	brl	L10017
  2391                        L50:
  2392                        	.line	626
  2393                        ;		k_debug_bits("k_ide_get_info:bits:",FX_A
                    TA_REG_STATUS[0]);
  2394                        	.line	627
  2395 06:9373: AF 37 E8 AF  	lda	>11528247
  2396 06:9377: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 48


  2397 06:9378: F4 xx xx     	pea	#^L46+21
  2398 06:937B: F4 xx xx     	pea	#<L46+21
  2399 06:937E: 22 xx xx xx  	jsl	~~k_debug_bits
  2400                        ;
  2401                        ;		for(index = 0;index < 256;index++)
  2402                        	.line	629
  2403 06:9382: 64 1D        	stz	<L48+index_1
  2404                        L10020:
  2405                        ;		{
  2406                        	.line	630
  2407                        ;			ideInfo[index] = *((UINT*)&IDE_D
                    ATA_LO[0]);
  2408                        	.line	631
  2409 06:9384: A5 1D        	lda	<L48+index_1
  2410 06:9386: 85 05        	sta	<R1
  2411 06:9388: 64 07        	stz	<R1+2
  2412 06:938A: D4 07        	pei	<R1+2
  2413 06:938C: D4 05        	pei	<R1
  2414 06:938E: A9 01 00     	lda	#$1
  2415                        	xref	~~~lasl
  2416 06:9391: 22 xx xx xx  	jsl	~~~lasl
  2417 06:9395: 85 01        	sta	<R0
  2418 06:9397: 86 03        	stx	<R0+2
  2419 06:9399: 18           	clc
  2420 06:939A: A5 25        	lda	<L48+ideInfo_1
  2421 06:939C: 65 01        	adc	<R0
  2422 06:939E: 85 09        	sta	<R2
  2423 06:93A0: A5 27        	lda	<L48+ideInfo_1+2
  2424 06:93A2: 65 03        	adc	<R0+2
  2425 06:93A4: 85 0B        	sta	<R2+2
  2426 06:93A6: AF 38 E8 AF  	lda	>11528248
  2427 06:93AA: 87 09        	sta	[<R2]
  2428                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2429                        	.line	632
  2430 06:93AC: A5 1D        	lda	<L48+index_1
  2431 06:93AE: 85 05        	sta	<R1
  2432 06:93B0: 64 07        	stz	<R1+2
  2433 06:93B2: D4 07        	pei	<R1+2
  2434 06:93B4: D4 05        	pei	<R1
  2435 06:93B6: A9 01 00     	lda	#$1
  2436                        	xref	~~~lasl
  2437 06:93B9: 22 xx xx xx  	jsl	~~~lasl
  2438 06:93BD: 85 01        	sta	<R0
  2439 06:93BF: 86 03        	stx	<R0+2
  2440 06:93C1: 18           	clc
  2441 06:93C2: A5 25        	lda	<L48+ideInfo_1
  2442 06:93C4: 65 01        	adc	<R0
  2443 06:93C6: 85 09        	sta	<R2
  2444 06:93C8: A5 27        	lda	<L48+ideInfo_1+2
  2445 06:93CA: 65 03        	adc	<R0+2
  2446 06:93CC: 85 0B        	sta	<R2+2
  2447 06:93CE: A5 1D        	lda	<L48+index_1
  2448 06:93D0: 85 0D        	sta	<R3
  2449 06:93D2: 64 0F        	stz	<R3+2
  2450 06:93D4: D4 0F        	pei	<R3+2
  2451 06:93D6: D4 0D        	pei	<R3
  2452 06:93D8: A9 01 00     	lda	#$1
  Sat Jul 10 2021  1:15                                                Page 49


  2453                        	xref	~~~lasl
  2454 06:93DB: 22 xx xx xx  	jsl	~~~lasl
  2455 06:93DF: 85 01        	sta	<R0
  2456 06:93E1: 86 03        	stx	<R0+2
  2457 06:93E3: 18           	clc
  2458 06:93E4: A5 25        	lda	<L48+ideInfo_1
  2459 06:93E6: 65 01        	adc	<R0
  2460 06:93E8: 85 11        	sta	<17
  2461 06:93EA: A5 27        	lda	<L48+ideInfo_1+2
  2462 06:93EC: 65 03        	adc	<R0+2
  2463 06:93EE: 85 13        	sta	<17+2
  2464 06:93F0: A7 11        	lda	[<17]
  2465 06:93F2: EB           	xba
  2466 06:93F3: 29 00 FF     	and	#$ff00
  2467 06:93F6: 29 00 FF     	and	#<$ff00
  2468 06:93F9: 85 01        	sta	<R0
  2469 06:93FB: A5 1D        	lda	<L48+index_1
  2470 06:93FD: 85 15        	sta	<21
  2471 06:93FF: 64 17        	stz	<21+2
  2472 06:9401: D4 17        	pei	<21+2
  2473 06:9403: D4 15        	pei	<21
  2474 06:9405: A9 01 00     	lda	#$1
  2475                        	xref	~~~lasl
  2476 06:9408: 22 xx xx xx  	jsl	~~~lasl
  2477 06:940C: 85 11        	sta	<17
  2478 06:940E: 86 13        	stx	<17+2
  2479 06:9410: 18           	clc
  2480 06:9411: A5 25        	lda	<L48+ideInfo_1
  2481 06:9413: 65 11        	adc	<17
  2482 06:9415: 85 19        	sta	<25
  2483 06:9417: A5 27        	lda	<L48+ideInfo_1+2
  2484 06:9419: 65 13        	adc	<17+2
  2485 06:941B: 85 1B        	sta	<25+2
  2486 06:941D: A7 19        	lda	[<25]
  2487 06:941F: EB           	xba
  2488 06:9420: 29 FF 00     	and	#$00ff
  2489 06:9423: 29 FF 00     	and	#<$ff
  2490 06:9426: 85 11        	sta	<17
  2491 06:9428: A5 11        	lda	<17
  2492 06:942A: 05 01        	ora	<R0
  2493 06:942C: 87 09        	sta	[<R2]
  2494                        ;			//k_debug_bits("k_ide_get_info:b
                    its:",FX_ATA_REG_STATUS[0]);
  2495                        ;			//if(!(FX_ATA_REG_STATUS[0] & AT
                    A_SR_DRQ))
  2496                        ;			//	k_ide_isdrq();
  2497                        ;		}
  2498                        	.line	636
  2499                        L10018:
  2500 06:942E: E6 1D        	inc	<L48+index_1
  2501 06:9430: A5 1D        	lda	<L48+index_1
  2502 06:9432: C9 00 01     	cmp	#<$100
  2503 06:9435: B0 03        	bcs	L51
  2504 06:9437: 82 4A FF     	brl	L10020
  2505                        L51:
  2506                        L10019:
  2507                        ;
  2508                        ;		FX_ATA_REG_HDDEVCTL[0] = 0x06;
  Sat Jul 10 2021  1:15                                                Page 50


  2509                        	.line	638
  2510 06:943A: E2 20        	sep	#$20
  2511                        	longa	off
  2512 06:943C: A9 06        	lda	#$6
  2513 06:943E: 8F 36 E8 AF  	sta	>11528246
  2514 06:9442: C2 20        	rep	#$20
  2515                        	longa	on
  2516                        ;
  2517                        ;
  2518                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",(LPCHAR)pdata,512);
  2519                        	.line	641
  2520 06:9444: F4 00 00     	pea	#^$200
  2521 06:9447: F4 00 02     	pea	#<$200
  2522 06:944A: D4 23        	pei	<L48+pdata_1+2
  2523 06:944C: D4 21        	pei	<L48+pdata_1
  2524 06:944E: F4 xx xx     	pea	#^L46+42
  2525 06:9451: F4 xx xx     	pea	#<L46+42
  2526 06:9454: 22 xx xx xx  	jsl	~~k_debug_byte_array
  2527                        ;	}
  2528                        	.line	642
  2529                        ;	else
  2530 06:9458: 82 04 00     	brl	L10021
  2531                        L10017:
  2532                        ;	{
  2533                        	.line	644
  2534                        ;		pdata = NULL;
  2535                        	.line	645
  2536 06:945B: 64 21        	stz	<L48+pdata_1
  2537 06:945D: 64 23        	stz	<L48+pdata_1+2
  2538                        ;	}
  2539                        	.line	646
  2540                        L10021:
  2541                        ;	return (LPCHAR)pdata;
  2542                        	.line	647
  2543 06:945F: A6 23        	ldx	<L48+pdata_1+2
  2544 06:9461: A5 21        	lda	<L48+pdata_1
  2545                        L52:
  2546 06:9463: A8           	tay
  2547 06:9464: 2B           	pld
  2548 06:9465: 3B           	tsc
  2549 06:9466: 18           	clc
  2550 06:9467: 69 2B 00     	adc	#L47
  2551 06:946A: 1B           	tcs
  2552 06:946B: 98           	tya
  2553 06:946C: 6B           	rtl
  2554                        ;}
  2555                        	.line	648
  2556                        	.endblock	648
  2557             0000002B   L47	equ	43
  2558             0000001D   L48	equ	29
  2559 06:946D:              	ends
  2560                        	efunc
  2561                        	.endfunc	648,29,43
  2562                        	.line	648
  2563                        	data
  2564                        L46:
  2565 00:0110: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$67,$65,$74,$5F,
  Sat Jul 10 2021  1:15                                                Page 51


                    $69,$6E,$66,$6F,$3A
       00:0114: 65 5F 67 65 
       00:0118: 74 5F 69 6E 
       00:011C: 66 6F 3A 
  2566 00:011F: 62 69 74 73  	db	$62,$69,$74,$73,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$67,$65,$74
       00:0123: 3A 00 6B 5F 
       00:0127: 69 64 65 5F 
       00:012B: 67 65 74 
  2567 00:012E: 5F 69 6E 66  	db	$5F,$69,$6E,$66,$6F,$3A,$62,$69,$74,$73,
                    $3A,$00,$6B,$5F,$69
       00:0132: 6F 3A 62 69 
       00:0136: 74 73 3A 00 
       00:013A: 6B 5F 69 
  2568 00:013D: 64 65 5F 67  	db	$64,$65,$5F,$67,$65,$74,$5F,$69,$6E,$66,
                    $6F,$3A,$44,$41,$54
       00:0141: 65 74 5F 69 
       00:0145: 6E 66 6F 3A 
       00:0149: 44 41 54 
  2569 00:014C: 41 3A 0D 0A  	db	$41,$3A,$0D,$0A,$00
       00:0150: 00 
  2570 00:0151:              	ends
  2571                        ;
  2572                        ;LPCHAR k_ide_get_info_old(void)
  2573                        ;{
  2574                        	.line	650
  2575                        	.line	651
  2576                        	FXHDD
  2577                        	xdef	~~k_ide_get_info_old
  2578                        	func
  2579                        	.function	651
  2580                        ~~k_ide_get_info_old:
  2581                        	longa	on
  2582                        	longi	on
  2583 06:946D: 3B           	tsc
  2584 06:946E: 38           	sec
  2585 06:946F: E9 2B 00     	sbc	#L54
  2586 06:9472: 1B           	tcs
  2587 06:9473: 0B           	phd
  2588 06:9474: 5B           	tcd
  2589                        	.block	651
  2590                        ;	UINT index = 0;
  2591                        ;	UINT data = 0;
  2592                        ;	//LPCHAR ideInfo = k_mem_allocate_heap(512);
  2593                        ;
  2594                        ;	//UINT *ideInfo = (UINT*)k_mem_allocate_heap(512
                    );
  2595                        ;
  2596                        ;	LPCHAR pdata = (LPCHAR)k_mem_allocate_heap(516);
  2597                        ;	UINT *ideInfo = (UINT*)(&pdata[0]);
  2598                        ;
  2599                        ;	UCHAR sts = 0x00;
  2600                        ;	UCHAR lo = 0;
  2601                        ;	UCHAR hi = 0;
  2602                        ;
  2603                        ;	k_debug_bits("k_ide_get_info:bits:",0);
  2604             00000000   index_1	set	0
  2605             00000002   data_1	set	2
  Sat Jul 10 2021  1:15                                                Page 52


  2606             00000004   pdata_1	set	4
  2607             00000008   ideInfo_1	set	8
  2608             0000000C   sts_1	set	12
  2609             0000000D   lo_1	set	13
  2610             0000000E   hi_1	set	14
  2611                        	.sym	index,0,16,1,16
  2612                        	.sym	data,2,16,1,16
  2613                        	.sym	pdata,4,142,1,32
  2614                        	.sym	ideInfo,8,144,1,32
  2615                        	.sym	sts,12,14,1,8
  2616                        	.sym	lo,13,14,1,8
  2617                        	.sym	hi,14,14,1,8
  2618 06:9475: 64 1D        	stz	<L55+index_1
  2619 06:9477: 64 1F        	stz	<L55+data_1
  2620 06:9479: F4 04 02     	pea	#<$204
  2621 06:947C: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2622 06:9480: 85 21        	sta	<L55+pdata_1
  2623 06:9482: 86 23        	stx	<L55+pdata_1+2
  2624 06:9484: A5 21        	lda	<L55+pdata_1
  2625 06:9486: 85 25        	sta	<L55+ideInfo_1
  2626 06:9488: A5 23        	lda	<L55+pdata_1+2
  2627 06:948A: 85 27        	sta	<L55+ideInfo_1+2
  2628 06:948C: E2 20        	sep	#$20
  2629                        	longa	off
  2630 06:948E: 64 29        	stz	<L55+sts_1
  2631 06:9490: C2 20        	rep	#$20
  2632                        	longa	on
  2633 06:9492: E2 20        	sep	#$20
  2634                        	longa	off
  2635 06:9494: 64 2A        	stz	<L55+lo_1
  2636 06:9496: C2 20        	rep	#$20
  2637                        	longa	on
  2638 06:9498: E2 20        	sep	#$20
  2639                        	longa	off
  2640 06:949A: 64 2B        	stz	<L55+hi_1
  2641 06:949C: C2 20        	rep	#$20
  2642                        	longa	on
  2643                        	.line	665
  2644 06:949E: F4 00 00     	pea	#<$0
  2645 06:94A1: F4 xx xx     	pea	#^L53
  2646 06:94A4: F4 xx xx     	pea	#<L53
  2647 06:94A7: 22 xx xx xx  	jsl	~~k_debug_bits
  2648                        ;
  2649                        ;	k_ide_isbusy();
  2650                        	.line	667
  2651 06:94AB: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2652                        ;	k_ide_isready();
  2653                        	.line	668
  2654 06:94AF: 22 90 90 06  	jsl	~~k_ide_isready
  2655                        ;
  2656                        ;	//ide_select_drive(ATA_PRIMARY, ATA_MASTER);
  2657                        ;
  2658                        ;	FX_ATA_REG_FEATURES[0] = 0;
  2659                        	.line	672
  2660 06:94B3: E2 20        	sep	#$20
  2661                        	longa	off
  2662 06:94B5: A9 00        	lda	#$0
  2663 06:94B7: 8F 31 E8 AF  	sta	>11528241
  Sat Jul 10 2021  1:15                                                Page 53


  2664 06:94BB: C2 20        	rep	#$20
  2665                        	longa	on
  2666                        ;	IDE_CLDR_HI[0]  = 0;
  2667                        	.line	673
  2668 06:94BD: E2 20        	sep	#$20
  2669                        	longa	off
  2670 06:94BF: A9 00        	lda	#$0
  2671 06:94C1: 8F 35 E8 AF  	sta	>11528245
  2672 06:94C5: C2 20        	rep	#$20
  2673                        	longa	on
  2674                        ;	IDE_CLDR_LO[0]  = 0;
  2675                        	.line	674
  2676 06:94C7: E2 20        	sep	#$20
  2677                        	longa	off
  2678 06:94C9: A9 00        	lda	#$0
  2679 06:94CB: 8F 34 E8 AF  	sta	>11528244
  2680 06:94CF: C2 20        	rep	#$20
  2681                        	longa	on
  2682                        ;	IDE_SECT_CNT[0] = 0;
  2683                        	.line	675
  2684 06:94D1: E2 20        	sep	#$20
  2685                        	longa	off
  2686 06:94D3: A9 00        	lda	#$0
  2687 06:94D5: 8F 32 E8 AF  	sta	>11528242
  2688 06:94D9: C2 20        	rep	#$20
  2689                        	longa	on
  2690                        ;	IDE_SECT_SRT[0] = 0;
  2691                        	.line	676
  2692 06:94DB: E2 20        	sep	#$20
  2693                        	longa	off
  2694 06:94DD: A9 00        	lda	#$0
  2695 06:94DF: 8F 33 E8 AF  	sta	>11528243
  2696 06:94E3: C2 20        	rep	#$20
  2697                        	longa	on
  2698                        ;	IDE_HEAD[0]     = 0xA0;
  2699                        	.line	677
  2700 06:94E5: E2 20        	sep	#$20
  2701                        	longa	off
  2702 06:94E7: A9 A0        	lda	#$a0
  2703 06:94E9: 8F 36 E8 AF  	sta	>11528246
  2704 06:94ED: C2 20        	rep	#$20
  2705                        	longa	on
  2706                        ;
  2707                        ;	FX_ATA_REG_COMMAND[0] = ATA_CMD_IDENTIFY;
  2708                        	.line	679
  2709 06:94EF: E2 20        	sep	#$20
  2710                        	longa	off
  2711 06:94F1: A9 EC        	lda	#$ec
  2712 06:94F3: 8F 37 E8 AF  	sta	>11528247
  2713 06:94F7: C2 20        	rep	#$20
  2714                        	longa	on
  2715                        ;
  2716                        ;	//k_ide_wait();
  2717                        ;	k_ide_isbusy();
  2718                        	.line	682
  2719 06:94F9: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  2720                        ;
  2721                        ;	//k_ide_wait();
  Sat Jul 10 2021  1:15                                                Page 54


  2722                        ;
  2723                        ;	//sts = IDE_CMD_STAT[0];
  2724                        ;	//k_debug_hex("k_ide_get_info:sts:initial:",sts)
                    ;
  2725                        ;
  2726                        ;	//k_debug_bits("k_ide_get_info:bits:",sts);
  2727                        ;
  2728                        ;	//k_ide_isbusy();
  2729                        ;	k_ide_isready();
  2730                        	.line	692
  2731 06:94FD: 22 90 90 06  	jsl	~~k_ide_isready
  2732                        ;	//k_ide_isdrq();
  2733                        ;
  2734                        ;	//k_debug_hex("k_ide_get_info:IDE_DATA:",IDE_DAT
                    A[0]);
  2735                        ;	/*
  2736                        ;	k_ide_read_sector(ide_sector);
  2737                        ;	if(ide_sector)
  2738                        ;	{
  2739                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    ",ide_sector,512);
  2740                        ;	}
  2741                        ;	*/
  2742                        ;
  2743                        ;	/*
  2744                        ;	if(sts & FX_ATA_REG_ALTSTATUS[0])
  2745                        ;	{
  2746                        ;		for(index = 0;index < 512;index+=2)
  2747                        ;		{
  2748                        ;			lo = IDE_DATA_LO[0];
  2749                        ;			hi = IDE_DATA_HI[0];
  2750                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2751                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2752                        ;			ideInfo[index] =   lo;
  2753                        ;			ideInfo[index+1] = hi;
  2754                        ;		}
  2755                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",ideInfo,512);
  2756                        ;	}
  2757                        ;	else
  2758                        ;	{
  2759                        ;		ideInfo = NULL;
  2760                        ;	}
  2761                        ;	*/
  2762                        ;
  2763                        ;
  2764                        ;	if(FX_ATA_REG_STATUS[0] & ATA_SR_DRQ)
  2765                        	.line	725
  2766                        ;	{
  2767 06:9501: E2 20        	sep	#$20
  2768                        	longa	off
  2769 06:9503: AF 37 E8 AF  	lda	>11528247
  2770 06:9507: 29 08        	and	#<$8
  2771 06:9509: C2 20        	rep	#$20
  2772                        	longa	on
  2773 06:950B: D0 03        	bne	L57
  Sat Jul 10 2021  1:15                                                Page 55


  2774 06:950D: 82 EC 00     	brl	L10022
  2775                        L57:
  2776                        	.line	726
  2777                        ;		k_debug_bits("k_ide_get_info:bits:",FX_A
                    TA_REG_STATUS[0]);
  2778                        	.line	727
  2779 06:9510: AF 37 E8 AF  	lda	>11528247
  2780 06:9514: 48           	pha
  2781 06:9515: F4 xx xx     	pea	#^L53+21
  2782 06:9518: F4 xx xx     	pea	#<L53+21
  2783 06:951B: 22 xx xx xx  	jsl	~~k_debug_bits
  2784                        ;
  2785                        ;		//lo = IDE_DATA_LO[0];
  2786                        ;		//hi = IDE_DATA_HI[0];
  2787                        ;
  2788                        ;		/*
  2789                        ;		lo = IDE_DATA[0];
  2790                        ;		hi = IDE_DATA[0];
  2791                        ;		k_debug_hex("LO:",lo);
  2792                        ;		k_debug_hex("HI:",hi);
  2793                        ;
  2794                        ;
  2795                        ;		pdata[0] = lo;//MAKEWORD(lo,hi);
  2796                        ;		pdata[1] = hi;//MAKEWORD(lo,hi);
  2797                        ;		*/
  2798                        ;		/*
  2799                        ;		lo = IDE_DATA[0];
  2800                        ;		hi = IDE_DATA[0];
  2801                        ;
  2802                        ;		k_debug_hex("LO:",lo);
  2803                        ;		k_debug_hex("HI:",hi);
  2804                        ;		*/
  2805                        ;
  2806                        ;		/*
  2807                        ;		for(index = 0;index < 256;index++)
  2808                        ;		{
  2809                        ;			//lo = IDE_DATA_LO[0];
  2810                        ;			//hi = IDE_DATA_HI[0];
  2811                        ;
  2812                        ;			ideInfo[index] = *((UINT*)&IDE_D
                    ATA_LO[0]);
  2813                        ;
  2814                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2815                        ;
  2816                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2817                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2818                        ;			//ideInfo[index] =   lo;
  2819                        ;			//ideInfo[index+1] = hi;
  2820                        ;		}
  2821                        ;		*/
  2822                        ;
  2823                        ;		/*
  2824                        ;		for(index = 0;index < 512;index+=2)
  2825                        ;		{
  2826                        ;			pdata[index]   = IDE_DATA_HI[0];
  Sat Jul 10 2021  1:15                                                Page 56


  2827                        ;			pdata[index+1] = IDE_DATA_LO[0];
  2828                        ;			k_debug_bits("k_ide_get_info:bit
                    s:",FX_ATA_REG_STATUS[0]);
  2829                        ;		}
  2830                        ;		*/
  2831                        ;		for(index = 0;index < 256;index++)
  2832                        	.line	775
  2833 06:951F: 64 1D        	stz	<L55+index_1
  2834                        L10025:
  2835                        ;		{
  2836                        	.line	776
  2837                        ;			ideInfo[index] = *((UINT*)&IDE_D
                    ATA_LO[0]);
  2838                        	.line	777
  2839 06:9521: A5 1D        	lda	<L55+index_1
  2840 06:9523: 85 05        	sta	<R1
  2841 06:9525: 64 07        	stz	<R1+2
  2842 06:9527: D4 07        	pei	<R1+2
  2843 06:9529: D4 05        	pei	<R1
  2844 06:952B: A9 01 00     	lda	#$1
  2845                        	xref	~~~lasl
  2846 06:952E: 22 xx xx xx  	jsl	~~~lasl
  2847 06:9532: 85 01        	sta	<R0
  2848 06:9534: 86 03        	stx	<R0+2
  2849 06:9536: 18           	clc
  2850 06:9537: A5 25        	lda	<L55+ideInfo_1
  2851 06:9539: 65 01        	adc	<R0
  2852 06:953B: 85 09        	sta	<R2
  2853 06:953D: A5 27        	lda	<L55+ideInfo_1+2
  2854 06:953F: 65 03        	adc	<R0+2
  2855 06:9541: 85 0B        	sta	<R2+2
  2856 06:9543: AF 38 E8 AF  	lda	>11528248
  2857 06:9547: 87 09        	sta	[<R2]
  2858                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2859                        	.line	778
  2860 06:9549: A5 1D        	lda	<L55+index_1
  2861 06:954B: 85 05        	sta	<R1
  2862 06:954D: 64 07        	stz	<R1+2
  2863 06:954F: D4 07        	pei	<R1+2
  2864 06:9551: D4 05        	pei	<R1
  2865 06:9553: A9 01 00     	lda	#$1
  2866                        	xref	~~~lasl
  2867 06:9556: 22 xx xx xx  	jsl	~~~lasl
  2868 06:955A: 85 01        	sta	<R0
  2869 06:955C: 86 03        	stx	<R0+2
  2870 06:955E: 18           	clc
  2871 06:955F: A5 25        	lda	<L55+ideInfo_1
  2872 06:9561: 65 01        	adc	<R0
  2873 06:9563: 85 09        	sta	<R2
  2874 06:9565: A5 27        	lda	<L55+ideInfo_1+2
  2875 06:9567: 65 03        	adc	<R0+2
  2876 06:9569: 85 0B        	sta	<R2+2
  2877 06:956B: A5 1D        	lda	<L55+index_1
  2878 06:956D: 85 0D        	sta	<R3
  2879 06:956F: 64 0F        	stz	<R3+2
  2880 06:9571: D4 0F        	pei	<R3+2
  2881 06:9573: D4 0D        	pei	<R3
  Sat Jul 10 2021  1:15                                                Page 57


  2882 06:9575: A9 01 00     	lda	#$1
  2883                        	xref	~~~lasl
  2884 06:9578: 22 xx xx xx  	jsl	~~~lasl
  2885 06:957C: 85 01        	sta	<R0
  2886 06:957E: 86 03        	stx	<R0+2
  2887 06:9580: 18           	clc
  2888 06:9581: A5 25        	lda	<L55+ideInfo_1
  2889 06:9583: 65 01        	adc	<R0
  2890 06:9585: 85 11        	sta	<17
  2891 06:9587: A5 27        	lda	<L55+ideInfo_1+2
  2892 06:9589: 65 03        	adc	<R0+2
  2893 06:958B: 85 13        	sta	<17+2
  2894 06:958D: A7 11        	lda	[<17]
  2895 06:958F: EB           	xba
  2896 06:9590: 29 00 FF     	and	#$ff00
  2897 06:9593: 29 00 FF     	and	#<$ff00
  2898 06:9596: 85 01        	sta	<R0
  2899 06:9598: A5 1D        	lda	<L55+index_1
  2900 06:959A: 85 15        	sta	<21
  2901 06:959C: 64 17        	stz	<21+2
  2902 06:959E: D4 17        	pei	<21+2
  2903 06:95A0: D4 15        	pei	<21
  2904 06:95A2: A9 01 00     	lda	#$1
  2905                        	xref	~~~lasl
  2906 06:95A5: 22 xx xx xx  	jsl	~~~lasl
  2907 06:95A9: 85 11        	sta	<17
  2908 06:95AB: 86 13        	stx	<17+2
  2909 06:95AD: 18           	clc
  2910 06:95AE: A5 25        	lda	<L55+ideInfo_1
  2911 06:95B0: 65 11        	adc	<17
  2912 06:95B2: 85 19        	sta	<25
  2913 06:95B4: A5 27        	lda	<L55+ideInfo_1+2
  2914 06:95B6: 65 13        	adc	<17+2
  2915 06:95B8: 85 1B        	sta	<25+2
  2916 06:95BA: A7 19        	lda	[<25]
  2917 06:95BC: EB           	xba
  2918 06:95BD: 29 FF 00     	and	#$00ff
  2919 06:95C0: 29 FF 00     	and	#<$ff
  2920 06:95C3: 85 11        	sta	<17
  2921 06:95C5: A5 11        	lda	<17
  2922 06:95C7: 05 01        	ora	<R0
  2923 06:95C9: 87 09        	sta	[<R2]
  2924                        ;			//k_debug_bits("k_ide_get_info:b
                    its:",FX_ATA_REG_STATUS[0]);
  2925                        ;			//if(!(FX_ATA_REG_STATUS[0] & AT
                    A_SR_DRQ))
  2926                        ;			//	k_ide_isdrq();
  2927                        ;		}
  2928                        	.line	782
  2929                        L10023:
  2930 06:95CB: E6 1D        	inc	<L55+index_1
  2931 06:95CD: A5 1D        	lda	<L55+index_1
  2932 06:95CF: C9 00 01     	cmp	#<$100
  2933 06:95D2: B0 03        	bcs	L58
  2934 06:95D4: 82 4A FF     	brl	L10025
  2935                        L58:
  2936                        L10024:
  2937                        ;
  Sat Jul 10 2021  1:15                                                Page 58


  2938                        ;		/*
  2939                        ;		for(index = 0;index < 256;index++)
  2940                        ;		{
  2941                        ;			lo = IDE_DATA_LO[0];
  2942                        ;			hi = IDE_DATA_HI[0];
  2943                        ;
  2944                        ;			ideInfo[index] = MAKEWORD(lo,hi)
                    ;
  2945                        ;
  2946                        ;			//ideInfo[index] = ((ideInfo[ind
                    ex]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2947                        ;
  2948                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2949                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2950                        ;			//ideInfo[index] =   lo;
  2951                        ;			//ideInfo[index+1] = hi;
  2952                        ;		}
  2953                        ;		*/
  2954                        ;		FX_ATA_REG_HDDEVCTL[0] = 0x06;
  2955                        	.line	800
  2956 06:95D7: E2 20        	sep	#$20
  2957                        	longa	off
  2958 06:95D9: A9 06        	lda	#$6
  2959 06:95DB: 8F 36 E8 AF  	sta	>11528246
  2960 06:95DF: C2 20        	rep	#$20
  2961                        	longa	on
  2962                        ;		k_ide_wait();
  2963                        	.line	801
  2964 06:95E1: 22 0E 96 06  	jsl	~~k_ide_wait
  2965                        ;
  2966                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",(LPCHAR)pdata,512);
  2967                        	.line	803
  2968 06:95E5: F4 00 00     	pea	#^$200
  2969 06:95E8: F4 00 02     	pea	#<$200
  2970 06:95EB: D4 23        	pei	<L55+pdata_1+2
  2971 06:95ED: D4 21        	pei	<L55+pdata_1
  2972 06:95EF: F4 xx xx     	pea	#^L53+42
  2973 06:95F2: F4 xx xx     	pea	#<L53+42
  2974 06:95F5: 22 xx xx xx  	jsl	~~k_debug_byte_array
  2975                        ;	}
  2976                        	.line	804
  2977                        ;	else
  2978 06:95F9: 82 04 00     	brl	L10026
  2979                        L10022:
  2980                        ;	{
  2981                        	.line	806
  2982                        ;		pdata = NULL;
  2983                        	.line	807
  2984 06:95FC: 64 21        	stz	<L55+pdata_1
  2985 06:95FE: 64 23        	stz	<L55+pdata_1+2
  2986                        ;	}
  2987                        	.line	808
  2988                        L10026:
  2989                        ;	return (LPCHAR)pdata;
  2990                        	.line	809
  Sat Jul 10 2021  1:15                                                Page 59


  2991 06:9600: A6 23        	ldx	<L55+pdata_1+2
  2992 06:9602: A5 21        	lda	<L55+pdata_1
  2993                        L59:
  2994 06:9604: A8           	tay
  2995 06:9605: 2B           	pld
  2996 06:9606: 3B           	tsc
  2997 06:9607: 18           	clc
  2998 06:9608: 69 2B 00     	adc	#L54
  2999 06:960B: 1B           	tcs
  3000 06:960C: 98           	tya
  3001 06:960D: 6B           	rtl
  3002                        ;}
  3003                        	.line	810
  3004                        	.endblock	810
  3005             0000002B   L54	equ	43
  3006             0000001D   L55	equ	29
  3007 06:960E:              	ends
  3008                        	efunc
  3009                        	.endfunc	810,29,43
  3010                        	.line	810
  3011                        	data
  3012                        L53:
  3013 00:0151: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$67,$65,$74,$5F,
                    $69,$6E,$66,$6F,$3A
       00:0155: 65 5F 67 65 
       00:0159: 74 5F 69 6E 
       00:015D: 66 6F 3A 
  3014 00:0160: 62 69 74 73  	db	$62,$69,$74,$73,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$67,$65,$74
       00:0164: 3A 00 6B 5F 
       00:0168: 69 64 65 5F 
       00:016C: 67 65 74 
  3015 00:016F: 5F 69 6E 66  	db	$5F,$69,$6E,$66,$6F,$3A,$62,$69,$74,$73,
                    $3A,$00,$6B,$5F,$69
       00:0173: 6F 3A 62 69 
       00:0177: 74 73 3A 00 
       00:017B: 6B 5F 69 
  3016 00:017E: 64 65 5F 67  	db	$64,$65,$5F,$67,$65,$74,$5F,$69,$6E,$66,
                    $6F,$3A,$44,$41,$54
       00:0182: 65 74 5F 69 
       00:0186: 6E 66 6F 3A 
       00:018A: 44 41 54 
  3017 00:018D: 41 3A 0D 0A  	db	$41,$3A,$0D,$0A,$00
       00:0191: 00 
  3018 00:0192:              	ends
  3019                        ;
  3020                        ;
  3021                        ;void k_ide_wait(void)
  3022                        ;{
  3023                        	.line	813
  3024                        	.line	814
  3025                        	FXHDD
  3026                        	xdef	~~k_ide_wait
  3027                        	func
  3028                        	.function	814
  3029                        ~~k_ide_wait:
  3030                        	longa	on
  3031                        	longi	on
  Sat Jul 10 2021  1:15                                                Page 60


  3032 06:960E: 3B           	tsc
  3033 06:960F: 38           	sec
  3034 06:9610: E9 03 00     	sbc	#L61
  3035 06:9613: 1B           	tcs
  3036 06:9614: 0B           	phd
  3037 06:9615: 5B           	tcd
  3038                        	.block	814
  3039                        ;	UINT i = 0;
  3040                        ;	UCHAR status = 0x00;
  3041                        ;
  3042                        ;	//k_debug_string("k_ide_wait...\r\n");
  3043                        ;
  3044                        ;	for(i=0; i< 4; i++)
  3045             00000000   i_1	set	0
  3046             00000002   status_1	set	2
  3047                        	.sym	i,0,16,1,16
  3048                        	.sym	status,2,14,1,8
  3049 06:9616: 64 01        	stz	<L62+i_1
  3050 06:9618: E2 20        	sep	#$20
  3051                        	longa	off
  3052 06:961A: 64 03        	stz	<L62+status_1
  3053 06:961C: C2 20        	rep	#$20
  3054                        	longa	on
  3055                        	.line	820
  3056 06:961E: 64 01        	stz	<L62+i_1
  3057                        L10029:
  3058                        ;	{
  3059                        	.line	821
  3060                        ;		status = IDE_CMD_STAT[0];
  3061                        	.line	822
  3062 06:9620: E2 20        	sep	#$20
  3063                        	longa	off
  3064 06:9622: AF 37 E8 AF  	lda	>11528247
  3065 06:9626: 85 03        	sta	<L62+status_1
  3066 06:9628: C2 20        	rep	#$20
  3067                        	longa	on
  3068                        ;		k_debug_bits("k_ide_wait:bits:",status);
  3069                        	.line	823
  3070 06:962A: D4 03        	pei	<L62+status_1
  3071 06:962C: F4 xx xx     	pea	#^L60
  3072 06:962F: F4 xx xx     	pea	#<L60
  3073 06:9632: 22 xx xx xx  	jsl	~~k_debug_bits
  3074                        ;	}
  3075                        	.line	824
  3076                        L10027:
  3077 06:9636: E6 01        	inc	<L62+i_1
  3078 06:9638: A5 01        	lda	<L62+i_1
  3079 06:963A: C9 04 00     	cmp	#<$4
  3080 06:963D: B0 03        	bcs	L64
  3081 06:963F: 82 DE FF     	brl	L10029
  3082                        L64:
  3083                        L10028:
  3084                        ;}
  3085                        	.line	825
  3086                        L65:
  3087 06:9642: 2B           	pld
  3088 06:9643: 3B           	tsc
  3089 06:9644: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 61


  3090 06:9645: 69 03 00     	adc	#L61
  3091 06:9648: 1B           	tcs
  3092 06:9649: 6B           	rtl
  3093                        	.endblock	825
  3094             00000003   L61	equ	3
  3095             00000001   L62	equ	1
  3096 06:964A:              	ends
  3097                        	efunc
  3098                        	.endfunc	825,1,3
  3099                        	.line	825
  3100                        	data
  3101                        L60:
  3102 00:0192: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$77,$61,$69,$74,
                    $3A,$62,$69,$74,$73
       00:0196: 65 5F 77 61 
       00:019A: 69 74 3A 62 
       00:019E: 69 74 73 
  3103 00:01A1: 3A 00        	db	$3A,$00
  3104 00:01A3:              	ends
  3105                        ;
  3106                        ;void k_ide_poll(UINT io)
  3107                        ;{
  3108                        	.line	827
  3109                        	.line	828
  3110                        	FXHDD
  3111                        	xdef	~~k_ide_poll
  3112                        	func
  3113                        	.function	828
  3114                        ~~k_ide_poll:
  3115                        	longa	on
  3116                        	longi	on
  3117 06:964A: 3B           	tsc
  3118 06:964B: 38           	sec
  3119 06:964C: E9 03 00     	sbc	#L67
  3120 06:964F: 1B           	tcs
  3121 06:9650: 0B           	phd
  3122 06:9651: 5B           	tcd
  3123             00000004   io_0	set	4
  3124                        	.block	828
  3125                        ;	UINT i = 0;
  3126                        ;	UCHAR status = 0x00;
  3127                        ;
  3128                        ;	for(i=0; i< 4; i++)
  3129             00000000   i_1	set	0
  3130             00000002   status_1	set	2
  3131                        	.sym	i,0,16,1,16
  3132                        	.sym	status,2,14,1,8
  3133                        	.sym	io,4,16,6,16
  3134 06:9652: 64 01        	stz	<L68+i_1
  3135 06:9654: E2 20        	sep	#$20
  3136                        	longa	off
  3137 06:9656: 64 03        	stz	<L68+status_1
  3138 06:9658: C2 20        	rep	#$20
  3139                        	longa	on
  3140                        	.line	832
  3141 06:965A: 64 01        	stz	<L68+i_1
  3142                        L10032:
  3143                        ;		status = FX_ATA_REG_STATUS[0];
  Sat Jul 10 2021  1:15                                                Page 62


  3144                        	.line	833
  3145 06:965C: E2 20        	sep	#$20
  3146                        	longa	off
  3147 06:965E: AF 37 E8 AF  	lda	>11528247
  3148 06:9662: 85 03        	sta	<L68+status_1
  3149 06:9664: C2 20        	rep	#$20
  3150                        	longa	on
  3151                        L10030:
  3152 06:9666: E6 01        	inc	<L68+i_1
  3153 06:9668: A5 01        	lda	<L68+i_1
  3154 06:966A: C9 04 00     	cmp	#<$4
  3155 06:966D: B0 03        	bcs	L70
  3156 06:966F: 82 EA FF     	brl	L10032
  3157                        L70:
  3158                        L10031:
  3159                        ;
  3160                        ;retry:;
  3161                        	.line	835
  3162                        L10033:
  3163                        	.line	835
  3164                        ;	status = FX_ATA_REG_STATUS[0];
  3165                        	.line	836
  3166 06:9672: E2 20        	sep	#$20
  3167                        	longa	off
  3168 06:9674: AF 37 E8 AF  	lda	>11528247
  3169 06:9678: 85 03        	sta	<L68+status_1
  3170 06:967A: C2 20        	rep	#$20
  3171                        	longa	on
  3172                        ;	k_debug_string("testing for BSY\r\n");
  3173                        	.line	837
  3174 06:967C: F4 xx xx     	pea	#^L66
  3175 06:967F: F4 xx xx     	pea	#<L66
  3176 06:9682: 22 xx xx xx  	jsl	~~k_debug_string
  3177                        ;	if(status & ATA_SR_BSY) goto retry;
  3178                        	.line	838
  3179 06:9686: E2 20        	sep	#$20
  3180                        	longa	off
  3181 06:9688: A5 03        	lda	<L68+status_1
  3182 06:968A: 29 80        	and	#<$80
  3183 06:968C: C2 20        	rep	#$20
  3184                        	longa	on
  3185 06:968E: F0 03        	beq	L71
  3186 06:9690: 82 DF FF     	brl	L10033
  3187                        L71:
  3188                        ;	k_debug_string("BSY cleared\r\n");
  3189                        	.line	839
  3190 06:9693: F4 xx xx     	pea	#^L66+18
  3191 06:9696: F4 xx xx     	pea	#<L66+18
  3192 06:9699: 22 xx xx xx  	jsl	~~k_debug_string
  3193                        ;
  3194                        ;retry2:	status = FX_ATA_REG_STATUS[0];
  3195                        	.line	841
  3196                        L10034:
  3197                        	.line	841
  3198 06:969D: E2 20        	sep	#$20
  3199                        	longa	off
  3200 06:969F: AF 37 E8 AF  	lda	>11528247
  3201 06:96A3: 85 03        	sta	<L68+status_1
  Sat Jul 10 2021  1:15                                                Page 63


  3202 06:96A5: C2 20        	rep	#$20
  3203                        	longa	on
  3204                        ;	if(status & ATA_SR_ERR)
  3205                        	.line	842
  3206                        ;	{
  3207 06:96A7: E2 20        	sep	#$20
  3208                        	longa	off
  3209 06:96A9: A5 03        	lda	<L68+status_1
  3210 06:96AB: 29 01        	and	#<$1
  3211 06:96AD: C2 20        	rep	#$20
  3212                        	longa	on
  3213 06:96AF: D0 03        	bne	L72
  3214 06:96B1: 82 0C 00     	brl	L10035
  3215                        L72:
  3216                        	.line	843
  3217                        ;		k_debug_hex("k_ide_poll:ATA_SR_ERR:",sta
                    tus);
  3218                        	.line	844
  3219 06:96B4: D4 03        	pei	<L68+status_1
  3220 06:96B6: F4 xx xx     	pea	#^L66+32
  3221 06:96B9: F4 xx xx     	pea	#<L66+32
  3222 06:96BC: 22 xx xx xx  	jsl	~~k_debug_hex
  3223                        ;	}
  3224                        	.line	845
  3225                        ;	k_debug_string("testing for DRQ\r\n");
  3226                        L10035:
  3227                        	.line	846
  3228 06:96C0: F4 xx xx     	pea	#^L66+55
  3229 06:96C3: F4 xx xx     	pea	#<L66+55
  3230 06:96C6: 22 xx xx xx  	jsl	~~k_debug_string
  3231                        ;	if(!(status & ATA_SR_DRQ)) goto retry2;
  3232                        	.line	847
  3233 06:96CA: E2 20        	sep	#$20
  3234                        	longa	off
  3235 06:96CC: A5 03        	lda	<L68+status_1
  3236 06:96CE: 29 08        	and	#<$8
  3237 06:96D0: C2 20        	rep	#$20
  3238                        	longa	on
  3239 06:96D2: D0 03        	bne	L73
  3240 06:96D4: 82 C6 FF     	brl	L10034
  3241                        L73:
  3242                        ;	k_debug_string("DRQ set, ready to PIO!\r\n");
  3243                        	.line	848
  3244 06:96D7: F4 xx xx     	pea	#^L66+73
  3245 06:96DA: F4 xx xx     	pea	#<L66+73
  3246 06:96DD: 22 xx xx xx  	jsl	~~k_debug_string
  3247                        ;	return;
  3248                        	.line	849
  3249                        L74:
  3250 06:96E1: A5 05        	lda	<L67+2
  3251 06:96E3: 85 07        	sta	<L67+2+2
  3252 06:96E5: A5 04        	lda	<L67+1
  3253 06:96E7: 85 06        	sta	<L67+1+2
  3254 06:96E9: 2B           	pld
  3255 06:96EA: 3B           	tsc
  3256 06:96EB: 18           	clc
  3257 06:96EC: 69 05 00     	adc	#L67+2
  3258 06:96EF: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 64


  3259 06:96F0: 6B           	rtl
  3260                        ;}
  3261                        	.line	850
  3262                        	.endblock	850
  3263             00000003   L67	equ	3
  3264             00000001   L68	equ	1
  3265 06:96F1:              	ends
  3266                        	efunc
  3267                        	.endfunc	850,1,3
  3268                        	.line	850
  3269                        	data
  3270                        L66:
  3271 00:01A3: 74 65 73 74  	db	$74,$65,$73,$74,$69,$6E,$67,$20,$66,$6F,
                    $72,$20,$42,$53,$59
       00:01A7: 69 6E 67 20 
       00:01AB: 66 6F 72 20 
       00:01AF: 42 53 59 
  3272 00:01B2: 0D 0A 00 42  	db	$0D,$0A,$00,$42,$53,$59,$20,$63,$6C,$65,
                    $61,$72,$65,$64,$0D
       00:01B6: 53 59 20 63 
       00:01BA: 6C 65 61 72 
       00:01BE: 65 64 0D 
  3273 00:01C1: 0A 00 6B 5F  	db	$0A,$00,$6B,$5F,$69,$64,$65,$5F,$70,$6F,
                    $6C,$6C,$3A,$41,$54
       00:01C5: 69 64 65 5F 
       00:01C9: 70 6F 6C 6C 
       00:01CD: 3A 41 54 
  3274 00:01D0: 41 5F 53 52  	db	$41,$5F,$53,$52,$5F,$45,$52,$52,$3A,$00,
                    $74,$65,$73,$74,$69
       00:01D4: 5F 45 52 52 
       00:01D8: 3A 00 74 65 
       00:01DC: 73 74 69 
  3275 00:01DF: 6E 67 20 66  	db	$6E,$67,$20,$66,$6F,$72,$20,$44,$52,$51,
                    $0D,$0A,$00,$44,$52
       00:01E3: 6F 72 20 44 
       00:01E7: 52 51 0D 0A 
       00:01EB: 00 44 52 
  3276 00:01EE: 51 20 73 65  	db	$51,$20,$73,$65,$74,$2C,$20,$72,$65,$61,
                    $64,$79,$20,$74,$6F
       00:01F2: 74 2C 20 72 
       00:01F6: 65 61 64 79 
       00:01FA: 20 74 6F 
  3277 00:01FD: 20 50 49 4F  	db	$20,$50,$49,$4F,$21,$0D,$0A,$00
       00:0201: 21 0D 0A 00 
  3278 00:0205:              	ends
  3279                        ;
  3280                        ;
  3281                        ;
  3282                        ;void k_read_lba_sector(ULONG lba,unsigned char co
                    unt,LPCHAR readBuffer)
  3283                        ;{
  3284                        	.line	854
  3285                        	.line	855
  3286                        	FXHDD
  3287                        	xdef	~~k_read_lba_sector
  3288                        	func
  3289                        	.function	855
  3290                        ~~k_read_lba_sector:
  Sat Jul 10 2021  1:15                                                Page 65


  3291                        	longa	on
  3292                        	longi	on
  3293 06:96F1: 3B           	tsc
  3294 06:96F2: 38           	sec
  3295 06:96F3: E9 16 00     	sbc	#L76
  3296 06:96F6: 1B           	tcs
  3297 06:96F7: 0B           	phd
  3298 06:96F8: 5B           	tcd
  3299             00000004   lba_0	set	4
  3300             00000008   count_0	set	8
  3301             0000000A   readBuffer_0	set	10
  3302                        	.block	855
  3303                        ;	UCHAR sts = 0x00;
  3304                        ;	UCHAR cmd = 0xE0;
  3305                        ;	UCHAR hi;
  3306                        ;	UCHAR lo;
  3307                        ;	UINT  index = 0;
  3308                        ;
  3309                        ;	UINT *pbuffer = (UINT*)readBuffer;
  3310                        ;
  3311                        ;	k_debug_long("READING LBA:",lba);
  3312             00000000   sts_1	set	0
  3313             00000001   cmd_1	set	1
  3314             00000002   hi_1	set	2
  3315             00000003   lo_1	set	3
  3316             00000004   index_1	set	4
  3317             00000006   pbuffer_1	set	6
  3318                        	.sym	sts,0,14,1,8
  3319                        	.sym	cmd,1,14,1,8
  3320                        	.sym	hi,2,14,1,8
  3321                        	.sym	lo,3,14,1,8
  3322                        	.sym	index,4,16,1,16
  3323                        	.sym	pbuffer,6,144,1,32
  3324                        	.sym	lba,4,18,6,32
  3325                        	.sym	count,8,14,6,8
  3326                        	.sym	readBuffer,10,142,6,32
  3327 06:96F9: E2 20        	sep	#$20
  3328                        	longa	off
  3329 06:96FB: 64 0D        	stz	<L77+sts_1
  3330 06:96FD: C2 20        	rep	#$20
  3331                        	longa	on
  3332 06:96FF: E2 20        	sep	#$20
  3333                        	longa	off
  3334 06:9701: A9 E0        	lda	#$e0
  3335 06:9703: 85 0E        	sta	<L77+cmd_1
  3336 06:9705: C2 20        	rep	#$20
  3337                        	longa	on
  3338 06:9707: 64 11        	stz	<L77+index_1
  3339 06:9709: A5 20        	lda	<L76+readBuffer_0
  3340 06:970B: 85 13        	sta	<L77+pbuffer_1
  3341 06:970D: A5 22        	lda	<L76+readBuffer_0+2
  3342 06:970F: 85 15        	sta	<L77+pbuffer_1+2
  3343                        	.line	864
  3344 06:9711: D4 1C        	pei	<L76+lba_0+2
  3345 06:9713: D4 1A        	pei	<L76+lba_0
  3346 06:9715: F4 xx xx     	pea	#^L75
  3347 06:9718: F4 xx xx     	pea	#<L75
  3348 06:971B: 22 xx xx xx  	jsl	~~k_debug_long
  Sat Jul 10 2021  1:15                                                Page 66


  3349                        ;
  3350                        ;	k_ide_isbusy();
  3351                        	.line	866
  3352 06:971F: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  3353                        ;	k_ide_isready();
  3354                        	.line	867
  3355 06:9723: 22 90 90 06  	jsl	~~k_ide_isready
  3356                        ;
  3357                        ;	FX_ATA_REG_HDDEVSEL[0] 	= (cmd | (UCHAR)((lba >>
                     24 & 0x0F)));
  3358                        	.line	869
  3359 06:9727: D4 1C        	pei	<L76+lba_0+2
  3360 06:9729: D4 1A        	pei	<L76+lba_0
  3361 06:972B: A9 18 00     	lda	#$18
  3362                        	xref	~~~llsr
  3363 06:972E: 22 xx xx xx  	jsl	~~~llsr
  3364 06:9732: 85 01        	sta	<R0
  3365 06:9734: 86 03        	stx	<R0+2
  3366 06:9736: A5 01        	lda	<R0
  3367 06:9738: 29 0F 00     	and	#<$f
  3368 06:973B: 85 05        	sta	<R1
  3369 06:973D: 64 07        	stz	<R1+2
  3370 06:973F: E2 20        	sep	#$20
  3371                        	longa	off
  3372 06:9741: A5 0E        	lda	<L77+cmd_1
  3373 06:9743: 05 05        	ora	<R1
  3374 06:9745: 8F 36 E8 AF  	sta	>11528246
  3375 06:9749: C2 20        	rep	#$20
  3376                        	longa	on
  3377                        ;
  3378                        ;	FX_ATA_REG_FEATURES[0] 	= 0x00;
  3379                        	.line	871
  3380 06:974B: E2 20        	sep	#$20
  3381                        	longa	off
  3382 06:974D: A9 00        	lda	#$0
  3383 06:974F: 8F 31 E8 AF  	sta	>11528241
  3384 06:9753: C2 20        	rep	#$20
  3385                        	longa	on
  3386                        ;	FX_ATA_REG_SECCOUNT0[0] = count;
  3387                        	.line	872
  3388 06:9755: E2 20        	sep	#$20
  3389                        	longa	off
  3390 06:9757: A5 1E        	lda	<L76+count_0
  3391 06:9759: 8F 32 E8 AF  	sta	>11528242
  3392 06:975D: C2 20        	rep	#$20
  3393                        	longa	on
  3394                        ;	FX_ATA_REG_LBA0[0] 		= (UCHAR)((lba))
                    ;
  3395                        	.line	873
  3396 06:975F: E2 20        	sep	#$20
  3397                        	longa	off
  3398 06:9761: A5 1A        	lda	<L76+lba_0
  3399 06:9763: 8F 33 E8 AF  	sta	>11528243
  3400 06:9767: C2 20        	rep	#$20
  3401                        	longa	on
  3402                        ;	FX_ATA_REG_LBA1[0] 		= (UCHAR)((lba) 
                    >> 8);
  3403                        	.line	874
  Sat Jul 10 2021  1:15                                                Page 67


  3404 06:9769: D4 1C        	pei	<L76+lba_0+2
  3405 06:976B: D4 1A        	pei	<L76+lba_0
  3406 06:976D: A9 08 00     	lda	#$8
  3407                        	xref	~~~llsr
  3408 06:9770: 22 xx xx xx  	jsl	~~~llsr
  3409 06:9774: 85 01        	sta	<R0
  3410 06:9776: 86 03        	stx	<R0+2
  3411 06:9778: E2 20        	sep	#$20
  3412                        	longa	off
  3413 06:977A: A5 01        	lda	<R0
  3414 06:977C: 8F 34 E8 AF  	sta	>11528244
  3415 06:9780: C2 20        	rep	#$20
  3416                        	longa	on
  3417                        ;	FX_ATA_REG_LBA2[0] 		= (UCHAR)((lba) 
                    >> 16);
  3418                        	.line	875
  3419 06:9782: D4 1C        	pei	<L76+lba_0+2
  3420 06:9784: D4 1A        	pei	<L76+lba_0
  3421 06:9786: A9 10 00     	lda	#$10
  3422                        	xref	~~~llsr
  3423 06:9789: 22 xx xx xx  	jsl	~~~llsr
  3424 06:978D: 85 01        	sta	<R0
  3425 06:978F: 86 03        	stx	<R0+2
  3426 06:9791: E2 20        	sep	#$20
  3427                        	longa	off
  3428 06:9793: A5 01        	lda	<R0
  3429 06:9795: 8F 35 E8 AF  	sta	>11528245
  3430 06:9799: C2 20        	rep	#$20
  3431                        	longa	on
  3432                        ;
  3433                        ;	FX_ATA_REG_COMMAND[0] 	= ATA_CMD_READ_PIO;
  3434                        	.line	877
  3435 06:979B: E2 20        	sep	#$20
  3436                        	longa	off
  3437 06:979D: A9 20        	lda	#$20
  3438 06:979F: 8F 37 E8 AF  	sta	>11528247
  3439 06:97A3: C2 20        	rep	#$20
  3440                        	longa	on
  3441                        ;
  3442                        ;	k_debug_bits("FX_ATA_REG_SECCOUNT0:",count);
  3443                        	.line	879
  3444 06:97A5: D4 1E        	pei	<L76+count_0
  3445 06:97A7: F4 xx xx     	pea	#^L75+13
  3446 06:97AA: F4 xx xx     	pea	#<L75+13
  3447 06:97AD: 22 xx xx xx  	jsl	~~k_debug_bits
  3448                        ;	k_debug_bits("FX_ATA_REG_HDDEVSEL:",(cmd | (UCHA
                    R)((lba >> 24 & 0x0F))));
  3449                        	.line	880
  3450 06:97B1: D4 1C        	pei	<L76+lba_0+2
  3451 06:97B3: D4 1A        	pei	<L76+lba_0
  3452 06:97B5: A9 18 00     	lda	#$18
  3453                        	xref	~~~llsr
  3454 06:97B8: 22 xx xx xx  	jsl	~~~llsr
  3455 06:97BC: 85 01        	sta	<R0
  3456 06:97BE: 86 03        	stx	<R0+2
  3457 06:97C0: A5 01        	lda	<R0
  3458 06:97C2: 29 0F 00     	and	#<$f
  3459 06:97C5: 85 05        	sta	<R1
  Sat Jul 10 2021  1:15                                                Page 68


  3460 06:97C7: 64 07        	stz	<R1+2
  3461 06:97C9: A5 05        	lda	<R1
  3462 06:97CB: 29 FF 00     	and	#$ff
  3463 06:97CE: 85 01        	sta	<R0
  3464 06:97D0: A5 0E        	lda	<L77+cmd_1
  3465 06:97D2: 29 FF 00     	and	#$ff
  3466 06:97D5: 85 05        	sta	<R1
  3467 06:97D7: A5 05        	lda	<R1
  3468 06:97D9: 05 01        	ora	<R0
  3469 06:97DB: 48           	pha
  3470 06:97DC: F4 xx xx     	pea	#^L75+35
  3471 06:97DF: F4 xx xx     	pea	#<L75+35
  3472 06:97E2: 22 xx xx xx  	jsl	~~k_debug_bits
  3473                        ;	k_debug_bits("FX_ATA_REG_LBA0:",(UCHAR)((lba)));
  3474                        	.line	881
  3475 06:97E6: D4 1A        	pei	<L76+lba_0
  3476 06:97E8: F4 xx xx     	pea	#^L75+56
  3477 06:97EB: F4 xx xx     	pea	#<L75+56
  3478 06:97EE: 22 xx xx xx  	jsl	~~k_debug_bits
  3479                        ;	k_debug_bits("FX_ATA_REG_LBA1:",(UCHAR)((lba) >>
                     8));
  3480                        	.line	882
  3481 06:97F2: D4 1C        	pei	<L76+lba_0+2
  3482 06:97F4: D4 1A        	pei	<L76+lba_0
  3483 06:97F6: A9 08 00     	lda	#$8
  3484                        	xref	~~~llsr
  3485 06:97F9: 22 xx xx xx  	jsl	~~~llsr
  3486 06:97FD: 85 01        	sta	<R0
  3487 06:97FF: 86 03        	stx	<R0+2
  3488 06:9801: D4 01        	pei	<R0
  3489 06:9803: F4 xx xx     	pea	#^L75+73
  3490 06:9806: F4 xx xx     	pea	#<L75+73
  3491 06:9809: 22 xx xx xx  	jsl	~~k_debug_bits
  3492                        ;	k_debug_bits("FX_ATA_REG_LBA2:",(UCHAR)((lba) >>
                     16));
  3493                        	.line	883
  3494 06:980D: D4 1C        	pei	<L76+lba_0+2
  3495 06:980F: D4 1A        	pei	<L76+lba_0
  3496 06:9811: A9 10 00     	lda	#$10
  3497                        	xref	~~~llsr
  3498 06:9814: 22 xx xx xx  	jsl	~~~llsr
  3499 06:9818: 85 01        	sta	<R0
  3500 06:981A: 86 03        	stx	<R0+2
  3501 06:981C: D4 01        	pei	<R0
  3502 06:981E: F4 xx xx     	pea	#^L75+90
  3503 06:9821: F4 xx xx     	pea	#<L75+90
  3504 06:9824: 22 xx xx xx  	jsl	~~k_debug_bits
  3505                        ;
  3506                        ;	//k_ide_wait();
  3507                        ;
  3508                        ;	k_ide_isbusy();
  3509                        	.line	887
  3510 06:9828: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  3511                        ;	k_ide_isdrq();
  3512                        	.line	888
  3513 06:982C: 22 24 91 06  	jsl	~~k_ide_isdrq
  3514                        ;
  3515                        ;	index = *((UINT*)&IDE_DATA_LO[0]);
  Sat Jul 10 2021  1:15                                                Page 69


  3516                        	.line	890
  3517 06:9830: AF 38 E8 AF  	lda	>11528248
  3518 06:9834: 85 11        	sta	<L77+index_1
  3519                        ;
  3520                        ;	for(index = 0;index < 256;index++)
  3521                        	.line	892
  3522 06:9836: 64 11        	stz	<L77+index_1
  3523                        L10038:
  3524                        ;	{
  3525                        	.line	893
  3526                        ;		pbuffer[index] = *((UINT*)&IDE_DATA_LO[0
                    ]);
  3527                        	.line	894
  3528 06:9838: A5 11        	lda	<L77+index_1
  3529 06:983A: 85 05        	sta	<R1
  3530 06:983C: 64 07        	stz	<R1+2
  3531 06:983E: D4 07        	pei	<R1+2
  3532 06:9840: D4 05        	pei	<R1
  3533 06:9842: A9 01 00     	lda	#$1
  3534                        	xref	~~~lasl
  3535 06:9845: 22 xx xx xx  	jsl	~~~lasl
  3536 06:9849: 85 01        	sta	<R0
  3537 06:984B: 86 03        	stx	<R0+2
  3538 06:984D: 18           	clc
  3539 06:984E: A5 13        	lda	<L77+pbuffer_1
  3540 06:9850: 65 01        	adc	<R0
  3541 06:9852: 85 09        	sta	<R2
  3542 06:9854: A5 15        	lda	<L77+pbuffer_1+2
  3543 06:9856: 65 03        	adc	<R0+2
  3544 06:9858: 85 0B        	sta	<R2+2
  3545 06:985A: AF 38 E8 AF  	lda	>11528248
  3546 06:985E: 87 09        	sta	[<R2]
  3547                        ;		//pbuffer[index] = ((pbuffer[index]<<8)&
                    0xff00)|((pbuffer[index]>>8)&0x00ff);
  3548                        ;	}
  3549                        	.line	896
  3550                        L10036:
  3551 06:9860: E6 11        	inc	<L77+index_1
  3552 06:9862: A5 11        	lda	<L77+index_1
  3553 06:9864: C9 00 01     	cmp	#<$100
  3554 06:9867: B0 03        	bcs	L79
  3555 06:9869: 82 CC FF     	brl	L10038
  3556                        L79:
  3557                        L10037:
  3558                        ;
  3559                        ;	return;
  3560                        	.line	898
  3561                        L80:
  3562 06:986C: A5 18        	lda	<L76+2
  3563 06:986E: 85 22        	sta	<L76+2+10
  3564 06:9870: A5 17        	lda	<L76+1
  3565 06:9872: 85 21        	sta	<L76+1+10
  3566 06:9874: 2B           	pld
  3567 06:9875: 3B           	tsc
  3568 06:9876: 18           	clc
  3569 06:9877: 69 20 00     	adc	#L76+10
  3570 06:987A: 1B           	tcs
  3571 06:987B: 6B           	rtl
  Sat Jul 10 2021  1:15                                                Page 70


  3572                        ;}
  3573                        	.line	899
  3574                        	.endblock	899
  3575             00000016   L76	equ	22
  3576             0000000D   L77	equ	13
  3577 06:987C:              	ends
  3578                        	efunc
  3579                        	.endfunc	899,13,22
  3580                        	.line	899
  3581                        	data
  3582                        L75:
  3583 00:0205: 52 45 41 44  	db	$52,$45,$41,$44,$49,$4E,$47,$20,$4C,$42,
                    $41,$3A,$00,$46,$58
       00:0209: 49 4E 47 20 
       00:020D: 4C 42 41 3A 
       00:0211: 00 46 58 
  3584 00:0214: 5F 41 54 41  	db	$5F,$41,$54,$41,$5F,$52,$45,$47,$5F,$53,
                    $45,$43,$43,$4F,$55
       00:0218: 5F 52 45 47 
       00:021C: 5F 53 45 43 
       00:0220: 43 4F 55 
  3585 00:0223: 4E 54 30 3A  	db	$4E,$54,$30,$3A,$00,$46,$58,$5F,$41,$54,
                    $41,$5F,$52,$45,$47
       00:0227: 00 46 58 5F 
       00:022B: 41 54 41 5F 
       00:022F: 52 45 47 
  3586 00:0232: 5F 48 44 44  	db	$5F,$48,$44,$44,$45,$56,$53,$45,$4C,$3A,
                    $00,$46,$58,$5F,$41
       00:0236: 45 56 53 45 
       00:023A: 4C 3A 00 46 
       00:023E: 58 5F 41 
  3587 00:0241: 54 41 5F 52  	db	$54,$41,$5F,$52,$45,$47,$5F,$4C,$42,$41,
                    $30,$3A,$00,$46,$58
       00:0245: 45 47 5F 4C 
       00:0249: 42 41 30 3A 
       00:024D: 00 46 58 
  3588 00:0250: 5F 41 54 41  	db	$5F,$41,$54,$41,$5F,$52,$45,$47,$5F,$4C,
                    $42,$41,$31,$3A,$00
       00:0254: 5F 52 45 47 
       00:0258: 5F 4C 42 41 
       00:025C: 31 3A 00 
  3589 00:025F: 46 58 5F 41  	db	$46,$58,$5F,$41,$54,$41,$5F,$52,$45,$47,
                    $5F,$4C,$42,$41,$32
       00:0263: 54 41 5F 52 
       00:0267: 45 47 5F 4C 
       00:026B: 42 41 32 
  3590 00:026E: 3A 00        	db	$3A,$00
  3591 00:0270:              	ends
  3592                        ;
  3593                        ;
  3594                        ;void k_read_lba_sector_old(ULONG lba,unsigned cha
                    r count,LPCHAR readBuffer)
  3595                        ;{
  3596                        	.line	902
  3597                        	.line	903
  3598                        	FXHDD
  3599                        	xdef	~~k_read_lba_sector_old
  3600                        	func
  Sat Jul 10 2021  1:15                                                Page 71


  3601                        	.function	903
  3602                        ~~k_read_lba_sector_old:
  3603                        	longa	on
  3604                        	longi	on
  3605 06:987C: 3B           	tsc
  3606 06:987D: 38           	sec
  3607 06:987E: E9 0E 00     	sbc	#L82
  3608 06:9881: 1B           	tcs
  3609 06:9882: 0B           	phd
  3610 06:9883: 5B           	tcd
  3611             00000004   lba_0	set	4
  3612             00000008   count_0	set	8
  3613             0000000A   readBuffer_0	set	10
  3614                        	.block	903
  3615                        ;	UCHAR sts = 0x00;
  3616                        ;	UCHAR cmd = 0xE0;
  3617                        ;	UCHAR hi;
  3618                        ;	UCHAR lo;
  3619                        ;	UINT  index = 0;
  3620                        ;	//LPCHAR lbaBytes = (LPCHAR)&lba;
  3621                        ;	k_debug_long("k_read_lba_sector:",lba);
  3622             00000000   sts_1	set	0
  3623             00000001   cmd_1	set	1
  3624             00000002   hi_1	set	2
  3625             00000003   lo_1	set	3
  3626             00000004   index_1	set	4
  3627                        	.sym	sts,0,14,1,8
  3628                        	.sym	cmd,1,14,1,8
  3629                        	.sym	hi,2,14,1,8
  3630                        	.sym	lo,3,14,1,8
  3631                        	.sym	index,4,16,1,16
  3632                        	.sym	lba,4,18,6,32
  3633                        	.sym	count,8,14,6,8
  3634                        	.sym	readBuffer,10,142,6,32
  3635 06:9884: E2 20        	sep	#$20
  3636                        	longa	off
  3637 06:9886: 64 09        	stz	<L83+sts_1
  3638 06:9888: C2 20        	rep	#$20
  3639                        	longa	on
  3640 06:988A: E2 20        	sep	#$20
  3641                        	longa	off
  3642 06:988C: A9 E0        	lda	#$e0
  3643 06:988E: 85 0A        	sta	<L83+cmd_1
  3644 06:9890: C2 20        	rep	#$20
  3645                        	longa	on
  3646 06:9892: 64 0D        	stz	<L83+index_1
  3647                        	.line	910
  3648 06:9894: D4 14        	pei	<L82+lba_0+2
  3649 06:9896: D4 12        	pei	<L82+lba_0
  3650 06:9898: F4 xx xx     	pea	#^L81
  3651 06:989B: F4 xx xx     	pea	#<L81
  3652 06:989E: 22 xx xx xx  	jsl	~~k_debug_long
  3653                        ;
  3654                        ;	//ide_select_drive(ATA_PRIMARY,ATA_MASTER);
  3655                        ;
  3656                        ;	k_ide_isbusy();
  3657                        	.line	914
  3658 06:98A2: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  Sat Jul 10 2021  1:15                                                Page 72


  3659                        ;
  3660                        ;	/*
  3661                        ;	IDE_SECT_CNT[0]  = count;
  3662                        ;
  3663                        ;	IDE_HEAD[0]  	 = lbaBytes[3];
  3664                        ;	IDE_SECT_SRT[0]  = lbaBytes[0];
  3665                        ;	IDE_CLDR_LO[0]   = lbaBytes[1];
  3666                        ;	IDE_CLDR_HI[0]   = lbaBytes[2];
  3667                        ;	*/
  3668                        ;	//FX_ATA_REG_HDDEVSEL[0] 	= 0xA0;
  3669                        ;
  3670                        ;	//k_ide_isbusy();
  3671                        ;	//k_ide_isready();
  3672                        ;
  3673                        ;
  3674                        ;	k_ide_isready();
  3675                        	.line	930
  3676 06:98A6: 22 90 90 06  	jsl	~~k_ide_isready
  3677                        ;
  3678                        ;	FX_ATA_REG_HDDEVSEL[0] 	= (cmd | (UCHAR)((lba >>
                     24 & 0x0F)));
  3679                        	.line	932
  3680 06:98AA: D4 14        	pei	<L82+lba_0+2
  3681 06:98AC: D4 12        	pei	<L82+lba_0
  3682 06:98AE: A9 18 00     	lda	#$18
  3683                        	xref	~~~llsr
  3684 06:98B1: 22 xx xx xx  	jsl	~~~llsr
  3685 06:98B5: 85 01        	sta	<R0
  3686 06:98B7: 86 03        	stx	<R0+2
  3687 06:98B9: A5 01        	lda	<R0
  3688 06:98BB: 29 0F 00     	and	#<$f
  3689 06:98BE: 85 05        	sta	<R1
  3690 06:98C0: 64 07        	stz	<R1+2
  3691 06:98C2: E2 20        	sep	#$20
  3692                        	longa	off
  3693 06:98C4: A5 0A        	lda	<L83+cmd_1
  3694 06:98C6: 05 05        	ora	<R1
  3695 06:98C8: 8F 36 E8 AF  	sta	>11528246
  3696 06:98CC: C2 20        	rep	#$20
  3697                        	longa	on
  3698                        ;
  3699                        ;
  3700                        ;
  3701                        ;	FX_ATA_REG_FEATURES[0] 	= 0x00;
  3702                        	.line	936
  3703 06:98CE: E2 20        	sep	#$20
  3704                        	longa	off
  3705 06:98D0: A9 00        	lda	#$0
  3706 06:98D2: 8F 31 E8 AF  	sta	>11528241
  3707 06:98D6: C2 20        	rep	#$20
  3708                        	longa	on
  3709                        ;	FX_ATA_REG_SECCOUNT0[0] = count;
  3710                        	.line	937
  3711 06:98D8: E2 20        	sep	#$20
  3712                        	longa	off
  3713 06:98DA: A5 16        	lda	<L82+count_0
  3714 06:98DC: 8F 32 E8 AF  	sta	>11528242
  3715 06:98E0: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 73


  3716                        	longa	on
  3717                        ;	FX_ATA_REG_LBA0[0] 		= (UCHAR)((lba))
                    ;
  3718                        	.line	938
  3719 06:98E2: E2 20        	sep	#$20
  3720                        	longa	off
  3721 06:98E4: A5 12        	lda	<L82+lba_0
  3722 06:98E6: 8F 33 E8 AF  	sta	>11528243
  3723 06:98EA: C2 20        	rep	#$20
  3724                        	longa	on
  3725                        ;	FX_ATA_REG_LBA1[0] 		= (UCHAR)((lba) 
                    >> 8);
  3726                        	.line	939
  3727 06:98EC: D4 14        	pei	<L82+lba_0+2
  3728 06:98EE: D4 12        	pei	<L82+lba_0
  3729 06:98F0: A9 08 00     	lda	#$8
  3730                        	xref	~~~llsr
  3731 06:98F3: 22 xx xx xx  	jsl	~~~llsr
  3732 06:98F7: 85 01        	sta	<R0
  3733 06:98F9: 86 03        	stx	<R0+2
  3734 06:98FB: E2 20        	sep	#$20
  3735                        	longa	off
  3736 06:98FD: A5 01        	lda	<R0
  3737 06:98FF: 8F 34 E8 AF  	sta	>11528244
  3738 06:9903: C2 20        	rep	#$20
  3739                        	longa	on
  3740                        ;	FX_ATA_REG_LBA2[0] 		= (UCHAR)((lba) 
                    >> 16);
  3741                        	.line	940
  3742 06:9905: D4 14        	pei	<L82+lba_0+2
  3743 06:9907: D4 12        	pei	<L82+lba_0
  3744 06:9909: A9 10 00     	lda	#$10
  3745                        	xref	~~~llsr
  3746 06:990C: 22 xx xx xx  	jsl	~~~llsr
  3747 06:9910: 85 01        	sta	<R0
  3748 06:9912: 86 03        	stx	<R0+2
  3749 06:9914: E2 20        	sep	#$20
  3750                        	longa	off
  3751 06:9916: A5 01        	lda	<R0
  3752 06:9918: 8F 35 E8 AF  	sta	>11528245
  3753 06:991C: C2 20        	rep	#$20
  3754                        	longa	on
  3755                        ;
  3756                        ;	FX_ATA_REG_COMMAND[0] 	= ATA_CMD_READ_PIO;
  3757                        	.line	942
  3758 06:991E: E2 20        	sep	#$20
  3759                        	longa	off
  3760 06:9920: A9 20        	lda	#$20
  3761 06:9922: 8F 37 E8 AF  	sta	>11528247
  3762 06:9926: C2 20        	rep	#$20
  3763                        	longa	on
  3764                        ;
  3765                        ;	k_debug_bits("FX_ATA_REG_SECCOUNT0:",count);
  3766                        	.line	944
  3767 06:9928: D4 16        	pei	<L82+count_0
  3768 06:992A: F4 xx xx     	pea	#^L81+19
  3769 06:992D: F4 xx xx     	pea	#<L81+19
  3770 06:9930: 22 xx xx xx  	jsl	~~k_debug_bits
  Sat Jul 10 2021  1:15                                                Page 74


  3771                        ;	k_debug_bits("FX_ATA_REG_HDDEVSEL:",(cmd | (UCHA
                    R)((lba >> 24 & 0x0F))));
  3772                        	.line	945
  3773 06:9934: D4 14        	pei	<L82+lba_0+2
  3774 06:9936: D4 12        	pei	<L82+lba_0
  3775 06:9938: A9 18 00     	lda	#$18
  3776                        	xref	~~~llsr
  3777 06:993B: 22 xx xx xx  	jsl	~~~llsr
  3778 06:993F: 85 01        	sta	<R0
  3779 06:9941: 86 03        	stx	<R0+2
  3780 06:9943: A5 01        	lda	<R0
  3781 06:9945: 29 0F 00     	and	#<$f
  3782 06:9948: 85 05        	sta	<R1
  3783 06:994A: 64 07        	stz	<R1+2
  3784 06:994C: A5 05        	lda	<R1
  3785 06:994E: 29 FF 00     	and	#$ff
  3786 06:9951: 85 01        	sta	<R0
  3787 06:9953: A5 0A        	lda	<L83+cmd_1
  3788 06:9955: 29 FF 00     	and	#$ff
  3789 06:9958: 85 05        	sta	<R1
  3790 06:995A: A5 05        	lda	<R1
  3791 06:995C: 05 01        	ora	<R0
  3792 06:995E: 48           	pha
  3793 06:995F: F4 xx xx     	pea	#^L81+41
  3794 06:9962: F4 xx xx     	pea	#<L81+41
  3795 06:9965: 22 xx xx xx  	jsl	~~k_debug_bits
  3796                        ;	k_debug_bits("FX_ATA_REG_LBA0:",(UCHAR)((lba)));
  3797                        	.line	946
  3798 06:9969: D4 12        	pei	<L82+lba_0
  3799 06:996B: F4 xx xx     	pea	#^L81+62
  3800 06:996E: F4 xx xx     	pea	#<L81+62
  3801 06:9971: 22 xx xx xx  	jsl	~~k_debug_bits
  3802                        ;	k_debug_bits("FX_ATA_REG_LBA1:",(UCHAR)((lba) >>
                     8));
  3803                        	.line	947
  3804 06:9975: D4 14        	pei	<L82+lba_0+2
  3805 06:9977: D4 12        	pei	<L82+lba_0
  3806 06:9979: A9 08 00     	lda	#$8
  3807                        	xref	~~~llsr
  3808 06:997C: 22 xx xx xx  	jsl	~~~llsr
  3809 06:9980: 85 01        	sta	<R0
  3810 06:9982: 86 03        	stx	<R0+2
  3811 06:9984: D4 01        	pei	<R0
  3812 06:9986: F4 xx xx     	pea	#^L81+79
  3813 06:9989: F4 xx xx     	pea	#<L81+79
  3814 06:998C: 22 xx xx xx  	jsl	~~k_debug_bits
  3815                        ;	k_debug_bits("FX_ATA_REG_LBA2:",(UCHAR)((lba) >>
                     16));
  3816                        	.line	948
  3817 06:9990: D4 14        	pei	<L82+lba_0+2
  3818 06:9992: D4 12        	pei	<L82+lba_0
  3819 06:9994: A9 10 00     	lda	#$10
  3820                        	xref	~~~llsr
  3821 06:9997: 22 xx xx xx  	jsl	~~~llsr
  3822 06:999B: 85 01        	sta	<R0
  3823 06:999D: 86 03        	stx	<R0+2
  3824 06:999F: D4 01        	pei	<R0
  3825 06:99A1: F4 xx xx     	pea	#^L81+96
  Sat Jul 10 2021  1:15                                                Page 75


  3826 06:99A4: F4 xx xx     	pea	#<L81+96
  3827 06:99A7: 22 xx xx xx  	jsl	~~k_debug_bits
  3828                        ;
  3829                        ;
  3830                        ;	k_ide_isbusy();
  3831                        	.line	951
  3832 06:99AB: 22 FE 8F 06  	jsl	~~k_ide_isbusy
  3833                        ;
  3834                        ;	k_ide_isdrq();
  3835                        	.line	953
  3836 06:99AF: 22 24 91 06  	jsl	~~k_ide_isdrq
  3837                        ;
  3838                        ;	/*
  3839                        ;	IDE_CMD_STAT[0] = 0x20;
  3840                        ;
  3841                        ;	k_ide_busy();
  3842                        ;
  3843                        ;	sts = IDE_CMD_STAT[0];
  3844                        ;	k_debug_hex("k_read_lba_sector:",sts);
  3845                        ;	*/
  3846                        ;
  3847                        ;	//k_ide_drive_ready_notbusy();
  3848                        ;	//k_ide_not_drq();
  3849                        ;
  3850                        ;
  3851                        ;	//k_ide_read_sector(readBuffer);
  3852                        ;
  3853                        ;	for(index = 0;index < 512;index+=2)
  3854                        	.line	970
  3855 06:99B3: 64 0D        	stz	<L83+index_1
  3856                        L10041:
  3857                        ;	{
  3858                        	.line	971
  3859                        ;		lo = IDE_DATA_LO[0];
  3860                        	.line	972
  3861 06:99B5: E2 20        	sep	#$20
  3862                        	longa	off
  3863 06:99B7: AF 38 E8 AF  	lda	>11528248
  3864 06:99BB: 85 0C        	sta	<L83+lo_1
  3865 06:99BD: C2 20        	rep	#$20
  3866                        	longa	on
  3867                        ;		hi = IDE_DATA_HI[0];
  3868                        	.line	973
  3869 06:99BF: E2 20        	sep	#$20
  3870                        	longa	off
  3871 06:99C1: AF 39 E8 AF  	lda	>11528249
  3872 06:99C5: 85 0B        	sta	<L83+hi_1
  3873 06:99C7: C2 20        	rep	#$20
  3874                        	longa	on
  3875                        ;		//k_debug_hex("k_ide_read_sector:lo:",lo
                    );
  3876                        ;		//k_debug_hex("k_ide_read_sector:hi:",hi
                    );
  3877                        ;		readBuffer[index] =   hi;
  3878                        	.line	976
  3879 06:99C9: E2 20        	sep	#$20
  3880                        	longa	off
  3881 06:99CB: A5 0B        	lda	<L83+hi_1
  Sat Jul 10 2021  1:15                                                Page 76


  3882 06:99CD: A4 0D        	ldy	<L83+index_1
  3883 06:99CF: 97 18        	sta	[<L82+readBuffer_0],Y
  3884 06:99D1: C2 20        	rep	#$20
  3885                        	longa	on
  3886                        ;		readBuffer[index+1] = lo;
  3887                        	.line	977
  3888 06:99D3: A5 0D        	lda	<L83+index_1
  3889 06:99D5: 1A           	ina
  3890 06:99D6: 85 01        	sta	<R0
  3891 06:99D8: E2 20        	sep	#$20
  3892                        	longa	off
  3893 06:99DA: A5 0C        	lda	<L83+lo_1
  3894 06:99DC: A4 01        	ldy	<R0
  3895 06:99DE: 97 18        	sta	[<L82+readBuffer_0],Y
  3896 06:99E0: C2 20        	rep	#$20
  3897                        	longa	on
  3898                        ;	}
  3899                        	.line	978
  3900                        L10039:
  3901 06:99E2: E6 0D        	inc	<L83+index_1
  3902 06:99E4: E6 0D        	inc	<L83+index_1
  3903 06:99E6: A5 0D        	lda	<L83+index_1
  3904 06:99E8: C9 00 02     	cmp	#<$200
  3905 06:99EB: B0 03        	bcs	L85
  3906 06:99ED: 82 C5 FF     	brl	L10041
  3907                        L85:
  3908                        L10040:
  3909                        ;
  3910                        ;
  3911                        ;
  3912                        ;	return;
  3913                        	.line	982
  3914                        L86:
  3915 06:99F0: A5 10        	lda	<L82+2
  3916 06:99F2: 85 1A        	sta	<L82+2+10
  3917 06:99F4: A5 0F        	lda	<L82+1
  3918 06:99F6: 85 19        	sta	<L82+1+10
  3919 06:99F8: 2B           	pld
  3920 06:99F9: 3B           	tsc
  3921 06:99FA: 18           	clc
  3922 06:99FB: 69 18 00     	adc	#L82+10
  3923 06:99FE: 1B           	tcs
  3924 06:99FF: 6B           	rtl
  3925                        ;}
  3926                        	.line	983
  3927                        	.endblock	983
  3928             0000000E   L82	equ	14
  3929             00000009   L83	equ	9
  3930 06:9A00:              	ends
  3931                        	efunc
  3932                        	.endfunc	983,9,14
  3933                        	.line	983
  3934                        	data
  3935                        L81:
  3936 00:0270: 6B 5F 72 65  	db	$6B,$5F,$72,$65,$61,$64,$5F,$6C,$62,$61,
                    $5F,$73,$65,$63,$74
       00:0274: 61 64 5F 6C 
       00:0278: 62 61 5F 73 
  Sat Jul 10 2021  1:15                                                Page 77


       00:027C: 65 63 74 
  3937 00:027F: 6F 72 3A 00  	db	$6F,$72,$3A,$00,$46,$58,$5F,$41,$54,$41,
                    $5F,$52,$45,$47,$5F
       00:0283: 46 58 5F 41 
       00:0287: 54 41 5F 52 
       00:028B: 45 47 5F 
  3938 00:028E: 53 45 43 43  	db	$53,$45,$43,$43,$4F,$55,$4E,$54,$30,$3A,
                    $00,$46,$58,$5F,$41
       00:0292: 4F 55 4E 54 
       00:0296: 30 3A 00 46 
       00:029A: 58 5F 41 
  3939 00:029D: 54 41 5F 52  	db	$54,$41,$5F,$52,$45,$47,$5F,$48,$44,$44,
                    $45,$56,$53,$45,$4C
       00:02A1: 45 47 5F 48 
       00:02A5: 44 44 45 56 
       00:02A9: 53 45 4C 
  3940 00:02AC: 3A 00 46 58  	db	$3A,$00,$46,$58,$5F,$41,$54,$41,$5F,$52,
                    $45,$47,$5F,$4C,$42
       00:02B0: 5F 41 54 41 
       00:02B4: 5F 52 45 47 
       00:02B8: 5F 4C 42 
  3941 00:02BB: 41 30 3A 00  	db	$41,$30,$3A,$00,$46,$58,$5F,$41,$54,$41,
                    $5F,$52,$45,$47,$5F
       00:02BF: 46 58 5F 41 
       00:02C3: 54 41 5F 52 
       00:02C7: 45 47 5F 
  3942 00:02CA: 4C 42 41 31  	db	$4C,$42,$41,$31,$3A,$00,$46,$58,$5F,$41,
                    $54,$41,$5F,$52,$45
       00:02CE: 3A 00 46 58 
       00:02D2: 5F 41 54 41 
       00:02D6: 5F 52 45 
  3943 00:02D9: 47 5F 4C 42  	db	$47,$5F,$4C,$42,$41,$32,$3A,$00
       00:02DD: 41 32 3A 00 
  3944 00:02E1:              	ends
  3945                        ;
  3946                        ;/**
  3947                        ; *
  3948                        ; */
  3949                        ;
  3950                        ;UCHAR k_read_hd_sector(unsigned long offset,LPCHA
                    R receiveBuffer)
  3951                        ;{
  3952                        	.line	989
  3953                        	.line	990
  3954                        	FXHDD
  3955                        	xdef	~~k_read_hd_sector
  3956                        	func
  3957                        	.function	990
  3958                        ~~k_read_hd_sector:
  3959                        	longa	on
  3960                        	longi	on
  3961 06:9A00: 3B           	tsc
  3962 06:9A01: 38           	sec
  3963 06:9A02: E9 04 00     	sbc	#L88
  3964 06:9A05: 1B           	tcs
  3965 06:9A06: 0B           	phd
  3966 06:9A07: 5B           	tcd
  3967             00000004   offset_0	set	4
  Sat Jul 10 2021  1:15                                                Page 78


  3968             00000008   receiveBuffer_0	set	8
  3969                        	.block	990
  3970                        ;	k_read_lba_sector(offset/512,1,receiveBuffer);
  3971                        	.sym	offset,4,18,6,32
  3972                        	.sym	receiveBuffer,8,142,6,32
  3973                        	.line	991
  3974 06:9A08: D4 0E        	pei	<L88+receiveBuffer_0+2
  3975 06:9A0A: D4 0C        	pei	<L88+receiveBuffer_0
  3976 06:9A0C: F4 01 00     	pea	#<$1
  3977 06:9A0F: D4 0A        	pei	<L88+offset_0+2
  3978 06:9A11: D4 08        	pei	<L88+offset_0
  3979 06:9A13: A9 09 00     	lda	#$9
  3980                        	xref	~~~llsr
  3981 06:9A16: 22 xx xx xx  	jsl	~~~llsr
  3982 06:9A1A: 85 01        	sta	<R0
  3983 06:9A1C: 86 03        	stx	<R0+2
  3984 06:9A1E: D4 03        	pei	<R0+2
  3985 06:9A20: D4 01        	pei	<R0
  3986 06:9A22: 22 F1 96 06  	jsl	~~k_read_lba_sector
  3987                        ;	k_debug_byte_array("k_read_hd_sector:\r\n",recei
                    veBuffer,512);
  3988                        	.line	992
  3989 06:9A26: F4 00 00     	pea	#^$200
  3990 06:9A29: F4 00 02     	pea	#<$200
  3991 06:9A2C: D4 0E        	pei	<L88+receiveBuffer_0+2
  3992 06:9A2E: D4 0C        	pei	<L88+receiveBuffer_0
  3993 06:9A30: F4 xx xx     	pea	#^L87
  3994 06:9A33: F4 xx xx     	pea	#<L87
  3995 06:9A36: 22 xx xx xx  	jsl	~~k_debug_byte_array
  3996                        ;	return 0;
  3997                        	.line	993
  3998 06:9A3A: A9 00 00     	lda	#$0
  3999                        L91:
  4000 06:9A3D: A8           	tay
  4001 06:9A3E: A5 06        	lda	<L88+2
  4002 06:9A40: 85 0E        	sta	<L88+2+8
  4003 06:9A42: A5 05        	lda	<L88+1
  4004 06:9A44: 85 0D        	sta	<L88+1+8
  4005 06:9A46: 2B           	pld
  4006 06:9A47: 3B           	tsc
  4007 06:9A48: 18           	clc
  4008 06:9A49: 69 0C 00     	adc	#L88+8
  4009 06:9A4C: 1B           	tcs
  4010 06:9A4D: 98           	tya
  4011 06:9A4E: 6B           	rtl
  4012                        ;}
  4013                        	.line	994
  4014                        	.endblock	994
  4015             00000004   L88	equ	4
  4016             00000005   L89	equ	5
  4017 06:9A4F:              	ends
  4018                        	efunc
  4019                        	.endfunc	994,5,4
  4020                        	.line	994
  4021                        	data
  4022                        L87:
  4023 00:02E1: 6B 5F 72 65  	db	$6B,$5F,$72,$65,$61,$64,$5F,$68,$64,$5F,
                    $73,$65,$63,$74,$6F
  Sat Jul 10 2021  1:15                                                Page 79


       00:02E5: 61 64 5F 68 
       00:02E9: 64 5F 73 65 
       00:02ED: 63 74 6F 
  4024 00:02F0: 72 3A 0D 0A  	db	$72,$3A,$0D,$0A,$00
       00:02F4: 00 
  4025 00:02F5:              	ends
  4026                        ;
  4027                        ;
  4028                        ;void k_ide_busy(void)
  4029                        ;{
  4030                        	.line	997
  4031                        	.line	998
  4032                        	FXHDD
  4033                        	xdef	~~k_ide_busy
  4034                        	func
  4035                        	.function	998
  4036                        ~~k_ide_busy:
  4037                        	longa	on
  4038                        	longi	on
  4039 06:9A4F: 3B           	tsc
  4040 06:9A50: 38           	sec
  4041 06:9A51: E9 03 00     	sbc	#L93
  4042 06:9A54: 1B           	tcs
  4043 06:9A55: 0B           	phd
  4044 06:9A56: 5B           	tcd
  4045                        	.block	998
  4046                        ;	INT timeout = 128;
  4047                        ;	UCHAR sts = 0x80;
  4048                        ;
  4049                        ;	k_debug_hex("k_ide_busy:",0);
  4050             00000000   timeout_1	set	0
  4051             00000002   sts_1	set	2
  4052                        	.sym	timeout,0,5,1,16
  4053                        	.sym	sts,2,14,1,8
  4054 06:9A57: A9 80 00     	lda	#$80
  4055 06:9A5A: 85 01        	sta	<L94+timeout_1
  4056 06:9A5C: E2 20        	sep	#$20
  4057                        	longa	off
  4058 06:9A5E: A9 80        	lda	#$80
  4059 06:9A60: 85 03        	sta	<L94+sts_1
  4060 06:9A62: C2 20        	rep	#$20
  4061                        	longa	on
  4062                        	.line	1002
  4063 06:9A64: F4 00 00     	pea	#<$0
  4064 06:9A67: F4 xx xx     	pea	#^L92
  4065 06:9A6A: F4 xx xx     	pea	#<L92
  4066 06:9A6D: 22 xx xx xx  	jsl	~~k_debug_hex
  4067                        ;
  4068                        ;	do
  4069                        	.line	1004
  4070                        L10044:
  4071                        ;	{
  4072                        	.line	1005
  4073                        ;		sts = IDE_CMD_STAT[0];
  4074                        	.line	1006
  4075 06:9A71: E2 20        	sep	#$20
  4076                        	longa	off
  4077 06:9A73: AF 37 E8 AF  	lda	>11528247
  Sat Jul 10 2021  1:15                                                Page 80


  4078 06:9A77: 85 03        	sta	<L94+sts_1
  4079 06:9A79: C2 20        	rep	#$20
  4080                        	longa	on
  4081                        ;		k_debug_hex("k_ide_busy:sts:",sts);
  4082                        	.line	1007
  4083 06:9A7B: D4 03        	pei	<L94+sts_1
  4084 06:9A7D: F4 xx xx     	pea	#^L92+12
  4085 06:9A80: F4 xx xx     	pea	#<L92+12
  4086 06:9A83: 22 xx xx xx  	jsl	~~k_debug_hex
  4087                        ;		if(sts&ATA_SR_ERR)
  4088                        	.line	1008
  4089                        ;		{
  4090 06:9A87: E2 20        	sep	#$20
  4091                        	longa	off
  4092 06:9A89: A5 03        	lda	<L94+sts_1
  4093 06:9A8B: 29 01        	and	#<$1
  4094 06:9A8D: C2 20        	rep	#$20
  4095                        	longa	on
  4096 06:9A8F: D0 03        	bne	L96
  4097 06:9A91: 82 0F 00     	brl	L10045
  4098                        L96:
  4099                        	.line	1009
  4100                        ;			k_debug_hex("k_ide_busy:ERR:",st
                    s);
  4101                        	.line	1010
  4102 06:9A94: D4 03        	pei	<L94+sts_1
  4103 06:9A96: F4 xx xx     	pea	#^L92+28
  4104 06:9A99: F4 xx xx     	pea	#<L92+28
  4105 06:9A9C: 22 xx xx xx  	jsl	~~k_debug_hex
  4106                        ;			break;
  4107                        	.line	1011
  4108 06:9AA0: 82 1F 00     	brl	L10043
  4109                        ;		}
  4110                        	.line	1012
  4111                        ;		timeout--;
  4112                        L10045:
  4113                        	.line	1013
  4114 06:9AA3: C6 01        	dec	<L94+timeout_1
  4115                        ;	}while((sts&0x80) && timeout > 0);
  4116                        	.line	1014
  4117                        L10042:
  4118 06:9AA5: E2 20        	sep	#$20
  4119                        	longa	off
  4120 06:9AA7: A5 03        	lda	<L94+sts_1
  4121 06:9AA9: 29 80        	and	#<$80
  4122 06:9AAB: C2 20        	rep	#$20
  4123                        	longa	on
  4124 06:9AAD: D0 03        	bne	L98
  4125 06:9AAF: 82 10 00     	brl	L97
  4126                        L98:
  4127 06:9AB2: 38           	sec
  4128 06:9AB3: A9 00 00     	lda	#$0
  4129 06:9AB6: E5 01        	sbc	<L94+timeout_1
  4130 06:9AB8: 70 03        	bvs	L99
  4131 06:9ABA: 49 00 80     	eor	#$8000
  4132                        L99:
  4133 06:9ABD: 30 03        	bmi	L100
  4134 06:9ABF: 82 AF FF     	brl	L10044
  Sat Jul 10 2021  1:15                                                Page 81


  4135                        L100:
  4136                        L97:
  4137                        L10043:
  4138                        ;
  4139                        ;	return;
  4140                        	.line	1016
  4141                        L101:
  4142 06:9AC2: 2B           	pld
  4143 06:9AC3: 3B           	tsc
  4144 06:9AC4: 18           	clc
  4145 06:9AC5: 69 03 00     	adc	#L93
  4146 06:9AC8: 1B           	tcs
  4147 06:9AC9: 6B           	rtl
  4148                        ;}
  4149                        	.line	1017
  4150                        	.endblock	1017
  4151             00000003   L93	equ	3
  4152             00000001   L94	equ	1
  4153 06:9ACA:              	ends
  4154                        	efunc
  4155                        	.endfunc	1017,1,3
  4156                        	.line	1017
  4157                        	data
  4158                        L92:
  4159 00:02F5: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$62,$75,$73,$79,
                    $3A,$00,$6B,$5F,$69
       00:02F9: 65 5F 62 75 
       00:02FD: 73 79 3A 00 
       00:0301: 6B 5F 69 
  4160 00:0304: 64 65 5F 62  	db	$64,$65,$5F,$62,$75,$73,$79,$3A,$73,$74,
                    $73,$3A,$00,$6B,$5F
       00:0308: 75 73 79 3A 
       00:030C: 73 74 73 3A 
       00:0310: 00 6B 5F 
  4161 00:0313: 69 64 65 5F  	db	$69,$64,$65,$5F,$62,$75,$73,$79,$3A,$45,
                    $52,$52,$3A,$00
       00:0317: 62 75 73 79 
       00:031B: 3A 45 52 52 
       00:031F: 3A 00 
  4162 00:0321:              	ends
  4163                        ;
  4164                        ;void k_ide_drive_ready(void)
  4165                        ;{
  4166                        	.line	1019
  4167                        	.line	1020
  4168                        	FXHDD
  4169                        	xdef	~~k_ide_drive_ready
  4170                        	func
  4171                        	.function	1020
  4172                        ~~k_ide_drive_ready:
  4173                        	longa	on
  4174                        	longi	on
  4175 06:9ACA: 3B           	tsc
  4176 06:9ACB: 38           	sec
  4177 06:9ACC: E9 03 00     	sbc	#L103
  4178 06:9ACF: 1B           	tcs
  4179 06:9AD0: 0B           	phd
  4180 06:9AD1: 5B           	tcd
  Sat Jul 10 2021  1:15                                                Page 82


  4181                        	.block	1020
  4182                        ;	UCHAR sts = 0x00;
  4183                        ;	INT timeout = 255;
  4184                        ;	do
  4185             00000000   sts_1	set	0
  4186             00000001   timeout_1	set	1
  4187                        	.sym	sts,0,14,1,8
  4188                        	.sym	timeout,1,5,1,16
  4189 06:9AD2: E2 20        	sep	#$20
  4190                        	longa	off
  4191 06:9AD4: 64 01        	stz	<L104+sts_1
  4192 06:9AD6: C2 20        	rep	#$20
  4193                        	longa	on
  4194 06:9AD8: A9 FF 00     	lda	#$ff
  4195 06:9ADB: 85 02        	sta	<L104+timeout_1
  4196                        	.line	1023
  4197                        L10048:
  4198                        ;	{
  4199                        	.line	1024
  4200                        ;		sts = IDE_CMD_STAT[0];
  4201                        	.line	1025
  4202 06:9ADD: E2 20        	sep	#$20
  4203                        	longa	off
  4204 06:9ADF: AF 37 E8 AF  	lda	>11528247
  4205 06:9AE3: 85 01        	sta	<L104+sts_1
  4206 06:9AE5: C2 20        	rep	#$20
  4207                        	longa	on
  4208                        ;		k_debug_bits("k_ide_drive_ready:sts:",st
                    s);
  4209                        	.line	1026
  4210 06:9AE7: D4 01        	pei	<L104+sts_1
  4211 06:9AE9: F4 xx xx     	pea	#^L102
  4212 06:9AEC: F4 xx xx     	pea	#<L102
  4213 06:9AEF: 22 xx xx xx  	jsl	~~k_debug_bits
  4214                        ;		if(sts&ATA_SR_ERR)
  4215                        	.line	1027
  4216                        ;		{
  4217 06:9AF3: E2 20        	sep	#$20
  4218                        	longa	off
  4219 06:9AF5: A5 01        	lda	<L104+sts_1
  4220 06:9AF7: 29 01        	and	#<$1
  4221 06:9AF9: C2 20        	rep	#$20
  4222                        	longa	on
  4223 06:9AFB: D0 03        	bne	L106
  4224 06:9AFD: 82 0F 00     	brl	L10049
  4225                        L106:
  4226                        	.line	1028
  4227                        ;			k_debug_hex("k_ide_drive_ready:E
                    RR:",sts);
  4228                        	.line	1029
  4229 06:9B00: D4 01        	pei	<L104+sts_1
  4230 06:9B02: F4 xx xx     	pea	#^L102+23
  4231 06:9B05: F4 xx xx     	pea	#<L102+23
  4232 06:9B08: 22 xx xx xx  	jsl	~~k_debug_hex
  4233                        ;			break;
  4234                        	.line	1030
  4235 06:9B0C: 82 1F 00     	brl	L10047
  4236                        ;		}
  Sat Jul 10 2021  1:15                                                Page 83


  4237                        	.line	1031
  4238                        ;		timeout--;
  4239                        L10049:
  4240                        	.line	1032
  4241 06:9B0F: C6 02        	dec	<L104+timeout_1
  4242                        ;	}
  4243                        	.line	1033
  4244                        ;	while((sts&0x40) && timeout > 0);
  4245                        L10046:
  4246 06:9B11: E2 20        	sep	#$20
  4247                        	longa	off
  4248 06:9B13: A5 01        	lda	<L104+sts_1
  4249 06:9B15: 29 40        	and	#<$40
  4250 06:9B17: C2 20        	rep	#$20
  4251                        	longa	on
  4252 06:9B19: D0 03        	bne	L108
  4253 06:9B1B: 82 10 00     	brl	L107
  4254                        L108:
  4255 06:9B1E: 38           	sec
  4256 06:9B1F: A9 00 00     	lda	#$0
  4257 06:9B22: E5 02        	sbc	<L104+timeout_1
  4258 06:9B24: 70 03        	bvs	L109
  4259 06:9B26: 49 00 80     	eor	#$8000
  4260                        L109:
  4261 06:9B29: 30 03        	bmi	L110
  4262 06:9B2B: 82 AF FF     	brl	L10048
  4263                        L110:
  4264                        L107:
  4265                        L10047:
  4266                        ;
  4267                        ;	return;
  4268                        	.line	1036
  4269                        L111:
  4270 06:9B2E: 2B           	pld
  4271 06:9B2F: 3B           	tsc
  4272 06:9B30: 18           	clc
  4273 06:9B31: 69 03 00     	adc	#L103
  4274 06:9B34: 1B           	tcs
  4275 06:9B35: 6B           	rtl
  4276                        ;}
  4277                        	.line	1037
  4278                        	.endblock	1037
  4279             00000003   L103	equ	3
  4280             00000001   L104	equ	1
  4281 06:9B36:              	ends
  4282                        	efunc
  4283                        	.endfunc	1037,1,3
  4284                        	.line	1037
  4285                        	data
  4286                        L102:
  4287 00:0321: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$64,$72,$69,$76,
                    $65,$5F,$72,$65,$61
       00:0325: 65 5F 64 72 
       00:0329: 69 76 65 5F 
       00:032D: 72 65 61 
  4288 00:0330: 64 79 3A 73  	db	$64,$79,$3A,$73,$74,$73,$3A,$00,$6B,$5F,
                    $69,$64,$65,$5F,$64
       00:0334: 74 73 3A 00 
  Sat Jul 10 2021  1:15                                                Page 84


       00:0338: 6B 5F 69 64 
       00:033C: 65 5F 64 
  4289 00:033F: 72 69 76 65  	db	$72,$69,$76,$65,$5F,$72,$65,$61,$64,$79,
                    $3A,$45,$52,$52,$3A
       00:0343: 5F 72 65 61 
       00:0347: 64 79 3A 45 
       00:034B: 52 52 3A 
  4290 00:034E: 00           	db	$00
  4291 00:034F:              	ends
  4292                        ;
  4293                        ;
  4294                        ;void k_ide_drive_ready_notbusy(void)
  4295                        ;{
  4296                        	.line	1040
  4297                        	.line	1041
  4298                        	FXHDD
  4299                        	xdef	~~k_ide_drive_ready_notbusy
  4300                        	func
  4301                        	.function	1041
  4302                        ~~k_ide_drive_ready_notbusy:
  4303                        	longa	on
  4304                        	longi	on
  4305 06:9B36: 3B           	tsc
  4306 06:9B37: 38           	sec
  4307 06:9B38: E9 00 00     	sbc	#L113
  4308 06:9B3B: 1B           	tcs
  4309 06:9B3C: 0B           	phd
  4310 06:9B3D: 5B           	tcd
  4311                        	.block	1041
  4312                        ;
  4313                        ;
  4314                        ;	k_ide_drive_ready();
  4315                        	.line	1044
  4316 06:9B3E: 22 CA 9A 06  	jsl	~~k_ide_drive_ready
  4317                        ;	k_ide_busy();
  4318                        	.line	1045
  4319 06:9B42: 22 4F 9A 06  	jsl	~~k_ide_busy
  4320                        ;
  4321                        ;
  4322                        ;	return;
  4323                        	.line	1048
  4324                        L116:
  4325 06:9B46: 2B           	pld
  4326 06:9B47: 3B           	tsc
  4327 06:9B48: 18           	clc
  4328 06:9B49: 69 00 00     	adc	#L113
  4329 06:9B4C: 1B           	tcs
  4330 06:9B4D: 6B           	rtl
  4331                        ;}
  4332                        	.line	1049
  4333                        	.endblock	1049
  4334             00000000   L113	equ	0
  4335             00000001   L114	equ	1
  4336 06:9B4E:              	ends
  4337                        	efunc
  4338                        	.endfunc	1049,1,0
  4339                        	.line	1049
  4340                        ;
  Sat Jul 10 2021  1:15                                                Page 85


  4341                        ;/*
  4342                        ;;
  4343                        ;;////////////////////////////////////////////////
                    ////////
  4344                        ;; IDE_NOT_DRQ
  4345                        ;; Indicates that the drive is ready to transfer w
                    ord or byte of data
  4346                        ;; Inputs:
  4347                        ;;  None
  4348                        ;; Affects:
  4349                        ;;   A
  4350                        ;;////////////////////////////////////////////////
                    /////////
  4351                        ;*/
  4352                        ;void k_ide_not_drq(void)
  4353                        ;{
  4354                        	.line	1062
  4355                        	.line	1063
  4356                        	FXHDD
  4357                        	xdef	~~k_ide_not_drq
  4358                        	func
  4359                        	.function	1063
  4360                        ~~k_ide_not_drq:
  4361                        	longa	on
  4362                        	longi	on
  4363 06:9B4E: 3B           	tsc
  4364 06:9B4F: 38           	sec
  4365 06:9B50: E9 01 00     	sbc	#L117
  4366 06:9B53: 1B           	tcs
  4367 06:9B54: 0B           	phd
  4368 06:9B55: 5B           	tcd
  4369                        	.block	1063
  4370                        ;	UCHAR sts = 0x00;
  4371                        ;
  4372                        ;	do
  4373             00000000   sts_1	set	0
  4374                        	.sym	sts,0,14,1,8
  4375 06:9B56: E2 20        	sep	#$20
  4376                        	longa	off
  4377 06:9B58: 64 01        	stz	<L118+sts_1
  4378 06:9B5A: C2 20        	rep	#$20
  4379                        	longa	on
  4380                        	.line	1066
  4381                        L10052:
  4382                        ;	{
  4383                        	.line	1067
  4384                        ;		sts = IDE_CMD_STAT[0];
  4385                        	.line	1068
  4386 06:9B5C: E2 20        	sep	#$20
  4387                        	longa	off
  4388 06:9B5E: AF 37 E8 AF  	lda	>11528247
  4389 06:9B62: 85 01        	sta	<L118+sts_1
  4390 06:9B64: C2 20        	rep	#$20
  4391                        	longa	on
  4392                        ;		k_debug_hex("k_ide_not_drq:sts:",sts);
  4393                        	.line	1069
  4394 06:9B66: D4 01        	pei	<L118+sts_1
  4395 06:9B68: F4 xx xx     	pea	#^L112
  Sat Jul 10 2021  1:15                                                Page 86


  4396 06:9B6B: F4 xx xx     	pea	#<L112
  4397 06:9B6E: 22 xx xx xx  	jsl	~~k_debug_hex
  4398                        ;		if(sts == ATA_SR_ERR)
  4399                        	.line	1070
  4400                        ;			break;
  4401 06:9B72: E2 20        	sep	#$20
  4402                        	longa	off
  4403 06:9B74: A5 01        	lda	<L118+sts_1
  4404 06:9B76: C9 01        	cmp	#<$1
  4405 06:9B78: C2 20        	rep	#$20
  4406                        	longa	on
  4407 06:9B7A: D0 03        	bne	L120
  4408 06:9B7C: 82 0D 00     	brl	L10051
  4409                        L120:
  4410                        ;	}
  4411                        	.line	1072
  4412                        ;	while(sts & ATA_SR_DRQ);
  4413                        L10050:
  4414 06:9B7F: E2 20        	sep	#$20
  4415                        	longa	off
  4416 06:9B81: A5 01        	lda	<L118+sts_1
  4417 06:9B83: 29 08        	and	#<$8
  4418 06:9B85: C2 20        	rep	#$20
  4419                        	longa	on
  4420 06:9B87: F0 03        	beq	L121
  4421 06:9B89: 82 D0 FF     	brl	L10052
  4422                        L121:
  4423                        L10051:
  4424                        ;
  4425                        ;	return;
  4426                        	.line	1075
  4427                        L122:
  4428 06:9B8C: 2B           	pld
  4429 06:9B8D: 3B           	tsc
  4430 06:9B8E: 18           	clc
  4431 06:9B8F: 69 01 00     	adc	#L117
  4432 06:9B92: 1B           	tcs
  4433 06:9B93: 6B           	rtl
  4434                        ;}
  4435                        	.line	1076
  4436                        	.endblock	1076
  4437             00000001   L117	equ	1
  4438             00000001   L118	equ	1
  4439 06:9B94:              	ends
  4440                        	efunc
  4441                        	.endfunc	1076,1,1
  4442                        	.line	1076
  4443                        	data
  4444                        L112:
  4445 00:034F: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$6E,$6F,$74,$5F,
                    $64,$72,$71,$3A,$73
       00:0353: 65 5F 6E 6F 
       00:0357: 74 5F 64 72 
       00:035B: 71 3A 73 
  4446 00:035E: 74 73 3A 00  	db	$74,$73,$3A,$00
  4447 00:0362:              	ends
  4448                        ;
  4449                        ;/*
  Sat Jul 10 2021  1:15                                                Page 87


  4450                        ;			  ;
  4451                        ;;////////////////////////////////////////////////
                    ////////
  4452                        ;; IDE_GET_512BYTES
  4453                        ;; Fetch the Data from the Drive and Save it in th
                    e SDCard Data Buffer
  4454                        ;; Inputs:
  4455                        ;;  None
  4456                        ;; Affects:
  4457                        ;;   None
  4458                        ;;////////////////////////////////////////////////
                    /////////
  4459                        ;IDE_GET_512BYTES
  4460                        ;              setaxl
  4461                        ;              LDA IDE_DATA_LO
  4462                        ;              LDX #$0000
  4463                        ;IDE_GET_INFO_KEEP_FETCHING
  4464                        ;              LDA IDE_DATA_LO
  4465                        ;              STA SDOS_BLK_BEGIN, X
  4466                        ;              ;LDA IDE_DATA_HI
  4467                        ;              ;INX
  4468                        ;              ;STA SDOS_BLK_BEGIN, x
  4469                        ;              INX
  4470                        ;              INX
  4471                        ;              CPX #$0200
  4472                        ;              BNE IDE_GET_INFO_KEEP_FETCHING
  4473                        ;              RTL
  4474                        ;
  4475                        ;*/
  4476                        ;LPCHAR k_ide_read_sector(LPCHAR readBuffer)
  4477                        ;{
  4478                        	.line	1105
  4479                        	.line	1106
  4480                        	FXHDD
  4481                        	xdef	~~k_ide_read_sector
  4482                        	func
  4483                        	.function	1106
  4484                        ~~k_ide_read_sector:
  4485                        	longa	on
  4486                        	longi	on
  4487 06:9B94: 3B           	tsc
  4488 06:9B95: 38           	sec
  4489 06:9B96: E9 08 00     	sbc	#L124
  4490 06:9B99: 1B           	tcs
  4491 06:9B9A: 0B           	phd
  4492 06:9B9B: 5B           	tcd
  4493             00000004   readBuffer_0	set	4
  4494                        	.block	1106
  4495                        ;	UINT index = 0;
  4496                        ;	UCHAR lo;
  4497                        ;	UCHAR hi;
  4498                        ;
  4499                        ;	//UINT *pword = (UINT*)readBuffer;
  4500                        ;
  4501                        ;	//k_ide_poll(0);
  4502                        ;	//k_ide_not_drq();
  4503                        ;	k_debug_integer("k_ide_read_sector:sts:",512);
  4504             00000000   index_1	set	0
  Sat Jul 10 2021  1:15                                                Page 88


  4505             00000002   lo_1	set	2
  4506             00000003   hi_1	set	3
  4507                        	.sym	index,0,16,1,16
  4508                        	.sym	lo,2,14,1,8
  4509                        	.sym	hi,3,14,1,8
  4510                        	.sym	readBuffer,4,142,6,32
  4511 06:9B9C: 64 05        	stz	<L125+index_1
  4512                        	.line	1115
  4513 06:9B9E: F4 00 02     	pea	#<$200
  4514 06:9BA1: F4 xx xx     	pea	#^L123
  4515 06:9BA4: F4 xx xx     	pea	#<L123
  4516 06:9BA7: 22 xx xx xx  	jsl	~~k_debug_integer
  4517                        ;
  4518                        ;	for(index = 0;index < 512;index+=2)
  4519                        	.line	1117
  4520 06:9BAB: 64 05        	stz	<L125+index_1
  4521                        L10055:
  4522                        ;	{
  4523                        	.line	1118
  4524                        ;		lo = IDE_DATA_LO[0];
  4525                        	.line	1119
  4526 06:9BAD: E2 20        	sep	#$20
  4527                        	longa	off
  4528 06:9BAF: AF 38 E8 AF  	lda	>11528248
  4529 06:9BB3: 85 07        	sta	<L125+lo_1
  4530 06:9BB5: C2 20        	rep	#$20
  4531                        	longa	on
  4532                        ;		hi = IDE_DATA_HI[0];
  4533                        	.line	1120
  4534 06:9BB7: E2 20        	sep	#$20
  4535                        	longa	off
  4536 06:9BB9: AF 39 E8 AF  	lda	>11528249
  4537 06:9BBD: 85 08        	sta	<L125+hi_1
  4538 06:9BBF: C2 20        	rep	#$20
  4539                        	longa	on
  4540                        ;		//k_debug_hex("k_ide_read_sector:lo:",lo
                    );
  4541                        ;		//k_debug_hex("k_ide_read_sector:hi:",hi
                    );
  4542                        ;		readBuffer[index] =   lo;
  4543                        	.line	1123
  4544 06:9BC1: E2 20        	sep	#$20
  4545                        	longa	off
  4546 06:9BC3: A5 07        	lda	<L125+lo_1
  4547 06:9BC5: A4 05        	ldy	<L125+index_1
  4548 06:9BC7: 97 0C        	sta	[<L124+readBuffer_0],Y
  4549 06:9BC9: C2 20        	rep	#$20
  4550                        	longa	on
  4551                        ;		readBuffer[index+1] = hi;
  4552                        	.line	1124
  4553 06:9BCB: A5 05        	lda	<L125+index_1
  4554 06:9BCD: 1A           	ina
  4555 06:9BCE: 85 01        	sta	<R0
  4556 06:9BD0: E2 20        	sep	#$20
  4557                        	longa	off
  4558 06:9BD2: A5 08        	lda	<L125+hi_1
  4559 06:9BD4: A4 01        	ldy	<R0
  4560 06:9BD6: 97 0C        	sta	[<L124+readBuffer_0],Y
  Sat Jul 10 2021  1:15                                                Page 89


  4561 06:9BD8: C2 20        	rep	#$20
  4562                        	longa	on
  4563                        ;	}
  4564                        	.line	1125
  4565                        L10053:
  4566 06:9BDA: E6 05        	inc	<L125+index_1
  4567 06:9BDC: E6 05        	inc	<L125+index_1
  4568 06:9BDE: A5 05        	lda	<L125+index_1
  4569 06:9BE0: C9 00 02     	cmp	#<$200
  4570 06:9BE3: B0 03        	bcs	L127
  4571 06:9BE5: 82 C5 FF     	brl	L10055
  4572                        L127:
  4573                        L10054:
  4574                        ;
  4575                        ;	/*
  4576                        ;	for(index = 0;index < 256;index+=2)
  4577                        ;	{
  4578                        ;		lo = IDE_DATA_LO[0];
  4579                        ;		hi = IDE_DATA_HI[0];
  4580                        ;
  4581                        ;
  4582                        ;		k_debug_hex("k_ide_read_sector:lo:",lo);
  4583                        ;		k_debug_hex("k_ide_read_sector:hi:",hi);
  4584                        ;		readBuffer[index] =   lo;
  4585                        ;		readBuffer[index+1] = hi;
  4586                        ;	}
  4587                        ;	*/
  4588                        ;
  4589                        ;	//k_debug_byte_array("k_ide_read_sector:data:",r
                    eadBuffer,512);
  4590                        ;
  4591                        ;	return readBuffer;
  4592                        	.line	1143
  4593 06:9BE8: A6 0E        	ldx	<L124+readBuffer_0+2
  4594 06:9BEA: A5 0C        	lda	<L124+readBuffer_0
  4595                        L128:
  4596 06:9BEC: A8           	tay
  4597 06:9BED: A5 0A        	lda	<L124+2
  4598 06:9BEF: 85 0E        	sta	<L124+2+4
  4599 06:9BF1: A5 09        	lda	<L124+1
  4600 06:9BF3: 85 0D        	sta	<L124+1+4
  4601 06:9BF5: 2B           	pld
  4602 06:9BF6: 3B           	tsc
  4603 06:9BF7: 18           	clc
  4604 06:9BF8: 69 0C 00     	adc	#L124+4
  4605 06:9BFB: 1B           	tcs
  4606 06:9BFC: 98           	tya
  4607 06:9BFD: 6B           	rtl
  4608                        ;}
  4609                        	.line	1144
  4610                        	.endblock	1144
  4611             00000008   L124	equ	8
  4612             00000005   L125	equ	5
  4613 06:9BFE:              	ends
  4614                        	efunc
  4615                        	.endfunc	1144,5,8
  4616                        	.line	1144
  4617                        	data
  Sat Jul 10 2021  1:15                                                Page 90


  4618                        L123:
  4619 00:0362: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$72,$65,$61,$64,
                    $5F,$73,$65,$63,$74
       00:0366: 65 5F 72 65 
       00:036A: 61 64 5F 73 
       00:036E: 65 63 74 
  4620 00:0371: 6F 72 3A 73  	db	$6F,$72,$3A,$73,$74,$73,$3A,$00
       00:0375: 74 73 3A 00 
  4621 00:0379:              	ends
  4622                        ;
  4623                        ;
  4624                        ;
  4625                        ;
  4626                        ;int reg_config( void )
  4627                        ;
  4628                        ;{
  4629                        	.line	1149
  4630                        	.line	1151
  4631                        	FXHDD
  4632                        	xdef	~~reg_config
  4633                        	func
  4634                        	.function	1151
  4635                        ~~reg_config:
  4636                        	longa	on
  4637                        	longi	on
  4638 06:9BFE: 3B           	tsc
  4639 06:9BFF: 38           	sec
  4640 06:9C00: E9 0C 00     	sbc	#L130
  4641 06:9C03: 1B           	tcs
  4642 06:9C04: 0B           	phd
  4643 06:9C05: 5B           	tcd
  4644                        	.block	1151
  4645                        ;   int numDev = 0;
  4646                        ;   unsigned char sc;
  4647                        ;   unsigned char sn;
  4648                        ;   unsigned char cl;
  4649                        ;   unsigned char ch;
  4650                        ;   unsigned char st;
  4651                        ;   unsigned char dc;
  4652                        ;
  4653                        ;   // setup register values
  4654                        ;
  4655                        ;
  4656                        ;   dc = (unsigned char) ( int_use_intr_flag ? 0 :
                     CB_DC_NIEN );
  4657             00000000   numDev_1	set	0
  4658             00000002   sc_1	set	2
  4659             00000003   sn_1	set	3
  4660             00000004   cl_1	set	4
  4661             00000005   ch_1	set	5
  4662             00000006   st_1	set	6
  4663             00000007   dc_1	set	7
  4664                        	.sym	numDev,0,5,1,16
  4665                        	.sym	sc,2,14,1,8
  4666                        	.sym	sn,3,14,1,8
  4667                        	.sym	cl,4,14,1,8
  4668                        	.sym	ch,5,14,1,8
  4669                        	.sym	st,6,14,1,8
  Sat Jul 10 2021  1:15                                                Page 91


  4670                        	.sym	dc,7,14,1,8
  4671 06:9C06: 64 05        	stz	<L131+numDev_1
  4672                        	.line	1163
  4673 06:9C08: AD xx xx     	lda	|~~int_use_intr_flag
  4674 06:9C0B: 29 FF 00     	and	#$ff
  4675 06:9C0E: D0 03        	bne	L134
  4676 06:9C10: 82 05 00     	brl	L133
  4677                        L134:
  4678 06:9C13: A9 00 00     	lda	#$0
  4679 06:9C16: 80 03        	bra	L135
  4680                        L133:
  4681 06:9C18: A9 02 00     	lda	#$2
  4682                        L135:
  4683 06:9C1B: 85 01        	sta	<R0
  4684 06:9C1D: E2 20        	sep	#$20
  4685                        	longa	off
  4686 06:9C1F: A5 01        	lda	<R0
  4687 06:9C21: 85 0C        	sta	<L131+dc_1
  4688 06:9C23: C2 20        	rep	#$20
  4689                        	longa	on
  4690                        ;   k_debug_hex("dc:",dc);
  4691                        	.line	1164
  4692 06:9C25: D4 0C        	pei	<L131+dc_1
  4693 06:9C27: F4 xx xx     	pea	#^L129
  4694 06:9C2A: F4 xx xx     	pea	#<L129
  4695 06:9C2D: 22 xx xx xx  	jsl	~~k_debug_hex
  4696                        ;
  4697                        ;   // reset Bus Master Error bit
  4698                        ;
  4699                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  4700                        	.line	1168
  4701 06:9C31: F4 02 00     	pea	#<$2
  4702 06:9C34: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  4703                        ;   k_debug_hex("pio_writeBusMstrStatus:",BM_SR_MA
                    SK_ERR);
  4704                        	.line	1169
  4705 06:9C38: F4 02 00     	pea	#<$2
  4706 06:9C3B: F4 xx xx     	pea	#^L129+4
  4707 06:9C3E: F4 xx xx     	pea	#<L129+4
  4708 06:9C41: 22 xx xx xx  	jsl	~~k_debug_hex
  4709                        ;   // assume there are no devices
  4710                        ;
  4711                        ;   reg_config_info[0] = REG_CONFIG_TYPE_NONE;
  4712                        	.line	1172
  4713 06:9C45: 9C xx xx     	stz	|~~reg_config_info
  4714                        ;   reg_config_info[1] = REG_CONFIG_TYPE_NONE;
  4715                        	.line	1173
  4716 06:9C48: 9C xx xx     	stz	|~~reg_config_info+2
  4717                        ;
  4718                        ;   // set up Device Control register
  4719                        ;
  4720                        ;   pio_outbyte( CB_DC, dc );
  4721                        	.line	1177
  4722 06:9C4B: D4 0C        	pei	<L131+dc_1
  4723 06:9C4D: F4 08 00     	pea	#<$8
  4724 06:9C50: 22 F0 B7 06  	jsl	~~pio_outbyte
  4725                        ;
  4726                        ;   // lets see if there is a device 0
  Sat Jul 10 2021  1:15                                                Page 92


  4727                        ;
  4728                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  4729                        	.line	1181
  4730 06:9C54: F4 00 00     	pea	#<$0
  4731 06:9C57: F4 06 00     	pea	#<$6
  4732 06:9C5A: 22 F0 B7 06  	jsl	~~pio_outbyte
  4733                        ;   DELAY400NS;
  4734                        	.line	1182
  4735                        	.line	1182
  4736 06:9C5E: F4 08 00     	pea	#<$8
  4737 06:9C61: 22 B1 B7 06  	jsl	~~pio_inbyte
  4738                        	.line	1182
  4739 06:9C65: F4 08 00     	pea	#<$8
  4740 06:9C68: 22 B1 B7 06  	jsl	~~pio_inbyte
  4741                        	.line	1182
  4742 06:9C6C: F4 08 00     	pea	#<$8
  4743 06:9C6F: 22 B1 B7 06  	jsl	~~pio_inbyte
  4744                        	.line	1182
  4745 06:9C73: F4 08 00     	pea	#<$8
  4746 06:9C76: 22 B1 B7 06  	jsl	~~pio_inbyte
  4747                        	.line	1182
  4748 06:9C7A: F4 08 00     	pea	#<$8
  4749 06:9C7D: 22 B1 B7 06  	jsl	~~pio_inbyte
  4750                        	.line	1182
  4751                        	.line	1182
  4752                        ;   pio_outbyte( CB_SC, 0x55 );
  4753                        	.line	1183
  4754 06:9C81: F4 55 00     	pea	#<$55
  4755 06:9C84: F4 02 00     	pea	#<$2
  4756 06:9C87: 22 F0 B7 06  	jsl	~~pio_outbyte
  4757                        ;   pio_outbyte( CB_SN, 0xaa );
  4758                        	.line	1184
  4759 06:9C8B: F4 AA 00     	pea	#<$aa
  4760 06:9C8E: F4 03 00     	pea	#<$3
  4761 06:9C91: 22 F0 B7 06  	jsl	~~pio_outbyte
  4762                        ;   pio_outbyte( CB_SC, 0xaa );
  4763                        	.line	1185
  4764 06:9C95: F4 AA 00     	pea	#<$aa
  4765 06:9C98: F4 02 00     	pea	#<$2
  4766 06:9C9B: 22 F0 B7 06  	jsl	~~pio_outbyte
  4767                        ;   pio_outbyte( CB_SN, 0x55 );
  4768                        	.line	1186
  4769 06:9C9F: F4 55 00     	pea	#<$55
  4770 06:9CA2: F4 03 00     	pea	#<$3
  4771 06:9CA5: 22 F0 B7 06  	jsl	~~pio_outbyte
  4772                        ;   pio_outbyte( CB_SC, 0x55 );
  4773                        	.line	1187
  4774 06:9CA9: F4 55 00     	pea	#<$55
  4775 06:9CAC: F4 02 00     	pea	#<$2
  4776 06:9CAF: 22 F0 B7 06  	jsl	~~pio_outbyte
  4777                        ;   pio_outbyte( CB_SN, 0xaa );
  4778                        	.line	1188
  4779 06:9CB3: F4 AA 00     	pea	#<$aa
  4780 06:9CB6: F4 03 00     	pea	#<$3
  4781 06:9CB9: 22 F0 B7 06  	jsl	~~pio_outbyte
  4782                        ;   sc = pio_inbyte( CB_SC );
  4783                        	.line	1189
  4784 06:9CBD: F4 02 00     	pea	#<$2
  Sat Jul 10 2021  1:15                                                Page 93


  4785 06:9CC0: 22 B1 B7 06  	jsl	~~pio_inbyte
  4786 06:9CC4: E2 20        	sep	#$20
  4787                        	longa	off
  4788 06:9CC6: 85 07        	sta	<L131+sc_1
  4789 06:9CC8: C2 20        	rep	#$20
  4790                        	longa	on
  4791                        ;   sn = pio_inbyte( CB_SN );
  4792                        	.line	1190
  4793 06:9CCA: F4 03 00     	pea	#<$3
  4794 06:9CCD: 22 B1 B7 06  	jsl	~~pio_inbyte
  4795 06:9CD1: E2 20        	sep	#$20
  4796                        	longa	off
  4797 06:9CD3: 85 08        	sta	<L131+sn_1
  4798 06:9CD5: C2 20        	rep	#$20
  4799                        	longa	on
  4800                        ;   if ( ( sc == 0x55 ) && ( sn == 0xaa ) )
  4801                        	.line	1191
  4802                        ;      reg_config_info[0] = REG_CONFIG_TYPE_UNKN;
  4803 06:9CD7: E2 20        	sep	#$20
  4804                        	longa	off
  4805 06:9CD9: A5 07        	lda	<L131+sc_1
  4806 06:9CDB: C9 55        	cmp	#<$55
  4807 06:9CDD: C2 20        	rep	#$20
  4808                        	longa	on
  4809 06:9CDF: F0 03        	beq	L136
  4810 06:9CE1: 82 13 00     	brl	L10056
  4811                        L136:
  4812 06:9CE4: E2 20        	sep	#$20
  4813                        	longa	off
  4814 06:9CE6: A5 08        	lda	<L131+sn_1
  4815 06:9CE8: C9 AA        	cmp	#<$aa
  4816 06:9CEA: C2 20        	rep	#$20
  4817                        	longa	on
  4818 06:9CEC: F0 03        	beq	L137
  4819 06:9CEE: 82 06 00     	brl	L10056
  4820                        L137:
  4821                        	.line	1192
  4822 06:9CF1: A9 01 00     	lda	#$1
  4823 06:9CF4: 8D xx xx     	sta	|~~reg_config_info
  4824                        ;
  4825                        ;   k_debug_hex("sc1:",sc);
  4826                        L10056:
  4827                        	.line	1194
  4828 06:9CF7: D4 07        	pei	<L131+sc_1
  4829 06:9CF9: F4 xx xx     	pea	#^L129+28
  4830 06:9CFC: F4 xx xx     	pea	#<L129+28
  4831 06:9CFF: 22 xx xx xx  	jsl	~~k_debug_hex
  4832                        ;   k_debug_hex("sn1:",sn);
  4833                        	.line	1195
  4834 06:9D03: D4 08        	pei	<L131+sn_1
  4835 06:9D05: F4 xx xx     	pea	#^L129+33
  4836 06:9D08: F4 xx xx     	pea	#<L129+33
  4837 06:9D0B: 22 xx xx xx  	jsl	~~k_debug_hex
  4838                        ;   // lets see if there is a device 1
  4839                        ;
  4840                        ;   pio_outbyte( CB_DH, CB_DH_DEV1 );
  4841                        	.line	1198
  4842 06:9D0F: F4 10 00     	pea	#<$10
  Sat Jul 10 2021  1:15                                                Page 94


  4843 06:9D12: F4 06 00     	pea	#<$6
  4844 06:9D15: 22 F0 B7 06  	jsl	~~pio_outbyte
  4845                        ;   DELAY400NS;
  4846                        	.line	1199
  4847                        	.line	1199
  4848 06:9D19: F4 08 00     	pea	#<$8
  4849 06:9D1C: 22 B1 B7 06  	jsl	~~pio_inbyte
  4850                        	.line	1199
  4851 06:9D20: F4 08 00     	pea	#<$8
  4852 06:9D23: 22 B1 B7 06  	jsl	~~pio_inbyte
  4853                        	.line	1199
  4854 06:9D27: F4 08 00     	pea	#<$8
  4855 06:9D2A: 22 B1 B7 06  	jsl	~~pio_inbyte
  4856                        	.line	1199
  4857 06:9D2E: F4 08 00     	pea	#<$8
  4858 06:9D31: 22 B1 B7 06  	jsl	~~pio_inbyte
  4859                        	.line	1199
  4860 06:9D35: F4 08 00     	pea	#<$8
  4861 06:9D38: 22 B1 B7 06  	jsl	~~pio_inbyte
  4862                        	.line	1199
  4863                        	.line	1199
  4864                        ;   pio_outbyte( CB_SC, 0x55 );
  4865                        	.line	1200
  4866 06:9D3C: F4 55 00     	pea	#<$55
  4867 06:9D3F: F4 02 00     	pea	#<$2
  4868 06:9D42: 22 F0 B7 06  	jsl	~~pio_outbyte
  4869                        ;   pio_outbyte( CB_SN, 0xaa );
  4870                        	.line	1201
  4871 06:9D46: F4 AA 00     	pea	#<$aa
  4872 06:9D49: F4 03 00     	pea	#<$3
  4873 06:9D4C: 22 F0 B7 06  	jsl	~~pio_outbyte
  4874                        ;   pio_outbyte( CB_SC, 0xaa );
  4875                        	.line	1202
  4876 06:9D50: F4 AA 00     	pea	#<$aa
  4877 06:9D53: F4 02 00     	pea	#<$2
  4878 06:9D56: 22 F0 B7 06  	jsl	~~pio_outbyte
  4879                        ;   pio_outbyte( CB_SN, 0x55 );
  4880                        	.line	1203
  4881 06:9D5A: F4 55 00     	pea	#<$55
  4882 06:9D5D: F4 03 00     	pea	#<$3
  4883 06:9D60: 22 F0 B7 06  	jsl	~~pio_outbyte
  4884                        ;   pio_outbyte( CB_SC, 0x55 );
  4885                        	.line	1204
  4886 06:9D64: F4 55 00     	pea	#<$55
  4887 06:9D67: F4 02 00     	pea	#<$2
  4888 06:9D6A: 22 F0 B7 06  	jsl	~~pio_outbyte
  4889                        ;   pio_outbyte( CB_SN, 0xaa );
  4890                        	.line	1205
  4891 06:9D6E: F4 AA 00     	pea	#<$aa
  4892 06:9D71: F4 03 00     	pea	#<$3
  4893 06:9D74: 22 F0 B7 06  	jsl	~~pio_outbyte
  4894                        ;   sc = pio_inbyte( CB_SC );
  4895                        	.line	1206
  4896 06:9D78: F4 02 00     	pea	#<$2
  4897 06:9D7B: 22 B1 B7 06  	jsl	~~pio_inbyte
  4898 06:9D7F: E2 20        	sep	#$20
  4899                        	longa	off
  4900 06:9D81: 85 07        	sta	<L131+sc_1
  Sat Jul 10 2021  1:15                                                Page 95


  4901 06:9D83: C2 20        	rep	#$20
  4902                        	longa	on
  4903                        ;   sn = pio_inbyte( CB_SN );
  4904                        	.line	1207
  4905 06:9D85: F4 03 00     	pea	#<$3
  4906 06:9D88: 22 B1 B7 06  	jsl	~~pio_inbyte
  4907 06:9D8C: E2 20        	sep	#$20
  4908                        	longa	off
  4909 06:9D8E: 85 08        	sta	<L131+sn_1
  4910 06:9D90: C2 20        	rep	#$20
  4911                        	longa	on
  4912                        ;   if ( ( sc == 0x55 ) && ( sn == 0xaa ) )
  4913                        	.line	1208
  4914                        ;      reg_config_info[1] = REG_CONFIG_TYPE_UNKN;
  4915 06:9D92: E2 20        	sep	#$20
  4916                        	longa	off
  4917 06:9D94: A5 07        	lda	<L131+sc_1
  4918 06:9D96: C9 55        	cmp	#<$55
  4919 06:9D98: C2 20        	rep	#$20
  4920                        	longa	on
  4921 06:9D9A: F0 03        	beq	L138
  4922 06:9D9C: 82 13 00     	brl	L10057
  4923                        L138:
  4924 06:9D9F: E2 20        	sep	#$20
  4925                        	longa	off
  4926 06:9DA1: A5 08        	lda	<L131+sn_1
  4927 06:9DA3: C9 AA        	cmp	#<$aa
  4928 06:9DA5: C2 20        	rep	#$20
  4929                        	longa	on
  4930 06:9DA7: F0 03        	beq	L139
  4931 06:9DA9: 82 06 00     	brl	L10057
  4932                        L139:
  4933                        	.line	1209
  4934 06:9DAC: A9 01 00     	lda	#$1
  4935 06:9DAF: 8D xx xx     	sta	|~~reg_config_info+2
  4936                        ;
  4937                        ;   // now we think we know which devices, if any 
                    are there,
  4938                        ;   // so lets try a soft reset (ignoring any erro
                    rs).
  4939                        ;   k_debug_hex("sc2:",sc);
  4940                        L10057:
  4941                        	.line	1213
  4942 06:9DB2: D4 07        	pei	<L131+sc_1
  4943 06:9DB4: F4 xx xx     	pea	#^L129+38
  4944 06:9DB7: F4 xx xx     	pea	#<L129+38
  4945 06:9DBA: 22 xx xx xx  	jsl	~~k_debug_hex
  4946                        ;   k_debug_hex("sn2:",sn);
  4947                        	.line	1214
  4948 06:9DBE: D4 08        	pei	<L131+sn_1
  4949 06:9DC0: F4 xx xx     	pea	#^L129+43
  4950 06:9DC3: F4 xx xx     	pea	#<L129+43
  4951 06:9DC6: 22 xx xx xx  	jsl	~~k_debug_hex
  4952                        ;
  4953                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  4954                        	.line	1216
  4955 06:9DCA: F4 00 00     	pea	#<$0
  4956 06:9DCD: F4 06 00     	pea	#<$6
  Sat Jul 10 2021  1:15                                                Page 96


  4957 06:9DD0: 22 F0 B7 06  	jsl	~~pio_outbyte
  4958                        ;   DELAY400NS;
  4959                        	.line	1217
  4960                        	.line	1217
  4961 06:9DD4: F4 08 00     	pea	#<$8
  4962 06:9DD7: 22 B1 B7 06  	jsl	~~pio_inbyte
  4963                        	.line	1217
  4964 06:9DDB: F4 08 00     	pea	#<$8
  4965 06:9DDE: 22 B1 B7 06  	jsl	~~pio_inbyte
  4966                        	.line	1217
  4967 06:9DE2: F4 08 00     	pea	#<$8
  4968 06:9DE5: 22 B1 B7 06  	jsl	~~pio_inbyte
  4969                        	.line	1217
  4970 06:9DE9: F4 08 00     	pea	#<$8
  4971 06:9DEC: 22 B1 B7 06  	jsl	~~pio_inbyte
  4972                        	.line	1217
  4973 06:9DF0: F4 08 00     	pea	#<$8
  4974 06:9DF3: 22 B1 B7 06  	jsl	~~pio_inbyte
  4975                        	.line	1217
  4976                        	.line	1217
  4977                        ;   reg_reset( 0 );
  4978                        	.line	1218
  4979 06:9DF7: F4 00 00     	pea	#<$0
  4980 06:9DFA: 22 FA A0 06  	jsl	~~reg_reset
  4981                        ;
  4982                        ;   // lets check device 0 again, is device 0 real
                    ly there?
  4983                        ;   // is it ATA or ATAPI?
  4984                        ;
  4985                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  4986                        	.line	1223
  4987 06:9DFE: F4 00 00     	pea	#<$0
  4988 06:9E01: F4 06 00     	pea	#<$6
  4989 06:9E04: 22 F0 B7 06  	jsl	~~pio_outbyte
  4990                        ;   DELAY400NS;
  4991                        	.line	1224
  4992                        	.line	1224
  4993 06:9E08: F4 08 00     	pea	#<$8
  4994 06:9E0B: 22 B1 B7 06  	jsl	~~pio_inbyte
  4995                        	.line	1224
  4996 06:9E0F: F4 08 00     	pea	#<$8
  4997 06:9E12: 22 B1 B7 06  	jsl	~~pio_inbyte
  4998                        	.line	1224
  4999 06:9E16: F4 08 00     	pea	#<$8
  5000 06:9E19: 22 B1 B7 06  	jsl	~~pio_inbyte
  5001                        	.line	1224
  5002 06:9E1D: F4 08 00     	pea	#<$8
  5003 06:9E20: 22 B1 B7 06  	jsl	~~pio_inbyte
  5004                        	.line	1224
  5005 06:9E24: F4 08 00     	pea	#<$8
  5006 06:9E27: 22 B1 B7 06  	jsl	~~pio_inbyte
  5007                        	.line	1224
  5008                        	.line	1224
  5009                        ;   sc = pio_inbyte( CB_SC );
  5010                        	.line	1225
  5011 06:9E2B: F4 02 00     	pea	#<$2
  5012 06:9E2E: 22 B1 B7 06  	jsl	~~pio_inbyte
  5013 06:9E32: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 97


  5014                        	longa	off
  5015 06:9E34: 85 07        	sta	<L131+sc_1
  5016 06:9E36: C2 20        	rep	#$20
  5017                        	longa	on
  5018                        ;   sn = pio_inbyte( CB_SN );
  5019                        	.line	1226
  5020 06:9E38: F4 03 00     	pea	#<$3
  5021 06:9E3B: 22 B1 B7 06  	jsl	~~pio_inbyte
  5022 06:9E3F: E2 20        	sep	#$20
  5023                        	longa	off
  5024 06:9E41: 85 08        	sta	<L131+sn_1
  5025 06:9E43: C2 20        	rep	#$20
  5026                        	longa	on
  5027                        ;
  5028                        ;   k_debug_hex("sc3:",sc);
  5029                        	.line	1228
  5030 06:9E45: D4 07        	pei	<L131+sc_1
  5031 06:9E47: F4 xx xx     	pea	#^L129+48
  5032 06:9E4A: F4 xx xx     	pea	#<L129+48
  5033 06:9E4D: 22 xx xx xx  	jsl	~~k_debug_hex
  5034                        ;   k_debug_hex("sn3:",sn);
  5035                        	.line	1229
  5036 06:9E51: D4 08        	pei	<L131+sn_1
  5037 06:9E53: F4 xx xx     	pea	#^L129+53
  5038 06:9E56: F4 xx xx     	pea	#<L129+53
  5039 06:9E59: 22 xx xx xx  	jsl	~~k_debug_hex
  5040                        ;
  5041                        ;   if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  5042                        	.line	1231
  5043                        ;   {
  5044 06:9E5D: E2 20        	sep	#$20
  5045                        	longa	off
  5046 06:9E5F: A5 07        	lda	<L131+sc_1
  5047 06:9E61: C9 01        	cmp	#<$1
  5048 06:9E63: C2 20        	rep	#$20
  5049                        	longa	on
  5050 06:9E65: F0 03        	beq	L140
  5051 06:9E67: 82 B5 00     	brl	L10058
  5052                        L140:
  5053 06:9E6A: E2 20        	sep	#$20
  5054                        	longa	off
  5055 06:9E6C: A5 08        	lda	<L131+sn_1
  5056 06:9E6E: C9 01        	cmp	#<$1
  5057 06:9E70: C2 20        	rep	#$20
  5058                        	longa	on
  5059 06:9E72: F0 03        	beq	L141
  5060 06:9E74: 82 A8 00     	brl	L10058
  5061                        L141:
  5062                        	.line	1232
  5063                        ;      reg_config_info[0] = REG_CONFIG_TYPE_UNKN;
  5064                        	.line	1233
  5065 06:9E77: A9 01 00     	lda	#$1
  5066 06:9E7A: 8D xx xx     	sta	|~~reg_config_info
  5067                        ;      st = pio_inbyte( CB_STAT );
  5068                        	.line	1234
  5069 06:9E7D: F4 07 00     	pea	#<$7
  5070 06:9E80: 22 B1 B7 06  	jsl	~~pio_inbyte
  5071 06:9E84: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 98


  5072                        	longa	off
  5073 06:9E86: 85 0B        	sta	<L131+st_1
  5074 06:9E88: C2 20        	rep	#$20
  5075                        	longa	on
  5076                        ;      cl = pio_inbyte( CB_CL );
  5077                        	.line	1235
  5078 06:9E8A: F4 04 00     	pea	#<$4
  5079 06:9E8D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5080 06:9E91: E2 20        	sep	#$20
  5081                        	longa	off
  5082 06:9E93: 85 09        	sta	<L131+cl_1
  5083 06:9E95: C2 20        	rep	#$20
  5084                        	longa	on
  5085                        ;      ch = pio_inbyte( CB_CH );
  5086                        	.line	1236
  5087 06:9E97: F4 05 00     	pea	#<$5
  5088 06:9E9A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5089 06:9E9E: E2 20        	sep	#$20
  5090                        	longa	off
  5091 06:9EA0: 85 0A        	sta	<L131+ch_1
  5092 06:9EA2: C2 20        	rep	#$20
  5093                        	longa	on
  5094                        ;      if ( ( ( cl == 0x14 ) && ( ch == 0xeb ) )  
                         // PATAPI
  5095                        	.line	1237
  5096                        ;           ||
  5097                        ;           ( ( cl == 0x69 ) && ( ch == 0x96 ) )  
                         // SATAPI
  5098                        ;         )
  5099                        ;      {
  5100 06:9EA4: E2 20        	sep	#$20
  5101                        	longa	off
  5102 06:9EA6: A5 09        	lda	<L131+cl_1
  5103 06:9EA8: C9 14        	cmp	#<$14
  5104 06:9EAA: C2 20        	rep	#$20
  5105                        	longa	on
  5106 06:9EAC: F0 03        	beq	L144
  5107 06:9EAE: 82 0D 00     	brl	L143
  5108                        L144:
  5109 06:9EB1: E2 20        	sep	#$20
  5110                        	longa	off
  5111 06:9EB3: A5 0A        	lda	<L131+ch_1
  5112 06:9EB5: C9 EB        	cmp	#<$eb
  5113 06:9EB7: C2 20        	rep	#$20
  5114                        	longa	on
  5115 06:9EB9: D0 03        	bne	L145
  5116 06:9EBB: 82 1A 00     	brl	L142
  5117                        L145:
  5118                        L143:
  5119 06:9EBE: E2 20        	sep	#$20
  5120                        	longa	off
  5121 06:9EC0: A5 09        	lda	<L131+cl_1
  5122 06:9EC2: C9 69        	cmp	#<$69
  5123 06:9EC4: C2 20        	rep	#$20
  5124                        	longa	on
  5125 06:9EC6: F0 03        	beq	L146
  5126 06:9EC8: 82 16 00     	brl	L10059
  5127                        L146:
  Sat Jul 10 2021  1:15                                                Page 99


  5128 06:9ECB: E2 20        	sep	#$20
  5129                        	longa	off
  5130 06:9ECD: A5 0A        	lda	<L131+ch_1
  5131 06:9ECF: C9 96        	cmp	#<$96
  5132 06:9ED1: C2 20        	rep	#$20
  5133                        	longa	on
  5134 06:9ED3: F0 03        	beq	L147
  5135 06:9ED5: 82 09 00     	brl	L10059
  5136                        L147:
  5137                        L142:
  5138                        	.line	1241
  5139                        ;         reg_config_info[0] = REG_CONFIG_TYPE_ATA
                    PI;
  5140                        	.line	1242
  5141 06:9ED8: A9 03 00     	lda	#$3
  5142 06:9EDB: 8D xx xx     	sta	|~~reg_config_info
  5143                        ;      }
  5144                        	.line	1243
  5145                        ;      else
  5146 06:9EDE: 82 3E 00     	brl	L10060
  5147                        L10059:
  5148                        ;      if ( ( st != 0 )
  5149                        	.line	1245
  5150                        ;           &&
  5151                        ;           ( ( ( cl == 0x00 ) && ( ch == 0x00 ) )
                         // PATA
  5152                        ;             ||
  5153                        ;             ( ( cl == 0x3c ) && ( ch == 0xc3 ) )
                     )   // SATA
  5154                        ;         )
  5155                        ;      {
  5156 06:9EE1: A5 0B        	lda	<L131+st_1
  5157 06:9EE3: 29 FF 00     	and	#$ff
  5158 06:9EE6: D0 03        	bne	L148
  5159 06:9EE8: 82 34 00     	brl	L10061
  5160                        L148:
  5161 06:9EEB: A5 09        	lda	<L131+cl_1
  5162 06:9EED: 29 FF 00     	and	#$ff
  5163 06:9EF0: F0 03        	beq	L151
  5164 06:9EF2: 82 0A 00     	brl	L150
  5165                        L151:
  5166 06:9EF5: A5 0A        	lda	<L131+ch_1
  5167 06:9EF7: 29 FF 00     	and	#$ff
  5168 06:9EFA: D0 03        	bne	L152
  5169 06:9EFC: 82 1A 00     	brl	L149
  5170                        L152:
  5171                        L150:
  5172 06:9EFF: E2 20        	sep	#$20
  5173                        	longa	off
  5174 06:9F01: A5 09        	lda	<L131+cl_1
  5175 06:9F03: C9 3C        	cmp	#<$3c
  5176 06:9F05: C2 20        	rep	#$20
  5177                        	longa	on
  5178 06:9F07: F0 03        	beq	L153
  5179 06:9F09: 82 13 00     	brl	L10061
  5180                        L153:
  5181 06:9F0C: E2 20        	sep	#$20
  5182                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 100


  5183 06:9F0E: A5 0A        	lda	<L131+ch_1
  5184 06:9F10: C9 C3        	cmp	#<$c3
  5185 06:9F12: C2 20        	rep	#$20
  5186                        	longa	on
  5187 06:9F14: F0 03        	beq	L154
  5188 06:9F16: 82 06 00     	brl	L10061
  5189                        L154:
  5190                        L149:
  5191                        	.line	1251
  5192                        ;         reg_config_info[0] = REG_CONFIG_TYPE_ATA
                    ;
  5193                        	.line	1252
  5194 06:9F19: A9 02 00     	lda	#$2
  5195 06:9F1C: 8D xx xx     	sta	|~~reg_config_info
  5196                        ;      }
  5197                        	.line	1253
  5198                        ;   }
  5199                        L10061:
  5200                        L10060:
  5201                        	.line	1254
  5202                        ;
  5203                        ;   // lets check device 1 again, is device 1 real
                    ly there?
  5204                        ;   // is it ATA or ATAPI?
  5205                        ;   k_debug_hex("reg_config_info[0]:",reg_config_i
                    nfo[0]);
  5206                        L10058:
  5207                        	.line	1258
  5208 06:9F1F: AD xx xx     	lda	|~~reg_config_info
  5209 06:9F22: 48           	pha
  5210 06:9F23: F4 xx xx     	pea	#^L129+58
  5211 06:9F26: F4 xx xx     	pea	#<L129+58
  5212 06:9F29: 22 xx xx xx  	jsl	~~k_debug_hex
  5213                        ;
  5214                        ;   pio_outbyte( CB_DH, CB_DH_DEV1 );
  5215                        	.line	1260
  5216 06:9F2D: F4 10 00     	pea	#<$10
  5217 06:9F30: F4 06 00     	pea	#<$6
  5218 06:9F33: 22 F0 B7 06  	jsl	~~pio_outbyte
  5219                        ;   DELAY400NS;
  5220                        	.line	1261
  5221                        	.line	1261
  5222 06:9F37: F4 08 00     	pea	#<$8
  5223 06:9F3A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5224                        	.line	1261
  5225 06:9F3E: F4 08 00     	pea	#<$8
  5226 06:9F41: 22 B1 B7 06  	jsl	~~pio_inbyte
  5227                        	.line	1261
  5228 06:9F45: F4 08 00     	pea	#<$8
  5229 06:9F48: 22 B1 B7 06  	jsl	~~pio_inbyte
  5230                        	.line	1261
  5231 06:9F4C: F4 08 00     	pea	#<$8
  5232 06:9F4F: 22 B1 B7 06  	jsl	~~pio_inbyte
  5233                        	.line	1261
  5234 06:9F53: F4 08 00     	pea	#<$8
  5235 06:9F56: 22 B1 B7 06  	jsl	~~pio_inbyte
  5236                        	.line	1261
  5237                        	.line	1261
  Sat Jul 10 2021  1:15                                                Page 101


  5238                        ;   sc = pio_inbyte( CB_SC );
  5239                        	.line	1262
  5240 06:9F5A: F4 02 00     	pea	#<$2
  5241 06:9F5D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5242 06:9F61: E2 20        	sep	#$20
  5243                        	longa	off
  5244 06:9F63: 85 07        	sta	<L131+sc_1
  5245 06:9F65: C2 20        	rep	#$20
  5246                        	longa	on
  5247                        ;   sn = pio_inbyte( CB_SN );
  5248                        	.line	1263
  5249 06:9F67: F4 03 00     	pea	#<$3
  5250 06:9F6A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5251 06:9F6E: E2 20        	sep	#$20
  5252                        	longa	off
  5253 06:9F70: 85 08        	sta	<L131+sn_1
  5254 06:9F72: C2 20        	rep	#$20
  5255                        	longa	on
  5256                        ;
  5257                        ;   k_debug_hex("sc4:",sc);
  5258                        	.line	1265
  5259 06:9F74: D4 07        	pei	<L131+sc_1
  5260 06:9F76: F4 xx xx     	pea	#^L129+78
  5261 06:9F79: F4 xx xx     	pea	#<L129+78
  5262 06:9F7C: 22 xx xx xx  	jsl	~~k_debug_hex
  5263                        ;   k_debug_hex("sn4:",sn);
  5264                        	.line	1266
  5265 06:9F80: D4 08        	pei	<L131+sn_1
  5266 06:9F82: F4 xx xx     	pea	#^L129+83
  5267 06:9F85: F4 xx xx     	pea	#<L129+83
  5268 06:9F88: 22 xx xx xx  	jsl	~~k_debug_hex
  5269                        ;
  5270                        ;   if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  5271                        	.line	1268
  5272                        ;   {
  5273 06:9F8C: E2 20        	sep	#$20
  5274                        	longa	off
  5275 06:9F8E: A5 07        	lda	<L131+sc_1
  5276 06:9F90: C9 01        	cmp	#<$1
  5277 06:9F92: C2 20        	rep	#$20
  5278                        	longa	on
  5279 06:9F94: F0 03        	beq	L155
  5280 06:9F96: 82 B5 00     	brl	L10062
  5281                        L155:
  5282 06:9F99: E2 20        	sep	#$20
  5283                        	longa	off
  5284 06:9F9B: A5 08        	lda	<L131+sn_1
  5285 06:9F9D: C9 01        	cmp	#<$1
  5286 06:9F9F: C2 20        	rep	#$20
  5287                        	longa	on
  5288 06:9FA1: F0 03        	beq	L156
  5289 06:9FA3: 82 A8 00     	brl	L10062
  5290                        L156:
  5291                        	.line	1269
  5292                        ;      reg_config_info[1] = REG_CONFIG_TYPE_UNKN;
  5293                        	.line	1270
  5294 06:9FA6: A9 01 00     	lda	#$1
  5295 06:9FA9: 8D xx xx     	sta	|~~reg_config_info+2
  Sat Jul 10 2021  1:15                                                Page 102


  5296                        ;      st = pio_inbyte( CB_STAT );
  5297                        	.line	1271
  5298 06:9FAC: F4 07 00     	pea	#<$7
  5299 06:9FAF: 22 B1 B7 06  	jsl	~~pio_inbyte
  5300 06:9FB3: E2 20        	sep	#$20
  5301                        	longa	off
  5302 06:9FB5: 85 0B        	sta	<L131+st_1
  5303 06:9FB7: C2 20        	rep	#$20
  5304                        	longa	on
  5305                        ;      cl = pio_inbyte( CB_CL );
  5306                        	.line	1272
  5307 06:9FB9: F4 04 00     	pea	#<$4
  5308 06:9FBC: 22 B1 B7 06  	jsl	~~pio_inbyte
  5309 06:9FC0: E2 20        	sep	#$20
  5310                        	longa	off
  5311 06:9FC2: 85 09        	sta	<L131+cl_1
  5312 06:9FC4: C2 20        	rep	#$20
  5313                        	longa	on
  5314                        ;      ch = pio_inbyte( CB_CH );
  5315                        	.line	1273
  5316 06:9FC6: F4 05 00     	pea	#<$5
  5317 06:9FC9: 22 B1 B7 06  	jsl	~~pio_inbyte
  5318 06:9FCD: E2 20        	sep	#$20
  5319                        	longa	off
  5320 06:9FCF: 85 0A        	sta	<L131+ch_1
  5321 06:9FD1: C2 20        	rep	#$20
  5322                        	longa	on
  5323                        ;      if ( ( ( cl == 0x14 ) && ( ch == 0xeb ) )  
                         // PATAPI
  5324                        	.line	1274
  5325                        ;           ||
  5326                        ;           ( ( cl == 0x69 ) && ( ch == 0x96 ) )  
                         // SATAPI
  5327                        ;         )
  5328                        ;      {
  5329 06:9FD3: E2 20        	sep	#$20
  5330                        	longa	off
  5331 06:9FD5: A5 09        	lda	<L131+cl_1
  5332 06:9FD7: C9 14        	cmp	#<$14
  5333 06:9FD9: C2 20        	rep	#$20
  5334                        	longa	on
  5335 06:9FDB: F0 03        	beq	L159
  5336 06:9FDD: 82 0D 00     	brl	L158
  5337                        L159:
  5338 06:9FE0: E2 20        	sep	#$20
  5339                        	longa	off
  5340 06:9FE2: A5 0A        	lda	<L131+ch_1
  5341 06:9FE4: C9 EB        	cmp	#<$eb
  5342 06:9FE6: C2 20        	rep	#$20
  5343                        	longa	on
  5344 06:9FE8: D0 03        	bne	L160
  5345 06:9FEA: 82 1A 00     	brl	L157
  5346                        L160:
  5347                        L158:
  5348 06:9FED: E2 20        	sep	#$20
  5349                        	longa	off
  5350 06:9FEF: A5 09        	lda	<L131+cl_1
  5351 06:9FF1: C9 69        	cmp	#<$69
  Sat Jul 10 2021  1:15                                                Page 103


  5352 06:9FF3: C2 20        	rep	#$20
  5353                        	longa	on
  5354 06:9FF5: F0 03        	beq	L161
  5355 06:9FF7: 82 16 00     	brl	L10063
  5356                        L161:
  5357 06:9FFA: E2 20        	sep	#$20
  5358                        	longa	off
  5359 06:9FFC: A5 0A        	lda	<L131+ch_1
  5360 06:9FFE: C9 96        	cmp	#<$96
  5361 06:A000: C2 20        	rep	#$20
  5362                        	longa	on
  5363 06:A002: F0 03        	beq	L162
  5364 06:A004: 82 09 00     	brl	L10063
  5365                        L162:
  5366                        L157:
  5367                        	.line	1278
  5368                        ;         reg_config_info[1] = REG_CONFIG_TYPE_ATA
                    PI;
  5369                        	.line	1279
  5370 06:A007: A9 03 00     	lda	#$3
  5371 06:A00A: 8D xx xx     	sta	|~~reg_config_info+2
  5372                        ;      }
  5373                        	.line	1280
  5374                        ;      else
  5375 06:A00D: 82 3E 00     	brl	L10064
  5376                        L10063:
  5377                        ;      if ( ( st != 0 )
  5378                        	.line	1282
  5379                        ;           &&
  5380                        ;           ( ( ( cl == 0x00 ) && ( ch == 0x00 ) )
                         // PATA
  5381                        ;             ||
  5382                        ;             ( ( cl == 0x3c ) && ( ch == 0xc3 ) )
                     )   // SATA
  5383                        ;         )
  5384                        ;      {
  5385 06:A010: A5 0B        	lda	<L131+st_1
  5386 06:A012: 29 FF 00     	and	#$ff
  5387 06:A015: D0 03        	bne	L163
  5388 06:A017: 82 34 00     	brl	L10065
  5389                        L163:
  5390 06:A01A: A5 09        	lda	<L131+cl_1
  5391 06:A01C: 29 FF 00     	and	#$ff
  5392 06:A01F: F0 03        	beq	L166
  5393 06:A021: 82 0A 00     	brl	L165
  5394                        L166:
  5395 06:A024: A5 0A        	lda	<L131+ch_1
  5396 06:A026: 29 FF 00     	and	#$ff
  5397 06:A029: D0 03        	bne	L167
  5398 06:A02B: 82 1A 00     	brl	L164
  5399                        L167:
  5400                        L165:
  5401 06:A02E: E2 20        	sep	#$20
  5402                        	longa	off
  5403 06:A030: A5 09        	lda	<L131+cl_1
  5404 06:A032: C9 3C        	cmp	#<$3c
  5405 06:A034: C2 20        	rep	#$20
  5406                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 104


  5407 06:A036: F0 03        	beq	L168
  5408 06:A038: 82 13 00     	brl	L10065
  5409                        L168:
  5410 06:A03B: E2 20        	sep	#$20
  5411                        	longa	off
  5412 06:A03D: A5 0A        	lda	<L131+ch_1
  5413 06:A03F: C9 C3        	cmp	#<$c3
  5414 06:A041: C2 20        	rep	#$20
  5415                        	longa	on
  5416 06:A043: F0 03        	beq	L169
  5417 06:A045: 82 06 00     	brl	L10065
  5418                        L169:
  5419                        L164:
  5420                        	.line	1288
  5421                        ;         reg_config_info[1] = REG_CONFIG_TYPE_ATA
                    ;
  5422                        	.line	1289
  5423 06:A048: A9 02 00     	lda	#$2
  5424 06:A04B: 8D xx xx     	sta	|~~reg_config_info+2
  5425                        ;      }
  5426                        	.line	1290
  5427                        ;   }
  5428                        L10065:
  5429                        L10064:
  5430                        	.line	1291
  5431                        ;
  5432                        ;   k_debug_hex("reg_config_info[1]:",reg_config_i
                    nfo[1]);
  5433                        L10062:
  5434                        	.line	1293
  5435 06:A04E: AD xx xx     	lda	|~~reg_config_info+2
  5436 06:A051: 48           	pha
  5437 06:A052: F4 xx xx     	pea	#^L129+88
  5438 06:A055: F4 xx xx     	pea	#<L129+88
  5439 06:A058: 22 xx xx xx  	jsl	~~k_debug_hex
  5440                        ;   // If possible, select a device that exists, t
                    ry device 0 first.
  5441                        ;
  5442                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  5443                        	.line	1296
  5444                        ;   {
  5445 06:A05C: AD xx xx     	lda	|~~reg_config_info+2
  5446 06:A05F: D0 03        	bne	L170
  5447 06:A061: 82 2F 00     	brl	L10066
  5448                        L170:
  5449                        	.line	1297
  5450                        ;      pio_outbyte( CB_DH, CB_DH_DEV1 );
  5451                        	.line	1298
  5452 06:A064: F4 10 00     	pea	#<$10
  5453 06:A067: F4 06 00     	pea	#<$6
  5454 06:A06A: 22 F0 B7 06  	jsl	~~pio_outbyte
  5455                        ;      DELAY400NS;
  5456                        	.line	1299
  5457                        	.line	1299
  5458 06:A06E: F4 08 00     	pea	#<$8
  5459 06:A071: 22 B1 B7 06  	jsl	~~pio_inbyte
  5460                        	.line	1299
  Sat Jul 10 2021  1:15                                                Page 105


  5461 06:A075: F4 08 00     	pea	#<$8
  5462 06:A078: 22 B1 B7 06  	jsl	~~pio_inbyte
  5463                        	.line	1299
  5464 06:A07C: F4 08 00     	pea	#<$8
  5465 06:A07F: 22 B1 B7 06  	jsl	~~pio_inbyte
  5466                        	.line	1299
  5467 06:A083: F4 08 00     	pea	#<$8
  5468 06:A086: 22 B1 B7 06  	jsl	~~pio_inbyte
  5469                        	.line	1299
  5470 06:A08A: F4 08 00     	pea	#<$8
  5471 06:A08D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5472                        	.line	1299
  5473                        	.line	1299
  5474                        ;      numDev ++ ;
  5475                        	.line	1300
  5476 06:A091: E6 05        	inc	<L131+numDev_1
  5477                        ;   }
  5478                        	.line	1301
  5479                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  5480                        L10066:
  5481                        	.line	1302
  5482                        ;   {
  5483 06:A093: AD xx xx     	lda	|~~reg_config_info
  5484 06:A096: D0 03        	bne	L171
  5485 06:A098: 82 2F 00     	brl	L10067
  5486                        L171:
  5487                        	.line	1303
  5488                        ;      pio_outbyte( CB_DH, CB_DH_DEV0 );
  5489                        	.line	1304
  5490 06:A09B: F4 00 00     	pea	#<$0
  5491 06:A09E: F4 06 00     	pea	#<$6
  5492 06:A0A1: 22 F0 B7 06  	jsl	~~pio_outbyte
  5493                        ;      DELAY400NS;
  5494                        	.line	1305
  5495                        	.line	1305
  5496 06:A0A5: F4 08 00     	pea	#<$8
  5497 06:A0A8: 22 B1 B7 06  	jsl	~~pio_inbyte
  5498                        	.line	1305
  5499 06:A0AC: F4 08 00     	pea	#<$8
  5500 06:A0AF: 22 B1 B7 06  	jsl	~~pio_inbyte
  5501                        	.line	1305
  5502 06:A0B3: F4 08 00     	pea	#<$8
  5503 06:A0B6: 22 B1 B7 06  	jsl	~~pio_inbyte
  5504                        	.line	1305
  5505 06:A0BA: F4 08 00     	pea	#<$8
  5506 06:A0BD: 22 B1 B7 06  	jsl	~~pio_inbyte
  5507                        	.line	1305
  5508 06:A0C1: F4 08 00     	pea	#<$8
  5509 06:A0C4: 22 B1 B7 06  	jsl	~~pio_inbyte
  5510                        	.line	1305
  5511                        	.line	1305
  5512                        ;      numDev ++ ;
  5513                        	.line	1306
  5514 06:A0C8: E6 05        	inc	<L131+numDev_1
  5515                        ;   }
  5516                        	.line	1307
  5517                        ;
  Sat Jul 10 2021  1:15                                                Page 106


  5518                        ;   // BMIDE Error=1?
  5519                        ;
  5520                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  5521                        L10067:
  5522                        	.line	1311
  5523                        ;   {
  5524 06:A0CA: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  5525 06:A0CE: E2 20        	sep	#$20
  5526                        	longa	off
  5527 06:A0D0: 29 02        	and	#<$2
  5528 06:A0D2: C2 20        	rep	#$20
  5529                        	longa	on
  5530 06:A0D4: D0 03        	bne	L172
  5531 06:A0D6: 82 09 00     	brl	L10068
  5532                        L172:
  5533                        	.line	1312
  5534                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  5535                        	.line	1313
  5536 06:A0D9: E2 20        	sep	#$20
  5537                        	longa	off
  5538 06:A0DB: A9 4E        	lda	#$4e
  5539 06:A0DD: 8D xx xx     	sta	|~~reg_cmd_info+31
  5540 06:A0E0: C2 20        	rep	#$20
  5541                        	longa	on
  5542                        ;   }
  5543                        	.line	1314
  5544                        ;
  5545                        ;   // return the number of devices found
  5546                        ;   k_debug_hex("numDev:",numDev);
  5547                        L10068:
  5548                        	.line	1317
  5549 06:A0E2: D4 05        	pei	<L131+numDev_1
  5550 06:A0E4: F4 xx xx     	pea	#^L129+108
  5551 06:A0E7: F4 xx xx     	pea	#<L129+108
  5552 06:A0EA: 22 xx xx xx  	jsl	~~k_debug_hex
  5553                        ;
  5554                        ;   return numDev;
  5555                        	.line	1319
  5556 06:A0EE: A5 05        	lda	<L131+numDev_1
  5557                        L173:
  5558 06:A0F0: A8           	tay
  5559 06:A0F1: 2B           	pld
  5560 06:A0F2: 3B           	tsc
  5561 06:A0F3: 18           	clc
  5562 06:A0F4: 69 0C 00     	adc	#L130
  5563 06:A0F7: 1B           	tcs
  5564 06:A0F8: 98           	tya
  5565 06:A0F9: 6B           	rtl
  5566                        ;}
  5567                        	.line	1320
  5568                        	.endblock	1320
  5569             0000000C   L130	equ	12
  5570             00000005   L131	equ	5
  5571 06:A0FA:              	ends
  5572                        	efunc
  5573                        	.endfunc	1320,5,12
  Sat Jul 10 2021  1:15                                                Page 107


  5574                        	.line	1320
  5575                        	data
  5576                        L129:
  5577 00:0379: 64 63 3A 00  	db	$64,$63,$3A,$00,$70,$69,$6F,$5F,$77,$72,
                    $69,$74,$65,$42,$75
       00:037D: 70 69 6F 5F 
       00:0381: 77 72 69 74 
       00:0385: 65 42 75 
  5578 00:0388: 73 4D 73 74  	db	$73,$4D,$73,$74,$72,$53,$74,$61,$74,$75,
                    $73,$3A,$00,$73,$63
       00:038C: 72 53 74 61 
       00:0390: 74 75 73 3A 
       00:0394: 00 73 63 
  5579 00:0397: 31 3A 00 73  	db	$31,$3A,$00,$73,$6E,$31,$3A,$00,$73,$63,
                    $32,$3A,$00,$73,$6E
       00:039B: 6E 31 3A 00 
       00:039F: 73 63 32 3A 
       00:03A3: 00 73 6E 
  5580 00:03A6: 32 3A 00 73  	db	$32,$3A,$00,$73,$63,$33,$3A,$00,$73,$6E,
                    $33,$3A,$00,$72,$65
       00:03AA: 63 33 3A 00 
       00:03AE: 73 6E 33 3A 
       00:03B2: 00 72 65 
  5581 00:03B5: 67 5F 63 6F  	db	$67,$5F,$63,$6F,$6E,$66,$69,$67,$5F,$69,
                    $6E,$66,$6F,$5B,$30
       00:03B9: 6E 66 69 67 
       00:03BD: 5F 69 6E 66 
       00:03C1: 6F 5B 30 
  5582 00:03C4: 5D 3A 00 73  	db	$5D,$3A,$00,$73,$63,$34,$3A,$00,$73,$6E,
                    $34,$3A,$00,$72,$65
       00:03C8: 63 34 3A 00 
       00:03CC: 73 6E 34 3A 
       00:03D0: 00 72 65 
  5583 00:03D3: 67 5F 63 6F  	db	$67,$5F,$63,$6F,$6E,$66,$69,$67,$5F,$69,
                    $6E,$66,$6F,$5B,$31
       00:03D7: 6E 66 69 67 
       00:03DB: 5F 69 6E 66 
       00:03DF: 6F 5B 31 
  5584 00:03E2: 5D 3A 00 6E  	db	$5D,$3A,$00,$6E,$75,$6D,$44,$65,$76,$3A,
                    $00
       00:03E6: 75 6D 44 65 
       00:03EA: 76 3A 00 
  5585 00:03ED:              	ends
  5586                        ;
  5587                        ;//***********************************************
                    **************
  5588                        ;//
  5589                        ;// reg_reset() - Execute a Software Reset.
  5590                        ;//
  5591                        ;// See ATA-2 Section 9.2, ATA-3 Section 9.2, ATA-
                    4 Section 8.3.
  5592                        ;//
  5593                        ;//***********************************************
                    **************
  5594                        ;
  5595                        ;int reg_reset( unsigned char devRtrn )
  5596                        ;
  5597                        ;{
  Sat Jul 10 2021  1:15                                                Page 108


  5598                        	.line	1330
  5599                        	.line	1332
  5600                        	FXHDD
  5601                        	xdef	~~reg_reset
  5602                        	func
  5603                        	.function	1332
  5604                        ~~reg_reset:
  5605                        	longa	on
  5606                        	longi	on
  5607 06:A0FA: 3B           	tsc
  5608 06:A0FB: 38           	sec
  5609 06:A0FC: E9 08 00     	sbc	#L175
  5610 06:A0FF: 1B           	tcs
  5611 06:A100: 0B           	phd
  5612 06:A101: 5B           	tcd
  5613             00000004   devRtrn_0	set	4
  5614                        	.block	1332
  5615                        ;   unsigned char sc;
  5616                        ;   unsigned char sn;
  5617                        ;   unsigned char status;
  5618                        ;   unsigned char dc;
  5619                        ;
  5620                        ;   // setup register values
  5621                        ;
  5622                        ;   dc = (unsigned char) ( int_use_intr_flag ? 0 :
                     CB_DC_NIEN );
  5623             00000000   sc_1	set	0
  5624             00000001   sn_1	set	1
  5625             00000002   status_1	set	2
  5626             00000003   dc_1	set	3
  5627                        	.sym	sc,0,14,1,8
  5628                        	.sym	sn,1,14,1,8
  5629                        	.sym	status,2,14,1,8
  5630                        	.sym	dc,3,14,1,8
  5631                        	.sym	devRtrn,4,14,6,8
  5632                        	.line	1340
  5633 06:A102: AD xx xx     	lda	|~~int_use_intr_flag
  5634 06:A105: 29 FF 00     	and	#$ff
  5635 06:A108: D0 03        	bne	L179
  5636 06:A10A: 82 05 00     	brl	L178
  5637                        L179:
  5638 06:A10D: A9 00 00     	lda	#$0
  5639 06:A110: 80 03        	bra	L180
  5640                        L178:
  5641 06:A112: A9 02 00     	lda	#$2
  5642                        L180:
  5643 06:A115: 85 01        	sta	<R0
  5644 06:A117: E2 20        	sep	#$20
  5645                        	longa	off
  5646 06:A119: A5 01        	lda	<R0
  5647 06:A11B: 85 08        	sta	<L176+dc_1
  5648 06:A11D: C2 20        	rep	#$20
  5649                        	longa	on
  5650                        ;
  5651                        ;   k_debug_hex("reg_reset:dc:",dc);
  5652                        	.line	1342
  5653 06:A11F: D4 08        	pei	<L176+dc_1
  5654 06:A121: F4 xx xx     	pea	#^L174
  Sat Jul 10 2021  1:15                                                Page 109


  5655 06:A124: F4 xx xx     	pea	#<L174
  5656 06:A127: 22 xx xx xx  	jsl	~~k_debug_hex
  5657                        ;
  5658                        ;   // reset Bus Master Error bit
  5659                        ;
  5660                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  5661                        	.line	1346
  5662 06:A12B: F4 02 00     	pea	#<$2
  5663 06:A12E: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  5664                        ;
  5665                        ;   // initialize the command timeout counter
  5666                        ;
  5667                        ;   k_debug_hex("reg_reset:tmr_set_timeout:",dc);
  5668                        	.line	1350
  5669 06:A132: D4 08        	pei	<L176+dc_1
  5670 06:A134: F4 xx xx     	pea	#^L174+14
  5671 06:A137: F4 xx xx     	pea	#<L174+14
  5672 06:A13A: 22 xx xx xx  	jsl	~~k_debug_hex
  5673                        ;   tmr_set_timeout();
  5674                        	.line	1351
  5675 06:A13E: 22 00 BD 06  	jsl	~~tmr_set_timeout
  5676                        ;
  5677                        ;   // Set and then reset the soft reset bit in th
                    e Device Control
  5678                        ;   // register.  This causes device 0 be selected
                    .
  5679                        ;
  5680                        ;   pio_outbyte( CB_DC, (unsigned char) ( dc | CB_
                    DC_SRST ) );
  5681                        	.line	1356
  5682 06:A142: A5 08        	lda	<L176+dc_1
  5683 06:A144: 29 FF 00     	and	#$ff
  5684 06:A147: 09 04 00     	ora	#<$4
  5685 06:A14A: 48           	pha
  5686 06:A14B: F4 08 00     	pea	#<$8
  5687 06:A14E: 22 F0 B7 06  	jsl	~~pio_outbyte
  5688                        ;   DELAY400NS;
  5689                        	.line	1357
  5690                        	.line	1357
  5691 06:A152: F4 08 00     	pea	#<$8
  5692 06:A155: 22 B1 B7 06  	jsl	~~pio_inbyte
  5693                        	.line	1357
  5694 06:A159: F4 08 00     	pea	#<$8
  5695 06:A15C: 22 B1 B7 06  	jsl	~~pio_inbyte
  5696                        	.line	1357
  5697 06:A160: F4 08 00     	pea	#<$8
  5698 06:A163: 22 B1 B7 06  	jsl	~~pio_inbyte
  5699                        	.line	1357
  5700 06:A167: F4 08 00     	pea	#<$8
  5701 06:A16A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5702                        	.line	1357
  5703 06:A16E: F4 08 00     	pea	#<$8
  5704 06:A171: 22 B1 B7 06  	jsl	~~pio_inbyte
  5705                        	.line	1357
  5706                        	.line	1357
  5707                        ;   pio_outbyte( CB_DC, dc );
  5708                        	.line	1358
  5709 06:A175: D4 08        	pei	<L176+dc_1
  Sat Jul 10 2021  1:15                                                Page 110


  5710 06:A177: F4 08 00     	pea	#<$8
  5711 06:A17A: 22 F0 B7 06  	jsl	~~pio_outbyte
  5712                        ;   DELAY400NS;
  5713                        	.line	1359
  5714                        	.line	1359
  5715 06:A17E: F4 08 00     	pea	#<$8
  5716 06:A181: 22 B1 B7 06  	jsl	~~pio_inbyte
  5717                        	.line	1359
  5718 06:A185: F4 08 00     	pea	#<$8
  5719 06:A188: 22 B1 B7 06  	jsl	~~pio_inbyte
  5720                        	.line	1359
  5721 06:A18C: F4 08 00     	pea	#<$8
  5722 06:A18F: 22 B1 B7 06  	jsl	~~pio_inbyte
  5723                        	.line	1359
  5724 06:A193: F4 08 00     	pea	#<$8
  5725 06:A196: 22 B1 B7 06  	jsl	~~pio_inbyte
  5726                        	.line	1359
  5727 06:A19A: F4 08 00     	pea	#<$8
  5728 06:A19D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5729                        	.line	1359
  5730                        	.line	1359
  5731                        ;
  5732                        ;   // If there is a device 0, wait for device 0 t
                    o set BSY=0.
  5733                        ;
  5734                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  5735                        	.line	1363
  5736                        ;   {
  5737 06:A1A1: AD xx xx     	lda	|~~reg_config_info
  5738 06:A1A4: D0 03        	bne	L181
  5739 06:A1A6: 82 3C 00     	brl	L10069
  5740                        L181:
  5741                        	.line	1364
  5742                        ;      while ( 1 )
  5743                        	.line	1365
  5744                        L10070:
  5745                        ;      {
  5746                        	.line	1366
  5747                        ;         status = pio_inbyte( CB_STAT );
  5748                        	.line	1367
  5749 06:A1A9: F4 07 00     	pea	#<$7
  5750 06:A1AC: 22 B1 B7 06  	jsl	~~pio_inbyte
  5751 06:A1B0: E2 20        	sep	#$20
  5752                        	longa	off
  5753 06:A1B2: 85 07        	sta	<L176+status_1
  5754 06:A1B4: C2 20        	rep	#$20
  5755                        	longa	on
  5756                        ;         if ( ( status & CB_STAT_BSY ) == 0 )
  5757                        	.line	1368
  5758                        ;            break;
  5759 06:A1B6: E2 20        	sep	#$20
  5760                        	longa	off
  5761 06:A1B8: A5 07        	lda	<L176+status_1
  5762 06:A1BA: 29 80        	and	#<$80
  5763 06:A1BC: C2 20        	rep	#$20
  5764                        	longa	on
  5765 06:A1BE: D0 03        	bne	L182
  Sat Jul 10 2021  1:15                                                Page 111


  5766 06:A1C0: 82 22 00     	brl	L10071
  5767                        L182:
  5768                        ;         if ( tmr_chk_timeout() )
  5769                        	.line	1370
  5770                        ;         {
  5771 06:A1C3: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  5772 06:A1C7: AA           	tax
  5773 06:A1C8: D0 03        	bne	L183
  5774 06:A1CA: 82 15 00     	brl	L10072
  5775                        L183:
  5776                        	.line	1371
  5777                        ;            reg_cmd_info.to = 1;
  5778                        	.line	1372
  5779 06:A1CD: E2 20        	sep	#$20
  5780                        	longa	off
  5781 06:A1CF: A9 01        	lda	#$1
  5782 06:A1D1: 8D xx xx     	sta	|~~reg_cmd_info+32
  5783 06:A1D4: C2 20        	rep	#$20
  5784                        	longa	on
  5785                        ;            reg_cmd_info.ec = 1;
  5786                        	.line	1373
  5787 06:A1D6: E2 20        	sep	#$20
  5788                        	longa	off
  5789 06:A1D8: A9 01        	lda	#$1
  5790 06:A1DA: 8D xx xx     	sta	|~~reg_cmd_info+31
  5791 06:A1DD: C2 20        	rep	#$20
  5792                        	longa	on
  5793                        ;            break;
  5794                        	.line	1374
  5795 06:A1DF: 82 03 00     	brl	L10071
  5796                        ;         }
  5797                        	.line	1375
  5798                        ;      }
  5799                        L10072:
  5800                        	.line	1376
  5801 06:A1E2: 82 C4 FF     	brl	L10070
  5802                        L10071:
  5803                        ;   }
  5804                        	.line	1377
  5805                        ;
  5806                        ;   // If there is a device 1, wait until device 1
                     allows
  5807                        ;   // register access.
  5808                        ;
  5809                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  5810                        L10069:
  5811                        	.line	1382
  5812                        ;   {
  5813 06:A1E5: AD xx xx     	lda	|~~reg_config_info+2
  5814 06:A1E8: D0 03        	bne	L184
  5815 06:A1EA: 82 A9 00     	brl	L10073
  5816                        L184:
  5817                        	.line	1383
  5818                        ;      while ( 1 )
  5819                        	.line	1384
  5820                        L10074:
  5821                        ;      {
  Sat Jul 10 2021  1:15                                                Page 112


  5822                        	.line	1385
  5823                        ;         pio_outbyte( CB_DH, CB_DH_DEV1 );
  5824                        	.line	1386
  5825 06:A1ED: F4 10 00     	pea	#<$10
  5826 06:A1F0: F4 06 00     	pea	#<$6
  5827 06:A1F3: 22 F0 B7 06  	jsl	~~pio_outbyte
  5828                        ;         DELAY400NS;
  5829                        	.line	1387
  5830                        	.line	1387
  5831 06:A1F7: F4 08 00     	pea	#<$8
  5832 06:A1FA: 22 B1 B7 06  	jsl	~~pio_inbyte
  5833                        	.line	1387
  5834 06:A1FE: F4 08 00     	pea	#<$8
  5835 06:A201: 22 B1 B7 06  	jsl	~~pio_inbyte
  5836                        	.line	1387
  5837 06:A205: F4 08 00     	pea	#<$8
  5838 06:A208: 22 B1 B7 06  	jsl	~~pio_inbyte
  5839                        	.line	1387
  5840 06:A20C: F4 08 00     	pea	#<$8
  5841 06:A20F: 22 B1 B7 06  	jsl	~~pio_inbyte
  5842                        	.line	1387
  5843 06:A213: F4 08 00     	pea	#<$8
  5844 06:A216: 22 B1 B7 06  	jsl	~~pio_inbyte
  5845                        	.line	1387
  5846                        	.line	1387
  5847                        ;         sc = pio_inbyte( CB_SC );
  5848                        	.line	1388
  5849 06:A21A: F4 02 00     	pea	#<$2
  5850 06:A21D: 22 B1 B7 06  	jsl	~~pio_inbyte
  5851 06:A221: E2 20        	sep	#$20
  5852                        	longa	off
  5853 06:A223: 85 05        	sta	<L176+sc_1
  5854 06:A225: C2 20        	rep	#$20
  5855                        	longa	on
  5856                        ;         sn = pio_inbyte( CB_SN );
  5857                        	.line	1389
  5858 06:A227: F4 03 00     	pea	#<$3
  5859 06:A22A: 22 B1 B7 06  	jsl	~~pio_inbyte
  5860 06:A22E: E2 20        	sep	#$20
  5861                        	longa	off
  5862 06:A230: 85 06        	sta	<L176+sn_1
  5863 06:A232: C2 20        	rep	#$20
  5864                        	longa	on
  5865                        ;         if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  5866                        	.line	1390
  5867                        ;            break;
  5868 06:A234: E2 20        	sep	#$20
  5869                        	longa	off
  5870 06:A236: A5 05        	lda	<L176+sc_1
  5871 06:A238: C9 01        	cmp	#<$1
  5872 06:A23A: C2 20        	rep	#$20
  5873                        	longa	on
  5874 06:A23C: F0 03        	beq	L186
  5875 06:A23E: 82 0D 00     	brl	L185
  5876                        L186:
  5877 06:A241: E2 20        	sep	#$20
  5878                        	longa	off
  5879 06:A243: A5 06        	lda	<L176+sn_1
  Sat Jul 10 2021  1:15                                                Page 113


  5880 06:A245: C9 01        	cmp	#<$1
  5881 06:A247: C2 20        	rep	#$20
  5882                        	longa	on
  5883 06:A249: D0 03        	bne	L187
  5884 06:A24B: 82 22 00     	brl	L10075
  5885                        L187:
  5886                        L185:
  5887                        ;         if ( tmr_chk_timeout() )
  5888                        	.line	1392
  5889                        ;         {
  5890 06:A24E: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  5891 06:A252: AA           	tax
  5892 06:A253: D0 03        	bne	L188
  5893 06:A255: 82 15 00     	brl	L10076
  5894                        L188:
  5895                        	.line	1393
  5896                        ;            reg_cmd_info.to = 1;
  5897                        	.line	1394
  5898 06:A258: E2 20        	sep	#$20
  5899                        	longa	off
  5900 06:A25A: A9 01        	lda	#$1
  5901 06:A25C: 8D xx xx     	sta	|~~reg_cmd_info+32
  5902 06:A25F: C2 20        	rep	#$20
  5903                        	longa	on
  5904                        ;            reg_cmd_info.ec = 2;
  5905                        	.line	1395
  5906 06:A261: E2 20        	sep	#$20
  5907                        	longa	off
  5908 06:A263: A9 02        	lda	#$2
  5909 06:A265: 8D xx xx     	sta	|~~reg_cmd_info+31
  5910 06:A268: C2 20        	rep	#$20
  5911                        	longa	on
  5912                        ;            break;
  5913                        	.line	1396
  5914 06:A26A: 82 03 00     	brl	L10075
  5915                        ;         }
  5916                        	.line	1397
  5917                        ;      }
  5918                        L10076:
  5919                        	.line	1398
  5920 06:A26D: 82 7D FF     	brl	L10074
  5921                        L10075:
  5922                        ;
  5923                        ;      // Now check if drive 1 set BSY=0.
  5924                        ;
  5925                        ;      if ( reg_cmd_info.ec == 0 )
  5926                        	.line	1402
  5927                        ;      {
  5928 06:A270: AD xx xx     	lda	|~~reg_cmd_info+31
  5929 06:A273: 29 FF 00     	and	#$ff
  5930 06:A276: F0 03        	beq	L189
  5931 06:A278: 82 1B 00     	brl	L10077
  5932                        L189:
  5933                        	.line	1403
  5934                        ;         if ( pio_inbyte( CB_STAT ) & CB_STAT_BSY
                     )
  5935                        	.line	1404
  5936                        ;         {
  Sat Jul 10 2021  1:15                                                Page 114


  5937 06:A27B: F4 07 00     	pea	#<$7
  5938 06:A27E: 22 B1 B7 06  	jsl	~~pio_inbyte
  5939 06:A282: E2 20        	sep	#$20
  5940                        	longa	off
  5941 06:A284: 29 80        	and	#<$80
  5942 06:A286: C2 20        	rep	#$20
  5943                        	longa	on
  5944 06:A288: D0 03        	bne	L190
  5945 06:A28A: 82 09 00     	brl	L10078
  5946                        L190:
  5947                        	.line	1405
  5948                        ;            reg_cmd_info.ec = 3;
  5949                        	.line	1406
  5950 06:A28D: E2 20        	sep	#$20
  5951                        	longa	off
  5952 06:A28F: A9 03        	lda	#$3
  5953 06:A291: 8D xx xx     	sta	|~~reg_cmd_info+31
  5954 06:A294: C2 20        	rep	#$20
  5955                        	longa	on
  5956                        ;         }
  5957                        	.line	1407
  5958                        ;      }
  5959                        L10078:
  5960                        	.line	1408
  5961                        ;   }
  5962                        L10077:
  5963                        	.line	1409
  5964                        ;
  5965                        ;   // RESET_DONE:
  5966                        ;
  5967                        ;   // We are done but now we must select the devi
                    ce the caller
  5968                        ;   // requested. This will cause
  5969                        ;   // the correct data to be returned in reg_cmd_
                    info.
  5970                        ;
  5971                        ;   pio_outbyte( CB_DH, (unsigned char) ( devRtrn 
                    ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  5972                        L10073:
  5973                        	.line	1417
  5974 06:A296: A5 0C        	lda	<L175+devRtrn_0
  5975 06:A298: 29 FF 00     	and	#$ff
  5976 06:A29B: D0 03        	bne	L192
  5977 06:A29D: 82 05 00     	brl	L191
  5978                        L192:
  5979 06:A2A0: A9 10 00     	lda	#$10
  5980 06:A2A3: 80 03        	bra	L193
  5981                        L191:
  5982 06:A2A5: A9 00 00     	lda	#$0
  5983                        L193:
  5984 06:A2A8: 48           	pha
  5985 06:A2A9: F4 06 00     	pea	#<$6
  5986 06:A2AC: 22 F0 B7 06  	jsl	~~pio_outbyte
  5987                        ;   DELAY400NS;
  5988                        	.line	1418
  5989                        	.line	1418
  5990 06:A2B0: F4 08 00     	pea	#<$8
  5991 06:A2B3: 22 B1 B7 06  	jsl	~~pio_inbyte
  Sat Jul 10 2021  1:15                                                Page 115


  5992                        	.line	1418
  5993 06:A2B7: F4 08 00     	pea	#<$8
  5994 06:A2BA: 22 B1 B7 06  	jsl	~~pio_inbyte
  5995                        	.line	1418
  5996 06:A2BE: F4 08 00     	pea	#<$8
  5997 06:A2C1: 22 B1 B7 06  	jsl	~~pio_inbyte
  5998                        	.line	1418
  5999 06:A2C5: F4 08 00     	pea	#<$8
  6000 06:A2C8: 22 B1 B7 06  	jsl	~~pio_inbyte
  6001                        	.line	1418
  6002 06:A2CC: F4 08 00     	pea	#<$8
  6003 06:A2CF: 22 B1 B7 06  	jsl	~~pio_inbyte
  6004                        	.line	1418
  6005                        	.line	1418
  6006                        ;
  6007                        ;   // If possible, select a device that exists,
  6008                        ;   // try device 0 first.
  6009                        ;
  6010                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  6011                        	.line	1423
  6012                        ;   {
  6013 06:A2D3: AD xx xx     	lda	|~~reg_config_info+2
  6014 06:A2D6: D0 03        	bne	L194
  6015 06:A2D8: 82 2D 00     	brl	L10079
  6016                        L194:
  6017                        	.line	1424
  6018                        ;      pio_outbyte( CB_DH, CB_DH_DEV1 );
  6019                        	.line	1425
  6020 06:A2DB: F4 10 00     	pea	#<$10
  6021 06:A2DE: F4 06 00     	pea	#<$6
  6022 06:A2E1: 22 F0 B7 06  	jsl	~~pio_outbyte
  6023                        ;      DELAY400NS;
  6024                        	.line	1426
  6025                        	.line	1426
  6026 06:A2E5: F4 08 00     	pea	#<$8
  6027 06:A2E8: 22 B1 B7 06  	jsl	~~pio_inbyte
  6028                        	.line	1426
  6029 06:A2EC: F4 08 00     	pea	#<$8
  6030 06:A2EF: 22 B1 B7 06  	jsl	~~pio_inbyte
  6031                        	.line	1426
  6032 06:A2F3: F4 08 00     	pea	#<$8
  6033 06:A2F6: 22 B1 B7 06  	jsl	~~pio_inbyte
  6034                        	.line	1426
  6035 06:A2FA: F4 08 00     	pea	#<$8
  6036 06:A2FD: 22 B1 B7 06  	jsl	~~pio_inbyte
  6037                        	.line	1426
  6038 06:A301: F4 08 00     	pea	#<$8
  6039 06:A304: 22 B1 B7 06  	jsl	~~pio_inbyte
  6040                        	.line	1426
  6041                        	.line	1426
  6042                        ;   }
  6043                        	.line	1427
  6044                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  6045                        L10079:
  6046                        	.line	1428
  6047                        ;   {
  Sat Jul 10 2021  1:15                                                Page 116


  6048 06:A308: AD xx xx     	lda	|~~reg_config_info
  6049 06:A30B: D0 03        	bne	L195
  6050 06:A30D: 82 2D 00     	brl	L10080
  6051                        L195:
  6052                        	.line	1429
  6053                        ;      pio_outbyte( CB_DH, CB_DH_DEV0 );
  6054                        	.line	1430
  6055 06:A310: F4 00 00     	pea	#<$0
  6056 06:A313: F4 06 00     	pea	#<$6
  6057 06:A316: 22 F0 B7 06  	jsl	~~pio_outbyte
  6058                        ;      DELAY400NS;
  6059                        	.line	1431
  6060                        	.line	1431
  6061 06:A31A: F4 08 00     	pea	#<$8
  6062 06:A31D: 22 B1 B7 06  	jsl	~~pio_inbyte
  6063                        	.line	1431
  6064 06:A321: F4 08 00     	pea	#<$8
  6065 06:A324: 22 B1 B7 06  	jsl	~~pio_inbyte
  6066                        	.line	1431
  6067 06:A328: F4 08 00     	pea	#<$8
  6068 06:A32B: 22 B1 B7 06  	jsl	~~pio_inbyte
  6069                        	.line	1431
  6070 06:A32F: F4 08 00     	pea	#<$8
  6071 06:A332: 22 B1 B7 06  	jsl	~~pio_inbyte
  6072                        	.line	1431
  6073 06:A336: F4 08 00     	pea	#<$8
  6074 06:A339: 22 B1 B7 06  	jsl	~~pio_inbyte
  6075                        	.line	1431
  6076                        	.line	1431
  6077                        ;   }
  6078                        	.line	1432
  6079                        ;
  6080                        ;   // BMIDE Error=1?
  6081                        ;
  6082                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  6083                        L10080:
  6084                        	.line	1436
  6085                        ;   {
  6086 06:A33D: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  6087 06:A341: E2 20        	sep	#$20
  6088                        	longa	off
  6089 06:A343: 29 02        	and	#<$2
  6090 06:A345: C2 20        	rep	#$20
  6091                        	longa	on
  6092 06:A347: D0 03        	bne	L196
  6093 06:A349: 82 09 00     	brl	L10081
  6094                        L196:
  6095                        	.line	1437
  6096                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  6097                        	.line	1438
  6098 06:A34C: E2 20        	sep	#$20
  6099                        	longa	off
  6100 06:A34E: A9 4E        	lda	#$4e
  6101 06:A350: 8D xx xx     	sta	|~~reg_cmd_info+31
  6102 06:A353: C2 20        	rep	#$20
  6103                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 117


  6104                        ;   }
  6105                        	.line	1439
  6106                        ;
  6107                        ;   // All done.  The return values of this functi
                    on are described in
  6108                        ;   // MINDRVR.H.
  6109                        ;
  6110                        ;   sub_trace_command();
  6111                        L10081:
  6112                        	.line	1444
  6113 06:A355: 22 4B B4 06  	jsl	~~sub_trace_command
  6114                        ;   if ( reg_cmd_info.ec )
  6115                        	.line	1445
  6116                        ;      return 1;
  6117 06:A359: AD xx xx     	lda	|~~reg_cmd_info+31
  6118 06:A35C: 29 FF 00     	and	#$ff
  6119 06:A35F: D0 03        	bne	L197
  6120 06:A361: 82 15 00     	brl	L10082
  6121                        L197:
  6122                        	.line	1446
  6123 06:A364: A9 01 00     	lda	#$1
  6124                        L198:
  6125 06:A367: A8           	tay
  6126 06:A368: A5 0A        	lda	<L175+2
  6127 06:A36A: 85 0C        	sta	<L175+2+2
  6128 06:A36C: A5 09        	lda	<L175+1
  6129 06:A36E: 85 0B        	sta	<L175+1+2
  6130 06:A370: 2B           	pld
  6131 06:A371: 3B           	tsc
  6132 06:A372: 18           	clc
  6133 06:A373: 69 0A 00     	adc	#L175+2
  6134 06:A376: 1B           	tcs
  6135 06:A377: 98           	tya
  6136 06:A378: 6B           	rtl
  6137                        ;   return 0;
  6138                        L10082:
  6139                        	.line	1447
  6140 06:A379: A9 00 00     	lda	#$0
  6141 06:A37C: 82 E8 FF     	brl	L198
  6142                        ;}
  6143                        	.line	1448
  6144                        	.endblock	1448
  6145             00000008   L175	equ	8
  6146             00000005   L176	equ	5
  6147 06:A37F:              	ends
  6148                        	efunc
  6149                        	.endfunc	1448,5,8
  6150                        	.line	1448
  6151                        	data
  6152                        L174:
  6153 00:03ED: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
                    $64,$63,$3A,$00,$72
       00:03F1: 72 65 73 65 
       00:03F5: 74 3A 64 63 
       00:03F9: 3A 00 72 
  6154 00:03FC: 65 67 5F 72  	db	$65,$67,$5F,$72,$65,$73,$65,$74,$3A,$74,
                    $6D,$72,$5F,$73,$65
       00:0400: 65 73 65 74 
  Sat Jul 10 2021  1:15                                                Page 118


       00:0404: 3A 74 6D 72 
       00:0408: 5F 73 65 
  6155 00:040B: 74 5F 74 69  	db	$74,$5F,$74,$69,$6D,$65,$6F,$75,$74,$3A,
                    $00
       00:040F: 6D 65 6F 75 
       00:0413: 74 3A 00 
  6156 00:0416:              	ends
  6157                        ;
  6158                        ;//***********************************************
                    **************
  6159                        ;//
  6160                        ;// exec_non_data_cmd() - Execute a non-data comma
                    nd.
  6161                        ;//
  6162                        ;// This includes the strange ATAPI DEVICE RESET '
                    command'
  6163                        ;// (command code 08H).
  6164                        ;//
  6165                        ;// Note special handling for Execute Device Diagn
                    ostics
  6166                        ;// command when there is no device 0.
  6167                        ;//
  6168                        ;// See ATA-2 Section 9.5, ATA-3 Section 9.5,
  6169                        ;// ATA-4 Section 8.8 Figure 12.  Also see Section
                     8.5.
  6170                        ;//
  6171                        ;//***********************************************
                    **************
  6172                        ;
  6173                        ;static int exec_non_data_cmd( unsigned char dev )
                    ;
  6174                        ;
  6175                        ;static int exec_non_data_cmd( unsigned char dev )
  6176                        ;
  6177                        ;{
  6178                        	.line	1467
  6179                        	.line	1469
  6180                        	FXHDD
  6181                        	func
  6182                        	.function	1469
  6183                        ~~exec_non_data_cmd:
  6184                        	longa	on
  6185                        	longi	on
  6186 06:A37F: 3B           	tsc
  6187 06:A380: 38           	sec
  6188 06:A381: E9 05 00     	sbc	#L200
  6189 06:A384: 1B           	tcs
  6190 06:A385: 0B           	phd
  6191 06:A386: 5B           	tcd
  6192             00000004   dev_0	set	4
  6193                        	.block	1469
  6194                        ;   unsigned char secCnt;
  6195                        ;   unsigned char secNum;
  6196                        ;   unsigned char status;
  6197                        ;   int polled = 0;
  6198                        ;
  6199                        ;   // reset Bus Master Error bit
  6200                        ;
  Sat Jul 10 2021  1:15                                                Page 119


  6201                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  6202             00000000   secCnt_1	set	0
  6203             00000001   secNum_1	set	1
  6204             00000002   status_1	set	2
  6205             00000003   polled_1	set	3
  6206                        	.sym	secCnt,0,14,1,8
  6207                        	.sym	secNum,1,14,1,8
  6208                        	.sym	status,2,14,1,8
  6209                        	.sym	polled,3,5,1,16
  6210                        	.sym	dev,4,14,6,8
  6211 06:A387: 64 04        	stz	<L201+polled_1
  6212                        	.line	1477
  6213 06:A389: F4 02 00     	pea	#<$2
  6214 06:A38C: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  6215                        ;
  6216                        ;   // Set command time out.
  6217                        ;
  6218                        ;   tmr_set_timeout();
  6219                        	.line	1481
  6220 06:A390: 22 00 BD 06  	jsl	~~tmr_set_timeout
  6221                        ;
  6222                        ;   // PAY ATTENTION HERE
  6223                        ;   // If the caller is attempting a Device Reset 
                    command, then
  6224                        ;   // don't do most of the normal stuff.  Device 
                    Reset has no
  6225                        ;   // parameters, should not generate an interrup
                    t and it is the
  6226                        ;   // only command that can be written to the Com
                    mand register
  6227                        ;   // when a device has BSY=1 (a very strange com
                    mand!).  Not
  6228                        ;   // all devices support this command (even some
                     ATAPI devices
  6229                        ;   // don't support the command.
  6230                        ;
  6231                        ;   if ( reg_cmd_info.cmd != CMD_DEVICE_RESET )
  6232                        	.line	1492
  6233                        ;   {
  6234 06:A394: E2 20        	sep	#$20
  6235                        	longa	off
  6236 06:A396: AD xx xx     	lda	|~~reg_cmd_info
  6237 06:A399: C9 08        	cmp	#<$8
  6238 06:A39B: C2 20        	rep	#$20
  6239                        	longa	on
  6240 06:A39D: D0 03        	bne	L203
  6241 06:A39F: 82 25 00     	brl	L10083
  6242                        L203:
  6243                        	.line	1493
  6244                        ;      // Select the drive - call the sub_select f
                    unction.
  6245                        ;      // Quit now if this fails.
  6246                        ;
  6247                        ;      if ( sub_select( dev ) )
  6248                        	.line	1497
  6249                        ;      {
  6250 06:A3A2: D4 09        	pei	<L200+dev_0
  6251 06:A3A4: 22 AF B4 06  	jsl	~~sub_select
  Sat Jul 10 2021  1:15                                                Page 120


  6252 06:A3A8: AA           	tax
  6253 06:A3A9: D0 03        	bne	L204
  6254 06:A3AB: 82 15 00     	brl	L10084
  6255                        L204:
  6256                        	.line	1498
  6257                        ;         return 1;
  6258                        	.line	1499
  6259 06:A3AE: A9 01 00     	lda	#$1
  6260                        L205:
  6261 06:A3B1: A8           	tay
  6262 06:A3B2: A5 07        	lda	<L200+2
  6263 06:A3B4: 85 09        	sta	<L200+2+2
  6264 06:A3B6: A5 06        	lda	<L200+1
  6265 06:A3B8: 85 08        	sta	<L200+1+2
  6266 06:A3BA: 2B           	pld
  6267 06:A3BB: 3B           	tsc
  6268 06:A3BC: 18           	clc
  6269 06:A3BD: 69 07 00     	adc	#L200+2
  6270 06:A3C0: 1B           	tcs
  6271 06:A3C1: 98           	tya
  6272 06:A3C2: 6B           	rtl
  6273                        ;      }
  6274                        	.line	1500
  6275                        ;
  6276                        ;      // Set up all the registers except the comm
                    and register.
  6277                        ;
  6278                        ;      sub_setup_command();
  6279                        L10084:
  6280                        	.line	1504
  6281 06:A3C3: 22 69 B2 06  	jsl	~~sub_setup_command
  6282                        ;   }
  6283                        	.line	1505
  6284                        ;
  6285                        ;   // Start the command by setting the Command re
                    gister.  The drive
  6286                        ;   // should immediately set BUSY status.
  6287                        ;
  6288                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  6289                        L10083:
  6290                        	.line	1510
  6291 06:A3C7: AD xx xx     	lda	|~~reg_cmd_info
  6292 06:A3CA: 48           	pha
  6293 06:A3CB: F4 07 00     	pea	#<$7
  6294 06:A3CE: 22 F0 B7 06  	jsl	~~pio_outbyte
  6295                        ;
  6296                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  6297                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  6298                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  6299                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  6300                        ;   // completed the command when it really had no
                    t even started the
  6301                        ;   // command yet.
  6302                        ;
  Sat Jul 10 2021  1:15                                                Page 121


  6303                        ;   DELAY400NS;
  6304                        	.line	1519
  6305                        	.line	1519
  6306 06:A3D2: F4 08 00     	pea	#<$8
  6307 06:A3D5: 22 B1 B7 06  	jsl	~~pio_inbyte
  6308                        	.line	1519
  6309 06:A3D9: F4 08 00     	pea	#<$8
  6310 06:A3DC: 22 B1 B7 06  	jsl	~~pio_inbyte
  6311                        	.line	1519
  6312 06:A3E0: F4 08 00     	pea	#<$8
  6313 06:A3E3: 22 B1 B7 06  	jsl	~~pio_inbyte
  6314                        	.line	1519
  6315 06:A3E7: F4 08 00     	pea	#<$8
  6316 06:A3EA: 22 B1 B7 06  	jsl	~~pio_inbyte
  6317                        	.line	1519
  6318 06:A3EE: F4 08 00     	pea	#<$8
  6319 06:A3F1: 22 B1 B7 06  	jsl	~~pio_inbyte
  6320                        	.line	1519
  6321                        	.line	1519
  6322                        ;
  6323                        ;   // IF
  6324                        ;   //    This is an Exec Dev Diag command (cmd=0x
                    90)
  6325                        ;   //    and there is no device 0 then
  6326                        ;   //    there will be no interrupt. So we must
  6327                        ;   //    poll device 1 until it allows register
  6328                        ;   //    access and then do normal polling of the
                     Status
  6329                        ;   //    register for BSY=0.
  6330                        ;   // ELSE
  6331                        ;   // IF
  6332                        ;   //    This is a Dev Reset command (cmd=0x08) t
                    hen
  6333                        ;   //    there should be no interrupt.  So we mus
                    t
  6334                        ;   //    poll for BSY=0.
  6335                        ;   // ELSE
  6336                        ;   //    Do the normal wait for interrupt or poll
                    ing for
  6337                        ;   //    completion.
  6338                        ;
  6339                        ;   if ( ( reg_cmd_info.cmd == CMD_EXECUTE_DEVICE_
                    DIAGNOSTIC )
  6340                        	.line	1537
  6341                        ;        &&
  6342                        ;        ( reg_config_info[0] == REG_CONFIG_TYPE_N
                    ONE )
  6343                        ;      )
  6344                        ;   {
  6345 06:A3F5: E2 20        	sep	#$20
  6346                        	longa	off
  6347 06:A3F7: AD xx xx     	lda	|~~reg_cmd_info
  6348 06:A3FA: C9 90        	cmp	#<$90
  6349 06:A3FC: C2 20        	rep	#$20
  6350                        	longa	on
  6351 06:A3FE: F0 03        	beq	L206
  6352 06:A400: 82 93 00     	brl	L10085
  6353                        L206:
  Sat Jul 10 2021  1:15                                                Page 122


  6354 06:A403: AD xx xx     	lda	|~~reg_config_info
  6355 06:A406: F0 03        	beq	L207
  6356 06:A408: 82 8B 00     	brl	L10085
  6357                        L207:
  6358                        	.line	1541
  6359                        ;      polled = 1;
  6360                        	.line	1542
  6361 06:A40B: A9 01 00     	lda	#$1
  6362 06:A40E: 85 04        	sta	<L201+polled_1
  6363                        ;      while ( 1 )
  6364                        	.line	1543
  6365                        L10086:
  6366                        ;      {
  6367                        	.line	1544
  6368                        ;         pio_outbyte( CB_DH, CB_DH_DEV1 );
  6369                        	.line	1545
  6370 06:A410: F4 10 00     	pea	#<$10
  6371 06:A413: F4 06 00     	pea	#<$6
  6372 06:A416: 22 F0 B7 06  	jsl	~~pio_outbyte
  6373                        ;         DELAY400NS;
  6374                        	.line	1546
  6375                        	.line	1546
  6376 06:A41A: F4 08 00     	pea	#<$8
  6377 06:A41D: 22 B1 B7 06  	jsl	~~pio_inbyte
  6378                        	.line	1546
  6379 06:A421: F4 08 00     	pea	#<$8
  6380 06:A424: 22 B1 B7 06  	jsl	~~pio_inbyte
  6381                        	.line	1546
  6382 06:A428: F4 08 00     	pea	#<$8
  6383 06:A42B: 22 B1 B7 06  	jsl	~~pio_inbyte
  6384                        	.line	1546
  6385 06:A42F: F4 08 00     	pea	#<$8
  6386 06:A432: 22 B1 B7 06  	jsl	~~pio_inbyte
  6387                        	.line	1546
  6388 06:A436: F4 08 00     	pea	#<$8
  6389 06:A439: 22 B1 B7 06  	jsl	~~pio_inbyte
  6390                        	.line	1546
  6391                        	.line	1546
  6392                        ;         secCnt = pio_inbyte( CB_SC );
  6393                        	.line	1547
  6394 06:A43D: F4 02 00     	pea	#<$2
  6395 06:A440: 22 B1 B7 06  	jsl	~~pio_inbyte
  6396 06:A444: E2 20        	sep	#$20
  6397                        	longa	off
  6398 06:A446: 85 01        	sta	<L201+secCnt_1
  6399 06:A448: C2 20        	rep	#$20
  6400                        	longa	on
  6401                        ;         secNum = pio_inbyte( CB_SN );
  6402                        	.line	1548
  6403 06:A44A: F4 03 00     	pea	#<$3
  6404 06:A44D: 22 B1 B7 06  	jsl	~~pio_inbyte
  6405 06:A451: E2 20        	sep	#$20
  6406                        	longa	off
  6407 06:A453: 85 02        	sta	<L201+secNum_1
  6408 06:A455: C2 20        	rep	#$20
  6409                        	longa	on
  6410                        ;         if ( ( secCnt == 0x01 ) && ( secNum == 0
                    x01 ) )
  Sat Jul 10 2021  1:15                                                Page 123


  6411                        	.line	1549
  6412                        ;            break;
  6413 06:A457: E2 20        	sep	#$20
  6414                        	longa	off
  6415 06:A459: A5 01        	lda	<L201+secCnt_1
  6416 06:A45B: C9 01        	cmp	#<$1
  6417 06:A45D: C2 20        	rep	#$20
  6418                        	longa	on
  6419 06:A45F: F0 03        	beq	L209
  6420 06:A461: 82 0D 00     	brl	L208
  6421                        L209:
  6422 06:A464: E2 20        	sep	#$20
  6423                        	longa	off
  6424 06:A466: A5 02        	lda	<L201+secNum_1
  6425 06:A468: C9 01        	cmp	#<$1
  6426 06:A46A: C2 20        	rep	#$20
  6427                        	longa	on
  6428 06:A46C: D0 03        	bne	L210
  6429 06:A46E: 82 22 00     	brl	L10087
  6430                        L210:
  6431                        L208:
  6432                        ;         if ( tmr_chk_timeout() )
  6433                        	.line	1551
  6434                        ;         {
  6435 06:A471: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  6436 06:A475: AA           	tax
  6437 06:A476: D0 03        	bne	L211
  6438 06:A478: 82 15 00     	brl	L10088
  6439                        L211:
  6440                        	.line	1552
  6441                        ;            reg_cmd_info.to = 1;
  6442                        	.line	1553
  6443 06:A47B: E2 20        	sep	#$20
  6444                        	longa	off
  6445 06:A47D: A9 01        	lda	#$1
  6446 06:A47F: 8D xx xx     	sta	|~~reg_cmd_info+32
  6447 06:A482: C2 20        	rep	#$20
  6448                        	longa	on
  6449                        ;            reg_cmd_info.ec = 24;
  6450                        	.line	1554
  6451 06:A484: E2 20        	sep	#$20
  6452                        	longa	off
  6453 06:A486: A9 18        	lda	#$18
  6454 06:A488: 8D xx xx     	sta	|~~reg_cmd_info+31
  6455 06:A48B: C2 20        	rep	#$20
  6456                        	longa	on
  6457                        ;            break;
  6458                        	.line	1555
  6459 06:A48D: 82 03 00     	brl	L10087
  6460                        ;         }
  6461                        	.line	1556
  6462                        ;      }
  6463                        L10088:
  6464                        	.line	1557
  6465 06:A490: 82 7D FF     	brl	L10086
  6466                        L10087:
  6467                        ;   }
  6468                        	.line	1558
  Sat Jul 10 2021  1:15                                                Page 124


  6469                        ;   else
  6470 06:A493: 82 3A 00     	brl	L10089
  6471                        L10085:
  6472                        ;   {
  6473                        	.line	1560
  6474                        ;      if ( reg_cmd_info.cmd == CMD_DEVICE_RESET )
  6475                        	.line	1561
  6476                        ;      {
  6477 06:A496: E2 20        	sep	#$20
  6478                        	longa	off
  6479 06:A498: AD xx xx     	lda	|~~reg_cmd_info
  6480 06:A49B: C9 08        	cmp	#<$8
  6481 06:A49D: C2 20        	rep	#$20
  6482                        	longa	on
  6483 06:A49F: F0 03        	beq	L212
  6484 06:A4A1: 82 12 00     	brl	L10090
  6485                        L212:
  6486                        	.line	1562
  6487                        ;         // Wait for not BUSY -or- wait for time 
                    out.
  6488                        ;
  6489                        ;         polled = 1;
  6490                        	.line	1565
  6491 06:A4A4: A9 01 00     	lda	#$1
  6492 06:A4A7: 85 04        	sta	<L201+polled_1
  6493                        ;         sub_wait_poll( 0, 23 );
  6494                        	.line	1566
  6495 06:A4A9: F4 17 00     	pea	#<$17
  6496 06:A4AC: F4 00 00     	pea	#<$0
  6497 06:A4AF: 22 3F B6 06  	jsl	~~sub_wait_poll
  6498                        ;      }
  6499                        	.line	1567
  6500                        ;      else
  6501 06:A4B3: 82 1A 00     	brl	L10091
  6502                        L10090:
  6503                        ;      {
  6504                        	.line	1569
  6505                        ;         // Wait for interrupt -or- wait for not 
                    BUSY -or- wait for time out.
  6506                        ;
  6507                        ;         if ( ! int_use_intr_flag )
  6508                        	.line	1572
  6509                        ;            polled = 1;
  6510 06:A4B6: AD xx xx     	lda	|~~int_use_intr_flag
  6511 06:A4B9: 29 FF 00     	and	#$ff
  6512 06:A4BC: F0 03        	beq	L213
  6513 06:A4BE: 82 05 00     	brl	L10092
  6514                        L213:
  6515                        	.line	1573
  6516 06:A4C1: A9 01 00     	lda	#$1
  6517 06:A4C4: 85 04        	sta	<L201+polled_1
  6518                        ;         sub_wait_poll( 22, 23 );
  6519                        L10092:
  6520                        	.line	1574
  6521 06:A4C6: F4 17 00     	pea	#<$17
  6522 06:A4C9: F4 16 00     	pea	#<$16
  6523 06:A4CC: 22 3F B6 06  	jsl	~~sub_wait_poll
  6524                        ;      }
  Sat Jul 10 2021  1:15                                                Page 125


  6525                        	.line	1575
  6526                        L10091:
  6527                        ;   }
  6528                        	.line	1576
  6529                        L10089:
  6530                        ;
  6531                        ;   // If status was polled or if any error read t
                    he status register,
  6532                        ;   // otherwise get the status that was read by t
                    he interrupt handler.
  6533                        ;
  6534                        ;   if ( ( polled ) || ( reg_cmd_info.ec ) )
  6535                        	.line	1581
  6536                        ;      status = pio_inbyte( CB_STAT );
  6537 06:A4D0: A5 04        	lda	<L201+polled_1
  6538 06:A4D2: F0 03        	beq	L215
  6539 06:A4D4: 82 0B 00     	brl	L214
  6540                        L215:
  6541 06:A4D7: AD xx xx     	lda	|~~reg_cmd_info+31
  6542 06:A4DA: 29 FF 00     	and	#$ff
  6543 06:A4DD: D0 03        	bne	L216
  6544 06:A4DF: 82 10 00     	brl	L10093
  6545                        L216:
  6546                        L214:
  6547                        	.line	1582
  6548 06:A4E2: F4 07 00     	pea	#<$7
  6549 06:A4E5: 22 B1 B7 06  	jsl	~~pio_inbyte
  6550 06:A4E9: E2 20        	sep	#$20
  6551                        	longa	off
  6552 06:A4EB: 85 03        	sta	<L201+status_1
  6553 06:A4ED: C2 20        	rep	#$20
  6554                        	longa	on
  6555                        ;   else
  6556 06:A4EF: 82 09 00     	brl	L10094
  6557                        L10093:
  6558                        ;      status = int_ata_status;
  6559                        	.line	1584
  6560 06:A4F2: E2 20        	sep	#$20
  6561                        	longa	off
  6562 06:A4F4: AD xx xx     	lda	|~~int_ata_status
  6563 06:A4F7: 85 03        	sta	<L201+status_1
  6564 06:A4F9: C2 20        	rep	#$20
  6565                        	longa	on
  6566                        L10094:
  6567                        ;
  6568                        ;   // Error if BUSY, DEVICE FAULT, DRQ or ERROR s
                    tatus now.
  6569                        ;
  6570                        ;   if ( reg_cmd_info.ec == 0 )
  6571                        	.line	1588
  6572                        ;   {
  6573 06:A4FB: AD xx xx     	lda	|~~reg_cmd_info+31
  6574 06:A4FE: 29 FF 00     	and	#$ff
  6575 06:A501: F0 03        	beq	L217
  6576 06:A503: 82 16 00     	brl	L10095
  6577                        L217:
  6578                        	.line	1589
  6579                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
  Sat Jul 10 2021  1:15                                                Page 126


                    CB_STAT_DRQ | CB_STAT_ERR ) )
  6580                        	.line	1590
  6581                        ;      {
  6582 06:A506: E2 20        	sep	#$20
  6583                        	longa	off
  6584 06:A508: A5 03        	lda	<L201+status_1
  6585 06:A50A: 29 A9        	and	#<$a9
  6586 06:A50C: C2 20        	rep	#$20
  6587                        	longa	on
  6588 06:A50E: D0 03        	bne	L218
  6589 06:A510: 82 09 00     	brl	L10096
  6590                        L218:
  6591                        	.line	1591
  6592                        ;         reg_cmd_info.ec = 21;
  6593                        	.line	1592
  6594 06:A513: E2 20        	sep	#$20
  6595                        	longa	off
  6596 06:A515: A9 15        	lda	#$15
  6597 06:A517: 8D xx xx     	sta	|~~reg_cmd_info+31
  6598 06:A51A: C2 20        	rep	#$20
  6599                        	longa	on
  6600                        ;      }
  6601                        	.line	1593
  6602                        ;   }
  6603                        L10096:
  6604                        	.line	1594
  6605                        ;
  6606                        ;   // BMIDE Error=1?
  6607                        ;
  6608                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  6609                        L10095:
  6610                        	.line	1598
  6611                        ;   {
  6612 06:A51C: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  6613 06:A520: E2 20        	sep	#$20
  6614                        	longa	off
  6615 06:A522: 29 02        	and	#<$2
  6616 06:A524: C2 20        	rep	#$20
  6617                        	longa	on
  6618 06:A526: D0 03        	bne	L219
  6619 06:A528: 82 09 00     	brl	L10097
  6620                        L219:
  6621                        	.line	1599
  6622                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  6623                        	.line	1600
  6624 06:A52B: E2 20        	sep	#$20
  6625                        	longa	off
  6626 06:A52D: A9 4E        	lda	#$4e
  6627 06:A52F: 8D xx xx     	sta	|~~reg_cmd_info+31
  6628 06:A532: C2 20        	rep	#$20
  6629                        	longa	on
  6630                        ;   }
  6631                        	.line	1601
  6632                        ;
  6633                        ;   // NON_DATA_DONE:
  6634                        ;
  Sat Jul 10 2021  1:15                                                Page 127


  6635                        ;   // All done.  The return values of this functi
                    on are described in
  6636                        ;   // MINDRVR.H.
  6637                        ;
  6638                        ;   sub_trace_command();
  6639                        L10097:
  6640                        	.line	1608
  6641 06:A534: 22 4B B4 06  	jsl	~~sub_trace_command
  6642                        ;   if ( reg_cmd_info.ec )
  6643                        	.line	1609
  6644                        ;      return 1;
  6645 06:A538: AD xx xx     	lda	|~~reg_cmd_info+31
  6646 06:A53B: 29 FF 00     	and	#$ff
  6647 06:A53E: D0 03        	bne	L220
  6648 06:A540: 82 06 00     	brl	L10098
  6649                        L220:
  6650                        	.line	1610
  6651 06:A543: A9 01 00     	lda	#$1
  6652 06:A546: 82 68 FE     	brl	L205
  6653                        ;   return 0;
  6654                        L10098:
  6655                        	.line	1611
  6656 06:A549: A9 00 00     	lda	#$0
  6657 06:A54C: 82 62 FE     	brl	L205
  6658                        ;}
  6659                        	.line	1612
  6660                        	.endblock	1612
  6661             00000005   L200	equ	5
  6662             00000001   L201	equ	1
  6663 06:A54F:              	ends
  6664                        	efunc
  6665                        	.endfunc	1612,1,5
  6666                        	.line	1612
  6667                        ;
  6668                        ;//***********************************************
                    **************
  6669                        ;//
  6670                        ;// reg_non_data_lba28() - Easy way to execute a n
                    on-data command
  6671                        ;//                        using an LBA sector add
                    ress.
  6672                        ;//
  6673                        ;//***********************************************
                    **************
  6674                        ;
  6675                        ;int reg_non_data_lba28( unsigned char dev, unsign
                    ed char cmd,
  6676                        ;                        unsigned int fr, unsigned
                     int sc,
  6677                        ;                        unsigned long lba )
  6678                        ;
  6679                        ;{
  6680                        	.line	1621
  6681                        	.line	1625
  6682                        	FXHDD
  6683                        	xdef	~~reg_non_data_lba28
  6684                        	func
  6685                        	.function	1625
  Sat Jul 10 2021  1:15                                                Page 128


  6686                        ~~reg_non_data_lba28:
  6687                        	longa	on
  6688                        	longi	on
  6689 06:A54F: 3B           	tsc
  6690 06:A550: 38           	sec
  6691 06:A551: E9 04 00     	sbc	#L221
  6692 06:A554: 1B           	tcs
  6693 06:A555: 0B           	phd
  6694 06:A556: 5B           	tcd
  6695             00000004   dev_0	set	4
  6696             00000006   cmd_0	set	6
  6697             00000008   fr_0	set	8
  6698             0000000A   sc_0	set	10
  6699             0000000C   lba_0	set	12
  6700                        	.block	1625
  6701                        ;
  6702                        ;   // Setup current command information.
  6703                        ;
  6704                        ;   reg_cmd_info.cmd = cmd;
  6705                        	.sym	dev,4,14,6,8
  6706                        	.sym	cmd,6,14,6,8
  6707                        	.sym	fr,8,16,6,16
  6708                        	.sym	sc,10,16,6,16
  6709                        	.sym	lba,12,18,6,32
  6710                        	.line	1629
  6711 06:A557: E2 20        	sep	#$20
  6712                        	longa	off
  6713 06:A559: A5 0A        	lda	<L221+cmd_0
  6714 06:A55B: 8D xx xx     	sta	|~~reg_cmd_info
  6715 06:A55E: C2 20        	rep	#$20
  6716                        	longa	on
  6717                        ;   reg_cmd_info.fr = fr;
  6718                        	.line	1630
  6719 06:A560: A5 0C        	lda	<L221+fr_0
  6720 06:A562: 8D xx xx     	sta	|~~reg_cmd_info+1
  6721                        ;   reg_cmd_info.sc = sc;
  6722                        	.line	1631
  6723 06:A565: A5 0E        	lda	<L221+sc_0
  6724 06:A567: 8D xx xx     	sta	|~~reg_cmd_info+3
  6725                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  6726                        	.line	1632
  6727 06:A56A: A5 08        	lda	<L221+dev_0
  6728 06:A56C: 29 FF 00     	and	#$ff
  6729 06:A56F: D0 03        	bne	L225
  6730 06:A571: 82 05 00     	brl	L224
  6731                        L225:
  6732 06:A574: A9 10 00     	lda	#$10
  6733 06:A577: 80 03        	bra	L226
  6734                        L224:
  6735 06:A579: A9 00 00     	lda	#$0
  6736                        L226:
  6737 06:A57C: 09 40 00     	ora	#<$40
  6738 06:A57F: 85 01        	sta	<R0
  6739 06:A581: E2 20        	sep	#$20
  6740                        	longa	off
  6741 06:A583: A5 01        	lda	<R0
  6742 06:A585: 8D xx xx     	sta	|~~reg_cmd_info+11
  Sat Jul 10 2021  1:15                                                Page 129


  6743 06:A588: C2 20        	rep	#$20
  6744                        	longa	on
  6745                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  6746                        	.line	1633
  6747 06:A58A: AD xx xx     	lda	|~~int_use_intr_flag
  6748 06:A58D: 29 FF 00     	and	#$ff
  6749 06:A590: D0 03        	bne	L228
  6750 06:A592: 82 05 00     	brl	L227
  6751                        L228:
  6752 06:A595: A9 00 00     	lda	#$0
  6753 06:A598: 80 03        	bra	L229
  6754                        L227:
  6755 06:A59A: A9 02 00     	lda	#$2
  6756                        L229:
  6757 06:A59D: 85 01        	sta	<R0
  6758 06:A59F: E2 20        	sep	#$20
  6759                        	longa	off
  6760 06:A5A1: A5 01        	lda	<R0
  6761 06:A5A3: 8D xx xx     	sta	|~~reg_cmd_info+12
  6762 06:A5A6: C2 20        	rep	#$20
  6763                        	longa	on
  6764                        ;   reg_cmd_info.ns  = sc;
  6765                        	.line	1634
  6766 06:A5A8: A5 0E        	lda	<L221+sc_0
  6767 06:A5AA: 8D xx xx     	sta	|~~reg_cmd_info+13
  6768 06:A5AD: 9C xx xx     	stz	|~~reg_cmd_info+13+2
  6769                        ;   reg_cmd_info.lbaSize = LBA28;
  6770                        	.line	1635
  6771 06:A5B0: E2 20        	sep	#$20
  6772                        	longa	off
  6773 06:A5B2: A9 1C        	lda	#$1c
  6774 06:A5B4: 8D xx xx     	sta	|~~reg_cmd_info+19
  6775 06:A5B7: C2 20        	rep	#$20
  6776                        	longa	on
  6777                        ;   reg_cmd_info.lbaHigh = 0L;
  6778                        	.line	1636
  6779 06:A5B9: 9C xx xx     	stz	|~~reg_cmd_info+24
  6780 06:A5BC: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  6781                        ;   reg_cmd_info.lbaLow = lba;
  6782                        	.line	1637
  6783 06:A5BF: A5 10        	lda	<L221+lba_0
  6784 06:A5C1: 8D xx xx     	sta	|~~reg_cmd_info+20
  6785 06:A5C4: A5 12        	lda	<L221+lba_0+2
  6786 06:A5C6: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  6787                        ;
  6788                        ;   // Execute the command.
  6789                        ;
  6790                        ;   return exec_non_data_cmd( dev );
  6791                        	.line	1641
  6792 06:A5C9: D4 08        	pei	<L221+dev_0
  6793 06:A5CB: 22 7F A3 06  	jsl	~~exec_non_data_cmd
  6794                        L230:
  6795 06:A5CF: A8           	tay
  6796 06:A5D0: A5 06        	lda	<L221+2
  6797 06:A5D2: 85 12        	sta	<L221+2+12
  6798 06:A5D4: A5 05        	lda	<L221+1
  6799 06:A5D6: 85 11        	sta	<L221+1+12
  Sat Jul 10 2021  1:15                                                Page 130


  6800 06:A5D8: 2B           	pld
  6801 06:A5D9: 3B           	tsc
  6802 06:A5DA: 18           	clc
  6803 06:A5DB: 69 10 00     	adc	#L221+12
  6804 06:A5DE: 1B           	tcs
  6805 06:A5DF: 98           	tya
  6806 06:A5E0: 6B           	rtl
  6807                        ;}
  6808                        	.line	1642
  6809                        	.endblock	1642
  6810             00000004   L221	equ	4
  6811             00000005   L222	equ	5
  6812 06:A5E1:              	ends
  6813                        	efunc
  6814                        	.endfunc	1642,5,4
  6815                        	.line	1642
  6816                        ;
  6817                        ;//***********************************************
                    **************
  6818                        ;//
  6819                        ;// reg_non_data_lba48() - Easy way to execute a n
                    on-data command
  6820                        ;//                        using an LBA sector add
                    ress.
  6821                        ;//
  6822                        ;//***********************************************
                    **************
  6823                        ;
  6824                        ;int reg_non_data_lba48( unsigned char dev, unsign
                    ed char cmd,
  6825                        ;                        unsigned int fr, unsigned
                     int sc,
  6826                        ;                        unsigned long lbahi, unsi
                    gned long lbalo )
  6827                        ;
  6828                        ;{
  6829                        	.line	1651
  6830                        	.line	1655
  6831                        	FXHDD
  6832                        	xdef	~~reg_non_data_lba48
  6833                        	func
  6834                        	.function	1655
  6835                        ~~reg_non_data_lba48:
  6836                        	longa	on
  6837                        	longi	on
  6838 06:A5E1: 3B           	tsc
  6839 06:A5E2: 38           	sec
  6840 06:A5E3: E9 04 00     	sbc	#L231
  6841 06:A5E6: 1B           	tcs
  6842 06:A5E7: 0B           	phd
  6843 06:A5E8: 5B           	tcd
  6844             00000004   dev_0	set	4
  6845             00000006   cmd_0	set	6
  6846             00000008   fr_0	set	8
  6847             0000000A   sc_0	set	10
  6848             0000000C   lbahi_0	set	12
  6849             00000010   lbalo_0	set	16
  6850                        	.block	1655
  Sat Jul 10 2021  1:15                                                Page 131


  6851                        ;
  6852                        ;   // Setup current command infomation.
  6853                        ;
  6854                        ;   reg_cmd_info.cmd = cmd;
  6855                        	.sym	dev,4,14,6,8
  6856                        	.sym	cmd,6,14,6,8
  6857                        	.sym	fr,8,16,6,16
  6858                        	.sym	sc,10,16,6,16
  6859                        	.sym	lbahi,12,18,6,32
  6860                        	.sym	lbalo,16,18,6,32
  6861                        	.line	1659
  6862 06:A5E9: E2 20        	sep	#$20
  6863                        	longa	off
  6864 06:A5EB: A5 0A        	lda	<L231+cmd_0
  6865 06:A5ED: 8D xx xx     	sta	|~~reg_cmd_info
  6866 06:A5F0: C2 20        	rep	#$20
  6867                        	longa	on
  6868                        ;   reg_cmd_info.fr = fr;
  6869                        	.line	1660
  6870 06:A5F2: A5 0C        	lda	<L231+fr_0
  6871 06:A5F4: 8D xx xx     	sta	|~~reg_cmd_info+1
  6872                        ;   reg_cmd_info.sc = sc;
  6873                        	.line	1661
  6874 06:A5F7: A5 0E        	lda	<L231+sc_0
  6875 06:A5F9: 8D xx xx     	sta	|~~reg_cmd_info+3
  6876                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  6877                        	.line	1662
  6878 06:A5FC: A5 08        	lda	<L231+dev_0
  6879 06:A5FE: 29 FF 00     	and	#$ff
  6880 06:A601: D0 03        	bne	L235
  6881 06:A603: 82 05 00     	brl	L234
  6882                        L235:
  6883 06:A606: A9 10 00     	lda	#$10
  6884 06:A609: 80 03        	bra	L236
  6885                        L234:
  6886 06:A60B: A9 00 00     	lda	#$0
  6887                        L236:
  6888 06:A60E: 09 40 00     	ora	#<$40
  6889 06:A611: 85 01        	sta	<R0
  6890 06:A613: E2 20        	sep	#$20
  6891                        	longa	off
  6892 06:A615: A5 01        	lda	<R0
  6893 06:A617: 8D xx xx     	sta	|~~reg_cmd_info+11
  6894 06:A61A: C2 20        	rep	#$20
  6895                        	longa	on
  6896                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  6897                        	.line	1663
  6898 06:A61C: AD xx xx     	lda	|~~int_use_intr_flag
  6899 06:A61F: 29 FF 00     	and	#$ff
  6900 06:A622: D0 03        	bne	L238
  6901 06:A624: 82 05 00     	brl	L237
  6902                        L238:
  6903 06:A627: A9 00 00     	lda	#$0
  6904 06:A62A: 80 03        	bra	L239
  6905                        L237:
  6906 06:A62C: A9 02 00     	lda	#$2
  Sat Jul 10 2021  1:15                                                Page 132


  6907                        L239:
  6908 06:A62F: 85 01        	sta	<R0
  6909 06:A631: E2 20        	sep	#$20
  6910                        	longa	off
  6911 06:A633: A5 01        	lda	<R0
  6912 06:A635: 8D xx xx     	sta	|~~reg_cmd_info+12
  6913 06:A638: C2 20        	rep	#$20
  6914                        	longa	on
  6915                        ;   reg_cmd_info.ns  = sc;
  6916                        	.line	1664
  6917 06:A63A: A5 0E        	lda	<L231+sc_0
  6918 06:A63C: 8D xx xx     	sta	|~~reg_cmd_info+13
  6919 06:A63F: 9C xx xx     	stz	|~~reg_cmd_info+13+2
  6920                        ;   reg_cmd_info.lbaSize = LBA48;
  6921                        	.line	1665
  6922 06:A642: E2 20        	sep	#$20
  6923                        	longa	off
  6924 06:A644: A9 30        	lda	#$30
  6925 06:A646: 8D xx xx     	sta	|~~reg_cmd_info+19
  6926 06:A649: C2 20        	rep	#$20
  6927                        	longa	on
  6928                        ;   reg_cmd_info.lbaHigh = lbahi;
  6929                        	.line	1666
  6930 06:A64B: A5 10        	lda	<L231+lbahi_0
  6931 06:A64D: 8D xx xx     	sta	|~~reg_cmd_info+24
  6932 06:A650: A5 12        	lda	<L231+lbahi_0+2
  6933 06:A652: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  6934                        ;   reg_cmd_info.lbaLow = lbalo;
  6935                        	.line	1667
  6936 06:A655: A5 14        	lda	<L231+lbalo_0
  6937 06:A657: 8D xx xx     	sta	|~~reg_cmd_info+20
  6938 06:A65A: A5 16        	lda	<L231+lbalo_0+2
  6939 06:A65C: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  6940                        ;
  6941                        ;   // Execute the command.
  6942                        ;
  6943                        ;   return exec_non_data_cmd( dev );
  6944                        	.line	1671
  6945 06:A65F: D4 08        	pei	<L231+dev_0
  6946 06:A661: 22 7F A3 06  	jsl	~~exec_non_data_cmd
  6947                        L240:
  6948 06:A665: A8           	tay
  6949 06:A666: A5 06        	lda	<L231+2
  6950 06:A668: 85 16        	sta	<L231+2+16
  6951 06:A66A: A5 05        	lda	<L231+1
  6952 06:A66C: 85 15        	sta	<L231+1+16
  6953 06:A66E: 2B           	pld
  6954 06:A66F: 3B           	tsc
  6955 06:A670: 18           	clc
  6956 06:A671: 69 14 00     	adc	#L231+16
  6957 06:A674: 1B           	tcs
  6958 06:A675: 98           	tya
  6959 06:A676: 6B           	rtl
  6960                        ;}
  6961                        	.line	1672
  6962                        	.endblock	1672
  6963             00000004   L231	equ	4
  6964             00000005   L232	equ	5
  Sat Jul 10 2021  1:15                                                Page 133


  6965 06:A677:              	ends
  6966                        	efunc
  6967                        	.endfunc	1672,5,4
  6968                        	.line	1672
  6969                        ;
  6970                        ;//***********************************************
                    **************
  6971                        ;//
  6972                        ;// exec_pio_data_in_cmd() - Execute a PIO Data In
                     command.
  6973                        ;//
  6974                        ;// See ATA-2 Section 9.3, ATA-3 Section 9.3,
  6975                        ;// ATA-4 Section 8.6 Figure 10.
  6976                        ;//
  6977                        ;//***********************************************
                    **************
  6978                        ;
  6979                        ;
  6980                        ;
  6981                        ; int exec_pio_data_in_cmd( unsigned char dev,
  6982                        ;                            unsigned char * bufAd
                    dr,
  6983                        ;                            long numSect, int mul
                    tiCnt )
  6984                        ;
  6985                        ;{
  6986                        	.line	1685
  6987                        	.line	1689
  6988                        	FXHDD
  6989                        	xdef	~~exec_pio_data_in_cmd
  6990                        	func
  6991                        	.function	1689
  6992                        ~~exec_pio_data_in_cmd:
  6993                        	longa	on
  6994                        	longi	on
  6995 06:A677: 3B           	tsc
  6996 06:A678: 38           	sec
  6997 06:A679: E9 09 00     	sbc	#L241
  6998 06:A67C: 1B           	tcs
  6999 06:A67D: 0B           	phd
  7000 06:A67E: 5B           	tcd
  7001             00000004   dev_0	set	4
  7002             00000006   bufAddr_0	set	6
  7003             0000000A   numSect_0	set	10
  7004             0000000E   multiCnt_0	set	14
  7005                        	.block	1689
  7006                        ;   unsigned char status;
  7007                        ;   long wordCnt;
  7008                        ;
  7009                        ;   // reset Bus Master Error bit
  7010                        ;
  7011                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  7012             00000000   status_1	set	0
  7013             00000001   wordCnt_1	set	1
  7014                        	.sym	status,0,14,1,8
  7015                        	.sym	wordCnt,1,7,1,32
  7016                        	.sym	dev,4,14,6,8
  7017                        	.sym	bufAddr,6,142,6,32
  Sat Jul 10 2021  1:15                                                Page 134


  7018                        	.sym	numSect,10,7,6,32
  7019                        	.sym	multiCnt,14,5,6,16
  7020                        	.line	1695
  7021 06:A67F: F4 02 00     	pea	#<$2
  7022 06:A682: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  7023                        ;
  7024                        ;   // Set command time out.
  7025                        ;
  7026                        ;   tmr_set_timeout();
  7027                        	.line	1699
  7028 06:A686: 22 00 BD 06  	jsl	~~tmr_set_timeout
  7029                        ;
  7030                        ;   // Select the drive - call the sub_select func
                    tion.
  7031                        ;   // Quit now if this fails.
  7032                        ;
  7033                        ;   if ( sub_select( dev ) )
  7034                        	.line	1704
  7035                        ;   {
  7036 06:A68A: D4 0D        	pei	<L241+dev_0
  7037 06:A68C: 22 AF B4 06  	jsl	~~sub_select
  7038 06:A690: AA           	tax
  7039 06:A691: D0 03        	bne	L244
  7040 06:A693: 82 15 00     	brl	L10099
  7041                        L244:
  7042                        	.line	1705
  7043                        ;      return 1;
  7044                        	.line	1706
  7045 06:A696: A9 01 00     	lda	#$1
  7046                        L245:
  7047 06:A699: A8           	tay
  7048 06:A69A: A5 0B        	lda	<L241+2
  7049 06:A69C: 85 17        	sta	<L241+2+12
  7050 06:A69E: A5 0A        	lda	<L241+1
  7051 06:A6A0: 85 16        	sta	<L241+1+12
  7052 06:A6A2: 2B           	pld
  7053 06:A6A3: 3B           	tsc
  7054 06:A6A4: 18           	clc
  7055 06:A6A5: 69 15 00     	adc	#L241+12
  7056 06:A6A8: 1B           	tcs
  7057 06:A6A9: 98           	tya
  7058 06:A6AA: 6B           	rtl
  7059                        ;   }
  7060                        	.line	1707
  7061                        ;
  7062                        ;   // Set up all the registers except the command
                     register.
  7063                        ;
  7064                        ;   sub_setup_command();
  7065                        L10099:
  7066                        	.line	1711
  7067 06:A6AB: 22 69 B2 06  	jsl	~~sub_setup_command
  7068                        ;
  7069                        ;   // Start the command by setting the Command re
                    gister.  The drive
  7070                        ;   // should immediately set BUSY status.
  7071                        ;
  7072                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  Sat Jul 10 2021  1:15                                                Page 135


  7073                        	.line	1716
  7074 06:A6AF: AD xx xx     	lda	|~~reg_cmd_info
  7075 06:A6B2: 48           	pha
  7076 06:A6B3: F4 07 00     	pea	#<$7
  7077 06:A6B6: 22 F0 B7 06  	jsl	~~pio_outbyte
  7078                        ;
  7079                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  7080                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  7081                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  7082                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  7083                        ;   // completed the command when it really had no
                    t even started the
  7084                        ;   // command yet.
  7085                        ;
  7086                        ;   DELAY400NS;
  7087                        	.line	1725
  7088                        	.line	1725
  7089 06:A6BA: F4 08 00     	pea	#<$8
  7090 06:A6BD: 22 B1 B7 06  	jsl	~~pio_inbyte
  7091                        	.line	1725
  7092 06:A6C1: F4 08 00     	pea	#<$8
  7093 06:A6C4: 22 B1 B7 06  	jsl	~~pio_inbyte
  7094                        	.line	1725
  7095 06:A6C8: F4 08 00     	pea	#<$8
  7096 06:A6CB: 22 B1 B7 06  	jsl	~~pio_inbyte
  7097                        	.line	1725
  7098 06:A6CF: F4 08 00     	pea	#<$8
  7099 06:A6D2: 22 B1 B7 06  	jsl	~~pio_inbyte
  7100                        	.line	1725
  7101 06:A6D6: F4 08 00     	pea	#<$8
  7102 06:A6D9: 22 B1 B7 06  	jsl	~~pio_inbyte
  7103                        	.line	1725
  7104                        	.line	1725
  7105                        ;
  7106                        ;   // Loop to read each sector.
  7107                        ;
  7108                        ;   while ( 1 )
  7109                        	.line	1729
  7110                        L10100:
  7111                        ;   {
  7112                        	.line	1730
  7113                        ;      // READ_LOOP:
  7114                        ;      //
  7115                        ;      // NOTE NOTE NOTE ...  The primary status r
                    egister (1f7) MUST NOT be
  7116                        ;      // read more than ONCE for each sector tran
                    sferred!  When the
  7117                        ;      // primary status register is read, the dri
                    ve resets IRQ.  The
  7118                        ;      // alternate status register (3f6) can be r
                    ead any number of times.
  7119                        ;      // After interrupt read the the primary sta
                    tus register ONCE
  7120                        ;      // and transfer the 256 words (REP INSW).  
  Sat Jul 10 2021  1:15                                                Page 136


                    AS SOON as BOTH the
  7121                        ;      // primary status register has been read AN
                    D the last of the 256
  7122                        ;      // words has been read, the drive is allowe
                    d to generate the next
  7123                        ;      // IRQ (newer and faster drives could gener
                    ate the next IRQ in
  7124                        ;      // 50 microseconds or less).  If the primar
                    y status register is read
  7125                        ;      // more than once, there is the possibility
                     of a race between the
  7126                        ;      // drive and the software and the next IRQ 
                    could be reset before
  7127                        ;      // the system interrupt controller sees it.
  7128                        ;
  7129                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  7130                        ;
  7131                        ;      sub_wait_poll( 34, 35 );
  7132                        	.line	1749
  7133 06:A6DD: F4 23 00     	pea	#<$23
  7134 06:A6E0: F4 22 00     	pea	#<$22
  7135 06:A6E3: 22 3F B6 06  	jsl	~~sub_wait_poll
  7136                        ;
  7137                        ;      // If polling or error read the status, oth
                    erwise
  7138                        ;      // get the status that was read by the inte
                    rrupt handler.
  7139                        ;
  7140                        ;      if ( ( ! int_use_intr_flag ) || ( reg_cmd_i
                    nfo.ec ) )
  7141                        	.line	1754
  7142                        ;         status = pio_inbyte( CB_STAT );
  7143 06:A6E7: AD xx xx     	lda	|~~int_use_intr_flag
  7144 06:A6EA: 29 FF 00     	and	#$ff
  7145 06:A6ED: D0 03        	bne	L247
  7146 06:A6EF: 82 0B 00     	brl	L246
  7147                        L247:
  7148 06:A6F2: AD xx xx     	lda	|~~reg_cmd_info+31
  7149 06:A6F5: 29 FF 00     	and	#$ff
  7150 06:A6F8: D0 03        	bne	L248
  7151 06:A6FA: 82 10 00     	brl	L10102
  7152                        L248:
  7153                        L246:
  7154                        	.line	1755
  7155 06:A6FD: F4 07 00     	pea	#<$7
  7156 06:A700: 22 B1 B7 06  	jsl	~~pio_inbyte
  7157 06:A704: E2 20        	sep	#$20
  7158                        	longa	off
  7159 06:A706: 85 05        	sta	<L242+status_1
  7160 06:A708: C2 20        	rep	#$20
  7161                        	longa	on
  7162                        ;      else
  7163 06:A70A: 82 09 00     	brl	L10103
  7164                        L10102:
  7165                        ;         status = int_ata_status;
  7166                        	.line	1757
  7167 06:A70D: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 137


  7168                        	longa	off
  7169 06:A70F: AD xx xx     	lda	|~~int_ata_status
  7170 06:A712: 85 05        	sta	<L242+status_1
  7171 06:A714: C2 20        	rep	#$20
  7172                        	longa	on
  7173                        L10103:
  7174                        ;
  7175                        ;      // If there was a time out error, go to REA
                    D_DONE.
  7176                        ;
  7177                        ;      if ( reg_cmd_info.ec )
  7178                        	.line	1761
  7179                        ;         break;   // go to READ_DONE
  7180 06:A716: AD xx xx     	lda	|~~reg_cmd_info+31
  7181 06:A719: 29 FF 00     	and	#$ff
  7182 06:A71C: F0 03        	beq	L249
  7183 06:A71E: 82 75 01     	brl	L10101
  7184                        L249:
  7185                        ;
  7186                        ;      // If BSY=0 and DRQ=1, transfer the data,
  7187                        ;      // even if we find out there is an error la
                    ter.
  7188                        ;
  7189                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == CB_STAT_DRQ )
  7190                        	.line	1767
  7191                        ;      {
  7192 06:A721: A5 05        	lda	<L242+status_1
  7193 06:A723: 29 88 00     	and	#<$88
  7194 06:A726: 85 01        	sta	<R0
  7195 06:A728: A5 01        	lda	<R0
  7196 06:A72A: C9 08 00     	cmp	#<$8
  7197 06:A72D: F0 03        	beq	L250
  7198 06:A72F: 82 F6 00     	brl	L10104
  7199                        L250:
  7200                        	.line	1768
  7201                        ;
  7202                        ;         // increment number of DRQ packets
  7203                        ;
  7204                        ;         reg_cmd_info.drqPackets ++ ;
  7205                        	.line	1772
  7206 06:A732: EE xx xx     	inc	|~~reg_cmd_info+37
  7207 06:A735: D0 03        	bne	L251
  7208 06:A737: EE xx xx     	inc	|~~reg_cmd_info+37+2
  7209                        L251:
  7210                        ;
  7211                        ;         // determine the number of sectors to tr
                    ansfer
  7212                        ;
  7213                        ;         wordCnt = multiCnt ? multiCnt : 1;
  7214                        	.line	1776
  7215 06:A73A: A5 17        	lda	<L241+multiCnt_0
  7216 06:A73C: D0 03        	bne	L253
  7217 06:A73E: 82 04 00     	brl	L252
  7218                        L253:
  7219 06:A741: A5 17        	lda	<L241+multiCnt_0
  7220 06:A743: 80 03        	bra	L254
  7221                        L252:
  Sat Jul 10 2021  1:15                                                Page 138


  7222 06:A745: A9 01 00     	lda	#$1
  7223                        L254:
  7224 06:A748: 85 01        	sta	<R0
  7225 06:A74A: A0 00 00     	ldy	#$0
  7226 06:A74D: A5 01        	lda	<R0
  7227 06:A74F: 10 01        	bpl	L255
  7228 06:A751: 88           	dey
  7229                        L255:
  7230 06:A752: 85 06        	sta	<L242+wordCnt_1
  7231 06:A754: 84 08        	sty	<L242+wordCnt_1+2
  7232                        ;         if ( wordCnt > numSect )
  7233                        	.line	1777
  7234                        ;            wordCnt = numSect;
  7235 06:A756: 38           	sec
  7236 06:A757: A5 13        	lda	<L241+numSect_0
  7237 06:A759: E5 06        	sbc	<L242+wordCnt_1
  7238 06:A75B: A5 15        	lda	<L241+numSect_0+2
  7239 06:A75D: E5 08        	sbc	<L242+wordCnt_1+2
  7240 06:A75F: 70 03        	bvs	L256
  7241 06:A761: 49 00 80     	eor	#$8000
  7242                        L256:
  7243 06:A764: 10 03        	bpl	L257
  7244 06:A766: 82 08 00     	brl	L10105
  7245                        L257:
  7246                        	.line	1778
  7247 06:A769: A5 13        	lda	<L241+numSect_0
  7248 06:A76B: 85 06        	sta	<L242+wordCnt_1
  7249 06:A76D: A5 15        	lda	<L241+numSect_0+2
  7250 06:A76F: 85 08        	sta	<L242+wordCnt_1+2
  7251                        ;         wordCnt = wordCnt * 256;
  7252                        L10105:
  7253                        	.line	1779
  7254 06:A771: D4 08        	pei	<L242+wordCnt_1+2
  7255 06:A773: D4 06        	pei	<L242+wordCnt_1
  7256 06:A775: A9 08 00     	lda	#$8
  7257                        	xref	~~~lasl
  7258 06:A778: 22 xx xx xx  	jsl	~~~lasl
  7259 06:A77C: 85 06        	sta	<L242+wordCnt_1
  7260 06:A77E: 86 08        	stx	<L242+wordCnt_1+2
  7261                        ;
  7262                        ;         // Do the REP INSW to read the data for 
                    one DRQ block.
  7263                        ;
  7264                        ;         reg_cmd_info.totalBytesXfer += ( wordCnt
                     << 1 );
  7265                        	.line	1783
  7266 06:A780: A5 06        	lda	<L242+wordCnt_1
  7267 06:A782: 85 01        	sta	<R0
  7268 06:A784: A5 08        	lda	<L242+wordCnt_1+2
  7269 06:A786: 85 03        	sta	<R0+2
  7270 06:A788: 06 01        	asl	<R0
  7271 06:A78A: 26 03        	rol	<R0+2
  7272 06:A78C: 18           	clc
  7273 06:A78D: A5 01        	lda	<R0
  7274 06:A78F: 6D xx xx     	adc	|~~reg_cmd_info+33
  7275 06:A792: 8D xx xx     	sta	|~~reg_cmd_info+33
  7276 06:A795: A5 03        	lda	<R0+2
  7277 06:A797: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  Sat Jul 10 2021  1:15                                                Page 139


  7278 06:A79A: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  7279                        ;         pio_drq_block_in( CB_DATA, bufAddr, word
                    Cnt );
  7280                        	.line	1784
  7281 06:A79D: D4 08        	pei	<L242+wordCnt_1+2
  7282 06:A79F: D4 06        	pei	<L242+wordCnt_1
  7283 06:A7A1: D4 11        	pei	<L241+bufAddr_0+2
  7284 06:A7A3: D4 0F        	pei	<L241+bufAddr_0
  7285 06:A7A5: F4 00 00     	pea	#<$0
  7286 06:A7A8: 22 18 B9 06  	jsl	~~pio_drq_block_in
  7287                        ;
  7288                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  7289                        	.line	1786
  7290                        	.line	1786
  7291 06:A7AC: F4 08 00     	pea	#<$8
  7292 06:A7AF: 22 B1 B7 06  	jsl	~~pio_inbyte
  7293                        	.line	1786
  7294 06:A7B3: F4 08 00     	pea	#<$8
  7295 06:A7B6: 22 B1 B7 06  	jsl	~~pio_inbyte
  7296                        	.line	1786
  7297 06:A7BA: F4 08 00     	pea	#<$8
  7298 06:A7BD: 22 B1 B7 06  	jsl	~~pio_inbyte
  7299                        	.line	1786
  7300 06:A7C1: F4 08 00     	pea	#<$8
  7301 06:A7C4: 22 B1 B7 06  	jsl	~~pio_inbyte
  7302                        	.line	1786
  7303 06:A7C8: F4 08 00     	pea	#<$8
  7304 06:A7CB: 22 B1 B7 06  	jsl	~~pio_inbyte
  7305                        	.line	1786
  7306                        	.line	1786
  7307                        ;
  7308                        ;         // Note: The drive should have dropped D
                    ATA REQUEST by now.  If there
  7309                        ;         // are more sectors to transfer, BUSY sh
                    ould be active now (unless
  7310                        ;         // there is an error).
  7311                        ;
  7312                        ;         // Decrement the count of sectors to be 
                    transferred
  7313                        ;         // and increment buffer address.
  7314                        ;
  7315                        ;         numSect = numSect - ( multiCnt ? multiCn
                    t : 1 );
  7316                        	.line	1795
  7317 06:A7CF: A5 17        	lda	<L241+multiCnt_0
  7318 06:A7D1: D0 03        	bne	L259
  7319 06:A7D3: 82 04 00     	brl	L258
  7320                        L259:
  7321 06:A7D6: A5 17        	lda	<L241+multiCnt_0
  7322 06:A7D8: 80 03        	bra	L260
  7323                        L258:
  7324 06:A7DA: A9 01 00     	lda	#$1
  7325                        L260:
  7326 06:A7DD: 85 01        	sta	<R0
  7327 06:A7DF: A0 00 00     	ldy	#$0
  7328 06:A7E2: A5 01        	lda	<R0
  7329 06:A7E4: 10 01        	bpl	L261
  Sat Jul 10 2021  1:15                                                Page 140


  7330 06:A7E6: 88           	dey
  7331                        L261:
  7332 06:A7E7: 85 01        	sta	<R0
  7333 06:A7E9: 84 03        	sty	<R0+2
  7334 06:A7EB: 38           	sec
  7335 06:A7EC: A5 13        	lda	<L241+numSect_0
  7336 06:A7EE: E5 01        	sbc	<R0
  7337 06:A7F0: 85 13        	sta	<L241+numSect_0
  7338 06:A7F2: A5 15        	lda	<L241+numSect_0+2
  7339 06:A7F4: E5 03        	sbc	<R0+2
  7340 06:A7F6: 85 15        	sta	<L241+numSect_0+2
  7341                        ;         bufAddr = bufAddr + ( 512 * ( multiCnt ?
                     multiCnt : 1 ) );
  7342                        	.line	1796
  7343 06:A7F8: A5 17        	lda	<L241+multiCnt_0
  7344 06:A7FA: D0 03        	bne	L263
  7345 06:A7FC: 82 04 00     	brl	L262
  7346                        L263:
  7347 06:A7FF: A5 17        	lda	<L241+multiCnt_0
  7348 06:A801: 80 03        	bra	L264
  7349                        L262:
  7350 06:A803: A9 01 00     	lda	#$1
  7351                        L264:
  7352 06:A806: A2 09 00     	ldx	#<$9
  7353                        	xref	~~~asl
  7354 06:A809: 22 xx xx xx  	jsl	~~~asl
  7355 06:A80D: 85 01        	sta	<R0
  7356 06:A80F: A0 00 00     	ldy	#$0
  7357 06:A812: A5 01        	lda	<R0
  7358 06:A814: 10 01        	bpl	L265
  7359 06:A816: 88           	dey
  7360                        L265:
  7361 06:A817: 85 01        	sta	<R0
  7362 06:A819: 84 03        	sty	<R0+2
  7363 06:A81B: 18           	clc
  7364 06:A81C: A5 0F        	lda	<L241+bufAddr_0
  7365 06:A81E: 65 01        	adc	<R0
  7366 06:A820: 85 0F        	sta	<L241+bufAddr_0
  7367 06:A822: A5 11        	lda	<L241+bufAddr_0+2
  7368 06:A824: 65 03        	adc	<R0+2
  7369 06:A826: 85 11        	sta	<L241+bufAddr_0+2
  7370                        ;      }
  7371                        	.line	1797
  7372                        ;
  7373                        ;      // So was there any error condition?
  7374                        ;
  7375                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_ERR ) )
  7376                        L10104:
  7377                        	.line	1801
  7378                        ;      {
  7379 06:A828: E2 20        	sep	#$20
  7380                        	longa	off
  7381 06:A82A: A5 05        	lda	<L242+status_1
  7382 06:A82C: 29 A1        	and	#<$a1
  7383 06:A82E: C2 20        	rep	#$20
  7384                        	longa	on
  7385 06:A830: D0 03        	bne	L266
  Sat Jul 10 2021  1:15                                                Page 141


  7386 06:A832: 82 0C 00     	brl	L10106
  7387                        L266:
  7388                        	.line	1802
  7389                        ;         reg_cmd_info.ec = 31;
  7390                        	.line	1803
  7391 06:A835: E2 20        	sep	#$20
  7392                        	longa	off
  7393 06:A837: A9 1F        	lda	#$1f
  7394 06:A839: 8D xx xx     	sta	|~~reg_cmd_info+31
  7395 06:A83C: C2 20        	rep	#$20
  7396                        	longa	on
  7397                        ;         break;   // go to READ_DONE
  7398                        	.line	1804
  7399 06:A83E: 82 55 00     	brl	L10101
  7400                        ;      }
  7401                        	.line	1805
  7402                        ;
  7403                        ;      // DRQ should have been set -- was it?
  7404                        ;
  7405                        ;      if ( ( status & CB_STAT_DRQ ) == 0 )
  7406                        L10106:
  7407                        	.line	1809
  7408                        ;      {
  7409 06:A841: E2 20        	sep	#$20
  7410                        	longa	off
  7411 06:A843: A5 05        	lda	<L242+status_1
  7412 06:A845: 29 08        	and	#<$8
  7413 06:A847: C2 20        	rep	#$20
  7414                        	longa	on
  7415 06:A849: F0 03        	beq	L267
  7416 06:A84B: 82 0C 00     	brl	L10107
  7417                        L267:
  7418                        	.line	1810
  7419                        ;         reg_cmd_info.ec = 32;
  7420                        	.line	1811
  7421 06:A84E: E2 20        	sep	#$20
  7422                        	longa	off
  7423 06:A850: A9 20        	lda	#$20
  7424 06:A852: 8D xx xx     	sta	|~~reg_cmd_info+31
  7425 06:A855: C2 20        	rep	#$20
  7426                        	longa	on
  7427                        ;         break;   // go to READ_DONE
  7428                        	.line	1812
  7429 06:A857: 82 3C 00     	brl	L10101
  7430                        ;      }
  7431                        	.line	1813
  7432                        ;
  7433                        ;      // If all of the requested sectors have bee
                    n transferred, make a
  7434                        ;      // few more checks before we exit.
  7435                        ;
  7436                        ;      if ( numSect < 1 )
  7437                        L10107:
  7438                        	.line	1818
  7439                        ;      {
  7440 06:A85A: A5 15        	lda	<L241+numSect_0+2
  7441 06:A85C: 30 0C        	bmi	L268
  7442 06:A85E: D0 07        	bne	L269
  Sat Jul 10 2021  1:15                                                Page 142


  7443 06:A860: A5 13        	lda	<L241+numSect_0
  7444 06:A862: C9 01 00     	cmp	#1
  7445 06:A865: 90 03        	bcc	L268
  7446                        L269:
  7447 06:A867: 82 29 00     	brl	L10108
  7448                        L268:
  7449                        	.line	1819
  7450                        ;         // Since the drive has transferred all o
                    f the requested sectors
  7451                        ;         // without error, the drive should not h
                    ave BUSY, DEVICE FAULT,
  7452                        ;         // DATA REQUEST or ERROR active now.
  7453                        ;
  7454                        ;         status = pio_inbyte( CB_STAT );
  7455                        	.line	1824
  7456 06:A86A: F4 07 00     	pea	#<$7
  7457 06:A86D: 22 B1 B7 06  	jsl	~~pio_inbyte
  7458 06:A871: E2 20        	sep	#$20
  7459                        	longa	off
  7460 06:A873: 85 05        	sta	<L242+status_1
  7461 06:A875: C2 20        	rep	#$20
  7462                        	longa	on
  7463                        ;         if ( status & ( CB_STAT_BSY | CB_STAT_DF
                     | CB_STAT_DRQ | CB_STAT_ERR ) )
  7464                        	.line	1825
  7465                        ;         {
  7466 06:A877: E2 20        	sep	#$20
  7467                        	longa	off
  7468 06:A879: A5 05        	lda	<L242+status_1
  7469 06:A87B: 29 A9        	and	#<$a9
  7470 06:A87D: C2 20        	rep	#$20
  7471                        	longa	on
  7472 06:A87F: D0 03        	bne	L270
  7473 06:A881: 82 0C 00     	brl	L10109
  7474                        L270:
  7475                        	.line	1826
  7476                        ;            reg_cmd_info.ec = 33;
  7477                        	.line	1827
  7478 06:A884: E2 20        	sep	#$20
  7479                        	longa	off
  7480 06:A886: A9 21        	lda	#$21
  7481 06:A888: 8D xx xx     	sta	|~~reg_cmd_info+31
  7482 06:A88B: C2 20        	rep	#$20
  7483                        	longa	on
  7484                        ;            break;   // go to READ_DONE
  7485                        	.line	1828
  7486 06:A88D: 82 06 00     	brl	L10101
  7487                        ;         }
  7488                        	.line	1829
  7489                        ;
  7490                        ;         // All sectors have been read without er
                    ror, go to READ_DONE.
  7491                        ;
  7492                        ;         break;   // go to READ_DONE
  7493                        L10109:
  7494                        	.line	1833
  7495 06:A890: 82 03 00     	brl	L10101
  7496                        ;
  Sat Jul 10 2021  1:15                                                Page 143


  7497                        ;      }
  7498                        	.line	1835
  7499                        ;
  7500                        ;      // This is the end of the read loop.  If we
                     get here, the loop is
  7501                        ;      // repeated to read the next sector.  Go ba
                    ck to READ_LOOP.
  7502                        ;
  7503                        ;   }
  7504                        L10108:
  7505                        	.line	1840
  7506 06:A893: 82 47 FE     	brl	L10100
  7507                        L10101:
  7508                        ;
  7509                        ;   // BMIDE Error=1?
  7510                        ;
  7511                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  7512                        	.line	1844
  7513                        ;   {
  7514 06:A896: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  7515 06:A89A: E2 20        	sep	#$20
  7516                        	longa	off
  7517 06:A89C: 29 02        	and	#<$2
  7518 06:A89E: C2 20        	rep	#$20
  7519                        	longa	on
  7520 06:A8A0: D0 03        	bne	L271
  7521 06:A8A2: 82 09 00     	brl	L10110
  7522                        L271:
  7523                        	.line	1845
  7524                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  7525                        	.line	1846
  7526 06:A8A5: E2 20        	sep	#$20
  7527                        	longa	off
  7528 06:A8A7: A9 4E        	lda	#$4e
  7529 06:A8A9: 8D xx xx     	sta	|~~reg_cmd_info+31
  7530 06:A8AC: C2 20        	rep	#$20
  7531                        	longa	on
  7532                        ;   }
  7533                        	.line	1847
  7534                        ;
  7535                        ;   // READ_DONE:
  7536                        ;
  7537                        ;   // All done.  The return values of this functi
                    on are described in
  7538                        ;   // MINDRVR.H.
  7539                        ;
  7540                        ;   if ( reg_cmd_info.ec )
  7541                        L10110:
  7542                        	.line	1854
  7543                        ;      return 1;
  7544 06:A8AE: AD xx xx     	lda	|~~reg_cmd_info+31
  7545 06:A8B1: 29 FF 00     	and	#$ff
  7546 06:A8B4: D0 03        	bne	L272
  7547 06:A8B6: 82 06 00     	brl	L10111
  7548                        L272:
  7549                        	.line	1855
  Sat Jul 10 2021  1:15                                                Page 144


  7550 06:A8B9: A9 01 00     	lda	#$1
  7551 06:A8BC: 82 DA FD     	brl	L245
  7552                        ;   return 0;
  7553                        L10111:
  7554                        	.line	1856
  7555 06:A8BF: A9 00 00     	lda	#$0
  7556 06:A8C2: 82 D4 FD     	brl	L245
  7557                        ;}
  7558                        	.line	1857
  7559                        	.endblock	1857
  7560             00000009   L241	equ	9
  7561             00000005   L242	equ	5
  7562 06:A8C5:              	ends
  7563                        	efunc
  7564                        	.endfunc	1857,5,9
  7565                        	.line	1857
  7566                        ;
  7567                        ;//***********************************************
                    **************
  7568                        ;//
  7569                        ;// reg_pio_data_in_lba28() - Easy way to execute 
                    a PIO Data In command
  7570                        ;//                           using an LBA sector 
                    address.
  7571                        ;//
  7572                        ;//***********************************************
                    **************
  7573                        ;
  7574                        ;int reg_pio_data_in_lba28( unsigned char dev, uns
                    igned char cmd,
  7575                        ;                           unsigned int fr, unsig
                    ned int sc,
  7576                        ;                           unsigned long lba,
  7577                        ;                           unsigned char * bufAdd
                    r,
  7578                        ;                           long numSect, int mult
                    iCnt )
  7579                        ;
  7580                        ;{
  7581                        	.line	1866
  7582                        	.line	1872
  7583                        	FXHDD
  7584                        	xdef	~~reg_pio_data_in_lba28
  7585                        	func
  7586                        	.function	1872
  7587                        ~~reg_pio_data_in_lba28:
  7588                        	longa	on
  7589                        	longi	on
  7590 06:A8C5: 3B           	tsc
  7591 06:A8C6: 38           	sec
  7592 06:A8C7: E9 04 00     	sbc	#L273
  7593 06:A8CA: 1B           	tcs
  7594 06:A8CB: 0B           	phd
  7595 06:A8CC: 5B           	tcd
  7596             00000004   dev_0	set	4
  7597             00000006   cmd_0	set	6
  7598             00000008   fr_0	set	8
  7599             0000000A   sc_0	set	10
  Sat Jul 10 2021  1:15                                                Page 145


  7600             0000000C   lba_0	set	12
  7601             00000010   bufAddr_0	set	16
  7602             00000014   numSect_0	set	20
  7603             00000018   multiCnt_0	set	24
  7604                        	.block	1872
  7605                        ;
  7606                        ;   reg_cmd_info.cmd = cmd;
  7607                        	.sym	dev,4,14,6,8
  7608                        	.sym	cmd,6,14,6,8
  7609                        	.sym	fr,8,16,6,16
  7610                        	.sym	sc,10,16,6,16
  7611                        	.sym	lba,12,18,6,32
  7612                        	.sym	bufAddr,16,142,6,32
  7613                        	.sym	numSect,20,7,6,32
  7614                        	.sym	multiCnt,24,5,6,16
  7615                        	.line	1874
  7616 06:A8CD: E2 20        	sep	#$20
  7617                        	longa	off
  7618 06:A8CF: A5 0A        	lda	<L273+cmd_0
  7619 06:A8D1: 8D xx xx     	sta	|~~reg_cmd_info
  7620 06:A8D4: C2 20        	rep	#$20
  7621                        	longa	on
  7622                        ;   reg_cmd_info.fr = fr;
  7623                        	.line	1875
  7624 06:A8D6: A5 0C        	lda	<L273+fr_0
  7625 06:A8D8: 8D xx xx     	sta	|~~reg_cmd_info+1
  7626                        ;   reg_cmd_info.sc = sc;
  7627                        	.line	1876
  7628 06:A8DB: A5 0E        	lda	<L273+sc_0
  7629 06:A8DD: 8D xx xx     	sta	|~~reg_cmd_info+3
  7630                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  7631                        	.line	1877
  7632 06:A8E0: A5 08        	lda	<L273+dev_0
  7633 06:A8E2: 29 FF 00     	and	#$ff
  7634 06:A8E5: D0 03        	bne	L277
  7635 06:A8E7: 82 05 00     	brl	L276
  7636                        L277:
  7637 06:A8EA: A9 10 00     	lda	#$10
  7638 06:A8ED: 80 03        	bra	L278
  7639                        L276:
  7640 06:A8EF: A9 00 00     	lda	#$0
  7641                        L278:
  7642 06:A8F2: 09 40 00     	ora	#<$40
  7643 06:A8F5: 85 01        	sta	<R0
  7644 06:A8F7: E2 20        	sep	#$20
  7645                        	longa	off
  7646 06:A8F9: A5 01        	lda	<R0
  7647 06:A8FB: 8D xx xx     	sta	|~~reg_cmd_info+11
  7648 06:A8FE: C2 20        	rep	#$20
  7649                        	longa	on
  7650                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  7651                        	.line	1878
  7652 06:A900: AD xx xx     	lda	|~~int_use_intr_flag
  7653 06:A903: 29 FF 00     	and	#$ff
  7654 06:A906: D0 03        	bne	L280
  7655 06:A908: 82 05 00     	brl	L279
  Sat Jul 10 2021  1:15                                                Page 146


  7656                        L280:
  7657 06:A90B: A9 00 00     	lda	#$0
  7658 06:A90E: 80 03        	bra	L281
  7659                        L279:
  7660 06:A910: A9 02 00     	lda	#$2
  7661                        L281:
  7662 06:A913: 85 01        	sta	<R0
  7663 06:A915: E2 20        	sep	#$20
  7664                        	longa	off
  7665 06:A917: A5 01        	lda	<R0
  7666 06:A919: 8D xx xx     	sta	|~~reg_cmd_info+12
  7667 06:A91C: C2 20        	rep	#$20
  7668                        	longa	on
  7669                        ;   reg_cmd_info.lbaSize = LBA28;
  7670                        	.line	1879
  7671 06:A91E: E2 20        	sep	#$20
  7672                        	longa	off
  7673 06:A920: A9 1C        	lda	#$1c
  7674 06:A922: 8D xx xx     	sta	|~~reg_cmd_info+19
  7675 06:A925: C2 20        	rep	#$20
  7676                        	longa	on
  7677                        ;   reg_cmd_info.lbaHigh = 0L;
  7678                        	.line	1880
  7679 06:A927: 9C xx xx     	stz	|~~reg_cmd_info+24
  7680 06:A92A: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  7681                        ;   reg_cmd_info.lbaLow = lba;
  7682                        	.line	1881
  7683 06:A92D: A5 10        	lda	<L273+lba_0
  7684 06:A92F: 8D xx xx     	sta	|~~reg_cmd_info+20
  7685 06:A932: A5 12        	lda	<L273+lba_0+2
  7686 06:A934: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  7687                        ;
  7688                        ;   // these commands transfer only 1 sector
  7689                        ;   if (    ( cmd == CMD_IDENTIFY_DEVICE )
  7690                        	.line	1884
  7691                        ;        || ( cmd == CMD_IDENTIFY_DEVICE_PACKET )
  7692                        ;      )
  7693                        ;      numSect = 1;
  7694 06:A937: E2 20        	sep	#$20
  7695                        	longa	off
  7696 06:A939: A5 0A        	lda	<L273+cmd_0
  7697 06:A93B: C9 EC        	cmp	#<$ec
  7698 06:A93D: C2 20        	rep	#$20
  7699                        	longa	on
  7700 06:A93F: D0 03        	bne	L283
  7701 06:A941: 82 0D 00     	brl	L282
  7702                        L283:
  7703 06:A944: E2 20        	sep	#$20
  7704                        	longa	off
  7705 06:A946: A5 0A        	lda	<L273+cmd_0
  7706 06:A948: C9 A1        	cmp	#<$a1
  7707 06:A94A: C2 20        	rep	#$20
  7708                        	longa	on
  7709 06:A94C: F0 03        	beq	L284
  7710 06:A94E: 82 0A 00     	brl	L10112
  7711                        L284:
  7712                        L282:
  7713                        	.line	1887
  Sat Jul 10 2021  1:15                                                Page 147


  7714 06:A951: A9 01 00     	lda	#$1
  7715 06:A954: 85 18        	sta	<L273+numSect_0
  7716 06:A956: A9 00 00     	lda	#$0
  7717 06:A959: 85 1A        	sta	<L273+numSect_0+2
  7718                        ;
  7719                        ;   // adjust multiple count
  7720                        ;   if ( multiCnt & 0x0800 )
  7721                        L10112:
  7722                        	.line	1890
  7723                        ;   {
  7724 06:A95B: A5 1C        	lda	<L273+multiCnt_0
  7725 06:A95D: 29 00 08     	and	#<$800
  7726 06:A960: D0 03        	bne	L285
  7727 06:A962: 82 08 00     	brl	L10113
  7728                        L285:
  7729                        	.line	1891
  7730                        ;      // assume caller knows what they are doing
  7731                        ;      multiCnt &= 0x00ff;
  7732                        	.line	1893
  7733 06:A965: A9 00 FF     	lda	#$ff00
  7734 06:A968: 14 1C        	trb	<L273+multiCnt_0
  7735                        ;   }
  7736                        	.line	1894
  7737                        ;   else
  7738 06:A96A: 82 12 00     	brl	L10114
  7739                        L10113:
  7740                        ;   {
  7741                        	.line	1896
  7742                        ;      // only Read Multiple uses multiCnt
  7743                        ;      if ( cmd != CMD_READ_MULTIPLE )
  7744                        	.line	1898
  7745                        ;         multiCnt = 1;
  7746 06:A96D: E2 20        	sep	#$20
  7747                        	longa	off
  7748 06:A96F: A5 0A        	lda	<L273+cmd_0
  7749 06:A971: C9 C4        	cmp	#<$c4
  7750 06:A973: C2 20        	rep	#$20
  7751                        	longa	on
  7752 06:A975: D0 03        	bne	L286
  7753 06:A977: 82 05 00     	brl	L10115
  7754                        L286:
  7755                        	.line	1899
  7756 06:A97A: A9 01 00     	lda	#$1
  7757 06:A97D: 85 1C        	sta	<L273+multiCnt_0
  7758                        ;   }
  7759                        L10115:
  7760                        	.line	1900
  7761                        L10114:
  7762                        ;
  7763                        ;   reg_cmd_info.ns  = numSect;
  7764                        	.line	1902
  7765 06:A97F: A5 18        	lda	<L273+numSect_0
  7766 06:A981: 8D xx xx     	sta	|~~reg_cmd_info+13
  7767 06:A984: A5 1A        	lda	<L273+numSect_0+2
  7768 06:A986: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  7769                        ;   reg_cmd_info.mc  = multiCnt;
  7770                        	.line	1903
  7771 06:A989: A5 1C        	lda	<L273+multiCnt_0
  Sat Jul 10 2021  1:15                                                Page 148


  7772 06:A98B: 8D xx xx     	sta	|~~reg_cmd_info+17
  7773                        ;
  7774                        ;   return exec_pio_data_in_cmd( dev, bufAddr, num
                    Sect, multiCnt );
  7775                        	.line	1905
  7776 06:A98E: D4 1C        	pei	<L273+multiCnt_0
  7777 06:A990: D4 1A        	pei	<L273+numSect_0+2
  7778 06:A992: D4 18        	pei	<L273+numSect_0
  7779 06:A994: D4 16        	pei	<L273+bufAddr_0+2
  7780 06:A996: D4 14        	pei	<L273+bufAddr_0
  7781 06:A998: D4 08        	pei	<L273+dev_0
  7782 06:A99A: 22 77 A6 06  	jsl	~~exec_pio_data_in_cmd
  7783                        L287:
  7784 06:A99E: A8           	tay
  7785 06:A99F: A5 06        	lda	<L273+2
  7786 06:A9A1: 85 1C        	sta	<L273+2+22
  7787 06:A9A3: A5 05        	lda	<L273+1
  7788 06:A9A5: 85 1B        	sta	<L273+1+22
  7789 06:A9A7: 2B           	pld
  7790 06:A9A8: 3B           	tsc
  7791 06:A9A9: 18           	clc
  7792 06:A9AA: 69 1A 00     	adc	#L273+22
  7793 06:A9AD: 1B           	tcs
  7794 06:A9AE: 98           	tya
  7795 06:A9AF: 6B           	rtl
  7796                        ;}
  7797                        	.line	1906
  7798                        	.endblock	1906
  7799             00000004   L273	equ	4
  7800             00000005   L274	equ	5
  7801 06:A9B0:              	ends
  7802                        	efunc
  7803                        	.endfunc	1906,5,4
  7804                        	.line	1906
  7805                        ;
  7806                        ;//***********************************************
                    **************
  7807                        ;//
  7808                        ;// reg_pio_data_in_lba48() - Easy way to execute 
                    a PIO Data In command
  7809                        ;//                           using an LBA sector 
                    address.
  7810                        ;//
  7811                        ;//***********************************************
                    **************
  7812                        ;
  7813                        ;int reg_pio_data_in_lba48( unsigned char dev, uns
                    igned char cmd,
  7814                        ;                           unsigned int fr, unsig
                    ned int sc,
  7815                        ;                           unsigned long lbahi, u
                    nsigned long lbalo,
  7816                        ;                           unsigned char * bufAdd
                    r,
  7817                        ;                           long numSect, int mult
                    iCnt )
  7818                        ;
  7819                        ;{
  Sat Jul 10 2021  1:15                                                Page 149


  7820                        	.line	1915
  7821                        	.line	1921
  7822                        	FXHDD
  7823                        	xdef	~~reg_pio_data_in_lba48
  7824                        	func
  7825                        	.function	1921
  7826                        ~~reg_pio_data_in_lba48:
  7827                        	longa	on
  7828                        	longi	on
  7829 06:A9B0: 3B           	tsc
  7830 06:A9B1: 38           	sec
  7831 06:A9B2: E9 04 00     	sbc	#L288
  7832 06:A9B5: 1B           	tcs
  7833 06:A9B6: 0B           	phd
  7834 06:A9B7: 5B           	tcd
  7835             00000004   dev_0	set	4
  7836             00000006   cmd_0	set	6
  7837             00000008   fr_0	set	8
  7838             0000000A   sc_0	set	10
  7839             0000000C   lbahi_0	set	12
  7840             00000010   lbalo_0	set	16
  7841             00000014   bufAddr_0	set	20
  7842             00000018   numSect_0	set	24
  7843             0000001C   multiCnt_0	set	28
  7844                        	.block	1921
  7845                        ;
  7846                        ;   reg_cmd_info.cmd = cmd;
  7847                        	.sym	dev,4,14,6,8
  7848                        	.sym	cmd,6,14,6,8
  7849                        	.sym	fr,8,16,6,16
  7850                        	.sym	sc,10,16,6,16
  7851                        	.sym	lbahi,12,18,6,32
  7852                        	.sym	lbalo,16,18,6,32
  7853                        	.sym	bufAddr,20,142,6,32
  7854                        	.sym	numSect,24,7,6,32
  7855                        	.sym	multiCnt,28,5,6,16
  7856                        	.line	1923
  7857 06:A9B8: E2 20        	sep	#$20
  7858                        	longa	off
  7859 06:A9BA: A5 0A        	lda	<L288+cmd_0
  7860 06:A9BC: 8D xx xx     	sta	|~~reg_cmd_info
  7861 06:A9BF: C2 20        	rep	#$20
  7862                        	longa	on
  7863                        ;   reg_cmd_info.fr = fr;
  7864                        	.line	1924
  7865 06:A9C1: A5 0C        	lda	<L288+fr_0
  7866 06:A9C3: 8D xx xx     	sta	|~~reg_cmd_info+1
  7867                        ;   reg_cmd_info.sc = sc;
  7868                        	.line	1925
  7869 06:A9C6: A5 0E        	lda	<L288+sc_0
  7870 06:A9C8: 8D xx xx     	sta	|~~reg_cmd_info+3
  7871                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  7872                        	.line	1926
  7873 06:A9CB: A5 08        	lda	<L288+dev_0
  7874 06:A9CD: 29 FF 00     	and	#$ff
  7875 06:A9D0: D0 03        	bne	L292
  7876 06:A9D2: 82 05 00     	brl	L291
  Sat Jul 10 2021  1:15                                                Page 150


  7877                        L292:
  7878 06:A9D5: A9 10 00     	lda	#$10
  7879 06:A9D8: 80 03        	bra	L293
  7880                        L291:
  7881 06:A9DA: A9 00 00     	lda	#$0
  7882                        L293:
  7883 06:A9DD: 09 40 00     	ora	#<$40
  7884 06:A9E0: 85 01        	sta	<R0
  7885 06:A9E2: E2 20        	sep	#$20
  7886                        	longa	off
  7887 06:A9E4: A5 01        	lda	<R0
  7888 06:A9E6: 8D xx xx     	sta	|~~reg_cmd_info+11
  7889 06:A9E9: C2 20        	rep	#$20
  7890                        	longa	on
  7891                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  7892                        	.line	1927
  7893 06:A9EB: AD xx xx     	lda	|~~int_use_intr_flag
  7894 06:A9EE: 29 FF 00     	and	#$ff
  7895 06:A9F1: D0 03        	bne	L295
  7896 06:A9F3: 82 05 00     	brl	L294
  7897                        L295:
  7898 06:A9F6: A9 00 00     	lda	#$0
  7899 06:A9F9: 80 03        	bra	L296
  7900                        L294:
  7901 06:A9FB: A9 02 00     	lda	#$2
  7902                        L296:
  7903 06:A9FE: 85 01        	sta	<R0
  7904 06:AA00: E2 20        	sep	#$20
  7905                        	longa	off
  7906 06:AA02: A5 01        	lda	<R0
  7907 06:AA04: 8D xx xx     	sta	|~~reg_cmd_info+12
  7908 06:AA07: C2 20        	rep	#$20
  7909                        	longa	on
  7910                        ;   reg_cmd_info.lbaSize = LBA48;
  7911                        	.line	1928
  7912 06:AA09: E2 20        	sep	#$20
  7913                        	longa	off
  7914 06:AA0B: A9 30        	lda	#$30
  7915 06:AA0D: 8D xx xx     	sta	|~~reg_cmd_info+19
  7916 06:AA10: C2 20        	rep	#$20
  7917                        	longa	on
  7918                        ;   reg_cmd_info.lbaHigh = lbahi;
  7919                        	.line	1929
  7920 06:AA12: A5 10        	lda	<L288+lbahi_0
  7921 06:AA14: 8D xx xx     	sta	|~~reg_cmd_info+24
  7922 06:AA17: A5 12        	lda	<L288+lbahi_0+2
  7923 06:AA19: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  7924                        ;   reg_cmd_info.lbaLow = lbalo;
  7925                        	.line	1930
  7926 06:AA1C: A5 14        	lda	<L288+lbalo_0
  7927 06:AA1E: 8D xx xx     	sta	|~~reg_cmd_info+20
  7928 06:AA21: A5 16        	lda	<L288+lbalo_0+2
  7929 06:AA23: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  7930                        ;
  7931                        ;   // adjust multiple count
  7932                        ;   if ( multiCnt & 0x0800 )
  7933                        	.line	1933
  Sat Jul 10 2021  1:15                                                Page 151


  7934                        ;   {
  7935 06:AA26: A5 20        	lda	<L288+multiCnt_0
  7936 06:AA28: 29 00 08     	and	#<$800
  7937 06:AA2B: D0 03        	bne	L297
  7938 06:AA2D: 82 08 00     	brl	L10116
  7939                        L297:
  7940                        	.line	1934
  7941                        ;      // assume caller knows what they are doing
  7942                        ;      multiCnt &= 0x00ff;
  7943                        	.line	1936
  7944 06:AA30: A9 00 FF     	lda	#$ff00
  7945 06:AA33: 14 20        	trb	<L288+multiCnt_0
  7946                        ;   }
  7947                        	.line	1937
  7948                        ;   else
  7949 06:AA35: 82 12 00     	brl	L10117
  7950                        L10116:
  7951                        ;   {
  7952                        	.line	1939
  7953                        ;      // only Read Multiple Ext uses multiCnt
  7954                        ;      if ( cmd != CMD_READ_MULTIPLE_EXT )
  7955                        	.line	1941
  7956                        ;         multiCnt = 1;
  7957 06:AA38: E2 20        	sep	#$20
  7958                        	longa	off
  7959 06:AA3A: A5 0A        	lda	<L288+cmd_0
  7960 06:AA3C: C9 29        	cmp	#<$29
  7961 06:AA3E: C2 20        	rep	#$20
  7962                        	longa	on
  7963 06:AA40: D0 03        	bne	L298
  7964 06:AA42: 82 05 00     	brl	L10118
  7965                        L298:
  7966                        	.line	1942
  7967 06:AA45: A9 01 00     	lda	#$1
  7968 06:AA48: 85 20        	sta	<L288+multiCnt_0
  7969                        ;   }
  7970                        L10118:
  7971                        	.line	1943
  7972                        L10117:
  7973                        ;
  7974                        ;   reg_cmd_info.ns  = numSect;
  7975                        	.line	1945
  7976 06:AA4A: A5 1C        	lda	<L288+numSect_0
  7977 06:AA4C: 8D xx xx     	sta	|~~reg_cmd_info+13
  7978 06:AA4F: A5 1E        	lda	<L288+numSect_0+2
  7979 06:AA51: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  7980                        ;   reg_cmd_info.mc  = multiCnt;
  7981                        	.line	1946
  7982 06:AA54: A5 20        	lda	<L288+multiCnt_0
  7983 06:AA56: 8D xx xx     	sta	|~~reg_cmd_info+17
  7984                        ;
  7985                        ;   return exec_pio_data_in_cmd( dev, bufAddr, num
                    Sect, multiCnt );
  7986                        	.line	1948
  7987 06:AA59: D4 20        	pei	<L288+multiCnt_0
  7988 06:AA5B: D4 1E        	pei	<L288+numSect_0+2
  7989 06:AA5D: D4 1C        	pei	<L288+numSect_0
  7990 06:AA5F: D4 1A        	pei	<L288+bufAddr_0+2
  Sat Jul 10 2021  1:15                                                Page 152


  7991 06:AA61: D4 18        	pei	<L288+bufAddr_0
  7992 06:AA63: D4 08        	pei	<L288+dev_0
  7993 06:AA65: 22 77 A6 06  	jsl	~~exec_pio_data_in_cmd
  7994                        L299:
  7995 06:AA69: A8           	tay
  7996 06:AA6A: A5 06        	lda	<L288+2
  7997 06:AA6C: 85 20        	sta	<L288+2+26
  7998 06:AA6E: A5 05        	lda	<L288+1
  7999 06:AA70: 85 1F        	sta	<L288+1+26
  8000 06:AA72: 2B           	pld
  8001 06:AA73: 3B           	tsc
  8002 06:AA74: 18           	clc
  8003 06:AA75: 69 1E 00     	adc	#L288+26
  8004 06:AA78: 1B           	tcs
  8005 06:AA79: 98           	tya
  8006 06:AA7A: 6B           	rtl
  8007                        ;}
  8008                        	.line	1949
  8009                        	.endblock	1949
  8010             00000004   L288	equ	4
  8011             00000005   L289	equ	5
  8012 06:AA7B:              	ends
  8013                        	efunc
  8014                        	.endfunc	1949,5,4
  8015                        	.line	1949
  8016                        ;
  8017                        ;//***********************************************
                    **************
  8018                        ;//
  8019                        ;// exec_pio_data_out_cmd() - Execute a PIO Data O
                    ut command.
  8020                        ;//
  8021                        ;// See ATA-2 Section 9.4, ATA-3 Section 9.4,
  8022                        ;// ATA-4 Section 8.7 Figure 11.
  8023                        ;//
  8024                        ;//***********************************************
                    **************
  8025                        ;
  8026                        ;static int exec_pio_data_out_cmd( unsigned char d
                    ev,
  8027                        ;                             unsigned char * bufA
                    ddr,
  8028                        ;                             long numSect, int mu
                    ltiCnt );
  8029                        ;
  8030                        ;static int exec_pio_data_out_cmd( unsigned char d
                    ev,
  8031                        ;                             unsigned char * bufA
                    ddr,
  8032                        ;                             long numSect, int mu
                    ltiCnt )
  8033                        ;
  8034                        ;{
  8035                        	.line	1964
  8036                        	.line	1968
  8037                        	FXHDD
  8038                        	func
  8039                        	.function	1968
  Sat Jul 10 2021  1:15                                                Page 153


  8040                        ~~exec_pio_data_out_cmd:
  8041                        	longa	on
  8042                        	longi	on
  8043 06:AA7B: 3B           	tsc
  8044 06:AA7C: 38           	sec
  8045 06:AA7D: E9 0B 00     	sbc	#L300
  8046 06:AA80: 1B           	tcs
  8047 06:AA81: 0B           	phd
  8048 06:AA82: 5B           	tcd
  8049             00000004   dev_0	set	4
  8050             00000006   bufAddr_0	set	6
  8051             0000000A   numSect_0	set	10
  8052             0000000E   multiCnt_0	set	14
  8053                        	.block	1968
  8054                        ;   unsigned char status;
  8055                        ;   int loopFlag = 1;
  8056                        ;   long wordCnt;
  8057                        ;
  8058                        ;   // reset Bus Master Error bit
  8059                        ;
  8060                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  8061             00000000   status_1	set	0
  8062             00000001   loopFlag_1	set	1
  8063             00000003   wordCnt_1	set	3
  8064                        	.sym	status,0,14,1,8
  8065                        	.sym	loopFlag,1,5,1,16
  8066                        	.sym	wordCnt,3,7,1,32
  8067                        	.sym	dev,4,14,6,8
  8068                        	.sym	bufAddr,6,142,6,32
  8069                        	.sym	numSect,10,7,6,32
  8070                        	.sym	multiCnt,14,5,6,16
  8071 06:AA83: A9 01 00     	lda	#$1
  8072 06:AA86: 85 06        	sta	<L301+loopFlag_1
  8073                        	.line	1975
  8074 06:AA88: F4 02 00     	pea	#<$2
  8075 06:AA8B: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  8076                        ;
  8077                        ;   // Set command time out.
  8078                        ;
  8079                        ;   tmr_set_timeout();
  8080                        	.line	1979
  8081 06:AA8F: 22 00 BD 06  	jsl	~~tmr_set_timeout
  8082                        ;
  8083                        ;   // Select the drive - call the sub_select func
                    tion.
  8084                        ;   // Quit now if this fails.
  8085                        ;
  8086                        ;   if ( sub_select( dev ) )
  8087                        	.line	1984
  8088                        ;   {
  8089 06:AA93: D4 0F        	pei	<L300+dev_0
  8090 06:AA95: 22 AF B4 06  	jsl	~~sub_select
  8091 06:AA99: AA           	tax
  8092 06:AA9A: D0 03        	bne	L303
  8093 06:AA9C: 82 15 00     	brl	L10119
  8094                        L303:
  8095                        	.line	1985
  8096                        ;      return 1;
  Sat Jul 10 2021  1:15                                                Page 154


  8097                        	.line	1986
  8098 06:AA9F: A9 01 00     	lda	#$1
  8099                        L304:
  8100 06:AAA2: A8           	tay
  8101 06:AAA3: A5 0D        	lda	<L300+2
  8102 06:AAA5: 85 19        	sta	<L300+2+12
  8103 06:AAA7: A5 0C        	lda	<L300+1
  8104 06:AAA9: 85 18        	sta	<L300+1+12
  8105 06:AAAB: 2B           	pld
  8106 06:AAAC: 3B           	tsc
  8107 06:AAAD: 18           	clc
  8108 06:AAAE: 69 17 00     	adc	#L300+12
  8109 06:AAB1: 1B           	tcs
  8110 06:AAB2: 98           	tya
  8111 06:AAB3: 6B           	rtl
  8112                        ;   }
  8113                        	.line	1987
  8114                        ;
  8115                        ;   // Set up all the registers except the command
                     register.
  8116                        ;
  8117                        ;   sub_setup_command();
  8118                        L10119:
  8119                        	.line	1991
  8120 06:AAB4: 22 69 B2 06  	jsl	~~sub_setup_command
  8121                        ;
  8122                        ;   // Start the command by setting the Command re
                    gister.  The drive
  8123                        ;   // should immediately set BUSY status.
  8124                        ;
  8125                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  8126                        	.line	1996
  8127 06:AAB8: AD xx xx     	lda	|~~reg_cmd_info
  8128 06:AABB: 48           	pha
  8129 06:AABC: F4 07 00     	pea	#<$7
  8130 06:AABF: 22 F0 B7 06  	jsl	~~pio_outbyte
  8131                        ;
  8132                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  8133                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  8134                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  8135                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  8136                        ;   // completed the command when it really had no
                    t even started the
  8137                        ;   // command yet.
  8138                        ;
  8139                        ;   DELAY400NS;
  8140                        	.line	2005
  8141                        	.line	2005
  8142 06:AAC3: F4 08 00     	pea	#<$8
  8143 06:AAC6: 22 B1 B7 06  	jsl	~~pio_inbyte
  8144                        	.line	2005
  8145 06:AACA: F4 08 00     	pea	#<$8
  8146 06:AACD: 22 B1 B7 06  	jsl	~~pio_inbyte
  8147                        	.line	2005
  Sat Jul 10 2021  1:15                                                Page 155


  8148 06:AAD1: F4 08 00     	pea	#<$8
  8149 06:AAD4: 22 B1 B7 06  	jsl	~~pio_inbyte
  8150                        	.line	2005
  8151 06:AAD8: F4 08 00     	pea	#<$8
  8152 06:AADB: 22 B1 B7 06  	jsl	~~pio_inbyte
  8153                        	.line	2005
  8154 06:AADF: F4 08 00     	pea	#<$8
  8155 06:AAE2: 22 B1 B7 06  	jsl	~~pio_inbyte
  8156                        	.line	2005
  8157                        	.line	2005
  8158                        ;
  8159                        ;   // Wait for not BUSY or time out.
  8160                        ;   // Note: No interrupt is generated for the
  8161                        ;   // first sector of a write command.
  8162                        ;
  8163                        ;   while ( 1 )
  8164                        	.line	2011
  8165                        L10120:
  8166                        ;   {
  8167                        	.line	2012
  8168                        ;      status = pio_inbyte( CB_ASTAT );
  8169                        	.line	2013
  8170 06:AAE6: F4 08 00     	pea	#<$8
  8171 06:AAE9: 22 B1 B7 06  	jsl	~~pio_inbyte
  8172 06:AAED: E2 20        	sep	#$20
  8173                        	longa	off
  8174 06:AAEF: 85 05        	sta	<L301+status_1
  8175 06:AAF1: C2 20        	rep	#$20
  8176                        	longa	on
  8177                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
  8178                        	.line	2014
  8179                        ;         break;
  8180 06:AAF3: E2 20        	sep	#$20
  8181                        	longa	off
  8182 06:AAF5: A5 05        	lda	<L301+status_1
  8183 06:AAF7: 29 80        	and	#<$80
  8184 06:AAF9: C2 20        	rep	#$20
  8185                        	longa	on
  8186 06:AAFB: D0 03        	bne	L305
  8187 06:AAFD: 82 24 00     	brl	L10121
  8188                        L305:
  8189                        ;      if ( tmr_chk_timeout() )
  8190                        	.line	2016
  8191                        ;      {
  8192 06:AB00: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  8193 06:AB04: AA           	tax
  8194 06:AB05: D0 03        	bne	L306
  8195 06:AB07: 82 17 00     	brl	L10122
  8196                        L306:
  8197                        	.line	2017
  8198                        ;         reg_cmd_info.to = 1;
  8199                        	.line	2018
  8200 06:AB0A: E2 20        	sep	#$20
  8201                        	longa	off
  8202 06:AB0C: A9 01        	lda	#$1
  8203 06:AB0E: 8D xx xx     	sta	|~~reg_cmd_info+32
  8204 06:AB11: C2 20        	rep	#$20
  8205                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 156


  8206                        ;         reg_cmd_info.ec = 47;
  8207                        	.line	2019
  8208 06:AB13: E2 20        	sep	#$20
  8209                        	longa	off
  8210 06:AB15: A9 2F        	lda	#$2f
  8211 06:AB17: 8D xx xx     	sta	|~~reg_cmd_info+31
  8212 06:AB1A: C2 20        	rep	#$20
  8213                        	longa	on
  8214                        ;         loopFlag = 0;
  8215                        	.line	2020
  8216 06:AB1C: 64 06        	stz	<L301+loopFlag_1
  8217                        ;         break;
  8218                        	.line	2021
  8219 06:AB1E: 82 03 00     	brl	L10121
  8220                        ;      }
  8221                        	.line	2022
  8222                        ;   }
  8223                        L10122:
  8224                        	.line	2023
  8225 06:AB21: 82 C2 FF     	brl	L10120
  8226                        L10121:
  8227                        ;
  8228                        ;   // This loop writes each sector.
  8229                        ;
  8230                        ;   while ( loopFlag )
  8231                        	.line	2027
  8232                        L10123:
  8233 06:AB24: A5 06        	lda	<L301+loopFlag_1
  8234 06:AB26: D0 03        	bne	L307
  8235 06:AB28: 82 AC 01     	brl	L10124
  8236                        L307:
  8237                        ;   {
  8238                        	.line	2028
  8239                        ;      // WRITE_LOOP:
  8240                        ;      //
  8241                        ;      // NOTE NOTE NOTE ...  The primary status r
                    egister (1f7) MUST NOT be
  8242                        ;      // read more than ONCE for each sector tran
                    sferred!  When the
  8243                        ;      // primary status register is read, the dri
                    ve resets IRQ.  The
  8244                        ;      // alternate status register (3f6) can be r
                    ead any number of times.
  8245                        ;      // For correct results, transfer the 256 wo
                    rds (REP OUTSW), wait for
  8246                        ;      // interrupt and then read the primary stat
                    us register.  AS
  8247                        ;      // SOON as BOTH the primary status register
                     has been read AND the
  8248                        ;      // last of the 256 words has been written, 
                    the drive is allowed to
  8249                        ;      // generate the next IRQ (newer and faster 
                    drives could generate
  8250                        ;      // the next IRQ in 50 microseconds or less)
                    .  If the primary
  8251                        ;      // status register is read more than once, 
                    there is the possibility
  8252                        ;      // of a race between the drive and the soft
  Sat Jul 10 2021  1:15                                                Page 157


                    ware and the next IRQ
  8253                        ;      // could be reset before the system interru
                    pt controller sees it.
  8254                        ;
  8255                        ;      // If BSY=0 and DRQ=1, transfer the data,
  8256                        ;      // even if we find out there is an error la
                    ter.
  8257                        ;
  8258                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == CB_STAT_DRQ )
  8259                        	.line	2048
  8260                        ;      {
  8261 06:AB2B: A5 05        	lda	<L301+status_1
  8262 06:AB2D: 29 88 00     	and	#<$88
  8263 06:AB30: 85 01        	sta	<R0
  8264 06:AB32: A5 01        	lda	<R0
  8265 06:AB34: C9 08 00     	cmp	#<$8
  8266 06:AB37: F0 03        	beq	L308
  8267 06:AB39: 82 F6 00     	brl	L10125
  8268                        L308:
  8269                        	.line	2049
  8270                        ;
  8271                        ;         // increment number of DRQ packets
  8272                        ;
  8273                        ;         reg_cmd_info.drqPackets ++ ;
  8274                        	.line	2053
  8275 06:AB3C: EE xx xx     	inc	|~~reg_cmd_info+37
  8276 06:AB3F: D0 03        	bne	L309
  8277 06:AB41: EE xx xx     	inc	|~~reg_cmd_info+37+2
  8278                        L309:
  8279                        ;
  8280                        ;         // determine the number of sectors to tr
                    ansfer
  8281                        ;
  8282                        ;         wordCnt = multiCnt ? multiCnt : 1;
  8283                        	.line	2057
  8284 06:AB44: A5 19        	lda	<L300+multiCnt_0
  8285 06:AB46: D0 03        	bne	L311
  8286 06:AB48: 82 04 00     	brl	L310
  8287                        L311:
  8288 06:AB4B: A5 19        	lda	<L300+multiCnt_0
  8289 06:AB4D: 80 03        	bra	L312
  8290                        L310:
  8291 06:AB4F: A9 01 00     	lda	#$1
  8292                        L312:
  8293 06:AB52: 85 01        	sta	<R0
  8294 06:AB54: A0 00 00     	ldy	#$0
  8295 06:AB57: A5 01        	lda	<R0
  8296 06:AB59: 10 01        	bpl	L313
  8297 06:AB5B: 88           	dey
  8298                        L313:
  8299 06:AB5C: 85 08        	sta	<L301+wordCnt_1
  8300 06:AB5E: 84 0A        	sty	<L301+wordCnt_1+2
  8301                        ;         if ( wordCnt > numSect )
  8302                        	.line	2058
  8303                        ;            wordCnt = numSect;
  8304 06:AB60: 38           	sec
  8305 06:AB61: A5 15        	lda	<L300+numSect_0
  Sat Jul 10 2021  1:15                                                Page 158


  8306 06:AB63: E5 08        	sbc	<L301+wordCnt_1
  8307 06:AB65: A5 17        	lda	<L300+numSect_0+2
  8308 06:AB67: E5 0A        	sbc	<L301+wordCnt_1+2
  8309 06:AB69: 70 03        	bvs	L314
  8310 06:AB6B: 49 00 80     	eor	#$8000
  8311                        L314:
  8312 06:AB6E: 10 03        	bpl	L315
  8313 06:AB70: 82 08 00     	brl	L10126
  8314                        L315:
  8315                        	.line	2059
  8316 06:AB73: A5 15        	lda	<L300+numSect_0
  8317 06:AB75: 85 08        	sta	<L301+wordCnt_1
  8318 06:AB77: A5 17        	lda	<L300+numSect_0+2
  8319 06:AB79: 85 0A        	sta	<L301+wordCnt_1+2
  8320                        ;         wordCnt = wordCnt * 256;
  8321                        L10126:
  8322                        	.line	2060
  8323 06:AB7B: D4 0A        	pei	<L301+wordCnt_1+2
  8324 06:AB7D: D4 08        	pei	<L301+wordCnt_1
  8325 06:AB7F: A9 08 00     	lda	#$8
  8326                        	xref	~~~lasl
  8327 06:AB82: 22 xx xx xx  	jsl	~~~lasl
  8328 06:AB86: 85 08        	sta	<L301+wordCnt_1
  8329 06:AB88: 86 0A        	stx	<L301+wordCnt_1+2
  8330                        ;
  8331                        ;         // Do the REP OUTSW to write the data fo
                    r one DRQ block.
  8332                        ;
  8333                        ;         reg_cmd_info.totalBytesXfer += ( wordCnt
                     << 1 );
  8334                        	.line	2064
  8335 06:AB8A: A5 08        	lda	<L301+wordCnt_1
  8336 06:AB8C: 85 01        	sta	<R0
  8337 06:AB8E: A5 0A        	lda	<L301+wordCnt_1+2
  8338 06:AB90: 85 03        	sta	<R0+2
  8339 06:AB92: 06 01        	asl	<R0
  8340 06:AB94: 26 03        	rol	<R0+2
  8341 06:AB96: 18           	clc
  8342 06:AB97: A5 01        	lda	<R0
  8343 06:AB99: 6D xx xx     	adc	|~~reg_cmd_info+33
  8344 06:AB9C: 8D xx xx     	sta	|~~reg_cmd_info+33
  8345 06:AB9F: A5 03        	lda	<R0+2
  8346 06:ABA1: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  8347 06:ABA4: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  8348                        ;         pio_drq_block_out( CB_DATA, bufAddr, wor
                    dCnt );
  8349                        	.line	2065
  8350 06:ABA7: D4 0A        	pei	<L301+wordCnt_1+2
  8351 06:ABA9: D4 08        	pei	<L301+wordCnt_1
  8352 06:ABAB: D4 13        	pei	<L300+bufAddr_0+2
  8353 06:ABAD: D4 11        	pei	<L300+bufAddr_0
  8354 06:ABAF: F4 00 00     	pea	#<$0
  8355 06:ABB2: 22 1B BA 06  	jsl	~~pio_drq_block_out
  8356                        ;
  8357                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  8358                        	.line	2067
  8359                        	.line	2067
  Sat Jul 10 2021  1:15                                                Page 159


  8360 06:ABB6: F4 08 00     	pea	#<$8
  8361 06:ABB9: 22 B1 B7 06  	jsl	~~pio_inbyte
  8362                        	.line	2067
  8363 06:ABBD: F4 08 00     	pea	#<$8
  8364 06:ABC0: 22 B1 B7 06  	jsl	~~pio_inbyte
  8365                        	.line	2067
  8366 06:ABC4: F4 08 00     	pea	#<$8
  8367 06:ABC7: 22 B1 B7 06  	jsl	~~pio_inbyte
  8368                        	.line	2067
  8369 06:ABCB: F4 08 00     	pea	#<$8
  8370 06:ABCE: 22 B1 B7 06  	jsl	~~pio_inbyte
  8371                        	.line	2067
  8372 06:ABD2: F4 08 00     	pea	#<$8
  8373 06:ABD5: 22 B1 B7 06  	jsl	~~pio_inbyte
  8374                        	.line	2067
  8375                        	.line	2067
  8376                        ;
  8377                        ;         // Note: The drive should have dropped D
                    ATA REQUEST and
  8378                        ;         // raised BUSY by now.
  8379                        ;
  8380                        ;         // Decrement the count of sectors to be 
                    transferred
  8381                        ;         // and increment buffer address.
  8382                        ;
  8383                        ;         numSect = numSect - ( multiCnt ? multiCn
                    t : 1 );
  8384                        	.line	2075
  8385 06:ABD9: A5 19        	lda	<L300+multiCnt_0
  8386 06:ABDB: D0 03        	bne	L317
  8387 06:ABDD: 82 04 00     	brl	L316
  8388                        L317:
  8389 06:ABE0: A5 19        	lda	<L300+multiCnt_0
  8390 06:ABE2: 80 03        	bra	L318
  8391                        L316:
  8392 06:ABE4: A9 01 00     	lda	#$1
  8393                        L318:
  8394 06:ABE7: 85 01        	sta	<R0
  8395 06:ABE9: A0 00 00     	ldy	#$0
  8396 06:ABEC: A5 01        	lda	<R0
  8397 06:ABEE: 10 01        	bpl	L319
  8398 06:ABF0: 88           	dey
  8399                        L319:
  8400 06:ABF1: 85 01        	sta	<R0
  8401 06:ABF3: 84 03        	sty	<R0+2
  8402 06:ABF5: 38           	sec
  8403 06:ABF6: A5 15        	lda	<L300+numSect_0
  8404 06:ABF8: E5 01        	sbc	<R0
  8405 06:ABFA: 85 15        	sta	<L300+numSect_0
  8406 06:ABFC: A5 17        	lda	<L300+numSect_0+2
  8407 06:ABFE: E5 03        	sbc	<R0+2
  8408 06:AC00: 85 17        	sta	<L300+numSect_0+2
  8409                        ;         bufAddr = bufAddr + ( 512 * ( multiCnt ?
                     multiCnt : 1 ) );
  8410                        	.line	2076
  8411 06:AC02: A5 19        	lda	<L300+multiCnt_0
  8412 06:AC04: D0 03        	bne	L321
  8413 06:AC06: 82 04 00     	brl	L320
  Sat Jul 10 2021  1:15                                                Page 160


  8414                        L321:
  8415 06:AC09: A5 19        	lda	<L300+multiCnt_0
  8416 06:AC0B: 80 03        	bra	L322
  8417                        L320:
  8418 06:AC0D: A9 01 00     	lda	#$1
  8419                        L322:
  8420 06:AC10: A2 09 00     	ldx	#<$9
  8421                        	xref	~~~asl
  8422 06:AC13: 22 xx xx xx  	jsl	~~~asl
  8423 06:AC17: 85 01        	sta	<R0
  8424 06:AC19: A0 00 00     	ldy	#$0
  8425 06:AC1C: A5 01        	lda	<R0
  8426 06:AC1E: 10 01        	bpl	L323
  8427 06:AC20: 88           	dey
  8428                        L323:
  8429 06:AC21: 85 01        	sta	<R0
  8430 06:AC23: 84 03        	sty	<R0+2
  8431 06:AC25: 18           	clc
  8432 06:AC26: A5 11        	lda	<L300+bufAddr_0
  8433 06:AC28: 65 01        	adc	<R0
  8434 06:AC2A: 85 11        	sta	<L300+bufAddr_0
  8435 06:AC2C: A5 13        	lda	<L300+bufAddr_0+2
  8436 06:AC2E: 65 03        	adc	<R0+2
  8437 06:AC30: 85 13        	sta	<L300+bufAddr_0+2
  8438                        ;      }
  8439                        	.line	2077
  8440                        ;
  8441                        ;      // So was there any error condition?
  8442                        ;
  8443                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_ERR ) )
  8444                        L10125:
  8445                        	.line	2081
  8446                        ;      {
  8447 06:AC32: E2 20        	sep	#$20
  8448                        	longa	off
  8449 06:AC34: A5 05        	lda	<L301+status_1
  8450 06:AC36: 29 A1        	and	#<$a1
  8451 06:AC38: C2 20        	rep	#$20
  8452                        	longa	on
  8453 06:AC3A: D0 03        	bne	L324
  8454 06:AC3C: 82 0C 00     	brl	L10127
  8455                        L324:
  8456                        	.line	2082
  8457                        ;         reg_cmd_info.ec = 41;
  8458                        	.line	2083
  8459 06:AC3F: E2 20        	sep	#$20
  8460                        	longa	off
  8461 06:AC41: A9 29        	lda	#$29
  8462 06:AC43: 8D xx xx     	sta	|~~reg_cmd_info+31
  8463 06:AC46: C2 20        	rep	#$20
  8464                        	longa	on
  8465                        ;         break;   // go to WRITE_DONE
  8466                        	.line	2084
  8467 06:AC48: 82 8C 00     	brl	L10124
  8468                        ;      }
  8469                        	.line	2085
  8470                        ;
  Sat Jul 10 2021  1:15                                                Page 161


  8471                        ;      // DRQ should have been set -- was it?
  8472                        ;
  8473                        ;      if ( ( status & CB_STAT_DRQ ) == 0 )
  8474                        L10127:
  8475                        	.line	2089
  8476                        ;      {
  8477 06:AC4B: E2 20        	sep	#$20
  8478                        	longa	off
  8479 06:AC4D: A5 05        	lda	<L301+status_1
  8480 06:AC4F: 29 08        	and	#<$8
  8481 06:AC51: C2 20        	rep	#$20
  8482                        	longa	on
  8483 06:AC53: F0 03        	beq	L325
  8484 06:AC55: 82 0C 00     	brl	L10128
  8485                        L325:
  8486                        	.line	2090
  8487                        ;         reg_cmd_info.ec = 42;
  8488                        	.line	2091
  8489 06:AC58: E2 20        	sep	#$20
  8490                        	longa	off
  8491 06:AC5A: A9 2A        	lda	#$2a
  8492 06:AC5C: 8D xx xx     	sta	|~~reg_cmd_info+31
  8493 06:AC5F: C2 20        	rep	#$20
  8494                        	longa	on
  8495                        ;         break;   // go to WRITE_DONE
  8496                        	.line	2092
  8497 06:AC61: 82 73 00     	brl	L10124
  8498                        ;      }
  8499                        	.line	2093
  8500                        ;
  8501                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  8502                        ;
  8503                        ;      sub_wait_poll( 44, 45 );
  8504                        L10128:
  8505                        	.line	2097
  8506 06:AC64: F4 2D 00     	pea	#<$2d
  8507 06:AC67: F4 2C 00     	pea	#<$2c
  8508 06:AC6A: 22 3F B6 06  	jsl	~~sub_wait_poll
  8509                        ;
  8510                        ;      // If polling or error read the status, oth
                    erwise
  8511                        ;      // get the status that was read by the inte
                    rrupt handler.
  8512                        ;
  8513                        ;      if ( ( ! int_use_intr_flag ) || ( reg_cmd_i
                    nfo.ec ) )
  8514                        	.line	2102
  8515                        ;         status = pio_inbyte( CB_STAT );
  8516 06:AC6E: AD xx xx     	lda	|~~int_use_intr_flag
  8517 06:AC71: 29 FF 00     	and	#$ff
  8518 06:AC74: D0 03        	bne	L327
  8519 06:AC76: 82 0B 00     	brl	L326
  8520                        L327:
  8521 06:AC79: AD xx xx     	lda	|~~reg_cmd_info+31
  8522 06:AC7C: 29 FF 00     	and	#$ff
  8523 06:AC7F: D0 03        	bne	L328
  8524 06:AC81: 82 10 00     	brl	L10129
  Sat Jul 10 2021  1:15                                                Page 162


  8525                        L328:
  8526                        L326:
  8527                        	.line	2103
  8528 06:AC84: F4 07 00     	pea	#<$7
  8529 06:AC87: 22 B1 B7 06  	jsl	~~pio_inbyte
  8530 06:AC8B: E2 20        	sep	#$20
  8531                        	longa	off
  8532 06:AC8D: 85 05        	sta	<L301+status_1
  8533 06:AC8F: C2 20        	rep	#$20
  8534                        	longa	on
  8535                        ;      else
  8536 06:AC91: 82 09 00     	brl	L10130
  8537                        L10129:
  8538                        ;         status = int_ata_status;
  8539                        	.line	2105
  8540 06:AC94: E2 20        	sep	#$20
  8541                        	longa	off
  8542 06:AC96: AD xx xx     	lda	|~~int_ata_status
  8543 06:AC99: 85 05        	sta	<L301+status_1
  8544 06:AC9B: C2 20        	rep	#$20
  8545                        	longa	on
  8546                        L10130:
  8547                        ;
  8548                        ;      // If there was a time out error, go to WRI
                    TE_DONE.
  8549                        ;
  8550                        ;      if ( reg_cmd_info.ec )
  8551                        	.line	2109
  8552                        ;         break;   // go to WRITE_DONE
  8553 06:AC9D: AD xx xx     	lda	|~~reg_cmd_info+31
  8554 06:ACA0: 29 FF 00     	and	#$ff
  8555 06:ACA3: F0 03        	beq	L329
  8556 06:ACA5: 82 2F 00     	brl	L10124
  8557                        L329:
  8558                        ;
  8559                        ;      // If all of the requested sectors have bee
                    n transferred, make a
  8560                        ;      // few more checks before we exit.
  8561                        ;
  8562                        ;      if ( numSect < 1 )
  8563                        	.line	2115
  8564                        ;      {
  8565 06:ACA8: A5 17        	lda	<L300+numSect_0+2
  8566 06:ACAA: 30 0C        	bmi	L330
  8567 06:ACAC: D0 07        	bne	L331
  8568 06:ACAE: A5 15        	lda	<L300+numSect_0
  8569 06:ACB0: C9 01 00     	cmp	#1
  8570 06:ACB3: 90 03        	bcc	L330
  8571                        L331:
  8572 06:ACB5: 82 1C 00     	brl	L10131
  8573                        L330:
  8574                        	.line	2116
  8575                        ;         // Since the drive has transferred all o
                    f the sectors without
  8576                        ;         // error, the drive MUST not have BUSY, 
                    DEVICE FAULT, DATA REQUEST
  8577                        ;         // or ERROR status at this time.
  8578                        ;
  Sat Jul 10 2021  1:15                                                Page 163


  8579                        ;         if ( status & ( CB_STAT_BSY | CB_STAT_DF
                     | CB_STAT_DRQ | CB_STAT_ERR ) )
  8580                        	.line	2121
  8581                        ;         {
  8582 06:ACB8: E2 20        	sep	#$20
  8583                        	longa	off
  8584 06:ACBA: A5 05        	lda	<L301+status_1
  8585 06:ACBC: 29 A9        	and	#<$a9
  8586 06:ACBE: C2 20        	rep	#$20
  8587                        	longa	on
  8588 06:ACC0: D0 03        	bne	L332
  8589 06:ACC2: 82 0C 00     	brl	L10132
  8590                        L332:
  8591                        	.line	2122
  8592                        ;            reg_cmd_info.ec = 43;
  8593                        	.line	2123
  8594 06:ACC5: E2 20        	sep	#$20
  8595                        	longa	off
  8596 06:ACC7: A9 2B        	lda	#$2b
  8597 06:ACC9: 8D xx xx     	sta	|~~reg_cmd_info+31
  8598 06:ACCC: C2 20        	rep	#$20
  8599                        	longa	on
  8600                        ;            break;   // go to WRITE_DONE
  8601                        	.line	2124
  8602 06:ACCE: 82 06 00     	brl	L10124
  8603                        ;         }
  8604                        	.line	2125
  8605                        ;
  8606                        ;         // All sectors have been written without
                     error, go to WRITE_DONE.
  8607                        ;
  8608                        ;         break;   // go to WRITE_DONE
  8609                        L10132:
  8610                        	.line	2129
  8611 06:ACD1: 82 03 00     	brl	L10124
  8612                        ;
  8613                        ;      }
  8614                        	.line	2131
  8615                        ;
  8616                        ;      //
  8617                        ;      // This is the end of the write loop.  If w
                    e get here, the loop
  8618                        ;      // is repeated to write the next sector.  G
                    o back to WRITE_LOOP.
  8619                        ;
  8620                        ;   }
  8621                        L10131:
  8622                        	.line	2137
  8623 06:ACD4: 82 4D FE     	brl	L10123
  8624                        L10124:
  8625                        ;
  8626                        ;   // BMIDE Error=1?
  8627                        ;
  8628                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  8629                        	.line	2141
  8630                        ;   {
  8631 06:ACD7: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  Sat Jul 10 2021  1:15                                                Page 164


  8632 06:ACDB: E2 20        	sep	#$20
  8633                        	longa	off
  8634 06:ACDD: 29 02        	and	#<$2
  8635 06:ACDF: C2 20        	rep	#$20
  8636                        	longa	on
  8637 06:ACE1: D0 03        	bne	L333
  8638 06:ACE3: 82 09 00     	brl	L10133
  8639                        L333:
  8640                        	.line	2142
  8641                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  8642                        	.line	2143
  8643 06:ACE6: E2 20        	sep	#$20
  8644                        	longa	off
  8645 06:ACE8: A9 4E        	lda	#$4e
  8646 06:ACEA: 8D xx xx     	sta	|~~reg_cmd_info+31
  8647 06:ACED: C2 20        	rep	#$20
  8648                        	longa	on
  8649                        ;   }
  8650                        	.line	2144
  8651                        ;
  8652                        ;   // WRITE_DONE:
  8653                        ;
  8654                        ;   // All done.  The return values of this functi
                    on are described in
  8655                        ;   // MINDRVR.H.
  8656                        ;
  8657                        ;   if ( reg_cmd_info.ec )
  8658                        L10133:
  8659                        	.line	2151
  8660                        ;      return 1;
  8661 06:ACEF: AD xx xx     	lda	|~~reg_cmd_info+31
  8662 06:ACF2: 29 FF 00     	and	#$ff
  8663 06:ACF5: D0 03        	bne	L334
  8664 06:ACF7: 82 06 00     	brl	L10134
  8665                        L334:
  8666                        	.line	2152
  8667 06:ACFA: A9 01 00     	lda	#$1
  8668 06:ACFD: 82 A2 FD     	brl	L304
  8669                        ;   return 0;
  8670                        L10134:
  8671                        	.line	2153
  8672 06:AD00: A9 00 00     	lda	#$0
  8673 06:AD03: 82 9C FD     	brl	L304
  8674                        ;}
  8675                        	.line	2154
  8676                        	.endblock	2154
  8677             0000000B   L300	equ	11
  8678             00000005   L301	equ	5
  8679 06:AD06:              	ends
  8680                        	efunc
  8681                        	.endfunc	2154,5,11
  8682                        	.line	2154
  8683                        ;
  8684                        ;//***********************************************
                    **************
  8685                        ;//
  8686                        ;// reg_pio_data_out_lba28() - Easy way to execute
  Sat Jul 10 2021  1:15                                                Page 165


                     a PIO Data In command
  8687                        ;//                            using an LBA sector
                     address.
  8688                        ;//
  8689                        ;//***********************************************
                    **************
  8690                        ;
  8691                        ;int reg_pio_data_out_lba28( unsigned char dev, un
                    signed char cmd,
  8692                        ;                            unsigned int fr, unsi
                    gned int sc,
  8693                        ;                            unsigned long lba,
  8694                        ;                            unsigned char * bufAd
                    dr,
  8695                        ;                            long numSect, int mul
                    tiCnt )
  8696                        ;
  8697                        ;{
  8698                        	.line	2163
  8699                        	.line	2169
  8700                        	FXHDD
  8701                        	xdef	~~reg_pio_data_out_lba28
  8702                        	func
  8703                        	.function	2169
  8704                        ~~reg_pio_data_out_lba28:
  8705                        	longa	on
  8706                        	longi	on
  8707 06:AD06: 3B           	tsc
  8708 06:AD07: 38           	sec
  8709 06:AD08: E9 04 00     	sbc	#L335
  8710 06:AD0B: 1B           	tcs
  8711 06:AD0C: 0B           	phd
  8712 06:AD0D: 5B           	tcd
  8713             00000004   dev_0	set	4
  8714             00000006   cmd_0	set	6
  8715             00000008   fr_0	set	8
  8716             0000000A   sc_0	set	10
  8717             0000000C   lba_0	set	12
  8718             00000010   bufAddr_0	set	16
  8719             00000014   numSect_0	set	20
  8720             00000018   multiCnt_0	set	24
  8721                        	.block	2169
  8722                        ;
  8723                        ;   reg_cmd_info.cmd = cmd;
  8724                        	.sym	dev,4,14,6,8
  8725                        	.sym	cmd,6,14,6,8
  8726                        	.sym	fr,8,16,6,16
  8727                        	.sym	sc,10,16,6,16
  8728                        	.sym	lba,12,18,6,32
  8729                        	.sym	bufAddr,16,142,6,32
  8730                        	.sym	numSect,20,7,6,32
  8731                        	.sym	multiCnt,24,5,6,16
  8732                        	.line	2171
  8733 06:AD0E: E2 20        	sep	#$20
  8734                        	longa	off
  8735 06:AD10: A5 0A        	lda	<L335+cmd_0
  8736 06:AD12: 8D xx xx     	sta	|~~reg_cmd_info
  8737 06:AD15: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 166


  8738                        	longa	on
  8739                        ;   reg_cmd_info.fr = fr;
  8740                        	.line	2172
  8741 06:AD17: A5 0C        	lda	<L335+fr_0
  8742 06:AD19: 8D xx xx     	sta	|~~reg_cmd_info+1
  8743                        ;   reg_cmd_info.sc = sc;
  8744                        	.line	2173
  8745 06:AD1C: A5 0E        	lda	<L335+sc_0
  8746 06:AD1E: 8D xx xx     	sta	|~~reg_cmd_info+3
  8747                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  8748                        	.line	2174
  8749 06:AD21: A5 08        	lda	<L335+dev_0
  8750 06:AD23: 29 FF 00     	and	#$ff
  8751 06:AD26: D0 03        	bne	L339
  8752 06:AD28: 82 05 00     	brl	L338
  8753                        L339:
  8754 06:AD2B: A9 10 00     	lda	#$10
  8755 06:AD2E: 80 03        	bra	L340
  8756                        L338:
  8757 06:AD30: A9 00 00     	lda	#$0
  8758                        L340:
  8759 06:AD33: 09 40 00     	ora	#<$40
  8760 06:AD36: 85 01        	sta	<R0
  8761 06:AD38: E2 20        	sep	#$20
  8762                        	longa	off
  8763 06:AD3A: A5 01        	lda	<R0
  8764 06:AD3C: 8D xx xx     	sta	|~~reg_cmd_info+11
  8765 06:AD3F: C2 20        	rep	#$20
  8766                        	longa	on
  8767                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  8768                        	.line	2175
  8769 06:AD41: AD xx xx     	lda	|~~int_use_intr_flag
  8770 06:AD44: 29 FF 00     	and	#$ff
  8771 06:AD47: D0 03        	bne	L342
  8772 06:AD49: 82 05 00     	brl	L341
  8773                        L342:
  8774 06:AD4C: A9 00 00     	lda	#$0
  8775 06:AD4F: 80 03        	bra	L343
  8776                        L341:
  8777 06:AD51: A9 02 00     	lda	#$2
  8778                        L343:
  8779 06:AD54: 85 01        	sta	<R0
  8780 06:AD56: E2 20        	sep	#$20
  8781                        	longa	off
  8782 06:AD58: A5 01        	lda	<R0
  8783 06:AD5A: 8D xx xx     	sta	|~~reg_cmd_info+12
  8784 06:AD5D: C2 20        	rep	#$20
  8785                        	longa	on
  8786                        ;   reg_cmd_info.lbaSize = LBA28;
  8787                        	.line	2176
  8788 06:AD5F: E2 20        	sep	#$20
  8789                        	longa	off
  8790 06:AD61: A9 1C        	lda	#$1c
  8791 06:AD63: 8D xx xx     	sta	|~~reg_cmd_info+19
  8792 06:AD66: C2 20        	rep	#$20
  8793                        	longa	on
  Sat Jul 10 2021  1:15                                                Page 167


  8794                        ;   reg_cmd_info.lbaHigh = 0;
  8795                        	.line	2177
  8796 06:AD68: 9C xx xx     	stz	|~~reg_cmd_info+24
  8797 06:AD6B: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  8798                        ;   reg_cmd_info.lbaLow = lba;
  8799                        	.line	2178
  8800 06:AD6E: A5 10        	lda	<L335+lba_0
  8801 06:AD70: 8D xx xx     	sta	|~~reg_cmd_info+20
  8802 06:AD73: A5 12        	lda	<L335+lba_0+2
  8803 06:AD75: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  8804                        ;
  8805                        ;   // adjust multiple count
  8806                        ;   if ( multiCnt & 0x0800 )
  8807                        	.line	2181
  8808                        ;   {
  8809 06:AD78: A5 1C        	lda	<L335+multiCnt_0
  8810 06:AD7A: 29 00 08     	and	#<$800
  8811 06:AD7D: D0 03        	bne	L344
  8812 06:AD7F: 82 08 00     	brl	L10135
  8813                        L344:
  8814                        	.line	2182
  8815                        ;      // assume caller knows what they are doing
  8816                        ;      multiCnt &= 0x00ff;
  8817                        	.line	2184
  8818 06:AD82: A9 00 FF     	lda	#$ff00
  8819 06:AD85: 14 1C        	trb	<L335+multiCnt_0
  8820                        ;   }
  8821                        	.line	2185
  8822                        ;   else
  8823 06:AD87: 82 1F 00     	brl	L10136
  8824                        L10135:
  8825                        ;   {
  8826                        	.line	2187
  8827                        ;      // only Write Multiple and CFA Write Multip
                    le W/O Erase uses multiCnt
  8828                        ;      if (    ( cmd != CMD_WRITE_MULTIPLE )
  8829                        	.line	2189
  8830                        ;           && ( cmd != CMD_CFA_WRITE_MULTIPLE_WO_
                    ERASE )
  8831                        ;         )
  8832                        ;         multiCnt = 1;
  8833 06:AD8A: E2 20        	sep	#$20
  8834                        	longa	off
  8835 06:AD8C: A5 0A        	lda	<L335+cmd_0
  8836 06:AD8E: C9 C5        	cmp	#<$c5
  8837 06:AD90: C2 20        	rep	#$20
  8838                        	longa	on
  8839 06:AD92: D0 03        	bne	L345
  8840 06:AD94: 82 12 00     	brl	L10137
  8841                        L345:
  8842 06:AD97: E2 20        	sep	#$20
  8843                        	longa	off
  8844 06:AD99: A5 0A        	lda	<L335+cmd_0
  8845 06:AD9B: C9 CD        	cmp	#<$cd
  8846 06:AD9D: C2 20        	rep	#$20
  8847                        	longa	on
  8848 06:AD9F: D0 03        	bne	L346
  8849 06:ADA1: 82 05 00     	brl	L10137
  Sat Jul 10 2021  1:15                                                Page 168


  8850                        L346:
  8851                        	.line	2192
  8852 06:ADA4: A9 01 00     	lda	#$1
  8853 06:ADA7: 85 1C        	sta	<L335+multiCnt_0
  8854                        ;   }
  8855                        L10137:
  8856                        	.line	2193
  8857                        L10136:
  8858                        ;
  8859                        ;   reg_cmd_info.ns  = numSect;
  8860                        	.line	2195
  8861 06:ADA9: A5 18        	lda	<L335+numSect_0
  8862 06:ADAB: 8D xx xx     	sta	|~~reg_cmd_info+13
  8863 06:ADAE: A5 1A        	lda	<L335+numSect_0+2
  8864 06:ADB0: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  8865                        ;   reg_cmd_info.mc  = multiCnt;
  8866                        	.line	2196
  8867 06:ADB3: A5 1C        	lda	<L335+multiCnt_0
  8868 06:ADB5: 8D xx xx     	sta	|~~reg_cmd_info+17
  8869                        ;
  8870                        ;   return exec_pio_data_out_cmd( dev, bufAddr, nu
                    mSect, multiCnt );
  8871                        	.line	2198
  8872 06:ADB8: D4 1C        	pei	<L335+multiCnt_0
  8873 06:ADBA: D4 1A        	pei	<L335+numSect_0+2
  8874 06:ADBC: D4 18        	pei	<L335+numSect_0
  8875 06:ADBE: D4 16        	pei	<L335+bufAddr_0+2
  8876 06:ADC0: D4 14        	pei	<L335+bufAddr_0
  8877 06:ADC2: D4 08        	pei	<L335+dev_0
  8878 06:ADC4: 22 7B AA 06  	jsl	~~exec_pio_data_out_cmd
  8879                        L347:
  8880 06:ADC8: A8           	tay
  8881 06:ADC9: A5 06        	lda	<L335+2
  8882 06:ADCB: 85 1C        	sta	<L335+2+22
  8883 06:ADCD: A5 05        	lda	<L335+1
  8884 06:ADCF: 85 1B        	sta	<L335+1+22
  8885 06:ADD1: 2B           	pld
  8886 06:ADD2: 3B           	tsc
  8887 06:ADD3: 18           	clc
  8888 06:ADD4: 69 1A 00     	adc	#L335+22
  8889 06:ADD7: 1B           	tcs
  8890 06:ADD8: 98           	tya
  8891 06:ADD9: 6B           	rtl
  8892                        ;}
  8893                        	.line	2199
  8894                        	.endblock	2199
  8895             00000004   L335	equ	4
  8896             00000005   L336	equ	5
  8897 06:ADDA:              	ends
  8898                        	efunc
  8899                        	.endfunc	2199,5,4
  8900                        	.line	2199
  8901                        ;
  8902                        ;//***********************************************
                    **************
  8903                        ;//
  8904                        ;// reg_pio_data_out_lba48() - Easy way to execute
                     a PIO Data In command
  Sat Jul 10 2021  1:15                                                Page 169


  8905                        ;//                            using an LBA sector
                     address.
  8906                        ;//
  8907                        ;//***********************************************
                    **************
  8908                        ;
  8909                        ;int reg_pio_data_out_lba48( unsigned char dev, un
                    signed char cmd,
  8910                        ;                            unsigned int fr, unsi
                    gned int sc,
  8911                        ;                            unsigned long lbahi, 
                    unsigned long lbalo,
  8912                        ;                            unsigned char * bufAd
                    dr,
  8913                        ;                            long numSect, int mul
                    tiCnt )
  8914                        ;
  8915                        ;{
  8916                        	.line	2208
  8917                        	.line	2214
  8918                        	FXHDD
  8919                        	xdef	~~reg_pio_data_out_lba48
  8920                        	func
  8921                        	.function	2214
  8922                        ~~reg_pio_data_out_lba48:
  8923                        	longa	on
  8924                        	longi	on
  8925 06:ADDA: 3B           	tsc
  8926 06:ADDB: 38           	sec
  8927 06:ADDC: E9 04 00     	sbc	#L348
  8928 06:ADDF: 1B           	tcs
  8929 06:ADE0: 0B           	phd
  8930 06:ADE1: 5B           	tcd
  8931             00000004   dev_0	set	4
  8932             00000006   cmd_0	set	6
  8933             00000008   fr_0	set	8
  8934             0000000A   sc_0	set	10
  8935             0000000C   lbahi_0	set	12
  8936             00000010   lbalo_0	set	16
  8937             00000014   bufAddr_0	set	20
  8938             00000018   numSect_0	set	24
  8939             0000001C   multiCnt_0	set	28
  8940                        	.block	2214
  8941                        ;
  8942                        ;   reg_cmd_info.cmd = cmd;
  8943                        	.sym	dev,4,14,6,8
  8944                        	.sym	cmd,6,14,6,8
  8945                        	.sym	fr,8,16,6,16
  8946                        	.sym	sc,10,16,6,16
  8947                        	.sym	lbahi,12,18,6,32
  8948                        	.sym	lbalo,16,18,6,32
  8949                        	.sym	bufAddr,20,142,6,32
  8950                        	.sym	numSect,24,7,6,32
  8951                        	.sym	multiCnt,28,5,6,16
  8952                        	.line	2216
  8953 06:ADE2: E2 20        	sep	#$20
  8954                        	longa	off
  8955 06:ADE4: A5 0A        	lda	<L348+cmd_0
  Sat Jul 10 2021  1:15                                                Page 170


  8956 06:ADE6: 8D xx xx     	sta	|~~reg_cmd_info
  8957 06:ADE9: C2 20        	rep	#$20
  8958                        	longa	on
  8959                        ;   reg_cmd_info.fr = fr;
  8960                        	.line	2217
  8961 06:ADEB: A5 0C        	lda	<L348+fr_0
  8962 06:ADED: 8D xx xx     	sta	|~~reg_cmd_info+1
  8963                        ;   reg_cmd_info.sc = sc;
  8964                        	.line	2218
  8965 06:ADF0: A5 0E        	lda	<L348+sc_0
  8966 06:ADF2: 8D xx xx     	sta	|~~reg_cmd_info+3
  8967                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  8968                        	.line	2219
  8969 06:ADF5: A5 08        	lda	<L348+dev_0
  8970 06:ADF7: 29 FF 00     	and	#$ff
  8971 06:ADFA: D0 03        	bne	L352
  8972 06:ADFC: 82 05 00     	brl	L351
  8973                        L352:
  8974 06:ADFF: A9 10 00     	lda	#$10
  8975 06:AE02: 80 03        	bra	L353
  8976                        L351:
  8977 06:AE04: A9 00 00     	lda	#$0
  8978                        L353:
  8979 06:AE07: 09 40 00     	ora	#<$40
  8980 06:AE0A: 85 01        	sta	<R0
  8981 06:AE0C: E2 20        	sep	#$20
  8982                        	longa	off
  8983 06:AE0E: A5 01        	lda	<R0
  8984 06:AE10: 8D xx xx     	sta	|~~reg_cmd_info+11
  8985 06:AE13: C2 20        	rep	#$20
  8986                        	longa	on
  8987                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  8988                        	.line	2220
  8989 06:AE15: AD xx xx     	lda	|~~int_use_intr_flag
  8990 06:AE18: 29 FF 00     	and	#$ff
  8991 06:AE1B: D0 03        	bne	L355
  8992 06:AE1D: 82 05 00     	brl	L354
  8993                        L355:
  8994 06:AE20: A9 00 00     	lda	#$0
  8995 06:AE23: 80 03        	bra	L356
  8996                        L354:
  8997 06:AE25: A9 02 00     	lda	#$2
  8998                        L356:
  8999 06:AE28: 85 01        	sta	<R0
  9000 06:AE2A: E2 20        	sep	#$20
  9001                        	longa	off
  9002 06:AE2C: A5 01        	lda	<R0
  9003 06:AE2E: 8D xx xx     	sta	|~~reg_cmd_info+12
  9004 06:AE31: C2 20        	rep	#$20
  9005                        	longa	on
  9006                        ;   reg_cmd_info.lbaSize = LBA48;
  9007                        	.line	2221
  9008 06:AE33: E2 20        	sep	#$20
  9009                        	longa	off
  9010 06:AE35: A9 30        	lda	#$30
  9011 06:AE37: 8D xx xx     	sta	|~~reg_cmd_info+19
  Sat Jul 10 2021  1:15                                                Page 171


  9012 06:AE3A: C2 20        	rep	#$20
  9013                        	longa	on
  9014                        ;   reg_cmd_info.lbaHigh = lbahi;
  9015                        	.line	2222
  9016 06:AE3C: A5 10        	lda	<L348+lbahi_0
  9017 06:AE3E: 8D xx xx     	sta	|~~reg_cmd_info+24
  9018 06:AE41: A5 12        	lda	<L348+lbahi_0+2
  9019 06:AE43: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  9020                        ;   reg_cmd_info.lbaLow = lbalo;
  9021                        	.line	2223
  9022 06:AE46: A5 14        	lda	<L348+lbalo_0
  9023 06:AE48: 8D xx xx     	sta	|~~reg_cmd_info+20
  9024 06:AE4B: A5 16        	lda	<L348+lbalo_0+2
  9025 06:AE4D: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  9026                        ;
  9027                        ;   // adjust multiple count
  9028                        ;   if ( multiCnt & 0x0800 )
  9029                        	.line	2226
  9030                        ;   {
  9031 06:AE50: A5 20        	lda	<L348+multiCnt_0
  9032 06:AE52: 29 00 08     	and	#<$800
  9033 06:AE55: D0 03        	bne	L357
  9034 06:AE57: 82 08 00     	brl	L10138
  9035                        L357:
  9036                        	.line	2227
  9037                        ;      // assume caller knows what they are doing
  9038                        ;      multiCnt &= 0x00ff;
  9039                        	.line	2229
  9040 06:AE5A: A9 00 FF     	lda	#$ff00
  9041 06:AE5D: 14 20        	trb	<L348+multiCnt_0
  9042                        ;   }
  9043                        	.line	2230
  9044                        ;   else
  9045 06:AE5F: 82 12 00     	brl	L10139
  9046                        L10138:
  9047                        ;   {
  9048                        	.line	2232
  9049                        ;      // only Write Multiple Ext uses multiCnt
  9050                        ;      if ( cmd != CMD_WRITE_MULTIPLE_EXT )
  9051                        	.line	2234
  9052                        ;         multiCnt = 1;
  9053 06:AE62: E2 20        	sep	#$20
  9054                        	longa	off
  9055 06:AE64: A5 0A        	lda	<L348+cmd_0
  9056 06:AE66: C9 39        	cmp	#<$39
  9057 06:AE68: C2 20        	rep	#$20
  9058                        	longa	on
  9059 06:AE6A: D0 03        	bne	L358
  9060 06:AE6C: 82 05 00     	brl	L10140
  9061                        L358:
  9062                        	.line	2235
  9063 06:AE6F: A9 01 00     	lda	#$1
  9064 06:AE72: 85 20        	sta	<L348+multiCnt_0
  9065                        ;   }
  9066                        L10140:
  9067                        	.line	2236
  9068                        L10139:
  9069                        ;
  Sat Jul 10 2021  1:15                                                Page 172


  9070                        ;   reg_cmd_info.ns  = numSect;
  9071                        	.line	2238
  9072 06:AE74: A5 1C        	lda	<L348+numSect_0
  9073 06:AE76: 8D xx xx     	sta	|~~reg_cmd_info+13
  9074 06:AE79: A5 1E        	lda	<L348+numSect_0+2
  9075 06:AE7B: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  9076                        ;   reg_cmd_info.mc  = multiCnt;
  9077                        	.line	2239
  9078 06:AE7E: A5 20        	lda	<L348+multiCnt_0
  9079 06:AE80: 8D xx xx     	sta	|~~reg_cmd_info+17
  9080                        ;
  9081                        ;   return exec_pio_data_out_cmd( dev, bufAddr, nu
                    mSect, multiCnt );
  9082                        	.line	2241
  9083 06:AE83: D4 20        	pei	<L348+multiCnt_0
  9084 06:AE85: D4 1E        	pei	<L348+numSect_0+2
  9085 06:AE87: D4 1C        	pei	<L348+numSect_0
  9086 06:AE89: D4 1A        	pei	<L348+bufAddr_0+2
  9087 06:AE8B: D4 18        	pei	<L348+bufAddr_0
  9088 06:AE8D: D4 08        	pei	<L348+dev_0
  9089 06:AE8F: 22 7B AA 06  	jsl	~~exec_pio_data_out_cmd
  9090                        L359:
  9091 06:AE93: A8           	tay
  9092 06:AE94: A5 06        	lda	<L348+2
  9093 06:AE96: 85 20        	sta	<L348+2+26
  9094 06:AE98: A5 05        	lda	<L348+1
  9095 06:AE9A: 85 1F        	sta	<L348+1+26
  9096 06:AE9C: 2B           	pld
  9097 06:AE9D: 3B           	tsc
  9098 06:AE9E: 18           	clc
  9099 06:AE9F: 69 1E 00     	adc	#L348+26
  9100 06:AEA2: 1B           	tcs
  9101 06:AEA3: 98           	tya
  9102 06:AEA4: 6B           	rtl
  9103                        ;}
  9104                        	.line	2242
  9105                        	.endblock	2242
  9106             00000004   L348	equ	4
  9107             00000005   L349	equ	5
  9108 06:AEA5:              	ends
  9109                        	efunc
  9110                        	.endfunc	2242,5,4
  9111                        	.line	2242
  9112                        ;
  9113                        ;#ifdef INCLUDE_ATAPI_PIO
  9114                        ;
  9115                        ;//***********************************************
                    **************
  9116                        ;//
  9117                        ;// reg_packet() - Execute an ATAPI Packet (A0H) c
                    ommand.
  9118                        ;//
  9119                        ;// See ATA-4 Section 9.10, Figure 14.
  9120                        ;//
  9121                        ;//***********************************************
                    **************
  9122                        ;
  9123                        ;int reg_packet( unsigned char dev,
  Sat Jul 10 2021  1:15                                                Page 173


  9124                        ;                unsigned int cpbc,
  9125                        ;                unsigned char * cdbBufAddr,
  9126                        ;                int dir,
  9127                        ;                long dpbc,
  9128                        ;                unsigned char * dataBufAddr )
  9129                        ;
  9130                        ;{
  9131                        	.line	2254
  9132                        	.line	2261
  9133                        	FXHDD
  9134                        	xdef	~~reg_packet
  9135                        	func
  9136                        	.function	2261
  9137                        ~~reg_packet:
  9138                        	longa	on
  9139                        	longi	on
  9140 06:AEA5: 3B           	tsc
  9141 06:AEA6: 38           	sec
  9142 06:AEA7: E9 13 00     	sbc	#L360
  9143 06:AEAA: 1B           	tcs
  9144 06:AEAB: 0B           	phd
  9145 06:AEAC: 5B           	tcd
  9146             00000004   dev_0	set	4
  9147             00000006   cpbc_0	set	6
  9148             00000008   cdbBufAddr_0	set	8
  9149             0000000C   dir_0	set	12
  9150             0000000E   dpbc_0	set	14
  9151             00000012   dataBufAddr_0	set	18
  9152                        	.block	2261
  9153                        ;   unsigned char status;
  9154                        ;   unsigned int byteCnt;
  9155                        ;   long wordCnt;
  9156                        ;
  9157                        ;   // reset Bus Master Error bit
  9158                        ;
  9159                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  9160             00000000   status_1	set	0
  9161             00000001   byteCnt_1	set	1
  9162             00000003   wordCnt_1	set	3
  9163                        	.sym	status,0,14,1,8
  9164                        	.sym	byteCnt,1,16,1,16
  9165                        	.sym	wordCnt,3,7,1,32
  9166                        	.sym	dev,4,14,6,8
  9167                        	.sym	cpbc,6,16,6,16
  9168                        	.sym	cdbBufAddr,8,142,6,32
  9169                        	.sym	dir,12,5,6,16
  9170                        	.sym	dpbc,14,7,6,32
  9171                        	.sym	dataBufAddr,18,142,6,32
  9172                        	.line	2268
  9173 06:AEAD: F4 02 00     	pea	#<$2
  9174 06:AEB0: 22 76 B7 06  	jsl	~~pio_writeBusMstrStatus
  9175                        ;
  9176                        ;   // Make sure the command packet size is either
                     12 or 16
  9177                        ;   // and save the command packet size and data.
  9178                        ;
  9179                        ;   cpbc = cpbc < 12 ? 12 : cpbc;
  9180                        	.line	2273
  Sat Jul 10 2021  1:15                                                Page 174


  9181 06:AEB4: A5 19        	lda	<L360+cpbc_0
  9182 06:AEB6: C9 0C 00     	cmp	#<$c
  9183 06:AEB9: 90 03        	bcc	L364
  9184 06:AEBB: 82 05 00     	brl	L363
  9185                        L364:
  9186 06:AEBE: A9 0C 00     	lda	#$c
  9187 06:AEC1: 80 02        	bra	L365
  9188                        L363:
  9189 06:AEC3: A5 19        	lda	<L360+cpbc_0
  9190                        L365:
  9191 06:AEC5: 85 19        	sta	<L360+cpbc_0
  9192                        ;   cpbc = cpbc > 12 ? 16 : cpbc;
  9193                        	.line	2274
  9194 06:AEC7: A9 0C 00     	lda	#$c
  9195 06:AECA: C5 19        	cmp	<L360+cpbc_0
  9196 06:AECC: 90 03        	bcc	L367
  9197 06:AECE: 82 05 00     	brl	L366
  9198                        L367:
  9199 06:AED1: A9 10 00     	lda	#$10
  9200 06:AED4: 80 02        	bra	L368
  9201                        L366:
  9202 06:AED6: A5 19        	lda	<L360+cpbc_0
  9203                        L368:
  9204 06:AED8: 85 19        	sta	<L360+cpbc_0
  9205                        ;
  9206                        ;   // Setup current command information.
  9207                        ;
  9208                        ;   reg_cmd_info.cmd = CMD_PACKET;
  9209                        	.line	2278
  9210 06:AEDA: E2 20        	sep	#$20
  9211                        	longa	off
  9212 06:AEDC: A9 A0        	lda	#$a0
  9213 06:AEDE: 8D xx xx     	sta	|~~reg_cmd_info
  9214 06:AEE1: C2 20        	rep	#$20
  9215                        	longa	on
  9216                        ;   reg_cmd_info.fr = 0;
  9217                        	.line	2279
  9218 06:AEE3: 9C xx xx     	stz	|~~reg_cmd_info+1
  9219                        ;   reg_cmd_info.sc = 0;
  9220                        	.line	2280
  9221 06:AEE6: 9C xx xx     	stz	|~~reg_cmd_info+3
  9222                        ;   reg_cmd_info.sn = 0;
  9223                        	.line	2281
  9224 06:AEE9: 9C xx xx     	stz	|~~reg_cmd_info+5
  9225                        ;   reg_cmd_info.cl = (unsigned char) ( dpbc & 0x0
                    0ff );
  9226                        	.line	2282
  9227 06:AEEC: A5 21        	lda	<L360+dpbc_0
  9228 06:AEEE: 29 FF 00     	and	#<$ff
  9229 06:AEF1: 85 01        	sta	<R0
  9230 06:AEF3: 64 03        	stz	<R0+2
  9231 06:AEF5: A5 01        	lda	<R0
  9232 06:AEF7: 29 FF 00     	and	#$ff
  9233 06:AEFA: 8D xx xx     	sta	|~~reg_cmd_info+7
  9234                        ;   reg_cmd_info.ch = ( unsigned char) ( ( dpbc & 
                    0xff00 ) >> 8 );
  9235                        	.line	2283
  9236 06:AEFD: A5 21        	lda	<L360+dpbc_0
  Sat Jul 10 2021  1:15                                                Page 175


  9237 06:AEFF: 29 00 FF     	and	#<$ff00
  9238 06:AF02: 85 05        	sta	<R1
  9239 06:AF04: 64 07        	stz	<R1+2
  9240 06:AF06: D4 07        	pei	<R1+2
  9241 06:AF08: D4 05        	pei	<R1
  9242 06:AF0A: A9 08 00     	lda	#$8
  9243                        	xref	~~~lasr
  9244 06:AF0D: 22 xx xx xx  	jsl	~~~lasr
  9245 06:AF11: 85 01        	sta	<R0
  9246 06:AF13: 86 03        	stx	<R0+2
  9247 06:AF15: A5 01        	lda	<R0
  9248 06:AF17: 29 FF 00     	and	#$ff
  9249 06:AF1A: 8D xx xx     	sta	|~~reg_cmd_info+9
  9250                        ;   reg_cmd_info.dh = (unsigned char) ( dev ? CB_D
                    H_DEV1 : CB_DH_DEV0 );
  9251                        	.line	2284
  9252 06:AF1D: A5 17        	lda	<L360+dev_0
  9253 06:AF1F: 29 FF 00     	and	#$ff
  9254 06:AF22: D0 03        	bne	L370
  9255 06:AF24: 82 05 00     	brl	L369
  9256                        L370:
  9257 06:AF27: A9 10 00     	lda	#$10
  9258 06:AF2A: 80 03        	bra	L371
  9259                        L369:
  9260 06:AF2C: A9 00 00     	lda	#$0
  9261                        L371:
  9262 06:AF2F: 85 01        	sta	<R0
  9263 06:AF31: E2 20        	sep	#$20
  9264                        	longa	off
  9265 06:AF33: A5 01        	lda	<R0
  9266 06:AF35: 8D xx xx     	sta	|~~reg_cmd_info+11
  9267 06:AF38: C2 20        	rep	#$20
  9268                        	longa	on
  9269                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  9270                        	.line	2285
  9271 06:AF3A: AD xx xx     	lda	|~~int_use_intr_flag
  9272 06:AF3D: 29 FF 00     	and	#$ff
  9273 06:AF40: D0 03        	bne	L373
  9274 06:AF42: 82 05 00     	brl	L372
  9275                        L373:
  9276 06:AF45: A9 00 00     	lda	#$0
  9277 06:AF48: 80 03        	bra	L374
  9278                        L372:
  9279 06:AF4A: A9 02 00     	lda	#$2
  9280                        L374:
  9281 06:AF4D: 85 01        	sta	<R0
  9282 06:AF4F: E2 20        	sep	#$20
  9283                        	longa	off
  9284 06:AF51: A5 01        	lda	<R0
  9285 06:AF53: 8D xx xx     	sta	|~~reg_cmd_info+12
  9286 06:AF56: C2 20        	rep	#$20
  9287                        	longa	on
  9288                        ;
  9289                        ;   // Set command time out.
  9290                        ;
  9291                        ;   tmr_set_timeout();
  9292                        	.line	2289
  Sat Jul 10 2021  1:15                                                Page 176


  9293 06:AF58: 22 00 BD 06  	jsl	~~tmr_set_timeout
  9294                        ;
  9295                        ;   // Select the drive - call the sub_select func
                    tion.
  9296                        ;   // Quit now if this fails.
  9297                        ;
  9298                        ;   if ( sub_select( dev ) )
  9299                        	.line	2294
  9300                        ;   {
  9301 06:AF5C: D4 17        	pei	<L360+dev_0
  9302 06:AF5E: 22 AF B4 06  	jsl	~~sub_select
  9303 06:AF62: AA           	tax
  9304 06:AF63: D0 03        	bne	L375
  9305 06:AF65: 82 15 00     	brl	L10141
  9306                        L375:
  9307                        	.line	2295
  9308                        ;      return 1;
  9309                        	.line	2296
  9310 06:AF68: A9 01 00     	lda	#$1
  9311                        L376:
  9312 06:AF6B: A8           	tay
  9313 06:AF6C: A5 15        	lda	<L360+2
  9314 06:AF6E: 85 27        	sta	<L360+2+18
  9315 06:AF70: A5 14        	lda	<L360+1
  9316 06:AF72: 85 26        	sta	<L360+1+18
  9317 06:AF74: 2B           	pld
  9318 06:AF75: 3B           	tsc
  9319 06:AF76: 18           	clc
  9320 06:AF77: 69 25 00     	adc	#L360+18
  9321 06:AF7A: 1B           	tcs
  9322 06:AF7B: 98           	tya
  9323 06:AF7C: 6B           	rtl
  9324                        ;   }
  9325                        	.line	2297
  9326                        ;
  9327                        ;   // Set up all the registers except the command
                     register.
  9328                        ;
  9329                        ;   sub_setup_command();
  9330                        L10141:
  9331                        	.line	2301
  9332 06:AF7D: 22 69 B2 06  	jsl	~~sub_setup_command
  9333                        ;
  9334                        ;   // Start the command by setting the Command re
                    gister.  The drive
  9335                        ;   // should immediately set BUSY status.
  9336                        ;
  9337                        ;   pio_outbyte( CB_CMD, CMD_PACKET );
  9338                        	.line	2306
  9339 06:AF81: F4 A0 00     	pea	#<$a0
  9340 06:AF84: F4 07 00     	pea	#<$7
  9341 06:AF87: 22 F0 B7 06  	jsl	~~pio_outbyte
  9342                        ;
  9343                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  9344                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  9345                        ;   // really fast systems.  If we don't do this, 
  Sat Jul 10 2021  1:15                                                Page 177


                    a slow drive on a fast
  9346                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  9347                        ;   // completed the command when it really had no
                    t even started the
  9348                        ;   // command yet.
  9349                        ;
  9350                        ;   DELAY400NS;
  9351                        	.line	2315
  9352                        	.line	2315
  9353 06:AF8B: F4 08 00     	pea	#<$8
  9354 06:AF8E: 22 B1 B7 06  	jsl	~~pio_inbyte
  9355                        	.line	2315
  9356 06:AF92: F4 08 00     	pea	#<$8
  9357 06:AF95: 22 B1 B7 06  	jsl	~~pio_inbyte
  9358                        	.line	2315
  9359 06:AF99: F4 08 00     	pea	#<$8
  9360 06:AF9C: 22 B1 B7 06  	jsl	~~pio_inbyte
  9361                        	.line	2315
  9362 06:AFA0: F4 08 00     	pea	#<$8
  9363 06:AFA3: 22 B1 B7 06  	jsl	~~pio_inbyte
  9364                        	.line	2315
  9365 06:AFA7: F4 08 00     	pea	#<$8
  9366 06:AFAA: 22 B1 B7 06  	jsl	~~pio_inbyte
  9367                        	.line	2315
  9368                        	.line	2315
  9369                        ;
  9370                        ;   // Command packet transfer...
  9371                        ;   // Poll Alternate Status for BSY=0.
  9372                        ;
  9373                        ;   while ( 1 )
  9374                        	.line	2320
  9375                        L10142:
  9376                        ;   {
  9377                        	.line	2321
  9378                        ;      status = pio_inbyte( CB_ASTAT );       // p
                    oll for not busy
  9379                        	.line	2322
  9380 06:AFAE: F4 08 00     	pea	#<$8
  9381 06:AFB1: 22 B1 B7 06  	jsl	~~pio_inbyte
  9382 06:AFB5: E2 20        	sep	#$20
  9383                        	longa	off
  9384 06:AFB7: 85 0D        	sta	<L361+status_1
  9385 06:AFB9: C2 20        	rep	#$20
  9386                        	longa	on
  9387                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
  9388                        	.line	2323
  9389                        ;         break;
  9390 06:AFBB: E2 20        	sep	#$20
  9391                        	longa	off
  9392 06:AFBD: A5 0D        	lda	<L361+status_1
  9393 06:AFBF: 29 80        	and	#<$80
  9394 06:AFC1: C2 20        	rep	#$20
  9395                        	longa	on
  9396 06:AFC3: D0 03        	bne	L377
  9397 06:AFC5: 82 27 00     	brl	L10143
  9398                        L377:
  9399                        ;      if ( tmr_chk_timeout() )               // t
  Sat Jul 10 2021  1:15                                                Page 178


                    ime out yet ?
  9400                        	.line	2325
  9401                        ;      {
  9402 06:AFC8: 22 28 BD 06  	jsl	~~tmr_chk_timeout
  9403 06:AFCC: AA           	tax
  9404 06:AFCD: D0 03        	bne	L378
  9405 06:AFCF: 82 1A 00     	brl	L10144
  9406                        L378:
  9407                        	.line	2326
  9408                        ;         reg_cmd_info.to = 1;
  9409                        	.line	2327
  9410 06:AFD2: E2 20        	sep	#$20
  9411                        	longa	off
  9412 06:AFD4: A9 01        	lda	#$1
  9413 06:AFD6: 8D xx xx     	sta	|~~reg_cmd_info+32
  9414 06:AFD9: C2 20        	rep	#$20
  9415                        	longa	on
  9416                        ;         reg_cmd_info.ec = 51;
  9417                        	.line	2328
  9418 06:AFDB: E2 20        	sep	#$20
  9419                        	longa	off
  9420 06:AFDD: A9 33        	lda	#$33
  9421 06:AFDF: 8D xx xx     	sta	|~~reg_cmd_info+31
  9422 06:AFE2: C2 20        	rep	#$20
  9423                        	longa	on
  9424                        ;         dir = -1;   // command done
  9425                        	.line	2329
  9426 06:AFE4: A9 FF FF     	lda	#$ffff
  9427 06:AFE7: 85 1F        	sta	<L360+dir_0
  9428                        ;         break;
  9429                        	.line	2330
  9430 06:AFE9: 82 03 00     	brl	L10143
  9431                        ;      }
  9432                        	.line	2331
  9433                        ;   }
  9434                        L10144:
  9435                        	.line	2332
  9436 06:AFEC: 82 BF FF     	brl	L10142
  9437                        L10143:
  9438                        ;
  9439                        ;   // Command packet transfer...
  9440                        ;   // Check for protocol failures... no interrupt
                     here please!
  9441                        ;
  9442                        ;   // Command packet transfer...
  9443                        ;   // If no error, transfer the command packet.
  9444                        ;
  9445                        ;   if ( reg_cmd_info.ec == 0 )
  9446                        	.line	2340
  9447                        ;   {
  9448 06:AFEF: AD xx xx     	lda	|~~reg_cmd_info+31
  9449 06:AFF2: 29 FF 00     	and	#$ff
  9450 06:AFF5: F0 03        	beq	L379
  9451 06:AFF7: 82 6C 00     	brl	L10145
  9452                        L379:
  9453                        	.line	2341
  9454                        ;
  9455                        ;      // Command packet transfer...
  Sat Jul 10 2021  1:15                                                Page 179


  9456                        ;      // Read the primary status register and the
                     other ATAPI registers.
  9457                        ;
  9458                        ;      status = pio_inbyte( CB_STAT );
  9459                        	.line	2346
  9460 06:AFFA: F4 07 00     	pea	#<$7
  9461 06:AFFD: 22 B1 B7 06  	jsl	~~pio_inbyte
  9462 06:B001: E2 20        	sep	#$20
  9463                        	longa	off
  9464 06:B003: 85 0D        	sta	<L361+status_1
  9465 06:B005: C2 20        	rep	#$20
  9466                        	longa	on
  9467                        ;
  9468                        ;      // Command packet transfer...
  9469                        ;      // check status: must have BSY=0, DRQ=1 now
  9470                        ;
  9471                        ;      if (    ( status & ( CB_STAT_BSY | CB_STAT_
                    DRQ | CB_STAT_ERR ) )
  9472                        	.line	2351
  9473                        ;           != CB_STAT_DRQ
  9474                        ;         )
  9475                        ;      {
  9476 06:B007: A5 0D        	lda	<L361+status_1
  9477 06:B009: 29 89 00     	and	#<$89
  9478 06:B00C: 85 01        	sta	<R0
  9479 06:B00E: A5 01        	lda	<R0
  9480 06:B010: C9 08 00     	cmp	#<$8
  9481 06:B013: D0 03        	bne	L380
  9482 06:B015: 82 11 00     	brl	L10146
  9483                        L380:
  9484                        	.line	2354
  9485                        ;         reg_cmd_info.ec = 52;
  9486                        	.line	2355
  9487 06:B018: E2 20        	sep	#$20
  9488                        	longa	off
  9489 06:B01A: A9 34        	lda	#$34
  9490 06:B01C: 8D xx xx     	sta	|~~reg_cmd_info+31
  9491 06:B01F: C2 20        	rep	#$20
  9492                        	longa	on
  9493                        ;         dir = -1;   // command done
  9494                        	.line	2356
  9495 06:B021: A9 FF FF     	lda	#$ffff
  9496 06:B024: 85 1F        	sta	<L360+dir_0
  9497                        ;      }
  9498                        	.line	2357
  9499                        ;      else
  9500 06:B026: 82 3D 00     	brl	L10147
  9501                        L10146:
  9502                        ;      {
  9503                        	.line	2359
  9504                        ;         // Command packet transfer...
  9505                        ;         // xfer the command packet (the cdb)
  9506                        ;
  9507                        ;         pio_drq_block_out( CB_DATA, cdbBufAddr, 
                    cpbc >> 1 );
  9508                        	.line	2363
  9509 06:B029: A5 19        	lda	<L360+cpbc_0
  9510 06:B02B: 4A           	lsr	A
  Sat Jul 10 2021  1:15                                                Page 180


  9511 06:B02C: 85 01        	sta	<R0
  9512 06:B02E: A5 01        	lda	<R0
  9513 06:B030: 85 01        	sta	<R0
  9514 06:B032: 64 03        	stz	<R0+2
  9515 06:B034: D4 03        	pei	<R0+2
  9516 06:B036: D4 01        	pei	<R0
  9517 06:B038: D4 1D        	pei	<L360+cdbBufAddr_0+2
  9518 06:B03A: D4 1B        	pei	<L360+cdbBufAddr_0
  9519 06:B03C: F4 00 00     	pea	#<$0
  9520 06:B03F: 22 1B BA 06  	jsl	~~pio_drq_block_out
  9521                        ;
  9522                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  9523                        	.line	2365
  9524                        	.line	2365
  9525 06:B043: F4 08 00     	pea	#<$8
  9526 06:B046: 22 B1 B7 06  	jsl	~~pio_inbyte
  9527                        	.line	2365
  9528 06:B04A: F4 08 00     	pea	#<$8
  9529 06:B04D: 22 B1 B7 06  	jsl	~~pio_inbyte
  9530                        	.line	2365
  9531 06:B051: F4 08 00     	pea	#<$8
  9532 06:B054: 22 B1 B7 06  	jsl	~~pio_inbyte
  9533                        	.line	2365
  9534 06:B058: F4 08 00     	pea	#<$8
  9535 06:B05B: 22 B1 B7 06  	jsl	~~pio_inbyte
  9536                        	.line	2365
  9537 06:B05F: F4 08 00     	pea	#<$8
  9538 06:B062: 22 B1 B7 06  	jsl	~~pio_inbyte
  9539                        	.line	2365
  9540                        	.line	2365
  9541                        ;      }
  9542                        	.line	2366
  9543                        L10147:
  9544                        ;   }
  9545                        	.line	2367
  9546                        ;
  9547                        ;   // Data transfer loop...
  9548                        ;   // If there is no error, enter the data transf
                    er loop.
  9549                        ;
  9550                        ;   while ( reg_cmd_info.ec == 0 )
  9551                        L10145:
  9552                        	.line	2372
  9553                        L10148:
  9554 06:B066: AD xx xx     	lda	|~~reg_cmd_info+31
  9555 06:B069: 29 FF 00     	and	#$ff
  9556 06:B06C: F0 03        	beq	L381
  9557 06:B06E: 82 68 01     	brl	L10149
  9558                        L381:
  9559                        ;   {
  9560                        	.line	2373
  9561                        ;      // Data transfer loop...
  9562                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  9563                        ;
  9564                        ;      sub_wait_poll( 53, 54 );
  9565                        	.line	2377
  Sat Jul 10 2021  1:15                                                Page 181


  9566 06:B071: F4 36 00     	pea	#<$36
  9567 06:B074: F4 35 00     	pea	#<$35
  9568 06:B077: 22 3F B6 06  	jsl	~~sub_wait_poll
  9569                        ;
  9570                        ;      // Data transfer loop...
  9571                        ;      // If there was a time out error, exit the 
                    data transfer loop.
  9572                        ;
  9573                        ;      if ( reg_cmd_info.ec )
  9574                        	.line	2382
  9575                        ;      {
  9576 06:B07B: AD xx xx     	lda	|~~reg_cmd_info+31
  9577 06:B07E: 29 FF 00     	and	#$ff
  9578 06:B081: D0 03        	bne	L382
  9579 06:B083: 82 08 00     	brl	L10150
  9580                        L382:
  9581                        	.line	2383
  9582                        ;         dir = -1;   // command done
  9583                        	.line	2384
  9584 06:B086: A9 FF FF     	lda	#$ffff
  9585 06:B089: 85 1F        	sta	<L360+dir_0
  9586                        ;         break;
  9587                        	.line	2385
  9588 06:B08B: 82 4B 01     	brl	L10149
  9589                        ;      }
  9590                        	.line	2386
  9591                        ;
  9592                        ;      // Data transfer loop...
  9593                        ;      // If using interrupts get the status read 
                    by the interrupt
  9594                        ;      // handler, otherwise read the status regis
                    ter.
  9595                        ;
  9596                        ;      if ( int_use_intr_flag )
  9597                        L10150:
  9598                        	.line	2392
  9599                        ;         status = int_ata_status;
  9600 06:B08E: AD xx xx     	lda	|~~int_use_intr_flag
  9601 06:B091: 29 FF 00     	and	#$ff
  9602 06:B094: D0 03        	bne	L383
  9603 06:B096: 82 0C 00     	brl	L10151
  9604                        L383:
  9605                        	.line	2393
  9606 06:B099: E2 20        	sep	#$20
  9607                        	longa	off
  9608 06:B09B: AD xx xx     	lda	|~~int_ata_status
  9609 06:B09E: 85 0D        	sta	<L361+status_1
  9610 06:B0A0: C2 20        	rep	#$20
  9611                        	longa	on
  9612                        ;      else
  9613 06:B0A2: 82 0D 00     	brl	L10152
  9614                        L10151:
  9615                        ;         status = pio_inbyte( CB_STAT );
  9616                        	.line	2395
  9617 06:B0A5: F4 07 00     	pea	#<$7
  9618 06:B0A8: 22 B1 B7 06  	jsl	~~pio_inbyte
  9619 06:B0AC: E2 20        	sep	#$20
  9620                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 182


  9621 06:B0AE: 85 0D        	sta	<L361+status_1
  9622 06:B0B0: C2 20        	rep	#$20
  9623                        	longa	on
  9624                        L10152:
  9625                        ;
  9626                        ;      // Data transfer loop...
  9627                        ;      // Exit the read data loop if the device in
                    dicates this
  9628                        ;      // is the end of the command.
  9629                        ;
  9630                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
  9631                        	.line	2401
  9632                        ;      {
  9633 06:B0B2: E2 20        	sep	#$20
  9634                        	longa	off
  9635 06:B0B4: A5 0D        	lda	<L361+status_1
  9636 06:B0B6: 29 88        	and	#<$88
  9637 06:B0B8: C2 20        	rep	#$20
  9638                        	longa	on
  9639 06:B0BA: F0 03        	beq	L384
  9640 06:B0BC: 82 08 00     	brl	L10153
  9641                        L384:
  9642                        	.line	2402
  9643                        ;         dir = -1;   // command done
  9644                        	.line	2403
  9645 06:B0BF: A9 FF FF     	lda	#$ffff
  9646 06:B0C2: 85 1F        	sta	<L360+dir_0
  9647                        ;         break;
  9648                        	.line	2404
  9649 06:B0C4: 82 12 01     	brl	L10149
  9650                        ;      }
  9651                        	.line	2405
  9652                        ;
  9653                        ;      // Data transfer loop...
  9654                        ;      // The device must want to transfer data...
  9655                        ;      // check status: must have BSY=0, DRQ=1 now
                    .
  9656                        ;
  9657                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) != CB_STAT_DRQ )
  9658                        L10153:
  9659                        	.line	2411
  9660                        ;      {
  9661 06:B0C7: A5 0D        	lda	<L361+status_1
  9662 06:B0C9: 29 88 00     	and	#<$88
  9663 06:B0CC: 85 01        	sta	<R0
  9664 06:B0CE: A5 01        	lda	<R0
  9665 06:B0D0: C9 08 00     	cmp	#<$8
  9666 06:B0D3: D0 03        	bne	L385
  9667 06:B0D5: 82 11 00     	brl	L10154
  9668                        L385:
  9669                        	.line	2412
  9670                        ;         reg_cmd_info.ec = 55;
  9671                        	.line	2413
  9672 06:B0D8: E2 20        	sep	#$20
  9673                        	longa	off
  9674 06:B0DA: A9 37        	lda	#$37
  Sat Jul 10 2021  1:15                                                Page 183


  9675 06:B0DC: 8D xx xx     	sta	|~~reg_cmd_info+31
  9676 06:B0DF: C2 20        	rep	#$20
  9677                        	longa	on
  9678                        ;         dir = -1;   // command done
  9679                        	.line	2414
  9680 06:B0E1: A9 FF FF     	lda	#$ffff
  9681 06:B0E4: 85 1F        	sta	<L360+dir_0
  9682                        ;         break;
  9683                        	.line	2415
  9684 06:B0E6: 82 F0 00     	brl	L10149
  9685                        ;      }
  9686                        	.line	2416
  9687                        ;
  9688                        ;      // Data transfer loop...
  9689                        ;      // get the byte count, check for zero...
  9690                        ;
  9691                        ;      byteCnt = ( pio_inbyte( CB_CH ) << 8 ) | pi
                    o_inbyte( CB_CL );
  9692                        L10154:
  9693                        	.line	2421
  9694 06:B0E9: F4 05 00     	pea	#<$5
  9695 06:B0EC: 22 B1 B7 06  	jsl	~~pio_inbyte
  9696 06:B0F0: E2 20        	sep	#$20
  9697                        	longa	off
  9698 06:B0F2: 85 05        	sta	<R1
  9699 06:B0F4: C2 20        	rep	#$20
  9700                        	longa	on
  9701 06:B0F6: A5 05        	lda	<R1
  9702 06:B0F8: 29 FF 00     	and	#$ff
  9703 06:B0FB: 85 05        	sta	<R1
  9704 06:B0FD: A5 05        	lda	<R1
  9705 06:B0FF: EB           	xba
  9706 06:B100: 29 00 FF     	and	#$ff00
  9707 06:B103: 85 01        	sta	<R0
  9708 06:B105: F4 04 00     	pea	#<$4
  9709 06:B108: 22 B1 B7 06  	jsl	~~pio_inbyte
  9710 06:B10C: E2 20        	sep	#$20
  9711                        	longa	off
  9712 06:B10E: 85 05        	sta	<R1
  9713 06:B110: C2 20        	rep	#$20
  9714                        	longa	on
  9715 06:B112: A5 05        	lda	<R1
  9716 06:B114: 29 FF 00     	and	#$ff
  9717 06:B117: 85 05        	sta	<R1
  9718 06:B119: A5 05        	lda	<R1
  9719 06:B11B: 05 01        	ora	<R0
  9720 06:B11D: 85 0E        	sta	<L361+byteCnt_1
  9721                        ;      if ( byteCnt < 1 )
  9722                        	.line	2422
  9723                        ;      {
  9724 06:B11F: A5 0E        	lda	<L361+byteCnt_1
  9725 06:B121: C9 01 00     	cmp	#<$1
  9726 06:B124: 90 03        	bcc	L386
  9727 06:B126: 82 11 00     	brl	L10155
  9728                        L386:
  9729                        	.line	2423
  9730                        ;         reg_cmd_info.ec = 59;
  9731                        	.line	2424
  Sat Jul 10 2021  1:15                                                Page 184


  9732 06:B129: E2 20        	sep	#$20
  9733                        	longa	off
  9734 06:B12B: A9 3B        	lda	#$3b
  9735 06:B12D: 8D xx xx     	sta	|~~reg_cmd_info+31
  9736 06:B130: C2 20        	rep	#$20
  9737                        	longa	on
  9738                        ;         dir = -1;   // command done
  9739                        	.line	2425
  9740 06:B132: A9 FF FF     	lda	#$ffff
  9741 06:B135: 85 1F        	sta	<L360+dir_0
  9742                        ;         break;
  9743                        	.line	2426
  9744 06:B137: 82 9F 00     	brl	L10149
  9745                        ;      }
  9746                        	.line	2427
  9747                        ;
  9748                        ;      // Data transfer loop...
  9749                        ;      // increment number of DRQ packets
  9750                        ;
  9751                        ;      reg_cmd_info.drqPackets ++ ;
  9752                        L10155:
  9753                        	.line	2432
  9754 06:B13A: EE xx xx     	inc	|~~reg_cmd_info+37
  9755 06:B13D: D0 03        	bne	L387
  9756 06:B13F: EE xx xx     	inc	|~~reg_cmd_info+37+2
  9757                        L387:
  9758                        ;
  9759                        ;      // Data transfer loop...
  9760                        ;      // transfer the data and update the i/o buf
                    fer address
  9761                        ;      // and the number of bytes transfered.
  9762                        ;
  9763                        ;      wordCnt = ( byteCnt >> 1 ) + ( byteCnt & 0x
                    0001 );
  9764                        	.line	2438
  9765 06:B142: A5 0E        	lda	<L361+byteCnt_1
  9766 06:B144: 29 01 00     	and	#<$1
  9767 06:B147: 85 01        	sta	<R0
  9768 06:B149: A5 0E        	lda	<L361+byteCnt_1
  9769 06:B14B: 4A           	lsr	A
  9770 06:B14C: 85 05        	sta	<R1
  9771 06:B14E: 18           	clc
  9772 06:B14F: A5 05        	lda	<R1
  9773 06:B151: 65 01        	adc	<R0
  9774 06:B153: 85 09        	sta	<R2
  9775 06:B155: A5 09        	lda	<R2
  9776 06:B157: 85 10        	sta	<L361+wordCnt_1
  9777 06:B159: 64 12        	stz	<L361+wordCnt_1+2
  9778                        ;      reg_cmd_info.totalBytesXfer += ( wordCnt <<
                     1 );
  9779                        	.line	2439
  9780 06:B15B: A5 10        	lda	<L361+wordCnt_1
  9781 06:B15D: 85 01        	sta	<R0
  9782 06:B15F: A5 12        	lda	<L361+wordCnt_1+2
  9783 06:B161: 85 03        	sta	<R0+2
  9784 06:B163: 06 01        	asl	<R0
  9785 06:B165: 26 03        	rol	<R0+2
  9786 06:B167: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 185


  9787 06:B168: A5 01        	lda	<R0
  9788 06:B16A: 6D xx xx     	adc	|~~reg_cmd_info+33
  9789 06:B16D: 8D xx xx     	sta	|~~reg_cmd_info+33
  9790 06:B170: A5 03        	lda	<R0+2
  9791 06:B172: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  9792 06:B175: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  9793                        ;      if ( dir )
  9794                        	.line	2440
  9795                        ;         pio_drq_block_out( CB_DATA, dataBufAddr,
                     wordCnt );
  9796 06:B178: A5 1F        	lda	<L360+dir_0
  9797 06:B17A: D0 03        	bne	L388
  9798 06:B17C: 82 12 00     	brl	L10156
  9799                        L388:
  9800                        	.line	2441
  9801 06:B17F: D4 12        	pei	<L361+wordCnt_1+2
  9802 06:B181: D4 10        	pei	<L361+wordCnt_1
  9803 06:B183: D4 27        	pei	<L360+dataBufAddr_0+2
  9804 06:B185: D4 25        	pei	<L360+dataBufAddr_0
  9805 06:B187: F4 00 00     	pea	#<$0
  9806 06:B18A: 22 1B BA 06  	jsl	~~pio_drq_block_out
  9807                        ;      else
  9808 06:B18E: 82 0F 00     	brl	L10157
  9809                        L10156:
  9810                        ;         pio_drq_block_in( CB_DATA, dataBufAddr, 
                    wordCnt );
  9811                        	.line	2443
  9812 06:B191: D4 12        	pei	<L361+wordCnt_1+2
  9813 06:B193: D4 10        	pei	<L361+wordCnt_1
  9814 06:B195: D4 27        	pei	<L360+dataBufAddr_0+2
  9815 06:B197: D4 25        	pei	<L360+dataBufAddr_0
  9816 06:B199: F4 00 00     	pea	#<$0
  9817 06:B19C: 22 18 B9 06  	jsl	~~pio_drq_block_in
  9818                        L10157:
  9819                        ;      dataBufAddr = dataBufAddr + byteCnt;
  9820                        	.line	2444
  9821 06:B1A0: A5 0E        	lda	<L361+byteCnt_1
  9822 06:B1A2: 85 01        	sta	<R0
  9823 06:B1A4: 64 03        	stz	<R0+2
  9824 06:B1A6: 18           	clc
  9825 06:B1A7: A5 25        	lda	<L360+dataBufAddr_0
  9826 06:B1A9: 65 01        	adc	<R0
  9827 06:B1AB: 85 25        	sta	<L360+dataBufAddr_0
  9828 06:B1AD: A5 27        	lda	<L360+dataBufAddr_0+2
  9829 06:B1AF: 65 03        	adc	<R0+2
  9830 06:B1B1: 85 27        	sta	<L360+dataBufAddr_0+2
  9831                        ;
  9832                        ;      DELAY400NS;    // delay so device can get t
                    he status updated
  9833                        	.line	2446
  9834                        	.line	2446
  9835 06:B1B3: F4 08 00     	pea	#<$8
  9836 06:B1B6: 22 B1 B7 06  	jsl	~~pio_inbyte
  9837                        	.line	2446
  9838 06:B1BA: F4 08 00     	pea	#<$8
  9839 06:B1BD: 22 B1 B7 06  	jsl	~~pio_inbyte
  9840                        	.line	2446
  9841 06:B1C1: F4 08 00     	pea	#<$8
  Sat Jul 10 2021  1:15                                                Page 186


  9842 06:B1C4: 22 B1 B7 06  	jsl	~~pio_inbyte
  9843                        	.line	2446
  9844 06:B1C8: F4 08 00     	pea	#<$8
  9845 06:B1CB: 22 B1 B7 06  	jsl	~~pio_inbyte
  9846                        	.line	2446
  9847 06:B1CF: F4 08 00     	pea	#<$8
  9848 06:B1D2: 22 B1 B7 06  	jsl	~~pio_inbyte
  9849                        	.line	2446
  9850                        	.line	2446
  9851                        ;   }
  9852                        	.line	2447
  9853 06:B1D6: 82 8D FE     	brl	L10148
  9854                        L10149:
  9855                        ;
  9856                        ;   // End of command...
  9857                        ;   // Wait for interrupt or poll for BSY=0,
  9858                        ;   // but don't do this if there was any error or
                     if this
  9859                        ;   // was a commmand that did not transfer data.
  9860                        ;
  9861                        ;   if ( ( reg_cmd_info.ec == 0 ) && ( dir >= 0 ) 
                    )
  9862                        	.line	2454
  9863                        ;   {
  9864 06:B1D9: AD xx xx     	lda	|~~reg_cmd_info+31
  9865 06:B1DC: 29 FF 00     	and	#$ff
  9866 06:B1DF: F0 03        	beq	L389
  9867 06:B1E1: 82 11 00     	brl	L10158
  9868                        L389:
  9869 06:B1E4: A5 1F        	lda	<L360+dir_0
  9870 06:B1E6: 10 03        	bpl	L390
  9871 06:B1E8: 82 0A 00     	brl	L10158
  9872                        L390:
  9873                        	.line	2455
  9874                        ;      sub_wait_poll( 56, 57 );
  9875                        	.line	2456
  9876 06:B1EB: F4 39 00     	pea	#<$39
  9877 06:B1EE: F4 38 00     	pea	#<$38
  9878 06:B1F1: 22 3F B6 06  	jsl	~~sub_wait_poll
  9879                        ;   }
  9880                        	.line	2457
  9881                        ;
  9882                        ;   // Final status check, only if no previous err
                    or.
  9883                        ;
  9884                        ;   if ( reg_cmd_info.ec == 0 )
  9885                        L10158:
  9886                        	.line	2461
  9887                        ;   {
  9888 06:B1F5: AD xx xx     	lda	|~~reg_cmd_info+31
  9889 06:B1F8: 29 FF 00     	and	#$ff
  9890 06:B1FB: F0 03        	beq	L391
  9891 06:B1FD: 82 3A 00     	brl	L10159
  9892                        L391:
  9893                        	.line	2462
  9894                        ;      // Final status check...
  9895                        ;      // If using interrupts get the status read 
                    by the interrupt
  Sat Jul 10 2021  1:15                                                Page 187


  9896                        ;      // handler, otherwise read the status regis
                    ter.
  9897                        ;
  9898                        ;      if ( int_use_intr_flag )
  9899                        	.line	2467
  9900                        ;         status = int_ata_status;
  9901 06:B200: AD xx xx     	lda	|~~int_use_intr_flag
  9902 06:B203: 29 FF 00     	and	#$ff
  9903 06:B206: D0 03        	bne	L392
  9904 06:B208: 82 0C 00     	brl	L10160
  9905                        L392:
  9906                        	.line	2468
  9907 06:B20B: E2 20        	sep	#$20
  9908                        	longa	off
  9909 06:B20D: AD xx xx     	lda	|~~int_ata_status
  9910 06:B210: 85 0D        	sta	<L361+status_1
  9911 06:B212: C2 20        	rep	#$20
  9912                        	longa	on
  9913                        ;      else
  9914 06:B214: 82 0D 00     	brl	L10161
  9915                        L10160:
  9916                        ;         status = pio_inbyte( CB_STAT );
  9917                        	.line	2470
  9918 06:B217: F4 07 00     	pea	#<$7
  9919 06:B21A: 22 B1 B7 06  	jsl	~~pio_inbyte
  9920 06:B21E: E2 20        	sep	#$20
  9921                        	longa	off
  9922 06:B220: 85 0D        	sta	<L361+status_1
  9923 06:B222: C2 20        	rep	#$20
  9924                        	longa	on
  9925                        L10161:
  9926                        ;
  9927                        ;      // Final status check...
  9928                        ;      // check for any error.
  9929                        ;
  9930                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DRQ |
                     CB_STAT_ERR ) )
  9931                        	.line	2475
  9932                        ;      {
  9933 06:B224: E2 20        	sep	#$20
  9934                        	longa	off
  9935 06:B226: A5 0D        	lda	<L361+status_1
  9936 06:B228: 29 89        	and	#<$89
  9937 06:B22A: C2 20        	rep	#$20
  9938                        	longa	on
  9939 06:B22C: D0 03        	bne	L393
  9940 06:B22E: 82 09 00     	brl	L10162
  9941                        L393:
  9942                        	.line	2476
  9943                        ;         reg_cmd_info.ec = 58;
  9944                        	.line	2477
  9945 06:B231: E2 20        	sep	#$20
  9946                        	longa	off
  9947 06:B233: A9 3A        	lda	#$3a
  9948 06:B235: 8D xx xx     	sta	|~~reg_cmd_info+31
  9949 06:B238: C2 20        	rep	#$20
  9950                        	longa	on
  9951                        ;      }
  Sat Jul 10 2021  1:15                                                Page 188


  9952                        	.line	2478
  9953                        ;   }
  9954                        L10162:
  9955                        	.line	2479
  9956                        ;
  9957                        ;   // Done...
  9958                        ;
  9959                        ;   // Final status check
  9960                        ;   // BMIDE Error=1?
  9961                        ;
  9962                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  9963                        L10159:
  9964                        	.line	2486
  9965                        ;   {
  9966 06:B23A: 22 01 B7 06  	jsl	~~pio_readBusMstrStatus
  9967 06:B23E: E2 20        	sep	#$20
  9968                        	longa	off
  9969 06:B240: 29 02        	and	#<$2
  9970 06:B242: C2 20        	rep	#$20
  9971                        	longa	on
  9972 06:B244: D0 03        	bne	L394
  9973 06:B246: 82 09 00     	brl	L10163
  9974                        L394:
  9975                        	.line	2487
  9976                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  9977                        	.line	2488
  9978 06:B249: E2 20        	sep	#$20
  9979                        	longa	off
  9980 06:B24B: A9 4E        	lda	#$4e
  9981 06:B24D: 8D xx xx     	sta	|~~reg_cmd_info+31
  9982 06:B250: C2 20        	rep	#$20
  9983                        	longa	on
  9984                        ;   }
  9985                        	.line	2489
  9986                        ;
  9987                        ;   // All done.  The return values of this functi
                    on are described in
  9988                        ;   // MINDRVR.H.
  9989                        ;
  9990                        ;   if ( reg_cmd_info.ec )
  9991                        L10163:
  9992                        	.line	2494
  9993                        ;      return 1;
  9994 06:B252: AD xx xx     	lda	|~~reg_cmd_info+31
  9995 06:B255: 29 FF 00     	and	#$ff
  9996 06:B258: D0 03        	bne	L395
  9997 06:B25A: 82 06 00     	brl	L10164
  9998                        L395:
  9999                        	.line	2495
 10000 06:B25D: A9 01 00     	lda	#$1
 10001 06:B260: 82 08 FD     	brl	L376
 10002                        ;   return 0;
 10003                        L10164:
 10004                        	.line	2496
 10005 06:B263: A9 00 00     	lda	#$0
 10006 06:B266: 82 02 FD     	brl	L376
  Sat Jul 10 2021  1:15                                                Page 189


 10007                        ;}
 10008                        	.line	2497
 10009                        	.endblock	2497
 10010             00000013   L360	equ	19
 10011             0000000D   L361	equ	13
 10012 06:B269:              	ends
 10013                        	efunc
 10014                        	.endfunc	2497,13,19
 10015                        	.line	2497
 10016                        ;
 10017                        ;#endif   // INCLUDE_ATAPI
 10018                        ;
 10019                        ;#ifdef INCLUDE_ATA_DMA
 10020                        ;
 10021                        ;//***********************************************
                    ************
 10022                        ;//
 10023                        ;// Some notes about PCI bus mastering DMA...
 10024                        ;//
 10025                        ;// !!! The DMA support in MINDRVR is based on x86
                     PCI bus mastering
 10026                        ;// !!! ATA controller design as described by the 
                    T13 document
 10027                        ;// !!! '1510 Host Controller Standard' (in sectio
                    ns 1-6).
 10028                        ;//
 10029                        ;// Note that the T13 1510D document also describe
                    s a
 10030                        ;// complex DMA engine called ADMA.  While ADMA is
                     a good idea it
 10031                        ;// will probably never be popular or widely imple
                    mented.  MINDRVR
 10032                        ;// does not support ADMA.
 10033                        ;//
 10034                        ;// The base address of the Bus Master Control Reg
                    isters (BMIDE) is
 10035                        ;// found in the PCI Configuration space for the A
                    TA controller (at
 10036                        ;// offset 0x20 in the config space data).  This i
                    s normally an I/O
 10037                        ;// address.
 10038                        ;//
 10039                        ;// The BMIDE data is 16 bytes of data starting at
                     the BMIDE base
 10040                        ;// address.  The first 8 bytes is for the primary
                     ATA channel and
 10041                        ;// the second 8 bytes is for the secondary ATA ch
                    annel.  The 8 bytes
 10042                        ;// contain a "command" byte and a "status" byte a
                    nd a 4 byte
 10043                        ;// (32-bit) physical memory address pointing to t
                    he Physical Region
 10044                        ;// Descriptor (PRD) list.  Each PRD entry describ
                    es an area of
 10045                        ;// memory or data buffer for the DMA transfer.  A
                     region described
 10046                        ;// by a PRD may not cross a 64K byte boundary in 
                    physical memory.
  Sat Jul 10 2021  1:15                                                Page 190


 10047                        ;// Also, the PRD list must not cross a 64K byte b
                    oundary.
 10048                        ;//
 10049                        ;//***********************************************
                    ************
 10050                        ;
 10051                        ;//***********************************************
                    ************
 10052                        ;//
 10053                        ;// pci bus master registers and PRD list buffer,
 10054                        ;// see the dma_pci_config() and set_up_xfer() fun
                    ctions.
 10055                        ;//
 10056                        ;// !!! Note that the PRD buffer is statically all
                    ocated here
 10057                        ;// !!! but the actual address of the buffer is ad
                    justed by
 10058                        ;// !!! the dma_pci_config() function.
 10059                        ;//
 10060                        ;//***********************************************
                    ************
 10061                        ;
 10062                        ;static unsigned long * dma_pci_prd_ptr;   // curr
                    ent PRD buffer address
 10063                        ;static int dma_pci_num_prd;               // curr
                    ent number of PRD entries
 10064                        ;
 10065                        ;static unsigned char statReg;             // save
                     BM status reg bits
 10066                        ;static unsigned char rwControl;           // read
                    /write control bit setting
 10067                        ;
 10068                        ;#define MAX_TRANSFER_SIZE  262144L        // max 
                    transfer size (in bytes,
 10069                        ;                                          // shou
                    ld be multiple of 65536)
 10070                        ;
 10071                        ;#define MAX_SEG ((MAX_TRANSFER_SIZE/65536L)+2L) /
                    / number physical segments
 10072                        ;#define MAX_PRD (MAX_SEG*4L)                    /
                    / number of PRDs required
 10073                        ;
 10074                        ;#define PRD_BUF_SIZE (48+(2*MAX_PRD*8))         /
                    / size of PRD list buffer
 10075                        ;
 10076                        ;static unsigned char prdBuf[PRD_BUF_SIZE];      /
                    / PRD buffer
 10077                        ;static unsigned long * prdBufPtr;               /
                    / first PRD addr
 10078                        ;
 10079                        ;//***********************************************
                    ************
 10080                        ;//
 10081                        ;// dma_pci_config() - configure/setup for Read/Wr
                    ite DMA
 10082                        ;//
 10083                        ;// The caller must call this function before atte
                    mpting
  Sat Jul 10 2021  1:15                                                Page 191


 10084                        ;// to use any ATA or ATAPI commands in PCI DMA mo
                    de.
 10085                        ;//
 10086                        ;// !!! MINDRVR assumes the entire DMA data transf
                    er is contained
 10087                        ;// !!! within a single contiguous I/O buffer. You
                     may not need
 10088                        ;// !!! the dma_pci_config() function depending on
                     how your system
 10089                        ;// !!! allocates the PRD buffer.
 10090                        ;//
 10091                        ;// !!! This function shows an example of PRD buff
                    er allocation.
 10092                        ;// !!! The PRD buffer must be aligned
 10093                        ;// !!! on a 8 byte boundary and must not cross a 
                    64K byte
 10094                        ;// !!! boundary in memory.
 10095                        ;//
 10096                        ;//***********************************************
                    ************
 10097                        ;
 10098                        ;int dma_pci_config( void )
 10099                        ;
 10100                        ;{
 10101                        ;   unsigned long lw;
 10102                        ;
 10103                        ;   // Set up the PRD entry list buffer address - 
                    the PRD entry list
 10104                        ;   // may not span a 64KB boundary in physical me
                    mory. Space is
 10105                        ;   // allocated (above) for this buffer such that
                     it will be
 10106                        ;   // aligned on a seqment boundary
 10107                        ;   // and such that the PRD list will not span a 
                    64KB boundary...
 10108                        ;   lw = (unsigned long) prdBuf;
 10109                        ;   // ...move up to an 8 byte boundary.
 10110                        ;   lw = lw + 15;
 10111                        ;   lw = lw & 0xfffffff8L;
 10112                        ;   // ...check for 64KB boundary in the first par
                    t of the PRD buffer,
 10113                        ;   // ...if so just move the buffer to that bound
                    ary.
 10114                        ;   if ( ( lw & 0xffff0000L )
 10115                        ;        !=
 10116                        ;        ( ( lw + ( MAX_PRD * 8L ) - 1L ) & 0xffff
                    0000L )
 10117                        ;      )
 10118                        ;      lw = ( lw + ( MAX_PRD * 8L ) ) & 0xffff0000
                    L;
 10119                        ;   // ... return the address of the first PRD
 10120                        ;   dma_pci_prd_ptr = prdBufPtr = (unsigned long *
                    ) lw;
 10121                        ;   // ... return the current number of PRD entrie
                    s
 10122                        ;   dma_pci_num_prd = 0;
 10123                        ;
 10124                        ;   // read the BM status reg and save the upper 3
  Sat Jul 10 2021  1:15                                                Page 192


                     bits.
 10125                        ;   statReg = (unsigned char) ( pio_readBusMstrSta
                    tus() & 0x60 );
 10126                        ;
 10127                        ;   return 0;
 10128                        ;}
 10129                        ;
 10130                        ;//***********************************************
                    ************
 10131                        ;//
 10132                        ;// set_up_xfer() -- set up the PRD entry list
 10133                        ;//
 10134                        ;// !!! MINDRVR assumes the entire DMA data transf
                    er is contained
 10135                        ;// !!! within a single contiguous I/O buffer. You
                     may not need
 10136                        ;// !!! a much more complex set_up_xfer() function
                     to support
 10137                        ;// !!! true scatter/gather lists.
 10138                        ;//
 10139                        ;// The PRD list must be aligned on an 8 byte boun
                    dary and the
 10140                        ;// list must not cross a 64K byte boundary in mem
                    ory.
 10141                        ;//
 10142                        ;//***********************************************
                    ************
 10143                        ;
 10144                        ;static int set_up_xfer( int dir, long bc, unsigne
                    d char * bufAddr );
 10145                        ;
 10146                        ;static int set_up_xfer( int dir, long bc, unsigne
                    d char * bufAddr )
 10147                        ;
 10148                        ;{
 10149                        ;   int numPrd;                      // number of 
                    PRD required
 10150                        ;   int maxPrd;                      // max number
                     of PRD allowed
 10151                        ;   unsigned long temp;
 10152                        ;   unsigned long phyAddr;           // physical m
                    emory address
 10153                        ;   unsigned long * prdPtr;      // pointer to PRD
                     entry list
 10154                        ;
 10155                        ;   // disable/stop the dma channel, clear interru
                    pt and error bits
 10156                        ;   pio_writeBusMstrCmd( BM_CR_MASK_STOP );
 10157                        ;   pio_writeBusMstrStatus( (unsigned char) ( stat
                    Reg | BM_SR_MASK_INT | BM_SR_MASK_ERR ) );
 10158                        ;
 10159                        ;   // setup to build the PRD list...
 10160                        ;   // ...max PRDs allowed
 10161                        ;   maxPrd = (int) MAX_PRD;
 10162                        ;   // ...PRD buffer address
 10163                        ;   prdPtr = prdBufPtr;
 10164                        ;   dma_pci_prd_ptr = prdPtr;
 10165                        ;   // ... convert I/O buffer address to an physic
  Sat Jul 10 2021  1:15                                                Page 193


                    al memory address
 10166                        ;   phyAddr = (unsigned long) bufAddr;
 10167                        ;
 10168                        ;   // build the PRD list...
 10169                        ;   // ...PRD entry format:
 10170                        ;   // +0 to +3 = memory address
 10171                        ;   // +4 to +5 = 0x0000 (not EOT) or 0x8000 (EOT)
 10172                        ;   // +6 to +7 = byte count
 10173                        ;   // ...zero number of PRDs
 10174                        ;   numPrd = 0;
 10175                        ;   // ...loop to build each PRD
 10176                        ;   while ( bc > 0 )
 10177                        ;   {
 10178                        ;      if ( numPrd >= maxPrd )
 10179                        ;         return 1;
 10180                        ;      // set this PRD's address
 10181                        ;      prdPtr[0] = phyAddr;
 10182                        ;      // set count for this PRD
 10183                        ;      temp = 65536L;          // max PRD length
 10184                        ;      if ( temp > bc )        // count to large?
 10185                        ;         temp = bc;           //    yes - use act
                    ual count
 10186                        ;      // check if count will fit
 10187                        ;      phyAddr = phyAddr + temp;
 10188                        ;      if ( ( phyAddr & 0xffff0000L ) != ( prdPtr[
                    0] & 0xffff0000L ) )
 10189                        ;      {
 10190                        ;         phyAddr = phyAddr & 0xffff0000L;
 10191                        ;         temp = phyAddr - prdPtr[0];
 10192                        ;      }
 10193                        ;      // set this PRD's count
 10194                        ;      prdPtr[1] = temp & 0x0000ffffL;
 10195                        ;      // update byte count
 10196                        ;      bc = bc - temp;
 10197                        ;      // set the end bit in the prd list
 10198                        ;      if ( bc < 1 )
 10199                        ;         prdPtr[1] = prdPtr[1] | 0x80000000L;
 10200                        ;      prdPtr ++ ;
 10201                        ;      prdPtr ++ ;
 10202                        ;      numPrd ++ ;
 10203                        ;   }
 10204                        ;
 10205                        ;   // return the current PRD list size and
 10206                        ;   // write into BMIDE PRD address registers.
 10207                        ;
 10208                        ;   dma_pci_num_prd = numPrd;
 10209                        ;   * (unsigned long *) (pio_bmide_base_addr + BM_
                    PRD_ADDR_LOW )
 10210                        ;      = (unsigned long) prdBufPtr;
 10211                        ;
 10212                        ;   // set the read/write control:
 10213                        ;   // PCI reads for ATA Write DMA commands,
 10214                        ;   // PCI writes for ATA Read DMA commands.
 10215                        ;
 10216                        ;   if ( dir )
 10217                        ;      rwControl = BM_CR_MASK_READ;     // ATA Wri
                    te DMA
 10218                        ;   else
  Sat Jul 10 2021  1:15                                                Page 194


 10219                        ;      rwControl = BM_CR_MASK_WRITE;    // ATA Rea
                    d DMA
 10220                        ;   pio_writeBusMstrCmd( rwControl );
 10221                        ;   return 0;
 10222                        ;}
 10223                        ;
 10224                        ;//***********************************************
                    ************
 10225                        ;//
 10226                        ;// exec_pci_ata_cmd() - PCI Bus Master for ATA R/
                    W DMA commands
 10227                        ;//
 10228                        ;//***********************************************
                    ************
 10229                        ;
 10230                        ;static int exec_pci_ata_cmd( unsigned char dev,
 10231                        ;                             unsigned char * bufA
                    ddr,
 10232                        ;                             long numSect );
 10233                        ;
 10234                        ;static int exec_pci_ata_cmd( unsigned char dev,
 10235                        ;                             unsigned char * bufA
                    ddr,
 10236                        ;                             long numSect )
 10237                        ;
 10238                        ;{
 10239                        ;   unsigned char status;
 10240                        ;
 10241                        ;   // Quit now if the command is incorrect.
 10242                        ;
 10243                        ;   if (    ( reg_cmd_info.cmd != CMD_READ_DMA )
 10244                        ;        && ( reg_cmd_info.cmd != CMD_READ_DMA_EXT
                     )
 10245                        ;        && ( reg_cmd_info.cmd != CMD_WRITE_DMA )
 10246                        ;        && ( reg_cmd_info.cmd != CMD_WRITE_DMA_EX
                    T ) )
 10247                        ;   {
 10248                        ;      reg_cmd_info.ec = 77;
 10249                        ;      return 1;
 10250                        ;   }
 10251                        ;
 10252                        ;   // Set up the dma transfer
 10253                        ;
 10254                        ;   if ( set_up_xfer( ( reg_cmd_info.cmd == CMD_WR
                    ITE_DMA )
 10255                        ;                     ||
 10256                        ;                     ( reg_cmd_info.cmd == CMD_WR
                    ITE_DMA_EXT ),
 10257                        ;                     numSect * 512L, bufAddr ) )
 10258                        ;   {
 10259                        ;      reg_cmd_info.ec = 61;
 10260                        ;      return 1;
 10261                        ;   }
 10262                        ;
 10263                        ;   // Set command time out.
 10264                        ;
 10265                        ;   tmr_set_timeout();
 10266                        ;
  Sat Jul 10 2021  1:15                                                Page 195


 10267                        ;   // Select the drive - call the sub_select func
                    tion.
 10268                        ;   // Quit now if this fails.
 10269                        ;
 10270                        ;   if ( sub_select( dev ) )
 10271                        ;   {
 10272                        ;      return 1;
 10273                        ;   }
 10274                        ;
 10275                        ;   // Set up all the registers except the command
                     register.
 10276                        ;
 10277                        ;   sub_setup_command();
 10278                        ;
 10279                        ;   // Start the command by setting the Command re
                    gister.  The drive
 10280                        ;   // should immediately set BUSY status.
 10281                        ;
 10282                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
 10283                        ;
 10284                        ;   // The drive should start executing the comman
                    d including any
 10285                        ;   // data transfer.
 10286                        ;
 10287                        ;   // Data transfer...
 10288                        ;   // read the BMIDE regs
 10289                        ;   // enable/start the dma channel.
 10290                        ;   // read the BMIDE regs again
 10291                        ;
 10292                        ;   pio_readBusMstrCmd();
 10293                        ;   pio_readBusMstrStatus();
 10294                        ;   pio_writeBusMstrCmd( (unsigned char) ( rwContr
                    ol | BM_CR_MASK_START ) );
 10295                        ;   pio_readBusMstrCmd();
 10296                        ;   pio_readBusMstrStatus();
 10297                        ;
 10298                        ;   // Data transfer...
 10299                        ;   // the device and dma channel transfer the dat
                    a here while we start
 10300                        ;   // checking for command completion...
 10301                        ;   // wait for the PCI BM Interrupt=1 (see ATAIOI
                    NT.C)...
 10302                        ;
 10303                        ;   if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )       // 
                    time out ?
 10304                        ;   {
 10305                        ;      reg_cmd_info.to = 1;
 10306                        ;      reg_cmd_info.ec = 73;
 10307                        ;   }
 10308                        ;
 10309                        ;   // End of command...
 10310                        ;   // disable/stop the dma channel
 10311                        ;
 10312                        ;   status = int_bmide_status;                // r
                    ead BM status
 10313                        ;   status &= ~ BM_SR_MASK_ACT;            // igno
                    re Active bit
 10314                        ;   pio_writeBusMstrCmd( BM_CR_MASK_STOP );    // 
  Sat Jul 10 2021  1:15                                                Page 196


                    shutdown DMA
 10315                        ;   pio_readBusMstrCmd();                      // 
                    read BM cmd (just for trace)
 10316                        ;   status |= pio_readBusMstrStatus();         // 
                    read BM status again
 10317                        ;
 10318                        ;   if ( reg_cmd_info.ec == 0 )
 10319                        ;   {
 10320                        ;      if ( status & BM_SR_MASK_ERR )            /
                    / bus master error?
 10321                        ;      {
 10322                        ;         reg_cmd_info.ec = 78;                  /
                    / yes
 10323                        ;      }
 10324                        ;   }
 10325                        ;   if ( reg_cmd_info.ec == 0 )
 10326                        ;   {
 10327                        ;      if ( status & BM_SR_MASK_ACT )            /
                    / end of PRD list?
 10328                        ;      {
 10329                        ;         reg_cmd_info.ec = 71;                  /
                    / no
 10330                        ;      }
 10331                        ;   }
 10332                        ;
 10333                        ;   // End of command...
 10334                        ;   // If no error use the Status register value t
                    hat was read
 10335                        ;   // by the interrupt handler. If there was an e
                    rror
 10336                        ;   // read the Status register because it may not
                     have been
 10337                        ;   // read by the interrupt handler.
 10338                        ;
 10339                        ;   if ( reg_cmd_info.ec )
 10340                        ;      status = pio_inbyte( CB_STAT );
 10341                        ;   else
 10342                        ;      status = int_ata_status;
 10343                        ;
 10344                        ;   // Final status check...
 10345                        ;   // if no error, check final status...
 10346                        ;   // Error if BUSY, DEVICE FAULT, DRQ or ERROR s
                    tatus now.
 10347                        ;
 10348                        ;   if ( reg_cmd_info.ec == 0 )
 10349                        ;   {
 10350                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_DRQ | CB_STAT_ERR ) )
 10351                        ;      {
 10352                        ;         reg_cmd_info.ec = 74;
 10353                        ;      }
 10354                        ;   }
 10355                        ;
 10356                        ;   // Final status check...
 10357                        ;   // if any error, update total bytes transferre
                    d.
 10358                        ;
 10359                        ;   if ( reg_cmd_info.ec == 0 )
  Sat Jul 10 2021  1:15                                                Page 197


 10360                        ;      reg_cmd_info.totalBytesXfer = numSect * 512
                    L;
 10361                        ;   else
 10362                        ;      reg_cmd_info.totalBytesXfer = 0L;
 10363                        ;
 10364                        ;   // All done.  The return values of this functi
                    on are described in
 10365                        ;   // MINDRVR.H.
 10366                        ;
 10367                        ;   if ( reg_cmd_info.ec )
 10368                        ;      return 1;
 10369                        ;   return 0;
 10370                        ;}
 10371                        ;
 10372                        ;//***********************************************
                    ************
 10373                        ;//
 10374                        ;// dma_pci_lba28() - DMA in PCI Multiword for ATA
                     R/W DMA
 10375                        ;//
 10376                        ;//***********************************************
                    ************
 10377                        ;
 10378                        ;int dma_pci_lba28( unsigned char dev, unsigned ch
                    ar cmd,
 10379                        ;                   unsigned int fr, unsigned int 
                    sc,
 10380                        ;                   unsigned long lba,
 10381                        ;                   unsigned char * bufAddr,
 10382                        ;                   long numSect )
 10383                        ;
 10384                        ;{
 10385                        ;
 10386                        ;   // Setup current command information.
 10387                        ;
 10388                        ;   reg_cmd_info.cmd = cmd;
 10389                        ;   reg_cmd_info.fr = fr;
 10390                        ;   reg_cmd_info.sc = sc;
 10391                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
 10392                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10393                        ;   reg_cmd_info.ns  = numSect;
 10394                        ;   reg_cmd_info.lbaSize = LBA28;
 10395                        ;   reg_cmd_info.lbaHigh = 0L;
 10396                        ;   reg_cmd_info.lbaLow = lba;
 10397                        ;
 10398                        ;   // Execute the command.
 10399                        ;
 10400                        ;   return exec_pci_ata_cmd( dev, bufAddr, numSect
                     );
 10401                        ;}
 10402                        ;
 10403                        ;//***********************************************
                    ************
 10404                        ;//
 10405                        ;// dma_pci_lba48() - DMA in PCI Multiword for ATA
                     R/W DMA
  Sat Jul 10 2021  1:15                                                Page 198


 10406                        ;//
 10407                        ;//***********************************************
                    ************
 10408                        ;
 10409                        ;int dma_pci_lba48( unsigned char dev, unsigned ch
                    ar cmd,
 10410                        ;                   unsigned int fr, unsigned int 
                    sc,
 10411                        ;                   unsigned long lbahi, unsigned 
                    long lbalo,
 10412                        ;                   unsigned char * bufAddr,
 10413                        ;                   long numSect )
 10414                        ;
 10415                        ;{
 10416                        ;
 10417                        ;   // Setup current command information.
 10418                        ;
 10419                        ;   reg_cmd_info.cmd = cmd;
 10420                        ;   reg_cmd_info.fr = fr;
 10421                        ;   reg_cmd_info.sc = sc;
 10422                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
 10423                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10424                        ;   reg_cmd_info.ns  = numSect;
 10425                        ;   reg_cmd_info.lbaSize = LBA48;
 10426                        ;   reg_cmd_info.lbaHigh = lbahi;
 10427                        ;   reg_cmd_info.lbaLow = lbalo;
 10428                        ;
 10429                        ;   // Execute the command.
 10430                        ;
 10431                        ;   return exec_pci_ata_cmd( dev, bufAddr, numSect
                     );
 10432                        ;}
 10433                        ;
 10434                        ;#endif   // INCLUDE_ATA_DMA
 10435                        ;
 10436                        ;#ifdef INCLUDE_ATAPI_DMA
 10437                        ;
 10438                        ;//***********************************************
                    ************
 10439                        ;//
 10440                        ;// dma_pci_packet() - PCI Bus Master for ATAPI Pa
                    cket command
 10441                        ;//
 10442                        ;//***********************************************
                    ************
 10443                        ;
 10444                        ;int dma_pci_packet( unsigned char dev,
 10445                        ;                    unsigned int cpbc,
 10446                        ;                    unsigned char * cdbBufAddr,
 10447                        ;                    int dir,
 10448                        ;                    long dpbc,
 10449                        ;                    unsigned char * dataBufAddr )
 10450                        ;
 10451                        ;{
 10452                        ;   unsigned char status;
 10453                        ;
  Sat Jul 10 2021  1:15                                                Page 199


 10454                        ;   // Make sure the command packet size is either
                     12 or 16
 10455                        ;   // and save the command packet size and data.
 10456                        ;
 10457                        ;   cpbc = cpbc < 12 ? 12 : cpbc;
 10458                        ;   cpbc = cpbc > 12 ? 16 : cpbc;
 10459                        ;
 10460                        ;   // Setup current command information.
 10461                        ;
 10462                        ;   reg_cmd_info.cmd = CMD_PACKET;
 10463                        ;   reg_cmd_info.fr = 0x01;      // packet DMA mod
                    e !
 10464                        ;   reg_cmd_info.sc = 0;
 10465                        ;   reg_cmd_info.sn = 0;
 10466                        ;   reg_cmd_info.cl = 0;         // no Byte Count 
                    Limit in DMA !
 10467                        ;   reg_cmd_info.ch = 0;         // no Byte Count 
                    Limit in DMA !
 10468                        ;   reg_cmd_info.dh = (unsigned char) ( dev ? CB_D
                    H_DEV1 : CB_DH_DEV0 );
 10469                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10470                        ;
 10471                        ;   // the data packet byte count must be even
 10472                        ;   // and must not be zero
 10473                        ;
 10474                        ;   if ( dpbc & 1L )
 10475                        ;      dpbc ++ ;
 10476                        ;   if ( dpbc < 2L )
 10477                        ;      dpbc = 2L;
 10478                        ;
 10479                        ;   // Set up the dma transfer
 10480                        ;
 10481                        ;   if ( set_up_xfer( dir, dpbc, dataBufAddr ) )
 10482                        ;   {
 10483                        ;      reg_cmd_info.ec = 61;
 10484                        ;      return 1;
 10485                        ;   }
 10486                        ;
 10487                        ;   // Set command time out.
 10488                        ;
 10489                        ;   tmr_set_timeout();
 10490                        ;
 10491                        ;   // Select the drive - call the reg_select func
                    tion.
 10492                        ;   // Quit now if this fails.
 10493                        ;
 10494                        ;   if ( sub_select( dev ) )
 10495                        ;   {
 10496                        ;      return 1;
 10497                        ;   }
 10498                        ;
 10499                        ;   // Set up all the registers except the command
                     register.
 10500                        ;
 10501                        ;   sub_setup_command();
 10502                        ;
 10503                        ;   // Start the command by setting the Command re
  Sat Jul 10 2021  1:15                                                Page 200


                    gister.  The drive
 10504                        ;   // should immediately set BUSY status.
 10505                        ;
 10506                        ;   pio_outbyte( CB_CMD, CMD_PACKET );
 10507                        ;
 10508                        ;   // Waste some time by reading the alternate st
                    atus a few times.
 10509                        ;   // This gives the drive time to set BUSY in th
                    e status register on
 10510                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
 10511                        ;   // system may not set BUSY fast enough and we 
                    would think it had
 10512                        ;   // completed the command when it really had no
                    t started the
 10513                        ;   // command yet.
 10514                        ;
 10515                        ;   DELAY400NS;
 10516                        ;
 10517                        ;   // Command packet transfer...
 10518                        ;   // Poll Alternate Status for BSY=0.
 10519                        ;
 10520                        ;   while ( 1 )
 10521                        ;   {
 10522                        ;      status = pio_inbyte( CB_ASTAT );       // p
                    oll for not busy
 10523                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
 10524                        ;         break;
 10525                        ;      if ( tmr_chk_timeout() )               // t
                    ime out yet ?
 10526                        ;      {
 10527                        ;         reg_cmd_info.to = 1;
 10528                        ;         reg_cmd_info.ec = 75;
 10529                        ;         break;
 10530                        ;      }
 10531                        ;   }
 10532                        ;
 10533                        ;   // Command packet transfer...
 10534                        ;   // Check for protocol failures... no interrupt
                     here please!
 10535                        ;
 10536                        ;   // Command packet transfer...
 10537                        ;   // If no error, transfer the command packet.
 10538                        ;
 10539                        ;   if ( reg_cmd_info.ec == 0 )
 10540                        ;   {
 10541                        ;
 10542                        ;      // Command packet transfer...
 10543                        ;      // Read the primary status register and the
                     other ATAPI registers.
 10544                        ;
 10545                        ;      status = pio_inbyte( CB_STAT );
 10546                        ;
 10547                        ;      // Command packet transfer...
 10548                        ;      // check status: must have BSY=0, DRQ=1 now
 10549                        ;
 10550                        ;      if (    ( status & ( CB_STAT_BSY | CB_STAT_
                    DRQ | CB_STAT_ERR ) )
  Sat Jul 10 2021  1:15                                                Page 201


 10551                        ;           != CB_STAT_DRQ
 10552                        ;         )
 10553                        ;      {
 10554                        ;         reg_cmd_info.ec = 76;
 10555                        ;      }
 10556                        ;      else
 10557                        ;      {
 10558                        ;
 10559                        ;         // Command packet transfer...
 10560                        ;         // xfer the command packet (the cdb)
 10561                        ;
 10562                        ;         pio_drq_block_out( CB_DATA, cdbBufAddr, 
                    cpbc >> 1 );
 10563                        ;      }
 10564                        ;   }
 10565                        ;
 10566                        ;   // Data transfer...
 10567                        ;   // The drive should start executing the comman
                    d
 10568                        ;   // including any data transfer.
 10569                        ;   // If no error, set up and start the DMA,
 10570                        ;   // and wait for the DMA to complete.
 10571                        ;
 10572                        ;   if ( reg_cmd_info.ec == 0 )
 10573                        ;   {
 10574                        ;
 10575                        ;      // Data transfer...
 10576                        ;      // read the BMIDE regs
 10577                        ;      // enable/start the dma channel.
 10578                        ;      // read the BMIDE regs again
 10579                        ;
 10580                        ;      pio_readBusMstrCmd();
 10581                        ;      pio_readBusMstrStatus();
 10582                        ;      pio_writeBusMstrCmd( (unsigned char) ( rwCo
                    ntrol | BM_CR_MASK_START ) );
 10583                        ;      pio_readBusMstrCmd();
 10584                        ;      pio_readBusMstrStatus();
 10585                        ;
 10586                        ;      // Data transfer...
 10587                        ;      // the device and dma channel transfer the 
                    data here while we start
 10588                        ;      // checking for command completion...
 10589                        ;      // wait for the PCI BM Active=0 and Interru
                    pt=1 or PCI BM Error=1...
 10590                        ;
 10591                        ;      if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )    // 
                    time out ?
 10592                        ;      {
 10593                        ;         reg_cmd_info.to = 1;
 10594                        ;         reg_cmd_info.ec = 73;
 10595                        ;      }
 10596                        ;
 10597                        ;      // End of command...
 10598                        ;      // disable/stop the dma channel
 10599                        ;
 10600                        ;      status = int_bmide_status;                /
                    / read BM status
 10601                        ;      status &= ~ BM_SR_MASK_ACT;            // i
  Sat Jul 10 2021  1:15                                                Page 202


                    gnore Active bit
 10602                        ;      pio_writeBusMstrCmd( BM_CR_MASK_STOP );    
                    // shutdown DMA
 10603                        ;      pio_readBusMstrCmd();                      
                    // read BM cmd (just for trace)
 10604                        ;      status |= pio_readBusMstrStatus();         
                    // read BM statu again
 10605                        ;   }
 10606                        ;
 10607                        ;   if ( reg_cmd_info.ec == 0 )
 10608                        ;   {
 10609                        ;      if ( status & ( BM_SR_MASK_ERR ) )        /
                    / bus master error?
 10610                        ;      {
 10611                        ;         reg_cmd_info.ec = 78;                  /
                    / yes
 10612                        ;      }
 10613                        ;      if ( ( status & BM_SR_MASK_ACT ) )        /
                    / end of PRD list?
 10614                        ;      {
 10615                        ;         reg_cmd_info.ec = 71;                  /
                    / no
 10616                        ;      }
 10617                        ;   }
 10618                        ;
 10619                        ;   // End of command...
 10620                        ;   // If no error use the Status register value t
                    hat was read
 10621                        ;   // by the interrupt handler. If there was an e
                    rror
 10622                        ;   // read the Status register because it may not
                     have been
 10623                        ;   // read by the interrupt handler.
 10624                        ;
 10625                        ;   if ( reg_cmd_info.ec )
 10626                        ;      status = pio_inbyte( CB_STAT );
 10627                        ;   else
 10628                        ;      status = int_ata_status;
 10629                        ;
 10630                        ;   // Final status check...
 10631                        ;   // if no error, check final status...
 10632                        ;   // Error if BUSY, DRQ or ERROR status now.
 10633                        ;
 10634                        ;   if ( reg_cmd_info.ec == 0 )
 10635                        ;   {
 10636                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DRQ |
                     CB_STAT_ERR ) )
 10637                        ;      {
 10638                        ;         reg_cmd_info.ec = 74;
 10639                        ;      }
 10640                        ;   }
 10641                        ;
 10642                        ;
 10643                        ;   // Final status check...
 10644                        ;   // if any error, update total bytes transferre
                    d.
 10645                        ;
 10646                        ;   if ( reg_cmd_info.ec == 0 )
  Sat Jul 10 2021  1:15                                                Page 203


 10647                        ;      reg_cmd_info.totalBytesXfer = dpbc;
 10648                        ;   else
 10649                        ;      reg_cmd_info.totalBytesXfer = 0L;
 10650                        ;
 10651                        ;   // All done.  The return values of this functi
                    on are described in
 10652                        ;   // MINDRVR.H.
 10653                        ;
 10654                        ;   if ( reg_cmd_info.ec )
 10655                        ;      return 1;
 10656                        ;   return 0;
 10657                        ;}
 10658                        ;
 10659                        ;#endif   // INCLUDE_ATAPI_DMA
 10660                        ;
 10661                        ;//***********************************************
                    **************
 10662                        ;//
 10663                        ;// sub_setup_command() -- setup the command param
                    eters
 10664                        ;//                        in FR, SC, SN, CL, CH a
                    nd DH.
 10665                        ;//
 10666                        ;//***********************************************
                    **************
 10667                        ;
 10668                        ;static void sub_setup_command( void )
 10669                        ;
 10670                        ;{
 10671                        	.line	3150
 10672                        	.line	3152
 10673                        	FXHDD
 10674                        	func
 10675                        	.function	3152
 10676                        ~~sub_setup_command:
 10677                        	longa	on
 10678                        	longi	on
 10679 06:B269: 3B           	tsc
 10680 06:B26A: 38           	sec
 10681 06:B26B: E9 0C 00     	sbc	#L396
 10682 06:B26E: 1B           	tcs
 10683 06:B26F: 0B           	phd
 10684 06:B270: 5B           	tcd
 10685                        	.block	3152
 10686                        ;
 10687                        ;   // output DevCtrl - same for all devices and c
                    ommands
 10688                        ;   pio_outbyte( CB_DC, reg_cmd_info.dc );
 10689                        	.line	3155
 10690 06:B271: AD xx xx     	lda	|~~reg_cmd_info+12
 10691 06:B274: 48           	pha
 10692 06:B275: F4 08 00     	pea	#<$8
 10693 06:B278: 22 F0 B7 06  	jsl	~~pio_outbyte
 10694                        ;
 10695                        ;   // output command parameters
 10696                        ;   if ( reg_cmd_info.lbaSize == LBA28 )
 10697                        	.line	3158
 10698                        ;   {
  Sat Jul 10 2021  1:15                                                Page 204


 10699 06:B27C: E2 20        	sep	#$20
 10700                        	longa	off
 10701 06:B27E: AD xx xx     	lda	|~~reg_cmd_info+19
 10702 06:B281: C9 1C        	cmp	#<$1c
 10703 06:B283: C2 20        	rep	#$20
 10704                        	longa	on
 10705 06:B285: F0 03        	beq	L399
 10706 06:B287: 82 A1 00     	brl	L10165
 10707                        L399:
 10708                        	.line	3159
 10709                        ;      // in ATA LBA28 mode
 10710                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
                    _info.fr );
 10711                        	.line	3161
 10712 06:B28A: AD xx xx     	lda	|~~reg_cmd_info+1
 10713 06:B28D: 48           	pha
 10714 06:B28E: F4 01 00     	pea	#<$1
 10715 06:B291: 22 F0 B7 06  	jsl	~~pio_outbyte
 10716                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc );
 10717                        	.line	3162
 10718 06:B295: AD xx xx     	lda	|~~reg_cmd_info+3
 10719 06:B298: 48           	pha
 10720 06:B299: F4 02 00     	pea	#<$2
 10721 06:B29C: 22 F0 B7 06  	jsl	~~pio_outbyte
 10722                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.lbaLow );
 10723                        	.line	3163
 10724 06:B2A0: AD xx xx     	lda	|~~reg_cmd_info+20
 10725 06:B2A3: 48           	pha
 10726 06:B2A4: F4 03 00     	pea	#<$3
 10727 06:B2A7: 22 F0 B7 06  	jsl	~~pio_outbyte
 10728                        ;      pio_outbyte( CB_CL, (unsigned char) ( reg_c
                    md_info.lbaLow >> 8 ) );
 10729                        	.line	3164
 10730 06:B2AB: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10731 06:B2AE: 48           	pha
 10732 06:B2AF: AD xx xx     	lda	|~~reg_cmd_info+20
 10733 06:B2B2: 48           	pha
 10734 06:B2B3: A9 08 00     	lda	#$8
 10735                        	xref	~~~llsr
 10736 06:B2B6: 22 xx xx xx  	jsl	~~~llsr
 10737 06:B2BA: 85 01        	sta	<R0
 10738 06:B2BC: 86 03        	stx	<R0+2
 10739 06:B2BE: D4 01        	pei	<R0
 10740 06:B2C0: F4 04 00     	pea	#<$4
 10741 06:B2C3: 22 F0 B7 06  	jsl	~~pio_outbyte
 10742                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaLow >> 16 ) );
 10743                        	.line	3165
 10744 06:B2C7: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10745 06:B2CA: 48           	pha
 10746 06:B2CB: AD xx xx     	lda	|~~reg_cmd_info+20
 10747 06:B2CE: 48           	pha
 10748 06:B2CF: A9 10 00     	lda	#$10
 10749                        	xref	~~~llsr
 10750 06:B2D2: 22 xx xx xx  	jsl	~~~llsr
 10751 06:B2D6: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 205


 10752 06:B2D8: 86 03        	stx	<R0+2
 10753 06:B2DA: D4 01        	pei	<R0
 10754 06:B2DC: F4 05 00     	pea	#<$5
 10755 06:B2DF: 22 F0 B7 06  	jsl	~~pio_outbyte
 10756                        ;      pio_outbyte( CB_DH, (unsigned char) ( ( reg
                    _cmd_info.dh & 0xf0 )
 10757                        	.line	3166
 10758                        ;                                            | ( (
                     reg_cmd_info.lbaLow >> 24 ) & 0x0f ) ) );
 10759 06:B2E3: AD xx xx     	lda	|~~reg_cmd_info+11
 10760 06:B2E6: 29 F0 00     	and	#<$f0
 10761 06:B2E9: 85 01        	sta	<R0
 10762 06:B2EB: A0 00 00     	ldy	#$0
 10763 06:B2EE: A5 01        	lda	<R0
 10764 06:B2F0: 10 01        	bpl	L400
 10765 06:B2F2: 88           	dey
 10766                        L400:
 10767 06:B2F3: 85 01        	sta	<R0
 10768 06:B2F5: 84 03        	sty	<R0+2
 10769 06:B2F7: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10770 06:B2FA: 48           	pha
 10771 06:B2FB: AD xx xx     	lda	|~~reg_cmd_info+20
 10772 06:B2FE: 48           	pha
 10773 06:B2FF: A9 18 00     	lda	#$18
 10774                        	xref	~~~llsr
 10775 06:B302: 22 xx xx xx  	jsl	~~~llsr
 10776 06:B306: 85 05        	sta	<R1
 10777 06:B308: 86 07        	stx	<R1+2
 10778 06:B30A: A5 05        	lda	<R1
 10779 06:B30C: 29 0F 00     	and	#<$f
 10780 06:B30F: 85 09        	sta	<R2
 10781 06:B311: 64 0B        	stz	<R2+2
 10782 06:B313: A5 09        	lda	<R2
 10783 06:B315: 05 01        	ora	<R0
 10784 06:B317: 85 05        	sta	<R1
 10785 06:B319: A5 0B        	lda	<R2+2
 10786 06:B31B: 05 03        	ora	<R0+2
 10787 06:B31D: 85 07        	sta	<R1+2
 10788 06:B31F: D4 05        	pei	<R1
 10789 06:B321: F4 06 00     	pea	#<$6
 10790 06:B324: 22 F0 B7 06  	jsl	~~pio_outbyte
 10791                        ;   }
 10792                        	.line	3168
 10793                        ;   else
 10794 06:B328: 82 18 01     	brl	L10166
 10795                        L10165:
 10796                        ;   if ( reg_cmd_info.lbaSize == LBA48 )
 10797                        	.line	3170
 10798                        ;   {
 10799 06:B32B: E2 20        	sep	#$20
 10800                        	longa	off
 10801 06:B32D: AD xx xx     	lda	|~~reg_cmd_info+19
 10802 06:B330: C9 30        	cmp	#<$30
 10803 06:B332: C2 20        	rep	#$20
 10804                        	longa	on
 10805 06:B334: F0 03        	beq	L401
 10806 06:B336: 82 C8 00     	brl	L10167
 10807                        L401:
  Sat Jul 10 2021  1:15                                                Page 206


 10808                        	.line	3171
 10809                        ;      // in ATA LBA48 mode
 10810                        ;      pio_outbyte( CB_FR, (unsigned char) ( reg_c
                    md_info.fr >> 8 ) );
 10811                        	.line	3173
 10812 06:B339: AD xx xx     	lda	|~~reg_cmd_info+1
 10813 06:B33C: EB           	xba
 10814 06:B33D: 29 FF 00     	and	#$00ff
 10815 06:B340: 48           	pha
 10816 06:B341: F4 01 00     	pea	#<$1
 10817 06:B344: 22 F0 B7 06  	jsl	~~pio_outbyte
 10818                        ;      pio_outbyte( CB_SC, (unsigned char) ( reg_c
                    md_info.sc >> 8 ) );
 10819                        	.line	3174
 10820 06:B348: AD xx xx     	lda	|~~reg_cmd_info+3
 10821 06:B34B: EB           	xba
 10822 06:B34C: 29 FF 00     	and	#$00ff
 10823 06:B34F: 48           	pha
 10824 06:B350: F4 02 00     	pea	#<$2
 10825 06:B353: 22 F0 B7 06  	jsl	~~pio_outbyte
 10826                        ;      pio_outbyte( CB_SN, (unsigned char) ( reg_c
                    md_info.lbaLow >> 24 ) );
 10827                        	.line	3175
 10828 06:B357: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10829 06:B35A: 48           	pha
 10830 06:B35B: AD xx xx     	lda	|~~reg_cmd_info+20
 10831 06:B35E: 48           	pha
 10832 06:B35F: A9 18 00     	lda	#$18
 10833                        	xref	~~~llsr
 10834 06:B362: 22 xx xx xx  	jsl	~~~llsr
 10835 06:B366: 85 01        	sta	<R0
 10836 06:B368: 86 03        	stx	<R0+2
 10837 06:B36A: D4 01        	pei	<R0
 10838 06:B36C: F4 03 00     	pea	#<$3
 10839 06:B36F: 22 F0 B7 06  	jsl	~~pio_outbyte
 10840                        ;      pio_outbyte( CB_CL, (unsigned char) reg_cmd
                    _info.lbaHigh );
 10841                        	.line	3176
 10842 06:B373: AD xx xx     	lda	|~~reg_cmd_info+24
 10843 06:B376: 48           	pha
 10844 06:B377: F4 04 00     	pea	#<$4
 10845 06:B37A: 22 F0 B7 06  	jsl	~~pio_outbyte
 10846                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaHigh >> 8 ) );
 10847                        	.line	3177
 10848 06:B37E: AD xx xx     	lda	|~~reg_cmd_info+24+2
 10849 06:B381: 48           	pha
 10850 06:B382: AD xx xx     	lda	|~~reg_cmd_info+24
 10851 06:B385: 48           	pha
 10852 06:B386: A9 08 00     	lda	#$8
 10853                        	xref	~~~llsr
 10854 06:B389: 22 xx xx xx  	jsl	~~~llsr
 10855 06:B38D: 85 01        	sta	<R0
 10856 06:B38F: 86 03        	stx	<R0+2
 10857 06:B391: D4 01        	pei	<R0
 10858 06:B393: F4 05 00     	pea	#<$5
 10859 06:B396: 22 F0 B7 06  	jsl	~~pio_outbyte
 10860                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
  Sat Jul 10 2021  1:15                                                Page 207


                    _info.fr );
 10861                        	.line	3178
 10862 06:B39A: AD xx xx     	lda	|~~reg_cmd_info+1
 10863 06:B39D: 48           	pha
 10864 06:B39E: F4 01 00     	pea	#<$1
 10865 06:B3A1: 22 F0 B7 06  	jsl	~~pio_outbyte
 10866                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc );
 10867                        	.line	3179
 10868 06:B3A5: AD xx xx     	lda	|~~reg_cmd_info+3
 10869 06:B3A8: 48           	pha
 10870 06:B3A9: F4 02 00     	pea	#<$2
 10871 06:B3AC: 22 F0 B7 06  	jsl	~~pio_outbyte
 10872                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.lbaLow );
 10873                        	.line	3180
 10874 06:B3B0: AD xx xx     	lda	|~~reg_cmd_info+20
 10875 06:B3B3: 48           	pha
 10876 06:B3B4: F4 03 00     	pea	#<$3
 10877 06:B3B7: 22 F0 B7 06  	jsl	~~pio_outbyte
 10878                        ;      pio_outbyte( CB_CL, (unsigned char) ( reg_c
                    md_info.lbaLow >> 8 ) );
 10879                        	.line	3181
 10880 06:B3BB: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10881 06:B3BE: 48           	pha
 10882 06:B3BF: AD xx xx     	lda	|~~reg_cmd_info+20
 10883 06:B3C2: 48           	pha
 10884 06:B3C3: A9 08 00     	lda	#$8
 10885                        	xref	~~~llsr
 10886 06:B3C6: 22 xx xx xx  	jsl	~~~llsr
 10887 06:B3CA: 85 01        	sta	<R0
 10888 06:B3CC: 86 03        	stx	<R0+2
 10889 06:B3CE: D4 01        	pei	<R0
 10890 06:B3D0: F4 04 00     	pea	#<$4
 10891 06:B3D3: 22 F0 B7 06  	jsl	~~pio_outbyte
 10892                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaLow >> 16 ) );
 10893                        	.line	3182
 10894 06:B3D7: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10895 06:B3DA: 48           	pha
 10896 06:B3DB: AD xx xx     	lda	|~~reg_cmd_info+20
 10897 06:B3DE: 48           	pha
 10898 06:B3DF: A9 10 00     	lda	#$10
 10899                        	xref	~~~llsr
 10900 06:B3E2: 22 xx xx xx  	jsl	~~~llsr
 10901 06:B3E6: 85 01        	sta	<R0
 10902 06:B3E8: 86 03        	stx	<R0+2
 10903 06:B3EA: D4 01        	pei	<R0
 10904 06:B3EC: F4 05 00     	pea	#<$5
 10905 06:B3EF: 22 F0 B7 06  	jsl	~~pio_outbyte
 10906                        ;      pio_outbyte( CB_DH, reg_cmd_info.dh  );
 10907                        	.line	3183
 10908 06:B3F3: AD xx xx     	lda	|~~reg_cmd_info+11
 10909 06:B3F6: 48           	pha
 10910 06:B3F7: F4 06 00     	pea	#<$6
 10911 06:B3FA: 22 F0 B7 06  	jsl	~~pio_outbyte
 10912                        ;   }
 10913                        	.line	3184
  Sat Jul 10 2021  1:15                                                Page 208


 10914                        ;   else
 10915 06:B3FE: 82 42 00     	brl	L10168
 10916                        L10167:
 10917                        ;   {
 10918                        	.line	3186
 10919                        ;      // for ATAPI PACKET command
 10920                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
                    _info.fr  );
 10921                        	.line	3188
 10922 06:B401: AD xx xx     	lda	|~~reg_cmd_info+1
 10923 06:B404: 48           	pha
 10924 06:B405: F4 01 00     	pea	#<$1
 10925 06:B408: 22 F0 B7 06  	jsl	~~pio_outbyte
 10926                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc  );
 10927                        	.line	3189
 10928 06:B40C: AD xx xx     	lda	|~~reg_cmd_info+3
 10929 06:B40F: 48           	pha
 10930 06:B410: F4 02 00     	pea	#<$2
 10931 06:B413: 22 F0 B7 06  	jsl	~~pio_outbyte
 10932                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.sn  );
 10933                        	.line	3190
 10934 06:B417: AD xx xx     	lda	|~~reg_cmd_info+5
 10935 06:B41A: 48           	pha
 10936 06:B41B: F4 03 00     	pea	#<$3
 10937 06:B41E: 22 F0 B7 06  	jsl	~~pio_outbyte
 10938                        ;      pio_outbyte( CB_CL, (unsigned char) reg_cmd
                    _info.cl  );
 10939                        	.line	3191
 10940 06:B422: AD xx xx     	lda	|~~reg_cmd_info+7
 10941 06:B425: 48           	pha
 10942 06:B426: F4 04 00     	pea	#<$4
 10943 06:B429: 22 F0 B7 06  	jsl	~~pio_outbyte
 10944                        ;      pio_outbyte( CB_CH, (unsigned char) reg_cmd
                    _info.ch  );
 10945                        	.line	3192
 10946 06:B42D: AD xx xx     	lda	|~~reg_cmd_info+9
 10947 06:B430: 48           	pha
 10948 06:B431: F4 05 00     	pea	#<$5
 10949 06:B434: 22 F0 B7 06  	jsl	~~pio_outbyte
 10950                        ;      pio_outbyte( CB_DH, reg_cmd_info.dh  );
 10951                        	.line	3193
 10952 06:B438: AD xx xx     	lda	|~~reg_cmd_info+11
 10953 06:B43B: 48           	pha
 10954 06:B43C: F4 06 00     	pea	#<$6
 10955 06:B43F: 22 F0 B7 06  	jsl	~~pio_outbyte
 10956                        ;   }
 10957                        	.line	3194
 10958                        L10168:
 10959                        L10166:
 10960                        ;}
 10961                        	.line	3195
 10962                        L402:
 10963 06:B443: 2B           	pld
 10964 06:B444: 3B           	tsc
 10965 06:B445: 18           	clc
 10966 06:B446: 69 0C 00     	adc	#L396
  Sat Jul 10 2021  1:15                                                Page 209


 10967 06:B449: 1B           	tcs
 10968 06:B44A: 6B           	rtl
 10969                        	.endblock	3195
 10970             0000000C   L396	equ	12
 10971             0000000D   L397	equ	13
 10972 06:B44B:              	ends
 10973                        	efunc
 10974                        	.endfunc	3195,13,12
 10975                        	.line	3195
 10976                        ;
 10977                        ;//***********************************************
                    **************
 10978                        ;//
 10979                        ;// sub_trace_command() -- trace the end of a comm
                    and.
 10980                        ;//
 10981                        ;//***********************************************
                    **************
 10982                        ;
 10983                        ;static void sub_trace_command( void )
 10984                        ;
 10985                        ;{
 10986                        	.line	3203
 10987                        	.line	3205
 10988                        	FXHDD
 10989                        	func
 10990                        	.function	3205
 10991                        ~~sub_trace_command:
 10992                        	longa	on
 10993                        	longi	on
 10994 06:B44B: 3B           	tsc
 10995 06:B44C: 38           	sec
 10996 06:B44D: E9 00 00     	sbc	#L403
 10997 06:B450: 1B           	tcs
 10998 06:B451: 0B           	phd
 10999 06:B452: 5B           	tcd
 11000                        	.block	3205
 11001                        ;
 11002                        ;   reg_cmd_info.st = pio_inbyte( CB_STAT );
 11003                        	.line	3207
 11004 06:B453: F4 07 00     	pea	#<$7
 11005 06:B456: 22 B1 B7 06  	jsl	~~pio_inbyte
 11006 06:B45A: E2 20        	sep	#$20
 11007                        	longa	off
 11008 06:B45C: 8D xx xx     	sta	|~~reg_cmd_info+28
 11009 06:B45F: C2 20        	rep	#$20
 11010                        	longa	on
 11011                        ;   reg_cmd_info.as = pio_inbyte( CB_ASTAT );
 11012                        	.line	3208
 11013 06:B461: F4 08 00     	pea	#<$8
 11014 06:B464: 22 B1 B7 06  	jsl	~~pio_inbyte
 11015 06:B468: E2 20        	sep	#$20
 11016                        	longa	off
 11017 06:B46A: 8D xx xx     	sta	|~~reg_cmd_info+29
 11018 06:B46D: C2 20        	rep	#$20
 11019                        	longa	on
 11020                        ;   reg_cmd_info.er = pio_inbyte( CB_ERR );
 11021                        	.line	3209
  Sat Jul 10 2021  1:15                                                Page 210


 11022 06:B46F: F4 01 00     	pea	#<$1
 11023 06:B472: 22 B1 B7 06  	jsl	~~pio_inbyte
 11024 06:B476: E2 20        	sep	#$20
 11025                        	longa	off
 11026 06:B478: 8D xx xx     	sta	|~~reg_cmd_info+30
 11027 06:B47B: C2 20        	rep	#$20
 11028                        	longa	on
 11029                        ;
 11030                        ;
 11031                        ;   k_debug_hex("reg_cmd_info.st:",reg_cmd_info.st
                    );
 11032                        	.line	3212
 11033 06:B47D: AD xx xx     	lda	|~~reg_cmd_info+28
 11034 06:B480: 48           	pha
 11035 06:B481: F4 xx xx     	pea	#^L199
 11036 06:B484: F4 xx xx     	pea	#<L199
 11037 06:B487: 22 xx xx xx  	jsl	~~k_debug_hex
 11038                        ;   k_debug_hex("reg_cmd_info.as:",reg_cmd_info.as
                    );
 11039                        	.line	3213
 11040 06:B48B: AD xx xx     	lda	|~~reg_cmd_info+29
 11041 06:B48E: 48           	pha
 11042 06:B48F: F4 xx xx     	pea	#^L199+17
 11043 06:B492: F4 xx xx     	pea	#<L199+17
 11044 06:B495: 22 xx xx xx  	jsl	~~k_debug_hex
 11045                        ;   k_debug_hex("reg_cmd_info.er:",reg_cmd_info.er
                    );
 11046                        	.line	3214
 11047 06:B499: AD xx xx     	lda	|~~reg_cmd_info+30
 11048 06:B49C: 48           	pha
 11049 06:B49D: F4 xx xx     	pea	#^L199+34
 11050 06:B4A0: F4 xx xx     	pea	#<L199+34
 11051 06:B4A3: 22 xx xx xx  	jsl	~~k_debug_hex
 11052                        ;
 11053                        ;
 11054                        ;// !!! if you want to read back the other device 
                    registers
 11055                        ;// !!! at the end of a command then this is the p
                    lace to do
 11056                        ;// !!! it. The code here is just and example of o
                    ut this is
 11057                        ;// !!! done on a little endian system like an x86
                    .
 11058                        ;
 11059                        ;#ifdef ENABLE_READBACK    // read back other regi
                    sters
 11060                        ;
 11061                        ;   {
 11062                        ;      unsigned long lbaHigh;
 11063                        ;      unsigned long lbaLow;
 11064                        ;      unsigned char sc48[2];
 11065                        ;      unsigned char lba48[8];
 11066                        ;
 11067                        ;      lbaHigh = 0;
 11068                        ;      lbaLow = 0;
 11069                        ;      if ( reg_cmd_info.lbaSize == LBA48 )
 11070                        ;      {
 11071                        ;         // read back ATA LBA48...
  Sat Jul 10 2021  1:15                                                Page 211


 11072                        ;         sc48[0]  = pio_inbyte( CB_SC );
 11073                        ;         lba48[0] = pio_inbyte( CB_SN );
 11074                        ;         lba48[1] = pio_inbyte( CB_CL );
 11075                        ;         lba48[2] = pio_inbyte( CB_CH );
 11076                        ;         pio_outbyte( CB_DC, CB_DC_HOB );
 11077                        ;         sc48[1]  = pio_inbyte( CB_SC );
 11078                        ;         lba48[3] = pio_inbyte( CB_SN );
 11079                        ;         lba48[4] = pio_inbyte( CB_CL );
 11080                        ;         lba48[5] = pio_inbyte( CB_CH );
 11081                        ;         lba48[6] = 0;
 11082                        ;         lba48[7] = 0;
 11083                        ;         lbaHigh = * (unsigned long *) ( lba48 + 
                    4 );
 11084                        ;         lbaLow  = * (unsigned long *) ( lba48 + 
                    0 );
 11085                        ;      }
 11086                        ;      else
 11087                        ;      if ( reg_cmd_info.lbaSize == LBA28 )
 11088                        ;      {
 11089                        ;         // read back ATA LBA28
 11090                        ;         lbaLow = pio_inbyte( CB_DH );
 11091                        ;         lbaLow = lbaLow << 8;
 11092                        ;         lbaLow = lbaLow | pio_inbyte( CB_CH );
 11093                        ;         lbaLow = lbaLow << 8;
 11094                        ;         lbaLow = lbaLow | pio_inbyte( CB_CL );
 11095                        ;         lbaLow = lbaLow << 8;
 11096                        ;         lbaLow = lbaLow | pio_inbyte( CB_SN );
 11097                        ;      }
 11098                        ;      else
 11099                        ;      {
 11100                        ;         // really no reason to read back for ATA
                    PI
 11101                        ;      }
 11102                        ;   }
 11103                        ;
 11104                        ;#endif   // read back other registers
 11105                        ;
 11106                        ;}
 11107                        	.line	3269
 11108                        L406:
 11109 06:B4A7: 2B           	pld
 11110 06:B4A8: 3B           	tsc
 11111 06:B4A9: 18           	clc
 11112 06:B4AA: 69 00 00     	adc	#L403
 11113 06:B4AD: 1B           	tcs
 11114 06:B4AE: 6B           	rtl
 11115                        	.endblock	3269
 11116             00000000   L403	equ	0
 11117             00000001   L404	equ	1
 11118 06:B4AF:              	ends
 11119                        	efunc
 11120                        	.endfunc	3269,1,0
 11121                        	.line	3269
 11122                        	data
 11123                        L199:
 11124 00:0416: 72 65 67 5F  	db	$72,$65,$67,$5F,$63,$6D,$64,$5F,$69,$6E,
                    $66,$6F,$2E,$73,$74
       00:041A: 63 6D 64 5F 
  Sat Jul 10 2021  1:15                                                Page 212


       00:041E: 69 6E 66 6F 
       00:0422: 2E 73 74 
 11125 00:0425: 3A 00 72 65  	db	$3A,$00,$72,$65,$67,$5F,$63,$6D,$64,$5F,
                    $69,$6E,$66,$6F,$2E
       00:0429: 67 5F 63 6D 
       00:042D: 64 5F 69 6E 
       00:0431: 66 6F 2E 
 11126 00:0434: 61 73 3A 00  	db	$61,$73,$3A,$00,$72,$65,$67,$5F,$63,$6D,
                    $64,$5F,$69,$6E,$66
       00:0438: 72 65 67 5F 
       00:043C: 63 6D 64 5F 
       00:0440: 69 6E 66 
 11127 00:0443: 6F 2E 65 72  	db	$6F,$2E,$65,$72,$3A,$00
       00:0447: 3A 00 
 11128 00:0449:              	ends
 11129                        ;
 11130                        ;//***********************************************
                    **************
 11131                        ;//
 11132                        ;// sub_select() - function used to select a drive
                    .
 11133                        ;//
 11134                        ;// Function to select a drive making sure that BS
                    Y=0 and DRQ=0.
 11135                        ;//
 11136                        ;//***********************************************
                    ***************
 11137                        ;
 11138                        ;static int sub_select( unsigned char dev )
 11139                        ;
 11140                        ;{
 11141                        	.line	3279
 11142                        	.line	3281
 11143                        	FXHDD
 11144                        	func
 11145                        	.function	3281
 11146                        ~~sub_select:
 11147                        	longa	on
 11148                        	longi	on
 11149 06:B4AF: 3B           	tsc
 11150 06:B4B0: 38           	sec
 11151 06:B4B1: E9 09 00     	sbc	#L408
 11152 06:B4B4: 1B           	tcs
 11153 06:B4B5: 0B           	phd
 11154 06:B4B6: 5B           	tcd
 11155             00000004   dev_0	set	4
 11156                        	.block	3281
 11157                        ;   unsigned char status;
 11158                        ;
 11159                        ;   // PAY ATTENTION HERE
 11160                        ;   // The caller may want to issue a command to a
                     device that doesn't
 11161                        ;   // exist (for example, Exec Dev Diag), so if w
                    e see this,
 11162                        ;   // just select that device, skip all status ch
                    ecking and return.
 11163                        ;   // We assume the caller knows what they are do
                    ing!
  Sat Jul 10 2021  1:15                                                Page 213


 11164                        ;
 11165                        ;   if ( reg_config_info[dev] < REG_CONFIG_TYPE_AT
                    A )
 11166             00000000   status_1	set	0
 11167                        	.sym	status,0,14,1,8
 11168                        	.sym	dev,4,14,6,8
 11169                        	.line	3290
 11170                        ;   {
 11171 06:B4B7: A5 0D        	lda	<L408+dev_0
 11172 06:B4B9: 29 FF 00     	and	#$ff
 11173 06:B4BC: 85 05        	sta	<R1
 11174 06:B4BE: A5 05        	lda	<R1
 11175 06:B4C0: 0A           	asl	A
 11176 06:B4C1: 85 01        	sta	<R0
 11177 06:B4C3: A6 01        	ldx	<R0
 11178 06:B4C5: BD xx xx     	lda	|~~reg_config_info,X
 11179 06:B4C8: 30 07        	bmi	L411
 11180 06:B4CA: 3A           	dea
 11181 06:B4CB: 3A           	dea
 11182 06:B4CC: 30 03        	bmi	L411
 11183 06:B4CE: 82 52 00     	brl	L10169
 11184                        L411:
 11185                        	.line	3291
 11186                        ;      // select the device and return
 11187                        ;
 11188                        ;      pio_outbyte( CB_DH, (unsigned char) ( dev ?
                     CB_DH_DEV1 : CB_DH_DEV0 ) );
 11189                        	.line	3294
 11190 06:B4D1: A5 0D        	lda	<L408+dev_0
 11191 06:B4D3: 29 FF 00     	and	#$ff
 11192 06:B4D6: D0 03        	bne	L413
 11193 06:B4D8: 82 05 00     	brl	L412
 11194                        L413:
 11195 06:B4DB: A9 10 00     	lda	#$10
 11196 06:B4DE: 80 03        	bra	L414
 11197                        L412:
 11198 06:B4E0: A9 00 00     	lda	#$0
 11199                        L414:
 11200 06:B4E3: 48           	pha
 11201 06:B4E4: F4 06 00     	pea	#<$6
 11202 06:B4E7: 22 F0 B7 06  	jsl	~~pio_outbyte
 11203                        ;      DELAY400NS;
 11204                        	.line	3295
 11205                        	.line	3295
 11206 06:B4EB: F4 08 00     	pea	#<$8
 11207 06:B4EE: 22 B1 B7 06  	jsl	~~pio_inbyte
 11208                        	.line	3295
 11209 06:B4F2: F4 08 00     	pea	#<$8
 11210 06:B4F5: 22 B1 B7 06  	jsl	~~pio_inbyte
 11211                        	.line	3295
 11212 06:B4F9: F4 08 00     	pea	#<$8
 11213 06:B4FC: 22 B1 B7 06  	jsl	~~pio_inbyte
 11214                        	.line	3295
 11215 06:B500: F4 08 00     	pea	#<$8
 11216 06:B503: 22 B1 B7 06  	jsl	~~pio_inbyte
 11217                        	.line	3295
 11218 06:B507: F4 08 00     	pea	#<$8
 11219 06:B50A: 22 B1 B7 06  	jsl	~~pio_inbyte
  Sat Jul 10 2021  1:15                                                Page 214


 11220                        	.line	3295
 11221                        	.line	3295
 11222                        ;      return 0;
 11223                        	.line	3296
 11224 06:B50E: A9 00 00     	lda	#$0
 11225                        L415:
 11226 06:B511: A8           	tay
 11227 06:B512: A5 0B        	lda	<L408+2
 11228 06:B514: 85 0D        	sta	<L408+2+2
 11229 06:B516: A5 0A        	lda	<L408+1
 11230 06:B518: 85 0C        	sta	<L408+1+2
 11231 06:B51A: 2B           	pld
 11232 06:B51B: 3B           	tsc
 11233 06:B51C: 18           	clc
 11234 06:B51D: 69 0B 00     	adc	#L408+2
 11235 06:B520: 1B           	tcs
 11236 06:B521: 98           	tya
 11237 06:B522: 6B           	rtl
 11238                        ;   }
 11239                        	.line	3297
 11240                        ;
 11241                        ;   // The rest of this is the normal ATA stuff fo
                    r device selection
 11242                        ;   // and we don't expect the caller to be select
                    ing a device that
 11243                        ;   // does not exist.
 11244                        ;   // We don't know which drive is currently sele
                    cted but we should
 11245                        ;   // wait BSY=0 and DRQ=0. Normally both BSY=0 a
                    nd DRQ=0
 11246                        ;   // unless something is very wrong!
 11247                        ;
 11248                        ;   while ( 1 )
 11249                        L10169:
 11250                        	.line	3306
 11251                        L10170:
 11252                        ;   {
 11253                        	.line	3307
 11254                        ;      status = pio_inbyte( CB_STAT );
 11255                        	.line	3308
 11256 06:B523: F4 07 00     	pea	#<$7
 11257 06:B526: 22 B1 B7 06  	jsl	~~pio_inbyte
 11258 06:B52A: E2 20        	sep	#$20
 11259                        	longa	off
 11260 06:B52C: 85 09        	sta	<L409+status_1
 11261 06:B52E: C2 20        	rep	#$20
 11262                        	longa	on
 11263                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
 11264                        	.line	3309
 11265                        ;         break;
 11266 06:B530: E2 20        	sep	#$20
 11267                        	longa	off
 11268 06:B532: A5 09        	lda	<L409+status_1
 11269 06:B534: 29 88        	and	#<$88
 11270 06:B536: C2 20        	rep	#$20
 11271                        	longa	on
 11272 06:B538: D0 03        	bne	L416
  Sat Jul 10 2021  1:15                                                Page 215


 11273 06:B53A: 82 4A 00     	brl	L10171
 11274                        L416:
 11275                        ;      if ( tmr_chk_timeout() )
 11276                        	.line	3311
 11277                        ;      {
 11278 06:B53D: 22 28 BD 06  	jsl	~~tmr_chk_timeout
 11279 06:B541: AA           	tax
 11280 06:B542: D0 03        	bne	L417
 11281 06:B544: 82 3D 00     	brl	L10172
 11282                        L417:
 11283                        	.line	3312
 11284                        ;         reg_cmd_info.to = 1;
 11285                        	.line	3313
 11286 06:B547: E2 20        	sep	#$20
 11287                        	longa	off
 11288 06:B549: A9 01        	lda	#$1
 11289 06:B54B: 8D xx xx     	sta	|~~reg_cmd_info+32
 11290 06:B54E: C2 20        	rep	#$20
 11291                        	longa	on
 11292                        ;         reg_cmd_info.ec = 11;
 11293                        	.line	3314
 11294 06:B550: E2 20        	sep	#$20
 11295                        	longa	off
 11296 06:B552: A9 0B        	lda	#$b
 11297 06:B554: 8D xx xx     	sta	|~~reg_cmd_info+31
 11298 06:B557: C2 20        	rep	#$20
 11299                        	longa	on
 11300                        ;         reg_cmd_info.st = status;
 11301                        	.line	3315
 11302 06:B559: E2 20        	sep	#$20
 11303                        	longa	off
 11304 06:B55B: A5 09        	lda	<L409+status_1
 11305 06:B55D: 8D xx xx     	sta	|~~reg_cmd_info+28
 11306 06:B560: C2 20        	rep	#$20
 11307                        	longa	on
 11308                        ;         reg_cmd_info.as = pio_inbyte( CB_ASTAT )
                    ;
 11309                        	.line	3316
 11310 06:B562: F4 08 00     	pea	#<$8
 11311 06:B565: 22 B1 B7 06  	jsl	~~pio_inbyte
 11312 06:B569: E2 20        	sep	#$20
 11313                        	longa	off
 11314 06:B56B: 8D xx xx     	sta	|~~reg_cmd_info+29
 11315 06:B56E: C2 20        	rep	#$20
 11316                        	longa	on
 11317                        ;         reg_cmd_info.er = pio_inbyte( CB_ERR );
 11318                        	.line	3317
 11319 06:B570: F4 01 00     	pea	#<$1
 11320 06:B573: 22 B1 B7 06  	jsl	~~pio_inbyte
 11321 06:B577: E2 20        	sep	#$20
 11322                        	longa	off
 11323 06:B579: 8D xx xx     	sta	|~~reg_cmd_info+30
 11324 06:B57C: C2 20        	rep	#$20
 11325                        	longa	on
 11326                        ;         return 1;
 11327                        	.line	3318
 11328 06:B57E: A9 01 00     	lda	#$1
 11329 06:B581: 82 8D FF     	brl	L415
  Sat Jul 10 2021  1:15                                                Page 216


 11330                        ;      }
 11331                        	.line	3319
 11332                        ;   }
 11333                        L10172:
 11334                        	.line	3320
 11335 06:B584: 82 9C FF     	brl	L10170
 11336                        L10171:
 11337                        ;
 11338                        ;   // Here we select the drive we really want to 
                    work with by
 11339                        ;   // setting the DEV bit in the Drive/Head regis
                    ter.
 11340                        ;
 11341                        ;   pio_outbyte( CB_DH, (unsigned char) ( dev ? CB
                    _DH_DEV1 : CB_DH_DEV0 ) );
 11342                        	.line	3325
 11343 06:B587: A5 0D        	lda	<L408+dev_0
 11344 06:B589: 29 FF 00     	and	#$ff
 11345 06:B58C: D0 03        	bne	L419
 11346 06:B58E: 82 05 00     	brl	L418
 11347                        L419:
 11348 06:B591: A9 10 00     	lda	#$10
 11349 06:B594: 80 03        	bra	L420
 11350                        L418:
 11351 06:B596: A9 00 00     	lda	#$0
 11352                        L420:
 11353 06:B599: 48           	pha
 11354 06:B59A: F4 06 00     	pea	#<$6
 11355 06:B59D: 22 F0 B7 06  	jsl	~~pio_outbyte
 11356                        ;   DELAY400NS;
 11357                        	.line	3326
 11358                        	.line	3326
 11359 06:B5A1: F4 08 00     	pea	#<$8
 11360 06:B5A4: 22 B1 B7 06  	jsl	~~pio_inbyte
 11361                        	.line	3326
 11362 06:B5A8: F4 08 00     	pea	#<$8
 11363 06:B5AB: 22 B1 B7 06  	jsl	~~pio_inbyte
 11364                        	.line	3326
 11365 06:B5AF: F4 08 00     	pea	#<$8
 11366 06:B5B2: 22 B1 B7 06  	jsl	~~pio_inbyte
 11367                        	.line	3326
 11368 06:B5B6: F4 08 00     	pea	#<$8
 11369 06:B5B9: 22 B1 B7 06  	jsl	~~pio_inbyte
 11370                        	.line	3326
 11371 06:B5BD: F4 08 00     	pea	#<$8
 11372 06:B5C0: 22 B1 B7 06  	jsl	~~pio_inbyte
 11373                        	.line	3326
 11374                        	.line	3326
 11375                        ;
 11376                        ;   // Wait for the selected device to have BSY=0 
                    and DRQ=0.
 11377                        ;   // Normally the drive should be in this state 
                    unless
 11378                        ;   // something is very wrong (or initial power u
                    p is still in
 11379                        ;   // progress).
 11380                        ;
 11381                        ;   while ( 1 )
  Sat Jul 10 2021  1:15                                                Page 217


 11382                        	.line	3333
 11383                        L10173:
 11384                        ;   {
 11385                        	.line	3334
 11386                        ;      status = pio_inbyte( CB_STAT );
 11387                        	.line	3335
 11388 06:B5C4: F4 07 00     	pea	#<$7
 11389 06:B5C7: 22 B1 B7 06  	jsl	~~pio_inbyte
 11390 06:B5CB: E2 20        	sep	#$20
 11391                        	longa	off
 11392 06:B5CD: 85 09        	sta	<L409+status_1
 11393 06:B5CF: C2 20        	rep	#$20
 11394                        	longa	on
 11395                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
 11396                        	.line	3336
 11397                        ;         break;
 11398 06:B5D1: E2 20        	sep	#$20
 11399                        	longa	off
 11400 06:B5D3: A5 09        	lda	<L409+status_1
 11401 06:B5D5: 29 88        	and	#<$88
 11402 06:B5D7: C2 20        	rep	#$20
 11403                        	longa	on
 11404 06:B5D9: D0 03        	bne	L421
 11405 06:B5DB: 82 4A 00     	brl	L10174
 11406                        L421:
 11407                        ;      if ( tmr_chk_timeout() )
 11408                        	.line	3338
 11409                        ;      {
 11410 06:B5DE: 22 28 BD 06  	jsl	~~tmr_chk_timeout
 11411 06:B5E2: AA           	tax
 11412 06:B5E3: D0 03        	bne	L422
 11413 06:B5E5: 82 3D 00     	brl	L10175
 11414                        L422:
 11415                        	.line	3339
 11416                        ;         reg_cmd_info.to = 1;
 11417                        	.line	3340
 11418 06:B5E8: E2 20        	sep	#$20
 11419                        	longa	off
 11420 06:B5EA: A9 01        	lda	#$1
 11421 06:B5EC: 8D xx xx     	sta	|~~reg_cmd_info+32
 11422 06:B5EF: C2 20        	rep	#$20
 11423                        	longa	on
 11424                        ;         reg_cmd_info.ec = 12;
 11425                        	.line	3341
 11426 06:B5F1: E2 20        	sep	#$20
 11427                        	longa	off
 11428 06:B5F3: A9 0C        	lda	#$c
 11429 06:B5F5: 8D xx xx     	sta	|~~reg_cmd_info+31
 11430 06:B5F8: C2 20        	rep	#$20
 11431                        	longa	on
 11432                        ;         reg_cmd_info.st = status;
 11433                        	.line	3342
 11434 06:B5FA: E2 20        	sep	#$20
 11435                        	longa	off
 11436 06:B5FC: A5 09        	lda	<L409+status_1
 11437 06:B5FE: 8D xx xx     	sta	|~~reg_cmd_info+28
 11438 06:B601: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 218


 11439                        	longa	on
 11440                        ;         reg_cmd_info.as = pio_inbyte( CB_ASTAT )
                    ;
 11441                        	.line	3343
 11442 06:B603: F4 08 00     	pea	#<$8
 11443 06:B606: 22 B1 B7 06  	jsl	~~pio_inbyte
 11444 06:B60A: E2 20        	sep	#$20
 11445                        	longa	off
 11446 06:B60C: 8D xx xx     	sta	|~~reg_cmd_info+29
 11447 06:B60F: C2 20        	rep	#$20
 11448                        	longa	on
 11449                        ;         reg_cmd_info.er = pio_inbyte( CB_ERR );
 11450                        	.line	3344
 11451 06:B611: F4 01 00     	pea	#<$1
 11452 06:B614: 22 B1 B7 06  	jsl	~~pio_inbyte
 11453 06:B618: E2 20        	sep	#$20
 11454                        	longa	off
 11455 06:B61A: 8D xx xx     	sta	|~~reg_cmd_info+30
 11456 06:B61D: C2 20        	rep	#$20
 11457                        	longa	on
 11458                        ;         return 1;
 11459                        	.line	3345
 11460 06:B61F: A9 01 00     	lda	#$1
 11461 06:B622: 82 EC FE     	brl	L415
 11462                        ;      }
 11463                        	.line	3346
 11464                        ;   }
 11465                        L10175:
 11466                        	.line	3347
 11467 06:B625: 82 9C FF     	brl	L10173
 11468                        L10174:
 11469                        ;
 11470                        ;   // All done.  The return values of this functi
                    on are described in
 11471                        ;   // ATAIO.H.
 11472                        ;
 11473                        ;   if ( reg_cmd_info.ec )
 11474                        	.line	3352
 11475                        ;      return 1;
 11476 06:B628: AD xx xx     	lda	|~~reg_cmd_info+31
 11477 06:B62B: 29 FF 00     	and	#$ff
 11478 06:B62E: D0 03        	bne	L423
 11479 06:B630: 82 06 00     	brl	L10176
 11480                        L423:
 11481                        	.line	3353
 11482 06:B633: A9 01 00     	lda	#$1
 11483 06:B636: 82 D8 FE     	brl	L415
 11484                        ;   return 0;
 11485                        L10176:
 11486                        	.line	3354
 11487 06:B639: A9 00 00     	lda	#$0
 11488 06:B63C: 82 D2 FE     	brl	L415
 11489                        ;}
 11490                        	.line	3355
 11491                        	.endblock	3355
 11492             00000009   L408	equ	9
 11493             00000009   L409	equ	9
 11494 06:B63F:              	ends
  Sat Jul 10 2021  1:15                                                Page 219


 11495                        	efunc
 11496                        	.endfunc	3355,9,9
 11497                        	.line	3355
 11498                        ;
 11499                        ;//***********************************************
                    **************
 11500                        ;//
 11501                        ;// sub_wait_poll() - wait for interrupt or poll f
                    or BSY=0
 11502                        ;//
 11503                        ;//***********************************************
                    **************
 11504                        ;
 11505                        ;static void sub_wait_poll( unsigned char we, unsi
                    gned char pe )
 11506                        ;
 11507                        ;{
 11508                        	.line	3363
 11509                        	.line	3365
 11510                        	FXHDD
 11511                        	func
 11512                        	.function	3365
 11513                        ~~sub_wait_poll:
 11514                        	longa	on
 11515                        	longi	on
 11516 06:B63F: 3B           	tsc
 11517 06:B640: 38           	sec
 11518 06:B641: E9 01 00     	sbc	#L424
 11519 06:B644: 1B           	tcs
 11520 06:B645: 0B           	phd
 11521 06:B646: 5B           	tcd
 11522             00000004   we_0	set	4
 11523             00000006   pe_0	set	6
 11524                        	.block	3365
 11525                        ;   unsigned char status;
 11526                        ;
 11527                        ;   // Wait for interrupt -or- wait for not BUSY -
                    or- wait for time out.
 11528                        ;
 11529                        ;   if ( we && int_use_intr_flag )
 11530             00000000   status_1	set	0
 11531                        	.sym	status,0,14,1,8
 11532                        	.sym	we,4,14,6,8
 11533                        	.sym	pe,6,14,6,8
 11534                        	.line	3370
 11535                        ;   {
 11536 06:B647: A5 05        	lda	<L424+we_0
 11537 06:B649: 29 FF 00     	and	#$ff
 11538 06:B64C: D0 03        	bne	L427
 11539 06:B64E: 82 2A 00     	brl	L10177
 11540                        L427:
 11541 06:B651: AD xx xx     	lda	|~~int_use_intr_flag
 11542 06:B654: 29 FF 00     	and	#$ff
 11543 06:B657: D0 03        	bne	L428
 11544 06:B659: 82 1F 00     	brl	L10177
 11545                        L428:
 11546                        	.line	3371
 11547                        ;      if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )    // 
  Sat Jul 10 2021  1:15                                                Page 220


                    time out ?
 11548                        	.line	3372
 11549                        ;      {
 11550 06:B65C: 22 8D BD 06  	jsl	~~SYSTEM_WAIT_INTR_OR_TIMEOUT
 11551 06:B660: AA           	tax
 11552 06:B661: D0 03        	bne	L429
 11553 06:B663: 82 12 00     	brl	L10178
 11554                        L429:
 11555                        	.line	3373
 11556                        ;         reg_cmd_info.to = 1;
 11557                        	.line	3374
 11558 06:B666: E2 20        	sep	#$20
 11559                        	longa	off
 11560 06:B668: A9 01        	lda	#$1
 11561 06:B66A: 8D xx xx     	sta	|~~reg_cmd_info+32
 11562 06:B66D: C2 20        	rep	#$20
 11563                        	longa	on
 11564                        ;         reg_cmd_info.ec = we;
 11565                        	.line	3375
 11566 06:B66F: E2 20        	sep	#$20
 11567                        	longa	off
 11568 06:B671: A5 05        	lda	<L424+we_0
 11569 06:B673: 8D xx xx     	sta	|~~reg_cmd_info+31
 11570 06:B676: C2 20        	rep	#$20
 11571                        	longa	on
 11572                        ;      }
 11573                        	.line	3376
 11574                        ;   }
 11575                        L10178:
 11576                        	.line	3377
 11577                        ;   else
 11578 06:B678: 82 3C 00     	brl	L10179
 11579                        L10177:
 11580                        ;   {
 11581                        	.line	3379
 11582                        ;      while ( 1 )
 11583                        	.line	3380
 11584                        L10180:
 11585                        ;      {
 11586                        	.line	3381
 11587                        ;         status = pio_inbyte( CB_ASTAT );       /
                    / poll for not busy
 11588                        	.line	3382
 11589 06:B67B: F4 08 00     	pea	#<$8
 11590 06:B67E: 22 B1 B7 06  	jsl	~~pio_inbyte
 11591 06:B682: E2 20        	sep	#$20
 11592                        	longa	off
 11593 06:B684: 85 01        	sta	<L425+status_1
 11594 06:B686: C2 20        	rep	#$20
 11595                        	longa	on
 11596                        ;         if ( ( status & CB_STAT_BSY ) == 0 )
 11597                        	.line	3383
 11598                        ;            break;
 11599 06:B688: E2 20        	sep	#$20
 11600                        	longa	off
 11601 06:B68A: A5 01        	lda	<L425+status_1
 11602 06:B68C: 29 80        	and	#<$80
 11603 06:B68E: C2 20        	rep	#$20
  Sat Jul 10 2021  1:15                                                Page 221


 11604                        	longa	on
 11605 06:B690: D0 03        	bne	L430
 11606 06:B692: 82 22 00     	brl	L10181
 11607                        L430:
 11608                        ;         if ( tmr_chk_timeout() )               /
                    / time out yet ?
 11609                        	.line	3385
 11610                        ;         {
 11611 06:B695: 22 28 BD 06  	jsl	~~tmr_chk_timeout
 11612 06:B699: AA           	tax
 11613 06:B69A: D0 03        	bne	L431
 11614 06:B69C: 82 15 00     	brl	L10182
 11615                        L431:
 11616                        	.line	3386
 11617                        ;            reg_cmd_info.to = 1;
 11618                        	.line	3387
 11619 06:B69F: E2 20        	sep	#$20
 11620                        	longa	off
 11621 06:B6A1: A9 01        	lda	#$1
 11622 06:B6A3: 8D xx xx     	sta	|~~reg_cmd_info+32
 11623 06:B6A6: C2 20        	rep	#$20
 11624                        	longa	on
 11625                        ;            reg_cmd_info.ec = pe;
 11626                        	.line	3388
 11627 06:B6A8: E2 20        	sep	#$20
 11628                        	longa	off
 11629 06:B6AA: A5 07        	lda	<L424+pe_0
 11630 06:B6AC: 8D xx xx     	sta	|~~reg_cmd_info+31
 11631 06:B6AF: C2 20        	rep	#$20
 11632                        	longa	on
 11633                        ;            break;
 11634                        	.line	3389
 11635 06:B6B1: 82 03 00     	brl	L10181
 11636                        ;         }
 11637                        	.line	3390
 11638                        ;      }
 11639                        L10182:
 11640                        	.line	3391
 11641 06:B6B4: 82 C4 FF     	brl	L10180
 11642                        L10181:
 11643                        ;   }
 11644                        	.line	3392
 11645                        L10179:
 11646                        ;}
 11647                        	.line	3393
 11648                        L432:
 11649 06:B6B7: A5 03        	lda	<L424+2
 11650 06:B6B9: 85 07        	sta	<L424+2+4
 11651 06:B6BB: A5 02        	lda	<L424+1
 11652 06:B6BD: 85 06        	sta	<L424+1+4
 11653 06:B6BF: 2B           	pld
 11654 06:B6C0: 3B           	tsc
 11655 06:B6C1: 18           	clc
 11656 06:B6C2: 69 05 00     	adc	#L424+4
 11657 06:B6C5: 1B           	tcs
 11658 06:B6C6: 6B           	rtl
 11659                        	.endblock	3393
 11660             00000001   L424	equ	1
  Sat Jul 10 2021  1:15                                                Page 222


 11661             00000001   L425	equ	1
 11662 06:B6C7:              	ends
 11663                        	efunc
 11664                        	.endfunc	3393,1,1
 11665                        	.line	3393
 11666                        ;
 11667                        ;//***********************************************
                    ************
 11668                        ;//
 11669                        ;// functions used to read/write the BMIDE registe
                    rs
 11670                        ;//
 11671                        ;//***********************************************
                    ************
 11672                        ;
 11673                        ;static unsigned char pio_readBusMstrCmd( void )
 11674                        ;
 11675                        ;{
 11676                        	.line	3401
 11677                        	.line	3403
 11678                        	FXHDD
 11679                        	func
 11680                        	.function	3403
 11681                        ~~pio_readBusMstrCmd:
 11682                        	longa	on
 11683                        	longi	on
 11684 06:B6C7: 3B           	tsc
 11685 06:B6C8: 38           	sec
 11686 06:B6C9: E9 05 00     	sbc	#L433
 11687 06:B6CC: 1B           	tcs
 11688 06:B6CD: 0B           	phd
 11689 06:B6CE: 5B           	tcd
 11690                        	.block	3403
 11691                        ;   unsigned char x;
 11692                        ;
 11693                        ;   if ( ! pio_bmide_base_addr )
 11694             00000000   x_1	set	0
 11695                        	.sym	x,0,14,1,8
 11696                        	.line	3406
 11697                        ;      return 0;
 11698 06:B6CF: AD xx xx     	lda	|~~pio_bmide_base_addr
 11699 06:B6D2: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11700 06:B6D5: F0 03        	beq	L436
 11701 06:B6D7: 82 0D 00     	brl	L10183
 11702                        L436:
 11703                        	.line	3407
 11704 06:B6DA: A9 00 00     	lda	#$0
 11705                        L437:
 11706 06:B6DD: A8           	tay
 11707 06:B6DE: 2B           	pld
 11708 06:B6DF: 3B           	tsc
 11709 06:B6E0: 18           	clc
 11710 06:B6E1: 69 05 00     	adc	#L433
 11711 06:B6E4: 1B           	tcs
 11712 06:B6E5: 98           	tya
 11713 06:B6E6: 6B           	rtl
 11714                        ;   x = * (pio_bmide_base_addr + BM_COMMAND_REG );
 11715                        L10183:
  Sat Jul 10 2021  1:15                                                Page 223


 11716                        	.line	3408
 11717 06:B6E7: AD xx xx     	lda	|~~pio_bmide_base_addr
 11718 06:B6EA: 85 01        	sta	<R0
 11719 06:B6EC: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11720 06:B6EF: 85 03        	sta	<R0+2
 11721 06:B6F1: E2 20        	sep	#$20
 11722                        	longa	off
 11723 06:B6F3: A7 01        	lda	[<R0]
 11724 06:B6F5: 85 05        	sta	<L434+x_1
 11725 06:B6F7: C2 20        	rep	#$20
 11726                        	longa	on
 11727                        ;   return x;
 11728                        	.line	3409
 11729 06:B6F9: A5 05        	lda	<L434+x_1
 11730 06:B6FB: 29 FF 00     	and	#$ff
 11731 06:B6FE: 82 DC FF     	brl	L437
 11732                        ;}
 11733                        	.line	3410
 11734                        	.endblock	3410
 11735             00000005   L433	equ	5
 11736             00000005   L434	equ	5
 11737 06:B701:              	ends
 11738                        	efunc
 11739                        	.endfunc	3410,5,5
 11740                        	.line	3410
 11741                        ;
 11742                        ;
 11743                        ;static unsigned char pio_readBusMstrStatus( void 
                    )
 11744                        ;
 11745                        ;{
 11746                        	.line	3413
 11747                        	.line	3415
 11748                        	FXHDD
 11749                        	func
 11750                        	.function	3415
 11751                        ~~pio_readBusMstrStatus:
 11752                        	longa	on
 11753                        	longi	on
 11754 06:B701: 3B           	tsc
 11755 06:B702: 38           	sec
 11756 06:B703: E9 05 00     	sbc	#L438
 11757 06:B706: 1B           	tcs
 11758 06:B707: 0B           	phd
 11759 06:B708: 5B           	tcd
 11760                        	.block	3415
 11761                        ;   unsigned char x;
 11762                        ;
 11763                        ;   if ( ! pio_bmide_base_addr )
 11764             00000000   x_1	set	0
 11765                        	.sym	x,0,14,1,8
 11766                        	.line	3418
 11767                        ;      return 0;
 11768 06:B709: AD xx xx     	lda	|~~pio_bmide_base_addr
 11769 06:B70C: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11770 06:B70F: F0 03        	beq	L441
 11771 06:B711: 82 0D 00     	brl	L10184
 11772                        L441:
  Sat Jul 10 2021  1:15                                                Page 224


 11773                        	.line	3419
 11774 06:B714: A9 00 00     	lda	#$0
 11775                        L442:
 11776 06:B717: A8           	tay
 11777 06:B718: 2B           	pld
 11778 06:B719: 3B           	tsc
 11779 06:B71A: 18           	clc
 11780 06:B71B: 69 05 00     	adc	#L438
 11781 06:B71E: 1B           	tcs
 11782 06:B71F: 98           	tya
 11783 06:B720: 6B           	rtl
 11784                        ;   x = * ( pio_bmide_base_addr + BM_STATUS_REG );
 11785                        L10184:
 11786                        	.line	3420
 11787 06:B721: AD xx xx     	lda	|~~pio_bmide_base_addr
 11788 06:B724: 85 01        	sta	<R0
 11789 06:B726: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11790 06:B729: 85 03        	sta	<R0+2
 11791 06:B72B: E2 20        	sep	#$20
 11792                        	longa	off
 11793 06:B72D: A0 02 00     	ldy	#$2
 11794 06:B730: B7 01        	lda	[<R0],Y
 11795 06:B732: 85 05        	sta	<L439+x_1
 11796 06:B734: C2 20        	rep	#$20
 11797                        	longa	on
 11798                        ;   return x;
 11799                        	.line	3421
 11800 06:B736: A5 05        	lda	<L439+x_1
 11801 06:B738: 29 FF 00     	and	#$ff
 11802 06:B73B: 82 D9 FF     	brl	L442
 11803                        ;}
 11804                        	.line	3422
 11805                        	.endblock	3422
 11806             00000005   L438	equ	5
 11807             00000005   L439	equ	5
 11808 06:B73E:              	ends
 11809                        	efunc
 11810                        	.endfunc	3422,5,5
 11811                        	.line	3422
 11812                        ;
 11813                        ;
 11814                        ;static void pio_writeBusMstrCmd( unsigned char x 
                    )
 11815                        ;
 11816                        ;{
 11817                        	.line	3425
 11818                        	.line	3427
 11819                        	FXHDD
 11820                        	func
 11821                        	.function	3427
 11822                        ~~pio_writeBusMstrCmd:
 11823                        	longa	on
 11824                        	longi	on
 11825 06:B73E: 3B           	tsc
 11826 06:B73F: 38           	sec
 11827 06:B740: E9 04 00     	sbc	#L443
 11828 06:B743: 1B           	tcs
 11829 06:B744: 0B           	phd
  Sat Jul 10 2021  1:15                                                Page 225


 11830 06:B745: 5B           	tcd
 11831             00000004   x_0	set	4
 11832                        	.block	3427
 11833                        ;
 11834                        ;   if ( ! pio_bmide_base_addr )
 11835                        	.sym	x,4,14,6,8
 11836                        	.line	3429
 11837                        ;      return;
 11838 06:B746: AD xx xx     	lda	|~~pio_bmide_base_addr
 11839 06:B749: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11840 06:B74C: F0 03        	beq	L446
 11841 06:B74E: 82 10 00     	brl	L10185
 11842                        L446:
 11843                        	.line	3430
 11844                        L447:
 11845 06:B751: A5 06        	lda	<L443+2
 11846 06:B753: 85 08        	sta	<L443+2+2
 11847 06:B755: A5 05        	lda	<L443+1
 11848 06:B757: 85 07        	sta	<L443+1+2
 11849 06:B759: 2B           	pld
 11850 06:B75A: 3B           	tsc
 11851 06:B75B: 18           	clc
 11852 06:B75C: 69 06 00     	adc	#L443+2
 11853 06:B75F: 1B           	tcs
 11854 06:B760: 6B           	rtl
 11855                        ;   * ( pio_bmide_base_addr + BM_COMMAND_REG ) = x
                    ;
 11856                        L10185:
 11857                        	.line	3431
 11858 06:B761: AD xx xx     	lda	|~~pio_bmide_base_addr
 11859 06:B764: 85 01        	sta	<R0
 11860 06:B766: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11861 06:B769: 85 03        	sta	<R0+2
 11862 06:B76B: E2 20        	sep	#$20
 11863                        	longa	off
 11864 06:B76D: A5 08        	lda	<L443+x_0
 11865 06:B76F: 87 01        	sta	[<R0]
 11866 06:B771: C2 20        	rep	#$20
 11867                        	longa	on
 11868                        ;}
 11869                        	.line	3432
 11870 06:B773: 82 DB FF     	brl	L447
 11871                        	.endblock	3432
 11872             00000004   L443	equ	4
 11873             00000005   L444	equ	5
 11874 06:B776:              	ends
 11875                        	efunc
 11876                        	.endfunc	3432,5,4
 11877                        	.line	3432
 11878                        ;
 11879                        ;
 11880                        ;static void pio_writeBusMstrStatus( unsigned char
                     x )
 11881                        ;
 11882                        ;{
 11883                        	.line	3435
 11884                        	.line	3437
 11885                        	FXHDD
  Sat Jul 10 2021  1:15                                                Page 226


 11886                        	func
 11887                        	.function	3437
 11888                        ~~pio_writeBusMstrStatus:
 11889                        	longa	on
 11890                        	longi	on
 11891 06:B776: 3B           	tsc
 11892 06:B777: 38           	sec
 11893 06:B778: E9 04 00     	sbc	#L448
 11894 06:B77B: 1B           	tcs
 11895 06:B77C: 0B           	phd
 11896 06:B77D: 5B           	tcd
 11897             00000004   x_0	set	4
 11898                        	.block	3437
 11899                        ;
 11900                        ;   if ( ! pio_bmide_base_addr )
 11901                        	.sym	x,4,14,6,8
 11902                        	.line	3439
 11903                        ;      return;
 11904 06:B77E: AD xx xx     	lda	|~~pio_bmide_base_addr
 11905 06:B781: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11906 06:B784: F0 03        	beq	L451
 11907 06:B786: 82 10 00     	brl	L10186
 11908                        L451:
 11909                        	.line	3440
 11910                        L452:
 11911 06:B789: A5 06        	lda	<L448+2
 11912 06:B78B: 85 08        	sta	<L448+2+2
 11913 06:B78D: A5 05        	lda	<L448+1
 11914 06:B78F: 85 07        	sta	<L448+1+2
 11915 06:B791: 2B           	pld
 11916 06:B792: 3B           	tsc
 11917 06:B793: 18           	clc
 11918 06:B794: 69 06 00     	adc	#L448+2
 11919 06:B797: 1B           	tcs
 11920 06:B798: 6B           	rtl
 11921                        ;   * ( pio_bmide_base_addr + BM_STATUS_REG ) =  x
                    ;
 11922                        L10186:
 11923                        	.line	3441
 11924 06:B799: AD xx xx     	lda	|~~pio_bmide_base_addr
 11925 06:B79C: 85 01        	sta	<R0
 11926 06:B79E: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11927 06:B7A1: 85 03        	sta	<R0+2
 11928 06:B7A3: E2 20        	sep	#$20
 11929                        	longa	off
 11930 06:B7A5: A5 08        	lda	<L448+x_0
 11931 06:B7A7: A0 02 00     	ldy	#$2
 11932 06:B7AA: 97 01        	sta	[<R0],Y
 11933 06:B7AC: C2 20        	rep	#$20
 11934                        	longa	on
 11935                        ;}
 11936                        	.line	3442
 11937 06:B7AE: 82 D8 FF     	brl	L452
 11938                        	.endblock	3442
 11939             00000004   L448	equ	4
 11940             00000005   L449	equ	5
 11941 06:B7B1:              	ends
 11942                        	efunc
  Sat Jul 10 2021  1:15                                                Page 227


 11943                        	.endfunc	3442,5,4
 11944                        	.line	3442
 11945                        ;
 11946                        ;//***********************************************
                    **************
 11947                        ;//
 11948                        ;// These functions do basic IN/OUT of byte and wo
                    rd values:
 11949                        ;//
 11950                        ;//    pio_inbyte()
 11951                        ;//    pio_outbyte()
 11952                        ;//    pio_inword()
 11953                        ;//    pio_outword()
 11954                        ;//
 11955                        ;//***********************************************
                    **************
 11956                        ;
 11957                        ;static unsigned char pio_inbyte( unsigned char ad
                    dr )
 11958                        ;
 11959                        ;{
 11960                        	.line	3455
 11961                        	.line	3457
 11962                        	FXHDD
 11963                        	func
 11964                        	.function	3457
 11965                        ~~pio_inbyte:
 11966                        	longa	on
 11967                        	longi	on
 11968 06:B7B1: 3B           	tsc
 11969 06:B7B2: 38           	sec
 11970 06:B7B3: E9 08 00     	sbc	#L453
 11971 06:B7B6: 1B           	tcs
 11972 06:B7B7: 0B           	phd
 11973 06:B7B8: 5B           	tcd
 11974             00000004   addr_0	set	4
 11975                        	.block	3457
 11976                        ;
 11977                        ;   //!!! read an 8-bit ATA register
 11978                        ;
 11979                        ;   return * pio_reg_addrs[ addr ];
 11980                        	.sym	addr,4,14,6,8
 11981                        	.line	3461
 11982 06:B7B9: A5 0C        	lda	<L453+addr_0
 11983 06:B7BB: 29 FF 00     	and	#$ff
 11984 06:B7BE: 85 05        	sta	<R1
 11985 06:B7C0: A5 05        	lda	<R1
 11986 06:B7C2: 0A           	asl	A
 11987 06:B7C3: 0A           	asl	A
 11988 06:B7C4: 85 01        	sta	<R0
 11989 06:B7C6: 18           	clc
 11990 06:B7C7: A9 xx xx     	lda	#<~~pio_reg_addrs
 11991 06:B7CA: 65 01        	adc	<R0
 11992 06:B7CC: 85 05        	sta	<R1
 11993 06:B7CE: B2 05        	lda	(<R1)
 11994 06:B7D0: 85 01        	sta	<R0
 11995 06:B7D2: A0 02 00     	ldy	#$2
 11996 06:B7D5: B1 05        	lda	(<R1),Y
  Sat Jul 10 2021  1:15                                                Page 228


 11997 06:B7D7: 85 03        	sta	<R0+2
 11998 06:B7D9: A7 01        	lda	[<R0]
 11999 06:B7DB: 29 FF 00     	and	#$ff
 12000                        L456:
 12001 06:B7DE: A8           	tay
 12002 06:B7DF: A5 0A        	lda	<L453+2
 12003 06:B7E1: 85 0C        	sta	<L453+2+2
 12004 06:B7E3: A5 09        	lda	<L453+1
 12005 06:B7E5: 85 0B        	sta	<L453+1+2
 12006 06:B7E7: 2B           	pld
 12007 06:B7E8: 3B           	tsc
 12008 06:B7E9: 18           	clc
 12009 06:B7EA: 69 0A 00     	adc	#L453+2
 12010 06:B7ED: 1B           	tcs
 12011 06:B7EE: 98           	tya
 12012 06:B7EF: 6B           	rtl
 12013                        ;}
 12014                        	.line	3462
 12015                        	.endblock	3462
 12016             00000008   L453	equ	8
 12017             00000009   L454	equ	9
 12018 06:B7F0:              	ends
 12019                        	efunc
 12020                        	.endfunc	3462,9,8
 12021                        	.line	3462
 12022                        ;
 12023                        ;//***********************************************
                    **************
 12024                        ;
 12025                        ;static void pio_outbyte( int addr, unsigned char 
                    data )
 12026                        ;
 12027                        ;{
 12028                        	.line	3466
 12029                        	.line	3468
 12030                        	FXHDD
 12031                        	func
 12032                        	.function	3468
 12033                        ~~pio_outbyte:
 12034                        	longa	on
 12035                        	longi	on
 12036 06:B7F0: 3B           	tsc
 12037 06:B7F1: 38           	sec
 12038 06:B7F2: E9 08 00     	sbc	#L457
 12039 06:B7F5: 1B           	tcs
 12040 06:B7F6: 0B           	phd
 12041 06:B7F7: 5B           	tcd
 12042             00000004   addr_0	set	4
 12043             00000006   data_0	set	6
 12044                        	.block	3468
 12045                        ;
 12046                        ;   //!!! write an 8-bit ATA register
 12047                        ;
 12048                        ;   * pio_reg_addrs[ addr ] = data;
 12049                        	.sym	addr,4,5,6,16
 12050                        	.sym	data,6,14,6,8
 12051                        	.line	3472
 12052 06:B7F8: A5 0C        	lda	<L457+addr_0
  Sat Jul 10 2021  1:15                                                Page 229


 12053 06:B7FA: 0A           	asl	A
 12054 06:B7FB: 0A           	asl	A
 12055 06:B7FC: 85 01        	sta	<R0
 12056 06:B7FE: 18           	clc
 12057 06:B7FF: A9 xx xx     	lda	#<~~pio_reg_addrs
 12058 06:B802: 65 01        	adc	<R0
 12059 06:B804: 85 05        	sta	<R1
 12060 06:B806: B2 05        	lda	(<R1)
 12061 06:B808: 85 01        	sta	<R0
 12062 06:B80A: A0 02 00     	ldy	#$2
 12063 06:B80D: B1 05        	lda	(<R1),Y
 12064 06:B80F: 85 03        	sta	<R0+2
 12065 06:B811: E2 20        	sep	#$20
 12066                        	longa	off
 12067 06:B813: A5 0E        	lda	<L457+data_0
 12068 06:B815: 87 01        	sta	[<R0]
 12069 06:B817: C2 20        	rep	#$20
 12070                        	longa	on
 12071                        ;}
 12072                        	.line	3473
 12073                        L460:
 12074 06:B819: A5 0A        	lda	<L457+2
 12075 06:B81B: 85 0E        	sta	<L457+2+4
 12076 06:B81D: A5 09        	lda	<L457+1
 12077 06:B81F: 85 0D        	sta	<L457+1+4
 12078 06:B821: 2B           	pld
 12079 06:B822: 3B           	tsc
 12080 06:B823: 18           	clc
 12081 06:B824: 69 0C 00     	adc	#L457+4
 12082 06:B827: 1B           	tcs
 12083 06:B828: 6B           	rtl
 12084                        	.endblock	3473
 12085             00000008   L457	equ	8
 12086             00000009   L458	equ	9
 12087 06:B829:              	ends
 12088                        	efunc
 12089                        	.endfunc	3473,9,8
 12090                        	.line	3473
 12091                        ;
 12092                        ;//***********************************************
                    **************
 12093                        ;
 12094                        ;static unsigned int pio_inword( unsigned char add
                    r )
 12095                        ;
 12096                        ;{
 12097                        	.line	3477
 12098                        	.line	3479
 12099                        	FXHDD
 12100                        	func
 12101                        	.function	3479
 12102                        ~~pio_inword:
 12103                        	longa	on
 12104                        	longi	on
 12105 06:B829: 3B           	tsc
 12106 06:B82A: 38           	sec
 12107 06:B82B: E9 08 00     	sbc	#L461
 12108 06:B82E: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 230


 12109 06:B82F: 0B           	phd
 12110 06:B830: 5B           	tcd
 12111             00000004   addr_0	set	4
 12112                        	.block	3479
 12113                        ;
 12114                        ;   //!!! read an 8-bit ATA register (usually the 
                    ATA Data register)
 12115                        ;
 12116                        ;   return * ( (unsigned int *) pio_reg_addrs[ add
                    r ] );
 12117                        	.sym	addr,4,14,6,8
 12118                        	.line	3483
 12119 06:B831: A5 0C        	lda	<L461+addr_0
 12120 06:B833: 29 FF 00     	and	#$ff
 12121 06:B836: 85 05        	sta	<R1
 12122 06:B838: A5 05        	lda	<R1
 12123 06:B83A: 0A           	asl	A
 12124 06:B83B: 0A           	asl	A
 12125 06:B83C: 85 01        	sta	<R0
 12126 06:B83E: 18           	clc
 12127 06:B83F: A9 xx xx     	lda	#<~~pio_reg_addrs
 12128 06:B842: 65 01        	adc	<R0
 12129 06:B844: 85 05        	sta	<R1
 12130 06:B846: B2 05        	lda	(<R1)
 12131 06:B848: 85 01        	sta	<R0
 12132 06:B84A: A0 02 00     	ldy	#$2
 12133 06:B84D: B1 05        	lda	(<R1),Y
 12134 06:B84F: 85 03        	sta	<R0+2
 12135 06:B851: A7 01        	lda	[<R0]
 12136                        L464:
 12137 06:B853: A8           	tay
 12138 06:B854: A5 0A        	lda	<L461+2
 12139 06:B856: 85 0C        	sta	<L461+2+2
 12140 06:B858: A5 09        	lda	<L461+1
 12141 06:B85A: 85 0B        	sta	<L461+1+2
 12142 06:B85C: 2B           	pld
 12143 06:B85D: 3B           	tsc
 12144 06:B85E: 18           	clc
 12145 06:B85F: 69 0A 00     	adc	#L461+2
 12146 06:B862: 1B           	tcs
 12147 06:B863: 98           	tya
 12148 06:B864: 6B           	rtl
 12149                        ;}
 12150                        	.line	3484
 12151                        	.endblock	3484
 12152             00000008   L461	equ	8
 12153             00000009   L462	equ	9
 12154 06:B865:              	ends
 12155                        	efunc
 12156                        	.endfunc	3484,9,8
 12157                        	.line	3484
 12158                        ;
 12159                        ;//***********************************************
                    **************
 12160                        ;
 12161                        ;static void pio_outword( int addr, unsigned int d
                    ata )
 12162                        ;
  Sat Jul 10 2021  1:15                                                Page 231


 12163                        ;{
 12164                        	.line	3488
 12165                        	.line	3490
 12166                        	FXHDD
 12167                        	func
 12168                        	.function	3490
 12169                        ~~pio_outword:
 12170                        	longa	on
 12171                        	longi	on
 12172 06:B865: 3B           	tsc
 12173 06:B866: 38           	sec
 12174 06:B867: E9 08 00     	sbc	#L465
 12175 06:B86A: 1B           	tcs
 12176 06:B86B: 0B           	phd
 12177 06:B86C: 5B           	tcd
 12178             00000004   addr_0	set	4
 12179             00000006   data_0	set	6
 12180                        	.block	3490
 12181                        ;
 12182                        ;   //!!! Write an 8-bit ATA register (usually the
                     ATA Data register)
 12183                        ;
 12184                        ;   * ( (unsigned int *) pio_reg_addrs[ addr ] ) =
                     data;
 12185                        	.sym	addr,4,5,6,16
 12186                        	.sym	data,6,16,6,16
 12187                        	.line	3494
 12188 06:B86D: A5 0C        	lda	<L465+addr_0
 12189 06:B86F: 0A           	asl	A
 12190 06:B870: 0A           	asl	A
 12191 06:B871: 85 01        	sta	<R0
 12192 06:B873: 18           	clc
 12193 06:B874: A9 xx xx     	lda	#<~~pio_reg_addrs
 12194 06:B877: 65 01        	adc	<R0
 12195 06:B879: 85 05        	sta	<R1
 12196 06:B87B: B2 05        	lda	(<R1)
 12197 06:B87D: 85 01        	sta	<R0
 12198 06:B87F: A0 02 00     	ldy	#$2
 12199 06:B882: B1 05        	lda	(<R1),Y
 12200 06:B884: 85 03        	sta	<R0+2
 12201 06:B886: A5 0E        	lda	<L465+data_0
 12202 06:B888: 87 01        	sta	[<R0]
 12203                        ;}
 12204                        	.line	3495
 12205                        L468:
 12206 06:B88A: A5 0A        	lda	<L465+2
 12207 06:B88C: 85 0E        	sta	<L465+2+4
 12208 06:B88E: A5 09        	lda	<L465+1
 12209 06:B890: 85 0D        	sta	<L465+1+4
 12210 06:B892: 2B           	pld
 12211 06:B893: 3B           	tsc
 12212 06:B894: 18           	clc
 12213 06:B895: 69 0C 00     	adc	#L465+4
 12214 06:B898: 1B           	tcs
 12215 06:B899: 6B           	rtl
 12216                        	.endblock	3495
 12217             00000008   L465	equ	8
 12218             00000009   L466	equ	9
  Sat Jul 10 2021  1:15                                                Page 232


 12219 06:B89A:              	ends
 12220                        	efunc
 12221                        	.endfunc	3495,9,8
 12222                        	.line	3495
 12223                        ;
 12224                        ;//***********************************************
                    **************
 12225                        ;
 12226                        ;static unsigned long pio_indword( unsigned char a
                    ddr )
 12227                        ;
 12228                        ;{
 12229                        	.line	3499
 12230                        	.line	3501
 12231                        	FXHDD
 12232                        	func
 12233                        	.function	3501
 12234                        ~~pio_indword:
 12235                        	longa	on
 12236                        	longi	on
 12237 06:B89A: 3B           	tsc
 12238 06:B89B: 38           	sec
 12239 06:B89C: E9 08 00     	sbc	#L469
 12240 06:B89F: 1B           	tcs
 12241 06:B8A0: 0B           	phd
 12242 06:B8A1: 5B           	tcd
 12243             00000004   addr_0	set	4
 12244                        	.block	3501
 12245                        ;
 12246                        ;   //!!! read an 8-bit ATA register (usually the 
                    ATA Data register)
 12247                        ;
 12248                        ;   return * ( (unsigned long *) pio_reg_addrs[ ad
                    dr ] );
 12249                        	.sym	addr,4,14,6,8
 12250                        	.line	3505
 12251 06:B8A2: A5 0C        	lda	<L469+addr_0
 12252 06:B8A4: 29 FF 00     	and	#$ff
 12253 06:B8A7: 85 05        	sta	<R1
 12254 06:B8A9: A5 05        	lda	<R1
 12255 06:B8AB: 0A           	asl	A
 12256 06:B8AC: 0A           	asl	A
 12257 06:B8AD: 85 01        	sta	<R0
 12258 06:B8AF: 18           	clc
 12259 06:B8B0: A9 xx xx     	lda	#<~~pio_reg_addrs
 12260 06:B8B3: 65 01        	adc	<R0
 12261 06:B8B5: 85 05        	sta	<R1
 12262 06:B8B7: B2 05        	lda	(<R1)
 12263 06:B8B9: 85 01        	sta	<R0
 12264 06:B8BB: A0 02 00     	ldy	#$2
 12265 06:B8BE: B1 05        	lda	(<R1),Y
 12266 06:B8C0: 85 03        	sta	<R0+2
 12267 06:B8C2: A0 02 00     	ldy	#$2
 12268 06:B8C5: B7 01        	lda	[<R0],Y
 12269 06:B8C7: AA           	tax
 12270 06:B8C8: A7 01        	lda	[<R0]
 12271                        L472:
 12272 06:B8CA: A8           	tay
  Sat Jul 10 2021  1:15                                                Page 233


 12273 06:B8CB: A5 0A        	lda	<L469+2
 12274 06:B8CD: 85 0C        	sta	<L469+2+2
 12275 06:B8CF: A5 09        	lda	<L469+1
 12276 06:B8D1: 85 0B        	sta	<L469+1+2
 12277 06:B8D3: 2B           	pld
 12278 06:B8D4: 3B           	tsc
 12279 06:B8D5: 18           	clc
 12280 06:B8D6: 69 0A 00     	adc	#L469+2
 12281 06:B8D9: 1B           	tcs
 12282 06:B8DA: 98           	tya
 12283 06:B8DB: 6B           	rtl
 12284                        ;}
 12285                        	.line	3506
 12286                        	.endblock	3506
 12287             00000008   L469	equ	8
 12288             00000009   L470	equ	9
 12289 06:B8DC:              	ends
 12290                        	efunc
 12291                        	.endfunc	3506,9,8
 12292                        	.line	3506
 12293                        ;
 12294                        ;//***********************************************
                    **************
 12295                        ;
 12296                        ;static void pio_outdword( int addr, unsigned long
                     data )
 12297                        ;
 12298                        ;{
 12299                        	.line	3510
 12300                        	.line	3512
 12301                        	FXHDD
 12302                        	func
 12303                        	.function	3512
 12304                        ~~pio_outdword:
 12305                        	longa	on
 12306                        	longi	on
 12307 06:B8DC: 3B           	tsc
 12308 06:B8DD: 38           	sec
 12309 06:B8DE: E9 08 00     	sbc	#L473
 12310 06:B8E1: 1B           	tcs
 12311 06:B8E2: 0B           	phd
 12312 06:B8E3: 5B           	tcd
 12313             00000004   addr_0	set	4
 12314             00000006   data_0	set	6
 12315                        	.block	3512
 12316                        ;
 12317                        ;   //!!! Write an 8-bit ATA register (usually the
                     ATA Data register)
 12318                        ;
 12319                        ;   * ( (unsigned long *) pio_reg_addrs[ addr ] ) 
                    = data;
 12320                        	.sym	addr,4,5,6,16
 12321                        	.sym	data,6,18,6,32
 12322                        	.line	3516
 12323 06:B8E4: A5 0C        	lda	<L473+addr_0
 12324 06:B8E6: 0A           	asl	A
 12325 06:B8E7: 0A           	asl	A
 12326 06:B8E8: 85 01        	sta	<R0
  Sat Jul 10 2021  1:15                                                Page 234


 12327 06:B8EA: 18           	clc
 12328 06:B8EB: A9 xx xx     	lda	#<~~pio_reg_addrs
 12329 06:B8EE: 65 01        	adc	<R0
 12330 06:B8F0: 85 05        	sta	<R1
 12331 06:B8F2: B2 05        	lda	(<R1)
 12332 06:B8F4: 85 01        	sta	<R0
 12333 06:B8F6: A0 02 00     	ldy	#$2
 12334 06:B8F9: B1 05        	lda	(<R1),Y
 12335 06:B8FB: 85 03        	sta	<R0+2
 12336 06:B8FD: A5 0E        	lda	<L473+data_0
 12337 06:B8FF: 87 01        	sta	[<R0]
 12338 06:B901: A5 10        	lda	<L473+data_0+2
 12339 06:B903: A0 02 00     	ldy	#$2
 12340 06:B906: 97 01        	sta	[<R0],Y
 12341                        ;}
 12342                        	.line	3517
 12343                        L476:
 12344 06:B908: A5 0A        	lda	<L473+2
 12345 06:B90A: 85 10        	sta	<L473+2+6
 12346 06:B90C: A5 09        	lda	<L473+1
 12347 06:B90E: 85 0F        	sta	<L473+1+6
 12348 06:B910: 2B           	pld
 12349 06:B911: 3B           	tsc
 12350 06:B912: 18           	clc
 12351 06:B913: 69 0E 00     	adc	#L473+6
 12352 06:B916: 1B           	tcs
 12353 06:B917: 6B           	rtl
 12354                        	.endblock	3517
 12355             00000008   L473	equ	8
 12356             00000009   L474	equ	9
 12357 06:B918:              	ends
 12358                        	efunc
 12359                        	.endfunc	3517,9,8
 12360                        	.line	3517
 12361                        ;
 12362                        ;//***********************************************
                    **************
 12363                        ;//
 12364                        ;// These functions are normally used to transfer 
                    DRQ blocks:
 12365                        ;//
 12366                        ;// pio_drq_block_in()
 12367                        ;// pio_drq_block_out()
 12368                        ;//
 12369                        ;//***********************************************
                    **************
 12370                        ;
 12371                        ;// Note: pio_drq_block_in() is the primary way pe
                    rform PIO
 12372                        ;// Data In transfers. It will handle 8-bit, 16-bi
                    t and 32-bit
 12373                        ;// I/O based data transfers.
 12374                        ;
 12375                        ;static void pio_drq_block_in( unsigned char addrD
                    ataReg,
 12376                        ;                       unsigned char * bufAddr,
 12377                        ;                       long wordCnt )
 12378                        ;
  Sat Jul 10 2021  1:15                                                Page 235


 12379                        ;{
 12380                        	.line	3532
 12381                        	.line	3536
 12382                        	FXHDD
 12383                        	func
 12384                        	.function	3536
 12385                        ~~pio_drq_block_in:
 12386                        	longa	on
 12387                        	longi	on
 12388 06:B918: 3B           	tsc
 12389 06:B919: 38           	sec
 12390 06:B91A: E9 0A 00     	sbc	#L477
 12391 06:B91D: 1B           	tcs
 12392 06:B91E: 0B           	phd
 12393 06:B91F: 5B           	tcd
 12394             00000004   addrDataReg_0	set	4
 12395             00000006   bufAddr_0	set	6
 12396             0000000A   wordCnt_0	set	10
 12397                        	.block	3536
 12398                        ;
 12399                        ;   // NOTE: wordCnt is the size of a DRQ data blo
                    ck/packet
 12400                        ;   // in words. The maximum value of wordCnt is n
                    ormally:
 12401                        ;   // a) For ATA, 16384 words or 32768 bytes (64 
                    sectors,
 12402                        ;   //    only with READ/WRITE MULTIPLE commands),
 12403                        ;   // b) For ATAPI, 32768 words or 65536 bytes
 12404                        ;   //    (actually 65535 bytes plus a pad byte).
 12405                        ;
 12406                        ;   {
 12407                        	.sym	addrDataReg,4,14,6,8
 12408                        	.sym	bufAddr,6,142,6,32
 12409                        	.sym	wordCnt,10,7,6,32
 12410                        	.line	3545
 12411                        ;      int pxw;
 12412                        ;      long wc;
 12413                        ;
 12414                        ;      // adjust pio_xfer_width - don't use DWORD 
                    if wordCnt is odd.
 12415                        ;
 12416                        ;      pxw = pio_xfer_width;
 12417                        	.block	3551
 12418             00000000   pxw_2	set	0
 12419             00000002   wc_2	set	2
 12420                        	.sym	pxw,0,5,1,16
 12421                        	.sym	wc,2,7,1,32
 12422                        	.line	3551
 12423 06:B920: AD xx xx     	lda	|~~pio_xfer_width
 12424 06:B923: 29 FF 00     	and	#$ff
 12425 06:B926: 85 05        	sta	<L478+pxw_2
 12426                        ;      if ( ( pxw == 32 ) && ( wordCnt & 0x0000000
                    1L ) )
 12427                        	.line	3552
 12428                        ;         pxw = 16;
 12429 06:B928: A5 05        	lda	<L478+pxw_2
 12430 06:B92A: C9 20 00     	cmp	#<$20
 12431 06:B92D: F0 03        	beq	L481
  Sat Jul 10 2021  1:15                                                Page 236


 12432 06:B92F: 82 0F 00     	brl	L10187
 12433                        L481:
 12434 06:B932: A5 14        	lda	<L477+wordCnt_0
 12435 06:B934: 29 01 00     	and	#<$1
 12436 06:B937: D0 03        	bne	L482
 12437 06:B939: 82 05 00     	brl	L10187
 12438                        L482:
 12439                        	.line	3553
 12440 06:B93C: A9 10 00     	lda	#$10
 12441 06:B93F: 85 05        	sta	<L478+pxw_2
 12442                        ;
 12443                        ;      // Data transfer using INS instruction.
 12444                        ;      // Break the transfer into chunks of 32768 
                    or fewer bytes.
 12445                        ;
 12446                        ;      while ( wordCnt > 0 )
 12447                        L10187:
 12448                        	.line	3558
 12449                        L10188:
 12450 06:B941: 38           	sec
 12451 06:B942: A9 00 00     	lda	#$0
 12452 06:B945: E5 14        	sbc	<L477+wordCnt_0
 12453 06:B947: A9 00 00     	lda	#$0
 12454 06:B94A: E5 16        	sbc	<L477+wordCnt_0+2
 12455 06:B94C: 70 03        	bvs	L483
 12456 06:B94E: 49 00 80     	eor	#$8000
 12457                        L483:
 12458 06:B951: 10 03        	bpl	L484
 12459 06:B953: 82 B5 00     	brl	L10189
 12460                        L484:
 12461                        ;      {
 12462                        	.line	3559
 12463                        ;         if ( wordCnt > 16384L )
 12464                        	.line	3560
 12465                        ;            wc = 16384;
 12466 06:B956: 38           	sec
 12467 06:B957: A9 00 40     	lda	#$4000
 12468 06:B95A: E5 14        	sbc	<L477+wordCnt_0
 12469 06:B95C: A9 00 00     	lda	#$0
 12470 06:B95F: E5 16        	sbc	<L477+wordCnt_0+2
 12471 06:B961: 70 03        	bvs	L485
 12472 06:B963: 49 00 80     	eor	#$8000
 12473                        L485:
 12474 06:B966: 10 03        	bpl	L486
 12475 06:B968: 82 0D 00     	brl	L10190
 12476                        L486:
 12477                        	.line	3561
 12478 06:B96B: A9 00 40     	lda	#$4000
 12479 06:B96E: 85 07        	sta	<L478+wc_2
 12480 06:B970: A9 00 00     	lda	#$0
 12481 06:B973: 85 09        	sta	<L478+wc_2+2
 12482                        ;         else
 12483 06:B975: 82 08 00     	brl	L10191
 12484                        L10190:
 12485                        ;            wc = wordCnt;
 12486                        	.line	3563
 12487 06:B978: A5 14        	lda	<L477+wordCnt_0
 12488 06:B97A: 85 07        	sta	<L478+wc_2
  Sat Jul 10 2021  1:15                                                Page 237


 12489 06:B97C: A5 16        	lda	<L477+wordCnt_0+2
 12490 06:B97E: 85 09        	sta	<L478+wc_2+2
 12491                        L10191:
 12492                        ;         if ( pxw == 8 )
 12493                        	.line	3564
 12494                        ;         {
 12495 06:B980: A5 05        	lda	<L478+pxw_2
 12496 06:B982: C9 08 00     	cmp	#<$8
 12497 06:B985: F0 03        	beq	L487
 12498 06:B987: 82 1D 00     	brl	L10192
 12499                        L487:
 12500                        	.line	3565
 12501                        ;            // do REP INS
 12502                        ;            pio_rep_inbyte( addrDataReg, bufAddr,
                     wc * 2L );
 12503                        	.line	3567
 12504 06:B98A: A5 07        	lda	<L478+wc_2
 12505 06:B98C: 85 01        	sta	<R0
 12506 06:B98E: A5 09        	lda	<L478+wc_2+2
 12507 06:B990: 85 03        	sta	<R0+2
 12508 06:B992: 06 01        	asl	<R0
 12509 06:B994: 26 03        	rol	<R0+2
 12510 06:B996: D4 03        	pei	<R0+2
 12511 06:B998: D4 01        	pei	<R0
 12512 06:B99A: D4 12        	pei	<L477+bufAddr_0+2
 12513 06:B99C: D4 10        	pei	<L477+bufAddr_0
 12514 06:B99E: D4 0E        	pei	<L477+addrDataReg_0
 12515 06:B9A0: 22 1E BB 06  	jsl	~~pio_rep_inbyte
 12516                        ;         }
 12517                        	.line	3568
 12518                        ;         else
 12519 06:B9A4: 82 3B 00     	brl	L10193
 12520                        L10192:
 12521                        ;         if ( pxw == 32 )
 12522                        	.line	3570
 12523                        ;         {
 12524 06:B9A7: A5 05        	lda	<L478+pxw_2
 12525 06:B9A9: C9 20 00     	cmp	#<$20
 12526 06:B9AC: F0 03        	beq	L488
 12527 06:B9AE: 82 23 00     	brl	L10194
 12528                        L488:
 12529                        	.line	3571
 12530                        ;            // do REP INSD
 12531                        ;            pio_rep_indword( addrDataReg, bufAddr
                    , wc / 2L );
 12532                        	.line	3573
 12533 06:B9B1: F4 00 00     	pea	#^$2
 12534 06:B9B4: F4 02 00     	pea	#<$2
 12535 06:B9B7: D4 09        	pei	<L478+wc_2+2
 12536 06:B9B9: D4 07        	pei	<L478+wc_2
 12537                        	xref	~~~ldiv
 12538 06:B9BB: 22 xx xx xx  	jsl	~~~ldiv
 12539 06:B9BF: 85 01        	sta	<R0
 12540 06:B9C1: 86 03        	stx	<R0+2
 12541 06:B9C3: D4 03        	pei	<R0+2
 12542 06:B9C5: D4 01        	pei	<R0
 12543 06:B9C7: D4 12        	pei	<L477+bufAddr_0+2
 12544 06:B9C9: D4 10        	pei	<L477+bufAddr_0
  Sat Jul 10 2021  1:15                                                Page 238


 12545 06:B9CB: D4 0E        	pei	<L477+addrDataReg_0
 12546 06:B9CD: 22 50 BC 06  	jsl	~~pio_rep_indword
 12547                        ;         }
 12548                        	.line	3574
 12549                        ;         else
 12550 06:B9D1: 82 0E 00     	brl	L10195
 12551                        L10194:
 12552                        ;         {
 12553                        	.line	3576
 12554                        ;            // do REP INSW
 12555                        ;            pio_rep_inword( addrDataReg, bufAddr,
                     wc );
 12556                        	.line	3578
 12557 06:B9D4: D4 09        	pei	<L478+wc_2+2
 12558 06:B9D6: D4 07        	pei	<L478+wc_2
 12559 06:B9D8: D4 12        	pei	<L477+bufAddr_0+2
 12560 06:B9DA: D4 10        	pei	<L477+bufAddr_0
 12561 06:B9DC: D4 0E        	pei	<L477+addrDataReg_0
 12562 06:B9DE: 22 B3 BB 06  	jsl	~~pio_rep_inword
 12563                        ;         }
 12564                        	.line	3579
 12565                        L10195:
 12566                        L10193:
 12567                        ;         bufAddr = bufAddr + ( wc * 2 );
 12568                        	.line	3580
 12569 06:B9E2: A5 07        	lda	<L478+wc_2
 12570 06:B9E4: 85 01        	sta	<R0
 12571 06:B9E6: A5 09        	lda	<L478+wc_2+2
 12572 06:B9E8: 85 03        	sta	<R0+2
 12573 06:B9EA: 06 01        	asl	<R0
 12574 06:B9EC: 26 03        	rol	<R0+2
 12575 06:B9EE: 18           	clc
 12576 06:B9EF: A5 10        	lda	<L477+bufAddr_0
 12577 06:B9F1: 65 01        	adc	<R0
 12578 06:B9F3: 85 10        	sta	<L477+bufAddr_0
 12579 06:B9F5: A5 12        	lda	<L477+bufAddr_0+2
 12580 06:B9F7: 65 03        	adc	<R0+2
 12581 06:B9F9: 85 12        	sta	<L477+bufAddr_0+2
 12582                        ;         wordCnt = wordCnt - wc;
 12583                        	.line	3581
 12584 06:B9FB: 38           	sec
 12585 06:B9FC: A5 14        	lda	<L477+wordCnt_0
 12586 06:B9FE: E5 07        	sbc	<L478+wc_2
 12587 06:BA00: 85 14        	sta	<L477+wordCnt_0
 12588 06:BA02: A5 16        	lda	<L477+wordCnt_0+2
 12589 06:BA04: E5 09        	sbc	<L478+wc_2+2
 12590 06:BA06: 85 16        	sta	<L477+wordCnt_0+2
 12591                        ;      }
 12592                        	.line	3582
 12593 06:BA08: 82 36 FF     	brl	L10188
 12594                        L10189:
 12595                        ;   }
 12596                        	.endblock	3583
 12597                        	.line	3583
 12598                        ;
 12599                        ;   return;
 12600                        	.line	3585
 12601                        L489:
  Sat Jul 10 2021  1:15                                                Page 239


 12602 06:BA0B: A5 0C        	lda	<L477+2
 12603 06:BA0D: 85 16        	sta	<L477+2+10
 12604 06:BA0F: A5 0B        	lda	<L477+1
 12605 06:BA11: 85 15        	sta	<L477+1+10
 12606 06:BA13: 2B           	pld
 12607 06:BA14: 3B           	tsc
 12608 06:BA15: 18           	clc
 12609 06:BA16: 69 14 00     	adc	#L477+10
 12610 06:BA19: 1B           	tcs
 12611 06:BA1A: 6B           	rtl
 12612                        ;}
 12613                        	.line	3586
 12614                        	.endblock	3586
 12615             0000000A   L477	equ	10
 12616             00000005   L478	equ	5
 12617 06:BA1B:              	ends
 12618                        	efunc
 12619                        	.endfunc	3586,5,10
 12620                        	.line	3586
 12621                        ;
 12622                        ;//***********************************************
                    **************
 12623                        ;
 12624                        ;// Note: pio_drq_block_out() is the primary way p
                    erform PIO
 12625                        ;// Data Out transfers. It will handle 8-bit, 16-b
                    it and 32-bit
 12626                        ;// I/O based data transfers.
 12627                        ;
 12628                        ;static void pio_drq_block_out( unsigned char addr
                    DataReg,
 12629                        ;                        unsigned char * bufAddr,
 12630                        ;                        long wordCnt )
 12631                        ;
 12632                        ;{
 12633                        	.line	3594
 12634                        	.line	3598
 12635                        	FXHDD
 12636                        	func
 12637                        	.function	3598
 12638                        ~~pio_drq_block_out:
 12639                        	longa	on
 12640                        	longi	on
 12641 06:BA1B: 3B           	tsc
 12642 06:BA1C: 38           	sec
 12643 06:BA1D: E9 0A 00     	sbc	#L490
 12644 06:BA20: 1B           	tcs
 12645 06:BA21: 0B           	phd
 12646 06:BA22: 5B           	tcd
 12647             00000004   addrDataReg_0	set	4
 12648             00000006   bufAddr_0	set	6
 12649             0000000A   wordCnt_0	set	10
 12650                        	.block	3598
 12651                        ;
 12652                        ;   // NOTE: wordCnt is the size of a DRQ data blo
                    ck/packet
 12653                        ;   // in words. The maximum value of wordCnt is n
                    ormally:
  Sat Jul 10 2021  1:15                                                Page 240


 12654                        ;   // a) For ATA, 16384 words or 32768 bytes (64 
                    sectors,
 12655                        ;   //    only with READ/WRITE MULTIPLE commands),
 12656                        ;   // b) For ATAPI, 32768 words or 65536 bytes
 12657                        ;   //    (actually 65535 bytes plus a pad byte).
 12658                        ;
 12659                        ;   {
 12660                        	.sym	addrDataReg,4,14,6,8
 12661                        	.sym	bufAddr,6,142,6,32
 12662                        	.sym	wordCnt,10,7,6,32
 12663                        	.line	3607
 12664                        ;      int pxw;
 12665                        ;      long wc;
 12666                        ;
 12667                        ;      // adjust pio_xfer_width - don't use DWORD 
                    if wordCnt is odd.
 12668                        ;
 12669                        ;      pxw = pio_xfer_width;
 12670                        	.block	3613
 12671             00000000   pxw_2	set	0
 12672             00000002   wc_2	set	2
 12673                        	.sym	pxw,0,5,1,16
 12674                        	.sym	wc,2,7,1,32
 12675                        	.line	3613
 12676 06:BA23: AD xx xx     	lda	|~~pio_xfer_width
 12677 06:BA26: 29 FF 00     	and	#$ff
 12678 06:BA29: 85 05        	sta	<L491+pxw_2
 12679                        ;      if ( ( pxw == 32 ) && ( wordCnt & 0x0000000
                    1L ) )
 12680                        	.line	3614
 12681                        ;         pxw = 16;
 12682 06:BA2B: A5 05        	lda	<L491+pxw_2
 12683 06:BA2D: C9 20 00     	cmp	#<$20
 12684 06:BA30: F0 03        	beq	L494
 12685 06:BA32: 82 0F 00     	brl	L10196
 12686                        L494:
 12687 06:BA35: A5 14        	lda	<L490+wordCnt_0
 12688 06:BA37: 29 01 00     	and	#<$1
 12689 06:BA3A: D0 03        	bne	L495
 12690 06:BA3C: 82 05 00     	brl	L10196
 12691                        L495:
 12692                        	.line	3615
 12693 06:BA3F: A9 10 00     	lda	#$10
 12694 06:BA42: 85 05        	sta	<L491+pxw_2
 12695                        ;
 12696                        ;      // Data transfer using OUTS instruction.
 12697                        ;      // Break the transfer into chunks of 32768 
                    or fewer bytes.
 12698                        ;
 12699                        ;      while ( wordCnt > 0 )
 12700                        L10196:
 12701                        	.line	3620
 12702                        L10197:
 12703 06:BA44: 38           	sec
 12704 06:BA45: A9 00 00     	lda	#$0
 12705 06:BA48: E5 14        	sbc	<L490+wordCnt_0
 12706 06:BA4A: A9 00 00     	lda	#$0
 12707 06:BA4D: E5 16        	sbc	<L490+wordCnt_0+2
  Sat Jul 10 2021  1:15                                                Page 241


 12708 06:BA4F: 70 03        	bvs	L496
 12709 06:BA51: 49 00 80     	eor	#$8000
 12710                        L496:
 12711 06:BA54: 10 03        	bpl	L497
 12712 06:BA56: 82 B5 00     	brl	L10198
 12713                        L497:
 12714                        ;      {
 12715                        	.line	3621
 12716                        ;         if ( wordCnt > 16384L )
 12717                        	.line	3622
 12718                        ;            wc = 16384;
 12719 06:BA59: 38           	sec
 12720 06:BA5A: A9 00 40     	lda	#$4000
 12721 06:BA5D: E5 14        	sbc	<L490+wordCnt_0
 12722 06:BA5F: A9 00 00     	lda	#$0
 12723 06:BA62: E5 16        	sbc	<L490+wordCnt_0+2
 12724 06:BA64: 70 03        	bvs	L498
 12725 06:BA66: 49 00 80     	eor	#$8000
 12726                        L498:
 12727 06:BA69: 10 03        	bpl	L499
 12728 06:BA6B: 82 0D 00     	brl	L10199
 12729                        L499:
 12730                        	.line	3623
 12731 06:BA6E: A9 00 40     	lda	#$4000
 12732 06:BA71: 85 07        	sta	<L491+wc_2
 12733 06:BA73: A9 00 00     	lda	#$0
 12734 06:BA76: 85 09        	sta	<L491+wc_2+2
 12735                        ;         else
 12736 06:BA78: 82 08 00     	brl	L10200
 12737                        L10199:
 12738                        ;            wc = wordCnt;
 12739                        	.line	3625
 12740 06:BA7B: A5 14        	lda	<L490+wordCnt_0
 12741 06:BA7D: 85 07        	sta	<L491+wc_2
 12742 06:BA7F: A5 16        	lda	<L490+wordCnt_0+2
 12743 06:BA81: 85 09        	sta	<L491+wc_2+2
 12744                        L10200:
 12745                        ;         if ( pxw == 8 )
 12746                        	.line	3626
 12747                        ;         {
 12748 06:BA83: A5 05        	lda	<L491+pxw_2
 12749 06:BA85: C9 08 00     	cmp	#<$8
 12750 06:BA88: F0 03        	beq	L500
 12751 06:BA8A: 82 1D 00     	brl	L10201
 12752                        L500:
 12753                        	.line	3627
 12754                        ;            // do REP OUTS
 12755                        ;            pio_rep_outbyte( addrDataReg, bufAddr
                    , wc * 2L );
 12756                        	.line	3629
 12757 06:BA8D: A5 07        	lda	<L491+wc_2
 12758 06:BA8F: 85 01        	sta	<R0
 12759 06:BA91: A5 09        	lda	<L491+wc_2+2
 12760 06:BA93: 85 03        	sta	<R0+2
 12761 06:BA95: 06 01        	asl	<R0
 12762 06:BA97: 26 03        	rol	<R0+2
 12763 06:BA99: D4 03        	pei	<R0+2
 12764 06:BA9B: D4 01        	pei	<R0
  Sat Jul 10 2021  1:15                                                Page 242


 12765 06:BA9D: D4 12        	pei	<L490+bufAddr_0+2
 12766 06:BA9F: D4 10        	pei	<L490+bufAddr_0
 12767 06:BAA1: D4 0E        	pei	<L490+addrDataReg_0
 12768 06:BAA3: 22 68 BB 06  	jsl	~~pio_rep_outbyte
 12769                        ;         }
 12770                        	.line	3630
 12771                        ;         else
 12772 06:BAA7: 82 3B 00     	brl	L10202
 12773                        L10201:
 12774                        ;         if ( pxw == 32 )
 12775                        	.line	3632
 12776                        ;         {
 12777 06:BAAA: A5 05        	lda	<L491+pxw_2
 12778 06:BAAC: C9 20 00     	cmp	#<$20
 12779 06:BAAF: F0 03        	beq	L501
 12780 06:BAB1: 82 23 00     	brl	L10203
 12781                        L501:
 12782                        	.line	3633
 12783                        ;            // do REP OUTSD
 12784                        ;            pio_rep_outdword( addrDataReg, bufAdd
                    r, wc / 2L );
 12785                        	.line	3635
 12786 06:BAB4: F4 00 00     	pea	#^$2
 12787 06:BAB7: F4 02 00     	pea	#<$2
 12788 06:BABA: D4 09        	pei	<L491+wc_2+2
 12789 06:BABC: D4 07        	pei	<L491+wc_2
 12790                        	xref	~~~ldiv
 12791 06:BABE: 22 xx xx xx  	jsl	~~~ldiv
 12792 06:BAC2: 85 01        	sta	<R0
 12793 06:BAC4: 86 03        	stx	<R0+2
 12794 06:BAC6: D4 03        	pei	<R0+2
 12795 06:BAC8: D4 01        	pei	<R0
 12796 06:BACA: D4 12        	pei	<L490+bufAddr_0+2
 12797 06:BACC: D4 10        	pei	<L490+bufAddr_0
 12798 06:BACE: D4 0E        	pei	<L490+addrDataReg_0
 12799 06:BAD0: 22 A9 BC 06  	jsl	~~pio_rep_outdword
 12800                        ;         }
 12801                        	.line	3636
 12802                        ;         else
 12803 06:BAD4: 82 0E 00     	brl	L10204
 12804                        L10203:
 12805                        ;         {
 12806                        	.line	3638
 12807                        ;            // do REP OUTSW
 12808                        ;            pio_rep_outword( addrDataReg, bufAddr
                    , wc );
 12809                        	.line	3640
 12810 06:BAD7: D4 09        	pei	<L491+wc_2+2
 12811 06:BAD9: D4 07        	pei	<L491+wc_2
 12812 06:BADB: D4 12        	pei	<L490+bufAddr_0+2
 12813 06:BADD: D4 10        	pei	<L490+bufAddr_0
 12814 06:BADF: D4 0E        	pei	<L490+addrDataReg_0
 12815 06:BAE1: 22 FF BB 06  	jsl	~~pio_rep_outword
 12816                        ;         }
 12817                        	.line	3641
 12818                        L10204:
 12819                        L10202:
 12820                        ;         bufAddr = bufAddr + ( wc * 2 );
  Sat Jul 10 2021  1:15                                                Page 243


 12821                        	.line	3642
 12822 06:BAE5: A5 07        	lda	<L491+wc_2
 12823 06:BAE7: 85 01        	sta	<R0
 12824 06:BAE9: A5 09        	lda	<L491+wc_2+2
 12825 06:BAEB: 85 03        	sta	<R0+2
 12826 06:BAED: 06 01        	asl	<R0
 12827 06:BAEF: 26 03        	rol	<R0+2
 12828 06:BAF1: 18           	clc
 12829 06:BAF2: A5 10        	lda	<L490+bufAddr_0
 12830 06:BAF4: 65 01        	adc	<R0
 12831 06:BAF6: 85 10        	sta	<L490+bufAddr_0
 12832 06:BAF8: A5 12        	lda	<L490+bufAddr_0+2
 12833 06:BAFA: 65 03        	adc	<R0+2
 12834 06:BAFC: 85 12        	sta	<L490+bufAddr_0+2
 12835                        ;         wordCnt = wordCnt - wc;
 12836                        	.line	3643
 12837 06:BAFE: 38           	sec
 12838 06:BAFF: A5 14        	lda	<L490+wordCnt_0
 12839 06:BB01: E5 07        	sbc	<L491+wc_2
 12840 06:BB03: 85 14        	sta	<L490+wordCnt_0
 12841 06:BB05: A5 16        	lda	<L490+wordCnt_0+2
 12842 06:BB07: E5 09        	sbc	<L491+wc_2+2
 12843 06:BB09: 85 16        	sta	<L490+wordCnt_0+2
 12844                        ;      }
 12845                        	.line	3644
 12846 06:BB0B: 82 36 FF     	brl	L10197
 12847                        L10198:
 12848                        ;   }
 12849                        	.endblock	3645
 12850                        	.line	3645
 12851                        ;
 12852                        ;   return;
 12853                        	.line	3647
 12854                        L502:
 12855 06:BB0E: A5 0C        	lda	<L490+2
 12856 06:BB10: 85 16        	sta	<L490+2+10
 12857 06:BB12: A5 0B        	lda	<L490+1
 12858 06:BB14: 85 15        	sta	<L490+1+10
 12859 06:BB16: 2B           	pld
 12860 06:BB17: 3B           	tsc
 12861 06:BB18: 18           	clc
 12862 06:BB19: 69 14 00     	adc	#L490+10
 12863 06:BB1C: 1B           	tcs
 12864 06:BB1D: 6B           	rtl
 12865                        ;}
 12866                        	.line	3648
 12867                        	.endblock	3648
 12868             0000000A   L490	equ	10
 12869             00000005   L491	equ	5
 12870 06:BB1E:              	ends
 12871                        	efunc
 12872                        	.endfunc	3648,5,10
 12873                        	.line	3648
 12874                        ;
 12875                        ;//***********************************************
                    **************
 12876                        ;//
 12877                        ;// These functions transfer PIO DRQ data blocks t
  Sat Jul 10 2021  1:15                                                Page 244


                    hrough the ATA
 12878                        ;// Data register. On an x86 these functions would
                     use the
 12879                        ;// REP INS and REP OUTS instructions.
 12880                        ;//
 12881                        ;// pio_rep_inbyte()
 12882                        ;// pio_rep_outbyte()
 12883                        ;// pio_rep_inword()
 12884                        ;// pio_rep_outword()
 12885                        ;// pio_rep_indword()
 12886                        ;// pio_rep_outdword()
 12887                        ;//
 12888                        ;// These functions can be called directly but usu
                    ally they
 12889                        ;// are called by the pio_drq_block_in() and pio_d
                    rq_block_out()
 12890                        ;// functions to perform I/O mode transfers. See t
                    he
 12891                        ;// pio_xfer_width variable!
 12892                        ;//
 12893                        ;//***********************************************
                    **************
 12894                        ;
 12895                        ;static void pio_rep_inbyte( unsigned char addrDat
                    aReg,
 12896                        ;                     unsigned char * bufAddr,
 12897                        ;                     long byteCnt )
 12898                        ;
 12899                        ;{
 12900                        	.line	3670
 12901                        	.line	3674
 12902                        	FXHDD
 12903                        	func
 12904                        	.function	3674
 12905                        ~~pio_rep_inbyte:
 12906                        	longa	on
 12907                        	longi	on
 12908 06:BB1E: 3B           	tsc
 12909 06:BB1F: 38           	sec
 12910 06:BB20: E9 00 00     	sbc	#L503
 12911 06:BB23: 1B           	tcs
 12912 06:BB24: 0B           	phd
 12913 06:BB25: 5B           	tcd
 12914             00000004   addrDataReg_0	set	4
 12915             00000006   bufAddr_0	set	6
 12916             0000000A   byteCnt_0	set	10
 12917                        	.block	3674
 12918                        ;
 12919                        ;   // Warning: Avoid calling this function with
 12920                        ;   // byteCnt > 32768 (transfers 32768 bytes).
 12921                        ;   // that bufOff is a value between 0 and 15 (0x
                    f).
 12922                        ;
 12923                        ;   //!!! repeat read an 8-bit register (ATA Data 
                    register when
 12924                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 12925                        ;
 12926                        ;   while ( byteCnt > 0 )
  Sat Jul 10 2021  1:15                                                Page 245


 12927                        	.sym	addrDataReg,4,14,6,8
 12928                        	.sym	bufAddr,6,142,6,32
 12929                        	.sym	byteCnt,10,7,6,32
 12930                        	.line	3683
 12931                        L10205:
 12932 06:BB26: 38           	sec
 12933 06:BB27: A9 00 00     	lda	#$0
 12934 06:BB2A: E5 0A        	sbc	<L503+byteCnt_0
 12935 06:BB2C: A9 00 00     	lda	#$0
 12936 06:BB2F: E5 0C        	sbc	<L503+byteCnt_0+2
 12937 06:BB31: 70 03        	bvs	L506
 12938 06:BB33: 49 00 80     	eor	#$8000
 12939                        L506:
 12940 06:BB36: 10 03        	bpl	L507
 12941 06:BB38: 82 1D 00     	brl	L10206
 12942                        L507:
 12943                        ;   {
 12944                        	.line	3684
 12945                        ;      * bufAddr = pio_inbyte( addrDataReg );
 12946                        	.line	3685
 12947 06:BB3B: D4 04        	pei	<L503+addrDataReg_0
 12948 06:BB3D: 22 B1 B7 06  	jsl	~~pio_inbyte
 12949 06:BB41: E2 20        	sep	#$20
 12950                        	longa	off
 12951 06:BB43: 87 06        	sta	[<L503+bufAddr_0]
 12952 06:BB45: C2 20        	rep	#$20
 12953                        	longa	on
 12954                        ;      bufAddr ++ ;
 12955                        	.line	3686
 12956 06:BB47: E6 06        	inc	<L503+bufAddr_0
 12957 06:BB49: D0 02        	bne	L508
 12958 06:BB4B: E6 08        	inc	<L503+bufAddr_0+2
 12959                        L508:
 12960                        ;      byteCnt -- ;
 12961                        	.line	3687
 12962 06:BB4D: A5 0A        	lda	<L503+byteCnt_0
 12963 06:BB4F: D0 02        	bne	L509
 12964 06:BB51: C6 0C        	dec	<L503+byteCnt_0+2
 12965                        L509:
 12966 06:BB53: C6 0A        	dec	<L503+byteCnt_0
 12967                        ;   }
 12968                        	.line	3688
 12969 06:BB55: 82 CE FF     	brl	L10205
 12970                        L10206:
 12971                        ;}
 12972                        	.line	3689
 12973                        L510:
 12974 06:BB58: A5 02        	lda	<L503+2
 12975 06:BB5A: 85 0C        	sta	<L503+2+10
 12976 06:BB5C: A5 01        	lda	<L503+1
 12977 06:BB5E: 85 0B        	sta	<L503+1+10
 12978 06:BB60: 2B           	pld
 12979 06:BB61: 3B           	tsc
 12980 06:BB62: 18           	clc
 12981 06:BB63: 69 0A 00     	adc	#L503+10
 12982 06:BB66: 1B           	tcs
 12983 06:BB67: 6B           	rtl
 12984                        	.endblock	3689
  Sat Jul 10 2021  1:15                                                Page 246


 12985             00000000   L503	equ	0
 12986             00000001   L504	equ	1
 12987 06:BB68:              	ends
 12988                        	efunc
 12989                        	.endfunc	3689,1,0
 12990                        	.line	3689
 12991                        ;
 12992                        ;//***********************************************
                    **************
 12993                        ;
 12994                        ;static void pio_rep_outbyte( unsigned char addrDa
                    taReg,
 12995                        ;                      unsigned char * bufAddr,
 12996                        ;                      long byteCnt )
 12997                        ;
 12998                        ;{
 12999                        	.line	3693
 13000                        	.line	3697
 13001                        	FXHDD
 13002                        	func
 13003                        	.function	3697
 13004                        ~~pio_rep_outbyte:
 13005                        	longa	on
 13006                        	longi	on
 13007 06:BB68: 3B           	tsc
 13008 06:BB69: 38           	sec
 13009 06:BB6A: E9 00 00     	sbc	#L511
 13010 06:BB6D: 1B           	tcs
 13011 06:BB6E: 0B           	phd
 13012 06:BB6F: 5B           	tcd
 13013             00000004   addrDataReg_0	set	4
 13014             00000006   bufAddr_0	set	6
 13015             0000000A   byteCnt_0	set	10
 13016                        	.block	3697
 13017                        ;
 13018                        ;   // Warning: Avoid calling this function with
 13019                        ;   // byteCnt > 32768 (transfers 32768 bytes).
 13020                        ;   // that bufOff is a value between 0 and 15 (0x
                    f).
 13021                        ;
 13022                        ;   //!!! repeat write an 8-bit register (ATA Data
                     register when
 13023                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13024                        ;
 13025                        ;   while ( byteCnt > 0 )
 13026                        	.sym	addrDataReg,4,14,6,8
 13027                        	.sym	bufAddr,6,142,6,32
 13028                        	.sym	byteCnt,10,7,6,32
 13029                        	.line	3706
 13030                        L10207:
 13031 06:BB70: 38           	sec
 13032 06:BB71: A9 00 00     	lda	#$0
 13033 06:BB74: E5 0A        	sbc	<L511+byteCnt_0
 13034 06:BB76: A9 00 00     	lda	#$0
 13035 06:BB79: E5 0C        	sbc	<L511+byteCnt_0+2
 13036 06:BB7B: 70 03        	bvs	L514
 13037 06:BB7D: 49 00 80     	eor	#$8000
 13038                        L514:
  Sat Jul 10 2021  1:15                                                Page 247


 13039 06:BB80: 10 03        	bpl	L515
 13040 06:BB82: 82 1E 00     	brl	L10208
 13041                        L515:
 13042                        ;   {
 13043                        	.line	3707
 13044                        ;      pio_outbyte( addrDataReg, * bufAddr );
 13045                        	.line	3708
 13046 06:BB85: A7 06        	lda	[<L511+bufAddr_0]
 13047 06:BB87: 48           	pha
 13048 06:BB88: A5 04        	lda	<L511+addrDataReg_0
 13049 06:BB8A: 29 FF 00     	and	#$ff
 13050 06:BB8D: 48           	pha
 13051 06:BB8E: 22 F0 B7 06  	jsl	~~pio_outbyte
 13052                        ;      bufAddr ++ ;
 13053                        	.line	3709
 13054 06:BB92: E6 06        	inc	<L511+bufAddr_0
 13055 06:BB94: D0 02        	bne	L516
 13056 06:BB96: E6 08        	inc	<L511+bufAddr_0+2
 13057                        L516:
 13058                        ;      byteCnt -- ;
 13059                        	.line	3710
 13060 06:BB98: A5 0A        	lda	<L511+byteCnt_0
 13061 06:BB9A: D0 02        	bne	L517
 13062 06:BB9C: C6 0C        	dec	<L511+byteCnt_0+2
 13063                        L517:
 13064 06:BB9E: C6 0A        	dec	<L511+byteCnt_0
 13065                        ;   }
 13066                        	.line	3711
 13067 06:BBA0: 82 CD FF     	brl	L10207
 13068                        L10208:
 13069                        ;}
 13070                        	.line	3712
 13071                        L518:
 13072 06:BBA3: A5 02        	lda	<L511+2
 13073 06:BBA5: 85 0C        	sta	<L511+2+10
 13074 06:BBA7: A5 01        	lda	<L511+1
 13075 06:BBA9: 85 0B        	sta	<L511+1+10
 13076 06:BBAB: 2B           	pld
 13077 06:BBAC: 3B           	tsc
 13078 06:BBAD: 18           	clc
 13079 06:BBAE: 69 0A 00     	adc	#L511+10
 13080 06:BBB1: 1B           	tcs
 13081 06:BBB2: 6B           	rtl
 13082                        	.endblock	3712
 13083             00000000   L511	equ	0
 13084             00000001   L512	equ	1
 13085 06:BBB3:              	ends
 13086                        	efunc
 13087                        	.endfunc	3712,1,0
 13088                        	.line	3712
 13089                        ;
 13090                        ;//***********************************************
                    **************
 13091                        ;
 13092                        ;static void pio_rep_inword( unsigned char addrDat
                    aReg,
 13093                        ;                     unsigned char * bufAddr,
 13094                        ;                     long wordCnt )
  Sat Jul 10 2021  1:15                                                Page 248


 13095                        ;
 13096                        ;{
 13097                        	.line	3716
 13098                        	.line	3720
 13099                        	FXHDD
 13100                        	func
 13101                        	.function	3720
 13102                        ~~pio_rep_inword:
 13103                        	longa	on
 13104                        	longi	on
 13105 06:BBB3: 3B           	tsc
 13106 06:BBB4: 38           	sec
 13107 06:BBB5: E9 00 00     	sbc	#L519
 13108 06:BBB8: 1B           	tcs
 13109 06:BBB9: 0B           	phd
 13110 06:BBBA: 5B           	tcd
 13111             00000004   addrDataReg_0	set	4
 13112             00000006   bufAddr_0	set	6
 13113             0000000A   wordCnt_0	set	10
 13114                        	.block	3720
 13115                        ;
 13116                        ;   // Warning: Avoid calling this function with
 13117                        ;   // wordCnt > 16384 (transfers 32768 bytes).
 13118                        ;
 13119                        ;   //!!! repeat read a 16-bit register (ATA Data 
                    register when
 13120                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13121                        ;
 13122                        ;   while ( wordCnt > 0 )
 13123                        	.sym	addrDataReg,4,14,6,8
 13124                        	.sym	bufAddr,6,142,6,32
 13125                        	.sym	wordCnt,10,7,6,32
 13126                        	.line	3728
 13127                        L10209:
 13128 06:BBBB: 38           	sec
 13129 06:BBBC: A9 00 00     	lda	#$0
 13130 06:BBBF: E5 0A        	sbc	<L519+wordCnt_0
 13131 06:BBC1: A9 00 00     	lda	#$0
 13132 06:BBC4: E5 0C        	sbc	<L519+wordCnt_0+2
 13133 06:BBC6: 70 03        	bvs	L522
 13134 06:BBC8: 49 00 80     	eor	#$8000
 13135                        L522:
 13136 06:BBCB: 10 03        	bpl	L523
 13137 06:BBCD: 82 1F 00     	brl	L10210
 13138                        L523:
 13139                        ;   {
 13140                        	.line	3729
 13141                        ;      * (unsigned int *) bufAddr = pio_inword( ad
                    drDataReg );
 13142                        	.line	3730
 13143 06:BBD0: D4 04        	pei	<L519+addrDataReg_0
 13144 06:BBD2: 22 29 B8 06  	jsl	~~pio_inword
 13145 06:BBD6: 87 06        	sta	[<L519+bufAddr_0]
 13146                        ;      bufAddr += 2;
 13147                        	.line	3731
 13148 06:BBD8: 18           	clc
 13149 06:BBD9: A9 02 00     	lda	#$2
 13150 06:BBDC: 65 06        	adc	<L519+bufAddr_0
  Sat Jul 10 2021  1:15                                                Page 249


 13151 06:BBDE: 85 06        	sta	<L519+bufAddr_0
 13152 06:BBE0: 90 02        	bcc	L524
 13153 06:BBE2: E6 08        	inc	<L519+bufAddr_0+2
 13154                        L524:
 13155                        ;      wordCnt -- ;
 13156                        	.line	3732
 13157 06:BBE4: A5 0A        	lda	<L519+wordCnt_0
 13158 06:BBE6: D0 02        	bne	L525
 13159 06:BBE8: C6 0C        	dec	<L519+wordCnt_0+2
 13160                        L525:
 13161 06:BBEA: C6 0A        	dec	<L519+wordCnt_0
 13162                        ;   }
 13163                        	.line	3733
 13164 06:BBEC: 82 CC FF     	brl	L10209
 13165                        L10210:
 13166                        ;}
 13167                        	.line	3734
 13168                        L526:
 13169 06:BBEF: A5 02        	lda	<L519+2
 13170 06:BBF1: 85 0C        	sta	<L519+2+10
 13171 06:BBF3: A5 01        	lda	<L519+1
 13172 06:BBF5: 85 0B        	sta	<L519+1+10
 13173 06:BBF7: 2B           	pld
 13174 06:BBF8: 3B           	tsc
 13175 06:BBF9: 18           	clc
 13176 06:BBFA: 69 0A 00     	adc	#L519+10
 13177 06:BBFD: 1B           	tcs
 13178 06:BBFE: 6B           	rtl
 13179                        	.endblock	3734
 13180             00000000   L519	equ	0
 13181             00000001   L520	equ	1
 13182 06:BBFF:              	ends
 13183                        	efunc
 13184                        	.endfunc	3734,1,0
 13185                        	.line	3734
 13186                        ;
 13187                        ;//***********************************************
                    **************
 13188                        ;
 13189                        ;static void pio_rep_outword( unsigned char addrDa
                    taReg,
 13190                        ;                      unsigned char * bufAddr,
 13191                        ;                      long wordCnt )
 13192                        ;
 13193                        ;{
 13194                        	.line	3738
 13195                        	.line	3742
 13196                        	FXHDD
 13197                        	func
 13198                        	.function	3742
 13199                        ~~pio_rep_outword:
 13200                        	longa	on
 13201                        	longi	on
 13202 06:BBFF: 3B           	tsc
 13203 06:BC00: 38           	sec
 13204 06:BC01: E9 00 00     	sbc	#L527
 13205 06:BC04: 1B           	tcs
 13206 06:BC05: 0B           	phd
  Sat Jul 10 2021  1:15                                                Page 250


 13207 06:BC06: 5B           	tcd
 13208             00000004   addrDataReg_0	set	4
 13209             00000006   bufAddr_0	set	6
 13210             0000000A   wordCnt_0	set	10
 13211                        	.block	3742
 13212                        ;
 13213                        ;   // Warning: Avoid calling this function with
 13214                        ;   // wordCnt > 16384 (transfers 32768 bytes).
 13215                        ;
 13216                        ;   //!!! repeat write a 16-bit register (ATA Data
                     register when
 13217                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13218                        ;
 13219                        ;   while ( wordCnt > 0 )
 13220                        	.sym	addrDataReg,4,14,6,8
 13221                        	.sym	bufAddr,6,142,6,32
 13222                        	.sym	wordCnt,10,7,6,32
 13223                        	.line	3750
 13224                        L10211:
 13225 06:BC07: 38           	sec
 13226 06:BC08: A9 00 00     	lda	#$0
 13227 06:BC0B: E5 0A        	sbc	<L527+wordCnt_0
 13228 06:BC0D: A9 00 00     	lda	#$0
 13229 06:BC10: E5 0C        	sbc	<L527+wordCnt_0+2
 13230 06:BC12: 70 03        	bvs	L530
 13231 06:BC14: 49 00 80     	eor	#$8000
 13232                        L530:
 13233 06:BC17: 10 03        	bpl	L531
 13234 06:BC19: 82 24 00     	brl	L10212
 13235                        L531:
 13236                        ;   {
 13237                        	.line	3751
 13238                        ;      pio_outword( addrDataReg, * (unsigned int *
                    ) bufAddr );
 13239                        	.line	3752
 13240 06:BC1C: A7 06        	lda	[<L527+bufAddr_0]
 13241 06:BC1E: 48           	pha
 13242 06:BC1F: A5 04        	lda	<L527+addrDataReg_0
 13243 06:BC21: 29 FF 00     	and	#$ff
 13244 06:BC24: 48           	pha
 13245 06:BC25: 22 65 B8 06  	jsl	~~pio_outword
 13246                        ;      bufAddr += 2;
 13247                        	.line	3753
 13248 06:BC29: 18           	clc
 13249 06:BC2A: A9 02 00     	lda	#$2
 13250 06:BC2D: 65 06        	adc	<L527+bufAddr_0
 13251 06:BC2F: 85 06        	sta	<L527+bufAddr_0
 13252 06:BC31: 90 02        	bcc	L532
 13253 06:BC33: E6 08        	inc	<L527+bufAddr_0+2
 13254                        L532:
 13255                        ;      wordCnt -- ;
 13256                        	.line	3754
 13257 06:BC35: A5 0A        	lda	<L527+wordCnt_0
 13258 06:BC37: D0 02        	bne	L533
 13259 06:BC39: C6 0C        	dec	<L527+wordCnt_0+2
 13260                        L533:
 13261 06:BC3B: C6 0A        	dec	<L527+wordCnt_0
 13262                        ;   }
  Sat Jul 10 2021  1:15                                                Page 251


 13263                        	.line	3755
 13264 06:BC3D: 82 C7 FF     	brl	L10211
 13265                        L10212:
 13266                        ;}
 13267                        	.line	3756
 13268                        L534:
 13269 06:BC40: A5 02        	lda	<L527+2
 13270 06:BC42: 85 0C        	sta	<L527+2+10
 13271 06:BC44: A5 01        	lda	<L527+1
 13272 06:BC46: 85 0B        	sta	<L527+1+10
 13273 06:BC48: 2B           	pld
 13274 06:BC49: 3B           	tsc
 13275 06:BC4A: 18           	clc
 13276 06:BC4B: 69 0A 00     	adc	#L527+10
 13277 06:BC4E: 1B           	tcs
 13278 06:BC4F: 6B           	rtl
 13279                        	.endblock	3756
 13280             00000000   L527	equ	0
 13281             00000001   L528	equ	1
 13282 06:BC50:              	ends
 13283                        	efunc
 13284                        	.endfunc	3756,1,0
 13285                        	.line	3756
 13286                        ;
 13287                        ;//***********************************************
                    **************
 13288                        ;
 13289                        ;static void pio_rep_indword( unsigned char addrDa
                    taReg,
 13290                        ;                      unsigned char * bufAddr,
 13291                        ;                      long dwordCnt )
 13292                        ;
 13293                        ;{
 13294                        	.line	3760
 13295                        	.line	3764
 13296                        	FXHDD
 13297                        	func
 13298                        	.function	3764
 13299                        ~~pio_rep_indword:
 13300                        	longa	on
 13301                        	longi	on
 13302 06:BC50: 3B           	tsc
 13303 06:BC51: 38           	sec
 13304 06:BC52: E9 04 00     	sbc	#L535
 13305 06:BC55: 1B           	tcs
 13306 06:BC56: 0B           	phd
 13307 06:BC57: 5B           	tcd
 13308             00000004   addrDataReg_0	set	4
 13309             00000006   bufAddr_0	set	6
 13310             0000000A   dwordCnt_0	set	10
 13311                        	.block	3764
 13312                        ;
 13313                        ;   // Warning: Avoid calling this function with
 13314                        ;   // dwordCnt > 8192 (transfers 32768 bytes).
 13315                        ;
 13316                        ;   //!!! repeat read a 32-bit register (ATA Data 
                    register when
 13317                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
  Sat Jul 10 2021  1:15                                                Page 252


 13318                        ;
 13319                        ;   while ( dwordCnt > 0 )
 13320                        	.sym	addrDataReg,4,14,6,8
 13321                        	.sym	bufAddr,6,142,6,32
 13322                        	.sym	dwordCnt,10,7,6,32
 13323                        	.line	3772
 13324                        L10213:
 13325 06:BC58: 38           	sec
 13326 06:BC59: A9 00 00     	lda	#$0
 13327 06:BC5C: E5 0E        	sbc	<L535+dwordCnt_0
 13328 06:BC5E: A9 00 00     	lda	#$0
 13329 06:BC61: E5 10        	sbc	<L535+dwordCnt_0+2
 13330 06:BC63: 70 03        	bvs	L538
 13331 06:BC65: 49 00 80     	eor	#$8000
 13332                        L538:
 13333 06:BC68: 10 03        	bpl	L539
 13334 06:BC6A: 82 2C 00     	brl	L10214
 13335                        L539:
 13336                        ;   {
 13337                        	.line	3773
 13338                        ;      * (unsigned long *) bufAddr = pio_indword( 
                    addrDataReg );
 13339                        	.line	3774
 13340 06:BC6D: D4 08        	pei	<L535+addrDataReg_0
 13341 06:BC6F: 22 9A B8 06  	jsl	~~pio_indword
 13342 06:BC73: 85 01        	sta	<R0
 13343 06:BC75: 86 03        	stx	<R0+2
 13344 06:BC77: A5 01        	lda	<R0
 13345 06:BC79: 87 0A        	sta	[<L535+bufAddr_0]
 13346 06:BC7B: A5 03        	lda	<R0+2
 13347 06:BC7D: A0 02 00     	ldy	#$2
 13348 06:BC80: 97 0A        	sta	[<L535+bufAddr_0],Y
 13349                        ;      bufAddr += 4;
 13350                        	.line	3775
 13351 06:BC82: 18           	clc
 13352 06:BC83: A9 04 00     	lda	#$4
 13353 06:BC86: 65 0A        	adc	<L535+bufAddr_0
 13354 06:BC88: 85 0A        	sta	<L535+bufAddr_0
 13355 06:BC8A: 90 02        	bcc	L540
 13356 06:BC8C: E6 0C        	inc	<L535+bufAddr_0+2
 13357                        L540:
 13358                        ;      dwordCnt -- ;
 13359                        	.line	3776
 13360 06:BC8E: A5 0E        	lda	<L535+dwordCnt_0
 13361 06:BC90: D0 02        	bne	L541
 13362 06:BC92: C6 10        	dec	<L535+dwordCnt_0+2
 13363                        L541:
 13364 06:BC94: C6 0E        	dec	<L535+dwordCnt_0
 13365                        ;   }
 13366                        	.line	3777
 13367 06:BC96: 82 BF FF     	brl	L10213
 13368                        L10214:
 13369                        ;}
 13370                        	.line	3778
 13371                        L542:
 13372 06:BC99: A5 06        	lda	<L535+2
 13373 06:BC9B: 85 10        	sta	<L535+2+10
 13374 06:BC9D: A5 05        	lda	<L535+1
  Sat Jul 10 2021  1:15                                                Page 253


 13375 06:BC9F: 85 0F        	sta	<L535+1+10
 13376 06:BCA1: 2B           	pld
 13377 06:BCA2: 3B           	tsc
 13378 06:BCA3: 18           	clc
 13379 06:BCA4: 69 0E 00     	adc	#L535+10
 13380 06:BCA7: 1B           	tcs
 13381 06:BCA8: 6B           	rtl
 13382                        	.endblock	3778
 13383             00000004   L535	equ	4
 13384             00000005   L536	equ	5
 13385 06:BCA9:              	ends
 13386                        	efunc
 13387                        	.endfunc	3778,5,4
 13388                        	.line	3778
 13389                        ;
 13390                        ;//***********************************************
                    **************
 13391                        ;
 13392                        ;static void pio_rep_outdword( unsigned char addrD
                    ataReg,
 13393                        ;                       unsigned char * bufAddr,
 13394                        ;                       long dwordCnt )
 13395                        ;
 13396                        ;{
 13397                        	.line	3782
 13398                        	.line	3786
 13399                        	FXHDD
 13400                        	func
 13401                        	.function	3786
 13402                        ~~pio_rep_outdword:
 13403                        	longa	on
 13404                        	longi	on
 13405 06:BCA9: 3B           	tsc
 13406 06:BCAA: 38           	sec
 13407 06:BCAB: E9 00 00     	sbc	#L543
 13408 06:BCAE: 1B           	tcs
 13409 06:BCAF: 0B           	phd
 13410 06:BCB0: 5B           	tcd
 13411             00000004   addrDataReg_0	set	4
 13412             00000006   bufAddr_0	set	6
 13413             0000000A   dwordCnt_0	set	10
 13414                        	.block	3786
 13415                        ;
 13416                        ;   // Warning: Avoid calling this function with
 13417                        ;   // dwordCnt > 8192 (transfers 32768 bytes).
 13418                        ;
 13419                        ;   //!!! repeat write a 32-bit register (ATA Data
                     register when
 13420                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13421                        ;
 13422                        ;   while ( dwordCnt > 0 )
 13423                        	.sym	addrDataReg,4,14,6,8
 13424                        	.sym	bufAddr,6,142,6,32
 13425                        	.sym	dwordCnt,10,7,6,32
 13426                        	.line	3794
 13427                        L10215:
 13428 06:BCB1: 38           	sec
 13429 06:BCB2: A9 00 00     	lda	#$0
  Sat Jul 10 2021  1:15                                                Page 254


 13430 06:BCB5: E5 0A        	sbc	<L543+dwordCnt_0
 13431 06:BCB7: A9 00 00     	lda	#$0
 13432 06:BCBA: E5 0C        	sbc	<L543+dwordCnt_0+2
 13433 06:BCBC: 70 03        	bvs	L546
 13434 06:BCBE: 49 00 80     	eor	#$8000
 13435                        L546:
 13436 06:BCC1: 10 03        	bpl	L547
 13437 06:BCC3: 82 2A 00     	brl	L10216
 13438                        L547:
 13439                        ;   {
 13440                        	.line	3795
 13441                        ;      pio_outdword( addrDataReg, * (unsigned long
                     *) bufAddr );
 13442                        	.line	3796
 13443 06:BCC6: A0 02 00     	ldy	#$2
 13444 06:BCC9: B7 06        	lda	[<L543+bufAddr_0],Y
 13445 06:BCCB: 48           	pha
 13446 06:BCCC: A7 06        	lda	[<L543+bufAddr_0]
 13447 06:BCCE: 48           	pha
 13448 06:BCCF: A5 04        	lda	<L543+addrDataReg_0
 13449 06:BCD1: 29 FF 00     	and	#$ff
 13450 06:BCD4: 48           	pha
 13451 06:BCD5: 22 DC B8 06  	jsl	~~pio_outdword
 13452                        ;      bufAddr += 4;
 13453                        	.line	3797
 13454 06:BCD9: 18           	clc
 13455 06:BCDA: A9 04 00     	lda	#$4
 13456 06:BCDD: 65 06        	adc	<L543+bufAddr_0
 13457 06:BCDF: 85 06        	sta	<L543+bufAddr_0
 13458 06:BCE1: 90 02        	bcc	L548
 13459 06:BCE3: E6 08        	inc	<L543+bufAddr_0+2
 13460                        L548:
 13461                        ;      dwordCnt -- ;
 13462                        	.line	3798
 13463 06:BCE5: A5 0A        	lda	<L543+dwordCnt_0
 13464 06:BCE7: D0 02        	bne	L549
 13465 06:BCE9: C6 0C        	dec	<L543+dwordCnt_0+2
 13466                        L549:
 13467 06:BCEB: C6 0A        	dec	<L543+dwordCnt_0
 13468                        ;   }
 13469                        	.line	3799
 13470 06:BCED: 82 C1 FF     	brl	L10215
 13471                        L10216:
 13472                        ;}
 13473                        	.line	3800
 13474                        L550:
 13475 06:BCF0: A5 02        	lda	<L543+2
 13476 06:BCF2: 85 0C        	sta	<L543+2+10
 13477 06:BCF4: A5 01        	lda	<L543+1
 13478 06:BCF6: 85 0B        	sta	<L543+1+10
 13479 06:BCF8: 2B           	pld
 13480 06:BCF9: 3B           	tsc
 13481 06:BCFA: 18           	clc
 13482 06:BCFB: 69 0A 00     	adc	#L543+10
 13483 06:BCFE: 1B           	tcs
 13484 06:BCFF: 6B           	rtl
 13485                        	.endblock	3800
 13486             00000000   L543	equ	0
  Sat Jul 10 2021  1:15                                                Page 255


 13487             00000001   L544	equ	1
 13488 06:BD00:              	ends
 13489                        	efunc
 13490                        	.endfunc	3800,1,0
 13491                        	.line	3800
 13492                        ;
 13493                        ;
 13494                        ;//***********************************************
                    **************
 13495                        ;//
 13496                        ;// Command timing functions
 13497                        ;//
 13498                        ;//***********************************************
                    ***************
 13499                        ;
 13500                        ;
 13501                        ;static long tmr_cmd_start_time;      // command s
                    tart time - see the
 13502                        ;                              // tmr_set_timeout(
                    ) and
 13503                        ;                              // tmr_chk_timeout(
                    ) functions.
 13504                        ;
 13505                        ;//***********************************************
                    **************
 13506                        ;//
 13507                        ;// tmr_set_timeout() - get the command start time
 13508                        ;//
 13509                        ;//***********************************************
                    ***************
 13510                        ;
 13511                        ;static void tmr_set_timeout( void )
 13512                        ;
 13513                        ;{
 13514                        	.line	3820
 13515                        	.line	3822
 13516                        	FXHDD
 13517                        	func
 13518                        	.function	3822
 13519                        ~~tmr_set_timeout:
 13520                        	longa	on
 13521                        	longi	on
 13522 06:BD00: 3B           	tsc
 13523 06:BD01: 38           	sec
 13524 06:BD02: E9 00 00     	sbc	#L551
 13525 06:BD05: 1B           	tcs
 13526 06:BD06: 0B           	phd
 13527 06:BD07: 5B           	tcd
 13528                        	.block	3822
 13529                        ;	k_debug_long("tmr_set_timeout:",tmr_cmd_start_ti
                    me);
 13530                        	.line	3823
 13531 06:BD08: AD xx xx     	lda	|~~tmr_cmd_start_time+2
 13532 06:BD0B: 48           	pha
 13533 06:BD0C: AD xx xx     	lda	|~~tmr_cmd_start_time
 13534 06:BD0F: 48           	pha
 13535 06:BD10: F4 xx xx     	pea	#^L407
 13536 06:BD13: F4 xx xx     	pea	#<L407
  Sat Jul 10 2021  1:15                                                Page 256


 13537 06:BD16: 22 xx xx xx  	jsl	~~k_debug_long
 13538                        ;   // get the command start time
 13539                        ;   tmr_cmd_start_time = 0L;// k_get_systemtimer()
                    ;
 13540                        	.line	3825
 13541 06:BD1A: 9C xx xx     	stz	|~~tmr_cmd_start_time
 13542 06:BD1D: 9C xx xx     	stz	|~~tmr_cmd_start_time+2
 13543                        ;}
 13544                        	.line	3826
 13545                        L554:
 13546 06:BD20: 2B           	pld
 13547 06:BD21: 3B           	tsc
 13548 06:BD22: 18           	clc
 13549 06:BD23: 69 00 00     	adc	#L551
 13550 06:BD26: 1B           	tcs
 13551 06:BD27: 6B           	rtl
 13552                        	.endblock	3826
 13553             00000000   L551	equ	0
 13554             00000001   L552	equ	1
 13555 06:BD28:              	ends
 13556                        	efunc
 13557                        	.endfunc	3826,1,0
 13558                        	.line	3826
 13559                        	data
 13560                        L407:
 13561 00:0449: 74 6D 72 5F  	db	$74,$6D,$72,$5F,$73,$65,$74,$5F,$74,$69,
                    $6D,$65,$6F,$75,$74
       00:044D: 73 65 74 5F 
       00:0451: 74 69 6D 65 
       00:0455: 6F 75 74 
 13562 00:0458: 3A 00        	db	$3A,$00
 13563 00:045A:              	ends
 13564                        ;
 13565                        ;//***********************************************
                    **************
 13566                        ;//
 13567                        ;// tmr_chk_timeout() - check for command timeout.
 13568                        ;//
 13569                        ;// Gives non-zero return if command has timed out
                    .
 13570                        ;//
 13571                        ;//***********************************************
                    ***************
 13572                        ;
 13573                        ;static int tmr_chk_timeout( void )
 13574                        ;
 13575                        ;{
 13576                        	.line	3836
 13577                        	.line	3838
 13578                        	FXHDD
 13579                        	func
 13580                        	.function	3838
 13581                        ~~tmr_chk_timeout:
 13582                        	longa	on
 13583                        	longi	on
 13584 06:BD28: 3B           	tsc
 13585 06:BD29: 38           	sec
 13586 06:BD2A: E9 08 00     	sbc	#L556
  Sat Jul 10 2021  1:15                                                Page 257


 13587 06:BD2D: 1B           	tcs
 13588 06:BD2E: 0B           	phd
 13589 06:BD2F: 5B           	tcd
 13590                        	.block	3838
 13591                        ;   long curTime;
 13592                        ;
 13593                        ;   // get current time
 13594                        ;   curTime++; //= k_get_systemtimer();
 13595             00000000   curTime_1	set	0
 13596                        	.sym	curTime,0,7,1,32
 13597                        	.line	3842
 13598 06:BD30: E6 05        	inc	<L557+curTime_1
 13599 06:BD32: D0 02        	bne	L559
 13600 06:BD34: E6 07        	inc	<L557+curTime_1+2
 13601                        L559:
 13602                        ;
 13603                        ;   k_debug_long("reg_reset:tmr_cmd_start_time:",t
                    mr_cmd_start_time);
 13604                        	.line	3844
 13605 06:BD36: AD xx xx     	lda	|~~tmr_cmd_start_time+2
 13606 06:BD39: 48           	pha
 13607 06:BD3A: AD xx xx     	lda	|~~tmr_cmd_start_time
 13608 06:BD3D: 48           	pha
 13609 06:BD3E: F4 xx xx     	pea	#^L555
 13610 06:BD41: F4 xx xx     	pea	#<L555
 13611 06:BD44: 22 xx xx xx  	jsl	~~k_debug_long
 13612                        ;   k_debug_long("reg_reset:tmr_chk_timeout:",curT
                    ime);
 13613                        	.line	3845
 13614 06:BD48: D4 07        	pei	<L557+curTime_1+2
 13615 06:BD4A: D4 05        	pei	<L557+curTime_1
 13616 06:BD4C: F4 xx xx     	pea	#^L555+30
 13617 06:BD4F: F4 xx xx     	pea	#<L555+30
 13618 06:BD52: 22 xx xx xx  	jsl	~~k_debug_long
 13619                        ;
 13620                        ;   // timed out yet ?
 13621                        ;   if ( curTime >= ( tmr_cmd_start_time + ( TMR_T
                    IME_OUT * SYSTEM_TIMER_TICKS_PER_SECOND ) ) )
 13622                        	.line	3848
 13623                        ;      return 1;      // yes
 13624 06:BD56: 18           	clc
 13625 06:BD57: A9 64 00     	lda	#$64
 13626 06:BD5A: 6D xx xx     	adc	|~~tmr_cmd_start_time
 13627 06:BD5D: 85 01        	sta	<R0
 13628 06:BD5F: A9 00 00     	lda	#$0
 13629 06:BD62: 6D xx xx     	adc	|~~tmr_cmd_start_time+2
 13630 06:BD65: 85 03        	sta	<R0+2
 13631 06:BD67: 38           	sec
 13632 06:BD68: A5 05        	lda	<L557+curTime_1
 13633 06:BD6A: E5 01        	sbc	<R0
 13634 06:BD6C: A5 07        	lda	<L557+curTime_1+2
 13635 06:BD6E: E5 03        	sbc	<R0+2
 13636 06:BD70: 70 03        	bvs	L560
 13637 06:BD72: 49 00 80     	eor	#$8000
 13638                        L560:
 13639 06:BD75: 30 03        	bmi	L561
 13640 06:BD77: 82 0D 00     	brl	L10217
 13641                        L561:
  Sat Jul 10 2021  1:15                                                Page 258


 13642                        	.line	3849
 13643 06:BD7A: A9 01 00     	lda	#$1
 13644                        L562:
 13645 06:BD7D: A8           	tay
 13646 06:BD7E: 2B           	pld
 13647 06:BD7F: 3B           	tsc
 13648 06:BD80: 18           	clc
 13649 06:BD81: 69 08 00     	adc	#L556
 13650 06:BD84: 1B           	tcs
 13651 06:BD85: 98           	tya
 13652 06:BD86: 6B           	rtl
 13653                        ;
 13654                        ;   // no timeout yet
 13655                        ;   return 0;
 13656                        L10217:
 13657                        	.line	3852
 13658 06:BD87: A9 00 00     	lda	#$0
 13659 06:BD8A: 82 F0 FF     	brl	L562
 13660                        ;}
 13661                        	.line	3853
 13662                        	.endblock	3853
 13663             00000008   L556	equ	8
 13664             00000005   L557	equ	5
 13665 06:BD8D:              	ends
 13666                        	efunc
 13667                        	.endfunc	3853,5,8
 13668                        	.line	3853
 13669                        	data
 13670                        L555:
 13671 00:045A: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
                    $74,$6D,$72,$5F,$63
       00:045E: 72 65 73 65 
       00:0462: 74 3A 74 6D 
       00:0466: 72 5F 63 
 13672 00:0469: 6D 64 5F 73  	db	$6D,$64,$5F,$73,$74,$61,$72,$74,$5F,$74,
                    $69,$6D,$65,$3A,$00
       00:046D: 74 61 72 74 
       00:0471: 5F 74 69 6D 
       00:0475: 65 3A 00 
 13673 00:0478: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
                    $74,$6D,$72,$5F,$63
       00:047C: 72 65 73 65 
       00:0480: 74 3A 74 6D 
       00:0484: 72 5F 63 
 13674 00:0487: 68 6B 5F 74  	db	$68,$6B,$5F,$74,$69,$6D,$65,$6F,$75,$74,
                    $3A,$00
       00:048B: 69 6D 65 6F 
       00:048F: 75 74 3A 00 
 13675 00:0493:              	ends
 13676                        ;
 13677                        ;
 13678                        ;int SYSTEM_WAIT_INTR_OR_TIMEOUT( void )
 13679                        ;{
 13680                        	.line	3856
 13681                        	.line	3857
 13682                        	FXHDD
 13683                        	xdef	~~SYSTEM_WAIT_INTR_OR_TIMEOUT
 13684                        	func
  Sat Jul 10 2021  1:15                                                Page 259


 13685                        	.function	3857
 13686                        ~~SYSTEM_WAIT_INTR_OR_TIMEOUT:
 13687                        	longa	on
 13688                        	longi	on
 13689 06:BD8D: 3B           	tsc
 13690 06:BD8E: 38           	sec
 13691 06:BD8F: E9 00 00     	sbc	#L564
 13692 06:BD92: 1B           	tcs
 13693 06:BD93: 0B           	phd
 13694 06:BD94: 5B           	tcd
 13695                        	.block	3857
 13696                        ;#asm
 13697                        	.line	3858
 13698                        ;	NOP
 13699                        ;	NOP
 13700                        ;	NOP
 13701                        ;	NOP
 13702                        ;	NOP
 13703                        ;	NOP
 13704                        ;	NOP
 13705                        ;	NOP
 13706                        ;	NOP
 13707                        ;	NOP
 13708                        ;#endasm
 13709                        	asmstart
 13710 06:BD95: EA           	NOP
 13711 06:BD96: EA           	NOP
 13712 06:BD97: EA           	NOP
 13713 06:BD98: EA           	NOP
 13714 06:BD99: EA           	NOP
 13715 06:BD9A: EA           	NOP
 13716 06:BD9B: EA           	NOP
 13717 06:BD9C: EA           	NOP
 13718 06:BD9D: EA           	NOP
 13719 06:BD9E: EA           	NOP
 13720                        	asmend
 13721                        ;	return 0;
 13722                        	.line	3870
 13723 06:BD9F: A9 00 00     	lda	#$0
 13724                        L567:
 13725 06:BDA2: A8           	tay
 13726 06:BDA3: 2B           	pld
 13727 06:BDA4: 3B           	tsc
 13728 06:BDA5: 18           	clc
 13729 06:BDA6: 69 00 00     	adc	#L564
 13730 06:BDA9: 1B           	tcs
 13731 06:BDAA: 98           	tya
 13732 06:BDAB: 6B           	rtl
 13733                        ;}
 13734                        	.line	3871
 13735                        	.endblock	3871
 13736             00000000   L564	equ	0
 13737             00000001   L565	equ	1
 13738 06:BDAC:              	ends
 13739                        	efunc
 13740                        	.endfunc	3871,1,0
 13741                        	.line	3871
 13742                        ;
  Sat Jul 10 2021  1:15                                                Page 260


 13743                        ;// end mindrvr.c
 13744                        ;
 13745                        ;#endif
 13746                        ;
 13747                        	.line	3875
 13748                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",3856
 13749                        	xref	~~k_mem_allocate_heap
 13750                        	xref	~~k_debug_byte_array
 13751                        	xref	~~k_debug_bits
 13752                        	xref	~~k_debug_hex
 13753                        	xref	~~k_debug_long
 13754                        	xref	~~k_debug_integer
 13755                        	xref	~~k_debug_string
 13756                        	udata
 13757                        ~~tmr_cmd_start_time
 13758 00:0000:              	ds	4
 13759 00:0004:              	ends
 13760                        	udata
 13761                        	xdef	~~pio_bmide_base_addr
 13762                        ~~pio_bmide_base_addr
 13763 00:0004:              	ds	4
 13764 00:0008:              	ends
 13765                        	udata
 13766                        	xdef	~~reg_config_info
 13767                        ~~reg_config_info
 13768 00:0008:              	ds	4
 13769 00:000C:              	ends
 13770                        	udata
 13771                        	xdef	~~reg_cmd_info
 13772                        ~~reg_cmd_info
 13773 00:000C:              	ds	41
 13774 00:0035:              	ends
 13775                        	udata
 13776                        	xdef	~~int_bmide_status
 13777                        ~~int_bmide_status
 13778 00:0035:              	ds	1
 13779 00:0036:              	ends
 13780                        	udata
 13781                        	xdef	~~int_ata_status
 13782                        ~~int_ata_status
 13783 00:0036:              	ds	1
 13784 00:0037:              	ends
 13785                        	.sym	~~exec_pio_data_out_cmd,~~exec_pio_data_
                    out_cmd,69,3,0
 13786                        	.sym	~~exec_pio_data_in_cmd,~~exec_pio_data_i
                    n_cmd,69,2,0
 13787                        	.sym	~~exec_non_data_cmd,~~exec_non_data_cmd,
                    69,3,0
 13788                        	.sym	~~k_read_lba_sector_old,~~k_read_lba_sec
                    tor_old,65,2,0
 13789                        	.sym	~~k_ide_get_info_old,~~k_ide_get_info_ol
                    d,1102,2,32
 13790                        	.sym	~~ide_select_drive,~~ide_select_drive,65
                    ,2,0
 13791                        	.sym	~~k_ide_read_sector,~~k_ide_read_sector,
                    1102,2,32
 13792                        	.sym	~~k_ide_not_drq,~~k_ide_not_drq,65,2,0
  Sat Jul 10 2021  1:15                                                Page 261


 13793                        	.sym	~~k_ide_drive_ready_notbusy,~~k_ide_driv
                    e_ready_notbusy,65,2,0
 13794                        	.sym	~~k_ide_drive_ready,~~k_ide_drive_ready,
                    65,2,0
 13795                        	.sym	~~tmr_chk_timeout,~~tmr_chk_timeout,69,3
                    ,0
 13796                        	.sym	~~tmr_set_timeout,~~tmr_set_timeout,65,3
                    ,0
 13797                        	.sym	~~tmr_cmd_start_time,~~tmr_cmd_start_tim
                    e,7,3,32
 13798                        	.sym	~~pio_writeBusMstrStatus,~~pio_writeBusM
                    strStatus,65,3,0
 13799                        	.sym	~~pio_writeBusMstrCmd,~~pio_writeBusMstr
                    Cmd,65,3,0
 13800                        	.sym	~~pio_readBusMstrStatus,~~pio_readBusMst
                    rStatus,78,3,0
 13801                        	.sym	~~pio_readBusMstrCmd,~~pio_readBusMstrCm
                    d,78,3,0
 13802                        	.sym	~~pio_rep_outdword,~~pio_rep_outdword,65
                    ,3,0
 13803                        	.sym	~~pio_rep_indword,~~pio_rep_indword,65,3
                    ,0
 13804                        	.sym	~~pio_rep_outword,~~pio_rep_outword,65,3
                    ,0
 13805                        	.sym	~~pio_rep_inword,~~pio_rep_inword,65,3,0
 13806                        	.sym	~~pio_rep_outbyte,~~pio_rep_outbyte,65,3
                    ,0
 13807                        	.sym	~~pio_rep_inbyte,~~pio_rep_inbyte,65,3,0
 13808                        	.sym	~~pio_drq_block_out,~~pio_drq_block_out,
                    65,3,0
 13809                        	.sym	~~pio_drq_block_in,~~pio_drq_block_in,65
                    ,3,0
 13810                        	.sym	~~pio_outdword,~~pio_outdword,65,3,0
 13811                        	.sym	~~pio_indword,~~pio_indword,82,3,0
 13812                        	.sym	~~pio_outword,~~pio_outword,65,3,0
 13813                        	.sym	~~pio_inword,~~pio_inword,80,3,0
 13814                        	.sym	~~pio_outbyte,~~pio_outbyte,65,3,0
 13815                        	.sym	~~pio_inbyte,~~pio_inbyte,78,3,0
 13816                        	.sym	~~sub_wait_poll,~~sub_wait_poll,65,3,0
 13817                        	.sym	~~sub_select,~~sub_select,69,3,0
 13818                        	.sym	~~sub_trace_command,~~sub_trace_command,
                    65,3,0
 13819                        	.sym	~~sub_setup_command,~~sub_setup_command,
                    65,3,0
 13820                        	.sym	~~pio_reg_addrs,~~pio_reg_addrs,1134,2,3
                    2,9
 13821                        	.sym	~~pio_bmide_base_addr,~~pio_bmide_base_a
                    ddr,142,2,32
 13822                        	.sym	ide_private_data,0,10,14,8,86
 13823                        	.sym	~~reg_packet,~~reg_packet,69,2,0
 13824                        	.sym	~~reg_pio_data_out_lba48,~~reg_pio_data_
                    out_lba48,69,2,0
 13825                        	.sym	~~reg_pio_data_out_lba28,~~reg_pio_data_
                    out_lba28,69,2,0
 13826                        	.sym	~~reg_pio_data_in_lba48,~~reg_pio_data_i
                    n_lba48,69,2,0
 13827                        	.sym	~~reg_pio_data_in_lba28,~~reg_pio_data_i
                    n_lba28,69,2,0
  Sat Jul 10 2021  1:15                                                Page 262


 13828                        	.sym	~~reg_non_data_lba48,~~reg_non_data_lba4
                    8,69,2,0
 13829                        	.sym	~~reg_non_data_lba28,~~reg_non_data_lba2
                    8,69,2,0
 13830                        	.sym	~~reg_reset,~~reg_reset,69,2,0
 13831                        	.sym	~~reg_config,~~reg_config,69,2,0
 13832                        	.sym	~~k_ide_poll,~~k_ide_poll,65,2,0
 13833                        	.sym	~~k_read_hd_sector,~~k_read_hd_sector,78
                    ,2,0
 13834                        	.sym	~~k_read_lba_sector,~~k_read_lba_sector,
                    65,2,0
 13835                        	.sym	~~k_ide_diagnostic,~~k_ide_diagnostic,65
                    ,2,0
 13836                        	.sym	~~k_ide_get_info,~~k_ide_get_info,1102,2
                    ,32
 13837                        	.sym	~~k_ide_wait,~~k_ide_wait,65,2,0
 13838                        	.sym	~~k_ide_busy,~~k_ide_busy,65,2,0
 13839                        	.sym	~~k_ide_isdrq,~~k_ide_isdrq,65,2,0
 13840                        	.sym	~~k_ide_isready,~~k_ide_isready,65,2,0
 13841                        	.sym	~~k_ide_isbusy,~~k_ide_isbusy,65,2,0
 13842                        	.sym	~~k_ide_init,~~k_ide_init,65,2,0
 13843                        	.sym	~~reg_config_info,~~reg_config_info,101,
                    2,0,2
 13844                        	.sym	~~reg_cmd_info,~~reg_cmd_info,10,2,328,8
                    5
 13845                        	.sym	~~pio_xfer_width,~~pio_xfer_width,14,2,8
 13846                        	.sym	~~int_use_intr_flag,~~int_use_intr_flag,
                    14,2,8
 13847                        	.sym	~~int_bmide_status,~~int_bmide_status,14
                    ,2,8
 13848                        	.sym	~~int_ata_status,~~int_ata_status,14,2,8
 13849                        	.sym	~~SYSTEM_WAIT_INTR_OR_TIMEOUT,~~SYSTEM_W
                    AIT_INTR_OR_TIMEOUT,69,2,0
 13850                        	.sym	FRESULT,0,5,14,16
 13851                        	.sym	MKFS_PARM,0,10,14,80,84
 13852                        	.sym	FILINFO,0,10,14,2224,83
 13853                        	.sym	DIR,0,10,14,416,82
 13854                        	.sym	FIL,0,10,14,4400,81
 13855                        	.sym	FFOBJID,0,10,14,128,80
 13856                        	.sym	FATFS,0,10,14,4504,79
 13857                        	.sym	LBA_t,0,18,14,32
 13858                        	.sym	FSIZE_t,0,18,14,32
 13859                        	.sym	TCHAR,0,14,14,8
 13860                        	.sym	PCOMMANDARGS,0,138,14,32,78
 13861                        	.sym	COMMANDARGS,0,10,14,64,78
 13862                        	.sym	PTOKENIZESTATE,0,133,14,32
 13863                        	.sym	TOKENIZESTATE,0,5,14,16
 13864                        	.sym	PTOKEN,0,138,14,32,77
 13865                        	.sym	TOKEN,0,10,14,64,77
 13866                        	.sym	PTOKENTYPE,0,133,14,32
 13867                        	.sym	TOKENTYPE,0,5,14,16
 13868                        	.sym	FXCommandHandler,0,656,14,32
 13869                        	.sym	PCONSOLECTX,0,138,14,32,76
 13870                        	.sym	CONSOLECTX,0,10,14,1144,76
 13871                        	.sym	PSPINNERCTX,0,138,14,32,75
 13872                        	.sym	SPINNERCTX,0,10,14,48,75
 13873                        	.sym	HCLIP,0,138,14,32,74
 13874                        	.sym	PCLIPBOARD_DATA,0,138,14,32,74
  Sat Jul 10 2021  1:15                                                Page 263


 13875                        	.sym	CLIPBOARD_DATA,0,10,14,168,74
 13876                        	.sym	PEVENTMANAGER,0,138,14,32,73
 13877                        	.sym	EVENTMANAGER,0,10,14,192,73
 13878                        	.sym	EV_RUN,0,656,14,32
 13879                        	.sym	EV_QUERY_METRIC,0,656,14,32
 13880                        	.sym	EV_CONFIGURE,0,656,14,32
 13881                        	.sym	EV_UNINIT,0,641,14,32
 13882                        	.sym	EV_INIT,0,8833,14,32
 13883                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,72
 13884                        	.sym	MOUSE_MSG_STATE,0,10,14,184,72
 13885                        	.sym	PFXEVENTPROCESS,0,138,14,32,71
 13886                        	.sym	FXEVENTPROCESS,0,10,14,64,71
 13887                        	.sym	PMARSHALDATA,0,139,14,32,70
 13888                        	.sym	MARSHALDATA,0,11,14,32,70
 13889                        	.sym	FXIDLEPROCESS,0,641,14,32
 13890                        	.sym	FXEventProc,0,641,14,32
 13891                        	.sym	PMOUSEMSGDATA,0,138,14,32,69
 13892                        	.sym	MOUSEMSGDATA,0,10,14,64,69
 13893                        	.sym	MSGIRQ,0,5,14,16
 13894                        	.sym	MAINLOOPARGS,0,10,14,16,68
 13895                        	.sym	PEACHCHILD_MSG,0,138,14,32,67
 13896                        	.sym	EACHCHILD_MSG,0,10,14,64,67
 13897                        	.sym	PMSGBOX_DATA,0,138,14,32,66
 13898                        	.sym	MSGBOX_DATA,0,10,14,96,66
 13899                        	.sym	PDESKTOP_DATA,0,138,14,32,65
 13900                        	.sym	DESKTOP_DATA,0,10,14,64,65
 13901                        	.sym	PWINDOWMANAGER,0,138,14,32,64
 13902                        	.sym	WINDOWMANAGER,0,10,14,160,64
 13903                        	.sym	WM_DOPROCS,0,641,14,32
 13904                        	.sym	WM_QUERY_METRIC,0,656,14,32
 13905                        	.sym	WM_CONFIGURE,0,656,14,32
 13906                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
 13907                        	.sym	WM_EVENTS,0,641,14,32
 13908                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,63
 13909                        	.sym	CUR_PALETTE_MAP,0,10,14,400,63
 13910                        	.sym	PCLICKDETECTED,0,138,14,32,62
 13911                        	.sym	CLICKDETECTED,0,10,14,64,62
 13912                        	.sym	OBJECTCLICKED,0,641,14,32
 13913                        	.sym	PIPCPORT,0,138,14,32,61
 13914                        	.sym	IPCPORT,0,10,14,144,61
 13915                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
 13916                        	.sym	MemoryCallback,0,641,14,32
 13917                        	.sym	PFXMEMORYMAP,0,138,14,32,60
 13918                        	.sym	FXMEMORYMAP,0,10,14,2072,60
 13919                        	.sym	UMM_HEAP_INFO,0,10,14,256,59
 13920                        	.sym	PEXECUTIVE,0,138,14,32,58
 13921                        	.sym	EXECUTIVE,0,10,14,128,58
 13922                        	.sym	EX_QUERY_METRIC,0,656,14,32
 13923                        	.sym	EX_CONFIGURE,0,656,14,32
 13924                        	.sym	EX_UNINIT,0,641,14,32
 13925                        	.sym	EX_INIT,0,8833,14,32
 13926                        	.sym	PFXSTRING,0,138,14,32,57
 13927                        	.sym	FXSTRING,0,10,14,64,57
 13928                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
 13929                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
 13930                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
 13931                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  Sat Jul 10 2021  1:15                                                Page 264


 13932                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
 13933                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
 13934                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,56
 13935                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,56
 13936                        	.sym	GETDRIVERDEF,0,8842,14,32,55
 13937                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,55
 13938                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,55
 13939                        	.sym	~~k_debug_byte_array,~~k_debug_byte_arra
                    y,65,18,0
 13940                        	.sym	~~k_debug_bits,~~k_debug_bits,65,18,0
 13941                        	.sym	~~k_debug_hex,~~k_debug_hex,65,18,0
 13942                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
 13943                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
 13944                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
 13945                        	.sym	PSEGMENTHEADER,0,138,14,32,54
 13946                        	.sym	SEGMENTHEADER,0,10,14,160,54
 13947                        	.sym	PDEBUGBYTEBITS,0,138,14,32,53
 13948                        	.sym	DEBUGBYTEBITS,0,10,14,8,53
 13949                        	.sym	PFXENVIRONMENT,0,138,14,32,52
 13950                        	.sym	FXENVIRONMENT,0,10,14,96,52
 13951                        	.sym	PFXZEROPAGE,0,138,14,32,51
 13952                        	.sym	FXZEROPAGE,0,10,14,824,51
 13953                        	.sym	KERNELTRAPCALL,0,641,14,32
 13954                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,50
 13955                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,50
 13956                        	.sym	FOREACHNODEUNTIL,0,654,14,32
 13957                        	.sym	FOREACHNODE,0,641,14,32
 13958                        	.sym	PFXRFHEADER_FONT,0,138,14,32,49
 13959                        	.sym	FXRFHEADER_FONT,0,10,14,144,49
 13960                        	.sym	PFXRFHEADER,0,138,14,32,48
 13961                        	.sym	FXRFHEADER,0,10,14,72,48
 13962                        	.sym	PFXCOMBUFFER,0,138,14,32,47
 13963                        	.sym	FXCOMBUFFER,0,10,14,2080,47
 13964                        	.sym	PSUBMENULIST,0,138,14,32,46
 13965                        	.sym	SUBMENULIST,0,10,14,40,46
 13966                        	.sym	HSUBMENU,0,7,14,32
 13967                        	.sym	PSUBMENU,0,138,14,32,45
 13968                        	.sym	SUBMENU,0,10,14,64,45
 13969                        	.sym	MenuAction,0,641,14,32
 13970                        	.sym	PMENUANCHOR,0,138,14,32,44
 13971                        	.sym	MENUANCHOR,0,10,14,272,44
 13972                        	.sym	PMSGBOX,0,138,14,32,43
 13973                        	.sym	MSGBOX,0,10,14,144,43
 13974                        	.sym	PTEXTBOX,0,138,14,32,42
 13975                        	.sym	TEXTBOX,0,10,14,144,42
 13976                        	.sym	PLISTBOX,0,138,14,32,41
 13977                        	.sym	LISTBOX,0,10,14,240,41
 13978                        	.sym	PSCROLLBAR,0,138,14,32,40
 13979                        	.sym	SCROLLBAR,0,10,14,240,40
 13980                        	.sym	PBUTTON,0,138,14,32,39
 13981                        	.sym	BUTTON,0,10,14,96,39
 13982                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,38
 13983                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,38
 13984                        	.sym	PMENUTAG,0,138,14,32,37
 13985                        	.sym	MENUTAG,0,10,14,160,37
 13986                        	.sym	PMENU,0,138,14,32,36
  Sat Jul 10 2021  1:15                                                Page 265


 13987                        	.sym	MENU,0,10,14,280,36
 13988                        	.sym	HMENURESOURCE,0,129,14,32
 13989                        	.sym	FONTMETRIC,0,10,14,32,35
 13990                        	.sym	TITLE,0,142,14,32
 13991                        	.sym	PHANDLE,0,1153,14,32
 13992                        	.sym	HANDLE,0,129,14,32
 13993                        	.sym	PWINDOWEX,0,138,14,32,34
 13994                        	.sym	WINDOWEX,0,10,14,3880,34
 13995                        	.sym	PWINDOW,0,138,14,32,33
 13996                        	.sym	WINDOW,0,10,14,3904,33
 13997                        	.sym	PDRAGDATA,0,138,14,32,32
 13998                        	.sym	DRAGDATA,0,10,14,216,32
 13999                        	.sym	PNCCLICKABLE,0,138,14,32,31
 14000                        	.sym	NCCLICKABLE,0,10,14,136,31
 14001                        	.sym	HCLICKABLE,0,7,14,32
 14002                        	.sym	PCLICKABLE,0,138,14,32,30
 14003                        	.sym	CLICKABLE,0,10,14,152,30
 14004                        	.sym	PWNDCLASS,0,138,14,32,29
 14005                        	.sym	WNDCLASS,0,10,14,272,29
 14006                        	.sym	HBRUSH,0,129,14,32
 14007                        	.sym	HCURSOR,0,129,14,32
 14008                        	.sym	HICON,0,129,14,32
 14009                        	.sym	HINSTANCE,0,129,14,32
 14010                        	.sym	FXWndProc,0,654,14,32
 14011                        	.sym	PDRECT,0,138,14,32,28
 14012                        	.sym	DRECT,0,10,14,112,28
 14013                        	.sym	PRECTP,0,138,14,32,27
 14014                        	.sym	RECTP,0,10,14,96,27
 14015                        	.sym	PRECT,0,138,14,32,26
 14016                        	.sym	RECT,0,10,14,112,26
 14017                        	.sym	PPOINT,0,138,14,32,25
 14018                        	.sym	POINT,0,10,14,32,25
 14019                        	.sym	PFXPROPERTY,0,138,14,32,23
 14020                        	.sym	FXPROPERTY,0,10,14,384,23
 14021                        	.sym	PKEYSTATE,0,138,14,32,22
 14022                        	.sym	KEYSTATE,0,10,14,112,22
 14023                        	.sym	SCANCODE,0,14,14,8
 14024                        	.sym	KEYCODE,0,16,14,16
 14025                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
 14026                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
 14027                        	.sym	PFXPROCESS,0,138,14,32,20
 14028                        	.sym	FXPROCESS,0,10,14,800,20
 14029                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
 14030                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
 14031                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
 14032                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
 14033                        	.sym	FXProcessProc,0,641,14,32
 14034                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
 14035                        	.sym	FXCMDMESSAGE,0,10,14,304,17
 14036                        	.sym	PFXOSMESSAGE,0,138,14,32,16
 14037                        	.sym	FXOSMESSAGE,0,10,14,304,16
 14038                        	.sym	PINT_REGS,0,138,14,32,15
 14039                        	.sym	INT_REGS,0,10,14,104,15
 14040                        	.sym	TASK_STACK,0,10,14,32,14
 14041                        	.sym	TASK,0,10,14,48,13
 14042                        	.sym	PIRQDATA,0,138,14,32,12
 14043                        	.sym	IRQDATA,0,10,14,48,12
 14044                        	.sym	HMENU,0,129,14,32
  Sat Jul 10 2021  1:15                                                Page 266


 14045                        	.sym	HWND,0,129,14,32
 14046                        	.sym	MSGDATA,0,14,14,8
 14047                        	.sym	MSGDEST,0,18,14,32
 14048                        	.sym	MSGSRC,0,18,14,32
 14049                        	.sym	MSGTYPE,0,16,14,16
 14050                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
 14051                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
 14052                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
 14053                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
 14054                        	.sym	FILE_PATH_LIST,0,138,14,32,6
 14055                        	.sym	PROCEDURE_LIST,0,138,14,32,6
 14056                        	.sym	FILE_HANDLE,0,138,14,32,11
 14057                        	.sym	FILE_BLOCK,0,10,14,552,11
 14058                        	.sym	SEMAPHORE,0,10,14,16,10
 14059                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
 14060                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
 14061                        	.sym	KRESULT,0,18,14,32
 14062                        	.sym	PKERNEL_ERROR,0,138,14,32,8
 14063                        	.sym	KERNEL_ERROR,0,10,14,32,8
 14064                        	.sym	PROCESS_STATUS,0,16,14,16
 14065                        	.sym	FILE_PATH_NAME,0,142,14,32
 14066                        	.sym	PROCESS_RESOURCE,0,129,14,32
 14067                        	.sym	PROCESS_TLS,0,129,14,32
 14068                        	.sym	PROCESS_CTX,0,129,14,32
 14069                        	.sym	USERID,0,16,14,16
 14070                        	.sym	PROCESS_ID,0,18,14,32
 14071                        	.sym	PROCESS_BANK,0,14,14,8
 14072                        	.sym	PFXQUEUE,0,138,14,32,7
 14073                        	.sym	FXQUEUE,0,10,14,80,7
 14074                        	.sym	PFXNODELIST,0,138,14,32,6
 14075                        	.sym	FXNODELIST,0,10,14,96,6
 14076                        	.sym	NodeListDeallocator,0,641,14,32
 14077                        	.sym	PFXNODE,0,138,14,32,5
 14078                        	.sym	FXNODE,0,10,14,384,5
 14079                        	.sym	PBYTEBITS,0,138,14,32,4
 14080                        	.sym	BYTEBITS,0,10,14,8,4
 14081                        	.sym	HRESULT,0,18,14,32
 14082                        	.sym	LPWCHAR,0,144,14,32
 14083                        	.sym	WCHAR,0,16,14,16
 14084                        	.sym	HCOLOR,0,129,14,32
 14085                        	.sym	HFONT,0,129,14,32
 14086                        	.sym	HDC,0,129,14,32
 14087                        	.sym	HPOINTER,0,129,14,32
 14088                        	.sym	uint32_t,0,18,14,32
 14089                        	.sym	uint8_t,0,14,14,8
 14090                        	.sym	LPBOOL,0,142,14,32
 14091                        	.sym	BOOL,0,14,14,8
 14092                        	.sym	DWORD,0,18,14,32
 14093                        	.sym	ULONG,0,18,14,32
 14094                        	.sym	LPLONG,0,135,14,32
 14095                        	.sym	LONG,0,7,14,32
 14096                        	.sym	PUINT,0,144,14,32
 14097                        	.sym	USHORT,0,16,14,16
 14098                        	.sym	UINT,0,16,14,16
 14099                        	.sym	INT,0,5,14,16
 14100                        	.sym	WORD,0,5,14,16
 14101                        	.sym	PBYTE,0,142,14,32
 14102                        	.sym	BYTE,0,14,14,8
  Sat Jul 10 2021  1:15                                                Page 267


 14103                        	.sym	IOPORT,0,142,14,32
 14104                        	.sym	PUCHAR,0,142,14,32
 14105                        	.sym	UCHAR,0,14,14,8
 14106                        	.sym	LPWCSTR,0,142,14,32
 14107                        	.sym	LPCSTR,0,142,14,32
 14108                        	.sym	LPSTR,0,142,14,32
 14109                        	.sym	LPCHAR,0,142,14,32
 14110                        	.sym	CHAR,0,14,14,8
 14111                        	.sym	LPVOID,0,129,14,32
 14112                        	.sym	VOID,0,1,14,32
 14113                        	.sym	Boolean_T,0,5,14,16
 14114                        	.sym	ldiv_t,0,10,14,64,2
 14115                        	.sym	div_t,0,10,14,32,1
 14116                        	.sym	wctype_t,0,16,14,16
 14117                        	.sym	wint_t,0,16,14,16
 14118                        	.sym	wchar_t,0,14,14,8
 14119                        	.sym	ptrdiff_t,0,7,14,32
 14120                        	.sym	size_t,0,16,14,16
 14121                        	end


      Lines assembled: 14121
      Errors: 0
