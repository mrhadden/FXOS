  Thu Jul 29 2021 11:55                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfloppy.c",0
     7                        ;#include "fxtypes.h"
     8                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
     9                        	.stag	_fx_bytebits,8,1
    10                        	.member	b7,0,14,17,1
    11                        	.member	b6,1,14,17,1
    12                        	.member	b5,2,14,17,1
    13                        	.member	b4,3,14,17,1
    14                        	.member	b3,4,14,17,1
    15                        	.member	b2,5,14,17,1
    16                        	.member	b1,6,14,17,1
    17                        	.member	b0,7,14,17,1
    18                        	.eos
    19                        	.stag	_fx_node,384,2
    20                        	.member	type,0,14,8,8
    21                        	.member	Reserved0,8,14,8,8
    22                        	.member	data,16,129,8,32
    23                        	.member	last,48,138,8,32,2
    24                        	.member	next,80,138,8,32,2
    25                        	.member	name,112,110,8,0,32
    26                        	.member	Reserved1,368,16,8,16
    27                        	.eos
    28                        	.stag	_fx_nodelist,96,3
    29                        	.member	listhead,0,138,8,32,2
    30                        	.member	listData,32,129,8,32
    31                        	.member	deallocator,64,641,8,32
    32                        	.eos
    33                        	.stag	_fx_queue,80,4
    34                        	.member	count,0,5,8,16
    35                        	.member	front,16,138,8,32,2
    36                        	.member	rear,48,138,8,32,2
    37                        	.eos
    38                        	.stag	fake5_,32,5
    39                        	.member	subsystem,0,14,8,8
    40                        	.member	level,8,14,8,8
    41                        	.member	error,16,16,8,16
    42                        	.eos
    43                        	.stag	_fx_process_signal,16,6
    44                        	.member	cbSize,0,16,8,16
    45                        	.eos
    46                        	.stag	_fx_semaphore,16,7
    47                        	.member	reserved,0,5,8,16
    48                        	.eos
    49                        	.stag	_fx_fileBlock,552,8
    50                        	.member	openCount,0,16,8,16
  Thu Jul 29 2021 11:55                                                Page 2


    51                        	.member	lockCount,16,16,8,16
    52                        	.member	dirty,32,14,8,8
    53                        	.member	fileBuffer,40,110,8,0,64
    54                        	.eos
    55                        	.stag	_fx_irq_data,48,9
    56                        	.member	line,0,5,8,16
    57                        	.member	keycode,16,142,8,32
    58                        	.eos
    59                        	.stag	_task,48,10
    60                        	.member	SPL,0,14,8,8
    61                        	.member	SPH,8,14,8,8
    62                        	.member	pstack,16,142,8,32
    63                        	.eos
    64                        	.stag	_task_stack,32,11
    65                        	.member	SS,0,142,8,32
    66                        	.eos
    67                        	.stag	int_regs,104,12
    68                        	.member	PB,0,14,8,8
    69                        	.member	PH,8,14,8,8
    70                        	.member	PL,16,14,8,8
    71                        	.member	PP,24,14,8,8
    72                        	.member	DB,32,14,8,8
    73                        	.member	DH,40,14,8,8
    74                        	.member	DL,48,14,8,8
    75                        	.member	AH,56,14,8,8
    76                        	.member	AL,64,14,8,8
    77                        	.member	XH,72,14,8,8
    78                        	.member	XL,80,14,8,8
    79                        	.member	YH,88,14,8,8
    80                        	.member	YL,96,14,8,8
    81                        	.eos
    82                        	.stag	_fx_eventMessage,312,13
    83                        	.member	src,0,18,8,32
    84                        	.member	dest,32,18,8,32
    85                        	.member	type,64,16,8,16
    86                        	.member	hwnd,80,129,8,32
    87                        	.member	pheap,112,129,8,32
    88                        	.member	msgTime,144,18,8,32
    89                        	.member	data,176,110,8,0,16
    90                        	.member	attr,304,14,8,8
    91                        	.eos
    92                        	.stag	_fx_cmdMessage,312,14
    93                        	.member	src,0,18,8,32
    94                        	.member	dest,32,18,8,32
    95                        	.member	type,64,16,8,16
    96                        	.member	hwnd,80,129,8,32
    97                        	.member	pheap,112,129,8,32
    98                        	.member	msgTime,144,18,8,32
    99                        	.member	cmdCId,176,16,8,16
   100                        	.member	cmdMId,192,16,8,16
   101                        	.member	parameter1,208,18,8,32
   102                        	.member	parameter2,240,18,8,32
   103                        	.member	parameter3,272,18,8,32
   104                        	.member	attr,304,14,8,8
   105                        	.eos
   106                        	.stag	_fx_console_ctl,448,15
   107                        	.member	maxCols,0,5,8,16
   108                        	.member	maxRows,16,5,8,16
  Thu Jul 29 2021 11:55                                                Page 3


   109                        	.member	curX,32,5,8,16
   110                        	.member	curY,48,5,8,16
   111                        	.member	fgColor,64,5,8,16
   112                        	.member	bgColor,80,5,8,16
   113                        	.member	mode,96,14,8,8
   114                        	.member	kbBuffer,104,101,8,0,16
   115                        	.member	screenBuffer,360,142,8,32
   116                        	.member	desktopMode,392,14,8,8
   117                        	.member	lastMouseButton,400,5,8,16
   118                        	.member	lastMouseX,416,5,8,16
   119                        	.member	lastMouseY,432,5,8,16
   120                        	.eos
   121                        	.stag	_fx_desktop_ctl,392,16
   122                        	.member	desktopMode,0,14,8,8
   123                        	.member	cursorCtl,8,5,8,16
   124                        	.member	cursorState,24,5,8,16
   125                        	.member	backgroundColor,40,5,8,16
   126                        	.member	foregroundColor,56,5,8,16
   127                        	.member	menuMode,72,5,8,16
   128                        	.member	lastMouseButton,88,5,8,16
   129                        	.member	lastMouseX,104,5,8,16
   130                        	.member	lastMouseY,120,5,8,16
   131                        	.member	currentDiskName,136,142,8,32
   132                        	.member	diskNodes,168,129,8,32
   133                        	.member	titleNodes,200,129,8,32
   134                        	.member	menuNodes,232,129,8,32
   135                        	.member	iconNodes,264,129,8,32
   136                        	.member	windowNodes,296,129,8,32
   137                        	.member	fontNodes,328,129,8,32
   138                        	.member	wndProc,360,138,8,32,3
   139                        	.eos
   140                        	.stag	_fx_process,800,17
   141                        	.member	cbSize,0,5,8,16
   142                        	.member	procId,16,18,8,32
   143                        	.member	parentId,48,18,8,32
   144                        	.member	ctx,80,129,8,32
   145                        	.member	userId,112,16,8,16
   146                        	.member	status,128,16,8,16
   147                        	.member	foregroundActive,144,14,8,8
   148                        	.member	tls,152,1121,8,32,8
   149                        	.member	commandLine,408,142,8,32
   150                        	.member	semaphores,440,138,8,32,3
   151                        	.member	fileHandles,472,138,8,32,3
   152                        	.member	pathList,504,138,8,32,3
   153                        	.member	resources,536,138,8,32,3
   154                        	.member	timerAware,568,14,8,8
   155                        	.member	timerTicks,576,112,8,0,2
   156                        	.member	timerTickCount,608,112,8,0,2
   157                        	.member	kernelError,640,10,8,32,5
   158                        	.member	consoleCtl,672,138,8,32,15
   159                        	.member	desktopCtl,704,138,8,32,16
   160                        	.member	execProc,736,641,8,32
   161                        	.member	startupArgs,768,129,8,32
   162                        	.eos
   163                        	.stag	_fxProcessMessage,112,18
   164                        	.member	src,0,18,8,32
   165                        	.member	dest,32,18,8,32
   166                        	.member	type,64,16,8,16
  Thu Jul 29 2021 11:55                                                Page 4


   167                        	.member	processInfo,80,138,8,32,17
   168                        	.eos
   169                        	.stag	_k_key_state,112,19
   170                        	.member	scanCode,0,14,8,8
   171                        	.member	isShifted,8,14,8,8
   172                        	.member	isAlt,16,14,8,8
   173                        	.member	isExtended,24,14,8,8
   174                        	.member	isCapsLock,32,14,8,8
   175                        	.member	isNumLock,40,14,8,8
   176                        	.member	isScrollLock,48,14,8,8
   177                        	.member	keyChar,56,16,8,16
   178                        	.member	scanTime,72,18,8,32
   179                        	.member	ledStatus,104,14,8,8
   180                        	.eos
   181                        	.stag	_fx_property,384,20
   182                        	.member	name,0,110,8,0,16
   183                        	.member	value,128,110,8,0,32
   184                        	.eos
   185                        	.utag	_24bitPointer,32,21
   186                        	.member	address,0,142,11,32
   187                        	.member	bytes,0,110,11,0,4
   188                        	.eos
   189                        	.stag	_PointStruct,32,22
   190                        	.member	x,0,5,8,16
   191                        	.member	y,16,5,8,16
   192                        	.eos
   193                        	.stag	_RectStruct,112,23
   194                        	.member	x,0,5,8,16
   195                        	.member	y,16,5,8,16
   196                        	.member	z,32,18,8,32
   197                        	.member	width,64,5,8,16
   198                        	.member	height,80,5,8,16
   199                        	.member	attr,96,5,8,16
   200                        	.eos
   201                        	.stag	fake24_,96,24
   202                        	.member	name,0,142,8,32
   203                        	.member	topLeft,32,10,8,32,22
   204                        	.member	bottomRight,64,10,8,32,22
   205                        	.eos
   206                        	.stag	fake25_,112,25
   207                        	.member	x,0,5,8,16
   208                        	.member	y,16,5,8,16
   209                        	.member	z,32,5,8,16
   210                        	.member	width,48,5,8,16
   211                        	.member	height,64,5,8,16
   212                        	.member	data,80,18,8,32
   213                        	.eos
   214                        	.stag	_k_WindowClass,272,26
   215                        	.member	cbSize,0,16,8,16
   216                        	.member	style,16,16,8,16
   217                        	.member	styleEx,32,16,8,16
   218                        	.member	pWndProc,48,654,8,32
   219                        	.member	hInstance,80,129,8,32
   220                        	.member	hIcon,112,129,8,32
   221                        	.member	hCursor,144,129,8,32
   222                        	.member	hbrBackground,176,129,8,32
   223                        	.member	lpszMenuName,208,142,8,32
   224                        	.member	lpszClassName,240,142,8,32
  Thu Jul 29 2021 11:55                                                Page 5


   225                        	.eos
   226                        	.stag	_ClickableRect,152,27
   227                        	.member	area,0,10,8,112,23
   228                        	.member	z,112,18,8,32
   229                        	.member	enabled,144,14,8,8
   230                        	.eos
   231                        	.stag	_NCClickableRect,136,28
   232                        	.member	area,0,10,8,112,23
   233                        	.member	msgType,112,16,8,16
   234                        	.member	enabled,128,14,8,8
   235                        	.eos
   236                        	.stag	_DragData,216,29
   237                        	.member	area,0,10,8,112,23
   238                        	.member	xoffset,112,5,8,16
   239                        	.member	yoffset,128,5,8,16
   240                        	.member	msgType,144,16,8,16
   241                        	.member	ncAction,160,16,8,16
   242                        	.member	isDrag,176,14,8,8
   243                        	.member	isResize,184,14,8,8
   244                        	.member	canDrag,192,14,8,8
   245                        	.member	canDrop,200,14,8,8
   246                        	.member	didDrag,208,14,8,8
   247                        	.eos
   248                        	.stag	_k_WindowStruct,3904,30
   249                        	.member	cbSize,0,16,8,16
   250                        	.member	style,16,18,8,32
   251                        	.member	styleEx,48,18,8,32
   252                        	.member	win_id,80,5,8,16
   253                        	.member	win_x,96,5,8,16
   254                        	.member	win_y,112,5,8,16
   255                        	.member	win_width,128,5,8,16
   256                        	.member	win_height,144,5,8,16
   257                        	.member	win_xoffset,160,5,8,16
   258                        	.member	win_yoffset,176,5,8,16
   259                        	.member	win_cxoffset,192,5,8,16
   260                        	.member	win_cyoffset,208,5,8,16
   261                        	.member	wndRect,224,10,8,112,23
   262                        	.member	clientRect,336,10,8,112,23
   263                        	.member	nonclientGadgets,448,106,8,0,28,16
   264                        	.member	clickable,2624,129,8,32
   265                        	.member	win_title,2656,110,8,0,32
   266                        	.member	Reserved0,2912,16,8,16
   267                        	.member	win_class,2928,110,8,0,16
   268                        	.member	win_class_name,3056,110,8,0,32
   269                        	.member	nBitmapLayer,3312,16,8,16
   270                        	.member	bgRegion,3328,129,8,32
   271                        	.member	procid,3360,18,8,32
   272                        	.member	pWndClass,3392,138,8,32,26
   273                        	.member	pParentWindow,3424,129,8,32
   274                        	.member	hMenu,3456,129,8,32
   275                        	.member	hPointer,3488,129,8,32
   276                        	.member	hBackground,3520,129,8,32
   277                        	.member	pChildWindows,3552,138,8,32,3
   278                        	.member	pChildHitList,3584,138,8,32,3
   279                        	.member	isVisible,3616,14,8,8
   280                        	.member	windowData,3624,129,8,32
   281                        	.member	clientData,3656,1121,8,32,6
   282                        	.member	isClosed,3848,14,8,8
  Thu Jul 29 2021 11:55                                                Page 6


   283                        	.member	isClosing,3856,14,8,8
   284                        	.member	isDesktop,3864,14,8,8
   285                        	.member	clickableNode,3872,138,8,32,2
   286                        	.eos
   287                        	.stag	_k_WindowStructEx,3880,31
   288                        	.member	cbSize,0,16,8,16
   289                        	.member	style,16,18,8,32
   290                        	.member	styleEx,48,18,8,32
   291                        	.member	win_id,80,5,8,16
   292                        	.member	win_x,96,5,8,16
   293                        	.member	win_y,112,5,8,16
   294                        	.member	win_width,128,5,8,16
   295                        	.member	win_height,144,5,8,16
   296                        	.member	win_xoffset,160,5,8,16
   297                        	.member	win_yoffset,176,5,8,16
   298                        	.member	win_cxoffset,192,5,8,16
   299                        	.member	win_cyoffset,208,5,8,16
   300                        	.member	wndRect,224,10,8,112,23
   301                        	.member	clientRect,336,10,8,112,23
   302                        	.member	nonclientGadgets,448,106,8,0,28,16
   303                        	.member	clickable,2624,129,8,32
   304                        	.member	win_title,2656,110,8,0,32
   305                        	.member	Reserved0,2912,16,8,16
   306                        	.member	win_class,2928,110,8,0,16
   307                        	.member	nBitmapLayer,3056,16,8,16
   308                        	.member	procid,3072,18,8,32
   309                        	.member	pWndClass,3104,138,8,32,26
   310                        	.member	pParentWindow,3136,129,8,32
   311                        	.member	hMenu,3168,129,8,32
   312                        	.member	hPointer,3200,129,8,32
   313                        	.member	hBackground,3232,129,8,32
   314                        	.member	pChildWindows,3264,138,8,32,3
   315                        	.member	pChildHitList,3296,138,8,32,3
   316                        	.member	isVisible,3328,14,8,8
   317                        	.member	windowData,3336,129,8,32
   318                        	.member	clientData,3368,1121,8,32,4
   319                        	.member	isClosed,3496,14,8,8
   320                        	.member	hWnd,3504,129,8,32
   321                        	.member	localRect,3536,10,8,112,23
   322                        	.member	globalRect,3648,10,8,112,23
   323                        	.member	clientOffsetRect,3760,10,8,112,23
   324                        	.member	isDesktop,3872,14,8,8
   325                        	.eos
   326                        	.stag	_FontMetric,32,32
   327                        	.member	width,0,5,8,16
   328                        	.member	height,16,5,8,16
   329                        	.eos
   330                        	.stag	_MenuStruct,280,33
   331                        	.member	cx,0,5,8,16
   332                        	.member	cy,16,5,8,16
   333                        	.member	width,32,5,8,16
   334                        	.member	height,48,5,8,16
   335                        	.member	fcolor,64,14,8,8
   336                        	.member	bcolor,72,14,8,8
   337                        	.member	chromeLeft,80,14,8,8
   338                        	.member	chromeRight1,88,14,8,8
   339                        	.member	chromeRight2,96,14,8,8
   340                        	.member	hFont,104,129,8,32
  Thu Jul 29 2021 11:55                                                Page 7


   341                        	.member	itemId,136,16,8,16
   342                        	.member	pCaption,152,142,8,32
   343                        	.member	subMenus,184,138,8,32,3
   344                        	.member	pBackground,216,129,8,32
   345                        	.member	hWndOwner,248,129,8,32
   346                        	.eos
   347                        	.stag	fake34_,160,34
   348                        	.member	menuId,0,16,8,16
   349                        	.member	caption,16,142,8,32
   350                        	.member	rect,48,10,8,112,23
   351                        	.eos
   352                        	.stag	fake35_,5152,35
   353                        	.member	pParent,0,138,8,32,30
   354                        	.member	rect,32,10,8,112,23
   355                        	.member	captions,144,1134,8,32,24
   356                        	.member	chrome,912,110,8,0,24
   357                        	.member	ids,1104,112,8,0,24
   358                        	.member	clickable,1488,106,8,0,27,24
   359                        	.member	selected,5136,16,8,16
   360                        	.eos
   361                        	.stag	_fx_button_t,96,36
   362                        	.member	pCaption,0,142,8,32
   363                        	.member	cCaption,32,16,8,16
   364                        	.member	data,48,129,8,32
   365                        	.member	captionPixelWidth,80,16,8,16
   366                        	.eos
   367                        	.stag	_fx_scrollbar_t,240,37
   368                        	.member	min,0,16,8,16
   369                        	.member	max,16,16,8,16
   370                        	.member	increment,32,16,8,16
   371                        	.member	stopsize,48,16,8,16
   372                        	.member	location,64,5,8,16
   373                        	.member	state,80,5,8,16
   374                        	.member	rectThumb,96,10,8,112,23
   375                        	.member	data,208,129,8,32
   376                        	.eos
   377                        	.stag	_fx_listbox_t,240,38
   378                        	.member	pos,0,5,8,16
   379                        	.member	selected,16,16,8,16
   380                        	.member	offsetX,32,5,8,16
   381                        	.member	offsetY,48,5,8,16
   382                        	.member	inc,64,5,8,16
   383                        	.member	direction,80,5,8,16
   384                        	.member	top,96,5,8,16
   385                        	.member	bottom,112,5,8,16
   386                        	.member	indexTop,128,5,8,16
   387                        	.member	indexBottom,144,5,8,16
   388                        	.member	maxItems,160,16,8,16
   389                        	.member	fontSet,176,142,8,32
   390                        	.member	data,208,129,8,32
   391                        	.eos
   392                        	.stag	_fx_textbox_t,144,39
   393                        	.member	pos,0,5,8,16
   394                        	.member	selected,16,16,8,16
   395                        	.member	offsetX,32,5,8,16
   396                        	.member	offsetY,48,5,8,16
   397                        	.member	isShifted,64,14,8,8
   398                        	.member	cursorState,72,14,8,8
  Thu Jul 29 2021 11:55                                                Page 8


   399                        	.member	fontSet,80,142,8,32
   400                        	.member	data,112,129,8,32
   401                        	.eos
   402                        	.stag	_fx_msgbox_t,144,40
   403                        	.member	pos,0,5,8,16
   404                        	.member	selected,16,16,8,16
   405                        	.member	offsetX,32,5,8,16
   406                        	.member	offsetY,48,5,8,16
   407                        	.member	isShifted,64,14,8,8
   408                        	.member	cursorState,72,14,8,8
   409                        	.member	fontSet,80,142,8,32
   410                        	.member	data,112,129,8,32
   411                        	.eos
   412                        	.stag	_fx_menuAnchor_t,272,41
   413                        	.member	pCaption,0,142,8,32
   414                        	.member	renderLayoutX,32,16,8,16
   415                        	.member	renderLayoutY,48,16,8,16
   416                        	.member	captionPixelWidth,64,16,8,16
   417                        	.member	data,80,129,8,32
   418                        	.member	droppedWindow,112,138,8,32,30
   419                        	.member	bytes,144,110,8,0,16
   420                        	.eos
   421                        	.stag	_SubMenuStruct,64,42
   422                        	.member	caption,0,142,8,32
   423                        	.member	action,32,641,8,32
   424                        	.eos
   425                        	.stag	_SubMenuListStruct,40,43
   426                        	.member	cMenus,0,14,8,8
   427                        	.member	psubmenus,8,9354,8,32,42
   428                        	.eos
   429                        	.stag	_fx_ComBuffer,2080,44
   430                        	.member	cbSize,0,16,8,16
   431                        	.member	cbBuffer,16,16,8,16
   432                        	.member	buffer,32,110,8,0,256
   433                        	.eos
   434                        	.stag	_fx_resource_header,72,45
   435                        	.member	magic,0,110,8,0,4
   436                        	.member	major,32,14,8,8
   437                        	.member	minor,40,14,8,8
   438                        	.member	type,48,14,8,8
   439                        	.member	reserved,56,14,8,8
   440                        	.member	resheaderSize,64,14,8,8
   441                        	.eos
   442                        	.stag	_fx_resource_header_font,144,46
   443                        	.member	title,0,110,8,0,16
   444                        	.member	height,128,14,8,8
   445                        	.member	width,136,14,8,8
   446                        	.eos
   447                        	.stag	_fx_resource_string,32,47
   448                        	.member	locale,0,110,8,0,2
   449                        	.member	entries,16,16,8,16
   450                        	.eos
   451                        	.stag	_fx_resource_string_entry,40,48
   452                        	.member	index,0,16,8,16
   453                        	.member	length,16,16,8,16
   454                        	.member	data,32,14,8,8
   455                        	.eos
   456                        	.line	1064
  Thu Jul 29 2021 11:55                                                Page 9


   457                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfloppy.c",1
   458                        ;#include "fxkernel.h"
   459                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   460                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   461                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   462                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   463                        	.line	88
   464                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   465                        	.stag	fake49_,32,49
   466                        	.member	quot,0,5,8,16
   467                        	.member	rem,16,5,8,16
   468                        	.eos
   469                        	.stag	fake50_,64,50
   470                        	.member	quot,0,7,8,32
   471                        	.member	rem,32,7,8,32
   472                        	.eos
   473                        	.stag	int_sqrt,32,51
   474                        	.member	sqrt,0,16,8,16
   475                        	.member	frac,16,16,8,16
   476                        	.eos
   477                        	.line	205
   478                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",4
   479                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   480                        	.line	134
   481                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",5
   482                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   483                        	.line	103
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",6
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   486                        	.line	1064
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",8
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstringtable.h",0
   489                        	.line	90
   490                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",9
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   493                        	.line	1064
   494                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",5
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",0
  Thu Jul 29 2021 11:55                                                Page 10


   496                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   497                        	.line	1064
   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fmx_vicky.h",11
   499                        	.line	72
   500                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",6
   501                        	.line	1960
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",16
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",0
   504                        	.line	473
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",22
   506                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   507                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   508                        	.line	134
   509                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",5
   510                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   511                        	.line	205
   512                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",6
   513                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   514                        	.line	1064
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",7
   516                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxc256u.h",0
   517                        	.line	1960
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",12
   519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   520                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   521                        	.line	205
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",5
   523                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   524                        	.line	134
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",6
   526                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   527                        	.line	1064
   528                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",7
   529                        	.stag	_fx_string,64,52
   530                        	.member	size,0,16,8,16
   531                        	.member	pos,16,5,8,16
  Thu Jul 29 2021 11:55                                                Page 11


   532                        	.member	buffer,32,142,8,32
   533                        	.eos
   534                        	.line	139
   535                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",17
   536                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   538                        	.line	30
   539                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",5
   540                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",0
   541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   542                        	.line	1064
   543                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxexec.h",5
   544                        	.stag	_fxos_executive_vtable,128,53
   545                        	.member	Init,0,8833,8,32
   546                        	.member	Configure,32,656,8,32
   547                        	.member	Query,64,656,8,32
   548                        	.member	Uninit,96,641,8,32
   549                        	.eos
   550                        	.line	86
   551                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",6
   552                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   553                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   554                        	.line	1064
   555                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",11
   556                        	.line	118
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",7
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",0
   559                        	.line	208
   560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",8
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",0
   562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   563                        	.line	30
   564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",5
   565                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",0
   566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",0
   567                        	.line	30
   568                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",5
   569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Jul 29 2021 11:55                                                Page 12


                    space\FXOS-Beta\src\umm_malloc_cfg.h",0
   570                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos_build_parameters.h",0
   571                        	.line	35
   572                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc_cfg.h",8
   573                        	.stag	UMM_HEAP_INFO_t,256,54
   574                        	.member	totalEntries,0,18,8,32
   575                        	.member	usedEntries,32,18,8,32
   576                        	.member	freeEntries,64,18,8,32
   577                        	.member	totalBlocks,96,18,8,32
   578                        	.member	usedBlocks,128,18,8,32
   579                        	.member	freeBlocks,160,18,8,32
   580                        	.member	maxFreeContiguousBlocks,192,18,8,32
   581                        	.member	blockSize,224,18,8,32
   582                        	.eos
   583                        	.line	199
   584                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",6
   585                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",0
   586                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   587                        	.line	1064
   588                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\umm_malloc.h",11
   589                        	.line	24
   590                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxmemorymanager.h",7
   591                        	.stag	_fx_memory_map,2072,55
   592                        	.member	availableMemory,0,18,8,32
   593                        	.member	valid_segments,32,110,8,0,255
   594                        	.eos
   595                        	.stag	_fx_ipc_port,144,56
   596                        	.member	id,0,18,8,32
   597                        	.member	type,32,14,8,8
   598                        	.member	name,40,138,8,32,52
   599                        	.member	time,72,18,8,32
   600                        	.member	queue,104,138,8,32,4
   601                        	.member	reserved_1,136,14,8,8
   602                        	.eos
   603                        	.stag	_k_mem_alloc_header,80,57
   604                        	.member	user,0,14,8,8
   605                        	.member	attr,8,14,8,8
   606                        	.member	size,16,18,8,32
   607                        	.member	virtual,48,129,8,32
   608                        	.eos
   609                        	.line	129
   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",6
   611                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",0
   612                        	.line	565
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",7
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",0
   615                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Jul 29 2021 11:55                                                Page 13


                    space\FXOS-Beta\src\fxfont.h",0
   616                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   617                        	.line	1064
   618                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfont.h",6
   619                        	.line	74
   620                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxgfx.h",5
   621                        	.stag	_click_detected,64,58
   622                        	.member	window,0,138,8,32,30
   623                        	.member	handler,32,641,8,32
   624                        	.eos
   625                        	.stag	_current_palette_map,400,59
   626                        	.member	CUR_DESKTOP,0,5,8,16
   627                        	.member	CUR_BACKGROUND,16,5,8,16
   628                        	.member	CUR_FONT,32,5,8,16
   629                        	.member	CUR_SELECTED_FONT,48,5,8,16
   630                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   631                        	.member	CUR_WINDOWFRAME,80,5,8,16
   632                        	.member	CUR_WINDOWBORDER,96,5,8,16
   633                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   634                        	.member	CUR_MENU,128,5,8,16
   635                        	.member	CUR_GADGET,144,5,8,16
   636                        	.member	CUR_COLOR,160,101,8,0,15
   637                        	.eos
   638                        	.line	359
   639                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxwindowmanager.h",8
   640                        	.stag	_fxos_winman_vtable,160,60
   641                        	.member	Events,0,641,8,32
   642                        	.member	ConfigureWindowManager,32,656,8,32
   643                        	.member	ProcessWindowEvent,64,8833,8,32
   644                        	.member	QueryWindowManager,96,656,8,32
   645                        	.member	DoWndProcs,128,641,8,32
   646                        	.eos
   647                        	.stag	fake61_,64,61
   648                        	.member	type,0,16,8,16
   649                        	.member	size,16,16,8,16
   650                        	.member	desktopAction,32,129,8,32
   651                        	.eos
   652                        	.stag	fake62_,96,62
   653                        	.member	type,0,16,8,16
   654                        	.member	caption,16,138,8,32,52
   655                        	.member	buttonType,48,16,8,16
   656                        	.member	x,64,5,8,16
   657                        	.member	y,80,5,8,16
   658                        	.eos
   659                        	.stag	_childMessage_t,64,63
   660                        	.member	msgType,0,16,8,16
   661                        	.member	msgData,16,129,8,32
   662                        	.member	dataSize,48,16,8,16
   663                        	.eos
   664                        	.line	591
   665                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxeventmanager.h",9
   666                        	.stag	_fx_main_loopvars,16,64
   667                        	.member	dummy,0,5,8,16
  Thu Jul 29 2021 11:55                                                Page 14


   668                        	.eos
   669                        	.stag	_fxMouseMessageData,64,65
   670                        	.member	button1,0,14,8,8
   671                        	.member	button2,8,14,8,8
   672                        	.member	button3,16,14,8,8
   673                        	.member	button4,24,14,8,8
   674                        	.member	x,32,16,8,16
   675                        	.member	y,48,16,8,16
   676                        	.eos
   677                        	.utag	marshalled_data,32,66
   678                        	.member	byteValue,0,14,11,8
   679                        	.member	verbValue,0,110,11,0,2
   680                        	.member	intValue,0,16,11,16
   681                        	.member	longValue,0,18,11,32
   682                        	.member	pointerValue,0,129,11,32
   683                        	.eos
   684                        	.stag	_fx_eventProcess,64,67
   685                        	.member	process,0,138,8,32,17
   686                        	.member	eventProc,32,641,8,32
   687                        	.eos
   688                        	.stag	_mouse_msg_state,184,68
   689                        	.member	lastEvent,0,18,8,32
   690                        	.member	buttonLeftDown,32,14,8,8
   691                        	.member	lastLeftDown,40,18,8,32
   692                        	.member	buttonRightDown,72,14,8,8
   693                        	.member	lastRightDown,80,18,8,32
   694                        	.member	buttonMiddleDown,112,14,8,8
   695                        	.member	lastMiddleDown,120,18,8,32
   696                        	.member	lastX,152,16,8,16
   697                        	.member	lastY,168,16,8,16
   698                        	.eos
   699                        	.stag	_fxos_eventmanager_vtable,192,69
   700                        	.member	EventQueue,0,138,8,32,4
   701                        	.member	Init,32,8833,8,32
   702                        	.member	Run,64,656,8,32
   703                        	.member	Configure,96,656,8,32
   704                        	.member	Query,128,656,8,32
   705                        	.member	Uninit,160,641,8,32
   706                        	.eos
   707                        	.stag	_k_clipboard_data,168,70
   708                        	.member	type,0,14,8,8
   709                        	.member	readable,8,110,8,0,16
   710                        	.member	data,136,129,8,32
   711                        	.eos
   712                        	.line	565
   713                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxconsole.h",18
   714                        	.stag	_fx_spinner_ctx,48,71
   715                        	.member	index,0,5,8,16
   716                        	.member	spinner,16,142,8,32
   717                        	.eos
   718                        	.stag	_fx_console_ctx,1144,72
   719                        	.member	lineBufferIndex,0,5,8,16
   720                        	.member	lineBuffer,16,110,8,0,128
   721                        	.member	isShifted,1040,14,8,8
   722                        	.member	userData,1048,129,8,32
   723                        	.member	screenBuffer,1080,129,8,32
   724                        	.member	Reserved1,1112,129,8,32
  Thu Jul 29 2021 11:55                                                Page 15


   725                        	.eos
   726                        	.stag	_token,64,73
   727                        	.member	type,0,5,8,16
   728                        	.member	depth,16,16,8,16
   729                        	.member	text,32,142,8,32
   730                        	.eos
   731                        	.stag	_command_args,64,74
   732                        	.member	proc,0,656,8,32
   733                        	.member	tokens,32,138,8,32,2
   734                        	.eos
   735                        	.line	208
   736                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",23
   737                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxstring.h",0
   738                        	.line	139
   739                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",24
   740                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   741                        	.line	118
   742                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",25
   743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff.h",0
   744                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ffconf.h",0
   745                        	.line	298
   746                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff.h",29
   747                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxtypes.h",0
   748                        	.line	1064
   749                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\ff.h",30
   750                        	.stag	fake75_,4504,75
   751                        	.member	fs_type,0,14,8,8
   752                        	.member	pdrv,8,14,8,8
   753                        	.member	n_fats,16,14,8,8
   754                        	.member	wflag,24,14,8,8
   755                        	.member	fsi_flag,32,14,8,8
   756                        	.member	id,40,5,8,16
   757                        	.member	n_rootdir,56,5,8,16
   758                        	.member	csize,72,5,8,16
   759                        	.member	lfnbuf,88,144,8,32
   760                        	.member	last_clst,120,18,8,32
   761                        	.member	free_clst,152,18,8,32
   762                        	.member	n_fatent,184,18,8,32
   763                        	.member	fsize,216,18,8,32
   764                        	.member	volbase,248,18,8,32
   765                        	.member	fatbase,280,18,8,32
   766                        	.member	dirbase,312,18,8,32
   767                        	.member	database,344,18,8,32
   768                        	.member	winsect,376,18,8,32
   769                        	.member	win,408,110,8,0,512
   770                        	.eos
   771                        	.stag	fake76_,128,76
   772                        	.member	fs,0,138,8,32,75
  Thu Jul 29 2021 11:55                                                Page 16


   773                        	.member	id,32,5,8,16
   774                        	.member	attr,48,14,8,8
   775                        	.member	stat,56,14,8,8
   776                        	.member	sclust,64,18,8,32
   777                        	.member	objsize,96,18,8,32
   778                        	.eos
   779                        	.stag	fake77_,4400,77
   780                        	.member	obj,0,10,8,128,76
   781                        	.member	flag,128,14,8,8
   782                        	.member	err,136,14,8,8
   783                        	.member	fptr,144,18,8,32
   784                        	.member	clust,176,18,8,32
   785                        	.member	sect,208,18,8,32
   786                        	.member	dir_sect,240,18,8,32
   787                        	.member	dir_ptr,272,142,8,32
   788                        	.member	buf,304,110,8,0,512
   789                        	.eos
   790                        	.stag	fake78_,416,78
   791                        	.member	obj,0,10,8,128,76
   792                        	.member	dptr,128,18,8,32
   793                        	.member	clust,160,18,8,32
   794                        	.member	sect,192,18,8,32
   795                        	.member	dir,224,142,8,32
   796                        	.member	fn,256,110,8,0,12
   797                        	.member	blk_ofs,352,18,8,32
   798                        	.member	pat,384,142,8,32
   799                        	.eos
   800                        	.stag	fake79_,2224,79
   801                        	.member	fsize,0,18,8,32
   802                        	.member	fdate,32,5,8,16
   803                        	.member	ftime,48,5,8,16
   804                        	.member	fattrib,64,14,8,8
   805                        	.member	altname,72,110,8,0,13
   806                        	.member	fname,176,110,8,0,256
   807                        	.eos
   808                        	.stag	fake80_,80,80
   809                        	.member	fmt,0,14,8,8
   810                        	.member	n_fat,8,14,8,8
   811                        	.member	align,16,16,8,16
   812                        	.member	n_root,32,16,8,16
   813                        	.member	au_size,48,18,8,32
   814                        	.eos
   815                        	.line	429
   816                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxos.h",26
   817                        	.line	30
   818                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",5
   819                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxnode.h",0
   820                        	.line	118
   821                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxkernel.h",6
   822                        	.stag	_fx_api_call_table,8192,81
   823                        	.member	call_table,0,1121,8,32,256
   824                        	.eos
   825                        	.stag	_fx_zero_page_irq_data,32,82
   826                        	.member	data,0,110,8,0,4
  Thu Jul 29 2021 11:55                                                Page 17


   827                        	.eos
   828                        	.stag	_fx_zero_page,720,83
   829                        	.member	fxos_mouse_byte_0,0,14,8,8
   830                        	.member	fxos_mouse_byte_1,8,14,8,8
   831                        	.member	fxos_mouse_byte_2,16,14,8,8
   832                        	.member	fxos_mouse_byte_t,24,14,8,8
   833                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   834                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   835                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   836                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   837                        	.member	fxos_key_byte_0,64,14,8,8
   838                        	.member	fxos_key_byte_1,72,14,8,8
   839                        	.member	fxos_key_byte_2,80,14,8,8
   840                        	.member	fxos_mouse_ctl,88,14,8,8
   841                        	.member	fxos_mouse_index,96,14,8,8
   842                        	.member	fxos_mouse_status,104,14,8,8
   843                        	.member	Endianness,112,16,8,16
   844                        	.member	VersionMajor,128,16,8,16
   845                        	.member	VersionMinor,144,16,8,16
   846                        	.member	VersionRelease,160,16,8,16
   847                        	.member	topMemory,176,18,8,32
   848                        	.member	bottomMemory,208,18,8,32
   849                        	.member	availableMemory,240,18,8,32
   850                        	.member	availableMemoryK,272,18,8,32
   851                        	.member	availableHeapMemory,304,18,8,32
   852                        	.member	availableHeapMemoryK,336,18,8,32
   853                        	.member	fxos_console_row,368,16,8,16
   854                        	.member	fxos_console_col,384,16,8,16
   855                        	.member	executive,400,129,8,32
   856                        	.member	eventmanager,432,129,8,32
   857                        	.member	devicemanager,464,129,8,32
   858                        	.member	windowmanager,496,129,8,32
   859                        	.member	fxos_kernel_api,528,138,8,32,81
   860                        	.member	fxos_dos_api,560,138,8,32,81
   861                        	.member	fxos_gfx_api,592,138,8,32,81
   862                        	.member	fxos_gui_api,624,138,8,32,81
   863                        	.member	fxos_con_api,656,138,8,32,81
   864                        	.member	fxos_reserved_2_api,688,138,8,32,81
   865                        	.eos
   866                        	.stag	_fx_environment,96,84
   867                        	.member	variables,0,142,8,32
   868                        	.member	reserved1,32,5,8,16
   869                        	.member	reserved2,48,5,8,16
   870                        	.member	reserved3,64,5,8,16
   871                        	.member	reserved4,80,5,8,16
   872                        	.eos
   873                        	.stag	_debug_byte_bits,8,85
   874                        	.member	bit7,0,14,17,1
   875                        	.member	bit6,1,14,17,1
   876                        	.member	bit5,2,14,17,1
   877                        	.member	bit4,3,14,17,1
   878                        	.member	bit3,4,14,17,1
   879                        	.member	bit2,5,14,17,1
   880                        	.member	bit1,6,14,17,1
   881                        	.member	bit0,7,14,17,1
   882                        	.eos
   883                        	.stag	_k_segmentheader,160,86
   884                        	.member	version_major,0,14,8,8
  Thu Jul 29 2021 11:55                                                Page 18


   885                        	.member	version_minor,8,14,8,8
   886                        	.member	length,16,5,8,16
   887                        	.member	segment_start_addr,32,7,8,32
   888                        	.member	segment_end_addr,64,7,8,32
   889                        	.member	segment_size,96,7,8,32
   890                        	.member	main_entry_addr,128,7,8,32
   891                        	.eos
   892                        	.stag	_fx_device_driver,776,87
   893                        	.member	name,0,110,8,0,32
   894                        	.member	version,256,110,8,0,16
   895                        	.member	hmajor,384,110,8,0,8
   896                        	.member	hminor,448,110,8,0,8
   897                        	.member	type,512,14,8,8
   898                        	.member	designation,520,110,8,0,6
   899                        	.member	irq_ctl,568,16,8,16
   900                        	.member	f_driver_irq,584,129,8,32
   901                        	.member	driver_context,616,129,8,32
   902                        	.member	f_driver_load,648,129,8,32
   903                        	.member	f_driver_read,680,129,8,32
   904                        	.member	f_driver_write,712,129,8,32
   905                        	.member	f_driver_unload,744,129,8,32
   906                        	.eos
   907                        	.stag	_fx_block_device_driver,808,88
   908                        	.member	name,0,110,8,0,32
   909                        	.member	version,256,110,8,0,16
   910                        	.member	hmajor,384,110,8,0,8
   911                        	.member	hminor,448,110,8,0,8
   912                        	.member	type,512,14,8,8
   913                        	.member	designation,520,110,8,0,6
   914                        	.member	irq_ctl,568,16,8,16
   915                        	.member	f_driver_irq,584,129,8,32
   916                        	.member	driver_context,616,129,8,32
   917                        	.member	f_driver_load,648,129,8,32
   918                        	.member	f_driver_read,680,129,8,32
   919                        	.member	f_driver_write,712,129,8,32
   920                        	.member	f_driver_unload,744,129,8,32
   921                        	.member	f_driver_command,776,129,8,32
   922                        	.eos
   923                        	.stag	_k_irq_chain,128,89
   924                        	.member	handlers,0,5217,8,32,4
   925                        	.eos
   926                        	.line	473
   927                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfloppy.c",2
   928                        ;#include "fxfloppy.h"
   929                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfloppy.h",0
   930                        	.line	70
   931                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfloppy.c",3
   932                        ;/* Floppy controller driver. Supports only 3.5" H
                    D 1440 KiB disks */
   933                        ;
   934                        ;#define PORT 0xAF13F0
   935                        ;
   936                        ;#define SRA (0xAF13F0)   //Status register A
   937                        ;#define SRB (0xAF13F1)   //Status register B
   938                        ;
  Thu Jul 29 2021 11:55                                                Page 19


   939                        ;#define FDC_DOR (0xAF13F2)   //Digital output reg
                    ister
   940                        ;//#define FDC_TDR (PORT+3)   //Tape drive registe
                    r
   941                        ;#define FDC_MSR (0xAF13F4)   //Main state registe
                    r
   942                        ;#define FDC_DRS (0xAF13F4)   //Datarate select re
                    gister
   943                        ;#define FDC_DATA (0xAF13F5)  //Data FIFO
   944                        ;
   945                        ;#define FDC_DIR (0xAF13F7)   //Digital input regi
                    ster
   946                        ;#define FDC_CCR (0xAF13F7)   //Configuration cont
                    rol register
   947                        ;
   948                        ;/* DOR flags */
   949                        ;#define DOR_IRQ   0x08
   950                        ;#define DOR_RESET 0x04
   951                        ;
   952                        ;/* MSR flags */
   953                        ;#define MSR_RQM  0x80
   954                        ;#define MSR_DIO  0x40
   955                        ;#define MSR_NDMA 0x20
   956                        ;#define MSR_CB   0x10
   957                        ;
   958                        ;#define MSR_ACTD 0x08
   959                        ;#define MSR_ACTC 0x04
   960                        ;#define MSR_ACTB 0x02
   961                        ;#define MSR_ACTA 0x01
   962                        ;
   963                        ;//#define MSR_OK_READ (MSR_RQM | MSR_DIO | MSR_CB
                    )
   964                        ;#define MSR_OK_READ (MSR_RQM | MSR_DIO)
   965                        ;
   966                        ;/* DIR flags */
   967                        ;#define DIR_DC 0x80
   968                        ;
   969                        ;#define SECTOR_SIZE 512
   970                        ;#define SEC_PER_TRACK 18
   971                        ;
   972                        ;#define MS 1000
   973                        ;
   974                        ;#define FL_HLT (8*MS)
   975                        ;#define FL_SPIN_UP (400*MS)
   976                        ;#define FL_SPIN_DN (3000*MS)
   977                        ;#define FL_SEL_D (20*MS)
   978                        ;#define FL_INT_TMT (30000*MS)
   979                        ;
   980                        ;#define CMD_SPECIFY  0x03
   981                        ;#define CMD_WRITE    0x45
   982                        ;#define CMD_READ     0x46
   983                        ;#define CMD_SENSEI   0x08
   984                        ;#define CMD_READID   0x4A
   985                        ;#define CMD_RECAL    0x07
   986                        ;#define CMD_SEEK     0x0F
   987                        ;#define CMD_VERSION  0x10
   988                        ;#define CMD_CONF     0x13
   989                        ;/* Bits of main status register */
  Thu Jul 29 2021 11:55                                                Page 20


   990                        ;#define STATUS_BUSYMASK	0x0F		/* drive
                     busy mask */
   991                        ;#define STATUS_BUSY		0x10		
                    /* FDC busy */
   992                        ;#define STATUS_NON_DMA	0x20		/* 0- DM
                    A mode */
   993                        ;#define STATUS_DIR		0x40		
                    /* 0- cpu->fdc */
   994                        ;#define STATUS_READY	0x80		/* Data 
                    reg ready */
   995                        ;
   996                        ;/* Values for FD_COMMAND */
   997                        ;#define FD_RECALIBRATE		0x07	/* move 
                    to track 0 */
   998                        ;#define FD_SEEK			0x0F	/* seek 
                    track */
   999                        ;#define FD_READ			0xA6	/* read 
                    with MT, SKip deleted */
  1000                        ;#define FD_WRITE		0xC5	/* write with MT
                    , MFM */
  1001                        ;#define FD_SENSEI		0x08	/* Sense
                     Interrupt Status */
  1002                        ;#define FD_SPECIFY		0x03	/* speci
                    fy HUT etc */
  1003                        ;#define FD_FORMAT		0x4D	/* forma
                    t one track */
  1004                        ;#define FD_VERSION		0x10	/* get v
                    ersion code */
  1005                        ;#define FD_CONFIGURE		0x13	/* confi
                    gure FIFO operation */
  1006                        ;#define FD_PERPENDICULAR	0x12	/* perpendicular
                     r/w mode */
  1007                        ;#define FD_GETSTATUS		0x04	/* read 
                    ST3 */
  1008                        ;#define FD_DUMPREGS		0x0E	/* dump 
                    the contents of the fdc regs */
  1009                        ;#define FD_READID		0xEA	/* print
                    s the header of a sector */
  1010                        ;#define FD_UNLOCK		0x14	/* Fifo 
                    config unlock */
  1011                        ;#define FD_LOCK			0x94	/* Fifo 
                    config lock */
  1012                        ;#define FD_RSEEK_OUT		0x8f	/* seek 
                    out (i.e. to lower tracks) */
  1013                        ;#define FD_RSEEK_IN		0xcf	/* seek 
                    in (i.e. to higher tracks) */
  1014                        ;
  1015                        ;/* Parameters for a 1.44 3.5" disk */
  1016                        ;#define DISK_H1440_SIZE       2880
  1017                        ;#define DISK_H1440_SECT       18
  1018                        ;#define DISK_H1440_HEAD       2
  1019                        ;#define DISK_H1440_TRACK      80
  1020                        ;#define DISK_H1440_STRETCH    0
  1021                        ;#define DISK_H1440_GAP        0x1B
  1022                        ;#define DISK_H1440_RATE       0x00
  1023                        ;#define DISK_H1440_SPEC1      0xCF
  1024                        ;#define DISK_H1440_FMT_GAP    0x6C
  1025                        ;
  Thu Jul 29 2021 11:55                                                Page 21


  1026                        ;/* Parameters for a 1.44 3.5" drive */
  1027                        ;#define DRIVE_H1440_MAX_DTR          500
  1028                        ;#define DRIVE_H1440_HLT              16   /* ms *
                    /
  1029                        ;#define DRIVE_H1440_HUT              16   /* ms *
                    /
  1030                        ;#define DRIVE_H1440_SRT              4000 /* us *
                    /
  1031                        ;#define DRIVE_H1440_SPINUP           400  /* ms *
                    /
  1032                        ;#define DRIVE_H1440_SPINDOWN         3000 /* ms *
                    /
  1033                        ;#define DRIVE_H1440_SPINDOWN_OFFSET  10
  1034                        ;#define DRIVE_H1440_SELECT_DELAY     20  /* ms */
  1035                        ;#define DRIVE_H1440_RPS              5
  1036                        ;#define DRIVE_H1440_TRACKS           83
  1037                        ;#define DRIVE_H1440_TIMEOUT          3000 /* ms *
                    /
  1038                        ;#define DRIVE_H1440_INTERLEAVE_SECT  20
  1039                        ;
  1040                        ;/* Floppy drive configuration */
  1041                        ;#define FIFO_DEPTH            10
  1042                        ;#define USE_IMPLIED_SEEK      0
  1043                        ;#define USE_FIFO              1
  1044                        ;#define FIFO_THRESHOLD        10
  1045                        ;#define TRACK_PRECOMPENSATION 0
  1046                        ;
  1047                        ;#define SLOW_FLOPPY 0
  1048                        ;
  1049                        ;#define FD_RESET_DELAY 20 /* microseconds */
  1050                        ;
  1051                        ;
  1052                        ;#define WAIT_COND(c) while (!(c)) {}
  1053                        ;
  1054                        ;BOOL irq_signaled = FALSE;
  1055                        	data
  1056                        	xdef	~~irq_signaled
  1057                        ~~irq_signaled:
  1058 00:0000: 00           	db	$0
  1059 00:0001:              	ends
  1060                        ;
  1061                        ;typedef struct
  1062                        ;{
  1063                        ;	UINT track;
  1064                        ;	int motstate;
  1065                        ;	int dchg;
  1066                        ;} drive_state_t;
  1067                        	.stag	fake90_,48,90
  1068                        	.member	track,0,16,8,16
  1069                        	.member	motstate,16,5,8,16
  1070                        	.member	dchg,32,5,8,16
  1071                        	.eos
  1072                        ;
  1073                        ;//static volatile int irq_signaled = 0;
  1074                        ;static UCHAR reg_dor, reg_sr0, reg_sr1, reg_sr2;
  1075                        ;
  1076                        ;static drive_state_t drives[4];
  1077                        ;static UCHAR cur_drive = 0;
  Thu Jul 29 2021 11:55                                                Page 22


  1078                        	data
  1079                        ~~cur_drive:
  1080 00:0001: 00           	db	$0
  1081 00:0002:              	ends
  1082                        ;static int motoff_timer;
  1083                        ;
  1084                        ;static int status_sz;
  1085                        ;static UCHAR status[7];
  1086                        ;
  1087                        ;UINT  floppybufferIndex = 0;
  1088                        	data
  1089                        	xdef	~~floppybufferIndex
  1090                        ~~floppybufferIndex:
  1091 00:0002: 00 00        	dw	$0
  1092 00:0004:              	ends
  1093                        ;UCHAR floppybuffer[512];
  1094                        ;
  1095                        ;
  1096                        ;static void io_wait(void)
  1097                        ;{
  1098                        	.line	149
  1099                        	.line	150
  1100                        	code
  1101                        	func
  1102                        	.function	150
  1103                        ~~io_wait:
  1104                        	longa	on
  1105                        	longi	on
  1106 00:0000: 3B           	tsc
  1107 00:0001: 38           	sec
  1108 00:0002: E9 00 00     	sbc	#L2
  1109 00:0005: 1B           	tcs
  1110 00:0006: 0B           	phd
  1111 00:0007: 5B           	tcd
  1112                        	.block	150
  1113                        ;	sleep(DRIVE_H1440_SPINUP);
  1114                        	.line	151
  1115 00:0008: F4 90 01     	pea	#<$190
  1116 00:000B: 22 xx xx xx  	jsl	~~sleep
  1117                        ;}
  1118                        	.line	152
  1119                        L5:
  1120 00:000F: 2B           	pld
  1121 00:0010: 3B           	tsc
  1122 00:0011: 18           	clc
  1123 00:0012: 69 00 00     	adc	#L2
  1124 00:0015: 1B           	tcs
  1125 00:0016: 6B           	rtl
  1126                        	.endblock	152
  1127             00000000   L2	equ	0
  1128             00000001   L3	equ	1
  1129                        	ends
  1130                        	efunc
  1131                        	.endfunc	152,1,0
  1132                        	.line	152
  1133                        ;
  1134                        ;static void lba_2_chs(ULONG lba, UINT *track, UIN
                    T *head, UINT *sector)
  Thu Jul 29 2021 11:55                                                Page 23


  1135                        ;{
  1136                        	.line	154
  1137                        	.line	155
  1138                        	code
  1139                        	func
  1140                        	.function	155
  1141                        ~~lba_2_chs:
  1142                        	longa	on
  1143                        	longi	on
  1144 00:0017: 3B           	tsc
  1145 00:0018: 38           	sec
  1146 00:0019: E9 08 00     	sbc	#L6
  1147 00:001C: 1B           	tcs
  1148 00:001D: 0B           	phd
  1149 00:001E: 5B           	tcd
  1150             00000004   lba_0	set	4
  1151             00000008   track_0	set	8
  1152             0000000C   head_0	set	12
  1153             00000010   sector_0	set	16
  1154                        	.block	155
  1155                        ;	*head	 = ((lba % (2 * SEC_PER_TRACK)) / SEC_PE
                    R_TRACK);
  1156                        	.sym	lba,4,18,6,32
  1157                        	.sym	track,8,144,6,32
  1158                        	.sym	head,12,144,6,32
  1159                        	.sym	sector,16,144,6,32
  1160                        	.line	156
  1161 00:001F: F4 00 00     	pea	#^$24
  1162 00:0022: F4 24 00     	pea	#<$24
  1163 00:0025: D4 0E        	pei	<L6+lba_0+2
  1164 00:0027: D4 0C        	pei	<L6+lba_0
  1165                        	xref	~~~lumd
  1166 00:0029: 22 xx xx xx  	jsl	~~~lumd
  1167 00:002D: 85 01        	sta	<R0
  1168 00:002F: 86 03        	stx	<R0+2
  1169 00:0031: F4 00 00     	pea	#^$12
  1170 00:0034: F4 12 00     	pea	#<$12
  1171 00:0037: D4 03        	pei	<R0+2
  1172 00:0039: D4 01        	pei	<R0
  1173                        	xref	~~~ludv
  1174 00:003B: 22 xx xx xx  	jsl	~~~ludv
  1175 00:003F: 85 01        	sta	<R0
  1176 00:0041: 86 03        	stx	<R0+2
  1177 00:0043: A5 01        	lda	<R0
  1178 00:0045: 87 14        	sta	[<L6+head_0]
  1179                        ;	*sector  = ((lba % (2 * SEC_PER_TRACK)) % SEC_PE
                    R_TRACK + 1);
  1180                        	.line	157
  1181 00:0047: F4 00 00     	pea	#^$24
  1182 00:004A: F4 24 00     	pea	#<$24
  1183 00:004D: D4 0E        	pei	<L6+lba_0+2
  1184 00:004F: D4 0C        	pei	<L6+lba_0
  1185                        	xref	~~~lumd
  1186 00:0051: 22 xx xx xx  	jsl	~~~lumd
  1187 00:0055: 85 01        	sta	<R0
  1188 00:0057: 86 03        	stx	<R0+2
  1189 00:0059: F4 00 00     	pea	#^$12
  1190 00:005C: F4 12 00     	pea	#<$12
  Thu Jul 29 2021 11:55                                                Page 24


  1191 00:005F: D4 03        	pei	<R0+2
  1192 00:0061: D4 01        	pei	<R0
  1193                        	xref	~~~lumd
  1194 00:0063: 22 xx xx xx  	jsl	~~~lumd
  1195 00:0067: 85 01        	sta	<R0
  1196 00:0069: 86 03        	stx	<R0+2
  1197 00:006B: 18           	clc
  1198 00:006C: A9 01 00     	lda	#$1
  1199 00:006F: 65 01        	adc	<R0
  1200 00:0071: 85 05        	sta	<R1
  1201 00:0073: A9 00 00     	lda	#$0
  1202 00:0076: 65 03        	adc	<R0+2
  1203 00:0078: 85 07        	sta	<R1+2
  1204 00:007A: A5 05        	lda	<R1
  1205 00:007C: 87 18        	sta	[<L6+sector_0]
  1206                        ;	*track 	 = (lba / (2 * SEC_PER_TRACK));
  1207                        	.line	158
  1208 00:007E: F4 00 00     	pea	#^$24
  1209 00:0081: F4 24 00     	pea	#<$24
  1210 00:0084: D4 0E        	pei	<L6+lba_0+2
  1211 00:0086: D4 0C        	pei	<L6+lba_0
  1212                        	xref	~~~ludv
  1213 00:0088: 22 xx xx xx  	jsl	~~~ludv
  1214 00:008C: 85 01        	sta	<R0
  1215 00:008E: 86 03        	stx	<R0+2
  1216 00:0090: A5 01        	lda	<R0
  1217 00:0092: 87 10        	sta	[<L6+track_0]
  1218                        ;}
  1219                        	.line	159
  1220                        L9:
  1221 00:0094: A5 0A        	lda	<L6+2
  1222 00:0096: 85 1A        	sta	<L6+2+16
  1223 00:0098: A5 09        	lda	<L6+1
  1224 00:009A: 85 19        	sta	<L6+1+16
  1225 00:009C: 2B           	pld
  1226 00:009D: 3B           	tsc
  1227 00:009E: 18           	clc
  1228 00:009F: 69 18 00     	adc	#L6+16
  1229 00:00A2: 1B           	tcs
  1230 00:00A3: 6B           	rtl
  1231                        	.endblock	159
  1232             00000008   L6	equ	8
  1233             00000009   L7	equ	9
  1234                        	ends
  1235                        	efunc
  1236                        	.endfunc	159,9,8
  1237                        	.line	159
  1238                        ;
  1239                        ;int sendbyte(UCHAR d)
  1240                        ;{
  1241                        	.line	161
  1242                        	.line	162
  1243                        	code
  1244                        	xdef	~~sendbyte
  1245                        	func
  1246                        	.function	162
  1247                        ~~sendbyte:
  1248                        	longa	on
  Thu Jul 29 2021 11:55                                                Page 25


  1249                        	longi	on
  1250 00:00A4: 3B           	tsc
  1251 00:00A5: 38           	sec
  1252 00:00A6: E9 03 00     	sbc	#L10
  1253 00:00A9: 1B           	tcs
  1254 00:00AA: 0B           	phd
  1255 00:00AB: 5B           	tcd
  1256             00000004   d_0	set	4
  1257                        	.block	162
  1258                        ;	int i;
  1259                        ;
  1260                        ;	UCHAR msr;
  1261                        ;
  1262                        ;	for (i = 0; i < 0x0fff; i++)
  1263             00000000   i_1	set	0
  1264             00000002   msr_1	set	2
  1265                        	.sym	i,0,5,1,16
  1266                        	.sym	msr,2,14,1,8
  1267                        	.sym	d,4,14,6,8
  1268                        	.line	167
  1269 00:00AC: 64 01        	stz	<L11+i_1
  1270                        L10003:
  1271                        ;	{
  1272                        	.line	168
  1273                        ;		msr = inportb(FDC_MSR);
  1274                        	.line	169
  1275 00:00AE: E2 20        	sep	#$20
  1276                        	longa	off
  1277 00:00B0: AF F4 13 AF  	lda	>11473908
  1278 00:00B4: 85 03        	sta	<L11+msr_1
  1279 00:00B6: C2 20        	rep	#$20
  1280                        	longa	on
  1281                        ;		//if ((msr & MSR_RQM) && !(msr & MSR_DIO
                    ))
  1282                        ;		k_debug_bits("sendbyte:",msr);
  1283                        	.line	171
  1284 00:00B8: D4 03        	pei	<L11+msr_1
  1285 00:00BA: F4 xx xx     	pea	#^L1
  1286 00:00BD: F4 xx xx     	pea	#<L1
  1287 00:00C0: 22 xx xx xx  	jsl	~~k_debug_bits
  1288                        ;		//if ((msr & (STATUS_READY|STATUS_DIR|ST
                    ATUS_NON_DMA)))
  1289                        ;		if ((msr & MSR_RQM) && !(msr & MSR_DIO))
  1290                        	.line	173
  1291                        ;		{
  1292 00:00C4: E2 20        	sep	#$20
  1293                        	longa	off
  1294 00:00C6: A5 03        	lda	<L11+msr_1
  1295 00:00C8: 29 80        	and	#<$80
  1296 00:00CA: C2 20        	rep	#$20
  1297                        	longa	on
  1298 00:00CC: D0 03        	bne	L13
  1299 00:00CE: 82 2C 00     	brl	L10004
  1300                        L13:
  1301 00:00D1: E2 20        	sep	#$20
  1302                        	longa	off
  1303 00:00D3: A5 03        	lda	<L11+msr_1
  1304 00:00D5: 29 40        	and	#<$40
  Thu Jul 29 2021 11:55                                                Page 26


  1305 00:00D7: C2 20        	rep	#$20
  1306                        	longa	on
  1307 00:00D9: F0 03        	beq	L14
  1308 00:00DB: 82 1F 00     	brl	L10004
  1309                        L14:
  1310                        	.line	174
  1311                        ;			outportb(FDC_DATA, d);
  1312                        	.line	175
  1313 00:00DE: E2 20        	sep	#$20
  1314                        	longa	off
  1315 00:00E0: A5 07        	lda	<L10+d_0
  1316 00:00E2: 8F F5 13 AF  	sta	>11473909
  1317 00:00E6: C2 20        	rep	#$20
  1318                        	longa	on
  1319                        ;			return 0;
  1320                        	.line	176
  1321 00:00E8: A9 00 00     	lda	#$0
  1322                        L15:
  1323 00:00EB: A8           	tay
  1324 00:00EC: A5 05        	lda	<L10+2
  1325 00:00EE: 85 07        	sta	<L10+2+2
  1326 00:00F0: A5 04        	lda	<L10+1
  1327 00:00F2: 85 06        	sta	<L10+1+2
  1328 00:00F4: 2B           	pld
  1329 00:00F5: 3B           	tsc
  1330 00:00F6: 18           	clc
  1331 00:00F7: 69 05 00     	adc	#L10+2
  1332 00:00FA: 1B           	tcs
  1333 00:00FB: 98           	tya
  1334 00:00FC: 6B           	rtl
  1335                        ;		}
  1336                        	.line	177
  1337                        ;		io_wait();
  1338                        L10004:
  1339                        	.line	178
  1340 00:00FD: 22 xx xx xx  	jsl	~~io_wait
  1341                        ;	}
  1342                        	.line	179
  1343                        L10001:
  1344 00:0101: E6 01        	inc	<L11+i_1
  1345 00:0103: 38           	sec
  1346 00:0104: A5 01        	lda	<L11+i_1
  1347 00:0106: E9 FF 0F     	sbc	#<$fff
  1348 00:0109: 70 03        	bvs	L16
  1349 00:010B: 49 00 80     	eor	#$8000
  1350                        L16:
  1351 00:010E: 30 03        	bmi	L17
  1352 00:0110: 82 9B FF     	brl	L10003
  1353                        L17:
  1354                        L10002:
  1355                        ;	k_debug_string("sendbyte::NOSEND\r\n");
  1356                        	.line	180
  1357 00:0113: F4 xx xx     	pea	#^L1+10
  1358 00:0116: F4 xx xx     	pea	#<L1+10
  1359 00:0119: 22 xx xx xx  	jsl	~~k_debug_string
  1360                        ;	return -1; /* timeout */
  1361                        	.line	181
  1362 00:011D: A9 FF FF     	lda	#$ffff
  Thu Jul 29 2021 11:55                                                Page 27


  1363 00:0120: 82 C8 FF     	brl	L15
  1364                        ;}
  1365                        	.line	182
  1366                        	.endblock	182
  1367             00000003   L10	equ	3
  1368             00000001   L11	equ	1
  1369                        	ends
  1370                        	efunc
  1371                        	.endfunc	182,1,3
  1372                        	.line	182
  1373                        	data
  1374                        L1:
  1375 00:0004: 73 65 6E 64  	db	$73,$65,$6E,$64,$62,$79,$74,$65,$3A,$00,
                    $73,$65,$6E,$64,$62
       00:0008: 62 79 74 65 
       00:000C: 3A 00 73 65 
       00:0010: 6E 64 62 
  1376 00:0013: 79 74 65 3A  	db	$79,$74,$65,$3A,$3A,$4E,$4F,$53,$45,$4E,
                    $44,$0D,$0A,$00
       00:0017: 3A 4E 4F 53 
       00:001B: 45 4E 44 0D 
       00:001F: 0A 00 
  1377 00:0021:              	ends
  1378                        ;
  1379                        ;int getbyte()
  1380                        ;{
  1381                        	.line	184
  1382                        	.line	185
  1383                        	code
  1384                        	xdef	~~getbyte
  1385                        	func
  1386                        	.function	185
  1387                        ~~getbyte:
  1388                        	longa	on
  1389                        	longi	on
  1390 00:0123: 3B           	tsc
  1391 00:0124: 38           	sec
  1392 00:0125: E9 07 00     	sbc	#L19
  1393 00:0128: 1B           	tcs
  1394 00:0129: 0B           	phd
  1395 00:012A: 5B           	tcd
  1396                        	.block	185
  1397                        ;	int i ;
  1398                        ;
  1399                        ;	UCHAR msr;
  1400                        ;
  1401                        ;	for (i = 0; i < 0x0FF; i++)
  1402             00000000   i_1	set	0
  1403             00000002   msr_1	set	2
  1404                        	.sym	i,0,5,1,16
  1405                        	.sym	msr,2,14,1,8
  1406                        	.line	190
  1407 00:012B: 64 05        	stz	<L20+i_1
  1408                        L10007:
  1409                        ;	{
  1410                        	.line	191
  1411                        ;		msr = inportb(FDC_MSR);
  1412                        	.line	192
  Thu Jul 29 2021 11:55                                                Page 28


  1413 00:012D: E2 20        	sep	#$20
  1414                        	longa	off
  1415 00:012F: AF F4 13 AF  	lda	>11473908
  1416 00:0133: 85 07        	sta	<L20+msr_1
  1417 00:0135: C2 20        	rep	#$20
  1418                        	longa	on
  1419                        ;		if ((msr & MSR_OK_READ) == MSR_OK_READ)
  1420                        	.line	193
  1421                        ;		{
  1422 00:0137: A5 07        	lda	<L20+msr_1
  1423 00:0139: 29 C0 00     	and	#<$c0
  1424 00:013C: 85 01        	sta	<R0
  1425 00:013E: A5 01        	lda	<R0
  1426 00:0140: C9 C0 00     	cmp	#<$c0
  1427 00:0143: F0 03        	beq	L22
  1428 00:0145: 82 11 00     	brl	L10008
  1429                        L22:
  1430                        	.line	194
  1431                        ;			return inportb(FDC_DATA);
  1432                        	.line	195
  1433 00:0148: AF F5 13 AF  	lda	>11473909
  1434 00:014C: 29 FF 00     	and	#$ff
  1435                        L23:
  1436 00:014F: A8           	tay
  1437 00:0150: 2B           	pld
  1438 00:0151: 3B           	tsc
  1439 00:0152: 18           	clc
  1440 00:0153: 69 07 00     	adc	#L19
  1441 00:0156: 1B           	tcs
  1442 00:0157: 98           	tya
  1443 00:0158: 6B           	rtl
  1444                        ;		}
  1445                        	.line	196
  1446                        ;		io_wait();
  1447                        L10008:
  1448                        	.line	197
  1449 00:0159: 22 xx xx xx  	jsl	~~io_wait
  1450                        ;	}
  1451                        	.line	198
  1452                        L10005:
  1453 00:015D: E6 05        	inc	<L20+i_1
  1454 00:015F: 38           	sec
  1455 00:0160: A5 05        	lda	<L20+i_1
  1456 00:0162: E9 FF 00     	sbc	#<$ff
  1457 00:0165: 70 03        	bvs	L24
  1458 00:0167: 49 00 80     	eor	#$8000
  1459                        L24:
  1460 00:016A: 30 03        	bmi	L25
  1461 00:016C: 82 BE FF     	brl	L10007
  1462                        L25:
  1463                        L10006:
  1464                        ;	return -1; /* timeout */
  1465                        	.line	199
  1466 00:016F: A9 FF FF     	lda	#$ffff
  1467 00:0172: 82 DA FF     	brl	L23
  1468                        ;}
  1469                        	.line	200
  1470                        	.endblock	200
  Thu Jul 29 2021 11:55                                                Page 29


  1471             00000007   L19	equ	7
  1472             00000005   L20	equ	5
  1473                        	ends
  1474                        	efunc
  1475                        	.endfunc	200,5,7
  1476                        	.line	200
  1477                        ;
  1478                        ;static int fdc_waitint()
  1479                        ;{
  1480                        	.line	202
  1481                        	.line	203
  1482                        	code
  1483                        	func
  1484                        	.function	203
  1485                        ~~fdc_waitint:
  1486                        	longa	on
  1487                        	longi	on
  1488 00:0175: 3B           	tsc
  1489 00:0176: 38           	sec
  1490 00:0177: E9 02 00     	sbc	#L26
  1491 00:017A: 1B           	tcs
  1492 00:017B: 0B           	phd
  1493 00:017C: 5B           	tcd
  1494                        	.block	203
  1495                        ;	UINT tmout = 0x0FFF;
  1496                        ;
  1497                        ;	/*
  1498                        ;	clock_t s = clock();
  1499                        ;	int tmout;
  1500                        ;	WAIT_COND(!irq_signaled && (tmout = (clock() - s
                     < FL_INT_TMT)));
  1501                        ;	if (!tmout)
  1502                        ;		return -1;
  1503                        ;		*/
  1504                        ;	//sleep(300);
  1505                        ;
  1506                        ;	k_debug_integer("*** fdc_waitint::irq_signaled:"
                    ,irq_signaled);
  1507             00000000   tmout_1	set	0
  1508                        	.sym	tmout,0,16,1,16
  1509 00:017D: A9 FF 0F     	lda	#$fff
  1510 00:0180: 85 01        	sta	<L27+tmout_1
  1511                        	.line	215
  1512 00:0182: AD xx xx     	lda	|~~irq_signaled
  1513 00:0185: 29 FF 00     	and	#$ff
  1514 00:0188: 48           	pha
  1515 00:0189: F4 xx xx     	pea	#^L18
  1516 00:018C: F4 xx xx     	pea	#<L18
  1517 00:018F: 22 xx xx xx  	jsl	~~k_debug_integer
  1518                        ;	while(!irq_signaled)
  1519                        	.line	216
  1520                        L10009:
  1521 00:0193: AD xx xx     	lda	|~~irq_signaled
  1522 00:0196: 29 FF 00     	and	#$ff
  1523 00:0199: F0 03        	beq	L29
  1524 00:019B: 82 0F 00     	brl	L10010
  1525                        L29:
  1526                        ;	{
  Thu Jul 29 2021 11:55                                                Page 30


  1527                        	.line	217
  1528                        ;		//k_debug_integer("*** fdc_waitint::irq_
                    signaled:",irq_signaled);
  1529                        ;		tmout--;
  1530                        	.line	219
  1531 00:019E: C6 01        	dec	<L27+tmout_1
  1532                        ;		if(tmout < 1)
  1533                        	.line	220
  1534                        ;			break;
  1535 00:01A0: A5 01        	lda	<L27+tmout_1
  1536 00:01A2: C9 01 00     	cmp	#<$1
  1537 00:01A5: B0 03        	bcs	L30
  1538 00:01A7: 82 03 00     	brl	L10010
  1539                        L30:
  1540                        ;		//sleep(10);
  1541                        ;	}
  1542                        	.line	223
  1543 00:01AA: 82 E6 FF     	brl	L10009
  1544                        L10010:
  1545                        ;	k_debug_integer("*** fdc_waitint::irq_signaled:"
                    ,irq_signaled);
  1546                        	.line	224
  1547 00:01AD: AD xx xx     	lda	|~~irq_signaled
  1548 00:01B0: 29 FF 00     	and	#$ff
  1549 00:01B3: 48           	pha
  1550 00:01B4: F4 xx xx     	pea	#^L18+31
  1551 00:01B7: F4 xx xx     	pea	#<L18+31
  1552 00:01BA: 22 xx xx xx  	jsl	~~k_debug_integer
  1553                        ;	irq_signaled = FALSE;
  1554                        	.line	225
  1555 00:01BE: E2 20        	sep	#$20
  1556                        	longa	off
  1557 00:01C0: 9C xx xx     	stz	|~~irq_signaled
  1558 00:01C3: C2 20        	rep	#$20
  1559                        	longa	on
  1560                        ;	if (!tmout)
  1561                        	.line	226
  1562                        ;	{
  1563 00:01C5: A5 01        	lda	<L27+tmout_1
  1564 00:01C7: F0 03        	beq	L31
  1565 00:01C9: 82 17 00     	brl	L10011
  1566                        L31:
  1567                        	.line	227
  1568                        ;		k_debug_string("*** fdc_waitint::timeout
                    \r\n");
  1569                        	.line	228
  1570 00:01CC: F4 xx xx     	pea	#^L18+62
  1571 00:01CF: F4 xx xx     	pea	#<L18+62
  1572 00:01D2: 22 xx xx xx  	jsl	~~k_debug_string
  1573                        ;		return -1;
  1574                        	.line	229
  1575 00:01D6: A9 FF FF     	lda	#$ffff
  1576                        L32:
  1577 00:01D9: A8           	tay
  1578 00:01DA: 2B           	pld
  1579 00:01DB: 3B           	tsc
  1580 00:01DC: 18           	clc
  1581 00:01DD: 69 02 00     	adc	#L26
  Thu Jul 29 2021 11:55                                                Page 31


  1582 00:01E0: 1B           	tcs
  1583 00:01E1: 98           	tya
  1584 00:01E2: 6B           	rtl
  1585                        ;	}
  1586                        	.line	230
  1587                        ;	return 0;
  1588                        L10011:
  1589                        	.line	231
  1590 00:01E3: A9 00 00     	lda	#$0
  1591 00:01E6: 82 F0 FF     	brl	L32
  1592                        ;}
  1593                        	.line	232
  1594                        	.endblock	232
  1595             00000002   L26	equ	2
  1596             00000001   L27	equ	1
  1597                        	ends
  1598                        	efunc
  1599                        	.endfunc	232,1,2
  1600                        	.line	232
  1601                        	data
  1602                        L18:
  1603 00:0021: 2A 2A 2A 20  	db	$2A,$2A,$2A,$20,$66,$64,$63,$5F,$77,$61,
                    $69,$74,$69,$6E,$74
       00:0025: 66 64 63 5F 
       00:0029: 77 61 69 74 
       00:002D: 69 6E 74 
  1604 00:0030: 3A 3A 69 72  	db	$3A,$3A,$69,$72,$71,$5F,$73,$69,$67,$6E,
                    $61,$6C,$65,$64,$3A
       00:0034: 71 5F 73 69 
       00:0038: 67 6E 61 6C 
       00:003C: 65 64 3A 
  1605 00:003F: 00 2A 2A 2A  	db	$00,$2A,$2A,$2A,$20,$66,$64,$63,$5F,$77,
                    $61,$69,$74,$69,$6E
       00:0043: 20 66 64 63 
       00:0047: 5F 77 61 69 
       00:004B: 74 69 6E 
  1606 00:004E: 74 3A 3A 69  	db	$74,$3A,$3A,$69,$72,$71,$5F,$73,$69,$67,
                    $6E,$61,$6C,$65,$64
       00:0052: 72 71 5F 73 
       00:0056: 69 67 6E 61 
       00:005A: 6C 65 64 
  1607 00:005D: 3A 00 2A 2A  	db	$3A,$00,$2A,$2A,$2A,$20,$66,$64,$63,$5F,
                    $77,$61,$69,$74,$69
       00:0061: 2A 20 66 64 
       00:0065: 63 5F 77 61 
       00:0069: 69 74 69 
  1608 00:006C: 6E 74 3A 3A  	db	$6E,$74,$3A,$3A,$74,$69,$6D,$65,$6F,$75,
                    $74,$0D,$0A,$00
       00:0070: 74 69 6D 65 
       00:0074: 6F 75 74 0D 
       00:0078: 0A 00 
  1609 00:007A:              	ends
  1610                        ;
  1611                        ;static int fdc_wait(int sensei)
  1612                        ;{
  1613                        	.line	234
  1614                        	.line	235
  1615                        	code
  Thu Jul 29 2021 11:55                                                Page 32


  1616                        	func
  1617                        	.function	235
  1618                        ~~fdc_wait:
  1619                        	longa	on
  1620                        	longi	on
  1621 00:01E9: 3B           	tsc
  1622 00:01EA: 38           	sec
  1623 00:01EB: E9 06 00     	sbc	#L34
  1624 00:01EE: 1B           	tcs
  1625 00:01EF: 0B           	phd
  1626 00:01F0: 5B           	tcd
  1627             00000004   sensei_0	set	4
  1628                        	.block	235
  1629                        ;	int tmout = fdc_waitint();
  1630                        ;
  1631                        ;	status_sz = 0;
  1632             00000000   tmout_1	set	0
  1633                        	.sym	tmout,0,5,1,16
  1634                        	.sym	sensei,4,5,6,16
  1635 00:01F1: 22 xx xx xx  	jsl	~~fdc_waitint
  1636 00:01F5: 85 05        	sta	<L35+tmout_1
  1637                        	.line	238
  1638 00:01F7: 9C xx xx     	stz	|~~status_sz
  1639                        ;	while (status_sz < 7 && (inportb(FDC_MSR) & MSR_
                    CB))
  1640                        	.line	239
  1641                        L10012:
  1642 00:01FA: 38           	sec
  1643 00:01FB: AD xx xx     	lda	|~~status_sz
  1644 00:01FE: E9 07 00     	sbc	#<$7
  1645 00:0201: 70 03        	bvs	L37
  1646 00:0203: 49 00 80     	eor	#$8000
  1647                        L37:
  1648 00:0206: 10 03        	bpl	L38
  1649 00:0208: 82 27 00     	brl	L10013
  1650                        L38:
  1651 00:020B: E2 20        	sep	#$20
  1652                        	longa	off
  1653 00:020D: AF F4 13 AF  	lda	>11473908
  1654 00:0211: 29 10        	and	#<$10
  1655 00:0213: C2 20        	rep	#$20
  1656                        	longa	on
  1657 00:0215: D0 03        	bne	L39
  1658 00:0217: 82 18 00     	brl	L10013
  1659                        L39:
  1660                        ;		status[status_sz++] = getbyte();
  1661                        	.line	240
  1662 00:021A: AD xx xx     	lda	|~~status_sz
  1663 00:021D: 85 01        	sta	<R0
  1664 00:021F: EE xx xx     	inc	|~~status_sz
  1665 00:0222: 22 xx xx xx  	jsl	~~getbyte
  1666 00:0226: E2 20        	sep	#$20
  1667                        	longa	off
  1668 00:0228: A6 01        	ldx	<R0
  1669 00:022A: 9D xx xx     	sta	|~~status,X
  1670 00:022D: C2 20        	rep	#$20
  1671                        	longa	on
  1672 00:022F: 82 C8 FF     	brl	L10012
  Thu Jul 29 2021 11:55                                                Page 33


  1673                        L10013:
  1674                        ;
  1675                        ;	if (sensei)
  1676                        	.line	242
  1677                        ;	{
  1678 00:0232: A5 0A        	lda	<L34+sensei_0
  1679 00:0234: D0 03        	bne	L40
  1680 00:0236: 82 59 00     	brl	L10014
  1681                        L40:
  1682                        	.line	243
  1683                        ;		sendbyte(CMD_SENSEI);
  1684                        	.line	244
  1685 00:0239: F4 08 00     	pea	#<$8
  1686 00:023C: 22 xx xx xx  	jsl	~~sendbyte
  1687                        ;		reg_sr0 = getbyte();
  1688                        	.line	245
  1689 00:0240: 22 xx xx xx  	jsl	~~getbyte
  1690 00:0244: E2 20        	sep	#$20
  1691                        	longa	off
  1692 00:0246: 8D xx xx     	sta	|~~reg_sr0
  1693 00:0249: C2 20        	rep	#$20
  1694                        	longa	on
  1695                        ;		k_debug_hex("fdc_wait:reg_sr0:",reg_sr0)
                    ;
  1696                        	.line	246
  1697 00:024B: AD xx xx     	lda	|~~reg_sr0
  1698 00:024E: 48           	pha
  1699 00:024F: F4 xx xx     	pea	#^L33
  1700 00:0252: F4 xx xx     	pea	#<L33
  1701 00:0255: 22 xx xx xx  	jsl	~~k_debug_hex
  1702                        ;		drives[cur_drive].track = getbyte();
  1703                        	.line	247
  1704 00:0259: AD xx xx     	lda	|~~cur_drive
  1705 00:025C: 29 FF 00     	and	#$ff
  1706 00:025F: 85 01        	sta	<R0
  1707 00:0261: A5 01        	lda	<R0
  1708 00:0263: 0A           	asl	A
  1709 00:0264: 65 01        	adc	<R0
  1710 00:0266: 0A           	asl	A
  1711 00:0267: 85 01        	sta	<R0
  1712 00:0269: 22 xx xx xx  	jsl	~~getbyte
  1713 00:026D: A6 01        	ldx	<R0
  1714 00:026F: 9D xx xx     	sta	|~~drives,X
  1715                        ;		k_debug_hex("fdc_wait:track:",drives[cur
                    _drive].track);
  1716                        	.line	248
  1717 00:0272: AD xx xx     	lda	|~~cur_drive
  1718 00:0275: 29 FF 00     	and	#$ff
  1719 00:0278: 85 01        	sta	<R0
  1720 00:027A: A5 01        	lda	<R0
  1721 00:027C: 0A           	asl	A
  1722 00:027D: 65 01        	adc	<R0
  1723 00:027F: 0A           	asl	A
  1724 00:0280: 85 01        	sta	<R0
  1725 00:0282: A6 01        	ldx	<R0
  1726 00:0284: BD xx xx     	lda	|~~drives,X
  1727 00:0287: 48           	pha
  1728 00:0288: F4 xx xx     	pea	#^L33+18
  Thu Jul 29 2021 11:55                                                Page 34


  1729 00:028B: F4 xx xx     	pea	#<L33+18
  1730 00:028E: 22 xx xx xx  	jsl	~~k_debug_hex
  1731                        ;	}
  1732                        	.line	249
  1733                        ;
  1734                        ;	irq_signaled = 0;
  1735                        L10014:
  1736                        	.line	251
  1737 00:0292: E2 20        	sep	#$20
  1738                        	longa	off
  1739 00:0294: 9C xx xx     	stz	|~~irq_signaled
  1740 00:0297: C2 20        	rep	#$20
  1741                        	longa	on
  1742                        ;	if (tmout)
  1743                        	.line	252
  1744                        ;	{
  1745 00:0299: A5 05        	lda	<L35+tmout_1
  1746 00:029B: D0 03        	bne	L41
  1747 00:029D: 82 3C 00     	brl	L10015
  1748                        L41:
  1749                        	.line	253
  1750                        ;		if (inportb(FDC_DIR) & DIR_DC)
  1751                        	.line	254
  1752                        ;			drives[cur_drive].dchg = 1;
  1753 00:02A0: E2 20        	sep	#$20
  1754                        	longa	off
  1755 00:02A2: AF F7 13 AF  	lda	>11473911
  1756 00:02A6: 29 80        	and	#<$80
  1757 00:02A8: C2 20        	rep	#$20
  1758                        	longa	on
  1759 00:02AA: D0 03        	bne	L42
  1760 00:02AC: 82 18 00     	brl	L10016
  1761                        L42:
  1762                        	.line	255
  1763 00:02AF: AD xx xx     	lda	|~~cur_drive
  1764 00:02B2: 29 FF 00     	and	#$ff
  1765 00:02B5: 85 01        	sta	<R0
  1766 00:02B7: A5 01        	lda	<R0
  1767 00:02B9: 0A           	asl	A
  1768 00:02BA: 65 01        	adc	<R0
  1769 00:02BC: 0A           	asl	A
  1770 00:02BD: 85 01        	sta	<R0
  1771 00:02BF: A9 01 00     	lda	#$1
  1772 00:02C2: A6 01        	ldx	<R0
  1773 00:02C4: 9D xx xx     	sta	|~~drives+4,X
  1774                        ;		return 1;
  1775                        L10016:
  1776                        	.line	256
  1777 00:02C7: A9 01 00     	lda	#$1
  1778                        L43:
  1779 00:02CA: A8           	tay
  1780 00:02CB: A5 08        	lda	<L34+2
  1781 00:02CD: 85 0A        	sta	<L34+2+2
  1782 00:02CF: A5 07        	lda	<L34+1
  1783 00:02D1: 85 09        	sta	<L34+1+2
  1784 00:02D3: 2B           	pld
  1785 00:02D4: 3B           	tsc
  1786 00:02D5: 18           	clc
  Thu Jul 29 2021 11:55                                                Page 35


  1787 00:02D6: 69 08 00     	adc	#L34+2
  1788 00:02D9: 1B           	tcs
  1789 00:02DA: 98           	tya
  1790 00:02DB: 6B           	rtl
  1791                        ;	}
  1792                        	.line	257
  1793                        ;	else
  1794                        L10015:
  1795                        ;		return 0;
  1796                        	.line	259
  1797 00:02DC: A9 00 00     	lda	#$0
  1798 00:02DF: 82 E8 FF     	brl	L43
  1799                        ;}
  1800                        	.line	260
  1801                        	.endblock	260
  1802             00000006   L34	equ	6
  1803             00000005   L35	equ	5
  1804                        	ends
  1805                        	efunc
  1806                        	.endfunc	260,5,6
  1807                        	.line	260
  1808                        	data
  1809                        L33:
  1810 00:007A: 66 64 63 5F  	db	$66,$64,$63,$5F,$77,$61,$69,$74,$3A,$72,
                    $65,$67,$5F,$73,$72
       00:007E: 77 61 69 74 
       00:0082: 3A 72 65 67 
       00:0086: 5F 73 72 
  1811 00:0089: 30 3A 00 66  	db	$30,$3A,$00,$66,$64,$63,$5F,$77,$61,$69,
                    $74,$3A,$74,$72,$61
       00:008D: 64 63 5F 77 
       00:0091: 61 69 74 3A 
       00:0095: 74 72 61 
  1812 00:0098: 63 6B 3A 00  	db	$63,$6B,$3A,$00
  1813 00:009C:              	ends
  1814                        ;
  1815                        ;static void motor_on()
  1816                        ;{
  1817                        	.line	262
  1818                        	.line	263
  1819                        	code
  1820                        	func
  1821                        	.function	263
  1822                        ~~motor_on:
  1823                        	longa	on
  1824                        	longi	on
  1825 00:02E2: 3B           	tsc
  1826 00:02E3: 38           	sec
  1827 00:02E4: E9 04 00     	sbc	#L45
  1828 00:02E7: 1B           	tcs
  1829 00:02E8: 0B           	phd
  1830 00:02E9: 5B           	tcd
  1831                        	.block	263
  1832                        ;	k_debug_string("motor_on\r\n");
  1833                        	.line	264
  1834 00:02EA: F4 xx xx     	pea	#^L44
  1835 00:02ED: F4 xx xx     	pea	#<L44
  1836 00:02F0: 22 xx xx xx  	jsl	~~k_debug_string
  Thu Jul 29 2021 11:55                                                Page 36


  1837                        ;	motoff_timer = 0;
  1838                        	.line	265
  1839 00:02F4: 9C xx xx     	stz	|~~motoff_timer
  1840                        ;	//if (drives[cur_drive].motstate == 0)
  1841                        ;	if(1)
  1842                        	.line	267
  1843                        ;	{
  1844                        	.line	268
  1845                        ;		reg_dor |= (1 << (cur_drive + 4));
  1846                        	.line	269
  1847 00:02F7: E2 20        	sep	#$20
  1848                        	longa	off
  1849 00:02F9: 18           	clc
  1850 00:02FA: A9 04        	lda	#$4
  1851 00:02FC: 6D xx xx     	adc	|~~cur_drive
  1852 00:02FF: C2 20        	rep	#$20
  1853                        	longa	on
  1854 00:0301: 48           	pha
  1855 00:0302: A9 01 00     	lda	#$1
  1856 00:0305: FA           	plx
  1857                        	xref	~~~casl
  1858 00:0306: 22 xx xx xx  	jsl	~~~casl
  1859 00:030A: E2 20        	sep	#$20
  1860                        	longa	off
  1861 00:030C: 85 01        	sta	<R0
  1862 00:030E: C2 20        	rep	#$20
  1863                        	longa	on
  1864 00:0310: E2 20        	sep	#$20
  1865                        	longa	off
  1866 00:0312: A5 01        	lda	<R0
  1867 00:0314: 0C xx xx     	tsb	|~~reg_dor
  1868 00:0317: C2 20        	rep	#$20
  1869                        	longa	on
  1870                        ;		reg_dor |= cur_drive;
  1871                        	.line	270
  1872 00:0319: E2 20        	sep	#$20
  1873                        	longa	off
  1874 00:031B: AD xx xx     	lda	|~~cur_drive
  1875 00:031E: 0C xx xx     	tsb	|~~reg_dor
  1876 00:0321: C2 20        	rep	#$20
  1877                        	longa	on
  1878                        ;		outportb(FDC_DOR, reg_dor);
  1879                        	.line	271
  1880 00:0323: E2 20        	sep	#$20
  1881                        	longa	off
  1882 00:0325: AD xx xx     	lda	|~~reg_dor
  1883 00:0328: 8F F2 13 AF  	sta	>11473906
  1884 00:032C: C2 20        	rep	#$20
  1885                        	longa	on
  1886                        ;		drives[cur_drive].motstate = 1;
  1887                        	.line	272
  1888 00:032E: AD xx xx     	lda	|~~cur_drive
  1889 00:0331: 29 FF 00     	and	#$ff
  1890 00:0334: 85 01        	sta	<R0
  1891 00:0336: A5 01        	lda	<R0
  1892 00:0338: 0A           	asl	A
  1893 00:0339: 65 01        	adc	<R0
  1894 00:033B: 0A           	asl	A
  Thu Jul 29 2021 11:55                                                Page 37


  1895 00:033C: 85 01        	sta	<R0
  1896 00:033E: A9 01 00     	lda	#$1
  1897 00:0341: A6 01        	ldx	<R0
  1898 00:0343: 9D xx xx     	sta	|~~drives+2,X
  1899                        ;		//usleep(FL_SPIN_UP);
  1900                        ;		sleep(DRIVE_H1440_SPINUP);
  1901                        	.line	274
  1902 00:0346: F4 90 01     	pea	#<$190
  1903 00:0349: 22 xx xx xx  	jsl	~~sleep
  1904                        ;	}
  1905                        	.line	275
  1906                        ;}
  1907                        L10017:
  1908                        	.line	276
  1909                        L48:
  1910 00:034D: 2B           	pld
  1911 00:034E: 3B           	tsc
  1912 00:034F: 18           	clc
  1913 00:0350: 69 04 00     	adc	#L45
  1914 00:0353: 1B           	tcs
  1915 00:0354: 6B           	rtl
  1916                        	.endblock	276
  1917             00000004   L45	equ	4
  1918             00000005   L46	equ	5
  1919                        	ends
  1920                        	efunc
  1921                        	.endfunc	276,5,4
  1922                        	.line	276
  1923                        	data
  1924                        L44:
  1925 00:009C: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$72,$5F,$6F,$6E,$0D,$0A,
                    $00
       00:00A0: 72 5F 6F 6E 
       00:00A4: 0D 0A 00 
  1926 00:00A7:              	ends
  1927                        ;
  1928                        ;static void motor_off()
  1929                        ;{
  1930                        	.line	278
  1931                        	.line	279
  1932                        	code
  1933                        	func
  1934                        	.function	279
  1935                        ~~motor_off:
  1936                        	longa	on
  1937                        	longi	on
  1938 00:0355: 3B           	tsc
  1939 00:0356: 38           	sec
  1940 00:0357: E9 04 00     	sbc	#L50
  1941 00:035A: 1B           	tcs
  1942 00:035B: 0B           	phd
  1943 00:035C: 5B           	tcd
  1944                        	.block	279
  1945                        ;	k_debug_string("motor_off\r\n");
  1946                        	.line	280
  1947 00:035D: F4 xx xx     	pea	#^L49
  1948 00:0360: F4 xx xx     	pea	#<L49
  1949 00:0363: 22 xx xx xx  	jsl	~~k_debug_string
  Thu Jul 29 2021 11:55                                                Page 38


  1950                        ;	if (drives[cur_drive].motstate)
  1951                        	.line	281
  1952                        ;	{
  1953 00:0367: AD xx xx     	lda	|~~cur_drive
  1954 00:036A: 29 FF 00     	and	#$ff
  1955 00:036D: 85 01        	sta	<R0
  1956 00:036F: A5 01        	lda	<R0
  1957 00:0371: 0A           	asl	A
  1958 00:0372: 65 01        	adc	<R0
  1959 00:0374: 0A           	asl	A
  1960 00:0375: 85 01        	sta	<R0
  1961 00:0377: A6 01        	ldx	<R0
  1962 00:0379: BD xx xx     	lda	|~~drives+2,X
  1963 00:037C: D0 03        	bne	L53
  1964 00:037E: 82 06 00     	brl	L10018
  1965                        L53:
  1966                        	.line	282
  1967                        ;		//motoff_timer = 2000;
  1968                        ;		motoff_timer = 200;
  1969                        	.line	284
  1970 00:0381: A9 C8 00     	lda	#$c8
  1971 00:0384: 8D xx xx     	sta	|~~motoff_timer
  1972                        ;	}
  1973                        	.line	285
  1974                        ;	// TODO
  1975                        ;	//motoff_timer = 1;
  1976                        ;	//floppy_timer();
  1977                        ;}
  1978                        L10018:
  1979                        	.line	289
  1980                        L54:
  1981 00:0387: 2B           	pld
  1982 00:0388: 3B           	tsc
  1983 00:0389: 18           	clc
  1984 00:038A: 69 04 00     	adc	#L50
  1985 00:038D: 1B           	tcs
  1986 00:038E: 6B           	rtl
  1987                        	.endblock	289
  1988             00000004   L50	equ	4
  1989             00000005   L51	equ	5
  1990                        	ends
  1991                        	efunc
  1992                        	.endfunc	289,5,4
  1993                        	.line	289
  1994                        	data
  1995                        L49:
  1996 00:00A7: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$72,$5F,$6F,$66,$66,$0D,
                    $0A,$00
       00:00AB: 72 5F 6F 66 
       00:00AF: 66 0D 0A 00 
  1997 00:00B3:              	ends
  1998                        ;
  1999                        ;static void fdc_configure()
  2000                        ;{
  2001                        	.line	291
  2002                        	.line	292
  2003                        	code
  2004                        	func
  Thu Jul 29 2021 11:55                                                Page 39


  2005                        	.function	292
  2006                        ~~fdc_configure:
  2007                        	longa	on
  2008                        	longi	on
  2009 00:038F: 3B           	tsc
  2010 00:0390: 38           	sec
  2011 00:0391: E9 00 00     	sbc	#L56
  2012 00:0394: 1B           	tcs
  2013 00:0395: 0B           	phd
  2014 00:0396: 5B           	tcd
  2015                        	.block	292
  2016                        ;	sendbyte(CMD_CONF);
  2017                        	.line	293
  2018 00:0397: F4 13 00     	pea	#<$13
  2019 00:039A: 22 xx xx xx  	jsl	~~sendbyte
  2020                        ;	sendbyte(0x00);
  2021                        	.line	294
  2022 00:039E: F4 00 00     	pea	#<$0
  2023 00:03A1: 22 xx xx xx  	jsl	~~sendbyte
  2024                        ;	sendbyte(0x47); /* threshold = 8, FIFO on, polli
                    ng on, implied seek on */
  2025                        	.line	295
  2026 00:03A5: F4 47 00     	pea	#<$47
  2027 00:03A8: 22 xx xx xx  	jsl	~~sendbyte
  2028                        ;	//sendbyte(0x4F); /* threshold = 16, FIFO off, p
                    olling on, implied seek on */
  2029                        ;	//sendbyte(0x7F); /* threshold = 16, FIFO on, po
                    lling on, implied seek on */
  2030                        ;	//sendbyte(0x7F);
  2031                        ;	//sendbyte(0x40);
  2032                        ;	sendbyte(0x00);
  2033                        	.line	300
  2034 00:03AC: F4 00 00     	pea	#<$0
  2035 00:03AF: 22 xx xx xx  	jsl	~~sendbyte
  2036                        ;	//sendbyte(0x2F);
  2037                        ;}
  2038                        	.line	302
  2039                        L59:
  2040 00:03B3: 2B           	pld
  2041 00:03B4: 3B           	tsc
  2042 00:03B5: 18           	clc
  2043 00:03B6: 69 00 00     	adc	#L56
  2044 00:03B9: 1B           	tcs
  2045 00:03BA: 6B           	rtl
  2046                        	.endblock	302
  2047             00000000   L56	equ	0
  2048             00000001   L57	equ	1
  2049                        	ends
  2050                        	efunc
  2051                        	.endfunc	302,1,0
  2052                        	.line	302
  2053                        ;
  2054                        ;/**
  2055                        ;// Register Address
  2056                        ;#define FDD_STATUS_A           ((LPCHAR)0xAF13F0)
                     // Read     use in with PS2 and PS2 mode 30 noly
  2057                        ;#define FDD_STATUS_B           ((LPCHAR)0xAF13F1)
                     // Read
  Thu Jul 29 2021 11:55                                                Page 40


  2058                        ;#define FDD_DIGITAL_OUTPUT     ((LPCHAR)0xAF13F2)
                     // Read/Write
  2059                        ;#define FDD_TAPE_DRIVER        ((LPCHAR)0xAF13F3)
                     // Read/Write
  2060                        ;#define FDD_MAIN_STATUS        ((LPCHAR)0xAF13F4)
                     // Read
  2061                        ;#define FDD_DATA_RATE_SELECT   ((LPCHAR)0xAF13F4)
                     // Write
  2062                        ;#define FDD_FIFO               ((LPCHAR)0xAF13F5)
                     // Read/Write
  2063                        ;//RESERVED_REG          0xAF13F6 // Reserved
  2064                        ;#define FDD_DIGITAL_INPUT      ((LPCHAR)0xAF13F7)
                     // Read
  2065                        ;#define FDD_CONFIG_CTRL        ((LPCHAR)0xAF13F7)
                     // Write
  2066                        ; */
  2067                        ;
  2068                        ;static void fdc_reset()
  2069                        ;{
  2070                        	.line	318
  2071                        	.line	319
  2072                        	code
  2073                        	func
  2074                        	.function	319
  2075                        ~~fdc_reset:
  2076                        	longa	on
  2077                        	longi	on
  2078 00:03BB: 3B           	tsc
  2079 00:03BC: 38           	sec
  2080 00:03BD: E9 08 00     	sbc	#L60
  2081 00:03C0: 1B           	tcs
  2082 00:03C1: 0B           	phd
  2083 00:03C2: 5B           	tcd
  2084                        	.block	319
  2085                        ;	UCHAR st0, cyl;
  2086                        ;	int i;
  2087                        ;	/* Send reset */
  2088                        ;	outportb(FDD_DIGITAL_OUTPUT, 0x00);
  2089             00000000   st0_1	set	0
  2090             00000001   cyl_1	set	1
  2091             00000002   i_1	set	2
  2092                        	.sym	st0,0,14,1,8
  2093                        	.sym	cyl,1,14,1,8
  2094                        	.sym	i,2,5,1,16
  2095                        	.line	323
  2096 00:03C3: E2 20        	sep	#$20
  2097                        	longa	off
  2098 00:03C5: A9 00        	lda	#$0
  2099 00:03C7: 8F F2 13 AF  	sta	>11473906
  2100 00:03CB: C2 20        	rep	#$20
  2101                        	longa	on
  2102                        ;	io_wait();
  2103                        	.line	324
  2104 00:03CD: 22 xx xx xx  	jsl	~~io_wait
  2105                        ;	io_wait();
  2106                        	.line	325
  2107 00:03D1: 22 xx xx xx  	jsl	~~io_wait
  2108                        ;	io_wait();
  Thu Jul 29 2021 11:55                                                Page 41


  2109                        	.line	326
  2110 00:03D5: 22 xx xx xx  	jsl	~~io_wait
  2111                        ;	io_wait();
  2112                        	.line	327
  2113 00:03D9: 22 xx xx xx  	jsl	~~io_wait
  2114                        ;
  2115                        ;	//reg_dor = DOR_IRQ | DOR_RESET;
  2116                        ;	reg_dor = DOR_RESET;
  2117                        	.line	330
  2118 00:03DD: E2 20        	sep	#$20
  2119                        	longa	off
  2120 00:03DF: A9 04        	lda	#$4
  2121 00:03E1: 8D xx xx     	sta	|~~reg_dor
  2122 00:03E4: C2 20        	rep	#$20
  2123                        	longa	on
  2124                        ;	outportb(FDD_DIGITAL_OUTPUT, reg_dor);
  2125                        	.line	331
  2126 00:03E6: E2 20        	sep	#$20
  2127                        	longa	off
  2128 00:03E8: AD xx xx     	lda	|~~reg_dor
  2129 00:03EB: 8F F2 13 AF  	sta	>11473906
  2130 00:03EF: C2 20        	rep	#$20
  2131                        	longa	on
  2132                        ;	io_wait();
  2133                        	.line	332
  2134 00:03F1: 22 xx xx xx  	jsl	~~io_wait
  2135                        ;
  2136                        ;	outportb(FDD_DIGITAL_OUTPUT, reg_dor | 0x04);
  2137                        	.line	334
  2138 00:03F5: E2 20        	sep	#$20
  2139                        	longa	off
  2140 00:03F7: AD xx xx     	lda	|~~reg_dor
  2141 00:03FA: 09 04        	ora	#<$4
  2142 00:03FC: 8F F2 13 AF  	sta	>11473906
  2143 00:0400: C2 20        	rep	#$20
  2144                        	longa	on
  2145                        ;	io_wait();
  2146                        	.line	335
  2147 00:0402: 22 xx xx xx  	jsl	~~io_wait
  2148                        ;
  2149                        ;	outportb(FDD_DATA_RATE_SELECT, 0x02);
  2150                        	.line	337
  2151 00:0406: E2 20        	sep	#$20
  2152                        	longa	off
  2153 00:0408: A9 02        	lda	#$2
  2154 00:040A: 8F F4 13 AF  	sta	>11473908
  2155 00:040E: C2 20        	rep	#$20
  2156                        	longa	on
  2157                        ;	io_wait();
  2158                        	.line	338
  2159 00:0410: 22 xx xx xx  	jsl	~~io_wait
  2160                        ;
  2161                        ;	k_debug_string("fdc_reset\r\n");
  2162                        	.line	340
  2163 00:0414: F4 xx xx     	pea	#^L55
  2164 00:0417: F4 xx xx     	pea	#<L55
  2165 00:041A: 22 xx xx xx  	jsl	~~k_debug_string
  2166                        ;	/* Wait for IRQ or timeout */
  Thu Jul 29 2021 11:55                                                Page 42


  2167                        ;	/*
  2168                        ;	clock_t s = clock();
  2169                        ;	WAIT_COND(!irq_signaled && (clock() - s < FL_INT
                    _TMT));
  2170                        ;	if (!irq_signaled)
  2171                        ;	{
  2172                        ;	}
  2173                        ;	*/
  2174                        ;
  2175                        ;	//sleep(1000);
  2176                        ;
  2177                        ;	//fdc_waitint();
  2178                        ;
  2179                        ;	//if (fdc_waitint())
  2180                        ;	//	return;
  2181                        ;	/* Hmph... Timeout */
  2182                        ;
  2183                        ;	for ( i = 0; i < 5; i++)
  2184                        	.line	358
  2185 00:041E: 64 07        	stz	<L61+i_1
  2186                        L10021:
  2187                        ;	{
  2188                        	.line	359
  2189                        ;		sendbyte(CMD_SENSEI);
  2190                        	.line	360
  2191 00:0420: F4 08 00     	pea	#<$8
  2192 00:0423: 22 xx xx xx  	jsl	~~sendbyte
  2193                        ;		reg_sr0 = getbyte();
  2194                        	.line	361
  2195 00:0427: 22 xx xx xx  	jsl	~~getbyte
  2196 00:042B: E2 20        	sep	#$20
  2197                        	longa	off
  2198 00:042D: 8D xx xx     	sta	|~~reg_sr0
  2199 00:0430: C2 20        	rep	#$20
  2200                        	longa	on
  2201                        ;		k_debug_bits("fdc_reset:reg_sr0:",reg_sr
                    0);
  2202                        	.line	362
  2203 00:0432: AD xx xx     	lda	|~~reg_sr0
  2204 00:0435: 48           	pha
  2205 00:0436: F4 xx xx     	pea	#^L55+12
  2206 00:0439: F4 xx xx     	pea	#<L55+12
  2207 00:043C: 22 xx xx xx  	jsl	~~k_debug_bits
  2208                        ;		drives[i].track = getbyte();
  2209                        	.line	363
  2210 00:0440: A5 07        	lda	<L61+i_1
  2211 00:0442: 0A           	asl	A
  2212 00:0443: 65 07        	adc	<L61+i_1
  2213 00:0445: 0A           	asl	A
  2214 00:0446: 85 01        	sta	<R0
  2215 00:0448: 22 xx xx xx  	jsl	~~getbyte
  2216 00:044C: A6 01        	ldx	<R0
  2217 00:044E: 9D xx xx     	sta	|~~drives,X
  2218                        ;		k_debug_bits("fdc_reset:track:",drives[i
                    ].track);
  2219                        	.line	364
  2220 00:0451: A5 07        	lda	<L61+i_1
  2221 00:0453: 0A           	asl	A
  Thu Jul 29 2021 11:55                                                Page 43


  2222 00:0454: 65 07        	adc	<L61+i_1
  2223 00:0456: 0A           	asl	A
  2224 00:0457: 85 01        	sta	<R0
  2225 00:0459: A6 01        	ldx	<R0
  2226 00:045B: BD xx xx     	lda	|~~drives,X
  2227 00:045E: 48           	pha
  2228 00:045F: F4 xx xx     	pea	#^L55+31
  2229 00:0462: F4 xx xx     	pea	#<L55+31
  2230 00:0465: 22 xx xx xx  	jsl	~~k_debug_bits
  2231                        ;		sleep(30);
  2232                        	.line	365
  2233 00:0469: F4 1E 00     	pea	#<$1e
  2234 00:046C: 22 xx xx xx  	jsl	~~sleep
  2235                        ;	}
  2236                        	.line	366
  2237                        L10019:
  2238 00:0470: E6 07        	inc	<L61+i_1
  2239 00:0472: A5 07        	lda	<L61+i_1
  2240 00:0474: 30 07        	bmi	L63
  2241 00:0476: 3A           	dea
  2242 00:0477: 3A           	dea
  2243 00:0478: 3A           	dea
  2244 00:0479: 3A           	dea
  2245 00:047A: 3A           	dea
  2246 00:047B: 10 03        	bpl	L64
  2247                        L63:
  2248 00:047D: 82 A0 FF     	brl	L10021
  2249                        L64:
  2250                        L10020:
  2251                        ;
  2252                        ;	irq_signaled = 0;
  2253                        	.line	368
  2254 00:0480: E2 20        	sep	#$20
  2255                        	longa	off
  2256 00:0482: 9C xx xx     	stz	|~~irq_signaled
  2257 00:0485: C2 20        	rep	#$20
  2258                        	longa	on
  2259                        ;
  2260                        ;	fdc_configure();
  2261                        	.line	370
  2262 00:0487: 22 xx xx xx  	jsl	~~fdc_configure
  2263                        ;	//floppy_specify();
  2264                        ;
  2265                        ;	//motor_off();
  2266                        ;}
  2267                        	.line	374
  2268                        L65:
  2269 00:048B: 2B           	pld
  2270 00:048C: 3B           	tsc
  2271 00:048D: 18           	clc
  2272 00:048E: 69 08 00     	adc	#L60
  2273 00:0491: 1B           	tcs
  2274 00:0492: 6B           	rtl
  2275                        	.endblock	374
  2276             00000008   L60	equ	8
  2277             00000005   L61	equ	5
  2278                        	ends
  2279                        	efunc
  Thu Jul 29 2021 11:55                                                Page 44


  2280                        	.endfunc	374,5,8
  2281                        	.line	374
  2282                        	data
  2283                        L55:
  2284 00:00B3: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$0D,
                    $0A,$00,$66,$64,$63
       00:00B7: 72 65 73 65 
       00:00BB: 74 0D 0A 00 
       00:00BF: 66 64 63 
  2285 00:00C2: 5F 72 65 73  	db	$5F,$72,$65,$73,$65,$74,$3A,$72,$65,$67,
                    $5F,$73,$72,$30,$3A
       00:00C6: 65 74 3A 72 
       00:00CA: 65 67 5F 73 
       00:00CE: 72 30 3A 
  2286 00:00D1: 00 66 64 63  	db	$00,$66,$64,$63,$5F,$72,$65,$73,$65,$74,
                    $3A,$74,$72,$61,$63
       00:00D5: 5F 72 65 73 
       00:00D9: 65 74 3A 74 
       00:00DD: 72 61 63 
  2287 00:00E0: 6B 3A 00     	db	$6B,$3A,$00
  2288 00:00E3:              	ends
  2289                        ;
  2290                        ;//! configure drive floppy__drive_data(3, 16, 240
                    , FALSE);
  2291                        ;void floppy_drive_data(UINT stepr, UINT loadt, UI
                    NT unloadt,BOOL dma)
  2292                        ;{
  2293                        	.line	377
  2294                        	.line	378
  2295                        	code
  2296                        	xdef	~~floppy_drive_data
  2297                        	func
  2298                        	.function	378
  2299                        ~~floppy_drive_data:
  2300                        	longa	on
  2301                        	longi	on
  2302 00:0493: 3B           	tsc
  2303 00:0494: 38           	sec
  2304 00:0495: E9 02 00     	sbc	#L67
  2305 00:0498: 1B           	tcs
  2306 00:0499: 0B           	phd
  2307 00:049A: 5B           	tcd
  2308             00000004   stepr_0	set	4
  2309             00000006   loadt_0	set	6
  2310             00000008   unloadt_0	set	8
  2311             0000000A   dma_0	set	10
  2312                        	.block	378
  2313                        ;
  2314                        ;	UINT data = 0;
  2315                        ;
  2316                        ;	k_debug_string("floppy_drive_data\r\n");
  2317             00000000   data_1	set	0
  2318                        	.sym	data,0,16,1,16
  2319                        	.sym	stepr,4,16,6,16
  2320                        	.sym	loadt,6,16,6,16
  2321                        	.sym	unloadt,8,16,6,16
  2322                        	.sym	dma,10,14,6,8
  2323 00:049B: 64 01        	stz	<L68+data_1
  Thu Jul 29 2021 11:55                                                Page 45


  2324                        	.line	382
  2325 00:049D: F4 xx xx     	pea	#^L66
  2326 00:04A0: F4 xx xx     	pea	#<L66
  2327 00:04A3: 22 xx xx xx  	jsl	~~k_debug_string
  2328                        ;
  2329                        ;	//! send command
  2330                        ;	sendbyte(CMD_SPECIFY);
  2331                        	.line	385
  2332 00:04A7: F4 03 00     	pea	#<$3
  2333 00:04AA: 22 xx xx xx  	jsl	~~sendbyte
  2334                        ;//	data = ((stepr & 0xf) << 4) | (unloadt &
                     0xf);
  2335                        ;	data = 0x00;
  2336                        	.line	387
  2337 00:04AE: 64 01        	stz	<L68+data_1
  2338                        ;	sendbyte(data);
  2339                        	.line	388
  2340 00:04B0: D4 01        	pei	<L68+data_1
  2341 00:04B2: 22 xx xx xx  	jsl	~~sendbyte
  2342                        ;	//data = (((loadt) << 1) |  (1));
  2343                        ;//	data = ((0x05 << 1) | (1));
  2344                        ;	//data = 0x00; // enable DMA
  2345                        ;	data = 0x01; // disable DMA
  2346                        	.line	392
  2347 00:04B6: A9 01 00     	lda	#$1
  2348 00:04B9: 85 01        	sta	<L68+data_1
  2349                        ;	sendbyte(data);
  2350                        	.line	393
  2351 00:04BB: D4 01        	pei	<L68+data_1
  2352 00:04BD: 22 xx xx xx  	jsl	~~sendbyte
  2353                        ;}
  2354                        	.line	394
  2355                        L70:
  2356 00:04C1: A5 04        	lda	<L67+2
  2357 00:04C3: 85 0C        	sta	<L67+2+8
  2358 00:04C5: A5 03        	lda	<L67+1
  2359 00:04C7: 85 0B        	sta	<L67+1+8
  2360 00:04C9: 2B           	pld
  2361 00:04CA: 3B           	tsc
  2362 00:04CB: 18           	clc
  2363 00:04CC: 69 0A 00     	adc	#L67+8
  2364 00:04CF: 1B           	tcs
  2365 00:04D0: 6B           	rtl
  2366                        	.endblock	394
  2367             00000002   L67	equ	2
  2368             00000001   L68	equ	1
  2369                        	ends
  2370                        	efunc
  2371                        	.endfunc	394,1,2
  2372                        	.line	394
  2373                        	data
  2374                        L66:
  2375 00:00E3: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$64,$72,$69,
                    $76,$65,$5F,$64,$61
       00:00E7: 70 79 5F 64 
       00:00EB: 72 69 76 65 
       00:00EF: 5F 64 61 
  2376 00:00F2: 74 61 0D 0A  	db	$74,$61,$0D,$0A,$00
  Thu Jul 29 2021 11:55                                                Page 46


       00:00F6: 00 
  2377 00:00F7:              	ends
  2378                        ;
  2379                        ;
  2380                        ;static void floppy_specify()
  2381                        ;{
  2382                        	.line	397
  2383                        	.line	398
  2384                        	code
  2385                        	func
  2386                        	.function	398
  2387                        ~~floppy_specify:
  2388                        	longa	on
  2389                        	longi	on
  2390 00:04D1: 3B           	tsc
  2391 00:04D2: 38           	sec
  2392 00:04D3: E9 00 00     	sbc	#L72
  2393 00:04D6: 1B           	tcs
  2394 00:04D7: 0B           	phd
  2395 00:04D8: 5B           	tcd
  2396                        	.block	398
  2397                        ;	sendbyte(CMD_SPECIFY);
  2398                        	.line	399
  2399 00:04D9: F4 03 00     	pea	#<$3
  2400 00:04DC: 22 xx xx xx  	jsl	~~sendbyte
  2401                        ;	sendbyte((0x08 << 4) | (0));
  2402                        	.line	400
  2403 00:04E0: F4 80 00     	pea	#<$80
  2404 00:04E3: 22 xx xx xx  	jsl	~~sendbyte
  2405                        ;	//sendbyte((0x05 << 1) | (1));
  2406                        ;	//sendbyte(0xDF);
  2407                        ;	sendbyte(0x01);
  2408                        	.line	403
  2409 00:04E7: F4 01 00     	pea	#<$1
  2410 00:04EA: 22 xx xx xx  	jsl	~~sendbyte
  2411                        ;}
  2412                        	.line	404
  2413                        L75:
  2414 00:04EE: 2B           	pld
  2415 00:04EF: 3B           	tsc
  2416 00:04F0: 18           	clc
  2417 00:04F1: 69 00 00     	adc	#L72
  2418 00:04F4: 1B           	tcs
  2419 00:04F5: 6B           	rtl
  2420                        	.endblock	404
  2421             00000000   L72	equ	0
  2422             00000001   L73	equ	1
  2423                        	ends
  2424                        	efunc
  2425                        	.endfunc	404,1,0
  2426                        	.line	404
  2427                        ;
  2428                        ;static int floppy_select(int drive)
  2429                        ;{
  2430                        	.line	406
  2431                        	.line	407
  2432                        	code
  2433                        	func
  Thu Jul 29 2021 11:55                                                Page 47


  2434                        	.function	407
  2435                        ~~floppy_select:
  2436                        	longa	on
  2437                        	longi	on
  2438 00:04F6: 3B           	tsc
  2439 00:04F7: 38           	sec
  2440 00:04F8: E9 0C 00     	sbc	#L76
  2441 00:04FB: 1B           	tcs
  2442 00:04FC: 0B           	phd
  2443 00:04FD: 5B           	tcd
  2444             00000004   drive_0	set	4
  2445                        	.block	407
  2446                        ;	if (drive < 0 || drive > 3)
  2447                        	.sym	drive,4,5,6,16
  2448                        	.line	408
  2449                        ;	{
  2450 00:04FE: A5 10        	lda	<L76+drive_0
  2451 00:0500: 10 03        	bpl	L80
  2452 00:0502: 82 10 00     	brl	L79
  2453                        L80:
  2454 00:0505: 38           	sec
  2455 00:0506: A9 03 00     	lda	#$3
  2456 00:0509: E5 10        	sbc	<L76+drive_0
  2457 00:050B: 70 03        	bvs	L81
  2458 00:050D: 49 00 80     	eor	#$8000
  2459                        L81:
  2460 00:0510: 10 03        	bpl	L82
  2461 00:0512: 82 15 00     	brl	L10022
  2462                        L82:
  2463                        L79:
  2464                        	.line	409
  2465                        ;		return -1;
  2466                        	.line	410
  2467 00:0515: A9 FF FF     	lda	#$ffff
  2468                        L83:
  2469 00:0518: A8           	tay
  2470 00:0519: A5 0E        	lda	<L76+2
  2471 00:051B: 85 10        	sta	<L76+2+2
  2472 00:051D: A5 0D        	lda	<L76+1
  2473 00:051F: 85 0F        	sta	<L76+1+2
  2474 00:0521: 2B           	pld
  2475 00:0522: 3B           	tsc
  2476 00:0523: 18           	clc
  2477 00:0524: 69 0E 00     	adc	#L76+2
  2478 00:0527: 1B           	tcs
  2479 00:0528: 98           	tya
  2480 00:0529: 6B           	rtl
  2481                        ;	}
  2482                        	.line	411
  2483                        ;
  2484                        ;	outportb(FDC_CCR, 0x00);
  2485                        L10022:
  2486                        	.line	413
  2487 00:052A: E2 20        	sep	#$20
  2488                        	longa	off
  2489 00:052C: A9 00        	lda	#$0
  2490 00:052E: 8F F7 13 AF  	sta	>11473911
  2491 00:0532: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 48


  2492                        	longa	on
  2493                        ;
  2494                        ;	cur_drive = (UCHAR) drive;
  2495                        	.line	415
  2496 00:0534: E2 20        	sep	#$20
  2497                        	longa	off
  2498 00:0536: A5 10        	lda	<L76+drive_0
  2499 00:0538: 8D xx xx     	sta	|~~cur_drive
  2500 00:053B: C2 20        	rep	#$20
  2501                        	longa	on
  2502                        ;	//reg_dor = (reg_dor & 0x0C) | cur_drive; /* sto
                    p all motors and select new drive */
  2503                        ;
  2504                        ;	reg_dor |= (1 << (drive + 4)); /* Spinup the sel
                    ected drive */
  2505                        	.line	418
  2506 00:053D: 18           	clc
  2507 00:053E: A9 04 00     	lda	#$4
  2508 00:0541: 65 10        	adc	<L76+drive_0
  2509 00:0543: 48           	pha
  2510 00:0544: A9 01 00     	lda	#$1
  2511 00:0547: FA           	plx
  2512                        	xref	~~~asl
  2513 00:0548: 22 xx xx xx  	jsl	~~~asl
  2514 00:054C: 85 01        	sta	<R0
  2515 00:054E: AD xx xx     	lda	|~~reg_dor
  2516 00:0551: 29 FF 00     	and	#$ff
  2517 00:0554: 85 05        	sta	<R1
  2518 00:0556: A5 05        	lda	<R1
  2519 00:0558: 05 01        	ora	<R0
  2520 00:055A: 85 09        	sta	<R2
  2521 00:055C: E2 20        	sep	#$20
  2522                        	longa	off
  2523 00:055E: A5 09        	lda	<R2
  2524 00:0560: 8D xx xx     	sta	|~~reg_dor
  2525 00:0563: C2 20        	rep	#$20
  2526                        	longa	on
  2527                        ;	reg_dor |= drive; /* Select the drive for comman
                    ds as well */
  2528                        	.line	419
  2529 00:0565: E2 20        	sep	#$20
  2530                        	longa	off
  2531 00:0567: A5 10        	lda	<L76+drive_0
  2532 00:0569: 0C xx xx     	tsb	|~~reg_dor
  2533 00:056C: C2 20        	rep	#$20
  2534                        	longa	on
  2535                        ;
  2536                        ;	outportb(FDC_DOR, reg_dor);
  2537                        	.line	421
  2538 00:056E: E2 20        	sep	#$20
  2539                        	longa	off
  2540 00:0570: AD xx xx     	lda	|~~reg_dor
  2541 00:0573: 8F F2 13 AF  	sta	>11473906
  2542 00:0577: C2 20        	rep	#$20
  2543                        	longa	on
  2544                        ;
  2545                        ;	sleep(DRIVE_H1440_SPINUP);
  2546                        	.line	423
  Thu Jul 29 2021 11:55                                                Page 49


  2547 00:0579: F4 90 01     	pea	#<$190
  2548 00:057C: 22 xx xx xx  	jsl	~~sleep
  2549                        ;
  2550                        ;	floppy_specify();
  2551                        	.line	425
  2552 00:0580: 22 xx xx xx  	jsl	~~floppy_specify
  2553                        ;	//floppy_drive_data(3, 16, 240, FALSE);
  2554                        ;
  2555                        ;	return 0;
  2556                        	.line	428
  2557 00:0584: A9 00 00     	lda	#$0
  2558 00:0587: 82 8E FF     	brl	L83
  2559                        ;}
  2560                        	.line	429
  2561                        	.endblock	429
  2562             0000000C   L76	equ	12
  2563             0000000D   L77	equ	13
  2564                        	ends
  2565                        	efunc
  2566                        	.endfunc	429,13,12
  2567                        	.line	429
  2568                        ;
  2569                        ;static void floppy_calibrate()
  2570                        ;{
  2571                        	.line	431
  2572                        	.line	432
  2573                        	code
  2574                        	func
  2575                        	.function	432
  2576                        ~~floppy_calibrate:
  2577                        	longa	on
  2578                        	longi	on
  2579 00:058A: 3B           	tsc
  2580 00:058B: 38           	sec
  2581 00:058C: E9 04 00     	sbc	#L84
  2582 00:058F: 1B           	tcs
  2583 00:0590: 0B           	phd
  2584 00:0591: 5B           	tcd
  2585                        	.block	432
  2586                        ;	int i;
  2587                        ;	UCHAR  st0, cyl;
  2588                        ;	motor_on();
  2589             00000000   i_1	set	0
  2590             00000002   st0_1	set	2
  2591             00000003   cyl_1	set	3
  2592                        	.sym	i,0,5,1,16
  2593                        	.sym	st0,2,14,1,8
  2594                        	.sym	cyl,3,14,1,8
  2595                        	.line	435
  2596 00:0592: 22 xx xx xx  	jsl	~~motor_on
  2597                        ;
  2598                        ;	//sendbyte(CMD_RECAL);
  2599                        ;	//sendbyte(cur_drive);
  2600                        ;
  2601                        ;	//fdc_wait(1);
  2602                        ;
  2603                        ;
  2604                        ;
  Thu Jul 29 2021 11:55                                                Page 50


  2605                        ;	for (i = 0; i < 100; i++)
  2606                        	.line	444
  2607 00:0596: 64 01        	stz	<L85+i_1
  2608                        L10025:
  2609                        ;	{
  2610                        	.line	445
  2611                        ;
  2612                        ;		//! send command
  2613                        ;		sendbyte(CMD_RECAL);
  2614                        	.line	448
  2615 00:0598: F4 07 00     	pea	#<$7
  2616 00:059B: 22 xx xx xx  	jsl	~~sendbyte
  2617                        ;		sendbyte(cur_drive);
  2618                        	.line	449
  2619 00:059F: AD xx xx     	lda	|~~cur_drive
  2620 00:05A2: 48           	pha
  2621 00:05A3: 22 xx xx xx  	jsl	~~sendbyte
  2622                        ;		fdc_waitint();
  2623                        	.line	450
  2624 00:05A7: 22 xx xx xx  	jsl	~~fdc_waitint
  2625                        ;		floppy_check_int(&st0, &cyl);
  2626                        	.line	451
  2627 00:05AB: F4 00 00     	pea	#0
  2628 00:05AE: 18           	clc
  2629 00:05AF: 7B           	tdc
  2630 00:05B0: 69 04 00     	adc	#<L85+cyl_1
  2631 00:05B3: 48           	pha
  2632 00:05B4: F4 00 00     	pea	#0
  2633 00:05B7: 18           	clc
  2634 00:05B8: 7B           	tdc
  2635 00:05B9: 69 03 00     	adc	#<L85+st0_1
  2636 00:05BC: 48           	pha
  2637 00:05BD: 22 xx xx xx  	jsl	~~floppy_check_int
  2638                        ;
  2639                        ;		//! did we find cylinder 0? if so, we ar
                    e done
  2640                        ;		if (!cyl)
  2641                        	.line	454
  2642                        ;		{
  2643 00:05C1: A5 04        	lda	<L85+cyl_1
  2644 00:05C3: 29 FF 00     	and	#$ff
  2645 00:05C6: F0 03        	beq	L87
  2646 00:05C8: 82 14 00     	brl	L10026
  2647                        L87:
  2648                        	.line	455
  2649                        ;			k_debug_hex("floppy_calibrate:cy
                    :", cyl);
  2650                        	.line	456
  2651 00:05CB: D4 04        	pei	<L85+cyl_1
  2652 00:05CD: F4 xx xx     	pea	#^L71
  2653 00:05D0: F4 xx xx     	pea	#<L71
  2654 00:05D3: 22 xx xx xx  	jsl	~~k_debug_hex
  2655                        ;			//motor_off();
  2656                        ;			return ;
  2657                        	.line	458
  2658                        L88:
  2659 00:05D7: 2B           	pld
  2660 00:05D8: 3B           	tsc
  Thu Jul 29 2021 11:55                                                Page 51


  2661 00:05D9: 18           	clc
  2662 00:05DA: 69 04 00     	adc	#L84
  2663 00:05DD: 1B           	tcs
  2664 00:05DE: 6B           	rtl
  2665                        ;		}
  2666                        	.line	459
  2667                        ;	}
  2668                        L10026:
  2669                        	.line	460
  2670                        L10023:
  2671 00:05DF: E6 01        	inc	<L85+i_1
  2672 00:05E1: 38           	sec
  2673 00:05E2: A5 01        	lda	<L85+i_1
  2674 00:05E4: E9 64 00     	sbc	#<$64
  2675 00:05E7: 70 03        	bvs	L89
  2676 00:05E9: 49 00 80     	eor	#$8000
  2677                        L89:
  2678 00:05EC: 30 03        	bmi	L90
  2679 00:05EE: 82 A7 FF     	brl	L10025
  2680                        L90:
  2681                        L10024:
  2682                        ;
  2683                        ;	motor_off();
  2684                        	.line	462
  2685 00:05F1: 22 xx xx xx  	jsl	~~motor_off
  2686                        ;}
  2687                        	.line	463
  2688 00:05F5: 82 DF FF     	brl	L88
  2689                        	.endblock	463
  2690             00000004   L84	equ	4
  2691             00000001   L85	equ	1
  2692                        	ends
  2693                        	efunc
  2694                        	.endfunc	463,1,4
  2695                        	.line	463
  2696                        	data
  2697                        L71:
  2698 00:00F7: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$63,$61,$6C,
                    $69,$62,$72,$61,$74
       00:00FB: 70 79 5F 63 
       00:00FF: 61 6C 69 62 
       00:0103: 72 61 74 
  2699 00:0106: 65 3A 63 79  	db	$65,$3A,$63,$79,$3A,$00
       00:010A: 3A 00 
  2700 00:010C:              	ends
  2701                        ;
  2702                        ;static int floppy_seek(UINT track)
  2703                        ;{
  2704                        	.line	465
  2705                        	.line	466
  2706                        	code
  2707                        	func
  2708                        	.function	466
  2709                        ~~floppy_seek:
  2710                        	longa	on
  2711                        	longi	on
  2712 00:05F8: 3B           	tsc
  2713 00:05F9: 38           	sec
  Thu Jul 29 2021 11:55                                                Page 52


  2714 00:05FA: E9 07 00     	sbc	#L92
  2715 00:05FD: 1B           	tcs
  2716 00:05FE: 0B           	phd
  2717 00:05FF: 5B           	tcd
  2718             00000004   track_0	set	4
  2719                        	.block	466
  2720                        ;	UCHAR sts = 0;
  2721                        ;	int res = 0;
  2722                        ;
  2723                        ;	k_debug_hex("floppy_seek:cy:", track);
  2724             00000000   sts_1	set	0
  2725             00000001   res_1	set	1
  2726                        	.sym	sts,0,14,1,8
  2727                        	.sym	res,1,5,1,16
  2728                        	.sym	track,4,16,6,16
  2729 00:0600: E2 20        	sep	#$20
  2730                        	longa	off
  2731 00:0602: 64 05        	stz	<L93+sts_1
  2732 00:0604: C2 20        	rep	#$20
  2733                        	longa	on
  2734 00:0606: 64 06        	stz	<L93+res_1
  2735                        	.line	470
  2736 00:0608: D4 0B        	pei	<L92+track_0
  2737 00:060A: F4 xx xx     	pea	#^L91
  2738 00:060D: F4 xx xx     	pea	#<L91
  2739 00:0610: 22 xx xx xx  	jsl	~~k_debug_hex
  2740                        ;
  2741                        ;	//if (drives[cur_drive].track == track)
  2742                        ;	//	return 0;
  2743                        ;
  2744                        ;	motor_on();
  2745                        	.line	475
  2746 00:0614: 22 xx xx xx  	jsl	~~motor_on
  2747                        ;
  2748                        ;	sendbyte(CMD_SEEK);
  2749                        	.line	477
  2750 00:0618: F4 0F 00     	pea	#<$f
  2751 00:061B: 22 xx xx xx  	jsl	~~sendbyte
  2752                        ;	sendbyte(cur_drive);
  2753                        	.line	478
  2754 00:061F: AD xx xx     	lda	|~~cur_drive
  2755 00:0622: 48           	pha
  2756 00:0623: 22 xx xx xx  	jsl	~~sendbyte
  2757                        ;	sendbyte((UCHAR) track);
  2758                        	.line	479
  2759 00:0627: D4 0B        	pei	<L92+track_0
  2760 00:0629: 22 xx xx xx  	jsl	~~sendbyte
  2761                        ;
  2762                        ;
  2763                        ;	//if (fdc_wait(1))
  2764                        ;	//	res = 1;
  2765                        ;
  2766                        ;	do
  2767                        	.line	485
  2768                        L10029:
  2769                        ;	{
  2770                        	.line	486
  2771                        ;		sts = FDD_MAIN_STATUS[0];
  Thu Jul 29 2021 11:55                                                Page 53


  2772                        	.line	487
  2773 00:062D: E2 20        	sep	#$20
  2774                        	longa	off
  2775 00:062F: AF F4 13 AF  	lda	>11473908
  2776 00:0633: 85 05        	sta	<L93+sts_1
  2777 00:0635: C2 20        	rep	#$20
  2778                        	longa	on
  2779                        ;		k_debug_bits("floppy_seek:sts:", sts);
  2780                        	.line	488
  2781 00:0637: D4 05        	pei	<L93+sts_1
  2782 00:0639: F4 xx xx     	pea	#^L91+16
  2783 00:063C: F4 xx xx     	pea	#<L91+16
  2784 00:063F: 22 xx xx xx  	jsl	~~k_debug_bits
  2785                        ;		if(sts & MSR_DIO)
  2786                        	.line	489
  2787                        ;		{
  2788 00:0643: E2 20        	sep	#$20
  2789                        	longa	off
  2790 00:0645: A5 05        	lda	<L93+sts_1
  2791 00:0647: 29 40        	and	#<$40
  2792 00:0649: C2 20        	rep	#$20
  2793                        	longa	on
  2794 00:064B: D0 03        	bne	L95
  2795 00:064D: 82 0F 00     	brl	L10030
  2796                        L95:
  2797                        	.line	490
  2798                        ;			k_debug_hex("floppy_seek:data:",
                     inportb(FDC_DATA));
  2799                        	.line	491
  2800 00:0650: AF F5 13 AF  	lda	>11473909
  2801 00:0654: 48           	pha
  2802 00:0655: F4 xx xx     	pea	#^L91+33
  2803 00:0658: F4 xx xx     	pea	#<L91+33
  2804 00:065B: 22 xx xx xx  	jsl	~~k_debug_hex
  2805                        ;		}
  2806                        	.line	492
  2807                        ;	}while(sts & MSR_CB);
  2808                        L10030:
  2809                        	.line	493
  2810                        L10027:
  2811 00:065F: E2 20        	sep	#$20
  2812                        	longa	off
  2813 00:0661: A5 05        	lda	<L93+sts_1
  2814 00:0663: 29 10        	and	#<$10
  2815 00:0665: C2 20        	rep	#$20
  2816                        	longa	on
  2817 00:0667: F0 03        	beq	L96
  2818 00:0669: 82 C1 FF     	brl	L10029
  2819                        L96:
  2820                        L10028:
  2821                        ;
  2822                        ;	//usleep(15 * MS);
  2823                        ;	sleep(15);
  2824                        	.line	496
  2825 00:066C: F4 0F 00     	pea	#<$f
  2826 00:066F: 22 xx xx xx  	jsl	~~sleep
  2827                        ;
  2828                        ;	motor_off();
  Thu Jul 29 2021 11:55                                                Page 54


  2829                        	.line	498
  2830 00:0673: 22 xx xx xx  	jsl	~~motor_off
  2831                        ;
  2832                        ;	k_debug_bits("floppy_seek:stsA:", FDD_STATUS_A[0
                    ]);
  2833                        	.line	500
  2834 00:0677: AF F0 13 AF  	lda	>11473904
  2835 00:067B: 48           	pha
  2836 00:067C: F4 xx xx     	pea	#^L91+51
  2837 00:067F: F4 xx xx     	pea	#<L91+51
  2838 00:0682: 22 xx xx xx  	jsl	~~k_debug_bits
  2839                        ;	k_debug_bits("floppy_seek:stsB:", FDD_STATUS_B[0
                    ]);
  2840                        	.line	501
  2841 00:0686: AF F1 13 AF  	lda	>11473905
  2842 00:068A: 48           	pha
  2843 00:068B: F4 xx xx     	pea	#^L91+69
  2844 00:068E: F4 xx xx     	pea	#<L91+69
  2845 00:0691: 22 xx xx xx  	jsl	~~k_debug_bits
  2846                        ;
  2847                        ;
  2848                        ;
  2849                        ;	res = !(FDD_STATUS_A[0] & FDD_ST1_DATTA_ERROR);
  2850                        	.line	505
  2851 00:0695: 64 01        	stz	<R0
  2852 00:0697: E2 20        	sep	#$20
  2853                        	longa	off
  2854 00:0699: AF F0 13 AF  	lda	>11473904
  2855 00:069D: 29 20        	and	#<$20
  2856 00:069F: C2 20        	rep	#$20
  2857                        	longa	on
  2858 00:06A1: F0 03        	beq	L98
  2859 00:06A3: 82 02 00     	brl	L97
  2860                        L98:
  2861 00:06A6: E6 01        	inc	<R0
  2862                        L97:
  2863 00:06A8: A5 01        	lda	<R0
  2864 00:06AA: 85 06        	sta	<L93+res_1
  2865                        ;
  2866                        ;
  2867                        ;	k_debug_integer("floppy_seek:res:", res);
  2868                        	.line	508
  2869 00:06AC: D4 06        	pei	<L93+res_1
  2870 00:06AE: F4 xx xx     	pea	#^L91+87
  2871 00:06B1: F4 xx xx     	pea	#<L91+87
  2872 00:06B4: 22 xx xx xx  	jsl	~~k_debug_integer
  2873                        ;
  2874                        ;	return res;
  2875                        	.line	510
  2876 00:06B8: A5 06        	lda	<L93+res_1
  2877                        L99:
  2878 00:06BA: A8           	tay
  2879 00:06BB: A5 09        	lda	<L92+2
  2880 00:06BD: 85 0B        	sta	<L92+2+2
  2881 00:06BF: A5 08        	lda	<L92+1
  2882 00:06C1: 85 0A        	sta	<L92+1+2
  2883 00:06C3: 2B           	pld
  2884 00:06C4: 3B           	tsc
  Thu Jul 29 2021 11:55                                                Page 55


  2885 00:06C5: 18           	clc
  2886 00:06C6: 69 09 00     	adc	#L92+2
  2887 00:06C9: 1B           	tcs
  2888 00:06CA: 98           	tya
  2889 00:06CB: 6B           	rtl
  2890                        ;
  2891                        ;	//if (!(reg_sr0 & 0x20) || (drives[cur_drive].tr
                    ack != track))
  2892                        ;	//	return 1;
  2893                        ;	//else
  2894                        ;	//	return res;
  2895                        ;}
  2896                        	.line	516
  2897                        	.endblock	516
  2898             00000007   L92	equ	7
  2899             00000005   L93	equ	5
  2900                        	ends
  2901                        	efunc
  2902                        	.endfunc	516,5,7
  2903                        	.line	516
  2904                        	data
  2905                        L91:
  2906 00:010C: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$73,$65,$65,
                    $6B,$3A,$63,$79,$3A
       00:0110: 70 79 5F 73 
       00:0114: 65 65 6B 3A 
       00:0118: 63 79 3A 
  2907 00:011B: 00 66 6C 6F  	db	$00,$66,$6C,$6F,$70,$70,$79,$5F,$73,$65,
                    $65,$6B,$3A,$73,$74
       00:011F: 70 70 79 5F 
       00:0123: 73 65 65 6B 
       00:0127: 3A 73 74 
  2908 00:012A: 73 3A 00 66  	db	$73,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $73,$65,$65,$6B,$3A
       00:012E: 6C 6F 70 70 
       00:0132: 79 5F 73 65 
       00:0136: 65 6B 3A 
  2909 00:0139: 64 61 74 61  	db	$64,$61,$74,$61,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$73,$65
       00:013D: 3A 00 66 6C 
       00:0141: 6F 70 70 79 
       00:0145: 5F 73 65 
  2910 00:0148: 65 6B 3A 73  	db	$65,$6B,$3A,$73,$74,$73,$41,$3A,$00,$66,
                    $6C,$6F,$70,$70,$79
       00:014C: 74 73 41 3A 
       00:0150: 00 66 6C 6F 
       00:0154: 70 70 79 
  2911 00:0157: 5F 73 65 65  	db	$5F,$73,$65,$65,$6B,$3A,$73,$74,$73,$42,
                    $3A,$00,$66,$6C,$6F
       00:015B: 6B 3A 73 74 
       00:015F: 73 42 3A 00 
       00:0163: 66 6C 6F 
  2912 00:0166: 70 70 79 5F  	db	$70,$70,$79,$5F,$73,$65,$65,$6B,$3A,$72,
                    $65,$73,$3A,$00
       00:016A: 73 65 65 6B 
       00:016E: 3A 72 65 73 
       00:0172: 3A 00 
  2913 00:0174:              	ends
  Thu Jul 29 2021 11:55                                                Page 56


  2914                        ;
  2915                        ;int floppy_present()
  2916                        ;{
  2917                        	.line	518
  2918                        	.line	519
  2919                        	code
  2920                        	xdef	~~floppy_present
  2921                        	func
  2922                        	.function	519
  2923                        ~~floppy_present:
  2924                        	longa	on
  2925                        	longi	on
  2926 00:06CC: 3B           	tsc
  2927 00:06CD: 38           	sec
  2928 00:06CE: E9 07 00     	sbc	#L101
  2929 00:06D1: 1B           	tcs
  2930 00:06D2: 0B           	phd
  2931 00:06D3: 5B           	tcd
  2932                        	.block	519
  2933                        ;	int retCode = 0;
  2934                        ;	UCHAR dir = inportb(FDC_DIR);
  2935                        ;	if (dir & DIR_DC)
  2936             00000000   retCode_1	set	0
  2937             00000002   dir_1	set	2
  2938                        	.sym	retCode,0,5,1,16
  2939                        	.sym	dir,2,14,1,8
  2940 00:06D4: 64 05        	stz	<L102+retCode_1
  2941 00:06D6: E2 20        	sep	#$20
  2942                        	longa	off
  2943 00:06D8: AF F7 13 AF  	lda	>11473911
  2944 00:06DC: 85 07        	sta	<L102+dir_1
  2945 00:06DE: C2 20        	rep	#$20
  2946                        	longa	on
  2947                        	.line	522
  2948                        ;	{
  2949 00:06E0: E2 20        	sep	#$20
  2950                        	longa	off
  2951 00:06E2: A5 07        	lda	<L102+dir_1
  2952 00:06E4: 29 80        	and	#<$80
  2953 00:06E6: C2 20        	rep	#$20
  2954                        	longa	on
  2955 00:06E8: D0 03        	bne	L104
  2956 00:06EA: 82 0E 00     	brl	L10031
  2957                        L104:
  2958                        	.line	523
  2959                        ;		floppy_seek(79);
  2960                        	.line	524
  2961 00:06ED: F4 4F 00     	pea	#<$4f
  2962 00:06F0: 22 xx xx xx  	jsl	~~floppy_seek
  2963                        ;		floppy_seek(0);
  2964                        	.line	525
  2965 00:06F4: F4 00 00     	pea	#<$0
  2966 00:06F7: 22 xx xx xx  	jsl	~~floppy_seek
  2967                        ;	}
  2968                        	.line	526
  2969                        ;
  2970                        ;	retCode = !(inportb(FDC_DIR) & DIR_DC);
  2971                        L10031:
  Thu Jul 29 2021 11:55                                                Page 57


  2972                        	.line	528
  2973 00:06FB: 64 01        	stz	<R0
  2974 00:06FD: E2 20        	sep	#$20
  2975                        	longa	off
  2976 00:06FF: AF F7 13 AF  	lda	>11473911
  2977 00:0703: 29 80        	and	#<$80
  2978 00:0705: C2 20        	rep	#$20
  2979                        	longa	on
  2980 00:0707: F0 03        	beq	L106
  2981 00:0709: 82 02 00     	brl	L105
  2982                        L106:
  2983 00:070C: E6 01        	inc	<R0
  2984                        L105:
  2985 00:070E: A5 01        	lda	<R0
  2986 00:0710: 85 05        	sta	<L102+retCode_1
  2987                        ;
  2988                        ;	k_debug_bits("floppy_present:retCode:", (UCHAR)r
                    etCode);
  2989                        	.line	530
  2990 00:0712: D4 05        	pei	<L102+retCode_1
  2991 00:0714: F4 xx xx     	pea	#^L100
  2992 00:0717: F4 xx xx     	pea	#<L100
  2993 00:071A: 22 xx xx xx  	jsl	~~k_debug_bits
  2994                        ;
  2995                        ;	return retCode;
  2996                        	.line	532
  2997 00:071E: A5 05        	lda	<L102+retCode_1
  2998                        L107:
  2999 00:0720: A8           	tay
  3000 00:0721: 2B           	pld
  3001 00:0722: 3B           	tsc
  3002 00:0723: 18           	clc
  3003 00:0724: 69 07 00     	adc	#L101
  3004 00:0727: 1B           	tcs
  3005 00:0728: 98           	tya
  3006 00:0729: 6B           	rtl
  3007                        ;}
  3008                        	.line	533
  3009                        	.endblock	533
  3010             00000007   L101	equ	7
  3011             00000005   L102	equ	5
  3012                        	ends
  3013                        	efunc
  3014                        	.endfunc	533,5,7
  3015                        	.line	533
  3016                        	data
  3017                        L100:
  3018 00:0174: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$70,$72,$65,
                    $73,$65,$6E,$74,$3A
       00:0178: 70 79 5F 70 
       00:017C: 72 65 73 65 
       00:0180: 6E 74 3A 
  3019 00:0183: 72 65 74 43  	db	$72,$65,$74,$43,$6F,$64,$65,$3A,$00
       00:0187: 6F 64 65 3A 
       00:018B: 00 
  3020 00:018C:              	ends
  3021                        ;
  3022                        ;static int floppy_transfer_try1(UCHAR* buf, int d
  Thu Jul 29 2021 11:55                                                Page 58


                    o_write, UINT c,UINT h, UINT s)
  3023                        ;{
  3024                        	.line	535
  3025                        	.line	536
  3026                        	code
  3027                        	func
  3028                        	.function	536
  3029                        ~~floppy_transfer_try1:
  3030                        	longa	on
  3031                        	longi	on
  3032 00:072A: 3B           	tsc
  3033 00:072B: 38           	sec
  3034 00:072C: E9 0D 00     	sbc	#L109
  3035 00:072F: 1B           	tcs
  3036 00:0730: 0B           	phd
  3037 00:0731: 5B           	tcd
  3038             00000004   buf_0	set	4
  3039             00000008   do_write_0	set	8
  3040             0000000A   c_0	set	10
  3041             0000000C   h_0	set	12
  3042             0000000E   s_0	set	14
  3043                        	.block	536
  3044                        ;	int i = 0;
  3045                        ;	UCHAR msr = 0;
  3046                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  3047                        ;	//UCHAR cmd = do_write ? CMD_WRITE : 0xE6;
  3048                        ;	BOOL retCode = FALSE;
  3049                        ;
  3050                        ;	k_debug_integer("floppy_transfer_try:",cur_drive
                    );
  3051             00000000   i_1	set	0
  3052             00000002   msr_1	set	2
  3053             00000003   cmd_1	set	3
  3054             00000004   retCode_1	set	4
  3055                        	.sym	i,0,5,1,16
  3056                        	.sym	msr,2,14,1,8
  3057                        	.sym	cmd,3,14,1,8
  3058                        	.sym	retCode,4,14,1,8
  3059                        	.sym	buf,4,142,6,32
  3060                        	.sym	do_write,8,5,6,16
  3061                        	.sym	c,10,16,6,16
  3062                        	.sym	h,12,16,6,16
  3063                        	.sym	s,14,16,6,16
  3064 00:0732: 64 09        	stz	<L110+i_1
  3065 00:0734: E2 20        	sep	#$20
  3066                        	longa	off
  3067 00:0736: 64 0B        	stz	<L110+msr_1
  3068 00:0738: C2 20        	rep	#$20
  3069                        	longa	on
  3070 00:073A: A5 15        	lda	<L109+do_write_0
  3071 00:073C: D0 03        	bne	L113
  3072 00:073E: 82 05 00     	brl	L112
  3073                        L113:
  3074 00:0741: A9 45 00     	lda	#$45
  3075 00:0744: 80 03        	bra	L114
  3076                        L112:
  3077 00:0746: A9 46 00     	lda	#$46
  3078                        L114:
  Thu Jul 29 2021 11:55                                                Page 59


  3079 00:0749: 85 01        	sta	<R0
  3080 00:074B: E2 20        	sep	#$20
  3081                        	longa	off
  3082 00:074D: A5 01        	lda	<R0
  3083 00:074F: 85 0C        	sta	<L110+cmd_1
  3084 00:0751: C2 20        	rep	#$20
  3085                        	longa	on
  3086 00:0753: E2 20        	sep	#$20
  3087                        	longa	off
  3088 00:0755: 64 0D        	stz	<L110+retCode_1
  3089 00:0757: C2 20        	rep	#$20
  3090                        	longa	on
  3091                        	.line	543
  3092 00:0759: AD xx xx     	lda	|~~cur_drive
  3093 00:075C: 29 FF 00     	and	#$ff
  3094 00:075F: 48           	pha
  3095 00:0760: F4 xx xx     	pea	#^L108
  3096 00:0763: F4 xx xx     	pea	#<L108
  3097 00:0766: 22 xx xx xx  	jsl	~~k_debug_integer
  3098                        ;	k_debug_integer("floppy_transfer_try:track:",c);
  3099                        	.line	544
  3100 00:076A: D4 17        	pei	<L109+c_0
  3101 00:076C: F4 xx xx     	pea	#^L108+21
  3102 00:076F: F4 xx xx     	pea	#<L108+21
  3103 00:0772: 22 xx xx xx  	jsl	~~k_debug_integer
  3104                        ;	k_debug_integer("floppy_transfer_try:head:",h);
  3105                        	.line	545
  3106 00:0776: D4 19        	pei	<L109+h_0
  3107 00:0778: F4 xx xx     	pea	#^L108+48
  3108 00:077B: F4 xx xx     	pea	#<L108+48
  3109 00:077E: 22 xx xx xx  	jsl	~~k_debug_integer
  3110                        ;	k_debug_integer("floppy_transfer_try:sector:",s)
                    ;
  3111                        	.line	546
  3112 00:0782: D4 1B        	pei	<L109+s_0
  3113 00:0784: F4 xx xx     	pea	#^L108+74
  3114 00:0787: F4 xx xx     	pea	#<L108+74
  3115 00:078A: 22 xx xx xx  	jsl	~~k_debug_integer
  3116                        ;
  3117                        ;
  3118                        ;	//floppy_seek(c);
  3119                        ;
  3120                        ;
  3121                        ;	k_debug_string("floppy_transfer_try:READING NOW!
                    \r\n");
  3122                        	.line	552
  3123 00:078E: F4 xx xx     	pea	#^L108+102
  3124 00:0791: F4 xx xx     	pea	#<L108+102
  3125 00:0794: 22 xx xx xx  	jsl	~~k_debug_string
  3126                        ;
  3127                        ;	sendbyte(cmd);
  3128                        	.line	554
  3129 00:0798: D4 0C        	pei	<L110+cmd_1
  3130 00:079A: 22 xx xx xx  	jsl	~~sendbyte
  3131                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  3132                        	.line	555
  3133 00:079E: A5 19        	lda	<L109+h_0
  3134 00:07A0: 0A           	asl	A
  Thu Jul 29 2021 11:55                                                Page 60


  3135 00:07A1: 0A           	asl	A
  3136 00:07A2: 85 01        	sta	<R0
  3137 00:07A4: AD xx xx     	lda	|~~cur_drive
  3138 00:07A7: 29 FF 00     	and	#$ff
  3139 00:07AA: 85 05        	sta	<R1
  3140 00:07AC: A5 05        	lda	<R1
  3141 00:07AE: 05 01        	ora	<R0
  3142 00:07B0: 48           	pha
  3143 00:07B1: 22 xx xx xx  	jsl	~~sendbyte
  3144                        ;	//sendbyte((UCHAR) 0x00);
  3145                        ;	sendbyte((UCHAR) c);
  3146                        	.line	557
  3147 00:07B5: D4 17        	pei	<L109+c_0
  3148 00:07B7: 22 xx xx xx  	jsl	~~sendbyte
  3149                        ;	sendbyte((UCHAR) h);
  3150                        	.line	558
  3151 00:07BB: D4 19        	pei	<L109+h_0
  3152 00:07BD: 22 xx xx xx  	jsl	~~sendbyte
  3153                        ;	sendbyte((UCHAR) s);
  3154                        	.line	559
  3155 00:07C1: D4 1B        	pei	<L109+s_0
  3156 00:07C3: 22 xx xx xx  	jsl	~~sendbyte
  3157                        ;	sendbyte(0x2);
  3158                        	.line	560
  3159 00:07C7: F4 02 00     	pea	#<$2
  3160 00:07CA: 22 xx xx xx  	jsl	~~sendbyte
  3161                        ;	sendbyte((UCHAR) SEC_PER_TRACK);
  3162                        	.line	561
  3163 00:07CE: F4 12 00     	pea	#<$12
  3164 00:07D1: 22 xx xx xx  	jsl	~~sendbyte
  3165                        ;	sendbyte(0x1b);
  3166                        	.line	562
  3167 00:07D5: F4 1B 00     	pea	#<$1b
  3168 00:07D8: 22 xx xx xx  	jsl	~~sendbyte
  3169                        ;	sendbyte(0xff);
  3170                        	.line	563
  3171 00:07DC: F4 FF 00     	pea	#<$ff
  3172 00:07DF: 22 xx xx xx  	jsl	~~sendbyte
  3173                        ;
  3174                        ;	//if (fdc_waitint())
  3175                        ;//		return -1;
  3176                        ;	sleep(DRIVE_H1440_SPINUP);
  3177                        	.line	567
  3178 00:07E3: F4 90 01     	pea	#<$190
  3179 00:07E6: 22 xx xx xx  	jsl	~~sleep
  3180                        ;
  3181                        ;
  3182                        ;	//fdc_waitint();
  3183                        ;
  3184                        ;	/*
  3185                        ;	do
  3186                        ;	{
  3187                        ;		msr = inportb(FDC_MSR);
  3188                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  3189                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  3190                        ;			break;
  3191                        ;		//k_debug_integer("floppy_transfer_try:f
  Thu Jul 29 2021 11:55                                                Page 61


                    loppybufferIndex:",floppybufferIndex);
  3192                        ;		if(floppybufferIndex>0)
  3193                        ;			k_debug_hex("floppy_transfer_try
                    :floppybufferIndex:data:",floppybuffer[floppybufferIndex - 1
                    ]);
  3194                        ;	}while(msr & MSR_CB);
  3195                        ;	*/
  3196                        ;	//for (i = 0; i < SECTOR_SIZE && (msr & MSR_NDMA
                    ); i++)
  3197                        ;
  3198                        ;	/*
  3199                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  3200                        ;	{
  3201                        ;		if (do_write)
  3202                        ;			sendbyte(buf[i]);
  3203                        ;		else
  3204                        ;		{
  3205                        ;			buf[i] = getbyte();
  3206                        ;
  3207                        ;			if(buf[i]!=0xFF)
  3208                        ;				k_debug_hex("READ:", buf
                    [i]);
  3209                        ;		}
  3210                        ;	}
  3211                        ;	*/
  3212                        ;
  3213                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  3214                        	.line	601
  3215 00:07EA: 64 09        	stz	<L110+i_1
  3216                        L10034:
  3217                        ;	{
  3218                        	.line	602
  3219                        ;		msr = inportb(FDC_MSR);
  3220                        	.line	603
  3221 00:07EC: E2 20        	sep	#$20
  3222                        	longa	off
  3223 00:07EE: AF F4 13 AF  	lda	>11473908
  3224 00:07F2: 85 0B        	sta	<L110+msr_1
  3225 00:07F4: C2 20        	rep	#$20
  3226                        	longa	on
  3227                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  3228                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  3229                        	.line	605
  3230                        ;			break;
  3231 00:07F6: E2 20        	sep	#$20
  3232                        	longa	off
  3233 00:07F8: A5 0B        	lda	<L110+msr_1
  3234 00:07FA: 29 C0        	and	#<$c0
  3235 00:07FC: C2 20        	rep	#$20
  3236                        	longa	on
  3237 00:07FE: F0 03        	beq	L115
  3238 00:0800: 82 1E 00     	brl	L10033
  3239                        L115:
  3240                        ;		//k_debug_integer("floppy_transfer_try:f
                    loppybufferIndex:",floppybufferIndex);
  3241                        ;		buf[i] = getbyte();
  3242                        	.line	608
  Thu Jul 29 2021 11:55                                                Page 62


  3243 00:0803: 22 xx xx xx  	jsl	~~getbyte
  3244 00:0807: E2 20        	sep	#$20
  3245                        	longa	off
  3246 00:0809: A4 09        	ldy	<L110+i_1
  3247 00:080B: 97 11        	sta	[<L109+buf_0],Y
  3248 00:080D: C2 20        	rep	#$20
  3249                        	longa	on
  3250                        ;
  3251                        ;	}
  3252                        	.line	610
  3253                        L10032:
  3254 00:080F: E6 09        	inc	<L110+i_1
  3255 00:0811: 38           	sec
  3256 00:0812: A5 09        	lda	<L110+i_1
  3257 00:0814: E9 00 02     	sbc	#<$200
  3258 00:0817: 70 03        	bvs	L116
  3259 00:0819: 49 00 80     	eor	#$8000
  3260                        L116:
  3261 00:081C: 30 03        	bmi	L117
  3262 00:081E: 82 CB FF     	brl	L10034
  3263                        L117:
  3264                        L10033:
  3265                        ;
  3266                        ;	k_debug_byte_array("DATA:\r\n",buf,512);
  3267                        	.line	612
  3268 00:0821: F4 00 00     	pea	#^$200
  3269 00:0824: F4 00 02     	pea	#<$200
  3270 00:0827: D4 13        	pei	<L109+buf_0+2
  3271 00:0829: D4 11        	pei	<L109+buf_0
  3272 00:082B: F4 xx xx     	pea	#^L108+137
  3273 00:082E: F4 xx xx     	pea	#<L108+137
  3274 00:0831: 22 xx xx xx  	jsl	~~k_debug_byte_array
  3275                        ;/*
  3276                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  3277                        ;	{
  3278                        ;		buf[i] = inportb(FDC_DATA);
  3279                        ;		while(!(MSR_DIO & inportb(FDC_MSR)))
  3280                        ;			k_debug_bits("floppy_transfer_tr
                    y1:read:msr:",msr);
  3281                        ;	}
  3282                        ;
  3283                        ;
  3284                        ;	/*
  3285                        ;	do
  3286                        ;	{
  3287                        ;		msr = inportb(FDC_MSR);
  3288                        ;		k_debug_bits("floppy_transfer_try1:msr:"
                    ,msr);
  3289                        ;		buf[i] = inportb(FDC_DATA);
  3290                        ;		if(i < 511)
  3291                        ;			i++;
  3292                        ;	}while(msr & MSR_DIO);
  3293                        ;	*/
  3294                        ;
  3295                        ;
  3296                        ;	reg_sr0 = getbyte();
  3297                        	.line	634
  3298 00:0835: 22 xx xx xx  	jsl	~~getbyte
  Thu Jul 29 2021 11:55                                                Page 63


  3299 00:0839: E2 20        	sep	#$20
  3300                        	longa	off
  3301 00:083B: 8D xx xx     	sta	|~~reg_sr0
  3302 00:083E: C2 20        	rep	#$20
  3303                        	longa	on
  3304                        ;	k_debug_bits("floppy_transfer_try1:reg_sr0:msr:"
                    ,reg_sr0);
  3305                        	.line	635
  3306 00:0840: AD xx xx     	lda	|~~reg_sr0
  3307 00:0843: 48           	pha
  3308 00:0844: F4 xx xx     	pea	#^L108+145
  3309 00:0847: F4 xx xx     	pea	#<L108+145
  3310 00:084A: 22 xx xx xx  	jsl	~~k_debug_bits
  3311                        ;	reg_sr1 = getbyte();
  3312                        	.line	636
  3313 00:084E: 22 xx xx xx  	jsl	~~getbyte
  3314 00:0852: E2 20        	sep	#$20
  3315                        	longa	off
  3316 00:0854: 8D xx xx     	sta	|~~reg_sr1
  3317 00:0857: C2 20        	rep	#$20
  3318                        	longa	on
  3319                        ;	k_debug_bits("floppy_transfer_try1:reg_sr1:msr:"
                    ,reg_sr1);
  3320                        	.line	637
  3321 00:0859: AD xx xx     	lda	|~~reg_sr1
  3322 00:085C: 48           	pha
  3323 00:085D: F4 xx xx     	pea	#^L108+179
  3324 00:0860: F4 xx xx     	pea	#<L108+179
  3325 00:0863: 22 xx xx xx  	jsl	~~k_debug_bits
  3326                        ;	reg_sr2 = getbyte();
  3327                        	.line	638
  3328 00:0867: 22 xx xx xx  	jsl	~~getbyte
  3329 00:086B: E2 20        	sep	#$20
  3330                        	longa	off
  3331 00:086D: 8D xx xx     	sta	|~~reg_sr2
  3332 00:0870: C2 20        	rep	#$20
  3333                        	longa	on
  3334                        ;	k_debug_bits("floppy_transfer_try1:reg_sr2:msr:"
                    ,reg_sr2);
  3335                        	.line	639
  3336 00:0872: AD xx xx     	lda	|~~reg_sr2
  3337 00:0875: 48           	pha
  3338 00:0876: F4 xx xx     	pea	#^L108+213
  3339 00:0879: F4 xx xx     	pea	#<L108+213
  3340 00:087C: 22 xx xx xx  	jsl	~~k_debug_bits
  3341                        ;	drives[cur_drive].track = getbyte();
  3342                        	.line	640
  3343 00:0880: AD xx xx     	lda	|~~cur_drive
  3344 00:0883: 29 FF 00     	and	#$ff
  3345 00:0886: 85 01        	sta	<R0
  3346 00:0888: A5 01        	lda	<R0
  3347 00:088A: 0A           	asl	A
  3348 00:088B: 65 01        	adc	<R0
  3349 00:088D: 0A           	asl	A
  3350 00:088E: 85 01        	sta	<R0
  3351 00:0890: 22 xx xx xx  	jsl	~~getbyte
  3352 00:0894: A6 01        	ldx	<R0
  3353 00:0896: 9D xx xx     	sta	|~~drives,X
  Thu Jul 29 2021 11:55                                                Page 64


  3354                        ;
  3355                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  3356                        ;
  3357                        ;	i = getbyte();
  3358                        	.line	644
  3359 00:0899: 22 xx xx xx  	jsl	~~getbyte
  3360 00:089D: 85 09        	sta	<L110+i_1
  3361                        ;	k_debug_bits("floppy_transfer_try1:1:c:",i);
  3362                        	.line	645
  3363 00:089F: D4 09        	pei	<L110+i_1
  3364 00:08A1: F4 xx xx     	pea	#^L108+247
  3365 00:08A4: F4 xx xx     	pea	#<L108+247
  3366 00:08A7: 22 xx xx xx  	jsl	~~k_debug_bits
  3367                        ;	//k_debug_integer("floppy_transfer_try:i1:",i);
  3368                        ;	i = getbyte();
  3369                        	.line	647
  3370 00:08AB: 22 xx xx xx  	jsl	~~getbyte
  3371 00:08AF: 85 09        	sta	<L110+i_1
  3372                        ;	k_debug_bits("floppy_transfer_try1:2:h:",i);
  3373                        	.line	648
  3374 00:08B1: D4 09        	pei	<L110+i_1
  3375 00:08B3: F4 xx xx     	pea	#^L108+273
  3376 00:08B6: F4 xx xx     	pea	#<L108+273
  3377 00:08B9: 22 xx xx xx  	jsl	~~k_debug_bits
  3378                        ;	//k_debug_integer("floppy_transfer_try:i2:",i);
  3379                        ;	i = getbyte();
  3380                        	.line	650
  3381 00:08BD: 22 xx xx xx  	jsl	~~getbyte
  3382 00:08C1: 85 09        	sta	<L110+i_1
  3383                        ;	k_debug_bits("floppy_transfer_try1:3:r:",i);
  3384                        	.line	651
  3385 00:08C3: D4 09        	pei	<L110+i_1
  3386 00:08C5: F4 xx xx     	pea	#^L108+299
  3387 00:08C8: F4 xx xx     	pea	#<L108+299
  3388 00:08CB: 22 xx xx xx  	jsl	~~k_debug_bits
  3389                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  3390                        ;	i = getbyte();
  3391                        	.line	653
  3392 00:08CF: 22 xx xx xx  	jsl	~~getbyte
  3393 00:08D3: 85 09        	sta	<L110+i_1
  3394                        ;	k_debug_bits("floppy_transfer_try1:3:n:",i);
  3395                        	.line	654
  3396 00:08D5: D4 09        	pei	<L110+i_1
  3397 00:08D7: F4 xx xx     	pea	#^L108+325
  3398 00:08DA: F4 xx xx     	pea	#<L108+325
  3399 00:08DD: 22 xx xx xx  	jsl	~~k_debug_bits
  3400                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  3401                        ;
  3402                        ;	k_debug_integer("floppy_transfer_try:floppybuffe
                    rIndex:",floppybufferIndex);
  3403                        	.line	657
  3404 00:08E1: AD xx xx     	lda	|~~floppybufferIndex
  3405 00:08E4: 48           	pha
  3406 00:08E5: F4 xx xx     	pea	#^L108+351
  3407 00:08E8: F4 xx xx     	pea	#<L108+351
  3408 00:08EB: 22 xx xx xx  	jsl	~~k_debug_integer
  3409                        ;	//return i != 2;
  Thu Jul 29 2021 11:55                                                Page 65


  3410                        ;
  3411                        ;	retCode = (i != 2);
  3412                        	.line	660
  3413 00:08EF: 64 01        	stz	<R0
  3414 00:08F1: A5 09        	lda	<L110+i_1
  3415 00:08F3: C9 02 00     	cmp	#<$2
  3416 00:08F6: D0 03        	bne	L119
  3417 00:08F8: 82 02 00     	brl	L118
  3418                        L119:
  3419 00:08FB: E6 01        	inc	<R0
  3420                        L118:
  3421 00:08FD: E2 20        	sep	#$20
  3422                        	longa	off
  3423 00:08FF: A5 01        	lda	<R0
  3424 00:0901: 85 0D        	sta	<L110+retCode_1
  3425 00:0903: C2 20        	rep	#$20
  3426                        	longa	on
  3427                        ;
  3428                        ;	return retCode;
  3429                        	.line	662
  3430 00:0905: A5 0D        	lda	<L110+retCode_1
  3431 00:0907: 29 FF 00     	and	#$ff
  3432                        L120:
  3433 00:090A: A8           	tay
  3434 00:090B: A5 0F        	lda	<L109+2
  3435 00:090D: 85 1B        	sta	<L109+2+12
  3436 00:090F: A5 0E        	lda	<L109+1
  3437 00:0911: 85 1A        	sta	<L109+1+12
  3438 00:0913: 2B           	pld
  3439 00:0914: 3B           	tsc
  3440 00:0915: 18           	clc
  3441 00:0916: 69 19 00     	adc	#L109+12
  3442 00:0919: 1B           	tcs
  3443 00:091A: 98           	tya
  3444 00:091B: 6B           	rtl
  3445                        ;}
  3446                        	.line	663
  3447                        	.endblock	663
  3448             0000000D   L109	equ	13
  3449             00000009   L110	equ	9
  3450                        	ends
  3451                        	efunc
  3452                        	.endfunc	663,9,13
  3453                        	.line	663
  3454                        	data
  3455                        L108:
  3456 00:018C: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0190: 70 79 5F 74 
       00:0194: 72 61 6E 73 
       00:0198: 66 65 72 
  3457 00:019B: 5F 74 72 79  	db	$5F,$74,$72,$79,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$74,$72
       00:019F: 3A 00 66 6C 
       00:01A3: 6F 70 70 79 
       00:01A7: 5F 74 72 
  3458 00:01AA: 61 6E 73 66  	db	$61,$6E,$73,$66,$65,$72,$5F,$74,$72,$79,
                    $3A,$74,$72,$61,$63
  Thu Jul 29 2021 11:55                                                Page 66


       00:01AE: 65 72 5F 74 
       00:01B2: 72 79 3A 74 
       00:01B6: 72 61 63 
  3459 00:01B9: 6B 3A 00 66  	db	$6B,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:01BD: 6C 6F 70 70 
       00:01C1: 79 5F 74 72 
       00:01C5: 61 6E 73 
  3460 00:01C8: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$3A,$68,$65,
                    $61,$64,$3A,$00,$66
       00:01CC: 74 72 79 3A 
       00:01D0: 68 65 61 64 
       00:01D4: 3A 00 66 
  3461 00:01D7: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:01DB: 79 5F 74 72 
       00:01DF: 61 6E 73 66 
       00:01E3: 65 72 5F 
  3462 00:01E6: 74 72 79 3A  	db	$74,$72,$79,$3A,$73,$65,$63,$74,$6F,$72,
                    $3A,$00,$66,$6C,$6F
       00:01EA: 73 65 63 74 
       00:01EE: 6F 72 3A 00 
       00:01F2: 66 6C 6F 
  3463 00:01F5: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$5F,$74,$72
       00:01F9: 74 72 61 6E 
       00:01FD: 73 66 65 72 
       00:0201: 5F 74 72 
  3464 00:0204: 79 3A 52 45  	db	$79,$3A,$52,$45,$41,$44,$49,$4E,$47,$20,
                    $4E,$4F,$57,$21,$0D
       00:0208: 41 44 49 4E 
       00:020C: 47 20 4E 4F 
       00:0210: 57 21 0D 
  3465 00:0213: 0A 00 44 41  	db	$0A,$00,$44,$41,$54,$41,$3A,$0D,$0A,$00,
                    $66,$6C,$6F,$70,$70
       00:0217: 54 41 3A 0D 
       00:021B: 0A 00 66 6C 
       00:021F: 6F 70 70 
  3466 00:0222: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$31
       00:0226: 61 6E 73 66 
       00:022A: 65 72 5F 74 
       00:022E: 72 79 31 
  3467 00:0231: 3A 72 65 67  	db	$3A,$72,$65,$67,$5F,$73,$72,$30,$3A,$6D,
                    $73,$72,$3A,$00,$66
       00:0235: 5F 73 72 30 
       00:0239: 3A 6D 73 72 
       00:023D: 3A 00 66 
  3468 00:0240: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:0244: 79 5F 74 72 
       00:0248: 61 6E 73 66 
       00:024C: 65 72 5F 
  3469 00:024F: 74 72 79 31  	db	$74,$72,$79,$31,$3A,$72,$65,$67,$5F,$73,
                    $72,$31,$3A,$6D,$73
       00:0253: 3A 72 65 67 
       00:0257: 5F 73 72 31 
       00:025B: 3A 6D 73 
  Thu Jul 29 2021 11:55                                                Page 67


  3470 00:025E: 72 3A 00 66  	db	$72,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:0262: 6C 6F 70 70 
       00:0266: 79 5F 74 72 
       00:026A: 61 6E 73 
  3471 00:026D: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$31,$3A,$72,
                    $65,$67,$5F,$73,$72
       00:0271: 74 72 79 31 
       00:0275: 3A 72 65 67 
       00:0279: 5F 73 72 
  3472 00:027C: 32 3A 6D 73  	db	$32,$3A,$6D,$73,$72,$3A,$00,$66,$6C,$6F,
                    $70,$70,$79,$5F,$74
       00:0280: 72 3A 00 66 
       00:0284: 6C 6F 70 70 
       00:0288: 79 5F 74 
  3473 00:028B: 72 61 6E 73  	db	$72,$61,$6E,$73,$66,$65,$72,$5F,$74,$72,
                    $79,$31,$3A,$31,$3A
       00:028F: 66 65 72 5F 
       00:0293: 74 72 79 31 
       00:0297: 3A 31 3A 
  3474 00:029A: 63 3A 00 66  	db	$63,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:029E: 6C 6F 70 70 
       00:02A2: 79 5F 74 72 
       00:02A6: 61 6E 73 
  3475 00:02A9: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$31,$3A,$32,
                    $3A,$68,$3A,$00,$66
       00:02AD: 74 72 79 31 
       00:02B1: 3A 32 3A 68 
       00:02B5: 3A 00 66 
  3476 00:02B8: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:02BC: 79 5F 74 72 
       00:02C0: 61 6E 73 66 
       00:02C4: 65 72 5F 
  3477 00:02C7: 74 72 79 31  	db	$74,$72,$79,$31,$3A,$33,$3A,$72,$3A,$00,
                    $66,$6C,$6F,$70,$70
       00:02CB: 3A 33 3A 72 
       00:02CF: 3A 00 66 6C 
       00:02D3: 6F 70 70 
  3478 00:02D6: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$31
       00:02DA: 61 6E 73 66 
       00:02DE: 65 72 5F 74 
       00:02E2: 72 79 31 
  3479 00:02E5: 3A 33 3A 6E  	db	$3A,$33,$3A,$6E,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$74,$72
       00:02E9: 3A 00 66 6C 
       00:02ED: 6F 70 70 79 
       00:02F1: 5F 74 72 
  3480 00:02F4: 61 6E 73 66  	db	$61,$6E,$73,$66,$65,$72,$5F,$74,$72,$79,
                    $3A,$66,$6C,$6F,$70
       00:02F8: 65 72 5F 74 
       00:02FC: 72 79 3A 66 
       00:0300: 6C 6F 70 
  3481 00:0303: 70 79 62 75  	db	$70,$79,$62,$75,$66,$66,$65,$72,$49,$6E,
                    $64,$65,$78,$3A,$00
       00:0307: 66 66 65 72 
  Thu Jul 29 2021 11:55                                                Page 68


       00:030B: 49 6E 64 65 
       00:030F: 78 3A 00 
  3482 00:0312:              	ends
  3483                        ;
  3484                        ;void floppy_check_int(UCHAR* st0, UCHAR* cyl)
  3485                        ;{
  3486                        	.line	665
  3487                        	.line	666
  3488                        	code
  3489                        	xdef	~~floppy_check_int
  3490                        	func
  3491                        	.function	666
  3492                        ~~floppy_check_int:
  3493                        	longa	on
  3494                        	longi	on
  3495 00:091C: 3B           	tsc
  3496 00:091D: 38           	sec
  3497 00:091E: E9 00 00     	sbc	#L122
  3498 00:0921: 1B           	tcs
  3499 00:0922: 0B           	phd
  3500 00:0923: 5B           	tcd
  3501             00000004   st0_0	set	4
  3502             00000008   cyl_0	set	8
  3503                        	.block	666
  3504                        ;	k_debug_string("floppy_check_int\r\n");
  3505                        	.sym	st0,4,142,6,32
  3506                        	.sym	cyl,8,142,6,32
  3507                        	.line	667
  3508 00:0924: F4 xx xx     	pea	#^L121
  3509 00:0927: F4 xx xx     	pea	#<L121
  3510 00:092A: 22 xx xx xx  	jsl	~~k_debug_string
  3511                        ;
  3512                        ;	sendbyte(CMD_SENSEI);
  3513                        	.line	669
  3514 00:092E: F4 08 00     	pea	#<$8
  3515 00:0931: 22 xx xx xx  	jsl	~~sendbyte
  3516                        ;
  3517                        ;	*st0 = (UCHAR)getbyte();
  3518                        	.line	671
  3519 00:0935: 22 xx xx xx  	jsl	~~getbyte
  3520 00:0939: E2 20        	sep	#$20
  3521                        	longa	off
  3522 00:093B: 87 04        	sta	[<L122+st0_0]
  3523 00:093D: C2 20        	rep	#$20
  3524                        	longa	on
  3525                        ;	*cyl = (UCHAR)getbyte();
  3526                        	.line	672
  3527 00:093F: 22 xx xx xx  	jsl	~~getbyte
  3528 00:0943: E2 20        	sep	#$20
  3529                        	longa	off
  3530 00:0945: 87 08        	sta	[<L122+cyl_0]
  3531 00:0947: C2 20        	rep	#$20
  3532                        	longa	on
  3533                        ;
  3534                        ;	k_debug_hex("floppy_check_int:st0:", *st0);
  3535                        	.line	674
  3536 00:0949: A7 04        	lda	[<L122+st0_0]
  3537 00:094B: 48           	pha
  Thu Jul 29 2021 11:55                                                Page 69


  3538 00:094C: F4 xx xx     	pea	#^L121+19
  3539 00:094F: F4 xx xx     	pea	#<L121+19
  3540 00:0952: 22 xx xx xx  	jsl	~~k_debug_hex
  3541                        ;	k_debug_hex("floppy_check_int:cyl:", *cyl);
  3542                        	.line	675
  3543 00:0956: A7 08        	lda	[<L122+cyl_0]
  3544 00:0958: 48           	pha
  3545 00:0959: F4 xx xx     	pea	#^L121+41
  3546 00:095C: F4 xx xx     	pea	#<L121+41
  3547 00:095F: 22 xx xx xx  	jsl	~~k_debug_hex
  3548                        ;}
  3549                        	.line	676
  3550                        L125:
  3551 00:0963: A5 02        	lda	<L122+2
  3552 00:0965: 85 0A        	sta	<L122+2+8
  3553 00:0967: A5 01        	lda	<L122+1
  3554 00:0969: 85 09        	sta	<L122+1+8
  3555 00:096B: 2B           	pld
  3556 00:096C: 3B           	tsc
  3557 00:096D: 18           	clc
  3558 00:096E: 69 08 00     	adc	#L122+8
  3559 00:0971: 1B           	tcs
  3560 00:0972: 6B           	rtl
  3561                        	.endblock	676
  3562             00000000   L122	equ	0
  3563             00000001   L123	equ	1
  3564                        	ends
  3565                        	efunc
  3566                        	.endfunc	676,1,0
  3567                        	.line	676
  3568                        	data
  3569                        L121:
  3570 00:0312: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$63,$68,$65,
                    $63,$6B,$5F,$69,$6E
       00:0316: 70 79 5F 63 
       00:031A: 68 65 63 6B 
       00:031E: 5F 69 6E 
  3571 00:0321: 74 0D 0A 00  	db	$74,$0D,$0A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$63,$68,$65,$63
       00:0325: 66 6C 6F 70 
       00:0329: 70 79 5F 63 
       00:032D: 68 65 63 
  3572 00:0330: 6B 5F 69 6E  	db	$6B,$5F,$69,$6E,$74,$3A,$73,$74,$30,$3A,
                    $00,$66,$6C,$6F,$70
       00:0334: 74 3A 73 74 
       00:0338: 30 3A 00 66 
       00:033C: 6C 6F 70 
  3573 00:033F: 70 79 5F 63  	db	$70,$79,$5F,$63,$68,$65,$63,$6B,$5F,$69,
                    $6E,$74,$3A,$63,$79
       00:0343: 68 65 63 6B 
       00:0347: 5F 69 6E 74 
       00:034B: 3A 63 79 
  3574 00:034E: 6C 3A 00     	db	$6C,$3A,$00
  3575 00:0351:              	ends
  3576                        ;
  3577                        ;static int wait_til_ready(void)
  3578                        ;{
  3579                        	.line	678
  Thu Jul 29 2021 11:55                                                Page 70


  3580                        	.line	679
  3581                        	code
  3582                        	func
  3583                        	.function	679
  3584                        ~~wait_til_ready:
  3585                        	longa	on
  3586                        	longi	on
  3587 00:0973: 3B           	tsc
  3588 00:0974: 38           	sec
  3589 00:0975: E9 04 00     	sbc	#L127
  3590 00:0978: 1B           	tcs
  3591 00:0979: 0B           	phd
  3592 00:097A: 5B           	tcd
  3593                        	.block	679
  3594                        ;	int counter, status;
  3595                        ;	for (counter = 0; counter < 10000; counter++)
  3596             00000000   counter_1	set	0
  3597             00000002   status_1	set	2
  3598                        	.sym	counter,0,5,1,16
  3599                        	.sym	status,2,5,1,16
  3600                        	.line	681
  3601 00:097B: 64 01        	stz	<L128+counter_1
  3602                        L10037:
  3603                        ;	{
  3604                        	.line	682
  3605                        ;		status = getbyte();
  3606                        	.line	683
  3607 00:097D: 22 xx xx xx  	jsl	~~getbyte
  3608 00:0981: 85 03        	sta	<L128+status_1
  3609                        ;		if (status & STATUS_READY)
  3610                        	.line	684
  3611                        ;		{
  3612 00:0983: A5 03        	lda	<L128+status_1
  3613 00:0985: 29 80 00     	and	#<$80
  3614 00:0988: D0 03        	bne	L130
  3615 00:098A: 82 0C 00     	brl	L10038
  3616                        L130:
  3617                        	.line	685
  3618                        ;			return status;
  3619                        	.line	686
  3620 00:098D: A5 03        	lda	<L128+status_1
  3621                        L131:
  3622 00:098F: A8           	tay
  3623 00:0990: 2B           	pld
  3624 00:0991: 3B           	tsc
  3625 00:0992: 18           	clc
  3626 00:0993: 69 04 00     	adc	#L127
  3627 00:0996: 1B           	tcs
  3628 00:0997: 98           	tya
  3629 00:0998: 6B           	rtl
  3630                        ;		}
  3631                        	.line	687
  3632                        ;	}
  3633                        L10038:
  3634                        	.line	688
  3635                        L10035:
  3636 00:0999: E6 01        	inc	<L128+counter_1
  3637 00:099B: 38           	sec
  Thu Jul 29 2021 11:55                                                Page 71


  3638 00:099C: A5 01        	lda	<L128+counter_1
  3639 00:099E: E9 10 27     	sbc	#<$2710
  3640 00:09A1: 70 03        	bvs	L132
  3641 00:09A3: 49 00 80     	eor	#$8000
  3642                        L132:
  3643 00:09A6: 30 03        	bmi	L133
  3644 00:09A8: 82 D2 FF     	brl	L10037
  3645                        L133:
  3646                        L10036:
  3647                        ;
  3648                        ;	return -3;
  3649                        	.line	690
  3650 00:09AB: A9 FD FF     	lda	#$fffd
  3651 00:09AE: 82 DE FF     	brl	L131
  3652                        ;}
  3653                        	.line	691
  3654                        	.endblock	691
  3655             00000004   L127	equ	4
  3656             00000001   L128	equ	1
  3657                        	ends
  3658                        	efunc
  3659                        	.endfunc	691,1,4
  3660                        	.line	691
  3661                        ;
  3662                        ;static int floppy_transfer_try2(UCHAR* buf, int d
                    o_write, UINT c,UINT h, UINT s)
  3663                        ;{
  3664                        	.line	693
  3665                        	.line	694
  3666                        	code
  3667                        	func
  3668                        	.function	694
  3669                        ~~floppy_transfer_try2:
  3670                        	longa	on
  3671                        	longi	on
  3672 00:09B1: 3B           	tsc
  3673 00:09B2: 38           	sec
  3674 00:09B3: E9 18 00     	sbc	#L134
  3675 00:09B6: 1B           	tcs
  3676 00:09B7: 0B           	phd
  3677 00:09B8: 5B           	tcd
  3678             00000004   buf_0	set	4
  3679             00000008   do_write_0	set	8
  3680             0000000A   c_0	set	10
  3681             0000000C   h_0	set	12
  3682             0000000E   s_0	set	14
  3683                        	.block	694
  3684                        ;	UCHAR st, cyl;
  3685                        ;	int i = 0;
  3686                        ;	UINT max_bytes = 512;
  3687                        ;	UCHAR msr = 0;
  3688                        ;	UCHAR st0 = 0;
  3689                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  3690                        ;	unsigned char byte;
  3691                        ;	int status;
  3692                        ;	int bytes_read;
  3693                        ;	int result;
  3694                        ;
  Thu Jul 29 2021 11:55                                                Page 72


  3695                        ;	motor_on();
  3696             00000000   st_1	set	0
  3697             00000001   cyl_1	set	1
  3698             00000002   i_1	set	2
  3699             00000004   max_bytes_1	set	4
  3700             00000006   msr_1	set	6
  3701             00000007   st0_1	set	7
  3702             00000008   cmd_1	set	8
  3703             00000009   byte_1	set	9
  3704             0000000A   status_1	set	10
  3705             0000000C   bytes_read_1	set	12
  3706             0000000E   result_1	set	14
  3707                        	.sym	st,0,14,1,8
  3708                        	.sym	cyl,1,14,1,8
  3709                        	.sym	i,2,5,1,16
  3710                        	.sym	max_bytes,4,16,1,16
  3711                        	.sym	msr,6,14,1,8
  3712                        	.sym	st0,7,14,1,8
  3713                        	.sym	cmd,8,14,1,8
  3714                        	.sym	byte,9,14,1,8
  3715                        	.sym	status,10,5,1,16
  3716                        	.sym	bytes_read,12,5,1,16
  3717                        	.sym	result,14,5,1,16
  3718                        	.sym	buf,4,142,6,32
  3719                        	.sym	do_write,8,5,6,16
  3720                        	.sym	c,10,16,6,16
  3721                        	.sym	h,12,16,6,16
  3722                        	.sym	s,14,16,6,16
  3723 00:09B9: 64 0B        	stz	<L135+i_1
  3724 00:09BB: A9 00 02     	lda	#$200
  3725 00:09BE: 85 0D        	sta	<L135+max_bytes_1
  3726 00:09C0: E2 20        	sep	#$20
  3727                        	longa	off
  3728 00:09C2: 64 0F        	stz	<L135+msr_1
  3729 00:09C4: C2 20        	rep	#$20
  3730                        	longa	on
  3731 00:09C6: E2 20        	sep	#$20
  3732                        	longa	off
  3733 00:09C8: 64 10        	stz	<L135+st0_1
  3734 00:09CA: C2 20        	rep	#$20
  3735                        	longa	on
  3736 00:09CC: A5 20        	lda	<L134+do_write_0
  3737 00:09CE: D0 03        	bne	L138
  3738 00:09D0: 82 05 00     	brl	L137
  3739                        L138:
  3740 00:09D3: A9 45 00     	lda	#$45
  3741 00:09D6: 80 03        	bra	L139
  3742                        L137:
  3743 00:09D8: A9 46 00     	lda	#$46
  3744                        L139:
  3745 00:09DB: 85 01        	sta	<R0
  3746 00:09DD: E2 20        	sep	#$20
  3747                        	longa	off
  3748 00:09DF: A5 01        	lda	<R0
  3749 00:09E1: 85 11        	sta	<L135+cmd_1
  3750 00:09E3: C2 20        	rep	#$20
  3751                        	longa	on
  3752                        	.line	706
  Thu Jul 29 2021 11:55                                                Page 73


  3753 00:09E5: 22 xx xx xx  	jsl	~~motor_on
  3754                        ;
  3755                        ;	k_debug_string("floppy_transfer_try2\r\n");
  3756                        	.line	708
  3757 00:09E9: F4 xx xx     	pea	#^L126
  3758 00:09EC: F4 xx xx     	pea	#<L126
  3759 00:09EF: 22 xx xx xx  	jsl	~~k_debug_string
  3760                        ;
  3761                        ;	floppy_check_int(&st,&cyl);
  3762                        	.line	710
  3763 00:09F3: F4 00 00     	pea	#0
  3764 00:09F6: 18           	clc
  3765 00:09F7: 7B           	tdc
  3766 00:09F8: 69 0A 00     	adc	#<L135+cyl_1
  3767 00:09FB: 48           	pha
  3768 00:09FC: F4 00 00     	pea	#0
  3769 00:09FF: 18           	clc
  3770 00:0A00: 7B           	tdc
  3771 00:0A01: 69 09 00     	adc	#<L135+st_1
  3772 00:0A04: 48           	pha
  3773 00:0A05: 22 xx xx xx  	jsl	~~floppy_check_int
  3774                        ;
  3775                        ;	//sendbyte(CMD_READ);
  3776                        ;	sendbyte(FD_READ | (((DISK_H1440_HEAD ==2)?1:0) 
                    << 6));
  3777                        	.line	713
  3778 00:0A09: F4 E6 00     	pea	#<$e6
  3779 00:0A0C: 22 xx xx xx  	jsl	~~sendbyte
  3780                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  3781                        	.line	714
  3782 00:0A10: A5 24        	lda	<L134+h_0
  3783 00:0A12: 0A           	asl	A
  3784 00:0A13: 0A           	asl	A
  3785 00:0A14: 85 01        	sta	<R0
  3786 00:0A16: AD xx xx     	lda	|~~cur_drive
  3787 00:0A19: 29 FF 00     	and	#$ff
  3788 00:0A1C: 85 05        	sta	<R1
  3789 00:0A1E: A5 05        	lda	<R1
  3790 00:0A20: 05 01        	ora	<R0
  3791 00:0A22: 48           	pha
  3792 00:0A23: 22 xx xx xx  	jsl	~~sendbyte
  3793                        ;	sendbyte((UCHAR) c);
  3794                        	.line	715
  3795 00:0A27: D4 22        	pei	<L134+c_0
  3796 00:0A29: 22 xx xx xx  	jsl	~~sendbyte
  3797                        ;	sendbyte((UCHAR) h);
  3798                        	.line	716
  3799 00:0A2D: D4 24        	pei	<L134+h_0
  3800 00:0A2F: 22 xx xx xx  	jsl	~~sendbyte
  3801                        ;	sendbyte((UCHAR) s);
  3802                        	.line	717
  3803 00:0A33: D4 26        	pei	<L134+s_0
  3804 00:0A35: 22 xx xx xx  	jsl	~~sendbyte
  3805                        ;	sendbyte(0x2);
  3806                        	.line	718
  3807 00:0A39: F4 02 00     	pea	#<$2
  3808 00:0A3C: 22 xx xx xx  	jsl	~~sendbyte
  3809                        ;	sendbyte(DISK_H1440_SECT);
  Thu Jul 29 2021 11:55                                                Page 74


  3810                        	.line	719
  3811 00:0A40: F4 12 00     	pea	#<$12
  3812 00:0A43: 22 xx xx xx  	jsl	~~sendbyte
  3813                        ;	sendbyte(DISK_H1440_GAP);
  3814                        	.line	720
  3815 00:0A47: F4 1B 00     	pea	#<$1b
  3816 00:0A4A: 22 xx xx xx  	jsl	~~sendbyte
  3817                        ;	sendbyte(0xff);
  3818                        	.line	721
  3819 00:0A4E: F4 FF 00     	pea	#<$ff
  3820 00:0A51: 22 xx xx xx  	jsl	~~sendbyte
  3821                        ;
  3822                        ;	k_debug_string("floppy_transfer_try2:check for R
                    QM\r\n");
  3823                        	.line	723
  3824 00:0A55: F4 xx xx     	pea	#^L126+23
  3825 00:0A58: F4 xx xx     	pea	#<L126+23
  3826 00:0A5B: 22 xx xx xx  	jsl	~~k_debug_string
  3827                        ;	//sleep(10);
  3828                        ;
  3829                        ;	/*
  3830                        ;	i = 32000;
  3831                        ;	msr = 0;//inportb(FDC_MSR);
  3832                        ;	while(status != (STATUS_READY|STATUS_NON_DMA))
  3833                        ;	{
  3834                        ;		//k_debug_integer("floppy_transfer_try2:
                    wait for RQM:",i);
  3835                        ;
  3836                        ;		//k_debug_hex("     RQM:",(msr & 0x80));
  3837                        ;		//k_debug_hex("     DIO:",(msr & 0x40));
  3838                        ;		//k_debug_hex("    NDMA:",(msr & 0x20));
  3839                        ;		//k_debug_hex("    CMDB:",(msr & 0x10));
  3840                        ;		i--;
  3841                        ;		if(i == 0)
  3842                        ;		{
  3843                        ;			//st0 =  inportb(SRA);
  3844                        ;
  3845                        ;			k_debug_integer("floppy_transfer
                    _try2:wait for ready ABORT:",i);
  3846                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  3847                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  3848                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  3849                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  3850                        ;
  3851                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  3852                        ;
  3853                        ;			return 1;
  3854                        ;		}
  3855                        ;		//sleep(30);
  3856                        ;		msr = inportb(FDC_MSR);
  3857                        ;	}
  3858                        ;	*/
  3859                        ;
  Thu Jul 29 2021 11:55                                                Page 75


  3860                        ;	do
  3861                        	.line	757
  3862                        L10041:
  3863                        ;	{
  3864                        	.line	758
  3865                        ;		status =  inportb(FDC_MSR);
  3866                        	.line	759
  3867 00:0A5F: AF F4 13 AF  	lda	>11473908
  3868 00:0A63: 29 FF 00     	and	#$ff
  3869 00:0A66: 85 13        	sta	<L135+status_1
  3870                        ;		status &= STATUS_READY | STATUS_NON_DMA;
  3871                        	.line	760
  3872 00:0A68: A9 5F FF     	lda	#$ff5f
  3873 00:0A6B: 14 13        	trb	<L135+status_1
  3874                        ;	} while (status != (STATUS_READY | STATUS_NON_DM
                    A));
  3875                        	.line	761
  3876                        L10039:
  3877 00:0A6D: A5 13        	lda	<L135+status_1
  3878 00:0A6F: C9 A0 00     	cmp	#<$a0
  3879 00:0A72: F0 03        	beq	L140
  3880 00:0A74: 82 E8 FF     	brl	L10041
  3881                        L140:
  3882                        L10040:
  3883                        ;
  3884                        ;
  3885                        ;	//st0 =  inportb(SRA);
  3886                        ;	k_debug_string("floppy_transfer_try2:read start\
                    r\n");
  3887                        	.line	765
  3888 00:0A77: F4 xx xx     	pea	#^L126+60
  3889 00:0A7A: F4 xx xx     	pea	#<L126+60
  3890 00:0A7D: 22 xx xx xx  	jsl	~~k_debug_string
  3891                        ;	//k_debug_hex("     RQM:",(msr & 0x80));
  3892                        ;	//k_debug_hex("     DIO:",(msr & 0x40));
  3893                        ;	//k_debug_hex("    NDMA:",(msr & 0x20));
  3894                        ;	//k_debug_hex("    CMDB:",(msr & 0x10));
  3895                        ;	//k_debug_hex("     IRQ:",(st0 & 0x80));
  3896                        ;
  3897                        ;
  3898                        ;	for (i = 0; i < max_bytes; i++)
  3899                        	.line	773
  3900 00:0A81: 64 0B        	stz	<L135+i_1
  3901 00:0A83: 82 44 00     	brl	L10045
  3902                        L10044:
  3903                        ;	{
  3904                        	.line	774
  3905                        ;		if ((status = wait_til_ready()) < 0)
  3906                        	.line	775
  3907                        ;		{
  3908 00:0A86: 22 xx xx xx  	jsl	~~wait_til_ready
  3909 00:0A8A: 85 13        	sta	<L135+status_1
  3910 00:0A8C: A5 13        	lda	<L135+status_1
  3911 00:0A8E: 30 03        	bmi	L141
  3912 00:0A90: 82 03 00     	brl	L10046
  3913                        L141:
  3914                        	.line	776
  3915                        ;			break;
  Thu Jul 29 2021 11:55                                                Page 76


  3916                        	.line	777
  3917 00:0A93: 82 3D 00     	brl	L10043
  3918                        ;		}
  3919                        	.line	778
  3920                        ;		status &= STATUS_READY | STATUS_DIR | ST
                    ATUS_NON_DMA;
  3921                        L10046:
  3922                        	.line	779
  3923 00:0A96: A9 1F FF     	lda	#$ff1f
  3924 00:0A99: 14 13        	trb	<L135+status_1
  3925                        ;		if (status != (STATUS_READY | STATUS_DIR
                     | STATUS_NON_DMA))
  3926                        	.line	780
  3927                        ;		{
  3928 00:0A9B: A5 13        	lda	<L135+status_1
  3929 00:0A9D: C9 E0 00     	cmp	#<$e0
  3930 00:0AA0: D0 03        	bne	L142
  3931 00:0AA2: 82 03 00     	brl	L10047
  3932                        L142:
  3933                        	.line	781
  3934                        ;			break;
  3935                        	.line	782
  3936 00:0AA5: 82 2B 00     	brl	L10043
  3937                        ;		}
  3938                        	.line	783
  3939                        ;		byte = getbyte();
  3940                        L10047:
  3941                        	.line	784
  3942 00:0AA8: 22 xx xx xx  	jsl	~~getbyte
  3943 00:0AAC: E2 20        	sep	#$20
  3944                        	longa	off
  3945 00:0AAE: 85 12        	sta	<L135+byte_1
  3946 00:0AB0: C2 20        	rep	#$20
  3947                        	longa	on
  3948                        ;		k_debug_hex("READ:",byte);
  3949                        	.line	785
  3950 00:0AB2: D4 12        	pei	<L135+byte_1
  3951 00:0AB4: F4 xx xx     	pea	#^L126+94
  3952 00:0AB7: F4 xx xx     	pea	#<L126+94
  3953 00:0ABA: 22 xx xx xx  	jsl	~~k_debug_hex
  3954                        ;		buf[i] = byte;
  3955                        	.line	786
  3956 00:0ABE: E2 20        	sep	#$20
  3957                        	longa	off
  3958 00:0AC0: A5 12        	lda	<L135+byte_1
  3959 00:0AC2: A4 0B        	ldy	<L135+i_1
  3960 00:0AC4: 97 1C        	sta	[<L134+buf_0],Y
  3961 00:0AC6: C2 20        	rep	#$20
  3962                        	longa	on
  3963                        ;	}
  3964                        	.line	787
  3965                        L10042:
  3966 00:0AC8: E6 0B        	inc	<L135+i_1
  3967                        L10045:
  3968 00:0ACA: A5 0B        	lda	<L135+i_1
  3969 00:0ACC: C5 0D        	cmp	<L135+max_bytes_1
  3970 00:0ACE: B0 03        	bcs	L143
  3971 00:0AD0: 82 B3 FF     	brl	L10044
  Thu Jul 29 2021 11:55                                                Page 77


  3972                        L143:
  3973                        L10043:
  3974                        ;	bytes_read = i;
  3975                        	.line	788
  3976 00:0AD3: A5 0B        	lda	<L135+i_1
  3977 00:0AD5: 85 15        	sta	<L135+bytes_read_1
  3978                        ;
  3979                        ;	/* The result stage begins when STATUS_NON_DMA i
                    s cleared */
  3980                        ;	while ((status = inportb(FDC_MSR)) & STATUS_NON_
                    DMA)
  3981                        	.line	791
  3982                        L10048:
  3983 00:0AD7: AF F4 13 AF  	lda	>11473908
  3984 00:0ADB: 29 FF 00     	and	#$ff
  3985 00:0ADE: 85 13        	sta	<L135+status_1
  3986 00:0AE0: A5 13        	lda	<L135+status_1
  3987 00:0AE2: 29 20 00     	and	#<$20
  3988 00:0AE5: D0 03        	bne	L144
  3989 00:0AE7: 82 07 00     	brl	L10049
  3990                        L144:
  3991                        ;	{
  3992                        	.line	792
  3993                        ;		/* We get extra bytes in the fifo  past
  3994                        ;		 * the end of the sector and drop them o
                    n the floor.
  3995                        ;		 * Otherwise the fifo is polluted.
  3996                        ;		 */
  3997                        ;		getbyte();
  3998                        	.line	797
  3999 00:0AEA: 22 xx xx xx  	jsl	~~getbyte
  4000                        ;	}
  4001                        	.line	798
  4002 00:0AEE: 82 E6 FF     	brl	L10048
  4003                        L10049:
  4004                        ;	/*
  4005                        ;	for (i = 0; i < SECTOR_SIZE ; i++)
  4006                        ;	{
  4007                        ;		msr = inportb(FDC_MSR);
  4008                        ;		if((msr & 0xC0) || (msr & 0x20))
  4009                        ;		{
  4010                        ;
  4011                        ;			buf[i] = inportb(FDC_DATA);
  4012                        ;
  4013                        ;			if(buf[i]!=0xFF)
  4014                        ;			{
  4015                        ;				//k_debug_integer("INDEX
                    :", i);
  4016                        ;				k_debug_hex("READ:", buf
                    [i]);
  4017                        ;			}
  4018                        ;
  4019                        ;			//sleep(20);
  4020                        ;		}
  4021                        ;		else
  4022                        ;		{
  4023                        ;			st0 =  inportb(SRA);
  4024                        ;			k_debug_integer("floppy_transfer
  Thu Jul 29 2021 11:55                                                Page 78


                    _try2:read quit:",i);
  4025                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  4026                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  4027                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  4028                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  4029                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  4030                        ;			break;
  4031                        ;		}
  4032                        ;		//msr = inportb(FDC_MSR);
  4033                        ;	}
  4034                        ;	*/
  4035                        ;
  4036                        ;	msr = inportb(FDC_MSR);
  4037                        	.line	831
  4038 00:0AF1: E2 20        	sep	#$20
  4039                        	longa	off
  4040 00:0AF3: AF F4 13 AF  	lda	>11473908
  4041 00:0AF7: 85 0F        	sta	<L135+msr_1
  4042 00:0AF9: C2 20        	rep	#$20
  4043                        	longa	on
  4044                        ;
  4045                        ;	//st0 =  inportb(SRA);
  4046                        ;	k_debug_string("floppy_transfer_try2:read comple
                    te\r\n");
  4047                        	.line	834
  4048 00:0AFB: F4 xx xx     	pea	#^L126+100
  4049 00:0AFE: F4 xx xx     	pea	#<L126+100
  4050 00:0B01: 22 xx xx xx  	jsl	~~k_debug_string
  4051                        ;	//k_debug_hex("     RQM:",(msr & 0x80));
  4052                        ;	//k_debug_hex("     DIO:",(msr & 0x40));
  4053                        ;	//k_debug_hex("    NDMA:",(msr & 0x20));
  4054                        ;	//k_debug_hex("    CMDB:",(msr & 0x10));
  4055                        ;	//k_debug_hex("     IRQ:",(st0 & 0x80));
  4056                        ;
  4057                        ;	/*
  4058                        ;	i = 0xFFF;
  4059                        ;	msr = inportb(FDC_MSR);
  4060                        ;	while(!(msr & 0x80))
  4061                        ;	{
  4062                        ;
  4063                        ;		//k_debug_integer("floppy_transfer_try2:
                    wait for result:",i);
  4064                        ;
  4065                        ;		//k_debug_hex("     RQM:",(msr & 0x80));
  4066                        ;		//k_debug_hex("     DIO:",(msr & 0x40));
  4067                        ;		//k_debug_hex("    NDMA:",(msr & 0x20));
  4068                        ;		//k_debug_hex("    CMDB:",(msr & 0x10));
  4069                        ;		i--;
  4070                        ;		if(i == 0)
  4071                        ;		{
  4072                        ;			//st0 =  inportb(SRA);
  4073                        ;			k_debug_integer("floppy_transfer
                    _try2:wait for result ABORT:",i);
  Thu Jul 29 2021 11:55                                                Page 79


  4074                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  4075                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  4076                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  4077                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  4078                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  4079                        ;			//return 1;
  4080                        ;		}
  4081                        ;
  4082                        ;		msr = inportb(FDC_MSR);
  4083                        ;		//sleep(30);
  4084                        ;	}
  4085                        ;	*/
  4086                        ;
  4087                        ;	reg_sr0 = getbyte();
  4088                        	.line	871
  4089 00:0B05: 22 xx xx xx  	jsl	~~getbyte
  4090 00:0B09: E2 20        	sep	#$20
  4091                        	longa	off
  4092 00:0B0B: 8D xx xx     	sta	|~~reg_sr0
  4093 00:0B0E: C2 20        	rep	#$20
  4094                        	longa	on
  4095                        ;	k_debug_integer("floppy_transfer_try2:reg_sr0:",
                    reg_sr0);
  4096                        	.line	872
  4097 00:0B10: AD xx xx     	lda	|~~reg_sr0
  4098 00:0B13: 29 FF 00     	and	#$ff
  4099 00:0B16: 48           	pha
  4100 00:0B17: F4 xx xx     	pea	#^L126+137
  4101 00:0B1A: F4 xx xx     	pea	#<L126+137
  4102 00:0B1D: 22 xx xx xx  	jsl	~~k_debug_integer
  4103                        ;	reg_sr1 = getbyte();
  4104                        	.line	873
  4105 00:0B21: 22 xx xx xx  	jsl	~~getbyte
  4106 00:0B25: E2 20        	sep	#$20
  4107                        	longa	off
  4108 00:0B27: 8D xx xx     	sta	|~~reg_sr1
  4109 00:0B2A: C2 20        	rep	#$20
  4110                        	longa	on
  4111                        ;	k_debug_integer("floppy_transfer_try2:reg_sr1:",
                    reg_sr1);
  4112                        	.line	874
  4113 00:0B2C: AD xx xx     	lda	|~~reg_sr1
  4114 00:0B2F: 29 FF 00     	and	#$ff
  4115 00:0B32: 48           	pha
  4116 00:0B33: F4 xx xx     	pea	#^L126+167
  4117 00:0B36: F4 xx xx     	pea	#<L126+167
  4118 00:0B39: 22 xx xx xx  	jsl	~~k_debug_integer
  4119                        ;	reg_sr2 = getbyte();
  4120                        	.line	875
  4121 00:0B3D: 22 xx xx xx  	jsl	~~getbyte
  4122 00:0B41: E2 20        	sep	#$20
  4123                        	longa	off
  4124 00:0B43: 8D xx xx     	sta	|~~reg_sr2
  Thu Jul 29 2021 11:55                                                Page 80


  4125 00:0B46: C2 20        	rep	#$20
  4126                        	longa	on
  4127                        ;	k_debug_integer("floppy_transfer_try2:reg_sr2:",
                    reg_sr2);
  4128                        	.line	876
  4129 00:0B48: AD xx xx     	lda	|~~reg_sr2
  4130 00:0B4B: 29 FF 00     	and	#$ff
  4131 00:0B4E: 48           	pha
  4132 00:0B4F: F4 xx xx     	pea	#^L126+197
  4133 00:0B52: F4 xx xx     	pea	#<L126+197
  4134 00:0B55: 22 xx xx xx  	jsl	~~k_debug_integer
  4135                        ;	drives[cur_drive].track = getbyte();
  4136                        	.line	877
  4137 00:0B59: AD xx xx     	lda	|~~cur_drive
  4138 00:0B5C: 29 FF 00     	and	#$ff
  4139 00:0B5F: 85 01        	sta	<R0
  4140 00:0B61: A5 01        	lda	<R0
  4141 00:0B63: 0A           	asl	A
  4142 00:0B64: 65 01        	adc	<R0
  4143 00:0B66: 0A           	asl	A
  4144 00:0B67: 85 01        	sta	<R0
  4145 00:0B69: 22 xx xx xx  	jsl	~~getbyte
  4146 00:0B6D: A6 01        	ldx	<R0
  4147 00:0B6F: 9D xx xx     	sta	|~~drives,X
  4148                        ;	k_debug_integer("floppy_transfer_try2:C:",drives
                    [cur_drive].track);
  4149                        	.line	878
  4150 00:0B72: AD xx xx     	lda	|~~cur_drive
  4151 00:0B75: 29 FF 00     	and	#$ff
  4152 00:0B78: 85 01        	sta	<R0
  4153 00:0B7A: A5 01        	lda	<R0
  4154 00:0B7C: 0A           	asl	A
  4155 00:0B7D: 65 01        	adc	<R0
  4156 00:0B7F: 0A           	asl	A
  4157 00:0B80: 85 01        	sta	<R0
  4158 00:0B82: A6 01        	ldx	<R0
  4159 00:0B84: BD xx xx     	lda	|~~drives,X
  4160 00:0B87: 48           	pha
  4161 00:0B88: F4 xx xx     	pea	#^L126+227
  4162 00:0B8B: F4 xx xx     	pea	#<L126+227
  4163 00:0B8E: 22 xx xx xx  	jsl	~~k_debug_integer
  4164                        ;
  4165                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  4166                        ;
  4167                        ;	i = getbyte();
  4168                        	.line	882
  4169 00:0B92: 22 xx xx xx  	jsl	~~getbyte
  4170 00:0B96: 85 0B        	sta	<L135+i_1
  4171                        ;	k_debug_integer("floppy_transfer_try2:H:",i);
  4172                        	.line	883
  4173 00:0B98: D4 0B        	pei	<L135+i_1
  4174 00:0B9A: F4 xx xx     	pea	#^L126+251
  4175 00:0B9D: F4 xx xx     	pea	#<L126+251
  4176 00:0BA0: 22 xx xx xx  	jsl	~~k_debug_integer
  4177                        ;	i = getbyte();
  4178                        	.line	884
  4179 00:0BA4: 22 xx xx xx  	jsl	~~getbyte
  Thu Jul 29 2021 11:55                                                Page 81


  4180 00:0BA8: 85 0B        	sta	<L135+i_1
  4181                        ;	k_debug_integer("floppy_transfer_try2:R:",i);
  4182                        	.line	885
  4183 00:0BAA: D4 0B        	pei	<L135+i_1
  4184 00:0BAC: F4 xx xx     	pea	#^L126+275
  4185 00:0BAF: F4 xx xx     	pea	#<L126+275
  4186 00:0BB2: 22 xx xx xx  	jsl	~~k_debug_integer
  4187                        ;	i = getbyte();
  4188                        	.line	886
  4189 00:0BB6: 22 xx xx xx  	jsl	~~getbyte
  4190 00:0BBA: 85 0B        	sta	<L135+i_1
  4191                        ;	k_debug_integer("floppy_transfer_try2:N:",i);
  4192                        	.line	887
  4193 00:0BBC: D4 0B        	pei	<L135+i_1
  4194 00:0BBE: F4 xx xx     	pea	#^L126+299
  4195 00:0BC1: F4 xx xx     	pea	#<L126+299
  4196 00:0BC4: 22 xx xx xx  	jsl	~~k_debug_integer
  4197                        ;
  4198                        ;
  4199                        ;	floppy_check_int(&st, &cyl);
  4200                        	.line	890
  4201 00:0BC8: F4 00 00     	pea	#0
  4202 00:0BCB: 18           	clc
  4203 00:0BCC: 7B           	tdc
  4204 00:0BCD: 69 0A 00     	adc	#<L135+cyl_1
  4205 00:0BD0: 48           	pha
  4206 00:0BD1: F4 00 00     	pea	#0
  4207 00:0BD4: 18           	clc
  4208 00:0BD5: 7B           	tdc
  4209 00:0BD6: 69 09 00     	adc	#<L135+st_1
  4210 00:0BD9: 48           	pha
  4211 00:0BDA: 22 xx xx xx  	jsl	~~floppy_check_int
  4212                        ;	//k_debug_hex("floppy_transfer_try2:st:",st);
  4213                        ;	//k_debug_hex("floppy_transfer_try2:cyl:",cyl);
  4214                        ;
  4215                        ;	result = (i != 2);
  4216                        	.line	894
  4217 00:0BDE: 64 01        	stz	<R0
  4218 00:0BE0: A5 0B        	lda	<L135+i_1
  4219 00:0BE2: C9 02 00     	cmp	#<$2
  4220 00:0BE5: D0 03        	bne	L146
  4221 00:0BE7: 82 02 00     	brl	L145
  4222                        L146:
  4223 00:0BEA: E6 01        	inc	<R0
  4224                        L145:
  4225 00:0BEC: A5 01        	lda	<R0
  4226 00:0BEE: 85 17        	sta	<L135+result_1
  4227                        ;
  4228                        ;
  4229                        ;	k_debug_string("floppy_transfer_try2:read exit\r
                    \n");
  4230                        	.line	897
  4231 00:0BF0: F4 xx xx     	pea	#^L126+323
  4232 00:0BF3: F4 xx xx     	pea	#<L126+323
  4233 00:0BF6: 22 xx xx xx  	jsl	~~k_debug_string
  4234                        ;
  4235                        ;	return result;
  4236                        	.line	899
  Thu Jul 29 2021 11:55                                                Page 82


  4237 00:0BFA: A5 17        	lda	<L135+result_1
  4238                        L147:
  4239 00:0BFC: A8           	tay
  4240 00:0BFD: A5 1A        	lda	<L134+2
  4241 00:0BFF: 85 26        	sta	<L134+2+12
  4242 00:0C01: A5 19        	lda	<L134+1
  4243 00:0C03: 85 25        	sta	<L134+1+12
  4244 00:0C05: 2B           	pld
  4245 00:0C06: 3B           	tsc
  4246 00:0C07: 18           	clc
  4247 00:0C08: 69 24 00     	adc	#L134+12
  4248 00:0C0B: 1B           	tcs
  4249 00:0C0C: 98           	tya
  4250 00:0C0D: 6B           	rtl
  4251                        ;
  4252                        ;}
  4253                        	.line	901
  4254                        	.endblock	901
  4255             00000018   L134	equ	24
  4256             00000009   L135	equ	9
  4257                        	ends
  4258                        	efunc
  4259                        	.endfunc	901,9,24
  4260                        	.line	901
  4261                        	data
  4262                        L126:
  4263 00:0351: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0355: 70 79 5F 74 
       00:0359: 72 61 6E 73 
       00:035D: 66 65 72 
  4264 00:0360: 5F 74 72 79  	db	$5F,$74,$72,$79,$32,$0D,$0A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:0364: 32 0D 0A 00 
       00:0368: 66 6C 6F 70 
       00:036C: 70 79 5F 
  4265 00:036F: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$32,$3A,$63
       00:0373: 73 66 65 72 
       00:0377: 5F 74 72 79 
       00:037B: 32 3A 63 
  4266 00:037E: 68 65 63 6B  	db	$68,$65,$63,$6B,$20,$66,$6F,$72,$20,$52,
                    $51,$4D,$0D,$0A,$00
       00:0382: 20 66 6F 72 
       00:0386: 20 52 51 4D 
       00:038A: 0D 0A 00 
  4267 00:038D: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0391: 70 79 5F 74 
       00:0395: 72 61 6E 73 
       00:0399: 66 65 72 
  4268 00:039C: 5F 74 72 79  	db	$5F,$74,$72,$79,$32,$3A,$72,$65,$61,$64,
                    $20,$73,$74,$61,$72
       00:03A0: 32 3A 72 65 
       00:03A4: 61 64 20 73 
       00:03A8: 74 61 72 
  4269 00:03AB: 74 0D 0A 00  	db	$74,$0D,$0A,$00,$52,$45,$41,$44,$3A,$00,
                    $66,$6C,$6F,$70,$70
  Thu Jul 29 2021 11:55                                                Page 83


       00:03AF: 52 45 41 44 
       00:03B3: 3A 00 66 6C 
       00:03B7: 6F 70 70 
  4270 00:03BA: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$32
       00:03BE: 61 6E 73 66 
       00:03C2: 65 72 5F 74 
       00:03C6: 72 79 32 
  4271 00:03C9: 3A 72 65 61  	db	$3A,$72,$65,$61,$64,$20,$63,$6F,$6D,$70,
                    $6C,$65,$74,$65,$0D
       00:03CD: 64 20 63 6F 
       00:03D1: 6D 70 6C 65 
       00:03D5: 74 65 0D 
  4272 00:03D8: 0A 00 66 6C  	db	$0A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:03DC: 6F 70 70 79 
       00:03E0: 5F 74 72 61 
       00:03E4: 6E 73 66 
  4273 00:03E7: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$30
       00:03EB: 72 79 32 3A 
       00:03EF: 72 65 67 5F 
       00:03F3: 73 72 30 
  4274 00:03F6: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:03FA: 6F 70 70 79 
       00:03FE: 5F 74 72 61 
       00:0402: 6E 73 66 
  4275 00:0405: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$31
       00:0409: 72 79 32 3A 
       00:040D: 72 65 67 5F 
       00:0411: 73 72 31 
  4276 00:0414: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:0418: 6F 70 70 79 
       00:041C: 5F 74 72 61 
       00:0420: 6E 73 66 
  4277 00:0423: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$32
       00:0427: 72 79 32 3A 
       00:042B: 72 65 67 5F 
       00:042F: 73 72 32 
  4278 00:0432: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:0436: 6F 70 70 79 
       00:043A: 5F 74 72 61 
       00:043E: 6E 73 66 
  4279 00:0441: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$43,$3A,
                    $00,$66,$6C,$6F,$70
       00:0445: 72 79 32 3A 
       00:0449: 43 3A 00 66 
       00:044D: 6C 6F 70 
  4280 00:0450: 70 79 5F 74  	db	$70,$79,$5F,$74,$72,$61,$6E,$73,$66,$65,
                    $72,$5F,$74,$72,$79
       00:0454: 72 61 6E 73 
       00:0458: 66 65 72 5F 
       00:045C: 74 72 79 
  Thu Jul 29 2021 11:55                                                Page 84


  4281 00:045F: 32 3A 48 3A  	db	$32,$3A,$48,$3A,$00,$66,$6C,$6F,$70,$70,
                    $79,$5F,$74,$72,$61
       00:0463: 00 66 6C 6F 
       00:0467: 70 70 79 5F 
       00:046B: 74 72 61 
  4282 00:046E: 6E 73 66 65  	db	$6E,$73,$66,$65,$72,$5F,$74,$72,$79,$32,
                    $3A,$52,$3A,$00,$66
       00:0472: 72 5F 74 72 
       00:0476: 79 32 3A 52 
       00:047A: 3A 00 66 
  4283 00:047D: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:0481: 79 5F 74 72 
       00:0485: 61 6E 73 66 
       00:0489: 65 72 5F 
  4284 00:048C: 74 72 79 32  	db	$74,$72,$79,$32,$3A,$4E,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:0490: 3A 4E 3A 00 
       00:0494: 66 6C 6F 70 
       00:0498: 70 79 5F 
  4285 00:049B: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$32,$3A,$72
       00:049F: 73 66 65 72 
       00:04A3: 5F 74 72 79 
       00:04A7: 32 3A 72 
  4286 00:04AA: 65 61 64 20  	db	$65,$61,$64,$20,$65,$78,$69,$74,$0D,$0A,
                    $00
       00:04AE: 65 78 69 74 
       00:04B2: 0D 0A 00 
  4287 00:04B5:              	ends
  4288                        ;
  4289                        ;
  4290                        ;static int floppy_transfer(UCHAR *buf, int do_wri
                    te, UINT c, UINT h,UINT s)
  4291                        ;{
  4292                        	.line	904
  4293                        	.line	905
  4294                        	code
  4295                        	func
  4296                        	.function	905
  4297                        ~~floppy_transfer:
  4298                        	longa	on
  4299                        	longi	on
  4300 00:0C0E: 3B           	tsc
  4301 00:0C0F: 38           	sec
  4302 00:0C10: E9 04 00     	sbc	#L149
  4303 00:0C13: 1B           	tcs
  4304 00:0C14: 0B           	phd
  4305 00:0C15: 5B           	tcd
  4306             00000004   buf_0	set	4
  4307             00000008   do_write_0	set	8
  4308             0000000A   c_0	set	10
  4309             0000000C   h_0	set	12
  4310             0000000E   s_0	set	14
  4311                        	.block	905
  4312                        ;	int i;
  4313                        ;	int res = 0 ;
  4314                        ;
  Thu Jul 29 2021 11:55                                                Page 85


  4315                        ;	i = floppy_seek(c);
  4316             00000000   i_1	set	0
  4317             00000002   res_1	set	2
  4318                        	.sym	i,0,5,1,16
  4319                        	.sym	res,2,5,1,16
  4320                        	.sym	buf,4,142,6,32
  4321                        	.sym	do_write,8,5,6,16
  4322                        	.sym	c,10,16,6,16
  4323                        	.sym	h,12,16,6,16
  4324                        	.sym	s,14,16,6,16
  4325 00:0C16: 64 03        	stz	<L150+res_1
  4326                        	.line	909
  4327 00:0C18: D4 0E        	pei	<L149+c_0
  4328 00:0C1A: 22 xx xx xx  	jsl	~~floppy_seek
  4329 00:0C1E: 85 01        	sta	<L150+i_1
  4330                        ;
  4331                        ;	k_debug_integer("floppy_transfer:i:", i);
  4332                        	.line	911
  4333 00:0C20: D4 01        	pei	<L150+i_1
  4334 00:0C22: F4 xx xx     	pea	#^L148
  4335 00:0C25: F4 xx xx     	pea	#<L148
  4336 00:0C28: 22 xx xx xx  	jsl	~~k_debug_integer
  4337                        ;	k_debug_integer("floppy_transfer:c:", c);
  4338                        	.line	912
  4339 00:0C2C: D4 0E        	pei	<L149+c_0
  4340 00:0C2E: F4 xx xx     	pea	#^L148+19
  4341 00:0C31: F4 xx xx     	pea	#<L148+19
  4342 00:0C34: 22 xx xx xx  	jsl	~~k_debug_integer
  4343                        ;	k_debug_integer("floppy_transfer:h:", h);
  4344                        	.line	913
  4345 00:0C38: D4 10        	pei	<L149+h_0
  4346 00:0C3A: F4 xx xx     	pea	#^L148+38
  4347 00:0C3D: F4 xx xx     	pea	#<L148+38
  4348 00:0C40: 22 xx xx xx  	jsl	~~k_debug_integer
  4349                        ;	k_debug_integer("floppy_transfer:s:", s);
  4350                        	.line	914
  4351 00:0C44: D4 12        	pei	<L149+s_0
  4352 00:0C46: F4 xx xx     	pea	#^L148+57
  4353 00:0C49: F4 xx xx     	pea	#<L148+57
  4354 00:0C4C: 22 xx xx xx  	jsl	~~k_debug_integer
  4355                        ;
  4356                        ;	/*
  4357                        ;	res = -1;
  4358                        ;	for (i = 0; i < 4; i++)
  4359                        ;	{
  4360                        ;		if(!floppy_transfer_try2(buf, do_write, 
                    c, h, s))
  4361                        ;		{
  4362                        ;			if (!(reg_sr0 & 0xC0))
  4363                        ;			{
  4364                        ;				res = 0;
  4365                        ;				break;
  4366                        ;			}
  4367                        ;			if (do_write && (reg_sr1 & 0x2))
  4368                        ;			{
  4369                        ;				res = 1;
  4370                        ;				break;
  4371                        ;			}
  Thu Jul 29 2021 11:55                                                Page 86


  4372                        ;		}
  4373                        ;	}
  4374                        ;	return res;
  4375                        ;	*/
  4376                        ;
  4377                        ;	//return floppy_transfer_try2(buf, do_write, c, 
                    h, s);
  4378                        ;	return floppy_transfer_try1(buf, do_write, c, h,
                     s);
  4379                        	.line	938
  4380 00:0C50: D4 12        	pei	<L149+s_0
  4381 00:0C52: D4 10        	pei	<L149+h_0
  4382 00:0C54: D4 0E        	pei	<L149+c_0
  4383 00:0C56: D4 0C        	pei	<L149+do_write_0
  4384 00:0C58: D4 0A        	pei	<L149+buf_0+2
  4385 00:0C5A: D4 08        	pei	<L149+buf_0
  4386 00:0C5C: 22 xx xx xx  	jsl	~~floppy_transfer_try1
  4387                        L152:
  4388 00:0C60: A8           	tay
  4389 00:0C61: A5 06        	lda	<L149+2
  4390 00:0C63: 85 12        	sta	<L149+2+12
  4391 00:0C65: A5 05        	lda	<L149+1
  4392 00:0C67: 85 11        	sta	<L149+1+12
  4393 00:0C69: 2B           	pld
  4394 00:0C6A: 3B           	tsc
  4395 00:0C6B: 18           	clc
  4396 00:0C6C: 69 10 00     	adc	#L149+12
  4397 00:0C6F: 1B           	tcs
  4398 00:0C70: 98           	tya
  4399 00:0C71: 6B           	rtl
  4400                        ;
  4401                        ;}
  4402                        	.line	940
  4403                        	.endblock	940
  4404             00000004   L149	equ	4
  4405             00000001   L150	equ	1
  4406                        	ends
  4407                        	efunc
  4408                        	.endfunc	940,1,4
  4409                        	.line	940
  4410                        	data
  4411                        L148:
  4412 00:04B5: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:04B9: 70 79 5F 74 
       00:04BD: 72 61 6E 73 
       00:04C1: 66 65 72 
  4413 00:04C4: 3A 69 3A 00  	db	$3A,$69,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
       00:04C8: 66 6C 6F 70 
       00:04CC: 70 79 5F 74 
       00:04D0: 72 61 6E 
  4414 00:04D3: 73 66 65 72  	db	$73,$66,$65,$72,$3A,$63,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:04D7: 3A 63 3A 00 
       00:04DB: 66 6C 6F 70 
       00:04DF: 70 79 5F 
  4415 00:04E2: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$3A,$68,
  Thu Jul 29 2021 11:55                                                Page 87


                    $3A,$00,$66,$6C,$6F
       00:04E6: 73 66 65 72 
       00:04EA: 3A 68 3A 00 
       00:04EE: 66 6C 6F 
  4416 00:04F1: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$3A,$73,$3A
       00:04F5: 74 72 61 6E 
       00:04F9: 73 66 65 72 
       00:04FD: 3A 73 3A 
  4417 00:0500: 00           	db	$00
  4418 00:0501:              	ends
  4419                        ;
  4420                        ;static int floppy_transfer_lba(UCHAR *buf, ULONG 
                    lba, UINT num,int do_write)
  4421                        ;{
  4422                        	.line	942
  4423                        	.line	943
  4424                        	code
  4425                        	func
  4426                        	.function	943
  4427                        ~~floppy_transfer_lba:
  4428                        	longa	on
  4429                        	longi	on
  4430 00:0C72: 3B           	tsc
  4431 00:0C73: 38           	sec
  4432 00:0C74: E9 0A 00     	sbc	#L154
  4433 00:0C77: 1B           	tcs
  4434 00:0C78: 0B           	phd
  4435 00:0C79: 5B           	tcd
  4436             00000004   buf_0	set	4
  4437             00000008   lba_0	set	8
  4438             0000000C   num_0	set	12
  4439             0000000E   do_write_0	set	14
  4440                        	.block	943
  4441                        ;	int i;
  4442                        ;	int res = 0;
  4443                        ;	UINT c, h, s;
  4444                        ;
  4445                        ;	motor_on();
  4446             00000000   i_1	set	0
  4447             00000002   res_1	set	2
  4448             00000004   c_1	set	4
  4449             00000006   h_1	set	6
  4450             00000008   s_1	set	8
  4451                        	.sym	i,0,5,1,16
  4452                        	.sym	res,2,5,1,16
  4453                        	.sym	c,4,16,1,16
  4454                        	.sym	h,6,16,1,16
  4455                        	.sym	s,8,16,1,16
  4456                        	.sym	buf,4,142,6,32
  4457                        	.sym	lba,8,18,6,32
  4458                        	.sym	num,12,16,6,16
  4459                        	.sym	do_write,14,5,6,16
  4460 00:0C7A: 64 03        	stz	<L155+res_1
  4461                        	.line	948
  4462 00:0C7C: 22 xx xx xx  	jsl	~~motor_on
  4463                        ;
  4464                        ;	for (i = 0; i < num; i++)
  Thu Jul 29 2021 11:55                                                Page 88


  4465                        	.line	950
  4466 00:0C80: 64 01        	stz	<L155+i_1
  4467 00:0C82: 82 57 00     	brl	L10053
  4468                        L10052:
  4469                        ;	{
  4470                        	.line	951
  4471                        ;		k_debug_long("floppy_transfer_lba:lba:",
                     lba);
  4472                        	.line	952
  4473 00:0C85: D4 14        	pei	<L154+lba_0+2
  4474 00:0C87: D4 12        	pei	<L154+lba_0
  4475 00:0C89: F4 xx xx     	pea	#^L153
  4476 00:0C8C: F4 xx xx     	pea	#<L153
  4477 00:0C8F: 22 xx xx xx  	jsl	~~k_debug_long
  4478                        ;		lba_2_chs(lba, &c, &h, &s);
  4479                        	.line	953
  4480 00:0C93: F4 00 00     	pea	#0
  4481 00:0C96: 18           	clc
  4482 00:0C97: 7B           	tdc
  4483 00:0C98: 69 09 00     	adc	#<L155+s_1
  4484 00:0C9B: 48           	pha
  4485 00:0C9C: F4 00 00     	pea	#0
  4486 00:0C9F: 18           	clc
  4487 00:0CA0: 7B           	tdc
  4488 00:0CA1: 69 07 00     	adc	#<L155+h_1
  4489 00:0CA4: 48           	pha
  4490 00:0CA5: F4 00 00     	pea	#0
  4491 00:0CA8: 18           	clc
  4492 00:0CA9: 7B           	tdc
  4493 00:0CAA: 69 05 00     	adc	#<L155+c_1
  4494 00:0CAD: 48           	pha
  4495 00:0CAE: D4 14        	pei	<L154+lba_0+2
  4496 00:0CB0: D4 12        	pei	<L154+lba_0
  4497 00:0CB2: 22 xx xx xx  	jsl	~~lba_2_chs
  4498                        ;
  4499                        ;		res = floppy_transfer(buf, do_write, c, 
                    h, s);
  4500                        	.line	955
  4501 00:0CB6: D4 09        	pei	<L155+s_1
  4502 00:0CB8: D4 07        	pei	<L155+h_1
  4503 00:0CBA: D4 05        	pei	<L155+c_1
  4504 00:0CBC: D4 18        	pei	<L154+do_write_0
  4505 00:0CBE: D4 10        	pei	<L154+buf_0+2
  4506 00:0CC0: D4 0E        	pei	<L154+buf_0
  4507 00:0CC2: 22 xx xx xx  	jsl	~~floppy_transfer
  4508 00:0CC6: 85 03        	sta	<L155+res_1
  4509                        ;		k_debug_integer("floppy_transfer_lba:res
                    :", res);
  4510                        	.line	956
  4511 00:0CC8: D4 03        	pei	<L155+res_1
  4512 00:0CCA: F4 xx xx     	pea	#^L153+25
  4513 00:0CCD: F4 xx xx     	pea	#<L153+25
  4514 00:0CD0: 22 xx xx xx  	jsl	~~k_debug_integer
  4515                        ;		lba++;
  4516                        	.line	957
  4517 00:0CD4: E6 12        	inc	<L154+lba_0
  4518 00:0CD6: D0 02        	bne	L157
  4519 00:0CD8: E6 14        	inc	<L154+lba_0+2
  Thu Jul 29 2021 11:55                                                Page 89


  4520                        L157:
  4521                        ;	}
  4522                        	.line	958
  4523                        L10050:
  4524 00:0CDA: E6 01        	inc	<L155+i_1
  4525                        L10053:
  4526 00:0CDC: A5 01        	lda	<L155+i_1
  4527 00:0CDE: C5 16        	cmp	<L154+num_0
  4528 00:0CE0: B0 03        	bcs	L158
  4529 00:0CE2: 82 A0 FF     	brl	L10052
  4530                        L158:
  4531                        L10051:
  4532                        ;
  4533                        ;	motor_off();
  4534                        	.line	960
  4535 00:0CE5: 22 xx xx xx  	jsl	~~motor_off
  4536                        ;
  4537                        ;	return res;
  4538                        	.line	962
  4539 00:0CE9: A5 03        	lda	<L155+res_1
  4540                        L159:
  4541 00:0CEB: A8           	tay
  4542 00:0CEC: A5 0C        	lda	<L154+2
  4543 00:0CEE: 85 18        	sta	<L154+2+12
  4544 00:0CF0: A5 0B        	lda	<L154+1
  4545 00:0CF2: 85 17        	sta	<L154+1+12
  4546 00:0CF4: 2B           	pld
  4547 00:0CF5: 3B           	tsc
  4548 00:0CF6: 18           	clc
  4549 00:0CF7: 69 16 00     	adc	#L154+12
  4550 00:0CFA: 1B           	tcs
  4551 00:0CFB: 98           	tya
  4552 00:0CFC: 6B           	rtl
  4553                        ;}
  4554                        	.line	963
  4555                        	.endblock	963
  4556             0000000A   L154	equ	10
  4557             00000001   L155	equ	1
  4558                        	ends
  4559                        	efunc
  4560                        	.endfunc	963,1,10
  4561                        	.line	963
  4562                        	data
  4563                        L153:
  4564 00:0501: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0505: 70 79 5F 74 
       00:0509: 72 61 6E 73 
       00:050D: 66 65 72 
  4565 00:0510: 5F 6C 62 61  	db	$5F,$6C,$62,$61,$3A,$6C,$62,$61,$3A,$00,
                    $66,$6C,$6F,$70,$70
       00:0514: 3A 6C 62 61 
       00:0518: 3A 00 66 6C 
       00:051C: 6F 70 70 
  4566 00:051F: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$6C,$62,$61,$3A
       00:0523: 61 6E 73 66 
       00:0527: 65 72 5F 6C 
  Thu Jul 29 2021 11:55                                                Page 90


       00:052B: 62 61 3A 
  4567 00:052E: 72 65 73 3A  	db	$72,$65,$73,$3A,$00
       00:0532: 00 
  4568 00:0533:              	ends
  4569                        ;
  4570                        ;int floppy_read(const UCHAR *buf, ULONG offset, U
                    LONG num)
  4571                        ;{
  4572                        	.line	965
  4573                        	.line	966
  4574                        	code
  4575                        	xdef	~~floppy_read
  4576                        	func
  4577                        	.function	966
  4578                        ~~floppy_read:
  4579                        	longa	on
  4580                        	longi	on
  4581 00:0CFD: 3B           	tsc
  4582 00:0CFE: 38           	sec
  4583 00:0CFF: E9 00 00     	sbc	#L161
  4584 00:0D02: 1B           	tcs
  4585 00:0D03: 0B           	phd
  4586 00:0D04: 5B           	tcd
  4587             00000004   buf_0	set	4
  4588             00000008   offset_0	set	8
  4589             0000000C   num_0	set	12
  4590                        	.block	966
  4591                        ;	return floppy_transfer_lba((UCHAR*) buf, offset,
                     (UINT) num, 0);
  4592                        	.sym	buf,4,142,6,32
  4593                        	.sym	offset,8,18,6,32
  4594                        	.sym	num,12,18,6,32
  4595                        	.line	967
  4596 00:0D05: F4 00 00     	pea	#<$0
  4597 00:0D08: D4 0C        	pei	<L161+num_0
  4598 00:0D0A: D4 0A        	pei	<L161+offset_0+2
  4599 00:0D0C: D4 08        	pei	<L161+offset_0
  4600 00:0D0E: D4 06        	pei	<L161+buf_0+2
  4601 00:0D10: D4 04        	pei	<L161+buf_0
  4602 00:0D12: 22 xx xx xx  	jsl	~~floppy_transfer_lba
  4603                        L164:
  4604 00:0D16: A8           	tay
  4605 00:0D17: A5 02        	lda	<L161+2
  4606 00:0D19: 85 0E        	sta	<L161+2+12
  4607 00:0D1B: A5 01        	lda	<L161+1
  4608 00:0D1D: 85 0D        	sta	<L161+1+12
  4609 00:0D1F: 2B           	pld
  4610 00:0D20: 3B           	tsc
  4611 00:0D21: 18           	clc
  4612 00:0D22: 69 0C 00     	adc	#L161+12
  4613 00:0D25: 1B           	tcs
  4614 00:0D26: 98           	tya
  4615 00:0D27: 6B           	rtl
  4616                        ;}
  4617                        	.line	968
  4618                        	.endblock	968
  4619             00000000   L161	equ	0
  4620             00000001   L162	equ	1
  Thu Jul 29 2021 11:55                                                Page 91


  4621                        	ends
  4622                        	efunc
  4623                        	.endfunc	968,1,0
  4624                        	.line	968
  4625                        ;
  4626                        ;int floppy_write(UCHAR *buf, ULONG offset, ULONG 
                    num)
  4627                        ;{
  4628                        	.line	970
  4629                        	.line	971
  4630                        	code
  4631                        	xdef	~~floppy_write
  4632                        	func
  4633                        	.function	971
  4634                        ~~floppy_write:
  4635                        	longa	on
  4636                        	longi	on
  4637 00:0D28: 3B           	tsc
  4638 00:0D29: 38           	sec
  4639 00:0D2A: E9 00 00     	sbc	#L165
  4640 00:0D2D: 1B           	tcs
  4641 00:0D2E: 0B           	phd
  4642 00:0D2F: 5B           	tcd
  4643             00000004   buf_0	set	4
  4644             00000008   offset_0	set	8
  4645             0000000C   num_0	set	12
  4646                        	.block	971
  4647                        ;	return floppy_transfer_lba(buf, offset, (UINT) n
                    um, 1);
  4648                        	.sym	buf,4,142,6,32
  4649                        	.sym	offset,8,18,6,32
  4650                        	.sym	num,12,18,6,32
  4651                        	.line	972
  4652 00:0D30: F4 01 00     	pea	#<$1
  4653 00:0D33: D4 0C        	pei	<L165+num_0
  4654 00:0D35: D4 0A        	pei	<L165+offset_0+2
  4655 00:0D37: D4 08        	pei	<L165+offset_0
  4656 00:0D39: D4 06        	pei	<L165+buf_0+2
  4657 00:0D3B: D4 04        	pei	<L165+buf_0
  4658 00:0D3D: 22 xx xx xx  	jsl	~~floppy_transfer_lba
  4659                        L168:
  4660 00:0D41: A8           	tay
  4661 00:0D42: A5 02        	lda	<L165+2
  4662 00:0D44: 85 0E        	sta	<L165+2+12
  4663 00:0D46: A5 01        	lda	<L165+1
  4664 00:0D48: 85 0D        	sta	<L165+1+12
  4665 00:0D4A: 2B           	pld
  4666 00:0D4B: 3B           	tsc
  4667 00:0D4C: 18           	clc
  4668 00:0D4D: 69 0C 00     	adc	#L165+12
  4669 00:0D50: 1B           	tcs
  4670 00:0D51: 98           	tya
  4671 00:0D52: 6B           	rtl
  4672                        ;}
  4673                        	.line	973
  4674                        	.endblock	973
  4675             00000000   L165	equ	0
  4676             00000001   L166	equ	1
  Thu Jul 29 2021 11:55                                                Page 92


  4677                        	ends
  4678                        	efunc
  4679                        	.endfunc	973,1,0
  4680                        	.line	973
  4681                        ;
  4682                        ;void floppy_init()
  4683                        ;{
  4684                        	.line	975
  4685                        	.line	976
  4686                        	code
  4687                        	xdef	~~floppy_init
  4688                        	func
  4689                        	.function	976
  4690                        ~~floppy_init:
  4691                        	longa	on
  4692                        	longi	on
  4693 00:0D53: 3B           	tsc
  4694 00:0D54: 38           	sec
  4695 00:0D55: E9 08 00     	sbc	#L169
  4696 00:0D58: 1B           	tcs
  4697 00:0D59: 0B           	phd
  4698 00:0D5A: 5B           	tcd
  4699                        	.block	976
  4700                        ;	int r = 0;
  4701                        ;	int pres = 0;
  4702                        ;
  4703                        ;	k_debug_string("floppy_init\r\n");
  4704             00000000   r_1	set	0
  4705             00000002   pres_1	set	2
  4706                        	.sym	r,0,5,1,16
  4707                        	.sym	pres,2,5,1,16
  4708 00:0D5B: 64 05        	stz	<L170+r_1
  4709 00:0D5D: 64 07        	stz	<L170+pres_1
  4710                        	.line	980
  4711 00:0D5F: F4 xx xx     	pea	#^L160
  4712 00:0D62: F4 xx xx     	pea	#<L160
  4713 00:0D65: 22 xx xx xx  	jsl	~~k_debug_string
  4714                        ;
  4715                        ;	fdc_reset();
  4716                        	.line	982
  4717 00:0D69: 22 xx xx xx  	jsl	~~fdc_reset
  4718                        ;
  4719                        ;	sendbyte(CMD_VERSION);
  4720                        	.line	984
  4721 00:0D6D: F4 10 00     	pea	#<$10
  4722 00:0D70: 22 xx xx xx  	jsl	~~sendbyte
  4723                        ;	r = getbyte();
  4724                        	.line	985
  4725 00:0D74: 22 xx xx xx  	jsl	~~getbyte
  4726 00:0D78: 85 05        	sta	<L170+r_1
  4727                        ;	k_debug_long("fdc ver:", r);
  4728                        	.line	986
  4729 00:0D7A: A0 00 00     	ldy	#$0
  4730 00:0D7D: A5 05        	lda	<L170+r_1
  4731 00:0D7F: 10 01        	bpl	L172
  4732 00:0D81: 88           	dey
  4733                        L172:
  4734 00:0D82: 85 01        	sta	<R0
  Thu Jul 29 2021 11:55                                                Page 93


  4735 00:0D84: 84 03        	sty	<R0+2
  4736 00:0D86: D4 03        	pei	<R0+2
  4737 00:0D88: D4 01        	pei	<R0
  4738 00:0D8A: F4 xx xx     	pea	#^L160+14
  4739 00:0D8D: F4 xx xx     	pea	#<L160+14
  4740 00:0D90: 22 xx xx xx  	jsl	~~k_debug_long
  4741                        ;	if (r != 0x90)
  4742                        	.line	987
  4743                        ;	{
  4744 00:0D94: A5 05        	lda	<L170+r_1
  4745 00:0D96: C9 90 00     	cmp	#<$90
  4746 00:0D99: D0 03        	bne	L173
  4747 00:0D9B: 82 0A 00     	brl	L10054
  4748                        L173:
  4749                        	.line	988
  4750                        ;		k_debug_string("floppy might not being w
                    orking\r\n");
  4751                        	.line	989
  4752 00:0D9E: F4 xx xx     	pea	#^L160+23
  4753 00:0DA1: F4 xx xx     	pea	#<L160+23
  4754 00:0DA4: 22 xx xx xx  	jsl	~~k_debug_string
  4755                        ;	}
  4756                        	.line	990
  4757                        ;
  4758                        ;	k_debug_string("select\r\n");
  4759                        L10054:
  4760                        	.line	992
  4761 00:0DA8: F4 xx xx     	pea	#^L160+56
  4762 00:0DAB: F4 xx xx     	pea	#<L160+56
  4763 00:0DAE: 22 xx xx xx  	jsl	~~k_debug_string
  4764                        ;	floppy_select(0);
  4765                        	.line	993
  4766 00:0DB2: F4 00 00     	pea	#<$0
  4767 00:0DB5: 22 xx xx xx  	jsl	~~floppy_select
  4768                        ;	k_debug_string("calibrate\r\n");
  4769                        	.line	994
  4770 00:0DB9: F4 xx xx     	pea	#^L160+65
  4771 00:0DBC: F4 xx xx     	pea	#<L160+65
  4772 00:0DBF: 22 xx xx xx  	jsl	~~k_debug_string
  4773                        ;	floppy_calibrate();
  4774                        	.line	995
  4775 00:0DC3: 22 xx xx xx  	jsl	~~floppy_calibrate
  4776                        ;	k_debug_long("sr0:", reg_sr0);
  4777                        	.line	996
  4778 00:0DC7: AD xx xx     	lda	|~~reg_sr0
  4779 00:0DCA: 29 FF 00     	and	#$ff
  4780 00:0DCD: 85 01        	sta	<R0
  4781 00:0DCF: 64 03        	stz	<R0+2
  4782 00:0DD1: D4 03        	pei	<R0+2
  4783 00:0DD3: D4 01        	pei	<R0
  4784 00:0DD5: F4 xx xx     	pea	#^L160+77
  4785 00:0DD8: F4 xx xx     	pea	#<L160+77
  4786 00:0DDB: 22 xx xx xx  	jsl	~~k_debug_long
  4787                        ;
  4788                        ;	pres = floppy_present();
  4789                        	.line	998
  4790 00:0DDF: 22 xx xx xx  	jsl	~~floppy_present
  4791 00:0DE3: 85 07        	sta	<L170+pres_1
  Thu Jul 29 2021 11:55                                                Page 94


  4792                        ;	k_debug_long("floppy_present():", pres);
  4793                        	.line	999
  4794 00:0DE5: A0 00 00     	ldy	#$0
  4795 00:0DE8: A5 07        	lda	<L170+pres_1
  4796 00:0DEA: 10 01        	bpl	L174
  4797 00:0DEC: 88           	dey
  4798                        L174:
  4799 00:0DED: 85 01        	sta	<R0
  4800 00:0DEF: 84 03        	sty	<R0+2
  4801 00:0DF1: D4 03        	pei	<R0+2
  4802 00:0DF3: D4 01        	pei	<R0
  4803 00:0DF5: F4 xx xx     	pea	#^L160+82
  4804 00:0DF8: F4 xx xx     	pea	#<L160+82
  4805 00:0DFB: 22 xx xx xx  	jsl	~~k_debug_long
  4806                        ;
  4807                        ;	r = floppy_read(floppybuffer, 0, 1);
  4808                        	.line	1001
  4809 00:0DFF: F4 00 00     	pea	#^$1
  4810 00:0E02: F4 01 00     	pea	#<$1
  4811 00:0E05: F4 00 00     	pea	#^$0
  4812 00:0E08: F4 00 00     	pea	#<$0
  4813 00:0E0B: A9 xx xx     	lda	#<~~floppybuffer
  4814 00:0E0E: 85 01        	sta	<R0
  4815                        	xref	_BEG_DATA
  4816 00:0E10: A9 xx xx     	lda	#_BEG_DATA>>16
  4817 00:0E13: 85 03        	sta	<R0+2
  4818 00:0E15: D4 03        	pei	<R0+2
  4819 00:0E17: D4 01        	pei	<R0
  4820 00:0E19: 22 xx xx xx  	jsl	~~floppy_read
  4821 00:0E1D: 85 05        	sta	<L170+r_1
  4822                        ;
  4823                        ;	k_debug_integer("read(0) return:",r);
  4824                        	.line	1003
  4825 00:0E1F: D4 05        	pei	<L170+r_1
  4826 00:0E21: F4 xx xx     	pea	#^L160+100
  4827 00:0E24: F4 xx xx     	pea	#<L160+100
  4828 00:0E27: 22 xx xx xx  	jsl	~~k_debug_integer
  4829                        ;	k_debug_byte_array("floppy_sector:\r\n",floppybu
                    ffer,512);
  4830                        	.line	1004
  4831 00:0E2B: F4 00 00     	pea	#^$200
  4832 00:0E2E: F4 00 02     	pea	#<$200
  4833 00:0E31: A9 xx xx     	lda	#<~~floppybuffer
  4834 00:0E34: 85 01        	sta	<R0
  4835                        	xref	_BEG_DATA
  4836 00:0E36: A9 xx xx     	lda	#_BEG_DATA>>16
  4837 00:0E39: 85 03        	sta	<R0+2
  4838 00:0E3B: D4 03        	pei	<R0+2
  4839 00:0E3D: D4 01        	pei	<R0
  4840 00:0E3F: F4 xx xx     	pea	#^L160+116
  4841 00:0E42: F4 xx xx     	pea	#<L160+116
  4842 00:0E45: 22 xx xx xx  	jsl	~~k_debug_byte_array
  4843                        ;
  4844                        ;/*
  4845                        ;	r = floppy_read(floppybuffer, 1, 1);
  4846                        ;
  4847                        ;		k_debug_integer("read(0):",r);
  4848                        ;
  Thu Jul 29 2021 11:55                                                Page 95


  4849                        ;		k_debug_byte_array("floppy_sector:\r\n",
                    floppybuffer,512);
  4850                        ;*/
  4851                        ;	//k_debug_integer("read(0):", floppy_read(floppy
                    buffer, 1,1));
  4852                        ;	//k_debug_integer("read(0):", floppy_read(floppy
                    buffer, 19, 1));
  4853                        ;
  4854                        ;	//motor_off();
  4855                        ;}
  4856                        	.line	1017
  4857                        L175:
  4858 00:0E49: 2B           	pld
  4859 00:0E4A: 3B           	tsc
  4860 00:0E4B: 18           	clc
  4861 00:0E4C: 69 08 00     	adc	#L169
  4862 00:0E4F: 1B           	tcs
  4863 00:0E50: 6B           	rtl
  4864                        	.endblock	1017
  4865             00000008   L169	equ	8
  4866             00000005   L170	equ	5
  4867                        	ends
  4868                        	efunc
  4869                        	.endfunc	1017,5,8
  4870                        	.line	1017
  4871                        	data
  4872                        L160:
  4873 00:0533: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$69,$6E,$69,
                    $74,$0D,$0A,$00,$66
       00:0537: 70 79 5F 69 
       00:053B: 6E 69 74 0D 
       00:053F: 0A 00 66 
  4874 00:0542: 64 63 20 76  	db	$64,$63,$20,$76,$65,$72,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$20
       00:0546: 65 72 3A 00 
       00:054A: 66 6C 6F 70 
       00:054E: 70 79 20 
  4875 00:0551: 6D 69 67 68  	db	$6D,$69,$67,$68,$74,$20,$6E,$6F,$74,$20,
                    $62,$65,$69,$6E,$67
       00:0555: 74 20 6E 6F 
       00:0559: 74 20 62 65 
       00:055D: 69 6E 67 
  4876 00:0560: 20 77 6F 72  	db	$20,$77,$6F,$72,$6B,$69,$6E,$67,$0D,$0A,
                    $00,$73,$65,$6C,$65
       00:0564: 6B 69 6E 67 
       00:0568: 0D 0A 00 73 
       00:056C: 65 6C 65 
  4877 00:056F: 63 74 0D 0A  	db	$63,$74,$0D,$0A,$00,$63,$61,$6C,$69,$62,
                    $72,$61,$74,$65,$0D
       00:0573: 00 63 61 6C 
       00:0577: 69 62 72 61 
       00:057B: 74 65 0D 
  4878 00:057E: 0A 00 73 72  	db	$0A,$00,$73,$72,$30,$3A,$00,$66,$6C,$6F,
                    $70,$70,$79,$5F,$70
       00:0582: 30 3A 00 66 
       00:0586: 6C 6F 70 70 
       00:058A: 79 5F 70 
  4879 00:058D: 72 65 73 65  	db	$72,$65,$73,$65,$6E,$74,$28,$29,$3A,$00,
  Thu Jul 29 2021 11:55                                                Page 96


                    $72,$65,$61,$64,$28
       00:0591: 6E 74 28 29 
       00:0595: 3A 00 72 65 
       00:0599: 61 64 28 
  4880 00:059C: 30 29 20 72  	db	$30,$29,$20,$72,$65,$74,$75,$72,$6E,$3A,
                    $00,$66,$6C,$6F,$70
       00:05A0: 65 74 75 72 
       00:05A4: 6E 3A 00 66 
       00:05A8: 6C 6F 70 
  4881 00:05AB: 70 79 5F 73  	db	$70,$79,$5F,$73,$65,$63,$74,$6F,$72,$3A,
                    $0D,$0A,$00
       00:05AF: 65 63 74 6F 
       00:05B3: 72 3A 0D 0A 
       00:05B7: 00 
  4882 00:05B8:              	ends
  4883                        ;
  4884                        ;/* this is IRQ6 handler */
  4885                        ;void floppy_isr()
  4886                        ;{
  4887                        	.line	1020
  4888                        	.line	1021
  4889                        	code
  4890                        	xdef	~~floppy_isr
  4891                        	func
  4892                        	.function	1021
  4893                        ~~floppy_isr:
  4894                        	longa	on
  4895                        	longi	on
  4896 00:0E51: 3B           	tsc
  4897 00:0E52: 38           	sec
  4898 00:0E53: E9 00 00     	sbc	#L177
  4899 00:0E56: 1B           	tcs
  4900 00:0E57: 0B           	phd
  4901 00:0E58: 5B           	tcd
  4902                        	.block	1021
  4903                        ;	irq_signaled = 1;
  4904                        	.line	1022
  4905 00:0E59: E2 20        	sep	#$20
  4906                        	longa	off
  4907 00:0E5B: A9 01        	lda	#$1
  4908 00:0E5D: 8D xx xx     	sta	|~~irq_signaled
  4909 00:0E60: C2 20        	rep	#$20
  4910                        	longa	on
  4911                        ;}
  4912                        	.line	1023
  4913                        L180:
  4914 00:0E62: 2B           	pld
  4915 00:0E63: 3B           	tsc
  4916 00:0E64: 18           	clc
  4917 00:0E65: 69 00 00     	adc	#L177
  4918 00:0E68: 1B           	tcs
  4919 00:0E69: 6B           	rtl
  4920                        	.endblock	1023
  4921             00000000   L177	equ	0
  4922             00000001   L178	equ	1
  4923                        	ends
  4924                        	efunc
  4925                        	.endfunc	1023,1,0
  Thu Jul 29 2021 11:55                                                Page 97


  4926                        	.line	1023
  4927                        ;
  4928                        ;/* this's being called from timer isr (1000 Hz) *
                    /
  4929                        ;void floppy_timer()
  4930                        ;{
  4931                        	.line	1026
  4932                        	.line	1027
  4933                        	code
  4934                        	xdef	~~floppy_timer
  4935                        	func
  4936                        	.function	1027
  4937                        ~~floppy_timer:
  4938                        	longa	on
  4939                        	longi	on
  4940 00:0E6A: 3B           	tsc
  4941 00:0E6B: 38           	sec
  4942 00:0E6C: E9 0C 00     	sbc	#L181
  4943 00:0E6F: 1B           	tcs
  4944 00:0E70: 0B           	phd
  4945 00:0E71: 5B           	tcd
  4946                        	.block	1027
  4947                        ;	if (motoff_timer > 0)
  4948                        	.line	1028
  4949                        ;	{
  4950 00:0E72: 38           	sec
  4951 00:0E73: A9 00 00     	lda	#$0
  4952 00:0E76: ED xx xx     	sbc	|~~motoff_timer
  4953 00:0E79: 70 03        	bvs	L184
  4954 00:0E7B: 49 00 80     	eor	#$8000
  4955                        L184:
  4956 00:0E7E: 10 03        	bpl	L185
  4957 00:0E80: 82 7E 00     	brl	L10055
  4958                        L185:
  4959                        	.line	1029
  4960                        ;		//k_debug_string("motoff_timer\r\n");
  4961                        ;		motoff_timer--;
  4962                        	.line	1031
  4963 00:0E83: CE xx xx     	dec	|~~motoff_timer
  4964                        ;		if (motoff_timer == 0)
  4965                        	.line	1032
  4966                        ;		{
  4967 00:0E86: AD xx xx     	lda	|~~motoff_timer
  4968 00:0E89: F0 03        	beq	L186
  4969 00:0E8B: 82 73 00     	brl	L10056
  4970                        L186:
  4971                        	.line	1033
  4972                        ;			k_debug_hex("motoff_timer_off:",
                    inportb(FDC_DOR));
  4973                        	.line	1034
  4974 00:0E8E: AF F2 13 AF  	lda	>11473906
  4975 00:0E92: 48           	pha
  4976 00:0E93: F4 xx xx     	pea	#^L176
  4977 00:0E96: F4 xx xx     	pea	#<L176
  4978 00:0E99: 22 xx xx xx  	jsl	~~k_debug_hex
  4979                        ;			reg_dor &= ~(1 << (cur_drive + 4
                    ));
  4980                        	.line	1035
  Thu Jul 29 2021 11:55                                                Page 98


  4981 00:0E9D: AD xx xx     	lda	|~~cur_drive
  4982 00:0EA0: 29 FF 00     	and	#$ff
  4983 00:0EA3: 85 01        	sta	<R0
  4984 00:0EA5: 18           	clc
  4985 00:0EA6: A9 04 00     	lda	#$4
  4986 00:0EA9: 65 01        	adc	<R0
  4987 00:0EAB: 48           	pha
  4988 00:0EAC: A9 01 00     	lda	#$1
  4989 00:0EAF: FA           	plx
  4990                        	xref	~~~asl
  4991 00:0EB0: 22 xx xx xx  	jsl	~~~asl
  4992 00:0EB4: 49 FF FF     	eor	#<$ffffffff
  4993 00:0EB7: 85 01        	sta	<R0
  4994 00:0EB9: AD xx xx     	lda	|~~reg_dor
  4995 00:0EBC: 29 FF 00     	and	#$ff
  4996 00:0EBF: 85 05        	sta	<R1
  4997 00:0EC1: A5 05        	lda	<R1
  4998 00:0EC3: 25 01        	and	<R0
  4999 00:0EC5: 85 09        	sta	<R2
  5000 00:0EC7: E2 20        	sep	#$20
  5001                        	longa	off
  5002 00:0EC9: A5 09        	lda	<R2
  5003 00:0ECB: 8D xx xx     	sta	|~~reg_dor
  5004 00:0ECE: C2 20        	rep	#$20
  5005                        	longa	on
  5006                        ;			k_debug_hex("motoff_timer_off:",
                    reg_dor);
  5007                        	.line	1036
  5008 00:0ED0: AD xx xx     	lda	|~~reg_dor
  5009 00:0ED3: 48           	pha
  5010 00:0ED4: F4 xx xx     	pea	#^L176+18
  5011 00:0ED7: F4 xx xx     	pea	#<L176+18
  5012 00:0EDA: 22 xx xx xx  	jsl	~~k_debug_hex
  5013                        ;			outportb(FDC_DOR, reg_dor);
  5014                        	.line	1037
  5015 00:0EDE: E2 20        	sep	#$20
  5016                        	longa	off
  5017 00:0EE0: AD xx xx     	lda	|~~reg_dor
  5018 00:0EE3: 8F F2 13 AF  	sta	>11473906
  5019 00:0EE7: C2 20        	rep	#$20
  5020                        	longa	on
  5021                        ;			drives[cur_drive].motstate = 0;
  5022                        	.line	1038
  5023 00:0EE9: AD xx xx     	lda	|~~cur_drive
  5024 00:0EEC: 29 FF 00     	and	#$ff
  5025 00:0EEF: 85 01        	sta	<R0
  5026 00:0EF1: A5 01        	lda	<R0
  5027 00:0EF3: 0A           	asl	A
  5028 00:0EF4: 65 01        	adc	<R0
  5029 00:0EF6: 0A           	asl	A
  5030 00:0EF7: 85 01        	sta	<R0
  5031 00:0EF9: A9 00 00     	lda	#$0
  5032 00:0EFC: A6 01        	ldx	<R0
  5033 00:0EFE: 9D xx xx     	sta	|~~drives+2,X
  5034                        ;		}
  5035                        	.line	1039
  5036                        ;	}
  5037                        L10056:
  Thu Jul 29 2021 11:55                                                Page 99


  5038                        	.line	1040
  5039                        ;}
  5040                        L10055:
  5041                        	.line	1041
  5042                        L187:
  5043 00:0F01: 2B           	pld
  5044 00:0F02: 3B           	tsc
  5045 00:0F03: 18           	clc
  5046 00:0F04: 69 0C 00     	adc	#L181
  5047 00:0F07: 1B           	tcs
  5048 00:0F08: 6B           	rtl
  5049                        	.endblock	1041
  5050             0000000C   L181	equ	12
  5051             0000000D   L182	equ	13
  5052                        	ends
  5053                        	efunc
  5054                        	.endfunc	1041,13,12
  5055                        	.line	1041
  5056                        	data
  5057                        L176:
  5058 00:05B8: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$66,$66,$5F,$74,$69,$6D,
                    $65,$72,$5F,$6F,$66
       00:05BC: 66 66 5F 74 
       00:05C0: 69 6D 65 72 
       00:05C4: 5F 6F 66 
  5059 00:05C7: 66 3A 00 6D  	db	$66,$3A,$00,$6D,$6F,$74,$6F,$66,$66,$5F,
                    $74,$69,$6D,$65,$72
       00:05CB: 6F 74 6F 66 
       00:05CF: 66 5F 74 69 
       00:05D3: 6D 65 72 
  5060 00:05D6: 5F 6F 66 66  	db	$5F,$6F,$66,$66,$3A,$00
       00:05DA: 3A 00 
  5061 00:05DC:              	ends
  5062                        ;
  5063                        ;BOOL k_fd_reset(VOID)
  5064                        ;{
  5065                        	.line	1043
  5066                        	.line	1044
  5067                        	code
  5068                        	xdef	~~k_fd_reset
  5069                        	func
  5070                        	.function	1044
  5071                        ~~k_fd_reset:
  5072                        	longa	on
  5073                        	longi	on
  5074 00:0F09: 3B           	tsc
  5075 00:0F0A: 38           	sec
  5076 00:0F0B: E9 00 00     	sbc	#L189
  5077 00:0F0E: 1B           	tcs
  5078 00:0F0F: 0B           	phd
  5079 00:0F10: 5B           	tcd
  5080                        	.block	1044
  5081                        ;	inportb(FDC_DOR);
  5082                        	.line	1045
  5083                        ;
  5084                        ;	return TRUE;
  5085                        	.line	1047
  5086 00:0F11: A9 01 00     	lda	#$1
  Thu Jul 29 2021 11:55                                                Page 100


  5087                        L192:
  5088 00:0F14: A8           	tay
  5089 00:0F15: 2B           	pld
  5090 00:0F16: 3B           	tsc
  5091 00:0F17: 18           	clc
  5092 00:0F18: 69 00 00     	adc	#L189
  5093 00:0F1B: 1B           	tcs
  5094 00:0F1C: 98           	tya
  5095 00:0F1D: 6B           	rtl
  5096                        ;}
  5097                        	.line	1048
  5098                        	.endblock	1048
  5099             00000000   L189	equ	0
  5100             00000001   L190	equ	1
  5101                        	ends
  5102                        	efunc
  5103                        	.endfunc	1048,1,0
  5104                        	.line	1048
  5105                        ;
  5106                        ;
  5107                        ;BOOL k_fd_init(VOID)
  5108                        ;{
  5109                        	.line	1051
  5110                        	.line	1052
  5111                        	code
  5112                        	xdef	~~k_fd_init
  5113                        	func
  5114                        	.function	1052
  5115                        ~~k_fd_init:
  5116                        	longa	on
  5117                        	longi	on
  5118 00:0F1E: 3B           	tsc
  5119 00:0F1F: 38           	sec
  5120 00:0F20: E9 08 00     	sbc	#L193
  5121 00:0F23: 1B           	tcs
  5122 00:0F24: 0B           	phd
  5123 00:0F25: 5B           	tcd
  5124                        	.block	1052
  5125                        ;	INT i = 0;
  5126                        ;	INT wait = 0;
  5127                        ;
  5128                        ;	inportb(FDC_DOR) = 0x04;
  5129             00000000   i_1	set	0
  5130             00000002   wait_1	set	2
  5131                        	.sym	i,0,5,1,16
  5132                        	.sym	wait,2,5,1,16
  5133 00:0F26: 64 05        	stz	<L194+i_1
  5134 00:0F28: 64 07        	stz	<L194+wait_1
  5135                        	.line	1056
  5136 00:0F2A: E2 20        	sep	#$20
  5137                        	longa	off
  5138 00:0F2C: A9 04        	lda	#$4
  5139 00:0F2E: 8F F2 13 AF  	sta	>11473906
  5140 00:0F32: C2 20        	rep	#$20
  5141                        	longa	on
  5142                        ;
  5143                        ;	sleep(1);
  5144                        	.line	1058
  Thu Jul 29 2021 11:55                                                Page 101


  5145 00:0F34: F4 01 00     	pea	#<$1
  5146 00:0F37: 22 xx xx xx  	jsl	~~sleep
  5147                        ;
  5148                        ;	inportb(FDC_DRS) = 0x02;
  5149                        	.line	1060
  5150 00:0F3B: E2 20        	sep	#$20
  5151                        	longa	off
  5152 00:0F3D: A9 02        	lda	#$2
  5153 00:0F3F: 8F F4 13 AF  	sta	>11473908
  5154 00:0F43: C2 20        	rep	#$20
  5155                        	longa	on
  5156                        ;
  5157                        ;	sleep(32768);
  5158                        	.line	1062
  5159 00:0F45: F4 00 80     	pea	#<$8000
  5160 00:0F48: 22 xx xx xx  	jsl	~~sleep
  5161                        ;
  5162                        ;	for ( i = 0; i < 5; i++)
  5163                        	.line	1064
  5164 00:0F4C: 64 05        	stz	<L194+i_1
  5165                        L10059:
  5166                        ;	{
  5167                        	.line	1065
  5168                        ;		sendbyte(CMD_SENSEI);
  5169                        	.line	1066
  5170 00:0F4E: F4 08 00     	pea	#<$8
  5171 00:0F51: 22 xx xx xx  	jsl	~~sendbyte
  5172                        ;		reg_sr0 = getbyte();
  5173                        	.line	1067
  5174 00:0F55: 22 xx xx xx  	jsl	~~getbyte
  5175 00:0F59: E2 20        	sep	#$20
  5176                        	longa	off
  5177 00:0F5B: 8D xx xx     	sta	|~~reg_sr0
  5178 00:0F5E: C2 20        	rep	#$20
  5179                        	longa	on
  5180                        ;		k_debug_bits("fdc_reset:CMD_SENSEI:reg_s
                    r0:",reg_sr0);
  5181                        	.line	1068
  5182 00:0F60: AD xx xx     	lda	|~~reg_sr0
  5183 00:0F63: 48           	pha
  5184 00:0F64: F4 xx xx     	pea	#^L188
  5185 00:0F67: F4 xx xx     	pea	#<L188
  5186 00:0F6A: 22 xx xx xx  	jsl	~~k_debug_bits
  5187                        ;		drives[i].track = getbyte();
  5188                        	.line	1069
  5189 00:0F6E: A5 05        	lda	<L194+i_1
  5190 00:0F70: 0A           	asl	A
  5191 00:0F71: 65 05        	adc	<L194+i_1
  5192 00:0F73: 0A           	asl	A
  5193 00:0F74: 85 01        	sta	<R0
  5194 00:0F76: 22 xx xx xx  	jsl	~~getbyte
  5195 00:0F7A: A6 01        	ldx	<R0
  5196 00:0F7C: 9D xx xx     	sta	|~~drives,X
  5197                        ;		k_debug_bits("fdc_reset:CMD_SENSEI:track
                    :",drives[i].track);
  5198                        	.line	1070
  5199 00:0F7F: A5 05        	lda	<L194+i_1
  5200 00:0F81: 0A           	asl	A
  Thu Jul 29 2021 11:55                                                Page 102


  5201 00:0F82: 65 05        	adc	<L194+i_1
  5202 00:0F84: 0A           	asl	A
  5203 00:0F85: 85 01        	sta	<R0
  5204 00:0F87: A6 01        	ldx	<R0
  5205 00:0F89: BD xx xx     	lda	|~~drives,X
  5206 00:0F8C: 48           	pha
  5207 00:0F8D: F4 xx xx     	pea	#^L188+30
  5208 00:0F90: F4 xx xx     	pea	#<L188+30
  5209 00:0F93: 22 xx xx xx  	jsl	~~k_debug_bits
  5210                        ;		sleep(30);
  5211                        	.line	1071
  5212 00:0F97: F4 1E 00     	pea	#<$1e
  5213 00:0F9A: 22 xx xx xx  	jsl	~~sleep
  5214                        ;	}
  5215                        	.line	1072
  5216                        L10057:
  5217 00:0F9E: E6 05        	inc	<L194+i_1
  5218 00:0FA0: A5 05        	lda	<L194+i_1
  5219 00:0FA2: 30 07        	bmi	L196
  5220 00:0FA4: 3A           	dea
  5221 00:0FA5: 3A           	dea
  5222 00:0FA6: 3A           	dea
  5223 00:0FA7: 3A           	dea
  5224 00:0FA8: 3A           	dea
  5225 00:0FA9: 10 03        	bpl	L197
  5226                        L196:
  5227 00:0FAB: 82 A0 FF     	brl	L10059
  5228                        L197:
  5229                        L10058:
  5230                        ;
  5231                        ;
  5232                        ;	return TRUE;
  5233                        	.line	1075
  5234 00:0FAE: A9 01 00     	lda	#$1
  5235                        L198:
  5236 00:0FB1: A8           	tay
  5237 00:0FB2: 2B           	pld
  5238 00:0FB3: 3B           	tsc
  5239 00:0FB4: 18           	clc
  5240 00:0FB5: 69 08 00     	adc	#L193
  5241 00:0FB8: 1B           	tcs
  5242 00:0FB9: 98           	tya
  5243 00:0FBA: 6B           	rtl
  5244                        ;}
  5245                        	.line	1076
  5246                        	.endblock	1076
  5247             00000008   L193	equ	8
  5248             00000005   L194	equ	5
  5249                        	ends
  5250                        	efunc
  5251                        	.endfunc	1076,5,8
  5252                        	.line	1076
  5253                        	data
  5254                        L188:
  5255 00:05DC: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$3A,
                    $43,$4D,$44,$5F,$53
       00:05E0: 72 65 73 65 
       00:05E4: 74 3A 43 4D 
  Thu Jul 29 2021 11:55                                                Page 103


       00:05E8: 44 5F 53 
  5256 00:05EB: 45 4E 53 45  	db	$45,$4E,$53,$45,$49,$3A,$72,$65,$67,$5F,
                    $73,$72,$30,$3A,$00
       00:05EF: 49 3A 72 65 
       00:05F3: 67 5F 73 72 
       00:05F7: 30 3A 00 
  5257 00:05FA: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$3A,
                    $43,$4D,$44,$5F,$53
       00:05FE: 72 65 73 65 
       00:0602: 74 3A 43 4D 
       00:0606: 44 5F 53 
  5258 00:0609: 45 4E 53 45  	db	$45,$4E,$53,$45,$49,$3A,$74,$72,$61,$63,
                    $6B,$3A,$00
       00:060D: 49 3A 74 72 
       00:0611: 61 63 6B 3A 
       00:0615: 00 
  5259 00:0616:              	ends
  5260                        ;
  5261                        ;BOOL k_fd_isreadable(VOID)
  5262                        ;{
  5263                        	.line	1078
  5264                        	.line	1079
  5265                        	code
  5266                        	xdef	~~k_fd_isreadable
  5267                        	func
  5268                        	.function	1079
  5269                        ~~k_fd_isreadable:
  5270                        	longa	on
  5271                        	longi	on
  5272 00:0FBB: 3B           	tsc
  5273 00:0FBC: 38           	sec
  5274 00:0FBD: E9 07 00     	sbc	#L200
  5275 00:0FC0: 1B           	tcs
  5276 00:0FC1: 0B           	phd
  5277 00:0FC2: 5B           	tcd
  5278                        	.block	1079
  5279                        ;	int timeout = 0;
  5280                        ;	UCHAR sts = 0;
  5281                        ;
  5282                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5283             00000000   timeout_1	set	0
  5284             00000002   sts_1	set	2
  5285                        	.sym	timeout,0,5,1,16
  5286                        	.sym	sts,2,14,1,8
  5287 00:0FC3: 64 05        	stz	<L201+timeout_1
  5288 00:0FC5: E2 20        	sep	#$20
  5289                        	longa	off
  5290 00:0FC7: 64 07        	stz	<L201+sts_1
  5291 00:0FC9: C2 20        	rep	#$20
  5292                        	longa	on
  5293                        	.line	1083
  5294 00:0FCB: 64 05        	stz	<L201+timeout_1
  5295                        L10062:
  5296                        ;	{
  5297                        	.line	1084
  5298                        ;		sts = inportb(FDC_MSR);
  5299                        	.line	1085
  5300 00:0FCD: E2 20        	sep	#$20
  Thu Jul 29 2021 11:55                                                Page 104


  5301                        	longa	off
  5302 00:0FCF: AF F4 13 AF  	lda	>11473908
  5303 00:0FD3: 85 07        	sta	<L201+sts_1
  5304 00:0FD5: C2 20        	rep	#$20
  5305                        	longa	on
  5306                        ;		if ((sts & MSR_DIO) == MSR_DIO)
  5307                        	.line	1086
  5308                        ;			return TRUE;
  5309 00:0FD7: A5 07        	lda	<L201+sts_1
  5310 00:0FD9: 29 40 00     	and	#<$40
  5311 00:0FDC: 85 01        	sta	<R0
  5312 00:0FDE: A5 01        	lda	<R0
  5313 00:0FE0: C9 40 00     	cmp	#<$40
  5314 00:0FE3: F0 03        	beq	L203
  5315 00:0FE5: 82 0D 00     	brl	L10063
  5316                        L203:
  5317                        	.line	1087
  5318 00:0FE8: A9 01 00     	lda	#$1
  5319                        L204:
  5320 00:0FEB: A8           	tay
  5321 00:0FEC: 2B           	pld
  5322 00:0FED: 3B           	tsc
  5323 00:0FEE: 18           	clc
  5324 00:0FEF: 69 07 00     	adc	#L200
  5325 00:0FF2: 1B           	tcs
  5326 00:0FF3: 98           	tya
  5327 00:0FF4: 6B           	rtl
  5328                        ;	}
  5329                        L10063:
  5330                        	.line	1088
  5331                        L10060:
  5332 00:0FF5: E6 05        	inc	<L201+timeout_1
  5333 00:0FF7: 38           	sec
  5334 00:0FF8: A5 05        	lda	<L201+timeout_1
  5335 00:0FFA: E9 FF 00     	sbc	#<$ff
  5336 00:0FFD: 70 03        	bvs	L205
  5337 00:0FFF: 49 00 80     	eor	#$8000
  5338                        L205:
  5339 00:1002: 30 03        	bmi	L206
  5340 00:1004: 82 C6 FF     	brl	L10062
  5341                        L206:
  5342                        L10061:
  5343                        ;
  5344                        ;	return FALSE;
  5345                        	.line	1090
  5346 00:1007: A9 00 00     	lda	#$0
  5347 00:100A: 82 DE FF     	brl	L204
  5348                        ;}
  5349                        	.line	1091
  5350                        	.endblock	1091
  5351             00000007   L200	equ	7
  5352             00000005   L201	equ	5
  5353                        	ends
  5354                        	efunc
  5355                        	.endfunc	1091,5,7
  5356                        	.line	1091
  5357                        ;
  5358                        ;BOOL k_fd_isready(VOID)
  Thu Jul 29 2021 11:55                                                Page 105


  5359                        ;{
  5360                        	.line	1093
  5361                        	.line	1094
  5362                        	code
  5363                        	xdef	~~k_fd_isready
  5364                        	func
  5365                        	.function	1094
  5366                        ~~k_fd_isready:
  5367                        	longa	on
  5368                        	longi	on
  5369 00:100D: 3B           	tsc
  5370 00:100E: 38           	sec
  5371 00:100F: E9 07 00     	sbc	#L207
  5372 00:1012: 1B           	tcs
  5373 00:1013: 0B           	phd
  5374 00:1014: 5B           	tcd
  5375                        	.block	1094
  5376                        ;	int timeout = 0;
  5377                        ;	UCHAR sts = 0;
  5378                        ;
  5379                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5380             00000000   timeout_1	set	0
  5381             00000002   sts_1	set	2
  5382                        	.sym	timeout,0,5,1,16
  5383                        	.sym	sts,2,14,1,8
  5384 00:1015: 64 05        	stz	<L208+timeout_1
  5385 00:1017: E2 20        	sep	#$20
  5386                        	longa	off
  5387 00:1019: 64 07        	stz	<L208+sts_1
  5388 00:101B: C2 20        	rep	#$20
  5389                        	longa	on
  5390                        	.line	1098
  5391 00:101D: 64 05        	stz	<L208+timeout_1
  5392                        L10066:
  5393                        ;	{
  5394                        	.line	1099
  5395                        ;		sts = inportb(FDC_MSR);
  5396                        	.line	1100
  5397 00:101F: E2 20        	sep	#$20
  5398                        	longa	off
  5399 00:1021: AF F4 13 AF  	lda	>11473908
  5400 00:1025: 85 07        	sta	<L208+sts_1
  5401 00:1027: C2 20        	rep	#$20
  5402                        	longa	on
  5403                        ;		if ((sts & MSR_RQM) == MSR_RQM)
  5404                        	.line	1101
  5405                        ;			return TRUE;
  5406 00:1029: A5 07        	lda	<L208+sts_1
  5407 00:102B: 29 80 00     	and	#<$80
  5408 00:102E: 85 01        	sta	<R0
  5409 00:1030: A5 01        	lda	<R0
  5410 00:1032: C9 80 00     	cmp	#<$80
  5411 00:1035: F0 03        	beq	L210
  5412 00:1037: 82 0D 00     	brl	L10067
  5413                        L210:
  5414                        	.line	1102
  5415 00:103A: A9 01 00     	lda	#$1
  5416                        L211:
  Thu Jul 29 2021 11:55                                                Page 106


  5417 00:103D: A8           	tay
  5418 00:103E: 2B           	pld
  5419 00:103F: 3B           	tsc
  5420 00:1040: 18           	clc
  5421 00:1041: 69 07 00     	adc	#L207
  5422 00:1044: 1B           	tcs
  5423 00:1045: 98           	tya
  5424 00:1046: 6B           	rtl
  5425                        ;	}
  5426                        L10067:
  5427                        	.line	1103
  5428                        L10064:
  5429 00:1047: E6 05        	inc	<L208+timeout_1
  5430 00:1049: 38           	sec
  5431 00:104A: A5 05        	lda	<L208+timeout_1
  5432 00:104C: E9 FF 00     	sbc	#<$ff
  5433 00:104F: 70 03        	bvs	L212
  5434 00:1051: 49 00 80     	eor	#$8000
  5435                        L212:
  5436 00:1054: 30 03        	bmi	L213
  5437 00:1056: 82 C6 FF     	brl	L10066
  5438                        L213:
  5439                        L10065:
  5440                        ;
  5441                        ;	return FALSE;
  5442                        	.line	1105
  5443 00:1059: A9 00 00     	lda	#$0
  5444 00:105C: 82 DE FF     	brl	L211
  5445                        ;}
  5446                        	.line	1106
  5447                        	.endblock	1106
  5448             00000007   L207	equ	7
  5449             00000005   L208	equ	5
  5450                        	ends
  5451                        	efunc
  5452                        	.endfunc	1106,5,7
  5453                        	.line	1106
  5454                        ;
  5455                        ;BOOL k_fd_isbusy(VOID)
  5456                        ;{
  5457                        	.line	1108
  5458                        	.line	1109
  5459                        	code
  5460                        	xdef	~~k_fd_isbusy
  5461                        	func
  5462                        	.function	1109
  5463                        ~~k_fd_isbusy:
  5464                        	longa	on
  5465                        	longi	on
  5466 00:105F: 3B           	tsc
  5467 00:1060: 38           	sec
  5468 00:1061: E9 03 00     	sbc	#L214
  5469 00:1064: 1B           	tcs
  5470 00:1065: 0B           	phd
  5471 00:1066: 5B           	tcd
  5472                        	.block	1109
  5473                        ;	int timeout = 0;
  5474                        ;	UCHAR sts = 0;
  Thu Jul 29 2021 11:55                                                Page 107


  5475                        ;
  5476                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5477             00000000   timeout_1	set	0
  5478             00000002   sts_1	set	2
  5479                        	.sym	timeout,0,5,1,16
  5480                        	.sym	sts,2,14,1,8
  5481 00:1067: 64 01        	stz	<L215+timeout_1
  5482 00:1069: E2 20        	sep	#$20
  5483                        	longa	off
  5484 00:106B: 64 03        	stz	<L215+sts_1
  5485 00:106D: C2 20        	rep	#$20
  5486                        	longa	on
  5487                        	.line	1113
  5488 00:106F: 64 01        	stz	<L215+timeout_1
  5489                        L10070:
  5490                        ;	{
  5491                        	.line	1114
  5492                        ;		sts = inportb(FDC_MSR);
  5493                        	.line	1115
  5494 00:1071: E2 20        	sep	#$20
  5495                        	longa	off
  5496 00:1073: AF F4 13 AF  	lda	>11473908
  5497 00:1077: 85 03        	sta	<L215+sts_1
  5498 00:1079: C2 20        	rep	#$20
  5499                        	longa	on
  5500                        ;		if ((sts & MSR_CB) == 0)
  5501                        	.line	1116
  5502                        ;			return TRUE;
  5503 00:107B: E2 20        	sep	#$20
  5504                        	longa	off
  5505 00:107D: A5 03        	lda	<L215+sts_1
  5506 00:107F: 29 10        	and	#<$10
  5507 00:1081: C2 20        	rep	#$20
  5508                        	longa	on
  5509 00:1083: F0 03        	beq	L217
  5510 00:1085: 82 0D 00     	brl	L10071
  5511                        L217:
  5512                        	.line	1117
  5513 00:1088: A9 01 00     	lda	#$1
  5514                        L218:
  5515 00:108B: A8           	tay
  5516 00:108C: 2B           	pld
  5517 00:108D: 3B           	tsc
  5518 00:108E: 18           	clc
  5519 00:108F: 69 03 00     	adc	#L214
  5520 00:1092: 1B           	tcs
  5521 00:1093: 98           	tya
  5522 00:1094: 6B           	rtl
  5523                        ;	}
  5524                        L10071:
  5525                        	.line	1118
  5526                        L10068:
  5527 00:1095: E6 01        	inc	<L215+timeout_1
  5528 00:1097: 38           	sec
  5529 00:1098: A5 01        	lda	<L215+timeout_1
  5530 00:109A: E9 FF 00     	sbc	#<$ff
  5531 00:109D: 70 03        	bvs	L219
  5532 00:109F: 49 00 80     	eor	#$8000
  Thu Jul 29 2021 11:55                                                Page 108


  5533                        L219:
  5534 00:10A2: 30 03        	bmi	L220
  5535 00:10A4: 82 CA FF     	brl	L10070
  5536                        L220:
  5537                        L10069:
  5538                        ;	return FALSE;
  5539                        	.line	1119
  5540 00:10A7: A9 00 00     	lda	#$0
  5541 00:10AA: 82 DE FF     	brl	L218
  5542                        ;}
  5543                        	.line	1120
  5544                        	.endblock	1120
  5545             00000003   L214	equ	3
  5546             00000001   L215	equ	1
  5547                        	ends
  5548                        	efunc
  5549                        	.endfunc	1120,1,3
  5550                        	.line	1120
  5551                        ;
  5552                        ;BOOL k_fd_isbusy_drive(UCHAR drive)
  5553                        ;{
  5554                        	.line	1122
  5555                        	.line	1123
  5556                        	code
  5557                        	xdef	~~k_fd_isbusy_drive
  5558                        	func
  5559                        	.function	1123
  5560                        ~~k_fd_isbusy_drive:
  5561                        	longa	on
  5562                        	longi	on
  5563 00:10AD: 3B           	tsc
  5564 00:10AE: 38           	sec
  5565 00:10AF: E9 03 00     	sbc	#L221
  5566 00:10B2: 1B           	tcs
  5567 00:10B3: 0B           	phd
  5568 00:10B4: 5B           	tcd
  5569             00000004   drive_0	set	4
  5570                        	.block	1123
  5571                        ;	int timeout = 0;
  5572                        ;	UCHAR sts = 0;
  5573                        ;
  5574                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5575             00000000   timeout_1	set	0
  5576             00000002   sts_1	set	2
  5577                        	.sym	timeout,0,5,1,16
  5578                        	.sym	sts,2,14,1,8
  5579                        	.sym	drive,4,14,6,8
  5580 00:10B5: 64 01        	stz	<L222+timeout_1
  5581 00:10B7: E2 20        	sep	#$20
  5582                        	longa	off
  5583 00:10B9: 64 03        	stz	<L222+sts_1
  5584 00:10BB: C2 20        	rep	#$20
  5585                        	longa	on
  5586                        	.line	1127
  5587 00:10BD: 64 01        	stz	<L222+timeout_1
  5588                        L10074:
  5589                        ;	{
  5590                        	.line	1128
  Thu Jul 29 2021 11:55                                                Page 109


  5591                        ;		sts = inportb(FDC_MSR);
  5592                        	.line	1129
  5593 00:10BF: E2 20        	sep	#$20
  5594                        	longa	off
  5595 00:10C1: AF F4 13 AF  	lda	>11473908
  5596 00:10C5: 85 03        	sta	<L222+sts_1
  5597 00:10C7: C2 20        	rep	#$20
  5598                        	longa	on
  5599                        ;		if ((sts & drive) == 0)
  5600                        	.line	1130
  5601                        ;			return TRUE;
  5602 00:10C9: E2 20        	sep	#$20
  5603                        	longa	off
  5604 00:10CB: A5 07        	lda	<L221+drive_0
  5605 00:10CD: 25 03        	and	<L222+sts_1
  5606 00:10CF: C2 20        	rep	#$20
  5607                        	longa	on
  5608 00:10D1: F0 03        	beq	L224
  5609 00:10D3: 82 15 00     	brl	L10075
  5610                        L224:
  5611                        	.line	1131
  5612 00:10D6: A9 01 00     	lda	#$1
  5613                        L225:
  5614 00:10D9: A8           	tay
  5615 00:10DA: A5 05        	lda	<L221+2
  5616 00:10DC: 85 07        	sta	<L221+2+2
  5617 00:10DE: A5 04        	lda	<L221+1
  5618 00:10E0: 85 06        	sta	<L221+1+2
  5619 00:10E2: 2B           	pld
  5620 00:10E3: 3B           	tsc
  5621 00:10E4: 18           	clc
  5622 00:10E5: 69 05 00     	adc	#L221+2
  5623 00:10E8: 1B           	tcs
  5624 00:10E9: 98           	tya
  5625 00:10EA: 6B           	rtl
  5626                        ;	}
  5627                        L10075:
  5628                        	.line	1132
  5629                        L10072:
  5630 00:10EB: E6 01        	inc	<L222+timeout_1
  5631 00:10ED: 38           	sec
  5632 00:10EE: A5 01        	lda	<L222+timeout_1
  5633 00:10F0: E9 FF 00     	sbc	#<$ff
  5634 00:10F3: 70 03        	bvs	L226
  5635 00:10F5: 49 00 80     	eor	#$8000
  5636                        L226:
  5637 00:10F8: 30 03        	bmi	L227
  5638 00:10FA: 82 C2 FF     	brl	L10074
  5639                        L227:
  5640                        L10073:
  5641                        ;	return FALSE;
  5642                        	.line	1133
  5643 00:10FD: A9 00 00     	lda	#$0
  5644 00:1100: 82 D6 FF     	brl	L225
  5645                        ;}
  5646                        	.line	1134
  5647                        	.endblock	1134
  5648             00000003   L221	equ	3
  Thu Jul 29 2021 11:55                                                Page 110


  5649             00000001   L222	equ	1
  5650                        	ends
  5651                        	efunc
  5652                        	.endfunc	1134,1,3
  5653                        	.line	1134
  5654                        ;
  5655                        ;UINT k_fd_read_sector(UCHAR *buf, ULONG lba)
  5656                        ;{
  5657                        	.line	1136
  5658                        	.line	1137
  5659                        	code
  5660                        	xdef	~~k_fd_read_sector
  5661                        	func
  5662                        	.function	1137
  5663                        ~~k_fd_read_sector:
  5664                        	longa	on
  5665                        	longi	on
  5666 00:1103: 3B           	tsc
  5667 00:1104: 38           	sec
  5668 00:1105: E9 00 00     	sbc	#L228
  5669 00:1108: 1B           	tcs
  5670 00:1109: 0B           	phd
  5671 00:110A: 5B           	tcd
  5672             00000004   buf_0	set	4
  5673             00000008   lba_0	set	8
  5674                        	.block	1137
  5675                        ;	return k_fd_read_lba(buf, lba, 1, FALSE);
  5676                        	.sym	buf,4,142,6,32
  5677                        	.sym	lba,8,18,6,32
  5678                        	.line	1138
  5679 00:110B: F4 00 00     	pea	#<$0
  5680 00:110E: F4 01 00     	pea	#<$1
  5681 00:1111: D4 0A        	pei	<L228+lba_0+2
  5682 00:1113: D4 08        	pei	<L228+lba_0
  5683 00:1115: D4 06        	pei	<L228+buf_0+2
  5684 00:1117: D4 04        	pei	<L228+buf_0
  5685 00:1119: 22 xx xx xx  	jsl	~~k_fd_read_lba
  5686                        L231:
  5687 00:111D: A8           	tay
  5688 00:111E: A5 02        	lda	<L228+2
  5689 00:1120: 85 0A        	sta	<L228+2+8
  5690 00:1122: A5 01        	lda	<L228+1
  5691 00:1124: 85 09        	sta	<L228+1+8
  5692 00:1126: 2B           	pld
  5693 00:1127: 3B           	tsc
  5694 00:1128: 18           	clc
  5695 00:1129: 69 08 00     	adc	#L228+8
  5696 00:112C: 1B           	tcs
  5697 00:112D: 98           	tya
  5698 00:112E: 6B           	rtl
  5699                        ;}
  5700                        	.line	1139
  5701                        	.endblock	1139
  5702             00000000   L228	equ	0
  5703             00000001   L229	equ	1
  5704                        	ends
  5705                        	efunc
  5706                        	.endfunc	1139,1,0
  Thu Jul 29 2021 11:55                                                Page 111


  5707                        	.line	1139
  5708                        ;
  5709                        ;static int k_fd_read_lba(UCHAR *buf, ULONG lba, U
                    INT num,int do_write)
  5710                        ;{
  5711                        	.line	1141
  5712                        	.line	1142
  5713                        	code
  5714                        	func
  5715                        	.function	1142
  5716                        ~~k_fd_read_lba:
  5717                        	longa	on
  5718                        	longi	on
  5719 00:112F: 3B           	tsc
  5720 00:1130: 38           	sec
  5721 00:1131: E9 0A 00     	sbc	#L232
  5722 00:1134: 1B           	tcs
  5723 00:1135: 0B           	phd
  5724 00:1136: 5B           	tcd
  5725             00000004   buf_0	set	4
  5726             00000008   lba_0	set	8
  5727             0000000C   num_0	set	12
  5728             0000000E   do_write_0	set	14
  5729                        	.block	1142
  5730                        ;	int i;
  5731                        ;	int res = 0;
  5732                        ;	UINT c, h, s;
  5733                        ;
  5734                        ;	motor_on();
  5735             00000000   i_1	set	0
  5736             00000002   res_1	set	2
  5737             00000004   c_1	set	4
  5738             00000006   h_1	set	6
  5739             00000008   s_1	set	8
  5740                        	.sym	i,0,5,1,16
  5741                        	.sym	res,2,5,1,16
  5742                        	.sym	c,4,16,1,16
  5743                        	.sym	h,6,16,1,16
  5744                        	.sym	s,8,16,1,16
  5745                        	.sym	buf,4,142,6,32
  5746                        	.sym	lba,8,18,6,32
  5747                        	.sym	num,12,16,6,16
  5748                        	.sym	do_write,14,5,6,16
  5749 00:1137: 64 03        	stz	<L233+res_1
  5750                        	.line	1147
  5751 00:1139: 22 xx xx xx  	jsl	~~motor_on
  5752                        ;
  5753                        ;	for (i = 0; i < num; i++)
  5754                        	.line	1149
  5755 00:113D: 64 01        	stz	<L233+i_1
  5756 00:113F: 82 57 00     	brl	L10079
  5757                        L10078:
  5758                        ;	{
  5759                        	.line	1150
  5760                        ;		k_debug_long("k_fd_read_lba:lba:", lba);
  5761                        	.line	1151
  5762 00:1142: D4 14        	pei	<L232+lba_0+2
  5763 00:1144: D4 12        	pei	<L232+lba_0
  Thu Jul 29 2021 11:55                                                Page 112


  5764 00:1146: F4 xx xx     	pea	#^L199
  5765 00:1149: F4 xx xx     	pea	#<L199
  5766 00:114C: 22 xx xx xx  	jsl	~~k_debug_long
  5767                        ;		lba_2_chs(lba, &c, &h, &s);
  5768                        	.line	1152
  5769 00:1150: F4 00 00     	pea	#0
  5770 00:1153: 18           	clc
  5771 00:1154: 7B           	tdc
  5772 00:1155: 69 09 00     	adc	#<L233+s_1
  5773 00:1158: 48           	pha
  5774 00:1159: F4 00 00     	pea	#0
  5775 00:115C: 18           	clc
  5776 00:115D: 7B           	tdc
  5777 00:115E: 69 07 00     	adc	#<L233+h_1
  5778 00:1161: 48           	pha
  5779 00:1162: F4 00 00     	pea	#0
  5780 00:1165: 18           	clc
  5781 00:1166: 7B           	tdc
  5782 00:1167: 69 05 00     	adc	#<L233+c_1
  5783 00:116A: 48           	pha
  5784 00:116B: D4 14        	pei	<L232+lba_0+2
  5785 00:116D: D4 12        	pei	<L232+lba_0
  5786 00:116F: 22 xx xx xx  	jsl	~~lba_2_chs
  5787                        ;
  5788                        ;		res = k_fd_rw_command(buf, do_write, c, 
                    h, s);
  5789                        	.line	1154
  5790 00:1173: D4 09        	pei	<L233+s_1
  5791 00:1175: D4 07        	pei	<L233+h_1
  5792 00:1177: D4 05        	pei	<L233+c_1
  5793 00:1179: D4 18        	pei	<L232+do_write_0
  5794 00:117B: D4 10        	pei	<L232+buf_0+2
  5795 00:117D: D4 0E        	pei	<L232+buf_0
  5796 00:117F: 22 xx xx xx  	jsl	~~k_fd_rw_command
  5797 00:1183: 85 03        	sta	<L233+res_1
  5798                        ;		k_debug_integer("k_fd_read_lba:res:", re
                    s);
  5799                        	.line	1155
  5800 00:1185: D4 03        	pei	<L233+res_1
  5801 00:1187: F4 xx xx     	pea	#^L199+19
  5802 00:118A: F4 xx xx     	pea	#<L199+19
  5803 00:118D: 22 xx xx xx  	jsl	~~k_debug_integer
  5804                        ;		lba++;
  5805                        	.line	1156
  5806 00:1191: E6 12        	inc	<L232+lba_0
  5807 00:1193: D0 02        	bne	L235
  5808 00:1195: E6 14        	inc	<L232+lba_0+2
  5809                        L235:
  5810                        ;	}
  5811                        	.line	1157
  5812                        L10076:
  5813 00:1197: E6 01        	inc	<L233+i_1
  5814                        L10079:
  5815 00:1199: A5 01        	lda	<L233+i_1
  5816 00:119B: C5 16        	cmp	<L232+num_0
  5817 00:119D: B0 03        	bcs	L236
  5818 00:119F: 82 A0 FF     	brl	L10078
  5819                        L236:
  Thu Jul 29 2021 11:55                                                Page 113


  5820                        L10077:
  5821                        ;
  5822                        ;	motor_off();
  5823                        	.line	1159
  5824 00:11A2: 22 xx xx xx  	jsl	~~motor_off
  5825                        ;
  5826                        ;	return res;
  5827                        	.line	1161
  5828 00:11A6: A5 03        	lda	<L233+res_1
  5829                        L237:
  5830 00:11A8: A8           	tay
  5831 00:11A9: A5 0C        	lda	<L232+2
  5832 00:11AB: 85 18        	sta	<L232+2+12
  5833 00:11AD: A5 0B        	lda	<L232+1
  5834 00:11AF: 85 17        	sta	<L232+1+12
  5835 00:11B1: 2B           	pld
  5836 00:11B2: 3B           	tsc
  5837 00:11B3: 18           	clc
  5838 00:11B4: 69 16 00     	adc	#L232+12
  5839 00:11B7: 1B           	tcs
  5840 00:11B8: 98           	tya
  5841 00:11B9: 6B           	rtl
  5842                        ;}
  5843                        	.line	1162
  5844                        	.endblock	1162
  5845             0000000A   L232	equ	10
  5846             00000001   L233	equ	1
  5847                        	ends
  5848                        	efunc
  5849                        	.endfunc	1162,1,10
  5850                        	.line	1162
  5851                        	data
  5852                        L199:
  5853 00:0616: 6B 5F 66 64  	db	$6B,$5F,$66,$64,$5F,$72,$65,$61,$64,$5F,
                    $6C,$62,$61,$3A,$6C
       00:061A: 5F 72 65 61 
       00:061E: 64 5F 6C 62 
       00:0622: 61 3A 6C 
  5854 00:0625: 62 61 3A 00  	db	$62,$61,$3A,$00,$6B,$5F,$66,$64,$5F,$72,
                    $65,$61,$64,$5F,$6C
       00:0629: 6B 5F 66 64 
       00:062D: 5F 72 65 61 
       00:0631: 64 5F 6C 
  5855 00:0634: 62 61 3A 72  	db	$62,$61,$3A,$72,$65,$73,$3A,$00
       00:0638: 65 73 3A 00 
  5856 00:063C:              	ends
  5857                        ;
  5858                        ;static int k_fd_rw_command(UCHAR* buf, int do_wri
                    te, UINT c,UINT h, UINT s)
  5859                        ;{
  5860                        	.line	1164
  5861                        	.line	1165
  5862                        	code
  5863                        	func
  5864                        	.function	1165
  5865                        ~~k_fd_rw_command:
  5866                        	longa	on
  5867                        	longi	on
  Thu Jul 29 2021 11:55                                                Page 114


  5868 00:11BA: 3B           	tsc
  5869 00:11BB: 38           	sec
  5870 00:11BC: E9 0D 00     	sbc	#L239
  5871 00:11BF: 1B           	tcs
  5872 00:11C0: 0B           	phd
  5873 00:11C1: 5B           	tcd
  5874             00000004   buf_0	set	4
  5875             00000008   do_write_0	set	8
  5876             0000000A   c_0	set	10
  5877             0000000C   h_0	set	12
  5878             0000000E   s_0	set	14
  5879                        	.block	1165
  5880                        ;	int i = 0;
  5881                        ;	UCHAR msr = 0;
  5882                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  5883                        ;	//UCHAR cmd = do_write ? CMD_WRITE : 0xE6;
  5884                        ;	BOOL retCode = FALSE;
  5885                        ;
  5886                        ;	k_debug_integer("k_fd_rw_command:",cur_drive);
  5887             00000000   i_1	set	0
  5888             00000002   msr_1	set	2
  5889             00000003   cmd_1	set	3
  5890             00000004   retCode_1	set	4
  5891                        	.sym	i,0,5,1,16
  5892                        	.sym	msr,2,14,1,8
  5893                        	.sym	cmd,3,14,1,8
  5894                        	.sym	retCode,4,14,1,8
  5895                        	.sym	buf,4,142,6,32
  5896                        	.sym	do_write,8,5,6,16
  5897                        	.sym	c,10,16,6,16
  5898                        	.sym	h,12,16,6,16
  5899                        	.sym	s,14,16,6,16
  5900 00:11C2: 64 09        	stz	<L240+i_1
  5901 00:11C4: E2 20        	sep	#$20
  5902                        	longa	off
  5903 00:11C6: 64 0B        	stz	<L240+msr_1
  5904 00:11C8: C2 20        	rep	#$20
  5905                        	longa	on
  5906 00:11CA: A5 15        	lda	<L239+do_write_0
  5907 00:11CC: D0 03        	bne	L243
  5908 00:11CE: 82 05 00     	brl	L242
  5909                        L243:
  5910 00:11D1: A9 45 00     	lda	#$45
  5911 00:11D4: 80 03        	bra	L244
  5912                        L242:
  5913 00:11D6: A9 46 00     	lda	#$46
  5914                        L244:
  5915 00:11D9: 85 01        	sta	<R0
  5916 00:11DB: E2 20        	sep	#$20
  5917                        	longa	off
  5918 00:11DD: A5 01        	lda	<R0
  5919 00:11DF: 85 0C        	sta	<L240+cmd_1
  5920 00:11E1: C2 20        	rep	#$20
  5921                        	longa	on
  5922 00:11E3: E2 20        	sep	#$20
  5923                        	longa	off
  5924 00:11E5: 64 0D        	stz	<L240+retCode_1
  5925 00:11E7: C2 20        	rep	#$20
  Thu Jul 29 2021 11:55                                                Page 115


  5926                        	longa	on
  5927                        	.line	1172
  5928 00:11E9: AD xx xx     	lda	|~~cur_drive
  5929 00:11EC: 29 FF 00     	and	#$ff
  5930 00:11EF: 48           	pha
  5931 00:11F0: F4 xx xx     	pea	#^L238
  5932 00:11F3: F4 xx xx     	pea	#<L238
  5933 00:11F6: 22 xx xx xx  	jsl	~~k_debug_integer
  5934                        ;	k_debug_integer("k_fd_rw_command:track:",c);
  5935                        	.line	1173
  5936 00:11FA: D4 17        	pei	<L239+c_0
  5937 00:11FC: F4 xx xx     	pea	#^L238+17
  5938 00:11FF: F4 xx xx     	pea	#<L238+17
  5939 00:1202: 22 xx xx xx  	jsl	~~k_debug_integer
  5940                        ;	k_debug_integer("k_fd_rw_command:head:",h);
  5941                        	.line	1174
  5942 00:1206: D4 19        	pei	<L239+h_0
  5943 00:1208: F4 xx xx     	pea	#^L238+40
  5944 00:120B: F4 xx xx     	pea	#<L238+40
  5945 00:120E: 22 xx xx xx  	jsl	~~k_debug_integer
  5946                        ;	k_debug_integer("k_fd_rw_command:sector:",s);
  5947                        	.line	1175
  5948 00:1212: D4 1B        	pei	<L239+s_0
  5949 00:1214: F4 xx xx     	pea	#^L238+62
  5950 00:1217: F4 xx xx     	pea	#<L238+62
  5951 00:121A: 22 xx xx xx  	jsl	~~k_debug_integer
  5952                        ;
  5953                        ;
  5954                        ;	//floppy_seek(c);
  5955                        ;
  5956                        ;	//sleep(32768);
  5957                        ;	//sleep(DRIVE_H1440_SPINUP);
  5958                        ;
  5959                        ;	sendbyte(CMD_SENSEI);
  5960                        	.line	1183
  5961 00:121E: F4 08 00     	pea	#<$8
  5962 00:1221: 22 xx xx xx  	jsl	~~sendbyte
  5963                        ;	reg_sr0 = getbyte();
  5964                        	.line	1184
  5965 00:1225: 22 xx xx xx  	jsl	~~getbyte
  5966 00:1229: E2 20        	sep	#$20
  5967                        	longa	off
  5968 00:122B: 8D xx xx     	sta	|~~reg_sr0
  5969 00:122E: C2 20        	rep	#$20
  5970                        	longa	on
  5971                        ;	k_debug_hex("k_fd_rw_command:CMD_SENSEI:reg_sr0:
                    ",reg_sr0);
  5972                        	.line	1185
  5973 00:1230: AD xx xx     	lda	|~~reg_sr0
  5974 00:1233: 48           	pha
  5975 00:1234: F4 xx xx     	pea	#^L238+86
  5976 00:1237: F4 xx xx     	pea	#<L238+86
  5977 00:123A: 22 xx xx xx  	jsl	~~k_debug_hex
  5978                        ;	drives[cur_drive].track = getbyte();
  5979                        	.line	1186
  5980 00:123E: AD xx xx     	lda	|~~cur_drive
  5981 00:1241: 29 FF 00     	and	#$ff
  5982 00:1244: 85 01        	sta	<R0
  Thu Jul 29 2021 11:55                                                Page 116


  5983 00:1246: A5 01        	lda	<R0
  5984 00:1248: 0A           	asl	A
  5985 00:1249: 65 01        	adc	<R0
  5986 00:124B: 0A           	asl	A
  5987 00:124C: 85 01        	sta	<R0
  5988 00:124E: 22 xx xx xx  	jsl	~~getbyte
  5989 00:1252: A6 01        	ldx	<R0
  5990 00:1254: 9D xx xx     	sta	|~~drives,X
  5991                        ;	k_debug_hex("k_fd_rw_command:CMD_SENSEI:track:",
                    drives[cur_drive].track);
  5992                        	.line	1187
  5993 00:1257: AD xx xx     	lda	|~~cur_drive
  5994 00:125A: 29 FF 00     	and	#$ff
  5995 00:125D: 85 01        	sta	<R0
  5996 00:125F: A5 01        	lda	<R0
  5997 00:1261: 0A           	asl	A
  5998 00:1262: 65 01        	adc	<R0
  5999 00:1264: 0A           	asl	A
  6000 00:1265: 85 01        	sta	<R0
  6001 00:1267: A6 01        	ldx	<R0
  6002 00:1269: BD xx xx     	lda	|~~drives,X
  6003 00:126C: 48           	pha
  6004 00:126D: F4 xx xx     	pea	#^L238+122
  6005 00:1270: F4 xx xx     	pea	#<L238+122
  6006 00:1273: 22 xx xx xx  	jsl	~~k_debug_hex
  6007                        ;
  6008                        ;	sleep(32768);
  6009                        	.line	1189
  6010 00:1277: F4 00 80     	pea	#<$8000
  6011 00:127A: 22 xx xx xx  	jsl	~~sleep
  6012                        ;
  6013                        ;	k_debug_string("k_fd_rw_command:READING NOW!\r\n
                    ");
  6014                        	.line	1191
  6015 00:127E: F4 xx xx     	pea	#^L238+156
  6016 00:1281: F4 xx xx     	pea	#<L238+156
  6017 00:1284: 22 xx xx xx  	jsl	~~k_debug_string
  6018                        ;
  6019                        ;	sendbyte(cmd);
  6020                        	.line	1193
  6021 00:1288: D4 0C        	pei	<L240+cmd_1
  6022 00:128A: 22 xx xx xx  	jsl	~~sendbyte
  6023                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  6024                        	.line	1194
  6025 00:128E: A5 19        	lda	<L239+h_0
  6026 00:1290: 0A           	asl	A
  6027 00:1291: 0A           	asl	A
  6028 00:1292: 85 01        	sta	<R0
  6029 00:1294: AD xx xx     	lda	|~~cur_drive
  6030 00:1297: 29 FF 00     	and	#$ff
  6031 00:129A: 85 05        	sta	<R1
  6032 00:129C: A5 05        	lda	<R1
  6033 00:129E: 05 01        	ora	<R0
  6034 00:12A0: 48           	pha
  6035 00:12A1: 22 xx xx xx  	jsl	~~sendbyte
  6036                        ;	//sendbyte((UCHAR) 0x00);
  6037                        ;	sendbyte((UCHAR) c);
  6038                        	.line	1196
  Thu Jul 29 2021 11:55                                                Page 117


  6039 00:12A5: D4 17        	pei	<L239+c_0
  6040 00:12A7: 22 xx xx xx  	jsl	~~sendbyte
  6041                        ;	sendbyte((UCHAR) h);
  6042                        	.line	1197
  6043 00:12AB: D4 19        	pei	<L239+h_0
  6044 00:12AD: 22 xx xx xx  	jsl	~~sendbyte
  6045                        ;	sendbyte((UCHAR) s);
  6046                        	.line	1198
  6047 00:12B1: D4 1B        	pei	<L239+s_0
  6048 00:12B3: 22 xx xx xx  	jsl	~~sendbyte
  6049                        ;	sendbyte(0x2);
  6050                        	.line	1199
  6051 00:12B7: F4 02 00     	pea	#<$2
  6052 00:12BA: 22 xx xx xx  	jsl	~~sendbyte
  6053                        ;	sendbyte((UCHAR) SEC_PER_TRACK);
  6054                        	.line	1200
  6055 00:12BE: F4 12 00     	pea	#<$12
  6056 00:12C1: 22 xx xx xx  	jsl	~~sendbyte
  6057                        ;	sendbyte(0x1b);
  6058                        	.line	1201
  6059 00:12C5: F4 1B 00     	pea	#<$1b
  6060 00:12C8: 22 xx xx xx  	jsl	~~sendbyte
  6061                        ;	sendbyte(0xff);
  6062                        	.line	1202
  6063 00:12CC: F4 FF 00     	pea	#<$ff
  6064 00:12CF: 22 xx xx xx  	jsl	~~sendbyte
  6065                        ;
  6066                        ;	sleep(DRIVE_H1440_SPINUP);
  6067                        	.line	1204
  6068 00:12D3: F4 90 01     	pea	#<$190
  6069 00:12D6: 22 xx xx xx  	jsl	~~sleep
  6070                        ;	sleep(DRIVE_H1440_SPINUP);
  6071                        	.line	1205
  6072 00:12DA: F4 90 01     	pea	#<$190
  6073 00:12DD: 22 xx xx xx  	jsl	~~sleep
  6074                        ;
  6075                        ;	k_fd_isreadable();
  6076                        	.line	1207
  6077 00:12E1: 22 xx xx xx  	jsl	~~k_fd_isreadable
  6078                        ;
  6079                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  6080                        	.line	1209
  6081 00:12E5: 64 09        	stz	<L240+i_1
  6082                        L10082:
  6083                        ;	{
  6084                        	.line	1210
  6085                        ;		msr = inportb(FDC_MSR);
  6086                        	.line	1211
  6087 00:12E7: E2 20        	sep	#$20
  6088                        	longa	off
  6089 00:12E9: AF F4 13 AF  	lda	>11473908
  6090 00:12ED: 85 0B        	sta	<L240+msr_1
  6091 00:12EF: C2 20        	rep	#$20
  6092                        	longa	on
  6093                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  6094                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  6095                        	.line	1213
  Thu Jul 29 2021 11:55                                                Page 118


  6096                        ;			break;
  6097 00:12F1: E2 20        	sep	#$20
  6098                        	longa	off
  6099 00:12F3: A5 0B        	lda	<L240+msr_1
  6100 00:12F5: 29 C0        	and	#<$c0
  6101 00:12F7: C2 20        	rep	#$20
  6102                        	longa	on
  6103 00:12F9: F0 03        	beq	L245
  6104 00:12FB: 82 1E 00     	brl	L10081
  6105                        L245:
  6106                        ;		//k_debug_integer("floppy_transfer_try:f
                    loppybufferIndex:",floppybufferIndex);
  6107                        ;		buf[i] = getbyte();
  6108                        	.line	1216
  6109 00:12FE: 22 xx xx xx  	jsl	~~getbyte
  6110 00:1302: E2 20        	sep	#$20
  6111                        	longa	off
  6112 00:1304: A4 09        	ldy	<L240+i_1
  6113 00:1306: 97 11        	sta	[<L239+buf_0],Y
  6114 00:1308: C2 20        	rep	#$20
  6115                        	longa	on
  6116                        ;
  6117                        ;	}
  6118                        	.line	1218
  6119                        L10080:
  6120 00:130A: E6 09        	inc	<L240+i_1
  6121 00:130C: 38           	sec
  6122 00:130D: A5 09        	lda	<L240+i_1
  6123 00:130F: E9 00 02     	sbc	#<$200
  6124 00:1312: 70 03        	bvs	L246
  6125 00:1314: 49 00 80     	eor	#$8000
  6126                        L246:
  6127 00:1317: 30 03        	bmi	L247
  6128 00:1319: 82 CB FF     	brl	L10082
  6129                        L247:
  6130                        L10081:
  6131                        ;
  6132                        ;	k_debug_byte_array("DATA:\r\n",buf,512);
  6133                        	.line	1220
  6134 00:131C: F4 00 00     	pea	#^$200
  6135 00:131F: F4 00 02     	pea	#<$200
  6136 00:1322: D4 13        	pei	<L239+buf_0+2
  6137 00:1324: D4 11        	pei	<L239+buf_0
  6138 00:1326: F4 xx xx     	pea	#^L238+187
  6139 00:1329: F4 xx xx     	pea	#<L238+187
  6140 00:132C: 22 xx xx xx  	jsl	~~k_debug_byte_array
  6141                        ;
  6142                        ;
  6143                        ;	reg_sr0 = getbyte();
  6144                        	.line	1223
  6145 00:1330: 22 xx xx xx  	jsl	~~getbyte
  6146 00:1334: E2 20        	sep	#$20
  6147                        	longa	off
  6148 00:1336: 8D xx xx     	sta	|~~reg_sr0
  6149 00:1339: C2 20        	rep	#$20
  6150                        	longa	on
  6151                        ;	k_debug_bits("floppy_transfer_try1:reg_sr0:msr:"
                    ,reg_sr0);
  Thu Jul 29 2021 11:55                                                Page 119


  6152                        	.line	1224
  6153 00:133B: AD xx xx     	lda	|~~reg_sr0
  6154 00:133E: 48           	pha
  6155 00:133F: F4 xx xx     	pea	#^L238+195
  6156 00:1342: F4 xx xx     	pea	#<L238+195
  6157 00:1345: 22 xx xx xx  	jsl	~~k_debug_bits
  6158                        ;	reg_sr1 = getbyte();
  6159                        	.line	1225
  6160 00:1349: 22 xx xx xx  	jsl	~~getbyte
  6161 00:134D: E2 20        	sep	#$20
  6162                        	longa	off
  6163 00:134F: 8D xx xx     	sta	|~~reg_sr1
  6164 00:1352: C2 20        	rep	#$20
  6165                        	longa	on
  6166                        ;	k_debug_bits("floppy_transfer_try1:reg_sr1:msr:"
                    ,reg_sr1);
  6167                        	.line	1226
  6168 00:1354: AD xx xx     	lda	|~~reg_sr1
  6169 00:1357: 48           	pha
  6170 00:1358: F4 xx xx     	pea	#^L238+229
  6171 00:135B: F4 xx xx     	pea	#<L238+229
  6172 00:135E: 22 xx xx xx  	jsl	~~k_debug_bits
  6173                        ;	reg_sr2 = getbyte();
  6174                        	.line	1227
  6175 00:1362: 22 xx xx xx  	jsl	~~getbyte
  6176 00:1366: E2 20        	sep	#$20
  6177                        	longa	off
  6178 00:1368: 8D xx xx     	sta	|~~reg_sr2
  6179 00:136B: C2 20        	rep	#$20
  6180                        	longa	on
  6181                        ;	k_debug_bits("floppy_transfer_try1:reg_sr2:msr:"
                    ,reg_sr2);
  6182                        	.line	1228
  6183 00:136D: AD xx xx     	lda	|~~reg_sr2
  6184 00:1370: 48           	pha
  6185 00:1371: F4 xx xx     	pea	#^L238+263
  6186 00:1374: F4 xx xx     	pea	#<L238+263
  6187 00:1377: 22 xx xx xx  	jsl	~~k_debug_bits
  6188                        ;	drives[cur_drive].track = getbyte();
  6189                        	.line	1229
  6190 00:137B: AD xx xx     	lda	|~~cur_drive
  6191 00:137E: 29 FF 00     	and	#$ff
  6192 00:1381: 85 01        	sta	<R0
  6193 00:1383: A5 01        	lda	<R0
  6194 00:1385: 0A           	asl	A
  6195 00:1386: 65 01        	adc	<R0
  6196 00:1388: 0A           	asl	A
  6197 00:1389: 85 01        	sta	<R0
  6198 00:138B: 22 xx xx xx  	jsl	~~getbyte
  6199 00:138F: A6 01        	ldx	<R0
  6200 00:1391: 9D xx xx     	sta	|~~drives,X
  6201                        ;
  6202                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  6203                        ;
  6204                        ;	i = getbyte();
  6205                        	.line	1233
  6206 00:1394: 22 xx xx xx  	jsl	~~getbyte
  Thu Jul 29 2021 11:55                                                Page 120


  6207 00:1398: 85 09        	sta	<L240+i_1
  6208                        ;	k_debug_bits("floppy_transfer_try1:1:c:",i);
  6209                        	.line	1234
  6210 00:139A: D4 09        	pei	<L240+i_1
  6211 00:139C: F4 xx xx     	pea	#^L238+297
  6212 00:139F: F4 xx xx     	pea	#<L238+297
  6213 00:13A2: 22 xx xx xx  	jsl	~~k_debug_bits
  6214                        ;	//k_debug_integer("floppy_transfer_try:i1:",i);
  6215                        ;	i = getbyte();
  6216                        	.line	1236
  6217 00:13A6: 22 xx xx xx  	jsl	~~getbyte
  6218 00:13AA: 85 09        	sta	<L240+i_1
  6219                        ;	k_debug_bits("floppy_transfer_try1:2:h:",i);
  6220                        	.line	1237
  6221 00:13AC: D4 09        	pei	<L240+i_1
  6222 00:13AE: F4 xx xx     	pea	#^L238+323
  6223 00:13B1: F4 xx xx     	pea	#<L238+323
  6224 00:13B4: 22 xx xx xx  	jsl	~~k_debug_bits
  6225                        ;	//k_debug_integer("floppy_transfer_try:i2:",i);
  6226                        ;	i = getbyte();
  6227                        	.line	1239
  6228 00:13B8: 22 xx xx xx  	jsl	~~getbyte
  6229 00:13BC: 85 09        	sta	<L240+i_1
  6230                        ;	k_debug_bits("floppy_transfer_try1:3:r:",i);
  6231                        	.line	1240
  6232 00:13BE: D4 09        	pei	<L240+i_1
  6233 00:13C0: F4 xx xx     	pea	#^L238+349
  6234 00:13C3: F4 xx xx     	pea	#<L238+349
  6235 00:13C6: 22 xx xx xx  	jsl	~~k_debug_bits
  6236                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  6237                        ;	i = getbyte();
  6238                        	.line	1242
  6239 00:13CA: 22 xx xx xx  	jsl	~~getbyte
  6240 00:13CE: 85 09        	sta	<L240+i_1
  6241                        ;	k_debug_bits("floppy_transfer_try1:3:n:",i);
  6242                        	.line	1243
  6243 00:13D0: D4 09        	pei	<L240+i_1
  6244 00:13D2: F4 xx xx     	pea	#^L238+375
  6245 00:13D5: F4 xx xx     	pea	#<L238+375
  6246 00:13D8: 22 xx xx xx  	jsl	~~k_debug_bits
  6247                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  6248                        ;
  6249                        ;	k_debug_integer("floppy_transfer_try:floppybuffe
                    rIndex:",floppybufferIndex);
  6250                        	.line	1246
  6251 00:13DC: AD xx xx     	lda	|~~floppybufferIndex
  6252 00:13DF: 48           	pha
  6253 00:13E0: F4 xx xx     	pea	#^L238+401
  6254 00:13E3: F4 xx xx     	pea	#<L238+401
  6255 00:13E6: 22 xx xx xx  	jsl	~~k_debug_integer
  6256                        ;	//return i != 2;
  6257                        ;
  6258                        ;	retCode = (i != 2);
  6259                        	.line	1249
  6260 00:13EA: 64 01        	stz	<R0
  6261 00:13EC: A5 09        	lda	<L240+i_1
  6262 00:13EE: C9 02 00     	cmp	#<$2
  6263 00:13F1: D0 03        	bne	L249
  Thu Jul 29 2021 11:55                                                Page 121


  6264 00:13F3: 82 02 00     	brl	L248
  6265                        L249:
  6266 00:13F6: E6 01        	inc	<R0
  6267                        L248:
  6268 00:13F8: E2 20        	sep	#$20
  6269                        	longa	off
  6270 00:13FA: A5 01        	lda	<R0
  6271 00:13FC: 85 0D        	sta	<L240+retCode_1
  6272 00:13FE: C2 20        	rep	#$20
  6273                        	longa	on
  6274                        ;
  6275                        ;	return retCode;
  6276                        	.line	1251
  6277 00:1400: A5 0D        	lda	<L240+retCode_1
  6278 00:1402: 29 FF 00     	and	#$ff
  6279                        L250:
  6280 00:1405: A8           	tay
  6281 00:1406: A5 0F        	lda	<L239+2
  6282 00:1408: 85 1B        	sta	<L239+2+12
  6283 00:140A: A5 0E        	lda	<L239+1
  6284 00:140C: 85 1A        	sta	<L239+1+12
  6285 00:140E: 2B           	pld
  6286 00:140F: 3B           	tsc
  6287 00:1410: 18           	clc
  6288 00:1411: 69 19 00     	adc	#L239+12
  6289 00:1414: 1B           	tcs
  6290 00:1415: 98           	tya
  6291 00:1416: 6B           	rtl
  6292                        ;}
  6293                        	.line	1252
  6294                        	.endblock	1252
  6295             0000000D   L239	equ	13
  6296             00000009   L240	equ	9
  6297                        	ends
  6298                        	efunc
  6299                        	.endfunc	1252,9,13
  6300                        	.line	1252
  6301                        	data
  6302                        L238:
  6303 00:063C: 6B 5F 66 64  	db	$6B,$5F,$66,$64,$5F,$72,$77,$5F,$63,$6F,
                    $6D,$6D,$61,$6E,$64
       00:0640: 5F 72 77 5F 
       00:0644: 63 6F 6D 6D 
       00:0648: 61 6E 64 
  6304 00:064B: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:064F: 66 64 5F 72 
       00:0653: 77 5F 63 6F 
       00:0657: 6D 6D 61 
  6305 00:065A: 6E 64 3A 74  	db	$6E,$64,$3A,$74,$72,$61,$63,$6B,$3A,$00,
                    $6B,$5F,$66,$64,$5F
       00:065E: 72 61 63 6B 
       00:0662: 3A 00 6B 5F 
       00:0666: 66 64 5F 
  6306 00:0669: 72 77 5F 63  	db	$72,$77,$5F,$63,$6F,$6D,$6D,$61,$6E,$64,
                    $3A,$68,$65,$61,$64
       00:066D: 6F 6D 6D 61 
       00:0671: 6E 64 3A 68 
  Thu Jul 29 2021 11:55                                                Page 122


       00:0675: 65 61 64 
  6307 00:0678: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:067C: 66 64 5F 72 
       00:0680: 77 5F 63 6F 
       00:0684: 6D 6D 61 
  6308 00:0687: 6E 64 3A 73  	db	$6E,$64,$3A,$73,$65,$63,$74,$6F,$72,$3A,
                    $00,$6B,$5F,$66,$64
       00:068B: 65 63 74 6F 
       00:068F: 72 3A 00 6B 
       00:0693: 5F 66 64 
  6309 00:0696: 5F 72 77 5F  	db	$5F,$72,$77,$5F,$63,$6F,$6D,$6D,$61,$6E,
                    $64,$3A,$43,$4D,$44
       00:069A: 63 6F 6D 6D 
       00:069E: 61 6E 64 3A 
       00:06A2: 43 4D 44 
  6310 00:06A5: 5F 53 45 4E  	db	$5F,$53,$45,$4E,$53,$45,$49,$3A,$72,$65,
                    $67,$5F,$73,$72,$30
       00:06A9: 53 45 49 3A 
       00:06AD: 72 65 67 5F 
       00:06B1: 73 72 30 
  6311 00:06B4: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:06B8: 66 64 5F 72 
       00:06BC: 77 5F 63 6F 
       00:06C0: 6D 6D 61 
  6312 00:06C3: 6E 64 3A 43  	db	$6E,$64,$3A,$43,$4D,$44,$5F,$53,$45,$4E,
                    $53,$45,$49,$3A,$74
       00:06C7: 4D 44 5F 53 
       00:06CB: 45 4E 53 45 
       00:06CF: 49 3A 74 
  6313 00:06D2: 72 61 63 6B  	db	$72,$61,$63,$6B,$3A,$00,$6B,$5F,$66,$64,
                    $5F,$72,$77,$5F,$63
       00:06D6: 3A 00 6B 5F 
       00:06DA: 66 64 5F 72 
       00:06DE: 77 5F 63 
  6314 00:06E1: 6F 6D 6D 61  	db	$6F,$6D,$6D,$61,$6E,$64,$3A,$52,$45,$41,
                    $44,$49,$4E,$47,$20
       00:06E5: 6E 64 3A 52 
       00:06E9: 45 41 44 49 
       00:06ED: 4E 47 20 
  6315 00:06F0: 4E 4F 57 21  	db	$4E,$4F,$57,$21,$0D,$0A,$00,$44,$41,$54,
                    $41,$3A,$0D,$0A,$00
       00:06F4: 0D 0A 00 44 
       00:06F8: 41 54 41 3A 
       00:06FC: 0D 0A 00 
  6316 00:06FF: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0703: 70 79 5F 74 
       00:0707: 72 61 6E 73 
       00:070B: 66 65 72 
  6317 00:070E: 5F 74 72 79  	db	$5F,$74,$72,$79,$31,$3A,$72,$65,$67,$5F,
                    $73,$72,$30,$3A,$6D
       00:0712: 31 3A 72 65 
       00:0716: 67 5F 73 72 
       00:071A: 30 3A 6D 
  6318 00:071D: 73 72 3A 00  	db	$73,$72,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
  Thu Jul 29 2021 11:55                                                Page 123


       00:0721: 66 6C 6F 70 
       00:0725: 70 79 5F 74 
       00:0729: 72 61 6E 
  6319 00:072C: 73 66 65 72  	db	$73,$66,$65,$72,$5F,$74,$72,$79,$31,$3A,
                    $72,$65,$67,$5F,$73
       00:0730: 5F 74 72 79 
       00:0734: 31 3A 72 65 
       00:0738: 67 5F 73 
  6320 00:073B: 72 31 3A 6D  	db	$72,$31,$3A,$6D,$73,$72,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:073F: 73 72 3A 00 
       00:0743: 66 6C 6F 70 
       00:0747: 70 79 5F 
  6321 00:074A: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$31,$3A,$72
       00:074E: 73 66 65 72 
       00:0752: 5F 74 72 79 
       00:0756: 31 3A 72 
  6322 00:0759: 65 67 5F 73  	db	$65,$67,$5F,$73,$72,$32,$3A,$6D,$73,$72,
                    $3A,$00,$66,$6C,$6F
       00:075D: 72 32 3A 6D 
       00:0761: 73 72 3A 00 
       00:0765: 66 6C 6F 
  6323 00:0768: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$5F,$74,$72
       00:076C: 74 72 61 6E 
       00:0770: 73 66 65 72 
       00:0774: 5F 74 72 
  6324 00:0777: 79 31 3A 31  	db	$79,$31,$3A,$31,$3A,$63,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:077B: 3A 63 3A 00 
       00:077F: 66 6C 6F 70 
       00:0783: 70 79 5F 
  6325 00:0786: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$31,$3A,$32
       00:078A: 73 66 65 72 
       00:078E: 5F 74 72 79 
       00:0792: 31 3A 32 
  6326 00:0795: 3A 68 3A 00  	db	$3A,$68,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
       00:0799: 66 6C 6F 70 
       00:079D: 70 79 5F 74 
       00:07A1: 72 61 6E 
  6327 00:07A4: 73 66 65 72  	db	$73,$66,$65,$72,$5F,$74,$72,$79,$31,$3A,
                    $33,$3A,$72,$3A,$00
       00:07A8: 5F 74 72 79 
       00:07AC: 31 3A 33 3A 
       00:07B0: 72 3A 00 
  6328 00:07B3: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:07B7: 70 79 5F 74 
       00:07BB: 72 61 6E 73 
       00:07BF: 66 65 72 
  6329 00:07C2: 5F 74 72 79  	db	$5F,$74,$72,$79,$31,$3A,$33,$3A,$6E,$3A,
                    $00,$66,$6C,$6F,$70
       00:07C6: 31 3A 33 3A 
       00:07CA: 6E 3A 00 66 
       00:07CE: 6C 6F 70 
  Thu Jul 29 2021 11:55                                                Page 124


  6330 00:07D1: 70 79 5F 74  	db	$70,$79,$5F,$74,$72,$61,$6E,$73,$66,$65,
                    $72,$5F,$74,$72,$79
       00:07D5: 72 61 6E 73 
       00:07D9: 66 65 72 5F 
       00:07DD: 74 72 79 
  6331 00:07E0: 3A 66 6C 6F  	db	$3A,$66,$6C,$6F,$70,$70,$79,$62,$75,$66,
                    $66,$65,$72,$49,$6E
       00:07E4: 70 70 79 62 
       00:07E8: 75 66 66 65 
       00:07EC: 72 49 6E 
  6332 00:07EF: 64 65 78 3A  	db	$64,$65,$78,$3A,$00
       00:07F3: 00 
  6333 00:07F4:              	ends
  6334                        ;
  6335                        ;
  6336                        ;
  6337                        	.line	1254
  6338                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOS-Beta\src\fxfloppy.c",1164
  6339                        	xref	~~k_debug_byte_array
  6340                        	xref	~~k_debug_bits
  6341                        	xref	~~k_debug_hex
  6342                        	xref	~~k_debug_long
  6343                        	xref	~~k_debug_integer
  6344                        	xref	~~k_debug_string
  6345                        	xref	~~sleep
  6346                        	udata
  6347                        	xdef	~~floppybuffer
  6348                        ~~floppybuffer
  6349 00:0000:              	ds	512
  6350 00:0200:              	ends
  6351                        	udata
  6352                        ~~status
  6353 00:0200:              	ds	7
  6354 00:0207:              	ends
  6355                        	udata
  6356                        ~~status_sz
  6357 00:0207:              	ds	2
  6358 00:0209:              	ends
  6359                        	udata
  6360                        ~~motoff_timer
  6361 00:0209:              	ds	2
  6362 00:020B:              	ends
  6363                        	udata
  6364                        ~~drives
  6365 00:020B:              	ds	24
  6366 00:0223:              	ends
  6367                        	udata
  6368                        ~~reg_sr2
  6369 00:0223:              	ds	1
  6370 00:0224:              	ends
  6371                        	udata
  6372                        ~~reg_sr1
  6373 00:0224:              	ds	1
  6374 00:0225:              	ends
  6375                        	udata
  6376                        ~~reg_sr0
  6377 00:0225:              	ds	1
  Thu Jul 29 2021 11:55                                                Page 125


  6378 00:0226:              	ends
  6379                        	udata
  6380                        ~~reg_dor
  6381 00:0226:              	ds	1
  6382 00:0227:              	ends
  6383                        	.sym	~~wait_til_ready,~~wait_til_ready,69,3,0
  6384                        	.sym	~~floppybuffer,~~floppybuffer,110,2,0,51
                    2
  6385                        	.sym	~~floppybufferIndex,~~floppybufferIndex,
                    16,2,16
  6386                        	.sym	~~status,~~status,110,3,0,7
  6387                        	.sym	~~status_sz,~~status_sz,5,3,16
  6388                        	.sym	~~motoff_timer,~~motoff_timer,5,3,16
  6389                        	.sym	~~cur_drive,~~cur_drive,14,3,8
  6390                        	.sym	~~drives,~~drives,106,3,0,90,4
  6391                        	.sym	~~reg_sr2,~~reg_sr2,14,3,8
  6392                        	.sym	~~reg_sr1,~~reg_sr1,14,3,8
  6393                        	.sym	~~reg_sr0,~~reg_sr0,14,3,8
  6394                        	.sym	~~reg_dor,~~reg_dor,14,3,8
  6395                        	.sym	drive_state_t,0,10,14,48,90
  6396                        	.sym	~~k_fd_rw_command,~~k_fd_rw_command,69,3
                    ,0
  6397                        	.sym	~~k_fd_read_lba,~~k_fd_read_lba,69,3,0
  6398                        	.sym	~~k_fd_read_sector,~~k_fd_read_sector,80
                    ,2,0
  6399                        	.sym	~~k_fd_isbusy_drive,~~k_fd_isbusy_drive,
                    78,2,0
  6400                        	.sym	~~k_fd_isbusy,~~k_fd_isbusy,78,2,0
  6401                        	.sym	~~k_fd_isready,~~k_fd_isready,78,2,0
  6402                        	.sym	~~k_fd_isreadable,~~k_fd_isreadable,78,2
                    ,0
  6403                        	.sym	~~k_fd_init,~~k_fd_init,78,2,0
  6404                        	.sym	~~k_fd_reset,~~k_fd_reset,78,2,0
  6405                        	.sym	~~floppy_timer,~~floppy_timer,65,2,0
  6406                        	.sym	~~floppy_isr,~~floppy_isr,65,2,0
  6407                        	.sym	~~floppy_write,~~floppy_write,69,2,0
  6408                        	.sym	~~floppy_read,~~floppy_read,69,2,0
  6409                        	.sym	~~floppy_transfer_lba,~~floppy_transfer_
                    lba,69,3,0
  6410                        	.sym	~~floppy_transfer,~~floppy_transfer,69,3
                    ,0
  6411                        	.sym	~~floppy_transfer_try2,~~floppy_transfer
                    _try2,69,3,0
  6412                        	.sym	~~floppy_transfer_try1,~~floppy_transfer
                    _try1,69,3,0
  6413                        	.sym	~~floppy_present,~~floppy_present,69,2,0
  6414                        	.sym	~~floppy_seek,~~floppy_seek,69,3,0
  6415                        	.sym	~~floppy_calibrate,~~floppy_calibrate,65
                    ,3,0
  6416                        	.sym	~~floppy_drive_data,~~floppy_drive_data,
                    65,2,0
  6417                        	.sym	~~floppy_select,~~floppy_select,69,3,0
  6418                        	.sym	~~floppy_specify,~~floppy_specify,65,3,0
  6419                        	.sym	~~fdc_reset,~~fdc_reset,65,3,0
  6420                        	.sym	~~fdc_configure,~~fdc_configure,65,3,0
  6421                        	.sym	~~motor_off,~~motor_off,65,3,0
  6422                        	.sym	~~motor_on,~~motor_on,65,3,0
  6423                        	.sym	~~fdc_wait,~~fdc_wait,69,3,0
  Thu Jul 29 2021 11:55                                                Page 126


  6424                        	.sym	~~fdc_waitint,~~fdc_waitint,69,3,0
  6425                        	.sym	~~getbyte,~~getbyte,69,2,0
  6426                        	.sym	~~sendbyte,~~sendbyte,69,2,0
  6427                        	.sym	~~lba_2_chs,~~lba_2_chs,65,3,0
  6428                        	.sym	~~io_wait,~~io_wait,65,3,0
  6429                        	.sym	~~floppy_check_int,~~floppy_check_int,65
                    ,2,0
  6430                        	.sym	~~floppy_init,~~floppy_init,65,2,0
  6431                        	.sym	~~irq_signaled,~~irq_signaled,14,2,8
  6432                        	.sym	PIRQCHAIN,0,138,14,32,89
  6433                        	.sym	IRQCHAIN,0,10,14,128,89
  6434                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  6435                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  6436                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  6437                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  6438                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  6439                        	.sym	DEVICEDRIVER_IRQ,0,641,14,32
  6440                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,88
  6441                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,88
  6442                        	.sym	GETDRIVERDEF,0,8842,14,32,87
  6443                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,87
  6444                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,87
  6445                        	.sym	~~k_debug_byte_array,~~k_debug_byte_arra
                    y,65,18,0
  6446                        	.sym	~~k_debug_bits,~~k_debug_bits,65,18,0
  6447                        	.sym	~~k_debug_hex,~~k_debug_hex,65,18,0
  6448                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
  6449                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  6450                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  6451                        	.sym	~~sleep,~~sleep,65,18,0
  6452                        	.sym	PSEGMENTHEADER,0,138,14,32,86
  6453                        	.sym	SEGMENTHEADER,0,10,14,160,86
  6454                        	.sym	PDEBUGBYTEBITS,0,138,14,32,85
  6455                        	.sym	DEBUGBYTEBITS,0,10,14,8,85
  6456                        	.sym	PFXENVIRONMENT,0,138,14,32,84
  6457                        	.sym	FXENVIRONMENT,0,10,14,96,84
  6458                        	.sym	PFXZEROPAGE,0,138,14,32,83
  6459                        	.sym	FXZEROPAGE,0,10,14,720,83
  6460                        	.sym	IRQBUFFER,0,10,14,32,82
  6461                        	.sym	KERNELTRAPCALL,0,641,14,32
  6462                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,81
  6463                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,81
  6464                        	.sym	FRESULT,0,5,14,16
  6465                        	.sym	MKFS_PARM,0,10,14,80,80
  6466                        	.sym	FILINFO,0,10,14,2224,79
  6467                        	.sym	DIR,0,10,14,416,78
  6468                        	.sym	FIL,0,10,14,4400,77
  6469                        	.sym	FFOBJID,0,10,14,128,76
  6470                        	.sym	FATFS,0,10,14,4504,75
  6471                        	.sym	LBA_t,0,18,14,32
  6472                        	.sym	FSIZE_t,0,18,14,32
  6473                        	.sym	TCHAR,0,14,14,8
  6474                        	.sym	PCOMMANDARGS,0,138,14,32,74
  6475                        	.sym	COMMANDARGS,0,10,14,64,74
  6476                        	.sym	PTOKENIZESTATE,0,133,14,32
  6477                        	.sym	TOKENIZESTATE,0,5,14,16
  Thu Jul 29 2021 11:55                                                Page 127


  6478                        	.sym	PTOKEN,0,138,14,32,73
  6479                        	.sym	TOKEN,0,10,14,64,73
  6480                        	.sym	PTOKENTYPE,0,133,14,32
  6481                        	.sym	TOKENTYPE,0,5,14,16
  6482                        	.sym	FXCommandHandler,0,656,14,32
  6483                        	.sym	PCONSOLECTX,0,138,14,32,72
  6484                        	.sym	CONSOLECTX,0,10,14,1144,72
  6485                        	.sym	PSPINNERCTX,0,138,14,32,71
  6486                        	.sym	SPINNERCTX,0,10,14,48,71
  6487                        	.sym	HCLIP,0,138,14,32,70
  6488                        	.sym	PCLIPBOARD_DATA,0,138,14,32,70
  6489                        	.sym	CLIPBOARD_DATA,0,10,14,168,70
  6490                        	.sym	PEVENTMANAGER,0,138,14,32,69
  6491                        	.sym	EVENTMANAGER,0,10,14,192,69
  6492                        	.sym	EV_RUN,0,656,14,32
  6493                        	.sym	EV_QUERY_METRIC,0,656,14,32
  6494                        	.sym	EV_CONFIGURE,0,656,14,32
  6495                        	.sym	EV_UNINIT,0,641,14,32
  6496                        	.sym	EV_INIT,0,8833,14,32
  6497                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,68
  6498                        	.sym	MOUSE_MSG_STATE,0,10,14,184,68
  6499                        	.sym	PFXEVENTPROCESS,0,138,14,32,67
  6500                        	.sym	FXEVENTPROCESS,0,10,14,64,67
  6501                        	.sym	PMARSHALDATA,0,139,14,32,66
  6502                        	.sym	MARSHALDATA,0,11,14,32,66
  6503                        	.sym	FXIDLEPROCESS,0,641,14,32
  6504                        	.sym	FXEventProc,0,641,14,32
  6505                        	.sym	PMOUSEMSGDATA,0,138,14,32,65
  6506                        	.sym	MOUSEMSGDATA,0,10,14,64,65
  6507                        	.sym	MSGIRQ,0,5,14,16
  6508                        	.sym	MAINLOOPARGS,0,10,14,16,64
  6509                        	.sym	PEACHCHILD_MSG,0,138,14,32,63
  6510                        	.sym	EACHCHILD_MSG,0,10,14,64,63
  6511                        	.sym	PMSGBOX_DATA,0,138,14,32,62
  6512                        	.sym	MSGBOX_DATA,0,10,14,96,62
  6513                        	.sym	PDESKTOP_DATA,0,138,14,32,61
  6514                        	.sym	DESKTOP_DATA,0,10,14,64,61
  6515                        	.sym	PWINDOWMANAGER,0,138,14,32,60
  6516                        	.sym	WINDOWMANAGER,0,10,14,160,60
  6517                        	.sym	WM_DOPROCS,0,641,14,32
  6518                        	.sym	WM_QUERY_METRIC,0,656,14,32
  6519                        	.sym	WM_CONFIGURE,0,656,14,32
  6520                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  6521                        	.sym	WM_EVENTS,0,641,14,32
  6522                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,59
  6523                        	.sym	CUR_PALETTE_MAP,0,10,14,400,59
  6524                        	.sym	PCLICKDETECTED,0,138,14,32,58
  6525                        	.sym	CLICKDETECTED,0,10,14,64,58
  6526                        	.sym	OBJECTCLICKED,0,641,14,32
  6527                        	.sym	PALLOCATIONHEADER,0,138,14,32,57
  6528                        	.sym	ALLOCATIONHEADER,0,10,14,80,57
  6529                        	.sym	PIPCPORT,0,138,14,32,56
  6530                        	.sym	IPCPORT,0,10,14,144,56
  6531                        	.sym	MemoryCallback,0,641,14,32
  6532                        	.sym	PFXMEMORYMAP,0,138,14,32,55
  6533                        	.sym	FXMEMORYMAP,0,10,14,2072,55
  6534                        	.sym	UMM_HEAP_INFO,0,10,14,256,54
  6535                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  Thu Jul 29 2021 11:55                                                Page 128


  6536                        	.sym	FOREACHNODE,0,641,14,32
  6537                        	.sym	PEXECUTIVE,0,138,14,32,53
  6538                        	.sym	EXECUTIVE,0,10,14,128,53
  6539                        	.sym	EX_QUERY_METRIC,0,656,14,32
  6540                        	.sym	EX_CONFIGURE,0,656,14,32
  6541                        	.sym	EX_UNINIT,0,641,14,32
  6542                        	.sym	EX_INIT,0,8833,14,32
  6543                        	.sym	PFXSTRING,0,138,14,32,52
  6544                        	.sym	FXSTRING,0,10,14,64,52
  6545                        	.sym	Boolean_T,0,5,14,16
  6546                        	.sym	ldiv_t,0,10,14,64,50
  6547                        	.sym	div_t,0,10,14,32,49
  6548                        	.sym	wctype_t,0,16,14,16
  6549                        	.sym	wint_t,0,16,14,16
  6550                        	.sym	wchar_t,0,14,14,8
  6551                        	.sym	ptrdiff_t,0,7,14,32
  6552                        	.sym	size_t,0,16,14,16
  6553                        	.sym	PFXRFHEADER_STRING_ENTRY,0,138,14,32,48
  6554                        	.sym	FXRFHEADER_STRING_ENTRY,0,10,14,40,48
  6555                        	.sym	PFXRFHEADER_STRING,0,138,14,32,47
  6556                        	.sym	FXRFHEADER_STRING,0,10,14,32,47
  6557                        	.sym	PFXRFHEADER_FONT,0,138,14,32,46
  6558                        	.sym	FXRFHEADER_FONT,0,10,14,144,46
  6559                        	.sym	PFXRFHEADER,0,138,14,32,45
  6560                        	.sym	FXRFHEADER,0,10,14,72,45
  6561                        	.sym	PFXCOMBUFFER,0,138,14,32,44
  6562                        	.sym	FXCOMBUFFER,0,10,14,2080,44
  6563                        	.sym	PSUBMENULIST,0,138,14,32,43
  6564                        	.sym	SUBMENULIST,0,10,14,40,43
  6565                        	.sym	HSUBMENU,0,7,14,32
  6566                        	.sym	PSUBMENU,0,138,14,32,42
  6567                        	.sym	SUBMENU,0,10,14,64,42
  6568                        	.sym	MenuAction,0,641,14,32
  6569                        	.sym	PMENUANCHOR,0,138,14,32,41
  6570                        	.sym	MENUANCHOR,0,10,14,272,41
  6571                        	.sym	PMSGBOX,0,138,14,32,40
  6572                        	.sym	MSGBOX,0,10,14,144,40
  6573                        	.sym	PTEXTBOX,0,138,14,32,39
  6574                        	.sym	TEXTBOX,0,10,14,144,39
  6575                        	.sym	PLISTBOX,0,138,14,32,38
  6576                        	.sym	LISTBOX,0,10,14,240,38
  6577                        	.sym	PSCROLLBAR,0,138,14,32,37
  6578                        	.sym	SCROLLBAR,0,10,14,240,37
  6579                        	.sym	PBUTTON,0,138,14,32,36
  6580                        	.sym	BUTTON,0,10,14,96,36
  6581                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,35
  6582                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,35
  6583                        	.sym	PMENUTAG,0,138,14,32,34
  6584                        	.sym	MENUTAG,0,10,14,160,34
  6585                        	.sym	PMENU,0,138,14,32,33
  6586                        	.sym	MENU,0,10,14,280,33
  6587                        	.sym	HMENURESOURCE,0,129,14,32
  6588                        	.sym	FONTMETRIC,0,10,14,32,32
  6589                        	.sym	TITLE,0,142,14,32
  6590                        	.sym	PHANDLE,0,1153,14,32
  6591                        	.sym	HANDLE,0,129,14,32
  6592                        	.sym	PWINDOWEX,0,138,14,32,31
  6593                        	.sym	WINDOWEX,0,10,14,3880,31
  Thu Jul 29 2021 11:55                                                Page 129


  6594                        	.sym	PWINDOW,0,138,14,32,30
  6595                        	.sym	WINDOW,0,10,14,3904,30
  6596                        	.sym	PDRAGDATA,0,138,14,32,29
  6597                        	.sym	DRAGDATA,0,10,14,216,29
  6598                        	.sym	PNCCLICKABLE,0,138,14,32,28
  6599                        	.sym	NCCLICKABLE,0,10,14,136,28
  6600                        	.sym	HCLICKABLE,0,7,14,32
  6601                        	.sym	PCLICKABLE,0,138,14,32,27
  6602                        	.sym	CLICKABLE,0,10,14,152,27
  6603                        	.sym	PWNDCLASS,0,138,14,32,26
  6604                        	.sym	WNDCLASS,0,10,14,272,26
  6605                        	.sym	HBRUSH,0,129,14,32
  6606                        	.sym	HCURSOR,0,129,14,32
  6607                        	.sym	HICON,0,129,14,32
  6608                        	.sym	HINSTANCE,0,129,14,32
  6609                        	.sym	FXWndProc,0,654,14,32
  6610                        	.sym	PDRECT,0,138,14,32,25
  6611                        	.sym	DRECT,0,10,14,112,25
  6612                        	.sym	PRECTP,0,138,14,32,24
  6613                        	.sym	RECTP,0,10,14,96,24
  6614                        	.sym	PRECT,0,138,14,32,23
  6615                        	.sym	RECT,0,10,14,112,23
  6616                        	.sym	PPOINT,0,138,14,32,22
  6617                        	.sym	POINT,0,10,14,32,22
  6618                        	.sym	PFXPROPERTY,0,138,14,32,20
  6619                        	.sym	FXPROPERTY,0,10,14,384,20
  6620                        	.sym	PKEYSTATE,0,138,14,32,19
  6621                        	.sym	KEYSTATE,0,10,14,112,19
  6622                        	.sym	SCANCODE,0,14,14,8
  6623                        	.sym	KEYCODE,0,16,14,16
  6624                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
  6625                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
  6626                        	.sym	PFXPROCESS,0,138,14,32,17
  6627                        	.sym	FXPROCESS,0,10,14,800,17
  6628                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
  6629                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
  6630                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
  6631                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
  6632                        	.sym	FXProcessProc,0,641,14,32
  6633                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
  6634                        	.sym	FXCMDMESSAGE,0,10,14,312,14
  6635                        	.sym	PFXOSMESSAGE,0,138,14,32,13
  6636                        	.sym	FXOSMESSAGE,0,10,14,312,13
  6637                        	.sym	PINT_REGS,0,138,14,32,12
  6638                        	.sym	INT_REGS,0,10,14,104,12
  6639                        	.sym	TASK_STACK,0,10,14,32,11
  6640                        	.sym	TASK,0,10,14,48,10
  6641                        	.sym	PIRQDATA,0,138,14,32,9
  6642                        	.sym	IRQDATA,0,10,14,48,9
  6643                        	.sym	HMENU,0,129,14,32
  6644                        	.sym	HWND,0,129,14,32
  6645                        	.sym	MSGDATA,0,14,14,8
  6646                        	.sym	MSGDEST,0,18,14,32
  6647                        	.sym	MSGSRC,0,18,14,32
  6648                        	.sym	MSGTYPE,0,16,14,16
  6649                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
  6650                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
  6651                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
  Thu Jul 29 2021 11:55                                                Page 130


  6652                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
  6653                        	.sym	FILE_PATH_LIST,0,138,14,32,3
  6654                        	.sym	PROCEDURE_LIST,0,138,14,32,3
  6655                        	.sym	FILE_HANDLE,0,138,14,32,8
  6656                        	.sym	FILE_BLOCK,0,10,14,552,8
  6657                        	.sym	SEMAPHORE,0,10,14,16,7
  6658                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
  6659                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
  6660                        	.sym	KRESULT,0,18,14,32
  6661                        	.sym	PKERNEL_ERROR,0,138,14,32,5
  6662                        	.sym	KERNEL_ERROR,0,10,14,32,5
  6663                        	.sym	PROCESS_STATUS,0,16,14,16
  6664                        	.sym	FILE_PATH_NAME,0,142,14,32
  6665                        	.sym	PROCESS_RESOURCE,0,129,14,32
  6666                        	.sym	PROCESS_TLS,0,129,14,32
  6667                        	.sym	PROCESS_CTX,0,129,14,32
  6668                        	.sym	USERID,0,16,14,16
  6669                        	.sym	PROCESS_ID,0,18,14,32
  6670                        	.sym	PROCESS_BANK,0,14,14,8
  6671                        	.sym	PFXQUEUE,0,138,14,32,4
  6672                        	.sym	FXQUEUE,0,10,14,80,4
  6673                        	.sym	PFXNODELIST,0,138,14,32,3
  6674                        	.sym	FXNODELIST,0,10,14,96,3
  6675                        	.sym	NodeListDeallocator,0,641,14,32
  6676                        	.sym	PFXNODE,0,138,14,32,2
  6677                        	.sym	FXNODE,0,10,14,384,2
  6678                        	.sym	PBYTEBITS,0,138,14,32,1
  6679                        	.sym	BYTEBITS,0,10,14,8,1
  6680                        	.sym	HRESULT,0,18,14,32
  6681                        	.sym	LPWCHAR,0,144,14,32
  6682                        	.sym	WCHAR,0,16,14,16
  6683                        	.sym	HSTRINGTABLE,0,129,14,32
  6684                        	.sym	HCOLOR,0,129,14,32
  6685                        	.sym	HFONT,0,129,14,32
  6686                        	.sym	HDC,0,129,14,32
  6687                        	.sym	HPOINTER,0,129,14,32
  6688                        	.sym	uint32_t,0,18,14,32
  6689                        	.sym	uint8_t,0,14,14,8
  6690                        	.sym	LPBOOL,0,142,14,32
  6691                        	.sym	BOOL,0,14,14,8
  6692                        	.sym	DWORD,0,18,14,32
  6693                        	.sym	ULONG,0,18,14,32
  6694                        	.sym	LPLONG,0,135,14,32
  6695                        	.sym	LONG,0,7,14,32
  6696                        	.sym	PUINT,0,144,14,32
  6697                        	.sym	USHORT,0,16,14,16
  6698                        	.sym	UINT,0,16,14,16
  6699                        	.sym	INT,0,5,14,16
  6700                        	.sym	WORD,0,5,14,16
  6701                        	.sym	PBYTE,0,142,14,32
  6702                        	.sym	BYTE,0,14,14,8
  6703                        	.sym	IOPORT,0,142,14,32
  6704                        	.sym	PUCHAR,0,142,14,32
  6705                        	.sym	UCHAR,0,14,14,8
  6706                        	.sym	LPWCSTR,0,142,14,32
  6707                        	.sym	LPCSTR,0,142,14,32
  6708                        	.sym	LPSTR,0,142,14,32
  6709                        	.sym	LPCHAR,0,142,14,32
  Thu Jul 29 2021 11:55                                                Page 131


  6710                        	.sym	CHAR,0,14,14,8
  6711                        	.sym	PUINT_32,0,146,14,32
  6712                        	.sym	UINT_32,0,18,14,32
  6713                        	.sym	PUINT_16,0,144,14,32
  6714                        	.sym	UINT_16,0,16,14,16
  6715                        	.sym	PUINT_8,0,142,14,32
  6716                        	.sym	UINT_8,0,14,14,8
  6717                        	.sym	LPVOID,0,129,14,32
  6718                        	.sym	VOID,0,1,14,32
  6719                        	end


      Lines assembled: 6719
      Errors: 0
