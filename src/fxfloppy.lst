  Sat Jul 10 2021  1:15                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",0
     7                        ;#include "fxtypes.h"
     8                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
     9                        	.stag	_fx_bytebits,8,1
    10                        	.member	b7,0,14,17,1
    11                        	.member	b6,1,14,17,1
    12                        	.member	b5,2,14,17,1
    13                        	.member	b4,3,14,17,1
    14                        	.member	b3,4,14,17,1
    15                        	.member	b2,5,14,17,1
    16                        	.member	b1,6,14,17,1
    17                        	.member	b0,7,14,17,1
    18                        	.eos
    19                        	.stag	_fx_node,384,2
    20                        	.member	type,0,14,8,8
    21                        	.member	Reserved0,8,14,8,8
    22                        	.member	data,16,129,8,32
    23                        	.member	last,48,138,8,32,2
    24                        	.member	next,80,138,8,32,2
    25                        	.member	name,112,110,8,0,32
    26                        	.member	Reserved1,368,16,8,16
    27                        	.eos
    28                        	.stag	_fx_nodelist,96,3
    29                        	.member	listhead,0,138,8,32,2
    30                        	.member	listData,32,129,8,32
    31                        	.member	deallocator,64,641,8,32
    32                        	.eos
    33                        	.stag	_fx_queue,80,4
    34                        	.member	count,0,5,8,16
    35                        	.member	front,16,138,8,32,2
    36                        	.member	rear,48,138,8,32,2
    37                        	.eos
    38                        	.stag	fake5_,32,5
    39                        	.member	subsystem,0,14,8,8
    40                        	.member	level,8,14,8,8
    41                        	.member	error,16,16,8,16
    42                        	.eos
    43                        	.stag	_fx_process_signal,16,6
    44                        	.member	cbSize,0,16,8,16
    45                        	.eos
    46                        	.stag	_fx_semaphore,16,7
    47                        	.member	reserved,0,5,8,16
    48                        	.eos
    49                        	.stag	_fx_fileBlock,552,8
    50                        	.member	openCount,0,16,8,16
  Sat Jul 10 2021  1:15                                                Page 2


    51                        	.member	lockCount,16,16,8,16
    52                        	.member	dirty,32,14,8,8
    53                        	.member	fileBuffer,40,110,8,0,64
    54                        	.eos
    55                        	.stag	_fx_irq_data,48,9
    56                        	.member	line,0,5,8,16
    57                        	.member	keycode,16,142,8,32
    58                        	.eos
    59                        	.stag	_task,48,10
    60                        	.member	SPL,0,14,8,8
    61                        	.member	SPH,8,14,8,8
    62                        	.member	pstack,16,142,8,32
    63                        	.eos
    64                        	.stag	_task_stack,32,11
    65                        	.member	SS,0,142,8,32
    66                        	.eos
    67                        	.stag	int_regs,104,12
    68                        	.member	PB,0,14,8,8
    69                        	.member	PH,8,14,8,8
    70                        	.member	PL,16,14,8,8
    71                        	.member	PP,24,14,8,8
    72                        	.member	DB,32,14,8,8
    73                        	.member	DH,40,14,8,8
    74                        	.member	DL,48,14,8,8
    75                        	.member	AH,56,14,8,8
    76                        	.member	AL,64,14,8,8
    77                        	.member	XH,72,14,8,8
    78                        	.member	XL,80,14,8,8
    79                        	.member	YH,88,14,8,8
    80                        	.member	YL,96,14,8,8
    81                        	.eos
    82                        	.stag	_fx_eventMessage,304,13
    83                        	.member	src,0,18,8,32
    84                        	.member	dest,32,18,8,32
    85                        	.member	type,64,16,8,16
    86                        	.member	hwnd,80,129,8,32
    87                        	.member	pheap,112,129,8,32
    88                        	.member	msgTime,144,18,8,32
    89                        	.member	data,176,110,8,0,16
    90                        	.eos
    91                        	.stag	_fx_cmdMessage,304,14
    92                        	.member	src,0,18,8,32
    93                        	.member	dest,32,18,8,32
    94                        	.member	type,64,16,8,16
    95                        	.member	hwnd,80,129,8,32
    96                        	.member	pheap,112,129,8,32
    97                        	.member	msgTime,144,18,8,32
    98                        	.member	cmdCId,176,16,8,16
    99                        	.member	cmdMId,192,16,8,16
   100                        	.member	parameter1,208,18,8,32
   101                        	.member	parameter2,240,18,8,32
   102                        	.member	parameter3,272,18,8,32
   103                        	.eos
   104                        	.stag	_fx_console_ctl,448,15
   105                        	.member	maxCols,0,5,8,16
   106                        	.member	maxRows,16,5,8,16
   107                        	.member	curX,32,5,8,16
   108                        	.member	curY,48,5,8,16
  Sat Jul 10 2021  1:15                                                Page 3


   109                        	.member	fgColor,64,5,8,16
   110                        	.member	bgColor,80,5,8,16
   111                        	.member	mode,96,14,8,8
   112                        	.member	kbBuffer,104,101,8,0,16
   113                        	.member	screenBuffer,360,142,8,32
   114                        	.member	desktopMode,392,14,8,8
   115                        	.member	lastMouseButton,400,5,8,16
   116                        	.member	lastMouseX,416,5,8,16
   117                        	.member	lastMouseY,432,5,8,16
   118                        	.eos
   119                        	.stag	_fx_desktop_ctl,392,16
   120                        	.member	desktopMode,0,14,8,8
   121                        	.member	cursorCtl,8,5,8,16
   122                        	.member	cursorState,24,5,8,16
   123                        	.member	backgroundColor,40,5,8,16
   124                        	.member	foregroundColor,56,5,8,16
   125                        	.member	menuMode,72,5,8,16
   126                        	.member	lastMouseButton,88,5,8,16
   127                        	.member	lastMouseX,104,5,8,16
   128                        	.member	lastMouseY,120,5,8,16
   129                        	.member	currentDiskName,136,142,8,32
   130                        	.member	diskNodes,168,129,8,32
   131                        	.member	titleNodes,200,129,8,32
   132                        	.member	menuNodes,232,129,8,32
   133                        	.member	iconNodes,264,129,8,32
   134                        	.member	windowNodes,296,129,8,32
   135                        	.member	fontNodes,328,129,8,32
   136                        	.member	wndProc,360,138,8,32,3
   137                        	.eos
   138                        	.stag	_fx_process,800,17
   139                        	.member	cbSize,0,5,8,16
   140                        	.member	procId,16,18,8,32
   141                        	.member	parentId,48,18,8,32
   142                        	.member	ctx,80,129,8,32
   143                        	.member	userId,112,16,8,16
   144                        	.member	status,128,16,8,16
   145                        	.member	foregroundActive,144,14,8,8
   146                        	.member	tls,152,1121,8,32,8
   147                        	.member	commandLine,408,142,8,32
   148                        	.member	semaphores,440,138,8,32,3
   149                        	.member	fileHandles,472,138,8,32,3
   150                        	.member	pathList,504,138,8,32,3
   151                        	.member	resources,536,138,8,32,3
   152                        	.member	timerAware,568,14,8,8
   153                        	.member	timerTicks,576,112,8,0,2
   154                        	.member	timerTickCount,608,112,8,0,2
   155                        	.member	kernelError,640,10,8,32,5
   156                        	.member	consoleCtl,672,138,8,32,15
   157                        	.member	desktopCtl,704,138,8,32,16
   158                        	.member	execProc,736,641,8,32
   159                        	.member	startupArgs,768,129,8,32
   160                        	.eos
   161                        	.stag	_fxProcessMessage,112,18
   162                        	.member	src,0,18,8,32
   163                        	.member	dest,32,18,8,32
   164                        	.member	type,64,16,8,16
   165                        	.member	processInfo,80,138,8,32,17
   166                        	.eos
  Sat Jul 10 2021  1:15                                                Page 4


   167                        	.stag	_k_key_state,112,19
   168                        	.member	scanCode,0,14,8,8
   169                        	.member	isShifted,8,14,8,8
   170                        	.member	isAlt,16,14,8,8
   171                        	.member	isExtended,24,14,8,8
   172                        	.member	isCapsLock,32,14,8,8
   173                        	.member	isNumLock,40,14,8,8
   174                        	.member	isScrollLock,48,14,8,8
   175                        	.member	keyChar,56,16,8,16
   176                        	.member	scanTime,72,18,8,32
   177                        	.member	ledStatus,104,14,8,8
   178                        	.eos
   179                        	.stag	_fx_property,384,20
   180                        	.member	name,0,110,8,0,16
   181                        	.member	value,128,110,8,0,32
   182                        	.eos
   183                        	.utag	_24bitPointer,32,21
   184                        	.member	address,0,142,11,32
   185                        	.member	bytes,0,110,11,0,4
   186                        	.eos
   187                        	.stag	_PointStruct,32,22
   188                        	.member	x,0,5,8,16
   189                        	.member	y,16,5,8,16
   190                        	.eos
   191                        	.stag	_RectStruct,112,23
   192                        	.member	x,0,5,8,16
   193                        	.member	y,16,5,8,16
   194                        	.member	z,32,18,8,32
   195                        	.member	width,64,5,8,16
   196                        	.member	height,80,5,8,16
   197                        	.member	attr,96,5,8,16
   198                        	.eos
   199                        	.stag	fake24_,96,24
   200                        	.member	name,0,142,8,32
   201                        	.member	topLeft,32,10,8,32,22
   202                        	.member	bottomRight,64,10,8,32,22
   203                        	.eos
   204                        	.stag	fake25_,112,25
   205                        	.member	x,0,5,8,16
   206                        	.member	y,16,5,8,16
   207                        	.member	z,32,5,8,16
   208                        	.member	width,48,5,8,16
   209                        	.member	height,64,5,8,16
   210                        	.member	data,80,18,8,32
   211                        	.eos
   212                        	.stag	_k_WindowClass,272,26
   213                        	.member	cbSize,0,16,8,16
   214                        	.member	style,16,16,8,16
   215                        	.member	styleEx,32,16,8,16
   216                        	.member	pWndProc,48,654,8,32
   217                        	.member	hInstance,80,129,8,32
   218                        	.member	hIcon,112,129,8,32
   219                        	.member	hCursor,144,129,8,32
   220                        	.member	hbrBackground,176,129,8,32
   221                        	.member	lpszMenuName,208,142,8,32
   222                        	.member	lpszClassName,240,142,8,32
   223                        	.eos
   224                        	.stag	_ClickableRect,152,27
  Sat Jul 10 2021  1:15                                                Page 5


   225                        	.member	area,0,10,8,112,23
   226                        	.member	z,112,18,8,32
   227                        	.member	enabled,144,14,8,8
   228                        	.eos
   229                        	.stag	_NCClickableRect,136,28
   230                        	.member	area,0,10,8,112,23
   231                        	.member	msgType,112,16,8,16
   232                        	.member	enabled,128,14,8,8
   233                        	.eos
   234                        	.stag	_DragData,216,29
   235                        	.member	area,0,10,8,112,23
   236                        	.member	xoffset,112,5,8,16
   237                        	.member	yoffset,128,5,8,16
   238                        	.member	msgType,144,16,8,16
   239                        	.member	ncAction,160,16,8,16
   240                        	.member	isDrag,176,14,8,8
   241                        	.member	isResize,184,14,8,8
   242                        	.member	canDrag,192,14,8,8
   243                        	.member	canDrop,200,14,8,8
   244                        	.member	didDrag,208,14,8,8
   245                        	.eos
   246                        	.stag	_k_WindowStruct,3904,30
   247                        	.member	cbSize,0,16,8,16
   248                        	.member	style,16,18,8,32
   249                        	.member	styleEx,48,18,8,32
   250                        	.member	win_id,80,5,8,16
   251                        	.member	win_x,96,5,8,16
   252                        	.member	win_y,112,5,8,16
   253                        	.member	win_width,128,5,8,16
   254                        	.member	win_height,144,5,8,16
   255                        	.member	win_xoffset,160,5,8,16
   256                        	.member	win_yoffset,176,5,8,16
   257                        	.member	win_cxoffset,192,5,8,16
   258                        	.member	win_cyoffset,208,5,8,16
   259                        	.member	wndRect,224,10,8,112,23
   260                        	.member	clientRect,336,10,8,112,23
   261                        	.member	nonclientGadgets,448,106,8,0,28,16
   262                        	.member	clickable,2624,129,8,32
   263                        	.member	win_title,2656,110,8,0,32
   264                        	.member	Reserved0,2912,16,8,16
   265                        	.member	win_class,2928,110,8,0,16
   266                        	.member	win_class_name,3056,110,8,0,32
   267                        	.member	nBitmapLayer,3312,16,8,16
   268                        	.member	bgRegion,3328,129,8,32
   269                        	.member	procid,3360,18,8,32
   270                        	.member	pWndClass,3392,138,8,32,26
   271                        	.member	pParentWindow,3424,129,8,32
   272                        	.member	hMenu,3456,129,8,32
   273                        	.member	hPointer,3488,129,8,32
   274                        	.member	hBackground,3520,129,8,32
   275                        	.member	pChildWindows,3552,138,8,32,3
   276                        	.member	pChildHitList,3584,138,8,32,3
   277                        	.member	isVisible,3616,14,8,8
   278                        	.member	windowData,3624,129,8,32
   279                        	.member	clientData,3656,1121,8,32,6
   280                        	.member	isClosed,3848,14,8,8
   281                        	.member	isClosing,3856,14,8,8
   282                        	.member	isDesktop,3864,14,8,8
  Sat Jul 10 2021  1:15                                                Page 6


   283                        	.member	clickableNode,3872,138,8,32,2
   284                        	.eos
   285                        	.stag	_k_WindowStructEx,3880,31
   286                        	.member	cbSize,0,16,8,16
   287                        	.member	style,16,18,8,32
   288                        	.member	styleEx,48,18,8,32
   289                        	.member	win_id,80,5,8,16
   290                        	.member	win_x,96,5,8,16
   291                        	.member	win_y,112,5,8,16
   292                        	.member	win_width,128,5,8,16
   293                        	.member	win_height,144,5,8,16
   294                        	.member	win_xoffset,160,5,8,16
   295                        	.member	win_yoffset,176,5,8,16
   296                        	.member	win_cxoffset,192,5,8,16
   297                        	.member	win_cyoffset,208,5,8,16
   298                        	.member	wndRect,224,10,8,112,23
   299                        	.member	clientRect,336,10,8,112,23
   300                        	.member	nonclientGadgets,448,106,8,0,28,16
   301                        	.member	clickable,2624,129,8,32
   302                        	.member	win_title,2656,110,8,0,32
   303                        	.member	Reserved0,2912,16,8,16
   304                        	.member	win_class,2928,110,8,0,16
   305                        	.member	nBitmapLayer,3056,16,8,16
   306                        	.member	procid,3072,18,8,32
   307                        	.member	pWndClass,3104,138,8,32,26
   308                        	.member	pParentWindow,3136,129,8,32
   309                        	.member	hMenu,3168,129,8,32
   310                        	.member	hPointer,3200,129,8,32
   311                        	.member	hBackground,3232,129,8,32
   312                        	.member	pChildWindows,3264,138,8,32,3
   313                        	.member	pChildHitList,3296,138,8,32,3
   314                        	.member	isVisible,3328,14,8,8
   315                        	.member	windowData,3336,129,8,32
   316                        	.member	clientData,3368,1121,8,32,4
   317                        	.member	isClosed,3496,14,8,8
   318                        	.member	hWnd,3504,129,8,32
   319                        	.member	localRect,3536,10,8,112,23
   320                        	.member	globalRect,3648,10,8,112,23
   321                        	.member	clientOffsetRect,3760,10,8,112,23
   322                        	.member	isDesktop,3872,14,8,8
   323                        	.eos
   324                        	.stag	_FontMetric,32,32
   325                        	.member	width,0,5,8,16
   326                        	.member	height,16,5,8,16
   327                        	.eos
   328                        	.stag	_MenuStruct,280,33
   329                        	.member	cx,0,5,8,16
   330                        	.member	cy,16,5,8,16
   331                        	.member	width,32,5,8,16
   332                        	.member	height,48,5,8,16
   333                        	.member	fcolor,64,14,8,8
   334                        	.member	bcolor,72,14,8,8
   335                        	.member	chromeLeft,80,14,8,8
   336                        	.member	chromeRight1,88,14,8,8
   337                        	.member	chromeRight2,96,14,8,8
   338                        	.member	hFont,104,129,8,32
   339                        	.member	itemId,136,16,8,16
   340                        	.member	pCaption,152,142,8,32
  Sat Jul 10 2021  1:15                                                Page 7


   341                        	.member	subMenus,184,138,8,32,3
   342                        	.member	pBackground,216,129,8,32
   343                        	.member	hWndOwner,248,129,8,32
   344                        	.eos
   345                        	.stag	fake34_,160,34
   346                        	.member	menuId,0,16,8,16
   347                        	.member	caption,16,142,8,32
   348                        	.member	rect,48,10,8,112,23
   349                        	.eos
   350                        	.stag	fake35_,5152,35
   351                        	.member	pParent,0,138,8,32,30
   352                        	.member	rect,32,10,8,112,23
   353                        	.member	captions,144,1134,8,32,24
   354                        	.member	chrome,912,110,8,0,24
   355                        	.member	ids,1104,112,8,0,24
   356                        	.member	clickable,1488,106,8,0,27,24
   357                        	.member	selected,5136,16,8,16
   358                        	.eos
   359                        	.stag	_fx_button_t,96,36
   360                        	.member	pCaption,0,142,8,32
   361                        	.member	cCaption,32,16,8,16
   362                        	.member	data,48,129,8,32
   363                        	.member	captionPixelWidth,80,16,8,16
   364                        	.eos
   365                        	.stag	_fx_scrollbar_t,240,37
   366                        	.member	min,0,16,8,16
   367                        	.member	max,16,16,8,16
   368                        	.member	increment,32,16,8,16
   369                        	.member	stopsize,48,16,8,16
   370                        	.member	location,64,5,8,16
   371                        	.member	state,80,5,8,16
   372                        	.member	rectThumb,96,10,8,112,23
   373                        	.member	data,208,129,8,32
   374                        	.eos
   375                        	.stag	_fx_listbox_t,240,38
   376                        	.member	pos,0,5,8,16
   377                        	.member	selected,16,16,8,16
   378                        	.member	offsetX,32,5,8,16
   379                        	.member	offsetY,48,5,8,16
   380                        	.member	inc,64,5,8,16
   381                        	.member	direction,80,5,8,16
   382                        	.member	top,96,5,8,16
   383                        	.member	bottom,112,5,8,16
   384                        	.member	indexTop,128,5,8,16
   385                        	.member	indexBottom,144,5,8,16
   386                        	.member	maxItems,160,16,8,16
   387                        	.member	fontSet,176,142,8,32
   388                        	.member	data,208,129,8,32
   389                        	.eos
   390                        	.stag	_fx_textbox_t,144,39
   391                        	.member	pos,0,5,8,16
   392                        	.member	selected,16,16,8,16
   393                        	.member	offsetX,32,5,8,16
   394                        	.member	offsetY,48,5,8,16
   395                        	.member	isShifted,64,14,8,8
   396                        	.member	cursorState,72,14,8,8
   397                        	.member	fontSet,80,142,8,32
   398                        	.member	data,112,129,8,32
  Sat Jul 10 2021  1:15                                                Page 8


   399                        	.eos
   400                        	.stag	_fx_msgbox_t,144,40
   401                        	.member	pos,0,5,8,16
   402                        	.member	selected,16,16,8,16
   403                        	.member	offsetX,32,5,8,16
   404                        	.member	offsetY,48,5,8,16
   405                        	.member	isShifted,64,14,8,8
   406                        	.member	cursorState,72,14,8,8
   407                        	.member	fontSet,80,142,8,32
   408                        	.member	data,112,129,8,32
   409                        	.eos
   410                        	.stag	_fx_menuAnchor_t,272,41
   411                        	.member	pCaption,0,142,8,32
   412                        	.member	renderLayoutX,32,16,8,16
   413                        	.member	renderLayoutY,48,16,8,16
   414                        	.member	captionPixelWidth,64,16,8,16
   415                        	.member	data,80,129,8,32
   416                        	.member	droppedWindow,112,138,8,32,30
   417                        	.member	bytes,144,110,8,0,16
   418                        	.eos
   419                        	.stag	_SubMenuStruct,64,42
   420                        	.member	caption,0,142,8,32
   421                        	.member	action,32,641,8,32
   422                        	.eos
   423                        	.stag	_SubMenuListStruct,40,43
   424                        	.member	cMenus,0,14,8,8
   425                        	.member	psubmenus,8,9354,8,32,42
   426                        	.eos
   427                        	.stag	_fx_ComBuffer,2080,44
   428                        	.member	cbSize,0,16,8,16
   429                        	.member	cbBuffer,16,16,8,16
   430                        	.member	buffer,32,110,8,0,256
   431                        	.eos
   432                        	.stag	_fx_resource_header,72,45
   433                        	.member	magic,0,110,8,0,4
   434                        	.member	major,32,14,8,8
   435                        	.member	minor,40,14,8,8
   436                        	.member	type,48,14,8,8
   437                        	.member	reserved,56,14,8,8
   438                        	.member	resheaderSize,64,14,8,8
   439                        	.eos
   440                        	.stag	_fx_resource_header_font,144,46
   441                        	.member	title,0,110,8,0,16
   442                        	.member	height,128,14,8,8
   443                        	.member	width,136,14,8,8
   444                        	.eos
   445                        	.line	1010
   446                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",1
   447                        ;#include "fxkernel.h"
   448                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   449                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   450                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   451                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
  Sat Jul 10 2021  1:15                                                Page 9


   452                        	.line	88
   453                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   454                        	.stag	fake47_,32,47
   455                        	.member	quot,0,5,8,16
   456                        	.member	rem,16,5,8,16
   457                        	.eos
   458                        	.stag	fake48_,64,48
   459                        	.member	quot,0,7,8,32
   460                        	.member	rem,32,7,8,32
   461                        	.eos
   462                        	.stag	int_sqrt,32,49
   463                        	.member	sqrt,0,16,8,16
   464                        	.member	frac,16,16,8,16
   465                        	.eos
   466                        	.line	205
   467                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
   468                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   469                        	.line	134
   470                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   471                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   472                        	.line	103
   473                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
   474                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   475                        	.line	1010
   476                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   477                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   478                        	.line	89
   479                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   480                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   481                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   482                        	.line	1010
   483                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",5
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   486                        	.line	1010
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   488                        	.line	72
   489                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",6
   490                        	.line	1960
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",16
  Sat Jul 10 2021  1:15                                                Page 10


   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   493                        	.line	400
   494                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   496                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   497                        	.line	134
   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   499                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   500                        	.line	205
   501                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   503                        	.line	1010
   504                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256u.h",0
   506                        	.line	1960
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",12
   508                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   509                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   510                        	.line	205
   511                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   512                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   513                        	.line	134
   514                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   516                        	.line	1010
   517                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   518                        	.stag	_fx_string,64,50
   519                        	.member	size,0,16,8,16
   520                        	.member	pos,16,5,8,16
   521                        	.member	buffer,32,142,8,32
   522                        	.eos
   523                        	.line	139
   524                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",17
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   526                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   527                        	.line	30
   528                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 11


                    space\FXOSv1\src\fxeventmanager.h",5
   529                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   530                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   531                        	.line	1010
   532                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   533                        	.stag	_fxos_executive_vtable,128,51
   534                        	.member	Init,0,8833,8,32
   535                        	.member	Configure,32,656,8,32
   536                        	.member	Query,64,656,8,32
   537                        	.member	Uninit,96,641,8,32
   538                        	.eos
   539                        	.line	86
   540                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   542                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   543                        	.line	1010
   544                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",11
   545                        	.line	114
   546                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   547                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   548                        	.line	208
   549                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   550                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   551                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   552                        	.line	30
   553                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   554                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   555                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   556                        	.line	30
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   559                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   560                        	.line	35
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   562                        	.stag	UMM_HEAP_INFO_t,256,52
   563                        	.member	totalEntries,0,18,8,32
   564                        	.member	usedEntries,32,18,8,32
   565                        	.member	freeEntries,64,18,8,32
   566                        	.member	totalBlocks,96,18,8,32
  Sat Jul 10 2021  1:15                                                Page 12


   567                        	.member	usedBlocks,128,18,8,32
   568                        	.member	freeBlocks,160,18,8,32
   569                        	.member	maxFreeContiguousBlocks,192,18,8,32
   570                        	.member	blockSize,224,18,8,32
   571                        	.eos
   572                        	.line	199
   573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   574                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   576                        	.line	1010
   577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   578                        	.line	24
   579                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   580                        	.stag	_fx_memory_map,2072,53
   581                        	.member	availableMemory,0,18,8,32
   582                        	.member	valid_segments,32,110,8,0,255
   583                        	.eos
   584                        	.stag	_fx_ipc_port,144,54
   585                        	.member	id,0,18,8,32
   586                        	.member	type,32,14,8,8
   587                        	.member	name,40,138,8,32,50
   588                        	.member	time,72,18,8,32
   589                        	.member	queue,104,138,8,32,4
   590                        	.member	reserved_1,136,14,8,8
   591                        	.eos
   592                        	.line	105
   593                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   594                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   595                        	.line	564
   596                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   597                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   598                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   599                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   600                        	.line	1010
   601                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   602                        	.line	74
   603                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",5
   604                        	.stag	_click_detected,64,55
   605                        	.member	window,0,138,8,32,30
   606                        	.member	handler,32,641,8,32
   607                        	.eos
   608                        	.stag	_current_palette_map,400,56
   609                        	.member	CUR_DESKTOP,0,5,8,16
   610                        	.member	CUR_BACKGROUND,16,5,8,16
   611                        	.member	CUR_FONT,32,5,8,16
  Sat Jul 10 2021  1:15                                                Page 13


   612                        	.member	CUR_SELECTED_FONT,48,5,8,16
   613                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   614                        	.member	CUR_WINDOWFRAME,80,5,8,16
   615                        	.member	CUR_WINDOWBORDER,96,5,8,16
   616                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   617                        	.member	CUR_MENU,128,5,8,16
   618                        	.member	CUR_GADGET,144,5,8,16
   619                        	.member	CUR_COLOR,160,101,8,0,15
   620                        	.eos
   621                        	.line	359
   622                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   623                        	.stag	_fxos_winman_vtable,160,57
   624                        	.member	Events,0,641,8,32
   625                        	.member	ConfigureWindowManager,32,656,8,32
   626                        	.member	ProcessWindowEvent,64,8833,8,32
   627                        	.member	QueryWindowManager,96,656,8,32
   628                        	.member	DoWndProcs,128,641,8,32
   629                        	.eos
   630                        	.stag	fake58_,64,58
   631                        	.member	type,0,16,8,16
   632                        	.member	size,16,16,8,16
   633                        	.member	desktopAction,32,129,8,32
   634                        	.eos
   635                        	.stag	fake59_,96,59
   636                        	.member	type,0,16,8,16
   637                        	.member	caption,16,138,8,32,50
   638                        	.member	buttonType,48,16,8,16
   639                        	.member	x,64,5,8,16
   640                        	.member	y,80,5,8,16
   641                        	.eos
   642                        	.stag	_childMessage_t,64,60
   643                        	.member	msgType,0,16,8,16
   644                        	.member	msgData,16,129,8,32
   645                        	.member	dataSize,48,16,8,16
   646                        	.eos
   647                        	.line	581
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   649                        	.stag	_fx_main_loopvars,16,61
   650                        	.member	dummy,0,5,8,16
   651                        	.eos
   652                        	.stag	_fxMouseMessageData,64,62
   653                        	.member	button1,0,14,8,8
   654                        	.member	button2,8,14,8,8
   655                        	.member	button3,16,14,8,8
   656                        	.member	button4,24,14,8,8
   657                        	.member	x,32,16,8,16
   658                        	.member	y,48,16,8,16
   659                        	.eos
   660                        	.utag	marshalled_data,32,63
   661                        	.member	byteValue,0,14,11,8
   662                        	.member	verbValue,0,110,11,0,2
   663                        	.member	intValue,0,16,11,16
   664                        	.member	longValue,0,18,11,32
   665                        	.member	pointerValue,0,129,11,32
   666                        	.eos
   667                        	.stag	_fx_eventProcess,64,64
  Sat Jul 10 2021  1:15                                                Page 14


   668                        	.member	process,0,138,8,32,17
   669                        	.member	eventProc,32,641,8,32
   670                        	.eos
   671                        	.stag	_mouse_msg_state,184,65
   672                        	.member	lastEvent,0,18,8,32
   673                        	.member	buttonLeftDown,32,14,8,8
   674                        	.member	lastLeftDown,40,18,8,32
   675                        	.member	buttonRightDown,72,14,8,8
   676                        	.member	lastRightDown,80,18,8,32
   677                        	.member	buttonMiddleDown,112,14,8,8
   678                        	.member	lastMiddleDown,120,18,8,32
   679                        	.member	lastX,152,16,8,16
   680                        	.member	lastY,168,16,8,16
   681                        	.eos
   682                        	.stag	_fxos_eventmanager_vtable,192,66
   683                        	.member	EventQueue,0,138,8,32,4
   684                        	.member	Init,32,8833,8,32
   685                        	.member	Run,64,656,8,32
   686                        	.member	Configure,96,656,8,32
   687                        	.member	Query,128,656,8,32
   688                        	.member	Uninit,160,641,8,32
   689                        	.eos
   690                        	.stag	_k_clipboard_data,168,67
   691                        	.member	type,0,14,8,8
   692                        	.member	readable,8,110,8,0,16
   693                        	.member	data,136,129,8,32
   694                        	.eos
   695                        	.line	564
   696                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",18
   697                        	.stag	_fx_spinner_ctx,48,68
   698                        	.member	index,0,5,8,16
   699                        	.member	spinner,16,142,8,32
   700                        	.eos
   701                        	.stag	_fx_console_ctx,1144,69
   702                        	.member	lineBufferIndex,0,5,8,16
   703                        	.member	lineBuffer,16,110,8,0,128
   704                        	.member	isShifted,1040,14,8,8
   705                        	.member	userData,1048,129,8,32
   706                        	.member	screenBuffer,1080,129,8,32
   707                        	.member	Reserved1,1112,129,8,32
   708                        	.eos
   709                        	.stag	_token,64,70
   710                        	.member	type,0,5,8,16
   711                        	.member	depth,16,16,8,16
   712                        	.member	text,32,142,8,32
   713                        	.eos
   714                        	.stag	_command_args,64,71
   715                        	.member	proc,0,656,8,32
   716                        	.member	tokens,32,138,8,32,2
   717                        	.eos
   718                        	.line	208
   719                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",23
   720                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   721                        	.line	139
   722                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 15


                    space\FXOSv1\src\fxos.h",24
   723                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   724                        	.line	114
   725                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",25
   726                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
   727                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
   728                        	.line	298
   729                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
   730                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   731                        	.line	1010
   732                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
   733                        	.stag	fake72_,4504,72
   734                        	.member	fs_type,0,14,8,8
   735                        	.member	pdrv,8,14,8,8
   736                        	.member	n_fats,16,14,8,8
   737                        	.member	wflag,24,14,8,8
   738                        	.member	fsi_flag,32,14,8,8
   739                        	.member	id,40,5,8,16
   740                        	.member	n_rootdir,56,5,8,16
   741                        	.member	csize,72,5,8,16
   742                        	.member	lfnbuf,88,144,8,32
   743                        	.member	last_clst,120,18,8,32
   744                        	.member	free_clst,152,18,8,32
   745                        	.member	n_fatent,184,18,8,32
   746                        	.member	fsize,216,18,8,32
   747                        	.member	volbase,248,18,8,32
   748                        	.member	fatbase,280,18,8,32
   749                        	.member	dirbase,312,18,8,32
   750                        	.member	database,344,18,8,32
   751                        	.member	winsect,376,18,8,32
   752                        	.member	win,408,110,8,0,512
   753                        	.eos
   754                        	.stag	fake73_,128,73
   755                        	.member	fs,0,138,8,32,72
   756                        	.member	id,32,5,8,16
   757                        	.member	attr,48,14,8,8
   758                        	.member	stat,56,14,8,8
   759                        	.member	sclust,64,18,8,32
   760                        	.member	objsize,96,18,8,32
   761                        	.eos
   762                        	.stag	fake74_,4400,74
   763                        	.member	obj,0,10,8,128,73
   764                        	.member	flag,128,14,8,8
   765                        	.member	err,136,14,8,8
   766                        	.member	fptr,144,18,8,32
   767                        	.member	clust,176,18,8,32
   768                        	.member	sect,208,18,8,32
   769                        	.member	dir_sect,240,18,8,32
   770                        	.member	dir_ptr,272,142,8,32
   771                        	.member	buf,304,110,8,0,512
   772                        	.eos
  Sat Jul 10 2021  1:15                                                Page 16


   773                        	.stag	fake75_,416,75
   774                        	.member	obj,0,10,8,128,73
   775                        	.member	dptr,128,18,8,32
   776                        	.member	clust,160,18,8,32
   777                        	.member	sect,192,18,8,32
   778                        	.member	dir,224,142,8,32
   779                        	.member	fn,256,110,8,0,12
   780                        	.member	blk_ofs,352,18,8,32
   781                        	.member	pat,384,142,8,32
   782                        	.eos
   783                        	.stag	fake76_,2224,76
   784                        	.member	fsize,0,18,8,32
   785                        	.member	fdate,32,5,8,16
   786                        	.member	ftime,48,5,8,16
   787                        	.member	fattrib,64,14,8,8
   788                        	.member	altname,72,110,8,0,13
   789                        	.member	fname,176,110,8,0,256
   790                        	.eos
   791                        	.stag	fake77_,80,77
   792                        	.member	fmt,0,14,8,8
   793                        	.member	n_fat,8,14,8,8
   794                        	.member	align,16,16,8,16
   795                        	.member	n_root,32,16,8,16
   796                        	.member	au_size,48,18,8,32
   797                        	.eos
   798                        	.line	429
   799                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",26
   800                        	.line	30
   801                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   802                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   803                        	.line	114
   804                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   805                        	.stag	_fx_api_call_table,8192,78
   806                        	.member	call_table,0,1121,8,32,256
   807                        	.eos
   808                        	.stag	_fx_zero_page,824,79
   809                        	.member	fxos_mouse_byte_0,0,14,8,8
   810                        	.member	fxos_mouse_byte_1,8,14,8,8
   811                        	.member	fxos_mouse_byte_2,16,14,8,8
   812                        	.member	fxos_mouse_byte_t,24,14,8,8
   813                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   814                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   815                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   816                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   817                        	.member	fxos_key_byte_0,64,14,8,8
   818                        	.member	fxos_key_byte_1,72,14,8,8
   819                        	.member	fxos_key_byte_2,80,14,8,8
   820                        	.member	fxos_mouse_ctl,88,14,8,8
   821                        	.member	fxos_mouse_index,96,14,8,8
   822                        	.member	fxos_mouse_status,104,14,8,8
   823                        	.member	fxos_mouse_dbg_1,112,18,8,32
   824                        	.member	fxos_mouse_dbg_2,144,18,8,32
   825                        	.member	fxos_mouse_dbg_3,176,18,8,32
   826                        	.member	fxos_vicky_byte_0,208,14,8,8
  Sat Jul 10 2021  1:15                                                Page 17


   827                        	.member	fxos_vicky_byte_1,216,14,8,8
   828                        	.member	fxos_vicky_byte_2,224,14,8,8
   829                        	.member	VersionMajor,232,16,8,16
   830                        	.member	VersionMinor,248,16,8,16
   831                        	.member	VersionRelease,264,16,8,16
   832                        	.member	topMemory,280,18,8,32
   833                        	.member	bottomMemory,312,18,8,32
   834                        	.member	availableMemory,344,18,8,32
   835                        	.member	availableMemoryK,376,18,8,32
   836                        	.member	availableHeapMemory,408,18,8,32
   837                        	.member	availableHeapMemoryK,440,18,8,32
   838                        	.member	fxos_console_row,472,16,8,16
   839                        	.member	fxos_console_col,488,16,8,16
   840                        	.member	executive,504,129,8,32
   841                        	.member	eventmanager,536,129,8,32
   842                        	.member	devicemanager,568,129,8,32
   843                        	.member	windowmanager,600,129,8,32
   844                        	.member	fxos_kernel_api,632,138,8,32,78
   845                        	.member	fxos_dos_api,664,138,8,32,78
   846                        	.member	fxos_gfx_api,696,138,8,32,78
   847                        	.member	fxos_gui_api,728,138,8,32,78
   848                        	.member	fxos_con_api,760,138,8,32,78
   849                        	.member	fxos_reserved_2_api,792,138,8,32,78
   850                        	.eos
   851                        	.stag	_fx_environment,96,80
   852                        	.member	variables,0,142,8,32
   853                        	.member	reserved1,32,5,8,16
   854                        	.member	reserved2,48,5,8,16
   855                        	.member	reserved3,64,5,8,16
   856                        	.member	reserved4,80,5,8,16
   857                        	.eos
   858                        	.stag	_debug_byte_bits,8,81
   859                        	.member	bit7,0,14,17,1
   860                        	.member	bit6,1,14,17,1
   861                        	.member	bit5,2,14,17,1
   862                        	.member	bit4,3,14,17,1
   863                        	.member	bit3,4,14,17,1
   864                        	.member	bit2,5,14,17,1
   865                        	.member	bit1,6,14,17,1
   866                        	.member	bit0,7,14,17,1
   867                        	.eos
   868                        	.stag	_k_segmentheader,160,82
   869                        	.member	version_major,0,14,8,8
   870                        	.member	version_minor,8,14,8,8
   871                        	.member	length,16,5,8,16
   872                        	.member	segment_start_addr,32,7,8,32
   873                        	.member	segment_end_addr,64,7,8,32
   874                        	.member	segment_size,96,7,8,32
   875                        	.member	main_entry_addr,128,7,8,32
   876                        	.eos
   877                        	.stag	_fx_device_driver,776,83
   878                        	.member	name,0,110,8,0,32
   879                        	.member	version,256,110,8,0,16
   880                        	.member	hmajor,384,110,8,0,8
   881                        	.member	hminor,448,110,8,0,8
   882                        	.member	type,512,14,8,8
   883                        	.member	designation,520,110,8,0,6
   884                        	.member	reserved_1,568,16,8,16
  Sat Jul 10 2021  1:15                                                Page 18


   885                        	.member	f_driver_irq,584,129,8,32
   886                        	.member	driver_context,616,129,8,32
   887                        	.member	f_driver_load,648,129,8,32
   888                        	.member	f_driver_read,680,129,8,32
   889                        	.member	f_driver_write,712,129,8,32
   890                        	.member	f_driver_unload,744,129,8,32
   891                        	.eos
   892                        	.stag	_fx_block_device_driver,808,84
   893                        	.member	name,0,110,8,0,32
   894                        	.member	version,256,110,8,0,16
   895                        	.member	hmajor,384,110,8,0,8
   896                        	.member	hminor,448,110,8,0,8
   897                        	.member	type,512,14,8,8
   898                        	.member	designation,520,110,8,0,6
   899                        	.member	reserved_1,568,16,8,16
   900                        	.member	f_driver_irq,584,129,8,32
   901                        	.member	driver_context,616,129,8,32
   902                        	.member	f_driver_load,648,129,8,32
   903                        	.member	f_driver_read,680,129,8,32
   904                        	.member	f_driver_write,712,129,8,32
   905                        	.member	f_driver_unload,744,129,8,32
   906                        	.member	f_driver_command,776,129,8,32
   907                        	.eos
   908                        	.line	400
   909                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",2
   910                        ;#include "fxfloppy.h"
   911                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.h",0
   912                        	.line	70
   913                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",3
   914                        ;/* Floppy controller driver. Supports only 3.5" H
                    D 1440 KiB disks */
   915                        ;
   916                        ;#define PORT 0xAF13F0
   917                        ;
   918                        ;#define SRA (0xAF13F0)   //Status register A
   919                        ;#define SRB (0xAF13F1)   //Status register B
   920                        ;
   921                        ;#define FDC_DOR (0xAF13F2)   //Digital output reg
                    ister
   922                        ;//#define FDC_TDR (PORT+3)   //Tape drive registe
                    r
   923                        ;#define FDC_MSR (0xAF13F4)   //Main state registe
                    r
   924                        ;#define FDC_DRS (0xAF13F4)   //Datarate select re
                    gister
   925                        ;#define FDC_DATA (0xAF13F5)  //Data FIFO
   926                        ;
   927                        ;#define FDC_DIR (0xAF13F7)   //Digital input regi
                    ster
   928                        ;#define FDC_CCR (0xAF13F7)   //Configuration cont
                    rol register
   929                        ;
   930                        ;/* DOR flags */
   931                        ;#define DOR_IRQ   0x08
   932                        ;#define DOR_RESET 0x04
  Sat Jul 10 2021  1:15                                                Page 19


   933                        ;
   934                        ;/* MSR flags */
   935                        ;#define MSR_RQM  0x80
   936                        ;#define MSR_DIO  0x40
   937                        ;#define MSR_NDMA 0x20
   938                        ;#define MSR_CB   0x10
   939                        ;
   940                        ;#define MSR_ACTD 0x08
   941                        ;#define MSR_ACTC 0x04
   942                        ;#define MSR_ACTB 0x02
   943                        ;#define MSR_ACTA 0x01
   944                        ;
   945                        ;//#define MSR_OK_READ (MSR_RQM | MSR_DIO | MSR_CB
                    )
   946                        ;#define MSR_OK_READ (MSR_RQM | MSR_DIO)
   947                        ;
   948                        ;/* DIR flags */
   949                        ;#define DIR_DC 0x80
   950                        ;
   951                        ;#define SECTOR_SIZE 512
   952                        ;#define SEC_PER_TRACK 18
   953                        ;
   954                        ;#define MS 1000
   955                        ;
   956                        ;#define FL_HLT (8*MS)
   957                        ;#define FL_SPIN_UP (400*MS)
   958                        ;#define FL_SPIN_DN (3000*MS)
   959                        ;#define FL_SEL_D (20*MS)
   960                        ;#define FL_INT_TMT (30000*MS)
   961                        ;
   962                        ;#define CMD_SPECIFY  0x03
   963                        ;#define CMD_WRITE    0x45
   964                        ;#define CMD_READ     0x46
   965                        ;#define CMD_SENSEI   0x08
   966                        ;#define CMD_READID   0x4A
   967                        ;#define CMD_RECAL    0x07
   968                        ;#define CMD_SEEK     0x0F
   969                        ;#define CMD_VERSION  0x10
   970                        ;#define CMD_CONF     0x13
   971                        ;/* Bits of main status register */
   972                        ;#define STATUS_BUSYMASK	0x0F		/* drive
                     busy mask */
   973                        ;#define STATUS_BUSY		0x10		
                    /* FDC busy */
   974                        ;#define STATUS_NON_DMA	0x20		/* 0- DM
                    A mode */
   975                        ;#define STATUS_DIR		0x40		
                    /* 0- cpu->fdc */
   976                        ;#define STATUS_READY	0x80		/* Data 
                    reg ready */
   977                        ;
   978                        ;/* Values for FD_COMMAND */
   979                        ;#define FD_RECALIBRATE		0x07	/* move 
                    to track 0 */
   980                        ;#define FD_SEEK			0x0F	/* seek 
                    track */
   981                        ;#define FD_READ			0xA6	/* read 
                    with MT, SKip deleted */
  Sat Jul 10 2021  1:15                                                Page 20


   982                        ;#define FD_WRITE		0xC5	/* write with MT
                    , MFM */
   983                        ;#define FD_SENSEI		0x08	/* Sense
                     Interrupt Status */
   984                        ;#define FD_SPECIFY		0x03	/* speci
                    fy HUT etc */
   985                        ;#define FD_FORMAT		0x4D	/* forma
                    t one track */
   986                        ;#define FD_VERSION		0x10	/* get v
                    ersion code */
   987                        ;#define FD_CONFIGURE		0x13	/* confi
                    gure FIFO operation */
   988                        ;#define FD_PERPENDICULAR	0x12	/* perpendicular
                     r/w mode */
   989                        ;#define FD_GETSTATUS		0x04	/* read 
                    ST3 */
   990                        ;#define FD_DUMPREGS		0x0E	/* dump 
                    the contents of the fdc regs */
   991                        ;#define FD_READID		0xEA	/* print
                    s the header of a sector */
   992                        ;#define FD_UNLOCK		0x14	/* Fifo 
                    config unlock */
   993                        ;#define FD_LOCK			0x94	/* Fifo 
                    config lock */
   994                        ;#define FD_RSEEK_OUT		0x8f	/* seek 
                    out (i.e. to lower tracks) */
   995                        ;#define FD_RSEEK_IN		0xcf	/* seek 
                    in (i.e. to higher tracks) */
   996                        ;
   997                        ;/* Parameters for a 1.44 3.5" disk */
   998                        ;#define DISK_H1440_SIZE       2880
   999                        ;#define DISK_H1440_SECT       18
  1000                        ;#define DISK_H1440_HEAD       2
  1001                        ;#define DISK_H1440_TRACK      80
  1002                        ;#define DISK_H1440_STRETCH    0
  1003                        ;#define DISK_H1440_GAP        0x1B
  1004                        ;#define DISK_H1440_RATE       0x00
  1005                        ;#define DISK_H1440_SPEC1      0xCF
  1006                        ;#define DISK_H1440_FMT_GAP    0x6C
  1007                        ;
  1008                        ;/* Parameters for a 1.44 3.5" drive */
  1009                        ;#define DRIVE_H1440_MAX_DTR          500
  1010                        ;#define DRIVE_H1440_HLT              16   /* ms *
                    /
  1011                        ;#define DRIVE_H1440_HUT              16   /* ms *
                    /
  1012                        ;#define DRIVE_H1440_SRT              4000 /* us *
                    /
  1013                        ;#define DRIVE_H1440_SPINUP           400  /* ms *
                    /
  1014                        ;#define DRIVE_H1440_SPINDOWN         3000 /* ms *
                    /
  1015                        ;#define DRIVE_H1440_SPINDOWN_OFFSET  10
  1016                        ;#define DRIVE_H1440_SELECT_DELAY     20  /* ms */
  1017                        ;#define DRIVE_H1440_RPS              5
  1018                        ;#define DRIVE_H1440_TRACKS           83
  1019                        ;#define DRIVE_H1440_TIMEOUT          3000 /* ms *
                    /
  Sat Jul 10 2021  1:15                                                Page 21


  1020                        ;#define DRIVE_H1440_INTERLEAVE_SECT  20
  1021                        ;
  1022                        ;/* Floppy drive configuration */
  1023                        ;#define FIFO_DEPTH            10
  1024                        ;#define USE_IMPLIED_SEEK      0
  1025                        ;#define USE_FIFO              1
  1026                        ;#define FIFO_THRESHOLD        10
  1027                        ;#define TRACK_PRECOMPENSATION 0
  1028                        ;
  1029                        ;#define SLOW_FLOPPY 0
  1030                        ;
  1031                        ;#define FD_RESET_DELAY 20 /* microseconds */
  1032                        ;
  1033                        ;
  1034                        ;#define WAIT_COND(c) while (!(c)) {}
  1035                        ;
  1036                        ;BOOL irq_signaled = FALSE;
  1037                        	data
  1038                        	xdef	~~irq_signaled
  1039                        ~~irq_signaled:
  1040 00:0000: 00           	db	$0
  1041 00:0001:              	ends
  1042                        ;
  1043                        ;typedef struct
  1044                        ;{
  1045                        ;	UINT track;
  1046                        ;	int motstate;
  1047                        ;	int dchg;
  1048                        ;} drive_state_t;
  1049                        	.stag	fake85_,48,85
  1050                        	.member	track,0,16,8,16
  1051                        	.member	motstate,16,5,8,16
  1052                        	.member	dchg,32,5,8,16
  1053                        	.eos
  1054                        ;
  1055                        ;//static volatile int irq_signaled = 0;
  1056                        ;static UCHAR reg_dor, reg_sr0, reg_sr1, reg_sr2;
  1057                        ;
  1058                        ;static drive_state_t drives[4];
  1059                        ;static UCHAR cur_drive = 0;
  1060                        	data
  1061                        ~~cur_drive:
  1062 00:0001: 00           	db	$0
  1063 00:0002:              	ends
  1064                        ;static int motoff_timer;
  1065                        ;
  1066                        ;static int status_sz;
  1067                        ;static UCHAR status[7];
  1068                        ;
  1069                        ;UINT  floppybufferIndex = 0;
  1070                        	data
  1071                        	xdef	~~floppybufferIndex
  1072                        ~~floppybufferIndex:
  1073 00:0002: 00 00        	dw	$0
  1074 00:0004:              	ends
  1075                        ;UCHAR floppybuffer[512];
  1076                        ;
  1077                        ;
  Sat Jul 10 2021  1:15                                                Page 22


  1078                        ;static void io_wait(void)
  1079                        ;{
  1080                        	.line	149
  1081                        	.line	150
  1082                        	code
  1083                        	func
  1084                        	.function	150
  1085                        ~~io_wait:
  1086                        	longa	on
  1087                        	longi	on
  1088 00:0000: 3B           	tsc
  1089 00:0001: 38           	sec
  1090 00:0002: E9 00 00     	sbc	#L2
  1091 00:0005: 1B           	tcs
  1092 00:0006: 0B           	phd
  1093 00:0007: 5B           	tcd
  1094                        	.block	150
  1095                        ;	sleep(DRIVE_H1440_SPINUP);
  1096                        	.line	151
  1097 00:0008: F4 90 01     	pea	#<$190
  1098 00:000B: 22 xx xx xx  	jsl	~~sleep
  1099                        ;}
  1100                        	.line	152
  1101                        L5:
  1102 00:000F: 2B           	pld
  1103 00:0010: 3B           	tsc
  1104 00:0011: 18           	clc
  1105 00:0012: 69 00 00     	adc	#L2
  1106 00:0015: 1B           	tcs
  1107 00:0016: 6B           	rtl
  1108                        	.endblock	152
  1109             00000000   L2	equ	0
  1110             00000001   L3	equ	1
  1111                        	ends
  1112                        	efunc
  1113                        	.endfunc	152,1,0
  1114                        	.line	152
  1115                        ;
  1116                        ;static void lba_2_chs(ULONG lba, UINT *track, UIN
                    T *head, UINT *sector)
  1117                        ;{
  1118                        	.line	154
  1119                        	.line	155
  1120                        	code
  1121                        	func
  1122                        	.function	155
  1123                        ~~lba_2_chs:
  1124                        	longa	on
  1125                        	longi	on
  1126 00:0017: 3B           	tsc
  1127 00:0018: 38           	sec
  1128 00:0019: E9 08 00     	sbc	#L6
  1129 00:001C: 1B           	tcs
  1130 00:001D: 0B           	phd
  1131 00:001E: 5B           	tcd
  1132             00000004   lba_0	set	4
  1133             00000008   track_0	set	8
  1134             0000000C   head_0	set	12
  Sat Jul 10 2021  1:15                                                Page 23


  1135             00000010   sector_0	set	16
  1136                        	.block	155
  1137                        ;	*head	 = ((lba % (2 * SEC_PER_TRACK)) / SEC_PE
                    R_TRACK);
  1138                        	.sym	lba,4,18,6,32
  1139                        	.sym	track,8,144,6,32
  1140                        	.sym	head,12,144,6,32
  1141                        	.sym	sector,16,144,6,32
  1142                        	.line	156
  1143 00:001F: F4 00 00     	pea	#^$24
  1144 00:0022: F4 24 00     	pea	#<$24
  1145 00:0025: D4 0E        	pei	<L6+lba_0+2
  1146 00:0027: D4 0C        	pei	<L6+lba_0
  1147                        	xref	~~~lumd
  1148 00:0029: 22 xx xx xx  	jsl	~~~lumd
  1149 00:002D: 85 01        	sta	<R0
  1150 00:002F: 86 03        	stx	<R0+2
  1151 00:0031: F4 00 00     	pea	#^$12
  1152 00:0034: F4 12 00     	pea	#<$12
  1153 00:0037: D4 03        	pei	<R0+2
  1154 00:0039: D4 01        	pei	<R0
  1155                        	xref	~~~ludv
  1156 00:003B: 22 xx xx xx  	jsl	~~~ludv
  1157 00:003F: 85 01        	sta	<R0
  1158 00:0041: 86 03        	stx	<R0+2
  1159 00:0043: A5 01        	lda	<R0
  1160 00:0045: 87 14        	sta	[<L6+head_0]
  1161                        ;	*sector  = ((lba % (2 * SEC_PER_TRACK)) % SEC_PE
                    R_TRACK + 1);
  1162                        	.line	157
  1163 00:0047: F4 00 00     	pea	#^$24
  1164 00:004A: F4 24 00     	pea	#<$24
  1165 00:004D: D4 0E        	pei	<L6+lba_0+2
  1166 00:004F: D4 0C        	pei	<L6+lba_0
  1167                        	xref	~~~lumd
  1168 00:0051: 22 xx xx xx  	jsl	~~~lumd
  1169 00:0055: 85 01        	sta	<R0
  1170 00:0057: 86 03        	stx	<R0+2
  1171 00:0059: F4 00 00     	pea	#^$12
  1172 00:005C: F4 12 00     	pea	#<$12
  1173 00:005F: D4 03        	pei	<R0+2
  1174 00:0061: D4 01        	pei	<R0
  1175                        	xref	~~~lumd
  1176 00:0063: 22 xx xx xx  	jsl	~~~lumd
  1177 00:0067: 85 01        	sta	<R0
  1178 00:0069: 86 03        	stx	<R0+2
  1179 00:006B: 18           	clc
  1180 00:006C: A9 01 00     	lda	#$1
  1181 00:006F: 65 01        	adc	<R0
  1182 00:0071: 85 05        	sta	<R1
  1183 00:0073: A9 00 00     	lda	#$0
  1184 00:0076: 65 03        	adc	<R0+2
  1185 00:0078: 85 07        	sta	<R1+2
  1186 00:007A: A5 05        	lda	<R1
  1187 00:007C: 87 18        	sta	[<L6+sector_0]
  1188                        ;	*track 	 = (lba / (2 * SEC_PER_TRACK));
  1189                        	.line	158
  1190 00:007E: F4 00 00     	pea	#^$24
  Sat Jul 10 2021  1:15                                                Page 24


  1191 00:0081: F4 24 00     	pea	#<$24
  1192 00:0084: D4 0E        	pei	<L6+lba_0+2
  1193 00:0086: D4 0C        	pei	<L6+lba_0
  1194                        	xref	~~~ludv
  1195 00:0088: 22 xx xx xx  	jsl	~~~ludv
  1196 00:008C: 85 01        	sta	<R0
  1197 00:008E: 86 03        	stx	<R0+2
  1198 00:0090: A5 01        	lda	<R0
  1199 00:0092: 87 10        	sta	[<L6+track_0]
  1200                        ;}
  1201                        	.line	159
  1202                        L9:
  1203 00:0094: A5 0A        	lda	<L6+2
  1204 00:0096: 85 1A        	sta	<L6+2+16
  1205 00:0098: A5 09        	lda	<L6+1
  1206 00:009A: 85 19        	sta	<L6+1+16
  1207 00:009C: 2B           	pld
  1208 00:009D: 3B           	tsc
  1209 00:009E: 18           	clc
  1210 00:009F: 69 18 00     	adc	#L6+16
  1211 00:00A2: 1B           	tcs
  1212 00:00A3: 6B           	rtl
  1213                        	.endblock	159
  1214             00000008   L6	equ	8
  1215             00000009   L7	equ	9
  1216                        	ends
  1217                        	efunc
  1218                        	.endfunc	159,9,8
  1219                        	.line	159
  1220                        ;
  1221                        ;int sendbyte(UCHAR d)
  1222                        ;{
  1223                        	.line	161
  1224                        	.line	162
  1225                        	code
  1226                        	xdef	~~sendbyte
  1227                        	func
  1228                        	.function	162
  1229                        ~~sendbyte:
  1230                        	longa	on
  1231                        	longi	on
  1232 00:00A4: 3B           	tsc
  1233 00:00A5: 38           	sec
  1234 00:00A6: E9 03 00     	sbc	#L10
  1235 00:00A9: 1B           	tcs
  1236 00:00AA: 0B           	phd
  1237 00:00AB: 5B           	tcd
  1238             00000004   d_0	set	4
  1239                        	.block	162
  1240                        ;	int i;
  1241                        ;
  1242                        ;	UCHAR msr;
  1243                        ;
  1244                        ;	for (i = 0; i < 0x0fff; i++)
  1245             00000000   i_1	set	0
  1246             00000002   msr_1	set	2
  1247                        	.sym	i,0,5,1,16
  1248                        	.sym	msr,2,14,1,8
  Sat Jul 10 2021  1:15                                                Page 25


  1249                        	.sym	d,4,14,6,8
  1250                        	.line	167
  1251 00:00AC: 64 01        	stz	<L11+i_1
  1252                        L10003:
  1253                        ;	{
  1254                        	.line	168
  1255                        ;		msr = inportb(FDC_MSR);
  1256                        	.line	169
  1257 00:00AE: E2 20        	sep	#$20
  1258                        	longa	off
  1259 00:00B0: AF F4 13 AF  	lda	>11473908
  1260 00:00B4: 85 03        	sta	<L11+msr_1
  1261 00:00B6: C2 20        	rep	#$20
  1262                        	longa	on
  1263                        ;		//if ((msr & MSR_RQM) && !(msr & MSR_DIO
                    ))
  1264                        ;		k_debug_bits("sendbyte:",msr);
  1265                        	.line	171
  1266 00:00B8: D4 03        	pei	<L11+msr_1
  1267 00:00BA: F4 xx xx     	pea	#^L1
  1268 00:00BD: F4 xx xx     	pea	#<L1
  1269 00:00C0: 22 xx xx xx  	jsl	~~k_debug_bits
  1270                        ;		//if ((msr & (STATUS_READY|STATUS_DIR|ST
                    ATUS_NON_DMA)))
  1271                        ;		if ((msr & MSR_RQM) && !(msr & MSR_DIO))
  1272                        	.line	173
  1273                        ;		{
  1274 00:00C4: E2 20        	sep	#$20
  1275                        	longa	off
  1276 00:00C6: A5 03        	lda	<L11+msr_1
  1277 00:00C8: 29 80        	and	#<$80
  1278 00:00CA: C2 20        	rep	#$20
  1279                        	longa	on
  1280 00:00CC: D0 03        	bne	L13
  1281 00:00CE: 82 2C 00     	brl	L10004
  1282                        L13:
  1283 00:00D1: E2 20        	sep	#$20
  1284                        	longa	off
  1285 00:00D3: A5 03        	lda	<L11+msr_1
  1286 00:00D5: 29 40        	and	#<$40
  1287 00:00D7: C2 20        	rep	#$20
  1288                        	longa	on
  1289 00:00D9: F0 03        	beq	L14
  1290 00:00DB: 82 1F 00     	brl	L10004
  1291                        L14:
  1292                        	.line	174
  1293                        ;			outportb(FDC_DATA, d);
  1294                        	.line	175
  1295 00:00DE: E2 20        	sep	#$20
  1296                        	longa	off
  1297 00:00E0: A5 07        	lda	<L10+d_0
  1298 00:00E2: 8F F5 13 AF  	sta	>11473909
  1299 00:00E6: C2 20        	rep	#$20
  1300                        	longa	on
  1301                        ;			return 0;
  1302                        	.line	176
  1303 00:00E8: A9 00 00     	lda	#$0
  1304                        L15:
  Sat Jul 10 2021  1:15                                                Page 26


  1305 00:00EB: A8           	tay
  1306 00:00EC: A5 05        	lda	<L10+2
  1307 00:00EE: 85 07        	sta	<L10+2+2
  1308 00:00F0: A5 04        	lda	<L10+1
  1309 00:00F2: 85 06        	sta	<L10+1+2
  1310 00:00F4: 2B           	pld
  1311 00:00F5: 3B           	tsc
  1312 00:00F6: 18           	clc
  1313 00:00F7: 69 05 00     	adc	#L10+2
  1314 00:00FA: 1B           	tcs
  1315 00:00FB: 98           	tya
  1316 00:00FC: 6B           	rtl
  1317                        ;		}
  1318                        	.line	177
  1319                        ;		io_wait();
  1320                        L10004:
  1321                        	.line	178
  1322 00:00FD: 22 xx xx xx  	jsl	~~io_wait
  1323                        ;	}
  1324                        	.line	179
  1325                        L10001:
  1326 00:0101: E6 01        	inc	<L11+i_1
  1327 00:0103: 38           	sec
  1328 00:0104: A5 01        	lda	<L11+i_1
  1329 00:0106: E9 FF 0F     	sbc	#<$fff
  1330 00:0109: 70 03        	bvs	L16
  1331 00:010B: 49 00 80     	eor	#$8000
  1332                        L16:
  1333 00:010E: 30 03        	bmi	L17
  1334 00:0110: 82 9B FF     	brl	L10003
  1335                        L17:
  1336                        L10002:
  1337                        ;	k_debug_string("sendbyte::NOSEND\r\n");
  1338                        	.line	180
  1339 00:0113: F4 xx xx     	pea	#^L1+10
  1340 00:0116: F4 xx xx     	pea	#<L1+10
  1341 00:0119: 22 xx xx xx  	jsl	~~k_debug_string
  1342                        ;	return -1; /* timeout */
  1343                        	.line	181
  1344 00:011D: A9 FF FF     	lda	#$ffff
  1345 00:0120: 82 C8 FF     	brl	L15
  1346                        ;}
  1347                        	.line	182
  1348                        	.endblock	182
  1349             00000003   L10	equ	3
  1350             00000001   L11	equ	1
  1351                        	ends
  1352                        	efunc
  1353                        	.endfunc	182,1,3
  1354                        	.line	182
  1355                        	data
  1356                        L1:
  1357 00:0004: 73 65 6E 64  	db	$73,$65,$6E,$64,$62,$79,$74,$65,$3A,$00,
                    $73,$65,$6E,$64,$62
       00:0008: 62 79 74 65 
       00:000C: 3A 00 73 65 
       00:0010: 6E 64 62 
  1358 00:0013: 79 74 65 3A  	db	$79,$74,$65,$3A,$3A,$4E,$4F,$53,$45,$4E,
  Sat Jul 10 2021  1:15                                                Page 27


                    $44,$0D,$0A,$00
       00:0017: 3A 4E 4F 53 
       00:001B: 45 4E 44 0D 
       00:001F: 0A 00 
  1359 00:0021:              	ends
  1360                        ;
  1361                        ;int getbyte()
  1362                        ;{
  1363                        	.line	184
  1364                        	.line	185
  1365                        	code
  1366                        	xdef	~~getbyte
  1367                        	func
  1368                        	.function	185
  1369                        ~~getbyte:
  1370                        	longa	on
  1371                        	longi	on
  1372 00:0123: 3B           	tsc
  1373 00:0124: 38           	sec
  1374 00:0125: E9 07 00     	sbc	#L19
  1375 00:0128: 1B           	tcs
  1376 00:0129: 0B           	phd
  1377 00:012A: 5B           	tcd
  1378                        	.block	185
  1379                        ;	int i ;
  1380                        ;
  1381                        ;	UCHAR msr;
  1382                        ;
  1383                        ;	for (i = 0; i < 0x0FF; i++)
  1384             00000000   i_1	set	0
  1385             00000002   msr_1	set	2
  1386                        	.sym	i,0,5,1,16
  1387                        	.sym	msr,2,14,1,8
  1388                        	.line	190
  1389 00:012B: 64 05        	stz	<L20+i_1
  1390                        L10007:
  1391                        ;	{
  1392                        	.line	191
  1393                        ;		msr = inportb(FDC_MSR);
  1394                        	.line	192
  1395 00:012D: E2 20        	sep	#$20
  1396                        	longa	off
  1397 00:012F: AF F4 13 AF  	lda	>11473908
  1398 00:0133: 85 07        	sta	<L20+msr_1
  1399 00:0135: C2 20        	rep	#$20
  1400                        	longa	on
  1401                        ;		if ((msr & MSR_OK_READ) == MSR_OK_READ)
  1402                        	.line	193
  1403                        ;		{
  1404 00:0137: A5 07        	lda	<L20+msr_1
  1405 00:0139: 29 C0 00     	and	#<$c0
  1406 00:013C: 85 01        	sta	<R0
  1407 00:013E: A5 01        	lda	<R0
  1408 00:0140: C9 C0 00     	cmp	#<$c0
  1409 00:0143: F0 03        	beq	L22
  1410 00:0145: 82 11 00     	brl	L10008
  1411                        L22:
  1412                        	.line	194
  Sat Jul 10 2021  1:15                                                Page 28


  1413                        ;			return inportb(FDC_DATA);
  1414                        	.line	195
  1415 00:0148: AF F5 13 AF  	lda	>11473909
  1416 00:014C: 29 FF 00     	and	#$ff
  1417                        L23:
  1418 00:014F: A8           	tay
  1419 00:0150: 2B           	pld
  1420 00:0151: 3B           	tsc
  1421 00:0152: 18           	clc
  1422 00:0153: 69 07 00     	adc	#L19
  1423 00:0156: 1B           	tcs
  1424 00:0157: 98           	tya
  1425 00:0158: 6B           	rtl
  1426                        ;		}
  1427                        	.line	196
  1428                        ;		io_wait();
  1429                        L10008:
  1430                        	.line	197
  1431 00:0159: 22 xx xx xx  	jsl	~~io_wait
  1432                        ;	}
  1433                        	.line	198
  1434                        L10005:
  1435 00:015D: E6 05        	inc	<L20+i_1
  1436 00:015F: 38           	sec
  1437 00:0160: A5 05        	lda	<L20+i_1
  1438 00:0162: E9 FF 00     	sbc	#<$ff
  1439 00:0165: 70 03        	bvs	L24
  1440 00:0167: 49 00 80     	eor	#$8000
  1441                        L24:
  1442 00:016A: 30 03        	bmi	L25
  1443 00:016C: 82 BE FF     	brl	L10007
  1444                        L25:
  1445                        L10006:
  1446                        ;	return -1; /* timeout */
  1447                        	.line	199
  1448 00:016F: A9 FF FF     	lda	#$ffff
  1449 00:0172: 82 DA FF     	brl	L23
  1450                        ;}
  1451                        	.line	200
  1452                        	.endblock	200
  1453             00000007   L19	equ	7
  1454             00000005   L20	equ	5
  1455                        	ends
  1456                        	efunc
  1457                        	.endfunc	200,5,7
  1458                        	.line	200
  1459                        ;
  1460                        ;static int fdc_waitint()
  1461                        ;{
  1462                        	.line	202
  1463                        	.line	203
  1464                        	code
  1465                        	func
  1466                        	.function	203
  1467                        ~~fdc_waitint:
  1468                        	longa	on
  1469                        	longi	on
  1470 00:0175: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 29


  1471 00:0176: 38           	sec
  1472 00:0177: E9 02 00     	sbc	#L26
  1473 00:017A: 1B           	tcs
  1474 00:017B: 0B           	phd
  1475 00:017C: 5B           	tcd
  1476                        	.block	203
  1477                        ;	UINT tmout = 0x0FFF;
  1478                        ;
  1479                        ;	/*
  1480                        ;	clock_t s = clock();
  1481                        ;	int tmout;
  1482                        ;	WAIT_COND(!irq_signaled && (tmout = (clock() - s
                     < FL_INT_TMT)));
  1483                        ;	if (!tmout)
  1484                        ;		return -1;
  1485                        ;		*/
  1486                        ;	//sleep(300);
  1487                        ;
  1488                        ;	k_debug_integer("*** fdc_waitint::irq_signaled:"
                    ,irq_signaled);
  1489             00000000   tmout_1	set	0
  1490                        	.sym	tmout,0,16,1,16
  1491 00:017D: A9 FF 0F     	lda	#$fff
  1492 00:0180: 85 01        	sta	<L27+tmout_1
  1493                        	.line	215
  1494 00:0182: AD xx xx     	lda	|~~irq_signaled
  1495 00:0185: 29 FF 00     	and	#$ff
  1496 00:0188: 48           	pha
  1497 00:0189: F4 xx xx     	pea	#^L18
  1498 00:018C: F4 xx xx     	pea	#<L18
  1499 00:018F: 22 xx xx xx  	jsl	~~k_debug_integer
  1500                        ;	while(!irq_signaled)
  1501                        	.line	216
  1502                        L10009:
  1503 00:0193: AD xx xx     	lda	|~~irq_signaled
  1504 00:0196: 29 FF 00     	and	#$ff
  1505 00:0199: F0 03        	beq	L29
  1506 00:019B: 82 0F 00     	brl	L10010
  1507                        L29:
  1508                        ;	{
  1509                        	.line	217
  1510                        ;		//k_debug_integer("*** fdc_waitint::irq_
                    signaled:",irq_signaled);
  1511                        ;		tmout--;
  1512                        	.line	219
  1513 00:019E: C6 01        	dec	<L27+tmout_1
  1514                        ;		if(tmout < 1)
  1515                        	.line	220
  1516                        ;			break;
  1517 00:01A0: A5 01        	lda	<L27+tmout_1
  1518 00:01A2: C9 01 00     	cmp	#<$1
  1519 00:01A5: B0 03        	bcs	L30
  1520 00:01A7: 82 03 00     	brl	L10010
  1521                        L30:
  1522                        ;		//sleep(10);
  1523                        ;	}
  1524                        	.line	223
  1525 00:01AA: 82 E6 FF     	brl	L10009
  Sat Jul 10 2021  1:15                                                Page 30


  1526                        L10010:
  1527                        ;	k_debug_integer("*** fdc_waitint::irq_signaled:"
                    ,irq_signaled);
  1528                        	.line	224
  1529 00:01AD: AD xx xx     	lda	|~~irq_signaled
  1530 00:01B0: 29 FF 00     	and	#$ff
  1531 00:01B3: 48           	pha
  1532 00:01B4: F4 xx xx     	pea	#^L18+31
  1533 00:01B7: F4 xx xx     	pea	#<L18+31
  1534 00:01BA: 22 xx xx xx  	jsl	~~k_debug_integer
  1535                        ;	irq_signaled = FALSE;
  1536                        	.line	225
  1537 00:01BE: E2 20        	sep	#$20
  1538                        	longa	off
  1539 00:01C0: 9C xx xx     	stz	|~~irq_signaled
  1540 00:01C3: C2 20        	rep	#$20
  1541                        	longa	on
  1542                        ;	if (!tmout)
  1543                        	.line	226
  1544                        ;	{
  1545 00:01C5: A5 01        	lda	<L27+tmout_1
  1546 00:01C7: F0 03        	beq	L31
  1547 00:01C9: 82 17 00     	brl	L10011
  1548                        L31:
  1549                        	.line	227
  1550                        ;		k_debug_string("*** fdc_waitint::timeout
                    \r\n");
  1551                        	.line	228
  1552 00:01CC: F4 xx xx     	pea	#^L18+62
  1553 00:01CF: F4 xx xx     	pea	#<L18+62
  1554 00:01D2: 22 xx xx xx  	jsl	~~k_debug_string
  1555                        ;		return -1;
  1556                        	.line	229
  1557 00:01D6: A9 FF FF     	lda	#$ffff
  1558                        L32:
  1559 00:01D9: A8           	tay
  1560 00:01DA: 2B           	pld
  1561 00:01DB: 3B           	tsc
  1562 00:01DC: 18           	clc
  1563 00:01DD: 69 02 00     	adc	#L26
  1564 00:01E0: 1B           	tcs
  1565 00:01E1: 98           	tya
  1566 00:01E2: 6B           	rtl
  1567                        ;	}
  1568                        	.line	230
  1569                        ;	return 0;
  1570                        L10011:
  1571                        	.line	231
  1572 00:01E3: A9 00 00     	lda	#$0
  1573 00:01E6: 82 F0 FF     	brl	L32
  1574                        ;}
  1575                        	.line	232
  1576                        	.endblock	232
  1577             00000002   L26	equ	2
  1578             00000001   L27	equ	1
  1579                        	ends
  1580                        	efunc
  1581                        	.endfunc	232,1,2
  Sat Jul 10 2021  1:15                                                Page 31


  1582                        	.line	232
  1583                        	data
  1584                        L18:
  1585 00:0021: 2A 2A 2A 20  	db	$2A,$2A,$2A,$20,$66,$64,$63,$5F,$77,$61,
                    $69,$74,$69,$6E,$74
       00:0025: 66 64 63 5F 
       00:0029: 77 61 69 74 
       00:002D: 69 6E 74 
  1586 00:0030: 3A 3A 69 72  	db	$3A,$3A,$69,$72,$71,$5F,$73,$69,$67,$6E,
                    $61,$6C,$65,$64,$3A
       00:0034: 71 5F 73 69 
       00:0038: 67 6E 61 6C 
       00:003C: 65 64 3A 
  1587 00:003F: 00 2A 2A 2A  	db	$00,$2A,$2A,$2A,$20,$66,$64,$63,$5F,$77,
                    $61,$69,$74,$69,$6E
       00:0043: 20 66 64 63 
       00:0047: 5F 77 61 69 
       00:004B: 74 69 6E 
  1588 00:004E: 74 3A 3A 69  	db	$74,$3A,$3A,$69,$72,$71,$5F,$73,$69,$67,
                    $6E,$61,$6C,$65,$64
       00:0052: 72 71 5F 73 
       00:0056: 69 67 6E 61 
       00:005A: 6C 65 64 
  1589 00:005D: 3A 00 2A 2A  	db	$3A,$00,$2A,$2A,$2A,$20,$66,$64,$63,$5F,
                    $77,$61,$69,$74,$69
       00:0061: 2A 20 66 64 
       00:0065: 63 5F 77 61 
       00:0069: 69 74 69 
  1590 00:006C: 6E 74 3A 3A  	db	$6E,$74,$3A,$3A,$74,$69,$6D,$65,$6F,$75,
                    $74,$0D,$0A,$00
       00:0070: 74 69 6D 65 
       00:0074: 6F 75 74 0D 
       00:0078: 0A 00 
  1591 00:007A:              	ends
  1592                        ;
  1593                        ;static int fdc_wait(int sensei)
  1594                        ;{
  1595                        	.line	234
  1596                        	.line	235
  1597                        	code
  1598                        	func
  1599                        	.function	235
  1600                        ~~fdc_wait:
  1601                        	longa	on
  1602                        	longi	on
  1603 00:01E9: 3B           	tsc
  1604 00:01EA: 38           	sec
  1605 00:01EB: E9 06 00     	sbc	#L34
  1606 00:01EE: 1B           	tcs
  1607 00:01EF: 0B           	phd
  1608 00:01F0: 5B           	tcd
  1609             00000004   sensei_0	set	4
  1610                        	.block	235
  1611                        ;	int tmout = fdc_waitint();
  1612                        ;
  1613                        ;	status_sz = 0;
  1614             00000000   tmout_1	set	0
  1615                        	.sym	tmout,0,5,1,16
  Sat Jul 10 2021  1:15                                                Page 32


  1616                        	.sym	sensei,4,5,6,16
  1617 00:01F1: 22 xx xx xx  	jsl	~~fdc_waitint
  1618 00:01F5: 85 05        	sta	<L35+tmout_1
  1619                        	.line	238
  1620 00:01F7: 9C xx xx     	stz	|~~status_sz
  1621                        ;	while (status_sz < 7 && (inportb(FDC_MSR) & MSR_
                    CB))
  1622                        	.line	239
  1623                        L10012:
  1624 00:01FA: 38           	sec
  1625 00:01FB: AD xx xx     	lda	|~~status_sz
  1626 00:01FE: E9 07 00     	sbc	#<$7
  1627 00:0201: 70 03        	bvs	L37
  1628 00:0203: 49 00 80     	eor	#$8000
  1629                        L37:
  1630 00:0206: 10 03        	bpl	L38
  1631 00:0208: 82 27 00     	brl	L10013
  1632                        L38:
  1633 00:020B: E2 20        	sep	#$20
  1634                        	longa	off
  1635 00:020D: AF F4 13 AF  	lda	>11473908
  1636 00:0211: 29 10        	and	#<$10
  1637 00:0213: C2 20        	rep	#$20
  1638                        	longa	on
  1639 00:0215: D0 03        	bne	L39
  1640 00:0217: 82 18 00     	brl	L10013
  1641                        L39:
  1642                        ;		status[status_sz++] = getbyte();
  1643                        	.line	240
  1644 00:021A: AD xx xx     	lda	|~~status_sz
  1645 00:021D: 85 01        	sta	<R0
  1646 00:021F: EE xx xx     	inc	|~~status_sz
  1647 00:0222: 22 xx xx xx  	jsl	~~getbyte
  1648 00:0226: E2 20        	sep	#$20
  1649                        	longa	off
  1650 00:0228: A6 01        	ldx	<R0
  1651 00:022A: 9D xx xx     	sta	|~~status,X
  1652 00:022D: C2 20        	rep	#$20
  1653                        	longa	on
  1654 00:022F: 82 C8 FF     	brl	L10012
  1655                        L10013:
  1656                        ;
  1657                        ;	if (sensei)
  1658                        	.line	242
  1659                        ;	{
  1660 00:0232: A5 0A        	lda	<L34+sensei_0
  1661 00:0234: D0 03        	bne	L40
  1662 00:0236: 82 59 00     	brl	L10014
  1663                        L40:
  1664                        	.line	243
  1665                        ;		sendbyte(CMD_SENSEI);
  1666                        	.line	244
  1667 00:0239: F4 08 00     	pea	#<$8
  1668 00:023C: 22 xx xx xx  	jsl	~~sendbyte
  1669                        ;		reg_sr0 = getbyte();
  1670                        	.line	245
  1671 00:0240: 22 xx xx xx  	jsl	~~getbyte
  1672 00:0244: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 33


  1673                        	longa	off
  1674 00:0246: 8D xx xx     	sta	|~~reg_sr0
  1675 00:0249: C2 20        	rep	#$20
  1676                        	longa	on
  1677                        ;		k_debug_hex("fdc_wait:reg_sr0:",reg_sr0)
                    ;
  1678                        	.line	246
  1679 00:024B: AD xx xx     	lda	|~~reg_sr0
  1680 00:024E: 48           	pha
  1681 00:024F: F4 xx xx     	pea	#^L33
  1682 00:0252: F4 xx xx     	pea	#<L33
  1683 00:0255: 22 xx xx xx  	jsl	~~k_debug_hex
  1684                        ;		drives[cur_drive].track = getbyte();
  1685                        	.line	247
  1686 00:0259: AD xx xx     	lda	|~~cur_drive
  1687 00:025C: 29 FF 00     	and	#$ff
  1688 00:025F: 85 01        	sta	<R0
  1689 00:0261: A5 01        	lda	<R0
  1690 00:0263: 0A           	asl	A
  1691 00:0264: 65 01        	adc	<R0
  1692 00:0266: 0A           	asl	A
  1693 00:0267: 85 01        	sta	<R0
  1694 00:0269: 22 xx xx xx  	jsl	~~getbyte
  1695 00:026D: A6 01        	ldx	<R0
  1696 00:026F: 9D xx xx     	sta	|~~drives,X
  1697                        ;		k_debug_hex("fdc_wait:track:",drives[cur
                    _drive].track);
  1698                        	.line	248
  1699 00:0272: AD xx xx     	lda	|~~cur_drive
  1700 00:0275: 29 FF 00     	and	#$ff
  1701 00:0278: 85 01        	sta	<R0
  1702 00:027A: A5 01        	lda	<R0
  1703 00:027C: 0A           	asl	A
  1704 00:027D: 65 01        	adc	<R0
  1705 00:027F: 0A           	asl	A
  1706 00:0280: 85 01        	sta	<R0
  1707 00:0282: A6 01        	ldx	<R0
  1708 00:0284: BD xx xx     	lda	|~~drives,X
  1709 00:0287: 48           	pha
  1710 00:0288: F4 xx xx     	pea	#^L33+18
  1711 00:028B: F4 xx xx     	pea	#<L33+18
  1712 00:028E: 22 xx xx xx  	jsl	~~k_debug_hex
  1713                        ;	}
  1714                        	.line	249
  1715                        ;
  1716                        ;	irq_signaled = 0;
  1717                        L10014:
  1718                        	.line	251
  1719 00:0292: E2 20        	sep	#$20
  1720                        	longa	off
  1721 00:0294: 9C xx xx     	stz	|~~irq_signaled
  1722 00:0297: C2 20        	rep	#$20
  1723                        	longa	on
  1724                        ;	if (tmout)
  1725                        	.line	252
  1726                        ;	{
  1727 00:0299: A5 05        	lda	<L35+tmout_1
  1728 00:029B: D0 03        	bne	L41
  Sat Jul 10 2021  1:15                                                Page 34


  1729 00:029D: 82 3C 00     	brl	L10015
  1730                        L41:
  1731                        	.line	253
  1732                        ;		if (inportb(FDC_DIR) & DIR_DC)
  1733                        	.line	254
  1734                        ;			drives[cur_drive].dchg = 1;
  1735 00:02A0: E2 20        	sep	#$20
  1736                        	longa	off
  1737 00:02A2: AF F7 13 AF  	lda	>11473911
  1738 00:02A6: 29 80        	and	#<$80
  1739 00:02A8: C2 20        	rep	#$20
  1740                        	longa	on
  1741 00:02AA: D0 03        	bne	L42
  1742 00:02AC: 82 18 00     	brl	L10016
  1743                        L42:
  1744                        	.line	255
  1745 00:02AF: AD xx xx     	lda	|~~cur_drive
  1746 00:02B2: 29 FF 00     	and	#$ff
  1747 00:02B5: 85 01        	sta	<R0
  1748 00:02B7: A5 01        	lda	<R0
  1749 00:02B9: 0A           	asl	A
  1750 00:02BA: 65 01        	adc	<R0
  1751 00:02BC: 0A           	asl	A
  1752 00:02BD: 85 01        	sta	<R0
  1753 00:02BF: A9 01 00     	lda	#$1
  1754 00:02C2: A6 01        	ldx	<R0
  1755 00:02C4: 9D xx xx     	sta	|~~drives+4,X
  1756                        ;		return 1;
  1757                        L10016:
  1758                        	.line	256
  1759 00:02C7: A9 01 00     	lda	#$1
  1760                        L43:
  1761 00:02CA: A8           	tay
  1762 00:02CB: A5 08        	lda	<L34+2
  1763 00:02CD: 85 0A        	sta	<L34+2+2
  1764 00:02CF: A5 07        	lda	<L34+1
  1765 00:02D1: 85 09        	sta	<L34+1+2
  1766 00:02D3: 2B           	pld
  1767 00:02D4: 3B           	tsc
  1768 00:02D5: 18           	clc
  1769 00:02D6: 69 08 00     	adc	#L34+2
  1770 00:02D9: 1B           	tcs
  1771 00:02DA: 98           	tya
  1772 00:02DB: 6B           	rtl
  1773                        ;	}
  1774                        	.line	257
  1775                        ;	else
  1776                        L10015:
  1777                        ;		return 0;
  1778                        	.line	259
  1779 00:02DC: A9 00 00     	lda	#$0
  1780 00:02DF: 82 E8 FF     	brl	L43
  1781                        ;}
  1782                        	.line	260
  1783                        	.endblock	260
  1784             00000006   L34	equ	6
  1785             00000005   L35	equ	5
  1786                        	ends
  Sat Jul 10 2021  1:15                                                Page 35


  1787                        	efunc
  1788                        	.endfunc	260,5,6
  1789                        	.line	260
  1790                        	data
  1791                        L33:
  1792 00:007A: 66 64 63 5F  	db	$66,$64,$63,$5F,$77,$61,$69,$74,$3A,$72,
                    $65,$67,$5F,$73,$72
       00:007E: 77 61 69 74 
       00:0082: 3A 72 65 67 
       00:0086: 5F 73 72 
  1793 00:0089: 30 3A 00 66  	db	$30,$3A,$00,$66,$64,$63,$5F,$77,$61,$69,
                    $74,$3A,$74,$72,$61
       00:008D: 64 63 5F 77 
       00:0091: 61 69 74 3A 
       00:0095: 74 72 61 
  1794 00:0098: 63 6B 3A 00  	db	$63,$6B,$3A,$00
  1795 00:009C:              	ends
  1796                        ;
  1797                        ;static void motor_on()
  1798                        ;{
  1799                        	.line	262
  1800                        	.line	263
  1801                        	code
  1802                        	func
  1803                        	.function	263
  1804                        ~~motor_on:
  1805                        	longa	on
  1806                        	longi	on
  1807 00:02E2: 3B           	tsc
  1808 00:02E3: 38           	sec
  1809 00:02E4: E9 04 00     	sbc	#L45
  1810 00:02E7: 1B           	tcs
  1811 00:02E8: 0B           	phd
  1812 00:02E9: 5B           	tcd
  1813                        	.block	263
  1814                        ;	k_debug_string("motor_on\r\n");
  1815                        	.line	264
  1816 00:02EA: F4 xx xx     	pea	#^L44
  1817 00:02ED: F4 xx xx     	pea	#<L44
  1818 00:02F0: 22 xx xx xx  	jsl	~~k_debug_string
  1819                        ;	motoff_timer = 0;
  1820                        	.line	265
  1821 00:02F4: 9C xx xx     	stz	|~~motoff_timer
  1822                        ;	//if (drives[cur_drive].motstate == 0)
  1823                        ;	if(1)
  1824                        	.line	267
  1825                        ;	{
  1826                        	.line	268
  1827                        ;		reg_dor |= (1 << (cur_drive + 4));
  1828                        	.line	269
  1829 00:02F7: E2 20        	sep	#$20
  1830                        	longa	off
  1831 00:02F9: 18           	clc
  1832 00:02FA: A9 04        	lda	#$4
  1833 00:02FC: 6D xx xx     	adc	|~~cur_drive
  1834 00:02FF: C2 20        	rep	#$20
  1835                        	longa	on
  1836 00:0301: 48           	pha
  Sat Jul 10 2021  1:15                                                Page 36


  1837 00:0302: A9 01 00     	lda	#$1
  1838 00:0305: FA           	plx
  1839                        	xref	~~~casl
  1840 00:0306: 22 xx xx xx  	jsl	~~~casl
  1841 00:030A: E2 20        	sep	#$20
  1842                        	longa	off
  1843 00:030C: 85 01        	sta	<R0
  1844 00:030E: C2 20        	rep	#$20
  1845                        	longa	on
  1846 00:0310: E2 20        	sep	#$20
  1847                        	longa	off
  1848 00:0312: A5 01        	lda	<R0
  1849 00:0314: 0C xx xx     	tsb	|~~reg_dor
  1850 00:0317: C2 20        	rep	#$20
  1851                        	longa	on
  1852                        ;		reg_dor |= cur_drive;
  1853                        	.line	270
  1854 00:0319: E2 20        	sep	#$20
  1855                        	longa	off
  1856 00:031B: AD xx xx     	lda	|~~cur_drive
  1857 00:031E: 0C xx xx     	tsb	|~~reg_dor
  1858 00:0321: C2 20        	rep	#$20
  1859                        	longa	on
  1860                        ;		outportb(FDC_DOR, reg_dor);
  1861                        	.line	271
  1862 00:0323: E2 20        	sep	#$20
  1863                        	longa	off
  1864 00:0325: AD xx xx     	lda	|~~reg_dor
  1865 00:0328: 8F F2 13 AF  	sta	>11473906
  1866 00:032C: C2 20        	rep	#$20
  1867                        	longa	on
  1868                        ;		drives[cur_drive].motstate = 1;
  1869                        	.line	272
  1870 00:032E: AD xx xx     	lda	|~~cur_drive
  1871 00:0331: 29 FF 00     	and	#$ff
  1872 00:0334: 85 01        	sta	<R0
  1873 00:0336: A5 01        	lda	<R0
  1874 00:0338: 0A           	asl	A
  1875 00:0339: 65 01        	adc	<R0
  1876 00:033B: 0A           	asl	A
  1877 00:033C: 85 01        	sta	<R0
  1878 00:033E: A9 01 00     	lda	#$1
  1879 00:0341: A6 01        	ldx	<R0
  1880 00:0343: 9D xx xx     	sta	|~~drives+2,X
  1881                        ;		//usleep(FL_SPIN_UP);
  1882                        ;		sleep(DRIVE_H1440_SPINUP);
  1883                        	.line	274
  1884 00:0346: F4 90 01     	pea	#<$190
  1885 00:0349: 22 xx xx xx  	jsl	~~sleep
  1886                        ;	}
  1887                        	.line	275
  1888                        ;}
  1889                        L10017:
  1890                        	.line	276
  1891                        L48:
  1892 00:034D: 2B           	pld
  1893 00:034E: 3B           	tsc
  1894 00:034F: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 37


  1895 00:0350: 69 04 00     	adc	#L45
  1896 00:0353: 1B           	tcs
  1897 00:0354: 6B           	rtl
  1898                        	.endblock	276
  1899             00000004   L45	equ	4
  1900             00000005   L46	equ	5
  1901                        	ends
  1902                        	efunc
  1903                        	.endfunc	276,5,4
  1904                        	.line	276
  1905                        	data
  1906                        L44:
  1907 00:009C: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$72,$5F,$6F,$6E,$0D,$0A,
                    $00
       00:00A0: 72 5F 6F 6E 
       00:00A4: 0D 0A 00 
  1908 00:00A7:              	ends
  1909                        ;
  1910                        ;static void motor_off()
  1911                        ;{
  1912                        	.line	278
  1913                        	.line	279
  1914                        	code
  1915                        	func
  1916                        	.function	279
  1917                        ~~motor_off:
  1918                        	longa	on
  1919                        	longi	on
  1920 00:0355: 3B           	tsc
  1921 00:0356: 38           	sec
  1922 00:0357: E9 04 00     	sbc	#L50
  1923 00:035A: 1B           	tcs
  1924 00:035B: 0B           	phd
  1925 00:035C: 5B           	tcd
  1926                        	.block	279
  1927                        ;	k_debug_string("motor_off\r\n");
  1928                        	.line	280
  1929 00:035D: F4 xx xx     	pea	#^L49
  1930 00:0360: F4 xx xx     	pea	#<L49
  1931 00:0363: 22 xx xx xx  	jsl	~~k_debug_string
  1932                        ;	if (drives[cur_drive].motstate)
  1933                        	.line	281
  1934                        ;	{
  1935 00:0367: AD xx xx     	lda	|~~cur_drive
  1936 00:036A: 29 FF 00     	and	#$ff
  1937 00:036D: 85 01        	sta	<R0
  1938 00:036F: A5 01        	lda	<R0
  1939 00:0371: 0A           	asl	A
  1940 00:0372: 65 01        	adc	<R0
  1941 00:0374: 0A           	asl	A
  1942 00:0375: 85 01        	sta	<R0
  1943 00:0377: A6 01        	ldx	<R0
  1944 00:0379: BD xx xx     	lda	|~~drives+2,X
  1945 00:037C: D0 03        	bne	L53
  1946 00:037E: 82 06 00     	brl	L10018
  1947                        L53:
  1948                        	.line	282
  1949                        ;		//motoff_timer = 2000;
  Sat Jul 10 2021  1:15                                                Page 38


  1950                        ;		motoff_timer = 200;
  1951                        	.line	284
  1952 00:0381: A9 C8 00     	lda	#$c8
  1953 00:0384: 8D xx xx     	sta	|~~motoff_timer
  1954                        ;	}
  1955                        	.line	285
  1956                        ;	// TODO
  1957                        ;	//motoff_timer = 1;
  1958                        ;	//floppy_timer();
  1959                        ;}
  1960                        L10018:
  1961                        	.line	289
  1962                        L54:
  1963 00:0387: 2B           	pld
  1964 00:0388: 3B           	tsc
  1965 00:0389: 18           	clc
  1966 00:038A: 69 04 00     	adc	#L50
  1967 00:038D: 1B           	tcs
  1968 00:038E: 6B           	rtl
  1969                        	.endblock	289
  1970             00000004   L50	equ	4
  1971             00000005   L51	equ	5
  1972                        	ends
  1973                        	efunc
  1974                        	.endfunc	289,5,4
  1975                        	.line	289
  1976                        	data
  1977                        L49:
  1978 00:00A7: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$72,$5F,$6F,$66,$66,$0D,
                    $0A,$00
       00:00AB: 72 5F 6F 66 
       00:00AF: 66 0D 0A 00 
  1979 00:00B3:              	ends
  1980                        ;
  1981                        ;static void fdc_configure()
  1982                        ;{
  1983                        	.line	291
  1984                        	.line	292
  1985                        	code
  1986                        	func
  1987                        	.function	292
  1988                        ~~fdc_configure:
  1989                        	longa	on
  1990                        	longi	on
  1991 00:038F: 3B           	tsc
  1992 00:0390: 38           	sec
  1993 00:0391: E9 00 00     	sbc	#L56
  1994 00:0394: 1B           	tcs
  1995 00:0395: 0B           	phd
  1996 00:0396: 5B           	tcd
  1997                        	.block	292
  1998                        ;	sendbyte(CMD_CONF);
  1999                        	.line	293
  2000 00:0397: F4 13 00     	pea	#<$13
  2001 00:039A: 22 xx xx xx  	jsl	~~sendbyte
  2002                        ;	sendbyte(0x00);
  2003                        	.line	294
  2004 00:039E: F4 00 00     	pea	#<$0
  Sat Jul 10 2021  1:15                                                Page 39


  2005 00:03A1: 22 xx xx xx  	jsl	~~sendbyte
  2006                        ;	sendbyte(0x47); /* threshold = 8, FIFO on, polli
                    ng on, implied seek on */
  2007                        	.line	295
  2008 00:03A5: F4 47 00     	pea	#<$47
  2009 00:03A8: 22 xx xx xx  	jsl	~~sendbyte
  2010                        ;	//sendbyte(0x4F); /* threshold = 16, FIFO off, p
                    olling on, implied seek on */
  2011                        ;	//sendbyte(0x7F); /* threshold = 16, FIFO on, po
                    lling on, implied seek on */
  2012                        ;	//sendbyte(0x7F);
  2013                        ;	//sendbyte(0x40);
  2014                        ;	sendbyte(0x00);
  2015                        	.line	300
  2016 00:03AC: F4 00 00     	pea	#<$0
  2017 00:03AF: 22 xx xx xx  	jsl	~~sendbyte
  2018                        ;	//sendbyte(0x2F);
  2019                        ;}
  2020                        	.line	302
  2021                        L59:
  2022 00:03B3: 2B           	pld
  2023 00:03B4: 3B           	tsc
  2024 00:03B5: 18           	clc
  2025 00:03B6: 69 00 00     	adc	#L56
  2026 00:03B9: 1B           	tcs
  2027 00:03BA: 6B           	rtl
  2028                        	.endblock	302
  2029             00000000   L56	equ	0
  2030             00000001   L57	equ	1
  2031                        	ends
  2032                        	efunc
  2033                        	.endfunc	302,1,0
  2034                        	.line	302
  2035                        ;
  2036                        ;/**
  2037                        ;// Register Address
  2038                        ;#define FDD_STATUS_A           ((LPCHAR)0xAF13F0)
                     // Read     use in with PS2 and PS2 mode 30 noly
  2039                        ;#define FDD_STATUS_B           ((LPCHAR)0xAF13F1)
                     // Read
  2040                        ;#define FDD_DIGITAL_OUTPUT     ((LPCHAR)0xAF13F2)
                     // Read/Write
  2041                        ;#define FDD_TAPE_DRIVER        ((LPCHAR)0xAF13F3)
                     // Read/Write
  2042                        ;#define FDD_MAIN_STATUS        ((LPCHAR)0xAF13F4)
                     // Read
  2043                        ;#define FDD_DATA_RATE_SELECT   ((LPCHAR)0xAF13F4)
                     // Write
  2044                        ;#define FDD_FIFO               ((LPCHAR)0xAF13F5)
                     // Read/Write
  2045                        ;//RESERVED_REG          0xAF13F6 // Reserved
  2046                        ;#define FDD_DIGITAL_INPUT      ((LPCHAR)0xAF13F7)
                     // Read
  2047                        ;#define FDD_CONFIG_CTRL        ((LPCHAR)0xAF13F7)
                     // Write
  2048                        ; */
  2049                        ;
  2050                        ;static void fdc_reset()
  Sat Jul 10 2021  1:15                                                Page 40


  2051                        ;{
  2052                        	.line	318
  2053                        	.line	319
  2054                        	code
  2055                        	func
  2056                        	.function	319
  2057                        ~~fdc_reset:
  2058                        	longa	on
  2059                        	longi	on
  2060 00:03BB: 3B           	tsc
  2061 00:03BC: 38           	sec
  2062 00:03BD: E9 08 00     	sbc	#L60
  2063 00:03C0: 1B           	tcs
  2064 00:03C1: 0B           	phd
  2065 00:03C2: 5B           	tcd
  2066                        	.block	319
  2067                        ;	UCHAR st0, cyl;
  2068                        ;	int i;
  2069                        ;	/* Send reset */
  2070                        ;	outportb(FDD_DIGITAL_OUTPUT, 0x00);
  2071             00000000   st0_1	set	0
  2072             00000001   cyl_1	set	1
  2073             00000002   i_1	set	2
  2074                        	.sym	st0,0,14,1,8
  2075                        	.sym	cyl,1,14,1,8
  2076                        	.sym	i,2,5,1,16
  2077                        	.line	323
  2078 00:03C3: E2 20        	sep	#$20
  2079                        	longa	off
  2080 00:03C5: A9 00        	lda	#$0
  2081 00:03C7: 8F F2 13 AF  	sta	>11473906
  2082 00:03CB: C2 20        	rep	#$20
  2083                        	longa	on
  2084                        ;	io_wait();
  2085                        	.line	324
  2086 00:03CD: 22 xx xx xx  	jsl	~~io_wait
  2087                        ;	io_wait();
  2088                        	.line	325
  2089 00:03D1: 22 xx xx xx  	jsl	~~io_wait
  2090                        ;	io_wait();
  2091                        	.line	326
  2092 00:03D5: 22 xx xx xx  	jsl	~~io_wait
  2093                        ;	io_wait();
  2094                        	.line	327
  2095 00:03D9: 22 xx xx xx  	jsl	~~io_wait
  2096                        ;
  2097                        ;	//reg_dor = DOR_IRQ | DOR_RESET;
  2098                        ;	reg_dor = DOR_RESET;
  2099                        	.line	330
  2100 00:03DD: E2 20        	sep	#$20
  2101                        	longa	off
  2102 00:03DF: A9 04        	lda	#$4
  2103 00:03E1: 8D xx xx     	sta	|~~reg_dor
  2104 00:03E4: C2 20        	rep	#$20
  2105                        	longa	on
  2106                        ;	outportb(FDD_DIGITAL_OUTPUT, reg_dor);
  2107                        	.line	331
  2108 00:03E6: E2 20        	sep	#$20
  Sat Jul 10 2021  1:15                                                Page 41


  2109                        	longa	off
  2110 00:03E8: AD xx xx     	lda	|~~reg_dor
  2111 00:03EB: 8F F2 13 AF  	sta	>11473906
  2112 00:03EF: C2 20        	rep	#$20
  2113                        	longa	on
  2114                        ;	io_wait();
  2115                        	.line	332
  2116 00:03F1: 22 xx xx xx  	jsl	~~io_wait
  2117                        ;
  2118                        ;	outportb(FDD_DIGITAL_OUTPUT, reg_dor | 0x04);
  2119                        	.line	334
  2120 00:03F5: E2 20        	sep	#$20
  2121                        	longa	off
  2122 00:03F7: AD xx xx     	lda	|~~reg_dor
  2123 00:03FA: 09 04        	ora	#<$4
  2124 00:03FC: 8F F2 13 AF  	sta	>11473906
  2125 00:0400: C2 20        	rep	#$20
  2126                        	longa	on
  2127                        ;	io_wait();
  2128                        	.line	335
  2129 00:0402: 22 xx xx xx  	jsl	~~io_wait
  2130                        ;
  2131                        ;	outportb(FDD_DATA_RATE_SELECT, 0x02);
  2132                        	.line	337
  2133 00:0406: E2 20        	sep	#$20
  2134                        	longa	off
  2135 00:0408: A9 02        	lda	#$2
  2136 00:040A: 8F F4 13 AF  	sta	>11473908
  2137 00:040E: C2 20        	rep	#$20
  2138                        	longa	on
  2139                        ;	io_wait();
  2140                        	.line	338
  2141 00:0410: 22 xx xx xx  	jsl	~~io_wait
  2142                        ;
  2143                        ;	k_debug_string("fdc_reset\r\n");
  2144                        	.line	340
  2145 00:0414: F4 xx xx     	pea	#^L55
  2146 00:0417: F4 xx xx     	pea	#<L55
  2147 00:041A: 22 xx xx xx  	jsl	~~k_debug_string
  2148                        ;	/* Wait for IRQ or timeout */
  2149                        ;	/*
  2150                        ;	clock_t s = clock();
  2151                        ;	WAIT_COND(!irq_signaled && (clock() - s < FL_INT
                    _TMT));
  2152                        ;	if (!irq_signaled)
  2153                        ;	{
  2154                        ;	}
  2155                        ;	*/
  2156                        ;
  2157                        ;	//sleep(1000);
  2158                        ;
  2159                        ;	//fdc_waitint();
  2160                        ;
  2161                        ;	//if (fdc_waitint())
  2162                        ;	//	return;
  2163                        ;	/* Hmph... Timeout */
  2164                        ;
  2165                        ;	for ( i = 0; i < 5; i++)
  Sat Jul 10 2021  1:15                                                Page 42


  2166                        	.line	358
  2167 00:041E: 64 07        	stz	<L61+i_1
  2168                        L10021:
  2169                        ;	{
  2170                        	.line	359
  2171                        ;		sendbyte(CMD_SENSEI);
  2172                        	.line	360
  2173 00:0420: F4 08 00     	pea	#<$8
  2174 00:0423: 22 xx xx xx  	jsl	~~sendbyte
  2175                        ;		reg_sr0 = getbyte();
  2176                        	.line	361
  2177 00:0427: 22 xx xx xx  	jsl	~~getbyte
  2178 00:042B: E2 20        	sep	#$20
  2179                        	longa	off
  2180 00:042D: 8D xx xx     	sta	|~~reg_sr0
  2181 00:0430: C2 20        	rep	#$20
  2182                        	longa	on
  2183                        ;		k_debug_bits("fdc_reset:reg_sr0:",reg_sr
                    0);
  2184                        	.line	362
  2185 00:0432: AD xx xx     	lda	|~~reg_sr0
  2186 00:0435: 48           	pha
  2187 00:0436: F4 xx xx     	pea	#^L55+12
  2188 00:0439: F4 xx xx     	pea	#<L55+12
  2189 00:043C: 22 xx xx xx  	jsl	~~k_debug_bits
  2190                        ;		drives[i].track = getbyte();
  2191                        	.line	363
  2192 00:0440: A5 07        	lda	<L61+i_1
  2193 00:0442: 0A           	asl	A
  2194 00:0443: 65 07        	adc	<L61+i_1
  2195 00:0445: 0A           	asl	A
  2196 00:0446: 85 01        	sta	<R0
  2197 00:0448: 22 xx xx xx  	jsl	~~getbyte
  2198 00:044C: A6 01        	ldx	<R0
  2199 00:044E: 9D xx xx     	sta	|~~drives,X
  2200                        ;		k_debug_bits("fdc_reset:track:",drives[i
                    ].track);
  2201                        	.line	364
  2202 00:0451: A5 07        	lda	<L61+i_1
  2203 00:0453: 0A           	asl	A
  2204 00:0454: 65 07        	adc	<L61+i_1
  2205 00:0456: 0A           	asl	A
  2206 00:0457: 85 01        	sta	<R0
  2207 00:0459: A6 01        	ldx	<R0
  2208 00:045B: BD xx xx     	lda	|~~drives,X
  2209 00:045E: 48           	pha
  2210 00:045F: F4 xx xx     	pea	#^L55+31
  2211 00:0462: F4 xx xx     	pea	#<L55+31
  2212 00:0465: 22 xx xx xx  	jsl	~~k_debug_bits
  2213                        ;		sleep(30);
  2214                        	.line	365
  2215 00:0469: F4 1E 00     	pea	#<$1e
  2216 00:046C: 22 xx xx xx  	jsl	~~sleep
  2217                        ;	}
  2218                        	.line	366
  2219                        L10019:
  2220 00:0470: E6 07        	inc	<L61+i_1
  2221 00:0472: A5 07        	lda	<L61+i_1
  Sat Jul 10 2021  1:15                                                Page 43


  2222 00:0474: 30 07        	bmi	L63
  2223 00:0476: 3A           	dea
  2224 00:0477: 3A           	dea
  2225 00:0478: 3A           	dea
  2226 00:0479: 3A           	dea
  2227 00:047A: 3A           	dea
  2228 00:047B: 10 03        	bpl	L64
  2229                        L63:
  2230 00:047D: 82 A0 FF     	brl	L10021
  2231                        L64:
  2232                        L10020:
  2233                        ;
  2234                        ;	irq_signaled = 0;
  2235                        	.line	368
  2236 00:0480: E2 20        	sep	#$20
  2237                        	longa	off
  2238 00:0482: 9C xx xx     	stz	|~~irq_signaled
  2239 00:0485: C2 20        	rep	#$20
  2240                        	longa	on
  2241                        ;
  2242                        ;	fdc_configure();
  2243                        	.line	370
  2244 00:0487: 22 xx xx xx  	jsl	~~fdc_configure
  2245                        ;	//floppy_specify();
  2246                        ;
  2247                        ;	//motor_off();
  2248                        ;}
  2249                        	.line	374
  2250                        L65:
  2251 00:048B: 2B           	pld
  2252 00:048C: 3B           	tsc
  2253 00:048D: 18           	clc
  2254 00:048E: 69 08 00     	adc	#L60
  2255 00:0491: 1B           	tcs
  2256 00:0492: 6B           	rtl
  2257                        	.endblock	374
  2258             00000008   L60	equ	8
  2259             00000005   L61	equ	5
  2260                        	ends
  2261                        	efunc
  2262                        	.endfunc	374,5,8
  2263                        	.line	374
  2264                        	data
  2265                        L55:
  2266 00:00B3: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$0D,
                    $0A,$00,$66,$64,$63
       00:00B7: 72 65 73 65 
       00:00BB: 74 0D 0A 00 
       00:00BF: 66 64 63 
  2267 00:00C2: 5F 72 65 73  	db	$5F,$72,$65,$73,$65,$74,$3A,$72,$65,$67,
                    $5F,$73,$72,$30,$3A
       00:00C6: 65 74 3A 72 
       00:00CA: 65 67 5F 73 
       00:00CE: 72 30 3A 
  2268 00:00D1: 00 66 64 63  	db	$00,$66,$64,$63,$5F,$72,$65,$73,$65,$74,
                    $3A,$74,$72,$61,$63
       00:00D5: 5F 72 65 73 
       00:00D9: 65 74 3A 74 
  Sat Jul 10 2021  1:15                                                Page 44


       00:00DD: 72 61 63 
  2269 00:00E0: 6B 3A 00     	db	$6B,$3A,$00
  2270 00:00E3:              	ends
  2271                        ;
  2272                        ;//! configure drive floppy__drive_data(3, 16, 240
                    , FALSE);
  2273                        ;void floppy_drive_data(UINT stepr, UINT loadt, UI
                    NT unloadt,BOOL dma)
  2274                        ;{
  2275                        	.line	377
  2276                        	.line	378
  2277                        	code
  2278                        	xdef	~~floppy_drive_data
  2279                        	func
  2280                        	.function	378
  2281                        ~~floppy_drive_data:
  2282                        	longa	on
  2283                        	longi	on
  2284 00:0493: 3B           	tsc
  2285 00:0494: 38           	sec
  2286 00:0495: E9 02 00     	sbc	#L67
  2287 00:0498: 1B           	tcs
  2288 00:0499: 0B           	phd
  2289 00:049A: 5B           	tcd
  2290             00000004   stepr_0	set	4
  2291             00000006   loadt_0	set	6
  2292             00000008   unloadt_0	set	8
  2293             0000000A   dma_0	set	10
  2294                        	.block	378
  2295                        ;
  2296                        ;	UINT data = 0;
  2297                        ;
  2298                        ;	k_debug_string("floppy_drive_data\r\n");
  2299             00000000   data_1	set	0
  2300                        	.sym	data,0,16,1,16
  2301                        	.sym	stepr,4,16,6,16
  2302                        	.sym	loadt,6,16,6,16
  2303                        	.sym	unloadt,8,16,6,16
  2304                        	.sym	dma,10,14,6,8
  2305 00:049B: 64 01        	stz	<L68+data_1
  2306                        	.line	382
  2307 00:049D: F4 xx xx     	pea	#^L66
  2308 00:04A0: F4 xx xx     	pea	#<L66
  2309 00:04A3: 22 xx xx xx  	jsl	~~k_debug_string
  2310                        ;
  2311                        ;	//! send command
  2312                        ;	sendbyte(CMD_SPECIFY);
  2313                        	.line	385
  2314 00:04A7: F4 03 00     	pea	#<$3
  2315 00:04AA: 22 xx xx xx  	jsl	~~sendbyte
  2316                        ;//	data = ((stepr & 0xf) << 4) | (unloadt &
                     0xf);
  2317                        ;	data = 0x00;
  2318                        	.line	387
  2319 00:04AE: 64 01        	stz	<L68+data_1
  2320                        ;	sendbyte(data);
  2321                        	.line	388
  2322 00:04B0: D4 01        	pei	<L68+data_1
  Sat Jul 10 2021  1:15                                                Page 45


  2323 00:04B2: 22 xx xx xx  	jsl	~~sendbyte
  2324                        ;	//data = (((loadt) << 1) |  (1));
  2325                        ;//	data = ((0x05 << 1) | (1));
  2326                        ;	//data = 0x00; // enable DMA
  2327                        ;	data = 0x01; // disable DMA
  2328                        	.line	392
  2329 00:04B6: A9 01 00     	lda	#$1
  2330 00:04B9: 85 01        	sta	<L68+data_1
  2331                        ;	sendbyte(data);
  2332                        	.line	393
  2333 00:04BB: D4 01        	pei	<L68+data_1
  2334 00:04BD: 22 xx xx xx  	jsl	~~sendbyte
  2335                        ;}
  2336                        	.line	394
  2337                        L70:
  2338 00:04C1: A5 04        	lda	<L67+2
  2339 00:04C3: 85 0C        	sta	<L67+2+8
  2340 00:04C5: A5 03        	lda	<L67+1
  2341 00:04C7: 85 0B        	sta	<L67+1+8
  2342 00:04C9: 2B           	pld
  2343 00:04CA: 3B           	tsc
  2344 00:04CB: 18           	clc
  2345 00:04CC: 69 0A 00     	adc	#L67+8
  2346 00:04CF: 1B           	tcs
  2347 00:04D0: 6B           	rtl
  2348                        	.endblock	394
  2349             00000002   L67	equ	2
  2350             00000001   L68	equ	1
  2351                        	ends
  2352                        	efunc
  2353                        	.endfunc	394,1,2
  2354                        	.line	394
  2355                        	data
  2356                        L66:
  2357 00:00E3: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$64,$72,$69,
                    $76,$65,$5F,$64,$61
       00:00E7: 70 79 5F 64 
       00:00EB: 72 69 76 65 
       00:00EF: 5F 64 61 
  2358 00:00F2: 74 61 0D 0A  	db	$74,$61,$0D,$0A,$00
       00:00F6: 00 
  2359 00:00F7:              	ends
  2360                        ;
  2361                        ;
  2362                        ;static void floppy_specify()
  2363                        ;{
  2364                        	.line	397
  2365                        	.line	398
  2366                        	code
  2367                        	func
  2368                        	.function	398
  2369                        ~~floppy_specify:
  2370                        	longa	on
  2371                        	longi	on
  2372 00:04D1: 3B           	tsc
  2373 00:04D2: 38           	sec
  2374 00:04D3: E9 00 00     	sbc	#L72
  2375 00:04D6: 1B           	tcs
  Sat Jul 10 2021  1:15                                                Page 46


  2376 00:04D7: 0B           	phd
  2377 00:04D8: 5B           	tcd
  2378                        	.block	398
  2379                        ;	sendbyte(CMD_SPECIFY);
  2380                        	.line	399
  2381 00:04D9: F4 03 00     	pea	#<$3
  2382 00:04DC: 22 xx xx xx  	jsl	~~sendbyte
  2383                        ;	sendbyte((0x08 << 4) | (0));
  2384                        	.line	400
  2385 00:04E0: F4 80 00     	pea	#<$80
  2386 00:04E3: 22 xx xx xx  	jsl	~~sendbyte
  2387                        ;	//sendbyte((0x05 << 1) | (1));
  2388                        ;	//sendbyte(0xDF);
  2389                        ;	sendbyte(0x01);
  2390                        	.line	403
  2391 00:04E7: F4 01 00     	pea	#<$1
  2392 00:04EA: 22 xx xx xx  	jsl	~~sendbyte
  2393                        ;}
  2394                        	.line	404
  2395                        L75:
  2396 00:04EE: 2B           	pld
  2397 00:04EF: 3B           	tsc
  2398 00:04F0: 18           	clc
  2399 00:04F1: 69 00 00     	adc	#L72
  2400 00:04F4: 1B           	tcs
  2401 00:04F5: 6B           	rtl
  2402                        	.endblock	404
  2403             00000000   L72	equ	0
  2404             00000001   L73	equ	1
  2405                        	ends
  2406                        	efunc
  2407                        	.endfunc	404,1,0
  2408                        	.line	404
  2409                        ;
  2410                        ;static int floppy_select(int drive)
  2411                        ;{
  2412                        	.line	406
  2413                        	.line	407
  2414                        	code
  2415                        	func
  2416                        	.function	407
  2417                        ~~floppy_select:
  2418                        	longa	on
  2419                        	longi	on
  2420 00:04F6: 3B           	tsc
  2421 00:04F7: 38           	sec
  2422 00:04F8: E9 0C 00     	sbc	#L76
  2423 00:04FB: 1B           	tcs
  2424 00:04FC: 0B           	phd
  2425 00:04FD: 5B           	tcd
  2426             00000004   drive_0	set	4
  2427                        	.block	407
  2428                        ;	if (drive < 0 || drive > 3)
  2429                        	.sym	drive,4,5,6,16
  2430                        	.line	408
  2431                        ;	{
  2432 00:04FE: A5 10        	lda	<L76+drive_0
  2433 00:0500: 10 03        	bpl	L80
  Sat Jul 10 2021  1:15                                                Page 47


  2434 00:0502: 82 10 00     	brl	L79
  2435                        L80:
  2436 00:0505: 38           	sec
  2437 00:0506: A9 03 00     	lda	#$3
  2438 00:0509: E5 10        	sbc	<L76+drive_0
  2439 00:050B: 70 03        	bvs	L81
  2440 00:050D: 49 00 80     	eor	#$8000
  2441                        L81:
  2442 00:0510: 10 03        	bpl	L82
  2443 00:0512: 82 15 00     	brl	L10022
  2444                        L82:
  2445                        L79:
  2446                        	.line	409
  2447                        ;		return -1;
  2448                        	.line	410
  2449 00:0515: A9 FF FF     	lda	#$ffff
  2450                        L83:
  2451 00:0518: A8           	tay
  2452 00:0519: A5 0E        	lda	<L76+2
  2453 00:051B: 85 10        	sta	<L76+2+2
  2454 00:051D: A5 0D        	lda	<L76+1
  2455 00:051F: 85 0F        	sta	<L76+1+2
  2456 00:0521: 2B           	pld
  2457 00:0522: 3B           	tsc
  2458 00:0523: 18           	clc
  2459 00:0524: 69 0E 00     	adc	#L76+2
  2460 00:0527: 1B           	tcs
  2461 00:0528: 98           	tya
  2462 00:0529: 6B           	rtl
  2463                        ;	}
  2464                        	.line	411
  2465                        ;
  2466                        ;	outportb(FDC_CCR, 0x00);
  2467                        L10022:
  2468                        	.line	413
  2469 00:052A: E2 20        	sep	#$20
  2470                        	longa	off
  2471 00:052C: A9 00        	lda	#$0
  2472 00:052E: 8F F7 13 AF  	sta	>11473911
  2473 00:0532: C2 20        	rep	#$20
  2474                        	longa	on
  2475                        ;
  2476                        ;	cur_drive = (UCHAR) drive;
  2477                        	.line	415
  2478 00:0534: E2 20        	sep	#$20
  2479                        	longa	off
  2480 00:0536: A5 10        	lda	<L76+drive_0
  2481 00:0538: 8D xx xx     	sta	|~~cur_drive
  2482 00:053B: C2 20        	rep	#$20
  2483                        	longa	on
  2484                        ;	//reg_dor = (reg_dor & 0x0C) | cur_drive; /* sto
                    p all motors and select new drive */
  2485                        ;
  2486                        ;	reg_dor |= (1 << (drive + 4)); /* Spinup the sel
                    ected drive */
  2487                        	.line	418
  2488 00:053D: 18           	clc
  2489 00:053E: A9 04 00     	lda	#$4
  Sat Jul 10 2021  1:15                                                Page 48


  2490 00:0541: 65 10        	adc	<L76+drive_0
  2491 00:0543: 48           	pha
  2492 00:0544: A9 01 00     	lda	#$1
  2493 00:0547: FA           	plx
  2494                        	xref	~~~asl
  2495 00:0548: 22 xx xx xx  	jsl	~~~asl
  2496 00:054C: 85 01        	sta	<R0
  2497 00:054E: AD xx xx     	lda	|~~reg_dor
  2498 00:0551: 29 FF 00     	and	#$ff
  2499 00:0554: 85 05        	sta	<R1
  2500 00:0556: A5 05        	lda	<R1
  2501 00:0558: 05 01        	ora	<R0
  2502 00:055A: 85 09        	sta	<R2
  2503 00:055C: E2 20        	sep	#$20
  2504                        	longa	off
  2505 00:055E: A5 09        	lda	<R2
  2506 00:0560: 8D xx xx     	sta	|~~reg_dor
  2507 00:0563: C2 20        	rep	#$20
  2508                        	longa	on
  2509                        ;	reg_dor |= drive; /* Select the drive for comman
                    ds as well */
  2510                        	.line	419
  2511 00:0565: E2 20        	sep	#$20
  2512                        	longa	off
  2513 00:0567: A5 10        	lda	<L76+drive_0
  2514 00:0569: 0C xx xx     	tsb	|~~reg_dor
  2515 00:056C: C2 20        	rep	#$20
  2516                        	longa	on
  2517                        ;
  2518                        ;	outportb(FDC_DOR, reg_dor);
  2519                        	.line	421
  2520 00:056E: E2 20        	sep	#$20
  2521                        	longa	off
  2522 00:0570: AD xx xx     	lda	|~~reg_dor
  2523 00:0573: 8F F2 13 AF  	sta	>11473906
  2524 00:0577: C2 20        	rep	#$20
  2525                        	longa	on
  2526                        ;
  2527                        ;	sleep(DRIVE_H1440_SPINUP);
  2528                        	.line	423
  2529 00:0579: F4 90 01     	pea	#<$190
  2530 00:057C: 22 xx xx xx  	jsl	~~sleep
  2531                        ;
  2532                        ;	floppy_specify();
  2533                        	.line	425
  2534 00:0580: 22 xx xx xx  	jsl	~~floppy_specify
  2535                        ;	//floppy_drive_data(3, 16, 240, FALSE);
  2536                        ;
  2537                        ;	return 0;
  2538                        	.line	428
  2539 00:0584: A9 00 00     	lda	#$0
  2540 00:0587: 82 8E FF     	brl	L83
  2541                        ;}
  2542                        	.line	429
  2543                        	.endblock	429
  2544             0000000C   L76	equ	12
  2545             0000000D   L77	equ	13
  2546                        	ends
  Sat Jul 10 2021  1:15                                                Page 49


  2547                        	efunc
  2548                        	.endfunc	429,13,12
  2549                        	.line	429
  2550                        ;
  2551                        ;static void floppy_calibrate()
  2552                        ;{
  2553                        	.line	431
  2554                        	.line	432
  2555                        	code
  2556                        	func
  2557                        	.function	432
  2558                        ~~floppy_calibrate:
  2559                        	longa	on
  2560                        	longi	on
  2561 00:058A: 3B           	tsc
  2562 00:058B: 38           	sec
  2563 00:058C: E9 04 00     	sbc	#L84
  2564 00:058F: 1B           	tcs
  2565 00:0590: 0B           	phd
  2566 00:0591: 5B           	tcd
  2567                        	.block	432
  2568                        ;	int i;
  2569                        ;	UCHAR  st0, cyl;
  2570                        ;	motor_on();
  2571             00000000   i_1	set	0
  2572             00000002   st0_1	set	2
  2573             00000003   cyl_1	set	3
  2574                        	.sym	i,0,5,1,16
  2575                        	.sym	st0,2,14,1,8
  2576                        	.sym	cyl,3,14,1,8
  2577                        	.line	435
  2578 00:0592: 22 xx xx xx  	jsl	~~motor_on
  2579                        ;
  2580                        ;	//sendbyte(CMD_RECAL);
  2581                        ;	//sendbyte(cur_drive);
  2582                        ;
  2583                        ;	//fdc_wait(1);
  2584                        ;
  2585                        ;
  2586                        ;
  2587                        ;	for (i = 0; i < 100; i++)
  2588                        	.line	444
  2589 00:0596: 64 01        	stz	<L85+i_1
  2590                        L10025:
  2591                        ;	{
  2592                        	.line	445
  2593                        ;
  2594                        ;		//! send command
  2595                        ;		sendbyte(CMD_RECAL);
  2596                        	.line	448
  2597 00:0598: F4 07 00     	pea	#<$7
  2598 00:059B: 22 xx xx xx  	jsl	~~sendbyte
  2599                        ;		sendbyte(cur_drive);
  2600                        	.line	449
  2601 00:059F: AD xx xx     	lda	|~~cur_drive
  2602 00:05A2: 48           	pha
  2603 00:05A3: 22 xx xx xx  	jsl	~~sendbyte
  2604                        ;		fdc_waitint();
  Sat Jul 10 2021  1:15                                                Page 50


  2605                        	.line	450
  2606 00:05A7: 22 xx xx xx  	jsl	~~fdc_waitint
  2607                        ;		floppy_check_int(&st0, &cyl);
  2608                        	.line	451
  2609 00:05AB: F4 00 00     	pea	#0
  2610 00:05AE: 18           	clc
  2611 00:05AF: 7B           	tdc
  2612 00:05B0: 69 04 00     	adc	#<L85+cyl_1
  2613 00:05B3: 48           	pha
  2614 00:05B4: F4 00 00     	pea	#0
  2615 00:05B7: 18           	clc
  2616 00:05B8: 7B           	tdc
  2617 00:05B9: 69 03 00     	adc	#<L85+st0_1
  2618 00:05BC: 48           	pha
  2619 00:05BD: 22 xx xx xx  	jsl	~~floppy_check_int
  2620                        ;
  2621                        ;		//! did we find cylinder 0? if so, we ar
                    e done
  2622                        ;		if (!cyl)
  2623                        	.line	454
  2624                        ;		{
  2625 00:05C1: A5 04        	lda	<L85+cyl_1
  2626 00:05C3: 29 FF 00     	and	#$ff
  2627 00:05C6: F0 03        	beq	L87
  2628 00:05C8: 82 14 00     	brl	L10026
  2629                        L87:
  2630                        	.line	455
  2631                        ;			k_debug_hex("floppy_calibrate:cy
                    :", cyl);
  2632                        	.line	456
  2633 00:05CB: D4 04        	pei	<L85+cyl_1
  2634 00:05CD: F4 xx xx     	pea	#^L71
  2635 00:05D0: F4 xx xx     	pea	#<L71
  2636 00:05D3: 22 xx xx xx  	jsl	~~k_debug_hex
  2637                        ;			//motor_off();
  2638                        ;			return ;
  2639                        	.line	458
  2640                        L88:
  2641 00:05D7: 2B           	pld
  2642 00:05D8: 3B           	tsc
  2643 00:05D9: 18           	clc
  2644 00:05DA: 69 04 00     	adc	#L84
  2645 00:05DD: 1B           	tcs
  2646 00:05DE: 6B           	rtl
  2647                        ;		}
  2648                        	.line	459
  2649                        ;	}
  2650                        L10026:
  2651                        	.line	460
  2652                        L10023:
  2653 00:05DF: E6 01        	inc	<L85+i_1
  2654 00:05E1: 38           	sec
  2655 00:05E2: A5 01        	lda	<L85+i_1
  2656 00:05E4: E9 64 00     	sbc	#<$64
  2657 00:05E7: 70 03        	bvs	L89
  2658 00:05E9: 49 00 80     	eor	#$8000
  2659                        L89:
  2660 00:05EC: 30 03        	bmi	L90
  Sat Jul 10 2021  1:15                                                Page 51


  2661 00:05EE: 82 A7 FF     	brl	L10025
  2662                        L90:
  2663                        L10024:
  2664                        ;
  2665                        ;	motor_off();
  2666                        	.line	462
  2667 00:05F1: 22 xx xx xx  	jsl	~~motor_off
  2668                        ;}
  2669                        	.line	463
  2670 00:05F5: 82 DF FF     	brl	L88
  2671                        	.endblock	463
  2672             00000004   L84	equ	4
  2673             00000001   L85	equ	1
  2674                        	ends
  2675                        	efunc
  2676                        	.endfunc	463,1,4
  2677                        	.line	463
  2678                        	data
  2679                        L71:
  2680 00:00F7: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$63,$61,$6C,
                    $69,$62,$72,$61,$74
       00:00FB: 70 79 5F 63 
       00:00FF: 61 6C 69 62 
       00:0103: 72 61 74 
  2681 00:0106: 65 3A 63 79  	db	$65,$3A,$63,$79,$3A,$00
       00:010A: 3A 00 
  2682 00:010C:              	ends
  2683                        ;
  2684                        ;static int floppy_seek(UINT track)
  2685                        ;{
  2686                        	.line	465
  2687                        	.line	466
  2688                        	code
  2689                        	func
  2690                        	.function	466
  2691                        ~~floppy_seek:
  2692                        	longa	on
  2693                        	longi	on
  2694 00:05F8: 3B           	tsc
  2695 00:05F9: 38           	sec
  2696 00:05FA: E9 07 00     	sbc	#L92
  2697 00:05FD: 1B           	tcs
  2698 00:05FE: 0B           	phd
  2699 00:05FF: 5B           	tcd
  2700             00000004   track_0	set	4
  2701                        	.block	466
  2702                        ;	UCHAR sts = 0;
  2703                        ;	int res = 0;
  2704                        ;
  2705                        ;	k_debug_hex("floppy_seek:cy:", track);
  2706             00000000   sts_1	set	0
  2707             00000001   res_1	set	1
  2708                        	.sym	sts,0,14,1,8
  2709                        	.sym	res,1,5,1,16
  2710                        	.sym	track,4,16,6,16
  2711 00:0600: E2 20        	sep	#$20
  2712                        	longa	off
  2713 00:0602: 64 05        	stz	<L93+sts_1
  Sat Jul 10 2021  1:15                                                Page 52


  2714 00:0604: C2 20        	rep	#$20
  2715                        	longa	on
  2716 00:0606: 64 06        	stz	<L93+res_1
  2717                        	.line	470
  2718 00:0608: D4 0B        	pei	<L92+track_0
  2719 00:060A: F4 xx xx     	pea	#^L91
  2720 00:060D: F4 xx xx     	pea	#<L91
  2721 00:0610: 22 xx xx xx  	jsl	~~k_debug_hex
  2722                        ;
  2723                        ;	//if (drives[cur_drive].track == track)
  2724                        ;	//	return 0;
  2725                        ;
  2726                        ;	motor_on();
  2727                        	.line	475
  2728 00:0614: 22 xx xx xx  	jsl	~~motor_on
  2729                        ;
  2730                        ;	sendbyte(CMD_SEEK);
  2731                        	.line	477
  2732 00:0618: F4 0F 00     	pea	#<$f
  2733 00:061B: 22 xx xx xx  	jsl	~~sendbyte
  2734                        ;	sendbyte(cur_drive);
  2735                        	.line	478
  2736 00:061F: AD xx xx     	lda	|~~cur_drive
  2737 00:0622: 48           	pha
  2738 00:0623: 22 xx xx xx  	jsl	~~sendbyte
  2739                        ;	sendbyte((UCHAR) track);
  2740                        	.line	479
  2741 00:0627: D4 0B        	pei	<L92+track_0
  2742 00:0629: 22 xx xx xx  	jsl	~~sendbyte
  2743                        ;
  2744                        ;
  2745                        ;	//if (fdc_wait(1))
  2746                        ;	//	res = 1;
  2747                        ;
  2748                        ;	do
  2749                        	.line	485
  2750                        L10029:
  2751                        ;	{
  2752                        	.line	486
  2753                        ;		sts = FDD_MAIN_STATUS[0];
  2754                        	.line	487
  2755 00:062D: E2 20        	sep	#$20
  2756                        	longa	off
  2757 00:062F: AF F4 13 AF  	lda	>11473908
  2758 00:0633: 85 05        	sta	<L93+sts_1
  2759 00:0635: C2 20        	rep	#$20
  2760                        	longa	on
  2761                        ;		k_debug_bits("floppy_seek:sts:", sts);
  2762                        	.line	488
  2763 00:0637: D4 05        	pei	<L93+sts_1
  2764 00:0639: F4 xx xx     	pea	#^L91+16
  2765 00:063C: F4 xx xx     	pea	#<L91+16
  2766 00:063F: 22 xx xx xx  	jsl	~~k_debug_bits
  2767                        ;		if(sts & MSR_DIO)
  2768                        	.line	489
  2769                        ;		{
  2770 00:0643: E2 20        	sep	#$20
  2771                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 53


  2772 00:0645: A5 05        	lda	<L93+sts_1
  2773 00:0647: 29 40        	and	#<$40
  2774 00:0649: C2 20        	rep	#$20
  2775                        	longa	on
  2776 00:064B: D0 03        	bne	L95
  2777 00:064D: 82 0F 00     	brl	L10030
  2778                        L95:
  2779                        	.line	490
  2780                        ;			k_debug_hex("floppy_seek:data:",
                     inportb(FDC_DATA));
  2781                        	.line	491
  2782 00:0650: AF F5 13 AF  	lda	>11473909
  2783 00:0654: 48           	pha
  2784 00:0655: F4 xx xx     	pea	#^L91+33
  2785 00:0658: F4 xx xx     	pea	#<L91+33
  2786 00:065B: 22 xx xx xx  	jsl	~~k_debug_hex
  2787                        ;		}
  2788                        	.line	492
  2789                        ;	}while(sts & MSR_CB);
  2790                        L10030:
  2791                        	.line	493
  2792                        L10027:
  2793 00:065F: E2 20        	sep	#$20
  2794                        	longa	off
  2795 00:0661: A5 05        	lda	<L93+sts_1
  2796 00:0663: 29 10        	and	#<$10
  2797 00:0665: C2 20        	rep	#$20
  2798                        	longa	on
  2799 00:0667: F0 03        	beq	L96
  2800 00:0669: 82 C1 FF     	brl	L10029
  2801                        L96:
  2802                        L10028:
  2803                        ;
  2804                        ;	//usleep(15 * MS);
  2805                        ;	sleep(15);
  2806                        	.line	496
  2807 00:066C: F4 0F 00     	pea	#<$f
  2808 00:066F: 22 xx xx xx  	jsl	~~sleep
  2809                        ;
  2810                        ;	motor_off();
  2811                        	.line	498
  2812 00:0673: 22 xx xx xx  	jsl	~~motor_off
  2813                        ;
  2814                        ;	k_debug_bits("floppy_seek:stsA:", FDD_STATUS_A[0
                    ]);
  2815                        	.line	500
  2816 00:0677: AF F0 13 AF  	lda	>11473904
  2817 00:067B: 48           	pha
  2818 00:067C: F4 xx xx     	pea	#^L91+51
  2819 00:067F: F4 xx xx     	pea	#<L91+51
  2820 00:0682: 22 xx xx xx  	jsl	~~k_debug_bits
  2821                        ;	k_debug_bits("floppy_seek:stsB:", FDD_STATUS_B[0
                    ]);
  2822                        	.line	501
  2823 00:0686: AF F1 13 AF  	lda	>11473905
  2824 00:068A: 48           	pha
  2825 00:068B: F4 xx xx     	pea	#^L91+69
  2826 00:068E: F4 xx xx     	pea	#<L91+69
  Sat Jul 10 2021  1:15                                                Page 54


  2827 00:0691: 22 xx xx xx  	jsl	~~k_debug_bits
  2828                        ;
  2829                        ;
  2830                        ;
  2831                        ;	res = !(FDD_STATUS_A[0] & FDD_ST1_DATTA_ERROR);
  2832                        	.line	505
  2833 00:0695: 64 01        	stz	<R0
  2834 00:0697: E2 20        	sep	#$20
  2835                        	longa	off
  2836 00:0699: AF F0 13 AF  	lda	>11473904
  2837 00:069D: 29 20        	and	#<$20
  2838 00:069F: C2 20        	rep	#$20
  2839                        	longa	on
  2840 00:06A1: F0 03        	beq	L98
  2841 00:06A3: 82 02 00     	brl	L97
  2842                        L98:
  2843 00:06A6: E6 01        	inc	<R0
  2844                        L97:
  2845 00:06A8: A5 01        	lda	<R0
  2846 00:06AA: 85 06        	sta	<L93+res_1
  2847                        ;
  2848                        ;
  2849                        ;	k_debug_integer("floppy_seek:res:", res);
  2850                        	.line	508
  2851 00:06AC: D4 06        	pei	<L93+res_1
  2852 00:06AE: F4 xx xx     	pea	#^L91+87
  2853 00:06B1: F4 xx xx     	pea	#<L91+87
  2854 00:06B4: 22 xx xx xx  	jsl	~~k_debug_integer
  2855                        ;
  2856                        ;	return res;
  2857                        	.line	510
  2858 00:06B8: A5 06        	lda	<L93+res_1
  2859                        L99:
  2860 00:06BA: A8           	tay
  2861 00:06BB: A5 09        	lda	<L92+2
  2862 00:06BD: 85 0B        	sta	<L92+2+2
  2863 00:06BF: A5 08        	lda	<L92+1
  2864 00:06C1: 85 0A        	sta	<L92+1+2
  2865 00:06C3: 2B           	pld
  2866 00:06C4: 3B           	tsc
  2867 00:06C5: 18           	clc
  2868 00:06C6: 69 09 00     	adc	#L92+2
  2869 00:06C9: 1B           	tcs
  2870 00:06CA: 98           	tya
  2871 00:06CB: 6B           	rtl
  2872                        ;
  2873                        ;	//if (!(reg_sr0 & 0x20) || (drives[cur_drive].tr
                    ack != track))
  2874                        ;	//	return 1;
  2875                        ;	//else
  2876                        ;	//	return res;
  2877                        ;}
  2878                        	.line	516
  2879                        	.endblock	516
  2880             00000007   L92	equ	7
  2881             00000005   L93	equ	5
  2882                        	ends
  2883                        	efunc
  Sat Jul 10 2021  1:15                                                Page 55


  2884                        	.endfunc	516,5,7
  2885                        	.line	516
  2886                        	data
  2887                        L91:
  2888 00:010C: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$73,$65,$65,
                    $6B,$3A,$63,$79,$3A
       00:0110: 70 79 5F 73 
       00:0114: 65 65 6B 3A 
       00:0118: 63 79 3A 
  2889 00:011B: 00 66 6C 6F  	db	$00,$66,$6C,$6F,$70,$70,$79,$5F,$73,$65,
                    $65,$6B,$3A,$73,$74
       00:011F: 70 70 79 5F 
       00:0123: 73 65 65 6B 
       00:0127: 3A 73 74 
  2890 00:012A: 73 3A 00 66  	db	$73,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $73,$65,$65,$6B,$3A
       00:012E: 6C 6F 70 70 
       00:0132: 79 5F 73 65 
       00:0136: 65 6B 3A 
  2891 00:0139: 64 61 74 61  	db	$64,$61,$74,$61,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$73,$65
       00:013D: 3A 00 66 6C 
       00:0141: 6F 70 70 79 
       00:0145: 5F 73 65 
  2892 00:0148: 65 6B 3A 73  	db	$65,$6B,$3A,$73,$74,$73,$41,$3A,$00,$66,
                    $6C,$6F,$70,$70,$79
       00:014C: 74 73 41 3A 
       00:0150: 00 66 6C 6F 
       00:0154: 70 70 79 
  2893 00:0157: 5F 73 65 65  	db	$5F,$73,$65,$65,$6B,$3A,$73,$74,$73,$42,
                    $3A,$00,$66,$6C,$6F
       00:015B: 6B 3A 73 74 
       00:015F: 73 42 3A 00 
       00:0163: 66 6C 6F 
  2894 00:0166: 70 70 79 5F  	db	$70,$70,$79,$5F,$73,$65,$65,$6B,$3A,$72,
                    $65,$73,$3A,$00
       00:016A: 73 65 65 6B 
       00:016E: 3A 72 65 73 
       00:0172: 3A 00 
  2895 00:0174:              	ends
  2896                        ;
  2897                        ;int floppy_present()
  2898                        ;{
  2899                        	.line	518
  2900                        	.line	519
  2901                        	code
  2902                        	xdef	~~floppy_present
  2903                        	func
  2904                        	.function	519
  2905                        ~~floppy_present:
  2906                        	longa	on
  2907                        	longi	on
  2908 00:06CC: 3B           	tsc
  2909 00:06CD: 38           	sec
  2910 00:06CE: E9 07 00     	sbc	#L101
  2911 00:06D1: 1B           	tcs
  2912 00:06D2: 0B           	phd
  2913 00:06D3: 5B           	tcd
  Sat Jul 10 2021  1:15                                                Page 56


  2914                        	.block	519
  2915                        ;	int retCode = 0;
  2916                        ;	UCHAR dir = inportb(FDC_DIR);
  2917                        ;	if (dir & DIR_DC)
  2918             00000000   retCode_1	set	0
  2919             00000002   dir_1	set	2
  2920                        	.sym	retCode,0,5,1,16
  2921                        	.sym	dir,2,14,1,8
  2922 00:06D4: 64 05        	stz	<L102+retCode_1
  2923 00:06D6: E2 20        	sep	#$20
  2924                        	longa	off
  2925 00:06D8: AF F7 13 AF  	lda	>11473911
  2926 00:06DC: 85 07        	sta	<L102+dir_1
  2927 00:06DE: C2 20        	rep	#$20
  2928                        	longa	on
  2929                        	.line	522
  2930                        ;	{
  2931 00:06E0: E2 20        	sep	#$20
  2932                        	longa	off
  2933 00:06E2: A5 07        	lda	<L102+dir_1
  2934 00:06E4: 29 80        	and	#<$80
  2935 00:06E6: C2 20        	rep	#$20
  2936                        	longa	on
  2937 00:06E8: D0 03        	bne	L104
  2938 00:06EA: 82 0E 00     	brl	L10031
  2939                        L104:
  2940                        	.line	523
  2941                        ;		floppy_seek(79);
  2942                        	.line	524
  2943 00:06ED: F4 4F 00     	pea	#<$4f
  2944 00:06F0: 22 xx xx xx  	jsl	~~floppy_seek
  2945                        ;		floppy_seek(0);
  2946                        	.line	525
  2947 00:06F4: F4 00 00     	pea	#<$0
  2948 00:06F7: 22 xx xx xx  	jsl	~~floppy_seek
  2949                        ;	}
  2950                        	.line	526
  2951                        ;
  2952                        ;	retCode = !(inportb(FDC_DIR) & DIR_DC);
  2953                        L10031:
  2954                        	.line	528
  2955 00:06FB: 64 01        	stz	<R0
  2956 00:06FD: E2 20        	sep	#$20
  2957                        	longa	off
  2958 00:06FF: AF F7 13 AF  	lda	>11473911
  2959 00:0703: 29 80        	and	#<$80
  2960 00:0705: C2 20        	rep	#$20
  2961                        	longa	on
  2962 00:0707: F0 03        	beq	L106
  2963 00:0709: 82 02 00     	brl	L105
  2964                        L106:
  2965 00:070C: E6 01        	inc	<R0
  2966                        L105:
  2967 00:070E: A5 01        	lda	<R0
  2968 00:0710: 85 05        	sta	<L102+retCode_1
  2969                        ;
  2970                        ;	k_debug_bits("floppy_present:retCode:", (UCHAR)r
                    etCode);
  Sat Jul 10 2021  1:15                                                Page 57


  2971                        	.line	530
  2972 00:0712: D4 05        	pei	<L102+retCode_1
  2973 00:0714: F4 xx xx     	pea	#^L100
  2974 00:0717: F4 xx xx     	pea	#<L100
  2975 00:071A: 22 xx xx xx  	jsl	~~k_debug_bits
  2976                        ;
  2977                        ;	return retCode;
  2978                        	.line	532
  2979 00:071E: A5 05        	lda	<L102+retCode_1
  2980                        L107:
  2981 00:0720: A8           	tay
  2982 00:0721: 2B           	pld
  2983 00:0722: 3B           	tsc
  2984 00:0723: 18           	clc
  2985 00:0724: 69 07 00     	adc	#L101
  2986 00:0727: 1B           	tcs
  2987 00:0728: 98           	tya
  2988 00:0729: 6B           	rtl
  2989                        ;}
  2990                        	.line	533
  2991                        	.endblock	533
  2992             00000007   L101	equ	7
  2993             00000005   L102	equ	5
  2994                        	ends
  2995                        	efunc
  2996                        	.endfunc	533,5,7
  2997                        	.line	533
  2998                        	data
  2999                        L100:
  3000 00:0174: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$70,$72,$65,
                    $73,$65,$6E,$74,$3A
       00:0178: 70 79 5F 70 
       00:017C: 72 65 73 65 
       00:0180: 6E 74 3A 
  3001 00:0183: 72 65 74 43  	db	$72,$65,$74,$43,$6F,$64,$65,$3A,$00
       00:0187: 6F 64 65 3A 
       00:018B: 00 
  3002 00:018C:              	ends
  3003                        ;
  3004                        ;static int floppy_transfer_try1(UCHAR* buf, int d
                    o_write, UINT c,UINT h, UINT s)
  3005                        ;{
  3006                        	.line	535
  3007                        	.line	536
  3008                        	code
  3009                        	func
  3010                        	.function	536
  3011                        ~~floppy_transfer_try1:
  3012                        	longa	on
  3013                        	longi	on
  3014 00:072A: 3B           	tsc
  3015 00:072B: 38           	sec
  3016 00:072C: E9 0D 00     	sbc	#L109
  3017 00:072F: 1B           	tcs
  3018 00:0730: 0B           	phd
  3019 00:0731: 5B           	tcd
  3020             00000004   buf_0	set	4
  3021             00000008   do_write_0	set	8
  Sat Jul 10 2021  1:15                                                Page 58


  3022             0000000A   c_0	set	10
  3023             0000000C   h_0	set	12
  3024             0000000E   s_0	set	14
  3025                        	.block	536
  3026                        ;	int i = 0;
  3027                        ;	UCHAR msr = 0;
  3028                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  3029                        ;	//UCHAR cmd = do_write ? CMD_WRITE : 0xE6;
  3030                        ;	BOOL retCode = FALSE;
  3031                        ;
  3032                        ;	k_debug_integer("floppy_transfer_try:",cur_drive
                    );
  3033             00000000   i_1	set	0
  3034             00000002   msr_1	set	2
  3035             00000003   cmd_1	set	3
  3036             00000004   retCode_1	set	4
  3037                        	.sym	i,0,5,1,16
  3038                        	.sym	msr,2,14,1,8
  3039                        	.sym	cmd,3,14,1,8
  3040                        	.sym	retCode,4,14,1,8
  3041                        	.sym	buf,4,142,6,32
  3042                        	.sym	do_write,8,5,6,16
  3043                        	.sym	c,10,16,6,16
  3044                        	.sym	h,12,16,6,16
  3045                        	.sym	s,14,16,6,16
  3046 00:0732: 64 09        	stz	<L110+i_1
  3047 00:0734: E2 20        	sep	#$20
  3048                        	longa	off
  3049 00:0736: 64 0B        	stz	<L110+msr_1
  3050 00:0738: C2 20        	rep	#$20
  3051                        	longa	on
  3052 00:073A: A5 15        	lda	<L109+do_write_0
  3053 00:073C: D0 03        	bne	L113
  3054 00:073E: 82 05 00     	brl	L112
  3055                        L113:
  3056 00:0741: A9 45 00     	lda	#$45
  3057 00:0744: 80 03        	bra	L114
  3058                        L112:
  3059 00:0746: A9 46 00     	lda	#$46
  3060                        L114:
  3061 00:0749: 85 01        	sta	<R0
  3062 00:074B: E2 20        	sep	#$20
  3063                        	longa	off
  3064 00:074D: A5 01        	lda	<R0
  3065 00:074F: 85 0C        	sta	<L110+cmd_1
  3066 00:0751: C2 20        	rep	#$20
  3067                        	longa	on
  3068 00:0753: E2 20        	sep	#$20
  3069                        	longa	off
  3070 00:0755: 64 0D        	stz	<L110+retCode_1
  3071 00:0757: C2 20        	rep	#$20
  3072                        	longa	on
  3073                        	.line	543
  3074 00:0759: AD xx xx     	lda	|~~cur_drive
  3075 00:075C: 29 FF 00     	and	#$ff
  3076 00:075F: 48           	pha
  3077 00:0760: F4 xx xx     	pea	#^L108
  3078 00:0763: F4 xx xx     	pea	#<L108
  Sat Jul 10 2021  1:15                                                Page 59


  3079 00:0766: 22 xx xx xx  	jsl	~~k_debug_integer
  3080                        ;	k_debug_integer("floppy_transfer_try:track:",c);
  3081                        	.line	544
  3082 00:076A: D4 17        	pei	<L109+c_0
  3083 00:076C: F4 xx xx     	pea	#^L108+21
  3084 00:076F: F4 xx xx     	pea	#<L108+21
  3085 00:0772: 22 xx xx xx  	jsl	~~k_debug_integer
  3086                        ;	k_debug_integer("floppy_transfer_try:head:",h);
  3087                        	.line	545
  3088 00:0776: D4 19        	pei	<L109+h_0
  3089 00:0778: F4 xx xx     	pea	#^L108+48
  3090 00:077B: F4 xx xx     	pea	#<L108+48
  3091 00:077E: 22 xx xx xx  	jsl	~~k_debug_integer
  3092                        ;	k_debug_integer("floppy_transfer_try:sector:",s)
                    ;
  3093                        	.line	546
  3094 00:0782: D4 1B        	pei	<L109+s_0
  3095 00:0784: F4 xx xx     	pea	#^L108+74
  3096 00:0787: F4 xx xx     	pea	#<L108+74
  3097 00:078A: 22 xx xx xx  	jsl	~~k_debug_integer
  3098                        ;
  3099                        ;
  3100                        ;	//floppy_seek(c);
  3101                        ;
  3102                        ;
  3103                        ;	k_debug_string("floppy_transfer_try:READING NOW!
                    \r\n");
  3104                        	.line	552
  3105 00:078E: F4 xx xx     	pea	#^L108+102
  3106 00:0791: F4 xx xx     	pea	#<L108+102
  3107 00:0794: 22 xx xx xx  	jsl	~~k_debug_string
  3108                        ;
  3109                        ;	sendbyte(cmd);
  3110                        	.line	554
  3111 00:0798: D4 0C        	pei	<L110+cmd_1
  3112 00:079A: 22 xx xx xx  	jsl	~~sendbyte
  3113                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  3114                        	.line	555
  3115 00:079E: A5 19        	lda	<L109+h_0
  3116 00:07A0: 0A           	asl	A
  3117 00:07A1: 0A           	asl	A
  3118 00:07A2: 85 01        	sta	<R0
  3119 00:07A4: AD xx xx     	lda	|~~cur_drive
  3120 00:07A7: 29 FF 00     	and	#$ff
  3121 00:07AA: 85 05        	sta	<R1
  3122 00:07AC: A5 05        	lda	<R1
  3123 00:07AE: 05 01        	ora	<R0
  3124 00:07B0: 48           	pha
  3125 00:07B1: 22 xx xx xx  	jsl	~~sendbyte
  3126                        ;	//sendbyte((UCHAR) 0x00);
  3127                        ;	sendbyte((UCHAR) c);
  3128                        	.line	557
  3129 00:07B5: D4 17        	pei	<L109+c_0
  3130 00:07B7: 22 xx xx xx  	jsl	~~sendbyte
  3131                        ;	sendbyte((UCHAR) h);
  3132                        	.line	558
  3133 00:07BB: D4 19        	pei	<L109+h_0
  3134 00:07BD: 22 xx xx xx  	jsl	~~sendbyte
  Sat Jul 10 2021  1:15                                                Page 60


  3135                        ;	sendbyte((UCHAR) s);
  3136                        	.line	559
  3137 00:07C1: D4 1B        	pei	<L109+s_0
  3138 00:07C3: 22 xx xx xx  	jsl	~~sendbyte
  3139                        ;	sendbyte(0x2);
  3140                        	.line	560
  3141 00:07C7: F4 02 00     	pea	#<$2
  3142 00:07CA: 22 xx xx xx  	jsl	~~sendbyte
  3143                        ;	sendbyte((UCHAR) SEC_PER_TRACK);
  3144                        	.line	561
  3145 00:07CE: F4 12 00     	pea	#<$12
  3146 00:07D1: 22 xx xx xx  	jsl	~~sendbyte
  3147                        ;	sendbyte(0x1b);
  3148                        	.line	562
  3149 00:07D5: F4 1B 00     	pea	#<$1b
  3150 00:07D8: 22 xx xx xx  	jsl	~~sendbyte
  3151                        ;	sendbyte(0xff);
  3152                        	.line	563
  3153 00:07DC: F4 FF 00     	pea	#<$ff
  3154 00:07DF: 22 xx xx xx  	jsl	~~sendbyte
  3155                        ;
  3156                        ;	//if (fdc_waitint())
  3157                        ;//		return -1;
  3158                        ;	sleep(DRIVE_H1440_SPINUP);
  3159                        	.line	567
  3160 00:07E3: F4 90 01     	pea	#<$190
  3161 00:07E6: 22 xx xx xx  	jsl	~~sleep
  3162                        ;
  3163                        ;
  3164                        ;	//fdc_waitint();
  3165                        ;
  3166                        ;	/*
  3167                        ;	do
  3168                        ;	{
  3169                        ;		msr = inportb(FDC_MSR);
  3170                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  3171                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  3172                        ;			break;
  3173                        ;		//k_debug_integer("floppy_transfer_try:f
                    loppybufferIndex:",floppybufferIndex);
  3174                        ;		if(floppybufferIndex>0)
  3175                        ;			k_debug_hex("floppy_transfer_try
                    :floppybufferIndex:data:",floppybuffer[floppybufferIndex - 1
                    ]);
  3176                        ;	}while(msr & MSR_CB);
  3177                        ;	*/
  3178                        ;	//for (i = 0; i < SECTOR_SIZE && (msr & MSR_NDMA
                    ); i++)
  3179                        ;
  3180                        ;	/*
  3181                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  3182                        ;	{
  3183                        ;		if (do_write)
  3184                        ;			sendbyte(buf[i]);
  3185                        ;		else
  3186                        ;		{
  3187                        ;			buf[i] = getbyte();
  Sat Jul 10 2021  1:15                                                Page 61


  3188                        ;
  3189                        ;			if(buf[i]!=0xFF)
  3190                        ;				k_debug_hex("READ:", buf
                    [i]);
  3191                        ;		}
  3192                        ;	}
  3193                        ;	*/
  3194                        ;
  3195                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  3196                        	.line	601
  3197 00:07EA: 64 09        	stz	<L110+i_1
  3198                        L10034:
  3199                        ;	{
  3200                        	.line	602
  3201                        ;		msr = inportb(FDC_MSR);
  3202                        	.line	603
  3203 00:07EC: E2 20        	sep	#$20
  3204                        	longa	off
  3205 00:07EE: AF F4 13 AF  	lda	>11473908
  3206 00:07F2: 85 0B        	sta	<L110+msr_1
  3207 00:07F4: C2 20        	rep	#$20
  3208                        	longa	on
  3209                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  3210                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  3211                        	.line	605
  3212                        ;			break;
  3213 00:07F6: E2 20        	sep	#$20
  3214                        	longa	off
  3215 00:07F8: A5 0B        	lda	<L110+msr_1
  3216 00:07FA: 29 C0        	and	#<$c0
  3217 00:07FC: C2 20        	rep	#$20
  3218                        	longa	on
  3219 00:07FE: F0 03        	beq	L115
  3220 00:0800: 82 1E 00     	brl	L10033
  3221                        L115:
  3222                        ;		//k_debug_integer("floppy_transfer_try:f
                    loppybufferIndex:",floppybufferIndex);
  3223                        ;		buf[i] = getbyte();
  3224                        	.line	608
  3225 00:0803: 22 xx xx xx  	jsl	~~getbyte
  3226 00:0807: E2 20        	sep	#$20
  3227                        	longa	off
  3228 00:0809: A4 09        	ldy	<L110+i_1
  3229 00:080B: 97 11        	sta	[<L109+buf_0],Y
  3230 00:080D: C2 20        	rep	#$20
  3231                        	longa	on
  3232                        ;
  3233                        ;	}
  3234                        	.line	610
  3235                        L10032:
  3236 00:080F: E6 09        	inc	<L110+i_1
  3237 00:0811: 38           	sec
  3238 00:0812: A5 09        	lda	<L110+i_1
  3239 00:0814: E9 00 02     	sbc	#<$200
  3240 00:0817: 70 03        	bvs	L116
  3241 00:0819: 49 00 80     	eor	#$8000
  3242                        L116:
  Sat Jul 10 2021  1:15                                                Page 62


  3243 00:081C: 30 03        	bmi	L117
  3244 00:081E: 82 CB FF     	brl	L10034
  3245                        L117:
  3246                        L10033:
  3247                        ;
  3248                        ;	k_debug_byte_array("DATA:\r\n",buf,512);
  3249                        	.line	612
  3250 00:0821: F4 00 00     	pea	#^$200
  3251 00:0824: F4 00 02     	pea	#<$200
  3252 00:0827: D4 13        	pei	<L109+buf_0+2
  3253 00:0829: D4 11        	pei	<L109+buf_0
  3254 00:082B: F4 xx xx     	pea	#^L108+137
  3255 00:082E: F4 xx xx     	pea	#<L108+137
  3256 00:0831: 22 xx xx xx  	jsl	~~k_debug_byte_array
  3257                        ;/*
  3258                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  3259                        ;	{
  3260                        ;		buf[i] = inportb(FDC_DATA);
  3261                        ;		while(!(MSR_DIO & inportb(FDC_MSR)))
  3262                        ;			k_debug_bits("floppy_transfer_tr
                    y1:read:msr:",msr);
  3263                        ;	}
  3264                        ;
  3265                        ;
  3266                        ;	/*
  3267                        ;	do
  3268                        ;	{
  3269                        ;		msr = inportb(FDC_MSR);
  3270                        ;		k_debug_bits("floppy_transfer_try1:msr:"
                    ,msr);
  3271                        ;		buf[i] = inportb(FDC_DATA);
  3272                        ;		if(i < 511)
  3273                        ;			i++;
  3274                        ;	}while(msr & MSR_DIO);
  3275                        ;	*/
  3276                        ;
  3277                        ;
  3278                        ;	reg_sr0 = getbyte();
  3279                        	.line	634
  3280 00:0835: 22 xx xx xx  	jsl	~~getbyte
  3281 00:0839: E2 20        	sep	#$20
  3282                        	longa	off
  3283 00:083B: 8D xx xx     	sta	|~~reg_sr0
  3284 00:083E: C2 20        	rep	#$20
  3285                        	longa	on
  3286                        ;	k_debug_bits("floppy_transfer_try1:reg_sr0:msr:"
                    ,reg_sr0);
  3287                        	.line	635
  3288 00:0840: AD xx xx     	lda	|~~reg_sr0
  3289 00:0843: 48           	pha
  3290 00:0844: F4 xx xx     	pea	#^L108+145
  3291 00:0847: F4 xx xx     	pea	#<L108+145
  3292 00:084A: 22 xx xx xx  	jsl	~~k_debug_bits
  3293                        ;	reg_sr1 = getbyte();
  3294                        	.line	636
  3295 00:084E: 22 xx xx xx  	jsl	~~getbyte
  3296 00:0852: E2 20        	sep	#$20
  3297                        	longa	off
  Sat Jul 10 2021  1:15                                                Page 63


  3298 00:0854: 8D xx xx     	sta	|~~reg_sr1
  3299 00:0857: C2 20        	rep	#$20
  3300                        	longa	on
  3301                        ;	k_debug_bits("floppy_transfer_try1:reg_sr1:msr:"
                    ,reg_sr1);
  3302                        	.line	637
  3303 00:0859: AD xx xx     	lda	|~~reg_sr1
  3304 00:085C: 48           	pha
  3305 00:085D: F4 xx xx     	pea	#^L108+179
  3306 00:0860: F4 xx xx     	pea	#<L108+179
  3307 00:0863: 22 xx xx xx  	jsl	~~k_debug_bits
  3308                        ;	reg_sr2 = getbyte();
  3309                        	.line	638
  3310 00:0867: 22 xx xx xx  	jsl	~~getbyte
  3311 00:086B: E2 20        	sep	#$20
  3312                        	longa	off
  3313 00:086D: 8D xx xx     	sta	|~~reg_sr2
  3314 00:0870: C2 20        	rep	#$20
  3315                        	longa	on
  3316                        ;	k_debug_bits("floppy_transfer_try1:reg_sr2:msr:"
                    ,reg_sr2);
  3317                        	.line	639
  3318 00:0872: AD xx xx     	lda	|~~reg_sr2
  3319 00:0875: 48           	pha
  3320 00:0876: F4 xx xx     	pea	#^L108+213
  3321 00:0879: F4 xx xx     	pea	#<L108+213
  3322 00:087C: 22 xx xx xx  	jsl	~~k_debug_bits
  3323                        ;	drives[cur_drive].track = getbyte();
  3324                        	.line	640
  3325 00:0880: AD xx xx     	lda	|~~cur_drive
  3326 00:0883: 29 FF 00     	and	#$ff
  3327 00:0886: 85 01        	sta	<R0
  3328 00:0888: A5 01        	lda	<R0
  3329 00:088A: 0A           	asl	A
  3330 00:088B: 65 01        	adc	<R0
  3331 00:088D: 0A           	asl	A
  3332 00:088E: 85 01        	sta	<R0
  3333 00:0890: 22 xx xx xx  	jsl	~~getbyte
  3334 00:0894: A6 01        	ldx	<R0
  3335 00:0896: 9D xx xx     	sta	|~~drives,X
  3336                        ;
  3337                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  3338                        ;
  3339                        ;	i = getbyte();
  3340                        	.line	644
  3341 00:0899: 22 xx xx xx  	jsl	~~getbyte
  3342 00:089D: 85 09        	sta	<L110+i_1
  3343                        ;	k_debug_bits("floppy_transfer_try1:1:c:",i);
  3344                        	.line	645
  3345 00:089F: D4 09        	pei	<L110+i_1
  3346 00:08A1: F4 xx xx     	pea	#^L108+247
  3347 00:08A4: F4 xx xx     	pea	#<L108+247
  3348 00:08A7: 22 xx xx xx  	jsl	~~k_debug_bits
  3349                        ;	//k_debug_integer("floppy_transfer_try:i1:",i);
  3350                        ;	i = getbyte();
  3351                        	.line	647
  3352 00:08AB: 22 xx xx xx  	jsl	~~getbyte
  Sat Jul 10 2021  1:15                                                Page 64


  3353 00:08AF: 85 09        	sta	<L110+i_1
  3354                        ;	k_debug_bits("floppy_transfer_try1:2:h:",i);
  3355                        	.line	648
  3356 00:08B1: D4 09        	pei	<L110+i_1
  3357 00:08B3: F4 xx xx     	pea	#^L108+273
  3358 00:08B6: F4 xx xx     	pea	#<L108+273
  3359 00:08B9: 22 xx xx xx  	jsl	~~k_debug_bits
  3360                        ;	//k_debug_integer("floppy_transfer_try:i2:",i);
  3361                        ;	i = getbyte();
  3362                        	.line	650
  3363 00:08BD: 22 xx xx xx  	jsl	~~getbyte
  3364 00:08C1: 85 09        	sta	<L110+i_1
  3365                        ;	k_debug_bits("floppy_transfer_try1:3:r:",i);
  3366                        	.line	651
  3367 00:08C3: D4 09        	pei	<L110+i_1
  3368 00:08C5: F4 xx xx     	pea	#^L108+299
  3369 00:08C8: F4 xx xx     	pea	#<L108+299
  3370 00:08CB: 22 xx xx xx  	jsl	~~k_debug_bits
  3371                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  3372                        ;	i = getbyte();
  3373                        	.line	653
  3374 00:08CF: 22 xx xx xx  	jsl	~~getbyte
  3375 00:08D3: 85 09        	sta	<L110+i_1
  3376                        ;	k_debug_bits("floppy_transfer_try1:3:n:",i);
  3377                        	.line	654
  3378 00:08D5: D4 09        	pei	<L110+i_1
  3379 00:08D7: F4 xx xx     	pea	#^L108+325
  3380 00:08DA: F4 xx xx     	pea	#<L108+325
  3381 00:08DD: 22 xx xx xx  	jsl	~~k_debug_bits
  3382                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  3383                        ;
  3384                        ;	k_debug_integer("floppy_transfer_try:floppybuffe
                    rIndex:",floppybufferIndex);
  3385                        	.line	657
  3386 00:08E1: AD xx xx     	lda	|~~floppybufferIndex
  3387 00:08E4: 48           	pha
  3388 00:08E5: F4 xx xx     	pea	#^L108+351
  3389 00:08E8: F4 xx xx     	pea	#<L108+351
  3390 00:08EB: 22 xx xx xx  	jsl	~~k_debug_integer
  3391                        ;	//return i != 2;
  3392                        ;
  3393                        ;	retCode = (i != 2);
  3394                        	.line	660
  3395 00:08EF: 64 01        	stz	<R0
  3396 00:08F1: A5 09        	lda	<L110+i_1
  3397 00:08F3: C9 02 00     	cmp	#<$2
  3398 00:08F6: D0 03        	bne	L119
  3399 00:08F8: 82 02 00     	brl	L118
  3400                        L119:
  3401 00:08FB: E6 01        	inc	<R0
  3402                        L118:
  3403 00:08FD: E2 20        	sep	#$20
  3404                        	longa	off
  3405 00:08FF: A5 01        	lda	<R0
  3406 00:0901: 85 0D        	sta	<L110+retCode_1
  3407 00:0903: C2 20        	rep	#$20
  3408                        	longa	on
  3409                        ;
  Sat Jul 10 2021  1:15                                                Page 65


  3410                        ;	return retCode;
  3411                        	.line	662
  3412 00:0905: A5 0D        	lda	<L110+retCode_1
  3413 00:0907: 29 FF 00     	and	#$ff
  3414                        L120:
  3415 00:090A: A8           	tay
  3416 00:090B: A5 0F        	lda	<L109+2
  3417 00:090D: 85 1B        	sta	<L109+2+12
  3418 00:090F: A5 0E        	lda	<L109+1
  3419 00:0911: 85 1A        	sta	<L109+1+12
  3420 00:0913: 2B           	pld
  3421 00:0914: 3B           	tsc
  3422 00:0915: 18           	clc
  3423 00:0916: 69 19 00     	adc	#L109+12
  3424 00:0919: 1B           	tcs
  3425 00:091A: 98           	tya
  3426 00:091B: 6B           	rtl
  3427                        ;}
  3428                        	.line	663
  3429                        	.endblock	663
  3430             0000000D   L109	equ	13
  3431             00000009   L110	equ	9
  3432                        	ends
  3433                        	efunc
  3434                        	.endfunc	663,9,13
  3435                        	.line	663
  3436                        	data
  3437                        L108:
  3438 00:018C: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0190: 70 79 5F 74 
       00:0194: 72 61 6E 73 
       00:0198: 66 65 72 
  3439 00:019B: 5F 74 72 79  	db	$5F,$74,$72,$79,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$74,$72
       00:019F: 3A 00 66 6C 
       00:01A3: 6F 70 70 79 
       00:01A7: 5F 74 72 
  3440 00:01AA: 61 6E 73 66  	db	$61,$6E,$73,$66,$65,$72,$5F,$74,$72,$79,
                    $3A,$74,$72,$61,$63
       00:01AE: 65 72 5F 74 
       00:01B2: 72 79 3A 74 
       00:01B6: 72 61 63 
  3441 00:01B9: 6B 3A 00 66  	db	$6B,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:01BD: 6C 6F 70 70 
       00:01C1: 79 5F 74 72 
       00:01C5: 61 6E 73 
  3442 00:01C8: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$3A,$68,$65,
                    $61,$64,$3A,$00,$66
       00:01CC: 74 72 79 3A 
       00:01D0: 68 65 61 64 
       00:01D4: 3A 00 66 
  3443 00:01D7: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:01DB: 79 5F 74 72 
       00:01DF: 61 6E 73 66 
       00:01E3: 65 72 5F 
  Sat Jul 10 2021  1:15                                                Page 66


  3444 00:01E6: 74 72 79 3A  	db	$74,$72,$79,$3A,$73,$65,$63,$74,$6F,$72,
                    $3A,$00,$66,$6C,$6F
       00:01EA: 73 65 63 74 
       00:01EE: 6F 72 3A 00 
       00:01F2: 66 6C 6F 
  3445 00:01F5: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$5F,$74,$72
       00:01F9: 74 72 61 6E 
       00:01FD: 73 66 65 72 
       00:0201: 5F 74 72 
  3446 00:0204: 79 3A 52 45  	db	$79,$3A,$52,$45,$41,$44,$49,$4E,$47,$20,
                    $4E,$4F,$57,$21,$0D
       00:0208: 41 44 49 4E 
       00:020C: 47 20 4E 4F 
       00:0210: 57 21 0D 
  3447 00:0213: 0A 00 44 41  	db	$0A,$00,$44,$41,$54,$41,$3A,$0D,$0A,$00,
                    $66,$6C,$6F,$70,$70
       00:0217: 54 41 3A 0D 
       00:021B: 0A 00 66 6C 
       00:021F: 6F 70 70 
  3448 00:0222: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$31
       00:0226: 61 6E 73 66 
       00:022A: 65 72 5F 74 
       00:022E: 72 79 31 
  3449 00:0231: 3A 72 65 67  	db	$3A,$72,$65,$67,$5F,$73,$72,$30,$3A,$6D,
                    $73,$72,$3A,$00,$66
       00:0235: 5F 73 72 30 
       00:0239: 3A 6D 73 72 
       00:023D: 3A 00 66 
  3450 00:0240: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:0244: 79 5F 74 72 
       00:0248: 61 6E 73 66 
       00:024C: 65 72 5F 
  3451 00:024F: 74 72 79 31  	db	$74,$72,$79,$31,$3A,$72,$65,$67,$5F,$73,
                    $72,$31,$3A,$6D,$73
       00:0253: 3A 72 65 67 
       00:0257: 5F 73 72 31 
       00:025B: 3A 6D 73 
  3452 00:025E: 72 3A 00 66  	db	$72,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:0262: 6C 6F 70 70 
       00:0266: 79 5F 74 72 
       00:026A: 61 6E 73 
  3453 00:026D: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$31,$3A,$72,
                    $65,$67,$5F,$73,$72
       00:0271: 74 72 79 31 
       00:0275: 3A 72 65 67 
       00:0279: 5F 73 72 
  3454 00:027C: 32 3A 6D 73  	db	$32,$3A,$6D,$73,$72,$3A,$00,$66,$6C,$6F,
                    $70,$70,$79,$5F,$74
       00:0280: 72 3A 00 66 
       00:0284: 6C 6F 70 70 
       00:0288: 79 5F 74 
  3455 00:028B: 72 61 6E 73  	db	$72,$61,$6E,$73,$66,$65,$72,$5F,$74,$72,
                    $79,$31,$3A,$31,$3A
       00:028F: 66 65 72 5F 
  Sat Jul 10 2021  1:15                                                Page 67


       00:0293: 74 72 79 31 
       00:0297: 3A 31 3A 
  3456 00:029A: 63 3A 00 66  	db	$63,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:029E: 6C 6F 70 70 
       00:02A2: 79 5F 74 72 
       00:02A6: 61 6E 73 
  3457 00:02A9: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$31,$3A,$32,
                    $3A,$68,$3A,$00,$66
       00:02AD: 74 72 79 31 
       00:02B1: 3A 32 3A 68 
       00:02B5: 3A 00 66 
  3458 00:02B8: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:02BC: 79 5F 74 72 
       00:02C0: 61 6E 73 66 
       00:02C4: 65 72 5F 
  3459 00:02C7: 74 72 79 31  	db	$74,$72,$79,$31,$3A,$33,$3A,$72,$3A,$00,
                    $66,$6C,$6F,$70,$70
       00:02CB: 3A 33 3A 72 
       00:02CF: 3A 00 66 6C 
       00:02D3: 6F 70 70 
  3460 00:02D6: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$31
       00:02DA: 61 6E 73 66 
       00:02DE: 65 72 5F 74 
       00:02E2: 72 79 31 
  3461 00:02E5: 3A 33 3A 6E  	db	$3A,$33,$3A,$6E,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$74,$72
       00:02E9: 3A 00 66 6C 
       00:02ED: 6F 70 70 79 
       00:02F1: 5F 74 72 
  3462 00:02F4: 61 6E 73 66  	db	$61,$6E,$73,$66,$65,$72,$5F,$74,$72,$79,
                    $3A,$66,$6C,$6F,$70
       00:02F8: 65 72 5F 74 
       00:02FC: 72 79 3A 66 
       00:0300: 6C 6F 70 
  3463 00:0303: 70 79 62 75  	db	$70,$79,$62,$75,$66,$66,$65,$72,$49,$6E,
                    $64,$65,$78,$3A,$00
       00:0307: 66 66 65 72 
       00:030B: 49 6E 64 65 
       00:030F: 78 3A 00 
  3464 00:0312:              	ends
  3465                        ;
  3466                        ;void floppy_check_int(UCHAR* st0, UCHAR* cyl)
  3467                        ;{
  3468                        	.line	665
  3469                        	.line	666
  3470                        	code
  3471                        	xdef	~~floppy_check_int
  3472                        	func
  3473                        	.function	666
  3474                        ~~floppy_check_int:
  3475                        	longa	on
  3476                        	longi	on
  3477 00:091C: 3B           	tsc
  3478 00:091D: 38           	sec
  3479 00:091E: E9 00 00     	sbc	#L122
  Sat Jul 10 2021  1:15                                                Page 68


  3480 00:0921: 1B           	tcs
  3481 00:0922: 0B           	phd
  3482 00:0923: 5B           	tcd
  3483             00000004   st0_0	set	4
  3484             00000008   cyl_0	set	8
  3485                        	.block	666
  3486                        ;	k_debug_string("floppy_check_int\r\n");
  3487                        	.sym	st0,4,142,6,32
  3488                        	.sym	cyl,8,142,6,32
  3489                        	.line	667
  3490 00:0924: F4 xx xx     	pea	#^L121
  3491 00:0927: F4 xx xx     	pea	#<L121
  3492 00:092A: 22 xx xx xx  	jsl	~~k_debug_string
  3493                        ;
  3494                        ;	sendbyte(CMD_SENSEI);
  3495                        	.line	669
  3496 00:092E: F4 08 00     	pea	#<$8
  3497 00:0931: 22 xx xx xx  	jsl	~~sendbyte
  3498                        ;
  3499                        ;	*st0 = (UCHAR)getbyte();
  3500                        	.line	671
  3501 00:0935: 22 xx xx xx  	jsl	~~getbyte
  3502 00:0939: E2 20        	sep	#$20
  3503                        	longa	off
  3504 00:093B: 87 04        	sta	[<L122+st0_0]
  3505 00:093D: C2 20        	rep	#$20
  3506                        	longa	on
  3507                        ;	*cyl = (UCHAR)getbyte();
  3508                        	.line	672
  3509 00:093F: 22 xx xx xx  	jsl	~~getbyte
  3510 00:0943: E2 20        	sep	#$20
  3511                        	longa	off
  3512 00:0945: 87 08        	sta	[<L122+cyl_0]
  3513 00:0947: C2 20        	rep	#$20
  3514                        	longa	on
  3515                        ;
  3516                        ;	k_debug_hex("floppy_check_int:st0:", *st0);
  3517                        	.line	674
  3518 00:0949: A7 04        	lda	[<L122+st0_0]
  3519 00:094B: 48           	pha
  3520 00:094C: F4 xx xx     	pea	#^L121+19
  3521 00:094F: F4 xx xx     	pea	#<L121+19
  3522 00:0952: 22 xx xx xx  	jsl	~~k_debug_hex
  3523                        ;	k_debug_hex("floppy_check_int:cyl:", *cyl);
  3524                        	.line	675
  3525 00:0956: A7 08        	lda	[<L122+cyl_0]
  3526 00:0958: 48           	pha
  3527 00:0959: F4 xx xx     	pea	#^L121+41
  3528 00:095C: F4 xx xx     	pea	#<L121+41
  3529 00:095F: 22 xx xx xx  	jsl	~~k_debug_hex
  3530                        ;}
  3531                        	.line	676
  3532                        L125:
  3533 00:0963: A5 02        	lda	<L122+2
  3534 00:0965: 85 0A        	sta	<L122+2+8
  3535 00:0967: A5 01        	lda	<L122+1
  3536 00:0969: 85 09        	sta	<L122+1+8
  3537 00:096B: 2B           	pld
  Sat Jul 10 2021  1:15                                                Page 69


  3538 00:096C: 3B           	tsc
  3539 00:096D: 18           	clc
  3540 00:096E: 69 08 00     	adc	#L122+8
  3541 00:0971: 1B           	tcs
  3542 00:0972: 6B           	rtl
  3543                        	.endblock	676
  3544             00000000   L122	equ	0
  3545             00000001   L123	equ	1
  3546                        	ends
  3547                        	efunc
  3548                        	.endfunc	676,1,0
  3549                        	.line	676
  3550                        	data
  3551                        L121:
  3552 00:0312: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$63,$68,$65,
                    $63,$6B,$5F,$69,$6E
       00:0316: 70 79 5F 63 
       00:031A: 68 65 63 6B 
       00:031E: 5F 69 6E 
  3553 00:0321: 74 0D 0A 00  	db	$74,$0D,$0A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$63,$68,$65,$63
       00:0325: 66 6C 6F 70 
       00:0329: 70 79 5F 63 
       00:032D: 68 65 63 
  3554 00:0330: 6B 5F 69 6E  	db	$6B,$5F,$69,$6E,$74,$3A,$73,$74,$30,$3A,
                    $00,$66,$6C,$6F,$70
       00:0334: 74 3A 73 74 
       00:0338: 30 3A 00 66 
       00:033C: 6C 6F 70 
  3555 00:033F: 70 79 5F 63  	db	$70,$79,$5F,$63,$68,$65,$63,$6B,$5F,$69,
                    $6E,$74,$3A,$63,$79
       00:0343: 68 65 63 6B 
       00:0347: 5F 69 6E 74 
       00:034B: 3A 63 79 
  3556 00:034E: 6C 3A 00     	db	$6C,$3A,$00
  3557 00:0351:              	ends
  3558                        ;
  3559                        ;static int wait_til_ready(void)
  3560                        ;{
  3561                        	.line	678
  3562                        	.line	679
  3563                        	code
  3564                        	func
  3565                        	.function	679
  3566                        ~~wait_til_ready:
  3567                        	longa	on
  3568                        	longi	on
  3569 00:0973: 3B           	tsc
  3570 00:0974: 38           	sec
  3571 00:0975: E9 04 00     	sbc	#L127
  3572 00:0978: 1B           	tcs
  3573 00:0979: 0B           	phd
  3574 00:097A: 5B           	tcd
  3575                        	.block	679
  3576                        ;	int counter, status;
  3577                        ;	for (counter = 0; counter < 10000; counter++)
  3578             00000000   counter_1	set	0
  3579             00000002   status_1	set	2
  Sat Jul 10 2021  1:15                                                Page 70


  3580                        	.sym	counter,0,5,1,16
  3581                        	.sym	status,2,5,1,16
  3582                        	.line	681
  3583 00:097B: 64 01        	stz	<L128+counter_1
  3584                        L10037:
  3585                        ;	{
  3586                        	.line	682
  3587                        ;		status = getbyte();
  3588                        	.line	683
  3589 00:097D: 22 xx xx xx  	jsl	~~getbyte
  3590 00:0981: 85 03        	sta	<L128+status_1
  3591                        ;		if (status & STATUS_READY)
  3592                        	.line	684
  3593                        ;		{
  3594 00:0983: A5 03        	lda	<L128+status_1
  3595 00:0985: 29 80 00     	and	#<$80
  3596 00:0988: D0 03        	bne	L130
  3597 00:098A: 82 0C 00     	brl	L10038
  3598                        L130:
  3599                        	.line	685
  3600                        ;			return status;
  3601                        	.line	686
  3602 00:098D: A5 03        	lda	<L128+status_1
  3603                        L131:
  3604 00:098F: A8           	tay
  3605 00:0990: 2B           	pld
  3606 00:0991: 3B           	tsc
  3607 00:0992: 18           	clc
  3608 00:0993: 69 04 00     	adc	#L127
  3609 00:0996: 1B           	tcs
  3610 00:0997: 98           	tya
  3611 00:0998: 6B           	rtl
  3612                        ;		}
  3613                        	.line	687
  3614                        ;	}
  3615                        L10038:
  3616                        	.line	688
  3617                        L10035:
  3618 00:0999: E6 01        	inc	<L128+counter_1
  3619 00:099B: 38           	sec
  3620 00:099C: A5 01        	lda	<L128+counter_1
  3621 00:099E: E9 10 27     	sbc	#<$2710
  3622 00:09A1: 70 03        	bvs	L132
  3623 00:09A3: 49 00 80     	eor	#$8000
  3624                        L132:
  3625 00:09A6: 30 03        	bmi	L133
  3626 00:09A8: 82 D2 FF     	brl	L10037
  3627                        L133:
  3628                        L10036:
  3629                        ;
  3630                        ;	return -3;
  3631                        	.line	690
  3632 00:09AB: A9 FD FF     	lda	#$fffd
  3633 00:09AE: 82 DE FF     	brl	L131
  3634                        ;}
  3635                        	.line	691
  3636                        	.endblock	691
  3637             00000004   L127	equ	4
  Sat Jul 10 2021  1:15                                                Page 71


  3638             00000001   L128	equ	1
  3639                        	ends
  3640                        	efunc
  3641                        	.endfunc	691,1,4
  3642                        	.line	691
  3643                        ;
  3644                        ;static int floppy_transfer_try2(UCHAR* buf, int d
                    o_write, UINT c,UINT h, UINT s)
  3645                        ;{
  3646                        	.line	693
  3647                        	.line	694
  3648                        	code
  3649                        	func
  3650                        	.function	694
  3651                        ~~floppy_transfer_try2:
  3652                        	longa	on
  3653                        	longi	on
  3654 00:09B1: 3B           	tsc
  3655 00:09B2: 38           	sec
  3656 00:09B3: E9 18 00     	sbc	#L134
  3657 00:09B6: 1B           	tcs
  3658 00:09B7: 0B           	phd
  3659 00:09B8: 5B           	tcd
  3660             00000004   buf_0	set	4
  3661             00000008   do_write_0	set	8
  3662             0000000A   c_0	set	10
  3663             0000000C   h_0	set	12
  3664             0000000E   s_0	set	14
  3665                        	.block	694
  3666                        ;	UCHAR st, cyl;
  3667                        ;	int i = 0;
  3668                        ;	UINT max_bytes = 512;
  3669                        ;	UCHAR msr = 0;
  3670                        ;	UCHAR st0 = 0;
  3671                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  3672                        ;	unsigned char byte;
  3673                        ;	int status;
  3674                        ;	int bytes_read;
  3675                        ;	int result;
  3676                        ;
  3677                        ;	motor_on();
  3678             00000000   st_1	set	0
  3679             00000001   cyl_1	set	1
  3680             00000002   i_1	set	2
  3681             00000004   max_bytes_1	set	4
  3682             00000006   msr_1	set	6
  3683             00000007   st0_1	set	7
  3684             00000008   cmd_1	set	8
  3685             00000009   byte_1	set	9
  3686             0000000A   status_1	set	10
  3687             0000000C   bytes_read_1	set	12
  3688             0000000E   result_1	set	14
  3689                        	.sym	st,0,14,1,8
  3690                        	.sym	cyl,1,14,1,8
  3691                        	.sym	i,2,5,1,16
  3692                        	.sym	max_bytes,4,16,1,16
  3693                        	.sym	msr,6,14,1,8
  3694                        	.sym	st0,7,14,1,8
  Sat Jul 10 2021  1:15                                                Page 72


  3695                        	.sym	cmd,8,14,1,8
  3696                        	.sym	byte,9,14,1,8
  3697                        	.sym	status,10,5,1,16
  3698                        	.sym	bytes_read,12,5,1,16
  3699                        	.sym	result,14,5,1,16
  3700                        	.sym	buf,4,142,6,32
  3701                        	.sym	do_write,8,5,6,16
  3702                        	.sym	c,10,16,6,16
  3703                        	.sym	h,12,16,6,16
  3704                        	.sym	s,14,16,6,16
  3705 00:09B9: 64 0B        	stz	<L135+i_1
  3706 00:09BB: A9 00 02     	lda	#$200
  3707 00:09BE: 85 0D        	sta	<L135+max_bytes_1
  3708 00:09C0: E2 20        	sep	#$20
  3709                        	longa	off
  3710 00:09C2: 64 0F        	stz	<L135+msr_1
  3711 00:09C4: C2 20        	rep	#$20
  3712                        	longa	on
  3713 00:09C6: E2 20        	sep	#$20
  3714                        	longa	off
  3715 00:09C8: 64 10        	stz	<L135+st0_1
  3716 00:09CA: C2 20        	rep	#$20
  3717                        	longa	on
  3718 00:09CC: A5 20        	lda	<L134+do_write_0
  3719 00:09CE: D0 03        	bne	L138
  3720 00:09D0: 82 05 00     	brl	L137
  3721                        L138:
  3722 00:09D3: A9 45 00     	lda	#$45
  3723 00:09D6: 80 03        	bra	L139
  3724                        L137:
  3725 00:09D8: A9 46 00     	lda	#$46
  3726                        L139:
  3727 00:09DB: 85 01        	sta	<R0
  3728 00:09DD: E2 20        	sep	#$20
  3729                        	longa	off
  3730 00:09DF: A5 01        	lda	<R0
  3731 00:09E1: 85 11        	sta	<L135+cmd_1
  3732 00:09E3: C2 20        	rep	#$20
  3733                        	longa	on
  3734                        	.line	706
  3735 00:09E5: 22 xx xx xx  	jsl	~~motor_on
  3736                        ;
  3737                        ;	k_debug_string("floppy_transfer_try2\r\n");
  3738                        	.line	708
  3739 00:09E9: F4 xx xx     	pea	#^L126
  3740 00:09EC: F4 xx xx     	pea	#<L126
  3741 00:09EF: 22 xx xx xx  	jsl	~~k_debug_string
  3742                        ;
  3743                        ;	floppy_check_int(&st,&cyl);
  3744                        	.line	710
  3745 00:09F3: F4 00 00     	pea	#0
  3746 00:09F6: 18           	clc
  3747 00:09F7: 7B           	tdc
  3748 00:09F8: 69 0A 00     	adc	#<L135+cyl_1
  3749 00:09FB: 48           	pha
  3750 00:09FC: F4 00 00     	pea	#0
  3751 00:09FF: 18           	clc
  3752 00:0A00: 7B           	tdc
  Sat Jul 10 2021  1:15                                                Page 73


  3753 00:0A01: 69 09 00     	adc	#<L135+st_1
  3754 00:0A04: 48           	pha
  3755 00:0A05: 22 xx xx xx  	jsl	~~floppy_check_int
  3756                        ;
  3757                        ;	//sendbyte(CMD_READ);
  3758                        ;	sendbyte(FD_READ | (((DISK_H1440_HEAD ==2)?1:0) 
                    << 6));
  3759                        	.line	713
  3760 00:0A09: F4 E6 00     	pea	#<$e6
  3761 00:0A0C: 22 xx xx xx  	jsl	~~sendbyte
  3762                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  3763                        	.line	714
  3764 00:0A10: A5 24        	lda	<L134+h_0
  3765 00:0A12: 0A           	asl	A
  3766 00:0A13: 0A           	asl	A
  3767 00:0A14: 85 01        	sta	<R0
  3768 00:0A16: AD xx xx     	lda	|~~cur_drive
  3769 00:0A19: 29 FF 00     	and	#$ff
  3770 00:0A1C: 85 05        	sta	<R1
  3771 00:0A1E: A5 05        	lda	<R1
  3772 00:0A20: 05 01        	ora	<R0
  3773 00:0A22: 48           	pha
  3774 00:0A23: 22 xx xx xx  	jsl	~~sendbyte
  3775                        ;	sendbyte((UCHAR) c);
  3776                        	.line	715
  3777 00:0A27: D4 22        	pei	<L134+c_0
  3778 00:0A29: 22 xx xx xx  	jsl	~~sendbyte
  3779                        ;	sendbyte((UCHAR) h);
  3780                        	.line	716
  3781 00:0A2D: D4 24        	pei	<L134+h_0
  3782 00:0A2F: 22 xx xx xx  	jsl	~~sendbyte
  3783                        ;	sendbyte((UCHAR) s);
  3784                        	.line	717
  3785 00:0A33: D4 26        	pei	<L134+s_0
  3786 00:0A35: 22 xx xx xx  	jsl	~~sendbyte
  3787                        ;	sendbyte(0x2);
  3788                        	.line	718
  3789 00:0A39: F4 02 00     	pea	#<$2
  3790 00:0A3C: 22 xx xx xx  	jsl	~~sendbyte
  3791                        ;	sendbyte(DISK_H1440_SECT);
  3792                        	.line	719
  3793 00:0A40: F4 12 00     	pea	#<$12
  3794 00:0A43: 22 xx xx xx  	jsl	~~sendbyte
  3795                        ;	sendbyte(DISK_H1440_GAP);
  3796                        	.line	720
  3797 00:0A47: F4 1B 00     	pea	#<$1b
  3798 00:0A4A: 22 xx xx xx  	jsl	~~sendbyte
  3799                        ;	sendbyte(0xff);
  3800                        	.line	721
  3801 00:0A4E: F4 FF 00     	pea	#<$ff
  3802 00:0A51: 22 xx xx xx  	jsl	~~sendbyte
  3803                        ;
  3804                        ;	k_debug_string("floppy_transfer_try2:check for R
                    QM\r\n");
  3805                        	.line	723
  3806 00:0A55: F4 xx xx     	pea	#^L126+23
  3807 00:0A58: F4 xx xx     	pea	#<L126+23
  3808 00:0A5B: 22 xx xx xx  	jsl	~~k_debug_string
  Sat Jul 10 2021  1:15                                                Page 74


  3809                        ;	//sleep(10);
  3810                        ;
  3811                        ;	/*
  3812                        ;	i = 32000;
  3813                        ;	msr = 0;//inportb(FDC_MSR);
  3814                        ;	while(status != (STATUS_READY|STATUS_NON_DMA))
  3815                        ;	{
  3816                        ;		//k_debug_integer("floppy_transfer_try2:
                    wait for RQM:",i);
  3817                        ;
  3818                        ;		//k_debug_hex("     RQM:",(msr & 0x80));
  3819                        ;		//k_debug_hex("     DIO:",(msr & 0x40));
  3820                        ;		//k_debug_hex("    NDMA:",(msr & 0x20));
  3821                        ;		//k_debug_hex("    CMDB:",(msr & 0x10));
  3822                        ;		i--;
  3823                        ;		if(i == 0)
  3824                        ;		{
  3825                        ;			//st0 =  inportb(SRA);
  3826                        ;
  3827                        ;			k_debug_integer("floppy_transfer
                    _try2:wait for ready ABORT:",i);
  3828                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  3829                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  3830                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  3831                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  3832                        ;
  3833                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  3834                        ;
  3835                        ;			return 1;
  3836                        ;		}
  3837                        ;		//sleep(30);
  3838                        ;		msr = inportb(FDC_MSR);
  3839                        ;	}
  3840                        ;	*/
  3841                        ;
  3842                        ;	do
  3843                        	.line	757
  3844                        L10041:
  3845                        ;	{
  3846                        	.line	758
  3847                        ;		status =  inportb(FDC_MSR);
  3848                        	.line	759
  3849 00:0A5F: AF F4 13 AF  	lda	>11473908
  3850 00:0A63: 29 FF 00     	and	#$ff
  3851 00:0A66: 85 13        	sta	<L135+status_1
  3852                        ;		status &= STATUS_READY | STATUS_NON_DMA;
  3853                        	.line	760
  3854 00:0A68: A9 5F FF     	lda	#$ff5f
  3855 00:0A6B: 14 13        	trb	<L135+status_1
  3856                        ;	} while (status != (STATUS_READY | STATUS_NON_DM
                    A));
  3857                        	.line	761
  3858                        L10039:
  Sat Jul 10 2021  1:15                                                Page 75


  3859 00:0A6D: A5 13        	lda	<L135+status_1
  3860 00:0A6F: C9 A0 00     	cmp	#<$a0
  3861 00:0A72: F0 03        	beq	L140
  3862 00:0A74: 82 E8 FF     	brl	L10041
  3863                        L140:
  3864                        L10040:
  3865                        ;
  3866                        ;
  3867                        ;	//st0 =  inportb(SRA);
  3868                        ;	k_debug_string("floppy_transfer_try2:read start\
                    r\n");
  3869                        	.line	765
  3870 00:0A77: F4 xx xx     	pea	#^L126+60
  3871 00:0A7A: F4 xx xx     	pea	#<L126+60
  3872 00:0A7D: 22 xx xx xx  	jsl	~~k_debug_string
  3873                        ;	//k_debug_hex("     RQM:",(msr & 0x80));
  3874                        ;	//k_debug_hex("     DIO:",(msr & 0x40));
  3875                        ;	//k_debug_hex("    NDMA:",(msr & 0x20));
  3876                        ;	//k_debug_hex("    CMDB:",(msr & 0x10));
  3877                        ;	//k_debug_hex("     IRQ:",(st0 & 0x80));
  3878                        ;
  3879                        ;
  3880                        ;	for (i = 0; i < max_bytes; i++)
  3881                        	.line	773
  3882 00:0A81: 64 0B        	stz	<L135+i_1
  3883 00:0A83: 82 44 00     	brl	L10045
  3884                        L10044:
  3885                        ;	{
  3886                        	.line	774
  3887                        ;		if ((status = wait_til_ready()) < 0)
  3888                        	.line	775
  3889                        ;		{
  3890 00:0A86: 22 xx xx xx  	jsl	~~wait_til_ready
  3891 00:0A8A: 85 13        	sta	<L135+status_1
  3892 00:0A8C: A5 13        	lda	<L135+status_1
  3893 00:0A8E: 30 03        	bmi	L141
  3894 00:0A90: 82 03 00     	brl	L10046
  3895                        L141:
  3896                        	.line	776
  3897                        ;			break;
  3898                        	.line	777
  3899 00:0A93: 82 3D 00     	brl	L10043
  3900                        ;		}
  3901                        	.line	778
  3902                        ;		status &= STATUS_READY | STATUS_DIR | ST
                    ATUS_NON_DMA;
  3903                        L10046:
  3904                        	.line	779
  3905 00:0A96: A9 1F FF     	lda	#$ff1f
  3906 00:0A99: 14 13        	trb	<L135+status_1
  3907                        ;		if (status != (STATUS_READY | STATUS_DIR
                     | STATUS_NON_DMA))
  3908                        	.line	780
  3909                        ;		{
  3910 00:0A9B: A5 13        	lda	<L135+status_1
  3911 00:0A9D: C9 E0 00     	cmp	#<$e0
  3912 00:0AA0: D0 03        	bne	L142
  3913 00:0AA2: 82 03 00     	brl	L10047
  Sat Jul 10 2021  1:15                                                Page 76


  3914                        L142:
  3915                        	.line	781
  3916                        ;			break;
  3917                        	.line	782
  3918 00:0AA5: 82 2B 00     	brl	L10043
  3919                        ;		}
  3920                        	.line	783
  3921                        ;		byte = getbyte();
  3922                        L10047:
  3923                        	.line	784
  3924 00:0AA8: 22 xx xx xx  	jsl	~~getbyte
  3925 00:0AAC: E2 20        	sep	#$20
  3926                        	longa	off
  3927 00:0AAE: 85 12        	sta	<L135+byte_1
  3928 00:0AB0: C2 20        	rep	#$20
  3929                        	longa	on
  3930                        ;		k_debug_hex("READ:",byte);
  3931                        	.line	785
  3932 00:0AB2: D4 12        	pei	<L135+byte_1
  3933 00:0AB4: F4 xx xx     	pea	#^L126+94
  3934 00:0AB7: F4 xx xx     	pea	#<L126+94
  3935 00:0ABA: 22 xx xx xx  	jsl	~~k_debug_hex
  3936                        ;		buf[i] = byte;
  3937                        	.line	786
  3938 00:0ABE: E2 20        	sep	#$20
  3939                        	longa	off
  3940 00:0AC0: A5 12        	lda	<L135+byte_1
  3941 00:0AC2: A4 0B        	ldy	<L135+i_1
  3942 00:0AC4: 97 1C        	sta	[<L134+buf_0],Y
  3943 00:0AC6: C2 20        	rep	#$20
  3944                        	longa	on
  3945                        ;	}
  3946                        	.line	787
  3947                        L10042:
  3948 00:0AC8: E6 0B        	inc	<L135+i_1
  3949                        L10045:
  3950 00:0ACA: A5 0B        	lda	<L135+i_1
  3951 00:0ACC: C5 0D        	cmp	<L135+max_bytes_1
  3952 00:0ACE: B0 03        	bcs	L143
  3953 00:0AD0: 82 B3 FF     	brl	L10044
  3954                        L143:
  3955                        L10043:
  3956                        ;	bytes_read = i;
  3957                        	.line	788
  3958 00:0AD3: A5 0B        	lda	<L135+i_1
  3959 00:0AD5: 85 15        	sta	<L135+bytes_read_1
  3960                        ;
  3961                        ;	/* The result stage begins when STATUS_NON_DMA i
                    s cleared */
  3962                        ;	while ((status = inportb(FDC_MSR)) & STATUS_NON_
                    DMA)
  3963                        	.line	791
  3964                        L10048:
  3965 00:0AD7: AF F4 13 AF  	lda	>11473908
  3966 00:0ADB: 29 FF 00     	and	#$ff
  3967 00:0ADE: 85 13        	sta	<L135+status_1
  3968 00:0AE0: A5 13        	lda	<L135+status_1
  3969 00:0AE2: 29 20 00     	and	#<$20
  Sat Jul 10 2021  1:15                                                Page 77


  3970 00:0AE5: D0 03        	bne	L144
  3971 00:0AE7: 82 07 00     	brl	L10049
  3972                        L144:
  3973                        ;	{
  3974                        	.line	792
  3975                        ;		/* We get extra bytes in the fifo  past
  3976                        ;		 * the end of the sector and drop them o
                    n the floor.
  3977                        ;		 * Otherwise the fifo is polluted.
  3978                        ;		 */
  3979                        ;		getbyte();
  3980                        	.line	797
  3981 00:0AEA: 22 xx xx xx  	jsl	~~getbyte
  3982                        ;	}
  3983                        	.line	798
  3984 00:0AEE: 82 E6 FF     	brl	L10048
  3985                        L10049:
  3986                        ;	/*
  3987                        ;	for (i = 0; i < SECTOR_SIZE ; i++)
  3988                        ;	{
  3989                        ;		msr = inportb(FDC_MSR);
  3990                        ;		if((msr & 0xC0) || (msr & 0x20))
  3991                        ;		{
  3992                        ;
  3993                        ;			buf[i] = inportb(FDC_DATA);
  3994                        ;
  3995                        ;			if(buf[i]!=0xFF)
  3996                        ;			{
  3997                        ;				//k_debug_integer("INDEX
                    :", i);
  3998                        ;				k_debug_hex("READ:", buf
                    [i]);
  3999                        ;			}
  4000                        ;
  4001                        ;			//sleep(20);
  4002                        ;		}
  4003                        ;		else
  4004                        ;		{
  4005                        ;			st0 =  inportb(SRA);
  4006                        ;			k_debug_integer("floppy_transfer
                    _try2:read quit:",i);
  4007                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  4008                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  4009                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  4010                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  4011                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  4012                        ;			break;
  4013                        ;		}
  4014                        ;		//msr = inportb(FDC_MSR);
  4015                        ;	}
  4016                        ;	*/
  4017                        ;
  4018                        ;	msr = inportb(FDC_MSR);
  Sat Jul 10 2021  1:15                                                Page 78


  4019                        	.line	831
  4020 00:0AF1: E2 20        	sep	#$20
  4021                        	longa	off
  4022 00:0AF3: AF F4 13 AF  	lda	>11473908
  4023 00:0AF7: 85 0F        	sta	<L135+msr_1
  4024 00:0AF9: C2 20        	rep	#$20
  4025                        	longa	on
  4026                        ;
  4027                        ;	//st0 =  inportb(SRA);
  4028                        ;	k_debug_string("floppy_transfer_try2:read comple
                    te\r\n");
  4029                        	.line	834
  4030 00:0AFB: F4 xx xx     	pea	#^L126+100
  4031 00:0AFE: F4 xx xx     	pea	#<L126+100
  4032 00:0B01: 22 xx xx xx  	jsl	~~k_debug_string
  4033                        ;	//k_debug_hex("     RQM:",(msr & 0x80));
  4034                        ;	//k_debug_hex("     DIO:",(msr & 0x40));
  4035                        ;	//k_debug_hex("    NDMA:",(msr & 0x20));
  4036                        ;	//k_debug_hex("    CMDB:",(msr & 0x10));
  4037                        ;	//k_debug_hex("     IRQ:",(st0 & 0x80));
  4038                        ;
  4039                        ;	/*
  4040                        ;	i = 0xFFF;
  4041                        ;	msr = inportb(FDC_MSR);
  4042                        ;	while(!(msr & 0x80))
  4043                        ;	{
  4044                        ;
  4045                        ;		//k_debug_integer("floppy_transfer_try2:
                    wait for result:",i);
  4046                        ;
  4047                        ;		//k_debug_hex("     RQM:",(msr & 0x80));
  4048                        ;		//k_debug_hex("     DIO:",(msr & 0x40));
  4049                        ;		//k_debug_hex("    NDMA:",(msr & 0x20));
  4050                        ;		//k_debug_hex("    CMDB:",(msr & 0x10));
  4051                        ;		i--;
  4052                        ;		if(i == 0)
  4053                        ;		{
  4054                        ;			//st0 =  inportb(SRA);
  4055                        ;			k_debug_integer("floppy_transfer
                    _try2:wait for result ABORT:",i);
  4056                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  4057                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  4058                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  4059                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  4060                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  4061                        ;			//return 1;
  4062                        ;		}
  4063                        ;
  4064                        ;		msr = inportb(FDC_MSR);
  4065                        ;		//sleep(30);
  4066                        ;	}
  4067                        ;	*/
  4068                        ;
  Sat Jul 10 2021  1:15                                                Page 79


  4069                        ;	reg_sr0 = getbyte();
  4070                        	.line	871
  4071 00:0B05: 22 xx xx xx  	jsl	~~getbyte
  4072 00:0B09: E2 20        	sep	#$20
  4073                        	longa	off
  4074 00:0B0B: 8D xx xx     	sta	|~~reg_sr0
  4075 00:0B0E: C2 20        	rep	#$20
  4076                        	longa	on
  4077                        ;	k_debug_integer("floppy_transfer_try2:reg_sr0:",
                    reg_sr0);
  4078                        	.line	872
  4079 00:0B10: AD xx xx     	lda	|~~reg_sr0
  4080 00:0B13: 29 FF 00     	and	#$ff
  4081 00:0B16: 48           	pha
  4082 00:0B17: F4 xx xx     	pea	#^L126+137
  4083 00:0B1A: F4 xx xx     	pea	#<L126+137
  4084 00:0B1D: 22 xx xx xx  	jsl	~~k_debug_integer
  4085                        ;	reg_sr1 = getbyte();
  4086                        	.line	873
  4087 00:0B21: 22 xx xx xx  	jsl	~~getbyte
  4088 00:0B25: E2 20        	sep	#$20
  4089                        	longa	off
  4090 00:0B27: 8D xx xx     	sta	|~~reg_sr1
  4091 00:0B2A: C2 20        	rep	#$20
  4092                        	longa	on
  4093                        ;	k_debug_integer("floppy_transfer_try2:reg_sr1:",
                    reg_sr1);
  4094                        	.line	874
  4095 00:0B2C: AD xx xx     	lda	|~~reg_sr1
  4096 00:0B2F: 29 FF 00     	and	#$ff
  4097 00:0B32: 48           	pha
  4098 00:0B33: F4 xx xx     	pea	#^L126+167
  4099 00:0B36: F4 xx xx     	pea	#<L126+167
  4100 00:0B39: 22 xx xx xx  	jsl	~~k_debug_integer
  4101                        ;	reg_sr2 = getbyte();
  4102                        	.line	875
  4103 00:0B3D: 22 xx xx xx  	jsl	~~getbyte
  4104 00:0B41: E2 20        	sep	#$20
  4105                        	longa	off
  4106 00:0B43: 8D xx xx     	sta	|~~reg_sr2
  4107 00:0B46: C2 20        	rep	#$20
  4108                        	longa	on
  4109                        ;	k_debug_integer("floppy_transfer_try2:reg_sr2:",
                    reg_sr2);
  4110                        	.line	876
  4111 00:0B48: AD xx xx     	lda	|~~reg_sr2
  4112 00:0B4B: 29 FF 00     	and	#$ff
  4113 00:0B4E: 48           	pha
  4114 00:0B4F: F4 xx xx     	pea	#^L126+197
  4115 00:0B52: F4 xx xx     	pea	#<L126+197
  4116 00:0B55: 22 xx xx xx  	jsl	~~k_debug_integer
  4117                        ;	drives[cur_drive].track = getbyte();
  4118                        	.line	877
  4119 00:0B59: AD xx xx     	lda	|~~cur_drive
  4120 00:0B5C: 29 FF 00     	and	#$ff
  4121 00:0B5F: 85 01        	sta	<R0
  4122 00:0B61: A5 01        	lda	<R0
  4123 00:0B63: 0A           	asl	A
  Sat Jul 10 2021  1:15                                                Page 80


  4124 00:0B64: 65 01        	adc	<R0
  4125 00:0B66: 0A           	asl	A
  4126 00:0B67: 85 01        	sta	<R0
  4127 00:0B69: 22 xx xx xx  	jsl	~~getbyte
  4128 00:0B6D: A6 01        	ldx	<R0
  4129 00:0B6F: 9D xx xx     	sta	|~~drives,X
  4130                        ;	k_debug_integer("floppy_transfer_try2:C:",drives
                    [cur_drive].track);
  4131                        	.line	878
  4132 00:0B72: AD xx xx     	lda	|~~cur_drive
  4133 00:0B75: 29 FF 00     	and	#$ff
  4134 00:0B78: 85 01        	sta	<R0
  4135 00:0B7A: A5 01        	lda	<R0
  4136 00:0B7C: 0A           	asl	A
  4137 00:0B7D: 65 01        	adc	<R0
  4138 00:0B7F: 0A           	asl	A
  4139 00:0B80: 85 01        	sta	<R0
  4140 00:0B82: A6 01        	ldx	<R0
  4141 00:0B84: BD xx xx     	lda	|~~drives,X
  4142 00:0B87: 48           	pha
  4143 00:0B88: F4 xx xx     	pea	#^L126+227
  4144 00:0B8B: F4 xx xx     	pea	#<L126+227
  4145 00:0B8E: 22 xx xx xx  	jsl	~~k_debug_integer
  4146                        ;
  4147                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  4148                        ;
  4149                        ;	i = getbyte();
  4150                        	.line	882
  4151 00:0B92: 22 xx xx xx  	jsl	~~getbyte
  4152 00:0B96: 85 0B        	sta	<L135+i_1
  4153                        ;	k_debug_integer("floppy_transfer_try2:H:",i);
  4154                        	.line	883
  4155 00:0B98: D4 0B        	pei	<L135+i_1
  4156 00:0B9A: F4 xx xx     	pea	#^L126+251
  4157 00:0B9D: F4 xx xx     	pea	#<L126+251
  4158 00:0BA0: 22 xx xx xx  	jsl	~~k_debug_integer
  4159                        ;	i = getbyte();
  4160                        	.line	884
  4161 00:0BA4: 22 xx xx xx  	jsl	~~getbyte
  4162 00:0BA8: 85 0B        	sta	<L135+i_1
  4163                        ;	k_debug_integer("floppy_transfer_try2:R:",i);
  4164                        	.line	885
  4165 00:0BAA: D4 0B        	pei	<L135+i_1
  4166 00:0BAC: F4 xx xx     	pea	#^L126+275
  4167 00:0BAF: F4 xx xx     	pea	#<L126+275
  4168 00:0BB2: 22 xx xx xx  	jsl	~~k_debug_integer
  4169                        ;	i = getbyte();
  4170                        	.line	886
  4171 00:0BB6: 22 xx xx xx  	jsl	~~getbyte
  4172 00:0BBA: 85 0B        	sta	<L135+i_1
  4173                        ;	k_debug_integer("floppy_transfer_try2:N:",i);
  4174                        	.line	887
  4175 00:0BBC: D4 0B        	pei	<L135+i_1
  4176 00:0BBE: F4 xx xx     	pea	#^L126+299
  4177 00:0BC1: F4 xx xx     	pea	#<L126+299
  4178 00:0BC4: 22 xx xx xx  	jsl	~~k_debug_integer
  4179                        ;
  Sat Jul 10 2021  1:15                                                Page 81


  4180                        ;
  4181                        ;	floppy_check_int(&st, &cyl);
  4182                        	.line	890
  4183 00:0BC8: F4 00 00     	pea	#0
  4184 00:0BCB: 18           	clc
  4185 00:0BCC: 7B           	tdc
  4186 00:0BCD: 69 0A 00     	adc	#<L135+cyl_1
  4187 00:0BD0: 48           	pha
  4188 00:0BD1: F4 00 00     	pea	#0
  4189 00:0BD4: 18           	clc
  4190 00:0BD5: 7B           	tdc
  4191 00:0BD6: 69 09 00     	adc	#<L135+st_1
  4192 00:0BD9: 48           	pha
  4193 00:0BDA: 22 xx xx xx  	jsl	~~floppy_check_int
  4194                        ;	//k_debug_hex("floppy_transfer_try2:st:",st);
  4195                        ;	//k_debug_hex("floppy_transfer_try2:cyl:",cyl);
  4196                        ;
  4197                        ;	result = (i != 2);
  4198                        	.line	894
  4199 00:0BDE: 64 01        	stz	<R0
  4200 00:0BE0: A5 0B        	lda	<L135+i_1
  4201 00:0BE2: C9 02 00     	cmp	#<$2
  4202 00:0BE5: D0 03        	bne	L146
  4203 00:0BE7: 82 02 00     	brl	L145
  4204                        L146:
  4205 00:0BEA: E6 01        	inc	<R0
  4206                        L145:
  4207 00:0BEC: A5 01        	lda	<R0
  4208 00:0BEE: 85 17        	sta	<L135+result_1
  4209                        ;
  4210                        ;
  4211                        ;	k_debug_string("floppy_transfer_try2:read exit\r
                    \n");
  4212                        	.line	897
  4213 00:0BF0: F4 xx xx     	pea	#^L126+323
  4214 00:0BF3: F4 xx xx     	pea	#<L126+323
  4215 00:0BF6: 22 xx xx xx  	jsl	~~k_debug_string
  4216                        ;
  4217                        ;	return result;
  4218                        	.line	899
  4219 00:0BFA: A5 17        	lda	<L135+result_1
  4220                        L147:
  4221 00:0BFC: A8           	tay
  4222 00:0BFD: A5 1A        	lda	<L134+2
  4223 00:0BFF: 85 26        	sta	<L134+2+12
  4224 00:0C01: A5 19        	lda	<L134+1
  4225 00:0C03: 85 25        	sta	<L134+1+12
  4226 00:0C05: 2B           	pld
  4227 00:0C06: 3B           	tsc
  4228 00:0C07: 18           	clc
  4229 00:0C08: 69 24 00     	adc	#L134+12
  4230 00:0C0B: 1B           	tcs
  4231 00:0C0C: 98           	tya
  4232 00:0C0D: 6B           	rtl
  4233                        ;
  4234                        ;}
  4235                        	.line	901
  4236                        	.endblock	901
  Sat Jul 10 2021  1:15                                                Page 82


  4237             00000018   L134	equ	24
  4238             00000009   L135	equ	9
  4239                        	ends
  4240                        	efunc
  4241                        	.endfunc	901,9,24
  4242                        	.line	901
  4243                        	data
  4244                        L126:
  4245 00:0351: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0355: 70 79 5F 74 
       00:0359: 72 61 6E 73 
       00:035D: 66 65 72 
  4246 00:0360: 5F 74 72 79  	db	$5F,$74,$72,$79,$32,$0D,$0A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:0364: 32 0D 0A 00 
       00:0368: 66 6C 6F 70 
       00:036C: 70 79 5F 
  4247 00:036F: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$32,$3A,$63
       00:0373: 73 66 65 72 
       00:0377: 5F 74 72 79 
       00:037B: 32 3A 63 
  4248 00:037E: 68 65 63 6B  	db	$68,$65,$63,$6B,$20,$66,$6F,$72,$20,$52,
                    $51,$4D,$0D,$0A,$00
       00:0382: 20 66 6F 72 
       00:0386: 20 52 51 4D 
       00:038A: 0D 0A 00 
  4249 00:038D: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0391: 70 79 5F 74 
       00:0395: 72 61 6E 73 
       00:0399: 66 65 72 
  4250 00:039C: 5F 74 72 79  	db	$5F,$74,$72,$79,$32,$3A,$72,$65,$61,$64,
                    $20,$73,$74,$61,$72
       00:03A0: 32 3A 72 65 
       00:03A4: 61 64 20 73 
       00:03A8: 74 61 72 
  4251 00:03AB: 74 0D 0A 00  	db	$74,$0D,$0A,$00,$52,$45,$41,$44,$3A,$00,
                    $66,$6C,$6F,$70,$70
       00:03AF: 52 45 41 44 
       00:03B3: 3A 00 66 6C 
       00:03B7: 6F 70 70 
  4252 00:03BA: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$32
       00:03BE: 61 6E 73 66 
       00:03C2: 65 72 5F 74 
       00:03C6: 72 79 32 
  4253 00:03C9: 3A 72 65 61  	db	$3A,$72,$65,$61,$64,$20,$63,$6F,$6D,$70,
                    $6C,$65,$74,$65,$0D
       00:03CD: 64 20 63 6F 
       00:03D1: 6D 70 6C 65 
       00:03D5: 74 65 0D 
  4254 00:03D8: 0A 00 66 6C  	db	$0A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:03DC: 6F 70 70 79 
       00:03E0: 5F 74 72 61 
       00:03E4: 6E 73 66 
  Sat Jul 10 2021  1:15                                                Page 83


  4255 00:03E7: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$30
       00:03EB: 72 79 32 3A 
       00:03EF: 72 65 67 5F 
       00:03F3: 73 72 30 
  4256 00:03F6: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:03FA: 6F 70 70 79 
       00:03FE: 5F 74 72 61 
       00:0402: 6E 73 66 
  4257 00:0405: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$31
       00:0409: 72 79 32 3A 
       00:040D: 72 65 67 5F 
       00:0411: 73 72 31 
  4258 00:0414: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:0418: 6F 70 70 79 
       00:041C: 5F 74 72 61 
       00:0420: 6E 73 66 
  4259 00:0423: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$32
       00:0427: 72 79 32 3A 
       00:042B: 72 65 67 5F 
       00:042F: 73 72 32 
  4260 00:0432: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:0436: 6F 70 70 79 
       00:043A: 5F 74 72 61 
       00:043E: 6E 73 66 
  4261 00:0441: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$43,$3A,
                    $00,$66,$6C,$6F,$70
       00:0445: 72 79 32 3A 
       00:0449: 43 3A 00 66 
       00:044D: 6C 6F 70 
  4262 00:0450: 70 79 5F 74  	db	$70,$79,$5F,$74,$72,$61,$6E,$73,$66,$65,
                    $72,$5F,$74,$72,$79
       00:0454: 72 61 6E 73 
       00:0458: 66 65 72 5F 
       00:045C: 74 72 79 
  4263 00:045F: 32 3A 48 3A  	db	$32,$3A,$48,$3A,$00,$66,$6C,$6F,$70,$70,
                    $79,$5F,$74,$72,$61
       00:0463: 00 66 6C 6F 
       00:0467: 70 70 79 5F 
       00:046B: 74 72 61 
  4264 00:046E: 6E 73 66 65  	db	$6E,$73,$66,$65,$72,$5F,$74,$72,$79,$32,
                    $3A,$52,$3A,$00,$66
       00:0472: 72 5F 74 72 
       00:0476: 79 32 3A 52 
       00:047A: 3A 00 66 
  4265 00:047D: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:0481: 79 5F 74 72 
       00:0485: 61 6E 73 66 
       00:0489: 65 72 5F 
  4266 00:048C: 74 72 79 32  	db	$74,$72,$79,$32,$3A,$4E,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:0490: 3A 4E 3A 00 
  Sat Jul 10 2021  1:15                                                Page 84


       00:0494: 66 6C 6F 70 
       00:0498: 70 79 5F 
  4267 00:049B: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$32,$3A,$72
       00:049F: 73 66 65 72 
       00:04A3: 5F 74 72 79 
       00:04A7: 32 3A 72 
  4268 00:04AA: 65 61 64 20  	db	$65,$61,$64,$20,$65,$78,$69,$74,$0D,$0A,
                    $00
       00:04AE: 65 78 69 74 
       00:04B2: 0D 0A 00 
  4269 00:04B5:              	ends
  4270                        ;
  4271                        ;
  4272                        ;static int floppy_transfer(UCHAR *buf, int do_wri
                    te, UINT c, UINT h,UINT s)
  4273                        ;{
  4274                        	.line	904
  4275                        	.line	905
  4276                        	code
  4277                        	func
  4278                        	.function	905
  4279                        ~~floppy_transfer:
  4280                        	longa	on
  4281                        	longi	on
  4282 00:0C0E: 3B           	tsc
  4283 00:0C0F: 38           	sec
  4284 00:0C10: E9 04 00     	sbc	#L149
  4285 00:0C13: 1B           	tcs
  4286 00:0C14: 0B           	phd
  4287 00:0C15: 5B           	tcd
  4288             00000004   buf_0	set	4
  4289             00000008   do_write_0	set	8
  4290             0000000A   c_0	set	10
  4291             0000000C   h_0	set	12
  4292             0000000E   s_0	set	14
  4293                        	.block	905
  4294                        ;	int i;
  4295                        ;	int res = 0 ;
  4296                        ;
  4297                        ;	i = floppy_seek(c);
  4298             00000000   i_1	set	0
  4299             00000002   res_1	set	2
  4300                        	.sym	i,0,5,1,16
  4301                        	.sym	res,2,5,1,16
  4302                        	.sym	buf,4,142,6,32
  4303                        	.sym	do_write,8,5,6,16
  4304                        	.sym	c,10,16,6,16
  4305                        	.sym	h,12,16,6,16
  4306                        	.sym	s,14,16,6,16
  4307 00:0C16: 64 03        	stz	<L150+res_1
  4308                        	.line	909
  4309 00:0C18: D4 0E        	pei	<L149+c_0
  4310 00:0C1A: 22 xx xx xx  	jsl	~~floppy_seek
  4311 00:0C1E: 85 01        	sta	<L150+i_1
  4312                        ;
  4313                        ;	k_debug_integer("floppy_transfer:i:", i);
  4314                        	.line	911
  Sat Jul 10 2021  1:15                                                Page 85


  4315 00:0C20: D4 01        	pei	<L150+i_1
  4316 00:0C22: F4 xx xx     	pea	#^L148
  4317 00:0C25: F4 xx xx     	pea	#<L148
  4318 00:0C28: 22 xx xx xx  	jsl	~~k_debug_integer
  4319                        ;	k_debug_integer("floppy_transfer:c:", c);
  4320                        	.line	912
  4321 00:0C2C: D4 0E        	pei	<L149+c_0
  4322 00:0C2E: F4 xx xx     	pea	#^L148+19
  4323 00:0C31: F4 xx xx     	pea	#<L148+19
  4324 00:0C34: 22 xx xx xx  	jsl	~~k_debug_integer
  4325                        ;	k_debug_integer("floppy_transfer:h:", h);
  4326                        	.line	913
  4327 00:0C38: D4 10        	pei	<L149+h_0
  4328 00:0C3A: F4 xx xx     	pea	#^L148+38
  4329 00:0C3D: F4 xx xx     	pea	#<L148+38
  4330 00:0C40: 22 xx xx xx  	jsl	~~k_debug_integer
  4331                        ;	k_debug_integer("floppy_transfer:s:", s);
  4332                        	.line	914
  4333 00:0C44: D4 12        	pei	<L149+s_0
  4334 00:0C46: F4 xx xx     	pea	#^L148+57
  4335 00:0C49: F4 xx xx     	pea	#<L148+57
  4336 00:0C4C: 22 xx xx xx  	jsl	~~k_debug_integer
  4337                        ;
  4338                        ;	/*
  4339                        ;	res = -1;
  4340                        ;	for (i = 0; i < 4; i++)
  4341                        ;	{
  4342                        ;		if(!floppy_transfer_try2(buf, do_write, 
                    c, h, s))
  4343                        ;		{
  4344                        ;			if (!(reg_sr0 & 0xC0))
  4345                        ;			{
  4346                        ;				res = 0;
  4347                        ;				break;
  4348                        ;			}
  4349                        ;			if (do_write && (reg_sr1 & 0x2))
  4350                        ;			{
  4351                        ;				res = 1;
  4352                        ;				break;
  4353                        ;			}
  4354                        ;		}
  4355                        ;	}
  4356                        ;	return res;
  4357                        ;	*/
  4358                        ;
  4359                        ;	//return floppy_transfer_try2(buf, do_write, c, 
                    h, s);
  4360                        ;	return floppy_transfer_try1(buf, do_write, c, h,
                     s);
  4361                        	.line	938
  4362 00:0C50: D4 12        	pei	<L149+s_0
  4363 00:0C52: D4 10        	pei	<L149+h_0
  4364 00:0C54: D4 0E        	pei	<L149+c_0
  4365 00:0C56: D4 0C        	pei	<L149+do_write_0
  4366 00:0C58: D4 0A        	pei	<L149+buf_0+2
  4367 00:0C5A: D4 08        	pei	<L149+buf_0
  4368 00:0C5C: 22 xx xx xx  	jsl	~~floppy_transfer_try1
  4369                        L152:
  Sat Jul 10 2021  1:15                                                Page 86


  4370 00:0C60: A8           	tay
  4371 00:0C61: A5 06        	lda	<L149+2
  4372 00:0C63: 85 12        	sta	<L149+2+12
  4373 00:0C65: A5 05        	lda	<L149+1
  4374 00:0C67: 85 11        	sta	<L149+1+12
  4375 00:0C69: 2B           	pld
  4376 00:0C6A: 3B           	tsc
  4377 00:0C6B: 18           	clc
  4378 00:0C6C: 69 10 00     	adc	#L149+12
  4379 00:0C6F: 1B           	tcs
  4380 00:0C70: 98           	tya
  4381 00:0C71: 6B           	rtl
  4382                        ;
  4383                        ;}
  4384                        	.line	940
  4385                        	.endblock	940
  4386             00000004   L149	equ	4
  4387             00000001   L150	equ	1
  4388                        	ends
  4389                        	efunc
  4390                        	.endfunc	940,1,4
  4391                        	.line	940
  4392                        	data
  4393                        L148:
  4394 00:04B5: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:04B9: 70 79 5F 74 
       00:04BD: 72 61 6E 73 
       00:04C1: 66 65 72 
  4395 00:04C4: 3A 69 3A 00  	db	$3A,$69,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
       00:04C8: 66 6C 6F 70 
       00:04CC: 70 79 5F 74 
       00:04D0: 72 61 6E 
  4396 00:04D3: 73 66 65 72  	db	$73,$66,$65,$72,$3A,$63,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:04D7: 3A 63 3A 00 
       00:04DB: 66 6C 6F 70 
       00:04DF: 70 79 5F 
  4397 00:04E2: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$3A,$68,
                    $3A,$00,$66,$6C,$6F
       00:04E6: 73 66 65 72 
       00:04EA: 3A 68 3A 00 
       00:04EE: 66 6C 6F 
  4398 00:04F1: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$3A,$73,$3A
       00:04F5: 74 72 61 6E 
       00:04F9: 73 66 65 72 
       00:04FD: 3A 73 3A 
  4399 00:0500: 00           	db	$00
  4400 00:0501:              	ends
  4401                        ;
  4402                        ;static int floppy_transfer_lba(UCHAR *buf, ULONG 
                    lba, UINT num,int do_write)
  4403                        ;{
  4404                        	.line	942
  4405                        	.line	943
  4406                        	code
  Sat Jul 10 2021  1:15                                                Page 87


  4407                        	func
  4408                        	.function	943
  4409                        ~~floppy_transfer_lba:
  4410                        	longa	on
  4411                        	longi	on
  4412 00:0C72: 3B           	tsc
  4413 00:0C73: 38           	sec
  4414 00:0C74: E9 0A 00     	sbc	#L154
  4415 00:0C77: 1B           	tcs
  4416 00:0C78: 0B           	phd
  4417 00:0C79: 5B           	tcd
  4418             00000004   buf_0	set	4
  4419             00000008   lba_0	set	8
  4420             0000000C   num_0	set	12
  4421             0000000E   do_write_0	set	14
  4422                        	.block	943
  4423                        ;	int i;
  4424                        ;	int res = 0;
  4425                        ;	UINT c, h, s;
  4426                        ;
  4427                        ;	motor_on();
  4428             00000000   i_1	set	0
  4429             00000002   res_1	set	2
  4430             00000004   c_1	set	4
  4431             00000006   h_1	set	6
  4432             00000008   s_1	set	8
  4433                        	.sym	i,0,5,1,16
  4434                        	.sym	res,2,5,1,16
  4435                        	.sym	c,4,16,1,16
  4436                        	.sym	h,6,16,1,16
  4437                        	.sym	s,8,16,1,16
  4438                        	.sym	buf,4,142,6,32
  4439                        	.sym	lba,8,18,6,32
  4440                        	.sym	num,12,16,6,16
  4441                        	.sym	do_write,14,5,6,16
  4442 00:0C7A: 64 03        	stz	<L155+res_1
  4443                        	.line	948
  4444 00:0C7C: 22 xx xx xx  	jsl	~~motor_on
  4445                        ;
  4446                        ;	for (i = 0; i < num; i++)
  4447                        	.line	950
  4448 00:0C80: 64 01        	stz	<L155+i_1
  4449 00:0C82: 82 57 00     	brl	L10053
  4450                        L10052:
  4451                        ;	{
  4452                        	.line	951
  4453                        ;		k_debug_long("floppy_transfer_lba:lba:",
                     lba);
  4454                        	.line	952
  4455 00:0C85: D4 14        	pei	<L154+lba_0+2
  4456 00:0C87: D4 12        	pei	<L154+lba_0
  4457 00:0C89: F4 xx xx     	pea	#^L153
  4458 00:0C8C: F4 xx xx     	pea	#<L153
  4459 00:0C8F: 22 xx xx xx  	jsl	~~k_debug_long
  4460                        ;		lba_2_chs(lba, &c, &h, &s);
  4461                        	.line	953
  4462 00:0C93: F4 00 00     	pea	#0
  4463 00:0C96: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 88


  4464 00:0C97: 7B           	tdc
  4465 00:0C98: 69 09 00     	adc	#<L155+s_1
  4466 00:0C9B: 48           	pha
  4467 00:0C9C: F4 00 00     	pea	#0
  4468 00:0C9F: 18           	clc
  4469 00:0CA0: 7B           	tdc
  4470 00:0CA1: 69 07 00     	adc	#<L155+h_1
  4471 00:0CA4: 48           	pha
  4472 00:0CA5: F4 00 00     	pea	#0
  4473 00:0CA8: 18           	clc
  4474 00:0CA9: 7B           	tdc
  4475 00:0CAA: 69 05 00     	adc	#<L155+c_1
  4476 00:0CAD: 48           	pha
  4477 00:0CAE: D4 14        	pei	<L154+lba_0+2
  4478 00:0CB0: D4 12        	pei	<L154+lba_0
  4479 00:0CB2: 22 xx xx xx  	jsl	~~lba_2_chs
  4480                        ;
  4481                        ;		res = floppy_transfer(buf, do_write, c, 
                    h, s);
  4482                        	.line	955
  4483 00:0CB6: D4 09        	pei	<L155+s_1
  4484 00:0CB8: D4 07        	pei	<L155+h_1
  4485 00:0CBA: D4 05        	pei	<L155+c_1
  4486 00:0CBC: D4 18        	pei	<L154+do_write_0
  4487 00:0CBE: D4 10        	pei	<L154+buf_0+2
  4488 00:0CC0: D4 0E        	pei	<L154+buf_0
  4489 00:0CC2: 22 xx xx xx  	jsl	~~floppy_transfer
  4490 00:0CC6: 85 03        	sta	<L155+res_1
  4491                        ;		k_debug_integer("floppy_transfer_lba:res
                    :", res);
  4492                        	.line	956
  4493 00:0CC8: D4 03        	pei	<L155+res_1
  4494 00:0CCA: F4 xx xx     	pea	#^L153+25
  4495 00:0CCD: F4 xx xx     	pea	#<L153+25
  4496 00:0CD0: 22 xx xx xx  	jsl	~~k_debug_integer
  4497                        ;		lba++;
  4498                        	.line	957
  4499 00:0CD4: E6 12        	inc	<L154+lba_0
  4500 00:0CD6: D0 02        	bne	L157
  4501 00:0CD8: E6 14        	inc	<L154+lba_0+2
  4502                        L157:
  4503                        ;	}
  4504                        	.line	958
  4505                        L10050:
  4506 00:0CDA: E6 01        	inc	<L155+i_1
  4507                        L10053:
  4508 00:0CDC: A5 01        	lda	<L155+i_1
  4509 00:0CDE: C5 16        	cmp	<L154+num_0
  4510 00:0CE0: B0 03        	bcs	L158
  4511 00:0CE2: 82 A0 FF     	brl	L10052
  4512                        L158:
  4513                        L10051:
  4514                        ;
  4515                        ;	motor_off();
  4516                        	.line	960
  4517 00:0CE5: 22 xx xx xx  	jsl	~~motor_off
  4518                        ;
  4519                        ;	return res;
  Sat Jul 10 2021  1:15                                                Page 89


  4520                        	.line	962
  4521 00:0CE9: A5 03        	lda	<L155+res_1
  4522                        L159:
  4523 00:0CEB: A8           	tay
  4524 00:0CEC: A5 0C        	lda	<L154+2
  4525 00:0CEE: 85 18        	sta	<L154+2+12
  4526 00:0CF0: A5 0B        	lda	<L154+1
  4527 00:0CF2: 85 17        	sta	<L154+1+12
  4528 00:0CF4: 2B           	pld
  4529 00:0CF5: 3B           	tsc
  4530 00:0CF6: 18           	clc
  4531 00:0CF7: 69 16 00     	adc	#L154+12
  4532 00:0CFA: 1B           	tcs
  4533 00:0CFB: 98           	tya
  4534 00:0CFC: 6B           	rtl
  4535                        ;}
  4536                        	.line	963
  4537                        	.endblock	963
  4538             0000000A   L154	equ	10
  4539             00000001   L155	equ	1
  4540                        	ends
  4541                        	efunc
  4542                        	.endfunc	963,1,10
  4543                        	.line	963
  4544                        	data
  4545                        L153:
  4546 00:0501: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0505: 70 79 5F 74 
       00:0509: 72 61 6E 73 
       00:050D: 66 65 72 
  4547 00:0510: 5F 6C 62 61  	db	$5F,$6C,$62,$61,$3A,$6C,$62,$61,$3A,$00,
                    $66,$6C,$6F,$70,$70
       00:0514: 3A 6C 62 61 
       00:0518: 3A 00 66 6C 
       00:051C: 6F 70 70 
  4548 00:051F: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$6C,$62,$61,$3A
       00:0523: 61 6E 73 66 
       00:0527: 65 72 5F 6C 
       00:052B: 62 61 3A 
  4549 00:052E: 72 65 73 3A  	db	$72,$65,$73,$3A,$00
       00:0532: 00 
  4550 00:0533:              	ends
  4551                        ;
  4552                        ;int floppy_read(const UCHAR *buf, ULONG offset, U
                    LONG num)
  4553                        ;{
  4554                        	.line	965
  4555                        	.line	966
  4556                        	code
  4557                        	xdef	~~floppy_read
  4558                        	func
  4559                        	.function	966
  4560                        ~~floppy_read:
  4561                        	longa	on
  4562                        	longi	on
  4563 00:0CFD: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 90


  4564 00:0CFE: 38           	sec
  4565 00:0CFF: E9 00 00     	sbc	#L161
  4566 00:0D02: 1B           	tcs
  4567 00:0D03: 0B           	phd
  4568 00:0D04: 5B           	tcd
  4569             00000004   buf_0	set	4
  4570             00000008   offset_0	set	8
  4571             0000000C   num_0	set	12
  4572                        	.block	966
  4573                        ;	return floppy_transfer_lba((UCHAR*) buf, offset,
                     (UINT) num, 0);
  4574                        	.sym	buf,4,142,6,32
  4575                        	.sym	offset,8,18,6,32
  4576                        	.sym	num,12,18,6,32
  4577                        	.line	967
  4578 00:0D05: F4 00 00     	pea	#<$0
  4579 00:0D08: D4 0C        	pei	<L161+num_0
  4580 00:0D0A: D4 0A        	pei	<L161+offset_0+2
  4581 00:0D0C: D4 08        	pei	<L161+offset_0
  4582 00:0D0E: D4 06        	pei	<L161+buf_0+2
  4583 00:0D10: D4 04        	pei	<L161+buf_0
  4584 00:0D12: 22 xx xx xx  	jsl	~~floppy_transfer_lba
  4585                        L164:
  4586 00:0D16: A8           	tay
  4587 00:0D17: A5 02        	lda	<L161+2
  4588 00:0D19: 85 0E        	sta	<L161+2+12
  4589 00:0D1B: A5 01        	lda	<L161+1
  4590 00:0D1D: 85 0D        	sta	<L161+1+12
  4591 00:0D1F: 2B           	pld
  4592 00:0D20: 3B           	tsc
  4593 00:0D21: 18           	clc
  4594 00:0D22: 69 0C 00     	adc	#L161+12
  4595 00:0D25: 1B           	tcs
  4596 00:0D26: 98           	tya
  4597 00:0D27: 6B           	rtl
  4598                        ;}
  4599                        	.line	968
  4600                        	.endblock	968
  4601             00000000   L161	equ	0
  4602             00000001   L162	equ	1
  4603                        	ends
  4604                        	efunc
  4605                        	.endfunc	968,1,0
  4606                        	.line	968
  4607                        ;
  4608                        ;int floppy_write(UCHAR *buf, ULONG offset, ULONG 
                    num)
  4609                        ;{
  4610                        	.line	970
  4611                        	.line	971
  4612                        	code
  4613                        	xdef	~~floppy_write
  4614                        	func
  4615                        	.function	971
  4616                        ~~floppy_write:
  4617                        	longa	on
  4618                        	longi	on
  4619 00:0D28: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 91


  4620 00:0D29: 38           	sec
  4621 00:0D2A: E9 00 00     	sbc	#L165
  4622 00:0D2D: 1B           	tcs
  4623 00:0D2E: 0B           	phd
  4624 00:0D2F: 5B           	tcd
  4625             00000004   buf_0	set	4
  4626             00000008   offset_0	set	8
  4627             0000000C   num_0	set	12
  4628                        	.block	971
  4629                        ;	return floppy_transfer_lba(buf, offset, (UINT) n
                    um, 1);
  4630                        	.sym	buf,4,142,6,32
  4631                        	.sym	offset,8,18,6,32
  4632                        	.sym	num,12,18,6,32
  4633                        	.line	972
  4634 00:0D30: F4 01 00     	pea	#<$1
  4635 00:0D33: D4 0C        	pei	<L165+num_0
  4636 00:0D35: D4 0A        	pei	<L165+offset_0+2
  4637 00:0D37: D4 08        	pei	<L165+offset_0
  4638 00:0D39: D4 06        	pei	<L165+buf_0+2
  4639 00:0D3B: D4 04        	pei	<L165+buf_0
  4640 00:0D3D: 22 xx xx xx  	jsl	~~floppy_transfer_lba
  4641                        L168:
  4642 00:0D41: A8           	tay
  4643 00:0D42: A5 02        	lda	<L165+2
  4644 00:0D44: 85 0E        	sta	<L165+2+12
  4645 00:0D46: A5 01        	lda	<L165+1
  4646 00:0D48: 85 0D        	sta	<L165+1+12
  4647 00:0D4A: 2B           	pld
  4648 00:0D4B: 3B           	tsc
  4649 00:0D4C: 18           	clc
  4650 00:0D4D: 69 0C 00     	adc	#L165+12
  4651 00:0D50: 1B           	tcs
  4652 00:0D51: 98           	tya
  4653 00:0D52: 6B           	rtl
  4654                        ;}
  4655                        	.line	973
  4656                        	.endblock	973
  4657             00000000   L165	equ	0
  4658             00000001   L166	equ	1
  4659                        	ends
  4660                        	efunc
  4661                        	.endfunc	973,1,0
  4662                        	.line	973
  4663                        ;
  4664                        ;void floppy_init()
  4665                        ;{
  4666                        	.line	975
  4667                        	.line	976
  4668                        	code
  4669                        	xdef	~~floppy_init
  4670                        	func
  4671                        	.function	976
  4672                        ~~floppy_init:
  4673                        	longa	on
  4674                        	longi	on
  4675 00:0D53: 3B           	tsc
  4676 00:0D54: 38           	sec
  Sat Jul 10 2021  1:15                                                Page 92


  4677 00:0D55: E9 08 00     	sbc	#L169
  4678 00:0D58: 1B           	tcs
  4679 00:0D59: 0B           	phd
  4680 00:0D5A: 5B           	tcd
  4681                        	.block	976
  4682                        ;	int r = 0;
  4683                        ;	int pres = 0;
  4684                        ;
  4685                        ;	k_debug_string("floppy_init\r\n");
  4686             00000000   r_1	set	0
  4687             00000002   pres_1	set	2
  4688                        	.sym	r,0,5,1,16
  4689                        	.sym	pres,2,5,1,16
  4690 00:0D5B: 64 05        	stz	<L170+r_1
  4691 00:0D5D: 64 07        	stz	<L170+pres_1
  4692                        	.line	980
  4693 00:0D5F: F4 xx xx     	pea	#^L160
  4694 00:0D62: F4 xx xx     	pea	#<L160
  4695 00:0D65: 22 xx xx xx  	jsl	~~k_debug_string
  4696                        ;
  4697                        ;	fdc_reset();
  4698                        	.line	982
  4699 00:0D69: 22 xx xx xx  	jsl	~~fdc_reset
  4700                        ;
  4701                        ;	sendbyte(CMD_VERSION);
  4702                        	.line	984
  4703 00:0D6D: F4 10 00     	pea	#<$10
  4704 00:0D70: 22 xx xx xx  	jsl	~~sendbyte
  4705                        ;	r = getbyte();
  4706                        	.line	985
  4707 00:0D74: 22 xx xx xx  	jsl	~~getbyte
  4708 00:0D78: 85 05        	sta	<L170+r_1
  4709                        ;	k_debug_long("fdc ver:", r);
  4710                        	.line	986
  4711 00:0D7A: A0 00 00     	ldy	#$0
  4712 00:0D7D: A5 05        	lda	<L170+r_1
  4713 00:0D7F: 10 01        	bpl	L172
  4714 00:0D81: 88           	dey
  4715                        L172:
  4716 00:0D82: 85 01        	sta	<R0
  4717 00:0D84: 84 03        	sty	<R0+2
  4718 00:0D86: D4 03        	pei	<R0+2
  4719 00:0D88: D4 01        	pei	<R0
  4720 00:0D8A: F4 xx xx     	pea	#^L160+14
  4721 00:0D8D: F4 xx xx     	pea	#<L160+14
  4722 00:0D90: 22 xx xx xx  	jsl	~~k_debug_long
  4723                        ;	if (r != 0x90)
  4724                        	.line	987
  4725                        ;	{
  4726 00:0D94: A5 05        	lda	<L170+r_1
  4727 00:0D96: C9 90 00     	cmp	#<$90
  4728 00:0D99: D0 03        	bne	L173
  4729 00:0D9B: 82 0A 00     	brl	L10054
  4730                        L173:
  4731                        	.line	988
  4732                        ;		k_debug_string("floppy might not being w
                    orking\r\n");
  4733                        	.line	989
  Sat Jul 10 2021  1:15                                                Page 93


  4734 00:0D9E: F4 xx xx     	pea	#^L160+23
  4735 00:0DA1: F4 xx xx     	pea	#<L160+23
  4736 00:0DA4: 22 xx xx xx  	jsl	~~k_debug_string
  4737                        ;	}
  4738                        	.line	990
  4739                        ;
  4740                        ;	k_debug_string("select\r\n");
  4741                        L10054:
  4742                        	.line	992
  4743 00:0DA8: F4 xx xx     	pea	#^L160+56
  4744 00:0DAB: F4 xx xx     	pea	#<L160+56
  4745 00:0DAE: 22 xx xx xx  	jsl	~~k_debug_string
  4746                        ;	floppy_select(0);
  4747                        	.line	993
  4748 00:0DB2: F4 00 00     	pea	#<$0
  4749 00:0DB5: 22 xx xx xx  	jsl	~~floppy_select
  4750                        ;	k_debug_string("calibrate\r\n");
  4751                        	.line	994
  4752 00:0DB9: F4 xx xx     	pea	#^L160+65
  4753 00:0DBC: F4 xx xx     	pea	#<L160+65
  4754 00:0DBF: 22 xx xx xx  	jsl	~~k_debug_string
  4755                        ;	floppy_calibrate();
  4756                        	.line	995
  4757 00:0DC3: 22 xx xx xx  	jsl	~~floppy_calibrate
  4758                        ;	k_debug_long("sr0:", reg_sr0);
  4759                        	.line	996
  4760 00:0DC7: AD xx xx     	lda	|~~reg_sr0
  4761 00:0DCA: 29 FF 00     	and	#$ff
  4762 00:0DCD: 85 01        	sta	<R0
  4763 00:0DCF: 64 03        	stz	<R0+2
  4764 00:0DD1: D4 03        	pei	<R0+2
  4765 00:0DD3: D4 01        	pei	<R0
  4766 00:0DD5: F4 xx xx     	pea	#^L160+77
  4767 00:0DD8: F4 xx xx     	pea	#<L160+77
  4768 00:0DDB: 22 xx xx xx  	jsl	~~k_debug_long
  4769                        ;
  4770                        ;	pres = floppy_present();
  4771                        	.line	998
  4772 00:0DDF: 22 xx xx xx  	jsl	~~floppy_present
  4773 00:0DE3: 85 07        	sta	<L170+pres_1
  4774                        ;	k_debug_long("floppy_present():", pres);
  4775                        	.line	999
  4776 00:0DE5: A0 00 00     	ldy	#$0
  4777 00:0DE8: A5 07        	lda	<L170+pres_1
  4778 00:0DEA: 10 01        	bpl	L174
  4779 00:0DEC: 88           	dey
  4780                        L174:
  4781 00:0DED: 85 01        	sta	<R0
  4782 00:0DEF: 84 03        	sty	<R0+2
  4783 00:0DF1: D4 03        	pei	<R0+2
  4784 00:0DF3: D4 01        	pei	<R0
  4785 00:0DF5: F4 xx xx     	pea	#^L160+82
  4786 00:0DF8: F4 xx xx     	pea	#<L160+82
  4787 00:0DFB: 22 xx xx xx  	jsl	~~k_debug_long
  4788                        ;
  4789                        ;	r = floppy_read(floppybuffer, 0, 1);
  4790                        	.line	1001
  4791 00:0DFF: F4 00 00     	pea	#^$1
  Sat Jul 10 2021  1:15                                                Page 94


  4792 00:0E02: F4 01 00     	pea	#<$1
  4793 00:0E05: F4 00 00     	pea	#^$0
  4794 00:0E08: F4 00 00     	pea	#<$0
  4795 00:0E0B: A9 xx xx     	lda	#<~~floppybuffer
  4796 00:0E0E: 85 01        	sta	<R0
  4797                        	xref	_BEG_DATA
  4798 00:0E10: A9 xx xx     	lda	#_BEG_DATA>>16
  4799 00:0E13: 85 03        	sta	<R0+2
  4800 00:0E15: D4 03        	pei	<R0+2
  4801 00:0E17: D4 01        	pei	<R0
  4802 00:0E19: 22 xx xx xx  	jsl	~~floppy_read
  4803 00:0E1D: 85 05        	sta	<L170+r_1
  4804                        ;
  4805                        ;	k_debug_integer("read(0) return:",r);
  4806                        	.line	1003
  4807 00:0E1F: D4 05        	pei	<L170+r_1
  4808 00:0E21: F4 xx xx     	pea	#^L160+100
  4809 00:0E24: F4 xx xx     	pea	#<L160+100
  4810 00:0E27: 22 xx xx xx  	jsl	~~k_debug_integer
  4811                        ;	k_debug_byte_array("floppy_sector:\r\n",floppybu
                    ffer,512);
  4812                        	.line	1004
  4813 00:0E2B: F4 00 00     	pea	#^$200
  4814 00:0E2E: F4 00 02     	pea	#<$200
  4815 00:0E31: A9 xx xx     	lda	#<~~floppybuffer
  4816 00:0E34: 85 01        	sta	<R0
  4817                        	xref	_BEG_DATA
  4818 00:0E36: A9 xx xx     	lda	#_BEG_DATA>>16
  4819 00:0E39: 85 03        	sta	<R0+2
  4820 00:0E3B: D4 03        	pei	<R0+2
  4821 00:0E3D: D4 01        	pei	<R0
  4822 00:0E3F: F4 xx xx     	pea	#^L160+116
  4823 00:0E42: F4 xx xx     	pea	#<L160+116
  4824 00:0E45: 22 xx xx xx  	jsl	~~k_debug_byte_array
  4825                        ;
  4826                        ;/*
  4827                        ;	r = floppy_read(floppybuffer, 1, 1);
  4828                        ;
  4829                        ;		k_debug_integer("read(0):",r);
  4830                        ;
  4831                        ;		k_debug_byte_array("floppy_sector:\r\n",
                    floppybuffer,512);
  4832                        ;*/
  4833                        ;	//k_debug_integer("read(0):", floppy_read(floppy
                    buffer, 1,1));
  4834                        ;	//k_debug_integer("read(0):", floppy_read(floppy
                    buffer, 19, 1));
  4835                        ;
  4836                        ;	//motor_off();
  4837                        ;}
  4838                        	.line	1017
  4839                        L175:
  4840 00:0E49: 2B           	pld
  4841 00:0E4A: 3B           	tsc
  4842 00:0E4B: 18           	clc
  4843 00:0E4C: 69 08 00     	adc	#L169
  4844 00:0E4F: 1B           	tcs
  4845 00:0E50: 6B           	rtl
  Sat Jul 10 2021  1:15                                                Page 95


  4846                        	.endblock	1017
  4847             00000008   L169	equ	8
  4848             00000005   L170	equ	5
  4849                        	ends
  4850                        	efunc
  4851                        	.endfunc	1017,5,8
  4852                        	.line	1017
  4853                        	data
  4854                        L160:
  4855 00:0533: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$69,$6E,$69,
                    $74,$0D,$0A,$00,$66
       00:0537: 70 79 5F 69 
       00:053B: 6E 69 74 0D 
       00:053F: 0A 00 66 
  4856 00:0542: 64 63 20 76  	db	$64,$63,$20,$76,$65,$72,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$20
       00:0546: 65 72 3A 00 
       00:054A: 66 6C 6F 70 
       00:054E: 70 79 20 
  4857 00:0551: 6D 69 67 68  	db	$6D,$69,$67,$68,$74,$20,$6E,$6F,$74,$20,
                    $62,$65,$69,$6E,$67
       00:0555: 74 20 6E 6F 
       00:0559: 74 20 62 65 
       00:055D: 69 6E 67 
  4858 00:0560: 20 77 6F 72  	db	$20,$77,$6F,$72,$6B,$69,$6E,$67,$0D,$0A,
                    $00,$73,$65,$6C,$65
       00:0564: 6B 69 6E 67 
       00:0568: 0D 0A 00 73 
       00:056C: 65 6C 65 
  4859 00:056F: 63 74 0D 0A  	db	$63,$74,$0D,$0A,$00,$63,$61,$6C,$69,$62,
                    $72,$61,$74,$65,$0D
       00:0573: 00 63 61 6C 
       00:0577: 69 62 72 61 
       00:057B: 74 65 0D 
  4860 00:057E: 0A 00 73 72  	db	$0A,$00,$73,$72,$30,$3A,$00,$66,$6C,$6F,
                    $70,$70,$79,$5F,$70
       00:0582: 30 3A 00 66 
       00:0586: 6C 6F 70 70 
       00:058A: 79 5F 70 
  4861 00:058D: 72 65 73 65  	db	$72,$65,$73,$65,$6E,$74,$28,$29,$3A,$00,
                    $72,$65,$61,$64,$28
       00:0591: 6E 74 28 29 
       00:0595: 3A 00 72 65 
       00:0599: 61 64 28 
  4862 00:059C: 30 29 20 72  	db	$30,$29,$20,$72,$65,$74,$75,$72,$6E,$3A,
                    $00,$66,$6C,$6F,$70
       00:05A0: 65 74 75 72 
       00:05A4: 6E 3A 00 66 
       00:05A8: 6C 6F 70 
  4863 00:05AB: 70 79 5F 73  	db	$70,$79,$5F,$73,$65,$63,$74,$6F,$72,$3A,
                    $0D,$0A,$00
       00:05AF: 65 63 74 6F 
       00:05B3: 72 3A 0D 0A 
       00:05B7: 00 
  4864 00:05B8:              	ends
  4865                        ;
  4866                        ;/* this is IRQ6 handler */
  4867                        ;void floppy_isr()
  Sat Jul 10 2021  1:15                                                Page 96


  4868                        ;{
  4869                        	.line	1020
  4870                        	.line	1021
  4871                        	code
  4872                        	xdef	~~floppy_isr
  4873                        	func
  4874                        	.function	1021
  4875                        ~~floppy_isr:
  4876                        	longa	on
  4877                        	longi	on
  4878 00:0E51: 3B           	tsc
  4879 00:0E52: 38           	sec
  4880 00:0E53: E9 00 00     	sbc	#L177
  4881 00:0E56: 1B           	tcs
  4882 00:0E57: 0B           	phd
  4883 00:0E58: 5B           	tcd
  4884                        	.block	1021
  4885                        ;	irq_signaled = 1;
  4886                        	.line	1022
  4887 00:0E59: E2 20        	sep	#$20
  4888                        	longa	off
  4889 00:0E5B: A9 01        	lda	#$1
  4890 00:0E5D: 8D xx xx     	sta	|~~irq_signaled
  4891 00:0E60: C2 20        	rep	#$20
  4892                        	longa	on
  4893                        ;}
  4894                        	.line	1023
  4895                        L180:
  4896 00:0E62: 2B           	pld
  4897 00:0E63: 3B           	tsc
  4898 00:0E64: 18           	clc
  4899 00:0E65: 69 00 00     	adc	#L177
  4900 00:0E68: 1B           	tcs
  4901 00:0E69: 6B           	rtl
  4902                        	.endblock	1023
  4903             00000000   L177	equ	0
  4904             00000001   L178	equ	1
  4905                        	ends
  4906                        	efunc
  4907                        	.endfunc	1023,1,0
  4908                        	.line	1023
  4909                        ;
  4910                        ;/* this's being called from timer isr (1000 Hz) *
                    /
  4911                        ;void floppy_timer()
  4912                        ;{
  4913                        	.line	1026
  4914                        	.line	1027
  4915                        	code
  4916                        	xdef	~~floppy_timer
  4917                        	func
  4918                        	.function	1027
  4919                        ~~floppy_timer:
  4920                        	longa	on
  4921                        	longi	on
  4922 00:0E6A: 3B           	tsc
  4923 00:0E6B: 38           	sec
  4924 00:0E6C: E9 0C 00     	sbc	#L181
  Sat Jul 10 2021  1:15                                                Page 97


  4925 00:0E6F: 1B           	tcs
  4926 00:0E70: 0B           	phd
  4927 00:0E71: 5B           	tcd
  4928                        	.block	1027
  4929                        ;	if (motoff_timer > 0)
  4930                        	.line	1028
  4931                        ;	{
  4932 00:0E72: 38           	sec
  4933 00:0E73: A9 00 00     	lda	#$0
  4934 00:0E76: ED xx xx     	sbc	|~~motoff_timer
  4935 00:0E79: 70 03        	bvs	L184
  4936 00:0E7B: 49 00 80     	eor	#$8000
  4937                        L184:
  4938 00:0E7E: 10 03        	bpl	L185
  4939 00:0E80: 82 7E 00     	brl	L10055
  4940                        L185:
  4941                        	.line	1029
  4942                        ;		//k_debug_string("motoff_timer\r\n");
  4943                        ;		motoff_timer--;
  4944                        	.line	1031
  4945 00:0E83: CE xx xx     	dec	|~~motoff_timer
  4946                        ;		if (motoff_timer == 0)
  4947                        	.line	1032
  4948                        ;		{
  4949 00:0E86: AD xx xx     	lda	|~~motoff_timer
  4950 00:0E89: F0 03        	beq	L186
  4951 00:0E8B: 82 73 00     	brl	L10056
  4952                        L186:
  4953                        	.line	1033
  4954                        ;			k_debug_hex("motoff_timer_off:",
                    inportb(FDC_DOR));
  4955                        	.line	1034
  4956 00:0E8E: AF F2 13 AF  	lda	>11473906
  4957 00:0E92: 48           	pha
  4958 00:0E93: F4 xx xx     	pea	#^L176
  4959 00:0E96: F4 xx xx     	pea	#<L176
  4960 00:0E99: 22 xx xx xx  	jsl	~~k_debug_hex
  4961                        ;			reg_dor &= ~(1 << (cur_drive + 4
                    ));
  4962                        	.line	1035
  4963 00:0E9D: AD xx xx     	lda	|~~cur_drive
  4964 00:0EA0: 29 FF 00     	and	#$ff
  4965 00:0EA3: 85 01        	sta	<R0
  4966 00:0EA5: 18           	clc
  4967 00:0EA6: A9 04 00     	lda	#$4
  4968 00:0EA9: 65 01        	adc	<R0
  4969 00:0EAB: 48           	pha
  4970 00:0EAC: A9 01 00     	lda	#$1
  4971 00:0EAF: FA           	plx
  4972                        	xref	~~~asl
  4973 00:0EB0: 22 xx xx xx  	jsl	~~~asl
  4974 00:0EB4: 49 FF FF     	eor	#<$ffffffff
  4975 00:0EB7: 85 01        	sta	<R0
  4976 00:0EB9: AD xx xx     	lda	|~~reg_dor
  4977 00:0EBC: 29 FF 00     	and	#$ff
  4978 00:0EBF: 85 05        	sta	<R1
  4979 00:0EC1: A5 05        	lda	<R1
  4980 00:0EC3: 25 01        	and	<R0
  Sat Jul 10 2021  1:15                                                Page 98


  4981 00:0EC5: 85 09        	sta	<R2
  4982 00:0EC7: E2 20        	sep	#$20
  4983                        	longa	off
  4984 00:0EC9: A5 09        	lda	<R2
  4985 00:0ECB: 8D xx xx     	sta	|~~reg_dor
  4986 00:0ECE: C2 20        	rep	#$20
  4987                        	longa	on
  4988                        ;			k_debug_hex("motoff_timer_off:",
                    reg_dor);
  4989                        	.line	1036
  4990 00:0ED0: AD xx xx     	lda	|~~reg_dor
  4991 00:0ED3: 48           	pha
  4992 00:0ED4: F4 xx xx     	pea	#^L176+18
  4993 00:0ED7: F4 xx xx     	pea	#<L176+18
  4994 00:0EDA: 22 xx xx xx  	jsl	~~k_debug_hex
  4995                        ;			outportb(FDC_DOR, reg_dor);
  4996                        	.line	1037
  4997 00:0EDE: E2 20        	sep	#$20
  4998                        	longa	off
  4999 00:0EE0: AD xx xx     	lda	|~~reg_dor
  5000 00:0EE3: 8F F2 13 AF  	sta	>11473906
  5001 00:0EE7: C2 20        	rep	#$20
  5002                        	longa	on
  5003                        ;			drives[cur_drive].motstate = 0;
  5004                        	.line	1038
  5005 00:0EE9: AD xx xx     	lda	|~~cur_drive
  5006 00:0EEC: 29 FF 00     	and	#$ff
  5007 00:0EEF: 85 01        	sta	<R0
  5008 00:0EF1: A5 01        	lda	<R0
  5009 00:0EF3: 0A           	asl	A
  5010 00:0EF4: 65 01        	adc	<R0
  5011 00:0EF6: 0A           	asl	A
  5012 00:0EF7: 85 01        	sta	<R0
  5013 00:0EF9: A9 00 00     	lda	#$0
  5014 00:0EFC: A6 01        	ldx	<R0
  5015 00:0EFE: 9D xx xx     	sta	|~~drives+2,X
  5016                        ;		}
  5017                        	.line	1039
  5018                        ;	}
  5019                        L10056:
  5020                        	.line	1040
  5021                        ;}
  5022                        L10055:
  5023                        	.line	1041
  5024                        L187:
  5025 00:0F01: 2B           	pld
  5026 00:0F02: 3B           	tsc
  5027 00:0F03: 18           	clc
  5028 00:0F04: 69 0C 00     	adc	#L181
  5029 00:0F07: 1B           	tcs
  5030 00:0F08: 6B           	rtl
  5031                        	.endblock	1041
  5032             0000000C   L181	equ	12
  5033             0000000D   L182	equ	13
  5034                        	ends
  5035                        	efunc
  5036                        	.endfunc	1041,13,12
  5037                        	.line	1041
  Sat Jul 10 2021  1:15                                                Page 99


  5038                        	data
  5039                        L176:
  5040 00:05B8: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$66,$66,$5F,$74,$69,$6D,
                    $65,$72,$5F,$6F,$66
       00:05BC: 66 66 5F 74 
       00:05C0: 69 6D 65 72 
       00:05C4: 5F 6F 66 
  5041 00:05C7: 66 3A 00 6D  	db	$66,$3A,$00,$6D,$6F,$74,$6F,$66,$66,$5F,
                    $74,$69,$6D,$65,$72
       00:05CB: 6F 74 6F 66 
       00:05CF: 66 5F 74 69 
       00:05D3: 6D 65 72 
  5042 00:05D6: 5F 6F 66 66  	db	$5F,$6F,$66,$66,$3A,$00
       00:05DA: 3A 00 
  5043 00:05DC:              	ends
  5044                        ;
  5045                        ;BOOL k_fd_reset(VOID)
  5046                        ;{
  5047                        	.line	1043
  5048                        	.line	1044
  5049                        	code
  5050                        	xdef	~~k_fd_reset
  5051                        	func
  5052                        	.function	1044
  5053                        ~~k_fd_reset:
  5054                        	longa	on
  5055                        	longi	on
  5056 00:0F09: 3B           	tsc
  5057 00:0F0A: 38           	sec
  5058 00:0F0B: E9 00 00     	sbc	#L189
  5059 00:0F0E: 1B           	tcs
  5060 00:0F0F: 0B           	phd
  5061 00:0F10: 5B           	tcd
  5062                        	.block	1044
  5063                        ;	inportb(FDC_DOR);
  5064                        	.line	1045
  5065                        ;
  5066                        ;	return TRUE;
  5067                        	.line	1047
  5068 00:0F11: A9 01 00     	lda	#$1
  5069                        L192:
  5070 00:0F14: A8           	tay
  5071 00:0F15: 2B           	pld
  5072 00:0F16: 3B           	tsc
  5073 00:0F17: 18           	clc
  5074 00:0F18: 69 00 00     	adc	#L189
  5075 00:0F1B: 1B           	tcs
  5076 00:0F1C: 98           	tya
  5077 00:0F1D: 6B           	rtl
  5078                        ;}
  5079                        	.line	1048
  5080                        	.endblock	1048
  5081             00000000   L189	equ	0
  5082             00000001   L190	equ	1
  5083                        	ends
  5084                        	efunc
  5085                        	.endfunc	1048,1,0
  5086                        	.line	1048
  Sat Jul 10 2021  1:15                                                Page 100


  5087                        ;
  5088                        ;
  5089                        ;BOOL k_fd_init(VOID)
  5090                        ;{
  5091                        	.line	1051
  5092                        	.line	1052
  5093                        	code
  5094                        	xdef	~~k_fd_init
  5095                        	func
  5096                        	.function	1052
  5097                        ~~k_fd_init:
  5098                        	longa	on
  5099                        	longi	on
  5100 00:0F1E: 3B           	tsc
  5101 00:0F1F: 38           	sec
  5102 00:0F20: E9 08 00     	sbc	#L193
  5103 00:0F23: 1B           	tcs
  5104 00:0F24: 0B           	phd
  5105 00:0F25: 5B           	tcd
  5106                        	.block	1052
  5107                        ;	INT i = 0;
  5108                        ;	INT wait = 0;
  5109                        ;
  5110                        ;	inportb(FDC_DOR) = 0x04;
  5111             00000000   i_1	set	0
  5112             00000002   wait_1	set	2
  5113                        	.sym	i,0,5,1,16
  5114                        	.sym	wait,2,5,1,16
  5115 00:0F26: 64 05        	stz	<L194+i_1
  5116 00:0F28: 64 07        	stz	<L194+wait_1
  5117                        	.line	1056
  5118 00:0F2A: E2 20        	sep	#$20
  5119                        	longa	off
  5120 00:0F2C: A9 04        	lda	#$4
  5121 00:0F2E: 8F F2 13 AF  	sta	>11473906
  5122 00:0F32: C2 20        	rep	#$20
  5123                        	longa	on
  5124                        ;
  5125                        ;	sleep(1);
  5126                        	.line	1058
  5127 00:0F34: F4 01 00     	pea	#<$1
  5128 00:0F37: 22 xx xx xx  	jsl	~~sleep
  5129                        ;
  5130                        ;	inportb(FDC_DRS) = 0x02;
  5131                        	.line	1060
  5132 00:0F3B: E2 20        	sep	#$20
  5133                        	longa	off
  5134 00:0F3D: A9 02        	lda	#$2
  5135 00:0F3F: 8F F4 13 AF  	sta	>11473908
  5136 00:0F43: C2 20        	rep	#$20
  5137                        	longa	on
  5138                        ;
  5139                        ;	sleep(32768);
  5140                        	.line	1062
  5141 00:0F45: F4 00 80     	pea	#<$8000
  5142 00:0F48: 22 xx xx xx  	jsl	~~sleep
  5143                        ;
  5144                        ;	for ( i = 0; i < 5; i++)
  Sat Jul 10 2021  1:15                                                Page 101


  5145                        	.line	1064
  5146 00:0F4C: 64 05        	stz	<L194+i_1
  5147                        L10059:
  5148                        ;	{
  5149                        	.line	1065
  5150                        ;		sendbyte(CMD_SENSEI);
  5151                        	.line	1066
  5152 00:0F4E: F4 08 00     	pea	#<$8
  5153 00:0F51: 22 xx xx xx  	jsl	~~sendbyte
  5154                        ;		reg_sr0 = getbyte();
  5155                        	.line	1067
  5156 00:0F55: 22 xx xx xx  	jsl	~~getbyte
  5157 00:0F59: E2 20        	sep	#$20
  5158                        	longa	off
  5159 00:0F5B: 8D xx xx     	sta	|~~reg_sr0
  5160 00:0F5E: C2 20        	rep	#$20
  5161                        	longa	on
  5162                        ;		k_debug_bits("fdc_reset:CMD_SENSEI:reg_s
                    r0:",reg_sr0);
  5163                        	.line	1068
  5164 00:0F60: AD xx xx     	lda	|~~reg_sr0
  5165 00:0F63: 48           	pha
  5166 00:0F64: F4 xx xx     	pea	#^L188
  5167 00:0F67: F4 xx xx     	pea	#<L188
  5168 00:0F6A: 22 xx xx xx  	jsl	~~k_debug_bits
  5169                        ;		drives[i].track = getbyte();
  5170                        	.line	1069
  5171 00:0F6E: A5 05        	lda	<L194+i_1
  5172 00:0F70: 0A           	asl	A
  5173 00:0F71: 65 05        	adc	<L194+i_1
  5174 00:0F73: 0A           	asl	A
  5175 00:0F74: 85 01        	sta	<R0
  5176 00:0F76: 22 xx xx xx  	jsl	~~getbyte
  5177 00:0F7A: A6 01        	ldx	<R0
  5178 00:0F7C: 9D xx xx     	sta	|~~drives,X
  5179                        ;		k_debug_bits("fdc_reset:CMD_SENSEI:track
                    :",drives[i].track);
  5180                        	.line	1070
  5181 00:0F7F: A5 05        	lda	<L194+i_1
  5182 00:0F81: 0A           	asl	A
  5183 00:0F82: 65 05        	adc	<L194+i_1
  5184 00:0F84: 0A           	asl	A
  5185 00:0F85: 85 01        	sta	<R0
  5186 00:0F87: A6 01        	ldx	<R0
  5187 00:0F89: BD xx xx     	lda	|~~drives,X
  5188 00:0F8C: 48           	pha
  5189 00:0F8D: F4 xx xx     	pea	#^L188+30
  5190 00:0F90: F4 xx xx     	pea	#<L188+30
  5191 00:0F93: 22 xx xx xx  	jsl	~~k_debug_bits
  5192                        ;		sleep(30);
  5193                        	.line	1071
  5194 00:0F97: F4 1E 00     	pea	#<$1e
  5195 00:0F9A: 22 xx xx xx  	jsl	~~sleep
  5196                        ;	}
  5197                        	.line	1072
  5198                        L10057:
  5199 00:0F9E: E6 05        	inc	<L194+i_1
  5200 00:0FA0: A5 05        	lda	<L194+i_1
  Sat Jul 10 2021  1:15                                                Page 102


  5201 00:0FA2: 30 07        	bmi	L196
  5202 00:0FA4: 3A           	dea
  5203 00:0FA5: 3A           	dea
  5204 00:0FA6: 3A           	dea
  5205 00:0FA7: 3A           	dea
  5206 00:0FA8: 3A           	dea
  5207 00:0FA9: 10 03        	bpl	L197
  5208                        L196:
  5209 00:0FAB: 82 A0 FF     	brl	L10059
  5210                        L197:
  5211                        L10058:
  5212                        ;
  5213                        ;
  5214                        ;	return TRUE;
  5215                        	.line	1075
  5216 00:0FAE: A9 01 00     	lda	#$1
  5217                        L198:
  5218 00:0FB1: A8           	tay
  5219 00:0FB2: 2B           	pld
  5220 00:0FB3: 3B           	tsc
  5221 00:0FB4: 18           	clc
  5222 00:0FB5: 69 08 00     	adc	#L193
  5223 00:0FB8: 1B           	tcs
  5224 00:0FB9: 98           	tya
  5225 00:0FBA: 6B           	rtl
  5226                        ;}
  5227                        	.line	1076
  5228                        	.endblock	1076
  5229             00000008   L193	equ	8
  5230             00000005   L194	equ	5
  5231                        	ends
  5232                        	efunc
  5233                        	.endfunc	1076,5,8
  5234                        	.line	1076
  5235                        	data
  5236                        L188:
  5237 00:05DC: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$3A,
                    $43,$4D,$44,$5F,$53
       00:05E0: 72 65 73 65 
       00:05E4: 74 3A 43 4D 
       00:05E8: 44 5F 53 
  5238 00:05EB: 45 4E 53 45  	db	$45,$4E,$53,$45,$49,$3A,$72,$65,$67,$5F,
                    $73,$72,$30,$3A,$00
       00:05EF: 49 3A 72 65 
       00:05F3: 67 5F 73 72 
       00:05F7: 30 3A 00 
  5239 00:05FA: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$3A,
                    $43,$4D,$44,$5F,$53
       00:05FE: 72 65 73 65 
       00:0602: 74 3A 43 4D 
       00:0606: 44 5F 53 
  5240 00:0609: 45 4E 53 45  	db	$45,$4E,$53,$45,$49,$3A,$74,$72,$61,$63,
                    $6B,$3A,$00
       00:060D: 49 3A 74 72 
       00:0611: 61 63 6B 3A 
       00:0615: 00 
  5241 00:0616:              	ends
  5242                        ;
  Sat Jul 10 2021  1:15                                                Page 103


  5243                        ;BOOL k_fd_isreadable(VOID)
  5244                        ;{
  5245                        	.line	1078
  5246                        	.line	1079
  5247                        	code
  5248                        	xdef	~~k_fd_isreadable
  5249                        	func
  5250                        	.function	1079
  5251                        ~~k_fd_isreadable:
  5252                        	longa	on
  5253                        	longi	on
  5254 00:0FBB: 3B           	tsc
  5255 00:0FBC: 38           	sec
  5256 00:0FBD: E9 07 00     	sbc	#L200
  5257 00:0FC0: 1B           	tcs
  5258 00:0FC1: 0B           	phd
  5259 00:0FC2: 5B           	tcd
  5260                        	.block	1079
  5261                        ;	int timeout = 0;
  5262                        ;	UCHAR sts = 0;
  5263                        ;
  5264                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5265             00000000   timeout_1	set	0
  5266             00000002   sts_1	set	2
  5267                        	.sym	timeout,0,5,1,16
  5268                        	.sym	sts,2,14,1,8
  5269 00:0FC3: 64 05        	stz	<L201+timeout_1
  5270 00:0FC5: E2 20        	sep	#$20
  5271                        	longa	off
  5272 00:0FC7: 64 07        	stz	<L201+sts_1
  5273 00:0FC9: C2 20        	rep	#$20
  5274                        	longa	on
  5275                        	.line	1083
  5276 00:0FCB: 64 05        	stz	<L201+timeout_1
  5277                        L10062:
  5278                        ;	{
  5279                        	.line	1084
  5280                        ;		sts = inportb(FDC_MSR);
  5281                        	.line	1085
  5282 00:0FCD: E2 20        	sep	#$20
  5283                        	longa	off
  5284 00:0FCF: AF F4 13 AF  	lda	>11473908
  5285 00:0FD3: 85 07        	sta	<L201+sts_1
  5286 00:0FD5: C2 20        	rep	#$20
  5287                        	longa	on
  5288                        ;		if ((sts & MSR_DIO) == MSR_DIO)
  5289                        	.line	1086
  5290                        ;			return TRUE;
  5291 00:0FD7: A5 07        	lda	<L201+sts_1
  5292 00:0FD9: 29 40 00     	and	#<$40
  5293 00:0FDC: 85 01        	sta	<R0
  5294 00:0FDE: A5 01        	lda	<R0
  5295 00:0FE0: C9 40 00     	cmp	#<$40
  5296 00:0FE3: F0 03        	beq	L203
  5297 00:0FE5: 82 0D 00     	brl	L10063
  5298                        L203:
  5299                        	.line	1087
  5300 00:0FE8: A9 01 00     	lda	#$1
  Sat Jul 10 2021  1:15                                                Page 104


  5301                        L204:
  5302 00:0FEB: A8           	tay
  5303 00:0FEC: 2B           	pld
  5304 00:0FED: 3B           	tsc
  5305 00:0FEE: 18           	clc
  5306 00:0FEF: 69 07 00     	adc	#L200
  5307 00:0FF2: 1B           	tcs
  5308 00:0FF3: 98           	tya
  5309 00:0FF4: 6B           	rtl
  5310                        ;	}
  5311                        L10063:
  5312                        	.line	1088
  5313                        L10060:
  5314 00:0FF5: E6 05        	inc	<L201+timeout_1
  5315 00:0FF7: 38           	sec
  5316 00:0FF8: A5 05        	lda	<L201+timeout_1
  5317 00:0FFA: E9 FF 00     	sbc	#<$ff
  5318 00:0FFD: 70 03        	bvs	L205
  5319 00:0FFF: 49 00 80     	eor	#$8000
  5320                        L205:
  5321 00:1002: 30 03        	bmi	L206
  5322 00:1004: 82 C6 FF     	brl	L10062
  5323                        L206:
  5324                        L10061:
  5325                        ;
  5326                        ;	return FALSE;
  5327                        	.line	1090
  5328 00:1007: A9 00 00     	lda	#$0
  5329 00:100A: 82 DE FF     	brl	L204
  5330                        ;}
  5331                        	.line	1091
  5332                        	.endblock	1091
  5333             00000007   L200	equ	7
  5334             00000005   L201	equ	5
  5335                        	ends
  5336                        	efunc
  5337                        	.endfunc	1091,5,7
  5338                        	.line	1091
  5339                        ;
  5340                        ;BOOL k_fd_isready(VOID)
  5341                        ;{
  5342                        	.line	1093
  5343                        	.line	1094
  5344                        	code
  5345                        	xdef	~~k_fd_isready
  5346                        	func
  5347                        	.function	1094
  5348                        ~~k_fd_isready:
  5349                        	longa	on
  5350                        	longi	on
  5351 00:100D: 3B           	tsc
  5352 00:100E: 38           	sec
  5353 00:100F: E9 07 00     	sbc	#L207
  5354 00:1012: 1B           	tcs
  5355 00:1013: 0B           	phd
  5356 00:1014: 5B           	tcd
  5357                        	.block	1094
  5358                        ;	int timeout = 0;
  Sat Jul 10 2021  1:15                                                Page 105


  5359                        ;	UCHAR sts = 0;
  5360                        ;
  5361                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5362             00000000   timeout_1	set	0
  5363             00000002   sts_1	set	2
  5364                        	.sym	timeout,0,5,1,16
  5365                        	.sym	sts,2,14,1,8
  5366 00:1015: 64 05        	stz	<L208+timeout_1
  5367 00:1017: E2 20        	sep	#$20
  5368                        	longa	off
  5369 00:1019: 64 07        	stz	<L208+sts_1
  5370 00:101B: C2 20        	rep	#$20
  5371                        	longa	on
  5372                        	.line	1098
  5373 00:101D: 64 05        	stz	<L208+timeout_1
  5374                        L10066:
  5375                        ;	{
  5376                        	.line	1099
  5377                        ;		sts = inportb(FDC_MSR);
  5378                        	.line	1100
  5379 00:101F: E2 20        	sep	#$20
  5380                        	longa	off
  5381 00:1021: AF F4 13 AF  	lda	>11473908
  5382 00:1025: 85 07        	sta	<L208+sts_1
  5383 00:1027: C2 20        	rep	#$20
  5384                        	longa	on
  5385                        ;		if ((sts & MSR_RQM) == MSR_RQM)
  5386                        	.line	1101
  5387                        ;			return TRUE;
  5388 00:1029: A5 07        	lda	<L208+sts_1
  5389 00:102B: 29 80 00     	and	#<$80
  5390 00:102E: 85 01        	sta	<R0
  5391 00:1030: A5 01        	lda	<R0
  5392 00:1032: C9 80 00     	cmp	#<$80
  5393 00:1035: F0 03        	beq	L210
  5394 00:1037: 82 0D 00     	brl	L10067
  5395                        L210:
  5396                        	.line	1102
  5397 00:103A: A9 01 00     	lda	#$1
  5398                        L211:
  5399 00:103D: A8           	tay
  5400 00:103E: 2B           	pld
  5401 00:103F: 3B           	tsc
  5402 00:1040: 18           	clc
  5403 00:1041: 69 07 00     	adc	#L207
  5404 00:1044: 1B           	tcs
  5405 00:1045: 98           	tya
  5406 00:1046: 6B           	rtl
  5407                        ;	}
  5408                        L10067:
  5409                        	.line	1103
  5410                        L10064:
  5411 00:1047: E6 05        	inc	<L208+timeout_1
  5412 00:1049: 38           	sec
  5413 00:104A: A5 05        	lda	<L208+timeout_1
  5414 00:104C: E9 FF 00     	sbc	#<$ff
  5415 00:104F: 70 03        	bvs	L212
  5416 00:1051: 49 00 80     	eor	#$8000
  Sat Jul 10 2021  1:15                                                Page 106


  5417                        L212:
  5418 00:1054: 30 03        	bmi	L213
  5419 00:1056: 82 C6 FF     	brl	L10066
  5420                        L213:
  5421                        L10065:
  5422                        ;
  5423                        ;	return FALSE;
  5424                        	.line	1105
  5425 00:1059: A9 00 00     	lda	#$0
  5426 00:105C: 82 DE FF     	brl	L211
  5427                        ;}
  5428                        	.line	1106
  5429                        	.endblock	1106
  5430             00000007   L207	equ	7
  5431             00000005   L208	equ	5
  5432                        	ends
  5433                        	efunc
  5434                        	.endfunc	1106,5,7
  5435                        	.line	1106
  5436                        ;
  5437                        ;BOOL k_fd_isbusy(VOID)
  5438                        ;{
  5439                        	.line	1108
  5440                        	.line	1109
  5441                        	code
  5442                        	xdef	~~k_fd_isbusy
  5443                        	func
  5444                        	.function	1109
  5445                        ~~k_fd_isbusy:
  5446                        	longa	on
  5447                        	longi	on
  5448 00:105F: 3B           	tsc
  5449 00:1060: 38           	sec
  5450 00:1061: E9 03 00     	sbc	#L214
  5451 00:1064: 1B           	tcs
  5452 00:1065: 0B           	phd
  5453 00:1066: 5B           	tcd
  5454                        	.block	1109
  5455                        ;	int timeout = 0;
  5456                        ;	UCHAR sts = 0;
  5457                        ;
  5458                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5459             00000000   timeout_1	set	0
  5460             00000002   sts_1	set	2
  5461                        	.sym	timeout,0,5,1,16
  5462                        	.sym	sts,2,14,1,8
  5463 00:1067: 64 01        	stz	<L215+timeout_1
  5464 00:1069: E2 20        	sep	#$20
  5465                        	longa	off
  5466 00:106B: 64 03        	stz	<L215+sts_1
  5467 00:106D: C2 20        	rep	#$20
  5468                        	longa	on
  5469                        	.line	1113
  5470 00:106F: 64 01        	stz	<L215+timeout_1
  5471                        L10070:
  5472                        ;	{
  5473                        	.line	1114
  5474                        ;		sts = inportb(FDC_MSR);
  Sat Jul 10 2021  1:15                                                Page 107


  5475                        	.line	1115
  5476 00:1071: E2 20        	sep	#$20
  5477                        	longa	off
  5478 00:1073: AF F4 13 AF  	lda	>11473908
  5479 00:1077: 85 03        	sta	<L215+sts_1
  5480 00:1079: C2 20        	rep	#$20
  5481                        	longa	on
  5482                        ;		if ((sts & MSR_CB) == 0)
  5483                        	.line	1116
  5484                        ;			return TRUE;
  5485 00:107B: E2 20        	sep	#$20
  5486                        	longa	off
  5487 00:107D: A5 03        	lda	<L215+sts_1
  5488 00:107F: 29 10        	and	#<$10
  5489 00:1081: C2 20        	rep	#$20
  5490                        	longa	on
  5491 00:1083: F0 03        	beq	L217
  5492 00:1085: 82 0D 00     	brl	L10071
  5493                        L217:
  5494                        	.line	1117
  5495 00:1088: A9 01 00     	lda	#$1
  5496                        L218:
  5497 00:108B: A8           	tay
  5498 00:108C: 2B           	pld
  5499 00:108D: 3B           	tsc
  5500 00:108E: 18           	clc
  5501 00:108F: 69 03 00     	adc	#L214
  5502 00:1092: 1B           	tcs
  5503 00:1093: 98           	tya
  5504 00:1094: 6B           	rtl
  5505                        ;	}
  5506                        L10071:
  5507                        	.line	1118
  5508                        L10068:
  5509 00:1095: E6 01        	inc	<L215+timeout_1
  5510 00:1097: 38           	sec
  5511 00:1098: A5 01        	lda	<L215+timeout_1
  5512 00:109A: E9 FF 00     	sbc	#<$ff
  5513 00:109D: 70 03        	bvs	L219
  5514 00:109F: 49 00 80     	eor	#$8000
  5515                        L219:
  5516 00:10A2: 30 03        	bmi	L220
  5517 00:10A4: 82 CA FF     	brl	L10070
  5518                        L220:
  5519                        L10069:
  5520                        ;	return FALSE;
  5521                        	.line	1119
  5522 00:10A7: A9 00 00     	lda	#$0
  5523 00:10AA: 82 DE FF     	brl	L218
  5524                        ;}
  5525                        	.line	1120
  5526                        	.endblock	1120
  5527             00000003   L214	equ	3
  5528             00000001   L215	equ	1
  5529                        	ends
  5530                        	efunc
  5531                        	.endfunc	1120,1,3
  5532                        	.line	1120
  Sat Jul 10 2021  1:15                                                Page 108


  5533                        ;
  5534                        ;BOOL k_fd_isbusy_drive(UCHAR drive)
  5535                        ;{
  5536                        	.line	1122
  5537                        	.line	1123
  5538                        	code
  5539                        	xdef	~~k_fd_isbusy_drive
  5540                        	func
  5541                        	.function	1123
  5542                        ~~k_fd_isbusy_drive:
  5543                        	longa	on
  5544                        	longi	on
  5545 00:10AD: 3B           	tsc
  5546 00:10AE: 38           	sec
  5547 00:10AF: E9 03 00     	sbc	#L221
  5548 00:10B2: 1B           	tcs
  5549 00:10B3: 0B           	phd
  5550 00:10B4: 5B           	tcd
  5551             00000004   drive_0	set	4
  5552                        	.block	1123
  5553                        ;	int timeout = 0;
  5554                        ;	UCHAR sts = 0;
  5555                        ;
  5556                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5557             00000000   timeout_1	set	0
  5558             00000002   sts_1	set	2
  5559                        	.sym	timeout,0,5,1,16
  5560                        	.sym	sts,2,14,1,8
  5561                        	.sym	drive,4,14,6,8
  5562 00:10B5: 64 01        	stz	<L222+timeout_1
  5563 00:10B7: E2 20        	sep	#$20
  5564                        	longa	off
  5565 00:10B9: 64 03        	stz	<L222+sts_1
  5566 00:10BB: C2 20        	rep	#$20
  5567                        	longa	on
  5568                        	.line	1127
  5569 00:10BD: 64 01        	stz	<L222+timeout_1
  5570                        L10074:
  5571                        ;	{
  5572                        	.line	1128
  5573                        ;		sts = inportb(FDC_MSR);
  5574                        	.line	1129
  5575 00:10BF: E2 20        	sep	#$20
  5576                        	longa	off
  5577 00:10C1: AF F4 13 AF  	lda	>11473908
  5578 00:10C5: 85 03        	sta	<L222+sts_1
  5579 00:10C7: C2 20        	rep	#$20
  5580                        	longa	on
  5581                        ;		if ((sts & drive) == 0)
  5582                        	.line	1130
  5583                        ;			return TRUE;
  5584 00:10C9: E2 20        	sep	#$20
  5585                        	longa	off
  5586 00:10CB: A5 07        	lda	<L221+drive_0
  5587 00:10CD: 25 03        	and	<L222+sts_1
  5588 00:10CF: C2 20        	rep	#$20
  5589                        	longa	on
  5590 00:10D1: F0 03        	beq	L224
  Sat Jul 10 2021  1:15                                                Page 109


  5591 00:10D3: 82 15 00     	brl	L10075
  5592                        L224:
  5593                        	.line	1131
  5594 00:10D6: A9 01 00     	lda	#$1
  5595                        L225:
  5596 00:10D9: A8           	tay
  5597 00:10DA: A5 05        	lda	<L221+2
  5598 00:10DC: 85 07        	sta	<L221+2+2
  5599 00:10DE: A5 04        	lda	<L221+1
  5600 00:10E0: 85 06        	sta	<L221+1+2
  5601 00:10E2: 2B           	pld
  5602 00:10E3: 3B           	tsc
  5603 00:10E4: 18           	clc
  5604 00:10E5: 69 05 00     	adc	#L221+2
  5605 00:10E8: 1B           	tcs
  5606 00:10E9: 98           	tya
  5607 00:10EA: 6B           	rtl
  5608                        ;	}
  5609                        L10075:
  5610                        	.line	1132
  5611                        L10072:
  5612 00:10EB: E6 01        	inc	<L222+timeout_1
  5613 00:10ED: 38           	sec
  5614 00:10EE: A5 01        	lda	<L222+timeout_1
  5615 00:10F0: E9 FF 00     	sbc	#<$ff
  5616 00:10F3: 70 03        	bvs	L226
  5617 00:10F5: 49 00 80     	eor	#$8000
  5618                        L226:
  5619 00:10F8: 30 03        	bmi	L227
  5620 00:10FA: 82 C2 FF     	brl	L10074
  5621                        L227:
  5622                        L10073:
  5623                        ;	return FALSE;
  5624                        	.line	1133
  5625 00:10FD: A9 00 00     	lda	#$0
  5626 00:1100: 82 D6 FF     	brl	L225
  5627                        ;}
  5628                        	.line	1134
  5629                        	.endblock	1134
  5630             00000003   L221	equ	3
  5631             00000001   L222	equ	1
  5632                        	ends
  5633                        	efunc
  5634                        	.endfunc	1134,1,3
  5635                        	.line	1134
  5636                        ;
  5637                        ;UINT k_fd_read_sector(UCHAR *buf, ULONG lba)
  5638                        ;{
  5639                        	.line	1136
  5640                        	.line	1137
  5641                        	code
  5642                        	xdef	~~k_fd_read_sector
  5643                        	func
  5644                        	.function	1137
  5645                        ~~k_fd_read_sector:
  5646                        	longa	on
  5647                        	longi	on
  5648 00:1103: 3B           	tsc
  Sat Jul 10 2021  1:15                                                Page 110


  5649 00:1104: 38           	sec
  5650 00:1105: E9 00 00     	sbc	#L228
  5651 00:1108: 1B           	tcs
  5652 00:1109: 0B           	phd
  5653 00:110A: 5B           	tcd
  5654             00000004   buf_0	set	4
  5655             00000008   lba_0	set	8
  5656                        	.block	1137
  5657                        ;	return k_fd_read_lba(buf, lba, 1, FALSE);
  5658                        	.sym	buf,4,142,6,32
  5659                        	.sym	lba,8,18,6,32
  5660                        	.line	1138
  5661 00:110B: F4 00 00     	pea	#<$0
  5662 00:110E: F4 01 00     	pea	#<$1
  5663 00:1111: D4 0A        	pei	<L228+lba_0+2
  5664 00:1113: D4 08        	pei	<L228+lba_0
  5665 00:1115: D4 06        	pei	<L228+buf_0+2
  5666 00:1117: D4 04        	pei	<L228+buf_0
  5667 00:1119: 22 xx xx xx  	jsl	~~k_fd_read_lba
  5668                        L231:
  5669 00:111D: A8           	tay
  5670 00:111E: A5 02        	lda	<L228+2
  5671 00:1120: 85 0A        	sta	<L228+2+8
  5672 00:1122: A5 01        	lda	<L228+1
  5673 00:1124: 85 09        	sta	<L228+1+8
  5674 00:1126: 2B           	pld
  5675 00:1127: 3B           	tsc
  5676 00:1128: 18           	clc
  5677 00:1129: 69 08 00     	adc	#L228+8
  5678 00:112C: 1B           	tcs
  5679 00:112D: 98           	tya
  5680 00:112E: 6B           	rtl
  5681                        ;}
  5682                        	.line	1139
  5683                        	.endblock	1139
  5684             00000000   L228	equ	0
  5685             00000001   L229	equ	1
  5686                        	ends
  5687                        	efunc
  5688                        	.endfunc	1139,1,0
  5689                        	.line	1139
  5690                        ;
  5691                        ;static int k_fd_read_lba(UCHAR *buf, ULONG lba, U
                    INT num,int do_write)
  5692                        ;{
  5693                        	.line	1141
  5694                        	.line	1142
  5695                        	code
  5696                        	func
  5697                        	.function	1142
  5698                        ~~k_fd_read_lba:
  5699                        	longa	on
  5700                        	longi	on
  5701 00:112F: 3B           	tsc
  5702 00:1130: 38           	sec
  5703 00:1131: E9 0A 00     	sbc	#L232
  5704 00:1134: 1B           	tcs
  5705 00:1135: 0B           	phd
  Sat Jul 10 2021  1:15                                                Page 111


  5706 00:1136: 5B           	tcd
  5707             00000004   buf_0	set	4
  5708             00000008   lba_0	set	8
  5709             0000000C   num_0	set	12
  5710             0000000E   do_write_0	set	14
  5711                        	.block	1142
  5712                        ;	int i;
  5713                        ;	int res = 0;
  5714                        ;	UINT c, h, s;
  5715                        ;
  5716                        ;	motor_on();
  5717             00000000   i_1	set	0
  5718             00000002   res_1	set	2
  5719             00000004   c_1	set	4
  5720             00000006   h_1	set	6
  5721             00000008   s_1	set	8
  5722                        	.sym	i,0,5,1,16
  5723                        	.sym	res,2,5,1,16
  5724                        	.sym	c,4,16,1,16
  5725                        	.sym	h,6,16,1,16
  5726                        	.sym	s,8,16,1,16
  5727                        	.sym	buf,4,142,6,32
  5728                        	.sym	lba,8,18,6,32
  5729                        	.sym	num,12,16,6,16
  5730                        	.sym	do_write,14,5,6,16
  5731 00:1137: 64 03        	stz	<L233+res_1
  5732                        	.line	1147
  5733 00:1139: 22 xx xx xx  	jsl	~~motor_on
  5734                        ;
  5735                        ;	for (i = 0; i < num; i++)
  5736                        	.line	1149
  5737 00:113D: 64 01        	stz	<L233+i_1
  5738 00:113F: 82 57 00     	brl	L10079
  5739                        L10078:
  5740                        ;	{
  5741                        	.line	1150
  5742                        ;		k_debug_long("k_fd_read_lba:lba:", lba);
  5743                        	.line	1151
  5744 00:1142: D4 14        	pei	<L232+lba_0+2
  5745 00:1144: D4 12        	pei	<L232+lba_0
  5746 00:1146: F4 xx xx     	pea	#^L199
  5747 00:1149: F4 xx xx     	pea	#<L199
  5748 00:114C: 22 xx xx xx  	jsl	~~k_debug_long
  5749                        ;		lba_2_chs(lba, &c, &h, &s);
  5750                        	.line	1152
  5751 00:1150: F4 00 00     	pea	#0
  5752 00:1153: 18           	clc
  5753 00:1154: 7B           	tdc
  5754 00:1155: 69 09 00     	adc	#<L233+s_1
  5755 00:1158: 48           	pha
  5756 00:1159: F4 00 00     	pea	#0
  5757 00:115C: 18           	clc
  5758 00:115D: 7B           	tdc
  5759 00:115E: 69 07 00     	adc	#<L233+h_1
  5760 00:1161: 48           	pha
  5761 00:1162: F4 00 00     	pea	#0
  5762 00:1165: 18           	clc
  5763 00:1166: 7B           	tdc
  Sat Jul 10 2021  1:15                                                Page 112


  5764 00:1167: 69 05 00     	adc	#<L233+c_1
  5765 00:116A: 48           	pha
  5766 00:116B: D4 14        	pei	<L232+lba_0+2
  5767 00:116D: D4 12        	pei	<L232+lba_0
  5768 00:116F: 22 xx xx xx  	jsl	~~lba_2_chs
  5769                        ;
  5770                        ;		res = k_fd_rw_command(buf, do_write, c, 
                    h, s);
  5771                        	.line	1154
  5772 00:1173: D4 09        	pei	<L233+s_1
  5773 00:1175: D4 07        	pei	<L233+h_1
  5774 00:1177: D4 05        	pei	<L233+c_1
  5775 00:1179: D4 18        	pei	<L232+do_write_0
  5776 00:117B: D4 10        	pei	<L232+buf_0+2
  5777 00:117D: D4 0E        	pei	<L232+buf_0
  5778 00:117F: 22 xx xx xx  	jsl	~~k_fd_rw_command
  5779 00:1183: 85 03        	sta	<L233+res_1
  5780                        ;		k_debug_integer("k_fd_read_lba:res:", re
                    s);
  5781                        	.line	1155
  5782 00:1185: D4 03        	pei	<L233+res_1
  5783 00:1187: F4 xx xx     	pea	#^L199+19
  5784 00:118A: F4 xx xx     	pea	#<L199+19
  5785 00:118D: 22 xx xx xx  	jsl	~~k_debug_integer
  5786                        ;		lba++;
  5787                        	.line	1156
  5788 00:1191: E6 12        	inc	<L232+lba_0
  5789 00:1193: D0 02        	bne	L235
  5790 00:1195: E6 14        	inc	<L232+lba_0+2
  5791                        L235:
  5792                        ;	}
  5793                        	.line	1157
  5794                        L10076:
  5795 00:1197: E6 01        	inc	<L233+i_1
  5796                        L10079:
  5797 00:1199: A5 01        	lda	<L233+i_1
  5798 00:119B: C5 16        	cmp	<L232+num_0
  5799 00:119D: B0 03        	bcs	L236
  5800 00:119F: 82 A0 FF     	brl	L10078
  5801                        L236:
  5802                        L10077:
  5803                        ;
  5804                        ;	motor_off();
  5805                        	.line	1159
  5806 00:11A2: 22 xx xx xx  	jsl	~~motor_off
  5807                        ;
  5808                        ;	return res;
  5809                        	.line	1161
  5810 00:11A6: A5 03        	lda	<L233+res_1
  5811                        L237:
  5812 00:11A8: A8           	tay
  5813 00:11A9: A5 0C        	lda	<L232+2
  5814 00:11AB: 85 18        	sta	<L232+2+12
  5815 00:11AD: A5 0B        	lda	<L232+1
  5816 00:11AF: 85 17        	sta	<L232+1+12
  5817 00:11B1: 2B           	pld
  5818 00:11B2: 3B           	tsc
  5819 00:11B3: 18           	clc
  Sat Jul 10 2021  1:15                                                Page 113


  5820 00:11B4: 69 16 00     	adc	#L232+12
  5821 00:11B7: 1B           	tcs
  5822 00:11B8: 98           	tya
  5823 00:11B9: 6B           	rtl
  5824                        ;}
  5825                        	.line	1162
  5826                        	.endblock	1162
  5827             0000000A   L232	equ	10
  5828             00000001   L233	equ	1
  5829                        	ends
  5830                        	efunc
  5831                        	.endfunc	1162,1,10
  5832                        	.line	1162
  5833                        	data
  5834                        L199:
  5835 00:0616: 6B 5F 66 64  	db	$6B,$5F,$66,$64,$5F,$72,$65,$61,$64,$5F,
                    $6C,$62,$61,$3A,$6C
       00:061A: 5F 72 65 61 
       00:061E: 64 5F 6C 62 
       00:0622: 61 3A 6C 
  5836 00:0625: 62 61 3A 00  	db	$62,$61,$3A,$00,$6B,$5F,$66,$64,$5F,$72,
                    $65,$61,$64,$5F,$6C
       00:0629: 6B 5F 66 64 
       00:062D: 5F 72 65 61 
       00:0631: 64 5F 6C 
  5837 00:0634: 62 61 3A 72  	db	$62,$61,$3A,$72,$65,$73,$3A,$00
       00:0638: 65 73 3A 00 
  5838 00:063C:              	ends
  5839                        ;
  5840                        ;static int k_fd_rw_command(UCHAR* buf, int do_wri
                    te, UINT c,UINT h, UINT s)
  5841                        ;{
  5842                        	.line	1164
  5843                        	.line	1165
  5844                        	code
  5845                        	func
  5846                        	.function	1165
  5847                        ~~k_fd_rw_command:
  5848                        	longa	on
  5849                        	longi	on
  5850 00:11BA: 3B           	tsc
  5851 00:11BB: 38           	sec
  5852 00:11BC: E9 0D 00     	sbc	#L239
  5853 00:11BF: 1B           	tcs
  5854 00:11C0: 0B           	phd
  5855 00:11C1: 5B           	tcd
  5856             00000004   buf_0	set	4
  5857             00000008   do_write_0	set	8
  5858             0000000A   c_0	set	10
  5859             0000000C   h_0	set	12
  5860             0000000E   s_0	set	14
  5861                        	.block	1165
  5862                        ;	int i = 0;
  5863                        ;	UCHAR msr = 0;
  5864                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  5865                        ;	//UCHAR cmd = do_write ? CMD_WRITE : 0xE6;
  5866                        ;	BOOL retCode = FALSE;
  5867                        ;
  Sat Jul 10 2021  1:15                                                Page 114


  5868                        ;	k_debug_integer("k_fd_rw_command:",cur_drive);
  5869             00000000   i_1	set	0
  5870             00000002   msr_1	set	2
  5871             00000003   cmd_1	set	3
  5872             00000004   retCode_1	set	4
  5873                        	.sym	i,0,5,1,16
  5874                        	.sym	msr,2,14,1,8
  5875                        	.sym	cmd,3,14,1,8
  5876                        	.sym	retCode,4,14,1,8
  5877                        	.sym	buf,4,142,6,32
  5878                        	.sym	do_write,8,5,6,16
  5879                        	.sym	c,10,16,6,16
  5880                        	.sym	h,12,16,6,16
  5881                        	.sym	s,14,16,6,16
  5882 00:11C2: 64 09        	stz	<L240+i_1
  5883 00:11C4: E2 20        	sep	#$20
  5884                        	longa	off
  5885 00:11C6: 64 0B        	stz	<L240+msr_1
  5886 00:11C8: C2 20        	rep	#$20
  5887                        	longa	on
  5888 00:11CA: A5 15        	lda	<L239+do_write_0
  5889 00:11CC: D0 03        	bne	L243
  5890 00:11CE: 82 05 00     	brl	L242
  5891                        L243:
  5892 00:11D1: A9 45 00     	lda	#$45
  5893 00:11D4: 80 03        	bra	L244
  5894                        L242:
  5895 00:11D6: A9 46 00     	lda	#$46
  5896                        L244:
  5897 00:11D9: 85 01        	sta	<R0
  5898 00:11DB: E2 20        	sep	#$20
  5899                        	longa	off
  5900 00:11DD: A5 01        	lda	<R0
  5901 00:11DF: 85 0C        	sta	<L240+cmd_1
  5902 00:11E1: C2 20        	rep	#$20
  5903                        	longa	on
  5904 00:11E3: E2 20        	sep	#$20
  5905                        	longa	off
  5906 00:11E5: 64 0D        	stz	<L240+retCode_1
  5907 00:11E7: C2 20        	rep	#$20
  5908                        	longa	on
  5909                        	.line	1172
  5910 00:11E9: AD xx xx     	lda	|~~cur_drive
  5911 00:11EC: 29 FF 00     	and	#$ff
  5912 00:11EF: 48           	pha
  5913 00:11F0: F4 xx xx     	pea	#^L238
  5914 00:11F3: F4 xx xx     	pea	#<L238
  5915 00:11F6: 22 xx xx xx  	jsl	~~k_debug_integer
  5916                        ;	k_debug_integer("k_fd_rw_command:track:",c);
  5917                        	.line	1173
  5918 00:11FA: D4 17        	pei	<L239+c_0
  5919 00:11FC: F4 xx xx     	pea	#^L238+17
  5920 00:11FF: F4 xx xx     	pea	#<L238+17
  5921 00:1202: 22 xx xx xx  	jsl	~~k_debug_integer
  5922                        ;	k_debug_integer("k_fd_rw_command:head:",h);
  5923                        	.line	1174
  5924 00:1206: D4 19        	pei	<L239+h_0
  5925 00:1208: F4 xx xx     	pea	#^L238+40
  Sat Jul 10 2021  1:15                                                Page 115


  5926 00:120B: F4 xx xx     	pea	#<L238+40
  5927 00:120E: 22 xx xx xx  	jsl	~~k_debug_integer
  5928                        ;	k_debug_integer("k_fd_rw_command:sector:",s);
  5929                        	.line	1175
  5930 00:1212: D4 1B        	pei	<L239+s_0
  5931 00:1214: F4 xx xx     	pea	#^L238+62
  5932 00:1217: F4 xx xx     	pea	#<L238+62
  5933 00:121A: 22 xx xx xx  	jsl	~~k_debug_integer
  5934                        ;
  5935                        ;
  5936                        ;	//floppy_seek(c);
  5937                        ;
  5938                        ;	//sleep(32768);
  5939                        ;	//sleep(DRIVE_H1440_SPINUP);
  5940                        ;
  5941                        ;	sendbyte(CMD_SENSEI);
  5942                        	.line	1183
  5943 00:121E: F4 08 00     	pea	#<$8
  5944 00:1221: 22 xx xx xx  	jsl	~~sendbyte
  5945                        ;	reg_sr0 = getbyte();
  5946                        	.line	1184
  5947 00:1225: 22 xx xx xx  	jsl	~~getbyte
  5948 00:1229: E2 20        	sep	#$20
  5949                        	longa	off
  5950 00:122B: 8D xx xx     	sta	|~~reg_sr0
  5951 00:122E: C2 20        	rep	#$20
  5952                        	longa	on
  5953                        ;	k_debug_hex("k_fd_rw_command:CMD_SENSEI:reg_sr0:
                    ",reg_sr0);
  5954                        	.line	1185
  5955 00:1230: AD xx xx     	lda	|~~reg_sr0
  5956 00:1233: 48           	pha
  5957 00:1234: F4 xx xx     	pea	#^L238+86
  5958 00:1237: F4 xx xx     	pea	#<L238+86
  5959 00:123A: 22 xx xx xx  	jsl	~~k_debug_hex
  5960                        ;	drives[cur_drive].track = getbyte();
  5961                        	.line	1186
  5962 00:123E: AD xx xx     	lda	|~~cur_drive
  5963 00:1241: 29 FF 00     	and	#$ff
  5964 00:1244: 85 01        	sta	<R0
  5965 00:1246: A5 01        	lda	<R0
  5966 00:1248: 0A           	asl	A
  5967 00:1249: 65 01        	adc	<R0
  5968 00:124B: 0A           	asl	A
  5969 00:124C: 85 01        	sta	<R0
  5970 00:124E: 22 xx xx xx  	jsl	~~getbyte
  5971 00:1252: A6 01        	ldx	<R0
  5972 00:1254: 9D xx xx     	sta	|~~drives,X
  5973                        ;	k_debug_hex("k_fd_rw_command:CMD_SENSEI:track:",
                    drives[cur_drive].track);
  5974                        	.line	1187
  5975 00:1257: AD xx xx     	lda	|~~cur_drive
  5976 00:125A: 29 FF 00     	and	#$ff
  5977 00:125D: 85 01        	sta	<R0
  5978 00:125F: A5 01        	lda	<R0
  5979 00:1261: 0A           	asl	A
  5980 00:1262: 65 01        	adc	<R0
  5981 00:1264: 0A           	asl	A
  Sat Jul 10 2021  1:15                                                Page 116


  5982 00:1265: 85 01        	sta	<R0
  5983 00:1267: A6 01        	ldx	<R0
  5984 00:1269: BD xx xx     	lda	|~~drives,X
  5985 00:126C: 48           	pha
  5986 00:126D: F4 xx xx     	pea	#^L238+122
  5987 00:1270: F4 xx xx     	pea	#<L238+122
  5988 00:1273: 22 xx xx xx  	jsl	~~k_debug_hex
  5989                        ;
  5990                        ;	sleep(32768);
  5991                        	.line	1189
  5992 00:1277: F4 00 80     	pea	#<$8000
  5993 00:127A: 22 xx xx xx  	jsl	~~sleep
  5994                        ;
  5995                        ;	k_debug_string("k_fd_rw_command:READING NOW!\r\n
                    ");
  5996                        	.line	1191
  5997 00:127E: F4 xx xx     	pea	#^L238+156
  5998 00:1281: F4 xx xx     	pea	#<L238+156
  5999 00:1284: 22 xx xx xx  	jsl	~~k_debug_string
  6000                        ;
  6001                        ;	sendbyte(cmd);
  6002                        	.line	1193
  6003 00:1288: D4 0C        	pei	<L240+cmd_1
  6004 00:128A: 22 xx xx xx  	jsl	~~sendbyte
  6005                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  6006                        	.line	1194
  6007 00:128E: A5 19        	lda	<L239+h_0
  6008 00:1290: 0A           	asl	A
  6009 00:1291: 0A           	asl	A
  6010 00:1292: 85 01        	sta	<R0
  6011 00:1294: AD xx xx     	lda	|~~cur_drive
  6012 00:1297: 29 FF 00     	and	#$ff
  6013 00:129A: 85 05        	sta	<R1
  6014 00:129C: A5 05        	lda	<R1
  6015 00:129E: 05 01        	ora	<R0
  6016 00:12A0: 48           	pha
  6017 00:12A1: 22 xx xx xx  	jsl	~~sendbyte
  6018                        ;	//sendbyte((UCHAR) 0x00);
  6019                        ;	sendbyte((UCHAR) c);
  6020                        	.line	1196
  6021 00:12A5: D4 17        	pei	<L239+c_0
  6022 00:12A7: 22 xx xx xx  	jsl	~~sendbyte
  6023                        ;	sendbyte((UCHAR) h);
  6024                        	.line	1197
  6025 00:12AB: D4 19        	pei	<L239+h_0
  6026 00:12AD: 22 xx xx xx  	jsl	~~sendbyte
  6027                        ;	sendbyte((UCHAR) s);
  6028                        	.line	1198
  6029 00:12B1: D4 1B        	pei	<L239+s_0
  6030 00:12B3: 22 xx xx xx  	jsl	~~sendbyte
  6031                        ;	sendbyte(0x2);
  6032                        	.line	1199
  6033 00:12B7: F4 02 00     	pea	#<$2
  6034 00:12BA: 22 xx xx xx  	jsl	~~sendbyte
  6035                        ;	sendbyte((UCHAR) SEC_PER_TRACK);
  6036                        	.line	1200
  6037 00:12BE: F4 12 00     	pea	#<$12
  6038 00:12C1: 22 xx xx xx  	jsl	~~sendbyte
  Sat Jul 10 2021  1:15                                                Page 117


  6039                        ;	sendbyte(0x1b);
  6040                        	.line	1201
  6041 00:12C5: F4 1B 00     	pea	#<$1b
  6042 00:12C8: 22 xx xx xx  	jsl	~~sendbyte
  6043                        ;	sendbyte(0xff);
  6044                        	.line	1202
  6045 00:12CC: F4 FF 00     	pea	#<$ff
  6046 00:12CF: 22 xx xx xx  	jsl	~~sendbyte
  6047                        ;
  6048                        ;	sleep(DRIVE_H1440_SPINUP);
  6049                        	.line	1204
  6050 00:12D3: F4 90 01     	pea	#<$190
  6051 00:12D6: 22 xx xx xx  	jsl	~~sleep
  6052                        ;	sleep(DRIVE_H1440_SPINUP);
  6053                        	.line	1205
  6054 00:12DA: F4 90 01     	pea	#<$190
  6055 00:12DD: 22 xx xx xx  	jsl	~~sleep
  6056                        ;
  6057                        ;	k_fd_isreadable();
  6058                        	.line	1207
  6059 00:12E1: 22 xx xx xx  	jsl	~~k_fd_isreadable
  6060                        ;
  6061                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  6062                        	.line	1209
  6063 00:12E5: 64 09        	stz	<L240+i_1
  6064                        L10082:
  6065                        ;	{
  6066                        	.line	1210
  6067                        ;		msr = inportb(FDC_MSR);
  6068                        	.line	1211
  6069 00:12E7: E2 20        	sep	#$20
  6070                        	longa	off
  6071 00:12E9: AF F4 13 AF  	lda	>11473908
  6072 00:12ED: 85 0B        	sta	<L240+msr_1
  6073 00:12EF: C2 20        	rep	#$20
  6074                        	longa	on
  6075                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  6076                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  6077                        	.line	1213
  6078                        ;			break;
  6079 00:12F1: E2 20        	sep	#$20
  6080                        	longa	off
  6081 00:12F3: A5 0B        	lda	<L240+msr_1
  6082 00:12F5: 29 C0        	and	#<$c0
  6083 00:12F7: C2 20        	rep	#$20
  6084                        	longa	on
  6085 00:12F9: F0 03        	beq	L245
  6086 00:12FB: 82 1E 00     	brl	L10081
  6087                        L245:
  6088                        ;		//k_debug_integer("floppy_transfer_try:f
                    loppybufferIndex:",floppybufferIndex);
  6089                        ;		buf[i] = getbyte();
  6090                        	.line	1216
  6091 00:12FE: 22 xx xx xx  	jsl	~~getbyte
  6092 00:1302: E2 20        	sep	#$20
  6093                        	longa	off
  6094 00:1304: A4 09        	ldy	<L240+i_1
  Sat Jul 10 2021  1:15                                                Page 118


  6095 00:1306: 97 11        	sta	[<L239+buf_0],Y
  6096 00:1308: C2 20        	rep	#$20
  6097                        	longa	on
  6098                        ;
  6099                        ;	}
  6100                        	.line	1218
  6101                        L10080:
  6102 00:130A: E6 09        	inc	<L240+i_1
  6103 00:130C: 38           	sec
  6104 00:130D: A5 09        	lda	<L240+i_1
  6105 00:130F: E9 00 02     	sbc	#<$200
  6106 00:1312: 70 03        	bvs	L246
  6107 00:1314: 49 00 80     	eor	#$8000
  6108                        L246:
  6109 00:1317: 30 03        	bmi	L247
  6110 00:1319: 82 CB FF     	brl	L10082
  6111                        L247:
  6112                        L10081:
  6113                        ;
  6114                        ;	k_debug_byte_array("DATA:\r\n",buf,512);
  6115                        	.line	1220
  6116 00:131C: F4 00 00     	pea	#^$200
  6117 00:131F: F4 00 02     	pea	#<$200
  6118 00:1322: D4 13        	pei	<L239+buf_0+2
  6119 00:1324: D4 11        	pei	<L239+buf_0
  6120 00:1326: F4 xx xx     	pea	#^L238+187
  6121 00:1329: F4 xx xx     	pea	#<L238+187
  6122 00:132C: 22 xx xx xx  	jsl	~~k_debug_byte_array
  6123                        ;
  6124                        ;
  6125                        ;	reg_sr0 = getbyte();
  6126                        	.line	1223
  6127 00:1330: 22 xx xx xx  	jsl	~~getbyte
  6128 00:1334: E2 20        	sep	#$20
  6129                        	longa	off
  6130 00:1336: 8D xx xx     	sta	|~~reg_sr0
  6131 00:1339: C2 20        	rep	#$20
  6132                        	longa	on
  6133                        ;	k_debug_bits("floppy_transfer_try1:reg_sr0:msr:"
                    ,reg_sr0);
  6134                        	.line	1224
  6135 00:133B: AD xx xx     	lda	|~~reg_sr0
  6136 00:133E: 48           	pha
  6137 00:133F: F4 xx xx     	pea	#^L238+195
  6138 00:1342: F4 xx xx     	pea	#<L238+195
  6139 00:1345: 22 xx xx xx  	jsl	~~k_debug_bits
  6140                        ;	reg_sr1 = getbyte();
  6141                        	.line	1225
  6142 00:1349: 22 xx xx xx  	jsl	~~getbyte
  6143 00:134D: E2 20        	sep	#$20
  6144                        	longa	off
  6145 00:134F: 8D xx xx     	sta	|~~reg_sr1
  6146 00:1352: C2 20        	rep	#$20
  6147                        	longa	on
  6148                        ;	k_debug_bits("floppy_transfer_try1:reg_sr1:msr:"
                    ,reg_sr1);
  6149                        	.line	1226
  6150 00:1354: AD xx xx     	lda	|~~reg_sr1
  Sat Jul 10 2021  1:15                                                Page 119


  6151 00:1357: 48           	pha
  6152 00:1358: F4 xx xx     	pea	#^L238+229
  6153 00:135B: F4 xx xx     	pea	#<L238+229
  6154 00:135E: 22 xx xx xx  	jsl	~~k_debug_bits
  6155                        ;	reg_sr2 = getbyte();
  6156                        	.line	1227
  6157 00:1362: 22 xx xx xx  	jsl	~~getbyte
  6158 00:1366: E2 20        	sep	#$20
  6159                        	longa	off
  6160 00:1368: 8D xx xx     	sta	|~~reg_sr2
  6161 00:136B: C2 20        	rep	#$20
  6162                        	longa	on
  6163                        ;	k_debug_bits("floppy_transfer_try1:reg_sr2:msr:"
                    ,reg_sr2);
  6164                        	.line	1228
  6165 00:136D: AD xx xx     	lda	|~~reg_sr2
  6166 00:1370: 48           	pha
  6167 00:1371: F4 xx xx     	pea	#^L238+263
  6168 00:1374: F4 xx xx     	pea	#<L238+263
  6169 00:1377: 22 xx xx xx  	jsl	~~k_debug_bits
  6170                        ;	drives[cur_drive].track = getbyte();
  6171                        	.line	1229
  6172 00:137B: AD xx xx     	lda	|~~cur_drive
  6173 00:137E: 29 FF 00     	and	#$ff
  6174 00:1381: 85 01        	sta	<R0
  6175 00:1383: A5 01        	lda	<R0
  6176 00:1385: 0A           	asl	A
  6177 00:1386: 65 01        	adc	<R0
  6178 00:1388: 0A           	asl	A
  6179 00:1389: 85 01        	sta	<R0
  6180 00:138B: 22 xx xx xx  	jsl	~~getbyte
  6181 00:138F: A6 01        	ldx	<R0
  6182 00:1391: 9D xx xx     	sta	|~~drives,X
  6183                        ;
  6184                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  6185                        ;
  6186                        ;	i = getbyte();
  6187                        	.line	1233
  6188 00:1394: 22 xx xx xx  	jsl	~~getbyte
  6189 00:1398: 85 09        	sta	<L240+i_1
  6190                        ;	k_debug_bits("floppy_transfer_try1:1:c:",i);
  6191                        	.line	1234
  6192 00:139A: D4 09        	pei	<L240+i_1
  6193 00:139C: F4 xx xx     	pea	#^L238+297
  6194 00:139F: F4 xx xx     	pea	#<L238+297
  6195 00:13A2: 22 xx xx xx  	jsl	~~k_debug_bits
  6196                        ;	//k_debug_integer("floppy_transfer_try:i1:",i);
  6197                        ;	i = getbyte();
  6198                        	.line	1236
  6199 00:13A6: 22 xx xx xx  	jsl	~~getbyte
  6200 00:13AA: 85 09        	sta	<L240+i_1
  6201                        ;	k_debug_bits("floppy_transfer_try1:2:h:",i);
  6202                        	.line	1237
  6203 00:13AC: D4 09        	pei	<L240+i_1
  6204 00:13AE: F4 xx xx     	pea	#^L238+323
  6205 00:13B1: F4 xx xx     	pea	#<L238+323
  6206 00:13B4: 22 xx xx xx  	jsl	~~k_debug_bits
  Sat Jul 10 2021  1:15                                                Page 120


  6207                        ;	//k_debug_integer("floppy_transfer_try:i2:",i);
  6208                        ;	i = getbyte();
  6209                        	.line	1239
  6210 00:13B8: 22 xx xx xx  	jsl	~~getbyte
  6211 00:13BC: 85 09        	sta	<L240+i_1
  6212                        ;	k_debug_bits("floppy_transfer_try1:3:r:",i);
  6213                        	.line	1240
  6214 00:13BE: D4 09        	pei	<L240+i_1
  6215 00:13C0: F4 xx xx     	pea	#^L238+349
  6216 00:13C3: F4 xx xx     	pea	#<L238+349
  6217 00:13C6: 22 xx xx xx  	jsl	~~k_debug_bits
  6218                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  6219                        ;	i = getbyte();
  6220                        	.line	1242
  6221 00:13CA: 22 xx xx xx  	jsl	~~getbyte
  6222 00:13CE: 85 09        	sta	<L240+i_1
  6223                        ;	k_debug_bits("floppy_transfer_try1:3:n:",i);
  6224                        	.line	1243
  6225 00:13D0: D4 09        	pei	<L240+i_1
  6226 00:13D2: F4 xx xx     	pea	#^L238+375
  6227 00:13D5: F4 xx xx     	pea	#<L238+375
  6228 00:13D8: 22 xx xx xx  	jsl	~~k_debug_bits
  6229                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  6230                        ;
  6231                        ;	k_debug_integer("floppy_transfer_try:floppybuffe
                    rIndex:",floppybufferIndex);
  6232                        	.line	1246
  6233 00:13DC: AD xx xx     	lda	|~~floppybufferIndex
  6234 00:13DF: 48           	pha
  6235 00:13E0: F4 xx xx     	pea	#^L238+401
  6236 00:13E3: F4 xx xx     	pea	#<L238+401
  6237 00:13E6: 22 xx xx xx  	jsl	~~k_debug_integer
  6238                        ;	//return i != 2;
  6239                        ;
  6240                        ;	retCode = (i != 2);
  6241                        	.line	1249
  6242 00:13EA: 64 01        	stz	<R0
  6243 00:13EC: A5 09        	lda	<L240+i_1
  6244 00:13EE: C9 02 00     	cmp	#<$2
  6245 00:13F1: D0 03        	bne	L249
  6246 00:13F3: 82 02 00     	brl	L248
  6247                        L249:
  6248 00:13F6: E6 01        	inc	<R0
  6249                        L248:
  6250 00:13F8: E2 20        	sep	#$20
  6251                        	longa	off
  6252 00:13FA: A5 01        	lda	<R0
  6253 00:13FC: 85 0D        	sta	<L240+retCode_1
  6254 00:13FE: C2 20        	rep	#$20
  6255                        	longa	on
  6256                        ;
  6257                        ;	return retCode;
  6258                        	.line	1251
  6259 00:1400: A5 0D        	lda	<L240+retCode_1
  6260 00:1402: 29 FF 00     	and	#$ff
  6261                        L250:
  6262 00:1405: A8           	tay
  6263 00:1406: A5 0F        	lda	<L239+2
  Sat Jul 10 2021  1:15                                                Page 121


  6264 00:1408: 85 1B        	sta	<L239+2+12
  6265 00:140A: A5 0E        	lda	<L239+1
  6266 00:140C: 85 1A        	sta	<L239+1+12
  6267 00:140E: 2B           	pld
  6268 00:140F: 3B           	tsc
  6269 00:1410: 18           	clc
  6270 00:1411: 69 19 00     	adc	#L239+12
  6271 00:1414: 1B           	tcs
  6272 00:1415: 98           	tya
  6273 00:1416: 6B           	rtl
  6274                        ;}
  6275                        	.line	1252
  6276                        	.endblock	1252
  6277             0000000D   L239	equ	13
  6278             00000009   L240	equ	9
  6279                        	ends
  6280                        	efunc
  6281                        	.endfunc	1252,9,13
  6282                        	.line	1252
  6283                        	data
  6284                        L238:
  6285 00:063C: 6B 5F 66 64  	db	$6B,$5F,$66,$64,$5F,$72,$77,$5F,$63,$6F,
                    $6D,$6D,$61,$6E,$64
       00:0640: 5F 72 77 5F 
       00:0644: 63 6F 6D 6D 
       00:0648: 61 6E 64 
  6286 00:064B: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:064F: 66 64 5F 72 
       00:0653: 77 5F 63 6F 
       00:0657: 6D 6D 61 
  6287 00:065A: 6E 64 3A 74  	db	$6E,$64,$3A,$74,$72,$61,$63,$6B,$3A,$00,
                    $6B,$5F,$66,$64,$5F
       00:065E: 72 61 63 6B 
       00:0662: 3A 00 6B 5F 
       00:0666: 66 64 5F 
  6288 00:0669: 72 77 5F 63  	db	$72,$77,$5F,$63,$6F,$6D,$6D,$61,$6E,$64,
                    $3A,$68,$65,$61,$64
       00:066D: 6F 6D 6D 61 
       00:0671: 6E 64 3A 68 
       00:0675: 65 61 64 
  6289 00:0678: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:067C: 66 64 5F 72 
       00:0680: 77 5F 63 6F 
       00:0684: 6D 6D 61 
  6290 00:0687: 6E 64 3A 73  	db	$6E,$64,$3A,$73,$65,$63,$74,$6F,$72,$3A,
                    $00,$6B,$5F,$66,$64
       00:068B: 65 63 74 6F 
       00:068F: 72 3A 00 6B 
       00:0693: 5F 66 64 
  6291 00:0696: 5F 72 77 5F  	db	$5F,$72,$77,$5F,$63,$6F,$6D,$6D,$61,$6E,
                    $64,$3A,$43,$4D,$44
       00:069A: 63 6F 6D 6D 
       00:069E: 61 6E 64 3A 
       00:06A2: 43 4D 44 
  6292 00:06A5: 5F 53 45 4E  	db	$5F,$53,$45,$4E,$53,$45,$49,$3A,$72,$65,
                    $67,$5F,$73,$72,$30
  Sat Jul 10 2021  1:15                                                Page 122


       00:06A9: 53 45 49 3A 
       00:06AD: 72 65 67 5F 
       00:06B1: 73 72 30 
  6293 00:06B4: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:06B8: 66 64 5F 72 
       00:06BC: 77 5F 63 6F 
       00:06C0: 6D 6D 61 
  6294 00:06C3: 6E 64 3A 43  	db	$6E,$64,$3A,$43,$4D,$44,$5F,$53,$45,$4E,
                    $53,$45,$49,$3A,$74
       00:06C7: 4D 44 5F 53 
       00:06CB: 45 4E 53 45 
       00:06CF: 49 3A 74 
  6295 00:06D2: 72 61 63 6B  	db	$72,$61,$63,$6B,$3A,$00,$6B,$5F,$66,$64,
                    $5F,$72,$77,$5F,$63
       00:06D6: 3A 00 6B 5F 
       00:06DA: 66 64 5F 72 
       00:06DE: 77 5F 63 
  6296 00:06E1: 6F 6D 6D 61  	db	$6F,$6D,$6D,$61,$6E,$64,$3A,$52,$45,$41,
                    $44,$49,$4E,$47,$20
       00:06E5: 6E 64 3A 52 
       00:06E9: 45 41 44 49 
       00:06ED: 4E 47 20 
  6297 00:06F0: 4E 4F 57 21  	db	$4E,$4F,$57,$21,$0D,$0A,$00,$44,$41,$54,
                    $41,$3A,$0D,$0A,$00
       00:06F4: 0D 0A 00 44 
       00:06F8: 41 54 41 3A 
       00:06FC: 0D 0A 00 
  6298 00:06FF: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0703: 70 79 5F 74 
       00:0707: 72 61 6E 73 
       00:070B: 66 65 72 
  6299 00:070E: 5F 74 72 79  	db	$5F,$74,$72,$79,$31,$3A,$72,$65,$67,$5F,
                    $73,$72,$30,$3A,$6D
       00:0712: 31 3A 72 65 
       00:0716: 67 5F 73 72 
       00:071A: 30 3A 6D 
  6300 00:071D: 73 72 3A 00  	db	$73,$72,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
       00:0721: 66 6C 6F 70 
       00:0725: 70 79 5F 74 
       00:0729: 72 61 6E 
  6301 00:072C: 73 66 65 72  	db	$73,$66,$65,$72,$5F,$74,$72,$79,$31,$3A,
                    $72,$65,$67,$5F,$73
       00:0730: 5F 74 72 79 
       00:0734: 31 3A 72 65 
       00:0738: 67 5F 73 
  6302 00:073B: 72 31 3A 6D  	db	$72,$31,$3A,$6D,$73,$72,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:073F: 73 72 3A 00 
       00:0743: 66 6C 6F 70 
       00:0747: 70 79 5F 
  6303 00:074A: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$31,$3A,$72
       00:074E: 73 66 65 72 
       00:0752: 5F 74 72 79 
       00:0756: 31 3A 72 
  Sat Jul 10 2021  1:15                                                Page 123


  6304 00:0759: 65 67 5F 73  	db	$65,$67,$5F,$73,$72,$32,$3A,$6D,$73,$72,
                    $3A,$00,$66,$6C,$6F
       00:075D: 72 32 3A 6D 
       00:0761: 73 72 3A 00 
       00:0765: 66 6C 6F 
  6305 00:0768: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$5F,$74,$72
       00:076C: 74 72 61 6E 
       00:0770: 73 66 65 72 
       00:0774: 5F 74 72 
  6306 00:0777: 79 31 3A 31  	db	$79,$31,$3A,$31,$3A,$63,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:077B: 3A 63 3A 00 
       00:077F: 66 6C 6F 70 
       00:0783: 70 79 5F 
  6307 00:0786: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$31,$3A,$32
       00:078A: 73 66 65 72 
       00:078E: 5F 74 72 79 
       00:0792: 31 3A 32 
  6308 00:0795: 3A 68 3A 00  	db	$3A,$68,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
       00:0799: 66 6C 6F 70 
       00:079D: 70 79 5F 74 
       00:07A1: 72 61 6E 
  6309 00:07A4: 73 66 65 72  	db	$73,$66,$65,$72,$5F,$74,$72,$79,$31,$3A,
                    $33,$3A,$72,$3A,$00
       00:07A8: 5F 74 72 79 
       00:07AC: 31 3A 33 3A 
       00:07B0: 72 3A 00 
  6310 00:07B3: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:07B7: 70 79 5F 74 
       00:07BB: 72 61 6E 73 
       00:07BF: 66 65 72 
  6311 00:07C2: 5F 74 72 79  	db	$5F,$74,$72,$79,$31,$3A,$33,$3A,$6E,$3A,
                    $00,$66,$6C,$6F,$70
       00:07C6: 31 3A 33 3A 
       00:07CA: 6E 3A 00 66 
       00:07CE: 6C 6F 70 
  6312 00:07D1: 70 79 5F 74  	db	$70,$79,$5F,$74,$72,$61,$6E,$73,$66,$65,
                    $72,$5F,$74,$72,$79
       00:07D5: 72 61 6E 73 
       00:07D9: 66 65 72 5F 
       00:07DD: 74 72 79 
  6313 00:07E0: 3A 66 6C 6F  	db	$3A,$66,$6C,$6F,$70,$70,$79,$62,$75,$66,
                    $66,$65,$72,$49,$6E
       00:07E4: 70 70 79 62 
       00:07E8: 75 66 66 65 
       00:07EC: 72 49 6E 
  6314 00:07EF: 64 65 78 3A  	db	$64,$65,$78,$3A,$00
       00:07F3: 00 
  6315 00:07F4:              	ends
  6316                        ;
  6317                        ;
  6318                        ;
  6319                        	.line	1254
  6320                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Sat Jul 10 2021  1:15                                                Page 124


                    space\FXOSv1\src\fxfloppy.c",1164
  6321                        	xref	~~k_debug_byte_array
  6322                        	xref	~~k_debug_bits
  6323                        	xref	~~k_debug_hex
  6324                        	xref	~~k_debug_long
  6325                        	xref	~~k_debug_integer
  6326                        	xref	~~k_debug_string
  6327                        	xref	~~sleep
  6328                        	udata
  6329                        	xdef	~~floppybuffer
  6330                        ~~floppybuffer
  6331 00:0000:              	ds	512
  6332 00:0200:              	ends
  6333                        	udata
  6334                        ~~status
  6335 00:0200:              	ds	7
  6336 00:0207:              	ends
  6337                        	udata
  6338                        ~~status_sz
  6339 00:0207:              	ds	2
  6340 00:0209:              	ends
  6341                        	udata
  6342                        ~~motoff_timer
  6343 00:0209:              	ds	2
  6344 00:020B:              	ends
  6345                        	udata
  6346                        ~~drives
  6347 00:020B:              	ds	24
  6348 00:0223:              	ends
  6349                        	udata
  6350                        ~~reg_sr2
  6351 00:0223:              	ds	1
  6352 00:0224:              	ends
  6353                        	udata
  6354                        ~~reg_sr1
  6355 00:0224:              	ds	1
  6356 00:0225:              	ends
  6357                        	udata
  6358                        ~~reg_sr0
  6359 00:0225:              	ds	1
  6360 00:0226:              	ends
  6361                        	udata
  6362                        ~~reg_dor
  6363 00:0226:              	ds	1
  6364 00:0227:              	ends
  6365                        	.sym	~~wait_til_ready,~~wait_til_ready,69,3,0
  6366                        	.sym	~~floppybuffer,~~floppybuffer,110,2,0,51
                    2
  6367                        	.sym	~~floppybufferIndex,~~floppybufferIndex,
                    16,2,16
  6368                        	.sym	~~status,~~status,110,3,0,7
  6369                        	.sym	~~status_sz,~~status_sz,5,3,16
  6370                        	.sym	~~motoff_timer,~~motoff_timer,5,3,16
  6371                        	.sym	~~cur_drive,~~cur_drive,14,3,8
  6372                        	.sym	~~drives,~~drives,106,3,0,85,4
  6373                        	.sym	~~reg_sr2,~~reg_sr2,14,3,8
  6374                        	.sym	~~reg_sr1,~~reg_sr1,14,3,8
  6375                        	.sym	~~reg_sr0,~~reg_sr0,14,3,8
  Sat Jul 10 2021  1:15                                                Page 125


  6376                        	.sym	~~reg_dor,~~reg_dor,14,3,8
  6377                        	.sym	drive_state_t,0,10,14,48,85
  6378                        	.sym	~~k_fd_rw_command,~~k_fd_rw_command,69,3
                    ,0
  6379                        	.sym	~~k_fd_read_lba,~~k_fd_read_lba,69,3,0
  6380                        	.sym	~~k_fd_read_sector,~~k_fd_read_sector,80
                    ,2,0
  6381                        	.sym	~~k_fd_isbusy_drive,~~k_fd_isbusy_drive,
                    78,2,0
  6382                        	.sym	~~k_fd_isbusy,~~k_fd_isbusy,78,2,0
  6383                        	.sym	~~k_fd_isready,~~k_fd_isready,78,2,0
  6384                        	.sym	~~k_fd_isreadable,~~k_fd_isreadable,78,2
                    ,0
  6385                        	.sym	~~k_fd_init,~~k_fd_init,78,2,0
  6386                        	.sym	~~k_fd_reset,~~k_fd_reset,78,2,0
  6387                        	.sym	~~floppy_timer,~~floppy_timer,65,2,0
  6388                        	.sym	~~floppy_isr,~~floppy_isr,65,2,0
  6389                        	.sym	~~floppy_write,~~floppy_write,69,2,0
  6390                        	.sym	~~floppy_read,~~floppy_read,69,2,0
  6391                        	.sym	~~floppy_transfer_lba,~~floppy_transfer_
                    lba,69,3,0
  6392                        	.sym	~~floppy_transfer,~~floppy_transfer,69,3
                    ,0
  6393                        	.sym	~~floppy_transfer_try2,~~floppy_transfer
                    _try2,69,3,0
  6394                        	.sym	~~floppy_transfer_try1,~~floppy_transfer
                    _try1,69,3,0
  6395                        	.sym	~~floppy_present,~~floppy_present,69,2,0
  6396                        	.sym	~~floppy_seek,~~floppy_seek,69,3,0
  6397                        	.sym	~~floppy_calibrate,~~floppy_calibrate,65
                    ,3,0
  6398                        	.sym	~~floppy_drive_data,~~floppy_drive_data,
                    65,2,0
  6399                        	.sym	~~floppy_select,~~floppy_select,69,3,0
  6400                        	.sym	~~floppy_specify,~~floppy_specify,65,3,0
  6401                        	.sym	~~fdc_reset,~~fdc_reset,65,3,0
  6402                        	.sym	~~fdc_configure,~~fdc_configure,65,3,0
  6403                        	.sym	~~motor_off,~~motor_off,65,3,0
  6404                        	.sym	~~motor_on,~~motor_on,65,3,0
  6405                        	.sym	~~fdc_wait,~~fdc_wait,69,3,0
  6406                        	.sym	~~fdc_waitint,~~fdc_waitint,69,3,0
  6407                        	.sym	~~getbyte,~~getbyte,69,2,0
  6408                        	.sym	~~sendbyte,~~sendbyte,69,2,0
  6409                        	.sym	~~lba_2_chs,~~lba_2_chs,65,3,0
  6410                        	.sym	~~io_wait,~~io_wait,65,3,0
  6411                        	.sym	~~floppy_check_int,~~floppy_check_int,65
                    ,2,0
  6412                        	.sym	~~floppy_init,~~floppy_init,65,2,0
  6413                        	.sym	~~irq_signaled,~~irq_signaled,14,2,8
  6414                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  6415                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  6416                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  6417                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  6418                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  6419                        	.sym	DEVICEDRIVER_IRQ,0,654,14,32
  6420                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,84
  6421                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,808,84
  6422                        	.sym	GETDRIVERDEF,0,8842,14,32,83
  Sat Jul 10 2021  1:15                                                Page 126


  6423                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,83
  6424                        	.sym	FX_DEVICE_DRIVER,0,10,14,776,83
  6425                        	.sym	~~k_debug_byte_array,~~k_debug_byte_arra
                    y,65,18,0
  6426                        	.sym	~~k_debug_bits,~~k_debug_bits,65,18,0
  6427                        	.sym	~~k_debug_hex,~~k_debug_hex,65,18,0
  6428                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
  6429                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  6430                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  6431                        	.sym	~~sleep,~~sleep,65,18,0
  6432                        	.sym	PSEGMENTHEADER,0,138,14,32,82
  6433                        	.sym	SEGMENTHEADER,0,10,14,160,82
  6434                        	.sym	PDEBUGBYTEBITS,0,138,14,32,81
  6435                        	.sym	DEBUGBYTEBITS,0,10,14,8,81
  6436                        	.sym	PFXENVIRONMENT,0,138,14,32,80
  6437                        	.sym	FXENVIRONMENT,0,10,14,96,80
  6438                        	.sym	PFXZEROPAGE,0,138,14,32,79
  6439                        	.sym	FXZEROPAGE,0,10,14,824,79
  6440                        	.sym	KERNELTRAPCALL,0,641,14,32
  6441                        	.sym	PFXKERNEL_API_CALLTABLE,0,138,14,32,78
  6442                        	.sym	FXKERNEL_API_CALLTABLE,0,10,14,8192,78
  6443                        	.sym	FRESULT,0,5,14,16
  6444                        	.sym	MKFS_PARM,0,10,14,80,77
  6445                        	.sym	FILINFO,0,10,14,2224,76
  6446                        	.sym	DIR,0,10,14,416,75
  6447                        	.sym	FIL,0,10,14,4400,74
  6448                        	.sym	FFOBJID,0,10,14,128,73
  6449                        	.sym	FATFS,0,10,14,4504,72
  6450                        	.sym	LBA_t,0,18,14,32
  6451                        	.sym	FSIZE_t,0,18,14,32
  6452                        	.sym	TCHAR,0,14,14,8
  6453                        	.sym	PCOMMANDARGS,0,138,14,32,71
  6454                        	.sym	COMMANDARGS,0,10,14,64,71
  6455                        	.sym	PTOKENIZESTATE,0,133,14,32
  6456                        	.sym	TOKENIZESTATE,0,5,14,16
  6457                        	.sym	PTOKEN,0,138,14,32,70
  6458                        	.sym	TOKEN,0,10,14,64,70
  6459                        	.sym	PTOKENTYPE,0,133,14,32
  6460                        	.sym	TOKENTYPE,0,5,14,16
  6461                        	.sym	FXCommandHandler,0,656,14,32
  6462                        	.sym	PCONSOLECTX,0,138,14,32,69
  6463                        	.sym	CONSOLECTX,0,10,14,1144,69
  6464                        	.sym	PSPINNERCTX,0,138,14,32,68
  6465                        	.sym	SPINNERCTX,0,10,14,48,68
  6466                        	.sym	HCLIP,0,138,14,32,67
  6467                        	.sym	PCLIPBOARD_DATA,0,138,14,32,67
  6468                        	.sym	CLIPBOARD_DATA,0,10,14,168,67
  6469                        	.sym	PEVENTMANAGER,0,138,14,32,66
  6470                        	.sym	EVENTMANAGER,0,10,14,192,66
  6471                        	.sym	EV_RUN,0,656,14,32
  6472                        	.sym	EV_QUERY_METRIC,0,656,14,32
  6473                        	.sym	EV_CONFIGURE,0,656,14,32
  6474                        	.sym	EV_UNINIT,0,641,14,32
  6475                        	.sym	EV_INIT,0,8833,14,32
  6476                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,65
  6477                        	.sym	MOUSE_MSG_STATE,0,10,14,184,65
  Sat Jul 10 2021  1:15                                                Page 127


  6478                        	.sym	PFXEVENTPROCESS,0,138,14,32,64
  6479                        	.sym	FXEVENTPROCESS,0,10,14,64,64
  6480                        	.sym	PMARSHALDATA,0,139,14,32,63
  6481                        	.sym	MARSHALDATA,0,11,14,32,63
  6482                        	.sym	FXIDLEPROCESS,0,641,14,32
  6483                        	.sym	FXEventProc,0,641,14,32
  6484                        	.sym	PMOUSEMSGDATA,0,138,14,32,62
  6485                        	.sym	MOUSEMSGDATA,0,10,14,64,62
  6486                        	.sym	MSGIRQ,0,5,14,16
  6487                        	.sym	MAINLOOPARGS,0,10,14,16,61
  6488                        	.sym	PEACHCHILD_MSG,0,138,14,32,60
  6489                        	.sym	EACHCHILD_MSG,0,10,14,64,60
  6490                        	.sym	PMSGBOX_DATA,0,138,14,32,59
  6491                        	.sym	MSGBOX_DATA,0,10,14,96,59
  6492                        	.sym	PDESKTOP_DATA,0,138,14,32,58
  6493                        	.sym	DESKTOP_DATA,0,10,14,64,58
  6494                        	.sym	PWINDOWMANAGER,0,138,14,32,57
  6495                        	.sym	WINDOWMANAGER,0,10,14,160,57
  6496                        	.sym	WM_DOPROCS,0,641,14,32
  6497                        	.sym	WM_QUERY_METRIC,0,656,14,32
  6498                        	.sym	WM_CONFIGURE,0,656,14,32
  6499                        	.sym	WM_HANDLE_EVENT,0,8833,14,32
  6500                        	.sym	WM_EVENTS,0,641,14,32
  6501                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,56
  6502                        	.sym	CUR_PALETTE_MAP,0,10,14,400,56
  6503                        	.sym	PCLICKDETECTED,0,138,14,32,55
  6504                        	.sym	CLICKDETECTED,0,10,14,64,55
  6505                        	.sym	OBJECTCLICKED,0,641,14,32
  6506                        	.sym	PIPCPORT,0,138,14,32,54
  6507                        	.sym	IPCPORT,0,10,14,144,54
  6508                        	.sym	MemoryCallback,0,641,14,32
  6509                        	.sym	PFXMEMORYMAP,0,138,14,32,53
  6510                        	.sym	FXMEMORYMAP,0,10,14,2072,53
  6511                        	.sym	UMM_HEAP_INFO,0,10,14,256,52
  6512                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  6513                        	.sym	FOREACHNODE,0,641,14,32
  6514                        	.sym	PEXECUTIVE,0,138,14,32,51
  6515                        	.sym	EXECUTIVE,0,10,14,128,51
  6516                        	.sym	EX_QUERY_METRIC,0,656,14,32
  6517                        	.sym	EX_CONFIGURE,0,656,14,32
  6518                        	.sym	EX_UNINIT,0,641,14,32
  6519                        	.sym	EX_INIT,0,8833,14,32
  6520                        	.sym	PFXSTRING,0,138,14,32,50
  6521                        	.sym	FXSTRING,0,10,14,64,50
  6522                        	.sym	Boolean_T,0,5,14,16
  6523                        	.sym	ldiv_t,0,10,14,64,48
  6524                        	.sym	div_t,0,10,14,32,47
  6525                        	.sym	wctype_t,0,16,14,16
  6526                        	.sym	wint_t,0,16,14,16
  6527                        	.sym	wchar_t,0,14,14,8
  6528                        	.sym	ptrdiff_t,0,7,14,32
  6529                        	.sym	size_t,0,16,14,16
  6530                        	.sym	PFXRFHEADER_FONT,0,138,14,32,46
  6531                        	.sym	FXRFHEADER_FONT,0,10,14,144,46
  6532                        	.sym	PFXRFHEADER,0,138,14,32,45
  6533                        	.sym	FXRFHEADER,0,10,14,72,45
  6534                        	.sym	PFXCOMBUFFER,0,138,14,32,44
  6535                        	.sym	FXCOMBUFFER,0,10,14,2080,44
  Sat Jul 10 2021  1:15                                                Page 128


  6536                        	.sym	PSUBMENULIST,0,138,14,32,43
  6537                        	.sym	SUBMENULIST,0,10,14,40,43
  6538                        	.sym	HSUBMENU,0,7,14,32
  6539                        	.sym	PSUBMENU,0,138,14,32,42
  6540                        	.sym	SUBMENU,0,10,14,64,42
  6541                        	.sym	MenuAction,0,641,14,32
  6542                        	.sym	PMENUANCHOR,0,138,14,32,41
  6543                        	.sym	MENUANCHOR,0,10,14,272,41
  6544                        	.sym	PMSGBOX,0,138,14,32,40
  6545                        	.sym	MSGBOX,0,10,14,144,40
  6546                        	.sym	PTEXTBOX,0,138,14,32,39
  6547                        	.sym	TEXTBOX,0,10,14,144,39
  6548                        	.sym	PLISTBOX,0,138,14,32,38
  6549                        	.sym	LISTBOX,0,10,14,240,38
  6550                        	.sym	PSCROLLBAR,0,138,14,32,37
  6551                        	.sym	SCROLLBAR,0,10,14,240,37
  6552                        	.sym	PBUTTON,0,138,14,32,36
  6553                        	.sym	BUTTON,0,10,14,96,36
  6554                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,35
  6555                        	.sym	MENUDROPDOWNDATA,0,10,14,5152,35
  6556                        	.sym	PMENUTAG,0,138,14,32,34
  6557                        	.sym	MENUTAG,0,10,14,160,34
  6558                        	.sym	PMENU,0,138,14,32,33
  6559                        	.sym	MENU,0,10,14,280,33
  6560                        	.sym	HMENURESOURCE,0,129,14,32
  6561                        	.sym	FONTMETRIC,0,10,14,32,32
  6562                        	.sym	TITLE,0,142,14,32
  6563                        	.sym	PHANDLE,0,1153,14,32
  6564                        	.sym	HANDLE,0,129,14,32
  6565                        	.sym	PWINDOWEX,0,138,14,32,31
  6566                        	.sym	WINDOWEX,0,10,14,3880,31
  6567                        	.sym	PWINDOW,0,138,14,32,30
  6568                        	.sym	WINDOW,0,10,14,3904,30
  6569                        	.sym	PDRAGDATA,0,138,14,32,29
  6570                        	.sym	DRAGDATA,0,10,14,216,29
  6571                        	.sym	PNCCLICKABLE,0,138,14,32,28
  6572                        	.sym	NCCLICKABLE,0,10,14,136,28
  6573                        	.sym	HCLICKABLE,0,7,14,32
  6574                        	.sym	PCLICKABLE,0,138,14,32,27
  6575                        	.sym	CLICKABLE,0,10,14,152,27
  6576                        	.sym	PWNDCLASS,0,138,14,32,26
  6577                        	.sym	WNDCLASS,0,10,14,272,26
  6578                        	.sym	HBRUSH,0,129,14,32
  6579                        	.sym	HCURSOR,0,129,14,32
  6580                        	.sym	HICON,0,129,14,32
  6581                        	.sym	HINSTANCE,0,129,14,32
  6582                        	.sym	FXWndProc,0,654,14,32
  6583                        	.sym	PDRECT,0,138,14,32,25
  6584                        	.sym	DRECT,0,10,14,112,25
  6585                        	.sym	PRECTP,0,138,14,32,24
  6586                        	.sym	RECTP,0,10,14,96,24
  6587                        	.sym	PRECT,0,138,14,32,23
  6588                        	.sym	RECT,0,10,14,112,23
  6589                        	.sym	PPOINT,0,138,14,32,22
  6590                        	.sym	POINT,0,10,14,32,22
  6591                        	.sym	PFXPROPERTY,0,138,14,32,20
  6592                        	.sym	FXPROPERTY,0,10,14,384,20
  6593                        	.sym	PKEYSTATE,0,138,14,32,19
  Sat Jul 10 2021  1:15                                                Page 129


  6594                        	.sym	KEYSTATE,0,10,14,112,19
  6595                        	.sym	SCANCODE,0,14,14,8
  6596                        	.sym	KEYCODE,0,16,14,16
  6597                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
  6598                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
  6599                        	.sym	PFXPROCESS,0,138,14,32,17
  6600                        	.sym	FXPROCESS,0,10,14,800,17
  6601                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
  6602                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
  6603                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
  6604                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
  6605                        	.sym	FXProcessProc,0,641,14,32
  6606                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
  6607                        	.sym	FXCMDMESSAGE,0,10,14,304,14
  6608                        	.sym	PFXOSMESSAGE,0,138,14,32,13
  6609                        	.sym	FXOSMESSAGE,0,10,14,304,13
  6610                        	.sym	PINT_REGS,0,138,14,32,12
  6611                        	.sym	INT_REGS,0,10,14,104,12
  6612                        	.sym	TASK_STACK,0,10,14,32,11
  6613                        	.sym	TASK,0,10,14,48,10
  6614                        	.sym	PIRQDATA,0,138,14,32,9
  6615                        	.sym	IRQDATA,0,10,14,48,9
  6616                        	.sym	HMENU,0,129,14,32
  6617                        	.sym	HWND,0,129,14,32
  6618                        	.sym	MSGDATA,0,14,14,8
  6619                        	.sym	MSGDEST,0,18,14,32
  6620                        	.sym	MSGSRC,0,18,14,32
  6621                        	.sym	MSGTYPE,0,16,14,16
  6622                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
  6623                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
  6624                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
  6625                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
  6626                        	.sym	FILE_PATH_LIST,0,138,14,32,3
  6627                        	.sym	PROCEDURE_LIST,0,138,14,32,3
  6628                        	.sym	FILE_HANDLE,0,138,14,32,8
  6629                        	.sym	FILE_BLOCK,0,10,14,552,8
  6630                        	.sym	SEMAPHORE,0,10,14,16,7
  6631                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
  6632                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
  6633                        	.sym	KRESULT,0,18,14,32
  6634                        	.sym	PKERNEL_ERROR,0,138,14,32,5
  6635                        	.sym	KERNEL_ERROR,0,10,14,32,5
  6636                        	.sym	PROCESS_STATUS,0,16,14,16
  6637                        	.sym	FILE_PATH_NAME,0,142,14,32
  6638                        	.sym	PROCESS_RESOURCE,0,129,14,32
  6639                        	.sym	PROCESS_TLS,0,129,14,32
  6640                        	.sym	PROCESS_CTX,0,129,14,32
  6641                        	.sym	USERID,0,16,14,16
  6642                        	.sym	PROCESS_ID,0,18,14,32
  6643                        	.sym	PROCESS_BANK,0,14,14,8
  6644                        	.sym	PFXQUEUE,0,138,14,32,4
  6645                        	.sym	FXQUEUE,0,10,14,80,4
  6646                        	.sym	PFXNODELIST,0,138,14,32,3
  6647                        	.sym	FXNODELIST,0,10,14,96,3
  6648                        	.sym	NodeListDeallocator,0,641,14,32
  6649                        	.sym	PFXNODE,0,138,14,32,2
  6650                        	.sym	FXNODE,0,10,14,384,2
  6651                        	.sym	PBYTEBITS,0,138,14,32,1
  Sat Jul 10 2021  1:15                                                Page 130


  6652                        	.sym	BYTEBITS,0,10,14,8,1
  6653                        	.sym	HRESULT,0,18,14,32
  6654                        	.sym	LPWCHAR,0,144,14,32
  6655                        	.sym	WCHAR,0,16,14,16
  6656                        	.sym	HCOLOR,0,129,14,32
  6657                        	.sym	HFONT,0,129,14,32
  6658                        	.sym	HDC,0,129,14,32
  6659                        	.sym	HPOINTER,0,129,14,32
  6660                        	.sym	uint32_t,0,18,14,32
  6661                        	.sym	uint8_t,0,14,14,8
  6662                        	.sym	LPBOOL,0,142,14,32
  6663                        	.sym	BOOL,0,14,14,8
  6664                        	.sym	DWORD,0,18,14,32
  6665                        	.sym	ULONG,0,18,14,32
  6666                        	.sym	LPLONG,0,135,14,32
  6667                        	.sym	LONG,0,7,14,32
  6668                        	.sym	PUINT,0,144,14,32
  6669                        	.sym	USHORT,0,16,14,16
  6670                        	.sym	UINT,0,16,14,16
  6671                        	.sym	INT,0,5,14,16
  6672                        	.sym	WORD,0,5,14,16
  6673                        	.sym	PBYTE,0,142,14,32
  6674                        	.sym	BYTE,0,14,14,8
  6675                        	.sym	IOPORT,0,142,14,32
  6676                        	.sym	PUCHAR,0,142,14,32
  6677                        	.sym	UCHAR,0,14,14,8
  6678                        	.sym	LPWCSTR,0,142,14,32
  6679                        	.sym	LPCSTR,0,142,14,32
  6680                        	.sym	LPSTR,0,142,14,32
  6681                        	.sym	LPCHAR,0,142,14,32
  6682                        	.sym	CHAR,0,14,14,8
  6683                        	.sym	LPVOID,0,129,14,32
  6684                        	.sym	VOID,0,1,14,32
  6685                        	end


      Lines assembled: 6685
      Errors: 0
